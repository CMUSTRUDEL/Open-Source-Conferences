Title: PHP UK Conference 2011 - Agility and quality, by Sebastian Bergmann
Publication date: 2012-03-15
Playlist: PHP UK Conference 2011
Description: 
	
Captions: 
	00:00:02,810 --> 00:00:06,859
good morning good afternoon I mean it's

00:00:05,090 --> 00:00:10,549
two minutes past noon so it's afternoon

00:00:06,859 --> 00:00:14,209
hi welcome to this session on agility

00:00:10,549 --> 00:00:16,730
and quality that's what I usually look

00:00:14,209 --> 00:00:21,650
like when I go out to a customer to help

00:00:16,730 --> 00:00:23,810
them so hi my name is Sebastian when I'm

00:00:21,650 --> 00:00:25,999
not wearing a suit which means i'm not

00:00:23,810 --> 00:00:31,329
working at a customer trying to help

00:00:25,999 --> 00:00:34,250
them build better PHP software I'm

00:00:31,329 --> 00:00:36,080
working most of the time on page per

00:00:34,250 --> 00:00:40,700
unit which I've been doing for almost 10

00:00:36,080 --> 00:00:43,220
years now contract at some point I

00:00:40,700 --> 00:00:45,830
regularly from time to time still

00:00:43,220 --> 00:00:48,620
contribute to PHP a bit be it in testing

00:00:45,830 --> 00:00:50,900
PHP before releases are made or coming

00:00:48,620 --> 00:00:54,200
up with crazy ideas like I really need

00:00:50,900 --> 00:00:56,860
this feature and this is why I'm just

00:00:54,200 --> 00:01:00,260
doing some bug fixing here and there

00:00:56,860 --> 00:01:02,120
there's some functionality in PHP that

00:01:00,260 --> 00:01:05,449
are not really really proud of but it's

00:01:02,120 --> 00:01:09,229
there because it was needed to test some

00:01:05,449 --> 00:01:12,020
really legacy PHP projects and as of a

00:01:09,229 --> 00:01:13,880
couple of months ago I'm also an Apache

00:01:12,020 --> 00:01:16,130
committer and a member of the apache

00:01:13,880 --> 00:01:18,170
software foundation because one of my

00:01:16,130 --> 00:01:20,450
open source projects where I contributed

00:01:18,170 --> 00:01:21,560
for a couple of years to move under the

00:01:20,450 --> 00:01:24,020
umbrella of the apache software

00:01:21,560 --> 00:01:25,369
foundation that's the detail components

00:01:24,020 --> 00:01:28,460
they used to be known at the easy

00:01:25,369 --> 00:01:30,229
components still the same software still

00:01:28,460 --> 00:01:31,609
the great software quality that it was

00:01:30,229 --> 00:01:34,219
before so the great documentation

00:01:31,609 --> 00:01:35,899
everything just now under the umbrella

00:01:34,219 --> 00:01:40,490
of the apache software foundation it's

00:01:35,899 --> 00:01:42,859
the first major PHP project that is now

00:01:40,490 --> 00:01:46,069
official Apache project still in

00:01:42,859 --> 00:01:47,389
incubation there which means that we

00:01:46,069 --> 00:01:52,579
don't have any release yet this is

00:01:47,389 --> 00:01:54,079
hopefully going to change soon yeah and

00:01:52,579 --> 00:01:57,079
then also something with some people

00:01:54,079 --> 00:02:00,079
call practitioners of academic computing

00:01:57,079 --> 00:02:02,329
yes i'm a member of ACM and I Triple E

00:02:00,079 --> 00:02:04,639
so I can when I see something

00:02:02,329 --> 00:02:07,249
interesting read really expensive

00:02:04,639 --> 00:02:09,149
expensive articles for slightly reduced

00:02:07,249 --> 00:02:13,030
price because mmm

00:02:09,149 --> 00:02:14,950
I still don't really grasp this whole

00:02:13,030 --> 00:02:17,319
concept of academic publishing that you

00:02:14,950 --> 00:02:18,519
have to pay really enormous amounts of

00:02:17,319 --> 00:02:20,769
money to read something that is

00:02:18,519 --> 00:02:25,389
interested in any valuable to everyone

00:02:20,769 --> 00:02:28,989
and should be free but that's how it

00:02:25,389 --> 00:02:33,069
goes so yes so this presentation is

00:02:28,989 --> 00:02:35,349
about agility and quality two aspects

00:02:33,069 --> 00:02:39,189
that you really want to have in one

00:02:35,349 --> 00:02:41,250
software development and to start off

00:02:39,189 --> 00:02:48,040
with to break the kind of break the ice

00:02:41,250 --> 00:02:50,769
I'm going to tell you a story well

00:02:48,040 --> 00:02:53,409
something happened at the google test

00:02:50,769 --> 00:02:56,680
automation conference last year in

00:02:53,409 --> 00:03:00,280
october in hyderabad india where i met

00:02:56,680 --> 00:03:02,680
this guy from Greece who works for a

00:03:00,280 --> 00:03:05,560
german company in switzerland on a big

00:03:02,680 --> 00:03:08,139
software project and his name was

00:03:05,560 --> 00:03:12,819
vasilis and over dinner we realized that

00:03:08,139 --> 00:03:17,109
we have some similar interests so not

00:03:12,819 --> 00:03:19,870
only are we really interested in testing

00:03:17,109 --> 00:03:22,449
software building software continuous

00:03:19,870 --> 00:03:24,970
integration and team management and

00:03:22,449 --> 00:03:26,709
stuff like that everything trying to

00:03:24,970 --> 00:03:28,780
make a software development team more

00:03:26,709 --> 00:03:32,650
efficient at producing great quality of

00:03:28,780 --> 00:03:35,650
software but we also share a common

00:03:32,650 --> 00:03:37,659
pastime so while I was still in high

00:03:35,650 --> 00:03:41,430
school I did a lot of pen and paper

00:03:37,659 --> 00:03:44,349
role-playing games which came out in

00:03:41,430 --> 00:03:47,639
1974 dungeons and dragons in the u.s.

00:03:44,349 --> 00:03:51,969
became really really popular it took

00:03:47,639 --> 00:03:56,379
some 68 years to follow for this contact

00:03:51,969 --> 00:03:59,469
a concept to come over the ocean and to

00:03:56,379 --> 00:04:01,840
Germany under the name of the dark I I

00:03:59,469 --> 00:04:04,000
think it is the English version of the

00:04:01,840 --> 00:04:07,090
shots of it so that's what we played in

00:04:04,000 --> 00:04:10,090
high school and then 30 years later we

00:04:07,090 --> 00:04:12,539
now have modern computers and the

00:04:10,090 --> 00:04:15,189
internet so we can play similar games

00:04:12,539 --> 00:04:17,560
online like for instance world of

00:04:15,189 --> 00:04:18,670
warcraft which i recently started

00:04:17,560 --> 00:04:20,530
playing

00:04:18,670 --> 00:04:22,510
so if you have never seen one of

00:04:20,530 --> 00:04:27,160
warcraft this is not what it looks like

00:04:22,510 --> 00:04:29,980
out of the box this is um it looks like

00:04:27,160 --> 00:04:31,750
a user interface fail and that is

00:04:29,980 --> 00:04:37,750
because I'm using some add-ons that or

00:04:31,750 --> 00:04:39,160
not well they should not probably some

00:04:37,750 --> 00:04:40,600
of them should probably be turned off

00:04:39,160 --> 00:04:42,640
for this particular rate instance

00:04:40,600 --> 00:04:46,120
because everyone is standing in the same

00:04:42,640 --> 00:04:48,100
place so all of this ambien information

00:04:46,120 --> 00:04:53,830
that is in there appears in the same

00:04:48,100 --> 00:04:55,890
place but yeah we manage so I had this

00:04:53,830 --> 00:05:00,100
discussion with facilities over dinner

00:04:55,890 --> 00:05:02,470
about and in the beginning it was half

00:05:00,100 --> 00:05:03,640
jokingly over dinner that we were

00:05:02,470 --> 00:05:07,540
talking yeah there's a lot of the

00:05:03,640 --> 00:05:10,450
similarities between a team of players

00:05:07,540 --> 00:05:12,640
in the online role-playing game such as

00:05:10,450 --> 00:05:14,350
the one the fee plane and software

00:05:12,640 --> 00:05:17,320
development teams there are different

00:05:14,350 --> 00:05:19,180
roles that different people have to

00:05:17,320 --> 00:05:22,870
fulfill for the whole team for the whole

00:05:19,180 --> 00:05:24,760
project to be successful and Blizzard

00:05:22,870 --> 00:05:27,400
the creators of world of warcraft did an

00:05:24,760 --> 00:05:30,160
amazing job indistinct in distilling

00:05:27,400 --> 00:05:32,740
these different roles that you have in

00:05:30,160 --> 00:05:34,150
pen and paper roll plane where you can

00:05:32,740 --> 00:05:35,440
eventually basically do whatever you

00:05:34,150 --> 00:05:39,130
want yes there are some certain

00:05:35,440 --> 00:05:40,750
contraindicated in the end can say yes

00:05:39,130 --> 00:05:42,940
this is what you're allowed to do and

00:05:40,750 --> 00:05:44,920
this is your job and whatever and they

00:05:42,940 --> 00:05:48,930
really distilled it down dumbed it down

00:05:44,920 --> 00:05:51,610
into three basic rules and you've it's

00:05:48,930 --> 00:05:53,710
kind of surprising to some extent ur to

00:05:51,610 --> 00:05:56,440
find these same types of roles in

00:05:53,710 --> 00:05:59,590
software project so for instance a

00:05:56,440 --> 00:06:02,140
typical adventuring party consists of

00:05:59,590 --> 00:06:05,620
five players for a really small instance

00:06:02,140 --> 00:06:08,650
dungeon and you have one tank one healer

00:06:05,620 --> 00:06:11,710
and three so-called damage leaders and

00:06:08,650 --> 00:06:14,830
it gets really really really hard to

00:06:11,710 --> 00:06:16,630
survive an accomplished the goal if you

00:06:14,830 --> 00:06:19,360
mess up with these rules if you say okay

00:06:16,630 --> 00:06:21,810
i don't take a healer to the luncheon

00:06:19,360 --> 00:06:24,580
guest and you're probably going to die

00:06:21,810 --> 00:06:27,940
and that's not what you want and it's

00:06:24,580 --> 00:06:30,550
very similar in software projects so

00:06:27,940 --> 00:06:32,580
whatever talking is we met we figure out

00:06:30,550 --> 00:06:36,100
here stairs lots of

00:06:32,580 --> 00:06:42,130
similarities between the two so we

00:06:36,100 --> 00:06:44,050
distilled it down a bit so after G tank

00:06:42,130 --> 00:06:46,540
vasilis wrote a blog posting where he

00:06:44,050 --> 00:06:51,100
goes into much more detail but the gist

00:06:46,540 --> 00:06:54,670
of it is the following so you need a

00:06:51,100 --> 00:06:58,030
tank right the tanks job in the in world

00:06:54,670 --> 00:07:02,260
of warcraft is to keep the so-called

00:06:58,030 --> 00:07:04,750
Admiral which means keeping the monsters

00:07:02,260 --> 00:07:06,310
busy so they attack him and lock the

00:07:04,750 --> 00:07:09,370
healer and what the damage dealer so

00:07:06,310 --> 00:07:12,130
they can do their job and in software

00:07:09,370 --> 00:07:15,310
projects your project manager is your

00:07:12,130 --> 00:07:18,190
tank he protects your developers from

00:07:15,310 --> 00:07:22,030
the customer from the client they make

00:07:18,190 --> 00:07:23,530
sure that project well the software

00:07:22,030 --> 00:07:26,560
developers can actually do the job and

00:07:23,530 --> 00:07:30,100
accomplish the task and if the project

00:07:26,560 --> 00:07:35,350
manager loses a Grove if the customer

00:07:30,100 --> 00:07:37,210
has the opportunity to directly tell the

00:07:35,350 --> 00:07:39,460
software developers what he or she

00:07:37,210 --> 00:07:42,520
thinks they should be doing then you

00:07:39,460 --> 00:07:45,400
wipe which means everybody dies and it's

00:07:42,520 --> 00:07:48,520
not happy and has to start over and that

00:07:45,400 --> 00:07:51,700
is not what you want and of course you

00:07:48,520 --> 00:07:54,220
need a healer heinous awesome they keep

00:07:51,700 --> 00:07:57,520
your life and your operations engineers

00:07:54,220 --> 00:08:02,650
on your healers when your operations

00:07:57,520 --> 00:08:05,890
team gets the aggro then for instance

00:08:02,650 --> 00:08:07,990
flaky infrastructure makes it hard or

00:08:05,890 --> 00:08:10,990
impossible for the software developers

00:08:07,990 --> 00:08:13,600
to do your job then you like when you

00:08:10,990 --> 00:08:15,310
have bad communication between your

00:08:13,600 --> 00:08:17,080
operations people and your software

00:08:15,310 --> 00:08:20,080
developers then you want it's amazing

00:08:17,080 --> 00:08:23,650
how many companies are as a consultant

00:08:20,080 --> 00:08:25,690
come in to weather is still a situation

00:08:23,650 --> 00:08:28,270
that the operations people don't like to

00:08:25,690 --> 00:08:30,510
talk to software developers so it's

00:08:28,270 --> 00:08:33,190
basically two completely separate teams

00:08:30,510 --> 00:08:35,919
the software developers developed a

00:08:33,190 --> 00:08:39,250
software and at some point handed off to

00:08:35,919 --> 00:08:40,750
operations and then operations hopefully

00:08:39,250 --> 00:08:43,310
does their job and deploys the

00:08:40,750 --> 00:08:46,370
application and runs it and up

00:08:43,310 --> 00:08:48,529
it smoothly that doesn't work however

00:08:46,370 --> 00:08:51,460
when the software developers never get a

00:08:48,529 --> 00:08:58,960
chance during development to run this on

00:08:51,460 --> 00:09:01,130
under life circumstances so sometimes

00:08:58,960 --> 00:09:04,550
the application just does not perform

00:09:01,130 --> 00:09:08,870
and then in some silly settings it's the

00:09:04,550 --> 00:09:10,400
operations people's job to improve the

00:09:08,870 --> 00:09:12,410
performance which is not really the job

00:09:10,400 --> 00:09:16,160
because they just just install it and

00:09:12,410 --> 00:09:17,990
have everything else on the control so

00:09:16,160 --> 00:09:19,690
there's a lot of movement are going on

00:09:17,990 --> 00:09:23,080
in the agile software development

00:09:19,690 --> 00:09:25,430
especially in the web environments where

00:09:23,080 --> 00:09:27,320
you're trying to get more cooperation

00:09:25,430 --> 00:09:29,210
between those two teams and we'll come

00:09:27,320 --> 00:09:30,800
back to that at towards the end of the

00:09:29,210 --> 00:09:35,330
presentations are in the name of death

00:09:30,800 --> 00:09:37,130
ops so to quickly sum up this analogy to

00:09:35,330 --> 00:09:40,550
world of warcraft your software

00:09:37,130 --> 00:09:42,650
developers are your damage dealers the

00:09:40,550 --> 00:09:45,760
coders and testers they build the

00:09:42,650 --> 00:09:51,500
software they test the software and they

00:09:45,760 --> 00:09:54,290
well get the job done basically so if

00:09:51,500 --> 00:09:57,500
the developers are working on multiple

00:09:54,290 --> 00:10:00,920
tasks on multiple targets and just

00:09:57,500 --> 00:10:05,030
spread out our to attack many multiple

00:10:00,920 --> 00:10:07,760
enemies then sooner or later the tank

00:10:05,030 --> 00:10:09,920
cannot protect them anymore and again

00:10:07,760 --> 00:10:13,070
you wipe and this is not a happy place

00:10:09,920 --> 00:10:14,690
to be and you don't want that so yes you

00:10:13,070 --> 00:10:17,330
may be wondering if I'm actually

00:10:14,690 --> 00:10:20,240
starting to talk about something useful

00:10:17,330 --> 00:10:21,920
at some point hopefully i am now because

00:10:20,240 --> 00:10:23,920
when things go wrong in a software

00:10:21,920 --> 00:10:26,839
project when your development team wipes

00:10:23,920 --> 00:10:30,110
the team has to work overtime and cancel

00:10:26,839 --> 00:10:32,570
vacations and more often than not office

00:10:30,110 --> 00:10:35,330
accidents like this one happened you

00:10:32,570 --> 00:10:37,640
don't want that and more often about

00:10:35,330 --> 00:10:42,140
deadlines and quality goals are missed

00:10:37,640 --> 00:10:46,730
nevertheless and there's an interesting

00:10:42,140 --> 00:10:48,620
article that gives this whole problem a

00:10:46,730 --> 00:10:50,720
name which is useful to have

00:10:48,620 --> 00:10:52,880
you can actually discuss about the pit

00:10:50,720 --> 00:10:56,900
and refer to it by name and it's the

00:10:52,880 --> 00:10:59,120
time money quality pic to fallacy so the

00:10:56,900 --> 00:11:02,240
proposition there is as a project

00:10:59,120 --> 00:11:04,880
manager you basically have only three

00:11:02,240 --> 00:11:06,860
valves that you can tweak in your

00:11:04,880 --> 00:11:10,130
project they have the time you have the

00:11:06,860 --> 00:11:12,260
money and here's the quality and you can

00:11:10,130 --> 00:11:15,710
say okay I don't care about the deadline

00:11:12,260 --> 00:11:18,920
I want to deliver high quality and I

00:11:15,710 --> 00:11:20,210
only have this many developers so if I

00:11:18,920 --> 00:11:22,100
cannot get this done by the original

00:11:20,210 --> 00:11:28,310
deadline I have to postpone the deadline

00:11:22,100 --> 00:11:30,140
or okay I cannot skip the deadline and I

00:11:28,310 --> 00:11:32,900
also don't want to cut down on quality

00:11:30,140 --> 00:11:35,030
so maybe I can invest a little bit more

00:11:32,900 --> 00:11:38,180
money increase the budget and put

00:11:35,030 --> 00:11:40,100
another developer on the problem which

00:11:38,180 --> 00:11:41,840
not always works because just putting

00:11:40,100 --> 00:11:45,710
more manpower onto a problem doesn't

00:11:41,840 --> 00:11:48,530
necessarily makes it go faster there's

00:11:45,710 --> 00:11:52,720
this chinese proverb that nine women

00:11:48,530 --> 00:11:56,300
cannot deliver a baby in one month so

00:11:52,720 --> 00:11:58,520
only to some degree can you increase the

00:11:56,300 --> 00:12:01,460
project speed by putting more money on

00:11:58,520 --> 00:12:04,460
it and more often than not the project

00:12:01,460 --> 00:12:08,750
manager decides to cut down on quality

00:12:04,460 --> 00:12:10,880
and the project manager is kind of

00:12:08,750 --> 00:12:12,920
special in a way because he's the only

00:12:10,880 --> 00:12:15,230
one who can turn all three of these

00:12:12,920 --> 00:12:17,810
wells you can say okay I increase the

00:12:15,230 --> 00:12:20,990
time I increase the budget or I reduced

00:12:17,810 --> 00:12:23,630
quality but for the developers that

00:12:20,990 --> 00:12:26,150
really like to deliver high quality it

00:12:23,630 --> 00:12:28,100
up they can only react to what the

00:12:26,150 --> 00:12:30,770
project manager says which means they

00:12:28,100 --> 00:12:35,330
can only be told to reduce the quality

00:12:30,770 --> 00:12:37,550
which is not nice so in many aspects of

00:12:35,330 --> 00:12:41,950
life we have learned from experience

00:12:37,550 --> 00:12:47,030
that quality can be traded off for cost

00:12:41,950 --> 00:12:49,010
right shall I go to Zurich and by the

00:12:47,030 --> 00:12:50,420
best chocolate that I know explain me or

00:12:49,010 --> 00:12:52,040
should I just go to the supermarket

00:12:50,420 --> 00:12:55,340
around the corner and buy something

00:12:52,040 --> 00:12:56,690
cheap that does not taste as nice if I

00:12:55,340 --> 00:12:57,139
don't have the time or around half the

00:12:56,690 --> 00:12:58,759
money

00:12:57,139 --> 00:13:01,459
to go to Zurich and buy my favorite

00:12:58,759 --> 00:13:04,160
chocolate and if I can lift something

00:13:01,459 --> 00:13:06,920
else then it is probably nice if I

00:13:04,160 --> 00:13:10,069
cannot afford to Ferrari and and I

00:13:06,920 --> 00:13:11,149
really want one or well not that I don't

00:13:10,069 --> 00:13:14,230
even have a driver's license oh I don't

00:13:11,149 --> 00:13:16,730
really get an example I'm more likely

00:13:14,230 --> 00:13:18,889
understanding it chocolate one but

00:13:16,730 --> 00:13:24,199
anyway as a result we are used to any

00:13:18,889 --> 00:13:28,839
idea that quality costs more and we come

00:13:24,199 --> 00:13:31,309
back later on to that idea anyway so

00:13:28,839 --> 00:13:33,859
finally let's talk a little bit about HR

00:13:31,309 --> 00:13:37,790
I'm not going into too much detail about

00:13:33,859 --> 00:13:40,939
scrum and agile processes per se that is

00:13:37,790 --> 00:13:42,529
more like the domain of toast and

00:13:40,939 --> 00:13:46,819
witness presentation right in this room

00:13:42,529 --> 00:13:48,859
right after lunch so scrum is a very

00:13:46,819 --> 00:13:51,470
popular agile method for project

00:13:48,859 --> 00:13:53,389
management references the product

00:13:51,470 --> 00:13:55,549
backlog that keeps a high level lists

00:13:53,389 --> 00:13:58,879
that is maintained throughout the entire

00:13:55,549 --> 00:14:00,889
project is where all the future requests

00:13:58,879 --> 00:14:04,249
go into and then for each sprint which

00:14:00,889 --> 00:14:06,110
usually is a week or two take items from

00:14:04,249 --> 00:14:07,999
the product backlog and put into the

00:14:06,110 --> 00:14:09,799
Sprint backlog which is then owned by

00:14:07,999 --> 00:14:13,519
the team and the team prioritizes the

00:14:09,799 --> 00:14:15,889
items in there and there are also

00:14:13,519 --> 00:14:19,069
responsible for estimating how long it

00:14:15,889 --> 00:14:21,980
will take whereas the product owner is

00:14:19,069 --> 00:14:23,809
responsible for prioritizing the items

00:14:21,980 --> 00:14:28,749
in the backlog by business value and

00:14:23,809 --> 00:14:32,299
this is a really nice management process

00:14:28,749 --> 00:14:36,790
but it is not an agile method for

00:14:32,299 --> 00:14:40,549
software engineering there's plenty of

00:14:36,790 --> 00:14:43,129
full stack edge alarm software

00:14:40,549 --> 00:14:44,899
development frameworks out there like

00:14:43,129 --> 00:14:47,119
extreme programming that tells you here

00:14:44,899 --> 00:14:48,470
is a list of five six things that you

00:14:47,119 --> 00:14:50,959
should do and then you are doing extreme

00:14:48,470 --> 00:14:55,449
programming there are other development

00:14:50,959 --> 00:14:58,999
practices but it all comes down to a

00:14:55,449 --> 00:15:02,589
couple of really common elements of

00:14:58,999 --> 00:15:05,779
agile software development and each team

00:15:02,589 --> 00:15:07,789
has to pick and choose from this catalog

00:15:05,779 --> 00:15:08,430
of best practices of adult software

00:15:07,789 --> 00:15:11,610
development

00:15:08,430 --> 00:15:14,730
works for them so for instance a lot of

00:15:11,610 --> 00:15:16,320
people have problems with extreme

00:15:14,730 --> 00:15:21,540
programming which demands pair

00:15:16,320 --> 00:15:23,510
programming and over the last five or

00:15:21,540 --> 00:15:26,310
six years since I've been doing

00:15:23,510 --> 00:15:28,020
consulting with regard to Quality

00:15:26,310 --> 00:15:31,709
Assurance in PHP projects for instance I

00:15:28,020 --> 00:15:34,470
have never seen a company that really

00:15:31,709 --> 00:15:38,220
does pair programming all the time what

00:15:34,470 --> 00:15:40,529
I see instead is that for some tricky

00:15:38,220 --> 00:15:42,750
algorithm or from for some serious bug

00:15:40,529 --> 00:15:45,390
fixing it in most debugging you do

00:15:42,750 --> 00:15:47,820
temporary pair programming to spread the

00:15:45,390 --> 00:15:50,970
knowledge and that seems to work out for

00:15:47,820 --> 00:15:52,770
most people so what are those really

00:15:50,970 --> 00:15:55,770
common elements of agile software

00:15:52,770 --> 00:15:57,540
development this regard to coding you

00:15:55,770 --> 00:16:00,180
have collective code ownership which

00:15:57,540 --> 00:16:05,070
means anyone can modify any code at any

00:16:00,180 --> 00:16:08,870
time which requires that the team agrees

00:16:05,070 --> 00:16:11,279
upon the common coding standard select

00:16:08,870 --> 00:16:16,170
everyone actually can read every others

00:16:11,279 --> 00:16:18,360
code the original authorship of the code

00:16:16,170 --> 00:16:22,560
is immaterial so if you see something

00:16:18,360 --> 00:16:24,690
that looks broken or impedes the current

00:16:22,560 --> 00:16:30,029
development that you want to do then you

00:16:24,690 --> 00:16:32,520
allowed to change it and since we have

00:16:30,029 --> 00:16:36,150
unit tests and or ideally test-driven

00:16:32,520 --> 00:16:39,600
development you have an abundant suit of

00:16:36,150 --> 00:16:41,010
automated tests which creates confidence

00:16:39,600 --> 00:16:43,220
so you make a change to run the test

00:16:41,010 --> 00:16:46,770
they tell you everything is fine and

00:16:43,220 --> 00:16:48,450
even if that is not enough we still have

00:16:46,770 --> 00:16:50,130
version control which which provides

00:16:48,450 --> 00:16:53,130
some sort of insurance if you break

00:16:50,130 --> 00:16:55,589
something you can always go back to this

00:16:53,130 --> 00:16:57,270
data it was before and then you can go

00:16:55,589 --> 00:16:58,890
one step further and use continuous

00:16:57,270 --> 00:17:01,320
integration and continuous inspection

00:16:58,890 --> 00:17:03,079
and have all of this automated in such a

00:17:01,320 --> 00:17:06,929
way that every time you change the code

00:17:03,079 --> 00:17:09,030
some computer somewhere on the network

00:17:06,929 --> 00:17:11,040
shakes out the latest set of the code

00:17:09,030 --> 00:17:13,559
runs all the tools if you're about to

00:17:11,040 --> 00:17:15,209
see runs the tests and reports yes

00:17:13,559 --> 00:17:18,209
everything is fine no you broke

00:17:15,209 --> 00:17:19,950
something and this ensures that the

00:17:18,209 --> 00:17:23,850
system is always in

00:17:19,950 --> 00:17:25,440
working order and since you're doing

00:17:23,850 --> 00:17:27,840
test-driven development you know that

00:17:25,440 --> 00:17:29,730
its system has a high quality because

00:17:27,840 --> 00:17:32,370
the program has used tester development

00:17:29,730 --> 00:17:34,530
and continually improve the design of

00:17:32,370 --> 00:17:38,430
the application and improve the code

00:17:34,530 --> 00:17:40,770
through factoring okay then it comes to

00:17:38,430 --> 00:17:44,160
testing and all code must have unit

00:17:40,770 --> 00:17:46,230
tests or our coach must pass all unit

00:17:44,160 --> 00:17:50,460
tests before release and when the back

00:17:46,230 --> 00:17:53,310
is found you write more tests and as I

00:17:50,460 --> 00:17:55,920
mentioned earlier this set of agile

00:17:53,310 --> 00:17:58,320
practices now extends from software

00:17:55,920 --> 00:18:01,080
development into operations and

00:17:58,320 --> 00:18:03,210
maintenance and so operations in

00:18:01,080 --> 00:18:04,830
operations what we see more and more is

00:18:03,210 --> 00:18:08,490
continuous deployment and continuous

00:18:04,830 --> 00:18:10,410
delivery so that you don't have a

00:18:08,490 --> 00:18:12,510
handoff from the software development

00:18:10,410 --> 00:18:14,550
team to some operations people that then

00:18:12,510 --> 00:18:17,910
may or may not approve to install the

00:18:14,550 --> 00:18:20,520
new version of the software instead you

00:18:17,910 --> 00:18:22,020
make a change to the software it's

00:18:20,520 --> 00:18:23,190
automatically changed automatically

00:18:22,020 --> 00:18:25,470
picked up by the continuous integration

00:18:23,190 --> 00:18:27,840
server continuous integration services

00:18:25,470 --> 00:18:30,900
yes it works fine that it makes a test

00:18:27,840 --> 00:18:32,910
deployment to a production like

00:18:30,900 --> 00:18:35,280
environment once the selenium tests

00:18:32,910 --> 00:18:41,910
against that that's okay it also works

00:18:35,280 --> 00:18:44,880
there so I just push it life all of

00:18:41,910 --> 00:18:48,080
these agile development processes put a

00:18:44,880 --> 00:18:50,610
high focus on software quality and

00:18:48,080 --> 00:18:55,260
software quality means different things

00:18:50,610 --> 00:18:57,480
to different people the classic

00:18:55,260 --> 00:18:59,850
definition of software quality is what

00:18:57,480 --> 00:19:03,120
is now referred to nowadays referred to

00:18:59,850 --> 00:19:05,370
as external quality is what a user can

00:19:03,120 --> 00:19:08,430
understand because he or she can see it

00:19:05,370 --> 00:19:11,960
feel it touch it whatever and it's also

00:19:08,430 --> 00:19:15,080
what management usually understands and

00:19:11,960 --> 00:19:17,460
this deals with functionality usability

00:19:15,080 --> 00:19:22,740
reliability perform and supportability

00:19:17,460 --> 00:19:25,380
and so on it's basically what you can

00:19:22,740 --> 00:19:27,420
see as far as you can see something with

00:19:25,380 --> 00:19:28,830
regard to software does the application

00:19:27,420 --> 00:19:30,809
work yet in fasting

00:19:28,830 --> 00:19:35,399
yes awesome we can deploy a great

00:19:30,809 --> 00:19:37,289
product your engineers however may

00:19:35,399 --> 00:19:39,299
disagree with that because they are not

00:19:37,289 --> 00:19:41,460
really interested in external quality

00:19:39,299 --> 00:19:44,130
they are interested in internal quality

00:19:41,460 --> 00:19:46,890
aspects so for instance they really like

00:19:44,130 --> 00:19:49,320
working code that is unique and not

00:19:46,890 --> 00:19:51,929
duplicated that is simple and not

00:19:49,320 --> 00:19:55,919
complicated clear and not confusing

00:19:51,929 --> 00:19:58,950
puzzling and more importantly easy to

00:19:55,919 --> 00:20:05,010
adapt easy to extend easy to it to test

00:19:58,950 --> 00:20:08,100
and if you look at some really popular

00:20:05,010 --> 00:20:10,110
common PHP view of the chef applications

00:20:08,100 --> 00:20:13,169
most of them have really really good

00:20:10,110 --> 00:20:14,789
external quality the website looks nice

00:20:13,169 --> 00:20:17,360
the product looks nice it's really easy

00:20:14,789 --> 00:20:20,159
to install it's really easy to get going

00:20:17,360 --> 00:20:22,200
but then at some point you need to adapt

00:20:20,159 --> 00:20:25,080
or extend the software and then you look

00:20:22,200 --> 00:20:28,409
at the code and see that the eternal

00:20:25,080 --> 00:20:30,779
internal quality is lacking and it gets

00:20:28,409 --> 00:20:32,190
really expensive really quickly to make

00:20:30,779 --> 00:20:35,690
the modifications that you want to make

00:20:32,190 --> 00:20:43,289
and now I'm not going to name names you

00:20:35,690 --> 00:20:45,690
sorry about that so let's focus the test

00:20:43,289 --> 00:20:47,399
driven development for a bit which is a

00:20:45,690 --> 00:20:49,470
disciplined software development

00:20:47,399 --> 00:20:52,320
practice that focuses on software design

00:20:49,470 --> 00:20:55,169
it's often misunderstood guess just with

00:20:52,320 --> 00:20:56,519
the practice for writing tests yes you

00:20:55,169 --> 00:20:58,669
can think of it like that but then you

00:20:56,519 --> 00:21:00,870
are sort of missing a point is about

00:20:58,669 --> 00:21:04,620
driving the development driving the

00:21:00,870 --> 00:21:07,019
coding process by first writing the

00:21:04,620 --> 00:21:09,630
automated tests and thinking about what

00:21:07,019 --> 00:21:12,679
do I want the API for this code FML

00:21:09,630 --> 00:21:14,850
bulbs to write look like how the

00:21:12,679 --> 00:21:16,080
intuitive for everyone that wants to

00:21:14,850 --> 00:21:18,870
reuse the code at some point in the

00:21:16,080 --> 00:21:20,880
future and then you write the production

00:21:18,870 --> 00:21:22,590
code and you run the test and the test

00:21:20,880 --> 00:21:24,149
will tell you yes you are done that this

00:21:22,590 --> 00:21:28,350
matches your specification that you

00:21:24,149 --> 00:21:31,220
wrote before and you do that in short

00:21:28,350 --> 00:21:31,220
frequent iterations

00:21:31,290 --> 00:21:39,150
and there are plenty of studies out

00:21:34,620 --> 00:21:41,910
there both traditional studies in the

00:21:39,150 --> 00:21:44,760
academic sense meaning ACM lighter

00:21:41,910 --> 00:21:46,650
believe publications or just blog

00:21:44,760 --> 00:21:49,070
postings by companies that share the

00:21:46,650 --> 00:21:52,580
experience of how they develop code and

00:21:49,070 --> 00:21:55,470
all of them agree or most of them agree

00:21:52,580 --> 00:21:57,660
that if you follow this practice you get

00:21:55,470 --> 00:22:00,210
code that has fewer defects because if

00:21:57,660 --> 00:22:01,860
you make mistakes you'll notice them

00:22:00,210 --> 00:22:04,760
really early on and they don't propagate

00:22:01,860 --> 00:22:08,700
through your system and if you made them

00:22:04,760 --> 00:22:10,980
you discover them many within minutes

00:22:08,700 --> 00:22:14,340
after writing the codes so unless you

00:22:10,980 --> 00:22:15,690
have a really bad short-term memory you

00:22:14,340 --> 00:22:18,000
know what you did five minutes ago you

00:22:15,690 --> 00:22:20,070
can go into the code you don't need a

00:22:18,000 --> 00:22:21,510
debugger you don't need to read through

00:22:20,070 --> 00:22:23,040
a lot of code because you know exactly

00:22:21,510 --> 00:22:27,810
what you did five years ago and just fix

00:22:23,040 --> 00:22:30,210
it you also tend to write code that has

00:22:27,810 --> 00:22:33,420
fewer statements that does a copy

00:22:30,210 --> 00:22:35,070
accomplishes to go with less fluff

00:22:33,420 --> 00:22:37,560
boilerplate code whatever you want to

00:22:35,070 --> 00:22:39,810
call it you also write code that is

00:22:37,560 --> 00:22:41,910
easier to understand from a logical

00:22:39,810 --> 00:22:44,340
complexity point of view there's a lot

00:22:41,910 --> 00:22:46,050
of arm software metrics like the

00:22:44,340 --> 00:22:49,680
cyclomatic complexity or the animals

00:22:46,050 --> 00:22:52,680
complexity that try to assign a value to

00:22:49,680 --> 00:22:56,640
how hard piece of code is to understand

00:22:52,680 --> 00:22:58,620
by aesthetically analyzing it and lower

00:22:56,640 --> 00:23:01,860
computational complexity also means that

00:22:58,620 --> 00:23:04,410
you need less tests to fully test it and

00:23:01,860 --> 00:23:06,000
it also means that a human being that

00:23:04,410 --> 00:23:08,970
wants to understand what the code does

00:23:06,000 --> 00:23:12,900
needs less time to figure out what the

00:23:08,970 --> 00:23:15,060
code is actually doing also leads to

00:23:12,900 --> 00:23:18,570
lower coupling between classes between

00:23:15,060 --> 00:23:20,640
plants of the source code which is

00:23:18,570 --> 00:23:22,380
really great when you want to extend or

00:23:20,640 --> 00:23:25,050
change the system so you need to touch

00:23:22,380 --> 00:23:26,700
less code or ideally only need to touch

00:23:25,050 --> 00:23:30,860
code in one place if you want to make

00:23:26,700 --> 00:23:34,110
one change and not to touch everything

00:23:30,860 --> 00:23:36,960
which would be then the so called mikado

00:23:34,110 --> 00:23:38,520
architecture I don't want to touch a

00:23:36,960 --> 00:23:40,570
single piece because then everything

00:23:38,520 --> 00:23:42,250
else falls apart

00:23:40,570 --> 00:23:46,000
especially when you don't have tests in

00:23:42,250 --> 00:23:49,210
a legacy application and naturally since

00:23:46,000 --> 00:23:54,639
we've got the writer tests first we get

00:23:49,210 --> 00:23:56,830
a higher test coverage in volume and of

00:23:54,639 --> 00:23:59,610
course as far as code functionality is

00:23:56,830 --> 00:24:02,799
concerned we do this using unit tests

00:23:59,610 --> 00:24:04,179
which test the unit of code isolated

00:24:02,799 --> 00:24:06,309
from its dependencies and it is really

00:24:04,179 --> 00:24:09,580
important if I just want to test one

00:24:06,309 --> 00:24:12,460
function or one method ideally I should

00:24:09,580 --> 00:24:16,389
only need one object and just call this

00:24:12,460 --> 00:24:19,269
one method that I want to test and if

00:24:16,389 --> 00:24:21,309
flipped method has dependencies I tested

00:24:19,269 --> 00:24:23,679
as isolated as possible from all of its

00:24:21,309 --> 00:24:25,659
dependencies this makes a test much more

00:24:23,679 --> 00:24:27,970
valuable because when it fails I know

00:24:25,659 --> 00:24:29,769
exactly where the root cause for that

00:24:27,970 --> 00:24:31,120
failure can be it can only be in the

00:24:29,769 --> 00:24:33,759
functional method that I just wanted to

00:24:31,120 --> 00:24:35,230
test and not be in some other code that

00:24:33,759 --> 00:24:40,389
is called by some other clothes that is

00:24:35,230 --> 00:24:43,059
called by what I want to test a good

00:24:40,389 --> 00:24:46,120
unit test has a really descriptive name

00:24:43,059 --> 00:24:47,700
and Leslie can be read as an executable

00:24:46,120 --> 00:24:50,820
specification for what the software

00:24:47,700 --> 00:24:53,529
piece of a fragment is supposed to do

00:24:50,820 --> 00:24:55,750
they are automatically evaluated and

00:24:53,529 --> 00:24:58,500
repeatable just because I rerun the test

00:24:55,750 --> 00:25:01,690
it should not give me a different result

00:24:58,500 --> 00:25:03,639
need only a really really simple test

00:25:01,690 --> 00:25:06,789
environment ideally just the one object

00:25:03,639 --> 00:25:08,620
that I mentioned before and for instance

00:25:06,789 --> 00:25:10,659
not to touch the database not touch the

00:25:08,620 --> 00:25:13,360
file system not to talk to a web service

00:25:10,659 --> 00:25:15,820
then it would not be a unit test and yes

00:25:13,360 --> 00:25:17,830
you can write such tests using a unit

00:25:15,820 --> 00:25:21,070
testing frameworks such as page period

00:25:17,830 --> 00:25:22,389
and yes such tests are valuable but

00:25:21,070 --> 00:25:26,620
they're not called unit tests there are

00:25:22,389 --> 00:25:28,750
integration tests and because you have a

00:25:26,620 --> 00:25:32,230
really simple test environment those

00:25:28,750 --> 00:25:34,600
tests tend to be really really fast so

00:25:32,230 --> 00:25:38,529
for instance one of our customers has a

00:25:34,600 --> 00:25:42,399
test suite was about 50 or 60,000 unit

00:25:38,529 --> 00:25:46,120
tests and it still runs in less than one

00:25:42,399 --> 00:25:47,600
and a half minutes or so so running all

00:25:46,120 --> 00:25:49,940
of them gives you immediately

00:25:47,600 --> 00:25:51,200
back and one minute one and a half

00:25:49,940 --> 00:25:59,059
minute is still something that you can

00:25:51,200 --> 00:26:02,710
actually wait for yes and unit tests are

00:25:59,059 --> 00:26:05,179
written with the code not after the code

00:26:02,710 --> 00:26:06,470
this is kind of a more relaxed

00:26:05,179 --> 00:26:09,520
interpretation of of test-driven

00:26:06,470 --> 00:26:12,440
development means some people just

00:26:09,520 --> 00:26:14,030
cannot think like test kind of thing in

00:26:12,440 --> 00:26:17,570
a test driven away or don't want to work

00:26:14,030 --> 00:26:20,120
like that or as in my case I cannot work

00:26:17,570 --> 00:26:22,700
like that I made the experience over the

00:26:20,120 --> 00:26:26,690
years that I cannot use test-driven

00:26:22,700 --> 00:26:28,400
development to develop phpunit because I

00:26:26,690 --> 00:26:31,100
cannot write a test that uses a new

00:26:28,400 --> 00:26:33,220
future of phpunit that is not the other

00:26:31,100 --> 00:26:35,809
so that's a chicken and egg problem I

00:26:33,220 --> 00:26:41,330
know it's a highly specific problem but

00:26:35,809 --> 00:26:43,280
alone I have problems as well so but

00:26:41,330 --> 00:26:46,580
what I do is it as soon as I figure out

00:26:43,280 --> 00:26:48,350
okay yes this code works and it works

00:26:46,580 --> 00:26:50,750
the wing it i wanted to work and i'm

00:26:48,350 --> 00:26:53,120
happy with the API than a writer tests

00:26:50,750 --> 00:26:55,730
right afterward and this is less than an

00:26:53,120 --> 00:26:57,200
hour after work I brought to code so the

00:26:55,730 --> 00:27:03,919
memory is still fresh in a right good

00:26:57,200 --> 00:27:05,929
unit tests hopefully and yes you keep

00:27:03,919 --> 00:27:07,159
these tests as regression test you keep

00:27:05,929 --> 00:27:09,289
them for the future they are an

00:27:07,159 --> 00:27:11,090
investment into the future they allow

00:27:09,289 --> 00:27:12,710
you to verify at some point in the

00:27:11,090 --> 00:27:14,900
future that a change that you just made

00:27:12,710 --> 00:27:17,900
did not break anything it has worked

00:27:14,900 --> 00:27:21,710
fine for the last year which is always

00:27:17,900 --> 00:27:23,659
nice to have if you have never seen a

00:27:21,710 --> 00:27:28,549
unit test especially unit this is what

00:27:23,659 --> 00:27:30,350
it looks like phpunit doesn't really

00:27:28,549 --> 00:27:31,520
care what you name your test classes on

00:27:30,350 --> 00:27:33,200
your test methods there a couple of

00:27:31,520 --> 00:27:35,480
really useful conventions to follow for

00:27:33,200 --> 00:27:36,890
instance the tests for something that is

00:27:35,480 --> 00:27:39,890
called the bank account go into the bank

00:27:36,890 --> 00:27:43,340
account test class and then you have

00:27:39,890 --> 00:27:44,780
public methods that are prefixes test if

00:27:43,340 --> 00:27:46,190
you don't like the physics test you can

00:27:44,780 --> 00:27:49,460
leave it out and annotate

00:27:46,190 --> 00:27:51,559
method is a test and then you give it a

00:27:49,460 --> 00:27:53,929
descriptive name like for instance of

00:27:51,559 --> 00:27:55,519
balance is initially 0 and then you use

00:27:53,929 --> 00:27:57,080
the full power of the PHP programming

00:27:55,519 --> 00:27:59,899
language to express what you want to do

00:27:57,080 --> 00:28:02,509
so first you set up your environment the

00:27:59,899 --> 00:28:04,669
so-called fixture in this case create a

00:28:02,509 --> 00:28:06,470
bank account object call the get balance

00:28:04,669 --> 00:28:08,419
method on the bank account object and

00:28:06,470 --> 00:28:13,190
then use the so-called assertion to

00:28:08,419 --> 00:28:15,710
serve steps the actual value returned by

00:28:13,190 --> 00:28:19,000
the balance balance method matches the

00:28:15,710 --> 00:28:21,409
expected value of zero in this case and

00:28:19,000 --> 00:28:24,110
then you can go to the command line and

00:28:21,409 --> 00:28:25,970
say eh we need to penny contest and it

00:28:24,110 --> 00:28:28,460
will run the test for each test that is

00:28:25,970 --> 00:28:30,289
run to print a single character of

00:28:28,460 --> 00:28:33,289
progress output and everything is fine

00:28:30,289 --> 00:28:35,059
you get adopt and then just some summary

00:28:33,289 --> 00:28:37,970
information in the end there's this

00:28:35,059 --> 00:28:40,309
assumption that all tests should pass

00:28:37,970 --> 00:28:43,279
all the time and only when that is not

00:28:40,309 --> 00:28:45,049
the case phpunit will like any other

00:28:43,279 --> 00:28:48,169
extremely testing framework will become

00:28:45,049 --> 00:28:53,450
more talkative and give you more

00:28:48,169 --> 00:28:55,519
information as you need it so yes just

00:28:53,450 --> 00:28:57,710
some summer information and I mentioned

00:28:55,519 --> 00:28:59,990
earlier that these unit tests can be

00:28:57,710 --> 00:29:03,049
read as an executable specification of

00:28:59,990 --> 00:29:08,389
what the software supposed to do phpunit

00:29:03,049 --> 00:29:10,850
supports that idea by the test box our

00:29:08,389 --> 00:29:12,440
result printer they just say desert s

00:29:10,850 --> 00:29:16,220
talks and it reads back this

00:29:12,440 --> 00:29:18,799
specification for you and you'll get the

00:29:16,220 --> 00:29:20,120
information here yes this is related to

00:29:18,799 --> 00:29:23,269
something that is called a bank account

00:29:20,120 --> 00:29:28,750
and the band is initially 0 we get a

00:29:23,269 --> 00:29:28,750
check mark minutes

00:29:29,740 --> 00:29:40,850
okay fair enough yep okay this just a

00:29:37,340 --> 00:29:44,000
little bit confusion that's fine so

00:29:40,850 --> 00:29:47,270
that's regard to testing unit testing of

00:29:44,000 --> 00:29:50,780
which applications quality assurance of

00:29:47,270 --> 00:29:51,800
PHP projects has gained quite some

00:29:50,780 --> 00:29:54,770
interest over the last couple of years

00:29:51,800 --> 00:29:58,250
so more and more tools for so called

00:29:54,770 --> 00:30:00,920
static analysis of PHP code have come up

00:29:58,250 --> 00:30:02,480
to look at your code and then going over

00:30:00,920 --> 00:30:06,320
some of these tools really really

00:30:02,480 --> 00:30:07,940
briefly so one saying is sometimes

00:30:06,320 --> 00:30:10,880
useful is to know how much code to a

00:30:07,940 --> 00:30:12,980
half is a tool called PHP LLC that gives

00:30:10,880 --> 00:30:17,120
you a really bird's eye view how much

00:30:12,980 --> 00:30:19,070
co2 I have how is it structured it's my

00:30:17,120 --> 00:30:21,620
number one to let us start when I do a

00:30:19,070 --> 00:30:24,110
code review for a customer again that

00:30:21,620 --> 00:30:27,350
year mijn was at 54 code base 55 code

00:30:24,110 --> 00:30:29,830
base 55 street code base am I going to

00:30:27,350 --> 00:30:32,620
have problems this regard to testing

00:30:29,830 --> 00:30:36,350
because all methods are static and

00:30:32,620 --> 00:30:39,320
untestable and so on it's another tool

00:30:36,350 --> 00:30:41,360
called PHP depend which gives you this

00:30:39,320 --> 00:30:48,320
really nice software / voobshe overview

00:30:41,360 --> 00:30:50,330
hiram it among many other things yep and

00:30:48,320 --> 00:30:54,020
there are tools I tell you how the code

00:30:50,330 --> 00:30:55,880
is executed so for instance if you look

00:30:54,020 --> 00:30:57,830
at this piece of code which is the set

00:30:55,880 --> 00:31:01,700
balance method from the bank account

00:30:57,830 --> 00:31:05,780
class we can look at how PHP sees it and

00:31:01,700 --> 00:31:07,970
despite code and can also get a visual

00:31:05,780 --> 00:31:10,280
representation of that and sometimes

00:31:07,970 --> 00:31:12,140
during a code review this is valuable to

00:31:10,280 --> 00:31:14,570
see okay how is the control flow going

00:31:12,140 --> 00:31:21,620
on am i checking all of these paths and

00:31:14,570 --> 00:31:23,030
so on and there are tools that look for

00:31:21,620 --> 00:31:25,010
where something is broken in the source

00:31:23,030 --> 00:31:27,650
code like PHP code sniffer for instance

00:31:25,010 --> 00:31:29,540
and this looks really really boring

00:31:27,650 --> 00:31:32,780
because I'm not violating my own coding

00:31:29,540 --> 00:31:35,390
standard for this simple example project

00:31:32,780 --> 00:31:38,140
so I'm switching over to something where

00:31:35,390 --> 00:31:41,050
I actually find violations in

00:31:38,140 --> 00:31:44,380
this is type of three so you get a

00:31:41,050 --> 00:31:48,070
highlight overview of how often rich

00:31:44,380 --> 00:31:53,020
rule was violated suffering sincerely

00:31:48,070 --> 00:31:54,850
high score is 10 1055 violations of the

00:31:53,020 --> 00:31:56,470
rule that you should not use the arrow

00:31:54,850 --> 00:32:00,400
suppression operator on the shuttle

00:31:56,470 --> 00:32:02,170
operator and you don't really want to

00:32:00,400 --> 00:32:04,750
answer in your code and then you can

00:32:02,170 --> 00:32:08,440
have a look at where this actually

00:32:04,750 --> 00:32:11,200
happens and I'm sure toss then we'll go

00:32:08,440 --> 00:32:14,020
over some of these tools in this

00:32:11,200 --> 00:32:16,360
presentation after lunch again there's

00:32:14,020 --> 00:32:19,870
another tool called PHP ND page PMS

00:32:16,360 --> 00:32:21,520
detector that does more detailed

00:32:19,870 --> 00:32:23,290
analysis of the source code and PHP cosa

00:32:21,520 --> 00:32:25,270
for can and this will tell you about

00:32:23,290 --> 00:32:30,210
unused code for instance or code it is

00:32:25,270 --> 00:32:33,130
too complex to error prone and so on

00:32:30,210 --> 00:32:35,830
there's another tool called peach PCPD

00:32:33,130 --> 00:32:37,420
the copy paste detector that does

00:32:35,830 --> 00:32:41,200
exactly what the name suggests it looks

00:32:37,420 --> 00:32:43,240
sort of liquid code you don't really

00:32:41,200 --> 00:32:46,900
want to have that so this is actually

00:32:43,240 --> 00:32:49,150
quite good less than 1% out of almost

00:32:46,900 --> 00:32:51,370
400 thousand lines of code the high

00:32:49,150 --> 00:32:53,410
scorer I've seen was eighteen percent

00:32:51,370 --> 00:32:59,800
out of the seven million line PHP

00:32:53,410 --> 00:33:01,450
project yeah just imagine seventeen or

00:32:59,800 --> 00:33:02,890
eighteen percent out of seven million

00:33:01,450 --> 00:33:05,500
lines of code how much codes you can

00:33:02,890 --> 00:33:09,630
just delete if you eliminate all the

00:33:05,500 --> 00:33:14,530
duplicate code there's plenty new tools

00:33:09,630 --> 00:33:16,270
that keep coming up although most of

00:33:14,530 --> 00:33:18,400
these tools has something in common in

00:33:16,270 --> 00:33:20,500
that they generate xml log files or

00:33:18,400 --> 00:33:22,960
follow established standards from the

00:33:20,500 --> 00:33:25,270
drama world so for instance phpunit can

00:33:22,960 --> 00:33:27,550
write jail in XML and clover XML for

00:33:25,270 --> 00:33:30,490
code coverage PHP code centralized

00:33:27,550 --> 00:33:33,070
checks Alex and L PhD MD buds PNG XML

00:33:30,490 --> 00:33:36,850
and so on which means we can reuse a lot

00:33:33,070 --> 00:33:38,860
of really interesting and cool software

00:33:36,850 --> 00:33:40,660
from the drama world to analyze this log

00:33:38,860 --> 00:33:44,710
files to do something useful with these

00:33:40,660 --> 00:33:47,210
log files and there's this website p PQ

00:33:44,710 --> 00:33:50,809
h 1 sorg that manual pitched I know

00:33:47,210 --> 00:33:52,789
started over a year ago and I started I

00:33:50,809 --> 00:33:54,830
mean we registered a domain and made a

00:33:52,789 --> 00:33:56,630
redirect to a small side that's

00:33:54,830 --> 00:33:59,179
basically just a play so let me list

00:33:56,630 --> 00:34:01,760
what kind of tools we know about and

00:33:59,179 --> 00:34:03,320
what they are used for I really hope

00:34:01,760 --> 00:34:05,809
that at some point we actually get the

00:34:03,320 --> 00:34:08,450
time to put something even more useful

00:34:05,809 --> 00:34:10,520
there but so far that is a really good

00:34:08,450 --> 00:34:11,869
starting point if you're interested in

00:34:10,520 --> 00:34:13,820
figuring out what kind of tools are

00:34:11,869 --> 00:34:15,980
there and there you can get them and

00:34:13,820 --> 00:34:19,129
then you can go one step further and

00:34:15,980 --> 00:34:20,510
look at continuous integration which is

00:34:19,129 --> 00:34:22,760
about feeling the pulse of a project

00:34:20,510 --> 00:34:23,960
running all these tools every time you

00:34:22,760 --> 00:34:27,369
change the code keep the information

00:34:23,960 --> 00:34:29,990
over time visualize it in a good way and

00:34:27,369 --> 00:34:32,599
this provides insight into the

00:34:29,990 --> 00:34:34,339
development process and the code

00:34:32,599 --> 00:34:37,070
qualities throughout the lifecycle of

00:34:34,339 --> 00:34:38,540
the project by automatically fetching

00:34:37,070 --> 00:34:41,210
new revisions from the version control

00:34:38,540 --> 00:34:44,000
system running the tests analyzing the

00:34:41,210 --> 00:34:48,440
code and collecting and reporting

00:34:44,000 --> 00:34:51,320
software metrics so in case you're

00:34:48,440 --> 00:34:53,570
wondering what the best way of doing

00:34:51,320 --> 00:34:56,960
continuous integration for PHP projects

00:34:53,570 --> 00:35:01,310
is and of course this is my opinion my

00:34:56,960 --> 00:35:03,890
advice best solution right now it's just

00:35:01,310 --> 00:35:06,859
Jenkins yes it's written in Java it

00:35:03,890 --> 00:35:09,200
doesn't bite it does its job a really

00:35:06,859 --> 00:35:15,020
really well huge open source community

00:35:09,200 --> 00:35:16,869
behind it there's a tool or there's a

00:35:15,020 --> 00:35:18,920
new project that has recently started

00:35:16,869 --> 00:35:21,140
together with some other people that are

00:35:18,920 --> 00:35:23,900
using Jenkins in PHP projects called

00:35:21,140 --> 00:35:27,890
Jenkins PHP which gives you a template

00:35:23,900 --> 00:35:30,380
for Jenkins jobs for PHP projects which

00:35:27,890 --> 00:35:33,800
cuts down the time to set up a Jenkins

00:35:30,380 --> 00:35:38,480
CI server for PHP projects from about an

00:35:33,800 --> 00:35:41,089
hour to five minutes and then those five

00:35:38,480 --> 00:35:42,800
minutes were even too long for me and I

00:35:41,089 --> 00:35:45,800
created the next project which is the

00:35:42,800 --> 00:35:48,980
PHP project wizard when you just go into

00:35:45,800 --> 00:35:51,890
your source code directory and say ppw

00:35:48,980 --> 00:35:53,780
this is my source code directory is my

00:35:51,890 --> 00:35:56,270
test directory is the coding Senate that

00:35:53,780 --> 00:35:58,090
I want to use and then it just generates

00:35:56,270 --> 00:36:01,270
the configuration files for you

00:35:58,090 --> 00:36:03,850
and now it down from about one hour to

00:36:01,270 --> 00:36:07,210
less than one minute and that's really

00:36:03,850 --> 00:36:09,190
cool there are other options like cruise

00:36:07,210 --> 00:36:11,410
control like PHP under control which is

00:36:09,190 --> 00:36:13,900
built on cruise control TG under control

00:36:11,410 --> 00:36:17,560
is really nice but it's still built on

00:36:13,900 --> 00:36:22,780
cruise control and cruise control is one

00:36:17,560 --> 00:36:26,650
of the trying to come up with a nice

00:36:22,780 --> 00:36:28,960
work for a plug it's not one of the best

00:36:26,650 --> 00:36:30,700
pieces of software has come across this

00:36:28,960 --> 00:36:32,890
from an operations point of view it

00:36:30,700 --> 00:36:35,610
crashes a lot and when it crashes it

00:36:32,890 --> 00:36:39,370
eats your data and that is not nice and

00:36:35,610 --> 00:36:42,370
you don't really want to use that

00:36:39,370 --> 00:36:44,860
there's bamboo and team city which are

00:36:42,370 --> 00:36:48,760
commercial alternatives both of them

00:36:44,860 --> 00:36:50,470
work with PHP projects I've never

00:36:48,760 --> 00:36:52,920
personally worked this team city I've

00:36:50,470 --> 00:36:56,620
quite some experience with bamboo and

00:36:52,920 --> 00:37:00,160
all the customers that I came across

00:36:56,620 --> 00:37:04,150
that were using bamboo or 12 News bamboo

00:37:00,160 --> 00:37:06,660
have now been convinced otherwise and

00:37:04,150 --> 00:37:11,020
have been migrated to Jenkins because

00:37:06,660 --> 00:37:14,170
bamboo also has issues and then there's

00:37:11,020 --> 00:37:17,020
our bits which is continuous integration

00:37:14,170 --> 00:37:18,460
server and issue tracker and source code

00:37:17,020 --> 00:37:25,060
browser and project management tool

00:37:18,460 --> 00:37:27,490
written in PHP it's well basically in

00:37:25,060 --> 00:37:31,210
alpha at the moment and has been so for

00:37:27,490 --> 00:37:35,170
over a year so I know the people working

00:37:31,210 --> 00:37:38,020
on it have lots of respect for them just

00:37:35,170 --> 00:37:41,440
I don't see the need or the point of

00:37:38,020 --> 00:37:47,520
reimplemented something that we already

00:37:41,440 --> 00:37:47,520
have and Jenkins works very very well

00:37:48,660 --> 00:37:56,030
yes

00:37:50,420 --> 00:37:59,030
avoid big bang deployments there's a

00:37:56,030 --> 00:38:03,920
trend to going faster with release

00:37:59,030 --> 00:38:06,260
cycles and our highest priority should

00:38:03,920 --> 00:38:07,730
be to satisfy the customer through early

00:38:06,260 --> 00:38:12,349
and continuous delivery of valuable

00:38:07,730 --> 00:38:13,910
software and if you look at how really

00:38:12,349 --> 00:38:15,530
big websites are doing it so for

00:38:13,910 --> 00:38:17,839
instance if you go to kota flickr com

00:38:15,530 --> 00:38:19,490
you'll see something like slicker was

00:38:17,839 --> 00:38:21,799
last deploying six hours ago including

00:38:19,490 --> 00:38:25,339
five changed by three people in the last

00:38:21,799 --> 00:38:30,589
week there were 74 deploys of 447

00:38:25,339 --> 00:38:33,740
changes by 22 people and then one of our

00:38:30,589 --> 00:38:36,890
customers they usually make somewhere

00:38:33,740 --> 00:38:38,960
between 40 and 60 deploys a day and

00:38:36,890 --> 00:38:41,210
every engineer at Etsy rights automated

00:38:38,960 --> 00:38:44,210
tests on a daily basis and our Hudson

00:38:41,210 --> 00:38:46,910
which is now also Jenkins continuous

00:38:44,210 --> 00:38:50,569
integration server runs about 2500 tests

00:38:46,910 --> 00:38:53,359
with every commit around 20 times a day

00:38:50,569 --> 00:38:55,609
that means running around 250,000 speech

00:38:53,359 --> 00:38:59,210
minute tests in typical work week it's

00:38:55,609 --> 00:39:00,799
awesome there's a lot of design patterns

00:38:59,210 --> 00:39:03,079
coming up to a day of this kind of

00:39:00,799 --> 00:39:06,410
change if you have this high deployment

00:39:03,079 --> 00:39:08,420
frequency this regard to continuous

00:39:06,410 --> 00:39:11,059
integration can basically follow to pass

00:39:08,420 --> 00:39:13,520
you can on the one hand say okay for

00:39:11,059 --> 00:39:16,250
every new branch in my git repository

00:39:13,520 --> 00:39:18,710
that is created I want to automatically

00:39:16,250 --> 00:39:20,930
have drop in Jenkins and that is

00:39:18,710 --> 00:39:23,930
possible because it's highly scriptable

00:39:20,930 --> 00:39:26,630
all you do something like latent code

00:39:23,930 --> 00:39:29,359
patterns where you all do all your work

00:39:26,630 --> 00:39:34,930
in in one branch and just have so-called

00:39:29,359 --> 00:39:38,809
feature flags feature bits whatever

00:39:34,930 --> 00:39:41,000
there are but there's no common name for

00:39:38,809 --> 00:39:42,530
it yet different teams call it different

00:39:41,000 --> 00:39:44,630
things but it's all the same you have

00:39:42,530 --> 00:39:47,000
switches in your code let's say okay if

00:39:44,630 --> 00:39:49,369
I'm in this environment I do that and

00:39:47,000 --> 00:39:52,790
then you're all due to all your testing

00:39:49,369 --> 00:39:54,920
of a phone branch which allows you also

00:39:52,790 --> 00:39:56,540
in production to turn these features on

00:39:54,920 --> 00:39:58,930
and off for instance if you want to do

00:39:56,540 --> 00:40:01,190
experiment experiment driven development

00:39:58,930 --> 00:40:02,570
like you want to say I want to figure

00:40:01,190 --> 00:40:05,260
out whether I get the higher

00:40:02,570 --> 00:40:08,210
conversion rate if I made my pie button

00:40:05,260 --> 00:40:10,100
red instead of green and just roll it

00:40:08,210 --> 00:40:12,560
out of one percent of your users that's

00:40:10,100 --> 00:40:14,750
fine that's possible with these feature

00:40:12,560 --> 00:40:18,860
flags or you can also set ki have this

00:40:14,750 --> 00:40:20,930
one feature that is really requires a

00:40:18,860 --> 00:40:22,850
hair has performance issues and ever my

00:40:20,930 --> 00:40:24,860
my size and a high load I just turn the

00:40:22,850 --> 00:40:29,240
power off also possible with these

00:40:24,860 --> 00:40:36,260
feature flags this is an example of what

00:40:29,240 --> 00:40:37,910
that looks like at flickr this is from

00:40:36,260 --> 00:40:42,040
somewhere else I think to this from

00:40:37,910 --> 00:40:45,440
forced not really that much interesting

00:40:42,040 --> 00:40:49,610
what's interesting however is that a lot

00:40:45,440 --> 00:40:51,100
of these companies that are really early

00:40:49,610 --> 00:40:54,980
adopters of this continuous delivery

00:40:51,100 --> 00:40:57,260
continuous deployment process are

00:40:54,980 --> 00:40:58,940
blogging very actively about it and

00:40:57,260 --> 00:41:01,580
share their experience what works for

00:40:58,940 --> 00:41:03,740
them what did not work for them so it's

00:41:01,580 --> 00:41:06,800
really interesting to read that and pick

00:41:03,740 --> 00:41:08,750
the pits and choose the bits and pieces

00:41:06,800 --> 00:41:11,720
that may or may not work for you and

00:41:08,750 --> 00:41:14,230
just try it out there are no silver

00:41:11,720 --> 00:41:17,000
bullets at least not yet so you need to

00:41:14,230 --> 00:41:20,240
see what can work for you and what

00:41:17,000 --> 00:41:21,800
doesn't and of course you can take this

00:41:20,240 --> 00:41:23,270
one step further and say okay we use

00:41:21,800 --> 00:41:25,250
this for dark launching and it is

00:41:23,270 --> 00:41:28,340
something that facebook and twitter has

00:41:25,250 --> 00:41:31,430
been known to do so they have a new

00:41:28,340 --> 00:41:33,710
feature they don't deploy it to all the

00:41:31,430 --> 00:41:35,300
users just employ two one percent then

00:41:33,710 --> 00:41:37,130
two percent then five percent over the

00:41:35,300 --> 00:41:39,430
performance issue you go back down to

00:41:37,130 --> 00:41:42,970
one percent still continue to gather

00:41:39,430 --> 00:41:45,620
performance metrics go through another

00:41:42,970 --> 00:41:47,930
interation of optimization and then

00:41:45,620 --> 00:41:49,580
start again and increase it from one

00:41:47,930 --> 00:41:51,470
percent to two percent to five percent

00:41:49,580 --> 00:41:56,750
and at some point wrote it out to all

00:41:51,470 --> 00:42:00,020
500 million users and again facebook is

00:41:56,750 --> 00:42:02,540
very active in blogging about that to

00:42:00,020 --> 00:42:03,980
this for instance a starting point and i

00:42:02,540 --> 00:42:05,650
put the slides online so you get all the

00:42:03,980 --> 00:42:09,620
URLs and we'll just click on there and

00:42:05,650 --> 00:42:11,300
do some further reading and there's a

00:42:09,620 --> 00:42:13,150
nuclear option that you get when you

00:42:11,300 --> 00:42:14,380
have

00:42:13,150 --> 00:42:17,079
these feature flags in your code base

00:42:14,380 --> 00:42:19,150
and this is something that's both

00:42:17,079 --> 00:42:20,970
facebook and twitter also do so friends

00:42:19,150 --> 00:42:23,950
if there is really high load on the site

00:42:20,970 --> 00:42:27,579
Facebook may or may not turn off the

00:42:23,950 --> 00:42:31,329
chat or Twitter may or may not turn off

00:42:27,579 --> 00:42:34,359
certain features so in degrade

00:42:31,329 --> 00:42:36,809
gracefully you don't turn off the whole

00:42:34,359 --> 00:42:39,069
site you just turn off the features that

00:42:36,809 --> 00:42:41,619
have a really high performance impact

00:42:39,069 --> 00:42:48,520
and they're not that are necessary for

00:42:41,619 --> 00:42:51,279
the main functionality and this all

00:42:48,520 --> 00:42:53,230
relates to the emerging understanding of

00:42:51,279 --> 00:42:56,829
the interdependence of development and

00:42:53,230 --> 00:42:58,660
operations in meeting a business goal of

00:42:56,829 --> 00:43:01,420
producing tiny software products and

00:42:58,660 --> 00:43:05,349
services and someone came up with the

00:43:01,420 --> 00:43:10,450
name dev ops for that which gets just a

00:43:05,349 --> 00:43:12,190
good good word for a good word for ya

00:43:10,450 --> 00:43:14,710
but all of these should play nice

00:43:12,190 --> 00:43:16,720
together none of them can survive on

00:43:14,710 --> 00:43:18,880
their own it's like in our world of

00:43:16,720 --> 00:43:20,319
warcraft raiding party you need the tank

00:43:18,880 --> 00:43:23,230
you need the healer you need the damage

00:43:20,319 --> 00:43:27,190
dealers none of them can accomplish the

00:43:23,230 --> 00:43:31,029
big task by themselves and one final

00:43:27,190 --> 00:43:33,849
thing why are we doing this again well

00:43:31,029 --> 00:43:38,559
we want to be able to change our

00:43:33,849 --> 00:43:43,359
application as fast as needed to meet

00:43:38,559 --> 00:43:46,630
our business requirements and in such a

00:43:43,359 --> 00:43:49,589
way that the cost of a change does not

00:43:46,630 --> 00:43:52,480
exceed the business value of the change

00:43:49,589 --> 00:43:55,420
so if my software is of a really low

00:43:52,480 --> 00:43:57,640
internal quality over time it becomes

00:43:55,420 --> 00:44:00,250
more and more it more expensive to eat

00:43:57,640 --> 00:44:02,230
make even the tiniest change so it's a

00:44:00,250 --> 00:44:05,260
really good investment into the future

00:44:02,230 --> 00:44:07,270
to maybe be a little bit slower in the

00:44:05,260 --> 00:44:09,760
beginning on the project and write good

00:44:07,270 --> 00:44:13,299
software come up up zucchini

00:44:09,760 --> 00:44:15,250
architecture right clean code and see

00:44:13,299 --> 00:44:17,890
thing of this as an investment into the

00:44:15,250 --> 00:44:20,770
future that in the future you can the

00:44:17,890 --> 00:44:23,680
sustainable rate at new value to the

00:44:20,770 --> 00:44:24,640
software without sacrificing quality or

00:44:23,680 --> 00:44:27,130
in the

00:44:24,640 --> 00:44:30,369
yeah and quite is also related to

00:44:27,130 --> 00:44:31,930
security so you don't sacrifice security

00:44:30,369 --> 00:44:37,900
for instance or performance or any

00:44:31,930 --> 00:44:40,240
anything else over time and is really

00:44:37,900 --> 00:44:42,220
good blog posting or blinky posing as he

00:44:40,240 --> 00:44:43,990
calls it much in folder that came out

00:44:42,220 --> 00:44:49,269
last week about the tradable quality

00:44:43,990 --> 00:44:52,539
hypothesis you cannot save on internal

00:44:49,269 --> 00:44:54,849
quality it will cost you more in the end

00:44:52,539 --> 00:44:57,220
if you want to try to try to cut costs

00:44:54,849 --> 00:45:00,460
on internal quality because you do not

00:44:57,220 --> 00:45:05,529
gain in other limit dimensions such as

00:45:00,460 --> 00:45:08,319
better cost scope or speed instead you

00:45:05,529 --> 00:45:12,690
need to realize that internal quality is

00:45:08,319 --> 00:45:15,130
not an impediment to speed but an

00:45:12,690 --> 00:45:17,140
enabler of speed so if we have good

00:45:15,130 --> 00:45:20,890
internal quality you can move faster you

00:45:17,140 --> 00:45:22,569
can make changes quicker and reducing

00:45:20,890 --> 00:45:28,500
internal quality you can only slow us

00:45:22,569 --> 00:45:28,500
down thank

00:45:38,630 --> 00:45:50,100
questions I don't get to point sorry hi

00:45:46,920 --> 00:45:52,740
hi I wonder how you managed to do a talk

00:45:50,100 --> 00:45:55,440
with with world of warcraft and jenkins

00:45:52,740 --> 00:46:02,940
and didn't manage to mention the Roy

00:45:55,440 --> 00:46:06,270
Jenkins yes that's a kind of insider

00:46:02,940 --> 00:46:10,470
joke crash kind of a question yes it

00:46:06,270 --> 00:46:12,570
eluded me may or may not be related to

00:46:10,470 --> 00:46:16,470
the fact that I did not have that I

00:46:12,570 --> 00:46:22,800
don't have the achievement yet so yes

00:46:16,470 --> 00:46:24,420
any other serious question hi um you

00:46:22,800 --> 00:46:26,130
were talking about how internal quality

00:46:24,420 --> 00:46:28,590
is very important to you and that I work

00:46:26,130 --> 00:46:30,780
for a company and we do XP and we do all

00:46:28,590 --> 00:46:34,410
of our production code is written in

00:46:30,780 --> 00:46:36,720
pairs and for me it seems it's more like

00:46:34,410 --> 00:46:38,460
a code review would have been the old

00:46:36,720 --> 00:46:40,410
way to ensure quality and internal

00:46:38,460 --> 00:46:42,720
quality in particular yes pair

00:46:40,410 --> 00:46:45,090
programming for up for as i see it

00:46:42,720 --> 00:46:48,210
provides a sort of a continuous code

00:46:45,090 --> 00:46:50,100
review which which when you do need to

00:46:48,210 --> 00:46:52,020
bring it to a larger audience as it were

00:46:50,100 --> 00:46:54,600
more people to get involved week we did

00:46:52,020 --> 00:46:57,120
do that as well but it seems to me that

00:46:54,600 --> 00:46:58,770
it's it's the bean counters that are

00:46:57,120 --> 00:47:00,330
preventing pair programming from

00:46:58,770 --> 00:47:02,100
happening not the developers and if

00:47:00,330 --> 00:47:05,520
internal development is what's important

00:47:02,100 --> 00:47:08,400
it can i see it both ways I've seen

00:47:05,520 --> 00:47:11,250
teams where as you refer to them the

00:47:08,400 --> 00:47:15,630
bean counters that um we heard about

00:47:11,250 --> 00:47:17,640
this extreme programming thing and pair

00:47:15,630 --> 00:47:21,000
programming and whatever because they

00:47:17,640 --> 00:47:24,030
think of this of course in cost value

00:47:21,000 --> 00:47:26,310
cost-benefit and if you explain it to

00:47:24,030 --> 00:47:28,800
them in these terms that they understand

00:47:26,310 --> 00:47:32,430
they see the value of it they see that

00:47:28,800 --> 00:47:34,440
it furthers the spreading of knowledge

00:47:32,430 --> 00:47:36,690
and that your failsafe when somebody

00:47:34,440 --> 00:47:38,520
leaves the company or if somebody is

00:47:36,690 --> 00:47:40,770
sick or on vacation or whatever have

00:47:38,520 --> 00:47:42,660
somebody else at least one other

00:47:40,770 --> 00:47:45,660
developer has the same knowledge they

00:47:42,660 --> 00:47:47,790
understand that or some of them do but

00:47:45,660 --> 00:47:48,190
then you have developers that don't want

00:47:47,790 --> 00:47:51,310
to

00:47:48,190 --> 00:47:55,060
with somebody from nine to five sitting

00:47:51,310 --> 00:47:58,540
next to them and communicates a long

00:47:55,060 --> 00:48:02,520
time and some developers just don't want

00:47:58,540 --> 00:48:05,349
to do that fair enough that's pretty and

00:48:02,520 --> 00:48:07,030
of course more commonly I've been to

00:48:05,349 --> 00:48:09,430
develop two companies when I developers

00:48:07,030 --> 00:48:12,760
say yes we would really like to do pair

00:48:09,430 --> 00:48:14,770
programming but the bean counters don't

00:48:12,760 --> 00:48:18,550
want us to do that because I say okay I

00:48:14,770 --> 00:48:22,920
need I'm paying to developers to do the

00:48:18,550 --> 00:48:26,500
drop of one yes I save on the cost for a

00:48:22,920 --> 00:48:30,010
computer for the second guy but that is

00:48:26,500 --> 00:48:32,980
just one time cost efficiency reduction

00:48:30,010 --> 00:48:34,390
thingy but over time it's more expensive

00:48:32,980 --> 00:48:37,180
because I'm paying to leave an

00:48:34,390 --> 00:48:39,160
opportunity drop upon yeah we for I

00:48:37,180 --> 00:48:40,869
think we find out two people together

00:48:39,160 --> 00:48:42,880
actually get more done than one and

00:48:40,869 --> 00:48:44,560
higher quality there's no but you cannot

00:48:42,880 --> 00:48:46,720
hide stuff under the under the character

00:48:44,560 --> 00:48:48,099
so to speak I'm corrective code

00:48:46,720 --> 00:48:49,869
ownership is another thing we swap

00:48:48,099 --> 00:48:51,550
around a lot so you really don't feel

00:48:49,869 --> 00:48:53,140
like you own any one piece of code and

00:48:51,550 --> 00:48:55,810
you also feel that you can continue to

00:48:53,140 --> 00:48:58,109
all the code that's the way we did I

00:48:55,810 --> 00:48:58,109
agree

00:49:01,680 --> 00:49:07,590
regarding the continuous delivery

00:49:05,070 --> 00:49:09,150
continuous deployment and then quality

00:49:07,590 --> 00:49:12,060
from your experience or maybe you have

00:49:09,150 --> 00:49:14,490
any kind of a detailed statistics how

00:49:12,060 --> 00:49:16,770
does it actually affects the quality

00:49:14,490 --> 00:49:19,290
because we've seen all those pockets all

00:49:16,770 --> 00:49:21,330
those it's else how does it affects the

00:49:19,290 --> 00:49:23,010
code quality and then for example the

00:49:21,330 --> 00:49:25,410
code metrics and then when you did a

00:49:23,010 --> 00:49:31,080
continuous integration and inspection

00:49:25,410 --> 00:49:33,000
how does it actually affect that that

00:49:31,080 --> 00:49:34,530
was not really just a single question

00:49:33,000 --> 00:49:36,270
with multiple questions in one I'm

00:49:34,530 --> 00:49:38,640
trying to come up with a way of

00:49:36,270 --> 00:49:40,650
answering all aspects of that please so

00:49:38,640 --> 00:49:46,110
please remind me if I get one of them so

00:49:40,650 --> 00:49:48,480
yes it depends on how you do on your

00:49:46,110 --> 00:49:50,010
version control for instance as I mean

00:49:48,480 --> 00:49:52,740
for instance at the moment we have one

00:49:50,010 --> 00:49:54,510
customer when I said okay we do not want

00:49:52,740 --> 00:49:57,750
to have these feature flags instead we

00:49:54,510 --> 00:50:00,060
want to work on each new feature in a

00:49:57,750 --> 00:50:02,760
separate branch of the domain

00:50:00,060 --> 00:50:06,000
development branch and automatically for

00:50:02,760 --> 00:50:08,130
each new branch have a new job created

00:50:06,000 --> 00:50:09,450
in Jenkins and then when the branch at

00:50:08,130 --> 00:50:11,760
some point goes away because it is

00:50:09,450 --> 00:50:14,040
merged into the integration branch then

00:50:11,760 --> 00:50:15,990
the job in Jenkins is deactivated not

00:50:14,040 --> 00:50:18,720
deleted but the activator you have keep

00:50:15,990 --> 00:50:20,550
the data and can review it I mean at

00:50:18,720 --> 00:50:24,900
some point delete it because there are

00:50:20,550 --> 00:50:29,210
you don't need anymore and use that

00:50:24,900 --> 00:50:32,190
approach and in the in such a setup

00:50:29,210 --> 00:50:34,320
those feature branches only get merged

00:50:32,190 --> 00:50:37,350
into the integration branch not into the

00:50:34,320 --> 00:50:40,080
master branch only Jenkins is allowed to

00:50:37,350 --> 00:50:42,420
merge from the integration branch into

00:50:40,080 --> 00:50:44,310
the master branch so you know that you

00:50:42,420 --> 00:50:47,520
can have in a master branch only code

00:50:44,310 --> 00:50:49,020
that was verified by continuous

00:50:47,520 --> 00:50:50,430
integration tool and then in for

00:50:49,020 --> 00:50:54,660
instance you can do diplomas off of that

00:50:50,430 --> 00:50:57,330
master branch yes the feature feature

00:50:54,660 --> 00:51:00,600
flags adds complexity to the code so

00:50:57,330 --> 00:51:02,040
that has a negative effect on on the

00:51:00,600 --> 00:51:03,690
psychometric complexity or n paws

00:51:02,040 --> 00:51:06,300
complexity metric for instance because

00:51:03,690 --> 00:51:09,560
you have multiple choices of whether or

00:51:06,300 --> 00:51:12,140
not the feature is currently active

00:51:09,560 --> 00:51:14,240
and then if basically dapat comes down

00:51:12,140 --> 00:51:16,430
to whether or not these feature flags at

00:51:14,240 --> 00:51:18,950
temporary or if you want to keep them

00:51:16,430 --> 00:51:22,670
over time so for instance we have

00:51:18,950 --> 00:51:25,130
customers where they don't keep any or

00:51:22,670 --> 00:51:29,780
only really one or two of these feature

00:51:25,130 --> 00:51:31,940
flags in production but use them for for

00:51:29,780 --> 00:51:34,670
dark launching for instance so they keep

00:51:31,940 --> 00:51:36,650
them in the code as long as the feature

00:51:34,670 --> 00:51:38,900
has not been employed to one hundred

00:51:36,650 --> 00:51:41,330
percent of the user base at that point

00:51:38,900 --> 00:51:43,790
when it decided this goes now out to all

00:51:41,330 --> 00:51:48,890
users then the future flag is removed

00:51:43,790 --> 00:51:52,010
and then this penalty to the complexity

00:51:48,890 --> 00:51:53,690
metrics is gone but it's like always

00:51:52,010 --> 00:51:56,900
it's a trade-off that you have to make

00:51:53,690 --> 00:51:59,540
and these tools provides the possibility

00:51:56,900 --> 00:52:01,490
to ignore so I can rule for a certain

00:51:59,540 --> 00:52:05,360
code block so that is something that you

00:52:01,490 --> 00:52:06,830
could look into yeah but you need you

00:52:05,360 --> 00:52:08,510
need to figure out what you want to do

00:52:06,830 --> 00:52:11,300
what your web show should be how you

00:52:08,510 --> 00:52:14,830
want to handle this and then pick and

00:52:11,300 --> 00:52:21,200
choose the right practices and tools to

00:52:14,830 --> 00:52:25,130
accomplish your goal there's one more

00:52:21,200 --> 00:52:27,590
over here too oh sorry I didn't see him

00:52:25,130 --> 00:52:31,310
I always liked him I do you know of any

00:52:27,590 --> 00:52:34,330
tools that can the acceptance testing

00:52:31,310 --> 00:52:37,130
also acted acceptance testing on ajax

00:52:34,330 --> 00:52:42,440
science like selenium can do page me you

00:52:37,130 --> 00:52:46,990
know for more basic sites so my answer

00:52:42,440 --> 00:52:49,250
would be selenium the Ajax rhythm sites

00:52:46,990 --> 00:52:52,190
that also works with a choice I'd see i

00:52:49,250 --> 00:52:58,540
Kenned i gave us one that's good on

00:52:52,190 --> 00:52:58,540
class with me yep more questions

00:53:00,210 --> 00:53:04,440
fight

00:53:01,950 --> 00:53:07,170
it's much less of a question model

00:53:04,440 --> 00:53:10,200
comment about the the adding complexity

00:53:07,170 --> 00:53:11,880
when you are feature flags in many cases

00:53:10,200 --> 00:53:13,170
you can get round up increasing

00:53:11,880 --> 00:53:15,060
complexity if you use dependency

00:53:13,170 --> 00:53:17,070
injection and things like that so you

00:53:15,060 --> 00:53:19,320
don't end up with if sit-ins sitting

00:53:17,070 --> 00:53:21,690
inside your your application code but

00:53:19,320 --> 00:53:25,490
more to do with how you wire up your

00:53:21,690 --> 00:53:28,320
your class is it at the start yeah or a

00:53:25,490 --> 00:53:30,230
configuration or whenever yeah and then

00:53:28,320 --> 00:53:32,730
was a question to the floor really about

00:53:30,230 --> 00:53:35,270
to get back to this pairing I just

00:53:32,730 --> 00:53:38,820
wondered how many people here do pair

00:53:35,270 --> 00:53:42,290
every day at the moment I can't really

00:53:38,820 --> 00:53:42,290
was much more calm than it is i think

00:53:53,510 --> 00:53:58,500
before we go forward and ridgeway yes I

00:53:57,000 --> 00:54:00,930
don't want to send it to you and your

00:53:58,500 --> 00:54:03,500
lunch that is really really bad for

00:54:00,930 --> 00:54:03,500
votes

00:54:04,089 --> 00:54:09,049
speaker hit on finish on the time I did

00:54:06,289 --> 00:54:19,190
not get my coffee and yes I've gotten

00:54:09,049 --> 00:54:22,549
such comments yes one more question I he

00:54:19,190 --> 00:54:23,900
has a mic yeah sorry hello I noticed in

00:54:22,549 --> 00:54:26,569
here I've listed continuous integration

00:54:23,900 --> 00:54:29,359
projects fitted was invention to this

00:54:26,569 --> 00:54:37,660
soap bitten yes because I have been

00:54:29,359 --> 00:54:42,589
bitten by bitten so it's really that but

00:54:37,660 --> 00:54:46,789
I tried using it when it first came out

00:54:42,589 --> 00:54:48,530
like 23 years ago and back then it

00:54:46,789 --> 00:54:52,849
didn't work with PHP units and then

00:54:48,530 --> 00:54:55,520
somebody I open the bug report it said

00:54:52,849 --> 00:54:59,839
they're being ignored for a really long

00:54:55,520 --> 00:55:02,059
time then somebody said yes I'm i made a

00:54:59,839 --> 00:55:04,760
patch to bitten and now it works a peach

00:55:02,059 --> 00:55:08,180
be in it and PHP projects I try to patch

00:55:04,760 --> 00:55:10,940
it work for me and by the time I didn't

00:55:08,180 --> 00:55:13,099
really care anymore it's really nice I

00:55:10,940 --> 00:55:16,160
think it can be really nice if you use

00:55:13,099 --> 00:55:17,809
track and want to have it just in one so

00:55:16,160 --> 00:55:20,900
for those who do not don't know bitten

00:55:17,809 --> 00:55:23,599
is kind of an add-on for track so you

00:55:20,900 --> 00:55:30,440
can do a continuous integration as part

00:55:23,599 --> 00:55:33,680
of of track yes but no personal

00:55:30,440 --> 00:55:35,420
experience with with below yeah going

00:55:33,680 --> 00:55:41,299
beyond just trying it and didn't get

00:55:35,420 --> 00:55:43,069
Nick Cooper okay and we don't have time

00:55:41,299 --> 00:55:45,410
for any further pushes because we don't

00:55:43,069 --> 00:55:48,420
want to defer view from any a lunch

00:55:45,410 --> 00:55:50,450
break so after all that I'm sure you

00:55:48,420 --> 00:55:50,450

YouTube URL: https://www.youtube.com/watch?v=dFxPj2Lzyi4


