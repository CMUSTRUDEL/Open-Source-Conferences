Title: PHP UK Conference 2011 - Beyond frameworks, by Stuart Herbert
Publication date: 2012-03-15
Playlist: PHP UK Conference 2011
Description: 
	
Captions: 
	00:00:02,949 --> 00:00:07,940
so I'm here to talk about frameworks and

00:00:06,470 --> 00:00:10,160
how to use them without your code being

00:00:07,940 --> 00:00:11,900
held hostage so a little bit about me

00:00:10,160 --> 00:00:14,210
I'm the head of engineering for grad

00:00:11,900 --> 00:00:15,920
worldcom when the UK's largest voice

00:00:14,210 --> 00:00:19,849
over IP providers for small to medium

00:00:15,920 --> 00:00:22,660
enterprises i co-wrote these end

00:00:19,849 --> 00:00:27,460
certification study guide for PHP for

00:00:22,660 --> 00:00:31,520
anyone ever did anything with that nope

00:00:27,460 --> 00:00:36,470
not surprised and I've been contributing

00:00:31,520 --> 00:00:39,140
to open source since 1994 and there's

00:00:36,470 --> 00:00:40,520
four themes for the talk today first one

00:00:39,140 --> 00:00:43,070
I want to explain what I mean by a

00:00:40,520 --> 00:00:44,510
framework holding code hostage and I'll

00:00:43,070 --> 00:00:47,240
give some examples from grad well with

00:00:44,510 --> 00:00:48,470
that and I want to take you through how

00:00:47,240 --> 00:00:50,270
you can get it how you can deal with

00:00:48,470 --> 00:00:52,640
that by introducing a lead architecture

00:00:50,270 --> 00:00:53,989
to your PHP applications you don't have

00:00:52,640 --> 00:00:55,100
to ditch frameworks you just have to

00:00:53,989 --> 00:00:58,550
change how you use them to get around

00:00:55,100 --> 00:01:01,340
the problem and then I'm going to one

00:00:58,550 --> 00:01:03,290
part of the lead architecture is the

00:01:01,340 --> 00:01:04,759
introduction of components I'm going to

00:01:03,290 --> 00:01:07,700
talk you through those and explain what

00:01:04,759 --> 00:01:09,350
makes a good component and finally I'll

00:01:07,700 --> 00:01:11,630
go to some examples from gradwell about

00:01:09,350 --> 00:01:14,420
how we've introduced components and how

00:01:11,630 --> 00:01:16,070
it's helping us in our business I've

00:01:14,420 --> 00:01:18,799
been told to ask further questions at

00:01:16,070 --> 00:01:20,330
the end rather than as we go along but

00:01:18,799 --> 00:01:23,360
I've got some questions for the audience

00:01:20,330 --> 00:01:24,770
to get started so can I have a show of

00:01:23,360 --> 00:01:30,020
hands who actually uses a framework

00:01:24,770 --> 00:01:33,470
today pretty much everybody else

00:01:30,020 --> 00:01:37,820
fantastic now how many of you are

00:01:33,470 --> 00:01:39,470
developing software products rather than

00:01:37,820 --> 00:01:43,100
working for an agency doing microsites

00:01:39,470 --> 00:01:44,479
and things like that well that's for a

00:01:43,100 --> 00:01:48,530
lot more than unexpected that's

00:01:44,479 --> 00:01:50,000
fantastic to see that's brilliant those

00:01:48,530 --> 00:01:52,010
of you who do software products should

00:01:50,000 --> 00:01:53,869
get a lot out of this talk those of you

00:01:52,010 --> 00:01:56,330
who are and the more creative agency

00:01:53,869 --> 00:01:59,720
side I hope you get something out of it

00:01:56,330 --> 00:02:03,560
as well so let's start by talking about

00:01:59,720 --> 00:02:05,710
how frameworks hold you hostage now stop

00:02:03,560 --> 00:02:07,610
me if you've heard this story before I

00:02:05,710 --> 00:02:10,220
grabbed what we started off with

00:02:07,610 --> 00:02:13,909
first-generation apps written in a PHP

00:02:10,220 --> 00:02:15,620
for style the fundamental problem with

00:02:13,909 --> 00:02:15,980
those is they're highly coupled you

00:02:15,620 --> 00:02:19,459
can't

00:02:15,980 --> 00:02:23,239
touch the code without breaking it after

00:02:19,459 --> 00:02:24,920
a while the code becomes very fragile so

00:02:23,239 --> 00:02:29,170
we had to go in a second-generation app

00:02:24,920 --> 00:02:29,170
and we built our own framework for that

00:02:29,620 --> 00:02:35,150
excuse me now the developers enjoyed

00:02:33,410 --> 00:02:38,560
building the app on top of their own

00:02:35,150 --> 00:02:40,670
framework they had a real passion for it

00:02:38,560 --> 00:02:43,879
until they had to complete it or

00:02:40,670 --> 00:02:45,680
maintain the results at which point that

00:02:43,879 --> 00:02:48,349
got a bit too much like hard work for

00:02:45,680 --> 00:02:49,760
everybody has to be said how many of you

00:02:48,349 --> 00:02:52,700
built your own frameworks hear your own

00:02:49,760 --> 00:02:59,629
in-house frameworks and how many of you

00:02:52,700 --> 00:03:02,150
still use them surprising amount but we

00:02:59,629 --> 00:03:05,870
switched to using a popular framework or

00:03:02,150 --> 00:03:07,819
two has to be said we thought were off

00:03:05,870 --> 00:03:10,670
off into the stratosphere we were really

00:03:07,819 --> 00:03:13,160
looking forward to that and so we pick

00:03:10,670 --> 00:03:15,920
Symphony as our framework when I talked

00:03:13,160 --> 00:03:18,340
about two years ago here and the

00:03:15,920 --> 00:03:20,810
third-generation app very easy to extend

00:03:18,340 --> 00:03:21,980
after the steep learning curve steep

00:03:20,810 --> 00:03:23,239
learning curve is the main prom we

00:03:21,980 --> 00:03:24,500
bringing new staff into the company

00:03:23,239 --> 00:03:28,310
getting them trained up on how to work

00:03:24,500 --> 00:03:30,650
with it but there was a big problem with

00:03:28,310 --> 00:03:32,419
it we couldn't get the code out of the

00:03:30,650 --> 00:03:35,000
third-generation actually reuse a square

00:03:32,419 --> 00:03:36,769
in our business we've got apps elsewhere

00:03:35,000 --> 00:03:38,660
that aren't written in symphony they

00:03:36,769 --> 00:03:42,290
can't use the code that was written for

00:03:38,660 --> 00:03:44,590
the third-generation app and here's why

00:03:42,290 --> 00:03:47,950
if you take a look at this architecture

00:03:44,590 --> 00:03:50,269
this is you go to visit all the major

00:03:47,950 --> 00:03:52,040
framework websites and you'll find an

00:03:50,269 --> 00:03:54,739
architecture very similar to this on all

00:03:52,040 --> 00:03:56,150
of them the idea is as a framework you

00:03:54,739 --> 00:03:58,569
write code to plug into the framework

00:03:56,150 --> 00:04:01,669
and you can download 3rd party plugins

00:03:58,569 --> 00:04:03,049
contributed off the net to extend the

00:04:01,669 --> 00:04:04,730
framework as well so you don't have to

00:04:03,049 --> 00:04:06,680
do as much work it's pretty much the

00:04:04,730 --> 00:04:10,099
standard model across all the first

00:04:06,680 --> 00:04:12,169
generation frameworks but what actually

00:04:10,099 --> 00:04:15,349
happens is the framework goes and

00:04:12,169 --> 00:04:18,019
swallows your code you write code for

00:04:15,349 --> 00:04:19,310
the framework your code becomes highly

00:04:18,019 --> 00:04:22,130
coupled with the framework you can't

00:04:19,310 --> 00:04:23,900
take that code and reuse it outside of

00:04:22,130 --> 00:04:28,130
that application it's too many hooks

00:04:23,900 --> 00:04:28,740
inside at all and that causes a number

00:04:28,130 --> 00:04:32,490
of practical

00:04:28,740 --> 00:04:33,930
or challenges we found so here's some

00:04:32,490 --> 00:04:36,569
questions that we've been having to

00:04:33,930 --> 00:04:39,330
answer in our business once we built off

00:04:36,569 --> 00:04:41,880
the generation of our app how long would

00:04:39,330 --> 00:04:44,610
it take to upgrade your app to the next

00:04:41,880 --> 00:04:46,919
major version of the framework if you

00:04:44,610 --> 00:04:48,419
use symphony if u Zen framework this is

00:04:46,919 --> 00:04:51,569
a question that's coming up for you if

00:04:48,419 --> 00:04:53,310
you haven't had to deal with it yet has

00:04:51,569 --> 00:04:58,199
anyone had to go at this yet in their

00:04:53,310 --> 00:05:02,460
own business codeigniter how long did it

00:04:58,199 --> 00:05:08,759
take a week well that's pretty good

00:05:02,460 --> 00:05:13,919
going right to take a lot longer with a

00:05:08,759 --> 00:05:16,139
more complex application you receive as

00:05:13,919 --> 00:05:17,789
some major choices do you upgrade your

00:05:16,139 --> 00:05:19,349
framework or do you stick with the

00:05:17,789 --> 00:05:20,849
current framework version of the

00:05:19,349 --> 00:05:24,150
framework and accept that your app is

00:05:20,849 --> 00:05:29,280
going to sit there and rot quick show of

00:05:24,150 --> 00:05:31,830
hands who thinks that do the upgrade its

00:05:29,280 --> 00:05:34,889
tentative and who'd stick with the

00:05:31,830 --> 00:05:38,610
current version of the framework I'd

00:05:34,889 --> 00:05:41,009
call that a dead heat okay so upgrading

00:05:38,610 --> 00:05:42,690
your upgrading your framework is going

00:05:41,009 --> 00:05:46,050
to be a commercial problem for you at

00:05:42,690 --> 00:05:48,210
some point now what happens if you want

00:05:46,050 --> 00:05:50,219
to switch frameworks this is something

00:05:48,210 --> 00:05:52,259
I'm doing at the moment we're moving

00:05:50,219 --> 00:05:54,090
away from symphony because we can't find

00:05:52,259 --> 00:05:55,620
a developer skilled in it and we're

00:05:54,090 --> 00:05:59,400
moving to zend framework which seems to

00:05:55,620 --> 00:06:02,550
have a lot of people around but what

00:05:59,400 --> 00:06:06,599
would it take to do that as anyone else

00:06:02,550 --> 00:06:08,960
move frameworks a few people wish where

00:06:06,599 --> 00:06:08,960
did you go

00:06:13,120 --> 00:06:21,830
okay now were you able to port your code

00:06:19,250 --> 00:06:23,660
or did you end up rewriting it no be

00:06:21,830 --> 00:06:26,240
able to employed it you're able to

00:06:23,660 --> 00:06:27,710
Porter yeah that's good we had some of

00:06:26,240 --> 00:06:30,980
the issues with some other modules like

00:06:27,710 --> 00:06:33,170
ACL initial layer of using users right

00:06:30,980 --> 00:06:35,480
so we might as n finna go to your ACL

00:06:33,170 --> 00:06:37,340
and the coordinator was using the other

00:06:35,480 --> 00:06:38,750
micro sites right so you've ended up

00:06:37,340 --> 00:06:41,000
using both frameworks rather than

00:06:38,750 --> 00:06:43,730
switching yeah okay has anyone else

00:06:41,000 --> 00:06:46,880
tried switching in the past and how well

00:06:43,730 --> 00:06:50,930
did it go for yourself so this was a

00:06:46,880 --> 00:06:53,300
yahoo and again we wrote wrappers for

00:06:50,930 --> 00:06:55,100
the new framework to accept the old code

00:06:53,300 --> 00:06:57,320
framework until we could rewrite all the

00:06:55,100 --> 00:07:01,480
components right did you ever get to the

00:06:57,320 --> 00:07:01,480
actual rewriting with components I left

00:07:01,840 --> 00:07:07,280
and I'm guessing from the lack of show

00:07:05,870 --> 00:07:09,140
hands elsewhere in the room it is a

00:07:07,280 --> 00:07:10,960
problem you haven't yet had to face and

00:07:09,140 --> 00:07:12,650
haven't had to make your decision all

00:07:10,960 --> 00:07:15,919
commercially it's going to be expensive

00:07:12,650 --> 00:07:17,510
either way you're going to find now what

00:07:15,919 --> 00:07:19,340
about reusing your code this is what

00:07:17,510 --> 00:07:21,530
started us thinking it grabbed all about

00:07:19,340 --> 00:07:24,110
this we have more than one application

00:07:21,530 --> 00:07:25,790
for our business and we wanted to take

00:07:24,110 --> 00:07:28,729
some of that code and reuse it elsewhere

00:07:25,790 --> 00:07:30,560
and with symphony with the style of

00:07:28,729 --> 00:07:33,680
programming our developers had done we

00:07:30,560 --> 00:07:35,360
found we couldn't because the code had

00:07:33,680 --> 00:07:38,210
been written to rely on too many on

00:07:35,360 --> 00:07:40,010
Symphony classes and because we were

00:07:38,210 --> 00:07:41,300
looking to move to another framework

00:07:40,010 --> 00:07:43,490
some of the code is going to be used by

00:07:41,300 --> 00:07:45,520
apps that don't have a framework we

00:07:43,490 --> 00:07:51,260
found that be a massive problem for us

00:07:45,520 --> 00:07:52,880
has anyone else had to try this I mean

00:07:51,260 --> 00:07:54,860
the easy solution if you want to cop out

00:07:52,880 --> 00:07:57,470
is to turn order to a web service and

00:07:54,860 --> 00:07:58,790
API and do it that way but if you won't

00:07:57,470 --> 00:08:01,340
actually take the code out it's quite a

00:07:58,790 --> 00:08:05,020
challenge now what about outsourcing

00:08:01,340 --> 00:08:05,020
does anyone here outsource their work

00:08:05,950 --> 00:08:11,090
right if you're not and you're based in

00:08:09,169 --> 00:08:13,940
the UK you're missing out on a massive

00:08:11,090 --> 00:08:15,830
corporate tax and benefit with that if

00:08:13,940 --> 00:08:17,330
you move work offshore outside the UK

00:08:15,830 --> 00:08:20,360
you can pay much lower rates of

00:08:17,330 --> 00:08:23,810
corporate tax on the money earned it's

00:08:20,360 --> 00:08:25,520
an important commercial point if you

00:08:23,810 --> 00:08:26,330
were outsourcing work that was being

00:08:25,520 --> 00:08:27,800
done on your

00:08:26,330 --> 00:08:29,750
how would you get the work delivered

00:08:27,800 --> 00:08:31,180
back to you when it's all written for

00:08:29,750 --> 00:08:35,870
the framework it's all meshed together

00:08:31,180 --> 00:08:37,760
it's quite hard to do those are the

00:08:35,870 --> 00:08:40,219
challenges we had in our business and we

00:08:37,760 --> 00:08:41,630
decided and what we need to do is you

00:08:40,219 --> 00:08:44,029
need to change that architecture there

00:08:41,630 --> 00:08:47,570
where the framework goes and gobbles

00:08:44,029 --> 00:08:49,190
everything up but to what and that's the

00:08:47,570 --> 00:08:50,899
second part of my presentation we've

00:08:49,190 --> 00:08:54,320
introduced a layered approach with our

00:08:50,899 --> 00:08:56,440
architecture and what we've done is

00:08:54,320 --> 00:08:58,700
we've taken our original architecture

00:08:56,440 --> 00:09:00,399
and the first thing we decided to do

00:08:58,700 --> 00:09:03,890
which we wanted to keep the framework

00:09:00,399 --> 00:09:05,420
frameworks have a useful purpose but we

00:09:03,890 --> 00:09:07,160
decided what we want to do is make the

00:09:05,420 --> 00:09:10,279
app that uses the framework as thin as

00:09:07,160 --> 00:09:11,240
possible but no thinner so we didn't

00:09:10,279 --> 00:09:12,589
want to throw the baby out with the

00:09:11,240 --> 00:09:14,000
bathwater what I want to do is take

00:09:12,589 --> 00:09:16,430
advantage of frameworks where they make

00:09:14,000 --> 00:09:18,829
sense but for the rest of it we wanted

00:09:16,430 --> 00:09:19,820
to extract out the business logic it's

00:09:18,829 --> 00:09:22,160
got nothing to do with a framework

00:09:19,820 --> 00:09:23,570
that's proprietary intelligence for our

00:09:22,160 --> 00:09:26,300
applications about what makes it our

00:09:23,570 --> 00:09:27,440
business tick our data model gang that's

00:09:26,300 --> 00:09:30,110
got nothing to do with a frame when it

00:09:27,440 --> 00:09:31,850
doesn't belong in there at all and all

00:09:30,110 --> 00:09:33,680
the little utility libraries all the

00:09:31,850 --> 00:09:35,420
little classes we write choose to do

00:09:33,680 --> 00:09:39,470
little things to get job get the job

00:09:35,420 --> 00:09:42,890
done we've extracted all of those out or

00:09:39,470 --> 00:09:45,140
in the process of doing so so we've got

00:09:42,890 --> 00:09:47,089
an application there and an underlying

00:09:45,140 --> 00:09:48,890
components leur so we can change

00:09:47,089 --> 00:09:51,649
applications and suck the business logic

00:09:48,890 --> 00:09:54,890
the data model and the utilities into

00:09:51,649 --> 00:09:56,570
other applications if we want to link it

00:09:54,890 --> 00:09:58,579
together we're using a very simple

00:09:56,570 --> 00:10:02,810
autoloader which will go through later

00:09:58,579 --> 00:10:05,959
on in this talk it gives you a large set

00:10:02,810 --> 00:10:07,399
of reusable code because your

00:10:05,959 --> 00:10:10,399
application should be as thin as

00:10:07,399 --> 00:10:11,690
possible your application should be the

00:10:10,399 --> 00:10:14,300
pages you're putting in front of your

00:10:11,690 --> 00:10:15,949
users that are unique to that particular

00:10:14,300 --> 00:10:18,320
experience you're trying to get the user

00:10:15,949 --> 00:10:19,820
to do on that particular website if

00:10:18,320 --> 00:10:22,010
you've got multiple websites you got a

00:10:19,820 --> 00:10:23,899
sales that website you've got a more of

00:10:22,010 --> 00:10:25,790
a back office website the experience

00:10:23,899 --> 00:10:27,410
there will be different different

00:10:25,790 --> 00:10:29,000
applications but the underlying business

00:10:27,410 --> 00:10:33,500
logics the same because it's all the

00:10:29,000 --> 00:10:36,020
same company so if there's only one

00:10:33,500 --> 00:10:39,209
thing you take away from today it's this

00:10:36,020 --> 00:10:42,059
framework app becomes a thin layer

00:10:39,209 --> 00:10:46,319
on top of framework agnostic reusable

00:10:42,059 --> 00:10:49,350
components the framework agnostic part

00:10:46,319 --> 00:10:51,509
is key if your components use the

00:10:49,350 --> 00:10:53,160
framework your back to the old

00:10:51,509 --> 00:10:54,959
architecture where the framework

00:10:53,160 --> 00:10:58,410
swallowing up your code it's important

00:10:54,959 --> 00:11:02,519
to keep stuff separate so this is the

00:10:58,410 --> 00:11:04,679
layer DAC architecture that's come out

00:11:02,519 --> 00:11:07,350
all right actually smile the projector

00:11:04,679 --> 00:11:10,559
so you've got the application layer on

00:11:07,350 --> 00:11:13,459
top the autoloader linking in to a large

00:11:10,559 --> 00:11:15,869
set of components and when I say large

00:11:13,459 --> 00:11:20,189
what I mean is the ratio should look

00:11:15,869 --> 00:11:23,040
more like this your application layer

00:11:20,189 --> 00:11:24,990
your autoloader and a growing palette of

00:11:23,040 --> 00:11:26,759
components I've already solved a job and

00:11:24,990 --> 00:11:28,230
done it well that you can just pull into

00:11:26,759 --> 00:11:32,249
your bit to your app so you need to

00:11:28,230 --> 00:11:34,110
build them but why components that

00:11:32,249 --> 00:11:35,879
completely independent of the framework

00:11:34,110 --> 00:11:37,819
so you can change your framework it's

00:11:35,879 --> 00:11:40,889
not going to cause you any problems

00:11:37,819 --> 00:11:42,720
they're built and tested in isolation of

00:11:40,889 --> 00:11:46,679
your application code they are

00:11:42,720 --> 00:11:48,929
standalone units of work we shall allow

00:11:46,679 --> 00:11:51,689
them to be built by different teams you

00:11:48,929 --> 00:11:53,059
can do work in parallel across officers

00:11:51,689 --> 00:11:56,009
across countries across time zones

00:11:53,059 --> 00:11:59,519
because you're not all working on one

00:11:56,009 --> 00:12:01,499
check out of trunk or 1 VAR a growing

00:11:59,519 --> 00:12:05,069
convoluted set of branches you've got

00:12:01,499 --> 00:12:07,290
isolation in a different way the other

00:12:05,069 --> 00:12:08,639
thing about the components is because

00:12:07,290 --> 00:12:10,319
they're independent of the framework

00:12:08,639 --> 00:12:12,179
they can change independently of the

00:12:10,319 --> 00:12:13,829
framework and the framework can be

00:12:12,179 --> 00:12:17,339
changed independently of the code as

00:12:13,829 --> 00:12:19,290
well gives you change isolation change

00:12:17,339 --> 00:12:21,540
is what costs businesses a lot of money

00:12:19,290 --> 00:12:23,429
if you can isolate the cost of change

00:12:21,540 --> 00:12:27,629
and reduce it your business is more

00:12:23,429 --> 00:12:28,980
efficient and more effective it solves

00:12:27,629 --> 00:12:30,240
the original problem at the big ball of

00:12:28,980 --> 00:12:31,499
string syndrome from the first

00:12:30,240 --> 00:12:33,569
generation apps that were built before

00:12:31,499 --> 00:12:36,660
frameworks you've got something that's

00:12:33,569 --> 00:12:39,720
neat and tiny with the developers you

00:12:36,660 --> 00:12:42,059
get a mindset change they start thinking

00:12:39,720 --> 00:12:44,189
about our apps as part of a bigger

00:12:42,059 --> 00:12:47,639
ecosystem rather than the app as the

00:12:44,189 --> 00:12:49,379
be-all and end-all of life and you under

00:12:47,639 --> 00:12:50,999
getting an underlying rich service lower

00:12:49,379 --> 00:12:52,690
that in future you could put an API app

00:12:50,999 --> 00:12:55,180
on top of if you wished and

00:12:52,690 --> 00:12:56,320
don't have your own web services here's

00:12:55,180 --> 00:12:59,950
a question how many of you run web

00:12:56,320 --> 00:13:02,830
services at the minute how many of you

00:12:59,950 --> 00:13:07,150
do it by taking your website and just

00:13:02,830 --> 00:13:08,860
making it also serve JSON or XML a few

00:13:07,150 --> 00:13:13,930
of you but thankfully not as many as I'd

00:13:08,860 --> 00:13:15,610
feared that's good it's a separate app

00:13:13,930 --> 00:13:16,870
for web services is a really good idea

00:13:15,610 --> 00:13:18,430
so you don't break backwards

00:13:16,870 --> 00:13:21,040
compatibility as you change your website

00:13:18,430 --> 00:13:23,500
and the this approach really helps with

00:13:21,040 --> 00:13:26,200
that I've already mentioned development

00:13:23,500 --> 00:13:29,170
in parallel applications and services so

00:13:26,200 --> 00:13:30,490
if we're building an app next year we

00:13:29,170 --> 00:13:32,440
can sit down and say here's what the

00:13:30,490 --> 00:13:33,910
screen should look like here's what the

00:13:32,440 --> 00:13:35,830
business needs to those screens to do

00:13:33,910 --> 00:13:37,960
underneath and I can run two teams in

00:13:35,830 --> 00:13:40,330
parallel to build those up alongside and

00:13:37,960 --> 00:13:42,100
I can reduce the elapsed time from the

00:13:40,330 --> 00:13:44,560
start of the project to getting things

00:13:42,100 --> 00:13:46,630
out the door we've already managed to

00:13:44,560 --> 00:13:47,860
get a project from conception to live in

00:13:46,630 --> 00:13:49,810
seven days we've done that in the past

00:13:47,860 --> 00:13:51,760
we want to be able to do that within a

00:13:49,810 --> 00:13:53,620
fortnight three weeks on a regular basis

00:13:51,760 --> 00:13:55,960
this architecture gives us that

00:13:53,620 --> 00:14:00,880
flexibility without him to bust a gut

00:13:55,960 --> 00:14:03,960
and this isolation this separation gives

00:14:00,880 --> 00:14:07,000
you discipline in your teams because

00:14:03,960 --> 00:14:08,770
you're not getting global variables all

00:14:07,000 --> 00:14:10,810
over the place creeping around or the

00:14:08,770 --> 00:14:12,250
session being badly abused which

00:14:10,810 --> 00:14:16,450
ultimately is what's niles up your

00:14:12,250 --> 00:14:18,220
application now in the PHP world I'm

00:14:16,450 --> 00:14:20,200
seen quite a few blank faces out in the

00:14:18,220 --> 00:14:21,730
audience and when I've given this talk

00:14:20,200 --> 00:14:24,310
at the user group there was a lot of

00:14:21,730 --> 00:14:26,080
blank faces there as well but the PHP

00:14:24,310 --> 00:14:28,600
world is just playing catch-up as the

00:14:26,080 --> 00:14:32,470
people already do this we are behind the

00:14:28,600 --> 00:14:34,120
curve they eat the poster child for this

00:14:32,470 --> 00:14:37,150
is pearl how many of you have done poll

00:14:34,120 --> 00:14:39,250
programming a satisfying amount

00:14:37,150 --> 00:14:41,410
excellent so pearls got this great big

00:14:39,250 --> 00:14:43,120
archive called Sipan where they have

00:14:41,410 --> 00:14:44,290
Sipan modules which is just library

00:14:43,120 --> 00:14:46,540
components are like I'm talking about

00:14:44,290 --> 00:14:48,490
here thousands and thousands of them

00:14:46,540 --> 00:14:50,230
you've got a in Perl if you need to do

00:14:48,490 --> 00:14:52,060
something chances are someone's already

00:14:50,230 --> 00:14:54,040
written a cheap and module for it you

00:14:52,060 --> 00:14:56,680
can go download it test it to see if it

00:14:54,040 --> 00:14:58,210
still works and if it does you can focus

00:14:56,680 --> 00:14:59,500
on the little bit of glue code you need

00:14:58,210 --> 00:15:02,470
to write to make it fit into your

00:14:59,500 --> 00:15:04,750
business we write a lot of pull still at

00:15:02,470 --> 00:15:06,270
grad well because we find it's a very

00:15:04,750 --> 00:15:08,010
efficient way to get things done

00:15:06,270 --> 00:15:12,540
quickly because of the large body

00:15:08,010 --> 00:15:14,100
modules out there Ruby I know people say

00:15:12,540 --> 00:15:18,420
gems have the problems of their own to

00:15:14,100 --> 00:15:21,090
do dependency hell but Ruby and rails

00:15:18,420 --> 00:15:23,040
and gems are a key part of their

00:15:21,090 --> 00:15:24,840
architecture is why they are able to

00:15:23,040 --> 00:15:28,800
innovate quicker than the PHP community

00:15:24,840 --> 00:15:30,360
can so I've talked a lot about

00:15:28,800 --> 00:15:31,710
components I've not really explained

00:15:30,360 --> 00:15:34,260
what's inside them so let's have a look

00:15:31,710 --> 00:15:37,920
inside components and what makes a good

00:15:34,260 --> 00:15:40,650
component first of all you've got to set

00:15:37,920 --> 00:15:42,060
some standards for components they need

00:15:40,650 --> 00:15:43,770
to be common standard something you

00:15:42,060 --> 00:15:46,110
apply across every component you build

00:15:43,770 --> 00:15:48,150
so you've got that sense of discipline

00:15:46,110 --> 00:15:49,710
but it allows your components to be

00:15:48,150 --> 00:15:52,640
reused by many developers in your

00:15:49,710 --> 00:15:54,750
business if for every component is

00:15:52,640 --> 00:15:56,910
completely different design in a

00:15:54,750 --> 00:15:58,650
different way built in a different way

00:15:56,910 --> 00:16:00,870
shipped in a different way you'll spend

00:15:58,650 --> 00:16:02,640
a lot of time just sucking components in

00:16:00,870 --> 00:16:06,510
rather than actually focusing on the

00:16:02,640 --> 00:16:08,310
benefit you get by reusing them it gives

00:16:06,510 --> 00:16:10,350
you a level of interoperability at all

00:16:08,310 --> 00:16:12,390
in your business if you can adopt common

00:16:10,350 --> 00:16:14,120
interfaces common ideas common

00:16:12,390 --> 00:16:18,000
philosophies common patterns if you like

00:16:14,120 --> 00:16:19,830
it can save you a lot of time but most

00:16:18,000 --> 00:16:22,260
important of all the components have to

00:16:19,830 --> 00:16:23,430
be trusted or otherwise no one is going

00:16:22,260 --> 00:16:24,750
to reuse them they're going to write

00:16:23,430 --> 00:16:27,000
their own instead and you're back to

00:16:24,750 --> 00:16:28,290
reinventing the wheel which is the last

00:16:27,000 --> 00:16:31,020
thing you want if you're trying to run

00:16:28,290 --> 00:16:33,540
an efficient business so a good

00:16:31,020 --> 00:16:36,630
component first of all it also supports

00:16:33,540 --> 00:16:38,520
autoloading you might think that's a

00:16:36,630 --> 00:16:41,450
given and it's really obvious but how

00:16:38,520 --> 00:16:44,790
many of you have used Zita components

00:16:41,450 --> 00:16:46,440
okay it has to ship with its own

00:16:44,790 --> 00:16:48,780
autoloader because it's got its own

00:16:46,440 --> 00:16:50,280
particular layout on disk for files it

00:16:48,780 --> 00:16:53,150
doesn't cut doesn't work other people's

00:16:50,280 --> 00:16:56,190
autoloaders how many of use doctrine

00:16:53,150 --> 00:16:57,840
yeah that also has to ship with its own

00:16:56,190 --> 00:17:00,960
autoloader because again it's got its

00:16:57,840 --> 00:17:02,820
own layer on disk and I could pick on

00:17:00,960 --> 00:17:04,110
many many more projects than all follow

00:17:02,820 --> 00:17:06,990
the same thing they've all got their own

00:17:04,110 --> 00:17:09,120
standards for autoloading you don't have

00:17:06,990 --> 00:17:10,440
a consistent approach which is a shame

00:17:09,120 --> 00:17:11,370
because other people actually put one

00:17:10,440 --> 00:17:14,910
together and I'll go through that

00:17:11,370 --> 00:17:17,910
shortly testing hopefully it'll many of

00:17:14,910 --> 00:17:20,209
you ruin the talk by Sebastian did and

00:17:17,910 --> 00:17:23,490
the author of phpunit

00:17:20,209 --> 00:17:25,740
testing is such importance those

00:17:23,490 --> 00:17:28,319
documentation if people have to read the

00:17:25,740 --> 00:17:30,120
source though wasting time they really

00:17:28,319 --> 00:17:31,559
are the source doesn't tell them how

00:17:30,120 --> 00:17:33,090
your code is meant to be used it only

00:17:31,559 --> 00:17:35,880
tells them what the code actually does

00:17:33,090 --> 00:17:37,710
the why the intention you can't get from

00:17:35,880 --> 00:17:40,230
source code you can guess it but you

00:17:37,710 --> 00:17:42,870
cannot be certain components need to be

00:17:40,230 --> 00:17:44,309
easy install into it easy to install the

00:17:42,870 --> 00:17:46,980
last thing you want to do is waste time

00:17:44,309 --> 00:17:50,520
trying to get a component to work as a

00:17:46,980 --> 00:17:53,340
pet project and don't break can

00:17:50,520 --> 00:17:54,809
backwards compatibility by surprise this

00:17:53,340 --> 00:17:56,669
is a major problem with components as

00:17:54,809 --> 00:17:58,080
well if you're upgrading a component you

00:17:56,669 --> 00:18:00,809
want to know you can drop it in route

00:17:58,080 --> 00:18:02,970
and to change your code at all your code

00:18:00,809 --> 00:18:07,140
should just work when opponents got bug

00:18:02,970 --> 00:18:08,340
fixes in its got new features in now

00:18:07,140 --> 00:18:10,799
we've said before about keeping

00:18:08,340 --> 00:18:12,120
components outside of the app and using

00:18:10,799 --> 00:18:14,640
an autoloader to pull in those

00:18:12,120 --> 00:18:17,010
components the reason for using an

00:18:14,640 --> 00:18:18,840
autoloader is the best reason in the

00:18:17,010 --> 00:18:24,200
world to do anything because it makes

00:18:18,840 --> 00:18:29,040
life easy so who's heard of PSR 0

00:18:24,200 --> 00:18:30,750
excellent so there's a group of Peru of

00:18:29,040 --> 00:18:32,400
the leading members of the PHP community

00:18:30,750 --> 00:18:36,120
came together because the autoloader

00:18:32,400 --> 00:18:37,950
situation is not what one would wish I

00:18:36,120 --> 00:18:39,480
think it's fair to say and they put

00:18:37,950 --> 00:18:42,480
together a proposal for a common

00:18:39,480 --> 00:18:45,870
behavior of all autoloaders and that's

00:18:42,480 --> 00:18:48,660
the URL for it do go do go there do have

00:18:45,870 --> 00:18:51,780
a read of it it's a very very good piece

00:18:48,660 --> 00:18:53,640
of work is backed by leading names in

00:18:51,780 --> 00:18:56,660
the company so the symphony guys were

00:18:53,640 --> 00:18:59,190
there the Zen frameworks guys were there

00:18:56,660 --> 00:19:02,730
jonathan from doctrine reserve memory

00:18:59,190 --> 00:19:04,320
serves it's got the backing of people

00:19:02,730 --> 00:19:06,870
who I need to put this into their

00:19:04,320 --> 00:19:08,429
frameworks and four components it's

00:19:06,870 --> 00:19:10,230
perfectly well designed as well of

00:19:08,429 --> 00:19:11,820
whether or not they had that in mind at

00:19:10,230 --> 00:19:14,210
the time I don't know how I wasn't part

00:19:11,820 --> 00:19:18,299
of it but it's really good thing to do

00:19:14,210 --> 00:19:21,720
and here's how it works namespaces how

00:19:18,299 --> 00:19:23,880
many of you use namespaces more of you

00:19:21,720 --> 00:19:26,490
need to look great done namespaces have

00:19:23,880 --> 00:19:28,230
a separator with the backslash and that

00:19:26,490 --> 00:19:30,780
gets turned into PHP's directory

00:19:28,230 --> 00:19:32,520
separator and when when translating a

00:19:30,780 --> 00:19:33,450
class name into a file name on disk to

00:19:32,520 --> 00:19:35,970
autoload

00:19:33,450 --> 00:19:37,470
the underscoring class names becomes a

00:19:35,970 --> 00:19:39,029
directory separate and that's a fairly

00:19:37,470 --> 00:19:43,110
common thing most autoloaders do at the

00:19:39,029 --> 00:19:44,669
minute the idea is the top namespace the

00:19:43,110 --> 00:19:46,230
first folder that the autoloaders

00:19:44,669 --> 00:19:48,450
looking inside should be the name of

00:19:46,230 --> 00:19:50,519
your organization my guess is they're

00:19:48,450 --> 00:19:52,799
trying to avoid Java type name spaces

00:19:50,519 --> 00:19:54,779
where it's calm cool name dot

00:19:52,799 --> 00:19:56,039
subdivision da blah blah blah eventually

00:19:54,779 --> 00:19:57,870
you get to the classroom actually trying

00:19:56,039 --> 00:20:00,929
to load with a very long path that you

00:19:57,870 --> 00:20:02,549
get very bored with and these simple

00:20:00,929 --> 00:20:04,409
rules give you a one-to-one mapping from

00:20:02,549 --> 00:20:06,750
your class name to a file name on desk

00:20:04,409 --> 00:20:09,630
deterministic which is the best property

00:20:06,750 --> 00:20:12,200
of any piece of code so here's an

00:20:09,630 --> 00:20:15,389
example at the top there we've got a

00:20:12,200 --> 00:20:17,580
class name from the project I was

00:20:15,389 --> 00:20:22,230
working on at the time and the file name

00:20:17,580 --> 00:20:24,299
it turns into on disk very simple very

00:20:22,230 --> 00:20:26,669
straightforward and if we throw an

00:20:24,299 --> 00:20:31,830
underscore ins you can see how we end up

00:20:26,669 --> 00:20:36,630
with a separate directory though very

00:20:31,830 --> 00:20:38,940
simple rule very easy to follow and I've

00:20:36,630 --> 00:20:40,760
written a very simple autoloader which

00:20:38,940 --> 00:20:43,889
you can download and use if you wish

00:20:40,760 --> 00:20:46,169
it's released under the bsd license

00:20:43,889 --> 00:20:49,769
which implements these rules for you so

00:20:46,169 --> 00:20:53,760
you don't have to write your own that's

00:20:49,769 --> 00:20:55,169
autoloading testing and you can't

00:20:53,760 --> 00:20:58,649
mention testing without mentioning

00:20:55,169 --> 00:21:02,639
Sebastian and phpunit how many of you

00:20:58,649 --> 00:21:07,470
use PHP unit how many of you use

00:21:02,639 --> 00:21:10,669
something else add falls and how many of

00:21:07,470 --> 00:21:12,720
you don't use any unit testing at all I

00:21:10,669 --> 00:21:16,500
hope I can convince you to change your

00:21:12,720 --> 00:21:18,330
behavior than when it comes to testing

00:21:16,500 --> 00:21:20,010
there's only one there's only ones unit

00:21:18,330 --> 00:21:22,950
to look down that's phpunit for unit

00:21:20,010 --> 00:21:25,500
testing it's the de facto standard for

00:21:22,950 --> 00:21:28,500
unit testing forget lime forget simple

00:21:25,500 --> 00:21:31,500
test this is the one to use it's

00:21:28,500 --> 00:21:32,789
supported by the leading ideas if those

00:21:31,500 --> 00:21:34,049
of you who use an idea and take

00:21:32,789 --> 00:21:36,990
advantage of the features they offer

00:21:34,049 --> 00:21:39,299
they've got PHP support phpunit support

00:21:36,990 --> 00:21:41,130
baked in and the continuous integration

00:21:39,299 --> 00:21:43,740
environments are all the good ones

00:21:41,130 --> 00:21:46,060
support PHP units as well it makes your

00:21:43,740 --> 00:21:47,590
life a lot easier

00:21:46,060 --> 00:21:49,000
and sebastian's on a really good job

00:21:47,590 --> 00:21:52,990
with it and it works really well with

00:21:49,000 --> 00:21:55,600
components so use it but what makes a

00:21:52,990 --> 00:21:57,250
good test for a component if you're in

00:21:55,600 --> 00:22:01,000
Sebastian's talk earlier you'd have been

00:21:57,250 --> 00:22:02,770
saying about how they he can turn his

00:22:01,000 --> 00:22:06,310
tests into a set of documentation that

00:22:02,770 --> 00:22:08,500
describe how his code behaves your your

00:22:06,310 --> 00:22:11,740
tests should document the behavior that

00:22:08,500 --> 00:22:13,930
your code is supposed to exhibit if you

00:22:11,740 --> 00:22:15,160
write tests in that way people should be

00:22:13,930 --> 00:22:16,780
able to read your test and understand

00:22:15,160 --> 00:22:19,060
how to use your code how you meant your

00:22:16,780 --> 00:22:22,540
code to be used it's a brilliant way of

00:22:19,060 --> 00:22:25,840
doing things regression tests do any of

00:22:22,540 --> 00:22:26,860
you do regression testing okay do you

00:22:25,840 --> 00:22:29,950
all know what i mean by regression

00:22:26,860 --> 00:22:32,170
testing is anyone who doesn't okay so

00:22:29,950 --> 00:22:34,780
when you get a regression bug through

00:22:32,170 --> 00:22:36,370
write a test for it give it the same

00:22:34,780 --> 00:22:38,530
name it as a ticket you've had through

00:22:36,370 --> 00:22:40,690
so you know what what what problem was

00:22:38,530 --> 00:22:42,130
found and your developers can always go

00:22:40,690 --> 00:22:44,320
back and see what was going on at the

00:22:42,130 --> 00:22:45,970
time in your ticketing system and make

00:22:44,320 --> 00:22:49,240
each a test for each of those bugs

00:22:45,970 --> 00:22:51,640
you've get code coverage hundred percent

00:22:49,240 --> 00:22:53,500
I admit I've changed my tune on this

00:22:51,640 --> 00:22:54,820
over the years when I started out doing

00:22:53,500 --> 00:22:56,830
software development in the ninth is

00:22:54,820 --> 00:22:58,660
this was what we were taught to do it

00:22:56,830 --> 00:23:00,760
cost forty percent of a project's budget

00:22:58,660 --> 00:23:02,560
hundred percent Co testing bathroom

00:23:00,760 --> 00:23:05,010
we're doing see stuff in the nineties

00:23:02,560 --> 00:23:07,990
and I thought that was to higher costs

00:23:05,010 --> 00:23:10,480
but and come back to it with PHP unit

00:23:07,990 --> 00:23:12,130
and PHP tests you realize that without

00:23:10,480 --> 00:23:13,690
hundred percent code coverage you don't

00:23:12,130 --> 00:23:15,790
drive all the bugs out of your code and

00:23:13,690 --> 00:23:18,700
you can ship some severe surprising coat

00:23:15,790 --> 00:23:22,030
bugs in your code because the bits you

00:23:18,700 --> 00:23:23,500
haven't tested are your assumptions your

00:23:22,030 --> 00:23:25,300
way you've assumed something's going to

00:23:23,500 --> 00:23:28,570
behave a certain way one hundred percent

00:23:25,300 --> 00:23:30,310
code coverage proves where your

00:23:28,570 --> 00:23:33,430
assumptions are right and you'll find

00:23:30,310 --> 00:23:35,770
that normally wrong and you should ship

00:23:33,430 --> 00:23:37,000
your tests with the component pearl is

00:23:35,770 --> 00:23:38,860
brilliant for this when you install the

00:23:37,000 --> 00:23:40,600
perl module it actually runs the tests

00:23:38,860 --> 00:23:42,010
as part of the install and if the tests

00:23:40,600 --> 00:23:44,620
fail it won't let you install the module

00:23:42,010 --> 00:23:46,810
it would be wonderful if say the pair

00:23:44,620 --> 00:23:48,610
project to pick on them again and

00:23:46,810 --> 00:23:50,140
actually did that so you could download

00:23:48,610 --> 00:23:51,880
a module will run the test and see

00:23:50,140 --> 00:23:54,610
whether that module worked on what the

00:23:51,880 --> 00:23:56,720
test didn't pass wouldn't install a you

00:23:54,610 --> 00:23:58,159
won't end up debugging code

00:23:56,720 --> 00:23:59,750
perhaps should not be installed in the

00:23:58,159 --> 00:24:03,500
first place would be wonderful to do

00:23:59,750 --> 00:24:07,090
that and if you haven't got phpunit go

00:24:03,500 --> 00:24:07,090
get it from Sebastian's website

00:24:07,179 --> 00:24:13,309
documentation I imagine a lot of your

00:24:11,120 --> 00:24:18,409
developers how many of you like writing

00:24:13,309 --> 00:24:23,330
documentation but how many of you like

00:24:18,409 --> 00:24:26,570
reading documentation that's a lot of

00:24:23,330 --> 00:24:28,730
you but not all of you by any means if

00:24:26,570 --> 00:24:32,929
you want something to be reused people

00:24:28,730 --> 00:24:35,600
need to be able to learn it and when it

00:24:32,929 --> 00:24:39,289
comes to documentation PHP leads the way

00:24:35,600 --> 00:24:42,799
in this PHP is manual is one of PHP's

00:24:39,289 --> 00:24:44,179
killer features you want to learn rails

00:24:42,799 --> 00:24:47,240
you want to learn any of the Python

00:24:44,179 --> 00:24:49,220
stuff you want to learn net their

00:24:47,240 --> 00:24:50,929
documentation some of its freely

00:24:49,220 --> 00:24:52,280
available online not all of it is some

00:24:50,929 --> 00:24:55,549
of them you got to buy dead tree bucks

00:24:52,280 --> 00:24:57,590
for with PHP anyone can go to the

00:24:55,549 --> 00:25:00,799
website download PHP start reading the

00:24:57,590 --> 00:25:02,990
manual and become a PHP programmer and I

00:25:00,799 --> 00:25:04,760
don't know about you but even today I go

00:25:02,990 --> 00:25:06,919
to the PHP we manual website every

00:25:04,760 --> 00:25:09,169
single day I don't keep all of it in my

00:25:06,919 --> 00:25:11,590
head it's my first go to resource my own

00:25:09,169 --> 00:25:14,450
programming it's a massive massive

00:25:11,590 --> 00:25:16,280
killer feature for PHP your

00:25:14,450 --> 00:25:19,460
documentation should be at least as good

00:25:16,280 --> 00:25:20,870
as that there's no reason why it can't

00:25:19,460 --> 00:25:22,820
be except that you don't want to write

00:25:20,870 --> 00:25:26,179
it that's the only reason why it can't

00:25:22,820 --> 00:25:27,919
be that good I promise you a good

00:25:26,179 --> 00:25:29,179
documentation first of all should

00:25:27,919 --> 00:25:30,950
explain how to actually load your code

00:25:29,179 --> 00:25:33,440
up and get and get started with it

00:25:30,950 --> 00:25:35,720
because it's amazing how many developers

00:25:33,440 --> 00:25:36,950
forget because I so used to using their

00:25:35,720 --> 00:25:39,950
own code they forget about how you

00:25:36,950 --> 00:25:43,400
initialize things show people how you

00:25:39,950 --> 00:25:46,400
want it used give some examples and

00:25:43,400 --> 00:25:48,140
don't do trivial ones they're actually

00:25:46,400 --> 00:25:51,559
give some real useful examples of how to

00:25:48,140 --> 00:25:54,650
use your code and as people feed back to

00:25:51,559 --> 00:25:56,809
you with notes and questions put those

00:25:54,650 --> 00:25:58,400
up there as well because if someone's

00:25:56,809 --> 00:26:00,350
ask the questions someone else is going

00:25:58,400 --> 00:26:02,690
to have the same question especially if

00:26:00,350 --> 00:26:04,820
your components get popular the PHP

00:26:02,690 --> 00:26:06,980
manual does all of that very very well

00:26:04,820 --> 00:26:08,419
indeed they're all strength of the PHP

00:26:06,980 --> 00:26:10,649
manual

00:26:08,419 --> 00:26:12,000
now if I have not convinced you to write

00:26:10,649 --> 00:26:14,940
documentation I've got four more

00:26:12,000 --> 00:26:17,279
attempts at that write it down so you

00:26:14,940 --> 00:26:18,720
don't have to remember how it works you

00:26:17,279 --> 00:26:20,519
come back to your code to three months

00:26:18,720 --> 00:26:22,889
down the road that memory will have

00:26:20,519 --> 00:26:24,570
faded to a greater or lesser extent if

00:26:22,889 --> 00:26:27,960
you write it down while you're creating

00:26:24,570 --> 00:26:29,129
it you don't have to remember write it

00:26:27,960 --> 00:26:31,350
down so you don't have to explain to

00:26:29,129 --> 00:26:33,179
your colleagues it's fine if you're all

00:26:31,350 --> 00:26:34,740
sat in the same office but if you're

00:26:33,179 --> 00:26:37,620
working on different time zones around

00:26:34,740 --> 00:26:39,330
the world having to be on a late-night

00:26:37,620 --> 00:26:40,860
conference call to explain a piece of

00:26:39,330 --> 00:26:42,389
code you wrote to somebody who can't

00:26:40,860 --> 00:26:45,779
make it work because you never

00:26:42,389 --> 00:26:47,100
documented it gets to be a drag so write

00:26:45,779 --> 00:26:49,309
it down so you don't have to explain it

00:26:47,100 --> 00:26:52,200
to everyone else you write it down once

00:26:49,309 --> 00:26:55,139
every few hundreds of developers can

00:26:52,200 --> 00:26:56,820
read that it scales people shouldn't

00:26:55,139 --> 00:26:59,159
have to read the source code so just to

00:26:56,820 --> 00:27:01,649
get started with stuff that they have

00:26:59,159 --> 00:27:04,830
you really have firm failed on that

00:27:01,649 --> 00:27:06,690
score and all of this means that other

00:27:04,830 --> 00:27:09,809
people are more likely to reuse your

00:27:06,690 --> 00:27:11,100
efforts and we avoid the perennial

00:27:09,809 --> 00:27:13,710
problem in the PHP community of

00:27:11,100 --> 00:27:15,000
constantly reinventing the wheel which

00:27:13,710 --> 00:27:19,049
we were all very guilty of as a

00:27:15,000 --> 00:27:22,139
community and again I'm going to go back

00:27:19,049 --> 00:27:25,139
to Sebastian and his website he's used

00:27:22,139 --> 00:27:27,169
docbook to document phpunit and the

00:27:25,139 --> 00:27:29,340
components that are built inside that

00:27:27,169 --> 00:27:32,519
Sebastian's framework for this is

00:27:29,340 --> 00:27:33,990
available on github if you ask sebastian

00:27:32,519 --> 00:27:36,330
you'll find he's quite happy to let

00:27:33,990 --> 00:27:38,490
people use it reuse what he's already

00:27:36,330 --> 00:27:40,320
done it works it works really well you

00:27:38,490 --> 00:27:42,450
can generate stuff for your iPad if

00:27:40,320 --> 00:27:44,039
you've got one or your kindle you can

00:27:42,450 --> 00:27:46,049
generate a PDF for those people who need

00:27:44,039 --> 00:27:47,250
one of those saves you a lot of time and

00:27:46,049 --> 00:27:49,320
you can just focus on writing the

00:27:47,250 --> 00:27:52,440
documentation he's actually made docbook

00:27:49,320 --> 00:27:54,929
look not revolting to put to render on

00:27:52,440 --> 00:27:57,000
the website which in itself of fairly

00:27:54,929 --> 00:27:58,350
good achievement I'd say I'm getting

00:27:57,000 --> 00:28:02,610
quite a few nods from the back there on

00:27:58,350 --> 00:28:05,450
that one but what about phpdoc how many

00:28:02,610 --> 00:28:10,580
of you actually use PHP documentation a

00:28:05,450 --> 00:28:10,580
lot of you what do you think of it

00:28:11,950 --> 00:28:17,490
heard of rubbish come out of the

00:28:13,090 --> 00:28:20,139
audience there now phpdoc has some merit

00:28:17,490 --> 00:28:21,700
your IDE likes it because it's the only

00:28:20,139 --> 00:28:23,950
way it's got any clue what your

00:28:21,700 --> 00:28:25,840
parameters are meant to be defeat your

00:28:23,950 --> 00:28:28,320
IDE will use it for type hinting proto

00:28:25,840 --> 00:28:31,179
completion so it's very handy for that

00:28:28,320 --> 00:28:33,850
it's a good disciplined for your

00:28:31,179 --> 00:28:36,309
developers to actually write the dot

00:28:33,850 --> 00:28:38,289
book for a method so they summarize what

00:28:36,309 --> 00:28:39,399
the methods supposed to be I've lost

00:28:38,289 --> 00:28:41,260
count them out of time I've seen a

00:28:39,399 --> 00:28:42,760
developer summarize what their methods

00:28:41,260 --> 00:28:44,830
supposed to be and when they read the

00:28:42,760 --> 00:28:46,809
method summary back realize the methods

00:28:44,830 --> 00:28:48,460
either doing far too much work actually

00:28:46,809 --> 00:28:49,720
isn't solving the problem they thought

00:28:48,460 --> 00:28:53,139
it was when they started off just

00:28:49,720 --> 00:28:54,850
creating code but PHP Doc's great

00:28:53,139 --> 00:28:58,419
strength is as a reference documentation

00:28:54,850 --> 00:28:59,980
not as a manual it's you can't really

00:28:58,419 --> 00:29:01,600
use it to write tutorials very well in

00:28:59,980 --> 00:29:03,429
its get help people understand how you

00:29:01,600 --> 00:29:05,230
want things used but it's great stories

00:29:03,429 --> 00:29:06,279
to look up a method to see what the

00:29:05,230 --> 00:29:08,049
individual method is and watch

00:29:06,279 --> 00:29:11,049
parameters are so it does have some

00:29:08,049 --> 00:29:13,179
strengths packaging and installation

00:29:11,049 --> 00:29:15,820
I've been picking on the pair project

00:29:13,179 --> 00:29:18,250
but I have to recommend pairs installer

00:29:15,820 --> 00:29:19,720
as the way you actually install these

00:29:18,250 --> 00:29:22,480
components and you build them as pair

00:29:19,720 --> 00:29:24,130
packages it's a communicator

00:29:22,480 --> 00:29:26,470
community-created solution it's in

00:29:24,130 --> 00:29:29,440
widespread use already wherever you like

00:29:26,470 --> 00:29:32,590
pair and its format or not I'll be asked

00:29:29,440 --> 00:29:36,070
and say I think of some of it needs some

00:29:32,590 --> 00:29:37,690
serious improvement but it works the

00:29:36,070 --> 00:29:40,600
pair installer is found on most

00:29:37,690 --> 00:29:42,340
computers who have PHP it used to be

00:29:40,600 --> 00:29:44,529
pair of course shipped with PHP in these

00:29:42,340 --> 00:29:46,330
days it's shipped separately but you can

00:29:44,529 --> 00:29:48,190
get it for every vision version of year

00:29:46,330 --> 00:29:49,600
Linux you can put it on Windows machines

00:29:48,190 --> 00:29:53,139
that i've heard mixed results about the

00:29:49,600 --> 00:29:56,559
quality of that it's kits available in a

00:29:53,139 --> 00:29:59,320
way no other tool is you can install

00:29:56,559 --> 00:30:01,419
components wants to be used across the

00:29:59,320 --> 00:30:04,000
system but it also supports support and

00:30:01,419 --> 00:30:06,279
storing components into a sandbox so

00:30:04,000 --> 00:30:08,830
each application on a server can have

00:30:06,279 --> 00:30:10,659
its own pair repository with its own set

00:30:08,830 --> 00:30:13,419
of components then and you don't have

00:30:10,659 --> 00:30:15,429
problems of upgrading a system component

00:30:13,419 --> 00:30:17,760
and breaking 10 of our apps on the box

00:30:15,429 --> 00:30:20,529
at the same time very handy though and

00:30:17,760 --> 00:30:22,870
it's dead easy to publish your own pair

00:30:20,529 --> 00:30:24,169
packages and host your own pair package

00:30:22,870 --> 00:30:27,859
website

00:30:24,169 --> 00:30:29,960
easy to do that it's it couldn't be

00:30:27,859 --> 00:30:31,909
easier really couldn't fabulous done a

00:30:29,960 --> 00:30:34,489
great job making that happen with what

00:30:31,909 --> 00:30:35,960
he's done for symphony and he's built a

00:30:34,489 --> 00:30:37,129
tool called param to use that how many

00:30:35,960 --> 00:30:43,070
of you actually host your own pair

00:30:37,129 --> 00:30:44,659
channel nobody hopefully this talk will

00:30:43,070 --> 00:30:47,059
inspire at least one of you to do that

00:30:44,659 --> 00:30:48,679
and I'll be small change the world if

00:30:47,059 --> 00:30:51,200
you do you sell your own pair channel

00:30:48,679 --> 00:30:53,179
don't mess about just sit just get peer

00:30:51,200 --> 00:30:54,379
and slap it on a box you're up and

00:30:53,179 --> 00:30:57,019
running and got your impair channel in

00:30:54,379 --> 00:30:58,909
five minutes you have to one xml file to

00:30:57,019 --> 00:31:02,809
edit you run one command and it's done

00:30:58,909 --> 00:31:04,669
it couldn't be easier now we've got a

00:31:02,809 --> 00:31:06,859
are impaired channel where we're slowly

00:31:04,669 --> 00:31:08,419
laying out some open source stuff for

00:31:06,859 --> 00:31:09,619
what we do at work there isn't much up

00:31:08,419 --> 00:31:12,200
there at the minute there'll be more

00:31:09,619 --> 00:31:14,899
over the coming months and years and if

00:31:12,200 --> 00:31:17,659
you point a browser at the web at a pear

00:31:14,899 --> 00:31:22,429
pad channel set up by param this is the

00:31:17,659 --> 00:31:24,200
sort of screen you'll see and for

00:31:22,429 --> 00:31:25,940
actually making components I've knocked

00:31:24,200 --> 00:31:28,309
up a little command line utility called

00:31:25,940 --> 00:31:30,049
fix which will create the skeleton of a

00:31:28,309 --> 00:31:31,639
component for you so you can just put

00:31:30,049 --> 00:31:33,619
your code in there your unit tests in

00:31:31,639 --> 00:31:36,109
there and it will generate pair packages

00:31:33,619 --> 00:31:39,559
for you as well and that's the veil of I

00:31:36,109 --> 00:31:42,710
github I'll be blogging about that over

00:31:39,559 --> 00:31:45,049
the weekend as well now backwards

00:31:42,710 --> 00:31:48,409
compatibility this is very important

00:31:45,049 --> 00:31:49,869
because when people use components they

00:31:48,409 --> 00:31:52,820
feel like they're walking on eggshells

00:31:49,869 --> 00:31:54,590
things are going to break outside of

00:31:52,820 --> 00:31:57,279
their control so backwards compatibility

00:31:54,590 --> 00:32:00,590
with components is a key thing to solve

00:31:57,279 --> 00:32:04,159
why does it matter you've got to isolate

00:32:00,590 --> 00:32:05,359
your component to reduce the effective

00:32:04,159 --> 00:32:06,769
change that's the whole point of

00:32:05,359 --> 00:32:09,080
creating component you've got such a

00:32:06,769 --> 00:32:10,549
small piece of code isn't affected by

00:32:09,080 --> 00:32:13,759
everything else going on around it as

00:32:10,549 --> 00:32:15,200
the world changes so you're trying to

00:32:13,759 --> 00:32:16,369
reduce your costs from the business

00:32:15,200 --> 00:32:17,389
point of view and as a developer's point

00:32:16,369 --> 00:32:18,559
of view you want to write the code and

00:32:17,389 --> 00:32:21,169
move on to something else you don't have

00:32:18,559 --> 00:32:23,269
to keep coming back to it but the moment

00:32:21,169 --> 00:32:25,639
you break backwards compatibility that

00:32:23,269 --> 00:32:28,100
cost is gone I'm sorry that benefit is

00:32:25,639 --> 00:32:30,710
gone as turned into a cost you're great

00:32:28,100 --> 00:32:32,119
a just picking up a package how many of

00:32:30,710 --> 00:32:34,460
you upgraded pair packages have found

00:32:32,119 --> 00:32:37,930
your app stopped working

00:32:34,460 --> 00:32:40,670
yes I've had that experience as well and

00:32:37,930 --> 00:32:43,850
it's unnecessary you don't need to do it

00:32:40,670 --> 00:32:46,580
and the more components you use in a nap

00:32:43,850 --> 00:32:50,390
all the more apps use your components

00:32:46,580 --> 00:32:54,230
the cost scales negatively it's really

00:32:50,390 --> 00:32:55,790
bad it's something to really avoid it's

00:32:54,230 --> 00:32:59,330
easy to solve just by doing a very

00:32:55,790 --> 00:33:01,010
simple versioning scheme how many how

00:32:59,330 --> 00:33:05,120
many of you actually put version numbers

00:33:01,010 --> 00:33:08,630
on your code less than half about a

00:33:05,120 --> 00:33:10,790
quarter say that in the old days we used

00:33:08,630 --> 00:33:12,350
to call every so slow XYZ as the

00:33:10,790 --> 00:33:15,410
numbering scheme this has been around

00:33:12,350 --> 00:33:19,040
for decades where x is the major version

00:33:15,410 --> 00:33:20,960
but it's also your api version or your

00:33:19,040 --> 00:33:23,260
if you're working in see your ABI

00:33:20,960 --> 00:33:26,420
version your binary interface version

00:33:23,260 --> 00:33:27,650
one point x is your promise to customers

00:33:26,420 --> 00:33:30,470
that you're not going to break the

00:33:27,650 --> 00:33:32,690
backwards compatibility add new features

00:33:30,470 --> 00:33:34,610
you increment the second number so one

00:33:32,690 --> 00:33:37,490
point one has new features but is

00:33:34,610 --> 00:33:39,440
backwards compatible with 1.0 1.2 has

00:33:37,490 --> 00:33:43,190
new features backwards compatible with

00:33:39,440 --> 00:33:45,560
both 1.1 and 1.0 and then we use the

00:33:43,190 --> 00:33:46,820
third number for bug fixes so you've not

00:33:45,560 --> 00:33:49,070
added new features you just fix

00:33:46,820 --> 00:33:50,720
something you've broken you can show

00:33:49,070 --> 00:33:55,250
users that by changing the version

00:33:50,720 --> 00:33:57,260
number on your next release now you

00:33:55,250 --> 00:33:59,150
backwards compatibility you have to

00:33:57,260 --> 00:34:01,130
break that sometimes for innovation to

00:33:59,150 --> 00:34:04,670
move things forward otherwise we'd all

00:34:01,130 --> 00:34:06,340
still be using PHP one which I never use

00:34:04,670 --> 00:34:10,040
but i can't imagine it'd be much fun

00:34:06,340 --> 00:34:13,280
just don't do it by surprise by changing

00:34:10,040 --> 00:34:15,020
the X number you warn people like you've

00:34:13,280 --> 00:34:16,820
broken backwards compatibility and they

00:34:15,020 --> 00:34:18,620
can choose whether to go to version 10

00:34:16,820 --> 00:34:20,330
from version 9 or stick with version 9

00:34:18,620 --> 00:34:21,950
you give them the choice they can make

00:34:20,330 --> 00:34:23,180
an informed decision you're not

00:34:21,950 --> 00:34:27,110
surprising them you're not ambushing

00:34:23,180 --> 00:34:29,540
them don't be afraid to bump that number

00:34:27,110 --> 00:34:31,880
that first number up at all one two

00:34:29,540 --> 00:34:33,410
three four five six seven don't say oh

00:34:31,880 --> 00:34:34,880
we've got to go from verton aversion to

00:34:33,410 --> 00:34:37,700
diversion three don't let that be a

00:34:34,880 --> 00:34:39,500
reason to stop you innovating because

00:34:37,700 --> 00:34:41,600
google chrome's already on version 10

00:34:39,500 --> 00:34:43,540
and that's what it's out pretty well for

00:34:41,600 --> 00:34:47,060
them so far think we'd all agree yes

00:34:43,540 --> 00:34:48,210
okay the days when version numbers are

00:34:47,060 --> 00:34:50,040
controlled tightly by

00:34:48,210 --> 00:34:52,649
marketing companies thankfully seem to

00:34:50,040 --> 00:34:54,149
be over at least for the moment sadly

00:34:52,649 --> 00:34:56,639
what goes around comes around we'll come

00:34:54,149 --> 00:34:58,140
back I know but for the moment version

00:34:56,639 --> 00:35:01,200
version numbers seem to be back in the

00:34:58,140 --> 00:35:04,349
hands of developers so to recap about

00:35:01,200 --> 00:35:09,000
components good components autoload p sr

00:35:04,349 --> 00:35:12,420
0 well tested phpunit unit tests the

00:35:09,000 --> 00:35:14,040
well-documented write it down so other

00:35:12,420 --> 00:35:17,400
people can read it without having to ask

00:35:14,040 --> 00:35:19,080
you and they're easy to install create

00:35:17,400 --> 00:35:22,020
pair packages use param to host your

00:35:19,080 --> 00:35:23,460
impair channel and use transparent

00:35:22,020 --> 00:35:26,520
version numbers so you don't break

00:35:23,460 --> 00:35:28,770
backwards compatibility by surprise if

00:35:26,520 --> 00:35:31,410
you follow those guidelines you'll get

00:35:28,770 --> 00:35:37,730
the benefits of components without the

00:35:31,410 --> 00:35:39,660
costs of doing it badly and there we go

00:35:37,730 --> 00:35:42,089
those of you read the slides online

00:35:39,660 --> 00:35:44,040
later there's a reminder there about

00:35:42,089 --> 00:35:48,630
that so I want to show an example just

00:35:44,040 --> 00:35:51,050
to finish of Y components are helping us

00:35:48,630 --> 00:35:53,730
in our business actual concrete example

00:35:51,050 --> 00:35:58,950
and some of my staff and x staffer in

00:35:53,730 --> 00:36:03,359
the audience so feel free to heckle i'm

00:35:58,950 --> 00:36:05,070
used to it ok so here's an example now

00:36:03,359 --> 00:36:07,080
for our website we sell broadband

00:36:05,070 --> 00:36:09,390
products so we've got a sales website

00:36:07,080 --> 00:36:11,130
where we've got a sales pitch we've got

00:36:09,390 --> 00:36:12,839
the product specs and an availability

00:36:11,130 --> 00:36:16,020
jacket can you get our broadband what

00:36:12,839 --> 00:36:17,190
speed will it be the usual thing but

00:36:16,020 --> 00:36:19,109
we've also got a control panel for

00:36:17,190 --> 00:36:21,990
customers once they've signed up where

00:36:19,109 --> 00:36:23,790
they they can manage their account they

00:36:21,990 --> 00:36:26,339
can read their invoices and hopefully

00:36:23,790 --> 00:36:27,869
pay them that'd be nice and we also have

00:36:26,339 --> 00:36:29,940
the availability checker on there

00:36:27,869 --> 00:36:32,460
because broadband is an all we sell and

00:36:29,940 --> 00:36:34,380
the control panel is a place we can put

00:36:32,460 --> 00:36:36,000
new products in front of customers to

00:36:34,380 --> 00:36:37,800
cross-sell to get them to buy an

00:36:36,000 --> 00:36:41,150
additional product from us so we need

00:36:37,800 --> 00:36:45,030
the same functionality in both places

00:36:41,150 --> 00:36:47,190
now at the minute the sales website gets

00:36:45,030 --> 00:36:49,290
that functionality from the control

00:36:47,190 --> 00:36:51,540
panel we just inject an iframe into the

00:36:49,290 --> 00:36:53,700
sales website to do this has the

00:36:51,540 --> 00:36:57,720
advantage that gives the same experience

00:36:53,700 --> 00:36:59,520
on both websites and our control panel

00:36:57,720 --> 00:37:02,040
then has the code that talks by a soap

00:36:59,520 --> 00:37:04,020
and to the third party

00:37:02,040 --> 00:37:05,850
he provides our broadband because we re

00:37:04,020 --> 00:37:07,980
resale open to skylers broadband

00:37:05,850 --> 00:37:10,890
products we don't actually manage all

00:37:07,980 --> 00:37:12,630
the cabling etc ourselves so that's an

00:37:10,890 --> 00:37:16,010
architecture it works you can make money

00:37:12,630 --> 00:37:18,630
off it but you does come with a problem

00:37:16,010 --> 00:37:20,010
we wanted to change our third party and

00:37:18,630 --> 00:37:21,870
sell some different broadband products

00:37:20,010 --> 00:37:24,180
there's a lot of innovation going on in

00:37:21,870 --> 00:37:25,830
broadband and we need to change

00:37:24,180 --> 00:37:27,090
companies to do that which means

00:37:25,830 --> 00:37:28,560
changing the provisioning system

00:37:27,090 --> 00:37:32,210
changing the fault reporting and

00:37:28,560 --> 00:37:34,260
changing the availability checker now

00:37:32,210 --> 00:37:37,770
hopefully you can see you already on the

00:37:34,260 --> 00:37:39,420
diagram the problem this causes we

00:37:37,770 --> 00:37:42,390
didn't want to change the control panel

00:37:39,420 --> 00:37:44,160
at the time to support than the new

00:37:42,390 --> 00:37:46,290
third party products because it's got

00:37:44,160 --> 00:37:52,110
its own roadmap but we did want to get

00:37:46,290 --> 00:37:54,150
it into the sales website and so we were

00:37:52,110 --> 00:37:55,590
forced with the idea of changing our

00:37:54,150 --> 00:37:57,540
control panel even though we didn't want

00:37:55,590 --> 00:38:00,630
to with our current architecture we

00:37:57,540 --> 00:38:02,790
needed to change that because we want to

00:38:00,630 --> 00:38:04,080
actually retire that control panel I've

00:38:02,790 --> 00:38:05,880
got a team of people at the minute

00:38:04,080 --> 00:38:08,010
writing a replacement so I wanted I

00:38:05,880 --> 00:38:09,360
don't spend more money on dead code I

00:38:08,010 --> 00:38:11,250
want to be able to switch this this

00:38:09,360 --> 00:38:13,140
thing off later this year and if I'm

00:38:11,250 --> 00:38:15,000
writing new code for it I'm never going

00:38:13,140 --> 00:38:18,420
to switch it off so here is an

00:38:15,000 --> 00:38:21,240
architectural problem so what we did is

00:38:18,420 --> 00:38:22,800
we took the code that talks to the third

00:38:21,240 --> 00:38:24,540
parties availability checker and we

00:38:22,800 --> 00:38:28,830
separated it out into a component

00:38:24,540 --> 00:38:32,070
standalone reusable piece of code now

00:38:28,830 --> 00:38:34,200
that that one simple act solved our

00:38:32,070 --> 00:38:36,720
architectural problem the sales website

00:38:34,200 --> 00:38:38,610
can now use the new component and it can

00:38:36,720 --> 00:38:41,750
talk directly to the third party doesn't

00:38:38,610 --> 00:38:44,820
have to go to the control panel at all I

00:38:41,750 --> 00:38:47,460
can switch off my complete control panel

00:38:44,820 --> 00:38:49,320
when the new version is ready and when

00:38:47,460 --> 00:38:51,030
the new versions ready it will also be

00:38:49,320 --> 00:38:54,960
able to reuse that new availability

00:38:51,030 --> 00:38:58,260
checker gives us a lot of flexibility

00:38:54,960 --> 00:38:59,520
just with a very small change the

00:38:58,260 --> 00:39:01,260
majority of the code that we've

00:38:59,520 --> 00:39:02,520
extracted out is the same as it used to

00:39:01,260 --> 00:39:05,150
be we've just removed some of the

00:39:02,520 --> 00:39:08,190
symphony dependence as it used to have

00:39:05,150 --> 00:39:10,170
but by making it a standalone unit of

00:39:08,190 --> 00:39:12,780
code that we can then drop into multiple

00:39:10,170 --> 00:39:15,420
applications we freed up our log jams

00:39:12,780 --> 00:39:16,130
and our road maps so that the sales

00:39:15,420 --> 00:39:19,370
website

00:39:16,130 --> 00:39:22,250
move at its own pace and our control

00:39:19,370 --> 00:39:23,750
panel can move at its own pace and we're

00:39:22,250 --> 00:39:26,750
doing this now across the rest of our

00:39:23,750 --> 00:39:28,520
applications because the customers we

00:39:26,750 --> 00:39:30,770
sell to has changed over the last 12

00:39:28,520 --> 00:39:32,360
years and as a result of that our old

00:39:30,770 --> 00:39:36,320
applications are no longer fit for

00:39:32,360 --> 00:39:38,360
purpose they work they support a grade a

00:39:36,320 --> 00:39:41,000
particular user base but our new users

00:39:38,360 --> 00:39:42,740
they need a different experience so

00:39:41,000 --> 00:39:44,150
we're taking all the logic because our

00:39:42,740 --> 00:39:45,440
business hasn't changed it so i use the

00:39:44,150 --> 00:39:47,000
base that's changing the scale we're

00:39:45,440 --> 00:39:48,800
working out change so we're taking all

00:39:47,000 --> 00:39:52,400
that logic out and we're refactoring it

00:39:48,800 --> 00:39:53,870
bit by bit into components and that's

00:39:52,400 --> 00:39:55,580
going to allow the sales team and the

00:39:53,870 --> 00:39:58,760
engineering team to move at their own

00:39:55,580 --> 00:40:00,680
speed without any major log jams sales

00:39:58,760 --> 00:40:03,260
sales don't have to wait for engineering

00:40:00,680 --> 00:40:05,870
to change Engineering's products in

00:40:03,260 --> 00:40:08,720
order to sail so then change how they're

00:40:05,870 --> 00:40:12,920
selling those products sales can write

00:40:08,720 --> 00:40:14,870
new sales wizards they can do special

00:40:12,920 --> 00:40:16,490
offers etc because they can talk

00:40:14,870 --> 00:40:18,770
directly to the third party they're not

00:40:16,490 --> 00:40:24,080
dependent on us updating the control

00:40:18,770 --> 00:40:25,730
panel to match and it also allows us to

00:40:24,080 --> 00:40:27,140
take features I currently aren't shared

00:40:25,730 --> 00:40:30,020
across all different parts of the

00:40:27,140 --> 00:40:31,460
business and start to share them so we

00:40:30,020 --> 00:40:33,230
are customers start to get a better

00:40:31,460 --> 00:40:34,790
experience a more integrated spirit

00:40:33,230 --> 00:40:37,610
experience and that's what we're working

00:40:34,790 --> 00:40:39,820
towards that's going to take as probably

00:40:37,610 --> 00:40:43,730
about 18 months to two years to achieve

00:40:39,820 --> 00:40:45,680
across four or main business areas now

00:40:43,730 --> 00:40:51,400
many age humor me lines of code we're

00:40:45,680 --> 00:40:54,410
talking about tens of thousands I

00:40:51,400 --> 00:40:56,990
haven't looked in a long time it can

00:40:54,410 --> 00:40:59,000
take us about two years to do this but

00:40:56,990 --> 00:41:00,860
it gives our business the ability to

00:40:59,000 --> 00:41:03,380
move at a better speed once it's done

00:41:00,860 --> 00:41:04,730
much more flexibility much less friction

00:41:03,380 --> 00:41:06,610
inside the business as well which is

00:41:04,730 --> 00:41:10,070
another important reason to do it and

00:41:06,610 --> 00:41:11,600
our customers will get better experience

00:41:10,070 --> 00:41:14,900
out of it because things will work the

00:41:11,600 --> 00:41:16,840
same or at least my hat at least they

00:41:14,900 --> 00:41:18,950
will not have their own unique bugs

00:41:16,840 --> 00:41:22,610
across our different parts of the

00:41:18,950 --> 00:41:24,620
business so that's what I've got to say

00:41:22,610 --> 00:41:26,440
about going beyond frameworks and

00:41:24,620 --> 00:41:29,030
avoiding your code being held hostage by

00:41:26,440 --> 00:41:30,009
while I know from the audience how many

00:41:29,030 --> 00:41:34,390
of you

00:41:30,009 --> 00:41:34,390
have tried this approach yourselves

00:41:34,509 --> 00:41:40,009
excellent and how have you got on with

00:41:37,609 --> 00:41:43,009
it because we've started down this road

00:41:40,009 --> 00:41:44,539
it makes a lot of sense to us every

00:41:43,009 --> 00:41:48,699
benefit everything we've done with it

00:41:44,539 --> 00:41:52,279
has been positive but have you got on

00:41:48,699 --> 00:41:53,930
it's gone well has it what have you run

00:41:52,279 --> 00:41:57,859
into any problems I've not described in

00:41:53,930 --> 00:41:59,839
this talk at all and not really I

00:41:57,859 --> 00:42:01,489
suppose I separating myself a couple of

00:41:59,839 --> 00:42:05,089
years ago and so far it's going it's

00:42:01,489 --> 00:42:06,410
going alright excellent how about

00:42:05,089 --> 00:42:14,239
anybody else anyone else got to add on

00:42:06,410 --> 00:42:16,479
this stunned silence turns up Jeremy at

00:42:14,239 --> 00:42:16,479
the back

00:42:19,130 --> 00:42:24,800
it's just a question really how have you

00:42:21,800 --> 00:42:27,380
found it's affected the percentage of

00:42:24,800 --> 00:42:30,800
the effort of the project to adopt this

00:42:27,380 --> 00:42:33,170
model and also the focus and speed that

00:42:30,800 --> 00:42:35,810
you can actually deliver up it has

00:42:33,170 --> 00:42:39,740
accelerated it I can't give you an exact

00:42:35,810 --> 00:42:41,570
percentage but what we found is odd the

00:42:39,740 --> 00:42:43,850
contractors we've been using this year

00:42:41,570 --> 00:42:47,540
have actually found it easier to work in

00:42:43,850 --> 00:42:51,410
this manner than trying to extend our

00:42:47,540 --> 00:42:53,660
existing code give them a problem to

00:42:51,410 --> 00:42:54,980
solve say do it in isolation it's

00:42:53,660 --> 00:42:56,540
something they can easily do they get a

00:42:54,980 --> 00:42:59,540
sense of completion from ticking it off

00:42:56,540 --> 00:43:01,310
it's done they can move on and they're

00:42:59,540 --> 00:43:03,470
happier they're more productive as a

00:43:01,310 --> 00:43:07,250
result of that and we're getting code

00:43:03,470 --> 00:43:08,900
through I had one contractor is trying

00:43:07,250 --> 00:43:10,280
to was actually we actually did pay

00:43:08,900 --> 00:43:13,190
someone to try and update our control

00:43:10,280 --> 00:43:15,110
panel to supports the new availability

00:43:13,190 --> 00:43:16,820
checker he got the availability checker

00:43:15,110 --> 00:43:19,820
working did a great job with that well

00:43:16,820 --> 00:43:22,190
tested shoehorning into the old legacy

00:43:19,820 --> 00:43:24,950
application we gave up in the end it was

00:43:22,190 --> 00:43:26,840
costing too much it probably cost more

00:43:24,950 --> 00:43:28,670
to try to shoehorn it in it did to

00:43:26,840 --> 00:43:32,270
create the standalone component and give

00:43:28,670 --> 00:43:34,720
that to sales to reuse any more

00:43:32,270 --> 00:43:34,720
questions

00:43:41,190 --> 00:43:47,020
/ roques p.m. okay um I just want to

00:43:45,490 --> 00:43:48,970
know what the interface for these

00:43:47,020 --> 00:43:51,820
components looks like I mean what do

00:43:48,970 --> 00:43:54,400
they pass back and forth for they well

00:43:51,820 --> 00:43:56,680
they do just libraries of objects at the

00:43:54,400 --> 00:43:58,150
end of the day and that for that so that

00:43:56,680 --> 00:44:01,270
you're passing classes back wisdom for

00:43:58,150 --> 00:44:03,160
us you can do it with procedural codes

00:44:01,270 --> 00:44:05,079
you can write just PHP for style

00:44:03,160 --> 00:44:06,820
functions if you choose I would

00:44:05,079 --> 00:44:09,190
recommend not doing that purely for the

00:44:06,820 --> 00:44:10,869
autoloading benefits but you can do that

00:44:09,190 --> 00:44:13,420
but perhaps the easiest way to do that

00:44:10,869 --> 00:44:15,640
we're especially this projectors just

00:44:13,420 --> 00:44:16,900
rubbish I'm afraid grab me afterwards

00:44:15,640 --> 00:44:21,040
I'll pull up some components and show

00:44:16,900 --> 00:44:25,900
you might be easier okay all right big

00:44:21,040 --> 00:44:27,940
here I was wondering if you at the 0 mq

00:44:25,900 --> 00:44:30,490
talk this morning and could use that

00:44:27,940 --> 00:44:34,390
sort of idea to feed in your components

00:44:30,490 --> 00:44:37,000
I'm sorry I wasn't at the talk okay but

00:44:34,390 --> 00:44:39,490
your components could be interfaces to

00:44:37,000 --> 00:44:41,530
something like 0 mq you could use

00:44:39,490 --> 00:44:43,390
components to hide the fact you've got 0

00:44:41,530 --> 00:44:44,800
and Q in your business so that if you

00:44:43,390 --> 00:44:46,839
ever wanted to replace it with another

00:44:44,800 --> 00:44:48,190
queuing system or an alternative

00:44:46,839 --> 00:44:50,290
approach or because they go for message

00:44:48,190 --> 00:44:52,750
passage rather than a queuing system you

00:44:50,290 --> 00:44:55,180
could do that and all that changes is

00:44:52,750 --> 00:44:57,220
the component like the rest of your code

00:44:55,180 --> 00:44:59,260
is consuming and so long as you can

00:44:57,220 --> 00:45:02,020
maintain your components compatibility

00:44:59,260 --> 00:45:07,180
outwards to your apps you can make

00:45:02,020 --> 00:45:10,750
architectural changes much quicker we

00:45:07,180 --> 00:45:12,010
hear the other question over here I um

00:45:10,750 --> 00:45:13,599
yeah I had a sim sort of question about

00:45:12,010 --> 00:45:15,069
sir serves or don't oriented

00:45:13,599 --> 00:45:16,480
architecture and web services I have

00:45:15,069 --> 00:45:18,099
used that and what would you think of

00:45:16,480 --> 00:45:20,859
using that to get to some of the

00:45:18,099 --> 00:45:22,210
components this approach is fully

00:45:20,859 --> 00:45:24,369
compatible with a service-oriented

00:45:22,210 --> 00:45:26,260
architecture because you can take those

00:45:24,369 --> 00:45:29,470
components and you can put an app a

00:45:26,260 --> 00:45:32,290
service layer on top you can expose on

00:45:29,470 --> 00:45:36,780
via queuing system by gehrman of our

00:45:32,290 --> 00:45:39,550
arrest or soap-based if you must api and

00:45:36,780 --> 00:45:41,650
by refactoring your app into components

00:45:39,550 --> 00:45:44,170
first you're not going for a big bang

00:45:41,650 --> 00:45:45,540
web service approach you're taking kept

00:45:44,170 --> 00:45:47,530
you're taking functionality that works

00:45:45,540 --> 00:45:49,990
isolating it making sure it's well

00:45:47,530 --> 00:45:51,670
tested using it in your app quickly so

00:45:49,990 --> 00:45:53,410
you're getting the benefits back to the

00:45:51,670 --> 00:45:54,070
business so they wanted to fund more of

00:45:53,410 --> 00:45:55,570
this work

00:45:54,070 --> 00:45:57,430
because that's an accrual thing as well

00:45:55,570 --> 00:45:59,650
someone's got to pay for this work at

00:45:57,430 --> 00:46:02,020
end of the day and then in time you can

00:45:59,650 --> 00:46:04,740
then take your app and put another app

00:46:02,020 --> 00:46:07,450
beside it to be the web service layer

00:46:04,740 --> 00:46:08,980
you can give that to your customers you

00:46:07,450 --> 00:46:11,290
could make your front-end apps then sit

00:46:08,980 --> 00:46:13,330
on top of that layer if you wished it

00:46:11,290 --> 00:46:14,740
all works really well with that and

00:46:13,330 --> 00:46:15,880
hopefully in two years time I'm hoping

00:46:14,740 --> 00:46:22,030
to come back and tell you how well it's

00:46:15,880 --> 00:46:23,590
gone for us oh yeah sorry what so what

00:46:22,030 --> 00:46:25,570
are you actually using the framework for

00:46:23,590 --> 00:46:28,980
now are you just using it for a router

00:46:25,570 --> 00:46:31,720
or to use models and views and controls

00:46:28,980 --> 00:46:33,790
provided by the framework we are using

00:46:31,720 --> 00:46:35,590
views and controllers the models were

00:46:33,790 --> 00:46:38,790
using we're moving to doctrine for that

00:46:35,590 --> 00:46:41,470
but we're moving the doctrine as a

00:46:38,790 --> 00:46:43,180
component in its own right because our

00:46:41,470 --> 00:46:45,490
database schemas shared by multiple

00:46:43,180 --> 00:46:48,130
applications go front office and back

00:46:45,490 --> 00:46:50,500
office so we're using the framework for

00:46:48,130 --> 00:46:52,870
the VC capabilities but the M we were

00:46:50,500 --> 00:46:55,420
using doctrine as a separate layer okay

00:46:52,870 --> 00:46:58,870
and do you jo running into any

00:46:55,420 --> 00:47:01,240
dependency problems now yeah I think you

00:46:58,870 --> 00:47:03,910
you said that a lot about pair what's

00:47:01,240 --> 00:47:05,560
causing your problems within that in if

00:47:03,910 --> 00:47:07,300
you've extracted so much out into a

00:47:05,560 --> 00:47:09,130
myriad of components do you ever have

00:47:07,300 --> 00:47:11,500
any problems with those components not

00:47:09,130 --> 00:47:13,390
at this early stage we've we're about

00:47:11,500 --> 00:47:14,470
four or five months into the sort of

00:47:13,390 --> 00:47:16,960
work we've got a long way to go yet

00:47:14,470 --> 00:47:18,550
we've not yet run into problems the

00:47:16,960 --> 00:47:19,780
whole point of the transparent versions

00:47:18,550 --> 00:47:22,330
is to try and make sure that doesn't

00:47:19,780 --> 00:47:23,740
happen sooner or later a developer is

00:47:22,330 --> 00:47:26,680
going to accidentally break backwards

00:47:23,740 --> 00:47:30,040
compatibility it life's just not perfect

00:47:26,680 --> 00:47:31,540
but if you're the way you spot that is

00:47:30,040 --> 00:47:34,270
to see if anyone's changing your unit

00:47:31,540 --> 00:47:35,830
tests your unit test has to change

00:47:34,270 --> 00:47:37,480
rather than you add additional tests

00:47:35,830 --> 00:47:39,580
last often a smell that you've broken

00:47:37,480 --> 00:47:41,650
backwards compatibility you need to look

00:47:39,580 --> 00:47:44,050
at that and see whether that test change

00:47:41,650 --> 00:47:46,210
is legitimate or whether you're actually

00:47:44,050 --> 00:47:50,560
just broken your component it's the best

00:47:46,210 --> 00:47:53,730
way to pick that up any more questions

00:47:50,560 --> 00:47:53,730
downside though

00:47:55,750 --> 00:48:04,040
hello you talked about using here to

00:47:59,630 --> 00:48:07,160
manage components um what do you feel

00:48:04,040 --> 00:48:10,310
about using pair as a library because

00:48:07,160 --> 00:48:13,070
you could have a zend framework yeah and

00:48:10,310 --> 00:48:17,120
have exactly the same or very similar

00:48:13,070 --> 00:48:20,410
component whereas if it's in zend it's

00:48:17,120 --> 00:48:23,750
less portable but if if you've got pair

00:48:20,410 --> 00:48:25,040
potentially that could be reused in a

00:48:23,750 --> 00:48:27,800
different framework and you can still

00:48:25,040 --> 00:48:29,780
use the per component my personal

00:48:27,800 --> 00:48:32,060
experience with pair is take each

00:48:29,780 --> 00:48:34,460
component on its own merits some of them

00:48:32,060 --> 00:48:36,560
are excellent some of them were

00:48:34,460 --> 00:48:39,080
excellent and have rotted over time some

00:48:36,560 --> 00:48:40,880
of them are not yet at that excellent

00:48:39,080 --> 00:48:42,860
standard test each one individually if

00:48:40,880 --> 00:48:47,720
it works for you and the license is

00:48:42,860 --> 00:48:52,010
compatible with your software use it any

00:48:47,720 --> 00:48:54,470
more questions so I've got one question

00:48:52,010 --> 00:48:57,110
for you to finish then how many of you

00:48:54,470 --> 00:49:01,690
think that you might go back and start

00:48:57,110 --> 00:49:06,500
working in a more component way forward

00:49:01,690 --> 00:49:08,650
wow that's excellent how many of you

00:49:06,500 --> 00:49:12,650
actually are able to make that decision

00:49:08,650 --> 00:49:16,310
yourselves surprising a meal how many of

00:49:12,650 --> 00:49:19,940
you've got to sell it to your boss okay

00:49:16,310 --> 00:49:26,390
if you need help selling it to your boss

00:49:19,940 --> 00:49:28,580
give him my details I am the head of

00:49:26,390 --> 00:49:30,170
engineering for one of the uk's fastest

00:49:28,580 --> 00:49:32,990
growing tech companies the last two

00:49:30,170 --> 00:49:35,120
years i can talk his language if you if

00:49:32,990 --> 00:49:37,480
he won't talk to you about this stuff

00:49:35,120 --> 00:49:41,930
i'm quite happy to help you pitch that

00:49:37,480 --> 00:49:44,540
ok that's a genuine offer do take me up

00:49:41,930 --> 00:49:47,380
on it I don't mind thank you all very

00:49:44,540 --> 00:49:47,380

YouTube URL: https://www.youtube.com/watch?v=-YpexVKmyNQ


