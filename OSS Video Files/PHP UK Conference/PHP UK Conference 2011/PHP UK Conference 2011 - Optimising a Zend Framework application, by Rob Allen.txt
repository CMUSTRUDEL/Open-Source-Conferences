Title: PHP UK Conference 2011 - Optimising a Zend Framework application, by Rob Allen
Publication date: 2012-03-15
Playlist: PHP UK Conference 2011
Description: 
	
Captions: 
	00:00:02,690 --> 00:00:09,260
hi okay we hit on that same framework

00:00:05,509 --> 00:00:11,790
optimization framework application um

00:00:09,260 --> 00:00:13,920
obviously I'm Rob Allen as you can tell

00:00:11,790 --> 00:00:15,929
from your schedule very very little bit

00:00:13,920 --> 00:00:18,900
about me to start with so you know why

00:00:15,929 --> 00:00:23,070
I'm standing up here I've been doing PHP

00:00:18,900 --> 00:00:28,230
now since 1999 with PHP three so I've

00:00:23,070 --> 00:00:31,050
been on PHP type websites so it's a bit

00:00:28,230 --> 00:00:35,940
quiet can we can I shelter louder that

00:00:31,050 --> 00:00:38,040
better worse can you hear me okay I'm

00:00:35,940 --> 00:00:39,540
not a very loud speaker and even with a

00:00:38,040 --> 00:00:41,879
mic clearly I'm still not a very dull

00:00:39,540 --> 00:00:46,140
speaker okay I'll try to talk a bit

00:00:41,879 --> 00:00:48,239
louder um this is a terribly okay yeah

00:00:46,140 --> 00:00:50,070
so I've been developing since 1999 I am

00:00:48,239 --> 00:00:52,979
the technical director of a very small

00:00:50,070 --> 00:00:55,739
web design agency in Birmingham and we

00:00:52,979 --> 00:00:58,409
tend to make fairly small specialized

00:00:55,739 --> 00:01:00,900
sites so to give you an idea for my

00:00:58,409 --> 00:01:04,650
background I don't write sites that have

00:01:00,900 --> 00:01:07,710
got the scalability problems that say

00:01:04,650 --> 00:01:11,100
most big sights have that's not the type

00:01:07,710 --> 00:01:13,260
of sites i build so what I got shared

00:01:11,100 --> 00:01:15,030
today is based on the type of problems

00:01:13,260 --> 00:01:16,860
that I have which are mostly around

00:01:15,030 --> 00:01:19,710
trying to get the application to fill

00:01:16,860 --> 00:01:22,020
fast to a user more than anything else

00:01:19,710 --> 00:01:24,630
and though we will touch on how to get

00:01:22,020 --> 00:01:29,490
more throughput through Zefram a

00:01:24,630 --> 00:01:31,580
complication to an extent then I've

00:01:29,490 --> 00:01:35,990
written the book semaforo work in action

00:01:31,580 --> 00:01:38,760
did anyone buy that book thank you

00:01:35,990 --> 00:01:40,350
there's don't buy it now by the way it's

00:01:38,760 --> 00:01:42,360
out of date so if you're thinking about

00:01:40,350 --> 00:01:44,430
buying that book wait because I'm

00:01:42,360 --> 00:01:46,530
writing a new book so I'm frame what to

00:01:44,430 --> 00:01:48,750
in action you can see the naming

00:01:46,530 --> 00:01:50,220
convention going on here which is

00:01:48,750 --> 00:01:51,870
awfully targeted that zone framework to

00:01:50,220 --> 00:01:54,780
which within luck will be out this year

00:01:51,870 --> 00:01:58,050
you never know anyway that's the sales

00:01:54,780 --> 00:02:00,570
pitch optimization is a game of

00:01:58,050 --> 00:02:03,090
eliminating measurable inefficiencies if

00:02:00,570 --> 00:02:05,549
you can't reliably measure or predict

00:02:03,090 --> 00:02:07,970
the impact of an optimization then how

00:02:05,549 --> 00:02:10,470
do you know it's worthwhile optimization

00:02:07,970 --> 00:02:12,750
so where we're starting from this talk

00:02:10,470 --> 00:02:15,390
is if we can't measure an improvement

00:02:12,750 --> 00:02:17,030
then it is probably not worth doing the

00:02:15,390 --> 00:02:21,000
work involved a bit

00:02:17,030 --> 00:02:22,230
so Heydrich go from bot Island quite of

00:02:21,000 --> 00:02:24,900
that I quite liked it so I put it up

00:02:22,230 --> 00:02:27,720
here this means that we are not

00:02:24,900 --> 00:02:30,240
interested in micro optimizations so if

00:02:27,720 --> 00:02:31,890
you're interested in whether a for loop

00:02:30,240 --> 00:02:33,180
is faster than a while loop or whether

00:02:31,890 --> 00:02:35,040
you should be using for each or

00:02:33,180 --> 00:02:37,200
reference the race or something like

00:02:35,040 --> 00:02:39,450
that this is of no interest to me

00:02:37,200 --> 00:02:41,820
whatsoever I would far rather have

00:02:39,450 --> 00:02:44,010
maintenance and maintainable code that

00:02:41,820 --> 00:02:47,550
is by far my biggest problem so that's

00:02:44,010 --> 00:02:50,640
where I'm interesting so we need to

00:02:47,550 --> 00:02:52,170
measure what we're doing so if we are

00:02:50,640 --> 00:02:55,950
going to measure we're going to do the

00:02:52,170 --> 00:02:57,480
baseline once we've got a baseline we

00:02:55,950 --> 00:03:00,660
can maybe set a target for where we

00:02:57,480 --> 00:03:04,080
would like to be and then we can clear

00:03:00,660 --> 00:03:06,480
the issues that we find and as we clear

00:03:04,080 --> 00:03:08,370
its issue then other issues will come up

00:03:06,480 --> 00:03:12,450
I've locked on the top as other issues

00:03:08,370 --> 00:03:14,940
that we need to fix your also hit a

00:03:12,450 --> 00:03:17,970
diminishing returns problem at some

00:03:14,940 --> 00:03:19,980
point the cost of improving the

00:03:17,970 --> 00:03:22,500
performance is greater than you're

00:03:19,980 --> 00:03:24,810
prepared to bother doing you're making a

00:03:22,500 --> 00:03:27,239
lot of effort for a very small game at

00:03:24,810 --> 00:03:28,800
which point is probably worth putting

00:03:27,239 --> 00:03:30,870
another server in or doing something

00:03:28,800 --> 00:03:35,670
like that rather than wasting your

00:03:30,870 --> 00:03:37,860
coding resources siege is my preferred

00:03:35,670 --> 00:03:42,540
benchmarking tool another option is

00:03:37,860 --> 00:03:43,620
apache bench you can see the slides

00:03:42,540 --> 00:03:46,410
afterwards they'll be available on

00:03:43,620 --> 00:03:47,459
acrobat com / talks but so that's why

00:03:46,410 --> 00:03:48,900
we've got things like you are else in

00:03:47,459 --> 00:03:52,650
here so I'm not expecting you to go

00:03:48,900 --> 00:03:55,680
there now and but yes siege from Jojo

00:03:52,650 --> 00:04:00,390
org is a nice elevation marking tool you

00:03:55,680 --> 00:04:01,980
runs on linux or max and i don't know

00:04:00,390 --> 00:04:03,480
who it runs on windows it probably

00:04:01,980 --> 00:04:09,450
doesn't drum windows you too patchy

00:04:03,480 --> 00:04:11,790
bench set to up via CGR see the only

00:04:09,450 --> 00:04:14,060
important thing in here is benchmark

00:04:11,790 --> 00:04:16,709
equals true cause siege has two modes

00:04:14,060 --> 00:04:20,729
benchmarking and load testing and we're

00:04:16,709 --> 00:04:23,729
interested in benchmarking so we're

00:04:20,729 --> 00:04:29,130
going to run siege this one we're doing

00:04:23,729 --> 00:04:30,330
for 30 seconds against info PHP so this

00:04:29,130 --> 00:04:32,039
is a time-based test we

00:04:30,330 --> 00:04:35,069
under 30 seconds we see what happened

00:04:32,039 --> 00:04:36,270
what sort of through but we got and you

00:04:35,069 --> 00:04:37,949
can set up the number of concurrent

00:04:36,270 --> 00:04:40,349
users that you would see to hit your

00:04:37,949 --> 00:04:43,289
website with because we're not worried

00:04:40,349 --> 00:04:47,939
too much about scalability 10 users is

00:04:43,289 --> 00:04:50,610
more than enough run it we get that sort

00:04:47,939 --> 00:04:55,379
of output so you get a nice little

00:04:50,610 --> 00:04:56,669
summary this was run where local host is

00:04:55,379 --> 00:04:58,379
wonder how service that we're currently

00:04:56,669 --> 00:05:01,229
dis decommissioning one of our dedicated

00:04:58,379 --> 00:05:03,419
servers so it had no other traffic on it

00:05:01,229 --> 00:05:07,949
which made it an ideal place for me to

00:05:03,419 --> 00:05:10,080
run some tests what is it it's a dual

00:05:07,949 --> 00:05:13,830
core xeon apparently and it's running

00:05:10,080 --> 00:05:15,150
PHP 5.3 point five so the numbers

00:05:13,830 --> 00:05:17,219
themselves don't really matter because

00:05:15,150 --> 00:05:20,190
obviously your systems will not be what

00:05:17,219 --> 00:05:24,599
my systems are but what we're interested

00:05:20,190 --> 00:05:29,129
in is a relative change for each thing

00:05:24,599 --> 00:05:32,310
we do so our first baseline number 783

00:05:29,129 --> 00:05:35,550
transactions per second and that's on

00:05:32,310 --> 00:05:38,340
info PHP that web page has got one

00:05:35,550 --> 00:05:41,610
single PHP statement in it which is PHP

00:05:38,340 --> 00:05:43,520
info so it's pretty much the smallest

00:05:41,610 --> 00:05:46,940
amount of PHP code you can write that

00:05:43,520 --> 00:05:49,409
generates a reasonable amount of HTML

00:05:46,940 --> 00:05:51,900
ice no point in writing echo hello world

00:05:49,409 --> 00:05:55,860
because nobody outputs just of two words

00:05:51,900 --> 00:06:00,990
onto their web pages so 700 ish so we

00:05:55,860 --> 00:06:03,569
never get any better than that ever so

00:06:00,990 --> 00:06:05,819
start with the basic app so def create

00:06:03,569 --> 00:06:07,440
project enable the layout and then we

00:06:05,819 --> 00:06:10,919
run siege so we're going to know you run

00:06:07,440 --> 00:06:12,479
them the standard so def project same

00:06:10,919 --> 00:06:14,039
phobic application you get the screen up

00:06:12,479 --> 00:06:19,110
with the work and design framework thing

00:06:14,039 --> 00:06:20,969
you're familiar with that yep 79

00:06:19,110 --> 00:06:23,490
transactions for a second we've just

00:06:20,969 --> 00:06:27,659
flat out ninety percent of the available

00:06:23,490 --> 00:06:30,029
performance of our server amazing isn't

00:06:27,659 --> 00:06:31,740
it um though it's not quite fair because

00:06:30,029 --> 00:06:33,900
of a Cell Fair Work Act doesn't awful

00:06:31,740 --> 00:06:38,009
lot even this basic one doesn't awful

00:06:33,900 --> 00:06:39,930
lot more than PHP info but nevertheless

00:06:38,009 --> 00:06:42,659
you are talking about an absolutely

00:06:39,930 --> 00:06:43,380
massive hit by using something like zone

00:06:42,659 --> 00:06:45,390
framework

00:06:43,380 --> 00:06:47,700
I'm of sequence we talk about so I'm

00:06:45,390 --> 00:06:49,670
framework kid that's what i'm using but

00:06:47,700 --> 00:06:52,950
to be honest if you were using solar or

00:06:49,670 --> 00:06:55,260
lithium or cake or whatever you still

00:06:52,950 --> 00:06:57,330
see a massive drop down they there are

00:06:55,260 --> 00:07:02,400
differences between them but you still

00:06:57,330 --> 00:07:05,370
taken a massive hit okay so we know that

00:07:02,400 --> 00:07:09,060
it's slow the obvious thing to do is

00:07:05,370 --> 00:07:13,050
find out where it is slow and that's

00:07:09,060 --> 00:07:16,740
what profiling is about um who here has

00:07:13,050 --> 00:07:18,900
not heard of X debug thank goodness for

00:07:16,740 --> 00:07:20,310
that good you all heard the rescue by

00:07:18,900 --> 00:07:23,010
who has not got it installed on their

00:07:20,310 --> 00:07:25,260
development box right consider

00:07:23,010 --> 00:07:28,020
installing it it's worth installing um

00:07:25,260 --> 00:07:29,940
the other alternative is the other

00:07:28,020 --> 00:07:32,160
profiler that's actually usable is one

00:07:29,940 --> 00:07:34,050
from Zent so if you're using sense to do

00:07:32,160 --> 00:07:36,210
with the same debugger solution they

00:07:34,050 --> 00:07:39,540
have a profiler in there which is also

00:07:36,210 --> 00:07:42,200
quite good I'm not aware of any other

00:07:39,540 --> 00:07:44,370
profilers for PHP maybe there are some

00:07:42,200 --> 00:07:46,890
most people about extra bucks so that's

00:07:44,370 --> 00:07:49,260
the one I use as well pekel install XD

00:07:46,890 --> 00:07:51,030
bug if you haven't really got it the

00:07:49,260 --> 00:07:52,530
output file is rather helpfully

00:07:51,030 --> 00:07:55,080
compatible with multiple different

00:07:52,530 --> 00:07:57,810
applications so john linnert hughes k

00:07:55,080 --> 00:08:00,090
cash grant and there's a win cash grind

00:07:57,810 --> 00:08:02,820
for windows there's a Mac cool grind for

00:08:00,090 --> 00:08:05,610
OS X which is an OSX native app there a

00:08:02,820 --> 00:08:07,890
charge is money for it and it's not that

00:08:05,610 --> 00:08:09,300
cheap I don't believe and finally

00:08:07,890 --> 00:08:11,880
there's even one that works in PHP

00:08:09,300 --> 00:08:15,600
called web grind she's the one I quite

00:08:11,880 --> 00:08:18,090
like okay so if you got profile with XD

00:08:15,600 --> 00:08:20,510
bug you need to configure your PHP dot

00:08:18,090 --> 00:08:23,010
any so you turn the profiler off

00:08:20,510 --> 00:08:25,320
actually slightly counterintuitive but

00:08:23,010 --> 00:08:27,420
it doesn't make sense and then you

00:08:25,320 --> 00:08:29,430
enable the trigger so this enables you

00:08:27,420 --> 00:08:31,740
to profile just two pages at you with

00:08:29,430 --> 00:08:34,349
the profile rather than profile in every

00:08:31,740 --> 00:08:36,719
single time you go and you work on your

00:08:34,349 --> 00:08:38,280
dev server which can get tedious very

00:08:36,719 --> 00:08:40,650
very quickly with another fall so get

00:08:38,280 --> 00:08:44,070
created and also you need to store the

00:08:40,650 --> 00:08:45,600
files it generates some way all right in

00:08:44,070 --> 00:08:48,510
order to actually get a profile to

00:08:45,600 --> 00:08:51,020
actually be generated you add X on this

00:08:48,510 --> 00:08:55,470
X debug underscore profile equals one to

00:08:51,020 --> 00:08:56,690
your URL and then it will drop a profile

00:08:55,470 --> 00:08:59,070
file into the direct

00:08:56,690 --> 00:09:00,210
there's a handy term extension for fire

00:08:59,070 --> 00:09:03,780
bots which gives you a little button you

00:09:00,210 --> 00:09:07,500
can press that's quite happy okay so you

00:09:03,780 --> 00:09:10,740
do that and you get an output like that

00:09:07,500 --> 00:09:13,440
if you're using web grind it's not

00:09:10,740 --> 00:09:15,560
particular complicated this is the file

00:09:13,440 --> 00:09:19,640
but we've actually loaded into web grind

00:09:15,560 --> 00:09:22,350
you can display percent or milliseconds

00:09:19,640 --> 00:09:26,190
453 different functions were called to

00:09:22,350 --> 00:09:28,920
generate a stock present framework hello

00:09:26,190 --> 00:09:31,890
world if you like and it took us 71

00:09:28,920 --> 00:09:34,770
milliseconds to do so and at the moment

00:09:31,890 --> 00:09:38,580
I've sorted by totally inclusive cost so

00:09:34,770 --> 00:09:42,570
obviously the top item is main which is

00:09:38,580 --> 00:09:44,370
index dot PHP because everything starts

00:09:42,570 --> 00:09:46,650
from index dot PHP an eccentric

00:09:44,370 --> 00:09:48,180
application then you've got send

00:09:46,650 --> 00:09:51,230
application run then you got some

00:09:48,180 --> 00:09:53,490
bootstrapping dispatcher etc at the top

00:09:51,230 --> 00:09:55,980
it's not actually the most useful view

00:09:53,490 --> 00:09:58,410
if you sort by total self cost you'll

00:09:55,980 --> 00:10:00,360
get the most expensive stuff at the top

00:09:58,410 --> 00:10:05,220
which I should have done in a screenshot

00:10:00,360 --> 00:10:07,050
i forgot to so that's x debug biggest

00:10:05,220 --> 00:10:10,010
probably that's debug is it is extremely

00:10:07,050 --> 00:10:12,030
slow do not run it on your life server

00:10:10,010 --> 00:10:14,820
really do not run get on your life

00:10:12,030 --> 00:10:16,920
server forget anything else and exhale

00:10:14,820 --> 00:10:20,510
off however it's much more lightweight

00:10:16,920 --> 00:10:23,790
who's heard of XH prof okay a few people

00:10:20,510 --> 00:10:27,630
it's from facebook facebook engineering

00:10:23,790 --> 00:10:29,670
people needed to do some profiling at

00:10:27,630 --> 00:10:32,220
their sort of level you don't really use

00:10:29,670 --> 00:10:34,020
a single little testing server so they

00:10:32,220 --> 00:10:36,330
want to something that they could inject

00:10:34,020 --> 00:10:39,120
into some lowlife service hence they

00:10:36,330 --> 00:10:43,650
wrote XH prof so you can use XH prof on

00:10:39,120 --> 00:10:44,850
a life site at least in theory sto sorry

00:10:43,650 --> 00:10:46,440
Facebook of course have a different set

00:10:44,850 --> 00:10:47,850
of problems to the rest of us so they

00:10:46,440 --> 00:10:51,270
have a different sort of resources to

00:10:47,850 --> 00:10:52,950
solve them to different URLs there I

00:10:51,270 --> 00:10:55,580
recommend reading both of them if you're

00:10:52,950 --> 00:10:58,290
interested in XH prof very very useful

00:10:55,580 --> 00:11:02,780
but basically you install it and then

00:10:58,290 --> 00:11:06,480
you set up a prepend and an append file

00:11:02,780 --> 00:11:09,000
via PHP dot any which initiates the

00:11:06,480 --> 00:11:10,519
profiling and then turn it off and store

00:11:09,000 --> 00:11:13,110
it

00:11:10,519 --> 00:11:15,930
and again you get a sort of web page

00:11:13,110 --> 00:11:18,629
result well the nice exotics h prof bo

00:11:15,930 --> 00:11:21,029
is that you can profile just snippets of

00:11:18,629 --> 00:11:22,709
your application so although I say don't

00:11:21,029 --> 00:11:24,180
put you in a pending prevent there's

00:11:22,709 --> 00:11:25,889
nothing to stop you just putting it

00:11:24,180 --> 00:11:27,959
around a particular part of your

00:11:25,889 --> 00:11:30,449
application so let's say you're not

00:11:27,959 --> 00:11:32,910
interested in zen frameworks overhead

00:11:30,449 --> 00:11:35,009
anyway so you could start profiling at

00:11:32,910 --> 00:11:36,540
the start of your controller action and

00:11:35,009 --> 00:11:38,129
stop profiling at the end of your

00:11:36,540 --> 00:11:40,139
controller action and now you've

00:11:38,129 --> 00:11:42,660
isolated your profile to just a bit you

00:11:40,139 --> 00:11:45,500
wrote it's quite interested by a nice

00:11:42,660 --> 00:11:48,209
little talk for doing things like that

00:11:45,500 --> 00:11:51,329
output us like that it's a web page and

00:11:48,209 --> 00:11:54,889
if you follow the tutorials on the last

00:11:51,329 --> 00:11:57,240
page whenever you run through your

00:11:54,889 --> 00:11:59,310
testing you get a link to the profile at

00:11:57,240 --> 00:12:01,920
the bottom of the page she's quite handy

00:11:59,310 --> 00:12:03,449
and then you get this page up and again

00:12:01,920 --> 00:12:04,769
this is ordered incorrectly but you

00:12:03,449 --> 00:12:08,220
should order by something called

00:12:04,769 --> 00:12:09,750
exclusive wall time I don't know why

00:12:08,220 --> 00:12:11,129
they call it war time I'm sure there's a

00:12:09,750 --> 00:12:12,720
really good engineering reason and it

00:12:11,129 --> 00:12:20,220
makes sense if you understand what it

00:12:12,720 --> 00:12:22,110
does internally okay absolute time so

00:12:20,220 --> 00:12:24,600
all time the time the clock on the wall

00:12:22,110 --> 00:12:28,470
apparently which we don't have o'clock

00:12:24,600 --> 00:12:30,660
removal and yeah so one got there is he

00:12:28,470 --> 00:12:33,029
yeah you want to order your methods by

00:12:30,660 --> 00:12:35,399
which one took the longest to run the

00:12:33,029 --> 00:12:36,899
inclusive one will include any other

00:12:35,399 --> 00:12:41,059
methods that were called from this

00:12:36,899 --> 00:12:43,769
method which is clearly not as helpful

00:12:41,059 --> 00:12:48,089
okay so that's how we going to measure

00:12:43,769 --> 00:12:50,660
stuff and let's talk about some obvious

00:12:48,089 --> 00:12:52,889
things that you probably already do it

00:12:50,660 --> 00:12:55,079
and if you're not doing these are where

00:12:52,889 --> 00:12:58,889
you get the best wind which is something

00:12:55,079 --> 00:13:02,250
like a PC who hasn't got a PC installed

00:12:58,889 --> 00:13:05,430
or a byte code cache of some sort few

00:13:02,250 --> 00:13:07,350
people okay consider installing one then

00:13:05,430 --> 00:13:10,019
you don't have to do anything else with

00:13:07,350 --> 00:13:16,079
it but just installing it will speed up

00:13:10,019 --> 00:13:17,399
your applications significantly unless

00:13:16,079 --> 00:13:19,380
it's a bit low i should have got the

00:13:17,399 --> 00:13:22,829
biggest like and but what this as a

00:13:19,380 --> 00:13:23,040
bottom is that once i put a pc on onto

00:13:22,829 --> 00:13:25,500
my

00:13:23,040 --> 00:13:28,250
test server that's 79 transactions per

00:13:25,500 --> 00:13:30,720
second became 311 transaction per second

00:13:28,250 --> 00:13:33,420
so I gained guessing on for a four-time

00:13:30,720 --> 00:13:36,870
speed increase for run in Pekel install

00:13:33,420 --> 00:13:38,399
a PC you're never ever going to get that

00:13:36,870 --> 00:13:41,519
sort of performance increase for that

00:13:38,399 --> 00:13:44,190
little work in any other way so you

00:13:41,519 --> 00:13:50,100
really really must be using a micro

00:13:44,190 --> 00:13:52,889
cache of some sort no I don't believe

00:13:50,100 --> 00:13:54,839
that a pc is a question was is a PC the

00:13:52,889 --> 00:14:00,319
best one out there sent framework the

00:13:54,839 --> 00:14:06,920
answer is I have no idea there's

00:14:00,319 --> 00:14:09,630
accelerator X cash a pc there's memcache

00:14:06,920 --> 00:14:14,550
memcache these are not a byte code is it

00:14:09,630 --> 00:14:17,250
no optimize a plus from zend the for

00:14:14,550 --> 00:14:19,980
obvious well so I can think of I really

00:14:17,250 --> 00:14:21,870
don't mind I'm sure there are micro

00:14:19,980 --> 00:14:23,579
differences between them but I would be

00:14:21,870 --> 00:14:27,660
amazed as those a significant difference

00:14:23,579 --> 00:14:29,130
that really matters Tessa APC was the

00:14:27,660 --> 00:14:32,100
one that worked first time for me so

00:14:29,130 --> 00:14:34,860
that's what I've always used it's a very

00:14:32,100 --> 00:14:38,130
boring reason just working is always a

00:14:34,860 --> 00:14:40,019
win in my book okay so that's the number

00:14:38,130 --> 00:14:41,639
one reason number one thing you should

00:14:40,019 --> 00:14:44,430
be doing to increase one's yours over

00:14:41,639 --> 00:14:48,290
Eric application second thing you should

00:14:44,430 --> 00:14:48,290
be doing you should be cashing out stuff

00:14:49,940 --> 00:14:53,760
most of the problems with your

00:14:52,230 --> 00:14:56,220
application doesn't matter it's in frog

00:14:53,760 --> 00:14:58,709
or not is usually related to long

00:14:56,220 --> 00:15:02,399
running processes that do not have to be

00:14:58,709 --> 00:15:04,380
run for every single page request the

00:15:02,399 --> 00:15:07,139
most common one is accessing the

00:15:04,380 --> 00:15:08,959
database it's highly unlikely that when

00:15:07,139 --> 00:15:11,899
you pull data out of the database now

00:15:08,959 --> 00:15:15,449
that if you were to pull that same

00:15:11,899 --> 00:15:17,490
signal statement again in half a second

00:15:15,449 --> 00:15:19,680
time that you'll get different data and

00:15:17,490 --> 00:15:23,790
the normal circumstances you'll get the

00:15:19,680 --> 00:15:26,240
same data again during the sequel query

00:15:23,790 --> 00:15:29,310
is not the fastest thing in the world

00:15:26,240 --> 00:15:30,959
ever so it is one of the most obvious

00:15:29,310 --> 00:15:33,149
things that you want to remove from your

00:15:30,959 --> 00:15:34,380
applications so use a cache pretty

00:15:33,149 --> 00:15:37,549
little picture because I did it early

00:15:34,380 --> 00:15:40,170
and I liked our particular pictures

00:15:37,549 --> 00:15:41,579
but very very loosely you get the press

00:15:40,170 --> 00:15:44,009
in the browser you check whether you've

00:15:41,579 --> 00:15:45,689
got a cached version if you do you read

00:15:44,009 --> 00:15:48,269
the data process it and send it straight

00:15:45,689 --> 00:15:49,619
up the to the browser game so your flow

00:15:48,269 --> 00:15:51,569
through your application is much much

00:15:49,619 --> 00:15:54,509
shorter shorter flow through your

00:15:51,569 --> 00:15:55,860
application are invariably faster if

00:15:54,509 --> 00:15:57,329
you've got here's your slow read from

00:15:55,860 --> 00:15:59,489
the database you don't have your cash

00:15:57,329 --> 00:16:01,619
version you create your query read the

00:15:59,489 --> 00:16:04,290
data store there in the cache and you

00:16:01,619 --> 00:16:06,299
forget put a sensible lifetime that

00:16:04,290 --> 00:16:09,360
makes sense your application and you're

00:16:06,299 --> 00:16:11,549
done not particularly difficult and it

00:16:09,360 --> 00:16:13,079
will probably be a fairly big win in

00:16:11,549 --> 00:16:16,709
terms of the performance your

00:16:13,079 --> 00:16:23,899
application who here is doing cash in a

00:16:16,709 --> 00:16:26,189
flexpay screws okay a half or so good um

00:16:23,899 --> 00:16:27,839
if you get to do it to indesign frantic

00:16:26,189 --> 00:16:32,399
application you may as well use send

00:16:27,839 --> 00:16:34,679
cash there are other cash options out

00:16:32,399 --> 00:16:36,269
there but given that you're already

00:16:34,679 --> 00:16:40,439
users their framework as enter cash is

00:16:36,269 --> 00:16:42,720
the obvious one to use in application or

00:16:40,439 --> 00:16:44,790
any you configure the cache manager

00:16:42,720 --> 00:16:47,669
which is quite an easy way to get send

00:16:44,790 --> 00:16:51,110
cash up and running the cash arranger

00:16:47,669 --> 00:16:51,110
resource so I recommend doing that

00:16:52,489 --> 00:16:57,480
alternatively you can do page level cash

00:16:54,689 --> 00:16:59,699
in now given you can cash out the

00:16:57,480 --> 00:17:02,309
database you could cash out all the PHP

00:16:59,699 --> 00:17:04,699
tool intensive purposes just generates

00:17:02,309 --> 00:17:07,139
the HTML store gets to mount the disk

00:17:04,699 --> 00:17:08,760
when the user comes along requesting the

00:17:07,139 --> 00:17:12,539
same page just serving the HTML back

00:17:08,760 --> 00:17:15,329
that's quick that's really quick Gousha

00:17:12,539 --> 00:17:17,279
now you're bordering on faster than PHP

00:17:15,329 --> 00:17:20,100
not quite because you've got to work out

00:17:17,279 --> 00:17:24,870
which felt alone but it's really really

00:17:20,100 --> 00:17:27,079
fast biggest downside any dynamic data

00:17:24,870 --> 00:17:29,309
on that page is now baked into your cash

00:17:27,079 --> 00:17:32,070
so if you're doing an e-commerce site

00:17:29,309 --> 00:17:33,330
and you've got your current bot number

00:17:32,070 --> 00:17:35,429
items in the basket or something like

00:17:33,330 --> 00:17:37,110
that in the top right-hand corner well

00:17:35,429 --> 00:17:39,000
if you cash that bit then everyone sees

00:17:37,110 --> 00:17:40,769
I've got five items in their basket or

00:17:39,000 --> 00:17:42,899
whatever so yeah actually really

00:17:40,769 --> 00:17:45,990
carefully post cash in but it is really

00:17:42,899 --> 00:17:49,529
fast if you can use it again then cash

00:17:45,990 --> 00:17:51,539
has got a page front-end component which

00:17:49,529 --> 00:17:55,590
makes it really easy to implement as

00:17:51,539 --> 00:17:57,059
well however this isn't Cashin talk so

00:17:55,590 --> 00:17:58,590
we're going to ignore caching from now

00:17:57,059 --> 00:18:00,779
on I'm going to assume that you've

00:17:58,590 --> 00:18:02,880
cashed out the really really big slow

00:18:00,779 --> 00:18:06,539
parts of your application so we've done

00:18:02,880 --> 00:18:10,710
the easy stuff so let's talk about some

00:18:06,539 --> 00:18:12,330
said that specific stuff now that will

00:18:10,710 --> 00:18:18,510
actually affect the performance of your

00:18:12,330 --> 00:18:22,620
application loading files Zen framework

00:18:18,510 --> 00:18:24,029
has a lot of files um you know that

00:18:22,620 --> 00:18:26,070
because it takes a lot download it from

00:18:24,029 --> 00:18:28,740
the website it says loads and loads of

00:18:26,070 --> 00:18:30,690
files in it every single class every

00:18:28,740 --> 00:18:33,630
single interface has got its own clothes

00:18:30,690 --> 00:18:36,450
so therefore the reason why we're there

00:18:33,630 --> 00:18:37,559
is 440 something files uploaded because

00:18:36,450 --> 00:18:41,460
they all have to be loaded one of the

00:18:37,559 --> 00:18:43,200
time lodha files is a fairly key area of

00:18:41,460 --> 00:18:49,409
improving the performance of same

00:18:43,200 --> 00:18:51,929
framework and most obvious thing to look

00:18:49,409 --> 00:18:55,049
at is include path the traditional way

00:18:51,929 --> 00:18:58,200
and the expected way to set up as Eric

00:18:55,049 --> 00:19:01,490
application is that you define your

00:18:58,200 --> 00:19:03,899
application path and then you reference

00:19:01,490 --> 00:19:07,620
library from the application path and

00:19:03,899 --> 00:19:09,539
then you add it to your include path so

00:19:07,620 --> 00:19:11,549
we essentially put the slash library

00:19:09,539 --> 00:19:13,350
folder onto the include path and then

00:19:11,549 --> 00:19:17,580
the autoloader will start loading or

00:19:13,350 --> 00:19:20,610
yours and framework class files it's

00:19:17,580 --> 00:19:24,570
really really important that the same

00:19:20,610 --> 00:19:27,990
framework for own directory is first on

00:19:24,570 --> 00:19:33,269
your include path it makes a significant

00:19:27,990 --> 00:19:35,460
difference this is what the send

00:19:33,269 --> 00:19:38,730
frameworks a left great project does it

00:19:35,460 --> 00:19:41,429
generates this sort of a code into your

00:19:38,730 --> 00:19:44,129
in desktop PHP so if you said def create

00:19:41,429 --> 00:19:45,750
project then it will be correct if you

00:19:44,129 --> 00:19:47,970
created your own bootstrapping your own

00:19:45,750 --> 00:19:50,669
loading up herbs and framework and check

00:19:47,970 --> 00:19:52,889
that the wherever you put zend libraries

00:19:50,669 --> 00:19:56,610
end is the first item on your own clip

00:19:52,889 --> 00:19:58,889
off I did some testing why I put these

00:19:56,610 --> 00:20:00,890
two round the other way and I removed

00:19:58,889 --> 00:20:04,679
the real path

00:20:00,890 --> 00:20:06,419
call at the front and the transaction

00:20:04,679 --> 00:20:08,669
rate dropped seven eight percent

00:20:06,419 --> 00:20:11,400
something like that so you get an eight

00:20:08,669 --> 00:20:13,620
percent boost by haven't send phone work

00:20:11,400 --> 00:20:17,790
files at the first item menu include

00:20:13,620 --> 00:20:23,250
path full gssa the self correct project

00:20:17,790 --> 00:20:27,380
does it first correctly for us use all

00:20:23,250 --> 00:20:30,870
to load only in sarawak one all the

00:20:27,380 --> 00:20:33,630
files that make up parlor library do not

00:20:30,870 --> 00:20:35,490
use autoloading at all you do not have

00:20:33,630 --> 00:20:38,460
to use an autoloader with as Emperor

00:20:35,490 --> 00:20:40,679
what one application back in 2005 when

00:20:38,460 --> 00:20:45,210
sin framework was created this seemed

00:20:40,679 --> 00:20:47,640
like a good idea maximum flexibility in

00:20:45,210 --> 00:20:50,760
practice I everyone uses an autoloader

00:20:47,640 --> 00:20:53,280
now this and be some people found it was

00:20:50,760 --> 00:20:56,549
faster if you let the autoloader do the

00:20:53,280 --> 00:20:58,650
work so to remove all those require wats

00:20:56,549 --> 00:21:01,650
statements from zend framework source

00:20:58,650 --> 00:21:03,900
code you run a find followed by an X

00:21:01,650 --> 00:21:06,650
arcs and that's said and someone else

00:21:03,900 --> 00:21:10,710
generated this and not me and

00:21:06,650 --> 00:21:13,230
interestingly said works differently or

00:21:10,710 --> 00:21:15,240
max so there is a different commodity if

00:21:13,230 --> 00:21:17,400
you do dham max so if you're doing it on

00:21:15,240 --> 00:21:19,650
linux and if you're doing it on Windows

00:21:17,400 --> 00:21:21,210
I've got no idea how you do it you

00:21:19,650 --> 00:21:27,169
probably use a linux box and a cup of

00:21:21,210 --> 00:21:30,450
the falls back no idea he's cygwin and

00:21:27,169 --> 00:21:33,150
yes so when I was fierce and testing on

00:21:30,450 --> 00:21:35,669
some simple applications I found not a

00:21:33,150 --> 00:21:37,799
lot of difference on this so I would

00:21:35,669 --> 00:21:39,500
device test in it as to whether actually

00:21:37,799 --> 00:21:41,940
makes performance difference or not I

00:21:39,500 --> 00:21:44,100
asked Matthew about it the project

00:21:41,940 --> 00:21:46,559
leader zend framework and he said is

00:21:44,100 --> 00:21:49,410
you're on 5.2 that it makes more

00:21:46,559 --> 00:21:50,970
difference than if you're on 5.3 so

00:21:49,410 --> 00:21:52,440
consider whether it's actually worth

00:21:50,970 --> 00:21:54,570
doing for your actual application and

00:21:52,440 --> 00:21:56,309
where you actually deploy but it's

00:21:54,570 --> 00:22:00,750
definitely one of those items that is

00:21:56,309 --> 00:22:02,760
worth measuring ok so we talked all that

00:22:00,750 --> 00:22:05,940
here's one of these pictures where I've

00:22:02,760 --> 00:22:09,809
sorted by social self cost and number

00:22:05,940 --> 00:22:11,640
one is end loader load file i told you

00:22:09,809 --> 00:22:12,540
in legend falls is a big thing with in

00:22:11,640 --> 00:22:15,240
zend framework

00:22:12,540 --> 00:22:18,600
takes a lot of time that's what load

00:22:15,240 --> 00:22:20,910
file looks like this is why it takes a

00:22:18,600 --> 00:22:23,190
fair old while to do we do something

00:22:20,910 --> 00:22:25,230
called a security check we do some

00:22:23,190 --> 00:22:26,940
directory and plugging stuff we did get

00:22:25,230 --> 00:22:28,590
include path through second include path

00:22:26,940 --> 00:22:30,420
we check whether we need to do an

00:22:28,590 --> 00:22:34,290
include once or and include there's a

00:22:30,420 --> 00:22:38,520
lot going on which to be honest isn't

00:22:34,290 --> 00:22:40,110
really needed in production it's really

00:22:38,520 --> 00:22:41,850
helpful in development when you get it

00:22:40,110 --> 00:22:43,290
wrong and the wrong file loads or the

00:22:41,850 --> 00:22:45,360
class isn't in the right file and things

00:22:43,290 --> 00:22:47,910
like that in production you don't need

00:22:45,360 --> 00:22:48,900
any of that okay you know what you're

00:22:47,910 --> 00:22:51,540
doing production because hopefully

00:22:48,900 --> 00:22:55,500
you've tested you do all tests before

00:22:51,540 --> 00:22:58,410
you put life at least basically good so

00:22:55,500 --> 00:23:01,380
how about we do that we change load file

00:22:58,410 --> 00:23:05,690
to application n equals life include

00:23:01,380 --> 00:23:07,950
file name that's an awful lot faster

00:23:05,690 --> 00:23:09,030
much much faster don't do it in

00:23:07,950 --> 00:23:13,470
development because you lose some

00:23:09,030 --> 00:23:15,180
benefits but in in a live environment if

00:23:13,470 --> 00:23:16,830
you need to performance at the same

00:23:15,180 --> 00:23:18,720
framework level that's a worthwhile

00:23:16,830 --> 00:23:23,670
doing worthwhile measuring up and check

00:23:18,720 --> 00:23:25,650
in what did I say again I saw about

00:23:23,670 --> 00:23:29,730
seven percent increase improvement in

00:23:25,650 --> 00:23:31,260
performance something like that you get

00:23:29,730 --> 00:23:32,580
more if you're not using ABC but if

00:23:31,260 --> 00:23:37,980
you're not using a pc then you probably

00:23:32,580 --> 00:23:42,450
don't care ok sounds application who

00:23:37,980 --> 00:23:47,670
here uses end application ok everyone's

00:23:42,450 --> 00:23:49,380
heard send applications really slow it's

00:23:47,670 --> 00:23:51,330
certainly much slower than rolling your

00:23:49,380 --> 00:23:53,280
own boot strap system one of the main

00:23:51,330 --> 00:23:55,980
reasons that it's slow is that it

00:23:53,280 --> 00:23:58,740
standardizes of bootstrapping so you can

00:23:55,980 --> 00:24:01,200
write a bootstrap module oh yeah module

00:23:58,740 --> 00:24:03,570
resource wants and then you can reuse it

00:24:01,200 --> 00:24:04,920
across multiple projects so from a

00:24:03,570 --> 00:24:06,300
maintenance point of view if you've got

00:24:04,920 --> 00:24:09,080
multiple zend framework projects out

00:24:06,300 --> 00:24:11,130
there like my company does the holes in

00:24:09,080 --> 00:24:13,410
application functionality and feature

00:24:11,130 --> 00:24:15,270
set is a huge benefit to us from an

00:24:13,410 --> 00:24:18,540
instance point of view but it does cost

00:24:15,270 --> 00:24:22,590
you little bit one of the bigger bits it

00:24:18,540 --> 00:24:25,290
cost you is the any file this is what

00:24:22,590 --> 00:24:28,950
the index dot PHP for

00:24:25,290 --> 00:24:31,050
all is from ZF great project we

00:24:28,950 --> 00:24:36,320
instantiate events and application

00:24:31,050 --> 00:24:40,310
objects with the application in E and

00:24:36,320 --> 00:24:40,310
passed into it as its second parameter

00:24:40,340 --> 00:24:47,010
how often do you change your config file

00:24:43,440 --> 00:24:49,590
what's your in production not very often

00:24:47,010 --> 00:24:53,040
you certainly do not need to be passing

00:24:49,590 --> 00:24:56,130
application in the every single request

00:24:53,040 --> 00:24:57,930
I Roseanne config it's not the fastest

00:24:56,130 --> 00:24:59,520
in the world it's fast enough but he's

00:24:57,930 --> 00:25:01,620
certainly not that quick it depends on

00:24:59,520 --> 00:25:05,610
past any file which equally is not that

00:25:01,620 --> 00:25:08,160
quick what the same framework and

00:25:05,610 --> 00:25:10,530
application actually does is it takes

00:25:08,160 --> 00:25:13,110
that in default it puts into same config

00:25:10,530 --> 00:25:15,660
and then it calls to write on it to

00:25:13,110 --> 00:25:21,590
create an array and then it uses the

00:25:15,660 --> 00:25:24,450
array internally we could cash that out

00:25:21,590 --> 00:25:26,040
you've got a PC installed anyway so I've

00:25:24,450 --> 00:25:27,330
done in May PC example here if you're

00:25:26,040 --> 00:25:28,950
using the accelerator you'll probably

00:25:27,330 --> 00:25:32,820
need the different caching mechanism

00:25:28,950 --> 00:25:36,300
no-cache d or something it's a little

00:25:32,820 --> 00:25:39,360
bit code but down the bottom send

00:25:36,300 --> 00:25:42,450
application will accept an array as its

00:25:39,360 --> 00:25:45,180
config element right option mother as

00:25:42,450 --> 00:25:47,760
instead of an indie fault so if you can

00:25:45,180 --> 00:25:49,470
get an array without having to pass any

00:25:47,760 --> 00:25:52,980
file then your area performance increase

00:25:49,470 --> 00:25:56,160
and that's what this bit here does a PC

00:25:52,980 --> 00:25:58,770
fetch try to load in a config file if

00:25:56,160 --> 00:26:01,920
the config file isn't as in config

00:25:58,770 --> 00:26:03,750
actually that's a cultural if you don't

00:26:01,920 --> 00:26:06,270
have a config file then you want to

00:26:03,750 --> 00:26:08,040
instantiate a config file convert it to

00:26:06,270 --> 00:26:12,390
a ray and then store it again so now

00:26:08,040 --> 00:26:14,850
you've got an array the very first time

00:26:12,390 --> 00:26:16,710
you run the request and then every

00:26:14,850 --> 00:26:19,800
subsequent request doesn't need to

00:26:16,710 --> 00:26:21,900
repass your coffee variables massive

00:26:19,800 --> 00:26:23,970
pulsing Chris force an application

00:26:21,900 --> 00:26:26,130
because it's tiny compared to the

00:26:23,970 --> 00:26:29,310
database work but as in defecation is

00:26:26,130 --> 00:26:31,170
quite a big increase again you talk

00:26:29,310 --> 00:26:33,030
another five percent something like that

00:26:31,170 --> 00:26:34,530
you're going to get from doing that at

00:26:33,030 --> 00:26:35,880
least that's what I get whether you get

00:26:34,530 --> 00:26:38,360
that or not depends on your measurements

00:26:35,880 --> 00:26:39,650
because you are measuring everything

00:26:38,360 --> 00:26:41,410
don't even bother try this stuff out

00:26:39,650 --> 00:26:43,400
Alicia going to measure before and after

00:26:41,410 --> 00:26:44,300
because every single time we do

00:26:43,400 --> 00:26:46,160
something like this we're now

00:26:44,300 --> 00:26:48,590
complicated and I didn't walk code

00:26:46,160 --> 00:26:49,850
remember why we did this code if you get

00:26:48,590 --> 00:26:51,740
in a one percent increase and that

00:26:49,850 --> 00:26:56,090
doesn't matter to you then don't waste

00:26:51,740 --> 00:26:59,030
your time doing it send DB table at nine

00:26:56,090 --> 00:27:02,660
using zend DB table okay a few people

00:26:59,030 --> 00:27:04,100
and when you seen dr. E okay I learned a

00:27:02,660 --> 00:27:05,870
lot about doctrine but I suggest you

00:27:04,100 --> 00:27:06,890
check with their documentation because I

00:27:05,870 --> 00:27:09,310
bet they've got some performance

00:27:06,890 --> 00:27:11,900
increases in there somewhere as well

00:27:09,310 --> 00:27:16,400
send DB table though read some metadata

00:27:11,900 --> 00:27:19,940
from the database every single time you

00:27:16,400 --> 00:27:22,520
access the database table once it caches

00:27:19,940 --> 00:27:24,650
it for the request itself internally as

00:27:22,520 --> 00:27:27,260
a static but essentially every time you

00:27:24,650 --> 00:27:29,090
do a new request to the first time you

00:27:27,260 --> 00:27:32,140
in the users table or whatever it's

00:27:29,090 --> 00:27:35,900
going to go and read the metadata again

00:27:32,140 --> 00:27:38,750
how often do you change your database

00:27:35,900 --> 00:27:39,920
schema lost once you're in production

00:27:38,750 --> 00:27:42,200
you've got like people there you'd that

00:27:39,920 --> 00:27:44,780
never change your production now when

00:27:42,200 --> 00:27:46,610
you do change your database schema

00:27:44,780 --> 00:27:48,200
you've probably got deployment strategy

00:27:46,610 --> 00:27:49,100
if you don't have a deployment strategy

00:27:48,200 --> 00:27:51,140
then you need to get a deployment

00:27:49,100 --> 00:27:54,410
strategy it really needs a plural

00:27:51,140 --> 00:27:56,570
strategy that's a different tool at

00:27:54,410 --> 00:27:59,570
which point you could clear the cache so

00:27:56,570 --> 00:28:01,700
you should cash out database describe

00:27:59,570 --> 00:28:05,570
table you really really do not want to

00:28:01,700 --> 00:28:07,940
be doing it fortunately there's NDB

00:28:05,570 --> 00:28:08,990
table people realize this so you don't

00:28:07,940 --> 00:28:11,960
actually have to do any work whatsoever

00:28:08,990 --> 00:28:13,940
of them set up a few config settings in

00:28:11,960 --> 00:28:17,240
application got any and then zend DB

00:28:13,940 --> 00:28:18,920
table will take care of itself so this

00:28:17,240 --> 00:28:22,460
is absolutely simplest thing you could

00:28:18,920 --> 00:28:25,700
possibly do you set your front-end data

00:28:22,460 --> 00:28:27,500
send cash element to a call I've put to

00:28:25,700 --> 00:28:29,000
our lifetime on here so that it will

00:28:27,500 --> 00:28:32,500
automatically clear itself out in

00:28:29,000 --> 00:28:36,380
practice I would recommend setting that

00:28:32,500 --> 00:28:38,150
20 which will mean cash forever so that

00:28:36,380 --> 00:28:41,330
then you delete the cache files juvenal

00:28:38,150 --> 00:28:44,990
deployment strategy automatic

00:28:41,330 --> 00:28:47,300
civilization store to fall but you could

00:28:44,990 --> 00:28:50,510
equally store to memcache or into a pc

00:28:47,300 --> 00:28:51,410
or something like that set up a I've set

00:28:50,510 --> 00:28:54,080
up a

00:28:51,410 --> 00:28:55,250
directory here from the fall back end

00:28:54,080 --> 00:28:58,610
but obviously if you're using memcache

00:28:55,250 --> 00:29:02,090
you set up your own cache server and

00:28:58,610 --> 00:29:05,060
lastly on your DB resource you set

00:29:02,090 --> 00:29:08,720
default net meta cash to the to the

00:29:05,060 --> 00:29:11,480
cache key that you just set up since one

00:29:08,720 --> 00:29:13,820
of those areas where the resources cache

00:29:11,480 --> 00:29:15,610
manager comes into its own so because

00:29:13,820 --> 00:29:18,590
you can set up multiple of these caches

00:29:15,610 --> 00:29:20,450
so the DB one here is being used for the

00:29:18,590 --> 00:29:22,550
metadata you can set up another one for

00:29:20,450 --> 00:29:24,170
handling are no other long run in

00:29:22,550 --> 00:29:28,240
operations you've got in your coat

00:29:24,170 --> 00:29:28,240
that's why i recommend it's very handy

00:29:29,230 --> 00:29:37,220
ok have it in tom was half an hour same

00:29:34,460 --> 00:29:38,540
view and one here using simpiy and one

00:29:37,220 --> 00:29:40,160
here not using the same fury better

00:29:38,540 --> 00:29:43,100
question would admit anyone decided to

00:29:40,160 --> 00:29:47,270
RIF outs overview of putting small t few

00:29:43,100 --> 00:29:48,800
people it's nothing wrong with that I I

00:29:47,270 --> 00:29:50,150
don't actually have a probably smarty as

00:29:48,800 --> 00:29:54,020
long as you know why you're using it

00:29:50,150 --> 00:29:57,050
that's my main thing about smarty but

00:29:54,020 --> 00:29:58,100
most people you sent you and how many

00:29:57,050 --> 00:30:01,850
people have read the source codes of

00:29:58,100 --> 00:30:02,840
them view yeah quite so many that's one

00:30:01,850 --> 00:30:05,300
of the things about you to the framework

00:30:02,840 --> 00:30:06,740
you assume that the framework code

00:30:05,300 --> 00:30:08,300
itself you don't actually need to look

00:30:06,740 --> 00:30:10,400
to that you look at it as a black box I

00:30:08,300 --> 00:30:14,690
certainly do but every so often is

00:30:10,400 --> 00:30:17,300
interesting to delve into it with same

00:30:14,690 --> 00:30:21,770
view the biggest performance issues are

00:30:17,300 --> 00:30:23,900
around few helpers by far because that's

00:30:21,770 --> 00:30:27,010
what it does when you said call a view

00:30:23,900 --> 00:30:30,170
helper it uses a magic method under

00:30:27,010 --> 00:30:32,060
SCORM score call that's not very quick

00:30:30,170 --> 00:30:33,620
before we even begin to worry about what

00:30:32,060 --> 00:30:36,200
underscore underscore call is doing

00:30:33,620 --> 00:30:38,060
magic methods are not as fast as direct

00:30:36,200 --> 00:30:40,250
methods for any given class there's a

00:30:38,060 --> 00:30:43,460
level in direction by definition its

00:30:40,250 --> 00:30:47,060
lower then it checks whether the helper

00:30:43,460 --> 00:30:49,790
is already loaded once assuming it is

00:30:47,060 --> 00:30:53,540
loaded instantiated or whatnot it then

00:30:49,790 --> 00:30:54,830
calls call user func array I don't even

00:30:53,540 --> 00:30:57,170
want to have a profile call user func

00:30:54,830 --> 00:30:59,690
array I think it is a slowest function

00:30:57,170 --> 00:31:02,420
within PHP I could be wrong but it's

00:30:59,690 --> 00:31:04,590
really not a quick function it is a very

00:31:02,420 --> 00:31:07,799
very slow way of execute

00:31:04,590 --> 00:31:09,690
him a method however if you have

00:31:07,799 --> 00:31:12,450
multiple parameters that you need to

00:31:09,690 --> 00:31:15,570
pass to a method that you do not know

00:31:12,450 --> 00:31:19,049
its name at compile time it's the only

00:31:15,570 --> 00:31:20,850
way to do it so the reason call user

00:31:19,049 --> 00:31:24,840
func erase is here it's because that's

00:31:20,850 --> 00:31:32,970
the only way to do it sensibly it is not

00:31:24,840 --> 00:31:35,520
quick really it's not quick so for the

00:31:32,970 --> 00:31:38,460
most commonly used view helpers that you

00:31:35,520 --> 00:31:42,299
have it's worth getting them out of

00:31:38,460 --> 00:31:43,740
using this method altogether which means

00:31:42,299 --> 00:31:48,270
that you need to write them directly

00:31:43,740 --> 00:31:51,770
into zend view itself because when you

00:31:48,270 --> 00:31:54,330
have a when you use your pee HTML file

00:31:51,770 --> 00:31:56,640
what actually happens is that is it that

00:31:54,330 --> 00:31:59,700
is included using the include a

00:31:56,640 --> 00:32:02,039
directive directly into a method within

00:31:59,700 --> 00:32:03,390
zend view itself so when you do Donna

00:32:02,039 --> 00:32:06,600
this Dutch greater than within your

00:32:03,390 --> 00:32:10,049
phtml file you're using an instance of

00:32:06,600 --> 00:32:12,029
send view so you've grew in the contest

00:32:10,049 --> 00:32:13,649
as and view so if you had the method in

00:32:12,029 --> 00:32:16,230
Zen view that represented your view

00:32:13,649 --> 00:32:20,399
helper you would now bypass on scotch go

00:32:16,230 --> 00:32:22,049
call it would be quicker because if you

00:32:20,399 --> 00:32:23,370
did that every time do you ever show so

00:32:22,049 --> 00:32:26,460
framework came out you'd have to go

00:32:23,370 --> 00:32:28,970
repatched send view that clearly is not

00:32:26,460 --> 00:32:30,870
something that a normal to do the robot

00:32:28,970 --> 00:32:32,610
so what you actually want to do is you

00:32:30,870 --> 00:32:35,039
want to create your own view class which

00:32:32,610 --> 00:32:36,720
is an extension of Center view and then

00:32:35,039 --> 00:32:43,590
you want to use your own view class with

00:32:36,720 --> 00:32:46,470
your own methods in it something like a

00:32:43,590 --> 00:32:48,210
Pew I like a pass by namespace for the

00:32:46,470 --> 00:32:50,039
specific stuff thats related to zend

00:32:48,210 --> 00:32:53,340
framework that is for this application

00:32:50,039 --> 00:32:56,580
only so you create a top-level and

00:32:53,340 --> 00:32:59,250
directory on the library called app we

00:32:56,580 --> 00:33:01,860
create view PHP in it which is close up

00:32:59,250 --> 00:33:05,010
view extend send view that's nice and

00:33:01,860 --> 00:33:07,049
easy you need to tell the autoloader

00:33:05,010 --> 00:33:09,809
that you've gone and done this so you

00:33:07,049 --> 00:33:12,659
set auto load the namespaces and you add

00:33:09,809 --> 00:33:14,580
to its an array so you just add up to it

00:33:12,659 --> 00:33:17,309
and now the Zen daughter know that will

00:33:14,580 --> 00:33:19,590
load up view for us that's all crazy we

00:33:17,309 --> 00:33:21,910
can all do it

00:33:19,590 --> 00:33:24,040
this is where it gets a little bit messy

00:33:21,910 --> 00:33:25,330
and this is one of those flexibility

00:33:24,040 --> 00:33:31,660
points are hopefully in frame at two

00:33:25,330 --> 00:33:32,650
will make easier and when you use some

00:33:31,660 --> 00:33:37,150
framework normally with this end

00:33:32,650 --> 00:33:38,620
application the bootstrap has got

00:33:37,150 --> 00:33:42,160
there's a resource innocence application

00:33:38,620 --> 00:33:47,350
called view which is in this shape

00:33:42,160 --> 00:33:48,850
instantiated by the view renderer one I

00:33:47,350 --> 00:33:51,220
think so when you set up the you

00:33:48,850 --> 00:33:53,830
renderer it will create the view for you

00:33:51,220 --> 00:33:55,720
and then it's 10 c 8 and then attach it

00:33:53,830 --> 00:33:57,970
libya renderer then when you use a

00:33:55,720 --> 00:34:03,610
layout the layout gets its view from the

00:33:57,970 --> 00:34:05,290
view renderer the easiest solution to a

00:34:03,610 --> 00:34:06,790
fortunately way it's been written you

00:34:05,290 --> 00:34:10,570
can't just set the config available and

00:34:06,790 --> 00:34:12,550
say this is the class i want you to use

00:34:10,570 --> 00:34:15,340
as your view that would have been really

00:34:12,550 --> 00:34:17,379
helpful but they never did that instead

00:34:15,340 --> 00:34:20,169
it's buried deep in the middle of the

00:34:17,379 --> 00:34:23,710
view resource the easiest way to get

00:34:20,169 --> 00:34:25,780
around that is to write your own one my

00:34:23,710 --> 00:34:28,270
father quickest way to do it is to drop

00:34:25,780 --> 00:34:30,580
an underscore in it view method into

00:34:28,270 --> 00:34:32,050
your boot strap that is actually

00:34:30,580 --> 00:34:35,590
slightly faster than using the resource

00:34:32,050 --> 00:34:37,030
anyway which is always good and it's not

00:34:35,590 --> 00:34:38,919
that difficult to do you do because you

00:34:37,030 --> 00:34:41,110
really got bootstrap talking HP it's

00:34:38,919 --> 00:34:43,389
always in your application folder so

00:34:41,110 --> 00:34:45,100
inside there you put in all this code

00:34:43,389 --> 00:34:47,200
and she's all really really bored

00:34:45,100 --> 00:34:52,240
exactly the same as a code provided by

00:34:47,200 --> 00:34:54,550
the resource itself except for we

00:34:52,240 --> 00:34:56,470
changed that bit there so we deleted

00:34:54,550 --> 00:34:58,480
four characters and added three new ones

00:34:56,470 --> 00:35:01,570
and we had to put the rest of that round

00:34:58,480 --> 00:35:02,860
it which is basically boilerplate it

00:35:01,570 --> 00:35:05,860
doesn't actually do a lot we do things

00:35:02,860 --> 00:35:08,020
with doc types I we do something content

00:35:05,860 --> 00:35:09,720
type and then we attach it to the view

00:35:08,020 --> 00:35:12,190
render of you who actually helped her

00:35:09,720 --> 00:35:13,360
actually a lot going on there but it's a

00:35:12,190 --> 00:35:20,680
little bit more complicated than it

00:35:13,360 --> 00:35:22,840
needed to be I haven't done that this

00:35:20,680 --> 00:35:24,280
dash url url happened to be the one I

00:35:22,840 --> 00:35:26,010
chose because I reckon that's the most

00:35:24,280 --> 00:35:29,000
commonly used few helping the world

00:35:26,010 --> 00:35:31,319
pretty much

00:35:29,000 --> 00:35:32,970
anytime you need to get a link with

00:35:31,319 --> 00:35:36,390
inside your own fabric application you

00:35:32,970 --> 00:35:38,250
should use the URL view helper it has a

00:35:36,390 --> 00:35:40,260
lot of conveniences especially if you're

00:35:38,250 --> 00:35:43,020
using multiple routes it does make life

00:35:40,260 --> 00:35:44,339
much much easier and it's not

00:35:43,020 --> 00:35:45,960
particularly difficult to view help for

00:35:44,339 --> 00:35:48,270
anyway so you transplant it from the

00:35:45,960 --> 00:35:50,700
view helper you put it in your own app

00:35:48,270 --> 00:35:52,859
on the score view and suddenly you've

00:35:50,700 --> 00:35:55,410
removed an awful lot of cool user func

00:35:52,859 --> 00:35:57,240
array calls especially you've got this

00:35:55,410 --> 00:35:59,309
page this pages are great for this now

00:35:57,240 --> 00:36:01,109
50 items on this page you've got an edit

00:35:59,309 --> 00:36:05,099
in the delete button that's 100 course

00:36:01,109 --> 00:36:11,010
like URL and suddenly it's now just a

00:36:05,099 --> 00:36:13,050
direct methanol it's nice and quick it's

00:36:11,010 --> 00:36:15,359
probably not worth putting all your view

00:36:13,050 --> 00:36:17,069
helpers into app view it's not as easy

00:36:15,359 --> 00:36:18,450
to maintain this having a separate in

00:36:17,069 --> 00:36:23,369
their own classes especially if some

00:36:18,450 --> 00:36:25,349
more complicated ones so i would profile

00:36:23,369 --> 00:36:27,869
and measure find out which few helpers

00:36:25,349 --> 00:36:29,460
actually make a difference if you've got

00:36:27,869 --> 00:36:32,250
one view helper that you use once on one

00:36:29,460 --> 00:36:35,460
page i won't bother leave it where it is

00:36:32,250 --> 00:36:38,520
don't make life harder for maintaining

00:36:35,460 --> 00:36:47,730
your application just for speed it will

00:36:38,520 --> 00:36:52,460
bite you later yeah instantiating and

00:36:47,730 --> 00:36:54,270
call in good question yeah probably

00:36:52,460 --> 00:36:55,710
except of course you'll now have to

00:36:54,270 --> 00:36:58,400
instantiate it all the time unless you

00:36:55,710 --> 00:37:01,049
create your own cash in around

00:36:58,400 --> 00:37:03,839
instantiating that view helper yes a

00:37:01,049 --> 00:37:06,780
taster suggest another alternative is it

00:37:03,839 --> 00:37:11,700
you could instantiate your view helping

00:37:06,780 --> 00:37:14,430
yourself within the view script and then

00:37:11,700 --> 00:37:16,410
call it directly that would also bypass

00:37:14,430 --> 00:37:18,990
the unsprung score cool method within

00:37:16,410 --> 00:37:20,700
send view the only downside is you've

00:37:18,990 --> 00:37:22,140
now got holo the boilerplate code that

00:37:20,700 --> 00:37:24,540
you're putting all over your application

00:37:22,140 --> 00:37:26,520
I wish by do I use an application the

00:37:24,540 --> 00:37:29,880
framework in the first place team might

00:37:26,520 --> 00:37:31,500
as well go back to the bed love base so

00:37:29,880 --> 00:37:33,420
yes you could do that personally I

00:37:31,500 --> 00:37:34,980
wouldn't bother I think you'd be better

00:37:33,420 --> 00:37:37,140
off just now for the ones that actually

00:37:34,980 --> 00:37:39,900
matter just doing subclasses then view

00:37:37,140 --> 00:37:44,339
forgetting about it

00:37:39,900 --> 00:37:47,549
and I've gone on to now Arabella this

00:37:44,339 --> 00:37:50,039
gave you helper it should be the second

00:37:47,549 --> 00:37:51,779
if not the first most common view

00:37:50,039 --> 00:37:53,579
healthy you're using who knows what this

00:37:51,779 --> 00:38:00,569
cave hopefully who uses this kpop do you

00:37:53,579 --> 00:38:02,849
helper who does it use it interesting um

00:38:00,569 --> 00:38:05,220
I see if you have a different solution

00:38:02,849 --> 00:38:10,319
to making sure that you escape all your

00:38:05,220 --> 00:38:12,650
upper two characters your better right

00:38:10,319 --> 00:38:16,829
okay and this gave you helper

00:38:12,650 --> 00:38:19,770
essentially LOL she converts any string

00:38:16,829 --> 00:38:22,289
that you give it in via HTML entities or

00:38:19,770 --> 00:38:25,170
HTML special chars or any other method

00:38:22,289 --> 00:38:28,049
of your choosing usually use it to

00:38:25,170 --> 00:38:31,109
convert Ambersons into absent a MP

00:38:28,049 --> 00:38:32,910
semicolon and get rid of angle brackets

00:38:31,109 --> 00:38:38,779
which have got the script tag in next to

00:38:32,910 --> 00:38:38,779
it so it handily converts any nasty

00:38:38,900 --> 00:38:44,609
people trying to get some XSS stuff into

00:38:42,059 --> 00:38:49,170
your application handling prevents that

00:38:44,609 --> 00:38:52,890
happening pretty much this is a code for

00:38:49,170 --> 00:38:54,839
it because it is configurable because

00:38:52,890 --> 00:38:56,789
Zen framework is a framework and we like

00:38:54,839 --> 00:38:59,250
to be configurable you can pick whether

00:38:56,789 --> 00:39:01,410
you have HTML special chars or you can

00:38:59,250 --> 00:39:05,490
have HTML entities or you have won your

00:39:01,410 --> 00:39:09,270
own choosing you see what we do we call

00:39:05,490 --> 00:39:12,390
user func aadat again or we call user

00:39:09,270 --> 00:39:16,970
func array them depending on which

00:39:12,390 --> 00:39:16,970
particular escape method you're using

00:39:17,240 --> 00:39:24,119
expensive very expensive okay so this

00:39:22,650 --> 00:39:25,529
allows you to configure with your

00:39:24,119 --> 00:39:29,579
username stream of special charles or

00:39:25,529 --> 00:39:32,849
HTML entities for your escaping hands up

00:39:29,579 --> 00:39:36,779
who's ever changed that good it's not

00:39:32,849 --> 00:39:40,650
just me nobody ever ever changes it ever

00:39:36,779 --> 00:39:44,579
ND does so you may as well rewrite it to

00:39:40,650 --> 00:39:46,380
do that you go use HTML spark child

00:39:44,579 --> 00:39:47,940
special charles in any way or if you

00:39:46,380 --> 00:39:50,339
choose external entities replace a

00:39:47,940 --> 00:39:52,349
choice rush or pressure melodies I'll

00:39:50,339 --> 00:39:54,290
see in the crap parameters and you're

00:39:52,349 --> 00:39:56,610
done

00:39:54,290 --> 00:39:57,900
really really not sick not difficult if

00:39:56,610 --> 00:40:02,280
you know what you encoded this you can

00:39:57,900 --> 00:40:05,010
even get rid of it so yeah I highly

00:40:02,280 --> 00:40:06,600
recommend that you should measure this

00:40:05,010 --> 00:40:09,900
and see if it makes a difference in your

00:40:06,600 --> 00:40:12,750
app but it's an interesting slow obvious

00:40:09,900 --> 00:40:20,970
slow point that can be coded out for

00:40:12,750 --> 00:40:22,410
minimal amount of effort okay we're on

00:40:20,970 --> 00:40:26,010
to the last few slices and so we're

00:40:22,410 --> 00:40:28,160
running slightly ahead of time this one

00:40:26,010 --> 00:40:30,920
didn't mention couple of other items

00:40:28,160 --> 00:40:34,970
which aren't particularly code related

00:40:30,920 --> 00:40:38,130
but fairly obvious if you think about it

00:40:34,970 --> 00:40:39,870
who doesn't choose a fav icon it doesn't

00:40:38,130 --> 00:40:44,760
specify one of them is it everyone put a

00:40:39,870 --> 00:40:46,530
fav icon on every site i should have

00:40:44,760 --> 00:40:49,860
lifted the up early if you don't choose

00:40:46,530 --> 00:40:52,910
a fav icon the URL rewrite rules are

00:40:49,860 --> 00:40:55,170
going to call back to index dot PHP

00:40:52,910 --> 00:40:57,890
which is then going to call the error

00:40:55,170 --> 00:41:00,450
controller I'm generator for a full page

00:40:57,890 --> 00:41:02,280
because you didn't have fav icon that

00:41:00,450 --> 00:41:07,320
means you've run through the entire set

00:41:02,280 --> 00:41:10,200
f stack again which is 556 different

00:41:07,320 --> 00:41:15,480
functions just to say we don't have a

00:41:10,200 --> 00:41:18,120
fav icon an interesting thing about that

00:41:15,480 --> 00:41:19,620
is that something like Firefox or ie of

00:41:18,120 --> 00:41:23,490
presumably Chrome as well I haven't

00:41:19,620 --> 00:41:26,730
tested call that every single request I

00:41:23,490 --> 00:41:28,710
kind of way but they do especially ie ie

00:41:26,730 --> 00:41:30,150
calls for fav like on every single time

00:41:28,710 --> 00:41:31,740
you go to the next page on them given

00:41:30,150 --> 00:41:34,170
website if it hasn't already got it

00:41:31,740 --> 00:41:36,480
cached internally on yourself so your

00:41:34,170 --> 00:41:37,680
404 in every single time because you're

00:41:36,480 --> 00:41:40,110
using san fran what standard error

00:41:37,680 --> 00:41:42,240
controller hence it tries again every

00:41:40,110 --> 00:41:44,490
single time so from the users point of

00:41:42,240 --> 00:41:46,050
view the time till the spinner start

00:41:44,490 --> 00:41:47,880
spinning it's just increased by a

00:41:46,050 --> 00:41:51,480
hundred 13 milliseconds for no apparent

00:41:47,880 --> 00:41:53,520
reason really really my thing but in

00:41:51,480 --> 00:41:56,400
terms of making performance of your app

00:41:53,520 --> 00:41:58,680
appear better to your user just a blank

00:41:56,400 --> 00:42:00,840
fav icon dico sitting in your root

00:41:58,680 --> 00:42:02,070
folder in your public folder will

00:42:00,840 --> 00:42:04,470
actually make that feel a little bit

00:42:02,070 --> 00:42:06,920
faster and you'll save a whole oh those

00:42:04,470 --> 00:42:06,920
are a lot

00:42:07,500 --> 00:42:17,620
last one who's read the manual there's a

00:42:13,810 --> 00:42:18,940
performance guide in the manual you

00:42:17,620 --> 00:42:20,530
should have been nodded long to half the

00:42:18,940 --> 00:42:23,020
stuff I said if you had read it because

00:42:20,530 --> 00:42:24,850
I knit have to talk a bit and i highly

00:42:23,020 --> 00:42:26,410
recommend you read the manual there is a

00:42:24,850 --> 00:42:28,180
performance guide in there it is worth

00:42:26,410 --> 00:42:31,540
reading because it gives some background

00:42:28,180 --> 00:42:34,960
on to some of the recommendations I have

00:42:31,540 --> 00:42:37,390
they tell you why it's a good idea so

00:42:34,960 --> 00:42:38,890
it's worth pulling up the performance

00:42:37,390 --> 00:42:41,080
guys and having to read through it and

00:42:38,890 --> 00:42:46,390
deciding if it applies to your

00:42:41,080 --> 00:42:48,690
particular situation all right sign of

00:42:46,390 --> 00:42:51,130
summarize now use a black coat cash

00:42:48,690 --> 00:42:56,170
under all circumstances use of white co

00:42:51,130 --> 00:42:58,710
cach cach the slow stuff to certain

00:42:56,170 --> 00:43:01,480
extent you can probably stop there I

00:42:58,710 --> 00:43:03,130
will a good money that all your

00:43:01,480 --> 00:43:04,450
performance problems will be solved by

00:43:03,130 --> 00:43:09,340
the time you finish those first two

00:43:04,450 --> 00:43:11,980
points but if you do have further PHP

00:43:09,340 --> 00:43:13,750
related to performance problems because

00:43:11,980 --> 00:43:16,330
you think same framework is too slow and

00:43:13,750 --> 00:43:19,450
you have measured that that is where

00:43:16,330 --> 00:43:22,210
your problem is then start this end

00:43:19,450 --> 00:43:24,460
loader then what about same TV table and

00:43:22,210 --> 00:43:26,890
worry about app you some sort of you

00:43:24,460 --> 00:43:29,020
think then worry about all the little

00:43:26,890 --> 00:43:31,270
stuff but to be honest by that point

00:43:29,020 --> 00:43:33,010
you're probably chasing stuff where you

00:43:31,270 --> 00:43:34,780
may as well look at different stations

00:43:33,010 --> 00:43:36,610
all together run named cash deal

00:43:34,780 --> 00:43:43,210
multiple servers or something load

00:43:36,610 --> 00:43:47,200
balancing and all kind of questions no

00:43:43,210 --> 00:43:48,520
questions off there's a question all

00:43:47,200 --> 00:43:51,100
you've got of Mike so I don't have to

00:43:48,520 --> 00:43:52,990
repeat the question turtle hi we've had

00:43:51,100 --> 00:43:55,870
some significant problems with zend

00:43:52,990 --> 00:43:57,250
eight always if it'll even greater

00:43:55,870 --> 00:43:59,760
distance thing if you're any tips for

00:43:57,250 --> 00:44:03,540
using it or should we just not

00:43:59,760 --> 00:44:05,740
unfortunately this talks recorded so

00:44:03,540 --> 00:44:06,880
unfortunately this tools recorded so I

00:44:05,740 --> 00:44:09,550
can't actually tell you what I think

00:44:06,880 --> 00:44:14,070
about Zen take and i will say that PHP

00:44:09,550 --> 00:44:14,070
5.3 snake time extension is what I views

00:44:14,890 --> 00:44:20,720
but I did the caching talk which talked

00:44:17,779 --> 00:44:24,140
about how to cash in the details of

00:44:20,720 --> 00:44:25,970
using send cash to cash out database

00:44:24,140 --> 00:44:27,410
calls and things like that and at the

00:44:25,970 --> 00:44:29,660
beginning I wanted to show that the

00:44:27,410 --> 00:44:32,599
database call on my tutorial was or

00:44:29,660 --> 00:44:34,490
digital no it's a page from the book was

00:44:32,599 --> 00:44:36,079
actually the slow bit so I ran it

00:44:34,490 --> 00:44:38,109
through the profiler and send date was

00:44:36,079 --> 00:44:42,500
at the slowest part of my application

00:44:38,109 --> 00:44:44,210
like fifty percent half the page load

00:44:42,500 --> 00:44:46,220
time was end dates doing date

00:44:44,210 --> 00:44:49,490
conversions I don't know if your sit

00:44:46,220 --> 00:44:52,279
around the same but it's a amazing how

00:44:49,490 --> 00:44:53,660
slow bits of sindh they can be and if

00:44:52,279 --> 00:44:55,130
you're not using all the functionality

00:44:53,660 --> 00:44:56,599
that send that gives you then you are

00:44:55,130 --> 00:45:02,769
what throwing away an awful lot and

00:44:56,599 --> 00:45:02,769
performance with no benefit with PHP 5.2

00:45:02,829 --> 00:45:09,380
the date-time extension in 5.2 is

00:45:05,779 --> 00:45:11,240
nowhere near as comprehensive and

00:45:09,380 --> 00:45:12,890
powerful as send a tease send ache is a

00:45:11,240 --> 00:45:15,079
really powerful component it doesn't

00:45:12,890 --> 00:45:18,529
awful lot if you're not using it though

00:45:15,079 --> 00:45:22,099
it's an awful lot of overhead for stuff

00:45:18,529 --> 00:45:24,680
you're not using so and in 5.3 late time

00:45:22,099 --> 00:45:26,299
is pretty much caught up there's very

00:45:24,680 --> 00:45:28,730
little that datetime doesn't do that

00:45:26,299 --> 00:45:30,559
send date does if anything so I would

00:45:28,730 --> 00:45:32,750
recommend you to the daytime it's in see

00:45:30,559 --> 00:45:34,730
it's an extension it's gonna be quick

00:45:32,750 --> 00:45:37,430
and dairy created don't knows what it's

00:45:34,730 --> 00:45:39,920
doing so yeah that's what I would do

00:45:37,430 --> 00:45:41,480
yeah then date is there personally

00:45:39,920 --> 00:45:43,700
unless you need the functionality do not

00:45:41,480 --> 00:45:47,299
use it it's also got that nasty

00:45:43,700 --> 00:45:50,029
formatting problem so again on a rant

00:45:47,299 --> 00:45:54,019
about something i'll try and there's no

00:45:50,029 --> 00:45:56,720
a few send date has anyone else been

00:45:54,019 --> 00:45:58,369
bitten by the fact that the format

00:45:56,720 --> 00:46:01,640
specifiers are not the same as a bait

00:45:58,369 --> 00:46:03,440
function was it just me it uses

00:46:01,640 --> 00:46:05,990
different formatting parameters so you

00:46:03,440 --> 00:46:08,990
know a capital y is not the same as it's

00:46:05,990 --> 00:46:10,640
not the year as it is in the date

00:46:08,990 --> 00:46:12,529
function it's a different slightly

00:46:10,640 --> 00:46:15,109
different meaning and it matters on the

00:46:12,529 --> 00:46:16,430
last three days of every year when

00:46:15,109 --> 00:46:18,049
they're the only three days it matters

00:46:16,430 --> 00:46:20,450
the user's iso formatting rather than

00:46:18,049 --> 00:46:22,910
what they did dave method does just

00:46:20,450 --> 00:46:24,500
really annoying so yeah just don't use

00:46:22,910 --> 00:46:26,569
it unless you need it functional

00:46:24,500 --> 00:46:28,130
difficult then you have to use it and

00:46:26,569 --> 00:46:34,550
you're stuck

00:46:28,130 --> 00:46:36,119
yeah you've been talking about the

00:46:34,550 --> 00:46:42,530
optimization of some of those things

00:46:36,119 --> 00:46:45,960
already in zim framework to yes kind of

00:46:42,530 --> 00:46:48,900
the specialist end loader stuff is end

00:46:45,960 --> 00:46:51,240
loader ins f2 doesn't have an include

00:46:48,900 --> 00:46:54,510
file name in it but they have completely

00:46:51,240 --> 00:46:59,010
reworked the file loading system sent to

00:46:54,510 --> 00:47:01,140
zend framework to which is I think

00:46:59,010 --> 00:47:04,980
Matthew said seven hundred percent

00:47:01,140 --> 00:47:06,359
faster than San framework once it is at

00:47:04,980 --> 00:47:08,880
the point where it is fast enough that

00:47:06,359 --> 00:47:10,440
you will not care that you're not doing

00:47:08,880 --> 00:47:14,369
a direct include well they've done this

00:47:10,440 --> 00:47:15,720
they've done a class map then we need to

00:47:14,369 --> 00:47:16,980
autoload in this two or three different

00:47:15,720 --> 00:47:19,320
ways of doing it but essentially it

00:47:16,980 --> 00:47:22,170
comes down to you need to work out which

00:47:19,320 --> 00:47:24,119
file to load given this class name now

00:47:22,170 --> 00:47:25,650
the way same framework works is the

00:47:24,119 --> 00:47:27,740
underscores can be mapped directly to

00:47:25,650 --> 00:47:30,540
pass separators and you're done

00:47:27,740 --> 00:47:34,099
essentially not particularly complicated

00:47:30,540 --> 00:47:38,520
method is lovely as that result so the

00:47:34,099 --> 00:47:42,270
way that we're going to 702 is if you

00:47:38,520 --> 00:47:45,780
know the path to the zend folded

00:47:42,270 --> 00:47:47,820
directly then you can just append the

00:47:45,780 --> 00:47:50,580
correct bit of string for the actual

00:47:47,820 --> 00:47:52,859
file and call include on it so if you

00:47:50,580 --> 00:47:55,320
know that then the zend folder or the

00:47:52,859 --> 00:47:57,900
send namespaces it will be in san fran

00:47:55,320 --> 00:47:59,760
were to occur between 5.3 namespaces if

00:47:57,900 --> 00:48:03,690
you know that is in slash user slash

00:47:59,760 --> 00:48:08,849
include / PHP / send then all you need

00:48:03,690 --> 00:48:11,369
to do is do dot equals view / u dot PHP

00:48:08,849 --> 00:48:13,650
or something and then do an include on

00:48:11,369 --> 00:48:19,200
it that's quick so there's an array look

00:48:13,650 --> 00:48:21,330
up followed by an include now in

00:48:19,200 --> 00:48:23,250
development it'll be at the path level

00:48:21,330 --> 00:48:25,740
now that will result in the number of

00:48:23,250 --> 00:48:28,140
statical made by PHP to check the file

00:48:25,740 --> 00:48:32,820
is there and things like that what we'll

00:48:28,140 --> 00:48:34,619
be doing in production in exam framework

00:48:32,820 --> 00:48:37,050
to is will be dropping out even the

00:48:34,619 --> 00:48:39,570
concatenation and will be storing the

00:48:37,050 --> 00:48:40,620
complete path to the file against its

00:48:39,570 --> 00:48:42,480
class name

00:48:40,620 --> 00:48:44,280
so they'll be massive great bigger reich

00:48:42,480 --> 00:48:46,020
when it's got send underscore view maps

00:48:44,280 --> 00:48:48,390
to sochi user / include sighs blah blah

00:48:46,020 --> 00:48:50,520
same flat send / something so I

00:48:48,390 --> 00:48:52,740
something maps to blah blah blah etc so

00:48:50,520 --> 00:48:55,880
it's simply a case of an array look up

00:48:52,740 --> 00:49:00,330
full of bone include that's really quick

00:48:55,880 --> 00:49:02,250
so oh who cares you only have to

00:49:00,330 --> 00:49:03,660
generate it once this is whole thing

00:49:02,250 --> 00:49:05,370
about of deployment strategy which I

00:49:03,660 --> 00:49:07,160
mentioned earlier when you've got

00:49:05,370 --> 00:49:09,930
deployment strategy where you have a

00:49:07,160 --> 00:49:14,040
repeatable process for deployment you

00:49:09,930 --> 00:49:16,380
can do precache enough stuff so if you

00:49:14,040 --> 00:49:18,060
know that you're going to need to I'd no

00:49:16,380 --> 00:49:20,010
read your any file and convert it to an

00:49:18,060 --> 00:49:21,660
array you could do it whilst you'll

00:49:20,010 --> 00:49:24,720
deploy your fast lizard in the first

00:49:21,660 --> 00:49:27,660
place you need the cash owner a clasp a

00:49:24,720 --> 00:49:29,700
class path map then you do it whilst

00:49:27,660 --> 00:49:31,410
you're deploying to the server so that's

00:49:29,700 --> 00:49:34,380
really matter if it takes 10 seconds

00:49:31,410 --> 00:49:37,320
it's getting a guy do it once every time

00:49:34,380 --> 00:49:39,690
you do a deploy obviously then framework

00:49:37,320 --> 00:49:42,780
to itself will come with pre-built

00:49:39,690 --> 00:49:43,890
closed paths maps anyway so you won't

00:49:42,780 --> 00:49:44,790
need to worry about centromere but

00:49:43,890 --> 00:49:47,700
you'll obviously went to do if your own

00:49:44,790 --> 00:49:51,630
classes so and do the one deploy it's

00:49:47,700 --> 00:49:53,220
just get to deploy it strategy in on us

00:49:51,630 --> 00:49:55,950
we've probably got time for another

00:49:53,220 --> 00:49:57,390
question or two I think yeah I've got

00:49:55,950 --> 00:49:59,490
about five minutes according to my clock

00:49:57,390 --> 00:50:02,360
I know this is kind of off a little bit

00:49:59,490 --> 00:50:04,470
off-topic given what you just said when

00:50:02,360 --> 00:50:06,810
whinnies in framework to you going to be

00:50:04,470 --> 00:50:10,380
kind of downloadable I seem to be

00:50:06,810 --> 00:50:16,200
missing a piece of string how long is he

00:50:10,380 --> 00:50:18,990
okay mm I don't know we haven't got

00:50:16,200 --> 00:50:21,000
we've got some MVC interface proposals

00:50:18,990 --> 00:50:23,270
that have been accepted the next set of

00:50:21,000 --> 00:50:25,440
proposals will be for the MVC

00:50:23,270 --> 00:50:29,430
implementation itself and the changing

00:50:25,440 --> 00:50:33,290
for quad to MVC form application as a

00:50:29,430 --> 00:50:33,290
sort of bundle

00:50:34,030 --> 00:50:39,880
I don't know I expect that once we have

00:50:37,870 --> 00:50:42,490
the MVC bits development will magically

00:50:39,880 --> 00:50:44,530
ramp up much faster because at the

00:50:42,490 --> 00:50:46,510
moment all the contributors are

00:50:44,530 --> 00:50:49,240
basically waiting for MVC to be now down

00:50:46,510 --> 00:50:51,420
so that we know where to our components

00:50:49,240 --> 00:50:53,650
will fit in and how they'll work nicely

00:50:51,420 --> 00:50:58,120
certainly are my 10 dogs in config till

00:50:53,650 --> 00:51:00,310
I know what the MVC is doing and the the

00:50:58,120 --> 00:51:01,930
lead it gives in the way we're going

00:51:00,310 --> 00:51:04,150
forward and I think a lotta other

00:51:01,930 --> 00:51:08,020
component maintainer czar doing the same

00:51:04,150 --> 00:51:11,080
thing when I gave the talk in Northwest

00:51:08,020 --> 00:51:15,520
I said I thought there'd be a beta

00:51:11,080 --> 00:51:18,160
around Easter I think that's going to be

00:51:15,520 --> 00:51:19,780
later than that now but I'm not going to

00:51:18,160 --> 00:51:21,550
give you a number because you're going

00:51:19,780 --> 00:51:23,770
to tweet it and then Latisse guys say

00:51:21,550 --> 00:51:26,920
why did you give them that number I just

00:51:23,770 --> 00:51:30,010
don't know haven't got a I'm afraid it's

00:51:26,920 --> 00:51:31,510
bound to be this year I opens this year

00:51:30,010 --> 00:51:34,000
cuz I'm foot to right i'm gonna make

00:51:31,510 --> 00:51:38,350
money on it so you still buy my book

00:51:34,000 --> 00:51:41,260
when it comes out and on us hello

00:51:38,350 --> 00:51:43,600
everyone yeah ma'am about the elder

00:51:41,260 --> 00:51:45,130
loading and including of the files what

00:51:43,600 --> 00:51:46,540
about what I don't know when they

00:51:45,130 --> 00:51:50,380
introduce this but what about the

00:51:46,540 --> 00:51:51,870
plug-in loader rakesh I don't know a lot

00:51:50,380 --> 00:51:53,920
about the plug-in loads of stuff

00:51:51,870 --> 00:51:56,050
personally I recommend ripping out

00:51:53,920 --> 00:52:00,280
because in from work Tuesday because

00:51:56,050 --> 00:52:01,870
it's better and this is comes down to

00:52:00,280 --> 00:52:04,060
the water side all the way through

00:52:01,870 --> 00:52:06,220
measure it and find out if you actually

00:52:04,060 --> 00:52:09,460
have a problem most people don't use

00:52:06,220 --> 00:52:11,080
that many plugins and if you're not

00:52:09,460 --> 00:52:12,940
using that many plugins it doesn't

00:52:11,080 --> 00:52:14,770
actually come up in any of your

00:52:12,940 --> 00:52:19,030
profiling because it's just not a big

00:52:14,770 --> 00:52:21,100
enough number to be important yes it's

00:52:19,030 --> 00:52:23,650
not particularly quick and same

00:52:21,100 --> 00:52:26,350
framework tues plugin loader is much

00:52:23,650 --> 00:52:29,140
much faster than zen favorite ones

00:52:26,350 --> 00:52:31,210
completely faster but lets you actually

00:52:29,140 --> 00:52:33,910
seen it in your production site I

00:52:31,210 --> 00:52:35,140
personally wouldn't worry about it but

00:52:33,910 --> 00:52:37,140
that goes for everything I've talked

00:52:35,140 --> 00:52:39,190
about you're not seeing it don't bother

00:52:37,140 --> 00:52:41,110
better things to do you're not going to

00:52:39,190 --> 00:52:43,390
make any money every time you implement

00:52:41,110 --> 00:52:44,860
one of these so you will make money if

00:52:43,390 --> 00:52:47,500
you write a new website for a new plant

00:52:44,860 --> 00:52:47,920
so no put your resources where they

00:52:47,500 --> 00:52:50,110
actually

00:52:47,920 --> 00:52:52,390
money if you got slow cited it is

00:52:50,110 --> 00:52:58,210
costing you money and clearly making

00:52:52,390 --> 00:53:00,100
that site faster is worth doing okay it

00:52:58,210 --> 00:53:02,430
seems like us everyone so thank you very

00:53:00,100 --> 00:53:02,430

YouTube URL: https://www.youtube.com/watch?v=0dIozDHJPKE


