Title: PHP UK Conference 2011 - Continuous improvement in PHP projects by Thorsten Rinne
Publication date: 2012-03-15
Playlist: PHP UK Conference 2011
Description: 
	
Captions: 
	00:00:07,059 --> 00:00:11,570
okay thank you very much welcome to my

00:00:09,950 --> 00:00:14,900
talk about continuous improvement and

00:00:11,570 --> 00:00:17,480
Peach Pit project Kate let me first

00:00:14,900 --> 00:00:20,029
introduce working in Munich in Germany

00:00:17,480 --> 00:00:24,550
as team lead and scrum master for

00:00:20,029 --> 00:00:26,989
Mayflower Mayflower's one for biggest

00:00:24,550 --> 00:00:31,700
peach p companies in Germany with about

00:00:26,989 --> 00:00:34,610
fifty five HP developers I'm also ahead

00:00:31,700 --> 00:00:37,790
of open source lips it's a smaller part

00:00:34,610 --> 00:00:44,720
of Mayflower where we doing open source

00:00:37,790 --> 00:00:48,620
software for free you can on Twitter on

00:00:44,720 --> 00:00:50,930
toss to renew my free time I do sunblock

00:00:48,620 --> 00:00:53,720
on an open source project coord speech

00:00:50,930 --> 00:00:59,110
be my fuq and I'm also working on the

00:00:53,720 --> 00:01:04,519
German p2p documentation so who are you

00:00:59,110 --> 00:01:09,290
let's do some sport after lunch who's a

00:01:04,519 --> 00:01:16,549
PHP developer most of a project manager

00:01:09,290 --> 00:01:22,219
oh very few who's doing continuous

00:01:16,549 --> 00:01:29,329
integration some people who's using

00:01:22,219 --> 00:01:36,159
Jenkins Oh bamboo 12 whoo soo Lee are

00:01:29,329 --> 00:01:36,159
doing HP unit tests not Sebastian

00:01:38,840 --> 00:01:44,900
anyone using continuous inspection so if

00:01:42,180 --> 00:01:51,390
you using tools like code snuffer or

00:01:44,900 --> 00:01:56,010
peach PCPD very good and who's bleeding

00:01:51,390 --> 00:02:01,740
edge doing continuous delivery only one

00:01:56,010 --> 00:02:06,660
are two ok so why do we need continuous

00:02:01,740 --> 00:02:11,010
improvement let us look us just at a

00:02:06,660 --> 00:02:14,880
real life example technology is always

00:02:11,010 --> 00:02:20,720
improving and when you look back some

00:02:14,880 --> 00:02:20,720
years ago in 1966 this wasn't a girl

00:02:23,360 --> 00:02:30,090
this was a goal with technology you

00:02:26,880 --> 00:02:33,240
could nowadays we could prove whether it

00:02:30,090 --> 00:02:38,250
was a goal but ok some old people at the

00:02:33,240 --> 00:02:42,630
FIFA don't want improvement so now we

00:02:38,250 --> 00:02:48,739
can do it and we are developers we are

00:02:42,630 --> 00:02:53,700
not perfect you're not politicians and

00:02:48,739 --> 00:02:55,709
i'm just a very old quote about

00:02:53,700 --> 00:02:57,690
continuous improvement continuous

00:02:55,709 --> 00:03:03,140
improvement is better when delayed

00:02:57,690 --> 00:03:06,180
perfection so this is like open source

00:03:03,140 --> 00:03:09,300
in the last century release early

00:03:06,180 --> 00:03:11,160
release often and improve your code so

00:03:09,300 --> 00:03:15,380
but what is exactly continuous

00:03:11,160 --> 00:03:18,060
improvement and why is it important

00:03:15,380 --> 00:03:20,640
that's a really good quote from

00:03:18,060 --> 00:03:22,650
Wikipedia and it's as a continuous

00:03:20,640 --> 00:03:25,230
improvement process as an ongoing effort

00:03:22,650 --> 00:03:27,810
to improve products services and

00:03:25,230 --> 00:03:30,269
processes we see thoughts seek

00:03:27,810 --> 00:03:33,540
incremental improvement over time or

00:03:30,269 --> 00:03:35,190
break for improvement all at once as you

00:03:33,540 --> 00:03:40,370
can see it's ongoing and it's

00:03:35,190 --> 00:03:40,370
incremental it's quite interesting

00:03:40,740 --> 00:03:45,570
this improvement is very old and Toyota

00:03:43,590 --> 00:03:47,940
started with continuous improvement and

00:03:45,570 --> 00:03:54,330
living continuous improvement in the

00:03:47,940 --> 00:03:56,820
1950s 60 years old and Toyota was using

00:03:54,330 --> 00:03:59,600
it we're still using it for streamlining

00:03:56,820 --> 00:04:04,980
the processes for the car production and

00:03:59,600 --> 00:04:08,370
in Japan wait call it kaizen maybe that

00:04:04,980 --> 00:04:13,110
anyone had about Kaizen yes some people

00:04:08,370 --> 00:04:16,620
and it's very similar to continuous

00:04:13,110 --> 00:04:19,200
improvement and Kaizen are two words or

00:04:16,620 --> 00:04:22,590
two signs the first one is Kai it's

00:04:19,200 --> 00:04:27,060
robot for change and the second one is

00:04:22,590 --> 00:04:29,010
then is that stands for good so change

00:04:27,060 --> 00:04:33,860
to do something better and this is our

00:04:29,010 --> 00:04:33,860
motivation for continuous improvement

00:04:36,200 --> 00:04:40,560
black bears could be one big showstopper

00:04:38,610 --> 00:04:44,520
for continuous improvement in this

00:04:40,560 --> 00:04:48,390
process and this is very important your

00:04:44,520 --> 00:04:50,940
management needs a little for changes if

00:04:48,390 --> 00:04:53,190
your management doesn't support you you

00:04:50,940 --> 00:04:55,890
cannot do this process and you cannot

00:04:53,190 --> 00:04:59,340
use continuous improvement so let's be

00:04:55,890 --> 00:05:04,530
manager seal support your developers in

00:04:59,340 --> 00:05:06,870
this process so I want to start with the

00:05:04,530 --> 00:05:12,390
theory of behind continuous improvement

00:05:06,870 --> 00:05:13,920
and we have free important steps the

00:05:12,390 --> 00:05:18,180
first one is what are we trying to

00:05:13,920 --> 00:05:21,090
accomplish misstep normally has to be

00:05:18,180 --> 00:05:24,120
done with a whole team for example in a

00:05:21,090 --> 00:05:30,930
workshop and sometimes you need a

00:05:24,120 --> 00:05:33,120
moderator with this workshop and and you

00:05:30,930 --> 00:05:36,120
have to find all the problems which

00:05:33,120 --> 00:05:39,000
resolve and we have to rate them so we

00:05:36,120 --> 00:05:41,930
have to we need a priority what are the

00:05:39,000 --> 00:05:44,340
problems which is and what other

00:05:41,930 --> 00:05:46,740
priorities on the problem so we can we

00:05:44,340 --> 00:05:48,480
have to rake them what we can do one

00:05:46,740 --> 00:05:51,820
better

00:05:48,480 --> 00:05:54,010
the next second nitrogen x1 is how they

00:05:51,820 --> 00:05:57,370
will know what a change a better change

00:05:54,010 --> 00:06:01,720
is an improvement we have rated problems

00:05:57,370 --> 00:06:03,910
and we need to measure them we have to

00:06:01,720 --> 00:06:07,600
measure an improvement to Z improvement

00:06:03,910 --> 00:06:10,390
is really an improvement and the

00:06:07,600 --> 00:06:14,070
measuring often change is very important

00:06:10,390 --> 00:06:17,230
because we can't measure the improvement

00:06:14,070 --> 00:06:21,970
and we cannot know if it's really an

00:06:17,230 --> 00:06:25,440
improvement the first step is what

00:06:21,970 --> 00:06:28,990
changes will result in improvement and

00:06:25,440 --> 00:06:31,920
we have to decide what we are doing for

00:06:28,990 --> 00:06:31,920
improvements

00:06:37,320 --> 00:06:49,860
the process process itself starting and

00:06:41,000 --> 00:06:53,790
in PDCA cycle it was also invented in

00:06:49,860 --> 00:06:57,960
the 1950s it's very similar to Kaizen

00:06:53,790 --> 00:07:01,470
once again and the idea on this process

00:06:57,960 --> 00:07:06,020
is from francis bacon from 1620 it's

00:07:01,470 --> 00:07:09,900
quite interesting and the PDCA cycle

00:07:06,020 --> 00:07:11,340
starts with plan what shall DP and so

00:07:09,900 --> 00:07:13,340
first we have to establish your

00:07:11,340 --> 00:07:17,160
objectives and processes necessary for

00:07:13,340 --> 00:07:21,110
delivering results and need to focus on

00:07:17,160 --> 00:07:25,470
your results and the second one is do

00:07:21,110 --> 00:07:29,130
what and how do we do it and so when

00:07:25,470 --> 00:07:31,320
start implementing a new process we

00:07:29,130 --> 00:07:34,200
should start with very small scales if

00:07:31,320 --> 00:07:38,600
possible and because the smaller is

00:07:34,200 --> 00:07:38,600
better because it has smaller impacts

00:07:38,750 --> 00:07:47,550
the flat one is check how did we achieve

00:07:43,520 --> 00:07:49,740
what did we achieve sorry this is my

00:07:47,550 --> 00:07:53,250
part when we have to measure a new

00:07:49,740 --> 00:07:56,070
process and we have to compare results

00:07:53,250 --> 00:08:02,430
against the expected results to a

00:07:56,070 --> 00:08:08,190
certain any differences the last step is

00:08:02,430 --> 00:08:11,040
act and it's quite interesting what else

00:08:08,190 --> 00:08:13,470
do we have to do we have to analyze the

00:08:11,040 --> 00:08:17,130
differences to determine the cause and

00:08:13,470 --> 00:08:20,700
each will be part of either one or more

00:08:17,130 --> 00:08:24,980
of a PDC a step determining whether

00:08:20,700 --> 00:08:24,980
apply changes will include improvement

00:08:25,740 --> 00:08:40,800
when we have a full cycle yeah so if you

00:08:35,099 --> 00:08:43,800
have all four parts all four steps and

00:08:40,800 --> 00:08:46,580
we have no result we know we don't have

00:08:43,800 --> 00:08:52,190
to do that change and we can revert it

00:08:46,580 --> 00:08:56,160
otherwise we can use the improvement so

00:08:52,190 --> 00:08:59,100
how to integrate your inter continues

00:08:56,160 --> 00:09:01,140
improvement in your daily work and I

00:08:59,100 --> 00:09:07,740
think everyone is asking this question

00:09:01,140 --> 00:09:10,410
al and it's quite easy can use

00:09:07,740 --> 00:09:13,410
improvement in PHP project is in real

00:09:10,410 --> 00:09:17,180
life much more simpler today when in

00:09:13,410 --> 00:09:19,620
theory and can be done very fast and

00:09:17,180 --> 00:09:21,660
it's very easy to integrate and

00:09:19,620 --> 00:09:23,580
continuous improve its very easy to

00:09:21,660 --> 00:09:27,089
include continuous improvement in your

00:09:23,580 --> 00:09:29,880
work because it's fits perfect into an

00:09:27,089 --> 00:09:37,160
agile methods like scrum and extreme

00:09:29,880 --> 00:09:37,160
programming so who's working this grown

00:09:37,190 --> 00:09:48,500
only of you who study using waterfall no

00:09:42,720 --> 00:09:52,410
one puts good okay scrum is quite easy

00:09:48,500 --> 00:09:59,430
you have a product backlog for example

00:09:52,410 --> 00:10:02,100
with free parts we have a sprint normal

00:09:59,430 --> 00:10:05,579
some people are saying you use 30 days

00:10:02,100 --> 00:10:07,620
sprints we're working almost all the

00:10:05,579 --> 00:10:11,910
time at mayflower with two weeks prints

00:10:07,620 --> 00:10:18,060
because we are faster with it and we get

00:10:11,910 --> 00:10:21,580
the customer has more impact in our work

00:10:18,060 --> 00:10:23,200
if you want to change something

00:10:21,580 --> 00:10:25,990
the beginning of a sprint we have a

00:10:23,200 --> 00:10:29,290
sprint goal we put something from the

00:10:25,990 --> 00:10:33,510
product backlog and put it to a sprint

00:10:29,290 --> 00:10:36,880
backlog the Sprint backlog are is has

00:10:33,510 --> 00:10:40,240
various tasks from the from the Sprint

00:10:36,880 --> 00:10:44,130
goal and at the end we have a

00:10:40,240 --> 00:10:48,130
potentially shippable product increment

00:10:44,130 --> 00:10:49,660
for example if you have the customer

00:10:48,130 --> 00:10:53,410
order the teams as hey you need some

00:10:49,660 --> 00:10:56,140
coding style fixes we can add it during

00:10:53,410 --> 00:11:03,130
the Sprint and put it in the product

00:10:56,140 --> 00:11:06,370
backlog and during the Sprint we have a

00:11:03,130 --> 00:11:10,570
daily standup every 24 hours at the same

00:11:06,370 --> 00:11:12,460
time where we are talking where the

00:11:10,570 --> 00:11:14,860
developers of talking with this rom mast

00:11:12,460 --> 00:11:19,180
and the product owner owners normally be

00:11:14,860 --> 00:11:21,850
customer what a developer had done what

00:11:19,180 --> 00:11:29,470
were walk what we are going to do and if

00:11:21,850 --> 00:11:31,360
they have any impediments XP extreme

00:11:29,470 --> 00:11:37,320
programming is also an agile development

00:11:31,360 --> 00:11:37,320
process it's quite simple as this thing

00:11:40,420 --> 00:11:48,890
no that's not extreme programming is

00:11:44,510 --> 00:11:50,830
planning in feedback in loops we have

00:11:48,890 --> 00:11:54,890
the basis in extreme programming is

00:11:50,830 --> 00:11:58,810
based on the code we have a release plan

00:11:54,890 --> 00:12:01,490
which is done in cycles of four months

00:11:58,810 --> 00:12:05,690
and we have an iteration plan four weeks

00:12:01,490 --> 00:12:08,990
or counter in weeks we have acceptance

00:12:05,690 --> 00:12:11,630
tests counted in days we also have a

00:12:08,990 --> 00:12:15,350
stand-up meeting like and scrum which

00:12:11,630 --> 00:12:18,770
follow which is every day we have carnal

00:12:15,350 --> 00:12:23,899
relations for cop as a programming unit

00:12:18,770 --> 00:12:29,990
tests and pepper gramming and as you can

00:12:23,899 --> 00:12:32,990
see all met all HR methods are about

00:12:29,990 --> 00:12:36,980
working in iterations and everything is

00:12:32,990 --> 00:12:40,190
done in very small steps and then very

00:12:36,980 --> 00:12:43,640
iterative way so our conclusion of my

00:12:40,190 --> 00:12:53,990
conclusion is combined adjoin methods

00:12:43,640 --> 00:12:56,360
and for me is combining scrum XP or the

00:12:53,990 --> 00:13:00,170
good parts of XP continuous improvement

00:12:56,360 --> 00:13:06,110
is really a good win because the process

00:13:00,170 --> 00:13:10,310
is a really fit perfect so what why it

00:13:06,110 --> 00:13:12,380
was great for PHP it's quite interesting

00:13:10,310 --> 00:13:17,720
you have common problems and PHP

00:13:12,380 --> 00:13:22,010
projects and HP projects are really

00:13:17,720 --> 00:13:26,150
successful and I think we have here over

00:13:22,010 --> 00:13:29,329
500 people attending the conference so a

00:13:26,150 --> 00:13:32,660
lot of development is happening for

00:13:29,329 --> 00:13:35,390
years now for example two still working

00:13:32,660 --> 00:13:38,959
on a pitch p 0 on a project which was

00:13:35,390 --> 00:13:42,190
based on the HP free code or has a

00:13:38,959 --> 00:13:44,520
project with this more than 10 years old

00:13:42,190 --> 00:13:46,800
some yes

00:13:44,520 --> 00:13:48,990
so I think you're very successful with

00:13:46,800 --> 00:13:54,120
your project because it's running for 10

00:13:48,990 --> 00:13:59,940
years and the problem is we have in each

00:13:54,120 --> 00:14:01,830
PDF a big problem called code aging we

00:13:59,940 --> 00:14:05,310
have successful projects have a lot of

00:14:01,830 --> 00:14:07,560
changes in PHP and YouTube a lot of

00:14:05,310 --> 00:14:10,700
change it changes and change requests

00:14:07,560 --> 00:14:13,410
from the customer the HP code ages

00:14:10,700 --> 00:14:21,000
faster when for example Java code or

00:14:13,410 --> 00:14:23,940
other languages that's because we are we

00:14:21,000 --> 00:14:26,910
have more changes when everyone just

00:14:23,940 --> 00:14:30,780
look at this or 10 years ago everyone

00:14:26,910 --> 00:14:32,850
hecht new changes are on the terminal

00:14:30,780 --> 00:14:38,720
directly on the server nowadays we have

00:14:32,850 --> 00:14:38,720
continuous deployments so it's very fast

00:14:39,320 --> 00:14:47,060
and we do adopt a lot of technical

00:14:42,660 --> 00:14:50,040
deaths this is a very big issue because

00:14:47,060 --> 00:14:55,200
with PHP we can do things quick and

00:14:50,040 --> 00:14:58,560
dirty and the dirty way leads to a

00:14:55,200 --> 00:15:03,450
technical depth and the problem is this

00:14:58,560 --> 00:15:05,430
can kill a software very fast but

00:15:03,450 --> 00:15:08,280
interesting technical depth is from the

00:15:05,430 --> 00:15:13,770
early 1990s from Ward Cunningham what's

00:15:08,280 --> 00:15:20,340
also very old and now one is a slide for

00:15:13,770 --> 00:15:22,680
the management we have cost per change

00:15:20,340 --> 00:15:25,350
request and you have benefits for our

00:15:22,680 --> 00:15:29,280
change requests and you have one line

00:15:25,350 --> 00:15:33,350
deal where the cost per change requests

00:15:29,280 --> 00:15:36,360
are higher and the benefits and if you

00:15:33,350 --> 00:15:39,960
if you have a rising frequency or west

00:15:36,360 --> 00:15:45,540
meth missing sometimes you're going to a

00:15:39,960 --> 00:15:48,529
dead end and if you go higher up to this

00:15:45,540 --> 00:15:52,629
line you have more costs

00:15:48,529 --> 00:15:56,300
our change requests when benefits and

00:15:52,629 --> 00:16:02,499
this is when your software is dead this

00:15:56,300 --> 00:16:02,499
is you should never reach this part

00:16:05,760 --> 00:16:16,100
did anyone had a project which is now

00:16:09,780 --> 00:16:18,990
here Oh what are you doing you left okay

00:16:16,100 --> 00:16:25,560
yeah I had to talk two or three years

00:16:18,990 --> 00:16:28,770
ago Azula topic and I was one developer

00:16:25,560 --> 00:16:33,540
from Austria and she said year we have

00:16:28,770 --> 00:16:36,270
such a suction s4 code and everyone left

00:16:33,540 --> 00:16:38,400
the company she was the last one and I

00:16:36,270 --> 00:16:41,100
met her half a year later and asked and

00:16:38,400 --> 00:16:49,320
positive this is better now and she said

00:16:41,100 --> 00:16:52,950
yes I left too so if he software is here

00:16:49,320 --> 00:16:56,280
in this part it will die in the near

00:16:52,950 --> 00:16:58,740
future and if your software is will die

00:16:56,280 --> 00:17:03,960
your company too and when you get fired

00:16:58,740 --> 00:17:07,260
so please pay back your technical depth

00:17:03,960 --> 00:17:12,449
and because this is an investment into

00:17:07,260 --> 00:17:15,720
the future of you softly so always will

00:17:12,449 --> 00:17:24,630
factor your code base and and reflect on

00:17:15,720 --> 00:17:27,770
is also ongoing process so now from PP

00:17:24,630 --> 00:17:30,090
to support I think this is the most

00:17:27,770 --> 00:17:36,540
important stuff for you because we're a

00:17:30,090 --> 00:17:41,840
lot of developers here mr. bulbs have

00:17:36,540 --> 00:17:41,840
you improving your coat and your work

00:17:43,880 --> 00:17:50,370
it's quite interesting that you can do

00:17:47,040 --> 00:17:53,510
it continuously without within the

00:17:50,370 --> 00:17:57,770
continuous integration process if you

00:17:53,510 --> 00:18:01,520
attended Sebastian talk he talked about

00:17:57,770 --> 00:18:04,380
continuously aggression and you can even

00:18:01,520 --> 00:18:08,370
include continuous improvement into

00:18:04,380 --> 00:18:12,420
continuous integration so first we need

00:18:08,370 --> 00:18:14,860
continuous integration server that's

00:18:12,420 --> 00:18:18,020
very important I think

00:18:14,860 --> 00:18:20,720
even if you don't don't do unit tests I

00:18:18,020 --> 00:18:23,960
think about fifty percent of people here

00:18:20,720 --> 00:18:27,200
are not lying unit tests most people are

00:18:23,960 --> 00:18:31,120
doing not doing unit tests because of

00:18:27,200 --> 00:18:36,310
legacy software or untestable software

00:18:31,120 --> 00:18:36,310
and we can do that but I won't tell him

00:18:37,930 --> 00:18:45,200
so first you should set up a continuous

00:18:41,870 --> 00:18:49,970
integration server my choice is Jenkins

00:18:45,200 --> 00:18:54,320
the open source fork of Hopsin why

00:18:49,970 --> 00:18:57,650
Jenkins it's open source and it's very

00:18:54,320 --> 00:18:59,420
easy to set up you'll need about five to

00:18:57,650 --> 00:19:01,490
ten minutes to set up and continuous

00:18:59,420 --> 00:19:04,130
integration server it's just starting

00:19:01,490 --> 00:19:08,300
and driver war file and it's running on

00:19:04,130 --> 00:19:10,640
port 8080 and now when you have

00:19:08,300 --> 00:19:13,610
everything you need can run it on an old

00:19:10,640 --> 00:19:16,220
laptop for example put on your network

00:19:13,610 --> 00:19:22,190
and you can include it in your web

00:19:16,220 --> 00:19:23,990
process Sebastian told you about this

00:19:22,190 --> 00:19:28,100
project template for Jenkins shop and

00:19:23,990 --> 00:19:30,410
p2p projects you documented everything

00:19:28,100 --> 00:19:34,520
about the installation of phpunit teach

00:19:30,410 --> 00:19:39,140
p depend preach B&D peach pecvd peach

00:19:34,520 --> 00:19:42,400
pllc HP document later for phpdoc the

00:19:39,140 --> 00:19:46,540
PHP code sniper and PHP code browser

00:19:42,400 --> 00:19:50,240
this is how it looks like you need some

00:19:46,540 --> 00:19:53,090
Jenkins plugins but it's very easy to

00:19:50,240 --> 00:19:55,400
install everything Jenkins is very very

00:19:53,090 --> 00:19:58,100
cool with that you can do online updates

00:19:55,400 --> 00:20:03,380
and online inst installations for all

00:19:58,100 --> 00:20:10,640
the plugins and if you have set up

00:20:03,380 --> 00:20:15,890
Jenkins is just think 1212 commands you

00:20:10,640 --> 00:20:18,740
need some / channels from pten ppmd PDP

00:20:15,890 --> 00:20:21,690
unit easy components and the symphony

00:20:18,740 --> 00:20:29,910
project and then you need some

00:20:21,690 --> 00:20:29,910
some tools menu have everything set up

00:20:31,770 --> 00:20:37,870
one of the important tools are this with

00:20:35,170 --> 00:20:40,200
PHP Kozlov lives a very old project

00:20:37,870 --> 00:20:43,800
that's from Pearl and repair project and

00:20:40,200 --> 00:20:46,990
peach Piazza fertilizes PHP and

00:20:43,800 --> 00:20:51,400
JavaScript and CSS files so you can also

00:20:46,990 --> 00:20:54,760
get problems in JavaScript and CSS too

00:20:51,400 --> 00:20:56,380
and it detects violations for defined

00:20:54,760 --> 00:20:59,020
set of coding standards for example you

00:20:56,380 --> 00:21:01,510
can say if you're doing a zend framework

00:20:59,020 --> 00:21:04,120
project you should use within framework

00:21:01,510 --> 00:21:10,540
coding style so everything is has the

00:21:04,120 --> 00:21:13,690
same coding style another important tool

00:21:10,540 --> 00:21:18,730
is with PHP mass detector it's developed

00:21:13,690 --> 00:21:22,300
by Manuel Pickler it's mainly a part of

00:21:18,730 --> 00:21:26,830
a Java PMD tool and a spinoff from the

00:21:22,300 --> 00:21:30,790
PHP deep end project so why do we need

00:21:26,830 --> 00:21:34,330
HP Envy peach p md scans the source code

00:21:30,790 --> 00:21:37,060
and finds possible bucks sub optimal

00:21:34,330 --> 00:21:42,010
code over complicated expressions with

00:21:37,060 --> 00:21:44,140
unused parameters methods properties for

00:21:42,010 --> 00:21:47,110
example if you have this very

00:21:44,140 --> 00:21:51,430
complicated piece of code PHP depends

00:21:47,110 --> 00:21:58,840
scans this code HP capensis with base

00:21:51,430 --> 00:22:01,950
product for PHP md and peach peek

00:21:58,840 --> 00:22:06,400
depends at Renwick's from xml code and

00:22:01,950 --> 00:22:09,070
but it's not very human readable and PHP

00:22:06,400 --> 00:22:13,210
and these scans we report for example is

00:22:09,070 --> 00:22:15,400
where report from PHP deep end and when

00:22:13,210 --> 00:22:18,880
peach PMD scans for the report and

00:22:15,400 --> 00:22:21,060
you've got something like this for

00:22:18,880 --> 00:22:25,090
example we have here

00:22:21,060 --> 00:22:30,300
cyclomatic code complexity and here's a

00:22:25,090 --> 00:22:36,610
violation with with a human readable

00:22:30,300 --> 00:22:40,000
result but who reads x modified so we

00:22:36,610 --> 00:22:44,740
need tools to visualize the results of

00:22:40,000 --> 00:22:50,410
all the QA tools and we have mayflower

00:22:44,740 --> 00:22:53,590
we develop to tools and to use that and

00:22:50,410 --> 00:22:58,690
the one to show you how we use it and

00:22:53,590 --> 00:23:02,880
already look like the first ones with

00:22:58,690 --> 00:23:02,880
PHP code browser anyone know about it

00:23:03,090 --> 00:23:08,800
only some people Vicky PHP code browser

00:23:06,820 --> 00:23:12,010
was developed in-house for diploma

00:23:08,800 --> 00:23:16,350
thesis and 2007's almost three years

00:23:12,010 --> 00:23:20,200
four years now old it was close to us

00:23:16,350 --> 00:23:22,750
until someone 2009 when we decided to

00:23:20,200 --> 00:23:28,300
refactor the code to improve the code

00:23:22,750 --> 00:23:31,330
because it wasn't very good code in the

00:23:28,300 --> 00:23:35,200
beginning and when we open sourced it in

00:23:31,330 --> 00:23:39,010
the end of 2009 another big refactoring

00:23:35,200 --> 00:23:40,720
was done summer last year and i think in

00:23:39,010 --> 00:23:46,140
december two thousand ten be released

00:23:40,720 --> 00:23:50,080
with version 1.0 the code browser is a

00:23:46,140 --> 00:23:53,800
code browser I has syntax highlighting

00:23:50,080 --> 00:23:55,930
for PHP files and has some colored

00:23:53,800 --> 00:24:00,940
arrows action font by the QA to it's

00:23:55,930 --> 00:24:03,160
like he p unit HP CBD coats liver it

00:24:00,940 --> 00:24:06,820
shows with your code coverage and it

00:24:03,160 --> 00:24:11,980
shows where results of peach PNG in a

00:24:06,820 --> 00:24:14,950
very nice way you can it's an hour git

00:24:11,980 --> 00:24:18,350
repository on github and it's very easy

00:24:14,950 --> 00:24:21,950
to install if you didn't install it with

00:24:18,350 --> 00:24:29,660
stand with Jenkins so and i will show

00:24:21,950 --> 00:24:32,960
you how it looked like this is the code

00:24:29,660 --> 00:24:35,960
browser if you do for example if you do

00:24:32,960 --> 00:24:40,760
a continues integration run it generates

00:24:35,960 --> 00:24:43,970
all the HTML files every time and when

00:24:40,760 --> 00:24:48,740
you can look when you can see all

00:24:43,970 --> 00:24:51,980
results in a very nice way I think see

00:24:48,740 --> 00:24:54,080
on the left side we've got the tree of

00:24:51,980 --> 00:25:01,090
all the files of a project which will

00:24:54,080 --> 00:25:01,090
come closer project itself yes so small

00:25:02,470 --> 00:25:10,760
better okay so you see all the files in

00:25:07,880 --> 00:25:14,270
the project with all the arrows with

00:25:10,760 --> 00:25:17,440
warnings the crab index over the crab

00:25:14,270 --> 00:25:22,039
indexes crap in my opinion all

00:25:17,440 --> 00:25:28,130
checkstyle arrows problems of coverage

00:25:22,039 --> 00:25:33,190
and Kim D results and where's my mouse

00:25:28,130 --> 00:25:33,190
is just take a look at

00:25:33,760 --> 00:25:41,050
badass code which is here so you can see

00:25:38,260 --> 00:25:47,850
it's just an output you got colored

00:25:41,050 --> 00:25:47,850
sections and problems

00:25:51,480 --> 00:25:55,870
you can see we have different colors for

00:25:54,190 --> 00:25:59,490
different projects are different

00:25:55,870 --> 00:26:02,920
problems for example for the PMD

00:25:59,490 --> 00:26:06,940
problems as you can see where method run

00:26:02,920 --> 00:26:11,830
has a cyclomatic complexity of 10 or 16

00:26:06,940 --> 00:26:14,470
or a very bad end half complexity so if

00:26:11,830 --> 00:26:19,300
you can see the problem we have just

00:26:14,470 --> 00:26:25,750
click here and then you can see all the

00:26:19,300 --> 00:26:31,290
bad book code and this is not very good

00:26:25,750 --> 00:26:35,950
code and then you can improve the code

00:26:31,290 --> 00:26:39,820
so for example you see this bad code you

00:26:35,950 --> 00:26:43,140
can start refactoring the code and the

00:26:39,820 --> 00:26:45,820
next run the code browser stuff is

00:26:43,140 --> 00:26:50,020
regenerated and you can see a it's

00:26:45,820 --> 00:26:52,500
getting better and you can optimize the

00:26:50,020 --> 00:26:52,500
code more

00:26:55,630 --> 00:27:03,200
you can see the coverage you can see

00:26:58,990 --> 00:27:06,830
parts of code which are not covered in

00:27:03,200 --> 00:27:09,890
unit tests and so you can easily find

00:27:06,830 --> 00:27:17,140
parts of your code very neat more unit

00:27:09,890 --> 00:27:17,140
tests and I think it's quite good

00:27:19,740 --> 00:27:29,809
also can browse to prove a source code

00:27:23,790 --> 00:27:29,809
for example and see all the problems

00:27:34,390 --> 00:27:40,260
very nice very nice to see very properly

00:27:43,370 --> 00:27:49,690
this is very bad okay

00:27:51,870 --> 00:27:57,600
so this was the code browser and the

00:27:55,380 --> 00:27:59,820
main problem difficult browser was and

00:27:57,600 --> 00:28:02,220
our opinion we have to switch tools

00:27:59,820 --> 00:28:07,230
normally we are working with zend studio

00:28:02,220 --> 00:28:09,720
based on their clips and if you want to

00:28:07,230 --> 00:28:10,830
see the nice presentation from code

00:28:09,720 --> 00:28:15,960
browsers we have to switch to our

00:28:10,830 --> 00:28:18,750
browser and everyone thought that pass

00:28:15,960 --> 00:28:22,230
isn't very good so we created a second

00:28:18,750 --> 00:28:25,550
tool it's called zinda and Cynder was

00:28:22,230 --> 00:28:29,640
also developed in diploma thesis

00:28:25,550 --> 00:28:34,830
2009-2010 and Cinda eclipse plugin and

00:28:29,640 --> 00:28:37,440
it works with PDT and zen studio and yes

00:28:34,830 --> 00:28:43,230
everything which is based on eclipse is

00:28:37,440 --> 00:28:46,980
working the cinder first we are asked us

00:28:43,230 --> 00:28:48,870
why do we need cinders we need to

00:28:46,980 --> 00:28:50,429
integrate feedback directly to keep each

00:28:48,870 --> 00:28:53,550
peacock browser you we have a feedback

00:28:50,429 --> 00:28:55,440
in the browser but we want feedback for

00:28:53,550 --> 00:29:00,570
static code analysis coding style unit

00:28:55,440 --> 00:29:02,130
test results directly in our IDE and you

00:29:00,570 --> 00:29:06,990
also want to decrease the number of

00:29:02,130 --> 00:29:08,550
tools and it should be based on existing

00:29:06,990 --> 00:29:10,950
artifacts from the continuous

00:29:08,550 --> 00:29:13,679
integration and should be conformed with

00:29:10,950 --> 00:29:17,130
the IDE usability guidelines which are

00:29:13,679 --> 00:29:19,650
not very nice in eclipse but we have to

00:29:17,130 --> 00:29:24,929
live with it within the features that

00:29:19,650 --> 00:29:28,880
are it's an eclipse plugin you can also

00:29:24,929 --> 00:29:32,330
use it for other languages the plug-in

00:29:28,880 --> 00:29:36,990
infrastructure from eclipse is very good

00:29:32,330 --> 00:29:40,860
documented reads per hudson or PHP under

00:29:36,990 --> 00:29:43,970
control xml data aggregated the findings

00:29:40,860 --> 00:29:46,470
by the continuous integration systems

00:29:43,970 --> 00:29:48,600
the language doesn't matter so if you

00:29:46,470 --> 00:29:51,549
use for example Java or Python you can

00:29:48,600 --> 00:29:53,830
also use cinder

00:29:51,549 --> 00:29:57,519
we do nowadays a lot of JavaScript you

00:29:53,830 --> 00:30:01,720
can use it for JavaScript to and it has

00:29:57,519 --> 00:30:05,049
periodic updates of input data so how

00:30:01,720 --> 00:30:10,480
does it work we have developed a pc with

00:30:05,049 --> 00:30:12,669
eclipse and the syndrome plugin request

00:30:10,480 --> 00:30:14,350
privately lead with data from the

00:30:12,669 --> 00:30:20,100
continuous integration server and the

00:30:14,350 --> 00:30:20,100
server sends back where XML data

00:30:20,309 --> 00:30:28,749
installations why example it's just

00:30:23,499 --> 00:30:34,480
install new software and Eclipse have to

00:30:28,749 --> 00:30:37,659
add on the hood URL for that and when

00:30:34,480 --> 00:30:40,840
its installed you can see it when if you

00:30:37,659 --> 00:30:46,539
go to throw new to other and when you

00:30:40,840 --> 00:30:50,379
can select cinder and now control your

00:30:46,539 --> 00:30:55,019
cinder and its really a improvement so

00:30:50,379 --> 00:30:55,019
this is eclipse it's also

00:30:58,330 --> 00:31:05,350
we're PHP code browser project and I

00:31:02,890 --> 00:31:14,140
already loaded some some of the problems

00:31:05,350 --> 00:31:15,580
in see here it's the same as from the

00:31:14,140 --> 00:31:19,750
same source like the Koch brothers

00:31:15,580 --> 00:31:24,850
output but now it's directly in the in

00:31:19,750 --> 00:31:27,720
your IDE and for example you see here

00:31:24,850 --> 00:31:30,179
short variables unused formal parameters

00:31:27,720 --> 00:31:32,740
formula Palmer formal parameter

00:31:30,179 --> 00:31:36,850
cyclomatic complexity and half

00:31:32,740 --> 00:31:40,809
complexity you can see the message here

00:31:36,850 --> 00:31:44,860
you can see where this way code which

00:31:40,809 --> 00:31:49,529
line the offset status and when was it

00:31:44,860 --> 00:31:53,010
change and for example and just click on

00:31:49,529 --> 00:31:53,010
this problem

00:31:56,260 --> 00:32:05,050
and then you can see with a problematic

00:32:01,450 --> 00:32:07,870
part of the code tell us dolar spans are

00:32:05,050 --> 00:32:10,210
short very the name and now you can

00:32:07,870 --> 00:32:15,720
change it if you are changing the code

00:32:10,210 --> 00:32:18,790
you can set a new status fear example to

00:32:15,720 --> 00:32:23,590
won't fix if what if you don't want to

00:32:18,790 --> 00:32:28,240
fix it to done or you can set to it to

00:32:23,590 --> 00:32:31,870
you can't lay which doesn't have any

00:32:28,240 --> 00:32:42,540
effect but the developers seeing a I'd

00:32:31,870 --> 00:32:42,540
already done that and yeah I fixed it

00:32:52,909 --> 00:33:00,979
as you can see you can hear the man in

00:32:55,849 --> 00:33:03,529
the preferences you can add in URL to

00:33:00,979 --> 00:33:07,599
make some elf file so the your vixen l

00:33:03,529 --> 00:33:11,419
fights from Jenkins have to be available

00:33:07,599 --> 00:33:14,059
when you can add a radical you check in

00:33:11,419 --> 00:33:16,159
for example every five minutes or you

00:33:14,059 --> 00:33:19,519
can use an XML file which is located on

00:33:16,159 --> 00:33:27,739
your local system and you can also set

00:33:19,519 --> 00:33:30,470
check it every five minutes so now you

00:33:27,739 --> 00:33:34,369
have a list of all the problems and you

00:33:30,470 --> 00:33:37,220
can improve all the code paths during

00:33:34,369 --> 00:33:40,220
your work so for example if it's getting

00:33:37,220 --> 00:33:43,190
too big the list take some half an hour

00:33:40,220 --> 00:33:45,470
to fix these problems and you bring

00:33:43,190 --> 00:33:48,129
continuous improvement during your

00:33:45,470 --> 00:33:48,129
number work

00:33:52,740 --> 00:34:03,420
so how to get these tools it's quite

00:33:56,520 --> 00:34:05,280
easy it's mainly on PP unit de an open

00:34:03,420 --> 00:34:10,700
source at mayflower make episodes of

00:34:05,280 --> 00:34:19,369
mayflower of the e and on Jenkins PHP so

00:34:10,700 --> 00:34:19,369
how to use these tools it's quite easy

00:34:20,360 --> 00:34:28,470
the first thing you have to do is set up

00:34:23,520 --> 00:34:31,200
a continuous integration server and if

00:34:28,470 --> 00:34:34,760
you listen to the bastion talk you

00:34:31,200 --> 00:34:40,409
should do it on monday first things Adam

00:34:34,760 --> 00:34:46,590
Jenkins and when you do have fun with it

00:34:40,409 --> 00:34:48,990
you should use wheel you should really

00:34:46,590 --> 00:34:53,520
use the artifacts of the PHP create

00:34:48,990 --> 00:34:58,200
tools they really help you improving

00:34:53,520 --> 00:35:00,630
your coat I have one example we have 21

00:34:58,200 --> 00:35:03,450
a project three years ago we have we

00:35:00,630 --> 00:35:07,890
fought oh it's quite good code and when

00:35:03,450 --> 00:35:09,840
we checked it with HP tools and it ended

00:35:07,890 --> 00:35:12,180
up in two months or factoring for the

00:35:09,840 --> 00:35:15,030
whole code base because it wasn't so

00:35:12,180 --> 00:35:18,440
good that it wasn't that good that we

00:35:15,030 --> 00:35:18,440
fought it and

00:35:21,369 --> 00:35:25,900
take some time for refactoring in every

00:35:23,589 --> 00:35:29,140
sprint and a lot of people are using

00:35:25,900 --> 00:35:31,299
scrum or extreme programming so everyone

00:35:29,140 --> 00:35:34,509
is working in iterations and you should

00:35:31,299 --> 00:35:37,480
really take some times for example half

00:35:34,509 --> 00:35:40,690
a day every sprint to for refactoring

00:35:37,480 --> 00:35:43,480
and when you have with tools for example

00:35:40,690 --> 00:35:44,859
similar or code browser you can see

00:35:43,480 --> 00:35:47,740
where the problems are and you can

00:35:44,859 --> 00:35:51,160
improve the dream of every sprint mainly

00:35:47,740 --> 00:35:56,049
at the end of the sprint to avoid the

00:35:51,160 --> 00:36:01,980
technical depth and improve your code so

00:35:56,049 --> 00:36:01,980
I was too fast any questions

00:36:09,080 --> 00:36:16,950
the netbeans education for Sam yeah as a

00:36:14,610 --> 00:36:18,900
lot of people asking for netbeans my

00:36:16,950 --> 00:36:21,120
colleague is currently reading the

00:36:18,900 --> 00:36:25,640
NetBeans specifications about plugins

00:36:21,120 --> 00:36:25,640
and it should be an easy task I hope

00:36:26,960 --> 00:36:34,020
have you got any plans to hear ah how

00:36:31,800 --> 00:36:35,850
many plans to allow you to use something

00:36:34,020 --> 00:36:37,380
like cinder without using continued

00:36:35,850 --> 00:36:39,960
integration can you seem like you need

00:36:37,380 --> 00:36:41,760
to commit in order to find out that your

00:36:39,960 --> 00:36:42,990
cyclomatic complexity is too high all

00:36:41,760 --> 00:36:46,980
right at that bar you committed

00:36:42,990 --> 00:36:52,970
something this I used it to you as you

00:36:46,980 --> 00:36:56,550
can see I just look this is where normal

00:36:52,970 --> 00:36:59,040
this is on my laptop is filled with PHP

00:36:56,550 --> 00:37:04,860
code browser repository on my own laptop

00:36:59,040 --> 00:37:09,650
I have a bit folder it's very easy

00:37:04,860 --> 00:37:09,650
control you out or you can do it

00:37:22,250 --> 00:37:25,450
so pick enough oh

00:37:25,930 --> 00:37:31,300
so this is my code browser and we have a

00:37:29,230 --> 00:37:35,290
good file and everything you have to do

00:37:31,300 --> 00:37:42,930
is just doing an on task and then all

00:37:35,290 --> 00:37:49,540
the things i generated take some time so

00:37:42,930 --> 00:37:54,809
good for successful and now for example

00:37:49,540 --> 00:38:01,800
I can overlock fights for textile and

00:37:54,809 --> 00:38:01,800
can open it and now I have that example

00:38:01,980 --> 00:38:07,589
example the indie output

00:38:09,810 --> 00:38:17,350
between now so I can see where the

00:38:14,710 --> 00:38:19,570
changes locally do you have any plans to

00:38:17,350 --> 00:38:21,460
put a button on there too to do that

00:38:19,570 --> 00:38:24,310
kind of thing any plunge put a button on

00:38:21,460 --> 00:38:27,490
there to just kind of redo your checking

00:38:24,310 --> 00:38:29,260
I just purple you don't have to do it

00:38:27,490 --> 00:38:34,990
automatically it's automatically

00:38:29,260 --> 00:38:37,630
periodically every five minutes what it

00:38:34,990 --> 00:38:41,400
makes more sense if it continues

00:38:37,630 --> 00:38:45,630
integration server is doing the runs so

00:38:41,400 --> 00:38:45,630
because it was feeling it all the time

00:38:48,270 --> 00:38:56,530
yeah you you said about cinder working

00:38:52,600 --> 00:38:59,920
with the waves and then Julia and PDT

00:38:56,530 --> 00:39:02,950
yes they also work with optimum yes it's

00:38:59,920 --> 00:39:07,060
also the clips based is pure eclipse

00:39:02,950 --> 00:39:09,850
plugin plus working with every fork of

00:39:07,060 --> 00:39:12,160
eclipse so but it should work on it

00:39:09,850 --> 00:39:17,310
aparna didn't test it but just test it

00:39:12,160 --> 00:39:17,310
with PDT and same studio yes

00:39:23,540 --> 00:39:26,380
any more questions

00:39:27,920 --> 00:39:33,980
you thought about going to IntelliJ in

00:39:30,970 --> 00:39:35,780
phpstorm sorry if your thoughts we are

00:39:33,980 --> 00:39:40,160
building a plug-in further IntelliJ i am

00:39:35,780 --> 00:39:43,280
legend beast or man yet but I can talk

00:39:40,160 --> 00:39:47,360
to my colleague so we can get some time

00:39:43,280 --> 00:39:51,440
on it and I also using phpstorm at home

00:39:47,360 --> 00:39:58,940
because it's very nice to be possible

00:39:51,440 --> 00:40:01,900
it's all travel to its think it was the

00:39:58,940 --> 00:40:04,780
best friend yeah one or two cycles arm

00:40:01,900 --> 00:40:07,340
there's a pti project php-tools

00:40:04,780 --> 00:40:10,520
integration which takes please because

00:40:07,340 --> 00:40:12,740
if our PHP MVP HP depend and gives you a

00:40:10,520 --> 00:40:15,380
button that you requested inside your

00:40:12,740 --> 00:40:17,450
Eclipse space IE so you can configure

00:40:15,380 --> 00:40:19,070
all these tools and have them write

00:40:17,450 --> 00:40:21,380
their log file so specify the rectory

00:40:19,070 --> 00:40:24,220
and then have cinder pick up from that

00:40:21,380 --> 00:40:26,690
directory and ideally have PTI

00:40:24,220 --> 00:40:28,190
continuously around the analysis tools

00:40:26,690 --> 00:40:31,940
in the bright background while you are

00:40:28,190 --> 00:40:35,690
editing your coach just like Java tools

00:40:31,940 --> 00:40:38,300
to it and then the second side note as

00:40:35,690 --> 00:40:40,640
far as I know at least phpstorm is a

00:40:38,300 --> 00:40:42,170
commercial project so if they won't

00:40:40,640 --> 00:40:44,540
support for that they should implement

00:40:42,170 --> 00:40:50,420
it themselves or pay whoever is working

00:40:44,540 --> 00:40:52,280
on cinder and it's a good thing that may

00:40:50,420 --> 00:40:54,140
flowers doing this for I clips and it

00:40:52,280 --> 00:40:58,490
means for free because there's the

00:40:54,140 --> 00:41:00,050
access is open source behind that but

00:40:58,490 --> 00:41:03,070
you don't have to ever since suit is

00:41:00,050 --> 00:41:03,070
also commercial

00:41:04,300 --> 00:41:08,500
but you're building a cinder plugin for

00:41:06,520 --> 00:41:13,840
Eclipse base on which they are building

00:41:08,500 --> 00:41:15,370
their son so that is fine i know i mean

00:41:13,840 --> 00:41:17,620
i'm talking from the experience here

00:41:15,370 --> 00:41:20,620
that I every week get emails like why

00:41:17,620 --> 00:41:22,870
are you not writing the plug-in for

00:41:20,620 --> 00:41:25,090
phpunit for eclipse 5 and you know the

00:41:22,870 --> 00:41:30,340
one left right writes the plug-in for

00:41:25,090 --> 00:41:36,330
netbeans or some other IDE I don't want

00:41:30,340 --> 00:41:36,330
to do that I don't even use 19 so I know

00:41:37,470 --> 00:41:43,230
if this was also one of the main

00:41:40,240 --> 00:41:45,040
problems we have the Eclipse

00:41:43,230 --> 00:41:48,010
infrastructure is very well documented

00:41:45,040 --> 00:41:51,100
and I think this was the first of all

00:41:48,010 --> 00:41:56,820
program with netbeans it's very easy to

00:41:51,100 --> 00:41:59,380
implement a plugin for Eclipse and

00:41:56,820 --> 00:42:04,570
that's why we have a lot there are a lot

00:41:59,380 --> 00:42:06,370
of plugins nowadays for Eclipse and I

00:42:04,570 --> 00:42:08,940
think it's better documented when

00:42:06,370 --> 00:42:08,940
netbeans

00:42:20,819 --> 00:42:26,829
sure everything is PST license

00:42:24,579 --> 00:42:29,199
everything is free just contact me and

00:42:26,829 --> 00:42:32,919
you put everything back to the open

00:42:29,199 --> 00:42:35,559
source community yeah for example every

00:42:32,919 --> 00:42:41,109
guy who wrote Cinda is google time at

00:42:35,559 --> 00:42:44,619
mayflower on working on cinder so if you

00:42:41,109 --> 00:42:46,919
have patches or contribution you're

00:42:44,619 --> 00:42:46,919
lucky

00:42:59,170 --> 00:43:16,700
yes no the check is every five minutes

00:43:03,170 --> 00:43:19,870
for nokia and i'm not yet but it should

00:43:16,700 --> 00:43:19,870
be possible quite easy

00:43:23,510 --> 00:43:30,420
for example and we were working on a big

00:43:27,359 --> 00:43:35,070
project country with get and you're

00:43:30,420 --> 00:43:39,180
starting integration run every push to

00:43:35,070 --> 00:43:42,920
the couturier server and so it should

00:43:39,180 --> 00:43:42,920
work in this this way to

00:43:46,950 --> 00:43:53,160
the question was you mentioned every

00:43:50,640 --> 00:43:54,720
five minutes it can it can run but

00:43:53,160 --> 00:43:57,210
ideally is another gentleman mentioned

00:43:54,720 --> 00:43:59,250
it would be good if it ran when you

00:43:57,210 --> 00:44:01,829
commit say be using gay commit locally

00:43:59,250 --> 00:44:04,109
therefore you can see it run before you

00:44:01,829 --> 00:44:07,619
actually push it to the produce arm

00:44:04,109 --> 00:44:10,920
server yes so we can build it it comes

00:44:07,619 --> 00:44:14,130
after 21 minutes 0 which you have to

00:44:10,920 --> 00:44:23,310
write very fast code if one minute is

00:44:14,130 --> 00:44:26,820
not enough hi over here ah if there any

00:44:23,310 --> 00:44:29,820
case studies out there that would help

00:44:26,820 --> 00:44:33,420
me to convince my boss to commit the

00:44:29,820 --> 00:44:37,140
time for continuous improvement as test

00:44:33,420 --> 00:44:40,050
writing text tests and in all sorts of

00:44:37,140 --> 00:44:42,540
tools that will take some time to learn

00:44:40,050 --> 00:44:44,480
and to master and that means the

00:44:42,540 --> 00:44:49,349
business would have to take on the cost

00:44:44,480 --> 00:44:52,020
Shawn the slide it's very easy I know a

00:44:49,349 --> 00:44:56,099
lot of bosses saying hey when do we need

00:44:52,020 --> 00:44:58,260
refactoring they often need numbers in

00:44:56,099 --> 00:45:02,430
front of them yes but for example the

00:44:58,260 --> 00:45:05,670
tools generate numbers and for example

00:45:02,430 --> 00:45:09,089
if you if you need two weeks to add a

00:45:05,670 --> 00:45:12,540
button for a web application you are I

00:45:09,089 --> 00:45:17,810
think you're in this part of the graph

00:45:12,540 --> 00:45:22,560
and you can measure with all this stuff

00:45:17,810 --> 00:45:25,140
and you can see it for example if you if

00:45:22,560 --> 00:45:29,849
you read the outputs from the from

00:45:25,140 --> 00:45:34,950
Jenkins and you can see if your prob if

00:45:29,849 --> 00:45:37,079
your code place has big problems you can

00:45:34,950 --> 00:45:39,240
measure everything for example if you

00:45:37,079 --> 00:45:42,450
can measure how long does it take to fix

00:45:39,240 --> 00:45:45,839
a bug is it fixed in the same day it was

00:45:42,450 --> 00:45:48,869
reported or does the developer need four

00:45:45,839 --> 00:45:51,119
weeks to fix the smaller bug if I

00:45:48,869 --> 00:45:52,150
developer needs weeks fixing up a small

00:45:51,119 --> 00:45:57,270
bug

00:45:52,150 --> 00:45:59,920
so certainly the code is very crappy and

00:45:57,270 --> 00:46:05,400
example is it has a lot of side effects

00:45:59,920 --> 00:46:05,400
and you can measure that time

00:46:13,839 --> 00:46:18,489
I think I'd like to respond to that as

00:46:16,239 --> 00:46:20,920
well and since that you don't have to

00:46:18,489 --> 00:46:23,829
tell your boss you're doing this this is

00:46:20,920 --> 00:46:25,509
part of your job ensuring that the

00:46:23,829 --> 00:46:28,359
quality of your coat stays high it's

00:46:25,509 --> 00:46:31,239
just what you do as part of everything

00:46:28,359 --> 00:46:32,499
that you do I'm not quite clean on this

00:46:31,239 --> 00:46:34,719
whole you should spend half a day

00:46:32,499 --> 00:46:36,059
refactoring in a sprint kind of idea is

00:46:34,719 --> 00:46:38,890
you should spend all of your time

00:46:36,059 --> 00:46:41,499
writing code and part of writing code is

00:46:38,890 --> 00:46:44,410
ensuring that the quality of that cord

00:46:41,499 --> 00:46:46,210
stays hard so your boss does need to

00:46:44,410 --> 00:46:48,130
know about this it's just part of your

00:46:46,210 --> 00:46:50,589
job and he doesn't see it because it's

00:46:48,130 --> 00:46:53,229
trusting you I ve an example boss is

00:46:50,589 --> 00:46:59,319
looking in your display what you're

00:46:53,229 --> 00:47:07,869
doing if he see some ID they wouldn't

00:46:59,319 --> 00:47:09,460
understand another question these

00:47:07,869 --> 00:47:11,829
results that generated into the build

00:47:09,460 --> 00:47:13,839
directory there they're lost every time

00:47:11,829 --> 00:47:17,079
the next build runs is it possible to

00:47:13,839 --> 00:47:19,479
keep it to see the historic data I know

00:47:17,079 --> 00:47:21,400
Jenkins keep the the historic amount the

00:47:19,479 --> 00:47:23,920
past and failed I what about the code

00:47:21,400 --> 00:47:27,640
coverage in all the XML files reports

00:47:23,920 --> 00:47:31,299
yes their father Bob that had keeping

00:47:27,640 --> 00:47:33,579
the history we have one problem on our

00:47:31,299 --> 00:47:40,769
camp project for example we are creating

00:47:33,579 --> 00:47:44,289
16 gigabytes of artifacts per week and

00:47:40,769 --> 00:47:48,910
interpret the landscape it could be to

00:47:44,289 --> 00:47:51,519
move the old report out yes you can do

00:47:48,910 --> 00:47:53,859
that but we have 16 gigabytes per week

00:47:51,519 --> 00:47:57,190
the project is now running is it since

00:47:53,859 --> 00:47:59,349
October and I think we would produce one

00:47:57,190 --> 00:48:02,039
terabyte and who wants to read one

00:47:59,349 --> 00:48:02,039
terabyte of data

00:48:02,160 --> 00:48:06,710
I'm sure you answer the question

00:48:04,050 --> 00:48:10,950
although it doesn't resolve storage

00:48:06,710 --> 00:48:13,170
problem but there is also a a project

00:48:10,950 --> 00:48:14,670
called Sona which is a reporting

00:48:13,170 --> 00:48:17,640
platform which is specifically designed

00:48:14,670 --> 00:48:21,200
to solve this kind of problems there is

00:48:17,640 --> 00:48:24,540
a PHP plug-in which is now in version 03

00:48:21,200 --> 00:48:26,430
which allows you to basically we pulled

00:48:24,540 --> 00:48:28,100
all the change the database and show it

00:48:26,430 --> 00:48:31,110
in pretty graphs and stuff like that

00:48:28,100 --> 00:48:34,140
it's a very early version that does the

00:48:31,110 --> 00:48:36,900
job I'm I know it i no sooner there's

00:48:34,140 --> 00:48:41,870
one big problem so now needs movement

00:48:36,900 --> 00:48:41,870
and not anymore we have emerged in 2.6

00:48:42,710 --> 00:48:51,650
okay any more questions

00:48:52,760 --> 00:48:57,550

YouTube URL: https://www.youtube.com/watch?v=DwgZsaC5Fp4


