Title: PHP UK Conference 2011 - Advanced OO patterns, by Tobias Schlitt
Publication date: 2012-03-15
Playlist: PHP UK Conference 2011
Description: 
	
Captions: 
	00:00:02,540 --> 00:00:08,120
and welcome to my talk for those of you

00:00:06,410 --> 00:00:09,710
who cannot pronounce my last name

00:00:08,120 --> 00:00:11,150
probably just call me Toby's that's

00:00:09,710 --> 00:00:13,969
pretty much easier and it's pretty

00:00:11,150 --> 00:00:16,460
English actually before we start up on

00:00:13,969 --> 00:00:18,619
to excuse myself for my German accent

00:00:16,460 --> 00:00:20,149
I'm so sorry I'm not native

00:00:18,619 --> 00:00:22,279
english-speaking and has never been

00:00:20,149 --> 00:00:24,800
speaking in a native thing speaking

00:00:22,279 --> 00:00:29,329
country before so I do hope it's not too

00:00:24,800 --> 00:00:31,009
entertaining my accent yeah let's start

00:00:29,329 --> 00:00:33,500
with a little introduction first of all

00:00:31,009 --> 00:00:35,750
I have some some info about me so that

00:00:33,500 --> 00:00:39,290
you know we deal with in this talk of a

00:00:35,750 --> 00:00:41,390
jury in computer science you know so

00:00:39,290 --> 00:00:44,680
many people still joining it's all right

00:00:41,390 --> 00:00:44,680
oh wait another minute maybe

00:01:15,150 --> 00:01:18,650
it seems like everybody had to grab

00:01:16,980 --> 00:01:20,850
coffee right before the last fall so

00:01:18,650 --> 00:01:25,440
that people don't fall asleep i'm happy

00:01:20,850 --> 00:01:28,620
very happy about that one actually okay

00:01:25,440 --> 00:01:34,400
let's start again the short version damn

00:01:28,620 --> 00:01:37,790
still people hell mean are we up guys

00:01:34,400 --> 00:01:37,790
are you sure

00:02:40,440 --> 00:02:47,110
okay last order to the ball the doors

00:02:43,150 --> 00:02:49,120
are already closed ah yeah thanks a lot

00:02:47,110 --> 00:02:50,950
everybody for coming here again I

00:02:49,120 --> 00:02:53,019
already started like three minutes ago

00:02:50,950 --> 00:02:55,690
but no worries I can just start over

00:02:53,019 --> 00:02:58,349
again I'm Toby and I will talk today

00:02:55,690 --> 00:03:01,450
about advanced object oriented parents

00:02:58,349 --> 00:03:05,290
still people creeping in here now you

00:03:01,450 --> 00:03:06,640
should lock the door so first of all I'm

00:03:05,290 --> 00:03:10,090
giving a little introduction some

00:03:06,640 --> 00:03:12,069
information on myself as we saw my name

00:03:10,090 --> 00:03:14,620
is to be a slit slit is quite hard to

00:03:12,069 --> 00:03:16,629
pronounce so just call me Toby I got a

00:03:14,620 --> 00:03:19,060
degree in computer science since like

00:03:16,629 --> 00:03:21,519
six months or so I have more than 10

00:03:19,060 --> 00:03:24,970
years of professional experience with

00:03:21,519 --> 00:03:26,890
PHP I'm also highly open-source

00:03:24,970 --> 00:03:28,989
enthusiast I'm working on the patch

00:03:26,890 --> 00:03:30,879
physical components project mainly but

00:03:28,989 --> 00:03:32,590
also on our bigs which is our Beach

00:03:30,879 --> 00:03:34,870
wrecker I will show some cold from that

00:03:32,590 --> 00:03:36,250
one actually later I'm also contributing

00:03:34,870 --> 00:03:38,920
to various other projects like a

00:03:36,250 --> 00:03:41,440
mattress for phpunit and whatever stuff

00:03:38,920 --> 00:03:43,180
there is in the open source world I also

00:03:41,440 --> 00:03:44,560
found in my own company together with

00:03:43,180 --> 00:03:47,200
two of my friends last year which is

00:03:44,560 --> 00:03:49,150
named wafu no it's not QA flu and it's

00:03:47,200 --> 00:03:52,870
not cuff with Quaffle we like to

00:03:49,150 --> 00:03:55,680
pronounce it and yeah what we do is we

00:03:52,870 --> 00:03:58,840
help people to produce more high-quality

00:03:55,680 --> 00:04:01,000
PHP code this ranges from teaching

00:03:58,840 --> 00:04:03,970
correct object oriented design and

00:04:01,000 --> 00:04:05,919
programming to stuff like unit testing

00:04:03,970 --> 00:04:08,139
and continuous integration and

00:04:05,919 --> 00:04:09,819
continuous deployment configuration

00:04:08,139 --> 00:04:12,130
management and all these things which

00:04:09,819 --> 00:04:14,410
which belong to really high quality life

00:04:12,130 --> 00:04:16,599
cycle of PHP applications so if you are

00:04:14,410 --> 00:04:20,109
in need for such things don't hesitate

00:04:16,599 --> 00:04:22,900
to ask me after the talk right a little

00:04:20,109 --> 00:04:24,669
disclaimer about this talk I'm not

00:04:22,900 --> 00:04:25,990
really sure what people expect from this

00:04:24,669 --> 00:04:28,870
talking to help nobody will be

00:04:25,990 --> 00:04:32,349
disappointed but this tour cannot be in

00:04:28,870 --> 00:04:33,820
that in my abstract I already told you

00:04:32,349 --> 00:04:35,889
that I will be talking about at least

00:04:33,820 --> 00:04:36,710
two really really big and important

00:04:35,889 --> 00:04:38,060
patterns

00:04:36,710 --> 00:04:40,820
and a promise that there will be more

00:04:38,060 --> 00:04:44,660
patterns in this talk but actually when

00:04:40,820 --> 00:04:46,640
creating the slides I problems putting

00:04:44,660 --> 00:04:49,970
in more and more patterns so we will see

00:04:46,640 --> 00:04:52,280
a little bit more than proposed in the

00:04:49,970 --> 00:04:54,230
abstract but not that much and we won't

00:04:52,280 --> 00:04:57,920
go into really really detail on these

00:04:54,230 --> 00:05:00,800
things but I will still show some of

00:04:57,920 --> 00:05:03,350
course and code for you this talk shall

00:05:00,800 --> 00:05:05,420
basically inspire you so who have you

00:05:03,350 --> 00:05:09,110
has been using object-oriented patterns

00:05:05,420 --> 00:05:10,850
in development okay everybody has done

00:05:09,110 --> 00:05:12,830
that that is really cool I hope these

00:05:10,850 --> 00:05:14,870
parents i'm showing you today will also

00:05:12,830 --> 00:05:17,480
inspire you to make use of them but

00:05:14,870 --> 00:05:20,450
we'll come to that in a bit i will not

00:05:17,480 --> 00:05:24,740
show you any uml diagrams who likes uml

00:05:20,450 --> 00:05:27,020
diagrams okay who hates uml diagrams

00:05:24,740 --> 00:05:29,270
that is pretty good that is why I don't

00:05:27,020 --> 00:05:31,610
show you in our diagrams here I'm better

00:05:29,270 --> 00:05:34,310
than showing you some class steps and

00:05:31,610 --> 00:05:35,900
some some real PHP code so that you get

00:05:34,310 --> 00:05:39,740
a real impression on what looks like

00:05:35,900 --> 00:05:43,040
when when coding such stuff yeah that is

00:05:39,740 --> 00:05:45,530
what I'm saying here actually and one

00:05:43,040 --> 00:05:47,720
issue is this talking seriously harm

00:05:45,530 --> 00:05:49,490
your coding habit so if you if you get

00:05:47,720 --> 00:05:51,230
really on a trip with doing like

00:05:49,490 --> 00:05:53,660
dependency injection this can really

00:05:51,230 --> 00:05:55,280
harm your habits like you will not going

00:05:53,660 --> 00:05:58,190
to do any spaghetti code anymore we

00:05:55,280 --> 00:06:00,350
write flexible okay I should not promise

00:05:58,190 --> 00:06:04,250
too much here so don't get this point

00:06:00,350 --> 00:06:06,470
later anybody has a clue what parlons

00:06:04,250 --> 00:06:08,270
basically are our parents universal

00:06:06,470 --> 00:06:11,780
solutions who would agree with lace

00:06:08,270 --> 00:06:13,280
patterns are universal solutions that is

00:06:11,780 --> 00:06:14,930
pretty good that nobody agrees with that

00:06:13,280 --> 00:06:18,740
one because I considered it really

00:06:14,930 --> 00:06:20,450
incorrect our pattern good habits who

00:06:18,740 --> 00:06:23,170
agrees with patterns are good habits

00:06:20,450 --> 00:06:25,760
just raise your hand don't be shy I

00:06:23,170 --> 00:06:27,530
won't say that too because a good habit

00:06:25,760 --> 00:06:30,230
is what you always want to actually

00:06:27,530 --> 00:06:32,150
actually realize in everyday life so

00:06:30,230 --> 00:06:33,680
nobody wants to behave bad so everybody

00:06:32,150 --> 00:06:35,600
wants to behave good and people start

00:06:33,680 --> 00:06:38,540
using patterns everywhere and all around

00:06:35,600 --> 00:06:40,970
and I even hear people saying yes that

00:06:38,540 --> 00:06:43,070
Coke must be so high quality I I used

00:06:40,970 --> 00:06:43,800
every Tanner and I ever read about in

00:06:43,070 --> 00:06:46,349
that close

00:06:43,800 --> 00:06:48,090
really really nice now that's not not

00:06:46,349 --> 00:06:52,650
really a good idea who thinks that

00:06:48,090 --> 00:06:54,569
patterns are coding templates I won't

00:06:52,650 --> 00:06:56,220
sing so either parents I'm not coding

00:06:54,569 --> 00:06:57,780
templates usually if you read a book

00:06:56,220 --> 00:06:59,729
about parents they won't even show you

00:06:57,780 --> 00:07:01,650
code there are some really good books

00:06:59,729 --> 00:07:03,780
would give you code examples but it's

00:07:01,650 --> 00:07:06,120
not like you can just take a template

00:07:03,780 --> 00:07:08,550
putting some names and whatever variable

00:07:06,120 --> 00:07:10,409
values and then it works out this is not

00:07:08,550 --> 00:07:12,479
my impression of what parents are so

00:07:10,409 --> 00:07:14,789
I've been written out here what my

00:07:12,479 --> 00:07:16,919
impression is what patterns actually our

00:07:14,789 --> 00:07:19,740
parents our first of all names so

00:07:16,919 --> 00:07:22,259
pattern names help us developers to

00:07:19,740 --> 00:07:23,909
communicate among each other it's just

00:07:22,259 --> 00:07:26,159
like you have an idea in mind and

00:07:23,909 --> 00:07:28,050
instead of explaining it like half an

00:07:26,159 --> 00:07:30,840
hour to your colleague then you do that

00:07:28,050 --> 00:07:32,610
and that and that all the pros and these

00:07:30,840 --> 00:07:34,379
are the cons you just know the pattern

00:07:32,610 --> 00:07:36,389
you say okay I'm using dependency

00:07:34,379 --> 00:07:38,879
injection here or I'm using a factory

00:07:36,389 --> 00:07:40,319
here and if the other colleague also

00:07:38,879 --> 00:07:42,330
knows the name that he knows what you

00:07:40,319 --> 00:07:44,940
are talking about and he's in mind what

00:07:42,330 --> 00:07:47,430
idea is behind that so for me patterns

00:07:44,940 --> 00:07:50,279
are names for proven ideas how a certain

00:07:47,430 --> 00:07:53,849
class of problems can be solved who

00:07:50,279 --> 00:07:58,919
would agree with that one actually okay

00:07:53,849 --> 00:08:00,930
pretty cool good indifference that

00:07:58,919 --> 00:08:03,419
parents cannot be applied to every

00:08:00,930 --> 00:08:05,099
problem it's not like in every problem

00:08:03,419 --> 00:08:07,080
we will face there exists a pattern to

00:08:05,099 --> 00:08:09,180
solve it whereas I'm not directly

00:08:07,080 --> 00:08:11,370
transferable to cold so the code which

00:08:09,180 --> 00:08:13,560
you will see in my presentation only

00:08:11,370 --> 00:08:15,300
gives you impression and idea how a

00:08:13,560 --> 00:08:17,550
pattern can be realized how you actually

00:08:15,300 --> 00:08:19,440
realize the pattern in real life in your

00:08:17,550 --> 00:08:21,750
project is really really really

00:08:19,440 --> 00:08:23,250
dependent on your concrete problem and

00:08:21,750 --> 00:08:25,500
the concrete solutions you think they're

00:08:23,250 --> 00:08:27,599
and patterns are not always the best

00:08:25,500 --> 00:08:31,289
solution that just as a side effect but

00:08:27,599 --> 00:08:33,719
I think everybody knows that good how

00:08:31,289 --> 00:08:36,020
can we classify parents rough overview

00:08:33,719 --> 00:08:38,070
you have creational patterns

00:08:36,020 --> 00:08:39,469
retroperitoneal patterns and the new

00:08:38,070 --> 00:08:42,750
shiny thing is that you have

00:08:39,469 --> 00:08:45,029
architectural patterns but in the end

00:08:42,750 --> 00:08:47,490
coming back to my sentence patterns are

00:08:45,029 --> 00:08:49,050
just names for ideas so you can consider

00:08:47,490 --> 00:08:50,970
everything basically a pattern

00:08:49,050 --> 00:08:51,390
everything every coding idea you have

00:08:50,970 --> 00:08:52,920
can

00:08:51,390 --> 00:08:55,050
made into a pattern by just giving it a

00:08:52,920 --> 00:08:57,480
name and explaining it to people so I

00:08:55,050 --> 00:09:00,810
don't give much on these classifications

00:08:57,480 --> 00:09:03,570
of patterns I've put together some of

00:09:00,810 --> 00:09:05,100
the most known patterns I think so woof

00:09:03,570 --> 00:09:09,030
you has been using signal observer

00:09:05,100 --> 00:09:12,600
pattern okay quite a few who has been

00:09:09,030 --> 00:09:19,620
using the iterator pattern ah some more

00:09:12,600 --> 00:09:21,210
visitor yeah adapter factory yeah

00:09:19,620 --> 00:09:25,830
thought that it wasn't the most common

00:09:21,210 --> 00:09:27,450
and who has been using single that's a

00:09:25,830 --> 00:09:29,970
pretty good signature single if you're

00:09:27,450 --> 00:09:32,760
using Singleton's please remove them

00:09:29,970 --> 00:09:35,430
from all of your Pelt singles are so bad

00:09:32,760 --> 00:09:36,780
the most most crucial problem with

00:09:35,430 --> 00:09:38,550
England's is that they introduce a

00:09:36,780 --> 00:09:41,220
global state in your object oriented

00:09:38,550 --> 00:09:42,990
application and the global state is just

00:09:41,220 --> 00:09:45,420
what we wanted to get rid off when

00:09:42,990 --> 00:09:46,740
starting to program object oriented so

00:09:45,420 --> 00:09:48,630
please get rid of all of your

00:09:46,740 --> 00:09:50,610
Singleton's and especially if you want

00:09:48,630 --> 00:09:53,850
to get into unit testing signals are

00:09:50,610 --> 00:09:55,770
really really a mess for testing but we

00:09:53,850 --> 00:09:58,710
will see in a bit where where this comes

00:09:55,770 --> 00:10:00,480
into place okay um the first thing I

00:09:58,710 --> 00:10:02,490
want to talk about today is dependency

00:10:00,480 --> 00:10:06,120
injection who are views using dependency

00:10:02,490 --> 00:10:08,280
injection actually okay I think more of

00:10:06,120 --> 00:10:10,920
you people are actually using dependency

00:10:08,280 --> 00:10:15,720
injection without knowing the name for

00:10:10,920 --> 00:10:18,960
that pattern if we look at the goals of

00:10:15,720 --> 00:10:20,850
good object oriented code then we have

00:10:18,960 --> 00:10:22,320
quite some some attributes that it

00:10:20,850 --> 00:10:25,590
should have good object oriented code

00:10:22,320 --> 00:10:28,110
should be modular so you should have so

00:10:25,590 --> 00:10:29,820
small units of cold which are considered

00:10:28,110 --> 00:10:32,790
a module which have a clearly defined

00:10:29,820 --> 00:10:35,790
API which are easily to maintain which

00:10:32,790 --> 00:10:37,820
encapsulated surgeon certain aspect of

00:10:35,790 --> 00:10:40,260
your application so that we have nice

00:10:37,820 --> 00:10:42,720
small pieces of code which you need to

00:10:40,260 --> 00:10:45,030
maintain later on also object oriented

00:10:42,720 --> 00:10:47,250
code should be flexible you should not

00:10:45,030 --> 00:10:50,190
have to change the whole code base just

00:10:47,250 --> 00:10:52,170
to realize a new shiny feature for your

00:10:50,190 --> 00:10:53,730
client or just to change a behavior your

00:10:52,170 --> 00:10:56,340
client expects to be different nowadays

00:10:53,730 --> 00:10:58,320
and object-oriented code should be

00:10:56,340 --> 00:11:00,160
reusable that is one of the really

00:10:58,320 --> 00:11:02,470
crucial aspects of

00:11:00,160 --> 00:11:04,930
oriented code that you can simply take

00:11:02,470 --> 00:11:06,430
code from one project and reuse it in

00:11:04,930 --> 00:11:09,910
another project because it means a

00:11:06,430 --> 00:11:12,190
similar functionality and nowadays code

00:11:09,910 --> 00:11:15,970
should also be testable review is using

00:11:12,190 --> 00:11:17,589
unit testing in daily work that is

00:11:15,970 --> 00:11:19,990
pretty good so you're all interested in

00:11:17,589 --> 00:11:21,879
testable code actually and dependency

00:11:19,990 --> 00:11:25,509
injection helps you to bribe testable

00:11:21,879 --> 00:11:28,930
code finally good object-oriented design

00:11:25,509 --> 00:11:32,259
is meant to be solid who knows the solid

00:11:28,930 --> 00:11:34,209
principles okay very few of you I was

00:11:32,259 --> 00:11:36,310
thinking about hanging in a talk on that

00:11:34,209 --> 00:11:38,529
one so I should give that Tong actually

00:11:36,310 --> 00:11:40,930
next year but if you're interested on

00:11:38,529 --> 00:11:43,709
that this is the URL where Uncle Bob

00:11:40,930 --> 00:11:47,110
explains the fundamental principles of

00:11:43,709 --> 00:11:48,939
object-oriented design like the

00:11:47,110 --> 00:11:50,379
open/close principle for example it's

00:11:48,939 --> 00:11:51,819
pretty interesting to read that it's

00:11:50,379 --> 00:11:54,040
also very theoretical but if you

00:11:51,819 --> 00:11:56,019
understood these principles once and you

00:11:54,040 --> 00:11:59,490
are applying them to your code it brings

00:11:56,019 --> 00:12:03,459
you a large step forward actually good

00:11:59,490 --> 00:12:06,100
um here's some PHP code which is object

00:12:03,459 --> 00:12:08,410
oriented it's very few cool but it

00:12:06,100 --> 00:12:10,269
explains what I want to show you we have

00:12:08,410 --> 00:12:12,790
a message dispatcher and this message

00:12:10,269 --> 00:12:15,699
dispatcher is meant yet to dispatch some

00:12:12,790 --> 00:12:17,980
messages if you whatever call a sent

00:12:15,699 --> 00:12:20,019
message method it will take some magic

00:12:17,980 --> 00:12:22,750
to deter mined okay we have to send this

00:12:20,019 --> 00:12:25,449
message and we'll send it either to each

00:12:22,750 --> 00:12:29,769
other servers or a male messenger or it

00:12:25,449 --> 00:12:32,980
will send it to both and yeah in order

00:12:29,769 --> 00:12:35,019
to realize that we have a male messenger

00:12:32,980 --> 00:12:37,149
implements messenger so these things

00:12:35,019 --> 00:12:39,850
here implement a common interface who a

00:12:37,149 --> 00:12:43,569
few sees an issue with that code it's

00:12:39,850 --> 00:12:48,880
nice object-oriented okay anybody just

00:12:43,569 --> 00:12:51,730
charlie what's the issue yes exactly and

00:12:48,880 --> 00:12:53,980
hard condit dependencies Magnus code

00:12:51,730 --> 00:12:55,930
inflexible if you want to reuse the

00:12:53,980 --> 00:12:58,629
message dispatcher in another project

00:12:55,930 --> 00:13:01,029
and this project should not send Chopper

00:12:58,629 --> 00:13:03,639
messages but whatever I skew messages or

00:13:01,029 --> 00:13:05,470
lock to some some Loctite or something

00:13:03,639 --> 00:13:07,720
you cannot easily do that

00:13:05,470 --> 00:13:09,730
to change your classes actively you need

00:13:07,720 --> 00:13:11,980
to change coach we have runs written and

00:13:09,730 --> 00:13:13,810
that's a thing one would like to avoid

00:13:11,980 --> 00:13:16,000
an object-oriented program whenever

00:13:13,810 --> 00:13:18,190
possible whenever possible of course

00:13:16,000 --> 00:13:20,710
it's not always possible but you should

00:13:18,190 --> 00:13:22,720
try to avoid that as much as possible so

00:13:20,710 --> 00:13:26,260
it's not flexible you cannot exchange

00:13:22,720 --> 00:13:28,240
these messengers in here and that

00:13:26,260 --> 00:13:31,030
therefore it's also not really reusable

00:13:28,240 --> 00:13:33,130
it's also hardly testable so if you're

00:13:31,030 --> 00:13:35,680
writing unit tests and your messenger is

00:13:33,130 --> 00:13:37,360
always sending email messages in general

00:13:35,680 --> 00:13:39,160
messages to your colleagues that's not

00:13:37,360 --> 00:13:40,810
very good every time you run your urine

00:13:39,160 --> 00:13:43,450
test receiving lots and lots of emails

00:13:40,810 --> 00:13:47,650
it's not a very nice idea so it's also

00:13:43,450 --> 00:13:51,280
Harvey testable this code actually shows

00:13:47,650 --> 00:13:53,740
you how it can be done cleaner I will go

00:13:51,280 --> 00:13:56,740
through that code in small steps because

00:13:53,740 --> 00:13:59,710
it's really a complex structure here so

00:13:56,740 --> 00:14:01,960
we have our message dispatcher again and

00:13:59,710 --> 00:14:04,150
this message dispatcher receives an

00:14:01,960 --> 00:14:07,060
array of messengers which implement the

00:14:04,150 --> 00:14:10,210
messenger interface so here now we can

00:14:07,060 --> 00:14:11,770
replace the messengers just by arbitrary

00:14:10,210 --> 00:14:14,190
messages we implement maybe an hour

00:14:11,770 --> 00:14:16,690
messenger for testing or something else

00:14:14,190 --> 00:14:19,390
the mail messenger in itself also

00:14:16,690 --> 00:14:21,820
receives some some transportation class

00:14:19,390 --> 00:14:24,100
so it's using an SMG pd transportation

00:14:21,820 --> 00:14:26,020
to send email to smtp and it also

00:14:24,100 --> 00:14:28,420
receives the lover and this longer is

00:14:26,020 --> 00:14:30,370
also configurable it receives a logging

00:14:28,420 --> 00:14:33,910
dispatcher and this one receives an

00:14:30,370 --> 00:14:35,710
array of a lot mechanisms so it's very

00:14:33,910 --> 00:14:37,750
high flexible cold here you can

00:14:35,710 --> 00:14:39,520
configure it whatever you would like to

00:14:37,750 --> 00:14:42,400
do you can test the logger without

00:14:39,520 --> 00:14:43,990
actually logging too far to the disk you

00:14:42,400 --> 00:14:46,150
can test the mail messenger with act

00:14:43,990 --> 00:14:47,650
without actually sending a mail you get

00:14:46,150 --> 00:14:49,570
just the message dispatcher without

00:14:47,650 --> 00:14:51,280
sending Java messages so this is

00:14:49,570 --> 00:14:54,610
basically what you call dependency

00:14:51,280 --> 00:14:56,260
injection you inject dependencies from

00:14:54,610 --> 00:14:58,930
the outside through the constructor or

00:14:56,260 --> 00:15:02,020
maybe through a dedicated set method or

00:14:58,930 --> 00:15:04,570
an options area something else and that

00:15:02,020 --> 00:15:08,080
is what what the PHP developers

00:15:04,570 --> 00:15:09,580
understand on dependency injection who

00:15:08,080 --> 00:15:13,810
is wondering now that dependency

00:15:09,580 --> 00:15:18,910
injection is actually so easy okay very

00:15:13,810 --> 00:15:20,740
good yeah the process of dependency

00:15:18,910 --> 00:15:22,780
injection is that you get flexibility

00:15:20,740 --> 00:15:25,480
reusability modularity and testability

00:15:22,780 --> 00:15:28,360
that was what we discussed right a few

00:15:25,480 --> 00:15:30,760
minutes ago but there are also some cons

00:15:28,360 --> 00:15:32,590
in that approach one thing is you get a

00:15:30,760 --> 00:15:34,900
really complex object graph so if you

00:15:32,590 --> 00:15:37,350
look at that stuff it's only a single

00:15:34,900 --> 00:15:39,970
really tiny module the message

00:15:37,350 --> 00:15:42,610
dispatcher which is used in some larger

00:15:39,970 --> 00:15:45,010
object oriented context like you won't

00:15:42,610 --> 00:15:46,720
write an application which only consists

00:15:45,010 --> 00:15:49,000
of a message dispatcher but you would

00:15:46,720 --> 00:15:51,450
need more and more and more objects so

00:15:49,000 --> 00:15:54,010
if you use dependency injection

00:15:51,450 --> 00:15:56,860
consequently you will come up with

00:15:54,010 --> 00:15:58,630
really complex complex object graphs

00:15:56,860 --> 00:16:02,020
which need to be created somewhere in

00:15:58,630 --> 00:16:03,310
your application actually another point

00:16:02,020 --> 00:16:05,440
is that you will get really long

00:16:03,310 --> 00:16:07,600
parameter lists so if you have a

00:16:05,440 --> 00:16:09,610
constructor or some more complex object

00:16:07,600 --> 00:16:12,550
and you need to inject a database

00:16:09,610 --> 00:16:14,860
connection a logger a mail facilities

00:16:12,550 --> 00:16:16,870
and whatever you get huge constructors

00:16:14,860 --> 00:16:18,970
or you get lots of satin methods to just

00:16:16,870 --> 00:16:20,740
inject the code there it's also not

00:16:18,970 --> 00:16:23,110
really nicer that all over your

00:16:20,740 --> 00:16:26,410
application code and we have quite some

00:16:23,110 --> 00:16:27,820
object palace so as you can see here how

00:16:26,410 --> 00:16:29,830
many objects that we create we have the

00:16:27,820 --> 00:16:31,720
message dispatcher the java messenger

00:16:29,830 --> 00:16:33,880
the mail messenger the smtp transporter

00:16:31,720 --> 00:16:35,470
lock dispatcher the this lock lager and

00:16:33,880 --> 00:16:37,450
the filesystem loggers like seven

00:16:35,470 --> 00:16:41,230
objects just to realize a message

00:16:37,450 --> 00:16:44,320
dispatcher so these are quite some cons

00:16:41,230 --> 00:16:45,940
on dependency injection however there is

00:16:44,320 --> 00:16:47,920
a nice little thing which you can

00:16:45,940 --> 00:16:49,390
implement to make it more easy to use

00:16:47,920 --> 00:16:51,070
dependency injection over your

00:16:49,390 --> 00:16:53,320
application and that is called the

00:16:51,070 --> 00:16:55,630
so-called dependency injection container

00:16:53,320 --> 00:16:59,280
who's been using a dependency injection

00:16:55,630 --> 00:17:01,840
container okay not that many people

00:16:59,280 --> 00:17:05,530
these container things have their

00:17:01,840 --> 00:17:07,810
origins in the Java wolf Java people

00:17:05,530 --> 00:17:09,140
have been very keen in the past years of

00:17:07,810 --> 00:17:11,780
using dependency injection

00:17:09,140 --> 00:17:13,339
everywhere they bring it even to that

00:17:11,780 --> 00:17:15,860
level that you configure your

00:17:13,339 --> 00:17:18,260
applications will large XML file which

00:17:15,860 --> 00:17:19,910
tells ok create this object create this

00:17:18,260 --> 00:17:21,740
object create this object clear this

00:17:19,910 --> 00:17:23,510
object and then magically all these

00:17:21,740 --> 00:17:25,940
objects are injected into their

00:17:23,510 --> 00:17:27,770
applications it's like really fancy but

00:17:25,940 --> 00:17:29,960
in the end the dependency injection

00:17:27,770 --> 00:17:33,080
container is nothing more than that you

00:17:29,960 --> 00:17:34,790
have a class with some properties you

00:17:33,080 --> 00:17:38,000
can set some object into their

00:17:34,790 --> 00:17:40,250
properties and then you deliver an

00:17:38,000 --> 00:17:42,590
instance of that dependency injection

00:17:40,250 --> 00:17:45,800
container into your application and your

00:17:42,590 --> 00:17:47,750
objects can grab stuff from it like they

00:17:45,800 --> 00:17:50,420
can get a message dispatcher or they can

00:17:47,750 --> 00:17:52,280
get an order so it's that simple you

00:17:50,420 --> 00:17:53,690
could figure your application by setting

00:17:52,280 --> 00:17:55,820
stuff into the dependency injection

00:17:53,690 --> 00:17:58,340
container and deliver that dependency

00:17:55,820 --> 00:18:00,380
injection container to your application

00:17:58,340 --> 00:18:02,270
logic like to your controllers or

00:18:00,380 --> 00:18:05,360
something like that I will have a more

00:18:02,270 --> 00:18:07,490
advanced example later on but in the end

00:18:05,360 --> 00:18:10,310
dependency injection containers are not

00:18:07,490 --> 00:18:14,870
more than that so it's pretty easy isn't

00:18:10,310 --> 00:18:19,550
it who thinks it's easy okay who has

00:18:14,870 --> 00:18:20,960
already been falling asleep okay since I

00:18:19,550 --> 00:18:23,960
hear your last thing I think you're not

00:18:20,960 --> 00:18:25,900
falling asleep that is pretty good any

00:18:23,960 --> 00:18:34,490
questions so far before we go to the

00:18:25,900 --> 00:18:37,550
next topic in quotes yeah please it's

00:18:34,490 --> 00:18:38,840
like yeah the difference between service

00:18:37,550 --> 00:18:41,620
locator and dependency injection

00:18:38,840 --> 00:18:43,580
container is really fluid I think

00:18:41,620 --> 00:18:45,860
dependency injection is nothing more

00:18:43,580 --> 00:18:48,160
than delivering objects in a huge

00:18:45,860 --> 00:18:54,860
collection and a service locator is yeah

00:18:48,160 --> 00:19:00,080
nothing really other yeah let's chat

00:18:54,860 --> 00:19:01,910
about this and we're okay move you has

00:19:00,080 --> 00:19:06,590
been using lazy initialization in a

00:19:01,910 --> 00:19:09,620
project ok so I hope I don't bore you

00:19:06,590 --> 00:19:11,990
with this one and one thing especially

00:19:09,620 --> 00:19:15,520
if you're using such complex and flag

00:19:11,990 --> 00:19:18,110
flag or object oriented structures is

00:19:15,520 --> 00:19:18,600
yeah you have complex structures and

00:19:18,110 --> 00:19:20,789
bill

00:19:18,600 --> 00:19:22,890
up the whole object graph is really time

00:19:20,789 --> 00:19:24,840
consuming it's not like I want to go to

00:19:22,890 --> 00:19:27,120
the micro optimization level and teach

00:19:24,840 --> 00:19:30,510
people yeah you should not create large

00:19:27,120 --> 00:19:32,340
object structures but in the end it is

00:19:30,510 --> 00:19:33,990
time consuming to build up object

00:19:32,340 --> 00:19:37,200
structures like for example ez publish

00:19:33,990 --> 00:19:39,539
or other big projects use them and it's

00:19:37,200 --> 00:19:41,190
also memory consuming that bigger since

00:19:39,539 --> 00:19:44,250
you need to create these objects or a

00:19:41,190 --> 00:19:45,990
memory the question here is do you

00:19:44,250 --> 00:19:47,910
really need all of the objects you've

00:19:45,990 --> 00:19:49,650
created in every request it's the

00:19:47,910 --> 00:19:52,169
messaging dispatcher which we just saw

00:19:49,650 --> 00:19:55,080
really needed in a request or can we

00:19:52,169 --> 00:19:56,280
just instantiate it in the places where

00:19:55,080 --> 00:19:57,960
it's actually needed but if you

00:19:56,280 --> 00:20:00,030
instantiate it in the places where it's

00:19:57,960 --> 00:20:01,530
actually needed we can't use something

00:20:00,030 --> 00:20:04,320
like a dependency injection container

00:20:01,530 --> 00:20:06,059
actually because he then would mean to

00:20:04,320 --> 00:20:07,590
create that in the code inside your

00:20:06,059 --> 00:20:10,230
controller when you just need it and

00:20:07,590 --> 00:20:12,900
that's also not desired so the idea is

00:20:10,230 --> 00:20:14,909
to delay the innocent initialization of

00:20:12,900 --> 00:20:20,010
objects to when they are needed for the

00:20:14,909 --> 00:20:21,690
first time and this example is also

00:20:20,010 --> 00:20:23,220
pretty straightforward like the really

00:20:21,690 --> 00:20:26,100
small dependency injection container

00:20:23,220 --> 00:20:28,770
which I just showed you it's a class

00:20:26,100 --> 00:20:30,840
called database initializer and instead

00:20:28,770 --> 00:20:32,960
of delivering your database connection

00:20:30,840 --> 00:20:35,309
which might have whatever huge

00:20:32,960 --> 00:20:38,220
properties inside it maybe it has some

00:20:35,309 --> 00:20:39,750
SQL abstraction or some templating

00:20:38,220 --> 00:20:41,760
objects and whatever you may need in

00:20:39,750 --> 00:20:45,179
your database connection you deliver the

00:20:41,760 --> 00:20:48,480
database initializer to your application

00:20:45,179 --> 00:20:50,549
classes and this database initializer

00:20:48,480 --> 00:20:52,559
knows how to create a database so you

00:20:50,549 --> 00:20:54,450
deliberate the data source name or

00:20:52,559 --> 00:20:56,700
whatever the database host and the port

00:20:54,450 --> 00:20:59,220
and user name and whatever you like and

00:20:56,700 --> 00:21:01,440
at the first time if some object calls

00:20:59,220 --> 00:21:03,510
the get database function it looks

00:21:01,440 --> 00:21:05,580
inside do I already have a database

00:21:03,510 --> 00:21:07,620
connection created if not I would create

00:21:05,580 --> 00:21:09,799
one and then I will deliver it to you so

00:21:07,620 --> 00:21:12,840
you delay the initialization of the

00:21:09,799 --> 00:21:15,510
highly complex database object or highly

00:21:12,840 --> 00:21:16,080
complex mail sender object or templating

00:21:15,510 --> 00:21:18,330
engine

00:21:16,080 --> 00:21:20,580
whatever until you really need that

00:21:18,330 --> 00:21:22,620
stuff so in case you just need to

00:21:20,580 --> 00:21:25,769
display an arrow to the user because he

00:21:22,620 --> 00:21:27,299
has whatever are filled out form

00:21:25,769 --> 00:21:28,919
incorrectly then you don't need a

00:21:27,299 --> 00:21:30,419
database connection and you won't create

00:21:28,919 --> 00:21:32,640
the database connection actually you

00:21:30,419 --> 00:21:36,149
only have the slim database initializer

00:21:32,640 --> 00:21:38,399
object which is has a very low memory

00:21:36,149 --> 00:21:40,950
footprint it's very easy and simple to

00:21:38,399 --> 00:21:42,510
create and once you meet the database

00:21:40,950 --> 00:21:44,100
connection it will create it for you in

00:21:42,510 --> 00:21:46,110
the background without losing the

00:21:44,100 --> 00:21:55,200
flexibility of replacing the database

00:21:46,110 --> 00:21:57,240
connection and stuff okay so one nice

00:21:55,200 --> 00:21:58,950
idea is now to combine the ideas of

00:21:57,240 --> 00:22:01,710
dependency injection and lazy

00:21:58,950 --> 00:22:03,720
initialization what we actually want to

00:22:01,710 --> 00:22:06,000
have is we want to inject all of our

00:22:03,720 --> 00:22:07,679
dependencies from the external like

00:22:06,000 --> 00:22:10,740
we've seen in the dependency injection

00:22:07,679 --> 00:22:12,659
injection examples but we only want to

00:22:10,740 --> 00:22:15,090
have objects initialize on the go

00:22:12,659 --> 00:22:17,309
whenever we need that and what would be

00:22:15,090 --> 00:22:18,809
really really nice is if dependencies

00:22:17,309 --> 00:22:20,970
between these objects would also

00:22:18,809 --> 00:22:23,250
automatically be resolved we saw that

00:22:20,970 --> 00:22:25,799
the message dispatcher need an email

00:22:23,250 --> 00:22:27,990
messenger and smtp transport and

00:22:25,799 --> 00:22:30,690
whatever things so it was really complex

00:22:27,990 --> 00:22:33,120
graph but what would be nice if is if

00:22:30,690 --> 00:22:35,820
you could say please create via mail

00:22:33,120 --> 00:22:37,590
messenger and we will find the transport

00:22:35,820 --> 00:22:38,940
it has to use here in another place I

00:22:37,590 --> 00:22:40,980
don't care for that right now when I'm

00:22:38,940 --> 00:22:45,299
writing the code which creates the mail

00:22:40,980 --> 00:22:47,159
messenger there are pretty many

00:22:45,299 --> 00:22:49,679
dependency injection containers out

00:22:47,159 --> 00:22:53,279
there I'll have a list of important ones

00:22:49,679 --> 00:22:55,049
right after this example for you the one

00:22:53,279 --> 00:22:56,789
that I've been choosing here is the one

00:22:55,049 --> 00:22:59,820
that I know best it's from the arbiter

00:22:56,789 --> 00:23:02,159
project and yeah it's an example for

00:22:59,820 --> 00:23:04,110
four in my eyes are very high and DIC it

00:23:02,159 --> 00:23:05,460
does lots of magical stuff for you and

00:23:04,110 --> 00:23:08,159
makes it really easy for you as a

00:23:05,460 --> 00:23:10,649
developer to use dependency injection it

00:23:08,159 --> 00:23:12,419
for example supports shared object that

00:23:10,649 --> 00:23:15,240
is like the database connection we just

00:23:12,419 --> 00:23:17,130
saw it's a it's a shared object it is

00:23:15,240 --> 00:23:20,580
not recreated every time somebody

00:23:17,130 --> 00:23:22,620
requested it uses closures who's ever

00:23:20,580 --> 00:23:25,170
been using closures in PA

00:23:22,620 --> 00:23:27,720
how many people are already adopted php5

00:23:25,170 --> 00:23:29,100
23 is quite nice after all is it now

00:23:27,720 --> 00:23:32,220
wondering a half years or something or

00:23:29,100 --> 00:23:35,340
three years or Ivan it will but yeah it

00:23:32,220 --> 00:23:36,780
uses closures and it also has inherent

00:23:35,340 --> 00:23:40,020
dependency resolution which we will see

00:23:36,780 --> 00:23:42,960
in a bit so how does it work basically

00:23:40,020 --> 00:23:46,110
you have base class for all your DIC s

00:23:42,960 --> 00:23:49,290
and then you can extend these base class

00:23:46,110 --> 00:23:51,330
and in the inherited a narrative class

00:23:49,290 --> 00:23:53,309
you can't define which objects are

00:23:51,330 --> 00:23:56,460
contained in your DIC we will see that

00:23:53,309 --> 00:23:58,530
and it makes having use of interceptors

00:23:56,460 --> 00:24:01,230
in PHP to offer you as a developer a

00:23:58,530 --> 00:24:05,220
convenient interface to accessing these

00:24:01,230 --> 00:24:07,620
objects I will certainly not go into

00:24:05,220 --> 00:24:10,740
implementation details on how we realize

00:24:07,620 --> 00:24:12,300
the orbit v.i.c in the back end but if

00:24:10,740 --> 00:24:14,160
you're interested in that one that is a

00:24:12,300 --> 00:24:16,380
link to the code and you can look it up

00:24:14,160 --> 00:24:18,120
online I will better show you how to use

00:24:16,380 --> 00:24:20,309
it so you can get an impression how you

00:24:18,120 --> 00:24:22,290
can use DIC in your project then maybe

00:24:20,309 --> 00:24:24,480
you also want to use this class in your

00:24:22,290 --> 00:24:29,610
own project so it's open source you can

00:24:24,480 --> 00:24:32,400
just download it ah the basic here is

00:24:29,610 --> 00:24:34,320
that we have a class outreach appearance

00:24:32,400 --> 00:24:36,870
the injection container and we can and

00:24:34,320 --> 00:24:40,380
extend that close to form an arbitrary

00:24:36,870 --> 00:24:42,210
DIC that is a very important point that

00:24:40,380 --> 00:24:43,890
you have some some based interface or

00:24:42,210 --> 00:24:45,990
base class for your dependency injection

00:24:43,890 --> 00:24:48,360
container because you want to be able to

00:24:45,990 --> 00:24:50,130
replace that actually and just makes

00:24:48,360 --> 00:24:52,260
sense to request the cert class and to

00:24:50,130 --> 00:24:55,500
override that so having a base class or

00:24:52,260 --> 00:24:57,300
interface here is very same and then we

00:24:55,500 --> 00:24:59,760
have this initialized method which is

00:24:57,300 --> 00:25:02,580
basically empty in the base class and

00:24:59,760 --> 00:25:05,280
which can be used by derived classes to

00:25:02,580 --> 00:25:06,900
initialize objects they want to have so

00:25:05,280 --> 00:25:11,580
how do we do with that it's pretty

00:25:06,900 --> 00:25:14,220
simple we just say okay please assign to

00:25:11,580 --> 00:25:16,020
this property the following closure so

00:25:14,220 --> 00:25:18,960
the closure is just an anonymous

00:25:16,020 --> 00:25:20,790
function basically which can resize

00:25:18,960 --> 00:25:22,320
parameters but does not have a name and

00:25:20,790 --> 00:25:24,690
it's callable as you store it in a

00:25:22,320 --> 00:25:27,330
variable or submitted to a function or

00:25:24,690 --> 00:25:30,210
something like that so in this case we

00:25:27,330 --> 00:25:32,360
always submit the DIC itself to the

00:25:30,210 --> 00:25:35,130
function again and that is where these

00:25:32,360 --> 00:25:38,070
interim dependency resolution comes into

00:25:35,130 --> 00:25:39,540
play since every closure here resize the

00:25:38,070 --> 00:25:41,670
dependency injection container as a

00:25:39,540 --> 00:25:44,160
parameter it can access it again and

00:25:41,670 --> 00:25:46,560
request further objects from them so

00:25:44,160 --> 00:25:48,929
here is our cache which we will stall we

00:25:46,560 --> 00:25:51,179
have a file system cache here and this

00:25:48,929 --> 00:25:53,429
file system cache is relying on our

00:25:51,179 --> 00:25:56,070
request and under pure controller so it

00:25:53,429 --> 00:25:58,350
can keep in mind whatever the place to

00:25:56,070 --> 00:26:02,130
store files and and the currents go with

00:25:58,350 --> 00:26:04,200
is in and all this this stuff so in the

00:26:02,130 --> 00:26:07,740
end we only have this very slim function

00:26:04,200 --> 00:26:10,260
definition here relying our cash

00:26:07,740 --> 00:26:12,660
property as long as nobody is requesting

00:26:10,260 --> 00:26:14,520
the cash an effing application requests

00:26:12,660 --> 00:26:16,800
the cash because it wants to store or

00:26:14,520 --> 00:26:18,870
restore data from it then this closure

00:26:16,800 --> 00:26:21,960
is executed a new file system cache is

00:26:18,870 --> 00:26:25,050
created and this one as the DIC again

00:26:21,960 --> 00:26:27,510
for its dependencies I have another

00:26:25,050 --> 00:26:29,870
example here so this is the messenger

00:26:27,510 --> 00:26:32,100
example we just have basically we are

00:26:29,870 --> 00:26:33,570
storing another property which is called

00:26:32,100 --> 00:26:37,050
the messenger we also give you the

00:26:33,570 --> 00:26:40,830
closure and we say Albert messenger and

00:26:37,050 --> 00:26:42,540
this one actually can fetch a more stuff

00:26:40,830 --> 00:26:44,820
from the DIC again so I can also

00:26:42,540 --> 00:26:46,230
configure it here to not only get the

00:26:44,820 --> 00:26:48,330
email messenger but also the jabber

00:26:46,230 --> 00:26:49,950
messager and all this stuff and I can

00:26:48,330 --> 00:26:53,130
configure these objects completely

00:26:49,950 --> 00:26:54,720
separate from what I'm using here so I

00:26:53,130 --> 00:26:56,340
get really really nice little

00:26:54,720 --> 00:26:58,110
definitions of my objects which are

00:26:56,340 --> 00:27:01,530
really easy to understand and very well

00:26:58,110 --> 00:27:03,900
maintainable I can also just derive the

00:27:01,530 --> 00:27:07,950
urban environment DSC was something like

00:27:03,900 --> 00:27:10,350
our built environment a command line DIC

00:27:07,950 --> 00:27:14,150
and if I don't want to to output stuff

00:27:10,350 --> 00:27:16,320
to do the to the web in the command line

00:27:14,150 --> 00:27:18,419
environment then I can print it out to

00:27:16,320 --> 00:27:20,309
the console by overriding just one or

00:27:18,419 --> 00:27:22,290
two objects in the DIC so I can

00:27:20,309 --> 00:27:26,059
selectively we play smiley pregnancies

00:27:22,290 --> 00:27:28,500
and replace my objects inside the DIC a

00:27:26,059 --> 00:27:30,419
final example which uses quite a lot of

00:27:28,500 --> 00:27:32,400
these things it's the mail messenger we

00:27:30,419 --> 00:27:34,559
just requested here you see you got the

00:27:32,400 --> 00:27:36,929
mail messenger so we need to define it

00:27:34,559 --> 00:27:38,340
somewhere and so when you find a male

00:27:36,929 --> 00:27:41,250
messenger here it's also close

00:27:38,340 --> 00:27:43,350
the DIC and the mail messenger is

00:27:41,250 --> 00:27:45,620
created from the DIC from the mail

00:27:43,350 --> 00:27:47,970
transport so you can replace

00:27:45,620 --> 00:27:50,130
transparently how mail is sent by the

00:27:47,970 --> 00:27:52,770
mail messenger and it receives some

00:27:50,130 --> 00:27:54,690
configuration of options and also some

00:27:52,770 --> 00:27:58,309
decorative stuff but it is orbit

00:27:54,690 --> 00:28:01,590
internal things any questions to

00:27:58,309 --> 00:28:07,289
dependency injection containers yeah

00:28:01,590 --> 00:28:08,730
please yes testing and dependency

00:28:07,289 --> 00:28:11,570
injection container itself is pretty

00:28:08,730 --> 00:28:14,159
easy because it does not have hard-coded

00:28:11,570 --> 00:28:16,230
instances in it so i can test the base

00:28:14,159 --> 00:28:19,110
class by just writing a derived class

00:28:16,230 --> 00:28:22,140
and testing some stuff there some dummy

00:28:19,110 --> 00:28:24,000
objects which are in there but yeah in

00:28:22,140 --> 00:28:25,649
the end you can also test if the

00:28:24,000 --> 00:28:27,179
closures are all correct by just

00:28:25,649 --> 00:28:28,710
requesting the closures in your test

00:28:27,179 --> 00:28:30,570
case and looking if the correct objects

00:28:28,710 --> 00:28:34,279
are in there and if the resolution has

00:28:30,570 --> 00:28:34,279
happened so that's pretty easy

00:28:45,330 --> 00:28:50,550
yeah but if you're just testing a single

00:28:47,940 --> 00:28:52,410
unit you know what things are requested

00:28:50,550 --> 00:28:55,440
from the DIC in that unit and you can

00:28:52,410 --> 00:28:57,990
simply create a very very slick DIC

00:28:55,440 --> 00:28:59,880
which just delivers mock objects for

00:28:57,990 --> 00:29:01,920
that use case so for example if you are

00:28:59,880 --> 00:29:03,690
testing the male functionality you just

00:29:01,920 --> 00:29:05,820
need to replace the male messenger which

00:29:03,690 --> 00:29:07,770
is requested by that thing and you use a

00:29:05,820 --> 00:29:09,540
dummy male messenger or something which

00:29:07,770 --> 00:29:11,490
writes to memory and yet then you have

00:29:09,540 --> 00:29:13,290
pretty nice thing for assertions so

00:29:11,490 --> 00:29:15,900
testing is really easy on basis of

00:29:13,290 --> 00:29:17,580
dependency injection containers more

00:29:15,900 --> 00:29:23,690
questions there was another hand

00:29:17,580 --> 00:29:25,560
somewhere always okay I think it's gone

00:29:23,690 --> 00:29:27,450
if you want to know more about

00:29:25,560 --> 00:29:29,490
dependency injection and want to see

00:29:27,450 --> 00:29:31,290
more dependency injection containers you

00:29:29,490 --> 00:29:33,540
don't need to write that stuff down I

00:29:31,290 --> 00:29:35,520
will upload the slides later today and

00:29:33,540 --> 00:29:37,740
put the link on joint and so you can

00:29:35,520 --> 00:29:41,520
just download them from there and click

00:29:37,740 --> 00:29:43,440
on all the links there is a pimple which

00:29:41,520 --> 00:29:46,680
is a dependency injection container by

00:29:43,440 --> 00:29:51,270
fabien hope 10 CA I hope guys fellas

00:29:46,680 --> 00:29:53,700
name correctly which is actually was the

00:29:51,270 --> 00:29:55,500
inspiration to create the arabic DIC so

00:29:53,700 --> 00:29:57,810
you find many familiar things between

00:29:55,500 --> 00:30:01,140
these two dependency injection

00:29:57,810 --> 00:30:02,790
containers bakit is also a dependency

00:30:01,140 --> 00:30:05,550
injection container which you can find

00:30:02,790 --> 00:30:07,050
on github the symphony dependency

00:30:05,550 --> 00:30:09,510
injection container should have some

00:30:07,050 --> 00:30:12,960
similarities to the one of phobia up

00:30:09,510 --> 00:30:14,820
here and if you want to really get into

00:30:12,960 --> 00:30:17,490
dependency injection and why want to do

00:30:14,820 --> 00:30:19,950
that I recommend reading the article

00:30:17,490 --> 00:30:21,780
draft by martin fowler who wrote some

00:30:19,950 --> 00:30:23,520
interesting stuff there on why you want

00:30:21,780 --> 00:30:25,350
to do that and add some theoretical

00:30:23,520 --> 00:30:27,720
backgrounds on a dependency inversion

00:30:25,350 --> 00:30:34,230
and dependency injection so they're also

00:30:27,720 --> 00:30:35,880
pretty interesting good the last but a

00:30:34,230 --> 00:30:38,340
little bit bigger chapter I want to

00:30:35,880 --> 00:30:42,210
discuss is data storage I have promised

00:30:38,340 --> 00:30:43,740
that in my abstract and the basic

00:30:42,210 --> 00:30:45,870
situation which you have in your

00:30:43,740 --> 00:30:47,790
application in every application is that

00:30:45,870 --> 00:30:49,500
you have your model inside the

00:30:47,790 --> 00:30:51,780
application which is some some data

00:30:49,500 --> 00:30:54,150
objects with some domain logic how we

00:30:51,780 --> 00:30:56,310
call it like an info

00:30:54,150 --> 00:30:59,610
I see calculate the the invoice value

00:30:56,310 --> 00:31:01,230
and you calculated with a value-added

00:30:59,610 --> 00:31:04,410
tax and without it and all these things

00:31:01,230 --> 00:31:05,790
so you have a modeled in was consists of

00:31:04,410 --> 00:31:08,580
invoice position and all these things

00:31:05,790 --> 00:31:10,610
this is what happens here and on the

00:31:08,580 --> 00:31:13,890
other end you have some kind of storage

00:31:10,610 --> 00:31:17,100
who is using MySQL as the main storage

00:31:13,890 --> 00:31:19,650
bag and yeah that's what I expected who

00:31:17,100 --> 00:31:24,180
is using a no SQL database like couchdb

00:31:19,650 --> 00:31:27,900
or long will be B or Cassandra okay few

00:31:24,180 --> 00:31:29,340
people who is using Oracle okay all

00:31:27,900 --> 00:31:30,870
people who raise their hands of my

00:31:29,340 --> 00:31:33,090
Skrill should have raised their hands

00:31:30,870 --> 00:31:35,490
now right now because my skill now

00:31:33,090 --> 00:31:37,740
belongs to Oracle but yeah that's just a

00:31:35,490 --> 00:31:40,050
side job okay so you have some kind of

00:31:37,740 --> 00:31:42,630
storage here married maybe a database in

00:31:40,050 --> 00:31:45,330
no SQL database or it can be a file an

00:31:42,630 --> 00:31:47,190
XML file it can also be a a PCE of

00:31:45,330 --> 00:31:48,480
memcache or something else you have some

00:31:47,190 --> 00:31:51,900
some place where you can make your

00:31:48,480 --> 00:31:53,910
objects persistent actually and one

00:31:51,900 --> 00:31:57,150
crucial thing in every application is

00:31:53,910 --> 00:31:59,220
this point how do you store your model

00:31:57,150 --> 00:32:01,170
data and how do you restore it actually

00:31:59,220 --> 00:32:03,780
and where to put that code and how to

00:32:01,170 --> 00:32:05,730
realize that actually to be flexible and

00:32:03,780 --> 00:32:08,820
to reach the goals of clean

00:32:05,730 --> 00:32:10,890
object-oriented design and yeah that's a

00:32:08,820 --> 00:32:12,990
pretty interesting question and before

00:32:10,890 --> 00:32:15,900
we go into detail on approaches to that

00:32:12,990 --> 00:32:20,130
I can promise you that is no Holy Grail

00:32:15,900 --> 00:32:23,460
there as somebody phrase did object

00:32:20,130 --> 00:32:25,440
persistence is the Vietnam of object

00:32:23,460 --> 00:32:29,220
oriented design so it's really a long

00:32:25,440 --> 00:32:31,220
long long bloody war and nobody has

00:32:29,220 --> 00:32:33,720
found a real solutions with that and

00:32:31,220 --> 00:32:36,750
every solution will have problems

00:32:33,720 --> 00:32:38,460
promised but maybe I can show you some

00:32:36,750 --> 00:32:41,370
solutions which have less problems and

00:32:38,460 --> 00:32:44,370
then other ones what are the charges

00:32:41,370 --> 00:32:46,320
here and you need to actually model to

00:32:44,370 --> 00:32:48,780
structures which follow very very

00:32:46,320 --> 00:32:50,370
different ideas in the back end one

00:32:48,780 --> 00:32:53,250
thing is you have an object-oriented

00:32:50,370 --> 00:32:55,530
design which follow of course the

00:32:53,250 --> 00:32:57,450
principles of object-oriented design on

00:32:55,530 --> 00:32:59,730
the other hand you have your storage

00:32:57,450 --> 00:33:01,090
structure which is if you use an SQL

00:32:59,730 --> 00:33:03,970
database it's there

00:33:01,090 --> 00:33:06,010
relational schema if you use couchdb or

00:33:03,970 --> 00:33:08,200
another no SQL database it's not really

00:33:06,010 --> 00:33:09,970
a schema but it's a document oriented

00:33:08,200 --> 00:33:12,210
approach which is also quite different

00:33:09,970 --> 00:33:15,910
to an object-oriented approach like

00:33:12,210 --> 00:33:18,220
concerning reference between objects if

00:33:15,910 --> 00:33:20,170
you're using a plain file you have some

00:33:18,220 --> 00:33:21,970
other constraints in the back end like

00:33:20,170 --> 00:33:24,040
you cannot store everything in a single

00:33:21,970 --> 00:33:25,990
file it's very slow but you can also not

00:33:24,040 --> 00:33:28,780
create millions of files and so you have

00:33:25,990 --> 00:33:30,640
constraints in your storage in your

00:33:28,780 --> 00:33:32,500
storage back end which do not apply to

00:33:30,640 --> 00:33:35,560
your object oriented in the face and you

00:33:32,500 --> 00:33:37,300
don't want to mix them up actually one

00:33:35,560 --> 00:33:39,490
thing here is the object relational

00:33:37,300 --> 00:33:42,490
impedance mismatch you can read about

00:33:39,490 --> 00:33:44,380
that in on the internet lots and lots of

00:33:42,490 --> 00:33:46,900
stuff long long articles discussing

00:33:44,380 --> 00:33:48,490
where the differences are between object

00:33:46,900 --> 00:33:50,020
oriented modeling and relational

00:33:48,490 --> 00:33:52,000
database modeling I won't go into

00:33:50,020 --> 00:33:53,890
details here I think everybody knows

00:33:52,000 --> 00:33:55,930
that there are difference between models

00:33:53,890 --> 00:33:59,920
in your application and storage on the

00:33:55,930 --> 00:34:03,010
other hand you also have different

00:33:59,920 --> 00:34:04,540
access approaches to your storage engine

00:34:03,010 --> 00:34:07,870
like the couch to be is connected

00:34:04,540 --> 00:34:09,700
through HTTP so we always need to create

00:34:07,870 --> 00:34:12,550
a socket at least for for sending an

00:34:09,700 --> 00:34:14,380
HTTP request and receiving stuff mysql

00:34:12,550 --> 00:34:17,110
is another access approach my scroll is

00:34:14,380 --> 00:34:19,270
using SQL as a query language couch to

00:34:17,110 --> 00:34:21,040
be yeah it does not use the real query

00:34:19,270 --> 00:34:22,930
language but you need to define views on

00:34:21,040 --> 00:34:27,360
the backend here's a JavaScript so it's

00:34:22,930 --> 00:34:27,360
pretty different these exit strategies

00:34:28,050 --> 00:34:33,790
yeah one thing is you want to exchange

00:34:31,420 --> 00:34:35,740
your storage backup maybe who has ever

00:34:33,790 --> 00:34:38,170
wanted to exchange a storage bag and

00:34:35,740 --> 00:34:40,660
maybe migrate from Oracle to my school

00:34:38,170 --> 00:34:42,520
or from some and something else very few

00:34:40,660 --> 00:34:45,400
people whose things he might come to the

00:34:42,520 --> 00:34:51,340
point where he wants to exchange storage

00:34:45,400 --> 00:34:53,620
back end yeah more people in the end you

00:34:51,340 --> 00:34:56,680
might even want to exchange your storage

00:34:53,620 --> 00:34:59,740
back and selectively like replace some

00:34:56,680 --> 00:35:01,720
some really really heavy calculations in

00:34:59,740 --> 00:35:03,810
my scale with fetching them from a

00:35:01,720 --> 00:35:07,060
memcache if available or something or

00:35:03,810 --> 00:35:08,140
migrating some really not relational

00:35:07,060 --> 00:35:10,000
data to

00:35:08,140 --> 00:35:12,460
couchdb back-ended still soaring the

00:35:10,000 --> 00:35:14,530
main data of your plication in mysql

00:35:12,460 --> 00:35:16,570
that our scenarios which might happen

00:35:14,530 --> 00:35:18,550
especially in large applications and

00:35:16,570 --> 00:35:21,640
especially if you are building a product

00:35:18,550 --> 00:35:25,240
and not a single website so there are

00:35:21,640 --> 00:35:27,490
even more challenges in this storage

00:35:25,240 --> 00:35:29,740
idea if you think more about it I'm

00:35:27,490 --> 00:35:31,900
pretty sure you will come two more

00:35:29,740 --> 00:35:33,460
challenges and problems little face but

00:35:31,900 --> 00:35:36,030
these are already another thing to

00:35:33,460 --> 00:35:38,260
discuss the the basic idea you have here

00:35:36,030 --> 00:35:40,660
the first thing I'd like to show you is

00:35:38,260 --> 00:35:44,770
active record who has been using the

00:35:40,660 --> 00:35:47,910
active record pattern okay who is

00:35:44,770 --> 00:35:50,350
satisfied by the active record pattern

00:35:47,910 --> 00:35:52,600
ok these are fewer fingers that is very

00:35:50,350 --> 00:35:55,450
good because I will go to bashing it

00:35:52,600 --> 00:35:57,550
like very very soonish the idea in

00:35:55,450 --> 00:36:00,420
active record is that you have your

00:35:57,550 --> 00:36:03,240
model objects your model classes and

00:36:00,420 --> 00:36:05,830
these model class is typically combine

00:36:03,240 --> 00:36:08,410
your business logic which is in them

00:36:05,830 --> 00:36:11,590
anyway but also the storage logic which

00:36:08,410 --> 00:36:13,690
enables you to insert and update the

00:36:11,590 --> 00:36:16,300
objects in the database so you have some

00:36:13,690 --> 00:36:19,960
danger in here you have some storage

00:36:16,300 --> 00:36:22,780
logic here but you also have functions

00:36:19,960 --> 00:36:24,820
like insert and update and typically you

00:36:22,780 --> 00:36:27,070
realize that by a common base class you

00:36:24,820 --> 00:36:29,050
don't have to write these functions

00:36:27,070 --> 00:36:30,790
again and again the SQL statements look

00:36:29,050 --> 00:36:35,230
pretty similar with some introspection

00:36:30,790 --> 00:36:37,150
you can actually see pretty easily how

00:36:35,230 --> 00:36:39,490
to insert these objects how to update

00:36:37,150 --> 00:36:42,310
them how to find them and all that stuff

00:36:39,490 --> 00:36:44,290
so it's common to have that in a common

00:36:42,310 --> 00:36:47,460
base class those of you who have used

00:36:44,290 --> 00:36:53,080
active record was it similar to that or

00:36:47,460 --> 00:36:55,150
not really yeah okay so um to send that

00:36:53,080 --> 00:36:56,830
up what does active record do it

00:36:55,150 --> 00:37:00,370
combines storage and business launching

00:36:56,830 --> 00:37:02,560
into one single class commonly the

00:37:00,370 --> 00:37:04,270
storage logic is put into a base class

00:37:02,560 --> 00:37:07,600
so it does not have to be written over

00:37:04,270 --> 00:37:09,730
and over again and basically every model

00:37:07,600 --> 00:37:12,700
class corresponds to a database record

00:37:09,730 --> 00:37:14,289
so you encapsulate data in one single

00:37:12,700 --> 00:37:16,839
line of your database so you can

00:37:14,289 --> 00:37:20,169
sir the new line updated and that's the

00:37:16,839 --> 00:37:22,269
basic idea here let's come to the to the

00:37:20,169 --> 00:37:24,660
pros of active record it's pretty whew

00:37:22,269 --> 00:37:27,549
it's just too it's very very easy to use

00:37:24,660 --> 00:37:29,890
even even a chimp can use an active

00:37:27,549 --> 00:37:32,140
record like it's so intuitive saying now

00:37:29,890 --> 00:37:34,150
I'm building a new invoice and store oh

00:37:32,140 --> 00:37:36,369
nice it's in the database that's so fun

00:37:34,150 --> 00:37:38,289
and it's very few cool to ride since you

00:37:36,369 --> 00:37:40,390
can put lots of your database logic in

00:37:38,289 --> 00:37:42,819
the base class and don't mean to rewrite

00:37:40,390 --> 00:37:47,109
that for every model class you implement

00:37:42,819 --> 00:37:49,119
of course there are also some cons one

00:37:47,109 --> 00:37:51,699
of the biggest cons list that your model

00:37:49,119 --> 00:37:53,589
structure actually equals your database

00:37:51,699 --> 00:37:55,660
structure and as I said before this is

00:37:53,589 --> 00:37:57,549
not really desired because those

00:37:55,660 --> 00:38:00,339
structures follow very very different

00:37:57,549 --> 00:38:03,130
principles and if you build a complex

00:38:00,339 --> 00:38:06,009
model structure like in for example you

00:38:03,130 --> 00:38:08,439
are trying to a bully cab competitor to

00:38:06,009 --> 00:38:10,299
sa p then you will have really really

00:38:08,439 --> 00:38:12,640
complex models and you don't want them

00:38:10,299 --> 00:38:16,269
to mimic your database actually so that

00:38:12,640 --> 00:38:18,309
is a really bad thing to do also your

00:38:16,269 --> 00:38:21,729
class has become more complex even if

00:38:18,309 --> 00:38:24,099
you put lots of your storage logic in a

00:38:21,729 --> 00:38:26,140
base class you still have inside your

00:38:24,099 --> 00:38:29,049
classes and storage logic you have lots

00:38:26,140 --> 00:38:32,199
of business logic and this this race is

00:38:29,049 --> 00:38:34,329
complic complexity quite a lot you have

00:38:32,199 --> 00:38:37,749
broken your object semantics basically

00:38:34,329 --> 00:38:39,759
so an invoice does not usually inherit

00:38:37,749 --> 00:38:41,829
something like active record if you want

00:38:39,759 --> 00:38:43,900
to build a semantic model like a real

00:38:41,829 --> 00:38:46,959
business model then this should try to

00:38:43,900 --> 00:38:49,179
mimic your real-world objects and not

00:38:46,959 --> 00:38:53,229
inherit for something like an active

00:38:49,179 --> 00:38:55,659
record like a car maybe extends V haiku

00:38:53,229 --> 00:38:58,329
but not active record so this is a very

00:38:55,659 --> 00:39:01,499
very bad thing if you're wanting to

00:38:58,329 --> 00:39:03,759
build a real clean object model and

00:39:01,499 --> 00:39:05,679
every time you change something in the

00:39:03,759 --> 00:39:08,169
database or in the object model the

00:39:05,679 --> 00:39:10,079
changes immediately ripple over so like

00:39:08,169 --> 00:39:12,189
add a new field to the database

00:39:10,079 --> 00:39:14,079
consequently you need to add a new field

00:39:12,189 --> 00:39:16,299
to your object no matter if you actually

00:39:14,079 --> 00:39:18,039
use that or if you just calculate the

00:39:16,299 --> 00:39:20,319
field in a trigger and the application

00:39:18,039 --> 00:39:23,830
does not even know about that if you

00:39:20,319 --> 00:39:26,470
replace some some object structure like

00:39:23,830 --> 00:39:28,390
instead of a single invoice possession

00:39:26,470 --> 00:39:30,220
you now need multiple invoice position

00:39:28,390 --> 00:39:32,230
this is a huge change in the database

00:39:30,220 --> 00:39:34,210
background which is just coming from the

00:39:32,230 --> 00:39:36,760
model so every change on one of the

00:39:34,210 --> 00:39:40,380
sides has immediate effect on the other

00:39:36,760 --> 00:39:40,380
side and that is also a really bad thing

00:39:40,530 --> 00:39:46,090
yeah the storage logic is very hard to

00:39:44,050 --> 00:39:48,880
exchange if you have a common base class

00:39:46,090 --> 00:39:50,860
which implements all these things like

00:39:48,880 --> 00:39:53,500
store and update and things it's really

00:39:50,860 --> 00:39:56,260
hard to exchange that especially

00:39:53,500 --> 00:39:58,750
selectively but if you exchange that you

00:39:56,260 --> 00:40:00,850
need to do lots and lots of tests for

00:39:58,750 --> 00:40:02,820
for seeing if it works with every of the

00:40:00,850 --> 00:40:05,110
derived classes again and things and

00:40:02,820 --> 00:40:07,330
that's not really a thing you want to do

00:40:05,110 --> 00:40:09,400
and for those of you who do your testing

00:40:07,330 --> 00:40:11,800
which were the most there it's really

00:40:09,400 --> 00:40:14,500
really hard to test like how would you

00:40:11,800 --> 00:40:16,420
test is an invoice can be stored if the

00:40:14,500 --> 00:40:17,890
storage logic is right inside at me and

00:40:16,420 --> 00:40:20,050
you need the database in the back end

00:40:17,890 --> 00:40:21,700
tests are getting really really slow you

00:40:20,050 --> 00:40:23,920
have different behaviors and different

00:40:21,700 --> 00:40:25,720
systems with different database versions

00:40:23,920 --> 00:40:27,670
and you don't want to have all that mass

00:40:25,720 --> 00:40:29,590
inside your objects when just wanting to

00:40:27,670 --> 00:40:31,150
test the business logic or to see if a

00:40:29,590 --> 00:40:34,570
storage code is correct in the back end

00:40:31,150 --> 00:40:36,910
and I hope everybody agrees that

00:40:34,570 --> 00:40:39,370
decoupling business and storage logic is

00:40:36,910 --> 00:40:40,900
a good idea here so who drinks with that

00:40:39,370 --> 00:40:44,290
one just raise your hand d clapping

00:40:40,900 --> 00:40:46,990
awesome I'm so I think that were most of

00:40:44,290 --> 00:40:50,170
you that is where we get lesson learnt

00:40:46,990 --> 00:40:53,020
and the next program we want to look at

00:40:50,170 --> 00:40:55,270
is the so called row data gateway and if

00:40:53,020 --> 00:40:57,370
i remember correct the zend framework

00:40:55,270 --> 00:41:02,680
implements something in that direction a

00:40:57,370 --> 00:41:04,810
rotator gateway allows you basically to

00:41:02,680 --> 00:41:06,880
have independent classes which

00:41:04,810 --> 00:41:09,220
encapsulate your database structure and

00:41:06,880 --> 00:41:11,890
make them independent from your model so

00:41:09,220 --> 00:41:14,410
instead of having some some fancy

00:41:11,890 --> 00:41:17,140
extends active record here we just have

00:41:14,410 --> 00:41:19,600
a data field here and we have our

00:41:17,140 --> 00:41:21,520
business logic inside the invoice and in

00:41:19,600 --> 00:41:24,850
order to get the data we insert some

00:41:21,520 --> 00:41:27,490
some invoice gateway to it which one's

00:41:24,850 --> 00:41:29,260
the gateway to the database actually you

00:41:27,490 --> 00:41:30,550
can of course realize that differently

00:41:29,260 --> 00:41:32,410
like

00:41:30,550 --> 00:41:34,240
in voice gateway and then moving the

00:41:32,410 --> 00:41:35,680
data from the invoice gateway to your

00:41:34,240 --> 00:41:37,390
model or something like that but that's

00:41:35,680 --> 00:41:40,120
another pattern we will look at that

00:41:37,390 --> 00:41:42,190
later on so the idea here is of course

00:41:40,120 --> 00:41:44,980
that you have independent classes which

00:41:42,190 --> 00:41:46,720
just for the purpose of modeling

00:41:44,980 --> 00:41:49,060
database access and then you have your

00:41:46,720 --> 00:41:51,550
model which makes use of these classes

00:41:49,060 --> 00:41:55,480
so it's pretty easy to test your

00:41:51,550 --> 00:41:58,210
business logic without having a database

00:41:55,480 --> 00:42:00,220
involved by just making a mock of this

00:41:58,210 --> 00:42:02,920
invoice gateway which contains some fake

00:42:00,220 --> 00:42:06,820
data and things that's it's much better

00:42:02,920 --> 00:42:09,280
than we've seen before so what does real

00:42:06,820 --> 00:42:11,350
data again we do it already decouples

00:42:09,280 --> 00:42:14,050
storage from business slowly logic quite

00:42:11,350 --> 00:42:16,030
a bit still you've got inconvenient 00

00:42:14,050 --> 00:42:17,860
interface like in your invoice gateway

00:42:16,030 --> 00:42:21,490
you have still this message like store

00:42:17,860 --> 00:42:23,290
and update so the chimp does not need to

00:42:21,490 --> 00:42:27,240
get used to really new complex

00:42:23,290 --> 00:42:29,680
environment for for storing its invoices

00:42:27,240 --> 00:42:31,660
but it also has still some objects

00:42:29,680 --> 00:42:35,410
coupled to the storage logic so it's

00:42:31,660 --> 00:42:37,780
still a pretty tight coupling there's

00:42:35,410 --> 00:42:39,490
also just as a sighted a pattern called

00:42:37,780 --> 00:42:41,800
table data gateway which I won't go into

00:42:39,490 --> 00:42:44,200
detail on right now which is a similar

00:42:41,800 --> 00:42:49,120
approach but yeah you should read about

00:42:44,200 --> 00:42:50,800
that and I won't go into detail you good

00:42:49,120 --> 00:42:52,960
where are the pros of this row data

00:42:50,800 --> 00:42:56,200
gateway approach one pro is that is

00:42:52,960 --> 00:42:58,480
still pretty easy to use and the other

00:42:56,200 --> 00:43:00,250
pros that there are still few code to

00:42:58,480 --> 00:43:03,520
rise you can generate the gateways

00:43:00,250 --> 00:43:05,500
pretty easily as with the active record

00:43:03,520 --> 00:43:07,450
base class which can also be reused

00:43:05,500 --> 00:43:09,520
generating these gateways from the

00:43:07,450 --> 00:43:11,500
database is pretty easy since they

00:43:09,520 --> 00:43:15,460
really modeled the database structure in

00:43:11,500 --> 00:43:17,260
an object-oriented manner it's much

00:43:15,460 --> 00:43:19,720
easier to test we just had that so we

00:43:17,260 --> 00:43:21,790
can inject the Gateway a dummy gateway

00:43:19,720 --> 00:43:23,710
into your model classes and test them

00:43:21,790 --> 00:43:27,700
independently from your storage storage

00:43:23,710 --> 00:43:29,440
logic still we have on the cons part we

00:43:27,700 --> 00:43:31,540
have some objects which model our

00:43:29,440 --> 00:43:34,450
database structure it's not our business

00:43:31,540 --> 00:43:37,180
model anymore which is a good thing but

00:43:34,450 --> 00:43:39,130
still there are objects which are

00:43:37,180 --> 00:43:40,720
have the sole purpose of modeling a

00:43:39,130 --> 00:43:44,619
database structure in object-oriented

00:43:40,720 --> 00:43:46,270
manners change is still ripple over they

00:43:44,619 --> 00:43:47,890
don't affect your business models so

00:43:46,270 --> 00:43:49,690
they don't affect the critical part of

00:43:47,890 --> 00:43:53,170
your application actually but they still

00:43:49,690 --> 00:43:54,880
affect some of your objects and yeah

00:43:53,170 --> 00:43:56,380
it's still hard to exchange the storage

00:43:54,880 --> 00:43:59,290
logic because you have this message

00:43:56,380 --> 00:44:01,569
there in say insert update and yeah

00:43:59,290 --> 00:44:03,609
they're typically contain hard coded SQL

00:44:01,569 --> 00:44:08,710
and things so it's not really easy to

00:44:03,609 --> 00:44:18,010
exchange the logic behind that okay any

00:44:08,710 --> 00:44:20,020
questions so far good so what is the

00:44:18,010 --> 00:44:22,390
Holy Grail here of what is coming next

00:44:20,020 --> 00:44:25,059
to the Holy Grail in this area it's a

00:44:22,390 --> 00:44:27,040
pattern called the data mapper pattern

00:44:25,059 --> 00:44:29,950
who is using a data mapper in these

00:44:27,040 --> 00:44:32,589
applications quite a few what if you

00:44:29,950 --> 00:44:34,240
that is pretty good so in the data

00:44:32,589 --> 00:44:37,480
mapper you have a completely independent

00:44:34,240 --> 00:44:40,170
invoice class which only encapsulate the

00:44:37,480 --> 00:44:43,180
domain logic for your invoice you have

00:44:40,170 --> 00:44:45,190
no masses for storage in it the invoice

00:44:43,180 --> 00:44:47,079
does not even know that it will be

00:44:45,190 --> 00:44:49,270
stored some time it is it does not

00:44:47,079 --> 00:44:51,220
really matter to your model imagine your

00:44:49,270 --> 00:44:53,680
our model object and your residing in

00:44:51,220 --> 00:44:55,780
memory how would you know that you once

00:44:53,680 --> 00:44:57,670
get stored to disk and restore from disk

00:44:55,780 --> 00:45:00,220
it does not matter to you as a model and

00:44:57,670 --> 00:45:02,950
on the other hand you have a nice and

00:45:00,220 --> 00:45:05,260
clean interface which allows you to take

00:45:02,950 --> 00:45:07,450
a model store it to the whatever place

00:45:05,260 --> 00:45:09,040
or restore it from whatever place and

00:45:07,450 --> 00:45:11,109
then you can have different

00:45:09,040 --> 00:45:14,290
implementations for this interface like

00:45:11,109 --> 00:45:16,540
you can map an object to a database even

00:45:14,290 --> 00:45:18,960
complex objects like invoices with

00:45:16,540 --> 00:45:21,940
multiple invoice positions some Commons

00:45:18,960 --> 00:45:25,059
addresses people whatever things can be

00:45:21,940 --> 00:45:27,040
mapped to a database using some complex

00:45:25,059 --> 00:45:29,950
mechanism but in this case instead of

00:45:27,040 --> 00:45:33,670
putting these mechanism into the model

00:45:29,950 --> 00:45:36,430
itself or into a gateway object you put

00:45:33,670 --> 00:45:38,290
that into a so-called mapper one

00:45:36,430 --> 00:45:41,310
important thing in this pattern which I

00:45:38,290 --> 00:45:43,710
consider very important is that you key

00:45:41,310 --> 00:45:46,110
these methods their signatures and their

00:45:43,710 --> 00:45:49,710
names independent from your storage back

00:45:46,110 --> 00:45:51,780
end it's not like this is actually an

00:45:49,710 --> 00:45:54,030
insert in a mysql database but I called

00:45:51,780 --> 00:45:56,340
it store because I will don't want to

00:45:54,030 --> 00:45:58,620
associate that the invoice mapper

00:45:56,340 --> 00:46:00,750
doesn't insert in the back end who knows

00:45:58,620 --> 00:46:02,490
what the mapper actually does it could

00:46:00,750 --> 00:46:04,110
also stole the invoice and file and

00:46:02,490 --> 00:46:07,170
makes a mouse structure all good story

00:46:04,110 --> 00:46:09,990
too couchdb back end it does not really

00:46:07,170 --> 00:46:12,030
matter it matter so if you keep clean

00:46:09,990 --> 00:46:14,580
semantics here in this interface and

00:46:12,030 --> 00:46:16,740
keep your your method names that

00:46:14,580 --> 00:46:19,080
messaging signatures out of the scope of

00:46:16,740 --> 00:46:22,140
SQL you can very very easily replace

00:46:19,080 --> 00:46:26,220
that logic with other storage logic it's

00:46:22,140 --> 00:46:28,740
very very easy so let's summarize that

00:46:26,220 --> 00:46:31,110
it completely the parent completely

00:46:28,740 --> 00:46:33,420
decoupled the storage from the model the

00:46:31,110 --> 00:46:36,600
model does not even know to repeat

00:46:33,420 --> 00:46:38,040
myself that it is stored on this once it

00:46:36,600 --> 00:46:40,080
does not matter to the model if it's

00:46:38,040 --> 00:46:42,540
stored you just have it in memory and in

00:46:40,080 --> 00:46:43,860
memory it is really lucky and yeah it

00:46:42,540 --> 00:46:47,430
does not matter to the model that it's

00:46:43,860 --> 00:46:49,320
stored before or not you have no object

00:46:47,430 --> 00:46:51,600
oriented modeling of the DB structure

00:46:49,320 --> 00:46:54,930
anymore there is no direct transfer of

00:46:51,600 --> 00:46:57,120
the beast structure to your objects so

00:46:54,930 --> 00:46:59,550
if you for example add a new field in

00:46:57,120 --> 00:47:01,470
your database is the chances are really

00:46:59,550 --> 00:47:03,780
good that you don't need to change your

00:47:01,470 --> 00:47:05,280
database mapper as long as you don't

00:47:03,780 --> 00:47:06,990
need the field actively in your

00:47:05,280 --> 00:47:09,000
application because there is nothing

00:47:06,990 --> 00:47:11,310
like an object which needs a new field

00:47:09,000 --> 00:47:13,830
and has some magic in it to read it from

00:47:11,310 --> 00:47:16,520
the database or so so chances are good

00:47:13,830 --> 00:47:18,600
that you need not do not need to change

00:47:16,520 --> 00:47:20,040
every time you change one of the

00:47:18,600 --> 00:47:22,350
structure the other structure to of

00:47:20,040 --> 00:47:25,310
course if you need that field which you

00:47:22,350 --> 00:47:28,530
just added to the database inside your

00:47:25,310 --> 00:47:30,390
application there is no way around that

00:47:28,530 --> 00:47:32,520
but if you don't care about that what

00:47:30,390 --> 00:47:34,410
your database administrator does putting

00:47:32,520 --> 00:47:36,390
you indexes in there and you fields for

00:47:34,410 --> 00:47:37,860
new indexes new trigger stuff it doesn't

00:47:36,390 --> 00:47:41,010
really matter to you as an application

00:47:37,860 --> 00:47:42,910
developer and yeah the model does not

00:47:41,010 --> 00:47:44,410
even know that the data basic system

00:47:42,910 --> 00:47:48,130
putting myself quite often here right

00:47:44,410 --> 00:47:50,680
now so what are the pros here the pros

00:47:48,130 --> 00:47:52,299
are you have complete decoupling from

00:47:50,680 --> 00:47:56,410
the database which is what we actually

00:47:52,299 --> 00:47:59,140
desired model is not aware of storage

00:47:56,410 --> 00:48:01,390
again this point you have really clean

00:47:59,140 --> 00:48:03,099
storage in the face you don't depend on

00:48:01,390 --> 00:48:05,680
that who I have my skeleton in

00:48:03,099 --> 00:48:07,150
background does anybody remember five

00:48:05,680 --> 00:48:09,880
years ago though was there an

00:48:07,150 --> 00:48:12,250
alternative for storing stuff in mysql

00:48:09,880 --> 00:48:15,220
database maybe except for Sonja your fun

00:48:12,250 --> 00:48:17,140
I don't really know every PHP

00:48:15,220 --> 00:48:19,210
application was just built on ok i'm

00:48:17,140 --> 00:48:21,250
storing in my SQL database there is no

00:48:19,210 --> 00:48:22,990
other way for storing data data actually

00:48:21,250 --> 00:48:25,930
nowadays you have the choice you have

00:48:22,990 --> 00:48:28,450
these a full no SQL singing in the

00:48:25,930 --> 00:48:31,150
background people start even storing

00:48:28,450 --> 00:48:33,579
data only in memcache servers like for

00:48:31,150 --> 00:48:36,940
example we'll get facebook this primary

00:48:33,579 --> 00:48:38,710
storage is memcache service and so you

00:48:36,940 --> 00:48:40,780
are in the need of rethinking your

00:48:38,710 --> 00:48:42,970
application design or not depending on

00:48:40,780 --> 00:48:47,440
an SQL database on the backend and this

00:48:42,970 --> 00:48:49,450
is a very good approach to do so ah this

00:48:47,440 --> 00:48:52,690
is great yeah implemented from storages

00:48:49,450 --> 00:48:55,089
I got that one the DB changes only

00:48:52,690 --> 00:48:57,640
affect your mapping layer then maybe do

00:48:55,089 --> 00:48:59,740
not affect it at all same for the

00:48:57,640 --> 00:49:01,630
application model if you add new

00:48:59,740 --> 00:49:03,849
calculations through your model or if

00:49:01,630 --> 00:49:05,859
you rename a property there it does not

00:49:03,849 --> 00:49:08,890
matter to your database if you rename

00:49:05,859 --> 00:49:11,440
the property fat to value-added taxes

00:49:08,890 --> 00:49:12,970
it's no no problem for the model anymore

00:49:11,440 --> 00:49:17,619
because you just need to adjust the

00:49:12,970 --> 00:49:19,839
mapper and it's really nice for testing

00:49:17,619 --> 00:49:21,640
because you can replace anything every

00:49:19,839 --> 00:49:23,650
matter everywhere simply by a dummy

00:49:21,640 --> 00:49:25,660
mapper and see are the calls are correct

00:49:23,650 --> 00:49:26,950
here or you can whatever let it be

00:49:25,660 --> 00:49:29,710
written to memory or something though

00:49:26,950 --> 00:49:31,539
that is really really easy there are

00:49:29,710 --> 00:49:34,180
also some calls there's quite some code

00:49:31,539 --> 00:49:37,440
right since you have semantical meanings

00:49:34,180 --> 00:49:40,480
of matters like store and restore and

00:49:37,440 --> 00:49:42,730
whatever fine by name and things there

00:49:40,480 --> 00:49:45,160
is pretty pretty few you can do to

00:49:42,730 --> 00:49:47,609
auto-generate such code so we will most

00:49:45,160 --> 00:49:50,890
likely end up writing this code by hand

00:49:47,609 --> 00:49:53,349
which is yeah when if you have a lot of

00:49:50,890 --> 00:49:55,240
database tables which can be quite some

00:49:53,349 --> 00:49:56,330
effort so it's quite simple to ride for

00:49:55,240 --> 00:49:58,430
you

00:49:56,330 --> 00:50:00,500
and the mapping can't even be become

00:49:58,430 --> 00:50:02,330
really complex if you are modeling in a

00:50:00,500 --> 00:50:03,770
really clean object-oriented way and

00:50:02,330 --> 00:50:06,050
don't have the database in mind of

00:50:03,770 --> 00:50:07,850
course you will need to have some

00:50:06,050 --> 00:50:09,470
complex mapping between your object

00:50:07,850 --> 00:50:12,050
model and the database on the other hand

00:50:09,470 --> 00:50:14,690
but this complex logic is nicely

00:50:12,050 --> 00:50:16,220
encapsulated in a single interface a

00:50:14,690 --> 00:50:18,560
single classes you can test it

00:50:16,220 --> 00:50:22,310
dedicatedly so it doesn't really matter

00:50:18,560 --> 00:50:25,330
that it's getting more complex here any

00:50:22,310 --> 00:50:25,330
questions so far

00:50:39,660 --> 00:50:53,740
yeah yeah yes sir yeah maybe I should

00:50:52,119 --> 00:50:56,530
repeat that for your audience so the

00:50:53,740 --> 00:50:59,589
issue here is that how to how to take

00:50:56,530 --> 00:51:03,099
care of multiple copies of an object in

00:50:59,589 --> 00:51:05,530
memory right so you have one object

00:51:03,099 --> 00:51:07,690
which encapsulates really one entity in

00:51:05,530 --> 00:51:10,089
your storage back end war one entity in

00:51:07,690 --> 00:51:11,859
the real world and if you learn such an

00:51:10,089 --> 00:51:13,359
object in different places you might end

00:51:11,859 --> 00:51:15,400
up with multiple copies of the same

00:51:13,359 --> 00:51:16,960
object and if one place of your

00:51:15,400 --> 00:51:18,730
application changes something in the

00:51:16,960 --> 00:51:20,799
object other places might not be

00:51:18,730 --> 00:51:22,599
notified of the new value and still work

00:51:20,799 --> 00:51:26,440
with oh wellies which is a really really

00:51:22,599 --> 00:51:28,150
bad thing you can try to take care of

00:51:26,440 --> 00:51:36,210
that in your data mapper for example by

00:51:28,150 --> 00:51:40,680
using an identity map pattern yeah yeah

00:51:36,210 --> 00:51:40,680
you need to initially use let anyways

00:51:46,160 --> 00:51:51,900
yeah that is truth yeah so there is a

00:51:49,410 --> 00:51:53,760
place where you still mix up some water

00:51:51,900 --> 00:51:56,760
storage logic because the object does

00:51:53,760 --> 00:51:58,140
not have an ID in general in your object

00:51:56,760 --> 00:51:59,970
oriented model but you still need to

00:51:58,140 --> 00:52:03,450
carry that on in order to keep track of

00:51:59,970 --> 00:52:05,279
the identity of the object yeah that is

00:52:03,450 --> 00:52:07,200
true in most cases for example for an

00:52:05,279 --> 00:52:10,019
invoice is not true because it has an ID

00:52:07,200 --> 00:52:12,240
by itself in the object model but in

00:52:10,019 --> 00:52:14,579
general you rewrite that you won't get

00:52:12,240 --> 00:52:17,460
rid completely of your database

00:52:14,579 --> 00:52:19,470
information in the model for example an

00:52:17,460 --> 00:52:21,569
ID is a very good point yet maybe

00:52:19,470 --> 00:52:23,760
revision is also another thing which

00:52:21,569 --> 00:52:26,069
which is typically only a data storage

00:52:23,760 --> 00:52:27,839
problem storing current revision and

00:52:26,069 --> 00:52:30,329
over vision it does not really belong to

00:52:27,839 --> 00:52:31,799
your model but still you need to store

00:52:30,329 --> 00:52:35,309
it there somewhere to keep track of

00:52:31,799 --> 00:52:36,839
which revision you currently have but at

00:52:35,309 --> 00:52:41,010
least using the data mapper you can get

00:52:36,839 --> 00:52:43,700
rid of lots of of these things yet more

00:52:41,010 --> 00:52:43,700
questions please

00:52:49,530 --> 00:52:55,330
you can also just make make a method on

00:52:52,480 --> 00:52:57,310
your database on the adatom Apple like

00:52:55,330 --> 00:53:05,050
store multiple and supply it with an

00:52:57,310 --> 00:53:07,420
array yes then you should maybe all

00:53:05,050 --> 00:53:09,760
source the transaction logic into into

00:53:07,420 --> 00:53:11,410
another object like creating this

00:53:09,760 --> 00:53:14,770
transaction in the back end somewhere

00:53:11,410 --> 00:53:16,300
and then rolling all your data mapper

00:53:14,770 --> 00:53:18,730
calls and afterwards finishing the

00:53:16,300 --> 00:53:21,850
transaction I think this is just yeah

00:53:18,730 --> 00:53:23,770
it's basically depends on the needs of

00:53:21,850 --> 00:53:27,190
your application like you have the

00:53:23,770 --> 00:53:29,170
transaction script pattern which which

00:53:27,190 --> 00:53:31,720
can be useful here managing traits

00:53:29,170 --> 00:53:34,690
action outside of your actual storage

00:53:31,720 --> 00:53:43,810
logic you only lost one is a rapid rap

00:53:34,690 --> 00:53:45,960
is okay more questions yeah then what's

00:53:43,810 --> 00:53:45,960
worse

00:53:46,760 --> 00:53:58,290
I'm sorry yes annotation based napping

00:53:53,040 --> 00:54:00,600
is doctoring to always claims that

00:53:58,290 --> 00:54:03,270
they're actually not doing active record

00:54:00,600 --> 00:54:05,610
but doing annotation based napping but

00:54:03,270 --> 00:54:08,550
in the end you still have a database in

00:54:05,610 --> 00:54:11,400
mind while writing your object because

00:54:08,550 --> 00:54:15,890
you need to ensure that an automatic

00:54:11,400 --> 00:54:18,270
mapping can happen and that actually

00:54:15,890 --> 00:54:20,430
destroys the idea of the data never

00:54:18,270 --> 00:54:23,130
paddled a little bit in my eyes there

00:54:20,430 --> 00:54:25,950
are people who see it differently you

00:54:23,130 --> 00:54:27,990
say okay doctrine2 is the Holy Grail and

00:54:25,950 --> 00:54:30,840
we can have both we have a data mapper

00:54:27,990 --> 00:54:33,480
and we have cool automation and

00:54:30,840 --> 00:54:35,850
cogeneration but in my eyes it's not the

00:54:33,480 --> 00:54:38,210
correct way because as a developer you

00:54:35,850 --> 00:54:40,950
do not come out of the corner of

00:54:38,210 --> 00:54:43,590
thinking in object relational mapping

00:54:40,950 --> 00:54:45,060
ideas when writing your object model and

00:54:43,590 --> 00:54:46,920
this is what we really need to get rid

00:54:45,060 --> 00:54:49,740
of we need to do object oriented

00:54:46,920 --> 00:54:53,250
modeling in the business model and then

00:54:49,740 --> 00:54:55,770
in a dedicated step write code to to map

00:54:53,250 --> 00:54:57,570
it to a database otherwise just by

00:54:55,770 --> 00:55:00,090
writing the annotations on okay I'm

00:54:57,570 --> 00:55:02,340
mapping this you know n2m relation to

00:55:00,090 --> 00:55:03,990
another object you still have in mind

00:55:02,340 --> 00:55:06,150
this is an m2m relation you don't have

00:55:03,990 --> 00:55:07,980
in mind this is a collection of whatever

00:55:06,150 --> 00:55:11,370
other objects you still have in mind

00:55:07,980 --> 00:55:14,550
yeah you will need a table to realize

00:55:11,370 --> 00:55:16,140
the m2m relation and all these things so

00:55:14,550 --> 00:55:19,920
it's not not the perfect solution

00:55:16,140 --> 00:55:22,230
anymore and something I find

00:55:19,920 --> 00:55:24,240
particularly difficult is when using a

00:55:22,230 --> 00:55:27,960
data mapper is use the example of an

00:55:24,240 --> 00:55:30,690
invoice well an invoice may have rows in

00:55:27,960 --> 00:55:33,060
it so do you load the whole thing

00:55:30,690 --> 00:55:36,480
invoice and rose from like one dating up

00:55:33,060 --> 00:55:37,950
a call or do you leave your invoice kind

00:55:36,480 --> 00:55:40,200
of half-finished is it work without

00:55:37,950 --> 00:55:43,530
access to your elbows if you've got any

00:55:40,200 --> 00:55:45,240
advice on dealing with that yeah if you

00:55:43,530 --> 00:55:47,880
combine the ideas of lazy initialization

00:55:45,240 --> 00:55:50,789
and the data mapper again you could just

00:55:47,880 --> 00:55:53,339
play some stop objects instead

00:55:50,789 --> 00:55:56,009
your invoice positions there these stop

00:55:53,339 --> 00:55:59,219
objects know about the data mapper and

00:55:56,009 --> 00:56:02,160
as soon as they are requested they can

00:55:59,219 --> 00:56:05,099
load themselves but yeah that is one

00:56:02,160 --> 00:56:07,410
thing then your model actually contains

00:56:05,099 --> 00:56:09,269
again some database logic but it does

00:56:07,410 --> 00:56:10,829
not know about that because you just

00:56:09,269 --> 00:56:14,579
implement the same interface in your

00:56:10,829 --> 00:56:16,829
stop objects and yeah working with your

00:56:14,579 --> 00:56:18,390
model does not know that there is some

00:56:16,829 --> 00:56:20,279
transparent loading in the background

00:56:18,390 --> 00:56:21,900
that your hands on case the case but

00:56:20,279 --> 00:56:23,759
there are solutions for that problem or

00:56:21,900 --> 00:56:30,029
at least solution intends for that

00:56:23,759 --> 00:56:32,429
problem okay so i think i'm pretty much

00:56:30,029 --> 00:56:34,759
done with my time i'm not sure yet

00:56:32,429 --> 00:56:37,769
because of the issues in the beginning

00:56:34,759 --> 00:56:39,449
the ideas of these data storage patterns

00:56:37,769 --> 00:56:41,160
have been taken from the book patterns

00:56:39,449 --> 00:56:44,309
of enterprise application architecture

00:56:41,160 --> 00:56:46,199
by martin fowler i really really highly

00:56:44,309 --> 00:56:48,660
recommend you to read that book it's

00:56:46,199 --> 00:56:50,699
very very interesting and he has some

00:56:48,660 --> 00:56:53,189
very very good practical examples

00:56:50,699 --> 00:56:56,219
showing how patterns are realized in in

00:56:53,189 --> 00:57:00,839
Java and C sharp and I think even C++

00:56:56,219 --> 00:57:02,400
occasionally he also discusses lots and

00:57:00,839 --> 00:57:04,049
lots of more patterns which are related

00:57:02,400 --> 00:57:05,549
to these storage things like the

00:57:04,049 --> 00:57:07,799
identity map the unit of work

00:57:05,549 --> 00:57:09,359
transactions for the things it's a

00:57:07,799 --> 00:57:11,579
really really good book it's also really

00:57:09,359 --> 00:57:13,380
funny to read so I lost quite a bit

00:57:11,579 --> 00:57:15,209
remaining it Martin photo is writing

00:57:13,380 --> 00:57:17,789
really really good books not so

00:57:15,209 --> 00:57:22,049
technically dry thanks a lot to him

00:57:17,789 --> 00:57:23,789
before inspiring me with these ideas so

00:57:22,049 --> 00:57:25,979
what should be the conclusion of this

00:57:23,789 --> 00:57:28,079
tall on the one hand as I start already

00:57:25,979 --> 00:57:30,689
told you in the very beginning parents

00:57:28,079 --> 00:57:32,369
are not the Holy Grail it's not the idea

00:57:30,689 --> 00:57:34,259
to use a pattern every time you're

00:57:32,369 --> 00:57:36,359
trying to solve a problem you need to

00:57:34,259 --> 00:57:38,880
adjust patterns so if you read these

00:57:36,359 --> 00:57:41,039
Martin Fowler book and compare it to my

00:57:38,880 --> 00:57:43,739
code examples here you will quite notice

00:57:41,039 --> 00:57:46,469
some differences but patterns are not

00:57:43,739 --> 00:57:48,689
code templates they're just ideas and

00:57:46,469 --> 00:57:51,150
you should adjust these ideas so if your

00:57:48,689 --> 00:57:53,219
concrete needs to your concrete problems

00:57:51,150 --> 00:57:55,829
in your project and not just blindly

00:57:53,219 --> 00:57:59,039
code them as we have one seeing them so

00:57:55,829 --> 00:58:01,499
they are not the holy grail patents

00:57:59,039 --> 00:58:02,599
assign names to good ideas so every

00:58:01,499 --> 00:58:04,819
problem has a good eye

00:58:02,599 --> 00:58:06,680
in the background even single once had a

00:58:04,819 --> 00:58:08,539
good idea in the background in the Java

00:58:06,680 --> 00:58:11,569
world and in long running processes

00:58:08,539 --> 00:58:14,239
singletons might still be of use in some

00:58:11,569 --> 00:58:16,339
points but not in PHP projects please do

00:58:14,239 --> 00:58:18,499
me a favor do not call the singleton

00:58:16,339 --> 00:58:20,450
anymore every time code is singleton

00:58:18,499 --> 00:58:24,049
some other developer is dying really

00:58:20,450 --> 00:58:25,999
really bloody death let us help you to

00:58:24,049 --> 00:58:28,249
talk about concepts so if you know many

00:58:25,999 --> 00:58:30,499
many patterns or at least the names and

00:58:28,249 --> 00:58:31,849
the familiar concepts behind that it's

00:58:30,499 --> 00:58:34,279
much easier to talk to your colleagues

00:58:31,849 --> 00:58:36,200
like how we should go into we should be

00:58:34,279 --> 00:58:38,239
going to use a data mapper here and the

00:58:36,200 --> 00:58:40,609
other colleagues data it's such a tiny

00:58:38,239 --> 00:58:42,680
application just made let us use active

00:58:40,609 --> 00:58:44,150
record is so much easier and you can get

00:58:42,680 --> 00:58:45,529
really to the point of bashing your

00:58:44,150 --> 00:58:47,450
heads against each other instead of

00:58:45,529 --> 00:58:50,509
discussing the implementation details or

00:58:47,450 --> 00:58:52,670
concept details on the back end and yeah

00:58:50,509 --> 00:58:55,400
parents can inspire you but don't take

00:58:52,670 --> 00:58:59,390
them to literally take the idea use the

00:58:55,400 --> 00:59:01,039
idea in yeah in a combination that it's

00:58:59,390 --> 00:59:04,489
really sensible for application and

00:59:01,039 --> 00:59:07,940
don't use them but blindly please any

00:59:04,489 --> 00:59:11,869
further questions left I need to check

00:59:07,940 --> 00:59:13,930
the time so how was it oh that's quite

00:59:11,869 --> 00:59:13,930
ok

00:59:14,570 --> 00:59:19,870
normal questions yes please

00:59:21,880 --> 00:59:30,760
I'm really sorry I didn't get you maybe

00:59:25,840 --> 00:59:32,320
there is a mic for you click appear to

00:59:30,760 --> 00:59:34,000
describe exactly like the difference

00:59:32,320 --> 00:59:34,990
between a shared object in a singleton

00:59:34,000 --> 00:59:37,510
because it looks like they're quite

00:59:34,990 --> 00:59:38,800
similar yeah yeah they look they're

00:59:37,510 --> 00:59:40,420
looking forward similar actually but

00:59:38,800 --> 00:59:43,090
there is a huge difference at singleton

00:59:40,420 --> 00:59:45,280
is always coupled to a class so there is

00:59:43,090 --> 00:59:48,400
a static dependency on one certain class

00:59:45,280 --> 00:59:50,320
like my single and get instance and you

00:59:48,400 --> 00:59:52,510
don't have a possibility to exchange

00:59:50,320 --> 00:59:54,490
that dependency to the club you cannot

00:59:52,510 --> 00:59:56,380
whatever make it request a derived class

00:59:54,490 --> 00:59:58,960
or something like that in your code and

00:59:56,380 --> 01:00:00,340
that is that is pretty evil and it

00:59:58,960 --> 01:00:02,740
shared object in the dependency

01:00:00,340 --> 01:00:05,410
injection manager can just be replaced

01:00:02,740 --> 01:00:09,370
during runtime just inserting a new

01:00:05,410 --> 01:00:11,440
object into the DIC that is the basic

01:00:09,370 --> 01:00:14,200
difference in it and the DIC is not

01:00:11,440 --> 01:00:16,150
global to your application so one module

01:00:14,200 --> 01:00:18,190
can use a different DIC than another

01:00:16,150 --> 01:00:21,550
module and you can instantly replace

01:00:18,190 --> 01:00:23,770
even share instances during runtime so

01:00:21,550 --> 01:00:27,100
that different functionality can use

01:00:23,770 --> 01:00:31,830
different objects for doing stuff so

01:00:27,100 --> 01:00:31,830
there's quite a difference here okay

01:00:33,910 --> 01:00:38,890
good I don't see any more hands hope I

01:00:36,579 --> 01:00:40,569
don't ignore anybody because there are

01:00:38,890 --> 01:00:43,690
lights and I can see you're really good

01:00:40,569 --> 01:00:46,059
up there yeah thank you for listening

01:00:43,690 --> 01:00:47,829
please rank this talk and join them

01:00:46,059 --> 01:00:49,359
feedback is very very important

01:00:47,829 --> 01:00:51,250
especially for this talk which is quite

01:00:49,359 --> 01:00:53,619
news the first time I did this talk and

01:00:51,250 --> 01:00:55,869
I really would like to hear what you

01:00:53,619 --> 01:00:58,980
have to say about it and if you liked it

01:00:55,869 --> 01:00:58,980

YouTube URL: https://www.youtube.com/watch?v=XY2HP9c2O0o


