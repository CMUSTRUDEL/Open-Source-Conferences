Title: PHP UK Conference 2011 - Running on Amazon EC2, by Jonathan Weiss
Publication date: 2012-03-15
Playlist: PHP UK Conference 2011
Description: 
	
Captions: 
	00:00:02,490 --> 00:00:07,519
on Skyrim which is a management site

00:00:05,190 --> 00:00:10,889
that automates a lot of those things on

00:00:07,519 --> 00:00:14,219
on amazon and this is like the way

00:00:10,889 --> 00:00:18,330
intact was a lot of PHP developers and

00:00:14,219 --> 00:00:19,949
or big sites on running on PHP so but

00:00:18,330 --> 00:00:22,980
the main focus of course Amazon Web

00:00:19,949 --> 00:00:25,500
Services who have has used already

00:00:22,980 --> 00:00:28,589
amazon ec2 and there's also a lot of

00:00:25,500 --> 00:00:33,180
okay so i can maybe skip a lot of the

00:00:28,589 --> 00:00:35,400
the introductory stuff who never or

00:00:33,180 --> 00:00:39,300
doesn't even know what amazon ec2 really

00:00:35,400 --> 00:00:43,650
is apart from maybe hurt the word so one

00:00:39,300 --> 00:00:46,550
or two okay so the the basic premise of

00:00:43,650 --> 00:00:49,560
Amazon ec2 it's a very very very simple

00:00:46,550 --> 00:00:51,920
thing it's a small change to to hosting

00:00:49,560 --> 00:00:55,230
as you know it from like traditional

00:00:51,920 --> 00:00:57,900
virtual server host you get you get a

00:00:55,230 --> 00:01:00,660
virtual linux machine or a virtual lunes

00:00:57,900 --> 00:01:01,920
machine or an open solaris machine with

00:01:00,660 --> 00:01:04,229
total root access when they can do

00:01:01,920 --> 00:01:07,259
whatever you want with it the big

00:01:04,229 --> 00:01:10,439
difference is that you only pay by the

00:01:07,259 --> 00:01:12,420
hour and you can get get a machine via

00:01:10,439 --> 00:01:15,119
an API call and you can get rid of it

00:01:12,420 --> 00:01:18,299
via an API call doesn't sound like a big

00:01:15,119 --> 00:01:21,090
difference but in practice it's a really

00:01:18,299 --> 00:01:24,630
really big one because if if you

00:01:21,090 --> 00:01:28,020
architecture your your application in a

00:01:24,630 --> 00:01:31,020
good way and you you have automation

00:01:28,020 --> 00:01:32,969
tools you can achieve a solution where

00:01:31,020 --> 00:01:36,030
you always have exactly as many servers

00:01:32,969 --> 00:01:37,710
that you need so for example and all of

00:01:36,030 --> 00:01:39,299
a lot of people who shut down during the

00:01:37,710 --> 00:01:41,549
night half of their machines because

00:01:39,299 --> 00:01:44,100
they don't need them who just have

00:01:41,549 --> 00:01:45,929
station systems running for an hour to a

00:01:44,100 --> 00:01:48,569
day where they test everything and then

00:01:45,929 --> 00:01:52,499
they're shut it down or cope with was of

00:01:48,569 --> 00:01:55,740
course like the with big loads big

00:01:52,499 --> 00:01:58,829
spikes and load and to just use Amazon

00:01:55,740 --> 00:02:00,780
for skating out this so this is the

00:01:58,829 --> 00:02:03,090
basic idea I get a virtual server that I

00:02:00,780 --> 00:02:05,459
could pay for by the hour there are a

00:02:03,090 --> 00:02:08,100
lot of additional features additional

00:02:05,459 --> 00:02:10,670
services around it that that some of

00:02:08,100 --> 00:02:12,720
those I will we will have a look at but

00:02:10,670 --> 00:02:14,970
some of those are just complimentary

00:02:12,720 --> 00:02:16,140
like load balancing there is a

00:02:14,970 --> 00:02:17,460
monitoring service

00:02:16,140 --> 00:02:20,670
and so on that you can have virtual

00:02:17,460 --> 00:02:22,590
private cloud which is like the idea

00:02:20,670 --> 00:02:26,400
that that I can only access machines by

00:02:22,590 --> 00:02:28,590
a an encryption cryptid tunnel and there

00:02:26,400 --> 00:02:30,150
is for example spot instances which is a

00:02:28,590 --> 00:02:32,580
very interesting concept where you can

00:02:30,150 --> 00:02:35,070
bid for machine and only get the machine

00:02:32,580 --> 00:02:37,709
if your bid is high enough which is of

00:02:35,070 --> 00:02:39,780
course course not not a good thing if

00:02:37,709 --> 00:02:41,280
your website is running on it but if you

00:02:39,780 --> 00:02:42,540
have like a synchronous workers who are

00:02:41,280 --> 00:02:44,760
converting videos or something like that

00:02:42,540 --> 00:02:46,709
and we don't care that it's running

00:02:44,760 --> 00:02:50,430
right now it should only be running like

00:02:46,709 --> 00:02:54,510
sometime this week it's a great great

00:02:50,430 --> 00:02:56,610
feature to save money so what do I have

00:02:54,510 --> 00:03:00,360
to do to run on easy to what do I have

00:02:56,610 --> 00:03:01,980
to to know about Amazon ec2 the basic

00:03:00,360 --> 00:03:03,930
steps are not not as much different as

00:03:01,980 --> 00:03:06,000
from from hosting on your own hearth or

00:03:03,930 --> 00:03:08,340
hosting a traditional data center you

00:03:06,000 --> 00:03:11,220
have to to like come up with idea where

00:03:08,340 --> 00:03:12,360
do I want to have my service I will talk

00:03:11,220 --> 00:03:15,750
about this in a minute this is a little

00:03:12,360 --> 00:03:16,620
bit different than then usually here for

00:03:15,750 --> 00:03:17,970
course to define what kind of

00:03:16,620 --> 00:03:19,320
architecture do we want to have what

00:03:17,970 --> 00:03:23,880
kind of service do I want to run and

00:03:19,320 --> 00:03:25,950
then probably the bigger problem is how

00:03:23,880 --> 00:03:28,019
do i configure and boot my instances in

00:03:25,950 --> 00:03:29,940
an automated fashion because I can I

00:03:28,019 --> 00:03:31,890
could get the most benefit out of Amazon

00:03:29,940 --> 00:03:34,110
if I have everything alternated from

00:03:31,890 --> 00:03:37,680
boots ripping the machine down to

00:03:34,110 --> 00:03:41,010
responding to load spikes so this is

00:03:37,680 --> 00:03:42,630
like our agenda if you want sir so what

00:03:41,010 --> 00:03:45,320
are those those regions and availability

00:03:42,630 --> 00:03:48,720
zone and I must tell you beforehand that

00:03:45,320 --> 00:03:51,420
Amazon unfortunately has the the the

00:03:48,720 --> 00:03:54,299
habit of naming things that everybody

00:03:51,420 --> 00:03:55,829
like understands that like as a concept

00:03:54,299 --> 00:03:57,959
a little bit differently than they used

00:03:55,829 --> 00:04:01,260
to yeah so and the first of those are

00:03:57,959 --> 00:04:02,700
regions and availability zones so an

00:04:01,260 --> 00:04:05,100
Amazon that speak there is no data

00:04:02,700 --> 00:04:08,220
center there is an availability zone

00:04:05,100 --> 00:04:09,660
whatever that means right so there are

00:04:08,220 --> 00:04:12,810
different regions in the world where

00:04:09,660 --> 00:04:14,940
amazon has data centers and every region

00:04:12,810 --> 00:04:16,229
is an individual easy to installation

00:04:14,940 --> 00:04:19,169
that means that it's not so easy to

00:04:16,229 --> 00:04:20,880
transfer data or objects that you have

00:04:19,169 --> 00:04:23,460
in one of those regions to another one

00:04:20,880 --> 00:04:25,349
so they're really separated which is a

00:04:23,460 --> 00:04:28,050
good thing that that means that even if

00:04:25,349 --> 00:04:29,670
like the whole American ec2 insulation

00:04:28,050 --> 00:04:31,800
has a problem

00:04:29,670 --> 00:04:35,130
the european network doesn't have any

00:04:31,800 --> 00:04:36,600
that is not related to this and it but

00:04:35,130 --> 00:04:39,230
it means that sometimes life is a little

00:04:36,600 --> 00:04:41,700
bit more complicated and the interesting

00:04:39,230 --> 00:04:43,530
all the most interesting thing is of

00:04:41,700 --> 00:04:45,200
course for you is a user that prices are

00:04:43,530 --> 00:04:50,430
a little bit different in those zones so

00:04:45,200 --> 00:04:52,680
of course because it liked like renting

00:04:50,430 --> 00:04:54,720
a server or renting renting spaces in

00:04:52,680 --> 00:04:57,240
the u.s. is different than then paying

00:04:54,720 --> 00:04:59,520
for it in Europe or in Asia so those are

00:04:57,240 --> 00:05:02,310
the reasons for the small differences

00:04:59,520 --> 00:05:05,490
and within such a region amazon has

00:05:02,310 --> 00:05:07,800
multiple data centers what you could

00:05:05,490 --> 00:05:10,020
call their availability zone so they say

00:05:07,800 --> 00:05:12,390
i have within like the u.s. region i

00:05:10,020 --> 00:05:15,660
have multiple such locations where you

00:05:12,390 --> 00:05:17,190
can start instances in reality and

00:05:15,660 --> 00:05:18,480
availability zone is not exactly the

00:05:17,190 --> 00:05:20,580
same thing as in data center because

00:05:18,480 --> 00:05:23,250
multiple data centers can make up one

00:05:20,580 --> 00:05:24,660
availability zone but the the

00:05:23,250 --> 00:05:26,660
abstractions good enough to think and

00:05:24,660 --> 00:05:29,850
availabilities on equal to data center

00:05:26,660 --> 00:05:31,440
and so it is within this availability

00:05:29,850 --> 00:05:34,470
zone where i start my machines where I

00:05:31,440 --> 00:05:36,960
have my storage where where everywhere

00:05:34,470 --> 00:05:42,440
like the virtual physical hardware

00:05:36,960 --> 00:05:46,020
really is and so those are the available

00:05:42,440 --> 00:05:47,580
zones where you can start service so if

00:05:46,020 --> 00:05:51,270
you if you boot an instance you have to

00:05:47,580 --> 00:05:53,850
choose where should it be and as I said

00:05:51,270 --> 00:05:55,320
those difference those different regions

00:05:53,850 --> 00:05:57,900
have different pricing but it's a really

00:05:55,320 --> 00:05:59,730
really minimal difference so you can

00:05:57,900 --> 00:06:02,100
decide do I want to have my service in

00:05:59,730 --> 00:06:03,960
the u.s. because I have us customers and

00:06:02,100 --> 00:06:06,330
it's the cheapest zone or do I want to

00:06:03,960 --> 00:06:07,860
have them in Europe because of European

00:06:06,330 --> 00:06:09,330
privacy laws because if you're

00:06:07,860 --> 00:06:11,070
regulation or just because I have

00:06:09,330 --> 00:06:14,160
European customers where want to have a

00:06:11,070 --> 00:06:15,780
good ping time but in every region there

00:06:14,160 --> 00:06:18,150
are different their multiple data

00:06:15,780 --> 00:06:20,430
centers for redundancy reasons for

00:06:18,150 --> 00:06:23,240
scalability reasons and also for

00:06:20,430 --> 00:06:25,500
organizational reasons within amazon so

00:06:23,240 --> 00:06:28,440
that you have they have data centers on

00:06:25,500 --> 00:06:30,480
the east coast of the of the US and the

00:06:28,440 --> 00:06:33,960
West Coast the European servers aren't

00:06:30,480 --> 00:06:36,300
double so Amazon is very secretive where

00:06:33,960 --> 00:06:39,210
they are exactly but at least they say

00:06:36,300 --> 00:06:42,610
they're somewhere around double and the

00:06:39,210 --> 00:06:46,360
the Asian service iron and Singapore

00:06:42,610 --> 00:06:47,680
so if you if you have an application you

00:06:46,360 --> 00:06:50,169
have now to decide whether I want us to

00:06:47,680 --> 00:06:51,789
boot my service I would say like in

00:06:50,169 --> 00:06:53,740
ninety-nine percent of the of the times

00:06:51,789 --> 00:06:56,020
you want everything within one of those

00:06:53,740 --> 00:06:57,789
availability zones so it's the

00:06:56,020 --> 00:07:00,430
equivalent to say everything is one data

00:06:57,789 --> 00:07:03,340
center I have very nice pink times

00:07:00,430 --> 00:07:05,650
everything is is close to each other

00:07:03,340 --> 00:07:08,789
traffic is free so with traffic within

00:07:05,650 --> 00:07:11,620
one availability zone is completely free

00:07:08,789 --> 00:07:13,569
so it doesn't differ a lot from a

00:07:11,620 --> 00:07:17,110
typical setup where you rent a wreck or

00:07:13,569 --> 00:07:19,169
you've rented like 55 machine somewhere

00:07:17,110 --> 00:07:21,610
and they are all in the same location

00:07:19,169 --> 00:07:23,740
but what Amazon allows you to do is to

00:07:21,610 --> 00:07:26,590
have more complex setups so you can say

00:07:23,740 --> 00:07:28,659
I don't want to rely on one availability

00:07:26,590 --> 00:07:31,240
zone and one data center it could have a

00:07:28,659 --> 00:07:35,469
network problem it could have like

00:07:31,240 --> 00:07:37,210
problem in availability so it's you can

00:07:35,469 --> 00:07:38,800
easily say i want to have half of my

00:07:37,210 --> 00:07:40,270
systems in one availability zone and the

00:07:38,800 --> 00:07:42,639
other half and another availability zone

00:07:40,270 --> 00:07:44,379
and then you could use the amazon load

00:07:42,639 --> 00:07:47,680
balancer to distribute the traffic

00:07:44,379 --> 00:07:50,169
between the both of those so even if

00:07:47,680 --> 00:07:52,080
like the the right one it has is

00:07:50,169 --> 00:07:55,300
completely host you can still deliver

00:07:52,080 --> 00:07:57,099
deliver responses to your users of

00:07:55,300 --> 00:07:58,539
course the big question is how do i how

00:07:57,099 --> 00:08:00,000
do I get this replication thing going

00:07:58,539 --> 00:08:02,800
right because the data doesn't magically

00:08:00,000 --> 00:08:05,199
travel someone from one data center to

00:08:02,800 --> 00:08:07,150
the other one if you use so amazon has a

00:08:05,199 --> 00:08:09,669
solution for this built-in if you use

00:08:07,150 --> 00:08:11,529
the host of my sequel version from them

00:08:09,669 --> 00:08:13,389
which i will talk about in a minute but

00:08:11,529 --> 00:08:16,960
if you use some kind of a different

00:08:13,389 --> 00:08:18,490
database or your own like data storage

00:08:16,960 --> 00:08:20,409
you have to come up with a solution how

00:08:18,490 --> 00:08:23,800
do I make sure that I have it like a

00:08:20,409 --> 00:08:25,810
duplicate in both data centers if you

00:08:23,800 --> 00:08:28,719
use if you use md the hosted em my

00:08:25,810 --> 00:08:31,569
sequel version it's done for you but if

00:08:28,719 --> 00:08:34,539
you use anything else it's your problem

00:08:31,569 --> 00:08:37,659
and this is the basic the basic idea was

00:08:34,539 --> 00:08:40,659
amazon ec2 amazon just takes care of

00:08:37,659 --> 00:08:43,089
booting a server for you everything else

00:08:40,659 --> 00:08:44,290
is your problem there i mean you can't

00:08:43,089 --> 00:08:46,870
have a little bit of load balancing you

00:08:44,290 --> 00:08:48,130
can have storage and so on but but

00:08:46,870 --> 00:08:51,459
amazon doesn't automatically

00:08:48,130 --> 00:08:54,149
reconfigures apache for you or deploys

00:08:51,459 --> 00:08:56,350
your code or something like that so

00:08:54,149 --> 00:08:58,090
everything up from the operating sister

00:08:56,350 --> 00:09:01,080
level is your responsibility so you

00:08:58,090 --> 00:09:02,860
still need an admin you still need to do

00:09:01,080 --> 00:09:04,210
configuration work you still need to

00:09:02,860 --> 00:09:06,670
deploy your latest version of the code

00:09:04,210 --> 00:09:08,530
you still have to to know oh my database

00:09:06,670 --> 00:09:09,850
servers down maybe I should boot a

00:09:08,530 --> 00:09:11,770
second one and replace it or something

00:09:09,850 --> 00:09:13,930
like that but the great thing is that

00:09:11,770 --> 00:09:19,060
you can do this automatically so you can

00:09:13,930 --> 00:09:21,120
respond to it in an automated fashion so

00:09:19,060 --> 00:09:25,240
if you look at the bigger picture of

00:09:21,120 --> 00:09:26,890
your architecture usually for web

00:09:25,240 --> 00:09:29,140
application you have something like this

00:09:26,890 --> 00:09:31,090
so you have a load balancer that

00:09:29,140 --> 00:09:32,410
distributes you load on multiple

00:09:31,090 --> 00:09:34,570
application service and you have your

00:09:32,410 --> 00:09:37,690
database mass or your database life and

00:09:34,570 --> 00:09:39,870
so on and probably you you're dumping

00:09:37,690 --> 00:09:42,700
regularly to to something like Amazon s3

00:09:39,870 --> 00:09:44,290
so not not really different the big

00:09:42,700 --> 00:09:46,150
difference is this this monitoring

00:09:44,290 --> 00:09:47,740
component that usually you want to have

00:09:46,150 --> 00:09:49,720
in your system because what you can do

00:09:47,740 --> 00:09:51,010
is you can observe the individual

00:09:49,720 --> 00:09:53,590
components and see are they still there

00:09:51,010 --> 00:09:57,100
if not replace them with a working one

00:09:53,590 --> 00:09:59,980
or just add more application servers as

00:09:57,100 --> 00:10:01,330
the low disk is going up or shut them

00:09:59,980 --> 00:10:04,720
down during the night if you if you

00:10:01,330 --> 00:10:06,730
don't need them for example so this is

00:10:04,720 --> 00:10:08,260
this is what what we do but you can of

00:10:06,730 --> 00:10:10,300
course just have a development machine

00:10:08,260 --> 00:10:13,150
with the simple thing that that I saw

00:10:10,300 --> 00:10:15,130
was just a cron job that in the morning

00:10:13,150 --> 00:10:17,680
at eight o'clock boots up to machines

00:10:15,130 --> 00:10:20,350
and it in the evening at 9pm shuts them

00:10:17,680 --> 00:10:23,770
down because this is the load pattern of

00:10:20,350 --> 00:10:25,270
this application and you only pay of

00:10:23,770 --> 00:10:29,650
course for those for those hours that

00:10:25,270 --> 00:10:31,990
that you had the service so if if you

00:10:29,650 --> 00:10:33,670
look at it this architecture picture

00:10:31,990 --> 00:10:35,700
there like one or two things that are

00:10:33,670 --> 00:10:38,530
different from from a normal data center

00:10:35,700 --> 00:10:42,460
one of those is the elastic IP that you

00:10:38,530 --> 00:10:44,140
see on the left and it is in an Amazon

00:10:42,460 --> 00:10:46,420
every machine that your boot has a

00:10:44,140 --> 00:10:50,410
random IP address and you don't know the

00:10:46,420 --> 00:10:52,000
IP address beforehand which makes sense

00:10:50,410 --> 00:10:55,030
because because Amazon cannot like

00:10:52,000 --> 00:10:57,610
reserve hundreds of thousands of IP

00:10:55,030 --> 00:10:59,680
addresses for you because the IP

00:10:57,610 --> 00:11:02,770
addresses are spare I think even like

00:10:59,680 --> 00:11:05,920
like the latest the other last APM IP

00:11:02,770 --> 00:11:08,380
four block is it was allocated so there

00:11:05,920 --> 00:11:10,130
are no IP address is left so Amazon only

00:11:08,380 --> 00:11:12,440
has like a like a couple

00:11:10,130 --> 00:11:13,790
those if you want it so so every time

00:11:12,440 --> 00:11:16,190
you boot the server you get a random IP

00:11:13,790 --> 00:11:17,810
address which is a nice of course for

00:11:16,190 --> 00:11:19,970
your public website right you don't want

00:11:17,810 --> 00:11:25,030
to update dns every every now and then

00:11:19,970 --> 00:11:27,560
or so so in order to to to overcome this

00:11:25,030 --> 00:11:30,830
there is the concept of elastic IPS

00:11:27,560 --> 00:11:33,170
which means a static IP address that

00:11:30,830 --> 00:11:35,840
that you maintain that you can use for

00:11:33,170 --> 00:11:38,510
dns and but is it is elastic because you

00:11:35,840 --> 00:11:41,540
can move it by an api call from one

00:11:38,510 --> 00:11:42,380
instance to the other that means usually

00:11:41,540 --> 00:11:44,420
you would use this for your load

00:11:42,380 --> 00:11:46,250
balancer or for your for your main web

00:11:44,420 --> 00:11:47,990
server something like that and you would

00:11:46,250 --> 00:11:49,970
use it in DNS so your users don't have

00:11:47,990 --> 00:11:52,010
to like you don't have to update dns if

00:11:49,970 --> 00:11:53,480
anything changes but you can migrate it

00:11:52,010 --> 00:11:55,760
dynamically from one instance to the

00:11:53,480 --> 00:11:58,190
other so for example what it allows you

00:11:55,760 --> 00:12:00,650
to do is if you're really paranoid

00:11:58,190 --> 00:12:03,770
during deployment where you can do is

00:12:00,650 --> 00:12:06,470
clone this whole setup boot up exact the

00:12:03,770 --> 00:12:08,090
exact copy of it test the new version on

00:12:06,470 --> 00:12:09,860
it check if everything is running

00:12:08,090 --> 00:12:11,690
smoothly and if it does switch the

00:12:09,860 --> 00:12:14,300
elastic IP from the the old load

00:12:11,690 --> 00:12:15,710
balancer to the new one and then see is

00:12:14,300 --> 00:12:17,780
everything running fine on the new set

00:12:15,710 --> 00:12:20,480
up just shut down the old installation

00:12:17,780 --> 00:12:22,400
and if it doesn't switch it back so

00:12:20,480 --> 00:12:24,320
maybe you paid like for an hour for like

00:12:22,400 --> 00:12:26,660
twice the sizes of the these instances

00:12:24,320 --> 00:12:28,250
that you need you needed to have but

00:12:26,660 --> 00:12:30,200
it's only for an hour and the prices are

00:12:28,250 --> 00:12:31,700
like cents a minute so maybe you spent

00:12:30,200 --> 00:12:33,650
like ten dollars twenty dollars or

00:12:31,700 --> 00:12:35,390
something like that but you had a fully

00:12:33,650 --> 00:12:37,390
redundant set up with maybe fifty

00:12:35,390 --> 00:12:39,890
machines here and fifty machines there

00:12:37,390 --> 00:12:42,410
so this is the the great thing about

00:12:39,890 --> 00:12:45,710
those elastic IP addresses that you can

00:12:42,410 --> 00:12:49,970
allocate them and change them by an API

00:12:45,710 --> 00:12:51,410
call the interesting part again is

00:12:49,970 --> 00:12:53,600
you're paying for those if you're not

00:12:51,410 --> 00:12:56,150
using them which again makes sense

00:12:53,600 --> 00:12:58,700
because amazon wants to do like punish

00:12:56,150 --> 00:13:00,200
you if you if you like acquire a lot of

00:12:58,700 --> 00:13:04,670
those but don't use them because they're

00:13:00,200 --> 00:13:08,390
as paris resource the other different

00:13:04,670 --> 00:13:11,420
thing is that there are two types of

00:13:08,390 --> 00:13:15,860
instances on amazon the older the older

00:13:11,420 --> 00:13:17,570
instance type worked very similar to a

00:13:15,860 --> 00:13:19,100
live CD two alike if you if you insert

00:13:17,570 --> 00:13:21,320
the linux live CD into your computer and

00:13:19,100 --> 00:13:24,010
you boot it up you have like a complete

00:13:21,320 --> 00:13:27,140
finan of linux you can do anything you

00:13:24,010 --> 00:13:28,400
you can write to lot like your local

00:13:27,140 --> 00:13:30,620
disk you can do anything that you want

00:13:28,400 --> 00:13:34,130
to but if you shut down the machine

00:13:30,620 --> 00:13:37,010
every changes are lost right and then

00:13:34,130 --> 00:13:39,980
this is like how most of the the Amazon

00:13:37,010 --> 00:13:41,960
instances are used to work that by

00:13:39,980 --> 00:13:43,220
design because of course if you if you

00:13:41,960 --> 00:13:44,450
boot up a virtual machine you don't and

00:13:43,220 --> 00:13:47,120
you shut it down you don't want that the

00:13:44,450 --> 00:13:48,920
next person using the actual Hardware

00:13:47,120 --> 00:13:52,010
underneath gets access to your own data

00:13:48,920 --> 00:13:54,770
right so it has to be deleted which

00:13:52,010 --> 00:13:56,480
means it's probably not the best idea to

00:13:54,770 --> 00:13:58,550
have my database server running like

00:13:56,480 --> 00:13:59,660
this because if it's if it's crashing if

00:13:58,550 --> 00:14:03,860
I just shut it down for the night I

00:13:59,660 --> 00:14:05,960
don't want to lose all my data and and

00:14:03,860 --> 00:14:08,089
in order to to comprehend it also the

00:14:05,960 --> 00:14:13,520
you have the elastic block store the EBS

00:14:08,089 --> 00:14:15,110
drives so those are a net-like like very

00:14:13,520 --> 00:14:17,870
similar to I skazhi for example so you

00:14:15,110 --> 00:14:19,760
have a network block device that you can

00:14:17,870 --> 00:14:22,820
attach to a server and this storage is

00:14:19,760 --> 00:14:24,529
permanent and redundant them so in our

00:14:22,820 --> 00:14:28,670
example of the my sequel server you

00:14:24,529 --> 00:14:31,610
would you would say that my mind made

00:14:28,670 --> 00:14:33,290
database server has such a drive and you

00:14:31,610 --> 00:14:34,730
store all the my sequel data on it so

00:14:33,290 --> 00:14:38,120
you configure my secret to store please

00:14:34,730 --> 00:14:40,700
store the data under / volume / data for

00:14:38,120 --> 00:14:42,920
example which is such an EBS drive so if

00:14:40,700 --> 00:14:44,810
it crashed you can just do the second

00:14:42,920 --> 00:14:47,870
instance and remount this volume and all

00:14:44,810 --> 00:14:50,360
your data is still there or you can snap

00:14:47,870 --> 00:14:52,520
shot it and create a new volume out of

00:14:50,360 --> 00:14:55,700
this snapshot and attach it to a new

00:14:52,520 --> 00:14:57,740
instance so one thing that is a lot

00:14:55,700 --> 00:14:59,480
easier with things like that is my

00:14:57,740 --> 00:15:00,830
sequel replication for example my secret

00:14:59,480 --> 00:15:02,630
application is a pain in the ass to set

00:15:00,830 --> 00:15:06,500
up and if you have a lot a large data

00:15:02,630 --> 00:15:08,510
set it takes a lot of time to to create

00:15:06,500 --> 00:15:10,190
a new slave because you have to do dump

00:15:08,510 --> 00:15:11,360
on the master which if you have a big

00:15:10,190 --> 00:15:14,240
data set let's say it takes five hours

00:15:11,360 --> 00:15:16,550
and maybe blocks tables and you have

00:15:14,240 --> 00:15:18,650
slower responses or maybe even downtime

00:15:16,550 --> 00:15:20,450
within those five hours and then you

00:15:18,650 --> 00:15:22,790
have to copy over to the this dump to

00:15:20,450 --> 00:15:25,220
the slave over the network which can

00:15:22,790 --> 00:15:27,290
take maybe like 10-15 minutes maybe an

00:15:25,220 --> 00:15:29,270
hour if the dump is so big and then you

00:15:27,290 --> 00:15:30,589
have to reload the dump on the slave

00:15:29,270 --> 00:15:33,350
which if the dump took five hours

00:15:30,589 --> 00:15:36,260
reading that we like playing in the dump

00:15:33,350 --> 00:15:37,760
takes at least seven or eight hours so

00:15:36,260 --> 00:15:39,620
once the slave

00:15:37,760 --> 00:15:41,900
is like fully installed you have already

00:15:39,620 --> 00:15:44,570
a replication lag of 13 14 hours maybe

00:15:41,900 --> 00:15:46,760
so it has text again an hour so for this

00:15:44,570 --> 00:15:49,460
life to keep up and everything is manual

00:15:46,760 --> 00:15:52,100
and everything is error prone and not

00:15:49,460 --> 00:15:54,170
not very nice with EBS volumes what you

00:15:52,100 --> 00:15:56,750
can do is just do a snapshot on the

00:15:54,170 --> 00:15:58,790
master which takes even of on large

00:15:56,750 --> 00:16:00,320
disks and maybe a minute or two and it

00:15:58,790 --> 00:16:02,570
isn't is incremental so if you already

00:16:00,320 --> 00:16:03,710
did one doing the next one is takes only

00:16:02,570 --> 00:16:05,420
a couple of seconds depending on how

00:16:03,710 --> 00:16:07,280
much data you changed and then you

00:16:05,420 --> 00:16:09,230
create a new volume out of the snapshot

00:16:07,280 --> 00:16:11,450
for the slave which also also takes

00:16:09,230 --> 00:16:13,630
minutes or seconds and then you have the

00:16:11,450 --> 00:16:16,490
slave boots up and has the exact copy

00:16:13,630 --> 00:16:19,130
like a bit for bit or let the master

00:16:16,490 --> 00:16:21,820
head so maybe you have again replication

00:16:19,130 --> 00:16:24,710
lack of a minute or two but not 13 hours

00:16:21,820 --> 00:16:28,370
the important thing to understand about

00:16:24,710 --> 00:16:30,860
those disks is that it's not a network

00:16:28,370 --> 00:16:32,990
file system so it's not attached tubule

00:16:30,860 --> 00:16:34,760
to multiple servers that at one time so

00:16:32,990 --> 00:16:37,460
it's only one server can have this disk

00:16:34,760 --> 00:16:39,800
so it's it's not like NFS it's more like

00:16:37,460 --> 00:16:42,050
like really a hardest that you can on

00:16:39,800 --> 00:16:45,440
again via an API call put from one

00:16:42,050 --> 00:16:48,260
server to the other and this is also

00:16:45,440 --> 00:16:53,090
probably the the biggest drawback of

00:16:48,260 --> 00:16:55,400
Amazon ec2 that that your disks are over

00:16:53,090 --> 00:16:57,140
the network and that means that the

00:16:55,400 --> 00:16:58,880
performance of course not the best so if

00:16:57,140 --> 00:17:01,370
you have a very very right heavy my

00:16:58,880 --> 00:17:04,550
sequel set up this will this will be

00:17:01,370 --> 00:17:06,110
like your bottleneck so for most

00:17:04,550 --> 00:17:10,190
installations it's not a problem because

00:17:06,110 --> 00:17:12,260
most installations right to my sequel

00:17:10,190 --> 00:17:13,640
and data and indices fits in RAM and

00:17:12,260 --> 00:17:15,770
you're not depending you're not blocking

00:17:13,640 --> 00:17:17,510
on the as increments my secret threats

00:17:15,770 --> 00:17:18,680
that are writing it to disk so usually

00:17:17,510 --> 00:17:19,820
it's not a problem but if you're really

00:17:18,680 --> 00:17:22,760
really right have if you have like

00:17:19,820 --> 00:17:24,949
multiple thousands of of write requests

00:17:22,760 --> 00:17:26,480
per second this will will kill you we

00:17:24,949 --> 00:17:29,900
can because you cannot just say oh let

00:17:26,480 --> 00:17:31,040
by a couple of SSDs and like so solve

00:17:29,900 --> 00:17:34,610
the problem for a couple of months or

00:17:31,040 --> 00:17:35,870
something like that so if you have a

00:17:34,610 --> 00:17:37,970
very right heavy application you should

00:17:35,870 --> 00:17:40,220
consider the test at least the

00:17:37,970 --> 00:17:42,380
performance of the EBS volumes and what

00:17:40,220 --> 00:17:44,750
you can do in order to to improve the

00:17:42,380 --> 00:17:47,930
performance is have a soft right on top

00:17:44,750 --> 00:17:50,270
of those volumes you don't need for

00:17:47,930 --> 00:17:51,530
redundancy really reasons but you can it

00:17:50,270 --> 00:17:53,690
can improve on Susan

00:17:51,530 --> 00:17:56,150
performance because sometimes if you

00:17:53,690 --> 00:18:00,650
have like 10 discs ever a modern machine

00:17:56,150 --> 00:18:02,540
and one can be randomly slow because the

00:18:00,650 --> 00:18:04,070
general as a general effect in Amazon

00:18:02,540 --> 00:18:05,780
that if you have like for example 50

00:18:04,070 --> 00:18:09,680
machines 11 of those will be a little

00:18:05,780 --> 00:18:13,070
bit slower than the others and it's it's

00:18:09,680 --> 00:18:15,380
just an inherent inherent characteristic

00:18:13,070 --> 00:18:16,850
of like a big data centers amazon has

00:18:15,380 --> 00:18:19,240
because if you have ten thousands of

00:18:16,850 --> 00:18:21,560
machines a physical machines was like

00:18:19,240 --> 00:18:23,150
likes if you have 10 sub machine a

00:18:21,560 --> 00:18:24,830
physical machines let's say they have

00:18:23,150 --> 00:18:27,050
let then 60,000 virtual machines running

00:18:24,830 --> 00:18:28,640
on top of it and if if you're landing on

00:18:27,050 --> 00:18:30,680
a machine where somebody else is just

00:18:28,640 --> 00:18:32,120
like hammering the disk your performance

00:18:30,680 --> 00:18:36,470
will of course this performance will of

00:18:32,120 --> 00:18:38,630
course also be worse so if you have you

00:18:36,470 --> 00:18:41,090
should be used to like performance

00:18:38,630 --> 00:18:44,720
variation in within amazon so if you

00:18:41,090 --> 00:18:46,580
have 50 machines the chances are high

00:18:44,720 --> 00:18:49,010
that one or two will behave like ten

00:18:46,580 --> 00:18:50,660
percent slower than the others and woozy

00:18:49,010 --> 00:18:52,760
be assets it's like especially painful

00:18:50,660 --> 00:18:55,460
if you if you like waiting for for disc

00:18:52,760 --> 00:19:02,630
sees that's why a raid volume can help a

00:18:55,460 --> 00:19:05,080
lot the the other thing that amazon

00:19:02,630 --> 00:19:08,240
offers you is the elastic load balancing

00:19:05,080 --> 00:19:10,700
which simply means that emma's that you

00:19:08,240 --> 00:19:12,650
can register instances again via API

00:19:10,700 --> 00:19:16,010
call that amazon will automatically load

00:19:12,650 --> 00:19:18,110
balance and you distribute you get a

00:19:16,010 --> 00:19:20,930
cname at the NSC neum that you that you

00:19:18,110 --> 00:19:22,760
distribute to your users because it's a

00:19:20,930 --> 00:19:26,120
very ugly one of course you you just

00:19:22,760 --> 00:19:28,910
Elias you're like www example.com to the

00:19:26,120 --> 00:19:30,320
slow princessy name and then it disturb

00:19:28,910 --> 00:19:32,930
you to distribute traffic to your

00:19:30,320 --> 00:19:35,420
instances at the great thing about it is

00:19:32,930 --> 00:19:37,730
that it can start and stop instances and

00:19:35,420 --> 00:19:39,980
depending on their load so you can say I

00:19:37,730 --> 00:19:41,600
want to have like a pool and auto

00:19:39,980 --> 00:19:43,550
scaling pool of instances and I want to

00:19:41,600 --> 00:19:45,950
start and stop them depending on how

00:19:43,550 --> 00:19:48,820
like how big the CPU consumption Ram

00:19:45,950 --> 00:19:51,650
consumption and so I someone is in

00:19:48,820 --> 00:19:54,410
practice we see a lot more a lot more

00:19:51,650 --> 00:19:55,850
people using like an actual instance

00:19:54,410 --> 00:19:58,010
with a software load pants on top of it

00:19:55,850 --> 00:19:59,840
instead of those because you have a fine

00:19:58,010 --> 00:20:01,580
more fine grid control which you are

00:19:59,840 --> 00:20:04,700
else they want to send to which backends

00:20:01,580 --> 00:20:05,389
what you do I want to use sticky

00:20:04,700 --> 00:20:06,799
sessions but

00:20:05,389 --> 00:20:08,440
for those urls and for those back-end

00:20:06,799 --> 00:20:11,239
services so if you have a more complex

00:20:08,440 --> 00:20:12,979
application usually you tend to use your

00:20:11,239 --> 00:20:14,599
own load balancing and then maybe in

00:20:12,979 --> 00:20:17,209
front of it for redundancy reasons you

00:20:14,599 --> 00:20:19,820
have the the Amazon load balancing the

00:20:17,209 --> 00:20:21,619
only the only disadvantage that that you

00:20:19,820 --> 00:20:24,289
have is of course if you do software

00:20:21,619 --> 00:20:26,450
opens in one instance you cannot scale

00:20:24,289 --> 00:20:28,219
past one gigabit per second because

00:20:26,450 --> 00:20:30,889
every instance has just a gigabit

00:20:28,219 --> 00:20:32,769
network card so if you if you use it in

00:20:30,889 --> 00:20:35,269
the cell open so this is like your your

00:20:32,769 --> 00:20:37,219
your single point of failure for network

00:20:35,269 --> 00:20:39,169
and traffic sorry your traffic goes

00:20:37,219 --> 00:20:40,719
through your instance and that means if

00:20:39,169 --> 00:20:43,309
you have more than one gig per second

00:20:40,719 --> 00:20:46,099
you have to use multiple ones all you

00:20:43,309 --> 00:20:47,989
you use it vlb ones but then as I said

00:20:46,099 --> 00:20:55,820
one gift per second you have to be

00:20:47,989 --> 00:20:57,859
really big to have so much traffic the

00:20:55,820 --> 00:21:00,379
other interesting thing that amazon

00:20:57,859 --> 00:21:04,159
offers is the relational data store

00:21:00,379 --> 00:21:06,559
which as I said you get from what you

00:21:04,159 --> 00:21:08,509
get from amazon is an instance we have

00:21:06,559 --> 00:21:09,919
root access so you can log in configure

00:21:08,509 --> 00:21:13,059
my sequel and there you have your

00:21:09,919 --> 00:21:15,769
database server but as we as we just

00:21:13,059 --> 00:21:18,200
learned like my signal replications

00:21:15,769 --> 00:21:20,179
really pain in the ass and that's why

00:21:18,200 --> 00:21:21,950
amazon has like a hosted my sequel

00:21:20,179 --> 00:21:23,899
installation so they will take care of

00:21:21,950 --> 00:21:26,440
all the installation and configuration

00:21:23,899 --> 00:21:28,700
of my sequel they will take care of

00:21:26,440 --> 00:21:31,279
updating it if there are security

00:21:28,700 --> 00:21:33,019
patches and the very interesting thing

00:21:31,279 --> 00:21:35,149
is that they will take care of incidence

00:21:33,019 --> 00:21:39,079
instantiating newsnew read slaves or

00:21:35,149 --> 00:21:41,239
even a master master set up so this is

00:21:39,079 --> 00:21:44,179
very very easy with their set up to say

00:21:41,239 --> 00:21:45,709
I want to have like two and a new read

00:21:44,179 --> 00:21:47,809
slaves and within minutes you get them

00:21:45,709 --> 00:21:50,179
it's only an API call to to call for

00:21:47,809 --> 00:21:51,619
them and behind the scenes amazon is

00:21:50,179 --> 00:21:53,359
doing the exactly the same things that i

00:21:51,619 --> 00:21:54,739
just told you like doing the snapshot

00:21:53,359 --> 00:21:57,019
mounting than the other UBS volume and

00:21:54,739 --> 00:21:59,419
so on but you don't have to deal with it

00:21:57,019 --> 00:22:00,950
especially for for like Massa Massa

00:21:59,419 --> 00:22:04,369
replications across multiple data

00:22:00,950 --> 00:22:06,259
centers it's very very nice because

00:22:04,369 --> 00:22:08,209
because you're in reality you're talking

00:22:06,259 --> 00:22:10,339
to a my simple proxy installation of

00:22:08,209 --> 00:22:12,289
customized equal proxy and that Amazon

00:22:10,339 --> 00:22:15,139
wrote and they're distributing the the

00:22:12,289 --> 00:22:17,059
queries to all masters so even if if the

00:22:15,139 --> 00:22:18,770
mass and vine one of the available ities

00:22:17,059 --> 00:22:20,240
on its down you

00:22:18,770 --> 00:22:23,420
transparently being redirected to the

00:22:20,240 --> 00:22:26,120
other one and as soon as it it's up

00:22:23,420 --> 00:22:29,480
again and Amazon will sink the data so

00:22:26,120 --> 00:22:31,310
it's they're not using the the my sequel

00:22:29,480 --> 00:22:34,130
standard replication for this they use

00:22:31,310 --> 00:22:35,960
their own proxy installation or and for

00:22:34,130 --> 00:22:39,230
this which means that you have really

00:22:35,960 --> 00:22:41,420
synchronous Massa Massa setups the big

00:22:39,230 --> 00:22:43,760
drawback is that you have to define a

00:22:41,420 --> 00:22:45,920
four-hour window within every week where

00:22:43,760 --> 00:22:47,750
Amazon can do maintenance work so where

00:22:45,920 --> 00:22:50,030
can they in theory like take down your

00:22:47,750 --> 00:22:51,560
database install patches or move it from

00:22:50,030 --> 00:22:54,260
one physical box to another one because

00:22:51,560 --> 00:22:57,620
the one the first box has problems and

00:22:54,260 --> 00:23:00,380
for four hours is like a lot of time and

00:22:57,620 --> 00:23:03,080
I never saw them really it really really

00:23:00,380 --> 00:23:04,970
use the full extent of four hours but

00:23:03,080 --> 00:23:07,880
what you can do against it is to have

00:23:04,970 --> 00:23:09,410
this master master and set up and what

00:23:07,880 --> 00:23:10,580
Amazon of course will do is they do

00:23:09,410 --> 00:23:11,930
maintenance work in one master

00:23:10,580 --> 00:23:14,320
transparently redirected to the other

00:23:11,930 --> 00:23:16,070
one and then bring this back up again

00:23:14,320 --> 00:23:17,810
transparently redirect you to the other

00:23:16,070 --> 00:23:21,410
one and do the maintence work on the DA

00:23:17,810 --> 00:23:22,730
and the one that you've just used but of

00:23:21,410 --> 00:23:24,620
course the drawback is you have to pay

00:23:22,730 --> 00:23:26,360
for both so you have two instances and

00:23:24,620 --> 00:23:27,710
but if you have complex my simple

00:23:26,360 --> 00:23:28,910
installations this is definitely a thing

00:23:27,710 --> 00:23:30,850
that you that you should have a look at

00:23:28,910 --> 00:23:33,560
it because you don't have to hassle with

00:23:30,850 --> 00:23:36,350
with replication setups replication legs

00:23:33,560 --> 00:23:40,010
and instantiating a new REITs life or

00:23:36,350 --> 00:23:41,450
something like that yourself so I've

00:23:40,010 --> 00:23:43,430
been talking a lot about all those those

00:23:41,450 --> 00:23:46,370
instances what can what kind of

00:23:43,430 --> 00:23:48,640
instances can you start on amazon amazon

00:23:46,370 --> 00:23:52,400
has nine different types of service and

00:23:48,640 --> 00:23:54,500
there is no no no other instance type

00:23:52,400 --> 00:23:57,560
that you can choose from so you either

00:23:54,500 --> 00:24:00,680
choose pick one of those or you that

00:23:57,560 --> 00:24:01,910
there is nothing else on amazon so you

00:24:00,680 --> 00:24:04,190
cannot say oh I want to have this

00:24:01,910 --> 00:24:06,140
instance but i will pay you 200 bucks if

00:24:04,190 --> 00:24:08,060
you like to stick ssds unto it or i'll

00:24:06,140 --> 00:24:09,800
give me a little bit more rama so so

00:24:08,060 --> 00:24:14,800
those are the only instant steps that

00:24:09,800 --> 00:24:18,950
you have they start with small tiny and

00:24:14,800 --> 00:24:21,080
slow but cheap up to very very big very

00:24:18,950 --> 00:24:23,300
expensive and you have to you can choose

00:24:21,080 --> 00:24:25,250
what kind of work do I have and what

00:24:23,300 --> 00:24:29,510
fits my problem best what fits my budget

00:24:25,250 --> 00:24:32,240
and then decide what you use the the

00:24:29,510 --> 00:24:33,490
great thing is that that running one

00:24:32,240 --> 00:24:36,440
instead

00:24:33,490 --> 00:24:39,500
1000 RS cost us exactly is the same as

00:24:36,440 --> 00:24:41,600
running 1000 instances for one hour so

00:24:39,500 --> 00:24:46,130
you can you can tackle very very

00:24:41,600 --> 00:24:47,570
different problems than than before what

00:24:46,130 --> 00:24:49,640
you're always like committed to is one

00:24:47,570 --> 00:24:50,990
hour so if you if you have an instance

00:24:49,640 --> 00:24:53,090
that's running for 30 minutes you also

00:24:50,990 --> 00:24:55,130
pay the the hourly price for full hour

00:24:53,090 --> 00:24:59,030
if you have an instance at once for like

00:24:55,130 --> 00:25:01,670
one hour 59 minutes you pay for two so

00:24:59,030 --> 00:25:04,100
this is the hourly price and if you if

00:25:01,670 --> 00:25:07,130
you say okay if I run it like 24 7 4 30

00:25:04,100 --> 00:25:10,010
days a week this is 30 days a month this

00:25:07,130 --> 00:25:13,490
would be the the monthly price which I

00:25:10,010 --> 00:25:16,310
don't know how it is in and the UK but

00:25:13,490 --> 00:25:19,490
in Germany this is like not the cheapest

00:25:16,310 --> 00:25:22,310
kind of hosting that you can get so in

00:25:19,490 --> 00:25:23,810
Germany we get we have a lot of very

00:25:22,310 --> 00:25:26,150
cheap hosting companies where I can get

00:25:23,810 --> 00:25:28,850
like a machine that is like roughly as

00:25:26,150 --> 00:25:30,560
fast as this one for maybe maybe 100

00:25:28,850 --> 00:25:34,490
euros or something like that or even

00:25:30,560 --> 00:25:37,340
even a lot cheaper but the great thing

00:25:34,490 --> 00:25:39,140
to keep in mind is that this is if you

00:25:37,340 --> 00:25:40,340
you committed yourself on hourly price

00:25:39,140 --> 00:25:41,960
so you can shut it down if you don't

00:25:40,340 --> 00:25:45,310
need to you can just have those on

00:25:41,960 --> 00:25:50,150
demand there is there is also a

00:25:45,310 --> 00:25:53,540
different mode of of acquiring with us

00:25:50,150 --> 00:25:55,520
and this is other reserved instances so

00:25:53,540 --> 00:25:58,550
the price listed I just so showed you is

00:25:55,520 --> 00:26:00,530
the on demand list price if you commit

00:25:58,550 --> 00:26:02,690
for one hour yeah so you can stop using

00:26:00,530 --> 00:26:04,030
you can boot 1000 instances and say I

00:26:02,690 --> 00:26:05,960
don't want them after one hour and

00:26:04,030 --> 00:26:09,350
amazon has to take them back and you

00:26:05,960 --> 00:26:11,360
only pay for for one hour but what you

00:26:09,350 --> 00:26:14,720
can do is commit for for a longer time

00:26:11,360 --> 00:26:17,300
for long up time period and then we save

00:26:14,720 --> 00:26:20,330
money on because amazon or office with

00:26:17,300 --> 00:26:22,040
lower rates so for example if I have a

00:26:20,330 --> 00:26:24,650
small web application I will always run

00:26:22,040 --> 00:26:25,850
my database master right I don't shut it

00:26:24,650 --> 00:26:28,730
down during the night because my users

00:26:25,850 --> 00:26:30,740
cannot access anything so if I have am

00:26:28,730 --> 00:26:32,930
like a minimal setup like one load

00:26:30,740 --> 00:26:34,220
balancer to web web server and a

00:26:32,930 --> 00:26:35,720
database server and I will run them

00:26:34,220 --> 00:26:37,640
always and then I have a couple of

00:26:35,720 --> 00:26:39,710
servers only like coming and going

00:26:37,640 --> 00:26:42,110
depending on my load and it makes sense

00:26:39,710 --> 00:26:45,080
to purchase this reservation for those

00:26:42,110 --> 00:26:46,370
instances and how it works is that you

00:26:45,080 --> 00:26:47,720
make up

00:26:46,370 --> 00:26:50,290
if you buy such a reservation you make

00:26:47,720 --> 00:26:52,910
up front and commitment so you pay like

00:26:50,290 --> 00:26:55,450
again depending on the instant size so

00:26:52,910 --> 00:26:59,000
for example for the small instance it is

00:26:55,450 --> 00:27:00,950
for a year roughly 240 or two hundred

00:26:59,000 --> 00:27:05,150
fifty dollars so you pay those

00:27:00,950 --> 00:27:07,130
immediately and then amazon lowers the

00:27:05,150 --> 00:27:09,920
the hourly rate to roughly a third of

00:27:07,130 --> 00:27:11,380
what it was before and that means if you

00:27:09,920 --> 00:27:14,000
do this for one year you save

00:27:11,380 --> 00:27:17,240
twenty-five percent of the cost if you

00:27:14,000 --> 00:27:19,840
run it 24 7 and if you do this for three

00:27:17,240 --> 00:27:22,760
years you're saving nearly fifty percent

00:27:19,840 --> 00:27:24,679
so those numbers could be at could be

00:27:22,760 --> 00:27:28,190
down by fifty percent if you commit

00:27:24,679 --> 00:27:29,720
yourself for long a time period the

00:27:28,190 --> 00:27:31,880
other difference and that the reserve

00:27:29,720 --> 00:27:34,850
reservation gives you is a guaranteed

00:27:31,880 --> 00:27:37,760
availability and what I mean by that is

00:27:34,850 --> 00:27:40,130
if you if I would now go to Amazon and

00:27:37,760 --> 00:27:42,160
say give me 1,000 machines of this

00:27:40,130 --> 00:27:44,990
instance type in this data center

00:27:42,160 --> 00:27:48,350
probably i will like get only at most

00:27:44,990 --> 00:27:50,630
100 or so immediately and then amazon

00:27:48,350 --> 00:27:52,520
will tell me either try a different

00:27:50,630 --> 00:27:54,170
instance type or try different

00:27:52,520 --> 00:27:57,770
availability zone or wait a couple of

00:27:54,170 --> 00:28:00,530
minutes until 10 we shuffled the DVM

00:27:57,770 --> 00:28:02,809
sizes because amazon of course cannot

00:28:00,530 --> 00:28:05,270
have like thousands of spare machines

00:28:02,809 --> 00:28:07,010
just there waiting there they're running

00:28:05,270 --> 00:28:10,220
a business so they have to like i always

00:28:07,010 --> 00:28:13,730
try to keep the unutilized number of

00:28:10,220 --> 00:28:15,500
machines as small as possible so if

00:28:13,730 --> 00:28:18,170
you're booting like a very big number of

00:28:15,500 --> 00:28:20,179
machines immediately um Azam doesn't

00:28:18,170 --> 00:28:22,640
have all of the spec capability so

00:28:20,179 --> 00:28:24,440
eventually they will have it so they or

00:28:22,640 --> 00:28:26,540
you can choose like you distributed over

00:28:24,440 --> 00:28:29,660
different availability zones or choose a

00:28:26,540 --> 00:28:32,179
different instance that but if you have

00:28:29,660 --> 00:28:34,490
that reservation you're also buying the

00:28:32,179 --> 00:28:36,080
guaranteed that you will start be able

00:28:34,490 --> 00:28:37,580
to start this this instance and for some

00:28:36,080 --> 00:28:40,400
people this is important for others

00:28:37,580 --> 00:28:41,750
maybe not but especially if you if you

00:28:40,400 --> 00:28:43,730
like having like a disaster recovery

00:28:41,750 --> 00:28:45,590
plan for your company or so you want to

00:28:43,730 --> 00:28:48,140
be sure that if I really need to migrate

00:28:45,590 --> 00:28:49,700
all my my service over I want to have

00:28:48,140 --> 00:28:52,660
them immediately and not maybe like 10

00:28:49,700 --> 00:28:54,920
minutes later or something like that so

00:28:52,660 --> 00:28:56,420
it's definitely recommended if for your

00:28:54,920 --> 00:28:58,929
minimal setup and all in order for you

00:28:56,420 --> 00:28:58,929
to save money

00:29:01,110 --> 00:29:08,580
the big thing to to understand what

00:29:03,730 --> 00:29:10,870
Amazon is that you're not that the

00:29:08,580 --> 00:29:12,549
paradigm is a very very different from

00:29:10,870 --> 00:29:14,470
your typical hosting you're not

00:29:12,549 --> 00:29:17,769
committed to one machine yeah you didn't

00:29:14,470 --> 00:29:19,480
least about this machine and if it has a

00:29:17,769 --> 00:29:21,159
problem it is your problem yeah like in

00:29:19,480 --> 00:29:23,529
traditional hosting and traditional

00:29:21,159 --> 00:29:26,289
hosting if I if I bought this server and

00:29:23,529 --> 00:29:28,149
it has a hardware failure it's my

00:29:26,289 --> 00:29:30,730
problem yeah I have downtime so I have

00:29:28,149 --> 00:29:33,970
to as i get my support guys all I call

00:29:30,730 --> 00:29:35,289
the the data center or or or they of

00:29:33,970 --> 00:29:36,909
course if the good data center and a

00:29:35,289 --> 00:29:38,200
payload for support they notice it so

00:29:36,909 --> 00:29:40,419
somebody has but somebody has to go

00:29:38,200 --> 00:29:43,179
there swap the hard drive and then I

00:29:40,419 --> 00:29:45,159
have it like I have to play back my back

00:29:43,179 --> 00:29:48,039
up and then maybe a couple of hours

00:29:45,159 --> 00:29:50,529
depending on how how much money I pay

00:29:48,039 --> 00:29:52,690
how good the support is I have back my

00:29:50,529 --> 00:29:55,240
machine and everything is working again

00:29:52,690 --> 00:29:58,960
on this machine but it's my problem I

00:29:55,240 --> 00:30:00,820
have downtime on amazon ec2 if this

00:29:58,960 --> 00:30:03,490
other has a problem or even our only

00:30:00,820 --> 00:30:07,059
suspect that it has a problem I just

00:30:03,490 --> 00:30:08,350
take another one there's nothing that

00:30:07,059 --> 00:30:10,750
that I'm attached to on this machine

00:30:08,350 --> 00:30:13,480
yeah because I just rent the the

00:30:10,750 --> 00:30:15,909
computing capability that I specified

00:30:13,480 --> 00:30:17,559
and if this one doesn't satisfy me I can

00:30:15,909 --> 00:30:19,149
just like butta second machine migrated

00:30:17,559 --> 00:30:21,279
to my deck so like we mount this volume

00:30:19,149 --> 00:30:22,630
on the other one and maybe take even the

00:30:21,279 --> 00:30:26,049
IP address with me and then shut down

00:30:22,630 --> 00:30:28,480
the other one so you're not committed to

00:30:26,049 --> 00:30:30,760
to like f physical instance you're just

00:30:28,480 --> 00:30:32,289
you're renting computing power and that

00:30:30,760 --> 00:30:33,850
means that you can you can migrate from

00:30:32,289 --> 00:30:36,190
one data center to the other one very

00:30:33,850 --> 00:30:38,649
easily that you can associate spawn up

00:30:36,190 --> 00:30:42,600
test setups or staging setups and that

00:30:38,649 --> 00:30:42,600
just use them for a short period of time

00:30:42,840 --> 00:30:47,830
but the biggest problem is still how do

00:30:46,120 --> 00:30:50,760
i boot on reconfigure and deploy my

00:30:47,830 --> 00:30:54,130
application to to to such an to such an

00:30:50,760 --> 00:30:58,179
architecture so how do I get from this

00:30:54,130 --> 00:31:00,460
from this blank linux server to my my

00:30:58,179 --> 00:31:02,049
fully configured web server with PHP was

00:31:00,460 --> 00:31:04,120
then sent running on it with my

00:31:02,049 --> 00:31:06,700
libraries with my versions of my code

00:31:04,120 --> 00:31:08,409
and this is like the bigger hurdle

00:31:06,700 --> 00:31:09,970
because the other one is the other

00:31:08,409 --> 00:31:12,129
process not different from you buying a

00:31:09,970 --> 00:31:12,890
server and racking it then she's just

00:31:12,129 --> 00:31:16,220
making an API

00:31:12,890 --> 00:31:17,660
and you have the machine so of course

00:31:16,220 --> 00:31:20,030
you can you can go in and manually

00:31:17,660 --> 00:31:22,910
configure it and login via SSH do like

00:31:20,030 --> 00:31:27,550
app get install Apache and epcot install

00:31:22,910 --> 00:31:31,370
mod PHP and configure everything by hand

00:31:27,550 --> 00:31:32,930
but but you're not really really getting

00:31:31,370 --> 00:31:35,030
the benefits that you could have because

00:31:32,930 --> 00:31:36,800
because many this manual process is slow

00:31:35,030 --> 00:31:39,680
and if you if you're going to Amazon you

00:31:36,800 --> 00:31:41,810
want to be able to automatically boot up

00:31:39,680 --> 00:31:43,430
machines so if if you have liked your

00:31:41,810 --> 00:31:45,440
page of slashdot at at three o'clock in

00:31:43,430 --> 00:31:47,030
the morning you want it to boot up new

00:31:45,440 --> 00:31:48,620
machines and those have to be ready you

00:31:47,030 --> 00:31:50,330
don't want to be to like call your admin

00:31:48,620 --> 00:31:52,970
and say login configure those we have to

00:31:50,330 --> 00:31:55,430
use them right so you have to automate

00:31:52,970 --> 00:31:58,280
all of this and general they're like two

00:31:55,430 --> 00:32:01,550
approaches that you can do the first

00:31:58,280 --> 00:32:05,270
approach is you do everything out base

00:32:01,550 --> 00:32:06,710
of images so very similar to if you if

00:32:05,270 --> 00:32:09,200
you run vmware locally it's a very

00:32:06,710 --> 00:32:11,420
similar approach you you first you take

00:32:09,200 --> 00:32:14,510
the the default image that amazon gives

00:32:11,420 --> 00:32:17,810
you there are also a lot of images from

00:32:14,510 --> 00:32:19,610
like every major linux distribution has

00:32:17,810 --> 00:32:21,200
like a public image so you can use the

00:32:19,610 --> 00:32:23,090
Souza image you can use the Debian image

00:32:21,200 --> 00:32:25,850
you can use the redhead image or fedora

00:32:23,090 --> 00:32:27,740
image and you boot this up login via SSH

00:32:25,850 --> 00:32:29,180
do all the the installation

00:32:27,740 --> 00:32:31,880
configuration then you save it again

00:32:29,180 --> 00:32:33,680
this image and say I want to save it for

00:32:31,880 --> 00:32:36,020
later use and this is like my web server

00:32:33,680 --> 00:32:37,340
so if you boot it up at three o'clock in

00:32:36,020 --> 00:32:39,290
the morning you don't put the blank em

00:32:37,340 --> 00:32:43,610
image but you boot your pre-configured

00:32:39,290 --> 00:32:45,020
one this is is like the the process how

00:32:43,610 --> 00:32:47,780
most of the people start to work with

00:32:45,020 --> 00:32:50,450
Amazon but it's also the least flexible

00:32:47,780 --> 00:32:51,890
approach because you need an image for

00:32:50,450 --> 00:32:53,750
your web server you need image for your

00:32:51,890 --> 00:32:55,130
load balancer you need an image for a

00:32:53,750 --> 00:32:56,450
database server you need an image for

00:32:55,130 --> 00:32:58,790
your caching server you need an image

00:32:56,450 --> 00:33:02,330
for your index server and you need an

00:32:58,790 --> 00:33:04,700
image for 32-bit and for 64-bit and as I

00:33:02,330 --> 00:33:06,320
said before the EMAs of installations

00:33:04,700 --> 00:33:08,690
are different so you would have to copy

00:33:06,320 --> 00:33:10,760
all of those images to every region an

00:33:08,690 --> 00:33:14,300
Amazon where you where you have service

00:33:10,760 --> 00:33:15,980
and imagine now you have a staging setup

00:33:14,300 --> 00:33:17,660
where on staging it is okay if my

00:33:15,980 --> 00:33:19,370
database server and my caching server

00:33:17,660 --> 00:33:21,440
and a web server are all in the same

00:33:19,370 --> 00:33:23,630
machine so I save money because I don't

00:33:21,440 --> 00:33:25,670
need like 10 machines so you need again

00:33:23,630 --> 00:33:26,720
another image for this and then there

00:33:25,670 --> 00:33:28,789
comes a security patch

00:33:26,720 --> 00:33:33,440
for for a library that you're using and

00:33:28,789 --> 00:33:36,890
you have to update 20 images so the the

00:33:33,440 --> 00:33:38,240
the the better approach is to use some

00:33:36,890 --> 00:33:41,659
kind of a scripting scripted

00:33:38,240 --> 00:33:43,190
provisioning where you take the the the

00:33:41,659 --> 00:33:46,700
base image that the linux distribution

00:33:43,190 --> 00:33:49,220
gives you and on demand you form it to

00:33:46,700 --> 00:33:51,830
to be your application server of choice

00:33:49,220 --> 00:33:55,370
your web so my configured installation

00:33:51,830 --> 00:33:57,440
and this this allows you to dynamically

00:33:55,370 --> 00:33:59,450
readapt the roles to like if there is a

00:33:57,440 --> 00:34:01,909
new version of ubuntu you don't have to

00:33:59,450 --> 00:34:03,530
update your 20 images you just choose

00:34:01,909 --> 00:34:05,809
the new base image test of your scripts

00:34:03,530 --> 00:34:07,549
all right still work with it and then

00:34:05,809 --> 00:34:08,750
you just like switch one small arrival

00:34:07,549 --> 00:34:13,669
like the idea of the image that you are

00:34:08,750 --> 00:34:14,960
using the disadvantage is of course that

00:34:13,669 --> 00:34:16,550
the learning curve is a little bit

00:34:14,960 --> 00:34:20,270
higher because you have to have some

00:34:16,550 --> 00:34:21,580
kind of a provisioning framework and of

00:34:20,270 --> 00:34:23,659
course if you're always booting

00:34:21,580 --> 00:34:25,040
installing everything on boo to take

00:34:23,659 --> 00:34:28,460
like a minute or two longer for your

00:34:25,040 --> 00:34:30,169
instances to be provisioned but it

00:34:28,460 --> 00:34:32,839
really pays off so how do you how do we

00:34:30,169 --> 00:34:34,940
do this my weapon of choice for doing

00:34:32,839 --> 00:34:37,760
this is chef chef is an open-source

00:34:34,940 --> 00:34:40,070
provisioning tool there there are others

00:34:37,760 --> 00:34:42,349
like CF engine or puppet which are like

00:34:40,070 --> 00:34:48,290
a little bit older and therefore a

00:34:42,349 --> 00:34:50,419
little bit more widespread chef allows

00:34:48,290 --> 00:34:53,510
you to define how you want your server

00:34:50,419 --> 00:34:54,830
to look like in a ruby DSL the great

00:34:53,510 --> 00:34:56,210
thing about it is that you don't have to

00:34:54,830 --> 00:34:58,520
be a Ruby programmer to understand it

00:34:56,210 --> 00:35:01,690
but if you know a little bit of Ruby you

00:34:58,520 --> 00:35:03,920
can easily extend it and very very easy

00:35:01,690 --> 00:35:06,680
sparkle like arbitrary functionality on

00:35:03,920 --> 00:35:08,540
to it and what it does is you give you

00:35:06,680 --> 00:35:09,980
you give it a definition of how do i

00:35:08,540 --> 00:35:11,420
want my server to look like what kind of

00:35:09,980 --> 00:35:13,160
packages do I want to have installed

00:35:11,420 --> 00:35:14,750
what kind of services should be running

00:35:13,160 --> 00:35:17,480
what kind of users should be there

00:35:14,750 --> 00:35:19,280
locally what should the my sequel

00:35:17,480 --> 00:35:21,200
configuration look like and so on and it

00:35:19,280 --> 00:35:23,540
will then independent of the operating

00:35:21,200 --> 00:35:26,000
system so it supports like all Linux

00:35:23,540 --> 00:35:28,070
flavors it supports previously it

00:35:26,000 --> 00:35:30,760
supports mac OS and so on it will then

00:35:28,070 --> 00:35:32,960
do whatever it has to do in order to to

00:35:30,760 --> 00:35:37,700
bend your system so that it looks like

00:35:32,960 --> 00:35:40,130
this there are two different setups how

00:35:37,700 --> 00:35:42,050
you can can work with Chef

00:35:40,130 --> 00:35:44,300
the far more complicated one but if you

00:35:42,050 --> 00:35:45,440
have a big installation the one you

00:35:44,300 --> 00:35:48,430
should use is the client server

00:35:45,440 --> 00:35:50,920
installation where you have a cert a

00:35:48,430 --> 00:35:53,150
central chef server where you keep the

00:35:50,920 --> 00:35:55,340
configuration and it's called in chef

00:35:53,150 --> 00:35:57,320
speak cookbooks and recipes we will have

00:35:55,340 --> 00:35:59,390
a look at this in a minute but I will

00:35:57,320 --> 00:36:00,770
always like maintaining here this

00:35:59,390 --> 00:36:02,690
repository of cookbooks they of

00:36:00,770 --> 00:36:05,570
definitions how do i install memcached

00:36:02,690 --> 00:36:07,820
how do i configure apache and then all

00:36:05,570 --> 00:36:10,220
my maybe hundreds thousands of nodes

00:36:07,820 --> 00:36:12,530
they connect to it and they pull the

00:36:10,220 --> 00:36:15,350
latest configuration and then they apply

00:36:12,530 --> 00:36:17,180
it locally so you you update the

00:36:15,350 --> 00:36:18,710
configuration one place and it the

00:36:17,180 --> 00:36:21,140
clients after a couple of minutes they

00:36:18,710 --> 00:36:22,940
pick it up and reconfigure themselves if

00:36:21,140 --> 00:36:25,010
for example so if you decided I need a

00:36:22,940 --> 00:36:27,290
new and PHP model on all my webservice

00:36:25,010 --> 00:36:28,700
you edit in this configuration and a

00:36:27,290 --> 00:36:33,470
couple of minutes later every machine

00:36:28,700 --> 00:36:36,410
installs it unintended if you start up

00:36:33,470 --> 00:36:38,390
to play with Chef you should do it with

00:36:36,410 --> 00:36:41,030
Chef solo so it's a very very lot

00:36:38,390 --> 00:36:42,830
simpler what you do is you just call

00:36:41,030 --> 00:36:44,480
chef manually on the command line and it

00:36:42,830 --> 00:36:46,070
give it as an input the configuration

00:36:44,480 --> 00:36:47,990
file but it has to have everything

00:36:46,070 --> 00:36:49,700
locally a pre-installed but it's a lot

00:36:47,990 --> 00:36:51,440
simpler to start out and play with Chef

00:36:49,700 --> 00:36:53,990
and if you only have like a handful of

00:36:51,440 --> 00:36:55,790
machines and you can just have a simple

00:36:53,990 --> 00:36:57,710
SSH strip that logs into your five

00:36:55,790 --> 00:37:00,290
machines and call this called chef with

00:36:57,710 --> 00:37:01,610
with a solo configuration so it's it's a

00:37:00,290 --> 00:37:03,890
lot simpler to to start out an

00:37:01,610 --> 00:37:06,920
experiment if you don't have this server

00:37:03,890 --> 00:37:10,040
component yeah so how does a chef and

00:37:06,920 --> 00:37:12,110
recipe looks like this is an example how

00:37:10,040 --> 00:37:16,910
do I I bootstrap memcache d on my

00:37:12,110 --> 00:37:19,520
machine don't think that you guys at the

00:37:16,910 --> 00:37:20,750
end can can read this but what you don't

00:37:19,520 --> 00:37:22,850
you don't have to understand every line

00:37:20,750 --> 00:37:25,340
but which should hopefully became clear

00:37:22,850 --> 00:37:26,960
is it's a very simple dsl yeah so at the

00:37:25,340 --> 00:37:28,880
top i define i want to have the package

00:37:26,960 --> 00:37:31,820
memcache d installed i want to have the

00:37:28,880 --> 00:37:34,070
package memcache d dev installed and

00:37:31,820 --> 00:37:36,140
there is a service called memcache d on

00:37:34,070 --> 00:37:39,290
the machine and then i generate the

00:37:36,140 --> 00:37:41,510
template etsy memcache d conf and i tell

00:37:39,290 --> 00:37:42,980
it what kind of who should be the owner

00:37:41,510 --> 00:37:44,930
of the file what kind of permissions

00:37:42,980 --> 00:37:46,850
should it have and i can put variables

00:37:44,930 --> 00:37:50,090
into this template so not nothing too

00:37:46,850 --> 00:37:51,500
complicated i do the same thing for for

00:37:50,090 --> 00:37:53,000
the etsy default memcache d

00:37:51,500 --> 00:37:53,990
configuration and so this would be an

00:37:53,000 --> 00:37:55,490
example how do I

00:37:53,990 --> 00:37:57,650
bootstrap memcache d how to make sure

00:37:55,490 --> 00:37:59,720
that all machines that should be running

00:37:57,650 --> 00:38:02,780
memcache t do it exactly like I

00:37:59,720 --> 00:38:06,320
configured it to and once I have this

00:38:02,780 --> 00:38:08,570
this recipe is it called and chef I can

00:38:06,320 --> 00:38:11,270
now trigger a chevron that that executes

00:38:08,570 --> 00:38:14,030
sit so how does it look like I have

00:38:11,270 --> 00:38:15,619
adjacent configuration file and the

00:38:14,030 --> 00:38:18,050
important part is this recipes that

00:38:15,619 --> 00:38:21,050
tells it what kind of off script should

00:38:18,050 --> 00:38:24,320
it run in this case memcache d and i can

00:38:21,050 --> 00:38:26,660
put arbitrary arbitrary data in it that

00:38:24,320 --> 00:38:28,550
i can then pick out of and chef so in

00:38:26,660 --> 00:38:31,490
this case i define i have a memcached

00:38:28,550 --> 00:38:34,400
user called nobody airport and memory

00:38:31,490 --> 00:38:38,480
and this is the information that i can

00:38:34,400 --> 00:38:39,740
vary curry here so i don't hardcode how

00:38:38,480 --> 00:38:41,119
much memory you should should every

00:38:39,740 --> 00:38:44,990
machine have but i can pass it as an

00:38:41,119 --> 00:38:47,360
argument and then once I have this

00:38:44,990 --> 00:38:50,570
configuration file I just I just execute

00:38:47,360 --> 00:38:53,570
in this case chef solo locally so I just

00:38:50,570 --> 00:38:56,090
called chef solo pass at the and passes

00:38:53,570 --> 00:38:59,000
this JSON file and then it will do the

00:38:56,090 --> 00:39:00,980
magic it has to do so it will it will

00:38:59,000 --> 00:39:03,170
execute this recipe and depending on the

00:39:00,980 --> 00:39:04,760
on the machine it is running on it will

00:39:03,170 --> 00:39:08,540
do the right thing so if we are on a

00:39:04,760 --> 00:39:10,369
debian machine it will use an app get to

00:39:08,540 --> 00:39:11,720
install memcache do if we are on a

00:39:10,369 --> 00:39:14,720
suicide will use zipper to install

00:39:11,720 --> 00:39:16,130
memcache d if we are on an open solaris

00:39:14,720 --> 00:39:18,950
machine it will use the opensolaris

00:39:16,130 --> 00:39:22,700
package manager to do this so it's a

00:39:18,950 --> 00:39:25,340
great way to write like operating system

00:39:22,700 --> 00:39:27,440
independent installation scripts how do

00:39:25,340 --> 00:39:30,950
how do i make my local system look like

00:39:27,440 --> 00:39:34,130
it should be and there is even support

00:39:30,950 --> 00:39:35,960
for deploying that's not really really

00:39:34,130 --> 00:39:37,720
readable by the don't know em like if

00:39:35,960 --> 00:39:39,770
Capistrano which is a very popular

00:39:37,720 --> 00:39:41,420
deployment tool that that came out of

00:39:39,770 --> 00:39:44,180
the Ruby world but it's also used by a

00:39:41,420 --> 00:39:46,700
lot of PHP guys so it has a compatible

00:39:44,180 --> 00:39:51,200
mode for this yeah you cannot read it

00:39:46,700 --> 00:39:52,970
but there is one so chef is is very very

00:39:51,200 --> 00:39:56,380
good in order to boots up the machine

00:39:52,970 --> 00:39:59,300
but you can also do deployment over it

00:39:56,380 --> 00:40:00,770
so chef is great from for my experience

00:39:59,300 --> 00:40:02,540
you should definitely check it out even

00:40:00,770 --> 00:40:04,460
if you don't use Amazon but if you have

00:40:02,540 --> 00:40:07,030
a large number of machines to to manage

00:40:04,460 --> 00:40:07,030
and install

00:40:07,460 --> 00:40:14,410
the only like two small things about it

00:40:09,560 --> 00:40:17,120
is that it's not completely idempotent

00:40:14,410 --> 00:40:18,830
so if you define like a directory should

00:40:17,120 --> 00:40:22,250
be should be then should have like this

00:40:18,830 --> 00:40:24,230
own and this this permissions and it's

00:40:22,250 --> 00:40:26,510
not already existing shuffle of course I

00:40:24,230 --> 00:40:28,760
created with the correct permissions and

00:40:26,510 --> 00:40:31,850
owner settings but if it's already there

00:40:28,760 --> 00:40:33,920
I would just say oh it's I skipped it

00:40:31,850 --> 00:40:35,660
and I didn't change anything ever even

00:40:33,920 --> 00:40:37,190
if the owner is a different one so there

00:40:35,660 --> 00:40:42,470
one or two like resources and chef that

00:40:37,190 --> 00:40:44,540
are not idempotent and and it has like

00:40:42,470 --> 00:40:46,250
two phases that it that it executes sin

00:40:44,540 --> 00:40:49,520
which I don't think that we have time to

00:40:46,250 --> 00:40:51,770
talk about now but I'll you have to know

00:40:49,520 --> 00:40:54,050
that Chef runs in two phases otherwise

00:40:51,770 --> 00:40:58,100
you will have surprising thanks

00:40:54,050 --> 00:40:59,240
surprising effects but the great thing

00:40:58,100 --> 00:41:00,980
is there are a lot of open source

00:40:59,240 --> 00:41:02,360
recipes there a lot of like open source

00:41:00,980 --> 00:41:04,310
best practices how do your boots

00:41:02,360 --> 00:41:06,080
represent the server for example the

00:41:04,310 --> 00:41:08,810
community edition how do i install my

00:41:06,080 --> 00:41:10,670
sequel and so on so there's a lot a lot

00:41:08,810 --> 00:41:13,550
a lot of recipes and resources out there

00:41:10,670 --> 00:41:14,930
that you can just copy paste and use but

00:41:13,550 --> 00:41:19,130
with everything that you copy paste and

00:41:14,930 --> 00:41:21,740
use their better and worse examples yeah

00:41:19,130 --> 00:41:25,460
so if if you if you look at it like our

00:41:21,740 --> 00:41:26,690
checklist we now know how to what kind

00:41:25,460 --> 00:41:29,000
of architecture should we use where

00:41:26,690 --> 00:41:30,860
should we start the service and we know

00:41:29,000 --> 00:41:34,310
how do we deploy in boots rip the the

00:41:30,860 --> 00:41:38,240
machines and I want to close with with

00:41:34,310 --> 00:41:41,330
an example a use case that of sometimes

00:41:38,240 --> 00:41:44,050
of ours that that like this place what

00:41:41,330 --> 00:41:47,600
you can really do is a setup like this

00:41:44,050 --> 00:41:48,830
so the project that i'm going to show

00:41:47,600 --> 00:41:50,810
you some interesting numbers is a

00:41:48,830 --> 00:41:55,250
browser game that is completely hosted

00:41:50,810 --> 00:41:57,350
on ec2 and this is a facebook game by

00:41:55,250 --> 00:42:00,350
booga booga is the world of gaming they

00:41:57,350 --> 00:42:03,680
are the biggest european social gaming

00:42:00,350 --> 00:42:05,990
site they're like the wannabes in gas if

00:42:03,680 --> 00:42:11,000
you want so here but they're like in the

00:42:05,990 --> 00:42:12,860
top 10 of of worldwide and social games

00:42:11,000 --> 00:42:16,220
on facebook so for this game they have

00:42:12,860 --> 00:42:17,780
one or two million daily active users so

00:42:16,220 --> 00:42:20,810
on every day there are over 1 million

00:42:17,780 --> 00:42:21,050
different users playing this game which

00:42:20,810 --> 00:42:23,150
is

00:42:21,050 --> 00:42:27,130
not a small number and they have roughly

00:42:23,150 --> 00:42:30,500
130 machines in this cluster and roughly

00:42:27,130 --> 00:42:32,750
120,000 requests per minute so pretty

00:42:30,500 --> 00:42:35,090
impressive numbers and if you look at

00:42:32,750 --> 00:42:37,730
the at the load curve it looks something

00:42:35,090 --> 00:42:40,550
like this so this is one part of the

00:42:37,730 --> 00:42:42,080
Apache cluster and this is one week so

00:42:40,550 --> 00:42:46,030
if you guys at the end cannot see the

00:42:42,080 --> 00:42:49,670
the the scale so we have like one week

00:42:46,030 --> 00:42:51,430
being printed here so so as you can see

00:42:49,670 --> 00:42:53,570
they have a very distinct load pattern

00:42:51,430 --> 00:42:56,810
and it's very simple to explain because

00:42:53,570 --> 00:42:59,060
they have a mostly European user base so

00:42:56,810 --> 00:43:01,850
of course people are playing in the late

00:42:59,060 --> 00:43:04,210
afternoon early evening and not so many

00:43:01,850 --> 00:43:08,540
users are playing at 33 in the morning

00:43:04,210 --> 00:43:11,330
if you would use traditional hosting at

00:43:08,540 --> 00:43:12,650
the peak they have like roughly six six

00:43:11,330 --> 00:43:14,300
thousand requests per second on the

00:43:12,650 --> 00:43:15,980
Apaches if you if I would use

00:43:14,300 --> 00:43:18,680
traditional hosting I would have have

00:43:15,980 --> 00:43:21,170
service for at least like ten percent

00:43:18,680 --> 00:43:23,000
over this peak if I'm depending on how

00:43:21,170 --> 00:43:25,340
much growth I anticipate how

00:43:23,000 --> 00:43:28,460
conservative i am but it means that all

00:43:25,340 --> 00:43:31,370
of those like white areas would be like

00:43:28,460 --> 00:43:34,280
lost money yeah sunk cost because i

00:43:31,370 --> 00:43:36,710
bought servers that I don't need during

00:43:34,280 --> 00:43:38,090
those times yeah this is the minimum

00:43:36,710 --> 00:43:41,660
number of service that I need but I

00:43:38,090 --> 00:43:44,060
would have like enough to to to be able

00:43:41,660 --> 00:43:47,900
to serve the my peak traffic but i would

00:43:44,060 --> 00:43:50,410
pay i would pay my my my cooling bill i

00:43:47,900 --> 00:43:53,300
would pay rent for the racks i would pay

00:43:50,410 --> 00:43:54,530
my leasing fee for the service i would

00:43:53,300 --> 00:43:56,300
pay my admins that don't have to do

00:43:54,530 --> 00:43:58,010
anything like if I if I topeak time

00:43:56,300 --> 00:44:00,500
sounded 30 service I need more admins of

00:43:58,010 --> 00:44:03,890
course a day if I have only 20 so and

00:44:00,500 --> 00:44:07,640
those times I my money is just wasted

00:44:03,890 --> 00:44:10,610
right so this is a perfect example that

00:44:07,640 --> 00:44:12,380
you could utilize with Amazon ec2 so if

00:44:10,610 --> 00:44:15,920
you look at the what they're actually

00:44:12,380 --> 00:44:19,100
doing an important line is is the red

00:44:15,920 --> 00:44:21,530
one the red line is the number of cores

00:44:19,100 --> 00:44:23,600
that are running the number of CPUs

00:44:21,530 --> 00:44:24,830
active in the cluster and most important

00:44:23,600 --> 00:44:28,990
the number of CPUs that are actually

00:44:24,830 --> 00:44:32,750
paying for and it goes from from roughly

00:44:28,990 --> 00:44:34,330
250 to 500 20 so the the cutting them is

00:44:32,750 --> 00:44:37,270
that the fleet in half during the

00:44:34,330 --> 00:44:40,120
right and then slowly slowly bringing

00:44:37,270 --> 00:44:42,820
them up again if they need more if they

00:44:40,120 --> 00:44:44,020
have more traffic and this way they save

00:44:42,820 --> 00:44:46,390
around forty percent on the

00:44:44,020 --> 00:44:48,880
infrastructure costs just by being able

00:44:46,390 --> 00:44:51,580
to to shut down everything they don't

00:44:48,880 --> 00:44:53,470
need during the night and being also

00:44:51,580 --> 00:44:55,450
able to easily adapt to to load

00:44:53,470 --> 00:44:57,130
fluctuations so if they if they have

00:44:55,450 --> 00:44:59,200
like a big marketing campaign they can

00:44:57,130 --> 00:45:01,180
easily boot up another 10 or 20 machines

00:44:59,200 --> 00:45:03,730
just to cope for this one or two days

00:45:01,180 --> 00:45:06,540
with the extra load and then get rid of

00:45:03,730 --> 00:45:10,510
the machines once they don't need them

00:45:06,540 --> 00:45:15,280
yeah so this this was my my closing

00:45:10,510 --> 00:45:18,750
slide any other any questions yes please

00:45:15,280 --> 00:45:23,380
just wait a minute thing for though like

00:45:18,750 --> 00:45:26,470
yeah um when developing a PHP

00:45:23,380 --> 00:45:30,940
application fair use in this environment

00:45:26,470 --> 00:45:32,800
is clustered environment what do you

00:45:30,940 --> 00:45:36,040
have to consider when building your PHP

00:45:32,800 --> 00:45:40,570
application in terms of managing

00:45:36,040 --> 00:45:44,620
sessions etc so managing state yeah so

00:45:40,570 --> 00:45:46,630
um the easier you want your application

00:45:44,620 --> 00:45:49,330
to scale and the more you should be

00:45:46,630 --> 00:45:51,970
built and be building its stateless so

00:45:49,330 --> 00:45:54,430
so sticky sessions are a bad idea if

00:45:51,970 --> 00:45:57,970
server are disappearing if thought goes

00:45:54,430 --> 00:45:59,920
down so you need of course one central

00:45:57,970 --> 00:46:02,140
sword for four sessions or something

00:45:59,920 --> 00:46:05,050
like memcache de or reddit because it's

00:46:02,140 --> 00:46:06,220
persistent and sessions thickness is

00:46:05,050 --> 00:46:08,200
something that your application should

00:46:06,220 --> 00:46:09,880
not rely on to because otherwise you

00:46:08,200 --> 00:46:13,720
cannot easily shut them shut the

00:46:09,880 --> 00:46:15,640
instances down and as you need to the

00:46:13,720 --> 00:46:17,410
other thing is that you should you

00:46:15,640 --> 00:46:19,420
should try to make your your application

00:46:17,410 --> 00:46:21,700
very easily configurable and not like

00:46:19,420 --> 00:46:24,430
hard code IP addresses everywhere and

00:46:21,700 --> 00:46:25,990
just assume that once I know where like

00:46:24,430 --> 00:46:27,730
my caching server is it will never

00:46:25,990 --> 00:46:29,530
change or something like that because on

00:46:27,730 --> 00:46:31,030
amazon it of course like in every

00:46:29,530 --> 00:46:32,620
environment machines can crash it's not

00:46:31,030 --> 00:46:35,680
like they're crashing more often on

00:46:32,620 --> 00:46:37,810
amazon but it is that you want them to

00:46:35,680 --> 00:46:39,460
disappear if you have today 10 memcache

00:46:37,810 --> 00:46:42,280
service during the night you need only

00:46:39,460 --> 00:46:45,790
to order to marry tomorrow there is a

00:46:42,280 --> 00:46:47,710
big spike in load so you need maybe 12

00:46:45,790 --> 00:46:50,170
so you should be at

00:46:47,710 --> 00:46:53,140
make it very easy to roof to reconfigure

00:46:50,170 --> 00:46:55,060
the application from the outside so the

00:46:53,140 --> 00:46:56,440
first step is of course to on simply

00:46:55,060 --> 00:46:57,880
step is to just have everything in

00:46:56,440 --> 00:46:59,830
config files and separate config files

00:46:57,880 --> 00:47:02,710
that that your strips can write whenever

00:46:59,830 --> 00:47:04,420
they change your architecture and more

00:47:02,710 --> 00:47:07,570
complex solution would be to be able to

00:47:04,420 --> 00:47:10,240
configure them I'm automatically so for

00:47:07,570 --> 00:47:12,130
example I don't know if you saw the talk

00:47:10,240 --> 00:47:14,950
before about you r mq where you can for

00:47:12,130 --> 00:47:16,330
example every application also has a

00:47:14,950 --> 00:47:18,760
Syrian huge rocket where you can push

00:47:16,330 --> 00:47:20,950
configuration changes so you make it

00:47:18,760 --> 00:47:23,700
very easy to to change your application

00:47:20,950 --> 00:47:27,540
and and don't hardcode the the structure

00:47:23,700 --> 00:47:30,760
if you're running on those scales

00:47:27,540 --> 00:47:33,849
relying on one on one database server is

00:47:30,760 --> 00:47:37,240
also a big problem so the hardest part

00:47:33,849 --> 00:47:42,010
is always solving the scalability of the

00:47:37,240 --> 00:47:45,099
data so just one big my sequel server is

00:47:42,010 --> 00:47:46,780
not enough maybe it is but like for a

00:47:45,099 --> 00:47:48,849
short period of time but on Amazon you

00:47:46,780 --> 00:47:51,490
cannot just say my database server max

00:47:48,849 --> 00:47:53,710
its ram so let's just buy another 100

00:47:51,490 --> 00:47:55,180
gigs of ram and put it in because Emma's

00:47:53,710 --> 00:47:57,609
on the biggest installation that you get

00:47:55,180 --> 00:47:59,530
is sixty eight gigs of RAM so if you

00:47:57,609 --> 00:48:01,030
know it's going to be like a problem for

00:47:59,530 --> 00:48:02,560
you in a year or something you can

00:48:01,030 --> 00:48:04,599
speculate that Amazon will offer then in

00:48:02,560 --> 00:48:06,700
bigger instance but the better solution

00:48:04,599 --> 00:48:10,330
would be to be able to skate

00:48:06,700 --> 00:48:12,280
horizontally especially also because as

00:48:10,330 --> 00:48:14,530
I said I always not the best on amazon

00:48:12,280 --> 00:48:16,780
so you don't want to application to rely

00:48:14,530 --> 00:48:17,680
on a very small number of components

00:48:16,780 --> 00:48:19,510
where you need very very high

00:48:17,680 --> 00:48:21,130
performance on each but you want to have

00:48:19,510 --> 00:48:22,869
an application where you have multiple

00:48:21,130 --> 00:48:25,089
smaller components that I can easily

00:48:22,869 --> 00:48:26,410
distribute they can easier shut maybe

00:48:25,089 --> 00:48:29,200
half of those down and something like

00:48:26,410 --> 00:48:31,330
that so you need to be the build an

00:48:29,200 --> 00:48:34,000
application that is more distributed in

00:48:31,330 --> 00:48:35,440
smaller and smaller components that you

00:48:34,000 --> 00:48:37,450
can can move from one place to another

00:48:35,440 --> 00:48:43,349
and don't hard called the hard code the

00:48:37,450 --> 00:48:43,349
interfaces between those there's another

00:48:45,180 --> 00:48:49,300
can you talk about the terms and

00:48:47,260 --> 00:48:51,310
conditions that Amazon imposed on the

00:48:49,300 --> 00:48:54,040
type of applications you can run so for

00:48:51,310 --> 00:48:56,170
example I'm thinking of writing a web

00:48:54,040 --> 00:48:59,500
scraper that scrapes Google's for page

00:48:56,170 --> 00:49:01,180
rankings for SEO perspective so have you

00:48:59,500 --> 00:49:03,099
ever done anything like that before yeah

00:49:01,180 --> 00:49:05,319
we've done something so so so Amazon

00:49:03,099 --> 00:49:07,030
gives you a likely really a root server

00:49:05,319 --> 00:49:10,630
so you have total root access to it so

00:49:07,030 --> 00:49:13,390
they don't restrict you but technically

00:49:10,630 --> 00:49:14,710
to do anything the only technically the

00:49:13,390 --> 00:49:18,550
only technical thing that they restrict

00:49:14,710 --> 00:49:20,050
you on is sending mail so by default you

00:49:18,550 --> 00:49:23,470
cannot make too many outgoing

00:49:20,050 --> 00:49:25,839
connections on port 25 and they will

00:49:23,470 --> 00:49:27,490
slow you down but you can there is a

00:49:25,839 --> 00:49:30,010
forum where you can apply to say no it's

00:49:27,490 --> 00:49:32,410
rigid legitimate traffic and I need this

00:49:30,010 --> 00:49:35,130
for Project X or something that and then

00:49:32,410 --> 00:49:37,630
you they will increase your quota but

00:49:35,130 --> 00:49:38,940
running like very big mail service on

00:49:37,630 --> 00:49:42,309
ec2 is probably not the best idea

00:49:38,940 --> 00:49:44,950
especially because it's every instance

00:49:42,309 --> 00:49:47,619
has a dynamic has a random IP address

00:49:44,950 --> 00:49:51,160
allocated so a lot of black lists have

00:49:47,619 --> 00:49:52,630
like all in zone of amazon instances on

00:49:51,160 --> 00:49:55,059
the black list by default because it's a

00:49:52,630 --> 00:49:57,040
dynamic IP range just like dial-up

00:49:55,059 --> 00:49:58,150
connections so they say ok by default

00:49:57,040 --> 00:49:59,559
that you're getting like two points on

00:49:58,150 --> 00:50:02,829
spamassassin just for being in these

00:49:59,559 --> 00:50:05,260
being an ec2 and that's so that's

00:50:02,829 --> 00:50:07,750
another another thing why you don't want

00:50:05,260 --> 00:50:10,690
to run like big males of installations

00:50:07,750 --> 00:50:12,910
on amazon as also amazon now offers an

00:50:10,690 --> 00:50:15,400
API for sending mails so you don't need

00:50:12,910 --> 00:50:17,559
to do this yourself but other than that

00:50:15,400 --> 00:50:19,750
there is no big big limit so you can

00:50:17,559 --> 00:50:21,250
install anything that you want the the

00:50:19,750 --> 00:50:25,420
biggest problems are usually not

00:50:21,250 --> 00:50:28,030
technical but but like internal business

00:50:25,420 --> 00:50:30,309
policies that like for example there

00:50:28,030 --> 00:50:33,569
still a lot of software that that you

00:50:30,309 --> 00:50:36,910
are that you buy license for for a core

00:50:33,569 --> 00:50:40,180
for example that don't easily allow you

00:50:36,910 --> 00:50:42,190
to if you have one license to say but I

00:50:40,180 --> 00:50:43,960
have a one license for like eight core

00:50:42,190 --> 00:50:46,510
machine but I want to run it on an

00:50:43,960 --> 00:50:49,180
Amazon like on eight machines with only

00:50:46,510 --> 00:50:50,950
one core on what what does happen if i

00:50:49,180 --> 00:50:54,119
shud four of those down during the night

00:50:50,950 --> 00:50:58,480
does my license figure a half step so

00:50:54,119 --> 00:50:59,710
there there is software out from the so

00:50:58,480 --> 00:51:02,140
the vendors are responding to this so

00:50:59,710 --> 00:51:04,210
you can for example start a

00:51:02,140 --> 00:51:05,559
pre-configured instance on amazon where

00:51:04,210 --> 00:51:08,049
you pay a lot a little bit more money

00:51:05,559 --> 00:51:09,849
and the licence fee is included so for

00:51:08,049 --> 00:51:11,170
example the windows instances are a

00:51:09,849 --> 00:51:14,470
little bit cheap it's more expensive

00:51:11,170 --> 00:51:17,410
than the linux ones because they include

00:51:14,470 --> 00:51:20,300
they include the licence fee for windows

00:51:17,410 --> 00:51:22,880
same was Oracle so some vendors are

00:51:20,300 --> 00:51:24,770
already have like in a different image

00:51:22,880 --> 00:51:25,670
that you that you start that you use and

00:51:24,770 --> 00:51:27,980
it is a little bit more expensive

00:51:25,670 --> 00:51:29,570
because the license fees included but

00:51:27,980 --> 00:51:31,670
technically there is no like Amazon

00:51:29,570 --> 00:51:33,890
doesn't say you don't you cannot run

00:51:31,670 --> 00:51:36,740
anything compute-intensive or something

00:51:33,890 --> 00:51:39,320
like that they have a couple of policies

00:51:36,740 --> 00:51:41,030
around like a poor and something like

00:51:39,320 --> 00:51:44,060
that so they they they have like things

00:51:41,030 --> 00:51:46,220
in that in their terms and services that

00:51:44,060 --> 00:51:48,440
say you're not allowed to to run

00:51:46,220 --> 00:51:49,820
applications that do like something

00:51:48,440 --> 00:51:52,010
harmful against US government or

00:51:49,820 --> 00:51:55,700
something like that but what every US

00:51:52,010 --> 00:51:59,780
hoster would have but nothing like

00:51:55,700 --> 00:52:02,030
technically limited limiting hi you know

00:51:59,780 --> 00:52:04,790
using this type of setup would it be

00:52:02,030 --> 00:52:07,310
more practical sometimes to use Amazon

00:52:04,790 --> 00:52:10,220
simple Davey or like a key value storage

00:52:07,310 --> 00:52:12,170
like Redis rather than using my sequel

00:52:10,220 --> 00:52:16,339
would that become something more yeah

00:52:12,170 --> 00:52:17,750
yes so so my sequel my sequel has has

00:52:16,339 --> 00:52:19,310
like a scalability problem across

00:52:17,750 --> 00:52:21,829
multiple notes oh my sequel is designed

00:52:19,310 --> 00:52:24,079
to run to run fast and efficient on one

00:52:21,829 --> 00:52:26,030
of one instance and everything that

00:52:24,079 --> 00:52:28,849
tries to spend it across multiple nodes

00:52:26,030 --> 00:52:30,290
is so so like replication my sequel is

00:52:28,849 --> 00:52:33,109
not the best thing there is no

00:52:30,290 --> 00:52:37,280
multi-node solution a really nice one so

00:52:33,109 --> 00:52:38,930
if you if you can but the other benefit

00:52:37,280 --> 00:52:40,540
of my sigil is of course it's it's equal

00:52:38,930 --> 00:52:43,819
you have transactions you have like

00:52:40,540 --> 00:52:45,079
durability and so on it's a very well

00:52:43,819 --> 00:52:47,900
understood technology you have a lot of

00:52:45,079 --> 00:52:50,270
a lot of drivers for it but this is like

00:52:47,900 --> 00:52:51,800
the part of a lot of those databases

00:52:50,270 --> 00:52:54,230
from the no sequel movement where you

00:52:51,800 --> 00:52:56,569
say but I wanted to be able to just like

00:52:54,230 --> 00:53:00,200
start more instances and be those just

00:52:56,569 --> 00:53:01,609
my database just uses them right so in

00:53:00,200 --> 00:53:03,140
all the set up there just so like the

00:53:01,609 --> 00:53:04,430
database instances if you use my sequel

00:53:03,140 --> 00:53:06,859
they are static yeah I kind of just like

00:53:04,430 --> 00:53:08,390
have three and during the night one and

00:53:06,859 --> 00:53:10,040
during peaks ten or something like that

00:53:08,390 --> 00:53:11,869
yeah doesn't work with my sequel

00:53:10,040 --> 00:53:13,849
unfortunately and the our databases

00:53:11,869 --> 00:53:16,099
where it works like this so react for

00:53:13,849 --> 00:53:17,960
example or Cassandra or coach evie was

00:53:16,099 --> 00:53:19,990
big couch where you can add dynamically

00:53:17,960 --> 00:53:21,589
multiple notes and they will sink the

00:53:19,990 --> 00:53:23,810
internally and then there will be

00:53:21,589 --> 00:53:27,230
available and your data automatically

00:53:23,810 --> 00:53:28,570
partitions itself so if you can use

00:53:27,230 --> 00:53:30,890
something like that

00:53:28,570 --> 00:53:32,650
it's a very good solution to the scaling

00:53:30,890 --> 00:53:35,660
problem usually they have other

00:53:32,650 --> 00:53:38,359
drawbacks like response time is slower

00:53:35,660 --> 00:53:39,950
because you're talking to OneNote maybe

00:53:38,359 --> 00:53:41,510
this note doesn't have your data so it

00:53:39,950 --> 00:53:45,080
has to fetch your data from somewhere

00:53:41,510 --> 00:53:46,550
else and maybe have to like to go to

00:53:45,080 --> 00:53:49,040
multiple nodes or something like that so

00:53:46,550 --> 00:53:52,760
they're always like advantage advantages

00:53:49,040 --> 00:53:55,970
and disadvantages but my sequel is of

00:53:52,760 --> 00:53:57,680
course is not like best fitted the best

00:53:55,970 --> 00:54:00,020
for database for a problem will

00:53:57,680 --> 00:54:07,130
dynamically spawn service and then they

00:54:00,020 --> 00:54:09,980
go away it's the last question guys okay

00:54:07,130 --> 00:54:12,890
in terms of the elastic balancer and the

00:54:09,980 --> 00:54:14,900
elastic IP yep the outgoing traffic up

00:54:12,890 --> 00:54:17,780
here from the same IP so if you were

00:54:14,900 --> 00:54:20,090
pushing content out without up here from

00:54:17,780 --> 00:54:23,390
a single IP or would they around my IP

00:54:20,090 --> 00:54:25,490
allocation if if you use the your own

00:54:23,390 --> 00:54:27,740
software la panza with an elastic IP I'm

00:54:25,490 --> 00:54:31,280
stuck to its stuck to it it will always

00:54:27,740 --> 00:54:33,800
be from the from the same IP if you use

00:54:31,280 --> 00:54:35,900
the elastic load balancer it could have

00:54:33,800 --> 00:54:38,420
multiple ones because what Amazon does

00:54:35,900 --> 00:54:40,220
is if you if you have high traffic

00:54:38,420 --> 00:54:41,990
behind it it will spawn multiple output

00:54:40,220 --> 00:54:43,910
in instances and use the NS round robin

00:54:41,990 --> 00:54:45,410
to distribute your traffic on on them

00:54:43,910 --> 00:54:47,119
and then you can have responses for

00:54:45,410 --> 00:54:49,160
multiple IP addresses but that would be

00:54:47,119 --> 00:54:51,080
like being coming traffic what about

00:54:49,160 --> 00:54:52,730
ours going traffic how would you make

00:54:51,080 --> 00:54:55,609
sure that it always comes back from one

00:54:52,730 --> 00:54:57,680
originating IP it so if you use the load

00:54:55,609 --> 00:54:58,609
balancing your outgoing traffic is also

00:54:57,680 --> 00:55:01,160
going through the load pin so if you

00:54:58,609 --> 00:55:03,920
like HTTP response request cycle if you

00:55:01,160 --> 00:55:06,050
do something like like random API calls

00:55:03,920 --> 00:55:08,750
from from your web services out to

00:55:06,050 --> 00:55:10,820
somewhere else of course the traffic

00:55:08,750 --> 00:55:13,460
always originates at the at the note

00:55:10,820 --> 00:55:14,750
that you're using if you change so you

00:55:13,460 --> 00:55:16,250
have you would have to change your

00:55:14,750 --> 00:55:19,099
routing if you don't if you want to do

00:55:16,250 --> 00:55:20,990
it otherwise but if you have like 100

00:55:19,099 --> 00:55:22,820
application service and every

00:55:20,990 --> 00:55:24,290
application server within the the

00:55:22,820 --> 00:55:26,570
request that they have to answer to the

00:55:24,290 --> 00:55:29,030
to the HTTP client makes have to have

00:55:26,570 --> 00:55:30,740
make like an API call to your payment

00:55:29,030 --> 00:55:31,970
gateway or something like that and you

00:55:30,740 --> 00:55:33,680
would have like 100 different IP

00:55:31,970 --> 00:55:36,470
addresses randomly hitting your payment

00:55:33,680 --> 00:55:38,540
gateway so usually this would be a place

00:55:36,470 --> 00:55:40,600
where you you would configure your low

00:55:38,540 --> 00:55:42,220
pincer to like all M

00:55:40,600 --> 00:55:45,340
requests that have something like slash

00:55:42,220 --> 00:55:47,380
payment in there in the URL go on to it

00:55:45,340 --> 00:55:49,120
only to one special instance and this

00:55:47,380 --> 00:55:50,650
special instance has an elastic IP that

00:55:49,120 --> 00:55:52,510
you whitelist with your payment provider

00:55:50,650 --> 00:55:55,180
for example and this way you make sure

00:55:52,510 --> 00:55:58,900
that that only you only have one IP

00:55:55,180 --> 00:56:00,760
address but by default if you have 100

00:55:58,900 --> 00:56:02,070
instances and every instance is allowed

00:56:00,760 --> 00:56:04,540
to make requests somewhere of course

00:56:02,070 --> 00:56:06,910
there is no automatic routing that the

00:56:04,540 --> 00:56:11,320
changes that the response is to go

00:56:06,910 --> 00:56:15,930
through one instance okay okay run out

00:56:11,320 --> 00:56:15,930

YouTube URL: https://www.youtube.com/watch?v=0So5F6fjhpQ


