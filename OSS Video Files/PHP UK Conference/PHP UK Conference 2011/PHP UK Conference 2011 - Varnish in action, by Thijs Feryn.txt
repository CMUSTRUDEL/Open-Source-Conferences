Title: PHP UK Conference 2011 - Varnish in action, by Thijs Feryn
Publication date: 2012-03-15
Playlist: PHP UK Conference 2011
Description: 
	
Captions: 
	00:00:02,560 --> 00:00:07,569
my talk is called varnish in action and

00:00:04,870 --> 00:00:10,059
I'd like to introduce myself first I am

00:00:07,569 --> 00:00:12,580
pace and I'm an evangelist at combo a

00:00:10,059 --> 00:00:15,039
hosting company as mentioned and I'm

00:00:12,580 --> 00:00:17,470
also in PHP benelux now just for

00:00:15,039 --> 00:00:20,740
marketing purposes who knows PHP benelux

00:00:17,470 --> 00:00:25,390
raise your hands please who is at our

00:00:20,740 --> 00:00:27,429
conference thank you thank you so we're

00:00:25,390 --> 00:00:28,810
the user group that covers Belgium the

00:00:27,429 --> 00:00:30,539
Netherlands and Luxembourg babe

00:00:28,810 --> 00:00:32,650
basically but i'm from belgium and

00:00:30,539 --> 00:00:34,810
everyone knows that country nowadays

00:00:32,650 --> 00:00:38,770
it's quite popular in the news we

00:00:34,810 --> 00:00:43,780
actually broke some records this record

00:00:38,770 --> 00:00:46,840
so and in belgium i live in a very

00:00:43,780 --> 00:00:49,180
specific city the city of brooch i think

00:00:46,840 --> 00:00:53,610
a lot of you britain's no brooch i guess

00:00:49,180 --> 00:00:56,530
who's been the bridge a cool now i

00:00:53,610 --> 00:01:01,180
noticed and i learned that a very

00:00:56,530 --> 00:01:03,640
specific part of the British inhabitants

00:01:01,180 --> 00:01:06,400
go to brooch and I didn't know there was

00:01:03,640 --> 00:01:09,729
a name for that so if PHP Northwest's

00:01:06,400 --> 00:01:11,469
last year I talked to captain Reeve and

00:01:09,729 --> 00:01:13,990
Ian barber and they explained there is a

00:01:11,469 --> 00:01:16,539
term that specify this and apparently

00:01:13,990 --> 00:01:20,890
most people who visit brooch are labeled

00:01:16,539 --> 00:01:22,450
chaps so apparently these are the people

00:01:20,890 --> 00:01:25,619
and I'll never forget and every time I

00:01:22,450 --> 00:01:28,990
speak in the UK this light will come up

00:01:25,619 --> 00:01:30,549
okay some formalities this is my twitter

00:01:28,990 --> 00:01:33,340
name my twitter handle if you want to

00:01:30,549 --> 00:01:34,899
follow me i have joined in link up there

00:01:33,340 --> 00:01:37,509
if you want to give me feedback good or

00:01:34,899 --> 00:01:39,429
bad depends on what you want just put it

00:01:37,509 --> 00:01:41,590
up there and finally i have a blog so if

00:01:39,429 --> 00:01:44,950
you want to read some articles just go

00:01:41,590 --> 00:01:46,899
there last commercial slides of the day

00:01:44,950 --> 00:01:49,240
I work at combo where a hosting company

00:01:46,899 --> 00:01:51,969
we do everything from your ninety nine

00:01:49,240 --> 00:01:54,069
euros per year to tell your 99 million

00:01:51,969 --> 00:01:56,020
euros a year so to speak so we do

00:01:54,069 --> 00:01:58,450
hosting if you're interested just to

00:01:56,020 --> 00:02:00,779
check out our website combat go but

00:01:58,450 --> 00:02:04,029
let's get down to business so varnish

00:02:00,779 --> 00:02:07,509
who knows what varnishes who does not

00:02:04,029 --> 00:02:10,539
snow with varnishes yeah still a couple

00:02:07,509 --> 00:02:12,879
now let's let's ask the people in the

00:02:10,539 --> 00:02:14,830
front row how would you define varnish

00:02:12,879 --> 00:02:18,830
what's furnished to you

00:02:14,830 --> 00:02:21,530
squid that sexless squid that's any

00:02:18,830 --> 00:02:27,530
other people who have an opinion you sir

00:02:21,530 --> 00:02:29,510
what's varnish this is basically what it

00:02:27,530 --> 00:02:31,030
does it's people call it a reverse proxy

00:02:29,510 --> 00:02:33,950
other people call it a caching proxy

00:02:31,030 --> 00:02:36,560
other people do load balancing with it

00:02:33,950 --> 00:02:38,000
now I look for a specific definition on

00:02:36,560 --> 00:02:40,400
what it means and the people that

00:02:38,000 --> 00:02:42,620
varnish call it an HTTP accelerator

00:02:40,400 --> 00:02:44,780
because it does a variety of stuff found

00:02:42,620 --> 00:02:47,420
little picture slow things going fast

00:02:44,780 --> 00:02:48,860
and that's exactly what varnish does but

00:02:47,420 --> 00:02:52,160
the main feature will be talking about

00:02:48,860 --> 00:02:56,330
is caching so what's caching for those

00:02:52,160 --> 00:02:58,160
who don't know basically is just storing

00:02:56,330 --> 00:03:00,110
computed data for faster serving of

00:02:58,160 --> 00:03:02,270
future requests and in human terms just

00:03:00,110 --> 00:03:04,760
putting stuff in boxes for later use so

00:03:02,270 --> 00:03:07,580
that's I think everyone knows that so

00:03:04,760 --> 00:03:09,680
let's let's just skip it but then the

00:03:07,580 --> 00:03:12,080
next question is why would you cash why

00:03:09,680 --> 00:03:13,400
would you do a thing like that and I

00:03:12,080 --> 00:03:15,200
think there have been multiple talks

00:03:13,400 --> 00:03:16,670
about caching I just went to rob stock

00:03:15,200 --> 00:03:18,860
and there was a fair amount of cashing

00:03:16,670 --> 00:03:20,570
in it bottom line protect your server

00:03:18,860 --> 00:03:23,720
that's the main reason why you want to

00:03:20,570 --> 00:03:25,340
do caching now let's go back back in the

00:03:23,720 --> 00:03:27,620
day when the internet was still young

00:03:25,340 --> 00:03:29,810
and in the beginning there was nothing

00:03:27,620 --> 00:03:32,450
as the Bible says but in the beginning

00:03:29,810 --> 00:03:34,459
there was browser cache and everyone

00:03:32,450 --> 00:03:36,110
liked or hated browser cache I used to

00:03:34,459 --> 00:03:38,060
when I when I was like 16 years old I

00:03:36,110 --> 00:03:40,310
hated browser cache because I didn't see

00:03:38,060 --> 00:03:43,040
the latest news and I had to refresh it

00:03:40,310 --> 00:03:44,989
and then I saw the latest bit later on I

00:03:43,040 --> 00:03:47,390
learned to appreciate it because as a

00:03:44,989 --> 00:03:50,630
professional now I see that cash is good

00:03:47,390 --> 00:03:52,370
and protects you and they're different

00:03:50,630 --> 00:03:54,049
ways of doing it you have expire headers

00:03:52,370 --> 00:03:57,049
you have like cache control headers just

00:03:54,049 --> 00:03:58,880
pretty basic stuff apparently and I

00:03:57,049 --> 00:04:00,530
haven't used it that much there's a

00:03:58,880 --> 00:04:02,299
thing like the last modified in the

00:04:00,530 --> 00:04:04,040
e-tag that's rather than working with

00:04:02,299 --> 00:04:06,110
the time to live work within validation

00:04:04,040 --> 00:04:09,950
it's a nice feature but that's not

00:04:06,110 --> 00:04:13,070
really the point of this talk we'll talk

00:04:09,950 --> 00:04:15,019
about I'll talk about varnish but from a

00:04:13,070 --> 00:04:18,590
PHP perspective now if you want to do

00:04:15,019 --> 00:04:20,630
cashing in PHP basic front-end Cashin

00:04:18,590 --> 00:04:24,169
you use a script like this you would

00:04:20,630 --> 00:04:26,840
explicitly use cash control or you can

00:04:24,169 --> 00:04:28,430
use apache and you have more expires

00:04:26,840 --> 00:04:31,160
but there's pretty much the same thing

00:04:28,430 --> 00:04:32,720
but these slides are not made to learn

00:04:31,160 --> 00:04:34,070
you anything is just to make a point and

00:04:32,720 --> 00:04:36,830
make the point I'm trying to make is

00:04:34,070 --> 00:04:39,770
that browser cache is essentially your

00:04:36,830 --> 00:04:41,750
friend but there are problems a couple

00:04:39,770 --> 00:04:43,930
of problems and I think these are the

00:04:41,750 --> 00:04:46,250
problems if you come into contact with

00:04:43,930 --> 00:04:48,440
with front-end caching with with browser

00:04:46,250 --> 00:04:51,250
caching you probably know those so there

00:04:48,440 --> 00:04:53,479
are multiple standards you have explicit

00:04:51,250 --> 00:04:54,740
absolute values like the expires header

00:04:53,479 --> 00:04:57,139
you have the cache control headers which

00:04:54,740 --> 00:04:58,729
is relative and then you have the the

00:04:57,139 --> 00:05:01,220
fact that a lot of browsers don't

00:04:58,729 --> 00:05:02,720
support boats I tried this and when

00:05:01,220 --> 00:05:05,180
preparing this talk i tried browser

00:05:02,720 --> 00:05:07,370
cache and firefox did one thing google

00:05:05,180 --> 00:05:10,190
chrome did something else you have IE

00:05:07,370 --> 00:05:11,600
it's not really that reliable these days

00:05:10,190 --> 00:05:14,240
and the fact that people can force the

00:05:11,600 --> 00:05:16,940
cash to refresh really makes it useless

00:05:14,240 --> 00:05:18,380
because if you want to serve your save

00:05:16,940 --> 00:05:21,050
your servers and people can actually

00:05:18,380 --> 00:05:22,490
force a refresh they can attack your

00:05:21,050 --> 00:05:25,370
your back-end and that's what we're

00:05:22,490 --> 00:05:27,110
trying to avoid plus very important

00:05:25,370 --> 00:05:29,900
there's a cache per client not a global

00:05:27,110 --> 00:05:31,669
cache so everyone will probably figure

00:05:29,900 --> 00:05:34,789
out I'm going to say next you should use

00:05:31,669 --> 00:05:37,400
a caching reverse proxy such as varnish

00:05:34,789 --> 00:05:40,370
I stole the artwork on their side and

00:05:37,400 --> 00:05:43,970
used their catchphrase with which is

00:05:40,370 --> 00:05:45,470
it'll make your side fly and when going

00:05:43,970 --> 00:05:47,630
through the stock you'll basically see

00:05:45,470 --> 00:05:49,910
that varnish comes with a set of nifty

00:05:47,630 --> 00:05:52,370
tools and the configurations that will

00:05:49,910 --> 00:05:54,260
really make your site faster now these

00:05:52,370 --> 00:05:56,510
will come on SlideShare it has some URLs

00:05:54,260 --> 00:05:58,490
just follow them check what's going on

00:05:56,510 --> 00:06:01,010
and you'll see that there's a fair

00:05:58,490 --> 00:06:02,599
amount of documentation I expected more

00:06:01,010 --> 00:06:04,520
when starting making this talk I

00:06:02,599 --> 00:06:06,710
expected more documentation but it's

00:06:04,520 --> 00:06:10,660
decent ok let's start with the beginning

00:06:06,710 --> 00:06:14,389
setting it up the basics of it all a

00:06:10,660 --> 00:06:15,770
disclaimer i use ubuntu /d bein so the

00:06:14,389 --> 00:06:18,320
installing will happen from that

00:06:15,770 --> 00:06:19,580
perspective so this is also a copy paste

00:06:18,320 --> 00:06:22,520
from their side but it's quite useful

00:06:19,580 --> 00:06:24,440
you just add the key for the debian

00:06:22,520 --> 00:06:27,680
package and then you do you'll see it

00:06:24,440 --> 00:06:30,860
here just get the dead package added to

00:06:27,680 --> 00:06:33,050
your sources.list update it and install

00:06:30,860 --> 00:06:36,830
it and it's done who uses a debian or

00:06:33,050 --> 00:06:38,659
Ubuntu or okay so this could be quite

00:06:36,830 --> 00:06:40,550
useful to you now once you've installed

00:06:38,659 --> 00:06:42,470
it you say ok let's run it let's

00:06:40,550 --> 00:06:44,600
but it's not that simple it comes with a

00:06:42,470 --> 00:06:48,050
configuration file which resides here

00:06:44,600 --> 00:06:51,140
and this is the second time I gave AI

00:06:48,050 --> 00:06:53,360
gave this talk and I forgot that one the

00:06:51,140 --> 00:06:55,250
first time around start you have to put

00:06:53,360 --> 00:06:56,510
it on yes explicitly because if it's no

00:06:55,250 --> 00:06:59,090
you won't have that much fun with

00:06:56,510 --> 00:07:01,790
varnish but this is no no you won't it

00:06:59,090 --> 00:07:03,470
it will reel it early stop working so

00:07:01,790 --> 00:07:05,150
put that on yes and maybe we should

00:07:03,470 --> 00:07:07,790
consider mentioning this to the varnish

00:07:05,150 --> 00:07:14,480
people that you should have it yes as a

00:07:07,790 --> 00:07:15,920
default value and no I prefer it on it

00:07:14,480 --> 00:07:23,720
took me it took me an hour to figure

00:07:15,920 --> 00:07:26,780
that one out ok so I'm sorry blaming it

00:07:23,720 --> 00:07:28,940
on varnish Oh bring two so just put it

00:07:26,780 --> 00:07:30,380
on please put it on and then start

00:07:28,940 --> 00:07:33,260
working now these are our basic

00:07:30,380 --> 00:07:35,930
configuration values so the minus a just

00:07:33,260 --> 00:07:37,730
tells you listen on that IP dead bored I

00:07:35,930 --> 00:07:40,070
didn't mention an IP so it's it listens

00:07:37,730 --> 00:07:41,720
on all I piece on port 80 now why 80

00:07:40,070 --> 00:07:43,400
because you want to mimic your HTTP

00:07:41,720 --> 00:07:45,080
server you want to make your clients

00:07:43,400 --> 00:07:47,600
believe that you are actually an HTTP

00:07:45,080 --> 00:07:49,400
server whereas you're just a proxy now

00:07:47,600 --> 00:07:51,500
the minus T the capital T is a really

00:07:49,400 --> 00:07:53,420
fun one it's an hour you'll have some

00:07:51,500 --> 00:07:55,430
slides on that later it's actually a

00:07:53,420 --> 00:07:57,770
manageable telnet interface that allows

00:07:55,430 --> 00:08:00,050
you to log in and do some management

00:07:57,770 --> 00:08:03,530
tasks I'll cover the management tasks in

00:08:00,050 --> 00:08:06,140
a bit and the minus f is the place where

00:08:03,530 --> 00:08:07,610
your main configuration file resides now

00:08:06,140 --> 00:08:10,700
that could be confusing because this is

00:08:07,610 --> 00:08:12,290
a configuration file itself but this is

00:08:10,700 --> 00:08:14,510
just the configuration to get varnish

00:08:12,290 --> 00:08:15,710
running to get varnish working as you

00:08:14,510 --> 00:08:17,720
want it requires a different

00:08:15,710 --> 00:08:19,910
configuration file which is the vcl and

00:08:17,720 --> 00:08:22,250
vcl the extension of that file stands

00:08:19,910 --> 00:08:23,690
for varnish configuration language so

00:08:22,250 --> 00:08:26,450
there's a programming language that

00:08:23,690 --> 00:08:28,670
actually allows you to just tweak it and

00:08:26,450 --> 00:08:30,290
I think I have a fair amount of slice on

00:08:28,670 --> 00:08:33,620
that so for those who want to see real

00:08:30,290 --> 00:08:36,980
life vcl you'll have some now the final

00:08:33,620 --> 00:08:40,040
bit is not configured in the most

00:08:36,980 --> 00:08:42,140
efficient way I chose file storage but

00:08:40,040 --> 00:08:44,540
it comes with shared memory as well so

00:08:42,140 --> 00:08:48,020
in this case I just took one gigabyte of

00:08:44,540 --> 00:08:50,450
binary storage on file so once we've

00:08:48,020 --> 00:08:53,170
done that you can run it it's in your et

00:08:50,450 --> 00:08:56,079
Cie I need deef directory just start

00:08:53,170 --> 00:08:57,490
and it works but setting up the back end

00:08:56,079 --> 00:08:59,050
is also essential to getting stuff

00:08:57,490 --> 00:09:00,700
working it's not because you have a

00:08:59,050 --> 00:09:02,529
varnish that it works as it should you

00:09:00,700 --> 00:09:04,540
should mention to the varnish instance

00:09:02,529 --> 00:09:07,990
where the back end resides and the back

00:09:04,540 --> 00:09:10,630
end well if you open this the EDC

00:09:07,990 --> 00:09:13,120
varnish default dot vcl you'll have some

00:09:10,630 --> 00:09:15,880
commented out code if you just delete it

00:09:13,120 --> 00:09:17,560
all and add this given the fact that

00:09:15,880 --> 00:09:19,930
this is actually the place where your

00:09:17,560 --> 00:09:22,570
Apache resides know tonight will work

00:09:19,930 --> 00:09:25,209
now the trick is I added 8080 by default

00:09:22,570 --> 00:09:28,029
Apache runs on port 80 so I explicitly

00:09:25,209 --> 00:09:30,339
put 8080 there and you'll see on the

00:09:28,029 --> 00:09:32,320
next slide that you then have to

00:09:30,339 --> 00:09:34,930
reconfigure your patchy so it no longer

00:09:32,320 --> 00:09:37,540
listens or binds to a tee but to 80 80

00:09:34,930 --> 00:09:40,389
now this is on production environments

00:09:37,540 --> 00:09:42,940
in a development stage I just switched

00:09:40,389 --> 00:09:45,010
them and keep Apache default 80 and I

00:09:42,940 --> 00:09:47,760
just take 80 80 if I want to see how it

00:09:45,010 --> 00:09:50,380
responds when when using a varnish cash

00:09:47,760 --> 00:09:53,079
so we've set it up basically and now we

00:09:50,380 --> 00:09:55,930
want to use it and out of the box

00:09:53,079 --> 00:09:58,600
varnish doesn't do that much it does two

00:09:55,930 --> 00:09:59,980
things first of all it's a Bezier

00:09:58,600 --> 00:10:01,510
caching header so if you've mentioned

00:09:59,980 --> 00:10:03,279
caching headers and then we get back to

00:10:01,510 --> 00:10:05,140
the beginning of the presentation where

00:10:03,279 --> 00:10:07,410
i showed you how to do it in PHP or with

00:10:05,140 --> 00:10:09,519
apache if it has good caching headers

00:10:07,410 --> 00:10:11,380
varnish will respect it and you will

00:10:09,519 --> 00:10:13,290
have the appropriate time to live that

00:10:11,380 --> 00:10:16,510
is mentioned there another thing it does

00:10:13,290 --> 00:10:19,350
it stores static files which is a real

00:10:16,510 --> 00:10:23,199
good thing it stores jeep eggs PNG's

00:10:19,350 --> 00:10:27,010
javascript file CSS all other files that

00:10:23,199 --> 00:10:28,449
don't change a lot so we've set it up we

00:10:27,010 --> 00:10:30,640
know what it does out of the box let's

00:10:28,449 --> 00:10:32,800
let's let's have some action that's

00:10:30,640 --> 00:10:36,699
that's what I want to anyone seen that

00:10:32,800 --> 00:10:41,589
goal couple of weeks ago no one yeah

00:10:36,699 --> 00:10:43,660
great goal isn't it so in the action bit

00:10:41,589 --> 00:10:46,209
I try to relate to Britain as much as I

00:10:43,660 --> 00:10:47,920
can I do have some offensive slides and

00:10:46,209 --> 00:10:50,860
I already regret putting him up because

00:10:47,920 --> 00:10:52,480
we're video tape so that that could

00:10:50,860 --> 00:10:55,089
cause some trouble now it's time for

00:10:52,480 --> 00:10:56,829
action first thing we'll do is go

00:10:55,089 --> 00:10:59,350
through the flow this is a fairly

00:10:56,829 --> 00:11:01,060
important a little drawing there and it

00:10:59,350 --> 00:11:04,029
will come back and you will understand

00:11:01,060 --> 00:11:05,920
how it works so let me explain first of

00:11:04,029 --> 00:11:06,819
all your request comes in it's a basic

00:11:05,920 --> 00:11:08,859
HTTP

00:11:06,819 --> 00:11:11,589
and varnish works in that way that it

00:11:08,859 --> 00:11:13,269
has several stages steps it creates true

00:11:11,589 --> 00:11:15,339
to make a decision on whether or not to

00:11:13,269 --> 00:11:16,929
cash it or retrieve it from cash or how

00:11:15,339 --> 00:11:18,879
it delivers it we call these hooks and

00:11:16,929 --> 00:11:21,100
these hooks are programmable so we have

00:11:18,879 --> 00:11:23,199
this is a hook this is 1 this is this

00:11:21,100 --> 00:11:25,449
and this these are basically hooks you

00:11:23,199 --> 00:11:27,639
can program into all the rest is just

00:11:25,449 --> 00:11:29,619
basic state so you come in with your

00:11:27,639 --> 00:11:31,449
HTTP request and you always have the

00:11:29,619 --> 00:11:33,910
receiving end and in the receiving end

00:11:31,449 --> 00:11:36,189
the system will decide if it's cacheable

00:11:33,910 --> 00:11:38,709
or not and if it's cashable which has to

00:11:36,189 --> 00:11:40,359
apply so the VCL hash then makes the

00:11:38,709 --> 00:11:42,939
hash based on the input parameters and

00:11:40,359 --> 00:11:44,739
looks it up and if it's in the cache

00:11:42,939 --> 00:11:47,369
well you'll have hit if it's not in the

00:11:44,739 --> 00:11:49,899
cache obviously you'll have a Miss if

00:11:47,369 --> 00:11:51,910
it's not cashable you'll hit the fetch

00:11:49,899 --> 00:11:53,799
one so the fetch which is here

00:11:51,910 --> 00:11:55,809
immediately this is the same thing

00:11:53,799 --> 00:11:58,239
you'll have when you have a Miss so the

00:11:55,809 --> 00:12:01,629
fetch just basically goes to the back

00:11:58,239 --> 00:12:04,079
end gets the data and delivers it to the

00:12:01,629 --> 00:12:06,759
deliverer method so and deliver method

00:12:04,079 --> 00:12:08,649
you'll see some code where I really

00:12:06,759 --> 00:12:11,679
modify the delivery method it's just the

00:12:08,649 --> 00:12:16,779
way how all the HTML and all the data is

00:12:11,679 --> 00:12:19,779
returned back to the client so we set it

00:12:16,779 --> 00:12:21,970
up we know what it does we know how the

00:12:19,779 --> 00:12:23,979
caching basically works but now we want

00:12:21,970 --> 00:12:26,829
to learn how it responds so it's all

00:12:23,979 --> 00:12:29,799
about success and failure translated to

00:12:26,829 --> 00:12:31,929
this scope its hits and misses so the

00:12:29,799 --> 00:12:33,850
way to do it is actually have logging in

00:12:31,929 --> 00:12:35,350
statistics the more logging in

00:12:33,850 --> 00:12:37,689
statistics you have the more you know

00:12:35,350 --> 00:12:39,759
about your hits miss ratio and

00:12:37,689 --> 00:12:42,600
especially where the hits and the missus

00:12:39,759 --> 00:12:45,609
came from so varnish has a ton of cool

00:12:42,600 --> 00:12:47,439
binaries that come out of the box the

00:12:45,609 --> 00:12:50,109
first one we'll have is the varnish step

00:12:47,439 --> 00:12:52,089
now the urls it's not really worthwhile

00:12:50,109 --> 00:12:54,220
going to them now so if you go the

00:12:52,089 --> 00:12:56,649
SlideShare and I think it'll be added to

00:12:54,220 --> 00:12:58,329
the joined in you'll see the link to

00:12:56,649 --> 00:13:00,759
those and you can steadily go to those

00:12:58,329 --> 00:13:02,679
URLs it it specifically mentions what it

00:13:00,759 --> 00:13:05,199
does and I'll show you a basic slide

00:13:02,679 --> 00:13:06,699
this is if you run varnish that these

00:13:05,199 --> 00:13:09,459
are this is the data you'll get this is

00:13:06,699 --> 00:13:12,449
just a summary of how your varnish is

00:13:09,459 --> 00:13:15,669
responding it could be helpful to know

00:13:12,449 --> 00:13:17,049
some metrics but we have more specific

00:13:15,669 --> 00:13:19,509
binaries coming up so if you want to

00:13:17,049 --> 00:13:20,170
know how your server is doing that's the

00:13:19,509 --> 00:13:22,360
one you want to need

00:13:20,170 --> 00:13:24,190
but my one of my favorite ones is

00:13:22,360 --> 00:13:26,889
Varner's log and it works in a similar

00:13:24,190 --> 00:13:29,920
way like the Apache log works it

00:13:26,889 --> 00:13:32,170
processes all incoming requests but

00:13:29,920 --> 00:13:33,850
there's one huge difference the format

00:13:32,170 --> 00:13:35,829
in which it stores it is not the same

00:13:33,850 --> 00:13:37,810
and the location where it stores it is

00:13:35,829 --> 00:13:40,389
very much not the same like varn of

00:13:37,810 --> 00:13:42,100
Apache stores its own disk in a certain

00:13:40,389 --> 00:13:45,130
format whereas varnish stores at binary

00:13:42,100 --> 00:13:47,110
in memory and if you run varnish lock it

00:13:45,130 --> 00:13:49,209
will read it from memory and try it on

00:13:47,110 --> 00:13:51,519
your standard out so you immediately see

00:13:49,209 --> 00:13:54,910
in a sequential way what goes through

00:13:51,519 --> 00:13:56,649
your varnish really cool one but it's

00:13:54,910 --> 00:13:58,209
not that simple it's not just running

00:13:56,649 --> 00:13:59,680
the command but if you run it and you'll

00:13:58,209 --> 00:14:01,690
see a slide of that it will show you

00:13:59,680 --> 00:14:04,480
everything and sometimes you want to

00:14:01,690 --> 00:14:06,880
know very specific aspects of your hits

00:14:04,480 --> 00:14:08,649
your missus and the things that are in

00:14:06,880 --> 00:14:10,899
coming to do that there are tags that

00:14:08,649 --> 00:14:12,760
identify all these actions I have a list

00:14:10,899 --> 00:14:14,500
of the most frequent ones you see a

00:14:12,760 --> 00:14:16,269
pattern there you see the RX once and

00:14:14,500 --> 00:14:19,240
the TX ones and then you have like the

00:14:16,269 --> 00:14:21,940
first column is some random stuff let's

00:14:19,240 --> 00:14:24,490
go from right to left so the RX ones are

00:14:21,940 --> 00:14:27,160
the requests that's the stuff the client

00:14:24,490 --> 00:14:28,959
sends to you the TX ones are the ones

00:14:27,160 --> 00:14:31,120
that are used to communicate with the

00:14:28,959 --> 00:14:33,250
back end in this case the Apache and all

00:14:31,120 --> 00:14:35,110
the rest is just random stuff from the

00:14:33,250 --> 00:14:37,420
random stuff I would advise you to look

00:14:35,110 --> 00:14:39,070
at call return and ACL these are

00:14:37,420 --> 00:14:41,290
actually these are who can to the

00:14:39,070 --> 00:14:43,480
programmability of it all it hooks into

00:14:41,290 --> 00:14:46,839
your vcl file and it shows you what

00:14:43,480 --> 00:14:49,540
hisses hits and misses you have this is

00:14:46,839 --> 00:14:53,740
a basic use case of it you just want to

00:14:49,540 --> 00:14:55,630
know your top post requests because post

00:14:53,740 --> 00:14:58,570
requests obviously aren't going to get

00:14:55,630 --> 00:15:00,430
cached because it's not really the way

00:14:58,570 --> 00:15:01,870
it works if you get a get it means you

00:15:00,430 --> 00:15:03,550
just serve a page that we want to

00:15:01,870 --> 00:15:05,920
display if you do post you're

00:15:03,550 --> 00:15:07,089
interacting with forms so no reason to

00:15:05,920 --> 00:15:09,220
catch that but if you want to know what

00:15:07,089 --> 00:15:12,010
your top posts are just use this and the

00:15:09,220 --> 00:15:14,110
minus C variable just says please

00:15:12,010 --> 00:15:15,750
include communication with the clients

00:15:14,110 --> 00:15:20,170
and the minus oh just group them all

00:15:15,750 --> 00:15:22,000
based on the bit so the process ID if

00:15:20,170 --> 00:15:24,610
you don't mention the minus 0 it will

00:15:22,000 --> 00:15:26,860
just go it's just first come first serve

00:15:24,610 --> 00:15:29,170
it just goes in and it might not be that

00:15:26,860 --> 00:15:32,529
easy to comprehend so if you add the

00:15:29,170 --> 00:15:33,250
minus 0 it will help you a lot there are

00:15:32,529 --> 00:15:35,950
different

00:15:33,250 --> 00:15:39,760
you can actually use you have like the

00:15:35,950 --> 00:15:41,710
RX header which is all the headers you

00:15:39,760 --> 00:15:43,960
get all the HTTP headers you get when

00:15:41,710 --> 00:15:45,670
connecting from the client to the

00:15:43,960 --> 00:15:47,200
varnish and you can filter out all the

00:15:45,670 --> 00:15:48,760
user agents so if you just want to know

00:15:47,200 --> 00:15:50,590
which user agents are hitting it will

00:15:48,760 --> 00:15:53,620
just type this command and you'll be

00:15:50,590 --> 00:15:56,230
just fine another one you could do is

00:15:53,620 --> 00:15:58,420
like say well all my miss what are all

00:15:56,230 --> 00:16:01,150
my missus and which URLs pacifically

00:15:58,420 --> 00:16:03,640
miss and then you'll see you can add the

00:16:01,150 --> 00:16:08,200
minus I to filter on attack and mention

00:16:03,640 --> 00:16:09,610
tag explicitly so we still have tons of

00:16:08,200 --> 00:16:12,070
other stuff like if you want to know how

00:16:09,610 --> 00:16:14,380
to do if you want to know all the hits I

00:16:12,070 --> 00:16:16,270
had to combine some Linux magic I

00:16:14,380 --> 00:16:17,830
haven't found yet if there's a built-in

00:16:16,270 --> 00:16:19,840
way to filter it out but this is the

00:16:17,830 --> 00:16:22,240
easiest way for me to do so you just say

00:16:19,840 --> 00:16:24,280
well look at the vcl call that happens

00:16:22,240 --> 00:16:26,800
so that's one of the hooks it's when it

00:16:24,280 --> 00:16:28,150
hits it just grip out to our X URL you

00:16:26,800 --> 00:16:30,970
want and then you'll immediately see

00:16:28,150 --> 00:16:34,600
which URL is hit so that's the basic

00:16:30,970 --> 00:16:35,890
ratio now varner blog comes with a

00:16:34,600 --> 00:16:37,390
different set of tools because i

00:16:35,890 --> 00:16:38,970
mentioned it's all stored in memory not

00:16:37,390 --> 00:16:41,320
in files and sometimes you want

00:16:38,970 --> 00:16:44,020
persistence of it all so you can add the

00:16:41,320 --> 00:16:46,330
minus W parameter and what did this the

00:16:44,020 --> 00:16:48,580
minus W accepts an argument and that

00:16:46,330 --> 00:16:50,230
argument is just the location where the

00:16:48,580 --> 00:16:52,810
file is going to be stored so if you add

00:16:50,230 --> 00:16:54,820
minus W it's going to store the look but

00:16:52,810 --> 00:16:56,740
don't be confused if you open it it will

00:16:54,820 --> 00:16:58,360
not be readable it's just binary format

00:16:56,740 --> 00:17:00,430
but it could be used for for other

00:16:58,360 --> 00:17:02,650
purposes so if you want to store that

00:17:00,430 --> 00:17:04,390
scenario or you have some event that

00:17:02,650 --> 00:17:06,730
appeared and you want to date on it well

00:17:04,390 --> 00:17:08,530
just do minus W store it and it's there

00:17:06,730 --> 00:17:11,020
for later use and with the minus R

00:17:08,530 --> 00:17:14,680
parameter you can get it up again and

00:17:11,020 --> 00:17:16,689
get it fully working now let's spend

00:17:14,680 --> 00:17:18,579
some time going through a basic one the

00:17:16,689 --> 00:17:22,689
can anyone read these people in the back

00:17:18,579 --> 00:17:25,150
and you read this properly not that good

00:17:22,689 --> 00:17:27,100
but I'll wait right through it so this

00:17:25,150 --> 00:17:29,380
is an unfiltered version of a varnish

00:17:27,100 --> 00:17:32,230
love this this is just a basic request

00:17:29,380 --> 00:17:34,360
and i'll help you true it so this is

00:17:32,230 --> 00:17:36,760
important I have a vm on my computer

00:17:34,360 --> 00:17:39,400
which is varnish death and it runs on

00:17:36,760 --> 00:17:41,590
port 8080 which means Apache still

00:17:39,400 --> 00:17:44,500
serves all HTTP requests by default but

00:17:41,590 --> 00:17:46,450
if I mentioned 8080 explicitly you hit

00:17:44,500 --> 00:17:47,169
the varnish the file alcohol that I

00:17:46,450 --> 00:17:49,539
called

00:17:47,169 --> 00:17:53,200
test of bhp and it's actually a get

00:17:49,539 --> 00:17:54,820
method so you see all the Seas here that

00:17:53,200 --> 00:17:57,549
implies that we're communicating with

00:17:54,820 --> 00:17:59,619
the client itself you have your basic RX

00:17:57,549 --> 00:18:01,179
headers these are all HTTP headers and

00:17:59,619 --> 00:18:04,989
here you see the magic of the of the

00:18:01,179 --> 00:18:07,629
hooks you do a vcl call on the receiving

00:18:04,989 --> 00:18:08,799
end so that means you have a receive but

00:18:07,629 --> 00:18:10,359
you always have received so that's

00:18:08,799 --> 00:18:12,940
pretty basic if you leave out the minus

00:18:10,359 --> 00:18:15,309
or if you explicitly mention not to have

00:18:12,940 --> 00:18:18,850
the C ones you won't see receiving bit

00:18:15,309 --> 00:18:21,820
now unfortunately I have a pass so I

00:18:18,850 --> 00:18:23,529
don't have a hit means this page is not

00:18:21,820 --> 00:18:25,840
cached and there's a clear reason why

00:18:23,529 --> 00:18:28,389
it's not cached if you check it here it

00:18:25,840 --> 00:18:29,980
comes with a PHP session ID this means a

00:18:28,389 --> 00:18:31,809
cookie and cookies are in cash because

00:18:29,980 --> 00:18:34,450
if you would catch data with cookies

00:18:31,809 --> 00:18:36,730
that would imply that user specific data

00:18:34,450 --> 00:18:38,590
would be in your all-round cash so if I

00:18:36,730 --> 00:18:40,389
would catch that the next person would

00:18:38,590 --> 00:18:42,850
see my data because it would have my

00:18:40,389 --> 00:18:44,919
cookie we refer to my session and from

00:18:42,850 --> 00:18:46,450
security perspective and from a

00:18:44,919 --> 00:18:48,789
usability perspective it's not a good

00:18:46,450 --> 00:18:51,489
idea so by default cookies aren't cached

00:18:48,789 --> 00:18:53,529
and PHP sessions are unfortunately to

00:18:51,489 --> 00:18:56,619
store it in that way but we still have

00:18:53,529 --> 00:18:59,559
plenty more that comes comes along so we

00:18:56,619 --> 00:19:02,200
don't really do that makes up a hash it

00:18:59,559 --> 00:19:03,940
goes through and it connects to the

00:19:02,200 --> 00:19:06,399
default back end so if you don't

00:19:03,940 --> 00:19:07,989
configure it in a specific way the back

00:19:06,399 --> 00:19:09,879
end is always called default and you can

00:19:07,989 --> 00:19:13,350
see clearly here that is on the local

00:19:09,879 --> 00:19:15,700
host on port 80 and then we continue

00:19:13,350 --> 00:19:17,889
there's a second page of this stuff so

00:19:15,700 --> 00:19:19,389
if it gets boring please give me some

00:19:17,889 --> 00:19:21,429
sort of signal but I find it quite

00:19:19,389 --> 00:19:22,899
important that you know how how the log

00:19:21,429 --> 00:19:26,769
works and how you can interpret all the

00:19:22,899 --> 00:19:28,629
data so we've reached the TX range and

00:19:26,769 --> 00:19:30,639
it says be here this was all be which

00:19:28,629 --> 00:19:32,859
means back ends so this is varnish

00:19:30,639 --> 00:19:34,539
talking to my back into my Apache and it

00:19:32,859 --> 00:19:38,019
gets true that the fact that you're

00:19:34,539 --> 00:19:41,070
using test of PHP the host was a DAT etc

00:19:38,019 --> 00:19:43,989
etc etc so we're just going through it

00:19:41,070 --> 00:19:47,350
and then it responds back with all the

00:19:43,989 --> 00:19:50,049
VCL data it's very verbose not all stuff

00:19:47,350 --> 00:19:52,779
is clear to me but you can see going

00:19:50,049 --> 00:19:54,190
through it how it works object header

00:19:52,779 --> 00:19:57,369
that's just the object that is stored

00:19:54,190 --> 00:19:59,320
it's the transport format of the HTTP

00:19:57,369 --> 00:20:00,090
and the way it communicates back then to

00:19:59,320 --> 00:20:02,039
the to the

00:20:00,090 --> 00:20:04,440
varnish so you see all the stuff here

00:20:02,039 --> 00:20:07,289
you have the transaction headers etc etc

00:20:04,440 --> 00:20:09,179
etc and then we have varnished up that

00:20:07,289 --> 00:20:12,059
was varnish log varnish top is a very

00:20:09,179 --> 00:20:14,309
similar binary as varnish lock but it

00:20:12,059 --> 00:20:15,900
doesn't process it in a in a

00:20:14,309 --> 00:20:17,700
transactional way it just doesn't go

00:20:15,900 --> 00:20:20,970
through it first come first serve know

00:20:17,700 --> 00:20:22,919
it accumulates the data it compares it

00:20:20,970 --> 00:20:24,720
and just adds it I think most people

00:20:22,919 --> 00:20:27,000
knew no top I guess do people know top

00:20:24,720 --> 00:20:31,350
linux top it's very much the same thing

00:20:27,000 --> 00:20:32,970
and in comparison to log it's even this

00:20:31,350 --> 00:20:34,620
is my best friend if you open it you

00:20:32,970 --> 00:20:36,360
give it to right parameters the right

00:20:34,620 --> 00:20:38,580
filters you know everything of the

00:20:36,360 --> 00:20:40,350
current state of your application I did

00:20:38,580 --> 00:20:42,720
that for a customer once I opened

00:20:40,350 --> 00:20:45,120
varnish top added the missus and you

00:20:42,720 --> 00:20:47,820
immediately saw where it hit I have a

00:20:45,120 --> 00:20:49,649
slide on that feeling pretty soon I'll

00:20:47,820 --> 00:20:51,120
show some filters first like if you want

00:20:49,649 --> 00:20:54,120
to know the top user agents that hit the

00:20:51,120 --> 00:20:56,340
system just add this and it will the

00:20:54,120 --> 00:20:59,549
minus I says well filter out that

00:20:56,340 --> 00:21:01,679
specific specific deck and the header or

00:20:59,549 --> 00:21:03,960
filtering on is the RX header so the

00:21:01,679 --> 00:21:05,490
receiving header and you filter out user

00:21:03,960 --> 00:21:07,110
agents and you immediately know which

00:21:05,490 --> 00:21:11,220
are the popular ones the Firefox's the

00:21:07,110 --> 00:21:14,010
google chrome's etc etc this is one I

00:21:11,220 --> 00:21:15,419
used to get the top request methods it's

00:21:14,010 --> 00:21:17,490
just this doesn't really mean anything

00:21:15,419 --> 00:21:18,779
it's not like you're going to say I want

00:21:17,490 --> 00:21:20,429
to know what the top request methods are

00:21:18,779 --> 00:21:23,100
I'm just trying to show you how it works

00:21:20,429 --> 00:21:25,169
and how you can puzzle with it yourself

00:21:23,100 --> 00:21:27,120
there are plenty of options and the

00:21:25,169 --> 00:21:29,100
manual is pretty pretty clear on how it

00:21:27,120 --> 00:21:31,669
works so if you want your custom filters

00:21:29,100 --> 00:21:34,529
it's really really easy to implement

00:21:31,669 --> 00:21:36,659
this is a useful one like what are my

00:21:34,529 --> 00:21:42,409
top mrs. what do I need to improve in

00:21:36,659 --> 00:21:42,409
some sort and will immediately skipped

00:21:43,149 --> 00:21:47,679
to the layout now I this is an

00:21:45,219 --> 00:21:50,559
unfiltered version in fact so it doesn't

00:21:47,679 --> 00:21:53,859
really filter on any specific tag any

00:21:50,559 --> 00:21:56,679
specific URL anything in specific well

00:21:53,859 --> 00:21:58,929
it just says is that it accumulates

00:21:56,679 --> 00:22:01,929
these ones so the ones that come along

00:21:58,929 --> 00:22:04,389
most get on the top now pass is my top

00:22:01,929 --> 00:22:07,210
one which is quite bad news because I

00:22:04,389 --> 00:22:09,039
don't hit my cash but it doesn't really

00:22:07,210 --> 00:22:11,379
matter it is just for templating

00:22:09,039 --> 00:22:13,659
purposes but you see how it works you

00:22:11,379 --> 00:22:15,789
see that the RX protocol and the TX

00:22:13,659 --> 00:22:17,889
protocols are the things use most but if

00:22:15,789 --> 00:22:19,960
you filter on request URL you will see

00:22:17,889 --> 00:22:22,479
all the URLs passing by and you'll see

00:22:19,960 --> 00:22:25,929
the ones that hit or miss most depending

00:22:22,479 --> 00:22:28,389
on the filter you use now this is really

00:22:25,929 --> 00:22:31,330
really cool one because a lot of people

00:22:28,389 --> 00:22:34,570
use like who uses aw stats on is hosting

00:22:31,330 --> 00:22:38,529
to not that much you use Google

00:22:34,570 --> 00:22:40,809
Analytics ok the majority good choice we

00:22:38,529 --> 00:22:42,580
still use I work at a hosting company so

00:22:40,809 --> 00:22:44,349
we still use aw stats because some

00:22:42,580 --> 00:22:46,899
customers don't have Google Analytics

00:22:44,349 --> 00:22:48,669
now if you process the locks on your

00:22:46,899 --> 00:22:50,619
Apache and have a varnish in front of it

00:22:48,669 --> 00:22:54,119
you won't see that much it won't

00:22:50,619 --> 00:22:56,139
represent the actual visitor rate but

00:22:54,119 --> 00:22:59,169
varnish has a sort of tool called

00:22:56,139 --> 00:23:00,669
varnish ncsa and it actually writes all

00:22:59,169 --> 00:23:03,249
the logs the binary locks into a

00:23:00,669 --> 00:23:06,269
physical file format that is readable by

00:23:03,249 --> 00:23:08,769
Apache compliant log file analyzers

00:23:06,269 --> 00:23:11,320
there's a link you'll see it but this is

00:23:08,769 --> 00:23:13,320
the most important slides you'll see

00:23:11,320 --> 00:23:15,940
that I added the minus D capital

00:23:13,320 --> 00:23:17,919
parameter it's the demonizing bit so you

00:23:15,940 --> 00:23:21,009
can run this in the background and A&W

00:23:17,919 --> 00:23:24,549
just mean a as an append don't write

00:23:21,009 --> 00:23:26,739
once over right and add it and minus W

00:23:24,549 --> 00:23:29,109
means store this to a file you can make

00:23:26,739 --> 00:23:31,389
it go to standard output and add gear

00:23:29,109 --> 00:23:33,399
man or to it if you want to but will

00:23:31,389 --> 00:23:34,479
store it in a physical file and this is

00:23:33,399 --> 00:23:37,320
the file you will know this is the

00:23:34,479 --> 00:23:40,089
format you're used to so instead of just

00:23:37,320 --> 00:23:42,159
getting into the locks at the back end

00:23:40,089 --> 00:23:44,229
that don't represent anything you could

00:23:42,159 --> 00:23:46,539
use those you can put a log rotate on it

00:23:44,229 --> 00:23:49,269
and in the log rotate pre rotate hook

00:23:46,539 --> 00:23:52,869
you can add some aw stats magic and that

00:23:49,269 --> 00:23:54,369
will be just fine one more binary and

00:23:52,869 --> 00:23:55,980
then we will have a different sort of

00:23:54,369 --> 00:23:57,809
action one more binary and it's

00:23:55,980 --> 00:24:00,059
a hugely interesting one it's called

00:23:57,809 --> 00:24:03,330
varnish replay and varnish replay is

00:24:00,059 --> 00:24:05,549
able to replay logs binary looks that

00:24:03,330 --> 00:24:07,679
were made earlier so this is how it

00:24:05,549 --> 00:24:10,350
works and i'll explain a very common use

00:24:07,679 --> 00:24:12,720
case so you use varnish log you use the

00:24:10,350 --> 00:24:15,000
minus w parameter and you store all the

00:24:12,720 --> 00:24:17,820
data into a log file this is just binary

00:24:15,000 --> 00:24:19,890
data and if you do mind the minus R in

00:24:17,820 --> 00:24:22,200
the replay you can just load the data up

00:24:19,890 --> 00:24:24,210
and it will replay that scenario now

00:24:22,200 --> 00:24:31,590
anyone have a clue what this could be

00:24:24,210 --> 00:24:33,360
useful yes any of anything else that's

00:24:31,590 --> 00:24:34,590
the main one pre filling the cash you

00:24:33,360 --> 00:24:36,030
doing said pre filling the cash and

00:24:34,590 --> 00:24:38,700
that's an important one if you're gonna

00:24:36,030 --> 00:24:40,410
have a farm of different varnish servers

00:24:38,700 --> 00:24:42,240
and you add a new one to the load

00:24:40,410 --> 00:24:43,980
balancing and you put it like it's going

00:24:42,240 --> 00:24:45,450
to immediately attack your backends so

00:24:43,980 --> 00:24:47,549
what you want to do is maybe you want to

00:24:45,450 --> 00:24:49,559
warm up the cash a bit by having a

00:24:47,549 --> 00:24:52,770
common scenario the most common pages

00:24:49,559 --> 00:24:55,799
that are loaded you can call these URLs

00:24:52,770 --> 00:24:57,809
while having your varnish log command up

00:24:55,799 --> 00:24:59,669
and we'll all record it in a sort of

00:24:57,809 --> 00:25:03,540
macro and you just replay it and you

00:24:59,669 --> 00:25:05,850
have a hot cash immediately so next step

00:25:03,540 --> 00:25:07,530
we've installed it we've configured it

00:25:05,850 --> 00:25:10,980
we know what it does we know how it

00:25:07,530 --> 00:25:13,290
responds the next step is manipulating

00:25:10,980 --> 00:25:15,270
and it comes with as I mentioned a nice

00:25:13,290 --> 00:25:17,370
little tool called a telnet interface

00:25:15,270 --> 00:25:20,070
now telnet doesn't seem that secure but

00:25:17,370 --> 00:25:22,049
it does something this is a this is an

00:25:20,070 --> 00:25:24,809
example how i did it i just element it

00:25:22,049 --> 00:25:27,660
on the port 6082 now that board could be

00:25:24,809 --> 00:25:29,580
defined as you remember earlier with the

00:25:27,660 --> 00:25:31,740
minus T capital so if you do that it

00:25:29,580 --> 00:25:33,480
will try to connect and once it's in it

00:25:31,740 --> 00:25:35,340
will introduce itself and it will come

00:25:33,480 --> 00:25:37,770
with a help and acquit function these

00:25:35,340 --> 00:25:39,960
are the basic ones I won't go through

00:25:37,770 --> 00:25:42,150
all actions there are plenty but I'll go

00:25:39,960 --> 00:25:45,090
to the most notable ones it slowed use

00:25:42,150 --> 00:25:47,490
this card lists and show now what does

00:25:45,090 --> 00:25:49,650
this mean normally if you have a vcl

00:25:47,490 --> 00:25:52,559
file and the next bit I think the next

00:25:49,650 --> 00:25:54,090
slide is about pcl vcl is your

00:25:52,559 --> 00:25:56,490
configuration language and basically

00:25:54,090 --> 00:25:58,440
says to the varnish water cash and what

00:25:56,490 --> 00:26:00,660
not to cash but if you have new rules

00:25:58,440 --> 00:26:02,370
say you have something new you implement

00:26:00,660 --> 00:26:03,299
it and you want new caching rules what

00:26:02,370 --> 00:26:04,860
you're going to do you're going to open

00:26:03,299 --> 00:26:05,970
that vcl file you're going to change the

00:26:04,860 --> 00:26:07,970
rules you're going to save it and then

00:26:05,970 --> 00:26:09,350
you have to make sure these new

00:26:07,970 --> 00:26:11,480
pieces of data are stored in your

00:26:09,350 --> 00:26:13,910
varnish so you're going to restart demon

00:26:11,480 --> 00:26:14,960
and you'll gonna have your new conflict

00:26:13,910 --> 00:26:17,870
but that's not always a good idea

00:26:14,960 --> 00:26:20,900
especially in production if you take one

00:26:17,870 --> 00:26:22,400
of those caching servers out load

00:26:20,900 --> 00:26:23,990
balancer detects it is going to hit the

00:26:22,400 --> 00:26:26,450
other ones and if you have few ones it

00:26:23,990 --> 00:26:28,340
could cause that downtime and if you

00:26:26,450 --> 00:26:30,050
only have one of those people are going

00:26:28,340 --> 00:26:31,640
to see really strange errors so what

00:26:30,050 --> 00:26:33,530
varnish allows you with the talent

00:26:31,640 --> 00:26:37,100
interface is that has a sort of way to

00:26:33,530 --> 00:26:39,020
dynamically load configurations now vcl

00:26:37,100 --> 00:26:41,420
load just loads up a file that the

00:26:39,020 --> 00:26:43,370
second argument as you see and the first

00:26:41,420 --> 00:26:44,840
argument is a given name you can give so

00:26:43,370 --> 00:26:47,210
the way you can identify that

00:26:44,840 --> 00:26:49,400
configuration once you do load it won't

00:26:47,210 --> 00:26:52,100
do anything it would be just stored in

00:26:49,400 --> 00:26:55,220
the instance with that name ready for

00:26:52,100 --> 00:26:58,190
use and if you do vcl use it will

00:26:55,220 --> 00:26:59,180
immediately load it at that time and

00:26:58,190 --> 00:27:01,430
you'll immediately have that

00:26:59,180 --> 00:27:03,860
configuration ready which is quite easy

00:27:01,430 --> 00:27:05,630
I spoke to a fair number of people who

00:27:03,860 --> 00:27:06,890
use varnish and production and every

00:27:05,630 --> 00:27:09,020
time they deploy and they have new

00:27:06,890 --> 00:27:10,760
changes this is the way they do it you

00:27:09,020 --> 00:27:12,680
can automate you can automate it if you

00:27:10,760 --> 00:27:14,090
can even build it in your deployment

00:27:12,680 --> 00:27:19,520
strategy that you immediately change

00:27:14,090 --> 00:27:22,450
those drinks are up I guess okay next

00:27:19,520 --> 00:27:23,900
one is vcl discard you can delete

00:27:22,450 --> 00:27:26,030
configurations if you have multiple

00:27:23,900 --> 00:27:27,530
configuration you say well I don't

00:27:26,030 --> 00:27:29,780
really need that one you can just delete

00:27:27,530 --> 00:27:32,120
it and with vcl list you can have a

00:27:29,780 --> 00:27:33,590
basic list of what's in there and your

00:27:32,120 --> 00:27:35,570
vcl show is going to show you the

00:27:33,590 --> 00:27:37,130
configuration so it's actually a good

00:27:35,570 --> 00:27:39,980
way of testing your configuration

00:27:37,130 --> 00:27:41,450
without doing it immediately in

00:27:39,980 --> 00:27:43,400
production because it comes with a good

00:27:41,450 --> 00:27:45,830
compiler because these vcl statements I

00:27:43,400 --> 00:27:47,920
talked about are actually sort of pseudo

00:27:45,830 --> 00:27:50,660
language that gets compiled to c or c++

00:27:47,920 --> 00:27:53,090
so if it goes wrong in one of those

00:27:50,660 --> 00:27:54,590
actions it will mention it and the old

00:27:53,090 --> 00:27:56,450
configuration will still be online so

00:27:54,590 --> 00:27:58,340
that's quite a safeguard and it will

00:27:56,450 --> 00:28:00,500
also come with a really good interpreter

00:27:58,340 --> 00:28:02,180
and it will really say this is where the

00:28:00,500 --> 00:28:05,720
error is at that line at that charity or

00:28:02,180 --> 00:28:07,280
so it's quite forgiving this is the

00:28:05,720 --> 00:28:10,070
insulting bit are you ready for some

00:28:07,280 --> 00:28:12,310
more action I was looking for for a

00:28:10,070 --> 00:28:14,210
glorious English football picture that

00:28:12,310 --> 00:28:16,610
emphasized the fact that we have more

00:28:14,210 --> 00:28:18,140
action unfortunately I didn't find any

00:28:16,610 --> 00:28:20,180
and I took the last one I could find

00:28:18,140 --> 00:28:21,500
where England was involved and this is

00:28:20,180 --> 00:28:23,750
the result I got up with so

00:28:21,500 --> 00:28:25,820
well I see everyone's really silent so

00:28:23,750 --> 00:28:27,470
you all hate me by now so let's switch

00:28:25,820 --> 00:28:29,600
to the next slide as quickly as we can

00:28:27,470 --> 00:28:32,540
and it's a familiar slide you know this

00:28:29,600 --> 00:28:34,310
one I've talked about all the stages and

00:28:32,540 --> 00:28:36,920
you know when you do vc alcohol you saw

00:28:34,310 --> 00:28:38,630
it in my slides earlier that it comes

00:28:36,920 --> 00:28:40,520
with a sort of trajectory it's follows

00:28:38,630 --> 00:28:44,900
well let's go to it and let's let's

00:28:40,520 --> 00:28:48,890
actually do it this is it this is your

00:28:44,900 --> 00:28:51,140
very first vcl script something is very

00:28:48,890 --> 00:28:53,480
familiar about this it's the naming

00:28:51,140 --> 00:28:56,210
convention if i go back to the slide all

00:28:53,480 --> 00:28:58,100
those this one this one this one this

00:28:56,210 --> 00:28:59,930
one this one and this one these all

00:28:58,100 --> 00:29:02,840
match hooks you can use in your

00:28:59,930 --> 00:29:04,820
scripting and as a PHP developer this is

00:29:02,840 --> 00:29:07,130
not really difficult to understand the

00:29:04,820 --> 00:29:11,210
syntax is fairly similar you have the

00:29:07,130 --> 00:29:16,700
the curly brackets the semicolons even

00:29:11,210 --> 00:29:18,020
Derek understand yeah it misses the

00:29:16,700 --> 00:29:19,940
dollar sign maybe we could talk to the

00:29:18,020 --> 00:29:22,340
guys at Lynn pro maybe they could change

00:29:19,940 --> 00:29:24,860
that if necessary but anyway what does

00:29:22,340 --> 00:29:28,220
this do it out of the box i mentioned

00:29:24,860 --> 00:29:29,960
varnish will cash static files but once

00:29:28,220 --> 00:29:31,760
you have your cookie up it won't cash it

00:29:29,960 --> 00:29:33,890
anymore because it says you have a

00:29:31,760 --> 00:29:35,930
cookie this is user-generated data but

00:29:33,890 --> 00:29:38,180
you can force this in a very simple way

00:29:35,930 --> 00:29:41,000
i think who understands this raise your

00:29:38,180 --> 00:29:42,350
hand who gets this the majority it's

00:29:41,000 --> 00:29:45,560
just that simple I don't have to do

00:29:42,350 --> 00:29:47,390
anything maybe I should explain because

00:29:45,560 --> 00:29:48,890
that we're only half an hour in the

00:29:47,390 --> 00:29:51,050
session so if I leave everything up to

00:29:48,890 --> 00:29:53,480
you won't do a good job and won't be

00:29:51,050 --> 00:29:55,610
invited again but what it does it checks

00:29:53,480 --> 00:29:59,000
your request and if it's a get or ahead

00:29:55,610 --> 00:30:01,460
and the URL matches d sorts of

00:29:59,000 --> 00:30:04,460
extensions then you're going to look it

00:30:01,460 --> 00:30:06,350
up you look it up in the cash otherwise

00:30:04,460 --> 00:30:10,070
you're gonna pass and go to the backend

00:30:06,350 --> 00:30:11,780
pretty simple pretty basic this is the

00:30:10,070 --> 00:30:13,580
delivery bit because this is the place

00:30:11,780 --> 00:30:15,220
where all the data comes back either

00:30:13,580 --> 00:30:17,870
from the cash or the backend and gets

00:30:15,220 --> 00:30:20,240
pushed back now this is a little trick I

00:30:17,870 --> 00:30:24,020
use who uses fire bug or something

00:30:20,240 --> 00:30:26,450
similar please add this and open your

00:30:24,020 --> 00:30:27,950
net tab and once you do that you can

00:30:26,450 --> 00:30:30,860
immediately see if it's a hit or a miss

00:30:27,950 --> 00:30:32,360
this is quite convenient I even use that

00:30:30,860 --> 00:30:34,279
in production but you can use that

00:30:32,360 --> 00:30:36,109
mainly for development if you're not

00:30:34,279 --> 00:30:37,549
sure if it's a hit or miss just add the

00:30:36,109 --> 00:30:41,809
custom x cash header and you will

00:30:37,549 --> 00:30:45,019
directly see what's up something else

00:30:41,809 --> 00:30:46,969
you can do and I must remind you all

00:30:45,019 --> 00:30:49,729
these examples are fairly basic pretty

00:30:46,969 --> 00:30:51,200
basic for those who are expecting a very

00:30:49,729 --> 00:30:52,909
advanced stuff this is not the one this

00:30:51,200 --> 00:30:54,799
is for the people who want to get to

00:30:52,909 --> 00:30:56,899
know varnish who don't know varnish that

00:30:54,799 --> 00:30:58,429
well or who have never heard of varnish

00:30:56,899 --> 00:31:01,340
and what you want to do with a thing

00:30:58,429 --> 00:31:04,580
that caches is just many manipulated TTL

00:31:01,340 --> 00:31:06,259
so if you take the beer SP TTL and put

00:31:04,580 --> 00:31:08,089
it on 10 seconds and mind you this is in

00:31:06,259 --> 00:31:09,679
the fetching bit this isn't the place

00:31:08,089 --> 00:31:11,839
where you fetch it from the back end you

00:31:09,679 --> 00:31:13,460
just say well I'm going to catch it for

00:31:11,839 --> 00:31:16,580
10 seconds you can put minutes up there

00:31:13,460 --> 00:31:18,320
or other metrics it's just a basic way

00:31:16,580 --> 00:31:20,719
of saying well I want to cash it for 10

00:31:18,320 --> 00:31:22,309
or more seconds everyone should have

00:31:20,719 --> 00:31:24,979
that in there if you could manipulate it

00:31:22,309 --> 00:31:27,529
from your code it's better if you cannot

00:31:24,979 --> 00:31:29,509
please put in your vcl if you open your

00:31:27,529 --> 00:31:32,450
default vcl you'll see ton of that stuff

00:31:29,509 --> 00:31:33,499
and fetches and different examples work

00:31:32,450 --> 00:31:35,659
your way through it this is just

00:31:33,499 --> 00:31:38,509
basically proof of concept but in

00:31:35,659 --> 00:31:41,629
essence the the VCL has lots of options

00:31:38,509 --> 00:31:44,479
you can mix and match now I mentioned

00:31:41,629 --> 00:31:45,969
cookies earlier you can bypass that if

00:31:44,479 --> 00:31:50,089
you want to you can use some trickery

00:31:45,969 --> 00:31:52,009
hell as as mentioned if you have a

00:31:50,089 --> 00:31:53,989
cookie that means there is custom data

00:31:52,009 --> 00:31:56,149
from the user that is not the same for

00:31:53,989 --> 00:31:58,700
everyone so you don't cash but if you

00:31:56,149 --> 00:32:01,609
put this one out if you say if we get a

00:31:58,700 --> 00:32:03,649
get or ahead no matter what the

00:32:01,609 --> 00:32:05,719
consequences are just look it up and

00:32:03,649 --> 00:32:07,849
that you might serve some data that was

00:32:05,719 --> 00:32:10,070
meant for some different user but to

00:32:07,849 --> 00:32:12,019
avoid that when you get into the hashing

00:32:10,070 --> 00:32:14,210
group the place where it all gets put

00:32:12,019 --> 00:32:16,279
together and where the identifier of the

00:32:14,210 --> 00:32:17,749
cache object is made you can just add

00:32:16,279 --> 00:32:19,940
the cookie because the cookie is just a

00:32:17,749 --> 00:32:21,799
string its its its data it's a string

00:32:19,940 --> 00:32:24,139
and you can concatenate it to the

00:32:21,799 --> 00:32:26,570
existing hash and you will be able to

00:32:24,139 --> 00:32:28,669
catch those fingers this is a user per

00:32:26,570 --> 00:32:30,649
user cap so if you hit it you'll have

00:32:28,669 --> 00:32:33,049
your cash if someone else hits it he'll

00:32:30,649 --> 00:32:34,639
have his cashing object so it won't

00:32:33,049 --> 00:32:36,919
really protect your server with will

00:32:34,639 --> 00:32:39,889
make sure if your site is designed and

00:32:36,919 --> 00:32:41,509
built in that way that a user generates

00:32:39,889 --> 00:32:43,639
lots of hits on the same page and it

00:32:41,509 --> 00:32:44,999
influences your load you might want to

00:32:43,639 --> 00:32:46,649
consider those

00:32:44,999 --> 00:32:49,139
now another thing you could do is just

00:32:46,649 --> 00:32:51,479
completely drop all cookies so you see

00:32:49,139 --> 00:32:54,359
in the receiving bit you say well

00:32:51,479 --> 00:32:56,659
everything that is a cookie or looks

00:32:54,359 --> 00:32:59,719
like a cookie just unset it delete it

00:32:56,659 --> 00:33:02,819
that's in the request base and if your

00:32:59,719 --> 00:33:05,369
back-end service codes or serves HTTP

00:33:02,819 --> 00:33:07,499
and HTML back that has cookies you can

00:33:05,369 --> 00:33:10,559
delete them in the fetching stage so I

00:33:07,499 --> 00:33:12,419
think by now you you clearly know what

00:33:10,559 --> 00:33:15,689
fetch mott received means that these are

00:33:12,419 --> 00:33:18,509
the initial things you have to do now a

00:33:15,689 --> 00:33:20,339
thing before making this talk I was

00:33:18,509 --> 00:33:23,129
thinking about the Google Analytics

00:33:20,339 --> 00:33:25,439
cookies it was fairly stupid of me

00:33:23,129 --> 00:33:27,839
thinking about it I feared that if I

00:33:25,439 --> 00:33:30,149
removed all cookies Google Analytics

00:33:27,839 --> 00:33:33,269
would return false data and people would

00:33:30,149 --> 00:33:35,489
have or marketing people would just kill

00:33:33,269 --> 00:33:37,369
me for for destroying their their stuff

00:33:35,489 --> 00:33:40,289
but that's not really true because

00:33:37,369 --> 00:33:42,299
Google Analytics doesn't use the HTTP

00:33:40,289 --> 00:33:44,309
side of cookies it just goes to your

00:33:42,299 --> 00:33:46,259
local cookie store storage on your

00:33:44,309 --> 00:33:49,769
computer and reads it with JavaScript so

00:33:46,259 --> 00:33:51,329
even if you if you would remove all

00:33:49,769 --> 00:33:53,699
cookies except google or if you even

00:33:51,329 --> 00:33:56,009
would remove google analytics cookies

00:33:53,699 --> 00:33:57,959
from the HTTP request it'll still work

00:33:56,009 --> 00:33:59,819
because the javascript remains the same

00:33:57,959 --> 00:34:02,639
and will read your local client

00:33:59,819 --> 00:34:05,279
configuration now this one shows how to

00:34:02,639 --> 00:34:06,839
remove those it's just a use case

00:34:05,279 --> 00:34:09,089
because the thing I want to show off is

00:34:06,839 --> 00:34:11,549
the reg sub all it comes with a regular

00:34:09,089 --> 00:34:13,679
expression suite that allows you to do

00:34:11,549 --> 00:34:16,649
pattern matches and replace stuff so

00:34:13,679 --> 00:34:18,659
there's quite a bit of use cases in

00:34:16,649 --> 00:34:21,329
which that could come in handy so what

00:34:18,659 --> 00:34:23,639
we do is there's this you with you TM

00:34:21,329 --> 00:34:26,909
bit that comes in all those google

00:34:23,639 --> 00:34:28,919
analytics ones you all seen the cookies

00:34:26,909 --> 00:34:32,789
Google created I guess everyone's aware

00:34:28,919 --> 00:34:34,230
of those and the fact that they acquired

00:34:32,789 --> 00:34:36,210
the company and it's still in there

00:34:34,230 --> 00:34:39,149
how's the company called again everyone

00:34:36,210 --> 00:34:41,129
know urgent yeah yeah yeahs urgent well

00:34:39,149 --> 00:34:43,500
do you really stands for urgent it's

00:34:41,129 --> 00:34:46,500
it's the urchin cookies that they still

00:34:43,500 --> 00:34:48,240
use now we did a lot of caching we

00:34:46,500 --> 00:34:50,849
talked about caching but as mentioned

00:34:48,240 --> 00:34:52,349
varnish is not only a caching property

00:34:50,849 --> 00:34:55,419
it comes with a different set of

00:34:52,349 --> 00:34:56,829
features as well to shift the attention

00:34:55,419 --> 00:34:59,950
I'm going to talk about different stuff

00:34:56,829 --> 00:35:02,890
varnish does it can do a bit of load

00:34:59,950 --> 00:35:04,930
balancing or content distribution across

00:35:02,890 --> 00:35:06,730
different hosts now you know my default

00:35:04,930 --> 00:35:08,260
back and it's the first thing I showed

00:35:06,730 --> 00:35:10,599
you when configuring backends that there

00:35:08,260 --> 00:35:13,000
is a default back end but you can define

00:35:10,599 --> 00:35:15,400
another back end now mind you this is

00:35:13,000 --> 00:35:17,290
not something I run in production like I

00:35:15,400 --> 00:35:18,700
don't connect to server com this is just

00:35:17,290 --> 00:35:21,880
template stuff replace it with your own

00:35:18,700 --> 00:35:24,069
stuff and the thing I do is I just try

00:35:21,880 --> 00:35:27,220
to match which hostname you connect to I

00:35:24,069 --> 00:35:29,049
think this is a stupid idea really doing

00:35:27,220 --> 00:35:31,359
this but it shows you how you could do

00:35:29,049 --> 00:35:34,510
it if you want to if you know that your

00:35:31,359 --> 00:35:37,450
ww site and your other side could be

00:35:34,510 --> 00:35:39,010
split across two notes for a very simple

00:35:37,450 --> 00:35:41,859
way of content distribution or load

00:35:39,010 --> 00:35:44,530
balancing you could match it it reminds

00:35:41,859 --> 00:35:46,930
me a bit of htaccess and mod rewrite you

00:35:44,530 --> 00:35:49,630
can match which what the condition is if

00:35:46,930 --> 00:35:51,220
it starts with ww-well put it to the one

00:35:49,630 --> 00:35:55,450
notes and in the other case to the other

00:35:51,220 --> 00:35:57,099
node so ww example to the left one and

00:35:55,450 --> 00:35:59,290
the other one to the right one it could

00:35:57,099 --> 00:36:01,329
help but there better load balancing

00:35:59,290 --> 00:36:03,970
strategies than that you could use H a

00:36:01,329 --> 00:36:06,339
proxy or things that are brought to you

00:36:03,970 --> 00:36:08,440
via switches or router so there's

00:36:06,339 --> 00:36:09,670
there's load balancing in it but if you

00:36:08,440 --> 00:36:11,410
don't have the budget for it or the

00:36:09,670 --> 00:36:15,609
knowledge you could use furnishes a load

00:36:11,410 --> 00:36:17,049
balancer now what happens if your

00:36:15,609 --> 00:36:18,400
back-end dies that's your worst

00:36:17,049 --> 00:36:19,990
nightmare right you have your varnish in

00:36:18,400 --> 00:36:21,910
front of it and your back-end dies now

00:36:19,990 --> 00:36:24,940
as long as your stuff is in the cache

00:36:21,910 --> 00:36:29,950
that won't be a problem because it will

00:36:24,940 --> 00:36:32,049
serve all the data that's in there but

00:36:29,950 --> 00:36:33,970
once the TTL has expired and he goes to

00:36:32,049 --> 00:36:37,299
the back end again and he gets a sort of

00:36:33,970 --> 00:36:39,970
50 tree or a 500 error it's just a basic

00:36:37,299 --> 00:36:41,619
white page with an error on it it will

00:36:39,970 --> 00:36:44,020
cash that and that it's not something

00:36:41,619 --> 00:36:46,180
you want especially when you put the TTL

00:36:44,020 --> 00:36:48,369
on an hour or a day you'll have one day

00:36:46,180 --> 00:36:51,040
of internal server error it's not

00:36:48,369 --> 00:36:52,890
something you want so varnish has

00:36:51,040 --> 00:36:56,170
something that's called grace mode and

00:36:52,890 --> 00:36:57,819
grace mode allows you yeah just just to

00:36:56,170 --> 00:37:01,000
pray and say please back please furnish

00:36:57,819 --> 00:37:03,520
or please back end if you're down please

00:37:01,000 --> 00:37:05,440
come back up I'll serve some old data

00:37:03,520 --> 00:37:07,299
still and you can define it like if the

00:37:05,440 --> 00:37:08,980
back end is healthy so if it responds in

00:37:07,299 --> 00:37:12,160
a proper way we can

00:37:08,980 --> 00:37:13,810
on one second so if there's new data it

00:37:12,160 --> 00:37:15,340
will take you one second to load that

00:37:13,810 --> 00:37:17,770
data because it's going to serve all

00:37:15,340 --> 00:37:20,800
data for one second if it's down give it

00:37:17,770 --> 00:37:23,670
10 seconds you can put it as high as you

00:37:20,800 --> 00:37:27,609
want I've tested it myself and I just

00:37:23,670 --> 00:37:29,440
put down my Apache and just kept typing

00:37:27,609 --> 00:37:34,570
refresh and I got the data and after 10

00:37:29,440 --> 00:37:37,180
seconds I got a 502 page there's another

00:37:34,570 --> 00:37:39,910
way to do this and that is using probes

00:37:37,180 --> 00:37:41,950
so this is very similar to other load

00:37:39,910 --> 00:37:44,080
balancing techniques you can add a probe

00:37:41,950 --> 00:37:45,970
that listens to a specific URL for a

00:37:44,080 --> 00:37:48,430
specific amount of time with a specific

00:37:45,970 --> 00:37:49,869
interval and if it doesn't respond in a

00:37:48,430 --> 00:37:52,450
good way it knows the back end is no

00:37:49,869 --> 00:37:54,130
good so this is my default back end it's

00:37:52,450 --> 00:37:56,680
pretty much the same except that I have

00:37:54,130 --> 00:37:58,030
a probe in it have a second one that's

00:37:56,680 --> 00:38:00,130
called other and it's connects to

00:37:58,030 --> 00:38:01,840
another server also in port 80 and then

00:38:00,130 --> 00:38:04,450
that's pretty much the same config from

00:38:01,840 --> 00:38:07,840
from a point of view now the magic

00:38:04,450 --> 00:38:09,760
happens here in your receiving bit when

00:38:07,840 --> 00:38:13,660
you count two restarts now to restart

00:38:09,760 --> 00:38:15,460
timer the value is zero by default but

00:38:13,660 --> 00:38:17,590
we hook into the error stage here when

00:38:15,460 --> 00:38:18,970
something goes horribly wrong you can

00:38:17,590 --> 00:38:21,760
know what's going wrong you could say

00:38:18,970 --> 00:38:23,590
well it's a five or three error and if

00:38:21,760 --> 00:38:26,200
it's a 503 error that means your back

00:38:23,590 --> 00:38:28,810
end is down and you increase the counter

00:38:26,200 --> 00:38:30,280
by doing a restart if you restart is no

00:38:28,810 --> 00:38:32,260
longer zero you don't connect your

00:38:30,280 --> 00:38:35,650
default back end you connect your other

00:38:32,260 --> 00:38:37,570
back end now there's this aunt clause

00:38:35,650 --> 00:38:39,609
that is added you want to limit the

00:38:37,570 --> 00:38:41,830
number of restarts because if you just

00:38:39,609 --> 00:38:44,590
keep on rotating you'll server will go

00:38:41,830 --> 00:38:47,050
down it will have too much cpu CPU

00:38:44,590 --> 00:38:49,630
cycles it will it will immediately break

00:38:47,050 --> 00:38:51,609
so to avoid that you put in a limit four

00:38:49,630 --> 00:38:53,800
times if after four times it doesn't

00:38:51,609 --> 00:38:56,020
work it just has no clue what to do and

00:38:53,800 --> 00:38:59,440
just stops working but that helps you a

00:38:56,020 --> 00:39:01,600
bit I have some nice flow chart showing

00:38:59,440 --> 00:39:03,550
that so if you connect to your default

00:39:01,600 --> 00:39:06,070
back end your other back end isn't doing

00:39:03,550 --> 00:39:08,290
your thing and suddenly it goes down and

00:39:06,070 --> 00:39:11,859
the other one takes over I think that is

00:39:08,290 --> 00:39:14,590
clear to everyone I hope you can combine

00:39:11,859 --> 00:39:17,770
that with directors and what directors

00:39:14,590 --> 00:39:20,320
are is a main way to bundle all your

00:39:17,770 --> 00:39:22,119
different backends and have a sort of

00:39:20,320 --> 00:39:22,599
strategy an automatic strategy for load

00:39:22,119 --> 00:39:24,910
balancing

00:39:22,599 --> 00:39:26,410
this is round robin which means one

00:39:24,910 --> 00:39:28,089
request house goes to the first one

00:39:26,410 --> 00:39:30,910
second to the other one there's no

00:39:28,089 --> 00:39:32,859
randomness in it and it behaves the

00:39:30,910 --> 00:39:34,630
director the director behaves as a

00:39:32,859 --> 00:39:36,999
back-end so you can just say to your

00:39:34,630 --> 00:39:39,130
true receiving bit well my back end is

00:39:36,999 --> 00:39:41,470
back and this is the one and if it's the

00:39:39,130 --> 00:39:43,329
director or a regular back end it

00:39:41,470 --> 00:39:46,269
doesn't really matter but it allows you

00:39:43,329 --> 00:39:48,640
to have multiple multiple backends which

00:39:46,269 --> 00:39:50,650
is actually good if you if you work with

00:39:48,640 --> 00:39:52,989
a large server farm you can have

00:39:50,650 --> 00:39:54,430
multiple Apache servers connecting to

00:39:52,989 --> 00:39:56,650
the same varnish and you can have

00:39:54,430 --> 00:39:57,999
multiple varnishes linked to load

00:39:56,650 --> 00:40:01,470
balancing and you'll have a decent

00:39:57,999 --> 00:40:05,859
strategy so this is mainly 5050 stuff

00:40:01,470 --> 00:40:07,599
nothing really special but there's

00:40:05,859 --> 00:40:08,829
another one there's two random one then

00:40:07,599 --> 00:40:11,380
you can add weights to it if you know

00:40:08,829 --> 00:40:13,269
that one server is a little weaker or is

00:40:11,380 --> 00:40:15,819
slightly more vulnerable you want to

00:40:13,269 --> 00:40:18,249
avoid that much hits to it so in this

00:40:15,819 --> 00:40:21,400
case if you do want to if I know mine

00:40:18,249 --> 00:40:24,759
that's right that's 3366 if I don't I'm

00:40:21,400 --> 00:40:26,829
making a complete fool of myself and the

00:40:24,759 --> 00:40:28,869
final bit before we dive back into the

00:40:26,829 --> 00:40:30,910
caching is something I really really

00:40:28,869 --> 00:40:32,890
like now what the problem is if you have

00:40:30,910 --> 00:40:35,799
like high traffic sites that have a lot

00:40:32,890 --> 00:40:38,140
of updates you surf stale data all the

00:40:35,799 --> 00:40:40,599
time so what you do is is tried to have

00:40:38,140 --> 00:40:44,349
a sort of trade off between hi titi else

00:40:40,599 --> 00:40:47,380
but old news or low ttls and servers

00:40:44,349 --> 00:40:49,450
that go down so it's also it's always

00:40:47,380 --> 00:40:50,920
tricky to define the selection that

00:40:49,450 --> 00:40:52,539
works if you have the selection that

00:40:50,920 --> 00:40:55,960
works and you don't update that much in

00:40:52,539 --> 00:40:57,849
just basically expiration of your your

00:40:55,960 --> 00:40:58,930
TT else is the best way to do it but

00:40:57,849 --> 00:41:01,479
there's a different way called

00:40:58,930 --> 00:41:04,180
invalidation so what I've done here and

00:41:01,479 --> 00:41:07,109
I really gave away the clue this is

00:41:04,180 --> 00:41:09,849
basically the clue but what I do is

00:41:07,109 --> 00:41:12,789
everyone knows the basic HTTP verbs get

00:41:09,849 --> 00:41:15,180
post etc etc I invented or not I the

00:41:12,789 --> 00:41:17,739
people at varnish showcase that have a

00:41:15,180 --> 00:41:20,109
method called perch and if you call the

00:41:17,739 --> 00:41:22,210
URL with Persian this example you can

00:41:20,109 --> 00:41:24,549
easily build that into your system via

00:41:22,210 --> 00:41:26,650
curl or via the PHP implementation of

00:41:24,549 --> 00:41:28,690
curl it deletes it and how does it it

00:41:26,650 --> 00:41:32,079
matches it here if the request is purged

00:41:28,690 --> 00:41:34,989
and it's not allowed don't do anything

00:41:32,079 --> 00:41:36,069
but if it's allowed purge that URL and

00:41:34,989 --> 00:41:39,699
mention that it is per

00:41:36,069 --> 00:41:42,400
now I skip that line that is more or

00:41:39,699 --> 00:41:43,900
less authentication you have an ACL here

00:41:42,400 --> 00:41:45,579
that defines who can connect to it

00:41:43,900 --> 00:41:47,680
that's really convenient because if you

00:41:45,579 --> 00:41:49,299
leave it open to anyone and you're smart

00:41:47,680 --> 00:41:51,759
and you try to do purchase you can

00:41:49,299 --> 00:41:52,989
really damage some sites really bring

00:41:51,759 --> 00:41:54,940
them down so that's why we put in

00:41:52,989 --> 00:41:56,049
security we have an ACL that says you

00:41:54,940 --> 00:41:59,949
can only connect if you're from the

00:41:56,049 --> 00:42:01,449
local host or IP 1234 or some host name

00:41:59,949 --> 00:42:03,910
it's just my point is to prove that you

00:42:01,449 --> 00:42:05,109
have different notations in the ACLS and

00:42:03,910 --> 00:42:06,699
if it doesn't match them get an error

00:42:05,109 --> 00:42:09,039
and if it matches you'll have a purge

00:42:06,699 --> 00:42:11,019
now the perch is also something that is

00:42:09,039 --> 00:42:12,279
in your talent interface so if you don't

00:42:11,019 --> 00:42:13,749
want the code it but you want to connect

00:42:12,279 --> 00:42:15,309
via telnet or you have a procedure that

00:42:13,749 --> 00:42:17,289
does it you can tell that to the

00:42:15,309 --> 00:42:18,940
management interface and do purge URL

00:42:17,289 --> 00:42:21,099
and it doesn't really come with a

00:42:18,940 --> 00:42:23,739
fixture RL you have to mention it

00:42:21,099 --> 00:42:26,199
matches pattern so if you have like the

00:42:23,739 --> 00:42:28,269
/ images you want to to flush well you

00:42:26,199 --> 00:42:29,829
just do images and add a wild card and

00:42:28,269 --> 00:42:31,930
it invalidates them it doesn't

00:42:29,829 --> 00:42:33,430
invalidate them immediately it's upon

00:42:31,930 --> 00:42:35,049
the next hit it's not like it's going to

00:42:33,430 --> 00:42:36,279
delete actively delete the cache know

00:42:35,049 --> 00:42:38,650
the next person that's going to hit it

00:42:36,279 --> 00:42:42,119
is going to hit the flag bits and it's

00:42:38,650 --> 00:42:45,309
going to drop the cash reloaded etc etc

00:42:42,119 --> 00:42:47,890
this was the basic thing this was my

00:42:45,309 --> 00:42:50,229
basic talk but I have one added bonus

00:42:47,890 --> 00:42:51,729
which a lot of people like its edge side

00:42:50,229 --> 00:42:54,249
includes who knows edge side includes

00:42:51,729 --> 00:42:58,359
hands in the air who loves H edge side

00:42:54,249 --> 00:43:01,449
includes look I like it I like who has

00:42:58,359 --> 00:43:03,069
never heard of edge side includes that's

00:43:01,449 --> 00:43:04,930
what the picture is for the picture says

00:43:03,069 --> 00:43:06,999
you're just going to puzzle your way

00:43:04,930 --> 00:43:09,910
into your caching and i'll immediately

00:43:06,999 --> 00:43:11,979
show your default your basic page it has

00:43:09,910 --> 00:43:13,930
a header it has a further a menu and a

00:43:11,979 --> 00:43:17,319
main page I think eighty percent of you

00:43:13,930 --> 00:43:20,920
guys use similar strategy to keep it

00:43:17,319 --> 00:43:23,619
simple I add a basic files and how does

00:43:20,920 --> 00:43:26,589
this look like it's a bit like this you

00:43:23,619 --> 00:43:28,839
have your and sorry for the HTML gurus I

00:43:26,589 --> 00:43:30,279
don't use divs I use tables for for the

00:43:28,839 --> 00:43:33,190
layouts just to prove a point you have

00:43:30,279 --> 00:43:35,529
your header another front I'm not the

00:43:33,190 --> 00:43:37,539
front end designer I'm a developer and

00:43:35,529 --> 00:43:40,059
I'm not even a professional developer so

00:43:37,539 --> 00:43:43,209
so we have a header your main your menu

00:43:40,059 --> 00:43:44,499
your main page and your footer and the

00:43:43,209 --> 00:43:46,809
problem you're going to hit if you're

00:43:44,499 --> 00:43:48,940
going to catch that is if the main page

00:43:46,809 --> 00:43:50,170
changes we use

00:43:48,940 --> 00:43:52,359
you're going to have a problem and I

00:43:50,170 --> 00:43:54,310
talked about the invalidation bit which

00:43:52,359 --> 00:43:56,800
occur but that could pose some problems

00:43:54,310 --> 00:44:00,099
as well so there are people that say

00:43:56,800 --> 00:44:01,839
well if I cash it I want my menu to be

00:44:00,099 --> 00:44:04,300
cached for 10 seconds or 10 minutes or

00:44:01,839 --> 00:44:05,770
replace that with the value you want my

00:44:04,300 --> 00:44:07,960
header doesn't contain any caching

00:44:05,770 --> 00:44:10,540
because it has the Welcome taste or

00:44:07,960 --> 00:44:12,670
welcome your name there in it so it must

00:44:10,540 --> 00:44:14,980
interface with PHP session so you won't

00:44:12,670 --> 00:44:18,300
cash it my main page is only cached for

00:44:14,980 --> 00:44:20,829
two seconds and my further 45 seconds

00:44:18,300 --> 00:44:23,290
ESI does that and I'll show you what ESI

00:44:20,829 --> 00:44:27,819
looks like people who remembers SSI from

00:44:23,290 --> 00:44:29,579
back in the day a lot of people and the

00:44:27,819 --> 00:44:32,260
more I know about es aya the more

00:44:29,579 --> 00:44:34,540
appreciate SSI whereas in the past I

00:44:32,260 --> 00:44:36,819
thought it was a stupid thing like why

00:44:34,540 --> 00:44:39,730
would people use that it's actually used

00:44:36,819 --> 00:44:42,730
to render a block in it and ESI does the

00:44:39,730 --> 00:44:45,310
very same thing the ESI standard this is

00:44:42,730 --> 00:44:47,920
very much used by Akamai I can I use it

00:44:45,310 --> 00:44:49,930
in CDN varnish only implements a subset

00:44:47,920 --> 00:44:52,119
of it but the most essential one which

00:44:49,930 --> 00:44:54,640
is including it so instead of just

00:44:52,119 --> 00:44:56,410
having your application regular all the

00:44:54,640 --> 00:44:59,109
code into it you're going to ask your

00:44:56,410 --> 00:45:01,630
varnish to load it separately and have

00:44:59,109 --> 00:45:03,280
its own ttls this is done in varnish if

00:45:01,630 --> 00:45:04,720
you if you don't have a varnish behind

00:45:03,280 --> 00:45:06,339
it you'll just see those tags and they

00:45:04,720 --> 00:45:08,260
won't do a single thing your browser

00:45:06,339 --> 00:45:11,109
wont to understand it and I heard that

00:45:08,260 --> 00:45:13,839
symfony2 does come with ESI support so

00:45:11,109 --> 00:45:15,369
it's a quite nice add-on but my sole

00:45:13,839 --> 00:45:18,190
purpose is to show how this works in

00:45:15,369 --> 00:45:19,540
production now if you do that manually

00:45:18,190 --> 00:45:21,790
you'll have to make sure your

00:45:19,540 --> 00:45:22,900
development process is really made for

00:45:21,790 --> 00:45:25,440
this and if you're not behind the

00:45:22,900 --> 00:45:27,310
varnish you'll run into trouble so I've

00:45:25,440 --> 00:45:29,829
looked for a little script that does

00:45:27,310 --> 00:45:31,869
that I have two scripts I have stupid

00:45:29,829 --> 00:45:34,510
script this is it but it does what it

00:45:31,869 --> 00:45:36,280
needs to do it checks if your ex varnish

00:45:34,510 --> 00:45:39,099
header reset this is the header your

00:45:36,280 --> 00:45:41,349
varnish passes to your back-end if that

00:45:39,099 --> 00:45:43,180
is set you know you're behind a varnish

00:45:41,349 --> 00:45:46,270
and what I do this is two-way

00:45:43,180 --> 00:45:49,000
communication I just mentioned back to

00:45:46,270 --> 00:45:52,540
varnish like yes I can handle ESI you

00:45:49,000 --> 00:45:56,230
can bars this these tags as ESI and then

00:45:52,540 --> 00:45:59,650
I build a URL this is pretty plain PHP I

00:45:56,230 --> 00:46:02,260
do a ESI included of the URL and if I

00:45:59,650 --> 00:46:02,800
don't have or if I'm not behind the

00:46:02,260 --> 00:46:04,930
varnish

00:46:02,800 --> 00:46:07,630
if I don't have ESI support I'll just

00:46:04,930 --> 00:46:11,590
include the file pretty standard now who

00:46:07,630 --> 00:46:14,830
likes zend framework in here then I'll

00:46:11,590 --> 00:46:17,500
have something for you have a treat it's

00:46:14,830 --> 00:46:19,570
my own custom view helper for ESI now I

00:46:17,500 --> 00:46:22,780
know there are other view helpers out

00:46:19,570 --> 00:46:26,530
there that do stuff I've seen someone

00:46:22,780 --> 00:46:28,420
from urine valdek whoo mimics varnish my

00:46:26,530 --> 00:46:30,840
goal is not to mimic varnish but to make

00:46:28,420 --> 00:46:33,940
sure you have ESI or just your basic

00:46:30,840 --> 00:46:36,010
processing now i'll give you the clue

00:46:33,940 --> 00:46:37,870
for this one if you're behind a varnish

00:46:36,010 --> 00:46:40,210
it will parse ESI if you're not behind a

00:46:37,870 --> 00:46:42,310
varnish it will render the HTML but the

00:46:40,210 --> 00:46:44,080
input I gif and everyone knows view

00:46:42,310 --> 00:46:48,070
helpers who knows few helpers and then

00:46:44,080 --> 00:46:51,310
framework yeah quite a bit it's it makes

00:46:48,070 --> 00:46:52,930
life easy you can go to it first i'll

00:46:51,310 --> 00:46:54,250
show you how to use it first this is how

00:46:52,930 --> 00:46:56,830
you would use it in your view state

00:46:54,250 --> 00:46:58,630
we'll just call this ESI and you say i'm

00:46:56,830 --> 00:47:00,490
going to call the index controller and

00:46:58,630 --> 00:47:02,890
the header action and if i call this i

00:47:00,490 --> 00:47:04,480
want to render either to each HTML that

00:47:02,890 --> 00:47:06,640
comes with it or i want to URL that

00:47:04,480 --> 00:47:09,610
points to it so varnish could parse it

00:47:06,640 --> 00:47:11,920
as ESI let's go back to the code so i

00:47:09,610 --> 00:47:13,810
have this view helper and this is the

00:47:11,920 --> 00:47:15,280
main method this is the ESI method

00:47:13,810 --> 00:47:17,380
you're going to call in your view helper

00:47:15,280 --> 00:47:19,720
you mention your controller your action

00:47:17,380 --> 00:47:22,600
and this is optional because ESI is not

00:47:19,720 --> 00:47:25,180
strictly bound to varnish and if I would

00:47:22,600 --> 00:47:26,920
do this this check in the code

00:47:25,180 --> 00:47:28,330
explicitly it would only work with

00:47:26,920 --> 00:47:30,820
varnish there are different technology

00:47:28,330 --> 00:47:33,190
that support ESI so i made this optional

00:47:30,820 --> 00:47:34,480
it could be either x varnish or

00:47:33,190 --> 00:47:36,970
something else and this is the header I

00:47:34,480 --> 00:47:40,780
report back to the server so this is

00:47:36,970 --> 00:47:43,450
plain checking so if if the request

00:47:40,780 --> 00:47:46,150
header is set well sent a response

00:47:43,450 --> 00:47:48,730
header and built the ESI if we're not

00:47:46,150 --> 00:47:50,950
behind es i just dispatch playing

00:47:48,730 --> 00:47:52,480
dispatch and these are some helper

00:47:50,950 --> 00:47:54,160
methods that do all the checks it's not

00:47:52,480 --> 00:47:56,920
really worthwhile but this is where the

00:47:54,160 --> 00:48:00,250
magic happens if you're not behind a

00:47:56,920 --> 00:48:01,720
varnish you want to control the action

00:48:00,250 --> 00:48:04,000
you want to go to the controller

00:48:01,720 --> 00:48:05,950
dispatch the action get the HTML and

00:48:04,000 --> 00:48:07,450
this is the basic way how it works I

00:48:05,950 --> 00:48:10,540
really thought it would be super

00:48:07,450 --> 00:48:13,210
difficult to do this but apparently zend

00:48:10,540 --> 00:48:15,250
framework is is quite easy to understand

00:48:13,210 --> 00:48:17,590
so what you do is you create a

00:48:15,250 --> 00:48:19,150
ttp requests containing your action in

00:48:17,590 --> 00:48:21,850
your controller you create an empty

00:48:19,150 --> 00:48:23,770
response to an HTTP response you call

00:48:21,850 --> 00:48:26,470
your front controller which I initiate

00:48:23,770 --> 00:48:30,220
it earlier this is it this is the

00:48:26,470 --> 00:48:32,200
instance I store my object and you ask

00:48:30,220 --> 00:48:33,640
it to give you the dispatcher who takes

00:48:32,200 --> 00:48:36,160
care of business you get the dispatcher

00:48:33,640 --> 00:48:38,410
you dispatch you give your request hear

00:48:36,160 --> 00:48:40,480
your response there you get your body

00:48:38,410 --> 00:48:42,040
and this is plain HTML this is rendering

00:48:40,480 --> 00:48:43,870
it in line so if you're not behind a

00:48:42,040 --> 00:48:46,150
varnish this will still work I know this

00:48:43,870 --> 00:48:47,860
I tested it it took me quite a time a

00:48:46,150 --> 00:48:49,600
bit of time to develop this and of

00:48:47,860 --> 00:48:52,000
course if you're behind a varnish and it

00:48:49,600 --> 00:48:54,310
supports ESI take the controller take

00:48:52,000 --> 00:48:56,560
the action get your basic Rooter from

00:48:54,310 --> 00:48:58,540
your front controller and assemble a URL

00:48:56,560 --> 00:49:00,520
return the ESI attack and you're all

00:48:58,540 --> 00:49:02,350
done well all done you still have to

00:49:00,520 --> 00:49:05,110
make sure your varnish understands that

00:49:02,350 --> 00:49:08,950
and this is the last piece of vcl I'll

00:49:05,110 --> 00:49:12,160
show you today so if we receive a

00:49:08,950 --> 00:49:13,660
request and its header well don't look

00:49:12,160 --> 00:49:15,490
it up in the cash we don't want cashing

00:49:13,660 --> 00:49:17,800
on that it contains session data it

00:49:15,490 --> 00:49:20,440
comes across with cookies so no caching

00:49:17,800 --> 00:49:23,050
for that if there's a if it's called

00:49:20,440 --> 00:49:25,030
footer main or menu dot PHP you might

00:49:23,050 --> 00:49:27,930
want to look it up from cache and this

00:49:25,030 --> 00:49:30,640
is where it happens if if it's footer

00:49:27,930 --> 00:49:33,220
cash it for five seconds if its menu 10

00:49:30,640 --> 00:49:35,260
seconds main two seconds and here he

00:49:33,220 --> 00:49:37,840
checks the result header I sent back and

00:49:35,260 --> 00:49:41,410
I'm gonna see if I can show it to you

00:49:37,840 --> 00:49:44,230
again yes I enabled as the one you pass

00:49:41,410 --> 00:49:46,510
so you say dear varnish I understand ESI

00:49:44,230 --> 00:49:50,020
I can handle it so if you go back here

00:49:46,510 --> 00:49:52,120
it will process it if if ESI is enabled

00:49:50,020 --> 00:49:54,790
and this is the magic method do ESI and

00:49:52,120 --> 00:49:56,980
then immediately unset it and it will

00:49:54,790 --> 00:49:58,750
magically work and this is what the what

00:49:56,980 --> 00:50:00,970
the print screen look like i use the

00:49:58,750 --> 00:50:02,890
dates the current dates and you see that

00:50:00,970 --> 00:50:04,720
are plenty of different dates out there

00:50:02,890 --> 00:50:06,820
this is a really efficient one now this

00:50:04,720 --> 00:50:08,560
is just a basic talk about it I think

00:50:06,820 --> 00:50:10,720
there are plenty of other dogs that deal

00:50:08,560 --> 00:50:13,060
with ESI I know that far beyond potency

00:50:10,720 --> 00:50:15,700
a from symphony has a talk dedicated to

00:50:13,060 --> 00:50:17,110
it it's just to get you started and if

00:50:15,700 --> 00:50:19,540
you're interested in the SI look it up

00:50:17,110 --> 00:50:21,460
see what it can do if you have five

00:50:19,540 --> 00:50:24,640
traffic sites it will definitely work i

00:50:21,460 --> 00:50:26,260
saw a talk by guys from I buildings who

00:50:24,640 --> 00:50:27,890
run the new Delta and outside it's one

00:50:26,260 --> 00:50:29,630
of the biggest

00:50:27,890 --> 00:50:31,640
sites in Holland and they used ESI to

00:50:29,630 --> 00:50:33,170
solve their problems and I think there

00:50:31,640 --> 00:50:35,210
are plenty of other customers who do

00:50:33,170 --> 00:50:39,339
that as well any one of you use ESI in

00:50:35,210 --> 00:50:42,289
production you're not that happy with it

00:50:39,339 --> 00:50:44,450
almost okay well that's it for me I

00:50:42,289 --> 00:50:46,849
would like to thank you for coming up

00:50:44,450 --> 00:50:53,930
and we still have apparently five

00:50:46,849 --> 00:50:55,250
minutes time for questions this is the

00:50:53,930 --> 00:50:57,589
tricky bit where you're going to start

00:50:55,250 --> 00:51:00,109
asking questions in the VCL files can

00:50:57,589 --> 00:51:02,180
you kind of read from another

00:51:00,109 --> 00:51:04,730
configuration file because i'm a

00:51:02,180 --> 00:51:06,859
developer I'm not involved at all in the

00:51:04,730 --> 00:51:08,779
operational side I'm this kind of stuff

00:51:06,859 --> 00:51:10,970
seems like it's very much geared towards

00:51:08,779 --> 00:51:12,799
operations and I have a different set of

00:51:10,970 --> 00:51:14,960
talks that that are dedicated to it not

00:51:12,799 --> 00:51:17,059
really to the fact varnish or not but to

00:51:14,960 --> 00:51:19,700
the fact that developers must be aware

00:51:17,059 --> 00:51:21,589
of the systems they run on so I think it

00:51:19,700 --> 00:51:23,240
requires a shift a sort of mental shift

00:51:21,589 --> 00:51:25,460
that you are aware of the systems you

00:51:23,240 --> 00:51:27,220
runnin and vice versa so yeah I'm not

00:51:25,460 --> 00:51:30,950
gonna be why I'm not really saying none

00:51:27,220 --> 00:51:33,859
more saying is um I'd like to be able to

00:51:30,950 --> 00:51:35,599
ship a product which has this this

00:51:33,859 --> 00:51:38,509
separation between the different pages

00:51:35,599 --> 00:51:41,240
and I can steer that there are separate

00:51:38,509 --> 00:51:42,349
caching requirements but I don't

00:51:41,240 --> 00:51:44,059
necessarily want to be involved in

00:51:42,349 --> 00:51:45,619
tweaking those fine numbers to get

00:51:44,059 --> 00:51:47,420
exactly the right kind of alcohol

00:51:45,619 --> 00:51:49,099
because that's not effectively a few

00:51:47,420 --> 00:51:50,420
ways you can do the live system there

00:51:49,099 --> 00:51:53,359
are two ways either you you're gonna

00:51:50,420 --> 00:51:55,220
have strict cash management browser

00:51:53,359 --> 00:51:56,930
cache management so the headers you sent

00:51:55,220 --> 00:51:59,420
in your application if you do that well

00:51:56,930 --> 00:52:00,950
it will behave well if not you're gonna

00:51:59,420 --> 00:52:03,230
have to cooperate which this is I've

00:52:00,950 --> 00:52:05,119
been responsible so because we we run

00:52:03,230 --> 00:52:06,819
these we I work at a hosting company and

00:52:05,119 --> 00:52:09,349
we we tend to tweak it where necessary

00:52:06,819 --> 00:52:10,849
but it's just the basic setup we don't

00:52:09,349 --> 00:52:12,710
know their view RL patterns we don't

00:52:10,849 --> 00:52:14,720
know what your application is like so it

00:52:12,710 --> 00:52:16,309
really requires strong collaboration

00:52:14,720 --> 00:52:18,079
between operational ends and the

00:52:16,309 --> 00:52:19,460
development and so that's important the

00:52:18,079 --> 00:52:20,930
other guess what I'm really soon as I'd

00:52:19,460 --> 00:52:22,400
like the the Ops guys who aren't

00:52:20,930 --> 00:52:25,130
necessarily developers but a very good

00:52:22,400 --> 00:52:26,930
at this kind of managing the response

00:52:25,130 --> 00:52:28,490
times and there and the cash

00:52:26,930 --> 00:52:30,019
requirements of individual pages I want

00:52:28,490 --> 00:52:31,640
their those guys to be able to tweak

00:52:30,019 --> 00:52:33,380
those settings well without having to

00:52:31,640 --> 00:52:35,480
understand the VCL cooked well what you

00:52:33,380 --> 00:52:37,099
can do is write a scenario these pages

00:52:35,480 --> 00:52:38,690
should be cached these are the URL

00:52:37,099 --> 00:52:40,009
batters that respondent this way and if

00:52:38,690 --> 00:52:40,740
you could do it in a human way just

00:52:40,009 --> 00:52:44,820
write it

00:52:40,740 --> 00:52:47,640
a notepad document or so or email it to

00:52:44,820 --> 00:52:49,740
the guy and if you have all the caching

00:52:47,640 --> 00:52:50,970
strategies inventor eyes and it's just a

00:52:49,740 --> 00:52:52,740
matter of implementing it I think

00:52:50,970 --> 00:52:54,090
figuring them out is harder than

00:52:52,740 --> 00:52:55,530
implementing it so if you could figure

00:52:54,090 --> 00:52:57,690
that out for yourself what should be

00:52:55,530 --> 00:52:59,310
cached which patterns not the explicit

00:52:57,690 --> 00:53:00,990
pages but patterns if you say everything

00:52:59,310 --> 00:53:02,730
that is / images should be cached or

00:53:00,990 --> 00:53:05,520
everything that is / new shouldn't be

00:53:02,730 --> 00:53:08,130
catched cached if you can inventor eyes

00:53:05,520 --> 00:53:09,660
those and send it to them you've done a

00:53:08,130 --> 00:53:11,460
fairly good job but then although I'm

00:53:09,660 --> 00:53:13,590
not there with where you've got

00:53:11,460 --> 00:53:14,940
something Cashin for 10 seconds and the

00:53:13,590 --> 00:53:17,130
guy in op sinks actually you know what

00:53:14,940 --> 00:53:18,810
that probably needs to be 15 seconds or

00:53:17,130 --> 00:53:20,460
needs to be five seconds they

00:53:18,810 --> 00:53:23,400
effectively have to open up a vcl file

00:53:20,460 --> 00:53:26,220
and change what looks like code this was

00:53:23,400 --> 00:53:27,750
all kind of this kind of kind of lift

00:53:26,220 --> 00:53:29,250
you need to work together I think that's

00:53:27,750 --> 00:53:34,500
more a human problem than a technical

00:53:29,250 --> 00:53:37,770
problem against can be resolved if you

00:53:34,500 --> 00:53:40,290
force the caching headers from the

00:53:37,770 --> 00:53:43,230
server sides so the server side is

00:53:40,290 --> 00:53:45,840
providing the caching headers by hands

00:53:43,230 --> 00:53:48,000
the varnish knows how long yep can that

00:53:45,840 --> 00:53:50,070
it's the first point I made if you have

00:53:48,000 --> 00:53:53,190
strict yes the only room it'll work

00:53:50,070 --> 00:53:54,960
it'll work because that was you remember

00:53:53,190 --> 00:53:56,820
to slide with the guy praying that's the

00:53:54,960 --> 00:53:58,530
only thing varnish does its respect

00:53:56,820 --> 00:54:01,200
headers and if you don't do it in a

00:53:58,530 --> 00:54:03,270
correct way you'll have to play around

00:54:01,200 --> 00:54:06,859
with the vcl so if you want to avoid vcl

00:54:03,270 --> 00:54:09,090
at all time focus on header control I

00:54:06,859 --> 00:54:12,240
was just going to say that you can also

00:54:09,090 --> 00:54:14,580
do includes inside your vcl so you can

00:54:12,240 --> 00:54:16,800
split out different paths for different

00:54:14,580 --> 00:54:20,670
then you can also specify multiple

00:54:16,800 --> 00:54:22,200
receive and all the different hooks I

00:54:20,670 --> 00:54:23,940
mentioned you can use them made multiple

00:54:22,200 --> 00:54:26,480
times so if you have different

00:54:23,940 --> 00:54:29,250
applications but all sharing the same

00:54:26,480 --> 00:54:31,260
varnishing instance you can have

00:54:29,250 --> 00:54:34,680
multiple definitions i usually do the

00:54:31,260 --> 00:54:36,030
include 44 if you have a huge vcl file

00:54:34,680 --> 00:54:38,130
it's not really that readable so you

00:54:36,030 --> 00:54:40,950
include really helps along well for

00:54:38,130 --> 00:54:42,960
formatting and we reading it so but also

00:54:40,950 --> 00:54:44,760
also from multiple if you say you have

00:54:42,960 --> 00:54:46,320
multiple instances of multiple sides

00:54:44,760 --> 00:54:48,660
that run you're gonna have to have good

00:54:46,320 --> 00:54:50,820
matching from the host names because not

00:54:48,660 --> 00:54:52,710
every host or host identifies your

00:54:50,820 --> 00:54:53,700
website and if if it's a different house

00:54:52,710 --> 00:54:56,400
you should have a differen

00:54:53,700 --> 00:54:59,280
an area running so I work for the BBC so

00:54:56,400 --> 00:55:01,770
everything is under BBC co uk and all

00:54:59,280 --> 00:55:05,990
the different sites designated by the

00:55:01,770 --> 00:55:09,500
URL path / and then the first part yes

00:55:05,990 --> 00:55:12,360
insane things with varnish including

00:55:09,500 --> 00:55:14,550
calling services inside varnish so we're

00:55:12,360 --> 00:55:18,380
doing in line see ya you should do a

00:55:14,550 --> 00:55:20,940
talk on them I've considered it oh

00:55:18,380 --> 00:55:24,270
definitely do it but that's that's a bit

00:55:20,940 --> 00:55:26,670
i explicitly didn't mention like you can

00:55:24,270 --> 00:55:28,110
add C codes and add custom libraries it

00:55:26,670 --> 00:55:29,790
gets really nuts from there I haven't

00:55:28,110 --> 00:55:31,200
tried it not good enough at that but if

00:55:29,790 --> 00:55:32,580
someone's good enough please you have a

00:55:31,200 --> 00:55:38,340
blog where you share these kind of

00:55:32,580 --> 00:55:43,440
things share it share it share this is

00:55:38,340 --> 00:55:46,980
valuable information I've got a quick

00:55:43,440 --> 00:55:50,910
question I'm currently taking the four

00:55:46,980 --> 00:55:52,350
kitchens press flow vcl that they have

00:55:50,910 --> 00:55:56,780
on now which i think is a pretty good

00:55:52,350 --> 00:55:59,820
example of of a well-to-do vcl file and

00:55:56,780 --> 00:56:05,060
combining that with the outside include

00:55:59,820 --> 00:56:07,440
module available on for drupal 6 and

00:56:05,060 --> 00:56:11,100
they seem to sort of conflicts and

00:56:07,440 --> 00:56:14,910
trying to work around that but the stuff

00:56:11,100 --> 00:56:17,100
that you showed on restart I've had a

00:56:14,910 --> 00:56:19,350
good look through the documentation on

00:56:17,100 --> 00:56:22,620
the varnish site and I've only seen the

00:56:19,350 --> 00:56:26,310
very brief 'used notes on that where is

00:56:22,620 --> 00:56:28,320
that found is that from varnish website

00:56:26,310 --> 00:56:30,480
that there's stuff on how to do I found

00:56:28,320 --> 00:56:32,670
everything here will see your fine on

00:56:30,480 --> 00:56:34,290
blogs or varnish website so i have to

00:56:32,670 --> 00:56:35,610
dig quite deep into the varnish side

00:56:34,290 --> 00:56:37,200
because if you look at it in a

00:56:35,610 --> 00:56:39,210
superficial way you won't find that much

00:56:37,200 --> 00:56:41,220
dogs but if you dig in there's a fair

00:56:39,210 --> 00:56:42,600
amount they have a trackside which has

00:56:41,220 --> 00:56:45,330
its own wiki and there you can fight

00:56:42,600 --> 00:56:47,340
tons of stuff and it links if you only

00:56:45,330 --> 00:56:49,410
have to go to varnish dash dash dot org

00:56:47,340 --> 00:56:55,260
and click the track button and then you

00:56:49,410 --> 00:56:57,960
can dig in hello yes it's very

00:56:55,260 --> 00:57:00,000
interesting the the talk especially we

00:56:57,960 --> 00:57:02,610
use a the ez publish content management

00:57:00,000 --> 00:57:04,230
system and vangie sort of is being

00:57:02,610 --> 00:57:06,690
promoted to be you know it was the main

00:57:04,230 --> 00:57:07,190
box you for that at the moment we have a

00:57:06,690 --> 00:57:10,040
site

00:57:07,190 --> 00:57:12,560
using engine X as a front end to apache2

00:57:10,040 --> 00:57:15,500
to serve up bindings very quickly is

00:57:12,560 --> 00:57:17,750
it's worth retro engineering previous

00:57:15,500 --> 00:57:20,599
site is the performance increase over

00:57:17,750 --> 00:57:22,520
sometime engine X you know worth it or

00:57:20,599 --> 00:57:24,770
shall we just use varnish for future

00:57:22,520 --> 00:57:27,380
sites it all depends there is no real

00:57:24,770 --> 00:57:29,089
there's not one answer to this but we

00:57:27,380 --> 00:57:30,980
should see the data or see the the

00:57:29,089 --> 00:57:33,410
variables that I don't know right now

00:57:30,980 --> 00:57:35,420
varnishes it's pretty decent but I know

00:57:33,410 --> 00:57:37,460
that nginx performs really really decent

00:57:35,420 --> 00:57:39,950
as well it connects with mem cache etc

00:57:37,460 --> 00:57:42,290
so it's really hard to give you solid

00:57:39,950 --> 00:57:45,230
advice on that with the limited info we

00:57:42,290 --> 00:57:47,200
have right now so ok I could talk about

00:57:45,230 --> 00:57:51,140
it and we could research it if necessary

00:57:47,200 --> 00:57:52,700
for you but it's it all depends there's

00:57:51,140 --> 00:57:54,890
not one solution people say well you

00:57:52,700 --> 00:57:56,869
well the story changes every every now

00:57:54,890 --> 00:57:58,579
and then first it was used use memcache

00:57:56,869 --> 00:58:00,050
then they people say well put the

00:57:58,579 --> 00:58:01,970
varnish in front of it other people use

00:58:00,050 --> 00:58:03,920
different technologies if you have a

00:58:01,970 --> 00:58:05,900
cache that works for you and you can see

00:58:03,920 --> 00:58:07,490
the benchmarks show you that the

00:58:05,900 --> 00:58:09,530
performance is decent just stick with it

00:58:07,490 --> 00:58:11,240
I'd say only if you're looking for a way

00:58:09,530 --> 00:58:12,890
out something that is if varnish would

00:58:11,240 --> 00:58:14,089
be more flexible to you and would solve

00:58:12,890 --> 00:58:16,430
the problem do you have right now I

00:58:14,089 --> 00:58:18,290
would say switch to varnish if not stick

00:58:16,430 --> 00:58:19,670
to the things you know well I think it's

00:58:18,290 --> 00:58:21,740
just because it means it's going to be

00:58:19,670 --> 00:58:23,420
integrated with ez publish so rather

00:58:21,740 --> 00:58:27,770
than as a bolt on that would be more of

00:58:23,420 --> 00:58:29,960
a core component but thanks anyway yes

00:58:27,770 --> 00:58:32,839
we probably have time for one last

00:58:29,960 --> 00:58:36,410
question maybe yeah so every green me

00:58:32,839 --> 00:58:38,420
like and we go wrap it up ok so other

00:58:36,410 --> 00:58:40,460
than the purge request header is there

00:58:38,420 --> 00:58:42,680
any AP is that we could use to purge the

00:58:40,460 --> 00:58:44,630
varnish cash so any sub directories or

00:58:42,680 --> 00:58:46,700
collections of URLs you have the telnet

00:58:44,630 --> 00:58:49,490
one so you can connect to telnet but

00:58:46,700 --> 00:58:51,380
there's no real API that is ready I've

00:58:49,490 --> 00:58:54,800
looked into the source code today and

00:58:51,380 --> 00:58:56,720
I've noticed that it's if you know if

00:58:54,800 --> 00:58:59,180
you're good at sea it's fairly easy to

00:58:56,720 --> 00:59:01,130
wrap around lip varnish and control this

00:58:59,180 --> 00:59:04,040
yourself with PHP functions I'm not that

00:59:01,130 --> 00:59:06,829
good at sea extensions but uh I'll have

00:59:04,040 --> 00:59:10,160
a I'll have a look at it if I can do it

00:59:06,829 --> 00:59:12,140
um you might imagine you're running a

00:59:10,160 --> 00:59:14,780
blog site and you've got an individual

00:59:12,140 --> 00:59:17,240
post that an author updates if you

00:59:14,780 --> 00:59:19,369
include a header on every page that

00:59:17,240 --> 00:59:20,310
includes that post so maybe a blog index

00:59:19,369 --> 00:59:22,680
page or

00:59:20,310 --> 00:59:25,410
search results page you know that that's

00:59:22,680 --> 00:59:27,270
got that particular post included you

00:59:25,410 --> 00:59:29,220
can tell varnish to purge everything

00:59:27,270 --> 00:59:30,450
with that particular header in it so you

00:59:29,220 --> 00:59:32,760
don't even need to restrict yourself to

00:59:30,450 --> 00:59:34,470
purging by URL you could say an author's

00:59:32,760 --> 00:59:36,690
just edited post number four let's purge

00:59:34,470 --> 00:59:38,670
every single page that mentions post for

00:59:36,690 --> 00:59:40,380
so you can do a lot of clever stuff with

00:59:38,670 --> 00:59:42,120
it well it comes with batter and mashing

00:59:40,380 --> 00:59:44,460
so all the patterns you can have I use

00:59:42,120 --> 00:59:46,140
the purge URL bit so you have to make

00:59:44,460 --> 00:59:47,820
you know certain aspects of the URL not

00:59:46,140 --> 00:59:50,010
a full URL but something that is mixed

00:59:47,820 --> 00:59:51,570
in between it but you can perch on

00:59:50,010 --> 00:59:53,670
things that aren't in the URL like

00:59:51,570 --> 00:59:56,160
headers yeah there's a purge method I

00:59:53,670 --> 00:59:58,680
didn't explicitly use it I know there's

00:59:56,160 --> 01:00:00,390
a persian a purge URL I specifically be

00:59:58,680 --> 01:00:03,600
focused on purge URL because that was

01:00:00,390 --> 01:00:05,190
the most common thing to do but there's

01:00:03,600 --> 01:00:08,220
plenty of stuff I overheard here to make

01:00:05,190 --> 01:00:10,710
an advanced varnish talk I don't really

01:00:08,220 --> 01:00:12,720
feel that I should make this one but

01:00:10,710 --> 01:00:16,190
there's like the sea but you should you

01:00:12,720 --> 01:00:18,660
should really submit that stuff really

01:00:16,190 --> 01:00:21,680
okay I think that's it thank you very

01:00:18,660 --> 01:00:21,680

YouTube URL: https://www.youtube.com/watch?v=BsJ_B2VhtIE


