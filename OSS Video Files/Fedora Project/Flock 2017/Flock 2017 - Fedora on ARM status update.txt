Title: Flock 2017 - Fedora on ARM status update
Publication date: 2017-10-20
Playlist: Flock 2017
Description: 
	Wednesday August 30, 2017 2:30pm - 3:00pm
@Grand I
Talk: Fedora on ARM status update
Presenter: Peter Robinson, Paul Whalen

Description:
An overview of where we are with support of various devices in the Fedora ARM ecosystem. Covers SBCs (Single Board Computers) including popular devices like the Raspberry Pi, Pine64 and 96boards as well as Chromebooks, aarch64 devices, accelerated graphics stacks, how we're working to automate QA and other testing and all sorts of other goodness
Captions: 
	00:00:01,490 --> 00:00:06,960
hey I'm Peter Robinson I'm here to talk

00:00:05,339 --> 00:00:37,670
about basically the state of 2-door

00:00:06,960 --> 00:00:41,340
rollin yes I'm going to be covering both

00:00:37,670 --> 00:00:44,520
v7 and a out 64 I'm going to run fairly

00:00:41,340 --> 00:00:47,309
quickly through most of this if anyone

00:00:44,520 --> 00:00:52,800
has any questions feel free to ask as we

00:00:47,309 --> 00:00:53,850
go and the slides are fairly basic so

00:00:52,800 --> 00:01:03,049
there'll be a bunch of other information

00:00:53,850 --> 00:01:06,510
as I go yeah so server in I mean overall

00:01:03,049 --> 00:01:08,430
both an v7 and I are at 64 I'm now

00:01:06,510 --> 00:01:10,409
pretty damn boring pretty much

00:01:08,430 --> 00:01:14,460
everything is supported in the user

00:01:10,409 --> 00:01:17,759
space everything builds and everything

00:01:14,460 --> 00:01:19,890
just continues to roll along in the

00:01:17,759 --> 00:01:23,759
server and cloud space so docker base

00:01:19,890 --> 00:01:27,530
image cloud images server installers

00:01:23,759 --> 00:01:29,820
various other bits and pieces all

00:01:27,530 --> 00:01:34,079
relatively straightforward all looks

00:01:29,820 --> 00:01:34,710
exactly like x86 or operates exactly as

00:01:34,079 --> 00:01:41,570
expected

00:01:34,710 --> 00:01:45,360
pretty much nicely boring and in flora

00:01:41,570 --> 00:01:48,750
27 Adam Noah has been working on the

00:01:45,360 --> 00:01:50,939
multi art stuff and the modularity team

00:01:48,750 --> 00:01:54,990
has been working to a degree on the

00:01:50,939 --> 00:01:59,219
multi art stuff so for f27 when

00:01:54,990 --> 00:02:01,619
modularity happens you know it'll be

00:01:59,219 --> 00:02:04,680
there for the arm architectures as well

00:02:01,619 --> 00:02:10,590
exactly as you would expect for x86 the

00:02:04,680 --> 00:02:13,980
current plan is to promote server for a

00:02:10,590 --> 00:02:15,450
out 64 in f28 timeframe

00:02:13,980 --> 00:02:17,480
I've spoken to a bunch of people about

00:02:15,450 --> 00:02:20,069
it I need to get around to filing

00:02:17,480 --> 00:02:22,250
changes and Fez go tickets and various

00:02:20,069 --> 00:02:24,959
other bits and pieces range tickets

00:02:22,250 --> 00:02:28,080
because they've got vast amounts of work

00:02:24,959 --> 00:02:33,660
to do like flipping bits for locations

00:02:28,080 --> 00:02:35,760
of bits and pieces but overall it's all

00:02:33,660 --> 00:02:41,040
there and it works exactly as you would

00:02:35,760 --> 00:02:44,160
expect work station and in particular

00:02:41,040 --> 00:02:46,380
accellerated GPU support is starting to

00:02:44,160 --> 00:02:49,349
get quite interesting going back a few

00:02:46,380 --> 00:02:53,459
years we literally had nothing that was

00:02:49,349 --> 00:02:55,829
open accelerated drivers forearm and the

00:02:53,459 --> 00:02:59,760
ecosystem as a whole was fairly terrible

00:02:55,829 --> 00:03:02,459
now we have a handful of different fully

00:02:59,760 --> 00:03:07,489
accelerated so at nevere on like the

00:03:02,459 --> 00:03:11,190
imx6 and a few other SOC s the Tegra

00:03:07,489 --> 00:03:13,799
stuff in the more modern GPUs is all

00:03:11,190 --> 00:03:16,010
supported by the nouveau driver out of

00:03:13,799 --> 00:03:18,540
the box

00:03:16,010 --> 00:03:22,350
Rob Clarke has been working on the free

00:03:18,540 --> 00:03:25,109
Drina driver and will have a couple of

00:03:22,350 --> 00:03:30,690
device or at least one device that that

00:03:25,109 --> 00:03:31,970
works on out of the box 64 bit 96 boards

00:03:30,690 --> 00:03:34,620
dragon board

00:03:31,970 --> 00:03:37,350
for fedora 26 you should be able to run

00:03:34,620 --> 00:03:39,239
a fully assimilated workstation out of

00:03:37,350 --> 00:03:41,160
the box and of course there's the

00:03:39,239 --> 00:03:44,120
Raspberry Pi with their open driver

00:03:41,160 --> 00:03:46,319
where we've supported

00:03:44,120 --> 00:03:51,180
accellerated drivers on workstation

00:03:46,319 --> 00:03:56,090
since Fedora 25 and we'll be bringing

00:03:51,180 --> 00:03:59,639
that to 64-bit as well in F 27 so

00:03:56,090 --> 00:04:01,470
overall the GPU support has been looking

00:03:59,639 --> 00:04:03,150
quite good and and there's some other

00:04:01,470 --> 00:04:08,370
interesting stuff coming along there as

00:04:03,150 --> 00:04:10,829
well so media acceleration and offload

00:04:08,370 --> 00:04:13,919
so similar to the way you sort of

00:04:10,829 --> 00:04:16,560
Android phone can do like full screen

00:04:13,919 --> 00:04:19,169
and video without using huge amounts of

00:04:16,560 --> 00:04:22,140
CPU and battery will be able to do some

00:04:19,169 --> 00:04:23,990
more sort of stuff on arm so there's

00:04:22,140 --> 00:04:26,010
some interesting stuff coming in there

00:04:23,990 --> 00:04:27,070
which will make things like media

00:04:26,010 --> 00:04:29,320
centers

00:04:27,070 --> 00:04:31,150
and other related things quite

00:04:29,320 --> 00:04:33,660
interesting on Fedora because we'll be

00:04:31,150 --> 00:04:37,060
able to do it fully accelerated offload

00:04:33,660 --> 00:04:39,490
of things like h.264 without actually

00:04:37,060 --> 00:04:41,890
having to ship any codecs and stuff

00:04:39,490 --> 00:04:49,630
because we'll all just happen in

00:04:41,890 --> 00:04:52,510
hardware basically and finally 64-bit

00:04:49,630 --> 00:04:55,600
single board computers such as the

00:04:52,510 --> 00:04:59,260
Raspberry Pi will finally support in

00:04:55,600 --> 00:05:02,530
Fedora 27 I was going to hopefully do a

00:04:59,260 --> 00:05:04,840
demo but it wasn't working and the demo

00:05:02,530 --> 00:05:07,060
gods weren't with me and the Fedora

00:05:04,840 --> 00:05:11,530
composed process wasn't quite with me

00:05:07,060 --> 00:05:13,630
but so the way we're working for things

00:05:11,530 --> 00:05:15,940
like the pine 64 and the Raspberry Pi

00:05:13,630 --> 00:05:19,810
and some of the ninety-six board stuff

00:05:15,940 --> 00:05:24,010
but basically any of the 64 bit single

00:05:19,810 --> 00:05:26,800
board computers will be UEFI and grub

00:05:24,010 --> 00:05:30,370
boot so basically it will look exactly

00:05:26,800 --> 00:05:33,850
like an x86 laptop you'll get a grub

00:05:30,370 --> 00:05:36,940
maybe it'll boot what work exactly as

00:05:33,850 --> 00:05:40,360
you would expect I mean some of the

00:05:36,940 --> 00:05:44,040
advantage of that is we get single code

00:05:40,360 --> 00:05:47,500
paths across SPSA compliant servers and

00:05:44,040 --> 00:05:52,000
like SBC's and things like that and

00:05:47,500 --> 00:05:53,740
basically everything is just nice and

00:05:52,000 --> 00:05:58,390
simple and works as expected

00:05:53,740 --> 00:06:00,520
so there'll be so a couple of those 64

00:05:58,390 --> 00:06:03,550
device bit devices like the Raspberry Pi

00:06:00,520 --> 00:06:07,900
3 and the dragon board you'll be able to

00:06:03,550 --> 00:06:11,020
do fully accelerated workstation on tiny

00:06:07,900 --> 00:06:14,950
little sort of boards and and stuff like

00:06:11,020 --> 00:06:16,270
that so so I've been asked for ages when

00:06:14,950 --> 00:06:18,880
are we going to support that sort of

00:06:16,270 --> 00:06:21,280
stuff and I've been working on it for

00:06:18,880 --> 00:06:23,200
ages and we're finally sort of aligned

00:06:21,280 --> 00:06:25,660
and got all the bits needed into the

00:06:23,200 --> 00:06:29,080
right places with huge help from people

00:06:25,660 --> 00:06:33,580
like Rob Clark and mr. Jones and various

00:06:29,080 --> 00:06:36,820
other upstream maintain as you know it's

00:06:33,580 --> 00:06:38,350
in a nice position and you know if you

00:06:36,820 --> 00:06:39,640
find me tomorrow you should be I should

00:06:38,350 --> 00:06:40,090
be able to demo up for you if you're

00:06:39,640 --> 00:06:43,510
interested

00:06:40,090 --> 00:06:46,600
so so there's a bunch of stuff there

00:06:43,510 --> 00:06:48,600
where you know finally we're basically

00:06:46,600 --> 00:06:50,860
becoming normal and boring and

00:06:48,600 --> 00:06:56,740
everything just works exactly as it

00:06:50,860 --> 00:06:58,210
would on any other device and the other

00:06:56,740 --> 00:06:59,860
thing that people ask me about is things

00:06:58,210 --> 00:07:04,690
like networking storage and stuff like

00:06:59,860 --> 00:07:07,389
that there's a bunch of cheap single

00:07:04,690 --> 00:07:09,910
board computers and Simois that can do

00:07:07,389 --> 00:07:11,380
some interesting network stuff with

00:07:09,910 --> 00:07:14,919
network switches and things like that

00:07:11,380 --> 00:07:18,669
and we're slowly getting some support

00:07:14,919 --> 00:07:20,530
upstream and speaking with some vendors

00:07:18,669 --> 00:07:22,060
and getting them to do some work and

00:07:20,530 --> 00:07:24,120
various other bits and pieces around

00:07:22,060 --> 00:07:28,419
things like network function like

00:07:24,120 --> 00:07:31,330
network function virtualization with

00:07:28,419 --> 00:07:33,400
things like open V switch and stuff and

00:07:31,330 --> 00:07:35,200
like those sort of devices or things

00:07:33,400 --> 00:07:37,930
like the espresso bean and the macchiato

00:07:35,200 --> 00:07:42,690
bean and other sort of devices like that

00:07:37,930 --> 00:07:45,039
where we end up being able to do some

00:07:42,690 --> 00:07:48,970
interesting sort of use case and testing

00:07:45,039 --> 00:07:51,820
around like storage networking various

00:07:48,970 --> 00:07:54,610
other embedded use cases that a lot of

00:07:51,820 --> 00:07:59,080
people are interested in so I mean

00:07:54,610 --> 00:08:02,789
ultimately the arm stuff now is nicely

00:07:59,080 --> 00:08:06,060
boring and basically just works and so

00:08:02,789 --> 00:08:09,460
rather than chasing our tail

00:08:06,060 --> 00:08:11,950
fixing like user space compile problems

00:08:09,460 --> 00:08:16,570
and various other bits and pieces like

00:08:11,950 --> 00:08:18,610
that we're now looking at sort of where

00:08:16,570 --> 00:08:22,120
the arm stuff is cool where we can sort

00:08:18,610 --> 00:08:23,740
of value-add so IOT related stuff is

00:08:22,120 --> 00:08:26,830
obviously my day job and we're looking

00:08:23,740 --> 00:08:28,780
at a bunch of things around that and I'm

00:08:26,830 --> 00:08:30,280
speaking to a bunch of vendors and

00:08:28,780 --> 00:08:32,680
partners that are interested in doing

00:08:30,280 --> 00:08:36,580
things around that and actively

00:08:32,680 --> 00:08:40,270
contributing into fedora I think in

00:08:36,580 --> 00:08:44,560
Fedora 26 we've had engagement from

00:08:40,270 --> 00:08:47,410
maybe 12 different vendors where they're

00:08:44,560 --> 00:08:51,010
actively hanging out on the IRC Channel

00:08:47,410 --> 00:08:53,649
they're actively testing and fixing bugs

00:08:51,010 --> 00:08:56,019
and contributing patches and features

00:08:53,649 --> 00:08:58,569
to fedora and it's taken us a long time

00:08:56,019 --> 00:09:00,639
to get there but it's kind of cool

00:08:58,569 --> 00:09:03,699
saying you know various different arm

00:09:00,639 --> 00:09:08,350
SOC vendors sort of contributing

00:09:03,699 --> 00:09:09,819
straight into Fedora stuff and yeah I'm

00:09:08,350 --> 00:09:11,649
getting to the point where there's some

00:09:09,819 --> 00:09:15,490
things that I previously had to do all

00:09:11,649 --> 00:09:16,149
myself and people just like vendors are

00:09:15,490 --> 00:09:21,399
coming in again

00:09:16,149 --> 00:09:25,569
hey we're seen you need that so we're

00:09:21,399 --> 00:09:27,249
just going to get on and do it and I

00:09:25,569 --> 00:09:28,480
didn't actually put it on the slide

00:09:27,249 --> 00:09:32,589
because I didn't think of it at the time

00:09:28,480 --> 00:09:35,790
but shortly we should be able to start

00:09:32,589 --> 00:09:39,249
to provide copper for arm 64 as well

00:09:35,790 --> 00:09:41,019
actually have the hardware on its way or

00:09:39,249 --> 00:09:45,879
may even be sitting in the data centered

00:09:41,019 --> 00:09:47,139
already and we just basically need power

00:09:45,879 --> 00:09:50,199
and network and a few other bits and

00:09:47,139 --> 00:09:53,949
pieces which are being worked on so that

00:09:50,199 --> 00:09:56,829
we can enable copper because I think the

00:09:53,949 --> 00:09:59,139
64-bit single board computers and copper

00:09:56,829 --> 00:10:00,129
are probably the two biggest questions I

00:09:59,139 --> 00:10:03,399
get asked around

00:10:00,129 --> 00:10:05,379
I'm 64 or so I'm looking forward to

00:10:03,399 --> 00:10:07,240
similarly when I added support for the

00:10:05,379 --> 00:10:09,610
Raspberry Pi I'm looking forward to be

00:10:07,240 --> 00:10:13,959
able to say hey it's done it's over

00:10:09,610 --> 00:10:15,579
there just go and use it so I think

00:10:13,959 --> 00:10:32,470
that's about it has anyone got any

00:10:15,579 --> 00:10:37,269
questions it is so basically we use you

00:10:32,470 --> 00:10:41,110
boot and initially it was implemented by

00:10:37,269 --> 00:10:47,379
Susie and that was sort of just enough

00:10:41,110 --> 00:10:48,970
UEFI and then Rob Clark and another guy

00:10:47,379 --> 00:10:50,949
which I can't remember his name who I

00:10:48,970 --> 00:10:55,149
think is part of the Debian project and

00:10:50,949 --> 00:10:58,209
a couple of other individuals have done

00:10:55,149 --> 00:11:02,980
a bunch of functionality where basically

00:10:58,209 --> 00:11:06,110
you boot emulates UEFI to enable us to

00:11:02,980 --> 00:11:08,089
basically run grub and and very

00:11:06,110 --> 00:11:10,970
other bits and pieces there was a patch

00:11:08,089 --> 00:11:13,730
set that came through on the list a few

00:11:10,970 --> 00:11:15,800
weeks ago which implements all the UFO

00:11:13,730 --> 00:11:17,630
network services so you can run things

00:11:15,800 --> 00:11:22,180
like I pick C and stuff like that on

00:11:17,630 --> 00:11:26,269
them and so basically so in some cases

00:11:22,180 --> 00:11:28,610
the devices have Tiana core which is the

00:11:26,269 --> 00:11:31,279
I suppose you'd say the upstream

00:11:28,610 --> 00:11:33,680
yeah reference implementation of UEFI

00:11:31,279 --> 00:11:38,350
and and so that just works as if it was

00:11:33,680 --> 00:11:42,170
like but in some cases that is a large

00:11:38,350 --> 00:11:43,490
complex beefs and companies coming from

00:11:42,170 --> 00:11:46,070
the embedded side where they've dealt

00:11:43,490 --> 00:11:49,040
with you good a lot as suddenly like oh

00:11:46,070 --> 00:11:52,339
well if we can do this within you Oh

00:11:49,040 --> 00:11:54,380
UEFI within you boot it gives us a way

00:11:52,339 --> 00:11:57,490
of supporting that plus our old style

00:11:54,380 --> 00:12:02,779
boot methods with a single code base so

00:11:57,490 --> 00:12:05,540
and then so that's now and we don't have

00:12:02,779 --> 00:12:09,050
it everything's not quite upstream but

00:12:05,540 --> 00:12:11,870
we're not far from it and I'm speaking

00:12:09,050 --> 00:12:12,620
to vendors like board manufacturers and

00:12:11,870 --> 00:12:16,160
things like that

00:12:12,620 --> 00:12:19,250
saying we want spi flash on these

00:12:16,160 --> 00:12:21,320
devices and we want you to either put

00:12:19,250 --> 00:12:24,529
tiyanak or on that flash or we want you

00:12:21,320 --> 00:12:27,380
to court you boot with the ufi support

00:12:24,529 --> 00:12:29,870
on that flash so that we can just plug

00:12:27,380 --> 00:12:31,880
in a fedora SD card and it just booze or

00:12:29,870 --> 00:12:34,699
you can plug in a debian or you can plug

00:12:31,880 --> 00:12:38,350
in an Susie SD card and it'll just work

00:12:34,699 --> 00:12:41,329
and so these are conversations which

00:12:38,350 --> 00:12:44,089
three four years ago I would never have

00:12:41,329 --> 00:12:46,160
with vendors and now vendors are coming

00:12:44,089 --> 00:12:48,500
to me how can we make this easier what

00:12:46,160 --> 00:12:51,649
do we need to do to enable this and so

00:12:48,500 --> 00:12:53,510
it's interesting because suddenly we're

00:12:51,649 --> 00:12:57,680
getting to a point where stuff just

00:12:53,510 --> 00:12:59,600
works like I got an email from Evan

00:12:57,680 --> 00:13:02,990
Upton the creator of the Raspberry Pi

00:12:59,600 --> 00:13:06,560
guy hey I've heard you're doing 64-bit

00:13:02,990 --> 00:13:08,660
with UEFI and grabbing that on the PI

00:13:06,560 --> 00:13:10,310
can you demo it to me and it's like

00:13:08,660 --> 00:13:13,640
that's an email I never thought I would

00:13:10,310 --> 00:13:15,980
get so so you know it's been a bit of a

00:13:13,640 --> 00:13:18,110
long haul but there's some really cool

00:13:15,980 --> 00:13:19,940
stuff happening and then on top of that

00:13:18,110 --> 00:13:22,430
we're starting to do things like

00:13:19,940 --> 00:13:26,390
machine learning and AI and stuff like

00:13:22,430 --> 00:13:29,300
that so you know rather than doing bare

00:13:26,390 --> 00:13:31,070
metal does this board work the vendors

00:13:29,300 --> 00:13:34,460
are starting to take over that and I'm

00:13:31,070 --> 00:13:36,650
slowly starting to be able to like do i

00:13:34,460 --> 00:13:38,780
OT things on top and stuff like that

00:13:36,650 --> 00:13:40,430
which is ultimately what I wanted to do

00:13:38,780 --> 00:13:44,630
when I first started to scratch the are

00:13:40,430 --> 00:13:46,610
Mitch seven or eight years ago so people

00:13:44,630 --> 00:14:03,500
would call me a little persistent or you

00:13:46,610 --> 00:14:05,150
know any more questions what do you mean

00:14:03,500 --> 00:14:17,930
by the problems between servers and

00:14:05,150 --> 00:14:22,160
SPCA's so there has been a few trade

00:14:17,930 --> 00:14:26,480
offs we've had to make so the enterprise

00:14:22,160 --> 00:14:30,530
OS supports 64k page sizes we've had to

00:14:26,480 --> 00:14:33,860
go with 4k page sizes because we need cm

00:14:30,530 --> 00:14:35,960
a and C MMA with 64 K page sizes takes

00:14:33,860 --> 00:14:40,640
up half a gig of ram which basically

00:14:35,960 --> 00:14:44,300
makes say the pi3 unusable so there's a

00:14:40,640 --> 00:14:46,270
but that ends up being a trade-off not

00:14:44,300 --> 00:14:48,920
really between server and workstation

00:14:46,270 --> 00:14:54,580
although it may end up being for super

00:14:48,920 --> 00:14:57,620
large like multi terabyte size servers

00:14:54,580 --> 00:14:59,300
but I mean I don't think it's going to

00:14:57,620 --> 00:15:02,870
change that much because I mean

00:14:59,300 --> 00:15:06,890
ultimately even on x86 we have monster

00:15:02,870 --> 00:15:09,650
server HPC cluster vs. like laptops and

00:15:06,890 --> 00:15:11,420
other such devices and you know there's

00:15:09,650 --> 00:15:12,860
compromises that have to be made there

00:15:11,420 --> 00:15:16,720
and I don't see that that's any

00:15:12,860 --> 00:15:19,490
different on you know on arm versus x86

00:15:16,720 --> 00:15:21,710
maybe the ESPYs like the single board

00:15:19,490 --> 00:15:23,540
computers and that of small aspects than

00:15:21,710 --> 00:15:25,940
you would generally see on say an x86

00:15:23,540 --> 00:15:28,970
laptop but there's sort of still similar

00:15:25,940 --> 00:15:30,800
sort of trade-offs that need to happen

00:15:28,970 --> 00:15:32,940
there so I don't think it would get any

00:15:30,800 --> 00:15:34,890
worse so

00:15:32,940 --> 00:15:37,350
there's probably use cases that are

00:15:34,890 --> 00:15:41,160
slightly different that might have more

00:15:37,350 --> 00:15:44,220
of an impact but you know I don't I

00:15:41,160 --> 00:15:45,570
haven't generally seen any sort of major

00:15:44,220 --> 00:16:17,070
sort of alarm bells that have been

00:15:45,570 --> 00:16:18,540
ringing anyone else Jared so yes in some

00:16:17,070 --> 00:16:20,990
cases Fedora does run slower

00:16:18,540 --> 00:16:27,300
um the Raspberry Pi is a case in point

00:16:20,990 --> 00:16:32,130
and part of that is we use pure upstream

00:16:27,300 --> 00:16:35,040
and there's reasons for that one

00:16:32,130 --> 00:16:37,500
maintainer ship I don't have the time or

00:16:35,040 --> 00:16:41,520
the interest in maintaining 30 different

00:16:37,500 --> 00:16:44,210
vendor branches one of the advantages we

00:16:41,520 --> 00:16:47,970
get of that is we don't get things like

00:16:44,210 --> 00:16:51,300
vendor included backdoors and other such

00:16:47,970 --> 00:16:53,460
things that was saying like a bunch of

00:16:51,300 --> 00:16:56,150
the allwinner code that other

00:16:53,460 --> 00:16:59,190
distributions just blanket shipped and

00:16:56,150 --> 00:17:01,650
that but like in so in the Raspberry Pi

00:16:59,190 --> 00:17:07,110
case in Fedora 25 it was pretty goddamn

00:17:01,650 --> 00:17:10,350
slow in Fedora 26 I did a bunch of work

00:17:07,110 --> 00:17:14,490
and we went from I think about eight

00:17:10,350 --> 00:17:19,530
megabytes a second on a class 10 SD card

00:17:14,490 --> 00:17:24,270
to 26 28 megabytes a second which made

00:17:19,530 --> 00:17:27,990
things a whole lot faster there was a

00:17:24,270 --> 00:17:31,920
combination of stuff there was some bugs

00:17:27,990 --> 00:17:33,810
and in the process of enabling so the

00:17:31,920 --> 00:17:37,280
Raspberry Pi is kind of interesting in

00:17:33,810 --> 00:17:41,730
that most arm s pcs will include like

00:17:37,280 --> 00:17:43,770
three to five or eight MMC controllers

00:17:41,730 --> 00:17:45,630
on board to drive different things and

00:17:43,770 --> 00:17:47,850
they will all be the same

00:17:45,630 --> 00:17:50,010
running the same driver the Raspberry Pi

00:17:47,850 --> 00:17:52,290
for some reason has two completely

00:17:50,010 --> 00:17:54,780
different sets of IP for the two MMC

00:17:52,290 --> 00:17:56,520
controllers that are on board one of the

00:17:54,780 --> 00:17:58,260
cool things with a bunch of the arm

00:17:56,520 --> 00:18:02,070
hardware is that you can basically

00:17:58,260 --> 00:18:05,670
reconfigure how the work hardware works

00:18:02,070 --> 00:18:07,980
by adjusting the pin muxing and so one

00:18:05,670 --> 00:18:11,130
of the things that happen is when the

00:18:07,980 --> 00:18:13,380
driver for the Wi-Fi like for the MMC

00:18:11,130 --> 00:18:16,200
controller that the Wi-Fi is connected

00:18:13,380 --> 00:18:19,320
to when upstream that one's actually

00:18:16,200 --> 00:18:22,290
faster so we flipped the pin marx's

00:18:19,320 --> 00:18:24,060
which meant basically the SD card got

00:18:22,290 --> 00:18:28,670
one controller that's a lot faster and

00:18:24,060 --> 00:18:31,950
it gave us more IO and there was a issue

00:18:28,670 --> 00:18:34,410
around the DMA driver where we got a bug

00:18:31,950 --> 00:18:37,290
fixed upstream and we weren't including

00:18:34,410 --> 00:18:39,270
it in the init Rd so when the MMC can so

00:18:37,290 --> 00:18:39,810
like so that fixed a whole bunch of

00:18:39,270 --> 00:18:42,060
stuff

00:18:39,810 --> 00:18:44,070
the one big remaining problem was speed

00:18:42,060 --> 00:18:46,740
on the Raspberry Pi is there's not an

00:18:44,070 --> 00:18:48,450
upstream CPU frequency driver so it's

00:18:46,740 --> 00:18:54,230
running at 600 megahertz not the

00:18:48,450 --> 00:18:57,660
potential 1200 megahertz and yes so and

00:18:54,230 --> 00:19:00,660
that's the case along across a number of

00:18:57,660 --> 00:19:03,540
different stuff if you ship the vendor

00:19:00,660 --> 00:19:07,020
kernel they have some optimizations for

00:19:03,540 --> 00:19:11,100
it and we're shipping the upstream

00:19:07,020 --> 00:19:13,290
kernel and like similarly with the

00:19:11,100 --> 00:19:16,620
vendor drip kernel in some cases you can

00:19:13,290 --> 00:19:19,260
get like the proprietary GPU binaries

00:19:16,620 --> 00:19:22,830
working and obviously that's not stuff

00:19:19,260 --> 00:19:25,950
we're interested in and so like a bunch

00:19:22,830 --> 00:19:27,930
but like so the orange PI stuff for

00:19:25,950 --> 00:19:30,300
example people have told me that

00:19:27,930 --> 00:19:32,490
actually the fedora stuff runs much

00:19:30,300 --> 00:19:34,320
faster than some of the vendor stuff

00:19:32,490 --> 00:19:36,600
because there's been optimizations

00:19:34,320 --> 00:19:39,270
upstream so it swings and roundabouts

00:19:36,600 --> 00:19:40,710
and you know sometimes we're not quite

00:19:39,270 --> 00:19:42,930
as fully featured on some of the devices

00:19:40,710 --> 00:19:47,130
simply because the codes are upstream

00:19:42,930 --> 00:19:49,470
and I don't want to and I don't think

00:19:47,130 --> 00:19:51,600
the rest of the Fedora kernel team wants

00:19:49,470 --> 00:19:53,010
like a million lines of patch code in

00:19:51,600 --> 00:19:56,550
there because that's just not pleasant

00:19:53,010 --> 00:19:58,500
for anyone and so you know there are

00:19:56,550 --> 00:19:59,160
some devices like the orange power stuff

00:19:58,500 --> 00:20:02,520
which at them

00:19:59,160 --> 00:20:05,580
it is great for IOT and servery stuff

00:20:02,520 --> 00:20:07,980
because it doesn't have the display and

00:20:05,580 --> 00:20:10,290
you know people ask me what is the best

00:20:07,980 --> 00:20:12,300
arm device to buy for fedora and the

00:20:10,290 --> 00:20:14,790
first thing I reply is what do you want

00:20:12,300 --> 00:20:16,560
to do with it because obviously

00:20:14,790 --> 00:20:19,050
different tools for different jobs right

00:20:16,560 --> 00:20:23,810
if you want fast Network throughput the

00:20:19,050 --> 00:20:30,170
Raspberry Pi is not it so yeah it's it's

00:20:23,810 --> 00:20:30,170
complex basically any more questions

00:20:31,130 --> 00:20:40,880
cool thank you

00:20:34,310 --> 00:20:40,880

YouTube URL: https://www.youtube.com/watch?v=VLzbUGtWidE


