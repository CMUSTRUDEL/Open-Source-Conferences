Title: Flock 2017 - Let's create tests for modules and containers
Publication date: 2017-10-20
Playlist: Flock 2017
Description: 
	Thursday August 31, 2017 5:00pm - 6:00pm
@Orleans A + B
Talk: Let's create tests for modules and containers
Presenter: Petr Hracek

Description:
Modularity-testing-framework has been designed for testing artifacts like modules, rpm base repos, containers and the others which comes from Modularity team. It helps you to write tests as simply as possible and independent of module type.
Let's write our own tests for modules or containers
Outcome:
* audience knows how to create a test for modules/containers
* audience knows how to test modules/containers
* audience is aware of best practices for creating modules/containers
Description:
* short intro to modularity and modularity-testing-framework
* demonstrate a real module/container
* test it
* ask audience to create a test of their favorite package
* create a new test live
Captions: 
	00:00:00,030 --> 00:00:06,540
well Yun and Peter stop the car sorry

00:00:04,830 --> 00:00:11,250
the unsub comes with the ratchet wheel

00:00:06,540 --> 00:00:16,049
hello resent you Methodist family well

00:00:11,250 --> 00:00:19,770
short intro Google shoe during the let's

00:00:16,049 --> 00:00:23,609
say 10 15 minutes what is about and

00:00:19,770 --> 00:00:28,769
later on we will make a real test and

00:00:23,609 --> 00:00:31,769
show you how does it work what is used

00:00:28,769 --> 00:00:35,000
for the Methodist family is useful for

00:00:31,769 --> 00:00:39,750
testing model RPMs repose containers

00:00:35,000 --> 00:00:43,440
multi who's testing basically MTF is not

00:00:39,750 --> 00:00:45,420
CIA itself this is your job to set up

00:00:43,440 --> 00:00:49,710
your CI server and stuff like that I

00:00:45,420 --> 00:00:56,129
will not talk about future in future

00:00:49,710 --> 00:00:59,520
will be an open shield well Methodist

00:00:56,129 --> 00:01:02,840
family shortly MTF is able to prepare

00:00:59,520 --> 00:01:07,770
environment for your testing for docker

00:01:02,840 --> 00:01:10,530
rpm or n spoon or you are responsible

00:01:07,770 --> 00:01:15,900
for preparing for your environment and

00:01:10,530 --> 00:01:18,659
we will only run the test at the end of

00:01:15,900 --> 00:01:20,580
the present this short presentation we

00:01:18,659 --> 00:01:25,860
will show you where you can download the

00:01:20,580 --> 00:01:28,350
config file and how to test well if you

00:01:25,860 --> 00:01:31,020
would like to test to try to test your

00:01:28,350 --> 00:01:36,119
container image module whatever you want

00:01:31,020 --> 00:01:38,850
then we have a copper repository the

00:01:36,119 --> 00:01:40,979
installations are mentioned there and of

00:01:38,850 --> 00:01:44,220
course the Methodist family is matt is

00:01:40,979 --> 00:01:46,280
part of the fedora but it is a bit

00:01:44,220 --> 00:01:51,560
outdated

00:01:46,280 --> 00:01:55,370
and now how to use the MTF easily first

00:01:51,560 --> 00:01:59,120
of all you would like to prepare to MTF

00:01:55,370 --> 00:02:01,820
or the environment just go model means

00:01:59,120 --> 00:02:04,729
equals doctor means what kind of the

00:02:01,820 --> 00:02:10,070
testing you would like to use and just

00:02:04,729 --> 00:02:14,600
environment you will see in a config

00:02:10,070 --> 00:02:17,660
ammo file there are these sections yeah

00:02:14,600 --> 00:02:20,690
once it is ready prepared for your chest

00:02:17,660 --> 00:02:24,070
income you can run all tests inside the

00:02:20,690 --> 00:02:27,620
container then let's run the test simple

00:02:24,070 --> 00:02:31,340
model which means docker RPM and spoon

00:02:27,620 --> 00:02:35,120
avocado empty of user avocado for later

00:02:31,340 --> 00:02:40,760
on add a test suite and run all Python

00:02:35,120 --> 00:02:43,370
files which contains real tests and at

00:02:40,760 --> 00:02:51,799
the end once which is ready you can only

00:02:43,370 --> 00:02:56,150
clean your environment and that's all if

00:02:51,799 --> 00:02:58,489
you have a prepare your environment like

00:02:56,150 --> 00:03:00,230
you have your docker container model or

00:02:58,489 --> 00:03:04,400
whatever run and you would like to only

00:03:00,230 --> 00:03:08,060
test this kind of just write this

00:03:04,400 --> 00:03:10,280
command easy as possible for you don't

00:03:08,060 --> 00:03:13,690
care about setting stuff and stuff like

00:03:10,280 --> 00:03:13,690
that it's boring

00:03:13,980 --> 00:03:24,580
well this should be a workshop and we

00:03:21,160 --> 00:03:27,670
would like to give you a chance to test

00:03:24,580 --> 00:03:31,989
your own module container whatever you

00:03:27,670 --> 00:03:34,560
want white is called Methodist family I

00:03:31,989 --> 00:03:37,930
forgot to mention at the beginning

00:03:34,560 --> 00:03:40,690
Langdon mentioned that the original name

00:03:37,930 --> 00:03:44,920
was modular - testing framework it was

00:03:40,690 --> 00:03:47,110
fine cool but later on we decided we

00:03:44,920 --> 00:03:48,910
should have a some nice cool name

00:03:47,110 --> 00:03:52,060
which does no bills directly to

00:03:48,910 --> 00:03:54,849
modularity framework and stuff around

00:03:52,060 --> 00:03:57,579
then and first letters should be empty F

00:03:54,849 --> 00:04:00,430
I am proud to have the Methodist family

00:03:57,579 --> 00:04:16,690
and he selected the one I don't know how

00:04:00,430 --> 00:04:21,100
did you get so much empty F the many

00:04:16,690 --> 00:04:24,220
idea - most of it as same abbreviation

00:04:21,100 --> 00:04:29,860
as a similar to testing framework

00:04:24,220 --> 00:04:32,650
because it's begins as a as a framework

00:04:29,860 --> 00:04:35,979
for F for four modules but actually it's

00:04:32,650 --> 00:04:39,639
not directly dependent dependent on

00:04:35,979 --> 00:04:48,720
earth resting of modules and you can

00:04:39,639 --> 00:04:52,660
test Norma artifacts not module one well

00:04:48,720 --> 00:04:59,280
this is important we created each a pad

00:04:52,660 --> 00:04:59,280
for this workshop you can see here only

00:04:59,970 --> 00:05:05,250
well first of all if you would love it

00:05:02,220 --> 00:05:08,520
test if you want to test your container

00:05:05,250 --> 00:05:14,660
model like too much mention no jet for

00:05:08,520 --> 00:05:17,970
example then install wire these commands

00:05:14,660 --> 00:05:21,120
download the config Yama file which I

00:05:17,970 --> 00:05:26,150
will show you means like this where

00:05:21,120 --> 00:05:26,150
again Yama

00:05:27,210 --> 00:05:39,480
where there is mentioned Yama file which

00:05:33,510 --> 00:05:42,180
contains model model and the file for

00:05:39,480 --> 00:05:44,070
this and this structure of these

00:05:42,180 --> 00:05:48,900
document means what packages you need

00:05:44,070 --> 00:05:51,510
and at the end is container which will

00:05:48,900 --> 00:05:54,810
be used for the testing you can have

00:05:51,510 --> 00:05:57,150
either on your local system or on the

00:05:54,810 --> 00:06:02,040
doctor aisle and as you can see there

00:05:57,150 --> 00:06:08,040
are there are Bob Beldon module type one

00:06:02,040 --> 00:06:12,120
is the Curt that's why patricia shown

00:06:08,040 --> 00:06:15,900
there module equal to docker and and

00:06:12,120 --> 00:06:19,110
then it's able to use an RPM or n spawn

00:06:15,900 --> 00:06:21,180
and it's under one section in this far

00:06:19,110 --> 00:06:26,520
because there is no reference actually

00:06:21,180 --> 00:06:29,729
yeah some big one which is which is used

00:06:26,520 --> 00:06:33,540
for our module code and memcache D is

00:06:29,729 --> 00:06:37,650
there it contains how to run the docker

00:06:33,540 --> 00:06:39,410
how to run a container or if you have a

00:06:37,650 --> 00:06:41,900
module how to run the motor

00:06:39,410 --> 00:06:44,540
and stuff all stuff around that and at

00:06:41,900 --> 00:06:46,610
the end there are two possibilities how

00:06:44,540 --> 00:06:50,330
to write a test either directly in the

00:06:46,610 --> 00:06:54,770
Islam of I mentioned what you want to

00:06:50,330 --> 00:06:59,300
test either directly in the container or

00:06:54,770 --> 00:07:01,730
how to test it from the host another

00:06:59,300 --> 00:07:07,820
possibility is to write down your own

00:07:01,730 --> 00:07:12,580
Python files which contains the tests it

00:07:07,820 --> 00:07:15,470
looks like this simple just import

00:07:12,580 --> 00:07:21,140
module testing framework and write

00:07:15,470 --> 00:07:23,390
whatever you want to test okay that's

00:07:21,140 --> 00:07:28,430
all and I will show you how does it work

00:07:23,390 --> 00:07:32,330
in real case well it is good to mention

00:07:28,430 --> 00:07:34,490
that it's possible to use this framework

00:07:32,330 --> 00:07:38,240
for white box testing and also for a

00:07:34,490 --> 00:07:41,180
black box testing so so it depends what

00:07:38,240 --> 00:07:44,090
you prefer for example when there is

00:07:41,180 --> 00:07:48,050
module for base runtime it does not

00:07:44,090 --> 00:07:50,900
provide any functionality outside the

00:07:48,050 --> 00:07:55,730
module and any services so it's possible

00:07:50,900 --> 00:07:56,530
to just just do white box texting vice

00:07:55,730 --> 00:07:59,330
versa

00:07:56,530 --> 00:08:01,700
nincada provides some services on some

00:07:59,330 --> 00:08:05,720
port so you can test it from from an

00:08:01,700 --> 00:08:07,090
outside and look look at it and as a

00:08:05,720 --> 00:08:09,830
black box

00:08:07,090 --> 00:08:15,100
okay I prepared to the directory code

00:08:09,830 --> 00:08:17,720
for 2017 man 15 inside that there is

00:08:15,100 --> 00:08:22,300
config yellow file which was downloaded

00:08:17,720 --> 00:08:22,300
from the section mentioned in each path

00:08:23,069 --> 00:08:33,599
once it is done there is a easy some

00:08:31,319 --> 00:08:39,360
testing some smoke test for demon candy

00:08:33,599 --> 00:08:43,010
whether it works well let's set up the

00:08:39,360 --> 00:08:43,010
environment by a command

00:08:53,050 --> 00:09:02,550
okay set and it should be running on

00:08:58,450 --> 00:09:02,550
Tanner on this ride

00:09:05,610 --> 00:09:13,530
I see the monster it does not run the

00:09:10,830 --> 00:09:17,250
container itself it is done during the

00:09:13,530 --> 00:09:22,200
testing but it prepares our Google

00:09:17,250 --> 00:09:29,510
container from the doctor io up okay

00:09:22,200 --> 00:09:29,510
well let's start with the testing again

00:09:32,240 --> 00:09:44,640
avocado for testing and all fighting

00:09:37,710 --> 00:09:45,480
files nowadays only one and if you don't

00:09:44,640 --> 00:09:51,120
know a Mikado

00:09:45,480 --> 00:09:55,950
it is framework developed chronic bar by

00:09:51,120 --> 00:10:00,720
a red hat as a it should replace auto

00:09:55,950 --> 00:10:03,600
test which is all very big and it's

00:10:00,720 --> 00:10:08,660
based on based on a unit test so the so

00:10:03,600 --> 00:10:13,590
this test looks like a normal unit test

00:10:08,660 --> 00:10:16,890
would you prefer well you see that empty

00:10:13,590 --> 00:10:21,450
yeah that's the main cage the inside the

00:10:16,890 --> 00:10:28,050
container to test passed and that's all

00:10:21,450 --> 00:10:30,569
and at the end once this test go

00:10:28,050 --> 00:10:40,709
for cleaning your environment so that

00:10:30,569 --> 00:10:43,129
you are not lit blue instead yeah and

00:10:40,709 --> 00:10:43,129
it's all

00:10:59,089 --> 00:11:02,089
yeah

00:11:02,140 --> 00:11:09,339
yeah sure yeah perfect laughs light is

00:11:07,300 --> 00:11:11,170
there I give these bows are already

00:11:09,339 --> 00:11:14,290
reported by Slavic cupboard ah

00:11:11,170 --> 00:11:24,550
and in pi PI it is already fixed

00:11:14,290 --> 00:11:27,339
but in rpm note that's all it's really

00:11:24,550 --> 00:11:30,850
for us how to works how it's working and

00:11:27,339 --> 00:11:37,810
now you can just your models of

00:11:30,850 --> 00:11:41,200
containers it's also important testing

00:11:37,810 --> 00:11:43,450
framework agnostic which is part of the

00:11:41,200 --> 00:11:45,100
goal here is that you know kind of just

00:11:43,450 --> 00:11:49,390
gives you a universal way to run the

00:11:45,100 --> 00:11:51,839
tests the instruction and framework on

00:11:49,390 --> 00:11:51,839
the inside

00:11:55,560 --> 00:12:01,499
yeah did you ruin several meetings with

00:11:58,470 --> 00:12:05,939
Steph waters about the CI test and the

00:12:01,499 --> 00:12:10,800
MTF will be one part of the CI the

00:12:05,939 --> 00:12:16,319
central CI so that the two hours ago I

00:12:10,800 --> 00:12:19,740
guess there was a ansible workshop where

00:12:16,319 --> 00:12:22,230
we try to include the movement EFT into

00:12:19,740 --> 00:12:27,180
the CI while ansible

00:12:22,230 --> 00:12:34,939
and it was working and in case you would

00:12:27,180 --> 00:12:39,019
like to do a summers some not simple as

00:12:34,939 --> 00:12:42,149
simple configure more in our guitar

00:12:39,019 --> 00:12:45,959
repository there is documentation and

00:12:42,149 --> 00:12:51,600
there is there is configure more vivid

00:12:45,959 --> 00:12:55,829
vivir commands so it will it will lead

00:12:51,600 --> 00:12:59,879
you to what these sections means and you

00:12:55,829 --> 00:13:06,740
can write whatever you want and use that

00:12:59,879 --> 00:13:14,250
as a source of source or source for your

00:13:06,740 --> 00:13:17,129
other information well of course we are

00:13:14,250 --> 00:13:20,850
trying to provide the users to other who

00:13:17,129 --> 00:13:24,629
tries to use the methodist MTF we have a

00:13:20,850 --> 00:13:27,540
document document where our mentioned

00:13:24,629 --> 00:13:31,500
all steps either for installation or for

00:13:27,540 --> 00:13:33,769
how to use it all api and stuff around

00:13:31,500 --> 00:13:33,769
it

00:13:44,180 --> 00:13:52,019
yeah yeah

00:13:47,699 --> 00:13:53,730
for moodle's the that should be inside

00:13:52,019 --> 00:13:56,100
the discrete modules on his background

00:13:53,730 --> 00:13:59,579
map for containers and should be in the

00:13:56,100 --> 00:14:01,619
docker namespace separately because you

00:13:59,579 --> 00:14:05,579
are testing to clean something different

00:14:01,619 --> 00:14:07,709
and during the pipeline there should be

00:14:05,579 --> 00:14:08,399
something like once the model is

00:14:07,709 --> 00:14:11,189
finished

00:14:08,399 --> 00:14:13,339
it runs the test this is currently

00:14:11,189 --> 00:14:16,829
covered by pass patrol and it is working

00:14:13,339 --> 00:14:20,369
yet once you build we are trying to test

00:14:16,829 --> 00:14:23,759
of course there is no any deeper rule if

00:14:20,369 --> 00:14:27,149
the test fails then dock rebuild should

00:14:23,759 --> 00:14:30,379
not go should not be built but during

00:14:27,149 --> 00:14:35,339
the pipeline this should be covered like

00:14:30,379 --> 00:14:37,559
that mentioned ok it has to pass this

00:14:35,339 --> 00:14:41,100
should not fail and stuff around that

00:14:37,559 --> 00:14:45,240
and once the model is built properly

00:14:41,100 --> 00:14:51,149
that's properly then container can be

00:14:45,240 --> 00:14:56,249
built yeah to be included in our

00:14:51,149 --> 00:14:59,850
framework but you mentioned good

00:14:56,249 --> 00:15:03,629
question and it leads me that that the

00:14:59,850 --> 00:15:06,990
main purpose of this project we're rare

00:15:03,629 --> 00:15:10,589
to have a same way how to test and just

00:15:06,990 --> 00:15:13,290
this separate setup from a tests so

00:15:10,589 --> 00:15:18,709
actualities namespaces for a test is the

00:15:13,290 --> 00:15:22,290
little problem because in Idaho case

00:15:18,709 --> 00:15:25,259
this test book will be same so so WB's

00:15:22,290 --> 00:15:30,269
same copy in this good report for a

00:15:25,259 --> 00:15:33,299
foreign module and same copy or for for

00:15:30,269 --> 00:15:36,269
container and it's not an ideal but it

00:15:33,299 --> 00:15:40,920
will decide it I I were looking forward

00:15:36,269 --> 00:15:44,040
for a test namespace in any degree but

00:15:40,920 --> 00:15:46,440
they were decided that it will didn't it

00:15:44,040 --> 00:16:01,220
will be not there so

00:15:46,440 --> 00:16:04,050
is a little bit pity yeah it makes sense

00:16:01,220 --> 00:16:07,500
from the point of view and ideally we

00:16:04,050 --> 00:16:10,800
can do that by by some some some

00:16:07,500 --> 00:16:13,769
siblings or or maybe uh Nancy Pelosi on

00:16:10,800 --> 00:16:18,540
simply solution that we we will for

00:16:13,769 --> 00:16:23,610
example tell that after container we

00:16:18,540 --> 00:16:29,699
will say in Antep regional file look for

00:16:23,610 --> 00:16:38,610
test in a module directory on a digit so

00:16:29,699 --> 00:16:42,600
it can be solved in that way and and if

00:16:38,610 --> 00:16:47,449
you want to see rows of examples how to

00:16:42,600 --> 00:16:51,240
write tests the that is very very easy

00:16:47,449 --> 00:16:54,720
example directory in this project and

00:16:51,240 --> 00:16:58,040
you can be been inspired by by that like

00:16:54,720 --> 00:16:58,040
how to copy files to the

00:17:01,880 --> 00:17:12,180
ya know yeah yeah there are several ways

00:17:07,560 --> 00:17:15,360
how to cook how to test copy escaping I

00:17:12,180 --> 00:17:28,410
don't know simple test how to skip test

00:17:15,360 --> 00:17:38,580
and you can show ya know nowadays we are

00:17:28,410 --> 00:17:42,380
supporting only fightin and it is

00:17:38,580 --> 00:17:45,330
possible the the problem is that we are

00:17:42,380 --> 00:17:47,850
steam setting up and this environment

00:17:45,330 --> 00:17:53,940
and for example I wrote the help

00:17:47,850 --> 00:17:59,430
refurbish to to 200 this this aspects

00:17:53,940 --> 00:18:01,680
how to get artifacts to test so in case

00:17:59,430 --> 00:18:04,850
you will write something similar to to

00:18:01,680 --> 00:18:08,990
to another language yet then has

00:18:04,850 --> 00:18:12,060
or-or-or it's also possible to use this

00:18:08,990 --> 00:18:15,420
developer and for example if in your

00:18:12,060 --> 00:18:18,270
peripheral pre the language use this

00:18:15,420 --> 00:18:20,430
badge wrapper for these purposes it's

00:18:18,270 --> 00:18:22,800
not it's not clean it's a little bit

00:18:20,430 --> 00:18:26,100
icky but it will work but ultimately

00:18:22,800 --> 00:18:31,770
when if you write a test in back then

00:18:26,100 --> 00:18:34,290
you see only say one test per a whole

00:18:31,770 --> 00:18:37,760
script I don't think that you are you

00:18:34,290 --> 00:18:40,740
are able to track okay there are several

00:18:37,760 --> 00:18:43,050
use cases or several tests like and

00:18:40,740 --> 00:18:46,080
better apartment and therefore we are

00:18:43,050 --> 00:18:49,530
trying to communicate if a CL which uses

00:18:46,080 --> 00:18:52,890
the - yeah you have only two

00:18:49,530 --> 00:18:56,910
possibilities fell or passed but I can

00:18:52,890 --> 00:19:00,480
provide several multi tests we can show

00:18:56,910 --> 00:19:05,010
this this batch test please open that

00:19:00,480 --> 00:19:08,080
you showed us an example directory and I

00:19:05,010 --> 00:19:16,380
am I can describe that

00:19:08,080 --> 00:19:21,340
again so the important is that this test

00:19:16,380 --> 00:19:25,450
there are there is special train board

00:19:21,340 --> 00:19:29,560
actually it named more people come on

00:19:25,450 --> 00:19:32,050
and it's in it does you have to call

00:19:29,560 --> 00:19:35,860
these commands to a set of environment

00:19:32,050 --> 00:19:39,190
and stop a starter starter and then you

00:19:35,860 --> 00:19:42,850
can do whatever you want and you have

00:19:39,190 --> 00:19:44,830
and then you have to tear down it's a

00:19:42,850 --> 00:19:49,390
it's just something to like it just a

00:19:44,830 --> 00:20:00,880
simile from it from a bash to Piper

00:19:49,390 --> 00:20:04,420
calls yeah or run around occur on or

00:20:00,880 --> 00:20:07,240
whatever is there so it is mandatory to

00:20:04,420 --> 00:20:18,160
have this command and then there you can

00:20:07,240 --> 00:20:20,430
do whatever and run come on you can do

00:20:18,160 --> 00:20:20,430
come on

00:20:22,680 --> 00:20:35,260
so but it's a little bit tricky this

00:20:31,210 --> 00:20:41,220
part this better - helper because it's

00:20:35,260 --> 00:20:46,510
it's something like a just a wrapper or

00:20:41,220 --> 00:20:52,590
around around spider fighting things in

00:20:46,510 --> 00:20:56,110
the close future we are planning to test

00:20:52,590 --> 00:20:58,390
container images based on the modules in

00:20:56,110 --> 00:21:02,980
openshift environment because many

00:20:58,390 --> 00:21:05,559
photos okay we have a container one two

00:21:02,980 --> 00:21:07,179
should be connected sharpest volumes and

00:21:05,559 --> 00:21:09,750
we would like to just whether it works

00:21:07,179 --> 00:21:12,370
and OpenShift every move every everybody

00:21:09,750 --> 00:21:15,760
said okay opens it opens it broke it

00:21:12,370 --> 00:21:18,549
over and an th should go with the DL

00:21:15,760 --> 00:21:19,630
babe and in close feature we would like

00:21:18,549 --> 00:21:22,179
to support okay

00:21:19,630 --> 00:21:25,780
you have environment let's test it

00:21:22,179 --> 00:21:31,470
because this is totally different and I

00:21:25,780 --> 00:21:40,330
can show the reason why we we decided to

00:21:31,470 --> 00:21:42,580
to to rename it to family because from

00:21:40,330 --> 00:21:50,169
the point of view there are also

00:21:42,580 --> 00:21:53,500
examples for example for a multi multi

00:21:50,169 --> 00:21:58,650
operations operating system testing then

00:21:53,500 --> 00:22:06,460
you can schedule more machines and and

00:21:58,650 --> 00:22:12,780
and cooperate between them to scroll so

00:22:06,460 --> 00:22:19,510
in it's very simple you just you just

00:22:12,780 --> 00:22:22,410
make these machines give some repose

00:22:19,510 --> 00:22:29,520
there are there are very abrasion over

00:22:22,410 --> 00:22:33,850
of over federal robberies I can provide

00:22:29,520 --> 00:22:37,450
25m 1026 there yeah it's called like

00:22:33,850 --> 00:22:41,799
that and you have to define these these

00:22:37,450 --> 00:22:46,090
ohms setup and teardown sections and

00:22:41,799 --> 00:22:49,299
then you have their one test which start

00:22:46,090 --> 00:22:52,630
these free machines and just just run

00:22:49,299 --> 00:22:56,740
come on there but there could be as

00:22:52,630 --> 00:23:02,470
something more complicated and cooperate

00:22:56,740 --> 00:23:07,600
together and for as a CEO guys

00:23:02,470 --> 00:23:10,020
Weaver all be broad example for a poker

00:23:07,600 --> 00:23:10,020
destiny

00:23:10,100 --> 00:23:21,970
and these tests are not based or

00:23:17,060 --> 00:23:27,650
intended for a containers based based on

00:23:21,970 --> 00:23:32,120
modules but for a few containers and but

00:23:27,650 --> 00:23:34,790
it's it's more or less the same so there

00:23:32,120 --> 00:23:38,750
is some config and there are some simple

00:23:34,790 --> 00:23:41,300
tests and you can run command inside

00:23:38,750 --> 00:23:48,140
these containers or

00:23:41,300 --> 00:23:51,140
as I shown example these various

00:23:48,140 --> 00:23:54,410
versions of odds of a fedora in a in a

00:23:51,140 --> 00:23:58,090
pair in a previous example there there

00:23:54,410 --> 00:24:04,880
is also example for a multi host esteem

00:23:58,090 --> 00:24:09,290
of Dockers so so it's similar in a set

00:24:04,880 --> 00:24:13,390
of section you enables two instances and

00:24:09,290 --> 00:24:17,180
you do an installation of them and then

00:24:13,390 --> 00:24:20,240
then you just the start start these

00:24:17,180 --> 00:24:22,810
containers and for them very very

00:24:20,240 --> 00:24:26,660
important to chain just start action

00:24:22,810 --> 00:24:31,840
what is in a config so so it's but it's

00:24:26,660 --> 00:24:37,250
very simple you just they're ready for a

00:24:31,840 --> 00:24:40,070
predefined the config config for for the

00:24:37,250 --> 00:24:42,290
docker and the technical start for the

00:24:40,070 --> 00:24:47,540
second machine and actually you can see

00:24:42,290 --> 00:24:51,190
that this test test test that that my

00:24:47,540 --> 00:24:57,290
SQL command select one force on a

00:24:51,190 --> 00:24:59,630
default port 3306 and and the second

00:24:57,290 --> 00:25:05,580
command test the second container for

00:24:59,630 --> 00:25:10,860
works on a port three freezes at 0 7 and

00:25:05,580 --> 00:25:15,990
and and but in this case it is important

00:25:10,860 --> 00:25:20,340
then then if you define own setup you

00:25:15,990 --> 00:25:27,570
can you have to call parents atop and

00:25:20,340 --> 00:25:30,780
also important too to call teardown for

00:25:27,570 --> 00:25:34,950
these containers because if you will not

00:25:30,780 --> 00:25:39,650
do that these called containers will not

00:25:34,950 --> 00:25:48,720
be killed so and it will be running and

00:25:39,650 --> 00:25:51,540
in you will try to do or you will be

00:25:48,720 --> 00:25:55,020
debugged in your tests there will be so

00:25:51,540 --> 00:25:57,540
so many containers that sometimes

00:25:55,020 --> 00:26:01,880
sometimes it it killed my company

00:25:57,540 --> 00:26:01,880
computer and then I forgot that

00:26:13,559 --> 00:26:28,799
I think so I think so but I'm not sure

00:26:18,039 --> 00:26:29,950
but it's not you know or framework it's

00:26:28,799 --> 00:26:34,270
kakero

00:26:29,950 --> 00:26:38,100
or maybe in a unit test I'm not sure if

00:26:34,270 --> 00:26:41,740
in this cloud will be enough and anyhow

00:26:38,100 --> 00:26:47,350
and I have built in case the very syntax

00:26:41,740 --> 00:26:51,669
error but but in if yes then yeah

00:26:47,350 --> 00:26:56,620
tyranny theorem is a called in every

00:26:51,669 --> 00:27:06,340
case also in a fellow on that that's why

00:26:56,620 --> 00:27:08,140
we have to edit their clever logic to to

00:27:06,340 --> 00:27:12,130
work around lot of issue for example

00:27:08,140 --> 00:27:15,250
that is unable to stop that so so I try

00:27:12,130 --> 00:27:18,929
to tell terminated blocker or invade

00:27:15,250 --> 00:27:22,470
with already terminated and and similar

00:27:18,929 --> 00:27:22,470
so again

00:27:45,030 --> 00:27:52,960
No

00:27:46,920 --> 00:27:55,390
good point in urine test board word it

00:27:52,960 --> 00:28:01,000
was like that that set up and tear on is

00:27:55,390 --> 00:28:03,430
called before and after each tests so so

00:28:01,000 --> 00:28:07,140
it's everytime cleaner environment but

00:28:03,430 --> 00:28:13,000
there are there are in the documentation

00:28:07,140 --> 00:28:16,330
there are Braille various environment

00:28:13,000 --> 00:28:19,060
variables and it's possible to read if I

00:28:16,330 --> 00:28:23,080
misbehave behavior and for example reuse

00:28:19,060 --> 00:28:26,650
the old container but I don't recommend

00:28:23,080 --> 00:28:28,960
that because the it was that environment

00:28:26,650 --> 00:28:34,240
is not clean and may cause some side

00:28:28,960 --> 00:28:38,650
effects when your tests are in a various

00:28:34,240 --> 00:28:41,620
test set and sequences but this is

00:28:38,650 --> 00:28:44,410
basically used for let's say you have to

00:28:41,620 --> 00:28:46,000
land with several combinations and you

00:28:44,410 --> 00:28:48,880
would like to test whether it works in

00:28:46,000 --> 00:28:50,770
2.4 to the two Postgres several

00:28:48,880 --> 00:28:52,720
combinations and this is you skate when

00:28:50,770 --> 00:28:55,750
you can definitely define one test case

00:28:52,720 --> 00:29:01,090
and run in multiple scenarios this was

00:28:55,750 --> 00:29:03,360
first asked from sss divorce okay it

00:29:01,090 --> 00:29:07,480
means that we are able to schedule

00:29:03,360 --> 00:29:10,390
several metrics and test whether all

00:29:07,480 --> 00:29:16,000
works and if you can imagine you can

00:29:10,390 --> 00:29:24,130
combine in well Federer whatever you

00:29:16,000 --> 00:29:29,640
want also good to mention main purpose

00:29:24,130 --> 00:29:33,580
was to have same tests for these

00:29:29,640 --> 00:29:35,419
artifacts but still is possible for

00:29:33,580 --> 00:29:38,779
example in

00:29:35,419 --> 00:29:41,419
it's it's in this class that they won't

00:29:38,779 --> 00:29:45,470
just look at that container so yeah you

00:29:41,419 --> 00:29:46,909
can drive I your your test classes from

00:29:45,470 --> 00:29:49,070
my container avocado test

00:29:46,909 --> 00:29:51,409
no not from our textbook container and

00:29:49,070 --> 00:29:55,690
it's specified and in case you define

00:29:51,409 --> 00:30:16,580
another another module it will not run

00:29:55,690 --> 00:30:21,679
yeah it will be just just keep this when

00:30:16,580 --> 00:30:37,869
you said little bit tricky but it's it's

00:30:21,679 --> 00:30:44,599
the possible it's it's similar to - I am

00:30:37,869 --> 00:30:47,979
redefining starvation and but in that

00:30:44,599 --> 00:30:52,249
case you can redefine also also a

00:30:47,979 --> 00:30:55,369
container section which leads to war you

00:30:52,249 --> 00:31:01,759
are testings so in case you would rather

00:30:55,369 --> 00:31:05,749
find that but what do you want

00:31:01,759 --> 00:31:09,580
business must be redefined in a set of

00:31:05,749 --> 00:31:13,700
section because the container net name

00:31:09,580 --> 00:31:16,159
name is called or or is used in a in

00:31:13,700 --> 00:31:20,479
this set of functions so it has to be

00:31:16,159 --> 00:31:30,549
here but it's possible but I think or

00:31:20,479 --> 00:31:35,169
mean if we are not not or we know about

00:31:30,549 --> 00:31:38,869
that somebody would like to do that this

00:31:35,169 --> 00:31:42,799
huge orchestration but actually our

00:31:38,869 --> 00:31:44,110
framework it's not fully ready for these

00:31:42,799 --> 00:31:49,720
purposes

00:31:44,110 --> 00:32:08,799
but yeah we will work on that then there

00:31:49,720 --> 00:32:15,039
will be a more time no no no no no it's

00:32:08,799 --> 00:32:18,970
based it's based if if if if somebody

00:32:15,039 --> 00:32:22,299
feel wonders functionality and we can

00:32:18,970 --> 00:32:25,919
add it as soon as possible these there

00:32:22,299 --> 00:32:25,919
will be huge

00:32:26,250 --> 00:32:46,330
no never know but as I said also

00:32:43,899 --> 00:32:49,450
actually it's Millar do this start

00:32:46,330 --> 00:32:53,380
c-section but is it's a key solution so

00:32:49,450 --> 00:32:55,870
so so you know preferred one to use this

00:32:53,380 --> 00:32:57,669
Hecky solution to work around that is

00:32:55,870 --> 00:33:00,610
not implemented there but you are right

00:32:57,669 --> 00:33:03,669
it some some kind of these examples

00:33:00,610 --> 00:33:06,039
should be mentioned in our git repo how

00:33:03,669 --> 00:33:09,490
to set up multiple machine host testing

00:33:06,039 --> 00:33:12,519
how to set up testing with the several

00:33:09,490 --> 00:33:15,549
containers with direct like okay there

00:33:12,519 --> 00:33:18,279
is httpd there is a pair PHP and connect

00:33:15,549 --> 00:33:21,029
yeah this will be nice this is a

00:33:18,279 --> 00:33:25,470
documentation and we don't tell our

00:33:21,029 --> 00:33:25,470
documentation there okay

00:33:27,600 --> 00:33:51,520
any questions or flamewars for today's

00:33:32,890 --> 00:33:56,590
night examples there is lots of examples

00:33:51,520 --> 00:34:03,780
for various releases so so please it is

00:33:56,590 --> 00:34:03,780
that and maybe we can also show you

00:34:04,440 --> 00:34:10,540
CIE natural is what we have it for a

00:34:07,960 --> 00:34:15,940
proper request and and you can see there

00:34:10,540 --> 00:34:17,910
how it works and if it is thought and it

00:34:15,940 --> 00:34:25,110
is really fast

00:34:17,910 --> 00:34:29,200
well as you mentioned as your question

00:34:25,110 --> 00:34:31,930
once the model is built then MTF

00:34:29,200 --> 00:34:37,050
automatically triggers that built and

00:34:31,930 --> 00:34:39,220
runs the test which was written by the

00:34:37,050 --> 00:34:42,460
developer and you can see that for

00:34:39,220 --> 00:34:45,790
example type there is some fighting free

00:34:42,460 --> 00:34:51,430
booster I don't know and you can see

00:34:45,790 --> 00:34:59,010
that what is tested nothing okay

00:34:51,430 --> 00:34:59,010
no there is a module in ok and ok 9 open

00:34:59,190 --> 00:35:09,070
Parral the module is divided from a from

00:35:04,600 --> 00:35:11,230
a test itself so to be clear that for

00:35:09,070 --> 00:35:14,320
example of module does not have any own

00:35:11,230 --> 00:35:17,380
test yeah so this is a good point

00:35:14,320 --> 00:35:20,800
because you can see that this is test

00:35:17,380 --> 00:35:21,680
for module and several tests are skipped

00:35:20,800 --> 00:35:24,590
because

00:35:21,680 --> 00:35:25,340
these are defiling and of course it does

00:35:24,590 --> 00:35:29,360
not make sense

00:35:25,340 --> 00:35:32,390
basically the MTF runs all tests module

00:35:29,360 --> 00:35:34,430
in docker file in and we are not

00:35:32,390 --> 00:35:38,660
selecting extracting what is used for

00:35:34,430 --> 00:35:43,840
each module you can whatever and and and

00:35:38,660 --> 00:35:47,990
we also added support for a compost

00:35:43,840 --> 00:35:50,980
compost test it is the dispersed one and

00:35:47,990 --> 00:35:55,040
nine there is there is

00:35:50,980 --> 00:35:56,930
yeah rpm validation it were another

00:35:55,040 --> 00:36:02,300
project a project I think brought by

00:35:56,930 --> 00:36:07,970
Steven Gallagher and we've they gave to

00:36:02,300 --> 00:36:12,400
our project and we we we run their there

00:36:07,970 --> 00:36:12,400
as a part of this module

00:36:19,880 --> 00:36:33,540
in tasks with Ronnie it has still till

00:36:24,840 --> 00:36:34,710
old name but actually we have three

00:36:33,540 --> 00:36:42,600
troubles we might ask what's wrong

00:36:34,710 --> 00:36:45,480
because there is it should be that slope

00:36:42,600 --> 00:36:48,180
network and so sometimes it's fails

00:36:45,480 --> 00:36:50,730
because it's unable to download packages

00:36:48,180 --> 00:36:55,010
from a koji or sometimes happen that

00:36:50,730 --> 00:36:58,410
it's unable to contact PDC to define

00:36:55,010 --> 00:37:00,510
module dependencies and it will timeout

00:36:58,410 --> 00:37:04,410
and for example here you can see for

00:37:00,510 --> 00:37:07,320
bind module bind command micro DNF

00:37:04,410 --> 00:37:09,390
installed by and fine for some reason I

00:37:07,320 --> 00:37:17,520
think that micro denied should not be

00:37:09,390 --> 00:37:21,110
used there de Neve I guess right I don't

00:37:17,520 --> 00:37:21,110
know what it tells

00:37:25,710 --> 00:37:28,160
yeah

00:37:30,480 --> 00:37:39,339
actually people have shown that that

00:37:35,369 --> 00:37:43,570
diverse some changes avocado and this

00:37:39,339 --> 00:37:48,190
log is not available but it should be an

00:37:43,570 --> 00:37:52,480
in the work work worked well before few

00:37:48,190 --> 00:37:55,619
weeks maybe they they change some

00:37:52,480 --> 00:37:55,619
location of

00:38:02,730 --> 00:38:11,060
okay you're the real test that struggles

00:38:06,869 --> 00:38:11,060
to I exist in module

00:38:15,430 --> 00:38:32,289
and there there is full output or other

00:38:20,079 --> 00:38:35,770
avocado the never pharmacist the so

00:38:32,289 --> 00:38:41,460
change is basically tests whether as to

00:38:35,770 --> 00:38:41,460
I script exist in the model

00:38:48,870 --> 00:39:00,640
and we can show you our automation by a

00:38:57,970 --> 00:39:04,840
trapeze we have to add this at their

00:39:00,640 --> 00:39:11,320
support for Ubuntu Bannister because

00:39:04,840 --> 00:39:14,920
Travis is here you want to based so so

00:39:11,320 --> 00:39:17,950
actually it works and why this test all

00:39:14,920 --> 00:39:21,670
our board West East at least this proper

00:39:17,950 --> 00:39:23,830
section in case you will change it will

00:39:21,670 --> 00:39:28,240
change something in an spawn or rpm

00:39:23,830 --> 00:39:33,130
section it will be not tested be because

00:39:28,240 --> 00:39:39,220
of on these honor Travis there there is

00:39:33,130 --> 00:39:42,040
no no system D it's it's a pundit rusty

00:39:39,220 --> 00:39:47,340
so so we are not able to use and spawn

00:39:42,040 --> 00:39:50,830
containers there for ants Protestant or

00:39:47,340 --> 00:39:56,920
rpms for rpm distinct because there is

00:39:50,830 --> 00:40:01,360
no rpm or DNS but we will report to do

00:39:56,920 --> 00:40:06,910
have a full support for the Debian based

00:40:01,360 --> 00:40:11,860
the distros also for protesting and and

00:40:06,910 --> 00:40:16,870
now there you can see how for example it

00:40:11,860 --> 00:40:20,800
and it can look like it's it will do

00:40:16,870 --> 00:40:24,490
some some installation of dependencies

00:40:20,800 --> 00:40:26,790
these dependencies are are little bit

00:40:24,490 --> 00:40:30,940
[Music]

00:40:26,790 --> 00:40:33,220
or another than then on a fedora so so

00:40:30,940 --> 00:40:38,410
these dependencies are explicitly there

00:40:33,220 --> 00:40:42,970
and and then they I will do a making

00:40:38,410 --> 00:40:46,540
style for a package installation from a

00:40:42,970 --> 00:40:51,250
kid repository and then I just testing

00:40:46,540 --> 00:40:54,609
target for a Travis and there is these

00:40:51,250 --> 00:40:57,580
tests are from a examples from a testing

00:40:54,609 --> 00:41:02,970
testing testing what you will what

00:40:57,580 --> 00:41:06,730
should contain lot of features and and

00:41:02,970 --> 00:41:11,560
examples but we've added at editors so

00:41:06,730 --> 00:41:14,680
there is actually 24 or 24 tests and

00:41:11,560 --> 00:41:16,859
everything passed what is perfect and

00:41:14,680 --> 00:41:16,859
you

00:41:23,510 --> 00:41:37,790
done blending still typing so and and

00:41:33,230 --> 00:41:38,500
although you can see that the test

00:41:37,790 --> 00:41:42,290
passed

00:41:38,500 --> 00:41:45,970
they're very zero error fails and there

00:41:42,290 --> 00:41:49,070
are four skip and to test our consult

00:41:45,970 --> 00:41:53,540
there are two different features how to

00:41:49,070 --> 00:41:59,630
skip or can cancel test and in case you

00:41:53,540 --> 00:42:02,660
four examples decide to skip hot test

00:41:59,630 --> 00:42:05,600
classes you have to skip it in a setup

00:42:02,660 --> 00:42:08,450
function and in this case just is it is

00:42:05,600 --> 00:42:14,270
just one case when teardown will not be

00:42:08,450 --> 00:42:19,700
called in it is based on the definition

00:42:14,270 --> 00:42:23,480
in a Vacarro and the kernel test you can

00:42:19,700 --> 00:42:28,970
decide inside when you are your test is

00:42:23,480 --> 00:42:33,650
running to skip your self and at this

00:42:28,970 --> 00:42:37,300
function and and these tests are mark

00:42:33,650 --> 00:42:37,300
and Adams as a cancel

00:42:40,670 --> 00:42:54,619
do you have any questions to us or you

00:42:43,740 --> 00:43:01,759
can discuss it with a beer so even if

00:42:54,619 --> 00:43:05,400
nobody questions we have a 15 minutes

00:43:01,759 --> 00:43:08,269
and we can stop by recording and do it

00:43:05,400 --> 00:43:08,269
from a flame war

00:43:17,790 --> 00:43:22,100
I mean it's the first frame

00:43:29,920 --> 00:43:51,410
yeah maybe maybe it's also good point

00:43:47,020 --> 00:43:56,630
that was it wasn't my first fault that I

00:43:51,410 --> 00:44:01,430
used wart framework because a lot of

00:43:56,630 --> 00:44:03,590
people hate framework work I I don't

00:44:01,430 --> 00:44:05,390
know why but maybe because all the

00:44:03,590 --> 00:44:08,720
people who's dead in a in a very odd way

00:44:05,390 --> 00:44:12,650
hey yes so from that point of view we

00:44:08,720 --> 00:44:16,510
renamed death to the family because it's

00:44:12,650 --> 00:44:19,760
leads that you can write this for a

00:44:16,510 --> 00:44:34,210
family of your artifact what do you do

00:44:19,760 --> 00:44:39,530
like to test would be to change the CL

00:44:34,210 --> 00:44:44,990
to use our framework because as I

00:44:39,530 --> 00:44:49,010
mentioned before their deaths finished

00:44:44,990 --> 00:44:51,800
with the buff or failed and there I have

00:44:49,010 --> 00:44:54,920
no more tests coward and we would like

00:44:51,800 --> 00:44:57,340
to okay this file this is path and stuff

00:44:54,920 --> 00:44:57,340
like that

00:44:57,590 --> 00:45:04,820
this is our aim

00:44:59,950 --> 00:45:07,850
okay use and we are in progress but the

00:45:04,820 --> 00:45:12,380
folks told us why shall i we write our

00:45:07,850 --> 00:45:15,410
batch scripts to bite and first first of

00:45:12,380 --> 00:45:19,310
all I told ok I don't know but after

00:45:15,410 --> 00:45:21,620
discussion with our team we decide okay

00:45:19,310 --> 00:45:25,190
we have a several possibilities how to

00:45:21,620 --> 00:45:29,690
track the tests not only one script /

00:45:25,190 --> 00:45:35,210
one is still image let's split it two

00:45:29,690 --> 00:45:38,480
more tests so we have to find find more

00:45:35,210 --> 00:45:44,140
benefits for them what will be we can

00:45:38,480 --> 00:45:49,940
provide but actually it's also a big

00:45:44,140 --> 00:45:55,370
idea of acetic water that try to rewrite

00:45:49,940 --> 00:45:57,190
these tests you can have a more more

00:45:55,370 --> 00:46:01,160
test Suites

00:45:57,190 --> 00:46:04,490
written in various ways and it's exactly

00:46:01,160 --> 00:46:07,190
how it works in a cockpit or wine for

00:46:04,490 --> 00:46:09,170
example is there this on simple stands

00:46:07,190 --> 00:46:11,720
conductors rules that you can see do

00:46:09,170 --> 00:46:17,240
whatever you want and however you want

00:46:11,720 --> 00:46:21,620
and and and not be dependent on a server

00:46:17,240 --> 00:46:27,310
writing for example in it worse it was

00:46:21,620 --> 00:46:32,270
also my first experience when I came to

00:46:27,310 --> 00:46:35,780
compete the pit team as a QA that they

00:46:32,270 --> 00:46:42,400
have there to test to it and they were

00:46:35,780 --> 00:46:42,400
written lots of workarounds and

00:46:42,520 --> 00:46:49,850
occasionally things and I wanted to

00:46:46,850 --> 00:46:53,030
reply the death to use for example pure

00:46:49,850 --> 00:46:54,490
pure selenium for a web testing and

00:46:53,030 --> 00:47:00,500
[Music]

00:46:54,490 --> 00:47:05,080
after I rewrite 2 tests it takes a very

00:47:00,500 --> 00:47:07,160
long time because the they was the

00:47:05,080 --> 00:47:10,850
Phantom J as

00:47:07,160 --> 00:47:17,240
directly it's it's come online browser

00:47:10,850 --> 00:47:22,670
or how to say that so I so I decided

00:47:17,240 --> 00:47:28,910
instead it's better but better way is to

00:47:22,670 --> 00:47:33,760
use more mortise to its so there is they

00:47:28,910 --> 00:47:37,130
they they're all old and we did also a

00:47:33,760 --> 00:47:42,020
salon in one and it it provides us a

00:47:37,130 --> 00:47:46,610
more benefits like a some part is tested

00:47:42,020 --> 00:47:52,460
by our well phantomjs browser and and

00:47:46,610 --> 00:47:55,540
proper in and in our test to it there is

00:47:52,460 --> 00:47:59,240
use selenium and we use orbitals by a

00:47:55,540 --> 00:48:03,830
Chrome and Firefox and also it's

00:47:59,240 --> 00:48:18,560
possible to use a Windows Explorer

00:48:03,830 --> 00:48:21,140
browser container images will be based

00:48:18,560 --> 00:48:23,240
on the modules and all will be

00:48:21,140 --> 00:48:27,260
integrated together with factory to the

00:48:23,240 --> 00:48:29,780
routine this is the first time I don't

00:48:27,260 --> 00:48:32,090
know if the first or second but the

00:48:29,780 --> 00:48:36,050
another step is to integrate it or test

00:48:32,090 --> 00:48:37,940
it in the whole project and we will

00:48:36,050 --> 00:48:41,210
write several blog post

00:48:37,940 --> 00:48:44,290
how to use it well let's say we have a

00:48:41,210 --> 00:48:44,290
few back name

00:48:44,680 --> 00:49:09,040
I I will do plucky picture and maybe

00:48:52,780 --> 00:49:24,609
Sophie give us a please go here hmm I'm

00:49:09,040 --> 00:49:29,530
sure my shirt perfect okay thank you

00:49:24,609 --> 00:49:35,099
very much and we are looking for issues

00:49:29,530 --> 00:49:35,099

YouTube URL: https://www.youtube.com/watch?v=ubC4BFEvmaw


