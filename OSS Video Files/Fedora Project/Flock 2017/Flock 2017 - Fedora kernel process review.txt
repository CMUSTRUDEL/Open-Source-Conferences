Title: Flock 2017 - Fedora kernel process review
Publication date: 2017-11-20
Playlist: Flock 2017
Description: 
	Thursday August 31, 2017 2:00pm - 4:00pm
@Cape Cod
Talk: Fedora kernel process review
Presenter: Laura Abbott

Description:
 This is intended to be an interactive session discussing how the Fedora kernel works. Topics of conversation may include:
- A review of kernel configuration options and what Fedora turns on
- What patches Fedora is carrying and if they should go upstream
- Kernel packaging

The outcome should be a better understanding of what is actually supported in the Fedora kernel and what may need to be changed in the future.
Captions: 
	00:00:00,060 --> 00:00:04,290
for those who don't know me I'm Laura

00:00:01,860 --> 00:00:05,759
Abbott I'm one of two Fedora criminal

00:00:04,290 --> 00:00:08,610
maintainers the other being Justin

00:00:05,759 --> 00:00:10,230
Forbes right there we are two full-time

00:00:08,610 --> 00:00:13,620
engineers at Red Hat whose job is to

00:00:10,230 --> 00:00:15,900
maintain the Fedora kernel and this is a

00:00:13,620 --> 00:00:18,390
session I called fedora processor whew

00:00:15,900 --> 00:00:19,710
but I really want I don't have a whole

00:00:18,390 --> 00:00:21,420
lot of content to actually present

00:00:19,710 --> 00:00:23,340
because I was hoping to be able to get

00:00:21,420 --> 00:00:25,199
the purpose here is to get feedback and

00:00:23,340 --> 00:00:29,160
discussion for people who have topics

00:00:25,199 --> 00:00:31,289
they want to discuss so the way I want

00:00:29,160 --> 00:00:33,630
to run the session is to get a list of

00:00:31,289 --> 00:00:35,130
topics and then hopefully and that'd be

00:00:33,630 --> 00:00:37,829
an idea about where we want to want to

00:00:35,130 --> 00:00:39,809
start discussing for the two hours okay

00:00:37,829 --> 00:00:42,110
so who has the topic they would like to

00:00:39,809 --> 00:00:42,110
discuss

00:00:53,820 --> 00:00:57,530
what do you want me to call your topic

00:01:11,430 --> 00:01:19,620
any other one have a topic they'd like

00:01:14,670 --> 00:01:24,810
to discuss don't make me say 9 USB

00:01:19,620 --> 00:01:26,520
webcams I mean the purpose here is also

00:01:24,810 --> 00:01:32,010
to do processing so if there is a way

00:01:26,520 --> 00:01:34,490
that process can non RedHat community

00:01:32,010 --> 00:01:34,490
engagement

00:01:47,159 --> 00:01:52,289
anything else if anybody is new maybe is

00:01:50,280 --> 00:01:54,580
a quick primer on what it is that is

00:01:52,289 --> 00:01:59,180
happening right now

00:01:54,580 --> 00:02:00,470
four wheels okay that's a good one I'll

00:01:59,180 --> 00:02:03,380
probably start with that before we get

00:02:00,470 --> 00:02:05,330
to any of the other topics and then I'm

00:02:03,380 --> 00:02:10,240
curious if the colonel is gonna make use

00:02:05,330 --> 00:02:10,240
of any of ranching

00:02:11,660 --> 00:02:15,580
thank you for actually going to get

00:02:13,040 --> 00:02:17,320
multiple streams

00:02:15,580 --> 00:02:19,920
whether anybody wants to think about

00:02:17,320 --> 00:02:19,920
that or not

00:02:23,049 --> 00:02:30,560
okay this looks like a good set of

00:02:27,109 --> 00:02:33,379
topics so I will start with giving an

00:02:30,560 --> 00:02:38,060
overview of some of the topics about how

00:02:33,379 --> 00:02:41,000
the kernel process works and then we can

00:02:38,060 --> 00:02:43,579
go on to these then I think if there's

00:02:41,000 --> 00:02:45,769
no objections I will just kind of go in

00:02:43,579 --> 00:02:47,870
order here I will probably see if we can

00:02:45,769 --> 00:02:50,299
try and limit discussion on some of

00:02:47,870 --> 00:02:53,090
these two I'd say 20 minutes first and

00:02:50,299 --> 00:02:54,470
then if they're still engagement we can

00:02:53,090 --> 00:02:58,450
get to me can you going to so we don't

00:02:54,470 --> 00:02:58,450
get read hold too much we try and have a

00:02:59,950 --> 00:03:04,689
so I will

00:03:07,060 --> 00:03:10,780
for the people who are watching this

00:03:08,560 --> 00:03:13,990
recording um I'm sorry this may not be a

00:03:10,780 --> 00:03:16,450
great session to try and watch remotely

00:03:13,990 --> 00:03:18,580
just because it's intended to be a

00:03:16,450 --> 00:03:20,110
discussion session if people who are

00:03:18,580 --> 00:03:22,540
trying to talk would like to come up and

00:03:20,110 --> 00:03:23,739
use the microphone we can but I don't

00:03:22,540 --> 00:03:25,540
think this is going to be very

00:03:23,739 --> 00:03:36,459
effectively recorded so I may just give

00:03:25,540 --> 00:03:37,810
up okay so for those who are not

00:03:36,459 --> 00:03:41,290
familiar with the kernel process right

00:03:37,810 --> 00:03:44,170
now we fedora the federal criminals

00:03:41,290 --> 00:03:46,060
essentially like any other Fedora attack

00:03:44,170 --> 00:03:49,180
which is that we use a package get model

00:03:46,060 --> 00:03:51,880
where the package it has a list of

00:03:49,180 --> 00:03:54,610
sourcing and then a series of patches we

00:03:51,880 --> 00:03:56,440
apply on top of that that's the model we

00:03:54,610 --> 00:03:59,290
use versus say having exploded tree

00:03:56,440 --> 00:04:03,010
which has all the source file available

00:03:59,290 --> 00:04:04,870
to build a lot of what Fedora those for

00:04:03,010 --> 00:04:07,050
the kernel is dictated by the way the

00:04:04,870 --> 00:04:09,700
kernel upstream process ends up working

00:04:07,050 --> 00:04:12,070
fedoras goal is to try and stay as close

00:04:09,700 --> 00:04:15,370
to the upstream kernel version as

00:04:12,070 --> 00:04:17,079
possible rawhide is a snapshot of

00:04:15,370 --> 00:04:19,479
Linda's Horrible's master branch

00:04:17,079 --> 00:04:21,400
basically as soon as he patch it pushes

00:04:19,479 --> 00:04:24,010
anything out publicly rawhide we'll be

00:04:21,400 --> 00:04:25,180
giving it within the next day or so so

00:04:24,010 --> 00:04:27,820
if you're running real high you were

00:04:25,180 --> 00:04:31,240
running the very latest kernel throw our

00:04:27,820 --> 00:04:33,910
stapler releases tend to get the last

00:04:31,240 --> 00:04:36,070
stable kernel so for an example the

00:04:33,910 --> 00:04:39,850
current credits in the development cycle

00:04:36,070 --> 00:04:44,650
is 4.13 we are on our c7 that's in

00:04:39,850 --> 00:04:47,740
rawhide Fedora 26 and 25 have the 4.12

00:04:44,650 --> 00:04:49,360
which is considered stable and once 4.13

00:04:47,740 --> 00:04:51,250
is released and it's gone through a

00:04:49,360 --> 00:04:55,050
couple of kernel staple cycles we will

00:04:51,250 --> 00:04:56,970
rebase that - for the Fedora kernels

00:04:55,050 --> 00:05:01,379
leases that generally tends to happen

00:04:56,970 --> 00:05:03,449
after a couple stay places that's the

00:05:01,379 --> 00:05:05,310
gist of it justin is there anything you

00:05:03,449 --> 00:05:09,810
want to chime in about the process a

00:05:05,310 --> 00:05:11,220
couple things one is for when that

00:05:09,810 --> 00:05:15,960
rebate happens a lot of people have

00:05:11,220 --> 00:05:19,610
heard that it is true that we will

00:05:15,960 --> 00:05:22,500
probably never rebase book 4.2 but

00:05:19,610 --> 00:05:24,330
sometimes it's way after we don't have a

00:05:22,500 --> 00:05:26,659
firm policy on there other than we want

00:05:24,330 --> 00:05:30,509
to make sure that it's it's fairly same

00:05:26,659 --> 00:05:32,280
things discussed upstream is not sane

00:05:30,509 --> 00:05:34,289
yet so we pulled out three or done what

00:05:32,280 --> 00:05:37,259
we would have done thought for with 4.12

00:05:34,289 --> 00:05:40,639
and still had a few pretty major issues

00:05:37,259 --> 00:05:40,639
that I guess nobody noticed

00:05:40,889 --> 00:05:47,669
so there's not a firm set the other

00:05:44,819 --> 00:05:52,020
thing is while we are like most packages

00:05:47,669 --> 00:05:54,150
that use sourcing patches and apply

00:05:52,020 --> 00:05:55,680
those things the internal mechanism for

00:05:54,150 --> 00:06:00,449
building the RP and we actually use git

00:05:55,680 --> 00:06:01,800
so the kernel tree is exploded

00:06:00,449 --> 00:06:05,639
they knew get tree and then patches

00:06:01,800 --> 00:06:08,309
write it on top of that it's helpful

00:06:05,639 --> 00:06:09,509
with a number of things but the reason

00:06:08,309 --> 00:06:12,240
that it's important that everybody know

00:06:09,509 --> 00:06:13,379
this is if you submit a patch that patch

00:06:12,240 --> 00:06:15,900
needs to be something that'll actually

00:06:13,379 --> 00:06:18,110
apply with Gideon if it doesn't apply

00:06:15,900 --> 00:06:21,469
with Gideon because it's missing

00:06:18,110 --> 00:06:21,469
standard headers

00:06:24,050 --> 00:06:30,440
we have you have to go back and fix it

00:06:27,880 --> 00:06:32,590
what happens when I actually open it I

00:06:30,440 --> 00:06:34,700
was a support word like if I open above

00:06:32,590 --> 00:06:37,750
take me through the process of how that

00:06:34,700 --> 00:06:37,750
dog actually gets fixed

00:06:39,520 --> 00:06:45,910
okay I'll start with this um

00:06:42,310 --> 00:06:48,460
it really depends on what kind of bug is

00:06:45,910 --> 00:06:50,650
out there generally if it's something

00:06:48,460 --> 00:06:51,820
that I know how to fix or I think I have

00:06:50,650 --> 00:06:53,410
a reasonable attempt at knowing how to

00:06:51,820 --> 00:06:55,750
fix I will take an effort

00:06:53,410 --> 00:06:57,160
look the bug see if it's something that

00:06:55,750 --> 00:06:58,870
has been fixed up stream already and if

00:06:57,160 --> 00:07:02,920
it is great that's made by day a lot

00:06:58,870 --> 00:07:05,410
easier and I will be able to pull it in

00:07:02,920 --> 00:07:07,900
but a lot of what we do sometimes is

00:07:05,410 --> 00:07:09,820
trying to figure out is this what I call

00:07:07,900 --> 00:07:11,860
it like those Hardware independent or is

00:07:09,820 --> 00:07:13,660
it Hardware specific problems just

00:07:11,860 --> 00:07:16,150
because we're specific problems tend to

00:07:13,660 --> 00:07:18,280
be much more difficult to try and debug

00:07:16,150 --> 00:07:19,630
unless I either have knowledge about

00:07:18,280 --> 00:07:21,600
what might be going wrong with the

00:07:19,630 --> 00:07:25,690
hardware or I have the hardware itself

00:07:21,600 --> 00:07:27,460
software independent bugs are Hardware

00:07:25,690 --> 00:07:28,990
dependent bugs are much easier to deal

00:07:27,460 --> 00:07:33,280
with if I can just get a specific test

00:07:28,990 --> 00:07:35,440
case it also depends on what kind of

00:07:33,280 --> 00:07:38,950
test case or a reproducer there actually

00:07:35,440 --> 00:07:42,490
is if there is a nice concrete say

00:07:38,950 --> 00:07:44,320
script or program to run that

00:07:42,490 --> 00:07:49,150
demonstrates a problem that also makes a

00:07:44,320 --> 00:07:51,850
lot easier to things so that's roughly

00:07:49,150 --> 00:07:53,410
what I try and figure out um suspend

00:07:51,850 --> 00:07:54,760
resume bugs unfortunately a lot of time

00:07:53,410 --> 00:07:58,150
to stir a pretty popular tend to be

00:07:54,760 --> 00:08:00,370
hardware specific so those tend to get

00:07:58,150 --> 00:08:02,110
left to the side I always try and tell

00:08:00,370 --> 00:08:03,940
people if you can have a looking at

00:08:02,110 --> 00:08:06,130
non-working kernel and you can run git

00:08:03,940 --> 00:08:08,050
bisect to try and find commit that is

00:08:06,130 --> 00:08:09,640
incredibly helpful just be able to point

00:08:08,050 --> 00:08:12,490
to a specific commit you need to report

00:08:09,640 --> 00:08:14,680
that to upstream or try and look at it

00:08:12,490 --> 00:08:17,700
you're yourself is a great starting

00:08:14,680 --> 00:08:17,700
point to be able to get things fixed

00:08:19,720 --> 00:08:25,840
um either if I always encourage any

00:08:24,310 --> 00:08:27,520
Fedora community member who wants to

00:08:25,840 --> 00:08:29,940
report it upstream directly to go ahead

00:08:27,520 --> 00:08:32,919
and interact with the chrome community

00:08:29,940 --> 00:08:35,140
the kurma community has been not always

00:08:32,919 --> 00:08:37,539
known to be the most welcoming but I

00:08:35,140 --> 00:08:39,130
still encourage people who decide if

00:08:37,539 --> 00:08:42,760
they choose to want to interact from

00:08:39,130 --> 00:08:45,220
community to interact with it it may in

00:08:42,760 --> 00:08:48,550
fact go better for them than they expect

00:08:45,220 --> 00:08:50,320
so that or if for whatever reason

00:08:48,550 --> 00:08:51,610
someone just had the time or the

00:08:50,320 --> 00:09:02,230
experience one to do that we can report

00:08:51,610 --> 00:09:04,270
the book yes and yes that is a good

00:09:02,230 --> 00:09:06,010
point and one reason why I don't always

00:09:04,270 --> 00:09:06,970
like trying to report the bugs upstairs

00:09:06,010 --> 00:09:08,710
because it does feel like I'm just

00:09:06,970 --> 00:09:09,970
playing man in the middle in terms of

00:09:08,710 --> 00:09:18,040
trying to get reports and things like

00:09:09,970 --> 00:09:20,500
that sand and we have there is a process

00:09:18,040 --> 00:09:23,460
of prioritizing this is something that

00:09:20,500 --> 00:09:23,460
really needs to be addressed

00:09:25,629 --> 00:09:31,870
this is affecting one either that it's

00:09:29,560 --> 00:09:35,250
not critical sounds not working right or

00:09:31,870 --> 00:09:35,250
something that it will get

00:09:42,760 --> 00:09:46,510
I'm also curious I know it's just a pee

00:09:44,860 --> 00:09:47,949
but this is gonna sound like a loaded or

00:09:46,510 --> 00:09:49,240
angry question I don't mean it that way

00:09:47,949 --> 00:09:52,420
at all I mean this very introspective

00:09:49,240 --> 00:09:54,550
lis what do you to consider this is just

00:09:52,420 --> 00:09:58,510
the two of you or a very fast-moving

00:09:54,550 --> 00:10:00,370
distro what do you consider doing a good

00:09:58,510 --> 00:10:02,860
job like what does that mean to you -

00:10:00,370 --> 00:10:09,389
they're probably different than the rest

00:10:02,860 --> 00:10:12,550
of the packagers well I'd probably say

00:10:09,389 --> 00:10:15,610
getting out getting at a release that

00:10:12,550 --> 00:10:17,579
I'd probably say is booting on on

00:10:15,610 --> 00:10:19,750
everything is at least a good pretty

00:10:17,579 --> 00:10:21,459
starting point this is seems like a low

00:10:19,750 --> 00:10:24,850
bar but there are some ones that will

00:10:21,459 --> 00:10:29,139
not be able to boot up at watch so I'd

00:10:24,850 --> 00:10:31,149
like to see that and then I my hope

00:10:29,139 --> 00:10:35,649
would be is is that success would be on

00:10:31,149 --> 00:10:37,870
classes of common hardware so the most

00:10:35,649 --> 00:10:40,269
popular laptops the most popular servers

00:10:37,870 --> 00:10:44,470
and things like that if that's those are

00:10:40,269 --> 00:10:46,209
working effectively then I think that's

00:10:44,470 --> 00:10:47,470
a good notion of success because the

00:10:46,209 --> 00:10:50,110
problem is is that there are two of us

00:10:47,470 --> 00:10:54,410
and we can't support every weird quirky

00:10:50,110 --> 00:10:58,100
setup so yeah so

00:10:54,410 --> 00:11:00,019
I so there's been some focus on trying

00:10:58,100 --> 00:11:03,199
to make laptops works well and I think

00:11:00,019 --> 00:11:06,050
that's really what I think is a good

00:11:03,199 --> 00:11:08,060
measure of success is that for the

00:11:06,050 --> 00:11:09,800
common Hardware out there that people

00:11:08,060 --> 00:11:23,540
actually want to run is fedor running

00:11:09,800 --> 00:11:25,040
well making sure that as we push we do

00:11:23,540 --> 00:11:27,050
put enough bugs because that's what I

00:11:25,040 --> 00:11:29,120
mean it happens every time three bases

00:11:27,050 --> 00:11:33,740
but making sure that we are not pushing

00:11:29,120 --> 00:11:35,569
out major regressions but that's the

00:11:33,740 --> 00:11:37,519
racket of software demos we create the

00:11:35,569 --> 00:11:44,089
bugs and in charge people that have been

00:11:37,519 --> 00:11:46,970
fixed so I think that's probably a

00:11:44,089 --> 00:11:48,829
general overview of the kernel process

00:11:46,970 --> 00:11:51,579
there's nothing else major I'd like to

00:11:48,829 --> 00:11:51,579
move on to topics

00:11:56,140 --> 00:12:03,700
that's a good question the Fedora

00:12:00,730 --> 00:12:05,320
Colonel just carry tries to minimize the

00:12:03,700 --> 00:12:07,690
number of patches we carry on top of it

00:12:05,320 --> 00:12:11,860
usually the patches we tend to carry are

00:12:07,690 --> 00:12:13,120
a lot of what I think of our quirks to

00:12:11,860 --> 00:12:15,210
try and make things a little bit better

00:12:13,120 --> 00:12:17,920
that maybe upstream doesn't care about

00:12:15,210 --> 00:12:20,490
we do carry some large out of three

00:12:17,920 --> 00:12:22,750
patch apps currently the biggest one is

00:12:20,490 --> 00:12:25,120
secure boot although we are making

00:12:22,750 --> 00:12:27,220
progress to it get part of that in when

00:12:25,120 --> 00:12:30,160
armed 64 does not yet have a CPI support

00:12:27,220 --> 00:12:32,560
we were carrying that out of tree so I

00:12:30,160 --> 00:12:35,890
like to think of at the core level

00:12:32,560 --> 00:12:37,210
Fedora is very similar enough to

00:12:35,890 --> 00:12:38,920
upstream that you should be that we

00:12:37,210 --> 00:12:41,800
almost always report bugs and they are

00:12:38,920 --> 00:12:44,290
irrelevant to exactly what is up there

00:12:41,800 --> 00:12:45,790
but we're all and the other thing is

00:12:44,290 --> 00:12:47,680
that we hope that the patches that we do

00:12:45,790 --> 00:12:49,240
have tend to be short-lived at least

00:12:47,680 --> 00:12:50,860
there's a lot of churn where say someone

00:12:49,240 --> 00:12:52,480
points out a bug and says this is

00:12:50,860 --> 00:12:54,160
there's been a fixture upstream can you

00:12:52,480 --> 00:12:56,020
bring this in we bring it in and then

00:12:54,160 --> 00:12:59,580
maybe it drops out when it comes in with

00:12:56,020 --> 00:12:59,580
the next step what you do

00:13:00,040 --> 00:13:09,950
1:56 yeah the girl doesn't know and

00:13:05,360 --> 00:13:11,210
really you have like the the arm 64

00:13:09,950 --> 00:13:14,180
stuff is moving really quick right now

00:13:11,210 --> 00:13:15,320
for unable things like that so a lot of

00:13:14,180 --> 00:13:17,690
times there are several patches that are

00:13:15,320 --> 00:13:19,370
grouped together in one patch there but

00:13:17,690 --> 00:13:24,130
it seems that pretty much every rebase

00:13:19,370 --> 00:13:24,130
as many as many leave as are coming

00:13:28,559 --> 00:13:44,829
okay it's the people who use it

00:13:41,829 --> 00:13:48,489
it's ET spy I'd say a handful of people

00:13:44,829 --> 00:13:52,389
who steadily use it we are not seeing a

00:13:48,489 --> 00:13:56,169
lot of new uses of it I would say as far

00:13:52,389 --> 00:14:01,529
as actual numbers go it's hard to say

00:13:56,169 --> 00:14:05,189
yeah from what we've heard the check-ins

00:14:01,529 --> 00:14:08,739
is the largest number of check-ins on

00:14:05,189 --> 00:14:10,149
i-35 686 is actually very old

00:14:08,739 --> 00:14:12,160
unsupported police's at this point

00:14:10,149 --> 00:14:13,660
they're still running them and they're

00:14:12,160 --> 00:14:15,999
still hitting repos because the

00:14:13,660 --> 00:14:17,589
automated process right sees if there

00:14:15,999 --> 00:14:19,419
are updates but they're not there there

00:14:17,589 --> 00:14:24,160
are users and there are some very vocal

00:14:19,419 --> 00:14:28,949
users but it's I would say it's probably

00:14:24,160 --> 00:14:28,949
a very small certainly not on the scale

00:14:29,810 --> 00:14:34,560
Karma's more it's much bigger arm is

00:14:32,880 --> 00:14:36,870
harder to measure though because of the

00:14:34,560 --> 00:14:38,580
types of devices those are here you've

00:14:36,870 --> 00:14:40,830
got all these little arm boards like a

00:14:38,580 --> 00:14:42,810
Raspberry Pi or whatever the year you

00:14:40,830 --> 00:14:44,430
know I've got three of them in my house

00:14:42,810 --> 00:14:46,410
that are running music servers they

00:14:44,430 --> 00:14:48,029
don't update they don't check in they

00:14:46,410 --> 00:14:50,910
don't update because they're not

00:14:48,029 --> 00:14:53,550
connected and they're only connected

00:14:50,910 --> 00:14:54,990
internally and there's no reason to do

00:14:53,550 --> 00:14:57,500
anything until I'm ready to reduce them

00:14:54,990 --> 00:14:57,500
to something else

00:15:01,130 --> 00:15:04,420
however the config

00:15:05,520 --> 00:15:11,370
we're actually gonna spend some time

00:15:07,230 --> 00:15:13,650
talking talking about that but the short

00:15:11,370 --> 00:15:16,710
answer is is that we make a best guess

00:15:13,650 --> 00:15:19,020
effort when new options come in and we

00:15:16,710 --> 00:15:20,550
set them a lot of the options have been

00:15:19,020 --> 00:15:22,860
set have basically been sent there since

00:15:20,550 --> 00:15:24,600
they first came in so many kernels ago

00:15:22,860 --> 00:15:26,880
they have not really been reviewed and

00:15:24,600 --> 00:15:28,770
one thing things dogs time to talk about

00:15:26,880 --> 00:15:31,620
is that what we're looking to try and do

00:15:28,770 --> 00:15:33,210
to hopefully improve some of the cycle

00:15:31,620 --> 00:15:34,620
about that hopefully maybe get a little

00:15:33,210 --> 00:15:37,370
bit more review for people to care about

00:15:34,620 --> 00:15:40,440
if you have an interest in any sort of

00:15:37,370 --> 00:15:43,470
concurrency being turned on or off or

00:15:40,440 --> 00:15:46,830
adjusted feel free to file a bug gazella

00:15:43,470 --> 00:15:48,300
chances are if it's if we may not know

00:15:46,830 --> 00:15:50,160
why it's set but he can come up with a

00:15:48,300 --> 00:15:53,900
good argument why'd she be set one way

00:15:50,160 --> 00:15:53,900
versus the other we're happy to set it

00:15:56,040 --> 00:16:00,560
there let me do we do have people

00:15:57,810 --> 00:16:02,490
occasionally say can you enable this and

00:16:00,560 --> 00:16:03,690
there was a valid reason for not

00:16:02,490 --> 00:16:05,009
enabling every waking minute was

00:16:03,690 --> 00:16:10,050
something that either came in through

00:16:05,009 --> 00:16:11,910
staging or came in as unstable or

00:16:10,050 --> 00:16:14,279
experimental and it wasn't turned on and

00:16:11,910 --> 00:16:16,170
then when it became stable supported we

00:16:14,279 --> 00:16:17,790
never revisited that because it doesn't

00:16:16,170 --> 00:16:21,139
show if there's a new option and

00:16:17,790 --> 00:16:21,139
nobody's asked for it so

00:16:25,320 --> 00:16:29,820
you want to go ahead and talk about

00:16:27,430 --> 00:16:29,820
yourself

00:16:38,720 --> 00:16:42,709
well my name is Danza kiss and right had

00:16:41,509 --> 00:16:44,870
him a kernel engineer for those don't

00:16:42,709 --> 00:16:48,259
know me I do recognized that half the

00:16:44,870 --> 00:16:50,329
people through one of topics I want to

00:16:48,259 --> 00:16:52,310
talk about today it was Colonel testing

00:16:50,329 --> 00:16:55,750
one of the new initiatives we're doing

00:16:52,310 --> 00:16:59,019
at Red Hat with atomic code Fedor host

00:16:55,750 --> 00:17:01,370
nor atomic host that fast-moving host

00:16:59,019 --> 00:17:02,569
initiatives is the Colonel's gonna be

00:17:01,370 --> 00:17:04,730
moving a lot faster we want to make sure

00:17:02,569 --> 00:17:05,870
these things are stable so one of the

00:17:04,730 --> 00:17:09,350
things we want to at red head is that

00:17:05,870 --> 00:17:11,449
provide a lot of our kernel testing for

00:17:09,350 --> 00:17:13,100
fedora ideas they kind of help stabilize

00:17:11,449 --> 00:17:15,890
fedora to support this initiative this

00:17:13,100 --> 00:17:17,600
project so Red Hat and you probably know

00:17:15,890 --> 00:17:19,280
we've had for years a lot of testing

00:17:17,600 --> 00:17:21,919
internal testing that we put on the way

00:17:19,280 --> 00:17:23,360
for the well Colonel T produced we want

00:17:21,919 --> 00:17:26,000
to start moving that some that feet in

00:17:23,360 --> 00:17:28,400
the public arena start testing that on

00:17:26,000 --> 00:17:36,890
the Fedora kernels and provide some

00:17:28,400 --> 00:17:38,450
value and community service back go even

00:17:36,890 --> 00:17:42,799
further to help support it we were

00:17:38,450 --> 00:17:45,289
looking to do mimic with the Intel

00:17:42,799 --> 00:17:48,890
buildbot does those who aren't familiar

00:17:45,289 --> 00:17:50,450
with it let us come and list it don't

00:17:48,890 --> 00:17:52,159
host it patch within four hours until

00:17:50,450 --> 00:17:53,929
it's got a machine that goes and nature

00:17:52,159 --> 00:17:55,429
patch builds it and tells you if it

00:17:53,929 --> 00:17:56,690
builds popular in a variety of

00:17:55,429 --> 00:17:59,240
configurations we're looking to do

00:17:56,690 --> 00:18:02,429
something similar with patches will test

00:17:59,240 --> 00:18:04,980
them internally on our machines

00:18:02,429 --> 00:18:09,179
tell you these patches at least

00:18:04,980 --> 00:18:10,470
satisfied how we configure our kernel

00:18:09,179 --> 00:18:12,240
and provide and let the community

00:18:10,470 --> 00:18:13,529
hopefully fix those bugs early on rather

00:18:12,240 --> 00:18:15,389
than having trickle down to the door and

00:18:13,529 --> 00:18:15,929
haven't get filed in language for a

00:18:15,389 --> 00:18:18,869
while

00:18:15,929 --> 00:18:21,480
you think this we help stabilize the

00:18:18,869 --> 00:18:22,139
door colonel a lot better than they are

00:18:21,480 --> 00:18:27,200
today

00:18:22,139 --> 00:18:27,200
and provide is amassed and value add to

00:18:29,050 --> 00:18:35,530
so one of the project we did kick off

00:18:31,650 --> 00:18:37,000
the put on for sure it's called SKT I

00:18:35,530 --> 00:18:38,290
don't have a way to really write down

00:18:37,000 --> 00:18:42,940
that length but I'm for sure about I oh

00:18:38,290 --> 00:18:46,330
I guess there's is a thesis SKT is a

00:18:42,940 --> 00:18:47,950
project named sonic Colonel testing is

00:18:46,330 --> 00:18:50,440
worth calling it and you should feel

00:18:47,950 --> 00:18:52,450
that it's it's very early in its

00:18:50,440 --> 00:18:54,790
prototype but I do it's gonna go take my

00:18:52,450 --> 00:18:57,010
mailing list build kernels and test them

00:18:54,790 --> 00:18:58,330
and then report the results back one day

00:18:57,010 --> 00:19:01,630
so that's one of things we're hoping to

00:18:58,330 --> 00:19:03,370
do and open the community see some value

00:19:01,630 --> 00:19:05,940
there and with our testing efforts will

00:19:03,370 --> 00:19:09,010
combine with Jeff's Justin's work we can

00:19:05,940 --> 00:19:10,930
maybe get more engagement from the

00:19:09,010 --> 00:19:13,860
community to help run some these tests

00:19:10,930 --> 00:19:18,710
on their machines in happen

00:19:13,860 --> 00:19:18,710
it's just a figure Donald /sk TV

00:19:23,210 --> 00:19:28,940
and I think it's gentleman over here us

00:19:26,360 --> 00:19:31,340
a question about configs one of the

00:19:28,940 --> 00:19:32,570
things that you know fedora Justin and

00:19:31,340 --> 00:19:33,740
Laura are kind of overwhelmed with

00:19:32,570 --> 00:19:35,120
somebody's config sometimes a lot of

00:19:33,740 --> 00:19:39,200
times it's the best effort on the

00:19:35,120 --> 00:19:40,700
initial day then later on with community

00:19:39,200 --> 00:19:42,740
compliance and we need this driver we do

00:19:40,700 --> 00:19:44,240
this feature enabled they'll ask for it

00:19:42,740 --> 00:19:45,950
so one of the things we're trying to

00:19:44,240 --> 00:19:47,360
work on is having you know right that

00:19:45,950 --> 00:19:49,790
engineers get engaged in some these

00:19:47,360 --> 00:19:50,870
configs and say hey you know what from

00:19:49,790 --> 00:19:53,150
our experience we've learned these

00:19:50,870 --> 00:19:57,020
config options if you tweak them this

00:19:53,150 --> 00:19:58,490
setting you get better value better this

00:19:57,020 --> 00:20:01,820
feature is interesting you community

00:19:58,490 --> 00:20:03,140
public wants is these settings are pilot

00:20:01,820 --> 00:20:04,460
lot better if a community community one

00:20:03,140 --> 00:20:06,800
so we're going to start hopefully

00:20:04,460 --> 00:20:08,000
providing value there and adding doing

00:20:06,800 --> 00:20:11,260
our internal review and providing

00:20:08,000 --> 00:20:13,970
suggestions to fit our community and

00:20:11,260 --> 00:20:15,440
hopefully they see value there and

00:20:13,970 --> 00:20:19,010
accepting other we can have a

00:20:15,440 --> 00:20:20,450
conversation about that so we're hoping

00:20:19,010 --> 00:20:23,450
to helping you know kind of offload some

00:20:20,450 --> 00:20:26,450
that burden off just a Laurie

00:20:23,450 --> 00:20:26,450
folks

00:20:27,690 --> 00:20:34,809
that covers my wife any thoughts

00:20:32,020 --> 00:20:38,830
at the next phase of

00:20:34,809 --> 00:20:40,690
Espie people advising okay so our SKT

00:20:38,830 --> 00:20:42,809
project right now is pretty simple it

00:20:40,690 --> 00:20:46,090
just kind of takes kernels builds it

00:20:42,809 --> 00:20:49,149
internally it runs a test suite on them

00:20:46,090 --> 00:20:50,740
on our machines and of course then if

00:20:49,149 --> 00:20:54,700
the test fails when the value-add is

00:20:50,740 --> 00:20:56,289
provide an email feedback to curl or not

00:20:54,700 --> 00:20:57,669
those guys you know they've heard the

00:20:56,289 --> 00:20:59,440
tests we had there's a failure

00:20:57,669 --> 00:21:00,970
do you guys help fix it and ideas if you

00:20:59,440 --> 00:21:04,059
get it early enough people posted patch

00:21:00,970 --> 00:21:07,389
can respond appropriately this failure

00:21:04,059 --> 00:21:09,159
feedback only works if you can kind of

00:21:07,389 --> 00:21:12,700
it works great in the patch per level

00:21:09,159 --> 00:21:15,549
but if you're doing on a like a Elena's

00:21:12,700 --> 00:21:17,139
kernel get tree sometimes you need to do

00:21:15,549 --> 00:21:18,759
a bisect on there you go - that's our

00:21:17,139 --> 00:21:20,740
five second patches automatic that we're

00:21:18,759 --> 00:21:21,820
looking at that logic and sqg to help

00:21:20,740 --> 00:21:25,299
with the failure case we've been there

00:21:21,820 --> 00:21:27,519
down commit responding properly so it

00:21:25,299 --> 00:21:29,350
really helps engage the kernel.org folks

00:21:27,519 --> 00:21:31,210
to say hey look okay this exact commit

00:21:29,350 --> 00:21:33,789
hers the test is failing okay with a

00:21:31,210 --> 00:21:37,200
lodge good think about what long produce

00:21:33,789 --> 00:21:37,200
who said correct

00:21:37,300 --> 00:21:40,230
I figure

00:21:42,649 --> 00:21:55,619
open QAF I think it's same thing except

00:21:53,489 --> 00:21:57,899
that we're using Red Hat resources he's

00:21:55,619 --> 00:22:02,070
using for the resources we have to have

00:21:57,899 --> 00:22:14,940
that conversation with him to different

00:22:02,070 --> 00:22:17,249
efforts just talking to here it sounds

00:22:14,940 --> 00:22:18,839
like we can integrate all of this and -

00:22:17,249 --> 00:22:35,579
so they're complementary to each other

00:22:18,839 --> 00:22:37,200
I'm sure we can yeah well I mean if you

00:22:35,579 --> 00:22:40,049
obviously understand what what hardware

00:22:37,200 --> 00:22:42,839
Red Hat has so if you want folks like

00:22:40,049 --> 00:22:45,509
Adam to participate and run you on

00:22:42,839 --> 00:22:50,879
public hardware it's probably a good

00:22:45,509 --> 00:22:53,779
question today I have another

00:22:50,879 --> 00:22:53,779
conversation with him

00:22:56,509 --> 00:23:00,989
so was take a step back through running

00:22:59,369 --> 00:23:03,690
a test where we're doing and SKT is

00:23:00,989 --> 00:23:06,690
gonna do on you know capturing upstream

00:23:03,690 --> 00:23:08,039
Colonel like net necks or maybe it's

00:23:06,690 --> 00:23:10,559
analyzed history so we're catching

00:23:08,039 --> 00:23:13,349
different get trees there and then

00:23:10,559 --> 00:23:15,659
running tests whereas open QA maybe

00:23:13,349 --> 00:23:17,549
taking a standard red hat or Fedora rpm

00:23:15,659 --> 00:23:19,619
and running tests on there so a

00:23:17,549 --> 00:23:21,329
day-to-day we're building something and

00:23:19,619 --> 00:23:23,609
running a test on there and that might

00:23:21,329 --> 00:23:26,100
be running a similar test on a standard

00:23:23,609 --> 00:23:29,100
Fedora rpm so you may never

00:23:26,100 --> 00:23:31,530
come around to running SKT but maybe

00:23:29,100 --> 00:23:34,400
I've had a conversation it might might

00:23:31,530 --> 00:23:34,400
make sense in his work

00:23:44,610 --> 00:23:49,190
so on they need to be available

00:23:50,010 --> 00:23:53,730
right so that will make it probably a

00:23:52,290 --> 00:23:56,030
slightly different subset of testing

00:23:53,730 --> 00:23:58,010
also the hardware

00:23:56,030 --> 00:24:01,910
well then there's a different way of

00:23:58,010 --> 00:24:05,650
seeing it is also that if we do gate for

00:24:01,910 --> 00:24:13,250
example every time you rebase we take a

00:24:05,650 --> 00:24:15,380
large test suite and say no that's not

00:24:13,250 --> 00:24:17,960
it's gonna be right but it's not gonna

00:24:15,380 --> 00:24:20,120
be productive so by going all the way up

00:24:17,960 --> 00:24:21,500
straight we actually give the feedback

00:24:20,120 --> 00:24:24,260
to the people who could take action

00:24:21,500 --> 00:24:25,670
that's almost a prerequisite so then

00:24:24,260 --> 00:24:27,800
maybe even using exactly the same

00:24:25,670 --> 00:24:30,380
testament to get ourselves further

00:24:27,800 --> 00:24:38,390
downstream where hope by that point

00:24:30,380 --> 00:24:40,760
we'll have less to deal with yeah and we

00:24:38,390 --> 00:24:44,330
do end up with cases where sometimes we

00:24:40,760 --> 00:24:46,280
do have to push something like the 4 12

00:24:44,330 --> 00:24:49,190
5 update with a different way first

00:24:46,280 --> 00:24:50,870
filing for 12 or nobody hit apparently

00:24:49,190 --> 00:24:52,820
nobody's been testing because there were

00:24:50,870 --> 00:24:55,160
some pretty major issues that nobody

00:24:52,820 --> 00:24:58,380
didn't notice and

00:24:55,160 --> 00:25:01,800
within by the time I got the first round

00:24:58,380 --> 00:25:03,300
of those fix and I was putting four four

00:25:01,800 --> 00:25:05,100
five out there we had to push that

00:25:03,300 --> 00:25:06,840
because there were security fixes in

00:25:05,100 --> 00:25:09,480
there that were actually really critical

00:25:06,840 --> 00:25:11,400
so qxl is still broken there's a

00:25:09,480 --> 00:25:13,830
workaround for it so it's not that

00:25:11,400 --> 00:25:18,360
critical that it's broken but we had to

00:25:13,830 --> 00:25:22,530
push it well it's so that goes into the

00:25:18,360 --> 00:25:24,660
questions I have so SKT is they have a

00:25:22,530 --> 00:25:26,190
little figure now but it is something

00:25:24,660 --> 00:25:27,300
that's gonna be running internally but

00:25:26,190 --> 00:25:28,920
the results of which will be made

00:25:27,300 --> 00:25:31,590
actually so are those results being

00:25:28,920 --> 00:25:32,790
posted somewhere right now right now

00:25:31,590 --> 00:25:34,680
it's done internally just to kind of get

00:25:32,790 --> 00:25:37,710
the pipeline established but the goal is

00:25:34,680 --> 00:25:39,870
to kind of run public tests and somehow

00:25:37,710 --> 00:25:42,150
we'll find a way to publish results

00:25:39,870 --> 00:25:44,910
publicly yeah sure Jeff can figure that

00:25:42,150 --> 00:25:47,810
out some of the problems you run into is

00:25:44,910 --> 00:25:47,810
when we take

00:25:47,950 --> 00:25:52,780
next branch fails but it fails because

00:25:50,410 --> 00:25:55,810
it failed because it's cussing it's not

00:25:52,780 --> 00:25:57,460
necessarily a problem so we don't want

00:25:55,810 --> 00:26:00,280
to spam

00:25:57,460 --> 00:26:03,040
scuzzy beggars my syndicate personally

00:26:00,280 --> 00:26:05,140
we we do have a way for where we have a

00:26:03,040 --> 00:26:08,470
front end for the current test system

00:26:05,140 --> 00:26:10,690
that already in fedora that it takes log

00:26:08,470 --> 00:26:12,580
files based on internal build and then

00:26:10,690 --> 00:26:14,550
it's got a set us up the status update

00:26:12,580 --> 00:26:17,380
on the front page is only updated from

00:26:14,550 --> 00:26:19,180
tests that are submitted from official

00:26:17,380 --> 00:26:20,530
test systems anybody else we can click

00:26:19,180 --> 00:26:21,730
on a kernel version and you can see

00:26:20,530 --> 00:26:23,200
everybody who's run that test and

00:26:21,730 --> 00:26:27,430
submitted results you can see all the

00:26:23,200 --> 00:26:30,460
results there is a way that we could

00:26:27,430 --> 00:26:33,490
take the the some sort of a log file

00:26:30,460 --> 00:26:35,380
summary output from this system and

00:26:33,490 --> 00:26:38,050
import it directly into there so you can

00:26:35,380 --> 00:26:40,210
look at a kernel and yeah especially if

00:26:38,050 --> 00:26:43,780
we can you know find a way to market as

00:26:40,210 --> 00:26:45,460
this is SKT results then you could just

00:26:43,780 --> 00:26:46,870
look at C so that that would pay tribute

00:26:45,460 --> 00:26:51,760
light it's a very crowd-sourced way of

00:26:46,870 --> 00:26:54,540
getting some of which will be people and

00:26:51,760 --> 00:26:56,740
some of it will be in theory box right

00:26:54,540 --> 00:26:58,030
so then my other question is I guess

00:26:56,740 --> 00:27:00,280
this goes there so let's say we get

00:26:58,030 --> 00:27:02,440
those results in there one of the things

00:27:00,280 --> 00:27:03,850
that has has still it still confounds me

00:27:02,440 --> 00:27:06,610
a little bit on the fedora side it's

00:27:03,850 --> 00:27:07,960
probably four or agustin is when you

00:27:06,610 --> 00:27:10,480
when we find out that something is

00:27:07,960 --> 00:27:12,750
broken how do we go about fixing those

00:27:10,480 --> 00:27:16,500
things especially if there's game

00:27:12,750 --> 00:27:18,570
- yeah so dating can become problematic

00:27:16,500 --> 00:27:20,789
there except for for reasons like I just

00:27:18,570 --> 00:27:23,250
mentioned right to excel I didn't want

00:27:20,789 --> 00:27:25,409
to push out Brooking yourself yeah but

00:27:23,250 --> 00:27:27,860
at that point we'd had enough built up

00:27:25,409 --> 00:27:27,860
in there so

00:27:31,000 --> 00:27:37,140
what we did initially soon as that

00:27:32,710 --> 00:27:37,140
showed up it was posted upstream

00:27:45,950 --> 00:27:51,200
extreme kernel developers who have much

00:27:49,760 --> 00:27:53,330
more in-depth knowledge of all the

00:27:51,200 --> 00:27:54,530
subsystems of the the Fedora curl

00:27:53,330 --> 00:27:57,620
maintainer role is kind of a general

00:27:54,530 --> 00:27:59,060
role and you can only just and I can

00:27:57,620 --> 00:28:00,620
only do so much so we really do rely on

00:27:59,060 --> 00:28:03,200
that but again the problem is that if

00:28:00,620 --> 00:28:05,030
upstream doesn't respond then we're kind

00:28:03,200 --> 00:28:07,940
of stuck with not knowing exactly what

00:28:05,030 --> 00:28:09,980
to do and I know if stream has no sort

00:28:07,940 --> 00:28:11,630
of SLA both like what is the common

00:28:09,980 --> 00:28:13,130
expectation for a bug is it usually a

00:28:11,630 --> 00:28:14,540
month turn around six months

00:28:13,130 --> 00:28:16,450
turn around lutely a lot of times

00:28:14,540 --> 00:28:20,150
depends on the severity of the bug

00:28:16,450 --> 00:28:23,270
irritating yes some bugs you know we get

00:28:20,150 --> 00:28:24,980
less than 24 turn on some sometimes you

00:28:23,270 --> 00:28:27,890
will post something to the maintainer

00:28:24,980 --> 00:28:28,970
and they see it and say oh yeah hold on

00:28:27,890 --> 00:28:31,580
you know exactly where that's coming

00:28:28,970 --> 00:28:32,990
from and they give us a fix or oh yeah

00:28:31,580 --> 00:28:35,210
that's really serious let me see what I

00:28:32,990 --> 00:28:39,050
can do that how many times is that one

00:28:35,210 --> 00:28:42,740
of our guys that's holding up the pics

00:28:39,050 --> 00:28:46,060
know that is doing because I know that

00:28:42,740 --> 00:28:46,060
we I don't know how many a stream

00:28:46,720 --> 00:28:55,930
yep I would say it's not just you know

00:28:54,070 --> 00:28:57,640
it really comes to who's maintaining the

00:28:55,930 --> 00:29:03,250
code a lot of times if it's if it's

00:28:57,640 --> 00:29:05,350
driver stuff I know right I tell on

00:29:03,250 --> 00:29:12,970
networking folks yeah yeah networking

00:29:05,350 --> 00:29:15,800
stuff and and there's some things that

00:29:12,970 --> 00:29:19,000
we just honestly don't treat gosh

00:29:15,800 --> 00:29:19,000
but a fascist

00:29:19,429 --> 00:29:24,289
do either side oh yeah absolutely yeah

00:29:22,580 --> 00:29:27,739
Fedora has a very different approach

00:29:24,289 --> 00:29:30,139
than rel and then we're going to enable

00:29:27,739 --> 00:29:32,450
as much as as we can because people want

00:29:30,139 --> 00:29:36,889
to use it and because we don't have

00:29:32,450 --> 00:29:39,710
support s LA's then no good breaks right

00:29:36,889 --> 00:29:42,710
so you know butter off s for awhile was

00:29:39,710 --> 00:29:44,830
hey this is great and then it's it's

00:29:42,710 --> 00:29:47,330
kind of gone in a different direction so

00:29:44,830 --> 00:29:48,889
you know it's enabled and I don't see us

00:29:47,330 --> 00:29:51,440
turning it off for any particular reason

00:29:48,889 --> 00:29:53,389
but we also don't have resources to look

00:29:51,440 --> 00:29:56,989
at the bugs and the resources upstream

00:29:53,389 --> 00:30:00,070
or frequently interested in other things

00:29:56,989 --> 00:30:00,070
not the types of

00:30:08,370 --> 00:30:14,070
so I guess what like in terms of getting

00:30:11,549 --> 00:30:17,390
I mean I guess just to go back to giving

00:30:14,070 --> 00:30:20,580
results into what was the kernel test

00:30:17,390 --> 00:30:22,140
there was a app called kernel tested or

00:30:20,580 --> 00:30:24,750
app so right now that we've got this

00:30:22,140 --> 00:30:28,260
other test suite that it's a quick test

00:30:24,750 --> 00:30:31,770
suite that users can run and that we run

00:30:28,260 --> 00:30:34,590
on everything so it does things checks a

00:30:31,770 --> 00:30:36,330
few common cases unfortunately we've

00:30:34,590 --> 00:30:40,289
every time we ask for a community help

00:30:36,330 --> 00:30:42,270
to submit test we usually will get a

00:30:40,289 --> 00:30:43,830
couple people say oh yeah well of do

00:30:42,270 --> 00:30:46,890
that we write the test and that's what

00:30:43,830 --> 00:30:48,480
we hear of them so it is I mean it's

00:30:46,890 --> 00:30:49,760
hard and it's not a high priority for a

00:30:48,480 --> 00:30:56,250
lot of people but you know hopefully

00:30:49,760 --> 00:30:59,669
there's this but right now users are

00:30:56,250 --> 00:31:01,980
ring that and submitting results and we

00:30:59,669 --> 00:31:04,409
even actually hand out badges for people

00:31:01,980 --> 00:31:06,679
who run kernel tests for us which is

00:31:04,409 --> 00:31:09,120
more of a motivator than you would think

00:31:06,679 --> 00:31:11,660
we have a lot of people running tests

00:31:09,120 --> 00:31:14,360
just to get back

00:31:11,660 --> 00:31:16,100
and it's cool no they run it on various

00:31:14,360 --> 00:31:17,870
hardware and because you you get

00:31:16,100 --> 00:31:21,110
increments in those badges then there

00:31:17,870 --> 00:31:22,880
are people who test every kernel in

00:31:21,110 --> 00:31:25,400
that's that's fantastic so we can get

00:31:22,880 --> 00:31:28,070
something better out there all we have

00:31:25,400 --> 00:31:29,240
to do though do if there's some sort of

00:31:28,070 --> 00:31:31,220
the summary that comes out of these

00:31:29,240 --> 00:31:34,250
tests on service or McLoughlin then

00:31:31,220 --> 00:31:41,000
really we would just change we could

00:31:34,250 --> 00:31:43,580
change a header and do a change that

00:31:41,000 --> 00:31:45,500
sound like a reasonable point yeah so

00:31:43,580 --> 00:31:47,690
one of the things I just want to people

00:31:45,500 --> 00:31:49,640
may not know but specifically the

00:31:47,690 --> 00:31:51,909
colonel general esteem is contributing a

00:31:49,640 --> 00:31:55,669
lot of tests to this project called LTP

00:31:51,909 --> 00:31:58,520
if you look you'll see a lot of brain

00:31:55,669 --> 00:32:00,650
tests being added by Red Hat associates

00:31:58,520 --> 00:32:03,940
and specifically this is one of the ways

00:32:00,650 --> 00:32:08,230
that we're looking at using a test suite

00:32:03,940 --> 00:32:10,909
LTP so it may not go into like a fedora

00:32:08,230 --> 00:32:14,299
dis kit or an opportunity just get repo

00:32:10,909 --> 00:32:15,860
but yet the LTP project is adding 10 we

00:32:14,299 --> 00:32:17,600
are adding tests directly to that and

00:32:15,860 --> 00:32:18,280
that is one of the best Suites that we

00:32:17,600 --> 00:32:20,950
will run

00:32:18,280 --> 00:32:22,060
so indirectly you get me is one of the

00:32:20,950 --> 00:32:24,460
contributions we can make two fedoras

00:32:22,060 --> 00:32:25,960
that will help I'm sure is if we keep a

00:32:24,460 --> 00:32:27,580
there's some sort of page upstream that

00:32:25,960 --> 00:32:29,980
says how do you get involved for the

00:32:27,580 --> 00:32:31,660
work rental testing we can add is how we

00:32:29,980 --> 00:32:33,220
run tests we can you know run with your

00:32:31,660 --> 00:32:34,750
tests wave you can tell them explain how

00:32:33,220 --> 00:32:36,700
to run ltd tests and contribute

00:32:34,750 --> 00:32:38,620
resultantly you can run a thin then wrap

00:32:36,700 --> 00:32:40,450
around LTP to kind of well like all the

00:32:38,620 --> 00:32:42,220
result yeah that's really all our test

00:32:40,450 --> 00:32:45,580
suite is it's a number of sub

00:32:42,220 --> 00:32:47,920
directories that go through and there's

00:32:45,580 --> 00:32:51,340
a runt SSH and that's the directory and

00:32:47,920 --> 00:32:53,710
it will there's no reason it can't hold

00:32:51,340 --> 00:32:55,300
down things like even the the Nvidia

00:32:53,710 --> 00:32:59,170
driver test we have just to make sure

00:32:55,300 --> 00:33:00,550
that it's working actually checks to

00:32:59,170 --> 00:33:03,580
make sure that you have the local the

00:33:00,550 --> 00:33:04,720
latest package downloaded uh-huh and if

00:33:03,580 --> 00:33:06,460
it's not downloaded then it'll go

00:33:04,720 --> 00:33:07,540
download it and then just extracts the

00:33:06,460 --> 00:33:09,520
kernel pieces to make sure that they

00:33:07,540 --> 00:33:10,960
build against that current kernel it

00:33:09,520 --> 00:33:12,580
fails from most of the time because

00:33:10,960 --> 00:33:14,710
we're testing on rawhide in Nvidia does

00:33:12,580 --> 00:33:16,490
a once a month release and only supports

00:33:14,710 --> 00:33:18,260
release kernels so

00:33:16,490 --> 00:33:20,059
it feels a lot but at least we know it's

00:33:18,260 --> 00:33:23,480
failing and know it's coming so before

00:33:20,059 --> 00:33:26,350
before rebase happens we can say this is

00:33:23,480 --> 00:33:26,350
this is a concern

00:33:27,190 --> 00:33:32,290
we know that people using so it would be

00:33:31,060 --> 00:33:34,090
very easy to say all right we'll grab

00:33:32,290 --> 00:33:35,920
all right now we have some subsets of

00:33:34,090 --> 00:33:37,420
LTP and it would be easy to say all

00:33:35,920 --> 00:33:42,120
right for people who want to run the

00:33:37,420 --> 00:33:42,120
more extensive tests we grab all of LTP

00:33:55,590 --> 00:34:02,170
we could throw that file in you know in

00:33:58,900 --> 00:34:06,370
the test in the last week this difficult

00:34:02,170 --> 00:34:10,030
to the crunchy users to run these check

00:34:06,370 --> 00:34:13,630
out the test and now if you want to

00:34:10,030 --> 00:34:15,220
actually submit if there's a config file

00:34:13,630 --> 00:34:19,390
you'll have to say yes I want to submit

00:34:15,220 --> 00:34:21,040
us authenticated and then there's a

00:34:19,390 --> 00:34:22,540
couple of other like do you want to run

00:34:21,040 --> 00:34:24,760
it we don't run the third-party module

00:34:22,540 --> 00:34:27,250
which right now is just the Nvidia test

00:34:24,760 --> 00:34:31,690
by default but if you change the fixes

00:34:27,250 --> 00:34:33,880
it does that'll happen you know

00:34:31,690 --> 00:34:35,760
obviously I'm sure a lot of information

00:34:33,880 --> 00:34:37,570
you probably didn't realize for this is

00:34:35,760 --> 00:34:39,610
where were you think to get this

00:34:37,570 --> 00:34:42,820
information

00:34:39,610 --> 00:34:45,010
to replace the colonel channel and IRC

00:34:42,820 --> 00:34:47,230
get masks how I run tests I don't you

00:34:45,010 --> 00:34:51,010
know I mean obviously there is a colonel

00:34:47,230 --> 00:34:53,919
wiki page I use it when I need to

00:34:51,010 --> 00:34:56,119
provide myself out of properly built

00:34:53,919 --> 00:35:00,410
we've been at a link for how to test

00:34:56,119 --> 00:35:02,180
kernels would that be useful in the

00:35:00,410 --> 00:35:04,819
bottom of those there oh there's also

00:35:02,180 --> 00:35:19,039
with the badge you know the actual badge

00:35:04,819 --> 00:35:20,990
itself links back to you know this um we

00:35:19,039 --> 00:35:23,390
should you guys announced maybe once

00:35:20,990 --> 00:35:24,980
every six months hey are you yeah I mean

00:35:23,390 --> 00:35:40,039
I guess we probably need to renounce it

00:35:24,980 --> 00:35:41,869
we did like session sunblock with one

00:35:40,039 --> 00:35:43,730
out there but if people aren't aware of

00:35:41,869 --> 00:35:51,069
how easy this could be or how easy I

00:35:43,730 --> 00:35:51,069
make it thing right well communication

00:35:52,240 --> 00:35:57,849
no well right so they're of the ones

00:35:55,700 --> 00:36:01,400
that are in there or not mix of answers

00:35:57,849 --> 00:36:03,859
terrible if the ones that are in there

00:36:01,400 --> 00:36:07,630
are not destructive if we have a better

00:36:03,859 --> 00:36:07,630
directory for disruptive option

00:36:10,960 --> 00:36:15,910
it's crystal oh yeah the distress that

00:36:13,690 --> 00:36:17,079
you have to pass up like to run

00:36:15,910 --> 00:36:21,220
disrupting tests but there aren't any

00:36:17,079 --> 00:36:23,300
actual instruction testing this dress

00:36:21,220 --> 00:36:26,000
has to

00:36:23,300 --> 00:36:28,010
and asking for obvious reasons oh yes

00:36:26,000 --> 00:36:29,330
making the last question for now lowers

00:36:28,010 --> 00:36:30,980
got a couple of topics and if we get

00:36:29,330 --> 00:36:32,030
through these we can come back you know

00:36:30,980 --> 00:36:59,810
this has been a really good discussion

00:36:32,030 --> 00:37:02,540
but I do okay pervert we can do them we

00:36:59,810 --> 00:37:06,650
would want to wait until like f27 is

00:37:02,540 --> 00:37:08,240
gonna be based on on 4:14 won't release

00:37:06,650 --> 00:37:10,990
himself after so we've won already two

00:37:08,240 --> 00:37:10,990
or thirteen

00:37:11,940 --> 00:37:18,390
our c70 should be back I think in

00:37:16,980 --> 00:37:19,890
general the interest is that yes this

00:37:18,390 --> 00:37:21,869
sounds like a good idea I think we'll

00:37:19,890 --> 00:37:23,480
have to find a good time to do since

00:37:21,869 --> 00:37:26,480
that's a good subject

00:37:23,480 --> 00:37:26,480
yeah

00:37:32,120 --> 00:37:34,930
question

00:37:35,730 --> 00:37:43,160
it sounds like that rawhide is expected

00:37:40,350 --> 00:37:43,160
staging area

00:37:44,670 --> 00:37:47,539
and that's expected

00:37:50,800 --> 00:37:54,980
as we get rawhide and better states all

00:37:53,630 --> 00:37:58,060
the other packages that would become

00:37:54,980 --> 00:38:00,050
more thing right now I was just avoiding

00:37:58,060 --> 00:38:05,240
heard someone's working on it though

00:38:00,050 --> 00:38:07,280
yeah rawhide every night with open QA

00:38:05,240 --> 00:38:12,950
and I'm sitting here thinking we'll just

00:38:07,280 --> 00:38:15,650
add these SKT test or Ltd good so the

00:38:12,950 --> 00:38:19,370
suggestion is that perhaps on the on the

00:38:15,650 --> 00:38:22,220
where where we send people to suggest

00:38:19,370 --> 00:38:24,260
them they can engage the Colonel testing

00:38:22,220 --> 00:38:26,970
it was status law that says here's how

00:38:24,260 --> 00:38:29,250
much of this Testament passing so far

00:38:26,970 --> 00:38:34,530
is there some way of measuring progress

00:38:29,250 --> 00:38:40,410
because if it is green like how is there

00:38:34,530 --> 00:38:42,180
is there a subset of the test some way

00:38:40,410 --> 00:38:52,380
of measuring progress sort of like how

00:38:42,180 --> 00:39:01,590
the translators have this it depends on

00:38:52,380 --> 00:39:03,570
how the test suite works just like a

00:39:01,590 --> 00:39:07,140
chair the charity thermometer we want to

00:39:03,570 --> 00:39:08,100
get 1000 tested I think that would

00:39:07,140 --> 00:39:09,900
actually be better because one of the

00:39:08,100 --> 00:39:12,690
problems we have it's like automated

00:39:09,900 --> 00:39:14,790
testing it in VMs we don't have a right

00:39:12,690 --> 00:39:16,890
that we have access to and so that's why

00:39:14,790 --> 00:39:19,440
we want users running the test now it's

00:39:16,890 --> 00:39:21,180
been a failure in that regard because we

00:39:19,440 --> 00:39:22,860
don't have any Hardware specific tests

00:39:21,180 --> 00:39:24,990
at this point where it's very easy to

00:39:22,860 --> 00:39:26,760
write a test if you have a hardware to

00:39:24,990 --> 00:39:28,470
check to have certain hardware to check

00:39:26,760 --> 00:39:31,200
for specific things right

00:39:28,470 --> 00:39:32,580
if this module exists and is loaded then

00:39:31,200 --> 00:39:33,840
I'm gonna run this test if it doesn't

00:39:32,580 --> 00:39:36,030
that I'm not and that way you can test

00:39:33,840 --> 00:39:38,520
all sorts of various hardware that way

00:39:36,030 --> 00:39:40,800
but the the idea is if we get people

00:39:38,520 --> 00:39:42,420
running it and then we also end up

00:39:40,800 --> 00:39:44,520
getting the test for a specific hardware

00:39:42,420 --> 00:39:49,470
things specifically problematic hardware

00:39:44,520 --> 00:39:50,970
then you get people with varying devices

00:39:49,470 --> 00:39:52,680
they're running that test doing give me

00:39:50,970 --> 00:39:53,940
feedback all right we are I know Boris

00:39:52,680 --> 00:39:55,740
cousin Thomas do you mind if I cut this

00:39:53,940 --> 00:39:59,580
off in this revisit there was two hour

00:39:55,740 --> 00:40:01,140
sessions one hour two hour session but I

00:39:59,580 --> 00:40:03,870
wasn't sure how long I mean we could

00:40:01,140 --> 00:40:05,340
come back I don't want people falling

00:40:03,870 --> 00:40:08,490
asleep over this stuff I mean how much

00:40:05,340 --> 00:40:10,290
more people have one I could probably go

00:40:08,490 --> 00:40:11,520
another 10 15 minutes before I'd like to

00:40:10,290 --> 00:40:13,140
cut it off maybe Apple watch never

00:40:11,520 --> 00:40:14,480
beyond mine is actually very now a

00:40:13,140 --> 00:40:16,260
distance so we wanted to hit the

00:40:14,480 --> 00:40:18,470
engagement we touched on a little bit

00:40:16,260 --> 00:40:18,470
already

00:40:18,819 --> 00:40:25,599
yeah we've got these tests supposedly in

00:40:22,779 --> 00:40:28,299
some future or we're now getting results

00:40:25,599 --> 00:40:30,009
we're seeing things failing it's an

00:40:28,299 --> 00:40:31,509
impossible to test for you to to fix

00:40:30,009 --> 00:40:35,169
them and so on try figure out do we have

00:40:31,509 --> 00:40:36,849
any sort of kernel community in Fedora

00:40:35,169 --> 00:40:38,229
that we can engage and get to fixing

00:40:36,849 --> 00:40:40,199
these things or is that the wrong place

00:40:38,229 --> 00:40:46,989
entirely we just go straight to upstream

00:40:40,199 --> 00:40:48,969
somehow about this before and for

00:40:46,989 --> 00:40:51,759
various reasons I think it's difficult

00:40:48,969 --> 00:40:54,489
to try and engage the Fedora community

00:40:51,759 --> 00:41:00,969
to actually get actually fix the bugs

00:40:54,489 --> 00:41:06,459
for it for most generic I think this is

00:41:00,969 --> 00:41:08,919
because the federal community is best at

00:41:06,459 --> 00:41:12,699
I think reporting and testing on a wide

00:41:08,919 --> 00:41:15,609
variety of hardware but I think kernel

00:41:12,699 --> 00:41:18,219
development particulars covers such a

00:41:15,609 --> 00:41:19,689
wide wide variety of areas it's hard to

00:41:18,219 --> 00:41:22,299
be able to know where to begin

00:41:19,689 --> 00:41:28,059
even for Justin like we do this is a

00:41:22,299 --> 00:41:29,829
full-time job sometimes yes it's it's

00:41:28,059 --> 00:41:31,329
it's early the skills that people can

00:41:29,829 --> 00:41:41,939
acquire if iterative but again like you

00:41:31,329 --> 00:41:41,939
said it's not easy so I think trying to

00:41:46,859 --> 00:41:50,949
you know a handful of people in the

00:41:48,729 --> 00:41:52,929
community that are not really fixing

00:41:50,949 --> 00:41:55,299
arbitrary Starbucks or more of like a

00:41:52,929 --> 00:41:56,949
finding piece of hardware they want to

00:41:55,299 --> 00:41:58,659
enable or fix it get working and then

00:41:56,949 --> 00:42:00,609
they'd spend all the time and push a

00:41:58,659 --> 00:42:03,309
bunch of patches upstream and watch the

00:42:00,609 --> 00:42:07,179
door from the back ported right I'm

00:42:03,309 --> 00:42:08,679
thinking like we do see

00:42:07,179 --> 00:42:11,140
I mean non red hat people in the

00:42:08,679 --> 00:42:13,269
community who are you know testing

00:42:11,140 --> 00:42:16,089
things all the time and do interact with

00:42:13,269 --> 00:42:18,189
upstream one it's just it's a handful of

00:42:16,089 --> 00:42:20,380
people but there are people who are

00:42:18,189 --> 00:42:22,839
actually actively making the Fedora

00:42:20,380 --> 00:42:25,630
kernels better on the community side

00:42:22,839 --> 00:42:27,729
we'd like to see more of that one of the

00:42:25,630 --> 00:42:30,159
biggest issues is triage

00:42:27,729 --> 00:42:33,339
so we did a couple years ago several

00:42:30,159 --> 00:42:38,519
years ago John wrote up a whole this is

00:42:33,339 --> 00:42:38,519
the triage process and everyone snow

00:42:40,480 --> 00:42:45,530
don't spend a couple weeks

00:42:43,550 --> 00:42:48,260
and do it fantastic gentlemen they

00:42:45,530 --> 00:42:51,500
disappear because it is the least sexy

00:42:48,260 --> 00:42:54,680
thing I mean we we don't have a sexy job

00:42:51,500 --> 00:42:56,630
so I remember you said exactly the same

00:42:54,680 --> 00:42:58,340
thing two years ago in Rochester and I

00:42:56,630 --> 00:43:00,470
went and tried to trade obviously five

00:42:58,340 --> 00:43:03,650
bucks and it's the hardest thing it

00:43:00,470 --> 00:43:07,130
really is yeah I mean it's not it's not

00:43:03,650 --> 00:43:08,480
easy I mean so so even I wanted to

00:43:07,130 --> 00:43:11,180
double checks on this is assumption on

00:43:08,480 --> 00:43:13,430
me but even if someone did come in find

00:43:11,180 --> 00:43:16,520
a bug that was open in Fedora and submit

00:43:13,430 --> 00:43:18,380
a patch like your charter is pretty much

00:43:16,520 --> 00:43:20,510
that that patch is going to have to be

00:43:18,380 --> 00:43:23,000
accepted upstream at some point so at

00:43:20,510 --> 00:43:26,740
that point either you have to do it or

00:43:23,000 --> 00:43:29,330
or the patch just sits there and merge

00:43:26,740 --> 00:43:31,220
well we're not going to merge something

00:43:29,330 --> 00:43:33,230
that is not going to make it upstream

00:43:31,220 --> 00:43:35,810
what bug fixes typically they're

00:43:33,230 --> 00:43:38,180
submitted upstream will they will do one

00:43:35,810 --> 00:43:40,550
of two things either they will accept

00:43:38,180 --> 00:43:42,080
that and fix the bug in and it'll show

00:43:40,550 --> 00:43:44,180
up in a tree unfortunately because of

00:43:42,080 --> 00:43:46,370
some weird things in the way that the

00:43:44,180 --> 00:43:48,020
extreme maintainer ship works it might

00:43:46,370 --> 00:43:49,310
not show up in a real tree until the

00:43:48,020 --> 00:43:50,960
next merge window and they give that

00:43:49,310 --> 00:43:52,819
port it to a stable but

00:43:50,960 --> 00:43:54,950
we know where it's going at that point

00:43:52,819 --> 00:43:56,630
and we're happy to take the patch the

00:43:54,950 --> 00:43:59,150
other thing that happens is you'll

00:43:56,630 --> 00:44:01,220
you'll submit a fix and yes it fixes an

00:43:59,150 --> 00:44:02,540
actual problem but the maintainer says I

00:44:01,220 --> 00:44:04,190
don't like the way that this is fixed I

00:44:02,540 --> 00:44:07,579
would rather do it this way I had

00:44:04,190 --> 00:44:10,220
something else in life and in that case

00:44:07,579 --> 00:44:11,869
a lot of times this will take the patch

00:44:10,220 --> 00:44:13,520
because what they're doing is actually a

00:44:11,869 --> 00:44:15,410
rework that something's not going to be

00:44:13,520 --> 00:44:17,089
backward into stable but we take the

00:44:15,410 --> 00:44:18,740
patch but the you know this is going to

00:44:17,089 --> 00:44:22,730
be fixing it in really different way

00:44:18,740 --> 00:44:24,740
next virtually as long as it's something

00:44:22,730 --> 00:44:27,079
that's going to be upstream that's fine

00:44:24,740 --> 00:44:33,430
yeah I mean that's been my experience to

00:44:27,079 --> 00:44:36,520
I have worked through one one doing some

00:44:33,430 --> 00:44:39,589
control the tape library got broken and

00:44:36,520 --> 00:44:41,510
so I've never really done this stuff

00:44:39,589 --> 00:44:43,250
before and I learned how to do I mean I

00:44:41,510 --> 00:44:44,720
didn't fix the bugs myself but I learned

00:44:43,250 --> 00:44:47,150
to get enough information that I could

00:44:44,720 --> 00:44:49,280
get with upstream in the NFS bug case it

00:44:47,150 --> 00:44:51,380
was already fixed in one of the trees

00:44:49,280 --> 00:44:54,050
that was destined for the next murder

00:44:51,380 --> 00:44:55,849
window and that just had to filter its

00:44:54,050 --> 00:44:56,910
way back down and then the other case

00:44:55,849 --> 00:45:00,000
you know

00:44:56,910 --> 00:45:02,820
I mean I found where the three days -

00:45:00,000 --> 00:45:04,740
bisected server hardware is terrible to

00:45:02,820 --> 00:45:07,080
reboot constantly but eventually I found

00:45:04,740 --> 00:45:08,820
the commit that broken and trace that

00:45:07,080 --> 00:45:10,440
back to upstream is actually once you

00:45:08,820 --> 00:45:12,540
have all the it information it's not

00:45:10,440 --> 00:45:15,900
hard to find these thing it's just

00:45:12,540 --> 00:45:18,510
there's so much procedure and so many

00:45:15,900 --> 00:45:21,600
kernel recompiles it takes so long to do

00:45:18,510 --> 00:45:25,230
and it cool to help do that right you

00:45:21,600 --> 00:45:27,360
know I mean perhaps I don't know I mean

00:45:25,230 --> 00:45:30,690
there was a continuous integration for

00:45:27,360 --> 00:45:32,060
obscure somebody the DeLorean things

00:45:30,690 --> 00:45:36,150
somebody was talking about yesterday

00:45:32,060 --> 00:45:38,730
that basically gives you at every commit

00:45:36,150 --> 00:45:41,280
point a downloadable package that you

00:45:38,730 --> 00:45:43,620
can then test so you don't as a user

00:45:41,280 --> 00:45:47,670
just wanting to test these things out

00:45:43,620 --> 00:45:49,440
you can bisect by rpm not by and what we

00:45:47,670 --> 00:45:52,950
do in cut me the kernel it would just be

00:45:49,440 --> 00:45:55,650
impossible right but you know I pull the

00:45:52,950 --> 00:45:58,020
daily get bill

00:45:55,650 --> 00:45:59,730
gives me enough information to get to

00:45:58,020 --> 00:46:03,330
buy sick points so that I only had to

00:45:59,730 --> 00:46:05,700
compile my own current and your tape

00:46:03,330 --> 00:46:07,470
read because of the work you did in

00:46:05,700 --> 00:46:08,580
working with with this guy or this guy

00:46:07,470 --> 00:46:10,200
the issue with the tape drive down

00:46:08,580 --> 00:46:11,370
because of the work you did in working

00:46:10,200 --> 00:46:13,500
with the maintainer is up streaming

00:46:11,370 --> 00:46:14,730
getting that fixed right we had to fix

00:46:13,500 --> 00:46:16,560
out before we even try to push the

00:46:14,730 --> 00:46:18,000
relays right so you saved anybody else

00:46:16,560 --> 00:46:20,040
from ever seeing that from you but not

00:46:18,000 --> 00:46:21,660
did anybody would they they may or may

00:46:20,040 --> 00:46:22,980
not have a note of it we don't know what

00:46:21,660 --> 00:46:24,780
hard work people have unfortunately

00:46:22,980 --> 00:46:25,980
there used to be a tool they would

00:46:24,780 --> 00:46:26,940
collect that information you could opt

00:46:25,980 --> 00:46:28,170
into yeah

00:46:26,940 --> 00:46:29,730
and that went away and there was

00:46:28,170 --> 00:46:32,340
supposed to be a replacement someone

00:46:29,730 --> 00:46:32,940
talked about it but gone and that was

00:46:32,340 --> 00:46:41,010
years ago

00:46:32,940 --> 00:46:42,990
that was theirs but there's been no

00:46:41,010 --> 00:46:44,250
replacement so it is you know a lot of

00:46:42,990 --> 00:46:45,750
these things it is hard for us to say

00:46:44,250 --> 00:46:47,970
what everybody's running on because

00:46:45,750 --> 00:46:49,380
unless someone files a bug right or

00:46:47,970 --> 00:46:51,410
yells we don't really know other than

00:46:49,380 --> 00:46:54,650
through this little bitty check-in thing

00:46:51,410 --> 00:46:54,650
for art

00:46:54,910 --> 00:46:58,900
we've been using that for Beeker how we

00:46:56,290 --> 00:47:00,460
use the LS h w2 scanner machine to

00:46:58,900 --> 00:47:08,080
figure out what hardwoods on there we

00:47:00,460 --> 00:47:09,790
uploaded for a database yes well if it's

00:47:08,080 --> 00:47:11,950
opt-in yeah what do you run it but

00:47:09,790 --> 00:47:13,720
somebody alright especially if i've got

00:47:11,950 --> 00:47:16,060
the weird hardware that i want to make

00:47:13,720 --> 00:47:18,040
sure doesn't disappear right then i have

00:47:16,060 --> 00:47:20,560
an incentive to run as long as i know it

00:47:18,040 --> 00:47:24,400
exists I did run small but yeah now we

00:47:20,560 --> 00:47:26,140
do get you know we can look at the maybe

00:47:24,400 --> 00:47:27,340
RT reports the trace backs and say

00:47:26,140 --> 00:47:32,200
alright well yes a lot of people are

00:47:27,340 --> 00:47:36,220
running with this hardware but I mean I

00:47:32,200 --> 00:47:38,020
found a B or T to be enormous e for the

00:47:36,220 --> 00:47:40,240
kernel in particular this is not to say

00:47:38,020 --> 00:47:42,750
the avrt is not easy tool but I think

00:47:40,240 --> 00:47:45,310
for the way the kernel ends up going

00:47:42,750 --> 00:47:48,970
it's by the time we actually collect

00:47:45,310 --> 00:47:51,040
enough data points to figure out exactly

00:47:48,970 --> 00:47:53,350
if Lumbees forward specific relevant we

00:47:51,040 --> 00:47:54,550
should fix then we're mostly on through

00:47:53,350 --> 00:47:56,620
new criminal work they've already been

00:47:54,550 --> 00:47:57,910
fixed to the latest version yeah hey

00:47:56,620 --> 00:47:58,870
maybe Ortiz actually very interesting

00:47:57,910 --> 00:48:00,310
closure because the thing I was

00:47:58,870 --> 00:48:03,190
wondering about it seems to me if we add

00:48:00,310 --> 00:48:05,350
all this automation it up until you

00:48:03,190 --> 00:48:07,750
dimension avrt it felt like a lot of the

00:48:05,350 --> 00:48:10,120
data that we got back was very artisanal

00:48:07,750 --> 00:48:11,920
it just kind of like somebody's

00:48:10,120 --> 00:48:13,750
somebody's got the weird hardware I'm

00:48:11,920 --> 00:48:15,400
gonna run - kernel test suite if I have

00:48:13,750 --> 00:48:17,440
to know about it or I'll log in and open

00:48:15,400 --> 00:48:18,460
a bug whereas if we're gonna be starting

00:48:17,440 --> 00:48:19,870
and generating a bunch of tests

00:48:18,460 --> 00:48:22,960
internally and other CI tennis

00:48:19,870 --> 00:48:25,210
externally my concern was you know how

00:48:22,960 --> 00:48:26,770
that I assume that the impact of that is

00:48:25,210 --> 00:48:28,210
that many more bugs are gonna be opened

00:48:26,770 --> 00:48:30,100
up streams as well it's like if I'm on

00:48:28,210 --> 00:48:31,690
if I'm if I'm not involved with redhead

00:48:30,100 --> 00:48:33,850
at all they're on the kernel maintainer

00:48:31,690 --> 00:48:37,230
presumably the odds of my seeing some

00:48:33,850 --> 00:48:39,030
sort of bug from court

00:48:37,230 --> 00:48:41,160
is increased like we're gonna find more

00:48:39,030 --> 00:48:45,359
bugs but then but then you mention AVR

00:48:41,160 --> 00:48:46,740
Tina seems like it is a br te like just

00:48:45,359 --> 00:48:48,090
generating noise at this point or is it

00:48:46,740 --> 00:48:49,890
actually do you guys follow with those

00:48:48,090 --> 00:48:51,840
and file bugs upstream would you even

00:48:49,890 --> 00:48:53,850
know what to file I don't remember there

00:48:51,840 --> 00:48:55,619
are some filters there's some things

00:48:53,850 --> 00:48:59,000
that we can pull throughout a lot of the

00:48:55,619 --> 00:48:59,000
ones you'll see though are things like

00:48:59,450 --> 00:49:06,060
out of pre drivers

00:49:02,350 --> 00:49:10,900
things like that that they're useless

00:49:06,060 --> 00:49:15,190
stuff I was trying to follow it for a

00:49:10,900 --> 00:49:16,780
while but I gave up because it was I was

00:49:15,190 --> 00:49:19,600
not finding buttons where I could

00:49:16,780 --> 00:49:21,610
actually take action on sometimes what

00:49:19,600 --> 00:49:22,690
happened is is that because the kernel

00:49:21,610 --> 00:49:25,180
doesn't move so quickly

00:49:22,690 --> 00:49:26,680
they'd find bugs people were still

00:49:25,180 --> 00:49:28,450
running versions that we're still out of

00:49:26,680 --> 00:49:33,040
date but abort was still in the air he

00:49:28,450 --> 00:49:36,640
was still reporting them we got a common

00:49:33,040 --> 00:49:39,160
one was graphics back traces graphics is

00:49:36,640 --> 00:49:41,200
handled by the dedicated Red Hat team

00:49:39,160 --> 00:49:43,030
that's a very good job but there also

00:49:41,200 --> 00:49:44,500
have their own stuff so sometimes those

00:49:43,030 --> 00:49:49,300
bugs tend to stick around for a little

00:49:44,500 --> 00:49:50,710
longer so I was not finding a good use

00:49:49,300 --> 00:49:51,910
of my time to try and follow it now I

00:49:50,710 --> 00:49:54,870
haven't actually checked on it in a

00:49:51,910 --> 00:50:01,870
while so maybe things have changed but

00:49:54,870 --> 00:50:03,580
it's do you think the process that Don

00:50:01,870 --> 00:50:06,430
is proposing do you think it's going to

00:50:03,580 --> 00:50:08,320
generate a similar amount of noise to

00:50:06,430 --> 00:50:13,000
avrt or do you think it's going to be a

00:50:08,320 --> 00:50:15,670
higher-quality save information I think

00:50:13,000 --> 00:50:18,850
it's going to be higher quality abrt

00:50:15,670 --> 00:50:20,980
tends to grab any sort of warning any

00:50:18,850 --> 00:50:23,330
that comes up which is okay but on the

00:50:20,980 --> 00:50:24,860
other hand this means that your

00:50:23,330 --> 00:50:27,860
we tend to get warnings for things like

00:50:24,860 --> 00:50:29,660
Wi-Fi driver timed out because it's got

00:50:27,860 --> 00:50:32,090
a mismatched firmware your graphics

00:50:29,660 --> 00:50:36,230
driver behind up because something

00:50:32,090 --> 00:50:38,180
whatever where is I say that have been

00:50:36,230 --> 00:50:40,480
talked about before have been vetted and

00:50:38,180 --> 00:50:42,590
so therefore I think they're likely to

00:50:40,480 --> 00:50:44,540
generate something we can actually take

00:50:42,590 --> 00:50:46,220
action on we actually even had that

00:50:44,540 --> 00:50:47,480
we're hearing a couple of patches and

00:50:46,220 --> 00:50:49,880
the kernel on doesn't fix all of them

00:50:47,480 --> 00:50:51,770
for essentially turning off warnings

00:50:49,880 --> 00:50:53,660
that upstream has said we want to keep

00:50:51,770 --> 00:50:56,270
those warnings on because we want to to

00:50:53,660 --> 00:50:58,250
know that this is happening but the end

00:50:56,270 --> 00:50:59,840
user doesn't need to know and doesn't

00:50:58,250 --> 00:51:02,510
care because it doesn't actually impact

00:50:59,840 --> 00:51:05,090
their do today does show up in a BRT

00:51:02,510 --> 00:51:09,230
yeah it shows up in a BRT so we found a

00:51:05,090 --> 00:51:11,000
few of those but that's only a couple so

00:51:09,230 --> 00:51:12,470
yeah it's expected behavior the

00:51:11,000 --> 00:51:14,480
developers over they don't want the

00:51:12,470 --> 00:51:16,610
warning to go away the user wouldn't

00:51:14,480 --> 00:51:19,880
even know about it

00:51:16,610 --> 00:51:21,140
I think you have hit on a problem though

00:51:19,880 --> 00:51:23,660
in terms of things we've seen the

00:51:21,140 --> 00:51:26,000
colonel's is that if typically if anyone

00:51:23,660 --> 00:51:27,800
sees anything that's just says error in

00:51:26,000 --> 00:51:30,110
the kernel they want to report it which

00:51:27,800 --> 00:51:32,780
the problem is that sometimes there's

00:51:30,110 --> 00:51:35,840
are innocuous errors I think a good

00:51:32,780 --> 00:51:38,270
example is they didn't upgrade of the

00:51:35,840 --> 00:51:41,030
CPI table parsing code and that's been

00:51:38,270 --> 00:51:42,860
generating some warnings and I think

00:51:41,030 --> 00:51:46,460
this is because there's a slight

00:51:42,860 --> 00:51:48,830
mismatch between the a CPI table person

00:51:46,460 --> 00:51:50,270
code and whatever a CPI tables there are

00:51:48,830 --> 00:51:52,490
so this is not something that actually

00:51:50,270 --> 00:51:57,160
causes the problem but because users see

00:51:52,490 --> 00:51:59,540
it as a warning they want a report

00:51:57,160 --> 00:52:00,770
because we see that on the road side as

00:51:59,540 --> 00:52:03,830
well we didn't we get hardware

00:52:00,770 --> 00:52:06,230
preferences you have actual money spent

00:52:03,830 --> 00:52:08,720
dealing with customers who report that

00:52:06,230 --> 00:52:09,680
as a above that they're seeing and

00:52:08,720 --> 00:52:12,290
they're thinking it's causing their

00:52:09,680 --> 00:52:14,480
problems on where it's not but they

00:52:12,290 --> 00:52:18,220
think it is it costs money to deal with

00:52:14,480 --> 00:52:22,640
you know it's the picture that mounted

00:52:18,220 --> 00:52:25,000
the dump like the number further kernel

00:52:22,640 --> 00:52:25,000
related

00:52:27,720 --> 00:52:37,980
i someone come in clear bugzilla across

00:52:34,590 --> 00:52:42,090
all releases probably just under a

00:52:37,980 --> 00:52:43,980
hundred Bugzilla now the thing is a BRT

00:52:42,090 --> 00:52:45,510
is smart enough to not open a bug on one

00:52:43,980 --> 00:52:47,880
of the dirty open to bug around so the

00:52:45,510 --> 00:52:50,869
avrt reports going up into the the

00:52:47,880 --> 00:52:50,869
server

00:53:01,420 --> 00:53:06,980
this is an area where we could apply

00:53:03,859 --> 00:53:09,589
some unsupervised classification so you

00:53:06,980 --> 00:53:11,420
get a highlight like a bug gum biggest

00:53:09,589 --> 00:53:14,300
thing that people are running into and

00:53:11,420 --> 00:53:15,349
if you dismiss it with you it doesn't

00:53:14,300 --> 00:53:17,210
really matter at the future it's a

00:53:15,349 --> 00:53:18,619
warning it's the right thing we start

00:53:17,210 --> 00:53:21,230
actually teaching him chief it go

00:53:18,619 --> 00:53:23,660
through the avrt stuff and actually make

00:53:21,230 --> 00:53:26,470
it values there's a problem with that

00:53:23,660 --> 00:53:32,380
though because you're assuming that

00:53:26,470 --> 00:53:32,380
people won't be running somewhere

00:53:34,720 --> 00:53:42,190
machines I'll generate that same warning

00:53:38,030 --> 00:53:44,420
and that's gonna offset so as you as you

00:53:42,190 --> 00:53:46,720
one of the interesting things that you

00:53:44,420 --> 00:53:46,720
do

00:53:51,330 --> 00:53:56,550
that's right there that this starts to

00:53:54,390 --> 00:53:58,320
learn about that and starts to see if

00:53:56,550 --> 00:54:00,990
you see a big jump all of a sudden

00:53:58,320 --> 00:54:03,240
hundred instances or thousand sister of

00:54:00,990 --> 00:54:04,860
this then you start to okay maybe that's

00:54:03,240 --> 00:54:06,330
worth investigating you get some actual

00:54:04,860 --> 00:54:08,670
feedback you can actually use that data

00:54:06,330 --> 00:54:10,890
right now it just seems like useless all

00:54:08,670 --> 00:54:13,580
the saying every warning is treated the

00:54:10,890 --> 00:54:13,580
same as a crash

00:54:13,670 --> 00:54:19,350
whereas if we actually teach put it into

00:54:17,430 --> 00:54:21,120
something like that structured like now

00:54:19,350 --> 00:54:23,130
the amount of data that we're talking

00:54:21,120 --> 00:54:26,130
about let's say a hundred bucks is 100

00:54:23,130 --> 00:54:28,620
different unique things for fun I don't

00:54:26,130 --> 00:54:30,090
know if you bump that up an order of

00:54:28,620 --> 00:54:31,950
magnitude to say that number instances

00:54:30,090 --> 00:54:35,520
that's that's a low for machine running

00:54:31,950 --> 00:54:37,980
say so there's a challenge there but but

00:54:35,520 --> 00:54:39,600
yeah if especially if we if we do if

00:54:37,980 --> 00:54:43,400
we're able to take advantage of more

00:54:39,600 --> 00:54:43,400
data like that definitely

00:54:43,940 --> 00:54:47,960
well so that's it becomes useful that's

00:54:46,460 --> 00:54:51,289
the difference between Bugzilla though

00:54:47,960 --> 00:54:53,390
and me the retrace server the actual

00:54:51,289 --> 00:54:57,289
server that supports I can see

00:54:53,390 --> 00:55:07,910
quantities there okay so if Bugzilla has

00:54:57,289 --> 00:55:12,789
this ones what percentage of the a/b our

00:55:07,910 --> 00:55:12,789
team reports are actual real versus

00:55:14,440 --> 00:55:19,119
do you even know we have just off the

00:55:17,170 --> 00:55:24,069
top of your head it's not an actual I'm

00:55:19,119 --> 00:55:25,299
not holding it just five ball I honestly

00:55:24,069 --> 00:55:28,569
have no idea because I haven't looked at

00:55:25,299 --> 00:55:30,160
in a while you may look at them it's

00:55:28,569 --> 00:55:33,640
very hard to quantify the over two

00:55:30,160 --> 00:55:36,549
reasons one is you'll have a user that

00:55:33,640 --> 00:55:39,430
files the bug because abrt prompts him

00:55:36,549 --> 00:55:40,780
to do so and then they disappear so we

00:55:39,430 --> 00:55:43,569
don't know if they ever saw it again or

00:55:40,780 --> 00:55:46,059
if it was just let me ask you this in a

00:55:43,569 --> 00:55:49,980
different way we have a lot of splats

00:55:46,059 --> 00:55:49,980
and warnings that come out of because

00:55:55,380 --> 00:56:00,660
you guys see it says this is because

00:56:02,670 --> 00:56:09,990
okay I didn't know if that was causing

00:56:05,430 --> 00:56:11,640
you probably say there was a while when

00:56:09,990 --> 00:56:18,750
we were getting a lot of warnings which

00:56:11,640 --> 00:56:20,819
is which even the warning said basically

00:56:18,750 --> 00:56:32,640
saying this is Corliss saying this is

00:56:20,819 --> 00:56:37,250
annoyingly so there's a bug right now

00:56:32,640 --> 00:56:37,250
and the way that we were parsing

00:56:40,030 --> 00:56:43,030
from

00:56:43,910 --> 00:56:50,420
am I who's that is running on laptops

00:56:47,240 --> 00:56:53,000
with hyper graphics and what happens you

00:56:50,420 --> 00:56:56,740
could get into the way power state works

00:56:53,000 --> 00:56:56,740
you can do an LS PC on crashing machine

00:56:58,770 --> 00:57:08,320
right so yeah well I found out about it

00:57:06,400 --> 00:57:09,850
yesterday because we had a lot I was

00:57:08,320 --> 00:57:11,110
locking up and the guy didn't know why

00:57:09,850 --> 00:57:12,790
and he said it went away when I switched

00:57:11,110 --> 00:57:16,290
in video binary drivers and what do you

00:57:12,790 --> 00:57:19,570
do he had his laptop forced to use

00:57:16,290 --> 00:57:21,460
Nvidia only at that point well since

00:57:19,570 --> 00:57:23,350
then it disabled behind at 15 he didn't

00:57:21,460 --> 00:57:24,220
have a graphic same florida so we spent

00:57:23,350 --> 00:57:26,020
a little bit of time to bugging i

00:57:24,220 --> 00:57:28,270
started looking and there's a there's a

00:57:26,020 --> 00:57:30,970
bug on chrome or how do we handle this

00:57:28,270 --> 00:57:38,500
and the problem is it's not just this

00:57:30,970 --> 00:57:42,190
one HP laptop its HP asus dell msi and a

00:57:38,500 --> 00:57:45,000
few other models and the workaround that

00:57:42,190 --> 00:57:48,790
works for different people which was

00:57:45,000 --> 00:57:49,820
over 2009 was the right fix for this

00:57:48,790 --> 00:57:53,180
people

00:57:49,820 --> 00:57:54,190
we're - mm now for others it's just not

00:57:53,180 --> 00:57:57,020
00:57:54,190 --> 00:57:58,880
yeah I get it

00:57:57,020 --> 00:58:00,350
but it's all it's all based on the same

00:57:58,880 --> 00:58:01,970
bug and it just depends on how it was

00:58:00,350 --> 00:58:05,360
implemented inside them particularly

00:58:01,970 --> 00:58:08,300
from that so I can't it I want to draw a

00:58:05,360 --> 00:58:09,740
picture away is that we're dealing with

00:58:08,300 --> 00:58:19,490
it I just realize we're dealing with the

00:58:09,740 --> 00:58:22,490
phone so as it is we've got something

00:58:19,490 --> 00:58:27,170
that looks roughly like this that comes

00:58:22,490 --> 00:58:29,060
in and links down at the bottom and

00:58:27,170 --> 00:58:31,930
basically somewhere in here is where

00:58:29,060 --> 00:58:31,930
upstream Evans

00:58:34,180 --> 00:58:39,480
somewhere in here is where the Fedora

00:58:37,060 --> 00:58:39,480
kernel is

00:58:42,630 --> 00:58:47,940
somewhere up here is just the reported

00:58:44,819 --> 00:58:50,269
bugs that come in so it's like this just

00:58:47,940 --> 00:58:50,269
by zone

00:58:53,059 --> 00:58:56,839
and then up here we've got a few

00:58:54,949 --> 00:58:59,449
different classes of things that are

00:58:56,839 --> 00:59:01,069
going on one is the artisanal reports

00:58:59,449 --> 00:59:07,699
that come in somebody reported human

00:59:01,069 --> 00:59:13,059
being reports about the spoke reports a

00:59:07,699 --> 00:59:13,059
bug in there we have a BRT

00:59:18,460 --> 00:59:22,809
reports bugs here this is largely being

00:59:21,160 --> 00:59:25,390
ignored right now it sounds like because

00:59:22,809 --> 00:59:26,740
it's just very low-quality bug there's

00:59:25,390 --> 00:59:29,049
not much we can do it I mean sometimes

00:59:26,740 --> 00:59:32,230
if it's something that a lot of people

00:59:29,049 --> 00:59:41,349
are hitting and we ask for more

00:59:32,230 --> 00:59:43,539
information and they respond yeah I mean

00:59:41,349 --> 00:59:44,559
some water hose if one month you've

00:59:43,539 --> 00:59:49,000
suddenly got an order of magnitude

00:59:44,559 --> 00:59:50,260
increase in abrt things so then I guess

00:59:49,000 --> 00:59:52,510
and then I guess we have we have two

00:59:50,260 --> 00:59:54,010
others in here one is this new pipeline

00:59:52,510 --> 00:59:56,319
that we're talking about new

00:59:54,010 --> 00:59:59,920
he said LPT I don't really know what to

00:59:56,319 --> 01:00:03,700
call this though like the I guess I'll

00:59:59,920 --> 01:00:10,900
say SAT and includes the LPT test and

01:00:03,700 --> 01:00:15,420
LTP and other stuff too and then this

01:00:10,900 --> 01:00:15,420
one was the you already have what's the

01:00:25,390 --> 01:00:29,859
and it's going in here so at the very

01:00:27,400 --> 01:00:31,599
start at the top of the funnel we have

01:00:29,859 --> 01:00:33,670
all this we have a lot of stuff coming

01:00:31,599 --> 01:00:37,210
in and depending on what happens here

01:00:33,670 --> 01:00:38,769
and here and here even this probably

01:00:37,210 --> 01:00:40,569
seems like a much smaller number to me

01:00:38,769 --> 01:00:42,519
like an actual physical person but it's

01:00:40,569 --> 01:00:43,569
also the highest quality actually I

01:00:42,519 --> 01:00:47,700
think you're gonna see a much larger

01:00:43,569 --> 01:00:49,809
number they're still ignoring a BRT

01:00:47,700 --> 01:00:52,119
compared to the automated test and the

01:00:49,809 --> 01:00:55,150
reason is the automated test suites are

01:00:52,119 --> 01:01:00,190
not running on near the variety Park or

01:00:55,150 --> 01:01:10,839
that in users right there are thousands

01:01:00,190 --> 01:01:12,430
of models we realized that one time a

01:01:10,839 --> 01:01:15,910
few years ago that there was a whole

01:01:12,430 --> 01:01:20,859
class of laptops that was made to hit a

01:01:15,910 --> 01:01:23,319
certain price point dad after like six

01:01:20,859 --> 01:01:26,010
months of use they couldn't keep up with

01:01:23,319 --> 01:01:27,930
the thermal demands me more because they

01:01:26,010 --> 01:01:32,190
thank you that could be a field in

01:01:27,930 --> 01:01:34,880
Bugzilla how much did you realize it

01:01:32,190 --> 01:01:42,720
came down to just these few models and

01:01:34,880 --> 01:01:43,560
it was thermal issues I'm sure yeah so

01:01:42,720 --> 01:01:45,810
and then that's come where I'm getting

01:01:43,560 --> 01:01:47,490
into because this is a mix of this is

01:01:45,810 --> 01:01:49,230
this this is a human input but it's not

01:01:47,490 --> 01:01:51,300
us necessarily this isn't coming from

01:01:49,230 --> 01:01:54,240
episode we've got SKT which in theory

01:01:51,300 --> 01:01:55,920
over time this probably grows a little

01:01:54,240 --> 01:01:59,190
bit is we had more test size so we're

01:01:55,920 --> 01:02:00,660
going to find more bones this one here

01:01:59,190 --> 01:02:02,910
also grows over time as we get more

01:02:00,660 --> 01:02:04,920
users and as does this and so the phone

01:02:02,910 --> 01:02:07,500
gets bigger and my big concern is what

01:02:04,920 --> 01:02:09,359
happens basically in between here

01:02:07,500 --> 01:02:11,580
because we've got two people right now

01:02:09,359 --> 01:02:13,020
we're gonna triage all of this stuff

01:02:11,580 --> 01:02:15,300
this goes back this really goes back to

01:02:13,020 --> 01:02:17,100
the triage question because if the goal

01:02:15,300 --> 01:02:18,570
of this if very very few bucks are gonna

01:02:17,100 --> 01:02:19,640
be fixed here most of them are going to

01:02:18,570 --> 01:02:21,840
make it all the way to upstream

01:02:19,640 --> 01:02:23,280
hopefully get fixed by somebody else

01:02:21,840 --> 01:02:25,680
in a reasonable amount of time and then

01:02:23,280 --> 01:02:28,050
they get sent out to the world and so my

01:02:25,680 --> 01:02:32,490
question is if we greatly increase

01:02:28,050 --> 01:02:33,900
automation here that seems like it's

01:02:32,490 --> 01:02:35,850
gonna also greatly increase the amount

01:02:33,900 --> 01:02:37,470
of bugs that get tested here and so like

01:02:35,850 --> 01:02:38,460
what I guess the question then goes to

01:02:37,470 --> 01:02:40,200
me it seems like we're going to have a

01:02:38,460 --> 01:02:42,200
triage problem and we may already have

01:02:40,200 --> 01:02:44,590
that today so I think one of the things

01:02:42,200 --> 01:02:47,860
when you

01:02:44,590 --> 01:02:50,860
upstream down the bottom in SKT is going

01:02:47,860 --> 01:02:52,960
to you also feed indirectly there if you

01:02:50,860 --> 01:02:57,660
I pass the whole tunnel and go straight

01:02:52,960 --> 01:02:57,660
up so it's going to do though yes

01:03:07,560 --> 01:03:12,430
convinced it upstream a month goes by

01:03:10,030 --> 01:03:13,870
and it's merged in and also there's an

01:03:12,430 --> 01:03:17,670
issue he's on to something else

01:03:13,870 --> 01:03:17,670
it's a context switching it's problem so

01:03:18,990 --> 01:03:29,680
the more well solves parts of it because

01:03:26,860 --> 01:03:31,420
in theory if I mean maybe we can we

01:03:29,680 --> 01:03:33,730
haven't we haven't fully connected the

01:03:31,420 --> 01:03:35,740
dots between SKT and in actual bugzilla

01:03:33,730 --> 01:03:37,150
probably feeling we've got it SKT going

01:03:35,740 --> 01:03:38,230
into some sort of results set that will

01:03:37,150 --> 01:03:40,810
be reviewed right

01:03:38,230 --> 01:03:42,700
and I feels like at a minimum if that

01:03:40,810 --> 01:03:44,110
results is also going here it's mostly a

01:03:42,700 --> 01:03:46,810
matter of waiting for upstream to fix it

01:03:44,110 --> 01:03:49,480
and then right so the goal is to win SKT

01:03:46,810 --> 01:03:52,270
is run because it's run on Loomis's tree

01:03:49,480 --> 01:03:53,680
and it also be run on on next trees

01:03:52,270 --> 01:03:56,250
before they can get to lanessa street

01:03:53,680 --> 01:03:59,590
the idea is yes sk team might be

01:03:56,250 --> 01:04:02,290
generating more data but the number from

01:03:59,590 --> 01:04:03,370
people your artisanal bugs and your abrt

01:04:02,290 --> 01:04:06,040
bugs should actually go down

01:04:03,370 --> 01:04:08,890
considerably because those bugs never

01:04:06,040 --> 01:04:09,970
actually make it to a shipping door

01:04:08,890 --> 01:04:11,650
the other thing is I think the funds

01:04:09,970 --> 01:04:14,200
that we bill get will be much more

01:04:11,650 --> 01:04:17,079
actionable and concrete just because I

01:04:14,200 --> 01:04:18,940
and those will be able to get more

01:04:17,079 --> 01:04:21,759
attention from keeping jumped on our

01:04:18,940 --> 01:04:24,029
eyes or for some reason they do make it

01:04:21,759 --> 01:04:24,029
further

01:04:25,080 --> 01:04:27,870
like I said it's if someone that

01:04:26,760 --> 01:04:30,150
interested do it by sector it has a

01:04:27,870 --> 01:04:33,060
commit that makes it a lot easy to look

01:04:30,150 --> 01:04:39,270
at things and I mean I don't know

01:04:33,060 --> 01:04:40,830
sometimes I can make it ok so then then

01:04:39,270 --> 01:04:42,660
that may be a less of an issue and then

01:04:40,830 --> 01:04:45,420
just another question so this sounds

01:04:42,660 --> 01:04:47,550
like garbage to me just in terms of how

01:04:45,420 --> 01:04:49,470
we talk about it is there any sort of

01:04:47,550 --> 01:04:51,480
time limit not like do these auto close

01:04:49,470 --> 01:04:54,840
at some point the abrt bugs was that

01:04:51,480 --> 01:04:57,030
when they're released into what is it

01:04:54,840 --> 01:05:00,510
well no actually I think that bad so

01:04:57,030 --> 01:05:03,210
when we do a rebase we usually put out a

01:05:00,510 --> 01:05:05,760
massive bug filing to everybody it's a

01:05:03,210 --> 01:05:06,750
query based the kernel is this still a

01:05:05,760 --> 01:05:09,210
problem for you and we said everything

01:05:06,750 --> 01:05:15,190
to be done and if there's no response to

01:05:09,210 --> 01:05:17,890
that okay

01:05:15,190 --> 01:05:20,530
so because that we do get a ton of

01:05:17,890 --> 01:05:21,760
people who follow BRT bugs because they

01:05:20,530 --> 01:05:23,170
were prompted to do so but then they

01:05:21,760 --> 01:05:27,010
don't even I don't even know that they

01:05:23,170 --> 01:05:28,870
get the emails asking for further and

01:05:27,010 --> 01:05:30,790
the reason is because it feels like you

01:05:28,870 --> 01:05:33,190
know you to get involved basically right

01:05:30,790 --> 01:05:35,470
here is where you guys are and so the

01:05:33,190 --> 01:05:37,060
smaller that the smaller we can make

01:05:35,470 --> 01:05:38,920
this obviously the better but bugs are

01:05:37,060 --> 01:05:40,450
bugs so the next best thing is the

01:05:38,920 --> 01:05:42,280
highest quality information that we can

01:05:40,450 --> 01:05:43,960
feed you guys the better and so if

01:05:42,280 --> 01:05:45,700
you're gonna ignore I guess mine my big

01:05:43,960 --> 01:05:48,670
question was if you ignore I BRT just

01:05:45,700 --> 01:05:49,990
because there's only two of you then do

01:05:48,670 --> 01:05:51,040
they go away at some point or does that

01:05:49,990 --> 01:05:52,510
mean that they just sit there and you

01:05:51,040 --> 01:05:54,040
have to every time you pull the bug with

01:05:52,510 --> 01:05:56,410
stuff you have to like ignore them again

01:05:54,040 --> 01:06:03,190
cuz that's work to know they go away but

01:05:56,410 --> 01:06:08,890
I also do I look at bugs that have been

01:06:03,190 --> 01:06:11,590
given updates in my email because I'm

01:06:08,890 --> 01:06:13,480
doing well that's on that 45 enough 26

01:06:11,590 --> 01:06:15,850
so I'm with the you have 25 in F 26 and

01:06:13,480 --> 01:06:17,650
then security

01:06:15,850 --> 01:06:20,830
whatever's got unread that I need to

01:06:17,650 --> 01:06:22,240
look at very rarely do I have time to go

01:06:20,830 --> 01:06:24,040
back and say I'm just an accrual

01:06:22,240 --> 01:06:25,810
Bugzilla and see what's available you

01:06:24,040 --> 01:06:29,080
know see what needs to be looked at

01:06:25,810 --> 01:06:29,680
because I've hopefully take a look at it

01:06:29,080 --> 01:06:31,720
when it came in

01:06:29,680 --> 01:06:34,900
yeah okay that makes sense doesn't that

01:06:31,720 --> 01:06:36,520
also mean you can't go on vacation yeah

01:06:34,900 --> 01:06:38,440
I went on vacation in place and then you

01:06:36,520 --> 01:06:40,960
spend three days catching up okay they

01:06:38,440 --> 01:06:42,300
cancel so and then my I guess my final

01:06:40,960 --> 01:06:43,450
question before I said I guess cuz I'm

01:06:42,300 --> 01:06:45,820
confused

01:06:43,450 --> 01:06:47,170
so does SKT is they're gonna submit bug

01:06:45,820 --> 01:06:53,350
reports directly upstream is there

01:06:47,170 --> 01:06:54,880
something immediately there to patch

01:06:53,350 --> 01:06:56,260
feedback it's like reviewing a patch but

01:06:54,880 --> 01:06:57,910
hey we noticed your patch

01:06:56,260 --> 01:07:01,990
failed this test for the public tester

01:06:57,910 --> 01:07:03,310
is a failure we got up do I do something

01:07:01,990 --> 01:07:04,690
and that's up to maintain I've joints

01:07:03,310 --> 01:07:06,100
except attached we're hoping that if we

01:07:04,690 --> 01:07:08,800
get it early enough to meet sub maintain

01:07:06,100 --> 01:07:10,930
oh say I'm rejecting this patch of these

01:07:08,800 --> 01:07:14,470
fixes yep

01:07:10,930 --> 01:07:16,960
I didn't sign up for okay that make

01:07:14,470 --> 01:07:19,240
sense I think further on with the human

01:07:16,960 --> 01:07:22,960
entering bugs that it's always been the

01:07:19,240 --> 01:07:24,280
CI cd32 we in general the theory is that

01:07:22,960 --> 01:07:26,080
you know humans myths about you look at

01:07:24,280 --> 01:07:28,270
the bug like why we should have this

01:07:26,080 --> 01:07:31,120
test case in our test we to expand your

01:07:28,270 --> 01:07:32,920
test we open that over timing you catch

01:07:31,120 --> 01:07:42,220
these issues early on there's less human

01:07:32,920 --> 01:08:05,560
reported bugs because these guys were

01:07:42,220 --> 01:08:07,270
the slow turn butter but well I mean you

01:08:05,560 --> 01:08:10,390
can't see that the bias is to blame for

01:08:07,270 --> 01:08:17,620
every bug that originates in BIOS maybe

01:08:10,390 --> 01:08:20,290
we should be handling some of those but

01:08:17,620 --> 01:08:25,060
it mean yeah we should be handling some

01:08:20,290 --> 01:08:27,550
of those things but you know I always

01:08:25,060 --> 01:08:29,929
say that part of this bug reporting and

01:08:27,550 --> 01:08:33,140
triaging is teaching

01:08:29,929 --> 01:08:34,250
better bugs how often do we do that we

01:08:33,140 --> 01:08:36,589
do that all the time

01:08:34,250 --> 01:08:39,920
yeah but the problem with teaching

01:08:36,589 --> 01:08:41,810
though is is that honestly teaching

01:08:39,920 --> 01:08:43,279
itself is a little bit hard to do it

01:08:41,810 --> 01:08:51,080
does it doesn't spill when they're only

01:08:43,279 --> 01:08:52,699
communicate when we have community

01:08:51,080 --> 01:08:56,449
members who are willing to put in work

01:08:52,699 --> 01:08:59,359
like yeah we are happy to help you do

01:08:56,449 --> 01:09:03,319
that and yeah he's gotten two bucks fix

01:08:59,359 --> 01:09:05,270
from court all the time right so yeah if

01:09:03,319 --> 01:09:06,890
community people are showing interest in

01:09:05,270 --> 01:09:09,560
putting effort we're happy to take the

01:09:06,890 --> 01:09:11,779
time to help you do that but we don't

01:09:09,560 --> 01:09:14,810
have time to go through every bug and

01:09:11,779 --> 01:09:16,339
said this years ago to the avrt guys one

01:09:14,810 --> 01:09:18,409
thing I'd love to see attached those

01:09:16,339 --> 01:09:21,049
abrt reports for the colonel and some

01:09:18,409 --> 01:09:23,319
Listowel hardware so we can compare it

01:09:21,049 --> 01:09:23,319
to what we

01:09:31,309 --> 01:09:36,929
hardware are you bidding you know did

01:09:34,799 --> 01:09:37,230
you get pushed back yeah it was years

01:09:36,929 --> 01:09:39,839
ago

01:09:37,230 --> 01:09:42,599
I remember when ad Artie first came in

01:09:39,839 --> 01:09:44,730
and it was actually reported that like

01:09:42,599 --> 01:09:46,259
we thought it was SOS report yeah do you

01:09:44,730 --> 01:09:47,429
remember that we were trying to figure

01:09:46,259 --> 01:09:49,739
out where the hell these things were

01:09:47,429 --> 01:09:51,690
coming from and what the SOS report guys

01:09:49,739 --> 01:09:53,159
and they're like we have nothing to do

01:09:51,690 --> 01:09:56,809
with this and then we discovered there

01:09:53,159 --> 01:10:01,289
was this whole new project doing this

01:09:56,809 --> 01:10:03,630
yeah we at least got them to be able to

01:10:01,289 --> 01:10:05,610
pin down the warning and because one

01:10:03,630 --> 01:10:09,269
point they were just printing out one

01:10:05,610 --> 01:10:12,239
line it was pretty visible

01:10:09,269 --> 01:10:13,920
so at that time this was year again

01:10:12,239 --> 01:10:17,159
years ago maybe I should ask again and

01:10:13,920 --> 01:10:19,019
say would you guys consider do it CC me

01:10:17,159 --> 01:10:20,429
on it because I mean the worst thing

01:10:19,019 --> 01:10:32,539
they're gonna say is no we think that's

01:10:20,429 --> 01:10:35,219
to again this was five six seven years

01:10:32,539 --> 01:10:36,480
to it we just need a quick hardware list

01:10:35,219 --> 01:10:42,239
and we need you to turn on the camera

01:10:36,480 --> 01:10:44,999
take a quick picture you could also in

01:10:42,239 --> 01:10:46,559
the kernel test we say would you like to

01:10:44,999 --> 01:10:49,079
report your hardware the problem is we

01:10:46,559 --> 01:10:50,909
do have users who are using Crewe's

01:10:49,079 --> 01:10:53,850
hardware because they're doing

01:10:50,909 --> 01:10:55,740
development stuff so how do you

01:10:53,850 --> 01:10:57,180
what's part of their but maybe Artie

01:10:55,740 --> 01:10:58,170
stole props like it's still part of the

01:10:57,180 --> 01:10:58,620
report and those guys ought to know

01:10:58,170 --> 01:11:00,600
better

01:10:58,620 --> 01:11:03,300
oh yeah they don't that's on them here's

01:11:00,600 --> 01:11:05,700
one thing that I mean doing the tiny

01:11:03,300 --> 01:11:08,720
amount of kernel bugs there's no

01:11:05,700 --> 01:11:08,720
standard format

01:11:09,930 --> 01:11:13,230
something like that I think if you're

01:11:11,460 --> 01:11:16,260
gonna reform a kernel bug please attach

01:11:13,230 --> 01:11:17,910
the output of this thing right yeah we

01:11:16,260 --> 01:11:19,560
don't have anything like that we can't

01:11:17,910 --> 01:11:22,710
even ask somebody to run I mean I'm sure

01:11:19,560 --> 01:11:25,850
it exists is know we have the tool we

01:11:22,710 --> 01:11:25,850
have to Littlefoot

01:11:29,640 --> 01:11:37,890
when they and attach the output of when

01:11:32,130 --> 01:11:42,510
they submit a kernel one good what the

01:11:37,890 --> 01:11:44,250
problem is to give a default command

01:11:42,510 --> 01:11:45,300
would be collecting way more information

01:11:44,250 --> 01:11:47,610
than we would definitely need on a

01:11:45,300 --> 01:11:50,160
difficult fun and it any further but I

01:11:47,610 --> 01:11:57,510
guess it's better to have it not needed

01:11:50,160 --> 01:11:59,580
to need it yeah have it right so yeah no

01:11:57,510 --> 01:12:02,030
no but users will complain that we're

01:11:59,580 --> 01:12:02,030
asking for

01:12:11,479 --> 01:12:16,489
so you can tell I did this get that

01:12:14,119 --> 01:12:17,869
super fast the time same thing or on a

01:12:16,489 --> 01:12:20,150
whole bunch of stuff if we had that as a

01:12:17,869 --> 01:12:21,800
reusable tool not just for fun reports

01:12:20,150 --> 01:12:25,459
but for them for the test suite also

01:12:21,800 --> 01:12:27,050
included the results then and it was a

01:12:25,459 --> 01:12:27,830
consistent identifier at least forgiven

01:12:27,050 --> 01:12:29,480
release

01:12:27,830 --> 01:12:31,520
and you could kind of tell okay this is

01:12:29,480 --> 01:12:34,340
pretty well tested over 500 different

01:12:31,520 --> 01:12:36,290
configurations or so on yeah if I'm

01:12:34,340 --> 01:12:38,740
going to the trouble of doing with our

01:12:36,290 --> 01:12:38,740
Bugzilla

01:12:42,010 --> 01:12:51,740
he's making s Corinne Road then surely

01:12:47,170 --> 01:12:53,240
well two things one is if it's asking me

01:12:51,740 --> 01:12:54,710
from all the information that someone's

01:12:53,240 --> 01:12:56,420
gonna ask me so there's no more round

01:12:54,710 --> 01:13:00,260
trips he's like I gave you everything

01:12:56,420 --> 01:13:02,540
right but also I've shown that I'm

01:13:00,260 --> 01:13:04,310
willing to give you information yeah and

01:13:02,540 --> 01:13:05,600
obviously we're gonna help a lot more

01:13:04,310 --> 01:13:06,580
effort than that I'm keeping my name

01:13:05,600 --> 01:13:10,930
yeah

01:13:06,580 --> 01:13:10,930
what PCI cards I have plug

01:13:12,960 --> 01:13:17,130
nothing sucks about it's just the people

01:13:14,880 --> 01:13:21,410
from - is there there might not be a

01:13:17,130 --> 01:13:21,410
worse communication medium the mozilla

01:13:37,700 --> 01:13:46,590
mercury branching come back to 10-15

01:13:44,820 --> 01:13:48,240
minutes be a wrap up so we can get maybe

01:13:46,590 --> 01:13:52,290
a summary of what we've talked about to

01:13:48,240 --> 01:13:54,000
do a read French way I figured the

01:13:52,290 --> 01:14:03,150
answer that is simply no and then you

01:13:54,000 --> 01:14:06,620
move on I can give them a small

01:14:03,150 --> 01:14:06,620
background on it just because I was

01:14:08,739 --> 01:14:18,280
as things have now moved from package

01:14:13,110 --> 01:14:19,869
db2 cuz you're one of the drivers for

01:14:18,280 --> 01:14:22,270
that is the ability to create an

01:14:19,869 --> 01:14:26,290
arbitrary branch meeting a branch that

01:14:22,270 --> 01:14:30,160
is not 26 m7f 20

01:14:26,290 --> 01:14:32,120
the benefit to that house please do with

01:14:30,160 --> 01:14:34,550
modularity how they do there

01:14:32,120 --> 01:14:37,929
they're built

01:14:34,550 --> 01:14:37,929
that and

01:14:39,210 --> 01:14:44,100
I do not see any benefit on the colonel

01:14:42,300 --> 01:14:45,060
side of things at all that we do have in

01:14:44,100 --> 01:14:47,690
our prepare a branch called

01:14:45,060 --> 01:14:47,690
stabilisation

01:14:49,969 --> 01:14:57,320
you couldn't do builds off of it you

01:14:52,309 --> 01:14:58,999
wouldn't build on we you could generate

01:14:57,320 --> 01:15:03,570
nests rpm I do scratch builder you can

01:14:58,999 --> 01:15:06,349
build off the Cobras I don't see any

01:15:03,570 --> 01:15:06,349
reason

01:15:09,190 --> 01:15:12,780
I'm

01:15:11,280 --> 01:15:14,850
but I'm part of the part of the reason

01:15:12,780 --> 01:15:17,580
why you don't need to is because I can

01:15:14,850 --> 01:15:21,510
take a rawhide kernel and stick it on 23

01:15:17,580 --> 01:15:26,040
machine or yes and note so you can but

01:15:21,510 --> 01:15:27,570
if you have to if you have to like build

01:15:26,040 --> 01:15:31,640
and how to treat model or something

01:15:27,570 --> 01:15:31,640
you've got it to tell you can do

01:15:34,690 --> 01:15:40,370
talk about beauties you didn't really

01:15:37,520 --> 01:15:43,670
say and such and so laptop that did this

01:15:40,370 --> 01:15:45,800
weird thing but when talk about easy

01:15:43,670 --> 01:15:49,960
therefore thinking about some gnarly

01:15:45,800 --> 01:15:49,960
server that has balls

01:15:51,820 --> 01:16:01,960
server versus so there's there's two big

01:16:00,340 --> 01:16:05,110
components I think that that

01:16:01,960 --> 01:16:07,330
differentiate a server kernel

01:16:05,110 --> 01:16:08,710
one is desktop kernel supporting a much

01:16:07,330 --> 01:16:10,810
wider variety of hardware's we have a

01:16:08,710 --> 01:16:12,970
ton of - you know thinking of the small

01:16:10,810 --> 01:16:14,890
amount of disk space and servers don't

01:16:12,970 --> 01:16:18,610
care about the ones who do are the

01:16:14,890 --> 01:16:19,810
people doing things like Bert and stuff

01:16:18,610 --> 01:16:22,510
like that and that's what we have kernel

01:16:19,810 --> 01:16:24,970
for which should do it on any foreign

01:16:22,510 --> 01:16:26,620
system and then we have kernel modules

01:16:24,970 --> 01:16:29,020
which is basically the drivers for

01:16:26,620 --> 01:16:29,750
common hardware and some people not so

01:16:29,020 --> 01:16:31,730
common

01:16:29,750 --> 01:16:33,440
we have kernel modules in intro which is

01:16:31,730 --> 01:16:35,180
that we're not sure that anybody

01:16:33,440 --> 01:16:38,720
actually uses this other than one or two

01:16:35,180 --> 01:16:40,430
people who have to be turn off so really

01:16:38,720 --> 01:16:44,530
one kernel can kind of serve those needs

01:16:40,430 --> 01:16:46,340
the other thing you see is different is

01:16:44,530 --> 01:16:49,160
server is always going to prefer

01:16:46,340 --> 01:16:50,150
performance over founders workstation

01:16:49,160 --> 01:16:53,449
tester

01:16:50,150 --> 01:16:55,099
prefer power management and one of the

01:16:53,449 --> 01:16:56,840
things that we're planning on doing is

01:16:55,099 --> 01:17:00,060
going through and kind of auditing all

01:16:56,840 --> 01:17:03,450
of those I think a lot of them

01:17:00,060 --> 01:17:04,890
changed our runtime yeah there there yes

01:17:03,450 --> 01:17:06,090
there come to pick up until we choose a

01:17:04,890 --> 01:17:07,280
default but they think that could be

01:17:06,090 --> 01:17:09,239
able

01:17:07,280 --> 01:17:11,330
things that we take to the server so

01:17:09,239 --> 01:17:15,510
you'd say hey we should maybe consider

01:17:11,330 --> 01:17:18,960
making these changes for the server spin

01:17:15,510 --> 01:17:20,880
so that this works for like all saga

01:17:18,960 --> 01:17:22,409
would strongly caution against assuming

01:17:20,880 --> 01:17:26,090
that servers are going to prefer

01:17:22,409 --> 01:17:26,090
performance over power management

01:17:26,969 --> 01:17:30,480
it's these days is pretty much

01:17:28,710 --> 01:17:31,800
everything's going to prefer Power Man a

01:17:30,480 --> 01:17:34,650
store religion just have an unlimited

01:17:31,800 --> 01:17:36,090
power budget so his birthday but it's

01:17:34,650 --> 01:17:38,760
encased at this point you're building

01:17:36,090 --> 01:17:41,940
full data centers with that yeah so it's

01:17:38,760 --> 01:17:44,699
not what now and it just isn't what it

01:17:41,940 --> 01:17:46,260
used to be everything pretty much wants

01:17:44,699 --> 01:17:48,960
the same and weird hardware is not

01:17:46,260 --> 01:17:51,150
exclusive to desktops or servers I mean

01:17:48,960 --> 01:17:53,219
what should be done order to get easier

01:17:51,150 --> 01:17:55,560
net cards or something needs that's

01:17:53,219 --> 01:17:57,719
still pretty weird yeah I mean it's

01:17:55,560 --> 01:17:59,790
still like either way it keeps it at a I

01:17:57,719 --> 01:18:02,239
don't see much the driver to build a

01:17:59,790 --> 01:18:02,239
separate

01:18:04,340 --> 01:18:15,869
perhaps figure out what it's at one time

01:18:09,320 --> 01:18:18,830
I had this scenario to see if we could

01:18:15,869 --> 01:18:18,830
fit into the bottle of

01:18:20,460 --> 01:18:25,440
okay bear you know let's just see if

01:18:23,700 --> 01:18:27,000
it seems like there's a stabilization

01:18:25,440 --> 01:18:28,890
model for the car where it's for

01:18:27,000 --> 01:18:32,160
everything else we're targeting and

01:18:28,890 --> 01:18:33,660
gating where well we need after the fact

01:18:32,160 --> 01:18:36,270
send a boat saying you really broke

01:18:33,660 --> 01:18:38,040
something on performance or systemd

01:18:36,270 --> 01:18:40,500
totally ruin the system that's been up

01:18:38,040 --> 01:18:42,750
for a thousand hours or whatever right

01:18:40,500 --> 01:18:43,860
that's hard to gauge but most the start

01:18:42,750 --> 01:18:45,450
we're going to gate looks like the

01:18:43,860 --> 01:18:49,710
colonel is going to be hard to get right

01:18:45,450 --> 01:18:54,660
so what if the scenario so no one is

01:18:49,710 --> 01:18:56,820
right what if the atomic host says we

01:18:54,660 --> 01:18:59,580
know the new colonel is not fit for

01:18:56,820 --> 01:19:02,360
purpose in the cloud or

01:18:59,580 --> 01:19:02,360
digitalocean

01:19:02,990 --> 01:19:08,820
another cloud we're not gonna ship that

01:19:05,550 --> 01:19:09,660
Colonel until this changes so we're at

01:19:08,820 --> 01:19:12,210
this point where they're gonna

01:19:09,660 --> 01:19:14,460
essentially gate it you're very likely

01:19:12,210 --> 01:19:15,900
gonna use a module to Gaeta

01:19:14,460 --> 01:19:18,210
it could they don't need an architrave

01:19:15,900 --> 01:19:20,130
branch to do that they can refer to an

01:19:18,210 --> 01:19:22,560
over dis commit yes good commit this one

01:19:20,130 --> 01:19:24,810
will do or use some mechanism to ship

01:19:22,560 --> 01:19:27,300
the older colonel well good modular is

01:19:24,810 --> 01:19:30,150
who uses arbitrary plans right right but

01:19:27,300 --> 01:19:32,400
in addition to modules they can refer to

01:19:30,150 --> 01:19:33,630
an older committed this kid like the

01:19:32,400 --> 01:19:35,610
colonel doesn't have to have arbitrary

01:19:33,630 --> 01:19:39,210
branching for modules to do a little bit

01:19:35,610 --> 01:19:43,680
of their magic so now you have a

01:19:39,210 --> 01:19:45,030
situation where for some time unknown

01:19:43,680 --> 01:19:46,170
period of time hopefully not that long

01:19:45,030 --> 01:19:48,360
but I don't think they're trying to

01:19:46,170 --> 01:19:52,050
essentially had the branch where we're

01:19:48,360 --> 01:19:54,860
shipping in a release door my coach a

01:19:52,050 --> 01:19:56,910
colonel that you guys no longer really

01:19:54,860 --> 01:20:01,770
think has essentially brandishing

01:19:56,910 --> 01:20:03,930
someone and one could imagine that our

01:20:01,770 --> 01:20:06,150
security update comes and you're so

01:20:03,930 --> 01:20:10,110
where do we do this what do we do to me

01:20:06,150 --> 01:20:11,850
you know fix that license that security

01:20:10,110 --> 01:20:12,920
update for this colonel that's that way

01:20:11,850 --> 01:20:15,679
on the topic

01:20:12,920 --> 01:20:18,020
yet sort of jumped in I'm not stable

01:20:15,679 --> 01:20:20,330
enough so I'm not saying all of these

01:20:18,020 --> 01:20:21,380
are Givens let's use an example to play

01:20:20,330 --> 01:20:28,130
around and make sure we have a good

01:20:21,380 --> 01:20:30,350
answer to it when you say splice are you

01:20:28,130 --> 01:20:31,940
referring to Kate's place to keep a ship

01:20:30,350 --> 01:20:33,739
I'll let you breathe using that is I

01:20:31,940 --> 01:20:35,900
just use that's a dumb word but I meant

01:20:33,739 --> 01:20:37,640
okay so the idea is that you would have

01:20:35,900 --> 01:20:40,670
to build and redo it

01:20:37,640 --> 01:20:42,350
mostly because I'm having a hard time I

01:20:40,670 --> 01:20:43,850
mentioned this is branching just because

01:20:42,350 --> 01:20:45,350
you're making it sound like well we're

01:20:43,850 --> 01:20:47,929
just gonna pick up an over kernel and

01:20:45,350 --> 01:20:50,060
that's not really branching that's using

01:20:47,929 --> 01:20:52,130
an older kernel and then somehow

01:20:50,060 --> 01:20:54,530
expecting it to be supportive

01:20:52,130 --> 01:21:01,260
so the the other side of that was didn't

01:20:54,530 --> 01:21:04,800
know there needs to be a CV I mean

01:21:01,260 --> 01:21:07,020
right this is really a whole worst-case

01:21:04,800 --> 01:21:08,910
scenario this is your Canora support

01:21:07,020 --> 01:21:10,650
model versus your L support model again

01:21:08,910 --> 01:21:12,660
that's kind of the way it works because

01:21:10,650 --> 01:21:14,520
you know otherwise if we start

01:21:12,660 --> 01:21:18,680
maintaining arbitrary branches for all

01:21:14,520 --> 01:21:18,680
this there's two of us yeah

01:21:40,010 --> 01:21:51,739
well I mean yeah he uses ideally it'd be

01:21:46,040 --> 01:21:54,460
a person for branch the problem is we

01:21:51,739 --> 01:21:54,460
have three people

01:21:58,550 --> 01:22:03,730
the nice thing about having a

01:21:59,869 --> 01:22:03,730
three-person rotation just for you

01:22:06,540 --> 01:22:13,910
we're different

01:22:10,710 --> 01:22:13,910
it really helped us in

01:22:18,739 --> 01:22:23,930
so that's the that's the second most

01:22:21,200 --> 01:22:26,350
disturbing thing I've seen I would like

01:22:23,930 --> 01:22:26,350
to see

01:22:31,800 --> 01:22:35,640
for me though and I see my problem is I

01:22:34,110 --> 01:22:38,280
don't still don't know from a user

01:22:35,640 --> 01:22:39,999
perspective how this perturbation

01:22:38,280 --> 01:22:42,639
what

01:22:39,999 --> 01:22:44,229
I would you mentioned earlier that well

01:22:42,639 --> 01:22:46,659
obviously no one tested the rawhide

01:22:44,229 --> 01:22:47,800
colonel because well there's a lot of

01:22:46,659 --> 01:22:50,199
times when I would test the rawhide

01:22:47,800 --> 01:22:51,519
colonel but I know what it is wrong now

01:22:50,199 --> 01:22:55,989
I know that I can pull the rawhide

01:22:51,519 --> 01:22:58,570
Colonel manually and and well you're one

01:22:55,989 --> 01:23:00,219
of the people who does test drive Brian

01:22:58,570 --> 01:23:01,630
fairly frequently and these are not

01:23:00,219 --> 01:23:04,210
problems that you know these problems

01:23:01,630 --> 01:23:06,579
shut up in a rebase 126 sure so it was

01:23:04,210 --> 01:23:07,690
that Colonel on 26 they showed up what

01:23:06,579 --> 01:23:09,190
I'm saying is we don't have the breadth

01:23:07,690 --> 01:23:10,570
of it I mean people who are right who

01:23:09,190 --> 01:23:11,860
are building their own models and

01:23:10,570 --> 01:23:13,539
secured signing admitted throwing those

01:23:11,860 --> 01:23:20,590
keys in UEFI yeah it's probably a very

01:23:13,539 --> 01:23:26,229
small number yes but it's just if there

01:23:20,590 --> 01:23:29,380
was an easy way for me to otherwise

01:23:26,229 --> 01:23:31,719
release machine to follow the colonel

01:23:29,380 --> 01:23:41,090
did you like me to be tested right I

01:23:31,719 --> 01:23:43,830
would do that you can go into your young

01:23:41,090 --> 01:23:46,890
the rawhide repo or if you really want

01:23:43,830 --> 01:23:48,690
to the rawhide no to bug repo and you

01:23:46,890 --> 01:23:50,820
can all hide nota bug is kind of

01:23:48,690 --> 01:23:53,210
loneliness this weekend even if you want

01:23:50,820 --> 01:23:55,650
to do all abroad either you can say :

01:23:53,210 --> 01:23:58,200
and I will exclude every other package

01:23:55,650 --> 01:24:00,510
you do a DNF update and it will grab

01:23:58,200 --> 01:24:02,640
colonel from rawhide provided it to

01:24:00,510 --> 01:24:12,210
Newark or if for some reason it world it

01:24:02,640 --> 01:24:14,070
whatever from you have 26 but there can

01:24:12,210 --> 01:24:16,740
be problems with tools any mismatches if

01:24:14,070 --> 01:24:18,090
your if you want to build out of tree

01:24:16,740 --> 01:24:22,050
gap you're going to put a little bit

01:24:18,090 --> 01:24:24,090
more than just curl yeah look that and

01:24:22,050 --> 01:24:26,100
those are all hi criminals are signed

01:24:24,090 --> 01:24:27,780
and all of that mess I mean indeed a

01:24:26,100 --> 01:24:30,840
course to the rawhide no to bug kernels

01:24:27,780 --> 01:24:32,340
are not song okay well that comes from a

01:24:30,840 --> 01:24:33,960
separate repository right right there

01:24:32,340 --> 01:24:37,380
they're not inside there there Cody

01:24:33,960 --> 01:24:40,430
scratch bills the axle rod journals are

01:24:37,380 --> 01:24:40,430
signed in there secure boot

01:24:41,299 --> 01:24:46,909
but they have the bun another bucket

01:24:44,299 --> 01:24:48,769
where we accept that I mean they have to

01:24:46,909 --> 01:24:50,629
 examples and all that they do

01:24:48,769 --> 01:24:52,849
have the looking symbols per week did we

01:24:50,629 --> 01:24:54,709
made an effort just like a year and a

01:24:52,849 --> 01:24:56,719
half ago to figure out what was making

01:24:54,709 --> 01:24:58,279
the bug crawls so slow and we did try a

01:24:56,719 --> 01:25:03,439
couple of options to speed it up so

01:24:58,279 --> 01:25:04,939
there they are slower but there it's not

01:25:03,439 --> 01:25:09,619
like it used to be where it was almost

01:25:04,939 --> 01:25:11,659
been these relations I'm I'm sort of

01:25:09,619 --> 01:25:15,399
seeing no problem we have a lot of

01:25:11,659 --> 01:25:15,399
problem on testing it's not just a car

01:25:17,340 --> 01:25:21,260
deal with pests

01:25:19,250 --> 01:25:23,000
all of their release but that's not a

01:25:21,260 --> 01:25:24,920
topic here it's just if there should be

01:25:23,000 --> 01:25:25,940
if there was a place there should be a

01:25:24,920 --> 01:25:28,820
check box free

01:25:25,940 --> 01:25:32,780
give me the weirdest kernel possible

01:25:28,820 --> 01:25:35,290
right and you know let me see how are

01:25:32,780 --> 01:25:38,210
well and we did just get a suggestion

01:25:35,290 --> 01:25:41,060
asking us to do the door test day for

01:25:38,210 --> 01:25:42,980
Toronto just like they do with test days

01:25:41,060 --> 01:25:44,750
or several other things who I'm going to

01:25:42,980 --> 01:25:46,990
do that see if they're scheduled if

01:25:44,750 --> 01:25:49,990
there's time the scheduled for f27 but

01:25:46,990 --> 01:25:49,990
certainly

01:25:52,789 --> 01:25:57,619
we could even we might even be able to

01:25:55,429 --> 01:26:00,530
do that on babies

01:25:57,619 --> 01:26:04,130
right yeah if we do the week before real

01:26:00,530 --> 01:26:05,630
a rebase I create images for people or

01:26:04,130 --> 01:26:06,920
you can download their kernel to this

01:26:05,630 --> 01:26:08,809
repository if you want to run it on your

01:26:06,920 --> 01:26:10,639
yeah so that's something we can do to

01:26:08,809 --> 01:26:26,449
maybe get more people actively testing

01:26:10,639 --> 01:26:29,469
every major well got rawhide known about

01:26:26,449 --> 01:26:29,469
for a long time anyway

01:26:32,890 --> 01:26:37,270
the other thing copper doesn't build as

01:26:34,480 --> 01:26:38,920
many architectures as doing could be

01:26:37,270 --> 01:26:41,620
that way

01:26:38,920 --> 01:26:43,180
however actually has I don't know why

01:26:41,620 --> 01:26:44,950
they they will not change it for us

01:26:43,180 --> 01:26:48,790
their time off I use exceptionally low

01:26:44,950 --> 01:26:51,930
so we can only build x86 64 96-86 will

01:26:48,790 --> 01:26:51,930
fail but as it times out

01:26:58,289 --> 01:27:03,070
but in response to what you were saying

01:27:01,059 --> 01:27:05,320
to me the most logical thing there is we

01:27:03,070 --> 01:27:08,459
have an issue that is is preventing a

01:27:05,320 --> 01:27:08,459
colonel for working on Tommy

01:27:08,780 --> 01:27:12,409
that shouldn't have to sit them that

01:27:11,300 --> 01:27:13,980
should be something that gets addressed

01:27:12,409 --> 01:27:15,780
before

01:27:13,980 --> 01:27:18,120
you know I understand if we've got an

01:27:15,780 --> 01:27:19,890
issue that's hitting one or two users

01:27:18,120 --> 01:27:21,330
somewhere because they're they have

01:27:19,890 --> 01:27:23,520
arbitrary hard way that things are

01:27:21,330 --> 01:27:25,280
affecting a lot of users even this qxl

01:27:23,520 --> 01:27:27,719
file gets gone on all one day I want to

01:27:25,280 --> 01:27:28,980
part of that is because we've had some

01:27:27,719 --> 01:27:33,860
of the other things at the same time

01:27:28,980 --> 01:27:33,860
that I was upstream and let me see

01:27:40,920 --> 01:27:49,180
so the mismatch Wilkinson is this

01:27:46,750 --> 01:27:52,560
matches back very quickly or some of

01:27:49,180 --> 01:27:54,610
those delivery mechanisms they won't be

01:27:52,560 --> 01:27:55,880
like we're definitely the brakes over

01:27:54,610 --> 01:27:57,550
ship

01:27:55,880 --> 01:28:05,510
you have to contain is a container

01:27:57,550 --> 01:28:06,800
oriented host and you're right there's

01:28:05,510 --> 01:28:08,870
totally a window where the security of

01:28:06,800 --> 01:28:12,590
it comes well we don't really have an

01:28:08,870 --> 01:28:14,420
answer for scrambling great the other

01:28:12,590 --> 01:28:19,030
thing is it's so the the number of CPUs

01:28:14,420 --> 01:28:21,860
that come into the kernel are very large

01:28:19,030 --> 01:28:24,840
but the number of those CDs that

01:28:21,860 --> 01:28:27,090
actually would impact

01:28:24,840 --> 01:28:29,789
raucous is usually with ex weird driver

01:28:27,090 --> 01:28:34,050
well it's weird driver there is like one

01:28:29,789 --> 01:28:36,360
I patched yesterday yesterday but it is

01:28:34,050 --> 01:28:37,590
a you can crash the system by doing this

01:28:36,360 --> 01:28:41,219
to the driver that you should be able to

01:28:37,590 --> 01:28:42,869
do you have to be route to do it if I'm

01:28:41,219 --> 01:28:45,619
loose I can crash the system no matter

01:28:42,869 --> 01:28:47,489
what so it doesn't matter that's I

01:28:45,619 --> 01:28:49,530
understand the way the security research

01:28:47,489 --> 01:28:52,559
community has gotten but really that's

01:28:49,530 --> 01:28:54,960
not in critical bits right the route

01:28:52,559 --> 01:28:57,170
update that caused me to push for 12

01:28:54,960 --> 01:28:57,170
five

01:29:00,209 --> 01:29:06,149
that was a local root that's something

01:29:03,479 --> 01:29:08,409
that you think that's something that yes

01:29:06,149 --> 01:29:12,140
we needed to force

01:29:08,409 --> 01:29:14,000
it's been months since we've seen

01:29:12,140 --> 01:29:16,119
well usually to get their own website

01:29:14,000 --> 01:29:18,580
marketing and t-shirts and everything

01:29:16,119 --> 01:29:30,969
well those are those are more likely the

01:29:18,580 --> 01:29:33,219
remote route but yeah well those are

01:29:30,969 --> 01:29:36,369
treated with absolute priority I began

01:29:33,219 --> 01:29:39,540
yeah still but those are few and far

01:29:36,369 --> 01:29:39,540
between those happen

01:29:41,950 --> 01:29:46,230
and what I would like to sometimes

01:29:47,110 --> 01:29:51,209
which means somebody knows about them

01:29:48,880 --> 01:29:52,469
before we find

01:29:51,209 --> 01:29:54,510
and I'm kind of wondering if there's a

01:29:52,469 --> 01:29:55,909
way that we could find out about them to

01:29:54,510 --> 01:29:59,329
make sure that we're ready on day one

01:29:55,909 --> 01:30:03,659
and you know if we know this is coming

01:29:59,329 --> 01:30:05,459
maybe we're not going to push a rebase

01:30:03,659 --> 01:30:06,749
a couple days before because we know

01:30:05,459 --> 01:30:08,999
that this is coming and we're gonna want

01:30:06,749 --> 01:30:09,599
to do one last build this process is

01:30:08,999 --> 01:30:12,269
long

01:30:09,599 --> 01:30:13,650
well said that the process hasn't run

01:30:12,269 --> 01:30:16,040
some of that security stuff run some

01:30:13,650 --> 01:30:19,190
very close list

01:30:16,040 --> 01:30:21,890
so you should yeah you should discuss

01:30:19,190 --> 01:30:25,210
with we have security people on Ellis

01:30:21,890 --> 01:30:25,210
it's just a matter of making sure that

01:30:25,810 --> 01:30:38,680
there's no problem telling you just

01:30:37,210 --> 01:30:43,900
pragmatically speaking there will be a

01:30:38,680 --> 01:30:45,910
problem if they fix it before they do

01:30:43,900 --> 01:30:54,250
get a picks up before L does anyway just

01:30:45,910 --> 01:30:57,100
because however that fix my not one of

01:30:54,250 --> 01:31:01,630
those bad analogies but but that fix

01:30:57,100 --> 01:31:03,190
might also include some regressions the

01:31:01,630 --> 01:31:04,930
Fedora fix is there but it's also part

01:31:03,190 --> 01:31:16,030
of the stable update that's got 130 so

01:31:04,930 --> 01:31:18,100
other clarify did you know further

01:31:16,030 --> 01:31:19,300
questions about the config process and

01:31:18,100 --> 01:31:21,690
it got touched on a little bit but we

01:31:19,300 --> 01:31:21,690
did kind of

01:31:22,410 --> 01:31:28,590
best effort if you don't like them

01:31:25,920 --> 01:31:30,420
I didn't clarify it sounds like there's

01:31:28,590 --> 01:31:34,530
no explicit relationship between the

01:31:30,420 --> 01:31:37,070
Fedora config and be Rao config and

01:31:34,530 --> 01:31:39,390
that's intentional but at the same time

01:31:37,070 --> 01:31:41,160
there's nothing preventing any changes

01:31:39,390 --> 01:31:43,140
from happening to fedora config we can

01:31:41,160 --> 01:31:44,040
talk to you guys first no in fact that's

01:31:43,140 --> 01:31:45,690
one of the things we've been talking

01:31:44,040 --> 01:31:47,400
about is how can we how can we leverage

01:31:45,690 --> 01:31:49,260
some of them because there's two of us

01:31:47,400 --> 01:31:50,760
there are a lot more rel Carmel

01:31:49,260 --> 01:31:52,170
engineers and people with

01:31:50,760 --> 01:31:54,420
specializations and all these different

01:31:52,170 --> 01:31:56,610
areas when we make a best cast effort we

01:31:54,420 --> 01:31:58,740
would love it if somebody says actually

01:31:56,610 --> 01:32:02,000
if you do this you will know for sure

01:31:58,740 --> 01:32:02,000
that couple of bigs

01:32:05,360 --> 01:32:09,880
the problem is that even familiar that

01:32:07,310 --> 01:32:12,620
they doesn't know how to tell you

01:32:09,880 --> 01:32:14,150
maybe's yourself it's this way right now

01:32:12,620 --> 01:32:16,180
what if what would be the best way for

01:32:14,150 --> 01:32:18,950
you to get that bitmap

01:32:16,180 --> 01:32:21,520
what does it look for for those types of

01:32:18,950 --> 01:32:21,520
things or

01:32:28,619 --> 01:32:31,310
we would like to see it that's the kind

01:32:30,420 --> 01:32:33,989
of things that probably should be

01:32:31,310 --> 01:32:35,699
usually publicans rawhide and then they

01:32:33,989 --> 01:32:55,560
would trickle down and there's certain

01:32:35,699 --> 01:32:58,080
things yeah that's why I mentioned if

01:32:55,560 --> 01:33:00,570
that gets us feedback then yeah well

01:32:58,080 --> 01:33:03,320
because we we wanted to do its best but

01:33:00,570 --> 01:33:06,090
during the merge window there's

01:33:03,320 --> 01:33:13,440
sometimes dozens every day for like two

01:33:06,090 --> 01:33:14,940
weeks right so that's the problem is we

01:33:13,440 --> 01:33:17,449
take them when they come in but then

01:33:14,940 --> 01:33:17,449
there's no

01:33:19,610 --> 01:33:26,800
oh you have this one then maybe this

01:33:23,270 --> 01:33:26,800
holder is your change now across

01:33:27,440 --> 01:33:31,600
every once in a while that stuff

01:33:38,720 --> 01:33:44,850
and we need to go through you know we've

01:33:41,700 --> 01:33:46,790
got drivers that we're supporting now or

01:33:44,850 --> 01:33:48,260
some of those

01:33:46,790 --> 01:33:50,680
the drivers that the hardware just

01:33:48,260 --> 01:33:50,680
doesn't exist

01:33:51,530 --> 01:33:57,150
well somebody will appear on the mailing

01:33:54,930 --> 01:33:59,780
notes to tell you what exists I'm sure

01:33:57,150 --> 01:34:01,830
one way to know whether it exists or not

01:33:59,780 --> 01:34:03,750
and that's that's what we had done in

01:34:01,830 --> 01:34:05,430
the past yet there have been past as

01:34:03,750 --> 01:34:06,750
work okay I'm turning off a whole bunch

01:34:05,430 --> 01:34:07,770
of stuff and let's see who complains

01:34:06,750 --> 01:34:10,800
there's somebody complaints that get

01:34:07,770 --> 01:34:12,630
turned off yeah it happens a draw I

01:34:10,800 --> 01:34:15,710
didn't if it happens to when they went

01:34:12,630 --> 01:34:19,050
into rebus gets pushed out to testing

01:34:15,710 --> 01:34:21,240
but for those types of those types of

01:34:19,050 --> 01:34:22,110
things what we typically do is just run

01:34:21,240 --> 01:34:24,660
them all wrong

01:34:22,110 --> 01:34:25,920
what other kernels get rebased to that

01:34:24,660 --> 01:34:30,120
version they don't carry those

01:34:25,920 --> 01:34:31,530
convictions but when we do f28 then all

01:34:30,120 --> 01:34:33,000
the testing to that is testing without

01:34:31,530 --> 01:34:35,100
those modules or somebody can place that

01:34:33,000 --> 01:34:36,520
says Davis 1427 where doesn't work 28

01:34:35,100 --> 01:34:37,600
then we can

01:34:36,520 --> 01:34:40,380
maybe we should turn that back on

01:34:37,600 --> 01:34:40,380
because somebody knows

01:34:40,900 --> 01:34:44,350
then you had a whole bunch that got

01:34:42,010 --> 01:34:47,280
through with nobody noticed and nobody's

01:34:44,350 --> 01:34:47,280
brought up sense yeah

01:34:52,039 --> 01:34:55,610
I didn't have anything more I mean

01:34:54,139 --> 01:34:57,769
people we still have another half hours

01:34:55,610 --> 01:34:59,059
as if people want to talk about go back

01:34:57,769 --> 01:35:02,030
to any other topic that has the test

01:34:59,059 --> 01:35:04,449
aiming for stuff working any open floor

01:35:02,030 --> 01:35:04,449
for whatever

01:35:05,179 --> 01:35:07,880
we've got to report something back

01:35:06,769 --> 01:35:10,730
tomorrow right

01:35:07,880 --> 01:35:12,590
do you have what you need for that um I

01:35:10,730 --> 01:35:15,560
mean if people aren't working that now

01:35:12,590 --> 01:35:17,180
I'm sure I can yes right did this

01:35:15,560 --> 01:35:19,160
marketing you know I knew Friday is

01:35:17,180 --> 01:35:23,000
supposed to be like a readout of a piece

01:35:19,160 --> 01:35:24,530
of today's session summary I mean so as

01:35:23,000 --> 01:35:26,660
far as kernel testing goes I think it

01:35:24,530 --> 01:35:28,640
was mostly reporting feedback I think it

01:35:26,660 --> 01:35:29,930
heard the what I heard was is that

01:35:28,640 --> 01:35:32,270
people were generally happy with the

01:35:29,930 --> 01:35:35,800
approach proposed about bringing in the

01:35:32,270 --> 01:35:37,970
new carl test suite to be able to to run

01:35:35,800 --> 01:35:43,490
hopefully this will be able to get it

01:35:37,970 --> 01:35:45,200
running on more more hardware to be more

01:35:43,490 --> 01:35:46,820
hardware and more people to be able to

01:35:45,200 --> 01:35:48,650
get that feedback and then that kind of

01:35:46,820 --> 01:35:52,550
ties into the non we had engaged in

01:35:48,650 --> 01:35:56,600
terms of just the bugzilla feedback loop

01:35:52,550 --> 01:35:58,970
where i don't think we necessarily

01:35:56,600 --> 01:36:02,960
double up at action but i think it

01:35:58,970 --> 01:36:04,790
sounds like that the hope is is that the

01:36:02,960 --> 01:36:08,240
testing will give us higher-quality bugs

01:36:04,790 --> 01:36:09,500
zilla's and be able to put that in and

01:36:08,240 --> 01:36:12,680
there's also the really good idea about

01:36:09,500 --> 01:36:16,520
arranging a fedora kernel test day as

01:36:12,680 --> 01:36:18,260
well so that's one thing and then

01:36:16,520 --> 01:36:19,850
arbitrary brushing i think the

01:36:18,260 --> 01:36:24,830
conclusion is no the kernel is not going

01:36:19,850 --> 01:36:28,130
to do it it's just too much work for us

01:36:24,830 --> 01:36:29,780
so I think that's what I have if

01:36:28,130 --> 01:36:31,640
somebody I really think if somebody were

01:36:29,780 --> 01:36:34,900
to provide like a very valid argument on

01:36:31,640 --> 01:36:34,900
why you wanted

01:36:36,330 --> 01:36:41,430
entertainment just like out of tree

01:36:39,780 --> 01:36:43,140
branches and ever having out of tree

01:36:41,430 --> 01:36:45,510
patch that's right our default is you

01:36:43,140 --> 01:36:46,470
know it's not going upstream very soon

01:36:45,510 --> 01:36:49,670
we're not going to carry it good

01:36:46,470 --> 01:36:49,670
sometimes there are cases we do

01:37:20,150 --> 01:37:24,630
yeah this is good discussion I just want

01:37:22,860 --> 01:37:25,680
to clarify is there anything else anyone

01:37:24,630 --> 01:37:27,980
would like me to highlight in the

01:37:25,680 --> 01:37:27,980
summary

01:37:32,520 --> 01:37:36,570
a decent number of resources to acting

01:37:34,650 --> 01:37:37,950
Fedora which is kind of Awesome

01:37:36,570 --> 01:37:39,600
yes that's a very good point I'll make

01:37:37,950 --> 01:37:41,520
sure I make that I will say the one

01:37:39,600 --> 01:37:43,730
thing I did not know coming in is that

01:37:41,520 --> 01:37:43,730
there's

01:37:44,319 --> 01:37:53,709
okay they're magnificent people yes okay

01:37:51,639 --> 01:38:09,579
I will stop trying to run the show then

01:37:53,709 --> 01:38:10,929
and let you in let y'all talk so we're

01:38:09,579 --> 01:38:13,319
trying to figure out because the

01:38:10,929 --> 01:38:15,579
probably don't wanna do is spam people

01:38:13,319 --> 01:38:17,199
we're - we're still in the testing phase

01:38:15,579 --> 01:38:19,239
and maybe the way to say it with this

01:38:17,199 --> 01:38:20,649
stuff to find out what the emails need

01:38:19,239 --> 01:38:23,199
to look like do they have all the

01:38:20,649 --> 01:38:25,149
information etc so we're just gonna send

01:38:23,199 --> 01:38:26,589
them internal for a while and then leave

01:38:25,149 --> 01:38:28,839
them out but just in a ballpark should I

01:38:26,589 --> 01:38:33,339
expect if I don't hey anything for I

01:38:28,839 --> 01:38:36,269
expect weeks months a year so I'll give

01:38:33,339 --> 01:38:36,269
you status in the roll-ups

01:39:00,070 --> 01:39:04,650
I did another question for Justin

01:39:06,270 --> 01:39:10,690
so what with go back to the funnel with

01:39:09,070 --> 01:39:12,550
the triage and AUSA

01:39:10,690 --> 01:39:14,860
if you guys had like a very low level

01:39:12,550 --> 01:39:19,630
almost intern level person would that

01:39:14,860 --> 01:39:24,400
help you when they get in your way for

01:39:19,630 --> 01:39:27,300
the triage texture it's I'm not saying

01:39:24,400 --> 01:39:27,300
that triage

01:39:32,819 --> 01:39:38,849
you know but it is very time-consuming

01:39:34,619 --> 01:39:40,229
and it at very thinkwe stop me we had an

01:39:38,849 --> 01:39:41,209
intern to do it you know we're gonna go

01:39:40,229 --> 01:39:43,379
through eternity

01:39:41,209 --> 01:39:46,499
well asking people to give more

01:39:43,379 --> 01:39:49,049
information and they're like well and

01:39:46,499 --> 01:39:52,559
also going down to the okay this is an

01:39:49,049 --> 01:39:53,969
ATM well right he's inclined to make

01:39:52,559 --> 01:40:04,019
sure the right people to Luci feed on

01:39:53,969 --> 01:40:05,339
him I would never turn down I mean my

01:40:04,019 --> 01:40:06,689
part of my first job right out of

01:40:05,339 --> 01:40:07,859
college when I was learning to be

01:40:06,689 --> 01:40:09,510
Colonel development I spent a long time

01:40:07,859 --> 01:40:12,899
learning how to be bug triage and it is

01:40:09,510 --> 01:40:14,129
very it's it's very valuable and it's a

01:40:12,899 --> 01:40:15,749
good skill to learn how to heavens the

01:40:14,129 --> 01:40:17,789
right way to learn a lot but you do also

01:40:15,749 --> 01:40:18,959
make sure there's the mentoring feedback

01:40:17,789 --> 01:40:19,949
to make sure you're not just throwing

01:40:18,959 --> 01:40:22,249
them out to the weeds and they are

01:40:19,949 --> 01:40:22,249
learning something

01:40:24,460 --> 01:40:30,010
that person becomes the first person

01:40:27,820 --> 01:40:32,349
anybody talks to after listen to the

01:40:30,010 --> 01:40:34,810
phone unless they submit a really good

01:40:32,349 --> 01:40:37,290
bond and those people are generally

01:40:34,810 --> 01:40:37,290
upset

01:40:38,360 --> 01:40:44,180
well a lot of the a lot of it's a higher

01:40:42,650 --> 01:40:45,620
level of math right it's just making

01:40:44,180 --> 01:40:47,540
sure that they're assigned to the right

01:40:45,620 --> 01:40:50,060
people but yeah good see them and things

01:40:47,540 --> 01:40:51,470
like that sometimes you're not asking

01:40:50,060 --> 01:40:53,210
for right there's a decent amount of

01:40:51,470 --> 01:40:55,640
information there but this is a this is

01:40:53,210 --> 01:40:58,100
a I 915 bug so I need to make sure this

01:40:55,640 --> 01:41:01,220
because they follow actually based on

01:40:58,100 --> 01:41:03,230
the the xor gate driver yeah component

01:41:01,220 --> 01:41:04,520
instead of the kernel component so even

01:41:03,230 --> 01:41:06,200
though it's a kernel problem it gets

01:41:04,520 --> 01:41:07,880
assigned forward that's a question

01:41:06,200 --> 01:41:09,620
there's really only two people and I

01:41:07,880 --> 01:41:12,860
find a bug in a sound driver so we get

01:41:09,620 --> 01:41:14,510
CC to the sound people were just well

01:41:12,860 --> 01:41:17,210
there is that right I don't think we

01:41:14,510 --> 01:41:19,700
really employ sound people right I mean

01:41:17,210 --> 01:41:22,220
I mean there is a separate line to CC

01:41:19,700 --> 01:41:24,110
but I don't know who actually know it

01:41:22,220 --> 01:41:26,780
yeah that really needs to go upstream

01:41:24,110 --> 01:41:28,940
okay yeah and that's the worst part is

01:41:26,780 --> 01:41:31,850
and unless it's like sound that's in a

01:41:28,940 --> 01:41:34,180
laptop that a whole bunch of people have

01:41:31,850 --> 01:41:34,180
yeah

01:41:40,840 --> 01:41:48,300
so one question kind of calls from there

01:41:46,260 --> 01:41:53,510
is there any level of testing that you

01:41:48,300 --> 01:41:53,510
would accept as a teen or you before

01:41:54,199 --> 01:42:01,320
automated testing yes you accept as

01:41:56,730 --> 01:42:03,420
gaming before it goes into a non rise so

01:42:01,320 --> 01:42:06,989
yes like the the test we have right now

01:42:03,420 --> 01:42:07,710
on the but to really run on Raw

01:42:06,989 --> 01:42:11,039
hands-free

01:42:07,710 --> 01:42:12,659
I am Rudess we would consider a lot I

01:42:11,039 --> 01:42:16,079
are I would personally consider a lot

01:42:12,659 --> 01:42:17,849
more testing than going to office even a

01:42:16,079 --> 01:42:19,469
rawhide stream should be aided by what

01:42:17,849 --> 01:42:20,940
we're running right now on that as the

01:42:19,469 --> 01:42:24,360
quick test on the independent which is

01:42:20,940 --> 01:42:25,860
really does it boot does it or is it

01:42:24,360 --> 01:42:28,079
signed correctly for a secure boot

01:42:25,860 --> 01:42:30,890
because for plane it's a problem

01:42:28,079 --> 01:42:33,170
sometimes pee sign flips out and

01:42:30,890 --> 01:42:35,360
that pesky which one we don't give in

01:42:33,170 --> 01:42:37,340
systems

01:42:35,360 --> 01:42:38,870
so we want to make sure that a boots at

01:42:37,340 --> 01:42:44,230
least in a NME M we want to make sure

01:42:38,870 --> 01:42:44,230
that it's signed by a airwheel key

01:42:46,540 --> 01:42:50,100
let's probably start also

01:42:50,469 --> 01:42:57,469
yeah we can work from there but that to

01:42:54,979 --> 01:42:59,659
me is even acceptable getting parole if

01:42:57,469 --> 01:43:02,599
we want to talk maybe a step above that

01:42:59,659 --> 01:43:05,630
I would say can you do basic networking

01:43:02,599 --> 01:43:09,439
I mean can you think think about a basic

01:43:05,630 --> 01:43:12,550
network virtualization do I peek do the

01:43:09,439 --> 01:43:12,550
IDC IP command

01:43:25,000 --> 01:43:31,360
public past which kind of helped by the

01:43:28,730 --> 01:43:33,910
beta testing

01:43:31,360 --> 01:43:35,620
absolutely I would love to see them that

01:43:33,910 --> 01:43:38,170
I would actually yes I would take a

01:43:35,620 --> 01:43:39,850
large a large number of those who say as

01:43:38,170 --> 01:43:44,370
these are critical enough that we would

01:43:39,850 --> 01:43:44,370
get a rebase or stable releases

01:43:50,030 --> 01:43:56,880
from what you have I guess my one

01:43:53,880 --> 01:43:58,860
concern though would be how do we make

01:43:56,880 --> 01:44:01,290
sure we can act if we find a gating

01:43:58,860 --> 01:44:03,390
problem actually getting it fixed I mean

01:44:01,290 --> 01:44:04,800
the hope is is that if we think we'd be

01:44:03,390 --> 01:44:06,270
fighting we would be fundamental enough

01:44:04,800 --> 01:44:11,390
that say Colonel maintainers would in

01:44:06,270 --> 01:44:11,390
fact care but you know who knows what

01:44:25,910 --> 01:44:36,110
there are no itself to say there's a

01:44:33,720 --> 01:44:36,110
good answer

01:44:36,699 --> 01:44:48,849
ltp and random test acts panics that we

01:44:41,389 --> 01:44:48,849
say right it's gonna take at this point

01:44:49,330 --> 01:44:54,679
what actually happened yeah I think

01:44:53,300 --> 01:44:57,380
that's a good I think right now I think

01:44:54,679 --> 01:44:58,760
my opinion is is that I mean more tests

01:44:57,380 --> 01:45:01,010
are great I think you're right we need

01:44:58,760 --> 01:45:02,780
the human gating and not Auto gating and

01:45:01,010 --> 01:45:06,080
saying sorry you don't get to release so

01:45:02,780 --> 01:45:09,650
so so the way the gating works there are

01:45:06,080 --> 01:45:12,420
some Fedora project talking about where

01:45:09,650 --> 01:45:14,460
it doesn't work

01:45:12,420 --> 01:45:17,550
right that's that's enforced by policy

01:45:14,460 --> 01:45:19,260
in the project on package level all the

01:45:17,550 --> 01:45:22,170
gating is essentially under your control

01:45:19,260 --> 01:45:23,670
yeah if if you feel like that tested

01:45:22,170 --> 01:45:25,860
 or the colonel has changed

01:45:23,670 --> 01:45:27,270
sufficiently or really all the odds are

01:45:25,860 --> 01:45:29,370
stacked against us we have to get this

01:45:27,270 --> 01:45:31,500
out security vulnerability despite this

01:45:29,370 --> 01:45:34,020
you get to change the test disable one

01:45:31,500 --> 01:45:39,240
whom the gaming has changed based on

01:45:34,020 --> 01:45:41,670
what you like said I wouldn't mind

01:45:39,240 --> 01:45:43,950
seeing some of that on Raw to the point

01:45:41,670 --> 01:45:49,350
of we have to at least boot and we have

01:45:43,950 --> 01:45:50,790
to be good so yeah yeah we have those

01:45:49,350 --> 01:45:52,920
work of it

01:45:50,790 --> 01:45:53,910
it would be nice if we just on that for

01:45:52,920 --> 01:45:56,100
a life because that way you're not

01:45:53,910 --> 01:45:58,410
sitting at a console living Colonel did

01:45:56,100 --> 01:45:59,820
and we have we have the power know we

01:45:58,410 --> 01:46:01,590
can enable that within days right now

01:45:59,820 --> 01:46:03,980
awesome do you have the test suite there

01:46:01,590 --> 01:46:03,980
we could actually

01:46:06,380 --> 01:46:10,060
I would like to see

01:46:11,360 --> 01:46:14,300
the next merchant one does it was going

01:46:13,040 --> 01:46:17,930
to be opening up seed so I'll be curious

01:46:14,300 --> 01:46:21,130
to see how effective the test is during

01:46:17,930 --> 01:46:21,130
the merge went over to seven the merge

01:46:21,920 --> 01:46:25,239
yeah next week of the week after

01:46:27,560 --> 01:46:31,370
I mean this is also Labor Day weekend

01:46:29,360 --> 01:46:34,340
sometimes he gets lazy and decides he's

01:46:31,370 --> 01:46:36,020
nothing to he might push it because it

01:46:34,340 --> 01:46:38,450
yeah this weekend delivered a weekend in

01:46:36,020 --> 01:46:39,950
the next weekend just the next weekend

01:46:38,450 --> 01:46:41,110
plumbers so again if plumbers is the

01:46:39,950 --> 01:46:44,110
person to emergentism

01:46:41,110 --> 01:46:44,110
yeah

01:46:45,800 --> 01:46:51,140
Hoss well it'll suck for us and it sucks

01:46:49,640 --> 01:46:53,660
bruza a lot of the maintainer czar at

01:46:51,140 --> 01:46:56,620
plumbers yeah so one of the people

01:46:53,660 --> 01:46:56,620
trying to push him things

01:46:57,450 --> 01:47:03,840
we have that problem right now with

01:46:58,740 --> 01:47:08,100
locking the components that it doesn't

01:47:03,840 --> 01:47:15,900
have to starve in a new way all the

01:47:08,100 --> 01:47:19,820
people were together which it's loud and

01:47:15,900 --> 01:47:19,820
cold a lot of work gets committed to it

01:47:34,260 --> 01:47:37,379

YouTube URL: https://www.youtube.com/watch?v=j4gBrz2uEbA


