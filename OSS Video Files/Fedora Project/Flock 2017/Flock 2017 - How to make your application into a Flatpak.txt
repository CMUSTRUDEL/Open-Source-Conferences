Title: Flock 2017 - How to make your application into a Flatpak
Publication date: 2017-10-20
Playlist: Flock 2017
Description: 
	Tuesday August 29, 2017 1:30pm - 2:30pm
@Orleans A + B
Talk: How to make your application into a Flatpak
Presenter: Owen Taylor

Description:
Flatpak is a new system for distributing graphical applications with isolation from the host operating system. Dependencies can be bundled with applications, or shared between different applications via a "runtime". Applications can be sandboxed to have only limited access to the user's data via a system of "portals", which let the user see and control what data is being accessed.

The introduction of Flatpaks into the Fedora ecosystem will provide benefits to users including secure sandboxing of applications, reliable application upgrades without rebooting, and the ability to run versions of applications from newer or older versions of Fedora. Flatpaks will be the primary delivery mechanism for Fedora modularity on the desktop, providing the ability for applications to be updated in Fedora as new upstream versions are released, without having to coordinate dependencies across the entire distribution.

This talk is targeted at Fedora packagers. It will provide a technological overview of Flatpak, describe new features that are being added to Fedora infrastructure to support building Flatpaks, and walk through the process of creating a module and Flatpak from an existing Fedora package.
Captions: 
	00:00:00,000 --> 00:00:05,190
and I do a lot of different things but

00:00:02,550 --> 00:00:07,770
recently I've been working on figuring

00:00:05,190 --> 00:00:13,259
out how do we take flat packs and build

00:00:07,770 --> 00:00:15,839
them within their infrastructure my talk

00:00:13,259 --> 00:00:18,630
me as total as a tutorial how to make a

00:00:15,839 --> 00:00:20,100
patient into a flat pack but it's going

00:00:18,630 --> 00:00:22,189
to be a couple of different things I

00:00:20,100 --> 00:00:25,170
first wanted to provide a general

00:00:22,189 --> 00:00:27,480
introduction to flat pack to those who

00:00:25,170 --> 00:00:30,900
let's play with that discuss a little

00:00:27,480 --> 00:00:33,149
bit about how we are looking at putting

00:00:30,900 --> 00:00:36,120
flat packs of fedora and then go ahead

00:00:33,149 --> 00:00:40,649
and walk through one example of actually

00:00:36,120 --> 00:00:42,090
what a fedora flat pack looks like I'm

00:00:40,649 --> 00:00:43,590
not gonna spend a lot of time talking

00:00:42,090 --> 00:00:46,050
about the back-end infrastructure

00:00:43,590 --> 00:00:48,300
details how we know flat backs in fedora

00:00:46,050 --> 00:00:49,530
because I think if you care about back

00:00:48,300 --> 00:00:51,600
into the structure you're probably at

00:00:49,530 --> 00:00:54,260
the factory to a dipole thought rather

00:00:51,600 --> 00:00:54,260
than this talk

00:00:55,790 --> 00:01:02,770
so just throw off the talking bit about

00:00:58,579 --> 00:01:06,380
the basic idea behind flat pack we have

00:01:02,770 --> 00:01:09,590
this picture represents the traditional

00:01:06,380 --> 00:01:11,479
view of a Linux operating system there

00:01:09,590 --> 00:01:12,860
are it's a unified whole

00:01:11,479 --> 00:01:14,509
there are lots and lots and lots of

00:01:12,860 --> 00:01:17,540
components with it you know a lot of

00:01:14,509 --> 00:01:20,150
them are very key like the admit system

00:01:17,540 --> 00:01:22,040
or your display server the kernel of

00:01:20,150 --> 00:01:25,759
course there are libraries that all

00:01:22,040 --> 00:01:27,560
these components pair of depend upon in

00:01:25,759 --> 00:01:30,890
the shared fashion and then you have

00:01:27,560 --> 00:01:33,110
applications and generally we packaged

00:01:30,890 --> 00:01:37,039
applications the exact same way as we

00:01:33,110 --> 00:01:39,080
package all these system components

00:01:37,039 --> 00:01:42,070
there is no real connection between how

00:01:39,080 --> 00:01:47,000
a package begin and how we package

00:01:42,070 --> 00:01:49,700
system D so that causes some number of

00:01:47,000 --> 00:01:51,320
different problems one is that when we

00:01:49,700 --> 00:01:54,259
look at these very core system

00:01:51,320 --> 00:01:56,149
components we think they true that

00:01:54,259 --> 00:01:57,740
actually be integrated very deeply with

00:01:56,149 --> 00:01:59,630
the operating system we affected there's

00:01:57,740 --> 00:02:01,599
been a lot of dependencies and they

00:01:59,630 --> 00:02:05,390
wouldn't expect that you could take the

00:02:01,599 --> 00:02:07,789
Fedora 26 version of just some D and

00:02:05,390 --> 00:02:11,260
swap it out for the door 27 or no

00:02:07,789 --> 00:02:13,940
participant D and things would just work

00:02:11,260 --> 00:02:17,870
there are also a lot of dependencies on

00:02:13,940 --> 00:02:20,610
the actual distribution that your

00:02:17,870 --> 00:02:23,460
package is gonna look like every Debian

00:02:20,610 --> 00:02:25,110
those things together make it very very

00:02:23,460 --> 00:02:27,360
very very difficult for somebody who's

00:02:25,110 --> 00:02:29,400
external from the description world to

00:02:27,360 --> 00:02:33,750
make a package for distribution they

00:02:29,400 --> 00:02:36,870
actually have to know exactly how the

00:02:33,750 --> 00:02:39,840
details of that system work and you know

00:02:36,870 --> 00:02:41,220
there are you know because packages are

00:02:39,840 --> 00:02:43,620
tied to pick the versions or picker

00:02:41,220 --> 00:02:46,200
distributions in order to reach the

00:02:43,620 --> 00:02:48,420
second fraction in village community we

00:02:46,200 --> 00:02:50,550
have to make a very large number of

00:02:48,420 --> 00:02:54,120
packages and update them continually

00:02:50,550 --> 00:02:57,600
that's not not really feasible but I'm

00:02:54,120 --> 00:03:01,310
done that there's a security model here

00:02:57,600 --> 00:03:03,450
is not really what we want if you have

00:03:01,310 --> 00:03:06,180
treating the as the same level

00:03:03,450 --> 00:03:08,970
system D then we certainly don't have

00:03:06,180 --> 00:03:11,790
its own security installation time the

00:03:08,970 --> 00:03:14,340
 package can replace any file system

00:03:11,790 --> 00:03:16,890
it can change your your system

00:03:14,340 --> 00:03:19,620
configuration you can drop new files

00:03:16,890 --> 00:03:22,800
into assets it runs intact scripts as

00:03:19,620 --> 00:03:24,959
root but also at runtime we don't have

00:03:22,800 --> 00:03:27,480
any barriers there we can if you have

00:03:24,959 --> 00:03:30,230
the the running there is access to

00:03:27,480 --> 00:03:33,720
all the system the files in the users

00:03:30,230 --> 00:03:36,959
session it can if your bank passwords

00:03:33,720 --> 00:03:39,270
access your webcam everything is is bad

00:03:36,959 --> 00:03:40,680
there and that's because we simply are

00:03:39,270 --> 00:03:42,900
trusting the application that often we

00:03:40,680 --> 00:03:45,300
have to say I think this app picking is

00:03:42,900 --> 00:03:47,430
perfectly good but that's not usually a

00:03:45,300 --> 00:03:50,760
real-world situation we usually want to

00:03:47,430 --> 00:03:52,800
say well I someone trust me in death is

00:03:50,760 --> 00:03:55,620
this application I trusted to get me to

00:03:52,800 --> 00:03:57,810
edit my image files but I'm not gonna

00:03:55,620 --> 00:04:00,000
trust it entirely I don't think it needs

00:03:57,810 --> 00:04:01,650
to also have access and I think

00:04:00,000 --> 00:04:03,000
passwords so we like to be able to

00:04:01,650 --> 00:04:04,860
create security boundaries around

00:04:03,000 --> 00:04:06,770
applications and that's simply not

00:04:04,860 --> 00:04:10,580
possible in this traditional

00:04:06,770 --> 00:04:12,170
model so so the evolution of that is

00:04:10,580 --> 00:04:14,360
we're gonna say okay we're going to make

00:04:12,170 --> 00:04:16,700
the operating system integrated whole

00:04:14,360 --> 00:04:19,520
and we're making applications separate

00:04:16,700 --> 00:04:21,110
integrated calls so they won't use the

00:04:19,520 --> 00:04:23,690
same libraries at the system they will

00:04:21,110 --> 00:04:26,540
use their own set of libraries and that

00:04:23,690 --> 00:04:28,250
then allows us to upgrade applications

00:04:26,540 --> 00:04:31,970
independently to create security

00:04:28,250 --> 00:04:33,560
boundaries but then we have copies of

00:04:31,970 --> 00:04:35,360
libraries in every application

00:04:33,560 --> 00:04:36,410
separately and that's something that's

00:04:35,360 --> 00:04:39,710
less than ideal

00:04:36,410 --> 00:04:42,080
it causes duplication of disk space it

00:04:39,710 --> 00:04:44,660
causes an extra memory usage and it

00:04:42,080 --> 00:04:46,370
means that there's a security problem in

00:04:44,660 --> 00:04:49,670
our library then you have to update

00:04:46,370 --> 00:04:51,620
every application independently so the

00:04:49,670 --> 00:04:55,240
idea that thought that case is to have

00:04:51,620 --> 00:04:57,730
or one time which is essentially present

00:04:55,240 --> 00:05:00,200
as that libraries that we pack up

00:04:57,730 --> 00:05:02,180
independent operating system and instead

00:05:00,200 --> 00:05:04,070
of having application dependent upon the

00:05:02,180 --> 00:05:07,220
operating system libraries depends upon

00:05:04,070 --> 00:05:09,440
our runtime now if we had only one

00:05:07,220 --> 00:05:11,600
runtime in the system we still have a

00:05:09,440 --> 00:05:16,010
problem because then when I push from

00:05:11,600 --> 00:05:18,350
the door 26 runtime to the Fedora 27

00:05:16,010 --> 00:05:21,920
runtime I have to update every single

00:05:18,350 --> 00:05:24,410
application so it's even better if we

00:05:21,920 --> 00:05:27,759
can have multiple runtime services so if

00:05:24,410 --> 00:05:29,800
we can say we'll have a six-month time

00:05:27,759 --> 00:05:31,029
run time and maybe if I want to run in a

00:05:29,800 --> 00:05:34,779
patient that would build against Debian

00:05:31,029 --> 00:05:36,819
on the Debian on time so this is sort of

00:05:34,779 --> 00:05:39,490
this is the picture of the flat pack

00:05:36,819 --> 00:05:42,400
application mobile applications separate

00:05:39,490 --> 00:05:45,539
from Apple separate from the operating

00:05:42,400 --> 00:05:47,949
system depending upon multiple runtimes

00:05:45,539 --> 00:05:50,259
when I say applications I've been clear

00:05:47,949 --> 00:05:54,309
that I mean desktop applications flat

00:05:50,259 --> 00:05:56,289
pack has a limited target space I mean

00:05:54,309 --> 00:05:59,289
something like Libre Office is again for

00:05:56,289 --> 00:06:01,180
tux card or even a proprietary

00:05:59,289 --> 00:06:03,819
application like a little problem but I

00:06:01,180 --> 00:06:06,520
don't mean a server like Murray to be I

00:06:03,819 --> 00:06:08,559
don't mean work for us WordPress is an

00:06:06,520 --> 00:06:10,419
application that's not a desktop

00:06:08,559 --> 00:06:12,969
application I don't mean a command-line

00:06:10,419 --> 00:06:16,270
tool like VI and I mean the reason for

00:06:12,969 --> 00:06:18,789
this is that if we say we're gonna

00:06:16,270 --> 00:06:20,919
handle disciplic Asians then there's a

00:06:18,789 --> 00:06:23,469
lot of specific problems at those

00:06:20,919 --> 00:06:25,449
address like how do we open a file it's

00:06:23,469 --> 00:06:27,759
securely and there's a set of

00:06:25,449 --> 00:06:32,379
interaction as the user that involve a

00:06:27,759 --> 00:06:34,180
user interface GUI and those are

00:06:32,379 --> 00:06:35,560
distinct problems from the problems that

00:06:34,180 --> 00:06:40,810
I want when I would play in a server

00:06:35,560 --> 00:06:43,659
somewhere okay so that's a model where

00:06:40,810 --> 00:06:47,139
we get five extra well one of the goals

00:06:43,659 --> 00:06:50,919
of my projects is that flex can come

00:06:47,139 --> 00:06:52,509
from application creators from if the

00:06:50,919 --> 00:06:55,240
 project wants to release it lightly

00:06:52,509 --> 00:06:57,490
bye narrator begin flap that provides a

00:06:55,240 --> 00:06:59,259
way of running that across distributions

00:06:57,490 --> 00:07:02,009
it makes it feasible for them to do that

00:06:59,259 --> 00:07:02,009
if

00:07:02,380 --> 00:07:06,220
prior to software company wants to

00:07:03,970 --> 00:07:07,540
release a binary for Linux they can

00:07:06,220 --> 00:07:11,440
release reasonably do that without

00:07:07,540 --> 00:07:13,720
creating 20 or 30 or 50 binaries but

00:07:11,440 --> 00:07:15,850
that's not the only place we expect to

00:07:13,720 --> 00:07:19,030
have flat packs because there's actually

00:07:15,850 --> 00:07:20,800
some real benefits from taking existing

00:07:19,030 --> 00:07:22,750
distribution packages I'm putting them

00:07:20,800 --> 00:07:26,590
into the flat pack we still have these

00:07:22,750 --> 00:07:28,090
upgrade and advantages we still have

00:07:26,590 --> 00:07:29,860
this flexibility where we take an

00:07:28,090 --> 00:07:31,540
application and split a wait and

00:07:29,860 --> 00:07:34,150
operating system and we still have the

00:07:31,540 --> 00:07:36,160
security there so that's well I'm gonna

00:07:34,150 --> 00:07:39,910
concentrated talking about today is how

00:07:36,160 --> 00:07:42,280
we build a FedEx out of distribution

00:07:39,910 --> 00:07:44,020
packages and less about how something

00:07:42,280 --> 00:07:47,350
upstream could build a flat pack

00:07:44,020 --> 00:07:50,290
protected from source and the same needs

00:07:47,350 --> 00:07:54,010
place for run times there are upstream

00:07:50,290 --> 00:07:56,139
run times that minotaurs get flat back

00:07:54,010 --> 00:07:57,880
going that are built on a yocto basis

00:07:56,139 --> 00:08:00,070
and there's a code generic free desktop

00:07:57,880 --> 00:08:03,100
runtime there's a good on run time with

00:08:00,070 --> 00:08:04,300
KDE runtime but once we start looking at

00:08:03,100 --> 00:08:06,970
making flat backs out of distribution

00:08:04,300 --> 00:08:08,770
packages they will need a fedora one

00:08:06,970 --> 00:08:11,740
time that's build out of your packages

00:08:08,770 --> 00:08:14,710
so we're going to talk about how it will

00:08:11,740 --> 00:08:19,510
leave crazy for one time and use that to

00:08:14,710 --> 00:08:21,070
build Fedora flat packs and as I said it

00:08:19,510 --> 00:08:24,840
reacts with those we still have the

00:08:21,070 --> 00:08:30,620
advantages that we can

00:08:24,840 --> 00:08:34,919
well so so I guess the question then is

00:08:30,620 --> 00:08:37,229
why do you want to to build that to have

00:08:34,919 --> 00:08:38,640
distribution packages why don't you just

00:08:37,229 --> 00:08:40,919
want to pull everything from sort of

00:08:38,640 --> 00:08:43,680
upstream and I'd say that there are sort

00:08:40,919 --> 00:08:45,900
of three major reasons for that why the

00:08:43,680 --> 00:08:47,190
idea of building plaques out of your

00:08:45,900 --> 00:08:49,440
packages makes sense

00:08:47,190 --> 00:08:51,990
first there's not always an active

00:08:49,440 --> 00:08:53,220
stream there are say roughly a thousand

00:08:51,990 --> 00:08:54,990
graphical applications packaged in a

00:08:53,220 --> 00:08:56,460
fedora you know

00:08:54,990 --> 00:08:58,320
well good number of those have an active

00:08:56,460 --> 00:09:00,810
up streams other ones haven't been

00:08:58,320 --> 00:09:02,250
touched in three years five years but

00:09:00,810 --> 00:09:04,620
we'd still able to have somebody to

00:09:02,250 --> 00:09:06,390
build into flat packs and that the

00:09:04,620 --> 00:09:08,700
drawer factors are very natural

00:09:06,390 --> 00:09:10,320
community to do that there's also we

00:09:08,700 --> 00:09:12,300
actually have existing bill recipes we

00:09:10,320 --> 00:09:13,980
have defined definition of what goes

00:09:12,300 --> 00:09:15,720
into the application of what package

00:09:13,980 --> 00:09:17,339
that requires how do you build from

00:09:15,720 --> 00:09:19,710
source you'd like to reuse that

00:09:17,339 --> 00:09:21,960
information as well and then finally and

00:09:19,710 --> 00:09:24,390
very importantly Fedora has a security

00:09:21,960 --> 00:09:24,930
update mechanism when there is an option

00:09:24,390 --> 00:09:28,200
CBE

00:09:24,930 --> 00:09:30,420
we track it out of a package we was

00:09:28,200 --> 00:09:33,180
noting the package and we don't update

00:09:30,420 --> 00:09:35,580
from it if we're just building plaques

00:09:33,180 --> 00:09:38,610
on a source that mechanism isn't there

00:09:35,580 --> 00:09:40,890
and so we let's take the futur updates

00:09:38,610 --> 00:09:44,610
back there so and say when there's a

00:09:40,890 --> 00:09:46,860
open SSL I'm security Montville ability

00:09:44,610 --> 00:09:49,589
let's find all of backpacks that include

00:09:46,860 --> 00:09:51,510
a package that book mr. sell packages or

00:09:49,589 --> 00:09:53,670
Mac three build them automatically

00:09:51,510 --> 00:09:55,470
release them so that the person doesn't

00:09:53,670 --> 00:09:57,000
have people containing the flat packs

00:09:55,470 --> 00:10:01,150
don't have to individually worry about

00:09:57,000 --> 00:10:04,480
all these individual security holes

00:10:01,150 --> 00:10:06,730
so I wanted to talk a little bit more

00:10:04,480 --> 00:10:08,650
about how flat packs work on a security

00:10:06,730 --> 00:10:11,100
point of view because I think that's an

00:10:08,650 --> 00:10:16,390
important thing to understand if you're

00:10:11,100 --> 00:10:18,670
you know learn how to package so by

00:10:16,390 --> 00:10:20,740
default a flat pack if you don't give it

00:10:18,670 --> 00:10:22,390
any exericse permissions as no

00:10:20,740 --> 00:10:24,880
permissions the default state of a flat

00:10:22,390 --> 00:10:26,410
pack is you can't talk to the outside

00:10:24,880 --> 00:10:28,839
world can't talk to them that worker

00:10:26,410 --> 00:10:31,750
can't access any files you can't open a

00:10:28,839 --> 00:10:35,260
window but he follows basically entirely

00:10:31,750 --> 00:10:37,390
useless but then so you have to start

00:10:35,260 --> 00:10:39,040
giving it some permissions and there's a

00:10:37,390 --> 00:10:41,680
set of permissions which are sort of

00:10:39,040 --> 00:10:43,210
considered safer issues ability to go

00:10:41,680 --> 00:10:44,920
out and talk over the network to

00:10:43,210 --> 00:10:47,740
external servers it's a pretty safe

00:10:44,920 --> 00:10:50,200
permission the ability to talk to the

00:10:47,740 --> 00:10:53,250
will and display server which is a

00:10:50,200 --> 00:10:56,740
secure protocol is the same permission

00:10:53,250 --> 00:10:58,240
that just those to make do permissions

00:10:56,740 --> 00:11:01,330
by itself would allow you to do some

00:10:58,240 --> 00:11:03,339
setup of applications but you often want

00:11:01,330 --> 00:11:05,080
more deep integration with the operating

00:11:03,339 --> 00:11:08,050
system make you want to read the users

00:11:05,080 --> 00:11:09,640
files or use the webcam well we can

00:11:08,050 --> 00:11:11,980
define other question which are unsafe

00:11:09,640 --> 00:11:13,959
permissions talking to the x11 display

00:11:11,980 --> 00:11:17,650
server or reading any palette in the

00:11:13,959 --> 00:11:20,410
users home directory now so forgive

00:11:17,650 --> 00:11:22,750
animation those permissions

00:11:20,410 --> 00:11:25,060
there's only broken the sandbox at that

00:11:22,750 --> 00:11:27,790
point that patient's not sandbox anymore

00:11:25,060 --> 00:11:29,170
that still actually is not useless if

00:11:27,790 --> 00:11:33,540
we're one take an old application we

00:11:29,170 --> 00:11:35,760
basically have to do that to package

00:11:33,540 --> 00:11:38,730
we can't require an application to be

00:11:35,760 --> 00:11:41,190
rewritten to use entirely new models so

00:11:38,730 --> 00:11:43,530
we can still get the sort of packaging

00:11:41,190 --> 00:11:46,650
advantages of backpacks by running out

00:11:43,530 --> 00:11:48,390
moon sandbox as a black backpack but we

00:11:46,650 --> 00:11:49,830
also under find a secure or modern way

00:11:48,390 --> 00:11:53,130
of doing that and this is something

00:11:49,830 --> 00:11:55,050
called portals so it's what if you think

00:11:53,130 --> 00:11:57,510
of permissions as being punching big

00:11:55,050 --> 00:11:59,220
holes in the sandbox the portal is a

00:11:57,510 --> 00:12:02,880
very very targeted hole in the sandbox

00:11:59,220 --> 00:12:04,350
that has a specific design for the

00:12:02,880 --> 00:12:07,140
purpose of cheapest interface that was

00:12:04,350 --> 00:12:09,690
designed to have security and usually

00:12:07,140 --> 00:12:13,230
the way that security is added is by

00:12:09,690 --> 00:12:15,600
involving the user into the floor if we

00:12:13,230 --> 00:12:18,090
think about opening a file we don't want

00:12:15,600 --> 00:12:19,410
to say does this application have the

00:12:18,090 --> 00:12:21,890
permission to access any file on your

00:12:19,410 --> 00:12:24,420
home directory that's a very big hole

00:12:21,890 --> 00:12:27,690
instead when the user wants to open up a

00:12:24,420 --> 00:12:30,240
file because in a file dialogue and when

00:12:27,690 --> 00:12:32,310
the user selects a file by selecting the

00:12:30,240 --> 00:12:34,950
file themself they implicitly getting

00:12:32,310 --> 00:12:36,870
that permission there that one file so

00:12:34,950 --> 00:12:41,970
if we can involve the user into the flow

00:12:36,870 --> 00:12:44,630
then we've made a much more natural and

00:12:41,970 --> 00:12:48,860
a much more limited way of giving

00:12:44,630 --> 00:12:48,860
permission for APIs to do something

00:12:49,999 --> 00:12:55,399
there aren't Yogi a whole lot of portals

00:12:52,449 --> 00:12:59,569
one doesn't sit there the file friend

00:12:55,399 --> 00:13:00,379
show would show webpage kids network

00:12:59,569 --> 00:13:03,499
status

00:13:00,379 --> 00:13:06,439
those are there's a few more existing

00:13:03,499 --> 00:13:08,389
currently but those are the ones those

00:13:06,439 --> 00:13:10,879
rolls a complete set you know we expect

00:13:08,389 --> 00:13:14,659
there to be roughly ten portable thing

00:13:10,879 --> 00:13:17,749
goes back of all's not a hundred or two

00:13:14,659 --> 00:13:20,439
hundred portals portals the portal

00:13:17,749 --> 00:13:23,959
effect implements has multiple backends

00:13:20,439 --> 00:13:25,879
so if we open a file dialog and you're

00:13:23,959 --> 00:13:28,629
running within the KDE desktop you can

00:13:25,879 --> 00:13:32,029
get the KDE pal to azure instead of the

00:13:28,629 --> 00:13:33,289
genome file chooser this could be

00:13:32,029 --> 00:13:37,339
extended with other backends but

00:13:33,289 --> 00:13:38,899
currently we have to be on KDE ones and

00:13:37,339 --> 00:13:41,959
it says user interaction which makes it

00:13:38,899 --> 00:13:44,659
safe so I mean the only other we do here

00:13:41,959 --> 00:13:45,889
is put them about portals world I'm

00:13:44,659 --> 00:13:48,649
gonna start the genome recipes

00:13:45,889 --> 00:13:50,779
application so this is in that patient

00:13:48,649 --> 00:13:56,929
that was largely written it to be dead

00:13:50,779 --> 00:14:01,819
local flat packs it has recipes that are

00:13:56,929 --> 00:14:03,589
attributed by no particulars and you

00:14:01,819 --> 00:14:06,319
know it will present an interface to

00:14:03,589 --> 00:14:07,789
when you say start cooking to what you

00:14:06,319 --> 00:14:08,509
step-by-step through the this in

00:14:07,789 --> 00:14:11,089
directions

00:14:08,509 --> 00:14:15,919
hopefully with minimal touching your

00:14:11,089 --> 00:14:17,689
screen so but it also has that you can

00:14:15,919 --> 00:14:19,429
see there's like print and share buttons

00:14:17,689 --> 00:14:24,249
and these both her and go through a

00:14:19,429 --> 00:14:27,020
portal so I'm gonna print this recipe a

00:14:24,249 --> 00:14:30,160
friend here

00:14:27,020 --> 00:14:33,650
and it possibly normal print dialog now

00:14:30,160 --> 00:14:34,910
serving the old way of doing it to have

00:14:33,650 --> 00:14:37,250
navigation be able to print the deaf

00:14:34,910 --> 00:14:38,960
people talk to the cop server the FM to

00:14:37,250 --> 00:14:40,580
see every single printer that was on

00:14:38,960 --> 00:14:42,860
your network find out what all

00:14:40,580 --> 00:14:44,630
casualties with all those printers and

00:14:42,860 --> 00:14:46,460
by that point you've actually created a

00:14:44,630 --> 00:14:48,800
fairly significant security of a whole

00:14:46,460 --> 00:14:51,020
there you know maybe that printer also

00:14:48,800 --> 00:14:52,880
has a scanner to be able see or you know

00:14:51,020 --> 00:14:57,160
we would suppose a lot of detail about

00:14:52,880 --> 00:14:59,710
your system there to the application but

00:14:57,160 --> 00:15:02,240
on the other hand in the photic world

00:14:59,710 --> 00:15:04,460
basically the the patient asks the

00:15:02,240 --> 00:15:06,920
outside the runtime to put up a print

00:15:04,460 --> 00:15:09,320
dialog then once the user selects the

00:15:06,920 --> 00:15:11,480
printer the application gets back very

00:15:09,320 --> 00:15:13,910
true you know here are the margins it's

00:15:11,480 --> 00:15:16,250
double-sided you know this color is

00:15:13,910 --> 00:15:19,550
black and white and creates a PDF file

00:15:16,250 --> 00:15:20,990
it's then it sends it back out and it

00:15:19,550 --> 00:15:23,690
goes to whatever printer the user has

00:15:20,990 --> 00:15:26,780
selected without having to give the

00:15:23,690 --> 00:15:29,900
applications very broad parishioners

00:15:26,780 --> 00:15:32,420
there and if the user Papa print dialog

00:15:29,900 --> 00:15:35,690
and said I want to print 10,000 copies

00:15:32,420 --> 00:15:37,850
of this document you know the user

00:15:35,690 --> 00:15:39,520
wouldn't would just say well now that

00:15:37,850 --> 00:15:42,140
that wasn't I wanted to do and close it

00:15:39,520 --> 00:15:43,700
so once we didn't have to trust the

00:15:42,140 --> 00:15:45,030
application of any sort of raw

00:15:43,700 --> 00:15:46,950
information

00:15:45,030 --> 00:15:49,320
you know file a lot of blogs works the

00:15:46,950 --> 00:15:51,900
same way if you want to something with

00:15:49,320 --> 00:15:53,820
email the with the sharing dialog does

00:15:51,900 --> 00:15:56,220
that pop-up prints apocalypse are

00:15:53,820 --> 00:15:58,530
pre-populated email with the recipe in

00:15:56,220 --> 00:16:02,100
it and they either choose to send it or

00:15:58,530 --> 00:16:04,080
anything choose to not send it that sort

00:16:02,100 --> 00:16:05,730
of the cases of portals when portals are

00:16:04,080 --> 00:16:08,550
working properly you don't know they're

00:16:05,730 --> 00:16:10,650
there it just looks a little transparent

00:16:08,550 --> 00:16:12,600
to you in a few cases there might have

00:16:10,650 --> 00:16:15,510
to be explicit request for permissions

00:16:12,600 --> 00:16:17,370
an example would be a location portable

00:16:15,510 --> 00:16:20,220
if you want application wants to know

00:16:17,370 --> 00:16:21,990
where you are then you probably have to

00:16:20,220 --> 00:16:23,970
ask the user can I share your location

00:16:21,990 --> 00:16:25,740
data with the application because

00:16:23,970 --> 00:16:27,630
there's no natural place for user

00:16:25,740 --> 00:16:29,790
interaction there but that's something

00:16:27,630 --> 00:16:33,240
we try to minimize instead of having the

00:16:29,790 --> 00:16:35,600
sort of old Android style permission

00:16:33,240 --> 00:16:35,600
lists

00:16:39,210 --> 00:16:45,690
so King a little bit more talking about

00:16:42,210 --> 00:16:47,520
generic flat packs where the 5x work is

00:16:45,690 --> 00:16:49,890
that every application gets its own file

00:16:47,520 --> 00:16:52,230
system namespace so its own sort of mini

00:16:49,890 --> 00:16:53,310
view of the operating system that's

00:16:52,230 --> 00:16:57,450
separate from the outer wrapper

00:16:53,310 --> 00:16:59,280
operating system the runtime is mounted

00:16:57,450 --> 00:17:01,020
on slash user that's all the shared

00:16:59,280 --> 00:17:03,750
libraries and shared binaries are there

00:17:01,020 --> 00:17:05,730
the application on their head is its

00:17:03,750 --> 00:17:07,830
oldest flash app and that's sort of

00:17:05,730 --> 00:17:10,470
important from the view of how we make

00:17:07,830 --> 00:17:12,630
things from fedora because since the

00:17:10,470 --> 00:17:17,970
application has a different prefix you

00:17:12,630 --> 00:17:20,460
can't take an existing package and just

00:17:17,970 --> 00:17:22,740
without rebuilding it train to a flat

00:17:20,460 --> 00:17:26,420
pack building a flat pack narrowing

00:17:22,740 --> 00:17:28,980
balls rebuilding the application dad

00:17:26,420 --> 00:17:33,950
it's Etsy its FCE

00:17:28,980 --> 00:17:33,950
also comes from the run time so it's

00:17:37,630 --> 00:17:42,780
so I think that's a password on most

00:17:39,580 --> 00:17:45,430
flat hacks will simply be a default

00:17:42,780 --> 00:17:51,640
that's the password similar to what you

00:17:45,430 --> 00:17:56,160
might have if you know so you just know

00:17:51,640 --> 00:17:59,470
the every flat pack will have its own

00:17:56,160 --> 00:18:02,230
actually uses a UID namespace so there's

00:17:59,470 --> 00:18:04,480
no need to you know need education to

00:18:02,230 --> 00:18:06,640
pull it in a lot of outside stuff

00:18:04,480 --> 00:18:09,520
actually I don't know X I don't know the

00:18:06,640 --> 00:18:11,680
question about this and I surely if you

00:18:09,520 --> 00:18:14,020
do look up these details you should get

00:18:11,680 --> 00:18:15,460
the right name the user we may do

00:18:14,020 --> 00:18:18,190
something to put on a stop you let say

00:18:15,460 --> 00:18:20,530
password into the fire pack so that what

00:18:18,190 --> 00:18:21,760
happens to her after one time levels so

00:18:20,530 --> 00:18:24,940
some things happen at the bill time

00:18:21,760 --> 00:18:26,530
level we Freight file systems then

00:18:24,940 --> 00:18:28,720
sometime things happen at runtime where

00:18:26,530 --> 00:18:30,490
when we assemble these namespaces we do

00:18:28,720 --> 00:18:35,620
a few tricks there and there may be a

00:18:30,490 --> 00:18:37,930
trick that's a password but we do need

00:18:35,620 --> 00:18:40,510
to rebuild applications so we'll talk

00:18:37,930 --> 00:18:42,190
about how that goes about there are

00:18:40,510 --> 00:18:43,930
other current security features are used

00:18:42,190 --> 00:18:46,360
in the sort of same way they would be

00:18:43,930 --> 00:18:50,110
used for a container there are as I said

00:18:46,360 --> 00:18:51,850
the UID namespace there's a pin names

00:18:50,110 --> 00:18:53,320
faces so you don't see all the other

00:18:51,850 --> 00:18:55,930
processes you just do the processes

00:18:53,320 --> 00:18:59,200
running within that flat-pack there's a

00:18:55,930 --> 00:19:00,690
set comp filter so that the application

00:18:59,200 --> 00:19:02,970
does to have

00:19:00,690 --> 00:19:04,890
access to a lot of system calls does

00:19:02,970 --> 00:19:07,550
have a business access sitting there

00:19:04,890 --> 00:19:10,170
generally well I've got what a security

00:19:07,550 --> 00:19:12,480
bull ability is discovered in the kernel

00:19:10,170 --> 00:19:14,400
involves some very very obscure system

00:19:12,480 --> 00:19:17,370
call that most applications would need

00:19:14,400 --> 00:19:19,920
to use anyways so the asset comp filter

00:19:17,370 --> 00:19:21,540
is used to forbid access to all those

00:19:19,920 --> 00:19:26,190
obscure system calls that really a

00:19:21,540 --> 00:19:28,620
patient shouldn't need to use so to

00:19:26,190 --> 00:19:31,050
store off a disk the technology

00:19:28,620 --> 00:19:34,140
is OS tree which is also what we used

00:19:31,050 --> 00:19:36,810
for atomic host you can sort of be seen

00:19:34,140 --> 00:19:39,990
as being get for binary it's ways of

00:19:36,810 --> 00:19:42,620
storing binary trees the same way get is

00:19:39,990 --> 00:19:44,940
a way of storing freezasaurus code and

00:19:42,620 --> 00:19:47,250
one of the things that get that gives

00:19:44,940 --> 00:19:48,750
you a duplication I have two flat packs

00:19:47,250 --> 00:19:52,020
and they have exactly the same file in

00:19:48,750 --> 00:19:54,270
done maybe for whatever reason this

00:19:52,020 --> 00:19:57,510
happens with more than you think

00:19:54,270 --> 00:20:01,020
it will actually be see if the only ones

00:19:57,510 --> 00:20:04,080
a disk and if both applications blow up

00:20:01,020 --> 00:20:07,860
that same file by a shared memory now

00:20:04,080 --> 00:20:09,720
the shared memory as well and then sort

00:20:07,860 --> 00:20:11,670
of the standard model for putting in

00:20:09,720 --> 00:20:13,710
flat packs is to use OS tree as your

00:20:11,670 --> 00:20:15,360
distribution mechanism in that case you

00:20:13,710 --> 00:20:17,550
also have this do duplication on the

00:20:15,360 --> 00:20:19,920
network if you need to download a file

00:20:17,550 --> 00:20:21,750
twice you'll say well this already have

00:20:19,920 --> 00:20:25,440
a file with this checksum I don't doubt

00:20:21,750 --> 00:20:27,760
me to download it from the origin again

00:20:25,440 --> 00:20:30,370
then finally OS tree is designed to

00:20:27,760 --> 00:20:33,340
emphasize atomic updates so that if I

00:20:30,370 --> 00:20:34,750
want to take you know an application I

00:20:33,340 --> 00:20:36,460
want to apply some updates to it I

00:20:34,750 --> 00:20:38,830
didn't want to start the new version I

00:20:36,460 --> 00:20:41,800
don't have to mutate the version of that

00:20:38,830 --> 00:20:45,070
page which is running I said create a

00:20:41,800 --> 00:20:46,660
whole new tree which is the new updated

00:20:45,070 --> 00:20:48,220
version application and then once I've

00:20:46,660 --> 00:20:50,370
gotten the update done I started a

00:20:48,220 --> 00:20:56,320
petition with that new tree so it's a

00:20:50,370 --> 00:20:58,090
safe way of doing updates but in terms

00:20:56,320 --> 00:20:59,890
of there was actually also a second way

00:20:58,090 --> 00:21:02,980
of distributing of a flat pack which is

00:20:59,890 --> 00:21:05,260
called an OC I image OC i images are

00:21:02,980 --> 00:21:06,790
from the open container initiative and

00:21:05,260 --> 00:21:11,320
there are essentially a standardized

00:21:06,790 --> 00:21:12,700
evolution of the doctor format and you

00:21:11,320 --> 00:21:15,220
can take a flat pack if you also build

00:21:12,700 --> 00:21:17,200
it into an OC i image and i mean a

00:21:15,220 --> 00:21:19,360
couple of advantage of that one is that

00:21:17,200 --> 00:21:22,060
compared to a tree there's not a ton of

00:21:19,360 --> 00:21:23,110
small image it time of small files so

00:21:22,060 --> 00:21:23,830
one of the problems with west

00:21:23,110 --> 00:21:27,130
redistribution

00:21:23,830 --> 00:21:29,110
is that you know large posterior pops

00:21:27,130 --> 00:21:32,110
where you might have millions of file is

00:21:29,110 --> 00:21:34,060
in it and if you start like mirroring

00:21:32,110 --> 00:21:35,650
that by are saying that really just does

00:21:34,060 --> 00:21:39,820
not work it also it's a lot of

00:21:35,650 --> 00:21:42,100
individual HTTP requests but it also by

00:21:39,820 --> 00:21:44,530
getting versions with server containers

00:21:42,100 --> 00:21:46,420
makes things easy on the infrastructure

00:21:44,530 --> 00:21:49,330
side we don't have to have two ways of

00:21:46,420 --> 00:21:51,820
building applications in Fedora just one

00:21:49,330 --> 00:21:53,980
way and it makes things easier for our

00:21:51,820 --> 00:21:55,600
sis system administrator they don't have

00:21:53,980 --> 00:21:57,670
to have one way of asserting application

00:21:55,600 --> 00:21:59,510
for their servers and then maybe an

00:21:57,670 --> 00:22:03,930
entirely different way to do it

00:21:59,510 --> 00:22:09,440
desktops yes is that transparent to the

00:22:03,930 --> 00:22:09,440
user whether it's packaged

00:22:09,990 --> 00:22:18,120
yeah it is I think okay look a picture

00:22:14,250 --> 00:22:19,919
here that essentially you have a set of

00:22:18,120 --> 00:22:21,809
were called remotes are configured for

00:22:19,919 --> 00:22:24,090
your system these are places you can get

00:22:21,809 --> 00:22:27,049
packages from and some of them can be

00:22:24,090 --> 00:22:31,320
Osprey remotes and some of them can be

00:22:27,049 --> 00:22:32,340
OC ivory motors and the user if

00:22:31,320 --> 00:22:34,049
everything's working properly won't

00:22:32,340 --> 00:22:37,020
notice the difference they just see a

00:22:34,049 --> 00:22:38,789
set of available packages and and I

00:22:37,020 --> 00:22:41,010
should emphasize that I should say that

00:22:38,789 --> 00:22:43,710
once you download it is post I image

00:22:41,010 --> 00:22:49,919
it's locally excluded into an OS tree so

00:22:43,710 --> 00:22:51,179
you look at the distribution so so how

00:22:49,919 --> 00:22:56,520
do we go about creating a fax from

00:22:51,179 --> 00:22:58,500
Fedora packages well first I mean why do

00:22:56,520 --> 00:23:01,200
it what you know why don't we just use

00:22:58,500 --> 00:23:03,090
Duffy once my sources but we want the

00:23:01,200 --> 00:23:05,130
center box saying one upgraded that

00:23:03,090 --> 00:23:07,200
rebooting we want to be able to try out

00:23:05,130 --> 00:23:09,029
some packaged applications from rawhide

00:23:07,200 --> 00:23:13,049
upgrading my entire set in general hide

00:23:09,029 --> 00:23:14,549
and finally no the reason is that you

00:23:13,049 --> 00:23:16,590
know when Thoreau removed his model of

00:23:14,549 --> 00:23:19,710
the atomic host and atomic workstation

00:23:16,590 --> 00:23:23,270
where the co-operative system is

00:23:19,710 --> 00:23:29,700
distributed as a tested unified whole

00:23:23,270 --> 00:23:31,559
and if I want to I don't want to like

00:23:29,700 --> 00:23:34,529
insert packages into the test unified

00:23:31,559 --> 00:23:37,289
whole I want to have my package leave my

00:23:34,529 --> 00:23:40,110
operating system as it is as a single

00:23:37,289 --> 00:23:42,029
host tree then have my applications

00:23:40,110 --> 00:23:44,679
independent of its fact is a very

00:23:42,029 --> 00:23:48,450
natural way to layer

00:23:44,679 --> 00:23:54,279
I'm a conversation tested sort of tree

00:23:48,450 --> 00:23:57,130
so at the level of you know Fedora just

00:23:54,279 --> 00:23:59,049
yet an infrastructure the model that we

00:23:57,130 --> 00:24:00,669
really are promoting for flat packs is

00:23:59,049 --> 00:24:03,190
that flat packs are door modules

00:24:00,669 --> 00:24:04,450
packaged into containers well let me

00:24:03,190 --> 00:24:06,539
modify that a little bit and say that

00:24:04,450 --> 00:24:09,009
they're a very particular sort of module

00:24:06,539 --> 00:24:11,259
packaged into a very particular sort of

00:24:09,009 --> 00:24:13,269
container but in general we're trying to

00:24:11,259 --> 00:24:15,549
completely converge the view of a flat

00:24:13,269 --> 00:24:18,940
pack so that we're not creating some

00:24:15,549 --> 00:24:21,250
entirely new set of objects within the

00:24:18,940 --> 00:24:23,200
Fedora infrastructure it's in the minds

00:24:21,250 --> 00:24:26,409
of soar packager because if you learn

00:24:23,200 --> 00:24:28,000
how to create a flat pack it's very much

00:24:26,409 --> 00:24:29,289
you learn how to create a module and you

00:24:28,000 --> 00:24:31,240
know how could create a container

00:24:29,289 --> 00:24:33,159
so we're saying hard to say that these

00:24:31,240 --> 00:24:35,019
are the same things and we're not trying

00:24:33,159 --> 00:24:39,159
to create a lot of extra complexity

00:24:35,019 --> 00:24:41,350
around this so there's one module in

00:24:39,159 --> 00:24:43,419
fedora the flat pack one-time module

00:24:41,350 --> 00:24:45,940
then you have a separate module for

00:24:43,419 --> 00:24:47,740
every application so you know the game

00:24:45,940 --> 00:24:49,830
for Inkscape would have their own module

00:24:47,740 --> 00:24:54,490
in fedora

00:24:49,830 --> 00:24:57,100
they are the Fedora layered image build

00:24:54,490 --> 00:25:00,129
service which is someone's also called

00:24:57,100 --> 00:25:01,240
Vulcan shippable service is chargeable

00:25:00,129 --> 00:25:04,360
in containers within fedora

00:25:01,240 --> 00:25:07,059
it's also in charge of building platypus

00:25:04,360 --> 00:25:09,759
and registry top card products at org

00:25:07,059 --> 00:25:11,350
which is what distributes chromium

00:25:09,759 --> 00:25:13,330
storage containers there's also what's

00:25:11,350 --> 00:25:18,009
gonna be shepherding flat packs as well

00:25:13,330 --> 00:25:22,210
so within the sort of that world WebEx

00:25:18,009 --> 00:25:23,379
are very much good one two containers so

00:25:22,210 --> 00:25:26,139
I mean I wanted to talk a little bit

00:25:23,379 --> 00:25:27,460
more about modules here because as

00:25:26,139 --> 00:25:31,210
opposed to containers may be a little

00:25:27,460 --> 00:25:32,440
bit less of an obvious fit you know you

00:25:31,210 --> 00:25:35,529
could take flat packs and going directly

00:25:32,440 --> 00:25:38,889
out of the door 26 content without using

00:25:35,529 --> 00:25:40,570
modules there but modules wonder they

00:25:38,889 --> 00:25:43,720
give us is his ability to rebuild a

00:25:40,570 --> 00:25:45,940
package of different prefix like package

00:25:43,720 --> 00:25:50,139
with infant of our 26 and built exactly

00:25:45,940 --> 00:25:51,940
one way but modules have had this have

00:25:50,139 --> 00:25:54,580
one of basic ideas is I can take the

00:25:51,940 --> 00:25:56,559
same source source from just get and

00:25:54,580 --> 00:25:58,269
build in different ways in a different

00:25:56,559 --> 00:25:59,980
environment and one of the different

00:25:58,269 --> 00:26:02,529
departments I can build it in is a

00:25:59,980 --> 00:26:04,779
bartering with different rpm macros that

00:26:02,529 --> 00:26:08,200
set the prefix to be splash app rather

00:26:04,779 --> 00:26:10,389
than slash user like any other uses of

00:26:08,200 --> 00:26:11,950
modules using a packs gives the

00:26:10,389 --> 00:26:14,019
application Tainter a lot of flexibility

00:26:11,950 --> 00:26:15,850
you no longer have to be in agreement

00:26:14,019 --> 00:26:17,769
with every other of your packager about

00:26:15,850 --> 00:26:20,139
what version of each libraries are using

00:26:17,769 --> 00:26:22,269
if one updation needs of one personal

00:26:20,139 --> 00:26:25,450
library application use the diversion

00:26:22,269 --> 00:26:29,200
library then they can do that and you

00:26:25,450 --> 00:26:30,639
can do with your own tempo you can say

00:26:29,200 --> 00:26:32,860
that I'm only going to contain one

00:26:30,639 --> 00:26:36,490
version of my application and expectable

00:26:32,860 --> 00:26:39,190
Agra fedora 25 26 27 all Smeal to

00:26:36,490 --> 00:26:40,679
install it very via flat pack it's

00:26:39,190 --> 00:26:42,429
generally giving more power to the

00:26:40,679 --> 00:26:44,289
packager they're also more

00:26:42,429 --> 00:26:46,809
responsibility

00:26:44,289 --> 00:26:48,010
and you know furthermore we're using

00:26:46,809 --> 00:26:50,830
modules there because that's the way

00:26:48,010 --> 00:26:53,350
door is moving I don't wonder who's been

00:26:50,830 --> 00:26:54,040
a lot of time building structure that is

00:26:53,350 --> 00:26:56,620
what it

00:26:54,040 --> 00:26:58,360
you're as it was I want to make sure

00:26:56,620 --> 00:27:00,490
that we're doing something that's really

00:26:58,360 --> 00:27:03,730
a lot of way that fear was going in the

00:27:00,490 --> 00:27:05,980
future and finally because I'm being

00:27:03,730 --> 00:27:08,650
aligned their bodies are it changes into

00:27:05,980 --> 00:27:09,880
progress rupture I'm saying tell you

00:27:08,650 --> 00:27:11,679
everybody of quorum structure we need to

00:27:09,880 --> 00:27:14,530
do add yet another component another

00:27:11,679 --> 00:27:18,429
service doesn't realize resistance to

00:27:14,530 --> 00:27:20,470
that and I said I'm not going to talk a

00:27:18,429 --> 00:27:21,730
lot about what curling going on within

00:27:20,470 --> 00:27:23,679
they throw infrastructure because I

00:27:21,730 --> 00:27:28,090
don't think people care about that are

00:27:23,679 --> 00:27:30,549
at this talk there's sort of some key

00:27:28,090 --> 00:27:32,650
things being used to the michael build

00:27:30,549 --> 00:27:35,200
services what is what actually goes and

00:27:32,650 --> 00:27:37,809
builds your module takes the definition

00:27:35,200 --> 00:27:40,090
module and creates all the building of

00:27:37,809 --> 00:27:41,470
packages that make up that module whence

00:27:40,090 --> 00:27:43,030
modules are built they go into the

00:27:41,470 --> 00:27:44,650
product definition center which says

00:27:43,030 --> 00:27:47,020
here are the package students make up

00:27:44,650 --> 00:27:49,360
this module these things have something

00:27:47,020 --> 00:27:50,919
called the on-demand service which takes

00:27:49,360 --> 00:27:53,380
modules and puts them together into the

00:27:50,919 --> 00:27:55,720
UM repository as I mentioned before

00:27:53,380 --> 00:27:58,120
there's the Fedora layered image build

00:27:55,720 --> 00:27:59,919
service and then finally there is

00:27:58,120 --> 00:28:03,070
registry document project record which

00:27:59,919 --> 00:28:05,890
is the public facing registry for

00:28:03,070 --> 00:28:08,970
containers and one whereas we have flat

00:28:05,890 --> 00:28:08,970
tax for five axes

00:28:09,110 --> 00:28:13,910
so we'll move on now to an example an

00:28:12,110 --> 00:28:17,630
example I'm going to use is the I am

00:28:13,910 --> 00:28:20,150
hunama which is the a very simple image

00:28:17,630 --> 00:28:22,010
here which has been sometimes been the

00:28:20,150 --> 00:28:25,730
standard image you roam and sometimes

00:28:22,010 --> 00:28:29,540
they know it's one of the senator is

00:28:25,730 --> 00:28:32,170
recognized and to make a flat back out

00:28:29,540 --> 00:28:35,330
of it you essentially have to create two

00:28:32,170 --> 00:28:37,730
files that describe a fire if I actually

00:28:35,330 --> 00:28:41,510
build one describes the module the one

00:28:37,730 --> 00:28:44,090
describes the container so the first one

00:28:41,510 --> 00:28:45,620
is the module MD file

00:28:44,090 --> 00:28:48,560
traditionally called the name of the

00:28:45,620 --> 00:28:50,720
module plus the sake animal it describes

00:28:48,560 --> 00:28:55,760
what packages make up that module and

00:28:50,720 --> 00:28:57,380
what the module depends upon so if you

00:28:55,760 --> 00:29:02,090
look look at this this is the first half

00:28:57,380 --> 00:29:03,650
of the module MD file has some sort of

00:29:02,090 --> 00:29:05,930
generic metadata of the co summary

00:29:03,650 --> 00:29:07,720
description and generally in the

00:29:05,930 --> 00:29:10,300
flat-pack world those can be

00:29:07,720 --> 00:29:15,230
automatically propagated from the

00:29:10,300 --> 00:29:17,510
summary description of the package it

00:29:15,230 --> 00:29:20,030
gives some Senate bill dependencies from

00:29:17,510 --> 00:29:21,680
for Ford or Ford or 26 the Senate bill

00:29:20,030 --> 00:29:23,210
dependencies are pretty complicated

00:29:21,680 --> 00:29:26,060
because the module structure is still

00:29:23,210 --> 00:29:28,310
evolving I don't necessarily expect that

00:29:26,060 --> 00:29:31,190
people in the future will have to say

00:29:28,310 --> 00:29:33,630
that I want pearls so that my auto cost

00:29:31,190 --> 00:29:35,920
my automatic scripts one

00:29:33,630 --> 00:29:38,260
probably so this will simplify in the

00:29:35,920 --> 00:29:40,300
future but the there's also their higher

00:29:38,260 --> 00:29:43,420
section that says what you need yet at

00:29:40,300 --> 00:29:45,130
one time and for an arbitrary module

00:29:43,420 --> 00:29:46,660
this could be complicated for a

00:29:45,130 --> 00:29:49,990
flat-pack it's very simple you need to

00:29:46,660 --> 00:29:53,380
say I require the flat-pack runtime and

00:29:49,990 --> 00:29:57,370
the version of that one time you need so

00:29:53,380 --> 00:29:59,800
that's been the same for every every mug

00:29:57,370 --> 00:30:02,440
Lundy file for a flat back there's also

00:29:59,800 --> 00:30:04,330
a profile section which says kuro up

00:30:02,440 --> 00:30:07,330
packages from this module I want to

00:30:04,330 --> 00:30:09,700
install and against is really simple for

00:30:07,330 --> 00:30:12,490
flat pack applications because usually

00:30:09,700 --> 00:30:15,790
the only package one install directly is

00:30:12,490 --> 00:30:17,560
the application itself then you'll pull

00:30:15,790 --> 00:30:21,910
it by dependencies in the libraries it

00:30:17,560 --> 00:30:25,390
needs so this this type of the the map

00:30:21,910 --> 00:30:27,430
module MD file is pretty simple it's

00:30:25,390 --> 00:30:29,830
much much of this could it can be

00:30:27,430 --> 00:30:31,300
auto-generated sort of the second half

00:30:29,830 --> 00:30:33,930
is the more complicated part which is

00:30:31,300 --> 00:30:36,420
the list of components that needed were

00:30:33,930 --> 00:30:38,800
in within the module there and

00:30:36,420 --> 00:30:40,330
essentially you need every package they

00:30:38,800 --> 00:30:43,720
depend upon which is not part of the

00:30:40,330 --> 00:30:48,040
runtime and you know that could be a

00:30:43,720 --> 00:30:49,960
pretty big so he also wants me to into

00:30:48,040 --> 00:30:51,930
automatica charities as well you don't

00:30:49,960 --> 00:30:54,070
want to be sitting there saying

00:30:51,930 --> 00:30:55,630
comparing two big lists of packages

00:30:54,070 --> 00:30:58,000
yours everything my package requires

00:30:55,630 --> 00:31:01,510
here's our doing the run time let me

00:30:58,000 --> 00:31:03,190
figure out which ones are different so

00:31:01,510 --> 00:31:05,500
we have some tooling there or and

00:31:03,190 --> 00:31:07,480
they're working on something there's

00:31:05,500 --> 00:31:08,830
something called fact module tools which

00:31:07,480 --> 00:31:12,230
is

00:31:08,830 --> 00:31:14,630
some Python scripts I wrote that do sort

00:31:12,230 --> 00:31:17,030
of gulping tasks for flat packs so

00:31:14,630 --> 00:31:18,890
there's one called great module mg and

00:31:17,030 --> 00:31:23,120
you run that with them and say Freight

00:31:18,890 --> 00:31:26,179
month oMG from package GOG it gets the

00:31:23,120 --> 00:31:28,100
yo G package looked at the summary

00:31:26,179 --> 00:31:30,710
description look at what's required

00:31:28,100 --> 00:31:32,419
pairs up to what's in the syrup fedora

00:31:30,710 --> 00:31:35,059
26 to figure out the complete set

00:31:32,419 --> 00:31:37,669
dependencies and writes out sort of a

00:31:35,059 --> 00:31:40,970
template gog.com well i met michael

00:31:37,669 --> 00:31:43,160
empty file so this is specific it's

00:31:40,970 --> 00:31:46,220
still pretty rough there's a general an

00:31:43,160 --> 00:31:49,309
effort to do the same thing for miles in

00:31:46,220 --> 00:31:51,140
general and we expect the long term will

00:31:49,309 --> 00:31:53,290
be some standard Fedora tool for doing

00:31:51,140 --> 00:31:56,780
this process of taking on that patient

00:31:53,290 --> 00:31:58,370
rpm and bring into a module something

00:31:56,780 --> 00:32:02,090
started something called depth chase

00:31:58,370 --> 00:32:03,820
which does the dependency part of it but

00:32:02,090 --> 00:32:07,040
doesn't actually write out a skeleton

00:32:03,820 --> 00:32:09,860
lucky for you but I'm not sure exactly

00:32:07,040 --> 00:32:13,640
where we're at in the long term for

00:32:09,860 --> 00:32:15,799
modules so that's half of it that was

00:32:13,640 --> 00:32:17,360
what the scratch-free module but then we

00:32:15,799 --> 00:32:19,549
also need to describe a bit about how

00:32:17,360 --> 00:32:21,559
that module is turn into a flat-pack

00:32:19,549 --> 00:32:24,320
particular about the runtime environment

00:32:21,559 --> 00:32:27,380
what permissions that playback needs so

00:32:24,320 --> 00:32:30,140
for that something called a flat Jason

00:32:27,380 --> 00:32:33,320
just adjacent file that some keys in it

00:32:30,140 --> 00:32:35,510
this is very based upon something called

00:32:33,320 --> 00:32:37,520
a flat pack build or manifest by Beck

00:32:35,510 --> 00:32:39,559
builder is a tool for building facts

00:32:37,520 --> 00:32:41,570
from source and a lot of what that has

00:32:39,559 --> 00:32:44,390
is going to be how to build this source

00:32:41,570 --> 00:32:45,919
code but if your mu take that remove all

00:32:44,390 --> 00:32:48,049
the instructions for building source

00:32:45,919 --> 00:32:51,010
code that's basically what's left is

00:32:48,049 --> 00:32:53,270
what's in the backpack type Jason and

00:32:51,010 --> 00:32:55,340
you know some of this is historical

00:32:53,270 --> 00:33:00,910
metadata plaque identify that patient's

00:32:55,340 --> 00:33:05,150
bias or reverse Romanians so there's G

00:33:00,910 --> 00:33:06,950
is the ID of the application the

00:33:05,150 --> 00:33:10,000
complicated part here is Nicole's finish

00:33:06,950 --> 00:33:12,140
columns which is a really awful name but

00:33:10,000 --> 00:33:14,179
it basically defines the permissions

00:33:12,140 --> 00:33:17,030
it's called that because it's all

00:33:14,179 --> 00:33:20,330
arguments you pass to flat-pack they'll

00:33:17,030 --> 00:33:22,130
finish which is the ultimate relation

00:33:20,330 --> 00:33:24,740
detail but I wanted to be consistent

00:33:22,130 --> 00:33:27,350
with the flat-pack builder Jason left

00:33:24,740 --> 00:33:29,299
the name so you can look at the man page

00:33:27,350 --> 00:33:32,090
for a flat-pack build finish to figure

00:33:29,299 --> 00:33:35,240
out what you need it finishes but

00:33:32,090 --> 00:33:37,130
generally so this is this your Jesus is

00:33:35,240 --> 00:33:39,770
a noble application isn't sandbox so I

00:33:37,130 --> 00:33:43,720
say that it has access to the file

00:33:39,770 --> 00:33:48,130
system to the users files that is 2 X 11

00:33:43,720 --> 00:33:49,990
it has access to decom which is the user

00:33:48,130 --> 00:33:51,970
settings so this is like sort of what it

00:33:49,990 --> 00:33:53,620
looks like for a run sandbox location a

00:33:51,970 --> 00:33:55,510
sandbox information we generally have a

00:33:53,620 --> 00:33:59,140
smaller finish or intersection because

00:33:55,510 --> 00:34:01,390
of need less permissions so how do you

00:33:59,140 --> 00:34:02,980
take those two files and then build them

00:34:01,390 --> 00:34:07,030
into flat pack

00:34:02,980 --> 00:34:09,790
well if you're doing a local build which

00:34:07,030 --> 00:34:14,800
works currently you first need to go the

00:34:09,790 --> 00:34:17,169
module and the module review team has a

00:34:14,800 --> 00:34:20,260
tool called MBS build you can do mes

00:34:17,169 --> 00:34:23,230
build local it will download all

00:34:20,260 --> 00:34:26,679
necessary bits and then build your model

00:34:23,230 --> 00:34:28,119
empty file locally in creating such a

00:34:26,679 --> 00:34:32,230
local package is sort of like a mock

00:34:28,119 --> 00:34:34,720
build and then you can use another tool

00:34:32,230 --> 00:34:36,909
from flat pack module tools called black

00:34:34,720 --> 00:34:39,220
module crate flat pack which takes up

00:34:36,909 --> 00:34:42,760
locally little packages and turns them

00:34:39,220 --> 00:34:44,340
into a bundle and then if you want to

00:34:42,760 --> 00:34:47,919
find out if you can flat pack it's all

00:34:44,340 --> 00:34:50,050
the bundle and then you can try running

00:34:47,919 --> 00:34:52,300
it was like any flat pack you could run

00:34:50,050 --> 00:34:54,820
it from the command lines like Ron where

00:34:52,300 --> 00:34:56,389
you go to the your application launch

00:34:54,820 --> 00:35:00,019
room launched from there

00:34:56,389 --> 00:35:01,099
now that's not the long-term goal one

00:35:00,019 --> 00:35:06,200
control stability in Fedora

00:35:01,099 --> 00:35:08,930
infrastructure or build servers so it's

00:35:06,200 --> 00:35:11,390
actually not that different I show the

00:35:08,930 --> 00:35:16,509
first thing it should be in just get it

00:35:11,390 --> 00:35:18,940
Grindle didn't sure there's a modules

00:35:16,509 --> 00:35:23,839
namespace which contains all the modules

00:35:18,940 --> 00:35:25,489
so you're and then you'd say MBS build

00:35:23,839 --> 00:35:27,230
instead of go locally to MBS build

00:35:25,489 --> 00:35:29,390
submit that fired off to the floor

00:35:27,230 --> 00:35:31,279
modular build server you would take your

00:35:29,390 --> 00:35:34,489
file and Trent to coaching in general

00:35:31,279 --> 00:35:38,239
the packages and then then we need to

00:35:34,489 --> 00:35:40,670
sort of build in the door layer image

00:35:38,239 --> 00:35:44,329
build system and the tool for that is

00:35:40,670 --> 00:35:46,220
Koji container build and then I've added

00:35:44,329 --> 00:35:47,630
a next command to that flat pack build

00:35:46,220 --> 00:35:50,150
this builds a five pack instead of a

00:35:47,630 --> 00:35:51,529
container and then used to say what you

00:35:50,150 --> 00:35:53,960
want to build and what module you have

00:35:51,529 --> 00:35:55,430
to build against um so I mean I think

00:35:53,960 --> 00:35:58,279
eventually we'll have some ten package

00:35:55,430 --> 00:36:00,140
integration so that he becomes a bit

00:35:58,279 --> 00:36:03,170
simpler so you don't have that variable

00:36:00,140 --> 00:36:04,999
on command line but that's enough to get

00:36:03,170 --> 00:36:06,380
built then theoretically once everything

00:36:04,999 --> 00:36:10,819
in place that will get it put into the

00:36:06,380 --> 00:36:12,650
throw registry and then the basic idea

00:36:10,819 --> 00:36:14,239
about how to install it is that you

00:36:12,650 --> 00:36:16,039
would add a remote that points to the

00:36:14,239 --> 00:36:18,109
role either the Thor registry or the

00:36:16,039 --> 00:36:20,859
candidate your registry which is where

00:36:18,109 --> 00:36:24,079
things are before they've been released

00:36:20,859 --> 00:36:25,700
then you get us install using that

00:36:24,079 --> 00:36:27,589
install from that candidate registry

00:36:25,700 --> 00:36:30,180
great to do the same thing through good

00:36:27,589 --> 00:36:34,350
home software and you again

00:36:30,180 --> 00:36:37,230
flat back so that's basically what these

00:36:34,350 --> 00:36:41,070
sort of process dosn't will look like

00:36:37,230 --> 00:36:44,700
for creating a flat pack out of four

00:36:41,070 --> 00:36:48,680
packages and the keeping these two

00:36:44,700 --> 00:36:48,680
metadata files that you need to create

00:36:51,430 --> 00:36:57,390
so yeah look we're gonna go for the

00:36:53,529 --> 00:36:59,980
status and then take some questions so

00:36:57,390 --> 00:37:03,190
the whole Michael Mann product part

00:36:59,980 --> 00:37:08,109
works fine and there were currently you

00:37:03,190 --> 00:37:10,420
can build against time module and get

00:37:08,109 --> 00:37:14,380
your application modules built with the

00:37:10,420 --> 00:37:18,579
right prefix the code to take that and

00:37:14,380 --> 00:37:20,650
assemble it into a no CI image and

00:37:18,579 --> 00:37:22,270
upload that to the thro registry it's

00:37:20,650 --> 00:37:25,660
all working really well but it still has

00:37:22,270 --> 00:37:28,539
to be word stream and then finally the

00:37:25,660 --> 00:37:31,150
part that needs to be there so they can

00:37:28,539 --> 00:37:34,089
actually go to go software and view all

00:37:31,150 --> 00:37:35,890
the packages and register your product

00:37:34,089 --> 00:37:38,529
at org and install them tribute on

00:37:35,890 --> 00:37:39,940
software is still needs to be written

00:37:38,529 --> 00:37:43,630
and that's gonna be a dork when th

00:37:39,940 --> 00:37:45,339
feature that's you know are some

00:37:43,630 --> 00:37:46,960
workarounds you can do currently or will

00:37:45,339 --> 00:37:50,049
be able to do once the rest of us landed

00:37:46,960 --> 00:37:52,029
to install them for more clumsily but I

00:37:50,049 --> 00:37:56,109
don't want to scrub that in detail now

00:37:52,029 --> 00:37:57,460
because that's still in flux but those

00:37:56,109 --> 00:38:00,720
are a little evasion and I would say

00:37:57,460 --> 00:38:04,530
that were like 80% done with it now

00:38:00,720 --> 00:38:04,530
okay so questions

00:38:09,620 --> 00:38:12,370
normal

00:38:14,510 --> 00:38:17,510
yeah

00:38:23,150 --> 00:38:29,369
so so if you so if you went to like the

00:38:27,930 --> 00:38:32,609
NGO application overview or the kiddie

00:38:29,369 --> 00:38:34,709
application launcher which either one or

00:38:32,609 --> 00:38:39,869
the other and it can only show one of

00:38:34,709 --> 00:38:42,239
them what's gonna show is the if you

00:38:39,869 --> 00:38:43,380
from a command line of either one you OG

00:38:42,239 --> 00:38:46,140
from the command line they're gonna do

00:38:43,380 --> 00:38:47,789
flat pack one or don't use you and run

00:38:46,140 --> 00:38:49,079
either one of them

00:38:47,789 --> 00:38:50,489
sometimes what are you building a flat

00:38:49,079 --> 00:38:52,739
pack you actually want to change the

00:38:50,489 --> 00:38:54,599
application ID like if I have a willing

00:38:52,739 --> 00:38:56,579
to life let this snaps up them again I

00:38:54,599 --> 00:38:58,859
may not want to just replace the system

00:38:56,579 --> 00:39:01,529
 with it I mean one to appear

00:38:58,859 --> 00:39:03,259
differently as Jim parentheses lightly

00:39:01,529 --> 00:39:06,749
in that means you can give you a

00:39:03,259 --> 00:39:08,940
different application ID and then it

00:39:06,749 --> 00:39:10,049
will show it was a different entry so it

00:39:08,940 --> 00:39:12,059
might be possible even to have two

00:39:10,049 --> 00:39:15,089
different streams of your core module

00:39:12,059 --> 00:39:16,979
one which is just looks like the

00:39:15,089 --> 00:39:18,900
application standard and one which is

00:39:16,979 --> 00:39:21,029
distinguishing from it and have a

00:39:18,900 --> 00:39:22,559
different application ID and those two

00:39:21,029 --> 00:39:24,779
could be installed at the same time a

00:39:22,559 --> 00:39:27,329
new user to be able to pick one or the

00:39:24,779 --> 00:39:31,069
other but if you don't change the

00:39:27,329 --> 00:39:31,069
application ID then the only one

00:39:32,960 --> 00:39:45,619
yeah so I have three questions yeah so

00:39:44,359 --> 00:39:48,470
if you install one from your

00:39:45,619 --> 00:39:53,720
distribution one from upstream one from

00:39:48,470 --> 00:39:58,339
you can so so you're always efficient is

00:39:53,720 --> 00:40:01,160
always tied to a particular runtime so

00:39:58,339 --> 00:40:02,510
it's not like so different one times are

00:40:01,160 --> 00:40:06,380
thought of as providing a different user

00:40:02,510 --> 00:40:08,059
different API or different API so the

00:40:06,380 --> 00:40:10,609
navigation is either go to guess or

00:40:08,059 --> 00:40:14,420
genome free desktop for us build against

00:40:10,609 --> 00:40:21,170
or Fedora project or whatever all the

00:40:14,420 --> 00:40:23,510
runtime they might have many of the same

00:40:21,170 --> 00:40:24,800
libraries but there's no assumption that

00:40:23,510 --> 00:40:26,569
you could replace one with the other

00:40:24,800 --> 00:40:29,030
okay I mean that's I mean I think that's

00:40:26,569 --> 00:40:31,790
because one of the things what was flat

00:40:29,030 --> 00:40:33,829
pack is too strong a store instead I had

00:40:31,790 --> 00:40:35,990
to create a flat pack and somebody else

00:40:33,829 --> 00:40:40,220
wants it it's running exactly as I

00:40:35,990 --> 00:40:43,869
created it and so I tried done somebody

00:40:40,220 --> 00:40:43,869
has made it back 45

00:40:48,119 --> 00:41:36,430
so I mean I mean I mean so yeah so the

00:41:34,930 --> 00:41:38,770
two cases where you cannot use portals

00:41:36,430 --> 00:41:41,859
one is if your operation doesn't need a

00:41:38,770 --> 00:41:43,839
portal yeah I mean so a game might not

00:41:41,859 --> 00:41:45,910
be any portals at all the game just

00:41:43,839 --> 00:41:47,920
wants to display ticket from the user or

00:41:45,910 --> 00:41:49,570
display things to the screen or the

00:41:47,920 --> 00:41:51,690
second case we don't keep portals it is

00:41:49,570 --> 00:41:54,970
if you want them one sandbox and

00:41:51,690 --> 00:41:56,170
currently we don't currently we don't

00:41:54,970 --> 00:41:57,790
make a big deal and some box

00:41:56,170 --> 00:42:00,099
applications we don't say this is one

00:41:57,790 --> 00:42:01,750
sandbox it's entirely unsaved we're sort

00:42:00,099 --> 00:42:03,230
of eventually called a look at the case

00:42:01,750 --> 00:42:06,350
but we're saying

00:42:03,230 --> 00:42:08,570
music applications we're not yet at the

00:42:06,350 --> 00:42:10,040
point where we can do that will be

00:42:08,570 --> 00:42:13,250
hopefully on time application offers

00:42:10,040 --> 00:42:14,990
well be using portals more and more and

00:42:13,250 --> 00:42:17,300
sometimes the portal application usage

00:42:14,990 --> 00:42:19,130
is transparent to the other so patient

00:42:17,300 --> 00:42:22,730
author it's under the toolkit like if

00:42:19,130 --> 00:42:25,160
you're using GDK and going through the

00:42:22,730 --> 00:42:26,690
right so if you use sort of the simple

00:42:25,160 --> 00:42:28,700
print interface that doesn't provide you

00:42:26,690 --> 00:42:30,320
a lot of details about the printer then

00:42:28,700 --> 00:42:32,300
you automatically use the print portal

00:42:30,320 --> 00:42:36,470
some cases you automatically use the

00:42:32,300 --> 00:42:37,910
filechooser portal so in many cases you

00:42:36,470 --> 00:42:39,380
don't actually have an application we

00:42:37,910 --> 00:42:42,790
may not need to know anything to use the

00:42:39,380 --> 00:42:42,790
portal you toolkit they do it for you

00:42:47,260 --> 00:42:52,910
you know some of them might just need to

00:42:50,600 --> 00:42:58,790
run on ten bucks for a lot of time that

00:42:52,910 --> 00:43:00,109
depends on what people are like main on

00:42:58,790 --> 00:43:02,210
the next thing we don't want to touch it

00:43:00,109 --> 00:43:04,750
to the next 20 years you know but

00:43:02,210 --> 00:43:08,010
sometimes they're more responsive so

00:43:04,750 --> 00:43:13,280
some of those worth a few the definitely

00:43:08,010 --> 00:43:13,280
engaging with back ok

00:43:36,250 --> 00:43:43,940
so I mean terms of structure for Sikhism

00:43:42,589 --> 00:43:45,619
this is quite up to date and it has

00:43:43,940 --> 00:43:49,519
everything you need there it doesn't

00:43:45,619 --> 00:43:51,740
have the Fedora tax bill or packages but

00:43:49,519 --> 00:43:52,549
that should be pretty much the same

00:43:51,740 --> 00:43:54,200
either way

00:43:52,549 --> 00:43:56,450
so like singlet rasterization should

00:43:54,200 --> 00:43:57,890
work the same whether no matter how that

00:43:56,450 --> 00:44:06,920
could build so you can definitely

00:43:57,890 --> 00:44:10,369
looking for 26 there are downloading

00:44:06,920 --> 00:44:13,720
tests so thank you good or because

00:44:10,369 --> 00:44:13,720
they'll be links to buy tax

00:44:15,730 --> 00:44:18,450
in the back

00:44:21,970 --> 00:44:30,200
so it can be work either way the default

00:44:25,940 --> 00:44:33,200
in Fedora is that lab X and so on salt

00:44:30,200 --> 00:44:36,200
system-wide and it works a bit similarly

00:44:33,200 --> 00:44:38,800
to packages in that if you have the min

00:44:36,200 --> 00:44:40,960
privileges you can install that pack

00:44:38,800 --> 00:44:45,590
system-wide without having to

00:44:40,960 --> 00:44:48,170
authenticate as root but you know so Z

00:44:45,590 --> 00:44:49,850
both system wide but testing purposes we

00:44:48,170 --> 00:44:53,350
don't have them in privileges you can

00:44:49,850 --> 00:44:53,350
also install it just as one user

00:44:59,260 --> 00:45:03,849
I think probably not because that's not

00:45:01,270 --> 00:45:06,310
really what people would expect most of

00:45:03,849 --> 00:45:08,349
this time and I mean it's something I

00:45:06,310 --> 00:45:10,119
think I don't we could do that I don't

00:45:08,349 --> 00:45:12,400
think we do I think instead what we do

00:45:10,119 --> 00:45:18,150
is we ask you to get we ask you from in

00:45:12,400 --> 00:45:18,150
like a prompt to for a user privileges

00:45:24,900 --> 00:45:30,839
um this is pretty enough pretty big

00:45:28,200 --> 00:45:33,210
buckets when we came out the doorbell

00:45:30,839 --> 00:45:34,230
but um I think the answer is we're going

00:45:33,210 --> 00:45:37,160
to see how it goes

00:45:34,230 --> 00:45:40,230
we're that's going to eventually be a

00:45:37,160 --> 00:45:42,450
student for the youth packagers like if

00:45:40,230 --> 00:45:44,670
a pack of your once this is mature if a

00:45:42,450 --> 00:45:45,930
package of says you know flat packs are

00:45:44,670 --> 00:45:47,579
a better way of just doing a package

00:45:45,930 --> 00:45:51,089
when I put it into a flat back it has

00:45:47,579 --> 00:45:53,940
ten box saying I can loose one person I

00:45:51,089 --> 00:45:55,890
work across multiple releases then I

00:45:53,940 --> 00:45:57,720
don't think we're just always going to

00:45:55,890 --> 00:46:00,390
say well no you need ability has an RPM

00:45:57,720 --> 00:46:03,509
to but that's certainly that's some

00:46:00,390 --> 00:46:09,809
releases out probably not for 2017

00:46:03,509 --> 00:46:11,880
clearly because we not the door 28 for

00:46:09,809 --> 00:46:14,069
door 29 maybes peppers would be able to

00:46:11,880 --> 00:46:17,690
do that it's a really policy question

00:46:14,069 --> 00:46:21,089
that was not going to establish until we

00:46:17,690 --> 00:46:26,059
until we actually get some experience

00:46:21,089 --> 00:46:26,059
we're not going to set that policy yeah

00:46:30,309 --> 00:46:37,819
you know I I don't know the I'm you know

00:46:36,650 --> 00:46:39,970
obviously you're better off to

00:46:37,819 --> 00:46:39,970
it

00:46:44,980 --> 00:46:47,730
so you saying

00:46:49,910 --> 00:46:55,480
so you say it's a mandatory act so I

00:46:52,880 --> 00:46:55,480
guess my

00:47:00,740 --> 00:47:05,240
so I mean do you we've basically a big

00:47:03,829 --> 00:47:11,839
meal for a specific vendor question

00:47:05,240 --> 00:47:14,990
there come on exactly our people

00:47:11,839 --> 00:47:17,030
actually using the portables I think

00:47:14,990 --> 00:47:20,300
it's it's a mixed bag currently

00:47:17,030 --> 00:47:21,890
generally a very recent

00:47:20,300 --> 00:47:24,099
you know applications are we build

00:47:21,890 --> 00:47:26,089
sandbox using the file of the portals a

00:47:24,099 --> 00:47:28,220
lot of other applications they're more

00:47:26,089 --> 00:47:30,170
complex will not yet have important to

00:47:28,220 --> 00:47:32,020
using the portal system something like

00:47:30,170 --> 00:47:35,059
OpenOffice would be a pretty big job

00:47:32,020 --> 00:47:36,559
there's a puppet a lot of some sort of

00:47:35,059 --> 00:47:41,349
straight through the code there about

00:47:36,559 --> 00:47:43,550
you know access random files you know I

00:47:41,349 --> 00:47:44,990
think I think it's going to be sort of

00:47:43,550 --> 00:47:46,910
an evolution and then eventually we'll

00:47:44,990 --> 00:47:48,829
start putting the clamps down to tell

00:47:46,910 --> 00:47:51,460
people they really need to sandbox

00:47:48,829 --> 00:47:51,460
applications

00:48:07,360 --> 00:48:12,970
yes so that's some some extend you know

00:48:10,740 --> 00:48:15,370
we don't want to put too many barriers

00:48:12,970 --> 00:48:17,110
there at the start we don't want to say

00:48:15,370 --> 00:48:18,610
well you need to do step every writing

00:48:17,110 --> 00:48:21,820
before you can get a flat pack at all

00:48:18,610 --> 00:48:23,710
but you know I think you're totally

00:48:21,820 --> 00:48:25,180
right and I think it's he's always

00:48:23,710 --> 00:48:27,070
chicken you have to build off the

00:48:25,180 --> 00:48:29,610
ecosystem through all the directions and

00:48:27,070 --> 00:48:31,420
then get but I think there are a lot of

00:48:29,610 --> 00:48:32,740
people are hoping that there were not

00:48:31,420 --> 00:48:34,950
compelling advantages that will get

00:48:32,740 --> 00:48:34,950
there eventually

00:48:46,570 --> 00:48:50,500
not about my person to answer that I

00:48:48,790 --> 00:48:56,330
happen I haven't looked at run teachers

00:48:50,500 --> 00:49:00,220
base feature yeah

00:48:56,330 --> 00:49:00,220
Oh backrest

00:49:17,630 --> 00:49:24,120
ya know the module 1 is also on the gold

00:49:21,750 --> 00:49:26,160
side once you actually build a flat-pack

00:49:24,120 --> 00:49:29,670
it's just a flat back and you can still

00:49:26,160 --> 00:49:32,130
take a flat pack fill up your rpms there

00:49:29,670 --> 00:49:38,070
my name is Suzette or take up Susan our

00:49:32,130 --> 00:49:40,410
Sousa flat pack and run it on so the the

00:49:38,070 --> 00:49:42,540
my role the involvement of modularity is

00:49:40,410 --> 00:49:45,750
all on these four packages side and not

00:49:42,540 --> 00:49:48,840
that all on either side the eventually

00:49:45,750 --> 00:49:51,960
the what you might see a user might see

00:49:48,840 --> 00:49:55,110
eventually is that there are flat packs

00:49:51,960 --> 00:49:58,770
are no longer versions or 26 or 27

00:49:55,110 --> 00:50:01,020
you might just have you know a 2.8

00:49:58,770 --> 00:50:05,810
flat pack and again free flat pack

00:50:01,020 --> 00:50:05,810
instead of the 6.7

00:50:05,869 --> 00:50:12,259
Shawn imogen gangs are something that

00:50:09,289 --> 00:50:16,069
don't need portals kind of example of

00:50:12,259 --> 00:50:17,690
things that don't access user files if

00:50:16,069 --> 00:50:21,339
you put the file dialog but might need

00:50:17,690 --> 00:50:25,880
some file system access for like story

00:50:21,339 --> 00:50:28,489
so is there a persistent like yeah so I

00:50:25,880 --> 00:50:32,680
mean the default for for a flat-pack is

00:50:28,489 --> 00:50:35,839
that it has that the was the exit each

00:50:32,680 --> 00:50:38,950
xdg data we're on an application that's

00:50:35,839 --> 00:50:41,119
sort of semi modern the source files is

00:50:38,950 --> 00:50:43,670
presumably stored for the application

00:50:41,119 --> 00:50:45,619
there so if you store files in there you

00:50:43,670 --> 00:50:49,219
can still access your excellency data

00:50:45,619 --> 00:50:51,109
dirt without going through a portal

00:50:49,219 --> 00:50:54,680
anything use you save there will be

00:50:51,109 --> 00:50:55,789
there next time the application ons you

00:50:54,680 --> 00:50:57,440
know if you obviously have the file

00:50:55,789 --> 00:51:03,259
expect if the application looks for a

00:50:57,440 --> 00:51:05,239
docx file in around the place I think

00:51:03,259 --> 00:51:09,369
could we get the right amount something

00:51:05,239 --> 00:51:09,369
upon dollar home as well

00:51:10,530 --> 00:51:24,270
I'm not sure about that yeah so in

00:51:21,480 --> 00:51:25,620
general you know in general there's

00:51:24,270 --> 00:51:28,560
probably a pretty weak dependency

00:51:25,620 --> 00:51:30,330
between the the kernel is pretty good at

00:51:28,560 --> 00:51:33,210
containing API and involving collateral

00:51:30,330 --> 00:51:34,110
ways so it's not usually the case that's

00:51:33,210 --> 00:51:36,660
something that's running

00:51:34,110 --> 00:51:40,680
unprivileged cares too much about which

00:51:36,660 --> 00:51:43,200
kernel I use is there are the sort of

00:51:40,680 --> 00:51:46,860
exception to this is often graphics

00:51:43,200 --> 00:51:48,240
drivers because new features got

00:51:46,860 --> 00:51:53,490
McCarver's might require them kernel

00:51:48,240 --> 00:51:57,120
features and for that we've actually

00:51:53,490 --> 00:51:58,080
there's a system called extensions so

00:51:57,120 --> 00:51:59,190
you can everybody have a runtime an

00:51:58,080 --> 00:52:01,350
extension which is basically a way of

00:51:59,190 --> 00:52:04,590
saying I'm gonna take this runtime I'm

00:52:01,350 --> 00:52:06,300
gonna drop in a new graphics driver but

00:52:04,590 --> 00:52:11,130
you know you could certainly see a

00:52:06,300 --> 00:52:12,930
situation where there one time you could

00:52:11,130 --> 00:52:15,240
be updated to work with the new kernel

00:52:12,930 --> 00:52:16,690
version in some way and that they should

00:52:15,240 --> 00:52:19,750
be able to take advantage of you

00:52:16,690 --> 00:52:21,039
because it has the new runtime but I

00:52:19,750 --> 00:52:24,490
wouldn't generally say that there's any

00:52:21,039 --> 00:52:29,289
strict prepare between the deep runtime

00:52:24,490 --> 00:52:33,130
and the kernel version oh I'm just

00:52:29,289 --> 00:52:36,970
wondering are the runtimes supplied with

00:52:33,130 --> 00:52:39,460
like Fedora 26 to 26 okay it's

00:52:36,970 --> 00:52:45,309
set of those runtimes so it may be

00:52:39,460 --> 00:52:47,349
different than something so so there

00:52:45,309 --> 00:52:48,520
might be generally we would like to say

00:52:47,349 --> 00:52:51,520
way from where at one time going to use

00:52:48,520 --> 00:52:53,410
with any host operating system clearly

00:52:51,520 --> 00:52:54,910
the runtime does talk to the host

00:52:53,410 --> 00:52:57,640
operating system in different ways they

00:52:54,910 --> 00:52:59,200
need to need to communicate so they the

00:52:57,640 --> 00:53:01,569
interface did they communicate over have

00:52:59,200 --> 00:53:03,309
to be stable like if the runtime talks

00:53:01,569 --> 00:53:05,470
the way land protocol to say I went for

00:53:03,309 --> 00:53:07,240
the window on the screen then the host

00:53:05,470 --> 00:53:11,200
operating system has to understand that

00:53:07,240 --> 00:53:12,579
protocol so there I can't just say that

00:53:11,200 --> 00:53:14,619
anyone have a look with any host

00:53:12,579 --> 00:53:16,990
operating system but the expectation is

00:53:14,619 --> 00:53:18,809
that a runtime is not kind of course

00:53:16,990 --> 00:53:21,339
offering system it talks via standard

00:53:18,809 --> 00:53:24,520
protocols interfaces you can use this

00:53:21,339 --> 00:53:26,910
souza runtime with fedora or one time

00:53:24,520 --> 00:53:26,910
with souza

00:53:28,710 --> 00:53:34,440
can you compare lock back to similar

00:53:32,460 --> 00:53:37,380
technologies in other operating systems

00:53:34,440 --> 00:53:40,550
I mean our sex applications and Android

00:53:37,380 --> 00:53:44,849
applications are dissimilar hold on I

00:53:40,550 --> 00:53:47,510
don't see it there somebody similar in

00:53:44,849 --> 00:53:55,680
some ways the aprender that's obviously

00:53:47,510 --> 00:53:58,579
so I mean I think the idea of using a

00:53:55,680 --> 00:54:02,730
sort of the file system namespaces is

00:53:58,579 --> 00:54:04,140
fairly specific to black and and also

00:54:02,730 --> 00:54:06,359
it's something insures with like docker

00:54:04,140 --> 00:54:08,609
containers but not so much with other

00:54:06,359 --> 00:54:10,140
operating systems because generally

00:54:08,609 --> 00:54:12,740
alarm systems have had sort of more

00:54:10,140 --> 00:54:16,619
leeway to require application rewriting

00:54:12,740 --> 00:54:18,359
so so we're trying to do it in a way

00:54:16,619 --> 00:54:20,400
that's more compatible with justing

00:54:18,359 --> 00:54:23,130
applications and policies and mantissa

00:54:20,400 --> 00:54:25,319
to provide a way of doing that Keva TT

00:54:23,130 --> 00:54:30,540
is why is I think what flat paddocks

00:54:25,319 --> 00:54:32,640
provide are pretty similar to what you

00:54:30,540 --> 00:54:34,829
know whatever seems quiet in the

00:54:32,640 --> 00:54:36,720
universe sandbox applications like I

00:54:34,829 --> 00:54:38,940
mean both Windows and Mac have been

00:54:36,720 --> 00:54:42,210
moving towards the sandbox model I think

00:54:38,940 --> 00:54:44,280
when you a sandbox flat pack or sandbox

00:54:42,210 --> 00:54:47,670
Mac Mac or Android application would

00:54:44,280 --> 00:54:49,890
have similar capabilities androids inter

00:54:47,670 --> 00:54:53,059
application model is much more complex

00:54:49,890 --> 00:54:56,309
and I think that offers some real

00:54:53,059 --> 00:55:00,329
security problems so because essentially

00:54:56,309 --> 00:55:02,609
an android they're intense which of

00:55:00,329 --> 00:55:03,790
they're good ones and portals are not a

00:55:02,609 --> 00:55:05,530
big step right a minute

00:55:03,790 --> 00:55:08,950
the operating system it said any

00:55:05,530 --> 00:55:10,840
application can offer any intent or to

00:55:08,950 --> 00:55:15,310
any other application well it sounds

00:55:10,840 --> 00:55:16,870
really poor really powerful it's a huge

00:55:15,310 --> 00:55:17,980
vector for leaking permissions for

00:55:16,870 --> 00:55:21,730
applications and other internal

00:55:17,980 --> 00:55:23,880
application and also makes it very hard

00:55:21,730 --> 00:55:25,780
to establish a good user interface board

00:55:23,880 --> 00:55:27,040
because you know something that

00:55:25,780 --> 00:55:29,500
somebody's thinking about an internal

00:55:27,040 --> 00:55:31,750
part of application suddenly it's using

00:55:29,500 --> 00:55:34,900
a lot of patient and I don't think I

00:55:31,750 --> 00:55:37,000
think that the flat-pack model is a more

00:55:34,900 --> 00:55:38,290
secure way of doing permissions than the

00:55:37,000 --> 00:55:40,090
Android intent bottle though it's

00:55:38,290 --> 00:55:43,750
slightly less flexible there's a

00:55:40,090 --> 00:55:45,400
consequence of that but yeah I mean I

00:55:43,750 --> 00:55:46,570
think we're you know we're so sensitive

00:55:45,400 --> 00:55:48,820
trying to shoot a little bit smaller or

00:55:46,570 --> 00:55:50,860
not resigning everything and provide

00:55:48,820 --> 00:55:54,000
more the existing set of API is instead

00:55:50,860 --> 00:55:54,000
of the whole

00:55:56,550 --> 00:56:09,060
okay thanks everybody it hasn't occurred

00:56:06,450 --> 00:56:11,760
yes I publish in repeating I should have

00:56:09,060 --> 00:56:13,260
been getting questions but hopefully

00:56:11,760 --> 00:56:16,100
it's a small enough room so that the

00:56:13,260 --> 00:56:16,100
recording was Philippines

00:56:18,770 --> 00:56:21,770
okay

00:56:28,220 --> 00:56:33,290
yeah do you know what the adduction of

00:56:32,050 --> 00:56:37,369
vaccinations

00:56:33,290 --> 00:56:42,520
I didn't say that in terms of making

00:56:37,369 --> 00:56:42,520

YouTube URL: https://www.youtube.com/watch?v=Zfr5WUttNA8


