Title: Flock 2017 - The Upstream Pivot: Arbitrary Branching
Publication date: 2017-10-24
Playlist: Flock 2017
Description: 
	Wednesday August 30, 2017 4:30pm - 5:00pm
@Centerville A + B
Talk: The Upstream Pivot: Arbitrary Branching
Presenter: Matthew Prahl

Description:
To fully take advantage of modularity, we need to provide packages with different lifecycles, SLA, and EOLs. With the current branching workflow, we have one branch per Fedora release, which restricts a package to a single version in a Fedora release. By introducing the new workflow of “arbitrary branching”, this allows module packagers to use package/component branches that meet their needs in regards to version, SLA, and EOL. This talk will cover:
- Why we implemented “arbitrary branching” and how this affects Fedora
- What tooling changes took place and why we made those decisions
- How to get involved and take advantage of “arbitrary branching”, including a walkthrough of the current tools
Captions: 
	00:00:02,490 --> 00:00:06,690
so specifically we're gonna cover what

00:00:04,410 --> 00:00:08,820
is arbitrary branching what was our but

00:00:06,690 --> 00:00:11,070
why was arbitrary branching implemented

00:00:08,820 --> 00:00:14,940
what tooling changes took place and how

00:00:11,070 --> 00:00:16,529
to get an arbitrary branch so basically

00:00:14,940 --> 00:00:18,449
an arbitrary branch is just a branch

00:00:16,529 --> 00:00:21,449
that has service levels not tied to a

00:00:18,449 --> 00:00:23,730
Fedora release so what I mean by service

00:00:21,449 --> 00:00:26,130
levels is take for instance if you want

00:00:23,730 --> 00:00:28,410
to package something for Fedora 26 you

00:00:26,130 --> 00:00:31,230
have an F 26 branch and in this kit you

00:00:28,410 --> 00:00:32,820
package it up but it's also it's implied

00:00:31,230 --> 00:00:36,149
that you're gonna provide security and

00:00:32,820 --> 00:00:38,489
bug fixes their release upstream and

00:00:36,149 --> 00:00:40,320
you're gonna release those as well for

00:00:38,489 --> 00:00:45,260
the remainder of the life of the door 26

00:00:40,320 --> 00:00:48,180
so basically any eol of 13 months there

00:00:45,260 --> 00:00:49,829
so an arbitrary branch would usually

00:00:48,180 --> 00:00:52,260
have a service level that map's

00:00:49,829 --> 00:00:54,210
to the service levels provide for that

00:00:52,260 --> 00:00:58,140
version upstream that you're shipping

00:00:54,210 --> 00:01:00,300
rather than a fedora release so usually

00:00:58,140 --> 00:01:03,030
the naming scheme it can be it could be

00:01:00,300 --> 00:01:05,070
anything but usually you would map it to

00:01:03,030 --> 00:01:10,080
something upstream like a version number

00:01:05,070 --> 00:01:11,430
but you could literally name anything so

00:01:10,080 --> 00:01:13,470
if you are the current service levels

00:01:11,430 --> 00:01:15,060
that we have defined in the door and

00:01:13,470 --> 00:01:18,030
these will be managed later on

00:01:15,060 --> 00:01:20,820
viola hinge so right now we have bug

00:01:18,030 --> 00:01:23,520
fixes security fixes stable API and

00:01:20,820 --> 00:01:25,560
rawhide current fedora releases have bug

00:01:23,520 --> 00:01:28,740
fixes and security fixes tied to their

00:01:25,560 --> 00:01:31,950
branches apple 7 and el6 have an

00:01:28,740 --> 00:01:34,259
additional one of stable API and then

00:01:31,950 --> 00:01:35,770
rawhide is only used that's tied to the

00:01:34,259 --> 00:01:37,630
master branch

00:01:35,770 --> 00:01:39,310
it may seem counterintuitive to have a

00:01:37,630 --> 00:01:41,170
service level called rawhide but it's

00:01:39,310 --> 00:01:46,530
really just a service level that

00:01:41,170 --> 00:01:46,530
guarantees no service yes

00:01:48,840 --> 00:01:52,620
it does not know

00:01:55,470 --> 00:02:01,020
so why we implement this the main

00:01:59,100 --> 00:02:03,180
reasons that's beneficial to modularity

00:02:01,020 --> 00:02:04,590
so straight from the wiki page we can

00:02:03,180 --> 00:02:06,960
see that modularity is an ongoing

00:02:04,590 --> 00:02:08,970
initiative to resolve the issue of

00:02:06,960 --> 00:02:11,760
divergent occasionally conflicting life

00:02:08,970 --> 00:02:14,730
cycles with different components so you

00:02:11,760 --> 00:02:16,380
can't really achieve those results we're

00:02:14,730 --> 00:02:19,860
just having one branch perfe door

00:02:16,380 --> 00:02:22,860
release for instance if you want to have

00:02:19,860 --> 00:02:25,830
both the version of python django 1.9

00:02:22,860 --> 00:02:29,040
and one dot and missing a single fedora

00:02:25,830 --> 00:02:30,630
release it'd be problematic because

00:02:29,040 --> 00:02:34,500
there could be some incompatibilities

00:02:30,630 --> 00:02:36,959
with them but additionally perhaps one

00:02:34,500 --> 00:02:39,750
version of python Django relies on a

00:02:36,959 --> 00:02:43,709
newer version of Python request then the

00:02:39,750 --> 00:02:46,560
current distro is relying on so this

00:02:43,709 --> 00:02:49,850
example here is one that I took from

00:02:46,560 --> 00:02:53,610
Ralph's presentation from dev comp and

00:02:49,850 --> 00:02:56,489
you have the 1.9 branch on the Django

00:02:53,610 --> 00:02:59,549
module that relies on the 1.9 branch of

00:02:56,489 --> 00:03:02,340
Python Django and the 2.12 branch of

00:02:59,549 --> 00:03:03,819
Python requests but let's say 1.10 does

00:03:02,340 --> 00:03:05,799
actually need that new

00:03:03,819 --> 00:03:06,969
Python requests it can use the master

00:03:05,799 --> 00:03:08,499
branch

00:03:06,969 --> 00:03:10,180
I wouldn't recommend necessarily using

00:03:08,499 --> 00:03:12,129
the master branch other than testing

00:03:10,180 --> 00:03:15,909
because there is no service level tied

00:03:12,129 --> 00:03:18,549
to it but you could for testing and then

00:03:15,909 --> 00:03:20,620
using the 1.10 branch for Python Django

00:03:18,549 --> 00:03:22,719
so it gives you this added flexibility

00:03:20,620 --> 00:03:24,819
to have those different life cycles and

00:03:22,719 --> 00:03:27,030
often conflicting life cycles without

00:03:24,819 --> 00:03:30,459
breaking the entire distribution because

00:03:27,030 --> 00:03:32,500
many packages rely on other packages and

00:03:30,459 --> 00:03:36,340
if you introduce a break and change it

00:03:32,500 --> 00:03:38,620
could break other packages the other

00:03:36,340 --> 00:03:41,139
benefit which won't be readily apparent

00:03:38,620 --> 00:03:44,469
right now is that once the door moves to

00:03:41,139 --> 00:03:46,719
be a entirely modular distribution you

00:03:44,469 --> 00:03:49,030
can there lower the amount of branches

00:03:46,719 --> 00:03:52,090
they have to maintain so for instance I

00:03:49,030 --> 00:03:55,269
have a package right now that I shipped

00:03:52,090 --> 00:03:57,879
for F point 5 F 26 an Apple 7 I also

00:03:55,269 --> 00:03:59,290
maintain the f27 branch and master

00:03:57,879 --> 00:04:02,439
branch to make sure that they can always

00:03:59,290 --> 00:04:04,750
still build in theory this could be

00:04:02,439 --> 00:04:06,489
narrowed down to just one branch because

00:04:04,750 --> 00:04:10,500
there's really no differences between

00:04:06,489 --> 00:04:10,500
the branches it's all the same spec file

00:04:11,860 --> 00:04:17,820
so there's been a lot of tooling changes

00:04:13,810 --> 00:04:20,620
that took place to make this a reality

00:04:17,820 --> 00:04:23,740
we primarily had two architectural

00:04:20,620 --> 00:04:26,140
decisions to choose from it was kind of

00:04:23,740 --> 00:04:28,570
a challenge because we needed to support

00:04:26,140 --> 00:04:31,090
arbitrary branching this this new way of

00:04:28,570 --> 00:04:35,980
branching but also support the old way

00:04:31,090 --> 00:04:38,980
as well because arbitrary branches are

00:04:35,980 --> 00:04:41,260
just used for modules and Fedora is not

00:04:38,980 --> 00:04:45,160
going to be entirely modular modular for

00:04:41,260 --> 00:04:47,080
quite some time so we could have went

00:04:45,160 --> 00:04:49,150
and modified package DB to support

00:04:47,080 --> 00:04:50,920
arbitrary branching this would have

00:04:49,150 --> 00:04:52,390
required seeing this significant

00:04:50,920 --> 00:04:54,970
modification in the package see visa

00:04:52,390 --> 00:04:59,020
because package GB was written with the

00:04:54,970 --> 00:05:01,900
paradigm to map one branch to a single

00:04:59,020 --> 00:05:04,630
Fedora release the alternative option

00:05:01,900 --> 00:05:06,400
though is to join up with Packer over

00:05:04,630 --> 00:05:09,669
disputes and supplemented with

00:05:06,400 --> 00:05:12,010
additional API so Packer PDC api's and

00:05:09,669 --> 00:05:15,910
whatever scripting changes that needed

00:05:12,010 --> 00:05:18,700
to happen to support this change so we

00:05:15,910 --> 00:05:21,310
ended up going with option two primarily

00:05:18,700 --> 00:05:24,160
because we thought be an opportunity to

00:05:21,310 --> 00:05:26,919
reduce technical debt for the future

00:05:24,160 --> 00:05:28,900
because if we're to modify package DB

00:05:26,919 --> 00:05:31,780
and make it work with arbitrary branches

00:05:28,900 --> 00:05:34,630
but later on packer of a diskette

00:05:31,780 --> 00:05:36,120
project took off they'd have to either

00:05:34,630 --> 00:05:38,070
significantly

00:05:36,120 --> 00:05:39,840
by packaged TV again because there are

00:05:38,070 --> 00:05:44,100
some conflicting features between the

00:05:39,840 --> 00:05:46,169
two such as ACL management or you'd have

00:05:44,100 --> 00:05:49,770
to do some hackery where you have one

00:05:46,169 --> 00:05:51,090
sync together so in the end package DB

00:05:49,770 --> 00:05:54,090
would have probably ended up being

00:05:51,090 --> 00:05:58,970
decommissioned anyways so it's saving

00:05:54,090 --> 00:06:01,080
some effort to the future and

00:05:58,970 --> 00:06:03,600
additionally a packer with disk it does

00:06:01,080 --> 00:06:06,210
provide some additional features are

00:06:03,600 --> 00:06:09,949
quite nice such as being able to a4 can

00:06:06,210 --> 00:06:09,949
provide for request inspect files

00:06:11,570 --> 00:06:16,610
so this is what Tiger for this kit looks

00:06:14,060 --> 00:06:19,670
like it's very similar to Hagrid I oh if

00:06:16,610 --> 00:06:21,560
you use that the primary differences is

00:06:19,670 --> 00:06:22,940
just a few theming changes there but

00:06:21,560 --> 00:06:24,290
well sort of walk you through the

00:06:22,940 --> 00:06:27,320
interface I know it's a little hard to

00:06:24,290 --> 00:06:30,770
see but this is a package that I

00:06:27,320 --> 00:06:33,830
maintain Federico - Shrek and on the

00:06:30,770 --> 00:06:36,920
right-hand side are the maintainer zuv

00:06:33,830 --> 00:06:39,590
this specific package here so I'm the

00:06:36,920 --> 00:06:41,990
main admin which is basically given to

00:06:39,590 --> 00:06:44,720
the person who has the pack the

00:06:41,990 --> 00:06:46,340
repository created there's not a lot of

00:06:44,720 --> 00:06:49,790
difference between a main admin and an

00:06:46,340 --> 00:06:51,860
admin but ralph fear has commit access

00:06:49,790 --> 00:06:54,980
which means that he can contribute to

00:06:51,860 --> 00:06:57,640
all the branches to make changes but he

00:06:54,980 --> 00:07:00,290
can actually invite other maintainer x'

00:06:57,640 --> 00:07:01,600
I'm in this instance I'm the only one

00:07:00,290 --> 00:07:03,860
that's able to do that

00:07:01,600 --> 00:07:06,020
and on the right-hand side you can see

00:07:03,860 --> 00:07:08,260
the branches that were created on this

00:07:06,020 --> 00:07:08,260
project

00:07:10,279 --> 00:07:16,579
so as I mentioned some of the we had to

00:07:14,359 --> 00:07:19,639
add some information in PC the product

00:07:16,579 --> 00:07:21,109
definition Center some of it was new

00:07:19,639 --> 00:07:23,899
information that we had to add for

00:07:21,109 --> 00:07:25,939
arbitrary branches and some of it is old

00:07:23,899 --> 00:07:29,889
information that package DB provided but

00:07:25,939 --> 00:07:32,479
Packer reduced it did not so this is a

00:07:29,889 --> 00:07:36,919
it's hard to see sorry about that but

00:07:32,479 --> 00:07:39,859
this is a branch in an API that I wrote

00:07:36,919 --> 00:07:41,569
in PVC which represents the service

00:07:39,859 --> 00:07:44,089
levels that are tied to that branch so

00:07:41,569 --> 00:07:46,909
it's the Apple 7 branch with Federico -

00:07:44,089 --> 00:07:50,049
Shrek and you can see that there's the

00:07:46,909 --> 00:07:53,119
security fixes bug fixes and stable API

00:07:50,049 --> 00:07:57,499
service levels attached to it each

00:07:53,119 --> 00:08:01,249
having an AOL set to 20 24 June June

00:07:57,499 --> 00:08:05,299
30th and this is our guess of when ralph

00:08:01,249 --> 00:08:09,009
7 would actually eol and down there

00:08:05,299 --> 00:08:11,479
there's a type which is RPM because the

00:08:09,009 --> 00:08:14,360
component branch entries can actually be

00:08:11,479 --> 00:08:17,149
4 modules and containers as well and the

00:08:14,360 --> 00:08:21,049
active flag there is a dynamic read-only

00:08:17,149 --> 00:08:23,629
flag that is determined based on if

00:08:21,049 --> 00:08:25,639
there is a service level attached to the

00:08:23,629 --> 00:08:28,249
branch that has not a oh L then it's

00:08:25,639 --> 00:08:31,309
considered active otherwise it is

00:08:28,249 --> 00:08:34,789
inactive and the information that was

00:08:31,309 --> 00:08:37,430
provided in stored in package TV that is

00:08:34,789 --> 00:08:39,860
not impact over disk is whether that

00:08:37,430 --> 00:08:44,689
specific component is critical path or

00:08:39,860 --> 00:08:47,389
not just above the picture is the actual

00:08:44,689 --> 00:08:53,000
URL I used to query to find this

00:08:47,389 --> 00:08:56,180
specific component branch so this ended

00:08:53,000 --> 00:08:58,250
up causing a lot of change so the most

00:08:56,180 --> 00:09:01,399
notable thing probably is that there's a

00:08:58,250 --> 00:09:03,800
new tool now to request new repositories

00:09:01,399 --> 00:09:06,230
and new branches and that's Federico -

00:09:03,800 --> 00:09:09,889
Shrek I'll show some examples of how to

00:09:06,230 --> 00:09:12,139
request up using this and also there's

00:09:09,889 --> 00:09:15,589
an admin tool that processes these

00:09:12,139 --> 00:09:18,500
requests that this tool makes new

00:09:15,589 --> 00:09:21,009
branches in gate require PVC entries so

00:09:18,500 --> 00:09:25,850
that PVC entry that I showed you there

00:09:21,009 --> 00:09:28,819
once that's created the ACLS on Packer

00:09:25,850 --> 00:09:30,639
get regenerated and then it allows you

00:09:28,819 --> 00:09:34,009
to then create that branch and you get

00:09:30,639 --> 00:09:36,050
I'm working on a PR right now to Tiger

00:09:34,009 --> 00:09:37,490
to have an API that just creates the

00:09:36,050 --> 00:09:39,829
branch for you so you don't have to

00:09:37,490 --> 00:09:41,809
manually do this because I is something

00:09:39,829 --> 00:09:43,000
that hacks to be used to provide and

00:09:41,809 --> 00:09:44,470
that

00:09:43,000 --> 00:09:48,310
members of the community are interested

00:09:44,470 --> 00:09:51,070
in having Zach forking and polar fest

00:09:48,310 --> 00:09:52,990
like I said are now allowed so no longer

00:09:51,070 --> 00:09:55,570
do you have to send patches over email

00:09:52,990 --> 00:09:57,430
or in Bugzilla tickets you can use for

00:09:55,570 --> 00:09:59,170
project create a four word class and

00:09:57,430 --> 00:10:04,030
have that discussion right in the pull

00:09:59,170 --> 00:10:05,920
request and ACLs and now repository wide

00:10:04,030 --> 00:10:08,560
they used to be per branch and this is a

00:10:05,920 --> 00:10:11,410
technical decision or limitation based

00:10:08,560 --> 00:10:14,380
on how you look at it for the tagger

00:10:11,410 --> 00:10:16,780
additionally the ACL zarnow handled

00:10:14,380 --> 00:10:19,600
through the Packer user interface as

00:10:16,780 --> 00:10:21,010
well as the watch status so you used to

00:10:19,600 --> 00:10:24,940
be able to watch the bugzilla

00:10:21,010 --> 00:10:27,550
issues and by selecting that in packet

00:10:24,940 --> 00:10:29,290
TV now you just do the same thing but in

00:10:27,550 --> 00:10:32,590
Packer so there's a little watch button

00:10:29,290 --> 00:10:35,440
on the project click watch issues and

00:10:32,590 --> 00:10:36,850
it'll see see you on the bugzilla

00:10:35,440 --> 00:10:38,970
tickets that are filed against the

00:10:36,850 --> 00:10:42,160
project

00:10:38,970 --> 00:10:45,040
additionally package TV would allow you

00:10:42,160 --> 00:10:48,670
to set the default assignee to bugzilla

00:10:45,040 --> 00:10:50,290
tickets on the product so on Epple for

00:10:48,670 --> 00:10:52,180
instance if you want one of your

00:10:50,290 --> 00:10:55,720
maintainer to get that view the default

00:10:52,180 --> 00:10:58,150
assignee on ethyl bugs you would set

00:10:55,720 --> 00:11:00,820
that impac TV thats now in a yellow file

00:10:58,150 --> 00:11:04,839
and a git repository and Relan fedora

00:11:00,820 --> 00:11:06,780
SDM requests pretty simple syntax the

00:11:04,839 --> 00:11:10,170
readme explains how to do that

00:11:06,780 --> 00:11:12,240
and if you want to modify that just fork

00:11:10,170 --> 00:11:15,030
it and submit a pull request and

00:11:12,240 --> 00:11:17,430
additionally the the monitoring flag for

00:11:15,030 --> 00:11:19,290
the new hotness is set in that same

00:11:17,430 --> 00:11:21,120
yellow file and I'll show you the syntax

00:11:19,290 --> 00:11:23,010
of that in a bit but that's

00:11:21,120 --> 00:11:26,070
automatically filled in for you when you

00:11:23,010 --> 00:11:29,220
request the package kind of like the way

00:11:26,070 --> 00:11:32,160
it was with packaging

00:11:29,220 --> 00:11:35,070
orphan packages are now denoted by the

00:11:32,160 --> 00:11:37,890
main admin of the project being the

00:11:35,070 --> 00:11:40,440
orphan user in Packer and retired

00:11:37,890 --> 00:11:42,960
packages still have that same owner has

00:11:40,440 --> 00:11:45,750
orphan but additionally it means that

00:11:42,960 --> 00:11:50,660
all the branches in PDC tied for that

00:11:45,750 --> 00:11:50,660
project or that package are now inactive

00:11:52,040 --> 00:11:57,390
so specifically like how do I use this

00:11:54,930 --> 00:12:00,360
this new tool like how do I request in

00:11:57,390 --> 00:12:03,270
your repo new branch so it's pretty

00:12:00,360 --> 00:12:07,080
simple you just DNF install Federico -

00:12:03,270 --> 00:12:09,650
Shrek the latest version is in Fedora 26

00:12:07,080 --> 00:12:12,660
but I'm still waiting on gang karma for

00:12:09,650 --> 00:12:15,200
f25 and Ethel 7 so if anyone wants to do

00:12:12,660 --> 00:12:18,870
that after the talk please do so

00:12:15,200 --> 00:12:21,120
so you just it's basically the same sort

00:12:18,870 --> 00:12:25,050
of options that you had in the in the

00:12:21,120 --> 00:12:27,580
package TV ticket using all the defaults

00:12:25,050 --> 00:12:30,430
you can create a new repository

00:12:27,580 --> 00:12:31,990
the Federico - correct the repository

00:12:30,430 --> 00:12:34,120
name so the project name that you're

00:12:31,990 --> 00:12:36,280
requesting and the Bugzilla tickets that

00:12:34,120 --> 00:12:41,310
shows those actually approved by

00:12:36,280 --> 00:12:41,310
packager oh yeah

00:12:43,020 --> 00:12:50,880
it does not it's a separate flag so it

00:12:47,310 --> 00:12:55,370
be - end and then modules or - and

00:12:50,880 --> 00:12:55,370
container it defaults to rpms

00:13:00,540 --> 00:13:04,760
the bugs or ticket ID yep

00:13:10,430 --> 00:13:18,440
yes yep yep so when you actually submit

00:13:14,750 --> 00:13:23,060
a new request it does some validation on

00:13:18,440 --> 00:13:25,070
the Bugzilla ticket all that it can the

00:13:23,060 --> 00:13:27,200
admin tool does more validation because

00:13:25,070 --> 00:13:29,450
it requires a certain like

00:13:27,200 --> 00:13:32,600
authentication to fast for instance

00:13:29,450 --> 00:13:35,180
through the queries so I'll show an

00:13:32,600 --> 00:13:37,640
example of what Federico wrecked repo

00:13:35,180 --> 00:13:40,010
names the first one show gives you but

00:13:37,640 --> 00:13:43,420
I'll backtrack a little bit

00:13:40,010 --> 00:13:46,400
this tool is basically a wrapper around

00:13:43,420 --> 00:13:48,320
submitting tickets using the Packer API

00:13:46,400 --> 00:13:50,390
and it does a lot of validation and just

00:13:48,320 --> 00:13:52,610
gets you the the structure that the

00:13:50,390 --> 00:13:56,180
ticket needs to be in so that the admin

00:13:52,610 --> 00:13:58,070
tool to then process it later on so the

00:13:56,180 --> 00:14:00,910
second option is just if you want to

00:13:58,070 --> 00:14:03,200
request an F 26 branch for that same

00:14:00,910 --> 00:14:06,290
package you would just do Federico RAC

00:14:03,200 --> 00:14:08,620
branch repository name and then the

00:14:06,290 --> 00:14:08,620
branch name

00:14:10,230 --> 00:14:18,160
it's a separate command

00:14:12,880 --> 00:14:18,160
but it comes with the same package yes

00:14:23,269 --> 00:14:29,389
so if if you want to be able to create a

00:14:27,529 --> 00:14:31,850
new branch and get it has to have the

00:14:29,389 --> 00:14:35,360
entry in PVC so that's what gives you

00:14:31,850 --> 00:14:37,250
the ACLS to create that branch so what

00:14:35,360 --> 00:14:40,630
this does is it actually creates that

00:14:37,250 --> 00:14:42,709
entry in PC wants its process and then

00:14:40,630 --> 00:14:44,149
afterwards you can then create the

00:14:42,709 --> 00:14:47,660
branch yourself and get but like I said

00:14:44,149 --> 00:14:50,709
I'm working on changing the code so it

00:14:47,660 --> 00:14:50,709
creates the branch for you

00:14:52,320 --> 00:14:56,550
so if you wanted an arbitrary branch

00:14:54,509 --> 00:14:57,899
however it's very similar to the command

00:14:56,550 --> 00:15:01,019
above except that you have to provide

00:14:57,899 --> 00:15:02,880
service levels tied to it when you're

00:15:01,019 --> 00:15:05,790
using just a fedora a standard Fedora

00:15:02,880 --> 00:15:07,320
release branch we know what the service

00:15:05,790 --> 00:15:09,630
levels are because we know when the

00:15:07,320 --> 00:15:13,920
distribution or that release aol's

00:15:09,630 --> 00:15:16,560
so we fill that in for you but so here

00:15:13,920 --> 00:15:18,839
you just type in so like say I have

00:15:16,560 --> 00:15:21,060
there's a 2.1 version of a package

00:15:18,839 --> 00:15:23,579
upstream that's maintained until January

00:15:21,060 --> 00:15:26,910
1st 2020 some bug fixes and security

00:15:23,579 --> 00:15:29,279
fixes are provided and I think that you

00:15:26,910 --> 00:15:31,319
know I can handle repackaging it when

00:15:29,279 --> 00:15:34,680
there's new releases of that version for

00:15:31,319 --> 00:15:40,490
till then then I would set that Yoel

00:15:34,680 --> 00:15:40,490
accordingly so moving on

00:15:48,840 --> 00:15:54,060
so I'll go back to the strange stuff

00:15:52,230 --> 00:15:58,430
that has the began of the presentation

00:15:54,060 --> 00:16:02,490
so this is the lift that has to be from

00:15:58,430 --> 00:16:04,560
it's defined in PDC and rel ends can add

00:16:02,490 --> 00:16:06,720
more in community but right now it's

00:16:04,560 --> 00:16:09,529
just security fixes bug fixes stable API

00:16:06,720 --> 00:16:09,529
and rawhide

00:16:14,700 --> 00:16:19,890
yes well you have to submit a tickets to

00:16:17,500 --> 00:16:19,890
do so

00:16:19,930 --> 00:16:25,180
right because it's because it's a change

00:16:23,890 --> 00:16:28,780
in what you're promising to the

00:16:25,180 --> 00:16:31,240
community in a way probably extending it

00:16:28,780 --> 00:16:33,550
should probably be talked about maybe

00:16:31,240 --> 00:16:35,620
being something that can be automatic

00:16:33,550 --> 00:16:37,660
yeah but definitely shortening it would

00:16:35,620 --> 00:16:42,820
need some consideration from release

00:16:37,660 --> 00:16:45,160
engineering so this is what a new

00:16:42,820 --> 00:16:48,610
repository request looks like in Packer

00:16:45,160 --> 00:16:50,230
it's just JSON you never have to

00:16:48,610 --> 00:16:53,050
interact with this directly as long as

00:16:50,230 --> 00:16:55,450
you use the COI tool but in theory if

00:16:53,050 --> 00:16:58,090
you want to avoid using the CLI tool at

00:16:55,450 --> 00:16:59,860
all cost I guess you could just copy the

00:16:58,090 --> 00:17:06,670
JSON and modify the fields that you'd

00:16:59,860 --> 00:17:09,930
like so the admin tool here most of you

00:17:06,670 --> 00:17:13,390
probably not used but few of you may

00:17:09,930 --> 00:17:15,010
this is the list man it shows all the

00:17:13,390 --> 00:17:18,670
tickets that are currently in the queue

00:17:15,010 --> 00:17:20,770
right now I'm running the process 21 so

00:17:18,670 --> 00:17:23,650
I just want to process take it number 21

00:17:20,770 --> 00:17:27,730
I could do process all in process from

00:17:23,650 --> 00:17:30,970
oldest to newest it then checks the

00:17:27,730 --> 00:17:32,700
validity of the bugzilla bug make sure

00:17:30,970 --> 00:17:34,930
that the project doesn't always this

00:17:32,700 --> 00:17:35,390
make sure that there's an account in

00:17:34,930 --> 00:17:37,700
this

00:17:35,390 --> 00:17:40,040
all ready for that and then I present

00:17:37,700 --> 00:17:42,650
the admin with the information about the

00:17:40,040 --> 00:17:44,630
request they wanted to further dig into

00:17:42,650 --> 00:17:47,060
it they could click on the fazil URL

00:17:44,630 --> 00:17:48,920
actually look at the Zilla ticket make

00:17:47,060 --> 00:17:51,800
sure it's ok

00:17:48,920 --> 00:17:55,040
you hit approve it creates the entry in

00:17:51,800 --> 00:17:57,740
PDC and maps a so at the service levels

00:17:55,040 --> 00:18:01,790
to that branch in PDC creates the

00:17:57,740 --> 00:18:05,570
project in Packer and that sets the

00:18:01,790 --> 00:18:08,660
monitoring flag in the felons Fedor SEM

00:18:05,570 --> 00:18:11,150
request repository and that Yamaha and

00:18:08,660 --> 00:18:13,400
it changes the main admin of the project

00:18:11,150 --> 00:18:15,350
to the requester of the ticket because

00:18:13,400 --> 00:18:18,320
by default it's by the person who

00:18:15,350 --> 00:18:20,390
creates it adds comments to the Packer

00:18:18,320 --> 00:18:22,220
issue as well as the Bugzilla

00:18:20,390 --> 00:18:24,620
issue thing that was created with the

00:18:22,220 --> 00:18:25,940
link to it and then at that point you're

00:18:24,620 --> 00:18:32,420
asked if you want to add an additional

00:18:25,940 --> 00:18:35,350
comment and then close them and so

00:18:32,420 --> 00:18:39,290
processing that new repository request

00:18:35,350 --> 00:18:42,290
just gives you this bear project and you

00:18:39,290 --> 00:18:44,750
can see it's owned by peer just the

00:18:42,290 --> 00:18:48,680
master branch there creates the PDC

00:18:44,750 --> 00:18:52,910
entry it's just the the rawhide service

00:18:48,680 --> 00:18:55,280
level mapped to the branch and that's

00:18:52,910 --> 00:18:59,980
the monitoring entry in the ammo file in

00:18:55,280 --> 00:18:59,980
rel inge fedora SDM requests and

00:19:01,650 --> 00:19:06,180
so to summarize arbitrary branches or

00:19:03,870 --> 00:19:07,830
branches that have sir cells not tied to

00:19:06,180 --> 00:19:11,010
a fedora release they usually map to

00:19:07,830 --> 00:19:13,290
something upstream arbitrary branches

00:19:11,010 --> 00:19:15,330
are really made to enable modularity and

00:19:13,290 --> 00:19:19,290
add that flexibility that modularity

00:19:15,330 --> 00:19:22,800
promises power over disk is the new

00:19:19,290 --> 00:19:24,540
interface to disk it and package the

00:19:22,800 --> 00:19:30,210
packaging requests are now done through

00:19:24,540 --> 00:19:32,690
Federico rack instead of packaging any

00:19:30,210 --> 00:19:32,690
questions

00:19:39,730 --> 00:19:48,250
we talked about it and we didn't come up

00:19:41,860 --> 00:19:50,140
with one I guess yeah exactly we we

00:19:48,250 --> 00:19:52,510
actually spent like quite a few hours

00:19:50,140 --> 00:19:55,060
around the time of dev comp just

00:19:52,510 --> 00:19:57,450
discussing that and we couldn't find

00:19:55,060 --> 00:20:00,550
come up with a good policy

00:19:57,450 --> 00:20:03,880
so I guess try to make your names useful

00:20:00,550 --> 00:20:06,900
don't use profanity or copyrighted terms

00:20:03,880 --> 00:20:06,900
but yeah

00:20:10,330 --> 00:20:13,080
yes

00:20:15,490 --> 00:20:22,360
yeah it should not work and if it does

00:20:17,890 --> 00:20:25,890
it it's definitely a bug so any other

00:20:22,360 --> 00:20:25,890
questions yeah

00:20:35,919 --> 00:20:40,559
that's a good idea yeah we could talk

00:20:38,110 --> 00:20:40,559
about it

00:20:44,430 --> 00:20:47,960
that's a good idea yeah

00:20:52,160 --> 00:20:59,010
okay

00:20:54,690 --> 00:21:01,580
no it's very important yeah thank you

00:20:59,010 --> 00:21:01,580
yeah

00:21:40,680 --> 00:21:46,630
yep

00:21:42,830 --> 00:21:46,630
okay Mike

00:22:08,010 --> 00:22:12,700
yep

00:22:09,920 --> 00:22:12,700
Yeah right

00:22:44,470 --> 00:22:47,470
yeah

00:22:53,440 --> 00:22:58,780
yep yeah that's something we need to

00:22:56,590 --> 00:23:01,920
talk about about gating because we don't

00:22:58,780 --> 00:23:04,480
we don't want modules using like

00:23:01,920 --> 00:23:07,000
inactive branches

00:23:04,480 --> 00:23:08,590
you know components within them so we

00:23:07,000 --> 00:23:10,570
want to have like gating that makes sure

00:23:08,590 --> 00:23:12,670
that if you're a service level on your

00:23:10,570 --> 00:23:14,680
module is a certain date that all your

00:23:12,670 --> 00:23:17,950
components within the module actually

00:23:14,680 --> 00:23:19,180
meet that level yeah so there's a lot of

00:23:17,950 --> 00:23:20,920
things to consider about from the

00:23:19,180 --> 00:23:23,080
gaining perspective that'll have to be

00:23:20,920 --> 00:23:27,150
written into the module build service or

00:23:23,080 --> 00:23:27,150
some other service that yeah

00:23:34,490 --> 00:23:37,060
yep

00:23:48,160 --> 00:23:51,030
so we

00:23:55,500 --> 00:24:00,580
yeah so Ralph may know more about this

00:23:58,809 --> 00:24:02,320
but from what we've talked about is that

00:24:00,580 --> 00:24:05,620
we just wouldn't build any other new

00:24:02,320 --> 00:24:07,480
versions of it which is I think the

00:24:05,620 --> 00:24:10,110
right answer there but there could be

00:24:07,480 --> 00:24:10,110
discussions

00:25:27,960 --> 00:25:30,590
right

00:25:43,470 --> 00:25:47,700
yep

00:25:45,990 --> 00:25:49,650
but I guess in a way if you're building

00:25:47,700 --> 00:25:52,500
a module for a specific Fedora release

00:25:49,650 --> 00:26:00,290
the AOL is capped at the AOL of that

00:25:52,500 --> 00:26:00,290
Fedora release yep

00:26:02,980 --> 00:26:05,549
yes

00:26:07,410 --> 00:26:21,220
[Laughter]

00:26:10,870 --> 00:26:24,100
I did not bribe him yeah yeah we yeah we

00:26:21,220 --> 00:26:26,140
do apologize or I apologize for that it

00:26:24,100 --> 00:26:29,530
definitely did not go as smoothly as we

00:26:26,140 --> 00:26:31,240
had hoped I feel like we've kind of

00:26:29,530 --> 00:26:33,130
overcame most of the bumps along the

00:26:31,240 --> 00:26:36,220
road but there's still more to come so

00:26:33,130 --> 00:26:40,200
please file issues and good issues we'll

00:26:36,220 --> 00:26:40,200
try to fix them as soon as we can

00:26:44,520 --> 00:26:49,690
yeah yep

00:26:47,060 --> 00:26:49,690
yes

00:26:49,779 --> 00:26:54,509
but the RPMs are only used in modules

00:26:59,860 --> 00:27:02,549
yes

00:30:41,360 --> 00:30:44,350
anything else

00:30:46,690 --> 00:30:51,670

YouTube URL: https://www.youtube.com/watch?v=bBspIzGRBjA


