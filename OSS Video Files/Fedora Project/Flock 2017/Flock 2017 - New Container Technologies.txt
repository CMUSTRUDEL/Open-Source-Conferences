Title: Flock 2017 - New Container Technologies
Publication date: 2017-10-20
Playlist: Flock 2017
Description: 
	Wednesday August 30, 2017 9:00am - 10:00am
@Grand II
Talk: New Container Technologies
Presenter: Dan Walsh

Description:
This talk will cover lots of new alternative container technologies to docker.
Will talk about
* System Containers
* Skopeo
* Buildah
* CRI-O
* containers/storage
* containers/image
Captions: 
	00:00:00,000 --> 00:00:04,170
on Linux Android they're all based on

00:00:02,340 --> 00:00:07,080
the Linux distribution right so that's

00:00:04,170 --> 00:00:09,389
just you know really what what this has

00:00:07,080 --> 00:00:11,010
allowed us is you know lots and lots of

00:00:09,389 --> 00:00:12,630
very lots of lots of people contributing

00:00:11,010 --> 00:00:15,120
lots and lots of people going off and

00:00:12,630 --> 00:00:19,550
doing what they want these distributions

00:00:15,120 --> 00:00:19,550
help make Red Hat Linux what it is today

00:00:21,660 --> 00:00:33,899
[Music]

00:00:28,429 --> 00:00:37,170
thanks I can get off the stage so now we

00:00:33,899 --> 00:00:39,420
look at containers all of a sudden we

00:00:37,170 --> 00:00:41,010
get into this container world and the

00:00:39,420 --> 00:00:43,050
container world has been dominated by

00:00:41,010 --> 00:00:46,590
one player or at least people think of

00:00:43,050 --> 00:00:49,410
it right people talk about it so how do

00:00:46,590 --> 00:00:53,430
I make docker containers into just

00:00:49,410 --> 00:00:54,840
containers everybody talks about docker

00:00:53,430 --> 00:00:55,980
all the time talking contains everything

00:00:54,840 --> 00:00:58,469
has to go through docker everything has

00:00:55,980 --> 00:01:01,170
to go through docker so we mean we need

00:00:58,469 --> 00:01:02,879
to make containers as generic as as PDF

00:01:01,170 --> 00:01:05,700
that's really what the goal of all this

00:01:02,879 --> 00:01:07,200
stuff is and containers need to be open

00:01:05,700 --> 00:01:10,409
that can't be controlled by a single

00:01:07,200 --> 00:01:12,600
company the really what I want to do is

00:01:10,409 --> 00:01:14,100
open up the whole idea or containers so

00:01:12,600 --> 00:01:15,600
that we can have innovation more

00:01:14,100 --> 00:01:20,939
innovation that's what's going on right

00:01:15,600 --> 00:01:24,049
now so what exactly is a container as I

00:01:20,939 --> 00:01:26,520
go through this talk we're gonna be

00:01:24,049 --> 00:01:28,200
talking about we've been asked not to

00:01:26,520 --> 00:01:29,850
use the word darker as much anymore so

00:01:28,200 --> 00:01:33,990
I'm gonna talked about it is the package

00:01:29,850 --> 00:01:37,140
formerly known as docker so we're gonna

00:01:33,990 --> 00:01:43,409
TP fkd which I can't say so I probably

00:01:37,140 --> 00:01:45,329
have to say Fulham on one of the big pet

00:01:43,409 --> 00:01:47,850
peeves I have about the entire darker

00:01:45,329 --> 00:01:50,899
outfit right now is everything has to go

00:01:47,850 --> 00:01:52,829
through a big fat container daemon

00:01:50,899 --> 00:01:54,600
everybody has to go to the Container

00:01:52,829 --> 00:01:56,340
daemon and ask for permission to do

00:01:54,600 --> 00:01:58,740
something if you want to innovate you

00:01:56,340 --> 00:02:01,170
have to get your tool your innovation

00:01:58,740 --> 00:02:02,909
into the container daemon so people have

00:02:01,170 --> 00:02:05,070
this understanding of containers as

00:02:02,909 --> 00:02:07,469
being I have set up this big huge fat

00:02:05,070 --> 00:02:09,149
daemon out there and I run tools that

00:02:07,469 --> 00:02:10,080
talk to a client-server operation to

00:02:09,149 --> 00:02:12,200
talk to the daemons

00:02:10,080 --> 00:02:13,880
well containers are fire

00:02:12,200 --> 00:02:15,380
more into the Linux operating system

00:02:13,880 --> 00:02:18,440
than going through this cut big fat

00:02:15,380 --> 00:02:21,260
demon what a container is is basically a

00:02:18,440 --> 00:02:23,870
single process running on a system that

00:02:21,260 --> 00:02:25,400
has certain kernel configuration set on

00:02:23,870 --> 00:02:27,890
it all right so when I talk about

00:02:25,400 --> 00:02:29,870
containers we talk about containers as

00:02:27,890 --> 00:02:31,340
being something that has resource

00:02:29,870 --> 00:02:32,720
constraints so they have certain C

00:02:31,340 --> 00:02:34,430
groups associated with them it's a

00:02:32,720 --> 00:02:36,470
process with certain C groups like set

00:02:34,430 --> 00:02:39,080
on secondly a container has some

00:02:36,470 --> 00:02:40,640
security constraints okay usually as

00:02:39,080 --> 00:02:42,319
some kind of isolation things like an a

00:02:40,640 --> 00:02:43,970
different SELinux label might be

00:02:42,319 --> 00:02:48,830
considered a container but dropped

00:02:43,970 --> 00:02:51,590
capabilities Linux capabilities or set

00:02:48,830 --> 00:02:53,600
copper it drops this calls and then the

00:02:51,590 --> 00:02:56,989
third part of a container is namespaces

00:02:53,600 --> 00:02:58,730
so namespaces is basically you go into

00:02:56,989 --> 00:03:01,130
your namespace you view the system

00:02:58,730 --> 00:03:02,870
differently you view process tables

00:03:01,130 --> 00:03:04,700
things like that you might have

00:03:02,870 --> 00:03:06,200
different mount points inside your

00:03:04,700 --> 00:03:07,570
container than other containers but it's

00:03:06,200 --> 00:03:10,250
basically a process that has these

00:03:07,570 --> 00:03:12,370
namespaces associated with it if you

00:03:10,250 --> 00:03:15,459
pulled up a fedora system right now

00:03:12,370 --> 00:03:18,290
booted it up and looked at pid' one

00:03:15,459 --> 00:03:22,610
system D and looked at it guess what

00:03:18,290 --> 00:03:25,010
you'd see system DS in a namespace right

00:03:22,610 --> 00:03:26,390
system D has amount to go to proc if you

00:03:25,010 --> 00:03:29,750
go on your systems right now go to see

00:03:26,390 --> 00:03:32,390
these /proc one and s and you will see a

00:03:29,750 --> 00:03:34,100
whole list of namespaces if you looked

00:03:32,390 --> 00:03:38,239
at at C group C to go to a proxies

00:03:34,100 --> 00:03:39,739
Caprock south proc will 1c group you

00:03:38,239 --> 00:03:42,680
will see that system DS running in a C

00:03:39,739 --> 00:03:45,170
group if you look at it it's owned by

00:03:42,680 --> 00:03:47,480
root so that's security constraints

00:03:45,170 --> 00:03:49,579
right it has capabilities we look it has

00:03:47,480 --> 00:03:52,730
capabilities associate it has an selinux

00:03:49,579 --> 00:03:55,790
label it sanity so if you boot up a

00:03:52,730 --> 00:03:59,510
fedora system right now everything is in

00:03:55,790 --> 00:04:01,070
a container right by the definition of a

00:03:59,510 --> 00:04:03,890
container is just these constraints

00:04:01,070 --> 00:04:06,019
around it so only two tools like darker

00:04:03,890 --> 00:04:08,030
and other dean other tools are basically

00:04:06,019 --> 00:04:09,560
just about configuring the kernel and

00:04:08,030 --> 00:04:12,140
then launching a process with that

00:04:09,560 --> 00:04:13,489
configuration so as we go forward and

00:04:12,140 --> 00:04:16,209
one of the interesting things I get

00:04:13,489 --> 00:04:19,190
asked a lot about containers is can I do

00:04:16,209 --> 00:04:21,590
about applications can I do this in the

00:04:19,190 --> 00:04:23,930
container and all I say is if you can do

00:04:21,590 --> 00:04:25,770
it on Linux that you can do it in a

00:04:23,930 --> 00:04:28,710
container because by definition every

00:04:25,770 --> 00:04:30,810
thing in Linux is in a container that's

00:04:28,710 --> 00:04:32,870
style time now the container might have

00:04:30,810 --> 00:04:35,430
to be running in the host container

00:04:32,870 --> 00:04:36,900
environment it might be fully privileged

00:04:35,430 --> 00:04:38,039
to stuff like that but yes you can do it

00:04:36,900 --> 00:04:39,300
in a container you can load kernel

00:04:38,039 --> 00:04:44,909
modules in container you can do anything

00:04:39,300 --> 00:04:46,590
they just processes on a Linux system so

00:04:44,909 --> 00:04:49,289
let's look at OpenShift kubernetes so

00:04:46,590 --> 00:04:51,030
OpenShift kubernetes is really way we

00:04:49,289 --> 00:04:52,379
want to do container orchestration right

00:04:51,030 --> 00:04:53,330
we want to do container orchestration

00:04:52,379 --> 00:04:54,659
but we really want to look at the

00:04:53,330 --> 00:04:57,330
requirements of

00:04:54,659 --> 00:04:59,280
openshift and kubernetes so what does

00:04:57,330 --> 00:05:03,000
openshift and qu Benes need to do to run

00:04:59,280 --> 00:05:04,860
a container well first of all we have to

00:05:03,000 --> 00:05:06,539
have a standard you know containers are

00:05:04,860 --> 00:05:08,250
not just those process things but they

00:05:06,539 --> 00:05:10,229
also come with some kind of user space

00:05:08,250 --> 00:05:12,240
associated with them right so when I

00:05:10,229 --> 00:05:14,639
download a container by download the

00:05:12,240 --> 00:05:17,039
Alpine container from docker IO that

00:05:14,639 --> 00:05:19,020
comes with some user space right so what

00:05:17,039 --> 00:05:24,360
we need those we need a standardized way

00:05:19,020 --> 00:05:26,460
of identifying that image so I need a

00:05:24,360 --> 00:05:28,110
standard contact images the next thing I

00:05:26,460 --> 00:05:29,639
need to do is have the ability to go out

00:05:28,110 --> 00:05:31,169
to a container registry a place that

00:05:29,639 --> 00:05:32,639
these things are stored and pull them

00:05:31,169 --> 00:05:34,590
down that has to be standardized

00:05:32,639 --> 00:05:36,509
somewhat standard at least you know the

00:05:34,590 --> 00:05:38,400
facto standardized that there's an easy

00:05:36,509 --> 00:05:40,169
way for me to go to container registries

00:05:38,400 --> 00:05:43,229
and pull down images and put them on in

00:05:40,169 --> 00:05:44,669
my box next I need to take that image I

00:05:43,229 --> 00:05:46,889
pulled down and I need to explode it

00:05:44,669 --> 00:05:49,259
onto disk usually on top of a

00:05:46,889 --> 00:05:51,990
copy-on-write filesystem that's the way

00:05:49,259 --> 00:05:55,319
people expect containers to work and

00:05:51,990 --> 00:05:57,029
then lastly I need to execute that

00:05:55,319 --> 00:05:58,650
container image I need to execute the

00:05:57,029 --> 00:06:00,930
the software inside of that so that's

00:05:58,650 --> 00:06:02,490
these are the steps that you have to do

00:06:00,930 --> 00:06:05,190
inside of a container I'm going to get a

00:06:02,490 --> 00:06:06,740
container up and running and then I need

00:06:05,190 --> 00:06:08,819
some kind of management API

00:06:06,740 --> 00:06:10,590
theoretically to be able to manage that

00:06:08,819 --> 00:06:12,779
environment you list what containers

00:06:10,590 --> 00:06:17,639
running things like that but that's

00:06:12,779 --> 00:06:19,469
optional I don't need that so we have a

00:06:17,639 --> 00:06:21,870
standardized container image format so a

00:06:19,469 --> 00:06:24,389
couple of years ago go see I started

00:06:21,870 --> 00:06:26,039
open container initiative and open

00:06:24,389 --> 00:06:28,289
container initiative really went often

00:06:26,039 --> 00:06:30,029
try to standardize two things of the

00:06:28,289 --> 00:06:31,229
container environment the first one

00:06:30,029 --> 00:06:34,229
we're going to talk about here which is

00:06:31,229 --> 00:06:35,849
the open open container image format so

00:06:34,229 --> 00:06:37,710
this is basically the things that store

00:06:35,849 --> 00:06:38,800
container registries these are the image

00:06:37,710 --> 00:06:40,750
blobs that we're going to store

00:06:38,800 --> 00:06:42,940
container registries really all they are

00:06:40,750 --> 00:06:45,190
is a table all in JSON while they're at

00:06:42,940 --> 00:06:47,229
a ball of tar balls and JSON files

00:06:45,190 --> 00:06:51,069
that's what a container image actually

00:06:47,229 --> 00:06:52,270
looks like and mostly what the

00:06:51,069 --> 00:06:55,120
standardization of the format was

00:06:52,270 --> 00:06:57,610
basically specifying what they image you

00:06:55,120 --> 00:06:59,740
know what the tyre ball of tar balls is

00:06:57,610 --> 00:07:01,569
and what the JSON the format of the JSON

00:06:59,740 --> 00:07:04,720
had to be so this has actually been

00:07:01,569 --> 00:07:05,979
standardized now OCI image format allows

00:07:04,720 --> 00:07:09,009
you to store images of container

00:07:05,979 --> 00:07:11,080
registries and in my opinion this is the

00:07:09,009 --> 00:07:14,770
most important thing in containers this

00:07:11,080 --> 00:07:16,870
is our PM Debian alright this had to be

00:07:14,770 --> 00:07:18,789
standardized if all of a sudden people

00:07:16,870 --> 00:07:21,729
started to create different container

00:07:18,789 --> 00:07:23,680
images we'd end up with you know you

00:07:21,729 --> 00:07:25,690
people basically having to build

00:07:23,680 --> 00:07:27,880
applications for different architectures

00:07:25,690 --> 00:07:29,770
so the real problem linux over the last

00:07:27,880 --> 00:07:31,990
12 was one of the big problems of linux

00:07:29,770 --> 00:07:34,180
over the last thirty years is that rpm

00:07:31,990 --> 00:07:37,030
and Debian never got together yeah

00:07:34,180 --> 00:07:38,909
Debian format in the RPM format so

00:07:37,030 --> 00:07:41,409
anybody wanted to build applications for

00:07:38,909 --> 00:07:43,090
Linux had to build to two different

00:07:41,409 --> 00:07:45,009
formats so we didn't want that to happen

00:07:43,090 --> 00:07:46,960
in containers and this has actually

00:07:45,009 --> 00:07:49,539
prevented that hopefully is prevented

00:07:46,960 --> 00:07:51,069
that from happening so the next thing we

00:07:49,539 --> 00:07:54,880
want to do is we want to pull and push

00:07:51,069 --> 00:07:56,409
images from container registries so how

00:07:54,880 --> 00:07:58,659
do I get an image from a container

00:07:56,409 --> 00:08:00,219
registry well I'll give you a little

00:07:58,659 --> 00:08:02,680
history this is the first new tool we're

00:08:00,219 --> 00:08:05,889
going to be talking about several years

00:08:02,680 --> 00:08:07,990
ago we go anybody's played with docker

00:08:05,889 --> 00:08:09,430
you've done docker inspect right so

00:08:07,990 --> 00:08:11,469
docker inspect basically looks at the

00:08:09,430 --> 00:08:13,569
JSON file it's associated with container

00:08:11,469 --> 00:08:16,029
image or with it with the container

00:08:13,569 --> 00:08:18,340
itself and you can look at that JSON and

00:08:16,029 --> 00:08:20,800
well we add it to the JSON is basically

00:08:18,340 --> 00:08:22,960
some things like labels so if I go and

00:08:20,800 --> 00:08:24,940
inspect a container image it'll come up

00:08:22,960 --> 00:08:27,340
and say oh this is the Apache container

00:08:24,940 --> 00:08:29,289
image from fedora so there's these nice

00:08:27,340 --> 00:08:31,210
label things but the problem with that

00:08:29,289 --> 00:08:33,339
is we actually want it to be able to go

00:08:31,210 --> 00:08:35,079
out to a registry and look at the JSON

00:08:33,339 --> 00:08:37,630
file associated with images at the

00:08:35,079 --> 00:08:39,310
registry before we pulled it down so we

00:08:37,630 --> 00:08:41,800
actually opened up a pull request to

00:08:39,310 --> 00:08:43,539
darker called docker inspect - - remote

00:08:41,800 --> 00:08:45,490
so we wanted to do is go out to the

00:08:43,539 --> 00:08:48,010
remote registry god the JSON and pull it

00:08:45,490 --> 00:08:49,449
down otherwise the only way to look at a

00:08:48,010 --> 00:08:50,949
container image was actually to pull the

00:08:49,449 --> 00:08:51,580
container image to your local machine

00:08:50,949 --> 00:08:53,770
and then

00:08:51,580 --> 00:08:54,910
dr. inspect so that it was a huge

00:08:53,770 --> 00:08:57,130
problem because you'd be pulling down

00:08:54,910 --> 00:08:58,210
potentially gigabytes of data just to be

00:08:57,130 --> 00:08:59,650
able to look at it and say oh no that's

00:08:58,210 --> 00:09:02,290
not what I wanted now you have to throw

00:08:59,650 --> 00:09:05,710
it away so we wanted that and dr.

00:09:02,290 --> 00:09:07,180
basically said no they said you should

00:09:05,710 --> 00:09:08,740
just implement that tool yourself don't

00:09:07,180 --> 00:09:10,860
do it through that so we implemented a

00:09:08,740 --> 00:09:13,120
tool called scope EO Schofield means

00:09:10,860 --> 00:09:15,100
Greek tool it's Greek for remote viewing

00:09:13,120 --> 00:09:17,740
so the original idea was that we'd be

00:09:15,100 --> 00:09:23,290
able to review the JSON associated with

00:09:17,740 --> 00:09:24,580
an image over time so after we built

00:09:23,290 --> 00:09:26,830
scope II originally just to look at the

00:09:24,580 --> 00:09:28,600
remote image we said well we sort of

00:09:26,830 --> 00:09:31,390
have implemented a lot of the doc a

00:09:28,600 --> 00:09:33,610
protocol to look at the image and talk

00:09:31,390 --> 00:09:35,500
to a registry why don't we just add and

00:09:33,610 --> 00:09:38,200
pulling the pushing so we added pulling

00:09:35,500 --> 00:09:40,570
and pushing of images from this registry

00:09:38,200 --> 00:09:42,610
and then we started working with core OS

00:09:40,570 --> 00:09:44,230
and core OS said well they don't really

00:09:42,610 --> 00:09:46,150
want to use scope EO but they really

00:09:44,230 --> 00:09:48,580
like to use a go library to be able to

00:09:46,150 --> 00:09:50,020
move images back and forth between you

00:09:48,580 --> 00:09:52,000
know their environments so they were

00:09:50,020 --> 00:09:53,920
looking at to use rocket so they wanted

00:09:52,000 --> 00:09:54,820
to use rocket to go to a registry and

00:09:53,920 --> 00:09:56,770
pull it down but they don't want to

00:09:54,820 --> 00:09:58,510
exact scope EO so to say why don't you

00:09:56,770 --> 00:10:01,240
break it out into a into a let's go

00:09:58,510 --> 00:10:03,490
library so we created a github

00:10:01,240 --> 00:10:07,660
containers image so github containers

00:10:03,490 --> 00:10:09,880
image now contains all the libraries and

00:10:07,660 --> 00:10:11,530
tooling to be able to move images back

00:10:09,880 --> 00:10:13,780
and forth between container registries

00:10:11,530 --> 00:10:17,230
scope yo then wrap side up so you can

00:10:13,780 --> 00:10:19,060
you scope it was a CLI tool to do it but

00:10:17,230 --> 00:10:20,230
we didn't stop it just so so

00:10:19,060 --> 00:10:22,750
traditionally the only way to move

00:10:20,230 --> 00:10:24,340
container images back and forth was you

00:10:22,750 --> 00:10:26,110
having a container registry you

00:10:24,340 --> 00:10:28,750
downloaded to docker diamond our cadena

00:10:26,110 --> 00:10:30,730
would store locally we started enhancing

00:10:28,750 --> 00:10:32,290
scope yo we ant containers image to be

00:10:30,730 --> 00:10:33,580
able to move images around so we can

00:10:32,290 --> 00:10:35,490
actually move images between two

00:10:33,580 --> 00:10:37,930
registries we can actually move it

00:10:35,490 --> 00:10:39,280
between dark to docker demons so we can

00:10:37,930 --> 00:10:40,570
actually pull it out of darker demon

00:10:39,280 --> 00:10:42,460
we're gonna be talking about some

00:10:40,570 --> 00:10:45,100
container storage in a minute so we can

00:10:42,460 --> 00:10:46,870
actually move images out to local files

00:10:45,100 --> 00:10:48,280
we can move them to OC I've been image

00:10:46,870 --> 00:10:50,110
bundles we can move them all different

00:10:48,280 --> 00:10:53,950
ways with scope yo it's all because of

00:10:50,110 --> 00:10:55,720
containers image contains image also is

00:10:53,950 --> 00:10:57,730
totally being used now we're getting

00:10:55,720 --> 00:11:00,370
contributions from all different vendors

00:10:57,730 --> 00:11:02,290
that don't necessarily use darker so

00:11:00,370 --> 00:11:04,090
pivotal for instances it's heavily

00:11:02,290 --> 00:11:04,300
contributing to containers image because

00:11:04,090 --> 00:11:06,220
they

00:11:04,300 --> 00:11:10,030
to use it for interacting with their

00:11:06,220 --> 00:11:11,530
their software the next thing after we

00:11:10,030 --> 00:11:14,290
pull the images we've talked about we

00:11:11,530 --> 00:11:15,820
had to explode at the disk so we need to

00:11:14,290 --> 00:11:17,940
pull the image down and we needed to

00:11:15,820 --> 00:11:21,430
explode its disk and on Todd sometimes

00:11:17,940 --> 00:11:23,200
copy-on-write filesystem and this is

00:11:21,430 --> 00:11:27,300
really where the big fat demons becomes

00:11:23,200 --> 00:11:29,200
a problem so traditionally we read hat

00:11:27,300 --> 00:11:31,120
over the time I've been working on

00:11:29,200 --> 00:11:34,360
darker we contributed lots and lots of

00:11:31,120 --> 00:11:36,700
code into coffee and write file systems

00:11:34,360 --> 00:11:40,120
originally because the original dark are

00:11:36,700 --> 00:11:41,920
only supported au FS and au FS only

00:11:40,120 --> 00:11:43,630
worked on UNIX never got accepted in the

00:11:41,920 --> 00:11:46,210
upstream kernel so wouldn't work on RAL

00:11:43,630 --> 00:11:48,970
wouldn't work on fedora so we actually

00:11:46,210 --> 00:11:51,460
contributed the butter butter FS driver

00:11:48,970 --> 00:11:54,040
we contributed the device mapper driver

00:11:51,460 --> 00:11:56,650
and we contributed the original version

00:11:54,040 --> 00:11:58,600
of overlay which has been an answer so

00:11:56,650 --> 00:12:00,250
there was so basically all the drivers

00:11:58,600 --> 00:12:02,770
stuff a lot of that code came out of Red

00:12:00,250 --> 00:12:04,900
Hat when we continued to support it yeah

00:12:02,770 --> 00:12:06,460
in the upstream but we basically took

00:12:04,900 --> 00:12:08,950
all that code and we moved it out and

00:12:06,460 --> 00:12:10,540
said really what we wanted to do is well

00:12:08,950 --> 00:12:13,450
let me talk about a little bit further

00:12:10,540 --> 00:12:16,600
so where do I spokes explode my image

00:12:13,450 --> 00:12:18,760
onto disk going back a couple of years

00:12:16,600 --> 00:12:20,440
ago we added this command to atomic

00:12:18,760 --> 00:12:22,480
mounts did anybody ever play with atomic

00:12:20,440 --> 00:12:24,820
mount okay you can actually take

00:12:22,480 --> 00:12:26,560
container images and mount them on to

00:12:24,820 --> 00:12:28,150
the file system so then you can go to

00:12:26,560 --> 00:12:29,590
the mount directory and actually look at

00:12:28,150 --> 00:12:31,270
the contents of an image you don't have

00:12:29,590 --> 00:12:33,370
to run a container on it but you can

00:12:31,270 --> 00:12:35,740
take stuff right out of docker and mount

00:12:33,370 --> 00:12:38,200
it up the problem with the Tomic mount

00:12:35,740 --> 00:12:39,820
is it was racy because the darker daemon

00:12:38,200 --> 00:12:42,370
doesn't know that you're mounting this

00:12:39,820 --> 00:12:45,940
stuff underneath the covers from it okay

00:12:42,370 --> 00:12:49,090
darker does all of its locking in inside

00:12:45,940 --> 00:12:50,800
of its process space so if another tool

00:12:49,090 --> 00:12:52,780
comes in and tries to muck around with

00:12:50,800 --> 00:12:55,060
something docking it can potentially get

00:12:52,780 --> 00:12:57,880
confused if you ran this command and

00:12:55,060 --> 00:12:58,960
then go went in there and did a darker

00:12:57,880 --> 00:13:01,570
RM I

00:12:58,960 --> 00:13:04,210
fedora darker is gonna get an error and

00:13:01,570 --> 00:13:07,390
not understand what happened okay so

00:13:04,210 --> 00:13:08,980
it's kind of kind of a racy situation so

00:13:07,390 --> 00:13:11,020
what we want to do is allow other tools

00:13:08,980 --> 00:13:13,120
to use storage of the simultaneously

00:13:11,020 --> 00:13:16,090
with the container runtime daemons so we

00:13:13,120 --> 00:13:17,800
wanted to take that tooling out and move

00:13:16,090 --> 00:13:18,160
it down to disk so we wanted to take the

00:13:17,800 --> 00:13:20,470
lock

00:13:18,160 --> 00:13:24,459
out of the demon and put it on to file

00:13:20,470 --> 00:13:26,350
locks to allow other tools beside it and

00:13:24,459 --> 00:13:28,660
originally the package formerly known as

00:13:26,350 --> 00:13:30,759
darker graph driver code was pulled out

00:13:28,660 --> 00:13:32,790
and put into a separate library in that

00:13:30,759 --> 00:13:37,120
library is now called container storage

00:13:32,790 --> 00:13:39,189
we've continued to enhance container

00:13:37,120 --> 00:13:42,279
storage add new features I think I'll be

00:13:39,189 --> 00:13:44,079
talking about that later so the next

00:13:42,279 --> 00:13:45,339
thing you do so now I've gone to a

00:13:44,079 --> 00:13:47,860
container registry pulled down the

00:13:45,339 --> 00:13:50,199
standard format using containers image

00:13:47,860 --> 00:13:51,939
exploded onto disk using container

00:13:50,199 --> 00:13:54,579
storage now I need to execute the

00:13:51,939 --> 00:13:57,750
container well the good thing is OCR the

00:13:54,579 --> 00:14:02,800
second part of OC I was was identifying

00:13:57,750 --> 00:14:04,660
the runtime specification so again what

00:14:02,800 --> 00:14:06,550
they've specified is basically describe

00:14:04,660 --> 00:14:09,009
what a root efest looks like and then

00:14:06,550 --> 00:14:11,379
they subscribed a JSON data that you can

00:14:09,009 --> 00:14:14,019
put on disk and any tool that can

00:14:11,379 --> 00:14:15,790
implement containers can now read that

00:14:14,019 --> 00:14:17,709
JSON file and figure out what the user

00:14:15,790 --> 00:14:19,389
expected to happen and then run a

00:14:17,709 --> 00:14:22,630
container on it so that's what the OCI

00:14:19,389 --> 00:14:24,730
specification is and Runcie was the

00:14:22,630 --> 00:14:28,120
default implementation of the runtimes

00:14:24,730 --> 00:14:30,189
back for Linux containers as of the

00:14:28,120 --> 00:14:33,459
package formerly known as darka 1.11

00:14:30,189 --> 00:14:34,779
docker actually uses Runcie so all the

00:14:33,459 --> 00:14:36,250
tooling going to be talking about going

00:14:34,779 --> 00:14:38,439
forward is using the exact same

00:14:36,250 --> 00:14:39,939
container runtime to configure the Linux

00:14:38,439 --> 00:14:44,019
kernel to run these processes on a

00:14:39,939 --> 00:14:46,089
system but because it's now a

00:14:44,019 --> 00:14:48,339
specification of the tools other

00:14:46,089 --> 00:14:50,139
container runtimes and people want to

00:14:48,339 --> 00:14:53,380
run containers in different ways have

00:14:50,139 --> 00:14:54,939
come along so you see run V in clear

00:14:53,380 --> 00:14:57,970
containers which are basically both

00:14:54,939 --> 00:15:00,370
tools for running containers inside of

00:14:57,970 --> 00:15:03,880
virtual machines inside of KBM have come

00:15:00,370 --> 00:15:05,709
along okay so you can actually run

00:15:03,880 --> 00:15:07,750
different type of container runtimes and

00:15:05,709 --> 00:15:09,309
I believe Microsoft also has the way

00:15:07,750 --> 00:15:11,410
that they run containers on this system

00:15:09,309 --> 00:15:15,220
is using OCIO specification for running

00:15:11,410 --> 00:15:17,680
as well this gives us alternatives to a

00:15:15,220 --> 00:15:20,170
Toby reader so now we can run containers

00:15:17,680 --> 00:15:22,059
using different types of runtimes you

00:15:20,170 --> 00:15:23,949
basically get the same effect but we can

00:15:22,059 --> 00:15:26,410
start to you know look look at and run

00:15:23,949 --> 00:15:28,449
these containers in different ways so

00:15:26,410 --> 00:15:30,309
now that we have these tools so again we

00:15:28,449 --> 00:15:31,600
took the big fat container daemon we

00:15:30,309 --> 00:15:33,579
broke out the cork

00:15:31,600 --> 00:15:35,920
moments of it onto something the

00:15:33,579 --> 00:15:38,680
libraries that can be used and innovated

00:15:35,920 --> 00:15:41,889
at different rates so that what my team

00:15:38,680 --> 00:15:44,050
has been working on over the last year

00:15:41,889 --> 00:15:46,029
or so is basically how do we innovate on

00:15:44,050 --> 00:15:49,750
top of those I'm getting a decent amount

00:15:46,029 --> 00:15:51,069
of contribution from the upstream one of

00:15:49,750 --> 00:15:53,920
the things we wanted to do is simplify

00:15:51,069 --> 00:15:57,490
signing so image signing and we've been

00:15:53,920 --> 00:15:59,019
working very heavily on allowing PGP and

00:15:57,490 --> 00:16:00,490
with a thing we call simple simple

00:15:59,019 --> 00:16:01,839
signing we wanted to have something much

00:16:00,490 --> 00:16:03,910
simpler than docking notary

00:16:01,839 --> 00:16:06,250
we felt the dark a notary was very

00:16:03,910 --> 00:16:08,350
difficult to do and also tied people to

00:16:06,250 --> 00:16:10,240
a specific registry we don't believe

00:16:08,350 --> 00:16:13,060
that there should be any tight tying of

00:16:10,240 --> 00:16:15,130
container registry you know innovation

00:16:13,060 --> 00:16:16,329
in containers a huge innovation has been

00:16:15,130 --> 00:16:18,370
happening at the container registry

00:16:16,329 --> 00:16:19,930
right everybody has a registry we have

00:16:18,370 --> 00:16:22,810
the atomic registry or the open shift

00:16:19,930 --> 00:16:24,880
registry is darker I oh this coral West

00:16:22,810 --> 00:16:27,250
has their version of registry google has

00:16:24,880 --> 00:16:29,740
their version of registry Amazon Cloud

00:16:27,250 --> 00:16:31,209
has their version registry you know so

00:16:29,740 --> 00:16:34,930
there's lots and lots of red most of our

00:16:31,209 --> 00:16:37,089
customers are all using out of factory

00:16:34,930 --> 00:16:38,589
ok which is another registry so there's

00:16:37,089 --> 00:16:40,360
lots and lots of these registries but

00:16:38,589 --> 00:16:43,149
some like dark and notaries about all

00:16:40,360 --> 00:16:45,279
about tying you do specific registry but

00:16:43,149 --> 00:16:47,019
all people wanted was signing alright

00:16:45,279 --> 00:16:50,230
and we've been signing images called

00:16:47,019 --> 00:16:51,970
rpms for 20 years so we wanted to

00:16:50,230 --> 00:16:54,069
basically make the experience of signing

00:16:51,970 --> 00:16:55,899
images as simple as the experiences of

00:16:54,069 --> 00:16:58,509
signing rpms and that's what simple

00:16:55,899 --> 00:17:00,040
signing was all about so multiple what

00:16:58,509 --> 00:17:01,420
we want to do is allow multiple people

00:17:00,040 --> 00:17:03,310
to sign images at the same time

00:17:01,420 --> 00:17:04,900
signatures can be stored in an open ship

00:17:03,310 --> 00:17:07,270
registry and signatures are totally

00:17:04,900 --> 00:17:08,740
separate from the registries right so

00:17:07,270 --> 00:17:10,270
you can put your said just signatures

00:17:08,740 --> 00:17:11,679
anywhere you want you can put your

00:17:10,270 --> 00:17:14,140
container registry said anywhere you

00:17:11,679 --> 00:17:16,059
want when you download your registry

00:17:14,140 --> 00:17:18,309
when you download a container image

00:17:16,059 --> 00:17:20,439
it'll go out to a registry store or a

00:17:18,309 --> 00:17:22,419
signature store download it compare the

00:17:20,439 --> 00:17:23,770
two things if they match it's a signed

00:17:22,419 --> 00:17:25,870
image if they don't match they're not

00:17:23,770 --> 00:17:28,299
and you set up the policy you say I

00:17:25,870 --> 00:17:30,490
trust Dan Walsh if he signed this image

00:17:28,299 --> 00:17:31,570
I trusted that images secure and you're

00:17:30,490 --> 00:17:33,510
in charge of it right it's totally

00:17:31,570 --> 00:17:35,530
isolated from it so that's been put into

00:17:33,510 --> 00:17:37,570
signatures being stored on any web

00:17:35,530 --> 00:17:40,059
server allow you to sign any content to

00:17:37,570 --> 00:17:42,250
docker I'll build policy rules engine

00:17:40,059 --> 00:17:44,530
and control which imaging registries you

00:17:42,250 --> 00:17:46,750
trusted so we have all this tooling

00:17:44,530 --> 00:17:50,920
tinta right now it's built into the

00:17:46,750 --> 00:17:52,600
atomic tooling it's built into oh it's

00:17:50,920 --> 00:17:55,210
me being built into OpenShift

00:17:52,600 --> 00:17:56,440
it's also going into other people are

00:17:55,210 --> 00:17:59,290
looking at it right now we're working

00:17:56,440 --> 00:18:01,750
potentially with third parties major

00:17:59,290 --> 00:18:03,970
cloud vendors of looking at this rather

00:18:01,750 --> 00:18:05,770
than tying people to notary so again

00:18:03,970 --> 00:18:07,690
it's innovation but its innovations

00:18:05,770 --> 00:18:09,370
inside of the pulling and pushing of

00:18:07,690 --> 00:18:11,770
images right it's not innovation and the

00:18:09,370 --> 00:18:15,730
big fat demons so we can actually do the

00:18:11,770 --> 00:18:16,930
innovation at the low level there's a

00:18:15,730 --> 00:18:18,220
couple of videos when you get the

00:18:16,930 --> 00:18:21,010
presentation you can watch the video on

00:18:18,220 --> 00:18:22,540
signing so another interesting thing

00:18:21,010 --> 00:18:24,550
that we've been innovating on is the

00:18:22,540 --> 00:18:27,490
thing called system containers system

00:18:24,550 --> 00:18:29,740
containers it's kind of a horrible name

00:18:27,490 --> 00:18:31,120
because it means everybody sees system

00:18:29,740 --> 00:18:32,770
containers and they think of different

00:18:31,120 --> 00:18:34,660
things what I think of a system

00:18:32,770 --> 00:18:36,640
container is alright when I think of

00:18:34,660 --> 00:18:39,310
containers that thinking about a way of

00:18:36,640 --> 00:18:41,320
packaging software right those

00:18:39,310 --> 00:18:42,670
containers are aware packaging software

00:18:41,320 --> 00:18:44,380
and then I pull it down I run it so I

00:18:42,670 --> 00:18:46,060
want to get my software from a container

00:18:44,380 --> 00:18:48,400
registry and I want to install on the

00:18:46,060 --> 00:18:50,800
machine if I want to pull down that

00:18:48,400 --> 00:18:52,870
container image to my machine and I want

00:18:50,800 --> 00:18:54,250
to run it but I don't want to go through

00:18:52,870 --> 00:18:57,790
a big fat container daemon

00:18:54,250 --> 00:18:59,290
I use the system image okay so a system

00:18:57,790 --> 00:19:01,360
image is just a way of pulling the

00:18:59,290 --> 00:19:03,010
container software from a remote

00:19:01,360 --> 00:19:06,670
repository installing it on my machine

00:19:03,010 --> 00:19:08,200
and then running it one of the ways I

00:19:06,670 --> 00:19:11,230
want to run it I probably want to run it

00:19:08,200 --> 00:19:12,880
at boot time so let's look at it so on

00:19:11,230 --> 00:19:16,870
atomic Coast so far as shocked as

00:19:12,880 --> 00:19:18,490
shipped is the containers image we have

00:19:16,870 --> 00:19:20,020
a use case with kubernetes required

00:19:18,490 --> 00:19:21,670
that's he need to be running in flannel

00:19:20,020 --> 00:19:25,090
d so there's two services that are

00:19:21,670 --> 00:19:26,950
required to be running at CD and flannel

00:19:25,090 --> 00:19:29,140
D needed to stop before your big fat

00:19:26,950 --> 00:19:30,250
container daemon before the package

00:19:29,140 --> 00:19:32,320
formerly known as docker

00:19:30,250 --> 00:19:35,320
so we needed a way to download software

00:19:32,320 --> 00:19:37,090
installing on a machine inside of a

00:19:35,320 --> 00:19:39,460
container image and then have it running

00:19:37,090 --> 00:19:42,760
before the container runtime comes up

00:19:39,460 --> 00:19:44,500
and starts running these containers can

00:19:42,760 --> 00:19:45,910
be run with read-only images right so I

00:19:44,500 --> 00:19:47,260
can download it well I'm not expecting

00:19:45,910 --> 00:19:48,430
these tools to be out there mucking

00:19:47,260 --> 00:19:49,780
around with images they're not doing

00:19:48,430 --> 00:19:51,820
builds right they're just going to

00:19:49,780 --> 00:19:56,230
download an image run it and watch it on

00:19:51,820 --> 00:19:59,370
M system and then even if you wanted to

00:19:56,230 --> 00:20:03,310
over docker

00:19:59,370 --> 00:20:04,870
has no way of specifying priority and

00:20:03,310 --> 00:20:08,650
the the different efforts to the

00:20:04,870 --> 00:20:09,520
specifying priority always it gonna you

00:20:08,650 --> 00:20:11,080
know they're always gonna feel and

00:20:09,520 --> 00:20:14,080
they're probably gonna eventually you

00:20:11,080 --> 00:20:16,990
know evolved something like indeed

00:20:14,080 --> 00:20:20,650
control the system five Nick control

00:20:16,990 --> 00:20:22,680
ways that's that priority numbers but

00:20:20,650 --> 00:20:25,240
there's a really good tool on Linux for

00:20:22,680 --> 00:20:28,990
watching services on the system it's

00:20:25,240 --> 00:20:30,610
called system D so system D doesn't have

00:20:28,990 --> 00:20:32,140
problems with the priority right you can

00:20:30,610 --> 00:20:34,060
set up all sorts of really complex

00:20:32,140 --> 00:20:36,790
priorities and different ways of booting

00:20:34,060 --> 00:20:38,830
your system using system D so what we

00:20:36,790 --> 00:20:40,690
wanted to do is take these container

00:20:38,830 --> 00:20:43,390
images off of the container registry

00:20:40,690 --> 00:20:45,040
download them and then use system D to

00:20:43,390 --> 00:20:48,940
basically set a priority for running

00:20:45,040 --> 00:20:51,460
them so system containers we have the

00:20:48,940 --> 00:20:53,170
atomic tool you know we can use we use

00:20:51,460 --> 00:20:55,450
the atomic tool for installing system

00:20:53,170 --> 00:20:57,700
images but all aralia the atomic tool is

00:20:55,450 --> 00:20:59,590
doing is wrapping up scope EO and a few

00:20:57,700 --> 00:21:01,630
other tools and creating a system to you

00:20:59,590 --> 00:21:03,580
know file for launching a container so

00:21:01,630 --> 00:21:05,890
you scope yo to pull them from the

00:21:03,580 --> 00:21:07,990
registry then we store the images on top

00:21:05,890 --> 00:21:09,730
of rollers tree os tree is really good

00:21:07,990 --> 00:21:12,370
for allowing us to have multiple images

00:21:09,730 --> 00:21:13,990
on the system and then not using up a

00:21:12,370 --> 00:21:15,780
hell of a disk space so we can actually

00:21:13,990 --> 00:21:18,460
use those tree for storing these and

00:21:15,780 --> 00:21:20,620
finally the atomic command creates a

00:21:18,460 --> 00:21:22,960
system to you know file and uses that

00:21:20,620 --> 00:21:25,450
uses run C run C is actually optional

00:21:22,960 --> 00:21:28,240
here I probably should change the slide

00:21:25,450 --> 00:21:31,120
you don't have to run a container

00:21:28,240 --> 00:21:34,270
runtime or contain a tool for launching

00:21:31,120 --> 00:21:35,650
system D system containers right a

00:21:34,270 --> 00:21:37,810
container is just a process on the

00:21:35,650 --> 00:21:39,970
system if you wanted to just download a

00:21:37,810 --> 00:21:42,490
container image to load a kernel module

00:21:39,970 --> 00:21:44,110
you download the image you have a tool

00:21:42,490 --> 00:21:51,850
that basically two routes into with the

00:21:44,110 --> 00:21:55,900
images and execute load command ya ends

00:21:51,850 --> 00:21:57,370
mod to load the kernel module you don't

00:21:55,900 --> 00:21:58,870
need a container runtime you don't need

00:21:57,370 --> 00:22:01,780
to be mucking around with containers to

00:21:58,870 --> 00:22:03,190
do that type of thing so all I really

00:22:01,780 --> 00:22:05,110
want to do is get that container image

00:22:03,190 --> 00:22:06,820
blob pull it down the system store it

00:22:05,110 --> 00:22:09,190
somewhere and then allow me to execute

00:22:06,820 --> 00:22:11,450
commands inside of it if I want to run

00:22:09,190 --> 00:22:13,459
containers I can use run C

00:22:11,450 --> 00:22:15,619
see you optionally we're use run seed

00:22:13,459 --> 00:22:18,349
around with containers but you can use

00:22:15,619 --> 00:22:19,820
to route I don't care it's up to you

00:22:18,349 --> 00:22:21,469
guys to determine the security and

00:22:19,820 --> 00:22:24,739
people that are packaging these tools

00:22:21,469 --> 00:22:26,719
can actually go out and package it so

00:22:24,739 --> 00:22:29,209
when i download and install this is the

00:22:26,719 --> 00:22:31,579
command to install the sed container on

00:22:29,209 --> 00:22:33,440
the system atomic install - - system sed

00:22:31,579 --> 00:22:35,869
goes out to a container registry grab

00:22:33,440 --> 00:22:37,429
that CD pulls it down set subsystem be

00:22:35,869 --> 00:22:39,529
you know file starts up the container

00:22:37,429 --> 00:22:42,320
it's up and running but why not install

00:22:39,529 --> 00:22:44,299
flannel same command system D makes your

00:22:42,320 --> 00:22:46,339
sed stops before flannel system do you

00:22:44,299 --> 00:22:48,709
make sure that both of those start

00:22:46,339 --> 00:22:50,629
before the container runtime so the

00:22:48,709 --> 00:22:52,729
package you can specify you know the

00:22:50,629 --> 00:22:55,639
basically the criteria for starting up

00:22:52,729 --> 00:22:57,499
the system containers even the package

00:22:55,639 --> 00:22:59,959
formerly known as docker is now being

00:22:57,499 --> 00:23:01,729
shipped inside of a system container

00:22:59,959 --> 00:23:04,669
there's nothing to say you can't ship a

00:23:01,729 --> 00:23:06,950
full big fat container demon inside of a

00:23:04,669 --> 00:23:10,279
container and that's really what what's

00:23:06,950 --> 00:23:11,709
going on here and you can actually you

00:23:10,279 --> 00:23:15,349
know install that

00:23:11,709 --> 00:23:16,639
so what standalone containers so I call

00:23:15,349 --> 00:23:17,779
them system containers and then we

00:23:16,639 --> 00:23:18,919
sometimes call them standalone

00:23:17,779 --> 00:23:20,479
containers so one of the things we're

00:23:18,919 --> 00:23:22,759
going to look forward to and I think

00:23:20,479 --> 00:23:26,239
this is starting to happen Fedora is

00:23:22,759 --> 00:23:28,999
packaging up regular software content

00:23:26,239 --> 00:23:31,909
you think about modules inside of

00:23:28,999 --> 00:23:33,320
containers so I wanted basically as we

00:23:31,909 --> 00:23:38,029
move forward you're gonna have a fedora

00:23:33,320 --> 00:23:41,419
say 26 Fedora 27 Fedora 28 and someone's

00:23:38,029 --> 00:23:45,799
gonna package up an application that has

00:23:41,419 --> 00:23:47,659
that runs inside of Apache okay do I

00:23:45,799 --> 00:23:49,429
need a big container runtime is all I'm

00:23:47,659 --> 00:23:52,129
gonna do is run that service listening

00:23:49,429 --> 00:23:54,200
on port 80 no so we want to be a

00:23:52,129 --> 00:23:56,389
basically allow people to stop packaging

00:23:54,200 --> 00:23:58,519
standardize software and run on the

00:23:56,389 --> 00:24:01,219
system I want to run Apache but instead

00:23:58,519 --> 00:24:02,899
of installing it as an IPM I want to

00:24:01,219 --> 00:24:05,379
install it as a container

00:24:02,899 --> 00:24:09,440
it'll listen to port a view on my hosts

00:24:05,379 --> 00:24:11,209
it will use vww on my hosts but that

00:24:09,440 --> 00:24:13,369
Apache could be I could be running a

00:24:11,209 --> 00:24:16,729
Fedora 28 system but I might be running

00:24:13,369 --> 00:24:19,340
Fedor 26 this version of Apache and I

00:24:16,729 --> 00:24:22,110
can continue to run that for up zero

00:24:19,340 --> 00:24:24,090
okay so we want to basically start to

00:24:22,110 --> 00:24:26,220
break a patch running of the host

00:24:24,090 --> 00:24:28,890
operating system from running individual

00:24:26,220 --> 00:24:30,540
applications on it and I don't need to

00:24:28,890 --> 00:24:34,830
run everything inside of an orchestrated

00:24:30,540 --> 00:24:36,450
container demons run its container

00:24:34,830 --> 00:24:38,429
standard ports volumes through packaged

00:24:36,450 --> 00:24:40,380
packages of the apps there's OCI images

00:24:38,429 --> 00:24:43,860
instead of by piano are in addition to a

00:24:40,380 --> 00:24:45,660
PM so things like maria DB PostgreSQL

00:24:43,860 --> 00:24:47,760
Apache think about it right we can start

00:24:45,660 --> 00:24:50,910
to actually think about packaging these

00:24:47,760 --> 00:24:55,620
things as container images instead of

00:24:50,910 --> 00:24:57,570
all you know just rpms and as we move

00:24:55,620 --> 00:24:59,370
forward with modularity this is the way

00:24:57,570 --> 00:25:01,290
you'll be able to have modularity and

00:24:59,370 --> 00:25:02,970
have multiple different applications

00:25:01,290 --> 00:25:06,169
running with different user spaces on

00:25:02,970 --> 00:25:06,169
the same machine at the same time

00:25:06,679 --> 00:25:10,740
without having to have some big

00:25:09,240 --> 00:25:13,770
container daemon managing the whole

00:25:10,740 --> 00:25:15,480
thing so let's look at improved storage

00:25:13,770 --> 00:25:16,980
I mentioned that earlier one of the

00:25:15,480 --> 00:25:18,510
things we want to do with the storage is

00:25:16,980 --> 00:25:20,970
we wanted to have things like read-only

00:25:18,510 --> 00:25:22,530
container images right now the way

00:25:20,970 --> 00:25:24,929
darker works it's not really good with

00:25:22,530 --> 00:25:27,240
read-only container images so we wanted

00:25:24,929 --> 00:25:28,860
to have the big thing about read-only

00:25:27,240 --> 00:25:31,890
container images it provides better

00:25:28,860 --> 00:25:33,960
security right now everything in the

00:25:31,890 --> 00:25:35,970
darker world is shipped with the

00:25:33,960 --> 00:25:37,890
copy-on-write filesystem underneath it

00:25:35,970 --> 00:25:39,690
which means that if i hack into your

00:25:37,890 --> 00:25:42,000
system if I take get control of your

00:25:39,690 --> 00:25:44,790
apache guess what I can rewrite use the

00:25:42,000 --> 00:25:46,710
rest bin of httpd if I had a read-only

00:25:44,790 --> 00:25:47,549
container running then when I take over

00:25:46,710 --> 00:25:49,650
your Apache

00:25:47,549 --> 00:25:52,380
I can't rewrite the executable that I'm

00:25:49,650 --> 00:25:54,179
running inside of so I can get a good

00:25:52,380 --> 00:25:55,710
isolation between the two things

00:25:54,179 --> 00:25:57,179
that means that I have to hack you

00:25:55,710 --> 00:25:59,070
machine the Apache every time it comes

00:25:57,179 --> 00:26:00,720
up as opposed to leaving a backdoor

00:25:59,070 --> 00:26:04,919
aware make ami easier for me to attack

00:26:00,720 --> 00:26:06,600
it all the time in production I believe

00:26:04,919 --> 00:26:07,950
is in production most applications

00:26:06,600 --> 00:26:10,190
should always run with read only

00:26:07,950 --> 00:26:13,290
contains slash users should never be

00:26:10,190 --> 00:26:15,000
writable by the processes inside of a

00:26:13,290 --> 00:26:19,169
container unless you are building

00:26:15,000 --> 00:26:21,179
containers but because darker ties

00:26:19,169 --> 00:26:24,210
together the ability to build as well as

00:26:21,179 --> 00:26:27,230
ability to run all the applications are

00:26:24,210 --> 00:26:29,490
underneath basically have the same same

00:26:27,230 --> 00:26:31,080
security so they all basically about

00:26:29,490 --> 00:26:32,370
wide open anybody's allowed to write

00:26:31,080 --> 00:26:34,320
anywhere inside of a container

00:26:32,370 --> 00:26:37,860
by default I'd like to change that

00:26:34,320 --> 00:26:39,390
default going forward so get rid of

00:26:37,860 --> 00:26:42,510
copy-on-write file systems we're not

00:26:39,390 --> 00:26:45,540
needed so let's talk about container

00:26:42,510 --> 00:26:47,010
image size one of the big things right

00:26:45,540 --> 00:26:48,180
everybody no heard about the Alpine

00:26:47,010 --> 00:26:49,740
alright and one of the things that

00:26:48,180 --> 00:26:52,320
Fedora right now we have the fedora or a

00:26:49,740 --> 00:26:54,210
minimum container image so everybody's

00:26:52,320 --> 00:26:56,130
trying to shrink these container images

00:26:54,210 --> 00:26:57,540
all the time all right and people come

00:26:56,130 --> 00:27:00,809
out and say oh my container image is

00:26:57,540 --> 00:27:02,280
only 80 megabytes Oh Mayans 120 maker

00:27:00,809 --> 00:27:03,540
well mine's better than yours because I

00:27:02,280 --> 00:27:05,190
have fought a young skinny yeah

00:27:03,540 --> 00:27:07,050
everything's about thinning out

00:27:05,190 --> 00:27:08,400
container images and the reason for that

00:27:07,050 --> 00:27:10,290
is when developers are working with

00:27:08,400 --> 00:27:11,790
container images they're basically going

00:27:10,290 --> 00:27:13,530
out and pulling them and they just don't

00:27:11,790 --> 00:27:15,780
want to wait that extra 10 seconds for

00:27:13,530 --> 00:27:17,220
the container image to come down alright

00:27:15,780 --> 00:27:21,059
so that's the whole idea was trying to

00:27:17,220 --> 00:27:22,800
shrink these container images but I

00:27:21,059 --> 00:27:24,030
would argue the real problem here is

00:27:22,800 --> 00:27:27,720
that we're moving these container images

00:27:24,030 --> 00:27:32,370
back and forth all over the place so why

00:27:27,720 --> 00:27:35,000
do you care why can't we use shared file

00:27:32,370 --> 00:27:38,370
systems for storing our container images

00:27:35,000 --> 00:27:39,750
alright why do I have to go out and buy

00:27:38,370 --> 00:27:40,950
right think think about kubernetes is

00:27:39,750 --> 00:27:42,540
gonna come up it's gonna launch a

00:27:40,950 --> 00:27:44,730
hundred containers on a hundred

00:27:42,540 --> 00:27:47,030
different nodes each one of those

00:27:44,730 --> 00:27:50,220
containers would say a gigabyte in size

00:27:47,030 --> 00:27:51,840
so now goes out to 100 nodes each one of

00:27:50,220 --> 00:27:53,400
those nodes is gonna have to move one

00:27:51,840 --> 00:27:57,179
gigabyte of data from a container

00:27:53,400 --> 00:27:58,500
registry to the hook to the node ok now

00:27:57,179 --> 00:28:00,240
we go two months later there's a

00:27:58,500 --> 00:28:03,840
security vulnerability we update the

00:28:00,240 --> 00:28:06,210
container image and also in all those

00:28:03,840 --> 00:28:08,760
nodes have to go out and move huge

00:28:06,210 --> 00:28:11,130
amounts of data again why are we doing

00:28:08,760 --> 00:28:12,809
that if I'm running in an orchestrated

00:28:11,130 --> 00:28:15,800
environment that's way of my data is

00:28:12,809 --> 00:28:18,390
sits in containers it usually sits on

00:28:15,800 --> 00:28:19,740
localhost storage but running in an

00:28:18,390 --> 00:28:22,470
orchestrated environment that hosts

00:28:19,740 --> 00:28:25,470
storages has to be networked right so if

00:28:22,470 --> 00:28:27,870
I want to conceal over from node a to

00:28:25,470 --> 00:28:29,460
node B I probably have my data it has to

00:28:27,870 --> 00:28:32,850
be stored on some kind of store it

00:28:29,460 --> 00:28:36,570
has to be an NFS SEFs cluster I scuzzy

00:28:32,850 --> 00:28:38,520
someway has to be stood on disk so the

00:28:36,570 --> 00:28:40,980
image is not being shared though that

00:28:38,520 --> 00:28:43,140
way but all the data is so why we should

00:28:40,980 --> 00:28:45,730
why aren't we using shared network

00:28:43,140 --> 00:28:48,850
storage for sharing our images

00:28:45,730 --> 00:28:50,980
so we want instantaneous updates for

00:28:48,850 --> 00:28:52,539
container images so that basically what

00:28:50,980 --> 00:28:55,779
we've done with container storage now is

00:28:52,539 --> 00:29:00,399
we allow you to store your images on NFS

00:28:55,779 --> 00:29:02,080
plus the stuffs okay so in container

00:29:00,399 --> 00:29:05,019
storage now we're allowed to do that so

00:29:02,080 --> 00:29:08,049
you can actually set up your when we get

00:29:05,019 --> 00:29:10,389
to the final part of cryo ok pod or any

00:29:08,049 --> 00:29:13,000
of the other tools builder all can have

00:29:10,389 --> 00:29:14,980
shared storage with NFS so now if I go

00:29:13,000 --> 00:29:17,830
out and I'm running a hundred containers

00:29:14,980 --> 00:29:19,299
underneath kubernetes they don't pull

00:29:17,830 --> 00:29:21,070
them down they just do a mount of the

00:29:19,299 --> 00:29:22,750
NFS share and all some of the images

00:29:21,070 --> 00:29:24,519
inside of the container the image is

00:29:22,750 --> 00:29:26,500
ready for the container to run all right

00:29:24,519 --> 00:29:30,190
so we're moving images to container

00:29:26,500 --> 00:29:34,389
storage so let's look at container image

00:29:30,190 --> 00:29:35,950
development tools why do we care how

00:29:34,389 --> 00:29:38,019
someone builds in OCI images I'll see

00:29:35,950 --> 00:29:39,549
how images are standardized why do you

00:29:38,019 --> 00:29:41,950
care what kind of tools build it right

00:29:39,549 --> 00:29:43,809
again going back to my PDF description

00:29:41,950 --> 00:29:46,059
at the beginning do you care that

00:29:43,809 --> 00:29:48,549
someone built it with Acrobat Reader

00:29:46,059 --> 00:29:50,950
I mean Acrobat writer actor oh yeah

00:29:48,549 --> 00:29:53,110
Acrobat you care how that PDF was

00:29:50,950 --> 00:29:54,700
created no as long as it works long as

00:29:53,110 --> 00:29:56,080
the functionality you care you you you

00:29:54,700 --> 00:29:58,950
know when you're looking at it why do

00:29:56,080 --> 00:29:58,950
you care how it was written

00:29:59,100 --> 00:30:03,730
so four or five years ago when we first

00:30:02,200 --> 00:30:06,600
started using it doctor came up the

00:30:03,730 --> 00:30:09,669
concept of docker file the sad thing is

00:30:06,600 --> 00:30:11,350
the same way we build containers now is

00:30:09,669 --> 00:30:14,590
the same way we built it four years ago

00:30:11,350 --> 00:30:16,330
and people are jumping through hoops to

00:30:14,590 --> 00:30:18,250
try to figure out ways to get different

00:30:16,330 --> 00:30:20,830
activity to happen inside of a docker

00:30:18,250 --> 00:30:22,870
file so we have a standardized version

00:30:20,830 --> 00:30:26,260
and docker itself is called docker file

00:30:22,870 --> 00:30:29,860
as a really crappy version of bash right

00:30:26,260 --> 00:30:32,169
yeah it's just it just you know it works

00:30:29,860 --> 00:30:34,240
well for describing an application but

00:30:32,169 --> 00:30:37,120
up till this point the only way to build

00:30:34,240 --> 00:30:39,690
docker images or OCI images is they do a

00:30:37,120 --> 00:30:39,690
darker built

00:30:43,210 --> 00:30:47,780
so can we have alternatives to the

00:30:45,410 --> 00:30:49,670
dockerfile well this it has been some

00:30:47,780 --> 00:30:51,650
tools have been coming as anybody played

00:30:49,670 --> 00:30:53,360
with ansible containers so the ansible

00:30:51,650 --> 00:30:56,000
is a way of describing an application

00:30:53,360 --> 00:30:59,210
side of ansible as opposed to describing

00:30:56,000 --> 00:31:00,830
a side of the tank of a docker file and

00:30:59,210 --> 00:31:02,690
then there's open shifts s2 I so open

00:31:00,830 --> 00:31:04,400
chef s2 I he takes out darker files

00:31:02,690 --> 00:31:06,380
altogether it hides it all totally

00:31:04,400 --> 00:31:08,420
behind the scenes and you basically do a

00:31:06,380 --> 00:31:11,240
git check-in and as soon as you do a git

00:31:08,420 --> 00:31:13,490
check in some way open ship magically

00:31:11,240 --> 00:31:16,580
takes that information and creates a new

00:31:13,490 --> 00:31:18,320
docker image or node new OCI image so

00:31:16,580 --> 00:31:20,360
there are new ways of developing these

00:31:18,320 --> 00:31:23,240
the problem is every one of these has to

00:31:20,360 --> 00:31:25,309
talk to the docker demon because any way

00:31:23,240 --> 00:31:27,340
anybody's ever built container images is

00:31:25,309 --> 00:31:29,990
through the darker daemon

00:31:27,340 --> 00:31:31,820
so I want to be able to build container

00:31:29,990 --> 00:31:35,420
images without requiring a big fat

00:31:31,820 --> 00:31:38,600
daemon and I talked to this man over

00:31:35,420 --> 00:31:39,830
here in Allen at Def Con flash here and

00:31:38,600 --> 00:31:42,110
I said hey we're doing all this stuff

00:31:39,830 --> 00:31:44,059
will contain a storage could we build a

00:31:42,110 --> 00:31:46,130
container image with it and this was on

00:31:44,059 --> 00:31:48,350
day one of it and day two he got up at a

00:31:46,130 --> 00:31:49,730
lightning talk and actually demonstrated

00:31:48,350 --> 00:31:51,920
building containers image without

00:31:49,730 --> 00:31:53,390
containers registry so that we created a

00:31:51,920 --> 00:31:56,120
thing and he made final the way I say

00:31:53,390 --> 00:31:58,760
the word builder so it's build up so we

00:31:56,120 --> 00:32:03,470
created a thing called github project

00:31:58,760 --> 00:32:05,840
atomic call builder but we basically the

00:32:03,470 --> 00:32:07,610
goal here was to use bash as a way of

00:32:05,840 --> 00:32:10,190
keep building container images so if I'm

00:32:07,610 --> 00:32:11,510
building a container really what I want

00:32:10,190 --> 00:32:13,400
to do is I want to build it from a base

00:32:11,510 --> 00:32:14,900
container so I needed the from command

00:32:13,400 --> 00:32:16,790
so if you're looking at a darker file

00:32:14,900 --> 00:32:19,970
you see the first command as you almost

00:32:16,790 --> 00:32:22,370
always build a you know it's from Fedora

00:32:19,970 --> 00:32:25,160
from something so he built a command

00:32:22,370 --> 00:32:27,260
line tool called build it from fedora

00:32:25,160 --> 00:32:28,910
when I execute build it from fedora I

00:32:27,260 --> 00:32:31,520
guess what it does uses containers image

00:32:28,910 --> 00:32:33,110
to go out to a registry grab Fedora pull

00:32:31,520 --> 00:32:36,559
it to the local machine exploded on top

00:32:33,110 --> 00:32:39,740
container storage and creates a

00:32:36,559 --> 00:32:42,580
container ID so as soon as I do that the

00:32:39,740 --> 00:32:44,900
next command I can do is mount it right

00:32:42,580 --> 00:32:46,309
I don't have to be going through a deem

00:32:44,900 --> 00:32:48,320
and I don't have to be asking mother

00:32:46,309 --> 00:32:49,820
mae-eye what I can do is I can actually

00:32:48,320 --> 00:32:51,890
go out and out it so he added a command

00:32:49,820 --> 00:32:53,179
called build a mount you give her the

00:32:51,890 --> 00:32:55,060
container ID and they give it a mile

00:32:53,179 --> 00:32:58,810
point this is somewhere lying here

00:32:55,060 --> 00:32:59,980
so we'll ignore that for now actually

00:32:58,810 --> 00:33:04,360
what it does is it returns the mountain

00:32:59,980 --> 00:33:06,340
point where I mounted it if I want to

00:33:04,360 --> 00:33:08,770
run a command inside of the container

00:33:06,340 --> 00:33:11,020
image that I'm building so if I want to

00:33:08,770 --> 00:33:13,750
do the equivalent of a run command

00:33:11,020 --> 00:33:15,550
inside of a docker file I can do a build

00:33:13,750 --> 00:33:17,650
to run so I can do a build a run of the

00:33:15,550 --> 00:33:19,690
container and I can do DNF install what

00:33:17,650 --> 00:33:22,360
that will do is actually use run seed to

00:33:19,690 --> 00:33:24,310
create a container on top of my image

00:33:22,360 --> 00:33:25,630
and we'll run DNF inside of it so it'll

00:33:24,310 --> 00:33:28,810
be locked down if I want to control

00:33:25,630 --> 00:33:31,360
what's going on I can do that but if

00:33:28,810 --> 00:33:33,880
I've done the build amount I can

00:33:31,360 --> 00:33:37,270
actually just do a make install with the

00:33:33,880 --> 00:33:38,920
dester of the mount point right there's

00:33:37,270 --> 00:33:41,680
nothing special about these container

00:33:38,920 --> 00:33:43,840
images they're just disk spaces but it's

00:33:41,680 --> 00:33:46,720
mounted up I can copy into content

00:33:43,840 --> 00:33:49,120
correctly directly in I can do DNF

00:33:46,720 --> 00:33:51,010
install install root there so one of the

00:33:49,120 --> 00:33:53,140
problems with dock Rifai docker file

00:33:51,010 --> 00:33:55,870
right now is I have to have all my tools

00:33:53,140 --> 00:33:58,360
inside of the docker image to be able to

00:33:55,870 --> 00:33:59,890
build so when we're looking at

00:33:58,360 --> 00:34:01,540
minimizing the size of container images

00:33:59,890 --> 00:34:04,510
one of the big things is I got to have

00:34:01,540 --> 00:34:06,100
DNF n the N F requires Python so I have

00:34:04,510 --> 00:34:07,510
these big tools that are poured into my

00:34:06,100 --> 00:34:10,510
container if all I want to run is Apache

00:34:07,510 --> 00:34:11,649
but I have to have Python and DNF and

00:34:10,510 --> 00:34:13,120
all these other tools inside of the

00:34:11,649 --> 00:34:15,460
container is bloating it up it's also

00:34:13,120 --> 00:34:17,950
increasing the tax surface so if I built

00:34:15,460 --> 00:34:19,600
my container using the host machine as

00:34:17,950 --> 00:34:21,610
opposed to building inside the container

00:34:19,600 --> 00:34:24,040
I can actually start to you know shrink

00:34:21,610 --> 00:34:27,550
the requires requirements of tools

00:34:24,040 --> 00:34:29,230
inside of it when I'm done I need to

00:34:27,550 --> 00:34:31,270
commit the image right so I'm building a

00:34:29,230 --> 00:34:33,669
container and modifying existing image

00:34:31,270 --> 00:34:35,710
and I need to commit it commit it so

00:34:33,669 --> 00:34:37,570
this is a bill to commit command and I

00:34:35,710 --> 00:34:38,980
could actually specify all sorts of

00:34:37,570 --> 00:34:41,140
command line tool so all those other

00:34:38,980 --> 00:34:43,300
flags are inside of the darker file we

00:34:41,140 --> 00:34:43,690
can actually specify it on the command

00:34:43,300 --> 00:34:46,270
line

00:34:43,690 --> 00:34:49,030
so what builder I can actually do the

00:34:46,270 --> 00:34:50,679
entire build basically Mallen has

00:34:49,030 --> 00:34:52,030
implemented every single command that

00:34:50,679 --> 00:34:53,560
you would expect to see inside of a

00:34:52,030 --> 00:34:56,860
docker file that you can execute inside

00:34:53,560 --> 00:34:58,360
of a bash script okay with no container

00:34:56,860 --> 00:34:59,590
daemon in the way so there's no

00:34:58,360 --> 00:35:02,790
container daemon causing you any

00:34:59,590 --> 00:35:02,790
problems in this environment

00:35:03,280 --> 00:35:06,280
yep

00:35:10,370 --> 00:35:13,370
what

00:35:15,470 --> 00:35:20,810
well alright so well again the demon

00:35:19,220 --> 00:35:22,069
that actually causes everybody to go in

00:35:20,810 --> 00:35:25,369
and work in the same type of environment

00:35:22,069 --> 00:35:27,619
so in the demon promise with the demon

00:35:25,369 --> 00:35:29,089
are walking so there's no that I can't

00:35:27,619 --> 00:35:31,010
access the storage without going through

00:35:29,089 --> 00:35:33,319
the demon I can't get any new features

00:35:31,010 --> 00:35:35,030
into the into the way I want to deal

00:35:33,319 --> 00:35:37,160
with the tools without going through the

00:35:35,030 --> 00:35:39,319
demon so if I want to build a tool that

00:35:37,160 --> 00:35:42,200
does special things like mounting I have

00:35:39,319 --> 00:35:43,640
to get that demon to agree to be able to

00:35:42,200 --> 00:35:46,069
mount these things to external storage

00:35:43,640 --> 00:35:49,010
rights alright so the real goal here is

00:35:46,069 --> 00:35:50,359
just a it's sort of I want to say this

00:35:49,010 --> 00:35:52,369
cuz everybody always says oh that's what

00:35:50,359 --> 00:35:55,010
systemd does but basically want to break

00:35:52,369 --> 00:35:56,660
things apart into core components and

00:35:55,010 --> 00:35:58,400
then be able to innovate and use the

00:35:56,660 --> 00:36:05,599
core components separate from the big

00:35:58,400 --> 00:36:07,670
centralized demon ok so we want right

00:36:05,599 --> 00:36:09,619
now ansible container and openshift are

00:36:07,670 --> 00:36:11,329
both looking into a using builder as a

00:36:09,619 --> 00:36:13,369
method for the building it we've also

00:36:11,329 --> 00:36:15,740
dealt with several companies that are

00:36:13,369 --> 00:36:18,260
looking at that streaming continuous

00:36:15,740 --> 00:36:20,150
builds turns out builder is a lot faster

00:36:18,260 --> 00:36:22,400
for building because builder only

00:36:20,150 --> 00:36:24,020
commits once while you control how often

00:36:22,400 --> 00:36:25,940
build a commit when you're using a

00:36:24,020 --> 00:36:27,560
darker file every single line has to be

00:36:25,940 --> 00:36:28,550
committed so if you look at dark eval

00:36:27,560 --> 00:36:30,349
you will see all these people doing

00:36:28,550 --> 00:36:32,060
these use run lines with you know

00:36:30,349 --> 00:36:33,710
backslashes and stuff because they want

00:36:32,060 --> 00:36:35,180
all these commands to be executed at the

00:36:33,710 --> 00:36:37,730
same time inside of the build

00:36:35,180 --> 00:36:39,380
environment and builder we've taken that

00:36:37,730 --> 00:36:41,270
a pot and basically allows you to do

00:36:39,380 --> 00:36:43,339
individual steps as you're doing builder

00:36:41,270 --> 00:36:44,599
so you can basically say yeah that's

00:36:43,339 --> 00:36:47,000
good enough I'm going to commit now and

00:36:44,599 --> 00:36:49,250
then I can continue adding to it or you

00:36:47,000 --> 00:36:51,650
can just do everything and you know one

00:36:49,250 --> 00:36:53,599
huge you know hundred lines script and

00:36:51,650 --> 00:36:55,760
commit at the end if you look at some of

00:36:53,599 --> 00:36:58,670
the high JBoss applications they have 50

00:36:55,760 --> 00:37:00,859
75 layers end up being added when they'd

00:36:58,670 --> 00:37:03,859
be around with dakka dakka build so if

00:37:00,859 --> 00:37:05,630
you run a builder building you can

00:37:03,859 --> 00:37:07,970
actually really shrink and speed up

00:37:05,630 --> 00:37:11,300
because you're not adding a layer for

00:37:07,970 --> 00:37:11,990
every single command so what about the

00:37:11,300 --> 00:37:14,589
akka file

00:37:11,990 --> 00:37:14,589
yeah

00:37:20,089 --> 00:37:29,729
yep you define it as a batch script

00:37:23,279 --> 00:37:37,169
instead of a docker file yeah I mean dr.

00:37:29,729 --> 00:37:39,059
pol was just a bad batch script no no

00:37:37,169 --> 00:37:40,409
we're not doing anything that's if

00:37:39,059 --> 00:37:41,929
someone wants to innovate on top of

00:37:40,409 --> 00:37:44,759
builder they could do that

00:37:41,929 --> 00:37:46,229
so builder what about docker files

00:37:44,759 --> 00:37:47,519
everybody the world's working with

00:37:46,229 --> 00:37:48,779
doctor files so one of the things we had

00:37:47,519 --> 00:37:52,049
to do with builder is actually support

00:37:48,779 --> 00:37:54,089
docker file format so we created a

00:37:52,049 --> 00:37:57,449
builder build using docker file - chef

00:37:54,089 --> 00:38:00,059
docker file dot but that's kind of

00:37:57,449 --> 00:38:03,509
characters type so we actually called it

00:38:00,059 --> 00:38:06,299
bud so build a bud F docker file

00:38:03,509 --> 00:38:08,189
basically allows you to build the it'll

00:38:06,299 --> 00:38:11,549
work walk through the entire docker file

00:38:08,189 --> 00:38:13,409
and run it exactly like you did a docker

00:38:11,549 --> 00:38:15,239
build so if you have a lot of

00:38:13,409 --> 00:38:17,339
applications that people submitting like

00:38:15,239 --> 00:38:18,899
at the fedora we were at the fedora

00:38:17,339 --> 00:38:20,999
container talk yesterday and they were

00:38:18,899 --> 00:38:22,919
talking about people submitting darker

00:38:20,999 --> 00:38:24,899
files and I'm building them inside of

00:38:22,919 --> 00:38:26,669
dr.house fedora registries

00:38:24,899 --> 00:38:28,559
one of things we asked to the N is he

00:38:26,669 --> 00:38:30,569
looking at builder for doing it

00:38:28,559 --> 00:38:32,369
looking at and yes the answer was yes so

00:38:30,569 --> 00:38:34,769
they're gonna look at using build up for

00:38:32,369 --> 00:38:37,049
building container images theoretically

00:38:34,769 --> 00:38:39,419
at some point to the future builder

00:38:37,049 --> 00:38:42,809
might allow us to get better security

00:38:39,419 --> 00:38:45,419
the news in docker build okay we might

00:38:42,809 --> 00:38:47,130
be able to use docker build with less

00:38:45,419 --> 00:38:50,219
privileges than we require right now to

00:38:47,130 --> 00:38:55,259
do building but right now it requires

00:38:50,219 --> 00:38:57,659
sysadmin privileges so build is kind of

00:38:55,259 --> 00:38:59,699
a really cool tool but there was a real

00:38:57,659 --> 00:39:02,130
goal in this whole thing was so we

00:38:59,699 --> 00:39:04,559
wanted to make Sanat require the daka

00:39:02,130 --> 00:39:06,179
demon so guess what i've been salting

00:39:04,559 --> 00:39:09,869
big fat container daemons and guess what

00:39:06,179 --> 00:39:13,739
i'm about to introduce a somewhat thin a

00:39:09,869 --> 00:39:15,179
big fat container daemon so container

00:39:13,739 --> 00:39:17,069
management so now going back to

00:39:15,179 --> 00:39:19,859
kubernetes kubernetes wants to support

00:39:17,069 --> 00:39:24,209
more than one a container runtime so

00:39:19,859 --> 00:39:26,069
kubernetes vocht year-and-a-half ago

00:39:24,209 --> 00:39:28,079
core OS went to coop if you would look

00:39:26,069 --> 00:39:29,220
to kubernetes up to a year and a half

00:39:28,079 --> 00:39:32,010
ago it basically had

00:39:29,220 --> 00:39:35,819
all through it so it was talking the

00:39:32,010 --> 00:39:39,359
docker engine's API to build up do all

00:39:35,819 --> 00:39:40,950
that stuff core OS went to them and said

00:39:39,359 --> 00:39:43,079
we want to have rocket running inside of

00:39:40,950 --> 00:39:44,579
containers okay so we need to have

00:39:43,079 --> 00:39:46,950
rocket inside containers so here is a

00:39:44,579 --> 00:39:49,040
huge patch that the baseless said if def

00:39:46,950 --> 00:39:52,890
you know the equivalent can go of if def

00:39:49,040 --> 00:39:56,190
docker do this command if def else do

00:39:52,890 --> 00:39:59,250
this rocket command and coral Google and

00:39:56,190 --> 00:40:01,200
the kubernetes people said hold on we

00:39:59,250 --> 00:40:03,990
can't do this we can't have everybody

00:40:01,200 --> 00:40:06,000
you know end up with go code with like

00:40:03,990 --> 00:40:08,010
4,000 different if-then-else statements

00:40:06,000 --> 00:40:10,319
and so what they did is they said we're

00:40:08,010 --> 00:40:12,960
gonna define the API that we expect a

00:40:10,319 --> 00:40:15,150
container runtime to implement if they

00:40:12,960 --> 00:40:18,890
want to work as a container runtime for

00:40:15,150 --> 00:40:21,900
kubernetes and that was called CRI so

00:40:18,890 --> 00:40:24,540
contain a runtime interface I don't

00:40:21,900 --> 00:40:27,780
spell that out so when they define the

00:40:24,540 --> 00:40:31,290
CRI for rocket we jumped in and said hey

00:40:27,780 --> 00:40:33,660
why don't we build a little tiny tool a

00:40:31,290 --> 00:40:35,640
demon that just implements the CRI

00:40:33,660 --> 00:40:38,099
interface and launches containers for

00:40:35,640 --> 00:40:39,540
kubernetes if you look at another thing

00:40:38,099 --> 00:40:42,270
in kubernetes companies has had an

00:40:39,540 --> 00:40:45,180
incredible problem staying up with

00:40:42,270 --> 00:40:47,099
darker ok darker changes all the time

00:40:45,180 --> 00:40:49,230
especially last year right there was

00:40:47,099 --> 00:40:52,410
darker one not one eight one nine 110

00:40:49,230 --> 00:40:55,220
111 112 113 all within the series a few

00:40:52,410 --> 00:40:58,950
months every single release broke

00:40:55,220 --> 00:41:02,250
kubernetes however kubernetes right now

00:40:58,950 --> 00:41:03,720
only supports darker 1.12 which is bowel

00:41:02,250 --> 00:41:06,089
for almost a year they haven't moved to

00:41:03,720 --> 00:41:07,650
darker window 13 yet darker now has

00:41:06,089 --> 00:41:09,480
changed their whole thing when they went

00:41:07,650 --> 00:41:11,849
to change the names of Moby they've

00:41:09,480 --> 00:41:15,690
changed so they release on monthly basis

00:41:11,849 --> 00:41:16,829
now so this is the 17 17-6 release i

00:41:15,690 --> 00:41:18,450
don't know even know what the latest

00:41:16,829 --> 00:41:20,250
release is right

00:41:18,450 --> 00:41:23,460
but every single release they broke

00:41:20,250 --> 00:41:25,740
kubernetes so we said why don't we

00:41:23,460 --> 00:41:28,020
implement a container runtime daemon

00:41:25,740 --> 00:41:30,119
that will guarantee to never break

00:41:28,020 --> 00:41:31,440
kubernetes and the way we want to do

00:41:30,119 --> 00:41:33,569
that is we want to have the container

00:41:31,440 --> 00:41:37,079
deem at any pull request any change to

00:41:33,569 --> 00:41:39,630
see our i/o has to pass the kubernetes

00:41:37,079 --> 00:41:41,640
test suite it's the CRI test we the

00:41:39,630 --> 00:41:43,050
ended and test suite so weak SATA

00:41:41,640 --> 00:41:45,000
creating a thing called

00:41:43,050 --> 00:41:47,130
cryo which stands for container and

00:41:45,000 --> 00:41:50,700
runtime interface for open container

00:41:47,130 --> 00:41:52,080
initiative OC ice okay so we entered we

00:41:50,700 --> 00:41:55,170
introduced it last year it's underneath

00:41:52,080 --> 00:41:56,940
the kubernetes runtime implements

00:41:55,170 --> 00:41:58,920
kubernetes run to contain a runtime

00:41:56,940 --> 00:42:01,710
interface kubernetes service launches

00:41:58,920 --> 00:42:03,540
the container pods this is fully open

00:42:01,710 --> 00:42:06,240
with contributors from Red Hat Susi

00:42:03,540 --> 00:42:09,930
Intel hyper shell IBM and lots of other

00:42:06,240 --> 00:42:11,910
people contributing to it okay I call it

00:42:09,930 --> 00:42:13,380
a lot there's a whole bunch of people

00:42:11,910 --> 00:42:15,540
that are like dogs sniffing around the

00:42:13,380 --> 00:42:17,100
edge of it right now we're hearing from

00:42:15,540 --> 00:42:18,630
everybody that's interested in that

00:42:17,100 --> 00:42:20,760
whether or not they're willing to

00:42:18,630 --> 00:42:22,950
contribute I don't know but there's lots

00:42:20,760 --> 00:42:24,180
of every big major company you can think

00:42:22,950 --> 00:42:26,580
of that might has anything to do with

00:42:24,180 --> 00:42:28,800
containers other than the docker i/o of

00:42:26,580 --> 00:42:35,310
them and darker right now is interested

00:42:28,800 --> 00:42:37,470
in try out right intel added support for

00:42:35,310 --> 00:42:39,690
trial to run KBM based containers clear

00:42:37,470 --> 00:42:41,820
containers if you go to cry oh I uh

00:42:39,690 --> 00:42:44,940
slash blog right now you'll see I

00:42:41,820 --> 00:42:46,530
published today a container Intel blog

00:42:44,940 --> 00:42:48,150
talking about how they run Intel

00:42:46,530 --> 00:42:53,580
containers clueless containers unto

00:42:48,150 --> 00:42:56,280
cryo-vac trial package is now available

00:42:53,580 --> 00:42:57,990
for fedora 2526 rawhide all the fedora

00:42:56,280 --> 00:42:59,700
versions and fedoras will we've been

00:42:57,990 --> 00:43:02,130
delivering all this stuff thrust

00:42:59,700 --> 00:43:03,720
everything comes in fedora first but

00:43:02,130 --> 00:43:06,930
we're also working on getting it onto a

00:43:03,720 --> 00:43:09,480
bun too in other packages and it's the

00:43:06,930 --> 00:43:13,560
first CRI based daemon to pass the full

00:43:09,480 --> 00:43:15,390
kubernetes CRI end-to-end test ok I test

00:43:13,560 --> 00:43:18,090
well you commit a partner right now our

00:43:15,390 --> 00:43:19,830
tests well you can rip commit polio you

00:43:18,090 --> 00:43:22,350
send a pull request to contain I hit

00:43:19,830 --> 00:43:24,510
launches hundreds of tests in a fact it

00:43:22,350 --> 00:43:25,980
takes between an hour and two hours for

00:43:24,510 --> 00:43:28,050
the entire test suite so you are not

00:43:25,980 --> 00:43:31,650
allowed to until you pass all those

00:43:28,050 --> 00:43:33,840
tests we're knockin we're not accepting

00:43:31,650 --> 00:43:36,960
the pull requests so you have to pass

00:43:33,840 --> 00:43:40,500
all tests to get it in and again it has

00:43:36,960 --> 00:43:43,080
to be because we can't break kubernetes

00:43:40,500 --> 00:43:46,650
kubernetes what matters so everybody

00:43:43,080 --> 00:43:49,710
know who Kelsey Hightower is Kelsey

00:43:46,650 --> 00:43:51,600
Hightower is sort of the the lead

00:43:49,710 --> 00:43:54,600
evangelist for kubernetes and he has

00:43:51,600 --> 00:43:55,890
massive following of 35,000 followers

00:43:54,600 --> 00:43:59,819
he's just you

00:43:55,890 --> 00:44:03,210
influence so last week he announced that

00:43:59,819 --> 00:44:05,369
as of this Friday I guess for the 31st a

00:44:03,210 --> 00:44:07,289
huge update for kubernetes The Hideaway

00:44:05,369 --> 00:44:09,599
ship so he basically talks all the time

00:44:07,289 --> 00:44:11,819
about kubernetes and all new labs

00:44:09,599 --> 00:44:14,099
including encrypted secrets and the

00:44:11,819 --> 00:44:17,579
using of cryo is a container interfaces

00:44:14,099 --> 00:44:18,960
what he's about to ship and look at the

00:44:17,579 --> 00:44:22,529
first person that chimed in underneath

00:44:18,960 --> 00:44:25,170
it solomon hikes and he's not happy

00:44:22,529 --> 00:44:27,420
about this and one of the things that

00:44:25,170 --> 00:44:28,829
cryo when we started developing cryo did

00:44:27,420 --> 00:44:32,819
is they created a thing called container

00:44:28,829 --> 00:44:35,700
d so originally cryo was basically an

00:44:32,819 --> 00:44:37,440
alternative to the docker daemon and if

00:44:35,700 --> 00:44:38,849
you look at the way kubernetes worked

00:44:37,440 --> 00:44:40,140
with the dark Adeem and it goes up to

00:44:38,849 --> 00:44:42,119
the dock edema and the docker demon

00:44:40,140 --> 00:44:44,970
pulls down the image stores inside of

00:44:42,119 --> 00:44:46,799
its internal memory and then watch this

00:44:44,970 --> 00:44:50,640
run see that's the way docker daemon

00:44:46,799 --> 00:44:52,140
worked so darker as of 1.11 or 1.12

00:44:50,640 --> 00:44:54,510
added this thing originally called the

00:44:52,140 --> 00:44:57,029
container d container d container d was

00:44:54,510 --> 00:44:59,880
tied to swamp dr. Swan a competitor

00:44:57,029 --> 00:45:01,740
against kubernetes so cool bad so

00:44:59,880 --> 00:45:03,900
container D was because docker was too

00:45:01,740 --> 00:45:06,180
heavy weight so they wanted to have a

00:45:03,900 --> 00:45:07,559
thin down container daemon that works so

00:45:06,180 --> 00:45:09,720
you all of a sudden doctor went from

00:45:07,559 --> 00:45:11,609
darker launching run C to docker target

00:45:09,720 --> 00:45:15,150
container dean container d launching run

00:45:11,609 --> 00:45:17,579
C actually if you go back further darker

00:45:15,150 --> 00:45:19,470
used to launch contain it directly and

00:45:17,579 --> 00:45:22,380
then move to run C they moved to contain

00:45:19,470 --> 00:45:23,700
a demon C so all of a sudden container D

00:45:22,380 --> 00:45:26,009
was out they but was proud of the daka

00:45:23,700 --> 00:45:28,589
project after cryo started getting a lot

00:45:26,009 --> 00:45:30,299
of press last fall doctor decided to add

00:45:28,589 --> 00:45:31,829
more functionality to the container

00:45:30,299 --> 00:45:34,170
demon so they created a thing called

00:45:31,829 --> 00:45:35,819
container they created a project called

00:45:34,170 --> 00:45:36,690
container D that was separate from

00:45:35,819 --> 00:45:39,660
docker

00:45:36,690 --> 00:45:41,160
that container D they then took all the

00:45:39,660 --> 00:45:43,589
functionality that we were doing in cryo

00:45:41,160 --> 00:45:45,779
right the separate containers image

00:45:43,589 --> 00:45:47,549
containers and and moved that into the

00:45:45,779 --> 00:45:49,259
container daemon so now if you talk to

00:45:47,549 --> 00:45:51,690
the container daemon it will go out to a

00:45:49,259 --> 00:45:54,059
container registry pull it down it will

00:45:51,690 --> 00:45:55,890
put it onto storage and stuff we've been

00:45:54,059 --> 00:45:57,180
asked to contribute to that and the

00:45:55,890 --> 00:45:58,950
first thing we did is sure will

00:45:57,180 --> 00:46:01,109
contribute to that let's use containers

00:45:58,950 --> 00:46:02,670
image as a way of pulling images let's

00:46:01,109 --> 00:46:04,440
use container storage the way of pulling

00:46:02,670 --> 00:46:06,630
storage and they said no we're not

00:46:04,440 --> 00:46:09,210
interested they also tied it to it's

00:46:06,630 --> 00:46:11,550
called the BD FL which is a banana but

00:46:09,210 --> 00:46:14,010
benevolent dictator for life and guess

00:46:11,550 --> 00:46:15,860
who the Benedict beneth the dictator for

00:46:14,010 --> 00:46:19,110
life is Solomon hikes

00:46:15,860 --> 00:46:20,220
so we basically said we want to separate

00:46:19,110 --> 00:46:21,810
all this functionality and have a

00:46:20,220 --> 00:46:24,000
different libraries that we can innovate

00:46:21,810 --> 00:46:26,880
at different rates they turned it down

00:46:24,000 --> 00:46:28,590
and so what docker is trying to do is

00:46:26,880 --> 00:46:30,030
get everybody to move to container D so

00:46:28,590 --> 00:46:31,710
container Dean cryo are the two

00:46:30,030 --> 00:46:36,450
competitors in this environment and

00:46:31,710 --> 00:46:39,860
that's what's going on but container D

00:46:36,450 --> 00:46:43,710
is also a demon for supporting suam

00:46:39,860 --> 00:46:45,090
mesosphere kubernetes any other Tom Dick

00:46:43,710 --> 00:46:46,500
and Harry that comes along and do

00:46:45,090 --> 00:46:48,030
container registries as opposed to go

00:46:46,500 --> 00:46:49,590
into that so guess what it's doing it's

00:46:48,030 --> 00:46:51,770
gonna blow up into a big fat container

00:46:49,590 --> 00:46:54,450
demon we built to contain a demon that's

00:46:51,770 --> 00:46:58,350
dedicated just the crew to kubernetes

00:46:54,450 --> 00:47:01,170
we'll see who wins one of the things

00:46:58,350 --> 00:47:03,300
we're building up trial that when one of

00:47:01,170 --> 00:47:04,530
the problems with moving from Dockers

00:47:03,300 --> 00:47:08,400
are backends for kubernetes

00:47:04,530 --> 00:47:10,200
is if you use kubernetes right now and

00:47:08,400 --> 00:47:11,790
you have want to find out what's going

00:47:10,200 --> 00:47:13,380
on in the system what do you do you will

00:47:11,790 --> 00:47:15,180
get onto that the node that's running

00:47:13,380 --> 00:47:17,340
kubernetes and you start to run docker

00:47:15,180 --> 00:47:19,440
commands so you start to run different

00:47:17,340 --> 00:47:21,030
darker commands to sort of diagnose

00:47:19,440 --> 00:47:22,650
what's going on and really to sort of

00:47:21,030 --> 00:47:25,050
understand what's going on behind the

00:47:22,650 --> 00:47:27,030
scenes in kubernetes environment so we

00:47:25,050 --> 00:47:29,070
needed a basically a debugging tool for

00:47:27,030 --> 00:47:32,040
doing that so we started out this effort

00:47:29,070 --> 00:47:33,240
inside a cryo called k pod so k pod is

00:47:32,040 --> 00:47:36,990
management tool for manage

00:47:33,240 --> 00:47:39,180
administrating cryo storage and pods so

00:47:36,990 --> 00:47:41,580
we've had a cape our diff k pod export

00:47:39,180 --> 00:47:51,120
capable history capable image is capable

00:47:41,580 --> 00:47:53,400
info k Pardons back to keep our load ok

00:47:51,120 --> 00:47:56,580
so what we're doing is we're

00:47:53,400 --> 00:47:59,130
implementing the entire dock at CLI in k

00:47:56,580 --> 00:48:01,650
pod without a big fat demon so again

00:47:59,130 --> 00:48:03,870
this happens all you don't even need

00:48:01,650 --> 00:48:05,610
cryo running this happens behind the

00:48:03,870 --> 00:48:07,380
scenes and you're able to do almost

00:48:05,610 --> 00:48:10,170
everything you can do inside of a darker

00:48:07,380 --> 00:48:11,550
CLI but you're not talking to a demon

00:48:10,170 --> 00:48:12,810
it's not a client-server operation

00:48:11,550 --> 00:48:15,240
you're just running the containers as a

00:48:12,810 --> 00:48:17,100
child of york a pod environment so this

00:48:15,240 --> 00:48:19,440
is how far we are with k pod right now

00:48:17,100 --> 00:48:21,690
we have all these commands are

00:48:19,440 --> 00:48:22,470
implemented we're probably adding about

00:48:21,690 --> 00:48:27,089
one commander we

00:48:22,470 --> 00:48:29,430
if you go on to Kyoto slash blog you'll

00:48:27,089 --> 00:48:30,960
find lots and lots of blogs to talk and

00:48:29,430 --> 00:48:32,970
video showing you how we're implementing

00:48:30,960 --> 00:48:34,290
them we haven't implemented the most

00:48:32,970 --> 00:48:36,390
important ones yet because they're the

00:48:34,290 --> 00:48:39,329
hardest to do a pod run

00:48:36,390 --> 00:48:41,700
ok pod exec a pod attached those are all

00:48:39,329 --> 00:48:42,690
being worked on heavily but we really

00:48:41,700 --> 00:48:45,300
want to make sure we're doing them

00:48:42,690 --> 00:48:46,890
correctly once we have K pod we want

00:48:45,300 --> 00:48:49,829
we're actually creating a new library

00:48:46,890 --> 00:48:51,869
called live pod which K pod and cryo

00:48:49,829 --> 00:48:53,369
will end up sharing and be able to do

00:48:51,869 --> 00:48:56,310
all of the activity through the same

00:48:53,369 --> 00:48:58,050
same interface and if you wanted soak a

00:48:56,310 --> 00:49:00,900
pod originally when it comes out is just

00:48:58,050 --> 00:49:02,520
going to be tied to what the dock is CLI

00:49:00,900 --> 00:49:04,050
can do but we really want to get to the

00:49:02,520 --> 00:49:06,630
point where it's actually launching pods

00:49:04,050 --> 00:49:09,390
we want to get more experimenting around

00:49:06,630 --> 00:49:11,040
what does it mean to be in a pod so when

00:49:09,390 --> 00:49:13,200
I'm talking about pods for those who

00:49:11,040 --> 00:49:14,730
don't know are basically a way of

00:49:13,200 --> 00:49:17,790
running more than one container in the

00:49:14,730 --> 00:49:20,490
same environment so darker kubernetes

00:49:17,790 --> 00:49:23,069
faceless says I run kubernetes runs pods

00:49:20,490 --> 00:49:24,930
not containers but you can run a single

00:49:23,069 --> 00:49:27,569
container inside of a pot so it ends up

00:49:24,930 --> 00:49:30,150
almost everybody tends to do that but

00:49:27,569 --> 00:49:31,710
you can actually have like other

00:49:30,150 --> 00:49:33,660
containers that sort of mana for the

00:49:31,710 --> 00:49:34,859
what's going on with the main container

00:49:33,660 --> 00:49:36,839
inside of a pod you can have what's

00:49:34,859 --> 00:49:38,250
called a NIC containers you can start to

00:49:36,839 --> 00:49:39,720
run potentially containers with

00:49:38,250 --> 00:49:41,609
different privileges inside of a pod

00:49:39,720 --> 00:49:43,859
environment and the pods move around

00:49:41,609 --> 00:49:46,829
you know from node to node you can't run

00:49:43,859 --> 00:49:48,599
containment pods cannot span nodes but

00:49:46,829 --> 00:49:50,369
but the pod becomes a single unit which

00:49:48,599 --> 00:49:51,869
can which can run one or more containers

00:49:50,369 --> 00:49:54,030
inside of it so we want to experiment

00:49:51,869 --> 00:49:58,130
with k pod into that environment once we

00:49:54,030 --> 00:49:58,130
have the entire darkest CLI implemented

00:49:58,460 --> 00:50:03,329
so cryo next steps we want to move it

00:50:01,650 --> 00:50:06,420
out of the kubernetes incubator project

00:50:03,329 --> 00:50:10,020
so we're working very hard to get that

00:50:06,420 --> 00:50:12,390
we want to get our 1.0 so kubernetes one

00:50:10,020 --> 00:50:15,030
dot cryo 1.0 was gonna be tied to

00:50:12,390 --> 00:50:16,200
kubernetes 1.7 after we get our one

00:50:15,030 --> 00:50:17,609
dotto releasing this because the

00:50:16,200 --> 00:50:20,040
engineers want to have a one dot or

00:50:17,609 --> 00:50:22,079
release from then on every cryo release

00:50:20,040 --> 00:50:24,180
will be exact same versions of

00:50:22,079 --> 00:50:26,819
kubernetes so the trial that supports

00:50:24,180 --> 00:50:29,400
1.8 it's gonna be 1.8 so try a 1.8 will

00:50:26,819 --> 00:50:30,900
be kubernetes one day cry 1.9 will work

00:50:29,400 --> 00:50:32,370
with kubernetes 1.9

00:50:30,900 --> 00:50:34,410
so we will have them matched up the only

00:50:32,370 --> 00:50:36,180
one that breaks that is we have to have

00:50:34,410 --> 00:50:39,240
a one dot oh release at least they want

00:50:36,180 --> 00:50:41,550
to we need to pass the OpenShift test

00:50:39,240 --> 00:50:43,530
suite so right now we're tying right now

00:50:41,550 --> 00:50:45,000
we're tied onto kubernetes but we also

00:50:43,530 --> 00:50:46,110
want to tie into open ships so

00:50:45,000 --> 00:50:47,430
eventually we want to get to the point

00:50:46,110 --> 00:50:50,370
where trial won't be updated unless

00:50:47,430 --> 00:50:55,920
you've fixed that unless your patch will

00:50:50,370 --> 00:50:57,660
not break kubernetes our OpenShift open

00:50:55,920 --> 00:50:59,700
ship tells kubernetes to execute a pod

00:50:57,660 --> 00:51:02,400
kubernetes community communicates with

00:50:59,700 --> 00:51:04,440
trial trial uses containers image to

00:51:02,400 --> 00:51:06,930
pull the image to the hosts trial stores

00:51:04,440 --> 00:51:09,630
the image using container storage trial

00:51:06,930 --> 00:51:11,430
then runs launches apart using run C bar

00:51:09,630 --> 00:51:15,080
is the blog today tells you we can use

00:51:11,430 --> 00:51:17,130
it it can run using clay containers

00:51:15,080 --> 00:51:20,130
standard base container runtimes

00:51:17,130 --> 00:51:23,190
alternatives to the package formerly

00:51:20,130 --> 00:51:25,710
known as docker and rocket conclusion

00:51:23,190 --> 00:51:26,520
breaking up container runtimes into coil

00:51:25,710 --> 00:51:28,200
functionality

00:51:26,520 --> 00:51:30,560
pulling and pushing images from registry

00:51:28,200 --> 00:51:32,760
storing images running containers

00:51:30,560 --> 00:51:35,970
innovate new and interesting ways of

00:51:32,760 --> 00:51:43,440
using containers and the end is pdf

00:51:35,970 --> 00:51:46,730
Linux containers any questions everybody

00:51:43,440 --> 00:51:46,730
understands thoroughly yes Matt

00:51:55,310 --> 00:51:58,000
yep

00:52:00,810 --> 00:52:05,940
well when cryo has when cryo has full so

00:52:03,900 --> 00:52:07,890
the question I guess I should repeat the

00:52:05,940 --> 00:52:10,320
question the question is is cryo

00:52:07,890 --> 00:52:13,560
interesting to sort of a person who just

00:52:10,320 --> 00:52:14,880
wants to use the dock and CLI so okay so

00:52:13,560 --> 00:52:15,990
you just wants to play with containers

00:52:14,880 --> 00:52:17,820
on his localhost

00:52:15,990 --> 00:52:18,570
he doesn't understand orchestration

00:52:17,820 --> 00:52:20,010
doesn't want to worry about

00:52:18,570 --> 00:52:21,720
orchestration just wants to sort of

00:52:20,010 --> 00:52:23,490
watch containers and play with them our

00:52:21,720 --> 00:52:25,380
goal with the que pod tool is to

00:52:23,490 --> 00:52:27,930
actually give you that experience so you

00:52:25,380 --> 00:52:30,060
can have K pod as being away so you can

00:52:27,930 --> 00:52:32,610
be able to do all of the all of the

00:52:30,060 --> 00:52:33,960
darkest CLI that anybody uses you'll be

00:52:32,610 --> 00:52:36,240
able to execute with K bus you're going

00:52:33,960 --> 00:52:37,830
to start trial not run the cryo demon

00:52:36,240 --> 00:52:39,870
but use the capo tools

00:52:37,830 --> 00:52:42,150
eventually we might break a pike k pod

00:52:39,870 --> 00:52:44,850
away from cryo but right now what's it's

00:52:42,150 --> 00:52:46,260
sort of tied together for but and you

00:52:44,850 --> 00:52:46,920
can use builder at the same time so if

00:52:46,260 --> 00:52:49,640
you want to build

00:52:46,920 --> 00:52:51,690
Tanner images on your hosts use builder

00:52:49,640 --> 00:52:53,460
builder to build it as soon as builders

00:52:51,690 --> 00:52:55,530
done building it you can do k pod run to

00:52:53,460 --> 00:52:57,390
run a container an end you can use scope

00:52:55,530 --> 00:52:58,890
yo then to copy those images out to a

00:52:57,390 --> 00:53:01,170
registry you can use build a push you

00:52:58,890 --> 00:53:02,940
can use scope EO k pod push so all the

00:53:01,170 --> 00:53:11,700
tools have all the ability to interact

00:53:02,940 --> 00:53:14,040
with right so the advantage is that you

00:53:11,700 --> 00:53:15,690
have lots of flexibility of the tools

00:53:14,040 --> 00:53:18,090
that you can use you mean advantage over

00:53:15,690 --> 00:53:20,460
using docker daemon yeah well I think

00:53:18,090 --> 00:53:21,810
eventually I mean the advantages that

00:53:20,460 --> 00:53:23,040
you could yeah you could fire out cryo

00:53:21,810 --> 00:53:24,720
daemon and cryo demon would

00:53:23,040 --> 00:53:25,980
instantaneously they see the images you

00:53:24,720 --> 00:53:27,510
want so you can go right in so cool but

00:53:25,980 --> 00:53:29,400
I didn't say launch this container I

00:53:27,510 --> 00:53:31,320
just built and it will already be inside

00:53:29,400 --> 00:53:33,600
the storage but yeah I mean there's no

00:53:31,320 --> 00:53:35,670
there's I think there are advantages

00:53:33,600 --> 00:53:37,460
because we're innovating at different

00:53:35,670 --> 00:53:40,470
levels and the different tools but

00:53:37,460 --> 00:53:41,940
overall it's it's the goal is to make it

00:53:40,470 --> 00:53:45,720
a sort of a placement yeah same

00:53:41,940 --> 00:53:47,790
experience I go with the tape artist to

00:53:45,720 --> 00:53:50,520
give you muscle memory so if you typed

00:53:47,790 --> 00:53:52,350
in you know Ti for the way you launch a

00:53:50,520 --> 00:53:56,250
container with docker you will type in k

00:53:52,350 --> 00:53:58,620
pod run TI for watching we're we're

00:53:56,250 --> 00:54:00,810
taking the exacts almost exactly the

00:53:58,620 --> 00:54:01,890
same API things you won't be able to do

00:54:00,810 --> 00:54:07,500
is you're not going to be allowed to do

00:54:01,890 --> 00:54:08,970
Dhaka so you won't be have K pod Swan if

00:54:07,500 --> 00:54:10,710
someone else wants to implement that

00:54:08,970 --> 00:54:12,720
we're fully open to accepting patches

00:54:10,710 --> 00:54:14,520
from anybody that wants to do that some

00:54:12,720 --> 00:54:17,820
companies have contacted

00:54:14,520 --> 00:54:20,040
they want to use pods without using

00:54:17,820 --> 00:54:23,400
kubernetes so they're looking at us

00:54:20,040 --> 00:54:25,620
using libraries for pods to to run run a

00:54:23,400 --> 00:54:27,330
test so we're open to that again this is

00:54:25,620 --> 00:54:29,190
what that goal here is not to be a be

00:54:27,330 --> 00:54:31,380
DFL this is not going to be Red Hat's

00:54:29,190 --> 00:54:32,670
only way of doing it Red Hat it's not

00:54:31,380 --> 00:54:34,470
decided whether we're going to support

00:54:32,670 --> 00:54:35,850
clear containers or other containers but

00:54:34,470 --> 00:54:38,400
anyone wants to contribute it's a fully

00:54:35,850 --> 00:54:40,080
open source project so anybody that

00:54:38,400 --> 00:54:42,090
comes in and contributes gives us good

00:54:40,080 --> 00:54:44,450
reason to have it what makes a lots of

00:54:42,090 --> 00:54:48,570
contributions we will accept accepted it

00:54:44,450 --> 00:54:50,190
anybody else any other questions I'm out

00:54:48,570 --> 00:54:52,380
of time anyways okay well thanks for

00:54:50,190 --> 00:54:54,990
coming and hopefully anybody want to

00:54:52,380 --> 00:54:56,550
contribute at the end of it these are

00:54:54,990 --> 00:54:58,170
all the different places right instead

00:54:56,550 --> 00:55:00,300
of just having one centralized location

00:54:58,170 --> 00:55:01,220
you can contribute to containers image

00:55:00,300 --> 00:55:05,550
container storage

00:55:01,220 --> 00:55:08,040
atomic project build a scope EO cryo

00:55:05,550 --> 00:55:11,380
there's blogs mediums things like that

00:55:08,040 --> 00:55:16,510
so thanks for coming

00:55:11,380 --> 00:55:16,510

YouTube URL: https://www.youtube.com/watch?v=fhXH3F3A6SE


