Title: Flock 2017 - How do we restore Fedora to factory Settings
Publication date: 2017-10-20
Playlist: Flock 2017
Description: 
	Thursday August 31, 2017 11:30am - 12:00pm
@Grand II
Talk: How do we restore Fedora to factory Settings
Presenter: Stephen Gallagher

Description:
This talk will focus on some less-recognized needs of Fedora packaging. In order to better operate in a world where servers are increasingly being virtualized, Fedora needs to be easier to turn into a "Gold Master".

In this topic, we'll discuss the problems with some classic approaches and a discussion of how to use systemd features to solve them. There will also be a specific case-study on how to improve the creation of self-signed-certificates for services that offer HTTP-based interfaces.
Captions: 
	00:00:01,010 --> 00:00:07,770
good morning my name is Steven Gallagher

00:00:05,040 --> 00:00:09,330
as some of you probably know and today

00:00:07,770 --> 00:00:12,469
I'm going to be talking about how do we

00:00:09,330 --> 00:00:14,700
reset fedora to factory defaults

00:00:12,469 --> 00:00:20,550
dealing with gremlins and the packaging

00:00:14,700 --> 00:00:26,390
guidelines so I'd like to tell this as a

00:00:20,550 --> 00:00:26,390
bit of a story in a play in 3x

00:00:26,960 --> 00:00:36,329
act 1 the rise of the RPM package

00:00:31,529 --> 00:00:38,129
manager' so once upon a time a group of

00:00:36,329 --> 00:00:42,450
brilliant brilliant designers and

00:00:38,129 --> 00:00:43,370
engineers innovators developed a tool

00:00:42,450 --> 00:00:48,300
called

00:00:43,370 --> 00:00:50,309
RPM they built this as a pea as a system

00:00:48,300 --> 00:00:54,050
to create to do both building and

00:00:50,309 --> 00:00:57,840
delivery of software onto a system and

00:00:54,050 --> 00:01:01,800
it was a very ambitious project it did a

00:00:57,840 --> 00:01:03,989
lot of things and really it was that

00:01:01,800 --> 00:01:07,350
hammer right there

00:01:03,989 --> 00:01:09,630
it is a and of course when you have a

00:01:07,350 --> 00:01:12,119
hammer how does that expression go again

00:01:09,630 --> 00:01:14,850
have a hammer oh yeah everything looks

00:01:12,119 --> 00:01:17,670
like a nail so over at the so as we

00:01:14,850 --> 00:01:20,100
progressed our Kim grew a lot of

00:01:17,670 --> 00:01:23,460
additional features it became more and

00:01:20,100 --> 00:01:29,340
more complicated and like I said it

00:01:23,460 --> 00:01:31,710
pretty much ended up like that hammer so

00:01:29,340 --> 00:01:33,780
once we once the RPM was developed we

00:01:31,710 --> 00:01:38,070
say we started to build Red Hat Linux

00:01:33,780 --> 00:01:39,630
and then later Fedora using rpms it made

00:01:38,070 --> 00:01:41,610
sense it did a lot of cool things it had

00:01:39,630 --> 00:01:43,229
the it had the ability to put just about

00:01:41,610 --> 00:01:45,450
anything on the system that he wanted it

00:01:43,229 --> 00:01:46,590
had the ability to configure it when she

00:01:45,450 --> 00:01:50,220
had finished installing it we'll get

00:01:46,590 --> 00:01:52,079
back to that and generally it did a lot

00:01:50,220 --> 00:01:57,240
that other packaging formats of the era

00:01:52,079 --> 00:01:59,810
really couldn't do and as it grew and as

00:01:57,240 --> 00:02:02,009
we built Red Hat Linux and Fedora Linux

00:01:59,810 --> 00:02:04,020
things started to get more complicated

00:02:02,009 --> 00:02:05,610
we started to add a few more packages we

00:02:04,020 --> 00:02:07,320
had we started to build an entire really

00:02:05,610 --> 00:02:08,970
build an entire distribution around this

00:02:07,320 --> 00:02:11,910
thing a lot of people were getting

00:02:08,970 --> 00:02:13,349
involved they were excited and suddenly

00:02:11,910 --> 00:02:13,950
we had a little we had divergence

00:02:13,349 --> 00:02:16,380
starting to half

00:02:13,950 --> 00:02:18,330
like because because rpm is so powerful

00:02:16,380 --> 00:02:19,830
you can do things in so many many

00:02:18,330 --> 00:02:24,000
different ways people were doing things

00:02:19,830 --> 00:02:27,450
in many different ways so we had to

00:02:24,000 --> 00:02:30,330
solve that problem so we built the

00:02:27,450 --> 00:02:33,209
Fedora packaging committee and we set up

00:02:30,330 --> 00:02:34,819
a series of guidelines for how if or how

00:02:33,209 --> 00:02:39,180
you can do things one could even say

00:02:34,819 --> 00:02:41,040
rules we can't expect everyone to do

00:02:39,180 --> 00:02:43,050
exactly the same good job so let's take

00:02:41,040 --> 00:02:44,190
let's examine the set of packages we've

00:02:43,050 --> 00:02:45,599
got figure out which ones are doing

00:02:44,190 --> 00:02:47,819
things the right way and make them into

00:02:45,599 --> 00:02:50,100
a set of guidelines and then publish

00:02:47,819 --> 00:02:51,980
those and then so people can ignore them

00:02:50,100 --> 00:02:53,190
and continue to do things their own way

00:02:51,980 --> 00:02:55,799
wait

00:02:53,190 --> 00:02:57,090
no so that we have we have a series of

00:02:55,799 --> 00:02:58,650
checks on these things so when new

00:02:57,090 --> 00:03:02,100
packages come in we verify that they are

00:02:58,650 --> 00:03:03,600
be that they have been written in you

00:03:02,100 --> 00:03:07,860
know according to these guidelines and

00:03:03,600 --> 00:03:10,500
it was good for many many years Fedora

00:03:07,860 --> 00:03:13,549
has actually actually built and released

00:03:10,500 --> 00:03:18,420
this is this is a thing that happened

00:03:13,549 --> 00:03:19,650
contrary to all realistic expectation we

00:03:18,420 --> 00:03:22,709
have actually built something that is

00:03:19,650 --> 00:03:23,880
good and that people like we should we

00:03:22,709 --> 00:03:29,420
want to maintain this level of

00:03:23,880 --> 00:03:29,420
excellence so what happened next

00:03:30,079 --> 00:03:36,950
next we started running into a few of

00:03:33,120 --> 00:03:41,150
the places where rpm was not

00:03:36,950 --> 00:03:44,190
particularly designed for for one part

00:03:41,150 --> 00:03:50,040
exponential expansion of the number of

00:03:44,190 --> 00:03:52,230
rpms in our in fedora in fedora we have

00:03:50,040 --> 00:03:55,709
grown by leaps and bounds as of this

00:03:52,230 --> 00:03:57,840
morning there are 19 thousand four

00:03:55,709 --> 00:04:00,540
hundred seventy packages in the Fedora

00:03:57,840 --> 00:04:04,519
project I'm gonna repeat that number

00:04:00,540 --> 00:04:08,280
because it threw me back a little bit

00:04:04,519 --> 00:04:10,470
source there are nineteen thousand four

00:04:08,280 --> 00:04:13,220
hundred seventy source packages in the

00:04:10,470 --> 00:04:15,389
Fedora project today

00:04:13,220 --> 00:04:18,000
yeah binaries I'm not even bothering

00:04:15,389 --> 00:04:20,030
account especially since half of them

00:04:18,000 --> 00:04:24,110
are tech life

00:04:20,030 --> 00:04:27,320
and more of them are being reviewed

00:04:24,110 --> 00:04:30,410
every day on average for the last staff

00:04:27,320 --> 00:04:33,830
for Fedora releases we have added 500

00:04:30,410 --> 00:04:39,010
new packages to the project that's 500

00:04:33,830 --> 00:04:41,450
new packages in the last two years and

00:04:39,010 --> 00:04:43,160
amazingly enough thanks to all those

00:04:41,450 --> 00:04:45,980
guidelines we built most of them are

00:04:43,160 --> 00:04:47,510
high quality the ones that aren't a lot

00:04:45,980 --> 00:04:49,250
of a lot of the time are ones that have

00:04:47,510 --> 00:04:51,050
just essentially bit rotted since they

00:04:49,250 --> 00:04:53,060
were reviewed and there's there have

00:04:51,050 --> 00:04:54,650
been other talks and other process other

00:04:53,060 --> 00:04:58,190
proposals on how to deal with that bit

00:04:54,650 --> 00:05:01,419
rot but for the most part we've done

00:04:58,190 --> 00:05:04,610
pretty well considering the fact that

00:05:01,419 --> 00:05:09,230
this this this curve has just continued

00:05:04,610 --> 00:05:14,210
to grow at a faster rate every year it's

00:05:09,230 --> 00:05:16,030
kind of ridiculous but it's still mostly

00:05:14,210 --> 00:05:22,450
working so that's not terrible but then

00:05:16,030 --> 00:05:27,830
then the next big thing happened oh wait

00:05:22,450 --> 00:05:29,440
now we have virtualization and while we

00:05:27,830 --> 00:05:31,700
were adapting to virtualization

00:05:29,440 --> 00:05:33,380
containers arrived because we still

00:05:31,700 --> 00:05:35,600
hadn't we really hadn't completed that

00:05:33,380 --> 00:05:37,220
that that pivot into virtualization in

00:05:35,600 --> 00:05:39,410
Fedora we were a little behind the curve

00:05:37,220 --> 00:05:42,200
on that we had we hadn't really figured

00:05:39,410 --> 00:05:45,560
out entirely how to play in that space

00:05:42,200 --> 00:05:47,660
but the real big change there was that

00:05:45,560 --> 00:05:49,760
now we aren't thinking entirely of an

00:05:47,660 --> 00:05:52,850
operating system running on a piece of a

00:05:49,760 --> 00:05:54,590
single piece of bare iron we're talking

00:05:52,850 --> 00:05:56,690
about density and data centers we're

00:05:54,590 --> 00:05:59,450
talking about instead of the history

00:05:56,690 --> 00:06:01,640
where you would have a couple of really

00:05:59,450 --> 00:06:04,280
beefy machines that you would care for

00:06:01,640 --> 00:06:05,479
and feed and make sure they were AB make

00:06:04,280 --> 00:06:09,250
sure they had everything they were they

00:06:05,479 --> 00:06:13,000
wanted now all of a sudden you've got

00:06:09,250 --> 00:06:15,440
virtualization and you've got 300

00:06:13,000 --> 00:06:17,330
disposable machines that are all doing

00:06:15,440 --> 00:06:20,050
the same task that if one of them is not

00:06:17,330 --> 00:06:22,330
malfunction you yank it out of the rack

00:06:20,050 --> 00:06:25,570
effectively or the virtual rack and you

00:06:22,330 --> 00:06:28,520
throw up another one and containers

00:06:25,570 --> 00:06:31,010
increases this even further because you

00:06:28,520 --> 00:06:32,320
may have you may have dozens of

00:06:31,010 --> 00:06:37,300
containers running on any

00:06:32,320 --> 00:06:38,710
on any given virtual host now we have an

00:06:37,300 --> 00:06:41,980
entirely different problem we have

00:06:38,710 --> 00:06:44,230
machines that we want to deploy fast we

00:06:41,980 --> 00:06:46,570
have machines that we don't really need

00:06:44,230 --> 00:06:48,550
to care so much about their lifecycle

00:06:46,570 --> 00:06:49,660
because they're disposable you want

00:06:48,550 --> 00:06:51,520
something you want to change their life

00:06:49,660 --> 00:06:55,980
cycle you put it you pull up another one

00:06:51,520 --> 00:06:58,390
and you should shut this one down and

00:06:55,980 --> 00:06:59,890
what we really need to do there is we

00:06:58,390 --> 00:07:02,110
need to focus on figuring out okay so

00:06:59,890 --> 00:07:04,150
how do we make reusable images how do we

00:07:02,110 --> 00:07:07,060
create these virtual machines and these

00:07:04,150 --> 00:07:09,490
containers in such a way that we can

00:07:07,060 --> 00:07:12,670
rapidly throw a hundred of them out

00:07:09,490 --> 00:07:14,320
there all at once and the way people

00:07:12,670 --> 00:07:16,780
would do this with virtual machines is

00:07:14,320 --> 00:07:19,390
you know they'd stand up a VM on a

00:07:16,780 --> 00:07:23,350
desktop and VMware or KVM or a

00:07:19,390 --> 00:07:24,370
VirtualBox or what-have-you and one

00:07:23,350 --> 00:07:25,540
person would go through and they would

00:07:24,370 --> 00:07:27,040
install absolutely everything they

00:07:25,540 --> 00:07:29,440
needed they do they'd run it they'd run

00:07:27,040 --> 00:07:31,840
their their tests effectively as a

00:07:29,440 --> 00:07:35,920
private Kauai environment or a staging

00:07:31,840 --> 00:07:37,930
environment then they would manually or

00:07:35,920 --> 00:07:40,330
later we had it we added some tools to

00:07:37,930 --> 00:07:42,520
do this go through and rip out anything

00:07:40,330 --> 00:07:45,340
that it was necessary that was specific

00:07:42,520 --> 00:07:48,130
to that machine things like the host ID

00:07:45,340 --> 00:07:51,100
things like you know various places that

00:07:48,130 --> 00:07:52,840
had you you IDs various places that had

00:07:51,100 --> 00:07:54,820
created SSL certificates by

00:07:52,840 --> 00:07:57,730
automatically to talk to it between

00:07:54,820 --> 00:07:59,950
services and they would have to go and

00:07:57,730 --> 00:08:02,230
rip these out keeping notes on

00:07:59,950 --> 00:08:03,370
everything they did write scripts so

00:08:02,230 --> 00:08:05,290
that when they deployed the new machine

00:08:03,370 --> 00:08:13,920
they could put - all those things back

00:08:05,290 --> 00:08:17,500
in so we what we were basically doing is

00:08:13,920 --> 00:08:19,480
passing on all of that effort to the

00:08:17,500 --> 00:08:21,340
users we were giving them a whole

00:08:19,480 --> 00:08:22,450
operating system but they didn't want a

00:08:21,340 --> 00:08:26,190
whole operating system they wanted a

00:08:22,450 --> 00:08:28,600
template for an operating system and

00:08:26,190 --> 00:08:30,550
pushing those pushing those things onto

00:08:28,600 --> 00:08:33,099
the user wasn't a particularly friendly

00:08:30,550 --> 00:08:35,290
thing to do and we won big one of the

00:08:33,099 --> 00:08:36,820
examples I like to use a lot mostly

00:08:35,290 --> 00:08:39,790
because it comes up at least I think

00:08:36,820 --> 00:08:42,190
when will did his research I came up at

00:08:39,790 --> 00:08:44,229
least 16 times in the set of packages in

00:08:42,190 --> 00:08:45,670
rel and I can only imagine how many

00:08:44,229 --> 00:08:47,920
packages it shows up in

00:08:45,670 --> 00:08:51,700
was the creation of SSL Certificates on

00:08:47,920 --> 00:08:54,310
during in an RPM spec file let me repeat

00:08:51,700 --> 00:08:59,650
that people are creating self-signed

00:08:54,310 --> 00:09:05,040
certificates in RPM percent post that's

00:08:59,650 --> 00:09:09,130
not good for a variety of reasons and

00:09:05,040 --> 00:09:10,300
for one it's if you're generating if

00:09:09,130 --> 00:09:12,790
you're trying to generate a gold image

00:09:10,300 --> 00:09:15,460
for something like OS tree or create a

00:09:12,790 --> 00:09:16,830
queue just push out a queue cow for for

00:09:15,460 --> 00:09:19,540
a cloud image and things like that

00:09:16,830 --> 00:09:20,890
you're generating the RPM while you're

00:09:19,540 --> 00:09:23,800
installing the RPM once on a

00:09:20,890 --> 00:09:25,360
provisioning compose machine and then

00:09:23,800 --> 00:09:26,740
it's results just get put out pushed out

00:09:25,360 --> 00:09:29,500
to every machine and now suddenly you've

00:09:26,740 --> 00:09:30,580
got five thousand machines in a public

00:09:29,500 --> 00:09:34,780
cloud somewhere they're all have the

00:09:30,580 --> 00:09:37,390
exact same SSL certificate that match it

00:09:34,780 --> 00:09:39,700
that doesn't match their hostname that's

00:09:37,390 --> 00:09:42,010
not gonna work furthermore it's

00:09:39,700 --> 00:09:45,070
additional effort as if any of you went

00:09:42,010 --> 00:09:46,450
to Will's talk yet two days ago it's a

00:09:45,070 --> 00:09:48,730
whole bunch of additional file

00:09:46,450 --> 00:09:50,530
operations and a and F syncs and things

00:09:48,730 --> 00:09:51,910
in the process that just simply don't

00:09:50,530 --> 00:09:58,570
need to be there and slow everything

00:09:51,910 --> 00:10:01,800
down so how do we deal with the problem

00:09:58,570 --> 00:10:01,800
how do we make those things go away

00:10:02,610 --> 00:10:10,420
first we have to we have to eradicate

00:10:07,380 --> 00:10:12,610
the scripts in our p.m. percent post we

00:10:10,420 --> 00:10:15,910
have and in % post on and ever and

00:10:12,610 --> 00:10:17,580
wherever and frankly if I would if I can

00:10:15,910 --> 00:10:19,600
be so bold I think we actually should

00:10:17,580 --> 00:10:23,110
release in our version of rpm that

00:10:19,600 --> 00:10:26,640
doesn't that stops parsing scriptlets we

00:10:23,110 --> 00:10:29,890
take that out of the system entirely

00:10:26,640 --> 00:10:32,440
what we can do now that we have system D

00:10:29,890 --> 00:10:34,720
we have we have the ability to create

00:10:32,440 --> 00:10:38,380
new system D service units and mark them

00:10:34,720 --> 00:10:40,650
as required in order to start some start

00:10:38,380 --> 00:10:43,210
other known services so I'll take the

00:10:40,650 --> 00:10:44,560
Apache example or the cockpit example

00:10:43,210 --> 00:10:47,740
where they need to generate as an SSL

00:10:44,560 --> 00:10:49,840
certificate instead of generating

00:10:47,740 --> 00:10:51,580
necessary to forget in their % post and

00:10:49,840 --> 00:10:53,620
those are bad examples cuz both of those

00:10:51,580 --> 00:10:55,360
have been fixed but instead of

00:10:53,620 --> 00:10:58,030
generating in art because and SSL so to

00:10:55,360 --> 00:10:59,420
forget when you install the package we

00:10:58,030 --> 00:11:03,140
instead drop it

00:10:59,420 --> 00:11:06,620
d snippet into into the into the system

00:11:03,140 --> 00:11:09,770
so that when the HTTP service is

00:11:06,620 --> 00:11:12,380
activated or either bike by socket

00:11:09,770 --> 00:11:16,210
activation or service activation it

00:11:12,380 --> 00:11:19,250
first it invokes a a system to unit file

00:11:16,210 --> 00:11:21,770
that will check to see hey do those

00:11:19,250 --> 00:11:24,050
files already exist if they do yeah I

00:11:21,770 --> 00:11:26,150
pass Exede and you get on with your life

00:11:24,050 --> 00:11:28,840
if they do not you go through a script

00:11:26,150 --> 00:11:32,210
and generate them for the first time

00:11:28,840 --> 00:11:33,710
this means that we can push off the

00:11:32,210 --> 00:11:37,130
creation of any of those things that are

00:11:33,710 --> 00:11:38,990
happening in in rpm scriptlets to either

00:11:37,130 --> 00:11:40,550
the first boot or the first boot after

00:11:38,990 --> 00:11:43,730
you wipe all the after you run verts

00:11:40,550 --> 00:11:46,610
sysprep we just we pull we remove those

00:11:43,730 --> 00:11:48,260
things from the disk and we do a system

00:11:46,610 --> 00:11:54,410
to unit file that does condition path

00:11:48,260 --> 00:12:01,100
exists not you user or that's a yet see

00:11:54,410 --> 00:12:02,330
my my my service as a cell dot cert so

00:12:01,100 --> 00:12:04,160
then we generated so we can generate

00:12:02,330 --> 00:12:05,600
those at first boot or on follow on

00:12:04,160 --> 00:12:07,520
subsequent restarts of the service if

00:12:05,600 --> 00:12:10,370
you forever and have any reason needed

00:12:07,520 --> 00:12:12,890
to do that in there out of the compose

00:12:10,370 --> 00:12:14,150
process they're in a they're in a space

00:12:12,890 --> 00:12:15,590
in the installed system where they can

00:12:14,150 --> 00:12:17,570
aware they can be constrained by

00:12:15,590 --> 00:12:19,820
something like selinux so we can also we

00:12:17,570 --> 00:12:21,740
can do a lot of more protection of the

00:12:19,820 --> 00:12:24,260
end-user system because one of the

00:12:21,740 --> 00:12:26,570
things that a lot of customers and users

00:12:24,260 --> 00:12:28,940
of fedora and rel are concerned about

00:12:26,570 --> 00:12:30,920
with rpm scriptlets is they basically

00:12:28,940 --> 00:12:34,130
especially when the running anaconda

00:12:30,920 --> 00:12:36,170
they have no restrictions they operate

00:12:34,130 --> 00:12:37,910
as route and you have to trust that

00:12:36,170 --> 00:12:42,500
somebody has been keeping an eye on what

00:12:37,910 --> 00:12:44,780
has gone into those scriptlets if you if

00:12:42,500 --> 00:12:46,400
we move those into the system with with

00:12:44,780 --> 00:12:48,140
selinux protections we can ensure that

00:12:46,400 --> 00:12:50,330
note that even if somebody managed

00:12:48,140 --> 00:12:51,250
managed to slip a little something extra

00:12:50,330 --> 00:12:53,150
into that into that

00:12:51,250 --> 00:12:57,320
selinux is probably gonna step in and

00:12:53,150 --> 00:12:59,270
say yeah no no your uh you know your

00:12:57,320 --> 00:13:01,010
video game does not have permission it

00:12:59,270 --> 00:13:03,020
have permission to read and write the to

00:13:01,010 --> 00:13:05,900
the Apache directory and things like

00:13:03,020 --> 00:13:09,950
that so we got to get more security out

00:13:05,900 --> 00:13:13,370
of this we avoid we avoid issues with in

00:13:09,950 --> 00:13:16,520
with container and VM generation

00:13:13,370 --> 00:13:22,670
and generally a and generally just

00:13:16,520 --> 00:13:26,000
improve the situation all around so what

00:13:22,670 --> 00:13:27,650
we need to do next is analyze all of the

00:13:26,000 --> 00:13:29,450
packages in fedora and find out which

00:13:27,650 --> 00:13:32,480
ones need to be adapted to use this new

00:13:29,450 --> 00:13:34,430
approach as I mentioned will has done a

00:13:32,480 --> 00:13:37,640
really good job of doing going through

00:13:34,430 --> 00:13:39,620
this on rel I would like to believe that

00:13:37,640 --> 00:13:41,060
he is also planning to do this on fedora

00:13:39,620 --> 00:13:42,710
but if he is not I would like to get his

00:13:41,060 --> 00:13:47,150
scripts and getting to work on him as

00:13:42,710 --> 00:13:55,100
well yes we should absolutely team up

00:13:47,150 --> 00:13:56,810
well thank you will will would very much

00:13:55,100 --> 00:13:59,150
prefer to team up because as he phrases

00:13:56,810 --> 00:14:02,180
it his liver would not survive it and I

00:13:59,150 --> 00:14:04,220
can see how that could be a case we do

00:14:02,180 --> 00:14:05,779
expect in the next few weeks to a couple

00:14:04,220 --> 00:14:07,520
of months to have a pretty clear picture

00:14:05,779 --> 00:14:09,890
of what the affected packages are will

00:14:07,520 --> 00:14:13,190
be and I will probably go through the

00:14:09,890 --> 00:14:14,630
fedora mess bug filing process ideally

00:14:13,190 --> 00:14:18,380
with submitting patches submitting

00:14:14,630 --> 00:14:20,230
patches so that should that should allow

00:14:18,380 --> 00:14:26,360
us to fix those fairly easily

00:14:20,230 --> 00:14:31,070
so in summary keep your rpms out of the

00:14:26,360 --> 00:14:33,050
light do not get your rpms wet do not

00:14:31,070 --> 00:14:36,020
feed your rpms after midnight I ask I

00:14:33,050 --> 00:14:37,220
cannot please stop working stop working

00:14:36,020 --> 00:14:39,320
on rpms when you're tired

00:14:37,220 --> 00:14:40,760
that one that one is all only partially

00:14:39,320 --> 00:14:41,060
a joke stop working on rpms when you're

00:14:40,760 --> 00:14:46,180
tired

00:14:41,060 --> 00:14:48,800
that is how bit rots starts I cannot I

00:14:46,180 --> 00:14:50,960
was a bit of an actor I was going

00:14:48,800 --> 00:14:53,150
through some package the other day

00:14:50,960 --> 00:14:55,160
because that I was working with and

00:14:53,150 --> 00:14:56,660
there were actually code there were

00:14:55,160 --> 00:15:00,290
actually comments rather in the spec

00:14:56,660 --> 00:15:01,700
file that I I had to go back and get

00:15:00,290 --> 00:15:04,459
history to find out why it was there

00:15:01,700 --> 00:15:05,830
because it just said I removed this this

00:15:04,459 --> 00:15:07,820
section because I realized I had

00:15:05,830 --> 00:15:10,250
realized that when I had written it I

00:15:07,820 --> 00:15:12,970
was too drunk and too tired to admit any

00:15:10,250 --> 00:15:18,950
sense out of it that comment remained

00:15:12,970 --> 00:15:21,490
but not the context and that was yeah

00:15:18,950 --> 00:15:23,570
and when I did go back and look at it

00:15:21,490 --> 00:15:27,550
yes this person was definitely too

00:15:23,570 --> 00:15:27,550
drunkard and too tired to have written

00:15:28,180 --> 00:15:34,400
but in all seriousness the package

00:15:32,780 --> 00:15:36,740
guidelines have been written and updated

00:15:34,400 --> 00:15:39,050
to support this if you have any packages

00:15:36,740 --> 00:15:42,370
that work that haven't do any kind of

00:15:39,050 --> 00:15:47,120
system specific initialization you know

00:15:42,370 --> 00:15:49,070
scriptlet please review the review the

00:15:47,120 --> 00:15:51,080
document here which describes exactly

00:15:49,070 --> 00:15:54,830
how to write that service unit that I

00:15:51,080 --> 00:15:58,760
was just I was talking about in many

00:15:54,830 --> 00:16:00,290
cases exhaustive detail so it really

00:15:58,760 --> 00:16:02,450
should be an easy task and if you can

00:16:00,290 --> 00:16:04,970
get to that before we get to you we get

00:16:02,450 --> 00:16:06,770
to you I will have a gold star for you I

00:16:04,970 --> 00:16:08,090
don't have any right now and I don't

00:16:06,770 --> 00:16:10,360
actually expect to give anyone I'm out

00:16:08,090 --> 00:16:13,610
but if I but I will go and buy them and

00:16:10,360 --> 00:16:19,580
and mail one to you if if you beat us to

00:16:13,610 --> 00:16:21,200
this I rattled through that a bit faster

00:16:19,580 --> 00:16:26,380
than I it intended so I've got a full

00:16:21,200 --> 00:16:26,380
ten minutes for questions Sally

00:16:38,190 --> 00:16:45,970
okay so so the question is is there an

00:16:43,570 --> 00:16:47,800
impact on startup time to have these new

00:16:45,970 --> 00:16:49,510
units and whether or not are they

00:16:47,800 --> 00:16:51,970
removed after they have fired and or not

00:16:49,510 --> 00:16:53,440
so first of all no they will not be

00:16:51,970 --> 00:16:55,120
removed after they fire because the

00:16:53,440 --> 00:16:58,570
whole point is that we need we do need

00:16:55,120 --> 00:16:59,650
to be able to tolerate removal of the of

00:16:58,570 --> 00:17:01,150
the files that a factor that are

00:16:59,650 --> 00:17:03,460
affected because you may be in the

00:17:01,150 --> 00:17:05,590
process of generating an image wipe them

00:17:03,460 --> 00:17:07,450
copy the image around and then we want

00:17:05,590 --> 00:17:10,480
to make sure they continue to run the

00:17:07,450 --> 00:17:16,210
startup impact when using the the system

00:17:10,480 --> 00:17:19,810
D conditionals is it has not been

00:17:16,210 --> 00:17:22,990
measured at scale but on a few packages

00:17:19,810 --> 00:17:24,910
has been measured in the nanoseconds of

00:17:22,990 --> 00:17:27,970
additional time not the not even the

00:17:24,910 --> 00:17:29,590
microseconds yeah because the system

00:17:27,970 --> 00:17:33,600
these conditional checks are pretty

00:17:29,590 --> 00:17:35,800
efficient and if that became it honestly

00:17:33,600 --> 00:17:37,210
that would be the optimization point if

00:17:35,800 --> 00:17:41,010
we needed to it wouldn't it would be

00:17:37,210 --> 00:17:41,010
more valuable than removing the unit's

00:17:44,370 --> 00:17:49,170
further questions Mike

00:17:59,170 --> 00:18:02,310
I'm sorry good

00:18:08,280 --> 00:18:11,030
okay

00:18:17,400 --> 00:18:22,420
okay so the question is do we have to

00:18:20,950 --> 00:18:23,860
tell people while they're creating the

00:18:22,420 --> 00:18:25,870
gold masters not to create you not to

00:18:23,860 --> 00:18:28,000
start these services before they create

00:18:25,870 --> 00:18:29,650
the master and the answer is no they can

00:18:28,000 --> 00:18:33,250
and should because they're gonna need to

00:18:29,650 --> 00:18:35,410
test the things work what we have is we

00:18:33,250 --> 00:18:37,420
have tools like vert sysprep whose job

00:18:35,410 --> 00:18:41,050
it is to go and to know which things are

00:18:37,420 --> 00:18:44,500
potentially potentially system-specific

00:18:41,050 --> 00:18:46,360
and to wipe them before so you would do

00:18:44,500 --> 00:18:49,870
vert sysprep shut the Machine down clone

00:18:46,360 --> 00:18:51,520
the eye image we need we need to make

00:18:49,870 --> 00:18:52,930
sure that we coordinate with the verts

00:18:51,520 --> 00:18:54,640
just for people and if there's if there

00:18:52,930 --> 00:18:56,590
are other tools like that out there I

00:18:54,640 --> 00:18:57,880
mean that's the best supported but if

00:18:56,590 --> 00:18:59,230
there are other tools out there like

00:18:57,880 --> 00:19:01,240
that we need to have documentation that

00:18:59,230 --> 00:19:03,580
says here are the list of known things

00:19:01,240 --> 00:19:05,680
that we want to be able to remove I had

00:19:03,580 --> 00:19:08,320
a conversation with will yesterday where

00:19:05,680 --> 00:19:10,420
we may want to have that we may want to

00:19:08,320 --> 00:19:12,640
find a way to make language in the ass

00:19:10,420 --> 00:19:15,070
are in the RPM metadata that allows us

00:19:12,640 --> 00:19:18,760
to interrogate that rather than have to

00:19:15,070 --> 00:19:20,650
maintain a separate list and then and

00:19:18,760 --> 00:19:25,900
that's that's an opportunity for an

00:19:20,650 --> 00:19:28,600
enhancement here right now versus prep

00:19:25,900 --> 00:19:30,190
is pretty good it knows a awful lot of

00:19:28,600 --> 00:19:31,780
these things including a whole bunch

00:19:30,190 --> 00:19:34,360
that aren't even now that are in

00:19:31,780 --> 00:19:37,210
proprietary third-party code out there

00:19:34,360 --> 00:19:39,120
you know comma a comma a customer

00:19:37,210 --> 00:19:40,840
applications and things like that so

00:19:39,120 --> 00:19:43,630
we're in pretty good shape for that

00:19:40,840 --> 00:19:45,340
right now and we until we have that kind

00:19:43,630 --> 00:19:48,510
of introspection data we'd probably may

00:19:45,340 --> 00:19:51,370
keep maintaining though the whitelist

00:19:48,510 --> 00:19:53,730
I'd have to volunteer volunteer as part

00:19:51,370 --> 00:19:53,730
of this process

00:19:55,890 --> 00:20:00,000
does that answer your questions okay you

00:19:58,679 --> 00:20:02,840
you still looked like you where we're

00:20:00,000 --> 00:20:02,840
about to ask another so

00:20:18,899 --> 00:20:22,960
right so as far the question was in

00:20:21,370 --> 00:20:26,700
terms of creating a golden master what

00:20:22,960 --> 00:20:26,700
other settings can enjoy could interfere

00:20:28,049 --> 00:20:34,029
you okay and you know what if you wrote

00:20:32,440 --> 00:20:39,220
certain settings in and your kick-start

00:20:34,029 --> 00:20:44,649
and whatnot we probably can't solve that

00:20:39,220 --> 00:20:46,600
perfectly if you're you shouldn't it the

00:20:44,649 --> 00:20:48,129
reality is you probably shouldn't be

00:20:46,600 --> 00:20:49,480
doing that in kick-start if you can help

00:20:48,129 --> 00:20:51,909
it unless you're you shouldn't be doing

00:20:49,480 --> 00:20:53,710
anything in kickstart that isn't that

00:20:51,909 --> 00:20:55,480
you don't expect to be usable for all

00:20:53,710 --> 00:20:57,159
deployment all parts of your deployment

00:20:55,480 --> 00:20:58,629
if it's and if it's system specific it

00:20:57,159 --> 00:21:00,190
should be done either if it's

00:20:58,629 --> 00:21:01,750
auto-generated we've done with this

00:21:00,190 --> 00:21:02,649
mechanism if it's not auto-generated it

00:21:01,750 --> 00:21:04,830
should probably be put in by

00:21:02,649 --> 00:21:07,120
configuration management software not by

00:21:04,830 --> 00:21:11,320
we don't really need to solve that

00:21:07,120 --> 00:21:13,899
that's a solved problem so I would just

00:21:11,320 --> 00:21:15,250
say that our statement is don't do that

00:21:13,899 --> 00:21:18,309
in kickstart it's going to occur it's

00:21:15,250 --> 00:21:19,750
going to bite you I think I think people

00:21:18,309 --> 00:21:25,470
figured that one out on their own now

00:21:19,750 --> 00:21:25,470
for the most part Mike again

00:21:27,230 --> 00:21:33,559
I would the question is are we trying to

00:21:31,730 --> 00:21:36,500
get rid of rpm scriptlets entirely or

00:21:33,559 --> 00:21:38,330
just the system specific stuff the

00:21:36,500 --> 00:21:39,830
purpose of this specific talk is to get

00:21:38,330 --> 00:21:42,169
rid of the system specific time this

00:21:39,830 --> 00:21:43,880
stuff this is one step towards the EDD

00:21:42,169 --> 00:21:45,470
towards a future in which we can never

00:21:43,880 --> 00:21:48,380
eliminate scrubs scriptlets entirely

00:21:45,470 --> 00:21:51,650
because really they are a technology

00:21:48,380 --> 00:21:53,809
that was powerful and useful when they

00:21:51,650 --> 00:21:55,610
were invented and have introduced so

00:21:53,809 --> 00:21:57,230
many problems that they that we need to

00:21:55,610 --> 00:21:59,350
find us a migration strategy away from

00:21:57,230 --> 00:21:59,350
them

00:22:06,110 --> 00:22:09,470
if that wasn't if that yes if that

00:22:07,820 --> 00:22:11,480
wasn't clear the answer is yes we should

00:22:09,470 --> 00:22:13,400
get rid of scriptlets entirely we do not

00:22:11,480 --> 00:22:16,430
need to do that as a single action but

00:22:13,400 --> 00:22:17,990
we need to we need to migrate each again

00:22:16,430 --> 00:22:19,040
wills talked earlier in the week and I

00:22:17,990 --> 00:22:20,390
said if you haven't seen it I suggest

00:22:19,040 --> 00:22:22,820
you go watch the recording once that's

00:22:20,390 --> 00:22:27,890
available it talks a bit more about how

00:22:22,820 --> 00:22:31,760
to eliminate some of the others I he

00:22:27,890 --> 00:22:34,040
found six specific things that I covered

00:22:31,760 --> 00:22:36,530
99% of all script uses scribbling usage

00:22:34,040 --> 00:22:40,100
and at least five of them would be

00:22:36,530 --> 00:22:41,750
really easy not to do in scriptlets the

00:22:40,100 --> 00:22:48,170
last one the the miscellaneous category

00:22:41,750 --> 00:22:50,120
is a bit more trip effort I don't

00:22:48,170 --> 00:22:52,160
actually don't think that one would be

00:22:50,120 --> 00:22:53,420
that hard I think all of those are

00:22:52,160 --> 00:22:56,770
possible to pull out of the script

00:22:53,420 --> 00:22:59,420
that's relatively easily and well

00:22:56,770 --> 00:23:01,310
relatively in the couple of a yeah the

00:22:59,420 --> 00:23:04,720
next few Fedora releases scheduled not

00:23:01,310 --> 00:23:04,720
like the next few efforts

00:23:16,040 --> 00:23:20,280
right so Willis Willis reminding me to

00:23:18,960 --> 00:23:24,240
make and make it clear that things like

00:23:20,280 --> 00:23:25,920
caches and catalogs are complicated and

00:23:24,240 --> 00:23:28,050
will probably require a great deal of

00:23:25,920 --> 00:23:31,940
thought and I completely agree that's

00:23:28,050 --> 00:23:31,940
part of why it's not part of this talk

00:23:32,150 --> 00:23:38,640
but no I am firmly in the camp of hockey

00:23:35,940 --> 00:23:42,030
I'm script let's need to need to go the

00:23:38,640 --> 00:23:49,380
way of I don't let's say Linux let's say

00:23:42,030 --> 00:23:51,530
Unix sure that's he an abductee we'll go

00:23:49,380 --> 00:23:51,530
with that

00:23:57,380 --> 00:24:02,940
our other distributions trying to get

00:23:59,850 --> 00:24:05,990
rid of their rpm scriptlets I don't have

00:24:02,940 --> 00:24:09,570
at my fingertips that information

00:24:05,990 --> 00:24:11,100
definitely seems to be still pretty bent

00:24:09,570 --> 00:24:14,160
on maintaining Deb Kampf

00:24:11,100 --> 00:24:17,550
for whatever reason I can't speak to the

00:24:14,160 --> 00:24:20,010
other distributions I I suspect that the

00:24:17,550 --> 00:24:21,980
core OS is and the you know the other

00:24:20,010 --> 00:24:24,090
minimized container for hood derived

00:24:21,980 --> 00:24:33,810
distros are probably looking at this as

00:24:24,090 --> 00:24:35,250
well as a counterpoint gentoos entire

00:24:33,810 --> 00:24:40,230
package management system is a

00:24:35,250 --> 00:24:50,430
collection of scripts I am pretty sure I

00:24:40,230 --> 00:24:54,300
don't care I don't I don't see I don't

00:24:50,430 --> 00:24:56,010
really see what if what the other

00:24:54,300 --> 00:24:58,620
distributions are doing is less

00:24:56,010 --> 00:25:00,120
interesting than whether or not they are

00:24:58,620 --> 00:25:02,190
coming up with clever ways to do the

00:25:00,120 --> 00:25:03,810
things I'm suggesting if we cut if some

00:25:02,190 --> 00:25:07,050
of the you know I will keep my eyes open

00:25:03,810 --> 00:25:10,200
but what little bit of what little I've

00:25:07,050 --> 00:25:14,400
seen of this like Mandrake for example

00:25:10,200 --> 00:25:17,280
has basically just copied this page this

00:25:14,400 --> 00:25:18,870
page into their guidelines so I think

00:25:17,280 --> 00:25:21,330
they're I think the other distributions

00:25:18,870 --> 00:25:23,460
are looking to us to solve this and

00:25:21,330 --> 00:25:26,540
we'll probably adopt it once we've

00:25:23,460 --> 00:25:29,520
proven that it doesn't break everything

00:25:26,540 --> 00:25:32,060
which is pretty much par for the Fedora

00:25:29,520 --> 00:25:32,060
course actually

00:25:33,099 --> 00:25:39,799
I've got three more minutes so at the

00:25:38,809 --> 00:25:44,869
rate we're currently going I've had time

00:25:39,799 --> 00:25:46,629
for one more question or else I can let

00:25:44,869 --> 00:25:50,200
you go to lunch three minutes early

00:25:46,629 --> 00:25:50,200

YouTube URL: https://www.youtube.com/watch?v=HNchn2sLKBg


