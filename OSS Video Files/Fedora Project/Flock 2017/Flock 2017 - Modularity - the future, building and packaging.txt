Title: Flock 2017 - Modularity - the future, building and packaging
Publication date: 2017-10-20
Playlist: Flock 2017
Description: 
	Thursday August 31, 2017 2:00pm - 3:00pm
@Orleans A + B
Talk: Modularity - the future, building and packaging
Presenter: Ralph Bean

Description:
Collection of three short Modularity talks:

1/ Modularity Today & in the future! — Langdon White, Adam Samalik
We have now released the preview of the Modular Distro. We plan to release the Server Edition fully modular. Users can elect to take advantage of these components or use the system(s) in a more traditional way. So.. what's next?

Well, as many of you know, we still have a very large OS-layer and cannot be as independent in our application lifecycles as we would like. What can we do now?

During this talk we will propose various mechanisms for increasing the lifecycle independence including new packaging, packaging automation, considering dynamic loading of libraries using new mechanisms. We will also show how containers can be better leveraged as core parts of a user's system allowing for the independence of those components from the OS and other applications.

The future is exciting and allows for significant innovation. Let's work together to define it.


2/ The Module Build Service — Ralph Bean
The Module Build Service (MBS) is live! We presented the first
prototype of the MBS as part of the Modularity presentations at last
year’s Flock in Krakow. It has been a year now. Time to review! We’ll
discuss:

- The history of thinking on “how to build modules”. What has changed in the last year?
- A review of MBS internals. How does it work today? You can help make it better!
- What missing features we would like to see implemented in the coming year.

Come for a walk down memory lane and a glimpse at the future. Cheers!


3/ Packaging Modularity — Adam Samalik
Packaging in Modularity is different. There is not a single huge space where all the people work anymore. A package doesn't need to come just in a single version. All packages doesn't need to be supported on the same level. Your personal package does not need to break other people's work just because they started to using it...
I will compare packaging of the classic distribution with modularity. Will show you how modularity packaging looks now - what's good, what's bad, what's crazy
Captions: 
	00:00:00,030 --> 00:00:07,049
so uh I'm Langdon white who probably

00:00:03,419 --> 00:00:09,269
many of you know and what we decided to

00:00:07,049 --> 00:00:11,730
do for this talk even though it's listed

00:00:09,269 --> 00:00:12,840
as just Ralph we're actually gonna do

00:00:11,730 --> 00:00:14,820
I'm going to talk a little bit about the

00:00:12,840 --> 00:00:16,070
kind of future stuff and then we're also

00:00:14,820 --> 00:00:24,600
gonna talk about building this stuff

00:00:16,070 --> 00:00:26,310
this I also can't find my mouse so I'm

00:00:24,600 --> 00:00:28,470
Langdon and I try to find embarrassing

00:00:26,310 --> 00:00:30,720
photos but these are the best I could do

00:00:28,470 --> 00:00:32,700
so I'm gonna talk about kind of the

00:00:30,720 --> 00:00:34,500
future and the why of what we're doing

00:00:32,700 --> 00:00:37,110
and then Ralph's gonna talk about the

00:00:34,500 --> 00:00:39,300
how of what we're doing and then Adam is

00:00:37,110 --> 00:00:43,290
gonna talk about the with Watson kind of

00:00:39,300 --> 00:00:51,180
what we're doing so with that incredibly

00:00:43,290 --> 00:00:51,989
detailed introduction all right so kind

00:00:51,180 --> 00:00:53,190
of I'm gonna talk a little bit about

00:00:51,989 --> 00:00:55,110
like kind of here's what we're doing

00:00:53,190 --> 00:00:56,340
kind of right now in the future right

00:00:55,110 --> 00:00:58,920
and then we'll get a little further and

00:00:56,340 --> 00:01:03,629
further afield so we're targeting kind

00:00:58,920 --> 00:01:08,520
of an MVP of fedora server for f27 it's

00:01:03,629 --> 00:01:14,340
getting there so basically what we work

00:01:08,520 --> 00:01:16,320
with the server yes and just for the

00:01:14,340 --> 00:01:20,070
audience and B P stands for masochistic

00:01:16,320 --> 00:01:21,330
villainous plan / yein cloud so what we

00:01:20,070 --> 00:01:24,060
did was worked with server working group

00:01:21,330 --> 00:01:26,130
and said what do you consider the kind

00:01:24,060 --> 00:01:28,590
of most important set of things that

00:01:26,130 --> 00:01:30,180
would make Fedora a server and then

00:01:28,590 --> 00:01:32,220
let's modular eyes those and then

00:01:30,180 --> 00:01:33,659
deliver that as the Fedora server this

00:01:32,220 --> 00:01:36,570
comes from the startup world as a

00:01:33,659 --> 00:01:37,950
Minimum Viable Product so not the bare

00:01:36,570 --> 00:01:39,450
minimum that you could build but not

00:01:37,950 --> 00:01:40,710
everything you want to build it's

00:01:39,450 --> 00:01:43,020
something that people could actually

00:01:40,710 --> 00:01:45,720
find useful so that's the first thing

00:01:43,020 --> 00:01:48,840
the next thing is workstation we haven't

00:01:45,720 --> 00:01:51,030
really gone too far into workstation you

00:01:48,840 --> 00:01:52,860
know they are currently already working

00:01:51,030 --> 00:01:54,540
with us about trying to marry modules

00:01:52,860 --> 00:01:56,549
and flat packs and turn fear out how

00:01:54,540 --> 00:01:58,439
that's going to work together we also

00:01:56,549 --> 00:02:00,689
have an interesting discussion going on

00:01:58,439 --> 00:02:02,820
an analyst about overlap between module

00:02:00,689 --> 00:02:05,670
metadata and app stream metadata and how

00:02:02,820 --> 00:02:07,860
can we marry those things together but

00:02:05,670 --> 00:02:09,759
that's kind of a you know we need to get

00:02:07,860 --> 00:02:12,580
to that we're not quite ready for what

00:02:09,759 --> 00:02:15,069
to do with workstation atomic however

00:02:12,580 --> 00:02:18,700
has already I think successfully built

00:02:15,069 --> 00:02:24,280
the first version of a modularized

00:02:18,700 --> 00:02:27,099
atomic and so the idea with atomic is

00:02:24,280 --> 00:02:29,170
that because atomic is a very rare like

00:02:27,099 --> 00:02:31,959
a very well known set of things that

00:02:29,170 --> 00:02:33,549
make up that kind of base OS tree it's

00:02:31,959 --> 00:02:35,829
kind of simpler than all the rest of

00:02:33,549 --> 00:02:40,000
fedora because we know exactly what goes

00:02:35,829 --> 00:02:42,220
in that box so the atomic and they also

00:02:40,000 --> 00:02:44,500
want to be able to use the module kind

00:02:42,220 --> 00:02:46,750
of infrastructure to allow for some of

00:02:44,500 --> 00:02:49,720
the CI improvements that we want to see

00:02:46,750 --> 00:02:51,549
in fedora so we can use the module kind

00:02:49,720 --> 00:02:54,069
of definitions to allow for things like

00:02:51,549 --> 00:02:55,810
gaining so that's kind of why the atomic

00:02:54,069 --> 00:02:58,239
working group has been working with that

00:02:55,810 --> 00:03:00,310
and so we hope maybe we'll have

00:02:58,239 --> 00:03:01,599
something for f27 although they may do a

00:03:00,310 --> 00:03:06,090
slightly different release schedule

00:03:01,599 --> 00:03:09,159
because it's a tongue so there's that

00:03:06,090 --> 00:03:12,790
and I would like to point out my even

00:03:09,159 --> 00:03:14,680
bigger than you close like this one of

00:03:12,790 --> 00:03:16,090
the things that we like to talk about

00:03:14,680 --> 00:03:18,250
with modules it's like kind of how it

00:03:16,090 --> 00:03:20,769
makes things simpler particularly when

00:03:18,250 --> 00:03:22,569
you talk about containers so as you can

00:03:20,769 --> 00:03:24,370
see here right we we have you know your

00:03:22,569 --> 00:03:28,180
typical docker file although pretty

00:03:24,370 --> 00:03:29,620
lightweight one but what this lets us do

00:03:28,180 --> 00:03:32,019
is we can because we have these kind of

00:03:29,620 --> 00:03:34,239
this stream concept we only have to kind

00:03:32,019 --> 00:03:35,560
of update one file and then we can kind

00:03:34,239 --> 00:03:38,049
of rebuild the container and we get to

00:03:35,560 --> 00:03:39,940
new and different versions of those

00:03:38,049 --> 00:03:41,790
containers more easily and I had a

00:03:39,940 --> 00:03:44,349
better segue to this slide earlier today

00:03:41,790 --> 00:03:47,410
but I don't remember what that was so

00:03:44,349 --> 00:03:49,060
sorry that's a little context but if you

00:03:47,410 --> 00:03:51,459
notice down on the bottom that's the

00:03:49,060 --> 00:03:54,069
nodejs module file you can just change

00:03:51,459 --> 00:03:56,230
that stream there to b6 or whatever or

00:03:54,069 --> 00:03:58,269
10 which is probably more likely and

00:03:56,230 --> 00:04:00,669
then just kind of rebuild your module or

00:03:58,269 --> 00:04:01,810
rebuild your container and it just works

00:04:00,669 --> 00:04:04,959
you have to change anything in the

00:04:01,810 --> 00:04:06,819
container about you know to deal with

00:04:04,959 --> 00:04:07,819
the fact that now you have to change all

00:04:06,819 --> 00:04:10,459
the different

00:04:07,819 --> 00:04:11,390
our PMS that you wanted to solve so

00:04:10,459 --> 00:04:15,739
that's one of things that makes it a

00:04:11,390 --> 00:04:18,169
little easier which i think is cool so

00:04:15,739 --> 00:04:20,690
this is kind of what we want to do for

00:04:18,169 --> 00:04:23,300
the tooling and to make it so that

00:04:20,690 --> 00:04:26,270
modules have his little impact as

00:04:23,300 --> 00:04:29,270
humanly possible on kind of the RPM

00:04:26,270 --> 00:04:31,930
workflow and apparently even though it's

00:04:29,270 --> 00:04:34,940
seven minutes before the time for this

00:04:31,930 --> 00:04:36,650
talk it was like hardly anybody in here

00:04:34,940 --> 00:04:40,900
we were gonna try to negotiate for grant

00:04:36,650 --> 00:04:43,580
so but yeah so sorry there's no sense

00:04:40,900 --> 00:04:45,320
so but the idea is that we want to be

00:04:43,580 --> 00:04:47,300
allowed we want to allow like a package

00:04:45,320 --> 00:04:49,310
or whatever to essentially just give a

00:04:47,300 --> 00:04:51,199
single input here's the s RPM I care

00:04:49,310 --> 00:04:53,810
about and then it can I have everything

00:04:51,199 --> 00:04:56,260
else just generator so that it can kind

00:04:53,810 --> 00:04:58,370
of you know so it's a very easy workflow

00:04:56,260 --> 00:04:59,630
for the first time maybe you have to

00:04:58,370 --> 00:05:02,210
touch it clean it up a little bit more

00:04:59,630 --> 00:05:05,000
but then as much as it can be is that

00:05:02,210 --> 00:05:08,570
you know over time it just happens right

00:05:05,000 --> 00:05:09,949
you don't really have to be involved so

00:05:08,570 --> 00:05:12,349
that's kind of the generating from s

00:05:09,949 --> 00:05:14,539
rpms you know a general goal I have is

00:05:12,349 --> 00:05:16,970
that the the human editable part of the

00:05:14,539 --> 00:05:18,860
module and D file is you know like I

00:05:16,970 --> 00:05:22,789
would like it to be like four lines you

00:05:18,860 --> 00:05:24,620
know if that another thing that we

00:05:22,789 --> 00:05:27,800
discovered doing the Voltron activity

00:05:24,620 --> 00:05:28,849
was that it's important sometimes to be

00:05:27,800 --> 00:05:31,099
able to view that kind of whole

00:05:28,849 --> 00:05:34,460
ecosystem to see how the different

00:05:31,099 --> 00:05:36,229
pieces fit together that's not that

00:05:34,460 --> 00:05:37,849
important for an individual packager but

00:05:36,229 --> 00:05:39,680
it's important when you want to do

00:05:37,849 --> 00:05:41,630
something new so you can kind of say

00:05:39,680 --> 00:05:43,580
okay what's kind of available and out

00:05:41,630 --> 00:05:46,250
there and where would my thing fit in to

00:05:43,580 --> 00:05:47,930
the overall ecosystem so Adams been

00:05:46,250 --> 00:05:49,160
primarily working on that oh and I was

00:05:47,930 --> 00:05:51,050
going to comment on this we actually

00:05:49,160 --> 00:05:53,090
have implementations of a lot of these

00:05:51,050 --> 00:05:54,680
but we have like three or four where

00:05:53,090 --> 00:05:56,030
individuals kind of said you know what

00:05:54,680 --> 00:05:57,770
this is really a painting I'm gonna go

00:05:56,030 --> 00:05:59,330
write a little tool to make this easier

00:05:57,770 --> 00:06:00,770
and faster and now we're in the process

00:05:59,330 --> 00:06:03,020
of kind of merging all those to actually

00:06:00,770 --> 00:06:04,880
end up with like a good tool for each of

00:06:03,020 --> 00:06:06,680
these kind of spaces but we wanted to

00:06:04,880 --> 00:06:08,870
allow kind of everybody just to see what

00:06:06,680 --> 00:06:10,490
pain points they ran into and then you

00:06:08,870 --> 00:06:13,850
know and then kind of consolidate after

00:06:10,490 --> 00:06:17,090
the fact the next thing is

00:06:13,850 --> 00:06:19,310
kind of net seeing ecosystem problem we

00:06:17,090 --> 00:06:21,410
need some tools that validate kind of

00:06:19,310 --> 00:06:23,000
across the ecosystem to ensure that all

00:06:21,410 --> 00:06:24,080
the modules are not overlapping and that

00:06:23,000 --> 00:06:25,430
they're working together and that

00:06:24,080 --> 00:06:27,860
they're continuing to stay updated

00:06:25,430 --> 00:06:29,990
necklace' we have some of these as well

00:06:27,860 --> 00:06:31,550
so it's kind of like we need almost like

00:06:29,990 --> 00:06:33,650
repo closure kind of for the whole

00:06:31,550 --> 00:06:37,430
ecosystem you know so it's similar to

00:06:33,650 --> 00:06:39,230
like a repo closure problem and then the

00:06:37,430 --> 00:06:42,110
last thing is the copper team already

00:06:39,230 --> 00:06:44,420
has in their development environment you

00:06:42,110 --> 00:06:46,820
know a way to build modules and use them

00:06:44,420 --> 00:06:48,740
but they're a little blocked on the kind

00:06:46,820 --> 00:06:51,200
of initial content from both us and the

00:06:48,740 --> 00:06:54,110
platform team to be able to ship that so

00:06:51,200 --> 00:06:55,910
we really want that to come online so so

00:06:54,110 --> 00:06:59,300
you have kind of a good place to test

00:06:55,910 --> 00:07:00,950
because in the modular world we're

00:06:59,300 --> 00:07:02,960
probably not going to do something like

00:07:00,950 --> 00:07:04,850
scratch builds instead we're gonna

00:07:02,960 --> 00:07:07,180
probably do stuff that's more like in

00:07:04,850 --> 00:07:09,920
copper and then you kind of promote it

00:07:07,180 --> 00:07:12,830
into the real you know the real

00:07:09,920 --> 00:07:14,930
infrastructure but then because we're

00:07:12,830 --> 00:07:16,460
introducing all this gating stuff that

00:07:14,930 --> 00:07:18,200
doesn't necessarily mean it will

00:07:16,460 --> 00:07:19,910
actually get released it actually has to

00:07:18,200 --> 00:07:21,680
pass the tests and stuff first this is

00:07:19,910 --> 00:07:24,950
some stuff we're still working out like

00:07:21,680 --> 00:07:26,000
how how should this work but one of the

00:07:24,950 --> 00:07:27,650
things that I think people find

00:07:26,000 --> 00:07:31,670
confusing is that there is not a scratch

00:07:27,650 --> 00:07:33,920
build excuse me and so just be aware

00:07:31,670 --> 00:07:35,630
that that's you know kind of intentional

00:07:33,920 --> 00:07:36,920
maybe not long-term intentional but

00:07:35,630 --> 00:07:40,550
right now it's intentional and that's

00:07:36,920 --> 00:07:42,410
why it's not there the other thing is so

00:07:40,550 --> 00:07:44,450
you know some people want to work on

00:07:42,410 --> 00:07:45,710
stuff you know that's out in the

00:07:44,450 --> 00:07:47,510
infrastructure using something like

00:07:45,710 --> 00:07:50,450
copper but some people want to have just

00:07:47,510 --> 00:07:52,580
a local build possibility so we've also

00:07:50,450 --> 00:07:53,660
been working on a bigger an image that

00:07:52,580 --> 00:07:55,430
will kind of have all the stuff

00:07:53,660 --> 00:07:58,790
installed and you know all that stuff

00:07:55,430 --> 00:08:00,620
that you need to build modules just kind

00:07:58,790 --> 00:08:02,120
of right there already all set up so

00:08:00,620 --> 00:08:04,250
that it makes your life a little easier

00:08:02,120 --> 00:08:06,290
and then the nice thing about doing it

00:08:04,250 --> 00:08:07,910
kind of a vagrant is that it's pretty

00:08:06,290 --> 00:08:10,250
easy for us to extrapolate into a

00:08:07,910 --> 00:08:11,660
ansible playbook or even you just cut

00:08:10,250 --> 00:08:12,890
the copying and pasting the shell script

00:08:11,660 --> 00:08:14,750
right so you could actually set up a

00:08:12,890 --> 00:08:16,370
local machine but that's where we're

00:08:14,750 --> 00:08:17,120
starting with a vagrant box so you can

00:08:16,370 --> 00:08:18,980
kind of

00:08:17,120 --> 00:08:24,070
get an idea just you know plug and play

00:08:18,980 --> 00:08:24,070
and it just works any questions so far

00:08:24,610 --> 00:08:32,090
not saying anything too controversial

00:08:26,720 --> 00:08:35,539
today so here's what we need right we

00:08:32,090 --> 00:08:37,159
need hope we need now we have a process

00:08:35,539 --> 00:08:38,960
in place now that you can create your

00:08:37,159 --> 00:08:41,330
own modules we would like you to create

00:08:38,960 --> 00:08:43,310
your own modules and there is a workshop

00:08:41,330 --> 00:08:45,410
later in this session where you can

00:08:43,310 --> 00:08:46,760
first learn about how to do that

00:08:45,410 --> 00:08:49,070
Tomas sitting in the back will be

00:08:46,760 --> 00:08:51,490
running that after that there's one

00:08:49,070 --> 00:08:53,900
about building tests for modules as well

00:08:51,490 --> 00:08:57,589
and that's pepper we'll be doing that

00:08:53,900 --> 00:09:01,760
one but I don't see him so he is

00:08:57,589 --> 00:09:03,320
apparently somewhere else then we kind

00:09:01,760 --> 00:09:04,940
of have this kind of list of issues that

00:09:03,320 --> 00:09:06,800
we've been working on that are on the on

00:09:04,940 --> 00:09:07,600
the actual module arity kind of project

00:09:06,800 --> 00:09:09,860
itself

00:09:07,600 --> 00:09:12,500
the review process that second bullet

00:09:09,860 --> 00:09:14,300
down we're gonna at the end will kind of

00:09:12,500 --> 00:09:17,300
have a takeaway to slide so don't worry

00:09:14,300 --> 00:09:18,830
about it too much and then you know all

00:09:17,300 --> 00:09:23,510
the documents about how to build modules

00:09:18,830 --> 00:09:24,740
are on the third URL and then where

00:09:23,510 --> 00:09:26,150
we've been putting them so what I was

00:09:24,740 --> 00:09:28,910
kind of saying is like we have this

00:09:26,150 --> 00:09:30,860
human editable component and so we've

00:09:28,910 --> 00:09:33,589
been doing that right now and github

00:09:30,860 --> 00:09:35,420
now that Tiger is on disk it we might

00:09:33,589 --> 00:09:37,700
want to switch but I'm not sure we're

00:09:35,420 --> 00:09:40,250
ready to do that yet like we just don't

00:09:37,700 --> 00:09:42,560
have time between now and 27 but that

00:09:40,250 --> 00:09:45,740
kind of human entered stuff we've been

00:09:42,560 --> 00:09:47,900
storing on github and then we generate

00:09:45,740 --> 00:09:49,640
out this stuff that we put into disk it

00:09:47,900 --> 00:09:52,360
which is kind of a more complete not

00:09:49,640 --> 00:09:57,310
Wendy's or whatever

00:09:52,360 --> 00:09:58,779
all right probably these bars so looking

00:09:57,310 --> 00:10:02,680
ahead let's see how many don't in time

00:09:58,779 --> 00:10:05,470
good good four minutes alright so

00:10:02,680 --> 00:10:07,329
looking ahead one of the big challenges

00:10:05,470 --> 00:10:10,230
we've been running into and we knew we

00:10:07,329 --> 00:10:14,110
were gonna run into this is many many

00:10:10,230 --> 00:10:17,140
packages kind of kind of packaged

00:10:14,110 --> 00:10:19,480
together things too many things and it

00:10:17,140 --> 00:10:22,740
seems logical from when you're looking

00:10:19,480 --> 00:10:25,209
at it from an RPM based distribution so

00:10:22,740 --> 00:10:28,600
imagemagick is everyone's favorite

00:10:25,209 --> 00:10:30,370
friend right now but there it's a really

00:10:28,600 --> 00:10:33,250
good example of this which is that

00:10:30,370 --> 00:10:35,700
imagemagick has a library which could be

00:10:33,250 --> 00:10:39,070
what you may have multiple versions of

00:10:35,700 --> 00:10:41,589
but because in the same RPM is the

00:10:39,070 --> 00:10:44,529
convert command-line executable you

00:10:41,589 --> 00:10:48,540
can't have two of them right because

00:10:44,529 --> 00:10:51,459
they conflict on the convert excuse me

00:10:48,540 --> 00:10:52,720
so and if you came to Adams talk the

00:10:51,459 --> 00:10:54,370
other day about documentation there's

00:10:52,720 --> 00:10:55,870
similar problems with Docs is that you

00:10:54,370 --> 00:10:58,570
know if they're bundled in there then

00:10:55,870 --> 00:11:00,910
it's hard to allow for divergence right

00:10:58,570 --> 00:11:02,500
you know unit tests are my pet peeve

00:11:00,910 --> 00:11:03,760
around this you know it's like we have

00:11:02,500 --> 00:11:06,250
to build all these things that we may

00:11:03,760 --> 00:11:08,380
not actually use you know kind of in the

00:11:06,250 --> 00:11:12,010
deployment side of the house so I think

00:11:08,380 --> 00:11:14,860
as we move more modular we're gonna want

00:11:12,010 --> 00:11:16,600
to see more repackaging and so that

00:11:14,860 --> 00:11:18,220
repackaging we may find automated ways

00:11:16,600 --> 00:11:20,199
to do that we may ask people to

00:11:18,220 --> 00:11:21,910
repackage things we may decide you know

00:11:20,199 --> 00:11:23,560
what for these 37 different things we

00:11:21,910 --> 00:11:24,910
just don't care you know so I think

00:11:23,560 --> 00:11:27,130
we'll see over time but that's why this

00:11:24,910 --> 00:11:28,690
is the future slide it's like this is

00:11:27,130 --> 00:11:29,740
one of the problem areas and I think

00:11:28,690 --> 00:11:32,290
it's something we're gonna have to deal

00:11:29,740 --> 00:11:36,100
with you know whichever way we decide to

00:11:32,290 --> 00:11:39,130
deal with it the next thing is dynamic

00:11:36,100 --> 00:11:40,920
linking so one of the big things that we

00:11:39,130 --> 00:11:43,690
have in modularity we have parallel

00:11:40,920 --> 00:11:45,940
availability but we don't do a good job

00:11:43,690 --> 00:11:49,449
of parallel install ability at this

00:11:45,940 --> 00:11:55,240
point my original thinking around this

00:11:49,449 --> 00:11:56,740
was to actually make the kind of OS you

00:11:55,240 --> 00:11:58,899
know basically the thing that is loading

00:11:56,740 --> 00:12:00,970
all these libraries for you to be

00:11:58,899 --> 00:12:02,709
smarter about which libraries it's

00:12:00,970 --> 00:12:03,340
loaded so that you know any given

00:12:02,709 --> 00:12:04,600
application

00:12:03,340 --> 00:12:06,070
it was installed it would actually say

00:12:04,600 --> 00:12:07,420
oh yeah I want this version of that

00:12:06,070 --> 00:12:11,200
library and that version of that library

00:12:07,420 --> 00:12:13,390
and that thing over there and that you

00:12:11,200 --> 00:12:14,950
could then just handle where they were

00:12:13,390 --> 00:12:17,790
coming from and making sure that you got

00:12:14,950 --> 00:12:20,620
the right stuff when you asked for it

00:12:17,790 --> 00:12:22,540
that is probably a bunch of work it's

00:12:20,620 --> 00:12:24,070
also a ton of repackaging because

00:12:22,540 --> 00:12:26,080
basically it relies on things like our

00:12:24,070 --> 00:12:30,070
pathing which is you know disallowed or

00:12:26,080 --> 00:12:34,330
FBC policy right now so that's a ton of

00:12:30,070 --> 00:12:35,860
work however the the thing we have going

00:12:34,330 --> 00:12:38,020
on right now is and I'm just using the

00:12:35,860 --> 00:12:40,240
term native containers because there's

00:12:38,020 --> 00:12:41,620
like a bunch of competing technical

00:12:40,240 --> 00:12:44,140
implementation so this but basically

00:12:41,620 --> 00:12:45,190
what I mean is containers that feel like

00:12:44,140 --> 00:12:47,230
they're part of the operating system

00:12:45,190 --> 00:12:49,390
rather than kind of feeling like they're

00:12:47,230 --> 00:12:51,070
out over there and so you have system

00:12:49,390 --> 00:12:53,050
containers doing this flat-pack kinda

00:12:51,070 --> 00:12:54,730
does this I'm sure there are others I

00:12:53,050 --> 00:12:59,020
don't know about or somebody is working

00:12:54,730 --> 00:13:01,120
on in their backyard but that also

00:12:59,020 --> 00:13:04,060
solves the same problem of how do we get

00:13:01,120 --> 00:13:07,690
parallel installation and if the the

00:13:04,060 --> 00:13:09,280
container folks do an even better job of

00:13:07,690 --> 00:13:11,590
making that feel more and more native

00:13:09,280 --> 00:13:13,450
that might just be the answer and an

00:13:11,590 --> 00:13:15,070
easy answer which doesn't require tons

00:13:13,450 --> 00:13:17,080
of repackaging and a new way of doing

00:13:15,070 --> 00:13:18,640
things and everything else and we so we

00:13:17,080 --> 00:13:20,470
might be able to just rely on containers

00:13:18,640 --> 00:13:25,210
so this is again why it's kind of a

00:13:20,470 --> 00:13:26,440
future statement good so and but my

00:13:25,210 --> 00:13:28,570
guess is we'll actually end up with a

00:13:26,440 --> 00:13:29,620
blend of both right is that you know for

00:13:28,570 --> 00:13:32,230
some things it's going to make a lot

00:13:29,620 --> 00:13:35,290
more sense to have that all native to

00:13:32,230 --> 00:13:37,210
the OS and you know we we do do parallel

00:13:35,290 --> 00:13:39,070
installation of some kind for some weird

00:13:37,210 --> 00:13:41,080
reason of certain kinds of things and

00:13:39,070 --> 00:13:42,910
then like all the other things do it

00:13:41,080 --> 00:13:45,010
with these native containers whatever

00:13:42,910 --> 00:13:46,270
they end up fully looking on my bet is

00:13:45,010 --> 00:13:48,580
it'll be something like the system

00:13:46,270 --> 00:13:51,130
containers effort which is pretty good

00:13:48,580 --> 00:13:53,710
we just need to move all the things so

00:13:51,130 --> 00:13:57,860
that they can actually run that way

00:13:53,710 --> 00:14:00,500
alright so the next thing is and one of

00:13:57,860 --> 00:14:03,320
the things that makes doing the future

00:14:00,500 --> 00:14:05,450
talk of this talk heart is you know

00:14:03,320 --> 00:14:08,660
modularity is really meant to be like an

00:14:05,450 --> 00:14:10,130
enablement for innovation so I think

00:14:08,660 --> 00:14:12,020
there's gonna be a lot of things we can

00:14:10,130 --> 00:14:14,750
do with kind of very flexible metadata

00:14:12,020 --> 00:14:16,610
that we can we can't do now the thing is

00:14:14,750 --> 00:14:18,980
I don't know what that stuff is right

00:14:16,610 --> 00:14:20,150
like we kind of need it to like land and

00:14:18,980 --> 00:14:22,520
then we need people to start playing

00:14:20,150 --> 00:14:23,930
around with it and say oh you know it

00:14:22,520 --> 00:14:25,700
would be really useful if we knew this

00:14:23,930 --> 00:14:28,490
thing or that thing about this

00:14:25,700 --> 00:14:30,050
particular application and it'd be nice

00:14:28,490 --> 00:14:33,350
if we could compare them in this kind of

00:14:30,050 --> 00:14:36,220
way in that kind of way so you know I

00:14:33,350 --> 00:14:39,080
think a lot of what we're gonna do next

00:14:36,220 --> 00:14:41,300
comes out of having this kind of much

00:14:39,080 --> 00:14:43,610
more flexible framework that we can now

00:14:41,300 --> 00:14:44,960
start to play with and I'm hoping that

00:14:43,610 --> 00:14:46,670
you know people in this room people

00:14:44,960 --> 00:14:49,460
elsewhere are going to come up with

00:14:46,670 --> 00:14:51,890
whatever our next innovation is you know

00:14:49,460 --> 00:14:53,000
it's not it's not just us right it's you

00:14:51,890 --> 00:14:54,650
know we're just trying to set up this

00:14:53,000 --> 00:14:58,160
environment and we want everybody to

00:14:54,650 --> 00:15:01,960
play right so I think that was my last

00:14:58,160 --> 00:15:01,960
slide yes sir

00:15:08,380 --> 00:15:14,010
Ecosystem now that modularity is in

00:15:11,140 --> 00:15:17,130
place right yeah it's much more than

00:15:14,010 --> 00:15:20,470
yeah so so the question is kind of like

00:15:17,130 --> 00:15:23,830
are these projects of modularity or are

00:15:20,470 --> 00:15:26,170
they projects of fedora right and in

00:15:23,830 --> 00:15:29,170
some ways I have jokingly have seriously

00:15:26,170 --> 00:15:31,570
say modular is done you know like like

00:15:29,170 --> 00:15:33,610
we pretty much feel like we've solved

00:15:31,570 --> 00:15:34,630
all the questions you know there's a

00:15:33,610 --> 00:15:36,640
couple still that we would like to

00:15:34,630 --> 00:15:38,920
really get cleaner and tighten up a

00:15:36,640 --> 00:15:40,810
little bit there's things like tooling

00:15:38,920 --> 00:15:42,790
you know if we can't just walk away and

00:15:40,810 --> 00:15:44,170
say you know hey you know you're on your

00:15:42,790 --> 00:15:45,340
own for tooling or any of that stuff so

00:15:44,170 --> 00:15:47,830
we have a bunch of stuff we still have

00:15:45,340 --> 00:15:49,870
to do but this stuff yes it's exactly

00:15:47,830 --> 00:15:51,910
that what we're trying to do is we try

00:15:49,870 --> 00:15:53,830
to enable the flexible environment we're

00:15:51,910 --> 00:15:58,450
gonna get to it you know where the

00:15:53,830 --> 00:16:00,790
trains moving but then you know yeah

00:15:58,450 --> 00:16:04,570
like the the experimentation is a Fedora

00:16:00,790 --> 00:16:05,920
wide experimentation and we need to you

00:16:04,570 --> 00:16:07,780
know we need to enable everybody to

00:16:05,920 --> 00:16:10,150
participate in that innovation and we

00:16:07,780 --> 00:16:11,710
don't want you know I certainly don't

00:16:10,150 --> 00:16:14,050
want the modularity team to be

00:16:11,710 --> 00:16:15,460
responsible for trying to figure out

00:16:14,050 --> 00:16:17,110
what that innovation is it's just you

00:16:15,460 --> 00:16:20,200
know it's not enough people we want to

00:16:17,110 --> 00:16:22,540
you know we need everybody right does

00:16:20,200 --> 00:16:28,420
that answer your question yes thank you

00:16:22,540 --> 00:16:30,700
for the right answer that was my last

00:16:28,420 --> 00:16:36,580
night so and I thought I'd do a little

00:16:30,700 --> 00:16:37,750
throwback for everybody so does anybody

00:16:36,580 --> 00:16:38,860
have any questions specifically for me

00:16:37,750 --> 00:16:41,010
we're also gonna do some more questions

00:16:38,860 --> 00:16:41,010
at the end

00:16:41,699 --> 00:16:46,379
- detective clutch modules are

00:16:44,309 --> 00:16:47,910
overlapping the package says is there

00:16:46,379 --> 00:16:49,829
going to be some set was authority to

00:16:47,910 --> 00:16:50,880
decides how practice get divided into

00:16:49,829 --> 00:16:55,720
modules

00:16:50,880 --> 00:16:57,220
I don't know that's policy question I

00:16:55,720 --> 00:17:00,339
mean it's a policy question I think

00:16:57,220 --> 00:17:02,260
we're gonna have to you know we have the

00:17:00,339 --> 00:17:04,990
exact same problem with RPMs today right

00:17:02,260 --> 00:17:06,220
is you-know-who in how do we decide

00:17:04,990 --> 00:17:08,380
whether or not this thing should be

00:17:06,220 --> 00:17:10,900
included and you know this block or that

00:17:08,380 --> 00:17:13,780
block so I think we're gonna continue to

00:17:10,900 --> 00:17:16,839
have that problem I see the month well

00:17:13,780 --> 00:17:19,480
and actually the council actually said

00:17:16,839 --> 00:17:21,429
the modularity working group in some

00:17:19,480 --> 00:17:23,530
ways will morph into something like the

00:17:21,429 --> 00:17:26,230
FPC and the sense of trying to be the

00:17:23,530 --> 00:17:27,939
centralized authority of here's how you

00:17:26,230 --> 00:17:28,950
write modules here's how you you know

00:17:27,939 --> 00:17:31,900
keeping track of those guidelines

00:17:28,950 --> 00:17:33,220
updating processes and maybe making

00:17:31,900 --> 00:17:35,170
those kinds of decisions maybe those

00:17:33,220 --> 00:17:37,570
decisions go to FS Co I think a little

00:17:35,170 --> 00:17:39,460
bit it's going to be we have to kind of

00:17:37,570 --> 00:17:40,750
see the problems we've run into before

00:17:39,460 --> 00:17:44,170
we can kind of come up with the answers

00:17:40,750 --> 00:17:50,070
but yeah it is definitely a potential

00:17:44,170 --> 00:17:50,070
issue cool

00:17:56,120 --> 00:18:35,270
yeah they're hard right hi everybody I'm

00:18:29,480 --> 00:18:38,660
Ralph I'll just talk direct service and

00:18:35,270 --> 00:18:39,980
so can you so I was introduced broadly

00:18:38,660 --> 00:18:41,300
is talking about the how we're gonna do

00:18:39,980 --> 00:18:42,560
this stuff but it's a little bit more

00:18:41,300 --> 00:18:44,540
narrow scope than that because the how

00:18:42,560 --> 00:18:45,740
includes other services that are beyond

00:18:44,540 --> 00:18:46,490
just how models are put together

00:18:45,740 --> 00:18:48,260
themselves

00:18:46,490 --> 00:18:50,330
there's the automation and orchestration

00:18:48,260 --> 00:18:51,770
frameworks that yonk Louise are

00:18:50,330 --> 00:18:55,390
presented on called freshmaker that

00:18:51,770 --> 00:18:57,440
plays a bigger kind of governing role

00:18:55,390 --> 00:18:59,030
but I'm just gonna talk specifically

00:18:57,440 --> 00:19:01,250
about the part that's responsible for

00:18:59,030 --> 00:19:03,260
putting together modules themselves here

00:19:01,250 --> 00:19:05,060
and so there were three things I wanted

00:19:03,260 --> 00:19:06,740
to cover I wanted to compare with last

00:19:05,060 --> 00:19:08,300
year to today what has changed and the

00:19:06,740 --> 00:19:10,910
multiple tapes we presented in our clock

00:19:08,300 --> 00:19:13,430
a year ago and some things changed we'll

00:19:10,910 --> 00:19:14,960
talk about those a review of the MVS and

00:19:13,430 --> 00:19:16,220
Turtles and how does it work and how you

00:19:14,960 --> 00:19:17,630
could hope to make it better the point

00:19:16,220 --> 00:19:20,120
there being kind of like in Langdon's

00:19:17,630 --> 00:19:21,560
pitch my team has been working almost

00:19:20,120 --> 00:19:22,670
exclusively on the modular build service

00:19:21,560 --> 00:19:24,050
but we would like more people to be

00:19:22,670 --> 00:19:25,790
involved in that so it's a community

00:19:24,050 --> 00:19:26,450
owned tool that's a part of our process

00:19:25,790 --> 00:19:29,180
right

00:19:26,450 --> 00:19:30,890
there's bandwidth issues with small

00:19:29,180 --> 00:19:32,300
groups of people having you know the

00:19:30,890 --> 00:19:33,560
intimate knowledge about how something

00:19:32,300 --> 00:19:35,360
works and we need everybody to be able

00:19:33,560 --> 00:19:38,690
to fix it patch it fix bugs

00:19:35,360 --> 00:19:39,830
make our Effie's and so on and lastly if

00:19:38,690 --> 00:19:40,940
I have time I'll get into missing

00:19:39,830 --> 00:19:42,080
features that we know we don't have

00:19:40,940 --> 00:19:42,460
right now but that we're going to be

00:19:42,080 --> 00:19:44,500
intrude

00:19:42,460 --> 00:19:45,670
in short time and if you want to get

00:19:44,500 --> 00:19:49,780
involved that would be a place to help

00:19:45,670 --> 00:19:51,940
in coding on the MDS so on how build

00:19:49,780 --> 00:19:53,290
models nothing has really fundamentally

00:19:51,940 --> 00:19:55,060
changed since last year when we

00:19:53,290 --> 00:19:57,220
presented a clock but there are a couple

00:19:55,060 --> 00:19:59,530
of things a couple of new backends were

00:19:57,220 --> 00:20:01,240
grown some efficiency improvements and

00:19:59,530 --> 00:20:03,730
changes like that I only want to focus

00:20:01,240 --> 00:20:06,790
in detail on the last two on these

00:20:03,730 --> 00:20:08,440
slides on this slide show show here the

00:20:06,790 --> 00:20:10,990
first is that we introduced this notion

00:20:08,440 --> 00:20:15,150
of build order groups in a module when

00:20:10,990 --> 00:20:15,150
you're building a module

00:20:15,270 --> 00:20:20,590
yeah back up the way that we were

00:20:18,670 --> 00:20:23,230
building modules last year imagine that

00:20:20,590 --> 00:20:24,790
you had a module with 400 rpms in it the

00:20:23,230 --> 00:20:27,130
modular build service would submit the

00:20:24,790 --> 00:20:28,900
build of the first rpm tukoji and then

00:20:27,130 --> 00:20:30,550
it would wait till first to complete and

00:20:28,900 --> 00:20:32,590
then it would wait for the repo to be

00:20:30,550 --> 00:20:34,720
regenerated sort of m-matt RPM would be

00:20:32,590 --> 00:20:37,240
available in the Builder of the next RPM

00:20:34,720 --> 00:20:39,100
it would build that RPM wait for a repo

00:20:37,240 --> 00:20:40,450
region we forgot to finish then start

00:20:39,100 --> 00:20:42,670
the third one and so on so this took an

00:20:40,450 --> 00:20:43,990
insanely long amount of time to do our

00:20:42,670 --> 00:20:46,750
theory was that we had to do that

00:20:43,990 --> 00:20:48,070
because any one of the modules

00:20:46,750 --> 00:20:49,960
excuse me any one of the rpms and the

00:20:48,070 --> 00:20:51,880
module might affect the build route of

00:20:49,960 --> 00:20:53,080
another one so we couldn't just do them

00:20:51,880 --> 00:20:54,610
all what if they depended on each other

00:20:53,080 --> 00:20:57,160
so we did the naive thing and that's

00:20:54,610 --> 00:20:59,650
that's our thing we introduced this

00:20:57,160 --> 00:21:01,090
notion of a build order group which is a

00:20:59,650 --> 00:21:05,230
wave for the module maintainer the

00:21:01,090 --> 00:21:07,210
packager to specify groups of rpms that

00:21:05,230 --> 00:21:08,530
can be built in parallel and only once

00:21:07,210 --> 00:21:09,850
they're all done they get tagged into

00:21:08,530 --> 00:21:11,500
the build route for the next build order

00:21:09,850 --> 00:21:13,810
batch to start so you have control as

00:21:11,500 --> 00:21:16,090
the packager over how the MDS actually

00:21:13,810 --> 00:21:20,260
execute the order of the RPMs in your

00:21:16,090 --> 00:21:22,090
module so here's an example of a

00:21:20,260 --> 00:21:23,860
hypothetical module I think I stole this

00:21:22,090 --> 00:21:25,990
from the shared user space module that

00:21:23,860 --> 00:21:28,180
was a part of the F 26 Voltron release

00:21:25,990 --> 00:21:29,470
which is going away in F 27 but here's

00:21:28,180 --> 00:21:30,940
some here's mark in there were

00:21:29,470 --> 00:21:32,799
more in the real module it's a limited

00:21:30,940 --> 00:21:34,659
set you might have in Group one mature

00:21:32,799 --> 00:21:36,280
path and live to work those two gets

00:21:34,659 --> 00:21:37,450
submitted in parallel and one might

00:21:36,280 --> 00:21:38,950
finish quick the other one takes a

00:21:37,450 --> 00:21:41,020
longer time but only once the last one

00:21:38,950 --> 00:21:43,090
is done do we then do a Rico regen and

00:21:41,020 --> 00:21:44,770
build the next set submit parallel

00:21:43,090 --> 00:21:46,510
builds of diamonds and see collective L

00:21:44,770 --> 00:21:48,549
and the same thing repeats when they're

00:21:46,510 --> 00:21:50,530
done we revote we regenerate the repo

00:21:48,549 --> 00:21:55,299
and then can build the last RPM in the

00:21:50,530 --> 00:21:56,770
third group reusing components is a

00:21:55,299 --> 00:21:59,530
second feature that was introduced since

00:21:56,770 --> 00:22:02,049
last flock before again we weren't we

00:21:59,530 --> 00:22:03,280
had no way to know what in the Builder

00:22:02,049 --> 00:22:04,990
it was affecting anything else so if

00:22:03,280 --> 00:22:06,700
anything changed we felt in order to be

00:22:04,990 --> 00:22:08,799
safe we have to rebuild every one of the

00:22:06,700 --> 00:22:10,390
RPMs from source if you had a module

00:22:08,799 --> 00:22:12,309
with four hundred rpms that meant four

00:22:10,390 --> 00:22:14,320
hundred rebuilds any time one speck file

00:22:12,309 --> 00:22:15,490
in that 400 would change which is

00:22:14,320 --> 00:22:18,130
dramatically inefficient right

00:22:15,490 --> 00:22:19,929
we knew that couldn't couldn't stay so

00:22:18,130 --> 00:22:21,850
we came up with some rules for when we

00:22:19,929 --> 00:22:24,190
get to reuse components from a previous

00:22:21,850 --> 00:22:25,990
module build obviously if the spec file

00:22:24,190 --> 00:22:27,070
changed we have to rebuild that one but

00:22:25,990 --> 00:22:29,049
of all the other ones how do we make

00:22:27,070 --> 00:22:30,700
decisions about what to reuse and so

00:22:29,049 --> 00:22:32,289
here in the center you don't have to

00:22:30,700 --> 00:22:35,260
read them self talk about inter sites

00:22:32,289 --> 00:22:38,409
are three rules that we came up with for

00:22:35,260 --> 00:22:40,090
our reused logic it leverages the build

00:22:38,409 --> 00:22:41,950
order groups that I talked about in the

00:22:40,090 --> 00:22:43,809
in the previous section alright so here

00:22:41,950 --> 00:22:46,840
consider the example of the system tacit

00:22:43,809 --> 00:22:48,280
spec file changes if you submit a module

00:22:46,840 --> 00:22:50,020
build of this hypothetical module and

00:22:48,280 --> 00:22:51,940
the system test step file had changed

00:22:50,020 --> 00:22:54,429
since the last build the system tap RPM

00:22:51,940 --> 00:22:56,620
will be rebuilt but all of the other

00:22:54,429 --> 00:22:58,659
rpms will be reused from the previous

00:22:56,620 --> 00:23:01,269
multiple they'll be tags from the old

00:22:58,659 --> 00:23:03,369
tag into the new tank for you

00:23:01,269 --> 00:23:04,989
and so this is like the optimal case one

00:23:03,369 --> 00:23:10,330
thing changed one thing was rebuilt and

00:23:04,989 --> 00:23:12,039
nothing is wasted yeah so is it doesn't

00:23:10,330 --> 00:23:15,099
wouldn't like the dependency graph

00:23:12,039 --> 00:23:16,779
provide you with the information in my

00:23:15,099 --> 00:23:18,909
last slide so this is this is our

00:23:16,779 --> 00:23:20,559
current state of Hermits logic and the

00:23:18,909 --> 00:23:21,940
research project is how do we get that

00:23:20,559 --> 00:23:25,330
information out to have even more

00:23:21,940 --> 00:23:26,830
intelligent rebuilds all right yeah and

00:23:25,330 --> 00:23:28,479
then part of the problem is that rpm the

00:23:26,830 --> 00:23:29,950
spec files aren't possible right they

00:23:28,479 --> 00:23:31,419
kind of have to be executed in a context

00:23:29,950 --> 00:23:32,679
so what is the real build requires you

00:23:31,419 --> 00:23:34,149
don't know until you've already started

00:23:32,679 --> 00:23:39,969
to build it yeah so I need our game

00:23:34,149 --> 00:23:41,289
scientists so that was the first case

00:23:39,969 --> 00:23:42,519
the nice case here's a here's a slightly

00:23:41,289 --> 00:23:44,559
worst case where let's say the dine-in

00:23:42,519 --> 00:23:46,690
spec file changed you submit a bill to

00:23:44,559 --> 00:23:48,789
this module or and this is an image on

00:23:46,690 --> 00:23:50,229
collegiate stomach with freshmaker the

00:23:48,789 --> 00:23:52,119
automated system will be submitting

00:23:50,229 --> 00:23:53,289
built in this model but the modular

00:23:52,119 --> 00:23:55,359
build service once it receives this

00:23:53,289 --> 00:23:56,739
request to build the larger model it

00:23:55,359 --> 00:23:58,659
will look and see the Diamonds change

00:23:56,739 --> 00:24:00,309
and so because it knows that sequel at

00:23:58,659 --> 00:24:02,559
develop and dynastar in the same builder

00:24:00,309 --> 00:24:04,809
order group it will reuse one because

00:24:02,559 --> 00:24:06,279
its ability of the Diamonds wasn't

00:24:04,809 --> 00:24:08,079
present in the Builder the last time it

00:24:06,279 --> 00:24:09,729
was built so they can just be reused

00:24:08,079 --> 00:24:12,399
Dinah's has to be rebuilt for the change

00:24:09,729 --> 00:24:13,509
but then everything in group 3 then gets

00:24:12,399 --> 00:24:15,609
rebuilt from the source because

00:24:13,509 --> 00:24:17,049
something new is influencing its build

00:24:15,609 --> 00:24:19,119
route that wasn't there the last time

00:24:17,049 --> 00:24:21,639
around and then here's the here's the

00:24:19,119 --> 00:24:23,829
worst case if the chip path spec file

00:24:21,639 --> 00:24:26,139
changes it gets rebuilt the other things

00:24:23,829 --> 00:24:28,450
in its build order group get reused but

00:24:26,139 --> 00:24:30,309
then all of a subsequent builder curves

00:24:28,450 --> 00:24:32,969
get rebuilt from source that's the

00:24:30,309 --> 00:24:32,969
current state offense

00:24:34,069 --> 00:24:41,209
so a review of NBS internals check my

00:24:36,440 --> 00:24:43,009
timer and I'm sure the NBS internals the

00:24:41,209 --> 00:24:44,509
point here is to get an idea of how

00:24:43,009 --> 00:24:45,889
things are organized in the NBS source

00:24:44,509 --> 00:24:47,419
code so that you can get into it and

00:24:45,889 --> 00:24:49,190
have some bearings to help patch and

00:24:47,419 --> 00:24:51,049
change things so there's two major cross

00:24:49,190 --> 00:24:53,269
diseases there's a web front end and a

00:24:51,049 --> 00:24:55,459
back end scheduler the web friend

00:24:53,269 --> 00:24:56,869
receives requests from users or from

00:24:55,459 --> 00:24:58,369
other automated systems like freshmaker

00:24:56,869 --> 00:25:00,109
is saying I want to I want you to build

00:24:58,369 --> 00:25:02,179
this particular module and it doesn't do

00:25:00,109 --> 00:25:03,679
very much it does some validation on the

00:25:02,179 --> 00:25:06,289
the module MD file to make sure it's

00:25:03,679 --> 00:25:08,569
sane in the muslim' V file are listed

00:25:06,289 --> 00:25:10,309
RPM spec files that should be pulled in

00:25:08,569 --> 00:25:12,949
as part of the module and just get

00:25:10,309 --> 00:25:14,539
branches so the NBS will validate that

00:25:12,949 --> 00:25:16,129
and go and check disk it to make sure

00:25:14,539 --> 00:25:17,589
those branches exist and it'll record

00:25:16,129 --> 00:25:19,969
the refs

00:25:17,589 --> 00:25:22,759
so we know exactly what was built I

00:25:19,969 --> 00:25:24,199
think this round of the module for it

00:25:22,759 --> 00:25:25,999
then announces a message that's picked

00:25:24,199 --> 00:25:27,619
up by the backend that says you know to

00:25:25,999 --> 00:25:30,739
start actually doing work on building

00:25:27,619 --> 00:25:32,119
this model as modules are built they

00:25:30,739 --> 00:25:33,889
passed through a variety of states

00:25:32,119 --> 00:25:35,539
here's a diagram to kind of skip over

00:25:33,889 --> 00:25:36,799
but if you want to know the details come

00:25:35,539 --> 00:25:38,449
back and look at it

00:25:36,799 --> 00:25:40,190
things move from init to wait to build

00:25:38,449 --> 00:25:41,419
and the build takes a very long time and

00:25:40,190 --> 00:25:43,909
at the end there's have done in a ready

00:25:41,419 --> 00:25:49,639
state that denotes things are ready to

00:25:43,909 --> 00:25:51,529
be composed the building steps in Kouji

00:25:49,639 --> 00:25:52,699
so this meant that center state the

00:25:51,529 --> 00:25:54,589
build state that takes a long amount of

00:25:52,699 --> 00:25:55,759
time the bulk of that work is the the

00:25:54,589 --> 00:25:56,989
process of going through those build

00:25:55,759 --> 00:25:58,999
order groups like I described in a

00:25:56,989 --> 00:26:00,169
previous slide but note that two things

00:25:58,999 --> 00:26:01,429
happen at the very beginning of that

00:26:00,169 --> 00:26:05,359
process that are worth being aware of

00:26:01,429 --> 00:26:06,949
the first is that the MDS creates the

00:26:05,359 --> 00:26:08,779
tags and Kouji that are going to contain

00:26:06,949 --> 00:26:10,999
the RPM to this module creates a build

00:26:08,779 --> 00:26:12,550
tag and like a distribution tag where

00:26:10,999 --> 00:26:13,870
the content

00:26:12,550 --> 00:26:16,690
that you're outputting ultimately gets

00:26:13,870 --> 00:26:20,110
tagged into and importantly the build

00:26:16,690 --> 00:26:21,940
tag though uses Koji tag inheritance and

00:26:20,110 --> 00:26:23,950
and sets up the relationships based on

00:26:21,940 --> 00:26:25,720
the build requires that you specify in

00:26:23,950 --> 00:26:29,080
your modular D say we're building an

00:26:25,720 --> 00:26:31,180
HTTP D 2.4 module that might depend at

00:26:29,080 --> 00:26:33,160
Build time on the platform module and so

00:26:31,180 --> 00:26:34,570
the platform 27 tag that was produced by

00:26:33,160 --> 00:26:36,550
another multiple that's another point in

00:26:34,570 --> 00:26:38,050
time is brought in through code you tag

00:26:36,550 --> 00:26:39,880
inheritance so that all of its rpms are

00:26:38,050 --> 00:26:41,740
available at Build time even though

00:26:39,880 --> 00:26:47,980
there's those don't get like rolled into

00:26:41,740 --> 00:26:50,350
the output of your HTTP 2.4 cool for the

00:26:47,980 --> 00:26:52,210
curious what we do with the build groups

00:26:50,350 --> 00:26:54,790
in koji which define what things get

00:26:52,210 --> 00:26:57,550
installed by default are specified in

00:26:54,790 --> 00:26:59,410
terms of the install profiles of the

00:26:57,550 --> 00:27:01,570
modules we reuse that feature for

00:26:59,410 --> 00:27:03,040
client-side use about you know whether

00:27:01,570 --> 00:27:05,380
you wanna be in a server profile or a

00:27:03,040 --> 00:27:07,210
client profile and to build an S rpm

00:27:05,380 --> 00:27:14,140
build profiles that determine behavior

00:27:07,210 --> 00:27:16,570
at build time the code in the backend is

00:27:14,140 --> 00:27:18,850
organized something like this there is a

00:27:16,570 --> 00:27:21,370
central consumer that receives messages

00:27:18,850 --> 00:27:23,230
from the message bus and it passes off

00:27:21,370 --> 00:27:24,940
those messages to a variety of handlers

00:27:23,230 --> 00:27:26,500
that are a part of the code each of

00:27:24,940 --> 00:27:28,060
those handlers corresponds with a type

00:27:26,500 --> 00:27:31,030
of event that should be responsible for

00:27:28,060 --> 00:27:33,400
handling a modules handler for instance

00:27:31,030 --> 00:27:35,320
might respond to events from the MVS web

00:27:33,400 --> 00:27:38,080
that says you know Ian has requested a

00:27:35,320 --> 00:27:39,610
model build and it has entered the the

00:27:38,080 --> 00:27:41,320
wait state and so that's received by the

00:27:39,610 --> 00:27:42,670
module handler module has entered the

00:27:41,320 --> 00:27:45,280
state what do I do in that context when

00:27:42,670 --> 00:27:46,840
will you start building the process of

00:27:45,280 --> 00:27:48,400
building submits builds tukoji and as

00:27:46,840 --> 00:27:50,230
each of those components as rpm's

00:27:48,400 --> 00:27:51,910
finished building their routed through

00:27:50,230 --> 00:27:53,770
the consumer to the components handler

00:27:51,910 --> 00:27:56,080
which says this rpm finish successfully

00:27:53,770 --> 00:27:57,580
ok remember that this rpm failed ok

00:27:56,080 --> 00:27:59,580
remember that we can fail the module

00:27:57,580 --> 00:28:01,380
build and they said that code

00:27:59,580 --> 00:28:03,000
in the components handler it's about if

00:28:01,380 --> 00:28:04,530
it's organized in response to the events

00:28:03,000 --> 00:28:07,790
that those are responsible for and

00:28:04,530 --> 00:28:07,790
that's the nice to take away yeah

00:28:13,330 --> 00:28:17,879
well we tournament Kenny king bow the

00:28:15,730 --> 00:28:17,879
arrow

00:28:23,820 --> 00:28:26,600
a serious offense

00:28:29,040 --> 00:28:32,790
no that's just by virtue of the diagram

00:28:31,410 --> 00:28:34,080
it's not it's not significant it's just

00:28:32,790 --> 00:28:35,850
that there are different kinds of events

00:28:34,080 --> 00:28:37,530
coming out of Koji and then the consumer

00:28:35,850 --> 00:28:39,570
makes determinations about which one

00:28:37,530 --> 00:28:44,400
goes well just trying to see suggests

00:28:39,570 --> 00:28:45,600
that there is routing involved yeah and

00:28:44,400 --> 00:28:47,550
I was supposed to repeat the question

00:28:45,600 --> 00:28:49,380
yes is there significance to the

00:28:47,550 --> 00:28:56,220
curviness of the lines and the answer is

00:28:49,380 --> 00:28:58,200
no a word about local builds when you do

00:28:56,220 --> 00:28:59,730
an NBS local command on your own box you

00:28:58,200 --> 00:29:01,170
can build modules locally using this

00:28:59,730 --> 00:29:02,910
local mock back-end that we implemented

00:29:01,170 --> 00:29:04,260
and the thing to take away here is that

00:29:02,910 --> 00:29:05,970
when you do that it's not a separate

00:29:04,260 --> 00:29:07,560
piece of software you're actually firing

00:29:05,970 --> 00:29:09,420
up on your own machine the exact same

00:29:07,560 --> 00:29:11,160
software of the NBS scheduler that we

00:29:09,420 --> 00:29:13,290
run in infrastructure just using a

00:29:11,160 --> 00:29:14,400
different builder back-end so that means

00:29:13,290 --> 00:29:15,870
that local builds are maybe a little

00:29:14,400 --> 00:29:17,220
more complex and they would need to be

00:29:15,870 --> 00:29:18,540
but the benefit is that we have one

00:29:17,220 --> 00:29:21,140
piece of software we're sharing between

00:29:18,540 --> 00:29:23,280
those two environments and so bug fixes

00:29:21,140 --> 00:29:25,910
there's a thing to be aware of if you

00:29:23,280 --> 00:29:25,910
get it - yes

00:29:27,920 --> 00:29:31,880
I'm out of time here some things we need

00:29:30,290 --> 00:29:33,680
to work on one was the question about

00:29:31,880 --> 00:29:35,420
doing smarter more intelligent component

00:29:33,680 --> 00:29:36,590
reuse and that's on our radar there are

00:29:35,420 --> 00:29:38,000
other things like build time filtering

00:29:36,590 --> 00:29:40,370
and transitive depths when you say you

00:29:38,000 --> 00:29:42,500
depend so your httpd and you depend on

00:29:40,370 --> 00:29:43,970
like an intermediary module and it

00:29:42,500 --> 00:29:45,530
depends on the platform you

00:29:43,970 --> 00:29:47,210
unfortunately have to also specify that

00:29:45,530 --> 00:29:49,040
you depend on platform in your module at

00:29:47,210 --> 00:29:50,720
Build time because the the transitive

00:29:49,040 --> 00:29:52,670
runtime DEP isn't respected in the NBS

00:29:50,720 --> 00:29:53,840
but that is easy to fix and they

00:29:52,670 --> 00:29:57,400
understand how to do it it's just a

00:29:53,840 --> 00:29:59,300
matter of cycles next week to learn

00:29:57,400 --> 00:30:01,400
transited essence build time filtering

00:29:59,300 --> 00:30:11,750
are both fall into that context smarter

00:30:01,400 --> 00:30:13,520
components of developed about a month

00:30:11,750 --> 00:30:15,020
ago that describes the the problem and

00:30:13,520 --> 00:30:17,690
our approach to the solution there if

00:30:15,020 --> 00:30:19,040
you want on any any questions for me

00:30:17,690 --> 00:30:21,370
specifically before I hand it off to

00:30:19,040 --> 00:30:21,370
Adam

00:30:24,500 --> 00:30:27,460
as you're sorry

00:30:54,140 --> 00:30:57,910
we MPA tests the first time

00:31:03,000 --> 00:31:06,980
so this always works that's alright

00:31:18,470 --> 00:31:22,370
all right there we go

00:31:34,700 --> 00:31:44,340
okay my name is Adam and I'll be talking

00:31:41,790 --> 00:31:47,460
about how do we do packaging in the

00:31:44,340 --> 00:31:50,580
modularity world and yeah basically

00:31:47,460 --> 00:31:52,770
talking about three main things like

00:31:50,580 --> 00:31:55,770
what is it to do packaging and

00:31:52,770 --> 00:31:57,470
modularity what to do and how we can do

00:31:55,770 --> 00:32:02,070
it

00:31:57,470 --> 00:32:03,780
so the first what it is so basically the

00:32:02,070 --> 00:32:05,340
main concept of the modularity and this

00:32:03,780 --> 00:32:06,870
is just a recap is that we are

00:32:05,340 --> 00:32:10,110
transitioning from one commodity

00:32:06,870 --> 00:32:14,550
distribution to our smaller pieces so

00:32:10,110 --> 00:32:16,890
instead of building magnet 2526 we can

00:32:14,550 --> 00:32:21,570
work independent and then jumps somehow

00:32:16,890 --> 00:32:24,150
merge them together and this is a little

00:32:21,570 --> 00:32:27,780
bit more detailed picture so you can see

00:32:24,150 --> 00:32:30,000
that in traditional fedora it's been

00:32:27,780 --> 00:32:32,850
sorted out by branch so if I build for

00:32:30,000 --> 00:32:38,190
example web server with 25 grand she

00:32:32,850 --> 00:32:40,550
chose me to 2566

00:32:38,190 --> 00:32:44,640
this is very simple but with modularity

00:32:40,550 --> 00:32:46,980
we have arbitrary branching and we have

00:32:44,640 --> 00:32:48,870
these modules and somehow decide what

00:32:46,980 --> 00:32:49,580
goes where and that's why we have the

00:32:48,870 --> 00:32:52,830
movement

00:32:49,580 --> 00:32:59,040
that does many things but describes the

00:32:52,830 --> 00:33:01,650
modules and let's take book toaster and

00:32:59,040 --> 00:33:03,930
we can then reuse it if you want to

00:33:01,650 --> 00:33:06,960
build the final distribution so this is

00:33:03,930 --> 00:33:08,550
like the whole hallway package to

00:33:06,960 --> 00:33:10,920
distribution so I can say that I want to

00:33:08,550 --> 00:33:12,780
build for example database module with a

00:33:10,920 --> 00:33:15,990
native expect you to point out one

00:33:12,780 --> 00:33:19,650
library five level and have a host of

00:33:15,990 --> 00:33:23,130
bathroom there that I can say another

00:33:19,650 --> 00:33:24,720
module in do I want to build an

00:33:23,130 --> 00:33:26,430
Englishman for example that's what they

00:33:24,720 --> 00:33:29,370
do and they have some fun to make but

00:33:26,430 --> 00:33:34,610
for most and maybe some kind of like see

00:33:29,370 --> 00:33:37,530
a lot and that's what we can build the

00:33:34,610 --> 00:33:38,010
food distribution yeah there is also a

00:33:37,530 --> 00:33:41,730
showing

00:33:38,010 --> 00:33:43,740
LTS yeah yes so that's my example of for

00:33:41,730 --> 00:33:45,300
example Michael to spin I can do my own

00:33:43,740 --> 00:33:58,380
spin host platform there's been on

00:33:45,300 --> 00:34:00,960
council LTS for example and there's also

00:33:58,380 --> 00:34:03,360
the concept that in motion or 81 source

00:34:00,960 --> 00:34:09,600
there are many things so when I have to

00:34:03,360 --> 00:34:12,169
vote you continuous RPM packages of in

00:34:09,600 --> 00:34:14,059
the future many cutbacks

00:34:12,169 --> 00:34:17,179
places but we would cover the same

00:34:14,059 --> 00:34:19,309
source so many things what we fetch it

00:34:17,179 --> 00:34:22,579
on my face for example security issue

00:34:19,309 --> 00:34:25,450
English we go everywhere so that's one

00:34:22,579 --> 00:34:25,450
of the concepts we have

00:34:26,270 --> 00:34:31,340
all right so I said would you let me do

00:34:28,280 --> 00:34:35,869
this module MD so I have many pictures

00:34:31,340 --> 00:34:38,720
so yeah it basically decides how to

00:34:35,869 --> 00:34:43,790
build a module what you ship in a module

00:34:38,720 --> 00:34:47,570
and get some hints how to use so first

00:34:43,790 --> 00:34:50,119
help to build so I can decide what

00:34:47,570 --> 00:34:52,280
components go in there so this is that

00:34:50,119 --> 00:34:54,320
on the source level so I can say package

00:34:52,280 --> 00:34:56,480
name and branch of each package I want

00:34:54,320 --> 00:34:59,060
to be present in the module so for

00:34:56,480 --> 00:35:02,860
example an HTTP I could add the httpd

00:34:59,060 --> 00:35:05,750
2.46 file 2.4 package up 2.6 package

00:35:02,860 --> 00:35:07,100
then I can decide the birth order and

00:35:05,750 --> 00:35:10,160
this is what's not talked about so these

00:35:07,100 --> 00:35:12,770
are the blood groups that's also in

00:35:10,160 --> 00:35:15,860
module um D it also defines its

00:35:12,770 --> 00:35:18,980
builders-- so it's also something that

00:35:15,860 --> 00:35:20,840
is so I can say a dependent platform and

00:35:18,980 --> 00:35:23,440
some codependency like dick like this

00:35:20,840 --> 00:35:23,440
very favorite one

00:35:24,880 --> 00:35:29,870
then I can decide what to ship so this

00:35:28,010 --> 00:35:33,410
is the binary module and I can see that

00:35:29,870 --> 00:35:35,360
some packages got into two binary so for

00:35:33,410 --> 00:35:37,460
example have package to devil and

00:35:35,360 --> 00:35:39,620
package 3x curse and I can decide that I

00:35:37,460 --> 00:35:42,800
want to ship the develop a cage so I can

00:35:39,620 --> 00:35:44,900
use a feature called filter to get rid

00:35:42,800 --> 00:35:49,840
of one of the packages just shoot the

00:35:44,900 --> 00:35:54,040
rest an example of that would be

00:35:49,840 --> 00:35:59,390
stripping the X libraries out of oh

00:35:54,040 --> 00:36:01,040
right yeah that's that was an example

00:35:59,390 --> 00:36:03,770
that could be used to stripping the

00:36:01,040 --> 00:36:05,180
excellent libraries because you might

00:36:03,770 --> 00:36:08,020
have a sub package that you have pulls

00:36:05,180 --> 00:36:08,020
the man right

00:36:11,850 --> 00:36:15,020
you filter up

00:36:18,670 --> 00:36:21,220
yeah but there may be for example

00:36:20,079 --> 00:36:23,710
different modules with different use

00:36:21,220 --> 00:36:26,769
cases so you want to have like clean up

00:36:23,710 --> 00:36:29,500
a small container image you don't want

00:36:26,769 --> 00:36:30,700
to provide all of these packages but

00:36:29,500 --> 00:36:32,890
yeah that's up to you like there might

00:36:30,700 --> 00:36:33,789
be reason to have computers that we

00:36:32,890 --> 00:36:37,150
prefer that's true

00:36:33,789 --> 00:36:39,010
so profiles yeah how to use so I have

00:36:37,150 --> 00:36:41,140
this package the issue of the module an

00:36:39,010 --> 00:36:44,589
issue with these four packages and I can

00:36:41,140 --> 00:36:45,730
say that these two are API that

00:36:44,589 --> 00:36:49,539
basically means that that's what I

00:36:45,730 --> 00:36:52,089
support so if I have HTTP module I would

00:36:49,539 --> 00:36:53,500
have HTTP the package as my API and if

00:36:52,089 --> 00:36:55,690
there are some dependencies that's fine

00:36:53,500 --> 00:36:58,740
but I don't guarantee anything about the

00:36:55,690 --> 00:37:01,380
dependencies I guarantee only the HTTP

00:36:58,740 --> 00:37:04,750
and then we have something called

00:37:01,380 --> 00:37:07,059
profiles and that helps users with the

00:37:04,750 --> 00:37:09,609
installation so if I want to install a

00:37:07,059 --> 00:37:12,220
module on my system I can either select

00:37:09,609 --> 00:37:13,960
the packages I want to get installed or

00:37:12,220 --> 00:37:16,690
I can choose one of those in slow

00:37:13,960 --> 00:37:19,450
profiles that can help me and there are

00:37:16,690 --> 00:37:20,980
many ways how to use them so for example

00:37:19,450 --> 00:37:23,859
if I have a database I can have a server

00:37:20,980 --> 00:37:27,339
and client install profile if I have a

00:37:23,859 --> 00:37:30,670
pin that could be normal be minimal or

00:37:27,339 --> 00:37:33,670
with httpd there can be production and

00:37:30,670 --> 00:37:37,150
development so there are many ways how

00:37:33,670 --> 00:37:39,269
to hope to use these and that's what we

00:37:37,150 --> 00:37:42,880
want to do basically so it helps you

00:37:39,269 --> 00:37:46,619
build the module it helps you determine

00:37:42,880 --> 00:37:50,049
able to get shipped and also how to use

00:37:46,619 --> 00:37:52,060
one of the example items NSA with the

00:37:50,049 --> 00:37:54,970
filter yeah

00:37:52,060 --> 00:37:56,740
you have to latitude is for example if I

00:37:54,970 --> 00:38:01,930
want to bundle bill dependency I don't

00:37:56,740 --> 00:38:05,640
have to ship the bill dependency so yeah

00:38:01,930 --> 00:38:05,640
that's so many things

00:38:06,080 --> 00:38:14,300
any questions so far about module and

00:38:08,000 --> 00:38:16,070
beam right so now what to do so if I

00:38:14,300 --> 00:38:19,850
want to create a module what should I do

00:38:16,070 --> 00:38:21,650
so yeah the district in two easy steps

00:38:19,850 --> 00:38:23,210
right I need to build the modules and I

00:38:21,650 --> 00:38:25,460
need to group them into distribution

00:38:23,210 --> 00:38:28,790
that's pretty easy so how do the first

00:38:25,460 --> 00:38:32,420
step I need to determine which packages

00:38:28,790 --> 00:38:34,910
go into module and that might be easy

00:38:32,420 --> 00:38:38,030
that might be tricky and yeah we had a

00:38:34,910 --> 00:38:40,340
question about like determining what's

00:38:38,030 --> 00:38:43,430
in every module so they don't overlap

00:38:40,340 --> 00:38:44,870
and just like work with each other so

00:38:43,430 --> 00:38:47,270
that's one of the problem you have to

00:38:44,870 --> 00:38:49,820
deal with then the module name it might

00:38:47,270 --> 00:38:53,740
be easy it might be tricky for httpd

00:38:49,820 --> 00:38:56,180
that's httpd but there might be groups

00:38:53,740 --> 00:38:58,160
that needs to be sorted out and also

00:38:56,180 --> 00:39:02,620
streamlined so for example again with

00:38:58,160 --> 00:39:06,050
httpd that can be version so HTTP 2.0

00:39:02,620 --> 00:39:09,860
HTTP is about 6 but if I have something

00:39:06,050 --> 00:39:11,780
called like Auto tools or lamp stack how

00:39:09,860 --> 00:39:13,880
do I determine the version or the

00:39:11,780 --> 00:39:16,840
streamline so that's one of the things

00:39:13,880 --> 00:39:16,840
we need to think about I guess

00:39:19,160 --> 00:39:25,670
so that's what I need to do and do some

00:39:22,009 --> 00:39:27,970
these are some links so the first is our

00:39:25,670 --> 00:39:31,400
first attempt to deal with the

00:39:27,970 --> 00:39:33,829
dependencies and opal a pain it's

00:39:31,400 --> 00:39:40,009
basically as a vicious good I just take

00:39:33,829 --> 00:39:45,410
care of it yeah if you wanna if you

00:39:40,009 --> 00:39:46,729
wanna do a limb or journey to access to

00:39:45,410 --> 00:39:48,920
this gate so this is the package names

00:39:46,729 --> 00:39:51,380
places in the module name space just as

00:39:48,920 --> 00:39:53,749
this kid and we have the packaging

00:39:51,380 --> 00:39:55,160
diamond in the process here I'll share

00:39:53,749 --> 00:39:56,049
the slides so village who ever loved

00:39:55,160 --> 00:40:00,319
them

00:39:56,049 --> 00:40:02,509
alright so that's what we need to do to

00:40:00,319 --> 00:40:06,819
go the packages and then there is this

00:40:02,509 --> 00:40:08,960
idea how to form the actual distribution

00:40:06,819 --> 00:40:12,200
so what we are having now for example

00:40:08,960 --> 00:40:15,529
want to ship the 27 server as a modular

00:40:12,200 --> 00:40:19,190
prototype but who will decide what

00:40:15,529 --> 00:40:20,749
modules go in there it's easy right down

00:40:19,190 --> 00:40:22,130
just all of that right that we still

00:40:20,749 --> 00:40:25,140
have to list them so there is a buncha

00:40:22,130 --> 00:40:26,820
complete we need to fill out

00:40:25,140 --> 00:40:28,650
we need to still decide who will own it

00:40:26,820 --> 00:40:30,330
and what to do when there is a

00:40:28,650 --> 00:40:32,660
discussion after this where we can talk

00:40:30,330 --> 00:40:34,890
about it but in the future this could be

00:40:32,660 --> 00:40:38,820
in the way I had on the previous slide

00:40:34,890 --> 00:40:41,880
and we see the next slide so I could

00:40:38,820 --> 00:40:44,250
just write a module on D file based over

00:40:41,880 --> 00:40:47,610
what is I would include the dependencies

00:40:44,250 --> 00:40:49,590
that I use that define G country just a

00:40:47,610 --> 00:40:56,970
single module will contain everything

00:40:49,590 --> 00:40:58,470
even the SLA or end of life so this is

00:40:56,970 --> 00:41:03,000
just an idea let's talk about it later

00:40:58,470 --> 00:41:05,490
and I hope to do it that's part of the

00:41:03,000 --> 00:41:09,150
workshop so tomash in the back you will

00:41:05,490 --> 00:41:14,300
have workshop at 4:00 yeah so definitely

00:41:09,150 --> 00:41:14,300
welcome to come here and fight this off

00:41:14,360 --> 00:41:20,360
now that's all for me if any questions

00:41:21,430 --> 00:41:31,360
no you guys question failure yeah I just

00:41:29,950 --> 00:41:35,110
turned one you got the whole to tell you

00:41:31,360 --> 00:41:36,550
I was gonna comment all that stuff that

00:41:35,110 --> 00:41:38,440
you saw linked to everything we talked

00:41:36,550 --> 00:41:41,890
about everything else is basically there

00:41:38,440 --> 00:42:01,300
so you know start if you want one URL to

00:41:41,890 --> 00:42:03,900
remember that's the one you list so some

00:42:01,300 --> 00:42:03,900
p.m. packages

00:42:11,400 --> 00:42:15,090
but yes the reason you would filter it

00:42:13,620 --> 00:42:17,080
out if you were expressed the time to

00:42:15,090 --> 00:42:19,270
point

00:42:17,080 --> 00:42:21,790
but for example you have a package that

00:42:19,270 --> 00:42:23,740
has a set of plugins that includes the

00:42:21,790 --> 00:42:26,050
sub packages and things one of those

00:42:23,740 --> 00:42:30,250
plugins nobody uses but pulls in the

00:42:26,050 --> 00:42:32,030
entire max stack perception you don't

00:42:30,250 --> 00:42:35,960
need that

00:42:32,030 --> 00:42:42,770
so the problem I was referring to that

00:42:35,960 --> 00:42:42,770
your make the cream on top of say you

00:42:44,620 --> 00:42:49,180
jumping instruction in the filter out

00:42:46,180 --> 00:42:51,850
some of the sub packages then the pretty

00:42:49,180 --> 00:42:54,310
hard to take that and in fact the

00:42:51,850 --> 00:42:58,050
filtering should really be done to be an

00:42:54,310 --> 00:42:58,050
exceptional case admission

00:42:59,210 --> 00:43:05,250
preventing well and there's the flipside

00:43:03,210 --> 00:43:06,720
of that too which is that you know one

00:43:05,250 --> 00:43:09,630
of the problems we have today with the

00:43:06,720 --> 00:43:12,350
RPM world is that anything that is an

00:43:09,630 --> 00:43:15,750
RPM that's being built is assumed to be

00:43:12,350 --> 00:43:18,480
in good shape and stable and supported

00:43:15,750 --> 00:43:19,890
by the people who do it right what one

00:43:18,480 --> 00:43:22,440
of the things that you can do here right

00:43:19,890 --> 00:43:24,690
is you can say no I don't want you

00:43:22,440 --> 00:43:26,100
building stuff on top of this or you can

00:43:24,690 --> 00:43:28,470
but you can only build it on top of

00:43:26,100 --> 00:43:30,450
these small set of pieces because I

00:43:28,470 --> 00:43:32,850
can't let the API set right that's the

00:43:30,450 --> 00:43:35,910
DP I said yeah so I'm just gonna be the

00:43:32,850 --> 00:43:39,390
point that the flexibility here is also

00:43:35,910 --> 00:43:41,910
to allow to to scope what people are

00:43:39,390 --> 00:44:04,590
gonna depend on and if you want to

00:43:41,910 --> 00:44:06,300
create a difference right great exactly

00:44:04,590 --> 00:44:09,960
there's lots of different options and I

00:44:06,300 --> 00:44:11,640
really think with kind of like the tiger

00:44:09,960 --> 00:44:14,760
on disc it you know not without its

00:44:11,640 --> 00:44:16,140
problems but the the real advantage of

00:44:14,760 --> 00:44:19,200
it is it kind of changes the mindset

00:44:16,140 --> 00:44:21,660
around collaboration on acting

00:44:19,200 --> 00:44:23,579
that you know it's very very easy now to

00:44:21,660 --> 00:44:25,710
say hey you'd be really cool if you did

00:44:23,579 --> 00:44:28,440
this and here's the patch to do it and

00:44:25,710 --> 00:44:29,910
then the receiver can decide to consume

00:44:28,440 --> 00:44:48,660
that I think that's much harder with

00:44:29,910 --> 00:44:52,440
disk in more questions matter of

00:44:48,660 --> 00:44:54,510
contention but so there's the the

00:44:52,440 --> 00:44:58,829
problem is that we use the term install

00:44:54,510 --> 00:45:01,680
with our PMS and what we actually mean

00:44:58,829 --> 00:45:03,750
is that at some prior point I enabled a

00:45:01,680 --> 00:45:06,839
young repo that allows me to install

00:45:03,750 --> 00:45:08,640
this RPM but those two those two steps

00:45:06,839 --> 00:45:09,810
are so far apart from each other people

00:45:08,640 --> 00:45:11,310
don't realize that you have to do the

00:45:09,810 --> 00:45:14,640
one in to do the other

00:45:11,310 --> 00:45:16,710
so to collapse that and make it so it's

00:45:14,640 --> 00:45:18,810
not that's confusing with DNF when you

00:45:16,710 --> 00:45:20,640
install a module you're actually

00:45:18,810 --> 00:45:22,890
enabling the module and then actually

00:45:20,640 --> 00:45:24,930
installing some set of rpms that some

00:45:22,890 --> 00:45:30,329
set of rpms is defined by the profile

00:45:24,930 --> 00:45:31,650
the install profile you know there's an

00:45:30,329 --> 00:45:33,839
actual thing that says okay here's the

00:45:31,650 --> 00:45:35,670
minimal or here's the maximal or here's

00:45:33,839 --> 00:45:39,510
the you know dead version or whatever

00:45:35,670 --> 00:45:45,060
and as a reserved word default specify

00:45:39,510 --> 00:45:48,810
this right with existing technology that

00:45:45,060 --> 00:45:53,069
can be referred as the install groups

00:45:48,810 --> 00:45:54,599
right right so the kicker though is in

00:45:53,069 --> 00:45:56,880
point where I was kind of getting to an

00:45:54,599 --> 00:46:00,300
alarm fashion is that you can just

00:45:56,880 --> 00:46:03,390
enable the module by calling enable so

00:46:00,300 --> 00:46:04,560
and get no packages or really what you

00:46:03,390 --> 00:46:06,480
will probably do right it's one of the

00:46:04,560 --> 00:46:08,410
name of the module and then say I want

00:46:06,480 --> 00:46:09,700
that one package and that one

00:46:08,410 --> 00:46:11,140
other package that has nothing to do

00:46:09,700 --> 00:46:15,510
with the normal install for whatever

00:46:11,140 --> 00:46:15,510
reason conversation yeah

00:46:24,790 --> 00:46:38,510
can you repeat the question

00:46:27,020 --> 00:46:42,520
unser I can hear your question in that

00:46:38,510 --> 00:46:42,520
context of software on

00:46:48,400 --> 00:46:53,870
doing nothing about how us personally

00:46:50,800 --> 00:46:55,730
guess that person when you're using the

00:46:53,870 --> 00:46:56,750
DNF tool that's modular where you can

00:46:55,730 --> 00:47:00,100
build things it's still in the

00:46:56,750 --> 00:47:02,330
traditional way on top of the repo of

00:47:00,100 --> 00:47:03,950
Dora and then your build process

00:47:02,330 --> 00:47:05,750
enabling which models you're going to

00:47:03,950 --> 00:47:07,250
defend against is that our gauging

00:47:05,750 --> 00:47:08,720
traditional RF games on public modular

00:47:07,250 --> 00:47:10,910
base if you wanted to additionally build

00:47:08,720 --> 00:47:13,040
your third-party content as modules we

00:47:10,910 --> 00:47:16,820
probably need orchestration tools at the

00:47:13,040 --> 00:47:19,570
NPS to intelligent

00:47:16,820 --> 00:47:19,570
could you

00:47:21,650 --> 00:47:29,599
I mean I think that the short answer is

00:47:27,470 --> 00:47:31,609
the same way you would today with

00:47:29,599 --> 00:47:33,230
slightly more complexity in that you

00:47:31,609 --> 00:47:35,210
know just like today you need a way to

00:47:33,230 --> 00:47:38,299
actually build rpms as your third party

00:47:35,210 --> 00:47:40,010
or if you create so with modules you'll

00:47:38,299 --> 00:47:41,539
also need a way to build modules but

00:47:40,010 --> 00:47:43,549
there's not there's no block or anything

00:47:41,539 --> 00:47:48,160
on you being able to pull that stuff as

00:47:43,549 --> 00:47:48,160
a base yeah

00:47:54,230 --> 00:47:59,750
so we talked about this problem a lot so

00:47:58,099 --> 00:48:01,460
the question is kind of like what is

00:47:59,750 --> 00:48:10,250
this really - like many packages versus

00:48:01,460 --> 00:48:12,650
Tom's groups so yeah so we its modules

00:48:10,250 --> 00:48:14,150
kind of combine both innocence or they

00:48:12,650 --> 00:48:16,099
kind of look like both in kind of

00:48:14,150 --> 00:48:18,320
different ways we have some things

00:48:16,099 --> 00:48:19,700
radically said like you know modules are

00:48:18,320 --> 00:48:21,050
kind of like super groups but at the

00:48:19,700 --> 00:48:35,480
same time the in small profiles are kind

00:48:21,050 --> 00:48:37,160
of like many packages so the idea is

00:48:35,480 --> 00:48:39,050
that I mean so meta packages

00:48:37,160 --> 00:48:41,599
you know are kind of you know a way to

00:48:39,050 --> 00:48:43,070
try to accomplish the same kind of ideas

00:48:41,599 --> 00:48:45,500
like an install profile so kind of

00:48:43,070 --> 00:48:48,320
some-some hint about how to actually get

00:48:45,500 --> 00:48:50,660
the software you need to run some you

00:48:48,320 --> 00:48:52,700
know to accomplish on goal groups are

00:48:50,660 --> 00:48:55,250
kind of like the same thing except in

00:48:52,700 --> 00:48:57,800
more of an eclectic sense so like you

00:48:55,250 --> 00:48:59,900
know was it system tools you know set

00:48:57,800 --> 00:49:01,190
it's like here's a suggestion of what

00:48:59,900 --> 00:49:04,369
you need if you were going to do system

00:49:01,190 --> 00:49:07,579
administration so it's kind of like

00:49:04,369 --> 00:49:09,859
those but kind of more fundamental so

00:49:07,579 --> 00:49:12,890
that there's a lot of overlap with and

00:49:09,859 --> 00:49:14,540
the way I argue it and I'm sure the

00:49:12,890 --> 00:49:17,000
people who invented the other versions

00:49:14,540 --> 00:49:18,319
argue it the same way is that I think

00:49:17,000 --> 00:49:20,869
modularity is trying to go after the

00:49:18,319 --> 00:49:22,819
root of the problem that there's a lot

00:49:20,869 --> 00:49:24,380
of symptomatic solutions for so

00:49:22,819 --> 00:49:27,680
alternatives infrastructure software

00:49:24,380 --> 00:49:30,710
collections meta packages groups etc etc

00:49:27,680 --> 00:49:32,660
etc what modularity is trying to do is

00:49:30,710 --> 00:49:34,910
go after the actual problem rather than

00:49:32,660 --> 00:49:36,200
trying to just fix symptoms but if I bet

00:49:34,910 --> 00:49:38,859
if you ask that and they were saying the

00:49:36,200 --> 00:49:38,859
same thing so

00:49:45,220 --> 00:49:48,290
[Music]

00:49:52,250 --> 00:50:42,380
so much more closely too

00:50:45,730 --> 00:50:50,740
it's gonna be more that's between a

00:50:48,220 --> 00:50:52,330
little bit more and like exponentially

00:50:50,740 --> 00:50:53,470
Oh sister who's going to watch it and

00:50:52,330 --> 00:50:55,000
keep track of it and restructure the

00:50:53,470 --> 00:50:56,620
content is very background but this is

00:50:55,000 --> 00:51:02,050
this is what guidelines and processor

00:50:56,620 --> 00:51:04,300
for not not enabling technology I'm

00:51:02,050 --> 00:51:09,970
looking at how frequently do let's see

00:51:04,300 --> 00:51:13,000
is that I presume almost everything what

00:51:09,970 --> 00:51:17,950
most everything is to inherit one thing

00:51:13,000 --> 00:51:19,540
is that Queen modules right platform we

00:51:17,950 --> 00:51:25,570
build everything in platform rebuilds

00:51:19,540 --> 00:51:26,950
basically so that does look cascade the

00:51:25,570 --> 00:51:29,520
question of cheating rebuilds between

00:51:26,950 --> 00:51:29,520
models of

00:51:40,190 --> 00:51:44,300
we're looking at each one

00:52:30,410 --> 00:52:34,130
yes certainly not anytime sir yeah

00:52:32,270 --> 00:52:35,420
certainly affects students at 27

00:52:34,130 --> 00:52:38,660
workstation is going to be produced

00:52:35,420 --> 00:52:40,550
without models definitely impact that's

00:52:38,660 --> 00:52:41,780
when he external the question if

00:52:40,550 --> 00:52:43,430
everything was fully modular s it

00:52:41,780 --> 00:52:51,340
slicked over third session after this is

00:52:43,430 --> 00:52:54,380
called Wendigo building module for that

00:52:51,340 --> 00:52:58,190
all these models are made up of RPM so

00:52:54,380 --> 00:53:00,490
RPM doesn't get displaced by this so

00:52:58,190 --> 00:53:00,490
that's like

00:53:11,880 --> 00:53:18,160
it's it's more a question of what

00:53:14,410 --> 00:53:21,190
replaces the traditional whole

00:53:18,160 --> 00:53:24,040
repository metadata information

00:53:21,190 --> 00:53:27,430
associated with particular releases pin

00:53:24,040 --> 00:53:32,160
so let's say Fedora 30 goes for the

00:53:27,430 --> 00:53:35,440
modular does it provide DNF or yum

00:53:32,160 --> 00:53:38,290
compatible metadata so that playing

00:53:35,440 --> 00:53:39,970
young or DMF can fetch that that would

00:53:38,290 --> 00:53:44,980
be a question to answer

00:53:39,970 --> 00:53:49,450
not that RPM is that no so at present

00:53:44,980 --> 00:53:53,440
yes that's the goal the problem a little

00:53:49,450 --> 00:53:55,420
bit is just you won't see you basically

00:53:53,440 --> 00:53:58,390
won't see a bunch of the new stuff right

00:53:55,420 --> 00:54:00,220
and you know and so how can you solve

00:53:58,390 --> 00:54:03,070
for that so some of the you know we've

00:54:00,220 --> 00:54:06,070
actually toyed around the idea of kind

00:54:03,070 --> 00:54:07,720
of generating but I refer to his name

00:54:06,070 --> 00:54:09,340
mangled versions of the things so that

00:54:07,720 --> 00:54:13,000
they still are available and they're out

00:54:09,340 --> 00:54:15,700
there and to basically kind of a calm

00:54:13,000 --> 00:54:18,160
processes so you know some old DNF young

00:54:15,700 --> 00:54:22,150
could still work with it just the thing

00:54:18,160 --> 00:54:24,970
is that addition or spin defines exactly

00:54:22,150 --> 00:54:28,000
what goes in it right so at that point

00:54:24,970 --> 00:54:31,660
from the Yama DNF point of view it's

00:54:28,000 --> 00:54:35,130
just a bunch of rpms exactly defined in

00:54:31,660 --> 00:54:39,700
the spin so for that one you generate a

00:54:35,130 --> 00:54:43,660
metadata that young or DNF understand

00:54:39,700 --> 00:54:45,760
and they only understand that spin right

00:54:43,660 --> 00:54:49,119
exactly like we do now so you're not

00:54:45,760 --> 00:54:50,950
losing anything with that of course you

00:54:49,119 --> 00:54:52,840
are not getting the flexibility to

00:54:50,950 --> 00:54:56,500
generate spins but if you're only

00:54:52,840 --> 00:54:59,200
consuming a spin that's if that's your

00:54:56,500 --> 00:55:01,570
point your software continue to work

00:54:59,200 --> 00:55:03,700
right so that's the and that's exactly

00:55:01,570 --> 00:55:04,590
right the only thing is just you also

00:55:03,700 --> 00:55:06,960
need to

00:55:04,590 --> 00:55:09,300
sure that your repository doesn't have

00:55:06,960 --> 00:55:13,020
two different versions of things and

00:55:09,300 --> 00:55:16,500
suddenly that example has like database

00:55:13,020 --> 00:55:18,210
100 and database - Oh singing right then

00:55:16,500 --> 00:55:18,570
the same spin so that I'm K so you love

00:55:18,210 --> 00:55:21,060
you

00:55:18,570 --> 00:55:23,130
legends available should but you need to

00:55:21,060 --> 00:55:27,810
you need a way to say to find installed

00:55:23,130 --> 00:55:33,000
database I want let's say it's a profile

00:55:27,810 --> 00:55:33,770
within the spin so there'll be system

00:55:33,000 --> 00:55:38,460
father

00:55:33,770 --> 00:55:41,250
besides or or addition or spin what is

00:55:38,460 --> 00:55:42,900
the default and if it's not know if you

00:55:41,250 --> 00:55:44,700
but your scenario what I would actually

00:55:42,900 --> 00:55:50,130
do is like if we really did get this

00:55:44,700 --> 00:55:51,750
module on the definition of kind of you

00:55:50,130 --> 00:55:54,420
know basically you would just blacklist

00:55:51,750 --> 00:55:57,930
all the things that were other versions

00:55:54,420 --> 00:56:00,390
yeah which is not the default which is

00:55:57,930 --> 00:56:04,650
not a default profile or you generate

00:56:00,390 --> 00:56:09,810
rapa data per profile and let people

00:56:04,650 --> 00:56:11,370
choose exact URL to to point I think I

00:56:09,810 --> 00:56:13,200
mean we have a lot of options I mean I

00:56:11,370 --> 00:56:16,260
guess the you know but the short answer

00:56:13,200 --> 00:56:18,030
is basically you know as I wrote in the

00:56:16,260 --> 00:56:20,280
blog post about the poll Tron really

00:56:18,030 --> 00:56:22,830
straight is like the idea here is not a

00:56:20,280 --> 00:56:25,590
green field right we're not building a

00:56:22,830 --> 00:56:28,440
brand new thing we're trying to build a

00:56:25,590 --> 00:56:30,720
new feature set on top of a bunch of

00:56:28,440 --> 00:56:31,830
things that we have so I kind of refer

00:56:30,720 --> 00:56:34,230
to as we're kind of turning it on its

00:56:31,830 --> 00:56:35,560
side we're not deleting it and starting

00:56:34,230 --> 00:56:39,820
over

00:56:35,560 --> 00:56:41,800
yes we have we have two minutes left

00:56:39,820 --> 00:57:01,210
formerly in this sessions like whole

00:56:41,800 --> 00:57:02,800
hour for discussion so yeah yes but

00:57:01,210 --> 00:57:05,530
again it's a it's a policy decision

00:57:02,800 --> 00:57:07,840
right I mean again we can shoot

00:57:05,530 --> 00:57:09,160
ourselves in the foot and have you know

00:57:07,840 --> 00:57:11,380
fifty million different versions of

00:57:09,160 --> 00:57:13,900
everything that's out there or we could

00:57:11,380 --> 00:57:16,120
be sane and have maybe two for some

00:57:13,900 --> 00:57:17,920
things you know but for the bulk of it

00:57:16,120 --> 00:57:19,330
actually we have one because it's a

00:57:17,920 --> 00:57:21,430
volunteer community we're not going to

00:57:19,330 --> 00:57:24,100
be able to maintain you know every

00:57:21,430 --> 00:57:26,800
version of everything that ever existed

00:57:24,100 --> 00:57:28,540
so and I don't know why we want to but

00:57:26,800 --> 00:57:30,670
you know during the transition period

00:57:28,540 --> 00:57:33,730
between rails 3 and rails 4 instead of

00:57:30,670 --> 00:57:41,110
saying no you can't upgrade we could

00:57:33,730 --> 00:57:43,240
support both for a while you know we

00:57:41,110 --> 00:57:47,190
might have four different Python

00:57:43,240 --> 00:57:47,190
versions but like

00:57:47,820 --> 00:58:03,010
PHP packages are 15,000 package said if

00:58:01,600 --> 00:58:05,740
they don't make their way into a module

00:58:03,010 --> 00:58:08,230
for 27 server they won't actually be a

00:58:05,740 --> 00:58:09,670
part of our 27 server at Supriya 28 but

00:58:08,230 --> 00:58:11,440
they're like we might have an

00:58:09,670 --> 00:58:13,540
opportunity to call some packages that

00:58:11,440 --> 00:58:15,070
are have been abandoned for years and

00:58:13,540 --> 00:58:16,780
nobody knows that the maintainer has

00:58:15,070 --> 00:58:19,210
actually left but we're still just

00:58:16,780 --> 00:58:20,920
rebuilding and shipping them well in the

00:58:19,210 --> 00:58:22,720
flip of that - is like do we really need

00:58:20,920 --> 00:58:27,960
more than one version or less you know

00:58:22,720 --> 00:58:39,040
like what's the api compatibility

00:58:27,960 --> 00:58:40,960
guarantees of less right yes retention

00:58:39,040 --> 00:58:43,320
policies components but again it's just

00:58:40,960 --> 00:58:43,320
policy

00:58:45,470 --> 00:58:50,420
we know I'm Pia GPIOs

00:58:47,589 --> 00:58:51,680
requirements depending on dad hold on a

00:58:50,420 --> 00:58:54,319
minute

00:58:51,680 --> 00:58:55,940
no I meant policy as in we just have to

00:58:54,319 --> 00:58:58,040
set a policy that we will retain those

00:58:55,940 --> 00:58:59,930
things for the appropriate amount of

00:58:58,040 --> 00:59:00,619
time based on the rules we're supposed

00:58:59,930 --> 00:59:01,609
to follow

00:59:00,619 --> 00:59:05,470
I mean it doesn't really have a

00:59:01,609 --> 00:59:05,470
particularly strong technical time

00:59:10,560 --> 00:59:15,680
right alright Matt now it's your turn

00:59:44,890 --> 00:59:50,020
this is the conversation in German

00:59:46,970 --> 00:59:50,020
detective over left

00:59:55,280 --> 00:59:59,840
reversible a shared model and legacies

00:59:58,700 --> 01:00:01,710
been exploring different ways to

00:59:59,840 --> 01:00:05,880
structure that and

01:00:01,710 --> 01:00:08,520
I believe the built service - okay we

01:00:05,880 --> 01:00:10,710
are and public of time producer this the

01:00:08,520 --> 01:00:12,990
back session is just so we just close it

01:00:10,710 --> 01:00:15,740
out for the video these are ready for

01:00:12,990 --> 01:00:15,740

YouTube URL: https://www.youtube.com/watch?v=BbzO_-TKqic


