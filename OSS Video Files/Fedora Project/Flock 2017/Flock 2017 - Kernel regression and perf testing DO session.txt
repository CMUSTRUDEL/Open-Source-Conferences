Title: Flock 2017 - Kernel regression and perf testing DO session
Publication date: 2017-11-20
Playlist: Flock 2017
Description: 
	Thursday August 31, 2017 4:00pm - 6:00pm
@Cape Cod
Talk: Kernel regression and perf testing DO session
Presenter: Sumantro Mukherjee

Description:
Most of us test the kernel on our lenovo but we hardly get the chance to test the new kernel
on various off the shelf hardwares. Flock will be a good place where we will have many people
who will have different kinds of hardware and the aim of the do session will be to test if
everything works fine and or not. We also have a big spectrum of ARM devices and certified h/w most of which
can benefit from larger community involvement.Also , going forward we can have a kernel test day
as a part of the release which can help make fedora better.

Resources : fedoraproject.org/wiki/KernelTestingInitiative
http://fedoraproject.org/wiki/KernelRegressionTestGuidelines

Blogs:
http://sumantrom.blogspot.in/2017/06/kernel-performance-testing-on-arm.html
http://sumantrom.blogspot.in/2017/02/kernel-testing-made-easy.html

Adamw,Kparal,Tflink,Lukas,Roshi,Josef,jforbes are the people who are good to have.
Captions: 
	00:00:00,030 --> 00:00:05,549
so I'm sure Montreux this is a new

00:00:03,480 --> 00:00:08,220
session mostly so we are going to make

00:00:05,549 --> 00:00:10,349
sure that you run some of the tests

00:00:08,220 --> 00:00:13,650
that's what the whole intention of the

00:00:10,349 --> 00:00:16,500
session is but to start with let's start

00:00:13,650 --> 00:00:18,150
off with the very idea of why is this

00:00:16,500 --> 00:00:21,510
session of this and why you guys are

00:00:18,150 --> 00:00:24,000
here so the whole idea that started

00:00:21,510 --> 00:00:26,849
words being kind of test Fedora on

00:00:24,000 --> 00:00:30,300
different architectures and different

00:00:26,849 --> 00:00:33,450
hardness and now we have attending me as

00:00:30,300 --> 00:00:35,730
a red Hatter I test it on a tee for 60s

00:00:33,450 --> 00:00:39,450
and mostly most of the Red Hatters do

00:00:35,730 --> 00:00:41,040
that so we hardly face issues but when

00:00:39,450 --> 00:00:43,350
it comes to off-the-shelf community

00:00:41,040 --> 00:00:45,030
hardware's there are tons and tons of

00:00:43,350 --> 00:00:48,840
hardware's where we keep tearing issues

00:00:45,030 --> 00:00:51,680
which I'm not that great to hear about

00:00:48,840 --> 00:00:54,930
but then they they complain a lot about

00:00:51,680 --> 00:00:57,870
Wi-Fi driver was not working some chips

00:00:54,930 --> 00:01:00,510
are not working and that kind of like

00:00:57,870 --> 00:01:03,930
tells us that here how do you need to

00:01:00,510 --> 00:01:05,939
fix some of those stops so the whole

00:01:03,930 --> 00:01:08,700
idea of this session would be kind of to

00:01:05,939 --> 00:01:10,770
make sure that anyone being a red-hot

00:01:08,700 --> 00:01:14,820
iron on red Hatter can start learning

00:01:10,770 --> 00:01:18,150
how to test basic stops and then report

00:01:14,820 --> 00:01:20,970
them back to the culinary team Frederick

00:01:18,150 --> 00:01:23,549
already so essentially people who start

00:01:20,970 --> 00:01:25,470
understanding okay these are the things

00:01:23,549 --> 00:01:28,229
which failed these are the things which

00:01:25,470 --> 00:01:30,570
passed and things like that so to start

00:01:28,229 --> 00:01:32,579
off with most of my boring weather

00:01:30,570 --> 00:01:37,890
talking work was covered in the last

00:01:32,579 --> 00:01:40,770
session half of it precisely start with

00:01:37,890 --> 00:01:43,079
let's go to this page so there's this

00:01:40,770 --> 00:01:48,110
thing called kernel testing initiative

00:01:43,079 --> 00:01:48,110
which which

00:01:54,450 --> 00:01:57,660
so there is this initiative called

00:01:56,010 --> 00:02:01,350
Condor testing initiative which was

00:01:57,660 --> 00:02:03,840
started by federal colonel team and this

00:02:01,350 --> 00:02:06,960
wiki page besides we're mostly

00:02:03,840 --> 00:02:08,670
everything about how to test and water

00:02:06,960 --> 00:02:10,009
tests and what are the fall kind of

00:02:08,670 --> 00:02:12,900
recites this is the whole initiative

00:02:10,009 --> 00:02:16,130
programs which is there now this

00:02:12,900 --> 00:02:18,270
basically is one thing that I suggest

00:02:16,130 --> 00:02:20,160
most of the community people to get

00:02:18,270 --> 00:02:23,490
started off with when they are trying to

00:02:20,160 --> 00:02:26,640
kind of getting started of testing

00:02:23,490 --> 00:02:28,890
currents now in this link there is one

00:02:26,640 --> 00:02:32,850
specific pointer which would give you a

00:02:28,890 --> 00:02:35,250
guideline sort of for our regression

00:02:32,850 --> 00:02:38,070
testing and then there it would point

00:02:35,250 --> 00:02:40,950
you to a bunch of test suits so which is

00:02:38,070 --> 00:02:43,830
this kernel regression test suit so it's

00:02:40,950 --> 00:02:46,110
a fairly simple process there's a gate

00:02:43,830 --> 00:02:48,720
reform which you clone and then you

00:02:46,110 --> 00:02:51,810
install three specific packages so

00:02:48,720 --> 00:02:54,810
Fedora Python fedora for reporting CCC

00:02:51,810 --> 00:02:58,830
and get for basically kit for cloning

00:02:54,810 --> 00:03:02,340
and gzz for like whatever the process is

00:02:58,830 --> 00:03:04,700
when you start running there is run run

00:03:02,340 --> 00:03:07,260
tests on SH so that's what is the

00:03:04,700 --> 00:03:09,290
minimum pretty explicit that you have to

00:03:07,260 --> 00:03:12,780
start off there so once you have done

00:03:09,290 --> 00:03:16,470
cloning this part if you once you have

00:03:12,780 --> 00:03:18,510
flown this you probably and having this

00:03:16,470 --> 00:03:22,380
kind of something like that so this is

00:03:18,510 --> 00:03:25,769
going to have a performance where you're

00:03:22,380 --> 00:03:27,959
going to see a bunch of tests there and

00:03:25,769 --> 00:03:30,570
then there is going to be this script

00:03:27,959 --> 00:03:34,739
called run tests toward SH which your

00:03:30,570 --> 00:03:37,500
mother run as a person I like us on a VM

00:03:34,739 --> 00:03:41,900
or like on a bare-metal wherever you

00:03:37,500 --> 00:03:45,400
want to test so I ran the test and

00:03:41,900 --> 00:03:45,400
right again just

00:03:58,010 --> 00:04:02,599
but people do live

00:04:03,240 --> 00:04:12,570
so I did not configure the config file

00:04:10,950 --> 00:04:13,970
you can actually put up your fast

00:04:12,570 --> 00:04:17,760
details over there which is basically

00:04:13,970 --> 00:04:20,310
directly uploaded to the web app I did

00:04:17,760 --> 00:04:22,830
not put it there but if you want you can

00:04:20,310 --> 00:04:27,410
just edit the configuration the steps

00:04:22,830 --> 00:04:27,410
are pretty much in this document itself

00:04:27,740 --> 00:04:35,940
steps are very much this document

00:04:34,740 --> 00:04:37,470
actually does need to be updated there

00:04:35,940 --> 00:04:39,930
are a couple of new things be better to

00:04:37,470 --> 00:04:42,150
config now like the option to test the

00:04:39,930 --> 00:04:44,430
that the Nvidia module works with new

00:04:42,150 --> 00:04:49,830
kernels okay or that it compiles against

00:04:44,430 --> 00:04:51,570
them anyway and then changes yeah I mean

00:04:49,830 --> 00:04:53,370
they're actually in config it's just

00:04:51,570 --> 00:04:58,950
they're documented in the grey guys

00:04:53,370 --> 00:05:00,900
haven't okay sure so that so that's

00:04:58,950 --> 00:05:03,510
gonna run and it's basically going to

00:05:00,900 --> 00:05:05,460
end up giving you a link to a text file

00:05:03,510 --> 00:05:07,740
which you could then upload that's

00:05:05,460 --> 00:05:12,140
basically what the whole process goes

00:05:07,740 --> 00:05:15,500
like moving forward yeah it has passed

00:05:12,140 --> 00:05:15,500
most of it

00:05:15,840 --> 00:05:24,450
so what I wanted to do with this is keep

00:05:21,030 --> 00:05:27,530
on having federal QA onboarding cause

00:05:24,450 --> 00:05:30,620
we're new contributors come in and they

00:05:27,530 --> 00:05:33,410
learn how to test multiple things in

00:05:30,620 --> 00:05:37,400
federal one of the things that I focus

00:05:33,410 --> 00:05:39,710
on in those kind of places I kind of

00:05:37,400 --> 00:05:42,800
focus on getting the kernel tested so I

00:05:39,710 --> 00:05:45,110
have a bunch of community people in like

00:05:42,800 --> 00:05:47,000
in the QA team who are involved and you

00:05:45,110 --> 00:05:49,670
get the country tested and they upload

00:05:47,000 --> 00:05:51,560
their logs and they do it on a regular

00:05:49,670 --> 00:05:54,710
basis so yeah that's kind of great for

00:05:51,560 --> 00:05:57,890
us but what I wanted out of it was if we

00:05:54,710 --> 00:05:59,900
could have that's what I proposed in the

00:05:57,890 --> 00:06:02,660
last session you can have a test day a

00:05:59,900 --> 00:06:06,980
specific day where people probably be

00:06:02,660 --> 00:06:09,530
testing things and filing bugs and later

00:06:06,980 --> 00:06:11,690
on probably because much you're that

00:06:09,530 --> 00:06:14,600
model to obey where we can have this a

00:06:11,690 --> 00:06:17,450
very specific calendar event for every

00:06:14,600 --> 00:06:20,630
release every cycle some specific time

00:06:17,450 --> 00:06:24,320
we have this test error so mostly like

00:06:20,630 --> 00:06:26,930
we have two regular test days on I 18

00:06:24,320 --> 00:06:28,700
and cloud that's basically those are two

00:06:26,930 --> 00:06:31,340
test days we have for every cycle no

00:06:28,700 --> 00:06:33,260
matter what and so I wanted Connor to be

00:06:31,340 --> 00:06:39,229
a part of one of those days which would

00:06:33,260 --> 00:06:44,090
run for every cycle so that that's what

00:06:39,229 --> 00:06:47,830
mostly the session was about the whole

00:06:44,090 --> 00:06:47,830
idea was to do a new session which is

00:06:51,389 --> 00:06:57,840
that's what it is and I would like to

00:06:53,729 --> 00:07:01,439
know the feedbacks and how you think if

00:06:57,840 --> 00:07:04,680
we could help testing more rigorously

00:07:01,439 --> 00:07:08,550
and how do you think it will be it will

00:07:04,680 --> 00:07:11,550
be a more connect between you could have

00:07:08,550 --> 00:07:15,960
the blonde Red Hatters and people who

00:07:11,550 --> 00:07:18,060
use off-the-shelf like idea about

00:07:15,960 --> 00:07:21,210
pricing like you guys are talking about

00:07:18,060 --> 00:07:24,180
if you can give me a kind of a rough

00:07:21,210 --> 00:07:25,650
sketch of how you guys do it we'll be

00:07:24,180 --> 00:07:26,819
more than happy to put it on to the

00:07:25,650 --> 00:07:30,289
community member saying hey you know

00:07:26,819 --> 00:07:30,289
what there's a specific thing that

00:07:34,520 --> 00:07:39,479
there's actually a so there's a kernel

00:07:37,289 --> 00:07:42,599
of bug triage paycheck so we've got the

00:07:39,479 --> 00:07:46,729
kernel page okay which walks through the

00:07:42,599 --> 00:07:46,729
basics of how to do funky ash there

00:07:47,330 --> 00:07:56,180
for testing more things you know we've

00:07:51,710 --> 00:07:57,650
asked and asked I presented at block one

00:07:56,180 --> 00:07:59,539
two or three times asking people to

00:07:57,650 --> 00:08:02,900
write and submit tests to this

00:07:59,539 --> 00:08:04,789
particular test suite now if you were in

00:08:02,900 --> 00:08:07,819
the last session you heard that that a

00:08:04,789 --> 00:08:09,500
lot of red hats internal tests are about

00:08:07,819 --> 00:08:10,789
to become external tests and there's

00:08:09,500 --> 00:08:16,069
there's an initiative there and those

00:08:10,789 --> 00:08:18,199
gonna be brought in and and some quite a

00:08:16,069 --> 00:08:20,509
few resources but just because we're

00:08:18,199 --> 00:08:23,509
throwing red hats throwing resources at

00:08:20,509 --> 00:08:24,860
those at this problem from a here's some

00:08:23,509 --> 00:08:28,159
hardware to run a bunch of tests on

00:08:24,860 --> 00:08:30,800
doesn't make test data from end users

00:08:28,159 --> 00:08:32,690
less valuable because they're not going

00:08:30,800 --> 00:08:33,890
to be running with the average it's

00:08:32,690 --> 00:08:35,329
gonna be Enterprise Hardware it's not

00:08:33,890 --> 00:08:37,519
committed to you what the average user

00:08:35,329 --> 00:08:41,260
is so we do need users running these

00:08:37,519 --> 00:08:44,930
tests and my my goal is to integrate

00:08:41,260 --> 00:08:48,100
everything that they're doing into this

00:08:44,930 --> 00:08:48,100
test free as well

00:08:49,140 --> 00:08:53,760
but there's a lot of tests that will not

00:08:51,390 --> 00:08:56,360
exist there test that you know if you've

00:08:53,760 --> 00:08:58,800
got a specific piece of hardware mm-hmm

00:08:56,360 --> 00:09:01,019
yeah you might want to run a test on it

00:08:58,800 --> 00:09:03,450
and so there's there's a page in the how

00:09:01,019 --> 00:09:06,390
to write a test wiki yes it kind of

00:09:03,450 --> 00:09:08,610
talks about you know you can search for

00:09:06,390 --> 00:09:11,579
a model this is this module and insert

00:09:08,610 --> 00:09:13,079
it I know the modules loaded and if the

00:09:11,579 --> 00:09:14,310
driver for this device is loaded then I

00:09:13,079 --> 00:09:15,600
want to go ahead and run those tests and

00:09:14,310 --> 00:09:18,899
if not used to give it you don't want to

00:09:15,600 --> 00:09:21,600
fail a test because it's not so those

00:09:18,899 --> 00:09:22,890
types of things if the community gets

00:09:21,600 --> 00:09:24,600
involved as if like hey I have this

00:09:22,890 --> 00:09:25,890
piece of hardware I would like to make

00:09:24,600 --> 00:09:33,240
sure that it continues to work in this

00:09:25,890 --> 00:09:35,850
way ready to test okay for this test day

00:09:33,240 --> 00:09:40,220
stuff but yeah I know that Fedor QA is

00:09:35,850 --> 00:09:42,570
much more concerned with release cycles

00:09:40,220 --> 00:09:44,730
the kernel though works differently than

00:09:42,570 --> 00:09:49,550
most things on release cycles we we base

00:09:44,730 --> 00:09:52,640
frequently and so it would think

00:09:49,550 --> 00:09:54,980
be even more useful and I'm wondering if

00:09:52,640 --> 00:09:58,959
it's too much of a workload to have

00:09:54,980 --> 00:10:03,380
those test days be every time there is a

00:09:58,959 --> 00:10:07,459
upstream Glynnis release which is about

00:10:03,380 --> 00:10:10,579
once every three months I mean the

00:10:07,459 --> 00:10:12,800
reason I still like 4.13 should be

00:10:10,579 --> 00:10:14,360
coming out soon right and it's probably

00:10:12,800 --> 00:10:20,600
too quick to organize a test date on

00:10:14,360 --> 00:10:23,390
that possibly Sunday possibly the week

00:10:20,600 --> 00:10:26,630
after so and I know we're not gonna be

00:10:23,390 --> 00:10:29,779
in plumbers in LA the week after

00:10:26,630 --> 00:10:37,750
ok but yeah but the next one will be 414

00:10:29,779 --> 00:10:37,750
in roughly 3 months or 10 weeks 413

00:10:41,710 --> 00:10:44,710
do

00:10:50,030 --> 00:10:53,560
yeah well I mean there's no

00:10:56,060 --> 00:11:00,320
yeah I mean I was doing the first stuff

00:10:58,400 --> 00:11:01,790
I ran test days for murder there was

00:11:00,320 --> 00:11:04,130
based on release cycles but that that

00:11:01,790 --> 00:11:06,800
was it this is the new package that's

00:11:04,130 --> 00:11:08,150
going in and or the new set of packages

00:11:06,800 --> 00:11:09,800
is going into the new features for

00:11:08,150 --> 00:11:11,990
features going in that need to be tested

00:11:09,800 --> 00:11:14,900
and they weren't changing during the

00:11:11,990 --> 00:11:23,800
rules yeah the next the next version

00:11:14,900 --> 00:11:23,800
will get it proposed this

00:11:26,160 --> 00:11:30,660
so

00:11:28,350 --> 00:11:35,160
there's a website called HP crystal ball

00:11:30,660 --> 00:11:52,649
better which is the idea of being able

00:11:35,160 --> 00:11:55,980
to forecast what kernels right so the

00:11:52,649 --> 00:11:58,949
thing is an average kernel cycle goes

00:11:55,980 --> 00:12:00,630
with a two-week merge window and then

00:11:58,949 --> 00:12:03,720
our C one is at the end of that two

00:12:00,630 --> 00:12:07,170
weeks and every week after that you get

00:12:03,720 --> 00:12:11,610
another RSC typically I would say they

00:12:07,170 --> 00:12:13,440
averaged 7.5 yeah you get a lot of times

00:12:11,610 --> 00:12:15,660
you get rc7 and then the next week will

00:12:13,440 --> 00:12:17,069
be final although a lot of times you

00:12:15,660 --> 00:12:19,370
give it an RC 8 and the next week will

00:12:17,069 --> 00:12:19,370
be fine

00:12:20,140 --> 00:12:25,380
no more the question that I think

00:12:28,570 --> 00:12:30,660
and

00:12:38,559 --> 00:12:43,850
I don't cook because of the way that

00:12:42,019 --> 00:12:45,860
things work upstream there I don't think

00:12:43,850 --> 00:12:49,100
that that's gonna do as much good I

00:12:45,860 --> 00:13:02,779
think it's the I think the optimal time

00:12:49,100 --> 00:13:04,759
is between final release there's the

00:13:02,779 --> 00:13:07,779
whole stabilization process is a

00:13:04,759 --> 00:13:07,779
separate tree after that

00:13:10,810 --> 00:13:14,410
yeah well I was thinking from a timing

00:13:12,640 --> 00:13:17,140
thing since there's basically a week of

00:13:14,410 --> 00:13:19,450
variable there if we schedule them for

00:13:17,140 --> 00:13:21,670
two weeks after opening each piece that

00:13:19,450 --> 00:13:24,240
says that the release is going to be

00:13:21,670 --> 00:13:28,830
that's going to be somewhere in the

00:13:24,240 --> 00:13:28,830
actual release and and one

00:13:43,020 --> 00:14:03,660
I think the most work would be we would

00:14:01,440 --> 00:14:05,670
be to because you want to rent on the

00:14:03,660 --> 00:14:06,750
table release and now with lies and

00:14:05,670 --> 00:14:09,510
things like that

00:14:06,750 --> 00:14:11,720
and we do want people to be able to hold

00:14:09,510 --> 00:14:13,150
external

00:14:11,720 --> 00:14:16,640
need to build a version of the kernel

00:14:13,150 --> 00:14:19,930
for test day against that release and

00:14:16,640 --> 00:14:22,930
then we need to spend a quick image and

00:14:19,930 --> 00:14:22,930
that's

00:14:27,279 --> 00:14:29,310
I

00:14:36,700 --> 00:14:46,210
I think I've got a few minutes next well

00:14:43,650 --> 00:14:49,240
be coming when the problem there's a

00:14:46,210 --> 00:14:52,200
couple of problems here one is we're

00:14:49,240 --> 00:14:52,200
back for a week and then

00:14:52,790 --> 00:14:56,710
the kernel maintainer czar going to LA

00:14:54,380 --> 00:14:56,710
for week

00:15:05,770 --> 00:15:10,450
well you know what or maybe we can do

00:15:07,870 --> 00:15:12,520
one leader in the 13 cycle yeah we see

00:15:10,450 --> 00:15:13,840
abnormal except for the fact that 13 is

00:15:12,520 --> 00:15:16,170
going to be the release panel for 20

00:15:13,840 --> 00:15:16,170
seconds

00:15:27,550 --> 00:15:34,340
as long as it's well-documented anybody

00:15:30,440 --> 00:15:36,170
I know you guys pretty much on release

00:15:34,340 --> 00:15:37,970
day have the kernel ready to go you

00:15:36,170 --> 00:15:45,170
don't have to

00:15:37,970 --> 00:15:46,760
you have to rebase some patches but yeah

00:15:45,170 --> 00:15:48,410
chances are we just did a snapshot on

00:15:46,760 --> 00:15:49,760
Friday and then he wrote on Sunday he

00:15:48,410 --> 00:15:51,830
might have put one or two patches and

00:15:49,760 --> 00:15:53,380
usually he doesn't usually the only

00:15:51,830 --> 00:15:55,670
passenger it was him as a version change

00:15:53,380 --> 00:15:57,860
between Friday and Sunday and when he

00:15:55,670 --> 00:16:00,620
doesn't he apologizes for yes

00:15:57,860 --> 00:16:02,270
so yeah it's ready to go to that buddy

00:16:00,620 --> 00:16:04,160
at that point cuz we just built it on

00:16:02,270 --> 00:16:07,220
Friday know that it's not like there's a

00:16:04,160 --> 00:16:10,840
lot of work you have to do before for

00:16:07,220 --> 00:16:13,660
14.0 was packed well there's so this

00:16:10,840 --> 00:16:15,890
this has to be a little bit of different

00:16:13,660 --> 00:16:20,150
because because of the way every base is

00:16:15,890 --> 00:16:21,590
work so it's not just what a direct copy

00:16:20,150 --> 00:16:23,150
over there are certain things that have

00:16:21,590 --> 00:16:26,660
changed in rawhide that it may not be

00:16:23,150 --> 00:16:28,340
enough 26 or stuff like that so and

00:16:26,660 --> 00:16:31,700
especially you're fully capable EQ and

00:16:28,340 --> 00:16:34,280
doing some config changes those config

00:16:31,700 --> 00:16:36,230
changes like turning off things we

00:16:34,280 --> 00:16:38,180
wouldn't turn off things and have 26

00:16:36,230 --> 00:16:41,360
Lister even though we've turned them off

00:16:38,180 --> 00:16:43,010
for 27 because someone might actually be

00:16:41,360 --> 00:16:44,840
using they expect them to work if we're

00:16:43,010 --> 00:16:46,280
turning off a bunch of stuff and it goes

00:16:44,840 --> 00:16:48,290
the whole rawhide cycle and then the

00:16:46,280 --> 00:16:49,790
whole release cycle and nobody's

00:16:48,290 --> 00:16:51,870
complained then we notice a to keep that

00:16:49,790 --> 00:16:54,040
off so we don't want to

00:16:51,870 --> 00:16:57,040
you had me Colonel update so there's a

00:16:54,040 --> 00:16:59,139
rebase processor it's not that is there

00:16:57,040 --> 00:17:02,440
the possibility that you even tested

00:16:59,139 --> 00:17:04,750
more than one kernel as part of a test

00:17:02,440 --> 00:17:07,270
day more than one heart would be nice

00:17:04,750 --> 00:17:11,079
well large is tough yeah not everybody

00:17:07,270 --> 00:17:12,280
our machine sitting around well the

00:17:11,079 --> 00:17:13,750
colonel with the stuff and then the

00:17:12,280 --> 00:17:15,010
colonel with the things turned off that

00:17:13,750 --> 00:17:18,760
you expect to turn off for the next

00:17:15,010 --> 00:17:20,980
release do that i mean i don't know i

00:17:18,760 --> 00:17:22,179
mean is that feedback useful to they

00:17:20,980 --> 00:17:24,160
well you know what it would be awesome

00:17:22,179 --> 00:17:25,300
if we have people who are everybody's

00:17:24,160 --> 00:17:27,699
coming to testicle

00:17:25,300 --> 00:17:29,050
yeah and we're trying to test release

00:17:27,699 --> 00:17:29,650
colonel it's gonna be the rebates right

00:17:29,050 --> 00:17:31,630
right

00:17:29,650 --> 00:17:33,220
but hey on that same day which is

00:17:31,630 --> 00:17:35,650
probably writing into the merch window

00:17:33,220 --> 00:17:37,840
could you also since you're taking some

00:17:35,650 --> 00:17:40,420
time to test that's the wrong time yeah

00:17:37,840 --> 00:17:42,700
with the rawhide image and that way you

00:17:40,420 --> 00:17:44,170
get feedback not only on the colonel or

00:17:42,700 --> 00:17:45,429
thinking about me basically you get

00:17:44,170 --> 00:17:47,980
feedback as soon as the merge with this

00:17:45,429 --> 00:17:49,690
place which is gonna find i mean there's

00:17:47,980 --> 00:17:51,820
a there's a lot of yeah yeah there's a

00:17:49,690 --> 00:17:53,890
lot of cruft in there but it's useful

00:17:51,820 --> 00:17:56,280
information and it's a time when you can

00:17:53,890 --> 00:17:56,280
actually

00:17:59,450 --> 00:18:04,320
well it's a lot better than bisecting

00:18:02,339 --> 00:18:06,919
well it can be a it can be a right

00:18:04,320 --> 00:18:06,919
Colonel on

00:18:13,240 --> 00:18:17,070
our pet server has never

00:18:20,230 --> 00:18:27,080
they rawhide and then when we branch I

00:18:24,080 --> 00:18:31,360
just copy that that image to be the new

00:18:27,080 --> 00:18:31,360
image changes

00:18:37,590 --> 00:18:41,520
I haven't come in we'll get fewer takers

00:18:39,450 --> 00:18:45,800
but you know one of those football bugs

00:18:41,520 --> 00:18:45,800
that those should have been caught

00:18:45,970 --> 00:18:50,789
yeah well you could always

00:18:55,700 --> 00:18:59,260
like as he likes

00:19:00,730 --> 00:19:04,210
it was a policy wouldn't internal think

00:19:02,350 --> 00:19:05,900
it was policy thing reported in the

00:19:04,210 --> 00:19:10,480
policy before

00:19:05,900 --> 00:19:10,480
you could argue that the containers

00:19:19,090 --> 00:19:21,930
I see

00:19:24,720 --> 00:19:29,620
which which how to maintain the policies

00:19:27,820 --> 00:19:32,330
maintain

00:19:29,620 --> 00:19:34,630
it's reactionary

00:19:32,330 --> 00:19:34,630
yeah

00:19:42,490 --> 00:19:47,230
you know maybe we should add a test

00:19:57,399 --> 00:20:01,269
their brother went on this

00:20:05,350 --> 00:20:15,850
yeah usually there is I don't know that

00:20:12,850 --> 00:20:18,759
I would add it as a pass/fail test was

00:20:15,850 --> 00:20:20,909
just at the reported even though part of

00:20:18,759 --> 00:20:20,909
it

00:20:23,260 --> 00:20:27,520
there is food must be newer than the

00:20:25,810 --> 00:20:31,300
last time I checked that that might be

00:20:27,520 --> 00:20:34,480
very worth adding just so that we've got

00:20:31,300 --> 00:20:37,350
yeah what could it hurt well but this

00:20:34,480 --> 00:20:37,350
policy used to be

00:21:03,890 --> 00:21:09,210
so those failures on there

00:21:06,540 --> 00:21:11,110
are very interesting

00:21:09,210 --> 00:21:14,470
27 and

00:21:11,110 --> 00:21:18,009
rawhide fail immediately if you look at

00:21:14,470 --> 00:21:19,360
this signature tell you something

00:21:18,009 --> 00:21:20,679
happened with the piece I don't know if

00:21:19,360 --> 00:21:22,299
you remember the debacle where we

00:21:20,679 --> 00:21:24,539
couldn't actually go for a couple days

00:21:22,299 --> 00:21:24,539
because

00:21:25,530 --> 00:21:32,400
so they're being sung and when I boot up

00:21:29,580 --> 00:21:35,250
the test system and run the test again

00:21:32,400 --> 00:21:37,050
they pass and all this is doing is

00:21:35,250 --> 00:21:39,180
graphing from a screen in the carnival

00:21:37,050 --> 00:21:42,059
so it's not I don't know why they always

00:21:39,180 --> 00:21:46,820
fail in this initial food but it's only

00:21:42,059 --> 00:21:46,820
this it's only this - every time now

00:22:06,909 --> 00:22:10,830
although I probably should because hey

00:22:10,930 --> 00:22:15,910
we can't ship the colonel did not sign

00:22:12,610 --> 00:22:17,800
so I haven't been able to go too many

00:22:15,910 --> 00:22:20,100
machines now I'm having to really go and

00:22:17,800 --> 00:22:20,100
check it

00:22:25,160 --> 00:22:32,470
it's sure the test that it's under

00:22:29,059 --> 00:22:32,470
secure boot SP test

00:22:44,350 --> 00:22:48,630
no it's nothing to do with us yeah it's

00:23:00,450 --> 00:23:12,960
oh he gets signed by the e sign using a

00:23:10,200 --> 00:23:16,580
process with Hardware keys inside those

00:23:12,960 --> 00:23:16,580
two machines that are only allowed to

00:23:17,270 --> 00:23:21,590
yeah it is signing them correctly that

00:23:19,520 --> 00:23:22,970
the point is I can log into that exact

00:23:21,590 --> 00:23:25,580
same p.m. that's had the exact same

00:23:22,970 --> 00:23:28,270
kernel installation on and run this test

00:23:25,580 --> 00:23:28,270
again and it passes

00:23:28,470 --> 00:23:34,400
and as you can see what it's looking for

00:23:31,080 --> 00:23:34,400
there's no reason that it should

00:23:43,040 --> 00:23:50,510
no I just actually will get run test

00:23:45,559 --> 00:23:52,950
again and it passes but it's been every

00:23:50,510 --> 00:23:56,780
time since they did that up

00:23:52,950 --> 00:23:56,780
instead upgrade only on

00:23:57,500 --> 00:24:01,419
he's lined up the OT son

00:24:03,220 --> 00:24:06,810
Peter I might have them over there

00:24:15,430 --> 00:24:20,080
yes yes we do

00:24:21,730 --> 00:24:27,570
and if I could hit that goes decide

00:24:32,460 --> 00:24:37,960
no I mean show me a mullet estimator

00:24:36,310 --> 00:24:39,760
what that was a long in the Testament

00:24:37,960 --> 00:24:41,590
what a shame that showed that the fedora

00:24:39,760 --> 00:24:48,630
signer is the door secure boot center

00:24:41,590 --> 00:24:48,630
that it says the right thing

00:24:49,059 --> 00:24:52,350
it says the right thing

00:24:53,430 --> 00:24:57,900
the only thing that I'm guessing is

00:24:55,250 --> 00:24:59,520
maybe something with the e sign is

00:24:57,900 --> 00:25:04,010
returning the right information but it's

00:24:59,520 --> 00:25:04,010
not exiting the right

00:25:08,200 --> 00:25:13,770
it's ready for signature the door

00:25:11,440 --> 00:25:13,770
package

00:25:15,300 --> 00:25:19,390
yeah

00:25:17,620 --> 00:25:23,130
looking for signature for door secured

00:25:19,390 --> 00:25:23,130
roots under than black line and that

00:25:26,150 --> 00:25:31,150
we can probably just look at this same

00:25:28,610 --> 00:25:31,150
URL

00:25:36,620 --> 00:25:40,600
interesting remote control systems

00:25:48,960 --> 00:25:55,240
oh never mind mrs. problem

00:25:51,570 --> 00:25:58,000
p PE sign is failing know that if the

00:25:55,240 --> 00:26:00,220
output is looking for which is as it

00:25:58,000 --> 00:26:02,140
said in the doc config file so this

00:26:00,220 --> 00:26:06,220
might be useful for other people

00:26:02,140 --> 00:26:07,420
doing their own test it's 17 people and

00:26:06,220 --> 00:26:08,860
it is what it's looking for but if you

00:26:07,420 --> 00:26:10,120
see the echo signer is where we're

00:26:08,860 --> 00:26:13,510
getting the black line yeah

00:26:10,120 --> 00:26:16,120
so why are we gonna get yeah but it's

00:26:13,510 --> 00:26:20,170
not getting the science right but if I

00:26:16,120 --> 00:26:23,850
run the test again it does and if you're

00:26:20,170 --> 00:26:23,850
running on your system

00:26:31,690 --> 00:26:36,760
I mean debug about those

00:26:35,050 --> 00:26:39,430
don't some more info what is being

00:26:36,760 --> 00:26:42,510
signed yeah that's I returned in

00:26:39,430 --> 00:26:42,510
that doesn't get captured

00:26:43,370 --> 00:26:51,470
it does become yeah that's that's the

00:26:49,420 --> 00:26:55,540
rest of its helpful I was like he's

00:26:51,470 --> 00:26:55,540
captured either we should get worked out

00:27:32,710 --> 00:27:40,070
we can do that the problem is they don't

00:27:36,650 --> 00:27:42,110
like vlogs being too large uploaded to

00:27:40,070 --> 00:27:44,540
this semester why we have arbitrary log

00:27:42,110 --> 00:27:46,040
size limitations on here it had

00:27:44,540 --> 00:27:48,500
something to do with people being able

00:27:46,040 --> 00:27:50,510
to upload like split some sort of a

00:27:48,500 --> 00:27:55,820
pirated binary or something and do some

00:27:50,510 --> 00:27:58,570
tiny chunks but that was what they

00:27:55,820 --> 00:27:58,570
usually

00:28:15,550 --> 00:28:29,720
we can do it on that test but it only

00:28:18,440 --> 00:28:32,060
fails on the food well actually I'm

00:28:29,720 --> 00:28:35,000
gonna read through a second detective

00:28:32,060 --> 00:28:36,860
Rollins so 27 shuts down after the tests

00:28:35,000 --> 00:28:39,020
were run those p.m. shut down but

00:28:36,860 --> 00:28:42,190
they're all had being thrown 24/7 they

00:28:39,020 --> 00:28:42,190
never shut down these reboot

00:28:42,700 --> 00:28:45,539
I don't know

00:28:47,820 --> 00:28:53,350
anyway it hasn't been

00:28:50,000 --> 00:28:53,350
we've got bigger issues

00:29:47,590 --> 00:29:54,330
the only other thing I mentioned that I

00:29:50,950 --> 00:29:54,330
would be in this session on

00:29:54,539 --> 00:29:58,109
on the planet and told people if they

00:29:56,579 --> 00:29:59,489
have like weird laptops and things that

00:29:58,109 --> 00:30:01,829
don't work sometimes those are usually

00:29:59,489 --> 00:30:03,359
buggy person please bring them so if

00:30:01,829 --> 00:30:05,570
anybody brought me things come let me

00:30:03,359 --> 00:30:05,570
knew

00:30:09,400 --> 00:30:13,660
I bought Lenovo specifically so that I

00:30:11,740 --> 00:30:16,000
wouldn't have that problem I've had a

00:30:13,660 --> 00:30:19,380
couple people come up to me and yeah we

00:30:16,000 --> 00:30:19,380

YouTube URL: https://www.youtube.com/watch?v=JBLoVrSf1a4


