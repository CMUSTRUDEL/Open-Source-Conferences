Title: Flock 2017 - Let's create a module
Publication date: 2017-10-20
Playlist: Flock 2017
Description: 
	Thursday August 31, 2017 4:00pm - 5:00pm
@Orleans A + B
Talk: Let's create a module
Presenter: Tomas Tomecek

Description:
If you are planning to attend this workshop, please follow these instructions to download cached content needed for the workshop.

This is a workshop. It is targeted at Fedora package maintainers, Fedora developers and Fedora release engineers.

Outcome:
* audience gets hands-on experience with creating modules
* audience knows how to build a module in production infrastructure and can try it out
* audience is aware of best practices for creating modules
* audience is familiar with whole build pipeline

Agenda:
* short introduction to modularity
* demonstrate a real module, which is already present in infrastructure
* go over though all the steps which take place in the pipeline (dist-git, mbs, koji, testing, module-aware dnf)
* initiate a workshop where audience is meant to create a module of their favorite package/stack
* in this step, presenter should be showcasing module creation live, while other modularity members assist people with module creation
* during this part, best-practices for module creation should be constantly discussed
* if time allows, create at least one test which would prove the module works correctly
* modularity team should gather feedback from audience and incorporate it into documentation
* in the end of workshop, review modules created by audience â€” ideally get them into production infrastructure
Captions: 
	00:00:02,040 --> 00:00:11,500
it is working age okay okay so I guess

00:00:06,309 --> 00:00:14,740
we can start so hello to Moodle RT

00:00:11,500 --> 00:00:18,099
workshop so what we try to do today we

00:00:14,740 --> 00:00:20,409
try to create some new modules but

00:00:18,099 --> 00:00:22,779
before we start I probably disappoint

00:00:20,409 --> 00:00:25,689
you but that we probably want to build

00:00:22,779 --> 00:00:28,089
any modules and the reason for that is

00:00:25,689 --> 00:00:32,980
there is a big dragon in our way

00:00:28,089 --> 00:00:34,840
named conference Wi-Fi so because in

00:00:32,980 --> 00:00:39,460
order to build modules you need to have

00:00:34,840 --> 00:00:41,410
packages local systems and there's like

00:00:39,460 --> 00:00:44,560
hundreds of megabytes or even like

00:00:41,410 --> 00:00:47,430
several gigabytes and it's not possible

00:00:44,560 --> 00:00:47,430
to yeah yes

00:00:50,720 --> 00:00:55,120
sure he was gonna do a little time here

00:00:56,730 --> 00:01:05,090
my 3800 that the problem sue

00:01:17,520 --> 00:01:20,119
what

00:01:23,409 --> 00:01:28,799
okay it's certainly something that like

00:01:31,710 --> 00:01:44,220
yeah okay so it's possible something

00:01:39,630 --> 00:01:46,979
else at Intel okay so but what we try to

00:01:44,220 --> 00:01:49,440
do is to create modules and to have it

00:01:46,979 --> 00:01:52,920
like heredity for for trying to build it

00:01:49,440 --> 00:01:55,700
locally so I assume that when you get

00:01:52,920 --> 00:01:58,860
home you'll be able to just get your

00:01:55,700 --> 00:02:00,720
module and just run built and you should

00:01:58,860 --> 00:02:06,090
be able to build it yourself at home

00:02:00,720 --> 00:02:10,020
okay so okay start so I don't have fancy

00:02:06,090 --> 00:02:12,480
slide I have fancy github repo I hope

00:02:10,020 --> 00:02:15,750
it's available in here it's federal

00:02:12,480 --> 00:02:19,230
authorities like workshop I already used

00:02:15,750 --> 00:02:22,709
it a couple of times and all the content

00:02:19,230 --> 00:02:25,440
is here so what I try to do it to get

00:02:22,709 --> 00:02:29,040
like real steps into our website which

00:02:25,440 --> 00:02:31,350
is in here and so usually I just linked

00:02:29,040 --> 00:02:34,770
to those guides from this workshop so

00:02:31,350 --> 00:02:40,470
this workshop is just like a big chunk

00:02:34,770 --> 00:02:42,540
of links okay so let's start by the way

00:02:40,470 --> 00:02:45,630
still Gallagher's created two very nice

00:02:42,540 --> 00:02:48,780
blog posts about building modules so if

00:02:45,630 --> 00:02:51,630
you want to like hear it from different

00:02:48,780 --> 00:02:54,819
kind of perspective you can read it

00:02:51,630 --> 00:02:56,950
I certainly suggest that

00:02:54,819 --> 00:03:01,060
so this is the percocet I wrote down two

00:02:56,950 --> 00:03:03,129
days ago so with what we need or what

00:03:01,060 --> 00:03:05,170
you need to create modules or bill new

00:03:03,129 --> 00:03:08,739
module is the module build service

00:03:05,170 --> 00:03:10,900
package which contains the all build

00:03:08,739 --> 00:03:13,180
services ralph was talking about it

00:03:10,900 --> 00:03:21,989
earlier and heat also has the ability to

00:03:13,180 --> 00:03:26,189
build modules locally so also and what

00:03:21,989 --> 00:03:29,409
what the build service does that it

00:03:26,189 --> 00:03:32,049
downloads your build requires four

00:03:29,409 --> 00:03:33,970
modules which are packages or modules

00:03:32,049 --> 00:03:36,340
and which are composed of packages and

00:03:33,970 --> 00:03:39,760
it downloads them locally to your home

00:03:36,340 --> 00:03:42,069
directory and so whenever you build a

00:03:39,760 --> 00:03:44,470
module it downloads all of them so it's

00:03:42,069 --> 00:03:47,500
like a cache and if you want to like

00:03:44,470 --> 00:03:49,689
trigger like get me up-to-date modules I

00:03:47,500 --> 00:03:53,189
created a very simple module in this

00:03:49,689 --> 00:03:55,659
directory and here it's like a very easy

00:03:53,189 --> 00:03:57,790
easy steps how you can build it and

00:03:55,659 --> 00:03:59,859
force it for the modules to be

00:03:57,790 --> 00:04:04,599
downloaded so you can start working

00:03:59,859 --> 00:04:07,359
right away okay agenda for our workshop

00:04:04,599 --> 00:04:08,799
is that okay intro to modularity I

00:04:07,359 --> 00:04:12,040
believe that we don't need to do that

00:04:08,799 --> 00:04:13,800
the already been like three talks about

00:04:12,040 --> 00:04:17,100
it so I

00:04:13,800 --> 00:04:19,200
we don't need to do intro right but if

00:04:17,100 --> 00:04:24,510
anyone needs it just let me know and I

00:04:19,200 --> 00:04:26,520
can do it so we can skip that also

00:04:24,510 --> 00:04:29,970
around shaman if was talking about

00:04:26,520 --> 00:04:31,830
module MD so he tried to explain it like

00:04:29,970 --> 00:04:35,070
in chess and diagrams

00:04:31,830 --> 00:04:40,140
I can show you the like like how it you

00:04:35,070 --> 00:04:42,540
how it looks in real and then he

00:04:40,140 --> 00:04:45,060
submitted like a section to this

00:04:42,540 --> 00:04:47,940
workshop about workflow how how he

00:04:45,060 --> 00:04:52,350
envisions to like create the module

00:04:47,940 --> 00:04:55,020
distribution for the failure of 27 so I

00:04:52,350 --> 00:04:58,350
can describe it briefly and then we can

00:04:55,020 --> 00:05:02,010
finally start like go through a process

00:04:58,350 --> 00:05:06,210
of creating a new module okay so let's

00:05:02,010 --> 00:05:08,850
keep the intro so I already try to

00:05:06,210 --> 00:05:12,570
practice this press this workshop in our

00:05:08,850 --> 00:05:15,570
office and I usually got stuck for like

00:05:12,570 --> 00:05:17,640
most of the session about describing

00:05:15,570 --> 00:05:20,880
module and II so I don't want to do the

00:05:17,640 --> 00:05:23,100
mistake again today so I'll show you

00:05:20,880 --> 00:05:24,340
only the significant parts of module I'm

00:05:23,100 --> 00:05:27,190
David

00:05:24,340 --> 00:05:31,539
it's like a pretty big specification and

00:05:27,190 --> 00:05:33,789
you can find it in here and let's locate

00:05:31,539 --> 00:05:38,310
only five minutes to module MV and then

00:05:33,789 --> 00:05:41,380
just again okay it's available in begger

00:05:38,310 --> 00:05:43,300
its specification it's also a Python

00:05:41,380 --> 00:05:47,350
library so we can integrate it into your

00:05:43,300 --> 00:05:48,910
coat on whatever structure and it

00:05:47,350 --> 00:05:51,699
doesn't have like a formal specification

00:05:48,910 --> 00:05:54,250
like jason scheme arson like that it's

00:05:51,699 --> 00:05:55,900
just this ya know file and just very

00:05:54,250 --> 00:05:59,919
nice description like what all the

00:05:55,900 --> 00:06:05,020
fields do so long and you can read it at

00:05:59,919 --> 00:06:07,539
home okay let's get back and what I'll

00:06:05,020 --> 00:06:10,750
do instead show you a real module and I

00:06:07,539 --> 00:06:14,919
describe what you can see in the module

00:06:10,750 --> 00:06:18,789
and D so I'll open node.js module we did

00:06:14,919 --> 00:06:20,500
which we did for Voltron pretty short as

00:06:18,789 --> 00:06:24,180
you can see in comparison to the real

00:06:20,500 --> 00:06:27,009
spec because there are no comment

00:06:24,180 --> 00:06:33,789
so let's talk about the significant

00:06:27,009 --> 00:06:37,330
parts okay it's kind of fine funky late

00:06:33,789 --> 00:06:39,840
so so in the root of the document there

00:06:37,330 --> 00:06:44,289
is like a type module MD inversion

00:06:39,840 --> 00:06:47,860
boring interesting parts so components

00:06:44,289 --> 00:06:50,440
it's like probably the most important

00:06:47,860 --> 00:06:52,659
thing that's very specified got rpms you

00:06:50,440 --> 00:06:54,849
want to have in your module so you have

00:06:52,659 --> 00:06:57,729
components its name spaced for rpms

00:06:54,849 --> 00:06:59,349
which is like thinking for future

00:06:57,729 --> 00:07:01,360
because in future summer I want to

00:06:59,349 --> 00:07:03,340
invent new packaging technology or other

00:07:01,360 --> 00:07:04,659
distributions one might want to

00:07:03,340 --> 00:07:06,699
integrate modules into the

00:07:04,659 --> 00:07:07,280
infrastructure so for example in future

00:07:06,699 --> 00:07:11,090
it will have

00:07:07,280 --> 00:07:14,510
like deep package here or like other

00:07:11,090 --> 00:07:19,010
packaging technologies so I said in here

00:07:14,510 --> 00:07:22,370
you define what what packages you want

00:07:19,010 --> 00:07:24,889
to have in your module and I can see

00:07:22,370 --> 00:07:26,990
this is not a good example because as I

00:07:24,889 --> 00:07:31,490
said it's no J's and no J's is not in

00:07:26,990 --> 00:07:34,250
the list so let me just let me just

00:07:31,490 --> 00:07:36,410
switch with different range because I

00:07:34,250 --> 00:07:39,160
think this is master branch and I think

00:07:36,410 --> 00:07:39,160
we have an updated

00:07:46,930 --> 00:07:53,130
okay so olives I lose the branch from

00:07:49,770 --> 00:07:53,130
Voltron the release

00:07:56,060 --> 00:08:02,810
oh yeah it's much better okay back again

00:07:59,600 --> 00:08:05,240
to components so as I said this is no JS

00:08:02,810 --> 00:08:08,300
module so obviously there is no J's

00:08:05,240 --> 00:08:10,490
package in the list so what are these

00:08:08,300 --> 00:08:12,170
three things so there is ratio which

00:08:10,490 --> 00:08:14,630
means that there's this is the reason

00:08:12,170 --> 00:08:16,790
why the package is included in the

00:08:14,630 --> 00:08:19,580
module it's like I think it's pretty

00:08:16,790 --> 00:08:21,410
important to like write down that okay

00:08:19,580 --> 00:08:24,920
this is this is the main package like

00:08:21,410 --> 00:08:26,630
this is and should be included or for

00:08:24,920 --> 00:08:28,340
example you can include other packages

00:08:26,630 --> 00:08:30,410
which are just build appendices of the

00:08:28,340 --> 00:08:31,940
main package so again it's like good to

00:08:30,410 --> 00:08:36,410
write it down

00:08:31,940 --> 00:08:39,200
ref that's sexually standard get rev so

00:08:36,410 --> 00:08:41,090
you can reference to branch or specific

00:08:39,200 --> 00:08:44,900
committee so for example in here we are

00:08:41,090 --> 00:08:49,210
a forensic specific commit because by

00:08:44,900 --> 00:08:52,580
default no js' requires some other noj's

00:08:49,210 --> 00:08:55,340
packages which means that you can easily

00:08:52,580 --> 00:08:57,140
build it in a modular way so what what

00:08:55,340 --> 00:08:59,720
we did that we did we create a new

00:08:57,140 --> 00:09:01,040
commit in this kid when we're when we

00:08:59,720 --> 00:09:03,920
try to enable bootstrapping

00:09:01,040 --> 00:09:05,930
so which means that in that commit no

00:09:03,920 --> 00:09:09,020
Jess doesn't require any knowledge as

00:09:05,930 --> 00:09:11,690
packages so in like this we can easily

00:09:09,020 --> 00:09:14,990
build it so this is the bootstrapping

00:09:11,690 --> 00:09:17,120
process we chose and also there is built

00:09:14,990 --> 00:09:23,120
order and it was explained by your off

00:09:17,120 --> 00:09:25,250
earlier I think this is 0 so which is

00:09:23,120 --> 00:09:27,830
kind of redundant because I believe the

00:09:25,250 --> 00:09:28,790
default build of X is 0 so this is

00:09:27,830 --> 00:09:32,570
useful actually

00:09:28,790 --> 00:09:35,780
I mean useless and we have other package

00:09:32,570 --> 00:09:38,630
in here which is which enables packaging

00:09:35,780 --> 00:09:39,200
no J's module become which contains rpm

00:09:38,630 --> 00:09:44,750
markers

00:09:39,200 --> 00:09:48,620
okay this component don't defy filter in

00:09:44,750 --> 00:09:51,650
here so API it was already mentioned so

00:09:48,620 --> 00:09:54,170
in API you list binary RPM packages

00:09:51,650 --> 00:09:56,450
which you support within this module so

00:09:54,170 --> 00:10:00,980
in here we support know Jason and p.m.

00:09:56,450 --> 00:10:04,150
and NPM comes from no js' which that's

00:10:00,980 --> 00:10:07,190
why there is no dedicated package here

00:10:04,150 --> 00:10:10,640
also profiles we already discussed

00:10:07,190 --> 00:10:14,240
profiles so we defined two profiles in

00:10:10,640 --> 00:10:17,270
here so default this when you do DNF

00:10:14,240 --> 00:10:19,430
install node.js module between install

00:10:17,270 --> 00:10:21,680
these two packages and we also define

00:10:19,430 --> 00:10:24,200
another profile just just for sake of

00:10:21,680 --> 00:10:28,190
clarity that you can install just know

00:10:24,200 --> 00:10:31,700
Jason on NPM and yeah this is mainly for

00:10:28,190 --> 00:10:34,220
DNF profiles what else so you can also

00:10:31,700 --> 00:10:35,720
specify documentation for the module so

00:10:34,220 --> 00:10:37,910
where is your community where is

00:10:35,720 --> 00:10:39,650
documentation for the software and where

00:10:37,910 --> 00:10:42,260
is the issue tracker when you can file

00:10:39,650 --> 00:10:44,089
it the upstream issues or like specific

00:10:42,260 --> 00:10:46,310
issues to the module so in future

00:10:44,089 --> 00:10:49,660
hopefully this would be auto-generated

00:10:46,310 --> 00:10:49,660
and could leave to Bugzilla

00:10:49,880 --> 00:10:55,370
okay dependencies another very important

00:10:52,310 --> 00:10:59,110
field this how you specify what modules

00:10:55,370 --> 00:11:02,290
or what repositories should be enabled

00:10:59,110 --> 00:11:06,110
for during the build or during runtime

00:11:02,290 --> 00:11:08,630
so and I'll show it later in the build

00:11:06,110 --> 00:11:12,110
like during the build like how important

00:11:08,630 --> 00:11:14,839
this is so again like this this just

00:11:12,110 --> 00:11:16,339
means that these modules or repositories

00:11:14,839 --> 00:11:20,600
are enabled during the build

00:11:16,339 --> 00:11:23,089
so when DNF tries to install all the

00:11:20,600 --> 00:11:25,370
requires of the strategies which are

00:11:23,089 --> 00:11:27,440
part of your module then the packages

00:11:25,370 --> 00:11:30,440
will come from this module and you can

00:11:27,440 --> 00:11:32,329
build your package there are builder

00:11:30,440 --> 00:11:39,019
course and runtime requires so this is

00:11:32,329 --> 00:11:41,000
built and this is runtime licensing when

00:11:39,019 --> 00:11:43,970
we did this workshop earlier licensing

00:11:41,000 --> 00:11:47,829
was very confusing to people so and I

00:11:43,970 --> 00:11:50,089
believe this because the license and

00:11:47,829 --> 00:11:53,050
because people thought that when you

00:11:50,089 --> 00:11:56,029
that module in this context means like a

00:11:53,050 --> 00:11:58,550
license of the module and everyone

00:11:56,029 --> 00:12:00,110
thought that okay so this problem needs

00:11:58,550 --> 00:12:02,509
to be like all the software which is

00:12:00,110 --> 00:12:05,959
part with the module like words where is

00:12:02,509 --> 00:12:08,360
this one just GPL so the reason why this

00:12:05,959 --> 00:12:10,130
is confusing is that this is the license

00:12:08,360 --> 00:12:13,130
of module and B not the module itself

00:12:10,130 --> 00:12:16,550
and in here it's there it's wrong

00:12:13,130 --> 00:12:18,500
because we agreed upon that all module

00:12:16,550 --> 00:12:21,199
and if all these recipes will be

00:12:18,500 --> 00:12:24,110
licensed this MIT not GPL so we need to

00:12:21,199 --> 00:12:26,360
correct it and same same things for spec

00:12:24,110 --> 00:12:28,490
files like spec files have MIT license

00:12:26,360 --> 00:12:30,950
so as you can read in Federer

00:12:28,490 --> 00:12:34,040
guidelines and for content there is a

00:12:30,950 --> 00:12:37,490
specific field and you probably

00:12:34,040 --> 00:12:39,770
shouldn't feel it I think the plan is to

00:12:37,490 --> 00:12:44,860
fill this automatically with it's an MBS

00:12:39,770 --> 00:12:44,860
I'm not sure when it's going to burn

00:12:45,700 --> 00:12:52,040
okay because it's written in the module

00:12:50,270 --> 00:12:54,460
and respect so I was assuming this

00:12:52,040 --> 00:12:54,460
planet

00:13:00,880 --> 00:13:08,029
okay and finally there are summary and

00:13:06,500 --> 00:13:10,850
description fields need some mandatory

00:13:08,029 --> 00:13:13,459
you need to fill them otherwise it will

00:13:10,850 --> 00:13:15,889
fail I believe and just like summary

00:13:13,459 --> 00:13:17,899
just one sentence what the module is

00:13:15,889 --> 00:13:20,870
about in description like a thorough

00:13:17,899 --> 00:13:24,319
description puts into module and like

00:13:20,870 --> 00:13:26,980
how to use it or anything like that okay

00:13:24,319 --> 00:13:29,810
so this module MD as I said the spec is

00:13:26,980 --> 00:13:33,170
way bigger there's tons of other fields

00:13:29,810 --> 00:13:39,980
which are not used much so let's just

00:13:33,170 --> 00:13:46,310
not talk about those module MD okay so

00:13:39,980 --> 00:13:48,800
the verb flow Adam has said do for

00:13:46,310 --> 00:13:53,240
developing the federal 27 modular

00:13:48,800 --> 00:13:56,810
release is that he created a bunch of I

00:13:53,240 --> 00:13:59,990
mean repository where there are several

00:13:56,810 --> 00:14:02,180
scripts when he tries to iterate on like

00:13:59,990 --> 00:14:08,269
what packages needs to be model Erised

00:14:02,180 --> 00:14:10,519
in order to have a federal 27 server so

00:14:08,269 --> 00:14:12,860
so the start is that we have platform

00:14:10,519 --> 00:14:16,130
and host modules and then there are

00:14:12,860 --> 00:14:19,639
requirements what what software needs to

00:14:16,130 --> 00:14:22,150
be available in the federal 27 server so

00:14:19,639 --> 00:14:25,240
it's all written in the repository and

00:14:22,150 --> 00:14:27,540
just need to find a link yeah it's in

00:14:25,240 --> 00:14:27,540
here

00:14:30,089 --> 00:14:39,119
okay and what a llama does that he like

00:14:35,439 --> 00:14:41,589
great he sets new modules and set

00:14:39,119 --> 00:14:46,059
components of these modules and read

00:14:41,589 --> 00:14:48,489
regenerate the way the packages are

00:14:46,059 --> 00:14:50,919
being distributed and it always outputs

00:14:48,489 --> 00:14:56,169
like like a graph and just like

00:14:50,919 --> 00:14:58,029
expanding so this repository or like the

00:14:56,169 --> 00:15:00,189
content of this repository will be worth

00:14:58,029 --> 00:15:03,099
like another talk to describe it and

00:15:00,189 --> 00:15:05,649
what's in there and I believe we don't

00:15:03,099 --> 00:15:08,499
have time for that so so if you are

00:15:05,649 --> 00:15:09,849
interested about the process Adam set or

00:15:08,499 --> 00:15:12,720
I don't know Adam they want to talk

00:15:09,849 --> 00:15:12,720
about it briefly

00:15:14,159 --> 00:15:21,779
it's basically adding images to the

00:15:18,789 --> 00:15:21,779
right now

00:15:22,170 --> 00:15:27,240
it's pretty tricky to determine what's

00:15:24,690 --> 00:15:30,180
going to be module so they

00:15:27,240 --> 00:15:32,100
and we everything so this is just for

00:15:30,180 --> 00:15:35,970
coordination in the beginning but I

00:15:32,100 --> 00:15:42,500
guess you will be using the tools or

00:15:35,970 --> 00:15:44,940
something that will be much smarter yeah

00:15:42,500 --> 00:15:48,560
so the thing is that in order to like

00:15:44,940 --> 00:15:50,760
guilty or for example upon the list

00:15:48,560 --> 00:15:52,680
software which is to be a parallel in

00:15:50,760 --> 00:15:55,529
the next module release there is free

00:15:52,680 --> 00:15:57,330
IPA in Postgres SQL in order to build

00:15:55,529 --> 00:15:59,160
this module you need to have all the

00:15:57,330 --> 00:16:01,170
build dependencies module arised and the

00:15:59,160 --> 00:16:03,180
runtime dependencies module arise in

00:16:01,170 --> 00:16:04,920
this like hundreds of packages so we

00:16:03,180 --> 00:16:06,990
need to figure out like where these

00:16:04,920 --> 00:16:08,640
packages are meant to be like there

00:16:06,990 --> 00:16:11,580
being one modules from there being ten

00:16:08,640 --> 00:16:13,770
modules and all that Adam does is that

00:16:11,580 --> 00:16:16,320
like this work is trying to figure that

00:16:13,770 --> 00:16:18,660
out so there's like a bunch of reports

00:16:16,320 --> 00:16:21,589
in here and there is a bunch of modules

00:16:18,660 --> 00:16:25,950
like defined what packages are in there

00:16:21,589 --> 00:16:27,740
so feel free to look into it that we can

00:16:25,950 --> 00:16:32,040
finally move

00:16:27,740 --> 00:16:35,730
to the workshop part okay I'll skip this

00:16:32,040 --> 00:16:38,010
one and I'll skip to the like a drill

00:16:35,730 --> 00:16:43,530
workshop part and let's create outer to

00:16:38,010 --> 00:16:45,890
smoke module so so that's our task like

00:16:43,530 --> 00:16:51,450
create out the tools model so let's

00:16:45,890 --> 00:16:53,760
start I already kind of set the name but

00:16:51,450 --> 00:16:55,950
the name is important like usually you

00:16:53,760 --> 00:16:58,200
didn't name the module probably by the

00:16:55,950 --> 00:17:00,360
most significant package in it so for

00:16:58,200 --> 00:17:02,730
example PostgreSQL module B name for

00:17:00,360 --> 00:17:04,890
guests well right but for outer tools

00:17:02,730 --> 00:17:07,710
like outer tools just like the virtual

00:17:04,890 --> 00:17:10,560
name but the packages in it will be Auto

00:17:07,710 --> 00:17:13,710
comfort to make and lick too so so

00:17:10,560 --> 00:17:15,980
hopefully this that makes sense

00:17:13,710 --> 00:17:20,250
and I believe it was already said before

00:17:15,980 --> 00:17:22,260
so we need to create a stream for it so

00:17:20,250 --> 00:17:27,360
like so it's available and people can

00:17:22,260 --> 00:17:30,090
use the module so as matt said on his

00:17:27,360 --> 00:17:32,460
talk about arbitrary branching usually

00:17:30,090 --> 00:17:35,010
you name the stream by the version but

00:17:32,460 --> 00:17:37,890
as you can see like these versions are

00:17:35,010 --> 00:17:39,390
completely out of sync so this is one

00:17:37,890 --> 00:17:43,250
version to version one

00:17:39,390 --> 00:17:45,840
so how would we name the stream i

00:17:43,250 --> 00:17:47,250
already asked this question and i didn't

00:17:45,840 --> 00:17:50,760
receive any answer

00:17:47,250 --> 00:17:53,900
so maybe interesting idea could be the

00:17:50,760 --> 00:17:57,390
name stream right like the date when the

00:17:53,900 --> 00:18:00,570
madam when it's created so for example

00:17:57,390 --> 00:18:02,160
today and then when we update packages

00:18:00,570 --> 00:18:02,680
we can create a new stream with the new

00:18:02,160 --> 00:18:06,730
diet

00:18:02,680 --> 00:18:08,260
some like that so this is just just for

00:18:06,730 --> 00:18:11,200
entertaining

00:18:08,260 --> 00:18:12,880
okay so let's create a module MD we

00:18:11,200 --> 00:18:16,750
don't need to write it by hand I create

00:18:12,880 --> 00:18:19,660
it like a simple version of it so if you

00:18:16,750 --> 00:18:23,070
have it opened you can feel free to copy

00:18:19,660 --> 00:18:23,070
it that's what I will do

00:18:25,910 --> 00:18:33,620
and let's try to build it so I'm in the

00:18:29,810 --> 00:18:36,250
Berkshire Bravo so in order to build it

00:18:33,620 --> 00:18:39,830
locally you need to be in the triple

00:18:36,250 --> 00:18:43,100
onion and the modularity file she has to

00:18:39,830 --> 00:18:51,680
be named the same as the director to

00:18:43,100 --> 00:18:55,010
create directory into it and I need to

00:18:51,680 --> 00:18:59,660
create out of juice

00:18:55,010 --> 00:19:01,100
Tiamo she's the module and II sorry I

00:18:59,660 --> 00:19:03,320
hope it's visible because I have

00:19:01,100 --> 00:19:06,610
different color scheme than the one in

00:19:03,320 --> 00:19:06,610
the terminal so is visible

00:19:23,150 --> 00:19:37,950
so I'll try to switch to I music

00:19:28,620 --> 00:19:43,380
Solarize but I hope okay so the start

00:19:37,950 --> 00:19:47,340
module MD you can get through like here

00:19:43,380 --> 00:19:50,000
are the packages we use go directly from

00:19:47,340 --> 00:19:55,890
rawhide we have the summary description

00:19:50,000 --> 00:19:59,880
references so as I said we need to be in

00:19:55,890 --> 00:20:02,989
group also you know gate

00:19:59,880 --> 00:20:02,989
[Music]

00:20:04,100 --> 00:20:12,810
like this so yeah the repulsive flirty

00:20:08,630 --> 00:20:15,180
ask a question yeah so in the yellow

00:20:12,810 --> 00:20:16,560
file it was playing to a github repo and

00:20:15,180 --> 00:20:19,110
that's I assume that's just because this

00:20:16,560 --> 00:20:22,920
is a demo one it would be living in this

00:20:19,110 --> 00:20:26,400
kid yeah differently so just your hacker

00:20:22,920 --> 00:20:33,060
yeah yeah exactly so this is just just

00:20:26,400 --> 00:20:35,070
for the demo okay so now since we

00:20:33,060 --> 00:20:39,380
installed module the service we can do

00:20:35,070 --> 00:20:44,250
MBS real local and here's the time with

00:20:39,380 --> 00:20:48,090
when y5 go go man and this one will fail

00:20:44,250 --> 00:20:51,890
so does anyone know why it fails so

00:20:48,090 --> 00:20:51,890
there's an issue in module MD

00:20:57,539 --> 00:21:03,840
so there's something missing in here

00:21:00,250 --> 00:21:03,840
like something very important

00:21:09,870 --> 00:21:17,409
yeah exactly didn't suddenly

00:21:12,250 --> 00:21:18,730
dependencies so the build tool or your

00:21:17,409 --> 00:21:21,159
service doesn't know how to build it

00:21:18,730 --> 00:21:27,299
actually because like we didn't set any

00:21:21,159 --> 00:21:31,029
modules as little dependencies okay so

00:21:27,299 --> 00:21:33,490
so here is the next iteration so we set

00:21:31,029 --> 00:21:36,159
dependencies to platform and host and we

00:21:33,490 --> 00:21:38,610
do the same for requires so what's tried

00:21:36,159 --> 00:21:38,610
like this

00:21:43,070 --> 00:21:49,570
okay so now we have dependencies we can

00:21:46,730 --> 00:21:49,570
commit

00:21:51,900 --> 00:21:55,160
and we can

00:21:58,080 --> 00:22:03,870
so usually when you use and build local

00:22:00,630 --> 00:22:07,380
there's a bunch of a book and when you

00:22:03,870 --> 00:22:09,780
saw locally to be smokers back-end so

00:22:07,380 --> 00:22:12,870
there is usually one line with blocks

00:22:09,780 --> 00:22:15,480
for mock so you need to probably wait

00:22:12,870 --> 00:22:17,100
for it and answered it appears like

00:22:15,480 --> 00:22:20,280
usually what I do I open your terminal

00:22:17,100 --> 00:22:21,900
window and I tell looks from mock so I

00:22:20,280 --> 00:22:23,580
can see what's actually happening

00:22:21,900 --> 00:22:25,530
because right now it's looked like it's

00:22:23,580 --> 00:22:39,180
start but especially building the

00:22:25,530 --> 00:22:41,180
packages in mock just yeah that's very

00:22:39,180 --> 00:22:44,210
possible

00:22:41,180 --> 00:22:54,320
so it's downloading packages for yes or

00:22:44,210 --> 00:22:56,570
no this is really Jimmy oh yeah I should

00:22:54,320 --> 00:22:59,690
probably sit in the beginning so I'm

00:22:56,570 --> 00:23:06,650
using a lot of shell aliases and video

00:22:59,690 --> 00:23:09,850
is being star dot llamo so I'll try to

00:23:06,650 --> 00:23:09,850
not to do that sorry

00:23:12,380 --> 00:23:20,639
okay okay so when you put the

00:23:18,269 --> 00:23:22,409
dependencies in the area file what is a

00:23:20,639 --> 00:23:27,120
module bill where is the module bill

00:23:22,409 --> 00:23:29,450
service cables from Koji so it's going

00:23:27,120 --> 00:23:35,549
out and just pulling down

00:23:29,450 --> 00:23:37,380
there's Koji module where nobody named

00:23:35,549 --> 00:23:38,970
platform master he put it there

00:23:37,380 --> 00:23:42,620
yeah so next to the product definition

00:23:38,970 --> 00:23:42,620
center you can see what

00:23:43,340 --> 00:23:45,580
okay

00:23:57,320 --> 00:24:00,940
that was just in one of them

00:24:09,510 --> 00:24:14,160
so as I said like there's already

00:24:12,150 --> 00:24:16,350
something happening the mock and they're

00:24:14,160 --> 00:24:19,260
so the bill dependencies have been

00:24:16,350 --> 00:24:21,360
installed right now so if you are

00:24:19,260 --> 00:24:23,309
interested to see like where the

00:24:21,360 --> 00:24:31,559
packages are being downloaded it's in

00:24:23,309 --> 00:24:34,230
home there's a directory called module

00:24:31,559 --> 00:24:37,260
module build and there is like cache

00:24:34,230 --> 00:24:38,730
when that's where all these modules like

00:24:37,260 --> 00:24:40,740
your build dependencies are being

00:24:38,730 --> 00:24:42,600
downloaded and builds there that's where

00:24:40,740 --> 00:24:44,760
the bills are where you can find all the

00:24:42,600 --> 00:24:50,309
rpms which are being built from our

00:24:44,760 --> 00:24:50,970
Joseph okay let's get back so if I can

00:24:50,309 --> 00:24:53,400
kill it

00:24:50,970 --> 00:24:56,990
I can show you the way this one is this

00:24:53,400 --> 00:24:58,950
one real and so so we so I don't waste

00:24:56,990 --> 00:25:01,800
no Wi-Fi

00:24:58,950 --> 00:25:08,220
so this one will

00:25:01,800 --> 00:25:10,800
this one who felt like this so the built

00:25:08,220 --> 00:25:12,809
that command from DNF will fail that it

00:25:10,800 --> 00:25:15,090
can find out the control to make and

00:25:12,809 --> 00:25:19,080
help to man because these are the those

00:25:15,090 --> 00:25:23,340
requires of of one of the components of

00:25:19,080 --> 00:25:25,260
a module so I'm not sure if you follow

00:25:23,340 --> 00:25:27,600
what's happening here but it means that

00:25:25,260 --> 00:25:29,340
we are trying to build automate or Auto

00:25:27,600 --> 00:25:31,380
conf and we need actually able to make a

00:25:29,340 --> 00:25:34,440
router come to build it so we need to

00:25:31,380 --> 00:25:40,050
boost rapidly and so what are the ways

00:25:34,440 --> 00:25:43,020
to bootstrap it there are I try to write

00:25:40,050 --> 00:25:45,080
it down on our website and I can show

00:25:43,020 --> 00:25:45,080
you

00:25:53,240 --> 00:26:01,850
okay so this it's operating procedure

00:25:56,600 --> 00:26:04,370
for module build service and here in our

00:26:01,850 --> 00:26:07,669
website this guide how to build how to

00:26:04,370 --> 00:26:10,520
build locally and all right that's

00:26:07,669 --> 00:26:12,980
that's and in this one it's like how to

00:26:10,520 --> 00:26:15,230
define the module empty and there's to

00:26:12,980 --> 00:26:15,649
build the booster process is still in

00:26:15,230 --> 00:26:18,980
here

00:26:15,649 --> 00:26:22,190
so can do two things you can either try

00:26:18,980 --> 00:26:24,770
to bootstrap the package itself so it

00:26:22,190 --> 00:26:27,140
doesn't require the bill dependencies

00:26:24,770 --> 00:26:29,570
you don't have any available so that's

00:26:27,140 --> 00:26:31,100
what we're trying to do with bortron so

00:26:29,570 --> 00:26:33,289
for example for auto coneflowers

00:26:31,100 --> 00:26:36,169
collaborating with the maintainer and

00:26:33,289 --> 00:26:38,990
you solicited me how can i moose wrap it

00:26:36,169 --> 00:26:42,260
so so it doesn't require how to conceal

00:26:38,990 --> 00:26:46,820
and I can build it without the need but

00:26:42,260 --> 00:26:48,740
that was like very very long so for each

00:26:46,820 --> 00:26:50,990
package you have to spend like days

00:26:48,740 --> 00:26:52,820
working on it and if you look at the

00:26:50,990 --> 00:26:55,730
requirements if you need like hundreds

00:26:52,820 --> 00:26:58,580
of packages it's like so much work to

00:26:55,730 --> 00:27:04,010
move throughout the whole distribution

00:26:58,580 --> 00:27:06,020
so in the end we started cheating and we

00:27:04,010 --> 00:27:08,149
started cheating by using actual

00:27:06,020 --> 00:27:10,399
packages from koji from the regular

00:27:08,149 --> 00:27:13,820
distribution to ease the bootstrapping

00:27:10,399 --> 00:27:17,510
and that's like I would definitely

00:27:13,820 --> 00:27:20,330
suggest to you and the way this cheating

00:27:17,510 --> 00:27:22,640
works is that you don't you do you don't

00:27:20,330 --> 00:27:24,950
use platform or host a server build

00:27:22,640 --> 00:27:26,460
dependencies but you use bootstrap

00:27:24,950 --> 00:27:28,950
module

00:27:26,460 --> 00:27:32,220
sir bill dependencies and this mr.

00:27:28,950 --> 00:27:34,409
module contains 15,000 packages and

00:27:32,220 --> 00:27:35,820
there is like ultra confer to make our

00:27:34,409 --> 00:27:38,460
there so you can easily build your

00:27:35,820 --> 00:27:41,220
modules like this so yeah it's cheating

00:27:38,460 --> 00:27:44,789
but like for bootstrapping it's like

00:27:41,220 --> 00:27:46,889
very very useful and uncie already

00:27:44,789 --> 00:27:49,950
bootstrap your modules you can like

00:27:46,889 --> 00:27:52,799
remove the cheating and start start

00:27:49,950 --> 00:27:54,570
going like the module away and the

00:27:52,799 --> 00:27:56,369
booster module is the reason why we

00:27:54,570 --> 00:27:58,679
probably can't build anything today

00:27:56,369 --> 00:28:01,559
because as I said there's 15,000

00:27:58,679 --> 00:28:03,840
packages and it has like 90 bites and

00:28:01,559 --> 00:28:06,720
for example fast internet connection to

00:28:03,840 --> 00:28:08,519
be one hour to download it and since

00:28:06,720 --> 00:28:09,899
like you want to build your module

00:28:08,519 --> 00:28:12,899
locally you need to download the whole

00:28:09,899 --> 00:28:16,259
module and on Takagi Lee's rebuilt it

00:28:12,899 --> 00:28:19,980
like on Tuesday so it's like you need to

00:28:16,259 --> 00:28:24,619
download the new version okay so this

00:28:19,980 --> 00:28:24,619
for bootstrapping like any questions

00:28:27,130 --> 00:28:32,299
so

00:28:29,539 --> 00:28:34,820
the trick can you show us in the model

00:28:32,299 --> 00:28:39,039
of me what you would use and abuse all

00:28:34,820 --> 00:28:39,039
right yeah this version poignant run

00:28:45,350 --> 00:28:50,049
so in order to dependable certainly

00:28:47,750 --> 00:28:50,049
adjust

00:28:50,440 --> 00:28:53,640
like this

00:28:53,990 --> 00:29:02,590
so we just said the dependencies to

00:28:56,750 --> 00:29:02,590
boost our master and I hope that

00:29:03,320 --> 00:29:10,130
okay so it's in here so we have right

00:29:05,930 --> 00:29:12,200
now independent bootstrap and right now

00:29:10,130 --> 00:29:14,900
the build of our tools module should

00:29:12,200 --> 00:29:17,060
pass so these are the last times from

00:29:14,900 --> 00:29:21,650
more clock you can see that it finished

00:29:17,060 --> 00:29:28,490
building the packages so if we had good

00:29:21,650 --> 00:29:30,410
Wi-Fi and yes so that's the this is a DC

00:29:28,490 --> 00:29:34,310
branch of the RPM

00:29:30,410 --> 00:29:39,470
yeah just yes from arcane namespaces

00:29:34,310 --> 00:29:40,870
though it's synonymous Kasturi to wait

00:29:39,470 --> 00:29:45,800
so that's the that's the particular

00:29:40,870 --> 00:29:48,940
about but the waste streams means it

00:29:45,800 --> 00:29:48,940
created is that they're just

00:29:50,710 --> 00:29:56,070
let's just get module slash bootstrap

00:29:53,230 --> 00:29:56,070
yeah

00:29:56,410 --> 00:30:02,940
we should model that question that place

00:29:58,690 --> 00:30:02,940
are it's rpm main space

00:30:03,040 --> 00:30:06,840
no oh sorry didn't know it's just kid

00:30:14,850 --> 00:30:20,779
and if the master there is the stream of

00:30:17,779 --> 00:30:20,779
marvel

00:30:27,630 --> 00:30:30,710
you look confused

00:30:37,050 --> 00:30:47,050
it's all those things oh no I think so

00:30:44,350 --> 00:30:52,560
I've said it wrong yeah and that the

00:30:47,050 --> 00:30:52,560
confusion we said rpm yeah

00:30:52,980 --> 00:30:59,140
you know under that dependency section

00:30:56,340 --> 00:31:01,510
you're not you're never point R that's

00:30:59,140 --> 00:31:04,060
right yes yeah so I just wanted to

00:31:01,510 --> 00:31:07,090
correct myself so this is this is

00:31:04,060 --> 00:31:08,740
modules namespace and this is the name

00:31:07,090 --> 00:31:12,160
of the discreet repo and this is the

00:31:08,740 --> 00:31:14,290
name of the branch like stream that's

00:31:12,160 --> 00:31:17,980
dependencies and in components that's

00:31:14,290 --> 00:31:20,640
rpms namespace so we should probably

00:31:17,980 --> 00:31:20,640
make it

00:31:21,950 --> 00:31:28,830
so okay so dependencies is module

00:31:25,800 --> 00:31:32,330
namespace always in our campaign yes

00:31:28,830 --> 00:31:37,550
yeah it's sort of clear

00:31:32,330 --> 00:31:39,640
yeah yeah I started asking this question

00:31:37,550 --> 00:31:39,640
again

00:31:40,160 --> 00:31:45,130
yeah dependencies are only specified in

00:31:42,650 --> 00:31:45,130
terms of other

00:31:46,940 --> 00:31:53,960
right okay so so if you wanted to say

00:31:52,310 --> 00:31:57,410
this is some kind of a campus from the

00:31:53,960 --> 00:32:00,370
perspective employers which has a

00:31:57,410 --> 00:32:02,740
massive dependency chain

00:32:00,370 --> 00:32:05,260
you have to modular eyes everything that

00:32:02,740 --> 00:32:07,090
like in the dependency chain nor depend

00:32:05,260 --> 00:32:09,549
on it at least so the cube you has

00:32:07,090 --> 00:32:11,890
depends on Gloucester which it does in

00:32:09,549 --> 00:32:14,409
for one its features cluster would have

00:32:11,890 --> 00:32:16,809
to be a module before I even build you

00:32:14,409 --> 00:32:19,000
know old Gloucester could we talk do

00:32:16,809 --> 00:32:21,159
when you just put all of those are ten

00:32:19,000 --> 00:32:23,640
deaths into Indiana then what happens

00:32:21,159 --> 00:32:23,640
when you want to

00:32:29,570 --> 00:32:34,570
now I'm fighting force that's too many

00:32:32,440 --> 00:32:37,280
nuns like what does it say you have a

00:32:34,570 --> 00:32:39,290
okay so if you have a perfectly what's

00:32:37,280 --> 00:32:41,150
the use have a bird modulates outlook

00:32:39,290 --> 00:32:44,450
for acute all their dependencies which

00:32:41,150 --> 00:32:46,790
is a lot a lot of the storage things so

00:32:44,450 --> 00:32:49,020
we push that out and it's literally

00:32:46,790 --> 00:32:51,000
listing every single

00:32:49,020 --> 00:32:53,400
you know Seth less or whatever blah blah

00:32:51,000 --> 00:32:58,160
yeah and then someone comes along and

00:32:53,400 --> 00:33:02,040
wants to make a cluster module anyway

00:32:58,160 --> 00:33:03,840
they will that president so what so they

00:33:02,040 --> 00:33:05,040
they need to call you up and say hey I'm

00:33:03,840 --> 00:33:11,340
gonna make the cluster monitors might

00:33:05,040 --> 00:33:13,290
depending on mine and okay so what we

00:33:11,340 --> 00:33:22,500
would like it to be prettier than that

00:33:13,290 --> 00:33:25,230
but we are not there that's the tools

00:33:22,500 --> 00:33:30,690
were working on right now so yes we have

00:33:25,230 --> 00:33:32,070
one and actually we also in a related

00:33:30,690 --> 00:33:35,309
way we actually want and think this are

00:33:32,070 --> 00:33:36,870
some tests that verifies it all so every

00:33:35,309 --> 00:33:38,700
time there's a committee that a people

00:33:36,870 --> 00:33:40,890
actually checked across everything to

00:33:38,700 --> 00:33:43,370
make sure it doesn't there's no problems

00:33:40,890 --> 00:33:43,370
there

00:33:44,820 --> 00:33:55,330
say like pendency so what it was that we

00:33:52,059 --> 00:33:57,639
have in progress we're using to do like

00:33:55,330 --> 00:33:58,899
we have today stuff it's kind of that so

00:33:57,639 --> 00:34:01,659
basically it tries to make a

00:33:58,899 --> 00:34:04,330
recommendation about what modules you

00:34:01,659 --> 00:34:07,779
should create to accomplish that

00:34:04,330 --> 00:34:09,490
so it does try to you know it's still

00:34:07,779 --> 00:34:11,679
but if I mentioned it guy wanders around

00:34:09,490 --> 00:34:14,149
but I'm alright looking for but there's

00:34:11,679 --> 00:34:18,019
a pool right looking

00:34:14,149 --> 00:34:24,679
so it's officially my next session no

00:34:18,019 --> 00:34:26,690
more questions is there a way to do

00:34:24,679 --> 00:34:28,339
either/or like you don't care what

00:34:26,690 --> 00:34:43,159
stream you get you have to have one of

00:34:28,339 --> 00:34:45,490
them in fact there is it would then

00:34:43,159 --> 00:34:45,490
clobber

00:34:46,690 --> 00:34:53,649
well you never RPM compasses great no no

00:34:50,649 --> 00:34:53,649
fine

00:35:00,730 --> 00:35:06,820
okay so so back to the tooling which

00:35:04,000 --> 00:35:09,880
Adam is working on and the density that

00:35:06,820 --> 00:35:12,280
dependency reports so for example here

00:35:09,880 --> 00:35:15,099
is the outer tools module in in the

00:35:12,280 --> 00:35:17,890
repository and he's running like

00:35:15,099 --> 00:35:23,109
dependency checks for all the modules

00:35:17,890 --> 00:35:25,440
specified in here and for example here

00:35:23,109 --> 00:35:29,410
are all the packages which are needed to

00:35:25,440 --> 00:35:32,440
install like all the packages from how

00:35:29,410 --> 00:35:37,900
to choose model so that's what this file

00:35:32,440 --> 00:35:40,050
says and the other file yeah so there's

00:35:37,900 --> 00:35:40,050
a

00:35:46,060 --> 00:35:50,930
there's some kind of tools generating

00:35:48,170 --> 00:35:54,700
all this upward yeah like anything

00:35:50,930 --> 00:35:54,700
additional to figure out everything

00:35:54,910 --> 00:36:00,369
so and there's other file which says

00:35:57,609 --> 00:36:02,170
like which packages are already present

00:36:00,369 --> 00:36:05,289
in some of the modules so you don't need

00:36:02,170 --> 00:36:07,930
to model our module arise it and like

00:36:05,289 --> 00:36:10,839
these are this three so the difference

00:36:07,930 --> 00:36:13,180
is that like if you want to develop a

00:36:10,839 --> 00:36:15,730
new module to be great to add a module

00:36:13,180 --> 00:36:18,759
in this repository so the tools will

00:36:15,730 --> 00:36:20,890
start incorporated and you can figure

00:36:18,759 --> 00:36:26,849
out what packages are present in some

00:36:20,890 --> 00:36:26,849
modules which are planned for f27 yeah

00:36:39,140 --> 00:36:43,220
right here - this is a summary of all

00:36:40,759 --> 00:36:44,720
this is you know - yeah so this is like

00:36:43,220 --> 00:36:46,940
what what's current thinking than what

00:36:44,720 --> 00:36:49,009
your pickles needed and they move it up

00:36:46,940 --> 00:36:52,099
there are dependencies so these requires

00:36:49,009 --> 00:36:53,749
to be able to have a platform and we

00:36:52,099 --> 00:36:57,940
have this platform place on the tackle

00:36:53,749 --> 00:36:57,940
the packages are not getting data

00:36:59,390 --> 00:37:06,460
I'm like while we're talking about tools

00:37:02,359 --> 00:37:06,460
is there tool that help me populate that

00:37:36,660 --> 00:37:43,570
so so one of my favorite files from this

00:37:40,320 --> 00:37:45,220
dependency report is that like on the

00:37:43,570 --> 00:37:46,780
left side you have the package and on

00:37:45,220 --> 00:37:49,450
the right side you have the name of the

00:37:46,780 --> 00:37:51,250
module where it's present so I mean if

00:37:49,450 --> 00:37:53,860
we had this for ball trauma

00:37:51,250 --> 00:37:56,440
it would save like weeks of work because

00:37:53,860 --> 00:37:58,630
we're so like disconnected about which

00:37:56,440 --> 00:38:00,940
packages are huge module so I'm really

00:37:58,630 --> 00:38:03,280
glad that Adam created this file where

00:38:00,940 --> 00:38:05,080
you can easily check like okay I need I

00:38:03,280 --> 00:38:07,900
don't know out it like in which package

00:38:05,080 --> 00:38:09,670
it is okay its platform great like I

00:38:07,900 --> 00:38:12,280
need something else I know

00:38:09,670 --> 00:38:15,160
Lib DNF like where it is and you might

00:38:12,280 --> 00:38:16,810
figure out that it's not there so like

00:38:15,160 --> 00:38:19,360
from that point it's great to like

00:38:16,810 --> 00:38:26,040
connect with this repository or and

00:38:19,360 --> 00:38:26,040
audio module in there and pipeline

00:38:27,530 --> 00:38:32,880
you know whatever it is someone who eats

00:38:30,060 --> 00:38:35,900
meat I would love ya know rush

00:38:32,880 --> 00:38:35,900
businesslike solve the knee

00:38:36,280 --> 00:38:43,980
get me but where it's confusing I saw

00:38:38,620 --> 00:38:43,980
the coal face it was like running

00:38:44,520 --> 00:38:47,730
let's run description if you download

00:38:45,840 --> 00:38:50,650
that language makeup and just merge

00:38:47,730 --> 00:38:52,119
contaminate just just stop

00:38:50,650 --> 00:39:01,349
yeah maybe we can run it on a server

00:38:52,119 --> 00:39:01,349
that really no I just use three

00:39:08,570 --> 00:39:12,920
but also we need to do like real

00:39:10,580 --> 00:39:14,780
dependency check it's not that like it's

00:39:12,920 --> 00:39:18,380
this package over there

00:39:14,780 --> 00:39:20,900
like Terrell you really need to like do

00:39:18,380 --> 00:39:26,470
proper dependency resolution with Alec

00:39:20,900 --> 00:39:26,470
DNF person like that yeah replying to

00:39:27,820 --> 00:39:35,510
okay so our module is built so we can

00:39:31,430 --> 00:39:37,760
finally submit a new review and it's the

00:39:35,510 --> 00:39:41,780
modular review and infrastructure and

00:39:37,760 --> 00:39:45,620
building infrastructure so finally it's

00:39:41,780 --> 00:39:49,040
off like uh no couple nice very nice

00:39:45,620 --> 00:39:50,630
we have review process so we had the

00:39:49,040 --> 00:39:54,050
review process before that but it was

00:39:50,630 --> 00:39:58,670
proof okay so we have approved review

00:39:54,050 --> 00:40:01,150
process four modules here it is federal

00:39:58,670 --> 00:40:01,150
key

00:40:06,100 --> 00:40:10,930
okay so we have the review process so

00:40:08,320 --> 00:40:13,840
what I already did I submitted a review

00:40:10,930 --> 00:40:17,900
for out the tools but I didn't have time

00:40:13,840 --> 00:40:22,310
to finish it because there was

00:40:17,900 --> 00:40:25,760
ooh so here it is like a standard review

00:40:22,310 --> 00:40:27,820
back so what I did I just uploaded the

00:40:25,760 --> 00:40:30,830
module and defiled my federal people

00:40:27,820 --> 00:40:35,090
account and like they're sort of some

00:40:30,830 --> 00:40:37,070
conversation so instead happens like you

00:40:35,090 --> 00:40:39,530
get dis be 3po with your module and you

00:40:37,070 --> 00:40:42,140
can then submit the building inside

00:40:39,530 --> 00:40:44,480
infrastructure and as I said on our

00:40:42,140 --> 00:40:48,020
website there's a guide how to do it

00:40:44,480 --> 00:40:51,740
just like put the changes and to MPs

00:40:48,020 --> 00:40:53,420
bill submit and that's it yeah so the

00:40:51,740 --> 00:40:57,220
important point is that you Denise had

00:40:53,420 --> 00:40:57,220
package to integrate the pillows yes

00:41:22,030 --> 00:41:27,140
okay do you have a module how do you

00:41:24,890 --> 00:41:28,369
this how do you do the equivalents how

00:41:27,140 --> 00:41:31,609
do you kick off the equivalents in

00:41:28,369 --> 00:41:34,250
infrastructure of a packet built its

00:41:31,609 --> 00:41:37,160
embezzled though supplement MBS bill is

00:41:34,250 --> 00:41:41,180
the command yeah it's all the plan is to

00:41:37,160 --> 00:41:47,020
keep sampling I really like to see it

00:41:41,180 --> 00:41:53,060
rolled into fed back on so yeah well I

00:41:47,020 --> 00:41:56,890
understand move faster okay so we skip

00:41:53,060 --> 00:41:56,890
testing because this is next session

00:41:59,300 --> 00:42:04,250
while these dependencies for the party

00:42:08,970 --> 00:42:12,140
are we doing

00:42:41,550 --> 00:42:45,000
if you want to add

00:43:28,429 --> 00:43:35,789
so just probably end of this workshop

00:43:31,589 --> 00:43:36,979
like unless you more questions so we

00:43:35,789 --> 00:43:40,319
actually we were actually running

00:43:36,979 --> 00:43:41,699
feedback for internally but internal

00:43:40,319 --> 00:43:44,130
feedback form is very helpful for

00:43:41,699 --> 00:43:47,880
community like so

00:43:44,130 --> 00:43:50,189
Alina from our team change it to open

00:43:47,880 --> 00:43:52,859
Google Doc it's available in this link

00:43:50,189 --> 00:43:55,709
so if you have like any questions feel

00:43:52,859 --> 00:43:58,770
free to put them in and I hope that at

00:43:55,709 --> 00:44:02,090
some point because people do Q&A

00:43:58,770 --> 00:44:07,380
in our website or some like that so this

00:44:02,090 --> 00:44:09,330
this is your icon this this isn't the

00:44:07,380 --> 00:44:11,700
bull run today so we started like

00:44:09,330 --> 00:44:14,490
internal feedback form or the other

00:44:11,700 --> 00:44:19,140
group to get like click on like how to

00:44:14,490 --> 00:44:23,940
build modules oh yeah yeah definitely

00:44:19,140 --> 00:44:26,910
like this is like different and I

00:44:23,940 --> 00:44:29,700
probably missed a bit so all of us hang

00:44:26,910 --> 00:44:32,030
out at RC channel federal majority it's

00:44:29,700 --> 00:44:34,890
also the place like once you submit the

00:44:32,030 --> 00:44:37,050
review or like you have some questions

00:44:34,890 --> 00:44:44,580
feel free to connect to it and someone

00:44:37,050 --> 00:44:49,530
will reply from the context yes so this

00:44:44,580 --> 00:44:52,710
is kind of a guy like when so I'm

00:44:49,530 --> 00:44:56,430
looking at Koji right now apps the

00:44:52,710 --> 00:44:58,710
gadget package wide AGL jail it's like a

00:44:56,430 --> 00:45:01,830
small library so I see all these builds

00:44:58,710 --> 00:45:05,130
that have module and

00:45:01,830 --> 00:45:07,500
name like the packaging right I know the

00:45:05,130 --> 00:45:09,390
module build system sticks that in and

00:45:07,500 --> 00:45:11,580
rebuilds it and then there's like a GUID

00:45:09,390 --> 00:45:13,020
tag it's also correct

00:45:11,580 --> 00:45:14,520
what does that put what is that point

00:45:13,020 --> 00:45:18,740
there's not anything

00:45:14,520 --> 00:45:22,820
not again it is

00:45:18,740 --> 00:45:25,160
of the module screaming pizza pretty we

00:45:22,820 --> 00:45:26,470
originally had that Detective module

00:45:25,160 --> 00:45:28,450
underscore platform

00:45:26,470 --> 00:45:30,550
master so you could look at it no it was

00:45:28,450 --> 00:45:34,180
then we ran into elimination in CODIS

00:45:30,550 --> 00:45:37,420
database with the longer characters

00:45:34,180 --> 00:45:40,270
start hashing that database change

00:45:37,420 --> 00:45:41,500
another fix so it's just a matter of s

00:45:40,270 --> 00:45:43,240
to switch it back to be able to move

00:45:41,500 --> 00:45:45,160
away okay so you'll be able to look at a

00:45:43,240 --> 00:45:47,980
building code you can see what module is

00:45:45,160 --> 00:45:50,260
coming you'll be able to look at a

00:45:47,980 --> 00:45:51,490
building Kouji and see like what did

00:45:50,260 --> 00:45:52,720
what did you say that new format is

00:45:51,490 --> 00:45:55,680
going to be the more descriptive one

00:45:52,720 --> 00:45:55,680
module under sofa

00:46:19,630 --> 00:46:23,739
so so the answer to your question is you

00:46:22,089 --> 00:46:26,049
are they were looking cookie I figure

00:46:23,739 --> 00:46:29,640
out what multiple keys are part of yeah

00:46:26,049 --> 00:46:29,640
I mean my first thought was

00:46:57,680 --> 00:47:05,470
got written last week so one who built

00:47:01,760 --> 00:47:05,470
service another what you just

00:47:06,090 --> 00:47:21,030
without a connection you know like my

00:47:08,190 --> 00:47:24,660
descriptor like so like this person

00:47:21,030 --> 00:47:27,900
released so for example I can query the

00:47:24,660 --> 00:47:35,820
build service and see lost lost module

00:47:27,900 --> 00:47:40,140
built unless the internet works defiant

00:47:35,820 --> 00:47:42,510
limited to just 15 and easter is there

00:47:40,140 --> 00:47:45,540
also a command which also shows which

00:47:42,510 --> 00:47:47,900
rpms I are built in the specific module

00:47:45,540 --> 00:47:47,900
built

00:48:07,950 --> 00:48:12,349
but I thought we had something like

00:48:09,480 --> 00:48:12,349
beautiful right

00:48:21,000 --> 00:48:27,160
there so this lets you go one way where

00:48:25,810 --> 00:48:28,480
if you know the model bill you should

00:48:27,160 --> 00:48:29,500
find out what components are in it and

00:48:28,480 --> 00:48:31,710
again to your question is going the

00:48:29,500 --> 00:48:31,710
other way

00:48:35,730 --> 00:48:41,170
so just probably all in five minutes or

00:48:39,190 --> 00:48:43,990
seven minutes we'll have the other part

00:48:41,170 --> 00:48:47,050
when we go to through how to test

00:48:43,990 --> 00:48:49,530
modules and those containers so thank

00:48:47,050 --> 00:48:49,530

YouTube URL: https://www.youtube.com/watch?v=ik_b1fxpZbA


