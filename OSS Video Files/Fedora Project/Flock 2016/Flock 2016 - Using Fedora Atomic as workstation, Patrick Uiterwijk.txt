Title: Flock 2016 - Using Fedora Atomic as workstation, Patrick Uiterwijk
Publication date: 2016-08-21
Playlist: Flock 2016
Description: 
	I have been running a custom RPM-OSTree as my main workstation for a few months by this point. Here I will explain how I've built my own tree, what it's like to have a read only main workstation, why you would want to, and how I still get a lot of software developed on a system where I cannot install additional packages.

https://flock2016.sched.org/event/6yp2/using-fedora-atomic-as-workstation

This video was recorded at the annual Fedora contributor conference, Flock, in KrakÃ³w, Poland, from August 2-5, 2016. You can learn more about Flock at https://flocktofedora.org.

#FlockToFedora

Transcription: https://meetbot.fedoraproject.org/fedora-flock-canaletto/2016-08-03/flock2016.2016-08-03-12.29.log.html
Captions: 
	00:00:01,850 --> 00:00:08,940
hi good afternoon everyone I see that

00:00:06,810 --> 00:00:34,559
this is probably my best attended

00:00:08,940 --> 00:00:37,530
session ever let's first prove that I'm

00:00:34,559 --> 00:00:49,440
not going to be bullshitting here and

00:00:37,530 --> 00:00:54,600
let's well I couldn't but so we're going

00:00:49,440 --> 00:00:56,910
to kuhu notice this is the output that

00:00:54,600 --> 00:01:01,350
you actually get when you're booting

00:00:56,910 --> 00:01:04,769
from our chemistry so this laptop is

00:01:01,350 --> 00:01:08,420
actually running our chemistry trees at

00:01:04,769 --> 00:01:12,439
this very moment and it has been since

00:01:08,420 --> 00:01:12,439
January of this year

00:01:29,950 --> 00:01:34,360
I've told this to a bunch of people and

00:01:32,110 --> 00:01:36,390
they were all like yeah you should tell

00:01:34,360 --> 00:01:40,900
people about how you did this because

00:01:36,390 --> 00:01:44,280
it's not trivial and I can tell you even

00:01:40,900 --> 00:01:48,760
after it is it will still be tricky and

00:01:44,280 --> 00:01:50,830
I can give some pointers but it's still

00:01:48,760 --> 00:01:51,540
a lot of custom stuff that'll we'll get

00:01:50,830 --> 00:01:56,260
to that

00:01:51,540 --> 00:01:58,270
so first note I've heard that marketing

00:01:56,260 --> 00:02:00,660
doesn't like it when you call it atomic

00:01:58,270 --> 00:02:04,270
because it's not too direct on the host

00:02:00,660 --> 00:02:06,550
so officially it's I can only use the

00:02:04,270 --> 00:02:08,649
name RPMs three because that's what I've

00:02:06,550 --> 00:02:11,170
based on I'm not using the official

00:02:08,649 --> 00:02:17,980
atomic trace that's just to keep the

00:02:11,170 --> 00:02:22,360
marketing people happy sorry alright

00:02:17,980 --> 00:02:31,660
yeah like it the internal name if it's

00:02:22,360 --> 00:02:35,440
displayed here is bad records that's the

00:02:31,660 --> 00:02:43,950
name I gave it I'm not very imaginative

00:02:35,440 --> 00:02:47,019
with names in case you wondered so a

00:02:43,950 --> 00:02:50,890
little bit of background limitations of

00:02:47,019 --> 00:02:54,700
why you would want to use it and why not

00:02:50,890 --> 00:02:58,570
how you would set it up which is going

00:02:54,700 --> 00:03:04,239
to be the most tricky part and on some

00:02:58,570 --> 00:03:08,140
of my experience of last month's so why

00:03:04,239 --> 00:03:11,019
would you use it well the entire root

00:03:08,140 --> 00:03:13,570
filesystem is read-only and the entire

00:03:11,019 --> 00:03:15,910
thing is signed which means that even if

00:03:13,570 --> 00:03:20,049
a single thing that's changed under

00:03:15,910 --> 00:03:22,390
needs the read-only parts you will know

00:03:20,049 --> 00:03:25,120
you will see that because if you notice

00:03:22,390 --> 00:03:27,630
the output it actually says good

00:03:25,120 --> 00:03:33,790
signature from my signing key

00:03:27,630 --> 00:03:36,460
so the entire tree is sign and I'm very

00:03:33,790 --> 00:03:40,120
running rawhide on this and I updated

00:03:36,460 --> 00:03:42,460
this morning which I dare to because if

00:03:40,120 --> 00:03:45,820
it failed which it did you can easily

00:03:42,460 --> 00:03:49,120
refer to the previous one like they

00:03:45,820 --> 00:03:51,040
finally fixed the case where dr. nesse

00:03:49,120 --> 00:03:57,930
linens don't communicate and now they're

00:03:51,040 --> 00:04:00,520
broke Wireless yeah Wireless so oh yeah

00:03:57,930 --> 00:04:03,820
so also if you want to know more about

00:04:00,520 --> 00:04:10,540
Roja there's talk about that just across

00:04:03,820 --> 00:04:14,730
this wall um and the last reason for me

00:04:10,540 --> 00:04:17,620
is it's fun I guess it's a challenge

00:04:14,730 --> 00:04:20,380
why not I like challenging things like

00:04:17,620 --> 00:04:22,920
maintaining OpenStack stuff like that

00:04:20,380 --> 00:04:22,920
okay

00:04:24,360 --> 00:04:33,310
limitations so there's no workstation

00:04:29,440 --> 00:04:39,490
freeze available as of yet I know that

00:04:33,310 --> 00:04:42,640
David is working on that but that means

00:04:39,490 --> 00:04:45,850
that you will most likely need to build

00:04:42,640 --> 00:04:48,010
your own trees because you will want

00:04:45,850 --> 00:04:51,670
custom packages and you cannot install

00:04:48,010 --> 00:04:56,530
that Curtis I I've heard they're working

00:04:51,670 --> 00:05:01,720
on layering but as far as I know that's

00:04:56,530 --> 00:05:04,780
not working fully yeah another thing is

00:05:01,720 --> 00:05:07,450
like which I really noticed is that

00:05:04,780 --> 00:05:12,340
atomic or rpms freeze

00:05:07,450 --> 00:05:18,580
it's out there but it has a lot of bugs

00:05:12,340 --> 00:05:20,860
and the DES fixes come slowly if at all

00:05:18,580 --> 00:05:25,320
like there's a few bucks that I've

00:05:20,860 --> 00:05:25,320
opened which they're saying like that's

00:05:26,070 --> 00:05:31,480
because another dependency doesn't want

00:05:28,900 --> 00:05:33,310
to use a library they won't use it like

00:05:31,480 --> 00:05:36,280
for example combs groups are not

00:05:33,310 --> 00:05:36,680
supported in three files so you will

00:05:36,280 --> 00:05:39,960
need

00:05:36,680 --> 00:05:42,230
specificity specify every single pack

00:05:39,960 --> 00:05:44,940
that you want in your tree by hand

00:05:42,230 --> 00:05:49,710
because it does support countries

00:05:44,940 --> 00:05:59,220
because lip balms won't use G lip see us

00:05:49,710 --> 00:06:02,780
: Walters for more well I will come to

00:05:59,220 --> 00:06:02,780
that later because I've got a workaround

00:06:05,840 --> 00:06:09,750
right but they don't want to do that

00:06:08,100 --> 00:06:13,140
because they're not in the business of

00:06:09,750 --> 00:06:14,910
Commerce groups there's a whole lot of

00:06:13,140 --> 00:06:17,400
people that say like yeah it's not my

00:06:14,910 --> 00:06:21,540
it's theirs

00:06:17,400 --> 00:06:23,190
so since you can't add packages you

00:06:21,540 --> 00:06:26,010
would like to use either docker or

00:06:23,190 --> 00:06:29,340
virtual machines or perhaps flat pack

00:06:26,010 --> 00:06:33,540
when I can finally get that working to

00:06:29,340 --> 00:06:36,660
run actual applications because I do

00:06:33,540 --> 00:06:38,490
want to get development done yeah I do

00:06:36,660 --> 00:06:42,240
because I'm a software engineer actually

00:06:38,490 --> 00:06:45,240
that's what I'm paid to do so I've

00:06:42,240 --> 00:06:50,130
actually decided to go mostly the doctor

00:06:45,240 --> 00:06:53,700
route and that means you will need to

00:06:50,130 --> 00:06:57,270
leave to learn a bunch of debt to get

00:06:53,700 --> 00:06:58,530
started and make it work that's just

00:06:57,270 --> 00:07:03,750
things you should take into account

00:06:58,530 --> 00:07:05,730
before going this route because in in

00:07:03,750 --> 00:07:10,380
the end it might be good it will cost

00:07:05,730 --> 00:07:13,020
you a lot of pain to set up so setting

00:07:10,380 --> 00:07:17,910
it up as I said you will want to start

00:07:13,020 --> 00:07:22,440
with creating a custom tree then you

00:07:17,910 --> 00:07:26,100
will deploy get free provision and tests

00:07:22,440 --> 00:07:28,650
and everything and then finally

00:07:26,100 --> 00:07:30,920
hopefully do some work if you ever get

00:07:28,650 --> 00:07:30,920
there

00:07:32,389 --> 00:07:37,340
so for creating a tree right from the

00:07:35,719 --> 00:07:40,120
start you get a bunch of decisions to

00:07:37,340 --> 00:07:44,000
make like which packages do you want

00:07:40,120 --> 00:07:47,110
some people will want to know I have a

00:07:44,000 --> 00:07:48,259
three for example some people will want

00:07:47,110 --> 00:07:51,560
Emacs

00:07:48,259 --> 00:07:58,310
I use vim and no I'm not getting into

00:07:51,560 --> 00:07:59,900
any wars here there is no war okay you

00:07:58,310 --> 00:08:02,180
will also need to choose which OS

00:07:59,900 --> 00:08:06,110
version you want to use because not

00:08:02,180 --> 00:08:08,599
everyone want to use rawhide how you're

00:08:06,110 --> 00:08:11,479
going to deliver it because you would

00:08:08,599 --> 00:08:13,159
want to compose it somewhere you could

00:08:11,479 --> 00:08:18,699
theoretically do that on your machine

00:08:13,159 --> 00:08:22,129
but I prefer not to so I have a separate

00:08:18,699 --> 00:08:24,740
composed machine which just runs a cron

00:08:22,129 --> 00:08:28,340
job to every I think it's five minutes

00:08:24,740 --> 00:08:30,409
curvy try to compose a new tree and then

00:08:28,340 --> 00:08:33,880
if it managed to compose the push it to

00:08:30,409 --> 00:08:38,269
s3 where I can then download it from

00:08:33,880 --> 00:08:43,909
because it's cheap easy storage that has

00:08:38,269 --> 00:08:46,279
an embedded web server so you would want

00:08:43,909 --> 00:08:49,220
to decide on these things before moving

00:08:46,279 --> 00:08:55,399
forward because they kind of decide the

00:08:49,220 --> 00:08:57,410
rest of death files so Daniel will

00:08:55,399 --> 00:09:00,790
create you should create an into a tree

00:08:57,410 --> 00:09:03,860
file there is some documentation on it

00:09:00,790 --> 00:09:06,110
but I will also give you the link to my

00:09:03,860 --> 00:09:09,829
own three files because of my setup is

00:09:06,110 --> 00:09:13,699
public and you can just base it off on

00:09:09,829 --> 00:09:16,070
that you will probably want some scripts

00:09:13,699 --> 00:09:19,160
because you don't want to rerun our

00:09:16,070 --> 00:09:22,760
country compose and push it every time

00:09:19,160 --> 00:09:25,250
manually and generate a signing key

00:09:22,760 --> 00:09:27,170
which you will need to keep secure for

00:09:25,250 --> 00:09:31,390
which I would suggest to go back in time

00:09:27,170 --> 00:09:31,390
and visit Nathaniel talk

00:09:32,590 --> 00:09:43,270
as I said rpm OS 3 files do not support

00:09:39,240 --> 00:09:46,330
comps groups but what I've got a Python

00:09:43,270 --> 00:09:50,440
script that just ingest a comp a tree

00:09:46,330 --> 00:09:53,380
file resolves the comte groups and spits

00:09:50,440 --> 00:09:56,980
a completely expanded trie file out

00:09:53,380 --> 00:10:00,730
that's awesome my repository so you can

00:09:56,980 --> 00:10:03,220
just grab it from there after that you

00:10:00,730 --> 00:10:08,520
run our PMS recomposed

00:10:03,220 --> 00:10:13,740
to actually compose the tree file into a

00:10:08,520 --> 00:10:16,240
tree and it hope that it works because I

00:10:13,740 --> 00:10:19,270
will promise you the first few times you

00:10:16,240 --> 00:10:24,210
will hit upon a queue this package could

00:10:19,270 --> 00:10:28,390
not be found in repo and stuff like that

00:10:24,210 --> 00:10:31,990
there's also a few packages which you

00:10:28,390 --> 00:10:34,920
cannot install like Draco Draco rescue

00:10:31,990 --> 00:10:38,440
because it will break the entire compose

00:10:34,920 --> 00:10:42,990
there's a buck over for dad but they're

00:10:38,440 --> 00:10:47,890
not willing to fix it last I've heard

00:10:42,990 --> 00:10:52,600
they publish it it's fallen which will

00:10:47,890 --> 00:10:55,240
come next test it and letter rinse

00:10:52,600 --> 00:10:58,240
repeat you will likely go through this

00:10:55,240 --> 00:11:00,580
cycle a lot of times I've lost count I

00:10:58,240 --> 00:11:04,470
think that my very first definition came

00:11:00,580 --> 00:11:10,510
to about a hundred trees before I

00:11:04,470 --> 00:11:19,560
started using it for daily use it's

00:11:10,510 --> 00:11:19,560
getting better but well

00:11:22,990 --> 00:11:30,670
I I was using thrower 23 at the time to

00:11:27,459 --> 00:11:33,130
start with so that wasn't diminished the

00:11:30,670 --> 00:11:35,620
main issue is like you will find out

00:11:33,130 --> 00:11:37,930
that there are packages which should be

00:11:35,620 --> 00:11:41,410
pulled in but aren't like for example

00:11:37,930 --> 00:11:45,220
iptables is no longer pulled in if you

00:11:41,410 --> 00:11:49,899
install docker you will need a hard

00:11:45,220 --> 00:12:00,250
manual require iptables because that bug

00:11:49,899 --> 00:12:03,940
is still open in Bugzilla somewhere yes

00:12:00,250 --> 00:12:07,029
like no did a number of hundred or

00:12:03,940 --> 00:12:09,850
something is like when it was ready for

00:12:07,029 --> 00:12:12,339
me for daily use so when it included

00:12:09,850 --> 00:12:15,579
docker and virtualization and everything

00:12:12,339 --> 00:12:19,410
that I wanted for daily use to get a

00:12:15,579 --> 00:12:22,240
first three booting is a lot less hard

00:12:19,410 --> 00:12:26,350
it's just a lot of cycles to find which

00:12:22,240 --> 00:12:29,200
packages you want because could use the

00:12:26,350 --> 00:12:32,760
image up here is QA

00:12:29,200 --> 00:12:32,760
using just used at least

00:12:36,499 --> 00:12:45,859
sort of second oh right yes you could do

00:12:42,079 --> 00:12:47,959
that but then you get a whole lot of

00:12:45,859 --> 00:12:50,539
packages which the default installed

00:12:47,959 --> 00:12:52,369
drawers in which you might not want but

00:12:50,539 --> 00:13:09,769
yes you could totally start with that

00:12:52,369 --> 00:13:13,419
and then remove from death yeah I am I

00:13:09,769 --> 00:13:16,549
do when I point them and it's not docker

00:13:13,419 --> 00:13:18,949
because I'm not sure how well the doctor

00:13:16,549 --> 00:13:29,719
beat people like it when you touch it

00:13:18,949 --> 00:13:32,149
there are package yeah like I it it was

00:13:29,719 --> 00:13:35,329
a requires : IP tables that they were

00:13:32,149 --> 00:13:37,279
missing but yeah I've hit a lot of other

00:13:35,329 --> 00:13:42,879
bugs that where they are missing

00:13:37,279 --> 00:13:42,879
dependencies I've I think I found most

00:13:47,080 --> 00:13:54,190
yeah I saw that you finally closed that

00:13:50,230 --> 00:14:03,690
bug I know you reassigned it and now it

00:13:54,190 --> 00:14:07,870
got fixed I think so for the planet free

00:14:03,690 --> 00:14:11,519
my the two methods I prefer to use are a

00:14:07,870 --> 00:14:14,709
net install image where you just put

00:14:11,519 --> 00:14:20,170
kickstart on the file itself or what I

00:14:14,709 --> 00:14:22,240
do at home is a bixi booth so the fully

00:14:20,170 --> 00:14:25,000
automated regular emit reimage is

00:14:22,240 --> 00:14:28,180
something that I actually do because our

00:14:25,000 --> 00:14:30,610
team Westry has some garbage collection

00:14:28,180 --> 00:14:34,060
issues where it doesn't actually clean

00:14:30,610 --> 00:14:36,820
up everything from previous trees so

00:14:34,060 --> 00:14:37,420
what I do on my laptop I think every

00:14:36,820 --> 00:14:39,880
month

00:14:37,420 --> 00:14:42,519
is just hook it up to the network booted

00:14:39,880 --> 00:14:46,089
from pixie and the entire OS will get

00:14:42,519 --> 00:14:48,399
reimaged but all of my data will still

00:14:46,089 --> 00:14:59,709
be there because that's on a separate

00:14:48,399 --> 00:15:02,170
rotation sorry so that is this month

00:14:59,709 --> 00:15:07,990
that is used in kick starts to actually

00:15:02,170 --> 00:15:11,800
kick off a OS 3 deployment my food cake

00:15:07,990 --> 00:15:14,529
starts also in the repos so you can also

00:15:11,800 --> 00:15:22,740
look at that but kids are slightly

00:15:14,529 --> 00:15:22,740
personal because of sorry

00:15:24,520 --> 00:15:40,340
partitions sorry I so what I've got is I

00:15:34,970 --> 00:15:44,090
have a volume group which has 8 of 250

00:15:40,340 --> 00:15:48,460
gates 30 gate so it's part of select

00:15:44,090 --> 00:15:51,950
would select me of I 30 gig home booed

00:15:48,460 --> 00:15:56,900
50 or 80 gig home and rest is left free

00:15:51,950 --> 00:16:02,500
for docker so the docker story set up

00:15:56,900 --> 00:16:02,500
just sets that up as the you storage

00:16:06,340 --> 00:16:16,310
right except that your slice should be

00:16:09,230 --> 00:16:21,470
big enough for at least two trees there

00:16:16,310 --> 00:16:24,320
dips mostly but as I said they have some

00:16:21,470 --> 00:16:28,100
issues with the garbage collection so it

00:16:24,320 --> 00:16:36,260
will grow slowly over time I hope they

00:16:28,100 --> 00:16:38,890
will fix that in due time notice within

00:16:36,260 --> 00:16:38,890
the trees

00:16:42,210 --> 00:16:48,540
actually no I was saying it correct

00:16:45,190 --> 00:16:51,610
first time it will store 2 full troops

00:16:48,540 --> 00:17:02,170
because the entire tree is sign the

00:16:51,610 --> 00:17:05,680
entire thing starts because yeah like it

00:17:02,170 --> 00:17:08,410
I think that things that are the same

00:17:05,680 --> 00:17:13,480
will not be duplicated because it's a

00:17:08,410 --> 00:17:15,189
good like ish method they use like

00:17:13,480 --> 00:17:26,170
they're using the same object system

00:17:15,189 --> 00:17:29,980
that it is also using the tree objects

00:17:26,170 --> 00:17:39,940
and the pointer that tells it which

00:17:29,980 --> 00:17:43,450
objects are for that tree yes but I

00:17:39,940 --> 00:17:46,240
think you do like the metadata should

00:17:43,450 --> 00:17:49,240
support it I'm not sure to tool in - the

00:17:46,240 --> 00:17:54,310
other but the tooling does support

00:17:49,240 --> 00:17:57,100
signing separately so I guess because

00:17:54,310 --> 00:18:00,000
that's that's stored in the metadata and

00:17:57,100 --> 00:18:02,800
that's the very first file of downloads

00:18:00,000 --> 00:18:11,290
and that contains the reference to the

00:18:02,800 --> 00:18:14,080
objects so it's top down it signs the

00:18:11,290 --> 00:18:17,230
myth I think it signs to metadata and

00:18:14,080 --> 00:18:21,790
then that points all of the objects what

00:18:17,230 --> 00:18:23,740
I believed it we're doing but don't pin

00:18:21,790 --> 00:18:26,020
me on that detail because that's an

00:18:23,740 --> 00:18:28,560
implementation detail and not a hundred

00:18:26,020 --> 00:18:28,560
percent sure

00:18:29,810 --> 00:18:36,440
to use just that breakfast signing

00:18:36,690 --> 00:18:45,670
yes so part one you couldn't because

00:18:42,790 --> 00:18:48,340
read only and part two yes that would

00:18:45,670 --> 00:18:55,600
race because you would need to modify

00:18:48,340 --> 00:18:58,380
the underlying objects so for myself

00:18:55,600 --> 00:19:01,870
because I reprovision to automatically I

00:18:58,380 --> 00:19:06,960
built a tool secure provisioning which

00:19:01,870 --> 00:19:11,110
just automatically decrypt passwords

00:19:06,960 --> 00:19:12,550
upon reinstalling so that I don't

00:19:11,110 --> 00:19:15,610
actually have to be there when it's

00:19:12,550 --> 00:19:20,740
provisioning you could even do that for

00:19:15,610 --> 00:19:22,510
larger skills setups and if you want to

00:19:20,740 --> 00:19:25,780
you can ask me more about the details

00:19:22,510 --> 00:19:32,670
and it also tabs all public everything

00:19:25,780 --> 00:19:36,520
of this is public sorry um

00:19:32,670 --> 00:19:39,309
No well yep the file containing the

00:19:36,520 --> 00:19:41,050
passwords is kind of if you know to

00:19:39,309 --> 00:19:44,910
serve stack my machine you can get the

00:19:41,050 --> 00:19:48,190
file the passwords themselves Arnaud

00:19:44,910 --> 00:19:56,350
they're encrypted with the TPM in here

00:19:48,190 --> 00:19:59,550
and ayub aqui no because you believe for

00:19:56,350 --> 00:20:03,670
certificates doesn't use depressed to

00:19:59,550 --> 00:20:12,330
like it's the ex-59 smart card that is

00:20:03,670 --> 00:20:16,660
using so my experience is that it's I

00:20:12,330 --> 00:20:17,740
like it personally as I said it's not

00:20:16,660 --> 00:20:20,740
for the faint of heart

00:20:17,740 --> 00:20:22,720
it will take quite a while for you to

00:20:20,740 --> 00:20:24,580
get used to if you decide to go to

00:20:22,720 --> 00:20:29,070
drought it will take quite a while to

00:20:24,580 --> 00:20:38,020
get set up until we get a tree from

00:20:29,070 --> 00:20:40,030
somewhere else like David and it is

00:20:38,020 --> 00:20:43,540
quite nice that you can roll back like

00:20:40,030 --> 00:20:45,490
as I said I upgrade it this morning it

00:20:43,540 --> 00:20:49,679
didn't work he just rolled back and

00:20:45,490 --> 00:20:52,840
you're back to a known good system

00:20:49,679 --> 00:20:56,080
which is also ideal for example in a

00:20:52,840 --> 00:20:58,690
managed environment for companies you

00:20:56,080 --> 00:21:01,000
might want to use this because and

00:20:58,690 --> 00:21:05,020
please can't meddle with the local

00:21:01,000 --> 00:21:08,409
system all too much and if an update

00:21:05,020 --> 00:21:12,490
fails you can just roll back to the

00:21:08,409 --> 00:21:30,580
previous one so that should lessen

00:21:12,490 --> 00:21:35,740
support costs probably sorry again you

00:21:30,580 --> 00:21:36,520
know and its own the system oh right

00:21:35,740 --> 00:21:38,080
right

00:21:36,520 --> 00:21:40,960
do you think it will be possible or have

00:21:38,080 --> 00:21:43,840
you tried using that to hold another

00:21:40,960 --> 00:21:48,029
instance I have not tried that that

00:21:43,840 --> 00:21:48,029
would be a interesting thing to do

00:21:49,110 --> 00:21:55,059
before you

00:21:51,450 --> 00:21:58,620
yeah that that sounds like a very

00:21:55,059 --> 00:21:58,620
interesting idea thank you

00:22:05,580 --> 00:22:17,529
please come back in tomorrow or

00:22:08,230 --> 00:22:21,340
something sorry we can't use this I mean

00:22:17,529 --> 00:22:23,529
I'm trying to figure out 200 desktops

00:22:21,340 --> 00:22:33,909
right welcome all identically installed

00:22:23,529 --> 00:22:35,980
all kick-started every machine internet

00:22:33,909 --> 00:22:37,929
connected right so doesn't both of you

00:22:35,980 --> 00:22:43,809
know articles from what I stage into the

00:22:37,929 --> 00:22:45,309
machines that separate cops file to just

00:22:43,809 --> 00:22:47,080
specify you know groups of local

00:22:45,309 --> 00:22:49,450
packages that gives us all the various

00:22:47,080 --> 00:22:53,529
types of machines right time to think of

00:22:49,450 --> 00:22:56,559
how that works into this we can swear I

00:22:53,529 --> 00:22:59,590
could pose trees and those layers on the

00:22:56,559 --> 00:23:00,610
trip no you don't do they later get

00:22:59,590 --> 00:23:03,429
working on that okay

00:23:00,610 --> 00:23:05,019
so eventually yeah the idea is base tree

00:23:03,429 --> 00:23:14,470
and layers on top of those four

00:23:05,019 --> 00:23:21,309
different so which is sort of a normal

00:23:14,470 --> 00:23:35,529
developer thinking more like you have

00:23:21,309 --> 00:23:37,480
mold trees I mean how many of your

00:23:35,529 --> 00:23:40,179
things are you getting the the custom

00:23:37,480 --> 00:23:43,740
tree and company of your applications

00:23:40,179 --> 00:23:43,740
are running this like desktop containers

00:23:44,100 --> 00:23:48,279
sorry are you running anything in

00:23:46,659 --> 00:23:52,240
containers or are you just running the

00:23:48,279 --> 00:23:54,820
tree is run off her in here it already

00:23:52,240 --> 00:23:58,750
works - I run most of my development

00:23:54,820 --> 00:24:03,789
stuff inside doctor the only thing I run

00:23:58,750 --> 00:24:07,059
under host system itself is SSH and gets

00:24:03,789 --> 00:24:11,830
because my keys are not shared to the

00:24:07,059 --> 00:24:14,289
containers which is explicit I might

00:24:11,830 --> 00:24:16,119
change that at some point but at this

00:24:14,289 --> 00:24:19,889
point everything else basically happens

00:24:16,119 --> 00:24:19,889
inside a container

00:24:23,560 --> 00:24:31,840
your firefox your Ralphie's hookers or

00:24:27,040 --> 00:24:36,510
yeah poetry that is installed in a

00:24:31,840 --> 00:24:39,610
doctor which runs as HD with exporting

00:24:36,510 --> 00:24:41,590
but that's not really the importance of

00:24:39,610 --> 00:24:43,240
the concept that's right I mean I have

00:24:41,590 --> 00:24:43,900
no interest of running docker containers

00:24:43,240 --> 00:24:46,360
on my user

00:24:43,900 --> 00:24:48,760
yeah that's just why not at least it so

00:24:46,360 --> 00:24:51,880
that's just for me because I still miss

00:24:48,760 --> 00:24:57,960
Alabama just let him be honest so yeah

00:24:51,880 --> 00:25:01,900
the plan is right I

00:24:57,960 --> 00:25:04,420
as soon as flat pack work work so switch

00:25:01,900 --> 00:25:06,430
that finally the nerve you know so yeah

00:25:04,420 --> 00:25:10,810
as long as you're willing to pose custom

00:25:06,430 --> 00:25:13,110
freeze and need to install now of course

00:25:10,810 --> 00:25:13,110
not

00:25:33,090 --> 00:25:45,150
I have not yeah I think somewhere not

00:25:42,580 --> 00:25:45,150
completely

00:25:56,630 --> 00:26:00,950
all right that's the layer two things I

00:25:59,030 --> 00:26:03,890
think this is something different is no

00:26:00,950 --> 00:26:06,560
section of France until you reboot okay

00:26:03,890 --> 00:26:20,060
if you like see you modified I guess

00:26:06,560 --> 00:26:22,730
constantly modify so it's okay right

00:26:20,060 --> 00:26:28,010
it sounds interesting oh sure thank you

00:26:22,730 --> 00:26:30,650
for Dad yeah I don't want to jump are

00:26:28,010 --> 00:26:35,300
you gonna talk more about specific pick

00:26:30,650 --> 00:26:38,510
up such a pattern no because most of

00:26:35,300 --> 00:26:43,250
them were either specific to the

00:26:38,510 --> 00:26:45,440
packages like SSH stuff or the trees

00:26:43,250 --> 00:26:47,480
that get study funded like then they do

00:26:45,440 --> 00:26:48,920
go to specific questions so you are if

00:26:47,480 --> 00:26:51,910
you are successfully running most of

00:26:48,920 --> 00:26:54,620
your desktop that's in containers what

00:26:51,910 --> 00:26:56,060
what about the existing the door on

00:26:54,620 --> 00:26:59,510
atomic Oh

00:26:56,060 --> 00:27:01,100
our chemistry not sufficient for you

00:26:59,510 --> 00:27:04,910
earlier were talking for example nothing

00:27:01,100 --> 00:27:08,330
vim or Emacs in the tree well the

00:27:04,910 --> 00:27:11,060
problem is no or any kind of desktop

00:27:08,330 --> 00:27:19,370
environment like atomic hosts phony

00:27:11,060 --> 00:27:20,900
contains bash and SSH and that like the

00:27:19,370 --> 00:27:24,680
main reason I'm not using dead trees

00:27:20,900 --> 00:27:29,360
just for some graphical interface

00:27:24,680 --> 00:27:30,650
okay so Union you do have the bases in

00:27:29,360 --> 00:27:31,360
the tree yep and then you're running

00:27:30,650 --> 00:27:34,780
apps

00:27:31,360 --> 00:27:34,780
yes because

00:27:35,879 --> 00:27:40,579
you still need to run a server and stuff

00:27:45,860 --> 00:27:55,289
sorry I tend to unless I know that

00:27:52,950 --> 00:28:14,159
there's a specific bug that's walking me

00:27:55,289 --> 00:28:18,059
down I do it at some depth but no

00:28:14,159 --> 00:28:21,390
because it uses two trees and it always

00:28:18,059 --> 00:28:24,149
keeps the one that's currently booted so

00:28:21,390 --> 00:28:26,549
if you would update it always keeps the

00:28:24,149 --> 00:28:28,919
1s garlic butter so if you update once

00:28:26,549 --> 00:28:30,390
it will replace the non active one if

00:28:28,919 --> 00:28:37,850
you update again it will replace that

00:28:30,390 --> 00:28:42,779
one again it won't touch the active tree

00:28:37,850 --> 00:28:47,419
but I've done that a few times but they

00:28:42,779 --> 00:28:47,419
are quite smart with that I guess

00:28:49,530 --> 00:28:54,060
boxer stop traffic whizzing treatment

00:28:54,580 --> 00:28:59,020
well I can show you

00:29:03,580 --> 00:29:10,869
that's been it just set folds like I

00:29:09,070 --> 00:29:14,639
keep training every now and then and

00:29:10,869 --> 00:29:34,239
then it just doesn't work

00:29:14,639 --> 00:29:35,679
yeah and this is a tree from 38 718 dan

00:29:34,239 --> 00:29:39,070
you're missing a dependency near peckish

00:29:35,679 --> 00:29:55,119
how are you going with the bug we're

00:29:39,070 --> 00:29:58,239
finding bite under natok this was the

00:29:55,119 --> 00:30:02,230
latest three that dr. post and reason

00:29:58,239 --> 00:30:08,529
for that is that the current arching

00:30:02,230 --> 00:30:11,340
Westar is currently broken and I fell or

00:30:08,529 --> 00:30:16,899
I send a message to Collin to ask what

00:30:11,340 --> 00:30:25,269
how do i D bugged is because the deb the

00:30:16,899 --> 00:30:27,309
filler is very annoying composing or

00:30:25,269 --> 00:30:28,529
committing at our no such file or

00:30:27,309 --> 00:30:31,119
directory

00:30:28,529 --> 00:30:35,080
what father are you looking for I have

00:30:31,119 --> 00:30:37,749
no idea because during directly after

00:30:35,080 --> 00:30:41,470
dis is doing so much in the code that

00:30:37,749 --> 00:30:43,210
you've no clue where is Fela but that's

00:30:41,470 --> 00:30:59,980
why that's the latest tree for the

00:30:43,210 --> 00:31:04,899
moment great let's see well this one we

00:30:59,980 --> 00:31:07,149
staged it like it will download it okay

00:31:04,899 --> 00:31:13,350
I guess s3 as an issue down

00:31:07,149 --> 00:31:13,350
oh good kept this portal right oh well I

00:31:13,710 --> 00:31:28,869
hate captive portals but XE is outside

00:31:26,080 --> 00:31:34,509
our hatcheries on it okay that's he is

00:31:28,869 --> 00:31:39,869
not covered under vase elsewhere

00:31:34,509 --> 00:31:43,869
yeah yes okay your Etsy is full time

00:31:39,869 --> 00:31:46,659
yeah so what it does is it the Etsy is

00:31:43,869 --> 00:31:49,570
actually composed in the tree so it gets

00:31:46,659 --> 00:31:51,549
deployed and when you get a new tree it

00:31:49,570 --> 00:31:53,859
does a three-way merge between a

00:31:51,549 --> 00:31:56,369
previous tree the current tree and your

00:31:53,859 --> 00:31:56,369
changes

00:32:00,300 --> 00:32:03,840
how much what

00:32:06,060 --> 00:32:11,920
quite a bit and you will see that dirt

00:32:09,100 --> 00:32:16,690
and all of the install or during the

00:32:11,920 --> 00:32:20,500
composes there's a lot of of pro scripts

00:32:16,690 --> 00:32:24,700
that provide warnings and I've had I

00:32:20,500 --> 00:32:28,300
think just two packages that broke the

00:32:24,700 --> 00:32:34,050
rest is just all spitting warnings yeah

00:32:28,300 --> 00:32:36,840
so I've I've got two of them fixed and

00:32:34,050 --> 00:32:39,640
when I finally find out what the other

00:32:36,840 --> 00:32:45,700
messages are I'll probably get those

00:32:39,640 --> 00:32:47,980
fixed too but it just gets hidden it

00:32:45,700 --> 00:32:50,380
just doesn't show anything yeah because

00:32:47,980 --> 00:32:55,710
it well it's in the Anaconda logs

00:32:50,380 --> 00:32:55,710
somewhere but that's by default hidden

00:33:08,669 --> 00:33:15,210
so one of the main things that you

00:33:11,740 --> 00:33:18,850
always see is things that talk to

00:33:15,210 --> 00:33:24,850
selinux because during compose there's

00:33:18,850 --> 00:33:28,749
no as linux enabled or duress a special

00:33:24,850 --> 00:33:34,950
kind of context I think where it doesn't

00:33:28,749 --> 00:33:34,950
actually work um talks a lot of things

00:33:37,710 --> 00:33:45,909
so a bunch of resources these are the

00:33:42,129 --> 00:33:49,179
URLs with my tree files that's the

00:33:45,909 --> 00:33:52,840
topmost one and that also contains my

00:33:49,179 --> 00:33:56,230
kickstart and those scripts not my

00:33:52,840 --> 00:33:59,470
private key I think it does contain my

00:33:56,230 --> 00:34:04,029
public I'm a private key second one is

00:33:59,470 --> 00:34:06,639
the provisioning tool the next one is my

00:34:04,029 --> 00:34:11,950
set of docker containers like the doctor

00:34:06,639 --> 00:34:15,309
files that I build everything from and

00:34:11,950 --> 00:34:22,679
on my website and how you can get in

00:34:15,309 --> 00:34:22,679
touch with me pretty much yeah

00:34:29,349 --> 00:34:34,829
or quite my pigging email address good

00:34:32,440 --> 00:34:34,829
luck with that

00:34:36,599 --> 00:34:42,389
yeah it's not too hard to point but I

00:34:39,520 --> 00:34:53,230
hope not too many people who use that

00:34:42,389 --> 00:34:54,649
are there any further questions to

00:34:53,230 --> 00:34:56,960
actually install

00:34:54,649 --> 00:35:02,089
was through system on top of this thing

00:34:56,960 --> 00:35:06,470
installed ah yes it is possible you can

00:35:02,089 --> 00:35:10,640
just run Arkin oh s free remote at pool

00:35:06,470 --> 00:35:12,890
and then deployed that tree and that

00:35:10,640 --> 00:35:19,119
will show up in rug so that should also

00:35:12,890 --> 00:35:23,809
work as a quick way to get working true

00:35:19,119 --> 00:35:26,900
but for my since that is explicitly not

00:35:23,809 --> 00:35:54,289
what I want that's not what I did but

00:35:26,900 --> 00:35:56,510
yeah right very likely yes yeah and I

00:35:54,289 --> 00:35:58,369
mean easier way to do it than composing

00:35:56,510 --> 00:36:00,200
the whole tree there's none of what the

00:35:58,369 --> 00:36:02,529
criteria are that would cause the

00:36:00,200 --> 00:36:05,270
problem per se would be what

00:36:02,529 --> 00:36:09,650
well let me definitely do it through our

00:36:05,270 --> 00:36:12,380
composing trees is nightly right as we

00:36:09,650 --> 00:36:15,740
can test those trees and that allows us

00:36:12,380 --> 00:36:18,560
to actually test the same code

00:36:15,740 --> 00:36:19,730
to users like you know you can do

00:36:18,560 --> 00:36:21,920
another test right now

00:36:19,730 --> 00:36:24,619
you tested something that's different

00:36:21,920 --> 00:36:26,570
were competing with you know with get an

00:36:24,619 --> 00:36:29,060
update alright in the history then you

00:36:26,570 --> 00:36:33,890
actually test the exact tree that people

00:36:29,060 --> 00:36:40,130
are going to yeah so ducks we're good

00:36:33,890 --> 00:36:41,600
doing three hurry using always treating

00:36:40,130 --> 00:36:44,170
on your on your position is that

00:36:41,600 --> 00:36:44,170
something that you

00:36:48,369 --> 00:37:00,680
it depends on what kind of for people

00:36:57,109 --> 00:37:05,270
who very often use jump install with

00:37:00,680 --> 00:37:08,329
some grad could fool not sure if you're

00:37:05,270 --> 00:37:12,650
mostly using text-based tools or like

00:37:08,329 --> 00:37:17,150
terminal or about Erb not changing your

00:37:12,650 --> 00:37:19,010
package at all that often I think it's a

00:37:17,150 --> 00:37:22,089
pretty good way to make sure that you

00:37:19,010 --> 00:37:22,089
always have a stable system

00:37:35,660 --> 00:37:41,420
right but this is exporting over local

00:37:48,020 --> 00:37:59,990
you notice it's somewhat but not too

00:37:51,630 --> 00:38:17,700
much right yeah that's just how you

00:37:59,990 --> 00:38:19,620
decide to do that you could sure when

00:38:17,700 --> 00:38:22,740
you're using a doctor are you using

00:38:19,620 --> 00:38:25,050
containers they just work in freely are

00:38:22,740 --> 00:38:30,480
you generally creating docker files are

00:38:25,050 --> 00:38:33,300
more ready dad depends on the project

00:38:30,480 --> 00:38:39,210
basically for some projects I just have

00:38:33,300 --> 00:38:41,730
a generic - any generic I've got no jazz

00:38:39,210 --> 00:38:43,650
I've got a couple of generic ones for

00:38:41,730 --> 00:38:46,020
backing for stuff I don't touch all

00:38:43,650 --> 00:38:49,880
right often and then I just do yum

00:38:46,020 --> 00:38:52,890
install inside there every time again

00:38:49,880 --> 00:38:55,260
but for example for epsilon I've got a

00:38:52,890 --> 00:38:58,770
static tree which is exactly what we

00:38:55,260 --> 00:39:01,230
were of God two sets of trees once one

00:38:58,770 --> 00:39:03,420
is just like was on our website like

00:39:01,230 --> 00:39:06,990
this is what you need for development

00:39:03,420 --> 00:39:10,020
and the other tree is like this is what

00:39:06,990 --> 00:39:12,450
we install in production exactly so it

00:39:10,020 --> 00:39:15,680
is what we ship and this should work

00:39:12,450 --> 00:39:18,300
if this doesn't we are having an issue

00:39:15,680 --> 00:39:21,270
I'm using the second one mostly for

00:39:18,300 --> 00:39:24,320
testing releases and pushes first one

00:39:21,270 --> 00:39:24,320
for actual development

00:39:26,010 --> 00:39:34,510
marriages yes and I actually even

00:39:31,240 --> 00:39:44,230
maintain up to the fedora per base image

00:39:34,510 --> 00:39:48,520
so yeah you need to get up I think

00:39:44,230 --> 00:39:52,660
that's in 1 T 2 I'll spit out first

00:39:48,520 --> 00:40:02,950
right up so yeah it's definitely 23 24

00:39:52,660 --> 00:40:08,260
or not well yeah I assume it installs

00:40:02,950 --> 00:40:10,420
faster - yeah well beans and what it

00:40:08,260 --> 00:40:13,720
does is just it downloads all of the

00:40:10,420 --> 00:40:20,920
files and then run out too much to

00:40:13,720 --> 00:40:22,690
deploy it downloads all well it gets the

00:40:20,920 --> 00:40:34,270
tree fuzz from wherever you put notes

00:40:22,690 --> 00:40:35,830
refunds I mean you can do to optimize CC

00:40:34,270 --> 00:40:37,570
gives us off more I have to deploy to

00:40:35,830 --> 00:40:41,200
every workstation every time this is

00:40:37,570 --> 00:40:43,830
exactly so benefits on what the devotion

00:40:41,200 --> 00:40:43,830
was describing

00:40:46,950 --> 00:40:54,990
we have explored or that voice trees on

00:40:52,040 --> 00:41:01,349
question and five systems but you don't

00:40:54,990 --> 00:41:02,730
need to overcomplicate maybe if you had

00:41:01,349 --> 00:41:06,150
a hundred thousand desktops there are

00:41:02,730 --> 00:41:15,299
only two hundred so yeah go in with two

00:41:06,150 --> 00:41:17,309
hundred you can not right now my problem

00:41:15,299 --> 00:41:20,130
is my machines are way faster than my

00:41:17,309 --> 00:41:25,740
network so there's I have a university

00:41:20,130 --> 00:41:27,240
network and socks but op dirty initial

00:41:25,740 --> 00:41:29,549
one updates

00:41:27,240 --> 00:41:32,130
it just download the dips and that's so

00:41:29,549 --> 00:41:46,530
that should be they don't have to

00:41:32,130 --> 00:41:53,000
completely I'm pulling it down from s3

00:41:46,530 --> 00:41:59,430
in West Virginia I think this region I I

00:41:53,000 --> 00:42:02,130
it throw me in and from here for the

00:41:59,430 --> 00:42:05,490
point it's a lot quicker than normal in

00:42:02,130 --> 00:42:09,319
a comma I think it takes about five

00:42:05,490 --> 00:42:14,480
minutes for a full deploy with a

00:42:09,319 --> 00:42:14,480
reasonably sized tree so

00:42:21,850 --> 00:42:28,780
of course we're just wondering if it

00:42:24,950 --> 00:42:30,980
helps me yeah I mean obviously I know

00:42:28,780 --> 00:42:33,170
you know it's New Jersey especially if

00:42:30,980 --> 00:42:39,440
you're not going to save some expensive

00:42:33,170 --> 00:42:42,680
stuff right so but also I mean if I go

00:42:39,440 --> 00:42:45,590
from and oh you can do cross OS version

00:42:42,680 --> 00:42:48,650
updates with this right so you guys yes

00:42:45,590 --> 00:43:01,460
so if I compose the fidor 24 tree and

00:42:48,650 --> 00:43:07,250
push it and for 24 yeah I went yeah I

00:43:01,460 --> 00:43:09,290
upgrade from 23 to rawhide without

00:43:07,250 --> 00:43:11,660
reinstalling I'm trying to figure out

00:43:09,290 --> 00:43:13,550
does it make my deployment easier does

00:43:11,660 --> 00:43:15,500
it make the annoying updates easier

00:43:13,550 --> 00:43:18,110
we're currently not we grow up in pari

00:43:15,500 --> 00:43:20,240
goo hope the Machine comes up and when

00:43:18,110 --> 00:43:21,710
it comes up it will install itself on to

00:43:20,240 --> 00:43:26,570
a new OS so I don't have to do it

00:43:21,710 --> 00:43:29,510
attended but easier if it was just a

00:43:26,570 --> 00:43:31,520
well okay I made yourself okay yeah

00:43:29,510 --> 00:43:33,260
that's what you basically get and then

00:43:31,520 --> 00:43:36,460
if I in that that's really screwed then

00:43:33,260 --> 00:43:41,420
it's like okay we move back yeah yeah

00:43:36,460 --> 00:43:44,930
but also because I within normal cluster

00:43:41,420 --> 00:43:47,060
of machines you might get one that might

00:43:44,930 --> 00:43:49,910
not get updated all the packages before

00:43:47,060 --> 00:43:52,910
someone hits reboot or yeah stuff like

00:43:49,910 --> 00:43:57,230
that whereas here you noted every system

00:43:52,910 --> 00:44:00,320
has the exact same yes disk so you could

00:43:57,230 --> 00:44:02,920
just have one machine on your desk test

00:44:00,320 --> 00:44:05,420
a new tree on their own and if it works

00:44:02,920 --> 00:44:08,240
deployed everywhere because that's if it

00:44:05,420 --> 00:44:10,550
have someone I really want except if

00:44:08,240 --> 00:44:10,850
there's hardware problems course of

00:44:10,550 --> 00:44:12,800
course

00:44:10,850 --> 00:44:15,070
so I'm other than that if it works and

00:44:12,800 --> 00:44:16,970
one that should work on the others too

00:44:15,070 --> 00:44:28,930
well after me

00:44:16,970 --> 00:44:28,930

YouTube URL: https://www.youtube.com/watch?v=zduGfpfwHz4


