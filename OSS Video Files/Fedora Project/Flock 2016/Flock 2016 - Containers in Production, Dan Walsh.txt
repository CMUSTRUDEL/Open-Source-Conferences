Title: Flock 2016 - Containers in Production, Dan Walsh
Publication date: 2016-08-21
Playlist: Flock 2016
Description: 
	This talk will cover the latest ideas on running containers in production. Adding alternative mechanisms to running containers outside of docker.

https://flock2016.sched.org/event/6yp1/containers-in-production

This video was recorded at the annual Fedora contributor conference, Flock, in KrakÃ³w, Poland, from August 2-5, 2016. You can learn more about Flock at https://flocktofedora.org.

#FlockToFedora

Slides: https://fedorapeople.org/~dwalsh/SELinux/Presentations/ContainersInProduction/
Transcription: https://meetbot.fedoraproject.org/fedora-flock-matejko/2016-08-02/flock2016.2016-08-02-12.31.log.html
Captions: 
	00:00:00,000 --> 00:00:08,580
screen it is that we've got happen okay

00:00:05,310 --> 00:00:10,440
my name is Dan Walsh I'm going to be

00:00:08,580 --> 00:00:15,839
doing a talk all containers in

00:00:10,440 --> 00:00:18,510
production this is a little background I

00:00:15,839 --> 00:00:20,130
run the container team on the lead

00:00:18,510 --> 00:00:22,439
engineer on the container team and read

00:00:20,130 --> 00:00:24,090
that I've been working on darker and

00:00:22,439 --> 00:00:26,640
containers for last couple years and

00:00:24,090 --> 00:00:28,470
I've put out a paper it's an internal

00:00:26,640 --> 00:00:31,199
paper but eventually will be printed his

00:00:28,470 --> 00:00:32,880
blog talking about running containers in

00:00:31,199 --> 00:00:35,489
production you basically thinking about

00:00:32,880 --> 00:00:38,820
containers going forward one of the

00:00:35,489 --> 00:00:40,739
things containers talk about DevOps all

00:00:38,820 --> 00:00:43,079
the time so developer and operators and

00:00:40,739 --> 00:00:45,809
how you know this dude f ops model we're

00:00:43,079 --> 00:00:47,520
constantly putting up packages and the

00:00:45,809 --> 00:00:51,180
whole release cycles things like that

00:00:47,520 --> 00:00:54,980
but to me at this point darker is

00:00:51,180 --> 00:00:57,660
concentrated almost exclusively on the

00:00:54,980 --> 00:00:59,690
on the developer side okay especially

00:00:57,660 --> 00:01:01,680
when you look at I'm ignoring

00:00:59,690 --> 00:01:03,660
orchestration at this point but just

00:01:01,680 --> 00:01:05,010
looking at what the tools have done

00:01:03,660 --> 00:01:06,930
right they've been really concentrate on

00:01:05,010 --> 00:01:08,640
the developer when I think about

00:01:06,930 --> 00:01:11,030
containers in production i think i'm

00:01:08,640 --> 00:01:13,799
trying to think we're trying to look at

00:01:11,030 --> 00:01:15,090
from the operating point of view what

00:01:13,799 --> 00:01:16,979
our operators going to do when they get

00:01:15,090 --> 00:01:19,140
containers in production what did they

00:01:16,979 --> 00:01:23,210
look for so that's what really so

00:01:19,140 --> 00:01:23,210
rethinking about containers

00:01:24,640 --> 00:01:30,770
so most container work up to this point

00:01:27,260 --> 00:01:32,540
is concentrated developer dr. bill dhaka

00:01:30,770 --> 00:01:34,570
commit right it's all about building

00:01:32,540 --> 00:01:38,240
these containers building applications

00:01:34,570 --> 00:01:40,330
and the standardization of oats the

00:01:38,240 --> 00:01:42,920
iphone mad new tools can arise so if we

00:01:40,330 --> 00:01:44,870
up till now everybody's been building

00:01:42,920 --> 00:01:46,880
containers with docker as i said dr.

00:01:44,870 --> 00:01:48,350
building duck and commit but really i

00:01:46,880 --> 00:01:50,510
say there's a standardization of the

00:01:48,350 --> 00:01:53,240
format image format and i'm starting to

00:01:50,510 --> 00:01:55,490
see other groups starting to build

00:01:53,240 --> 00:01:57,229
containers of container images using

00:01:55,490 --> 00:01:59,930
other tools i think that's good i think

00:01:57,229 --> 00:02:01,820
it's good to have innovations up looking

00:01:59,930 --> 00:02:03,680
at how you fill containers so I've seen

00:02:01,820 --> 00:02:05,660
the ansible right now has playbooks

00:02:03,680 --> 00:02:08,750
there at lao you build contains with

00:02:05,660 --> 00:02:11,600
playbooks openshift has a thing called

00:02:08,750 --> 00:02:13,580
sauce to image and you know they're

00:02:11,600 --> 00:02:15,709
building container images that early

00:02:13,580 --> 00:02:18,170
today we still to talk by fedora talking

00:02:15,709 --> 00:02:21,320
about how they're doing lake layered

00:02:18,170 --> 00:02:22,700
container bills in there there's another

00:02:21,320 --> 00:02:25,280
project that's for going on for a while

00:02:22,700 --> 00:02:26,990
dr. in but the real goal here is to

00:02:25,280 --> 00:02:28,700
allow people to build build these

00:02:26,990 --> 00:02:31,250
applications and as long as the output

00:02:28,700 --> 00:02:33,200
these applications are the same I think

00:02:31,250 --> 00:02:35,510
that's good I mean it also means though

00:02:33,200 --> 00:02:37,820
that we don't have to ship a darker

00:02:35,510 --> 00:02:39,890
engine and a dark are fully instrumented

00:02:37,820 --> 00:02:43,010
for building containers introduction

00:02:39,890 --> 00:02:47,660
right but really why do I care about

00:02:43,010 --> 00:02:50,540
that we're looking at here is the copy

00:02:47,660 --> 00:02:52,550
on write file system so we look at

00:02:50,540 --> 00:02:54,530
containers container the whole doc

00:02:52,550 --> 00:02:56,090
rivers arts has all been that looking at

00:02:54,530 --> 00:02:58,700
adding down right because when i'm

00:02:56,090 --> 00:03:01,220
doing darker bills and when i'm doing

00:02:58,700 --> 00:03:03,890
doctor commits what is that basically

00:03:01,220 --> 00:03:05,209
taking what I had before I put a copy on

00:03:03,890 --> 00:03:06,680
write file system on and then I

00:03:05,209 --> 00:03:08,120
developed continue developing the

00:03:06,680 --> 00:03:10,290
applications and I'll eventually save

00:03:08,120 --> 00:03:12,269
that application to it you know to

00:03:10,290 --> 00:03:14,459
Foreman that's all built around copy I'm

00:03:12,269 --> 00:03:17,459
right when I'm running contained is an

00:03:14,459 --> 00:03:19,140
inflection though I don't want my

00:03:17,459 --> 00:03:21,840
application to be able to modify itself

00:03:19,140 --> 00:03:25,200
I really don't want applications to be

00:03:21,840 --> 00:03:27,030
able to modify / user so in production I

00:03:25,200 --> 00:03:29,579
would argue that we want to move towards

00:03:27,030 --> 00:03:31,230
a state where we're not necessarily

00:03:29,579 --> 00:03:33,030
using copy-on-write file systems in

00:03:31,230 --> 00:03:35,459
general for doing that and that opens up

00:03:33,030 --> 00:03:38,689
some opportunities so if we look at the

00:03:35,459 --> 00:03:40,859
problems with coffee and rights systems

00:03:38,689 --> 00:03:44,819
things like device mapper and butter

00:03:40,859 --> 00:03:47,189
effects right both break memory so

00:03:44,819 --> 00:03:48,989
right now if you run device map or

00:03:47,189 --> 00:03:51,510
containers within the fall for fedora

00:03:48,989 --> 00:03:53,819
and all redhead based operating systems

00:03:51,510 --> 00:03:57,150
we run with device map but the second

00:03:53,819 --> 00:03:59,459
default is hey you're fast our own I'm

00:03:57,150 --> 00:04:00,900
going to talk about overlay FSA and you

00:03:59,459 --> 00:04:04,500
have better offense well butter offense

00:04:00,900 --> 00:04:06,359
advice map break security sharing memory

00:04:04,500 --> 00:04:10,590
what happens to these are block based

00:04:06,359 --> 00:04:12,359
devices and there's a problem with the

00:04:10,590 --> 00:04:14,340
file system and the block device don't

00:04:12,359 --> 00:04:17,340
communicate well together and the bottom

00:04:14,340 --> 00:04:20,190
line is the colonel figures out that a

00:04:17,340 --> 00:04:21,959
shared memory is the same so if I logie

00:04:20,190 --> 00:04:23,789
lipsy and another process loads of G

00:04:21,959 --> 00:04:25,169
lipsy the colonel looks at the file

00:04:23,789 --> 00:04:28,770
system and make sure that the file

00:04:25,169 --> 00:04:30,990
system image and simplifying this a lot

00:04:28,770 --> 00:04:32,490
in the block device at the same so it

00:04:30,990 --> 00:04:33,900
can say oh that's already loaded into

00:04:32,490 --> 00:04:35,550
memory so i can use it as soon as I

00:04:33,900 --> 00:04:37,680
start using the vice map or a butter or

00:04:35,550 --> 00:04:39,510
fast the colonel gets confused so we can

00:04:37,680 --> 00:04:41,669
no longer figure out that even though

00:04:39,510 --> 00:04:44,729
it's using both both systems are using

00:04:41,669 --> 00:04:46,289
the same lower level image they can't

00:04:44,729 --> 00:04:49,320
the kernel can figure it also ends up

00:04:46,289 --> 00:04:51,040
loading memory problem that is you

00:04:49,320 --> 00:04:54,610
ran 10 15 as an assistant

00:04:51,040 --> 00:04:56,290
loading a JRE into the system random our

00:04:54,610 --> 00:04:58,360
state of file systems the colonel will

00:04:56,290 --> 00:05:01,240
figure that out in the load one GI reads

00:04:58,360 --> 00:05:03,400
memory top of a copy on write file

00:05:01,240 --> 00:05:05,560
system right now you load 10 of them so

00:05:03,400 --> 00:05:07,480
we end up instantaneously using a tons

00:05:05,560 --> 00:05:12,070
more memory when we use in copy-on-write

00:05:07,480 --> 00:05:14,500
file systems no copy and write file

00:05:12,070 --> 00:05:17,260
systems overlay FS noble AFS actually

00:05:14,500 --> 00:05:19,540
doesn't have the ship memory problem but

00:05:17,260 --> 00:05:20,650
it has other problems nice thing is if

00:05:19,540 --> 00:05:22,840
you've been following the fertile

00:05:20,650 --> 00:05:24,610
patches we've been working very hard to

00:05:22,840 --> 00:05:26,830
fix it fundamental problem with overlay

00:05:24,610 --> 00:05:28,480
at festa that's selinux as the Lunik

00:05:26,830 --> 00:05:31,180
support wasn't there so we lost a lot of

00:05:28,480 --> 00:05:34,260
security if you went to an overlay ffs

00:05:31,180 --> 00:05:38,050
being back end you can turn off st louis

00:05:34,260 --> 00:05:40,150
support for separation of kernels my

00:05:38,050 --> 00:05:42,100
team has been working heavily on that we

00:05:40,150 --> 00:05:45,250
have patches both into the going into

00:05:42,100 --> 00:05:47,650
the Linux kernel for over a fuzzy Angelo

00:05:45,250 --> 00:05:50,490
annex security module and Palm lords in

00:05:47,650 --> 00:05:53,950
the back somewhere here you come easily

00:05:50,490 --> 00:05:55,810
boomer you get into the mix part of it

00:05:53,950 --> 00:05:57,460
and those should come probably by the

00:05:55,810 --> 00:05:59,200
end of the year I'm hoping to have a

00:05:57,460 --> 00:06:00,750
rawhide Colonel out in the next few

00:05:59,200 --> 00:06:04,030
weeks that people can start to play with

00:06:00,750 --> 00:06:05,530
overlay a festivus he limits applaud but

00:06:04,030 --> 00:06:08,830
real problem though the life essence

00:06:05,530 --> 00:06:10,600
it's not a POSIX compliant biosystem so

00:06:08,830 --> 00:06:12,430
there's some fundamental problems that

00:06:10,600 --> 00:06:14,980
people run into when they use overlay FS

00:06:12,430 --> 00:06:18,550
based on assumptions on Oakland POSIX

00:06:14,980 --> 00:06:21,100
compliant ok really would so the one we

00:06:18,550 --> 00:06:23,830
hit originally was a program that opens

00:06:21,100 --> 00:06:25,990
up a file descriptor and then reopens

00:06:23,830 --> 00:06:28,090
the file descriptor or opens the second

00:06:25,990 --> 00:06:29,320
file descriptor on the same file it

00:06:28,090 --> 00:06:31,210
opened up the first one for read-only

00:06:29,320 --> 00:06:32,890
and then opens the same file descriptor

00:06:31,210 --> 00:06:34,510
second time for rewrite and it actually

00:06:32,890 --> 00:06:37,060
ends up with file descriptors to two

00:06:34,510 --> 00:06:38,650
different files okay because when I open

00:06:37,060 --> 00:06:40,390
up a file for right it actually doesn't

00:06:38,650 --> 00:06:43,720
coffee after copies the file into a new

00:06:40,390 --> 00:06:48,130
place so RPM did that so we ended up

00:06:43,720 --> 00:06:50,380
with ipm having to thinking that opened

00:06:48,130 --> 00:06:52,330
the same file twice but I actually

00:06:50,380 --> 00:06:55,390
opened up two different files so there's

00:06:52,330 --> 00:06:59,650
this other problems things like she had

00:06:55,390 --> 00:07:01,810
sockets the base with his problems with

00:06:59,650 --> 00:07:03,340
overlay it fast but I think in a lot of

00:07:01,810 --> 00:07:05,070
cases people going to stop moving over

00:07:03,340 --> 00:07:10,210
there fast once it gets a little more

00:07:05,070 --> 00:07:12,790
them another thing copy and write file

00:07:10,210 --> 00:07:14,950
systems sometimes suffer from right

00:07:12,790 --> 00:07:17,200
right they don't perform as well as exit

00:07:14,950 --> 00:07:18,790
fest you know if you're using standard a

00:07:17,200 --> 00:07:20,700
standard file system you're going to get

00:07:18,790 --> 00:07:22,750
less performance on a copy of writing

00:07:20,700 --> 00:07:28,030
when you go to expecially when you got a

00:07:22,750 --> 00:07:30,490
lot of skills yeah and as i said earlier

00:07:28,030 --> 00:07:32,950
in production really post images should

00:07:30,490 --> 00:07:35,230
never be modified right I don't expect

00:07:32,950 --> 00:07:36,580
when I ship an Apache version I don't

00:07:35,230 --> 00:07:39,850
want a patchy being able to rewrite

00:07:36,580 --> 00:07:41,650
Apache just fundamentally you don't want

00:07:39,850 --> 00:07:43,860
applications able to write the flesh use

00:07:41,650 --> 00:07:46,690
it when they're running the production

00:07:43,860 --> 00:07:48,100
so we don't like container security is

00:07:46,690 --> 00:07:50,470
much better for is much better for

00:07:48,100 --> 00:07:53,169
security if I can only write to certain

00:07:50,470 --> 00:07:55,890
directories I can write to my executable

00:07:53,169 --> 00:07:58,240
cut paths that's always considered good

00:07:55,890 --> 00:08:00,669
lastly copying rights not support

00:07:58,240 --> 00:08:02,530
network storage so you can't run a

00:08:00,669 --> 00:08:06,100
down right file system on top of NFS

00:08:02,530 --> 00:08:10,030
stop a blast assess ok so we lose the

00:08:06,100 --> 00:08:11,320
ability to share your images from a

00:08:10,030 --> 00:08:14,530
centralized side you're going to see

00:08:11,320 --> 00:08:18,330
some cool stuff coming up with that each

00:08:14,530 --> 00:08:22,240
consists so a fundamental problem with

00:08:18,330 --> 00:08:24,270
darker tan LA right now is imagine I

00:08:22,240 --> 00:08:27,850
have a humanities cluster has 10 notes

00:08:24,270 --> 00:08:30,130
and also this huge spike ok I would you

00:08:27,850 --> 00:08:32,469
like to use the Sports Illustrated

00:08:30,130 --> 00:08:34,570
Swimsuit Edition right so the Sports

00:08:32,469 --> 00:08:35,979
Illustrated get somebody hits per week

00:08:34,570 --> 00:08:37,719
per week for a week and also in the

00:08:35,979 --> 00:08:38,710
swimsuit edition cut though and they go

00:08:37,719 --> 00:08:40,660
like a hundred thousand

00:08:38,710 --> 00:08:43,270
times more hits on their website at that

00:08:40,660 --> 00:08:44,860
point well that's sites out in two weeks

00:08:43,270 --> 00:08:47,770
ago roll back so you need to have a

00:08:44,860 --> 00:08:49,660
sudden expansion of hundreds of service

00:08:47,770 --> 00:08:51,430
you're running a container environment

00:08:49,660 --> 00:08:54,280
you know what you want coop enemies to

00:08:51,430 --> 00:08:56,710
do is suddenly launched say 100 100 new

00:08:54,280 --> 00:08:59,110
nose well each one of those nodes in

00:08:56,710 --> 00:09:01,720
order to run your application has to now

00:08:59,110 --> 00:09:03,970
go out to darker or some registry and

00:09:01,720 --> 00:09:06,550
start downloading the images so it has

00:09:03,970 --> 00:09:08,920
to install all you have to pre-provision

00:09:06,550 --> 00:09:10,630
all this stuff alright so just think

00:09:08,920 --> 00:09:12,460
about that as you expand out you have

00:09:10,630 --> 00:09:13,510
all these images just image data moving

00:09:12,460 --> 00:09:17,950
back and forth before the application

00:09:13,510 --> 00:09:21,250
actually starts to run if I had a shared

00:09:17,950 --> 00:09:23,530
file system and are in the same image on

00:09:21,250 --> 00:09:26,260
these multiple sites it soothes the site

00:09:23,530 --> 00:09:28,600
connect with NFS on the server your

00:09:26,260 --> 00:09:30,070
applications are you ready to run so

00:09:28,600 --> 00:09:33,400
just think about that from a scalability

00:09:30,070 --> 00:09:35,530
you know scaling out if I could use my

00:09:33,400 --> 00:09:38,220
images stored on the I mean on a

00:09:35,530 --> 00:09:40,810
network storage it would be awesome

00:09:38,220 --> 00:09:43,420
another thing about shared storage for

00:09:40,810 --> 00:09:45,300
my images is also have a vulnerability I

00:09:43,420 --> 00:09:47,920
have a hundred thousand install base

00:09:45,300 --> 00:09:50,620
shellshock happens now I have to go out

00:09:47,920 --> 00:09:53,080
and do a hundred thousand updates image

00:09:50,620 --> 00:09:54,760
updates if all of those machines are all

00:09:53,080 --> 00:09:56,500
sharing off the city manifest I just

00:09:54,760 --> 00:10:02,010
update that image on NFS and this is

00:09:56,500 --> 00:10:02,010
fantasy everybody gets up I'm like

00:10:03,240 --> 00:10:09,720
so we want to get rid of Cal filesystems

00:10:06,380 --> 00:10:13,490
some ways in production we want to and

00:10:09,720 --> 00:10:16,080
they have Daniel recruits one of our

00:10:13,490 --> 00:10:18,570
leads always come screaming into me

00:10:16,080 --> 00:10:21,209
about pet containers so he calls a peck

00:10:18,570 --> 00:10:23,490
container is actually a container you

00:10:21,209 --> 00:10:25,800
start up and you go into you start doing

00:10:23,490 --> 00:10:29,399
dnf updates and you run that container

00:10:25,800 --> 00:10:30,899
for us okay so we can't fully get rid of

00:10:29,399 --> 00:10:33,600
copy-on-write file systems but an

00:10:30,899 --> 00:10:35,399
introduction and a lot of cases I don't

00:10:33,600 --> 00:10:38,060
think we need to run these applications

00:10:35,399 --> 00:10:38,060
on top of coffee

00:10:42,510 --> 00:10:46,680
so we've been working with this

00:10:44,130 --> 00:10:48,600
neutronic registry atomic ROP ship

00:10:46,680 --> 00:10:49,560
without the name goes back and forth all

00:10:48,600 --> 00:10:51,360
the time whether we're calling a

00:10:49,560 --> 00:10:53,280
tectonic registry of the open ship

00:10:51,360 --> 00:10:56,040
registry it's basically taking the

00:10:53,280 --> 00:10:58,770
docket registry service and adding

00:10:56,040 --> 00:11:00,720
additional features on to it for what

00:10:58,770 --> 00:11:03,060
we've done my team is working on a

00:11:00,720 --> 00:11:04,890
service which is watching continued

00:11:03,060 --> 00:11:06,990
images to arrive so when someone does

00:11:04,890 --> 00:11:08,370
the doctor push the registry we have a

00:11:06,990 --> 00:11:10,170
service that's watching sitting out

00:11:08,370 --> 00:11:14,280
there watching for messages coming in

00:11:10,170 --> 00:11:16,950
and telling us that an image has been

00:11:14,280 --> 00:11:18,570
pushed at which point this application

00:11:16,950 --> 00:11:20,040
will explode the images onto a know it

00:11:18,570 --> 00:11:21,330
straight why are we using oh it's free

00:11:20,040 --> 00:11:24,330
but we don't have to use up as much

00:11:21,330 --> 00:11:26,400
space so you do a doctor push from your

00:11:24,330 --> 00:11:28,800
server the application goes out to the

00:11:26,400 --> 00:11:31,050
registry this application will watch for

00:11:28,800 --> 00:11:34,170
that and then will explode it onto an OS

00:11:31,050 --> 00:11:35,640
free file system the first feature we

00:11:34,170 --> 00:11:37,800
want to add is availability to do an

00:11:35,640 --> 00:11:38,820
atomic scan so what we have is hundreds

00:11:37,800 --> 00:11:41,220
of developers out there pushing

00:11:38,820 --> 00:11:43,320
applications through a service we have

00:11:41,220 --> 00:11:45,270
an application watching it that image

00:11:43,320 --> 00:11:47,370
comes up we exploit sploded out we do an

00:11:45,270 --> 00:11:49,380
atomic skin figure out whether or not

00:11:47,370 --> 00:11:52,320
this application has about an ability to

00:11:49,380 --> 00:11:55,710
vast own abilities we can basically deny

00:11:52,320 --> 00:11:57,780
the push all right basis in order to do

00:11:55,710 --> 00:11:59,250
that we have to explode the image onto

00:11:57,780 --> 00:12:02,180
this and i run the scanning on the

00:11:59,250 --> 00:12:02,180
exploded image

00:12:04,720 --> 00:12:08,230
but what happens is we share that

00:12:06,279 --> 00:12:17,189
exploding image after it's going to load

00:12:08,230 --> 00:12:17,189
beer NFS steps plus I let's look at it

00:12:19,889 --> 00:12:23,179
where is my mouse

00:12:30,190 --> 00:12:34,690
engineering

00:12:31,340 --> 00:12:34,690
right at work

00:12:35,800 --> 00:12:39,899
I wanted to demonstrate or is a

00:12:37,600 --> 00:12:39,899
sovereign

00:12:42,550 --> 00:12:47,480
basically watched open ship registry

00:12:45,260 --> 00:12:50,450
atomic try to shoot for changes images

00:12:47,480 --> 00:12:53,780
slow those images on disc spectrum

00:12:50,450 --> 00:12:55,340
grilling or what scanners so wassup with

00:12:53,780 --> 00:12:57,139
this demo I just got a sander

00:12:55,340 --> 00:13:01,519
appreciative

00:12:57,139 --> 00:13:05,600
machine and a default dr. registry point

00:13:01,519 --> 00:13:07,999
so the special going on I figured it for

00:13:05,600 --> 00:13:10,339
persistent storage so that i can use

00:13:07,999 --> 00:13:14,749
that storage inside explore and save us

00:13:10,339 --> 00:13:16,790
a trip so might be like all innocent

00:13:14,749 --> 00:13:18,709
I've gone in the directory it's just a

00:13:16,790 --> 00:13:21,079
go program single binary so another

00:13:18,709 --> 00:13:22,579
really quick and it builds state behind

00:13:21,079 --> 00:13:25,160
green and a docker image that we're

00:13:22,579 --> 00:13:27,589
going to use the face of the grants

00:13:25,160 --> 00:13:29,720
pocket so so just build that image we're

00:13:27,589 --> 00:13:32,449
going to deploy it using open shift like

00:13:29,720 --> 00:13:34,970
different service solution for any kind

00:13:32,449 --> 00:13:37,639
of your medicine so i can we build the

00:13:34,970 --> 00:13:43,579
image using dr. we have to give this

00:13:37,639 --> 00:13:45,420
program which is mainly created for this

00:13:43,579 --> 00:13:48,600
pattern so it should

00:13:45,420 --> 00:13:50,670
replication keeps a lot and also after

00:13:48,600 --> 00:13:52,830
bridges and lost expeditions right for

00:13:50,670 --> 00:13:55,200
us to do that just for this demo is to

00:13:52,830 --> 00:13:56,880
give that Sylvia count foster app so

00:13:55,200 --> 00:13:59,070
throw overkill obviously production you

00:13:56,880 --> 00:14:01,140
see something more restricted but for

00:13:59,070 --> 00:14:03,680
the purposes of the demo it's the

00:14:01,140 --> 00:14:03,680
easiest way

00:14:05,379 --> 00:14:10,699
so going back to our ship console you

00:14:08,629 --> 00:14:13,670
can see that dr. Explorer pod has been

00:14:10,699 --> 00:14:16,189
created and it's got one replica so it's

00:14:13,670 --> 00:14:18,559
running now and if we take a look at

00:14:16,189 --> 00:14:21,259
some of the images we've got basically

00:14:18,559 --> 00:14:24,589
this pod is watching the image streams

00:14:21,259 --> 00:14:26,209
and is going to explode them onto disk

00:14:24,589 --> 00:14:29,660
and as specified locations i'm actually

00:14:26,209 --> 00:14:31,699
pretty pushed and is busybox image and i

00:14:29,660 --> 00:14:33,619
want to see if our exploiter plot is

00:14:31,699 --> 00:14:36,019
exploded so we're going to the pod now

00:14:33,619 --> 00:14:38,360
it belongs you can see it has a message

00:14:36,019 --> 00:14:40,759
exploded if it exploded default busybox

00:14:38,360 --> 00:14:43,009
Louis that if we go back to our favorite

00:14:40,759 --> 00:14:46,160
vm we can take a look in the explode

00:14:43,009 --> 00:14:49,040
directory and see the contents that in

00:14:46,160 --> 00:14:51,829
the champion unpack into the specified

00:14:49,040 --> 00:14:53,809
director for us so we have a few folders

00:14:51,829 --> 00:14:57,259
here digest in which is a recall explain

00:14:53,809 --> 00:14:59,660
Rico in just a little bit digests

00:14:57,259 --> 00:15:02,059
members in a checksum of an entire image

00:14:59,660 --> 00:15:03,889
and images are sort of a given her your

00:15:02,059 --> 00:15:06,379
name so something like busybox might

00:15:03,889 --> 00:15:07,080
refer to a check some of the range which

00:15:06,379 --> 00:15:09,090
would be ok

00:15:07,080 --> 00:15:11,940
digest so digest contains the actual

00:15:09,090 --> 00:15:14,700
file system and images just contains

00:15:11,940 --> 00:15:16,980
this file link which points into that

00:15:14,700 --> 00:15:19,260
debt just over so it's a way for us to

00:15:16,980 --> 00:15:21,900
update the tags but also keep images

00:15:19,260 --> 00:15:24,210
around so you can see this this link

00:15:21,900 --> 00:15:26,730
contains this checks out which points to

00:15:24,210 --> 00:15:29,940
a specific location under the digest

00:15:26,730 --> 00:15:32,100
other this long Chuck Jackson thermos

00:15:29,940 --> 00:15:36,270
briefest folder contains the actual

00:15:32,100 --> 00:15:38,100
contents Wisconsin so this is a pretty

00:15:36,270 --> 00:15:41,070
first Oh system to be quite a lot which

00:15:38,100 --> 00:15:42,769
you have access to the root of s run

00:15:41,070 --> 00:15:45,240
standards I

00:15:42,769 --> 00:15:46,709
more interesting things you can do is

00:15:45,240 --> 00:15:48,569
share it so I've got an export

00:15:46,709 --> 00:15:52,079
configured to the ship is fourth-world

00:15:48,569 --> 00:15:55,709
read only and I'm going to activate my

00:15:52,079 --> 00:15:58,470
vest server so that I can browse this on

00:15:55,709 --> 00:16:01,050
my host machine and

00:15:58,470 --> 00:16:03,330
with the system once is to share between

00:16:01,050 --> 00:16:07,080
two teams so I call my host here I'm

00:16:03,330 --> 00:16:12,330
going to mount this at / mount and make

00:16:07,080 --> 00:16:15,860
sure you dress right does it look like

00:16:12,330 --> 00:16:15,860
it's connected when we check directly

00:16:16,580 --> 00:16:19,850
that's changed

00:16:20,490 --> 00:16:23,779
fix that really quick

00:16:24,950 --> 00:16:31,460
and looks like a valley right up so now

00:16:27,080 --> 00:16:33,350
I have access to these vests folders and

00:16:31,460 --> 00:16:35,780
sledge nominee will have to fight your

00:16:33,350 --> 00:16:38,390
tree on them so you can see I have a

00:16:35,780 --> 00:16:40,700
busy box tag and it's professor exploded

00:16:38,390 --> 00:16:44,780
here as well so I'm going to be here for

00:16:40,700 --> 00:16:47,480
watch on this tree so it can take

00:16:44,780 --> 00:16:50,750
go back to Beirut p.m. and i'm going to

00:16:47,480 --> 00:16:52,520
push an image tag to be on the early

00:16:50,750 --> 00:16:53,810
shift through though specifically I'm

00:16:52,520 --> 00:16:56,540
going to push an outline the wings

00:16:53,810 --> 00:16:59,090
images pretty small and that should push

00:16:56,540 --> 00:17:01,220
very quickly and so once we push this

00:16:59,090 --> 00:17:04,010
image up we should see it's immediately

00:17:01,220 --> 00:17:07,340
exploded on the host machine not just

00:17:04,010 --> 00:17:10,210
Anna guest VM we also now have access to

00:17:07,340 --> 00:17:14,420
this image anywhere where this shared

00:17:10,210 --> 00:17:16,490
NFS server is working so i have actually

00:17:14,420 --> 00:17:20,600
also prepared a script which will create

00:17:16,490 --> 00:17:22,100
a container over excess of any image in

00:17:20,600 --> 00:17:24,080
the selection out that's just kind of a

00:17:22,100 --> 00:17:27,440
half put up them together and so if I'm

00:17:24,080 --> 00:17:29,360
you start container default busy box and

00:17:27,440 --> 00:17:31,070
latest we'll just drop it right into a

00:17:29,360 --> 00:17:35,240
Bismarck she'll even though i don't have

00:17:31,070 --> 00:17:37,730
the busybox image on this house so I can

00:17:35,240 --> 00:17:40,030
look at the release file not sure if

00:17:37,730 --> 00:17:43,910
it's box has one but you see if one fits

00:17:40,030 --> 00:17:46,780
its standard chris rock shelf and i

00:17:43,910 --> 00:17:52,740
believe in that shelter i can do it

00:17:46,780 --> 00:17:55,990
the ones running for oci you

00:17:52,740 --> 00:17:58,180
so the Act doesn't really clean up the

00:17:55,990 --> 00:18:02,070
folders I cleaned it up manually but I

00:17:58,180 --> 00:18:05,680
can do I just create containers I

00:18:02,070 --> 00:18:07,180
instantaneously out of any image that I

00:18:05,680 --> 00:18:09,040
approach to this register without had

00:18:07,180 --> 00:18:10,420
when we pull them and I don't

00:18:09,040 --> 00:18:12,610
necessarily have to use docker so

00:18:10,420 --> 00:18:15,130
there's really no doctor involved in

00:18:12,610 --> 00:18:17,050
this acceptable approach so on any of

00:18:15,130 --> 00:18:19,870
the clients I don't need doctor I just

00:18:17,050 --> 00:18:24,010
want to see some growth fedora and then

00:18:19,870 --> 00:18:26,650
tagged or go onto this registry and I

00:18:24,010 --> 00:18:30,130
have to put it in default namespace so

00:18:26,650 --> 00:18:33,010
it has a project that it went and I'm

00:18:30,130 --> 00:18:34,930
going to and it will take a second for

00:18:33,010 --> 00:18:37,900
show us what you can explain some of the

00:18:34,930 --> 00:18:40,799
technology is going on I mentioned

00:18:37,900 --> 00:18:43,780
earlier we both over

00:18:40,799 --> 00:18:46,510
these images and this morning with

00:18:43,780 --> 00:18:49,210
intern OS three of our torso artistry is

00:18:46,510 --> 00:18:51,400
specifically designed to store in your

00:18:49,210 --> 00:18:53,559
file system trinks this is kind of a

00:18:51,400 --> 00:18:54,669
natural languages which you never want

00:18:53,559 --> 00:18:57,010
to change you just want to create

00:18:54,669 --> 00:18:58,809
containers out of them and the benefit

00:18:57,010 --> 00:19:01,390
oh I streams that gets totally different

00:18:58,809 --> 00:19:03,460
images in the extra group home and going

00:19:01,390 --> 00:19:07,000
to duplicate on the trials so too we

00:19:03,460 --> 00:19:10,419
just have the same sort or JRE or

00:19:07,000 --> 00:19:12,549
whatever library that I can detect those

00:19:10,419 --> 00:19:14,470
are the same object and it manages that

00:19:12,549 --> 00:19:16,870
regard lengths so they'll actually get

00:19:14,470 --> 00:19:19,179
linked it's the same file system

00:19:16,870 --> 00:19:21,010
resources will consume extra space so if

00:19:19,179 --> 00:19:23,710
I created a small modification to an

00:19:21,010 --> 00:19:25,929
image and coach they did would not take

00:19:23,710 --> 00:19:29,980
them a few strings so it looks like the

00:19:25,929 --> 00:19:32,320
bush work and we're going to go over to

00:19:29,980 --> 00:19:36,610
the house machine and see if we can

00:19:32,320 --> 00:19:38,860
start it and then it does look like it's

00:19:36,610 --> 00:19:41,260
didn't it has crush the buzzing a little

00:19:38,860 --> 00:19:44,380
bit of time to explode so let's check up

00:19:41,260 --> 00:19:45,970
on it but appoint images directory and

00:19:44,380 --> 00:19:48,010
looking at the log here in the other

00:19:45,970 --> 00:19:49,920
ship console and we can see it seems to

00:19:48,010 --> 00:19:53,700
be sorted

00:19:49,920 --> 00:19:56,490
time to create the tag who uses the

00:19:53,700 --> 00:19:58,800
results names in Tanana checksum so I

00:19:56,490 --> 00:20:01,080
can look at the link file and I can make

00:19:58,800 --> 00:20:03,660
sure that the link has been created

00:20:01,080 --> 00:20:06,660
correctly by it just expecting these

00:20:03,660 --> 00:20:07,860
contents and this might affect my

00:20:06,660 --> 00:20:11,310
trouble hope it's a little messed up

00:20:07,860 --> 00:20:13,110
here it doesn't like building has been

00:20:11,310 --> 00:20:14,870
created and if I run the search again it

00:20:13,110 --> 00:20:18,960
will drop it right in or the door shell

00:20:14,870 --> 00:20:22,230
and I have to do it awkward or anything

00:20:18,960 --> 00:20:26,700
there's no doctors to see justice is

00:20:22,230 --> 00:20:27,990
effective or 24 okay obviously we got to

00:20:26,700 --> 00:20:31,260
do a little cutting on the length of

00:20:27,990 --> 00:20:33,540
this but you get the basic idea he sent

00:20:31,260 --> 00:20:36,170
me this last night but we basically have

00:20:33,540 --> 00:20:39,270
the ability at this point to have a

00:20:36,170 --> 00:20:40,980
doctor registry sitting out there that

00:20:39,270 --> 00:20:42,570
instantaneously as soon as any image

00:20:40,980 --> 00:20:45,450
gets pushed to it the image would be

00:20:42,570 --> 00:20:46,890
available via NFS and it's not right now

00:20:45,450 --> 00:20:48,630
we haven't implemented yet but there's

00:20:46,890 --> 00:20:52,710
nothing to prevent you from using SEFs

00:20:48,630 --> 00:20:56,480
or cluster or anything else we've

00:20:52,710 --> 00:20:56,480
actually like to get to the point where

00:21:03,120 --> 00:21:06,909
we'd like to get to the point where we

00:21:05,259 --> 00:21:08,620
should share these things even using oh

00:21:06,909 --> 00:21:10,539
it's true so we have want to be able to

00:21:08,620 --> 00:21:12,700
support all different protocols network

00:21:10,539 --> 00:21:15,190
protocols for accessing your container

00:21:12,700 --> 00:21:17,049
content and not have to do a darker pull

00:21:15,190 --> 00:21:19,899
on every single service and whenever I

00:21:17,049 --> 00:21:22,659
want to get a container so that's first

00:21:19,899 --> 00:21:24,190
point system contains Giuseppe in that

00:21:22,659 --> 00:21:26,649
corner here is been working on the

00:21:24,190 --> 00:21:29,889
concept assist system containers and

00:21:26,649 --> 00:21:31,809
what system containers on a Fresno on an

00:21:29,889 --> 00:21:34,299
atomic post how many people here played

00:21:31,809 --> 00:21:35,740
with tacos I've got a whole bunch of

00:21:34,299 --> 00:21:38,259
people put in hot combo what's the most

00:21:35,740 --> 00:21:40,659
aggravating thing about junk though yeah

00:21:38,259 --> 00:21:43,120
yum doesn't work right yeah yeah you can

00:21:40,659 --> 00:21:44,860
install van you can install you max so

00:21:43,120 --> 00:21:46,899
it's real aggravating when you get on

00:21:44,860 --> 00:21:48,519
there to do it and really what we're

00:21:46,899 --> 00:21:50,860
trying to do with atomic posts and we're

00:21:48,519 --> 00:21:52,539
trying to implement an operating system

00:21:50,860 --> 00:21:55,389
where all the software has to be

00:21:52,539 --> 00:21:57,460
installed in form of container okay so

00:21:55,389 --> 00:21:59,139
we want to do is have soccer must be

00:21:57,460 --> 00:22:02,769
installed its container image but we

00:21:59,139 --> 00:22:04,809
have a catch-22 true benetti's requires

00:22:02,769 --> 00:22:07,960
SED in flannel d to be running before

00:22:04,809 --> 00:22:10,090
darker comes up so we have to have a

00:22:07,960 --> 00:22:12,009
couple applications installed on the

00:22:10,090 --> 00:22:13,659
system in order to use cout benetti's

00:22:12,009 --> 00:22:16,299
and those applications are actually

00:22:13,659 --> 00:22:20,370
going to use by doctor so how do i do

00:22:16,299 --> 00:22:22,690
that they need to stop before the doctor

00:22:20,370 --> 00:22:25,360
so can set its network and these

00:22:22,690 --> 00:22:28,720
contains must must look those containers

00:22:25,360 --> 00:22:30,250
can be run on read only file images in

00:22:28,720 --> 00:22:32,110
dr. has problems would contain a

00:22:30,250 --> 00:22:33,669
priority it doesn't have any form of

00:22:32,110 --> 00:22:35,740
container prior and that doctor is

00:22:33,669 --> 00:22:38,980
talking about putting it in but up to

00:22:35,740 --> 00:22:40,360
this point they haven't had it but the

00:22:38,980 --> 00:22:44,049
dirty where's the doctor doesn't like

00:22:40,360 --> 00:22:46,690
system d has priority right you've been

00:22:44,049 --> 00:22:48,279
set up that says dr. relies on etsy deep

00:22:46,690 --> 00:22:50,740
a flannel be running and flannel d

00:22:48,279 --> 00:22:54,279
relies on etsy deviant so i can set up a

00:22:50,740 --> 00:22:57,549
priority list using unit files to set up

00:22:54,279 --> 00:22:59,860
proper ID on my my applications but

00:22:57,549 --> 00:23:02,710
i can install at CDM flannel d because

00:22:59,860 --> 00:23:04,630
the NF doesn't work so i have to install

00:23:02,710 --> 00:23:06,130
in the form of containers but

00:23:04,630 --> 00:23:08,800
the only thing I get to run containers

00:23:06,130 --> 00:23:13,030
the darker I got catch-22 so we came up

00:23:08,800 --> 00:23:14,650
with console upon system contains we're

00:23:13,030 --> 00:23:16,570
using the trauma command so talking

00:23:14,650 --> 00:23:18,100
about so that Tom CA like man is a tool

00:23:16,570 --> 00:23:20,980
we're using to wrap all this

00:23:18,100 --> 00:23:23,560
functionality to build them photography

00:23:20,980 --> 00:23:26,200
man is how you would install and now you

00:23:23,560 --> 00:23:27,790
can do an atomic bowl in anatomic

00:23:26,200 --> 00:23:30,460
installed what we're calling system you

00:23:27,790 --> 00:23:32,470
can this is a new tool called skopje

00:23:30,460 --> 00:23:34,060
with Scott showed up in fedora of the

00:23:32,470 --> 00:23:36,280
last few times it's actually inside

00:23:34,060 --> 00:23:38,020
where LM sent us at this point but you

00:23:36,280 --> 00:23:39,160
can use scope yo now it's been enhanced

00:23:38,020 --> 00:23:40,480
to pull him adjust we're going to talk a

00:23:39,160 --> 00:23:42,820
little more about skopje let's get

00:23:40,480 --> 00:23:45,190
through the presentation and we use

00:23:42,820 --> 00:23:46,660
always free since we want to have images

00:23:45,190 --> 00:23:48,610
stoy but we don't want to use up time

00:23:46,660 --> 00:23:51,220
this space was going to again use OS

00:23:48,610 --> 00:23:52,600
tree and since tonic coast is based on

00:23:51,220 --> 00:23:55,720
always free it kind of works well

00:23:52,600 --> 00:23:57,220
together and we want to create a system

00:23:55,720 --> 00:23:58,960
to unify those we want to set up this

00:23:57,220 --> 00:24:02,680
precedent so that we can set up a

00:23:58,960 --> 00:24:04,930
precedence order of inside now and i'm

00:24:02,680 --> 00:24:08,470
going to use run see everybody impaired

00:24:04,930 --> 00:24:10,780
front seat okay run see is a new way if

00:24:08,470 --> 00:24:12,670
you were using dr. 111 run sees the

00:24:10,780 --> 00:24:14,320
standardized pod but what's called the

00:24:12,670 --> 00:24:16,600
open container initiative it's a

00:24:14,320 --> 00:24:18,880
standardized default way to you run

00:24:16,600 --> 00:24:21,010
containers and docker actually in 111

00:24:18,880 --> 00:24:22,960
you can run see underneath the covers to

00:24:21,010 --> 00:24:25,120
run containers but we're going to use

00:24:22,960 --> 00:24:29,260
run see directly inside of our system to

00:24:25,120 --> 00:24:33,270
unify so Tomica man has been implemented

00:24:29,260 --> 00:24:33,270
to handle it so you can do it if I pull

00:24:33,660 --> 00:24:38,100
actually

00:24:35,160 --> 00:24:40,830
if you either drive anyway she do

00:24:38,100 --> 00:24:43,530
encounter coal gas couch system at CD

00:24:40,830 --> 00:24:46,770
and atomic install at the system that's

00:24:43,530 --> 00:24:48,330
e we put out a TV you flimsy containers

00:24:46,770 --> 00:24:50,880
that can handle this that both are

00:24:48,330 --> 00:24:53,070
available on docker hub right now so you

00:24:50,880 --> 00:24:54,420
can actually install these on top of a

00:24:53,070 --> 00:24:56,730
trauma codes you can install them on a

00:24:54,420 --> 00:24:59,160
rail system our foot over system as well

00:24:56,730 --> 00:25:00,930
it's nothing preventing ya wouldn't

00:24:59,160 --> 00:25:03,060
minute tell me but doesn't atomic

00:25:00,930 --> 00:25:04,470
install do ol automagically if it

00:25:03,060 --> 00:25:07,410
doesn't happen on the system do you

00:25:04,470 --> 00:25:11,640
really need to do this I don't think you

00:25:07,410 --> 00:25:14,610
need you can just do a product get to do

00:25:11,640 --> 00:25:18,410
enjoy yourself I think if you electronic

00:25:14,610 --> 00:25:22,470
stuff def def system is Lee doesn't get

00:25:18,410 --> 00:25:24,180
done so this is but this is based on the

00:25:22,470 --> 00:25:26,820
document i wrote six months ago start

00:25:24,180 --> 00:25:33,540
probably soon that's why you guys are

00:25:26,820 --> 00:25:35,160
experimental so so with with system

00:25:33,540 --> 00:25:37,110
contains now we're using run see we

00:25:35,160 --> 00:25:38,820
using system the we're using oh it's

00:25:37,110 --> 00:25:40,140
free for the basket backing store for

00:25:38,820 --> 00:25:41,880
the containers count update the

00:25:40,140 --> 00:25:44,160
container right you is when a new

00:25:41,880 --> 00:25:45,840
version of SED comes out you have to use

00:25:44,160 --> 00:25:47,970
a tool like darker some other tools to

00:25:45,840 --> 00:25:49,320
build a new image push it to a registry

00:25:47,970 --> 00:25:51,030
and then this tool would pull it down

00:25:49,320 --> 00:25:52,440
right so again it's in production think

00:25:51,030 --> 00:25:55,470
about that you're not developing it

00:25:52,440 --> 00:25:57,180
you're using in production another thing

00:25:55,470 --> 00:26:02,460
that we're adding is for calling simple

00:25:57,180 --> 00:26:04,170
signing we've been wanting to have the

00:26:02,460 --> 00:26:06,120
concept of simple sign whatever mean by

00:26:04,170 --> 00:26:08,400
simple signings science signing that is

00:26:06,120 --> 00:26:10,230
similar to a we use with that p.m. where

00:26:08,400 --> 00:26:12,630
user is able to go out and sign a

00:26:10,230 --> 00:26:14,790
document and say case I trust this image

00:26:12,630 --> 00:26:17,880
dan walsh put this image out in game

00:26:14,790 --> 00:26:19,380
lost trust okay but in our you get the

00:26:17,880 --> 00:26:21,810
image in your company and you're working

00:26:19,380 --> 00:26:23,760
for acne time you come out and say well

00:26:21,810 --> 00:26:24,570
we're not necessarily going to trust all

00:26:23,760 --> 00:26:27,330
of you

00:26:24,570 --> 00:26:29,159
by Dan Walsh but we trust that image

00:26:27,330 --> 00:26:31,529
that signed by the new also the acne and

00:26:29,159 --> 00:26:32,940
can come in and sign it so we can

00:26:31,529 --> 00:26:35,490
actually end up with lots and lots of

00:26:32,940 --> 00:26:36,690
signatures based on same energy and then

00:26:35,490 --> 00:26:38,750
you see this you can be separate from

00:26:36,690 --> 00:26:41,460
the image all it has to be if you have

00:26:38,750 --> 00:26:43,409
cryptographically proved that this image

00:26:41,460 --> 00:26:45,110
was signed by dan Elissa public ago by

00:26:43,409 --> 00:26:47,990
Red Hat's public key or anybody else's

00:26:45,110 --> 00:26:51,539
but we're adding the concept to atomic

00:26:47,990 --> 00:26:53,789
and then these tools but simple signing

00:26:51,539 --> 00:26:55,710
it allows you to use a pgp type

00:26:53,789 --> 00:26:58,409
signature very simple simple signature

00:26:55,710 --> 00:27:01,409
to sign it sign basically the checksum

00:26:58,409 --> 00:27:04,230
that is appropriate for the oci of

00:27:01,409 --> 00:27:06,620
docker image multiple peoples can sign

00:27:04,230 --> 00:27:10,700
the same image signatures can be stored

00:27:06,620 --> 00:27:13,470
on this new atomic openshift registry

00:27:10,700 --> 00:27:15,419
but also we want law signatures be

00:27:13,470 --> 00:27:18,539
stored anywhere if you want to put

00:27:15,419 --> 00:27:20,580
signatures on to a website and say you

00:27:18,539 --> 00:27:24,059
know there's 40,000 docker images out

00:27:20,580 --> 00:27:26,129
here I trust these four how do you do

00:27:24,059 --> 00:27:28,710
that so what I would want to do is take

00:27:26,129 --> 00:27:30,570
those four images get their check sums

00:27:28,710 --> 00:27:32,820
sign the check stubs and put it on the

00:27:30,570 --> 00:27:35,429
website supper but now I can do it a

00:27:32,820 --> 00:27:36,659
topic pull of that application instead

00:27:35,429 --> 00:27:38,909
of the tonics it goes out to the

00:27:36,659 --> 00:27:40,980
register to my website and says okay I

00:27:38,909 --> 00:27:43,110
just pull this check sundown doesn't

00:27:40,980 --> 00:27:44,340
match what you sign yep in Los trusted

00:27:43,110 --> 00:27:46,679
so we could trust and install on a

00:27:44,340 --> 00:27:49,769
system Arachne try something install in

00:27:46,679 --> 00:27:51,600
our system really simple stuff not not

00:27:49,769 --> 00:27:53,100
building up a hierarchy but just

00:27:51,600 --> 00:27:59,070
basically allowing people to play with

00:27:53,100 --> 00:28:00,779
with signing based on this concept then

00:27:59,070 --> 00:28:02,940
we want to eventually build policy rules

00:28:00,779 --> 00:28:05,100
engines that say you'll only allow your

00:28:02,940 --> 00:28:07,230
applications to run certain out okay so

00:28:05,100 --> 00:28:08,909
we can build the darker and some of this

00:28:07,230 --> 00:28:10,860
is not quite built yet but we can build

00:28:08,909 --> 00:28:12,600
an authorization plugging that basically

00:28:10,860 --> 00:28:14,730
sets up a policy that says I'm only

00:28:12,600 --> 00:28:18,990
going to allow my doctor engine to run

00:28:14,730 --> 00:28:20,460
applications to the sign by acne ok so

00:28:18,990 --> 00:28:22,230
now with the random user goes and pulls

00:28:20,460 --> 00:28:24,240
down an application one that application

00:28:22,230 --> 00:28:25,590
goes to run it'll check and see if its

00:28:24,240 --> 00:28:27,960
subjects properly signed it's not

00:28:25,590 --> 00:28:30,240
probably a sign then you get thrown out

00:28:27,960 --> 00:28:31,860
we want to build this tooling all the

00:28:30,240 --> 00:28:33,600
way up into kuba netting soku benetti's

00:28:31,860 --> 00:28:40,559
inside having policy around this type of

00:28:33,600 --> 00:28:42,659
thing yes yeah you could we have that

00:28:40,559 --> 00:28:46,110
problem you could you can remove the

00:28:42,659 --> 00:28:47,669
signature file far but yeah we we always

00:28:46,110 --> 00:28:51,029
have that problem we've had that problem

00:28:47,669 --> 00:28:52,379
doc p.m. so 30 years so I don't want to

00:28:51,029 --> 00:28:54,240
get right now we're just trying to get

00:28:52,379 --> 00:28:56,909
the Civil signatures we can talk about

00:28:54,240 --> 00:28:58,620
revocation in the late a time but most

00:28:56,909 --> 00:29:00,360
ways that people have done revocation in

00:28:58,620 --> 00:29:02,010
the past would be build that into it but

00:29:00,360 --> 00:29:03,750
let's let's not get bogged down on that

00:29:02,010 --> 00:29:10,769
we've been waiting for some kind of

00:29:03,750 --> 00:29:15,840
simple signing for a long time okay I

00:29:10,769 --> 00:29:16,860
don't know how much time plenty left ok

00:29:15,840 --> 00:29:18,600
so we've talked a little bit about

00:29:16,860 --> 00:29:20,990
signing and we talked about a little bit

00:29:18,600 --> 00:29:23,279
by using the atomic command and the

00:29:20,990 --> 00:29:26,340
containers and be able to run containers

00:29:23,279 --> 00:29:29,190
of copy and write file systems on

00:29:26,340 --> 00:29:30,929
 storage want to look at a new tool

00:29:29,190 --> 00:29:37,500
that we're building now ok it's called

00:29:30,929 --> 00:29:40,049
ocid basically is its components needed

00:29:37,500 --> 00:29:43,470
by open ship and crew benetti's in order

00:29:40,049 --> 00:29:47,070
to run containers and brush we want to

00:29:43,470 --> 00:29:49,019
look at a simplified demon but there's

00:29:47,070 --> 00:29:51,059
four components that we use in an ocid

00:29:49,019 --> 00:29:52,950
environment the first one being a

00:29:51,059 --> 00:29:55,289
container in which transport so we need

00:29:52,950 --> 00:29:56,460
a way to get that image to the local

00:29:55,289 --> 00:29:58,799
system especially if I want to run a

00:29:56,460 --> 00:30:00,779
copy on write file system then I need a

00:29:58,799 --> 00:30:03,029
way to store so once I pulled an image

00:30:00,779 --> 00:30:07,440
to my machine I need a way to store that

00:30:03,029 --> 00:30:08,730
image on disk the third component of

00:30:07,440 --> 00:30:10,500
going to need is when we can need a way

00:30:08,730 --> 00:30:13,580
to run the container I'm going to need a

00:30:10,500 --> 00:30:16,649
way to actually start a container and

00:30:13,580 --> 00:30:16,980
then I need an API a wrapper around all

00:30:16,649 --> 00:30:19,260
this

00:30:16,980 --> 00:30:22,200
location okay so we're looking at

00:30:19,260 --> 00:30:23,520
building is this ocid spec now let's go

00:30:22,200 --> 00:30:27,270
look a little bit deeper and teach one

00:30:23,520 --> 00:30:28,620
of these so the first one the way we're

00:30:27,270 --> 00:30:30,600
going to pull application container

00:30:28,620 --> 00:30:32,160
image transport we've already mentioned

00:30:30,600 --> 00:30:34,080
scope yo in the terms of the earth

00:30:32,160 --> 00:30:35,910
system d contain so Schofield has gone

00:30:34,080 --> 00:30:38,610
out and implemented basically the

00:30:35,910 --> 00:30:40,910
equivalent to dr. pol Anaka push okay it

00:30:38,610 --> 00:30:44,130
also has full capabilities to do the

00:30:40,910 --> 00:30:46,500
simple signing scopia was originally

00:30:44,130 --> 00:30:49,890
written as a tool for remote viewing so

00:30:46,500 --> 00:30:51,320
scope yo is Greek for remote viewer just

00:30:49,890 --> 00:30:53,669
to give you a little background around

00:30:51,320 --> 00:30:56,760
we've been using scope yo for the last

00:30:53,669 --> 00:30:59,100
few releases for viewing image contains

00:30:56,760 --> 00:31:00,650
on a registry so right now if you want

00:30:59,100 --> 00:31:03,419
to look at a particular application

00:31:00,650 --> 00:31:04,860
particular images JSON using just

00:31:03,419 --> 00:31:07,350
standard dr. you have to pull the entire

00:31:04,860 --> 00:31:09,030
application diet system and then look at

00:31:07,350 --> 00:31:10,919
the JSON we wanted to do is that

00:31:09,030 --> 00:31:13,440
basically look at the data at the

00:31:10,919 --> 00:31:15,090
registry and without having to pull this

00:31:13,440 --> 00:31:16,890
that's what we originally Phillips copio

00:31:15,090 --> 00:31:18,450
but absolutely built the ability to look

00:31:16,890 --> 00:31:20,370
at the registry we actually figured out

00:31:18,450 --> 00:31:21,780
it was easy to implement the pots of

00:31:20,370 --> 00:31:25,169
pulling and pushing using the docker

00:31:21,780 --> 00:31:28,530
protocol we've added the ability to push

00:31:25,169 --> 00:31:30,419
and pull images from the registry and we

00:31:28,530 --> 00:31:33,720
can pull in quite pull them verify

00:31:30,419 --> 00:31:35,880
simple signatures as well and we work

00:31:33,720 --> 00:31:38,309
with core OS to split this go but go

00:31:35,880 --> 00:31:40,250
library with separate thing we decided

00:31:38,309 --> 00:31:43,890
to put it out inside of the containers

00:31:40,250 --> 00:31:47,220
done images so basic said of putting

00:31:43,890 --> 00:31:48,960
disco pol which was a CLI we broken

00:31:47,220 --> 00:31:51,270
scopia with the two pots and how we have

00:31:48,960 --> 00:31:53,640
a bended go language library that

00:31:51,270 --> 00:31:55,890
contains flash image and this gives you

00:31:53,640 --> 00:31:57,750
the ability to pull in pushing the idea

00:31:55,890 --> 00:32:00,720
is to allow other applications that

00:31:57,750 --> 00:32:02,700
potentially use this library side of

00:32:00,720 --> 00:32:04,050
their applications not just hypes copio

00:32:02,700 --> 00:32:07,050
but a lot of other

00:32:04,050 --> 00:32:08,610
use theirs since core OS is working with

00:32:07,050 --> 00:32:10,650
us on it there's potential that they can

00:32:08,610 --> 00:32:12,540
use it inside a rocket so we basically

00:32:10,650 --> 00:32:15,090
wanted to standardize and rip out of one

00:32:12,540 --> 00:32:16,320
pot of pulling and pushing and put into

00:32:15,090 --> 00:32:18,420
a separate application that could be

00:32:16,320 --> 00:32:22,020
used and be you know just have people

00:32:18,420 --> 00:32:23,250
work on just that pod enhancements so

00:32:22,020 --> 00:32:24,870
the second time now we have the ability

00:32:23,250 --> 00:32:27,990
to pull and push images from dr.

00:32:24,870 --> 00:32:29,760
registry or in time registry now I need

00:32:27,990 --> 00:32:31,350
to store it so after I pull the image I

00:32:29,760 --> 00:32:36,480
need to be able to store their stored on

00:32:31,350 --> 00:32:40,890
disk right so anybody here play with the

00:32:36,480 --> 00:32:42,840
atomic CLI okay playing with dr. images

00:32:40,890 --> 00:32:44,580
you always have this problem I want to

00:32:42,840 --> 00:32:46,350
look at the content of the image but I

00:32:44,580 --> 00:32:49,800
don't want to actually run the container

00:32:46,350 --> 00:32:52,260
so back several versions of the tonic

00:32:49,800 --> 00:32:54,060
ago we added the ability to mount an

00:32:52,260 --> 00:32:55,590
image so i can take a docker images

00:32:54,060 --> 00:32:57,750
stood and storing content actually

00:32:55,590 --> 00:32:59,970
mounted at amount point where you can do

00:32:57,750 --> 00:33:02,100
a lot of mounted or select mount and

00:32:59,970 --> 00:33:03,840
then go to the CD into / mom you'll see

00:33:02,100 --> 00:33:05,730
the rue de festa the fedora images in

00:33:03,840 --> 00:33:07,050
solving the system we're really cool

00:33:05,730 --> 00:33:08,580
thing is if you're running to tanners

00:33:07,050 --> 00:33:10,560
you're running a container on your

00:33:08,580 --> 00:33:14,040
system you can do an entire mount def

00:33:10,560 --> 00:33:16,500
that slides fedora / mouth you can go

00:33:14,040 --> 00:33:18,360
into the containers mount point creative

00:33:16,500 --> 00:33:20,580
content then go into the container and

00:33:18,360 --> 00:33:23,010
actually see the content show up but

00:33:20,580 --> 00:33:25,320
really we're playing around underneath

00:33:23,010 --> 00:33:26,730
covers and allow you to actually work

00:33:25,320 --> 00:33:29,460
with the coffee and read file system

00:33:26,730 --> 00:33:31,530
while it's running at seven okay so we

00:33:29,460 --> 00:33:33,510
did that functionality a while ago I

00:33:31,530 --> 00:33:36,210
works with device mapper and mobile

00:33:33,510 --> 00:33:38,490
best but we wanted to make that boss

00:33:36,210 --> 00:33:40,680
standard right the problem is that the

00:33:38,490 --> 00:33:42,360
darker demon has all its blocks all its

00:33:40,680 --> 00:33:44,910
handling of its coffee on my file says

00:33:42,360 --> 00:33:47,100
that all the graphics code is built into

00:33:44,910 --> 00:33:49,380
darker and darker is actually using his

00:33:47,100 --> 00:33:51,660
flock it's using a locking system and

00:33:49,380 --> 00:33:53,430
locking systems all I memory okay so

00:33:51,660 --> 00:33:55,260
there's no way for other applications to

00:33:53,430 --> 00:33:57,390
interact with the file system while dr.

00:33:55,260 --> 00:34:00,120
is is working so we originally started

00:33:57,390 --> 00:34:02,370
to look at could we take the graph

00:34:00,120 --> 00:34:04,350
driver all the crock and right file

00:34:02,370 --> 00:34:05,820
systems move them into a separate tool

00:34:04,350 --> 00:34:08,220
to darker in the separate tool could you

00:34:05,820 --> 00:34:10,139
simultaneously we actually found that

00:34:08,220 --> 00:34:12,540
was very very difficult when we started

00:34:10,139 --> 00:34:14,399
to play with that and we decided to stop

00:34:12,540 --> 00:34:15,870
doing and just to pull the to pull the

00:34:14,399 --> 00:34:17,970
tools out to get two of our tools

00:34:15,870 --> 00:34:20,220
working together using locks on the

00:34:17,970 --> 00:34:22,080
local file system and once we have it

00:34:20,220 --> 00:34:23,940
perfected we want to go back to dr. at

00:34:22,080 --> 00:34:25,320
that point and say hey we got all the

00:34:23,940 --> 00:34:27,330
storage drivers now working

00:34:25,320 --> 00:34:29,790
independently different applications can

00:34:27,330 --> 00:34:31,290
use the same store at the same time as

00:34:29,790 --> 00:34:33,750
long as the interact properly in the

00:34:31,290 --> 00:34:35,730
locking system let's put this into dr.

00:34:33,750 --> 00:34:38,340
so we decided rather than start with

00:34:35,730 --> 00:34:40,290
trying to manipulate dockery we want a

00:34:38,340 --> 00:34:41,730
clue that we could use it and it turned

00:34:40,290 --> 00:34:43,350
out that it's kind of neat that we can

00:34:41,730 --> 00:34:48,120
be able to use all these copy and write

00:34:43,350 --> 00:34:50,280
file systems so we call this cool and

00:34:48,120 --> 00:34:53,700
different integrations graph see graph

00:34:50,280 --> 00:34:57,679
tool cow man and store trouble so I

00:34:53,700 --> 00:34:57,679
think it right now it's all still a tool

00:34:58,250 --> 00:35:03,300
so we want to create a docking graph

00:35:00,660 --> 00:35:06,190
right code independent library CLI and

00:35:03,300 --> 00:35:09,369
we can work with core OS and we're

00:35:06,190 --> 00:35:11,410
you think all containers storage and all

00:35:09,369 --> 00:35:13,780
this is doing is setting out the storage

00:35:11,410 --> 00:35:15,700
to run images set up those were defenses

00:35:13,780 --> 00:35:17,470
on the system either using right

00:35:15,700 --> 00:35:19,089
now is just implementing all the

00:35:17,470 --> 00:35:23,770
right file systems that are currently in

00:35:19,089 --> 00:35:25,480
darker independent of darker but i want

00:35:23,770 --> 00:35:27,760
to add support for almost three network

00:35:25,480 --> 00:35:30,130
storage so I want that cruel to Lorraine

00:35:27,760 --> 00:35:31,569
if I have an image stored an NFS kill

00:35:30,130 --> 00:35:34,930
with about having image daughter North

00:35:31,569 --> 00:35:37,329
Street deal with our image stored in a

00:35:34,930 --> 00:35:39,760
lot of coffee right boss didn't deal

00:35:37,329 --> 00:35:41,890
with it ok we can start to look at how

00:35:39,760 --> 00:35:43,180
we be able to launch containers on

00:35:41,890 --> 00:35:45,730
different file systems different

00:35:43,180 --> 00:35:47,829
backends based on this tool and again

00:35:45,730 --> 00:35:51,730
it's simple all this tool does is

00:35:47,829 --> 00:35:53,200
handled file system ok totally in the

00:35:51,730 --> 00:35:55,180
pad the library is totally independent

00:35:53,200 --> 00:35:57,099
it can be people can work on this tool

00:35:55,180 --> 00:35:59,050
at a separate page they don't have to be

00:35:57,099 --> 00:36:00,940
working with you know of the tools that

00:35:59,050 --> 00:36:04,990
we could take patches independent of

00:36:00,940 --> 00:36:06,670
other tools and core OS potentially uses

00:36:04,990 --> 00:36:09,400
a storage back in right now core OS

00:36:06,670 --> 00:36:10,720
rocket just supports overlay fest at the

00:36:09,400 --> 00:36:12,099
back end so if they switch to this

00:36:10,720 --> 00:36:14,200
they'd be able to get advantage of using

00:36:12,099 --> 00:36:16,500
all these different file system back

00:36:14,200 --> 00:36:16,500
ends

00:36:16,869 --> 00:36:22,150
open container issue runtime this is the

00:36:20,049 --> 00:36:23,559
furthest salon of all these tools all

00:36:22,150 --> 00:36:24,609
right so we've got something pushing and

00:36:23,559 --> 00:36:26,559
pulling we have something that actually

00:36:24,609 --> 00:36:27,910
still is the image on desk the next

00:36:26,559 --> 00:36:31,869
thing we won't need is ability to run a

00:36:27,910 --> 00:36:33,759
catan so open the open content container

00:36:31,869 --> 00:36:36,299
initiative was started about a year and

00:36:33,759 --> 00:36:38,410
a half or two years ago now here at all

00:36:36,299 --> 00:36:42,809
exactly when but basically what's

00:36:38,410 --> 00:36:46,930
happened is run seiga developed based on

00:36:42,809 --> 00:36:48,940
the open container initiative run see in

00:36:46,930 --> 00:36:50,619
a specification for how you specify

00:36:48,940 --> 00:36:52,269
which contain you want to run what the

00:36:50,619 --> 00:36:53,859
application is that what the label seems

00:36:52,269 --> 00:36:55,930
like that have all been standardized

00:36:53,859 --> 00:36:59,019
being used by da car they're being

00:36:55,930 --> 00:37:00,579
adopted by rocket at this point how the

00:36:59,019 --> 00:37:03,519
frameworks other tools it's time to

00:37:00,579 --> 00:37:05,710
build using using the specification run

00:37:03,519 --> 00:37:09,730
c is just an initial implementation of

00:37:05,710 --> 00:37:12,339
the specification and was starting to

00:37:09,730 --> 00:37:15,160
see other people play linux is about to

00:37:12,339 --> 00:37:17,529
release a mechanism for running

00:37:15,160 --> 00:37:19,029
containers of virtual machines and

00:37:17,529 --> 00:37:20,710
they're following the specification so

00:37:19,029 --> 00:37:23,289
theoretically could swap i'll run see

00:37:20,710 --> 00:37:25,839
with the containers you'd be able to run

00:37:23,289 --> 00:37:28,569
these commands but they follow the open

00:37:25,839 --> 00:37:32,650
container open your initiative

00:37:28,569 --> 00:37:34,869
specification and as they go forward i

00:37:32,650 --> 00:37:37,539
think we'll see run other systems using

00:37:34,869 --> 00:37:38,980
it as we've got 4 1 dot 11 users run

00:37:37,539 --> 00:37:42,220
seeds into thought back down so the

00:37:38,980 --> 00:37:44,920
whole softwood shared between darker and

00:37:42,220 --> 00:37:49,119
anybody also wants to use it and the OC

00:37:44,920 --> 00:37:52,359
a cool so that's all about run see one

00:37:49,119 --> 00:37:54,819
of the problems with using run seeds you

00:37:52,359 --> 00:37:56,470
have to actually go editor JSON files if

00:37:54,819 --> 00:37:58,809
you want to configure your config you

00:37:56,470 --> 00:38:00,940
want to configure a container to run you

00:37:58,809 --> 00:38:02,060
don't have a simple of dr tree command

00:38:00,940 --> 00:38:05,240
line or a doctor

00:38:02,060 --> 00:38:07,310
I'm command line to configure the JSON

00:38:05,240 --> 00:38:10,010
you up they actually go on VI really

00:38:07,310 --> 00:38:11,570
complex JSON files created specification

00:38:10,010 --> 00:38:13,790
that's what runs he uses action box

00:38:11,570 --> 00:38:17,060
container so we implemented a tool

00:38:13,790 --> 00:38:20,030
called oci tool which is actually got

00:38:17,060 --> 00:38:22,100
sucked into the open containers under CI

00:38:20,030 --> 00:38:23,990
tools and what that allows you to do is

00:38:22,100 --> 00:38:25,880
the basically falls pretty closely to

00:38:23,990 --> 00:38:29,870
the doctor run command line when you say

00:38:25,880 --> 00:38:33,010
oci tools dr. tray command line will see

00:38:29,870 --> 00:38:36,290
our tools generate and then that's the

00:38:33,010 --> 00:38:38,210
whatever you want a mountain volumes def

00:38:36,290 --> 00:38:39,770
def pinnacles host all those kind of

00:38:38,210 --> 00:38:41,660
man's and then it goes it just goes on

00:38:39,770 --> 00:38:44,570
and generates JSON file that can use

00:38:41,660 --> 00:38:47,660
they contain so it makes using run see a

00:38:44,570 --> 00:38:49,700
lot easier because you can specify a CLI

00:38:47,660 --> 00:38:54,440
which one run are you going to continue

00:38:49,700 --> 00:38:57,290
at the JSON file oci tool generates a

00:38:54,440 --> 00:38:59,270
specification and camacho and see if you

00:38:57,290 --> 00:39:00,320
look I believe that the system

00:38:59,270 --> 00:39:02,420
containers that we were using you

00:39:00,320 --> 00:39:07,460
earlier we you use oci tools to generate

00:39:02,420 --> 00:39:09,140
that he stood he was smart enough to

00:39:07,460 --> 00:39:11,060
generated himself today was we want to

00:39:09,140 --> 00:39:13,370
play with run see I would heavily invite

00:39:11,060 --> 00:39:16,730
you to use oci tools to generate the

00:39:13,370 --> 00:39:18,020
specification so last part of this is

00:39:16,730 --> 00:39:19,820
the oh yeah this is sort of a wrapper

00:39:18,020 --> 00:39:21,500
around this this application we're

00:39:19,820 --> 00:39:23,210
actually wrapping this all these tools

00:39:21,500 --> 00:39:24,830
together underneath an atomic command

00:39:23,210 --> 00:39:28,010
but we want to be able to do it both the

00:39:24,830 --> 00:39:30,350
atomic command in as a Dean so ocid is

00:39:28,010 --> 00:39:34,970
is sort of a tool that wraps up all this

00:39:30,350 --> 00:39:37,850
stuff if you open to open container

00:39:34,970 --> 00:39:42,579
initiative demon I prefer to call it OCD

00:39:37,850 --> 00:39:45,170
I think it's funny but anyways

00:39:42,579 --> 00:39:46,730
this is the least developed powerless

00:39:45,170 --> 00:39:51,579
but one side of the development and what

00:39:46,730 --> 00:39:54,950
this does is humanity's cupones has

00:39:51,579 --> 00:39:57,950
specified ways that koo bananas can talk

00:39:54,950 --> 00:40:00,680
to container runtime environments okay

00:39:57,950 --> 00:40:02,779
so that the rocket is now using it I

00:40:00,680 --> 00:40:04,400
think they still work talk to dr. the

00:40:02,779 --> 00:40:06,859
traditional way mokuba Nettie's

00:40:04,400 --> 00:40:08,690
basically said if you prayed a demon

00:40:06,859 --> 00:40:10,099
that will follow this protocol and you

00:40:08,690 --> 00:40:12,499
can set up the crew blood to talk

00:40:10,099 --> 00:40:16,039
directly to the demon and have it locked

00:40:12,499 --> 00:40:18,799
containers on behalf so ocid is an

00:40:16,039 --> 00:40:23,299
implementation of that API as specified

00:40:18,799 --> 00:40:26,569
by who by Google site humanities and

00:40:23,299 --> 00:40:29,660
it's a service for watching containers

00:40:26,569 --> 00:40:31,670
that could be nice to talk to so when

00:40:29,660 --> 00:40:33,890
kubin age wants to execute a container

00:40:31,670 --> 00:40:36,829
it's going to send ocid and messages

00:40:33,890 --> 00:40:38,210
says I want to run this gatan ocid and

00:40:36,829 --> 00:40:40,609
it's going to go and pull the name is

00:40:38,210 --> 00:40:44,119
using skokie oh so go out and somehow

00:40:40,609 --> 00:40:46,279
get the image down if Scorpio / mute

00:40:44,119 --> 00:40:47,930
school notice that the kims available by

00:40:46,279 --> 00:40:49,940
anna fascicles very cognizant I already

00:40:47,930 --> 00:40:52,460
got that image bar if its pulled down to

00:40:49,940 --> 00:40:54,769
its image store tell it but after if it

00:40:52,460 --> 00:40:57,230
has to pull the image a bullet then ocid

00:40:54,769 --> 00:40:59,269
stores the image on this using the

00:40:57,230 --> 00:41:00,799
storage tool that we talked about and

00:40:59,269 --> 00:41:06,710
then finally it will launch the

00:41:00,799 --> 00:41:08,809
application ok so that's fo CID and it's

00:41:06,710 --> 00:41:11,390
a standard space alternative to dr room

00:41:08,809 --> 00:41:12,950
rocket okay so it's a standard base with

00:41:11,390 --> 00:41:16,549
the goal is to make this fully open

00:41:12,950 --> 00:41:18,650
source project anybody can contribute to

00:41:16,549 --> 00:41:20,269
it and we want to event right now it's

00:41:18,650 --> 00:41:20,810
on these containers we want to

00:41:20,269 --> 00:41:23,730
eventually

00:41:20,810 --> 00:41:26,160
potentially get the oci as being

00:41:23,730 --> 00:41:27,840
standard space but again it's for

00:41:26,160 --> 00:41:31,080
running containers and production we're

00:41:27,840 --> 00:41:32,940
not trying to replace daughters okay we

00:41:31,080 --> 00:41:34,500
don't want it the dark has a whole bunch

00:41:32,940 --> 00:41:36,900
of functionalities that the goal of this

00:41:34,500 --> 00:41:39,090
tool is not to implement doctor bills

00:41:36,900 --> 00:41:40,770
doctor commit and some of the other

00:41:39,090 --> 00:41:42,660
features of dr. all you want is a

00:41:40,770 --> 00:41:44,130
standard tool that is basically able to

00:41:42,660 --> 00:41:46,320
do what you want to do when you contain

00:41:44,130 --> 00:41:47,850
a certain production which is I want to

00:41:46,320 --> 00:41:49,110
run this service application on this

00:41:47,850 --> 00:41:50,940
machine so it needs to be able to pull

00:41:49,110 --> 00:41:53,400
the pulley application from a service

00:41:50,940 --> 00:41:55,530
install it on some kind of file system

00:41:53,400 --> 00:41:57,900
and then Monica data and that's it and

00:41:55,530 --> 00:41:59,570
we want to base it on right now it's

00:41:57,900 --> 00:42:01,680
based on Coogan at ease but again

00:41:59,570 --> 00:42:03,420
implementing the same functionality

00:42:01,680 --> 00:42:05,310
inside of Atomics or tonic will

00:42:03,420 --> 00:42:06,840
eventually be able to not only one

00:42:05,310 --> 00:42:09,540
system contains but you'll be able to do

00:42:06,840 --> 00:42:11,730
a tonic pull and do dash dash and said

00:42:09,540 --> 00:42:13,560
Oh see I back-end you could say I'm

00:42:11,730 --> 00:42:15,120
going to use a device mapper back end

00:42:13,560 --> 00:42:17,220
and pull it into your local storage

00:42:15,120 --> 00:42:18,510
device mapper an onside a daughter and

00:42:17,220 --> 00:42:22,470
you'll be able to watch contain it based

00:42:18,510 --> 00:42:24,450
on that and eventually we want to get

00:42:22,470 --> 00:42:28,080
once we have this up and run anyone who

00:42:24,450 --> 00:42:30,060
vocal shift to ocid by default and then

00:42:28,080 --> 00:42:32,400
have a stand that another nice thing

00:42:30,060 --> 00:42:34,590
about this is where dr. is constantly

00:42:32,400 --> 00:42:37,500
changing you know this will give us a

00:42:34,590 --> 00:42:39,330
little more stable underpinning for like

00:42:37,500 --> 00:42:42,510
okay so we don't have to constantly swap

00:42:39,330 --> 00:42:44,520
out based on all the innovations of

00:42:42,510 --> 00:42:46,440
building containers and different things

00:42:44,520 --> 00:42:49,520
that doctor is trying to do you'll get a

00:42:46,440 --> 00:42:49,520
little more stable back in

00:42:50,619 --> 00:42:55,720
so we've got a questions in a second but

00:42:53,579 --> 00:42:57,819
containers in production will focus on

00:42:55,720 --> 00:43:00,730
system contains and system services and

00:42:57,819 --> 00:43:02,890
basically Coogan Eddie's running trusted

00:43:00,730 --> 00:43:09,130
applications that's that that's a goal

00:43:02,890 --> 00:43:12,640
and at this point questions yes so what

00:43:09,130 --> 00:43:15,999
is there anything in socially preventing

00:43:12,640 --> 00:43:18,490
you from running application containers

00:43:15,999 --> 00:43:20,259
under the same system like what's well

00:43:18,490 --> 00:43:22,749
we need we need to do this system we

00:43:20,259 --> 00:43:25,269
need to buy application contains I guess

00:43:22,749 --> 00:43:28,210
you mean you can pick in town no I'm

00:43:25,269 --> 00:43:30,819
saying so you're emphasizing the use of

00:43:28,210 --> 00:43:33,579
this just for the system containers you

00:43:30,819 --> 00:43:37,749
need to run seda Flavell Cooper Nettie's

00:43:33,579 --> 00:43:39,759
but let's say I just throw my wordpress

00:43:37,749 --> 00:43:41,559
container at what I would say that's

00:43:39,759 --> 00:43:46,180
that said I took a camera in production

00:43:41,559 --> 00:43:48,099
work recipe right so yeah you when

00:43:46,180 --> 00:43:50,230
you're at it without defining as a nine

00:43:48,099 --> 00:43:53,200
but actually contain it was one that's

00:43:50,230 --> 00:43:55,420
under the belt okay okay so if you're

00:43:53,200 --> 00:43:56,980
building a container if you're

00:43:55,420 --> 00:43:58,239
experimenting with a container you're

00:43:56,980 --> 00:44:01,059
going to probably need a different tool

00:43:58,239 --> 00:44:03,549
then this is more about a container

00:44:01,059 --> 00:44:07,720
image already exists at a registry I am

00:44:03,549 --> 00:44:10,200
putting into production okay anybody

00:44:07,720 --> 00:44:10,200
else yes

00:44:11,150 --> 00:44:18,050
looks like the civs similar features

00:44:15,650 --> 00:44:20,270
welcome AV doesn't implement anything to

00:44:18,050 --> 00:44:22,610
do with storage if pulling and pushing

00:44:20,270 --> 00:44:25,250
while containing these does that execute

00:44:22,610 --> 00:44:26,660
one C so yeah it did he would be similar

00:44:25,250 --> 00:44:28,550
on caltrain there would be nothing to

00:44:26,660 --> 00:44:30,760
prevent eventually something like swamp

00:44:28,550 --> 00:44:33,470
or take advantage of this tool as well

00:44:30,760 --> 00:44:35,600
all words all we're saying is we believe

00:44:33,470 --> 00:44:37,160
fundamentally for putting a container

00:44:35,600 --> 00:44:38,510
into production you need to be able to

00:44:37,160 --> 00:44:41,240
get the container installed onto a

00:44:38,510 --> 00:44:42,710
machine loaded and run it so that we're

00:44:41,240 --> 00:44:45,500
having those three components and then

00:44:42,710 --> 00:44:48,890
having a demon again the demon can talk

00:44:45,500 --> 00:44:50,600
to to kumon headaches and we want to

00:44:48,890 --> 00:44:53,720
allow all three of those packages to

00:44:50,600 --> 00:44:55,940
develop all four of components to be

00:44:53,720 --> 00:44:57,650
able to develop in it independently so

00:44:55,940 --> 00:45:02,000
we don't have to lock everything into

00:44:57,650 --> 00:45:11,690
one big monolithic application yes so

00:45:02,000 --> 00:45:14,150
that production i'm not i'm not saying

00:45:11,690 --> 00:45:23,060
that I don't you don't put words in my

00:45:14,150 --> 00:45:25,310
mouth nothing I you said I did okay not

00:45:23,060 --> 00:45:27,470
getting into trouble now I think what I

00:45:25,310 --> 00:45:30,020
think in the future I want to sport

00:45:27,470 --> 00:45:32,300
soccer I just want I want to look at it

00:45:30,020 --> 00:45:34,370
when my opinion is better ways to run

00:45:32,300 --> 00:45:37,160
containers in production than the

00:45:34,370 --> 00:45:38,330
current doctor workflows again I think

00:45:37,160 --> 00:45:39,710
doc looks great for building

00:45:38,330 --> 00:45:42,170
applications i think it's great great

00:45:39,710 --> 00:45:44,960
for running out running contains I just

00:45:42,170 --> 00:45:46,760
need alternatives so you envision from

00:45:44,960 --> 00:45:48,890
you know the perceiver future work lower

00:45:46,760 --> 00:45:50,990
you continue to do doctor bills and dr.

00:45:48,890 --> 00:45:52,850
run during development and at some point

00:45:50,990 --> 00:45:54,650
you do a docker push to promote it to

00:45:52,850 --> 00:45:57,110
some production education at which point

00:45:54,650 --> 00:45:58,460
it goes into the containers of

00:45:57,110 --> 00:46:00,680
production framework that you described

00:45:58,460 --> 00:46:03,050
here throughout them right I think and I

00:46:00,680 --> 00:46:04,790
think that now a guy the doctor becomes

00:46:03,050 --> 00:46:06,740
one way of building containers i think

00:46:04,790 --> 00:46:08,690
other all i really want is I want

00:46:06,740 --> 00:46:11,120
different components I want to get back

00:46:08,690 --> 00:46:13,580
to lego sap an o-ring situation not have

00:46:11,120 --> 00:46:15,200
everything be this one monolithic it

00:46:13,580 --> 00:46:17,390
where we're constantly begging people to

00:46:15,200 --> 00:46:19,040
accept pageants because I want some

00:46:17,390 --> 00:46:21,020
different workflows we can separate

00:46:19,040 --> 00:46:23,570
these out its of different components

00:46:21,020 --> 00:46:27,430
and i think i think it is development

00:46:23,570 --> 00:46:27,430
will get easier at least for production

00:46:27,770 --> 00:46:33,440
anybody else I that's just maybe

00:46:31,820 --> 00:46:35,220
slightly provocative question we have

00:46:33,440 --> 00:46:40,349
people at corp Ian language

00:46:35,220 --> 00:46:41,400
minimizing our basin is it true that you

00:46:40,349 --> 00:46:43,140
know one of the things one of the

00:46:41,400 --> 00:46:45,660
compelling things about using remote

00:46:43,140 --> 00:46:47,000
storage is that any extraneous bits that

00:46:45,660 --> 00:46:49,320
aren't actually used during running

00:46:47,000 --> 00:46:51,480
don't have to get pulled where it says

00:46:49,320 --> 00:46:53,820
you brush grab a pen so is it true that

00:46:51,480 --> 00:46:55,590
if we get to the Platonic ideal of no

00:46:53,820 --> 00:46:57,420
extraneous bits of the image that you

00:46:55,590 --> 00:47:00,780
running then there's no that advantage

00:46:57,420 --> 00:47:03,210
of shared storage for containers goes

00:47:00,780 --> 00:47:06,119
away right at ya babe you got back there

00:47:03,210 --> 00:47:08,310
not to the point and I think you want to

00:47:06,119 --> 00:47:10,830
have it configurable where the admin can

00:47:08,310 --> 00:47:12,480
make that decision that you know if I if

00:47:10,830 --> 00:47:15,330
every time I vote my machine I have to

00:47:12,480 --> 00:47:17,460
pull down the 50 gig executable then it

00:47:15,330 --> 00:47:19,260
makes more sense to install locally if

00:47:17,460 --> 00:47:21,960
every time I install my application I'm

00:47:19,260 --> 00:47:23,490
just launching Apache and it loads and

00:47:21,960 --> 00:47:25,200
some CGI scripts I can take that

00:47:23,490 --> 00:47:28,109
overhead constantly rather than drive

00:47:25,200 --> 00:47:30,510
drag me down the big image and I get the

00:47:28,109 --> 00:47:32,310
advantages do it but we all make that

00:47:30,510 --> 00:47:34,890
stuff one of the nice things about using

00:47:32,310 --> 00:47:36,780
NFS is I believe in production almost

00:47:34,890 --> 00:47:39,030
everybody's going to have the data still

00:47:36,780 --> 00:47:40,770
in on shits court system because if you

00:47:39,030 --> 00:47:42,480
want to have a large cluster you have to

00:47:40,770 --> 00:47:46,170
use yet starts so you already have and

00:47:42,480 --> 00:47:48,030
if s it up or less for SS set up so why

00:47:46,170 --> 00:47:52,050
are we picking out the executables have

00:47:48,030 --> 00:47:54,300
to be pre pre installed now are forcing

00:47:52,050 --> 00:47:55,710
it to always be pre-installed so we need

00:47:54,300 --> 00:47:58,200
to take advantage of the tools that

00:47:55,710 --> 00:48:00,470
people been using em festa 30 years for

00:47:58,200 --> 00:48:00,470
good reason

00:48:01,200 --> 00:48:07,350
and I've shown that Apple like like

00:48:03,000 --> 00:48:13,110
those boys are you sure yeah one minute

00:48:07,350 --> 00:48:14,790
anybody else okay any comments about the

00:48:13,110 --> 00:48:17,610
presentation I like to hear about them

00:48:14,790 --> 00:48:19,470
and said we're expanding is we go

00:48:17,610 --> 00:48:21,600
forward with it down on the amount of

00:48:19,470 --> 00:48:23,360
time that's shown hopefully the next

00:48:21,600 --> 00:48:28,250
time I do this I'll be able to show the

00:48:23,360 --> 00:48:28,250

YouTube URL: https://www.youtube.com/watch?v=hQf2xB-vDMw


