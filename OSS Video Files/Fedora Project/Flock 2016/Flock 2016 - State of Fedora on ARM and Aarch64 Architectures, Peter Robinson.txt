Title: Flock 2016 - State of Fedora on ARM and Aarch64 Architectures, Peter Robinson
Publication date: 2016-08-21
Playlist: Flock 2016
Description: 
	The traditional ARM state of the union covering ARMv7 and aarch64, what we've achieved over the last year and what we plan to do for the next year.

https://flock2016.sched.org/event/6yp0/fedora-arm-state-of-the-union

This video was recorded at the annual Fedora contributor conference, Flock, in KrakÃ³w, Poland, from August 2-5, 2016. You can learn more about Flock at https://flocktofedora.org.

#FlockToFedora

Transcription: https://meetbot.fedoraproject.org/fedora-flock-picasso/2016-08-02/flock2016.2016-08-02-14.32.log.html
Captions: 
	00:00:01,620 --> 00:00:07,259
the recording is now going hi everyone

00:00:04,319 --> 00:00:08,970
I'm Peter Robinson if you don't already

00:00:07,259 --> 00:00:13,710
know that I think most of you probably

00:00:08,970 --> 00:00:16,379
do because I have a big mouth I'm here

00:00:13,710 --> 00:00:20,070
to talk about the state of arm both a

00:00:16,379 --> 00:00:24,380
art 64 the 64 bit variant and an v7 the

00:00:20,070 --> 00:00:26,359
32 bit variant my slide deck is fairly

00:00:24,380 --> 00:00:28,769
straightforward him and it's just got

00:00:26,359 --> 00:00:34,590
subject headers and I will basically go

00:00:28,769 --> 00:00:37,050
through it relatively quickly feel free

00:00:34,590 --> 00:00:39,629
to pass in at any time you like except

00:00:37,050 --> 00:00:45,899
about devices support we can do that at

00:00:39,629 --> 00:00:48,180
the end so core tool chain and features

00:00:45,899 --> 00:00:51,390
actually not much to say about this

00:00:48,180 --> 00:00:54,510
anymore it used to be you know we had

00:00:51,390 --> 00:00:58,590
GCC and not much else and then it was

00:00:54,510 --> 00:01:03,180
with added functionality now we've got

00:00:58,590 --> 00:01:08,070
everything from going and I think even

00:01:03,180 --> 00:01:10,500
rust all the way through the only big

00:01:08,070 --> 00:01:15,390
set of tool chain that we're currently

00:01:10,500 --> 00:01:17,340
missing on a out 64 is mono since the

00:01:15,390 --> 00:01:19,470
Microsoft purchase that is all landed

00:01:17,340 --> 00:01:21,780
upstream and we're just waiting for

00:01:19,470 --> 00:01:27,240
basically their release with all those

00:01:21,780 --> 00:01:30,509
patches actually in it should I think be

00:01:27,240 --> 00:01:34,619
around in the F 25 cycle if not you know

00:01:30,509 --> 00:01:37,020
it's not far away so that the first time

00:01:34,619 --> 00:01:39,270
I did this talk with I out 64 it was

00:01:37,020 --> 00:01:44,119
this massive big length of exceptions

00:01:39,270 --> 00:01:44,119
and now I'm happy to say it's not

00:01:45,950 --> 00:01:55,729
and on top of this we have on top of se

00:01:51,799 --> 00:01:58,610
the goin stack we now have docker and I

00:01:55,729 --> 00:02:02,720
think rocket although I'm not sure about

00:01:58,610 --> 00:02:06,829
that kubernetes OpenShift and various

00:02:02,720 --> 00:02:13,519
other bits of the go Lang stack so in

00:02:06,829 --> 00:02:16,040
and in Fedora 24 we now shoot out 64 and

00:02:13,519 --> 00:02:19,790
armed v7 docker images out of the box

00:02:16,040 --> 00:02:25,459
like as in the base images we're looking

00:02:19,790 --> 00:02:29,360
to work with Adam Miller I don't see to

00:02:25,459 --> 00:02:32,209
get OS PS and dr layered image support

00:02:29,360 --> 00:02:35,150
in there as well so that probably won't

00:02:32,209 --> 00:02:39,760
be either quite at the same time as x86

00:02:35,150 --> 00:02:39,760
64 but it shouldn't be too far behind it

00:02:40,540 --> 00:02:47,420
server edition again very very boring I

00:02:44,450 --> 00:02:50,540
think probably the biggest news here is

00:02:47,420 --> 00:02:53,420
that as part of the fedora 26 cycle

00:02:50,540 --> 00:02:56,030
which is now running we're going to

00:02:53,420 --> 00:02:57,950
propose promoting the server Edition to

00:02:56,030 --> 00:03:00,739
a primary architecture

00:02:57,950 --> 00:03:03,109
so there'll be discussion about that

00:03:00,739 --> 00:03:04,630
sort of thing probably going out on the

00:03:03,109 --> 00:03:07,700
mailing list in the next couple of weeks

00:03:04,630 --> 00:03:14,630
as part of a slightly different proposal

00:03:07,700 --> 00:03:17,090
which I will mention later on cloud

00:03:14,630 --> 00:03:19,910
edition alongside the docker images

00:03:17,090 --> 00:03:25,100
we're now also producing Queen move

00:03:19,910 --> 00:03:27,709
based cloud images and as part of the

00:03:25,100 --> 00:03:30,920
new composed process that was introduced

00:03:27,709 --> 00:03:33,500
in Fedora 24 for primary which we are

00:03:30,920 --> 00:03:35,720
running on across the secondary

00:03:33,500 --> 00:03:37,609
architectures as well we're doing

00:03:35,720 --> 00:03:40,040
nightly cloud images nightly docker

00:03:37,609 --> 00:03:43,910
images and so from that perspective

00:03:40,040 --> 00:03:46,090
again nicely boring looks a lot like x86

00:03:43,910 --> 00:03:46,090
00:03:49,450 --> 00:03:58,670
workstation addition a little bit more

00:03:53,090 --> 00:04:01,160
interesting here all the stuffs there on

00:03:58,670 --> 00:04:03,860
an v7 at once we even now have

00:04:01,160 --> 00:04:09,739
accelerated graphics stats primarily on

00:04:03,860 --> 00:04:12,380
the Nvidia stuff so at home on some of

00:04:09,739 --> 00:04:20,419
the Jetson devices I have a fully

00:04:12,380 --> 00:04:22,190
accelerated Weyland 93 stuff a out 64 is

00:04:20,419 --> 00:04:26,479
a little bit more interesting in that

00:04:22,190 --> 00:04:29,229
there's not really that many devices the

00:04:26,479 --> 00:04:33,229
gnome team have left me a dragon board

00:04:29,229 --> 00:04:35,150
which we made which we're basically

00:04:33,229 --> 00:04:37,160
working together and that should run no

00:04:35,150 --> 00:04:41,810
out of the box

00:04:37,160 --> 00:04:45,850
I have nvidia sent me a Jetson tx1 which

00:04:41,810 --> 00:04:48,260
is a 64-bit processors with a Maxwell

00:04:45,850 --> 00:04:51,979
drinking you in there and we should be

00:04:48,260 --> 00:04:55,610
supporting them in Fedora 25 so from an

00:04:51,979 --> 00:04:59,260
AR 64 point of view they will be our

00:04:55,610 --> 00:05:00,789
first sort of fully accelerated desktop

00:04:59,260 --> 00:05:04,280
devices

00:05:00,789 --> 00:05:06,410
similarly we found v7 there's a lot of

00:05:04,280 --> 00:05:09,770
2d stuff that works really really well

00:05:06,410 --> 00:05:16,039
3d on a handful of devices here and

00:05:09,770 --> 00:05:18,340
there so yeah relatively boring but no

00:05:16,039 --> 00:05:18,340
end

00:05:24,089 --> 00:05:28,379
so what do you mean by electrical balls

00:05:39,209 --> 00:05:43,169
I had 64

00:05:43,830 --> 00:05:52,509
probably out at the moment full desktop

00:05:47,559 --> 00:05:54,699
and GPIO nothing at the moment in the

00:05:52,509 --> 00:05:58,179
fedora twenty five cycle we should have

00:05:54,699 --> 00:06:02,289
support for the jetsam TX 1 which is the

00:05:58,179 --> 00:06:06,699
nvidia one and possibly the dragon board

00:06:02,289 --> 00:06:08,979
which is a qualcomm one which has in 96

00:06:06,699 --> 00:06:12,879
forward form factor which will do fully

00:06:08,979 --> 00:06:14,439
accellerated 3G but it has the major

00:06:12,879 --> 00:06:17,979
issue there is that has a terrible

00:06:14,439 --> 00:06:21,039
bootloader so it will actually run and

00:06:17,979 --> 00:06:23,169
boot and there are people running Fedora

00:06:21,039 --> 00:06:25,269
24 honor with fully accelerated desktops

00:06:23,169 --> 00:06:27,159
but there is vast amounts of Gaffa tape

00:06:25,269 --> 00:06:28,779
and bubble gum and various other bits

00:06:27,159 --> 00:06:30,369
and pieces applied between the

00:06:28,779 --> 00:06:33,249
bootloader and the kernel to make that

00:06:30,369 --> 00:06:36,219
work and someone actually posted a remix

00:06:33,249 --> 00:06:39,129
on it and I'm not sure the kernel they

00:06:36,219 --> 00:06:41,409
ship but it's a weird one so there are

00:06:39,129 --> 00:06:47,849
stuff there that will do that and do it

00:06:41,409 --> 00:06:53,349
relatively well but not like beautiful

00:06:47,849 --> 00:06:57,039
in Fedora 25 will also probably be able

00:06:53,349 --> 00:06:59,259
to support the Odroid c1 and potentially

00:06:57,039 --> 00:07:03,189
some of the rockchip stuff but that

00:06:59,259 --> 00:07:06,759
won't be fully accelerated 3d stuff

00:07:03,189 --> 00:07:10,839
it'll probably be more very basic or

00:07:06,759 --> 00:07:25,449
marginal accelerated xfce style desktop

00:07:10,839 --> 00:07:26,979
stuff and you can always yeah so the

00:07:25,449 --> 00:07:30,339
Mustang board which you're referring to

00:07:26,979 --> 00:07:32,619
there doesn't have generally usable GPIO

00:07:30,339 --> 00:07:40,289
that you can use for sensors or whatever

00:07:32,619 --> 00:07:43,349
it is that you wish to use it for yes

00:07:40,289 --> 00:07:43,349
thank you

00:07:44,009 --> 00:07:50,529
there is another device that I'll

00:07:46,059 --> 00:07:54,879
mention later on as well so generally

00:07:50,529 --> 00:07:59,439
use a space yeah pretty much complete 90

00:07:54,879 --> 00:08:02,409
so I think of packages that we don't

00:07:59,439 --> 00:08:04,449
currently build on AR 64 that we build

00:08:02,409 --> 00:08:07,419
on primary architectures there is

00:08:04,449 --> 00:08:10,300
something like 120 out of the 18,000 in

00:08:07,419 --> 00:08:13,719
fedora so it is less than a percent of

00:08:10,300 --> 00:08:17,740
all the packages and there are sort of

00:08:13,719 --> 00:08:20,369
things like Prolog and Pascal and a few

00:08:17,740 --> 00:08:23,379
other bits and pieces like that which

00:08:20,369 --> 00:08:25,449
potentially impossible to support but

00:08:23,379 --> 00:08:27,189
nobody's really showing the interest to

00:08:25,449 --> 00:08:31,329
do the bootstrapping requirements to do

00:08:27,189 --> 00:08:33,909
so but it's tiny so like yeah I think

00:08:31,329 --> 00:08:38,649
about 0.5% of packages that don't

00:08:33,909 --> 00:08:44,009
actually build on ayat' 64 v7 doesn't

00:08:38,649 --> 00:08:44,009
have that problem yes

00:08:46,130 --> 00:08:51,110
we've we've had support for house Kelvin

00:08:49,009 --> 00:08:54,279
there for probably about three or four

00:08:51,110 --> 00:08:58,279
releases it wasn't quite as accelerated

00:08:54,279 --> 00:09:00,529
but yen's who is here somewhere

00:08:58,279 --> 00:09:09,019
worked on it entities now I believe

00:09:00,529 --> 00:09:09,860
fully accellerated Colonel again pretty

00:09:09,019 --> 00:09:11,810
good

00:09:09,860 --> 00:09:16,449
a few releases ago we used to carry a

00:09:11,810 --> 00:09:16,449
patch of around a hundred thousand lines

00:09:16,509 --> 00:09:26,680
which was we currently have one patch

00:09:21,079 --> 00:09:30,800
set for a at sixty four which provides

00:09:26,680 --> 00:09:33,079
PCIe a CPI support which is needed for

00:09:30,800 --> 00:09:36,769
some of the enterprise hardware like the

00:09:33,079 --> 00:09:39,019
moonshot chassis the vast majority of

00:09:36,769 --> 00:09:41,959
that patch Center has landed in or is

00:09:39,019 --> 00:09:44,000
landing in the 4.8 kernel which is in

00:09:41,959 --> 00:09:48,259
the current dev cycle and so we'll end

00:09:44,000 --> 00:09:51,230
up with I think around less than a

00:09:48,259 --> 00:09:55,220
thousand lines of patch in terms of

00:09:51,230 --> 00:09:58,300
device support it's improving a lot but

00:09:55,220 --> 00:10:03,259
again so is the availability of actual

00:09:58,300 --> 00:10:06,680
hardware so it's relatively

00:10:03,259 --> 00:10:10,089
straightforward relatively reasonable it

00:10:06,680 --> 00:10:13,430
tends to work in most cases

00:10:10,089 --> 00:10:15,829
some like the Odroid c2 and other

00:10:13,430 --> 00:10:18,259
devices are still sort of dealing with

00:10:15,829 --> 00:10:20,420
up streaming stuff but are getting there

00:10:18,259 --> 00:10:23,300
and improving a lot all the time every

00:10:20,420 --> 00:10:25,699
sort of new kernel cycle so every 12

00:10:23,300 --> 00:10:29,389
weeks or so with the new kernel 10 or 12

00:10:25,699 --> 00:10:31,970
weeks you know we tend to add like quite

00:10:29,389 --> 00:10:34,579
a bit more but it's all relatively

00:10:31,970 --> 00:10:36,350
straightforward and the main Fedora

00:10:34,579 --> 00:10:38,300
kernel team doesn't have generally hate

00:10:36,350 --> 00:10:39,860
me so much anymore for having to deal

00:10:38,300 --> 00:10:42,339
with hundreds of thousand lines of

00:10:39,860 --> 00:10:42,339
patches

00:10:43,810 --> 00:11:05,990
yes hey wait so the you group so there's

00:11:03,140 --> 00:11:09,230
a couple of major boot loaders that we

00:11:05,990 --> 00:11:16,100
support obviously on a out 64 it is the

00:11:09,230 --> 00:11:19,100
lovely UEFI support one of the things

00:11:16,100 --> 00:11:21,710
that I kid you not I was working on or

00:11:19,100 --> 00:11:25,310
with a lot of other people working on

00:11:21,710 --> 00:11:27,860
for about four years was there is an

00:11:25,310 --> 00:11:32,230
open source you FLI implementation

00:11:27,860 --> 00:11:35,510
called Tiano core but it had a

00:11:32,230 --> 00:11:37,820
implementation of vfat that was licensed

00:11:35,510 --> 00:11:40,490
and patented encumbered and hence we

00:11:37,820 --> 00:11:42,260
couldn't ship it and we were kind of

00:11:40,490 --> 00:11:45,200
bothering a whole bunch of different

00:11:42,260 --> 00:11:48,440
people to try and get over that

00:11:45,200 --> 00:11:50,440
licensing problem solved or a different

00:11:48,440 --> 00:11:54,500
implementation in that could be shipped

00:11:50,440 --> 00:11:58,580
and interestingly I've mentioned them

00:11:54,500 --> 00:12:01,760
once before already Microsoft as part of

00:11:58,580 --> 00:12:03,050
I believe the whole agreement that

00:12:01,760 --> 00:12:06,280
they've done with the open-source

00:12:03,050 --> 00:12:09,950
community and in conjunction with Intel

00:12:06,280 --> 00:12:13,010
actually fixed that problem so that they

00:12:09,950 --> 00:12:15,320
could basically ship UEFI or that

00:12:13,010 --> 00:12:17,240
version of UEFI stuck on OpenStack and

00:12:15,320 --> 00:12:18,940
various other bits and pieces one of the

00:12:17,240 --> 00:12:22,280
nice side effects of that is we now have

00:12:18,940 --> 00:12:26,330
a firmware that works out of the box

00:12:22,280 --> 00:12:28,610
with vm's and other such things that we

00:12:26,330 --> 00:12:34,790
can ship in fedora so that fixed one of

00:12:28,610 --> 00:12:36,440
the problems you if the other arm so you

00:12:34,790 --> 00:12:41,350
boot is obviously the other boot loader

00:12:36,440 --> 00:12:45,950
that we use a lot on the SBC's such as

00:12:41,350 --> 00:12:48,580
our droid and cheek and various other

00:12:45,950 --> 00:12:51,730
bits and pieces and there was an

00:12:48,580 --> 00:12:51,730
implementation of

00:12:52,580 --> 00:12:59,240
I suppose you would call it emulation of

00:12:55,160 --> 00:13:03,649
UEFI that will or you have UEFI produces

00:12:59,240 --> 00:13:07,130
food services that runs on from you boot

00:13:03,649 --> 00:13:13,010
to enable us to boot a standard UEFI

00:13:07,130 --> 00:13:15,740
they scrub and kernel from that it kind

00:13:13,010 --> 00:13:17,630
of works but not quite that well I

00:13:15,740 --> 00:13:18,980
believe the problems are now fixed I

00:13:17,630 --> 00:13:21,200
just need to get the time to actually

00:13:18,980 --> 00:13:25,040
sit down and hack on it and confirm it

00:13:21,200 --> 00:13:27,260
and make it finish up working once that

00:13:25,040 --> 00:13:30,500
happens it makes it much easier for us

00:13:27,260 --> 00:13:33,410
to support things like the pine 64 the

00:13:30,500 --> 00:13:36,950
Odroid c2 and various other devices with

00:13:33,410 --> 00:13:40,430
the standard boot installer anaconda

00:13:36,950 --> 00:13:42,740
stack that we're already have supported

00:13:40,430 --> 00:13:47,750
for a number of releases on the

00:13:42,740 --> 00:13:50,630
enterprise level 64 devices which

00:13:47,750 --> 00:13:52,640
obviously then makes the user experience

00:13:50,630 --> 00:13:55,810
much much simpler and much much easier

00:13:52,640 --> 00:13:59,000
for a lot of different reasons

00:13:55,810 --> 00:14:02,390
so one way or another hell or high water

00:13:59,000 --> 00:14:06,079
I intend on having that working to some

00:14:02,390 --> 00:14:08,209
degree for fedora 25 again I'll come to

00:14:06,079 --> 00:14:13,339
those more details about those

00:14:08,209 --> 00:14:14,959
particular devices and as part of

00:14:13,339 --> 00:14:17,839
getting that working we can then start

00:14:14,959 --> 00:14:20,209
shipping the standard disk images that

00:14:17,839 --> 00:14:22,130
you can DD onto the single board

00:14:20,209 --> 00:14:26,300
computers similar to what we do for our

00:14:22,130 --> 00:14:29,120
v7 so we're expecting I'm expecting to

00:14:26,300 --> 00:14:33,020
have that one way or another in one form

00:14:29,120 --> 00:14:36,140
or another as part of Fedora 25 I've

00:14:33,020 --> 00:14:38,260
wanted it to be there for Fedora 24 but

00:14:36,140 --> 00:14:41,990
from a release engineering perspective

00:14:38,260 --> 00:14:44,600
Fedora 24 was immense and they just

00:14:41,990 --> 00:14:46,220
really I just literally ran out of time

00:14:44,600 --> 00:14:48,709
where it's like I actually have to be

00:14:46,220 --> 00:14:51,740
able to sleep at some point so that was

00:14:48,709 --> 00:14:55,610
one of the very very few things that we

00:14:51,740 --> 00:14:58,250
had to sleep in Fedora 24 sadly because

00:14:55,610 --> 00:15:01,300
I just didn't have enough time or and

00:14:58,250 --> 00:15:01,300
cycles to get it done

00:15:01,910 --> 00:15:13,020
to envision people like a were clover

00:15:05,400 --> 00:15:16,050
would actually be able to just do that

00:15:13,020 --> 00:15:19,110
so the question is for the video do I

00:15:16,050 --> 00:15:22,440
envisage a situation where you can put a

00:15:19,110 --> 00:15:26,220
little stub on an SD card and run out of

00:15:22,440 --> 00:15:28,320
Conda yes you can do it now you've been

00:15:26,220 --> 00:15:32,340
able to do it pretty much from the

00:15:28,320 --> 00:15:34,680
outset so on a number of my test devices

00:15:32,340 --> 00:15:38,010
at home that have SATA ports on it

00:15:34,680 --> 00:15:41,250
I have you boot on the SD card and it

00:15:38,010 --> 00:15:44,820
just sits there and it pixie boots off

00:15:41,250 --> 00:15:48,030
the network and does a kick-start

00:15:44,820 --> 00:15:50,790
install directly onto the hard disk

00:15:48,030 --> 00:15:55,050
using anaconda so that that's been a

00:15:50,790 --> 00:15:57,030
standard roller there are a few caveats

00:15:55,050 --> 00:16:00,000
and if you've got a device that has

00:15:57,030 --> 00:16:04,350
onboard manned where the u-boot is

00:16:00,000 --> 00:16:07,020
running on the land you can do that too

00:16:04,350 --> 00:16:09,690
like SD cards there's a few corner cases

00:16:07,020 --> 00:16:13,770
where it's a little bit iffy like if you

00:16:09,690 --> 00:16:15,840
wanted net if you want to run the u-boot

00:16:13,770 --> 00:16:18,330
on the SD card and install to the SD

00:16:15,840 --> 00:16:20,880
card it tends to blow away the u-boot

00:16:18,330 --> 00:16:23,880
and the way people have worked around

00:16:20,880 --> 00:16:26,280
that is then that as part of the post

00:16:23,880 --> 00:16:29,070
install process they rewrite that you

00:16:26,280 --> 00:16:31,290
going out in the kick-start as part of

00:16:29,070 --> 00:16:35,550
the post install process that it works

00:16:31,290 --> 00:16:37,920
now and it has done on our base evidence

00:16:35,550 --> 00:16:39,410
work like that since about Fedora 18 I

00:16:37,920 --> 00:16:42,620
don't

00:16:39,410 --> 00:16:43,220
I would like to learn about that would

00:16:42,620 --> 00:16:48,129
be awesome

00:16:43,220 --> 00:16:48,129
and you're on video yes agreeing to it

00:16:50,680 --> 00:16:57,980
so I out 64 as a primary architecture

00:16:55,060 --> 00:17:01,399
this is a question that I get asked a

00:16:57,980 --> 00:17:08,049
lot like three or four times a week a

00:17:01,399 --> 00:17:12,130
lot I am in the process of doing a

00:17:08,049 --> 00:17:14,360
proposal which has a pesco ticket and

00:17:12,130 --> 00:17:17,089
will be going out to the mailing list

00:17:14,360 --> 00:17:21,470
probably later on today because there is

00:17:17,089 --> 00:17:23,150
now a mostly organized wiki page with an

00:17:21,470 --> 00:17:28,339
FAQ and various other bits and pieces

00:17:23,150 --> 00:17:32,419
around it of redefining asking fest go

00:17:28,339 --> 00:17:36,559
to redefine what constitutes a secondary

00:17:32,419 --> 00:17:40,850
architecture or as on now more referring

00:17:36,559 --> 00:17:43,820
to it an alternate architecture so at

00:17:40,850 --> 00:17:47,240
the moment the designator for primary

00:17:43,820 --> 00:17:50,539
and versus secondary is the instance of

00:17:47,240 --> 00:17:53,450
Kochi that it runs in and that doesn't

00:17:50,539 --> 00:17:57,740
really hold true anymore with a bunch of

00:17:53,450 --> 00:17:59,679
I 686 being sort of pushed to secondary

00:17:57,740 --> 00:18:03,740
architectures in various different forms

00:17:59,679 --> 00:18:06,559
and in the case of a at 64 for server

00:18:03,740 --> 00:18:09,140
and even docker and certain components

00:18:06,559 --> 00:18:11,059
it makes perfect sense to promote it to

00:18:09,140 --> 00:18:12,950
primary because there's a lot of people

00:18:11,059 --> 00:18:15,679
that wanted a such an are using it as

00:18:12,950 --> 00:18:19,820
such and have an expectation of it as

00:18:15,679 --> 00:18:23,030
such but then the promotion of save

00:18:19,820 --> 00:18:24,559
workstation on AR 64 two primary makes

00:18:23,030 --> 00:18:27,200
no sense at all because there's not a

00:18:24,559 --> 00:18:32,450
lot of out-of-the-box devices that even

00:18:27,200 --> 00:18:34,370
work on it sorry they watch out the

00:18:32,450 --> 00:18:36,890
devel mailing list basically the

00:18:34,370 --> 00:18:39,080
proposal is that we run one instance of

00:18:36,890 --> 00:18:41,929
Poggi that builds all the architectures

00:18:39,080 --> 00:18:44,090
and then the artifacts that are output

00:18:41,929 --> 00:18:47,600
whether it's the workstation live live

00:18:44,090 --> 00:18:51,120
images or the server installers or the

00:18:47,600 --> 00:18:53,220
docker images or layered images or

00:18:51,120 --> 00:18:56,250
the other thing that we may end up

00:18:53,220 --> 00:18:59,730
producing is the definition of what is

00:18:56,250 --> 00:19:01,260
primary and not which I mean a lot of

00:18:59,730 --> 00:19:02,880
the components of the proposal are

00:19:01,260 --> 00:19:05,940
already there

00:19:02,880 --> 00:19:09,030
and already so we have like in the case

00:19:05,940 --> 00:19:11,520
of release artifacts we have blocking

00:19:09,030 --> 00:19:15,240
and non blocking release artifacts and

00:19:11,520 --> 00:19:18,240
so that then basically becomes what is

00:19:15,240 --> 00:19:20,760
primary and what is secondary and you

00:19:18,240 --> 00:19:23,790
don't then have a primary architecture

00:19:20,760 --> 00:19:27,809
in a secondary architecture you have x86

00:19:23,790 --> 00:19:30,350
64 as a default architecture and then

00:19:27,809 --> 00:19:36,960
you have alternate architectures which

00:19:30,350 --> 00:19:39,270
IBM power IR 64 even arm v7 to some

00:19:36,960 --> 00:19:44,400
degree and then certain components of

00:19:39,270 --> 00:19:47,130
the release so that is a proposal that's

00:19:44,400 --> 00:19:50,130
going through and then once that is

00:19:47,130 --> 00:19:53,370
accepted and the those changes have

00:19:50,130 --> 00:19:58,100
begun to enact I will then propose

00:19:53,370 --> 00:20:01,950
promoting a out 64 server to a primary

00:19:58,100 --> 00:20:06,240
release blocking artifact as part of

00:20:01,950 --> 00:20:09,059
that process so that that's cousin just

00:20:06,240 --> 00:20:14,010
so that it's recorded and on video and

00:20:09,059 --> 00:20:16,920
so I can now refer people to a 45 minute

00:20:14,010 --> 00:20:21,090
presentation every time they ask me as

00:20:16,920 --> 00:20:24,530
to what is the state of art 64 becoming

00:20:21,090 --> 00:20:28,530
primary that is currently the state so

00:20:24,530 --> 00:20:30,510
there we are basically I'm preparing to

00:20:28,530 --> 00:20:33,240
put on my asbestos suit and go into the

00:20:30,510 --> 00:20:36,000
fire fight that may well be the develop

00:20:33,240 --> 00:20:38,780
discussion over that and from there

00:20:36,000 --> 00:20:38,780
we'll take it from there

00:20:39,890 --> 00:20:50,540
so I mentioned I would leave questions

00:20:46,470 --> 00:20:53,190
about individual devices into the end

00:20:50,540 --> 00:20:55,290
one of the reasons for that is I'm sure

00:20:53,190 --> 00:20:58,830
someone's going to ask about Raspberry

00:20:55,290 --> 00:21:01,270
Pi because that is the other question

00:20:58,830 --> 00:21:12,180
that I get asked hundreds of

00:21:01,270 --> 00:21:12,180
a month I know

00:21:13,140 --> 00:21:22,060
shall we actually support Raspberry Pi

00:21:18,220 --> 00:21:27,880
in Fedora 24 on the Raspberry Pi 2 and

00:21:22,060 --> 00:21:31,570
the Raspberry Pi 3 and it all actually

00:21:27,880 --> 00:21:34,900
works the only thing I never got around

00:21:31,570 --> 00:21:37,960
to doing alongside the ah-64 disk images

00:21:34,900 --> 00:21:40,540
was actually producing a image that you

00:21:37,960 --> 00:21:43,540
could just DD onto a card and have work

00:21:40,540 --> 00:21:45,940
because you've got to have this horrible

00:21:43,540 --> 00:21:49,150
little V fat petition at the beginning

00:21:45,940 --> 00:21:54,340
and you have to set it up in a special

00:21:49,150 --> 00:21:56,860
way and I can do that on my machine at

00:21:54,340 --> 00:22:01,480
home no issues like generate the image

00:21:56,860 --> 00:22:05,230
the tool chain that currently builds the

00:22:01,480 --> 00:22:09,250
nightly images in kotee is an antiquated

00:22:05,230 --> 00:22:11,920
pile of crap which we are working to

00:22:09,250 --> 00:22:14,920
replace with live media creator which is

00:22:11,920 --> 00:22:17,770
part of Lorax and the Anaconda stack the

00:22:14,920 --> 00:22:21,010
problem is it's and we made that change

00:22:17,770 --> 00:22:23,490
for the live CDs in Fedora 24 the

00:22:21,010 --> 00:22:27,250
intention was to make that change for

00:22:23,490 --> 00:22:28,720
the arm disk images as well in Fedora 24

00:22:27,250 --> 00:22:33,100
but there was some functionality that

00:22:28,720 --> 00:22:37,660
didn't work and so my intention was to

00:22:33,100 --> 00:22:41,670
do unofficial Raspberry Pi images that

00:22:37,660 --> 00:22:47,290
people could consume on arm v7 for both

00:22:41,670 --> 00:22:50,410
PI 2 and the PI 3 and I just not got

00:22:47,290 --> 00:22:52,780
around to them yet sorry but we do

00:22:50,410 --> 00:22:56,320
actually support the raspberry pi 2 and

00:22:52,780 --> 00:22:57,520
3 in Fedora 24 in Fedora 25 again one

00:22:56,320 --> 00:23:00,610
way or the other we will have disk

00:22:57,520 --> 00:23:04,710
images to enable that support and that

00:23:00,610 --> 00:23:08,470
should have fully accelerated gnome

00:23:04,710 --> 00:23:11,490
stack with GPIO so that could be the

00:23:08,470 --> 00:23:11,490
solution that you're after

00:23:15,190 --> 00:23:24,020
yeah so one of the major blockers I had

00:23:19,940 --> 00:23:27,560
for sending it out and blog posting it

00:23:24,020 --> 00:23:30,050
and like media releasing and everything

00:23:27,560 --> 00:23:32,600
else is that I want it to be eight

00:23:30,050 --> 00:23:35,390
people to be able to Dede it onto a

00:23:32,600 --> 00:23:39,410
thing and it comes up and it has like

00:23:35,390 --> 00:23:43,220
roots to a graphical login and you know

00:23:39,410 --> 00:23:45,200
so HDMI works and I don't want them to

00:23:43,220 --> 00:23:48,200
have to have a serial port to work stuff

00:23:45,200 --> 00:23:50,840
out to poke stuff to make stuff work

00:23:48,200 --> 00:23:52,580
because we're going to end up in a

00:23:50,840 --> 00:23:56,120
situation that as soon as we announce

00:23:52,580 --> 00:23:58,700
this there's going to be like 10,000

00:23:56,120 --> 00:24:01,160
downloads and I don't want 10,000 people

00:23:58,700 --> 00:24:02,810
coming along and drowning the few people

00:24:01,160 --> 00:24:04,910
that are actually there to help for

00:24:02,810 --> 00:24:08,150
support so I basically almost wanted to

00:24:04,910 --> 00:24:17,260
be user proof I was going to use another

00:24:08,150 --> 00:24:17,260
word but yeah I didn't say

00:24:18,960 --> 00:24:24,630
to the mayor so you don't want another

00:24:21,000 --> 00:24:28,440
image engineers well I just a plan

00:24:24,630 --> 00:24:32,750
tonight to write a docker container that

00:24:28,440 --> 00:24:37,049
pulls down the existing at 24 inches

00:24:32,750 --> 00:24:39,179
okay I'm just saying no way you could

00:24:37,049 --> 00:24:44,850
cross moment and windows and math people

00:24:39,179 --> 00:24:50,520
which there a lot of so the image that I

00:24:44,850 --> 00:24:54,690
had so the image the image I have at

00:24:50,520 --> 00:24:59,520
home is a single image so we would

00:24:54,690 --> 00:25:05,669
produce one for each to say xfce KDE no

00:24:59,520 --> 00:25:08,190
etc etc that for the Raspberry Pi use

00:25:05,669 --> 00:25:10,620
case you can literally on a Mac or

00:25:08,190 --> 00:25:13,260
Windows or anything that has DD DD an

00:25:10,620 --> 00:25:16,830
hour and it will boot by default out of

00:25:13,260 --> 00:25:20,340
the box on the Raspberry Pi then if you

00:25:16,830 --> 00:25:22,700
wish to use it on a BeagleBone or any of

00:25:20,340 --> 00:25:25,380
the other devices and any of the other

00:25:22,700 --> 00:25:28,470
hundred and eighty odd devices that we

00:25:25,380 --> 00:25:33,390
support in Fedora 24 you use the Fedora

00:25:28,470 --> 00:25:35,429
army image installer which is the

00:25:33,390 --> 00:25:36,960
standard way and it DJ's out the new

00:25:35,429 --> 00:25:38,850
moon and various other bits and pieces

00:25:36,960 --> 00:25:41,100
and it will then boot on those devices

00:25:38,850 --> 00:25:44,429
in the standard way that everyone is

00:25:41,100 --> 00:25:47,340
used to and then the only difference is

00:25:44,429 --> 00:25:50,730
that those devices will have like a 30

00:25:47,340 --> 00:25:53,279
make the fat petition at the beginning

00:25:50,730 --> 00:25:55,320
of the disk that they never need to deal

00:25:53,279 --> 00:25:56,730
with or look at or care about and what

00:25:55,320 --> 00:25:58,500
have you and if they wish to delete it

00:25:56,730 --> 00:25:59,880
manually themselves they can but

00:25:58,500 --> 00:26:07,230
otherwise it will just sit there and

00:25:59,880 --> 00:26:09,210
basically be ignored no no so I like I

00:26:07,230 --> 00:26:11,580
literally thought this through for a

00:26:09,210 --> 00:26:15,390
couple of years to work out the simplest

00:26:11,580 --> 00:26:18,090
solution so that any Raspberry Pi user

00:26:15,390 --> 00:26:19,770
can try and and just do it on a Windows

00:26:18,090 --> 00:26:21,779
or Mac or whatever and it's easy and it

00:26:19,770 --> 00:26:24,090
just works but we don't kill the other

00:26:21,779 --> 00:26:26,130
users and we don't end up in a situation

00:26:24,090 --> 00:26:27,510
where we have two images of everything

00:26:26,130 --> 00:26:31,399
because that's just confusing through

00:26:27,510 --> 00:26:33,859
which comes to the my intention is

00:26:31,399 --> 00:26:36,739
to support the Raspberry Pi 3 as an arm

00:26:33,859 --> 00:26:39,109
v7 device so that there is one image

00:26:36,739 --> 00:26:42,169
that if people want to run it on the

00:26:39,109 --> 00:26:44,179
Raspberry Pi 2 or the Raspberry Pi 3 it

00:26:42,169 --> 00:26:46,070
will run like that which is exactly the

00:26:44,179 --> 00:26:50,349
same way as the PI foundation is doing

00:26:46,070 --> 00:26:54,669
it and the fact of the matter is that a

00:26:50,349 --> 00:26:59,719
device with half a gig or 1 gig of ram

00:26:54,669 --> 00:27:02,269
with a broken USB controller and like a

00:26:59,719 --> 00:27:05,809
single broken USB controller that does

00:27:02,269 --> 00:27:07,879
all IO is never going to be performant

00:27:05,809 --> 00:27:11,320
enough that a 64-bit operating system is

00:27:07,879 --> 00:27:17,089
going to make a of a difference so

00:27:11,320 --> 00:27:18,830
yes the 4.8 kernel supports the 64-bit

00:27:17,089 --> 00:27:20,659
version of the right screen PI 3 we will

00:27:18,830 --> 00:27:24,259
probably enable it just so people will

00:27:20,659 --> 00:27:26,359
stop bothering me but it won't be it

00:27:24,259 --> 00:27:27,619
will be there and people can consume it

00:27:26,359 --> 00:27:30,830
but if it breaks they get to keep both

00:27:27,619 --> 00:27:34,089
bits and the officially supported one

00:27:30,830 --> 00:27:34,089
will be on v7

00:27:43,140 --> 00:27:49,360
do you have any solutions for these um

00:27:46,809 --> 00:27:53,980
so so the question is what are the best

00:27:49,360 --> 00:27:56,410
devices to buy now for people to use and

00:27:53,980 --> 00:27:58,660
the question I always have when people

00:27:56,410 --> 00:28:05,980
ask me this is what do you want to use

00:27:58,660 --> 00:28:06,700
it for so debts desktop users of jetsam

00:28:05,980 --> 00:28:08,169
tk1

00:28:06,700 --> 00:28:11,309
because that will give you fully your

00:28:08,169 --> 00:28:14,140
seller ated wayland and will desktop

00:28:11,309 --> 00:28:17,110
with all sorts of nice thing it is not a

00:28:14,140 --> 00:28:24,309
cheap device though it's about 300 or

00:28:17,110 --> 00:28:27,820
200 dollars so any of the allwinner

00:28:24,309 --> 00:28:30,970
820 devices so the QB truck is quite an

00:28:27,820 --> 00:28:34,659
expensive version of that the banana pie

00:28:30,970 --> 00:28:36,850
the banana Pro are very good devices and

00:28:34,659 --> 00:28:40,720
they're very good for server related

00:28:36,850 --> 00:28:43,570
stuff because they have a SOC attached

00:28:40,720 --> 00:28:46,179
Gigabit Ethernet port they have a real

00:28:43,570 --> 00:28:48,850
SATA port so if you want to do cluster

00:28:46,179 --> 00:28:50,830
and stuff like that you'll actually get

00:28:48,850 --> 00:28:54,370
real performance as opposed to on the PI

00:28:50,830 --> 00:28:57,190
where you get no performance the

00:28:54,370 --> 00:28:59,799
BeagleBone if you want to do IOT related

00:28:57,190 --> 00:29:04,840
stuff is awesome and we put support a

00:28:59,799 --> 00:29:10,000
whole bunch of stuff on that and it's

00:29:04,840 --> 00:29:13,210
very well supported the one board for a

00:29:10,000 --> 00:29:16,780
bunch of different use cases and there

00:29:13,210 --> 00:29:19,960
is now an accelerated driver which

00:29:16,780 --> 00:29:21,850
should do full workstation acceleration

00:29:19,960 --> 00:29:24,549
none of the user space stuff has been

00:29:21,850 --> 00:29:26,740
released yet and the people that are

00:29:24,549 --> 00:29:28,659
writing that stuff are too busy feuding

00:29:26,740 --> 00:29:31,600
within their own little community to

00:29:28,659 --> 00:29:33,220
actually get anything done but so the

00:29:31,600 --> 00:29:35,320
one board and a bunch of devices like

00:29:33,220 --> 00:29:38,620
that are pretty good for excessively cee

00:29:35,320 --> 00:29:42,760
style desktop and audio related stuff

00:29:38,620 --> 00:29:44,770
because they have digital audio and

00:29:42,760 --> 00:29:48,909
digital audio through HDMI that works

00:29:44,770 --> 00:29:51,100
pretty well so it's a hard question to

00:29:48,909 --> 00:29:52,850
answer because they're like we literally

00:29:51,100 --> 00:29:55,310
now support about 180

00:29:52,850 --> 00:29:56,480
devices and depending on your use case

00:29:55,310 --> 00:30:00,910
and what you want to use it before

00:29:56,480 --> 00:30:00,910
depends on the device I would recommend

00:30:05,140 --> 00:30:10,390
yes so that was the dragon board that I

00:30:07,850 --> 00:30:12,860
mentioned that has a complete and other

00:30:10,390 --> 00:30:27,140
horrible horrible horrible bootloader

00:30:12,860 --> 00:30:29,000
experience and yeah and um and some

00:30:27,140 --> 00:30:31,670
recent stuff which i think is landing

00:30:29,000 --> 00:30:33,230
into the for a kernel the developer of

00:30:31,670 --> 00:30:37,910
that has done some really interesting

00:30:33,230 --> 00:30:40,850
hacks around the tiling thing which adds

00:30:37,910 --> 00:30:42,950
about in certain circumstances thirty

00:30:40,850 --> 00:30:45,410
percent to the performance on that I'm

00:30:42,950 --> 00:30:48,560
hoping to somehow support that in Fedora

00:30:45,410 --> 00:30:50,060
25 I'm not sure how we're going to glue

00:30:48,560 --> 00:30:52,310
the bootloader bits for that together

00:30:50,060 --> 00:30:55,430
there is you boot up stream support for

00:30:52,310 --> 00:30:57,050
that now sorry we may be able to if we

00:30:55,430 --> 00:31:01,160
can write that you boot out in a

00:30:57,050 --> 00:31:03,140
particular way that is half saying it

00:31:01,160 --> 00:31:07,070
may we may get to the point where we can

00:31:03,140 --> 00:31:09,640
just support it but it's a little bit

00:31:07,070 --> 00:31:09,640
interesting

00:31:23,289 --> 00:31:31,600
so the question is what sort of

00:31:26,120 --> 00:31:34,549
objections and I expecting it is usual

00:31:31,600 --> 00:31:37,460
community bickering from half a dozen or

00:31:34,549 --> 00:31:39,440
a handful of people that will often just

00:31:37,460 --> 00:31:44,929
object to something for the sake of

00:31:39,440 --> 00:31:48,110
objecting I mean I first floated this

00:31:44,929 --> 00:31:52,669
proposal as part of flock last year I've

00:31:48,110 --> 00:31:55,700
done a lot of discussions and talks and

00:31:52,669 --> 00:31:59,090
q and A's and things with people that I

00:31:55,700 --> 00:32:02,090
care about their opinions and answered a

00:31:59,090 --> 00:32:05,779
lot of questions and the people that I

00:32:02,090 --> 00:32:08,299
expected originally to object to it from

00:32:05,779 --> 00:32:10,580
because of things I have said have been

00:32:08,299 --> 00:32:13,279
mostly positive about it which to me was

00:32:10,580 --> 00:32:14,929
awesome there is a couple of individuals

00:32:13,279 --> 00:32:16,909
that have already started even though I

00:32:14,929 --> 00:32:19,190
haven't posted it to the list of raising

00:32:16,909 --> 00:32:20,990
objections but you know they tend to be

00:32:19,190 --> 00:32:28,220
just objectionable for the sake of being

00:32:20,990 --> 00:32:31,610
objection or I didn't say you're at the

00:32:28,220 --> 00:32:43,120
back with our 64 mate so when you say

00:32:31,610 --> 00:32:48,740
that I'm sorry Martin mentioned builders

00:32:43,120 --> 00:32:52,279
we have in Phoenix racked up a moonshot

00:32:48,740 --> 00:32:55,789
chassis with 30 blades in it which I am

00:32:52,279 --> 00:32:59,120
waiting on a firmware fix from the

00:32:55,789 --> 00:33:01,700
manufacturer for a bug I managed to

00:32:59,120 --> 00:33:05,120
discover in their firmware not the first

00:33:01,700 --> 00:33:08,419
one and we should have that in place

00:33:05,120 --> 00:33:10,850
shortly there's a few other bits and

00:33:08,419 --> 00:33:12,950
pieces around orchestration of that but

00:33:10,850 --> 00:33:15,409
I'm hoping within the next two to three

00:33:12,950 --> 00:33:21,019
weeks we will have the first batch of

00:33:15,409 --> 00:33:24,620
new MV 7 virtual builders which so on

00:33:21,019 --> 00:33:29,029
the test that I did building the colonel

00:33:24,620 --> 00:33:33,440
and I think jarred the Java stack on a

00:33:29,029 --> 00:33:34,809
Mustang which is a similar hardware spec

00:33:33,440 --> 00:33:38,080
but with a terribly

00:33:34,809 --> 00:33:42,659
so hard disk we sort of cut the builds

00:33:38,080 --> 00:33:47,049
time by a half or at least a half and

00:33:42,659 --> 00:33:49,269
the moonshot blades have SSDs in it so

00:33:47,049 --> 00:33:50,740
it may even be a bit better than that I

00:33:49,269 --> 00:33:53,019
was actually hoping to have it in

00:33:50,740 --> 00:33:55,870
production by now I wasn't quite

00:33:53,019 --> 00:33:58,080
expecting to have to go quite so deep

00:33:55,870 --> 00:34:01,690
into kernel and firmware issues as that

00:33:58,080 --> 00:34:05,129
but in the next few weeks and certainly

00:34:01,690 --> 00:34:07,389
by the end of next end of this month

00:34:05,129 --> 00:34:11,409
that will be in production so you'll

00:34:07,389 --> 00:34:17,109
start to see that happen and so the arm

00:34:11,409 --> 00:34:21,399
v7 builders should improve an order of

00:34:17,109 --> 00:34:23,740
magnitude in terms of speed and build

00:34:21,399 --> 00:34:31,619
times so I think that will alleviate a

00:34:23,740 --> 00:34:31,619
lot of the complaints in gigabytes 32

00:34:32,849 --> 00:34:40,929
yeah so sorry I caused 2.4 gigahertz 64

00:34:38,169 --> 00:34:43,030
gig of ram half terabyte SSD versus the

00:34:40,929 --> 00:34:46,839
current ones which at one point four

00:34:43,030 --> 00:34:49,480
gigahertz quad-core four gig of ram and

00:34:46,839 --> 00:34:54,310
terribly totally slow laptop hard disks

00:34:49,480 --> 00:35:00,060
so it will be old and yeah much faster

00:34:54,310 --> 00:35:00,060
network as well yes

00:35:01,920 --> 00:35:06,700
the people well you

00:35:03,920 --> 00:35:06,700
yes

00:35:10,990 --> 00:35:19,540
ah so I actually have so the question is

00:35:15,880 --> 00:35:21,550
about support for the crypto cape on the

00:35:19,540 --> 00:35:24,760
BeagleBone that will plug into the

00:35:21,550 --> 00:35:28,030
BeagleBone I believe we can mostly

00:35:24,760 --> 00:35:31,660
support it I actually have one at home I

00:35:28,030 --> 00:35:33,490
have on my laptop a list of all the bits

00:35:31,660 --> 00:35:38,040
of hardware in there I need to basically

00:35:33,490 --> 00:35:40,420
go through and work out which bits have

00:35:38,040 --> 00:35:43,090
kernel modules and whether web enabled

00:35:40,420 --> 00:35:45,730
them in the kernel or not the biggest

00:35:43,090 --> 00:35:48,820
issue with it is support for device tree

00:35:45,730 --> 00:35:53,250
overlay and so basically device tree

00:35:48,820 --> 00:35:56,020
overlay is the ability to take a base

00:35:53,250 --> 00:35:59,050
device Freesat such as the one to

00:35:56,020 --> 00:36:03,130
support the face BeagleBone and then

00:35:59,050 --> 00:36:05,320
layer a subset of extra device tree

00:36:03,130 --> 00:36:08,170
depending on the stuff that's plugged

00:36:05,320 --> 00:36:10,060
into it such as the Crypt okay the

00:36:08,170 --> 00:36:14,020
support for that

00:36:10,060 --> 00:36:16,359
upstream is almost there and that would

00:36:14,020 --> 00:36:17,859
basically mean that you can say I have a

00:36:16,359 --> 00:36:19,450
crypto cape here and it will Auto

00:36:17,859 --> 00:36:21,810
configure all the hardware and it will

00:36:19,450 --> 00:36:24,190
appear and you can just consume it

00:36:21,810 --> 00:36:26,140
without it you can still use the

00:36:24,190 --> 00:36:29,020
hardware that you've manually got to

00:36:26,140 --> 00:36:31,450
tell it that you know this in crypto

00:36:29,020 --> 00:36:34,359
thing is hanging off this I to see port

00:36:31,450 --> 00:36:37,080
or this GPIO port and things like that

00:36:34,359 --> 00:36:39,700
but it would still work

00:36:37,080 --> 00:36:44,380
Kevin speak to me afterwards and I can

00:36:39,700 --> 00:36:46,090
like so I've showed it to a couple of

00:36:44,380 --> 00:36:47,410
people and like a couple of people just

00:36:46,090 --> 00:36:52,960
instantly went and bought they were

00:36:47,410 --> 00:36:56,160
buying to encrypt a capers fun yeah Adam

00:36:52,960 --> 00:36:56,160
did you have a question up the back

00:36:56,400 --> 00:37:02,060
about the promotion primary our picture

00:36:59,410 --> 00:37:04,760
and I just wanna mention

00:37:02,060 --> 00:37:07,520
proposal a lot of those impressions of

00:37:04,760 --> 00:37:10,520
engine content

00:37:07,520 --> 00:37:10,520
ninety-eight

00:37:12,869 --> 00:37:16,189
comment on that

00:37:14,329 --> 00:37:18,459
it's very good right now probably one of

00:37:16,189 --> 00:37:18,459
the better

00:37:18,870 --> 00:37:22,950
yes so I did a big long write-up to

00:37:21,300 --> 00:37:24,960
fester and there was a number of queries

00:37:22,950 --> 00:37:27,300
backwards and forwards I have tried to

00:37:24,960 --> 00:37:29,790
condense the content of that and the

00:37:27,300 --> 00:37:32,310
queries that they enhance it into a wiki

00:37:29,790 --> 00:37:33,990
page I'm intending on sending that link

00:37:32,310 --> 00:37:36,630
to the wiki page and the link to the

00:37:33,990 --> 00:37:41,610
fesker proposal out to the mailing list

00:37:36,630 --> 00:37:43,350
oh I've been dealing with f25 branched

00:37:41,610 --> 00:37:46,800
and various other bits and pieces over

00:37:43,350 --> 00:37:48,180
the last couple of weeks and so as much

00:37:46,800 --> 00:37:49,770
as I've wanted to get it out there have

00:37:48,180 --> 00:37:51,740
been other things that have been

00:37:49,770 --> 00:37:56,130
screaming at me to be done and more

00:37:51,740 --> 00:37:59,810
important and I had some family stuff

00:37:56,130 --> 00:38:02,220
and some time in Australia and I

00:37:59,810 --> 00:38:04,160
occasionally do need to sleep for a few

00:38:02,220 --> 00:38:16,710
hours a day

00:38:04,160 --> 00:38:19,200
anyone got any more questions yeah so

00:38:16,710 --> 00:38:22,830
the question is has there been testing

00:38:19,200 --> 00:38:29,900
or demos on mobile phones and other sort

00:38:22,830 --> 00:38:32,190
of things no but yes so it's not a

00:38:29,900 --> 00:38:38,130
device form factor that we're actively

00:38:32,190 --> 00:38:43,370
aiming for the lead developer of the

00:38:38,130 --> 00:38:46,590
Freid Reno driver which is the Qualcomm

00:38:43,370 --> 00:38:49,860
GPU that ships on like the vast majority

00:38:46,590 --> 00:38:55,320
of Android phones for example he runs

00:38:49,860 --> 00:38:57,090
fedora on a number of mobile devices to

00:38:55,320 --> 00:39:02,010
do the development and test of that

00:38:57,090 --> 00:39:06,480
driver there's a number of really really

00:39:02,010 --> 00:39:10,890
cheap all winner based tablets that you

00:39:06,480 --> 00:39:14,730
can get that are like 30 $40 and we

00:39:10,890 --> 00:39:17,520
actually nearly gave away one to every

00:39:14,730 --> 00:39:19,140
flop presenter last year but there was a

00:39:17,520 --> 00:39:21,690
whole bunch of stuff that failed in the

00:39:19,140 --> 00:39:24,780
logistics which meant we couldn't

00:39:21,690 --> 00:39:27,090
actually get them but most of those are

00:39:24,780 --> 00:39:29,680
actually unlocked and so you can

00:39:27,090 --> 00:39:34,700
literally shove a fedora

00:39:29,680 --> 00:39:39,200
like XFC image into the micro SD slot

00:39:34,700 --> 00:39:42,319
and it will just boot but there's not a

00:39:39,200 --> 00:39:45,170
lot of graphics acceleration so and

00:39:42,319 --> 00:39:46,700
there's I think in a lot of cases issues

00:39:45,170 --> 00:39:48,829
with touchscreens and a few other bits

00:39:46,700 --> 00:39:52,430
and pieces which make them a little bit

00:39:48,829 --> 00:39:57,039
interesting to use there's a lot of

00:39:52,430 --> 00:40:00,410
emphasis on getting the Nexus 7 tablet

00:39:57,039 --> 00:40:01,609
working on an upstream kernel at which

00:40:00,410 --> 00:40:03,259
point it would be relatively

00:40:01,609 --> 00:40:07,039
straightforward to use a fedora user

00:40:03,259 --> 00:40:11,619
space with that the biggest issue is

00:40:07,039 --> 00:40:17,539
that the boot loaders so a boot h boot

00:40:11,619 --> 00:40:21,499
various other letters with boot attached

00:40:17,539 --> 00:40:24,079
to the end are complete another train

00:40:21,499 --> 00:40:27,829
wreck when it comes to a generic distro

00:40:24,079 --> 00:40:29,539
because they're designed to see the 60

00:40:27,829 --> 00:40:33,859
billion petitions and android phones

00:40:29,539 --> 00:40:35,539
have and they will go from a single

00:40:33,859 --> 00:40:37,039
kernel so if you screw up the kernel

00:40:35,539 --> 00:40:40,069
update you end up with a brick device

00:40:37,039 --> 00:40:42,529
where we try to have a you know standard

00:40:40,069 --> 00:40:44,209
fedora experience where if the kernel

00:40:42,529 --> 00:40:47,869
doesn't boot you reboot and you go to

00:40:44,209 --> 00:40:50,779
the previous one from a menu and so it

00:40:47,869 --> 00:40:53,959
does work I know of a number of people

00:40:50,779 --> 00:40:56,479
that have used it or use it for various

00:40:53,959 --> 00:40:58,910
different development purposes with the

00:40:56,479 --> 00:41:01,729
fedora it's not a particularly pretty

00:40:58,910 --> 00:41:05,589
experience but if you like all the user

00:41:01,729 --> 00:41:08,479
space stuff is there and work it's not a

00:41:05,589 --> 00:41:12,529
device form factor that we really have

00:41:08,479 --> 00:41:14,690
an interest or time because the amount

00:41:12,529 --> 00:41:18,079
of people working on the arm hardware

00:41:14,690 --> 00:41:22,699
side of things is a handful and so we're

00:41:18,079 --> 00:41:25,339
focusing on things like the SVC s and

00:41:22,699 --> 00:41:28,219
IOT devices and stuff like that

00:41:25,339 --> 00:41:29,959
now the Raspberry Pi that people are

00:41:28,219 --> 00:41:33,829
interested in that ochite that they can

00:41:29,959 --> 00:41:36,069
like get and we can support easily in a

00:41:33,829 --> 00:41:36,069
very

00:41:36,079 --> 00:41:42,319
and yeah so yes you can run it use the

00:41:39,740 --> 00:41:46,089
space they're quite happily the

00:41:42,319 --> 00:41:46,089
bootloader kernel is a bit of a mess

00:41:54,940 --> 00:41:57,940
yeah

00:42:05,870 --> 00:42:12,740
but I mean that yeah I mean the Nexus 7

00:42:09,440 --> 00:42:16,550
is a device where there's a number of

00:42:12,740 --> 00:42:21,440
kernel groups that are concentrating on

00:42:16,550 --> 00:42:23,870
getting that support upstream so that it

00:42:21,440 --> 00:42:29,620
can be used as a completely open-source

00:42:23,870 --> 00:42:33,020
Android AO AO SP development environment

00:42:29,620 --> 00:42:35,390
but its focus around the Android and

00:42:33,020 --> 00:42:37,700
completely open source upstream kernel

00:42:35,390 --> 00:42:40,250
so that they can test for things like

00:42:37,700 --> 00:42:43,010
kernel regressions and stuff like that I

00:42:40,250 --> 00:42:47,030
think at the moment they need around 30

00:42:43,010 --> 00:42:48,920
or 40 patches on top of a kernel but I

00:42:47,030 --> 00:42:50,990
think if you wanted to use fedora on

00:42:48,920 --> 00:42:52,790
that you probably need very few of those

00:42:50,990 --> 00:42:54,290
patches because the vast majority of

00:42:52,790 --> 00:42:58,850
those patches are owned at the Android

00:42:54,290 --> 00:43:00,500
side of stuff so but it's not something

00:42:58,850 --> 00:43:02,960
that we really have time to focus on

00:43:00,500 --> 00:43:04,760
because it's not really a primary user

00:43:02,960 --> 00:43:07,420
experience that we support anywhere else

00:43:04,760 --> 00:43:07,420
in the project

00:43:10,430 --> 00:43:14,230
I think we've exhausted the questions

00:43:14,260 --> 00:43:17,260

YouTube URL: https://www.youtube.com/watch?v=JPP3OIHyYgo


