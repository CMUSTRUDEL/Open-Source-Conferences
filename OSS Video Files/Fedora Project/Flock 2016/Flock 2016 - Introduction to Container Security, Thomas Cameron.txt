Title: Flock 2016 - Introduction to Container Security, Thomas Cameron
Publication date: 2016-08-21
Playlist: Flock 2016
Description: 
	Application containerization is one of the coolest technologies in IT. It solves numerous problems, allows for incredible application density, and can really increase flexibility and responsiveness. There are some misconceptions about container security, though. In this session, Red Hat’s global solutions architect leader, Thomas Cameron, will talk about the components of container security, some tips and tricks for planning a secure container environment, describe some “gotchas” about containers, and debunk some of the security myths about containers.

https://flock2016.sched.org/event/6yoz/introduction-to-container-security

This video was recorded at the annual Fedora contributor conference, Flock, in Kraków, Poland, from August 2-5, 2016. You can learn more about Flock at https://flocktofedora.org.

#FlockToFedora

Transcription: https://meetbot.fedoraproject.org/fedora-flock-matejko/2016-08-02/flock2016.2016-08-02-08.59.log.html
Captions: 
	00:00:01,639 --> 00:00:06,450
alright so I think that it is time to

00:00:05,100 --> 00:00:09,300
get started I'm showing that it is

00:00:06,450 --> 00:00:12,059
eleven o'clock welcome everybody my name

00:00:09,300 --> 00:00:15,179
is thomas cameron i am a global cloud

00:00:12,059 --> 00:00:16,350
strategy evangelist at red hat and today

00:00:15,179 --> 00:00:19,140
we're going to be talking about

00:00:16,350 --> 00:00:20,850
containers security I'm reusing a

00:00:19,140 --> 00:00:23,930
presentation that I used at da Kirk on

00:00:20,850 --> 00:00:26,430
this year because maroon all hotel and I

00:00:23,930 --> 00:00:28,320
collaborated on it and he filled in a

00:00:26,430 --> 00:00:30,960
lot of the gaps honestly that I had with

00:00:28,320 --> 00:00:32,579
my knowledge I am very much from the

00:00:30,960 --> 00:00:34,590
system administration systems

00:00:32,579 --> 00:00:36,500
engineering background but he is a

00:00:34,590 --> 00:00:39,300
developer and so I was able to

00:00:36,500 --> 00:00:41,250
shamelessly pick his Verhagen for some

00:00:39,300 --> 00:00:43,860
of the content here what would be

00:00:41,250 --> 00:00:46,559
talking about today is what are

00:00:43,860 --> 00:00:47,969
containers are actually I'm sorry a

00:00:46,559 --> 00:00:49,559
little bit about me and a little bit

00:00:47,969 --> 00:00:53,010
about red hat and then a little bit

00:00:49,559 --> 00:00:54,449
about where we're containers came from

00:00:53,010 --> 00:00:56,039
and what Red Hat has been doing with

00:00:54,449 --> 00:00:58,260
containers we'll talk about what

00:00:56,039 --> 00:01:00,539
containers are how they work we'll talk

00:00:58,260 --> 00:01:01,829
about what containers are not because I

00:01:00,539 --> 00:01:05,159
think there is still some confusion

00:01:01,829 --> 00:01:06,840
about when to use containers when you

00:01:05,159 --> 00:01:09,960
use virtualization whether the same

00:01:06,840 --> 00:01:12,330
thing and so on and then I'll talk about

00:01:09,960 --> 00:01:14,700
the components which make up container

00:01:12,330 --> 00:01:16,619
security we'll talk about Colonel

00:01:14,700 --> 00:01:18,600
namespaces we'll talk about linux

00:01:16,619 --> 00:01:20,640
control groups will talk about the

00:01:18,600 --> 00:01:23,310
docker Damon and how it works in the

00:01:20,640 --> 00:01:25,590
security that it provides and then we'll

00:01:23,310 --> 00:01:28,530
talk about linux kernel capabilities and

00:01:25,590 --> 00:01:30,689
security enhance Linux how it works why

00:01:28,530 --> 00:01:32,670
it matters and then I'll talk about a

00:01:30,689 --> 00:01:35,360
few tips and tricks with container

00:01:32,670 --> 00:01:39,780
security and then draw some conclusions

00:01:35,360 --> 00:01:41,070
so as far as who i am as i said my name

00:01:39,780 --> 00:01:43,619
is thomas cameron i'm a cloud strategy

00:01:41,070 --> 00:01:47,399
evangelist at red hat i've been working

00:01:43,619 --> 00:01:49,470
in information technology since 1993 the

00:01:47,399 --> 00:01:51,420
reason that i enjoy security is that i

00:01:49,470 --> 00:01:54,360
actually started my career out of school

00:01:51,420 --> 00:01:55,720
as a police officer I really enjoy law

00:01:54,360 --> 00:01:59,080
enforcement and foreign

00:01:55,720 --> 00:02:01,900
six and security so I'm kind of a kind

00:01:59,080 --> 00:02:05,350
of a weird hybrid I come from a security

00:02:01,900 --> 00:02:08,710
background but now my computer geek I've

00:02:05,350 --> 00:02:10,300
been with redhat since 2005 I am a red

00:02:08,710 --> 00:02:12,820
hat certified architect on my red hat

00:02:10,300 --> 00:02:15,280
certified security specialist and I have

00:02:12,820 --> 00:02:16,630
other certifications and I've been in IT

00:02:15,280 --> 00:02:18,580
for long enough that I actually have a

00:02:16,630 --> 00:02:21,310
very strong background in microsoft

00:02:18,580 --> 00:02:23,200
security in before that I was a novell

00:02:21,310 --> 00:02:25,480
certified netware engineer so I'm really

00:02:23,200 --> 00:02:29,770
dating myself there I remember i PX and

00:02:25,480 --> 00:02:32,740
SPX and i have spent a lot of time

00:02:29,770 --> 00:02:35,560
focusing on security in environments

00:02:32,740 --> 00:02:38,020
like financial services and retail and

00:02:35,560 --> 00:02:39,700
manufacturing and things like that so I

00:02:38,020 --> 00:02:41,470
certainly do not claim to know

00:02:39,700 --> 00:02:44,110
everything I've been at Red Hat for long

00:02:41,470 --> 00:02:45,820
enough to know that no matter how much I

00:02:44,110 --> 00:02:47,470
learned there's always somebody who

00:02:45,820 --> 00:02:50,170
knows a lot more than I do and I always

00:02:47,470 --> 00:02:52,090
have something to learn so let's talk a

00:02:50,170 --> 00:02:55,150
little bit about Red Hat and what we've

00:02:52,090 --> 00:02:56,350
been doing with containers Rena has

00:02:55,150 --> 00:02:58,840
actually been working on

00:02:56,350 --> 00:03:02,290
containerisation since 2010 are a little

00:02:58,840 --> 00:03:08,110
bit before we acquired a company in 2010

00:03:02,290 --> 00:03:11,650
called makara and makara makara was a a

00:03:08,110 --> 00:03:13,030
platform as a service company when we

00:03:11,650 --> 00:03:15,400
bought the car we liked what they were

00:03:13,030 --> 00:03:19,750
doing but we really we rewrote it and

00:03:15,400 --> 00:03:22,180
rebranded it as Red Hat openshift makara

00:03:19,750 --> 00:03:24,850
had technology that really was analogous

00:03:22,180 --> 00:03:26,920
to containers today except they called

00:03:24,850 --> 00:03:29,230
him cartridges those cartridges used

00:03:26,920 --> 00:03:31,330
security enhanced Linux they used Linux

00:03:29,230 --> 00:03:34,989
control groups and Colonel name spaces

00:03:31,330 --> 00:03:36,370
but what happened was that as as tends

00:03:34,989 --> 00:03:39,130
to happen in the open source community

00:03:36,370 --> 00:03:41,260
open source is really a meritocracy so

00:03:39,130 --> 00:03:43,090
even though we liked the technology that

00:03:41,260 --> 00:03:46,360
we started working with rhythmic are in

00:03:43,090 --> 00:03:49,989
about 2013 the the community and the

00:03:46,360 --> 00:03:51,700
industry really started showing that

00:03:49,989 --> 00:03:55,030
what docker was doing made a lot of

00:03:51,700 --> 00:03:56,680
sense so we rebranded openshift to use

00:03:55,030 --> 00:03:58,989
docker as an underlying cartridge

00:03:56,680 --> 00:04:01,120
technology and we started participating

00:03:58,989 --> 00:04:01,590
in the docker community and the last

00:04:01,120 --> 00:04:03,629
time I

00:04:01,590 --> 00:04:05,310
we are the number two contributor to the

00:04:03,629 --> 00:04:08,670
upstream docker projects we're very

00:04:05,310 --> 00:04:09,840
actively involved and that's not a book

00:04:08,670 --> 00:04:13,050
at Red Hat where the number two

00:04:09,840 --> 00:04:15,300
contributor it is a we recognize that we

00:04:13,050 --> 00:04:17,280
have a responsibility to the greater

00:04:15,300 --> 00:04:19,560
community to be good stewards of the

00:04:17,280 --> 00:04:21,870
code and so we contribute as much as we

00:04:19,560 --> 00:04:24,530
can upstream to make sure that we are

00:04:21,870 --> 00:04:27,600
being those good stewards of the code

00:04:24,530 --> 00:04:28,850
and docker as a company is actually

00:04:27,600 --> 00:04:31,080
doing some pretty incredible things

00:04:28,850 --> 00:04:34,260
they've been through multiple successful

00:04:31,080 --> 00:04:37,080
rounds of venture capital raising and

00:04:34,260 --> 00:04:39,930
companies like AB sarah and cisco and

00:04:37,080 --> 00:04:42,330
goldman sachs and intel and pivotal and

00:04:39,930 --> 00:04:44,760
also red hat are all on board with

00:04:42,330 --> 00:04:48,320
containers standardization with docker

00:04:44,760 --> 00:04:51,479
as a standard container format even

00:04:48,320 --> 00:04:58,650
Microsoft has announced that they will

00:04:51,479 --> 00:05:01,130
support docker formats so let's talk a

00:04:58,650 --> 00:05:03,780
little bit about what containers are

00:05:01,130 --> 00:05:06,270
containerization specifically docker is

00:05:03,780 --> 00:05:08,610
really just a technology that allows you

00:05:06,270 --> 00:05:10,080
to have applications whether their web

00:05:08,610 --> 00:05:12,720
servers for instance databases

00:05:10,080 --> 00:05:14,669
application servers to run abstract it

00:05:12,720 --> 00:05:16,770
from and in some isolation from the

00:05:14,669 --> 00:05:19,139
underlying operating system the docker

00:05:16,770 --> 00:05:21,690
service can launch containers regardless

00:05:19,139 --> 00:05:24,200
of the underlying operating system or

00:05:21,690 --> 00:05:26,340
the underlying denix linux distribution

00:05:24,200 --> 00:05:28,440
containers can do some amazing things

00:05:26,340 --> 00:05:31,110
they can provide they can drive very

00:05:28,440 --> 00:05:32,370
high levels of application density so

00:05:31,110 --> 00:05:35,010
you can run a whole lot of applications

00:05:32,370 --> 00:05:37,229
on a single machine because you don't

00:05:35,010 --> 00:05:39,210
have the overhead of doing full

00:05:37,229 --> 00:05:42,539
virtualization ah you know for every

00:05:39,210 --> 00:05:44,430
application Linux control groups also

00:05:42,539 --> 00:05:47,220
enable you to really maximize

00:05:44,430 --> 00:05:50,700
utilization a lot of times we think

00:05:47,220 --> 00:05:52,889
about control groups as stopping

00:05:50,700 --> 00:05:55,500
something from from taking too many

00:05:52,889 --> 00:05:57,450
resources but the counter to that is

00:05:55,500 --> 00:06:00,870
that Linux control groups also allow you

00:05:57,450 --> 00:06:02,409
to really manage utilization because I

00:06:00,870 --> 00:06:04,119
know that let's say

00:06:02,409 --> 00:06:06,039
got a system it's got 32 gigs of memory

00:06:04,119 --> 00:06:07,929
and let's say I'm going to grant just

00:06:06,039 --> 00:06:10,209
for a nice round number 1 gig of memory

00:06:07,929 --> 00:06:12,489
to all it to each of my applications

00:06:10,209 --> 00:06:14,499
that means that I know for sure that I

00:06:12,489 --> 00:06:15,789
can have at least 31 applications

00:06:14,499 --> 00:06:17,889
because I want to reserve some for the

00:06:15,789 --> 00:06:20,259
operating system but it allows you to be

00:06:17,889 --> 00:06:23,469
very granular in your control of the

00:06:20,259 --> 00:06:24,699
underlying systems now really we know

00:06:23,469 --> 00:06:26,259
that if we've got one gig per

00:06:24,699 --> 00:06:28,269
application not all applications are

00:06:26,259 --> 00:06:31,419
going to use that full big so the point

00:06:28,269 --> 00:06:34,239
is you can be very very precise in how

00:06:31,419 --> 00:06:37,179
you allocate resources using containers

00:06:34,239 --> 00:06:39,039
and the same container can run on

00:06:37,179 --> 00:06:40,809
different versions of Linux you can run

00:06:39,039 --> 00:06:43,149
you know in a boon to container on

00:06:40,809 --> 00:06:45,789
fedora or a fedora container on a bun to

00:06:43,149 --> 00:06:48,249
or a centos image on red hat enterprise

00:06:45,789 --> 00:06:51,219
linux it's very very flexible and it

00:06:48,249 --> 00:06:52,899
allows for the distribution of

00:06:51,219 --> 00:06:54,459
containers across pretty much any

00:06:52,899 --> 00:06:57,669
version of Linux you have as long as you

00:06:54,459 --> 00:06:59,169
got the right version of darker now that

00:06:57,669 --> 00:07:02,499
leads to the question what are

00:06:59,169 --> 00:07:05,800
containers not well containers are not

00:07:02,499 --> 00:07:07,929
the cure to all that ails you in the

00:07:05,800 --> 00:07:09,699
American West there was a joke about

00:07:07,929 --> 00:07:11,589
snake oil salesman that people would

00:07:09,699 --> 00:07:15,069
sell snake oil and say it'll cure

00:07:11,589 --> 00:07:18,759
everything from bad breath to cancer and

00:07:15,069 --> 00:07:21,449
so a lot of times I see people saying

00:07:18,759 --> 00:07:25,059
containers are the fix for everything

00:07:21,449 --> 00:07:26,769
maybe not maybe not there are a lot of

00:07:25,059 --> 00:07:28,389
things that containers can do but they

00:07:26,769 --> 00:07:31,989
are not a panacea they don't do

00:07:28,389 --> 00:07:34,300
everything containers are not yet a fit

00:07:31,989 --> 00:07:36,369
for every application out there there

00:07:34,300 --> 00:07:38,499
are application vendors who simply won't

00:07:36,369 --> 00:07:41,169
won't support their application in a

00:07:38,499 --> 00:07:42,369
container there are some applications

00:07:41,169 --> 00:07:43,779
which don't lend themselves to

00:07:42,369 --> 00:07:46,389
containerization if you have a really

00:07:43,779 --> 00:07:49,209
massive monolithic you know application

00:07:46,389 --> 00:07:51,610
or like a giant database or something

00:07:49,209 --> 00:07:56,619
like that they're not necessarily a good

00:07:51,610 --> 00:07:58,719
fit for containerization and containers

00:07:56,619 --> 00:08:00,729
are not virtualization I hear a lot of

00:07:58,719 --> 00:08:03,009
people making the comparison of

00:08:00,729 --> 00:08:05,129
containers to virtual machines really

00:08:03,009 --> 00:08:06,659
not the same I run containers on

00:08:05,129 --> 00:08:08,639
bare-metal operating system on this

00:08:06,659 --> 00:08:12,779
laptop all the time so it does not need

00:08:08,639 --> 00:08:14,459
to be virtualized so let's talk a little

00:08:12,779 --> 00:08:16,739
bit about some of the features of

00:08:14,459 --> 00:08:19,249
containerization the first one that I

00:08:16,739 --> 00:08:21,929
want to talk about is Colonel namespaces

00:08:19,249 --> 00:08:24,689
name spacing is just a way to make a

00:08:21,929 --> 00:08:26,519
global resource appear to be unique and

00:08:24,689 --> 00:08:29,519
isolated inside of a process or to a

00:08:26,519 --> 00:08:31,259
process the container are the namespaces

00:08:29,519 --> 00:08:33,149
that the Linux kernel can manage include

00:08:31,259 --> 00:08:36,120
mountain namespaces process ID

00:08:33,149 --> 00:08:37,639
namespaces unix time sharing namespaces

00:08:36,120 --> 00:08:41,009
IPC inter-process communication

00:08:37,639 --> 00:08:44,339
namespaces network namespaces and user

00:08:41,009 --> 00:08:47,160
name spaces all processes belong to

00:08:44,339 --> 00:08:50,639
exactly one each of these namespaces so

00:08:47,160 --> 00:08:52,380
a process that calls unshare that calls

00:08:50,639 --> 00:08:54,449
us the unshared system call with clone

00:08:52,380 --> 00:08:57,240
new arguments will get its own isolated

00:08:54,449 --> 00:08:59,279
instance of a namespace a clone or fork

00:08:57,240 --> 00:09:02,100
system call can also be used to spawn a

00:08:59,279 --> 00:09:03,779
process in its own namespace so let's

00:09:02,100 --> 00:09:06,680
drill down a little bit into what each

00:09:03,779 --> 00:09:10,230
of these namespaces mean so mount

00:09:06,680 --> 00:09:11,970
namespaces just a collection of file

00:09:10,230 --> 00:09:14,550
system mounts that make up a processes

00:09:11,970 --> 00:09:16,199
view of the filesystem hierarchy the

00:09:14,550 --> 00:09:18,810
root of a container is made up of the

00:09:16,199 --> 00:09:21,480
files packaged by the container author

00:09:18,810 --> 00:09:23,069
so when you create your container you're

00:09:21,480 --> 00:09:25,709
going to you know have a root file

00:09:23,069 --> 00:09:27,180
system for instance and then other

00:09:25,709 --> 00:09:28,860
mounts can be added to the mountain

00:09:27,180 --> 00:09:31,920
namespaces of the container for security

00:09:28,860 --> 00:09:33,389
and convenience / proc for instance is

00:09:31,920 --> 00:09:35,399
mounted so that the containers can see

00:09:33,389 --> 00:09:38,100
the process is running inside of its own

00:09:35,399 --> 00:09:39,839
pin namespace so when you look at the

00:09:38,100 --> 00:09:42,480
Prague namespace inside of a container

00:09:39,839 --> 00:09:44,839
you only see those processes for that

00:09:42,480 --> 00:09:49,470
container not processes outside of it

00:09:44,839 --> 00:09:52,199
and then things like / proc / pts /p TMX

00:09:49,470 --> 00:09:54,899
is mounted so that the container gets to

00:09:52,199 --> 00:09:58,079
spawn its own isolated pseudo terminals

00:09:54,899 --> 00:10:00,360
and then some locations like proc cake

00:09:58,079 --> 00:10:02,009
or are masked over with them know so

00:10:00,360 --> 00:10:04,560
that containers cannot access or all

00:10:02,009 --> 00:10:06,899
memory you don't want to have containers

00:10:04,560 --> 00:10:08,579
being able to get to any memory outside

00:10:06,899 --> 00:10:11,850
of just that container namespace and

00:10:08,579 --> 00:10:13,209
then some locations such as praxis or

00:10:11,850 --> 00:10:15,100
made read-only as

00:10:13,209 --> 00:10:18,309
fess isn't really completely virtualized

00:10:15,100 --> 00:10:20,649
yet and so I've got an example here and

00:10:18,309 --> 00:10:24,369
I'm sorry this is kind of a dense but

00:10:20,649 --> 00:10:27,819
you can see that the that crazy long

00:10:24,369 --> 00:10:29,679
uuid from the parent are from the host

00:10:27,819 --> 00:10:31,779
that the container is running on gets

00:10:29,679 --> 00:10:34,149
mounted as root and then you can see

00:10:31,779 --> 00:10:35,920
that proc is mounted in devs all of

00:10:34,149 --> 00:10:37,480
these are mounted and they're very

00:10:35,920 --> 00:10:39,459
similar to what you would see in the

00:10:37,480 --> 00:10:42,339
host operating system but these are

00:10:39,459 --> 00:10:44,920
isolated so that inside of the container

00:10:42,339 --> 00:10:47,379
you only see those file systems which

00:10:44,920 --> 00:10:49,660
are abstracted through the mountain

00:10:47,379 --> 00:10:51,850
namespace that's a security thing we

00:10:49,660 --> 00:10:53,499
don't necessarily want the container to

00:10:51,850 --> 00:10:56,350
be able to see anything that's on the

00:10:53,499 --> 00:10:59,050
host operating system unless you mount a

00:10:56,350 --> 00:11:01,689
file system from the host within the

00:10:59,050 --> 00:11:03,819
guest at runtime so when you do dogger

00:11:01,689 --> 00:11:06,160
run dash IT and you can do you can mount

00:11:03,819 --> 00:11:08,410
you know VAR dub dub dub HTML for

00:11:06,160 --> 00:11:10,990
instance or something like that but the

00:11:08,410 --> 00:11:12,759
whole point is you don't want the

00:11:10,990 --> 00:11:14,079
container to see the contents of the

00:11:12,759 --> 00:11:16,300
host operating system unless you

00:11:14,079 --> 00:11:19,139
explicitly allow it the mountain

00:11:16,300 --> 00:11:21,699
namespaces is how we do that abstraction

00:11:19,139 --> 00:11:24,129
process ID themes faces or pit

00:11:21,699 --> 00:11:26,379
namespaces just isolate the pin numbers

00:11:24,129 --> 00:11:29,139
inside of the container from the pit

00:11:26,379 --> 00:11:31,959
numbers on the host so for instance I've

00:11:29,139 --> 00:11:33,730
got an example here where I do fedora or

00:11:31,959 --> 00:11:35,679
daughter run a chai tea fedora and I

00:11:33,730 --> 00:11:39,339
just run the bash command when I do a

00:11:35,679 --> 00:11:42,129
PSA X inside the container thinks that

00:11:39,339 --> 00:11:44,410
bash is process ID number one but we all

00:11:42,129 --> 00:11:47,199
know that that's not really process ID

00:11:44,410 --> 00:11:49,660
number one but process ID namespaces

00:11:47,199 --> 00:11:51,579
take that bash command right there and

00:11:49,660 --> 00:11:53,559
tell from tell inside of the container

00:11:51,579 --> 00:11:56,889
yeah it's number one that's your only

00:11:53,559 --> 00:12:01,809
only process where the reality is it's

00:11:56,889 --> 00:12:04,209
really process ID 18 596 on the host the

00:12:01,809 --> 00:12:06,490
whole point here again is we want the

00:12:04,209 --> 00:12:08,170
container to not have awareness of

00:12:06,490 --> 00:12:09,999
what's going on on the host so if

00:12:08,170 --> 00:12:12,160
something bad happens in the container

00:12:09,999 --> 00:12:14,259
it can only affect those process ideas

00:12:12,160 --> 00:12:19,089
which are abstracted or presented to

00:12:14,259 --> 00:12:23,150
that container user name spaces just map

00:12:19,089 --> 00:12:26,240
you IDs and G IDs so that inside

00:12:23,150 --> 00:12:28,010
container I can have a UID or a GID that

00:12:26,240 --> 00:12:29,900
appears inside the container to have

00:12:28,010 --> 00:12:31,610
root privileges and in fact does have

00:12:29,900 --> 00:12:33,680
root privileges inside of the container

00:12:31,610 --> 00:12:37,100
but they don't have root privileges

00:12:33,680 --> 00:12:42,740
outside or on the host so as an example

00:12:37,100 --> 00:12:45,890
here you can actually add like ranges if

00:12:42,740 --> 00:12:49,430
you want to and the challenge really

00:12:45,890 --> 00:12:51,020
with user name spaces is that are one of

00:12:49,430 --> 00:12:53,560
the benefits of how to use your name

00:12:51,020 --> 00:12:56,600
spaces is that if I spin up 50

00:12:53,560 --> 00:12:59,030
containers inside of each of those 50

00:12:56,600 --> 00:13:03,080
containers there will be a uid 0 or root

00:12:59,030 --> 00:13:04,790
access but user name spaces or what's

00:13:03,080 --> 00:13:07,370
going to map that to the user that

00:13:04,790 --> 00:13:11,540
actually spawned that that container so

00:13:07,370 --> 00:13:13,490
again it's isolated and one of the

00:13:11,540 --> 00:13:15,800
things that brunel was talking about

00:13:13,490 --> 00:13:17,810
when we presented this is layer sharing

00:13:15,800 --> 00:13:20,840
uh-huh we're still doing some work on

00:13:17,810 --> 00:13:23,210
that the ability to do sharing of you

00:13:20,840 --> 00:13:24,740
know the layers within containers and it

00:13:23,210 --> 00:13:28,370
still needs to have some work done in

00:13:24,740 --> 00:13:31,070
the VFS virtual file system so he did

00:13:28,370 --> 00:13:34,700
this example where he used Asiata tools

00:13:31,070 --> 00:13:37,720
generate uuid mappings and so basically

00:13:34,700 --> 00:13:40,400
what you can see is he runs the run c

00:13:37,720 --> 00:13:43,040
command just runs the test command and

00:13:40,400 --> 00:13:46,340
you can see that the mapping of that you

00:13:43,040 --> 00:13:49,010
id0 inside of the guest is mapped to uie

00:13:46,340 --> 00:13:52,820
1000 or a regular user account outside

00:13:49,010 --> 00:13:55,310
so that's how you can have root access

00:13:52,820 --> 00:13:57,020
inside of your container but still not

00:13:55,310 --> 00:14:00,020
be able to compromise the host that it's

00:13:57,020 --> 00:14:01,670
running on and again this is all based

00:14:00,020 --> 00:14:03,620
on I mean this is all with an eye

00:14:01,670 --> 00:14:05,150
towards security we want to give you as

00:14:03,620 --> 00:14:07,280
many privileges inside of the container

00:14:05,150 --> 00:14:08,780
is you need to do what you need to do

00:14:07,280 --> 00:14:10,850
but we don't want you to be able to

00:14:08,780 --> 00:14:13,690
compromise the hosts inter-process

00:14:10,850 --> 00:14:18,170
communication namespaces same concept

00:14:13,690 --> 00:14:20,360
it's just masking I pcs so that within

00:14:18,170 --> 00:14:22,550
the container the table of inter-process

00:14:20,360 --> 00:14:24,320
communications that you see appears to

00:14:22,550 --> 00:14:26,000
be global but it's really not it's just

00:14:24,320 --> 00:14:29,000
those within your container so in this

00:14:26,000 --> 00:14:30,750
case I run a bash instance on a fedora

00:14:29,000 --> 00:14:33,030
container I run IPC

00:14:30,750 --> 00:14:34,560
and according to what's going on inside

00:14:33,030 --> 00:14:37,290
the gear I don't have any interprocess

00:14:34,560 --> 00:14:39,480
communications mapped whereas the truth

00:14:37,290 --> 00:14:42,420
is on the host that's running that

00:14:39,480 --> 00:14:45,870
container you know I've got zillions of

00:14:42,420 --> 00:14:48,090
them so I pc again we just want to make

00:14:45,870 --> 00:14:50,160
sure that we've isolated what's going on

00:14:48,090 --> 00:14:51,750
inside of the container so that it can't

00:14:50,160 --> 00:14:54,510
see what's going on on the host so we

00:14:51,750 --> 00:14:56,490
can't have any of that interaction now

00:14:54,510 --> 00:14:58,170
changing gears a little bit talking

00:14:56,490 --> 00:15:01,200
about control groups Linux control

00:14:58,170 --> 00:15:02,640
groups essentially control groups are

00:15:01,200 --> 00:15:06,420
just a mechanism for aggregating or

00:15:02,640 --> 00:15:08,040
partitioning sets of tasks including

00:15:06,420 --> 00:15:10,140
their children into hierarchical groups

00:15:08,040 --> 00:15:13,650
of specialized behavior so basically

00:15:10,140 --> 00:15:17,760
that allows system resources like CPU or

00:15:13,650 --> 00:15:19,860
memory disk i/o network i/o etc into a

00:15:17,760 --> 00:15:22,500
control group and you can assign limits

00:15:19,860 --> 00:15:24,990
to that the big benefit of that is that

00:15:22,500 --> 00:15:27,270
if something happens to a process that's

00:15:24,990 --> 00:15:29,340
inside of a control group because we

00:15:27,270 --> 00:15:31,020
have limits on that control group even

00:15:29,340 --> 00:15:33,030
if somebody does something really fancy

00:15:31,020 --> 00:15:36,390
you know every year when we get a next

00:15:33,030 --> 00:15:38,370
our next group of graduates they're like

00:15:36,390 --> 00:15:42,390
oh I developed this cool attack called a

00:15:38,370 --> 00:15:44,520
fork bomb yeah it's not very creative

00:15:42,390 --> 00:15:47,089
people have done it before but the cool

00:15:44,520 --> 00:15:49,530
thing is if you run that within a

00:15:47,089 --> 00:15:51,450
control group you might exhaust the

00:15:49,530 --> 00:15:52,710
resources for that one control group

00:15:51,450 --> 00:15:56,520
that you're not going to take down the

00:15:52,710 --> 00:15:58,260
rest of the system so even if a

00:15:56,520 --> 00:15:59,790
container is compromised or even if you

00:15:58,260 --> 00:16:01,110
just have poorly written code right

00:15:59,790 --> 00:16:03,720
because we're humans we make mistakes

00:16:01,110 --> 00:16:06,600
people are going to do silly things that

00:16:03,720 --> 00:16:09,300
misbehaved container should not be able

00:16:06,600 --> 00:16:13,650
to impact the host or other containers

00:16:09,300 --> 00:16:15,630
so if I do a system control status dr

00:16:13,650 --> 00:16:17,460
dot service i'll get to control group

00:16:15,630 --> 00:16:19,380
and slice information so this is what

00:16:17,460 --> 00:16:21,600
that looked like so I just do system

00:16:19,380 --> 00:16:23,910
control status docker and I can see

00:16:21,600 --> 00:16:27,120
where it's running and you can also see

00:16:23,910 --> 00:16:28,770
what control groups including the fact

00:16:27,120 --> 00:16:30,930
that that is nesting Linux enabled

00:16:28,770 --> 00:16:32,550
control group that the master dr.

00:16:30,930 --> 00:16:34,830
service is running in and then each

00:16:32,550 --> 00:16:38,100
docker instance after that we'll also

00:16:34,830 --> 00:16:40,140
get its own control group so you can

00:16:38,100 --> 00:16:41,730
navigate through the process see groups

00:16:40,140 --> 00:16:42,810
to their directory to see what resources

00:16:41,730 --> 00:16:44,730
are allocated

00:16:42,810 --> 00:16:45,900
there are over 8,500 of them so it

00:16:44,730 --> 00:16:47,790
doesn't make sense for me to try to go

00:16:45,900 --> 00:16:49,650
into all of them but like I said you can

00:16:47,790 --> 00:16:53,250
go in there you can see every container

00:16:49,650 --> 00:16:55,770
every process and if you do like I did

00:16:53,250 --> 00:16:57,630
it find command and piped into wcl

00:16:55,770 --> 00:16:59,700
there's over 8,500 just on my little

00:16:57,630 --> 00:17:02,730
laptop so you can imagine that it gets

00:16:59,700 --> 00:17:06,180
pretty crazy now what I did in this

00:17:02,730 --> 00:17:08,939
example was I did dr. run IT and I'm

00:17:06,180 --> 00:17:10,980
limited to only a hundred megs of memory

00:17:08,939 --> 00:17:15,089
an instance of a fedora container

00:17:10,980 --> 00:17:18,900
running back and so you can see that if

00:17:15,089 --> 00:17:20,520
i look at proc 1c group i can see all of

00:17:18,900 --> 00:17:23,579
the various control groups and the

00:17:20,520 --> 00:17:25,620
slices that are allocated to that

00:17:23,579 --> 00:17:28,800
container you see it they're all roughly

00:17:25,620 --> 00:17:31,080
that I mean it's all the same scope but

00:17:28,800 --> 00:17:33,900
the cool thing about this is that if i

00:17:31,080 --> 00:17:35,610
look at memory limit and bytes for

00:17:33,900 --> 00:17:37,380
instance i can see what my memory limit

00:17:35,610 --> 00:17:39,480
is i've only got 100 megs of memory

00:17:37,380 --> 00:17:43,680
available to that container and in this

00:17:39,480 --> 00:17:45,780
case what i did was i I said basically i

00:17:43,680 --> 00:17:49,170
did a fork bomb inside of my container

00:17:45,780 --> 00:17:51,780
and so essentially what happens is after

00:17:49,170 --> 00:17:54,750
a very limited amount of time that that

00:17:51,780 --> 00:17:57,120
docker image dies and it exits back out

00:17:54,750 --> 00:17:58,380
to a command prompt so essentially even

00:17:57,120 --> 00:17:59,520
though i did a fork bomb and oh my god

00:17:58,380 --> 00:18:01,890
i'm going to take down the whole system

00:17:59,520 --> 00:18:04,650
now what winds up happening is if you

00:18:01,890 --> 00:18:06,900
look in the log file the outer memory

00:18:04,650 --> 00:18:09,570
killer gets invoked for that one

00:18:06,900 --> 00:18:11,550
container so the nice thing is we kill

00:18:09,570 --> 00:18:13,710
that container the rest of the operating

00:18:11,550 --> 00:18:20,940
system is unaffected so that's what that

00:18:13,710 --> 00:18:22,860
allows you to do I'm sorry we will give

00:18:20,940 --> 00:18:25,020
you the gun we will tell you where your

00:18:22,860 --> 00:18:28,770
foot is what you do after that is up to

00:18:25,020 --> 00:18:32,700
you huh that's interesting i lost the

00:18:28,770 --> 00:18:34,470
image hmm

00:18:32,700 --> 00:18:38,150
there was a pretty picture there we're

00:18:34,470 --> 00:18:40,080
going to move on alright so moving on to

00:18:38,150 --> 00:18:42,420
changing gears a little bit the dr.

00:18:40,080 --> 00:18:44,190
Damon itself the dr. Damon is

00:18:42,420 --> 00:18:46,770
responsible for managing his control

00:18:44,190 --> 00:18:51,660
groups for orchestrating namespaces and

00:18:46,770 --> 00:18:54,510
so on so that you can run images using

00:18:51,660 --> 00:18:56,490
the dr. Damon now docker because we are

00:18:54,510 --> 00:18:58,440
doing things like accessing network and

00:18:56,490 --> 00:19:00,620
storage and things like that does run

00:18:58,440 --> 00:19:03,540
with root privileges so be aware of that

00:19:00,620 --> 00:19:06,630
there are some considerations for

00:19:03,540 --> 00:19:09,900
running docker only allow trusted users

00:19:06,630 --> 00:19:11,220
to run docker older docker documentation

00:19:09,900 --> 00:19:14,040
like when I first started playing with

00:19:11,220 --> 00:19:15,870
docker had you add a user to the docker

00:19:14,040 --> 00:19:18,270
group so you could spin up docker

00:19:15,870 --> 00:19:20,040
instances a regular user at Red Hat we

00:19:18,270 --> 00:19:21,240
don't allow regular users and running

00:19:20,040 --> 00:19:23,100
docker so you have to give them

00:19:21,240 --> 00:19:26,220
privileges either through sudu or some

00:19:23,100 --> 00:19:28,800
other mechanism only delegate the the

00:19:26,220 --> 00:19:31,320
ability to run docker images to trusted

00:19:28,800 --> 00:19:32,540
users and remember they mount the host

00:19:31,320 --> 00:19:35,010
file systems in their container

00:19:32,540 --> 00:19:37,440
potentially with root privileges so just

00:19:35,010 --> 00:19:40,350
be aware of that if you are using the

00:19:37,440 --> 00:19:43,350
rest api to manage docker which is very

00:19:40,350 --> 00:19:45,800
very common make sure that you are using

00:19:43,350 --> 00:19:49,470
the latest versions of all the docker

00:19:45,800 --> 00:19:51,030
software don't don't have any

00:19:49,470 --> 00:19:53,220
vulnerabilities expose in other words

00:19:51,030 --> 00:19:54,530
keep your systems up to date make sure

00:19:53,220 --> 00:19:58,590
that you have strong authentication

00:19:54,530 --> 00:20:01,730
preferably including either only VPN or

00:19:58,590 --> 00:20:04,500
using TLS or SSL or something like that

00:20:01,730 --> 00:20:06,240
what is going on with my images that's

00:20:04,500 --> 00:20:08,720
really weird I promise this work is just

00:20:06,240 --> 00:20:08,720
a little while ago

00:20:10,419 --> 00:20:16,809
room so we're going to talk about linux

00:20:15,340 --> 00:20:19,239
kernel capabilities I'm not sure what

00:20:16,809 --> 00:20:21,429
that text got all wonky so we're going

00:20:19,239 --> 00:20:23,440
to change change gears a little bit and

00:20:21,429 --> 00:20:26,230
talk about Linux capabilities so

00:20:23,440 --> 00:20:28,059
historically the root user had the

00:20:26,230 --> 00:20:29,889
ability to do anything once you have

00:20:28,059 --> 00:20:32,529
root privileges you can have complete

00:20:29,889 --> 00:20:34,989
access to the system but linux

00:20:32,529 --> 00:20:37,389
capabilities breaks root privileges in

00:20:34,989 --> 00:20:39,730
238 distinct controls that can be

00:20:37,389 --> 00:20:41,489
enabled or disabled independently this

00:20:39,730 --> 00:20:45,519
allows one to grant only those

00:20:41,489 --> 00:20:48,460
privileges required for somebody to do a

00:20:45,519 --> 00:20:50,470
job whether it's a task or logging in or

00:20:48,460 --> 00:20:53,799
whatever but the cool thing about Linux

00:20:50,470 --> 00:20:56,919
capabilities is you can use them to take

00:20:53,799 --> 00:20:59,379
away privileges that the root user has

00:20:56,919 --> 00:21:01,710
but you can also use Linux capabilities

00:20:59,379 --> 00:21:04,480
to grant privileges to a non root user

00:21:01,710 --> 00:21:07,710
for instance you could do something like

00:21:04,480 --> 00:21:11,169
say a regular user can bind to a

00:21:07,710 --> 00:21:12,249
privilege for to port under 1024 so

00:21:11,169 --> 00:21:14,289
there are a lot of neat things that you

00:21:12,249 --> 00:21:15,970
can do with Linux capabilities the

00:21:14,289 --> 00:21:18,129
default list is a minimal list that

00:21:15,970 --> 00:21:20,799
works for most applications there is a

00:21:18,129 --> 00:21:24,730
catch-all capability called capability

00:21:20,799 --> 00:21:26,739
sysadmin with docker we drop that

00:21:24,730 --> 00:21:28,119
because that is kind of a catch-all it's

00:21:26,739 --> 00:21:29,769
like well I'm not sure where this

00:21:28,119 --> 00:21:31,570
capability should fit in with the rest

00:21:29,769 --> 00:21:34,029
of routes privileges so I'm just going

00:21:31,570 --> 00:21:36,879
to put it in capsis admin so because

00:21:34,029 --> 00:21:39,039
that is a catch-all we disallow are we

00:21:36,879 --> 00:21:41,379
disabled those capabilities for docker

00:21:39,039 --> 00:21:43,059
containers the best practice really is

00:21:41,379 --> 00:21:45,609
to audit and drop all the capabilities

00:21:43,059 --> 00:21:47,859
that aren't actually used by the

00:21:45,609 --> 00:21:49,779
container so unless you explicitly have

00:21:47,859 --> 00:21:57,549
a need to bind to a port or something

00:21:49,779 --> 00:21:59,440
like that don't allow that yes sir you

00:21:57,549 --> 00:22:01,029
can you can do it programmatically or

00:21:59,440 --> 00:22:02,619
you can also just kind of look at it

00:22:01,029 --> 00:22:04,539
from a common-sense perspective like

00:22:02,619 --> 00:22:06,999
take a look and what is my application

00:22:04,539 --> 00:22:08,499
doing if I don't have a need to bind to

00:22:06,999 --> 00:22:11,379
a privilege for it or if I don't have a

00:22:08,499 --> 00:22:12,789
need to manipulate file systems or

00:22:11,379 --> 00:22:15,009
something like that you can actually

00:22:12,789 --> 00:22:17,320
drop those privileges on the command

00:22:15,009 --> 00:22:20,590
line or if you look this is

00:22:17,320 --> 00:22:24,399
actually the default template for docker

00:22:20,590 --> 00:22:27,460
and this shows the privileges that are

00:22:24,399 --> 00:22:29,169
allowed and then also it shows like name

00:22:27,460 --> 00:22:32,130
spaces that are allowed as well so you

00:22:29,169 --> 00:22:35,889
can see this programmatically yes sir

00:22:32,130 --> 00:22:37,509
okay um so you can you can see what

00:22:35,889 --> 00:22:39,909
privileges are enabled by default and

00:22:37,509 --> 00:22:42,190
then you can also use security tools you

00:22:39,909 --> 00:22:44,380
can either run like estres against it or

00:22:42,190 --> 00:22:45,639
you can use whatever your whatever

00:22:44,380 --> 00:22:49,000
auditing tools you're most familiar with

00:22:45,639 --> 00:22:50,529
to see sort of what calls are being made

00:22:49,000 --> 00:22:53,049
and if you don't have a specific need

00:22:50,529 --> 00:22:54,929
for you can disallow it so this is when

00:22:53,049 --> 00:22:57,850
you say it's a catch-all does it include

00:22:54,929 --> 00:23:01,809
some of these other capabilities or is

00:22:57,850 --> 00:23:03,639
it capabilities not it is only those

00:23:01,809 --> 00:23:06,250
capabilities which don't fit into one of

00:23:03,639 --> 00:23:12,309
those other 38 categories so if I give

00:23:06,250 --> 00:23:13,600
someone Susan it doesn't right right at

00:23:12,309 --> 00:23:15,340
that point you would actually use to

00:23:13,600 --> 00:23:17,409
need to grant them the Linux

00:23:15,340 --> 00:23:21,940
capabilities for I think it's called net

00:23:17,409 --> 00:23:25,409
bind cap net admin yeah yeah yeah so

00:23:21,940 --> 00:23:29,169
yeah so again it's kind of a catch-all

00:23:25,409 --> 00:23:30,700
and there's a ton of stuff in caps this

00:23:29,169 --> 00:23:33,309
admin that's like just random stuff that

00:23:30,700 --> 00:23:35,259
didn't fit anywhere else so yeah so

00:23:33,309 --> 00:23:37,059
let's talk a little bit about security

00:23:35,259 --> 00:23:39,580
enhance Linux oh that's cute Linux

00:23:37,059 --> 00:23:41,259
capabilities security enhance Linux is a

00:23:39,580 --> 00:23:43,269
mandatory access control system

00:23:41,259 --> 00:23:46,179
processes files memory network

00:23:43,269 --> 00:23:49,750
interfaces and so on all have selinux

00:23:46,179 --> 00:23:52,149
labels and there is a policy on how

00:23:49,750 --> 00:23:53,889
those processes actually how the labels

00:23:52,149 --> 00:23:56,590
can interact with each other that that

00:23:53,889 --> 00:23:59,350
part of that policy is administratively

00:23:56,590 --> 00:24:01,509
set and fixed the policy will determine

00:23:59,350 --> 00:24:04,590
how process can interact with files with

00:24:01,509 --> 00:24:07,929
other processes network ports and so on

00:24:04,590 --> 00:24:10,330
and selinux is primarily concerned or at

00:24:07,929 --> 00:24:12,759
least for the the context of this

00:24:10,330 --> 00:24:15,789
presentation is really concerned with

00:24:12,759 --> 00:24:17,679
labeling and type enforcement for let's

00:24:15,789 --> 00:24:21,309
say we have a mythical service called

00:24:17,679 --> 00:24:24,669
the food service the executable on this

00:24:21,309 --> 00:24:25,270
might have the label foo exacty or

00:24:24,669 --> 00:24:28,180
flu-like

00:24:25,270 --> 00:24:30,910
executable type the startup script might

00:24:28,180 --> 00:24:33,790
be food config type the log files might

00:24:30,910 --> 00:24:36,820
be fool aughh type the data might have

00:24:33,790 --> 00:24:38,530
the label food data type when food is

00:24:36,820 --> 00:24:41,410
running the process and memory would

00:24:38,530 --> 00:24:44,470
probably have a label food type so type

00:24:41,410 --> 00:24:46,450
enforcement is just the rules that say

00:24:44,470 --> 00:24:48,850
that when a process running in the food

00:24:46,450 --> 00:24:51,340
type context tries to access a file on

00:24:48,850 --> 00:24:53,770
the file system with food config type or

00:24:51,340 --> 00:24:55,660
food data type that access would be

00:24:53,770 --> 00:24:57,340
allowed and that makes sense right you

00:24:55,660 --> 00:25:00,430
want the food process to be able to read

00:24:57,340 --> 00:25:02,590
its config files and its data when the

00:25:00,430 --> 00:25:05,260
process food type tries to write to a

00:25:02,590 --> 00:25:06,970
log file with foo log type that would be

00:25:05,260 --> 00:25:10,420
allowed as well that's part of the

00:25:06,970 --> 00:25:13,210
selinux policy any other access though

00:25:10,420 --> 00:25:17,590
unless explicitly allowed by policy is

00:25:13,210 --> 00:25:20,260
denied so if the food process running in

00:25:17,590 --> 00:25:22,330
the food type context Trice access for

00:25:20,260 --> 00:25:25,450
instance the directory slash home slash

00:25:22,330 --> 00:25:29,620
t cameron that has the user home

00:25:25,450 --> 00:25:32,590
directory type even if the permissions

00:25:29,620 --> 00:25:34,540
are wide open if that's not specifically

00:25:32,590 --> 00:25:36,820
allowed if the process running in the

00:25:34,540 --> 00:25:39,070
food type context tries to access a

00:25:36,820 --> 00:25:42,700
directory with the home der type it will

00:25:39,070 --> 00:25:44,950
be denied so selinux labels are stored

00:25:42,700 --> 00:25:47,080
on the file system as extended

00:25:44,950 --> 00:25:51,550
attributes or managed in memory by the

00:25:47,080 --> 00:25:54,610
kernel so selinux labels are stored in

00:25:51,550 --> 00:25:56,890
the format the selinux user the selinux

00:25:54,610 --> 00:25:58,630
role the selinux type and then

00:25:56,890 --> 00:26:02,380
multi-level and multi category security

00:25:58,630 --> 00:26:04,840
so for the this food service the full

00:26:02,380 --> 00:26:08,800
syntax of the running process might be

00:26:04,840 --> 00:26:14,710
user you object role food tight and then

00:26:08,800 --> 00:26:16,750
no additional MLS or MCS labels so when

00:26:14,710 --> 00:26:18,610
we talk about security enhance Linux the

00:26:16,750 --> 00:26:21,790
default policy for selinux is the

00:26:18,610 --> 00:26:24,400
targeted policy we don't use the selinux

00:26:21,790 --> 00:26:28,050
or user oh sorry the selinux user or

00:26:24,400 --> 00:26:32,970
role so we can ignore those we do use

00:26:28,050 --> 00:26:34,260
MLS and MCS for things like open

00:26:32,970 --> 00:26:36,600
containers which I'll talk about a

00:26:34,260 --> 00:26:38,760
little while but we really only care

00:26:36,600 --> 00:26:42,380
about the type because remember this is

00:26:38,760 --> 00:26:45,659
about type enforcement and the MCS label

00:26:42,380 --> 00:26:47,820
think of MCS just extra identifier and

00:26:45,659 --> 00:26:50,280
selinux for containers we can be super

00:26:47,820 --> 00:26:53,100
granular about which processes can

00:26:50,280 --> 00:26:55,620
access which other processes so even

00:26:53,100 --> 00:26:57,809
though these are identical its user you

00:26:55,620 --> 00:26:59,250
on both object roll them both we don't

00:26:57,809 --> 00:27:02,520
really care about those but it's the

00:26:59,250 --> 00:27:05,070
food type on both but because we have a

00:27:02,520 --> 00:27:07,799
difference in the MCS a multi category

00:27:05,070 --> 00:27:11,580
security label those are according to

00:27:07,799 --> 00:27:14,220
selinux totally different so if I have

00:27:11,580 --> 00:27:16,799
something that's running in C 0 vs see

00:27:14,220 --> 00:27:18,360
one and somebody compromises c 0 and

00:27:16,799 --> 00:27:21,900
tries to attack the next container over

00:27:18,360 --> 00:27:23,220
that's running with c1 or c2 c3 selinux

00:27:21,900 --> 00:27:24,900
will not allow that access because

00:27:23,220 --> 00:27:28,140
according to st linux those are totally

00:27:24,900 --> 00:27:30,059
different type enforcement just says

00:27:28,140 --> 00:27:32,250
that the process with that first label

00:27:30,059 --> 00:27:34,559
is different from the process with the

00:27:32,250 --> 00:27:36,990
second label so policy would prevent

00:27:34,559 --> 00:27:39,210
them from interacting there's no policy

00:27:36,990 --> 00:27:41,429
allowing a process running with those

00:27:39,210 --> 00:27:44,370
labels to access the file system unless

00:27:41,429 --> 00:27:47,100
it is labeled explicitly with either

00:27:44,370 --> 00:27:49,559
food config type or food content type or

00:27:47,100 --> 00:27:51,480
another defined label so neither of

00:27:49,559 --> 00:27:54,480
those processes would be able to access

00:27:51,480 --> 00:27:55,830
say it's a shadow or the home

00:27:54,480 --> 00:27:58,470
directories or anything like that

00:27:55,830 --> 00:28:02,730
because that selinux label is so

00:27:58,470 --> 00:28:04,289
different okay so on a standalone system

00:28:02,730 --> 00:28:06,990
running docker all of the containers run

00:28:04,289 --> 00:28:09,900
in the same context by default an open

00:28:06,990 --> 00:28:12,299
shift though every container gets spun

00:28:09,900 --> 00:28:15,240
up with a separate context so you have

00:28:12,299 --> 00:28:19,010
you know the open shift type c0 c1 c2 c3

00:28:15,240 --> 00:28:21,210
c4 c5 and so on so even if somebody were

00:28:19,010 --> 00:28:23,549
able to gain access to the doctor

00:28:21,210 --> 00:28:25,500
container process on the host selinux

00:28:23,549 --> 00:28:28,980
would prevent them from attacking other

00:28:25,500 --> 00:28:30,390
containers or the host itself so in the

00:28:28,980 --> 00:28:33,120
following example I'll show you what

00:28:30,390 --> 00:28:36,929
this looks like what I do is I emulate

00:28:33,120 --> 00:28:38,580
somebody who exploits a container i use

00:28:36,929 --> 00:28:42,480
run con which changes the

00:28:38,580 --> 00:28:44,700
a changes what context i'm running in to

00:28:42,480 --> 00:28:47,039
set my context to that of an open ship

00:28:44,700 --> 00:28:48,750
container i attempt to access the etsy

00:28:47,039 --> 00:28:51,000
shadow file try to write up a file

00:28:48,750 --> 00:28:53,549
system try to read from a home directory

00:28:51,000 --> 00:28:58,409
and you'll see that even though i am

00:28:53,549 --> 00:29:02,370
running as root i get blocked so here

00:28:58,409 --> 00:29:05,010
I'm running as root right and then what

00:29:02,370 --> 00:29:08,010
I do is I run ID command and I see that

00:29:05,010 --> 00:29:10,710
I'm running in the unconfined space now

00:29:08,010 --> 00:29:13,260
i use the run con command to change to

00:29:10,710 --> 00:29:15,899
an unconfined user system role as the

00:29:13,260 --> 00:29:18,330
open shift type remember that selinux is

00:29:15,899 --> 00:29:19,710
about type enforcement and labeling so

00:29:18,330 --> 00:29:22,889
I'm going to run is that open shift type

00:29:19,710 --> 00:29:25,409
and I'm going to run the bash man and

00:29:22,889 --> 00:29:27,240
the interesting thing is as soon as I

00:29:25,409 --> 00:29:29,940
run that command i get an error message

00:29:27,240 --> 00:29:33,720
saying look I can't read the contents of

00:29:29,940 --> 00:29:35,639
the batch RC file so if i try to cat

00:29:33,720 --> 00:29:38,309
it's a shadow for instance even though

00:29:35,639 --> 00:29:40,559
I'm still running as root I don't have

00:29:38,309 --> 00:29:42,330
access to etsy shadow I try to create a

00:29:40,559 --> 00:29:44,549
test file in the root of the file system

00:29:42,330 --> 00:29:47,309
permission is denied even though I am

00:29:44,549 --> 00:29:50,460
running as root because I'm running in

00:29:47,309 --> 00:29:53,700
the open shift context when I try to

00:29:50,460 --> 00:29:55,380
access home T Cameron for instance it

00:29:53,700 --> 00:29:58,019
doesn't allow me to do that because my

00:29:55,380 --> 00:29:59,730
selinux context has changed and even

00:29:58,019 --> 00:30:01,139
though I'm running as root if I say well

00:29:59,730 --> 00:30:05,429
that's okay I'm just going to turn off

00:30:01,139 --> 00:30:09,029
selinux if I try to run set in 40 it's

00:30:05,429 --> 00:30:12,600
going to fail as well so this is an

00:30:09,029 --> 00:30:15,029
example of how changing to the context

00:30:12,600 --> 00:30:18,210
of an open shift container or any

00:30:15,029 --> 00:30:22,350
container is still not going to allow me

00:30:18,210 --> 00:30:26,070
to have access to the file system all

00:30:22,350 --> 00:30:29,669
right so let's talk about set comp set

00:30:26,070 --> 00:30:31,889
comp is cisco filtering so you can match

00:30:29,669 --> 00:30:34,620
system calls or even their arguments for

00:30:31,889 --> 00:30:37,440
more specific matches like kill errno

00:30:34,620 --> 00:30:40,320
allow trapped raise etc you can either

00:30:37,440 --> 00:30:43,950
use white list or black lists and docker

00:30:40,320 --> 00:30:45,760
uses a whitelist by default so what it

00:30:43,950 --> 00:30:47,830
does is you can potential

00:30:45,760 --> 00:30:50,680
disabled system calls like k exec load

00:30:47,830 --> 00:30:54,040
and net module evident module delete

00:30:50,680 --> 00:30:57,610
module io perm swap on etc etc etc and

00:30:54,040 --> 00:30:59,530
disabled 32-bit cisco's so in this

00:30:57,610 --> 00:31:01,990
example and this is one of the ones that

00:30:59,530 --> 00:31:07,540
brune all did he actually created a JSON

00:31:01,990 --> 00:31:10,600
file that basically it blocks the get

00:31:07,540 --> 00:31:11,800
CWD command so which is kind of silly

00:31:10,600 --> 00:31:12,970
you would never really do that in the

00:31:11,800 --> 00:31:14,920
real world because that's a really

00:31:12,970 --> 00:31:18,340
important system call but it's a great

00:31:14,920 --> 00:31:21,390
example in that what he does is he runs

00:31:18,340 --> 00:31:24,490
dr. Ron IT and then he says security

00:31:21,390 --> 00:31:29,430
options include reading that set comp

00:31:24,490 --> 00:31:32,200
vet JSON file and when he runs busybox

00:31:29,430 --> 00:31:35,800
with the SH command so just give me a

00:31:32,200 --> 00:31:37,480
shell it says nope operation is not

00:31:35,800 --> 00:31:40,060
permitted so I can't see what directory

00:31:37,480 --> 00:31:43,090
I'm in because PWD and the operation is

00:31:40,060 --> 00:31:45,700
not is not allowed so it's a silly

00:31:43,090 --> 00:31:48,070
example but it's a good example of

00:31:45,700 --> 00:31:50,950
showing how you can take even core

00:31:48,070 --> 00:31:53,650
system calls blacklists them through a

00:31:50,950 --> 00:31:56,410
file and if you make that part of the

00:31:53,650 --> 00:32:01,270
command line to launch your containers

00:31:56,410 --> 00:32:03,580
you can block those system calls alright

00:32:01,270 --> 00:32:05,080
so let's talk about some tips and tricks

00:32:03,580 --> 00:32:06,100
some of the things that you want to do

00:32:05,080 --> 00:32:10,300
and some of the things that you don't

00:32:06,100 --> 00:32:12,370
want to do remember that containers at

00:32:10,300 --> 00:32:15,340
the end of the day are just processes

00:32:12,370 --> 00:32:17,800
running on your host so use common sense

00:32:15,340 --> 00:32:20,260
when you're running those processes make

00:32:17,800 --> 00:32:23,800
sure that you do have a process in place

00:32:20,260 --> 00:32:27,460
to update your containers and follow

00:32:23,800 --> 00:32:29,770
that process don't just download some

00:32:27,460 --> 00:32:31,210
container from docker hub and then run

00:32:29,770 --> 00:32:33,070
it in your environment and don't update

00:32:31,210 --> 00:32:35,380
it you have to have a process in place

00:32:33,070 --> 00:32:37,000
for running updates always make sure

00:32:35,380 --> 00:32:39,520
that you run your containers are the

00:32:37,000 --> 00:32:42,700
lowest possible privileged drop unused

00:32:39,520 --> 00:32:45,880
capabilities as soon as you can when you

00:32:42,700 --> 00:32:48,250
mount file systems from the host if you

00:32:45,880 --> 00:32:49,870
can mount them is read-only that way you

00:32:48,250 --> 00:32:50,480
don't grant any access to write

00:32:49,870 --> 00:32:53,360
information

00:32:50,480 --> 00:32:54,860
back to the host treat room inside of

00:32:53,360 --> 00:32:57,140
the container just like you would root

00:32:54,860 --> 00:33:00,440
on the host run your containers is non

00:32:57,140 --> 00:33:02,240
route if possible so if you can run for

00:33:00,440 --> 00:33:04,730
instance of my sequel container run it

00:33:02,240 --> 00:33:06,830
as the my sequel user this is actually

00:33:04,730 --> 00:33:08,630
enforced on openshift so if user our

00:33:06,830 --> 00:33:10,700
pals offering either the commercial

00:33:08,630 --> 00:33:12,860
version openshift enterprise or the

00:33:10,700 --> 00:33:16,400
upstream open source version the open

00:33:12,860 --> 00:33:17,990
shift origin we do enforce that have a

00:33:16,400 --> 00:33:20,150
mechanism in place to watch your log

00:33:17,990 --> 00:33:21,740
files because if something weird is

00:33:20,150 --> 00:33:23,720
happening in your environment it should

00:33:21,740 --> 00:33:27,740
get logged and you can react to that and

00:33:23,720 --> 00:33:29,179
make changes and enabled no new

00:33:27,740 --> 00:33:32,419
privileges for your container if

00:33:29,179 --> 00:33:35,240
possible so you'd run dr run IT you know

00:33:32,419 --> 00:33:37,040
fedora bash dash dash security ops no

00:33:35,240 --> 00:33:38,510
new privileges that way even if somebody

00:33:37,040 --> 00:33:40,130
does manage to try to do something bad

00:33:38,510 --> 00:33:45,169
inside of the container we're going to

00:33:40,130 --> 00:33:46,880
block them don't just download Bill and

00:33:45,169 --> 00:33:50,090
Ted's Excellent container from the

00:33:46,880 --> 00:33:52,429
internet try to use trusted sources

00:33:50,090 --> 00:33:53,900
whether it's the docker repository you

00:33:52,429 --> 00:33:55,160
know look at the history of your docker

00:33:53,900 --> 00:33:57,080
image make sure that it's something

00:33:55,160 --> 00:34:00,410
that's being up they didn't keep kept

00:33:57,080 --> 00:34:02,690
smart don't just download any old

00:34:00,410 --> 00:34:04,970
container don't run SSH inside of the

00:34:02,690 --> 00:34:06,860
container this kind of defeats the

00:34:04,970 --> 00:34:08,060
purpose of containers you want to build

00:34:06,860 --> 00:34:09,379
your container and push them out you

00:34:08,060 --> 00:34:11,990
don't want to have to log into them and

00:34:09,379 --> 00:34:13,310
do updates don't run with root

00:34:11,990 --> 00:34:15,830
privileges in other words drop

00:34:13,310 --> 00:34:20,600
privileges as quickly as possible don't

00:34:15,830 --> 00:34:23,200
disable selinux please if you don't

00:34:20,600 --> 00:34:25,190
understand how a sea Linux works if the

00:34:23,200 --> 00:34:28,040
discussion that we had the day is not

00:34:25,190 --> 00:34:30,530
enough i did a video at redhead summit

00:34:28,040 --> 00:34:32,990
called selinux for mere mortals it's on

00:34:30,530 --> 00:34:35,090
YouTube go watch it it's only about 45

00:34:32,990 --> 00:34:36,919
minutes it's a pretty good explanation

00:34:35,090 --> 00:34:38,990
of how selinux works if you're not

00:34:36,919 --> 00:34:43,070
comfortable with selinux turning it off

00:34:38,990 --> 00:34:45,260
is not the right answer yes sir what

00:34:43,070 --> 00:34:51,430
actions are there when someone runs a

00:34:45,260 --> 00:34:51,430
debian to kernel which doesn't use SEO

00:34:55,690 --> 00:35:01,490
so inside of the container selinux won't

00:34:59,450 --> 00:35:04,130
be enabled that's bad it's not a

00:35:01,490 --> 00:35:07,610
showstopper but it's definitely not good

00:35:04,130 --> 00:35:09,650
but at least that container running on a

00:35:07,610 --> 00:35:11,960
fedora host or on a rail toaster on a

00:35:09,650 --> 00:35:13,730
centos host at least that container will

00:35:11,960 --> 00:35:15,350
be protected by security enhance Linux

00:35:13,730 --> 00:35:17,420
so even if somebody does compromise that

00:35:15,350 --> 00:35:19,670
debian container they won't be able to

00:35:17,420 --> 00:35:22,190
attack other containers on the host you

00:35:19,670 --> 00:35:24,140
know I recommend and this is not a dig

00:35:22,190 --> 00:35:25,760
on debian or a dig on the booty or

00:35:24,140 --> 00:35:28,040
anything like that I recommend that you

00:35:25,760 --> 00:35:30,680
use containers that do understand

00:35:28,040 --> 00:35:32,390
selinux investig Linux is it you know at

00:35:30,680 --> 00:35:33,320
least the file system labeling and

00:35:32,390 --> 00:35:46,790
things like that are happening within

00:35:33,320 --> 00:35:50,900
the container there are no conflicts I

00:35:46,790 --> 00:35:53,210
don't I don't know if a parmer would

00:35:50,900 --> 00:36:00,590
actually run inside of the container I'm

00:35:53,210 --> 00:36:02,960
just not sure I don't try this yeah yeah

00:36:00,590 --> 00:36:05,630
I I don't know I haven't tested that I

00:36:02,960 --> 00:36:10,250
haven't tested it but my recommendation

00:36:05,630 --> 00:36:12,590
is use selinux aware for containers it's

00:36:10,250 --> 00:36:14,600
not always practical but at least if

00:36:12,590 --> 00:36:16,220
you're running a container that doesn't

00:36:14,600 --> 00:36:19,550
Barack selinux at least that container

00:36:16,220 --> 00:36:21,650
is still protected by the host let's see

00:36:19,550 --> 00:36:24,110
don't roll your own containers once and

00:36:21,650 --> 00:36:26,690
then never maintain them I see that a

00:36:24,110 --> 00:36:28,700
lot you know some developers somewhere

00:36:26,690 --> 00:36:31,040
gets asked hey will you create something

00:36:28,700 --> 00:36:32,600
for me the developer creates it gives it

00:36:31,040 --> 00:36:34,580
over the ops team and then the developer

00:36:32,600 --> 00:36:37,010
is on to the next project don't do that

00:36:34,580 --> 00:36:39,800
have a life cycle management process in

00:36:37,010 --> 00:36:41,870
place and don't run production fingers

00:36:39,800 --> 00:36:44,590
on unsupported platforms the wild wild

00:36:41,870 --> 00:36:48,800
west is not the place to do production

00:36:44,590 --> 00:36:50,890
all right so in conclusion we're right

00:36:48,800 --> 00:36:53,900
at the end go forth and contain

00:36:50,890 --> 00:36:55,410
containers are incredibly cool

00:36:53,900 --> 00:36:57,180
technology they may

00:36:55,410 --> 00:36:59,339
deployment really really easy if anyone

00:36:57,180 --> 00:37:02,250
sat through Adams session on the

00:36:59,339 --> 00:37:03,900
previous previous hour where he talked

00:37:02,250 --> 00:37:06,539
about how to build layered containers

00:37:03,900 --> 00:37:08,220
there's some amazingly cool technology

00:37:06,539 --> 00:37:12,450
going on around the building and

00:37:08,220 --> 00:37:14,039
deployment of containers containers do

00:37:12,450 --> 00:37:15,809
leverage some incredibly cool

00:37:14,039 --> 00:37:19,789
capabilities within a linux kernel and

00:37:15,809 --> 00:37:24,510
bice by design they are relatively

00:37:19,789 --> 00:37:26,339
secure nothing's perfect but if you

00:37:24,510 --> 00:37:28,020
follow just kind of common-sense rules

00:37:26,339 --> 00:37:31,829
of software lifecycle management

00:37:28,020 --> 00:37:33,660
containers can be very very secure they

00:37:31,829 --> 00:37:35,190
can make your business more agile or

00:37:33,660 --> 00:37:39,059
your organization your community more

00:37:35,190 --> 00:37:42,349
agile and potentially less complex and

00:37:39,059 --> 00:38:02,630
if done right they can be very very safe

00:37:42,349 --> 00:38:02,630
so with that any questions yes sir only

00:38:06,740 --> 00:38:17,849
right yes so there right now selinux

00:38:16,200 --> 00:38:20,039
really only cares about the process

00:38:17,849 --> 00:38:21,990
running on the host so that that

00:38:20,039 --> 00:38:24,119
container process running on the host is

00:38:21,990 --> 00:38:26,789
is confined within selinux and we have

00:38:24,119 --> 00:38:29,579
rules around it I've actually run a

00:38:26,789 --> 00:38:31,380
bunch of fedora containers that have and

00:38:29,579 --> 00:38:33,630
i found that selinux inside of the

00:38:31,380 --> 00:38:36,150
container is turned off I'm not sure

00:38:33,630 --> 00:38:37,559
with the status of having selinux inside

00:38:36,150 --> 00:38:39,299
the container turned on is yet I

00:38:37,559 --> 00:38:42,059
actually meant to go bug Dan about that

00:38:39,299 --> 00:38:45,359
while I'm here you know time frame or

00:38:42,059 --> 00:38:47,700
roadmap it's not gonna happen just not

00:38:45,359 --> 00:38:50,630
gonna happen there's a lot of I mean we

00:38:47,700 --> 00:38:52,970
can sit down but in to keep it simple

00:38:50,630 --> 00:38:55,789
there's technical reasons in Iraq many

00:38:52,970 --> 00:38:58,579
names face testicles really okay so

00:38:55,789 --> 00:39:00,890
there's your answer so I had hoped that

00:38:58,579 --> 00:39:11,359
it was a not yet but apparently it's a

00:39:00,890 --> 00:39:13,670
no quest to send be very good right

00:39:11,359 --> 00:39:15,890
that's one person to a nonsense fun is

00:39:13,670 --> 00:39:17,750
there an easy way mr. Kerr said his

00:39:15,890 --> 00:39:20,869
container can only receive connection

00:39:17,750 --> 00:39:24,710
but kind of contact anyone outside I

00:39:20,869 --> 00:39:27,470
have to do that by enemies are working

00:39:24,710 --> 00:39:30,200
right the best way so the question is is

00:39:27,470 --> 00:39:32,809
there a way to secure system so they

00:39:30,200 --> 00:39:35,150
don't accept new connections are that

00:39:32,809 --> 00:39:38,869
you can't read it okay so they can't do

00:39:35,150 --> 00:39:41,359
outbound yeah um so you can do that a

00:39:38,869 --> 00:39:45,529
number of ways iptables for me would

00:39:41,359 --> 00:39:48,619
probably be the easiest way um yeah but

00:39:45,529 --> 00:39:51,289
you can have a cig linux policy you

00:39:48,619 --> 00:39:53,779
could have selinux policy that that

00:39:51,289 --> 00:39:55,519
would block outbound I think that would

00:39:53,779 --> 00:39:59,509
probably be a lot more work than it than

00:39:55,519 --> 00:40:04,279
just 90 tables rule set I'm not even

00:39:59,509 --> 00:40:10,339
sure how I would do that you could yeah

00:40:04,279 --> 00:40:11,770
i would use IP tables type where you are

00:40:10,339 --> 00:40:15,410
please

00:40:11,770 --> 00:40:17,540
possible inside the container to modify

00:40:15,410 --> 00:40:20,140
a system also you are actually thinking

00:40:17,540 --> 00:40:25,460
that we are using this callback we are

00:40:20,140 --> 00:40:31,010
using this kind of so this is called

00:40:25,460 --> 00:40:33,050
mapping basically like abstraction I'm

00:40:31,010 --> 00:40:40,160
sure that it can be done I don't know

00:40:33,050 --> 00:40:42,740
how to do it so yeah and there's certain

00:40:40,160 --> 00:40:45,109
things like the big ones which top hit

00:40:42,740 --> 00:40:47,170
Yeah right there multi-platinum deja de

00:40:45,109 --> 00:40:50,030
loop suck takes care of that

00:40:47,170 --> 00:40:52,460
magistrate for you under I platforms and

00:40:50,030 --> 00:40:55,070
in fact if you file looks I have the

00:40:52,460 --> 00:40:59,900
recent change that we need to it was at

00:40:55,070 --> 00:41:03,410
43 where Andy making he hooked up all

00:40:59,900 --> 00:41:05,240
the all the sockets as calls so that

00:41:03,410 --> 00:41:08,030
they can be both direct wire and through

00:41:05,240 --> 00:41:10,880
the socket costas call so there's about

00:41:08,030 --> 00:41:14,150
a seven different ways on 32-bit x86 you

00:41:10,880 --> 00:41:16,760
can call socket and lips icons will just

00:41:14,150 --> 00:41:19,400
take care of those for you it should if

00:41:16,760 --> 00:41:25,940
it doesn't it's about yeah file a bug if

00:41:19,400 --> 00:41:31,750
not yeah all right was this helpful good

00:41:25,940 --> 00:41:31,750
okay any other questions the white list

00:41:31,900 --> 00:41:37,099
so i don't i don't know the answer to

00:41:35,060 --> 00:41:38,240
that i've heard a couple of different

00:41:37,099 --> 00:41:39,740
versions do you know why we chose

00:41:38,240 --> 00:41:44,270
whitelist by default instead a blacklist

00:41:39,740 --> 00:41:46,039
by default I you could find us just came

00:41:44,270 --> 00:41:50,369
out

00:41:46,039 --> 00:41:53,880
you can actually do both like qemu I

00:41:50,369 --> 00:41:56,549
don't know what says that was they use

00:41:53,880 --> 00:42:00,799
this call filter NOSSA and there was

00:41:56,549 --> 00:42:03,779
some talk about doing a an initial

00:42:00,799 --> 00:42:05,849
blacklist and then you know for setup is

00:42:03,779 --> 00:42:07,979
queuing me just not stuff we can the PM

00:42:05,849 --> 00:42:10,890
right and then right before you actually

00:42:07,979 --> 00:42:14,669
say go to the BM you know you tighten

00:42:10,890 --> 00:42:17,429
that down further and you could do

00:42:14,669 --> 00:42:19,219
something very similar with containers

00:42:17,429 --> 00:42:21,449
that thought was being that for example

00:42:19,219 --> 00:42:23,279
let's say there's a kernel vulnerability

00:42:21,449 --> 00:42:25,829
found that that's just call them both

00:42:23,279 --> 00:42:28,709
these particular arguments not going to

00:42:25,829 --> 00:42:30,829
call it by out that powerful you know

00:42:28,709 --> 00:42:33,479
you could you could have your normal

00:42:30,829 --> 00:42:36,150
your normal list and then you could

00:42:33,479 --> 00:42:38,939
quickly thrown a specific you know a

00:42:36,150 --> 00:42:40,679
separate additional sis called filter to

00:42:38,939 --> 00:42:44,669
isolate and say okay I don't want you

00:42:40,679 --> 00:42:48,059
call a the specific similarly well yeah

00:42:44,669 --> 00:42:49,769
so i'm not sure where that stands but

00:42:48,059 --> 00:42:53,339
there was some discussions around that

00:42:49,769 --> 00:42:57,059
I'm not involved photography yeah I the

00:42:53,339 --> 00:43:02,459
the explanation that I heard but this is

00:42:57,059 --> 00:43:04,709
kind of third third hand was if you

00:43:02,459 --> 00:43:06,059
black list by default then you have to

00:43:04,709 --> 00:43:07,519
explicitly go through and allow

00:43:06,059 --> 00:43:10,679
everything that you want to have happen

00:43:07,519 --> 00:43:12,390
if you white list by default then you

00:43:10,679 --> 00:43:14,549
really are going back and basically

00:43:12,390 --> 00:43:17,390
blocking the things you don't want and i

00:43:14,549 --> 00:43:21,479
think that the nod was made to usability

00:43:17,390 --> 00:43:24,239
before security which their arguments

00:43:21,479 --> 00:43:27,359
for both sides it's kind of like why

00:43:24,239 --> 00:43:29,099
don't you use the strict selinux policy

00:43:27,359 --> 00:43:31,559
by default well because it's a pain in

00:43:29,099 --> 00:43:32,789
the ass and it's really hard to go

00:43:31,559 --> 00:43:33,959
through and open everything up that

00:43:32,789 --> 00:43:36,659
needs to be opened up to make your

00:43:33,959 --> 00:43:38,429
system usable i get the impression that

00:43:36,659 --> 00:43:39,779
it was we're going to choose white list

00:43:38,429 --> 00:43:41,759
by default and only turn off those

00:43:39,779 --> 00:43:43,469
functions that we don't want because if

00:43:41,759 --> 00:43:45,329
you do black list by default and you

00:43:43,469 --> 00:43:47,789
forget to turn something on the user

00:43:45,329 --> 00:43:49,859
experience is going to be terrible now

00:43:47,789 --> 00:43:52,160
that's third hand don't take that as

00:43:49,859 --> 00:43:53,990
gospel I think that

00:43:52,160 --> 00:43:55,970
I think it's a fair argument I mean

00:43:53,990 --> 00:43:57,230
there's always the balance right you got

00:43:55,970 --> 00:43:59,329
a security over here and the more

00:43:57,230 --> 00:44:01,789
security goes up the less usability is

00:43:59,329 --> 00:44:03,589
there so that's again that's kind of

00:44:01,789 --> 00:44:05,780
what I heard in a side conversation so I

00:44:03,589 --> 00:44:08,839
think that's the case all right guys um

00:44:05,780 --> 00:44:09,670
we are we got seven minutes left if

00:44:08,839 --> 00:44:12,230
anybody has any other questions

00:44:09,670 --> 00:44:16,869
otherwise go get some coffee have a

00:44:12,230 --> 00:44:16,869

YouTube URL: https://www.youtube.com/watch?v=6rVTEG8u2n0


