Title: Flock 2016 - Living on the edge: Using rawhide day to day, Kevin Fenzi
Publication date: 2016-08-21
Playlist: Flock 2016
Description: 
	This talk will be go over tips, tricks and workflows to use rawhide or branched as your everyday Fedora. Learn how to troubleshoot and work around issues and help make rawhide or branched more stable for everyone else.

https://flock2016.sched.org/event/76nm/living-on-the-edge-using-rawhide-day-to-day

This video was recorded at the annual Fedora contributor conference, Flock, in KrakÃ³w, Poland, from August 2-5, 2016. You can learn more about Flock at https://flocktofedora.org.

#FlockToFedora
Captions: 
	00:00:01,850 --> 00:00:04,850
right

00:00:12,500 --> 00:00:18,900
all right can everybody see this I don't

00:00:15,360 --> 00:00:22,590
know if the angle is too good or the

00:00:18,900 --> 00:00:27,840
print okay I'm going to talk to you guys

00:00:22,590 --> 00:00:31,290
today about rawhide how many folks here

00:00:27,840 --> 00:00:35,579
know what rawhide is for everyone okay

00:00:31,290 --> 00:00:40,949
how many people are running ride quite a

00:00:35,579 --> 00:00:42,780
few folks good so a little background

00:00:40,949 --> 00:00:45,539
about me I've been running rawhide

00:00:42,780 --> 00:00:48,449
full-time on my laptop which I use for

00:00:45,539 --> 00:00:52,499
everything day-to-day for about three

00:00:48,449 --> 00:00:56,850
years now there have of course been

00:00:52,499 --> 00:00:59,519
issues but particularly bad there have

00:00:56,850 --> 00:01:02,550
been in the past and the distant past of

00:00:59,519 --> 00:01:04,620
rawhide there been like the problems

00:01:02,550 --> 00:01:08,100
that everybody thinks about for

00:01:04,620 --> 00:01:09,600
development releases you know like view

00:01:08,100 --> 00:01:12,060
lip see getting messed up and your

00:01:09,600 --> 00:01:13,950
machine will no longer boot or you know

00:01:12,060 --> 00:01:15,810
those sort of things but none of that

00:01:13,950 --> 00:01:18,290
has really happened in the last few

00:01:15,810 --> 00:01:20,640
years things have been a lot more stable

00:01:18,290 --> 00:01:23,670
due to a number of reasons which I'll

00:01:20,640 --> 00:01:26,009
get into I'm a system in by trade and

00:01:23,670 --> 00:01:29,509
I've been in Baltimore for a really long

00:01:26,009 --> 00:01:36,390
time I maintain a bunch of packages

00:01:29,509 --> 00:01:39,000
package collection as well a few little

00:01:36,390 --> 00:01:41,759
notes about rawhide it's always rolling

00:01:39,000 --> 00:01:45,270
release new versions of things can

00:01:41,759 --> 00:01:46,439
appear at any time so when you expect

00:01:45,270 --> 00:01:48,299
them or when you don't expect them

00:01:46,439 --> 00:01:52,560
suddenly boom there's a new version of

00:01:48,299 --> 00:01:55,229
something major versions can appear at

00:01:52,560 --> 00:01:58,320
any time minor versions appear all the

00:01:55,229 --> 00:02:00,539
time so occasionally or attend vast

00:01:58,320 --> 00:02:03,390
majority of the time things update and

00:02:00,539 --> 00:02:05,399
you don't actually see that much user

00:02:03,390 --> 00:02:10,470
visible change you know the package is

00:02:05,399 --> 00:02:12,420
updated but it updated from 2.0 to 2.0 1

00:02:10,470 --> 00:02:12,780
and it was just a docx file change or

00:02:12,420 --> 00:02:14,520
something

00:02:12,780 --> 00:02:16,500
that unless you're looking at it closely

00:02:14,520 --> 00:02:22,830
you don't really even notice as much

00:02:16,500 --> 00:02:24,510
what's going on it's not 100 % but we're

00:02:22,830 --> 00:02:27,450
working on that and actually I'll have

00:02:24,510 --> 00:02:30,840
some slides on that later what the

00:02:27,450 --> 00:02:32,819
progress on that is it's now a full

00:02:30,840 --> 00:02:35,850
compose of everything it didn't used to

00:02:32,819 --> 00:02:39,330
be and used to be just the packages tree

00:02:35,850 --> 00:02:41,610
and a few other things but now it is a

00:02:39,330 --> 00:02:44,730
full compose so it's like all the images

00:02:41,610 --> 00:02:48,180
of the trees the server of the

00:02:44,730 --> 00:02:50,760
workstation and then install cloud

00:02:48,180 --> 00:02:53,400
images you name it everything that a

00:02:50,760 --> 00:02:59,850
release of Fodor would have gets built

00:02:53,400 --> 00:03:02,760
every single day for Ron open QA is now

00:02:59,850 --> 00:03:03,989
testing all of those things and so

00:03:02,760 --> 00:03:09,600
there's a lot more visibility when

00:03:03,989 --> 00:03:11,940
things are broken open QA I'd leave that

00:03:09,600 --> 00:03:15,120
talk was earlier today but there was a

00:03:11,940 --> 00:03:16,950
talk on that up in QA here and it's

00:03:15,120 --> 00:03:18,480
basically a system automated system

00:03:16,950 --> 00:03:21,989
where it takes the images and it does

00:03:18,480 --> 00:03:24,630
the things that I would do so it boots

00:03:21,989 --> 00:03:27,239
it up it chooses install it runs the

00:03:24,630 --> 00:03:30,750
install it clicks on certain things it

00:03:27,239 --> 00:03:37,170
looks for certain screens and I could

00:03:30,750 --> 00:03:39,920
see the results of that testing that's

00:03:37,170 --> 00:03:39,920
been good

00:03:40,719 --> 00:03:48,159
so I pulled this off of the wiki there's

00:03:43,420 --> 00:03:51,040
a number of goals from rawhide basically

00:03:48,159 --> 00:03:52,870
it's at a place for people to build the

00:03:51,040 --> 00:03:55,209
new upstream packages and integrate them

00:03:52,870 --> 00:03:57,400
into fedora so they can see that it

00:03:55,209 --> 00:03:59,439
builds with our compiler or the compiler

00:03:57,400 --> 00:04:03,700
version there and the libraries kind of

00:03:59,439 --> 00:04:06,840
all match up things like that it's also

00:04:03,700 --> 00:04:11,379
a good way for advanced users to get

00:04:06,840 --> 00:04:13,239
packages and it's also a place to do

00:04:11,379 --> 00:04:15,639
incremental change that are too minor

00:04:13,239 --> 00:04:17,769
for stable releases so like as I was

00:04:15,639 --> 00:04:19,539
saying before if you have a new version

00:04:17,769 --> 00:04:22,630
of a package that changes you know some

00:04:19,539 --> 00:04:24,400
documentation or it's some very minor

00:04:22,630 --> 00:04:27,130
bug fix or something like that it may

00:04:24,400 --> 00:04:29,259
not be worth pushing out to the stable

00:04:27,130 --> 00:04:31,690
Fedora releases but you can push it into

00:04:29,259 --> 00:04:34,479
rawhide and you know people can see that

00:04:31,690 --> 00:04:40,949
and test it and make sure that bug fix

00:04:34,479 --> 00:04:43,360
worked if they're interested and it's

00:04:40,949 --> 00:04:44,889
another goal is to fix issues with

00:04:43,360 --> 00:04:47,919
packages before they get to the stable

00:04:44,889 --> 00:04:51,070
releases so those minor releases or even

00:04:47,919 --> 00:04:56,220
the major releases that gives them time

00:04:51,070 --> 00:04:56,220
to actually use and intestine

00:04:59,890 --> 00:05:09,650
so about how rawhide is made there is a

00:05:06,410 --> 00:05:14,630
Kron script that runs every day at 5:15

00:05:09,650 --> 00:05:17,840
UTC if you look on Peggy Rio Fedora

00:05:14,630 --> 00:05:19,970
punji because is the project and that

00:05:17,840 --> 00:05:21,710
actually has a script that goes

00:05:19,970 --> 00:05:24,200
throughout the whole process calling all

00:05:21,710 --> 00:05:28,310
the things that it calls creates all the

00:05:24,200 --> 00:05:30,770
trees creates all the images and it

00:05:28,310 --> 00:05:34,400
usually takes about four or five hours

00:05:30,770 --> 00:05:36,350
to do all that it could probably be

00:05:34,400 --> 00:05:38,900
optimized in a deal there's a lot of

00:05:36,350 --> 00:05:40,400
stuff where it it doesn't do things in

00:05:38,900 --> 00:05:43,040
parallel where perhaps it could do

00:05:40,400 --> 00:05:44,510
things in parallel but there's also a

00:05:43,040 --> 00:05:46,130
lot of steps that it has to do in a

00:05:44,510 --> 00:05:48,410
certain order like it has to build the

00:05:46,130 --> 00:05:52,550
trees before it builds the images from

00:05:48,410 --> 00:05:54,110
those trees and that sort of thing but

00:05:52,550 --> 00:05:55,630
you can see all the nitty-gritty details

00:05:54,110 --> 00:05:58,430
in that script if you're interested

00:05:55,630 --> 00:06:00,320
there's also I didn't put it up here but

00:05:58,430 --> 00:06:04,130
there's a mailing list called relish

00:06:00,320 --> 00:06:05,780
Kron which just contains the output of

00:06:04,130 --> 00:06:07,400
these sort of jobs and if you're

00:06:05,780 --> 00:06:10,700
interested in it for whatever reason you

00:06:07,400 --> 00:06:12,890
can go look at those a lot of the

00:06:10,700 --> 00:06:14,780
relevant people are subscribed but don't

00:06:12,890 --> 00:06:16,100
look at it unless there's some problem

00:06:14,780 --> 00:06:18,110
you know if you wanted to look and see

00:06:16,100 --> 00:06:19,700
what happened you could see the output

00:06:18,110 --> 00:06:23,330
from everything and you can see where

00:06:19,700 --> 00:06:30,320
where things are so forth and some of

00:06:23,330 --> 00:06:32,419
the output is large so so why running

00:06:30,320 --> 00:06:35,390
around you like getting new software

00:06:32,419 --> 00:06:39,169
every day that's a reason you like

00:06:35,390 --> 00:06:42,800
troubleshooting problems seeing problems

00:06:39,169 --> 00:06:44,990
get fixed there's a really good short

00:06:42,800 --> 00:06:48,440
feedback loop a lot of times with

00:06:44,990 --> 00:06:50,240
rawhide stuff I found at least so you

00:06:48,440 --> 00:06:52,940
know you run into some problem you'll be

00:06:50,240 --> 00:06:54,560
like hmm this is where is this problem

00:06:52,940 --> 00:06:57,050
I'll troubleshoot it down oh it's in

00:06:54,560 --> 00:06:58,580
this component I'll file a bug I'll talk

00:06:57,050 --> 00:07:01,460
to that maintainer and they're like oh

00:06:58,580 --> 00:07:03,440
yes I see the bug I fix the bug and then

00:07:01,460 --> 00:07:06,860
the next day you have a fixed version of

00:07:03,440 --> 00:07:08,759
this thing so the release cycle feedback

00:07:06,860 --> 00:07:10,979
cycle there is a lot nicer

00:07:08,759 --> 00:07:13,830
and say if it or a release where it

00:07:10,979 --> 00:07:16,439
might be a lot longer before they are

00:07:13,830 --> 00:07:18,150
able to reproduce the bug or it might be

00:07:16,439 --> 00:07:23,520
a lot longer before package gets to a

00:07:18,150 --> 00:07:28,289
point where you could test it or of

00:07:23,520 --> 00:07:29,879
course if you look at challenge and of

00:07:28,289 --> 00:07:32,729
course it helps up people that are using

00:07:29,879 --> 00:07:38,789
stable releases so you find bugs before

00:07:32,729 --> 00:07:41,759
those people do a lot of packages kind

00:07:38,789 --> 00:07:44,520
of update in stable releases and rawhide

00:07:41,759 --> 00:07:47,189
all at once if it's a it's a security

00:07:44,520 --> 00:07:48,839
release for some package they provide

00:07:47,189 --> 00:07:51,120
updates for everything but the

00:07:48,839 --> 00:07:53,939
rawhideone almost always lands before

00:07:51,120 --> 00:07:56,189
everything else in staple releases so

00:07:53,939 --> 00:07:59,039
I've seen numerous times where you know

00:07:56,189 --> 00:08:00,960
maintainable push updates for all the

00:07:59,039 --> 00:08:02,999
releases the rawhide one will come out

00:08:00,960 --> 00:08:05,580
I'll find a problem with that one viable

00:08:02,999 --> 00:08:09,330
bug and then they'll redo all the stable

00:08:05,580 --> 00:08:14,569
ones so it's definitely a good good way

00:08:09,330 --> 00:08:14,569
to find bugs before everybody else does

00:08:40,290 --> 00:08:45,850
yeah there's I've got some slides here

00:08:44,710 --> 00:08:50,310
in a little while but I'll talk about

00:08:45,850 --> 00:08:54,160
the rate of change and it's interesting

00:08:50,310 --> 00:08:56,520
well yes here we go in fact so I looked

00:08:54,160 --> 00:08:58,720
at some stats from the last month and

00:08:56,520 --> 00:09:01,750
there was one day where there were only

00:08:58,720 --> 00:09:04,690
18 packages of updated that was the the

00:09:01,750 --> 00:09:08,770
slowest day it was a Saturday I think

00:09:04,690 --> 00:09:10,780
during a holiday weekend it was like

00:09:08,770 --> 00:09:12,700
right before a holiday weekend yeah and

00:09:10,780 --> 00:09:15,070
then there was another day when there

00:09:12,700 --> 00:09:19,350
was about 2,500 packages that changed

00:09:15,070 --> 00:09:25,480
and no that was actually this was a

00:09:19,350 --> 00:09:27,670
Python got rebuilt right inside tag and

00:09:25,480 --> 00:09:30,610
that that's when it was folded back into

00:09:27,670 --> 00:09:33,280
into the main rawhide tag our p.m. got a

00:09:30,610 --> 00:09:35,230
new feature to handle dependencies on

00:09:33,280 --> 00:09:37,510
Python packages and in order to take

00:09:35,230 --> 00:09:39,940
advantage of that the Python maintainer

00:09:37,510 --> 00:09:42,610
sneed wanted all the packages that are

00:09:39,940 --> 00:09:45,160
Python to be rebuilt so the way that's

00:09:42,610 --> 00:09:47,530
usually done is you know they build the

00:09:45,160 --> 00:09:49,480
new rpm and they send it inside tag and

00:09:47,530 --> 00:09:50,740
Koji and then all the things build

00:09:49,480 --> 00:09:56,080
against that and then they're merged

00:09:50,740 --> 00:09:58,060
back in all at once now that seems like

00:09:56,080 --> 00:09:59,950
a lot but that actually isn't a lot the

00:09:58,060 --> 00:10:02,170
the biggest amount that you'll see a

00:09:59,950 --> 00:10:05,830
rawhide change is right after a mass

00:10:02,170 --> 00:10:09,220
rebuild of everything and you know those

00:10:05,830 --> 00:10:10,660
days that you're talking you know twenty

00:10:09,220 --> 00:10:12,640
to twenty three thousand packages

00:10:10,660 --> 00:10:17,860
basically every package on your machine

00:10:12,640 --> 00:10:22,240
is replaced virtually so the amount of

00:10:17,860 --> 00:10:24,610
change is is high sometimes I checked

00:10:22,240 --> 00:10:26,440
also into the mirror manager requests

00:10:24,610 --> 00:10:28,300
which I thought was interesting that's

00:10:26,440 --> 00:10:31,380
the number of people hitting mirror

00:10:28,300 --> 00:10:34,530
manager and asking for a rawhide

00:10:31,380 --> 00:10:38,190
mirror and it varies quite a lot it's

00:10:34,530 --> 00:10:41,250
between 12 and 25 thousand a day which

00:10:38,190 --> 00:10:44,670
actually seems more than I was expecting

00:10:41,250 --> 00:10:48,060
but again that's going to just tell you

00:10:44,670 --> 00:10:51,420
how many machines hit that were

00:10:48,060 --> 00:10:53,460
requested that mirror link you know that

00:10:51,420 --> 00:10:56,760
could be some machines hitting it very

00:10:53,460 --> 00:11:00,150
often or a bunch of machines behind a

00:10:56,760 --> 00:11:02,210
single IP address hitting it a bunch of

00:11:00,150 --> 00:11:02,210
times

00:11:03,290 --> 00:11:10,050
right exactly anything that that goes to

00:11:06,660 --> 00:11:13,190
that meddling this isn't like unique you

00:11:10,050 --> 00:11:13,190
need to find or anything like that

00:11:17,250 --> 00:11:24,980
Ron was first announced in August of

00:11:19,710 --> 00:11:27,480
1998 which was about 18 years ago now oh

00:11:24,980 --> 00:11:39,870
yes yes you can

00:11:27,480 --> 00:11:42,330
or those using it King its BB so getting

00:11:39,870 --> 00:11:45,240
on the rawhide trail this actually turns

00:11:42,330 --> 00:11:47,760
out to be the more difficult part once

00:11:45,240 --> 00:11:49,860
you're actually once you actually have a

00:11:47,760 --> 00:11:54,060
rawhide install and you're just updating

00:11:49,860 --> 00:11:56,400
day to day really in my experience there

00:11:54,060 --> 00:11:58,650
are very seldom are there showstopper

00:11:56,400 --> 00:12:01,080
problems where you know your machine is

00:11:58,650 --> 00:12:04,380
just toast or not functional

00:12:01,080 --> 00:12:06,500
but getting that initial install is

00:12:04,380 --> 00:12:10,980
sometimes very challenging because the

00:12:06,500 --> 00:12:13,320
install path is very fragile so we have

00:12:10,980 --> 00:12:15,420
open QA testing it now but if anyone has

00:12:13,320 --> 00:12:17,040
looked at this recently and I guess I

00:12:15,420 --> 00:12:20,430
could maybe try and pull it up I'm not

00:12:17,040 --> 00:12:22,710
sure if I'm on the net but it's been

00:12:20,430 --> 00:12:23,460
broken for the last three weeks or

00:12:22,710 --> 00:12:29,420
something like that

00:12:23,460 --> 00:12:29,420
due to install our changes and then

00:12:29,780 --> 00:12:36,090
broken dependencies in libera off things

00:12:33,420 --> 00:12:37,620
like that and if you actually had at all

00:12:36,090 --> 00:12:40,170
how to install already and you were just

00:12:37,620 --> 00:12:41,100
updating DNF would not give you those

00:12:40,170 --> 00:12:45,450
broken dependence

00:12:41,100 --> 00:12:47,490
just saying okay and keep going on but

00:12:45,450 --> 00:12:51,570
if you're turning to get an actual

00:12:47,490 --> 00:12:54,240
install that can be a difficult problem

00:12:51,570 --> 00:12:58,380
at some point Adam

00:12:54,240 --> 00:13:00,240
Williamson has created a page that uses

00:12:58,380 --> 00:13:02,580
the open QA results if you go to this

00:13:00,240 --> 00:13:04,910
nightly dot Fedora project org it

00:13:02,580 --> 00:13:07,680
redirects to Adam's page right now and

00:13:04,910 --> 00:13:10,830
it will actually tell you the last

00:13:07,680 --> 00:13:15,270
rawhide images that passed open QA and

00:13:10,830 --> 00:13:18,860
are installable and they're quite a ways

00:13:15,270 --> 00:13:22,470
of quite a while ago them at this point

00:13:18,860 --> 00:13:25,050
so it may be more productive to just use

00:13:22,470 --> 00:13:29,130
DNF and install a stable release and

00:13:25,050 --> 00:13:34,520
then use a DNF update you may run into

00:13:29,130 --> 00:13:37,520
broken dependencies on that but yeah

00:13:34,520 --> 00:13:37,520
exactly

00:13:38,630 --> 00:13:46,260
okay yeah mixing Brian stable there's a

00:13:43,430 --> 00:13:48,810
the questions come up a lot where people

00:13:46,260 --> 00:13:51,330
are like well you know I'm running

00:13:48,810 --> 00:13:53,640
through our 23 but I want libera office

00:13:51,330 --> 00:13:57,420
5.1 can I just install it from rawhide

00:13:53,640 --> 00:14:00,510
and go on my way no I think it's a

00:13:57,420 --> 00:14:03,420
pretty bad idea in most cases the

00:14:00,510 --> 00:14:05,700
exception being the kernel the since you

00:14:03,420 --> 00:14:07,320
can have multiple versions of the kernel

00:14:05,700 --> 00:14:09,150
installed you can install the ride

00:14:07,320 --> 00:14:11,160
kernel boot on it see if it works for

00:14:09,150 --> 00:14:13,050
you if it doesn't you can just boot on a

00:14:11,160 --> 00:14:15,510
previous kernel and you're fine if

00:14:13,050 --> 00:14:17,820
you're installing some large application

00:14:15,510 --> 00:14:20,700
from rawhide you're gonna pull in gee

00:14:17,820 --> 00:14:23,190
let's see rpm and basically you're

00:14:20,700 --> 00:14:24,270
essentially moving to ride whether you

00:14:23,190 --> 00:14:26,400
want to or not

00:14:24,270 --> 00:14:27,960
so it's very difficult to untangle the

00:14:26,400 --> 00:14:32,660
dependencies if you want to try and do

00:14:27,960 --> 00:14:32,660
that so I'd recommend against that

00:14:34,120 --> 00:14:45,009
and since there's full images you know

00:14:42,160 --> 00:14:48,339
when they are working with the install

00:14:45,009 --> 00:14:53,910
path is working there's all the spins

00:14:48,339 --> 00:14:56,499
all the labs all of that install so

00:14:53,910 --> 00:15:04,569
whatever method you normally would use

00:14:56,499 --> 00:15:06,879
to install shoot shoot function so if

00:15:04,569 --> 00:15:09,160
you are foolish enough to want off of

00:15:06,879 --> 00:15:13,149
the rawhide trail after you have been on

00:15:09,160 --> 00:15:15,220
it for a while some good points are good

00:15:13,149 --> 00:15:18,610
places to do that are the branching

00:15:15,220 --> 00:15:23,199
points we just did that for Fedora 25 a

00:15:18,610 --> 00:15:25,540
couple weeks ago and when that happens

00:15:23,199 --> 00:15:29,499
with Fedora 25 branches off of rawhide

00:15:25,540 --> 00:15:31,540
there's new Fedora repos packages that

00:15:29,499 --> 00:15:34,600
go out with the new definition for

00:15:31,540 --> 00:15:36,610
fedora 25 and if you want off rawhide at

00:15:34,600 --> 00:15:39,610
that point you just tell it you enable

00:15:36,610 --> 00:15:41,800
the Fedora repo and the fedora updates

00:15:39,610 --> 00:15:45,009
repo and the further updates testing

00:15:41,800 --> 00:15:47,769
repo and disable rawhide and then you go

00:15:45,009 --> 00:15:50,679
on down that path there's a number of

00:15:47,769 --> 00:15:53,649
folks I think that do that sort of thing

00:15:50,679 --> 00:15:55,870
they after a release they go to rawhide

00:15:53,649 --> 00:15:57,670
they stand rawhide till the branch and

00:15:55,870 --> 00:16:01,829
then they follow the branch till release

00:15:57,670 --> 00:16:06,329
and then repeat because they want to be

00:16:01,829 --> 00:16:08,740
involved in testing the next release

00:16:06,329 --> 00:16:09,670
particularly I think the desktop folks

00:16:08,740 --> 00:16:14,079
do that

00:16:09,670 --> 00:16:16,079
some of the QA folks also do that so

00:16:14,079 --> 00:16:18,720
it's certainly an option distress ink

00:16:16,079 --> 00:16:22,720
also works dnf'd it's terrific

00:16:18,720 --> 00:16:26,639
if you want to downgrade to a different

00:16:22,720 --> 00:16:26,639
version or side grade as the case may be

00:16:30,050 --> 00:16:36,449
so there's a the rawhide repo

00:16:34,589 --> 00:16:39,720
definitions are in a sub package of

00:16:36,449 --> 00:16:43,920
fedora repos called fedora repos rawhide

00:16:39,720 --> 00:16:47,939
and it is not installed by default so if

00:16:43,920 --> 00:16:49,230
you want to update or side-side date or

00:16:47,939 --> 00:16:51,569
distress ink or whatnot

00:16:49,230 --> 00:16:54,240
over to ride you will have to install

00:16:51,569 --> 00:16:58,319
that package that was changed a while

00:16:54,240 --> 00:17:00,000
back because inadvertently users were it

00:16:58,319 --> 00:17:02,339
wasn't it used to be installed by

00:17:00,000 --> 00:17:04,919
default and users were going in and

00:17:02,339 --> 00:17:07,140
saying I want all the software so I'm

00:17:04,919 --> 00:17:10,589
just going to enable all of these things

00:17:07,140 --> 00:17:13,319
fedora source raw honey bug info I'll

00:17:10,589 --> 00:17:14,760
just turn that all on and update and of

00:17:13,319 --> 00:17:17,880
course they would get rawhide then they

00:17:14,760 --> 00:17:21,990
get confused and so that got changed a

00:17:17,880 --> 00:17:23,939
while back obviously reinstall is

00:17:21,990 --> 00:17:25,860
another option if you want to get off

00:17:23,939 --> 00:17:27,980
the rawhide trail just reinstall with

00:17:25,860 --> 00:17:27,980
the

00:17:36,920 --> 00:17:44,300
nice I never got hardware in general

00:17:41,470 --> 00:17:47,500
things that work in a stable Fedora

00:17:44,300 --> 00:17:50,840
release are gonna work fine in rawhide

00:17:47,500 --> 00:17:53,150
sometimes rawhide has support that you

00:17:50,840 --> 00:17:57,560
need I don't know how many of you here

00:17:53,150 --> 00:18:02,930
have skylake laptops fair number that's

00:17:57,560 --> 00:18:06,050
the more recent Intel chipset there were

00:18:02,930 --> 00:18:08,390
a number of problems because Intel

00:18:06,050 --> 00:18:11,600
released the laptops with that chipset

00:18:08,390 --> 00:18:15,440
and the support for it was not available

00:18:11,600 --> 00:18:19,670
on Fedora 23 and this was before Fedora

00:18:15,440 --> 00:18:22,010
24 came out so in that sort of window

00:18:19,670 --> 00:18:25,220
rawhide actually turned out to be a lot

00:18:22,010 --> 00:18:26,780
better than the stable release just

00:18:25,220 --> 00:18:28,850
simply because it had the skylight

00:18:26,780 --> 00:18:32,480
skylight support in the kernel and the

00:18:28,850 --> 00:18:33,910
ex drivers and things like that so

00:18:32,480 --> 00:18:39,740
sometimes you'll see that kind of

00:18:33,910 --> 00:18:43,550
situation if you use any of the non free

00:18:39,740 --> 00:18:45,820
video drivers like Nvidia or ATI

00:18:43,550 --> 00:18:48,820
catalyst or any of those sort of things

00:18:45,820 --> 00:18:52,130
rod is probably not a good choice

00:18:48,820 --> 00:18:54,020
usually there's a kernel everyday just

00:18:52,130 --> 00:18:55,940
about which means you would be

00:18:54,020 --> 00:19:00,050
rebuilding your modules for those about

00:18:55,940 --> 00:19:03,350
every day if they rebuild and they're

00:19:00,050 --> 00:19:06,140
often very laggy behind versions even in

00:19:03,350 --> 00:19:09,200
stable releases so much less rawhide

00:19:06,140 --> 00:19:10,640
they're often broken and they're not

00:19:09,200 --> 00:19:13,460
going to come out with a new release for

00:19:10,640 --> 00:19:16,160
awhile I don't know if it's still true

00:19:13,460 --> 00:19:18,830
but it used to be that the Nvidia driver

00:19:16,160 --> 00:19:21,710
wouldn't work at all because rawhide

00:19:18,830 --> 00:19:24,140
kernels have debug a bunch of debug

00:19:21,710 --> 00:19:26,810
options enabled and it turned out there

00:19:24,140 --> 00:19:28,580
was a problem with their driver and

00:19:26,810 --> 00:19:31,280
certain debug options where it just

00:19:28,580 --> 00:19:33,290
wouldn't work at all so you couldn't

00:19:31,280 --> 00:19:35,980
even run it with the rawhide kernel at

00:19:33,290 --> 00:19:35,980
all so

00:19:35,990 --> 00:19:44,420
I am using the default kernel and it

00:19:42,410 --> 00:19:49,700
does have debugging but it doesn't seem

00:19:44,420 --> 00:19:51,830
to really bother me that much I guess I

00:19:49,700 --> 00:19:54,260
should have thrown in a thing about the

00:19:51,830 --> 00:19:59,510
kernel versions so the default version

00:19:54,260 --> 00:20:02,800
in rawhide has a bunch of debug info it

00:19:59,510 --> 00:20:06,200
used to have a thing called slug debug

00:20:02,800 --> 00:20:07,520
enabled and that was that really slowed

00:20:06,200 --> 00:20:09,559
things down bad

00:20:07,520 --> 00:20:11,390
so they actually got rid of that it

00:20:09,559 --> 00:20:15,710
wasn't actually that helpful so they

00:20:11,390 --> 00:20:20,540
they turned that back off also after the

00:20:15,710 --> 00:20:22,400
first release candidate of every first

00:20:20,540 --> 00:20:27,880
released candidate build of every kernel

00:20:22,400 --> 00:20:31,070
is has no debug enabled so like if 4.70

00:20:27,880 --> 00:20:40,510
rc1 comes out the first kernel built in

00:20:31,070 --> 00:20:43,400
rawhide will have no debugging correct

00:20:40,510 --> 00:20:46,460
right it's the same way it's so it's

00:20:43,400 --> 00:20:48,020
like the first rc1 one will have no

00:20:46,460 --> 00:20:52,550
debugging but they'll turn it on again

00:20:48,020 --> 00:20:55,670
for successive RC ones RC to turn it off

00:20:52,550 --> 00:20:57,710
etc that gives you if you want to run

00:20:55,670 --> 00:21:03,020
without the debug inner you can just

00:20:57,710 --> 00:21:05,860
stick to the first RC or the final yeah

00:21:03,020 --> 00:21:10,460
yeah there is also another repository

00:21:05,860 --> 00:21:14,210
kernel kernel bra hide no debug which

00:21:10,460 --> 00:21:16,670
does every version as no debugging the

00:21:14,210 --> 00:21:19,820
problem with that is if you use secure

00:21:16,670 --> 00:21:23,150
boot they're not signed so you would

00:21:19,820 --> 00:21:27,050
have to turn off secure boot and they

00:21:23,150 --> 00:21:29,450
tend to lag behind like the builds are

00:21:27,050 --> 00:21:31,940
done in kouji for rawhide and then later

00:21:29,450 --> 00:21:35,179
in the day they're done as a scratch

00:21:31,940 --> 00:21:38,270
build for that no debug repository so

00:21:35,179 --> 00:21:43,040
they tend to be you know like a day

00:21:38,270 --> 00:21:45,740
behind if that matters but I don't find

00:21:43,040 --> 00:21:47,929
the debugging to be that big a deal

00:21:45,740 --> 00:21:49,909
anymore it it

00:21:47,929 --> 00:21:51,529
is a kind of look a little noticeable

00:21:49,909 --> 00:21:54,169
like when you're booting you can see it

00:21:51,529 --> 00:22:04,659
takes a little longer but day-to-day it

00:21:54,169 --> 00:22:07,279
doesn't seem to matter at lunch is the

00:22:04,659 --> 00:22:11,240
if you got old hardware you may have

00:22:07,279 --> 00:22:16,279
problems just because if as things are

00:22:11,240 --> 00:22:19,669
disabled upstream or whatnot they will

00:22:16,279 --> 00:22:23,509
be disabled first and ride so you know

00:22:19,669 --> 00:22:25,159
if you're depending on up really well

00:22:23,509 --> 00:22:29,179
we're still building the 32-bit Intel

00:22:25,159 --> 00:22:34,570
stuff at least for the moment but you

00:22:29,179 --> 00:22:39,340
know what's a good example of this right

00:22:34,570 --> 00:22:42,049
right and you probably don't want the

00:22:39,340 --> 00:22:43,970
slowness from old hardware when you're

00:22:42,049 --> 00:22:52,009
dealing with updating lots of packages

00:22:43,970 --> 00:22:54,019
and rebooting a lot and so forth alright

00:22:52,009 --> 00:22:56,029
so a few tools

00:22:54,019 --> 00:22:59,419
everyone here hopefully is familiar with

00:22:56,029 --> 00:23:04,330
DMF now this is of course your first

00:22:59,419 --> 00:23:04,330
go-to tool for handling ride day to day

00:23:09,270 --> 00:23:15,660
it does not but you can sort it you

00:23:12,390 --> 00:23:18,720
could sort of do it yourself manually so

00:23:15,660 --> 00:23:20,640
basically what I do and this is be

00:23:18,720 --> 00:23:23,850
mentioned in a later slide for workflow

00:23:20,640 --> 00:23:27,650
but I usually update once a day and just

00:23:23,850 --> 00:23:29,850
pull in you know all the new stuff and

00:23:27,650 --> 00:23:31,380
usually it's pretty quick when you

00:23:29,850 --> 00:23:34,410
notice a problem in any kind of

00:23:31,380 --> 00:23:38,190
application that you use a lot like an

00:23:34,410 --> 00:23:40,800
email client or a browser or something

00:23:38,190 --> 00:23:42,540
like that and you know one of the first

00:23:40,800 --> 00:23:45,060
things you can go to there is

00:23:42,540 --> 00:23:47,460
oh well Firefox isn't starting or

00:23:45,060 --> 00:23:49,320
something like that and there was a

00:23:47,460 --> 00:23:49,800
firefox update and the ones that I just

00:23:49,320 --> 00:23:51,570
did

00:23:49,800 --> 00:23:53,550
I'll just downgrade it does that one

00:23:51,570 --> 00:23:58,020
work oh it does okay well now I know

00:23:53,550 --> 00:24:00,810
that it's that particular update if you

00:23:58,020 --> 00:24:02,970
don't update every day then you run into

00:24:00,810 --> 00:24:05,430
problems where you have to go further

00:24:02,970 --> 00:24:08,400
back because there may have been you

00:24:05,430 --> 00:24:10,230
know several versions between the one

00:24:08,400 --> 00:24:11,670
you had and the one you updated to you

00:24:10,230 --> 00:24:15,090
there may have been several versions you

00:24:11,670 --> 00:24:17,850
may have to use DNF and say install this

00:24:15,090 --> 00:24:19,830
Firefox fur and okay does it work yep

00:24:17,850 --> 00:24:24,510
how about this one and you know bisect

00:24:19,830 --> 00:24:26,130
it that way usually do you know you

00:24:24,510 --> 00:24:28,650
don't have to worry about records EPS if

00:24:26,130 --> 00:24:30,870
you don't care you can just do your

00:24:28,650 --> 00:24:32,940
update it'll it'll tell you

00:24:30,870 --> 00:24:35,280
oh I'm not installing these four broken

00:24:32,940 --> 00:24:36,930
dependencies you could report a bug on

00:24:35,280 --> 00:24:40,230
it if you want or talk to the maintainer

00:24:36,930 --> 00:24:42,180
but it's not going to install those

00:24:40,230 --> 00:24:44,580
packages of broken dependencies it's

00:24:42,180 --> 00:24:47,330
just going to ignore them every once in

00:24:44,580 --> 00:24:50,760
a while you run into a problem where

00:24:47,330 --> 00:24:53,250
there's some package that you have that

00:24:50,760 --> 00:24:54,840
maybe you didn't get from rawhide you

00:24:53,250 --> 00:24:57,390
got from a third party or something like

00:24:54,840 --> 00:25:01,050
that and it's holding back you know a

00:24:57,390 --> 00:25:04,530
huge bunch of other updates for those

00:25:01,050 --> 00:25:07,650
cases you can use DNF - - best and it'll

00:25:04,530 --> 00:25:11,250
tell you more information they'll tell

00:25:07,650 --> 00:25:15,300
you what thing this particular package

00:25:11,250 --> 00:25:17,460
needs to point to where where your

00:25:15,300 --> 00:25:18,850
problem is and then you can you know

00:25:17,460 --> 00:25:22,720
remove that package and up

00:25:18,850 --> 00:25:30,670
and we build it or get a newer version

00:25:22,720 --> 00:25:33,520
of that package right there they tend to

00:25:30,670 --> 00:25:38,230
lag behind it so if you have a good

00:25:33,520 --> 00:25:41,260
example its ffmpeg which every time it

00:25:38,230 --> 00:25:43,450
updates it changes its library ISO name

00:25:41,260 --> 00:25:46,180
so everything has to rebuild against it

00:25:43,450 --> 00:25:50,440
every time so if there's a something

00:25:46,180 --> 00:25:52,030
that ffmpeg depends on or if it updated

00:25:50,440 --> 00:25:53,860
you know you'll have the slew of

00:25:52,030 --> 00:25:57,490
packages and if all of them didn't get

00:25:53,860 --> 00:25:58,780
rebuilt just most of them it'll not you

00:25:57,490 --> 00:26:00,400
know you'll have the book in dependency

00:25:58,780 --> 00:26:03,850
on the old one will be depending on the

00:26:00,400 --> 00:26:07,300
old ffmpeg usually that stuff sorts

00:26:03,850 --> 00:26:09,670
itself out pretty quickly so you can

00:26:07,300 --> 00:26:13,350
just either ignore it for a few days or

00:26:09,670 --> 00:26:13,350
or try and track it down

00:26:41,720 --> 00:26:47,910
I have actually I had a request for this

00:26:46,110 --> 00:26:50,040
a long time ago and I've talked to a lot

00:26:47,910 --> 00:26:51,960
of the release engineers and I've never

00:26:50,040 --> 00:26:55,740
not been able to convince them mainly

00:26:51,960 --> 00:26:57,660
dentists but it would be nice if we kept

00:26:55,740 --> 00:26:59,940
the previous version always in the

00:26:57,660 --> 00:27:02,190
repository because then you could just

00:26:59,940 --> 00:27:03,770
DNF downgrade and it would always work

00:27:02,190 --> 00:27:06,450
because you need to have two versions

00:27:03,770 --> 00:27:09,240
but the problem with that is you know

00:27:06,450 --> 00:27:12,120
say there's a horrible security bug in

00:27:09,240 --> 00:27:14,910
version X you update to version Y at

00:27:12,120 --> 00:27:33,330
version X is still in them in the

00:27:14,910 --> 00:27:36,120
repository so yeah and the another

00:27:33,330 --> 00:27:38,220
problem with it is that it increases the

00:27:36,120 --> 00:27:41,850
amount of space it makes everything

00:27:38,220 --> 00:27:43,020
twice as big but you know we may be able

00:27:41,850 --> 00:27:45,300
to implement something like that

00:27:43,020 --> 00:27:49,370
actually I believe the next slide I've

00:27:45,300 --> 00:27:52,470
got something there which is that

00:27:49,370 --> 00:27:55,140
there's also basically being every from

00:27:52,470 --> 00:27:57,990
query and satisfied if anyone remembers

00:27:55,140 --> 00:28:00,870
young check that is the DNF equivalent

00:27:57,990 --> 00:28:03,060
of young check so it tells you of the

00:28:00,870 --> 00:28:05,670
packages you have installed do any of

00:28:03,060 --> 00:28:12,770
them have broken dependencies but you

00:28:05,670 --> 00:28:12,770
should run into that suggestions

00:28:17,480 --> 00:28:21,920
I know it still works you still have the

00:28:19,730 --> 00:28:24,350
old version it just doesn't upgrade over

00:28:21,920 --> 00:28:27,440
so you know if you have ffmpeg they

00:28:24,350 --> 00:28:29,720
updated that and package a that needs it

00:28:27,440 --> 00:28:33,800
but you have package B and it hasn't

00:28:29,720 --> 00:28:35,000
updated then you try a DNF update it'll

00:28:33,800 --> 00:28:37,700
tell you ffmpeg

00:28:35,000 --> 00:28:42,860
is not updated because package B needs

00:28:37,700 --> 00:28:44,150
the old version right if that doesn't

00:28:42,860 --> 00:28:47,330
change anything that just gives you

00:28:44,150 --> 00:28:50,330
better reporting so if you do DNF update

00:28:47,330 --> 00:28:53,060
it tells you ffmpeg was not updated or

00:28:50,330 --> 00:28:55,910
something very generic if you use best

00:28:53,060 --> 00:28:58,970
will say ffmpeg was not updated because

00:28:55,910 --> 00:29:03,260
package B means blah blah blah version

00:28:58,970 --> 00:29:05,690
which is not provided so it gives you

00:29:03,260 --> 00:29:09,380
more indication of where where the

00:29:05,690 --> 00:29:11,300
actual problem is the best they don't

00:29:09,380 --> 00:29:12,050
want to do that because they think it's

00:29:11,300 --> 00:29:23,900
too confusing

00:29:12,050 --> 00:29:27,290
I guess yeah I mean you could still see

00:29:23,900 --> 00:29:29,300
for a long time it actually for a number

00:29:27,290 --> 00:29:31,730
of years DNF didn't report any of the

00:29:29,300 --> 00:29:33,590
broken dependency stuff at all so you

00:29:31,730 --> 00:29:35,780
would do DNF update it would say I'm

00:29:33,590 --> 00:29:38,300
updating these five packages done you'd

00:29:35,780 --> 00:29:40,610
be like cool I'm up today but it it

00:29:38,300 --> 00:29:42,410
resolved that ffmpeg thing and just

00:29:40,610 --> 00:29:45,020
silently didn't tell you what you feel

00:29:42,410 --> 00:29:49,300
about it so at least now it does give

00:29:45,020 --> 00:29:49,300
you like a little blurb

00:29:58,169 --> 00:30:09,570
reporting both of broken gets to matter

00:30:00,239 --> 00:30:23,749
because it gives us most issues oh yes

00:30:09,570 --> 00:30:28,499
I'm familiar with that book no because

00:30:23,749 --> 00:30:32,249
well to some extent in my the problem is

00:30:28,499 --> 00:30:34,850
any package that changes its its other

00:30:32,249 --> 00:30:37,049
stuff that's not packaged so say you

00:30:34,850 --> 00:30:38,970
update to the rawhide version of

00:30:37,049 --> 00:30:41,070
PostgreSQL or something like that and it

00:30:38,970 --> 00:30:44,159
changes the database format you can't

00:30:41,070 --> 00:30:46,350
easily go back or you update to Firefox

00:30:44,159 --> 00:30:49,320
and then changes the you know your user

00:30:46,350 --> 00:30:51,210
preferences or whatever but if it's not

00:30:49,320 --> 00:30:54,059
something like that then yeah you could

00:30:51,210 --> 00:30:57,720
just do a history undo bla bla bla it

00:30:54,059 --> 00:30:59,489
provided you had the repository enabled

00:30:57,720 --> 00:31:05,190
you need to have all the packages still

00:30:59,489 --> 00:31:08,519
available to do that but yeah and you

00:31:05,190 --> 00:31:11,070
can exclude or set particular versions

00:31:08,519 --> 00:31:12,869
of the DNF comm and I've had to do this

00:31:11,070 --> 00:31:15,659
a few times when there's some broken

00:31:12,869 --> 00:31:18,149
package I filed a bug the maintainer

00:31:15,659 --> 00:31:20,190
knows but it's not updated yet I don't

00:31:18,149 --> 00:31:24,090
want to get it every time I update so

00:31:20,190 --> 00:31:26,070
you know just stick and exclude package

00:31:24,090 --> 00:31:34,169
version bla bla bla

00:31:26,070 --> 00:31:36,570
and it'll ignore it or yeah and usually

00:31:34,169 --> 00:31:38,820
if you're doing that it's very good to

00:31:36,570 --> 00:31:40,499
have the full version in there because

00:31:38,820 --> 00:31:42,090
otherwise you'll forget that you have it

00:31:40,499 --> 00:31:44,580
in there and you'll never get updates

00:31:42,090 --> 00:31:47,070
from that package again if you just put

00:31:44,580 --> 00:31:50,129
the package name so if you put package

00:31:47,070 --> 00:31:52,980
name - one point or whatever it's only

00:31:50,129 --> 00:31:55,710
going to exclude the broken version and

00:31:52,980 --> 00:31:58,009
then we'll get you back on track after

00:31:55,710 --> 00:31:58,009
that

00:32:00,310 --> 00:32:06,170
okay Kouji the command mine I don't know

00:32:04,700 --> 00:32:08,780
how many of you folks are package

00:32:06,170 --> 00:32:11,240
maintainers but Kochi the command line

00:32:08,780 --> 00:32:14,060
client is actually very useful for non

00:32:11,240 --> 00:32:18,800
package maintainers also especially

00:32:14,060 --> 00:32:21,470
those folks that use variety so right is

00:32:18,800 --> 00:32:24,290
not 100% signed but it's mostly signed

00:32:21,470 --> 00:32:26,450
we have an auto sign process that sits

00:32:24,290 --> 00:32:28,760
there and tries to sign everything but

00:32:26,450 --> 00:32:31,070
the problem is the compose starts when

00:32:28,760 --> 00:32:34,130
it starts and the auto signers just

00:32:31,070 --> 00:32:37,190
signing as it goes you can run into a

00:32:34,130 --> 00:32:39,430
case where builds land and are not sign

00:32:37,190 --> 00:32:43,400
and then the Kapost starts and then

00:32:39,430 --> 00:32:45,440
those unsigned packages go out you can't

00:32:43,400 --> 00:32:47,480
use the code koji command-line tool to

00:32:45,440 --> 00:32:49,300
download signed packages if they're

00:32:47,480 --> 00:32:51,800
available for whatever it is that you're

00:32:49,300 --> 00:32:58,160
trying to get I should have put a

00:32:51,800 --> 00:33:00,590
command line there's a koji option to

00:32:58,160 --> 00:33:06,650
get a package signed by whatever key you

00:33:00,590 --> 00:33:09,760
wish if it is code you download build is

00:33:06,650 --> 00:33:12,530
very handy if you know you've updated

00:33:09,760 --> 00:33:14,690
Firefox baroque you want to go back to

00:33:12,530 --> 00:33:16,850
the previous day's version but obviously

00:33:14,690 --> 00:33:18,380
it's not in the repository anymore you

00:33:16,850 --> 00:33:20,510
can use download build to get the

00:33:18,380 --> 00:33:22,130
previous version out of koji easily

00:33:20,510 --> 00:33:28,940
instead of going to the web page in my

00:33:22,130 --> 00:33:31,220
view or newer if you like Anna and this

00:33:28,940 --> 00:33:36,500
one as interesting is something I do

00:33:31,220 --> 00:33:39,680
which maybe other people don't want to

00:33:36,500 --> 00:33:42,550
you but I find it handy I tend to update

00:33:39,680 --> 00:33:44,630
once a day after you know in the morning

00:33:42,550 --> 00:33:47,300
get all the rawhide stuff from the

00:33:44,630 --> 00:33:49,880
previous day but if I'm going to update

00:33:47,300 --> 00:33:52,640
all the stuff and reboot I would like to

00:33:49,880 --> 00:33:55,880
get the day's kernel the since they're

00:33:52,640 --> 00:33:57,890
usually about daily but a lot of times

00:33:55,880 --> 00:34:00,530
in the mornings when I'm doing my update

00:33:57,890 --> 00:34:02,090
the current still building and so I

00:34:00,530 --> 00:34:04,880
could wait till the next day you get

00:34:02,090 --> 00:34:07,040
that kernel or you can come into Koji

00:34:04,880 --> 00:34:09,740
and actually grab it as long as you're

00:34:07,040 --> 00:34:10,470
not using arm d7 because that's usually

00:34:09,740 --> 00:34:12,570
last

00:34:10,470 --> 00:34:14,010
protector to finish you can grab the

00:34:12,570 --> 00:34:17,129
this will change

00:34:14,010 --> 00:34:20,790
yeah well very soon actually but in any

00:34:17,129 --> 00:34:23,099
case you can grab things if you again

00:34:20,790 --> 00:34:26,210
the example the Firefox example Firefox

00:34:23,099 --> 00:34:29,010
is broken you downgrade it at works and

00:34:26,210 --> 00:34:30,899
so you go okay well is there a newer

00:34:29,010 --> 00:34:33,030
version in country well there might be I

00:34:30,899 --> 00:34:34,679
do a version that's already fixed you

00:34:33,030 --> 00:34:42,720
just need to grab that version instead

00:34:34,679 --> 00:34:47,340
of downgrading so upgrade now I just go

00:34:42,720 --> 00:34:54,710
in there look well if I'm gonna reboot

00:34:47,340 --> 00:34:57,510
anyway very handy for getting packages

00:34:54,710 --> 00:34:59,609
sometimes they're scratch builds

00:34:57,510 --> 00:35:02,880
available to test things maintainer so

00:34:59,609 --> 00:35:06,180
you test the scratch build and see if it

00:35:02,880 --> 00:35:08,820
does fixes whatever sometimes I will do

00:35:06,180 --> 00:35:10,680
a scratch build it but if the problem if

00:35:08,820 --> 00:35:12,869
I see a problem and I know what it is

00:35:10,680 --> 00:35:14,609
and I know how to fix it or I think I do

00:35:12,869 --> 00:35:16,650
I'll try and do a little scratch build

00:35:14,609 --> 00:35:18,420
to fix it and if it works then I'll told

00:35:16,650 --> 00:35:25,220
the maintainer you know that's alright

00:35:18,420 --> 00:35:25,220
thanks so Koji is fairly handy

00:35:35,230 --> 00:35:48,530
right we just blew the same I'm coming

00:35:39,170 --> 00:35:56,930
to picture yep so you know about selinux

00:35:48,530 --> 00:35:58,250
I know a lot of folks look if they run

00:35:56,930 --> 00:36:00,830
into a problem or whatnot they would

00:35:58,250 --> 00:36:03,230
look at as he Linux but I've noticed a

00:36:00,830 --> 00:36:06,410
lot of rawhide using folks don't tend to

00:36:03,230 --> 00:36:08,650
notice this step and there are selinux

00:36:06,410 --> 00:36:11,450
bugs that happen from time to time and

00:36:08,650 --> 00:36:13,190
so one of the first things you can do if

00:36:11,450 --> 00:36:18,200
you're debugging a problem especially a

00:36:13,190 --> 00:36:19,910
boot problem or a desktop log-in problem

00:36:18,200 --> 00:36:22,010
or something like that is go to

00:36:19,910 --> 00:36:26,030
permissive mode and see if the problem

00:36:22,010 --> 00:36:29,150
persists I can't count the number of

00:36:26,030 --> 00:36:31,340
times people you know pop up on IRC and

00:36:29,150 --> 00:36:33,920
say oh no this is i can't log in and

00:36:31,340 --> 00:36:35,720
rawhide is broken I'm like what it was

00:36:33,920 --> 00:36:38,680
working for me all right let's look at

00:36:35,720 --> 00:36:42,140
this oh yeah you know try it as

00:36:38,680 --> 00:36:44,690
permissive mode these things tend to get

00:36:42,140 --> 00:36:46,670
fixed fairly quickly the su linux policy

00:36:44,690 --> 00:36:53,330
maintainer czar actually pretty on the

00:36:46,670 --> 00:36:55,520
ball but it's a really good button the

00:36:53,330 --> 00:36:57,770
audit stuff how many people here are

00:36:55,520 --> 00:36:59,750
familiar with don't audit rules yeah

00:36:57,770 --> 00:37:03,340
they're kind of they're kind of sneaky

00:36:59,750 --> 00:37:06,350
so su Linux logs when there are denials

00:37:03,340 --> 00:37:08,990
except not if it's a don't audit rule

00:37:06,350 --> 00:37:11,180
huh so there are cases where you can say

00:37:08,990 --> 00:37:14,000
I don't think it's selinux cuz I didn't

00:37:11,180 --> 00:37:16,010
see any denials in my logs well I'll try

00:37:14,000 --> 00:37:21,490
it one permissive mode anyway just to

00:37:16,010 --> 00:37:24,170
see and there are those cases where it

00:37:21,490 --> 00:37:28,270
didn't like it won't log anything but

00:37:24,170 --> 00:37:28,270
permissive mode will fix it so

00:37:30,420 --> 00:37:35,820
there there's a list of them in the

00:37:32,880 --> 00:37:39,500
policy and you could turn it off there's

00:37:35,820 --> 00:37:41,880
a se module command that turns it off

00:37:39,500 --> 00:37:45,990
unfortunately then you get flooded with

00:37:41,880 --> 00:37:47,820
all kinds of irrelevant messages which

00:37:45,990 --> 00:37:49,980
is why there donatin rules there like

00:37:47,820 --> 00:37:52,890
things usually that shouldn't affect

00:37:49,980 --> 00:38:00,140
anything and just generate a lot of log

00:37:52,890 --> 00:38:00,140
lines but there are occasions definitely

00:38:00,440 --> 00:38:07,650
and another thing to try or another

00:38:04,860 --> 00:38:10,440
thing to note here is if you're having

00:38:07,650 --> 00:38:12,510
some problem and you set set in force

00:38:10,440 --> 00:38:14,640
zero and you're like oh well the

00:38:12,510 --> 00:38:18,960
problems still there well try rebooting

00:38:14,640 --> 00:38:21,390
also because someone ran into this just

00:38:18,960 --> 00:38:24,900
a week or two ago there was an SV Linux

00:38:21,390 --> 00:38:28,530
problem in the login process SELinux was

00:38:24,900 --> 00:38:31,470
a system D moved something SC Linux

00:38:28,530 --> 00:38:34,170
wasn't updated for that yet and when you

00:38:31,470 --> 00:38:37,230
would log in it would not give your user

00:38:34,170 --> 00:38:39,540
and a seat it wouldn't show your user

00:38:37,230 --> 00:38:44,610
has logged in and then you couldn't log

00:38:39,540 --> 00:38:46,200
in at a graphical thing just sending

00:38:44,610 --> 00:38:47,540
that permissive after-the-fact didn't

00:38:46,200 --> 00:38:51,030
fix it you would have to set it

00:38:47,540 --> 00:38:52,860
permissive and remove in permissive - in

00:38:51,030 --> 00:39:00,270
order to get that process to actually

00:38:52,860 --> 00:39:02,750
function so lots of fun debugging of

00:39:00,270 --> 00:39:02,750
course there's

00:39:04,720 --> 00:39:13,190
gg-good for simple stuff and if you run

00:39:09,890 --> 00:39:15,260
into something that crashes and you have

00:39:13,190 --> 00:39:17,119
an important report where it can file

00:39:15,260 --> 00:39:19,430
the bug for you easily that's great and

00:39:17,119 --> 00:39:23,619
then you can just downgrade to the

00:39:19,430 --> 00:39:23,619
previous working version well that's

00:39:34,110 --> 00:39:39,870
uh-uh gathering news about changes

00:39:37,530 --> 00:39:42,390
there's obviously all packages or most

00:39:39,870 --> 00:39:45,900
packages have a change log or a news

00:39:42,390 --> 00:39:48,810
file or some sort of get information as

00:39:45,900 --> 00:39:50,970
to what changed if you're trying to

00:39:48,810 --> 00:39:54,420
track down what package is responsible

00:39:50,970 --> 00:39:57,660
for some particular bug or breakage DNF

00:39:54,420 --> 00:40:00,510
log is very important you can see what

00:39:57,660 --> 00:40:02,490
packages we're updated sometimes it's

00:40:00,510 --> 00:40:05,250
you know you think oh Firefox isn't

00:40:02,490 --> 00:40:06,840
running so it's a bug in Firefox but

00:40:05,250 --> 00:40:09,420
then you downgrade it and it doesn't

00:40:06,840 --> 00:40:12,840
change anything and so then you look at

00:40:09,420 --> 00:40:15,960
what was upgraded well this is this well

00:40:12,840 --> 00:40:19,410
maybe that's related and it gives you a

00:40:15,960 --> 00:40:21,660
place to start the rawhide reports on

00:40:19,410 --> 00:40:24,480
the mailing lists are sometimes useful

00:40:21,660 --> 00:40:26,160
for tracking down win a particular

00:40:24,480 --> 00:40:30,090
change when I owned in rawhide when a

00:40:26,160 --> 00:40:35,090
particular version went out all those

00:40:30,090 --> 00:40:35,090
are looking for more information

00:40:39,430 --> 00:40:44,260
one thing that I use a lot I have a

00:40:41,920 --> 00:40:47,470
Firefox alias for it we have this

00:40:44,260 --> 00:40:50,319
packages application and as part of that

00:40:47,470 --> 00:40:53,109
it can give you a page with all the bugs

00:40:50,319 --> 00:40:55,269
for a particular package so I have a

00:40:53,109 --> 00:40:56,740
Firefox alias for this so I can just

00:40:55,269 --> 00:40:59,380
enter the name of the package and it'll

00:40:56,740 --> 00:41:01,420
get me there that bug page and I find

00:40:59,380 --> 00:41:04,420
that a really easy place to be able to

00:41:01,420 --> 00:41:07,029
go and just search for the terms of

00:41:04,420 --> 00:41:09,660
whatever bug you can Firefox crashes on

00:41:07,029 --> 00:41:13,210
starred or

00:41:09,660 --> 00:41:15,549
no high DPI support or whatever it is

00:41:13,210 --> 00:41:17,549
that I'm looking for it's it's kind of

00:41:15,549 --> 00:41:22,359
easy to see if there's a bug Arden file

00:41:17,549 --> 00:41:25,000
by going there and a lot of times in

00:41:22,359 --> 00:41:27,579
bright if you're searching for whatever

00:41:25,000 --> 00:41:30,910
is causing your problem package

00:41:27,579 --> 00:41:33,279
maintainers will put bug numbers in the

00:41:30,910 --> 00:41:37,089
in the package change log as they

00:41:33,279 --> 00:41:38,950
rebuild things and even if it sounds

00:41:37,089 --> 00:41:41,980
unrelated I found it to be very useful

00:41:38,950 --> 00:41:44,890
you know say again Firefox breaks and

00:41:41,980 --> 00:41:48,430
the Firefox change log says fixed bug

00:41:44,890 --> 00:41:51,490
one two three four five okay so you go

00:41:48,430 --> 00:41:55,059
look at that bug even if it's unrelated

00:41:51,490 --> 00:41:57,640
it might be it's still and a lot of

00:41:55,059 --> 00:41:59,529
times it is related and you can actually

00:41:57,640 --> 00:42:00,430
just comment in that bug rather than

00:41:59,529 --> 00:42:03,549
opening a new one

00:42:00,430 --> 00:42:05,859
hey this broke Firefox it doesn't launch

00:42:03,549 --> 00:42:09,730
anymore because the previous version

00:42:05,859 --> 00:42:12,339
works so that's kind of a nice shortcut

00:42:09,730 --> 00:42:21,640
and that gets the maintainer x'

00:42:12,339 --> 00:42:25,750
attention more quickly I think waiting

00:42:21,640 --> 00:42:30,880
list it's good to be subscribed to the

00:42:25,750 --> 00:42:32,619
QA list because there's a lot of

00:42:30,880 --> 00:42:34,180
discussion there if something big is

00:42:32,619 --> 00:42:36,480
broken you're going to see somebody

00:42:34,180 --> 00:42:41,789
mention it there

00:42:36,480 --> 00:42:47,969
there's also develop

00:42:41,789 --> 00:42:54,059
which folks are happy to yeah now they

00:42:47,969 --> 00:42:56,160
don't like that right so here's the

00:42:54,059 --> 00:42:59,329
update cadence I've you daily

00:42:56,160 --> 00:43:02,309
I reviewed every time there's a kernel I

00:42:59,329 --> 00:43:04,709
do have a recipe media handy I haven't

00:43:02,309 --> 00:43:06,539
had to use it in probably a year and a

00:43:04,709 --> 00:43:09,390
half something like that or maybe even

00:43:06,539 --> 00:43:13,699
more than that it just doesn't happen

00:43:09,390 --> 00:43:18,539
that there's a problem but is that bad

00:43:13,699 --> 00:43:20,160
we're low on time I think some

00:43:18,539 --> 00:43:23,459
alternatives it's a good idea to have

00:43:20,160 --> 00:43:27,689
alternatives I being a crazy person

00:43:23,459 --> 00:43:29,339
switch between xfce and no desktops so I

00:43:27,689 --> 00:43:32,339
know how to use either one I can get my

00:43:29,339 --> 00:43:34,880
work done in either one and it's very

00:43:32,339 --> 00:43:38,939
handy to have some knowledge of another

00:43:34,880 --> 00:43:43,169
alternative there say gdm breaks and you

00:43:38,939 --> 00:43:44,699
can't log into gnome or you know except

00:43:43,169 --> 00:43:47,249
c-terminal breaks and you can't use that

00:43:44,699 --> 00:43:49,380
or or whatever if you have these

00:43:47,249 --> 00:44:01,799
alternatives you can switch to that and

00:43:49,380 --> 00:44:02,459
debug whatever the problem is it's true

00:44:01,799 --> 00:44:05,449
it's true

00:44:02,459 --> 00:44:05,449
yep

00:44:05,759 --> 00:44:11,759
I have Firefox as a browser breaks every

00:44:09,599 --> 00:44:14,459
once in a while so it's good to have the

00:44:11,759 --> 00:44:15,599
PIFAN ii installed or Midori or

00:44:14,459 --> 00:44:18,919
something like that that you can

00:44:15,599 --> 00:44:20,640
actually still browse if you need to

00:44:18,919 --> 00:44:24,869
alternatives also help you troubleshoot

00:44:20,640 --> 00:44:28,499
so you can see if a problem and Firefox

00:44:24,869 --> 00:44:30,929
happens an epiphany or not sometimes

00:44:28,499 --> 00:44:32,999
testing with any user is a good idea you

00:44:30,929 --> 00:44:34,439
can create a new user account login as

00:44:32,999 --> 00:44:37,769
that see if the problem still persists

00:44:34,439 --> 00:44:39,659
if it does then it's system-wide if it

00:44:37,769 --> 00:44:43,130
doesn't then it's something in your ears

00:44:39,659 --> 00:44:43,130
your users config

00:44:44,890 --> 00:44:50,180
it's just a quick now my backups backups

00:44:48,590 --> 00:44:53,980
are as important as ever

00:44:50,180 --> 00:45:01,870
I view backups on my laptop nightly and

00:44:53,980 --> 00:45:05,450
I almost never restore anything so I do

00:45:01,870 --> 00:45:07,160
and occasionally it's useful to go look

00:45:05,450 --> 00:45:10,880
at old config file or something like

00:45:07,160 --> 00:45:15,710
that but it's just you you want your

00:45:10,880 --> 00:45:19,250
data to be preserved a few notes

00:45:15,710 --> 00:45:22,490
unbranched which we just branched Fedora

00:45:19,250 --> 00:45:24,380
25 off rawhide and for the first part of

00:45:22,490 --> 00:45:26,480
its life it kind of lives like rawhide

00:45:24,380 --> 00:45:29,570
it just composes every day and there's

00:45:26,480 --> 00:45:32,300
no update system why not we then enable

00:45:29,570 --> 00:45:33,710
Bodie you can use Bodie dash D to

00:45:32,300 --> 00:45:35,900
download updates so if there's a

00:45:33,710 --> 00:45:37,610
particular update your interests and

00:45:35,900 --> 00:45:40,970
it'll download all the packages in it

00:45:37,610 --> 00:45:42,470
for you branch that's the advantage of

00:45:40,970 --> 00:45:44,630
all the new stuff codes and updates

00:45:42,470 --> 00:45:47,870
testing and then only goes into the base

00:45:44,630 --> 00:45:50,390
repo so there you have actually a way to

00:45:47,870 --> 00:45:52,370
do a downgrade because the base repo has

00:45:50,390 --> 00:45:56,300
the old version and updates testing has

00:45:52,370 --> 00:46:03,530
the new version so easy karma is good

00:45:56,300 --> 00:46:05,810
for providing oh yes quick now you can

00:46:03,530 --> 00:46:09,230
further on the edge if you want to be

00:46:05,810 --> 00:46:11,090
even further than ride on the edge Kouji

00:46:09,230 --> 00:46:14,210
has a build route that it uses to build

00:46:11,090 --> 00:46:17,930
packages you can in fact enable this as

00:46:14,210 --> 00:46:20,270
a repository the problem with it is it's

00:46:17,930 --> 00:46:23,330
not multi lens so if you use any 32-bit

00:46:20,270 --> 00:46:26,060
stuff it's not going to have that it's

00:46:23,330 --> 00:46:27,890
not signed and there could be problems

00:46:26,060 --> 00:46:30,770
where the maintainer builds a package

00:46:27,890 --> 00:46:32,750
you update to it and then they decide oh

00:46:30,770 --> 00:46:34,700
that package is broken and untag it and

00:46:32,750 --> 00:46:37,310
it goes away and you still have the

00:46:34,700 --> 00:46:39,340
newer version but that can be very handy

00:46:37,310 --> 00:46:43,090
to you pull things from if you

00:46:39,340 --> 00:46:47,230
there's there's some pics I tend to use

00:46:43,090 --> 00:46:50,920
that for when things are tagged into to

00:46:47,230 --> 00:46:52,810
rawhide I look I use that to update and

00:46:50,920 --> 00:46:55,810
see if there's any big problems and

00:46:52,810 --> 00:46:57,310
occasionally I've used it to look at

00:46:55,810 --> 00:47:00,640
important things like a new system to

00:46:57,310 --> 00:47:03,790
eat and see if it breaks anything that

00:47:00,640 --> 00:47:13,540
kind of stuff you can also grab stuff

00:47:03,790 --> 00:47:17,700
from coogee so the future we're looking

00:47:13,540 --> 00:47:20,440
at gating rawhide and by gating we mean

00:47:17,700 --> 00:47:25,990
some steps so that we can know that it's

00:47:20,440 --> 00:47:28,840
all signed the install path we're

00:47:25,990 --> 00:47:32,170
talking about gating on open QA so open

00:47:28,840 --> 00:47:34,510
QA says hey this all passed then we can

00:47:32,170 --> 00:47:37,000
push that out if it says this didn't

00:47:34,510 --> 00:47:39,310
pass then we don't we just don't

00:47:37,000 --> 00:47:42,910
advertise those images we keep the last

00:47:39,310 --> 00:47:45,130
working images that are available and

00:47:42,910 --> 00:47:56,790
maybe update the images once a week

00:47:45,130 --> 00:47:56,790
something like that earlier

00:48:15,810 --> 00:48:22,480
not that I know of I mean Koji has them

00:48:18,610 --> 00:48:25,170
all so I would say it would be perhaps

00:48:22,480 --> 00:48:27,250
feasible for a DNF plugin that did that

00:48:25,170 --> 00:48:30,420
the talk to Koji

00:48:27,250 --> 00:48:30,420
but yeah

00:48:33,500 --> 00:48:46,050
Dependencies you would have to find it

00:48:35,790 --> 00:48:48,120
the whole tree they are if they are well

00:48:46,050 --> 00:48:50,250
if you download just from koji go to the

00:48:48,120 --> 00:48:52,230
webpage and click download you get the

00:48:50,250 --> 00:48:54,510
unsigned version but if you look at the

00:48:52,230 --> 00:48:57,120
command line you can tell it Koji

00:48:54,510 --> 00:48:59,700
download this build signed by this key

00:48:57,120 --> 00:49:01,080
and if if it is if it has been signed by

00:48:59,700 --> 00:49:03,510
the key you'll get that signed version

00:49:01,080 --> 00:49:07,020
so there is a way to download them sign

00:49:03,510 --> 00:49:14,160
from koji if they're son anything that's

00:49:07,020 --> 00:49:16,950
been released has been signed it fits

00:49:14,160 --> 00:49:25,830
into end-of-life reliefs or it's not

00:49:16,950 --> 00:49:28,260
something that's still tagged in yeah I

00:49:25,830 --> 00:49:35,670
don't I have those sort of appeared

00:49:28,260 --> 00:49:38,250
after my my use of ride but yeah I don't

00:49:35,670 --> 00:49:41,130
know I haven't use arch I've heard quite

00:49:38,250 --> 00:49:42,840
a bit about Seuss's tumble lead and

00:49:41,130 --> 00:49:47,640
that's a very interesting thing they

00:49:42,840 --> 00:49:50,250
sort of do a ride version where they do

00:49:47,640 --> 00:49:52,500
rawhide and then they test it a bunch

00:49:50,250 --> 00:49:54,360
and then release it like a snapshot of

00:49:52,500 --> 00:49:58,110
reading weaker to use something like

00:49:54,360 --> 00:50:00,210
that so it's it's slower than rawhide

00:49:58,110 --> 00:50:02,400
but more stable perhaps because it's

00:50:00,210 --> 00:50:04,830
gone through the day QA and we want to

00:50:02,400 --> 00:50:08,040
try and get rawhide with open QA and I

00:50:04,830 --> 00:50:10,260
think that'll help that as well

00:50:08,040 --> 00:50:11,310
I think rawhide is a rolling

00:50:10,260 --> 00:50:14,540
distribution

00:50:11,310 --> 00:50:18,300
some people argue with me about that but

00:50:14,540 --> 00:50:21,140
and I think some people like that sort

00:50:18,300 --> 00:50:23,730
of thing but most people don't because

00:50:21,140 --> 00:50:26,730
you do not have any control over win

00:50:23,730 --> 00:50:28,830
major things land so like say you're a

00:50:26,730 --> 00:50:31,830
document developer you depend on libera

00:50:28,830 --> 00:50:34,410
office use it you know full-time if

00:50:31,830 --> 00:50:36,150
you're on a true rolling release you get

00:50:34,410 --> 00:50:37,040
the new version of liquor office when

00:50:36,150 --> 00:50:39,860
you're

00:50:37,040 --> 00:50:41,030
tribution rolls it to you and so you

00:50:39,860 --> 00:50:42,530
know maybe you're working on a big

00:50:41,030 --> 00:50:53,840
contract or something like that you

00:50:42,530 --> 00:50:55,760
don't want it you okay yep so in the

00:50:53,840 --> 00:50:57,320
Fedora world you would say I mean those

00:50:55,760 --> 00:51:00,080
people would want to stick to a stable

00:50:57,320 --> 00:51:03,110
release and then uh oh I need to upgrade

00:51:00,080 --> 00:51:10,780
to Fedora 25 I'll schedule that you know

00:51:03,110 --> 00:51:10,780
next weekend when I have time you could

00:51:14,200 --> 00:51:26,140
well you you don't know it's there until

00:51:16,370 --> 00:51:26,140
it's sure absolutely absolutely

00:51:29,140 --> 00:51:36,350
it's not a full price because believe

00:51:33,080 --> 00:51:47,210
schools update right yep yeah sometimes

00:51:36,350 --> 00:51:50,660
it's hard to track this things down this

00:51:47,210 --> 00:51:54,170
when I run no hiding place it will find

00:51:50,660 --> 00:51:56,500
while trying to depress trying to press

00:51:54,170 --> 00:51:56,500
anything

00:51:56,990 --> 00:52:03,360
huh yeah I I actually started doing this

00:52:01,380 --> 00:52:06,270
presentation on impression rawhide it

00:52:03,360 --> 00:52:09,390
was really slow like you would type a

00:52:06,270 --> 00:52:11,310
sentence and then you know maybe have 30

00:52:09,390 --> 00:52:13,890
seconds later it would start to appear

00:52:11,310 --> 00:52:15,150
he's old so that may have been the same

00:52:13,890 --> 00:52:20,520
thing you saw so I switched to

00:52:15,150 --> 00:52:26,670
hovercraft inasmuch as you about 3 years

00:52:20,520 --> 00:52:29,460
full time since my well actually before

00:52:26,670 --> 00:52:33,870
I had a rawhide install that was using

00:52:29,460 --> 00:52:38,190
butter FS and that didn't go too well I

00:52:33,870 --> 00:52:42,230
had crashes and data loss yeah and then

00:52:38,190 --> 00:52:42,230
I reinstalled and I had that same I

00:52:45,950 --> 00:52:50,220
don't know what caused it

00:52:48,270 --> 00:52:52,230
but I worked with one of the developers

00:52:50,220 --> 00:52:56,400
and he gave me a tool that got like a

00:52:52,230 --> 00:53:14,540
lot of data back but it was this was

00:52:56,400 --> 00:53:19,020
three years ago that's a long time yep

00:53:14,540 --> 00:53:22,380
anything else on the butter at this

00:53:19,020 --> 00:53:26,130
point I use my laptop I don't actually

00:53:22,380 --> 00:53:27,589
run raw but I use both on my laptop and

00:53:26,130 --> 00:53:30,529
snapshot

00:53:27,589 --> 00:53:32,900
including food like that includes all

00:53:30,529 --> 00:53:35,779
your hurdles shitburger snapshotted de

00:53:32,900 --> 00:53:37,640
Paz and that's a pretty good model I

00:53:35,779 --> 00:53:40,069
think it would help draw as long as

00:53:37,640 --> 00:53:41,689
butter at best a stable right so that's

00:53:40,069 --> 00:53:43,249
that's the dependent factor you don't

00:53:41,689 --> 00:53:45,170
know when that's gonna break it ever

00:53:43,249 --> 00:54:06,529
does but you could do the same thing

00:53:45,170 --> 00:54:08,769
with all right well thank you guys very

00:54:06,529 --> 00:54:08,769

YouTube URL: https://www.youtube.com/watch?v=BHoh3q5qEQc


