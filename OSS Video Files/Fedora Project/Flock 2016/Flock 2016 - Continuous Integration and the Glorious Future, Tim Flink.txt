Title: Flock 2016 - Continuous Integration and the Glorious Future, Tim Flink
Publication date: 2016-08-21
Playlist: Flock 2016
Description: 
	In the last year or two, there has been more talk around the idea of continuous integration (CI) and how it can be used to improve Fedora. This talk will focus on what CI means in the context of a distro like Fedora, moving past the buzzwords and how we're moving towards this glorious future.

https://flock2016.sched.org/event/76mo/continuous-integration-and-the-glorious-future

This video was recorded at the annual Fedora contributor conference, Flock, in KrakÃ³w, Poland, from August 2-5, 2016. You can learn more about Flock at https://flocktofedora.org.

#FlockToFedora
Captions: 
	00:00:00,000 --> 00:00:05,130
I'm going to do my best talk loud enough

00:00:01,680 --> 00:00:09,630
set the laptop to pick me up my name is

00:00:05,130 --> 00:00:13,230
Tim and I work for a head as part of

00:00:09,630 --> 00:00:16,970
Fedora QA and one of the things I spent

00:00:13,230 --> 00:00:19,650
pretty much all my time on is automation

00:00:16,970 --> 00:00:21,390
and what I'm planning to talk about

00:00:19,650 --> 00:00:24,289
today is continuous integrally

00:00:21,390 --> 00:00:27,480
integration and the glorious future

00:00:24,289 --> 00:00:29,519
generally to where we're going and how

00:00:27,480 --> 00:00:32,640
we're going to end up in this glorious

00:00:29,519 --> 00:00:36,090
future so what I plan to talk about is a

00:00:32,640 --> 00:00:37,590
bit about you know defining things you

00:00:36,090 --> 00:00:39,390
know what exactly are we talking about

00:00:37,590 --> 00:00:41,430
and then start asking questions that may

00:00:39,390 --> 00:00:44,430
sound a bit silly where are we where are

00:00:41,430 --> 00:00:46,440
we going how are we getting there and

00:00:44,430 --> 00:00:50,309
then come to a conclusion and leave some

00:00:46,440 --> 00:00:53,969
time at the end for questions so what

00:00:50,309 --> 00:00:56,730
exactly are we talking about so

00:00:53,969 --> 00:01:00,930
continuous integration as a term first

00:00:56,730 --> 00:01:02,969
showed up in the 90s and it was when it

00:01:00,930 --> 00:01:06,900
first showed up it was a proposed

00:01:02,969 --> 00:01:09,780
solution to the problem that they were

00:01:06,900 --> 00:01:11,939
hoping to solve and heaven well they

00:01:09,780 --> 00:01:13,680
have solved in some ways of you know

00:01:11,939 --> 00:01:15,210
software projects going on you know

00:01:13,680 --> 00:01:16,740
having development work development work

00:01:15,210 --> 00:01:18,270
development work and then do all the

00:01:16,740 --> 00:01:20,130
integration at the end and for some

00:01:18,270 --> 00:01:21,420
reason they would hit problems because

00:01:20,130 --> 00:01:24,210
that was the first time they tried the

00:01:21,420 --> 00:01:27,930
integration so continuous integration

00:01:24,210 --> 00:01:30,180
was this idea of trying to put

00:01:27,930 --> 00:01:32,159
everything together regular points along

00:01:30,180 --> 00:01:37,259
the way so that you don't end up with

00:01:32,159 --> 00:01:40,829
those nasty surprises at the end but it

00:01:37,259 --> 00:01:44,130
was originally meant to run maybe once a

00:01:40,829 --> 00:01:45,840
day at most it wasn't until the late 90s

00:01:44,130 --> 00:01:49,140
early 2000s with extreme programming

00:01:45,840 --> 00:01:50,970
that it continuous integration became

00:01:49,140 --> 00:01:53,970
more what we think of today where it's

00:01:50,970 --> 00:01:57,630
you know a suite of automated tests that

00:01:53,970 --> 00:02:00,750
run at every commit at every change on

00:01:57,630 --> 00:02:02,939
every poll request running tens of times

00:02:00,750 --> 00:02:07,300
a day up to a hundreds of times a day

00:02:02,939 --> 00:02:13,000
depending on your exact implementation

00:02:07,300 --> 00:02:15,430
so from what wikipedia lists as

00:02:13,000 --> 00:02:17,390
continuous integration is that there are

00:02:15,430 --> 00:02:22,940
it's based on a lot of different

00:02:17,390 --> 00:02:26,170
principles some of these I mean these

00:02:22,940 --> 00:02:33,050
were all meant for a software project

00:02:26,170 --> 00:02:34,520
and some of them makes sense to you or

00:02:33,050 --> 00:02:38,060
in the context of what we're trying to

00:02:34,520 --> 00:02:41,570
do in fedora as a distribution but there

00:02:38,060 --> 00:02:43,370
are some differences which brings me the

00:02:41,570 --> 00:02:47,330
question of you know how is a linux

00:02:43,370 --> 00:02:48,709
distribution different from the the

00:02:47,330 --> 00:02:50,770
types of software projects that

00:02:48,709 --> 00:02:53,030
continuous integration was designed for

00:02:50,770 --> 00:02:59,630
the biggest thing I come down to is

00:02:53,030 --> 00:03:01,190
control we as downstream have depending

00:02:59,630 --> 00:03:03,470
on the project different levels of

00:03:01,190 --> 00:03:06,700
control but very little control over

00:03:03,470 --> 00:03:10,520
what up streams do and when they do them

00:03:06,700 --> 00:03:13,400
the they can do new releases certain up

00:03:10,520 --> 00:03:15,620
streams can release bug fixes or they

00:03:13,400 --> 00:03:17,390
can just do huge new releases and we

00:03:15,620 --> 00:03:18,739
have to go through you know as a

00:03:17,390 --> 00:03:21,680
maintainer you might have to go through

00:03:18,739 --> 00:03:25,910
and pick out the the thing that you want

00:03:21,680 --> 00:03:27,560
to back part to another release and you

00:03:25,910 --> 00:03:31,959
know even beyond what you know upstream

00:03:27,560 --> 00:03:37,310
does downstair and especially in a

00:03:31,959 --> 00:03:38,690
community distribution for better for

00:03:37,310 --> 00:03:40,340
worse one of the strengths and perhaps

00:03:38,690 --> 00:03:43,700
one of the weaknesses is that things

00:03:40,340 --> 00:03:45,320
happen no single person has control over

00:03:43,700 --> 00:03:46,700
when this is going to change when this

00:03:45,320 --> 00:03:48,620
is going to change when this is going to

00:03:46,700 --> 00:03:52,160
change sometimes we try around release

00:03:48,620 --> 00:03:55,700
time to keep things stable but those

00:03:52,160 --> 00:04:01,400
kind of things can even change within

00:03:55,700 --> 00:04:02,810
the project and in when linux

00:04:01,400 --> 00:04:07,130
distributions were first started they

00:04:02,810 --> 00:04:12,739
were meant to be a point of integration

00:04:07,130 --> 00:04:14,570
a relatively stable known target amongst

00:04:12,739 --> 00:04:17,690
the constantly changing set of things

00:04:14,570 --> 00:04:19,900
that are upstream and sometimes we can't

00:04:17,690 --> 00:04:21,579
we need to make small

00:04:19,900 --> 00:04:25,660
patience to those upstream sources on

00:04:21,579 --> 00:04:31,630
either in patches or timing to provide

00:04:25,660 --> 00:04:33,490
that measure of stability but depending

00:04:31,630 --> 00:04:37,919
on the discharge I mean obviously Fedora

00:04:33,490 --> 00:04:42,550
is not as stable as sent us or rel the

00:04:37,919 --> 00:04:44,979
the distribution itself can choose how

00:04:42,550 --> 00:04:46,509
stable it wants to be so now that I've

00:04:44,979 --> 00:04:48,490
talked about continuous integration I

00:04:46,509 --> 00:04:52,990
want to set a few ground rules for the

00:04:48,490 --> 00:04:54,880
rest of the talk what I'm interested in

00:04:52,990 --> 00:04:59,229
doing is getting into the what and the

00:04:54,880 --> 00:05:03,100
how I think that the folks on the ground

00:04:59,229 --> 00:05:04,930
are generally on the same page but I've

00:05:03,100 --> 00:05:07,150
been in plenty of conversations where

00:05:04,930 --> 00:05:10,630
things get sidetracked into you know

00:05:07,150 --> 00:05:13,180
using you know this buzzword or you know

00:05:10,630 --> 00:05:15,870
common one is asking how asking me how

00:05:13,180 --> 00:05:17,979
task of tron compares to Jenkins which I

00:05:15,870 --> 00:05:20,949
understand where the the questions

00:05:17,979 --> 00:05:23,110
coming from but that it's a difficult

00:05:20,949 --> 00:05:26,470
comparison it's the wrong question to be

00:05:23,110 --> 00:05:28,270
asked in my opinion so I want to get

00:05:26,470 --> 00:05:32,440
more into what we're doing and how we're

00:05:28,270 --> 00:05:34,720
going to get there so I'm going to avoid

00:05:32,440 --> 00:05:37,090
tool names whenever possible obviously I

00:05:34,720 --> 00:05:41,020
work on task patron that's my thing so I

00:05:37,090 --> 00:05:43,900
have my my ideas on what tool would be

00:05:41,020 --> 00:05:47,229
best to solve this but my interest is

00:05:43,900 --> 00:05:50,470
primarily in making fodor better and if

00:05:47,229 --> 00:05:52,960
that ends up not being tasked Ron I will

00:05:50,470 --> 00:05:58,570
be sad and I don't think that's going to

00:05:52,960 --> 00:06:00,970
happen but the primary thing is to make

00:05:58,570 --> 00:06:02,650
door better and as much as this may seem

00:06:00,970 --> 00:06:04,539
like a bait and switch this is going to

00:06:02,650 --> 00:06:07,030
be the last time in this talk I use the

00:06:04,539 --> 00:06:09,340
phrase continues integration it is a

00:06:07,030 --> 00:06:11,320
buzzword it has baggage is connected to

00:06:09,340 --> 00:06:12,400
it everyone comes in thinking this is

00:06:11,320 --> 00:06:14,620
continuous integration this is

00:06:12,400 --> 00:06:17,289
continuous integration and it seems to

00:06:14,620 --> 00:06:19,419
get in the way of what are we trying to

00:06:17,289 --> 00:06:21,099
do you know whether that matches up with

00:06:19,419 --> 00:06:22,720
what people think of as continuous

00:06:21,099 --> 00:06:25,599
integration or not is a separate

00:06:22,720 --> 00:06:27,830
question that I would like to leave for

00:06:25,599 --> 00:06:32,090
elsewhere

00:06:27,830 --> 00:06:35,000
so you know that being said having left

00:06:32,090 --> 00:06:39,500
out the title of this talk as a term

00:06:35,000 --> 00:06:41,480
within it we're exactly are we there are

00:06:39,500 --> 00:06:44,800
a lot of things that we are already

00:06:41,480 --> 00:06:47,840
doing pretty much everything's in get on

00:06:44,800 --> 00:06:51,230
spec files just about everything that's

00:06:47,840 --> 00:06:53,540
in that can be in get is in get so we

00:06:51,230 --> 00:06:55,880
have the repositories taken care of from

00:06:53,540 --> 00:06:57,950
a package point of view those are all

00:06:55,880 --> 00:07:00,680
automated and when I say that I mean you

00:06:57,950 --> 00:07:02,450
can just tell Koji to go build something

00:07:00,680 --> 00:07:05,450
and it will go take the source it will

00:07:02,450 --> 00:07:17,030
produce an RPM n it's pretty much

00:07:05,450 --> 00:07:21,950
without human interaction I mean change

00:07:17,030 --> 00:07:23,870
something come easy um no not at this

00:07:21,950 --> 00:07:25,550
point that that's still manual I was

00:07:23,870 --> 00:07:28,070
thinking more of once you initiate the

00:07:25,550 --> 00:07:29,630
build it's not like you have to run

00:07:28,070 --> 00:07:32,090
through and then you know compile all

00:07:29,630 --> 00:07:35,120
the all the stuff into object files and

00:07:32,090 --> 00:07:37,250
then run a make file by hand that's all

00:07:35,120 --> 00:07:42,860
done in the spec file but if there's

00:07:37,250 --> 00:07:44,300
more on vision that could be done um the

00:07:42,860 --> 00:07:46,930
you know then we have things like au

00:07:44,300 --> 00:07:49,940
shape which I hope i pronounced right

00:07:46,930 --> 00:07:52,640
that tries to do that goes into coaching

00:07:49,940 --> 00:07:55,250
does Koji scratch builds whenever

00:07:52,640 --> 00:07:59,120
dependencies change there's things like

00:07:55,250 --> 00:08:00,800
the new hotness that attempt to build a

00:07:59,120 --> 00:08:02,720
new version of a package without

00:08:00,800 --> 00:08:04,310
changing do nothing but changing the

00:08:02,720 --> 00:08:06,440
version in the spec file and grabbing

00:08:04,310 --> 00:08:07,880
the new tarball and it's just kind of a

00:08:06,440 --> 00:08:09,530
question of okay if we just change the

00:08:07,880 --> 00:08:13,070
source is this package even going to

00:08:09,530 --> 00:08:14,990
build as an early warning sign there are

00:08:13,070 --> 00:08:20,000
things that can be set in Bodie for test

00:08:14,990 --> 00:08:22,220
requirements and we have package sanity

00:08:20,000 --> 00:08:24,200
tests that are run on both package

00:08:22,220 --> 00:08:26,590
fields and updates when those updates

00:08:24,200 --> 00:08:26,590
change

00:08:28,169 --> 00:08:31,919
so even then you can ask a question

00:08:30,629 --> 00:08:34,709
that's like I just list up a whole bunch

00:08:31,919 --> 00:08:37,169
of tools and how are we doing in my pain

00:08:34,709 --> 00:08:42,440
I think we're doing pretty good are we

00:08:37,169 --> 00:08:45,839
doing perfect no but I do think that

00:08:42,440 --> 00:08:49,350
definitely making progress and things

00:08:45,839 --> 00:08:52,860
weren't so getting back to the the

00:08:49,350 --> 00:08:55,589
points that wikipedia lists that the the

00:08:52,860 --> 00:09:00,930
principles upon which continue singing I

00:08:55,589 --> 00:09:06,089
almost said it the the the principles

00:09:00,930 --> 00:09:07,860
upon which the C word shall be based so

00:09:06,089 --> 00:09:12,360
code repository now as I mentioned

00:09:07,860 --> 00:09:14,730
that's basically done already everyone

00:09:12,360 --> 00:09:16,290
committing to baseline every day this is

00:09:14,730 --> 00:09:18,750
one of those I don't think is quite as

00:09:16,290 --> 00:09:20,279
relevant to a linux distribution you

00:09:18,750 --> 00:09:23,040
know by definition we're working with

00:09:20,279 --> 00:09:24,630
releases the point of that was so you

00:09:23,040 --> 00:09:25,980
don't have people you know working on

00:09:24,630 --> 00:09:27,300
features working on features now all of

00:09:25,980 --> 00:09:28,500
a sudden they have five five thousand

00:09:27,300 --> 00:09:30,029
lines of code and they're just going to

00:09:28,500 --> 00:09:33,690
dump in the repository and go home for

00:09:30,029 --> 00:09:35,880
the weekend um that's kind of how the

00:09:33,690 --> 00:09:37,140
distribution works in a way and I don't

00:09:35,880 --> 00:09:39,000
think there's really we can get around

00:09:37,140 --> 00:09:41,760
that and I do think that rawhide is

00:09:39,000 --> 00:09:43,860
about as close as we're going to get and

00:09:41,760 --> 00:09:48,120
as close as we need to get in this

00:09:43,860 --> 00:09:50,910
context testing in a clone of the

00:09:48,120 --> 00:09:54,660
production environment um the the tests

00:09:50,910 --> 00:09:57,329
are run in a recent ish compose assuming

00:09:54,660 --> 00:09:59,120
there are no failures there is a new

00:09:57,329 --> 00:10:03,390
image that's built every couple of days

00:09:59,120 --> 00:10:09,050
and a couple of days for that that is

00:10:03,390 --> 00:10:10,949
used for testing the it's a custom build

00:10:09,050 --> 00:10:13,589
there's certain things that we need to

00:10:10,949 --> 00:10:16,620
have in there certain packages that are

00:10:13,589 --> 00:10:18,449
used for every single run that we want

00:10:16,620 --> 00:10:21,870
baked into the image so it's not doing a

00:10:18,449 --> 00:10:23,819
tnf install every single time but it is

00:10:21,870 --> 00:10:25,949
using the same exact it's using the same

00:10:23,819 --> 00:10:28,290
tools that relevance uses so it is a

00:10:25,949 --> 00:10:31,279
reasonable approximation of what

00:10:28,290 --> 00:10:31,279
production would be

00:10:32,380 --> 00:10:36,220
wrong button so think now we've talked

00:10:35,170 --> 00:10:39,400
about things that are there things that

00:10:36,220 --> 00:10:41,140
are in process um automating the built

00:10:39,400 --> 00:10:43,900
there is still work that can be done

00:10:41,140 --> 00:10:46,270
here I mean yes code you can take you

00:10:43,900 --> 00:10:49,240
know command and build you know s rpms

00:10:46,270 --> 00:10:52,960
and our cams from in a pretty much

00:10:49,240 --> 00:10:56,410
automated way but rpms aren't the only

00:10:52,960 --> 00:10:58,150
thing we produce automatic composes

00:10:56,410 --> 00:11:01,030
composes that don't require someone

00:10:58,150 --> 00:11:03,460
sitting at a terminal a certain single

00:11:01,030 --> 00:11:05,220
person sitting in front of a terminal to

00:11:03,460 --> 00:11:07,930
make sure that everything works is

00:11:05,220 --> 00:11:10,120
underway that works in progress

00:11:07,930 --> 00:11:11,890
hopefully it will be done soon so we

00:11:10,120 --> 00:11:17,640
don't have as many single points of

00:11:11,890 --> 00:11:20,590
failure making the build self testing

00:11:17,640 --> 00:11:24,160
the code is done but we do have a

00:11:20,590 --> 00:11:26,020
feature that will be ready soon will be

00:11:24,160 --> 00:11:30,820
in production before fodor 25 is

00:11:26,020 --> 00:11:34,270
released so that test can be run on

00:11:30,820 --> 00:11:36,940
every building Sorry Sorry pushing on

00:11:34,270 --> 00:11:38,890
speak up for the night um so you

00:11:36,940 --> 00:11:41,500
mentioned it automatic signing is

00:11:38,890 --> 00:11:45,010
underway if you know who's working on

00:11:41,500 --> 00:11:48,160
that because by my current understanding

00:11:45,010 --> 00:11:50,100
is that that's not assigned anywhere but

00:11:48,160 --> 00:11:53,590
it is in fact one of the things that

00:11:50,100 --> 00:11:58,810
blocks some of our efforts toward the

00:11:53,590 --> 00:12:02,740
c-word I thought it was in progress but

00:11:58,810 --> 00:12:04,480
if you're under different information I

00:12:02,740 --> 00:12:07,630
suspect yours is more accurate than mine

00:12:04,480 --> 00:12:08,980
um so I will have to change that is two

00:12:07,630 --> 00:12:12,820
things that will need to be done i

00:12:08,980 --> 00:12:16,750
thought it was in progress so I sounds

00:12:12,820 --> 00:12:19,500
like I was mistaken any other questions

00:12:16,750 --> 00:12:19,500
well

00:12:19,900 --> 00:12:28,240
testing ultimate web user interface or

00:12:23,790 --> 00:12:32,590
the RPM functionality of Justices the

00:12:28,240 --> 00:12:38,800
test cases of people it's a huge tax or

00:12:32,590 --> 00:12:40,270
you have to test to release stable I'm

00:12:38,800 --> 00:12:42,880
going to answer your question in two

00:12:40,270 --> 00:12:44,470
different ways the first way is what

00:12:42,880 --> 00:12:47,530
we're going to be putting into

00:12:44,470 --> 00:12:51,700
production before for our 25 is more

00:12:47,530 --> 00:12:54,010
focused on her package so things that

00:12:51,700 --> 00:12:58,300
don't necessarily need a GUI things that

00:12:54,010 --> 00:13:01,750
don't necessarily need more than just a

00:12:58,300 --> 00:13:03,730
couple of packages long-term there are

00:13:01,750 --> 00:13:07,240
things that we have in place already

00:13:03,730 --> 00:13:09,850
like open QA that is designed to test at

00:13:07,240 --> 00:13:13,300
least installation and there are talks

00:13:09,850 --> 00:13:16,570
of using other things the one of the

00:13:13,300 --> 00:13:22,030
philosophies that we have in through our

00:13:16,570 --> 00:13:24,250
QA is that we aren't dumb enough to

00:13:22,030 --> 00:13:27,030
think that we know best how to test

00:13:24,250 --> 00:13:30,490
everything and we view our jobs as

00:13:27,030 --> 00:13:31,810
facilitation it's getting you know the

00:13:30,490 --> 00:13:33,940
people who actually know what they're

00:13:31,810 --> 00:13:35,980
doing letting them do what they do best

00:13:33,940 --> 00:13:38,860
and we're just trying to make them the

00:13:35,980 --> 00:13:41,980
most efficient as they can be so there

00:13:38,860 --> 00:13:43,390
are and this I'm going I'm trying not to

00:13:41,980 --> 00:13:45,790
stumble into I said I wasn't going to

00:13:43,390 --> 00:13:48,000
use tool names so this is tripping me up

00:13:45,790 --> 00:13:52,270
a little bit from getting into specifics

00:13:48,000 --> 00:13:53,350
but there we want to go other places but

00:13:52,270 --> 00:13:56,490
we're trying to take it one step at a

00:13:53,350 --> 00:13:56,490
time if that answers the question

00:14:01,200 --> 00:14:10,300
within my world Quintanilla actually the

00:14:07,870 --> 00:14:13,560
same thing trying to seize the best the

00:14:10,300 --> 00:14:13,560
tools it doesn't matter

00:14:15,310 --> 00:14:20,170
so that was a yes the question is

00:14:17,140 --> 00:14:29,830
answered for now okay so I was just

00:14:20,170 --> 00:14:32,800
making sure systemd starts talking is

00:14:29,830 --> 00:14:36,279
this it should if it doesn't

00:14:32,800 --> 00:14:38,410
that's something that is to be fixed it

00:14:36,279 --> 00:14:41,380
will all be in a virtual machine so

00:14:38,410 --> 00:14:45,150
things that require power metal are not

00:14:41,380 --> 00:14:47,470
going to work I suspect there are as

00:14:45,150 --> 00:14:50,860
part of that being in production before

00:14:47,470 --> 00:14:52,930
if it or 25 is released the codes done

00:14:50,860 --> 00:14:55,570
right now we're primarily trying to find

00:14:52,930 --> 00:14:57,339
guinea pigs so that we can find the

00:14:55,570 --> 00:15:00,779
issues of what we thought that was going

00:14:57,339 --> 00:15:05,500
to work and no it doesn't so it should

00:15:00,779 --> 00:15:06,970
but it still needs to be tested and if

00:15:05,500 --> 00:15:09,700
you're willing to be a guinea pig we're

00:15:06,970 --> 00:15:15,460
looking for guinea pigs answer your

00:15:09,700 --> 00:15:18,810
question any others okay other things

00:15:15,460 --> 00:15:21,339
that are in project in progress um

00:15:18,810 --> 00:15:25,960
automatic deployment and I'm playing a

00:15:21,339 --> 00:15:28,390
little fat it's in progress depending on

00:15:25,960 --> 00:15:31,510
which part how exactly you define

00:15:28,390 --> 00:15:33,940
automated deployment will depend on

00:15:31,510 --> 00:15:35,740
what's actively in progress but in my

00:15:33,940 --> 00:15:38,589
mind it's being worked on there is a

00:15:35,740 --> 00:15:43,050
goal it is going to happen and that is

00:15:38,589 --> 00:15:46,870
not work it is not done at the second

00:15:43,050 --> 00:15:49,630
but that I'm sorry what do you mean by

00:15:46,870 --> 00:15:51,520
automated deployment I'm purposely

00:15:49,630 --> 00:15:53,170
playing a little fast basically what i'm

00:15:51,520 --> 00:15:56,380
interested in from this perspective is

00:15:53,170 --> 00:15:58,180
that there's no human or that it's

00:15:56,380 --> 00:16:00,459
basically it's going to once criteria

00:15:58,180 --> 00:16:02,110
are met it goes into updates testing

00:16:00,459 --> 00:16:04,690
once certain other criterias or mats

00:16:02,110 --> 00:16:07,330
that happen automatically got it and

00:16:04,690 --> 00:16:09,400
there's a little bit more to it like I

00:16:07,330 --> 00:16:10,810
said it's I'm being a bit fuzzy with it

00:16:09,400 --> 00:16:12,400
because it can mean a bunch of different

00:16:10,810 --> 00:16:12,830
things but that's the primary thing that

00:16:12,400 --> 00:16:15,290
I'm interested

00:16:12,830 --> 00:16:18,320
sit in there's some longer-term things

00:16:15,290 --> 00:16:20,740
that would be cool like you know one one

00:16:18,320 --> 00:16:23,840
package changes we automatically rebuild

00:16:20,740 --> 00:16:25,850
the the install light so if it's part of

00:16:23,840 --> 00:16:28,700
the payload that is the install is oh

00:16:25,850 --> 00:16:34,550
but I think that's further along than we

00:16:28,700 --> 00:16:37,820
currently are but the QA and rel inch

00:16:34,550 --> 00:16:39,680
and and infra and abs and all those

00:16:37,820 --> 00:16:42,140
different groups are working together so

00:16:39,680 --> 00:16:44,300
when those things are done they will

00:16:42,140 --> 00:16:46,940
work together and I keep hitting the

00:16:44,300 --> 00:16:49,400
wrong button all right so now we've gone

00:16:46,940 --> 00:16:52,510
from good too well we're working on it

00:16:49,400 --> 00:16:54,920
too well yeah things that need work um

00:16:52,510 --> 00:16:57,730
so everyone can see the status of the

00:16:54,920 --> 00:17:00,020
latest build the information is there

00:16:57,730 --> 00:17:01,400
you have to know where to look and even

00:17:00,020 --> 00:17:05,510
if you know where to look it's a

00:17:01,400 --> 00:17:07,760
gigantic pain in the butt so this yes

00:17:05,510 --> 00:17:10,310
technically the data is there but in my

00:17:07,760 --> 00:17:11,630
mind until it is easily digestible by

00:17:10,310 --> 00:17:13,250
someone who's not intimately familiar

00:17:11,630 --> 00:17:15,470
with where the results are and how

00:17:13,250 --> 00:17:18,890
they're stored this is something that

00:17:15,470 --> 00:17:22,790
needs work and we do have plans for it

00:17:18,890 --> 00:17:24,470
but it hasn't quite started yet in my

00:17:22,790 --> 00:17:27,020
mind the deliverables earnest in a

00:17:24,470 --> 00:17:28,580
similar place they're better than the

00:17:27,020 --> 00:17:30,260
information because if you know where to

00:17:28,580 --> 00:17:32,350
look they're easy to find that easy to

00:17:30,260 --> 00:17:34,460
get but you have to know where to look

00:17:32,350 --> 00:17:38,690
and I think that's another thing that

00:17:34,460 --> 00:17:41,720
could be improved and the other one is

00:17:38,690 --> 00:17:43,910
keeping the build fast and I'm going to

00:17:41,720 --> 00:17:45,230
put some qualifiers on this because when

00:17:43,910 --> 00:17:47,900
you're building packages like Open

00:17:45,230 --> 00:17:50,600
Office there's a limit to how fast we

00:17:47,900 --> 00:17:56,780
can make that go the thing that I'm more

00:17:50,600 --> 00:17:58,250
interested in is the time to feedback so

00:17:56,780 --> 00:18:00,470
say there's new anaconda built pushed

00:17:58,250 --> 00:18:02,120
and how long does it take to make a

00:18:00,470 --> 00:18:03,920
compose after that how long after that

00:18:02,120 --> 00:18:05,390
compose it has it run through a set of

00:18:03,920 --> 00:18:07,280
automated tests and how long after those

00:18:05,390 --> 00:18:09,320
automated tesco you know if there's a

00:18:07,280 --> 00:18:12,530
bug are the developers notified how do

00:18:09,320 --> 00:18:15,230
we make that process faster how do we

00:18:12,530 --> 00:18:16,730
shorten that feedback loop is in this

00:18:15,230 --> 00:18:20,090
context I think is more important

00:18:16,730 --> 00:18:21,910
because unless someone knows something I

00:18:20,090 --> 00:18:23,530
don't openoffice

00:18:21,910 --> 00:18:30,480
is going to compile as fast as opium

00:18:23,530 --> 00:18:33,910
tapas compiles so talked a bit about

00:18:30,480 --> 00:18:36,400
definitions where we are now I'm talking

00:18:33,910 --> 00:18:38,170
about where we're going one of the

00:18:36,400 --> 00:18:42,040
things i want to emphasize is there is a

00:18:38,170 --> 00:18:43,510
we in this the stuff that i'm talking

00:18:42,040 --> 00:18:45,550
about with the c-word or whatever we

00:18:43,510 --> 00:18:47,440
want to use to describe it this is not

00:18:45,550 --> 00:18:49,120
something that just Q I can do this is

00:18:47,440 --> 00:18:50,140
not something that just relish can do

00:18:49,120 --> 00:18:52,630
this is not something that just

00:18:50,140 --> 00:18:54,310
engineering to do if we're not all work

00:18:52,630 --> 00:18:57,040
and even just within those groups

00:18:54,310 --> 00:18:59,050
without the those groups working

00:18:57,040 --> 00:19:00,070
together without working with the

00:18:59,050 --> 00:19:02,860
community working with all the

00:19:00,070 --> 00:19:05,410
contributors this isn't going to work so

00:19:02,860 --> 00:19:07,930
I just wanted to emphasize the we so

00:19:05,410 --> 00:19:12,700
what is it exactly that we're trying to

00:19:07,930 --> 00:19:15,100
do the most succinct way I've been able

00:19:12,700 --> 00:19:18,130
to put it is reduce the cost of change

00:19:15,100 --> 00:19:19,120
without compromising on quality so one

00:19:18,130 --> 00:19:21,850
of the things I mentioned before we're

00:19:19,120 --> 00:19:23,500
shortening the feedback loop for the

00:19:21,850 --> 00:19:25,570
things that we have control over so that

00:19:23,500 --> 00:19:28,150
when there's an econo change it's not

00:19:25,570 --> 00:19:30,970
like a week or two or some of the things

00:19:28,150 --> 00:19:34,180
in the past a month or two before all of

00:19:30,970 --> 00:19:35,710
a sudden this bug is found and we should

00:19:34,180 --> 00:19:38,380
have fixed this a month ago and it's

00:19:35,710 --> 00:19:40,060
that kind of avoiding these things and

00:19:38,380 --> 00:19:41,980
trying to get that feedback loop as

00:19:40,060 --> 00:19:45,250
short as possible so that we can just

00:19:41,980 --> 00:19:47,140
keep things moving another part of this

00:19:45,250 --> 00:19:50,080
is removing the requirements for human

00:19:47,140 --> 00:19:54,520
interaction you then have single points

00:19:50,080 --> 00:19:56,230
of failure you can run into issues where

00:19:54,520 --> 00:19:59,290
you know someone falls asleep humans

00:19:56,230 --> 00:20:01,450
Jenner and most humans have to sleep and

00:19:59,290 --> 00:20:03,870
so if you have processes that are

00:20:01,450 --> 00:20:06,400
waiting on one person to do one thing

00:20:03,870 --> 00:20:08,320
you you end up with single points of

00:20:06,400 --> 00:20:12,460
failure and it becomes difficult to keep

00:20:08,320 --> 00:20:15,670
everything moving and to keep delivering

00:20:12,460 --> 00:20:18,270
as quickly as we want to so getting rid

00:20:15,670 --> 00:20:21,900
of that unless it's absolutely necessary

00:20:18,270 --> 00:20:25,710
and in my mind one part of this is to

00:20:21,900 --> 00:20:27,730
let contributors right automated tests

00:20:25,710 --> 00:20:31,020
one of the things i'd mentioned before

00:20:27,730 --> 00:20:32,100
was a we view our role in QA

00:20:31,020 --> 00:20:35,550
especially the folks for working on

00:20:32,100 --> 00:20:40,550
automation as we're enablers there are

00:20:35,550 --> 00:20:42,660
like five of us about 7 on a good day

00:20:40,550 --> 00:20:46,620
let's let's be generous there are 10 of

00:20:42,660 --> 00:20:49,260
us which is an over estimate the 10 of

00:20:46,620 --> 00:20:53,070
us cannot write all the automated tests

00:20:49,260 --> 00:20:54,810
for all the fedora and if it isn't

00:20:53,070 --> 00:20:57,570
something that's easy to do contributors

00:20:54,810 --> 00:20:59,190
aren't going to do it so they need the

00:20:57,570 --> 00:21:00,630
contributors need to be able to do it

00:20:59,190 --> 00:21:03,150
and it needs to be easy and it needs to

00:21:00,630 --> 00:21:06,540
be as painless as possible otherwise

00:21:03,150 --> 00:21:08,280
it's plain old not going to happen the

00:21:06,540 --> 00:21:10,920
paper processes through all of the

00:21:08,280 --> 00:21:13,380
developers to do it easily and for

00:21:10,920 --> 00:21:14,610
example ok back is fixed I need a

00:21:13,380 --> 00:21:16,770
regression test that will be

00:21:14,610 --> 00:21:19,380
automatically get the other set of

00:21:16,770 --> 00:21:20,880
guidelines and processes around us to

00:21:19,380 --> 00:21:26,820
enabled

00:21:20,880 --> 00:21:30,150
easy um kind of but I think in the

00:21:26,820 --> 00:21:34,560
context of fedora that can't happen

00:21:30,150 --> 00:21:36,240
right ah who's gonna enforce it well

00:21:34,560 --> 00:21:43,740
that's the question it should be that it

00:21:36,240 --> 00:21:45,840
shouldn't yeah oh right but my early

00:21:43,740 --> 00:21:48,750
talk about that horse well now if you

00:21:45,840 --> 00:21:50,370
are a guy developing the tools to the

00:21:48,750 --> 00:21:52,080
continuous integration which is the

00:21:50,370 --> 00:21:55,350
objects in the tools are adjustable

00:21:52,080 --> 00:21:59,310
follow the process then the guys will be

00:21:55,350 --> 00:22:04,110
sent out that I don't guys my name

00:21:59,310 --> 00:22:07,110
others who I assume you're going I think

00:22:04,110 --> 00:22:12,090
that in practice we don't no one has

00:22:07,110 --> 00:22:14,930
that kind of power um I think that again

00:22:12,090 --> 00:22:17,790
prefer better for worse fedora

00:22:14,930 --> 00:22:20,790
engineering on the engineering side is a

00:22:17,790 --> 00:22:21,900
lot like herding cats that those cats

00:22:20,790 --> 00:22:22,950
are going to go where those cats are

00:22:21,900 --> 00:22:26,910
going to go and there's a limit to how

00:22:22,950 --> 00:22:28,740
much you can force them to go into

00:22:26,910 --> 00:22:31,440
certain places maybe someday we can get

00:22:28,740 --> 00:22:35,520
to that point but I think it is going to

00:22:31,440 --> 00:22:37,080
take a long time of a steady change if

00:22:35,520 --> 00:22:40,530
we ever got to that point so it's not

00:22:37,080 --> 00:22:43,710
really much in our roadmap am I making

00:22:40,530 --> 00:22:45,860
sense yeah okay then it's your question

00:22:43,710 --> 00:22:45,860
okay

00:22:47,559 --> 00:22:59,860
Sydney question is about the ultimate

00:22:52,269 --> 00:23:00,850
context case is how we get the you're

00:22:59,860 --> 00:23:06,700
getting ahead of me this is a later

00:23:00,850 --> 00:23:09,999
slide um go to his workshop which is

00:23:06,700 --> 00:23:12,909
about writing tasks for our automation

00:23:09,999 --> 00:23:16,269
system that is going to go into what is

00:23:12,909 --> 00:23:17,529
available how to start doing those

00:23:16,269 --> 00:23:19,330
things and we'll hopefully start

00:23:17,529 --> 00:23:27,159
answering some of your questions I mean

00:23:19,330 --> 00:23:29,080
that workshop is friday as 330 or 130 is

00:23:27,159 --> 00:23:33,730
it when your workshop is is a 13 or

00:23:29,080 --> 00:23:35,830
through 30 on reddit it's on Friday and

00:23:33,730 --> 00:23:39,159
it has a tool name that i am not going

00:23:35,830 --> 00:23:47,320
to because i said no to all names any

00:23:39,159 --> 00:23:50,230
other questions yeah okay um and in the

00:23:47,320 --> 00:23:52,690
end you know in something that I've

00:23:50,230 --> 00:23:54,549
mentioned before I want to see a better

00:23:52,690 --> 00:23:58,389
foot or I want to see a faster fedora

00:23:54,549 --> 00:23:59,999
and since I don't like buzz words and I

00:23:58,389 --> 00:24:02,019
don't like things that can be confused

00:23:59,999 --> 00:24:06,190
maybe we can just call it non-stop

00:24:02,019 --> 00:24:08,740
fedora and if that catches on that would

00:24:06,190 --> 00:24:09,850
be great if not then you Louise within

00:24:08,740 --> 00:24:14,590
this talk you guys all know what I'm

00:24:09,850 --> 00:24:16,749
saying I was wondering if that was going

00:24:14,590 --> 00:24:19,240
to be any issue is like this close

00:24:16,749 --> 00:24:24,610
enough no one's used that for a long

00:24:19,240 --> 00:24:27,159
time so whether we call it that outside

00:24:24,610 --> 00:24:30,519
of this room or not is a little interest

00:24:27,159 --> 00:24:32,470
i'm interested in the results so at i

00:24:30,519 --> 00:24:35,350
mean i'm repeating myself I'm purposely

00:24:32,470 --> 00:24:38,019
repeating myself so this whole idea of

00:24:35,350 --> 00:24:40,990
the nonstop fedora you know short and

00:24:38,019 --> 00:24:42,610
feedback loops and just get rid of the

00:24:40,990 --> 00:24:44,409
human interaction the required human

00:24:42,610 --> 00:24:47,230
interaction where it is at all possible

00:24:44,409 --> 00:24:50,320
on the things that comes into mind are

00:24:47,230 --> 00:24:55,149
composes auto signing are the two big

00:24:50,320 --> 00:24:56,679
ones so now I've talked about you know

00:24:55,149 --> 00:24:58,320
where we are and all of these things we

00:24:56,679 --> 00:25:00,149
want to do but there's

00:24:58,320 --> 00:25:04,169
more important question of how exactly

00:25:00,149 --> 00:25:08,820
are we going to get there so a few

00:25:04,169 --> 00:25:11,220
concrete things we will be covered in

00:25:08,820 --> 00:25:14,669
his workshop later today and will be

00:25:11,220 --> 00:25:16,799
expanded as we go along we are getting

00:25:14,669 --> 00:25:18,240
the systems into place and they are the

00:25:16,799 --> 00:25:21,090
code is done we just want to make sure

00:25:18,240 --> 00:25:22,710
everything is working well enough before

00:25:21,090 --> 00:25:25,470
we open the floodgates until everyone to

00:25:22,710 --> 00:25:27,419
use it so to sort of take things a

00:25:25,470 --> 00:25:29,700
little bit slowly to make sure

00:25:27,419 --> 00:25:35,519
everything's working and these tests can

00:25:29,700 --> 00:25:37,830
be won on any fed message so even a test

00:25:35,519 --> 00:25:42,360
result fed message can trigger another

00:25:37,830 --> 00:25:45,299
test and getting too complicated I'm not

00:25:42,360 --> 00:25:50,519
sure we're ready for but the the basics

00:25:45,299 --> 00:25:52,769
are there automating rel inch tasks the

00:25:50,519 --> 00:25:55,049
point where they can happen quickly at

00:25:52,769 --> 00:25:56,340
any time without human intervention this

00:25:55,049 --> 00:26:00,720
is not something that's going to happen

00:25:56,340 --> 00:26:05,700
today um it's gotten a lot better even

00:26:00,720 --> 00:26:07,470
just from fedora 23 to fit or 24 I think

00:26:05,700 --> 00:26:10,129
there have been great improvements in

00:26:07,470 --> 00:26:15,690
this particularly in the compose area

00:26:10,129 --> 00:26:17,940
and there there's work on going it's not

00:26:15,690 --> 00:26:21,299
going to happen overnight but progress

00:26:17,940 --> 00:26:24,330
is being made and I am NOT the best

00:26:21,299 --> 00:26:26,100
person to ask about that asking one of

00:26:24,330 --> 00:26:27,360
the folks that is actually working on

00:26:26,100 --> 00:26:30,509
the rail into automation is a better

00:26:27,360 --> 00:26:33,629
person to ask one of the things that is

00:26:30,509 --> 00:26:38,490
also in progress is migrating disk it to

00:26:33,629 --> 00:26:39,840
pusher my sock here is that once that

00:26:38,490 --> 00:26:42,990
migration is there there are pull

00:26:39,840 --> 00:26:46,379
requests once we have pull requests we

00:26:42,990 --> 00:26:49,169
can link in with the we can make

00:26:46,379 --> 00:26:51,210
contributing test that much easier so if

00:26:49,169 --> 00:26:53,519
your user of a package and the packager

00:26:51,210 --> 00:26:56,580
doesn't have the time to write test for

00:26:53,519 --> 00:26:59,519
that package you can without being a

00:26:56,580 --> 00:27:02,639
packager write the tests do pull request

00:26:59,519 --> 00:27:07,039
and it can end up being used without

00:27:02,639 --> 00:27:07,039
having to go through too much trouble

00:27:08,650 --> 00:27:16,730
and another thing is that we need to do

00:27:12,950 --> 00:27:18,650
is formalizing criteria so things can go

00:27:16,730 --> 00:27:20,539
from one to the next it's all well and

00:27:18,650 --> 00:27:24,140
great to have all this automation but

00:27:20,539 --> 00:27:26,900
unless we sit down and as a project say

00:27:24,140 --> 00:27:28,970
in order to move from say updates

00:27:26,900 --> 00:27:31,850
testing to updates these are the things

00:27:28,970 --> 00:27:34,100
that need to happen even if it's you

00:27:31,850 --> 00:27:35,360
know for this subset for Python packages

00:27:34,100 --> 00:27:37,340
these are the things that have to happen

00:27:35,360 --> 00:27:42,169
before your update is allowed to go into

00:27:37,340 --> 00:27:43,789
stable for known packages these are the

00:27:42,169 --> 00:27:46,039
things that has a however we want to

00:27:43,789 --> 00:27:48,890
slice that up to actually sit down talk

00:27:46,039 --> 00:27:54,880
about it and formalize it so that it's

00:27:48,890 --> 00:27:58,279
not a surprise again progress and plans

00:27:54,880 --> 00:28:02,659
by the end of it or 25 contributors will

00:27:58,279 --> 00:28:05,240
be able to write checks and tests for

00:28:02,659 --> 00:28:07,760
specific packages adjust by having those

00:28:05,240 --> 00:28:15,500
those checks written in a specific place

00:28:07,760 --> 00:28:19,370
in the district repositories by 427 own

00:28:15,500 --> 00:28:21,289
right about a check for for the package

00:28:19,370 --> 00:28:22,640
and they all they have to do is add the

00:28:21,289 --> 00:28:24,919
files and it will be automatically

00:28:22,640 --> 00:28:29,179
picked up and it will be run on koji

00:28:24,919 --> 00:28:31,820
built so that's that the emphasis being

00:28:29,179 --> 00:28:33,830
on there's all you have to do is put the

00:28:31,820 --> 00:28:35,690
files there's in that case there's no

00:28:33,830 --> 00:28:37,340
there's no registration there's no

00:28:35,690 --> 00:28:40,820
nothing it's just as long as the files

00:28:37,340 --> 00:28:42,440
are in the place of convention in the

00:28:40,820 --> 00:28:43,830
diskette repository it will be picked up

00:28:42,440 --> 00:28:50,460
and on

00:28:43,830 --> 00:28:52,740
and they will feature oh the put um I

00:28:50,460 --> 00:28:57,630
don't know Paul do you know the timeline

00:28:52,740 --> 00:28:59,370
for moving disc it to fishers I think

00:28:57,630 --> 00:29:04,190
it's in as far as I know it's in staging

00:28:59,370 --> 00:29:06,690
or I found your talk okay i would i'm

00:29:04,190 --> 00:29:08,279
guessing and I'm emphasized that I am

00:29:06,690 --> 00:29:09,779
guessing I'm not the right person to

00:29:08,279 --> 00:29:10,890
answer this i would i would guess

00:29:09,779 --> 00:29:12,750
definitely by the end of the year but

00:29:10,890 --> 00:29:19,080
yeah I'm cares the right person to ask

00:29:12,750 --> 00:29:22,169
that question from and any other

00:29:19,080 --> 00:29:26,460
questions on that the end the other is

00:29:22,169 --> 00:29:29,820
that art by thrower 26 our automation

00:29:26,460 --> 00:29:33,600
will support jobs triggered from pusher

00:29:29,820 --> 00:29:35,070
do so where you have a you know the

00:29:33,600 --> 00:29:37,590
stuff in disc it well that's all well

00:29:35,070 --> 00:29:38,880
and good but if the upstream project has

00:29:37,590 --> 00:29:41,190
to write something for a completely

00:29:38,880 --> 00:29:42,840
different system why do you have to

00:29:41,190 --> 00:29:45,990
write the same thing twice this is

00:29:42,840 --> 00:29:47,909
stupid and we can make what can you

00:29:45,990 --> 00:29:50,399
expand this later some it's successful

00:29:47,909 --> 00:29:53,370
but this will work more like for a

00:29:50,399 --> 00:29:55,740
single project what the c-word I'm

00:29:53,370 --> 00:29:57,630
avoiding people usually think of so you

00:29:55,740 --> 00:29:59,070
you do a pull request and it will

00:29:57,630 --> 00:30:01,080
automatically run a certain set of jobs

00:29:59,070 --> 00:30:03,870
you change get it will run a certain set

00:30:01,080 --> 00:30:06,929
of jobs and report to a known place and

00:30:03,870 --> 00:30:10,049
that will be function very similar to

00:30:06,929 --> 00:30:14,190
how Travis CI or at least as that from a

00:30:10,049 --> 00:30:15,809
user interaction point of view stuff and

00:30:14,190 --> 00:30:21,960
rel Inge and I'm hand-waving here

00:30:15,809 --> 00:30:27,179
because I'm ya boss of all bosses

00:30:21,960 --> 00:30:29,940
greatness it hadn't occurred to me um I

00:30:27,179 --> 00:30:31,950
don't see how that couldn't work but

00:30:29,940 --> 00:30:37,620
it's not something that we had thought

00:30:31,950 --> 00:30:38,990
of so you see we running tests on

00:30:37,620 --> 00:30:41,870
stretcher

00:30:38,990 --> 00:30:46,000
um I don't see why that couldn't happen

00:30:41,870 --> 00:30:48,080
but yes just not something we thought of

00:30:46,000 --> 00:30:52,580
might be interested in here in the use

00:30:48,080 --> 00:30:56,090
cases you have in mind any other

00:30:52,580 --> 00:30:57,590
questions and okay so then plan and I'm

00:30:56,090 --> 00:30:59,870
hand waving here because I'm not

00:30:57,590 --> 00:31:03,170
relevant and they would be better people

00:30:59,870 --> 00:31:06,950
to ask then factory two point O is a lot

00:31:03,170 --> 00:31:12,190
of what the is coming in Valens

00:31:06,950 --> 00:31:14,750
automation okay good I've ready okay

00:31:12,190 --> 00:31:18,020
Ralph would be the person to talk to

00:31:14,750 --> 00:31:21,020
about factor to point out and then

00:31:18,020 --> 00:31:23,000
within apps and engineering um make bode

00:31:21,020 --> 00:31:24,500
testing requirements more flexible and I

00:31:23,000 --> 00:31:28,120
struggled with a way to phrase this

00:31:24,500 --> 00:31:31,490
because what I'm really getting at is

00:31:28,120 --> 00:31:32,960
Bodie has a concept of these things need

00:31:31,490 --> 00:31:37,040
to happen it like for example right now

00:31:32,960 --> 00:31:38,540
def check doesn't pass then the build is

00:31:37,040 --> 00:31:42,140
over the update is not automatically

00:31:38,540 --> 00:31:45,080
promoted to staple someone has to

00:31:42,140 --> 00:31:47,120
manually request the Porsche in order

00:31:45,080 --> 00:31:48,890
for it to happen you know starting text

00:31:47,120 --> 00:31:51,740
to step that up to start having things

00:31:48,890 --> 00:31:55,910
for we recently had a check proposed for

00:31:51,740 --> 00:31:57,620
all Python packages so having ways to

00:31:55,910 --> 00:32:04,640
instead having those two checks by

00:31:57,620 --> 00:32:11,090
themselves to start building upon that

00:32:04,640 --> 00:32:14,120
so that it's not quite as simplistic and

00:32:11,090 --> 00:32:16,220
there's also some talk about and this

00:32:14,120 --> 00:32:19,370
will need a larger discussion about

00:32:16,220 --> 00:32:22,370
whether we want to have things that can

00:32:19,370 --> 00:32:24,950
be pushed stable assuming that has a

00:32:22,370 --> 00:32:26,929
certain battery of automated tests on

00:32:24,950 --> 00:32:29,210
potentially skipping karma for a

00:32:26,929 --> 00:32:31,880
specific number of things but I

00:32:29,210 --> 00:32:33,320
emphasize that is it before the flames

00:32:31,880 --> 00:32:36,020
start coming that is a discussion that I

00:32:33,320 --> 00:32:37,070
only need to happen it just because it's

00:32:36,020 --> 00:32:39,650
been talked about doesn't mean it's

00:32:37,070 --> 00:32:44,059
actually going to happen just a few

00:32:39,650 --> 00:32:45,740
examples um which is the that we're

00:32:44,059 --> 00:32:48,020
already checking for potentially

00:32:45,740 --> 00:32:51,290
problematic ABI changes thanks to the

00:32:48,020 --> 00:32:52,430
Abigail folks and their work this is not

00:32:51,290 --> 00:32:54,620
something that we wrote this is

00:32:52,430 --> 00:32:58,550
something that they wrote and we are

00:32:54,620 --> 00:33:00,020
very grateful this is one of the things

00:32:58,550 --> 00:33:02,660
that they will be covering their

00:33:00,020 --> 00:33:04,430
workshop which leads me to my next thing

00:33:02,660 --> 00:33:06,320
if you want to learn how to write your

00:33:04,430 --> 00:33:10,730
own checks show up at their workshop out

00:33:06,320 --> 00:33:12,170
friday at one-thirty and basically come

00:33:10,730 --> 00:33:13,820
to the end it's like I want to see this

00:33:12,170 --> 00:33:15,830
become a reality whether we get

00:33:13,820 --> 00:33:17,750
copyright problems I don't care what we

00:33:15,830 --> 00:33:21,170
call it let's make you know non-stop

00:33:17,750 --> 00:33:23,290
adoro thing we have the skills we either

00:33:21,170 --> 00:33:26,720
have the tools or we're making the tools

00:33:23,290 --> 00:33:28,340
and a lot has happened and a lot of

00:33:26,720 --> 00:33:29,630
progress is being made a lot of exciting

00:33:28,340 --> 00:33:32,150
things are going on but there's still

00:33:29,630 --> 00:33:36,830
quite a bit work to do so at the end

00:33:32,150 --> 00:33:41,420
let's just make for more awesome any

00:33:36,830 --> 00:33:44,420
questions so I think it wasn't that

00:33:41,420 --> 00:33:47,420
something for me best for you to

00:33:44,420 --> 00:33:50,060
stabilize number and then you can find

00:33:47,420 --> 00:33:50,919
that there is some problem by a dr

00:33:50,060 --> 00:33:53,889
vehicles

00:33:50,919 --> 00:33:57,340
many reports for some version you know

00:33:53,889 --> 00:33:59,799
mr. in this world so without some magic

00:33:57,340 --> 00:34:02,049
sound process for removing the package

00:33:59,799 --> 00:34:06,970
from the stable graduate when there is

00:34:02,049 --> 00:34:10,899
some big and on things like you can see

00:34:06,970 --> 00:34:13,480
how that would be nice one thing I would

00:34:10,899 --> 00:34:14,889
say is that as much I've been working as

00:34:13,480 --> 00:34:17,109
much as I've been working in automation

00:34:14,889 --> 00:34:20,260
for almost 10 software test automation

00:34:17,109 --> 00:34:22,440
for the ten years now automation will

00:34:20,260 --> 00:34:25,270
never catch everything testing will pre

00:34:22,440 --> 00:34:28,599
will not testing will never practically

00:34:25,270 --> 00:34:31,480
catch everything so yeah that's always

00:34:28,599 --> 00:34:36,030
going to happen as far as the rest of it

00:34:31,480 --> 00:34:38,950
I can that would be able I can see how

00:34:36,030 --> 00:34:42,700
that might happen but we've got a long

00:34:38,950 --> 00:34:45,159
ways to go before we get there I I think

00:34:42,700 --> 00:34:46,929
that as far as the most value in my mind

00:34:45,159 --> 00:34:49,929
the most valuable things to work on at

00:34:46,929 --> 00:34:51,190
the moment are still there just making

00:34:49,929 --> 00:34:54,099
the making the feedback loops

00:34:51,190 --> 00:34:56,470
shorter and getting the humans of the

00:34:54,099 --> 00:34:57,910
required commune or action out and once

00:34:56,470 --> 00:35:01,750
we get to that point then we can start

00:34:57,910 --> 00:35:03,849
talking about integration with a brt or

00:35:01,750 --> 00:35:06,069
you know doing those kind of automation

00:35:03,849 --> 00:35:09,540
so possible but I think we're a long

00:35:06,069 --> 00:35:11,079
ways off that's your question yep yep

00:35:09,540 --> 00:35:13,819
multi-part

00:35:11,079 --> 00:35:16,069
so in general when you have some sort of

00:35:13,819 --> 00:35:19,190
software is being written you would have

00:35:16,069 --> 00:35:20,380
any kids become happy employ developers

00:35:19,190 --> 00:35:23,089
of that are going to have their own

00:35:20,380 --> 00:35:26,140
their own tests that they have your own

00:35:23,089 --> 00:35:29,869
package is that anyway included in this

00:35:26,140 --> 00:35:32,269
testing or where do you guys start

00:35:29,869 --> 00:35:34,400
picking up the test at the at the

00:35:32,269 --> 00:35:36,440
package broadens and the package huge

00:35:34,400 --> 00:35:40,309
great wealth in Kenora system or is

00:35:36,440 --> 00:35:42,559
there something from the actual that

00:35:40,309 --> 00:35:45,890
particular pieces offer their own tests

00:35:42,559 --> 00:35:47,329
that are in protest and this is going to

00:35:45,890 --> 00:35:49,839
sound like I'm dodging the question but

00:35:47,329 --> 00:35:51,920
we are purposely not deciding that

00:35:49,839 --> 00:35:55,099
because I don't think that's a line that

00:35:51,920 --> 00:35:58,460
can be decided globally I think that it

00:35:55,099 --> 00:36:02,059
needs to be up to the folks you know the

00:35:58,460 --> 00:36:04,250
software better than we do I think that

00:36:02,059 --> 00:36:06,710
in a lot of cases those unit tests are

00:36:04,250 --> 00:36:08,930
going to be run during build I don't

00:36:06,710 --> 00:36:11,180
really see a point in duplicating what

00:36:08,930 --> 00:36:13,880
check does the check phase does an RPM

00:36:11,180 --> 00:36:15,829
build in a separate system I don't think

00:36:13,880 --> 00:36:20,059
there's a whole lot of value in that but

00:36:15,829 --> 00:36:21,529
I recall I've heard stories of you know

00:36:20,059 --> 00:36:23,750
test suites that come with a package

00:36:21,529 --> 00:36:25,789
that take you know three hours to run

00:36:23,750 --> 00:36:28,009
and that you don't really want to put

00:36:25,789 --> 00:36:29,569
those into check but you know they need

00:36:28,009 --> 00:36:33,019
to be run so right now they're in check

00:36:29,569 --> 00:36:35,900
because they're you know don't really

00:36:33,019 --> 00:36:37,430
have a better place for so my answer is

00:36:35,900 --> 00:36:38,599
it really depends on the package and

00:36:37,430 --> 00:36:40,640
that's something we're leaving up to the

00:36:38,599 --> 00:36:42,920
people who know the software because I

00:36:40,640 --> 00:36:46,609
think it is a per package decision so in

00:36:42,920 --> 00:36:47,930
general the majority of cases you didn't

00:36:46,609 --> 00:36:50,809
consider the tests that you guys are

00:36:47,930 --> 00:36:52,759
doing to be more or less integration

00:36:50,809 --> 00:36:54,349
where the holes are compatible yeah

00:36:52,759 --> 00:36:56,599
sorry I should I thought about that and

00:36:54,349 --> 00:37:00,980
the words did not come out I say our

00:36:56,599 --> 00:37:04,099
emphasis is more on integration um but

00:37:00,980 --> 00:37:06,950
again we're not we are providing the

00:37:04,099 --> 00:37:08,779
tools and it's kind of one of those were

00:37:06,950 --> 00:37:13,000
were kind of waiting to see where people

00:37:08,779 --> 00:37:17,600
take it because there are an

00:37:13,000 --> 00:37:20,070
overestimation of 10 of us so

00:37:17,600 --> 00:37:21,390
the but the emphasis is integration

00:37:20,070 --> 00:37:25,020
because I think that's where we're going

00:37:21,390 --> 00:37:26,400
to get the most value in until we get

00:37:25,020 --> 00:37:28,440
into the sum of the upstream stuff but

00:37:26,400 --> 00:37:29,970
for the stuff that is Fodor specific I'm

00:37:28,440 --> 00:37:32,180
not sure there's a lot of point in doing

00:37:29,970 --> 00:37:34,230
anything much else than integration or

00:37:32,180 --> 00:37:35,910
specific package testing I think those

00:37:34,230 --> 00:37:37,350
are the two cases this will help with

00:37:35,910 --> 00:37:39,420
need to make a lot of sense me as well

00:37:37,350 --> 00:37:41,340
because in this Grove of the actual

00:37:39,420 --> 00:37:44,490
patches their own even integration tests

00:37:41,340 --> 00:37:48,240
would mostly cover that unit as a whole

00:37:44,490 --> 00:37:49,950
package itself than there for me and

00:37:48,240 --> 00:37:52,200
make sense to have been great for the

00:37:49,950 --> 00:37:54,210
entire system together yeah i mean the

00:37:52,200 --> 00:37:57,300
system itself was designed to not just

00:37:54,210 --> 00:38:01,410
from tests the whole point of this the

00:37:57,300 --> 00:38:03,600
the system was too no nose is still it

00:38:01,410 --> 00:38:06,740
tastes this toxin i start using tool

00:38:03,600 --> 00:38:10,530
names now the whole point of it was that

00:38:06,740 --> 00:38:12,450
it's silly for i mean every part of

00:38:10,530 --> 00:38:15,030
drawers strapped for resources most of

00:38:12,450 --> 00:38:16,290
the human kind it's silly for multiple

00:38:15,030 --> 00:38:18,480
groups to ever group to be going around

00:38:16,290 --> 00:38:21,060
writing their own automation let's just

00:38:18,480 --> 00:38:22,770
have something that's as generic as we

00:38:21,060 --> 00:38:26,340
can make it while still keeping our

00:38:22,770 --> 00:38:30,950
sanity and still being useful to just

00:38:26,340 --> 00:38:30,950
basically run thing on that message

00:38:33,130 --> 00:38:38,650
like global history on the packaging

00:38:35,920 --> 00:38:42,309
item there was one back where some

00:38:38,650 --> 00:38:44,950
application was a competitive you are so

00:38:42,309 --> 00:38:46,960
this system is focused on testing

00:38:44,950 --> 00:38:49,059
particular packages and integration of

00:38:46,960 --> 00:38:52,690
one package will ephedra but on a global

00:38:49,059 --> 00:38:55,750
thank you adaptive system to the yeah

00:38:52,690 --> 00:38:57,759
this is that is not where were where we

00:38:55,750 --> 00:39:00,309
are right now we're just trying to take

00:38:57,759 --> 00:39:01,809
this one step at a time and to go first

00:39:00,309 --> 00:39:03,880
with the package specific set the system

00:39:01,809 --> 00:39:05,769
itself I mean basically you give it

00:39:03,880 --> 00:39:07,660
these are the packages I want installed

00:39:05,769 --> 00:39:09,099
you know this is the version I want to

00:39:07,660 --> 00:39:11,710
start with care some commands don't you

00:39:09,099 --> 00:39:15,339
and here are my results go report that

00:39:11,710 --> 00:39:18,609
right is essentially what it does so if

00:39:15,339 --> 00:39:20,440
that could be done there like on food

00:39:18,609 --> 00:39:23,380
it's not what it's not what we're

00:39:20,440 --> 00:39:24,970
emphasizing right now if you can think

00:39:23,380 --> 00:39:29,230
of it I mean if you have ideas please

00:39:24,970 --> 00:39:31,509
come to us but it's not like right now

00:39:29,230 --> 00:39:33,789
we're pushing artist on the per package

00:39:31,509 --> 00:39:35,289
stuff and once that's done then we can

00:39:33,789 --> 00:39:38,769
start looking on to what's next as far

00:39:35,289 --> 00:39:40,960
as the global or certain area things

00:39:38,769 --> 00:39:44,009
that need to be run does answer your

00:39:40,960 --> 00:39:47,940
question yeah okay any other questions

00:39:44,009 --> 00:39:47,940

YouTube URL: https://www.youtube.com/watch?v=uk0phYcs_QM


