Title: Flock 2016 - Ensuring ABI stability in Fedora, Sinny Kumari and Dodji Seketeli
Publication date: 2016-08-21
Playlist: Flock 2016
Description: 
	In this talk we will give an overview of what Libabigail is and what tools it provides to do ABI analysis of your C/C++ applications. The talk aims to explain why performing ABI checks in packages shipped with Fedora is important. A Fedora packager attending the talk will be able to ensure that her package is ABI stable with very less effort. We will talk about how and why ABI checks are enabled for Fedora package updates pushed in bodhi and how a package maintainer should respond to it. Finally, we'll also talk about upcoming features in libabigail which will be useful for Fedora.

https://flock2016.sched.org/event/76n3/ensuring-abi-stability-in-fedora

This video was recorded at the annual Fedora contributor conference, Flock, in KrakÃ³w, Poland, from August 2-5, 2016. You can learn more about Flock at https://flocktofedora.org.

#FlockToFedora

Slides: https://sinnykumari.fedorapeople.org/slides/flock2016/abichecking-in-fedora.pdf
Captions: 
	00:00:00,000 --> 00:00:08,389
have thank you for coming to our our

00:00:03,449 --> 00:00:13,019
talk so today we're going to talk about

00:00:08,389 --> 00:00:18,029
everything ABI basically in in fedora as

00:00:13,019 --> 00:00:23,279
far as elf binaries are concerned so for

00:00:18,029 --> 00:00:28,230
those of you who don't know us my name

00:00:23,279 --> 00:00:32,520
is dodgy I work for red hat and I worked

00:00:28,230 --> 00:00:35,130
in the tools team mostly on static

00:00:32,520 --> 00:00:39,540
analysis of binaries so basically

00:00:35,130 --> 00:00:43,320
applying compiler technology tricks to

00:00:39,540 --> 00:00:45,360
analyze binaries to know whether what

00:00:43,320 --> 00:00:49,340
we're doing with our API is these days

00:00:45,360 --> 00:00:52,320
hi I'm singing and I'm working in that

00:00:49,340 --> 00:00:55,649
in our opportunity of architecture team

00:00:52,320 --> 00:01:00,780
and when a good time i work on area

00:00:55,649 --> 00:01:03,989
stock so into this presentation we're

00:01:00,780 --> 00:01:08,490
going to talk about well or focused

00:01:03,989 --> 00:01:11,100
about mainly out say five points first

00:01:08,490 --> 00:01:13,890
of all I'll try to explain what we mean

00:01:11,100 --> 00:01:19,610
by an application binary interface this

00:01:13,890 --> 00:01:24,080
is kind of a fuzzy fuzzy area and then

00:01:19,610 --> 00:01:28,170
we'll talk about what we mean by ABI

00:01:24,080 --> 00:01:30,630
compatibility in general and then we

00:01:28,170 --> 00:01:34,320
talked about the you know tooling we

00:01:30,630 --> 00:01:36,930
have in fedora today to try and tame

00:01:34,320 --> 00:01:39,900
those idea compatibility channel API

00:01:36,930 --> 00:01:44,100
changes and if time permits and I hope

00:01:39,900 --> 00:01:46,950
it will we'll look at some real examples

00:01:44,100 --> 00:01:51,020
of ABI we change reports that we have

00:01:46,950 --> 00:01:56,369
today in production in in in fedora and

00:01:51,020 --> 00:02:00,060
well we talk about future right as we

00:01:56,369 --> 00:02:05,579
usually do at the end of talks so first

00:02:00,060 --> 00:02:07,849
of all what do we mean by ABI so during

00:02:05,579 --> 00:02:10,009
this talk I'm going to talk about

00:02:07,849 --> 00:02:14,060
usually about two binary

00:02:10,009 --> 00:02:17,120
right there's going to be one binary

00:02:14,060 --> 00:02:22,480
that uses another one so the first

00:02:17,120 --> 00:02:26,239
binary i'll name it e that's the context

00:02:22,480 --> 00:02:30,829
the second binary so ii will use food

00:02:26,239 --> 00:02:33,730
from l which is the second binary and so

00:02:30,829 --> 00:02:36,799
the first binary usually is either an

00:02:33,730 --> 00:02:39,170
execute tool that's where the e comes

00:02:36,799 --> 00:02:43,190
from but it can also be a shell library

00:02:39,170 --> 00:02:47,180
and the second binary is usually a shirt

00:02:43,190 --> 00:02:49,579
library but it can also be a module that

00:02:47,180 --> 00:02:51,260
is dynamically loaded so when I whenever

00:02:49,579 --> 00:02:52,790
I say executable it can be shared

00:02:51,260 --> 00:02:58,239
library when it's a library can be a

00:02:52,790 --> 00:03:01,879
dynamic dynamically loaded module

00:02:58,239 --> 00:03:08,030
confusing okay we can go straight ahead

00:03:01,879 --> 00:03:11,750
so once this context is set up we need

00:03:08,030 --> 00:03:17,060
to understand that usually II the

00:03:11,750 --> 00:03:19,699
executive all at execution time requires

00:03:17,060 --> 00:03:23,959
some properties from the library right

00:03:19,699 --> 00:03:25,730
and so I'm not going to talk about all

00:03:23,959 --> 00:03:28,129
the property as possible right I'm going

00:03:25,730 --> 00:03:30,199
to focus on a subset and that subsets is

00:03:28,129 --> 00:03:34,340
going to be what we call da da right so

00:03:30,199 --> 00:03:37,459
for instance one property that is that

00:03:34,340 --> 00:03:40,609
he would expect from L will be some

00:03:37,459 --> 00:03:43,579
format for instance if we are on linux

00:03:40,609 --> 00:03:49,660
the format will be elf if we are on mac

00:03:43,579 --> 00:03:52,250
OS 10 god forbid it will be mac dash 0

00:03:49,660 --> 00:03:56,959
for instance and on windows it will be

00:03:52,250 --> 00:04:01,310
PG portable executable etc etc and once

00:03:56,959 --> 00:04:03,349
that once we are in a format the

00:04:01,310 --> 00:04:06,949
architecture count if you're running an

00:04:03,349 --> 00:04:10,609
acceptable of course which is a i don't

00:04:06,949 --> 00:04:14,359
know intel architecture based then the

00:04:10,609 --> 00:04:14,880
library needs to be Intel as well etc

00:04:14,359 --> 00:04:17,820
etc

00:04:14,880 --> 00:04:22,380
and then there are more interesting

00:04:17,820 --> 00:04:24,810
stuff required the presence of certain

00:04:22,380 --> 00:04:27,960
symbols who here doesn't know what the

00:04:24,810 --> 00:04:33,690
symbol is it's okay if we have time to

00:04:27,960 --> 00:04:39,170
explain okay great maybe I should have

00:04:33,690 --> 00:04:41,610
asked who knows because polar ashamed so

00:04:39,170 --> 00:04:43,500
the presence of certain symbols and

00:04:41,610 --> 00:04:47,640
those symbols can be either from

00:04:43,500 --> 00:04:50,340
functions or global variables even files

00:04:47,640 --> 00:04:53,670
you know weird things from from from the

00:04:50,340 --> 00:05:00,420
elf binaries in our case our case in

00:04:53,670 --> 00:05:03,360
Linux and even more interesting is the

00:05:00,420 --> 00:05:08,400
layout of the data that is expected from

00:05:03,360 --> 00:05:10,130
the code that starts at those symbols if

00:05:08,400 --> 00:05:15,690
I say something that is not clear please

00:05:10,130 --> 00:05:21,560
stop me right away so those properties

00:05:15,690 --> 00:05:24,390
are all expected you know between the

00:05:21,560 --> 00:05:30,630
two batteries and there are even more

00:05:24,390 --> 00:05:33,900
right there are things like you know

00:05:30,630 --> 00:05:36,180
function calling conventions how you

00:05:33,900 --> 00:05:41,970
pass parameters you know things like

00:05:36,180 --> 00:05:45,210
that one thing that I am NOT talking

00:05:41,970 --> 00:05:47,490
about is the behavior is you know

00:05:45,210 --> 00:05:49,590
whether what the function actually is

00:05:47,490 --> 00:05:52,140
doing for instance that we're not we

00:05:49,590 --> 00:05:55,380
don't care about right so we only care

00:05:52,140 --> 00:05:58,440
about properties that define the

00:05:55,380 --> 00:06:01,140
structure of you know of the entry

00:05:58,440 --> 00:06:04,170
points okay you know what starts at the

00:06:01,140 --> 00:06:07,590
symbols address so these are what I call

00:06:04,170 --> 00:06:13,200
structural properties right not how the

00:06:07,590 --> 00:06:17,910
function behaves right and so those

00:06:13,200 --> 00:06:21,120
properties constitute I would say a very

00:06:17,910 --> 00:06:22,180
loose contract you know between the

00:06:21,120 --> 00:06:26,070
executable and

00:06:22,180 --> 00:06:32,500
library and that news contract and is

00:06:26,070 --> 00:06:35,710
what we call the api here I'm staying

00:06:32,500 --> 00:06:38,259
general but with time we'll see more

00:06:35,710 --> 00:06:41,050
concrete examples of these things so

00:06:38,259 --> 00:06:44,050
we're talking specifically about the ABI

00:06:41,050 --> 00:06:46,150
of a binary as opposed to talking for

00:06:44,050 --> 00:06:47,680
instance about the API open OS of an

00:06:46,150 --> 00:06:49,750
operating system we're not talking about

00:06:47,680 --> 00:06:51,880
that we're not talking about the API of

00:06:49,750 --> 00:06:54,520
the kernel for instance just you know

00:06:51,880 --> 00:06:58,539
userspace binaries in this case so I'm

00:06:54,520 --> 00:07:02,560
now narrowing the scope down and so and

00:06:58,539 --> 00:07:05,020
in that context this ABI is made of the

00:07:02,560 --> 00:07:07,840
set of symbols that are symbols of

00:07:05,020 --> 00:07:12,250
functions and global variables that are

00:07:07,840 --> 00:07:14,770
defined in the binary and exported from

00:07:12,250 --> 00:07:18,220
that banner we're also talking about the

00:07:14,770 --> 00:07:23,050
layout of the data that is used by those

00:07:18,220 --> 00:07:25,479
symbols right and things I did talk

00:07:23,050 --> 00:07:29,710
about at the beginning like the format

00:07:25,479 --> 00:07:34,919
of the binary the architecture and and

00:07:29,710 --> 00:07:41,260
things like that so these artifacts are

00:07:34,919 --> 00:07:46,449
the ABI basically so usually people say

00:07:41,260 --> 00:07:48,820
that oh you change the API bad you well

00:07:46,449 --> 00:07:52,300
actually you know we're doing free

00:07:48,820 --> 00:07:54,870
software and we want free software to

00:07:52,300 --> 00:07:57,729
you know to strive for that to happen

00:07:54,870 --> 00:08:01,840
well we need change we need things to

00:07:57,729 --> 00:08:05,620
evolve we need bugs you know to be fixed

00:08:01,840 --> 00:08:13,030
we need new features to be added right

00:08:05,620 --> 00:08:16,570
and well we're not that rich so well we

00:08:13,030 --> 00:08:18,759
need to share functionality so unless

00:08:16,570 --> 00:08:21,110
we're doing we're writing everything in

00:08:18,759 --> 00:08:24,080
go we're

00:08:21,110 --> 00:08:27,970
we're going to have shared libraries

00:08:24,080 --> 00:08:32,780
around for some time to come right so

00:08:27,970 --> 00:08:35,110
yes by doing this well we'll add new

00:08:32,780 --> 00:08:37,850
functions will add new global variables

00:08:35,110 --> 00:08:40,730
functions will get new parameters all

00:08:37,850 --> 00:08:43,640
those things will change so avi changes

00:08:40,730 --> 00:08:46,220
are going to be there for now and for

00:08:43,640 --> 00:08:51,680
the foreseeable future future so that

00:08:46,220 --> 00:08:55,760
change is inevitable right so when we

00:08:51,680 --> 00:08:59,210
need to have basically is a way to say

00:08:55,760 --> 00:09:02,060
okay first it's a way to see the change

00:08:59,210 --> 00:09:04,280
the ID I change right as opposed to

00:09:02,060 --> 00:09:07,100
seeing changes in source code for

00:09:04,280 --> 00:09:09,530
instance right and we need to be able to

00:09:07,100 --> 00:09:13,430
categorize that change say this one is

00:09:09,530 --> 00:09:17,780
good this one is bad and this one I need

00:09:13,430 --> 00:09:22,100
to think about it I need to review it so

00:09:17,780 --> 00:09:27,130
this is what i mean by managing the API

00:09:22,100 --> 00:09:33,830
challenges so to be able to detect

00:09:27,130 --> 00:09:39,590
problems well we need to make al can you

00:09:33,830 --> 00:09:42,140
read that the font is we're here so we

00:09:39,590 --> 00:09:45,740
need to be able to spot the changes that

00:09:42,140 --> 00:09:51,470
make the ABI of you know for instance of

00:09:45,740 --> 00:09:54,950
a library incompatible with applications

00:09:51,470 --> 00:09:59,060
that are linked to previous versions of

00:09:54,950 --> 00:10:02,390
that library so we need to be able to

00:09:59,060 --> 00:10:07,400
see those challenges and stop them when

00:10:02,390 --> 00:10:10,550
at least they're ABI incompatible for

00:10:07,400 --> 00:10:13,130
instance if there is a function that is

00:10:10,550 --> 00:10:15,560
removed that is probably an ABI

00:10:13,130 --> 00:10:18,590
incompatible change because if there is

00:10:15,560 --> 00:10:21,320
an application that was relying on those

00:10:18,590 --> 00:10:23,510
functions well and you have a new

00:10:21,320 --> 00:10:25,790
version of that library without those

00:10:23,510 --> 00:10:27,180
functions well that application that is

00:10:25,790 --> 00:10:30,180
out there in you know

00:10:27,180 --> 00:10:32,190
the wild will probably stop working

00:10:30,180 --> 00:10:35,010
reliably because it expects something

00:10:32,190 --> 00:10:39,810
that is not there anymore that change

00:10:35,010 --> 00:10:42,630
need to be spotted you know in a you

00:10:39,810 --> 00:10:44,760
know in a meaningful way even more

00:10:42,630 --> 00:10:46,710
interesting for instance suppose you

00:10:44,760 --> 00:10:49,350
have in the library a function that is

00:10:46,710 --> 00:10:52,050
expecting some data that has a certain

00:10:49,350 --> 00:10:54,120
length and then you have a new version

00:10:52,050 --> 00:10:57,120
of the library that changes that

00:10:54,120 --> 00:10:58,800
expectation well sorry a new version of

00:10:57,120 --> 00:11:01,140
that library that provides a data that

00:10:58,800 --> 00:11:04,850
is shorter so the former code of the

00:11:01,140 --> 00:11:08,400
application expects a buffer the data

00:11:04,850 --> 00:11:10,980
you know that is wider than what is

00:11:08,400 --> 00:11:12,840
actually in the newer version of the

00:11:10,980 --> 00:11:15,900
library what do we get in that case

00:11:12,840 --> 00:11:21,120
buffer overflow you know security issues

00:11:15,900 --> 00:11:23,850
that are hard to to debug and you know

00:11:21,120 --> 00:11:30,210
and fix so that change in particular

00:11:23,850 --> 00:11:32,730
need to be spotted early on etc etc and

00:11:30,210 --> 00:11:35,100
so I won't get too much into details

00:11:32,730 --> 00:11:40,590
when about when this kind of changes

00:11:35,100 --> 00:11:42,960
happen but you have examples here so all

00:11:40,590 --> 00:11:45,390
these small changes i'm talking about we

00:11:42,960 --> 00:11:47,910
need to be able to spot them just by

00:11:45,390 --> 00:11:50,610
looking at the binary again we're not

00:11:47,910 --> 00:11:55,350
looking at source code here so

00:11:50,610 --> 00:11:58,500
interesting but then one with we're

00:11:55,350 --> 00:12:00,600
capable of of of spotting the bad

00:11:58,500 --> 00:12:03,930
changes then we can see the other

00:12:00,600 --> 00:12:06,870
changes too and say okay these ones are

00:12:03,930 --> 00:12:11,040
okay they're okay but I still want to

00:12:06,870 --> 00:12:13,620
see them right just in case we'll see

00:12:11,040 --> 00:12:21,840
examples of word that can be interesting

00:12:13,620 --> 00:12:25,230
and of course we want to see those

00:12:21,840 --> 00:12:27,930
changes as soon as possible right

00:12:25,230 --> 00:12:29,140
because of course users will see them in

00:12:27,930 --> 00:12:31,730
the end

00:12:29,140 --> 00:12:35,589
but if we can see those for instance

00:12:31,730 --> 00:12:39,740
upstream even before we as a distributor

00:12:35,589 --> 00:12:46,880
handle you know the packages push before

00:12:39,740 --> 00:12:51,170
we push new packages even better so to

00:12:46,880 --> 00:12:53,690
me one interesting way of seeing well

00:12:51,170 --> 00:12:57,290
when it's interesting way of approaching

00:12:53,690 --> 00:13:02,180
this thing is to reuse existing concepts

00:12:57,290 --> 00:13:04,870
that we have today today we we do this

00:13:02,180 --> 00:13:08,060
kind of review for source code right

00:13:04,870 --> 00:13:10,670
when there is a new usually its upstream

00:13:08,060 --> 00:13:13,459
when there is a new patch it is reviewed

00:13:10,670 --> 00:13:15,230
usually right and what do we use for

00:13:13,459 --> 00:13:19,040
that what's the cornerstone of this

00:13:15,230 --> 00:13:22,070
process it's good new diff we review

00:13:19,040 --> 00:13:24,620
changes review diffs right and this is

00:13:22,070 --> 00:13:27,680
how we spot changes that are possibly

00:13:24,620 --> 00:13:30,170
harmful etc etc so we thought that

00:13:27,680 --> 00:13:33,290
having the same comp you know concept of

00:13:30,170 --> 00:13:36,709
reviewing just changes will be

00:13:33,290 --> 00:13:38,480
interesting and those changes that will

00:13:36,709 --> 00:13:41,540
be interesting if those changes are

00:13:38,480 --> 00:13:43,699
narrow enough to only represent a bi

00:13:41,540 --> 00:13:45,620
changes so that we could have the same

00:13:43,699 --> 00:13:55,209
process as we have for source code but

00:13:45,620 --> 00:13:59,420
just for a bi so it will be ah well

00:13:55,209 --> 00:14:02,870
why one of the reasons why we're not we

00:13:59,420 --> 00:14:04,399
were not capable of spotting ABI changes

00:14:02,870 --> 00:14:08,449
just by looking at source code is

00:14:04,399 --> 00:14:11,600
because of the signal-to-noise ratio

00:14:08,449 --> 00:14:17,029
right a lot of source code changes don't

00:14:11,600 --> 00:14:19,310
impact ABI right so yeah something

00:14:17,029 --> 00:14:23,810
tailored just for ABI I think is really

00:14:19,310 --> 00:14:27,500
needed so which brings us to the tooling

00:14:23,810 --> 00:14:29,649
that we have in fedora today for doing

00:14:27,500 --> 00:14:29,649
that

00:14:38,140 --> 00:14:46,810
okay so so far we saw that how a BIA

00:14:43,270 --> 00:14:49,590
impacts different oh your event paths

00:14:46,810 --> 00:14:53,290
are different other applications so

00:14:49,590 --> 00:14:55,990
we'll see how we are going to dim this

00:14:53,290 --> 00:14:58,840
in fedora because all the packages are

00:14:55,990 --> 00:15:01,330
built in fedora and the couple of

00:14:58,840 --> 00:15:04,960
packages depend on up on our package so

00:15:01,330 --> 00:15:07,750
if a via changes in one package which on

00:15:04,960 --> 00:15:10,240
which other packages real life then what

00:15:07,750 --> 00:15:11,980
happens that if there is no changes in

00:15:10,240 --> 00:15:15,730
package but due to the change in the

00:15:11,980 --> 00:15:18,220
dependent package is possible that the

00:15:15,730 --> 00:15:20,860
even the package treble will not work

00:15:18,220 --> 00:15:24,130
because the the ABI has been changed

00:15:20,860 --> 00:15:27,250
under the set of functions on which it

00:15:24,130 --> 00:15:30,460
was relying on it has been changed so it

00:15:27,250 --> 00:15:33,460
needs to be taken care in fedora so that

00:15:30,460 --> 00:15:36,790
we can avoid doing such we can avoid

00:15:33,460 --> 00:15:40,600
such changes in fedora and we can have a

00:15:36,790 --> 00:15:45,220
better a better distribution without

00:15:40,600 --> 00:15:49,450
much ABI break it is alone so what we

00:15:45,220 --> 00:15:51,730
are doing well we know that every new

00:15:49,450 --> 00:15:54,700
updates is shipped by the Cote and there

00:15:51,730 --> 00:15:59,020
is new Gribble happens so for each new

00:15:54,700 --> 00:16:02,590
rebuild we will try to for each new

00:15:59,020 --> 00:16:06,670
grivel we will try to make a viet checks

00:16:02,590 --> 00:16:09,580
to the previous stable release release

00:16:06,670 --> 00:16:12,610
of the package suppose for example we

00:16:09,580 --> 00:16:16,540
are having federal 24 and there is a new

00:16:12,610 --> 00:16:19,150
update for full package and so there is

00:16:16,540 --> 00:16:21,910
a new update so it's now the new pack

00:16:19,150 --> 00:16:25,900
all the packages will use that new pack

00:16:21,910 --> 00:16:28,300
news at new food version so it needs to

00:16:25,900 --> 00:16:30,790
be tested against the avia stability so

00:16:28,300 --> 00:16:34,300
that if any package rely on the full

00:16:30,790 --> 00:16:37,440
package then it it doesn't break due to

00:16:34,300 --> 00:16:37,440
the change in the full package

00:16:39,720 --> 00:16:48,970
yeah so so what it does so it checks for

00:16:44,230 --> 00:16:50,680
the ABI and ten cents package me then

00:16:48,970 --> 00:16:53,560
was what should be done if there is a

00:16:50,680 --> 00:16:56,080
changes then send the report of the ABA

00:16:53,560 --> 00:16:57,580
changes to the maintainer so that he

00:16:56,080 --> 00:16:59,470
knows that these are the changes and

00:16:57,580 --> 00:17:03,580
they should review the changes whether

00:16:59,470 --> 00:17:06,040
it's a valid change or not and maybe we

00:17:03,580 --> 00:17:08,770
didn't do it new rebuild or maybe it's

00:17:06,040 --> 00:17:17,440
it's important a purchase then maybe

00:17:08,770 --> 00:17:19,710
flag those changes so we can categorize

00:17:17,440 --> 00:17:22,870
all they were changes into three parts

00:17:19,710 --> 00:17:26,800
which some of if there is no changes we

00:17:22,870 --> 00:17:29,260
can mark them as past and if if the r is

00:17:26,800 --> 00:17:31,600
it compatible in compatibly we are

00:17:29,260 --> 00:17:33,700
changes then we can say that it has been

00:17:31,600 --> 00:17:37,660
failed so that package material can look

00:17:33,700 --> 00:17:39,970
into it and say that it's better a valid

00:17:37,660 --> 00:17:42,700
change or not and to maybe do a new

00:17:39,970 --> 00:17:46,120
rebuild and to some areas grey area

00:17:42,700 --> 00:17:49,330
which may impact as a be a change in

00:17:46,120 --> 00:17:52,420
mahopac the other packages or may not be

00:17:49,330 --> 00:17:57,420
so these are like needs to be manually

00:17:52,420 --> 00:17:57,420
reviewed and we see a sneeze inspection

00:18:01,900 --> 00:18:08,320
so what tooling we are using in a fedora

00:18:05,020 --> 00:18:11,140
for the ABA checking we are using toss

00:18:08,320 --> 00:18:16,840
the trough any who all are aware of

00:18:11,140 --> 00:18:19,660
hospital okay so if you don't notice

00:18:16,840 --> 00:18:23,500
Cutrone is a framework which allows you

00:18:19,660 --> 00:18:27,370
to write automatic automated tasks so

00:18:23,500 --> 00:18:30,130
like we have RPM lint we have with in

00:18:27,370 --> 00:18:34,090
which you do the checks for spec files

00:18:30,130 --> 00:18:41,080
and we have added one ABI chapters which

00:18:34,090 --> 00:18:43,900
does a beer checking so right now we

00:18:41,080 --> 00:18:46,780
right now we are doing a vh X for the

00:18:43,900 --> 00:18:49,330
subset of packages which are in the

00:18:46,780 --> 00:18:53,230
critical path and what it does is

00:18:49,330 --> 00:18:57,310
basically a bhx get triggered or when

00:18:53,230 --> 00:19:00,910
there is a new update in Cote enter and

00:18:57,310 --> 00:19:03,310
it takes the latest stable package and

00:19:00,910 --> 00:19:07,000
the package which has been recently

00:19:03,310 --> 00:19:10,090
uploaded and and the aviary phase

00:19:07,000 --> 00:19:13,660
compared enter if there and the results

00:19:10,090 --> 00:19:18,150
is shown and your it still still status

00:19:13,660 --> 00:19:18,150
with a past failed on in need inspection

00:19:20,220 --> 00:19:27,940
so if this a be a check toss Petronius

00:19:25,120 --> 00:19:31,090
automated tasks but package maintainer

00:19:27,940 --> 00:19:34,929
can also around it offline by using the

00:19:31,090 --> 00:19:38,020
fed a be epic adjective tool which can

00:19:34,929 --> 00:19:41,770
be run on the command line or under on

00:19:38,020 --> 00:19:45,580
the command line you can say a fade AV

00:19:41,770 --> 00:19:47,740
epic is a diff and and the NVR of the

00:19:45,580 --> 00:19:51,280
package and it will pull from the koji

00:19:47,740 --> 00:19:55,200
are the update and it will do the ebrd

00:19:51,280 --> 00:19:58,870
floki and so before pushing it to the

00:19:55,200 --> 00:20:04,659
fedora of kochi it's better to do the

00:19:58,870 --> 00:20:06,880
change change X locally and for the

00:20:04,659 --> 00:20:10,960
package maintenance there are also tools

00:20:06,880 --> 00:20:13,570
like a VIP kitchen two diff and a be

00:20:10,960 --> 00:20:16,390
idea which is independent of the filth

00:20:13,570 --> 00:20:21,480
fedora it can be run on debian oil can

00:20:16,390 --> 00:20:25,000
be run on simple tar files and so on so

00:20:21,480 --> 00:20:27,789
everyone should to the ABA checking so

00:20:25,000 --> 00:20:31,679
that all the packages which depend on

00:20:27,789 --> 00:20:38,080
the given set of package doesn't break

00:20:31,679 --> 00:20:41,230
and this is the a basic work is life

00:20:38,080 --> 00:20:43,870
until it runs on tas patron production

00:20:41,230 --> 00:20:47,530
instance so if you want you can check it

00:20:43,870 --> 00:20:51,010
out we have links further and right now

00:20:47,530 --> 00:20:55,870
we have two limitations so it runs on CL

00:20:51,010 --> 00:20:58,809
c++ of applications and we currently

00:20:55,870 --> 00:21:00,700
running on twit path packages which we

00:20:58,809 --> 00:21:05,100
are planning to further improve it to

00:21:00,700 --> 00:21:05,100
run on all doors all the packages

00:21:06,039 --> 00:21:14,749
so you're in so like I have to talk time

00:21:09,950 --> 00:21:17,539
this one we're talking about okay so

00:21:14,749 --> 00:21:21,229
here is a material example so which has

00:21:17,539 --> 00:21:28,039
been taken from the from the hospital

00:21:21,229 --> 00:21:32,079
run on the package chip for the gpg me

00:21:28,039 --> 00:21:37,219
you pity me so you can you can see that

00:21:32,079 --> 00:21:39,579
the log is forfeit I 23 and next so the

00:21:37,219 --> 00:21:43,129
output is a split it in two different

00:21:39,579 --> 00:21:44,749
pitches so laughter we can show all the

00:21:43,129 --> 00:21:46,399
reports are together it runs for

00:21:44,749 --> 00:21:49,039
different architectures so we cannot

00:21:46,399 --> 00:21:54,229
show it all together so it's a small

00:21:49,039 --> 00:21:57,679
subset of the results so you can see

00:21:54,229 --> 00:22:03,320
that these two versions of happiness has

00:21:57,679 --> 00:22:08,359
been compelled and the changes which are

00:22:03,320 --> 00:22:11,450
shown it's like it's forward each each

00:22:08,359 --> 00:22:15,229
binary available in the package so on

00:22:11,450 --> 00:22:17,209
each binary the API compilation will be

00:22:15,229 --> 00:22:20,089
done and if there is any change that

00:22:17,209 --> 00:22:23,539
change will be shown so we can see that

00:22:20,089 --> 00:22:25,399
the there is a library quality chippy

00:22:23,539 --> 00:22:29,499
give me half an Patriot burner so

00:22:25,399 --> 00:22:32,869
available in the TP Jimmy Jimmy Jimmy

00:22:29,499 --> 00:22:36,200
package so there are some API changes so

00:22:32,869 --> 00:22:38,820
we are showing it and we see that there

00:22:36,200 --> 00:22:42,929
is no function removed so it's okay aunt

00:22:38,820 --> 00:22:45,929
there is a change in the there is change

00:22:42,929 --> 00:22:47,549
in the existing functions or whatever so

00:22:45,929 --> 00:22:51,509
we'll see later on and there are seven

00:22:47,549 --> 00:22:53,610
added functions rest are fine so let's

00:22:51,509 --> 00:22:58,889
see what exactly these changes are in

00:22:53,610 --> 00:23:02,100
detail so we saw that there were seven

00:22:58,889 --> 00:23:06,210
added functions so these are a few

00:23:02,100 --> 00:23:09,509
functions you can see that this is the

00:23:06,210 --> 00:23:13,049
detail of prototype kind of thing before

00:23:09,509 --> 00:23:16,710
the functions the cast are the chief

00:23:13,049 --> 00:23:18,899
eating me are ya this is the function

00:23:16,710 --> 00:23:21,809
name and this is the return type and

00:23:18,899 --> 00:23:23,750
this is the symbol name which you see in

00:23:21,809 --> 00:23:26,879
the library this is in the source code

00:23:23,750 --> 00:23:28,740
so this is kind of mapping which is you

00:23:26,879 --> 00:23:30,600
can see that it's it show you in the

00:23:28,740 --> 00:23:35,629
detail what exactly the function

00:23:30,600 --> 00:23:39,450
prototype can be and this is the

00:23:35,629 --> 00:23:42,080
versioning of the symbol which is seeing

00:23:39,450 --> 00:23:42,080
the boundary

00:23:44,730 --> 00:23:52,380
so they were received that there was one

00:23:48,600 --> 00:23:56,730
change in the function in the subtype so

00:23:52,380 --> 00:24:00,870
let's see okay so that change in the

00:23:56,730 --> 00:24:03,809
function this cheap itching me and the

00:24:00,870 --> 00:24:06,299
score canceled and the function return

00:24:03,809 --> 00:24:08,940
type is GP Jimmy and this for error and

00:24:06,299 --> 00:24:11,790
this is a fun this is the parameter to

00:24:08,940 --> 00:24:14,370
the function so in the subject change we

00:24:11,790 --> 00:24:18,840
will show that if there is any change in

00:24:14,370 --> 00:24:22,590
the behavior of the parameters either or

00:24:18,840 --> 00:24:25,410
in the return type so let's see where

00:24:22,590 --> 00:24:28,770
exactly the changes and this you can see

00:24:25,410 --> 00:24:35,100
that this function is defined at land

00:24:28,770 --> 00:24:38,010
number 194 in this file so okay the

00:24:35,100 --> 00:24:40,020
change is in parameter one question

00:24:38,010 --> 00:24:42,240
maybe it's because I controversy

00:24:40,020 --> 00:24:44,190
developer but you said that you are only

00:24:42,240 --> 00:24:47,100
looking at the boundaries and now you

00:24:44,190 --> 00:24:49,270
know exactly on which line yes or Scott

00:24:47,100 --> 00:24:52,540
it was yes you can

00:24:49,270 --> 00:24:55,180
exactly we have debug in fairy tales are

00:24:52,540 --> 00:24:57,760
forgiven exactly so we're trying to do

00:24:55,180 --> 00:25:01,860
the same kind of analysis that burger

00:24:57,760 --> 00:25:04,870
burger will do today but just for media

00:25:01,860 --> 00:25:07,420
analysis thing so this is the make the

00:25:04,870 --> 00:25:11,200
point right try to show the kind of

00:25:07,420 --> 00:25:14,080
details we can extract by just looking

00:25:11,200 --> 00:25:17,020
at the binary because it nice really

00:25:14,080 --> 00:25:18,940
needs to make sense to the okay to the

00:25:17,020 --> 00:25:21,220
programmer of course but not only to

00:25:18,940 --> 00:25:24,550
programmer to the guy doing the package

00:25:21,220 --> 00:25:27,070
maintenance you know so yeah we need to

00:25:24,550 --> 00:25:29,380
talk about things that make sense right

00:25:27,070 --> 00:25:33,660
types function names not symbols

00:25:29,380 --> 00:25:33,660
addresses you know offsets

00:25:37,030 --> 00:25:43,570
okay so the change in so we can see that

00:25:40,480 --> 00:25:46,030
this function is real-time now the

00:25:43,570 --> 00:25:49,900
change is in parameter 1 which is the

00:25:46,030 --> 00:25:53,320
type if so there is a change so let's

00:25:49,900 --> 00:25:58,810
see what exactly this type it is okay so

00:25:53,320 --> 00:26:01,720
this is a kind of pointer of time tpg me

00:25:58,810 --> 00:26:04,270
in this context so we know that it must

00:26:01,720 --> 00:26:06,400
be pointing to something so let's see

00:26:04,270 --> 00:26:08,850
what exactly is so it's basically

00:26:06,400 --> 00:26:11,950
instead of pointing to a structure so

00:26:08,850 --> 00:26:15,340
okay so we know that the change is

00:26:11,950 --> 00:26:18,580
actually in this structure and and the

00:26:15,340 --> 00:26:24,280
structure is different at one picking

00:26:18,580 --> 00:26:26,380
this 576 line number so okay next so

00:26:24,280 --> 00:26:30,010
what exactly change happens so you can

00:26:26,380 --> 00:26:34,360
see that type size have changed from 1-6

00:26:30,010 --> 00:26:36,610
6-4 to 1792 bits so basically the size

00:26:34,360 --> 00:26:39,940
of the structure which was earlier is

00:26:36,610 --> 00:26:42,960
not the same it has been changed so you

00:26:39,940 --> 00:26:46,800
now see what exactly have been changed

00:26:42,960 --> 00:26:50,250
okay so three data member in fashion

00:26:46,800 --> 00:26:50,250
small screams

00:26:51,010 --> 00:26:59,000
so the first age is this new new data

00:26:56,480 --> 00:27:02,420
ties have been introduced at opposite

00:26:59,000 --> 00:27:05,900
416 so you can see that the opposite the

00:27:02,420 --> 00:27:08,570
size was once in 64 and they impose

00:27:05,900 --> 00:27:11,090
introduced at 416 so it's basically the

00:27:08,570 --> 00:27:14,570
insertion is in between somewhere in the

00:27:11,090 --> 00:27:17,420
structure so if the changes in between

00:27:14,570 --> 00:27:23,410
so it's most likely that the disp and

00:27:17,420 --> 00:27:27,170
chains lead to the breakage and

00:27:23,410 --> 00:27:30,860
similarly this change is done at 12 16

00:27:27,170 --> 00:27:32,750
and 1280 so all the three-member data

00:27:30,860 --> 00:27:35,510
members has been added in between the

00:27:32,750 --> 00:27:38,090
structure so it change so the in the

00:27:35,510 --> 00:27:40,700
binary format and basically traits from

00:27:38,090 --> 00:27:42,110
the addresses so it will expect some

00:27:40,700 --> 00:27:45,110
other data member at that particular

00:27:42,110 --> 00:27:48,560
opposite but not you too addition of

00:27:45,110 --> 00:27:51,440
these members in between there will be

00:27:48,560 --> 00:27:54,710
some other data type at offset for

00:27:51,440 --> 00:27:57,440
example 4 16 so it may leads to a via

00:27:54,710 --> 00:28:03,670
changes in the new if you are using the

00:27:57,440 --> 00:28:06,560
new version of the library okay so

00:28:03,670 --> 00:28:09,770
that's all now we'll talk about what

00:28:06,560 --> 00:28:13,970
needs to be done so far this is what we

00:28:09,770 --> 00:28:16,970
have changes needs to be at multiple

00:28:13,970 --> 00:28:19,520
level because at fedora we are using and

00:28:16,970 --> 00:28:21,770
then the tools are in lib Abigail like a

00:28:19,520 --> 00:28:24,200
VIP kiss atif and then we are running a

00:28:21,770 --> 00:28:29,240
via check tasks so improvements need

00:28:24,200 --> 00:28:31,070
everywhere like we need right now we are

00:28:29,240 --> 00:28:34,340
running on treat paths and there are

00:28:31,070 --> 00:28:38,750
some packages which needs lot of memory

00:28:34,340 --> 00:28:41,630
like 30 to 40 gb to do for example and

00:28:38,750 --> 00:28:45,440
Firefox so we don't have right not that

00:28:41,630 --> 00:28:49,279
much memory for running the castle

00:28:45,440 --> 00:28:50,750
needs to be work out somehow Adam as of

00:28:49,279 --> 00:28:55,009
now maybe we'll talk to the in

00:28:50,750 --> 00:28:59,960
flowerpots and Lisi does it make sense

00:28:55,009 --> 00:29:07,309
to do some calls good question next

00:28:59,960 --> 00:29:09,830
question so the kiddie leaps that also

00:29:07,309 --> 00:29:14,990
needs some more memories one of the

00:29:09,830 --> 00:29:17,360
Commission is where okay no seriously so

00:29:14,990 --> 00:29:19,820
yeah we save Firefox but it's not just

00:29:17,360 --> 00:29:22,610
firefox it's firefox dependencies like

00:29:19,820 --> 00:29:26,750
for instance gecko which is a you know

00:29:22,610 --> 00:29:29,120
or or lives to notice oh right so these

00:29:26,750 --> 00:29:31,429
are okay this rule is not a good example

00:29:29,120 --> 00:29:34,190
came on let's say let's say you kazoo

00:29:31,429 --> 00:29:36,409
for instance it can be reused elsewhere

00:29:34,190 --> 00:29:37,940
even though being phased out like it has

00:29:36,409 --> 00:29:39,799
been used in the thunderbird and that

00:29:37,940 --> 00:29:43,129
due to that died she was happening in

00:29:39,799 --> 00:29:45,799
touch so bad so it will be you know it's

00:29:43,129 --> 00:29:49,850
a library used by others so it's it will

00:29:45,799 --> 00:29:52,610
be nice to be able to analyze it so but

00:29:49,850 --> 00:29:54,830
there are other and there's working for

00:29:52,610 --> 00:29:58,220
instance in the same you know kind of

00:29:54,830 --> 00:30:00,639
area so yeah we we need to I think will

00:29:58,220 --> 00:30:04,460
be nice to be able to analyze everything

00:30:00,639 --> 00:30:09,770
but yes okay

00:30:04,460 --> 00:30:13,520
is that design is a question and right

00:30:09,770 --> 00:30:16,190
now we show all the changes and there

00:30:13,520 --> 00:30:18,230
may be chances that a developer don't

00:30:16,190 --> 00:30:20,840
one and package maintainer do not want

00:30:18,230 --> 00:30:23,630
to flap all the changes as a bia changes

00:30:20,840 --> 00:30:25,490
so we may need the suppression the

00:30:23,630 --> 00:30:28,010
specification which is already available

00:30:25,490 --> 00:30:32,570
in which all is supported by the early

00:30:28,010 --> 00:30:36,830
barbegal tools so if we can have

00:30:32,570 --> 00:30:38,720
something in place to keep the keep does

00:30:36,830 --> 00:30:41,690
a present specification maybe in the

00:30:38,720 --> 00:30:45,850
discrete and then maybe later on

00:30:41,690 --> 00:30:48,470
dosatron can be able to pull in those

00:30:45,850 --> 00:30:51,110
separation specification and apply on

00:30:48,470 --> 00:30:53,000
the packages whenever it's update

00:30:51,110 --> 00:30:56,120
updates is happening and while running

00:30:53,000 --> 00:30:58,790
the API dibs it will suppress if the

00:30:56,120 --> 00:31:00,770
changes happened in whatever mentioned

00:30:58,790 --> 00:31:03,730
in the suppressant specification so do

00:31:00,770 --> 00:31:07,850
not flag those changes so it can avoid

00:31:03,730 --> 00:31:10,430
some changes which is like kind of

00:31:07,850 --> 00:31:22,970
redundant to the changes happen in the

00:31:10,430 --> 00:31:26,180
API that's a first yet we and at a beer

00:31:22,970 --> 00:31:29,840
check level which is a task run on the

00:31:26,180 --> 00:31:33,320
cough Cutrone basically right now we are

00:31:29,840 --> 00:31:37,820
running on the task available in the

00:31:33,320 --> 00:31:39,650
Ettrick packages lists so there are like

00:31:37,820 --> 00:31:43,670
I don't know I haven't counted the list

00:31:39,650 --> 00:31:45,890
but it's maybe 300 or 400 probably but

00:31:43,670 --> 00:31:48,440
we are not running on all packages so we

00:31:45,890 --> 00:31:51,740
would like to see what all blockers are

00:31:48,440 --> 00:31:54,110
there or if there is not how we can

00:31:51,740 --> 00:31:57,790
start running on all the all the

00:31:54,110 --> 00:31:57,790
packages in kochi

00:31:57,980 --> 00:32:06,320
to request certain packages the atom

00:32:00,080 --> 00:32:09,470
status is I think that list is used

00:32:06,320 --> 00:32:12,919
other places as well so I can answer

00:32:09,470 --> 00:32:15,340
your question I think we are in a cyclic

00:32:12,919 --> 00:32:18,230
at the sevens tested by a theater in

00:32:15,340 --> 00:32:21,580
cosmic John we are and we have the list

00:32:18,230 --> 00:32:25,610
hard coded ugly so we basically have the

00:32:21,580 --> 00:32:27,890
critical path list and we subtract some

00:32:25,610 --> 00:32:30,020
epic history we know they are really

00:32:27,890 --> 00:32:33,799
really difficult to test because for

00:32:30,020 --> 00:32:37,040
them they require memory and I think we

00:32:33,799 --> 00:32:41,299
would be able to add some like quietly

00:32:37,040 --> 00:32:43,400
some more packages but you can say so we

00:32:41,299 --> 00:32:46,130
can do it so if there is a very strong

00:32:43,400 --> 00:32:48,020
reason but example when you add

00:32:46,130 --> 00:32:50,299
resolution in the future I would say

00:32:48,020 --> 00:32:52,520
what's just if you're interested contact

00:32:50,299 --> 00:32:54,740
us and if we get to me request for

00:32:52,520 --> 00:32:56,660
instance I know but I thought right up

00:32:54,740 --> 00:32:59,360
there are going to be people stampeding

00:32:56,660 --> 00:33:01,190
at the gates to get their packages check

00:32:59,360 --> 00:33:03,679
out there two three packages I know that

00:33:01,190 --> 00:33:06,669
pretty much at least once every craft or

00:33:03,679 --> 00:33:11,369
at least breaks something now

00:33:06,669 --> 00:33:11,369
I changed resilient

00:33:11,389 --> 00:33:22,019
let's talk after this figures honor and

00:33:17,610 --> 00:33:24,269
support for support for giving the devil

00:33:22,019 --> 00:33:27,389
packages so it's a bit tricky I will

00:33:24,269 --> 00:33:30,889
explain so right now all the changes the

00:33:27,389 --> 00:33:33,389
changes ABI you see is like whatever

00:33:30,889 --> 00:33:36,360
exported symbols are there in all the

00:33:33,389 --> 00:33:41,669
list of shared libraries available in

00:33:36,360 --> 00:33:44,279
our package so but you cannot use all

00:33:41,669 --> 00:33:47,730
the symbols available in the library so

00:33:44,279 --> 00:33:50,190
basically whatever we ship is in the

00:33:47,730 --> 00:33:52,980
public hitters through the suppose in

00:33:50,190 --> 00:33:55,980
fedora rpm so whatever headers are

00:33:52,980 --> 00:33:59,519
shipped in through the package tours are

00:33:55,980 --> 00:34:02,879
only supposed to be used so we need to

00:33:59,519 --> 00:34:05,039
if we need to use the devil packages or

00:34:02,879 --> 00:34:10,859
whatever wherever the header files are

00:34:05,039 --> 00:34:14,460
shipped in the list of sub packages so

00:34:10,859 --> 00:34:18,089
only those changes should be flat and

00:34:14,460 --> 00:34:20,220
rest of the rest of the symbols or the

00:34:18,089 --> 00:34:22,589
functions should be considered as

00:34:20,220 --> 00:34:24,480
private because they are not exactly

00:34:22,589 --> 00:34:26,819
supposed to be used by the other people

00:34:24,480 --> 00:34:31,349
because the headers are not available

00:34:26,819 --> 00:34:33,400
really to the to the users really for

00:34:31,349 --> 00:34:36,070
instance the producing

00:34:33,400 --> 00:34:42,160
example good example we shop but that

00:34:36,070 --> 00:34:44,650
was shown there the file the type here g

00:34:42,160 --> 00:34:47,200
PG and E underscore context is defined

00:34:44,650 --> 00:34:48,970
in a file named context of age right if

00:34:47,200 --> 00:34:52,330
you go either look at the source code of

00:34:48,970 --> 00:34:54,790
that package context of a pH is a

00:34:52,330 --> 00:34:57,640
private hair so actually this is not a

00:34:54,790 --> 00:34:59,650
problem because the challenge happened

00:34:57,640 --> 00:35:03,370
to the type that is private to the

00:34:59,650 --> 00:35:05,350
package but it's cool from the fall to

00:35:03,370 --> 00:35:08,380
review it still but it's not a problem

00:35:05,350 --> 00:35:12,700
because it's not happening from a type

00:35:08,380 --> 00:35:15,010
that is supposed to be used right so

00:35:12,700 --> 00:35:17,530
that yeah the idea is to know that it is

00:35:15,010 --> 00:35:20,650
supposed to be used we need to go where

00:35:17,530 --> 00:35:25,780
we need to know that the type is defined

00:35:20,650 --> 00:35:29,650
in the header that is in slash USR slash

00:35:25,780 --> 00:35:32,710
bin truly something that clear what I'm

00:35:29,650 --> 00:35:38,230
saying so this is what we mean by taking

00:35:32,710 --> 00:35:39,790
into account vapi of the package when

00:35:38,230 --> 00:35:42,180
you are suing

00:35:39,790 --> 00:35:45,580
di changes give everybody a changin on

00:35:42,180 --> 00:35:48,760
the type that is not men's use that is a

00:35:45,580 --> 00:35:51,520
part of the API we are not going to show

00:35:48,760 --> 00:36:01,450
me by default if you still want to see

00:35:51,520 --> 00:36:05,080
it there is an option and so though this

00:36:01,450 --> 00:36:08,470
is the aviary Piketty fur which is used

00:36:05,080 --> 00:36:11,110
as the as the main tooling inside area

00:36:08,470 --> 00:36:14,410
check to do the which shows the results

00:36:11,110 --> 00:36:17,470
so there also needs to be improvement so

00:36:14,410 --> 00:36:20,650
for example the memory usage right now

00:36:17,470 --> 00:36:23,200
we see for example in Firefox it's like

00:36:20,650 --> 00:36:26,590
30 to 40 gb of ram embrace needed to run

00:36:23,200 --> 00:36:29,950
the idea tech successfully so 30 exits

00:36:26,590 --> 00:36:34,630
oh it's hard to get that infrastructure

00:36:29,950 --> 00:36:39,220
of 40 gb of oh yeah so we're working on

00:36:34,630 --> 00:36:42,310
it and there's support for more C++

00:36:39,220 --> 00:36:45,100
language constructs like right now you

00:36:42,310 --> 00:36:50,500
will not see the changes if there is a

00:36:45,100 --> 00:36:54,340
change in the union type the better

00:36:50,500 --> 00:36:56,260
categorization of ABI for example there

00:36:54,340 --> 00:37:01,120
change if there is a new parameters

00:36:56,260 --> 00:37:04,300
added to the functions we show it as in

00:37:01,120 --> 00:37:06,610
avi changes but maybe the parameter hat

00:37:04,300 --> 00:37:09,000
for one parameter has been removed so

00:37:06,610 --> 00:37:12,280
it's basically if someone is using that

00:37:09,000 --> 00:37:14,200
function it will expect three parameter

00:37:12,280 --> 00:37:17,260
suppose but there is not two parameter

00:37:14,200 --> 00:37:19,600
so it's definitely an ABA change so

00:37:17,260 --> 00:37:22,540
maybe we should flag it to something

00:37:19,600 --> 00:37:25,900
like yes incompatible area right now

00:37:22,540 --> 00:37:27,760
visually it as a bia changes which needs

00:37:25,900 --> 00:37:29,910
to be in lead inspection or something

00:37:27,760 --> 00:37:29,910
with that

00:37:30,049 --> 00:37:35,519
right now it these are all command line

00:37:32,609 --> 00:37:39,059
tool so maybe we like to have some good

00:37:35,519 --> 00:37:42,739
web web based they're friendly so that

00:37:39,059 --> 00:37:46,859
normal users can also look into it and

00:37:42,739 --> 00:37:48,719
the tracking facility for all the

00:37:46,859 --> 00:37:52,979
changes happening in the different

00:37:48,719 --> 00:37:58,859
packages in the waveform that's it any

00:37:52,979 --> 00:38:01,109
questions please go ahead we have we

00:37:58,859 --> 00:38:07,319
have 15 minutes ten minutes further

00:38:01,109 --> 00:38:11,339
questions 13 oh so we can have a buff

00:38:07,319 --> 00:38:15,089
now doing some suppression fun you don't

00:38:11,339 --> 00:38:18,479
mention that goes the rocketbox yet okay

00:38:15,089 --> 00:38:24,410
so today to what our servers in PAX

00:38:18,479 --> 00:38:24,410
Prime and everything so today you see

00:38:24,739 --> 00:38:31,259
okay the interesting in game changes are

00:38:28,829 --> 00:38:33,390
on times basically right saying a

00:38:31,259 --> 00:38:35,940
function has been added or removed it's

00:38:33,390 --> 00:38:38,279
cool but it's quite easy the interesting

00:38:35,940 --> 00:38:42,150
thing is to see how the type changed and

00:38:38,279 --> 00:38:44,729
what the changes are right but then

00:38:42,150 --> 00:38:48,959
sometimes in your project depending on

00:38:44,729 --> 00:38:52,229
the project a change that is a problem

00:38:48,959 --> 00:38:53,969
to do your project would be coddled in

00:38:52,229 --> 00:38:57,719
your project let me give you an example

00:38:53,969 --> 00:39:00,059
suppose you are doing a network kind of

00:38:57,719 --> 00:39:02,999
software right where your structures are

00:39:00,059 --> 00:39:05,309
being streamed out to the network so if

00:39:02,999 --> 00:39:07,829
you add a new member to that structure

00:39:05,309 --> 00:39:08,869
at the end of the structure to you the

00:39:07,829 --> 00:39:11,240
problem because

00:39:08,869 --> 00:39:14,900
you know that being the structure to the

00:39:11,240 --> 00:39:17,869
network this is encapsulated in frames

00:39:14,900 --> 00:39:20,119
so a new thing is that because it

00:39:17,869 --> 00:39:21,980
changes the size of the frame right but

00:39:20,119 --> 00:39:24,589
to you for instance without doing that a

00:39:21,980 --> 00:39:27,740
new member I mean at the end of the

00:39:24,589 --> 00:39:29,509
structure is not a problem because you

00:39:27,740 --> 00:39:32,059
know nothing was looking at the end of

00:39:29,509 --> 00:39:36,249
them at that point before so you had a

00:39:32,059 --> 00:39:39,109
new date on over there right so maybe we

00:39:36,249 --> 00:39:41,329
want to see those changes that will be

00:39:39,109 --> 00:39:43,789
nice for you and for you the one maker

00:39:41,329 --> 00:39:46,099
so our level we cannot choose how to

00:39:43,789 --> 00:39:48,740
classify the change is it an

00:39:46,099 --> 00:39:53,019
incompatible change or is it just a

00:39:48,740 --> 00:39:59,390
change that mean so what we did is we

00:39:53,019 --> 00:40:03,200
provided a way for users to specify how

00:39:59,390 --> 00:40:05,539
the tool could suppress some actually

00:40:03,200 --> 00:40:08,839
reports so you can say for instance that

00:40:05,539 --> 00:40:11,930
if a structure or let's see let's say a

00:40:08,839 --> 00:40:15,950
co-sponsor if I am in c++ and I have a

00:40:11,930 --> 00:40:18,859
big space which is given any change in

00:40:15,950 --> 00:40:22,220
any college which name is hidden along

00:40:18,859 --> 00:40:23,089
column and anything else should be shown

00:40:22,220 --> 00:40:25,729
to me because

00:40:23,089 --> 00:40:28,309
the namespace even is something that

00:40:25,729 --> 00:40:30,650
should be heated not clear what I'm

00:40:28,309 --> 00:40:34,430
saying or kill you and say things like

00:40:30,650 --> 00:40:36,140
oh if I had a data at the end did I

00:40:34,430 --> 00:40:38,690
member only have a bit structure named

00:40:36,140 --> 00:40:42,109
blah blah blah don't show me to me so

00:40:38,690 --> 00:40:44,839
you can get a declarative file than

00:40:42,109 --> 00:40:46,940
thousand I&I format where you can

00:40:44,839 --> 00:40:49,130
specify these mountains and then you can

00:40:46,940 --> 00:40:52,819
provide it to India give in a package

00:40:49,130 --> 00:40:55,160
teeth etc so many replies the

00:40:52,819 --> 00:40:57,920
suppression to the changes a bit like

00:40:55,160 --> 00:41:00,680
what happens what exists with bell rang

00:40:57,920 --> 00:41:02,539
while grant and suppression and they're

00:41:00,680 --> 00:41:07,190
both suppression that's why I'm quote in

00:41:02,539 --> 00:41:09,849
suppression so but today when you're

00:41:07,190 --> 00:41:12,589
using the automatic way of doing things

00:41:09,849 --> 00:41:14,839
what happens okay the problem is how do

00:41:12,589 --> 00:41:16,640
you specify how to provide this

00:41:14,839 --> 00:41:19,130
suppression specification to your

00:41:16,640 --> 00:41:21,710
package because really good change is

00:41:19,130 --> 00:41:24,380
not meaningful for you so what we did up

00:41:21,710 --> 00:41:28,880
until now is that if inside the package

00:41:24,380 --> 00:41:34,489
there is a file and up with the dogs Adi

00:41:28,880 --> 00:41:36,200
in or you know extension it is

00:41:34,489 --> 00:41:38,509
considered as a suppression

00:41:36,200 --> 00:41:42,000
specification that is taking into

00:41:38,509 --> 00:41:45,030
account by the tool but then that's not

00:41:42,000 --> 00:41:48,810
right maybe people would like to have it

00:41:45,030 --> 00:41:50,670
in distance so that means version you

00:41:48,810 --> 00:41:53,340
know so it can see the changes in their

00:41:50,670 --> 00:41:58,290
suppression specification but then from

00:41:53,340 --> 00:41:59,880
within tasco Tron tasks it will be cool

00:41:58,290 --> 00:42:02,100
to be able to get the subversion

00:41:59,880 --> 00:42:05,670
specification from this game and either

00:42:02,100 --> 00:42:07,710
their apply them to be in yang

00:42:05,670 --> 00:42:10,170
comparison you know things like that so

00:42:07,710 --> 00:42:12,960
it needs to be discussed see how its

00:42:10,170 --> 00:42:15,200
processed thing I guess to see how to do

00:42:12,960 --> 00:42:15,200
things

00:42:17,520 --> 00:42:20,960
does that answer your question

00:42:22,990 --> 00:42:32,560
so yeah maybe something else about the

00:42:28,090 --> 00:42:35,110
concept of simples versioning yes it'll

00:42:32,560 --> 00:42:40,060
be how come on is concept and occupying

00:42:35,110 --> 00:42:44,320
the documentation about you okay so two

00:42:40,060 --> 00:42:48,430
questions I'm just so happy to repeat so

00:42:44,320 --> 00:42:51,400
first how common is a elf symbol

00:42:48,430 --> 00:42:53,680
versioning and the second question is

00:42:51,400 --> 00:42:56,770
where can I find documentation

00:42:53,680 --> 00:43:00,840
everything's so I'll start with the

00:42:56,770 --> 00:43:03,280
second question thank you very much

00:43:00,840 --> 00:43:05,680
anyway now outside with a second and a

00:43:03,280 --> 00:43:08,980
question so there is a famous paper that

00:43:05,680 --> 00:43:13,840
I don't remember the name now that we

00:43:08,980 --> 00:43:16,450
did I hold it Peppa which net is you

00:43:13,840 --> 00:43:18,340
know share shared libraries what

00:43:16,450 --> 00:43:20,650
developers should know about your

00:43:18,340 --> 00:43:23,740
libraries so if you type to libraries

00:43:20,650 --> 00:43:26,410
willfully provide whatever search engine

00:43:23,740 --> 00:43:30,160
you're using you should find that that

00:43:26,410 --> 00:43:33,970
kind it is well detailed and it explains

00:43:30,160 --> 00:43:36,550
why it should be used as opposed to go

00:43:33,970 --> 00:43:40,330
pink so nice that's what we do here

00:43:36,550 --> 00:43:44,830
solely is worse and I still he is still

00:43:40,330 --> 00:43:49,100
against just pumping so games and he was

00:43:44,830 --> 00:43:52,530
arguing for using health version instead

00:43:49,100 --> 00:43:56,610
so how come and is it it is pretty

00:43:52,530 --> 00:43:58,890
common on encore system libraries

00:43:56,610 --> 00:44:03,570
usually for instance in the new tool

00:43:58,890 --> 00:44:07,820
chain so GMC and all the poor libraries

00:44:03,570 --> 00:44:07,820
of good little chain use single version

00:44:08,420 --> 00:44:13,770
GMC help you to use all the center

00:44:11,520 --> 00:44:15,810
libraries of all the languages supported

00:44:13,770 --> 00:44:19,110
by the mutual chain and we're seeing

00:44:15,810 --> 00:44:21,450
that more and more you know more and

00:44:19,110 --> 00:44:24,960
more people using it so it is really

00:44:21,450 --> 00:44:27,870
important to be able to support it and

00:44:24,960 --> 00:44:30,620
we do support it so does that answer

00:44:27,870 --> 00:44:30,620
your question yes

00:44:33,339 --> 00:44:38,460
how long does it take

00:44:36,190 --> 00:44:38,460
lies

00:44:40,549 --> 00:44:45,739
seriously it depends on the package what

00:44:43,309 --> 00:44:49,609
but on they on you know on my machine

00:44:45,739 --> 00:44:53,059
and I only my box and I only run but

00:44:49,609 --> 00:44:57,759
optimized version of a Yelp I want to

00:44:53,059 --> 00:45:01,189
see the worst time course this time ah

00:44:57,759 --> 00:45:06,709
for example seconds for example you can

00:45:01,189 --> 00:45:08,329
see that only 2.1 a second well but this

00:45:06,709 --> 00:45:11,479
is not a good okay this is interesting

00:45:08,329 --> 00:45:14,509
this is an interesting case because any

00:45:11,479 --> 00:45:17,660
i decree that we use is heavily

00:45:14,509 --> 00:45:20,029
multi-threaded so if you have five

00:45:17,660 --> 00:45:21,799
shared libraries in your binary in your

00:45:20,029 --> 00:45:24,109
pocket sorry and you want to compare it

00:45:21,799 --> 00:45:26,239
to another package with five boundaries

00:45:24,109 --> 00:45:28,670
the five batteries are going to be

00:45:26,239 --> 00:45:31,729
compared in parallel if you have at

00:45:28,670 --> 00:45:33,799
least five course a celebration so

00:45:31,729 --> 00:45:36,249
usually on my machine the time things is

00:45:33,799 --> 00:45:40,309
a time of the smallest over the

00:45:36,249 --> 00:45:42,499
comparison of things the most time so 23

00:45:40,309 --> 00:45:44,630
seconds usually one is more than 10

00:45:42,499 --> 00:45:48,619
second I go look at in the nitrogen ice

00:45:44,630 --> 00:45:53,500
names because for an optimized feel

00:45:48,619 --> 00:45:56,350
right I not to myself because I'm sure

00:45:53,500 --> 00:46:05,500
sure Pleasants you say the price isn't

00:45:56,350 --> 00:46:10,440
you see and eyes yes can you can you

00:46:05,500 --> 00:46:13,560
find out it goes other changes somehow

00:46:10,440 --> 00:46:16,190
bonds due past

00:46:13,560 --> 00:46:16,190
to pass

00:46:17,490 --> 00:46:22,789
something in the slash growth / sees

00:46:20,730 --> 00:46:26,319
something correct

00:46:22,789 --> 00:46:26,319
can you find out

00:46:26,490 --> 00:46:31,280
function changed the body of the

00:46:29,100 --> 00:46:31,280
function

00:46:31,710 --> 00:46:36,560
the change is related to some location

00:46:37,579 --> 00:46:46,369
okay so I talked well we today we don't

00:46:41,460 --> 00:46:50,819
do analysis of instructions inside

00:46:46,369 --> 00:46:53,099
options so if what you're saying is that

00:46:50,819 --> 00:46:58,079
there are some instructions in a

00:46:53,099 --> 00:47:01,140
function that do change something we

00:46:58,079 --> 00:47:04,559
don't do that analysis get it does I

00:47:01,140 --> 00:47:09,150
electroporation yeah so what we do today

00:47:04,559 --> 00:47:13,079
is just enough an electric and analysis

00:47:09,150 --> 00:47:17,339
static analysis of you know the types

00:47:13,079 --> 00:47:19,920
that are used well that are exposed by

00:47:17,339 --> 00:47:23,730
the function that are used that are

00:47:19,920 --> 00:47:33,109
reachable from the Declaration of the

00:47:23,730 --> 00:47:33,109
function that they were library exported

00:47:34,460 --> 00:47:44,999
local variable yeah you can detect them

00:47:37,650 --> 00:47:47,670
yes develop yes yes chief a sniper's

00:47:44,999 --> 00:47:50,830
often have a introspection based upon

00:47:47,670 --> 00:47:54,480
these are planning on

00:47:50,830 --> 00:47:56,850
prepare the general

00:47:54,480 --> 00:48:00,150
because they are often generated from

00:47:56,850 --> 00:48:03,830
the comments so they can change you know

00:48:00,150 --> 00:48:03,830
that the Sealab

00:48:04,800 --> 00:48:11,280
so just to rephrase the question so he

00:48:08,100 --> 00:48:15,360
said that jelly babies libraries of the

00:48:11,280 --> 00:48:21,300
news introspection to generate you know

00:48:15,360 --> 00:48:25,260
functions well library stops that are

00:48:21,300 --> 00:48:28,770
really and so can we detect changes in

00:48:25,260 --> 00:48:32,160
that case in the generated code in the

00:48:28,770 --> 00:48:35,580
Cherokee ia even though nope you know

00:48:32,160 --> 00:48:37,710
the library finger has been generated

00:48:35,580 --> 00:48:42,300
from commands right that's why i said

00:48:37,710 --> 00:48:45,810
yeah okay so first if a generative code

00:48:42,300 --> 00:48:48,840
is and while the genetic code is

00:48:45,810 --> 00:48:54,330
compiled and it ends up in an elf

00:48:48,840 --> 00:48:57,690
library a binary binary know it's insane

00:48:54,330 --> 00:49:00,180
don't share our mind second it is not an

00:48:57,690 --> 00:49:02,599
idea finally I was just wondering if you

00:49:00,180 --> 00:49:07,579
are planning on

00:49:02,599 --> 00:49:10,670
and gr are fine comparison you want no

00:49:07,579 --> 00:49:12,680
they don't so we can test me added the

00:49:10,670 --> 00:49:15,109
packages that were that build up against

00:49:12,680 --> 00:49:17,509
you that test them to see what not the

00:49:15,109 --> 00:49:21,349
generosity of generating would break

00:49:17,509 --> 00:49:23,089
somebody else down the line okay so so

00:49:21,349 --> 00:49:25,220
long does it run the tool lets party I

00:49:23,089 --> 00:49:27,019
check and check to see if it results as

00:49:25,220 --> 00:49:30,109
Christians interesting today of course

00:49:27,019 --> 00:49:31,999
not to be dire so but that's like the

00:49:30,109 --> 00:49:34,069
question look at I don't land the other

00:49:31,999 --> 00:49:36,049
question sorry one minute yeah one

00:49:34,069 --> 00:49:44,509
minute okay so he says we have enemies

00:49:36,049 --> 00:49:47,299
so in answer no so today so of course we

00:49:44,509 --> 00:49:50,690
read type information and make

00:49:47,299 --> 00:49:54,200
information from health right but we

00:49:50,690 --> 00:49:56,569
don't only do that so when we have a DI

00:49:54,200 --> 00:49:59,029
representation you know in memory we

00:49:56,569 --> 00:50:01,700
have our internal presentation we can

00:49:59,029 --> 00:50:04,140
also dumped it into mex around an

00:50:01,700 --> 00:50:07,060
excellent for my

00:50:04,140 --> 00:50:09,369
and then you don't be too personal and

00:50:07,060 --> 00:50:13,330
then you can take that xml and say any

00:50:09,369 --> 00:50:16,030
idea my first parameter is deep xml and

00:50:13,330 --> 00:50:18,990
the second parameter can be a banner so

00:50:16,030 --> 00:50:25,240
you're comparing the api of a binary

00:50:18,990 --> 00:50:26,830
against a adi unspecified in xml so what

00:50:25,240 --> 00:50:30,460
I'm trying to tell you that we have the

00:50:26,830 --> 00:50:33,190
reader to read API information data type

00:50:30,460 --> 00:50:35,590
and functions and variables information

00:50:33,190 --> 00:50:38,430
from internet so it is very well

00:50:35,590 --> 00:50:42,940
conceivable and possible and not usually

00:50:38,430 --> 00:50:46,210
complicated to write a third reader that

00:50:42,940 --> 00:50:47,800
we type functions googleberry rules you

00:50:46,210 --> 00:50:51,580
know this kind of artifacts from

00:50:47,800 --> 00:50:54,190
something else in that something else is

00:50:51,580 --> 00:50:59,910
you know type you know happy programming

00:50:54,190 --> 00:50:59,910
from jinan gir things I think that is

00:51:00,600 --> 00:51:06,420
yeah we never have this problem

00:51:03,369 --> 00:51:09,010
sometimes that that

00:51:06,420 --> 00:51:11,950
so total to the way this is your sister

00:51:09,010 --> 00:51:15,849
is that for example as a party module

00:51:11,950 --> 00:51:17,980
that that knows how to read those eyes

00:51:15,849 --> 00:51:21,390
and like do random introspection and

00:51:17,980 --> 00:51:26,380
then so it's possible to see libraries

00:51:21,390 --> 00:51:29,170
from white under example and and and

00:51:26,380 --> 00:51:32,940
sometimes they defined interests change

00:51:29,170 --> 00:51:32,940
without anybody noticing that

00:51:33,060 --> 00:51:38,220
yeah so yeah it's very well possible to

00:51:36,120 --> 00:51:40,920
have to write a reader for something

00:51:38,220 --> 00:51:43,350
else and we have it was last week I

00:51:40,920 --> 00:51:47,010
think someone coming and saying how

00:51:43,350 --> 00:51:52,490
would you support apple binary format I

00:51:47,010 --> 00:51:52,490
was like yes right a reader so

00:51:54,630 --> 00:52:02,039
so we still have five minutes Ruffo yes

00:51:59,690 --> 00:52:04,079
you're talking about featuring for

00:52:02,039 --> 00:52:08,000
friends of the end of the park I'm

00:52:04,079 --> 00:52:10,289
wondering you know one friend i see is

00:52:08,000 --> 00:52:12,509
continuous integration is becoming more

00:52:10,289 --> 00:52:15,630
and more common which is great and i

00:52:12,509 --> 00:52:17,789
wish this was also part of the

00:52:15,630 --> 00:52:20,400
development courses like once at the

00:52:17,789 --> 00:52:23,789
moment someone is wearing a patch let

00:52:20,400 --> 00:52:27,509
the now ort your change avi to attend

00:52:23,789 --> 00:52:29,069
school and say oh ok if they wish to

00:52:27,509 --> 00:52:32,009
they will proceed but if they weren't

00:52:29,069 --> 00:52:34,519
aware this will affect api they could we

00:52:32,009 --> 00:52:40,230
write their change be compatible sure

00:52:34,519 --> 00:52:42,210
yes and and my answer is we're already

00:52:40,230 --> 00:52:46,829
doing that in Jesus God actually on our

00:52:42,210 --> 00:52:50,250
pcc developer so in GCC there we are

00:52:46,829 --> 00:52:52,920
depending on some on some libraries that

00:52:50,250 --> 00:52:58,470
are developed elsewhere for instance in

00:52:52,920 --> 00:53:02,990
GCC we support address sanitizer Thank

00:52:58,470 --> 00:53:06,089
so it's develop in LPN premises so

00:53:02,990 --> 00:53:09,779
address sanitizer depends on a library

00:53:06,089 --> 00:53:10,040
new magnetizer that is developed and you

00:53:09,779 --> 00:53:14,930
know

00:53:10,040 --> 00:53:17,600
ll pms svn repository so from time to

00:53:14,930 --> 00:53:21,920
time there is a seat you know like well

00:53:17,600 --> 00:53:26,540
take a code from SPL p.m. and couldn't

00:53:21,920 --> 00:53:29,720
put into the GCC's Rico analogy before

00:53:26,540 --> 00:53:33,220
doing that we maintain errs are asking

00:53:29,720 --> 00:53:36,500
that we're i think i did you know on

00:53:33,220 --> 00:53:40,250
what and compare the previous version we

00:53:36,500 --> 00:53:43,400
had a GCC again it's you know the new

00:53:40,250 --> 00:53:45,950
thing that we were reporting and you the

00:53:43,400 --> 00:53:49,970
changes and if they're like a ba changes

00:53:45,950 --> 00:53:53,150
that are not compatible that we try to

00:53:49,970 --> 00:53:55,790
do so so yes this thing is happening the

00:53:53,150 --> 00:53:58,880
jealousy guys are planning a while and

00:53:55,790 --> 00:54:01,580
they actually are doing it on there you

00:53:58,880 --> 00:54:05,320
know I hand today that their plans to

00:54:01,580 --> 00:54:08,800
try to put them into that somehow their

00:54:05,320 --> 00:54:08,800
upstream project

00:54:09,980 --> 00:54:13,150
that's attraction

00:54:15,680 --> 00:54:25,190
so I guess we are

00:54:19,040 --> 00:54:27,710
and it's okay enough support he's ever

00:54:25,190 --> 00:54:33,770
done sorry that you never beat Colonel

00:54:27,710 --> 00:54:40,340
supportive haha oh yeah so okay so in

00:54:33,770 --> 00:54:43,010
theory it's just working so i don't have

00:54:40,340 --> 00:54:46,430
look at the thing is I haven't work on

00:54:43,010 --> 00:54:50,510
that yet but the colonel is an elf thing

00:54:46,430 --> 00:54:52,910
so sincerely yes if you know I'm

00:54:50,510 --> 00:54:55,460
interested in having that either doing

00:54:52,910 --> 00:54:57,830
it myself for helping someone else do it

00:54:55,460 --> 00:55:01,520
or just accepting pageant whatever and I

00:54:57,830 --> 00:55:05,540
think it's coming but you know the

00:55:01,520 --> 00:55:07,640
colonel is special but yeah it's

00:55:05,540 --> 00:55:09,190
something we're interested in you're not

00:55:07,640 --> 00:55:13,640
the first one to talk about it there

00:55:09,190 --> 00:55:17,470
there is some chapter around and so that

00:55:13,640 --> 00:55:17,470
this is definitely something we need to

00:55:17,670 --> 00:55:23,609
you know basically for the Colonel's of

00:55:20,790 --> 00:55:25,859
we need a que le added two new a

00:55:23,609 --> 00:55:29,309
negative two which I guess we'll use it

00:55:25,859 --> 00:55:33,960
i do that very thing but we need to sit

00:55:29,309 --> 00:55:38,329
down and define what what we want you

00:55:33,960 --> 00:55:38,329
know and just come up with a tool

00:55:41,349 --> 00:55:47,229
so I think we would call in today as far

00:55:44,950 --> 00:55:49,470
as this was a vision sorry thank you

00:55:47,229 --> 00:55:49,470

YouTube URL: https://www.youtube.com/watch?v=V57HEB8N3eE


