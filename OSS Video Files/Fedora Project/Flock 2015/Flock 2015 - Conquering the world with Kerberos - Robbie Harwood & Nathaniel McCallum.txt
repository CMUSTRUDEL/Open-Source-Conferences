Title: Flock 2015 - Conquering the world with Kerberos - Robbie Harwood & Nathaniel McCallum
Publication date: 2015-08-26
Playlist: Flock 2015
Description: 
	You've heard of Kerberos, right? True single sign-on with lots of configuration, synchronization and pain. False. It is now easy to set up, has a long history of interoperation with Windows, and even supports OTP. Come learn about the significant improvements made to Kerberos in the last few years and catch a glimpse of where Kerberos will be in the future! We'll also talk software, frameworks, and language bindings that you can use today to call forth the three-headed guardian of the underworld, Kerberos.
Captions: 
	00:00:02,090 --> 00:00:11,460
cool okay so Nathaniel I'm Robbie we're

00:00:08,820 --> 00:00:15,089
going to talk about how to conquer the

00:00:11,460 --> 00:00:18,539
world kerberos so before we do that

00:00:15,089 --> 00:00:19,619
though this is a tight teen talk I'm

00:00:18,539 --> 00:00:20,789
going to talk a little bit then

00:00:19,619 --> 00:00:22,800
Nathaniel is going to talk a little bit

00:00:20,789 --> 00:00:25,830
and then I was going to talk a little

00:00:22,800 --> 00:00:26,789
bit at the end and it will leave a good

00:00:25,830 --> 00:00:28,410
chunk of time at the end for questions

00:00:26,789 --> 00:00:35,340
hopefully somebody you never know

00:00:28,410 --> 00:00:36,690
occurrences is anybody not okay cool so

00:00:35,340 --> 00:00:38,870
you know what Kerberos is but you

00:00:36,690 --> 00:00:42,600
probably don't know who Kerberos is

00:00:38,870 --> 00:00:44,820
Kerberos is this guy he is our

00:00:42,600 --> 00:00:46,739
three-headed protector of Secrets

00:00:44,820 --> 00:00:49,890
guardian of the underworld very

00:00:46,739 --> 00:00:52,230
importantly he is fuzzy and squishy and

00:00:49,890 --> 00:00:54,600
each of the heads have individual names

00:00:52,230 --> 00:00:58,610
that need to be respected as individual

00:00:54,600 --> 00:00:58,610
persons okay

00:01:00,600 --> 00:01:05,400
I have no idea where you can buy the

00:01:03,180 --> 00:01:11,490
plushie your sorry butt Dimitri we need

00:01:05,400 --> 00:01:13,920
those essential business for them okay

00:01:11,490 --> 00:01:16,020
so as robin said my name is Nathaniel

00:01:13,920 --> 00:01:17,549
and Robin I both work on the Kerberos

00:01:16,020 --> 00:01:21,539
and identity management teams in Red Hat

00:01:17,549 --> 00:01:23,700
and this is actually a expanded version

00:01:21,539 --> 00:01:26,070
of a talk that I gave a Def Con from I

00:01:23,700 --> 00:01:29,149
can talk and we've combined our two

00:01:26,070 --> 00:01:32,430
relative areas of expertise so hopefully

00:01:29,149 --> 00:01:35,420
beneficial tea today let's first start

00:01:32,430 --> 00:01:39,450
off by looking at her house the past

00:01:35,420 --> 00:01:41,520
kouros has had a pretty long past and it

00:01:39,450 --> 00:01:44,190
was obviously there was version for all

00:01:41,520 --> 00:01:45,690
those persons before that as well virgin

00:01:44,190 --> 00:01:48,360
for was a good one was kind of first

00:01:45,690 --> 00:01:49,920
employed and then version 5 blew up from

00:01:48,360 --> 00:01:52,170
there lots of people have deployed it

00:01:49,920 --> 00:01:53,909
it's a true single sign-on system unlike

00:01:52,170 --> 00:01:55,890
a lot of people throw around the word

00:01:53,909 --> 00:01:57,539
single sign-on what they mean is you're

00:01:55,890 --> 00:02:01,110
using the same credentials everywhere

00:01:57,539 --> 00:02:03,119
which usually you're not but in Kerberos

00:02:01,110 --> 00:02:06,659
you actually have a true single sign-on

00:02:03,119 --> 00:02:08,850
experience where you login one time and

00:02:06,659 --> 00:02:10,920
then for each additional logins you just

00:02:08,850 --> 00:02:12,470
get tickets that proving your previous

00:02:10,920 --> 00:02:14,880
login so you don't have to

00:02:12,470 --> 00:02:18,930
credentials every time you log in

00:02:14,880 --> 00:02:20,280
somewhere Kerberos has a another really

00:02:18,930 --> 00:02:22,459
really important feature which is that

00:02:20,280 --> 00:02:26,190
the credentials don't go on the wire so

00:02:22,459 --> 00:02:27,599
most of your authentication systems will

00:02:26,190 --> 00:02:30,390
very often see people setting up things

00:02:27,599 --> 00:02:32,640
like SSL tiles because they want to send

00:02:30,390 --> 00:02:34,110
passwords in the clear that they want to

00:02:32,640 --> 00:02:36,450
encrypt them inside those tunnels keep

00:02:34,110 --> 00:02:38,550
them safe which of course ton of those

00:02:36,450 --> 00:02:40,890
compromises pop for any reason now if

00:02:38,550 --> 00:02:43,080
you're automating all passwords which is

00:02:40,890 --> 00:02:46,380
a very bad thing so Curtis was actually

00:02:43,080 --> 00:02:48,180
designed from the get go to be a

00:02:46,380 --> 00:02:49,470
cryptographic system in which the

00:02:48,180 --> 00:02:52,620
credentials were never sent over the

00:02:49,470 --> 00:02:55,019
wire and what this means is that it can

00:02:52,620 --> 00:02:58,170
be deployed completely without an SSL

00:02:55,019 --> 00:03:01,019
tunnel on an untrusted network and the

00:02:58,170 --> 00:03:02,970
end result is a very secure system and

00:03:01,019 --> 00:03:05,580
this was one of the deploy there's lots

00:03:02,970 --> 00:03:08,459
of implementations of Kerberos MIT krb5

00:03:05,580 --> 00:03:12,420
is the primary one we deal with and it's

00:03:08,459 --> 00:03:13,650
the primary one that is used for but

00:03:12,420 --> 00:03:15,750
there's also several other

00:03:13,650 --> 00:03:18,810
implementations handbells another open

00:03:15,750 --> 00:03:20,459
source one that has largely been used in

00:03:18,810 --> 00:03:22,190
the Samba project although my

00:03:20,459 --> 00:03:26,670
understanding is that they're moving

00:03:22,190 --> 00:03:28,500
from that here they go to curtain or

00:03:26,670 --> 00:03:29,290
they want to group five that are going

00:03:28,500 --> 00:03:33,109
to look at

00:03:29,290 --> 00:03:36,349
and so Microsoft is probably the widest

00:03:33,109 --> 00:03:38,000
deploy of all of these Kerberos is the

00:03:36,349 --> 00:03:40,549
backbone of the Active Directory

00:03:38,000 --> 00:03:43,010
infrastructure so if you're using Active

00:03:40,549 --> 00:03:45,370
Directory anywhere or seen it used

00:03:43,010 --> 00:03:48,349
that's all use in Kerberos under covers

00:03:45,370 --> 00:03:51,109
samba of course as mentioned it uses the

00:03:48,349 --> 00:03:54,230
handle notation to provide their

00:03:51,109 --> 00:03:55,819
Kerberos Active Directory support so

00:03:54,230 --> 00:03:57,980
it's used widely by millions of people

00:03:55,819 --> 00:04:00,620
it's a trusted system it's true single

00:03:57,980 --> 00:04:02,540
sign-on and no connections going up on

00:04:00,620 --> 00:04:05,239
the wire so why in the world isn't

00:04:02,540 --> 00:04:06,769
everyone using for gross well there are

00:04:05,239 --> 00:04:09,230
some downsides or at least there were in

00:04:06,769 --> 00:04:11,329
the past the first downside is that its

00:04:09,230 --> 00:04:13,250
blocked by firewalls so there's a lot of

00:04:11,329 --> 00:04:15,889
system admins and ultra shuttle all

00:04:13,250 --> 00:04:18,919
courts only opens that won't open the

00:04:15,889 --> 00:04:20,660
one that they want and so Kerberos can't

00:04:18,919 --> 00:04:23,210
get through and this is this has been a

00:04:20,660 --> 00:04:26,599
problem traditionally a second one is

00:04:23,210 --> 00:04:28,789
the client configuration is required so

00:04:26,599 --> 00:04:30,800
unlike Facebook you type in Facebook and

00:04:28,789 --> 00:04:32,060
get a login prompt and just type in your

00:04:30,800 --> 00:04:34,190
credentials you know you didn't have to

00:04:32,060 --> 00:04:36,620
configure anything in your system it

00:04:34,190 --> 00:04:38,720
just all worked automatically Kerberos

00:04:36,620 --> 00:04:40,130
did not used to work like this you

00:04:38,720 --> 00:04:42,409
actually had to set up in a

00:04:40,130 --> 00:04:44,840
configuration file the where you're

00:04:42,409 --> 00:04:46,310
going to go to kc to get your

00:04:44,840 --> 00:04:48,320
credentials and all those variants the

00:04:46,310 --> 00:04:50,860
things and so client configuration was

00:04:48,320 --> 00:04:53,210
required which was a barrier to adoption

00:04:50,860 --> 00:04:55,729
another downside was quiet time

00:04:53,210 --> 00:04:58,099
synchronization the initial

00:04:55,729 --> 00:05:00,380
implementations of Kerberos used a pre

00:04:58,099 --> 00:05:03,199
authentication method which depended on

00:05:00,380 --> 00:05:04,849
encrypting a time stamp and so this

00:05:03,199 --> 00:05:06,919
meant that the server time in the client

00:05:04,849 --> 00:05:08,210
time had to be the same which of course

00:05:06,919 --> 00:05:10,669
if you've ever been

00:05:08,210 --> 00:05:12,979
infrastructure you know that systems are

00:05:10,669 --> 00:05:15,580
not necessarily the saving of their

00:05:12,979 --> 00:05:18,440
clock and so this was a pain point

00:05:15,580 --> 00:05:19,699
historically in that you had to have all

00:05:18,440 --> 00:05:21,770
the clocks synchronized to the

00:05:19,699 --> 00:05:26,030
infrastructure otherwise Kerberos just

00:05:21,770 --> 00:05:27,770
sort of work the last one that was big

00:05:26,030 --> 00:05:30,560
downside was you only have one client

00:05:27,770 --> 00:05:32,630
principle which means that you could

00:05:30,560 --> 00:05:36,199
only have one log in exocrine system

00:05:32,630 --> 00:05:37,910
globally and so if you want to have

00:05:36,199 --> 00:05:40,430
multiple accounts if you are contracting

00:05:37,910 --> 00:05:42,590
the report for multiple places kurose be

00:05:40,430 --> 00:05:44,660
very painful because you could only have

00:05:42,590 --> 00:05:46,009
one principle which men you usually have

00:05:44,660 --> 00:05:48,830
to swap out that client configuration

00:05:46,009 --> 00:05:50,870
and do things with files to make it work

00:05:48,830 --> 00:05:53,720
it was just really ugly and so these are

00:05:50,870 --> 00:05:55,639
all the upsides and the downsides heroes

00:05:53,720 --> 00:05:59,240
in the past but fortunately we've done a

00:05:55,639 --> 00:06:04,070
lot of work and so things are rather

00:05:59,240 --> 00:06:07,150
quite different today yes one thing I

00:06:04,070 --> 00:06:11,389
didn't see the downside was cross

00:06:07,150 --> 00:06:13,930
interoperability okay Robert generally

00:06:11,389 --> 00:06:18,930
my house all right it's generally

00:06:13,930 --> 00:06:22,840
okay yeah it's time ms or microsoft a

00:06:18,930 --> 00:06:24,639
little bc eager bras yeah yeah so the

00:06:22,840 --> 00:06:27,220
interoperability works pretty well these

00:06:24,639 --> 00:06:29,800
days we actually have there's MIT runs

00:06:27,220 --> 00:06:32,949
the Kerberos sponsorship which every

00:06:29,800 --> 00:06:34,810
year has an interoperability meeting in

00:06:32,949 --> 00:06:36,340
which the different implementations come

00:06:34,810 --> 00:06:38,699
together and tests to make sure that

00:06:36,340 --> 00:06:38,699
everything's

00:06:41,849 --> 00:06:53,610
so yeah the big problems Microsoft had

00:06:49,830 --> 00:06:55,529
an undocumented extension yes and it's

00:06:53,610 --> 00:07:01,259
it's been documented and done for a long

00:06:55,529 --> 00:07:03,029
time so the present all of the stuff

00:07:01,259 --> 00:07:04,919
that's here is stuff that had been done

00:07:03,029 --> 00:07:08,550
in the in the fairly recent present in

00:07:04,919 --> 00:07:11,629
the last for almost five years now so

00:07:08,550 --> 00:07:15,059
all of this stuff is five years or newer

00:07:11,629 --> 00:07:17,759
so the first thing we have is Qi cos KZ

00:07:15,059 --> 00:07:19,379
discoveries over we have KCC discovery

00:07:17,759 --> 00:07:21,860
one of the one of the nice things about

00:07:19,379 --> 00:07:24,539
this is that this actually allows you to

00:07:21,860 --> 00:07:26,789
from the principal named determine which

00:07:24,539 --> 00:07:29,069
ktc to contact it that information and

00:07:26,789 --> 00:07:32,219
most of the other configuration doesn't

00:07:29,069 --> 00:07:34,319
really matter that much so or can be

00:07:32,219 --> 00:07:37,889
handled in different ways and so if

00:07:34,319 --> 00:07:39,539
Katie's you discovery it allows us to to

00:07:37,889 --> 00:07:41,339
actually discover just when typing Kane

00:07:39,539 --> 00:07:43,589
and your principal you figure out who to

00:07:41,339 --> 00:07:45,889
talk to which completely minimizes the

00:07:43,589 --> 00:07:48,209
client-side configuration required

00:07:45,889 --> 00:07:51,329
another feature that we've implemented

00:07:48,209 --> 00:07:53,610
recently was required time offsets so

00:07:51,329 --> 00:07:55,680
the way that this works is that when an

00:07:53,610 --> 00:07:58,019
authentication fails because of the time

00:07:55,680 --> 00:08:00,449
estate time synchronization issue the

00:07:58,019 --> 00:08:04,110
server actually will reply back and say

00:08:00,449 --> 00:08:06,629
it failed but this is my time and the

00:08:04,110 --> 00:08:09,329
client can now do an offset from that

00:08:06,629 --> 00:08:10,800
time and send that or request knowing

00:08:09,329 --> 00:08:14,519
that the server has a different time and

00:08:10,800 --> 00:08:16,409
so so this actually allows you to to

00:08:14,519 --> 00:08:17,990
bypass the time synchronization problem

00:08:16,409 --> 00:08:21,020
which is one of the larger

00:08:17,990 --> 00:08:22,610
problems so that's no longer an issue we

00:08:21,020 --> 00:08:23,780
actually have an even better solution

00:08:22,610 --> 00:08:26,240
for this which we're going to talk about

00:08:23,780 --> 00:08:30,050
in a minute but but even as of today

00:08:26,240 --> 00:08:32,030
that this is not a problem so we've also

00:08:30,050 --> 00:08:33,740
implemented multiple credential caches

00:08:32,030 --> 00:08:37,670
which means now you can have multiple

00:08:33,740 --> 00:08:39,770
principles a single system so you can

00:08:37,670 --> 00:08:41,660
log into five different sites if you

00:08:39,770 --> 00:08:43,820
want have principles for all of them

00:08:41,660 --> 00:08:47,240
swap it back and forth between them all

00:08:43,820 --> 00:08:49,670
of this is eminently doable today we've

00:08:47,240 --> 00:08:53,420
also developed this is fairly recent

00:08:49,670 --> 00:08:55,940
being HTTPS proxy you can see the URL to

00:08:53,420 --> 00:08:57,410
the upstream project there and what this

00:08:55,940 --> 00:08:59,560
actually allows you to do microsoft

00:08:57,410 --> 00:09:02,030
released a standard called take a DCP

00:08:59,560 --> 00:09:06,950
which allows you to send Kerberos

00:09:02,030 --> 00:09:10,370
product excuse me packets across HTTPS

00:09:06,950 --> 00:09:12,080
and so you can proxy them over web

00:09:10,370 --> 00:09:13,820
server this allows you get past all the

00:09:12,080 --> 00:09:17,150
ports right because you can just send it

00:09:13,820 --> 00:09:19,370
to 4432 into a proxy and you can get

00:09:17,150 --> 00:09:21,530
past it that way so now we don't have

00:09:19,370 --> 00:09:23,330
the port problem so much we've also

00:09:21,530 --> 00:09:25,820
implemented one-time password support

00:09:23,330 --> 00:09:28,790
and we were the first ones to do this

00:09:25,820 --> 00:09:31,640
for kerberos so you can see the upstream

00:09:28,790 --> 00:09:34,730
project here at MIT and you can see the

00:09:31,640 --> 00:09:38,180
design page for the feature at free IPA

00:09:34,730 --> 00:09:41,570
here and the way the one-time aspirin

00:09:38,180 --> 00:09:43,520
works is it uses the standard HTTP and

00:09:41,570 --> 00:09:45,470
TTP algorithms that are actually

00:09:43,520 --> 00:09:49,340
internet-drafts RFC used to the

00:09:45,470 --> 00:09:50,720
standardized and we use this and you can

00:09:49,340 --> 00:09:52,400
do really innovative things that you're

00:09:50,720 --> 00:09:55,760
using with free idea directly that's

00:09:52,400 --> 00:09:58,520
what we support you can also proxy the

00:09:55,760 --> 00:10:01,620
OTP to a third-party radius server this

00:09:58,520 --> 00:10:06,010
is for support for things like RSA

00:10:01,620 --> 00:10:09,580
that all works now and we also developed

00:10:06,010 --> 00:10:11,740
a separate app for free OTP which is

00:10:09,580 --> 00:10:15,520
available in the android and iOS stores

00:10:11,740 --> 00:10:16,900
and this implements the standard

00:10:15,520 --> 00:10:18,430
protocol it's basically the same as the

00:10:16,900 --> 00:10:20,830
google authenticator app if you've seen

00:10:18,430 --> 00:10:23,260
it but our back right there is open

00:10:20,830 --> 00:10:25,630
source it's actively maintained unlike

00:10:23,260 --> 00:10:28,540
Google Authenticator and we're actually

00:10:25,630 --> 00:10:30,010
developing innovative new features one

00:10:28,540 --> 00:10:32,080
of the upcoming of cool features is

00:10:30,010 --> 00:10:33,790
Bluetooth sharing which wanting you to

00:10:32,080 --> 00:10:36,130
just send the total code directly to

00:10:33,790 --> 00:10:38,230
your computer rather than having to read

00:10:36,130 --> 00:10:39,730
about the screen and type of manual so

00:10:38,230 --> 00:10:41,770
there's cool things like that going on

00:10:39,730 --> 00:10:44,920
but this is all happening within within

00:10:41,770 --> 00:10:48,880
the Kerberos realm so this is all stuff

00:10:44,920 --> 00:10:52,060
that's done we're also actively working

00:10:48,880 --> 00:10:53,830
on some new features probably one of the

00:10:52,060 --> 00:10:55,480
more important ones is the chaotic and

00:10:53,830 --> 00:10:58,120
authentication indicators this actually

00:10:55,480 --> 00:11:01,750
just landed last week and will be in

00:10:58,120 --> 00:11:04,300
fedora 23 so what the chemical

00:11:01,750 --> 00:11:05,410
modification indicators do is that

00:11:04,300 --> 00:11:08,380
they're signed assertions about

00:11:05,410 --> 00:11:10,900
authentication so basically it's a

00:11:08,380 --> 00:11:12,940
string in the ticket that when you

00:11:10,900 --> 00:11:15,160
receive a ticket you can analyze these

00:11:12,940 --> 00:11:17,710
strings these authentication indicators

00:11:15,160 --> 00:11:19,870
and they describe what happened when

00:11:17,710 --> 00:11:23,740
they ticket or winning authentication

00:11:19,870 --> 00:11:26,020
occurred so what this allows you to do

00:11:23,740 --> 00:11:28,300
is for example if you're using the OTP

00:11:26,020 --> 00:11:31,060
support we can stick a string now in the

00:11:28,300 --> 00:11:32,680
ticket that says OTP and so you can

00:11:31,060 --> 00:11:34,899
validate that when you receive a ticket

00:11:32,680 --> 00:11:37,899
did this user authenticate

00:11:34,899 --> 00:11:41,170
or not so this allows some really neat

00:11:37,899 --> 00:11:43,959
bridging first of all we plan to

00:11:41,170 --> 00:11:45,519
implement a policy layer for this in

00:11:43,959 --> 00:11:48,819
free IPA and they'll flee the next

00:11:45,519 --> 00:11:51,790
release schedule for next week's rain if

00:11:48,819 --> 00:11:54,369
we can make it we're going to where to

00:11:51,790 --> 00:11:55,509
put a layer into IPA to do this which

00:11:54,369 --> 00:11:58,149
will basically allow you to say things

00:11:55,509 --> 00:12:00,189
like I want two factor authentication

00:11:58,149 --> 00:12:02,110
for these services but not for these

00:12:00,189 --> 00:12:03,519
services and then we will approve or

00:12:02,110 --> 00:12:06,579
deny a ticket based upon your

00:12:03,519 --> 00:12:21,040
authentication what's up thank you oh

00:12:06,579 --> 00:12:25,839
you're welcome one of the will the

00:12:21,040 --> 00:12:29,889
campout is to have an error so the airco

00:12:25,839 --> 00:12:32,759
can be issued on the service side but

00:12:29,889 --> 00:12:32,759
the client side

00:12:35,120 --> 00:12:39,270
so there's a pre-existing standardized

00:12:37,920 --> 00:12:42,510
error code that we're planning on using

00:12:39,270 --> 00:12:44,700
which is the server policy error so it's

00:12:42,510 --> 00:12:47,460
failing the list of some server policy

00:12:44,700 --> 00:12:51,050
it's very generic and we hope to improve

00:12:47,460 --> 00:12:51,050
the user experience over time there

00:12:56,660 --> 00:13:00,300
there's just there's a standardized

00:12:58,590 --> 00:13:03,300
behavior for this was this was at my

00:13:00,300 --> 00:13:04,950
teas recommendation tools so that's

00:13:03,300 --> 00:13:07,200
currently the plan right now and then

00:13:04,950 --> 00:13:12,270
once we get things like that we can work

00:13:07,200 --> 00:13:14,610
on alcohol the second part yeah so so

00:13:12,270 --> 00:13:15,900
the second part is where we would

00:13:14,610 --> 00:13:17,490
actually pass through those

00:13:15,900 --> 00:13:19,440
authenticators through the tickets all

00:13:17,490 --> 00:13:21,420
the way to the end services so that and

00:13:19,440 --> 00:13:23,400
services can inspect the tickets and

00:13:21,420 --> 00:13:25,440
make the determination themselves all

00:13:23,400 --> 00:13:26,850
right so there's a centralized way of

00:13:25,440 --> 00:13:29,250
doing this policy and there's a

00:13:26,850 --> 00:13:31,710
decentralized way to the policy and we

00:13:29,250 --> 00:13:34,830
plan to implement both of those we also

00:13:31,710 --> 00:13:37,650
are claiming based on some conversations

00:13:34,830 --> 00:13:39,690
we had just last night about doing

00:13:37,650 --> 00:13:43,350
things like bridging this using epsilon

00:13:39,690 --> 00:13:44,850
into other places like Sam so one of the

00:13:43,350 --> 00:13:48,270
things that we talked about last night

00:13:44,850 --> 00:13:51,270
was using indicators to transition into

00:13:48,270 --> 00:13:53,730
level insurance policies example through

00:13:51,270 --> 00:13:57,690
epsilon so this is this is work that's

00:13:53,730 --> 00:13:59,700
all actively ongoing and the core

00:13:57,690 --> 00:14:03,510
feature here is landed in upstream

00:13:59,700 --> 00:14:04,890
Kerberos will be in fedora 23 and and

00:14:03,510 --> 00:14:08,280
then we're doing all the square root of

00:14:04,890 --> 00:14:11,350
ecosystem polishing stuff

00:14:08,280 --> 00:14:12,910
do you have question yeah there are

00:14:11,350 --> 00:14:15,460
their friends to expose this through the

00:14:12,910 --> 00:14:22,900
Jesus API there are plans but we have

00:14:15,460 --> 00:14:26,190
not designed it yet so yes so the

00:14:22,900 --> 00:14:28,960
studying a year is kolam Ayer code

00:14:26,190 --> 00:14:30,570
probably bad user experience with the

00:14:28,960 --> 00:14:34,350
full service that

00:14:30,570 --> 00:14:37,170
just display all these you'll join on

00:14:34,350 --> 00:14:39,920
allowed to access the service so and we

00:14:37,170 --> 00:14:39,920
have to be communicated

00:14:43,139 --> 00:14:49,559
next step is okay make the services

00:14:46,589 --> 00:14:51,869
smarter and selectively say okay produce

00:14:49,559 --> 00:14:54,029
series where I'm going to now send these

00:14:51,869 --> 00:14:59,209
indicators because this service knows

00:14:54,029 --> 00:14:59,209
how to Canada so now through the gssapi

00:15:01,970 --> 00:15:09,869
these service will be able to pull this

00:15:04,470 --> 00:15:13,949
indicator okay nice to give is quiet

00:15:09,869 --> 00:15:16,759
without Pooky an FYI key so I'm going to

00:15:13,949 --> 00:15:20,579
redirect whatever my default

00:15:16,759 --> 00:15:23,730
authentication URL go and you get there

00:15:20,579 --> 00:15:25,379
so that would be preserved yeah there's

00:15:23,730 --> 00:15:26,850
if there's another aspect of the service

00:15:25,379 --> 00:15:29,730
side when you do the decentralized

00:15:26,850 --> 00:15:31,589
verification of indicators is that you

00:15:29,730 --> 00:15:34,109
can have a lot more granularity so you

00:15:31,589 --> 00:15:37,589
can say let's say you have some file

00:15:34,109 --> 00:15:40,709
sharing over HTTP service and you use

00:15:37,589 --> 00:15:42,449
kerberos to log into it and you're

00:15:40,709 --> 00:15:44,249
browsing through your files everything's

00:15:42,449 --> 00:15:46,589
fine then you do to a secure directory

00:15:44,249 --> 00:15:48,059
and at that point it would say I'm sorry

00:15:46,589 --> 00:15:50,250
you don't have permissions because you

00:15:48,059 --> 00:15:52,740
don't have to backdrop

00:15:50,250 --> 00:15:55,680
so you can actually in the centralized

00:15:52,740 --> 00:15:58,590
model everything is a less granular you

00:15:55,680 --> 00:16:00,120
only get per service policy but when you

00:15:58,590 --> 00:16:01,980
actually then break it out the

00:16:00,120 --> 00:16:03,960
decentralized model you can actually

00:16:01,980 --> 00:16:09,680
have it for specific resources we did in

00:16:03,960 --> 00:16:09,680
the surface and we need more body

00:16:12,819 --> 00:16:17,049
yeah and for services that are already

00:16:15,009 --> 00:16:18,519
doing something similar like if isset if

00:16:17,049 --> 00:16:21,339
a services are depending on something

00:16:18,519 --> 00:16:23,499
like standards levels of insurance if we

00:16:21,339 --> 00:16:25,989
can transition those out of transition

00:16:23,499 --> 00:16:27,850
point like gifts along then that allows

00:16:25,989 --> 00:16:30,239
us to have a pretty smooth experience

00:16:27,850 --> 00:16:30,239
there

00:16:40,460 --> 00:16:43,440
that's a good that's a good

00:16:42,060 --> 00:16:44,540
recommendation of a policy could be

00:16:43,440 --> 00:16:49,340
clear

00:16:44,540 --> 00:16:51,020
good we should dump so that's that's

00:16:49,340 --> 00:16:53,720
basically the overview of authentication

00:16:51,020 --> 00:16:56,030
indicators it's been a long work that's

00:16:53,720 --> 00:16:59,090
just land basically so we hope to move

00:16:56,030 --> 00:17:01,370
forward with that we also have HTTP

00:16:59,090 --> 00:17:03,410
proxy discovery we have this required a

00:17:01,370 --> 00:17:07,010
new internet draft which which I wrote

00:17:03,410 --> 00:17:10,160
with seema and this basically allows us

00:17:07,010 --> 00:17:12,710
to also discover the proxy not right now

00:17:10,160 --> 00:17:14,390
you can discover the KDC so if you

00:17:12,710 --> 00:17:15,950
tighten air for your principal and login

00:17:14,390 --> 00:17:18,230
and we'll go find the KDC and then

00:17:15,950 --> 00:17:21,230
attempt to be authentication we want to

00:17:18,230 --> 00:17:22,640
also be able to discover the proxy so

00:17:21,230 --> 00:17:26,800
that so that all of that is completely

00:17:22,640 --> 00:17:26,800
convey plus which is our plan

00:17:30,490 --> 00:17:38,750
it is it was finalized and it was about

00:17:36,140 --> 00:17:40,310
to be done for last call and I realized

00:17:38,750 --> 00:17:44,330
that there was awarding the need to be

00:17:40,310 --> 00:17:47,030
updated Tom just submitted that wording

00:17:44,330 --> 00:17:48,770
probably about three weeks ago and so

00:17:47,030 --> 00:17:56,570
given have a month to probably go for

00:17:48,770 --> 00:18:00,380
last call it is yeah that's I just need

00:17:56,570 --> 00:18:04,150
updated that's the task of my foot yeah

00:18:00,380 --> 00:18:04,150
so common throughout that

00:18:08,790 --> 00:18:16,770
as a result he needs vary but you can

00:18:14,030 --> 00:18:21,000
cure that everything that we've done

00:18:16,770 --> 00:18:22,830
these days is cement seconds so there

00:18:21,000 --> 00:18:26,120
were actually two layers standards

00:18:22,830 --> 00:18:29,070
bodies cat giving you a container to

00:18:26,120 --> 00:18:32,280
send all the information around and then

00:18:29,070 --> 00:18:34,080
let's sign not yet that's site yeah and

00:18:32,280 --> 00:18:37,080
then I think engagement is actually

00:18:34,080 --> 00:18:38,380
flavor of the accusation information

00:18:37,080 --> 00:18:40,210
that is Carrie

00:18:38,380 --> 00:18:43,540
so you can put other generic information

00:18:40,210 --> 00:18:47,440
in there as well off indicators is just

00:18:43,540 --> 00:18:52,240
one of the types so let's move on unless

00:18:47,440 --> 00:18:55,060
anybody has more questions here so our

00:18:52,240 --> 00:18:56,530
next big project which actually just

00:18:55,060 --> 00:18:58,420
finished up some of the preparatory work

00:18:56,530 --> 00:19:02,140
for is password authenticated key

00:18:58,420 --> 00:19:04,960
exchange this is a new pre

00:19:02,140 --> 00:19:07,630
authentication mechanism for for

00:19:04,960 --> 00:19:09,190
kerberos Kerberos has these ideas pre

00:19:07,630 --> 00:19:10,840
authentication mechanisms that's

00:19:09,190 --> 00:19:13,750
basically the ways that you prove who

00:19:10,840 --> 00:19:16,420
you are well the traditional way to do

00:19:13,750 --> 00:19:18,730
this has been encrypted timestamp and

00:19:16,420 --> 00:19:20,590
that basically means you take your

00:19:18,730 --> 00:19:22,120
password you take the timestamp you

00:19:20,590 --> 00:19:25,390
encrypt the time step of the password a

00:19:22,120 --> 00:19:27,160
new Senate server the server then

00:19:25,390 --> 00:19:29,680
decrypt the timestamp it matches the

00:19:27,160 --> 00:19:32,140
validates against the local time that in

00:19:29,680 --> 00:19:33,730
a certain window that had the time

00:19:32,140 --> 00:19:36,220
synchronization problems that we talked

00:19:33,730 --> 00:19:39,730
about other people have also implemented

00:19:36,220 --> 00:19:41,890
other pre authentication mechanisms most

00:19:39,730 --> 00:19:45,100
of them are centered around question of

00:19:41,890 --> 00:19:47,770
multi factors and this led to the

00:19:45,100 --> 00:19:50,200
creation of something called fast which

00:19:47,770 --> 00:19:53,470
is a something essentially to boil it

00:19:50,200 --> 00:19:55,630
down very simply public to cently is SSL

00:19:53,470 --> 00:19:57,580
for her breasts which allows you to send

00:19:55,630 --> 00:19:59,920
in credentials to curb ropes through

00:19:57,580 --> 00:20:01,930
this encrypted tunnel well now of course

00:19:59,920 --> 00:20:03,760
you've actually fast is a good thing for

00:20:01,930 --> 00:20:05,140
a variety of cases particularly because

00:20:03,760 --> 00:20:07,330
it allows you to encrypt the entire

00:20:05,140 --> 00:20:08,659
ticket so that no information about

00:20:07,330 --> 00:20:10,639
particulars shown over the

00:20:08,659 --> 00:20:14,389
which is the night state so fast is not

00:20:10,639 --> 00:20:16,729
bad but it does sort of fall into the

00:20:14,389 --> 00:20:18,619
trap of sending passwords into clear

00:20:16,729 --> 00:20:22,129
through the channel which we don't want

00:20:18,619 --> 00:20:23,929
to do we also had the concern of how to

00:20:22,129 --> 00:20:26,929
accurately handle a multi-factor

00:20:23,929 --> 00:20:29,840
authentication when we implemented the

00:20:26,929 --> 00:20:32,869
OTP support we did it using a standard

00:20:29,840 --> 00:20:34,549
that was created by RSA and all the way

00:20:32,869 --> 00:20:36,830
implemented it and it works well we we

00:20:34,549 --> 00:20:38,210
realize that their work so some design

00:20:36,830 --> 00:20:39,979
flaws with it fairly early on

00:20:38,210 --> 00:20:44,539
particularly as regards user experience

00:20:39,979 --> 00:20:46,190
setting up the fast tunnel is in a

00:20:44,539 --> 00:20:48,289
system like free IPA where you have

00:20:46,190 --> 00:20:50,749
control over the clients and the servers

00:20:48,289 --> 00:20:53,509
all of this can work very well very

00:20:50,749 --> 00:20:55,399
integrated but if you want to try to do

00:20:53,509 --> 00:20:58,869
a completely config less environment

00:20:55,399 --> 00:21:02,119
such as with fedora volunteers let's say

00:20:58,869 --> 00:21:04,249
it is not really easy to deploy in that

00:21:02,119 --> 00:21:06,830
situation so what we've done is we've

00:21:04,249 --> 00:21:10,519
used strong barn photography including

00:21:06,830 --> 00:21:14,179
elliptic curves to implement a new pre

00:21:10,519 --> 00:21:15,859
automatic free off mechanism and it's

00:21:14,179 --> 00:21:17,720
called password authenticated key

00:21:15,859 --> 00:21:19,580
exchange and the way this works is it

00:21:17,720 --> 00:21:22,759
does anybody know what a dippy helmet

00:21:19,580 --> 00:21:25,070
the exchanges so diplomatic exchanges

00:21:22,759 --> 00:21:27,320
simple mathematical operation each side

00:21:25,070 --> 00:21:28,729
is to share a public key and then it

00:21:27,320 --> 00:21:31,429
derives a session key and each of

00:21:28,729 --> 00:21:33,470
shoppers can't can't determine what the

00:21:31,429 --> 00:21:35,929
session key is password authentication

00:21:33,470 --> 00:21:38,840
key exchange is the same thing but using

00:21:35,929 --> 00:21:40,549
a password mixed into that algorithm in

00:21:38,840 --> 00:21:42,979
some way it is various different ways to

00:21:40,549 --> 00:21:44,840
do it but you mix in a password into

00:21:42,979 --> 00:21:46,999
that algorithm and the end result is

00:21:44,840 --> 00:21:49,630
that only if both sides know the

00:21:46,999 --> 00:21:53,050
password does the sessions

00:21:49,630 --> 00:21:55,390
correctly and so we use this in order to

00:21:53,050 --> 00:21:57,280
have no password on the wire again just

00:21:55,390 --> 00:21:58,750
like the encrypted tax stamp but notice

00:21:57,280 --> 00:22:02,560
that there's no time stamp involved at

00:21:58,750 --> 00:22:04,210
all so we're before if you had a time

00:22:02,560 --> 00:22:06,430
time synchronization issue you get a

00:22:04,210 --> 00:22:09,700
failure and then you can flip it back

00:22:06,430 --> 00:22:11,740
with it offset now we can just do this

00:22:09,700 --> 00:22:14,500
in one exchange no time synchronization

00:22:11,740 --> 00:22:17,050
is required at all no offline dictionary

00:22:14,500 --> 00:22:18,640
attacks are possible at all so one of

00:22:17,050 --> 00:22:20,320
the difficult problems with encrypted

00:22:18,640 --> 00:22:21,790
times daily is that because you're

00:22:20,320 --> 00:22:25,000
encrypting in time stamp which is a

00:22:21,790 --> 00:22:27,520
known value eating your password anyone

00:22:25,000 --> 00:22:29,320
who eavesdrops the encrypted packet that

00:22:27,520 --> 00:22:31,120
sent can perform an offline dictionary

00:22:29,320 --> 00:22:32,710
attack against your password against

00:22:31,120 --> 00:22:34,780
that packet and if they get back a

00:22:32,710 --> 00:22:36,520
timestamp value that looks correct that

00:22:34,780 --> 00:22:39,220
they've probably guessed your password

00:22:36,520 --> 00:22:43,060
pink does not allow for this which is a

00:22:39,220 --> 00:22:44,530
big win for us it also means that we

00:22:43,060 --> 00:22:47,920
don't have to have any third-party trust

00:22:44,530 --> 00:22:49,600
so the idea of having a fast tone goes

00:22:47,920 --> 00:22:52,930
away at least for the case that we care

00:22:49,600 --> 00:22:55,330
about which is sending multi-factor of

00:22:52,930 --> 00:22:57,700
and pick permits us to actually encrypt

00:22:55,330 --> 00:22:59,770
a second factor in the same packet that

00:22:57,700 --> 00:23:02,230
sent the balloting the first factor so

00:22:59,770 --> 00:23:04,960
we perform this key exchange and then we

00:23:02,230 --> 00:23:07,330
send a validator to prove that we know

00:23:04,960 --> 00:23:10,720
the first factor but at the same time we

00:23:07,330 --> 00:23:12,340
also send a the second factor and an

00:23:10,720 --> 00:23:13,990
encrypted packet at the same time we can

00:23:12,340 --> 00:23:16,450
do is both the server and the server

00:23:13,990 --> 00:23:19,390
will say yes or no and so you don't know

00:23:16,450 --> 00:23:20,980
which factors succeeded or failed which

00:23:19,390 --> 00:23:23,200
is exactly the copper we want everything

00:23:20,980 --> 00:23:24,610
done in encryption and there's no third

00:23:23,200 --> 00:23:26,260
party trust apart so you don't have to

00:23:24,610 --> 00:23:29,470
set up a fast talk about 20 think it's a

00:23:26,260 --> 00:23:31,000
really great user experience we actually

00:23:29,470 --> 00:23:33,670
had a group of concept that was done

00:23:31,000 --> 00:23:36,760
here don't use it it's insecure it says

00:23:33,670 --> 00:23:38,050
that on the website it was just a proof

00:23:36,760 --> 00:23:40,600
of concept to see if we could actually

00:23:38,050 --> 00:23:43,060
make it work and there we still needed

00:23:40,600 --> 00:23:45,430
some various security features so don't

00:23:43,060 --> 00:23:48,580
use it it's insecure but we did Anna

00:23:45,430 --> 00:23:50,670
proof of concept we then our current

00:23:48,580 --> 00:23:52,510
state is that we have published

00:23:50,670 --> 00:23:57,040
internet-draft for this so it's going to

00:23:52,510 --> 00:23:59,470
be standardized we have also landed in

00:23:57,040 --> 00:24:02,350
Kerberos all the preparatory work that

00:23:59,470 --> 00:24:04,750
we needed to actually implement this so

00:24:02,350 --> 00:24:08,410
there were various what's up well you

00:24:04,750 --> 00:24:11,740
say in carrboro human Mikey in MIT lurex

00:24:08,410 --> 00:24:12,940
yeah so in MIT kerberos there were in

00:24:11,740 --> 00:24:14,800
their code base there were some things

00:24:12,940 --> 00:24:17,230
we needed to tweak so that we can

00:24:14,800 --> 00:24:19,090
implement this as a plug-in and our plan

00:24:17,230 --> 00:24:20,980
now is to go implemented as the plug in

00:24:19,090 --> 00:24:22,810
it and then eventually once it's all

00:24:20,980 --> 00:24:26,920
working will actually ship it in the

00:24:22,810 --> 00:24:28,660
upstream MIT distribution so so this is

00:24:26,920 --> 00:24:30,990
very exciting along with the

00:24:28,660 --> 00:24:34,440
authenticators and this is the kind of

00:24:30,990 --> 00:24:37,350
twin hands if you will of the our future

00:24:34,440 --> 00:24:39,620
Kerberos approach and this will provide

00:24:37,350 --> 00:24:41,370
a really good user experience for

00:24:39,620 --> 00:24:43,920
multi-factor authentication because

00:24:41,370 --> 00:24:45,720
we've now to find a generic mechanism

00:24:43,920 --> 00:24:47,820
before doing multi-factor authentication

00:24:45,720 --> 00:24:50,940
rather than every multi-factor person

00:24:47,820 --> 00:24:53,460
doing their own preauth mechanism so

00:24:50,940 --> 00:24:54,690
that will be beneficial as well we would

00:24:53,460 --> 00:24:59,550
really like some improved browser

00:24:54,690 --> 00:25:01,740
support so this is this is one of the

00:24:59,550 --> 00:25:03,420
things we've started to look at we have

00:25:01,740 --> 00:25:05,220
no concrete plans here but we would

00:25:03,420 --> 00:25:07,230
really like your help we don't have a

00:25:05,220 --> 00:25:09,300
browser person on our team so if you

00:25:07,230 --> 00:25:11,400
know a browser person who is looking for

00:25:09,300 --> 00:25:13,950
a fun side project we would definitely

00:25:11,400 --> 00:25:17,490
like some healthier and the simple idea

00:25:13,950 --> 00:25:20,400
is that when browsers first implemented

00:25:17,490 --> 00:25:21,840
Kerberos they did so based upon the

00:25:20,400 --> 00:25:23,929
assumptions of the past remember that

00:25:21,840 --> 00:25:27,450
first side with a lot of the downsides

00:25:23,929 --> 00:25:28,830
so browsers basically had all those same

00:25:27,450 --> 00:25:30,840
assumptions of all the stuff that was

00:25:28,830 --> 00:25:32,190
done in the past and that was how they

00:25:30,840 --> 00:25:34,260
built their support well we've done a

00:25:32,190 --> 00:25:36,330
lot of stuff since then and so the

00:25:34,260 --> 00:25:37,980
experience in browsers could be much

00:25:36,330 --> 00:25:39,840
more polished today that it could

00:25:37,980 --> 00:25:41,640
yesterday and so we would like to bring

00:25:39,840 --> 00:25:43,620
that same level of polishing and finally

00:25:41,640 --> 00:25:45,150
to the browser experience but we don't

00:25:43,620 --> 00:25:46,800
have a browser guy so if you have a

00:25:45,150 --> 00:25:48,559
browser guy and he wants to work on this

00:25:46,800 --> 00:25:52,700
please send them our way

00:25:48,559 --> 00:25:55,039
getting work it's ever possible or will

00:25:52,700 --> 00:25:58,700
ever be possible for browsers to ship

00:25:55,039 --> 00:26:01,759
with this enabled by default yes they do

00:25:58,700 --> 00:26:03,590
now we go so there's the last laugh you

00:26:01,759 --> 00:26:05,480
have to configure it yeah right because

00:26:03,590 --> 00:26:07,700
the presumption is your unique client

00:26:05,480 --> 00:26:09,679
configuration right the last I recall

00:26:07,700 --> 00:26:13,039
was that there was a setting and you had

00:26:09,679 --> 00:26:14,840
to enable it to send existing principles

00:26:13,039 --> 00:26:17,179
for certain domain that's karate

00:26:14,840 --> 00:26:18,620
basically to every principle you had and

00:26:17,179 --> 00:26:20,480
threw them in the server and I hope that

00:26:18,620 --> 00:26:23,779
won't work that's correct it was

00:26:20,480 --> 00:26:25,789
actually a disclosure yes so nobody

00:26:23,779 --> 00:26:27,409
turns at all yes there are there are

00:26:25,789 --> 00:26:31,279
definitely ways around this one of the

00:26:27,409 --> 00:26:34,100
nice things about baked is that there is

00:26:31,279 --> 00:26:37,220
absolutely no benefit to a rogue server

00:26:34,100 --> 00:26:38,450
gaming and authentication back end which

00:26:37,220 --> 00:26:40,850
is something we've never had before

00:26:38,450 --> 00:26:42,230
because before you could if you received

00:26:40,850 --> 00:26:43,759
it back that you could do fine

00:26:42,230 --> 00:26:45,919
dictionary attack for instance against

00:26:43,759 --> 00:26:48,590
the password but once we have pake

00:26:45,919 --> 00:26:50,869
landed you can send authentication

00:26:48,590 --> 00:26:52,639
package all you all day long to whatever

00:26:50,869 --> 00:26:55,129
server you want and they can't gain any

00:26:52,639 --> 00:26:56,419
information unless they already know the

00:26:55,129 --> 00:26:59,570
password which is what they're trying to

00:26:56,419 --> 00:27:01,490
get anything so so yeah so the answer is

00:26:59,570 --> 00:27:03,230
basically all this polish stuff that

00:27:01,490 --> 00:27:04,549
we've been doing under the covers just

00:27:03,230 --> 00:27:10,090
now needs to be brought into the user

00:27:04,549 --> 00:27:14,059
experience of the browser so returning

00:27:10,090 --> 00:27:16,519
to our first slide you see we've

00:27:14,059 --> 00:27:19,580
actually gained we've gained some

00:27:16,519 --> 00:27:21,580
upsides here we have the dictionary

00:27:19,580 --> 00:27:24,350
attack problem that we've identified

00:27:21,580 --> 00:27:25,789
we've solved with paint we have the

00:27:24,350 --> 00:27:27,289
one-time passwords important with

00:27:25,789 --> 00:27:30,110
authenticators we're going to get super

00:27:27,289 --> 00:27:32,690
service policy on that and we've

00:27:30,110 --> 00:27:34,789
eliminated all the downsides so the

00:27:32,690 --> 00:27:36,230
basic plan here if you can't guess what

00:27:34,789 --> 00:27:37,470
we're doing with this slide go to court

00:27:36,230 --> 00:27:40,260
Kerberos it's a much better

00:27:37,470 --> 00:27:42,659
today than it used to be and there's

00:27:40,260 --> 00:27:45,450
lots of great tools like three IPA which

00:27:42,659 --> 00:27:48,330
is by the way part of our server product

00:27:45,450 --> 00:27:50,580
in fedora so so it's definitely

00:27:48,330 --> 00:27:52,740
something we want to encourage you to

00:27:50,580 --> 00:27:56,909
use so with that gonna turn it over to

00:27:52,740 --> 00:28:05,100
Roddy alright so Nathaniel has talked

00:27:56,909 --> 00:28:07,559
about in a more abstract what what what

00:28:05,100 --> 00:28:09,870
we have for the past future kerberos but

00:28:07,559 --> 00:28:12,450
what we haven't really covered is how do

00:28:09,870 --> 00:28:15,650
you get this that's what I want to talk

00:28:12,450 --> 00:28:18,600
a little bit about so to quickly recap

00:28:15,650 --> 00:28:21,470
kerberos right it's client-server you

00:28:18,600 --> 00:28:24,960
need some servers we call that a KDC and

00:28:21,470 --> 00:28:26,940
as i mentioned it's kind of a pain to

00:28:24,960 --> 00:28:29,549
deploy if you try and do it by hand and

00:28:26,940 --> 00:28:33,360
have enough support yeah did you turn on

00:28:29,549 --> 00:28:35,039
you wanna install yeah begun man you

00:28:33,360 --> 00:28:39,539
don't have an existing infrastructure

00:28:35,039 --> 00:28:42,390
just right and destruction and at the

00:28:39,539 --> 00:28:44,190
present day the clients need to know

00:28:42,390 --> 00:28:47,250
some stuff about the servers we have

00:28:44,190 --> 00:28:49,169
good heuristics for guessing that you

00:28:47,250 --> 00:28:51,720
mentioned pulling the server from the

00:28:49,169 --> 00:28:53,640
realm name when you do a can it and

00:28:51,720 --> 00:28:56,159
things like that but really what you

00:28:53,640 --> 00:28:58,830
need is something that stands all that

00:28:56,159 --> 00:29:02,549
up for you and that's free IPA so free

00:28:58,830 --> 00:29:05,159
IPA is a push-button solution in a sense

00:29:02,549 --> 00:29:07,710
that you run one command and it goes and

00:29:05,159 --> 00:29:09,450
it gives you all of the things you could

00:29:07,710 --> 00:29:13,130
want you have your realm you have your

00:29:09,450 --> 00:29:13,130
nice interface you have a powerful API

00:29:13,190 --> 00:29:16,430
the you know master replication

00:29:14,930 --> 00:29:21,260
everything else that makes it look like

00:29:16,430 --> 00:29:24,800
le essentially and the magic behind all

00:29:21,260 --> 00:29:28,820
of that and you don't so if you want to

00:29:24,800 --> 00:29:31,640
have a client yes thank you you can run

00:29:28,820 --> 00:29:34,460
IP a client install but you can also use

00:29:31,640 --> 00:29:36,710
only parts of their own and you can do

00:29:34,460 --> 00:29:39,410
that with sssd so for instance the way

00:29:36,710 --> 00:29:41,150
this laptop is set up I'm not a client

00:29:39,410 --> 00:29:43,910
in the realm but I can take advantage of

00:29:41,150 --> 00:29:46,550
a lot of the realm features by using

00:29:43,910 --> 00:30:07,870
sssd and pulling my login information

00:29:46,550 --> 00:30:07,870
from there for instance the most people

00:30:09,700 --> 00:30:15,410
but I wish to assist you to take over

00:30:12,290 --> 00:30:17,330
more because it's the thing that seems

00:30:15,410 --> 00:30:21,260
to always work well it's in debian now

00:30:17,330 --> 00:30:30,800
yes yeah it's in dsm what's up cindy is

00:30:21,260 --> 00:30:33,340
the anachronistic so now I'm yeah yeah I

00:30:30,800 --> 00:30:33,340
know people

00:30:42,740 --> 00:30:53,210
world I'm thrilled about it works I

00:30:45,420 --> 00:30:53,210
think is one of the two VST customers

00:30:55,130 --> 00:31:03,210
okay so the first way you can get in as

00:31:00,000 --> 00:31:04,920
a client application developer into

00:31:03,210 --> 00:31:06,900
using all this great stuff you know

00:31:04,920 --> 00:31:10,530
you're free i PA realm KDC your Kerberos

00:31:06,900 --> 00:31:11,990
you're excited is gssapi and we alluded

00:31:10,530 --> 00:31:14,070
earlier there'd been some

00:31:11,990 --> 00:31:16,620
incompatibilities between Kerberos

00:31:14,070 --> 00:31:18,870
implementations and the gssapi helps to

00:31:16,620 --> 00:31:22,500
fix a lot of that it's a standardized

00:31:18,870 --> 00:31:26,930
API it's got RFC's up there three of

00:31:22,500 --> 00:31:31,770
them and it'll even do Microsoft if you

00:31:26,930 --> 00:31:34,530
really want it but it's not just

00:31:31,770 --> 00:31:37,560
Kerberos is the thing it has other

00:31:34,530 --> 00:31:39,030
mechanisms as well for my purposes I'm

00:31:37,560 --> 00:31:40,920
mostly concerned Kerberos but if you

00:31:39,030 --> 00:31:42,960
want to do other things you can use spin

00:31:40,920 --> 00:31:45,840
a go and what not and it's a relatively

00:31:42,960 --> 00:31:48,600
simple API there's five functions you

00:31:45,840 --> 00:31:51,800
really need to care about import name

00:31:48,600 --> 00:31:55,620
grab your user name in it set context is

00:31:51,800 --> 00:31:58,110
how you begin as the first party in an

00:31:55,620 --> 00:31:59,970
exchange accepts that context is the

00:31:58,110 --> 00:32:02,520
second party so you want to thank client

00:31:59,970 --> 00:32:04,350
server and then wrap an unwrapped are

00:32:02,520 --> 00:32:09,240
for your encryption which you're going

00:32:04,350 --> 00:32:10,390
to do write your caption Jesus if ya can

00:32:09,240 --> 00:32:12,640
also do encryption

00:32:10,390 --> 00:32:14,890
do just authenticated so you can

00:32:12,640 --> 00:32:16,750
authenticate and also doing good yeah

00:32:14,890 --> 00:32:18,850
and I'm emphasizing those two in

00:32:16,750 --> 00:32:21,070
particular because there are a number of

00:32:18,850 --> 00:32:22,870
applications in the wild that you know

00:32:21,070 --> 00:32:25,510
they get the first three bright and it's

00:32:22,870 --> 00:32:28,510
amazing and it looks to all the world

00:32:25,510 --> 00:32:30,720
like Kerberos is being used fully and

00:32:28,510 --> 00:32:32,890
you get there and there's no encryption

00:32:30,720 --> 00:32:34,900
so yes you've done all this

00:32:32,890 --> 00:32:40,390
authentication but it counts for very

00:32:34,900 --> 00:32:43,170
little in the morning bold pls yeah when

00:32:40,390 --> 00:32:57,720
all they had to do was call to function

00:32:43,170 --> 00:33:03,580
yeah yeah yes RFC 2743 in point 7 40

00:32:57,720 --> 00:33:07,540
2744 it is for a yes he did a good job

00:33:03,580 --> 00:33:09,730
on cleaning the api's and putting

00:33:07,540 --> 00:33:13,570
documentation on the new creation portal

00:33:09,730 --> 00:33:16,470
so i have seen the efforts around that

00:33:13,570 --> 00:33:16,470
couple years ago

00:33:16,980 --> 00:33:24,580
find a lot and CC mom hears is here as

00:33:21,970 --> 00:33:26,830
well he's the Jesus expert in the room

00:33:24,580 --> 00:33:29,290
so you can find him and ask him any

00:33:26,830 --> 00:33:33,060
questions you want I still find a lot of

00:33:29,290 --> 00:33:33,060
this to be very people it's tough

00:33:36,300 --> 00:33:45,160
marketing but yeah it's whatever you

00:33:38,680 --> 00:33:48,640
need to give you rfcs can be a little

00:33:45,160 --> 00:33:50,680
intimidating but 2744 really does cover

00:33:48,640 --> 00:33:53,170
a lot of what you need to know in order

00:33:50,680 --> 00:33:54,610
to actually use this and yes there are

00:33:53,170 --> 00:33:56,740
other functions in there besides these

00:33:54,610 --> 00:33:59,700
five but these are the five that you

00:33:56,740 --> 00:33:59,700
really need to get started

00:34:11,040 --> 00:34:16,870
don't don't use a lot of answer to that

00:34:13,960 --> 00:34:22,600
don't use a lot of use models gssapi

00:34:16,870 --> 00:34:26,220
yeah yeah so we have been switching we

00:34:22,600 --> 00:34:26,220
started with several projects

00:34:28,839 --> 00:34:43,539
what if curb is built on they're all

00:34:31,299 --> 00:34:45,999
titles and yeah so another way of

00:34:43,539 --> 00:34:48,849
calling into all of this kerberos magic

00:34:45,999 --> 00:34:52,989
is sasal which is also standardized

00:34:48,849 --> 00:34:54,909
though I like the RFC rather less though

00:34:52,989 --> 00:34:58,690
it does have more mechanism support out

00:34:54,909 --> 00:35:00,670
of the box and it's easier to extend you

00:34:58,690 --> 00:35:04,509
drop a line in a config file and add a

00:35:00,670 --> 00:35:11,920
dot s oh and it takes care of it it also

00:35:04,509 --> 00:35:13,930
has support for protocol support so when

00:35:11,920 --> 00:35:16,960
you have a protocol that maybe has a

00:35:13,930 --> 00:35:19,660
built-in security layer say you connect

00:35:16,960 --> 00:35:22,809
ssl to a server and then you go into

00:35:19,660 --> 00:35:25,059
sasal you can inform sasal that you have

00:35:22,809 --> 00:35:26,890
done this and that the security is there

00:35:25,059 --> 00:35:29,979
from that which is something that you

00:35:26,890 --> 00:35:32,049
can't do with gssapi and yes the

00:35:29,979 --> 00:35:33,489
protocol does also allow for a pen

00:35:32,049 --> 00:35:35,289
acacia in without encryption which is

00:35:33,489 --> 00:35:38,289
kind of unfortunate but I can't win

00:35:35,289 --> 00:35:41,979
everything so sessle is a bit more

00:35:38,289 --> 00:35:44,499
verbose there bunch more functions we

00:35:41,979 --> 00:35:47,769
got my to crypto functions at the bottom

00:35:44,499 --> 00:35:51,759
here that's the goal state get to encode

00:35:47,769 --> 00:35:56,049
and decode but the way the API works is

00:35:51,759 --> 00:35:58,839
a bit more you request something from

00:35:56,049 --> 00:35:59,920
the library and the library says ok well

00:35:58,839 --> 00:36:02,200
you didn't give me enough information

00:35:59,920 --> 00:36:03,640
and then it gives you back a struct and

00:36:02,200 --> 00:36:06,789
you go fill in the fields in the struct

00:36:03,640 --> 00:36:11,430
and you hand it back in it's very object

00:36:06,789 --> 00:36:15,640
oriented notice that the API simple

00:36:11,430 --> 00:36:19,239
yes that's a soul what a sense of

00:36:15,640 --> 00:36:31,829
importance simple authentication is yeah

00:36:19,239 --> 00:36:38,559
it's not simple I yeah probably okay so

00:36:31,829 --> 00:36:42,130
to recap sasal is more powerful but it

00:36:38,559 --> 00:36:45,339
is a little bit harder to use this is in

00:36:42,130 --> 00:36:47,559
part because gssapi is a mechanism you

00:36:45,339 --> 00:36:51,640
can use the sasal so it subsumes

00:36:47,559 --> 00:36:53,680
everything and don't take away from this

00:36:51,640 --> 00:36:55,420
slide that you should always use sussel

00:36:53,680 --> 00:37:00,039
you should judge on the case by case

00:36:55,420 --> 00:37:02,049
basis absolutely needs are so because

00:37:00,039 --> 00:37:03,430
this is a fedora conference we should

00:37:02,049 --> 00:37:07,150
talk about what the state of using this

00:37:03,430 --> 00:37:09,729
in fedora is so the default way of doing

00:37:07,150 --> 00:37:12,789
this because these are CA p is for c and

00:37:09,729 --> 00:37:15,759
c++ you might call into your libraries

00:37:12,789 --> 00:37:19,319
slips a sold of gssapi and the same is

00:37:15,759 --> 00:37:24,359
true for go if you're a go person and

00:37:19,319 --> 00:37:24,359
haskell as well though that's not ideal

00:37:27,020 --> 00:37:33,270
okay for some others we have packaging

00:37:30,690 --> 00:37:35,100
packaging for gssapi is a bit stronger

00:37:33,270 --> 00:37:37,620
than the packaging force a sloped moment

00:37:35,100 --> 00:37:41,640
Python and Ruby sort of heard a little

00:37:37,620 --> 00:37:50,370
bit here and rust and airline are

00:37:41,640 --> 00:37:54,960
forthcoming but Sully you want to tell

00:37:50,370 --> 00:37:59,670
us about Pearl I like you I you know I'm

00:37:54,960 --> 00:38:03,930
sorry to say actually I draw I assume

00:37:59,670 --> 00:38:07,710
it's there though because pearl isn't up

00:38:03,930 --> 00:38:09,930
a pirate pro is an FF tyrant yes we'll

00:38:07,710 --> 00:38:11,970
very interesting there so there is a

00:38:09,930 --> 00:38:14,900
waste right agri finding somewhat like

00:38:11,970 --> 00:38:14,900
there is for Python

00:38:18,450 --> 00:38:22,770
and on a personal level I'm not sure I

00:38:20,700 --> 00:38:27,390
want to encourage the proliferation of

00:38:22,770 --> 00:38:28,829
additional pearl but yes not other other

00:38:27,390 --> 00:38:31,020
people like pearls are things that

00:38:28,829 --> 00:38:33,000
already exists that are repeating that's

00:38:31,020 --> 00:38:35,250
low and he also wants to strongly

00:38:33,000 --> 00:38:37,650
suggest that you do not attempt to to

00:38:35,250 --> 00:38:40,589
re-implement any of these things in

00:38:37,650 --> 00:38:43,140
negative languages you should you should

00:38:40,589 --> 00:38:45,240
definitely lose bindings because this is

00:38:43,140 --> 00:38:48,359
a very difficult to get the security

00:38:45,240 --> 00:38:51,150
correct and these are very matured live

00:38:48,359 --> 00:38:53,670
gssapi and cyrus acyl are very mature

00:38:51,150 --> 00:39:00,540
implementation took long histories javed

00:38:53,670 --> 00:39:02,250
is a lot of zone yes so yeah and it's

00:39:00,540 --> 00:39:05,910
one of the reasons why java kind of

00:39:02,250 --> 00:39:07,980
lives in its own universe because they

00:39:05,910 --> 00:39:12,270
also clementa Kerberos waiting stuff

00:39:07,980 --> 00:39:15,480
Jesus API others but it's not the same

00:39:12,270 --> 00:39:18,300
experience you get places the API is

00:39:15,480 --> 00:39:24,910
different because of course it is

00:39:18,300 --> 00:39:27,100
yes it does did you a question yes if we

00:39:24,910 --> 00:39:30,370
absolutely work on that very tight we

00:39:27,100 --> 00:39:36,510
encourage Python through doing both

00:39:30,370 --> 00:39:36,510
Python to a 5.3 we've tested up 13.4

00:39:38,630 --> 00:39:44,700
do we know when 35 is coming soon right

00:39:43,140 --> 00:39:50,510
it's all the same it's in the teacher

00:39:44,700 --> 00:39:50,510
yeah don't worry about that yet okay so

00:39:56,390 --> 00:40:05,730
let's talk about that so as an

00:40:03,690 --> 00:40:07,530
application developer you probably don't

00:40:05,730 --> 00:40:09,540
want to go alone into the night using

00:40:07,530 --> 00:40:11,670
all of these amazing new technologies

00:40:09,540 --> 00:40:14,520
that no one else is using you'd like to

00:40:11,670 --> 00:40:18,870
see some other applications using them

00:40:14,520 --> 00:40:21,210
already so here are some if you you know

00:40:18,870 --> 00:40:24,240
do email in a desktop client you see an

00:40:21,210 --> 00:40:25,950
IMAP smtp those can both do Kerberos in

00:40:24,240 --> 00:40:29,130
a lot of enterprise environments they

00:40:25,950 --> 00:40:35,370
will but this is often opaque and not my

00:40:29,130 --> 00:40:37,830
default IRC XMPP they do sasal freenode

00:40:35,370 --> 00:40:40,110
in particular supports acyl for

00:40:37,830 --> 00:40:41,400
authentication and if you're someone who

00:40:40,110 --> 00:40:44,040
has ever tried to connect a free note

00:40:41,400 --> 00:40:47,130
over torr you know how exciting that is

00:40:44,040 --> 00:40:48,720
to set up so the user experience there

00:40:47,130 --> 00:40:52,740
is a little bit lacking but it's at

00:40:48,720 --> 00:40:54,950
least their cups if you wanted to K in

00:40:52,740 --> 00:40:57,720
it in order to print you can do that and

00:40:54,950 --> 00:40:59,550
your system log though I guess fedora

00:40:57,720 --> 00:41:02,490
isn't using this as the main

00:40:59,550 --> 00:41:05,300
you can still consume our syslog four

00:41:02,490 --> 00:41:07,680
pieces and that will do Kerber eyes

00:41:05,300 --> 00:41:12,690
tunneling for log aggregation through

00:41:07,680 --> 00:41:14,280
the gssapi and SH this is the one that

00:41:12,690 --> 00:41:16,080
we'd like to show off because it's the

00:41:14,280 --> 00:41:18,240
clearest is you know UK in it and you

00:41:16,080 --> 00:41:20,040
ssh the host and it doesn't prompt you

00:41:18,240 --> 00:41:23,520
for the password because it uses Justice

00:41:20,040 --> 00:41:27,210
API for your authentication of it is its

00:41:23,520 --> 00:41:29,490
own issues but it mostly works we've

00:41:27,210 --> 00:41:31,170
also got some databases this is stuff

00:41:29,490 --> 00:41:32,640
that I've been working on recently and

00:41:31,170 --> 00:41:35,430
is in the process of being worship soon

00:41:32,640 --> 00:41:38,970
but if you ever wanted to talk gssapi to

00:41:35,430 --> 00:41:42,120
your database you can do that too and in

00:41:38,970 --> 00:41:45,870
tandem with that for messaging cupid

00:41:42,120 --> 00:41:48,650
proton will support sasal art sorry

00:41:45,870 --> 00:41:54,000
already supports acyl hasn't released

00:41:48,650 --> 00:41:57,570
0.1 I think and the goal with both of

00:41:54,000 --> 00:42:01,320
those is to have a fully revised

00:41:57,570 --> 00:42:03,240
OpenStack if you desire that we're not

00:42:01,320 --> 00:42:08,430
quite there yet but that's a lot of the

00:42:03,240 --> 00:42:10,020
work GSS proxy also bears mentioning for

00:42:08,430 --> 00:42:13,530
adding additional privilege separation

00:42:10,020 --> 00:42:18,990
on top of the way credential handling

00:42:13,530 --> 00:42:21,810
works so if you as a sysadmin maybe

00:42:18,990 --> 00:42:23,640
don't want your service to have access

00:42:21,810 --> 00:42:25,680
to all of the possible credentials it

00:42:23,640 --> 00:42:27,990
could need it may be due access control

00:42:25,680 --> 00:42:31,910
on that you can spin up the GSS proxy

00:42:27,990 --> 00:42:33,870
and gass proxy will allow for that layer

00:42:31,910 --> 00:42:37,000
unfortunately seema's not here that's

00:42:33,870 --> 00:42:39,640
his project yes

00:42:37,000 --> 00:42:42,790
so the video of that is if you have a

00:42:39,640 --> 00:42:47,010
network place in service and generates

00:42:42,790 --> 00:42:47,010
wouldn't find the keys

00:42:48,950 --> 00:42:53,460
in another process yeah it is just

00:42:51,660 --> 00:42:55,950
everything yeah it's just a process

00:42:53,460 --> 00:42:58,590
process which contains all the keys that

00:42:55,950 --> 00:43:00,270
could be used if you're if the process

00:42:58,590 --> 00:43:01,740
that's doing authentication and

00:43:00,270 --> 00:43:05,270
encryption is compromised they can

00:43:01,740 --> 00:43:05,270
access the keys soon

00:43:06,410 --> 00:43:14,299
yeah I mean if you do that you're kind

00:43:09,380 --> 00:43:17,319
of sucky anyway as we mentioned mono TSS

00:43:14,299 --> 00:43:20,990
API for Apache instead of Martha curb

00:43:17,319 --> 00:43:25,059
and yes we would like some help on the

00:43:20,990 --> 00:43:27,470
browser UX it's there it's not great

00:43:25,059 --> 00:43:28,609
yeah so with one last one we didn't want

00:43:27,470 --> 00:43:31,640
to talk about is the work we've done

00:43:28,609 --> 00:43:35,630
without actually other guy who's not

00:43:31,640 --> 00:43:37,910
here Miko's wrote some integration for

00:43:35,630 --> 00:43:39,950
open connect VPN and this is actually a

00:43:37,910 --> 00:43:43,280
really fascinating integration because

00:43:39,950 --> 00:43:45,829
it uses the proxy support which ex that

00:43:43,280 --> 00:43:48,109
allows you to proxy the Kerberos

00:43:45,829 --> 00:43:50,390
requests through the VPN server to your

00:43:48,109 --> 00:43:53,260
KCC to get back a ticket and then you

00:43:50,390 --> 00:43:56,150
can use the ticket to log into the VPN

00:43:53,260 --> 00:43:57,530
okay so what this means is then you

00:43:56,150 --> 00:43:59,569
actually have a single sign of

00:43:57,530 --> 00:44:02,119
experience even outside the

00:43:59,569 --> 00:44:04,339
infrastructure you can get your Kerberos

00:44:02,119 --> 00:44:07,280
ticket signing to the VPN do all of your

00:44:04,339 --> 00:44:09,490
stuff now with one single one and we're

00:44:07,280 --> 00:44:11,660
working on trying to figure out how to

00:44:09,490 --> 00:44:14,510
make that work in the desktop

00:44:11,660 --> 00:44:16,579
environment in conjunction with sssd so

00:44:14,510 --> 00:44:18,680
that you can login with this SSD get you

00:44:16,579 --> 00:44:20,359
to get automatically and automatically

00:44:18,680 --> 00:44:23,180
reconnect

00:44:20,359 --> 00:44:25,759
that works with the HTTPS stuff rates

00:44:23,180 --> 00:44:28,329
yeah so the reason that this support was

00:44:25,759 --> 00:44:31,880
able to come in so quickly was because

00:44:28,329 --> 00:44:34,489
this doesn't mess SL VPN and it all uses

00:44:31,880 --> 00:44:36,200
each yes and we already have the spin

00:44:34,489 --> 00:44:37,759
echo mechanism for doing Kerberos so

00:44:36,200 --> 00:44:39,589
they just added support for that and

00:44:37,759 --> 00:44:41,720
then they had it support for proxy in

00:44:39,589 --> 00:44:43,999
the Kerberos packets so it's a really

00:44:41,720 --> 00:44:49,849
smooth little environments and it bears

00:44:43,999 --> 00:44:54,099
play okay that's it for our content any

00:44:49,849 --> 00:44:54,099
questions we didn't get to go for it

00:45:12,490 --> 00:45:18,700
if you're interested in just kerberos

00:45:15,960 --> 00:45:20,980
gssapi is probably the easiest to go

00:45:18,700 --> 00:45:23,680
with but there are additional

00:45:20,980 --> 00:45:25,540
considerations for inter all in the

00:45:23,680 --> 00:45:28,119
future that may cause you to go one way

00:45:25,540 --> 00:45:31,240
or the other both will work if you need

00:45:28,119 --> 00:45:34,500
also if you need more Kerberos specific

00:45:31,240 --> 00:45:37,840
that we bits to use the technical term

00:45:34,500 --> 00:45:41,950
gssapi will offer you a few more fiddly

00:45:37,840 --> 00:45:44,290
bits and there's also a bunch of gssapi

00:45:41,950 --> 00:45:48,700
extensions that further more stuff

00:45:44,290 --> 00:45:52,510
whereas em work sasal was is more of a

00:45:48,700 --> 00:45:55,150
generic like okay I have lists of

00:45:52,510 --> 00:45:58,600
mechanisms that I support you know it

00:45:55,150 --> 00:46:04,810
may be gssapi like that makes for gssapi

00:45:58,600 --> 00:46:08,400
I may support you no passwords and then

00:46:04,810 --> 00:46:08,400
the circum like support only wanted

00:46:11,550 --> 00:46:33,750
on the server side if you are pretty

00:46:27,340 --> 00:46:36,750
sure that with no not much ability and

00:46:33,750 --> 00:46:36,750
server

00:46:37,380 --> 00:46:44,349
to address your specific use case for

00:46:40,650 --> 00:46:46,089
gssapi with the key tab you can either

00:46:44,349 --> 00:46:48,670
call a specific function for acquiring

00:46:46,089 --> 00:46:51,279
credentials with a key tab or set an

00:46:48,670 --> 00:46:53,680
environment variable and then for sasal

00:46:51,279 --> 00:46:55,509
you would I believe add a line to the

00:46:53,680 --> 00:47:00,940
sasal config file and it would pick it

00:46:55,509 --> 00:47:02,710
up sure we're actually out of time but

00:47:00,940 --> 00:47:06,690
if you have questions we will stand in

00:47:02,710 --> 00:47:06,690

YouTube URL: https://www.youtube.com/watch?v=a8ZDabUpqZU


