Title: Flock 2015 - Atomic and container deployment best practices - Michael P. McGrath
Publication date: 2015-08-26
Playlist: Flock 2015
Description: 
	In this session Mike McGrath will discuss new deployment options available when utilizing containers and Atomic. Session-goers will come away with best practices around rolling upgrades and red/black deployments. Red/black deployments in particular are well suited to a devops agile environment. Understanding how to deploy hundreds of times a day is a great way for a company to stay competitive.
Captions: 
	00:00:02,300 --> 00:00:06,690
okay hi everybody my name is mike

00:00:05,279 --> 00:00:09,510
mcgrath i'm here to talk to you today

00:00:06,690 --> 00:00:11,849
about containers atomic and best

00:00:09,510 --> 00:00:13,620
practices there's been a few atomic

00:00:11,849 --> 00:00:15,870
talks already today I'm hoping this

00:00:13,620 --> 00:00:17,430
won't be a lot of repeat tried to go to

00:00:15,870 --> 00:00:19,320
them but I'll emphasize some of the

00:00:17,430 --> 00:00:21,869
important pieces for those that aren't

00:00:19,320 --> 00:00:24,570
that familiar and also try to just

00:00:21,869 --> 00:00:26,880
emphasize the pieces that are kind of

00:00:24,570 --> 00:00:29,550
complicated and tricky to to understand

00:00:26,880 --> 00:00:32,009
so my background I read had his x-ray I

00:00:29,550 --> 00:00:33,630
started as a volunteer and the fedora

00:00:32,009 --> 00:00:37,340
maybe I was with a fedora infrastructure

00:00:33,630 --> 00:00:39,899
lead back when dinosaurs door only heard

00:00:37,340 --> 00:00:41,280
the thin red had hired me out to do that

00:00:39,899 --> 00:00:43,950
full time because they figured though

00:00:41,280 --> 00:00:45,750
that's probably good idea and from there

00:00:43,950 --> 00:00:48,930
I went on to do open shift and so I left

00:00:45,750 --> 00:00:50,489
for to go to open shift and leftover

00:00:48,930 --> 00:00:52,920
ship to come work on a topic and now I'm

00:00:50,489 --> 00:00:54,629
here to talk to you about open shift and

00:00:52,920 --> 00:00:56,879
fedora so you can't really you can't

00:00:54,629 --> 00:00:58,949
really escape your past and it turns out

00:00:56,879 --> 00:01:01,379
so the topics today or just to go over

00:00:58,949 --> 00:01:02,940
the atomic universe you know we talked

00:01:01,379 --> 00:01:05,250
about containers on the set of stuff and

00:01:02,940 --> 00:01:07,470
just kind of redhead to be a bit we've

00:01:05,250 --> 00:01:09,150
got next section I'm just atomic and

00:01:07,470 --> 00:01:10,680
containers just kind of make sure we're

00:01:09,150 --> 00:01:12,510
all speaking same language and

00:01:10,680 --> 00:01:14,100
understanding with this stuff but it and

00:01:12,510 --> 00:01:16,950
I'm going to go over some deployment

00:01:14,100 --> 00:01:18,869
models and best practices these are more

00:01:16,950 --> 00:01:20,549
high-level but kind of help to help you

00:01:18,869 --> 00:01:21,600
better understand what you can do with

00:01:20,549 --> 00:01:22,200
containers when you're actually using

00:01:21,600 --> 00:01:24,630
them

00:01:22,200 --> 00:01:26,729
production environment and Ford why just

00:01:24,630 --> 00:01:32,549
a quick show of hands who here has ever

00:01:26,729 --> 00:01:35,100
tried docker or PCP it's a pretty good

00:01:32,549 --> 00:01:36,570
set of hands that's a joke I thought it

00:01:35,100 --> 00:01:40,920
was a funny joke that stole from Mitch

00:01:36,570 --> 00:01:42,869
Hedberg so let's look at the atomic

00:01:40,920 --> 00:01:44,520
universe so we kind of got two

00:01:42,869 --> 00:01:46,920
communities right now we're looking to

00:01:44,520 --> 00:01:48,899
better merge them or align them in the

00:01:46,920 --> 00:01:51,210
beginning of the atomic universe i was

00:01:48,899 --> 00:01:55,470
actually open shift and we want to

00:01:51,210 --> 00:01:57,509
create v1 and v2 v3 shift very recently

00:01:55,470 --> 00:01:59,520
and includes dr. Cooper Nettie's and all

00:01:57,509 --> 00:02:01,619
sort of stuff at the same time all that

00:01:59,520 --> 00:02:03,090
was going on we had this atomic project

00:02:01,619 --> 00:02:06,659
stuff going on in the background I've

00:02:03,090 --> 00:02:09,060
got a timeline of that and I took a good

00:02:06,659 --> 00:02:10,590
look at openshift is combining a lot of

00:02:09,060 --> 00:02:13,950
these components together for a full

00:02:10,590 --> 00:02:16,920
DevOps a view of things but atomic

00:02:13,950 --> 00:02:19,380
includes several pieces include not just

00:02:16,920 --> 00:02:20,790
the the containers and things there's a

00:02:19,380 --> 00:02:23,730
lot of little tools that will go into

00:02:20,790 --> 00:02:25,920
and a big part of the entire project is

00:02:23,730 --> 00:02:28,799
of course the atomic coast which today

00:02:25,920 --> 00:02:32,280
the time project or product atomic

00:02:28,799 --> 00:02:35,100
produces three different varieties of us

00:02:32,280 --> 00:02:37,139
actually four was kind of our target one

00:02:35,100 --> 00:02:38,700
of them obviously is out in fedora it's

00:02:37,139 --> 00:02:40,980
produced with the food or team I want

00:02:38,700 --> 00:02:42,720
people work on that we're going on two

00:02:40,980 --> 00:02:45,180
different releases sort of in the centos

00:02:42,720 --> 00:02:46,350
world one of them is exactly we would

00:02:45,180 --> 00:02:48,720
expect from sent us some sort of

00:02:46,350 --> 00:02:50,670
downstream build of the rav atomic those

00:02:48,720 --> 00:02:51,989
we're also looking at one that moves a

00:02:50,670 --> 00:02:54,299
little bit more quickly something that

00:02:51,989 --> 00:02:56,370
is a little bit more stable and fedora a

00:02:54,299 --> 00:03:00,090
little bit faster than Ralph

00:02:56,370 --> 00:03:01,110
Tomic host and you know that we're

00:03:00,090 --> 00:03:02,519
trying to get that daily because we

00:03:01,110 --> 00:03:05,310
think that's it I think that's a

00:03:02,519 --> 00:03:07,019
compelling thing to be doing so it tends

00:03:05,310 --> 00:03:09,150
to be a bit more leading it and some

00:03:07,019 --> 00:03:11,040
people invite and then obviously we've

00:03:09,150 --> 00:03:13,860
got wrote on the coast that's the thing

00:03:11,040 --> 00:03:15,390
that puts food on our table so it is a

00:03:13,860 --> 00:03:18,480
fully supported product with this part

00:03:15,390 --> 00:03:20,250
on the opposite side of that that tends

00:03:18,480 --> 00:03:21,480
to be our pads and it's kind of the

00:03:20,250 --> 00:03:23,489
reason that there's a lot of confusion

00:03:21,480 --> 00:03:26,129
at least internally a redhead about

00:03:23,489 --> 00:03:27,540
these things is because there's not

00:03:26,129 --> 00:03:30,569
really an apples to oranges comparison

00:03:27,540 --> 00:03:32,459
between what atomic private atomic is

00:03:30,569 --> 00:03:34,109
doing and what openshift is doing sure

00:03:32,459 --> 00:03:36,209
there's containers in both are both

00:03:34,109 --> 00:03:38,069
using docker they're both using Cooper

00:03:36,209 --> 00:03:40,019
natives but they are very different and

00:03:38,069 --> 00:03:42,989
so over shift is redheads pull on pads

00:03:40,019 --> 00:03:44,310
and the open shift guys produce three

00:03:42,989 --> 00:03:46,019
different varieties right now one is

00:03:44,310 --> 00:03:49,319
open shift online which you can actually

00:03:46,019 --> 00:03:51,450
just go to WWE chef calm if you have an

00:03:49,319 --> 00:03:53,040
email address or you want to go invent

00:03:51,450 --> 00:03:54,780
some thinking the address you can that's

00:03:53,040 --> 00:03:56,430
what you think you better slug in you

00:03:54,780 --> 00:03:58,799
get some apps you can build them it's

00:03:56,430 --> 00:04:01,260
great grayble service we have over ship

00:03:58,799 --> 00:04:02,569
enterprise which is more a redhead

00:04:01,260 --> 00:04:04,799
traditional business model lawyer

00:04:02,569 --> 00:04:06,599
customer can come in download the bits

00:04:04,799 --> 00:04:09,540
install them on their system and run

00:04:06,599 --> 00:04:11,519
them all nice and easy and then there's

00:04:09,540 --> 00:04:13,590
the upstream community project which is

00:04:11,519 --> 00:04:15,269
open shipped origin which mostly exists

00:04:13,590 --> 00:04:16,919
out of github but it has all those

00:04:15,269 --> 00:04:18,720
pieces that you expect if you want to

00:04:16,919 --> 00:04:22,950
build this on your own on something like

00:04:18,720 --> 00:04:24,870
fedora or Santos so at the summit we

00:04:22,950 --> 00:04:26,520
announced this new project or who I

00:04:24,870 --> 00:04:29,039
guess new product called atomic

00:04:26,520 --> 00:04:32,190
enterprise platform and it kind of sits

00:04:29,039 --> 00:04:33,660
in in between these two pieces and the

00:04:32,190 --> 00:04:35,280
way that I election stripes is a type of

00:04:33,660 --> 00:04:36,990
coast I think most people get it's a

00:04:35,280 --> 00:04:38,660
containers based operating system and

00:04:36,990 --> 00:04:41,910
i'll talk more about the details of that

00:04:38,660 --> 00:04:42,490
but it's got da Kirk Rueter days and a

00:04:41,910 --> 00:04:44,229
few other things

00:04:42,490 --> 00:04:46,509
you need to get going with the

00:04:44,229 --> 00:04:48,610
deployment atomic enterprise platform

00:04:46,509 --> 00:04:51,849
takes those things and automates a lot

00:04:48,610 --> 00:04:54,280
of pieces of it it allows for a larger

00:04:51,849 --> 00:04:56,710
deployment of atomic oats that can be

00:04:54,280 --> 00:04:58,210
across several different systems as all

00:04:56,710 --> 00:04:59,740
the stuff you need to tie stuff in and

00:04:58,210 --> 00:05:02,500
have a whole bunch of automated pieces

00:04:59,740 --> 00:05:04,120
the thing is different the thing that

00:05:02,500 --> 00:05:06,610
goes further with open shift is it as

00:05:04,120 --> 00:05:08,139
those development features and so on the

00:05:06,610 --> 00:05:09,639
developer site if you have developers

00:05:08,139 --> 00:05:13,210
that are we pushing to prod or if you

00:05:09,639 --> 00:05:15,250
have want to do a full DevOps model that

00:05:13,210 --> 00:05:16,599
we recommend you go straight to open

00:05:15,250 --> 00:05:18,900
shift it's got all the build tools it's

00:05:16,599 --> 00:05:21,340
got integrated CI all this other stuff

00:05:18,900 --> 00:05:22,810
and so over the next hour besides minute

00:05:21,340 --> 00:05:25,120
kind of dig into each of these more

00:05:22,810 --> 00:05:28,000
closely so atomic coast as I mentioned

00:05:25,120 --> 00:05:29,080
and all this stuff is very new so it's

00:05:28,000 --> 00:05:32,050
understand why there would be some

00:05:29,080 --> 00:05:34,900
confusion as we launched the product

00:05:32,050 --> 00:05:36,639
atomic back in april 2014 which is

00:05:34,900 --> 00:05:38,560
really not that long ago in the grand

00:05:36,639 --> 00:05:41,380
scheme of things by the following

00:05:38,560 --> 00:05:43,840
December it had been put into fedora 21

00:05:41,380 --> 00:05:45,610
and then following March which was just

00:05:43,840 --> 00:05:48,430
a few months ago was when we g8 the

00:05:45,610 --> 00:05:52,120
product now a redhead timeline that is

00:05:48,430 --> 00:05:53,560
that is lightning fast but you know as

00:05:52,120 --> 00:05:55,449
you're going through it controls red

00:05:53,560 --> 00:05:57,159
kaotica at the time and so the big thing

00:05:55,449 --> 00:05:59,789
about a topic host that's very different

00:05:57,159 --> 00:06:02,259
from a standard raw house is that it's

00:05:59,789 --> 00:06:05,229
it's got this core piece of technology

00:06:02,259 --> 00:06:06,909
called LS tree and this is Colin guy

00:06:05,229 --> 00:06:08,229
that's a invented Oh history what that

00:06:06,909 --> 00:06:11,590
was supposed to be here today by seen

00:06:08,229 --> 00:06:13,599
collar supposed to hear that's right so

00:06:11,590 --> 00:06:15,069
comment I was tree and I stood for quote

00:06:13,599 --> 00:06:17,630
he was gracious enough and gave me this

00:06:15,069 --> 00:06:19,250
book OS tree was born to help

00:06:17,630 --> 00:06:21,710
they continues delivery model for

00:06:19,250 --> 00:06:23,900
operating systems one can be a lot more

00:06:21,710 --> 00:06:26,030
confident about updating systems if one

00:06:23,900 --> 00:06:28,220
knows that a reliable rollback system is

00:06:26,030 --> 00:06:30,260
always available and this is really the

00:06:28,220 --> 00:06:31,490
core the core feature of atomic Coast

00:06:30,260 --> 00:06:33,800
and I guess your stupid show of hands

00:06:31,490 --> 00:06:37,130
who here has installed a booted or try

00:06:33,800 --> 00:06:39,200
it in atomic hostess okay most everybody

00:06:37,130 --> 00:06:40,370
not everybody so I'll go over some of

00:06:39,200 --> 00:06:41,900
the differences here this is this slide

00:06:40,370 --> 00:06:44,090
right here really just outlines it so

00:06:41,900 --> 00:06:45,770
you put your atomic oh so you log into

00:06:44,090 --> 00:06:47,360
it if you thi p.m. update you're going

00:06:45,770 --> 00:06:49,700
to get a command not found Young is not

00:06:47,360 --> 00:06:52,070
on there it's not because we replaced it

00:06:49,700 --> 00:06:54,740
with something neither is because it's

00:06:52,070 --> 00:06:56,690
not on it's largely a read-only file

00:06:54,740 --> 00:06:58,550
system you cannot edit packages to it

00:06:56,690 --> 00:07:00,530
very easily there's a lot of things that

00:06:58,550 --> 00:07:02,030
you could you blocked in the whole point

00:07:00,530 --> 00:07:03,680
of the atomic hoses you're supposed to

00:07:02,030 --> 00:07:05,690
be running things in containers so the

00:07:03,680 --> 00:07:09,050
containers of the way you'll bring down

00:07:05,690 --> 00:07:10,280
new features and things and as day will

00:07:09,050 --> 00:07:11,750
be quick to point out you know a lot of

00:07:10,280 --> 00:07:13,940
the advanced features you might need

00:07:11,750 --> 00:07:16,100
from in administrative point view would

00:07:13,940 --> 00:07:18,170
be done in SPC's but even with all that

00:07:16,100 --> 00:07:19,820
you're still not going to be logging in

00:07:18,170 --> 00:07:23,060
and making a lot of changes to the

00:07:19,820 --> 00:07:24,950
underlying file system however there if

00:07:23,060 --> 00:07:26,990
you do want to do an upgrade downgrade

00:07:24,950 --> 00:07:28,130
you use atomic host upgrade which will

00:07:26,990 --> 00:07:30,650
pull down all the information you need

00:07:28,130 --> 00:07:31,970
get the system ready but then it'll sit

00:07:30,650 --> 00:07:34,250
there you'll still be on the old version

00:07:31,970 --> 00:07:36,830
until you reboot into the new version

00:07:34,250 --> 00:07:38,180
and atomic ho stroll back then let you

00:07:36,830 --> 00:07:40,610
will go back to the previous version

00:07:38,180 --> 00:07:41,810
again a reboot is required so this is a

00:07:40,610 --> 00:07:44,840
very drastically different way of

00:07:41,810 --> 00:07:46,250
managing system but as you look at you

00:07:44,840 --> 00:07:48,110
know your your cattle versus pets

00:07:46,250 --> 00:07:49,370
argument it's a really great cattle

00:07:48,110 --> 00:07:51,170
argument that you can just put up these

00:07:49,370 --> 00:07:52,550
new systems bring them up and down you

00:07:51,170 --> 00:07:54,530
know that what state they're in because

00:07:52,550 --> 00:07:58,220
they're all identical minus the actual

00:07:54,530 --> 00:08:01,210
configuration pieces so that's how you

00:07:58,220 --> 00:08:01,210
get a price platform

00:08:01,780 --> 00:08:06,389
send a little bit of this air blows

00:08:03,820 --> 00:08:08,440
perhaps here is pretty close though so

00:08:06,389 --> 00:08:09,760
atopic enterprise platform when you want

00:08:08,440 --> 00:08:14,080
to install this and get several nodes

00:08:09,760 --> 00:08:17,350
across has from the usability point of

00:08:14,080 --> 00:08:19,120
view has an OC client tool and cockpit

00:08:17,350 --> 00:08:22,810
tool and both of those go through the

00:08:19,120 --> 00:08:24,520
API to contact an atomic master and the

00:08:22,810 --> 00:08:26,020
entire master is a coup Brunetti toast

00:08:24,520 --> 00:08:27,190
these are typically run on their own so

00:08:26,020 --> 00:08:28,570
it's got Cooper Nettie's and that's ed

00:08:27,190 --> 00:08:31,120
whatever you would need to have in there

00:08:28,570 --> 00:08:33,969
along with Sky dns for service discovery

00:08:31,120 --> 00:08:35,860
and it also has a few extra API pieces

00:08:33,969 --> 00:08:38,080
that we use for deployments and some of

00:08:35,860 --> 00:08:40,690
these other items so you use typically

00:08:38,080 --> 00:08:43,240
users cockpit terms so you use OC tools

00:08:40,690 --> 00:08:45,790
to they contact the atomic master and to

00:08:43,240 --> 00:08:47,460
tell it what to do I that want the

00:08:45,790 --> 00:08:49,750
atomic mass would walk to your note farm

00:08:47,460 --> 00:08:51,370
of the atomic motors and this would be

00:08:49,750 --> 00:08:52,990
the bulk of your environment if you're

00:08:51,370 --> 00:08:54,250
running anything significant you have

00:08:52,990 --> 00:08:56,110
lots of the time it builds up there

00:08:54,250 --> 00:08:58,270
running containers all over the place

00:08:56,110 --> 00:09:01,089
and all these atomic notes we actually

00:08:58,270 --> 00:09:03,640
ship a few containers already that help

00:09:01,089 --> 00:09:05,020
integrate this environment so in time

00:09:03,640 --> 00:09:07,690
again press platform environment we have

00:09:05,020 --> 00:09:10,330
an HTTP router which is based on H a

00:09:07,690 --> 00:09:11,980
proxy we have a docker registry that's

00:09:10,330 --> 00:09:13,150
integrated so obviously if you have a

00:09:11,980 --> 00:09:15,400
large environment you don't want to

00:09:13,150 --> 00:09:18,700
constantly go out to a red hair industry

00:09:15,400 --> 00:09:20,260
or a doctor registry to download things

00:09:18,700 --> 00:09:21,580
you may want to local mirror that's what

00:09:20,260 --> 00:09:23,710
you can think of as your local near that

00:09:21,580 --> 00:09:27,400
dr. registry and then we have a special

00:09:23,710 --> 00:09:29,710
deployment config that allows you to do

00:09:27,400 --> 00:09:31,210
specialized deployment artifacts which a

00:09:29,710 --> 00:09:33,280
lot of this stuff is actually going to

00:09:31,210 --> 00:09:35,080
emerge back into Cooper Nettie's we try

00:09:33,280 --> 00:09:36,910
to be good citizens so that's that we'll

00:09:35,080 --> 00:09:38,710
all end up in coover Nettie's and we'll

00:09:36,910 --> 00:09:43,810
need these specialized container for it

00:09:38,710 --> 00:09:46,209
anymore okish it adds a bit to them so

00:09:43,810 --> 00:09:49,089
there's an integrated comply with

00:09:46,209 --> 00:09:51,129
that adds an application view of your of

00:09:49,089 --> 00:09:53,230
what you're trying to do and it also

00:09:51,129 --> 00:09:55,240
adds some additional API calls to the

00:09:53,230 --> 00:09:57,519
master and then should the two big ones

00:09:55,240 --> 00:09:59,290
that really the big differences are we

00:09:57,519 --> 00:10:01,119
have continuous integration that is

00:09:59,290 --> 00:10:03,100
built in that runs inside the platform

00:10:01,119 --> 00:10:05,220
itself and there's also a source to

00:10:03,100 --> 00:10:07,480
image builder so if you're a developer

00:10:05,220 --> 00:10:08,949
you have some sort of code of some kind

00:10:07,480 --> 00:10:11,110
of you want to get this up well built

00:10:08,949 --> 00:10:12,670
and tested open ships has all the tools

00:10:11,110 --> 00:10:15,249
you need to do that out of the box

00:10:12,670 --> 00:10:17,019
whereas atomic enterprise platform kind

00:10:15,249 --> 00:10:19,029
of assumed that someone else is doing

00:10:17,019 --> 00:10:20,619
that already either your developers have

00:10:19,029 --> 00:10:21,910
created an image and sent it to you or

00:10:20,619 --> 00:10:24,220
that you would be building it somehow

00:10:21,910 --> 00:10:26,319
outside the system and also a lot of

00:10:24,220 --> 00:10:28,179
people already have CEOs opium they may

00:10:26,319 --> 00:10:29,499
not want to move to open shift plus it

00:10:28,179 --> 00:10:32,769
feels be coming to complicate to

00:10:29,499 --> 00:10:35,139
maintain so before I move on any

00:10:32,769 --> 00:10:36,999
questions just generally about what open

00:10:35,139 --> 00:10:39,730
shift does is targeted at dev ops stuff

00:10:36,999 --> 00:10:42,100
what atomic enterprise is targeted at

00:10:39,730 --> 00:10:44,439
which is a continual orchestration for

00:10:42,100 --> 00:10:49,329
traditional operators or what an atomic

00:10:44,439 --> 00:10:51,220
post as in questions okay so let's move

00:10:49,329 --> 00:10:52,629
on to atomic in containers this is some

00:10:51,220 --> 00:10:55,089
one-on-one stuff to make sure we're

00:10:52,629 --> 00:10:58,509
talking about the same thing here it

00:10:55,089 --> 00:10:59,799
should go pretty quick so we're you

00:10:58,509 --> 00:11:01,990
going to container I something typically

00:10:59,799 --> 00:11:03,879
take something like an application you

00:11:01,990 --> 00:11:06,220
throw it into your docker container and

00:11:03,879 --> 00:11:07,869
and then you write and that can be moved

00:11:06,220 --> 00:11:10,360
around this where that is it's very

00:11:07,869 --> 00:11:12,279
simple we typically talk about this in

00:11:10,360 --> 00:11:13,990
terms of microservices meaning that it's

00:11:12,279 --> 00:11:16,259
not generally a good practice to be

00:11:13,990 --> 00:11:20,170
cramming this whole large stack with

00:11:16,259 --> 00:11:22,029
your HTTP server and PHP in there and

00:11:20,170 --> 00:11:23,649
you're also going to throw my sequel in

00:11:22,029 --> 00:11:26,110
there and memcache you don't tend to

00:11:23,649 --> 00:11:27,129
want a large monolithic container

00:11:26,110 --> 00:11:29,439
because they don't scale very well

00:11:27,129 --> 00:11:30,970
they're kind of unruly to work with and

00:11:29,439 --> 00:11:32,139
so the idea is with containers you can

00:11:30,970 --> 00:11:34,179
break them all out into small pieces

00:11:32,139 --> 00:11:37,130
here and there a lot of good best

00:11:34,179 --> 00:11:39,150
practice I think mostly

00:11:37,130 --> 00:11:42,720
when you go into an actual container

00:11:39,150 --> 00:11:44,400
build which is taking what that previous

00:11:42,720 --> 00:11:46,800
life was actually doing it in some sort

00:11:44,400 --> 00:11:48,450
of reproducible fashion you'll do that

00:11:46,800 --> 00:11:51,330
with a docker file and this is just a

00:11:48,450 --> 00:11:53,400
sample docker file if you have any

00:11:51,330 --> 00:11:55,290
experience building kickstart files and

00:11:53,400 --> 00:11:58,530
I found that building a docker file uses

00:11:55,290 --> 00:12:01,410
that same part of your brain to build

00:11:58,530 --> 00:12:02,610
these files one thing is some people get

00:12:01,410 --> 00:12:04,740
confused about is that you can actually

00:12:02,610 --> 00:12:06,990
boot an image make some changes to it

00:12:04,740 --> 00:12:08,430
and run docker commit I didn't really

00:12:06,990 --> 00:12:11,190
recommend against that you lose the

00:12:08,430 --> 00:12:12,510
reproducibility the analogy for those of

00:12:11,190 --> 00:12:14,130
us that are packagers would be we're

00:12:12,510 --> 00:12:15,750
just met if you could actually log into

00:12:14,130 --> 00:12:17,880
the build server whilst building and

00:12:15,750 --> 00:12:21,390
make changes log out you'd give Dennis a

00:12:17,880 --> 00:12:23,010
heart attack so generally just want to

00:12:21,390 --> 00:12:26,070
use the docker file suit to build these

00:12:23,010 --> 00:12:28,140
these images and so the I'll just point

00:12:26,070 --> 00:12:30,810
out with Miss disposal but basic food or

00:12:28,140 --> 00:12:34,650
image in it runs yeoman slice GP it Ruby

00:12:30,810 --> 00:12:36,510
I've added some local files and things

00:12:34,650 --> 00:12:38,640
I'm going to expose port 80 nice and

00:12:36,510 --> 00:12:40,590
easy then I'm going to build the image

00:12:38,640 --> 00:12:42,810
which it goes from fedora pulls the

00:12:40,590 --> 00:12:44,280
pieces down build what it needs to and

00:12:42,810 --> 00:12:47,220
I'm going to tag the image so that's the

00:12:44,280 --> 00:12:49,080
basic workflow tagging specify what

00:12:47,220 --> 00:12:51,510
registry is going to go to and that will

00:12:49,080 --> 00:12:54,080
throw it into an actual registry which

00:12:51,510 --> 00:12:57,150
brings me to what a registry actually is

00:12:54,080 --> 00:12:58,410
so if you haven't looked at it only I

00:12:57,150 --> 00:13:00,330
think most of us probably looked at dr.

00:12:58,410 --> 00:13:03,120
I oh it's just a registry there are some

00:13:00,330 --> 00:13:05,700
room them redhead has its own certified

00:13:03,120 --> 00:13:07,500
registry we also welcome to run your

00:13:05,700 --> 00:13:09,210
private registry which I suspect most

00:13:07,500 --> 00:13:11,130
people will be doing in any sort of

00:13:09,210 --> 00:13:13,380
enterprise environment just sort of take

00:13:11,130 --> 00:13:15,420
these images hopefully certified images

00:13:13,380 --> 00:13:17,520
from Red Hat but if you want us to go

00:13:15,420 --> 00:13:19,110
hungry you can also use the doc Rio and

00:13:17,520 --> 00:13:21,990
it is and then

00:13:19,110 --> 00:13:23,760
those as well but the rent has certified

00:13:21,990 --> 00:13:25,260
images are at least groomed and things

00:13:23,760 --> 00:13:26,940
like that and I think fodor's going

00:13:25,260 --> 00:13:29,430
through a lot of the forums try that too

00:13:26,940 --> 00:13:31,350
the real trick is that on the upstream

00:13:29,430 --> 00:13:33,420
docker images there's not really any

00:13:31,350 --> 00:13:34,950
certification process they've got some

00:13:33,420 --> 00:13:36,329
official images and things but it's

00:13:34,950 --> 00:13:38,250
pretty wild west out there which is

00:13:36,329 --> 00:13:39,600
great you can upload whatever images you

00:13:38,250 --> 00:13:41,519
want to up there but at the same time

00:13:39,600 --> 00:13:42,839
that makes it you got to be careful all

00:13:41,519 --> 00:13:46,950
you're consuming from that upstream

00:13:42,839 --> 00:13:48,630
place and so basically I've done here is

00:13:46,950 --> 00:13:50,700
just you can once it's in the register

00:13:48,630 --> 00:13:53,250
you can run a docker run on any one of

00:13:50,700 --> 00:13:54,779
your atomic hopes it will pull down the

00:13:53,250 --> 00:13:58,200
image from your registry and go from

00:13:54,779 --> 00:13:59,910
there now we're right in this process is

00:13:58,200 --> 00:14:01,920
described how to build a docker

00:13:59,910 --> 00:14:03,570
container I've described how to upload

00:14:01,920 --> 00:14:05,100
the doctor container we've explained

00:14:03,570 --> 00:14:07,649
that dr. run runs the docker container

00:14:05,100 --> 00:14:09,870
the next problem is what happens if this

00:14:07,649 --> 00:14:12,000
how highly successful and you're running

00:14:09,870 --> 00:14:14,040
tons of docker containers that's where

00:14:12,000 --> 00:14:15,839
Cooper Nettie's comes in and so cougar

00:14:14,040 --> 00:14:17,310
Nettie's is an orchestration framework

00:14:15,839 --> 00:14:18,930
that allows you to describe an

00:14:17,310 --> 00:14:25,320
application and all of its micro

00:14:18,930 --> 00:14:28,290
components and pull it basically

00:14:25,320 --> 00:14:30,300
orchestrate several several applications

00:14:28,290 --> 00:14:32,430
each that could have several different

00:14:30,300 --> 00:14:33,600
containers allows you to just tell it

00:14:32,430 --> 00:14:35,130
what to do and it will do its best to

00:14:33,600 --> 00:14:37,230
make sure the environment looks like

00:14:35,130 --> 00:14:39,870
that and I've got an example in here but

00:14:37,230 --> 00:14:42,480
karuna is has some delton routing it has

00:14:39,870 --> 00:14:45,000
easy ways to expose these images it has

00:14:42,480 --> 00:14:46,230
waste autorecover it's got pretty much

00:14:45,000 --> 00:14:49,290
all the things you're going to need to

00:14:46,230 --> 00:14:51,930
run lots of containers in an individual

00:14:49,290 --> 00:14:54,240
environment and crewman value if you're

00:14:51,930 --> 00:14:57,500
not familiar was built by google google

00:14:54,240 --> 00:15:01,170
has their their level 7 Google Wizards

00:14:57,500 --> 00:15:03,089
building communities and go under

00:15:01,170 --> 00:15:04,350
development of all of the components

00:15:03,089 --> 00:15:07,079
that we're going to talk about today

00:15:04,350 --> 00:15:08,700
kuber Nettie's is the newest and it

00:15:07,079 --> 00:15:11,700
might be the most exciting part of this

00:15:08,700 --> 00:15:13,709
it's going at a rapid changes but it's

00:15:11,700 --> 00:15:15,779
all very good stuff it's been a very

00:15:13,709 --> 00:15:16,889
exciting to work with and so just a

00:15:15,779 --> 00:15:18,600
quick example of what you could expect

00:15:16,889 --> 00:15:20,610
from Cooper Nettie's after you describe

00:15:18,600 --> 00:15:22,260
your application to it is that it has

00:15:20,610 --> 00:15:25,050
this whole health check system and so if

00:15:22,260 --> 00:15:27,779
you have a specific container that goes

00:15:25,050 --> 00:15:29,550
bad and Cooper days are called pods a

00:15:27,779 --> 00:15:31,199
pod could have several containers but

00:15:29,550 --> 00:15:33,029
generally conceptually if you're not

00:15:31,199 --> 00:15:35,790
familiar with it just think of a pot as

00:15:33,029 --> 00:15:37,709
a container that's fine so the point of

00:15:35,790 --> 00:15:39,329
your pods goes bad Cooper neighs will

00:15:37,709 --> 00:15:41,370
notice that try to kill the pod and

00:15:39,329 --> 00:15:42,870
bring it up in a new location and this

00:15:41,370 --> 00:15:45,360
is exactly what you would expect to have

00:15:42,870 --> 00:15:46,980
happen from a monitoring system it's

00:15:45,360 --> 00:15:49,050
just that it's built into Cooper Danny

00:15:46,980 --> 00:15:50,940
so it's not like you have to have some

00:15:49,050 --> 00:15:53,100
separate monitoring system checking out

00:15:50,940 --> 00:15:54,360
all your containers and trying to decide

00:15:53,100 --> 00:15:56,820
if they're up or not Cooper days is

00:15:54,360 --> 00:15:58,320
doing that for you and the thing it's

00:15:56,820 --> 00:15:59,870
nice is when you settle this stuff up

00:15:58,320 --> 00:16:02,820
you've actually told Cooper Nettie's

00:15:59,870 --> 00:16:05,070
through a series of JSON files what your

00:16:02,820 --> 00:16:07,019
application or several applications are

00:16:05,070 --> 00:16:09,180
supposed to look like and so you've got

00:16:07,019 --> 00:16:13,140
this is a just a snippet from a sample

00:16:09,180 --> 00:16:15,540
service that pulls the WordPress is HTTP

00:16:13,140 --> 00:16:17,220
down you can see that it's got the names

00:16:15,540 --> 00:16:19,199
up it tells you what ports are going to

00:16:17,220 --> 00:16:21,510
be in there it's a very basic language

00:16:19,199 --> 00:16:24,720
that is really easy to control and

00:16:21,510 --> 00:16:28,470
manage with something like it but it's a

00:16:24,720 --> 00:16:30,209
really great little interface so the

00:16:28,470 --> 00:16:32,760
next step of this before I get too much

00:16:30,209 --> 00:16:36,660
further is I want to really nail home

00:16:32,760 --> 00:16:40,920
this link of the container workflow

00:16:36,660 --> 00:16:43,980
Tomic workflow how how much they have in

00:16:40,920 --> 00:16:45,690
common but also in comparison compare

00:16:43,980 --> 00:16:48,120
those workflows to the traditional young

00:16:45,690 --> 00:16:49,620
workflow and so if you're going to look

00:16:48,120 --> 00:16:50,970
at an update scenario or deployment

00:16:49,620 --> 00:16:54,060
scenario which is what we're going to go

00:16:50,970 --> 00:16:57,029
over next young basically it is how you

00:16:54,060 --> 00:17:01,259
get from version 12 version 2 there's

00:16:57,029 --> 00:17:04,409
time to go to secular documents so let's

00:17:01,259 --> 00:17:07,049
look at these deployment scenarios like

00:17:04,409 --> 00:17:08,789
I said version 12 version 2 very simple

00:17:07,049 --> 00:17:10,799
so let's look at a traditional sort of

00:17:08,789 --> 00:17:12,750
yum update scenario you've got your set

00:17:10,799 --> 00:17:15,510
of servers off and some server farm in

00:17:12,750 --> 00:17:18,059
the middle of nowhere and everything is

00:17:15,510 --> 00:17:20,130
running fine and a developer comes up

00:17:18,059 --> 00:17:21,839
and says hey we want to we've got some

00:17:20,130 --> 00:17:23,789
new code to deploy and so with the yell

00:17:21,839 --> 00:17:25,439
update in a traditional apartment and

00:17:23,789 --> 00:17:27,209
even have orchestration doing this but

00:17:25,439 --> 00:17:29,400
still somehow in here what's going to

00:17:27,209 --> 00:17:31,140
happen is you're going to run yum update

00:17:29,400 --> 00:17:32,610
on your systems maybe all the same time

00:17:31,140 --> 00:17:34,380
and one at a time but it's going to look

00:17:32,610 --> 00:17:36,150
like this so you've got some server and

00:17:34,380 --> 00:17:37,770
transition you're going to on you mutt

00:17:36,150 --> 00:17:39,179
date and boom it will be out version 2

00:17:37,770 --> 00:17:40,650
and then you'll keep going until the

00:17:39,179 --> 00:17:42,630
rest of your servers are all in version

00:17:40,650 --> 00:17:45,030
2 and then you're uptick you're ready to

00:17:42,630 --> 00:17:46,950
go now this is the way I've done things

00:17:45,030 --> 00:17:49,230
for over a decade if they most people

00:17:46,950 --> 00:17:50,940
are familiar with this workflow but the

00:17:49,230 --> 00:17:53,490
problem is what i call the traditional

00:17:50,940 --> 00:17:55,169
failure and maybe a Christmas Eves have

00:17:53,490 --> 00:17:58,049
been have been ruined by these sorts of

00:17:55,169 --> 00:17:59,490
failure so what the real issue is what

00:17:58,049 --> 00:18:02,340
happens if you're in the middle of the

00:17:59,490 --> 00:18:04,260
deployment like this and the one of the

00:18:02,340 --> 00:18:06,870
systems you're working on yum update or

00:18:04,260 --> 00:18:08,309
whatever you're deployed code is going

00:18:06,870 --> 00:18:11,280
out what if that fails what do you do

00:18:08,309 --> 00:18:12,840
your options are not very good rolling

00:18:11,280 --> 00:18:15,029
bad car pm's I mean

00:18:12,840 --> 00:18:18,630
but I always experienced that to be

00:18:15,029 --> 00:18:19,980
appreciating solution or what do we know

00:18:18,630 --> 00:18:21,900
what if you have to get a developer on

00:18:19,980 --> 00:18:23,970
the horn to say hey you know we're doing

00:18:21,900 --> 00:18:27,299
this update for whatever reason this one

00:18:23,970 --> 00:18:28,620
still had old libraries on it and it's

00:18:27,299 --> 00:18:32,100
very confused we don't know what to do

00:18:28,620 --> 00:18:33,360
at this point now we're getting database

00:18:32,100 --> 00:18:35,429
calls that are bad all this other stuff

00:18:33,360 --> 00:18:37,679
you're really in a bad cell that you're

00:18:35,429 --> 00:18:39,179
really in a bad situation we're if

00:18:37,679 --> 00:18:43,200
something goes wrong with the

00:18:39,179 --> 00:18:44,850
traditional update cycle so let's take a

00:18:43,200 --> 00:18:46,260
look at red black appointments I think

00:18:44,850 --> 00:18:47,760
these are also basically a concrete blue

00:18:46,260 --> 00:18:48,840
it may be similar you have the

00:18:47,760 --> 00:18:51,179
difference between two I think they're

00:18:48,840 --> 00:18:52,890
about the same I first started learning

00:18:51,179 --> 00:18:54,809
about red light deployments from netflix

00:18:52,890 --> 00:18:57,330
this is how they do things it's very

00:18:54,809 --> 00:18:58,950
fancy so let's say you've got your look

00:18:57,330 --> 00:19:00,659
bouncer up and everything's running your

00:18:58,950 --> 00:19:02,610
own version to your developer shows up

00:19:00,659 --> 00:19:05,490
and says hey I've got this great new

00:19:02,610 --> 00:19:07,500
code to deploy please deploy it for me

00:19:05,490 --> 00:19:09,419
and so this deployment force a lot

00:19:07,500 --> 00:19:11,159
differently in that when you start

00:19:09,419 --> 00:19:13,409
bringing up version to you bring up an

00:19:11,159 --> 00:19:15,570
identical side scenario version two

00:19:13,409 --> 00:19:18,450
until it's entirely up and running

00:19:15,570 --> 00:19:20,669
during this entire time everything on

00:19:18,450 --> 00:19:22,590
the production side your deployments

00:19:20,669 --> 00:19:24,539
your local says we're also for serving

00:19:22,590 --> 00:19:26,490
version one your users are completely

00:19:24,539 --> 00:19:28,500
unaware that version 2 is even out there

00:19:26,490 --> 00:19:30,210
anywhere and this allows you to have

00:19:28,500 --> 00:19:31,860
your QA going and test you can have your

00:19:30,210 --> 00:19:33,539
developers test you can go through and

00:19:31,860 --> 00:19:36,120
test a whole lot of scenarios to make

00:19:33,539 --> 00:19:37,590
sure that version 2 is ready to go and

00:19:36,120 --> 00:19:39,929
when everybody gives a thumbs up you

00:19:37,590 --> 00:19:42,090
flip the switch and now everybody now

00:19:39,929 --> 00:19:43,649
your users are using version 2 and you

00:19:42,090 --> 00:19:45,779
shut down version 1 and you're good to

00:19:43,649 --> 00:19:46,330
go this is a really great way of making

00:19:45,779 --> 00:19:47,890
sure that

00:19:46,330 --> 00:19:50,289
the environment is going to function as

00:19:47,890 --> 00:19:52,990
best as it can but there are still

00:19:50,289 --> 00:19:54,760
submissions so one of them if for

00:19:52,990 --> 00:19:57,070
example is well I've seen this done with

00:19:54,760 --> 00:19:59,260
DNS and so you know if you or even a

00:19:57,070 --> 00:20:00,640
really lazy or poorly managed load

00:19:59,260 --> 00:20:02,590
balancer so let's just say you do try to

00:20:00,640 --> 00:20:04,600
do this with DNS you got your version 1

00:20:02,590 --> 00:20:06,850
and version 2 up you've done all of your

00:20:04,600 --> 00:20:09,730
testing again on virgin too and you say

00:20:06,850 --> 00:20:11,710
hey we're ready to go so hopefully

00:20:09,730 --> 00:20:14,289
someone the previous day has said okay

00:20:11,710 --> 00:20:17,769
if we're going to dns change will set

00:20:14,289 --> 00:20:19,690
the TTL to 60 seconds and for a little

00:20:17,769 --> 00:20:22,000
bit will serve both both of them at the

00:20:19,690 --> 00:20:23,649
same time and once that 60 seconds is up

00:20:22,000 --> 00:20:26,139
the theory is that version 1 will no

00:20:23,649 --> 00:20:28,450
longer be used because DNS is amazing

00:20:26,139 --> 00:20:30,039
since it's not dns is terrible and if

00:20:28,450 --> 00:20:32,019
anyone has ever been in a scenario we've

00:20:30,039 --> 00:20:33,700
done this you've definitely seen that

00:20:32,019 --> 00:20:35,590
even after that 60 seconds version one

00:20:33,700 --> 00:20:39,130
will continue to get served sometimes

00:20:35,590 --> 00:20:40,690
for hours afterwards and one of the big

00:20:39,130 --> 00:20:43,539
reasons for that is because the white

00:20:40,690 --> 00:20:46,960
clients choose to implement dns and name

00:20:43,539 --> 00:20:48,159
resolution is not not as standards I

00:20:46,960 --> 00:20:49,690
think we would all like some of them

00:20:48,159 --> 00:20:51,549
don't bother looking at the TTL they

00:20:49,690 --> 00:20:54,130
don't look up the DNS entry again very

00:20:51,549 --> 00:20:55,929
often so if you have you know some sort

00:20:54,130 --> 00:20:57,880
of mobile app that is contacting your

00:20:55,929 --> 00:21:00,100
application it may very well not realize

00:20:57,880 --> 00:21:02,139
that the changes happen so this is just

00:21:00,100 --> 00:21:04,000
one of the pitfalls of a red-black

00:21:02,139 --> 00:21:06,610
deployment but there are good pros and

00:21:04,000 --> 00:21:08,260
cons right so some of the pros this will

00:21:06,610 --> 00:21:09,820
catch production users or production

00:21:08,260 --> 00:21:12,100
shoes before the users ever hit it

00:21:09,820 --> 00:21:13,990
that's always nice there's no rollback

00:21:12,100 --> 00:21:15,580
require really because if version 2 is

00:21:13,990 --> 00:21:18,250
having an issue just shut the thing down

00:21:15,580 --> 00:21:19,990
version 1 was untouched the entire time

00:21:18,250 --> 00:21:22,149
you're not really going to be in an

00:21:19,990 --> 00:21:24,590
unknown state we have half your servers

00:21:22,149 --> 00:21:26,330
on bruin half on version 2 and

00:21:24,590 --> 00:21:29,690
even that died halfway through bitter

00:21:26,330 --> 00:21:32,390
and some completely unknown state the

00:21:29,690 --> 00:21:33,919
konso are also a lot of this it's

00:21:32,390 --> 00:21:34,730
expensive right at some point time

00:21:33,919 --> 00:21:36,710
you're going to have to double your

00:21:34,730 --> 00:21:38,720
infrastructure you can do this during an

00:21:36,710 --> 00:21:40,789
off time if you want but you pretty much

00:21:38,720 --> 00:21:42,230
still have to plan for a peak time or at

00:21:40,789 --> 00:21:43,909
least downtime because if there's some

00:21:42,230 --> 00:21:46,600
sort of zero day or emergency deployment

00:21:43,909 --> 00:21:49,130
if you're using the bulk of your

00:21:46,600 --> 00:21:51,860
environment you either have to choose to

00:21:49,130 --> 00:21:53,630
take some of it down and take users off

00:21:51,860 --> 00:21:55,610
or you just have to take the whole thing

00:21:53,630 --> 00:21:57,610
down and do the update that way which

00:21:55,610 --> 00:21:59,809
they can take a long time to do

00:21:57,610 --> 00:22:00,980
monitoring is also very tricky in this

00:21:59,809 --> 00:22:02,870
scenario depending on how you're doing

00:22:00,980 --> 00:22:04,610
monitoring you may have temporarily

00:22:02,870 --> 00:22:06,320
brought up double the amount of

00:22:04,610 --> 00:22:08,240
environments that you have the host

00:22:06,320 --> 00:22:09,380
names and things and it's only going to

00:22:08,240 --> 00:22:10,940
bring it down you have to remove them

00:22:09,380 --> 00:22:12,740
depending on your monitoring solution

00:22:10,940 --> 00:22:14,779
and you're moving house can be tricky

00:22:12,740 --> 00:22:17,419
especially the removing part you need to

00:22:14,779 --> 00:22:18,799
automate it the router flipping the

00:22:17,419 --> 00:22:21,020
whole thing when you're on version one

00:22:18,799 --> 00:22:22,340
you need to move the version to making

00:22:21,020 --> 00:22:23,809
sure that that actually functions right

00:22:22,340 --> 00:22:25,490
especially if you want to try to do that

00:22:23,809 --> 00:22:27,409
with some sort of bleed over where

00:22:25,490 --> 00:22:29,120
customers are getting cut off mid

00:22:27,409 --> 00:22:30,980
transaction or anything they're going to

00:22:29,120 --> 00:22:34,610
move and that can be tricky to do

00:22:30,980 --> 00:22:36,710
depending on the router using also

00:22:34,610 --> 00:22:38,090
depending on what sort of storage

00:22:36,710 --> 00:22:39,470
reusing if you don't have some sort of

00:22:38,090 --> 00:22:41,990
shared storage file system and you're

00:22:39,470 --> 00:22:43,340
using local cache or local storage on

00:22:41,990 --> 00:22:44,510
the systems that can also be very tricky

00:22:43,340 --> 00:22:46,940
especially if these are entirely

00:22:44,510 --> 00:22:49,070
different environments are entirely

00:22:46,940 --> 00:22:51,590
different hoses and finding scale issues

00:22:49,070 --> 00:22:53,870
can be tricky you know your key we can

00:22:51,590 --> 00:22:55,450
do the best job that they can but if you

00:22:53,870 --> 00:22:58,630
bring that new version up and there's a

00:22:55,450 --> 00:23:00,590
slow algorithm of some kind or you've

00:22:58,630 --> 00:23:02,799
forgotten some sort of index or

00:23:00,590 --> 00:23:05,330
something it's going to be painful to

00:23:02,799 --> 00:23:07,429
check down because it's everything is

00:23:05,330 --> 00:23:09,770
there they're getting the it's getting

00:23:07,429 --> 00:23:11,120
the load that it is getting the full

00:23:09,770 --> 00:23:12,029
load of the environments into your

00:23:11,120 --> 00:23:15,330
options are

00:23:12,029 --> 00:23:17,429
go back for a little bit distribute so

00:23:15,330 --> 00:23:18,960
let's take a look at rolling deployments

00:23:17,429 --> 00:23:22,679
and this is what I have typically done

00:23:18,960 --> 00:23:24,389
in the past at least before cloud wrong

00:23:22,679 --> 00:23:25,739
deployment so basically you have your

00:23:24,389 --> 00:23:27,779
low cons are up and everything is

00:23:25,739 --> 00:23:29,759
serving fine your pesky developer comes

00:23:27,779 --> 00:23:31,919
in and says hey I'm a virgin so you're

00:23:29,759 --> 00:23:34,289
releasing a burden and so you take one

00:23:31,919 --> 00:23:36,719
of the one of the systems out of your

00:23:34,289 --> 00:23:38,580
low bouncer you updated and now its own

00:23:36,719 --> 00:23:40,799
version too and you can move on to the

00:23:38,580 --> 00:23:42,509
next one to hurt one you can even start

00:23:40,799 --> 00:23:44,969
going more at a time and do some sort of

00:23:42,509 --> 00:23:46,320
increase ever-increasing number if you

00:23:44,969 --> 00:23:48,779
have a huge environment or several

00:23:46,320 --> 00:23:51,839
thousand votes you do 12 for you know we

00:23:48,779 --> 00:23:53,729
go up to 180 or 200 at a time until

00:23:51,839 --> 00:23:56,729
eventually everything is on version 2

00:23:53,729 --> 00:23:58,139
now if you go back and look this is a

00:23:56,729 --> 00:24:00,059
very awesome because this won't always

00:23:58,139 --> 00:24:01,019
work with a lot of applications are you

00:24:00,059 --> 00:24:02,969
saying you're certainly in an

00:24:01,019 --> 00:24:05,639
environment I think at this point in my

00:24:02,969 --> 00:24:07,320
example where cell users were getting

00:24:05,639 --> 00:24:09,659
version to some use we're getting

00:24:07,320 --> 00:24:11,580
version one for many types of updates

00:24:09,659 --> 00:24:14,279
that's totally fine especially cosmetic

00:24:11,580 --> 00:24:16,499
updates and things like that so there

00:24:14,279 --> 00:24:18,239
certainly several good options in terms

00:24:16,499 --> 00:24:20,460
of doing rolling appointment there's a

00:24:18,239 --> 00:24:22,440
lot of cons as well so let's take a look

00:24:20,460 --> 00:24:24,059
the pros this is the cheapest way to do

00:24:22,440 --> 00:24:26,369
the planes you don't need to have double

00:24:24,059 --> 00:24:28,049
your capacity of any point I'm you can

00:24:26,369 --> 00:24:29,759
also typically find performance issues

00:24:28,049 --> 00:24:31,499
early because all these systems are

00:24:29,759 --> 00:24:34,979
getting performing or a production level

00:24:31,499 --> 00:24:37,019
load so any of those early systems if

00:24:34,979 --> 00:24:38,460
they start falling over you can halt the

00:24:37,019 --> 00:24:40,909
deployment to take a look at what's

00:24:38,460 --> 00:24:42,989
going on instead of continuing too long

00:24:40,909 --> 00:24:44,489
this is a pretty common workflow I have

00:24:42,989 --> 00:24:46,679
a bet most of us have tried something

00:24:44,489 --> 00:24:48,239
like this in the past with an update

00:24:46,679 --> 00:24:49,859
this works really well with local

00:24:48,239 --> 00:24:51,179
storage if you have storage on the

00:24:49,859 --> 00:24:52,499
actual systems without some sort of

00:24:51,179 --> 00:24:55,289
shared environment you can basically

00:24:52,499 --> 00:24:57,179
reuse the hosts that are there this is

00:24:55,289 --> 00:24:58,200
really great for gigantic environments

00:24:57,179 --> 00:25:00,299
where you need to do just a few at a

00:24:58,200 --> 00:25:02,340
time obviously i wouldn't expect google

00:25:00,299 --> 00:25:04,730
to have a complete copy of their

00:25:02,340 --> 00:25:07,380
at any point in time maybe they do

00:25:04,730 --> 00:25:08,940
they're still out of concept so I

00:25:07,380 --> 00:25:11,880
mentioned the unknown state concerns

00:25:08,940 --> 00:25:15,570
we've got situations where some users

00:25:11,880 --> 00:25:18,029
may be serving getting code for multiple

00:25:15,570 --> 00:25:20,640
versions of the environment you can use

00:25:18,029 --> 00:25:22,380
sticky sessions for this if you want but

00:25:20,640 --> 00:25:24,450
you know it's there's a consideration

00:25:22,380 --> 00:25:26,190
air you need to again if you do get

00:25:24,450 --> 00:25:27,809
through our way through the deployments

00:25:26,190 --> 00:25:29,159
and decide that this is not working out

00:25:27,809 --> 00:25:32,130
then obviously you need to do a rollback

00:25:29,159 --> 00:25:33,450
of some kind and so you're going to have

00:25:32,130 --> 00:25:35,340
to go back and find a versions that have

00:25:33,450 --> 00:25:37,320
been updated and going back to version 1

00:25:35,340 --> 00:25:39,480
this also requires some sort of

00:25:37,320 --> 00:25:41,100
integrated health check tapping on each

00:25:39,480 --> 00:25:42,480
one of the individual hose which is

00:25:41,100 --> 00:25:43,710
always a good idea what you're going to

00:25:42,480 --> 00:25:46,080
want to make sure that the health check

00:25:43,710 --> 00:25:47,190
is working very well so you know for

00:25:46,080 --> 00:25:49,380
example if this was a jboss application

00:25:47,190 --> 00:25:51,870
you can't just check to make sure that

00:25:49,380 --> 00:25:52,980
the TCP connection is open because jboss

00:25:51,870 --> 00:25:54,690
will take a little bit longer to

00:25:52,980 --> 00:25:56,309
actually deploy the application so you

00:25:54,690 --> 00:25:57,539
actually have to have some sort of

00:25:56,309 --> 00:25:59,190
health check deck and then go in and

00:25:57,539 --> 00:26:01,649
make sure that the actual node will

00:25:59,190 --> 00:26:02,909
respond with 200 s instead of errors and

00:26:01,649 --> 00:26:04,890
there's a lot of ways to do it but it's

00:26:02,909 --> 00:26:06,330
something you've got to be careful so

00:26:04,890 --> 00:26:08,580
pros and cons you know different

00:26:06,330 --> 00:26:11,190
different applications but two perfectly

00:26:08,580 --> 00:26:14,190
valid deployment scenarios so the hard

00:26:11,190 --> 00:26:15,899
one data migrations so i would say i

00:26:14,190 --> 00:26:17,330
think the the data migration store has

00:26:15,899 --> 00:26:19,919
always been the hardest part for me

00:26:17,330 --> 00:26:21,840
especially with ownership to online so i

00:26:19,919 --> 00:26:24,210
can give you an example we went on team

00:26:21,840 --> 00:26:26,610
ran over online we would do new

00:26:24,210 --> 00:26:28,200
deployments i think and not in there i

00:26:26,610 --> 00:26:30,360
think that by the time i left we're

00:26:28,200 --> 00:26:33,630
doing about it a deployment one and a

00:26:30,360 --> 00:26:34,909
half times a week which is not the seven

00:26:33,630 --> 00:26:36,830
billion times neff with

00:26:34,909 --> 00:26:38,409
boys every day I wouldn't know but it's

00:26:36,830 --> 00:26:41,029
not bad for an enterprise company and

00:26:38,409 --> 00:26:42,590
the real trick is with data migrations

00:26:41,029 --> 00:26:44,509
because if you have any sort of update

00:26:42,590 --> 00:26:46,899
that requires some sort of schema change

00:26:44,509 --> 00:26:49,249
or data migration or anything like that

00:26:46,899 --> 00:26:51,080
there's this critical point in the

00:26:49,249 --> 00:26:53,389
upgrade way once you start doing that

00:26:51,080 --> 00:26:55,999
migration unless you had some sort of

00:26:53,389 --> 00:26:57,889
fallback plan which is awful very

00:26:55,999 --> 00:27:01,249
expensive to write if you're going to do

00:26:57,889 --> 00:27:02,450
some sort of D migration that if you

00:27:01,249 --> 00:27:03,799
find any errors at that point you kind

00:27:02,450 --> 00:27:07,220
of just have to power through and it's

00:27:03,799 --> 00:27:09,049
rough my recommendation for those of you

00:27:07,220 --> 00:27:11,479
looking at doing the sort of scenario in

00:27:09,049 --> 00:27:13,700
your environment is to decouple data

00:27:11,479 --> 00:27:15,710
migration updates from regular updates

00:27:13,700 --> 00:27:17,960
and so and a lot of enterprises do

00:27:15,710 --> 00:27:21,109
updates once every three months or every

00:27:17,960 --> 00:27:23,509
three years but afraid to whatever it

00:27:21,109 --> 00:27:25,580
actually is if you had some sort of data

00:27:23,509 --> 00:27:27,049
migration in that i recommend decoupling

00:27:25,580 --> 00:27:28,669
that part of the migration of doing a

00:27:27,049 --> 00:27:30,619
separately there's a lot of reasons for

00:27:28,669 --> 00:27:31,909
that one of which is that one which is

00:27:30,619 --> 00:27:34,159
because damn immigrations can take a

00:27:31,909 --> 00:27:35,779
long time but also it's easier to help

00:27:34,159 --> 00:27:38,779
know when something goes wrong so if

00:27:35,779 --> 00:27:40,729
you've got you know 25 patches that

00:27:38,779 --> 00:27:43,009
you're going to deploy and one of them

00:27:40,729 --> 00:27:45,229
is up causing a some sort of performance

00:27:43,009 --> 00:27:46,970
issue which one wasn't right you do

00:27:45,229 --> 00:27:49,190
typically want to break these up so you

00:27:46,970 --> 00:27:52,789
can help find things like that and so

00:27:49,190 --> 00:27:54,559
the tub illustrate this is in a scenario

00:27:52,789 --> 00:27:56,929
let's go back to the rolling update

00:27:54,559 --> 00:27:58,669
scenario if you have some of your

00:27:56,929 --> 00:28:00,830
systems on version to its own version

00:27:58,669 --> 00:28:03,859
one you got shut down which version of

00:28:00,830 --> 00:28:06,979
the schema is expecting that just it can

00:28:03,859 --> 00:28:07,340
be kind of a pain to to go through and

00:28:06,979 --> 00:28:11,840
try

00:28:07,340 --> 00:28:13,130
figure out so I just want to I've got a

00:28:11,840 --> 00:28:14,420
few more things here and I want an open

00:28:13,130 --> 00:28:17,990
up for questions we'll see if there are

00:28:14,420 --> 00:28:20,630
long so just we covered the atomic and

00:28:17,990 --> 00:28:22,490
ocean ecosystem I know this is still

00:28:20,630 --> 00:28:25,040
very confusing i hope i have i have

00:28:22,490 --> 00:28:27,110
alleviated some of it worth ocean of

00:28:25,040 --> 00:28:28,640
atomic are very coupled to each other

00:28:27,110 --> 00:28:31,160
because of the common container

00:28:28,640 --> 00:28:32,770
background i think that over shift is

00:28:31,160 --> 00:28:35,600
kind of not more considered part of the

00:28:32,770 --> 00:28:38,390
product atomic container ecosystem so

00:28:35,600 --> 00:28:39,830
that's always good we cover a little bit

00:28:38,390 --> 00:28:42,860
about docker containers and cooper

00:28:39,830 --> 00:28:46,370
Nettie's i wanted to put a demo together

00:28:42,860 --> 00:28:49,070
but I know better so there's also plenty

00:28:46,370 --> 00:28:51,230
of options out there there's a lot of

00:28:49,070 --> 00:28:53,090
videos hopefully those of us in this

00:28:51,230 --> 00:28:54,620
release if they want to have the

00:28:53,090 --> 00:28:56,120
wherewithal to go do that sort of thing

00:28:54,620 --> 00:28:57,920
and we've covered at least two

00:28:56,120 --> 00:29:00,500
deployment scenarios with red black and

00:28:57,920 --> 00:29:02,300
rolling deployment now there's also

00:29:00,500 --> 00:29:04,040
several others you should go out and see

00:29:02,300 --> 00:29:05,570
and compare with what your applications

00:29:04,040 --> 00:29:07,880
look like and see which one's work for

00:29:05,570 --> 00:29:09,200
you but i do have four challenges for

00:29:07,880 --> 00:29:10,640
you if you're just getting your feet wet

00:29:09,200 --> 00:29:13,760
and you're not sure where to start and

00:29:10,640 --> 00:29:15,590
what to do next challenge number one i

00:29:13,760 --> 00:29:17,270
would encourage all of you to go back

00:29:15,590 --> 00:29:18,800
find some critical component of your

00:29:17,270 --> 00:29:20,420
extra infrastructure just some small

00:29:18,800 --> 00:29:22,340
micro servers but something that's in

00:29:20,420 --> 00:29:23,480
production something is out there and

00:29:22,340 --> 00:29:25,730
just container eyes that thing

00:29:23,480 --> 00:29:27,230
containerized try to get it out to

00:29:25,730 --> 00:29:28,820
production in that environment you can

00:29:27,230 --> 00:29:30,140
leave you both up if you want to if

00:29:28,820 --> 00:29:31,550
you've got to bind reload bouncing put

00:29:30,140 --> 00:29:33,110
some of them behind contain something up

00:29:31,550 --> 00:29:34,580
it's a good way to get the feet way to

00:29:33,110 --> 00:29:36,500
get other people feeling with what's

00:29:34,580 --> 00:29:38,330
going on there it's also a very

00:29:36,500 --> 00:29:39,920
non-intimidating way to learn how your

00:29:38,330 --> 00:29:42,860
monitoring is going to work or in most

00:29:39,920 --> 00:29:44,390
cases not work with containers and try

00:29:42,860 --> 00:29:45,260
to find some of those policy-driven

00:29:44,390 --> 00:29:47,270
items

00:29:45,260 --> 00:29:50,030
you change while you move to a

00:29:47,270 --> 00:29:51,940
containerized environment challenge

00:29:50,030 --> 00:29:54,470
number two once you have that deployment

00:29:51,940 --> 00:29:56,360
once you have that small piece deployed

00:29:54,470 --> 00:29:58,550
try to get enough that you have an extra

00:29:56,360 --> 00:30:02,090
application deployed on to an atomic

00:29:58,550 --> 00:30:03,860
host so go out you can run a tongue you

00:30:02,090 --> 00:30:06,410
can run docker out without any sort of

00:30:03,860 --> 00:30:08,060
redheads operating system atomic coaster

00:30:06,410 --> 00:30:10,190
otherwise but try out the atomic host do

00:30:08,060 --> 00:30:12,110
it that way then once you have enough

00:30:10,190 --> 00:30:14,840
containers to warmth a full application

00:30:12,110 --> 00:30:16,370
go try kuru Nettie's you can actually

00:30:14,840 --> 00:30:17,660
get a supported version of Cooper

00:30:16,370 --> 00:30:21,350
Nettie's with the time posting about but

00:30:17,660 --> 00:30:22,790
if you're feeling up to it you can host

00:30:21,350 --> 00:30:25,250
drive community version and go that way

00:30:22,790 --> 00:30:26,780
and once you have kumon Eddie's deployed

00:30:25,250 --> 00:30:29,690
then go and take that next step then

00:30:26,780 --> 00:30:33,730
we'll get atomic the time project tongue

00:30:29,690 --> 00:30:35,570
Enterprise Linux or open shift and so

00:30:33,730 --> 00:30:36,830
remember just you know if you're trying

00:30:35,570 --> 00:30:39,680
to figure out which one is right for you

00:30:36,830 --> 00:30:41,300
if you have developers that are going to

00:30:39,680 --> 00:30:44,270
be pushing to prod or you have two

00:30:41,300 --> 00:30:46,250
numbers they want to add CI to an hour

00:30:44,270 --> 00:30:48,050
Oh stuff integrated builds get woken

00:30:46,250 --> 00:30:49,400
sure to try then maybe the first place

00:30:48,050 --> 00:30:51,920
you wanted to look anyway just in case

00:30:49,400 --> 00:30:53,630
but if you haven't have integrated see I

00:30:51,920 --> 00:30:55,700
already elsewhere in your environment

00:30:53,630 --> 00:30:58,100
and you have a very strong line between

00:30:55,700 --> 00:30:59,660
your developers and your production

00:30:58,100 --> 00:31:02,240
people or perhaps you're in the finance

00:30:59,660 --> 00:31:03,890
industry it would be illegal to for your

00:31:02,240 --> 00:31:05,840
developers to push a broad take a look

00:31:03,890 --> 00:31:07,700
at atomic enterprise platform and they

00:31:05,840 --> 00:31:09,380
do what it needs for you and so with

00:31:07,700 --> 00:31:14,890
that I'll stop and I'll see if there's

00:31:09,380 --> 00:31:14,890
any questions from anyone yes

00:31:16,190 --> 00:31:21,659
openshift online okay so all the

00:31:18,779 --> 00:31:24,059
online is still in v2 and so we're

00:31:21,659 --> 00:31:27,359
working hard to get v3 out if you're

00:31:24,059 --> 00:31:28,649
wondering why be three so in the past we

00:31:27,359 --> 00:31:29,820
had done over ship the line first and

00:31:28,649 --> 00:31:33,299
that was where everything when we

00:31:29,820 --> 00:31:34,590
flipped it for v3 because we had a lot

00:31:33,299 --> 00:31:36,299
of customers and people that wanted to

00:31:34,590 --> 00:31:38,789
get dr. environments out as best they

00:31:36,299 --> 00:31:42,599
could and believe it or not it's the

00:31:38,789 --> 00:31:44,789
hard parts of v3 after enterprise are

00:31:42,599 --> 00:31:46,950
things like integrating with origin like

00:31:44,789 --> 00:31:48,539
we have signal Simon with origin and the

00:31:46,950 --> 00:31:51,359
big one is building so we have a full-on

00:31:48,539 --> 00:31:53,159
credit card billing provider that takes

00:31:51,359 --> 00:31:54,450
a lot longer to get ready and so we

00:31:53,159 --> 00:31:56,969
didn't want to block the enterprise

00:31:54,450 --> 00:31:57,869
release but I would expect that you know

00:31:56,969 --> 00:31:59,339
probably in the next several months

00:31:57,869 --> 00:32:01,559
we'll have something out there would be

00:31:59,339 --> 00:32:03,599
a beta they can go out and try the

00:32:01,559 --> 00:32:06,029
overshift online team does have a ton

00:32:03,599 --> 00:32:07,979
mechanic our hosts out there running

00:32:06,029 --> 00:32:09,989
production but they're not supporting

00:32:07,979 --> 00:32:11,129
the actual openshift install though

00:32:09,989 --> 00:32:12,809
there are more on things like the

00:32:11,129 --> 00:32:17,570
reverse proxy servers and some of those

00:32:12,809 --> 00:32:17,570
other dependency pieces

00:32:19,760 --> 00:32:28,150
yes best practices or ideas of how to

00:32:26,060 --> 00:32:33,020
split up traditional attitudes

00:32:28,150 --> 00:32:38,270
microservices or I mean obviously that's

00:32:33,020 --> 00:32:41,750
what like you mentioned you know put a

00:32:38,270 --> 00:32:44,150
web server the family circle on the same

00:32:41,750 --> 00:32:49,820
container let's put that up and there's

00:32:44,150 --> 00:32:52,160
some way so yeah I think so there's not

00:32:49,820 --> 00:32:54,320
a definitive guide or anything if you're

00:32:52,160 --> 00:32:56,270
up to writing an o'reilly book or like

00:32:54,320 --> 00:32:58,940
paper i'm sure they would be amenable to

00:32:56,270 --> 00:33:02,030
that I think that the issues that we run

00:32:58,940 --> 00:33:03,590
into are a lot of new or green field

00:33:02,030 --> 00:33:05,060
deployments are being done in doctor

00:33:03,590 --> 00:33:08,180
it's much easier to start from scratch

00:33:05,060 --> 00:33:09,710
than it is director of it having said

00:33:08,180 --> 00:33:11,120
that if you're just getting started and

00:33:09,710 --> 00:33:12,800
you're serious about using docker

00:33:11,120 --> 00:33:14,630
containers and there are actually a lot

00:33:12,800 --> 00:33:16,750
of really good reasons to move to dr.

00:33:14,630 --> 00:33:19,040
besides trying to utilize microservices

00:33:16,750 --> 00:33:20,480
if you're in the environment I mean you

00:33:19,040 --> 00:33:23,780
know monolithic container is not going

00:33:20,480 --> 00:33:25,520
to kill you especially if you're in this

00:33:23,780 --> 00:33:27,080
has come up sometimes from customers in

00:33:25,520 --> 00:33:29,750
the education field where you have a

00:33:27,080 --> 00:33:32,000
centralized IT department and several

00:33:29,750 --> 00:33:33,830
other ancillary groups that are kind of

00:33:32,000 --> 00:33:35,840
handing applications over it's a lot

00:33:33,830 --> 00:33:37,250
easier to use consume that via container

00:33:35,840 --> 00:33:39,260
if you can convince them to put it in

00:33:37,250 --> 00:33:40,840
even if it is in the model it a lot

00:33:39,260 --> 00:33:42,850
easier to pass

00:33:40,840 --> 00:33:43,750
is a virtual machine especially since

00:33:42,850 --> 00:33:47,110
sometimes you won't even have access

00:33:43,750 --> 00:33:49,419
into the virtual machine but in terms of

00:33:47,110 --> 00:33:50,710
the best practices there is a little bit

00:33:49,419 --> 00:33:53,350
longer you can do if you want to go look

00:33:50,710 --> 00:33:54,940
at pods I touched on this briefly but

00:33:53,350 --> 00:33:56,590
you are going to be in scenarios where

00:33:54,940 --> 00:33:58,929
for example you may want to have some

00:33:56,590 --> 00:34:01,360
sort of application server that needs to

00:33:58,929 --> 00:34:04,809
be co-located or at least very have very

00:34:01,360 --> 00:34:06,970
fast access to a mem cache server maybe

00:34:04,809 --> 00:34:08,290
maybe you have 2000 beach there you know

00:34:06,970 --> 00:34:10,510
they don't share their cash for

00:34:08,290 --> 00:34:12,790
everything with Cooper days and pods you

00:34:10,510 --> 00:34:14,770
can have multiple individual containers

00:34:12,790 --> 00:34:17,589
that exist on the same system on that

00:34:14,770 --> 00:34:20,109
same pod and so there really are some

00:34:17,589 --> 00:34:29,249
exotic application scenarios you can

00:34:20,109 --> 00:34:32,759
look at which is helpful yes mattresses

00:34:29,249 --> 00:34:32,759
is huge

00:34:48,619 --> 00:34:56,609
that's not yeah it's a really good

00:34:54,570 --> 00:34:59,010
example net so what's what's the

00:34:56,609 --> 00:35:01,079
difference between two really big bare

00:34:59,010 --> 00:35:03,960
metal servers running a quote

00:35:01,079 --> 00:35:05,160
microservice virtual versus you know one

00:35:03,960 --> 00:35:08,099
hundred tiny ones that are spread across

00:35:05,160 --> 00:35:12,810
south of them in terms of preventing the

00:35:08,099 --> 00:35:15,810
cluster I think you could look at I

00:35:12,810 --> 00:35:18,329
I think a big part of that is properly

00:35:15,810 --> 00:35:20,220
controlling the application definitions

00:35:18,329 --> 00:35:22,170
at the cooper Nettie's layer so at a

00:35:20,220 --> 00:35:24,560
minimum you have a you have a history

00:35:22,170 --> 00:35:28,109
and you have some sort of control point

00:35:24,560 --> 00:35:30,510
control point that now is in terms of

00:35:28,109 --> 00:35:31,980
running lots of these little pods I

00:35:30,510 --> 00:35:37,200
think that you know if your end up in

00:35:31,980 --> 00:35:39,060
the trick is that this isn't going to

00:35:37,200 --> 00:35:40,619
solve problems that other environments

00:35:39,060 --> 00:35:42,660
would have so if you've got a lot of big

00:35:40,619 --> 00:35:44,250
rock in your virtual machine environment

00:35:42,660 --> 00:35:46,050
for example and you don't make any

00:35:44,250 --> 00:35:47,849
policy changes you may end up with the

00:35:46,050 --> 00:35:50,400
same situation in containers because it

00:35:47,849 --> 00:35:53,910
doesn't solve those kind of problems but

00:35:50,400 --> 00:35:56,430
if you as an operator or as even as a

00:35:53,910 --> 00:35:59,310
developer if the developers the owning

00:35:56,430 --> 00:36:00,540
these application definitions you should

00:35:59,310 --> 00:36:02,670
be okay with something like Cooper days

00:36:00,540 --> 00:36:04,349
because you can always destroy the

00:36:02,670 --> 00:36:05,970
application you know it's not like these

00:36:04,349 --> 00:36:08,430
these pauses going to be left over or

00:36:05,970 --> 00:36:12,630
you're not going to end up with sort of

00:36:08,430 --> 00:36:14,430
orphaned virtual machines and so I think

00:36:12,630 --> 00:36:16,319
that they're there the tools themselves

00:36:14,430 --> 00:36:17,690
will help alleviate some of that at

00:36:16,319 --> 00:36:19,130
least I think

00:36:17,690 --> 00:36:21,170
you're going to say Cooper has like

00:36:19,130 --> 00:36:23,750
seeds if you if you want your thoughts

00:36:21,170 --> 00:36:27,230
through your application withdrawal you

00:36:23,750 --> 00:36:29,630
couldn't anyways you know that instance

00:36:27,230 --> 00:36:34,970
Atlantic you know if you need to take

00:36:29,630 --> 00:36:37,760
all those locations for sale

00:36:34,970 --> 00:36:40,600
you know make sure it gets rid of all so

00:36:37,760 --> 00:36:40,600
you don't have to worry about

00:36:42,890 --> 00:36:47,070
and does 10 crew béarnaise does tend to

00:36:45,570 --> 00:36:50,430
be smart but like i said it's also the

00:36:47,070 --> 00:36:52,890
newest piece of this so don't go expect

00:36:50,430 --> 00:36:56,250
in the world yet but it is it isn't Lisa

00:36:52,890 --> 00:37:01,910
portable and that has put their full GSS

00:36:56,250 --> 00:37:05,210
support behind it so you mentioned that

00:37:01,910 --> 00:37:05,210
break here

00:37:05,310 --> 00:37:12,240
you manage a user base watering or like

00:37:08,410 --> 00:37:14,770
what so yeah so I'll give you an example

00:37:12,240 --> 00:37:17,650
zabbix was a big monitoring tool that we

00:37:14,770 --> 00:37:19,300
used and open short online and so let's

00:37:17,650 --> 00:37:20,350
just you know typically we wanted let's

00:37:19,300 --> 00:37:23,260
just say you want to check and make sure

00:37:20,350 --> 00:37:25,119
that ACP is running so you've got a pin

00:37:23,260 --> 00:37:26,770
to check you've got two ports that you

00:37:25,119 --> 00:37:29,530
want to make sure running one make sure

00:37:26,770 --> 00:37:31,000
that the ssl certificate is not expired

00:37:29,530 --> 00:37:33,550
you want to make sure it's responding

00:37:31,000 --> 00:37:37,869
with a certain amount of time and so to

00:37:33,550 --> 00:37:39,670
do that you can on a traditional virtual

00:37:37,869 --> 00:37:40,750
machine that's all very simply just run

00:37:39,670 --> 00:37:42,700
a single command and you're good to go

00:37:40,750 --> 00:37:44,700
there yeah let's just say though that

00:37:42,700 --> 00:37:47,740
for example phone on a docker system or

00:37:44,700 --> 00:37:50,560
tacos you don't even have HTTP on that

00:37:47,740 --> 00:37:52,150
hose you may not have the tools to even

00:37:50,560 --> 00:37:53,770
do a curl against it they're just tools

00:37:52,150 --> 00:37:55,660
that might be missing so at that point

00:37:53,770 --> 00:37:58,570
you have to go into the docker container

00:37:55,660 --> 00:38:00,220
to get that information which is kind of

00:37:58,570 --> 00:38:02,020
like running everything in sugah okay so

00:38:00,220 --> 00:38:03,940
I can kind of conceptually understand

00:38:02,020 --> 00:38:05,560
that now I've got the sort of docker

00:38:03,940 --> 00:38:08,109
rapper command than they need to do to

00:38:05,560 --> 00:38:09,880
monitor things well depending on how you

00:38:08,109 --> 00:38:11,830
do this is MX has make that you can

00:38:09,880 --> 00:38:13,420
report back well inside that docker

00:38:11,830 --> 00:38:15,220
container it doesn't necessarily know

00:38:13,420 --> 00:38:17,470
what its host name is and so it's going

00:38:15,220 --> 00:38:19,119
to work back to that monitoring system

00:38:17,470 --> 00:38:21,280
with what it thinks it's docker

00:38:19,119 --> 00:38:22,690
container host name is mayra system not

00:38:21,280 --> 00:38:25,060
going to understand what that is at all

00:38:22,690 --> 00:38:27,040
and so it's just like it's this kind of

00:38:25,060 --> 00:38:29,920
slew of very practical problems that you

00:38:27,040 --> 00:38:31,480
can work through but if you if you don't

00:38:29,920 --> 00:38:33,160
know that they're coming that's going to

00:38:31,480 --> 00:38:34,990
add a lot of time to first deployment

00:38:33,160 --> 00:38:37,800
for you to learn all that stuff on our

00:38:34,990 --> 00:38:37,800
so that's really

00:38:39,290 --> 00:38:43,349
yeah and i think it's it's it's not

00:38:42,089 --> 00:38:46,320
going to be surprised me but if you if

00:38:43,349 --> 00:38:48,050
you go into treating docker containers

00:38:46,320 --> 00:38:50,609
as though they are virtual machines

00:38:48,050 --> 00:38:51,900
you're going to you're going to get

00:38:50,609 --> 00:38:53,640
tripped up saying because they're not

00:38:51,900 --> 00:38:54,660
they are different I I actually like

00:38:53,640 --> 00:38:55,980
them quite a bit I've worked in

00:38:54,660 --> 00:38:57,510
environments in the past where i had

00:38:55,980 --> 00:39:00,960
virtual machines that were getting very

00:38:57,510 --> 00:39:02,010
old and they had colonel vulnerabilities

00:39:00,960 --> 00:39:03,270
and everything else on them but i

00:39:02,010 --> 00:39:04,950
couldn't log in to see what the heck is

00:39:03,270 --> 00:39:07,500
going on and it's just a big mess for us

00:39:04,950 --> 00:39:08,820
with containers as root on the system

00:39:07,500 --> 00:39:10,410
you have full access to all the plates

00:39:08,820 --> 00:39:13,320
and things I've manager container at any

00:39:10,410 --> 00:39:17,280
time it's actually from the operations

00:39:13,320 --> 00:39:19,770
side you know some it's less now but we

00:39:17,280 --> 00:39:22,170
operators tend to be nervous about

00:39:19,770 --> 00:39:23,700
changes like this but this is a big a

00:39:22,170 --> 00:39:25,490
big benefit especially in large

00:39:23,700 --> 00:39:27,570
environments where you've got

00:39:25,490 --> 00:39:29,250
application code coming from oh you can

00:39:27,570 --> 00:39:30,990
always go in and run the nest race and

00:39:29,250 --> 00:39:33,990
see what's in the container you check

00:39:30,990 --> 00:39:36,890
out versions and things very helpful any

00:39:33,990 --> 00:39:36,890
other questions yes

00:39:40,270 --> 00:39:48,369
so okay okay so I'm going to ignore the

00:39:45,950 --> 00:39:51,740
colonel part of that just because I

00:39:48,369 --> 00:39:54,350
don't I think that I you may see them if

00:39:51,740 --> 00:39:56,420
there's demand for them but I think that

00:39:54,350 --> 00:39:58,160
the best practice is that if you have I

00:39:56,420 --> 00:40:00,109
think the best practice is going to be

00:39:58,160 --> 00:40:02,359
if you have the application created

00:40:00,109 --> 00:40:05,510
properly that the loss of a host is a

00:40:02,359 --> 00:40:07,490
bit matter very much and so so the

00:40:05,510 --> 00:40:10,040
reboot is an intentional part of that

00:40:07,490 --> 00:40:12,440
it's sort of a clean slate white whereas

00:40:10,040 --> 00:40:14,720
with something like puppet or regular

00:40:12,440 --> 00:40:16,550
updates you've got these machines that

00:40:14,720 --> 00:40:18,560
could be you know the actual operating

00:40:16,550 --> 00:40:20,330
system may have gone from the row 6 207

00:40:18,560 --> 00:40:23,090
at some points got all this cruft left

00:40:20,330 --> 00:40:26,990
over a topic and both if you're using

00:40:23,090 --> 00:40:29,060
the docker file scenarios both of those

00:40:26,990 --> 00:40:30,859
scenarios basically bring up a clean

00:40:29,060 --> 00:40:32,780
slate every time and I think that's a

00:40:30,859 --> 00:40:35,210
big feature it's a forcing function to

00:40:32,780 --> 00:40:37,369
do them so in terms of actually not

00:40:35,210 --> 00:40:40,369
needing to reboot the net tacos I'm not

00:40:37,369 --> 00:40:43,640
aware of anyone looking for that but the

00:40:40,369 --> 00:40:46,850
entire point at a time is that your any

00:40:43,640 --> 00:40:49,700
notes that you're either in state 1 or

00:40:46,850 --> 00:40:51,770
state to the you're not somewhere

00:40:49,700 --> 00:40:54,650
between that if you do online updates

00:40:51,770 --> 00:40:57,950
here stuff and possibly some on those

00:40:54,650 --> 00:41:03,740
things something to guarantee is the

00:40:57,950 --> 00:41:06,520
atomic provides and I think one thing I

00:41:03,740 --> 00:41:08,660
didn't point out that i meant to extra

00:41:06,520 --> 00:41:10,130
been in my notes but then if you go back

00:41:08,660 --> 00:41:13,930
through all these scenarios where I did

00:41:10,130 --> 00:41:16,580
the rolling deployments and the

00:41:13,930 --> 00:41:18,410
red/black deployments I didn't actually

00:41:16,580 --> 00:41:20,869
really specify whether or not this was

00:41:18,410 --> 00:41:22,640
an atomic hosed or docker container that

00:41:20,869 --> 00:41:23,740
was very intentional because this when

00:41:22,640 --> 00:41:25,960
you're using anatomical

00:41:23,740 --> 00:41:28,290
door docker container you can apply that

00:41:25,960 --> 00:41:31,750
same policy different commands obviously

00:41:28,290 --> 00:41:33,520
but the policy can be the same which is

00:41:31,750 --> 00:41:36,160
really powerful Union of containers not

00:41:33,520 --> 00:41:37,960
writing systems and it's something I

00:41:36,160 --> 00:41:39,610
think that a lot of operators will like

00:41:37,960 --> 00:41:40,810
just because of what Rhonda said where

00:41:39,610 --> 00:41:42,640
you get that you get that good known

00:41:40,810 --> 00:41:47,260
state both at the operating system layer

00:41:42,640 --> 00:41:50,410
and at the container layer okay any

00:41:47,260 --> 00:41:54,300
other questions yep perennial examples

00:41:50,410 --> 00:41:54,300
of well-documented he studies

00:41:57,670 --> 00:42:03,440
that's a good question i have had

00:42:00,200 --> 00:42:05,660
several i would call fireside chats with

00:42:03,440 --> 00:42:07,490
people that have large container

00:42:05,660 --> 00:42:09,620
deployments obviously google has a whole

00:42:07,490 --> 00:42:11,420
lot of container so if you find some

00:42:09,620 --> 00:42:15,890
Google that's Willie talk to them about

00:42:11,420 --> 00:42:17,720
it in terms of good case study actually

00:42:15,890 --> 00:42:19,460
you know what I don't know that this is

00:42:17,720 --> 00:42:22,160
the case but if you go to open shift

00:42:19,460 --> 00:42:24,470
online I know that our product managers

00:42:22,160 --> 00:42:26,990
or rotate on getting either success

00:42:24,470 --> 00:42:28,160
stories banks and things i would bet

00:42:26,990 --> 00:42:29,660
there we have something there I don't

00:42:28,160 --> 00:42:32,480
know how technically be but that's a

00:42:29,660 --> 00:42:33,920
good place to start and that probably a

00:42:32,480 --> 00:42:37,870
good one goes to have to go back

00:42:33,920 --> 00:42:37,870
dependency some good examples

00:42:45,910 --> 00:42:50,829
were these in the microwave antenna on

00:42:48,250 --> 00:42:53,010
the brightnesses were they doing the LXE

00:42:50,829 --> 00:42:53,010
or

00:43:00,990 --> 00:43:07,240
take a look at what's that code is a

00:43:03,880 --> 00:43:10,170
cracked com it's their nce together i'll

00:43:07,240 --> 00:43:10,170
pay for all that stuff

00:43:22,500 --> 00:43:29,420
yes spotify discover

00:43:26,320 --> 00:43:31,700
image garbage collection I'm shelf and

00:43:29,420 --> 00:43:36,680
since they got a garbage collection

00:43:31,700 --> 00:43:38,980
problem well we have that fabric that

00:43:36,680 --> 00:43:41,480
will do that for you you're not careful

00:43:38,980 --> 00:43:43,460
are any others before I hold it up I'll

00:43:41,480 --> 00:43:44,390
be around all week so feel free to I

00:43:43,460 --> 00:43:47,870
love talking about this stuff

00:43:44,390 --> 00:43:49,880
academically and pragmatically so feel

00:43:47,870 --> 00:43:54,190
free to run me down call me an idiot or

00:43:49,880 --> 00:43:54,190

YouTube URL: https://www.youtube.com/watch?v=-GBjPnB7vto


