Title: Flock 2015 - Next-generation Fedora release tooling - Adam Miller
Publication date: 2015-08-26
Playlist: Flock 2015
Description: 
	In this talk we will discuss the challenges faced by RelEng with the current Release Tooling. From there we will talk about the current plans, proposals, work that has been done, and work still needing to be done in order to implement next-generation Fedora Release Tooling. We will cover build systems, compose automation, how the new tooling is aiming to solve the challenges being faced with current tools, and how we hope this new design will prevent us from facing similar challenges moving forward.

https://maxamillion.fedorapeople.org/admiller-future-releng-tooling-flock2015.pdf
Captions: 
	00:00:00,170 --> 00:00:06,569
alright we're recording hello my name is

00:00:04,410 --> 00:00:08,340
Adam Miller I am the newest member of

00:00:06,569 --> 00:00:10,469
the floor release engineering team I

00:00:08,340 --> 00:00:11,910
currently work on floor I tuning for

00:00:10,469 --> 00:00:14,670
that I've spent four years working on

00:00:11,910 --> 00:00:18,029
openshift online pretty way with open

00:00:14,670 --> 00:00:20,640
shifts it's a lot of fun but to every

00:00:18,029 --> 00:00:22,050
time on next generation tooling in photo

00:00:20,640 --> 00:00:24,150
release engineering and that's a half

00:00:22,050 --> 00:00:25,560
lie because it is true that we're going

00:00:24,150 --> 00:00:26,760
to talk about that but before we talk

00:00:25,560 --> 00:00:28,260
about that working talk about some

00:00:26,760 --> 00:00:30,240
background topics and some of them are

00:00:28,260 --> 00:00:33,030
going to be kind of fundamental to

00:00:30,240 --> 00:00:34,410
understanding what we are today what we

00:00:33,030 --> 00:00:35,940
were yesterday at a project is a

00:00:34,410 --> 00:00:37,829
distribution what we're going towards

00:00:35,940 --> 00:00:39,989
tomorrow and then what that means to

00:00:37,829 --> 00:00:41,430
release engineering in terms of things

00:00:39,989 --> 00:00:43,399
that we need to cater two goals that we

00:00:41,430 --> 00:00:45,870
have tooling that we need to either

00:00:43,399 --> 00:00:48,059
alter refactor or come up with

00:00:45,870 --> 00:00:50,340
completely new in order to deliver those

00:00:48,059 --> 00:00:51,899
things so background so we're going to

00:00:50,340 --> 00:00:53,699
start off with what is we're going to

00:00:51,899 --> 00:00:56,190
find release engineering we're going to

00:00:53,699 --> 00:00:58,920
define what operating system is and that

00:00:56,190 --> 00:01:02,039
seems very kind of ground layer like but

00:00:58,920 --> 00:01:04,080
just base level but when we add to that

00:01:02,039 --> 00:01:05,790
define when application isn't discussing

00:01:04,080 --> 00:01:07,740
the separation or possible separation of

00:01:05,790 --> 00:01:09,450
those things it gets it gets interesting

00:01:07,740 --> 00:01:10,860
and then what is a package what is the

00:01:09,450 --> 00:01:13,619
distribution and how these seams

00:01:10,860 --> 00:01:15,479
correlate to both the doors project as

00:01:13,619 --> 00:01:17,100
well as to release engineering from

00:01:15,479 --> 00:01:19,409
there we're going to talk briefly about

00:01:17,100 --> 00:01:20,729
fedora rings and where we're going with

00:01:19,409 --> 00:01:23,159
that from a release engineering

00:01:20,729 --> 00:01:26,100
standpoint from a compose and we'll

00:01:23,159 --> 00:01:27,509
tooling perspective what we have in

00:01:26,100 --> 00:01:32,670
place today what we're going to work

00:01:27,509 --> 00:01:33,570
towards tomorrow and I see Ralph in the

00:01:32,670 --> 00:01:35,189
audience that I realized I forgot

00:01:33,570 --> 00:01:37,380
something one of my slides that we were

00:01:35,189 --> 00:01:39,020
talking about for release tooling I'm

00:01:37,380 --> 00:01:41,970
gonna mention it and I'll add it later

00:01:39,020 --> 00:01:43,710
so background to kick it off what is

00:01:41,970 --> 00:01:46,079
release engineering and i shamelessly

00:01:43,710 --> 00:01:49,619
stole a nice formal definition for

00:01:46,079 --> 00:01:50,869
Wikipedia so it is a sub desam the sub

00:01:49,619 --> 00:01:52,920
disappoint of software engineering

00:01:50,869 --> 00:01:57,240
concern with compilation assembly

00:01:52,920 --> 00:01:59,180
delivery source code to create products

00:01:57,240 --> 00:02:02,080
and saw other software components and

00:01:59,180 --> 00:02:03,910
the goal for fedora anyways

00:02:02,080 --> 00:02:06,190
and I put in there that surely i jest

00:02:03,910 --> 00:02:08,229
because I do and this is there's two

00:02:06,190 --> 00:02:10,180
URLs here and because of the contrast

00:02:08,229 --> 00:02:11,740
it's kind of difficult to see but i

00:02:10,180 --> 00:02:13,720
believe slides run up on the internet at

00:02:11,740 --> 00:02:15,340
some point hopefully you can bring them

00:02:13,720 --> 00:02:17,980
in and there is the overview of the

00:02:15,340 --> 00:02:19,780
release engineering is in more detailed

00:02:17,980 --> 00:02:22,210
context and what that means in

00:02:19,780 --> 00:02:25,150
definition roles and responsibilities

00:02:22,210 --> 00:02:26,880
and then as well the lower burleson

00:02:25,150 --> 00:02:28,990
drink philosophy and that breaks down

00:02:26,880 --> 00:02:30,910
basically what these two lines come up

00:02:28,990 --> 00:02:33,520
with is maintain sanity in the pipeline

00:02:30,910 --> 00:02:35,590
going from upstream source code into

00:02:33,520 --> 00:02:38,410
something that is consumable buy the

00:02:35,590 --> 00:02:41,260
fedora community in the user base and

00:02:38,410 --> 00:02:44,470
produce and maintain tools that

00:02:41,260 --> 00:02:47,770
facilitate in that bowl so in a nutshell

00:02:44,470 --> 00:02:49,990
that that is kind of what are our aim in

00:02:47,770 --> 00:02:53,290
life is to be and what we want to

00:02:49,990 --> 00:02:57,820
deliver to the community and to project

00:02:53,290 --> 00:02:59,920
and it rolls around this whole concept

00:02:57,820 --> 00:03:04,570
of build sanity and Bill reproducibility

00:02:59,920 --> 00:03:08,200
and other attributes of that so before

00:03:04,570 --> 00:03:09,910
we talk about the tooling and what it

00:03:08,200 --> 00:03:11,500
means to release engineering these

00:03:09,910 --> 00:03:14,380
different concepts I want to kind of ask

00:03:11,500 --> 00:03:16,239
few questions and define a few things so

00:03:14,380 --> 00:03:17,380
what does an operating system operating

00:03:16,239 --> 00:03:19,660
system is software that manages your

00:03:17,380 --> 00:03:21,519
computer hardware and software resources

00:03:19,660 --> 00:03:23,350
provides common services computer

00:03:21,519 --> 00:03:26,230
programs also shamelessly stolen from

00:03:23,350 --> 00:03:28,510
Wikipedia and so at a fundamental

00:03:26,230 --> 00:03:30,130
standpoint this is what allows us to

00:03:28,510 --> 00:03:32,470
interact with our hardware it provides

00:03:30,130 --> 00:03:35,950
the core components that we need to do

00:03:32,470 --> 00:03:37,480
everything else and what is everything

00:03:35,950 --> 00:03:39,040
else well generally everything else is

00:03:37,480 --> 00:03:41,010
considered an application at least in

00:03:39,040 --> 00:03:44,220
current standards of definition

00:03:41,010 --> 00:03:46,799
and nomenclature in common I guess

00:03:44,220 --> 00:03:49,170
paradigms of thought process around what

00:03:46,799 --> 00:03:51,030
a computer experience is not just you

00:03:49,170 --> 00:03:53,430
know the operating system but everything

00:03:51,030 --> 00:03:56,010
in that you know kind of branches and

00:03:53,430 --> 00:03:59,519
bridges from what we do with like

00:03:56,010 --> 00:04:01,349
servers and big iron mainframes down to

00:03:59,519 --> 00:04:05,280
what we do on tablets and cell phones

00:04:01,349 --> 00:04:06,840
it's it's what does that mean what does

00:04:05,280 --> 00:04:08,069
it mean to be an operating system so

00:04:06,840 --> 00:04:10,769
that kind of brings us to the next one

00:04:08,069 --> 00:04:12,359
was an application application is a set

00:04:10,769 --> 00:04:14,129
of computer programs designed to permit

00:04:12,359 --> 00:04:16,500
again I stole this from Wikipedia I'm

00:04:14,129 --> 00:04:19,079
just shamelessly like I have my credit

00:04:16,500 --> 00:04:21,510
lines and I'm happy with that so design

00:04:19,079 --> 00:04:22,620
permit the user in form a group of

00:04:21,510 --> 00:04:23,970
coordinated function of tasks or

00:04:22,620 --> 00:04:26,010
activities application software cannot

00:04:23,970 --> 00:04:28,530
run on itself but is dependent on

00:04:26,010 --> 00:04:31,020
software execution and what I love the

00:04:28,530 --> 00:04:33,600
most I felt like you could be said again

00:04:31,020 --> 00:04:35,460
is depended on the system software to

00:04:33,600 --> 00:04:39,000
execute so it's dependent on the

00:04:35,460 --> 00:04:42,479
operating system and that raises the

00:04:39,000 --> 00:04:43,979
question that I first heard from Alex

00:04:42,479 --> 00:04:46,289
Larson I don't know where it originated

00:04:43,979 --> 00:04:47,460
entirely but I heard it from him in a

00:04:46,289 --> 00:04:49,020
talky cave and I thought it was

00:04:47,460 --> 00:04:50,430
fantastic and I like to bring this topic

00:04:49,020 --> 00:04:54,000
up again because I think I think about a

00:04:50,430 --> 00:04:57,449
lot probably to an unhealthy extent just

00:04:54,000 --> 00:04:58,949
like I think about self hosted versus

00:04:57,449 --> 00:04:59,970
non-self posted operating systems in

00:04:58,949 --> 00:05:01,400
programming languages and these are

00:04:59,970 --> 00:05:06,000
things of keeping up tonight because I

00:05:01,400 --> 00:05:07,800
am different and that's okay and I'm

00:05:06,000 --> 00:05:11,460
okay with that and it's healthier not

00:05:07,800 --> 00:05:13,530
healthy but one of my favorite tag lines

00:05:11,460 --> 00:05:15,150
because I'm a packager and I came in to

00:05:13,530 --> 00:05:15,920
fedora as a community packager and I

00:05:15,150 --> 00:05:18,080
love

00:05:15,920 --> 00:05:19,490
and that's very weird and I get

00:05:18,080 --> 00:05:22,490
extremely passionate about packaging

00:05:19,490 --> 00:05:24,650
software systems in different language

00:05:22,490 --> 00:05:27,530
you know framework so you know like in

00:05:24,650 --> 00:05:30,260
Python and Ruby and NPI like nodejs and

00:05:27,530 --> 00:05:34,280
this like kind of plug that is kind of

00:05:30,260 --> 00:05:36,470
go packaging that anyways um what's a

00:05:34,280 --> 00:05:37,610
package where's the package if we have

00:05:36,470 --> 00:05:39,050
an operating system we have an

00:05:37,610 --> 00:05:40,310
application and there might be some

00:05:39,050 --> 00:05:43,160
definition of where one and the other

00:05:40,310 --> 00:05:45,590
stops what is the package well the

00:05:43,160 --> 00:05:48,710
package is is effectively a build art

00:05:45,590 --> 00:05:52,340
vent from source code that week that can

00:05:48,710 --> 00:05:54,560
be consumed and that can vary in terms

00:05:52,340 --> 00:05:56,510
of what it is based on content versus

00:05:54,560 --> 00:05:58,910
code because if its content it's like

00:05:56,510 --> 00:06:02,720
icons and wallpapers or documentation

00:05:58,910 --> 00:06:04,220
but if it's code then it becomes an

00:06:02,720 --> 00:06:06,200
application but it could be part of the

00:06:04,220 --> 00:06:07,700
operating system because the base LS is

00:06:06,200 --> 00:06:09,470
built out of factors but everything else

00:06:07,700 --> 00:06:13,310
is as well so when you get into the

00:06:09,470 --> 00:06:15,770
world of packaging systems at least as a

00:06:13,310 --> 00:06:18,500
distribution is built and we're next

00:06:15,770 --> 00:06:20,330
slide is what's a distro in a

00:06:18,500 --> 00:06:23,060
distribution is you have a package

00:06:20,330 --> 00:06:25,550
format so for fedora its RPM for rel its

00:06:23,060 --> 00:06:27,710
RPM percent off its RPM that is the

00:06:25,550 --> 00:06:29,780
thing that we centralize on it's the

00:06:27,710 --> 00:06:32,000
common component and it's very powerful

00:06:29,780 --> 00:06:34,060
in nature and I don't see any reason

00:06:32,000 --> 00:06:37,460
actually you get rid of it or try to

00:06:34,060 --> 00:06:39,910
change what it does it you know

00:06:37,460 --> 00:06:41,990
functional level of the ground zero but

00:06:39,910 --> 00:06:42,860
what other things that aren't rpms what

00:06:41,990 --> 00:06:44,840
about things that people in the

00:06:42,860 --> 00:06:47,230
community actively use that are

00:06:44,840 --> 00:06:50,930
flourishing on their own things like

00:06:47,230 --> 00:06:53,240
Python pip and Ruby gems and no jsm p.m.

00:06:50,930 --> 00:06:55,690
and mayhem and the others that I

00:06:53,240 --> 00:07:00,350
probably am not very familiar with I

00:06:55,690 --> 00:07:02,150
really see pan is still think you know

00:07:00,350 --> 00:07:04,490
there's pekel and hair and like all of

00:07:02,150 --> 00:07:07,210
these different you know systems out

00:07:04,490 --> 00:07:10,160
there that very large groups of people

00:07:07,210 --> 00:07:12,350
in very vibrant communities in their own

00:07:10,160 --> 00:07:13,730
right in their own piece of the

00:07:12,350 --> 00:07:16,010
world are very interested in

00:07:13,730 --> 00:07:18,170
enthusiastic about almost to the point

00:07:16,010 --> 00:07:23,060
that I'm enthusiastic about rpm probably

00:07:18,170 --> 00:07:24,830
not as much I get a little animated in

00:07:23,060 --> 00:07:28,370
my excitement and that's that's that's

00:07:24,830 --> 00:07:30,830
good but we're you know we're kind of in

00:07:28,370 --> 00:07:32,390
the stack do we differentiate how much

00:07:30,830 --> 00:07:38,540
of that really needs to be brought into

00:07:32,390 --> 00:07:41,330
things and in a fedora context actually

00:07:38,540 --> 00:07:42,710
uh no no my cell but in our context we

00:07:41,330 --> 00:07:45,320
kind of roll towards though like what's

00:07:42,710 --> 00:07:47,930
a distro so a distribution the Linux

00:07:45,320 --> 00:07:50,180
distribution is an operating system made

00:07:47,930 --> 00:07:52,220
as software collection based on linux

00:07:50,180 --> 00:07:54,650
kernel and often and a package managed

00:07:52,220 --> 00:07:57,170
system and is rolled back to that so

00:07:54,650 --> 00:08:01,070
from fedora what does this mean today

00:07:57,170 --> 00:08:02,750
versus women yesterday so yesterday the

00:08:01,070 --> 00:08:04,940
distribution was a one-stop shop I mean

00:08:02,750 --> 00:08:10,850
when when the wind sourceforge reign

00:08:04,940 --> 00:08:12,500
supreme nobody who ran a package of an

00:08:10,850 --> 00:08:14,510
operating system or a distro based on

00:08:12,500 --> 00:08:16,520
patronis system would just randomly grab

00:08:14,510 --> 00:08:17,990
things and compile it like nobody ran

00:08:16,520 --> 00:08:19,520
that production it's not the way we did

00:08:17,990 --> 00:08:23,630
business it's not the way that anybody

00:08:19,520 --> 00:08:25,450
like who really had a good set of

00:08:23,630 --> 00:08:28,610
standard practices in place did things

00:08:25,450 --> 00:08:30,320
however what we're starting to see in

00:08:28,610 --> 00:08:32,900
this kind of shift people are running

00:08:30,320 --> 00:08:36,469
things from mtm in production people are

00:08:32,900 --> 00:08:38,150
anything from ruby gem production is it

00:08:36,469 --> 00:08:39,770
a good idea bad idea i think is up to

00:08:38,150 --> 00:08:41,960
the merit of the people doing the work

00:08:39,770 --> 00:08:43,610
to debate and that's fine whether or not

00:08:41,960 --> 00:08:45,680
they do believe or don't believe but

00:08:43,610 --> 00:08:47,200
then you add containers and you have

00:08:45,680 --> 00:08:48,769
these dr environments and you have

00:08:47,200 --> 00:08:50,809
rocket

00:08:48,769 --> 00:08:52,309
run see you have all these different

00:08:50,809 --> 00:08:55,509
things that allow you to kind of the

00:08:52,309 --> 00:08:57,829
contextualize sandbox around this

00:08:55,509 --> 00:09:00,739
environment that may or may not be what

00:08:57,829 --> 00:09:04,189
you traditionally thought it was so a

00:09:00,739 --> 00:09:05,629
long time ago the young repository was

00:09:04,189 --> 00:09:06,829
the place to be that's where software

00:09:05,629 --> 00:09:08,360
came from that's where you got your

00:09:06,829 --> 00:09:10,639
software a PDA that period the M full

00:09:08,360 --> 00:09:13,249
stop and that's kind of changing we're

00:09:10,639 --> 00:09:17,299
seeing we're seeing a fundamental you

00:09:13,249 --> 00:09:22,249
know branch out in you know avenues to

00:09:17,299 --> 00:09:24,079
to consume software so it used to be

00:09:22,249 --> 00:09:25,759
this one stop shop and it's no longer

00:09:24,079 --> 00:09:28,220
it's moving into this thing where people

00:09:25,759 --> 00:09:29,600
aren't doing that as much when I say

00:09:28,220 --> 00:09:34,869
actually one of my favorite examples of

00:09:29,600 --> 00:09:38,449
this has it actually isn't fedora but

00:09:34,869 --> 00:09:40,040
Jesse frazzle she's a docker core

00:09:38,449 --> 00:09:43,279
contributor and she's also a debian

00:09:40,040 --> 00:09:44,600
maintainer but she's notorious around

00:09:43,279 --> 00:09:47,029
the internet for giving these talks

00:09:44,600 --> 00:09:48,679
about running just wildly interesting

00:09:47,029 --> 00:09:50,360
things in dr. containers and like one of

00:09:48,679 --> 00:09:53,299
the most recent things she did was like

00:09:50,360 --> 00:09:55,819
ran quake 4 or something in a docker

00:09:53,299 --> 00:09:57,709
container on her laptop on stage at a

00:09:55,819 --> 00:09:59,119
conference just kind of showing

00:09:57,709 --> 00:10:00,619
everything and she has this github

00:09:59,119 --> 00:10:01,759
account where she's got like something

00:10:00,619 --> 00:10:03,559
the ballpark like 40 different

00:10:01,759 --> 00:10:05,629
applications that are just standard

00:10:03,559 --> 00:10:07,579
desktop applications things that she

00:10:05,629 --> 00:10:09,350
uses as a day-to-day basis and she runs

00:10:07,579 --> 00:10:11,269
like her entire desktop in a set of

00:10:09,350 --> 00:10:13,339
docker containers like everything is

00:10:11,269 --> 00:10:17,179
alias in things so that when she runs in

00:10:13,339 --> 00:10:20,019
her so the time when the manager i use i

00:10:17,179 --> 00:10:25,040
three she's also an actor user but yeah

00:10:20,019 --> 00:10:26,959
so there's a system launcher called d

00:10:25,040 --> 00:10:28,519
menu so if she runs a thing in team and

00:10:26,959 --> 00:10:31,040
you will actually map to a doctorate and

00:10:28,519 --> 00:10:32,360
it's very interesting to see this did

00:10:31,040 --> 00:10:34,189
you know that's completely different

00:10:32,360 --> 00:10:35,600
software delivery mechanism pulling

00:10:34,189 --> 00:10:36,190
directly from the doctor hub for your

00:10:35,600 --> 00:10:37,660
registry

00:10:36,190 --> 00:10:39,640
you that's where you get software from

00:10:37,660 --> 00:10:40,780
and if you read the verdict or file

00:10:39,640 --> 00:10:42,190
that's not actually coming from a

00:10:40,780 --> 00:10:45,160
district package like they're all built

00:10:42,190 --> 00:10:46,420
from source on inside of that container

00:10:45,160 --> 00:10:47,710
and then like pulled down I don't know

00:10:46,420 --> 00:10:48,850
if they all are the few that I looked at

00:10:47,710 --> 00:10:51,960
were and it was just I thought it was

00:10:48,850 --> 00:10:55,600
quite interesting but just that that's a

00:10:51,960 --> 00:10:56,860
example of where this is wildly

00:10:55,600 --> 00:10:59,140
different from how it used to be done

00:10:56,860 --> 00:11:01,960
like that if you if you propose that to

00:10:59,140 --> 00:11:04,240
I think a room of system illustrators or

00:11:01,960 --> 00:11:06,790
a room of traditional links to share

00:11:04,240 --> 00:11:09,250
users five years ago they would have

00:11:06,790 --> 00:11:12,280
laughs or thought you were crazy but

00:11:09,250 --> 00:11:14,020
that's not that far-fetched anymore like

00:11:12,280 --> 00:11:16,450
it's just not like it's just because of

00:11:14,020 --> 00:11:18,750
how things have progressed and changed

00:11:16,450 --> 00:11:21,100
and I think a lot of these different

00:11:18,750 --> 00:11:23,410
avenues for consuming content or

00:11:21,100 --> 00:11:25,840
consuming code or programs have matured

00:11:23,410 --> 00:11:29,980
as time has gone on it's not as Wild

00:11:25,840 --> 00:11:32,500
West crazy idea to do so thinking about

00:11:29,980 --> 00:11:33,790
fedora where does the upper system and

00:11:32,500 --> 00:11:35,590
the application began i got a little bit

00:11:33,790 --> 00:11:37,330
of myself in this slide because i just

00:11:35,590 --> 00:11:40,300
really like that particular question and

00:11:37,330 --> 00:11:42,550
i think that's a it's an arbitrary

00:11:40,300 --> 00:11:44,440
concept but it's one that you have to

00:11:42,550 --> 00:11:46,360
define and i think it needs definition

00:11:44,440 --> 00:11:48,730
at some point because reality is is

00:11:46,360 --> 00:11:51,010
there is a difference and i think good

00:11:48,730 --> 00:11:54,010
examples of this are generally mobile

00:11:51,010 --> 00:11:56,230
operating systems android/ios Firefox OS

00:11:54,010 --> 00:11:57,820
chrome OS they have a very firm

00:11:56,230 --> 00:11:59,830
definition of where the operating system

00:11:57,820 --> 00:12:02,950
stops and the application begins such

00:11:59,830 --> 00:12:05,410
that you can you can completely upgrade

00:12:02,950 --> 00:12:06,820
in it and maintain each one independent

00:12:05,410 --> 00:12:10,350
of one another and completely separate

00:12:06,820 --> 00:12:13,860
life cycles so for

00:12:10,350 --> 00:12:16,280
application as an example so I Messiah

00:12:13,860 --> 00:12:19,380
come on user it's a community distro of

00:12:16,280 --> 00:12:20,880
Android I'm a big fan boy of all things

00:12:19,380 --> 00:12:22,260
community and open source and things

00:12:20,880 --> 00:12:25,590
like that and they're medium sort of

00:12:22,260 --> 00:12:27,720
rebuild of OSP a lot of things vanish I

00:12:25,590 --> 00:12:29,220
run the nightly builds because i'm crazy

00:12:27,720 --> 00:12:33,060
i also periodically run rawhide on my

00:12:29,220 --> 00:12:34,950
laptop they they put out these nightly

00:12:33,060 --> 00:12:37,200
builds and i can upgrade my operating

00:12:34,950 --> 00:12:39,630
system underneath my applications every

00:12:37,200 --> 00:12:41,040
day of the week in my my applications

00:12:39,630 --> 00:12:43,980
don't need to change nothing about them

00:12:41,040 --> 00:12:48,030
changes the cash gets erased and it

00:12:43,980 --> 00:12:50,160
really does a the art vm caching

00:12:48,030 --> 00:12:51,930
optimizations when it reboots but you

00:12:50,160 --> 00:12:54,150
can maintain these things separate in

00:12:51,930 --> 00:12:56,910
separate life cycles and this kind of

00:12:54,150 --> 00:13:02,490
thing indeed if you take that concept

00:12:56,910 --> 00:13:04,200
into you know more I guess large-scale

00:13:02,490 --> 00:13:07,590
operating system for lack of a better

00:13:04,200 --> 00:13:10,560
vocabulary term how do you take that

00:13:07,590 --> 00:13:12,030
concept down there will it's containers

00:13:10,560 --> 00:13:14,850
I mean it's already being done right now

00:13:12,030 --> 00:13:19,710
like you have containers I think a prime

00:13:14,850 --> 00:13:22,080
example of that is is rel seven with

00:13:19,710 --> 00:13:24,900
certified well six containers you now

00:13:22,080 --> 00:13:27,300
have applications that ran on an older

00:13:24,900 --> 00:13:29,160
operating system that you can now run at

00:13:27,300 --> 00:13:30,750
a different life cycle than the OS and

00:13:29,160 --> 00:13:32,640
disaster you touch on the bare metal and

00:13:30,750 --> 00:13:34,500
that's very it's any of the fascinating

00:13:32,640 --> 00:13:37,770
thing in the whole concept of what we're

00:13:34,500 --> 00:13:41,070
able to do with that moving forward what

00:13:37,770 --> 00:13:44,130
we can do in fedora I think is is very

00:13:41,070 --> 00:13:46,530
special there I think going back to my

00:13:44,130 --> 00:13:47,889
comment about rawhide Island I love the

00:13:46,530 --> 00:13:50,290
idea of raw

00:13:47,889 --> 00:13:52,600
I want the hottest bits at all times I

00:13:50,290 --> 00:13:56,290
want them on the laptop yesterday today

00:13:52,600 --> 00:13:58,329
and tomorrow but right now if I do a dnf

00:13:56,290 --> 00:14:00,249
update and I pull in 130 packages this

00:13:58,329 --> 00:14:03,040
is actually happening and pulled in 140

00:14:00,249 --> 00:14:04,359
some on packages somebody broke and I

00:14:03,040 --> 00:14:06,639
started going to coach you because we

00:14:04,359 --> 00:14:08,559
don't keep gender downgrades you won't

00:14:06,639 --> 00:14:12,459
keep history it's just raw hides the

00:14:08,559 --> 00:14:14,169
latest for the poll for the compose so I

00:14:12,459 --> 00:14:15,939
go to coaching and I grab hackers one by

00:14:14,169 --> 00:14:17,919
one might downgrade them and about 30

00:14:15,939 --> 00:14:19,600
packages and I didn't find what had

00:14:17,919 --> 00:14:21,489
broken it and gave up on a race on our

00:14:19,600 --> 00:14:23,499
laptop to the current stable version

00:14:21,489 --> 00:14:28,449
north time and I just kept moving out of

00:14:23,499 --> 00:14:33,459
my life but if we did an OS first

00:14:28,449 --> 00:14:36,639
application split and the OS was I don't

00:14:33,459 --> 00:14:40,059
know anatomic image and I were to just

00:14:36,639 --> 00:14:42,339
switch do an atomic host downgrade and I

00:14:40,059 --> 00:14:44,949
switched to yesterday's tree and I

00:14:42,339 --> 00:14:47,199
reboot all my application space is still

00:14:44,949 --> 00:14:49,869
there it's it has not modified but mile

00:14:47,199 --> 00:14:52,779
s is different it's we have a lot of

00:14:49,869 --> 00:14:54,610
damages there we can make a more

00:14:52,779 --> 00:14:56,019
attractive option for developers and

00:14:54,610 --> 00:14:59,379
contributors within the community who

00:14:56,019 --> 00:15:02,529
want to work on the late-breaking most

00:14:59,379 --> 00:15:04,119
cutting-edge technology with that you

00:15:02,529 --> 00:15:07,269
know kind of safety like an easy roll

00:15:04,119 --> 00:15:10,169
back and not modifying or altering an

00:15:07,269 --> 00:15:10,169
application space yes

00:15:13,110 --> 00:15:19,750
well because so that's actually

00:15:17,290 --> 00:15:25,870
interesting question let's say for

00:15:19,750 --> 00:15:30,490
example there's a post a post install or

00:15:25,870 --> 00:15:32,950
post uninstall or trigger in the RPM

00:15:30,490 --> 00:15:34,839
transaction to wear some artifact is

00:15:32,950 --> 00:15:36,880
left behind when I do an upgrade or

00:15:34,839 --> 00:15:38,830
downgrade and now the functionality

00:15:36,880 --> 00:15:41,589
something has changed and that doesn't

00:15:38,830 --> 00:15:43,660
happen often but it has happened and

00:15:41,589 --> 00:15:46,450
whereas within with a note with the RPM

00:15:43,660 --> 00:15:48,339
OS tree it is literally a full tree it's

00:15:46,450 --> 00:15:50,500
effectively like a get snapshot of a

00:15:48,339 --> 00:15:52,930
file system with this set of packages so

00:15:50,500 --> 00:15:54,610
you have almost a guarantee that the

00:15:52,930 --> 00:15:56,230
tree that works for you yesterday is

00:15:54,610 --> 00:16:00,130
going to work for you today because it

00:15:56,230 --> 00:16:02,470
is unmodified whereas with your file

00:16:00,130 --> 00:16:04,899
system if you did a young or edina

00:16:02,470 --> 00:16:06,760
upgrade and then a dnf downgrade you

00:16:04,899 --> 00:16:11,339
still have modifications on the system

00:16:06,760 --> 00:16:11,339
like steak changed good

00:16:45,699 --> 00:16:50,379
and I don't disagree with that and I

00:16:47,919 --> 00:16:51,759
think that's a good point is is a lot of

00:16:50,379 --> 00:16:54,399
functionality like that does work in a

00:16:51,759 --> 00:16:55,809
row and I think it's because of probably

00:16:54,399 --> 00:16:57,339
the engineering effort in the extra QA

00:16:55,809 --> 00:16:59,679
effort that goes into those things and

00:16:57,339 --> 00:17:01,959
and the support team behind it however

00:16:59,679 --> 00:17:04,179
in fedora space i'm thinking more about

00:17:01,959 --> 00:17:06,850
the cutting edge the rawhide like in

00:17:04,179 --> 00:17:09,069
rawhide nightly builds we test the zero

00:17:06,850 --> 00:17:11,740
of that and we have zero guarantee that

00:17:09,069 --> 00:17:13,779
those kinds of things work and there

00:17:11,740 --> 00:17:15,309
could even be above that was introduced

00:17:13,779 --> 00:17:16,839
that would break some of that

00:17:15,309 --> 00:17:18,370
functionality and that's and that's kind

00:17:16,839 --> 00:17:20,079
of more what I'm getting towards because

00:17:18,370 --> 00:17:21,399
in release engineering standpoint we're

00:17:20,079 --> 00:17:23,230
always looking towards the next release

00:17:21,399 --> 00:17:24,610
we're looking towards maintaining the

00:17:23,230 --> 00:17:26,980
current one getting updates out the door

00:17:24,610 --> 00:17:29,919
but also the next release the

00:17:26,980 --> 00:17:31,360
deliverables for that and so from the

00:17:29,919 --> 00:17:33,370
release engineering perspective i'm

00:17:31,360 --> 00:17:35,649
thinking more of those concerns as

00:17:33,370 --> 00:17:38,830
opposed to long-term maintaining a

00:17:35,649 --> 00:17:43,679
running system that may need to live

00:17:38,830 --> 00:17:43,679
around for exit lifecycle

00:19:05,299 --> 00:19:11,149
okay so i don't disagree with you but i

00:19:08,360 --> 00:19:13,039
also i want to kind of move because what

00:19:11,149 --> 00:19:16,570
i'm getting towards is part of what the

00:19:13,039 --> 00:19:19,429
lake fodor's a project wants to do so

00:19:16,570 --> 00:19:22,009
just very quickly if he's a more tightly

00:19:19,429 --> 00:19:26,119
coupled right now today we have docket

00:19:22,009 --> 00:19:27,739
dr. rocket exgf if anyways not from xeg

00:19:26,119 --> 00:19:30,019
it's this kind of very interesting

00:19:27,739 --> 00:19:32,470
concept about running containerized

00:19:30,019 --> 00:19:36,200
desktop applications inside of

00:19:32,470 --> 00:19:39,440
effectively a container sandbox such

00:19:36,200 --> 00:19:44,299
that it is shipped holistically as an OS

00:19:39,440 --> 00:19:45,590
tree I was actually just about to

00:19:44,299 --> 00:19:47,419
mention that there's a fought like the

00:19:45,590 --> 00:19:49,100
right after this it couldn't have been

00:19:47,419 --> 00:19:51,259
more conveniently time there to talk on

00:19:49,100 --> 00:19:53,179
that and everybody should go I'm

00:19:51,259 --> 00:19:56,299
actually I will be there I'm very

00:19:53,179 --> 00:19:58,609
excited to to see because I cursor like

00:19:56,299 --> 00:20:00,739
on a cursory concept know what it is but

00:19:58,609 --> 00:20:02,179
I've seen it I've only seen it work in

00:20:00,739 --> 00:20:04,039
like a demo on the internet and very

00:20:02,179 --> 00:20:06,499
excited to see emerge Aaron so throw

00:20:04,039 --> 00:20:08,869
reams so this kind of brings around to

00:20:06,499 --> 00:20:10,940
like the floor next concept has been

00:20:08,869 --> 00:20:14,149
kind of mulling and manifesting and

00:20:10,940 --> 00:20:18,200
coming to light in more recent time and

00:20:14,149 --> 00:20:22,359
so if we were to think about it the base

00:20:18,200 --> 00:20:26,629
design will be our operating system and

00:20:22,359 --> 00:20:29,269
then everything out here could be our

00:20:26,629 --> 00:20:31,580
application space and that's that's very

00:20:29,269 --> 00:20:33,679
interesting from a release engineering

00:20:31,580 --> 00:20:35,739
standpoint because what we need to build

00:20:33,679 --> 00:20:37,909
and how we build it might change

00:20:35,739 --> 00:20:40,279
dramatically because right now it's all

00:20:37,909 --> 00:20:43,460
is just one big clump some it's a giant

00:20:40,279 --> 00:20:46,399
package set it's a giant repository it's

00:20:43,460 --> 00:20:48,340
a giant composition of things where we

00:20:46,399 --> 00:20:51,400
generate metadata and have

00:20:48,340 --> 00:20:53,470
packing for what needs to go into ISO

00:20:51,400 --> 00:20:57,130
images for the different products and

00:20:53,470 --> 00:20:59,830
those kinds of things so throw rings ?

00:20:57,130 --> 00:21:02,140
what does it mean to really so we need

00:20:59,830 --> 00:21:03,730
to be able to adapt more rapidly and

00:21:02,140 --> 00:21:07,270
this is a big thing is because we have

00:21:03,730 --> 00:21:10,270
this we just we have build artifacts and

00:21:07,270 --> 00:21:13,179
our purposes to deliver them as quickly

00:21:10,270 --> 00:21:14,950
as possible to cater to the needs of the

00:21:13,179 --> 00:21:18,059
community they cater to the needs of the

00:21:14,950 --> 00:21:20,500
contributors however we need to maintain

00:21:18,059 --> 00:21:22,450
sanity within that we can't allow things

00:21:20,500 --> 00:21:24,100
because Allah bless I think a great

00:21:22,450 --> 00:21:26,529
example of this that kind of has enabled

00:21:24,100 --> 00:21:29,110
a lot of people to do a lot of things

00:21:26,529 --> 00:21:32,230
more rapidly as coke coke or has allowed

00:21:29,110 --> 00:21:34,750
people to build anything and they can do

00:21:32,230 --> 00:21:38,380
it if rapidly they would like to on any

00:21:34,750 --> 00:21:41,260
release of fedora without breaking the

00:21:38,380 --> 00:21:46,899
bulk user base and that's great i think

00:21:41,260 --> 00:21:49,740
i'm a big fan of that it cares that need

00:21:46,899 --> 00:21:52,600
without breaking the core deliverable

00:21:49,740 --> 00:21:56,020
from a relation earring standpoint that

00:21:52,600 --> 00:21:57,490
defines the product of fedora

00:21:56,020 --> 00:22:00,070
workstation or the product of your

00:21:57,490 --> 00:22:01,840
server or product for our cloud it let's

00:22:00,070 --> 00:22:03,940
see sings iterate independently and

00:22:01,840 --> 00:22:06,039
people can optionally install it on top

00:22:03,940 --> 00:22:07,419
so it has it has its own independent

00:22:06,039 --> 00:22:08,950
life cycle I understand like its

00:22:07,419 --> 00:22:10,799
delivery mechanism is still very similar

00:22:08,950 --> 00:22:13,720
to the traditional setup that we have

00:22:10,799 --> 00:22:16,029
but it can optionally override

00:22:13,720 --> 00:22:19,480
components that are within the core you

00:22:16,029 --> 00:22:21,940
know the core environment so in terms of

00:22:19,480 --> 00:22:24,190
water I would have actually delivered we

00:22:21,940 --> 00:22:28,620
need to maintain this kind of concept or

00:22:24,190 --> 00:22:30,710
this set of the facilitated sanity and

00:22:28,620 --> 00:22:33,559
stick with the release

00:22:30,710 --> 00:22:36,590
criteria producible audible to find more

00:22:33,559 --> 00:22:39,230
of the literal and what that means to

00:22:36,590 --> 00:22:40,700
different people is varying the link

00:22:39,230 --> 00:22:42,500
that I have mentioned earlier has formal

00:22:40,700 --> 00:22:44,600
definitions what we mean by that but

00:22:42,500 --> 00:22:46,970
basically reproducibility is we need to

00:22:44,600 --> 00:22:51,340
have and if anybody attended the

00:22:46,970 --> 00:22:55,250
reproducible built awk yesterday anyone

00:22:51,340 --> 00:22:57,710
okay it was amazing talk you missed a

00:22:55,250 --> 00:22:59,809
good one but it you discussed a lot of

00:22:57,710 --> 00:23:01,789
what this means to us and such that if

00:22:59,809 --> 00:23:06,409
you have the same build environment the

00:23:01,789 --> 00:23:08,480
same build repository the same set of

00:23:06,409 --> 00:23:10,580
point time snapshot of all the packages

00:23:08,480 --> 00:23:12,770
with the same inputs you will get the

00:23:10,580 --> 00:23:14,390
same outlets it's not like a bike the

00:23:12,770 --> 00:23:16,940
bike thing because if you do check sums

00:23:14,390 --> 00:23:20,270
on like Monica like em time they find

00:23:16,940 --> 00:23:27,080
that but you would end up with the same

00:23:20,270 --> 00:23:29,600
output we need audible bill tooling in

00:23:27,080 --> 00:23:33,380
such that we can trace it for security

00:23:29,600 --> 00:23:35,539
auditing CVEs that kind of thing there's

00:23:33,380 --> 00:23:37,970
some interesting things going on right

00:23:35,539 --> 00:23:39,140
now dr. space where like docker images

00:23:37,970 --> 00:23:42,350
are just kind of like this black box

00:23:39,140 --> 00:23:45,529
like you you may or may not know how's

00:23:42,350 --> 00:23:47,149
builds are created and what's in it you

00:23:45,529 --> 00:23:50,020
can unpack the tarball and stare at

00:23:47,149 --> 00:23:50,020
binaries all

00:23:50,560 --> 00:23:54,200
it's difficult audit their through

00:23:53,240 --> 00:23:55,370
working on it there's actually an

00:23:54,200 --> 00:23:57,200
auditing tool box that's being worked

00:23:55,370 --> 00:23:59,150
out so I'm getting up I'm looking

00:23:57,200 --> 00:24:00,920
forward to that which will all actually

00:23:59,150 --> 00:24:04,700
mention in a minute and something that

00:24:00,920 --> 00:24:06,740
we're working so bill tooling today and

00:24:04,700 --> 00:24:08,630
yesterday so we have Koji and coaching

00:24:06,740 --> 00:24:10,850
it's or in the original format was are

00:24:08,630 --> 00:24:13,640
concentric it was built in time with

00:24:10,850 --> 00:24:15,020
rpms was the delivery mechanism it was

00:24:13,640 --> 00:24:17,000
built in a time where the distro was the

00:24:15,020 --> 00:24:20,150
one stop shop in a cage for that very

00:24:17,000 --> 00:24:21,620
well somewhere along the way image

00:24:20,150 --> 00:24:23,960
factory integration was added it allows

00:24:21,620 --> 00:24:26,720
the churning of things like cloud images

00:24:23,960 --> 00:24:28,040
and and then we also have the live CD

00:24:26,720 --> 00:24:32,540
creator which I understand is being

00:24:28,040 --> 00:24:34,760
replaced at some point I'm not all be

00:24:32,540 --> 00:24:39,530
very I'm all of it I don't know what's

00:24:34,760 --> 00:24:42,950
going on with life CD creator punji so

00:24:39,530 --> 00:24:45,080
punji is a composed tool and that's

00:24:42,950 --> 00:24:46,940
that's been around for a while it's

00:24:45,080 --> 00:24:49,430
currently iterating being rewritten and

00:24:46,940 --> 00:24:53,270
adding new functionality lorax works

00:24:49,430 --> 00:24:55,250
does treat compositions bode is the

00:24:53,270 --> 00:24:58,190
update mechanism that everybody knows

00:24:55,250 --> 00:25:02,330
and loves and then the Wild West scoper

00:24:58,190 --> 00:25:04,730
so tooling for tomorrow tomorrow

00:25:02,330 --> 00:25:07,040
arbitrary tomorrow coach you Joe so

00:25:04,730 --> 00:25:09,200
could shoot auto will be content

00:25:07,040 --> 00:25:11,030
generator centric and if anybody went to

00:25:09,200 --> 00:25:12,650
the Koji to know talk yesterday will

00:25:11,030 --> 00:25:14,600
have a lot of more insight on this but

00:25:12,650 --> 00:25:19,070
in fact we a Content generator is a

00:25:14,600 --> 00:25:23,090
build mechanism or build system or tool

00:25:19,070 --> 00:25:25,460
that will take a set of inputs and

00:25:23,090 --> 00:25:27,680
provide a set of outputs based on a

00:25:25,460 --> 00:25:30,620
standard definition of what metadata is

00:25:27,680 --> 00:25:33,410
required to define and create those

00:25:30,620 --> 00:25:35,540
things and that metadata and the bill

00:25:33,410 --> 00:25:39,140
are facts can be passed within those

00:25:35,540 --> 00:25:41,420
systems and RPM built would then be a

00:25:39,140 --> 00:25:42,770
first-class content generator and there

00:25:41,420 --> 00:25:44,030
could be other things now the content

00:25:42,770 --> 00:25:47,510
generators it may be specific to go to

00:25:44,030 --> 00:25:50,450
were suppose we have in that in coaching

00:25:47,510 --> 00:25:52,550
one at eleven but in two it will be kind

00:25:50,450 --> 00:25:54,980
of a first-class data type for lack of a

00:25:52,550 --> 00:25:57,530
better term and and that will allow us

00:25:54,980 --> 00:26:00,260
from release engineering standpoint to

00:25:57,530 --> 00:26:01,640
pivot more rapidly on these newer types

00:26:00,260 --> 00:26:04,310
of built artifacts that need to be

00:26:01,640 --> 00:26:06,230
generated and produce based on community

00:26:04,310 --> 00:26:08,240
demand so I think one of the big things

00:26:06,230 --> 00:26:10,610
that I will admit that were like behind

00:26:08,240 --> 00:26:12,110
the right now is docker I think I think

00:26:10,610 --> 00:26:14,240
doctor has exploded and it's very

00:26:12,110 --> 00:26:17,330
popular and from a fedora tooling

00:26:14,240 --> 00:26:19,880
standpoint in terms of what we as a

00:26:17,330 --> 00:26:22,400
project officially release there are

00:26:19,880 --> 00:26:25,850
certain things that I think the world

00:26:22,400 --> 00:26:27,560
will go and curve on and then might we

00:26:25,850 --> 00:26:28,850
that might actually not be fair from a

00:26:27,560 --> 00:26:31,430
distro standpoint I don't even know

00:26:28,850 --> 00:26:32,870
anybody else is doing it at all what

00:26:31,430 --> 00:26:36,790
we're working on so maybe we're ahead of

00:26:32,870 --> 00:26:41,150
the curve but I like to think that we

00:26:36,790 --> 00:26:44,870
we're young features friends first where

00:26:41,150 --> 00:26:46,280
we try to travel very wise so one of the

00:26:44,870 --> 00:26:49,670
things that you know we could we could

00:26:46,280 --> 00:26:51,410
add is whatever the next docker is you

00:26:49,670 --> 00:26:52,700
know if it's not containers if you don't

00:26:51,410 --> 00:26:54,200
could be some other piece of technology

00:26:52,700 --> 00:26:55,880
it gets really hot in five years and

00:26:54,200 --> 00:26:57,680
it's just exploded overnight the whole

00:26:55,880 --> 00:27:00,130
world's excited about it and it's very

00:26:57,680 --> 00:27:01,670
revolutionary and and you know kind of

00:27:00,130 --> 00:27:03,110
changing in the way that we

00:27:01,670 --> 00:27:04,970
traditionally do things or a

00:27:03,110 --> 00:27:06,440
paradigm-shifting that kind of thing we

00:27:04,970 --> 00:27:09,190
should be able to adapt to that better

00:27:06,440 --> 00:27:11,510
and I think having something that is

00:27:09,190 --> 00:27:13,010
centered around this concept of this

00:27:11,510 --> 00:27:16,460
cottage enter we could then have a

00:27:13,010 --> 00:27:18,380
system that would integrate very tightly

00:27:16,460 --> 00:27:21,140
but we loosely coupled in the sense that

00:27:18,380 --> 00:27:23,810
it doesn't have to be integrated into

00:27:21,140 --> 00:27:28,790
the cozy code base to function as though

00:27:23,810 --> 00:27:30,970
it was and that that's going to that's

00:27:28,790 --> 00:27:35,780
going to lend itself to us in a big way

00:27:30,970 --> 00:27:37,130
so punji for it's currently in use it's

00:27:35,780 --> 00:27:39,710
constantly being iterated on that

00:27:37,130 --> 00:27:41,660
actually took compose time I think from

00:27:39,710 --> 00:27:43,810
something like 12 hours out of four

00:27:41,660 --> 00:27:46,550
hours like it was a huge performance

00:27:43,810 --> 00:27:49,310
increase it allows a lot of different

00:27:46,550 --> 00:27:52,310
building compose tasks to be farmed out

00:27:49,310 --> 00:27:53,630
through coji sort of things that should

00:27:52,310 --> 00:27:56,330
have been able to be run in parallel but

00:27:53,630 --> 00:27:58,970
weren't able to based on haanji three

00:27:56,330 --> 00:28:01,910
like design something or other they've

00:27:58,970 --> 00:28:04,040
been resolved a refactor to reinvented

00:28:01,910 --> 00:28:05,720
in such a way that you know parallel

00:28:04,040 --> 00:28:07,550
tasks can be executed parallel and just

00:28:05,720 --> 00:28:08,930
sped things up a lot for the composes

00:28:07,550 --> 00:28:11,180
which is going to lend itself to

00:28:08,930 --> 00:28:12,650
allowing raw hi to look so rawhide

00:28:11,180 --> 00:28:15,320
nightly builds are going to look more

00:28:12,650 --> 00:28:17,120
like a traditional release so when

00:28:15,320 --> 00:28:18,780
there's a test candidate or a beta or

00:28:17,120 --> 00:28:20,790
alpha beta build or

00:28:18,780 --> 00:28:23,460
such that you have all of the everything

00:28:20,790 --> 00:28:24,960
artifacts the ISOs those kind of things

00:28:23,460 --> 00:28:27,990
the rawhide nineties are going to look

00:28:24,960 --> 00:28:30,210
identical to that and that will

00:28:27,990 --> 00:28:32,430
hopefully lend itself to more easily

00:28:30,210 --> 00:28:36,750
integration with QA processes because

00:28:32,430 --> 00:28:38,310
all all of the composed outputs from the

00:28:36,750 --> 00:28:40,050
release engineering standpoint will be

00:28:38,310 --> 00:28:43,890
identical so we're not messing with

00:28:40,050 --> 00:28:48,140
different batches of build artifacts put

00:28:43,890 --> 00:28:50,100
out so later damage bills for containers

00:28:48,140 --> 00:28:52,230
this is what I was kind of alluding to a

00:28:50,100 --> 00:28:55,260
little bit that I thought we could could

00:28:52,230 --> 00:28:59,220
have done better on was really doing it

00:28:55,260 --> 00:29:01,320
anyways so maybe we're head in dr. this

00:28:59,220 --> 00:29:04,410
is concept of layered image you can have

00:29:01,320 --> 00:29:08,670
your base image just be a core set of

00:29:04,410 --> 00:29:12,210
honor packages then let's say your next

00:29:08,670 --> 00:29:13,510
layer will have Python and then well now

00:29:12,210 --> 00:29:16,570
I don't think

00:29:13,510 --> 00:29:19,810
because Dina your next layer has what's

00:29:16,570 --> 00:29:23,740
cool this week node no jst on top of

00:29:19,810 --> 00:29:25,810
that you have grunt that's yeah grunts

00:29:23,740 --> 00:29:28,780
the thing people like grunt grunt and

00:29:25,810 --> 00:29:30,070
then insert thing here and then your

00:29:28,780 --> 00:29:33,850
application on top so you have multiple

00:29:30,070 --> 00:29:37,480
layers underneath let's say layer 2 as a

00:29:33,850 --> 00:29:40,000
security exploit let's say for example

00:29:37,480 --> 00:29:45,880
the build system has 40 of these that

00:29:40,000 --> 00:29:49,000
share layer 2 how do you adit them well

00:29:45,880 --> 00:29:52,120
the concept of the layer build image the

00:29:49,000 --> 00:29:55,750
Laird image build service will allow

00:29:52,120 --> 00:29:57,820
number one though you dr. files to be

00:29:55,750 --> 00:29:59,530
integrated to disk it number two the

00:29:57,820 --> 00:30:03,160
builds be executed through Koji through

00:29:59,530 --> 00:30:06,040
the fed package bet pkg client and then

00:30:03,160 --> 00:30:10,150
number three these automated rebuilds of

00:30:06,040 --> 00:30:13,570
things based on audited notifications

00:30:10,150 --> 00:30:19,180
for CVEs so that people who use and

00:30:13,570 --> 00:30:21,640
consume applications and containers that

00:30:19,180 --> 00:30:24,100
are layered images out of the Fedora

00:30:21,640 --> 00:30:26,620
project and have confidence to the fact

00:30:24,100 --> 00:30:28,660
that they're there maintained at a

00:30:26,620 --> 00:30:30,730
certain amount of reliability a certain

00:30:28,660 --> 00:30:33,220
level of quality much like the

00:30:30,730 --> 00:30:39,010
distribution itself so it's kind of a

00:30:33,220 --> 00:30:40,990
new type of deliverable from fedora it's

00:30:39,010 --> 00:30:43,090
being worked on right now it is being

00:30:40,990 --> 00:30:44,470
worked on right now I actually really

00:30:43,090 --> 00:30:46,070
want to have a demo for everybody today

00:30:44,470 --> 00:30:51,860
but i found a

00:30:46,070 --> 00:30:54,800
in a thing I better it's osb esta yes

00:30:51,860 --> 00:30:58,190
yeah so I have a slide on in a couple in

00:30:54,800 --> 00:30:59,630
like to slide but it's OS PS it's the

00:30:58,190 --> 00:31:01,460
open shift build sort of system

00:30:59,630 --> 00:31:03,290
unfulfilled service which in full

00:31:01,460 --> 00:31:06,070
service so in should build service

00:31:03,290 --> 00:31:08,960
client actually so open shift version 3

00:31:06,070 --> 00:31:11,030
based on top of coover Nettie's as a lot

00:31:08,960 --> 00:31:13,250
of abstraction for things like builds

00:31:11,030 --> 00:31:16,340
build integration source image building

00:31:13,250 --> 00:31:20,680
and dev tooling and entire life cycle

00:31:16,340 --> 00:31:23,960
chain the entry point into WF depth

00:31:20,680 --> 00:31:27,170
eligible tooling has a profile for

00:31:23,960 --> 00:31:31,340
custom builder the open shift builds

00:31:27,170 --> 00:31:33,620
service client tools call into that API

00:31:31,340 --> 00:31:37,130
entry point and use a custom builder to

00:31:33,620 --> 00:31:42,860
afford us all of these features of the

00:31:37,130 --> 00:31:44,300
more we're both built tooling so that's

00:31:42,860 --> 00:31:46,850
something that's kind of being worked on

00:31:44,300 --> 00:31:48,230
right now we're aiming to have something

00:31:46,850 --> 00:31:51,140
available in staging in the next few

00:31:48,230 --> 00:31:53,660
weeks and so that we can

00:31:51,140 --> 00:31:55,760
are kicking the tires on it more details

00:31:53,660 --> 00:31:57,410
fall on that there is we have the teams

00:31:55,760 --> 00:31:59,720
working on we have a public convo on

00:31:57,410 --> 00:32:01,430
board but it's in a system called Tyga

00:31:59,720 --> 00:32:04,370
that may or may not be long for this

00:32:01,430 --> 00:32:05,960
world we're discussing we actually will

00:32:04,370 --> 00:32:08,720
probably tomorrow as a group get

00:32:05,960 --> 00:32:10,310
together and discuss a handful of tools

00:32:08,720 --> 00:32:12,320
and try to decide on something for

00:32:10,310 --> 00:32:14,420
project project management type things

00:32:12,320 --> 00:32:15,590
within the Fedora community and that's

00:32:14,420 --> 00:32:17,210
probably end up being a very long-winded

00:32:15,590 --> 00:32:20,540
discussion but anybody who is interested

00:32:17,210 --> 00:32:23,090
in project man style things indoor space

00:32:20,540 --> 00:32:25,280
we should organize and get the group

00:32:23,090 --> 00:32:27,230
together and talk about that sino the QA

00:32:25,280 --> 00:32:30,380
teams using fabricator reason in taiga

00:32:27,230 --> 00:32:31,970
when you do I would like to just as like

00:32:30,380 --> 00:32:33,740
a quick little tangent I would like to

00:32:31,970 --> 00:32:36,080
try and find a project manager style

00:32:33,740 --> 00:32:37,640
tool set the standardized on as a our

00:32:36,080 --> 00:32:39,350
community such that there's like an

00:32:37,640 --> 00:32:40,520
entry point for new contributors coming

00:32:39,350 --> 00:32:41,900
in we want to look at what's going on

00:32:40,520 --> 00:32:43,490
all over the place and you could just

00:32:41,900 --> 00:32:45,620
like oh I'm curious what's going on here

00:32:43,490 --> 00:32:47,210
they'll be great and and it ready to in

00:32:45,620 --> 00:32:50,510
to fit our hubs ever I see the frogs

00:32:47,210 --> 00:32:53,300
talk yeah one it's going to be amazing

00:32:50,510 --> 00:32:56,240
i'm psych on so stuff who like okay who

00:32:53,300 --> 00:32:59,210
has an android device okay who uses

00:32:56,240 --> 00:33:02,120
ghoul now with cards like bull swiping

00:32:59,210 --> 00:33:03,800
imagine that look better in web format

00:33:02,120 --> 00:33:06,590
and widgets and things that pop up based

00:33:03,800 --> 00:33:10,160
on like yeah in for fedora all things

00:33:06,590 --> 00:33:13,100
fedora it's usually got to talk all

00:33:10,160 --> 00:33:14,420
right mama two-week releases another big

00:33:13,100 --> 00:33:16,670
thing that we're working on right now is

00:33:14,420 --> 00:33:18,140
for our atomic the project atomic group

00:33:16,670 --> 00:33:19,850
is pushing the envelope they're doing a

00:33:18,140 --> 00:33:23,360
lot of iteration they do two weeks

00:33:19,850 --> 00:33:26,030
release our two-week cuts for upstream

00:33:23,360 --> 00:33:27,680
components they work on they work with

00:33:26,030 --> 00:33:29,960
us and actually requested that we start

00:33:27,680 --> 00:33:32,930
turning out two week releases on that so

00:33:29,960 --> 00:33:33,430
for floor 23 and beyond hopefully we get

00:33:32,930 --> 00:33:36,010
it

00:33:33,430 --> 00:33:38,290
riverpoint three final the plan is to

00:33:36,010 --> 00:33:40,030
actually have that be a new life cycle

00:33:38,290 --> 00:33:41,950
deliverable within the fedora space and

00:33:40,030 --> 00:33:44,020
that kind of starts that's going to be

00:33:41,950 --> 00:33:45,640
and I think the first thing that we

00:33:44,020 --> 00:33:48,130
start delivering outside of the general

00:33:45,640 --> 00:33:49,390
6 month cycle to start kind of like

00:33:48,130 --> 00:33:51,430
start paving the way to allowing

00:33:49,390 --> 00:33:55,060
different components or different

00:33:51,430 --> 00:33:57,460
products within the fedora space so

00:33:55,060 --> 00:34:01,060
workstation and server and cloud later

00:33:57,460 --> 00:34:03,100
maybe pick their own life cycle it was

00:34:01,060 --> 00:34:05,530
in fedora and actually set up released

00:34:03,100 --> 00:34:07,600
tooling to allow that the Wild West is

00:34:05,530 --> 00:34:09,580
gonna be khobor doper is actually a co /

00:34:07,600 --> 00:34:10,870
but for dr. which is already out there

00:34:09,580 --> 00:34:14,050
and staging it's being worked on it's

00:34:10,870 --> 00:34:15,580
it's it's very it's very good check you

00:34:14,050 --> 00:34:16,780
should go check it out other so the

00:34:15,580 --> 00:34:17,470
other is just we don't know that we

00:34:16,780 --> 00:34:18,670
don't know it's going to come next

00:34:17,470 --> 00:34:21,010
what's going to be the new interesting

00:34:18,670 --> 00:34:22,630
thing that every wants to check out and

00:34:21,010 --> 00:34:24,460
do I'm as sure as I'm standing in the

00:34:22,630 --> 00:34:27,850
way of the slide deck and the camera

00:34:24,460 --> 00:34:28,930
thing hi everybody sorry so we don't

00:34:27,850 --> 00:34:29,920
know what I reason to want to work on it

00:34:28,930 --> 00:34:31,990
I don't know what's going to come out in

00:34:29,920 --> 00:34:34,510
the next few years but we want to try to

00:34:31,990 --> 00:34:36,550
cater to that and be as quick to pivot

00:34:34,510 --> 00:34:39,100
as possible so really quick the tonic

00:34:36,550 --> 00:34:40,870
two weeks why should a plan but there's

00:34:39,100 --> 00:34:42,450
a plan to make like tested automate

00:34:40,870 --> 00:34:46,540
things and gets out the door so

00:34:42,450 --> 00:34:49,690
effectively so we will trigger a no

00:34:46,540 --> 00:34:52,810
Street kickoff build based on detecting

00:34:49,690 --> 00:34:54,640
a change in a artifact that goes into

00:34:52,810 --> 00:34:57,280
that right now today that's just set of

00:34:54,640 --> 00:35:01,450
RPM so there's an update to an RPM that

00:34:57,280 --> 00:35:04,090
lance and os tree kochi should right now

00:35:01,450 --> 00:35:06,460
bode does but based on a Fed message it

00:35:04,090 --> 00:35:08,380
will kick off a build knowing that bill

00:35:06,460 --> 00:35:10,990
it will automatically give up a test and

00:35:08,380 --> 00:35:13,960
that test numark massive fail if it

00:35:10,990 --> 00:35:17,470
fails it will go down to a bud filer or

00:35:13,960 --> 00:35:20,050
yeah well father if it passes it can be

00:35:17,470 --> 00:35:22,210
marked as a release candidate once it

00:35:20,050 --> 00:35:24,580
passes the set of tests and the tests

00:35:22,210 --> 00:35:28,390
are not yet up on the burgh Griffith the

00:35:24,580 --> 00:35:29,920
Goethe I OU PA gu RI oh it's a open

00:35:28,390 --> 00:35:31,750
source github clone you can sign with

00:35:29,920 --> 00:35:36,700
your fast count it's good stuff did you

00:35:31,750 --> 00:35:40,839
let him talk on today you should go so

00:35:36,700 --> 00:35:42,820
uh Pierre a pingu on IRC he wrote it

00:35:40,839 --> 00:35:44,950
it's good stuff we've been using it has

00:35:42,820 --> 00:35:46,240
existed for like a month so if you don't

00:35:44,950 --> 00:35:48,790
know about it's not like a huge like you

00:35:46,240 --> 00:35:50,950
missed the boat it's very very new we've

00:35:48,790 --> 00:35:53,260
been using and release engineering for

00:35:50,950 --> 00:35:56,349
our stuff and it's it's been very good

00:35:53,260 --> 00:35:59,650
for a workflow we're going to host the

00:35:56,349 --> 00:36:02,800
the atomic test up there that will run

00:35:59,650 --> 00:36:06,930
into year well went to KU shawls to nyan

00:36:02,800 --> 00:36:11,140
talked earlier today yeah one all right

00:36:06,930 --> 00:36:13,570
all right no it's a very simple testing

00:36:11,140 --> 00:36:17,260
framework the language for it is is

00:36:13,570 --> 00:36:19,540
based on the premise of exit codes of

00:36:17,260 --> 00:36:22,720
commands so you can use any test suite

00:36:19,540 --> 00:36:25,480
unit testing whatever cucumber anything

00:36:22,720 --> 00:36:28,180
if the test runs and fails then it that

00:36:25,480 --> 00:36:31,570
step in the test fails there's things to

00:36:28,180 --> 00:36:37,960
modify you know nonzero is not a failure

00:36:31,570 --> 00:36:40,300
etc but it's very simple so we're at

00:36:37,960 --> 00:36:42,339
past the testing rose boutonniere that

00:36:40,300 --> 00:36:45,880
will become a release candidate and then

00:36:42,339 --> 00:36:47,790
at the point of release the latest

00:36:45,880 --> 00:36:50,080
release candidate will go in will be

00:36:47,790 --> 00:36:52,300
uploaded to prom providers will be

00:36:50,080 --> 00:36:54,990
uploaded zip ftp will be Ottoman

00:36:52,300 --> 00:36:57,490
automated kick-off update the website

00:36:54,990 --> 00:36:58,660
that is not yet exist but working on it

00:36:57,490 --> 00:37:01,690
down the wiki if you want to check out

00:36:58,660 --> 00:37:04,030
the size of that and then update links I

00:37:01,690 --> 00:37:09,040
not mean on so now and maybe roll back

00:37:04,030 --> 00:37:11,440
if we break something and then our will

00:37:09,040 --> 00:37:13,300
have quick dioxins download launch

00:37:11,440 --> 00:37:16,089
instructions those kind of things so

00:37:13,300 --> 00:37:18,369
this is the base idea and a very

00:37:16,089 --> 00:37:20,020
shameless ripoff of this I stole this

00:37:18,369 --> 00:37:22,480
diagram from matt miller i want to thank

00:37:20,020 --> 00:37:24,880
him exponentially for writing this up

00:37:22,480 --> 00:37:27,339
because it's amazing this is the plan in

00:37:24,880 --> 00:37:33,460
visual form and I'm bad at diagramming

00:37:27,339 --> 00:37:36,700
so this is my diagram handiwork this is

00:37:33,460 --> 00:37:37,970
why the whole exactly so this is the

00:37:36,700 --> 00:37:40,849
layer difficult

00:37:37,970 --> 00:37:42,440
kind of an overlay overview so we

00:37:40,849 --> 00:37:44,840
observe this hit we have been packaged

00:37:42,440 --> 00:37:46,220
disc it is where the doctor files will

00:37:44,840 --> 00:37:47,599
live and dead package where you will set

00:37:46,220 --> 00:37:50,420
your commands look much like you are can

00:37:47,599 --> 00:37:53,359
build today the bill will call off the

00:37:50,420 --> 00:37:56,510
kochi kochi is linked into yoga tomorrow

00:37:53,359 --> 00:37:58,790
pls guests oohing those newest tool

00:37:56,510 --> 00:38:02,270
allows you to build inside of openshift

00:37:58,790 --> 00:38:04,300
environment and then we'll export all

00:38:02,270 --> 00:38:08,060
the build artifacts and store them in

00:38:04,300 --> 00:38:10,310
koji and then we can also auto upload

00:38:08,060 --> 00:38:12,710
them to a doctor registry or choice

00:38:10,310 --> 00:38:16,160
whether or not we host them ourselves or

00:38:12,710 --> 00:38:20,359
externally that is yet to be decided but

00:38:16,160 --> 00:38:23,570
that is on the road back so this is the

00:38:20,359 --> 00:38:25,270
Laird built kind of visualized versus me

00:38:23,570 --> 00:38:28,580
just hand waving and blabbing about it

00:38:25,270 --> 00:38:29,990
so what next so containers supporting

00:38:28,580 --> 00:38:32,180
alternate container formats is something

00:38:29,990 --> 00:38:33,380
that we've had requests for and is kind

00:38:32,180 --> 00:38:34,640
of on the road map for some

00:38:33,380 --> 00:38:36,349
indeterminate amount of time in the

00:38:34,640 --> 00:38:39,230
future but it is something that we're

00:38:36,349 --> 00:38:40,820
looking into so rocket run c is new in

00:38:39,230 --> 00:38:42,859
the open container foundation or

00:38:40,820 --> 00:38:46,490
whatever they rename themselves again i

00:38:42,859 --> 00:38:48,200
think i don't know so run c and then

00:38:46,490 --> 00:38:51,230
freight agent Ray's not fit with freight

00:38:48,200 --> 00:38:54,140
agent it's a it's a new it back totally

00:38:51,230 --> 00:38:57,710
new it's a new delivery mechanism for

00:38:54,140 --> 00:38:59,720
container root file systems that has

00:38:57,710 --> 00:39:01,760
system DN spot on the back end and it

00:38:59,720 --> 00:39:04,609
like is all kicked off with just me kuna

00:39:01,760 --> 00:39:05,960
follow so and then other what we did I

00:39:04,609 --> 00:39:07,099
mean what's the next big thing we don't

00:39:05,960 --> 00:39:09,550
know I mean there's there's new

00:39:07,099 --> 00:39:12,200
container technology pop up all the time

00:39:09,550 --> 00:39:13,280
atomic workstation the atomic

00:39:12,200 --> 00:39:14,390
workstation proposal they hit the

00:39:13,280 --> 00:39:15,270
mailing lists recently the desktop

00:39:14,390 --> 00:39:18,670
analysts

00:39:15,270 --> 00:39:22,800
which I don't know somebody in the

00:39:18,670 --> 00:39:26,160
working group wrote that at some point

00:39:22,800 --> 00:39:27,940
so at some point we're going to have to

00:39:26,160 --> 00:39:29,410
figure out what that's going to look

00:39:27,940 --> 00:39:30,580
like and how we need to build that how

00:39:29,410 --> 00:39:31,600
we need to deliver that from release

00:39:30,580 --> 00:39:32,710
engineering standpoint so that's

00:39:31,600 --> 00:39:34,360
something that we're kind of trying to

00:39:32,710 --> 00:39:36,790
pay is in 22 as it developed and as it

00:39:34,360 --> 00:39:38,920
progresses over time I for one am like

00:39:36,790 --> 00:39:42,790
really excited about it because I almost

00:39:38,920 --> 00:39:45,280
just built my package set as an oster as

00:39:42,790 --> 00:39:47,920
a atomic image anyways that I already

00:39:45,280 --> 00:39:50,920
have ansible playbooks my laptop some

00:39:47,920 --> 00:39:53,320
weird so no you'll have three moves now

00:39:50,920 --> 00:39:55,540
familiar nuoc you'll is an app is a

00:39:53,320 --> 00:39:57,280
container application specifications

00:39:55,540 --> 00:39:59,940
such that you can link together multiple

00:39:57,280 --> 00:40:02,350
containers to comprise an application

00:39:59,940 --> 00:40:03,880
such that you don't have multiple

00:40:02,350 --> 00:40:05,860
services running a sealed container each

00:40:03,880 --> 00:40:07,270
service would exist in its own provides

00:40:05,860 --> 00:40:11,650
metadata for linking it that kind of

00:40:07,270 --> 00:40:13,480
thing the build system so the layered

00:40:11,650 --> 00:40:15,730
image build system will at a later date

00:40:13,480 --> 00:40:18,340
support this and allow people to

00:40:15,730 --> 00:40:20,890
actually type in a middle qo application

00:40:18,340 --> 00:40:23,230
builds into the into the environment and

00:40:20,890 --> 00:40:26,860
then pop out the containers and people

00:40:23,230 --> 00:40:29,680
can pull this back and it'll if we do it

00:40:26,860 --> 00:40:31,360
right it'll work and then the next new

00:40:29,680 --> 00:40:33,510
hotness we just we don't know but these

00:40:31,360 --> 00:40:38,140
are kind of the things in our general

00:40:33,510 --> 00:40:39,550
you know future unknown timeline roadmap

00:40:38,140 --> 00:40:40,930
that we want to work on from release

00:40:39,550 --> 00:40:43,450
nearing standpoint in the next

00:40:40,930 --> 00:40:45,430
generation tooling on top of and to the

00:40:43,450 --> 00:40:48,480
side of currently continuing to maintain

00:40:45,430 --> 00:40:51,480
everything that is Fedora today

00:40:48,480 --> 00:40:51,480
questions

00:40:55,400 --> 00:41:00,460
it was either really good or really bad

00:40:57,220 --> 00:41:00,460

YouTube URL: https://www.youtube.com/watch?v=tefmFxHGiG8


