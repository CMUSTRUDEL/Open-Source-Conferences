Title: Flock 2015 - Reproducible builds in Koji - Mike McLean
Publication date: 2015-08-26
Playlist: Flock 2015
Description: 
	Reproducible builds are a hot topic lately, but Koji has been tracking reproducibility data since day one. In this talk, you'll learn how Koji generates build environments, what data it tracks, and how you can use that data to replicate builds.
Captions: 
	00:00:00,000 --> 00:00:02,780
it's all you

00:00:05,340 --> 00:00:07,400
Oh

00:00:13,759 --> 00:00:26,430
hi Mike some of you are at my last

00:00:16,980 --> 00:00:28,669
talked anybody here not used Koji I

00:00:26,430 --> 00:00:32,640
think this is more of as either a

00:00:28,669 --> 00:00:35,070
anybody here not actually built packages

00:00:32,640 --> 00:00:39,600
in before all right I don't think

00:00:35,070 --> 00:00:42,289
but so this is about reproducible bills

00:00:39,600 --> 00:00:42,289
and coaching and

00:00:52,310 --> 00:00:56,989
you're my last talked with the same

00:00:54,270 --> 00:00:56,989
slide I

00:00:58,620 --> 00:01:02,970
the wrong out Koji since the beginning

00:01:03,570 --> 00:01:07,390
quite a lot of it and maintaining it I

00:01:05,950 --> 00:01:08,830
work on the release configuration

00:01:07,390 --> 00:01:11,260
management team in the side of red hats

00:01:08,830 --> 00:01:13,360
which is a big fancy long or the

00:01:11,260 --> 00:01:14,920
basement its release engineering except

00:01:13,360 --> 00:01:15,620
there's other team populist engineering

00:01:14,920 --> 00:01:18,620
it's really

00:01:15,620 --> 00:01:21,050
a long long time ago I used to work on

00:01:18,620 --> 00:01:23,650
in saw our QA and even longer time

00:01:21,050 --> 00:01:26,410
before that I used to work on attacked

00:01:23,650 --> 00:01:28,930
the door I'm i can write out of my cam

00:01:26,410 --> 00:01:31,030
again

00:01:28,930 --> 00:01:32,110
other places are not my jam so don't

00:01:31,030 --> 00:01:37,030
just hit random Mike games on the

00:01:32,110 --> 00:01:40,480
internet expecting me I'm Mike him and

00:01:37,030 --> 00:01:42,280
my country my cam didn't log in for love

00:01:40,480 --> 00:01:49,360
it didn't log in for for a year and I

00:01:42,280 --> 00:01:52,030
got it I successfully sniped a free node

00:01:49,360 --> 00:01:56,680
account so so I am both my caveman

00:01:52,030 --> 00:02:00,520
country but for example I'm not my game

00:01:56,680 --> 00:02:01,780
on Twitter i would like to eat the guy

00:02:00,520 --> 00:02:05,790
this might come on Twitter doesn't seem

00:02:01,780 --> 00:02:05,790
to be using it but I don't know

00:02:07,379 --> 00:02:12,010
and there's actually a lot of my cams at

00:02:10,330 --> 00:02:17,650
Red Hat that I'm the one that's my can

00:02:12,010 --> 00:02:21,269
sometimes I get their mail all right

00:02:17,650 --> 00:02:23,950
about Cody you guys know about Koji just

00:02:21,269 --> 00:02:27,430
one thing sometimes we don't realize is

00:02:23,950 --> 00:02:29,080
that kid or is it the only the only

00:02:27,430 --> 00:02:30,430
project that uses Koji there were a

00:02:29,080 --> 00:02:31,750
bunch of others and that's not you

00:02:30,430 --> 00:02:34,950
that's not mean when you're completely

00:02:31,750 --> 00:02:34,950
that's just some prominent ones

00:02:35,780 --> 00:02:42,800
so I pulled this definition off of

00:02:38,990 --> 00:02:44,780
Wikipedia reproducibility in general is

00:02:42,800 --> 00:02:48,560
more of a turn these for scientific

00:02:44,780 --> 00:02:52,190
study but the same basic idea which

00:02:48,560 --> 00:02:56,030
means that somebody did something and we

00:02:52,190 --> 00:02:58,280
want to do the same thing so yes so in

00:02:56,030 --> 00:03:00,730
our case the experiment is a building

00:02:58,280 --> 00:03:04,690
they are definitely experience

00:03:00,730 --> 00:03:04,690
Frankenstein experiments sometimes

00:03:07,580 --> 00:03:13,790
what goes into a build is more than in

00:03:12,350 --> 00:03:16,910
some Hospital thing people thanks for

00:03:13,790 --> 00:03:21,460
scout and yes code is very important but

00:03:16,910 --> 00:03:23,300
that's not all the information that is

00:03:21,460 --> 00:03:25,960
entered in

00:03:23,300 --> 00:03:28,130
initiated there's also build parameters

00:03:25,960 --> 00:03:32,500
for example anything you might pass in a

00:03:28,130 --> 00:03:32,500
mock any sort of macro definition

00:03:32,690 --> 00:03:35,420
build options that get passed on command

00:03:34,970 --> 00:03:36,740
line

00:03:35,420 --> 00:03:39,970
build those those apart of the

00:03:36,740 --> 00:03:42,800
ingredients and the build environment is

00:03:39,970 --> 00:03:44,990
part of the ingredients so

00:03:42,800 --> 00:03:45,770
if you build same source in different

00:03:44,990 --> 00:03:49,790
environment you'll get a different

00:03:45,770 --> 00:03:51,950
result as an extreme example if you use

00:03:49,790 --> 00:03:54,740
a completely / version of GCC you will

00:03:51,950 --> 00:04:00,700
definitely get a different result if you

00:03:54,740 --> 00:04:00,700
get a result at all good luck

00:04:02,950 --> 00:04:06,950
so

00:04:05,360 --> 00:04:09,890
coach has been around for a long time I

00:04:06,950 --> 00:04:11,960
think in the last talk about a Michelin

00:04:09,890 --> 00:04:17,590
star development over ten years ago it's

00:04:11,960 --> 00:04:20,420
been over a year since one point out and

00:04:17,590 --> 00:04:26,300
Koji has always been from day one

00:04:20,420 --> 00:04:30,830
concern reproducibility and and Cody's

00:04:26,300 --> 00:04:35,870
approach has been not so much to focus

00:04:30,830 --> 00:04:37,700
on what folks are now boring out which

00:04:35,870 --> 00:04:41,060
is by quite reproducibility but just

00:04:37,700 --> 00:04:44,660
about reproducing the built environment

00:04:41,060 --> 00:04:46,040
and logging everything that we need to

00:04:44,660 --> 00:04:49,480
build in the same way so that you can

00:04:46,040 --> 00:04:51,530
all that data so if you do it again so

00:04:49,480 --> 00:04:53,360
just as a review i think a lot of you

00:04:51,530 --> 00:04:55,430
know this but this is just sort of put

00:04:53,360 --> 00:04:57,410
over you of what Coach does when it

00:04:55,430 --> 00:05:00,590
actually does the bill first creates a

00:04:57,410 --> 00:05:03,230
fresh book group every time that is

00:05:00,590 --> 00:05:05,630
generated losing mock

00:05:03,230 --> 00:05:08,420
we have mock generate a new route it's

00:05:05,630 --> 00:05:12,140
got to give it a repo a yell we go to

00:05:08,420 --> 00:05:15,590
use as the source for the rpms and that

00:05:12,140 --> 00:05:18,500
is a Rico that is generated by Koji when

00:05:15,590 --> 00:05:22,070
coaches generates Rico like that that

00:05:18,500 --> 00:05:23,900
represents content in bill tag and not

00:05:22,070 --> 00:05:28,040
everybody realizes this at a sick point

00:05:23,900 --> 00:05:32,330
in time and that's log so every repo

00:05:28,040 --> 00:05:37,540
that that we've ever used in Koji we

00:05:32,330 --> 00:05:43,120
have we have an event ID blog so we know

00:05:37,540 --> 00:05:43,120
which tag content was and everybody else

00:05:43,819 --> 00:05:46,819
r

00:05:51,080 --> 00:06:00,800
which is why we have so so match doesn't

00:05:56,210 --> 00:06:02,599
make repose mash lashes with those so so

00:06:00,800 --> 00:06:05,110
what you met the input smashed it is

00:06:02,599 --> 00:06:05,110
Remos

00:06:07,670 --> 00:06:11,170
very good

00:06:13,990 --> 00:06:21,050
okay good but it can be more but but

00:06:18,500 --> 00:06:24,350
mash mash mash mash users great repent

00:06:21,050 --> 00:06:26,300
yes yes so and then it takes the result

00:06:24,350 --> 00:06:29,140
of the query go in combines there's a

00:06:26,300 --> 00:06:29,140
two-group oh yes

00:06:29,150 --> 00:06:38,180
oh right it does the night ok yes no we

00:06:35,420 --> 00:06:39,890
don't use mash imagine yeah but not back

00:06:38,180 --> 00:06:51,460
instantly not actually exist when you're

00:06:39,890 --> 00:06:51,460
Cody I'm asking macungie

00:06:52,390 --> 00:06:54,510
who

00:06:55,590 --> 00:07:03,600
so mashes all matched is quite a bit

00:07:00,450 --> 00:07:05,130
slower I mean not terribly slower but if

00:07:03,600 --> 00:07:07,730
it's slower than just running for you

00:07:05,130 --> 00:07:07,730
reply itself

00:07:10,350 --> 00:07:14,130
the

00:07:11,980 --> 00:07:17,580
really sort of thing can't happen

00:07:14,130 --> 00:07:19,020
capacity for files in place

00:07:17,580 --> 00:07:22,860
possibly

00:07:19,020 --> 00:07:24,650
place it will download all the packages

00:07:22,860 --> 00:07:26,949
and so passionate out

00:07:24,650 --> 00:07:26,949
was

00:07:27,150 --> 00:07:33,210
so it's a bit of a going down a rabbit

00:07:32,130 --> 00:07:36,750
hole here because it's not really

00:07:33,210 --> 00:07:37,980
pertinent to those are but but no it but

00:07:36,750 --> 00:07:39,390
it's interesting point because I didn't

00:07:37,980 --> 00:07:41,220
want people understand sort of you know

00:07:39,390 --> 00:07:44,250
a little bit of detail about what

00:07:41,220 --> 00:07:46,560
happens so at the moment koji just uses

00:07:44,250 --> 00:07:49,170
a plain old pre grupo from a single

00:07:46,560 --> 00:07:51,030
single arch single archery club so no

00:07:49,170 --> 00:07:56,900
multi thing is going on in the cozy

00:07:51,030 --> 00:07:59,850
proposal which for 99.999% of bills is

00:07:56,900 --> 00:08:02,610
all you need and a couple odd bills

00:07:59,850 --> 00:08:05,850
really want a couple odd multi-link

00:08:02,610 --> 00:08:08,750
things in there or there is arch

00:08:05,850 --> 00:08:08,750
bootstrapping so

00:08:09,630 --> 00:08:14,030
people usually kochi to fix down

00:08:17,529 --> 00:08:20,129
alright

00:08:21,129 --> 00:08:25,360
so in order to make sure that we can do

00:08:23,379 --> 00:08:29,169
it again if we had to go to traxxa bunch

00:08:25,360 --> 00:08:30,669
of data and I sort of cast this in terms

00:08:29,169 --> 00:08:34,479
of the ingredient list that we had

00:08:30,669 --> 00:08:37,659
before so in terms of source code well

00:08:34,479 --> 00:08:40,539
we have this for and I also I apologize

00:08:37,659 --> 00:08:43,329
I code you can because you can build

00:08:40,539 --> 00:08:45,730
more things than our pms but this talk

00:08:43,329 --> 00:08:49,019
is really talking about just off the

00:08:45,730 --> 00:08:49,019
offense which for fedora is

00:08:49,690 --> 00:08:53,830
about still care about images built

00:08:52,150 --> 00:08:57,970
image bills too but that's just like

00:08:53,830 --> 00:08:59,470
they do for now but for source code we

00:08:57,970 --> 00:09:01,450
have that country two different ways

00:08:59,470 --> 00:09:04,330
because every RPM bill we save the SR

00:09:01,450 --> 00:09:06,960
p.m. so we have a source that way and as

00:09:04,330 --> 00:09:10,210
long as they know the developer has

00:09:06,960 --> 00:09:12,610
built sanely we also have to get ref

00:09:10,210 --> 00:09:16,300
stored in

00:09:12,610 --> 00:09:19,870
info so in approaching two point oh I

00:09:16,300 --> 00:09:21,579
want to get that into a saner part of

00:09:19,870 --> 00:09:24,640
the database where the square e moreland

00:09:21,579 --> 00:09:27,790
more the first class citizen but still

00:09:24,640 --> 00:09:31,480
we have it but he's possible to use

00:09:27,790 --> 00:09:35,130
dinner in France my pad right I said as

00:09:31,480 --> 00:09:35,130
long as a developer is doing the same

00:09:35,250 --> 00:09:38,890
another thing I'd like to have a coach

00:09:37,029 --> 00:09:42,600
at the point i always have the ability

00:09:38,890 --> 00:09:42,600
to have some for policy checks

00:09:45,050 --> 00:09:51,290
sorry my laptop but to allow people to

00:09:48,920 --> 00:09:56,240
run their coach is this is to set rules

00:09:51,290 --> 00:09:58,800
about what sorts of references are

00:09:56,240 --> 00:10:01,250
and may want all sorts of rumors about

00:09:58,800 --> 00:10:01,250
that

00:10:01,990 --> 00:10:08,980
you may want to say you can only go from

00:10:03,550 --> 00:10:11,260
this just get branch for this tag things

00:10:08,980 --> 00:10:14,020
like that and that those rules are hard

00:10:11,260 --> 00:10:20,500
to implement now about writing a very

00:10:14,020 --> 00:10:22,899
complicated clip so anyway source code

00:10:20,500 --> 00:10:24,610
we got to check one way or the other we

00:10:22,899 --> 00:10:30,760
know what the source code was build

00:10:24,610 --> 00:10:35,440
parameters well there aren't generally

00:10:30,760 --> 00:10:38,050
not too many the grandmothers per se go

00:10:35,440 --> 00:10:39,990
into

00:10:38,050 --> 00:10:42,930
but yeah

00:10:39,990 --> 00:10:46,830
but we what there are can be captured

00:10:42,930 --> 00:10:51,390
either somewhere inside the srp myself

00:10:46,830 --> 00:10:53,820
because Princeton I frozen srbija and

00:10:51,390 --> 00:10:57,120
step bottom and that's just already

00:10:53,820 --> 00:10:58,290
there some some bills will have a task

00:10:57,120 --> 00:10:59,640
parameter that tweet something

00:10:58,290 --> 00:11:01,560
particularly if you look at the way may

00:10:59,640 --> 00:11:02,820
even get to it what you gettin not find

00:11:01,560 --> 00:11:05,279
out that maybe those have lots of

00:11:02,820 --> 00:11:09,020
different options get past it as we

00:11:05,279 --> 00:11:14,139
captured or build tag itself for example

00:11:09,020 --> 00:11:18,040
just dis tags are the way that we

00:11:14,139 --> 00:11:20,259
the package inside of

00:11:18,040 --> 00:11:23,069
crazy just a big building

00:11:20,259 --> 00:11:23,069
and that sort of

00:11:23,250 --> 00:11:27,010
so really that shows it more in the

00:11:25,540 --> 00:11:32,320
build environment and lastly we have a

00:11:27,010 --> 00:11:35,880
built environment we also have coach

00:11:32,320 --> 00:11:40,000
coachy also sort of doubles up on this

00:11:35,880 --> 00:11:44,740
so one point one when we create the

00:11:40,000 --> 00:11:47,800
environment we have we have repo ID that

00:11:44,740 --> 00:11:49,380
we used to we fed them off site here

00:11:47,800 --> 00:11:55,120
built this don't worry I there so no

00:11:49,380 --> 00:11:57,730
which tag and which event in time that

00:11:55,120 --> 00:11:59,480
that we used to share that

00:11:57,730 --> 00:12:01,220
so we can

00:11:59,480 --> 00:12:03,470
look at the history of that of that of

00:12:01,220 --> 00:12:07,040
the tag contents inside here this is

00:12:03,470 --> 00:12:08,570
what was in there so we can always

00:12:07,040 --> 00:12:12,190
remember so we can remake that repo from

00:12:08,570 --> 00:12:16,160
you to police the data is there but also

00:12:12,190 --> 00:12:19,149
we record all the organza go in doing so

00:12:16,160 --> 00:12:19,149
we have that long as well

00:12:24,230 --> 00:12:27,870
we don't track everything in the world

00:12:26,160 --> 00:12:29,880
there are some things we should probably

00:12:27,870 --> 00:12:32,660
also track and track centers in the

00:12:29,880 --> 00:12:35,640
future the software outside bill Groot

00:12:32,660 --> 00:12:37,950
we don't have a record of right now so

00:12:35,640 --> 00:12:39,540
the exact version of mock that were used

00:12:37,950 --> 00:12:42,000
to generate the bill group that could be

00:12:39,540 --> 00:12:45,810
important we got track it we were on the

00:12:42,000 --> 00:12:47,130
future likewise likewise Koji itself and

00:12:45,810 --> 00:12:51,680
for that matter the running kernel

00:12:47,130 --> 00:12:51,680
version shouldn't affect the build

00:12:51,950 --> 00:12:59,339
theoretically but somehow it does jboss

00:12:57,149 --> 00:13:03,140
developers blog about this is completed

00:12:59,339 --> 00:13:03,140
crying about the user at utilities

00:13:06,350 --> 00:13:12,149
yeah that's usually what happens it

00:13:09,630 --> 00:13:13,740
tends to be unidirectional yeah for the

00:13:12,149 --> 00:13:17,279
most part what happens is if you have a

00:13:13,740 --> 00:13:19,440
kernel that's too old some some some

00:13:17,279 --> 00:13:21,720
packages will fail or build weirdly

00:13:19,440 --> 00:13:23,579
because they they say oh is this kernel

00:13:21,720 --> 00:13:25,440
feature Oh Colonel feature around no

00:13:23,579 --> 00:13:32,870
well let's not build this whole other

00:13:25,440 --> 00:13:32,870
sub module even though yeah

00:13:48,790 --> 00:13:51,660
check that

00:13:53,080 --> 00:13:55,740
who

00:13:56,700 --> 00:13:59,700
second

00:14:06,610 --> 00:14:09,790
it soon

00:14:17,420 --> 00:14:24,110
so suffice to say we could do a better

00:14:20,840 --> 00:14:29,930
job that we will so i'll talk about

00:14:24,110 --> 00:14:33,860
debian any debian fans and house it's

00:14:29,930 --> 00:14:35,150
okay i won't judge so who's familiar

00:14:33,860 --> 00:14:40,160
with the debian reproducible builds

00:14:35,150 --> 00:14:42,200
project so these guys are doing great

00:14:40,160 --> 00:14:44,810
work and since some of you are familiar

00:14:42,200 --> 00:14:47,780
with all its final briefly deputy

00:14:44,810 --> 00:14:51,800
reproducible builds project has has a

00:14:47,780 --> 00:14:54,290
very laudable goal they want they one

00:14:51,800 --> 00:14:58,190
for every package in debian which is a

00:14:54,290 --> 00:15:05,470
lot to be a bite for bite rebuildable

00:14:58,190 --> 00:15:08,900
from source and it's going to be one but

00:15:05,470 --> 00:15:13,310
and the reason that they want by provide

00:15:08,900 --> 00:15:14,630
is they want independent verification

00:15:13,310 --> 00:15:17,330
they want

00:15:14,630 --> 00:15:20,330
people to have confidence that the code

00:15:17,330 --> 00:15:23,840
it there the binders the shipping do in

00:15:20,330 --> 00:15:26,840
fact correspond to code that the claim

00:15:23,840 --> 00:15:30,680
that does and really for their

00:15:26,840 --> 00:15:32,600
respective the most direct way to prove

00:15:30,680 --> 00:15:38,270
that is to rebuild it again and get the

00:15:32,600 --> 00:15:43,430
same lights so in order to achieve that

00:15:38,270 --> 00:15:44,870
they've been working you can read it

00:15:43,430 --> 00:15:47,360
rebounder project there's two major

00:15:44,870 --> 00:15:50,450
areas of work as I see if they've done

00:15:47,360 --> 00:15:54,820
one is they built a new tool chain that

00:15:50,450 --> 00:15:57,260
that records their build environment in

00:15:54,820 --> 00:16:02,210
adelanto and also touching that allows

00:15:57,260 --> 00:16:04,580
them to replicate that and to they've

00:16:02,210 --> 00:16:10,720
been fixing individual packages case by

00:16:04,580 --> 00:16:10,720
case basis and they find problems so

00:16:14,520 --> 00:16:18,930
Isabel on people

00:16:19,630 --> 00:16:28,360
of more to help with Alex's bills come

00:16:22,120 --> 00:16:31,870
on this theme time yes so so individual

00:16:28,360 --> 00:16:32,830
packages so so we talked about recording

00:16:31,870 --> 00:16:35,530
the built environment coach has been

00:16:32,830 --> 00:16:36,940
doing this since day one they have these

00:16:35,530 --> 00:16:39,340
build info files they arrive which

00:16:36,940 --> 00:16:42,640
contain very similar to data to what

00:16:39,340 --> 00:16:44,950
cody is tracking including some but not

00:16:42,640 --> 00:16:49,840
all the other stuff that I said that we

00:16:44,950 --> 00:16:53,830
should be tracking but aren't ya and in

00:16:49,840 --> 00:16:55,930
an ideal world if you have the same

00:16:53,830 --> 00:16:57,700
input the same source and the same bill

00:16:55,930 --> 00:17:01,260
parameters and the same built

00:16:57,700 --> 00:17:04,900
environment and you run the build again

00:17:01,260 --> 00:17:07,569
why shouldn't you get the same exact

00:17:04,900 --> 00:17:09,370
same outfit out well you don't in a lot

00:17:07,569 --> 00:17:11,260
of cases and they found a bunch of

00:17:09,370 --> 00:17:13,839
reasons why it's it boils down to

00:17:11,260 --> 00:17:15,699
there's a lot of there's a long list on

00:17:13,839 --> 00:17:17,319
their project website but it was down

00:17:15,699 --> 00:17:20,620
two major groups one is non determinism

00:17:17,319 --> 00:17:22,630
and and you're right time stamps time

00:17:20,620 --> 00:17:24,199
stamps are given be put in I'm stance

00:17:22,630 --> 00:17:27,300
every time

00:17:24,199 --> 00:17:30,570
yeah they put time stamp stick with

00:17:27,300 --> 00:17:34,110
timestamps and extreme you know in the

00:17:30,570 --> 00:17:37,920
binaries and but in broken oh yeah

00:17:34,110 --> 00:17:42,570
documents and help strings anything in

00:17:37,920 --> 00:17:46,980
any God and randomness some builds

00:17:42,570 --> 00:17:49,560
either had some some abilities number

00:17:46,980 --> 00:17:52,380
generator to decide something or other

00:17:49,560 --> 00:17:58,440
there was I think they talked about one

00:17:52,380 --> 00:18:01,800
built that was using fortune to generate

00:17:58,440 --> 00:18:07,470
some generate some documentation at

00:18:01,800 --> 00:18:09,800
build time so when they find cases like

00:18:07,470 --> 00:18:12,530
this they go in and they patch the bill

00:18:09,800 --> 00:18:14,400
they and they usually patch it up stream

00:18:12,530 --> 00:18:16,170
and then there are other environmental

00:18:14,400 --> 00:18:17,280
factors so where where a build is

00:18:16,170 --> 00:18:20,940
pulling in something from the

00:18:17,280 --> 00:18:23,340
environment that really should not it

00:18:20,940 --> 00:18:25,680
shouldn't it should be pulling in a

00:18:23,340 --> 00:18:30,070
particular uid orgy ID from the build

00:18:25,680 --> 00:18:32,690
environment just probably not invariant

00:18:30,070 --> 00:18:34,340
it shouldn't be pulling the exact

00:18:32,690 --> 00:18:37,049
running kernel version down at the very

00:18:34,340 --> 00:18:39,239
last bit and somatic

00:18:37,049 --> 00:18:41,730
in a file or a string because that's

00:18:39,239 --> 00:18:43,320
also shouldn't matter to that fine

00:18:41,730 --> 00:18:45,600
granularity you definitely don't need to

00:18:43,320 --> 00:18:47,700
stick it in some calming somewhere and

00:18:45,600 --> 00:18:49,049
so they're going through in their clique

00:18:47,700 --> 00:18:53,659
saying there's a long list if you look

00:18:49,049 --> 00:18:56,639
on that person could have averted

00:18:53,659 --> 00:18:59,129
reasonable Sadie's home building for

00:18:56,639 --> 00:19:01,059
formatting nice and arbitrary while the

00:18:59,129 --> 00:19:05,519
existing

00:19:01,059 --> 00:19:07,960
his package were too much momentum

00:19:05,519 --> 00:19:15,279
filter like hands go on the system me

00:19:07,960 --> 00:19:17,379
now inserting a separate file that oh oh

00:19:15,279 --> 00:19:19,299
yeah I guess in terms of packaging yeah

00:19:17,379 --> 00:19:21,580
sure you could possibly it could

00:19:19,299 --> 00:19:31,830
possibly fix that the epic level sure

00:19:21,580 --> 00:19:31,830
yeah so right without without any less

00:19:33,630 --> 00:19:36,630
why

00:19:39,070 --> 00:19:45,740
so this is from the debian website and

00:19:41,920 --> 00:19:48,760
you can see a very long list oh I know

00:19:45,740 --> 00:19:48,760
you can read this help

00:19:52,530 --> 00:19:58,320
it's a very long list of different types

00:19:55,200 --> 00:20:00,960
of issues that they have time stamps

00:19:58,320 --> 00:20:05,160
from C++ macros and the number of

00:20:00,960 --> 00:20:08,250
affected package is different umask this

00:20:05,160 --> 00:20:12,330
goes on for very long time and I don't

00:20:08,250 --> 00:20:16,930
think it's even five state with

00:20:12,330 --> 00:20:19,830
timestamps x games I'm

00:20:16,930 --> 00:20:19,830
randomness

00:20:22,740 --> 00:20:31,920
bad bad that goes all right so

00:20:34,070 --> 00:20:39,620
personally I'm not a few debian van it's

00:20:36,530 --> 00:20:41,840
always seemed like a weird alien but

00:20:39,620 --> 00:20:46,310
these guys are doing an awesome job they

00:20:41,840 --> 00:20:48,950
really are that they're it's a it's a

00:20:46,310 --> 00:20:50,090
Herculean task there's so many packaged

00:20:48,950 --> 00:20:52,460
up there and there's so much non

00:20:50,090 --> 00:20:54,800
determinism and they have a pretty graph

00:20:52,460 --> 00:20:56,450
of their progress and then they made a

00:20:54,800 --> 00:20:58,520
lot of progress but it's really tapering

00:20:56,450 --> 00:21:02,630
I think it's going to take them a long

00:20:58,520 --> 00:21:04,520
time to get the long tail but the work

00:21:02,630 --> 00:21:07,670
that a lot of the work they're doing

00:21:04,520 --> 00:21:11,470
they're fixing upstream so we'll get it

00:21:07,670 --> 00:21:11,470
to eventually

00:21:14,140 --> 00:21:17,310
immediately sir

00:21:17,460 --> 00:21:22,360
more

00:21:18,730 --> 00:21:24,910
I I've been in touch with them a little

00:21:22,360 --> 00:21:27,549
bit I really need to get back in touch

00:21:24,910 --> 00:21:30,460
with them and see what I've need to

00:21:27,549 --> 00:21:33,340
trick his idols I mean I'll get to this

00:21:30,460 --> 00:21:35,200
later i don't i don't really have the

00:21:33,340 --> 00:21:40,360
time right out of the door reproducible

00:21:35,200 --> 00:21:45,250
builds initiative but and there's a

00:21:40,360 --> 00:21:48,940
question of to what extent do we have

00:21:45,250 --> 00:21:51,429
the same motivations as Divya so let's

00:21:48,940 --> 00:21:52,540
anyway back to coaching so as i said

00:21:51,429 --> 00:21:53,830
coach he's been tracking build

00:21:52,540 --> 00:21:57,340
environment since day one but we have

00:21:53,830 --> 00:21:59,710
sort of have different goals when when I

00:21:57,340 --> 00:22:04,179
put these features into Koji I wasn't

00:21:59,710 --> 00:22:05,799
thinking let's let's publish this data

00:22:04,179 --> 00:22:07,390
so the people who are paid our bills I

00:22:05,799 --> 00:22:10,390
was writing this for the internal

00:22:07,390 --> 00:22:13,179
redhead build system that was the thing

00:22:10,390 --> 00:22:14,980
no this was about reproducing failures

00:22:13,179 --> 00:22:16,630
because our previous build system did

00:22:14,980 --> 00:22:19,780
not have any any level of

00:22:16,630 --> 00:22:21,549
reproducibility and it was a terrible

00:22:19,780 --> 00:22:26,730
situation to be in because if something

00:22:21,549 --> 00:22:33,010
went wrong and you need to rebuild it

00:22:26,730 --> 00:22:35,679
you could introduce a bug from a check

00:22:33,010 --> 00:22:37,360
from a changing build environment when

00:22:35,679 --> 00:22:42,610
you rebuild a sit with simple one-line

00:22:37,360 --> 00:22:45,520
patch and not have any idea why or you

00:22:42,610 --> 00:22:46,830
could have a failure that you couldn't

00:22:45,520 --> 00:22:50,240
explain whether you could

00:22:46,830 --> 00:22:50,240
they didn't understand it was

00:22:52,300 --> 00:22:59,160
the food was of the

00:22:56,320 --> 00:23:01,840
quite possible

00:22:59,160 --> 00:23:04,900
your crown

00:23:01,840 --> 00:23:07,100
would not surprise me in the slightest

00:23:04,900 --> 00:23:10,970
when when I first started working with

00:23:07,100 --> 00:23:15,290
the centos guys they had they had

00:23:10,970 --> 00:23:16,820
reverse engineered all this all this

00:23:15,290 --> 00:23:18,230
information about the different high

00:23:16,820 --> 00:23:21,620
builders that see how it has had

00:23:18,230 --> 00:23:25,640
builders we have had a builder eat that

00:23:21,620 --> 00:23:27,860
lived for months years and just kept

00:23:25,640 --> 00:23:30,290
getting package updates in it said the

00:23:27,860 --> 00:23:33,080
same bill root is worth like imagine if

00:23:30,290 --> 00:23:36,500
you had like a actually had a laptop

00:23:33,080 --> 00:23:40,910
that you had started with fedora one and

00:23:36,500 --> 00:23:44,540
just kept yum updating without doing any

00:23:40,910 --> 00:23:48,130
of that fixing up the broken packages at

00:23:44,540 --> 00:23:51,890
every step all the way up to talk to 22

00:23:48,130 --> 00:23:53,480
what kind of install environment would

00:23:51,890 --> 00:24:01,550
you have well you have something like a

00:23:53,480 --> 00:24:02,809
beehive bill group so so when we wrote

00:24:01,550 --> 00:24:04,309
kogi we will vary

00:24:02,809 --> 00:24:05,299
we really wanted to have some sanity

00:24:04,309 --> 00:24:07,399
here so that's what we were going for

00:24:05,299 --> 00:24:11,899
was sanity and also the ability to

00:24:07,399 --> 00:24:13,370
reproduce feathers and since we drunk

00:24:11,899 --> 00:24:15,740
all this stuff it's one really nice

00:24:13,370 --> 00:24:19,070
thing about it is if you do discover

00:24:15,740 --> 00:24:22,850
them say there was a bug in GMC version

00:24:19,070 --> 00:24:24,230
XYZ and it could affect things that were

00:24:22,850 --> 00:24:25,999
built with that version people oopsie

00:24:24,230 --> 00:24:29,509
you can actually go in the database and

00:24:25,999 --> 00:24:31,370
figure out exactly which things we build

00:24:29,509 --> 00:24:33,520
with that version do you see that we

00:24:31,370 --> 00:24:36,480
might need to

00:24:33,520 --> 00:24:40,380
whereas if you didn't try that with the

00:24:36,480 --> 00:24:40,380
previous system you were just

00:24:40,780 --> 00:24:47,750
too soft it will examine their

00:24:43,590 --> 00:24:47,750
distro up to look

00:24:48,459 --> 00:24:52,249
so that's sort of why we have a

00:24:50,659 --> 00:24:54,320
reproduce ability that we have in Kochi

00:24:52,249 --> 00:24:57,429
and by the way a couple of ask questions

00:24:54,320 --> 00:24:57,429
but please ask questions if

00:25:04,600 --> 00:25:07,320
this is a

00:25:07,770 --> 00:25:12,870
a little bit of a duplicate I think

00:25:09,060 --> 00:25:16,680
aside from before just a reminder for

00:25:12,870 --> 00:25:18,240
coach no roots we have the input is

00:25:16,680 --> 00:25:20,610
coming each bill task is given source

00:25:18,240 --> 00:25:24,330
code or target supposed to go to target

00:25:20,610 --> 00:25:26,040
those the two things to provide when

00:25:24,330 --> 00:25:28,590
Kody does the build it's going to look

00:25:26,040 --> 00:25:35,520
at that with the bill tag for that

00:25:28,590 --> 00:25:37,170
target get the current repo which

00:25:35,520 --> 00:25:39,330
reference is a key code point in time

00:25:37,170 --> 00:25:42,060
generate a mahkum knocked over run my

00:25:39,330 --> 00:25:45,140
bill and we have because dead long day

00:25:42,060 --> 00:25:45,140
I'd rather talk about before

00:25:45,740 --> 00:25:48,880
yeah so

00:25:51,600 --> 00:25:54,840
is there

00:25:56,540 --> 00:26:00,290
reach back on

00:26:06,169 --> 00:26:16,019
persons all things are good it's not

00:26:11,539 --> 00:26:18,000
it's not that accessible but i have not

00:26:16,019 --> 00:26:22,200
a demo because i'm not doing a live demo

00:26:18,000 --> 00:26:26,639
but i have i have pictures of doing

00:26:22,200 --> 00:26:29,279
exactly that so about it's not allowed

00:26:26,639 --> 00:26:31,440
for ordinary right attends reason or

00:26:29,279 --> 00:26:35,669
Longfellow and even stretch views from

00:26:31,440 --> 00:26:38,580
particular equality in decent guy it's

00:26:35,669 --> 00:26:42,360
not right and also the second yeah yeah

00:26:38,580 --> 00:26:45,120
so so I'll get to that so yes you can't

00:26:42,360 --> 00:26:51,179
do this so let's look if you fart oh

00:26:45,120 --> 00:26:52,830
it's uh just the places he would look to

00:26:51,179 --> 00:26:55,259
get to get this reproducible today that

00:26:52,830 --> 00:26:58,440
we have in kochi the task / ammeter does

00:26:55,259 --> 00:27:00,240
come from a task info you can get down

00:26:58,440 --> 00:27:03,450
man line getting the webui you can get

00:27:00,240 --> 00:27:06,960
in the APL governor contents the list

00:27:03,450 --> 00:27:09,230
over command there's there's also what

00:27:06,960 --> 00:27:11,150
you i also

00:27:09,230 --> 00:27:14,590
cuz there's nothing in the web you are

00:27:11,150 --> 00:27:14,590
to see a lot you can do

00:27:15,010 --> 00:27:22,540
and the yum repo for a recent bill the

00:27:19,210 --> 00:27:26,020
young Rico may still be there so if you

00:27:22,540 --> 00:27:29,520
if built happened earlier today you can

00:27:26,020 --> 00:27:34,120
probably just reference that repo and

00:27:29,520 --> 00:27:35,680
build again for all the builds we still

00:27:34,120 --> 00:27:38,520
have the data and yes coach and can be

00:27:35,680 --> 00:27:43,750
make that record and I'll show you now

00:27:38,520 --> 00:27:46,090
unfortunately it's a privileged action

00:27:43,750 --> 00:27:47,410
so you don't have to be an admin to that

00:27:46,090 --> 00:27:50,320
part but you do have to have the repo

00:27:47,410 --> 00:27:53,370
part which generally don't man handing

00:27:50,320 --> 00:27:53,370
out really but

00:27:54,440 --> 00:27:58,930
yeah so anyone can run cause you read

00:27:58,009 --> 00:28:01,990
every code

00:27:58,930 --> 00:28:06,760
so generally very powerful very body

00:28:01,990 --> 00:28:09,730
yeah yeah so but before you know that

00:28:06,760 --> 00:28:13,300
let's talk about look a lot because I

00:28:09,730 --> 00:28:16,420
know we have the Fed package command

00:28:13,300 --> 00:28:24,960
that does mock bill but I think that a

00:28:16,420 --> 00:28:24,960
poem by default that references the main

00:28:25,140 --> 00:28:32,200
religion for ladies postcode become very

00:28:28,810 --> 00:28:33,700
pretty maybe with auction i think but by

00:28:32,200 --> 00:28:36,790
default i think it actually references

00:28:33,700 --> 00:28:40,350
like the biking australis tribute yes

00:28:36,790 --> 00:28:40,350
exactly but there is also

00:28:40,730 --> 00:28:45,560
which is not the sacred out kajal is a

00:28:44,399 --> 00:28:48,970
00:28:45,560 --> 00:28:51,640
horrified and eating people

00:28:48,970 --> 00:28:54,640
come on i often

00:28:51,640 --> 00:28:54,640
Wiz

00:28:55,830 --> 00:28:58,669
I think not

00:29:02,110 --> 00:29:07,499
does

00:29:04,440 --> 00:29:07,499
how do

00:29:09,970 --> 00:29:15,200
right uses the latest but if you want to

00:29:12,830 --> 00:29:16,520
actually use a specific repost say one

00:29:15,200 --> 00:29:20,000
is not the latest but one of those the

00:29:16,520 --> 00:29:22,070
latest four hours ago still around so

00:29:20,000 --> 00:29:25,040
the the coach Imam config command is a

00:29:22,070 --> 00:29:29,660
bit of uh Swiss Army knife for providing

00:29:25,040 --> 00:29:33,080
walking figs and this is that this is an

00:29:29,660 --> 00:29:40,520
example that I that I ran ran through

00:29:33,080 --> 00:29:42,260
last night so I went and grabbed a

00:29:40,520 --> 00:29:46,280
recent successful build in this case it

00:29:42,260 --> 00:29:49,760
was a st I grabbed the cast ID for

00:29:46,280 --> 00:29:52,070
further chords X x86 64 build arch task

00:29:49,760 --> 00:29:55,910
and I said could you don't you make a

00:29:52,070 --> 00:29:57,680
mock and fig from that task ID and spit

00:29:55,910 --> 00:30:00,560
out and that's all that task that

00:29:57,680 --> 00:30:04,429
decrement does says make the same market

00:30:00,560 --> 00:30:06,429
food with this task used

00:30:04,429 --> 00:30:08,970
and

00:30:06,429 --> 00:30:10,380
have to give this force rpm

00:30:08,970 --> 00:30:14,909
with the maca pick somewhere where I can

00:30:10,380 --> 00:30:18,479
use it and rear unlock so

00:30:14,909 --> 00:30:20,700
built at CGS is a backrub ight not in

00:30:18,479 --> 00:30:23,129
this case so I besides that's not

00:30:20,700 --> 00:30:27,450
because of using Marcus play that's

00:30:23,129 --> 00:30:30,169
because that's packaging though so it's

00:30:27,450 --> 00:30:34,109
going to vary about package so this is

00:30:30,169 --> 00:30:36,419
sort of DIY replicate on your own system

00:30:34,109 --> 00:30:40,109
you can get the as long as the repo

00:30:36,419 --> 00:30:42,450
still around you can reference it and

00:30:40,109 --> 00:30:44,970
the next example you see hi anything

00:30:42,450 --> 00:30:46,889
with the right cribs what's caused you

00:30:44,970 --> 00:30:52,200
to remake the repo in the future I

00:30:46,889 --> 00:30:53,130
really want to make a client-side

00:30:52,200 --> 00:30:57,150
command that

00:30:53,130 --> 00:30:59,810
make make the repo liberally but

00:30:57,150 --> 00:31:02,480
referencing the contact koji

00:30:59,810 --> 00:31:04,820
so you could remake the original rico

00:31:02,480 --> 00:31:07,400
locally and music you would have to have

00:31:04,820 --> 00:31:10,180
the privileges to coaching isn't just

00:31:07,400 --> 00:31:10,180
going back just

00:31:10,750 --> 00:31:14,610
we have all the data so it's totally

00:31:12,340 --> 00:31:14,610
doable

00:31:19,520 --> 00:31:26,100
no privileges regard to do this now

00:31:24,210 --> 00:31:28,080
can we make code you do it the answer is

00:31:26,100 --> 00:31:29,940
yes but it does require some privileges

00:31:28,080 --> 00:31:31,800
so the approach would take is first we

00:31:29,940 --> 00:31:32,820
get we got to extract the parameters

00:31:31,800 --> 00:31:35,760
that we need from the original bill

00:31:32,820 --> 00:31:40,230
source URL bill tag and the coachee

00:31:35,760 --> 00:31:41,450
event ID from that built tag or because

00:31:40,230 --> 00:31:43,929
you the nothing from

00:31:41,450 --> 00:31:43,929
which is

00:31:44,679 --> 00:31:52,809
set to get cozy replica 3po step 3

00:31:48,809 --> 00:31:57,040
rebuild using or theory though that also

00:31:52,809 --> 00:31:58,900
is a privilege to man

00:31:57,040 --> 00:32:01,990
privileged options it's just a desk

00:31:58,900 --> 00:32:06,360
everybody option to build command but if

00:32:01,990 --> 00:32:09,139
you don't have the right privileges will

00:32:06,360 --> 00:32:11,669
ever tell you

00:32:09,139 --> 00:32:14,179
that actually something we can adjust in

00:32:11,669 --> 00:32:14,179
the current code

00:32:14,950 --> 00:32:19,690
emoji asked us to be able to

00:32:16,840 --> 00:32:27,190
is there any reason for not working our

00:32:19,690 --> 00:32:29,710
users but i think the time you got a

00:32:27,190 --> 00:32:34,150
diverse collection well the repos are

00:32:29,710 --> 00:32:37,090
you look there so there's there's two

00:32:34,150 --> 00:32:38,950
issues do you want to support it do you

00:32:37,090 --> 00:32:43,990
want your users to complain to you or

00:32:38,950 --> 00:32:45,990
the desert work and do you want do you

00:32:43,990 --> 00:32:49,899
want your developers to be able to build

00:32:45,990 --> 00:32:56,370
from really be able to build from last

00:32:49,899 --> 00:32:59,320
week's version of the repo for your

00:32:56,370 --> 00:33:02,770
product that it may be important that

00:32:59,320 --> 00:33:07,539
don't have a soft I species we've useful

00:33:02,770 --> 00:33:09,340
about right oh I agree yeah so it is

00:33:07,539 --> 00:33:13,240
this is something that much you can

00:33:09,340 --> 00:33:15,640
adjust at the co GI make it set policy

00:33:13,240 --> 00:33:17,680
like you went for something good here in

00:33:15,640 --> 00:33:22,180
the repository but by the time you

00:33:17,680 --> 00:33:24,280
stopped me some time with them that

00:33:22,180 --> 00:33:26,890
another reason that you might not want

00:33:24,280 --> 00:33:28,990
everybody to this is that it does put a

00:33:26,890 --> 00:33:33,340
little load on system read every no jobs

00:33:28,990 --> 00:33:34,960
are not but not three and kick either i

00:33:33,340 --> 00:33:36,580
think these repo jobs we can do a better

00:33:34,960 --> 00:33:38,350
job of that but these your good jobs

00:33:36,580 --> 00:33:40,990
tend to be a little heavier than most

00:33:38,350 --> 00:33:44,580
because they don't they don't make as

00:33:40,990 --> 00:33:44,580
much as bishop

00:33:46,559 --> 00:33:50,549
I think they end up making it from

00:33:48,539 --> 00:33:58,110
scratch I'm not sure about that mr.

00:33:50,549 --> 00:34:06,659
politics that that's our approach and so

00:33:58,110 --> 00:34:10,500
I said no no live demos but so I I did a

00:34:06,659 --> 00:34:15,810
few dries I ran this one last night so

00:34:10,500 --> 00:34:17,790
here is utf-8 AFA proc that's a piece of

00:34:15,810 --> 00:34:20,069
the building foot page just to show you

00:34:17,790 --> 00:34:23,460
where you can pull the data from for the

00:34:20,069 --> 00:34:26,490
build info page i'm mainly looking to go

00:34:23,460 --> 00:34:28,500
straight to the task page so that's the

00:34:26,490 --> 00:34:31,099
link down there you could do all this in

00:34:28,500 --> 00:34:31,099
the API to

00:34:36,520 --> 00:34:42,310
the built task again

00:34:39,350 --> 00:34:42,310
it's great shot

00:34:42,700 --> 00:34:46,839
here is where we did the source URL as

00:34:45,339 --> 00:34:51,050
mundane the three ingredients that we

00:34:46,839 --> 00:34:53,520
need so

00:34:51,050 --> 00:34:54,690
just just cut and paste that there are

00:34:53,520 --> 00:34:59,870
other ways to get at it you can get it

00:34:54,690 --> 00:34:59,870
at in the API I actually have this

00:34:59,990 --> 00:35:07,440
semi-automated in a really hackish

00:35:01,980 --> 00:35:15,270
script it will rerun a little task out

00:35:07,440 --> 00:35:16,980
of it yeah and then we dive down from

00:35:15,270 --> 00:35:18,690
the build task to the day large task to

00:35:16,980 --> 00:35:24,020
get a little bit more day if you have

00:35:18,690 --> 00:35:26,940
pieces of data we need the bill tag

00:35:24,020 --> 00:35:29,250
truco de guest room target other ways

00:35:26,940 --> 00:35:32,400
but it's right here so people built tag

00:35:29,250 --> 00:35:36,330
is at 24 build and here in rewriting

00:35:32,400 --> 00:35:38,730
that was that repo ID was chosen by the

00:35:36,330 --> 00:35:40,290
build task and passed to each of the

00:35:38,730 --> 00:35:43,580
bill bosch tasks of each of our arch

00:35:40,290 --> 00:35:43,580
task uses the same read buddy

00:35:44,010 --> 00:35:47,670
so we have the repo ID but that's not

00:35:46,260 --> 00:35:54,770
quite what we need what we really need

00:35:47,670 --> 00:35:54,770
is that event ID

00:35:55,010 --> 00:35:58,780
is associated everybody

00:35:58,869 --> 00:36:05,150
get that I had to go to the AP I'm sorry

00:36:01,900 --> 00:36:07,700
so I sort of low-level stuff in the web

00:36:05,150 --> 00:36:10,940
UI doesnt really expose it but call a

00:36:07,700 --> 00:36:15,080
repo repo info call for that brief why

00:36:10,940 --> 00:36:17,440
he gives us the tiny and highlighted

00:36:15,080 --> 00:36:17,440
anyway

00:36:18,460 --> 00:36:21,089
cody paul

00:36:21,170 --> 00:36:27,700
yeah it's it's it's a really handy

00:36:25,069 --> 00:36:30,770
shortcut for when you're feeling lazy

00:36:27,700 --> 00:36:35,240
there's also look at the help on that

00:36:30,770 --> 00:36:38,089
you can the default behavior is to sort

00:36:35,240 --> 00:36:42,799
of do this weird auto conversion of your

00:36:38,089 --> 00:36:43,970
batch arts to 2xl fcr so if it looks

00:36:42,799 --> 00:36:46,400
like an integer it turns it into an

00:36:43,970 --> 00:36:48,710
integer if it looks like if it looks

00:36:46,400 --> 00:36:50,109
like it's a boolean true false yes no

00:36:48,710 --> 00:36:51,990
returns it

00:36:50,109 --> 00:36:55,510
I

00:36:51,990 --> 00:36:57,339
looks like looks like not if you write

00:36:55,510 --> 00:37:00,560
nine it turns it into it

00:36:57,339 --> 00:37:03,849
other than that says string if you want

00:37:00,560 --> 00:37:09,470
to pass a list or dictionary then

00:37:03,849 --> 00:37:14,420
there's a dash dash Python option where

00:37:09,470 --> 00:37:15,760
you can embed Python expressions on the

00:37:14,420 --> 00:37:19,330
command line with it

00:37:15,760 --> 00:37:22,120
get parsed with a ste literally Val if

00:37:19,330 --> 00:37:25,170
you have Iost installer if you haven't

00:37:22,120 --> 00:37:25,170
enough i don't have a st

00:37:25,680 --> 00:37:31,650
so it's a fun local man completely

00:37:27,870 --> 00:37:33,750
silent but yeah sometimes you just don't

00:37:31,650 --> 00:37:38,360
want to fire a Python shell type all the

00:37:33,750 --> 00:37:38,360
magic session set up and just coaching

00:37:39,220 --> 00:37:47,790
so let's do this we have all the data so

00:37:43,440 --> 00:37:47,790
not what man's so

00:37:52,990 --> 00:37:59,619
here Carol music hall again because I

00:37:56,340 --> 00:38:01,780
could I can't just do regen repo because

00:37:59,619 --> 00:38:04,510
I need to pass in that event ID are

00:38:01,780 --> 00:38:09,070
going to say regenerate this make this

00:38:04,510 --> 00:38:11,500
repo for this film tech don't tag at

00:38:09,070 --> 00:38:18,390
that event that we pull from the last

00:38:11,500 --> 00:38:18,390
spot so interesting when you do when you

00:38:18,600 --> 00:38:25,780
regenerate a repo in coaching at a

00:38:21,130 --> 00:38:29,920
specific event is not current when Koji

00:38:25,780 --> 00:38:32,740
generates that repo it will not market

00:38:29,920 --> 00:38:34,320
latest which is very important because i

00:38:32,740 --> 00:38:36,700
don't i don't want to accidentally

00:38:34,320 --> 00:38:40,690
affect somebody's build in a rear way by

00:38:36,700 --> 00:38:46,000
having this not current revo suddenly

00:38:40,690 --> 00:38:53,430
can't become the current time

00:38:46,000 --> 00:38:58,390
yeah highs we have fun all right so

00:38:53,430 --> 00:39:00,310
watch that task so that so that we

00:38:58,390 --> 00:39:03,730
important waiting for it to be done it

00:39:00,310 --> 00:39:05,830
successfully we will need the result of

00:39:03,730 --> 00:39:08,920
that task to get the new repo ID than

00:39:05,830 --> 00:39:12,250
just created which is that first one and

00:39:08,920 --> 00:39:14,320
the other other thing that that though

00:39:12,250 --> 00:39:19,450
task returns is the event they not huge

00:39:14,320 --> 00:39:23,500
in the same Oh fantastic then we say

00:39:19,450 --> 00:39:26,710
coach build i added a no wait in the

00:39:23,500 --> 00:39:28,720
arch override because i didn't want and

00:39:26,710 --> 00:39:32,740
scratch I didn't want to do a real

00:39:28,720 --> 00:39:34,119
building I didn't wanna waste in your

00:39:32,740 --> 00:39:38,440
arm time

00:39:34,119 --> 00:39:41,289
the same source URL and that we got that

00:39:38,440 --> 00:39:44,319
gastric YT equals 3 body above so we're

00:39:41,289 --> 00:39:47,529
rebuilding the same source with using re

00:39:44,319 --> 00:39:51,839
but we just we just regenerated watch

00:39:47,529 --> 00:39:58,109
that task and wait for catfish and

00:39:51,839 --> 00:40:03,220
completes and in the end in this case

00:39:58,109 --> 00:40:05,789
identical well so so after a finished

00:40:03,220 --> 00:40:09,009
and then download bill to the original

00:40:05,789 --> 00:40:17,440
and the new download task we just added

00:40:09,009 --> 00:40:21,460
a 110 of the scratch build and I'm

00:40:17,440 --> 00:40:22,990
cheating here I'm doing RPM IT because

00:40:21,460 --> 00:40:27,490
one thing that we have in our p.m. is

00:40:22,990 --> 00:40:29,259
timestamps everything in the RPM header

00:40:27,490 --> 00:40:31,809
itself there's lots of time stamps so

00:40:29,259 --> 00:40:35,140
even if you make exactly the same files

00:40:31,809 --> 00:40:37,180
in your rpm you will have them have

00:40:35,140 --> 00:40:41,470
different time stamps in the cpio

00:40:37,180 --> 00:40:43,239
archive in the RPM so when you the RPM

00:40:41,470 --> 00:40:45,430
de if you have to ignore that that's

00:40:43,239 --> 00:40:47,430
what the IT does is it ignores those

00:40:45,430 --> 00:40:51,420
timestamps

00:40:47,430 --> 00:40:54,900
when you compare those two rpms the

00:40:51,420 --> 00:40:58,770
extra dollar sign no operator so in this

00:40:54,900 --> 00:41:04,130
case we did by provide revolution so it

00:40:58,770 --> 00:41:06,750
is possible we do track the data and

00:41:04,130 --> 00:41:10,200
yeah so hopefully that wasn't too

00:41:06,750 --> 00:41:12,540
tedious sort of shows what the date is

00:41:10,200 --> 00:41:16,290
and how you might use it so open

00:41:12,540 --> 00:41:18,059
questions I have no idea how much a

00:41:16,290 --> 00:41:24,089
fedora would reprobate by provide if we

00:41:18,059 --> 00:41:28,569
did this for everything I could find out

00:41:24,089 --> 00:41:30,709
but that's just not

00:41:28,569 --> 00:41:35,689
not something I have enough time right

00:41:30,709 --> 00:41:37,609
now to dive into do we have failure

00:41:35,689 --> 00:41:43,369
cases beyond what debian is finding are

00:41:37,609 --> 00:41:44,809
there things that other cases where

00:41:43,369 --> 00:41:48,999
debian can get a viper body from the

00:41:44,809 --> 00:41:48,999
same source on candy yeah don't know

00:41:49,210 --> 00:41:55,070
architecture of architecture builder

00:41:52,030 --> 00:41:58,100
sometimes our packages and we do it from

00:41:55,070 --> 00:42:00,460
either architecture but when built on

00:41:58,100 --> 00:42:00,460
different

00:42:00,710 --> 00:42:03,460
results

00:42:03,920 --> 00:42:11,240
we do actually know that though because

00:42:07,250 --> 00:42:13,370
we do know what architecture on large

00:42:11,240 --> 00:42:18,300
package it reminds me of that

00:42:13,370 --> 00:42:20,280
but then we use are over I right right

00:42:18,300 --> 00:42:21,660
right nothing we would have you we

00:42:20,280 --> 00:42:22,950
wouldn't you different architecture

00:42:21,660 --> 00:42:26,100
you're right we would have a hard time

00:42:22,950 --> 00:42:28,020
for you to have a hard time forcing that

00:42:26,100 --> 00:42:29,630
we have the data we just don't have we

00:42:28,020 --> 00:42:35,310
don't have that we all have the tools

00:42:29,630 --> 00:42:36,660
500 stores and last is there it just in

00:42:35,310 --> 00:42:41,340
fedora and a fedora reproducibility

00:42:36,660 --> 00:42:44,130
effort I don't know if any of you are

00:42:41,340 --> 00:42:46,290
interested in this I'm happy to help I'm

00:42:44,130 --> 00:42:50,540
happy to point you at scripts and tools

00:42:46,290 --> 00:42:50,540
and data if somebody wants to

00:42:53,670 --> 00:42:58,020
take point on that would be awesome but

00:42:56,339 --> 00:42:59,579
at the same time I think we have

00:42:58,020 --> 00:43:01,440
somewhat different goals than there

00:42:59,579 --> 00:43:03,710
being so we may or may not really need

00:43:01,440 --> 00:43:03,710
to do this

00:43:09,630 --> 00:43:18,870
right yeah that was shocking to me when

00:43:12,220 --> 00:43:18,870
I went to talk that your brother

00:43:22,090 --> 00:43:25,540
yeah in a sense the Debian

00:43:23,800 --> 00:43:28,000
reproducibility a lot of what deputies

00:43:25,540 --> 00:43:29,230
be doing is catch up because they

00:43:28,000 --> 00:43:30,790
weren't tracking you in this dating

00:43:29,230 --> 00:43:32,200
before and they weren't even and they

00:43:30,790 --> 00:43:35,140
weren't using any kind of saying built

00:43:32,200 --> 00:43:38,320
environments like we said the I think

00:43:35,140 --> 00:43:41,530
even still at least when I saw them salt

00:43:38,320 --> 00:43:43,090
saw their talking caused him they still

00:43:41,530 --> 00:43:44,590
have processes in place they still have

00:43:43,090 --> 00:43:46,590
processes in place where a developer

00:43:44,590 --> 00:43:48,670
could build on their local system and

00:43:46,590 --> 00:43:51,150
upload it to Debbie and I was something

00:43:48,670 --> 00:43:51,150
that we

00:43:56,240 --> 00:43:59,240
someone

00:44:05,950 --> 00:44:11,359
so to their credit the Debian guys that

00:44:09,349 --> 00:44:13,099
are behind this effort they hate that

00:44:11,359 --> 00:44:16,749
and they want to get written and rightly

00:44:13,099 --> 00:44:16,749
so so that's

00:44:22,490 --> 00:44:27,770
yeah so I sort of ran out of time for

00:44:25,910 --> 00:44:31,270
Q&A but if anybody wants to catch me

00:44:27,770 --> 00:44:41,590
later i'm happy to answer questions and

00:44:31,270 --> 00:44:41,590

YouTube URL: https://www.youtube.com/watch?v=wxzGdX5iMgw


