Title: Flock 2015 - Cryptography for beginners - Nathaniel McCallum
Publication date: 2015-08-26
Playlist: Flock 2015
Description: 
	How does encryption work? What is a Diffie-Hellman? What's the big deal about elliptic curves? Am I a secret agent? Find out the answers to all these questions in more by learning cryptography for beginners.
Captions: 
	00:00:07,040 --> 00:00:10,889
okay let's get started my name is

00:00:09,420 --> 00:00:13,740
Nathaniel McCollum and I'm a principal

00:00:10,889 --> 00:00:16,170
engineer at Red Hat's this class is

00:00:13,740 --> 00:00:18,930
cryptography for beginners so we need to

00:00:16,170 --> 00:00:20,610
start out by a disclaimer I am NOT going

00:00:18,930 --> 00:00:23,160
to teach you thorough cryptography in

00:00:20,610 --> 00:00:25,680
the next half an hour okay there are

00:00:23,160 --> 00:00:28,290
long horses on this people spend decades

00:00:25,680 --> 00:00:30,210
of their lives studying it so we're not

00:00:28,290 --> 00:00:34,320
going to attempt to cram all of that in

00:00:30,210 --> 00:00:36,060
one hour the goal of this talk is just

00:00:34,320 --> 00:00:38,030
going to be to give you a simple

00:00:36,060 --> 00:00:41,250
introduction to some of the concepts and

00:00:38,030 --> 00:00:43,470
then there'll be links at the end if you

00:00:41,250 --> 00:00:46,950
want to dive into more detail that you

00:00:43,470 --> 00:00:50,970
can go do that on your own so let's get

00:00:46,950 --> 00:00:51,989
let's get started the first encryption

00:00:50,970 --> 00:00:54,750
we're going to talk about is actually

00:00:51,989 --> 00:00:57,090
the Caesar cipher which is probably the

00:00:54,750 --> 00:00:59,940
one that you are all familiar with it's

00:00:57,090 --> 00:01:01,440
the one that you used to pass notes to

00:00:59,940 --> 00:01:03,420
each other you know in fifth grade when

00:01:01,440 --> 00:01:05,880
you didn't want people to see what we're

00:01:03,420 --> 00:01:08,610
saying and it basically works with a

00:01:05,880 --> 00:01:11,280
simple shift pattern so you shift by to

00:01:08,610 --> 00:01:13,260
all the agencies all the B's become DS

00:01:11,280 --> 00:01:15,750
this is sound familiar you guys done

00:01:13,260 --> 00:01:17,729
this ok so you take this this little

00:01:15,750 --> 00:01:20,190
statement over here welcome to flock and

00:01:17,729 --> 00:01:22,860
you shift it to that's what it looks

00:01:20,190 --> 00:01:26,010
like so it's hard to read for

00:01:22,860 --> 00:01:29,160
speaker a Dane might be able to speak

00:01:26,010 --> 00:01:30,570
that pretty well but but no for the

00:01:29,160 --> 00:01:33,810
average English speaker we have no idea

00:01:30,570 --> 00:01:35,190
what that says and so this was this was

00:01:33,810 --> 00:01:36,720
a very convenient way to do it and if

00:01:35,190 --> 00:01:38,910
you don't kind of know the little trick

00:01:36,720 --> 00:01:40,380
right then you don't know how to decode

00:01:38,910 --> 00:01:42,510
it well the problem of course is that

00:01:40,380 --> 00:01:44,670
this really isn't secure with any

00:01:42,510 --> 00:01:46,860
significant amount of analysis you can

00:01:44,670 --> 00:01:50,250
actually reverse engineer what this says

00:01:46,860 --> 00:01:52,590
which is the reverse process right so we

00:01:50,250 --> 00:01:54,660
shipped it back two spaces all the scene

00:01:52,590 --> 00:01:58,140
remains all these become visa and so on

00:01:54,660 --> 00:02:01,170
and our nice damage phrase simply

00:01:58,140 --> 00:02:02,759
becomes well into flock again now lots

00:02:01,170 --> 00:02:05,460
of information is being leaked in this

00:02:02,759 --> 00:02:07,590
cipher so it's certainly not secure you

00:02:05,460 --> 00:02:10,050
can buy the statistical analysis you

00:02:07,590 --> 00:02:11,130
know the contents are English so you can

00:02:10,050 --> 00:02:13,650
sort of figure out what some of the

00:02:11,130 --> 00:02:16,290
letters are what they might map to to go

00:02:13,650 --> 00:02:19,709
backwards so this is not something you

00:02:16,290 --> 00:02:21,690
would use for anything more than a great

00:02:19,709 --> 00:02:22,950
lesson with your kids it's really fun by

00:02:21,690 --> 00:02:24,270
the way the future kids this kind of

00:02:22,950 --> 00:02:26,330
stuff because then you get all the

00:02:24,270 --> 00:02:28,170
little notes passed around the house

00:02:26,330 --> 00:02:32,610
because they think they're keeping it

00:02:28,170 --> 00:02:36,900
secret from you but so we're going to

00:02:32,610 --> 00:02:38,280
have a pop quiz here using this basic

00:02:36,900 --> 00:02:42,180
technique that I've taught to in the

00:02:38,280 --> 00:02:43,680
last 30 seconds what does this say write

00:02:42,180 --> 00:02:45,470
it down if you have a piece of paper or

00:02:43,680 --> 00:02:49,260
computer in front of you write it down

00:02:45,470 --> 00:02:53,040
think about it you know the answer okay

00:02:49,260 --> 00:02:55,519
go CVS now how did tell me how you

00:02:53,040 --> 00:02:55,519
figured that out

00:03:08,370 --> 00:03:13,420
so you did a very basic statistical

00:03:11,440 --> 00:03:15,430
analysis by noticing some of the

00:03:13,420 --> 00:03:18,250
commonalities that I hear and

00:03:15,430 --> 00:03:20,050
correspondence to English phrases and by

00:03:18,250 --> 00:03:23,380
that you were able to deduce without

00:03:20,050 --> 00:03:25,000
knowing the actual answer or the shift

00:03:23,380 --> 00:03:28,630
code that was used for this you were

00:03:25,000 --> 00:03:30,690
able to determine the primary the

00:03:28,630 --> 00:03:34,300
plaintext as we call it in cryptography

00:03:30,690 --> 00:03:37,120
so a step up from that probably the most

00:03:34,300 --> 00:03:40,780
famous all early photography was the

00:03:37,120 --> 00:03:43,690
Enigma machine you can see that it was

00:03:40,780 --> 00:03:46,630
actually invented by a German guy named

00:03:43,690 --> 00:03:49,450
Arthur and he filed for the patented

00:03:46,630 --> 00:03:51,310
1918 it was in commercial use in 1920s

00:03:49,450 --> 00:03:54,700
now this was done right at the end of

00:03:51,310 --> 00:03:57,250
World War one and was used very heavily

00:03:54,700 --> 00:03:59,709
by the Nazis in World War two so one of

00:03:57,250 --> 00:04:01,540
the for the Allied powers one of the

00:03:59,709 --> 00:04:04,480
very important things for us was to

00:04:01,540 --> 00:04:06,820
crack the cryptography so this was

00:04:04,480 --> 00:04:09,430
actually cracked by the Depot lished

00:04:06,820 --> 00:04:11,350
Secret Service three guys there are were

00:04:09,430 --> 00:04:13,000
able to figure it out and there's a

00:04:11,350 --> 00:04:15,400
really fascinating history here that

00:04:13,000 --> 00:04:18,280
sort of illustrates a lot of what

00:04:15,400 --> 00:04:20,350
happens in actual cryptography which is

00:04:18,280 --> 00:04:22,270
that they did not actually crack the

00:04:20,350 --> 00:04:25,000
machine which is a fascinating

00:04:22,270 --> 00:04:27,460
phenomenon although there are weaknesses

00:04:25,000 --> 00:04:30,040
in the Enigma machine that we now know

00:04:27,460 --> 00:04:32,710
of today that we could crack it they did

00:04:30,040 --> 00:04:35,229
not actually crack it because there was

00:04:32,710 --> 00:04:36,910
a defect in the machine at the time the

00:04:35,229 --> 00:04:39,610
crack tech because people were using the

00:04:36,910 --> 00:04:40,750
machine all right and so this is this is

00:04:39,610 --> 00:04:43,330
the way it is in a lot of cryptography

00:04:40,750 --> 00:04:45,850
we can give you cryptographic principles

00:04:43,330 --> 00:04:48,190
but the vast majority of the problems of

00:04:45,850 --> 00:04:49,990
geography come from procedure procedural

00:04:48,190 --> 00:04:53,400
error you're simply using the

00:04:49,990 --> 00:04:53,400
cryptography incorrectly

00:04:54,430 --> 00:05:00,680
moving on we'll talk next about the

00:04:57,230 --> 00:05:04,430
one-time pad the one-time pad is the

00:05:00,680 --> 00:05:05,900
most basic form of encryption this is

00:05:04,430 --> 00:05:09,530
actually a binary if you have noticed

00:05:05,900 --> 00:05:11,330
there's no numbers here at 0 and 1 so we

00:05:09,530 --> 00:05:14,240
have this point X this is this this is

00:05:11,330 --> 00:05:16,220
the thing that we want to keep secret we

00:05:14,240 --> 00:05:17,780
want to pass it to someone else and we

00:05:16,220 --> 00:05:20,510
want nobody in between to know what's

00:05:17,780 --> 00:05:22,970
going on that's the top line and then we

00:05:20,510 --> 00:05:26,480
have a key that we use and this is how

00:05:22,970 --> 00:05:28,580
we're going to hide this point text and

00:05:26,480 --> 00:05:30,830
we do it with a very simple mathematical

00:05:28,580 --> 00:05:33,980
operation called x over that's the

00:05:30,830 --> 00:05:38,060
simpler humans okay x or just simply

00:05:33,980 --> 00:05:41,690
means only one of the two can be true so

00:05:38,060 --> 00:05:44,780
if this is 1 and this is 1 then X score

00:05:41,690 --> 00:05:47,870
them together you get 0 only one of them

00:05:44,780 --> 00:05:50,480
is one and you get one and so on so if

00:05:47,870 --> 00:05:53,240
they're both 0 then you get 0 if they're

00:05:50,480 --> 00:05:55,220
both one you get 0 otherwise if they're

00:05:53,240 --> 00:05:57,680
different you get one very simple

00:05:55,220 --> 00:06:01,400
mathematical operation and the XOR

00:05:57,680 --> 00:06:06,080
operation is the bedrock of all our

00:06:01,400 --> 00:06:07,700
geography so very very simple in fact a

00:06:06,080 --> 00:06:09,350
lot of people joke that photographers

00:06:07,700 --> 00:06:10,390
really only know how to X or that's the

00:06:09,350 --> 00:06:12,890
only thing that they know how to do

00:06:10,390 --> 00:06:14,300
which is very true but there's a lot of

00:06:12,890 --> 00:06:18,260
much stuff it doesn't it goes into as

00:06:14,300 --> 00:06:20,240
well so so you can also kind of see here

00:06:18,260 --> 00:06:23,450
that there's a decryption operation

00:06:20,240 --> 00:06:25,910
implicit as well if you x4 in the

00:06:23,450 --> 00:06:28,190
opposite direction you get the plain

00:06:25,910 --> 00:06:31,100
text back right which is these are the

00:06:28,190 --> 00:06:35,060
two bedrock operations of cryptography

00:06:31,100 --> 00:06:37,330
encrypt and decrypt and they are ingress

00:06:35,060 --> 00:06:37,330
yes

00:06:41,630 --> 00:06:51,000
yeah so so yeah so we can go about

00:06:48,120 --> 00:06:57,830
directions right can somebody tell me a

00:06:51,000 --> 00:07:00,360
downside to this encryption whats up its

00:06:57,830 --> 00:07:02,130
binary so we can convert pretty much

00:07:00,360 --> 00:07:05,009
anything to buy an area for one that

00:07:02,130 --> 00:07:06,750
that's really not a problem you know too

00:07:05,009 --> 00:07:15,990
much already no more this is pretty

00:07:06,750 --> 00:07:17,400
nurse well you can easily decrypt it

00:07:15,990 --> 00:07:18,990
which is great right but do you want the

00:07:17,400 --> 00:07:21,660
decryption operation to be very

00:07:18,990 --> 00:07:23,699
efficient so we want you to go backwards

00:07:21,660 --> 00:07:25,830
out you can't decrypt the defeat of the

00:07:23,699 --> 00:07:28,430
key right so that's that's the point you

00:07:25,830 --> 00:07:28,430
want to keep it secret

00:07:29,889 --> 00:07:33,740
okay so that's definitely a problem

00:07:32,090 --> 00:07:35,900
that's not the specific problem i'm

00:07:33,740 --> 00:07:38,900
looking for but its the but it's related

00:07:35,900 --> 00:07:42,020
to that problem you have to give this

00:07:38,900 --> 00:07:43,879
ciphertext to your party and you have to

00:07:42,020 --> 00:07:47,620
give them the key so what's the problem

00:07:43,879 --> 00:07:47,620
that arises out of that i could get it

00:07:53,820 --> 00:07:57,940
no because you can always reduce your

00:07:56,199 --> 00:07:59,080
message to binary so just assume that

00:07:57,940 --> 00:08:03,520
for the rest of class you can always

00:07:59,080 --> 00:08:06,220
reduce your message thank you the

00:08:03,520 --> 00:08:09,850
message must be the same length is the

00:08:06,220 --> 00:08:11,340
key in a long time pad ok so you wants

00:08:09,850 --> 00:08:14,020
to send a short message like this

00:08:11,340 --> 00:08:15,789
something the short key is fine but you

00:08:14,020 --> 00:08:18,070
have essentially doubled the amount of

00:08:15,789 --> 00:08:19,900
data that you need to send to the remote

00:08:18,070 --> 00:08:22,060
party what happens if you want to

00:08:19,900 --> 00:08:25,210
transfer 10 terabytes with the data

00:08:22,060 --> 00:08:28,449
using a long time back how much larger

00:08:25,210 --> 00:08:30,039
on your key need to be meanwhile Yuki

00:08:28,449 --> 00:08:31,960
needs to be 10 terabytes your message is

00:08:30,039 --> 00:08:34,029
10 terabytes you have 20 terabytes total

00:08:31,960 --> 00:08:35,709
right so this is very inefficient we

00:08:34,029 --> 00:08:39,039
don't want to double all of the traffic

00:08:35,709 --> 00:08:42,039
on the internet so so this is one of the

00:08:39,039 --> 00:08:44,140
reasons why one-time pad is not used or

00:08:42,039 --> 00:08:49,500
rather it is used as a building block to

00:08:44,140 --> 00:08:52,330
build other kinds of encryption the I

00:08:49,500 --> 00:08:55,350
want to ask the question about one-time

00:08:52,330 --> 00:08:55,350
pad is it secure

00:08:57,440 --> 00:09:06,450
does it have perfect security Thank You

00:09:05,430 --> 00:09:08,580
Seamas got it right there's tooth

00:09:06,450 --> 00:09:11,340
there's actually two principles it has

00:09:08,580 --> 00:09:16,080
perfect security so long as the key is

00:09:11,340 --> 00:09:18,510
random and the keys never reused as soon

00:09:16,080 --> 00:09:20,850
as you start using the team for other

00:09:18,510 --> 00:09:23,640
operations then people can begin to

00:09:20,850 --> 00:09:25,560
determine by the messages these ten send

00:09:23,640 --> 00:09:27,420
they can start to do the statistical

00:09:25,560 --> 00:09:29,970
analysis against the message and they

00:09:27,420 --> 00:09:34,170
can reverse-engineer the key and then

00:09:29,970 --> 00:09:36,210
you're completely host so I one time pad

00:09:34,170 --> 00:09:38,160
is secure but it has some very stringent

00:09:36,210 --> 00:09:41,550
criteria right and so we're going to see

00:09:38,160 --> 00:09:43,350
these criteria play out in some some

00:09:41,550 --> 00:09:45,360
other ways so so the first way we can

00:09:43,350 --> 00:09:47,370
get past the problem right the major

00:09:45,360 --> 00:09:50,280
problem here the one-time pad is that

00:09:47,370 --> 00:09:52,440
the key has to be as long as the message

00:09:50,280 --> 00:09:54,270
so one of the ways that we get around

00:09:52,440 --> 00:09:56,580
this basically we get around it is by

00:09:54,270 --> 00:09:59,940
using a pseudo-random function this is

00:09:56,580 --> 00:10:03,150
often kind of times called a PRF a PRF

00:09:59,940 --> 00:10:05,640
takes n bits of input and produces n

00:10:03,150 --> 00:10:08,640
bits of output so one of the things that

00:10:05,640 --> 00:10:10,590
the PRF can be used to do is to expand

00:10:08,640 --> 00:10:12,960
essentially the size of the key because

00:10:10,590 --> 00:10:17,010
our third principle hole that the output

00:10:12,960 --> 00:10:19,920
is indistinguishable from random okay so

00:10:17,010 --> 00:10:22,440
if you've ever used a hash function and

00:10:19,920 --> 00:10:26,220
hash function like shaaban for instance

00:10:22,440 --> 00:10:28,380
is a PRF you provided some input it

00:10:26,220 --> 00:10:31,980
provides some output the output is

00:10:28,380 --> 00:10:34,050
indistinguishable from random so

00:10:31,980 --> 00:10:37,200
building on this we have the concept of

00:10:34,050 --> 00:10:40,260
a stream cipher and a stream cipher is

00:10:37,200 --> 00:10:43,290
essentially where we take a seed which

00:10:40,260 --> 00:10:45,570
is our key this is the basic building

00:10:43,290 --> 00:10:46,910
block this stream cipher is not actually

00:10:45,570 --> 00:10:49,790
the simple

00:10:46,910 --> 00:10:53,180
what it's built on top so you take your

00:10:49,790 --> 00:10:55,940
key as your input to your PRF and you

00:10:53,180 --> 00:10:57,650
XOR that against the plain text which is

00:10:55,940 --> 00:10:59,810
what we saw on the previous slide so

00:10:57,650 --> 00:11:02,180
that allows you to expand the key so I

00:10:59,810 --> 00:11:05,360
can pass you perhaps a key that's maybe

00:11:02,180 --> 00:11:08,090
16 bytes and then I can send you the 10

00:11:05,360 --> 00:11:11,600
terabyte message and you can use the PRF

00:11:08,090 --> 00:11:16,190
to expand that key into 10 terabytes to

00:11:11,600 --> 00:11:18,050
do the XOR operation okay now again no

00:11:16,190 --> 00:11:20,060
stream cipher is actually this simple

00:11:18,050 --> 00:11:23,540
because there are there are different

00:11:20,060 --> 00:11:25,730
problems with this approach but it's the

00:11:23,540 --> 00:11:27,620
basic the basic idea behind stream

00:11:25,730 --> 00:11:34,740
ciphers and we want to ask the question

00:11:27,620 --> 00:11:40,270
again is it secure what's that

00:11:34,740 --> 00:11:43,180
I'm sorry yes thank you we have actually

00:11:40,270 --> 00:11:45,190
three principles now the basic principle

00:11:43,180 --> 00:11:48,120
is that it is secure if we seed is

00:11:45,190 --> 00:11:51,460
random if the seed is never reused and

00:11:48,120 --> 00:11:53,230
if the PRF is a true PRF in other words

00:11:51,460 --> 00:11:59,620
the output of that function is true in

00:11:53,230 --> 00:12:02,700
this division right so there's skew some

00:11:59,620 --> 00:12:05,770
examples of such a system stream ciphers

00:12:02,700 --> 00:12:07,690
the first one we have is art for its

00:12:05,770 --> 00:12:09,490
spelled this way which is actually a

00:12:07,690 --> 00:12:11,560
trademark issue they trademarked it and

00:12:09,490 --> 00:12:15,220
you can't lose that term asleep call it

00:12:11,560 --> 00:12:16,900
art for salsa 20 is another one but

00:12:15,220 --> 00:12:18,790
generally speaking we don't use stream

00:12:16,900 --> 00:12:21,880
ciphers that heavily today there are

00:12:18,790 --> 00:12:24,520
some that are secure but most of the

00:12:21,880 --> 00:12:26,230
stream ciphers do have known attacks so

00:12:24,520 --> 00:12:28,300
be very simple principles we've started

00:12:26,230 --> 00:12:33,970
we have to start building more complex

00:12:28,300 --> 00:12:37,330
layers on top of them so let's talk

00:12:33,970 --> 00:12:39,310
about key reuse so one of our principles

00:12:37,330 --> 00:12:41,800
is that we definitely can't reuse the

00:12:39,310 --> 00:12:43,900
key if we reuse the key we can begin to

00:12:41,800 --> 00:12:46,570
do statistical analysis and we can

00:12:43,900 --> 00:12:49,270
reverse engineer the message that's

00:12:46,570 --> 00:12:50,320
being sent okay so one of the things we

00:12:49,270 --> 00:12:52,360
need to talk about is the birthday

00:12:50,320 --> 00:12:53,860
paradox which is a very simple question

00:12:52,360 --> 00:12:57,520
if you know the answer this question

00:12:53,860 --> 00:13:00,400
don't answer okay what are the odds that

00:12:57,520 --> 00:13:02,550
two people in this room have the same

00:13:00,400 --> 00:13:02,550
birthday

00:13:07,230 --> 00:13:10,130
anybody know

00:13:12,640 --> 00:13:18,670
what do you think you know you can

00:13:14,660 --> 00:13:21,460
answer if you're not if you're not sure

00:13:18,670 --> 00:13:24,260
more than fifty percent who said that

00:13:21,460 --> 00:13:26,240
great it is more than 50 foot well it's

00:13:24,260 --> 00:13:27,980
yeah we're probably more than fifty

00:13:26,240 --> 00:13:30,170
percent now or we're very close to it

00:13:27,980 --> 00:13:31,610
okay let's go around the room let's try

00:13:30,170 --> 00:13:35,080
this as an exercise because it's kind of

00:13:31,610 --> 00:13:35,080
fun December 31st

00:13:39,290 --> 00:13:44,540
yeah talk louder and if you hear your

00:13:41,610 --> 00:13:44,540
birthday yell out

00:13:58,380 --> 00:14:03,140
what 9th of April

00:14:04,900 --> 00:14:14,590
tomorrow happy birthday what

00:14:17,699 --> 00:14:23,980
that's yours we got it we got okay so

00:14:21,639 --> 00:14:27,010
yes we did actually achieve it the

00:14:23,980 --> 00:14:28,389
birthday paradox is that what you would

00:14:27,010 --> 00:14:29,620
think is you would kind of like divide

00:14:28,389 --> 00:14:31,329
up the people in the roof you've got how

00:14:29,620 --> 00:14:32,500
many people there were against the

00:14:31,329 --> 00:14:34,540
number of days in the year and that's

00:14:32,500 --> 00:14:37,290
actually incorrect your intuition is

00:14:34,540 --> 00:14:39,910
incorrect the birthday paradox is that

00:14:37,290 --> 00:14:43,269
the you have an exponential increase

00:14:39,910 --> 00:14:45,010
actually based on the number of people

00:14:43,269 --> 00:14:47,230
that are in the room how likely it is

00:14:45,010 --> 00:14:49,029
for you to get someone else with the

00:14:47,230 --> 00:14:51,820
same exact birthday so we don't even

00:14:49,029 --> 00:14:53,740
have to get close to save 180 days in

00:14:51,820 --> 00:14:56,980
order to give fifty percent certainty we

00:14:53,740 --> 00:14:58,269
get fifty percent certainty with just 23

00:14:56,980 --> 00:15:00,699
people in the room which is about what

00:14:58,269 --> 00:15:02,620
we have here so and you saw that played

00:15:00,699 --> 00:15:05,199
out that there was in fact someone in

00:15:02,620 --> 00:15:07,060
here with the same birthday so this is a

00:15:05,199 --> 00:15:09,610
real problem in cryptography because if

00:15:07,060 --> 00:15:14,529
your principle is that you can't reuse

00:15:09,610 --> 00:15:17,050
the key and very very quickly more times

00:15:14,529 --> 00:15:20,860
that you use a random key how likely are

00:15:17,050 --> 00:15:23,380
you to hit the same again okay and the

00:15:20,860 --> 00:15:25,000
answer is very likely so there's a lot

00:15:23,380 --> 00:15:27,339
of techniques that go into making sure

00:15:25,000 --> 00:15:29,920
that that is not the case and a lot of

00:15:27,339 --> 00:15:31,899
care is given around making sure teary

00:15:29,920 --> 00:15:34,209
uses one of the most fundamental errors

00:15:31,899 --> 00:15:38,019
in cryptography it's the reason for

00:15:34,209 --> 00:15:40,810
instance why WEP on Wi-Fi is completely

00:15:38,019 --> 00:15:42,190
insecure because they reuse the keys and

00:15:40,810 --> 00:15:44,170
so all you have to do is observe a

00:15:42,190 --> 00:15:45,399
certain number of packets flowing over

00:15:44,170 --> 00:15:47,440
the wireless network you can just

00:15:45,399 --> 00:15:48,730
observe it by sniffing them once you

00:15:47,440 --> 00:15:50,740
have a certain number you can use the

00:15:48,730 --> 00:15:53,680
birthday paradox to be able to reduce

00:15:50,740 --> 00:15:56,430
your odds and you can guess the WEP key

00:15:53,680 --> 00:15:56,430
very very quickly

00:15:58,300 --> 00:16:02,900
next let's talk about blocks acres block

00:16:01,250 --> 00:16:04,340
ciphers are a lot about stream ciphers

00:16:02,900 --> 00:16:06,380
accepted instead of operating on a

00:16:04,340 --> 00:16:11,330
continual stream of data they operate in

00:16:06,380 --> 00:16:12,950
blocks they have a fixed size and this

00:16:11,330 --> 00:16:14,450
is the fixed size for put the keys and

00:16:12,950 --> 00:16:17,210
the blocks I'll give you two examples

00:16:14,450 --> 00:16:21,080
here because it's often misunderstood

00:16:17,210 --> 00:16:23,510
that aes-256 has 256 bit block size

00:16:21,080 --> 00:16:26,570
which it does not actually they have the

00:16:23,510 --> 00:16:29,150
same block size what changes is the size

00:16:26,570 --> 00:16:36,020
of the key that you use in order to

00:16:29,150 --> 00:16:37,670
protect the data now block ciphers can

00:16:36,020 --> 00:16:39,800
be used on their own but one of the

00:16:37,670 --> 00:16:43,850
problems that we will run into is the

00:16:39,800 --> 00:16:45,980
question of key reduce so if you have a

00:16:43,850 --> 00:16:48,380
bunch of blocks of data and you're using

00:16:45,980 --> 00:16:50,720
the same key over all of those blocks of

00:16:48,380 --> 00:16:52,790
data how quickly are we going to find

00:16:50,720 --> 00:16:54,260
another key well the birthday paradox

00:16:52,790 --> 00:16:57,170
tells us that we're going to find

00:16:54,260 --> 00:16:58,279
another key pretty quickly so what we

00:16:57,170 --> 00:17:00,830
actually need to do is we have me to

00:16:58,279 --> 00:17:03,440
have modes that prevent this mode also

00:17:00,830 --> 00:17:05,300
prevents the leakage of data based upon

00:17:03,440 --> 00:17:06,620
the broad structure of the block so I'm

00:17:05,300 --> 00:17:09,620
going to use an image to illustrate that

00:17:06,620 --> 00:17:11,660
just a second I've given two modes here

00:17:09,620 --> 00:17:14,540
the common mode you might immediately

00:17:11,660 --> 00:17:16,640
think of is this one the ECB where you

00:17:14,540 --> 00:17:18,589
have some plain text and you have a key

00:17:16,640 --> 00:17:21,920
and you give it to whatever your cipher

00:17:18,589 --> 00:17:23,360
is like a es for instance and outcomes

00:17:21,920 --> 00:17:25,339
your cipher text and then you move on to

00:17:23,360 --> 00:17:27,530
the next block and you do the same thing

00:17:25,339 --> 00:17:29,390
the plain text goes into the site for

00:17:27,530 --> 00:17:30,950
operation along with the key and you get

00:17:29,390 --> 00:17:32,840
another block out and then you just kind

00:17:30,950 --> 00:17:37,340
of append them all together right seem

00:17:32,840 --> 00:17:40,040
sensible well the problem is this is

00:17:37,340 --> 00:17:42,140
what ECB mode encryption looks like so

00:17:40,040 --> 00:17:43,700
if you could do that technique you can

00:17:42,140 --> 00:17:46,670
see that all we've really done is kind

00:17:43,700 --> 00:17:48,980
of obscure the data we haven't hit me so

00:17:46,670 --> 00:17:53,270
is it is it obvious to everyone in the

00:17:48,980 --> 00:17:54,860
room what this is right so is this is

00:17:53,270 --> 00:17:58,190
this what you want your banking stuff

00:17:54,860 --> 00:18:01,460
secured with the answer is now you don't

00:17:58,190 --> 00:18:03,320
so so instead we use other modes that

00:18:01,460 --> 00:18:05,370
hopefully produce something that looks

00:18:03,320 --> 00:18:08,700
like that on the other side

00:18:05,370 --> 00:18:13,320
one of those notes is called CC and

00:18:08,700 --> 00:18:14,960
there's many of these so and the way

00:18:13,320 --> 00:18:17,400
that this works is it adds an initial

00:18:14,960 --> 00:18:20,910
initialization vector and then each

00:18:17,400 --> 00:18:23,490
block uses the previous block in its

00:18:20,910 --> 00:18:25,710
output so that there's a trailing effect

00:18:23,490 --> 00:18:28,559
which obscures the data all throughout

00:18:25,710 --> 00:18:30,120
the encryption okay this often requires

00:18:28,559 --> 00:18:33,059
an initialization vector which is

00:18:30,120 --> 00:18:36,300
usually random and as as if done in

00:18:33,059 --> 00:18:39,059
cryptography usually just append the div

00:18:36,300 --> 00:18:41,220
to the beginning of the what the message

00:18:39,059 --> 00:18:44,870
you're sending and then you have the

00:18:41,220 --> 00:18:44,870
encrypted blocks afterwards

00:18:48,590 --> 00:18:59,350
so again here what we're trying to do is

00:18:51,260 --> 00:18:59,350
this not this now is ECB mode insecure

00:19:03,880 --> 00:19:08,320
it's a good gasket in but that's

00:19:06,080 --> 00:19:08,320
incorrect

00:19:12,000 --> 00:19:16,780
others there's no IV in ECB mode because

00:19:15,490 --> 00:19:25,030
you're just doing a beach walk

00:19:16,780 --> 00:19:27,460
independently the answer is yes ccp is

00:19:25,030 --> 00:19:32,170
remote is secure when you're doing you

00:19:27,460 --> 00:19:33,850
up one block right because if you're

00:19:32,170 --> 00:19:36,040
using only one block then you can't see

00:19:33,850 --> 00:19:38,050
these relationships between the locks so

00:19:36,040 --> 00:19:39,940
if you have if you want to do some very

00:19:38,050 --> 00:19:42,130
simple encryption of some very small

00:19:39,940 --> 00:19:44,320
data than any see if you notice fine use

00:19:42,130 --> 00:19:50,910
it for just that limited case just make

00:19:44,320 --> 00:19:50,910
sure you don't me use your key what's up

00:19:51,420 --> 00:19:56,640
it is yes it is essentially a one-time

00:19:59,549 --> 00:20:04,320
so now we have the problem of we have we

00:20:02,580 --> 00:20:06,809
talked about stream ciphers but talk

00:20:04,320 --> 00:20:09,090
about block ciphers and one of the

00:20:06,809 --> 00:20:13,049
problems that then arises is how do we

00:20:09,090 --> 00:20:16,919
send the key how do we communicate a key

00:20:13,049 --> 00:20:19,110
for encryption with without sending it

00:20:16,919 --> 00:20:22,289
over the wire right because if I just

00:20:19,110 --> 00:20:23,879
send you the key and the ciphertext well

00:20:22,289 --> 00:20:25,320
then anybody can be cryptic because they

00:20:23,879 --> 00:20:27,929
just take the key they decrypt the

00:20:25,320 --> 00:20:30,960
ciphertext right so we have to have some

00:20:27,929 --> 00:20:33,629
other way of transmitting a key or at

00:20:30,960 --> 00:20:36,480
least a greeting upon a key one way we

00:20:33,629 --> 00:20:41,039
might do this is the classic espionage

00:20:36,480 --> 00:20:43,799
matter I take a take a big USB key I put

00:20:41,039 --> 00:20:46,350
a bunch of keys on it and I tape it

00:20:43,799 --> 00:20:49,499
under a park bench and I walk away you

00:20:46,350 --> 00:20:52,950
come up in here in your fedora and your

00:20:49,499 --> 00:20:55,129
your jacket and your glasses on and you

00:20:52,950 --> 00:20:57,570
look like a spy and you grab it only

00:20:55,129 --> 00:20:59,309
you're actually an attacker you're not

00:20:57,570 --> 00:21:01,980
the person who is intended to see the

00:20:59,309 --> 00:21:04,859
key so now any message that sent is

00:21:01,980 --> 00:21:06,989
completely insecure right so if you can

00:21:04,859 --> 00:21:09,299
do a personal transfer of key it works

00:21:06,989 --> 00:21:11,570
but it's very very high latency we want

00:21:09,299 --> 00:21:15,119
something that's much more efficient and

00:21:11,570 --> 00:21:17,940
so we actually have two brilliant guys

00:21:15,119 --> 00:21:20,009
dupion Hellman great cryptographers they

00:21:17,940 --> 00:21:23,159
came up with this idea of key exchange

00:21:20,009 --> 00:21:25,980
or key agreement and basically the way

00:21:23,159 --> 00:21:29,909
that this works is it allows two parties

00:21:25,980 --> 00:21:32,429
to use a mathematical operation to agree

00:21:29,909 --> 00:21:35,039
upon a key and the key is random and

00:21:32,429 --> 00:21:37,710
nobody who is listening to it can figure

00:21:35,039 --> 00:21:39,899
out what the key is so that this isn't

00:21:37,710 --> 00:21:41,909
one of other bedrocks of cryptography so

00:21:39,899 --> 00:21:44,669
let's start by looking over on the left

00:21:41,909 --> 00:21:46,499
or I guess your right my left we'll look

00:21:44,669 --> 00:21:49,169
at the paint color so Alice and Bob both

00:21:46,499 --> 00:21:50,489
start with some yellow paint and then

00:21:49,169 --> 00:21:52,139
you know that that yellow paint is the

00:21:50,489 --> 00:21:54,269
same and that yellow paint doesn't have

00:21:52,139 --> 00:21:55,980
to be a secret ok so that's the huge

00:21:54,269 --> 00:21:57,869
advantage here they don't have to meet

00:21:55,980 --> 00:22:00,330
in secret somewhere to say we're going

00:21:57,869 --> 00:22:02,220
to use this color for the yellow page

00:22:00,330 --> 00:22:04,830
right they can they can announce it to

00:22:02,220 --> 00:22:07,559
the world we're using yellow paint now

00:22:04,830 --> 00:22:09,450
they generate a random number and then

00:22:07,559 --> 00:22:10,100
in this case the random number is going

00:22:09,450 --> 00:22:11,299
to be

00:22:10,100 --> 00:22:12,980
their secret color and they're not going

00:22:11,299 --> 00:22:13,789
to tell anybody with their secret colors

00:22:12,980 --> 00:22:16,610
they're not even going to tell each

00:22:13,789 --> 00:22:19,280
other or their secret colors okay so

00:22:16,610 --> 00:22:22,760
alice is going to mix red in with the

00:22:19,280 --> 00:22:25,789
elbow and she's going to get orange bob

00:22:22,760 --> 00:22:30,590
is going to mix cyan or whatever that is

00:22:25,789 --> 00:22:33,200
and and come up with blue okay now these

00:22:30,590 --> 00:22:35,450
these two colors is the result of the

00:22:33,200 --> 00:22:37,460
operation our public they can share them

00:22:35,450 --> 00:22:40,340
so they send them out over the wire in

00:22:37,460 --> 00:22:43,190
plain text Alice says Bob I'm using

00:22:40,340 --> 00:22:45,559
orange and bob says Dallas I'm using

00:22:43,190 --> 00:22:47,960
blue and so now they both have those

00:22:45,559 --> 00:22:50,510
colors now the assumption here is that

00:22:47,960 --> 00:22:52,789
it's very cheap and easy to mix the

00:22:50,510 --> 00:22:56,679
colors but it's very difficult and

00:22:52,789 --> 00:23:01,760
expensive to unmix the colors ok so

00:22:56,679 --> 00:23:05,080
because if Alice now mixes her red inna

00:23:01,760 --> 00:23:10,130
with Bob's blue she will get brown and

00:23:05,080 --> 00:23:13,789
if Bob mixes Alice's orange with his

00:23:10,130 --> 00:23:16,460
Scion he will also get breath so notice

00:23:13,789 --> 00:23:18,440
that they have the same common secret

00:23:16,460 --> 00:23:20,450
when it's done but nobody who's

00:23:18,440 --> 00:23:22,190
listening in to this exchange so if

00:23:20,450 --> 00:23:25,100
somebody were listening in to what

00:23:22,190 --> 00:23:27,200
colors they were sharing here no one

00:23:25,100 --> 00:23:30,200
would be able to calculate brown because

00:23:27,200 --> 00:23:33,140
they don't know the private colors the

00:23:30,200 --> 00:23:39,350
point is is that on both sides Alice

00:23:33,140 --> 00:23:42,360
Alice has added both so Bob added blue

00:23:39,350 --> 00:23:44,910
in here or cyan in here to create blue

00:23:42,360 --> 00:23:49,020
and Alice at it already so it's yellow

00:23:44,910 --> 00:23:50,340
Simon red and then the same exact

00:23:49,020 --> 00:23:54,390
operation happen just in a different

00:23:50,340 --> 00:23:56,850
order on the other side so the resulting

00:23:54,390 --> 00:23:59,460
brown nobody else knows except for

00:23:56,850 --> 00:24:02,730
Alison Bob even though Alison Bob

00:23:59,460 --> 00:24:05,670
announced in public I'm using orange and

00:24:02,730 --> 00:24:08,850
i'm using blue and so the resulting key

00:24:05,670 --> 00:24:11,970
now the brown can be used for encryption

00:24:08,850 --> 00:24:16,050
and nobody who is listening into the

00:24:11,970 --> 00:24:18,690
conversation can can use key and decrypt

00:24:16,050 --> 00:24:20,880
the data so this is the actual math

00:24:18,690 --> 00:24:23,820
matter mathematical operation that's

00:24:20,880 --> 00:24:25,830
actually very simple it uses a concept

00:24:23,820 --> 00:24:28,080
of finite cyclic groups I'm not going to

00:24:25,830 --> 00:24:30,240
explain that here if you want to know

00:24:28,080 --> 00:24:33,300
more about this you can see the material

00:24:30,240 --> 00:24:34,800
at the end throws so basically we create

00:24:33,300 --> 00:24:36,630
the random number which is a private

00:24:34,800 --> 00:24:39,810
that's the private color that they're

00:24:36,630 --> 00:24:42,150
keeping secrets then you have a

00:24:39,810 --> 00:24:45,210
generator which is the yellow color and

00:24:42,150 --> 00:24:48,030
you raise the generator to the power of

00:24:45,210 --> 00:24:50,430
the private number that creates the

00:24:48,030 --> 00:24:52,440
public number you share the public

00:24:50,430 --> 00:24:55,080
number over the network both sides do

00:24:52,440 --> 00:24:57,570
this and once each side has the public

00:24:55,080 --> 00:25:00,030
member you simply raise the public

00:24:57,570 --> 00:25:02,780
numbers the private number and because

00:25:00,030 --> 00:25:04,980
the order of operations doesn't matter

00:25:02,780 --> 00:25:07,140
in the cases battle we have the

00:25:04,980 --> 00:25:09,450
community excuse me committed to the

00:25:07,140 --> 00:25:11,400
property here the end result is that

00:25:09,450 --> 00:25:14,270
they both decay no matter which way

00:25:11,400 --> 00:25:14,270
they've done the average

00:25:15,750 --> 00:25:22,029
no no they do not they only need to

00:25:19,899 --> 00:25:25,269
start with the same gene that's the l

00:25:22,029 --> 00:25:27,669
a-- this look at Angie can be public

00:25:25,269 --> 00:25:31,240
because effectively they both have G to

00:25:27,669 --> 00:25:34,570
the G race Judy print one x credit too

00:25:31,240 --> 00:25:37,840
yes because when you raise something of

00:25:34,570 --> 00:25:40,019
the power to another power that's

00:25:37,840 --> 00:25:40,019
correct

00:25:41,720 --> 00:25:46,680
yeah so yellow is agreed upon beforehand

00:25:44,540 --> 00:25:49,050
everyone in the world knows about yellow

00:25:46,680 --> 00:25:51,600
when you get when you're doing when

00:25:49,050 --> 00:25:53,250
you're doing this a a particular cyclic

00:25:51,600 --> 00:25:55,830
group will typically have a defined

00:25:53,250 --> 00:25:57,000
generator so it's just literally listed

00:25:55,830 --> 00:26:00,690
in document somewhere saying the

00:25:57,000 --> 00:26:02,730
generator is 1234 and that generator is

00:26:00,690 --> 00:26:05,970
then used for all the graphic operations

00:26:02,730 --> 00:26:07,650
so the G does not even public in fact or

00:26:05,970 --> 00:26:10,020
does not even product it's completely

00:26:07,650 --> 00:26:11,940
public the private number that you

00:26:10,020 --> 00:26:21,690
generate from random is the one you have

00:26:11,940 --> 00:26:24,140
to keep secret yes yes yes it is you are

00:26:21,690 --> 00:26:26,550
you're exactly correct all of this

00:26:24,140 --> 00:26:28,140
photography both here and the next one

00:26:26,550 --> 00:26:30,900
gram talk about which is asymmetric

00:26:28,140 --> 00:26:36,510
cryptography is based on from ops

00:26:30,900 --> 00:26:39,300
theorem and oilers there we have a

00:26:36,510 --> 00:26:41,370
problem with difficulty exchange so it's

00:26:39,300 --> 00:26:42,870
a really really great little trick as

00:26:41,370 --> 00:26:45,990
completely secure from anyone who's

00:26:42,870 --> 00:26:48,660
listening in but it's not secure from

00:26:45,990 --> 00:26:50,220
active attacks this means that someone

00:26:48,660 --> 00:26:53,400
that can actually intercept the message

00:26:50,220 --> 00:26:55,170
and then send their own message and the

00:26:53,400 --> 00:26:56,970
reason for this is that they'll just

00:26:55,170 --> 00:27:00,000
pretend to be Bob on the other side and

00:26:56,970 --> 00:27:02,730
they'll complete the exchange and then

00:27:00,000 --> 00:27:04,950
to pretend to be popped Alice and then

00:27:02,730 --> 00:27:06,330
they'll pretend to be Alice to Bob and

00:27:04,950 --> 00:27:08,010
the end result is you have someone in

00:27:06,330 --> 00:27:09,810
the middle now the communications would

00:27:08,010 --> 00:27:11,670
be encrypted from Alice to the attacker

00:27:09,810 --> 00:27:13,590
and then from the attack that's a bob

00:27:11,670 --> 00:27:15,870
but now you have a party in the middle

00:27:13,590 --> 00:27:18,660
of its listening it right so the

00:27:15,870 --> 00:27:20,250
diffie-hellman is as great to me but

00:27:18,660 --> 00:27:22,950
it's a building block to other things

00:27:20,250 --> 00:27:24,150
that are going to happen one of those

00:27:22,950 --> 00:27:25,790
other things that are going to happen is

00:27:24,150 --> 00:27:28,350
authenticated key exchange and

00:27:25,790 --> 00:27:29,740
authenticated is a key key exchange is a

00:27:28,350 --> 00:27:31,390
variant of

00:27:29,740 --> 00:27:34,870
and there's a lot of these here I've

00:27:31,390 --> 00:27:41,590
listed five of them here some of these

00:27:34,870 --> 00:27:43,360
pads so the it's a variance of

00:27:41,590 --> 00:27:44,740
particular moment exchange and the basic

00:27:43,360 --> 00:27:47,500
idea behind it authentic identity

00:27:44,740 --> 00:27:50,020
exchange is that it uses some other

00:27:47,500 --> 00:27:52,450
secret in order to prove that each side

00:27:50,020 --> 00:27:54,460
knows each other i think it's mixed into

00:27:52,450 --> 00:27:57,130
the operation and there's lots of

00:27:54,460 --> 00:27:58,510
different ways to do this generally

00:27:57,130 --> 00:28:00,340
speaking these are all called pigs

00:27:58,510 --> 00:28:03,490
password authenticated k exchanges

00:28:00,340 --> 00:28:05,380
because you can use a password on either

00:28:03,490 --> 00:28:09,610
side you mix it into the algorithm and

00:28:05,380 --> 00:28:12,220
then at the end of the operation down

00:28:09,610 --> 00:28:16,300
here we'll get round if you're doing

00:28:12,220 --> 00:28:18,460
Authenticator key exchange your only

00:28:16,300 --> 00:28:22,360
both sides will get brown only if they

00:28:18,460 --> 00:28:24,760
both have notice a password okay so in

00:28:22,360 --> 00:28:27,640
that case you actually protect against a

00:28:24,760 --> 00:28:31,150
man-in-the-middle attack like I said

00:28:27,640 --> 00:28:35,230
some of these are patented which is why

00:28:31,150 --> 00:28:39,670
they probably not been used these three

00:28:35,230 --> 00:28:42,700
on the bottom I am not aware of any

00:28:39,670 --> 00:28:44,370
patents on and both of these are

00:28:42,700 --> 00:28:47,470
standardized in various different ways

00:28:44,370 --> 00:28:50,650
including SRP v6 is standardized and

00:28:47,470 --> 00:28:53,830
some rfcs so and we're going to be using

00:28:50,650 --> 00:28:55,900
stake in Kerberos echidna meant Kerberos

00:28:53,830 --> 00:28:57,700
off yesterday that's the algorithm

00:28:55,900 --> 00:29:01,240
you're going to be using in Kerberos to

00:28:57,700 --> 00:29:02,290
strengthen up some things so the nice

00:29:01,240 --> 00:29:04,420
thing about the authenticated key

00:29:02,290 --> 00:29:07,450
exchanges their protects against the act

00:29:04,420 --> 00:29:08,530
of attacks and another method for

00:29:07,450 --> 00:29:11,830
instance of business which is the way

00:29:08,530 --> 00:29:13,390
TLS works is that you can sign one of

00:29:11,830 --> 00:29:16,210
the public keys and then by verifying

00:29:13,390 --> 00:29:17,470
the signature you can actually prove of

00:29:16,210 --> 00:29:20,230
the other parties so they say they are

00:29:17,470 --> 00:29:21,850
and you can trust their public key one

00:29:20,230 --> 00:29:22,990
last thing to note about authenticated

00:29:21,850 --> 00:29:24,700
key exchanges but it's actually really

00:29:22,990 --> 00:29:26,920
useful for another technique which is to

00:29:24,700 --> 00:29:27,670
increase password strength so if you

00:29:26,920 --> 00:29:29,950
want to

00:29:27,670 --> 00:29:32,500
using a password password is very low

00:29:29,950 --> 00:29:34,300
entropy right because there's only 26

00:29:32,500 --> 00:29:35,710
letters in the English alphabet and

00:29:34,300 --> 00:29:37,270
there's only so many combinations of

00:29:35,710 --> 00:29:38,860
those letters that you can have you know

00:29:37,270 --> 00:29:40,180
that form words for instance which is

00:29:38,860 --> 00:29:42,550
what everybody does for the passwords

00:29:40,180 --> 00:29:43,900
because everyone is insecure so and how

00:29:42,550 --> 00:29:46,540
many times the password going to use

00:29:43,900 --> 00:29:48,730
this password for instance if you try to

00:29:46,540 --> 00:29:50,860
encrypt something using a low at UPenn

00:29:48,730 --> 00:29:54,070
low entropy passcode like that it will

00:29:50,860 --> 00:29:56,680
be fairly easy to to do a group force

00:29:54,070 --> 00:29:58,750
attack offline dictionary attack against

00:29:56,680 --> 00:30:00,940
the packets their scent and recover the

00:29:58,750 --> 00:30:02,440
data but using authenticated key

00:30:00,940 --> 00:30:04,360
exchange you can actually use the

00:30:02,440 --> 00:30:06,970
passwords only to prove the public keys

00:30:04,360 --> 00:30:09,940
and then the public keys generating a

00:30:06,970 --> 00:30:12,370
very very strong key session key that's

00:30:09,940 --> 00:30:15,780
used for the encryption so it's helpful

00:30:12,370 --> 00:30:17,950
to actually increase password strength

00:30:15,780 --> 00:30:19,450
the last topic we're going to talk about

00:30:17,950 --> 00:30:21,250
today is an asymmetric encryption

00:30:19,450 --> 00:30:22,450
because I I told you we're not going to

00:30:21,250 --> 00:30:24,100
dive too deep in any of these topics

00:30:22,450 --> 00:30:27,400
because there's more resources at the

00:30:24,100 --> 00:30:29,650
end asymmetric encryption is which

00:30:27,400 --> 00:30:30,910
you're actually using both symmetric and

00:30:29,650 --> 00:30:33,610
asymmetric everything we've talked about

00:30:30,910 --> 00:30:35,200
up to this point has been symmetric that

00:30:33,610 --> 00:30:37,660
the scripture was done based on kind of

00:30:35,200 --> 00:30:39,360
key that both sides now in this case

00:30:37,660 --> 00:30:43,150
we're going to break that assumption

00:30:39,360 --> 00:30:46,080
this was discovered by a Briggs confirm

00:30:43,150 --> 00:30:47,880
cops who was working for the

00:30:46,080 --> 00:30:53,399
a British secret service or whatever

00:30:47,880 --> 00:30:55,110
it's called and yeah and so he actually

00:30:53,399 --> 00:30:58,220
discovered it what is his discovered

00:30:55,110 --> 00:31:00,720
classified they did not publish it and

00:30:58,220 --> 00:31:03,990
simultaneously in the United States it

00:31:00,720 --> 00:31:06,659
was discovered by these three guys which

00:31:03,990 --> 00:31:11,130
is where we get our essay so our I say

00:31:06,659 --> 00:31:13,950
the company and RSA the scription the

00:31:11,130 --> 00:31:19,200
asymmetrical algorithm come from these

00:31:13,950 --> 00:31:21,510
guys from Rivest Shamir this is built on

00:31:19,200 --> 00:31:23,700
principles from the different comments 0

00:31:21,510 --> 00:31:24,960
the idea the basic idea with the amount

00:31:23,700 --> 00:31:27,659
of course is that we have a one-way

00:31:24,960 --> 00:31:29,789
function it's very easy to mix the

00:31:27,659 --> 00:31:32,279
colors together but it's very hard to

00:31:29,789 --> 00:31:34,260
unmix them and what these guys came up

00:31:32,279 --> 00:31:36,570
with was that if there was a way to have

00:31:34,260 --> 00:31:39,090
some secret knowledge so that it would

00:31:36,570 --> 00:31:41,940
be easy to mix them and hard to unmix

00:31:39,090 --> 00:31:45,120
them but easy to unmix them if you knew

00:31:41,940 --> 00:31:47,940
something secret ok that's called a

00:31:45,120 --> 00:31:49,559
trapdoor fudge and so asymmetric

00:31:47,940 --> 00:31:51,570
encryption is built on this principle to

00:31:49,559 --> 00:31:53,510
trapdoor function and then you actually

00:31:51,570 --> 00:31:55,860
have two keys like in the diffie-hellman

00:31:53,510 --> 00:32:00,450
go back to just be how many remember we

00:31:55,860 --> 00:32:03,210
have a public and a private two separate

00:32:00,450 --> 00:32:05,570
keys right there's a private there's the

00:32:03,210 --> 00:32:05,570
public

00:32:05,679 --> 00:32:10,399
we have the same exact thing in a

00:32:07,850 --> 00:32:12,830
symmetric keys so the public key can be

00:32:10,399 --> 00:32:17,240
used for encryption and the private key

00:32:12,830 --> 00:32:20,029
can be used for decryption here's a nice

00:32:17,240 --> 00:32:21,620
little chart from Wikipedia so if you

00:32:20,029 --> 00:32:22,760
look on the left-hand side this is all

00:32:21,620 --> 00:32:26,840
being fiction we've been talking about

00:32:22,760 --> 00:32:29,390
up until this point and what RSA does is

00:32:26,840 --> 00:32:32,120
it actually splits this one key in two

00:32:29,390 --> 00:32:34,700
keys so that you can use the public key

00:32:32,120 --> 00:32:37,340
for doing encryption and the private key

00:32:34,700 --> 00:32:39,740
for joining decryption now this has a

00:32:37,340 --> 00:32:42,590
very marked advantage if we were just

00:32:39,740 --> 00:32:45,070
doing symmetric encryption and I wanted

00:32:42,590 --> 00:32:47,870
you all to send me an encrypted message

00:32:45,070 --> 00:32:50,779
okay all you're going to send a message

00:32:47,870 --> 00:32:52,820
to one person so many to one now I would

00:32:50,779 --> 00:32:55,880
have to go to each of you and have to

00:32:52,820 --> 00:32:57,740
exchange a unique key because a between

00:32:55,880 --> 00:32:59,480
you and between you and between you i

00:32:57,740 --> 00:33:01,039
would need separate communication keys

00:32:59,480 --> 00:33:03,020
in order to in order to keep the data

00:33:01,039 --> 00:33:05,539
private with asymmetric encryption

00:33:03,020 --> 00:33:09,169
however I can split that key into two

00:33:05,539 --> 00:33:13,010
and I can say everyone in the room this

00:33:09,169 --> 00:33:16,309
is my public key and then you can all to

00:33:13,010 --> 00:33:18,950
me using that one public key and in

00:33:16,309 --> 00:33:21,289
response I can decrypt all our messages

00:33:18,950 --> 00:33:23,659
using my private key but I've never told

00:33:21,289 --> 00:33:25,940
you my private key so only I can be

00:33:23,659 --> 00:33:28,429
cryptic and this is the bedrock

00:33:25,940 --> 00:33:30,260
foundation of TLS or SSL right so when

00:33:28,429 --> 00:33:32,390
you go to a website and you see is the

00:33:30,260 --> 00:33:33,710
website trusted that's asymmetric

00:33:32,390 --> 00:33:36,970
cryptography what you're doing is you're

00:33:33,710 --> 00:33:41,720
actually validating the public key of

00:33:36,970 --> 00:33:44,120
that website so works are doing well on

00:33:41,720 --> 00:33:46,309
time here we're almost done and I wanted

00:33:44,120 --> 00:33:47,899
to leave time for questions there's a

00:33:46,309 --> 00:33:49,730
lot of topics I have not covered I've

00:33:47,899 --> 00:33:52,039
not covered things like message

00:33:49,730 --> 00:33:54,049
integrity so in other words proving that

00:33:52,039 --> 00:33:55,299
the message to not change in transport

00:33:54,049 --> 00:33:57,580
I've not

00:33:55,299 --> 00:33:59,860
cover things like signing or

00:33:57,580 --> 00:34:01,720
verification or lots of the topics so

00:33:59,860 --> 00:34:03,309
there's there's a lot more to learn your

00:34:01,720 --> 00:34:05,169
photography is a very very big topic

00:34:03,309 --> 00:34:06,789
there are two courses which I can

00:34:05,169 --> 00:34:08,770
recommend both of these are online and

00:34:06,789 --> 00:34:12,010
free and have a substantial amount of

00:34:08,770 --> 00:34:13,809
data and I can share these slides out

00:34:12,010 --> 00:34:15,309
people or you can just google or

00:34:13,809 --> 00:34:16,960
photography and I'm sure that these will

00:34:15,309 --> 00:34:18,159
be in the top list so there's one from

00:34:16,960 --> 00:34:22,960
Khan Academy and there's one from

00:34:18,159 --> 00:34:24,790
Stanford the Stanford one will does

00:34:22,960 --> 00:34:26,859
assumes that you have a lot of the math

00:34:24,790 --> 00:34:28,599
so if all of this stuff that I've talked

00:34:26,859 --> 00:34:30,339
about was fairly mathematically easy for

00:34:28,599 --> 00:34:31,899
you and if you know what I mean when I'm

00:34:30,339 --> 00:34:34,750
talking about when I say finance it with

00:34:31,899 --> 00:34:36,700
groups then go take the Stanford

00:34:34,750 --> 00:34:38,379
photography quotes it's a great place to

00:34:36,700 --> 00:34:40,480
start if you don't know what that stuff

00:34:38,379 --> 00:34:41,829
is don't feel bad start at the Khan

00:34:40,480 --> 00:34:44,049
Academy course because they can actually

00:34:41,829 --> 00:34:47,319
give you the math as well along with the

00:34:44,049 --> 00:34:49,960
cryptography so that's all I have for

00:34:47,319 --> 00:34:51,069
today with any questions Oh actually I

00:34:49,960 --> 00:34:53,470
was we were going to come back to this

00:34:51,069 --> 00:34:56,409
to see if anybody solved it but we had a

00:34:53,470 --> 00:34:58,930
smart aleck in the room so the end the

00:34:56,409 --> 00:35:06,750
answer was was hello world and the shift

00:34:58,930 --> 00:35:06,750
was 70 that's all questions yes

00:35:22,270 --> 00:35:25,650
which is the private key

00:35:30,500 --> 00:35:36,390
the difference is that in the

00:35:33,120 --> 00:35:38,700
diffie-hellman you both are agreeing on

00:35:36,390 --> 00:35:40,680
the same it's an exchange and you're

00:35:38,700 --> 00:35:43,020
both agreeing on the same key at the

00:35:40,680 --> 00:35:52,190
bottom and you're using that key to do

00:35:43,020 --> 00:35:52,190
symmetric encryption that's correct

00:35:59,810 --> 00:36:07,470
yeah in the in technical speak a dip in

00:36:02,700 --> 00:36:09,030
common is a one-way function and a the

00:36:07,470 --> 00:36:12,270
asymmetric encryption is a trapdoor

00:36:09,030 --> 00:36:13,740
function because it's one way unless you

00:36:12,270 --> 00:36:18,890
know the secret information that you can

00:36:13,740 --> 00:36:18,890
open the trapdoor and reverse it on

00:36:21,890 --> 00:36:27,109
there is actually a way to do that it's

00:36:24,329 --> 00:36:31,109
called Hughes spake or excuse me Hughes

00:36:27,109 --> 00:36:32,369
Hughes diffie-hellman there is a there's

00:36:31,109 --> 00:36:34,380
a variant of the diffie-hellman

00:36:32,369 --> 00:36:37,109
algorithm that can be used to transfer a

00:36:34,380 --> 00:36:39,210
key from one party to another it's

00:36:37,109 --> 00:36:42,230
generally not used because it's not

00:36:39,210 --> 00:36:44,250
applicable in a lot of situations but

00:36:42,230 --> 00:36:47,250
diffie-hellman has the advantage that

00:36:44,250 --> 00:36:49,319
both sides contribute entropy which

00:36:47,250 --> 00:36:52,380
means that I contribute randomness and

00:36:49,319 --> 00:36:54,720
infantry randomness so if an attacker

00:36:52,380 --> 00:36:56,700
we're saying we're trying to do part of

00:36:54,720 --> 00:36:58,470
that exchange and and we're not going to

00:36:56,700 --> 00:37:00,480
use a random number it wouldn't matter

00:36:58,470 --> 00:37:02,940
because I'm still mixing in my random

00:37:00,480 --> 00:37:05,130
number with theirs so both sides get to

00:37:02,940 --> 00:37:07,740
contribute entropy and the resulting key

00:37:05,130 --> 00:37:10,319
we know that has the entropy that both

00:37:07,740 --> 00:37:12,210
sides contributed so you're not sending

00:37:10,319 --> 00:37:16,160
a key from A to B you're actually

00:37:12,210 --> 00:37:16,160
mutually agreeing upon a key

00:37:19,840 --> 00:37:25,050
any other questions I know I didn't

00:37:22,270 --> 00:37:25,050
explain it that well

00:37:27,000 --> 00:37:31,830
what's up some questions you didn't talk

00:37:29,220 --> 00:37:33,330
about in your summary button you didn't

00:37:31,830 --> 00:37:35,430
answer what's the big deal about lucky

00:37:33,330 --> 00:37:36,870
curves and are you a secret agent oh

00:37:35,430 --> 00:37:39,960
okay I think it's are those two

00:37:36,870 --> 00:37:43,140
questions okay so elliptic curves I did

00:37:39,960 --> 00:37:46,230
not pretend let's talk you're right so

00:37:43,140 --> 00:37:47,730
let's go actual Roman right side so most

00:37:46,230 --> 00:37:49,680
of this math you can see is just darling

00:37:47,730 --> 00:37:50,880
to be done with integers right well the

00:37:49,680 --> 00:37:54,510
problem is that our computers are

00:37:50,880 --> 00:37:56,190
getting really fast and the size of

00:37:54,510 --> 00:37:58,590
these keys are getting a longer larger

00:37:56,190 --> 00:38:02,130
and larger so that computers can crack

00:37:58,590 --> 00:38:03,840
them and this only has this has a

00:38:02,130 --> 00:38:07,140
negative benefit or a negative result

00:38:03,840 --> 00:38:09,450
because now we have to send these larger

00:38:07,140 --> 00:38:11,670
keys over the wire and they are growing

00:38:09,450 --> 00:38:14,310
exponentially larger as computers get

00:38:11,670 --> 00:38:17,070
faster and faster so elliptic curves is

00:38:14,310 --> 00:38:21,750
another finite cyclic group one finite

00:38:17,070 --> 00:38:24,390
cyclic group is just a set of numbers

00:38:21,750 --> 00:38:25,920
underneath the prime number which is

00:38:24,390 --> 00:38:28,080
what we're using in this case but in the

00:38:25,920 --> 00:38:30,420
case of an elliptic curve you can

00:38:28,080 --> 00:38:32,910
actually use a note to curb on a graph

00:38:30,420 --> 00:38:34,710
and do mathematical operations on that

00:38:32,910 --> 00:38:36,900
curve it allows you to keep your key

00:38:34,710 --> 00:38:39,210
sizes very small but it's very expensive

00:38:36,900 --> 00:38:42,000
for computers to calculate so you can

00:38:39,210 --> 00:38:43,410
send much smaller key sizes and this has

00:38:42,000 --> 00:38:46,080
this has a benefit of protecting your

00:38:43,410 --> 00:38:48,660
security the answer to the other one

00:38:46,080 --> 00:38:51,470
went to its mis secret agents to tell

00:38:48,660 --> 00:38:51,470
you what effect equality

00:38:57,990 --> 00:39:04,270
yes if you don't want to keep anything

00:39:00,310 --> 00:39:06,160
you have secrets yeah no you should

00:39:04,270 --> 00:39:09,040
definitely not do your own cryptography

00:39:06,160 --> 00:39:11,770
you should always rely on what it has

00:39:09,040 --> 00:39:14,770
number one been proven in an academic

00:39:11,770 --> 00:39:16,960
paper which is undisputed that that's

00:39:14,770 --> 00:39:19,000
provably secure and second of all don't

00:39:16,960 --> 00:39:20,710
use your own implementation of those

00:39:19,000 --> 00:39:22,180
algorithms because your own

00:39:20,710 --> 00:39:25,390
implementation will almost always

00:39:22,180 --> 00:39:27,010
contain any flaw so use this use the

00:39:25,390 --> 00:39:29,320
standard libraries that you're given and

00:39:27,010 --> 00:39:32,230
even then make sure you research a lot

00:39:29,320 --> 00:39:40,690
and if you're designing anything just

00:39:32,230 --> 00:39:42,010
don't design correct that's correct in

00:39:40,690 --> 00:39:43,840
fact you're probably designing a system

00:39:42,010 --> 00:39:45,400
that won't work but if you can get it to

00:39:43,840 --> 00:39:50,070
work it's probably completa billion

00:39:45,400 --> 00:39:50,070
secure yeah

00:39:53,050 --> 00:39:58,240
so the way you design in good systems is

00:39:55,330 --> 00:40:00,070
by open peer review this is this is the

00:39:58,240 --> 00:40:01,540
bedrock of of cryptography it's the

00:40:00,070 --> 00:40:04,630
bedrock of all scholarship in general

00:40:01,540 --> 00:40:05,980
right so you want to obviously have a

00:40:04,630 --> 00:40:07,420
much broader introduction to

00:40:05,980 --> 00:40:10,000
cryptography than the half an hour I've

00:40:07,420 --> 00:40:11,410
given you you probably want to have a

00:40:10,000 --> 00:40:15,100
degree in it as well as it agreed

00:40:11,410 --> 00:40:17,530
mathematics you will then publish what

00:40:15,100 --> 00:40:19,480
you propose as a design you will publish

00:40:17,530 --> 00:40:23,170
openly and you will accept critique from

00:40:19,480 --> 00:40:25,090
anywhere and so you allowed to be to sit

00:40:23,170 --> 00:40:26,260
out and publicly okay critiques you may

00:40:25,090 --> 00:40:27,850
have to mitigate some of those critiques

00:40:26,260 --> 00:40:30,070
you may tweak the algorithm a little bit

00:40:27,850 --> 00:40:33,730
here or there but after a substantial

00:40:30,070 --> 00:40:36,220
peer review usually multiple years peer

00:40:33,730 --> 00:40:38,230
review if there's no attacks found that

00:40:36,220 --> 00:40:39,730
at that point that's considered secure

00:40:38,230 --> 00:40:43,900
and at that point people start

00:40:39,730 --> 00:40:45,700
implementing it in the insecure ways so

00:40:43,900 --> 00:40:47,110
then you have to deal with the fact that

00:40:45,700 --> 00:40:49,750
most of the implementations of these

00:40:47,110 --> 00:40:51,190
algorithms are all so insecure that has

00:40:49,750 --> 00:40:53,830
to mature over time as well hopefully

00:40:51,190 --> 00:40:55,660
public peer review never use closed

00:40:53,830 --> 00:40:58,660
source cryptography just don't do it

00:40:55,660 --> 00:41:00,100
ever because it means it hasn't had the

00:40:58,660 --> 00:41:02,230
open peer review that you need to make

00:41:00,100 --> 00:41:05,700
sure that it's secure so relying on open

00:41:02,230 --> 00:41:05,700
source code for all cryptography

00:41:08,260 --> 00:41:11,700

YouTube URL: https://www.youtube.com/watch?v=TtWV1AGzvYQ


