Title: Anaconda OS installer - current state of the evolution
Publication date: 2020-08-31
Playlist: Nest with Fedora 2020
Description: 
	This session will present the recent changes to Anaconda to raise awareness of features and solicit feedback from the community.

Presented at Nest With Fedora 2020.
Captions: 
	00:00:02,159 --> 00:00:07,359
this presentation will be

00:00:04,000 --> 00:00:11,200
about basically two

00:00:07,359 --> 00:00:14,719
parts and one mineral plus if we

00:00:11,200 --> 00:00:17,760
have time to get to the good there

00:00:14,719 --> 00:00:21,920
basically the main part will be about

00:00:17,760 --> 00:00:27,519
our modularity in anaconda uh

00:00:21,920 --> 00:00:30,800
and the second smaller part will be

00:00:27,519 --> 00:00:34,079
about what what changes

00:00:30,800 --> 00:00:37,440
are in the federal 33 in the anaconda

00:00:34,079 --> 00:00:38,320
it's not that really oh i will get to

00:00:37,440 --> 00:00:41,760
that

00:00:38,320 --> 00:00:45,120
it'll be a lot better so

00:00:41,760 --> 00:00:47,840
something about me i'm using konichini

00:00:45,120 --> 00:00:49,520
you can call me jirka as most of you

00:00:47,840 --> 00:00:54,320
already do because it's much

00:00:49,520 --> 00:00:58,160
easier to pronounce and

00:00:54,320 --> 00:01:01,680
the main point i'm working in a redhead

00:00:58,160 --> 00:01:07,439
i i have my head here

00:01:01,680 --> 00:01:11,119
and you know it's no it won't work

00:01:07,439 --> 00:01:14,640
and i'm working in anaconda for my

00:01:11,119 --> 00:01:16,400
all career in redhead which is five

00:01:14,640 --> 00:01:20,080
years now

00:01:16,400 --> 00:01:20,799
uh and the main contacts i want to give

00:01:20,080 --> 00:01:24,479
you here

00:01:20,799 --> 00:01:26,640
are these two which is a sharp anaconda

00:01:24,479 --> 00:01:27,759
on three note irc and anaconda devil

00:01:26,640 --> 00:01:31,840
list

00:01:27,759 --> 00:01:34,240
mailing list if you need anything

00:01:31,840 --> 00:01:35,840
about if you if you have some

00:01:34,240 --> 00:01:38,960
suggestions on

00:01:35,840 --> 00:01:41,840
making how make it better or

00:01:38,960 --> 00:01:43,680
do you have some questions about

00:01:41,840 --> 00:01:46,880
creating your add-on or anything

00:01:43,680 --> 00:01:50,159
just ask us there we are friendly people

00:01:46,880 --> 00:01:50,159
you don't bite usually

00:01:50,240 --> 00:01:58,159
so first i had a presentation about

00:01:54,479 --> 00:02:01,840
anaconda modularization

00:01:58,159 --> 00:02:05,600
and it was two years ago on defcon

00:02:01,840 --> 00:02:09,520
so if you weren't there i will

00:02:05,600 --> 00:02:12,160
make a short introduction

00:02:09,520 --> 00:02:13,200
about what it is and if you wear there

00:02:12,160 --> 00:02:17,920
it will be

00:02:13,200 --> 00:02:21,120
at least a wider to freshen your memory

00:02:17,920 --> 00:02:25,040
uh yeah so first

00:02:21,120 --> 00:02:27,040
anaconda modularization is not not

00:02:25,040 --> 00:02:28,879
connected with fedora modularity's

00:02:27,040 --> 00:02:32,239
modularity modularization at

00:02:28,879 --> 00:02:33,280
all uh by the way this is slide from

00:02:32,239 --> 00:02:34,480
from fedora

00:02:33,280 --> 00:02:37,440
i think or something like that

00:02:34,480 --> 00:02:40,400
explaining the modularization and i

00:02:37,440 --> 00:02:42,239
it seems quite complicated i guess we

00:02:40,400 --> 00:02:45,599
have much simpler state

00:02:42,239 --> 00:02:49,280
for that oh

00:02:45,599 --> 00:02:52,640
so what's anaconda modularization

00:02:49,280 --> 00:02:54,560
what is it ah

00:02:52,640 --> 00:02:56,160
basically we are trying what we are

00:02:54,560 --> 00:02:59,360
trying to do

00:02:56,160 --> 00:03:02,159
and what we already most of

00:02:59,360 --> 00:03:04,560
it i would say or at least a half of it

00:03:02,159 --> 00:03:05,360
more than a half of it we've already

00:03:04,560 --> 00:03:08,560
done

00:03:05,360 --> 00:03:11,680
is basically to split a

00:03:08,560 --> 00:03:15,920
monolith design monolithic design we had

00:03:11,680 --> 00:03:18,720
before to which which were basically

00:03:15,920 --> 00:03:21,040
everything in one place there were some

00:03:18,720 --> 00:03:24,480
kind of back end but in the same

00:03:21,040 --> 00:03:26,799
same code structure gui does some logic

00:03:24,480 --> 00:03:28,480
for a gui but also something which

00:03:26,799 --> 00:03:32,000
should be done in back end

00:03:28,480 --> 00:03:35,760
and the text ui basically the same

00:03:32,000 --> 00:03:36,959
it was more or less back together the

00:03:35,760 --> 00:03:39,920
problem is that

00:03:36,959 --> 00:03:40,239
you have hard time to change something

00:03:39,920 --> 00:03:41,840
and

00:03:40,239 --> 00:03:43,920
see the results of your change your

00:03:41,840 --> 00:03:47,920
input everything it should

00:03:43,920 --> 00:03:49,920
it could modify or change the

00:03:47,920 --> 00:03:51,120
but where it could uh really change the

00:03:49,920 --> 00:03:54,239
behavior

00:03:51,120 --> 00:03:57,280
which is not really really good and we

00:03:54,239 --> 00:03:57,840
had a lot of problems with that so to

00:03:57,280 --> 00:04:01,439
change it

00:03:57,840 --> 00:04:04,959
so something like this

00:04:01,439 --> 00:04:08,959
which is basically to split

00:04:04,959 --> 00:04:14,239
parts of the anaconda into

00:04:08,959 --> 00:04:17,519
modules and modules are

00:04:14,239 --> 00:04:21,280
single units which will

00:04:17,519 --> 00:04:21,919
control or which will basically give you

00:04:21,280 --> 00:04:25,280
api

00:04:21,919 --> 00:04:28,080
to control view stay

00:04:25,280 --> 00:04:29,280
view state and everything about a

00:04:28,080 --> 00:04:31,280
feature set

00:04:29,280 --> 00:04:32,560
something so it means time zone module

00:04:31,280 --> 00:04:36,720
will for example give you

00:04:32,560 --> 00:04:39,440
dates uh and ability to set a

00:04:36,720 --> 00:04:40,800
time zone and dp servers and similar

00:04:39,440 --> 00:04:44,000
similar stuff

00:04:40,800 --> 00:04:47,360
and so on the interesting one is here is

00:04:44,000 --> 00:04:50,800
uh yeah and basically all the modules

00:04:47,360 --> 00:04:54,880
will connect to each other by

00:04:50,800 --> 00:04:56,639
the bus and they will provide stable api

00:04:54,880 --> 00:04:58,720
which is which could be interesting for

00:04:56,639 --> 00:04:59,120
you if you are writing your add-on or

00:04:58,720 --> 00:05:01,120
anything

00:04:59,120 --> 00:05:02,639
or something like that because you will

00:05:01,120 --> 00:05:05,919
basically give the same

00:05:02,639 --> 00:05:09,680
set of possibilities we had we have

00:05:05,919 --> 00:05:11,440
uh we are no we don't have any other way

00:05:09,680 --> 00:05:13,440
how to communicate with modules

00:05:11,440 --> 00:05:14,479
okay you can always create some

00:05:13,440 --> 00:05:15,759
something like

00:05:14,479 --> 00:05:18,160
file which will give you some

00:05:15,759 --> 00:05:19,840
information somewhere but you don't want

00:05:18,160 --> 00:05:20,960
to do that and we are not doing that

00:05:19,840 --> 00:05:24,000
really

00:05:20,960 --> 00:05:26,000
uh and

00:05:24,000 --> 00:05:27,199
all the modules have stable api and

00:05:26,000 --> 00:05:29,600
communicate with

00:05:27,199 --> 00:05:32,160
themselves the same works for ui

00:05:29,600 --> 00:05:35,840
basically the text ui graphical ui

00:05:32,160 --> 00:05:38,800
works just for has just logic for the ui

00:05:35,840 --> 00:05:40,400
nothing else and it will give all the

00:05:38,800 --> 00:05:44,000
data to the module

00:05:40,400 --> 00:05:47,600
which will then execute what's necessary

00:05:44,000 --> 00:05:49,360
and provide results to the graphical or

00:05:47,600 --> 00:05:52,400
text user interface

00:05:49,360 --> 00:05:56,160
uh what's interesting here is a boss

00:05:52,400 --> 00:05:58,160
boss is one this is main module i would

00:05:56,160 --> 00:06:01,360
say it's always there and it's

00:05:58,160 --> 00:06:03,759
his main its main responsibility is to

00:06:01,360 --> 00:06:07,520
style up all the modules

00:06:03,759 --> 00:06:10,960
and provide them kickstarts

00:06:07,520 --> 00:06:12,000
for example and grab all tasks for the

00:06:10,960 --> 00:06:14,400
installation

00:06:12,000 --> 00:06:17,199
execute the installation and so on it's

00:06:14,400 --> 00:06:19,919
basically some something like the

00:06:17,199 --> 00:06:21,039
main point which will manage all the all

00:06:19,919 --> 00:06:22,479
the work around

00:06:21,039 --> 00:06:24,240
with which which will manage all the

00:06:22,479 --> 00:06:27,680
modules and all

00:06:24,240 --> 00:06:31,360
everything which is not

00:06:27,680 --> 00:06:34,720
specific to one module i would say

00:06:31,360 --> 00:06:38,800
i hope it's understandable one thing

00:06:34,720 --> 00:06:42,479
we give ourselves uh

00:06:38,800 --> 00:06:46,160
as a rule basically is a goal is that

00:06:42,479 --> 00:06:49,599
we would like to change

00:06:46,160 --> 00:06:51,599
change everything without using noticing

00:06:49,599 --> 00:06:54,240
without using video with no user

00:06:51,599 --> 00:06:56,319
user visible changes which basically

00:06:54,240 --> 00:06:59,199
means that we

00:06:56,319 --> 00:07:02,080
did plenty of that already and if you

00:06:59,199 --> 00:07:06,000
are using fedora you may file

00:07:02,080 --> 00:07:09,840
will like show you may notice

00:07:06,000 --> 00:07:12,560
that uh we moved for example password

00:07:09,840 --> 00:07:13,520
uh password response and user spoke to

00:07:12,560 --> 00:07:17,039
the

00:07:13,520 --> 00:07:20,639
uh to the

00:07:17,039 --> 00:07:23,599
main hub but uh

00:07:20,639 --> 00:07:24,639
it's there there was much much more we

00:07:23,599 --> 00:07:27,360
already did

00:07:24,639 --> 00:07:29,199
without really really no no visible

00:07:27,360 --> 00:07:34,240
changes which was the goal

00:07:29,199 --> 00:07:37,680
do not interrupt user user workflow

00:07:34,240 --> 00:07:41,120
and the reasons why why we wanted

00:07:37,680 --> 00:07:44,319
to do the modularization so

00:07:41,120 --> 00:07:46,720
one main aspect i would say

00:07:44,319 --> 00:07:48,160
is the is the development and

00:07:46,720 --> 00:07:51,199
maintenance ability

00:07:48,160 --> 00:07:53,680
as i said before the original

00:07:51,199 --> 00:07:54,400
uh original here his structure or

00:07:53,680 --> 00:07:58,800
original

00:07:54,400 --> 00:08:02,479
structure of the anaconda was a

00:07:58,800 --> 00:08:06,240
british packet really it was uh

00:08:02,479 --> 00:08:07,280
that some logic for some logic was done

00:08:06,240 --> 00:08:09,199
in the ui

00:08:07,280 --> 00:08:11,120
some logic was done in the background

00:08:09,199 --> 00:08:12,560
back end and so on and it was hard to

00:08:11,120 --> 00:08:16,160
spot where you should

00:08:12,560 --> 00:08:20,319
change stuff and pretty we

00:08:16,160 --> 00:08:23,360
we were doing a break or bad regressions

00:08:20,319 --> 00:08:25,599
thanks to the point that we

00:08:23,360 --> 00:08:26,800
weren't sure what this change will

00:08:25,599 --> 00:08:29,919
really

00:08:26,800 --> 00:08:32,719
will really change in the behavior

00:08:29,919 --> 00:08:34,399
uh unfortunately viva trying because of

00:08:32,719 --> 00:08:36,080
that we are trying to do as small

00:08:34,399 --> 00:08:40,000
changes as possible

00:08:36,080 --> 00:08:42,320
especially for rel but for federalists

00:08:40,000 --> 00:08:43,360
to ourselves that we won't don't want to

00:08:42,320 --> 00:08:46,720
do that

00:08:43,360 --> 00:08:50,240
and the main reason why i'm telling this

00:08:46,720 --> 00:08:53,200
is basically that uh

00:08:50,240 --> 00:08:55,600
we are really trying to split the cold

00:08:53,200 --> 00:08:59,760
parts to ass

00:08:55,600 --> 00:09:02,800
minimal units which will

00:08:59,760 --> 00:09:05,920
have only a one

00:09:02,800 --> 00:09:06,560
thing to do which which which they are

00:09:05,920 --> 00:09:10,560
they are

00:09:06,560 --> 00:09:13,519
created to do just one thing ideally

00:09:10,560 --> 00:09:14,160
and i think we made a great progress on

00:09:13,519 --> 00:09:17,120
that

00:09:14,160 --> 00:09:17,839
uh but you can look on the on the code

00:09:17,120 --> 00:09:19,680
base

00:09:17,839 --> 00:09:23,120
if you need to create your addon or

00:09:19,680 --> 00:09:26,080
anything and see yourself

00:09:23,120 --> 00:09:26,800
another thing which is also in the first

00:09:26,080 --> 00:09:30,240
first point

00:09:26,800 --> 00:09:33,600
is uh basically the maintainability

00:09:30,240 --> 00:09:35,040
uh we've created a great test coverage

00:09:33,600 --> 00:09:37,279
for the new code

00:09:35,040 --> 00:09:38,080
i think we have something like 70 80

00:09:37,279 --> 00:09:40,560
percent

00:09:38,080 --> 00:09:42,560
which before it was maybe i don't know

00:09:40,560 --> 00:09:45,920
20 i guess

00:09:42,560 --> 00:09:49,600
uh not sure really uh

00:09:45,920 --> 00:09:52,560
and that's not only useful that we

00:09:49,600 --> 00:09:54,000
won't break the existing use cases do

00:09:52,560 --> 00:09:56,959
during our changes

00:09:54,000 --> 00:09:58,320
but it's also a great speed up of the

00:09:56,959 --> 00:10:00,240
development

00:09:58,320 --> 00:10:03,040
the problem with anaconda is that when

00:10:00,240 --> 00:10:05,120
you create your when you do your changes

00:10:03,040 --> 00:10:06,160
to test them you have to create an

00:10:05,120 --> 00:10:08,000
updates image

00:10:06,160 --> 00:10:10,480
provide the updates image to the virtual

00:10:08,000 --> 00:10:12,959
machine someone some basically upload it

00:10:10,480 --> 00:10:16,800
on some server or something like that

00:10:12,959 --> 00:10:19,120
and then boot your virtual machine test

00:10:16,800 --> 00:10:19,920
that's the use case great thing is

00:10:19,120 --> 00:10:21,839
testing the

00:10:19,920 --> 00:10:23,920
live dvd because you have to type your

00:10:21,839 --> 00:10:27,360
url all the time you are rebooting

00:10:23,920 --> 00:10:27,360
which is great and

00:10:27,680 --> 00:10:33,200
then basically test your changes

00:10:30,720 --> 00:10:34,560
and if it's not it does doesn't work you

00:10:33,200 --> 00:10:37,200
have to do it again

00:10:34,560 --> 00:10:38,399
and this is again and again i'm gonna

00:10:37,200 --> 00:10:40,320
i'm usually have

00:10:38,399 --> 00:10:42,079
like three virtual machines testing free

00:10:40,320 --> 00:10:46,160
use cases on

00:10:42,079 --> 00:10:46,480
at once and because of that we started

00:10:46,160 --> 00:10:49,680
with

00:10:46,480 --> 00:10:50,560
a different approach basically we will

00:10:49,680 --> 00:10:53,920
create

00:10:50,560 --> 00:10:55,440
our code we will create tests uh sorry

00:10:53,920 --> 00:11:00,079
for the noise

00:10:55,440 --> 00:11:03,760
we will create tests uh

00:11:00,079 --> 00:11:06,800
before we will try this uh

00:11:03,760 --> 00:11:08,079
code changes of in in the virtual

00:11:06,800 --> 00:11:10,560
machine basically we are doing

00:11:08,079 --> 00:11:12,800
test driven development because in the

00:11:10,560 --> 00:11:14,880
anaconda point of view it's much faster

00:11:12,800 --> 00:11:16,959
it's much faster to create a test and

00:11:14,880 --> 00:11:17,600
just adapt your codes to work on the

00:11:16,959 --> 00:11:23,120
test

00:11:17,600 --> 00:11:26,720
than to try the code individual machines

00:11:23,120 --> 00:11:30,560
and which also give us the side benefit

00:11:26,720 --> 00:11:30,560
is the great test coverage

00:11:31,120 --> 00:11:36,240
yeah uh another thing which i already

00:11:34,399 --> 00:11:39,519
pointed but it's really really

00:11:36,240 --> 00:11:43,360
uh one of the main points also

00:11:39,519 --> 00:11:46,800
is the stable api we don't

00:11:43,360 --> 00:11:49,600
provide it yet but

00:11:46,800 --> 00:11:52,560
the most of the api we have is stable

00:11:49,600 --> 00:11:56,240
but we don't want to

00:11:52,560 --> 00:11:59,440
give you a word on that because we don't

00:11:56,240 --> 00:12:01,519
really uh migrated everything so it

00:11:59,440 --> 00:12:02,959
could change because of some logic we

00:12:01,519 --> 00:12:04,959
don't see it

00:12:02,959 --> 00:12:06,639
but it's not happening really it's it's

00:12:04,959 --> 00:12:09,920
very rare

00:12:06,639 --> 00:12:11,040
and it's most of the time it's not

00:12:09,920 --> 00:12:14,160
something

00:12:11,040 --> 00:12:17,360
that hard to manage like to fix it

00:12:14,160 --> 00:12:17,360
fix fix the stuff

00:12:17,519 --> 00:12:21,040
another point which is pretty which

00:12:19,760 --> 00:12:24,320
could be pretty interesting

00:12:21,040 --> 00:12:28,000
for uh some i guess organizations

00:12:24,320 --> 00:12:30,560
and mainly uh other distributions who

00:12:28,000 --> 00:12:32,480
based on fedora or even they don't have

00:12:30,560 --> 00:12:33,519
to base on federer they just have to

00:12:32,480 --> 00:12:36,839
provide our

00:12:33,519 --> 00:12:38,160
provide some code and use parts of the

00:12:36,839 --> 00:12:41,200
anaconda uh

00:12:38,160 --> 00:12:44,160
is splitting ui from back end

00:12:41,200 --> 00:12:45,440
which what it means that basically

00:12:44,160 --> 00:12:47,440
thanks to the dbas

00:12:45,440 --> 00:12:48,560
you are able to write your own back end

00:12:47,440 --> 00:12:51,279
which will communic

00:12:48,560 --> 00:12:53,120
your your own ui which will communicate

00:12:51,279 --> 00:12:55,600
with our backend

00:12:53,120 --> 00:12:56,880
and it could be even that you will

00:12:55,600 --> 00:13:00,079
create your own

00:12:56,880 --> 00:13:03,120
modules as add-ons

00:13:00,079 --> 00:13:06,399
in the anaconda point of view

00:13:03,120 --> 00:13:08,720
and these will provide you logic

00:13:06,399 --> 00:13:10,560
which you need for your ui which is

00:13:08,720 --> 00:13:13,839
missing in the original parts or

00:13:10,560 --> 00:13:15,120
you will give an or give us a file as a

00:13:13,839 --> 00:13:17,680
bug or tell us that you

00:13:15,120 --> 00:13:19,680
needed this feature and if it's

00:13:17,680 --> 00:13:22,480
meaningful for us

00:13:19,680 --> 00:13:23,360
to implement it or it's easy to

00:13:22,480 --> 00:13:25,680
implement it

00:13:23,360 --> 00:13:28,560
we will most probably won't have a

00:13:25,680 --> 00:13:28,560
problem to do that

00:13:32,480 --> 00:13:36,000
so the current states where we are right

00:13:34,800 --> 00:13:38,959
now i will

00:13:36,000 --> 00:13:39,680
show a snippet of code i hope it will be

00:13:38,959 --> 00:13:42,880
a little bit

00:13:39,680 --> 00:13:45,600
maybe a little bit more uh for the

00:13:42,880 --> 00:13:46,240
advanced like people who are familiar

00:13:45,600 --> 00:13:48,800
with this

00:13:46,240 --> 00:13:49,920
with how to write addon in anaconda

00:13:48,800 --> 00:13:53,199
sorry for that

00:13:49,920 --> 00:13:53,600
but it's i think it's the best way how

00:13:53,199 --> 00:13:58,000
to

00:13:53,600 --> 00:13:58,000
show what we achieved

00:13:58,320 --> 00:14:03,440
so uh the current state of the

00:14:01,519 --> 00:14:06,720
modernization

00:14:03,440 --> 00:14:10,160
is basically main part is modules

00:14:06,720 --> 00:14:13,680
and modules are split to

00:14:10,160 --> 00:14:16,079
two to two parts i would say

00:14:13,680 --> 00:14:17,279
one is interface which will provide you

00:14:16,079 --> 00:14:20,000
the stable api

00:14:17,279 --> 00:14:20,800
and it's really an interface in our code

00:14:20,000 --> 00:14:23,279
we have

00:14:20,800 --> 00:14:25,279
just file which will provide you

00:14:23,279 --> 00:14:28,160
interface they can be inherited and so

00:14:25,279 --> 00:14:30,160
on and so on but they don't have a code

00:14:28,160 --> 00:14:32,800
really and the second one is

00:14:30,160 --> 00:14:37,040
implementation

00:14:32,800 --> 00:14:40,399
this is a a screenshot of a called

00:14:37,040 --> 00:14:42,480
of one of the interfaces uh basically

00:14:40,399 --> 00:14:44,160
we have the logic okay there's the logic

00:14:42,480 --> 00:14:46,240
for connecting the signals

00:14:44,160 --> 00:14:47,839
it has to be there sorry for that but

00:14:46,240 --> 00:14:50,000
other than that other than that

00:14:47,839 --> 00:14:52,160
it's just you will look that there's

00:14:50,000 --> 00:14:55,760
create payload which is really a dbas

00:14:52,160 --> 00:14:58,959
api method and

00:14:55,760 --> 00:15:01,519
it takes payload type which is string

00:14:58,959 --> 00:15:02,720
and it gives you object path which means

00:15:01,519 --> 00:15:06,079
a path to

00:15:02,720 --> 00:15:08,000
another dbas object and that's that's

00:15:06,079 --> 00:15:11,120
basically everything and we are also

00:15:08,000 --> 00:15:13,040
writing there are writing their possible

00:15:11,120 --> 00:15:15,760
values which are supported

00:15:13,040 --> 00:15:18,000
in this api so that means that you will

00:15:15,760 --> 00:15:20,399
when you are when you are trying to find

00:15:18,000 --> 00:15:22,399
how to do something you just have to

00:15:20,399 --> 00:15:24,240
look on the interfaces

00:15:22,399 --> 00:15:25,360
most of the time we are trying to if

00:15:24,240 --> 00:15:26,800
there is something missing some

00:15:25,360 --> 00:15:29,040
information or anything

00:15:26,800 --> 00:15:31,440
tell us we will give it or create a pull

00:15:29,040 --> 00:15:34,320
request that's even better

00:15:31,440 --> 00:15:36,160
and that's one of the benefit we are

00:15:34,320 --> 00:15:40,000
trying to give there basically to

00:15:36,160 --> 00:15:42,160
being able to uh to understand the code

00:15:40,000 --> 00:15:44,399
very quickly or understand the api too

00:15:42,160 --> 00:15:47,519
very quickly we want to use this

00:15:44,399 --> 00:15:49,600
this uh these interfaces to generate our

00:15:47,519 --> 00:15:51,600
future recommendation that's the plan

00:15:49,600 --> 00:15:55,519
right now so

00:15:51,600 --> 00:15:59,519
uh we are trying to have it as

00:15:55,519 --> 00:15:59,519
self-explanation as possible

00:15:59,839 --> 00:16:03,120
another piece of

00:16:01,930 --> 00:16:06,240
[Music]

00:16:03,120 --> 00:16:07,279
important piece of puzzle a piece of

00:16:06,240 --> 00:16:10,959
puzzle here

00:16:07,279 --> 00:16:14,160
is our targets basically

00:16:10,959 --> 00:16:14,560
uh what task is is a small unit which

00:16:14,160 --> 00:16:17,920
should

00:16:14,560 --> 00:16:21,680
do just one transaction in the

00:16:17,920 --> 00:16:23,519
installation environment and transaction

00:16:21,680 --> 00:16:24,720
is maybe not the correct word but

00:16:23,519 --> 00:16:28,720
basically what it

00:16:24,720 --> 00:16:28,720
does is that uh

00:16:28,800 --> 00:16:35,680
uh for example i want to set specific

00:16:32,079 --> 00:16:37,199
date oh okay specific date is not the

00:16:35,680 --> 00:16:39,519
correct example because it's

00:16:37,199 --> 00:16:40,639
really easy but everything which takes a

00:16:39,519 --> 00:16:42,480
little bit more time

00:16:40,639 --> 00:16:43,839
for example i want to install dnf

00:16:42,480 --> 00:16:47,759
package set

00:16:43,839 --> 00:16:51,680
the payload uh module will create a task

00:16:47,759 --> 00:16:54,639
and this task can be started by the

00:16:51,680 --> 00:16:56,639
by the end product sorry and provide

00:16:54,639 --> 00:16:59,600
path to this task

00:16:56,639 --> 00:17:00,480
and the task can be started and

00:16:59,600 --> 00:17:04,000
basically

00:17:00,480 --> 00:17:07,360
read the status and everything uh on the

00:17:04,000 --> 00:17:10,480
opposite on the d bus

00:17:07,360 --> 00:17:11,600
anything ui or your controller you will

00:17:10,480 --> 00:17:14,640
you will write

00:17:11,600 --> 00:17:17,360
or your own ui will basically forget

00:17:14,640 --> 00:17:20,000
this this path to the task and can start

00:17:17,360 --> 00:17:23,600
the task and follow if the task

00:17:20,000 --> 00:17:26,160
went finished and was directing cold

00:17:23,600 --> 00:17:26,160
basically

00:17:26,799 --> 00:17:29,919
i think this is great improvement

00:17:28,400 --> 00:17:34,080
because it force

00:17:29,919 --> 00:17:39,520
us to write the task to a separate

00:17:34,080 --> 00:17:42,640
uh separate sorry separate

00:17:39,520 --> 00:17:45,200
called basically when we

00:17:42,640 --> 00:17:46,160
want to do any logic which is a little

00:17:45,200 --> 00:17:48,559
bit complex

00:17:46,160 --> 00:17:50,160
more complicated we have to create it we

00:17:48,559 --> 00:17:51,520
should create a task and we have to

00:17:50,160 --> 00:17:54,080
basically because

00:17:51,520 --> 00:17:55,520
uh without the task we would froze our

00:17:54,080 --> 00:17:58,080
debuss api

00:17:55,520 --> 00:18:00,880
which we don't want to so the tasks are

00:17:58,080 --> 00:18:02,720
somehow must have a must have from our

00:18:00,880 --> 00:18:05,120
point of view but on the other hand it's

00:18:02,720 --> 00:18:08,240
also great uh

00:18:05,120 --> 00:18:10,400
enhancement of our code or great great

00:18:08,240 --> 00:18:11,760
important detail for the readability of

00:18:10,400 --> 00:18:14,960
the code because

00:18:11,760 --> 00:18:15,440
from the most most of the time you just

00:18:14,960 --> 00:18:18,160
need

00:18:15,440 --> 00:18:18,640
a name of the task and you know what is

00:18:18,160 --> 00:18:21,200
what is

00:18:18,640 --> 00:18:23,919
doing and you can run the task when you

00:18:21,200 --> 00:18:23,919
are ready to

00:18:25,760 --> 00:18:29,600
another import interesting point which

00:18:28,960 --> 00:18:33,600
we did

00:18:29,600 --> 00:18:37,200
already is configuration files

00:18:33,600 --> 00:18:40,160
basically before that we had

00:18:37,200 --> 00:18:41,200
uh the left side which were installed

00:18:40,160 --> 00:18:43,760
classes

00:18:41,200 --> 00:18:44,960
install class was python code which

00:18:43,760 --> 00:18:47,919
would describe

00:18:44,960 --> 00:18:49,520
your product your variant which means uh

00:18:47,919 --> 00:18:53,200
fedora workstation

00:18:49,520 --> 00:18:56,240
have default file system xfs

00:18:53,200 --> 00:18:59,919
which is not true anymore but it was

00:18:56,240 --> 00:19:02,480
uh and and

00:18:59,919 --> 00:19:03,840
it will it will give you default auto

00:19:02,480 --> 00:19:07,120
partitioning behavior

00:19:03,840 --> 00:19:10,559
and set

00:19:07,120 --> 00:19:12,960
how how the ui should look like

00:19:10,559 --> 00:19:13,679
and similar stuff this is great it gives

00:19:12,960 --> 00:19:16,160
you great

00:19:13,679 --> 00:19:17,120
power but on the other hand it also

00:19:16,160 --> 00:19:20,320
gives you

00:19:17,120 --> 00:19:23,520
a way way more

00:19:20,320 --> 00:19:26,640
uh ways how to

00:19:23,520 --> 00:19:28,080
break the code how to how to use

00:19:26,640 --> 00:19:31,600
something from anaconda

00:19:28,080 --> 00:19:34,080
which is not uh take it

00:19:31,600 --> 00:19:34,799
taken as uh api from our site and

00:19:34,080 --> 00:19:38,640
similar

00:19:34,799 --> 00:19:41,679
also it's hard to install to have these

00:19:38,640 --> 00:19:44,320
in the in the new solution

00:19:41,679 --> 00:19:46,640
because where it should be if it should

00:19:44,320 --> 00:19:48,640
be in the bus then you it has to be

00:19:46,640 --> 00:19:50,799
has to communicate with all the modules

00:19:48,640 --> 00:19:51,600
and it could be really really hard for

00:19:50,799 --> 00:19:54,559
users to

00:19:51,600 --> 00:19:54,559
to understand this

00:19:54,640 --> 00:20:01,280
so we took that and basically dropped it

00:19:58,240 --> 00:20:02,640
and created a configuration file the

00:20:01,280 --> 00:20:06,720
configuration files

00:20:02,640 --> 00:20:10,080
are on basically free places

00:20:06,720 --> 00:20:12,880
which is one is the default one seconds

00:20:10,080 --> 00:20:12,880
second is

00:20:13,120 --> 00:20:19,440
basically uh it's

00:20:16,320 --> 00:20:21,919
configuration of products

00:20:19,440 --> 00:20:23,120
and variants by the way product means

00:20:21,919 --> 00:20:25,039
federal

00:20:23,120 --> 00:20:27,919
uh for example or central scientific

00:20:25,039 --> 00:20:30,960
linux and variants mean workstation

00:20:27,919 --> 00:20:32,400
server container i will sit there up

00:20:30,960 --> 00:20:36,080
anything

00:20:32,400 --> 00:20:40,080
and the configuration files

00:20:36,080 --> 00:20:42,880
uh are pretty easy to yeah and

00:20:40,080 --> 00:20:43,679
uh last place sorry i forgot the last

00:20:42,880 --> 00:20:46,640
place

00:20:43,679 --> 00:20:48,640
uh which you can provide your own

00:20:46,640 --> 00:20:50,799
configuration file in the installation

00:20:48,640 --> 00:20:51,440
environment and it will rewrite any

00:20:50,799 --> 00:20:54,080
other

00:20:51,440 --> 00:20:55,360
it has the higher highest priority so

00:20:54,080 --> 00:20:59,039
you can basically

00:20:55,360 --> 00:21:02,080
if you are a geekboos who like to

00:20:59,039 --> 00:21:05,440
uh change tweak

00:21:02,080 --> 00:21:07,440
uh installation environment and have

00:21:05,440 --> 00:21:09,760
its own installation image you can

00:21:07,440 --> 00:21:12,240
create this configuration file to just

00:21:09,760 --> 00:21:13,840
uh change your default file system and

00:21:12,240 --> 00:21:16,559
use this iso

00:21:13,840 --> 00:21:16,960
no problem with that it should work of

00:21:16,559 --> 00:21:20,240
course

00:21:16,960 --> 00:21:23,200
uh it's not tested uh

00:21:20,240 --> 00:21:24,000
out of the like we are not testing each

00:21:23,200 --> 00:21:26,159
settings and

00:21:24,000 --> 00:21:27,600
all the combinations there's like plenty

00:21:26,159 --> 00:21:28,640
of the combination so it could there

00:21:27,600 --> 00:21:30,799
could be a bug

00:21:28,640 --> 00:21:31,760
but it basically supported so if you

00:21:30,799 --> 00:21:35,280
have a bug there

00:21:31,760 --> 00:21:38,320
or just file it on us uh

00:21:35,280 --> 00:21:42,000
one interesting detail is inheritance

00:21:38,320 --> 00:21:44,000
basically uh

00:21:42,000 --> 00:21:45,840
one of the benefit in the install

00:21:44,000 --> 00:21:49,840
classes was that

00:21:45,840 --> 00:21:50,960
the federer coreo not gorgeous fedora of

00:21:49,840 --> 00:21:55,280
silver blue

00:21:50,960 --> 00:21:58,400
uh in her inherit uh federer

00:21:55,280 --> 00:22:00,720
uh workstation which me and change just

00:21:58,400 --> 00:22:02,880
some of the values we have the same

00:22:00,720 --> 00:22:05,440
logic in the configuration files but

00:22:02,880 --> 00:22:07,120
it's not in the python solution like

00:22:05,440 --> 00:22:08,559
really really inheritance but you will

00:22:07,120 --> 00:22:11,600
set the base product

00:22:08,559 --> 00:22:14,559
and base variant and it will provide

00:22:11,600 --> 00:22:15,360
it will make like the uh between step

00:22:14,559 --> 00:22:17,520
which will

00:22:15,360 --> 00:22:19,760
load the configuration values from the

00:22:17,520 --> 00:22:21,840
defaults then overwrite them by the base

00:22:19,760 --> 00:22:25,120
product and base variant and then

00:22:21,840 --> 00:22:28,400
uh override them by the by the by your

00:22:25,120 --> 00:22:31,600
product and variant which is really

00:22:28,400 --> 00:22:34,960
pretty simple to understand and because

00:22:31,600 --> 00:22:37,679
uh it's much less

00:22:34,960 --> 00:22:38,480
error prone than would than the install

00:22:37,679 --> 00:22:41,280
classes

00:22:38,480 --> 00:22:43,039
and it's pretty easy to modify we

00:22:41,280 --> 00:22:44,159
basically the battery has changed to

00:22:43,039 --> 00:22:46,559
switch to the

00:22:44,159 --> 00:22:47,200
default battery fs it was more or less

00:22:46,559 --> 00:22:49,200
one line

00:22:47,200 --> 00:22:51,440
in the configuration file there were

00:22:49,200 --> 00:22:52,159
more stuff but it was more of the fixing

00:22:51,440 --> 00:22:54,640
stuff

00:22:52,159 --> 00:22:56,320
but the change like switching to

00:22:54,640 --> 00:22:58,480
something else it was really really

00:22:56,320 --> 00:23:00,159
really pretty easy and most of the most

00:22:58,480 --> 00:23:03,520
of the

00:23:00,159 --> 00:23:06,400
oh yeah plenty of the

00:23:03,520 --> 00:23:06,880
last changes we did from the community

00:23:06,400 --> 00:23:08,240
like

00:23:06,880 --> 00:23:10,080
sales system by changes and

00:23:08,240 --> 00:23:12,080
self-contained changes was

00:23:10,080 --> 00:23:13,120
really done by the changing the

00:23:12,080 --> 00:23:14,720
configuration file

00:23:13,120 --> 00:23:16,400
because most of the time they just want

00:23:14,720 --> 00:23:18,559
to change the default

00:23:16,400 --> 00:23:20,559
they don't want to add something new

00:23:18,559 --> 00:23:25,760
it's it's the miner

00:23:20,559 --> 00:23:25,760
miner minor uh request

00:23:26,400 --> 00:23:31,520
oh yeah another

00:23:29,520 --> 00:23:33,760
another interesting point is from the

00:23:31,520 --> 00:23:36,799
add-ons

00:23:33,760 --> 00:23:38,640
we i think we improved and i don't

00:23:36,799 --> 00:23:42,080
support a lot

00:23:38,640 --> 00:23:46,799
however because not all the modules

00:23:42,080 --> 00:23:50,240
are are yet migrated

00:23:46,799 --> 00:23:53,200
then you can have a difficulty with it

00:23:50,240 --> 00:23:55,039
but the plan is to give a module on the

00:23:53,200 --> 00:23:59,360
basically same level

00:23:55,039 --> 00:24:01,360
as the modules uh yeah as the model so

00:23:59,360 --> 00:24:02,720
they will have the same power and same

00:24:01,360 --> 00:24:06,640
possibilities

00:24:02,720 --> 00:24:08,640
to modify your system or to read uh

00:24:06,640 --> 00:24:12,080
things from where you read stuff from

00:24:08,640 --> 00:24:12,080
the from the modules

00:24:12,240 --> 00:24:18,799
so the benefits are of course a

00:24:15,440 --> 00:24:19,279
stable api one of the benefit which

00:24:18,799 --> 00:24:21,840
could be

00:24:19,279 --> 00:24:22,640
pretty interesting for some people is

00:24:21,840 --> 00:24:25,360
you can use

00:24:22,640 --> 00:24:26,559
a language of your choice we don't force

00:24:25,360 --> 00:24:30,000
you to use python

00:24:26,559 --> 00:24:31,279
it's just it's you just have to have

00:24:30,000 --> 00:24:35,120
support for

00:24:31,279 --> 00:24:37,120
uh for debuss and that's everything

00:24:35,120 --> 00:24:39,600
we don't care really if you are using

00:24:37,120 --> 00:24:41,600
our api how we are using our api

00:24:39,600 --> 00:24:42,880
uh from the point of view of your code

00:24:41,600 --> 00:24:44,960
but on the other hand

00:24:42,880 --> 00:24:46,080
i don't really expect us to understand

00:24:44,960 --> 00:24:48,559
your code if you use

00:24:46,080 --> 00:24:49,760
something like i don't know scala or

00:24:48,559 --> 00:24:53,120
anything

00:24:49,760 --> 00:24:57,760
uh which we don't understand

00:24:53,120 --> 00:25:00,159
uh and the last point which is

00:24:57,760 --> 00:25:01,600
unfortunately i would say python only

00:25:00,159 --> 00:25:04,400
but for the

00:25:01,600 --> 00:25:06,880
really obvious reasons is that you can

00:25:04,400 --> 00:25:11,360
use our tooling we are using in anaconda

00:25:06,880 --> 00:25:14,960
and we specifically created

00:25:11,360 --> 00:25:18,159
a python python model basically python

00:25:14,960 --> 00:25:22,159
like the directory is way to be

00:25:18,159 --> 00:25:25,360
in it by is the python module in uh

00:25:22,159 --> 00:25:28,080
uh in python but basically we

00:25:25,360 --> 00:25:29,440
are thinking about maybe even packaging

00:25:28,080 --> 00:25:33,039
it i'm not sure if that

00:25:29,440 --> 00:25:34,960
gives any sense but uh all the

00:25:33,039 --> 00:25:38,159
all the pieces of code which we are

00:25:34,960 --> 00:25:41,360
using and it could be interesting for

00:25:38,159 --> 00:25:44,559
add-ons you are free to use and it's

00:25:41,360 --> 00:25:45,279
uh for example that you can just use our

00:25:44,559 --> 00:25:49,360
storage

00:25:45,279 --> 00:25:52,799
uh constant and to get proxy

00:25:49,360 --> 00:25:56,559
uh proxy for the debuss object

00:25:52,799 --> 00:25:59,279
uh uh above like behind it

00:25:56,559 --> 00:26:00,000
and it's pretty pretty useful and is

00:25:59,279 --> 00:26:02,960
helping us

00:26:00,000 --> 00:26:05,120
a lot of uh it's helping items a lot so

00:26:02,960 --> 00:26:06,240
you can simplify your workflow all of it

00:26:05,120 --> 00:26:08,080
is

00:26:06,240 --> 00:26:12,559
if there's something missing and it

00:26:08,080 --> 00:26:12,559
could be interesting to us just tell us

00:26:13,120 --> 00:26:16,240
and even if you don't know if it's

00:26:14,960 --> 00:26:18,720
interesting to us because

00:26:16,240 --> 00:26:20,799
you don't have to know what we will tell

00:26:18,720 --> 00:26:20,799
you

00:26:21,520 --> 00:26:28,000
so and now the interesting part

00:26:24,960 --> 00:26:31,039
of what was already implemented

00:26:28,000 --> 00:26:32,000
as you see plenty of the modules were

00:26:31,039 --> 00:26:34,320
already

00:26:32,000 --> 00:26:37,039
are already on the debuss the only

00:26:34,320 --> 00:26:40,720
missing part is payload

00:26:37,039 --> 00:26:44,400
and uh it's special

00:26:40,720 --> 00:26:48,480
partially in the diva on the devas

00:26:44,400 --> 00:26:50,720
so uh i will i will go with the

00:26:48,480 --> 00:26:52,559
just just a quickly by the list

00:26:50,720 --> 00:26:53,279
basically you have the localization so

00:26:52,559 --> 00:26:56,480
you can set

00:26:53,279 --> 00:26:58,720
keyboard and and your language

00:26:56,480 --> 00:26:59,760
by the module it's done it's used

00:26:58,720 --> 00:27:02,880
already

00:26:59,760 --> 00:27:04,400
you have the network uh radic radical

00:27:02,880 --> 00:27:08,000
from our team

00:27:04,400 --> 00:27:11,279
made a great work there and it's pretty

00:27:08,000 --> 00:27:12,159
i would say it's really easy to use the

00:27:11,279 --> 00:27:14,559
module

00:27:12,159 --> 00:27:15,679
uh when you take into account how

00:27:14,559 --> 00:27:19,039
complicated is the

00:27:15,679 --> 00:27:21,039
whole thing um and

00:27:19,039 --> 00:27:24,080
yeah one one note about this we are

00:27:21,039 --> 00:27:28,159
trying to be to have minimal api

00:27:24,080 --> 00:27:30,480
which means we don't want to

00:27:28,159 --> 00:27:31,919
implement something which won't be used

00:27:30,480 --> 00:27:35,039
it doesn't mean that we

00:27:31,919 --> 00:27:36,240
won't provide you anything more we are

00:27:35,039 --> 00:27:39,440
just requesting

00:27:36,240 --> 00:27:42,240
or your uh your heads up your needing

00:27:39,440 --> 00:27:42,960
your info about what you are interesting

00:27:42,240 --> 00:27:45,600
to have

00:27:42,960 --> 00:27:46,399
interested to have we have oh we have

00:27:45,600 --> 00:27:50,000
even now

00:27:46,399 --> 00:27:51,679
like few nodes from our existing add-ons

00:27:50,000 --> 00:27:55,039
which we are trying to

00:27:51,679 --> 00:27:55,840
uh trying to modify them to not break

00:27:55,039 --> 00:27:58,960
them basically

00:27:55,840 --> 00:28:02,000
when we are doing the changes

00:27:58,960 --> 00:28:04,399
yeah so the network

00:28:02,000 --> 00:28:07,120
then is the security basically the out

00:28:04,399 --> 00:28:10,480
select outcome fixed linux stuff

00:28:07,120 --> 00:28:11,200
uh services uh you are able to enable

00:28:10,480 --> 00:28:14,640
service

00:28:11,200 --> 00:28:15,520
ins uh enable service stop survey start

00:28:14,640 --> 00:28:17,600
service not sure

00:28:15,520 --> 00:28:19,360
not sure if you are you are able to

00:28:17,600 --> 00:28:19,679
start and stop series because it doesn't

00:28:19,360 --> 00:28:22,720
give

00:28:19,679 --> 00:28:26,320
much much more much sense but

00:28:22,720 --> 00:28:29,360
it has minimal uh it has minimal

00:28:26,320 --> 00:28:31,760
it has the api which is provided by the

00:28:29,360 --> 00:28:34,799
kickstart

00:28:31,760 --> 00:28:39,760
then we have a storage and i

00:28:34,799 --> 00:28:39,760
really really have to

00:28:39,840 --> 00:28:46,799
have to give my respect to wendy ponsova

00:28:43,360 --> 00:28:48,080
who did this work because moving the

00:28:46,799 --> 00:28:51,440
stage

00:28:48,080 --> 00:28:54,720
in anaconda to a module is a very

00:28:51,440 --> 00:28:58,880
heroic task really because

00:28:54,720 --> 00:29:01,600
as you know we have custom configuration

00:28:58,880 --> 00:29:04,640
spoke we have auto partitioning

00:29:01,600 --> 00:29:08,240
and the logic is all everything in the

00:29:04,640 --> 00:29:10,399
in the module and the model is uh

00:29:08,240 --> 00:29:12,399
created in a way that there are viewers

00:29:10,399 --> 00:29:14,960
it has plenty of interfaces

00:29:12,399 --> 00:29:16,480
basically you have to you can use the

00:29:14,960 --> 00:29:19,919
interface just to

00:29:16,480 --> 00:29:23,440
change your fcoe you have to create

00:29:19,919 --> 00:29:25,679
you have to you you will use interface

00:29:23,440 --> 00:29:27,600
just to use the council custom partition

00:29:25,679 --> 00:29:29,279
you will use another interface for auto

00:29:27,600 --> 00:29:29,840
partitioning and so on and so on and so

00:29:29,279 --> 00:29:32,399
on

00:29:29,840 --> 00:29:33,520
it's really nicely separated and it

00:29:32,399 --> 00:29:37,120
gives sense

00:29:33,520 --> 00:29:40,399
even for like looking for device 3

00:29:37,120 --> 00:29:41,520
uh what devices will be or how the

00:29:40,399 --> 00:29:44,960
partitioning will be

00:29:41,520 --> 00:29:47,279
uh will look like after the installation

00:29:44,960 --> 00:29:48,159
and similar stuff there's plenty and

00:29:47,279 --> 00:29:51,520
plenty

00:29:48,159 --> 00:29:54,720
of code moved and reworked and

00:29:51,520 --> 00:29:57,279
it's working pretty great we had a

00:29:54,720 --> 00:29:58,559
minimal amount of bugs which i was

00:29:57,279 --> 00:30:01,600
pretty serious but a

00:29:58,559 --> 00:30:02,320
surprise or when you take into account

00:30:01,600 --> 00:30:05,360
how

00:30:02,320 --> 00:30:08,559
uh how giant

00:30:05,360 --> 00:30:11,840
piece of gold is this

00:30:08,559 --> 00:30:14,480
so the storage is great really another

00:30:11,840 --> 00:30:17,360
one is time zone set your date time

00:30:14,480 --> 00:30:19,440
as i said to before ntp servers and so

00:30:17,360 --> 00:30:19,440
on

00:30:19,520 --> 00:30:22,720
and another one is a subscription which

00:30:22,320 --> 00:30:26,480
is

00:30:22,720 --> 00:30:29,760
uh may we just work a whole from

00:30:26,480 --> 00:30:32,640
uh martin coleman from our team and

00:30:29,760 --> 00:30:33,120
it's mainly you are mainly it's it's a

00:30:32,640 --> 00:30:36,799
great

00:30:33,120 --> 00:30:37,120
great uh great module which should be

00:30:36,799 --> 00:30:40,320
there

00:30:37,120 --> 00:30:42,799
which should have been there even like

00:30:40,320 --> 00:30:44,000
two years ago but it wasn't it's pretty

00:30:42,799 --> 00:30:48,240
neural

00:30:44,000 --> 00:30:50,960
and it's mainly for else so sorry about

00:30:48,240 --> 00:30:51,520
talking about this about that too much

00:30:50,960 --> 00:30:54,720
if

00:30:51,520 --> 00:30:58,399
if that's the case but uh

00:30:54,720 --> 00:31:01,919
martin did a great work on that and it's

00:30:58,399 --> 00:31:01,919
uh it's uh

00:31:02,559 --> 00:31:08,159
it there they have there was a really

00:31:05,519 --> 00:31:11,840
big amount of iterations and tweaking

00:31:08,159 --> 00:31:14,960
to make it work and finally it's there

00:31:11,840 --> 00:31:15,360
and uh another one is user so create

00:31:14,960 --> 00:31:17,760
your

00:31:15,360 --> 00:31:20,640
set your response password uh create

00:31:17,760 --> 00:31:23,760
user and so on and so on

00:31:20,640 --> 00:31:27,360
uh i don't have

00:31:23,760 --> 00:31:29,120
payload here but it's for the reason

00:31:27,360 --> 00:31:31,039
the reason is that i have a separate

00:31:29,120 --> 00:31:35,519
slide for that

00:31:31,039 --> 00:31:38,640
because it's not really uh basically

00:31:35,519 --> 00:31:41,679
the payload i think is the module

00:31:38,640 --> 00:31:43,120
or muslim is the model was called which

00:31:41,679 --> 00:31:46,559
was

00:31:43,120 --> 00:31:48,559
the biggest pain in like way

00:31:46,559 --> 00:31:50,640
how to change something and not writings

00:31:48,559 --> 00:31:54,080
break something else

00:31:50,640 --> 00:31:58,320
and we wanted to change it

00:31:54,080 --> 00:32:01,760
so we've basically changed the whole way

00:31:58,320 --> 00:32:02,240
how it uh how it would work and this is

00:32:01,760 --> 00:32:04,960
more

00:32:02,240 --> 00:32:06,000
more or less in the way how we want to

00:32:04,960 --> 00:32:09,360
have it because it's

00:32:06,000 --> 00:32:12,559
as you see its future plan

00:32:09,360 --> 00:32:15,039
uh right now we just have implemented

00:32:12,559 --> 00:32:16,799
some kind of sort support but it will

00:32:15,039 --> 00:32:19,840
change

00:32:16,799 --> 00:32:23,679
basically before it was uh

00:32:19,840 --> 00:32:24,320
one file i would say for each payload

00:32:23,679 --> 00:32:27,200
which means

00:32:24,320 --> 00:32:28,480
when you set when you're installing core

00:32:27,200 --> 00:32:31,600
uh

00:32:28,480 --> 00:32:35,200
not core sorry silver blue no

00:32:31,600 --> 00:32:37,120
you had rpm os3 payload

00:32:35,200 --> 00:32:40,240
and when you install when we was

00:32:37,120 --> 00:32:41,200
installing server you had dnf panel when

00:32:40,240 --> 00:32:44,159
you were installing

00:32:41,200 --> 00:32:45,760
live image you have you had lifeless

00:32:44,159 --> 00:32:48,159
available

00:32:45,760 --> 00:32:51,039
and that's even one special for live

00:32:48,159 --> 00:32:54,080
live image from the kickstart

00:32:51,039 --> 00:32:57,360
uh not live image before live

00:32:54,080 --> 00:32:58,880
uh dvd sorry dialog dvd is live os and

00:32:57,360 --> 00:33:02,559
live image from the kickstart

00:32:58,880 --> 00:33:04,480
is a live image which kind of share code

00:33:02,559 --> 00:33:05,919
the problem is that basically the dnf

00:33:04,480 --> 00:33:09,120
payload

00:33:05,919 --> 00:33:12,399
and all the payloads have to have

00:33:09,120 --> 00:33:15,840
take care of all the sources

00:33:12,399 --> 00:33:19,039
and that's the biggest pain because

00:33:15,840 --> 00:33:22,000
they were shed called like not

00:33:19,039 --> 00:33:24,880
called but environment with the

00:33:22,000 --> 00:33:28,080
j-code so what we did in the j code we

00:33:24,880 --> 00:33:31,519
used in the in the in the

00:33:28,080 --> 00:33:32,880
uh in the code in the dnf payload

00:33:31,519 --> 00:33:35,679
basically

00:33:32,880 --> 00:33:36,559
yeah i think it was only the nf payload

00:33:35,679 --> 00:33:39,600
and

00:33:36,559 --> 00:33:42,880
the problem there was

00:33:39,600 --> 00:33:44,320
that it's really hard to spot why it's

00:33:42,880 --> 00:33:46,720
behaved this way

00:33:44,320 --> 00:33:49,279
and even then you have something like

00:33:46,720 --> 00:33:52,399
you have a method and you have free ifs

00:33:49,279 --> 00:33:55,679
with explanation if uh

00:33:52,399 --> 00:33:58,480
jacob mounted repository here or

00:33:55,679 --> 00:34:00,080
if jacob mounted repository here and

00:33:58,480 --> 00:34:02,000
stage two here

00:34:00,080 --> 00:34:03,360
and it's great really great to debug

00:34:02,000 --> 00:34:05,600
something like that

00:34:03,360 --> 00:34:07,200
so and you know you don't know why they

00:34:05,600 --> 00:34:09,760
could do it that does it

00:34:07,200 --> 00:34:10,879
of course or done it sorry uh of course

00:34:09,760 --> 00:34:14,720
so

00:34:10,879 --> 00:34:15,760
we we uh took a totally different

00:34:14,720 --> 00:34:19,440
approach

00:34:15,760 --> 00:34:22,720
and this is more more or less really

00:34:19,440 --> 00:34:25,520
uh really an idea

00:34:22,720 --> 00:34:27,599
how to how we want to work it how we

00:34:25,520 --> 00:34:30,079
want to have it working but

00:34:27,599 --> 00:34:30,960
we don't know if it's if there won't be

00:34:30,079 --> 00:34:34,159
any any

00:34:30,960 --> 00:34:36,639
like modifications because could be

00:34:34,159 --> 00:34:38,079
we missed something so basically there

00:34:36,639 --> 00:34:40,320
will be payloads

00:34:38,079 --> 00:34:41,440
as the main module which you will

00:34:40,320 --> 00:34:43,520
contact

00:34:41,440 --> 00:34:44,560
you will use it to create your own

00:34:43,520 --> 00:34:48,240
payload

00:34:44,560 --> 00:34:51,839
and you will get it uh as a debus

00:34:48,240 --> 00:34:54,240
path and then you have the payload and

00:34:51,839 --> 00:34:58,240
the payload have

00:34:54,240 --> 00:35:00,880
one to n sources and the thoughts

00:34:58,240 --> 00:35:02,960
should be created by uh something

00:35:00,880 --> 00:35:04,000
different from payload so payloads will

00:35:02,960 --> 00:35:06,079
basically give you

00:35:04,000 --> 00:35:07,440
provide you a way that should be the

00:35:06,079 --> 00:35:09,359
graph should be a little bit

00:35:07,440 --> 00:35:11,200
differently i guess because there should

00:35:09,359 --> 00:35:13,280
be something which will create a payload

00:35:11,200 --> 00:35:14,800
and something like the source creator

00:35:13,280 --> 00:35:17,680
and the source creator will give you

00:35:14,800 --> 00:35:19,839
sources which you will basically attach

00:35:17,680 --> 00:35:22,560
to the payload i hope it's not that

00:35:19,839 --> 00:35:25,280
complicated and somehow understandable

00:35:22,560 --> 00:35:27,280
uh but the logic is as you see not the

00:35:25,280 --> 00:35:29,839
trivial

00:35:27,280 --> 00:35:30,400
basically what we are trying to do is to

00:35:29,839 --> 00:35:33,599
move

00:35:30,400 --> 00:35:36,000
all the setting of the swords

00:35:33,599 --> 00:35:37,599
into a separate unit separates a

00:35:36,000 --> 00:35:41,200
separate

00:35:37,599 --> 00:35:42,720
part which will which will basically

00:35:41,200 --> 00:35:45,520
payload will just tell

00:35:42,720 --> 00:35:46,240
all the sources to just set up and

00:35:45,520 --> 00:35:49,520
provide me

00:35:46,240 --> 00:35:50,480
paths where i where i have mount what i

00:35:49,520 --> 00:35:53,520
can do

00:35:50,480 --> 00:35:56,720
that i can use to start the installation

00:35:53,520 --> 00:36:00,000
and in the nfs iso uh

00:35:56,720 --> 00:36:02,240
i nfs iso uh source example

00:36:00,000 --> 00:36:03,040
it will mount the source will mount the

00:36:02,240 --> 00:36:05,599
nfs

00:36:03,040 --> 00:36:07,599
then look for the iso and if there is an

00:36:05,599 --> 00:36:09,760
iso it will mount the iso and provide

00:36:07,599 --> 00:36:10,960
the path to the iso

00:36:09,760 --> 00:36:12,800
which is which could be really

00:36:10,960 --> 00:36:16,000
complicated because even

00:36:12,800 --> 00:36:18,079
we support without the iso with expanded

00:36:16,000 --> 00:36:20,240
uh expanded install tree so it could be

00:36:18,079 --> 00:36:25,119
like just like the nfs

00:36:20,240 --> 00:36:28,800
uh nfs directory and so also

00:36:25,119 --> 00:36:32,000
uh so it could be really not transparent

00:36:28,800 --> 00:36:35,280
and uh all these mounting

00:36:32,000 --> 00:36:38,400
and stuff is happening just in the

00:36:35,280 --> 00:36:41,359
directory specific for the given source

00:36:38,400 --> 00:36:42,000
so they don't like fighting for the same

00:36:41,359 --> 00:36:46,800
director

00:36:42,000 --> 00:36:46,800
as before i hope it's it's clear

00:36:47,359 --> 00:36:50,800
so our other future plans for the

00:36:49,520 --> 00:36:52,480
mobilization

00:36:50,800 --> 00:36:56,320
is basically to weaken dependencies

00:36:52,480 --> 00:37:00,640
between modules so we are thinking about

00:36:56,320 --> 00:37:03,920
packaging modules as separate packages

00:37:00,640 --> 00:37:06,640
not sure if we go that way or

00:37:03,920 --> 00:37:07,599
really or not because it could be more

00:37:06,640 --> 00:37:10,400
or less

00:37:07,599 --> 00:37:11,599
another word for us if you when no one

00:37:10,400 --> 00:37:14,640
asked for that

00:37:11,599 --> 00:37:18,000
but if there will be any any like

00:37:14,640 --> 00:37:19,839
uh interest for that we will

00:37:18,000 --> 00:37:21,359
look on that and we are thinking about

00:37:19,839 --> 00:37:25,040
it even now

00:37:21,359 --> 00:37:27,359
so we will see another interesting

00:37:25,040 --> 00:37:28,640
piece of code will be dynamics sorting

00:37:27,359 --> 00:37:31,280
of installation tasks

00:37:28,640 --> 00:37:33,440
basically when the installation starts

00:37:31,280 --> 00:37:35,119
every module has a method which will

00:37:33,440 --> 00:37:38,000
provide you

00:37:35,119 --> 00:37:38,560
installation tasks are not you but the

00:37:38,000 --> 00:37:43,280
boss

00:37:38,560 --> 00:37:45,119
basically the boss give the uh give

00:37:43,280 --> 00:37:46,640
all the modules information that the

00:37:45,119 --> 00:37:49,440
installation will start

00:37:46,640 --> 00:37:51,119
and collect all the tasks which have to

00:37:49,440 --> 00:37:54,880
be run

00:37:51,119 --> 00:37:55,760
in the uh to make the installation

00:37:54,880 --> 00:37:59,040
complete

00:37:55,760 --> 00:38:01,359
yeah by the way we want to support uh

00:37:59,040 --> 00:38:02,079
we want to support payloads multiple

00:38:01,359 --> 00:38:05,359
payloads

00:38:02,079 --> 00:38:07,359
and they will run sequentially so

00:38:05,359 --> 00:38:08,960
you can you can use this design

00:38:07,359 --> 00:38:11,680
basically the same way

00:38:08,960 --> 00:38:12,079
that the installation tasks will be will

00:38:11,680 --> 00:38:14,240
be

00:38:12,079 --> 00:38:15,359
retrieved from all the payloads and run

00:38:14,240 --> 00:38:18,400
one-on-one

00:38:15,359 --> 00:38:19,359
uh based on some priority or stages we

00:38:18,400 --> 00:38:22,800
don't know it

00:38:19,359 --> 00:38:26,160
exactly how we will do this

00:38:22,800 --> 00:38:29,200
uh and another one is

00:38:26,160 --> 00:38:30,000
that we want to but we are not closing

00:38:29,200 --> 00:38:31,359
today yet

00:38:30,000 --> 00:38:33,440
because we have to finish the

00:38:31,359 --> 00:38:34,880
mobilization first but we want to create

00:38:33,440 --> 00:38:39,200
a web ui

00:38:34,880 --> 00:38:42,800
uh basically uh built on the cockpit

00:38:39,200 --> 00:38:46,079
which will uh which will provide you

00:38:42,800 --> 00:38:49,200
easy way how to do a remote installation

00:38:46,079 --> 00:38:50,000
uh without any ambience and vnc viewer

00:38:49,200 --> 00:38:53,920
or anything

00:38:50,000 --> 00:38:53,920
basically to provide you full ui

00:38:54,079 --> 00:39:00,560
and uh we want to give you more

00:38:57,599 --> 00:39:05,200
possibilities for another one which was

00:39:00,560 --> 00:39:08,560
more or less already already all set

00:39:05,200 --> 00:39:12,240
uh we want to give

00:39:08,560 --> 00:39:13,440
we want to give you a sm if you need

00:39:12,240 --> 00:39:16,160
something

00:39:13,440 --> 00:39:16,880
just tell us and we will edit it's not

00:39:16,160 --> 00:39:19,680
that we

00:39:16,880 --> 00:39:20,560
are not we are close to extending the

00:39:19,680 --> 00:39:22,160
ipi

00:39:20,560 --> 00:39:25,359
it's just we don't want to implement

00:39:22,160 --> 00:39:25,359
something which is not needed

00:39:26,079 --> 00:39:31,280
yeah so now the second and i have as i

00:39:29,440 --> 00:39:34,480
expected i have 10 minutes

00:39:31,280 --> 00:39:37,920
uh uh not even yeah 10 minutes

00:39:34,480 --> 00:39:41,760
uh so the second

00:39:37,920 --> 00:39:45,760
part which will be just a quick list

00:39:41,760 --> 00:39:47,680
about what you can expect on fedora 33

00:39:45,760 --> 00:39:49,599
it's not about mobilization anymore

00:39:47,680 --> 00:39:52,240
because modernization is again

00:39:49,599 --> 00:39:53,119
done in the backend and we are trying to

00:39:52,240 --> 00:39:56,400
not

00:39:53,119 --> 00:39:59,599
really change visible stuff for the user

00:39:56,400 --> 00:40:01,440
but this was uh this was

00:39:59,599 --> 00:40:03,119
changes system by changes and

00:40:01,440 --> 00:40:06,400
self-contained changes basically

00:40:03,119 --> 00:40:06,800
to uh our system right i think all of

00:40:06,400 --> 00:40:10,000
them

00:40:06,800 --> 00:40:12,480
ah everyone uh which were

00:40:10,000 --> 00:40:13,839
proposed by someone complete else

00:40:12,480 --> 00:40:15,920
outside of our team

00:40:13,839 --> 00:40:17,040
and just done in the anaconda so you

00:40:15,920 --> 00:40:18,400
will you will

00:40:17,040 --> 00:40:20,079
see the change behavior that's the

00:40:18,400 --> 00:40:23,200
reason why i have it here

00:40:20,079 --> 00:40:26,480
that you can expect it uh this from

00:40:23,200 --> 00:40:30,240
33 and we did not

00:40:26,480 --> 00:40:33,680
do like nothing we did some work but

00:40:30,240 --> 00:40:36,319
it was more or less uh society testing

00:40:33,680 --> 00:40:37,200
and if there were some work there were

00:40:36,319 --> 00:40:40,720
some work on

00:40:37,200 --> 00:40:43,200
on the on one of the changes i i will

00:40:40,720 --> 00:40:46,319
tell you better

00:40:43,200 --> 00:40:48,880
uh so the first

00:40:46,319 --> 00:40:50,880
part and most interesting one is the

00:40:48,880 --> 00:40:54,480
battery fs by default

00:40:50,880 --> 00:40:59,200
it was a workstation a working group

00:40:54,480 --> 00:41:02,800
of work mainly i have to

00:40:59,200 --> 00:41:06,319
i have to give my respect my

00:41:02,800 --> 00:41:08,800
my gratitude i guess not sure it's hard

00:41:06,319 --> 00:41:09,520
if you it depends on if you literally

00:41:08,800 --> 00:41:12,720
like or

00:41:09,520 --> 00:41:16,000
uh don't like the patriarchs uh to

00:41:12,720 --> 00:41:17,119
neil gompa and chris murphy i know there

00:41:16,000 --> 00:41:20,079
were more people

00:41:17,119 --> 00:41:20,400
who were working on this but these two

00:41:20,079 --> 00:41:23,280
are

00:41:20,400 --> 00:41:24,000
more most involved in the installer side

00:41:23,280 --> 00:41:26,400
so i'm not

00:41:24,000 --> 00:41:27,599
telling like these are the only one who

00:41:26,400 --> 00:41:31,680
worked on this change

00:41:27,599 --> 00:41:35,920
that's not true at all and

00:41:31,680 --> 00:41:37,119
basically it was just one change in the

00:41:35,920 --> 00:41:40,240
configuration file

00:41:37,119 --> 00:41:43,680
and some fixes of course and

00:41:40,240 --> 00:41:46,319
uh one a little bit older new

00:41:43,680 --> 00:41:48,960
is that you are basically able to boot

00:41:46,319 --> 00:41:52,079
directly from the battery fsa volume

00:41:48,960 --> 00:41:52,400
and it was really a work of nil gomba

00:41:52,079 --> 00:41:55,760
who

00:41:52,400 --> 00:41:59,280
make a uh who make a

00:41:55,760 --> 00:42:02,160
great amount of work and

00:41:59,280 --> 00:42:04,480
pinging us and so on about making this

00:42:02,160 --> 00:42:04,480
happen

00:42:05,440 --> 00:42:10,800
and um

00:42:08,560 --> 00:42:13,440
the last thing the second one thing

00:42:10,800 --> 00:42:16,560
about the storage is that there won't be

00:42:13,440 --> 00:42:17,920
any disk swap by default you can create

00:42:16,560 --> 00:42:19,920
your desktop still

00:42:17,920 --> 00:42:22,960
but you have to do it manually in the

00:42:19,920 --> 00:42:27,040
custom partitioning or private way

00:42:22,960 --> 00:42:30,240
into installer and

00:42:27,040 --> 00:42:33,280
then you will also do the high

00:42:30,240 --> 00:42:34,319
um hibernation will work for you if you

00:42:33,280 --> 00:42:37,040
create your swap

00:42:34,319 --> 00:42:38,160
if you want if you use just the auto

00:42:37,040 --> 00:42:41,520
partitioning

00:42:38,160 --> 00:42:46,000
you will get swap on xedra as

00:42:41,520 --> 00:42:48,720
the ram uh which is basically

00:42:46,000 --> 00:42:50,800
uh there's a unit system the unit we

00:42:48,720 --> 00:42:55,599
will generate uh this swap

00:42:50,800 --> 00:43:00,000
uh file on zram for you

00:42:55,599 --> 00:43:02,240
uh uh federal society

00:43:00,000 --> 00:43:04,079
it works really good i i already use

00:43:02,240 --> 00:43:07,280
that on fedora 22.

00:43:04,079 --> 00:43:10,400
i will 32 sorry i was

00:43:07,280 --> 00:43:13,520
interested in how it works

00:43:10,400 --> 00:43:16,560
uh and another one is

00:43:13,520 --> 00:43:20,640
nds support it's basically

00:43:16,560 --> 00:43:24,839
uh protection of uh

00:43:20,640 --> 00:43:27,839
protection of your ntp

00:43:24,839 --> 00:43:31,280
communication from the internet

00:43:27,839 --> 00:43:32,640
attack it works on some secrets secrets

00:43:31,280 --> 00:43:35,200
and keys exchange

00:43:32,640 --> 00:43:36,240
not really i don't really see though

00:43:35,200 --> 00:43:42,000
into this

00:43:36,240 --> 00:43:44,960
but i have to thank a lot to miroslav

00:43:42,000 --> 00:43:45,520
because he helped us a lot not even

00:43:44,960 --> 00:43:49,040
implement

00:43:45,520 --> 00:43:52,240
this feature but also uh

00:43:49,040 --> 00:43:55,760
enhance our existing solutions so

00:43:52,240 --> 00:43:58,720
we could like uh remove

00:43:55,760 --> 00:44:00,000
plenty of lines i don't know uh one one

00:43:58,720 --> 00:44:02,640
file even more maybe

00:44:00,000 --> 00:44:03,200
the whole file of changes and just

00:44:02,640 --> 00:44:06,000
switch

00:44:03,200 --> 00:44:08,960
to just simpler solution thanks to the

00:44:06,000 --> 00:44:11,920
fact that he pointed on to us

00:44:08,960 --> 00:44:14,079
on this so thanks a lot thanks a lot for

00:44:11,920 --> 00:44:14,079
that

00:44:14,319 --> 00:44:21,520
and the last part of this presentation

00:44:17,920 --> 00:44:24,240
just the big one is a little bit

00:44:21,520 --> 00:44:24,880
uh marketing from my side because we've

00:44:24,240 --> 00:44:28,560
created

00:44:24,880 --> 00:44:31,680
uh great libraries and uh and during the

00:44:28,560 --> 00:44:34,480
mobilization progress process and i

00:44:31,680 --> 00:44:34,480
would like to

00:44:35,119 --> 00:44:38,640
make people to you know like but i would

00:44:37,359 --> 00:44:41,599
like to you

00:44:38,640 --> 00:44:42,079
tried it because it's a great solution

00:44:41,599 --> 00:44:44,079
for

00:44:42,079 --> 00:44:45,839
for plenty of work so basically i will

00:44:44,079 --> 00:44:48,960
just quickly make a quick

00:44:45,839 --> 00:44:51,839
dust bus is based on python details

00:44:48,960 --> 00:44:52,880
we had a problem with the maintainer uh

00:44:51,839 --> 00:44:55,440
because he

00:44:52,880 --> 00:44:56,880
is not responsive there there's a plenty

00:44:55,440 --> 00:44:59,760
of

00:44:56,880 --> 00:45:00,480
requests a long very long time without

00:44:59,760 --> 00:45:02,800
any

00:45:00,480 --> 00:45:03,760
reaction from him so we've created

00:45:02,800 --> 00:45:06,319
something

00:45:03,760 --> 00:45:08,160
something new called dust bars it's just

00:45:06,319 --> 00:45:10,880
pure python library to concrete the

00:45:08,160 --> 00:45:14,079
debuss with a lot of lot of features

00:45:10,880 --> 00:45:17,440
and i think it's much much better than

00:45:14,079 --> 00:45:19,200
and usable in in many cases

00:45:17,440 --> 00:45:20,960
than python debunks one of the main

00:45:19,200 --> 00:45:23,599
aspect was i think

00:45:20,960 --> 00:45:25,119
there's not possible to call

00:45:23,599 --> 00:45:27,680
asynchronous tasks

00:45:25,119 --> 00:45:28,960
in the python us or synchronous mature

00:45:27,680 --> 00:45:32,000
one of these

00:45:28,960 --> 00:45:33,680
uh but by easily

00:45:32,000 --> 00:45:35,119
so this is one of the main points but

00:45:33,680 --> 00:45:36,480
there's plenty of more even the

00:45:35,119 --> 00:45:40,000
interfaces are part of

00:45:36,480 --> 00:45:41,920
just bus library that it supports it

00:45:40,000 --> 00:45:44,160
uh you don't have to use the features

00:45:41,920 --> 00:45:47,119
it's on you it's pretty stable

00:45:44,160 --> 00:45:47,440
right now we did a plenty of bug fixing

00:45:47,119 --> 00:45:49,520
or

00:45:47,440 --> 00:45:51,200
wendy when there is creator of this

00:45:49,520 --> 00:45:54,319
library from the

00:45:51,200 --> 00:45:55,040
from the beginning uh vendor vendor you

00:45:54,319 --> 00:45:57,359
can uh

00:45:55,040 --> 00:45:58,160
find her on our irc if you have any

00:45:57,359 --> 00:46:01,839
issues with the

00:45:58,160 --> 00:46:02,240
video library uh file an issue on github

00:46:01,839 --> 00:46:05,280
or

00:46:02,240 --> 00:46:06,880
osgore or in paxilla anywhere she's

00:46:05,280 --> 00:46:08,480
really responsive

00:46:06,880 --> 00:46:10,720
and the second one is simpleline it's

00:46:08,480 --> 00:46:15,280
basically text ui from anaconda

00:46:10,720 --> 00:46:18,960
we extracted this to a separate library

00:46:15,280 --> 00:46:23,599
uh i'm i'm the maintainer there

00:46:18,960 --> 00:46:26,240
and it's uh finally lgpl3 plus

00:46:23,599 --> 00:46:28,800
i was able to make the change from gpl2

00:46:26,240 --> 00:46:30,640
because i don't think it's appropriate

00:46:28,800 --> 00:46:31,920
for this library and it's finally

00:46:30,640 --> 00:46:36,160
released on pipeline so

00:46:31,920 --> 00:46:39,680
if you want to create simple uh

00:46:36,160 --> 00:46:42,880
calls the simple simple text ui

00:46:39,680 --> 00:46:46,240
for the line based devices which means

00:46:42,880 --> 00:46:51,760
even the remote console then

00:46:46,240 --> 00:46:55,040
uh then this is a great library for that

00:46:51,760 --> 00:46:58,400
and that's all from my site uh

00:46:55,040 --> 00:47:01,839
i provided a few links here

00:46:58,400 --> 00:47:05,440
with the contacts on us and also

00:47:01,839 --> 00:47:07,280
our blog so

00:47:05,440 --> 00:47:11,839
that's everything from me i will look if

00:47:07,280 --> 00:47:11,839
there are some questions

00:47:21,760 --> 00:47:29,760
yeah you can customize your defaults uh

00:47:26,480 --> 00:47:31,760
yeah michelle's is asking if uh

00:47:29,760 --> 00:47:32,960
they can customize the defaults with

00:47:31,760 --> 00:47:35,760
only without using

00:47:32,960 --> 00:47:36,559
a kickstart or automite testing

00:47:35,760 --> 00:47:39,200
everything

00:47:36,559 --> 00:47:40,160
automating everything yeah you can you

00:47:39,200 --> 00:47:43,119
can create your

00:47:40,160 --> 00:47:45,200
uh you can you can change the defaults

00:47:43,119 --> 00:47:48,400
the only drawback is that you have to

00:47:45,200 --> 00:47:50,240
get the file into the iso which is not

00:47:48,400 --> 00:47:53,280
that problematic on

00:47:50,240 --> 00:47:55,760
fedora really if you especially if you

00:47:53,280 --> 00:47:56,960
you can basically inject it here but for

00:47:55,760 --> 00:48:00,000
real it could be

00:47:56,960 --> 00:48:00,960
some problems with uh basically signing

00:48:00,000 --> 00:48:03,440
the

00:48:00,960 --> 00:48:05,680
signing the image or similar thing so

00:48:03,440 --> 00:48:07,920
you have to take it

00:48:05,680 --> 00:48:10,319
yeah yeah lorax can can do that it's

00:48:07,920 --> 00:48:11,760
more it's it's not that it's not doable

00:48:10,319 --> 00:48:20,480
it's more like licensing could be

00:48:11,760 --> 00:48:22,880
problem with the real

00:48:20,480 --> 00:48:24,559
yeah uh you can inject also the

00:48:22,880 --> 00:48:26,480
kickstarter i think that's supported

00:48:24,559 --> 00:48:28,400
even though we are not using it really

00:48:26,480 --> 00:48:35,839
and so i don't think we are not testing

00:48:28,400 --> 00:48:35,839
but it should work

00:48:37,599 --> 00:48:42,640
one l l nine branches this will be all

00:48:41,280 --> 00:48:44,319
modular i hope

00:48:42,640 --> 00:48:46,160
uh you mean more like a federal

00:48:44,319 --> 00:48:50,480
amortization or modular

00:48:46,160 --> 00:48:52,559
like uh like anaconda modularization

00:48:50,480 --> 00:48:54,880
i guess the anacondalization in that

00:48:52,559 --> 00:48:58,800
case i hope so

00:48:54,880 --> 00:48:58,800
we would really like to have

00:48:58,960 --> 00:49:02,880
even they like to have all the modules

00:49:01,359 --> 00:49:08,079
on

00:49:02,880 --> 00:49:10,400
the d bus by fedora 34

00:49:08,079 --> 00:49:10,400
but

00:49:11,119 --> 00:49:14,880
i guess there still won't be features

00:49:13,839 --> 00:49:17,520
like

00:49:14,880 --> 00:49:18,480
the dynamics tasks sorting and so on

00:49:17,520 --> 00:49:20,800
because

00:49:18,480 --> 00:49:21,839
unfortunately there were plenty of

00:49:20,800 --> 00:49:25,680
changes

00:49:21,839 --> 00:49:27,760
in the uh in the fedora and

00:49:25,680 --> 00:49:28,960
there was plenty of work in the rail

00:49:27,760 --> 00:49:32,240
right now for us so

00:49:28,960 --> 00:49:35,839
we didn't have a time to work on that

00:49:32,240 --> 00:49:39,040
uh in i don't know a few few

00:49:35,839 --> 00:49:41,839
last few months uh so i hope we will

00:49:39,040 --> 00:49:43,359
get to that soon and we will finally

00:49:41,839 --> 00:49:46,319
finish the payload

00:49:43,359 --> 00:49:48,480
i wouldn't expect to be able to get like

00:49:46,319 --> 00:49:51,839
the task sorting and everything

00:49:48,480 --> 00:49:52,880
but even even without that uh you will

00:49:51,839 --> 00:49:54,880
be able to

00:49:52,880 --> 00:49:56,000
make your add-on and communicate with

00:49:54,880 --> 00:49:58,319
the bus

00:49:56,000 --> 00:50:00,240
with the deepa's api all for all the

00:49:58,319 --> 00:50:02,880
functionality because all the modules

00:50:00,240 --> 00:50:02,880
will be there

00:50:05,040 --> 00:50:12,319
yeah it should be modular on the bus

00:50:08,640 --> 00:50:14,480
with not not everything there as i said

00:50:12,319 --> 00:50:16,160
the task won't be there just sorting and

00:50:14,480 --> 00:50:17,839
maybe the boss won't have all the

00:50:16,160 --> 00:50:19,440
functionality but

00:50:17,839 --> 00:50:21,920
all the modules should be there and

00:50:19,440 --> 00:50:25,040
working just in the modular way

00:50:21,920 --> 00:50:26,720
in federal 34 i hope

00:50:25,040 --> 00:50:28,559
i don't want to promise anything because

00:50:26,720 --> 00:50:31,280
as i said we are really swamped by other

00:50:28,559 --> 00:50:31,280
work right now

00:50:31,359 --> 00:50:37,520
okay i'm out of the time right now

00:50:34,400 --> 00:50:40,960
so i will i will leave you

00:50:37,520 --> 00:50:42,160
but thank you thank you much thank you

00:50:40,960 --> 00:50:44,720
all for the listening

00:50:42,160 --> 00:50:45,440
and i hope you like my presentation if

00:50:44,720 --> 00:50:48,000
you have any

00:50:45,440 --> 00:50:49,040
any questions and i think uh just uh

00:50:48,000 --> 00:50:51,040
ping me

00:50:49,040 --> 00:50:52,160
here i will be on some sessions or

00:50:51,040 --> 00:50:57,040
something

00:50:52,160 --> 00:50:57,040
or somewhere i'm not sure okay

00:50:57,800 --> 00:51:00,800

YouTube URL: https://www.youtube.com/watch?v=3q7cYbFQYAQ


