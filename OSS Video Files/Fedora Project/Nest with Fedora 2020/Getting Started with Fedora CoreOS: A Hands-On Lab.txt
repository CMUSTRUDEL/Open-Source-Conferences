Title: Getting Started with Fedora CoreOS: A Hands-On Lab
Publication date: 2020-09-15
Playlist: Nest with Fedora 2020
Description: 
	This workshop will introduce Fedora CoreOS and explain the differences between Fedora CoreOS and other Linux operating system distributions.

Conducted at Nest With Fedora 2020.
Captions: 
	00:00:02,960 --> 00:00:08,000
okay

00:00:04,319 --> 00:00:10,880
so hey everybody uh

00:00:08,000 --> 00:00:11,519
we are here today to do a hands-on

00:00:10,880 --> 00:00:15,120
workshop

00:00:11,519 --> 00:00:18,160
for fedora core os um and

00:00:15,120 --> 00:00:21,439
i'll quickly go into who are we

00:00:18,160 --> 00:00:23,519
uh so my name is dusty mabe i'm a

00:00:21,439 --> 00:00:24,080
software engineer for red hat and i work

00:00:23,519 --> 00:00:27,199
on

00:00:24,080 --> 00:00:29,840
uh fedora core os and fedora cloud

00:00:27,199 --> 00:00:30,640
and also red hat core os which kind of

00:00:29,840 --> 00:00:34,000
leads into

00:00:30,640 --> 00:00:35,920
the openshift product here at red hat

00:00:34,000 --> 00:00:38,719
um i'll hand it off to timothy to

00:00:35,920 --> 00:00:38,719
introduce himself

00:00:39,200 --> 00:00:45,280
so i'm timothe ravi you can call me tim

00:00:42,399 --> 00:00:48,239
and i'm also a federal chorus engineer

00:00:45,280 --> 00:00:48,239
working at red hat

00:00:49,280 --> 00:00:54,160
um thank you timothy i am nasser hussain

00:00:52,320 --> 00:00:55,600
uh mostly known as nasa veteran in the

00:00:54,160 --> 00:00:57,520
federal ecosystem

00:00:55,600 --> 00:00:59,199
i mostly work with the fedora join sig

00:00:57,520 --> 00:01:01,440
in order to help

00:00:59,199 --> 00:01:02,879
getting started with the newcomers and

00:01:01,440 --> 00:01:03,760
improving that experience if you're a

00:01:02,879 --> 00:01:06,880
newcomer

00:01:03,760 --> 00:01:11,040
talk to us at fedora joins egg

00:01:06,880 --> 00:01:13,920
dusty back to you okay thanks guys

00:01:11,040 --> 00:01:15,119
okay uh i'll do a brief introduction to

00:01:13,920 --> 00:01:17,439
fedora coreos

00:01:15,119 --> 00:01:18,720
uh if you happen to catch my talk

00:01:17,439 --> 00:01:20,720
yesterday this might be a little

00:01:18,720 --> 00:01:21,840
repetitive but i'll try to keep it under

00:01:20,720 --> 00:01:24,080
10 minutes

00:01:21,840 --> 00:01:26,720
uh and then i'll introduce the workshop

00:01:24,080 --> 00:01:29,680
and we'll have uh timothy and

00:01:26,720 --> 00:01:30,640
nasir uh actually go through uh the

00:01:29,680 --> 00:01:33,200
workshop here

00:01:30,640 --> 00:01:34,720
or you can execute it on your own um on

00:01:33,200 --> 00:01:37,360
your computer at home

00:01:34,720 --> 00:01:40,079
so real quick uh what is fedora core os

00:01:37,360 --> 00:01:43,200
it's an emerging fedora edition

00:01:40,079 --> 00:01:47,119
fedora core os came from the merging of

00:01:43,200 --> 00:01:50,320
two communities one of them was coreos

00:01:47,119 --> 00:01:51,920
inc the company's offering called

00:01:50,320 --> 00:01:54,079
container linux

00:01:51,920 --> 00:01:56,479
and the other was project atomic's

00:01:54,079 --> 00:01:59,040
atomic host

00:01:56,479 --> 00:02:00,240
fedora coros incorporates the container

00:01:59,040 --> 00:02:01,920
linux philosophy

00:02:00,240 --> 00:02:03,680
provisioning stack and cloud native

00:02:01,920 --> 00:02:05,759
expertise

00:02:03,680 --> 00:02:07,520
and also incorporates the atomic host

00:02:05,759 --> 00:02:10,000
fedora foundation

00:02:07,520 --> 00:02:11,680
the update stack from atomic host and

00:02:10,000 --> 00:02:14,959
also enhanced security with

00:02:11,680 --> 00:02:17,520
sc linux so what are some of the

00:02:14,959 --> 00:02:19,440
features of fedora core os

00:02:17,520 --> 00:02:20,560
one feature of fedora coreos which is a

00:02:19,440 --> 00:02:21,680
little bit different than traditional

00:02:20,560 --> 00:02:24,720
fedora is it

00:02:21,680 --> 00:02:26,160
has automatic updates on by default this

00:02:24,720 --> 00:02:29,680
kind of means that

00:02:26,160 --> 00:02:30,959
by default things tend to be a little

00:02:29,680 --> 00:02:34,400
more secure when

00:02:30,959 --> 00:02:37,280
automatic updates get applied because

00:02:34,400 --> 00:02:37,599
cves and security fixes and and the like

00:02:37,280 --> 00:02:39,599
uh

00:02:37,599 --> 00:02:41,440
hit systems faster than when usually

00:02:39,599 --> 00:02:43,920
somebody reacts to it

00:02:41,440 --> 00:02:44,560
um but in order to achieve automatic

00:02:43,920 --> 00:02:47,040
updates

00:02:44,560 --> 00:02:48,879
they must be reliable um so how do we

00:02:47,040 --> 00:02:51,280
make them reliable we have extensive

00:02:48,879 --> 00:02:53,599
tests in our ci pipeline

00:02:51,280 --> 00:02:54,720
and we also have several update streams

00:02:53,599 --> 00:02:58,080
which allow for

00:02:54,720 --> 00:03:00,000
people to run um

00:02:58,080 --> 00:03:01,519
future update streams before they get to

00:03:00,000 --> 00:03:03,440
stable so that they can report

00:03:01,519 --> 00:03:05,200
issues and they know if they're going to

00:03:03,440 --> 00:03:06,560
break and they let us know so that we

00:03:05,200 --> 00:03:08,560
can try to fix it if it's going to

00:03:06,560 --> 00:03:10,720
affect a lot of people

00:03:08,560 --> 00:03:12,959
we also have managed upgrade rollouts

00:03:10,720 --> 00:03:16,400
over several days which means

00:03:12,959 --> 00:03:18,640
uh you know if we start an upgrade and

00:03:16,400 --> 00:03:20,400
the first 10 percent of people that get

00:03:18,640 --> 00:03:22,879
the upgrade have failures

00:03:20,400 --> 00:03:24,720
we can stop it so the other 90 don't

00:03:22,879 --> 00:03:28,239
actually have to deal with that

00:03:24,720 --> 00:03:30,560
um which is just a mechanism for us to

00:03:28,239 --> 00:03:34,080
be able to control the upgrades

00:03:30,560 --> 00:03:35,519
and see or get more information on

00:03:34,080 --> 00:03:37,519
how successful they are before

00:03:35,519 --> 00:03:40,319
continuing and then

00:03:37,519 --> 00:03:41,840
you know when things go wrong we we have

00:03:40,319 --> 00:03:43,680
an escape plan

00:03:41,840 --> 00:03:45,599
so if things aren't working for you for

00:03:43,680 --> 00:03:47,840
your application after an upgrade

00:03:45,599 --> 00:03:49,599
you can run rpm most rollback and that

00:03:47,840 --> 00:03:51,280
can be used to go back

00:03:49,599 --> 00:03:52,799
uh to what you had before which

00:03:51,280 --> 00:03:53,920
obviously was working because you were

00:03:52,799 --> 00:03:57,280
happy

00:03:53,920 --> 00:03:59,599
and in the future we want to be able to

00:03:57,280 --> 00:04:00,480
do this in an automated fashion so based

00:03:59,599 --> 00:04:04,159
on

00:04:00,480 --> 00:04:05,840
how a user you know specific things that

00:04:04,159 --> 00:04:07,360
a user defines

00:04:05,840 --> 00:04:09,599
specific health checks that a user

00:04:07,360 --> 00:04:11,040
defines we want to be able to run a few

00:04:09,599 --> 00:04:13,920
health checks on boot

00:04:11,040 --> 00:04:15,680
and say oh these health checks that the

00:04:13,920 --> 00:04:17,120
user defined as

00:04:15,680 --> 00:04:18,799
checking if their application was

00:04:17,120 --> 00:04:21,600
actually up and running

00:04:18,799 --> 00:04:22,880
failed and they have basically said that

00:04:21,600 --> 00:04:25,360
they would like to go back

00:04:22,880 --> 00:04:26,000
if that's the case so in the future we'd

00:04:25,360 --> 00:04:29,360
like to be

00:04:26,000 --> 00:04:31,199
automatically be able to roll back

00:04:29,360 --> 00:04:32,400
i want to go a little bit more in detail

00:04:31,199 --> 00:04:34,560
on update streams

00:04:32,400 --> 00:04:36,400
so we have three update streams that we

00:04:34,560 --> 00:04:38,560
offer one is next

00:04:36,400 --> 00:04:40,160
which is experimental features or fedora

00:04:38,560 --> 00:04:43,040
major rebases

00:04:40,160 --> 00:04:44,560
so for example uh once fedora 33 beta

00:04:43,040 --> 00:04:45,759
comes out we'll probably switch our next

00:04:44,560 --> 00:04:48,960
stream over to

00:04:45,759 --> 00:04:50,320
f33 content um

00:04:48,960 --> 00:04:51,680
we have our testing stream which is

00:04:50,320 --> 00:04:52,479
essentially a preview of what's coming

00:04:51,680 --> 00:04:56,720
to stable

00:04:52,479 --> 00:04:58,639
uh so if you want to get a win a window

00:04:56,720 --> 00:05:01,440
or look into what's coming two weeks

00:04:58,639 --> 00:05:03,759
down the line to the stable repository

00:05:01,440 --> 00:05:04,800
you'll run the testing stream and that

00:05:03,759 --> 00:05:07,680
will let you know

00:05:04,800 --> 00:05:08,240
if your stable nodes are gonna break

00:05:07,680 --> 00:05:10,240
stable

00:05:08,240 --> 00:05:11,919
is the most reliable stream we offer and

00:05:10,240 --> 00:05:13,840
it's just essentially a promotion

00:05:11,919 --> 00:05:15,280
promotion of testing content after some

00:05:13,840 --> 00:05:17,199
time

00:05:15,280 --> 00:05:19,520
the goals with these stable these

00:05:17,199 --> 00:05:21,600
streams is to publish new releases into

00:05:19,520 --> 00:05:24,479
update streams every two weeks

00:05:21,600 --> 00:05:28,160
and to also try to find issues as soon

00:05:24,479 --> 00:05:30,160
as possible before they hit disable

00:05:28,160 --> 00:05:31,280
the next feature i want to talk about is

00:05:30,160 --> 00:05:33,120
automated provisioning

00:05:31,280 --> 00:05:35,600
so fedora coreos uses ignition to

00:05:33,120 --> 00:05:38,320
automate provisioning

00:05:35,600 --> 00:05:40,080
and theoretically all of the

00:05:38,320 --> 00:05:42,320
configuration for the machine is baked

00:05:40,080 --> 00:05:43,919
into the ignition config

00:05:42,320 --> 00:05:46,479
that means it's very easy to

00:05:43,919 --> 00:05:49,680
automatically reprovision a node

00:05:46,479 --> 00:05:51,600
so if you lose a node no sweat you know

00:05:49,680 --> 00:05:53,840
other than if it happened to have data

00:05:51,600 --> 00:05:55,919
that's not backed up somewhere

00:05:53,840 --> 00:05:58,960
obviously we can't we can't save your

00:05:55,919 --> 00:06:01,919
data but in general the configuration

00:05:58,960 --> 00:06:03,360
is very easy to reproduce and you know

00:06:01,919 --> 00:06:05,360
hopefully you didn't lose data as part

00:06:03,360 --> 00:06:07,600
of that

00:06:05,360 --> 00:06:09,120
and ignition you know because we use

00:06:07,600 --> 00:06:10,800
ignition it's also the same starting

00:06:09,120 --> 00:06:13,680
point whether we're on bare metal or

00:06:10,800 --> 00:06:15,520
cloud we use an image based approach

00:06:13,680 --> 00:06:17,199
so whether you're on bare metal or cloud

00:06:15,520 --> 00:06:18,080
you start from approximately the same

00:06:17,199 --> 00:06:21,360
image

00:06:18,080 --> 00:06:26,000
and since we use ignition

00:06:21,360 --> 00:06:29,199
everywhere uh you get a more unified

00:06:26,000 --> 00:06:31,199
experience whether you're in the cloud

00:06:29,199 --> 00:06:32,639
or on bare metal

00:06:31,199 --> 00:06:35,440
so a little bit more details about

00:06:32,639 --> 00:06:38,160
ignition it's a json

00:06:35,440 --> 00:06:41,440
document basically it's usually provided

00:06:38,160 --> 00:06:43,840
via some sort of user data mechanism

00:06:41,440 --> 00:06:45,759
it runs exactly once during the mfs

00:06:43,840 --> 00:06:48,639
stage on first boot

00:06:45,759 --> 00:06:49,680
which means that if provisioning fails

00:06:48,639 --> 00:06:52,319
the boot fails

00:06:49,680 --> 00:06:54,479
there's no half provision systems which

00:06:52,319 --> 00:06:57,520
can sometimes lead to confusion

00:06:54,479 --> 00:06:59,599
and possibly worse uh you know

00:06:57,520 --> 00:07:01,360
side effects down the road if you if one

00:06:59,599 --> 00:07:03,599
little part of your configuration didn't

00:07:01,360 --> 00:07:06,400
actually apply

00:07:03,599 --> 00:07:08,240
ignition configs are machine friendly

00:07:06,400 --> 00:07:10,240
but not very user friendly

00:07:08,240 --> 00:07:12,000
which means that we probably need to

00:07:10,240 --> 00:07:13,520
make something that

00:07:12,000 --> 00:07:15,360
is a little better for our users to

00:07:13,520 --> 00:07:18,080
interact with so we created a tool

00:07:15,360 --> 00:07:21,199
called fedora core os config transpiler

00:07:18,080 --> 00:07:21,680
which translates ignition spec into or

00:07:21,199 --> 00:07:24,960
sorry

00:07:21,680 --> 00:07:27,280
which translates uh huma yam

00:07:24,960 --> 00:07:29,360
sorry human friendly yaml into an

00:07:27,280 --> 00:07:32,639
ignition spec

00:07:29,360 --> 00:07:35,280
um and fedora core s config transpiler

00:07:32,639 --> 00:07:36,000
doesn't only translate you know it's not

00:07:35,280 --> 00:07:39,759
just a

00:07:36,000 --> 00:07:41,520
yaml to json uh translation we also have

00:07:39,759 --> 00:07:43,440
some distro specific

00:07:41,520 --> 00:07:46,479
helpers in there and just some things

00:07:43,440 --> 00:07:49,280
that are you know make the user's life

00:07:46,479 --> 00:07:50,160
a better experience one of those is if

00:07:49,280 --> 00:07:51,599
you add

00:07:50,160 --> 00:07:53,440
a new file system and you want it

00:07:51,599 --> 00:07:55,199
mounted instead of having to create the

00:07:53,440 --> 00:07:57,680
systemd mount unit yourself

00:07:55,199 --> 00:07:58,479
you can just tell fedora cores config

00:07:57,680 --> 00:08:00,000
transpiler

00:07:58,479 --> 00:08:03,599
you want a mount unit and it will

00:08:00,000 --> 00:08:05,520
automatically generate one for you

00:08:03,599 --> 00:08:07,680
the next feature is being cloud native

00:08:05,520 --> 00:08:09,120
and container focused so

00:08:07,680 --> 00:08:10,879
in general applications run in

00:08:09,120 --> 00:08:13,599
containers so we have the pod man or

00:08:10,879 --> 00:08:16,560
mobi engine container runtimes for that

00:08:13,599 --> 00:08:16,960
and because of ignition uh we can you

00:08:16,560 --> 00:08:18,879
know

00:08:16,960 --> 00:08:20,080
easily deploy new nodes and have them

00:08:18,879 --> 00:08:21,919
join a cluster

00:08:20,080 --> 00:08:23,599
so you can spin up 100 nodes or spin

00:08:21,919 --> 00:08:24,479
them down depending on your needs so

00:08:23,599 --> 00:08:28,240
it's a little

00:08:24,479 --> 00:08:32,479
cloud burst uh functionality

00:08:28,240 --> 00:08:34,800
is uh is supported natively

00:08:32,479 --> 00:08:37,039
we also try to be ubiquitous so we're

00:08:34,800 --> 00:08:39,039
trying to offer fedora core os wherever

00:08:37,039 --> 00:08:41,039
you want to run your workloads

00:08:39,039 --> 00:08:42,800
and right now we have you know eight

00:08:41,039 --> 00:08:44,240
nine different platforms that you can

00:08:42,800 --> 00:08:47,279
run those on

00:08:44,240 --> 00:08:49,040
we're trying to add more all the time uh

00:08:47,279 --> 00:08:49,760
the next feature is osh versioning and

00:08:49,040 --> 00:08:52,240
security

00:08:49,760 --> 00:08:53,519
so fedora coreos uses rpmos3 technology

00:08:52,240 --> 00:08:56,000
which i like to call

00:08:53,519 --> 00:08:57,120
like get for your operating system so if

00:08:56,000 --> 00:08:59,920
you can imagine

00:08:57,120 --> 00:09:01,519
a single content hash that basically def

00:08:59,920 --> 00:09:04,000
is

00:09:01,519 --> 00:09:05,760
you know a single identifier that tells

00:09:04,000 --> 00:09:07,120
you all the software in a particular

00:09:05,760 --> 00:09:08,720
release

00:09:07,120 --> 00:09:10,399
that's pretty powerful especially when

00:09:08,720 --> 00:09:12,399
somebody's creating a bug report

00:09:10,399 --> 00:09:13,839
and trying to relate information we

00:09:12,399 --> 00:09:15,680
don't have to ask them

00:09:13,839 --> 00:09:17,360
you know what version of systemd did you

00:09:15,680 --> 00:09:19,279
have with this kernel we know

00:09:17,360 --> 00:09:20,560
basically they give us a version number

00:09:19,279 --> 00:09:23,040
or a hash

00:09:20,560 --> 00:09:24,640
and we can reproduce the exact problem

00:09:23,040 --> 00:09:26,880
that they're having

00:09:24,640 --> 00:09:28,399
you know unless it's like specifically

00:09:26,880 --> 00:09:32,000
environmental that we don't have

00:09:28,399 --> 00:09:33,360
access to rpmostree also uses a

00:09:32,000 --> 00:09:33,839
read-only file system mount which

00:09:33,360 --> 00:09:37,360
predict

00:09:33,839 --> 00:09:39,440
prevents accidental os corruption so

00:09:37,360 --> 00:09:40,800
accidentally rmrfing some something you

00:09:39,440 --> 00:09:44,399
shouldn't have

00:09:40,800 --> 00:09:47,040
or like unsophisticated attacks from

00:09:44,399 --> 00:09:48,959
you know modifying the system obviously

00:09:47,040 --> 00:09:50,959
more sophisticated attacks would be able

00:09:48,959 --> 00:09:52,240
to do more but that's where se linux

00:09:50,959 --> 00:09:54,560
comes in

00:09:52,240 --> 00:09:55,680
so if your application inside of a

00:09:54,560 --> 00:09:58,959
container gets

00:09:55,680 --> 00:10:00,000
compromised somehow scene linux will

00:09:58,959 --> 00:10:03,360
hopefully keep

00:10:00,000 --> 00:10:06,480
the uh you know

00:10:03,360 --> 00:10:08,480
keep the compromised um application just

00:10:06,480 --> 00:10:10,399
limited to itself and not accessing

00:10:08,480 --> 00:10:12,640
either the host or other applications on

00:10:10,399 --> 00:10:15,040
the system

00:10:12,640 --> 00:10:16,640
okay so what's next for fedora coreos we

00:10:15,040 --> 00:10:18,959
want to add more cloud platforms we're

00:10:16,640 --> 00:10:21,920
working on that all the time

00:10:18,959 --> 00:10:23,360
where we want to add support for the

00:10:21,920 --> 00:10:26,240
other architectures that exist

00:10:23,360 --> 00:10:27,920
in fedora we have a proof of concept for

00:10:26,240 --> 00:10:30,560
arm 64 right now

00:10:27,920 --> 00:10:31,440
and hopefully that'll prove out you know

00:10:30,560 --> 00:10:34,000
the concept

00:10:31,440 --> 00:10:35,120
and we'll be able to add the other

00:10:34,000 --> 00:10:36,800
platforms

00:10:35,120 --> 00:10:39,279
we want to have more human-friendly

00:10:36,800 --> 00:10:42,399
helper functions in fcct

00:10:39,279 --> 00:10:45,200
we want to do better you know have

00:10:42,399 --> 00:10:46,720
host extension-like ability for things

00:10:45,200 --> 00:10:47,920
that just can't run in containers for

00:10:46,720 --> 00:10:49,920
whatever reason

00:10:47,920 --> 00:10:52,079
so more reliable package layering right

00:10:49,920 --> 00:10:53,440
now package layering isn't very reliable

00:10:52,079 --> 00:10:55,600
because of

00:10:53,440 --> 00:10:56,640
differences in the remote yum

00:10:55,600 --> 00:11:01,120
repositories

00:10:56,640 --> 00:11:03,200
and and the base layer on the host

00:11:01,120 --> 00:11:06,000
uh improved documentation tighter

00:11:03,200 --> 00:11:08,079
integrations with upstream projects

00:11:06,000 --> 00:11:09,040
all kinds of things okay so for the

00:11:08,079 --> 00:11:12,000
workshop today

00:11:09,040 --> 00:11:13,279
we have five different tutorials well

00:11:12,000 --> 00:11:15,279
the first one is kind of like

00:11:13,279 --> 00:11:17,040
just setting your system up but we have

00:11:15,279 --> 00:11:20,000
a few different tutorials that

00:11:17,040 --> 00:11:21,440
uh we'll have you run through the

00:11:20,000 --> 00:11:23,760
initial setup is just

00:11:21,440 --> 00:11:24,880
set up instructions download this file

00:11:23,760 --> 00:11:26,839
and um

00:11:24,880 --> 00:11:28,399
you know set up a few aliases and

00:11:26,839 --> 00:11:31,120
whatnot

00:11:28,399 --> 00:11:33,040
the second one is enabling auto login

00:11:31,120 --> 00:11:34,079
and custom host name so we'll basically

00:11:33,040 --> 00:11:35,200
show you how to write your first

00:11:34,079 --> 00:11:37,279
ignition config

00:11:35,200 --> 00:11:38,720
well fedora core s config and then

00:11:37,279 --> 00:11:41,200
translate it into ignition

00:11:38,720 --> 00:11:43,360
and then start an instance we'll have

00:11:41,200 --> 00:11:44,880
you start a service on first boot

00:11:43,360 --> 00:11:47,120
uh we'll have we'll have you learn how

00:11:44,880 --> 00:11:49,839
to ssh into a machine and also

00:11:47,120 --> 00:11:50,560
automatically start a container and then

00:11:49,839 --> 00:11:52,880
we'll

00:11:50,560 --> 00:11:53,600
uh explore the system a little bit and

00:11:52,880 --> 00:11:57,040
show you how

00:11:53,600 --> 00:11:59,279
updates work um and

00:11:57,040 --> 00:12:00,560
as the for the workshop itself we have a

00:11:59,279 --> 00:12:02,880
few different options

00:12:00,560 --> 00:12:05,200
one of them is just executing it on your

00:12:02,880 --> 00:12:07,839
own as we would have done if we had an

00:12:05,200 --> 00:12:09,200
in-person workshop so with an in-person

00:12:07,839 --> 00:12:12,000
workshop usually

00:12:09,200 --> 00:12:13,600
we kind of go through this uh you know

00:12:12,000 --> 00:12:14,720
introduction at the beginning just like

00:12:13,600 --> 00:12:17,920
i'm doing right now

00:12:14,720 --> 00:12:19,200
and then everybody goes and follows

00:12:17,920 --> 00:12:20,959
instructions and then they raise their

00:12:19,200 --> 00:12:23,200
hand when they have questions

00:12:20,959 --> 00:12:24,000
for this particular one that's still an

00:12:23,200 --> 00:12:27,279
option

00:12:24,000 --> 00:12:29,120
you can run it at home uh you know

00:12:27,279 --> 00:12:31,200
and then you can come back to us and ask

00:12:29,120 --> 00:12:31,839
questions but we decided since it was

00:12:31,200 --> 00:12:34,399
virtual

00:12:31,839 --> 00:12:36,240
we would also have um for the people

00:12:34,399 --> 00:12:38,560
that want it

00:12:36,240 --> 00:12:39,279
the live stream here will actually be

00:12:38,560 --> 00:12:42,000
just

00:12:39,279 --> 00:12:42,800
us running through the steps of the

00:12:42,000 --> 00:12:44,720
tutorial

00:12:42,800 --> 00:12:46,560
ourselves and then people can kind of

00:12:44,720 --> 00:12:48,720
pop up and ask questions

00:12:46,560 --> 00:12:50,720
we really do want want to encourage

00:12:48,720 --> 00:12:53,760
people asking questions as we go

00:12:50,720 --> 00:12:56,399
because we know this content and we want

00:12:53,760 --> 00:12:57,920
others to learn it so you asking

00:12:56,399 --> 00:13:00,880
questions as we go

00:12:57,920 --> 00:13:02,800
is really the best way for us to to get

00:13:00,880 --> 00:13:06,240
information out there

00:13:02,800 --> 00:13:09,440
so there's a link to the tutorials

00:13:06,240 --> 00:13:13,440
on our docs website there in

00:13:09,440 --> 00:13:16,560
the slide there's a hack md document

00:13:13,440 --> 00:13:17,200
which i pasted earlier in which um one

00:13:16,560 --> 00:13:19,519
of

00:13:17,200 --> 00:13:21,360
timothy or nasir will actually paste

00:13:19,519 --> 00:13:23,279
into the chat here soon again

00:13:21,360 --> 00:13:25,040
which kind of gives a little more detail

00:13:23,279 --> 00:13:26,800
what you need for this workshop

00:13:25,040 --> 00:13:28,560
where you can go when you have questions

00:13:26,800 --> 00:13:30,399
during the workshop and then after the

00:13:28,560 --> 00:13:34,079
workshop

00:13:30,399 --> 00:13:37,519
so head over to that hackmd and

00:13:34,079 --> 00:13:39,519
and that should um actually

00:13:37,519 --> 00:13:41,519
give you everything you need and i'll

00:13:39,519 --> 00:13:44,000
paste it

00:13:41,519 --> 00:13:45,199
uh and let's see okay and i have a slide

00:13:44,000 --> 00:13:47,600
for getting involved

00:13:45,199 --> 00:13:48,240
so if you want to get involved in fedora

00:13:47,600 --> 00:13:50,240
core os

00:13:48,240 --> 00:13:51,519
after this maybe you execute this

00:13:50,240 --> 00:13:54,560
workshop and

00:13:51,519 --> 00:13:56,480
and you really like it we have

00:13:54,560 --> 00:13:57,760
you know a website we have a issue

00:13:56,480 --> 00:14:00,480
tracker forum

00:13:57,760 --> 00:14:02,240
mailing list irc if you search coreo

00:14:00,480 --> 00:14:03,279
fedor core os on google you should be

00:14:02,240 --> 00:14:06,000
able to find

00:14:03,279 --> 00:14:07,040
how to get engaged with us um you know

00:14:06,000 --> 00:14:09,360
all else fails

00:14:07,040 --> 00:14:10,160
if you have an irc account on free node

00:14:09,360 --> 00:14:12,639
join us in

00:14:10,160 --> 00:14:14,720
pound fedora dash core os and i'm going

00:14:12,639 --> 00:14:18,160
to hand it over to

00:14:14,720 --> 00:14:19,199
i think nasir first i'll stop sharing my

00:14:18,160 --> 00:14:21,360
screen

00:14:19,199 --> 00:14:22,800
actually real quick does anybody have

00:14:21,360 --> 00:14:24,480
are there questions in the chat that we

00:14:22,800 --> 00:14:28,480
should address

00:14:24,480 --> 00:14:32,160
first on the video session maybe

00:14:28,480 --> 00:14:32,160
so there's this one uh

00:14:32,880 --> 00:14:41,279
we relate the optimized voice and

00:14:37,440 --> 00:14:43,120
so we're mostly not related so that

00:14:41,279 --> 00:14:44,720
we are two different projects and they

00:14:43,120 --> 00:14:46,079
have their own operating system their

00:14:44,720 --> 00:14:49,279
own version of

00:14:46,079 --> 00:14:52,560
system for kubernetes but we

00:14:49,279 --> 00:14:52,560
we are distinct projects

00:14:53,519 --> 00:14:59,199
there are similarities but differences

00:14:56,839 --> 00:15:01,440
too

00:14:59,199 --> 00:15:01,440
yep

00:15:04,000 --> 00:15:07,360
we have a question can i use silver blue

00:15:05,920 --> 00:15:09,680
to follow this tutorial

00:15:07,360 --> 00:15:10,639
uh so if silver blue is your host os and

00:15:09,680 --> 00:15:13,680
you're able to

00:15:10,639 --> 00:15:14,800
launch uh virtual machines like with

00:15:13,680 --> 00:15:18,639
lidvert

00:15:14,800 --> 00:15:18,639
you should you should just be fine

00:15:23,600 --> 00:15:28,560
quick comparison between core os federal

00:15:26,720 --> 00:15:29,839
corres and continue optimize os from

00:15:28,560 --> 00:15:31,920
google

00:15:29,839 --> 00:15:34,399
first continue optimized with from

00:15:31,920 --> 00:15:37,120
google you can only get on google cloud

00:15:34,399 --> 00:15:38,399
so if you're not running on google cloud

00:15:37,120 --> 00:15:40,560
you're out of luck

00:15:38,399 --> 00:15:42,079
for the raqqa rest restaurants on a lot

00:15:40,560 --> 00:15:45,199
of platforms

00:15:42,079 --> 00:15:47,360
second um you uh

00:15:45,199 --> 00:15:49,199
federal course is based on federal so

00:15:47,360 --> 00:15:50,720
that's all the federal packages

00:15:49,199 --> 00:15:52,800
all everything that's in federal that

00:15:50,720 --> 00:15:54,079
you can get on federal courts

00:15:52,800 --> 00:15:55,680
and that's the same thing you get

00:15:54,079 --> 00:15:57,040
exactly the same thing so if somebody

00:15:55,680 --> 00:15:59,600
walks

00:15:57,040 --> 00:16:01,199
on the fedora to fix something or to

00:15:59,600 --> 00:16:03,279
have a new package you can get it on

00:16:01,199 --> 00:16:06,320
federal course it's the same

00:16:03,279 --> 00:16:09,279
and we less focus

00:16:06,320 --> 00:16:10,399
than i would say the the container

00:16:09,279 --> 00:16:12,639
optimized waste from

00:16:10,399 --> 00:16:14,320
google in the sense that federal os can

00:16:12,639 --> 00:16:17,279
be a kubernetes node

00:16:14,320 --> 00:16:18,800
but it can be something else and you can

00:16:17,279 --> 00:16:21,920
make anything you like from

00:16:18,800 --> 00:16:23,680
from it it's not specifically targeted

00:16:21,920 --> 00:16:25,120
at kubernetes you can do that it's a

00:16:23,680 --> 00:16:28,560
great way to do that

00:16:25,120 --> 00:16:37,839
to be a kubernetes node but that's not

00:16:28,560 --> 00:16:37,839
forced on you

00:16:37,920 --> 00:16:41,360
nasir do you want to go through the

00:16:39,920 --> 00:16:44,639
setup um

00:16:41,360 --> 00:16:46,560
and the first view for the user uh

00:16:44,639 --> 00:16:48,480
great thank you very much dusty and

00:16:46,560 --> 00:16:50,160
timothy for your question answers and

00:16:48,480 --> 00:16:52,240
the introduction

00:16:50,160 --> 00:16:53,600
so what i'm going to do is now share my

00:16:52,240 --> 00:16:56,320
screen uh

00:16:53,600 --> 00:16:56,320
i'm audible

00:16:58,800 --> 00:17:03,040
that's great so let me share my screen

00:17:01,440 --> 00:17:06,720
now

00:17:03,040 --> 00:17:06,720
uh is my screen visible

00:17:07,520 --> 00:17:10,799
yep we can see it looks good that's good

00:17:10,160 --> 00:17:12,720
so

00:17:10,799 --> 00:17:14,799
uh in the fedora course official

00:17:12,720 --> 00:17:18,079
documentation we have a section

00:17:14,799 --> 00:17:20,720
called tutorials where you can

00:17:18,079 --> 00:17:22,720
get started with fedora os and how the

00:17:20,720 --> 00:17:27,280
how things work in the ecosystem

00:17:22,720 --> 00:17:30,640
so we are going to start with the first

00:17:27,280 --> 00:17:32,640
tutorial setup and which is we would be

00:17:30,640 --> 00:17:35,200
using the fedora cosme

00:17:32,640 --> 00:17:36,240
archives and would be virtualizing it on

00:17:35,200 --> 00:17:38,320
libward

00:17:36,240 --> 00:17:40,160
so in order to follow this tutorial you

00:17:38,320 --> 00:17:43,360
can be on uh you need to be

00:17:40,160 --> 00:17:47,039
on a linux host which is in which

00:17:43,360 --> 00:17:51,039
lib word d is enabled so you can

00:17:47,039 --> 00:17:54,480
virtualize using kvm

00:17:51,039 --> 00:17:56,160
so if you need some helpful support

00:17:54,480 --> 00:17:58,080
with enabling the hardware

00:17:56,160 --> 00:18:02,880
virtualization support here you can

00:17:58,080 --> 00:18:04,880
there's how you can do uh and

00:18:02,880 --> 00:18:06,320
you would need some qos tools in order

00:18:04,880 --> 00:18:08,320
to get started so

00:18:06,320 --> 00:18:09,840
it asks for creating a directory which i

00:18:08,320 --> 00:18:12,960
have created here

00:18:09,840 --> 00:18:17,120
so it's a nest demonstration hack fest

00:18:12,960 --> 00:18:18,400
where i have the aliases set like

00:18:17,120 --> 00:18:20,799
there are some tools that you need to

00:18:18,400 --> 00:18:23,840
work with as dusty mentioned in his

00:18:20,799 --> 00:18:26,400
in his introduction about the fcct the

00:18:23,840 --> 00:18:26,840
fedora os config transpiler what it does

00:18:26,400 --> 00:18:30,160
is

00:18:26,840 --> 00:18:33,600
it transpires the yaml

00:18:30,160 --> 00:18:37,760
ignition config in a in a

00:18:33,600 --> 00:18:39,840
not very human readable ignition config

00:18:37,760 --> 00:18:40,960
you write the code in human readable

00:18:39,840 --> 00:18:43,919
yaml and

00:18:40,960 --> 00:18:45,360
the transpiler transpires it to a

00:18:43,919 --> 00:18:47,039
ignition config

00:18:45,360 --> 00:18:49,120
and there's another tool ignition

00:18:47,039 --> 00:18:51,280
validate which you use

00:18:49,120 --> 00:18:52,240
the ignition files before provisioning

00:18:51,280 --> 00:18:54,480
your

00:18:52,240 --> 00:18:56,559
kubernetes before provisioning your

00:18:54,480 --> 00:18:57,360
fedora os instance in order to ensure

00:18:56,559 --> 00:19:00,240
that things were

00:18:57,360 --> 00:19:02,400
the ignition file uh isn't having any

00:19:00,240 --> 00:19:04,160
issues with the syntax or stuff

00:19:02,400 --> 00:19:05,600
uh and the other thing is the core s

00:19:04,160 --> 00:19:09,120
installer what it does is

00:19:05,600 --> 00:19:12,799
it pulls the latest uh latest scores

00:19:09,120 --> 00:19:15,120
stream image you would like to pull so

00:19:12,799 --> 00:19:16,640
let's start so i have these aliases set

00:19:15,120 --> 00:19:19,600
up you can

00:19:16,640 --> 00:19:20,559
pull these images let me see if i can do

00:19:19,600 --> 00:19:23,760
that

00:19:20,559 --> 00:19:27,280
so i have these images pulled

00:19:23,760 --> 00:19:30,240
locally so as you can see these are

00:19:27,280 --> 00:19:30,799
already pulled on my side with podman

00:19:30,240 --> 00:19:32,720
and

00:19:30,799 --> 00:19:34,400
you can set your aliases to cos

00:19:32,720 --> 00:19:37,360
installer to

00:19:34,400 --> 00:19:38,400
running apartment container which would

00:19:37,360 --> 00:19:41,520
uh

00:19:38,400 --> 00:19:44,799
which would save the um

00:19:41,520 --> 00:19:47,360
coerced stream archive locally

00:19:44,799 --> 00:19:47,840
and this is ignition validate which will

00:19:47,360 --> 00:19:52,320
be

00:19:47,840 --> 00:19:54,559
validating our ignition configs

00:19:52,320 --> 00:19:56,240
the latest and last one is the fedora

00:19:54,559 --> 00:19:58,960
cost transpiler so

00:19:56,240 --> 00:20:01,280
i'm gonna set that as well and the other

00:19:58,960 --> 00:20:04,240
thing is that in order to get the

00:20:01,280 --> 00:20:06,320
the cuca archive that we would be using

00:20:04,240 --> 00:20:08,480
to virtualize the fedora cos instance

00:20:06,320 --> 00:20:10,799
hey nasa uh

00:20:08,480 --> 00:20:12,080
yeah um when you when you switch over

00:20:10,799 --> 00:20:15,520
and you copy and paste

00:20:12,080 --> 00:20:18,720
uh can you make the font size on your

00:20:15,520 --> 00:20:22,960
terminal window just a little larger uh

00:20:18,720 --> 00:20:22,960
so let me fix that uh

00:20:23,039 --> 00:20:25,520
st

00:20:26,640 --> 00:20:32,000
oh i forgot this phone no no

00:20:29,919 --> 00:20:33,520
one second i don't know what yeah when

00:20:32,000 --> 00:20:34,000
you just copy and pasted the alias

00:20:33,520 --> 00:20:36,000
commands

00:20:34,000 --> 00:20:37,919
to that one window right if you just uh

00:20:36,000 --> 00:20:39,200
change the font size a little larger

00:20:37,919 --> 00:20:41,760
it should you should be able to see

00:20:39,200 --> 00:20:44,799
things uh

00:20:41,760 --> 00:20:47,679
so for that i would like to just

00:20:44,799 --> 00:20:48,240
go not share my screen for a second and

00:20:47,679 --> 00:20:50,640
then

00:20:48,240 --> 00:21:03,840
fix my config of a simple terminal yeah

00:20:50,640 --> 00:21:03,840
no worries

00:22:25,600 --> 00:22:32,640
i'm not using the gnome terminal it's uh

00:22:29,600 --> 00:22:33,530
st so i just need to

00:22:32,640 --> 00:22:36,320
type

00:22:33,530 --> 00:22:40,880
[Music]

00:22:36,320 --> 00:22:40,880
nasty myself mono

00:22:42,640 --> 00:22:49,360
and change the font size very often so

00:22:45,760 --> 00:22:49,360
15 would work fine

00:22:52,000 --> 00:22:55,840
let's see

00:22:56,159 --> 00:23:01,039
if we can't change it that's fine too i

00:22:57,600 --> 00:23:01,039
i uh i thought it would be

00:23:02,240 --> 00:23:08,960
sorry yeah it does now is it

00:23:05,360 --> 00:23:12,000
that looks that looks a lot better yeah

00:23:08,960 --> 00:23:16,480
so i'm gonna go back

00:23:12,000 --> 00:23:19,120
to presenting that

00:23:16,480 --> 00:23:22,880
so what you can do is now using the

00:23:19,120 --> 00:23:22,880
alias of course installer your

00:23:24,400 --> 00:23:30,880
and this is how oops

00:23:27,840 --> 00:23:30,880
i am not on bash

00:23:32,799 --> 00:23:39,380
sorry for the

00:23:36,110 --> 00:23:39,380
[Music]

00:23:48,840 --> 00:23:53,279
yes uh next demonstration hack friends

00:23:52,799 --> 00:23:54,480
so

00:23:53,279 --> 00:23:56,720
now we are going to be setting the

00:23:54,480 --> 00:24:00,720
aliases as well

00:23:56,720 --> 00:24:05,840
as for oops

00:24:00,720 --> 00:24:05,840
this one

00:24:06,320 --> 00:24:10,080
and this one so what's gonna do is run

00:24:08,880 --> 00:24:13,360
those containers

00:24:10,080 --> 00:24:15,039
first and now we can pull the os

00:24:13,360 --> 00:24:17,600
installer kyoko image

00:24:15,039 --> 00:24:19,039
the virtualized one so we're to pass the

00:24:17,600 --> 00:24:21,760
download

00:24:19,039 --> 00:24:23,600
key and then what i want is the queue

00:24:21,760 --> 00:24:26,000
chemo image with the

00:24:23,600 --> 00:24:27,039
uh that i would like to decompress as

00:24:26,000 --> 00:24:31,120
well

00:24:27,039 --> 00:24:34,559
so this is going to pull that and

00:24:31,120 --> 00:24:36,400
for the convenience i have that image

00:24:34,559 --> 00:24:38,880
downloaded so it's going to start the

00:24:36,400 --> 00:24:42,960
download here

00:24:38,880 --> 00:24:45,200
but what i have is this image downloaded

00:24:42,960 --> 00:24:46,320
pre-session so it's not uh you can

00:24:45,200 --> 00:24:48,240
easily

00:24:46,320 --> 00:24:50,480
it would be in a cue card to format so

00:24:48,240 --> 00:24:53,360
what i did was move that image to

00:24:50,480 --> 00:24:56,159
it your fedora as the fed uranium that

00:24:53,360 --> 00:25:00,400
is fedora cos minus qcow2

00:24:56,159 --> 00:25:02,240
so uh this is how you can do that and

00:25:00,400 --> 00:25:04,159
if you are on fedora we have all of

00:25:02,240 --> 00:25:07,200
those packaged in the fedora

00:25:04,159 --> 00:25:08,960
um official repositories so you don't

00:25:07,200 --> 00:25:11,200
need to run them on podman

00:25:08,960 --> 00:25:15,600
but also it's recommended to run those

00:25:11,200 --> 00:25:17,600
tools from containers because

00:25:15,600 --> 00:25:19,679
that ensures that the latest versions

00:25:17,600 --> 00:25:21,919
are there with packaging it needs to

00:25:19,679 --> 00:25:23,120
like get approved and ensure that

00:25:21,919 --> 00:25:24,720
everything works fine

00:25:23,120 --> 00:25:26,799
and stuff so if you would like to

00:25:24,720 --> 00:25:28,080
manually build manually download those

00:25:26,799 --> 00:25:31,279
images rather than using the

00:25:28,080 --> 00:25:35,440
os installer you can use curl or wget

00:25:31,279 --> 00:25:38,159
depending on how you need it so

00:25:35,440 --> 00:25:40,000
you can do that by creating a variable

00:25:38,159 --> 00:25:44,559
as release and then pulling that

00:25:40,000 --> 00:25:49,120
from fedora's uh qos build weapon

00:25:44,559 --> 00:25:52,159
so and now let's ensure that uh

00:25:49,120 --> 00:25:54,080
uh the image that the archive we got is

00:25:52,159 --> 00:25:58,080
signed from fedora so i'm gonna

00:25:54,080 --> 00:26:02,720
import this thing uh the fedora

00:25:58,080 --> 00:26:02,720
uh gpg keys and then

00:26:03,679 --> 00:26:11,520
i'm gonna ensure that it's worked

00:26:07,120 --> 00:26:15,520
on here oops

00:26:11,520 --> 00:26:19,840
so that means i have okay i don't have

00:26:15,520 --> 00:26:19,840
these variable setup

00:26:22,000 --> 00:26:28,640
it turns out i don't have that far

00:26:25,360 --> 00:26:32,559
uh that's for men sorry

00:26:28,640 --> 00:26:34,159
everyone so uh let's move on

00:26:32,559 --> 00:26:36,240
rather than verifying i have those

00:26:34,159 --> 00:26:38,960
images verified to define

00:26:36,240 --> 00:26:39,600
read the session so i don't have the sig

00:26:38,960 --> 00:26:43,760
files

00:26:39,600 --> 00:26:47,760
yet and you can set the fcct

00:26:43,760 --> 00:26:49,919
and so we have already these set already

00:26:47,760 --> 00:26:53,440
so as you can see now i have fcct

00:26:49,919 --> 00:26:59,679
available as well uh

00:26:53,440 --> 00:26:59,679
version and ignition validate

00:26:59,760 --> 00:27:06,159
version and the os installer so

00:27:04,240 --> 00:27:07,279
now we don't need pros installer as we

00:27:06,159 --> 00:27:09,679
have got the image and

00:27:07,279 --> 00:27:11,279
i have moved that as fedora coast or

00:27:09,679 --> 00:27:14,400
kuka too

00:27:11,279 --> 00:27:16,240
uh so this was the initial setup which

00:27:14,400 --> 00:27:18,399
i had some issues with because i have

00:27:16,240 --> 00:27:20,240
had these things set up freeness

00:27:18,399 --> 00:27:22,000
in order i don't break things at the

00:27:20,240 --> 00:27:25,039
session but

00:27:22,000 --> 00:27:27,600
things turned out not the way i expected

00:27:25,039 --> 00:27:28,960
so let's get started with the initial

00:27:27,600 --> 00:27:31,360
provisioning scenario which

00:27:28,960 --> 00:27:33,039
in which we would now see real quick um

00:27:31,360 --> 00:27:35,039
so just a recap of that

00:27:33,039 --> 00:27:36,240
setup session so basically what we've

00:27:35,039 --> 00:27:39,679
done at this point

00:27:36,240 --> 00:27:41,520
is for for the workshop

00:27:39,679 --> 00:27:45,279
there's three different tools that we

00:27:41,520 --> 00:27:47,039
use in the workshop one of them is fcct

00:27:45,279 --> 00:27:49,200
one of them is ignition validate and the

00:27:47,039 --> 00:27:51,520
other is coreos installer

00:27:49,200 --> 00:27:53,279
the reason we use coreos installer is

00:27:51,520 --> 00:27:56,399
just to

00:27:53,279 --> 00:27:59,679
uh handle downloading the image for us

00:27:56,399 --> 00:28:02,799
and verifying that it is

00:27:59,679 --> 00:28:04,880
you know the actual image that was

00:28:02,799 --> 00:28:06,799
delivered by release engineering

00:28:04,880 --> 00:28:08,240
um but there's a few different options

00:28:06,799 --> 00:28:09,679
for that you don't have to use coreos

00:28:08,240 --> 00:28:12,240
installer to download the image

00:28:09,679 --> 00:28:12,799
it just happens to be one that downloads

00:28:12,240 --> 00:28:15,279
the image

00:28:12,799 --> 00:28:17,360
uncompresses it and also verifies that

00:28:15,279 --> 00:28:18,559
it was signed with the fedora release

00:28:17,360 --> 00:28:21,440
engineering key

00:28:18,559 --> 00:28:22,880
so it's just a nice um it's a nice tool

00:28:21,440 --> 00:28:24,960
to use for that

00:28:22,880 --> 00:28:26,960
as far as these tools go there's three

00:28:24,960 --> 00:28:29,279
different ways that you can use them

00:28:26,960 --> 00:28:30,480
one is in a container as nasir showed

00:28:29,279 --> 00:28:33,600
earlier

00:28:30,480 --> 00:28:35,200
one of them is with rpms so if you

00:28:33,600 --> 00:28:36,720
happen to be on fedora you should be

00:28:35,200 --> 00:28:39,360
able to dnf install

00:28:36,720 --> 00:28:41,279
each one of those and then the third is

00:28:39,360 --> 00:28:43,760
you can pull

00:28:41,279 --> 00:28:45,760
the actual binaries from github their

00:28:43,760 --> 00:28:46,960
github releases for each project if you

00:28:45,760 --> 00:28:49,039
want to

00:28:46,960 --> 00:28:50,480
so that's all this tutorial did was just

00:28:49,039 --> 00:28:53,200
get us set it up

00:28:50,480 --> 00:28:59,840
downloaded an image and then our tools

00:28:53,200 --> 00:28:59,840
are set up for the other tutorials

00:29:02,559 --> 00:29:07,039
uh thank you dusty for the recap and

00:29:05,600 --> 00:29:10,480
explanation

00:29:07,039 --> 00:29:12,000
so uh this is how you set up your

00:29:10,480 --> 00:29:13,679
environment to get started for the

00:29:12,000 --> 00:29:15,600
workshop and now we are going to be

00:29:13,679 --> 00:29:18,240
moving on to

00:29:15,600 --> 00:29:19,360
uh creating uh running a basic

00:29:18,240 --> 00:29:21,919
provisioning scenario

00:29:19,360 --> 00:29:22,559
in which we are going to be uh auto

00:29:21,919 --> 00:29:26,399
logging

00:29:22,559 --> 00:29:28,720
uh sorry uh auto adding a systemd

00:29:26,399 --> 00:29:31,919
drop-in unit which will

00:29:28,720 --> 00:29:34,159
get us auto login in the tty terminal

00:29:31,919 --> 00:29:36,720
and wirelessly terminal access

00:29:34,159 --> 00:29:39,679
so whenever you need to provision the

00:29:36,720 --> 00:29:41,840
fedora os instance

00:29:39,679 --> 00:29:43,200
you have to give that an ignition file

00:29:41,840 --> 00:29:46,720
that

00:29:43,200 --> 00:29:48,960
dusty dusty introduced earlier

00:29:46,720 --> 00:29:50,720
because as the archives are distributed

00:29:48,960 --> 00:29:51,840
you are not actually modifying the

00:29:50,720 --> 00:29:55,360
archive but

00:29:51,840 --> 00:29:58,720
provisioning it by using a way to call

00:29:55,360 --> 00:30:02,080
ignition config files uh which we can

00:29:58,720 --> 00:30:04,080
create by using fcct so

00:30:02,080 --> 00:30:05,200
in this very first cleaning scenario

00:30:04,080 --> 00:30:07,279
what we are going to do is

00:30:05,200 --> 00:30:08,480
like get the very basic things done and

00:30:07,279 --> 00:30:11,600
that is to

00:30:08,480 --> 00:30:14,880
add a system d unit drop in to

00:30:11,600 --> 00:30:16,240
get override the default serial get tty

00:30:14,880 --> 00:30:19,360
service that we have

00:30:16,240 --> 00:30:21,840
and which will auto log in the core user

00:30:19,360 --> 00:30:22,559
that in the serial console that we have

00:30:21,840 --> 00:30:24,000
and the

00:30:22,559 --> 00:30:26,559
third thing that we are going to do is

00:30:24,000 --> 00:30:30,080
like add and set the system

00:30:26,559 --> 00:30:32,640
hostname to tutorial and

00:30:30,080 --> 00:30:33,679
add a profile profile that's going to

00:30:32,640 --> 00:30:36,960
tell systemd

00:30:33,679 --> 00:30:37,679
that that do not use a pager for output

00:30:36,960 --> 00:30:38,880
because you

00:30:37,679 --> 00:30:42,320
if you don't use that you're going to

00:30:38,880 --> 00:30:45,279
see some uh warning output there as well

00:30:42,320 --> 00:30:47,279
and where is the kernel console logging

00:30:45,279 --> 00:30:48,000
level to hide audit messages that we

00:30:47,279 --> 00:30:50,720
have

00:30:48,000 --> 00:30:52,240
because that's going to take a second

00:30:50,720 --> 00:30:54,480
and it's gonna

00:30:52,240 --> 00:30:56,880
write those audit messages on the

00:30:54,480 --> 00:30:59,919
terminal on the console as well so

00:30:56,880 --> 00:31:03,120
we are gonna raise the kernel uh

00:30:59,919 --> 00:31:05,679
console uh logging level as well so

00:31:03,120 --> 00:31:06,320
what we are going to do is create a fcct

00:31:05,679 --> 00:31:09,519
auto logging

00:31:06,320 --> 00:31:13,200
ml file that we have so let me

00:31:09,519 --> 00:31:13,760
see what we have here so uh i have it

00:31:13,200 --> 00:31:18,640
here as

00:31:13,760 --> 00:31:21,120
fcct or auto login x60 auto login here

00:31:18,640 --> 00:31:22,080
so what's gonna do is create a variant

00:31:21,120 --> 00:31:25,279
called leftpost

00:31:22,080 --> 00:31:27,279
in which we set the version to 1.1.0 you

00:31:25,279 --> 00:31:28,880
could set it anything you would like

00:31:27,279 --> 00:31:30,559
and what we are going to do is create a

00:31:28,880 --> 00:31:33,120
systemd dropping unit

00:31:30,559 --> 00:31:35,600
in which we are overriding the serial

00:31:33,120 --> 00:31:38,799
get cty service that we have

00:31:35,600 --> 00:31:41,360
uh and we are going to create and

00:31:38,799 --> 00:31:43,279
give the name as auto login code dot

00:31:41,360 --> 00:31:46,559
conf in the dropping unit

00:31:43,279 --> 00:31:48,559
in which we add the contents uh

00:31:46,559 --> 00:31:49,760
in the service we are gonna overwrite

00:31:48,559 --> 00:31:52,640
the exact

00:31:49,760 --> 00:31:53,200
the execution start uh in the main unit

00:31:52,640 --> 00:31:56,320
and then

00:31:53,200 --> 00:31:58,080
add a new execution start with the dot

00:31:56,320 --> 00:31:59,519
with the minus prefix which is gonna

00:31:58,080 --> 00:32:00,320
ignore failure so what we are going to

00:31:59,519 --> 00:32:04,559
do is

00:32:00,320 --> 00:32:07,760
prevent get pty to

00:32:04,559 --> 00:32:11,039
not do the default exit start and

00:32:07,760 --> 00:32:14,640
when the usr slash been a

00:32:11,039 --> 00:32:17,279
get tty with auto logging the core user

00:32:14,640 --> 00:32:18,159
and we are going to use that as in the

00:32:17,279 --> 00:32:19,840
terminal

00:32:18,159 --> 00:32:21,360
in the storage section we are going to

00:32:19,840 --> 00:32:24,480
be modifying the files

00:32:21,360 --> 00:32:26,320
uh at host name we are going to set the

00:32:24,480 --> 00:32:28,080
mode to 0644

00:32:26,320 --> 00:32:29,919
and the contents we are going to add

00:32:28,080 --> 00:32:31,600
tutorial in order to set our host name

00:32:29,919 --> 00:32:33,760
to tutorial

00:32:31,600 --> 00:32:34,960
and in the system d pager we are going

00:32:33,760 --> 00:32:38,799
to tell systemd

00:32:34,960 --> 00:32:41,120
to not use a pager when printing

00:32:38,799 --> 00:32:44,559
information

00:32:41,120 --> 00:32:46,640
and with the silence uh we're gonna

00:32:44,559 --> 00:32:47,679
create another file which is silence

00:32:46,640 --> 00:32:50,559
audit dot com

00:32:47,679 --> 00:32:52,399
which is gonna add the kernel dot print

00:32:50,559 --> 00:32:53,840
case equals to four which will raise the

00:32:52,399 --> 00:32:57,840
kernel logging level from

00:32:53,840 --> 00:33:01,200
debug to warning in order for us to

00:32:57,840 --> 00:33:02,720
hide the audit messages from the console

00:33:01,200 --> 00:33:04,960
that we are going to be using

00:33:02,720 --> 00:33:06,399
so as you can see this is a really human

00:33:04,960 --> 00:33:09,039
readable format

00:33:06,399 --> 00:33:10,080
like you can easily go through this yaml

00:33:09,039 --> 00:33:14,159
file understand what

00:33:10,080 --> 00:33:16,399
it's doing uh this is how

00:33:14,159 --> 00:33:17,519
that the thing that dustin dusty

00:33:16,399 --> 00:33:18,720
mentioned that

00:33:17,519 --> 00:33:20,799
we are going to be using a human

00:33:18,720 --> 00:33:24,000
readable format so

00:33:20,799 --> 00:33:25,919
as we have got the yaml file

00:33:24,000 --> 00:33:28,480
locally so now we are going to be using

00:33:25,919 --> 00:33:30,640
the fcct fedora course

00:33:28,480 --> 00:33:32,799
config transpiler in order to change

00:33:30,640 --> 00:33:35,200
that into an ignition file

00:33:32,799 --> 00:33:37,360
so what we are going to do is i am going

00:33:35,200 --> 00:33:38,480
to be using the pretty format along with

00:33:37,360 --> 00:33:40,960
a strict keyword

00:33:38,480 --> 00:33:42,559
and i'm going to provide the yaml file

00:33:40,960 --> 00:33:46,000
which is going to output the

00:33:42,559 --> 00:33:48,399
ignition file so what it did is

00:33:46,000 --> 00:33:50,720
it converted that to ignition file

00:33:48,399 --> 00:33:51,279
ignition config file and as you can see

00:33:50,720 --> 00:33:54,159
this is

00:33:51,279 --> 00:33:55,039
not as readable as you would like it to

00:33:54,159 --> 00:33:58,399
be

00:33:55,039 --> 00:34:01,200
so it's not that human friendly so we

00:33:58,399 --> 00:34:01,760
are using the fcct in order to transpile

00:34:01,200 --> 00:34:04,799
and

00:34:01,760 --> 00:34:07,760
hash that data here so

00:34:04,799 --> 00:34:10,560
let's provision a basic instance here

00:34:07,760 --> 00:34:12,720
[Music]

00:34:10,560 --> 00:34:14,399
before that we are going to validate

00:34:12,720 --> 00:34:17,280
that the ignition file we then

00:34:14,399 --> 00:34:18,960
we just generated with the transpiler is

00:34:17,280 --> 00:34:21,440
valid or not

00:34:18,960 --> 00:34:23,280
so what we are going to do is this one

00:34:21,440 --> 00:34:23,839
the ignition validate the tool that we

00:34:23,280 --> 00:34:27,520
get

00:34:23,839 --> 00:34:29,359
that we installed or downloaded earlier

00:34:27,520 --> 00:34:31,280
in order to make sure ignition file

00:34:29,359 --> 00:34:34,079
works fine so

00:34:31,280 --> 00:34:36,320
it's a success that our ignition file

00:34:34,079 --> 00:34:39,679
can be used to provision

00:34:36,320 --> 00:34:42,560
so now what we are going to do is

00:34:39,679 --> 00:34:45,040
uh set up the correct ac linux label in

00:34:42,560 --> 00:34:47,079
order for the

00:34:45,040 --> 00:34:48,879
what installed to access that auto

00:34:47,079 --> 00:34:52,079
login.ignition file

00:34:48,879 --> 00:34:54,879
so i'm going to do that

00:34:52,079 --> 00:34:56,240
real quick and now what we're going to

00:34:54,879 --> 00:34:58,400
do is provision a

00:34:56,240 --> 00:35:00,000
fedora cos virtual machine in which the

00:34:58,400 --> 00:35:02,800
name would be of course we

00:35:00,000 --> 00:35:05,200
would be creating we would be using two

00:35:02,800 --> 00:35:07,760
virtual cpus 2gb of ram

00:35:05,200 --> 00:35:09,680
and the os we're setting the os variant

00:35:07,760 --> 00:35:12,880
as fedora 32

00:35:09,680 --> 00:35:14,880
and setting the network wish to vir dr0

00:35:12,880 --> 00:35:16,560
so in order to make sure that things are

00:35:14,880 --> 00:35:17,520
working fine at your side you're gonna

00:35:16,560 --> 00:35:21,280
make sure that

00:35:17,520 --> 00:35:24,320
the styles of your lip word b is

00:35:21,280 --> 00:35:27,280
in the word b so

00:35:24,320 --> 00:35:28,160
it is active the virtualization daemon

00:35:27,280 --> 00:35:30,160
is loaded

00:35:28,160 --> 00:35:31,280
and is currently inactive but we are

00:35:30,160 --> 00:35:34,400
gonna

00:35:31,280 --> 00:35:35,119
and that the socket is listening and

00:35:34,400 --> 00:35:36,880
whenever we

00:35:35,119 --> 00:35:39,119
provide something to socket it's gonna

00:35:36,880 --> 00:35:41,920
make the service active

00:35:39,119 --> 00:35:43,760
so let's provision this basic uh

00:35:41,920 --> 00:35:44,320
wordpress install which is going to when

00:35:43,760 --> 00:35:45,440
the

00:35:44,320 --> 00:35:48,000
in the command line is going to

00:35:45,440 --> 00:35:50,000
provision that and in the course config

00:35:48,000 --> 00:35:51,599
we are going to be running the ignition

00:35:50,000 --> 00:35:54,400
file the disk size

00:35:51,599 --> 00:35:55,440
is 20 and the backing store we are using

00:35:54,400 --> 00:35:57,920
the backing store

00:35:55,440 --> 00:35:58,800
as we don't want to play with the base

00:35:57,920 --> 00:36:01,200
with the kyoko

00:35:58,800 --> 00:36:01,920
two image archive that we have and use

00:36:01,200 --> 00:36:05,280
another

00:36:01,920 --> 00:36:09,040
20 gb disk uh that we would attach

00:36:05,280 --> 00:36:10,400
so i'm going to copy paste that command

00:36:09,040 --> 00:36:12,720
here and

00:36:10,400 --> 00:36:13,680
what it will do is in our smd unit we

00:36:12,720 --> 00:36:17,839
used the

00:36:13,680 --> 00:36:21,040
uh we asked that to attach the dty

00:36:17,839 --> 00:36:22,400
console here so it's going to do that

00:36:21,040 --> 00:36:26,079
and as you can see it started

00:36:22,400 --> 00:36:28,160
supervision um one uh one

00:36:26,079 --> 00:36:30,000
question that we had in chat so at least

00:36:28,160 --> 00:36:30,880
one user has a system where it doesn't

00:36:30,000 --> 00:36:34,000
recognize

00:36:30,880 --> 00:36:37,040
uh the dash dash os dash variant

00:36:34,000 --> 00:36:39,520
uh option to vert install uh

00:36:37,040 --> 00:36:40,560
so if you happen to get an error when

00:36:39,520 --> 00:36:44,000
you pass dash

00:36:40,560 --> 00:36:46,560
os variant equals fedora 32 you can just

00:36:44,000 --> 00:36:48,640
drop that argument completely

00:36:46,560 --> 00:36:50,160
so if if you're having the same problem

00:36:48,640 --> 00:36:52,720
just drop that argument and

00:36:50,160 --> 00:36:55,839
it'll still work that just makes the vm

00:36:52,720 --> 00:36:55,839
boot a little faster

00:36:59,359 --> 00:37:03,599
uh thank you dusty for answering the

00:37:01,440 --> 00:37:06,400
question the os flag is like

00:37:03,599 --> 00:37:06,800
totally optional that's just uh less

00:37:06,400 --> 00:37:08,800
what

00:37:06,800 --> 00:37:11,119
what install know that we are using the

00:37:08,800 --> 00:37:13,680
fedora core federator too

00:37:11,119 --> 00:37:14,320
so as you can see it has provisioned

00:37:13,680 --> 00:37:18,400
using

00:37:14,320 --> 00:37:21,760
the ignition and to ensure that

00:37:18,400 --> 00:37:22,079
the ignition config worked so as you can

00:37:21,760 --> 00:37:25,680
see

00:37:22,079 --> 00:37:28,160
the tutorial login code it says the auto

00:37:25,680 --> 00:37:30,960
login automatic login here

00:37:28,160 --> 00:37:33,200
and let's ensure that things are working

00:37:30,960 --> 00:37:37,359
fine so as you can see we have got a

00:37:33,200 --> 00:37:40,720
uh gty console here so let's get

00:37:37,359 --> 00:37:42,720
the system cpl it's about the pty

00:37:40,720 --> 00:37:45,760
service that we have

00:37:42,720 --> 00:37:49,119
uh so here you can see that

00:37:45,760 --> 00:37:49,599
the the service that the auto login dot

00:37:49,119 --> 00:37:51,760
co

00:37:49,599 --> 00:37:54,000
minus call cons that we provided using

00:37:51,760 --> 00:37:55,520
the ignition config file we have it here

00:37:54,000 --> 00:37:56,640
which is going to overwrite the exact

00:37:55,520 --> 00:37:59,520
start

00:37:56,640 --> 00:38:00,240
uh in the main unit uh with somewhere

00:37:59,520 --> 00:38:03,599
above it

00:38:00,240 --> 00:38:07,040
and what it will do is like it will

00:38:03,599 --> 00:38:08,640
get it will set the auto login to core

00:38:07,040 --> 00:38:11,599
and it's going to provide us the

00:38:08,640 --> 00:38:14,560
terminal uh interface here so

00:38:11,599 --> 00:38:15,599
as you can see it has providers and the

00:38:14,560 --> 00:38:19,040
ignition config

00:38:15,599 --> 00:38:20,880
seem to work fine here it is and let's

00:38:19,040 --> 00:38:22,560
verify the other thing that we did was

00:38:20,880 --> 00:38:26,560
to set the host name to

00:38:22,560 --> 00:38:29,359
tutorial so you can do that by host name

00:38:26,560 --> 00:38:32,640
cto

00:38:29,359 --> 00:38:34,880
or so here you can see it's the static

00:38:32,640 --> 00:38:38,079
hostname is tutorial

00:38:34,880 --> 00:38:42,240
and you can also do that by

00:38:38,079 --> 00:38:46,560
into epc slash hostname

00:38:42,240 --> 00:38:48,079
oops folks so that seemed to work fine

00:38:46,560 --> 00:38:50,640
now what we are going to do is

00:38:48,079 --> 00:38:52,560
as you can see fedora seems to work fine

00:38:50,640 --> 00:38:54,800
and our ignition config file has

00:38:52,560 --> 00:38:57,839
provisioned the instance the right way

00:38:54,800 --> 00:38:58,960
so we are going to verify that the rpms

00:38:57,839 --> 00:39:01,599
that are distributed

00:38:58,960 --> 00:39:02,640
that are packaged into the fedora course

00:39:01,599 --> 00:39:05,280
are working fine

00:39:02,640 --> 00:39:06,800
which is one is ignition which we use

00:39:05,280 --> 00:39:07,680
for provisioning the second one is

00:39:06,800 --> 00:39:10,160
kernel

00:39:07,680 --> 00:39:11,839
the third is mobi engine rpm which is

00:39:10,160 --> 00:39:13,440
going to provide you the docker engine

00:39:11,839 --> 00:39:15,680
and the docker commands

00:39:13,440 --> 00:39:17,200
along with that we have podman sir

00:39:15,680 --> 00:39:20,560
podman systemd

00:39:17,200 --> 00:39:23,440
rpm os 3 like does it

00:39:20,560 --> 00:39:25,839
dusty introduce that it's like a get for

00:39:23,440 --> 00:39:28,079
your opening systems and this in cati

00:39:25,839 --> 00:39:29,839
service which is the auto

00:39:28,079 --> 00:39:31,440
updating service that we have within the

00:39:29,839 --> 00:39:34,640
fedora goes

00:39:31,440 --> 00:39:37,839
internals so let's ensure that we have

00:39:34,640 --> 00:39:40,240
the right versions here

00:39:37,839 --> 00:39:42,240
so what you can do is if something seems

00:39:40,240 --> 00:39:43,920
to be failing you can like

00:39:42,240 --> 00:39:45,520
share with us that the ignition is not

00:39:43,920 --> 00:39:48,800
working fine you can

00:39:45,520 --> 00:39:50,800
tell us the exact version which

00:39:48,800 --> 00:39:51,839
version that seems to be failing along

00:39:50,800 --> 00:39:58,240
with that

00:39:51,839 --> 00:39:58,240
we are using rpm os3 so rpm os3

00:39:59,359 --> 00:40:03,839
oops it's not a flag

00:40:06,000 --> 00:40:11,040
so as you can see in the usb we have the

00:40:08,400 --> 00:40:14,000
version as fedor 2032

00:40:11,040 --> 00:40:14,720
one this is the stream version and your

00:40:14,000 --> 00:40:16,800
place

00:40:14,720 --> 00:40:18,319
and we have the comment hash here so if

00:40:16,800 --> 00:40:20,400
something seems to be failing you can

00:40:18,319 --> 00:40:22,880
provide us the comment hash and we can

00:40:20,400 --> 00:40:24,240
we can verify that how can we fix that

00:40:22,880 --> 00:40:26,400
and provide you some

00:40:24,240 --> 00:40:28,960
fixes so you can say you can do that by

00:40:26,400 --> 00:40:30,960
the comment version

00:40:28,960 --> 00:40:33,280
and in order to ensure that the

00:40:30,960 --> 00:40:35,760
systemctl service first and capti is

00:40:33,280 --> 00:40:38,400
working fine so we are gonna ensure that

00:40:35,760 --> 00:40:41,359
as well

00:40:38,400 --> 00:40:41,760
so what it's doing is like as you can

00:40:41,359 --> 00:40:45,119
see

00:40:41,760 --> 00:40:49,760
in the update the default auto update

00:40:45,119 --> 00:40:49,760
is enabled by default and

00:40:50,000 --> 00:40:54,160
i'm not sure about this l dusty would

00:40:52,720 --> 00:40:58,000
you like to

00:40:54,160 --> 00:41:00,160
specify what this is it seems like yeah

00:40:58,000 --> 00:41:01,920
it just looks like um maybe zincotti

00:41:00,160 --> 00:41:03,200
started before the network was

00:41:01,920 --> 00:41:05,760
completely up

00:41:03,200 --> 00:41:08,480
um but yeah that's safe to ignore

00:41:05,760 --> 00:41:11,760
basically zinkati will periodically

00:41:08,480 --> 00:41:14,800
uh pull uh the update server

00:41:11,760 --> 00:41:18,839
and if it has uh

00:41:14,800 --> 00:41:21,839
an error on startup it'll resolve itself

00:41:18,839 --> 00:41:21,839
later

00:41:22,240 --> 00:41:27,920
okay so let's just lock that information

00:41:25,040 --> 00:41:32,839
i wanted to you could system ctl restart

00:41:27,920 --> 00:41:35,839
uh zenkotti and it should not show that

00:41:32,839 --> 00:41:35,839
error

00:41:36,800 --> 00:41:43,119
um you'll have to do it with pseudo on

00:41:40,800 --> 00:41:43,119
the front

00:41:44,640 --> 00:41:50,160
oops successful

00:41:48,360 --> 00:41:53,760
[Music]

00:41:50,160 --> 00:41:58,720
so i didn't like less

00:41:53,760 --> 00:42:02,880
right now status it's in cat p

00:41:58,720 --> 00:42:03,359
service so as you can see initialized

00:42:02,880 --> 00:42:08,880
auto

00:42:03,359 --> 00:42:13,920
bits so it seems to be working fine now

00:42:08,880 --> 00:42:13,920
it's minus minus four

00:42:14,160 --> 00:42:19,119
uh wise pipe cat so the systemd pager

00:42:17,520 --> 00:42:20,960
workaround that we did was only for the

00:42:19,119 --> 00:42:24,000
core user so when you sudo

00:42:20,960 --> 00:42:24,000
um that's not set

00:42:25,839 --> 00:42:30,079
ah got it so what now it's working fine

00:42:29,599 --> 00:42:32,160
that

00:42:30,079 --> 00:42:34,079
doesn't catchy was initialized before my

00:42:32,160 --> 00:42:36,480
network was configured so

00:42:34,079 --> 00:42:37,119
it resulted in that error but it's like

00:42:36,480 --> 00:42:39,920
uh

00:42:37,119 --> 00:42:40,400
it has its like internal loop in which

00:42:39,920 --> 00:42:43,680
it will

00:42:40,400 --> 00:42:45,760
pull all the updates so

00:42:43,680 --> 00:42:46,880
it will auto update when when it gets

00:42:45,760 --> 00:42:48,640
one so

00:42:46,880 --> 00:42:49,920
it seems to be working fine another

00:42:48,640 --> 00:42:52,160
thing that we can do is

00:42:49,920 --> 00:42:53,040
in order to investigate the logs that we

00:42:52,160 --> 00:42:56,160
have

00:42:53,040 --> 00:42:59,520
uh from the ignition config we can

00:42:56,160 --> 00:43:01,520
use the general cto in order to wear

00:42:59,520 --> 00:43:02,800
things looks and i'm pretty sure it's

00:43:01,520 --> 00:43:04,319
going to be long so i'm going to pipe

00:43:02,800 --> 00:43:09,200
that in more

00:43:04,319 --> 00:43:09,200
so as you can see

00:43:09,359 --> 00:43:16,319
uh ignition

00:43:12,560 --> 00:43:20,160
we started this entirety update server

00:43:16,319 --> 00:43:23,440
it tells us about our information

00:43:20,160 --> 00:43:25,839
and the logs that we have of ignition so

00:43:23,440 --> 00:43:27,760
whenever the ignition created the files

00:43:25,839 --> 00:43:30,240
did all the process that we

00:43:27,760 --> 00:43:31,119
specified in the ignition config file

00:43:30,240 --> 00:43:34,079
and

00:43:31,119 --> 00:43:35,040
what it did was it then you mount itself

00:43:34,079 --> 00:43:37,119
and

00:43:35,040 --> 00:43:41,359
the ignition finished and successfully

00:43:37,119 --> 00:43:43,599
so you can see

00:43:41,359 --> 00:43:46,000
so the next thing that we can do is like

00:43:43,599 --> 00:43:49,119
ensure that the pod man

00:43:46,000 --> 00:43:50,880
and the podman container runtime is

00:43:49,119 --> 00:43:54,480
working fine so

00:43:50,880 --> 00:43:55,920
we have that here as well podman version

00:43:54,480 --> 00:43:58,560
it's going to tell us department width

00:43:55,920 --> 00:44:02,079
and this currently 1.9.3

00:43:58,560 --> 00:44:02,640
is running on go 1.4 14.2 it was built

00:44:02,079 --> 00:44:05,280
on

00:44:02,640 --> 00:44:05,920
go on point 14.2 and you can get the

00:44:05,280 --> 00:44:10,400
broad man

00:44:05,920 --> 00:44:13,280
logs it's not log it's info

00:44:10,400 --> 00:44:15,520
so so as you can see here's the info

00:44:13,280 --> 00:44:17,680
about department

00:44:15,520 --> 00:44:19,440
that we'll be running another thing is

00:44:17,680 --> 00:44:22,800
that you can also in docker

00:44:19,440 --> 00:44:25,760
and the docker the docker

00:44:22,800 --> 00:44:26,160
in the docker service that we have can

00:44:25,760 --> 00:44:28,560
be

00:44:26,160 --> 00:44:30,160
initiated by using the docker command or

00:44:28,560 --> 00:44:32,000
the photo docker command or

00:44:30,160 --> 00:44:33,200
unless you are in the docker group as

00:44:32,000 --> 00:44:36,079
well

00:44:33,200 --> 00:44:38,319
so when um the issue with docker running

00:44:36,079 --> 00:44:41,280
docker and podman is that it can

00:44:38,319 --> 00:44:44,560
result in unexpected behaviors in both

00:44:41,280 --> 00:44:47,839
times so you can check this

00:44:44,560 --> 00:44:50,240
frequently asked questions entry that

00:44:47,839 --> 00:44:52,400
if you are running both at the same time

00:44:50,240 --> 00:44:54,160
it can cause some issues and unexpected

00:44:52,400 --> 00:44:56,960
behavior is highly

00:44:54,160 --> 00:44:57,760
recommended to not use them at the same

00:44:56,960 --> 00:45:00,960
time

00:44:57,760 --> 00:45:02,800
uh that in in fedora os we do have

00:45:00,960 --> 00:45:04,880
docker dot service disabled by default

00:45:02,800 --> 00:45:07,680
but if you would like to start you can

00:45:04,880 --> 00:45:09,520
run any docker command and it's gonna

00:45:07,680 --> 00:45:10,240
and the docker socket is listening to it

00:45:09,520 --> 00:45:13,280
and it's gonna

00:45:10,240 --> 00:45:16,800
enable this service here so

00:45:13,280 --> 00:45:19,839
let's continue uh here it tells about

00:45:16,800 --> 00:45:21,200
the same thing in the note and what i'm

00:45:19,839 --> 00:45:24,560
gonna do is now

00:45:21,200 --> 00:45:26,000
unattach the uh the console that we have

00:45:24,560 --> 00:45:29,040
that i can do with control

00:45:26,000 --> 00:45:32,800
and the square closing bracket

00:45:29,040 --> 00:45:35,119
so it's gonna unattach that and

00:45:32,800 --> 00:45:38,800
it is unattached now and what i'm going

00:45:35,119 --> 00:45:38,800
to do is now destroy that

00:45:41,760 --> 00:45:46,000
of course so it's going to destroy that

00:45:44,160 --> 00:45:48,960
thing and we are going to be removing

00:45:46,000 --> 00:45:50,160
all the storage that we generate that we

00:45:48,960 --> 00:45:52,800
created

00:45:50,160 --> 00:45:53,200
for the session and it's going to do

00:45:52,800 --> 00:45:56,319
that

00:45:53,200 --> 00:45:57,839
as well so it's now removed so dusty

00:45:56,319 --> 00:45:58,560
would you like to add something here

00:45:57,839 --> 00:46:01,760
about

00:45:58,560 --> 00:46:03,520
the first provisioning scenario that i

00:46:01,760 --> 00:46:05,599
know i think i think we're pretty good i

00:46:03,520 --> 00:46:06,160
mean pretty much all we did in this lab

00:46:05,599 --> 00:46:09,520
was

00:46:06,160 --> 00:46:12,640
go through create our first fcct

00:46:09,520 --> 00:46:15,839
config and then you know

00:46:12,640 --> 00:46:17,680
switch that over run fcct to create

00:46:15,839 --> 00:46:19,599
ignition out of it and then explore what

00:46:17,680 --> 00:46:23,119
it did to the system on boot

00:46:19,599 --> 00:46:23,119
um yeah look good

00:46:25,280 --> 00:46:29,520
that's great so now we can move on to a

00:46:28,400 --> 00:46:32,880
second tutorial

00:46:29,520 --> 00:46:36,319
which is uh focused towards

00:46:32,880 --> 00:46:39,760
uh running a script and

00:46:36,319 --> 00:46:41,200
a bash script on boot so um

00:46:39,760 --> 00:46:43,680
what we are going to do is we are going

00:46:41,200 --> 00:46:46,640
to be using icanhaship.com

00:46:43,680 --> 00:46:49,040
to update the issue and from console

00:46:46,640 --> 00:46:52,640
login helper messages that is going to

00:46:49,040 --> 00:46:54,079
output the nodes public ip address does

00:46:52,640 --> 00:46:56,319
that is really helpful when you are

00:46:54,079 --> 00:46:56,800
working on a cloud environment where you

00:46:56,319 --> 00:47:00,160
have

00:46:56,800 --> 00:47:01,839
different public or private addresses

00:47:00,160 --> 00:47:04,000
so we are going to be showing that

00:47:01,839 --> 00:47:07,839
script in usr local bin

00:47:04,000 --> 00:47:10,079
and as a public ipv4 dot minus four

00:47:07,839 --> 00:47:12,160
ipo four dot assets when we would be

00:47:10,079 --> 00:47:15,920
provisioning the machine using

00:47:12,160 --> 00:47:17,839
ignition so in order for that to

00:47:15,920 --> 00:47:19,599
run on boot what we are going to do is

00:47:17,839 --> 00:47:22,000
we are going to be creating a systemd

00:47:19,599 --> 00:47:25,680
service as well

00:47:22,000 --> 00:47:27,760
which will ensure that

00:47:25,680 --> 00:47:29,680
console login helper message issue

00:47:27,760 --> 00:47:32,400
service is working fine

00:47:29,680 --> 00:47:33,040
and which will be running before that

00:47:32,400 --> 00:47:36,240
and after

00:47:33,040 --> 00:47:40,400
network is online and the condition

00:47:36,240 --> 00:47:41,920
part that exists as issun public ipv4

00:47:40,400 --> 00:47:44,160
uh in the service what we are going to

00:47:41,920 --> 00:47:45,280
do is set the type to one shot and the

00:47:44,160 --> 00:47:48,319
exact start

00:47:45,280 --> 00:47:50,160
and we are gonna be running the public

00:47:48,319 --> 00:47:53,839
ipv4 script that we would be

00:47:50,160 --> 00:47:55,119
creating and after executing that we are

00:47:53,839 --> 00:48:00,000
going to use touch

00:47:55,119 --> 00:48:03,119
to create issue then public ipv4

00:48:00,000 --> 00:48:03,760
file and that will be remaining after

00:48:03,119 --> 00:48:07,040
exit

00:48:03,760 --> 00:48:10,079
yes and install

00:48:07,040 --> 00:48:11,200
that which is wanted by console login

00:48:10,079 --> 00:48:14,400
helper messages

00:48:11,200 --> 00:48:15,680
issued in the service so we will call

00:48:14,400 --> 00:48:18,960
this unit

00:48:15,680 --> 00:48:21,839
that we are creating and we will embed

00:48:18,960 --> 00:48:22,960
it into the fedora os config in a yaml

00:48:21,839 --> 00:48:26,720
format so

00:48:22,960 --> 00:48:30,480
let's see that ignition file here uh

00:48:26,720 --> 00:48:32,640
fccp services that we have

00:48:30,480 --> 00:48:34,319
let's focus on that so we are going to

00:48:32,640 --> 00:48:37,119
be creating the same variant we are

00:48:34,319 --> 00:48:39,119
setting the version to 1.1.0

00:48:37,119 --> 00:48:40,800
in the systemd drop-in unit we are going

00:48:39,119 --> 00:48:42,640
to do the same thing in which we will

00:48:40,800 --> 00:48:44,640
override the exact start in the main

00:48:42,640 --> 00:48:47,599
unit and

00:48:44,640 --> 00:48:49,119
set the auto login to true with the cold

00:48:47,599 --> 00:48:51,520
core user

00:48:49,119 --> 00:48:52,559
and we are going to create another unit

00:48:51,520 --> 00:48:55,760
here uh

00:48:52,559 --> 00:48:59,440
the drop let's say

00:48:55,760 --> 00:48:59,839
as far as i know it said it's a system d

00:48:59,440 --> 00:49:02,240
unit

00:48:59,839 --> 00:49:03,040
in which we are gonna set the it will be

00:49:02,240 --> 00:49:05,599
running before

00:49:03,040 --> 00:49:06,240
control login helper message services

00:49:05,599 --> 00:49:08,960
enabled

00:49:06,240 --> 00:49:12,079
and after network is online so we can

00:49:08,960 --> 00:49:15,119
have our ip address there

00:49:12,079 --> 00:49:17,359
and it's going to execute the i public

00:49:15,119 --> 00:49:18,880
ipv4 dot sh file which we haven't

00:49:17,359 --> 00:49:20,880
created yet

00:49:18,880 --> 00:49:22,400
and which we would be doing in the

00:49:20,880 --> 00:49:25,599
storage file section

00:49:22,400 --> 00:49:28,480
here uh here it is

00:49:25,599 --> 00:49:30,079
so it's going to create a local file a

00:49:28,480 --> 00:49:33,119
file and local slash bin

00:49:30,079 --> 00:49:35,920
slash public ipv4 dot sh directory

00:49:33,119 --> 00:49:37,920
in which the mode is set to executable

00:49:35,920 --> 00:49:40,000
and this is what the file looks like

00:49:37,920 --> 00:49:42,880
it's going to detect our public ipv4

00:49:40,000 --> 00:49:44,800
address and print that out to

00:49:42,880 --> 00:49:46,960
console login helper messages we're

00:49:44,800 --> 00:49:49,760
gonna show that in

00:49:46,960 --> 00:49:51,760
when we provision the machine other than

00:49:49,760 --> 00:49:53,680
that what we are trying to what we are

00:49:51,760 --> 00:49:56,000
gonna do is set the host name to

00:49:53,680 --> 00:49:56,559
tutorial like we did earlier set the

00:49:56,000 --> 00:49:59,839
systemd

00:49:56,559 --> 00:50:02,000
pager to cat and telling the systemd

00:49:59,839 --> 00:50:04,400
to not use a pager when we are printing

00:50:02,000 --> 00:50:05,839
information

00:50:04,400 --> 00:50:07,440
and the other thing is we are going to

00:50:05,839 --> 00:50:10,160
set the kernel the

00:50:07,440 --> 00:50:11,200
kernel's logging level from debug 7 to

00:50:10,160 --> 00:50:14,240
warning

00:50:11,200 --> 00:50:17,760
these four to hide the audit messages

00:50:14,240 --> 00:50:18,559
so this seems pretty simple uh would you

00:50:17,760 --> 00:50:22,079
add

00:50:18,559 --> 00:50:22,079
would someone like to add something

00:50:25,440 --> 00:50:29,280
okay sorry i thought i heard some noises

00:50:28,400 --> 00:50:32,400
so

00:50:29,280 --> 00:50:34,800
it seems good now we are gonna be

00:50:32,400 --> 00:50:36,880
uh so as it seems pretty readable this

00:50:34,800 --> 00:50:39,760
is where the fcct comes in

00:50:36,880 --> 00:50:41,119
we are gonna change that into a ignition

00:50:39,760 --> 00:50:44,400
config file

00:50:41,119 --> 00:50:46,960
sorry uh it's gonna be

00:50:44,400 --> 00:50:47,520
pretty and we're gonna set the layout to

00:50:46,960 --> 00:50:50,720
strict

00:50:47,520 --> 00:50:52,839
and oops and

00:50:50,720 --> 00:50:54,079
we're gonna set the output as

00:50:52,839 --> 00:50:56,480
services.ignition.config

00:50:54,079 --> 00:50:57,200
and you can verify that the files

00:50:56,480 --> 00:51:00,640
created

00:50:57,200 --> 00:51:02,880
service which services you're taking

00:51:00,640 --> 00:51:03,839
so as you can see it doesn't seem as

00:51:02,880 --> 00:51:06,880
readable

00:51:03,839 --> 00:51:08,079
as the ml file so this is what we would

00:51:06,880 --> 00:51:10,559
be providing the

00:51:08,079 --> 00:51:13,839
white install in order to provision the

00:51:10,559 --> 00:51:18,400
fedora os instance

00:51:13,839 --> 00:51:22,319
so uh now let's validate that our

00:51:18,400 --> 00:51:26,160
ignition file is working fine so

00:51:22,319 --> 00:51:29,920
ignition validates services that i can

00:51:26,160 --> 00:51:32,559
uh eco success if you would

00:51:29,920 --> 00:51:32,559
like to

00:51:34,960 --> 00:51:39,599
uh is subscribe so if the ignition file

00:51:37,520 --> 00:51:40,480
has any problems ignition validate is

00:51:39,599 --> 00:51:44,079
gonna

00:51:40,480 --> 00:51:47,920
show that to you in the console

00:51:44,079 --> 00:51:49,440
so let's set the correct sc linux label

00:51:47,920 --> 00:51:51,680
that we have

00:51:49,440 --> 00:51:53,359
again so it's going to change the

00:51:51,680 --> 00:51:56,240
security context in order for

00:51:53,359 --> 00:51:56,880
us to install to access it and now we

00:51:56,240 --> 00:51:59,520
are going to be

00:51:56,880 --> 00:52:01,440
using what install to create to

00:51:59,520 --> 00:52:02,880
provision our fedora cos instance the

00:52:01,440 --> 00:52:04,000
same way but we are going to be

00:52:02,880 --> 00:52:06,960
providing it a different

00:52:04,000 --> 00:52:09,280
ignition config file here with the same

00:52:06,960 --> 00:52:09,280
um

00:52:09,839 --> 00:52:14,960
same config

00:52:13,359 --> 00:52:17,280
same specs like we are going to be

00:52:14,960 --> 00:52:18,000
providing still the two virtual cpus the

00:52:17,280 --> 00:52:21,119
ram would be

00:52:18,000 --> 00:52:23,839
2048 along with the us variant as

00:52:21,119 --> 00:52:25,280
fedora 32 if that gives an error you can

00:52:23,839 --> 00:52:27,040
it's pretty optional

00:52:25,280 --> 00:52:29,280
if you're on fedora i believe it

00:52:27,040 --> 00:52:29,839
wouldn't have any issues it's just to

00:52:29,280 --> 00:52:31,599
make the

00:52:29,839 --> 00:52:32,880
boot up process a little faster and what

00:52:31,599 --> 00:52:34,400
install know that we are running a

00:52:32,880 --> 00:52:36,079
fedora instance

00:52:34,400 --> 00:52:38,640
uh we're going to import a network

00:52:36,079 --> 00:52:40,640
bridge and the graph we don't have any

00:52:38,640 --> 00:52:42,400
graphics there yet

00:52:40,640 --> 00:52:44,079
and with the in the chemo command line

00:52:42,400 --> 00:52:46,079
we are going to be using the

00:52:44,079 --> 00:52:47,920
uh we are going to be providing the

00:52:46,079 --> 00:52:50,960
services that ignition file we have

00:52:47,920 --> 00:52:53,119
setting the disk size to 20 gb

00:52:50,960 --> 00:52:55,680
and we are going to be using the uh qcow

00:52:53,119 --> 00:52:59,520
image as a backing store

00:52:55,680 --> 00:53:02,400
so let's get started uh

00:52:59,520 --> 00:53:03,599
it is connected to the domain it seems

00:53:02,400 --> 00:53:08,400
to be provisioning

00:53:03,599 --> 00:53:08,400
stuff starting and

00:53:08,800 --> 00:53:13,680
this is where the ignition is working

00:53:11,359 --> 00:53:15,440
the system the ac linux policy is good

00:53:13,680 --> 00:53:19,040
now

00:53:15,440 --> 00:53:21,359
uh ipmo stream

00:53:19,040 --> 00:53:23,839
system daemon is working so you can find

00:53:21,359 --> 00:53:26,960
network is online now

00:53:23,839 --> 00:53:28,240
and as you can see hostname service it

00:53:26,960 --> 00:53:30,160
seems to work fine

00:53:28,240 --> 00:53:31,440
so as you can see with the console login

00:53:30,160 --> 00:53:34,640
helper methods uh

00:53:31,440 --> 00:53:36,079
messages we we did get our public ipv

00:53:34,640 --> 00:53:39,839
address here

00:53:36,079 --> 00:53:42,880
and as you can see we can

00:53:39,839 --> 00:53:45,520
verify i think that our the

00:53:42,880 --> 00:53:47,520
newly created service is working fine so

00:53:45,520 --> 00:53:50,240
what it did was it created

00:53:47,520 --> 00:53:51,760
it used curl in order to create a

00:53:50,240 --> 00:53:56,240
request to i can hash it

00:53:51,760 --> 00:54:01,440
and send the output to a

00:53:56,240 --> 00:54:01,440
uh console log and console log

00:54:01,520 --> 00:54:06,960
this is what we did it was just to

00:54:04,640 --> 00:54:08,960
get your public ipv4 address along with

00:54:06,960 --> 00:54:13,280
attaching the tty console

00:54:08,960 --> 00:54:15,920
and auto login and along with providing

00:54:13,280 --> 00:54:18,000
the detecting public ipv4 address using

00:54:15,920 --> 00:54:20,480
i can hash it

00:54:18,000 --> 00:54:21,680
so this seems to be working fine now i

00:54:20,480 --> 00:54:25,119
can

00:54:21,680 --> 00:54:27,040
and the file would be also be created

00:54:25,119 --> 00:54:28,400
also would have been created so if you

00:54:27,040 --> 00:54:30,800
would like to ensure that the files

00:54:28,400 --> 00:54:34,000
created you can do that by

00:54:30,800 --> 00:54:37,680
that local

00:54:34,000 --> 00:54:40,079
it's in bin public hyper photo assets

00:54:37,680 --> 00:54:41,359
so here you can see the file that we

00:54:40,079 --> 00:54:44,480
created using

00:54:41,359 --> 00:54:47,599
uh ignition

00:54:44,480 --> 00:54:50,799
so that's it now i'm gonna detach

00:54:47,599 --> 00:54:54,720
my soul session here

00:54:50,799 --> 00:54:57,760
and gonna destroy the

00:54:54,720 --> 00:55:00,799
instance that's running of course

00:54:57,760 --> 00:55:03,599
and i'm gonna undefine

00:55:00,799 --> 00:55:05,680
and remove all the storage that we have

00:55:03,599 --> 00:55:08,960
here

00:55:05,680 --> 00:55:09,839
so it's detached uh so this was it from

00:55:08,960 --> 00:55:12,240
my side

00:55:09,839 --> 00:55:14,559
i had ran the basic initial ignition

00:55:12,240 --> 00:55:16,960
config files and

00:55:14,559 --> 00:55:18,880
what demonstrated the basic provisioning

00:55:16,960 --> 00:55:22,480
scenarios that we have

00:55:18,880 --> 00:55:25,839
and now i'm gonna be passing that to

00:55:22,480 --> 00:55:28,480
timothy to continue where i

00:55:25,839 --> 00:55:30,079
left off and continue with the second

00:55:28,480 --> 00:55:34,160
with the second two

00:55:30,079 --> 00:55:34,160
uh provisioning scenarios that we have

00:55:39,680 --> 00:55:46,319
great um awesome

00:55:43,040 --> 00:55:46,319
do you have any questions so far

00:55:46,799 --> 00:55:51,359
okay somebody has just finished it also

00:55:52,799 --> 00:55:59,119
that's that's good um

00:55:55,839 --> 00:56:00,079
all right uh let's go and move on to the

00:55:59,119 --> 00:56:03,280
next part so

00:56:00,079 --> 00:56:06,480
i'm going to be set up to do the setup

00:56:03,280 --> 00:56:08,960
and let me know that's good so i'll

00:56:06,480 --> 00:56:08,960
start

00:56:14,839 --> 00:56:20,160
that

00:56:16,640 --> 00:56:23,760
okay yeah

00:56:20,160 --> 00:56:25,920
we can start great all right

00:56:23,760 --> 00:56:27,760
is both at the same same time doing

00:56:25,920 --> 00:56:28,160
something maybe i'm going to make it

00:56:27,760 --> 00:56:33,440
this

00:56:28,160 --> 00:56:33,440
bigger here how big is this

00:56:34,160 --> 00:56:37,760
on the right hand side of the terminal

00:56:35,599 --> 00:56:38,079
window i would maybe go at least one

00:56:37,760 --> 00:56:41,440
step

00:56:38,079 --> 00:56:43,359
up okay yeah that's probably yeah that's

00:56:41,440 --> 00:56:47,520
probably good on the left hand side

00:56:43,359 --> 00:56:49,040
maybe make it bigger yeah i can do

00:56:47,520 --> 00:56:50,880
make this one bigger here yeah i think

00:56:49,040 --> 00:56:54,640
that's good yeah

00:56:50,880 --> 00:56:58,000
it's good here all right

00:56:54,640 --> 00:57:01,440
so for the next

00:56:58,000 --> 00:57:05,040
two steps so we are going to do uh

00:57:01,440 --> 00:57:07,920
ssh access and in starting containers

00:57:05,040 --> 00:57:08,559
and then we will do some updates so

00:57:07,920 --> 00:57:11,760
first

00:57:08,559 --> 00:57:13,760
let's work on ssh so we are

00:57:11,760 --> 00:57:14,880
basically going to reproduce the same

00:57:13,760 --> 00:57:18,400
steps that we did before

00:57:14,880 --> 00:57:20,000
but with a different uh federal res and

00:57:18,400 --> 00:57:24,160
ignition config

00:57:20,000 --> 00:57:27,440
so let's start with this ssh access so

00:57:24,160 --> 00:57:29,520
with the with the by default you only

00:57:27,440 --> 00:57:31,119
get one user which is set up by default

00:57:29,520 --> 00:57:33,920
it's a core user but there has

00:57:31,119 --> 00:57:34,720
there is no specific access

00:57:33,920 --> 00:57:37,520
authentication

00:57:34,720 --> 00:57:38,480
iss configuration set so you have to do

00:57:37,520 --> 00:57:40,319
everything you have to

00:57:38,480 --> 00:57:41,599
tell the system everything if you want

00:57:40,319 --> 00:57:44,000
to get access to it so

00:57:41,599 --> 00:57:44,880
for now we've been setting mostly auto

00:57:44,000 --> 00:57:46,799
logins

00:57:44,880 --> 00:57:48,480
on the console so that's great for

00:57:46,799 --> 00:57:50,480
development for testing

00:57:48,480 --> 00:57:51,520
but that may be not so great for reading

00:57:50,480 --> 00:57:54,720
production

00:57:51,520 --> 00:57:57,520
so what you want usually is to set up

00:57:54,720 --> 00:57:58,319
an ssh key to get access remotely to a

00:57:57,520 --> 00:58:01,200
system

00:57:58,319 --> 00:58:02,079
if you deploy it as a server somewhere

00:58:01,200 --> 00:58:03,599
so that's we

00:58:02,079 --> 00:58:05,119
what we are going to do we are going to

00:58:03,599 --> 00:58:07,599
add an ssh key

00:58:05,119 --> 00:58:09,280
for the core user and at the same time

00:58:07,599 --> 00:58:11,440
to make a little bit more spicy

00:58:09,280 --> 00:58:12,400
we will create a specific system this

00:58:11,440 --> 00:58:14,559
service

00:58:12,400 --> 00:58:16,720
that will fail and we'll see how the

00:58:14,559 --> 00:58:20,000
system handles that

00:58:16,720 --> 00:58:20,640
and finally we have another system the

00:58:20,000 --> 00:58:23,520
unit

00:58:20,640 --> 00:58:24,000
and that will bring up a container for

00:58:23,520 --> 00:58:25,680
running

00:58:24,000 --> 00:58:27,920
an actual service in a system something

00:58:25,680 --> 00:58:28,640
that we want to do we don't just want to

00:58:27,920 --> 00:58:30,880
run

00:58:28,640 --> 00:58:33,680
fedora covers for the sake of running it

00:58:30,880 --> 00:58:36,400
we want to actually have it do something

00:58:33,680 --> 00:58:37,760
so let's write the fedora course config

00:58:36,400 --> 00:58:41,680
and i'll go over the

00:58:37,760 --> 00:58:44,880
the configs with you here

00:58:41,680 --> 00:58:47,599
so first we so that's the basics

00:58:44,880 --> 00:58:48,480
we are going we i've added here a new

00:58:47,599 --> 00:58:50,880
section

00:58:48,480 --> 00:58:52,319
to tell that we have okay we have users

00:58:50,880 --> 00:58:53,280
and we have one named core that's the

00:58:52,319 --> 00:58:55,839
default

00:58:53,280 --> 00:58:56,960
and we will have a specific authorized

00:58:55,839 --> 00:59:00,559
key here

00:58:56,960 --> 00:59:02,400
to get access uh remotely so that's the

00:59:00,559 --> 00:59:06,000
skill key that will be added to

00:59:02,400 --> 00:59:09,280
the authorized autorescue file in the

00:59:06,000 --> 00:59:12,160
in the user home directory

00:59:09,280 --> 00:59:12,880
we still have our specific systemd units

00:59:12,160 --> 00:59:15,040
so the

00:59:12,880 --> 00:59:16,960
tty you need to set up our login we'll

00:59:15,040 --> 00:59:20,240
secure that for now that's

00:59:16,960 --> 00:59:22,240
simpler for debugs and we will create a

00:59:20,240 --> 00:59:24,240
we have a failed you need a unit that

00:59:22,240 --> 00:59:27,760
will fail it will simply

00:59:24,240 --> 00:59:30,160
just go and call binfels so it will fail

00:59:27,760 --> 00:59:31,920
and we'll see how that goes and then we

00:59:30,160 --> 00:59:33,359
have something a little bit more complex

00:59:31,920 --> 00:59:35,710
so

00:59:33,359 --> 00:59:37,760
maybe something i should do is yeah

00:59:35,710 --> 00:59:42,480
[Music]

00:59:37,760 --> 00:59:46,720
we have here a new unit

00:59:42,480 --> 00:59:47,440
that will run podman that will run a

00:59:46,720 --> 00:59:50,640
container

00:59:47,440 --> 00:59:53,920
via podman so this unit will

00:59:50,640 --> 00:59:58,240
pull the tcd container and

00:59:53,920 --> 00:59:59,040
run it with a set of parameters so it's

00:59:58,240 --> 01:00:03,520
basically a

00:59:59,040 --> 01:00:06,160
man command and writing this you need

01:00:03,520 --> 01:00:08,079
by hand is maybe not that easy so what

01:00:06,160 --> 01:00:10,720
you can do is you can use

01:00:08,079 --> 01:00:12,079
pondman's generate systemd i think

01:00:10,720 --> 01:00:15,839
currently

01:00:12,079 --> 01:00:15,839
or if the system degenerate

01:00:18,400 --> 01:00:21,760
yeah this one and call it with the

01:00:21,040 --> 01:00:25,200
container

01:00:21,760 --> 01:00:26,799
name and uh and you get you get the unit

01:00:25,200 --> 01:00:30,640
like that you get the same unit

01:00:26,799 --> 01:00:30,640
uh written back written back to you

01:00:32,880 --> 01:00:39,440
so yes our unit that will run etcd

01:00:36,400 --> 01:00:41,680
and we have a couple of things so

01:00:39,440 --> 01:00:43,200
we still have a hostname set setup or

01:00:41,680 --> 01:00:46,799
pager setup

01:00:43,200 --> 01:00:50,160
and some audit silencing all right so

01:00:46,799 --> 01:00:53,599
let's take this

01:00:50,160 --> 01:00:57,839
fedora corresconfig here and

01:00:53,599 --> 01:00:57,839
copy it in the file

01:00:59,920 --> 01:01:20,610
there we go

01:01:11,550 --> 01:01:20,610
[Music]

01:01:22,839 --> 01:01:25,839
yes

01:01:27,599 --> 01:01:42,160
okay i'm gonna do something else

01:01:39,280 --> 01:01:53,839
should i get something clear all right

01:01:42,160 --> 01:01:53,839
that looks better

01:01:54,799 --> 01:01:59,280
okay so i've got my config here

01:01:59,359 --> 01:02:09,119
i've got my image and i will run fcct

01:02:04,839 --> 01:02:09,119
fixed crazy

01:02:09,520 --> 01:02:18,799
and my config and

01:02:13,119 --> 01:02:21,520
we put it at winners.gen

01:02:18,799 --> 01:02:23,839
all right i've converted it to ignition

01:02:21,520 --> 01:02:29,119
format

01:02:23,839 --> 01:02:29,119
so json or good

01:02:29,200 --> 01:02:36,160
and i will provision

01:02:32,960 --> 01:02:39,520
the system with this config so some

01:02:36,160 --> 01:02:42,240
s linux foo and

01:02:39,520 --> 01:02:48,319
let's go and do the review install and

01:02:42,240 --> 01:03:03,839
just copy everything again

01:02:48,319 --> 01:03:03,839
there we go oh why do i get

01:03:06,160 --> 01:03:10,190
[Music]

01:03:14,520 --> 01:03:17,539
[Music]

01:03:20,000 --> 01:03:24,319
okay so our system has now booted

01:03:22,880 --> 01:03:27,520
successfully

01:03:24,319 --> 01:03:28,480
and it's applied the config so what can

01:03:27,520 --> 01:03:32,000
we see here

01:03:28,480 --> 01:03:33,119
first we can see let me just make a full

01:03:32,000 --> 01:03:36,079
screen

01:03:33,119 --> 01:03:37,839
we can see that we have one failed

01:03:36,079 --> 01:03:39,119
delete so that's all right that's the

01:03:37,839 --> 01:03:42,319
unit that we wrote

01:03:39,119 --> 01:03:45,200
the failure unit here and we get

01:03:42,319 --> 01:03:47,039
a little bit of snippet here at the on

01:03:45,200 --> 01:03:49,039
the console to tell us which unit has

01:03:47,039 --> 01:03:51,839
paid so if i go

01:03:49,039 --> 01:03:53,440
and ask system to steal the status of

01:03:51,839 --> 01:03:58,079
failure

01:03:53,440 --> 01:04:02,240
of course it failed so that's good

01:03:58,079 --> 01:04:07,359
um then we had ssh access setup so

01:04:02,240 --> 01:04:07,359
let's let's go over ssh so i will

01:04:08,000 --> 01:04:15,119
disconnect from this console

01:04:11,200 --> 01:04:18,240
and go over ssh so

01:04:15,119 --> 01:04:20,240
here the system is here and i've added

01:04:18,240 --> 01:04:23,680
my own i

01:04:20,240 --> 01:04:25,280
made a mistake i didn't set my real ssh

01:04:23,680 --> 01:04:27,839
key in the

01:04:25,280 --> 01:04:29,599
config so i'm not going to be to able to

01:04:27,839 --> 01:04:32,720
access this stage so i will have to

01:04:29,599 --> 01:04:32,720
do that right now

01:04:32,960 --> 01:04:39,119
okay

01:04:34,410 --> 01:04:39,119
[Music]

01:04:39,280 --> 01:04:41,839
let's start

01:04:54,640 --> 01:05:00,720
let's destroy my system and reprovision

01:05:06,839 --> 01:05:09,839
it

01:05:10,360 --> 01:05:15,130
[Music]

01:05:18,040 --> 01:05:21,130
[Music]

01:05:24,660 --> 01:05:27,790
[Music]

01:05:30,400 --> 01:05:37,839
hey i'm back up

01:05:33,599 --> 01:05:39,839
here and we can see that we have

01:05:37,839 --> 01:05:42,559
a key here my key has been added to the

01:05:39,839 --> 01:05:47,200
system to the authorized key file

01:05:42,559 --> 01:05:50,559
so i can disconnect and i can directly

01:05:47,200 --> 01:05:54,960
ssh so with the core user and my

01:05:50,559 --> 01:05:58,079
ip which is here to the system

01:05:54,960 --> 01:06:00,319
and i will be authenticated no password

01:05:58,079 --> 01:06:02,880
as i did on set heading and we disable

01:06:00,319 --> 01:06:06,799
password authentication by default so

01:06:02,880 --> 01:06:08,770
all good we got a search access

01:06:06,799 --> 01:06:10,160
we got failed units that's good

01:06:08,770 --> 01:06:13,599
[Music]

01:06:10,160 --> 01:06:18,079
um and let's have a look at our new

01:06:13,599 --> 01:06:20,880
service so we we added a specific

01:06:18,079 --> 01:06:23,440
system that you need that will run a new

01:06:20,880 --> 01:06:26,559
tcg container via padman so

01:06:23,440 --> 01:06:29,039
if i take a look at the status

01:06:26,559 --> 01:06:29,039
of this

01:06:30,160 --> 01:06:34,880
service here so it looks good it's

01:06:32,880 --> 01:06:38,720
active it's running

01:06:34,880 --> 01:06:40,640
and we have the log so it looks good

01:06:38,720 --> 01:06:41,760
one should be running if i can i can

01:06:40,640 --> 01:06:44,000
also

01:06:41,760 --> 01:06:45,039
look at it music pod man itself so if i

01:06:44,000 --> 01:06:47,119
go apartment

01:06:45,039 --> 01:06:48,160
i have to run this as root because the

01:06:47,119 --> 01:06:49,920
system

01:06:48,160 --> 01:06:51,920
system b is running this service as root

01:06:49,920 --> 01:06:52,240
what's my name so yeah we've got here

01:06:51,920 --> 01:06:54,400
the

01:06:52,240 --> 01:06:56,559
container running it's been half a

01:06:54,400 --> 01:06:58,799
minute that's good

01:06:56,559 --> 01:06:58,799
and

01:06:59,599 --> 01:07:03,200
let's uh yeah let's do some etcd let's

01:07:02,480 --> 01:07:06,000
try some

01:07:03,200 --> 01:07:06,319
edc commands so if you don't know about

01:07:06,000 --> 01:07:09,839
it's

01:07:06,319 --> 01:07:12,319
d to make it simple to make it um quick

01:07:09,839 --> 01:07:13,680
now it's this basically a distributed

01:07:12,319 --> 01:07:16,400
database

01:07:13,680 --> 01:07:17,280
that you where you can store key key

01:07:16,400 --> 01:07:20,480
value pairs

01:07:17,280 --> 01:07:22,720
so here we will with the first

01:07:20,480 --> 01:07:25,680
curl command we will tell etcd so we'll

01:07:22,720 --> 01:07:28,799
call it tc and has kids here

01:07:25,680 --> 01:07:29,520
to add a key and name it fedora with the

01:07:28,799 --> 01:07:33,520
value

01:07:29,520 --> 01:07:37,599
fun so if we go this copy here

01:07:33,520 --> 01:07:40,640
and choose this here so it's called to

01:07:37,599 --> 01:07:42,640
our running instance of 6d and hask it

01:07:40,640 --> 01:07:45,520
so in http

01:07:42,640 --> 01:07:47,359
insert itself insert our query and say

01:07:45,520 --> 01:07:49,200
okay i've created this value here with

01:07:47,359 --> 01:07:52,559
this specific index

01:07:49,200 --> 01:07:55,200
very good and let's ask again the value

01:07:52,559 --> 01:07:55,200
from its cd

01:07:55,680 --> 01:07:59,599
so if we called all the keys now in the

01:07:58,000 --> 01:08:02,960
database

01:07:59,599 --> 01:08:06,079
and we go we pipe it through

01:08:02,960 --> 01:08:08,640
gq to make it look a bit pretty so here

01:08:06,079 --> 01:08:11,760
we get all the keys the keys federer

01:08:08,640 --> 01:08:14,720
and after you the one we get so all good

01:08:11,760 --> 01:08:17,039
so our gcdm synth is probably help and

01:08:14,720 --> 01:08:17,039
running

01:08:17,279 --> 01:08:22,000
and that is because fedora is fun right

01:08:22,159 --> 01:08:25,759
maybe we should we should change this

01:08:23,520 --> 01:08:30,080
value and put like pedro chorus

01:08:25,759 --> 01:08:32,000
because like it's photorecursory

01:08:30,080 --> 01:08:34,880
i don't know if dash is our lord in tcd

01:08:32,000 --> 01:08:38,640
keys so we'll have to try that out

01:08:34,880 --> 01:08:40,799
okay is there anything else any question

01:08:38,640 --> 01:08:45,040
in the chat or anything

01:08:40,799 --> 01:08:45,040
for this this section here

01:08:46,000 --> 01:08:49,359
i saw any questions in chat

01:08:49,759 --> 01:08:55,440
as uh as tutorials always do they

01:08:52,880 --> 01:08:57,199
they invoke us to think a little bit

01:08:55,440 --> 01:08:59,120
more critically about what's going on

01:08:57,199 --> 01:09:00,000
and we have some suggestions for some

01:08:59,120 --> 01:09:02,239
features

01:09:00,000 --> 01:09:04,839
so other than that we don't have any uh

01:09:02,239 --> 01:09:08,080
questions about the tutorial itself

01:09:04,839 --> 01:09:09,679
cool all good so let's move on to the

01:09:08,080 --> 01:09:13,120
last one

01:09:09,679 --> 01:09:15,120
um so the last one oh let me just

01:09:13,120 --> 01:09:18,239
destroy my system first

01:09:15,120 --> 01:09:22,560
my running instance so i

01:09:18,239 --> 01:09:26,319
can log out and destroy it

01:09:22,560 --> 01:09:29,520
all good the last one the last total

01:09:26,319 --> 01:09:31,920
is about running updates so

01:09:29,520 --> 01:09:33,199
we've said the one of the one of the

01:09:31,920 --> 01:09:34,960
things that is great about failed

01:09:33,199 --> 01:09:36,640
records is automatic updates

01:09:34,960 --> 01:09:38,400
that you don't have to grow at that they

01:09:36,640 --> 01:09:39,920
will happen automatically

01:09:38,400 --> 01:09:42,880
you can manage how they happen

01:09:39,920 --> 01:09:42,880
automatically and

01:09:43,359 --> 01:09:47,920
it you always get the latest stuff and

01:09:46,239 --> 01:09:49,839
the latest features latest security

01:09:47,920 --> 01:09:52,319
fixes

01:09:49,839 --> 01:09:53,520
so here but we have a chicken egg and

01:09:52,319 --> 01:09:55,679
issue if we've done

01:09:53,520 --> 01:09:56,719
it downloaded the latest version of

01:09:55,679 --> 01:10:00,159
federacares

01:09:56,719 --> 01:10:02,560
to for this tutorial so to make it

01:10:00,159 --> 01:10:04,880
to see it in action we have to go back

01:10:02,560 --> 01:10:07,440
and download another release

01:10:04,880 --> 01:10:09,120
and do the do and everything again to

01:10:07,440 --> 01:10:11,440
have it to

01:10:09,120 --> 01:10:13,280
start it to have it auto update itself

01:10:11,440 --> 01:10:15,520
to see it in action

01:10:13,280 --> 01:10:16,960
um i think the release happens

01:10:15,520 --> 01:10:20,400
approximately every two weeks

01:10:16,960 --> 01:10:22,719
so there there haven't been one yet so

01:10:20,400 --> 01:10:23,840
maybe next week then there will be one

01:10:22,719 --> 01:10:25,840
um

01:10:23,840 --> 01:10:30,400
so yeah that's what i did here so you

01:10:25,840 --> 01:10:32,320
you don't have we don't have anything um

01:10:30,400 --> 01:10:33,760
automatic to download all the release

01:10:32,320 --> 01:10:34,400
because that's not something you usually

01:10:33,760 --> 01:10:36,320
do

01:10:34,400 --> 01:10:39,360
so if you want to do that you will have

01:10:36,320 --> 01:10:42,880
to go to the release page here

01:10:39,360 --> 01:10:44,719
fedora corrects and look at the

01:10:42,880 --> 01:10:46,640
release notes and here you see that's

01:10:44,719 --> 01:10:48,480
the latest release so you just pick the

01:10:46,640 --> 01:10:50,960
one before here

01:10:48,480 --> 01:10:52,719
and you download this one so i don't

01:10:50,960 --> 01:10:55,440
think that there's an easy one to go

01:10:52,719 --> 01:10:56,400
and download this one you'll just have

01:10:55,440 --> 01:11:00,640
to replace

01:10:56,400 --> 01:11:00,640
the versions into all the strings

01:11:03,199 --> 01:11:07,679
yeah so that's what i i did the

01:11:05,760 --> 01:11:08,480
instruction here so that you just have

01:11:07,679 --> 01:11:10,719
to

01:11:08,480 --> 01:11:12,080
replace the release number here and you

01:11:10,719 --> 01:11:14,880
can go and kill

01:11:12,080 --> 01:11:15,780
those two files and i'll do it just

01:11:14,880 --> 01:11:18,859
right now

01:11:15,780 --> 01:11:18,859
[Music]

01:11:21,160 --> 01:11:24,410
[Music]

01:11:25,199 --> 01:11:29,360
let's download this one should be quick

01:11:31,040 --> 01:11:35,040
and let's download the gpg

01:11:38,800 --> 01:11:42,480
up so once you've done that don't forget

01:11:41,600 --> 01:11:46,239
to verify

01:11:42,480 --> 01:11:46,239
that you've download did

01:11:47,360 --> 01:11:55,840
we go and unzip it

01:11:59,120 --> 01:12:02,540
[Music]

01:12:06,880 --> 01:12:09,840
hmm

01:12:18,420 --> 01:12:22,080
[Music]

01:12:20,080 --> 01:12:24,960
and there we go i can just remove the

01:12:22,080 --> 01:12:24,960
one i had before

01:12:25,120 --> 01:12:31,600
and simpler

01:12:28,400 --> 01:12:34,239
i'll just rename it to something with a

01:12:31,600 --> 01:12:37,060
predictable name

01:12:34,239 --> 01:12:38,880
well good so we have now my older image

01:12:37,060 --> 01:12:41,280
[Music]

01:12:38,880 --> 01:12:43,280
let's do this again so we are going to

01:12:41,280 --> 01:12:45,280
write negative graphic again

01:12:43,280 --> 01:12:46,880
well federer chorus config and convert

01:12:45,280 --> 01:12:49,679
it to ignition

01:12:46,880 --> 01:12:50,880
we'll do the auto login setup let's make

01:12:49,679 --> 01:12:54,480
it easier we'll keep

01:12:50,880 --> 01:12:56,239
our ssh key that's great that's easy too

01:12:54,480 --> 01:12:57,679
keep the console login level and we'll

01:12:56,239 --> 01:12:59,600
remove all the units

01:12:57,679 --> 01:13:01,040
because we don't need them for this

01:12:59,600 --> 01:13:03,120
setup so

01:13:01,040 --> 01:13:05,360
that's the config here nothing specific

01:13:03,120 --> 01:13:09,120
we have the authorized key

01:13:05,360 --> 01:13:11,440
the gty config v0 and the silence audit

01:13:09,120 --> 01:13:15,120
so i'll just go over here and just like

01:13:11,440 --> 01:13:20,640
copy one from containers and go with

01:13:15,120 --> 01:13:24,000
dates but that's basically what it is

01:13:20,640 --> 01:13:28,719
and just like remove

01:13:24,000 --> 01:13:33,840
failure unit pxc the member unit

01:13:28,719 --> 01:13:37,040
of them we don't need keep the pager

01:13:33,840 --> 01:13:40,320
and the silence of these are good so

01:13:37,040 --> 01:13:46,560
sip quite simple copy here so

01:13:40,320 --> 01:13:48,880
fccg policy ct

01:13:46,560 --> 01:13:48,880
it's

01:13:50,480 --> 01:13:56,249
and about two updates

01:13:53,220 --> 01:13:56,249
[Music]

01:13:59,360 --> 01:14:06,640
all good we got a new config

01:14:03,520 --> 01:14:08,239
and let's start a system with that so

01:14:06,640 --> 01:14:15,840
there's some system

01:14:08,239 --> 01:14:15,840
sony x4 and let's boot up a system

01:14:23,920 --> 01:14:28,880
here depending on the connection

01:14:25,760 --> 01:14:30,560
depending on how fast the system boosts

01:14:28,880 --> 01:14:33,199
up and everything

01:14:30,560 --> 01:14:34,000
we'll try and be quick and see the

01:14:33,199 --> 01:14:37,440
update

01:14:34,000 --> 01:14:41,280
happening live so to do that

01:14:37,440 --> 01:14:43,679
we watch we will look at two services so

01:14:41,280 --> 01:14:44,480
the first one is the status of the

01:14:43,679 --> 01:14:48,080
system

01:14:44,480 --> 01:14:51,440
yeah os3 status oops

01:14:48,080 --> 01:14:54,159
that is of all s3 so the hibit

01:14:51,440 --> 01:14:55,440
has already started and the then got his

01:14:54,159 --> 01:14:58,320
status so here we have

01:14:55,440 --> 01:14:58,719
then curry it's running so you say okay

01:14:58,320 --> 01:15:01,840
i'm

01:14:58,719 --> 01:15:04,719
initialized and oh there's an update so

01:15:01,840 --> 01:15:06,239
okay i'm going to update the system

01:15:04,719 --> 01:15:10,000
right now

01:15:06,239 --> 01:15:14,400
and if we pull that again

01:15:10,000 --> 01:15:14,400
look at this so

01:15:14,719 --> 01:15:18,159
history status here he says okay it's

01:15:17,040 --> 01:15:21,120
busy we are

01:15:18,159 --> 01:15:22,480
deploying the updates it's working on

01:15:21,120 --> 01:15:23,199
making it available so that's the

01:15:22,480 --> 01:15:26,400
current

01:15:23,199 --> 01:15:26,400
version that we have booted

01:15:26,719 --> 01:15:32,220
and the cathy is still working on it

01:15:28,660 --> 01:15:32,220
[Music]

01:15:32,560 --> 01:15:36,640
so here we'll just have to wait for it

01:15:34,159 --> 01:15:36,640
to happen

01:15:37,120 --> 01:15:40,480
should be quite quick and there we go as

01:15:39,679 --> 01:15:44,719
you've noticed

01:15:40,480 --> 01:15:53,840
my system just rebooted by itself

01:15:44,719 --> 01:15:53,840
and we now have two versions

01:15:56,400 --> 01:16:00,640
okay so let's do the same thing let's

01:15:59,440 --> 01:16:03,679
have a look

01:16:00,640 --> 01:16:06,159
the status so now

01:16:03,679 --> 01:16:09,280
we have two versions we have the old

01:16:06,159 --> 01:16:12,960
version the one we booted the first time

01:16:09,280 --> 01:16:16,159
so from june

01:16:12,960 --> 01:16:19,199
and the one from july here the last one

01:16:16,159 --> 01:16:21,040
the the update and that's good

01:16:19,199 --> 01:16:22,800
we have got a little star here which

01:16:21,040 --> 01:16:25,520
means that this one

01:16:22,800 --> 01:16:26,719
that we are currently running so that's

01:16:25,520 --> 01:16:29,360
the

01:16:26,719 --> 01:16:31,120
the the basics about hos3 is that you

01:16:29,360 --> 01:16:32,960
can have multiple versions

01:16:31,120 --> 01:16:34,239
installed at the same time on system but

01:16:32,960 --> 01:16:36,560
only one running

01:16:34,239 --> 01:16:39,120
and so that's the one running here but

01:16:36,560 --> 01:16:42,480
we still have this version available

01:16:39,120 --> 01:16:45,120
and we can go back to them if we need so

01:16:42,480 --> 01:16:47,360
that's what we will do in a second now

01:16:45,120 --> 01:16:50,320
let me just take what had

01:16:47,360 --> 01:16:51,199
nine yeah so that's the status we've did

01:16:50,320 --> 01:16:54,640
that

01:16:51,199 --> 01:16:55,440
if you got a full egfa terminal and not

01:16:54,640 --> 01:16:58,159
just a

01:16:55,440 --> 01:17:00,080
basic console you will see a nice dot

01:16:58,159 --> 01:17:03,440
here instead of the star

01:17:00,080 --> 01:17:04,960
and yeah so you might be wondering what

01:17:03,440 --> 01:17:06,640
what happened what changed

01:17:04,960 --> 01:17:08,320
between the old version and the new

01:17:06,640 --> 01:17:09,520
version then you can get this

01:17:08,320 --> 01:17:13,040
information with

01:17:09,520 --> 01:17:16,159
um by calling apm os3 and asking for the

01:17:13,040 --> 01:17:18,080
changes so if i do that here

01:17:16,159 --> 01:17:19,199
and hospital changes so there's a lot of

01:17:18,080 --> 01:17:21,840
them

01:17:19,199 --> 01:17:22,960
just go back let's just clean your

01:17:21,840 --> 01:17:26,960
screen maybe

01:17:22,960 --> 01:17:30,159
do it again yeah

01:17:26,960 --> 01:17:32,560
so okay from previous deployment

01:17:30,159 --> 01:17:33,600
to the one that's good that's like a

01:17:32,560 --> 01:17:35,679
good diff

01:17:33,600 --> 01:17:37,360
and we see we've got all those packages

01:17:35,679 --> 01:17:40,400
that have been updated

01:17:37,360 --> 01:17:40,800
for the new version that's good you've

01:17:40,400 --> 01:17:42,400
got

01:17:40,800 --> 01:17:44,719
the exact difference between the

01:17:42,400 --> 01:17:48,640
previous version and the new version

01:17:44,719 --> 01:17:50,320
that's fedrak static classic packages

01:17:48,640 --> 01:17:54,159
and that's the same one you could get in

01:17:50,320 --> 01:17:54,159
on fedora workstation or fedora server

01:17:55,120 --> 01:17:59,120
all right but let's say something

01:17:57,040 --> 01:18:01,760
happened during the update and

01:17:59,120 --> 01:18:03,120
the latest version of whatever package

01:18:01,760 --> 01:18:06,480
that we've got inside

01:18:03,120 --> 01:18:08,640
as a bug and you need to go back

01:18:06,480 --> 01:18:10,400
because you still have to make the

01:18:08,640 --> 01:18:13,360
system do useful stuff

01:18:10,400 --> 01:18:15,280
and sometimes updates are getting in the

01:18:13,360 --> 01:18:16,960
way and you just want to

01:18:15,280 --> 01:18:18,719
to have it working right now while you

01:18:16,960 --> 01:18:21,920
take the time to fix this thing there

01:18:18,719 --> 01:18:23,920
then you can ask mpms3 to roll back and

01:18:21,920 --> 01:18:27,600
to roll back the previous versions

01:18:23,920 --> 01:18:29,920
that's we what we are going to do now

01:18:27,600 --> 01:18:31,199
so here so we we have to be root we'll

01:18:29,920 --> 01:18:36,159
go to appear with suite

01:18:31,199 --> 01:18:36,159
roll back and go ahead reboot we're

01:18:38,840 --> 01:18:43,520
ready

01:18:40,159 --> 01:18:46,320
so it said move one

01:18:43,520 --> 01:18:48,159
one the previous version from the from

01:18:46,320 --> 01:18:55,679
the back to the top

01:18:48,159 --> 01:18:57,840
and rebooting

01:18:55,679 --> 01:18:58,719
so here we go if we have a quick look

01:18:57,840 --> 01:19:02,080
here hey

01:18:58,719 --> 01:19:05,120
we are running the whole division now

01:19:02,080 --> 01:19:06,800
so if i take a look at the status i

01:19:05,120 --> 01:19:08,719
still have two versions

01:19:06,800 --> 01:19:10,159
available in my system but the new

01:19:08,719 --> 01:19:11,840
version is now

01:19:10,159 --> 01:19:14,080
not enabled it's not the one that has

01:19:11,840 --> 01:19:16,800
been booted because we've put it back on

01:19:14,080 --> 01:19:19,840
the whole version

01:19:16,800 --> 01:19:21,120
and so what happens with linkati nikati

01:19:19,840 --> 01:19:24,800
is smart enough

01:19:21,120 --> 01:19:27,040
we can figure out that we made an update

01:19:24,800 --> 01:19:28,560
something happened we had to pull back

01:19:27,040 --> 01:19:32,320
and so now

01:19:28,560 --> 01:19:32,960
he will just okay auto updates are

01:19:32,320 --> 01:19:35,600
enabled

01:19:32,960 --> 01:19:36,000
i'm good we have the new version

01:19:35,600 --> 01:19:37,840
available

01:19:36,000 --> 01:19:39,760
in system but there has been a pullback

01:19:37,840 --> 01:19:42,320
so let's just not

01:19:39,760 --> 01:19:44,080
re-update again right now let's just

01:19:42,320 --> 01:19:45,600
wait for the next update

01:19:44,080 --> 01:19:47,360
and when the next episode happens we

01:19:45,600 --> 01:19:50,320
will just like skip this one

01:19:47,360 --> 01:19:52,159
and go to the next one also interesting

01:19:50,320 --> 01:19:54,000
in this output right here

01:19:52,159 --> 01:19:56,880
you can see starting update agent

01:19:54,000 --> 01:20:00,280
zincati and then the version of zincati

01:19:56,880 --> 01:20:02,640
and you if you paid attention in the

01:20:00,280 --> 01:20:04,159
rpmos3dbdif output earlier you saw that

01:20:02,640 --> 01:20:05,360
zincotti is actually one of the things

01:20:04,159 --> 01:20:08,719
that i got upgraded

01:20:05,360 --> 01:20:11,679
and the new version was 0.0.12.

01:20:08,719 --> 01:20:13,600
so this is kind of proof that the

01:20:11,679 --> 01:20:19,840
rollback actually is using the older

01:20:13,600 --> 01:20:19,840
version of the software

01:20:20,870 --> 01:20:25,840
[Music]

01:20:22,239 --> 01:20:28,880
okay i think i've done everything here

01:20:25,840 --> 01:20:29,520
i don't well we've covered all the

01:20:28,880 --> 01:20:31,520
topics

01:20:29,520 --> 01:20:33,840
if there are any questions we can go

01:20:31,520 --> 01:20:33,840
over that

01:20:38,170 --> 01:20:41,360
[Music]

01:20:39,520 --> 01:20:42,800
micah says i wonder if she doesn't care

01:20:41,360 --> 01:20:46,320
a message about detecting

01:20:42,800 --> 01:20:47,840
uh a rollback oh yeah detecting and

01:20:46,320 --> 01:20:49,840
choosing not to go to

01:20:47,840 --> 01:20:51,120
an update i i think it should i think

01:20:49,840 --> 01:20:54,000
that be a nice

01:20:51,120 --> 01:20:54,639
it probably does if you enable the debug

01:20:54,000 --> 01:20:57,280
output

01:20:54,639 --> 01:20:57,840
um but i think a info level message

01:20:57,280 --> 01:21:01,840
would be

01:20:57,840 --> 01:21:01,840
useful in my opinion

01:21:02,800 --> 01:21:06,480
as far as specific questions like i said

01:21:05,520 --> 01:21:08,480
it looks like we

01:21:06,480 --> 01:21:10,480
don't have any technical issues

01:21:08,480 --> 01:21:11,120
outstanding mostly people just asking

01:21:10,480 --> 01:21:14,560
questions

01:21:11,120 --> 01:21:16,719
about fedora core os features and

01:21:14,560 --> 01:21:17,920
and saying that they're interested in

01:21:16,719 --> 01:21:21,679
using it

01:21:17,920 --> 01:21:24,080
um let's see what time is this 11 23.

01:21:21,679 --> 01:21:24,960
uh we'll just i guess hang out here for

01:21:24,080 --> 01:21:27,199
a little bit

01:21:24,960 --> 01:21:28,000
and see if anybody has any questions if

01:21:27,199 --> 01:21:31,360
somebody wants

01:21:28,000 --> 01:21:33,679
to um hop in and and discuss

01:21:31,360 --> 01:21:34,639
things you know maybe discuss features

01:21:33,679 --> 01:21:38,320
or just ask

01:21:34,639 --> 01:21:41,520
other questions um you know ask to join

01:21:38,320 --> 01:21:43,679
the the session and we can just have a

01:21:41,520 --> 01:21:44,960
you know talk back and forth with audio

01:21:43,679 --> 01:21:46,880
and video

01:21:44,960 --> 01:21:48,960
so feel free to ask to join and we'll

01:21:46,880 --> 01:21:51,040
just pop you into the session we can

01:21:48,960 --> 01:21:54,080
only have nine at a time

01:21:51,040 --> 01:21:57,840
uh presenters so i don't think we'll

01:21:54,080 --> 01:21:57,840
have that problem but maybe

01:22:36,880 --> 01:22:40,320
so i have a question

01:22:43,040 --> 01:22:46,960
uh if anyone wants to get involved with

01:22:45,280 --> 01:22:49,760
fedora course how can one

01:22:46,960 --> 01:22:49,760
get involved

01:22:51,679 --> 01:22:54,080
timothy

01:22:55,679 --> 01:23:02,080
um so i would say

01:22:59,040 --> 01:23:02,639
there are several things to do right now

01:23:02,080 --> 01:23:05,760
and

01:23:02,639 --> 01:23:09,520
so there's a bit for everybody so

01:23:05,760 --> 01:23:13,199
if you're more into uh writing code

01:23:09,520 --> 01:23:15,600
there's there's a lot of prerequisites

01:23:13,199 --> 01:23:18,800
made of a lot of programs so you can

01:23:15,600 --> 01:23:19,679
have a look at the code that we have so

01:23:18,800 --> 01:23:22,960
it's all

01:23:19,679 --> 01:23:25,360
happened there on the github dot press

01:23:22,960 --> 01:23:25,360
org

01:23:26,560 --> 01:23:32,880
and so this is showing well yeah

01:23:29,840 --> 01:23:35,360
so on chorus here so there's

01:23:32,880 --> 01:23:37,120
lots of projects using chorus and and

01:23:35,360 --> 01:23:40,719
things like that maybe

01:23:37,120 --> 01:23:44,080
um which one

01:23:40,719 --> 01:23:47,199
the the project that we use to to

01:23:44,080 --> 01:23:49,440
track the changes like the

01:23:47,199 --> 01:23:51,520
the things that are happening right now

01:23:49,440 --> 01:23:55,120
is the tracker

01:23:51,520 --> 01:23:56,880
so if you go here you'll see all the

01:23:55,120 --> 01:23:58,639
issue that we have

01:23:56,880 --> 01:24:00,639
and potentially the things that need to

01:23:58,639 --> 01:24:03,760
be worked on

01:24:00,639 --> 01:24:07,760
there's a lot of things to do

01:24:03,760 --> 01:24:10,560
um if code in a choosing

01:24:07,760 --> 01:24:11,440
that's specifically fine you can help us

01:24:10,560 --> 01:24:14,800
with the docs

01:24:11,440 --> 01:24:16,480
so you can do uh either try out but

01:24:14,800 --> 01:24:19,920
we've just did the

01:24:16,480 --> 01:24:22,800
the tutorials or just try out the docs

01:24:19,920 --> 01:24:24,560
and see if it works for you so if you go

01:24:22,800 --> 01:24:27,920
to the federal docs

01:24:24,560 --> 01:24:31,600
and you go to federacares here you go

01:24:27,920 --> 01:24:34,560
got all those dogs we have available on

01:24:31,600 --> 01:24:36,480
a lot of platforms so you can grab the

01:24:34,560 --> 01:24:39,840
one you like

01:24:36,480 --> 01:24:41,520
and try it then and configure your

01:24:39,840 --> 01:24:45,120
system to your liking

01:24:41,520 --> 01:24:46,000
to who you want it to be i have a very

01:24:45,120 --> 01:24:48,000
practical

01:24:46,000 --> 01:24:51,440
uh recommendation for if you want to get

01:24:48,000 --> 01:24:51,440
started with fedora core os

01:24:52,080 --> 01:24:59,840
if you happen to have a server

01:24:55,120 --> 01:25:03,760
that is doing something simple

01:24:59,840 --> 01:25:07,199
try try using fedora core os to do that

01:25:03,760 --> 01:25:08,560
you know maybe take your simple

01:25:07,199 --> 01:25:10,480
application or whatever that you're

01:25:08,560 --> 01:25:13,600
running on that particular server for me

01:25:10,480 --> 01:25:16,320
it was a irc client

01:25:13,600 --> 01:25:17,840
and just convert that server to use

01:25:16,320 --> 01:25:20,800
fedora or os

01:25:17,840 --> 01:25:22,159
and because you are using it and it's

01:25:20,800 --> 01:25:25,199
something that you

01:25:22,159 --> 01:25:26,560
actually you know utilize periodically

01:25:25,199 --> 01:25:29,120
if not daily

01:25:26,560 --> 01:25:30,800
you will learn and you will become more

01:25:29,120 --> 01:25:33,280
familiar and you'll become a part of the

01:25:30,800 --> 01:25:33,280
community

01:25:35,440 --> 01:25:39,840
it's it's always this way to to get

01:25:38,480 --> 01:25:40,880
involved is to work on the thing that

01:25:39,840 --> 01:25:43,199
you want to do

01:25:40,880 --> 01:25:44,960
and the things that are bothering you

01:25:43,199 --> 01:25:48,560
and the books that you have

01:25:44,960 --> 01:25:51,840
so of course if you use it

01:25:48,560 --> 01:25:54,560
the easiest will be so yeah

01:25:51,840 --> 01:25:56,159
dogs translation yeah sure go ahead i

01:25:54,560 --> 01:25:56,639
was gonna say we have a question in chat

01:25:56,159 --> 01:26:00,080
about

01:25:56,639 --> 01:26:03,120
um uh what types of

01:26:00,080 --> 01:26:06,719
platforms or hardware is

01:26:03,120 --> 01:26:09,920
fedora coreos tested on like in the ci

01:26:06,719 --> 01:26:13,440
so right now for we

01:26:09,920 --> 01:26:17,199
automatically test on aws and gcp

01:26:13,440 --> 01:26:20,560
and we automatically test uh

01:26:17,199 --> 01:26:23,920
you know vms pretty heavily so like um

01:26:20,560 --> 01:26:27,920
we use qemu

01:26:23,920 --> 01:26:29,280
to test vms but we also use qemu to test

01:26:27,920 --> 01:26:32,480
the bare metal install

01:26:29,280 --> 01:26:33,440
workflow with vms so we won't just start

01:26:32,480 --> 01:26:37,679
the qemu

01:26:33,440 --> 01:26:40,400
image we will also launch the bare metal

01:26:37,679 --> 01:26:42,320
you know the core os installer install

01:26:40,400 --> 01:26:43,679
process to install the bare metal image

01:26:42,320 --> 01:26:46,880
into a vm

01:26:43,679 --> 01:26:49,679
we don't currently automatically test on

01:26:46,880 --> 01:26:51,840
bare metal hardware directly

01:26:49,679 --> 01:26:53,360
that's something that we might look into

01:26:51,840 --> 01:26:55,760
doing soon

01:26:53,360 --> 01:26:57,440
by adding for example like packet or

01:26:55,760 --> 01:26:59,040
something like that

01:26:57,440 --> 01:27:01,920
i guess theoretically we could change

01:26:59,040 --> 01:27:04,080
our aws instances that we used to test

01:27:01,920 --> 01:27:05,280
to cover the bare metal instances that

01:27:04,080 --> 01:27:08,560
they have as well but

01:27:05,280 --> 01:27:08,560
we don't currently do that

01:27:14,719 --> 01:27:19,199
yeah we don't automatically test on

01:27:16,639 --> 01:27:21,199
vmware right now if you know

01:27:19,199 --> 01:27:22,480
if you know some somewhere something

01:27:21,199 --> 01:27:25,679
that is able to give us

01:27:22,480 --> 01:27:27,360
like access to a vmware environment uh

01:27:25,679 --> 01:27:28,880
that we don't have to pay for that we

01:27:27,360 --> 01:27:31,520
could automatically run

01:27:28,880 --> 01:27:32,960
our image against then we would be happy

01:27:31,520 --> 01:27:36,800
to add that to ci

01:27:32,960 --> 01:27:37,440
uh but yeah we don't i i don't know of a

01:27:36,800 --> 01:27:40,000
cloud

01:27:37,440 --> 01:27:41,760
that specifically offers vmware although

01:27:40,000 --> 01:27:44,719
maybe that exists i haven't

01:27:41,760 --> 01:27:45,760
sought it out directly um but yeah

01:27:44,719 --> 01:27:47,440
typically

01:27:45,760 --> 01:27:50,000
at least with the the two cloud

01:27:47,440 --> 01:27:52,080
platforms and we have more coming

01:27:50,000 --> 01:27:53,120
uh that we test on automatically they

01:27:52,080 --> 01:27:56,000
kind of give us

01:27:53,120 --> 01:27:57,920
uh accounts that are unbilled so that we

01:27:56,000 --> 01:27:59,679
can make sure our project works well

01:27:57,920 --> 01:28:02,880
there and then

01:27:59,679 --> 01:28:05,920
in return basically they

01:28:02,880 --> 01:28:07,440
uh you know our os

01:28:05,920 --> 01:28:09,520
works on their platform so that when

01:28:07,440 --> 01:28:12,800
users want it it exists

01:28:09,520 --> 01:28:14,080
it's tested we know it works so we have

01:28:12,800 --> 01:28:16,480
aws and gcp

01:28:14,080 --> 01:28:18,400
right now and we also have a pure

01:28:16,480 --> 01:28:19,120
openstack provider that's coming in the

01:28:18,400 --> 01:28:21,679
future called

01:28:19,120 --> 01:28:22,400
vex host that we'll use to test our

01:28:21,679 --> 01:28:26,239
openstack

01:28:22,400 --> 01:28:30,239
images um but yeah we would love to test

01:28:26,239 --> 01:28:30,239
you know vmware in the same fashion

01:28:37,040 --> 01:28:43,840
yeah david says aws offers a vmware

01:28:41,280 --> 01:28:43,840
that's nice

01:28:52,159 --> 01:28:56,239
david does that mean we can use we can

01:28:55,199 --> 01:29:00,000
use the

01:28:56,239 --> 01:29:02,480
the vmware offering for our current uh

01:29:00,000 --> 01:29:02,480
agreement

01:29:07,120 --> 01:29:11,840
i think

01:29:27,760 --> 01:29:31,600
anybody here that's already using fedora

01:29:29,679 --> 01:29:35,920
core os um

01:29:31,600 --> 01:29:38,639
and want to kind of give a five minute

01:29:35,920 --> 01:29:41,199
spiel for you know how they're using it

01:29:38,639 --> 01:29:53,840
and what they like about it maybe

01:29:41,199 --> 01:29:53,840
joe do you want to come into the room

01:30:01,120 --> 01:30:05,280
i saw something pop up on my moderation

01:30:03,040 --> 01:30:08,239
panel but

01:30:05,280 --> 01:30:10,719
did it i think okay oh yeah i see four

01:30:08,239 --> 01:30:10,719
of nine

01:30:10,800 --> 01:30:16,400
i can't stop sharing maybe

01:30:14,159 --> 01:30:17,199
maybe it takes some oh wait now it says

01:30:16,400 --> 01:30:20,960
three of nine

01:30:17,199 --> 01:30:23,199
oh there you go hey you guys hear me

01:30:20,960 --> 01:30:24,480
yeah we can alright cool sorry for the

01:30:23,199 --> 01:30:27,760
kids in the background

01:30:24,480 --> 01:30:31,040
um i use uh fedora core os

01:30:27,760 --> 01:30:34,159
uh on my work on forum.com

01:30:31,040 --> 01:30:36,960
so we're providing community software

01:30:34,159 --> 01:30:37,679
and the idea is that we want to give a

01:30:36,960 --> 01:30:41,040
stack

01:30:37,679 --> 01:30:43,840
of the software over to clients

01:30:41,040 --> 01:30:45,600
and we're using fedora core os as the

01:30:43,840 --> 01:30:48,320
base os to run

01:30:45,600 --> 01:30:49,600
all the containers with podman so we use

01:30:48,320 --> 01:30:54,800
ignition

01:30:49,600 --> 01:30:57,600
to kind of build the vm stack quickly

01:30:54,800 --> 01:30:58,880
and i the cool the best part about the

01:30:57,600 --> 01:31:01,440
stuff that we talked about

01:30:58,880 --> 01:31:03,840
during the session was iterating quickly

01:31:01,440 --> 01:31:05,440
on your workstation so i use a script a

01:31:03,840 --> 01:31:07,760
bachelor that i wrote that

01:31:05,440 --> 01:31:08,560
just kind of launches a vm on my

01:31:07,760 --> 01:31:10,960
workstation

01:31:08,560 --> 01:31:12,159
with ignition so i can test quickly and

01:31:10,960 --> 01:31:14,199
it takes about

01:31:12,159 --> 01:31:15,360
a minute for things to come up come

01:31:14,199 --> 01:31:18,880
alive

01:31:15,360 --> 01:31:21,679
um and the

01:31:18,880 --> 01:31:22,159
um so i can test quickly and then we

01:31:21,679 --> 01:31:24,000
move

01:31:22,159 --> 01:31:26,000
to managing our infrastructure with

01:31:24,000 --> 01:31:28,560
terraform and all that jazz

01:31:26,000 --> 01:31:30,000
uh and aws right now so and that uses

01:31:28,560 --> 01:31:33,440
fedora core loss so

01:31:30,000 --> 01:31:35,199
the the once you learn how to get used

01:31:33,440 --> 01:31:38,239
to the ignition config

01:31:35,199 --> 01:31:39,760
and launching the software uh

01:31:38,239 --> 01:31:42,159
that you want a lot that you want to you

01:31:39,760 --> 01:31:43,920
know spin up on fedora core s

01:31:42,159 --> 01:31:45,840
it becomes actually really nice because

01:31:43,920 --> 01:31:46,880
everything is declared it's very easy to

01:31:45,840 --> 01:31:47,620
use

01:31:46,880 --> 01:31:50,819
so

01:31:47,620 --> 01:31:50,819
[Music]

01:31:51,360 --> 01:31:55,920
um do you what kind of what kind of

01:31:54,159 --> 01:31:59,440
scale are you guys working

01:31:55,920 --> 01:32:03,840
at with uh forum um well i mean

01:31:59,440 --> 01:32:06,719
it's just launching right now so um

01:32:03,840 --> 01:32:07,600
not much to be honest uh uh we're hoping

01:32:06,719 --> 01:32:08,800
that

01:32:07,600 --> 01:32:11,199
um you know we're gonna be able to

01:32:08,800 --> 01:32:12,960
provide individuals with a free open

01:32:11,199 --> 01:32:15,440
source version of forum

01:32:12,960 --> 01:32:16,080
so you could run it you know on a server

01:32:15,440 --> 01:32:18,800
in your

01:32:16,080 --> 01:32:20,719
basement and launch the forums you know

01:32:18,800 --> 01:32:24,560
our software staff quickly

01:32:20,719 --> 01:32:25,360
um or run it on aws or gcp or digitaloce

01:32:24,560 --> 01:32:26,880
or whatever

01:32:25,360 --> 01:32:28,320
so that's like one of our like principal

01:32:26,880 --> 01:32:29,840
goals and the reason why we chose to

01:32:28,320 --> 01:32:32,639
grow our core os is because

01:32:29,840 --> 01:32:34,080
we want to make sure that our users have

01:32:32,639 --> 01:32:36,880
an updatable

01:32:34,080 --> 01:32:37,760
stack right so we want to be able to

01:32:36,880 --> 01:32:40,480
dictate to them

01:32:37,760 --> 01:32:42,320
when they update not only the software

01:32:40,480 --> 01:32:44,880
that our developers are making but

01:32:42,320 --> 01:32:47,280
also urge them to update fedora coreos

01:32:44,880 --> 01:32:47,280
as well

01:32:48,320 --> 01:32:54,400
thanks joe also authored a

01:32:51,760 --> 01:32:56,719
documentation entry that we are in the

01:32:54,400 --> 01:33:00,400
process of reviewing to support

01:32:56,719 --> 01:33:01,920
uh wireguard vpn um set up pretty easily

01:33:00,400 --> 01:33:04,239
with fedora coreos so

01:33:01,920 --> 01:33:05,600
i look forward to digging into that one

01:33:04,239 --> 01:33:08,639
yeah yeah one of my

01:33:05,600 --> 01:33:09,920
i'm pretty sure all of my

01:33:08,639 --> 01:33:11,520
one of the cool things that i would love

01:33:09,920 --> 01:33:13,199
to see is that you'd be able to launch

01:33:11,520 --> 01:33:16,320
like a wire guard vpn

01:33:13,199 --> 01:33:17,199
with fedora core os quickly right so you

01:33:16,320 --> 01:33:19,760
know you could

01:33:17,199 --> 01:33:21,679
spin up a digital ocean droplet and

01:33:19,760 --> 01:33:22,719
you'd have your vpn configuration ready

01:33:21,679 --> 01:33:24,639
to go

01:33:22,719 --> 01:33:26,560
um and you know enable people to

01:33:24,639 --> 01:33:29,040
securely access the internet

01:33:26,560 --> 01:33:30,560
through wireguard which um you know it's

01:33:29,040 --> 01:33:34,239
kind of the motivation for getting

01:33:30,560 --> 01:33:37,840
wireguard support like for the wg binary

01:33:34,239 --> 01:33:37,840
and fedora powerless

01:33:38,080 --> 01:33:42,000
yep it sounds good

01:33:42,480 --> 01:33:46,400
go ahead i see a question by matthew

01:33:45,040 --> 01:33:48,639
miller

01:33:46,400 --> 01:33:51,199
as a production user would you have any

01:33:48,639 --> 01:33:53,840
problem if there was a count me process

01:33:51,199 --> 01:33:54,719
that just told the same thing dnf count

01:33:53,840 --> 01:33:57,760
me

01:33:54,719 --> 01:33:58,560
does there is a system running fedorwork

01:33:57,760 --> 01:34:00,960
os which

01:33:58,560 --> 01:34:00,960
exists

01:34:01,840 --> 01:34:06,639
uh matthew feel free to to ask to join

01:34:04,639 --> 01:34:10,639
and and we can

01:34:06,639 --> 01:34:14,800
talk with audio too um in general

01:34:10,639 --> 01:34:18,159
uh we have plans for uh what we call the

01:34:14,800 --> 01:34:19,120
pinger service which basically i'm at my

01:34:18,159 --> 01:34:22,560
treadmill desk

01:34:19,120 --> 01:34:24,480
nice um we have plans for a pinger

01:34:22,560 --> 01:34:25,600
service which will give us some more

01:34:24,480 --> 01:34:28,480
information

01:34:25,600 --> 01:34:30,159
uh kind of similar to what container

01:34:28,480 --> 01:34:32,960
linux had in the past

01:34:30,159 --> 01:34:34,080
so for example uh i think it it will

01:34:32,960 --> 01:34:38,159
probably be a little bit

01:34:34,080 --> 01:34:39,440
more um comprehensive than just the

01:34:38,159 --> 01:34:42,560
count me stuff

01:34:39,440 --> 01:34:44,639
one thing that we want to do

01:34:42,560 --> 01:34:47,119
is be able to tell if systems are

01:34:44,639 --> 01:34:50,560
successfully upgrading or not

01:34:47,119 --> 01:34:55,119
um and that will kind of

01:34:50,560 --> 01:34:58,239
help us judge our in our upgrade window

01:34:55,119 --> 01:35:00,400
um you know if in the first hour of the

01:34:58,239 --> 01:35:03,360
upgrade window

01:35:00,400 --> 01:35:04,960
20 of nodes are failing to do an upgrade

01:35:03,360 --> 01:35:06,159
we would like to be able to stop the

01:35:04,960 --> 01:35:10,159
upgrade

01:35:06,159 --> 01:35:10,639
um so yeah i think we have plans for a

01:35:10,159 --> 01:35:12,560
pinger

01:35:10,639 --> 01:35:14,560
but we don't have it quite implemented

01:35:12,560 --> 01:35:16,320
yet um but yeah

01:35:14,560 --> 01:35:18,080
i would like for you to be involved in

01:35:16,320 --> 01:35:21,679
that

01:35:18,080 --> 01:35:21,679
let me read your comments

01:35:22,159 --> 01:35:28,480
oh so okay his question is joe doss

01:35:26,480 --> 01:35:30,560
does something like a pinger service

01:35:28,480 --> 01:35:34,400
raise any concerns for you

01:35:30,560 --> 01:35:36,480
um i mean for for

01:35:34,400 --> 01:35:37,760
when we developed like the free open

01:35:36,480 --> 01:35:39,679
source version of forum

01:35:37,760 --> 01:35:42,000
uh we're gonna disable any telemetry by

01:35:39,679 --> 01:35:43,360
default like we believe that like hey

01:35:42,000 --> 01:35:44,880
if you want to be tracked click this

01:35:43,360 --> 01:35:45,920
button or you know here's how you turn

01:35:44,880 --> 01:35:48,159
it on

01:35:45,920 --> 01:35:49,920
um you know make it opt it you know make

01:35:48,159 --> 01:35:53,119
it opt-in versus opt-out

01:35:49,920 --> 01:35:55,199
um you know for the sas stuff that i'm

01:35:53,119 --> 01:35:56,960
working on for forum.com

01:35:55,199 --> 01:35:58,239
um we'll probably leave it on just

01:35:56,960 --> 01:36:01,600
because like we would want

01:35:58,239 --> 01:36:02,719
you know fedora to know you know what

01:36:01,600 --> 01:36:04,320
our status is

01:36:02,719 --> 01:36:06,080
i'm okay with like providing the

01:36:04,320 --> 01:36:07,840
information back to fedora

01:36:06,080 --> 01:36:09,360
but like i think by default you know you

01:36:07,840 --> 01:36:11,280
need to always turn it you know

01:36:09,360 --> 01:36:12,480
make an opt-in i think that this year

01:36:11,280 --> 01:36:14,239
that's a huge thing

01:36:12,480 --> 01:36:15,679
you know you don't want to go the route

01:36:14,239 --> 01:36:17,360
that other

01:36:15,679 --> 01:36:19,360
linux distributions have done which is

01:36:17,360 --> 01:36:21,920
like kind of like forced

01:36:19,360 --> 01:36:23,360
you know things that are coming at the

01:36:21,920 --> 01:36:26,400
the consumers

01:36:23,360 --> 01:36:27,040
uh like you know ads in your motd or you

01:36:26,400 --> 01:36:31,199
know

01:36:27,040 --> 01:36:34,080
forced tracking yeah i think it's yeah

01:36:31,199 --> 01:36:36,840
i had i think i had a similar opinion to

01:36:34,080 --> 01:36:39,360
begin with about opt-in

01:36:36,840 --> 01:36:41,520
um there there's definitely counter

01:36:39,360 --> 01:36:44,560
arguments against opt-in which is like

01:36:41,520 --> 01:36:49,119
well nobody will do it right uh

01:36:44,560 --> 01:36:51,760
and i think it depends on how it's done

01:36:49,119 --> 01:36:54,159
uh so if i understand correctly i don't

01:36:51,760 --> 01:36:57,199
think the dnf count me

01:36:54,159 --> 01:36:59,280
is opt-in i think it's

01:36:57,199 --> 01:37:00,719
maybe opt-out matthew can probably

01:36:59,280 --> 01:37:04,080
confirm that

01:37:00,719 --> 01:37:07,119
i'm not super familiar with it but

01:37:04,080 --> 01:37:11,119
in general i think the goal is to try

01:37:07,119 --> 01:37:13,040
to try to make it

01:37:11,119 --> 01:37:14,719
as little information as possible but

01:37:13,040 --> 01:37:18,000
also still useful

01:37:14,719 --> 01:37:19,520
um and so things like i think you can

01:37:18,000 --> 01:37:23,679
actually see

01:37:19,520 --> 01:37:27,119
if you look at um

01:37:23,679 --> 01:37:30,080
if you look at the request that is made

01:37:27,119 --> 01:37:33,440
from a system today

01:37:30,080 --> 01:37:35,119
to the update server it actually

01:37:33,440 --> 01:37:38,080
i think it actually tells the update

01:37:35,119 --> 01:37:40,880
server what version i'm currently on

01:37:38,080 --> 01:37:42,719
um and i think that is at least one

01:37:40,880 --> 01:37:43,360
piece of information that we want to

01:37:42,719 --> 01:37:45,840
collect

01:37:43,360 --> 01:37:47,440
we just want to see how up-to-date

01:37:45,840 --> 01:37:51,840
systems are

01:37:47,440 --> 01:37:52,639
um and i'm not sure what else but i

01:37:51,840 --> 01:37:56,080
don't think it

01:37:52,639 --> 01:37:59,679
we plan it to be anything that is

01:37:56,080 --> 01:38:03,119
you know would be considered

01:37:59,679 --> 01:38:05,760
bad but yeah obviously that's a tricky

01:38:03,119 --> 01:38:06,639
tricky route to go down and one that we

01:38:05,760 --> 01:38:09,199
should definitely

01:38:06,639 --> 01:38:12,560
you know have ongoing discussions about

01:38:09,199 --> 01:38:12,560
to make sure that it's done the right

01:38:14,840 --> 01:38:17,840
way

01:38:32,159 --> 01:38:36,320
i do have a a question dusty that maybe

01:38:34,639 --> 01:38:39,920
you could expand on uh

01:38:36,320 --> 01:38:42,800
uh specific around auto updates

01:38:39,920 --> 01:38:44,480
um do you folks have any plans on to how

01:38:42,800 --> 01:38:45,360
to fine tune auto updates right now i

01:38:44,480 --> 01:38:47,040
think one of the

01:38:45,360 --> 01:38:48,960
biggest gotchas that i got as a new

01:38:47,040 --> 01:38:52,080
fedora chorus user is i was

01:38:48,960 --> 01:38:55,199
iterating in my and on my uh

01:38:52,080 --> 01:38:55,840
you know setup and then fedora cores

01:38:55,199 --> 01:38:58,960
updated

01:38:55,840 --> 01:39:01,600
and then zincotti rebooted me like

01:38:58,960 --> 01:39:02,719
i it took me a second to realize why am

01:39:01,600 --> 01:39:05,199
i rebooting

01:39:02,719 --> 01:39:06,960
in the middle of my initial boot right

01:39:05,199 --> 01:39:08,480
um

01:39:06,960 --> 01:39:10,080
is there any plans to make that a little

01:39:08,480 --> 01:39:13,280
bit more user-friendly for people that

01:39:10,080 --> 01:39:15,440
aren't consuming fedora core os

01:39:13,280 --> 01:39:16,880
in a clustered setup like you know for

01:39:15,440 --> 01:39:19,760
individuals that are really

01:39:16,880 --> 01:39:21,199
using it like as like a a vm that

01:39:19,760 --> 01:39:22,719
they're running on like digital ocean or

01:39:21,199 --> 01:39:25,600
something yeah i think there's a two

01:39:22,719 --> 01:39:26,960
there's two things that we've at least

01:39:25,600 --> 01:39:28,159
talked about one of them i know is

01:39:26,960 --> 01:39:31,199
implemented

01:39:28,159 --> 01:39:32,880
um although i don't know how it affects

01:39:31,199 --> 01:39:36,239
the very first run

01:39:32,880 --> 01:39:37,840
i think it should be yeah it's

01:39:36,239 --> 01:39:39,520
it should just apply to the very first

01:39:37,840 --> 01:39:41,440
run as well but

01:39:39,520 --> 01:39:43,679
one of the things that we've done is

01:39:41,440 --> 01:39:47,199
we've implemented something called a

01:39:43,679 --> 01:39:50,159
um a periodic uh

01:39:47,199 --> 01:39:52,159
scheduling strategy for zincotti updates

01:39:50,159 --> 01:39:55,520
which basically says

01:39:52,159 --> 01:39:58,080
you can define a period of time

01:39:55,520 --> 01:39:58,800
during a week or something like that uh

01:39:58,080 --> 01:40:02,560
where

01:39:58,800 --> 01:40:06,239
updates are allowed so if it if it's not

01:40:02,560 --> 01:40:09,280
you know 1am on a saturday morning

01:40:06,239 --> 01:40:12,000
when nobody's using our system

01:40:09,280 --> 01:40:14,080
then don't allow updates and if it is 1

01:40:12,000 --> 01:40:17,840
am to 2 am on a saturday morning

01:40:14,080 --> 01:40:20,960
allow updates right so

01:40:17,840 --> 01:40:22,560
basically you the user can control

01:40:20,960 --> 01:40:24,639
what period of time the updates will

01:40:22,560 --> 01:40:28,000
happen um

01:40:24,639 --> 01:40:28,400
but you know as part of that you might

01:40:28,000 --> 01:40:30,560
not

01:40:28,400 --> 01:40:32,960
be you know part of the original rollout

01:40:30,560 --> 01:40:34,960
window you'll you'll get it whenever

01:40:32,960 --> 01:40:36,239
it comes later right so like whenever

01:40:34,960 --> 01:40:37,600
your period of time that you've

01:40:36,239 --> 01:40:40,719
designated for updates

01:40:37,600 --> 01:40:42,880
is open uh you'll get the update then

01:40:40,719 --> 01:40:44,159
um and the other one i think is uh

01:40:42,880 --> 01:40:44,560
specifically to the problem you were

01:40:44,159 --> 01:40:46,400
having

01:40:44,560 --> 01:40:47,600
were you logged into the system or were

01:40:46,400 --> 01:40:50,400
you just uh

01:40:47,600 --> 01:40:51,440
watching remotely somehow or what i mean

01:40:50,400 --> 01:40:53,199
my first time

01:40:51,440 --> 01:40:54,960
i didn't catch it i didn't realize it

01:40:53,199 --> 01:40:56,239
was updating because i did log in right

01:40:54,960 --> 01:40:58,960
away but you know

01:40:56,239 --> 01:41:00,880
when i was iterating on my my the

01:40:58,960 --> 01:41:02,480
configuration that i was working on

01:41:00,880 --> 01:41:03,600
i would log in right away and then all

01:41:02,480 --> 01:41:04,000
of a sudden they would just reboot and i

01:41:03,600 --> 01:41:05,280
was like

01:41:04,000 --> 01:41:07,280
what the heck is this and then i was

01:41:05,280 --> 01:41:09,119
like oh yeah uh auto

01:41:07,280 --> 01:41:11,760
updates yeah i think there might be a

01:41:09,119 --> 01:41:14,159
feature request to basically say

01:41:11,760 --> 01:41:16,400
if there's anybody that's that's logged

01:41:14,159 --> 01:41:18,239
into the system like either ssh or

01:41:16,400 --> 01:41:19,760
you know logged in on the serial console

01:41:18,239 --> 01:41:22,560
somehow um

01:41:19,760 --> 01:41:24,560
to disallow basically print a wall

01:41:22,560 --> 01:41:26,800
message to the screen and say

01:41:24,560 --> 01:41:28,480
you know i've we've staged an update and

01:41:26,800 --> 01:41:30,880
it's going to reboot when you log out or

01:41:28,480 --> 01:41:32,800
something like that

01:41:30,880 --> 01:41:34,320
i i'll have to track down that feature

01:41:32,800 --> 01:41:36,719
request i think it exists

01:41:34,320 --> 01:41:37,520
but does one of those two things help

01:41:36,719 --> 01:41:39,119
yeah

01:41:37,520 --> 01:41:41,040
i think it does definitely help and i

01:41:39,119 --> 01:41:43,199
also think you know as

01:41:41,040 --> 01:41:45,199
we you know see more individuals

01:41:43,199 --> 01:41:48,239
consuming fedora core os

01:41:45,199 --> 01:41:49,679
um you know for their individual servers

01:41:48,239 --> 01:41:52,960
that are clustered

01:41:49,679 --> 01:41:55,600
uh having some sort of uh

01:41:52,960 --> 01:41:57,199
more user-friendly method of like

01:41:55,600 --> 01:41:58,880
consuming the update like

01:41:57,199 --> 01:42:00,000
you give them control be like yeah i

01:41:58,880 --> 01:42:00,960
don't know what that would look like

01:42:00,000 --> 01:42:04,400
either

01:42:00,960 --> 01:42:05,360
through um i don't really know what the

01:42:04,400 --> 01:42:06,800
point that i'm trying to get

01:42:05,360 --> 01:42:08,480
i think if anything it's just you want

01:42:06,800 --> 01:42:10,159
individuals to say hey this is when i

01:42:08,480 --> 01:42:12,800
want the update to happen

01:42:10,159 --> 01:42:15,040
right obviously i disabled automatic or

01:42:12,800 --> 01:42:17,440
automatic reboots it will stage a

01:42:15,040 --> 01:42:18,239
reboot but then i have to reboot oh

01:42:17,440 --> 01:42:21,199
really okay

01:42:18,239 --> 01:42:22,560
yeah so i think that it just you know

01:42:21,199 --> 01:42:24,320
one of those little gatches of

01:42:22,560 --> 01:42:27,280
learning a new system and i for the

01:42:24,320 --> 01:42:30,239
record i think that forest updates are

01:42:27,280 --> 01:42:31,600
great in a lot of ways because you know

01:42:30,239 --> 01:42:34,400
it's always easy to

01:42:31,600 --> 01:42:36,159
to defer oh i'll i'll update later you

01:42:34,400 --> 01:42:38,480
know that's always the system ins idea

01:42:36,159 --> 01:42:40,080
well i'll schedule this for later so i

01:42:38,480 --> 01:42:40,639
think it's a good it's a good mentality

01:42:40,080 --> 01:42:42,560
to be in

01:42:40,639 --> 01:42:44,239
yeah it's kind of interesting i the

01:42:42,560 --> 01:42:47,440
philosophy behind it

01:42:44,239 --> 01:42:49,199
is one that's easy to reject um and i'll

01:42:47,440 --> 01:42:52,400
go through an anecdote here

01:42:49,199 --> 01:42:54,840
so when i first started at red hat i um

01:42:52,400 --> 01:42:57,360
i worked as a consultant for one company

01:42:54,840 --> 01:43:00,560
uh for a little while

01:42:57,360 --> 01:43:03,760
and they did everything in amazon aws

01:43:00,560 --> 01:43:05,360
they were one of you know 2008 doing

01:43:03,760 --> 01:43:07,679
everything in amazon aws

01:43:05,360 --> 01:43:08,719
right um i didn't start working there

01:43:07,679 --> 01:43:10,320
until later but

01:43:08,719 --> 01:43:12,480
you know they they were a very early

01:43:10,320 --> 01:43:14,880
adopter of aws

01:43:12,480 --> 01:43:16,480
and one thing that they did is you know

01:43:14,880 --> 01:43:19,840
their systems in the office

01:43:16,480 --> 01:43:21,760
were all you know just dumb systems

01:43:19,840 --> 01:43:23,840
be it windows or linux or whatever

01:43:21,760 --> 01:43:26,320
everything that was interesting they did

01:43:23,840 --> 01:43:28,000
on development hosts running in aws and

01:43:26,320 --> 01:43:30,080
people would log into them

01:43:28,000 --> 01:43:32,400
they had their home partition that was

01:43:30,080 --> 01:43:35,840
essentially mounted

01:43:32,400 --> 01:43:39,119
as an ebs volume but

01:43:35,840 --> 01:43:42,400
every week um

01:43:39,119 --> 01:43:44,239
there's like i guess what was there like

01:43:42,400 --> 01:43:47,040
12 different development hosts that

01:43:44,239 --> 01:43:50,000
everybody shared it was a small shop

01:43:47,040 --> 01:43:51,679
but every week like four of them would

01:43:50,000 --> 01:43:54,159
get rotated

01:43:51,679 --> 01:43:56,000
right and they'd get removed and and new

01:43:54,159 --> 01:43:58,800
ones would come up

01:43:56,000 --> 01:43:59,440
and basically what that means is you

01:43:58,800 --> 01:44:02,159
don't

01:43:59,440 --> 01:44:03,920
store anything on that system that's not

01:44:02,159 --> 01:44:06,239
going to get blown away

01:44:03,920 --> 01:44:08,080
after a period of time you know if you

01:44:06,239 --> 01:44:08,880
do some long-running process that you

01:44:08,080 --> 01:44:10,719
need

01:44:08,880 --> 01:44:12,480
um you know you better kind of store

01:44:10,719 --> 01:44:14,400
that your home partition somehow and

01:44:12,480 --> 01:44:15,040
automate bringing it up again on the new

01:44:14,400 --> 01:44:17,679
one

01:44:15,040 --> 01:44:19,600
or you know any sort of state does not

01:44:17,679 --> 01:44:22,639
accumulate over time

01:44:19,600 --> 01:44:24,639
so you know every two weeks or so

01:44:22,639 --> 01:44:25,920
your development host is going away and

01:44:24,639 --> 01:44:26,960
you need to make sure that whatever

01:44:25,920 --> 01:44:30,480
you're doing

01:44:26,960 --> 01:44:32,639
you know by default your philosophy is

01:44:30,480 --> 01:44:34,159
alright i need to save the state of

01:44:32,639 --> 01:44:35,840
whatever i'm doing if it's going to be a

01:44:34,159 --> 01:44:39,199
long-running thing

01:44:35,840 --> 01:44:39,920
and so you know originally you're like

01:44:39,199 --> 01:44:42,400
ah but

01:44:39,920 --> 01:44:44,000
every time i don't want to and then

01:44:42,400 --> 01:44:46,480
after a little while it's just like

01:44:44,000 --> 01:44:48,320
okay yeah i you know my approach to how

01:44:46,480 --> 01:44:50,400
i've built things now

01:44:48,320 --> 01:44:51,920
is that this doesn't matter anymore

01:44:50,400 --> 01:44:52,960
right it's just a different mindset to

01:44:51,920 --> 01:44:55,840
get into

01:44:52,960 --> 01:44:56,560
um so once you get to that point it's

01:44:55,840 --> 01:44:58,639
like

01:44:56,560 --> 01:45:00,639
all right no biggie new update just came

01:44:58,639 --> 01:45:02,880
through i'm good

01:45:00,639 --> 01:45:03,840
yeah it's hard to move from the you know

01:45:02,880 --> 01:45:07,280
keep treating your

01:45:03,840 --> 01:45:09,040
servers as pets versus cattle

01:45:07,280 --> 01:45:10,320
right and i think fedora coreos helps

01:45:09,040 --> 01:45:13,360
you kind of nudge

01:45:10,320 --> 01:45:14,080
closer to the cattle uh side of the

01:45:13,360 --> 01:45:15,840
world

01:45:14,080 --> 01:45:19,679
for running infrastructure which is i

01:45:15,840 --> 01:45:19,679
think really great in a lot of ways

01:45:24,880 --> 01:45:29,520
yeah david says uh don't starve all the

01:45:27,920 --> 01:45:32,000
other systems by doing all

01:45:29,520 --> 01:45:33,520
updates at the same time one thing that

01:45:32,000 --> 01:45:35,920
should help with that david is each

01:45:33,520 --> 01:45:35,920
system

01:45:36,320 --> 01:45:42,000
each system is unique in the rollout

01:45:38,320 --> 01:45:45,360
window so if you don't explicitly define

01:45:42,000 --> 01:45:48,480
you know what your uh risk level

01:45:45,360 --> 01:45:52,239
risk tolerance level is for updates

01:45:48,480 --> 01:45:55,440
then a random one is chosen

01:45:52,239 --> 01:45:57,679
so uh you could get an update

01:45:55,440 --> 01:45:58,480
at one percent of the rollout window for

01:45:57,679 --> 01:46:00,800
one machine

01:45:58,480 --> 01:46:02,880
or sixty percent for another one or

01:46:00,800 --> 01:46:04,960
seventy percent for another one

01:46:02,880 --> 01:46:06,719
um so all of your updates won't update

01:46:04,960 --> 01:46:07,840
at the same time unless you've

01:46:06,719 --> 01:46:10,880
explicitly set

01:46:07,840 --> 01:46:13,679
a risk factor that you

01:46:10,880 --> 01:46:15,440
have chosen to use and then you know if

01:46:13,679 --> 01:46:17,520
it's part of a cluster

01:46:15,440 --> 01:46:19,760
uh the cluster itself can kind of

01:46:17,520 --> 01:46:22,560
control updates we have um

01:46:19,760 --> 01:46:24,480
a tool called fleet lock which i haven't

01:46:22,560 --> 01:46:28,400
used and probably needs a little bit of

01:46:24,480 --> 01:46:31,040
of you know more thought and love

01:46:28,400 --> 01:46:32,639
to kind of make that happen but the

01:46:31,040 --> 01:46:36,480
concept there is

01:46:32,639 --> 01:46:38,719
your cluster uh can help control

01:46:36,480 --> 01:46:40,000
how many nodes are down at a particular

01:46:38,719 --> 01:46:42,400
time for an update and stuff

01:46:40,000 --> 01:46:42,400
like that

01:46:48,639 --> 01:46:55,360
sorry air lock you're right mica airlock

01:46:52,000 --> 01:46:55,360
i know why i called it fleet law

01:47:05,199 --> 01:47:10,400
nasir are you talking to us you're muted

01:47:15,520 --> 01:47:19,520
can't hear you you might want to use the

01:47:17,280 --> 01:47:19,520
chat

01:47:20,239 --> 01:47:26,960
had my mic disabled

01:47:23,360 --> 01:47:36,159
so what i was saying was uh we have just

01:47:26,960 --> 01:47:40,480
one minute left if i'm like

01:47:36,159 --> 01:47:43,679
yep uh so hopefully everybody enjoyed uh

01:47:40,480 --> 01:47:44,400
everybody enjoyed the tutorials and um

01:47:43,679 --> 01:47:46,000
if you would

01:47:44,400 --> 01:47:47,600
please do share with other people who

01:47:46,000 --> 01:47:50,000
are interested or just

01:47:47,600 --> 01:47:52,000
you know on social media the tutorials

01:47:50,000 --> 01:47:53,520
are in our documentation

01:47:52,000 --> 01:47:55,360
in the past what we've done is we've

01:47:53,520 --> 01:47:56,480
made like a blog post or something like

01:47:55,360 --> 01:47:59,520
that

01:47:56,480 --> 01:48:01,280
but i feel like the work that we've done

01:47:59,520 --> 01:48:02,560
this time to get them into our actual

01:48:01,280 --> 01:48:05,280
documentation

01:48:02,560 --> 01:48:06,400
will go a long way for people

01:48:05,280 --> 01:48:08,719
discovering them

01:48:06,400 --> 01:48:11,040
and you know making them more easily

01:48:08,719 --> 01:48:14,000
accessible so please share those

01:48:11,040 --> 01:48:15,040
and you know if you find issues open

01:48:14,000 --> 01:48:17,040
pull requests we

01:48:15,040 --> 01:48:19,840
we welcome contributions so thank you so

01:48:17,040 --> 01:48:19,840

YouTube URL: https://www.youtube.com/watch?v=tSusAbbdB7s


