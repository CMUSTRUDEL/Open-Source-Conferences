Title: Automate OS Image Build Pipelines with Ansible
Publication date: 2020-08-31
Playlist: Nest with Fedora 2020
Description: 
	We will cover building an image for use on Amazon EC2, using ephemeral resources.

Presented at Nest With Fedora 2020.
Captions: 
	00:00:02,000 --> 00:00:06,640
uh welcome to

00:00:03,520 --> 00:00:07,200
um some some of the work that i've been

00:00:06,640 --> 00:00:09,599
doing

00:00:07,200 --> 00:00:10,719
i just wanted that i've been doing with

00:00:09,599 --> 00:00:13,440
um

00:00:10,719 --> 00:00:14,799
the community projects has and has

00:00:13,440 --> 00:00:17,119
gotten me excited about

00:00:14,799 --> 00:00:18,800
working more and getting deeply more

00:00:17,119 --> 00:00:22,720
deeply involved

00:00:18,800 --> 00:00:23,199
not just with with the fedora work but

00:00:22,720 --> 00:00:24,800
also

00:00:23,199 --> 00:00:27,359
just lots of things that are associated

00:00:24,800 --> 00:00:29,679
with the open source and building images

00:00:27,359 --> 00:00:30,400
uh creating things that other people can

00:00:29,679 --> 00:00:33,440
use

00:00:30,400 --> 00:00:34,960
it's been really fun for me i'm a

00:00:33,440 --> 00:00:37,040
solutions architect so

00:00:34,960 --> 00:00:38,239
just a little bit about me i'm a partner

00:00:37,040 --> 00:00:42,800
solutions architect for

00:00:38,239 --> 00:00:42,800
amazon and i spend my day time uh

00:00:43,280 --> 00:00:46,719
see if my slides will advance

00:00:46,879 --> 00:00:51,440
there we go i spend my day time um

00:00:49,920 --> 00:00:54,000
[Music]

00:00:51,440 --> 00:00:56,559
working on red hat solutions for amazon

00:00:54,000 --> 00:00:59,199
and amazon web services customers

00:00:56,559 --> 00:00:59,680
so uh this is pretty dear to my heart

00:00:59,199 --> 00:01:03,520
right

00:00:59,680 --> 00:01:05,119
um and uh before i worked at amazon i

00:01:03,520 --> 00:01:07,840
worked at red hat

00:01:05,119 --> 00:01:09,680
my first computer was a zx80 that i uh

00:01:07,840 --> 00:01:11,600
soldered together by my

00:01:09,680 --> 00:01:13,439
well with my own hands and with a lot of

00:01:11,600 --> 00:01:16,960
guidance from my dad

00:01:13,439 --> 00:01:20,560
um and i live

00:01:16,960 --> 00:01:22,880
pretty much my whole day in org mode and

00:01:20,560 --> 00:01:24,799
trying to make everything more like

00:01:22,880 --> 00:01:28,000
literate programming

00:01:24,799 --> 00:01:31,759
than it probably should be um

00:01:28,000 --> 00:01:34,799
so this was an exciting thing for me um

00:01:31,759 --> 00:01:39,119
to uh to sort of take on as a

00:01:34,799 --> 00:01:41,920
as a quest um i wanted to build

00:01:39,119 --> 00:01:43,280
on you know primary goal is i wanted to

00:01:41,920 --> 00:01:45,840
build with ansible on

00:01:43,280 --> 00:01:46,880
amazon web services and to determine

00:01:45,840 --> 00:01:48,799
where things were

00:01:46,880 --> 00:01:51,600
you know where the rough edges were and

00:01:48,799 --> 00:01:51,600
how i could really

00:01:52,079 --> 00:01:56,000
communicate that back to the ansible

00:01:54,240 --> 00:01:58,399
team uh people like adam

00:01:56,000 --> 00:02:00,000
and jill who are doing really great work

00:01:58,399 --> 00:02:03,280
uh around

00:02:00,000 --> 00:02:05,200
uh the development while uh this uh

00:02:03,280 --> 00:02:06,960
whole new thing you know with

00:02:05,200 --> 00:02:10,720
collections is happening it's uh

00:02:06,960 --> 00:02:13,760
it's a much it's a much more uh

00:02:10,720 --> 00:02:16,879
um it's a complicated time right

00:02:13,760 --> 00:02:19,200
so and then i wanted to uh

00:02:16,879 --> 00:02:21,040
demonstrate to myself and maybe even to

00:02:19,200 --> 00:02:24,239
others that i could participate

00:02:21,040 --> 00:02:25,520
in an iterative proc in iterative

00:02:24,239 --> 00:02:28,239
progress

00:02:25,520 --> 00:02:29,360
uh in a way that as an architect i don't

00:02:28,239 --> 00:02:32,959
necessarily get to

00:02:29,360 --> 00:02:34,879
uh spend a lot of time doing so um

00:02:32,959 --> 00:02:36,080
i'm sorry i'm glad to see michelle that

00:02:34,879 --> 00:02:38,160
you're you're you

00:02:36,080 --> 00:02:39,440
you also enjoy illiterate program it

00:02:38,160 --> 00:02:42,319
makes me very happy

00:02:39,440 --> 00:02:44,000
and high neck um but i have some

00:02:42,319 --> 00:02:45,760
personal roadblocks i feel like because

00:02:44,000 --> 00:02:49,040
i spend a lot of my time

00:02:45,760 --> 00:02:52,080
uh i spent a lot of my time working on

00:02:49,040 --> 00:02:53,519
um solutions that are kind of key in the

00:02:52,080 --> 00:02:56,400
business area and or

00:02:53,519 --> 00:02:58,400
in uh and not as technical as i would

00:02:56,400 --> 00:03:00,159
like them to be and then i rely heavily

00:02:58,400 --> 00:03:04,640
on

00:03:00,159 --> 00:03:08,000
strong engineers like neil like nick

00:03:04,640 --> 00:03:10,800
like jonathan to to um to help me

00:03:08,000 --> 00:03:11,280
sort of re uh redirect the guidelines

00:03:10,800 --> 00:03:13,519
around

00:03:11,280 --> 00:03:15,360
projects that i'm working on and so this

00:03:13,519 --> 00:03:17,120
was an opportunity for me to kind of dig

00:03:15,360 --> 00:03:20,080
into the toolbox

00:03:17,120 --> 00:03:20,400
and and sort of feel around and find out

00:03:20,080 --> 00:03:24,000
what

00:03:20,400 --> 00:03:27,360
how these things really fit together

00:03:24,000 --> 00:03:30,239
so there's my primary goal but then as a

00:03:27,360 --> 00:03:30,239
secondary goal

00:03:30,480 --> 00:03:34,959
i wanted to really uh jump out there and

00:03:32,959 --> 00:03:37,440
make this work for a real project

00:03:34,959 --> 00:03:38,400
right and the real project that i chose

00:03:37,440 --> 00:03:42,400
was to

00:03:38,400 --> 00:03:46,319
uh to build out um two things one was a

00:03:42,400 --> 00:03:47,519
um was a uh centos centos-based image

00:03:46,319 --> 00:03:49,599
that i could then

00:03:47,519 --> 00:03:50,640
publish into the aws marketplace in

00:03:49,599 --> 00:03:52,799
china

00:03:50,640 --> 00:03:55,200
that would match the requirements of the

00:03:52,799 --> 00:03:56,159
community and be available for chinese

00:03:55,200 --> 00:03:58,720
customers

00:03:56,159 --> 00:04:00,000
where we didn't have a presence at that

00:03:58,720 --> 00:04:02,560
at that point

00:04:00,000 --> 00:04:03,120
um and obviously you know working with

00:04:02,560 --> 00:04:06,080
the team

00:04:03,120 --> 00:04:07,760
to be uh to make this a part of our part

00:04:06,080 --> 00:04:10,560
of the process

00:04:07,760 --> 00:04:12,159
and so here i am with my goals i want to

00:04:10,560 --> 00:04:14,879
build a competency enhancement

00:04:12,159 --> 00:04:16,720
and related build process on the

00:04:14,879 --> 00:04:19,840
distribution of my choosing and that's

00:04:16,720 --> 00:04:21,519
namely you know vis-a-vis fedora for all

00:04:19,840 --> 00:04:23,280
of us who participate here

00:04:21,519 --> 00:04:25,440
i wanted to figure out a lot more about

00:04:23,280 --> 00:04:27,840
the use of collections and where

00:04:25,440 --> 00:04:28,720
the aws collections both community and

00:04:27,840 --> 00:04:31,680
the ones that

00:04:28,720 --> 00:04:32,960
uh adam and jill and uh i can't remember

00:04:31,680 --> 00:04:34,080
there's a couple of others who are who

00:04:32,960 --> 00:04:36,160
are supporting this

00:04:34,080 --> 00:04:37,600
beyond just the community at large

00:04:36,160 --> 00:04:38,400
that's doing the majority of the work

00:04:37,600 --> 00:04:40,720
for

00:04:38,400 --> 00:04:42,400
a you know for the aws so that i had a

00:04:40,720 --> 00:04:44,639
very a strong voice

00:04:42,400 --> 00:04:46,960
internally to talk about this with our

00:04:44,639 --> 00:04:49,759
engineering teams

00:04:46,960 --> 00:04:51,440
and then uh finding entryway into the

00:04:49,759 --> 00:04:53,280
tools and techniques that are being used

00:04:51,440 --> 00:04:56,800
by my friends like dusty

00:04:53,280 --> 00:04:59,360
uh and his teams and luca to do the work

00:04:56,800 --> 00:05:00,320
and maybe make myself even a better

00:04:59,360 --> 00:05:02,800
candidate for

00:05:00,320 --> 00:05:03,680
helping them to get their solutions

00:05:02,800 --> 00:05:06,720
working

00:05:03,680 --> 00:05:08,880
uh than i am today um so

00:05:06,720 --> 00:05:10,880
and to continue working on that uh over

00:05:08,880 --> 00:05:13,280
time so as

00:05:10,880 --> 00:05:14,000
issues evolve you know editing this i

00:05:13,280 --> 00:05:16,240
want to have

00:05:14,000 --> 00:05:17,039
a couple you know this centos image and

00:05:16,240 --> 00:05:19,600
then

00:05:17,039 --> 00:05:21,360
i want to be able to publish the the

00:05:19,600 --> 00:05:25,120
microsoft sql

00:05:21,360 --> 00:05:25,440
image process so that anyone can follow

00:05:25,120 --> 00:05:28,800
it

00:05:25,440 --> 00:05:32,080
and it can be be a

00:05:28,800 --> 00:05:33,600
a guideline for how to do this in the

00:05:32,080 --> 00:05:36,320
real world but then also

00:05:33,600 --> 00:05:38,400
to be the exact same as the process

00:05:36,320 --> 00:05:41,919
that's being used internally

00:05:38,400 --> 00:05:43,919
for for deploying those things

00:05:41,919 --> 00:05:47,199
for the for the rest of the world to use

00:05:43,919 --> 00:05:47,199
in the context of aws

00:05:48,479 --> 00:05:53,759
and then uh man my pipeline skills

00:05:51,520 --> 00:05:54,800
are bad so this was a super exciting

00:05:53,759 --> 00:05:57,600
opportunity for me

00:05:54,800 --> 00:05:58,319
to get to understand more about the way

00:05:57,600 --> 00:06:01,280
that

00:05:58,319 --> 00:06:02,000
uh jenkins works obviously jenkins and i

00:06:01,280 --> 00:06:04,000
have

00:06:02,000 --> 00:06:05,520
have struggled and ansible and i have

00:06:04,000 --> 00:06:08,720
struggled together

00:06:05,520 --> 00:06:10,400
over the course of this and and

00:06:08,720 --> 00:06:12,240
to bring some awareness to some of the

00:06:10,400 --> 00:06:16,319
best practices around the system that i

00:06:12,240 --> 00:06:16,319
that i'm finding out from doing this

00:06:18,840 --> 00:06:25,600
um so here's my milestones

00:06:22,080 --> 00:06:27,919
um build an amazon ec2 image using image

00:06:25,600 --> 00:06:30,000
builder so image builder is sort of the

00:06:27,919 --> 00:06:31,680
the focus and i know neil you and i have

00:06:30,000 --> 00:06:32,720
had some conversations around this in

00:06:31,680 --> 00:06:35,280
the past but

00:06:32,720 --> 00:06:35,840
you know with the work around os build

00:06:35,280 --> 00:06:37,759
uh

00:06:35,840 --> 00:06:39,520
and the way that it's functioning uh

00:06:37,759 --> 00:06:41,280
today i'm super excited to

00:06:39,520 --> 00:06:43,039
you know to sort of stay on that track

00:06:41,280 --> 00:06:43,840
and try to bring that up not only

00:06:43,039 --> 00:06:47,280
through the

00:06:43,840 --> 00:06:47,600
uh through the fedora work but also into

00:06:47,280 --> 00:06:51,440
the

00:06:47,600 --> 00:06:52,960
red hat work and then on to on to centos

00:06:51,440 --> 00:06:55,520
where i feel like a lot of this work is

00:06:52,960 --> 00:06:57,039
being done um and to be able to do this

00:06:55,520 --> 00:07:01,440
all in the context of

00:06:57,039 --> 00:07:03,039
um sort of a cloud native style right

00:07:01,440 --> 00:07:04,880
and then ultimately deliver this

00:07:03,039 --> 00:07:08,960
artifact that is the

00:07:04,880 --> 00:07:12,000
the base army for for use um

00:07:08,960 --> 00:07:15,199
and and a process for reviewing that

00:07:12,000 --> 00:07:16,720
um in such a way that both the the build

00:07:15,199 --> 00:07:19,759
itself is

00:07:16,720 --> 00:07:20,400
discoverable uh just like it is in koji

00:07:19,759 --> 00:07:23,440
and then

00:07:20,400 --> 00:07:24,319
um to be able to determine how to

00:07:23,440 --> 00:07:26,479
improve

00:07:24,319 --> 00:07:28,080
the real processes which are the ones

00:07:26,479 --> 00:07:31,199
that are being used by

00:07:28,080 --> 00:07:32,319
uh the fedora engine rail engine uh the

00:07:31,199 --> 00:07:37,919
cpe team

00:07:32,319 --> 00:07:37,919
today so i got started

00:07:38,080 --> 00:07:44,240
um and i started working

00:07:41,520 --> 00:07:45,120
on this in sort of an iterative way uh

00:07:44,240 --> 00:07:47,520
starting with

00:07:45,120 --> 00:07:48,479
you know just the the hand holding and

00:07:47,520 --> 00:07:50,879
the the

00:07:48,479 --> 00:07:51,759
figuring out how things work installing

00:07:50,879 --> 00:07:53,680
things

00:07:51,759 --> 00:07:55,759
over and over again to figure out how i

00:07:53,680 --> 00:07:59,840
could um i could um

00:07:55,759 --> 00:07:59,840
better uh

00:08:01,039 --> 00:08:05,440
better build my process in but there are

00:08:03,919 --> 00:08:08,080
so many choices

00:08:05,440 --> 00:08:08,960
um out there in the world on in what to

00:08:08,080 --> 00:08:11,120
you know what to do

00:08:08,960 --> 00:08:12,160
what tools to incorporate and how to

00:08:11,120 --> 00:08:14,160
test and what

00:08:12,160 --> 00:08:15,280
what qa looks like i really had to

00:08:14,160 --> 00:08:17,440
narrow it down and

00:08:15,280 --> 00:08:19,520
narrow it down quickly became very key

00:08:17,440 --> 00:08:21,120
to me so finding out

00:08:19,520 --> 00:08:22,800
finding the tools that i wanted to work

00:08:21,120 --> 00:08:24,639
with

00:08:22,800 --> 00:08:26,080
quickly instead of figuring out trying

00:08:24,639 --> 00:08:28,800
to figure out what was the absolute best

00:08:26,080 --> 00:08:32,720
tool was i thought the right way to go

00:08:28,800 --> 00:08:32,720
so i settled on a couple of things

00:08:32,880 --> 00:08:42,640
i think it just went backwards

00:08:40,240 --> 00:08:42,640
i did

00:08:44,399 --> 00:08:56,000
i go go forward two slides now

00:08:54,560 --> 00:08:57,839
give it a second probably should have

00:08:56,000 --> 00:09:00,320
done this in a pdf sorry about that

00:08:57,839 --> 00:09:00,320
everyone

00:09:01,920 --> 00:09:07,200
okay yeah there's a lot of choice out

00:09:05,760 --> 00:09:08,000
there and just inside of the fedora

00:09:07,200 --> 00:09:11,120
teams you know

00:09:08,000 --> 00:09:11,120
there's a lot of things that

00:09:11,200 --> 00:09:18,000
that are are very different um

00:09:14,240 --> 00:09:19,440
and and extremely malleable right

00:09:18,000 --> 00:09:22,160
very different kinds of tools that i

00:09:19,440 --> 00:09:25,440
could have used so choosing these was

00:09:22,160 --> 00:09:26,959
was something that was was a was just an

00:09:25,440 --> 00:09:29,279
arbitrary choice and i

00:09:26,959 --> 00:09:30,800
kind of want to make make that uh more

00:09:29,279 --> 00:09:32,560
or less clear

00:09:30,800 --> 00:09:34,839
but i had some goals in mind so the

00:09:32,560 --> 00:09:37,839
goals kind of help

00:09:34,839 --> 00:09:37,839
um

00:09:38,160 --> 00:09:41,920
keeping the community project

00:09:39,839 --> 00:09:45,120
affiliation was really important

00:09:41,920 --> 00:09:46,240
and um and making sure that i was using

00:09:45,120 --> 00:09:48,640
things that i could see

00:09:46,240 --> 00:09:50,880
were a part of you know at least a

00:09:48,640 --> 00:09:54,800
component part of the deployment process

00:09:50,880 --> 00:09:57,120
that everyone was using around me

00:09:54,800 --> 00:09:57,839
was something that i wanted to keep in

00:09:57,120 --> 00:10:01,600
mind and

00:09:57,839 --> 00:10:03,120
and make make a part of my decisions

00:10:01,600 --> 00:10:04,959
i also wanted to be able to read

00:10:03,120 --> 00:10:08,079
whatever it was that i was using so

00:10:04,959 --> 00:10:08,959
so so important enough that it be open

00:10:08,079 --> 00:10:11,200
source

00:10:08,959 --> 00:10:13,200
because that was a part of my process

00:10:11,200 --> 00:10:14,880
was figuring out how these things work

00:10:13,200 --> 00:10:16,480
and then filing bugs on those things

00:10:14,880 --> 00:10:17,120
being able to patch them and look at

00:10:16,480 --> 00:10:20,079
them

00:10:17,120 --> 00:10:21,360
and uh image builder and i uh had a lot

00:10:20,079 --> 00:10:22,880
of those and i marked

00:10:21,360 --> 00:10:24,720
a lot of things as bugs and then i

00:10:22,880 --> 00:10:26,720
marked a lot of things as not a bug

00:10:24,720 --> 00:10:28,880
after i figured out what i was doing

00:10:26,720 --> 00:10:30,959
wrong but then i got to be a part of the

00:10:28,880 --> 00:10:33,839
of

00:10:30,959 --> 00:10:35,760
um a lot of the test patches and

00:10:33,839 --> 00:10:36,320
figuring out what was going on upstream

00:10:35,760 --> 00:10:39,680
and

00:10:36,320 --> 00:10:42,480
brian lane helped me a lot uh to um

00:10:39,680 --> 00:10:44,160
to get to the next steps on on building

00:10:42,480 --> 00:10:46,959
images with the uh

00:10:44,160 --> 00:10:48,560
with uh image builder and some of the

00:10:46,959 --> 00:10:52,320
things that i learned

00:10:48,560 --> 00:10:53,920
um uh like a pr applied applied directly

00:10:52,320 --> 00:10:55,360
to those downstream commercial goals

00:10:53,920 --> 00:10:58,720
that i have like the

00:10:55,360 --> 00:11:01,200
like building uh rail with uh microsoft

00:10:58,720 --> 00:11:03,600
sql on it

00:11:01,200 --> 00:11:05,120
and and i found some things that were

00:11:03,600 --> 00:11:07,440
really interesting about the building

00:11:05,120 --> 00:11:09,440
build process that uh i've i've

00:11:07,440 --> 00:11:11,760
implemented in the context here

00:11:09,440 --> 00:11:13,920
on one of those that i i don't have

00:11:11,760 --> 00:11:15,519
really illustrated in my slides but i

00:11:13,920 --> 00:11:16,079
wanted to talk about a little bit is

00:11:15,519 --> 00:11:19,680
that

00:11:16,079 --> 00:11:22,959
is the the ability to to provide a

00:11:19,680 --> 00:11:27,040
group of scripts as from

00:11:22,959 --> 00:11:27,040
from the from a get repository

00:11:27,360 --> 00:11:32,480
and present them as an rpm and

00:11:30,399 --> 00:11:33,760
dump them into a specific location and

00:11:32,480 --> 00:11:36,880
then execute on that

00:11:33,760 --> 00:11:38,560
in the in the context of the of the

00:11:36,880 --> 00:11:42,000
blueprint

00:11:38,560 --> 00:11:44,880
um that was uh that was a

00:11:42,000 --> 00:11:46,800
huge assistant and when i looked when i

00:11:44,880 --> 00:11:50,639
was looking into the concepts of

00:11:46,800 --> 00:11:52,720
of building the um the sql images

00:11:50,639 --> 00:11:54,000
because i couldn't figure out how i was

00:11:52,720 --> 00:11:56,399
going to get all of that script

00:11:54,000 --> 00:11:57,519
information material onto a system that

00:11:56,399 --> 00:12:00,639
was

00:11:57,519 --> 00:12:02,160
that was um freshly installed without

00:12:00,639 --> 00:12:04,000
doing some sort of uh

00:12:02,160 --> 00:12:05,519
you know doing some sort of a crazy

00:12:04,000 --> 00:12:07,279
route or something else that didn't feel

00:12:05,519 --> 00:12:08,800
like it was going to fit with the cli

00:12:07,279 --> 00:12:12,240
commands

00:12:08,800 --> 00:12:15,040
or or i mean even the cockpit model for

00:12:12,240 --> 00:12:17,120
for doing the deployments uh but i was

00:12:15,040 --> 00:12:19,279
trying to stick to the cli commands or

00:12:17,120 --> 00:12:21,040
or anything that i could script in uh in

00:12:19,279 --> 00:12:22,399
the context of python so that i could

00:12:21,040 --> 00:12:25,519
move forward with the

00:12:22,399 --> 00:12:28,399
the deployment um hands off and

00:12:25,519 --> 00:12:31,120
keep it moving in the long running

00:12:28,399 --> 00:12:31,120
configuration

00:12:31,440 --> 00:12:38,560
so um so what does it look like

00:12:35,440 --> 00:12:42,639
um the

00:12:38,560 --> 00:12:45,360
uh so first off um

00:12:42,639 --> 00:12:46,800
aws code pipeline became a component

00:12:45,360 --> 00:12:48,639
part for me because

00:12:46,800 --> 00:12:50,399
and well i'll talk about this later so

00:12:48,639 --> 00:12:54,240
i'll talk about that part of it later

00:12:50,399 --> 00:12:56,959
um so first off uh the ansible scripts

00:12:54,240 --> 00:12:58,399
are part of the um part of the

00:12:56,959 --> 00:13:01,120
deployment

00:12:58,399 --> 00:13:02,320
that's pretty much the trigger and it

00:13:01,120 --> 00:13:05,440
hooks back to

00:13:02,320 --> 00:13:08,160
the the github repository

00:13:05,440 --> 00:13:09,920
through push events to the code pipeline

00:13:08,160 --> 00:13:10,639
the ansible script runs and the first

00:13:09,920 --> 00:13:13,519
thing that

00:13:10,639 --> 00:13:15,200
that happens with the ansible script and

00:13:13,519 --> 00:13:16,320
of course this is a chicken in the egg

00:13:15,200 --> 00:13:18,160
problem

00:13:16,320 --> 00:13:20,079
the ansible script has to run once

00:13:18,160 --> 00:13:21,519
manually so my goal was to have

00:13:20,079 --> 00:13:23,200
something that i could run once

00:13:21,519 --> 00:13:25,040
it would build the infrastructure that i

00:13:23,200 --> 00:13:27,839
need and then once that

00:13:25,040 --> 00:13:28,800
infrastructure was was built i would be

00:13:27,839 --> 00:13:31,440
able to

00:13:28,800 --> 00:13:34,480
um i'd be able to maintain it with the

00:13:31,440 --> 00:13:38,160
same scripts um

00:13:34,480 --> 00:13:40,880
so uh so the so first the first off the

00:13:38,160 --> 00:13:42,720
code pipeline uh there are ansible

00:13:40,880 --> 00:13:44,320
modules to support building the code

00:13:42,720 --> 00:13:47,920
pipeline itself

00:13:44,320 --> 00:13:48,560
uh once i mean if you you have to go in

00:13:47,920 --> 00:13:51,519
and

00:13:48,560 --> 00:13:52,880
think with the the permissions for uh

00:13:51,519 --> 00:13:54,959
the push events if

00:13:52,880 --> 00:13:56,959
you want to use the push events you'll

00:13:54,959 --> 00:13:59,360
have to do the authorization from

00:13:56,959 --> 00:14:01,120
github to the to the code pipeline so

00:13:59,360 --> 00:14:04,959
that it can see your

00:14:01,120 --> 00:14:08,480
um so it has access to the repositories

00:14:04,959 --> 00:14:10,320
um and then uh find the

00:14:08,480 --> 00:14:11,920
the images that i want to use in the

00:14:10,320 --> 00:14:12,800
current state or in the state that i'm

00:14:11,920 --> 00:14:15,680
using

00:14:12,800 --> 00:14:17,040
image builder i'm you know obviously os

00:14:15,680 --> 00:14:19,440
build

00:14:17,040 --> 00:14:22,079
i should be able to use when when i'm

00:14:19,440 --> 00:14:25,120
using that i should be able to

00:14:22,079 --> 00:14:28,160
uh use a single

00:14:25,120 --> 00:14:31,680
uh distribution version

00:14:28,160 --> 00:14:34,320
to do more than one uh

00:14:31,680 --> 00:14:34,959
one other version but for now i need an

00:14:34,320 --> 00:14:38,079
individual

00:14:34,959 --> 00:14:38,720
image builder instance for each one of

00:14:38,079 --> 00:14:40,959
the

00:14:38,720 --> 00:14:43,600
um each one of the distribution versions

00:14:40,959 --> 00:14:46,160
that i want to build for

00:14:43,600 --> 00:14:47,199
and that means i also need one for each

00:14:46,160 --> 00:14:49,680
one of the version

00:14:47,199 --> 00:14:51,360
architectures that i need to build for

00:14:49,680 --> 00:14:53,199
um

00:14:51,360 --> 00:14:54,480
something that i found uh kind of

00:14:53,199 --> 00:14:58,800
interesting there was

00:14:54,480 --> 00:15:02,079
was that uh the uh you know obviously

00:14:58,800 --> 00:15:05,519
i had to craft a little bit more handily

00:15:02,079 --> 00:15:08,000
the um uh the configuration i've got

00:15:05,519 --> 00:15:13,440
some snippets here let me

00:15:08,000 --> 00:15:13,440
see if i can pull something up in

00:15:13,680 --> 00:15:15,920
in

00:15:16,880 --> 00:15:21,120
the emacs here so you can see it so

00:15:22,000 --> 00:15:26,399
here in the server in the server

00:15:23,519 --> 00:15:28,480
definition for the jenkins and there's a

00:15:26,399 --> 00:15:30,399
few variables that are missing

00:15:28,480 --> 00:15:32,399
um but i i thought it'd be interesting

00:15:30,399 --> 00:15:35,920
to kind of show this

00:15:32,399 --> 00:15:36,560
um one of the things that i wanted to

00:15:35,920 --> 00:15:40,560
make

00:15:36,560 --> 00:15:43,759
uh one or an important distinction

00:15:40,560 --> 00:15:46,959
in the way that this

00:15:43,759 --> 00:15:46,959
ansible script works

00:15:47,519 --> 00:15:53,680
yeah exactly neil so

00:15:50,560 --> 00:15:56,560
um but the

00:15:53,680 --> 00:15:58,320
neil is grumbling about the lack of of

00:15:56,560 --> 00:16:01,680
cross arch support

00:15:58,320 --> 00:16:04,160
it gets complicated and so good news is

00:16:01,680 --> 00:16:07,360
is that i have what i need to pull that

00:16:04,160 --> 00:16:11,920
out and so where's my

00:16:07,360 --> 00:16:14,959
mommy definition there we go

00:16:11,920 --> 00:16:15,279
so if we so if i have an instance arch i

00:16:14,959 --> 00:16:17,120
can

00:16:15,279 --> 00:16:18,480
i'm using that instance arch in the

00:16:17,120 --> 00:16:22,000
definition of the

00:16:18,480 --> 00:16:23,600
of the um the omi query so grabbing

00:16:22,000 --> 00:16:25,199
these thanks dusty for making this so

00:16:23,600 --> 00:16:28,800
easy to review

00:16:25,199 --> 00:16:30,560
and uh and then grabbing

00:16:28,800 --> 00:16:32,480
the instance architecture that i'm

00:16:30,560 --> 00:16:34,160
expecting to build for

00:16:32,480 --> 00:16:35,680
once i have the instance architecture i

00:16:34,160 --> 00:16:39,759
can make a decision uh

00:16:35,680 --> 00:16:42,720
in the variables about um

00:16:39,759 --> 00:16:44,160
about the uh the configuration but i've

00:16:42,720 --> 00:16:46,160
got it here

00:16:44,160 --> 00:16:47,360
uh specifying the instance arch in the

00:16:46,160 --> 00:16:49,920
filters

00:16:47,360 --> 00:16:51,519
and then stay same in the name i'm

00:16:49,920 --> 00:16:54,000
obviously could have gotten away

00:16:51,519 --> 00:16:55,839
from doing it one place or the other but

00:16:54,000 --> 00:16:58,880
uh but i've got it in both and i'm

00:16:55,839 --> 00:17:01,920
i'm comfortable with that and then

00:16:58,880 --> 00:17:04,000
uh the ginger template of functionality

00:17:01,920 --> 00:17:05,120
was something that i had not worked with

00:17:04,000 --> 00:17:09,120
previously but then

00:17:05,120 --> 00:17:11,120
started to work with in a in more of a

00:17:09,120 --> 00:17:12,480
um an interesting way and i found a

00:17:11,120 --> 00:17:14,319
whole lot of ways to do this

00:17:12,480 --> 00:17:16,000
and this is this is one of those places

00:17:14,319 --> 00:17:16,880
where i feel like i really need to dig

00:17:16,000 --> 00:17:18,799
in that

00:17:16,880 --> 00:17:21,039
you know it's it's the place where

00:17:18,799 --> 00:17:25,120
you'll see the most

00:17:21,039 --> 00:17:28,640
uh functionality and in ansible

00:17:25,120 --> 00:17:31,679
uh go the way of

00:17:28,640 --> 00:17:34,880
one line scripts where you said

00:17:31,679 --> 00:17:37,840
something into grip and then awkit

00:17:34,880 --> 00:17:38,559
right there's so many places in here

00:17:37,840 --> 00:17:42,080
where you can

00:17:38,559 --> 00:17:45,280
you can just uh transform data in into

00:17:42,080 --> 00:17:47,600
in different directions uh so

00:17:45,280 --> 00:17:48,640
so that's a an essential component part

00:17:47,600 --> 00:17:51,200
of of the

00:17:48,640 --> 00:17:52,400
deployment of the um of the jenkins

00:17:51,200 --> 00:17:55,360
server

00:17:52,400 --> 00:17:56,559
um also this is interesting here the

00:17:55,360 --> 00:17:58,720
there's a

00:17:56,559 --> 00:18:00,880
there's a number of these modules so

00:17:58,720 --> 00:18:02,720
from the collection

00:18:00,880 --> 00:18:03,919
uh the amazon collection and then

00:18:02,720 --> 00:18:05,919
there's some from the community

00:18:03,919 --> 00:18:08,160
collection and it's not clear

00:18:05,919 --> 00:18:10,160
which direction to go with which one

00:18:08,160 --> 00:18:11,760
today and i feel like that probably will

00:18:10,160 --> 00:18:13,919
clear up more

00:18:11,760 --> 00:18:14,960
in the future but it was an interesting

00:18:13,919 --> 00:18:17,280
experience to

00:18:14,960 --> 00:18:18,160
to cope to go back in and see where

00:18:17,280 --> 00:18:20,320
those are

00:18:18,160 --> 00:18:22,320
so this is a little bit more uh about

00:18:20,320 --> 00:18:24,480
the pipeline itself and what uh

00:18:22,320 --> 00:18:26,240
what my goals are and and the experience

00:18:24,480 --> 00:18:28,400
around that are

00:18:26,240 --> 00:18:29,520
i've got an extra helmet in here sorry

00:18:28,400 --> 00:18:32,160
about that so

00:18:29,520 --> 00:18:33,039
the helmet is an iam roll and this is

00:18:32,160 --> 00:18:35,120
something that uh

00:18:33,039 --> 00:18:36,640
uh i'll i'll point out a little bit more

00:18:35,120 --> 00:18:39,520
but but um

00:18:36,640 --> 00:18:41,360
i'm associating an iam role with the

00:18:39,520 --> 00:18:41,919
jenkins instance because the jenkins

00:18:41,360 --> 00:18:45,440
instance

00:18:41,919 --> 00:18:49,280
is running my ansible playbooks so

00:18:45,440 --> 00:18:50,720
um so the so initially

00:18:49,280 --> 00:18:52,240
you have to run the ansible playbook

00:18:50,720 --> 00:18:52,720
from somewhere but it doesn't have to

00:18:52,240 --> 00:18:54,960
and

00:18:52,720 --> 00:18:56,559
but next time it can be you know the

00:18:54,960 --> 00:18:57,600
ansible playbooks will land on the

00:18:56,559 --> 00:19:00,160
jenkins

00:18:57,600 --> 00:19:01,600
instance or in the gen in the jobs

00:19:00,160 --> 00:19:02,799
themselves right so it'll land in the

00:19:01,600 --> 00:19:05,679
pipeline

00:19:02,799 --> 00:19:06,799
and uh this is essentially what's going

00:19:05,679 --> 00:19:09,840
on so

00:19:06,799 --> 00:19:10,960
here's me and anybody else who wants to

00:19:09,840 --> 00:19:14,559
help me

00:19:10,960 --> 00:19:18,160
get better at what i'm doing so

00:19:14,559 --> 00:19:19,600
it's it's uh so jonathan it's not yet

00:19:18,160 --> 00:19:23,039
jonathan asked if this was somewhere

00:19:19,600 --> 00:19:25,200
public that we can access the playbook

00:19:23,039 --> 00:19:26,559
it's somewhere that i can share it with

00:19:25,200 --> 00:19:29,520
you because

00:19:26,559 --> 00:19:30,080
i would be super excited to have you um

00:19:29,520 --> 00:19:34,000
to have

00:19:30,080 --> 00:19:38,000
any of you help me uh get the work done

00:19:34,000 --> 00:19:40,240
but um but right now i have

00:19:38,000 --> 00:19:42,080
uh i have some questions i'm i have

00:19:40,240 --> 00:19:44,960
questionable security

00:19:42,080 --> 00:19:46,160
on the on the artifacts that are in the

00:19:44,960 --> 00:19:48,480
in the repository

00:19:46,160 --> 00:19:49,679
so i want to make sure that i'm not

00:19:48,480 --> 00:19:53,679
sharing out

00:19:49,679 --> 00:19:56,799
old secrets yeah i know

00:19:53,679 --> 00:20:00,799
neil gave me the the craw the

00:19:56,799 --> 00:20:03,440
side side eye on that one

00:20:00,799 --> 00:20:04,640
um but yes i'll get it out i'll make

00:20:03,440 --> 00:20:06,799
sure it's available

00:20:04,640 --> 00:20:08,799
and eventually it will be yeah there you

00:20:06,799 --> 00:20:11,679
go

00:20:08,799 --> 00:20:13,120
it will be available to everyone to look

00:20:11,679 --> 00:20:15,120
at

00:20:13,120 --> 00:20:17,039
so the way it works now is you update

00:20:15,120 --> 00:20:19,039
the github repository and actually i've

00:20:17,039 --> 00:20:20,159
got it split into two repositories

00:20:19,039 --> 00:20:21,840
there's one repository

00:20:20,159 --> 00:20:23,280
that's there for the image builder to

00:20:21,840 --> 00:20:26,159
collect the

00:20:23,280 --> 00:20:27,520
information that's associated with the

00:20:26,159 --> 00:20:31,520
the builds

00:20:27,520 --> 00:20:31,840
um so for sql for the sql server there's

00:20:31,520 --> 00:20:34,400
the

00:20:31,840 --> 00:20:37,200
there's the get repository specific to

00:20:34,400 --> 00:20:40,480
the the build of the

00:20:37,200 --> 00:20:42,080
of the repos so um

00:20:40,480 --> 00:20:44,000
so the instances that i'm using are

00:20:42,080 --> 00:20:46,559
cloud access instances

00:20:44,000 --> 00:20:47,520
and the cloud access instances come up i

00:20:46,559 --> 00:20:50,640
register them

00:20:47,520 --> 00:20:54,000
uh with with red hat and then um

00:20:50,640 --> 00:20:56,559
and then i'm uh doing a full repo sync

00:20:54,000 --> 00:20:58,480
onto the image builder instance i have

00:20:56,559 --> 00:21:00,320
to use a pretty beefy instance to get

00:20:58,480 --> 00:21:01,679
the image builder configuration to work

00:21:00,320 --> 00:21:03,280
because

00:21:01,679 --> 00:21:04,799
it either has to be metal or one of the

00:21:03,280 --> 00:21:07,919
larger

00:21:04,799 --> 00:21:10,320
more more sophisticated nitro instances

00:21:07,919 --> 00:21:11,600
to get the to get the virtual machine

00:21:10,320 --> 00:21:14,400
configuration to run

00:21:11,600 --> 00:21:15,760
in a timely manner i mean i could run a

00:21:14,400 --> 00:21:19,200
smaller instance and

00:21:15,760 --> 00:21:22,240
and for longer but why if i'm going to

00:21:19,200 --> 00:21:27,120
just going to shut it down

00:21:22,240 --> 00:21:29,039
then the the so from the from there the

00:21:27,120 --> 00:21:31,200
the pipeline push event happens in the

00:21:29,039 --> 00:21:32,559
code pipeline and the code pipeline is

00:21:31,200 --> 00:21:36,480
initiating

00:21:32,559 --> 00:21:40,480
a longer run on the uh on the

00:21:36,480 --> 00:21:41,600
uh jenga's server so the jenkins server

00:21:40,480 --> 00:21:44,000
only has the

00:21:41,600 --> 00:21:45,840
standard port open i haven't done

00:21:44,000 --> 00:21:48,880
anything to secure it

00:21:45,840 --> 00:21:51,600
at this point um that'll that's

00:21:48,880 --> 00:21:52,320
on you know a road map item for for a

00:21:51,600 --> 00:21:54,159
different time

00:21:52,320 --> 00:21:55,360
or for someone who knows how to do it in

00:21:54,159 --> 00:21:59,840
seconds instead of

00:21:55,360 --> 00:21:59,840
me doing it in hours so

00:22:00,320 --> 00:22:07,440
so um the ansible playbook then runs

00:22:04,400 --> 00:22:09,520
and creates generates the instances um

00:22:07,440 --> 00:22:10,799
and you see the little lorax here a

00:22:09,520 --> 00:22:14,400
little history on the

00:22:10,799 --> 00:22:14,960
on the image builder the instances are

00:22:14,400 --> 00:22:17,039
then

00:22:14,960 --> 00:22:18,559
uh generated using the blueprints that

00:22:17,039 --> 00:22:21,360
are in the configuration

00:22:18,559 --> 00:22:23,360
from the uh from the github and the

00:22:21,360 --> 00:22:28,320
blueprints themselves

00:22:23,360 --> 00:22:31,600
are um are just pulled from s3

00:22:28,320 --> 00:22:35,039
so um the

00:22:31,600 --> 00:22:35,679
uh the uh the whole goal of this

00:22:35,039 --> 00:22:38,080
obviously

00:22:35,679 --> 00:22:38,880
is to have uh several of these instances

00:22:38,080 --> 00:22:42,799
running

00:22:38,880 --> 00:22:46,240
creating uh either rel7 and a r8

00:22:42,799 --> 00:22:49,440
or centos 7 centos 8 images

00:22:46,240 --> 00:22:52,480
with the with the component parts

00:22:49,440 --> 00:22:54,960
and then to have essentially a little

00:22:52,480 --> 00:22:55,600
solutions builder here so that we can

00:22:54,960 --> 00:22:57,679
vary the

00:22:55,600 --> 00:22:59,360
the blueprints that are being used and

00:22:57,679 --> 00:23:01,919
produce some very interesting

00:22:59,360 --> 00:23:03,360
sort of collections of you know what i'd

00:23:01,919 --> 00:23:05,360
love to do and this is my

00:23:03,360 --> 00:23:06,960
kind of my goal here on what i was

00:23:05,360 --> 00:23:09,520
excited about was

00:23:06,960 --> 00:23:10,960
was um was building a way to have

00:23:09,520 --> 00:23:13,360
solutions

00:23:10,960 --> 00:23:14,400
uh that are already there in the fedora

00:23:13,360 --> 00:23:18,400
um

00:23:14,400 --> 00:23:22,240
the fedora repertoire

00:23:18,400 --> 00:23:25,520
or scope

00:23:22,240 --> 00:23:28,880
and to provide uh images of those that

00:23:25,520 --> 00:23:29,600
can be shared to um to customers in ways

00:23:28,880 --> 00:23:31,919
and

00:23:29,600 --> 00:23:33,600
really not customers but everybody users

00:23:31,919 --> 00:23:35,679
who wanna who want to

00:23:33,600 --> 00:23:36,799
leverage that in the context of the of

00:23:35,679 --> 00:23:40,080
the cloud

00:23:36,799 --> 00:23:41,520
and and to provide kind of a a guideline

00:23:40,080 --> 00:23:44,799
model for

00:23:41,520 --> 00:23:48,720
an architecture that spins up uh works

00:23:44,799 --> 00:23:52,080
and then uh and then spins itself down

00:23:48,720 --> 00:23:55,200
but is still fully functional

00:23:52,080 --> 00:23:56,159
um because well we'll talk about that in

00:23:55,200 --> 00:24:00,080
a little bit

00:23:56,159 --> 00:24:02,960
so uh the and then to have

00:24:00,080 --> 00:24:03,679
uh an associated role for this instance

00:24:02,960 --> 00:24:06,159
here

00:24:03,679 --> 00:24:07,039
so that we don't have to ever provide

00:24:06,159 --> 00:24:10,159
any of the

00:24:07,039 --> 00:24:12,000
the deep like any of the credentials

00:24:10,159 --> 00:24:14,559
that would be required so

00:24:12,000 --> 00:24:16,000
almost everything that you read about

00:24:14,559 --> 00:24:18,799
about using

00:24:16,000 --> 00:24:19,679
amazon ec2 has somewhere where you're

00:24:18,799 --> 00:24:22,159
storing

00:24:19,679 --> 00:24:23,440
you know in the semi or semi-permanent

00:24:22,159 --> 00:24:25,600
or permanent way

00:24:23,440 --> 00:24:26,640
credentials that then are out there in

00:24:25,600 --> 00:24:29,919
the big

00:24:26,640 --> 00:24:32,880
um in in the big world

00:24:29,919 --> 00:24:34,320
with uh with no you know with with

00:24:32,880 --> 00:24:36,320
little safety net and

00:24:34,320 --> 00:24:37,520
of course we don't want you know nobody

00:24:36,320 --> 00:24:39,279
wants that

00:24:37,520 --> 00:24:40,720
so neil you had a question you said is

00:24:39,279 --> 00:24:41,919
the idea to have a layering model for

00:24:40,720 --> 00:24:43,840
producing armies yes

00:24:41,919 --> 00:24:45,120
the idea is actually to have a way to

00:24:43,840 --> 00:24:48,000
produce artifacts

00:24:45,120 --> 00:24:48,320
artifacts that are not just omnis i mean

00:24:48,000 --> 00:24:50,640
the

00:24:48,320 --> 00:24:52,240
the goal is to be able to produce isos

00:24:50,640 --> 00:24:54,400
to produce anything that people

00:24:52,240 --> 00:24:55,840
you know that that you would want in the

00:24:54,400 --> 00:24:59,600
same way that you would do that

00:24:55,840 --> 00:25:02,400
in uh in the context of koji right

00:24:59,600 --> 00:25:02,880
so i mean i i believe that there's

00:25:02,400 --> 00:25:04,480
nothing

00:25:02,880 --> 00:25:06,159
there would be nothing stopping me from

00:25:04,480 --> 00:25:09,200
just just outlining and

00:25:06,159 --> 00:25:12,320
and deploying a pipeline uh with the

00:25:09,200 --> 00:25:15,039
or deploying a um a request

00:25:12,320 --> 00:25:17,360
to build the images with the scripts

00:25:15,039 --> 00:25:19,760
that dusty has in place today

00:25:17,360 --> 00:25:20,559
um like with the coreos builder or or

00:25:19,760 --> 00:25:22,880
whatever

00:25:20,559 --> 00:25:24,320
you know or or the image builder in the

00:25:22,880 --> 00:25:28,320
context of

00:25:24,320 --> 00:25:31,840
of the cpe but um

00:25:28,320 --> 00:25:33,679
this is this is kind of a uh i want

00:25:31,840 --> 00:25:35,039
i want to understand this model as much

00:25:33,679 --> 00:25:37,679
as i as as

00:25:35,039 --> 00:25:37,679
uh you do

00:25:38,320 --> 00:25:43,840
and some of that requires some building

00:25:40,159 --> 00:25:43,840
right building on my part

00:25:49,120 --> 00:25:57,279
so um using the aws code pipeline

00:25:54,480 --> 00:25:59,520
so jumping right into uh building out

00:25:57,279 --> 00:26:01,760
and i know it's fairly simple to build a

00:25:59,520 --> 00:26:04,000
standard pipeline configuration for

00:26:01,760 --> 00:26:06,159
jenkins but it's not really on my radar

00:26:04,000 --> 00:26:09,360
of things that i need to be

00:26:06,159 --> 00:26:12,400
deeply involved in so i chose to

00:26:09,360 --> 00:26:13,760
to take this um to take this path with

00:26:12,400 --> 00:26:16,480
the code pipeline

00:26:13,760 --> 00:26:18,480
to begin with because i felt like i was

00:26:16,480 --> 00:26:20,000
i needed to crawl before i was walking

00:26:18,480 --> 00:26:21,360
and i also needed to have something that

00:26:20,000 --> 00:26:23,919
was there

00:26:21,360 --> 00:26:25,520
available and servicing uh the

00:26:23,919 --> 00:26:28,000
configuration

00:26:25,520 --> 00:26:29,200
um at times when i didn't have any

00:26:28,000 --> 00:26:32,880
hardware in place

00:26:29,200 --> 00:26:32,880
and wasn't really ready to um

00:26:33,039 --> 00:26:39,600
to deploy um or what didn't really

00:26:36,559 --> 00:26:41,039
wasn't really active right so let's say

00:26:39,600 --> 00:26:42,960
there's no changes in the github

00:26:41,039 --> 00:26:44,480
repository there's no modifications to

00:26:42,960 --> 00:26:45,120
the code that's associated you know

00:26:44,480 --> 00:26:49,440
that's

00:26:45,120 --> 00:26:51,200
intermediate um i don't have any way to

00:26:49,440 --> 00:26:55,440
i don't have any need for for

00:26:51,200 --> 00:26:55,440
infrastructure i want that to go away

00:26:56,640 --> 00:27:00,159
and then to integrate with as many the

00:26:58,640 --> 00:27:02,159
the tools that i mean

00:27:00,159 --> 00:27:03,200
so knowing that many people were not

00:27:02,159 --> 00:27:05,039
going to have the same kind of

00:27:03,200 --> 00:27:06,159
limitations around jenkins not going to

00:27:05,039 --> 00:27:08,799
have the same limitations

00:27:06,159 --> 00:27:10,720
around i wanted to have around the other

00:27:08,799 --> 00:27:13,919
tools that i would i'd chosen

00:27:10,720 --> 00:27:15,840
i wanted to make sure that um that the

00:27:13,919 --> 00:27:17,360
people who were willing to help could

00:27:15,840 --> 00:27:20,720
jump in and

00:27:17,360 --> 00:27:22,880
and really help me um exp

00:27:20,720 --> 00:27:25,440
not only expand my understanding but

00:27:22,880 --> 00:27:27,679
also to expand the the capability and

00:27:25,440 --> 00:27:30,000
and the uh the ability for others people

00:27:27,679 --> 00:27:31,360
to use it

00:27:30,000 --> 00:27:33,360
and there's some there's like some cool

00:27:31,360 --> 00:27:35,039
tools out there that i've i

00:27:33,360 --> 00:27:36,399
that i learned about just you know in

00:27:35,039 --> 00:27:39,520
the past day

00:27:36,399 --> 00:27:42,559
uh like tmt like the test tool um

00:27:39,520 --> 00:27:43,760
that uh the miles and those guys were

00:27:42,559 --> 00:27:47,200
working on and

00:27:43,760 --> 00:27:48,320
and it's pretty amazing uh how much of

00:27:47,200 --> 00:27:50,159
that could extend

00:27:48,320 --> 00:27:51,760
the the functionality in something like

00:27:50,159 --> 00:27:54,399
that

00:27:51,760 --> 00:27:56,320
code pipeline no it so neil asked is

00:27:54,399 --> 00:27:58,159
code pipeline jenkins based or something

00:27:56,320 --> 00:28:01,440
else it's something else so it's a

00:27:58,159 --> 00:28:03,279
it's it's actually based on an internal

00:28:01,440 --> 00:28:06,640
tool that is called pipelines

00:28:03,279 --> 00:28:08,640
uh for for amazon and it was originally

00:28:06,640 --> 00:28:10,640
written i believe is it's still written

00:28:08,640 --> 00:28:12,880
in in java

00:28:10,640 --> 00:28:13,919
but it was uh but it was originally i

00:28:12,880 --> 00:28:19,039
mean now it's written

00:28:13,919 --> 00:28:19,039
at scale in microservices and and

00:28:20,080 --> 00:28:26,799
so it is kind of native to the aws

00:28:23,440 --> 00:28:28,720
microservice model um integrating into a

00:28:26,799 --> 00:28:31,840
whole lot of other tools on the back

00:28:28,720 --> 00:28:34,720
back end uh okay

00:28:31,840 --> 00:28:36,000
i accept that um but it's a but it's a

00:28:34,720 --> 00:28:38,399
um

00:28:36,000 --> 00:28:40,159
when i say that i mean that that the

00:28:38,399 --> 00:28:42,320
that by itself

00:28:40,159 --> 00:28:44,559
it's not jenkins-based and in fact

00:28:42,320 --> 00:28:46,720
benefits from an extension uh

00:28:44,559 --> 00:28:47,679
to using jenkins for standard pipeline

00:28:46,720 --> 00:28:49,600
uh

00:28:47,679 --> 00:28:51,200
technology you can build your own

00:28:49,600 --> 00:28:54,480
plugins for it but

00:28:51,200 --> 00:28:58,799
it's uh it's a it

00:28:54,480 --> 00:29:01,520
in my opinion uh it is a fairly simple

00:28:58,799 --> 00:29:03,200
tool for the process and it expects you

00:29:01,520 --> 00:29:06,320
to

00:29:03,200 --> 00:29:08,880
incorporate custom components

00:29:06,320 --> 00:29:09,600
into your build process and somebody

00:29:08,880 --> 00:29:11,919
else has a

00:29:09,600 --> 00:29:13,200
has a different opinion of that i'd love

00:29:11,919 --> 00:29:17,120
to hear it but

00:29:13,200 --> 00:29:20,240
and like like when you're so

00:29:17,120 --> 00:29:22,559
not yet well not yet yeah there's

00:29:20,240 --> 00:29:23,679
so it's very limited in the scope of the

00:29:22,559 --> 00:29:27,120
of the um

00:29:23,679 --> 00:29:29,440
repositories that it will use so you can

00:29:27,120 --> 00:29:30,559
having a native git repository is not

00:29:29,440 --> 00:29:33,600
supported

00:29:30,559 --> 00:29:35,760
having a github repository is supported

00:29:33,600 --> 00:29:38,240
having a code commit repository is

00:29:35,760 --> 00:29:42,399
supported having an s3

00:29:38,240 --> 00:29:46,159
object that has uh sns notifications

00:29:42,399 --> 00:29:47,840
is supported um but um

00:29:46,159 --> 00:29:50,000
but like i said it's it's one of those

00:29:47,840 --> 00:29:52,159
things that i thought was a really good

00:29:50,000 --> 00:29:53,440
it's a like a really great fit for where

00:29:52,159 --> 00:29:55,600
i am today

00:29:53,440 --> 00:29:58,480
and that that may end up being replaced

00:29:55,600 --> 00:30:01,820
by other open tools just because

00:29:58,480 --> 00:30:03,039
my my goal is obviously open

00:30:01,820 --> 00:30:08,559
[Music]

00:30:03,039 --> 00:30:10,799
default by default to open

00:30:08,559 --> 00:30:12,000
so the long runs uh so all the things

00:30:10,799 --> 00:30:15,360
that are doing here

00:30:12,000 --> 00:30:18,399
um was uh was

00:30:15,360 --> 00:30:19,039
a community decision so you know i want

00:30:18,399 --> 00:30:20,320
to learn

00:30:19,039 --> 00:30:22,240
i obviously want to learn with my

00:30:20,320 --> 00:30:25,600
friends right like this

00:30:22,240 --> 00:30:28,240
this is not as uh as simple and for

00:30:25,600 --> 00:30:29,120
you know for a lot of for me as it

00:30:28,240 --> 00:30:31,279
should be maybe

00:30:29,120 --> 00:30:32,640
and and i think that if i give a lot of

00:30:31,279 --> 00:30:35,919
people an opportunity to

00:30:32,640 --> 00:30:36,640
to um to really shine that i get a lot

00:30:35,919 --> 00:30:40,000
out of it and

00:30:36,640 --> 00:30:41,600
and so um that's uh

00:30:40,000 --> 00:30:43,039
that's something i'm really grateful for

00:30:41,600 --> 00:30:44,559
and i think i think we all are grateful

00:30:43,039 --> 00:30:47,919
for the mentorship that this

00:30:44,559 --> 00:30:49,520
this project has brought to us all um

00:30:47,919 --> 00:30:51,520
but it was a great opportunity for me to

00:30:49,520 --> 00:30:53,200
reach out and say hey here's a simple

00:30:51,520 --> 00:30:57,200
tool where you can hone your mentor

00:30:53,200 --> 00:31:01,279
mentoring skills um and i can benefit

00:30:57,200 --> 00:31:04,320
so so um

00:31:01,279 --> 00:31:05,519
so so there's you know outside of the

00:31:04,320 --> 00:31:08,399
github flavors like

00:31:05,519 --> 00:31:09,440
travis and bamboo and all that there was

00:31:08,399 --> 00:31:11,600
there was a

00:31:09,440 --> 00:31:12,880
you know it's it's a pretty solid rock

00:31:11,600 --> 00:31:14,880
solid choice right

00:31:12,880 --> 00:31:15,919
get lab has their own hooks and

00:31:14,880 --> 00:31:17,840
everybody's got

00:31:15,919 --> 00:31:19,600
uh some way that they can integrate with

00:31:17,840 --> 00:31:22,799
it it's right it's it's the

00:31:19,600 --> 00:31:26,159
it's the legacy soldier um that keeps

00:31:22,799 --> 00:31:28,559
keeps us all uh keeps us all working and

00:31:26,159 --> 00:31:29,200
keeps centos in check you know and and

00:31:28,559 --> 00:31:30,720
and uh

00:31:29,200 --> 00:31:33,760
so there's a lot of i think there's a

00:31:30,720 --> 00:31:37,360
lot of benefit to working with it

00:31:33,760 --> 00:31:40,640
um obviously you know it

00:31:37,360 --> 00:31:43,120
it facilitates my my needs

00:31:40,640 --> 00:31:44,240
and aws batch was something that i uh

00:31:43,120 --> 00:31:48,000
something else that i

00:31:44,240 --> 00:31:50,799
uh that i toyed with the idea of of um

00:31:48,000 --> 00:31:52,320
of putting in here because it also is

00:31:50,799 --> 00:31:54,159
great for scalable work and

00:31:52,320 --> 00:31:56,240
it's like massively scalable work it's

00:31:54,159 --> 00:31:59,360
used for in a lot of cases where

00:31:56,240 --> 00:32:03,200
um where people are using

00:31:59,360 --> 00:32:05,679
are driving parallel uh computation in

00:32:03,200 --> 00:32:06,240
uh ways that are different than they

00:32:05,679 --> 00:32:09,840
used to

00:32:06,240 --> 00:32:13,760
right it's not just your basic um uh

00:32:09,840 --> 00:32:16,880
batch scheduler like uh platform or

00:32:13,760 --> 00:32:16,880
lava right

00:32:17,120 --> 00:32:22,240
so um so i i considered it pretty

00:32:20,799 --> 00:32:23,919
heavily because it's one of those things

00:32:22,240 --> 00:32:25,760
that i hear a lot i hear a lot of

00:32:23,919 --> 00:32:27,200
customers say oh well we have thousands

00:32:25,760 --> 00:32:28,799
of virtual machines and it's going to

00:32:27,200 --> 00:32:32,159
cost us you know

00:32:28,799 --> 00:32:34,159
a lot more money to run these thousand

00:32:32,159 --> 00:32:35,840
virtual machines on the cloud

00:32:34,159 --> 00:32:37,519
and when i look back at them i see that

00:32:35,840 --> 00:32:39,360
they're purpose-built right they have

00:32:37,519 --> 00:32:40,559
little they have like very specific

00:32:39,360 --> 00:32:42,080
functionality

00:32:40,559 --> 00:32:43,679
and that keeping them around isn't

00:32:42,080 --> 00:32:45,600
really necessarily in any kind

00:32:43,679 --> 00:32:47,200
you know in anyone's best interest it's

00:32:45,600 --> 00:32:49,760
just a good thing to have

00:32:47,200 --> 00:32:51,039
have those purpose-built configurations

00:32:49,760 --> 00:32:52,559
and so i thought this might be an

00:32:51,039 --> 00:32:54,840
interesting place for me to understand

00:32:52,559 --> 00:32:59,039
better how i could help people

00:32:54,840 --> 00:33:01,360
um uh disaggregate those workloads

00:32:59,039 --> 00:33:03,440
and understand how to save how to save

00:33:01,360 --> 00:33:07,440
money in the way that they do it

00:33:03,440 --> 00:33:10,880
um and so call i mean i'd love to

00:33:07,440 --> 00:33:12,399
so long picture i think of this serge's

00:33:10,880 --> 00:33:14,080
work on koku

00:33:12,399 --> 00:33:15,760
and the things that are out there that

00:33:14,080 --> 00:33:19,919
uh um

00:33:15,760 --> 00:33:23,519
that are integrating uh cost analysis

00:33:19,919 --> 00:33:26,640
and and billing uh review into the

00:33:23,519 --> 00:33:29,440
end of their process and and val like

00:33:26,640 --> 00:33:30,320
uh billing alerts i'd love to see you

00:33:29,440 --> 00:33:32,480
know i'd love to

00:33:30,320 --> 00:33:33,840
sort of build that into this process so

00:33:32,480 --> 00:33:35,279
that people can understand

00:33:33,840 --> 00:33:36,960
exactly what it is that they're getting

00:33:35,279 --> 00:33:38,399
for their for their you know in the

00:33:36,960 --> 00:33:39,519
opportunity and make

00:33:38,399 --> 00:33:41,840
something that i think is a good

00:33:39,519 --> 00:33:44,240
reference architecture in the

00:33:41,840 --> 00:33:53,840
in the context of fedora and fedora

00:33:44,240 --> 00:33:53,840
based tools

00:33:54,320 --> 00:34:00,399
okay so uh so here's the

00:33:57,760 --> 00:34:01,360
here's my spoiler uh which is that i'm

00:34:00,399 --> 00:34:04,240
not done

00:34:01,360 --> 00:34:04,640
like i was super excited to to do some

00:34:04,240 --> 00:34:07,919
uh

00:34:04,640 --> 00:34:10,720
to do some uh big time demos for the

00:34:07,919 --> 00:34:12,240
for for flock but i haven't made it so

00:34:10,720 --> 00:34:14,960
let's talk about this as being

00:34:12,240 --> 00:34:17,119
the first iteration of the talk and the

00:34:14,960 --> 00:34:18,639
first iteration of the tool

00:34:17,119 --> 00:34:20,480
so i mean i can show you some of the

00:34:18,639 --> 00:34:22,879
things that i've done and and we'll

00:34:20,480 --> 00:34:24,159
we'll do that if you're if we have time

00:34:22,879 --> 00:34:28,000
and you're interested

00:34:24,159 --> 00:34:29,520
but the but the um uh but the truth is

00:34:28,000 --> 00:34:31,119
is that i'm still running a lot of this

00:34:29,520 --> 00:34:32,000
by hand and i'm not getting any of the

00:34:31,119 --> 00:34:35,280
jenkins stuff

00:34:32,000 --> 00:34:38,639
built but in an automated fashion so

00:34:35,280 --> 00:34:40,800
uh it it's burning a hole in my pocket

00:34:38,639 --> 00:34:42,320
to get a to get more time to work on

00:34:40,800 --> 00:34:44,560
this

00:34:42,320 --> 00:34:46,720
um only building the image builder so

00:34:44,560 --> 00:34:48,800
far and producing fundamental images for

00:34:46,720 --> 00:34:50,960
like our instances i guess i should say

00:34:48,800 --> 00:34:53,280
instances for centos s7 and 8

00:34:50,960 --> 00:34:54,079
in the upstream red hat 7 and 8. so now

00:34:53,280 --> 00:34:57,200
i can create

00:34:54,079 --> 00:35:00,320
a centos 7 and a centos 8

00:34:57,200 --> 00:35:02,960
image in either architecture on

00:35:00,320 --> 00:35:04,079
in a 7 and an eight on either

00:35:02,960 --> 00:35:05,520
architecture

00:35:04,079 --> 00:35:07,200
i don't really feel like i have to worry

00:35:05,520 --> 00:35:09,680
about doing that on the fedora side

00:35:07,200 --> 00:35:12,560
because dusty's doing it all for me

00:35:09,680 --> 00:35:14,240
but um but to have those with some

00:35:12,560 --> 00:35:16,160
customized configurations

00:35:14,240 --> 00:35:17,440
the same thing you know i would love to

00:35:16,160 --> 00:35:20,079
do the same thing

00:35:17,440 --> 00:35:21,760
in terms of the spins but i don't have i

00:35:20,079 --> 00:35:24,640
haven't really

00:35:21,760 --> 00:35:25,680
uh pulled in this the spin configuration

00:35:24,640 --> 00:35:28,400
so that i was just

00:35:25,680 --> 00:35:31,200
churning out machine images but at some

00:35:28,400 --> 00:35:34,079
point i would love to see that

00:35:31,200 --> 00:35:34,960
and then uh creating sort of a state

00:35:34,079 --> 00:35:36,880
equal stop

00:35:34,960 --> 00:35:39,440
or a state equals terminated or state

00:35:36,880 --> 00:35:42,160
equals absent i guess

00:35:39,440 --> 00:35:42,960
for the ec2 instances hasn't really

00:35:42,160 --> 00:35:44,960
happened yet

00:35:42,960 --> 00:35:46,720
and one of the things that i i do want

00:35:44,960 --> 00:35:48,320
to experiment with that's not really

00:35:46,720 --> 00:35:51,520
available yet but it's still

00:35:48,320 --> 00:35:51,839
some i mean it's it's open there's it's

00:35:51,520 --> 00:35:55,119
an

00:35:51,839 --> 00:35:57,920
it's an open item to

00:35:55,119 --> 00:35:59,119
integrate ec2 hibernate into support

00:35:57,920 --> 00:36:02,800
into on day

00:35:59,119 --> 00:36:06,079
aws within the context of fedora so

00:36:02,800 --> 00:36:08,400
uh neil i hope you'll review that uh

00:36:06,079 --> 00:36:09,359
spec file when i when i get it polished

00:36:08,400 --> 00:36:13,839
for for

00:36:09,359 --> 00:36:13,839
uh uh for addition

00:36:15,839 --> 00:36:19,520
so the easy to hibernate and uh while

00:36:17,599 --> 00:36:22,400
the ch the page is changing

00:36:19,520 --> 00:36:24,079
the uh one of the things about the ec2

00:36:22,400 --> 00:36:25,280
hibernate that was exciting for me is

00:36:24,079 --> 00:36:27,280
that

00:36:25,280 --> 00:36:28,800
hibernation in the context of a server

00:36:27,280 --> 00:36:30,800
and definitely in the context of a cloud

00:36:28,800 --> 00:36:32,400
server is something that's fairly new

00:36:30,800 --> 00:36:34,000
but i think it's kind of catching on and

00:36:32,400 --> 00:36:35,920
there are people who are using it in

00:36:34,000 --> 00:36:37,200
in the context of spot instances so

00:36:35,920 --> 00:36:40,160
they're like hey

00:36:37,200 --> 00:36:41,839
you know this is a lazy process so i

00:36:40,160 --> 00:36:43,760
don't have to really think about whether

00:36:41,839 --> 00:36:45,359
or not i want to do it i just would can

00:36:43,760 --> 00:36:48,560
stand up the service

00:36:45,359 --> 00:36:50,880
and then um and then i can look at

00:36:48,560 --> 00:36:52,400
you know i can i can look at the spot

00:36:50,880 --> 00:36:53,119
price and then when the spot price is

00:36:52,400 --> 00:36:56,400
right

00:36:53,119 --> 00:36:57,839
i just uh wake the instance the instance

00:36:56,400 --> 00:37:01,760
continues to work

00:36:57,839 --> 00:37:04,960
if the if for some reason there is a

00:37:01,760 --> 00:37:06,960
you know there's a a spike in price

00:37:04,960 --> 00:37:08,000
then that can go back into the

00:37:06,960 --> 00:37:10,240
hibernation state

00:37:08,000 --> 00:37:12,000
and continue forward there are some

00:37:10,240 --> 00:37:14,000
challenges there that have been kind of

00:37:12,000 --> 00:37:16,480
interesting because that we've run into

00:37:14,000 --> 00:37:17,920
and i think are kind of uh sort of

00:37:16,480 --> 00:37:21,040
notable

00:37:17,920 --> 00:37:24,240
uh one is the se linux policy

00:37:21,040 --> 00:37:27,040
around writing to a swap file

00:37:24,240 --> 00:37:28,640
it turns out that it's better obviously

00:37:27,040 --> 00:37:30,800
it's a better practice

00:37:28,640 --> 00:37:32,079
to not force customers to have like a

00:37:30,800 --> 00:37:35,520
second

00:37:32,079 --> 00:37:37,119
volume for

00:37:35,520 --> 00:37:39,839
for hibernation you want to you don't

00:37:37,119 --> 00:37:41,920
want to create a swap volume by

00:37:39,839 --> 00:37:43,520
creating a monthly bill for an

00:37:41,920 --> 00:37:45,040
additional device that's going to hold a

00:37:43,520 --> 00:37:48,560
swap file

00:37:45,040 --> 00:37:49,440
a swap partition so the swap partition

00:37:48,560 --> 00:37:53,839
itself

00:37:49,440 --> 00:37:57,520
um is uh kind of rolled into

00:37:53,839 --> 00:37:59,920
um in or it's it's a

00:37:57,520 --> 00:38:00,880
it's basically a five gets created as a

00:37:59,920 --> 00:38:02,720
swap file

00:38:00,880 --> 00:38:04,960
and that swap file gets written to well

00:38:02,720 --> 00:38:08,240
it turns out

00:38:04,960 --> 00:38:11,760
xfs isn't really

00:38:08,240 --> 00:38:13,599
friendly to writing to that swap file in

00:38:11,760 --> 00:38:14,560
a block fashion with transparent huge

00:38:13,599 --> 00:38:17,680
pages

00:38:14,560 --> 00:38:20,400
so you have to turn you have to move the

00:38:17,680 --> 00:38:20,880
move from the default configuration of

00:38:20,400 --> 00:38:23,920
of

00:38:20,880 --> 00:38:28,000
thp on to m advise

00:38:23,920 --> 00:38:29,119
uh so that the um so that the huge pages

00:38:28,000 --> 00:38:33,839
aren't used in the

00:38:29,119 --> 00:38:33,839
in the transfer of the the configuration

00:38:34,000 --> 00:38:40,800
that uh is that's a great

00:38:37,599 --> 00:38:44,079
first step in preventing file system

00:38:40,800 --> 00:38:45,599
corruption but then the sc linux domain

00:38:44,079 --> 00:38:48,720
for hibernation for the

00:38:45,599 --> 00:38:48,720
for the shutdown

00:38:49,040 --> 00:38:52,640
that domain doesn't have context to

00:38:51,200 --> 00:38:56,480
write to the swap file

00:38:52,640 --> 00:39:01,040
so uh any attempt to run an actual

00:38:56,480 --> 00:39:01,440
uh hibernation uh lands you in a space

00:39:01,040 --> 00:39:04,560
where

00:39:01,440 --> 00:39:05,680
you're you're uh you have to relax the

00:39:04,560 --> 00:39:08,880
se linux con

00:39:05,680 --> 00:39:08,880
uh context

00:39:09,440 --> 00:39:15,280
so um here's something that i have

00:39:12,800 --> 00:39:17,040
i found very interesting so one you know

00:39:15,280 --> 00:39:17,920
we're just in the early stages of the

00:39:17,040 --> 00:39:22,480
community

00:39:17,920 --> 00:39:25,839
um in the and the supported um

00:39:22,480 --> 00:39:26,960
did i go backwards i did we're just in

00:39:25,839 --> 00:39:29,680
the first stages of

00:39:26,960 --> 00:39:30,800
of the ansible support for uh

00:39:29,680 --> 00:39:32,800
collections

00:39:30,800 --> 00:39:34,400
and while it's gone on for now for a

00:39:32,800 --> 00:39:36,560
little while from you know for

00:39:34,400 --> 00:39:38,079
over the course of the you know early

00:39:36,560 --> 00:39:41,040
into eight and then now and

00:39:38,079 --> 00:39:41,520
or late into eight and now into nine the

00:39:41,040 --> 00:39:44,720
two

00:39:41,520 --> 00:39:48,160
and two nine has brought uh

00:39:44,720 --> 00:39:51,359
brought us the first uh releases of this

00:39:48,160 --> 00:39:54,640
and like i said i'm super excited about

00:39:51,359 --> 00:39:58,000
uh where this is going and um

00:39:54,640 --> 00:40:00,400
advocating quite a bit for um more

00:39:58,000 --> 00:40:01,119
a more active participation on you know

00:40:00,400 --> 00:40:02,960
from the

00:40:01,119 --> 00:40:05,680
from the teams that are responsible for

00:40:02,960 --> 00:40:07,359
these uh for the services underneath

00:40:05,680 --> 00:40:09,040
these modules

00:40:07,359 --> 00:40:11,359
so that we have some full support but

00:40:09,040 --> 00:40:11,920
for now we have really great community

00:40:11,359 --> 00:40:15,440
support

00:40:11,920 --> 00:40:18,560
for a lot of the configurations and

00:40:15,440 --> 00:40:21,440
um and just building in the support for

00:40:18,560 --> 00:40:22,800
or building this into my process of of

00:40:21,440 --> 00:40:26,960
installing

00:40:22,800 --> 00:40:29,119
uh to the local directory has been uh

00:40:26,960 --> 00:40:30,800
beneficial in running the ansible

00:40:29,119 --> 00:40:32,079
configuration so now i'm

00:40:30,800 --> 00:40:34,960
i'm building those ansible

00:40:32,079 --> 00:40:36,560
configurations and the local

00:40:34,960 --> 00:40:38,640
the local setting i'm not setting them

00:40:36,560 --> 00:40:40,880
up in uh just

00:40:38,640 --> 00:40:42,480
across the system with uh with the

00:40:40,880 --> 00:40:45,760
ansible playbook

00:40:42,480 --> 00:40:49,359
i'm uh setting them up with the

00:40:45,760 --> 00:40:52,079
uh with a config that has a

00:40:49,359 --> 00:40:55,359
current working directory as a base i

00:40:52,079 --> 00:40:55,359
think that's the right way to do it

00:40:55,839 --> 00:41:01,440
the system role for image builder um

00:41:00,160 --> 00:41:03,440
i can't remember the name of the guy

00:41:01,440 --> 00:41:07,119
who's who's responsible for this

00:41:03,440 --> 00:41:10,960
uh but i could ansible galaxy it

00:41:07,119 --> 00:41:10,960
into uh

00:41:11,280 --> 00:41:21,599
um to support i think

00:41:15,839 --> 00:41:24,160
so i do an ansible galaxy

00:41:21,599 --> 00:41:24,160
action

00:41:28,640 --> 00:41:35,839
next system rolls

00:41:32,960 --> 00:41:35,839
image builder

00:41:40,720 --> 00:41:51,520
is that wrong

00:41:48,160 --> 00:41:51,520
there's an info collection

00:41:55,839 --> 00:41:59,520
yes it's an ubuntu laptop it's my work

00:41:58,240 --> 00:42:01,520
laptop neil

00:41:59,520 --> 00:42:02,640
so neil asked if i was using an ubuntu

00:42:01,520 --> 00:42:06,560
laptop

00:42:02,640 --> 00:42:08,720
um my uh my fedora laptop has four gig

00:42:06,560 --> 00:42:12,000
of memory and my ubuntu laptop has

00:42:08,720 --> 00:42:13,520
32 gig of memory so when i

00:42:12,000 --> 00:42:17,839
thought about where i wanted things to

00:42:13,520 --> 00:42:17,839
go yeah

00:42:18,640 --> 00:42:22,139
um

00:42:19,000 --> 00:42:22,139
[Music]

00:42:25,359 --> 00:42:33,760
it's gotta be in here somewhere

00:42:30,720 --> 00:42:33,760
so um

00:42:34,079 --> 00:42:38,400
yeah that'll give you an idea of what

00:42:35,520 --> 00:42:40,160
i'm doing to run this uh

00:42:38,400 --> 00:42:42,880
i'll just leave it at that i can't like

00:42:40,160 --> 00:42:45,839
i said i can't remember who's

00:42:42,880 --> 00:42:45,839
um

00:42:47,440 --> 00:42:54,160
i can't remember the command anyway

00:42:50,560 --> 00:42:56,880
um so this the image builder role was

00:42:54,160 --> 00:42:57,440
was uh critical but then the other thing

00:42:56,880 --> 00:42:59,200
that was

00:42:57,440 --> 00:43:01,200
that i thought was really important and

00:42:59,200 --> 00:43:03,440
something that i thought was interesting

00:43:01,200 --> 00:43:05,040
to everyone was was that the storage

00:43:03,440 --> 00:43:08,160
role in the context of

00:43:05,040 --> 00:43:11,200
building for uh uh

00:43:08,160 --> 00:43:12,800
for aws is tough and dusty we've talked

00:43:11,200 --> 00:43:16,560
about this and this is in the

00:43:12,800 --> 00:43:19,599
this goes back to the the um

00:43:16,560 --> 00:43:22,000
the udev rules that luca was writing

00:43:19,599 --> 00:43:22,800
for core os and that we were talking

00:43:22,000 --> 00:43:25,280
about with

00:43:22,800 --> 00:43:26,800
uh talking about the upstream bug for

00:43:25,280 --> 00:43:30,560
for this

00:43:26,800 --> 00:43:34,319
where the devices in

00:43:30,560 --> 00:43:37,760
in on ec2 the ebs volumes

00:43:34,319 --> 00:43:39,280
they come in as uh pseudo pci devices in

00:43:37,760 --> 00:43:41,119
in the way that the hyper convergence

00:43:39,280 --> 00:43:43,839
works um

00:43:41,119 --> 00:43:44,800
terry bowling thanks neil um and it's

00:43:43,839 --> 00:43:47,599
fabulous

00:43:44,800 --> 00:43:49,200
you know it's he's iterating over it uh

00:43:47,599 --> 00:43:52,079
constantly and he's doing a much

00:43:49,200 --> 00:43:53,520
you know like increasing the uh the

00:43:52,079 --> 00:43:56,560
robustness of the

00:43:53,520 --> 00:43:58,400
of the um the playbook all the time

00:43:56,560 --> 00:44:00,160
so i'm super grateful to the work that

00:43:58,400 --> 00:44:03,200
he's done

00:44:00,160 --> 00:44:07,280
and just want to call that out

00:44:03,200 --> 00:44:10,160
so so the storage devices though um

00:44:07,280 --> 00:44:11,839
the way that we call them out in the

00:44:10,160 --> 00:44:15,520
configuration

00:44:11,839 --> 00:44:19,200
uh as a device the device names are

00:44:15,520 --> 00:44:22,079
old school devices slash dev sdg sdf

00:44:19,200 --> 00:44:23,920
right yes and but that enumeration

00:44:22,079 --> 00:44:24,720
doesn't carry over into the operating

00:44:23,920 --> 00:44:26,240
system

00:44:24,720 --> 00:44:28,800
uh once you get into the operating

00:44:26,240 --> 00:44:30,800
system that that device name

00:44:28,800 --> 00:44:32,640
the the the device name that you've

00:44:30,800 --> 00:44:36,560
associated with the ebs

00:44:32,640 --> 00:44:39,599
volume the the id goes away

00:44:36,560 --> 00:44:41,839
um it's it's in the nvme info

00:44:39,599 --> 00:44:42,720
for the for the device but it's no

00:44:41,839 --> 00:44:44,880
longer

00:44:42,720 --> 00:44:47,040
uh but it's no long but it's not a sim

00:44:44,880 --> 00:44:48,400
link right so whatever you named it that

00:44:47,040 --> 00:44:50,079
doesn't exist

00:44:48,400 --> 00:44:51,680
um you have to go back and just and

00:44:50,079 --> 00:44:56,240
rediscover that

00:44:51,680 --> 00:45:00,000
or um use uh the udev rules that luca

00:44:56,240 --> 00:45:03,280
pro that luca provided in core os um

00:45:00,000 --> 00:45:06,160
to uh um to develop that and i

00:45:03,280 --> 00:45:06,640
actually have a copper copper repository

00:45:06,160 --> 00:45:11,520
for

00:45:06,640 --> 00:45:11,520
um for the ec2 utils that came out of

00:45:13,040 --> 00:45:21,200
the uh

00:45:18,079 --> 00:45:24,400
um the amazon linux

00:45:21,200 --> 00:45:25,760
instances so i built uh built this ec2

00:45:24,400 --> 00:45:29,680
net utils

00:45:25,760 --> 00:45:32,480
uh so that it can could include both the

00:45:29,680 --> 00:45:33,839
the the network utilities for uh

00:45:32,480 --> 00:45:36,560
managing the

00:45:33,839 --> 00:45:37,520
the ethernet or the uh network

00:45:36,560 --> 00:45:40,640
interfaces

00:45:37,520 --> 00:45:41,520
and then this the ec2 utils uh so that

00:45:40,640 --> 00:45:44,480
you could

00:45:41,520 --> 00:45:45,359
enumerate the devices but luca's rules

00:45:44,480 --> 00:45:47,839
in my opinion

00:45:45,359 --> 00:45:47,839
are

00:45:50,640 --> 00:45:53,920
they are more

00:45:54,079 --> 00:45:59,680
i think they're they're simpler

00:45:57,359 --> 00:46:01,359
right so he he creates a simpler rule

00:45:59,680 --> 00:46:04,720
and gets the same result

00:46:01,359 --> 00:46:05,440
so um i would encourage you if you want

00:46:04,720 --> 00:46:08,400
to

00:46:05,440 --> 00:46:09,520
you know to to leverage the this package

00:46:08,400 --> 00:46:11,760
for

00:46:09,520 --> 00:46:13,680
doing it the way that amazon is doing it

00:46:11,760 --> 00:46:17,280
in amazon linux

00:46:13,680 --> 00:46:18,800
but if you uh but if you want to see a

00:46:17,280 --> 00:46:20,960
very effective and efficient way of

00:46:18,800 --> 00:46:24,079
doing it i think that luca b

00:46:20,960 --> 00:46:27,680
um made uh made a great

00:46:24,079 --> 00:46:30,800
um made a great set of rules

00:46:27,680 --> 00:46:32,880
so um

00:46:30,800 --> 00:46:36,480
well i've got a heavy a heavy hand on

00:46:32,880 --> 00:46:36,480
this uh on this pad

00:46:37,359 --> 00:46:42,240
um so the so storage so the storage

00:46:41,119 --> 00:46:44,560
configuration

00:46:42,240 --> 00:46:45,359
becomes rather important so one of the

00:46:44,560 --> 00:46:48,160
other things is

00:46:45,359 --> 00:46:49,440
is that the volumes that are that you're

00:46:48,160 --> 00:46:53,280
writing the

00:46:49,440 --> 00:46:55,839
um the images to is a volume that you

00:46:53,280 --> 00:46:58,000
can restore from snapshot

00:46:55,839 --> 00:46:59,040
this is not something that i've put in

00:46:58,000 --> 00:47:01,680
just yet but it's

00:46:59,040 --> 00:47:02,960
it's on my my wish list for things that

00:47:01,680 --> 00:47:05,920
i need to do

00:47:02,960 --> 00:47:05,920
and that is that

00:47:06,720 --> 00:47:12,560
the one day this will

00:47:10,000 --> 00:47:12,560
advance

00:47:16,319 --> 00:47:23,599
um is that this the uh

00:47:20,160 --> 00:47:25,520
the um the devices themselves have to be

00:47:23,599 --> 00:47:25,760
enumerated correctly you have to go back

00:47:25,520 --> 00:47:28,960
in

00:47:25,760 --> 00:47:29,359
and discover them uh the nvme cli gives

00:47:28,960 --> 00:47:30,960
the

00:47:29,359 --> 00:47:32,640
information that you need but if you're

00:47:30,960 --> 00:47:33,920
inansible that's not

00:47:32,640 --> 00:47:35,680
you know that's not necessarily

00:47:33,920 --> 00:47:37,280
something that you're using and unless

00:47:35,680 --> 00:47:40,480
you install the nvme as

00:47:37,280 --> 00:47:43,359
cli so this role storage

00:47:40,480 --> 00:47:45,760
you have to remember to go back and

00:47:43,359 --> 00:47:49,119
re-establish what the devices are

00:47:45,760 --> 00:47:53,280
or add the ec2 utils or lucas

00:47:49,119 --> 00:47:55,680
udev rules into into the system to

00:47:53,280 --> 00:47:56,640
to get the right uh the right device

00:47:55,680 --> 00:47:59,040
information

00:47:56,640 --> 00:48:00,000
and i think that's handy just uh in

00:47:59,040 --> 00:48:02,160
general

00:48:00,000 --> 00:48:04,000
not uh not just specifically in the

00:48:02,160 --> 00:48:07,040
context of this

00:48:04,000 --> 00:48:09,680
this configuration

00:48:07,040 --> 00:48:10,240
so i i pointed out that i did the i am

00:48:09,680 --> 00:48:12,000
role

00:48:10,240 --> 00:48:13,520
uh in associated with the jenkins

00:48:12,000 --> 00:48:16,400
instance and

00:48:13,520 --> 00:48:17,520
that was that was because permanent

00:48:16,400 --> 00:48:20,400
credentials are

00:48:17,520 --> 00:48:21,119
what i say here a waste of your time the

00:48:20,400 --> 00:48:23,920
same ins

00:48:21,119 --> 00:48:25,920
the same instance you have for ansible

00:48:23,920 --> 00:48:28,720
engine can drive your jenkins server

00:48:25,920 --> 00:48:29,359
and uh it's possible we could do an awx

00:48:28,720 --> 00:48:32,319
server

00:48:29,359 --> 00:48:33,760
um at some point in that and or or an

00:48:32,319 --> 00:48:36,960
ansible tower and

00:48:33,760 --> 00:48:40,160
and uh um and use that

00:48:36,960 --> 00:48:41,440
for callback functions um one of the

00:48:40,160 --> 00:48:43,839
things that i think is

00:48:41,440 --> 00:48:45,119
completely underutilized in in the

00:48:43,839 --> 00:48:47,520
context of

00:48:45,119 --> 00:48:50,079
public cloud is uh the cloud config and

00:48:47,520 --> 00:48:53,200
cloud init

00:48:50,079 --> 00:48:54,960
and uh i'm sorry

00:48:53,200 --> 00:48:56,319
ignition dusty i'm talking about

00:48:54,960 --> 00:48:59,280
ignition

00:48:56,319 --> 00:48:59,839
um so uh bringing that whole process

00:48:59,280 --> 00:49:01,839
together

00:48:59,839 --> 00:49:03,280
is uh is something that i think is

00:49:01,839 --> 00:49:06,319
really important

00:49:03,280 --> 00:49:08,079
so um

00:49:06,319 --> 00:49:10,319
there's nothing and there's nothing stop

00:49:08,079 --> 00:49:11,680
us from killing the entire architecture

00:49:10,319 --> 00:49:17,839
and leaving one

00:49:11,680 --> 00:49:17,839
uh pipeline in place

00:49:17,920 --> 00:49:25,760
um and with that i'll i'll uh

00:49:21,839 --> 00:49:25,760
i've left two minutes for questions

00:49:27,680 --> 00:49:32,720
so neil asked does aws have a fancy

00:49:30,160 --> 00:49:36,319
native way to configure ignition configs

00:49:32,720 --> 00:49:38,559
no the answer to that is that

00:49:36,319 --> 00:49:41,680
in almost in almost all the

00:49:38,559 --> 00:49:44,960
documentation i see i see a lot of

00:49:41,680 --> 00:49:48,079
just um like

00:49:44,960 --> 00:49:51,680
stepping away from the the cloud config

00:49:48,079 --> 00:49:54,000
or um or the um the

00:49:51,680 --> 00:49:55,839
the json configuration that you would

00:49:54,000 --> 00:49:59,119
require for an ignition

00:49:55,839 --> 00:50:02,319
uh config the all the way down to

00:49:59,119 --> 00:50:05,359
just uh issuing uh bash commands

00:50:02,319 --> 00:50:08,480
on the at the user data level

00:50:05,359 --> 00:50:09,760
and um if you look at uh some of the

00:50:08,480 --> 00:50:13,359
things that are done with

00:50:09,760 --> 00:50:16,400
the the um

00:50:13,359 --> 00:50:17,520
uh the efs team they have done some

00:50:16,400 --> 00:50:19,119
things that are

00:50:17,520 --> 00:50:21,040
similar to what i would expect to have

00:50:19,119 --> 00:50:22,559
happen in vendor data but they

00:50:21,040 --> 00:50:24,800
inject it into the user data

00:50:22,559 --> 00:50:28,960
configuration in the

00:50:24,800 --> 00:50:31,280
at launch and um and it is always done

00:50:28,960 --> 00:50:33,599
in a scripted fashion rather than yeah

00:50:31,280 --> 00:50:35,839
that's ex and neil your your sentiment

00:50:33,599 --> 00:50:38,880
there is is exactly like mine

00:50:35,839 --> 00:50:41,520
so i uh tend to and i

00:50:38,880 --> 00:50:43,200
and i have i think i have an example uh

00:50:41,520 --> 00:50:46,800
right here

00:50:43,200 --> 00:50:49,359
um yeah so i tend i tend to start

00:50:46,800 --> 00:50:51,280
and end with so uh i don't have an

00:50:49,359 --> 00:50:54,559
ignition script up right now so

00:50:51,280 --> 00:50:56,240
just bear with me um but uh

00:50:54,559 --> 00:50:59,040
but i'm doing this on scent like i said

00:50:56,240 --> 00:51:02,079
centos s7 and and rail seven and eight

00:50:59,040 --> 00:51:04,000
so um so

00:51:02,079 --> 00:51:05,599
uh for me the most you know the most

00:51:04,000 --> 00:51:08,880
important thing is to

00:51:05,599 --> 00:51:08,880
is to ensure that

00:51:10,079 --> 00:51:15,920
that the configuration is set so that

00:51:13,359 --> 00:51:15,920
you can

00:51:18,800 --> 00:51:22,720
so that it can be read by cloudinet and

00:51:20,640 --> 00:51:24,720
i can get it out of the analyze

00:51:22,720 --> 00:51:25,920
so if i need to if i need to do a cloud

00:51:24,720 --> 00:51:29,119
init analyze i can

00:51:25,920 --> 00:51:33,359
i can figure out what happened

00:51:29,119 --> 00:51:34,720
so uh so no no shebang's for me if

00:51:33,359 --> 00:51:36,559
you're doing a run command it should

00:51:34,720 --> 00:51:40,079
happen in the context of a list like

00:51:36,559 --> 00:51:40,079
it's supposed to in sub-process

00:51:47,920 --> 00:51:53,040
anything else any other questions

00:52:01,680 --> 00:52:05,119
thanks i'm i'm super excited about it

00:52:03,839 --> 00:52:10,240
and and uh

00:52:05,119 --> 00:52:10,240
uh i i can tell you right now yeah

00:52:10,480 --> 00:52:14,319
but it's getting better deal i i so you

00:52:12,800 --> 00:52:15,280
grumble about let's build a little bit

00:52:14,319 --> 00:52:17,440
but i tell you

00:52:15,280 --> 00:52:18,559
uh you know everybody is getting a lot

00:52:17,440 --> 00:52:21,119
more excited about it

00:52:18,559 --> 00:52:22,400
lars you know with lars in there doing a

00:52:21,119 --> 00:52:25,920
lot of work on it

00:52:22,400 --> 00:52:26,720
it was yeah it is um but but it carries

00:52:25,920 --> 00:52:28,400
that legacy

00:52:26,720 --> 00:52:30,559
and the you know a lot of the things are

00:52:28,400 --> 00:52:33,920
going in the right direction i think and

00:52:30,559 --> 00:52:35,839
and there's there's a lot of focus on on

00:52:33,920 --> 00:52:37,520
being able to build a much broader set

00:52:35,839 --> 00:52:40,160
of tools with um

00:52:37,520 --> 00:52:40,800
with just the one you know or broader

00:52:40,160 --> 00:52:43,599
set of

00:52:40,800 --> 00:52:45,440
results with the one tool so i'm i'm

00:52:43,599 --> 00:52:48,240
really excited about it and

00:52:45,440 --> 00:52:48,720
we'll continue to work on on integrating

00:52:48,240 --> 00:52:50,559
it

00:52:48,720 --> 00:52:52,720
and then building this iterative process

00:52:50,559 --> 00:52:55,040
so that we can all look at it together

00:52:52,720 --> 00:52:56,880
so i'm gonna i'll submit this talk again

00:52:55,040 --> 00:53:01,839
and we'll look at what it looks like the

00:52:56,880 --> 00:53:01,839
next time

00:53:06,800 --> 00:53:12,319
excellent yeah thanks

00:53:10,160 --> 00:53:14,640
thank you thanks everyone for for

00:53:12,319 --> 00:53:16,800
participating i really enjoyed this and

00:53:14,640 --> 00:53:18,160
and i hope we can um we can work on it

00:53:16,800 --> 00:53:20,720
together more

00:53:18,160 --> 00:53:22,720
and i'm always on irc i'll just say that

00:53:20,720 --> 00:53:26,480
so if anybody wants to reach out

00:53:22,720 --> 00:53:31,359
um super happy to uh um

00:53:26,480 --> 00:53:31,359
to respond back and i'm davdunk

00:53:33,160 --> 00:53:36,160

YouTube URL: https://www.youtube.com/watch?v=DYYaaCtFR8M


