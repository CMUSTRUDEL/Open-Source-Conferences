Title: Fedora CoreOS: What's Now, What's Next
Publication date: 2020-09-15
Playlist: Nest with Fedora 2020
Description: 
	Come learn about the state of Fedora CoreOS, what we're planning for the future, and how Fedora CoreOS is being used in the community.

Presented at Nest With Fedora 2020.
Captions: 
	00:00:02,720 --> 00:00:06,240
i'll get started

00:00:04,400 --> 00:00:08,240
first off i'd like to say hello my name

00:00:06,240 --> 00:00:10,719
is dusty mabe

00:00:08,240 --> 00:00:13,040
i work uh with the fedora project quite

00:00:10,719 --> 00:00:15,519
a bit i'm employed by red hat

00:00:13,040 --> 00:00:16,320
and i focus mostly on fedora coreos and

00:00:15,519 --> 00:00:19,119
fedora cloud

00:00:16,320 --> 00:00:22,880
and i'm going to talk about fedora core

00:00:19,119 --> 00:00:22,880
west what's now and what's next

00:00:23,039 --> 00:00:29,439
so in today's talk i'm going to

00:00:27,359 --> 00:00:31,039
briefly talk about what was which was

00:00:29,439 --> 00:00:32,399
container linux and atomic host i'm

00:00:31,039 --> 00:00:35,600
going to talk about what

00:00:32,399 --> 00:00:38,000
what's now and then what's coming uh

00:00:35,600 --> 00:00:39,520
next i'm also going to try to answer

00:00:38,000 --> 00:00:41,440
some questions

00:00:39,520 --> 00:00:43,600
and unfortunately i don't think i have a

00:00:41,440 --> 00:00:45,600
lot of time for demo

00:00:43,600 --> 00:00:47,280
but i'm not sure if people want to stick

00:00:45,600 --> 00:00:48,640
around afterwards in the room if we

00:00:47,280 --> 00:00:51,360
don't get kicked out

00:00:48,640 --> 00:00:54,399
i can do a brief demo for people and

00:00:51,360 --> 00:00:58,879
have people ask questions as i go

00:00:54,399 --> 00:01:02,000
so first of all what was so what was

00:00:58,879 --> 00:01:05,199
uh what used to exist was

00:01:02,000 --> 00:01:06,640
a container linux and atomic host

00:01:05,199 --> 00:01:08,240
they were both container focused

00:01:06,640 --> 00:01:10,880
operating systems um

00:01:08,240 --> 00:01:13,040
container linux was based on gentoo and

00:01:10,880 --> 00:01:14,320
atomic host was based on fedora slash

00:01:13,040 --> 00:01:18,880
rel

00:01:14,320 --> 00:01:22,159
and used rpms as input container linux

00:01:18,880 --> 00:01:25,360
had an a b partition scheme for updates

00:01:22,159 --> 00:01:26,400
so used an image based update strategy

00:01:25,360 --> 00:01:29,680
and atomic host

00:01:26,400 --> 00:01:32,479
used rpmos tree as technology

00:01:29,680 --> 00:01:34,479
and then container linux used ignition

00:01:32,479 --> 00:01:37,840
for provisioning and atomic host had

00:01:34,479 --> 00:01:38,479
anaconda cloud init so anaconda for bare

00:01:37,840 --> 00:01:41,040
metal

00:01:38,479 --> 00:01:42,079
install type workflow and then cloud net

00:01:41,040 --> 00:01:44,560
for anything

00:01:42,079 --> 00:01:46,640
in the cloud that started with an image

00:01:44,560 --> 00:01:49,920
so that's what existed

00:01:46,640 --> 00:01:52,560
but what what do we have now

00:01:49,920 --> 00:01:54,079
so now we have fedora core os which is

00:01:52,560 --> 00:01:57,360
an emerging fedora edition

00:01:54,079 --> 00:01:59,360
um and fedora coreos came from putting

00:01:57,360 --> 00:01:59,920
these two communities together so core

00:01:59,360 --> 00:02:02,799
os

00:01:59,920 --> 00:02:06,159
uh the companies container linux and

00:02:02,799 --> 00:02:08,640
then also project atomics atomic host

00:02:06,159 --> 00:02:10,800
this mostly was facilitated by the

00:02:08,640 --> 00:02:11,840
purchase of coreos the company by red

00:02:10,800 --> 00:02:14,160
hat

00:02:11,840 --> 00:02:15,360
but we've uh we've been harmonizing ever

00:02:14,160 --> 00:02:17,440
since um

00:02:15,360 --> 00:02:18,959
but what does fedora core os do what is

00:02:17,440 --> 00:02:21,120
it comprised of so

00:02:18,959 --> 00:02:22,160
fedora coreos incorporates the container

00:02:21,120 --> 00:02:24,319
linux

00:02:22,160 --> 00:02:25,440
philosophy the container linux

00:02:24,319 --> 00:02:28,000
provisioning stack

00:02:25,440 --> 00:02:29,920
and the container linux cloud native

00:02:28,000 --> 00:02:32,959
expertise

00:02:29,920 --> 00:02:35,840
and it also incorporates the atomic host

00:02:32,959 --> 00:02:37,280
foundation on top of fedora the update

00:02:35,840 --> 00:02:42,239
stack from atomic host

00:02:37,280 --> 00:02:42,239
and also enhanced security with sd linux

00:02:43,120 --> 00:02:47,680
i want to take a brief moment and talk a

00:02:45,920 --> 00:02:49,280
little bit about the philosophy behind

00:02:47,680 --> 00:02:51,360
behind container linux because you'll

00:02:49,280 --> 00:02:53,120
see a lot of it ring true

00:02:51,360 --> 00:02:55,440
when i switch over here in just a second

00:02:53,120 --> 00:02:57,440
and talk a little bit more about

00:02:55,440 --> 00:02:58,480
the high level features of fedora core

00:02:57,440 --> 00:03:00,720
os

00:02:58,480 --> 00:03:02,159
first of all container linux had a

00:03:00,720 --> 00:03:04,879
philosophy of

00:03:02,159 --> 00:03:05,680
automatic updates by default which means

00:03:04,879 --> 00:03:07,440
that

00:03:05,680 --> 00:03:09,040
there's no by default there's no

00:03:07,440 --> 00:03:12,000
interaction for administrators

00:03:09,040 --> 00:03:13,360
um in order to stay up to date which

00:03:12,000 --> 00:03:16,720
typically means that

00:03:13,360 --> 00:03:19,599
systems uh are

00:03:16,720 --> 00:03:20,319
you know have security fixes applied in

00:03:19,599 --> 00:03:23,200
a more

00:03:20,319 --> 00:03:24,560
um you know timely manner and in general

00:03:23,200 --> 00:03:28,319
just don't get forgotten about

00:03:24,560 --> 00:03:31,200
and uh open to cves for a very long time

00:03:28,319 --> 00:03:32,640
um another philosophy that they have was

00:03:31,200 --> 00:03:35,280
basically all nodes start

00:03:32,640 --> 00:03:37,040
from around the same starting point so

00:03:35,280 --> 00:03:38,879
they use ignition to provision a node

00:03:37,040 --> 00:03:40,319
wherever it started whether it be a bare

00:03:38,879 --> 00:03:43,680
metal node or

00:03:40,319 --> 00:03:46,159
in the cloud which is interesting

00:03:43,680 --> 00:03:47,440
they also take immutable infrastructure

00:03:46,159 --> 00:03:50,640
to heart

00:03:47,440 --> 00:03:53,120
so in general if you need a change let's

00:03:50,640 --> 00:03:55,200
update our configuration and reprovision

00:03:53,120 --> 00:03:56,400
this is a lot easier in a cloud native

00:03:55,200 --> 00:03:59,599
environment than

00:03:56,400 --> 00:04:00,319
say on in bare metal but that was kind

00:03:59,599 --> 00:04:02,319
of

00:04:00,319 --> 00:04:04,480
the path at which they were coming from

00:04:02,319 --> 00:04:08,000
and it tends to make a lot of sense

00:04:04,480 --> 00:04:11,599
in today's world um and then also

00:04:08,000 --> 00:04:13,200
from the perspective of uh host updates

00:04:11,599 --> 00:04:15,840
have our users run software in

00:04:13,200 --> 00:04:16,639
containers that way they depend less on

00:04:15,840 --> 00:04:20,160
the host

00:04:16,639 --> 00:04:20,799
and your host updates are less likely to

00:04:20,160 --> 00:04:23,840
break you

00:04:20,799 --> 00:04:25,600
and break your application

00:04:23,840 --> 00:04:27,360
so now let's talk about fedora core os

00:04:25,600 --> 00:04:29,360
features and you'll see a lot of that

00:04:27,360 --> 00:04:30,000
container linux philosophy come through

00:04:29,360 --> 00:04:33,280
here

00:04:30,000 --> 00:04:35,360
the first one being automatic updates so

00:04:33,280 --> 00:04:36,320
fedora coreos features automatic updates

00:04:35,360 --> 00:04:39,759
by default

00:04:36,320 --> 00:04:42,080
um the in order to deliver

00:04:39,759 --> 00:04:43,520
automatic updates they need to be

00:04:42,080 --> 00:04:45,680
reliable updates

00:04:43,520 --> 00:04:46,960
right we uh we can't have systems

00:04:45,680 --> 00:04:49,600
randomly breaking

00:04:46,960 --> 00:04:51,040
and sysadmins you know getting paged and

00:04:49,600 --> 00:04:51,680
stuff in the middle of the night or

00:04:51,040 --> 00:04:54,560
whenever

00:04:51,680 --> 00:04:55,199
the update decides to come through

00:04:54,560 --> 00:04:56,960
usually

00:04:55,199 --> 00:04:58,880
in the old model without automatic

00:04:56,960 --> 00:05:01,120
updates um there would be some sort of

00:04:58,880 --> 00:05:02,320
plan involved oh i'm gonna update x

00:05:01,120 --> 00:05:05,199
systems

00:05:02,320 --> 00:05:06,639
uh and i'll be around in case something

00:05:05,199 --> 00:05:08,320
goes bad right

00:05:06,639 --> 00:05:11,120
with automatic updates they need to be

00:05:08,320 --> 00:05:13,440
reliable we don't want to break people

00:05:11,120 --> 00:05:15,440
so we basically have extensive tests in

00:05:13,440 --> 00:05:18,479
our automated ci pipelines

00:05:15,440 --> 00:05:20,160
every time a build gets created every

00:05:18,479 --> 00:05:23,039
time a pr gets opened

00:05:20,160 --> 00:05:24,000
we test things but you know there's

00:05:23,039 --> 00:05:25,759
things that we can't catch

00:05:24,000 --> 00:05:27,600
with tests sometimes that happens so we

00:05:25,759 --> 00:05:29,440
also have several update streams to

00:05:27,600 --> 00:05:33,759
preview what is coming

00:05:29,440 --> 00:05:35,759
uh so users can run those update streams

00:05:33,759 --> 00:05:38,080
and preview what's coming and they know

00:05:35,759 --> 00:05:39,840
if something's gonna break them

00:05:38,080 --> 00:05:41,520
the other thing that we have in place to

00:05:39,840 --> 00:05:42,560
kind of help our updates be more

00:05:41,520 --> 00:05:45,680
reliable

00:05:42,560 --> 00:05:49,120
are manage upgrade rollouts so basically

00:05:45,680 --> 00:05:51,520
when we start an upgrade it won't

00:05:49,120 --> 00:05:53,840
get go to everybody immediately it will

00:05:51,520 --> 00:05:57,360
go to everybody over a period of time

00:05:53,840 --> 00:05:59,440
call it 24 48 hours you know

00:05:57,360 --> 00:06:01,600
three days four days we can we can

00:05:59,440 --> 00:06:02,479
control how long we want the update to

00:06:01,600 --> 00:06:04,479
roll out

00:06:02,479 --> 00:06:06,160
and that means that it's a window over

00:06:04,479 --> 00:06:07,360
time different people are going to get

00:06:06,160 --> 00:06:09,440
the update

00:06:07,360 --> 00:06:10,880
and if some of the early people that win

00:06:09,440 --> 00:06:13,360
the lottery um

00:06:10,880 --> 00:06:15,360
get the update and it it breaks them

00:06:13,360 --> 00:06:16,400
they can let us know and we can stop the

00:06:15,360 --> 00:06:18,639
update rollout

00:06:16,400 --> 00:06:20,240
to to do some investigation before we

00:06:18,639 --> 00:06:23,680
let the the rest of the

00:06:20,240 --> 00:06:25,360
people in the window update um

00:06:23,680 --> 00:06:28,080
but you know sometimes things will go

00:06:25,360 --> 00:06:29,039
wrong so when they do we have rpm mostly

00:06:28,080 --> 00:06:32,000
rollback

00:06:29,039 --> 00:06:34,160
which can be used to go back and in the

00:06:32,000 --> 00:06:37,280
future we have an automatic we

00:06:34,160 --> 00:06:39,360
we want to have automated rollbacks so a

00:06:37,280 --> 00:06:41,440
user can specify

00:06:39,360 --> 00:06:43,600
you know when we boot when we boot our

00:06:41,440 --> 00:06:46,880
system into a new update

00:06:43,600 --> 00:06:47,600
run these three checks and if they don't

00:06:46,880 --> 00:06:49,919
pass

00:06:47,600 --> 00:06:50,639
then i want you to go back and you know

00:06:49,919 --> 00:06:52,160
maybe

00:06:50,639 --> 00:06:54,240
send me an email or something i'm not

00:06:52,160 --> 00:06:56,319
sure but the idea there is that

00:06:54,240 --> 00:06:57,440
if somehow the application is affected

00:06:56,319 --> 00:06:59,919
by the update

00:06:57,440 --> 00:07:02,880
we can automatically go back and it's

00:06:59,919 --> 00:07:02,880
not panic mode

00:07:03,680 --> 00:07:07,919
so okay i want to talk a little bit more

00:07:05,199 --> 00:07:11,039
about multiple update streams so

00:07:07,919 --> 00:07:13,039
we have uh three update streams that we

00:07:11,039 --> 00:07:14,880
offer to users one is next one is

00:07:13,039 --> 00:07:18,080
testing one is stable

00:07:14,880 --> 00:07:20,639
next is kind of experimental features or

00:07:18,080 --> 00:07:23,360
uh you know like fedora major rebases so

00:07:20,639 --> 00:07:25,440
like when fedor 33 beta comes out

00:07:23,360 --> 00:07:27,520
um you know we would try to rebase to

00:07:25,440 --> 00:07:30,400
that pretty soon and get feedback

00:07:27,520 --> 00:07:31,919
on things that you know need to be

00:07:30,400 --> 00:07:33,759
looked at there

00:07:31,919 --> 00:07:35,599
testing itself is a preview of what's

00:07:33,759 --> 00:07:38,560
coming to stable

00:07:35,599 --> 00:07:40,479
so that is basically a point in time

00:07:38,560 --> 00:07:41,360
snapshot of the fedora stable rpm

00:07:40,479 --> 00:07:44,080
content

00:07:41,360 --> 00:07:45,680
and then after a period of time we will

00:07:44,080 --> 00:07:48,080
promote that to the stable

00:07:45,680 --> 00:07:49,520
uh stream which is the most reliable

00:07:48,080 --> 00:07:51,440
stream offered

00:07:49,520 --> 00:07:53,599
the goals here are to publish new

00:07:51,440 --> 00:07:56,160
releases into the update streams

00:07:53,599 --> 00:07:57,759
at approximately a two week cadence and

00:07:56,160 --> 00:08:00,800
then also

00:07:57,759 --> 00:08:02,479
to really hope to find issues in next

00:08:00,800 --> 00:08:03,199
and testing streams before they hit

00:08:02,479 --> 00:08:06,960
stable

00:08:03,199 --> 00:08:08,639
we don't want to break people and staple

00:08:06,960 --> 00:08:10,000
this is kind of a complicated slide in

00:08:08,639 --> 00:08:12,240
the interest of time i'm not going to go

00:08:10,000 --> 00:08:15,759
into too much detail but

00:08:12,240 --> 00:08:16,639
uh down here essentially i'll run

00:08:15,759 --> 00:08:18,960
through

00:08:16,639 --> 00:08:19,680
um you know how our update promotion

00:08:18,960 --> 00:08:21,840
works

00:08:19,680 --> 00:08:24,240
so this is essentially the yum body you

00:08:21,840 --> 00:08:26,720
know yum repositories and it goes

00:08:24,240 --> 00:08:28,800
it updates with time so at a point in

00:08:26,720 --> 00:08:29,680
time we'll essentially take a snapshot

00:08:28,800 --> 00:08:32,719
of what is in

00:08:29,680 --> 00:08:34,320
the stable repositories and we will

00:08:32,719 --> 00:08:37,680
build a testing stream

00:08:34,320 --> 00:08:41,680
uh you know build off of that

00:08:37,680 --> 00:08:43,680
let's call it 31 20 20 0323 so march

00:08:41,680 --> 00:08:46,399
23rd

00:08:43,680 --> 00:08:48,880
and then we'll release it and after two

00:08:46,399 --> 00:08:52,080
weeks there's a two week period in here

00:08:48,880 --> 00:08:53,200
where hopefully nobody finds issues but

00:08:52,080 --> 00:08:56,399
if they do

00:08:53,200 --> 00:08:59,760
then we basically will uh bump testing

00:08:56,399 --> 00:09:01,839
and and go again but if nobody finds

00:08:59,760 --> 00:09:04,560
issues then after two weeks

00:09:01,839 --> 00:09:06,399
we promote that content to stable so we

00:09:04,560 --> 00:09:10,000
have a lot of control here

00:09:06,399 --> 00:09:12,160
which is very useful okay

00:09:10,000 --> 00:09:13,920
so the next feature i want to talk about

00:09:12,160 --> 00:09:16,000
is automated provisioning so fedora

00:09:13,920 --> 00:09:18,160
coreos uses ignition

00:09:16,000 --> 00:09:19,760
like container linux did to automate

00:09:18,160 --> 00:09:22,080
provisioning any logic

00:09:19,760 --> 00:09:22,959
for a machine's lifetime is kind of

00:09:22,080 --> 00:09:25,519
encoded

00:09:22,959 --> 00:09:27,120
in the config in the ignition config so

00:09:25,519 --> 00:09:28,560
it's very easy to automatically

00:09:27,120 --> 00:09:30,000
reprovision nodes

00:09:28,560 --> 00:09:32,000
i actually had something like this hit

00:09:30,000 --> 00:09:34,160
me earlier this year where i lost

00:09:32,000 --> 00:09:35,120
connectivity to a box that was sitting

00:09:34,160 --> 00:09:38,320
in the

00:09:35,120 --> 00:09:40,560
on my desk in the red hat office but

00:09:38,320 --> 00:09:42,240
because of covid we were not allowed to

00:09:40,560 --> 00:09:44,080
get into the office so

00:09:42,240 --> 00:09:46,000
i took the same ignition config that i

00:09:44,080 --> 00:09:47,920
had used to provision that node and spun

00:09:46,000 --> 00:09:50,640
up a vm locally

00:09:47,920 --> 00:09:52,720
on my desktop here at home and i was

00:09:50,640 --> 00:09:55,440
back up and running

00:09:52,720 --> 00:09:56,800
and also with ignition we start at the

00:09:55,440 --> 00:09:58,560
same starting point whether we're on

00:09:56,800 --> 00:10:00,320
bare metal or cloud

00:09:58,560 --> 00:10:02,399
so you can really use ignition

00:10:00,320 --> 00:10:03,279
everywhere as opposed to having to have

00:10:02,399 --> 00:10:06,640
two different

00:10:03,279 --> 00:10:09,920
strategies for provisioning

00:10:06,640 --> 00:10:13,600
whether you're on bare metal or you know

00:10:09,920 --> 00:10:16,720
in the cloud in a little bit more detail

00:10:13,600 --> 00:10:19,839
about ignition it's a declarative json

00:10:16,720 --> 00:10:22,240
file essentially it runs exactly or

00:10:19,839 --> 00:10:25,519
during the boot process

00:10:22,240 --> 00:10:27,920
ignition runs exactly once

00:10:25,519 --> 00:10:29,839
and it can write files it can do system

00:10:27,920 --> 00:10:31,360
to units users groups

00:10:29,839 --> 00:10:33,040
partition disks it can do some

00:10:31,360 --> 00:10:35,120
complicated things

00:10:33,040 --> 00:10:37,279
but in general if you provided an

00:10:35,120 --> 00:10:38,399
ignition config that is either invalid

00:10:37,279 --> 00:10:40,240
or

00:10:38,399 --> 00:10:43,279
you know a part of it fails for whatever

00:10:40,240 --> 00:10:45,760
reason the boot will not continue

00:10:43,279 --> 00:10:46,959
which means you don't get any half

00:10:45,760 --> 00:10:49,519
provision systems

00:10:46,959 --> 00:10:50,800
which can you know kind of be com

00:10:49,519 --> 00:10:53,680
confusing

00:10:50,800 --> 00:10:55,440
if uh if you get a system that's kind of

00:10:53,680 --> 00:10:57,120
working so it doesn't fail health checks

00:10:55,440 --> 00:10:57,839
for whatever reason but there's part of

00:10:57,120 --> 00:10:59,920
it that

00:10:57,839 --> 00:11:03,200
actually didn't get configured correctly

00:10:59,920 --> 00:11:03,200
and you find out much later

00:11:03,279 --> 00:11:08,560
and you know because ignition configs

00:11:05,680 --> 00:11:11,680
are more machine friendly and not really

00:11:08,560 --> 00:11:14,560
pretty to look at or to edit we have

00:11:11,680 --> 00:11:15,680
a another tool called fedora coreos

00:11:14,560 --> 00:11:18,640
config transpiler

00:11:15,680 --> 00:11:20,160
which is used to translate um you know a

00:11:18,640 --> 00:11:23,040
human friendly

00:11:20,160 --> 00:11:23,440
yaml format into ignition json but it's

00:11:23,040 --> 00:11:25,680
not

00:11:23,440 --> 00:11:28,480
just a yaml to json converter there's

00:11:25,680 --> 00:11:32,320
also quite a few little helpers in there

00:11:28,480 --> 00:11:35,440
that will generate uh you know

00:11:32,320 --> 00:11:36,640
big valid ignition for you with a much

00:11:35,440 --> 00:11:38,800
smaller syntax

00:11:36,640 --> 00:11:40,959
and um it's it also has some

00:11:38,800 --> 00:11:44,160
distribution specific stuff

00:11:40,959 --> 00:11:47,279
so for example if we were to take

00:11:44,160 --> 00:11:48,880
ignition and run it on opensuse they

00:11:47,279 --> 00:11:50,639
might have some more distribution

00:11:48,880 --> 00:11:53,519
specific things that they want to add

00:11:50,639 --> 00:11:56,959
in their own config transpiler ignition

00:11:53,519 --> 00:12:00,079
is meant to be kind of distro agnostic

00:11:56,959 --> 00:12:01,680
but yeah so the next feature i want to

00:12:00,079 --> 00:12:04,399
talk about is cloud native and container

00:12:01,680 --> 00:12:07,040
focused so software runs in containers

00:12:04,399 --> 00:12:08,399
um so we have either the pod man or mobi

00:12:07,040 --> 00:12:11,600
engine container runtimes

00:12:08,399 --> 00:12:13,600
mobi engine is a docker and

00:12:11,600 --> 00:12:15,120
uh it's ready for cluster deployments

00:12:13,600 --> 00:12:17,040
because we're using ignition you can

00:12:15,120 --> 00:12:18,160
spin up 100 nodes and have them join a

00:12:17,040 --> 00:12:21,839
cluster

00:12:18,160 --> 00:12:24,000
so kind of bursty type cloud

00:12:21,839 --> 00:12:25,680
ability and then spin them down when

00:12:24,000 --> 00:12:29,120
they're no longer needed um

00:12:25,680 --> 00:12:31,440
and as far as you know being available

00:12:29,120 --> 00:12:34,399
across many platforms right now we have

00:12:31,440 --> 00:12:34,959
alibaba aws azure digitalocean exoscale

00:12:34,399 --> 00:12:38,480
gcp

00:12:34,959 --> 00:12:42,079
openstack volter vmware and kvm

00:12:38,480 --> 00:12:45,200
images qmu images we're also adding

00:12:42,079 --> 00:12:47,839
ibm cloud uh vex host a

00:12:45,200 --> 00:12:50,800
number of others so we are looking to

00:12:47,839 --> 00:12:50,800
try to be everywhere

00:12:50,880 --> 00:12:54,160
the next feature is os versioning and

00:12:52,560 --> 00:12:55,920
security this one i

00:12:54,160 --> 00:12:58,399
like quite a bit especially as somebody

00:12:55,920 --> 00:13:01,760
who looks at a lot of bug reports

00:12:58,399 --> 00:13:02,959
um so fedora coreos uses rpm os3 which i

00:13:01,760 --> 00:13:05,680
like to describe as

00:13:02,959 --> 00:13:06,399
get for your operating system uh which

00:13:05,680 --> 00:13:09,200
means

00:13:06,399 --> 00:13:10,240
you know there's a single content hash

00:13:09,200 --> 00:13:13,120
like a git hash

00:13:10,240 --> 00:13:13,920
that defines um you know every build

00:13:13,120 --> 00:13:16,959
that you've done

00:13:13,920 --> 00:13:20,560
it defines a set of content so

00:13:16,959 --> 00:13:23,279
uh in this example this 8602 860246

00:13:20,560 --> 00:13:25,440
is a short hash that basically says this

00:13:23,279 --> 00:13:28,079
is a set of content and we also have

00:13:25,440 --> 00:13:29,920
a little slightly more meaningful

00:13:28,079 --> 00:13:32,560
version number that's associated with it

00:13:29,920 --> 00:13:34,720
which i like to think of as a tag

00:13:32,560 --> 00:13:36,320
but there's a version number associated

00:13:34,720 --> 00:13:39,199
with a with a content hash

00:13:36,320 --> 00:13:41,279
and that single identifier tells you all

00:13:39,199 --> 00:13:43,600
of the software that was in the release

00:13:41,279 --> 00:13:44,720
and so you as a user you can share that

00:13:43,600 --> 00:13:47,600
information with me

00:13:44,720 --> 00:13:48,959
or with one of the community members for

00:13:47,600 --> 00:13:50,800
fedora core west

00:13:48,959 --> 00:13:53,920
and you can say hey i'm seeing this

00:13:50,800 --> 00:13:55,839
behavior when i boot this release

00:13:53,920 --> 00:13:58,399
you know is this a bug and then we can

00:13:55,839 --> 00:14:01,680
actually take that exact same version

00:13:58,399 --> 00:14:02,399
deploy it and try it out see if we see a

00:14:01,680 --> 00:14:06,399
bug

00:14:02,399 --> 00:14:08,240
which is very powerful with rpm os3 we

00:14:06,399 --> 00:14:08,959
also have read-only file system mounts

00:14:08,240 --> 00:14:10,720
which

00:14:08,959 --> 00:14:12,880
kind of prevents accidental os

00:14:10,720 --> 00:14:13,920
corruption so if you are mrif with a

00:14:12,880 --> 00:14:15,920
glob

00:14:13,920 --> 00:14:17,920
and accidentally try to delete things

00:14:15,920 --> 00:14:19,120
you shouldn't it will prevent that and

00:14:17,920 --> 00:14:22,079
then also

00:14:19,120 --> 00:14:23,760
you know non-sophisticated attacks um

00:14:22,079 --> 00:14:25,600
from modifying the system

00:14:23,760 --> 00:14:27,279
but then we also have sc linux for other

00:14:25,600 --> 00:14:29,360
things like uh you know

00:14:27,279 --> 00:14:31,440
if you have an application in a

00:14:29,360 --> 00:14:33,600
container that gets compromised

00:14:31,440 --> 00:14:34,560
hopefully it can't access anything else

00:14:33,600 --> 00:14:37,279
on the host

00:14:34,560 --> 00:14:39,519
and can only do things to the container

00:14:37,279 --> 00:14:42,160
okay so what's in the os

00:14:39,519 --> 00:14:43,600
so basically latest and greatest in

00:14:42,160 --> 00:14:45,680
fedora

00:14:43,600 --> 00:14:48,320
and then we have the hardware support so

00:14:45,680 --> 00:14:50,639
whatever the kernel supports pretty much

00:14:48,320 --> 00:14:53,120
we have basic administration tools uh

00:14:50,639 --> 00:14:56,079
podman moby

00:14:53,120 --> 00:14:57,680
we do not have python part of the goal

00:14:56,079 --> 00:15:00,800
here

00:14:57,680 --> 00:15:02,480
was to you know

00:15:00,800 --> 00:15:04,480
encourage people to use containers for

00:15:02,480 --> 00:15:06,480
the apple their applications and python

00:15:04,480 --> 00:15:08,560
is a really good escape hatch for

00:15:06,480 --> 00:15:10,560
uh just spinning something up really

00:15:08,560 --> 00:15:12,560
fast but it also means that

00:15:10,560 --> 00:15:13,920
the user then depends on the host

00:15:12,560 --> 00:15:15,760
version of python

00:15:13,920 --> 00:15:17,839
and the libraries that are on the host

00:15:15,760 --> 00:15:19,760
in order to run that application

00:15:17,839 --> 00:15:21,920
and we want the flexibility to be able

00:15:19,760 --> 00:15:23,120
to remove things from the host or add

00:15:21,920 --> 00:15:25,199
them to the host

00:15:23,120 --> 00:15:26,240
and not worry about every user that

00:15:25,199 --> 00:15:29,279
exists

00:15:26,240 --> 00:15:32,000
for that particular library so it's just

00:15:29,279 --> 00:15:35,519
much more reliable for us to do updates

00:15:32,000 --> 00:15:35,519
if things are running in a container

00:15:36,480 --> 00:15:43,519
okay so fedora core os has been used

00:15:40,959 --> 00:15:46,320
in several other projects so far that

00:15:43,519 --> 00:15:48,560
build on top of it one of them is okd

00:15:46,320 --> 00:15:50,320
so which is the upstream of openshift

00:15:48,560 --> 00:15:52,320
ocp

00:15:50,320 --> 00:15:54,240
and in okd is kind of interesting

00:15:52,320 --> 00:15:55,199
because the cluster controls the os

00:15:54,240 --> 00:15:57,839
upgrades

00:15:55,199 --> 00:15:59,680
with the machine config operator and the

00:15:57,839 --> 00:16:02,560
cluster essentially knows

00:15:59,680 --> 00:16:04,079
a lot about the operating system it's

00:16:02,560 --> 00:16:06,800
tied to fedora core os

00:16:04,079 --> 00:16:08,399
so when you uh you know when you spin up

00:16:06,800 --> 00:16:11,440
a new node of

00:16:08,399 --> 00:16:12,800
um of open shift the cluster can

00:16:11,440 --> 00:16:16,079
actually manage that

00:16:12,800 --> 00:16:18,240
select the right uh image

00:16:16,079 --> 00:16:19,440
for fedora core os for this version of

00:16:18,240 --> 00:16:21,440
of okd

00:16:19,440 --> 00:16:22,480
and bring it up in you know if you're

00:16:21,440 --> 00:16:24,399
using a cloud

00:16:22,480 --> 00:16:25,680
gcp or something like that for example

00:16:24,399 --> 00:16:27,920
it knows the

00:16:25,680 --> 00:16:29,759
the image to use if you're bringing your

00:16:27,920 --> 00:16:32,000
own you know you'll have to spin up

00:16:29,759 --> 00:16:33,920
uh the version of fedora core os but

00:16:32,000 --> 00:16:34,959
then if it happens to be the wrong

00:16:33,920 --> 00:16:36,720
version

00:16:34,959 --> 00:16:38,720
the cluster will actually rebase it to

00:16:36,720 --> 00:16:41,600
the correct version for okd

00:16:38,720 --> 00:16:43,839
that's kind of interesting we also have

00:16:41,600 --> 00:16:45,759
a community

00:16:43,839 --> 00:16:48,480
kubernetes distribution called typhoon

00:16:45,759 --> 00:16:50,240
that has fedora coreos as a base option

00:16:48,480 --> 00:16:51,920
and dalton help on that community has

00:16:50,240 --> 00:16:53,600
done a great job with that

00:16:51,920 --> 00:16:54,959
we also have the openstack magnum

00:16:53,600 --> 00:16:57,120
project which uses

00:16:54,959 --> 00:16:58,399
used atomic host and now uses fedor core

00:16:57,120 --> 00:17:01,120
os as the base os

00:16:58,399 --> 00:17:04,319
for for the magnum project that delivers

00:17:01,120 --> 00:17:06,160
kubernetes to openstack users

00:17:04,319 --> 00:17:08,880
i want to talk briefly about fedora core

00:17:06,160 --> 00:17:11,039
os and the relationship to rel core os

00:17:08,880 --> 00:17:12,480
so basically common tooling and

00:17:11,039 --> 00:17:13,520
components but different scope and

00:17:12,480 --> 00:17:16,240
purpose

00:17:13,520 --> 00:17:18,480
so rel core os is not intended to be

00:17:16,240 --> 00:17:21,520
used as a standalone os

00:17:18,480 --> 00:17:23,600
where fedora core os is so

00:17:21,520 --> 00:17:26,240
container linux basically could be used

00:17:23,600 --> 00:17:28,079
as a standalone os or in a cluster

00:17:26,240 --> 00:17:30,880
which fedora core os supports very

00:17:28,079 --> 00:17:32,559
nicely railcore os is much more targeted

00:17:30,880 --> 00:17:34,799
at openshift

00:17:32,559 --> 00:17:36,240
so for example openshift components some

00:17:34,799 --> 00:17:38,160
openshift components are delivered as

00:17:36,240 --> 00:17:40,480
part of the base os

00:17:38,160 --> 00:17:41,440
so much more focused in scope on that

00:17:40,480 --> 00:17:43,600
one

00:17:41,440 --> 00:17:44,960
the other differences relp core os is

00:17:43,600 --> 00:17:46,960
based on a rail package set

00:17:44,960 --> 00:17:49,039
fedora coreos based on a fedora package

00:17:46,960 --> 00:17:51,760
set

00:17:49,039 --> 00:17:53,200
railcore os is updated and configured by

00:17:51,760 --> 00:17:55,120
the cluster operators

00:17:53,200 --> 00:17:57,440
from openshift similar to how i

00:17:55,120 --> 00:18:00,400
described okd just a minute ago

00:17:57,440 --> 00:18:02,160
and fedora core os obviously we have the

00:18:00,400 --> 00:18:02,799
uh the updates flow that i described

00:18:02,160 --> 00:18:04,480
earlier

00:18:02,799 --> 00:18:06,799
other than that there's really not much

00:18:04,480 --> 00:18:07,760
difference between them um very similar

00:18:06,799 --> 00:18:10,080
content sets

00:18:07,760 --> 00:18:11,840
of other than the the openshift slash

00:18:10,080 --> 00:18:14,000
kubernetes pieces that are baked into

00:18:11,840 --> 00:18:16,640
the os for rel core os

00:18:14,000 --> 00:18:18,320
they're all build using coreos assembler

00:18:16,640 --> 00:18:19,440
we have very similar pipelines although

00:18:18,320 --> 00:18:20,960
we're looking to kind of

00:18:19,440 --> 00:18:22,880
make those even more similar in the

00:18:20,960 --> 00:18:25,760
future but that's

00:18:22,880 --> 00:18:27,360
it for fedora coreos and railcore os now

00:18:25,760 --> 00:18:28,720
i want to talk briefly about

00:18:27,360 --> 00:18:30,880
you know kind of what we have coming

00:18:28,720 --> 00:18:33,520
down the pipe um

00:18:30,880 --> 00:18:34,480
so what we have coming down the pipe we

00:18:33,520 --> 00:18:37,039
we want more

00:18:34,480 --> 00:18:38,320
cloud platforms like i mentioned earlier

00:18:37,039 --> 00:18:42,240
um

00:18:38,320 --> 00:18:45,120
uh i ibm cloud is one that we have

00:18:42,240 --> 00:18:46,000
most support for but we are not yet

00:18:45,120 --> 00:18:48,960
producing

00:18:46,000 --> 00:18:50,320
cloud images for them um we're adding

00:18:48,960 --> 00:18:51,919
just a few more

00:18:50,320 --> 00:18:53,760
bits that are missing and then we want

00:18:51,919 --> 00:18:55,600
to start putting those on the website as

00:18:53,760 --> 00:18:58,320
well

00:18:55,600 --> 00:18:59,200
and then platforms like packet and other

00:18:58,320 --> 00:19:02,320
things that

00:18:59,200 --> 00:19:04,480
uh that are missing from that list

00:19:02,320 --> 00:19:05,679
a multi-arch support so we have a proof

00:19:04,480 --> 00:19:09,120
of concept right now

00:19:05,679 --> 00:19:10,000
for adding arm 64 to our pipeline and

00:19:09,120 --> 00:19:13,360
hopefully that will

00:19:10,000 --> 00:19:17,120
prove out the model for us to get a

00:19:13,360 --> 00:19:20,880
power pc and also s390x added to the

00:19:17,120 --> 00:19:22,960
platform as well we also want to add

00:19:20,880 --> 00:19:25,120
more human-friendly helper functions to

00:19:22,960 --> 00:19:28,320
fedora coreos config transpiler

00:19:25,120 --> 00:19:29,679
one example today is for some reason

00:19:28,320 --> 00:19:31,600
it's just really

00:19:29,679 --> 00:19:32,880
it's really not ergonomic in order to

00:19:31,600 --> 00:19:35,679
change the kernel

00:19:32,880 --> 00:19:36,320
kernel command line for one of your

00:19:35,679 --> 00:19:38,240
nodes you

00:19:36,320 --> 00:19:40,640
kind of have to write a service that

00:19:38,240 --> 00:19:43,200
runs a

00:19:40,640 --> 00:19:45,039
rpmostree command it's just not very

00:19:43,200 --> 00:19:45,760
human friendly so what we'd like is to

00:19:45,039 --> 00:19:47,840
be able to

00:19:45,760 --> 00:19:50,400
kind of hook into our fedora coreos

00:19:47,840 --> 00:19:52,080
config and have a user very easily say

00:19:50,400 --> 00:19:54,160
hey i want this kernel argument to be

00:19:52,080 --> 00:19:56,480
different than what the default is

00:19:54,160 --> 00:19:57,520
and have that plumbed through all the

00:19:56,480 --> 00:19:59,360
way um

00:19:57,520 --> 00:20:00,559
to have the running node get that

00:19:59,360 --> 00:20:02,799
applied when it's

00:20:00,559 --> 00:20:04,960
done so little things like that are

00:20:02,799 --> 00:20:07,760
things that we won't really want to

00:20:04,960 --> 00:20:08,799
improve the the user experience for

00:20:07,760 --> 00:20:10,799
another one

00:20:08,799 --> 00:20:14,080
user experience host extensions so i

00:20:10,799 --> 00:20:17,120
mentioned earlier we we kind of want to

00:20:14,080 --> 00:20:18,480
guide people towards not package

00:20:17,120 --> 00:20:20,880
layering

00:20:18,480 --> 00:20:21,679
and using containers but package

00:20:20,880 --> 00:20:23,440
layering

00:20:21,679 --> 00:20:25,360
is great for things that aren't easy to

00:20:23,440 --> 00:20:27,200
containerize and or

00:20:25,360 --> 00:20:29,039
you know maybe little tiny host

00:20:27,200 --> 00:20:30,720
utilities or something like that

00:20:29,039 --> 00:20:32,400
the experience there is great when it

00:20:30,720 --> 00:20:33,919
works but sometimes it doesn't because

00:20:32,400 --> 00:20:34,799
of the difference in our package sets

00:20:33,919 --> 00:20:37,200
between

00:20:34,799 --> 00:20:38,880
you know what's in latest fedora stable

00:20:37,200 --> 00:20:41,440
so we're working on with rel engine

00:20:38,880 --> 00:20:43,039
infra on that to to make that better

00:20:41,440 --> 00:20:44,640
and then also more improved

00:20:43,039 --> 00:20:46,720
documentation we had a hack fest

00:20:44,640 --> 00:20:49,280
yesterday that we uh

00:20:46,720 --> 00:20:51,039
we got a lot of people to join

00:20:49,280 --> 00:20:53,919
translations

00:20:51,039 --> 00:20:55,760
added documentation fixing bugs in our

00:20:53,919 --> 00:20:58,240
documentation things like that

00:20:55,760 --> 00:21:01,600
and tighter integrations with okd and

00:20:58,240 --> 00:21:04,159
other upstream projects as well

00:21:01,600 --> 00:21:05,840
this is my call to get involved so use

00:21:04,159 --> 00:21:09,120
fedora core wes

00:21:05,840 --> 00:21:11,919
go grab it from the website open issues

00:21:09,120 --> 00:21:13,760
um on the issue tracker we have our

00:21:11,919 --> 00:21:16,480
forum as well if you have

00:21:13,760 --> 00:21:17,360
you know questions and aren't sure how

00:21:16,480 --> 00:21:18,799
to do something

00:21:17,360 --> 00:21:21,840
feel free to ask us there we have a

00:21:18,799 --> 00:21:24,880
mailing list and we also have our

00:21:21,840 --> 00:21:27,919
our irc channel cool

00:21:24,880 --> 00:21:28,240
i'll open it up for questions and you

00:21:27,919 --> 00:21:29,679
know

00:21:28,240 --> 00:21:31,360
if people want to stick around after

00:21:29,679 --> 00:21:34,720
questions i know i'm running out of time

00:21:31,360 --> 00:21:36,080
i've got um you know demo content too so

00:21:34,720 --> 00:21:39,600
if enough people are around and want to

00:21:36,080 --> 00:21:39,600
hang out i'll do a demo

00:21:42,240 --> 00:21:48,799
and i guess i'll just look at the chat

00:21:45,200 --> 00:21:48,799
in order to see if there are questions

00:21:57,760 --> 00:22:01,520
so james you had a question about stats

00:22:00,400 --> 00:22:05,600
for a number of users

00:22:01,520 --> 00:22:05,600
um so

00:22:05,679 --> 00:22:10,840
what we have right now um we have kind

00:22:08,720 --> 00:22:13,440
of like a

00:22:10,840 --> 00:22:14,640
uh um i don't know if the metrics is the

00:22:13,440 --> 00:22:17,120
right word

00:22:14,640 --> 00:22:18,080
we have a proof of concept of a service

00:22:17,120 --> 00:22:21,440
that basically

00:22:18,080 --> 00:22:24,720
will gather some you know

00:22:21,440 --> 00:22:25,120
not specific information about a machine

00:22:24,720 --> 00:22:26,960
like

00:22:25,120 --> 00:22:28,559
uh you know not user specific or

00:22:26,960 --> 00:22:30,080
anything like the version that it's

00:22:28,559 --> 00:22:31,840
currently on

00:22:30,080 --> 00:22:33,760
um and maybe the architecture or

00:22:31,840 --> 00:22:36,000
something like that i can't remember

00:22:33,760 --> 00:22:37,120
uh but we don't have that service

00:22:36,000 --> 00:22:38,799
deployed yet

00:22:37,120 --> 00:22:40,559
but we definitely would like to so one

00:22:38,799 --> 00:22:43,679
of the goals with that service

00:22:40,559 --> 00:22:45,919
is to be able to actually get some

00:22:43,679 --> 00:22:49,600
insight into how many nodes

00:22:45,919 --> 00:22:52,080
are up to date how many nodes are old

00:22:49,600 --> 00:22:54,080
um you know for example if we're going

00:22:52,080 --> 00:22:55,679
through a rollout window we'll actually

00:22:54,080 --> 00:22:58,880
be able to see

00:22:55,679 --> 00:23:01,200
if nodes failed to update

00:22:58,880 --> 00:23:02,240
and so rather than waiting for users to

00:23:01,200 --> 00:23:04,480
give us feedback

00:23:02,240 --> 00:23:05,760
about hey this failed and you know in

00:23:04,480 --> 00:23:07,919
this way

00:23:05,760 --> 00:23:09,120
we can start to see in that rollout

00:23:07,919 --> 00:23:12,559
window

00:23:09,120 --> 00:23:14,640
if uh if you know 10

00:23:12,559 --> 00:23:15,760
of our systems are failing to upgrade

00:23:14,640 --> 00:23:17,679
for some reason

00:23:15,760 --> 00:23:19,520
we need to pause this roll out and start

00:23:17,679 --> 00:23:20,159
to figure out what the problem with that

00:23:19,520 --> 00:23:21,600
update is

00:23:20,159 --> 00:23:24,000
because you know we don't we don't want

00:23:21,600 --> 00:23:27,200
that level of failure at all

00:23:24,000 --> 00:23:30,559
so we don't have anything right now

00:23:27,200 --> 00:23:30,559
but we have plans for that

00:23:35,360 --> 00:23:38,799
yep uh fedora core os is definitely

00:23:37,520 --> 00:23:41,760
intended to be used for

00:23:38,799 --> 00:23:42,400
a home you know server single container

00:23:41,760 --> 00:23:45,760
if you want

00:23:42,400 --> 00:23:46,559
um so i i actually have a demo that i

00:23:45,760 --> 00:23:49,360
can give

00:23:46,559 --> 00:23:50,000
uh for that specific case here in just a

00:23:49,360 --> 00:23:53,360
minute if

00:23:50,000 --> 00:23:54,960
um you know if if they don't kick us out

00:23:53,360 --> 00:23:56,640
in 20 seconds i don't know how this

00:23:54,960 --> 00:24:00,080
works really so

00:23:56,640 --> 00:24:01,840
if they kick us out then grab me and

00:24:00,080 --> 00:24:03,279
i'll send you a link to where i also did

00:24:01,840 --> 00:24:05,840
the demo one other

00:24:03,279 --> 00:24:05,840
time

00:24:07,279 --> 00:24:11,919
okay neil says that we have it as long

00:24:09,200 --> 00:24:11,919
as we want so

00:24:16,480 --> 00:24:21,360
and looks like jim is looking for

00:24:18,000 --> 00:24:24,000
example ignition configs

00:24:21,360 --> 00:24:24,799
so jim we actually are doing a workshop

00:24:24,000 --> 00:24:27,919
tomorrow

00:24:24,799 --> 00:24:30,400
um and the the workshop content is

00:24:27,919 --> 00:24:34,799
actually on our documentation

00:24:30,400 --> 00:24:39,440
um page uh

00:24:34,799 --> 00:24:42,159
so if you can't come to the workshop

00:24:39,440 --> 00:24:44,960
then you can still go here to the

00:24:42,159 --> 00:24:48,000
tutorial section of our documentation

00:24:44,960 --> 00:24:51,039
and execute it yourself um

00:24:48,000 --> 00:24:52,559
but it has a lot of examples of ignition

00:24:51,039 --> 00:24:55,600
configs that you can use

00:24:52,559 --> 00:24:57,760
um so like here's one

00:24:55,600 --> 00:24:58,880
actually for the most part we we define

00:24:57,760 --> 00:25:01,520
things in

00:24:58,880 --> 00:25:03,120
uh you know the fedora os config

00:25:01,520 --> 00:25:06,559
transpiler

00:25:03,120 --> 00:25:07,760
config format i guess but typically

00:25:06,559 --> 00:25:10,960
you'll start here

00:25:07,760 --> 00:25:12,400
with a more human friendly config format

00:25:10,960 --> 00:25:14,159
and then you'll run a tool that

00:25:12,400 --> 00:25:17,760
basically spits out ignition

00:25:14,159 --> 00:25:20,159
for you so there's a lot of examples in

00:25:17,760 --> 00:25:21,600
that documentation

00:25:20,159 --> 00:25:23,120
i'd encourage you to check that out and

00:25:21,600 --> 00:25:24,720
then if you have any specific questions

00:25:23,120 --> 00:25:25,279
or something's not working for you we

00:25:24,720 --> 00:25:27,840
have the

00:25:25,279 --> 00:25:28,320
discussion forum which is a great place

00:25:27,840 --> 00:25:32,799
to

00:25:28,320 --> 00:25:32,799
to kind of you know engage the community

00:25:36,000 --> 00:25:39,039
so will says

00:25:41,760 --> 00:25:45,520
yeah so the core os updates don't

00:25:43,679 --> 00:25:49,039
actually go through mirror manager

00:25:45,520 --> 00:25:50,799
um well i'll take that back it's

00:25:49,039 --> 00:25:53,279
slightly more nuanced than that i think

00:25:50,799 --> 00:25:56,559
uh we do have some sort of

00:25:53,279 --> 00:25:57,520
um metal url type thing but i don't

00:25:56,559 --> 00:26:00,320
think the

00:25:57,520 --> 00:26:01,360
mirrors the mirror manager actually may

00:26:00,320 --> 00:26:04,400
do that

00:26:01,360 --> 00:26:07,440
no content is on the mirrors but our

00:26:04,400 --> 00:26:10,640
our clients still talk to the mirror

00:26:07,440 --> 00:26:12,159
server like the master one so

00:26:10,640 --> 00:26:15,120
yeah you know we might be able to do

00:26:12,159 --> 00:26:15,120
something there as well

00:26:19,200 --> 00:26:24,720
um regarding butter fs

00:26:22,960 --> 00:26:26,960
you know we don't really have any plans

00:26:24,720 --> 00:26:29,919
there uh

00:26:26,960 --> 00:26:31,919
you know we've been mostly getting

00:26:29,919 --> 00:26:35,039
fedora core os off the ground

00:26:31,919 --> 00:26:38,320
uh but you know even if we

00:26:35,039 --> 00:26:41,600
don't have uh butter fs

00:26:38,320 --> 00:26:43,120
be like the default that is shipped

00:26:41,600 --> 00:26:45,840
uh one of the things that we've been

00:26:43,120 --> 00:26:48,720
doing with ignition is making

00:26:45,840 --> 00:26:50,080
um you know adding in support for being

00:26:48,720 --> 00:26:53,520
able to

00:26:50,080 --> 00:26:54,080
do root on you know complex root devices

00:26:53,520 --> 00:26:57,200
so like

00:26:54,080 --> 00:26:58,880
raid and you know doing things like

00:26:57,200 --> 00:27:01,360
encryption

00:26:58,880 --> 00:27:03,679
and as part of that you essentially need

00:27:01,360 --> 00:27:06,960
to be able to do whatever you want to

00:27:03,679 --> 00:27:09,440
to the root file system so you can

00:27:06,960 --> 00:27:10,880
switch that out and you know switch the

00:27:09,440 --> 00:27:13,200
file system if you want

00:27:10,880 --> 00:27:14,960
it's not there yet but yeah you should

00:27:13,200 --> 00:27:16,559
be able to run it on butter fs in the

00:27:14,960 --> 00:27:20,720
future if you want to

00:27:16,559 --> 00:27:23,200
it just might not be the default

00:27:20,720 --> 00:27:25,679
and jonathan has a link to an example of

00:27:23,200 --> 00:27:25,679
doing that

00:27:28,159 --> 00:27:32,480
but yeah some of the code enablement i

00:27:30,320 --> 00:27:35,840
think is still

00:27:32,480 --> 00:27:39,279
in the works okay uh

00:27:35,840 --> 00:27:39,279
does anybody want to see a demo

00:27:41,520 --> 00:27:49,840
yes demo okay let's try this out

00:27:45,840 --> 00:27:49,840
all right

00:27:52,320 --> 00:27:55,840
i think this is the one we want to see

00:27:57,120 --> 00:28:00,320
okay can everybody see is the text big

00:27:59,840 --> 00:28:02,159
enough

00:28:00,320 --> 00:28:04,480
i think i tested this earlier and people

00:28:02,159 --> 00:28:06,799
were saying it was okay

00:28:04,480 --> 00:28:07,919
okay cool all right so i mentioned

00:28:06,799 --> 00:28:11,039
briefly in the

00:28:07,919 --> 00:28:13,039
presentation that earlier this year you

00:28:11,039 --> 00:28:14,840
know i lost access to a machine i think

00:28:13,039 --> 00:28:16,320
the i think the office lost power

00:28:14,840 --> 00:28:18,720
briefly and

00:28:16,320 --> 00:28:21,039
the little box i was sitting on my desk

00:28:18,720 --> 00:28:23,440
did not have in the bios configured to

00:28:21,039 --> 00:28:24,320
automatically turn back on when it gets

00:28:23,440 --> 00:28:26,720
power

00:28:24,320 --> 00:28:28,159
so it was powered down and i had no way

00:28:26,720 --> 00:28:31,039
to get to it so

00:28:28,159 --> 00:28:33,279
it is actually my wechat client that i

00:28:31,039 --> 00:28:36,559
just ssh into and run tmux

00:28:33,279 --> 00:28:39,679
um on so i had

00:28:36,559 --> 00:28:41,679
previously put everything um

00:28:39,679 --> 00:28:42,880
you know all the configuration for that

00:28:41,679 --> 00:28:46,000
client in

00:28:42,880 --> 00:28:48,880
an ignition config and and a container

00:28:46,000 --> 00:28:49,679
and so i was able to spin that up on my

00:28:48,880 --> 00:28:51,840
desktop

00:28:49,679 --> 00:28:53,360
in about 10 minutes after i figured out

00:28:51,840 --> 00:28:56,480
i didn't have access to my

00:28:53,360 --> 00:28:59,600
uh other box so no downtime

00:28:56,480 --> 00:29:00,320
uh well short downtime anyway i've

00:28:59,600 --> 00:29:03,120
recreated

00:29:00,320 --> 00:29:04,960
an example um for this to try to go

00:29:03,120 --> 00:29:07,520
through and show people

00:29:04,960 --> 00:29:08,720
you know one thing that you can do uh

00:29:07,520 --> 00:29:11,200
with

00:29:08,720 --> 00:29:12,640
uh fedor core os which is a kind of a

00:29:11,200 --> 00:29:15,440
focused use case

00:29:12,640 --> 00:29:17,760
so what i have here is dusty mabes

00:29:15,440 --> 00:29:18,480
wechat config that runs in tmux via

00:29:17,760 --> 00:29:20,399
systemd

00:29:18,480 --> 00:29:21,919
and a container and that's kind of

00:29:20,399 --> 00:29:25,120
complicated but

00:29:21,919 --> 00:29:28,320
it uh it's kind of a interesting way to

00:29:25,120 --> 00:29:29,760
to do things but what i have is

00:29:28,320 --> 00:29:31,600
instructions here for creating an

00:29:29,760 --> 00:29:34,960
ignition config

00:29:31,600 --> 00:29:36,960
based on a fedora coreos config

00:29:34,960 --> 00:29:38,640
and then also instructions for how to

00:29:36,960 --> 00:29:42,000
test it using

00:29:38,640 --> 00:29:44,240
a virtual machine but

00:29:42,000 --> 00:29:45,600
what we have here is a fedora core os

00:29:44,240 --> 00:29:49,279
config

00:29:45,600 --> 00:29:52,080
and it basically adds in um you know

00:29:49,279 --> 00:29:53,200
an authorized key for the core user uh

00:29:52,080 --> 00:29:55,720
one thing it does is

00:29:53,200 --> 00:29:56,880
it runs a service called set

00:29:55,720 --> 00:30:00,000
scbool.service

00:29:56,880 --> 00:30:00,640
which basically uh enables the container

00:30:00,000 --> 00:30:02,880
managed c

00:30:00,640 --> 00:30:06,480
group sc boolean this is needed because

00:30:02,880 --> 00:30:08,399
i run systemd inside my container

00:30:06,480 --> 00:30:10,320
it has another service called wechat

00:30:08,399 --> 00:30:11,279
service which is what essentially runs

00:30:10,320 --> 00:30:13,360
the container

00:30:11,279 --> 00:30:15,679
that starts systemd inside the container

00:30:13,360 --> 00:30:18,159
that then runs tmux

00:30:15,679 --> 00:30:19,679
and if you'll notice this particular

00:30:18,159 --> 00:30:21,960
service

00:30:19,679 --> 00:30:23,679
runs after another service called

00:30:21,960 --> 00:30:25,440
buildwechat.service i didn't want to

00:30:23,679 --> 00:30:26,080
build this and host it in a container

00:30:25,440 --> 00:30:27,919
registry

00:30:26,080 --> 00:30:30,080
it's not it's not that complicated it's

00:30:27,919 --> 00:30:31,919
not going to get pulled that much

00:30:30,080 --> 00:30:33,440
so i just wanted to build it locally on

00:30:31,919 --> 00:30:36,279
the node

00:30:33,440 --> 00:30:37,520
and i have another service called

00:30:36,279 --> 00:30:41,679
buildwechat.service

00:30:37,520 --> 00:30:45,279
that uh you know pulls fedora 32

00:30:41,679 --> 00:30:48,880
and then just runs build against

00:30:45,279 --> 00:30:52,320
a uh a set of files that

00:30:48,880 --> 00:30:56,000
are local to the node which i populate

00:30:52,320 --> 00:30:59,360
a little further down so here

00:30:56,000 --> 00:31:02,960
let's see home core wechat build

00:30:59,360 --> 00:31:04,880
is something that is defined

00:31:02,960 --> 00:31:06,799
inside of the container directory within

00:31:04,880 --> 00:31:09,120
this repository

00:31:06,799 --> 00:31:11,519
so if i look at the container directory

00:31:09,120 --> 00:31:14,720
there's a docker file

00:31:11,519 --> 00:31:18,480
in here i install wechat along with

00:31:14,720 --> 00:31:22,480
tmux and systemd

00:31:18,480 --> 00:31:24,799
i essentially run uh have a start script

00:31:22,480 --> 00:31:27,919
that i hand to wechat

00:31:24,799 --> 00:31:29,679
that tells it to configure everything so

00:31:27,919 --> 00:31:31,360
usually with wechat what you do is you

00:31:29,679 --> 00:31:32,159
start it up and you configure a bunch of

00:31:31,360 --> 00:31:35,200
stuff

00:31:32,159 --> 00:31:36,880
and then it the configuration

00:31:35,200 --> 00:31:38,399
is saved in your home directory or

00:31:36,880 --> 00:31:39,120
something like that so this is a

00:31:38,399 --> 00:31:41,200
container

00:31:39,120 --> 00:31:42,799
and i i don't you know i want it to

00:31:41,200 --> 00:31:43,840
automatically be able to come back up

00:31:42,799 --> 00:31:46,880
wherever i am

00:31:43,840 --> 00:31:50,640
if i blow it away and start it new

00:31:46,880 --> 00:31:53,679
so i crafted a short

00:31:50,640 --> 00:31:54,799
start script which basically adds this

00:31:53,679 --> 00:31:56,399
is an example

00:31:54,799 --> 00:31:59,360
obviously mine is a lot more complicated

00:31:56,399 --> 00:32:02,559
but this one adds free node as a server

00:31:59,360 --> 00:32:06,000
sets my nickname to be dusty demo

00:32:02,559 --> 00:32:06,480
joins fedora meeting one of the irc

00:32:06,000 --> 00:32:09,840
channel

00:32:06,480 --> 00:32:12,320
and then connects um

00:32:09,840 --> 00:32:13,039
and that is pretty much all it does

00:32:12,320 --> 00:32:16,600
let's see

00:32:13,039 --> 00:32:18,640
oh there's a oh sorry yeah there's a

00:32:16,600 --> 00:32:21,360
wechat.service that starts inside the

00:32:18,640 --> 00:32:25,039
container this is started via systemd

00:32:21,360 --> 00:32:28,159
and all it does is run tmux um and it

00:32:25,039 --> 00:32:30,320
calls wechat and it runs this start

00:32:28,159 --> 00:32:33,600
script

00:32:30,320 --> 00:32:37,840
so let's see it go

00:32:33,600 --> 00:32:37,840
so this is the readme

00:32:38,559 --> 00:32:46,240
oh i'm going to run it

00:32:43,200 --> 00:32:49,679
so if we take that

00:32:46,240 --> 00:32:52,240
uh fedora core s config pipe it through

00:32:49,679 --> 00:32:54,240
fcct

00:32:52,240 --> 00:32:55,440
we see this ignition config and you can

00:32:54,240 --> 00:33:00,399
kind of see

00:32:55,440 --> 00:33:03,919
ignition is much less easy to read

00:33:00,399 --> 00:33:06,080
than your fcct configs

00:33:03,919 --> 00:33:07,440
you know for one it kind of encodes some

00:33:06,080 --> 00:33:10,880
things and

00:33:07,440 --> 00:33:11,440
just not as fun so we've got our wechat

00:33:10,880 --> 00:33:14,880
config

00:33:11,440 --> 00:33:16,399
and now i can essentially take and start

00:33:14,880 --> 00:33:18,080
a virtual machine if i just wanted to

00:33:16,399 --> 00:33:20,880
test it before i actually put it on that

00:33:18,080 --> 00:33:25,840
bare metal node that i have

00:33:20,880 --> 00:33:25,840
so i can spin it up

00:34:09,440 --> 00:34:12,960
for some reason that always takes longer

00:34:11,200 --> 00:34:15,599
when i'm doing a demo than it does

00:34:12,960 --> 00:34:17,280
otherwise but uh if you'll notice some

00:34:15,599 --> 00:34:20,000
things we try to do with fedora coreos

00:34:17,280 --> 00:34:21,200
are you know help the user along with

00:34:20,000 --> 00:34:24,720
information

00:34:21,200 --> 00:34:27,599
um so one thing that we do is we output

00:34:24,720 --> 00:34:28,720
uh information about you know like your

00:34:27,599 --> 00:34:31,119
ip address

00:34:28,720 --> 00:34:31,919
um this might be useful in a cloud

00:34:31,119 --> 00:34:35,200
environment

00:34:31,919 --> 00:34:36,879
um where you might not know for some

00:34:35,200 --> 00:34:39,119
reason what the ip is or

00:34:36,879 --> 00:34:40,240
you know whatever that's uh that can be

00:34:39,119 --> 00:34:42,079
kind of useful

00:34:40,240 --> 00:34:43,359
uh also the host keys if you want to

00:34:42,079 --> 00:34:44,079
validate that you're talking to the

00:34:43,359 --> 00:34:47,119
right

00:34:44,079 --> 00:34:50,320
machine we also

00:34:47,119 --> 00:34:53,200
output information about uh

00:34:50,320 --> 00:34:54,240
you know was ignition able to actually

00:34:53,200 --> 00:34:57,119
get a config

00:34:54,240 --> 00:34:58,320
and also did it have any ssh keys that

00:34:57,119 --> 00:35:00,960
were added

00:34:58,320 --> 00:35:02,800
if that you know if it happened to not

00:35:00,960 --> 00:35:04,320
have any ssh keys that were added then

00:35:02,800 --> 00:35:06,960
you might have trouble getting into the

00:35:04,320 --> 00:35:09,839
node right so that might be another tip

00:35:06,960 --> 00:35:10,800
on whether the actual deployment or

00:35:09,839 --> 00:35:14,560
provisioning went

00:35:10,800 --> 00:35:17,920
as you thought it would so let's go

00:35:14,560 --> 00:35:19,920
and let's get into this node okay

00:35:17,920 --> 00:35:21,040
so i'm in the node one thing you'll

00:35:19,920 --> 00:35:23,920
notice is we are

00:35:21,040 --> 00:35:26,000
on uh fedora core west this that's the

00:35:23,920 --> 00:35:28,960
latest stable release

00:35:26,000 --> 00:35:30,079
right now and you know there's

00:35:28,960 --> 00:35:31,760
information about

00:35:30,079 --> 00:35:32,590
our issue tracker and our discussion

00:35:31,760 --> 00:35:34,079
board

00:35:32,590 --> 00:35:37,520
[Music]

00:35:34,079 --> 00:35:38,400
let's see right now the build wechat

00:35:37,520 --> 00:35:41,280
service

00:35:38,400 --> 00:35:43,040
is still running so that container build

00:35:41,280 --> 00:35:46,480
is still kind of going

00:35:43,040 --> 00:35:48,250
if we want to look at that

00:35:46,480 --> 00:35:50,320
i think we should be able to see

00:35:48,250 --> 00:35:52,960
[Music]

00:35:50,320 --> 00:35:54,480
stuff that's kind of coming to the

00:35:52,960 --> 00:35:59,839
screen as a result of that

00:35:54,480 --> 00:35:59,839
container build

00:36:02,800 --> 00:36:06,079
yeah so it's it's kind of progressing

00:36:05,280 --> 00:36:09,440
through its

00:36:06,079 --> 00:36:10,880
uh its build but while while we wait on

00:36:09,440 --> 00:36:15,119
that we can go look at

00:36:10,880 --> 00:36:16,720
um kind of

00:36:15,119 --> 00:36:18,640
some other files that were laid down on

00:36:16,720 --> 00:36:21,280
the system so

00:36:18,640 --> 00:36:22,000
this file in user local bin wechat is

00:36:21,280 --> 00:36:24,560
one that i

00:36:22,000 --> 00:36:26,720
wrote in here that basically says i can

00:36:24,560 --> 00:36:28,400
log into this system and if i just run

00:36:26,720 --> 00:36:30,880
wechat

00:36:28,400 --> 00:36:32,960
i'll be able to get into the environment

00:36:30,880 --> 00:36:35,920
that i expect which is to

00:36:32,960 --> 00:36:36,400
execu get into the wechat container and

00:36:35,920 --> 00:36:38,880
just

00:36:36,400 --> 00:36:41,839
tmux attached to the existing session

00:36:38,880 --> 00:36:41,839
that's already running

00:36:42,320 --> 00:36:45,839
so let's see

00:36:43,360 --> 00:36:54,160
[Music]

00:36:45,839 --> 00:36:57,440
all right so let's see

00:36:54,160 --> 00:37:00,400
get into it now and we are in

00:36:57,440 --> 00:37:02,960
to the container looks like it's still

00:37:00,400 --> 00:37:02,960
connecting

00:37:06,240 --> 00:37:10,480
yep so now i can say

00:37:15,760 --> 00:37:18,800
and that's pretty much it

00:37:19,119 --> 00:37:24,640
so that is an example of having all of

00:37:22,079 --> 00:37:26,400
your configuration baked into your node

00:37:24,640 --> 00:37:28,000
or into your ignition config and just

00:37:26,400 --> 00:37:30,560
having your system come up

00:37:28,000 --> 00:37:32,240
and do everything you want it to the

00:37:30,560 --> 00:37:35,760
only other demo i can really show

00:37:32,240 --> 00:37:37,520
right now is um uh

00:37:35,760 --> 00:37:41,040
fedora core os and the relationship with

00:37:37,520 --> 00:37:42,240
okd so i brought up a cluster earlier

00:37:41,040 --> 00:37:43,440
it takes a little while to bring up a

00:37:42,240 --> 00:37:44,240
cluster so i wasn't going to do it

00:37:43,440 --> 00:37:46,880
during a demo

00:37:44,240 --> 00:37:47,920
but i brought up a cluster earlier you

00:37:46,880 --> 00:37:50,400
can see i have

00:37:47,920 --> 00:37:52,240
uh five con or three control plane nodes

00:37:50,400 --> 00:37:55,760
and two worker nodes

00:37:52,240 --> 00:37:57,760
and i'm going to use a tool called k9s

00:37:55,760 --> 00:37:59,920
which is kind of like an text user

00:37:57,760 --> 00:38:03,359
interface to view

00:37:59,920 --> 00:38:06,079
um kubernetes clusters

00:38:03,359 --> 00:38:07,599
um so this is an okd cluster i've got a

00:38:06,079 --> 00:38:09,920
bunch of cluster operators

00:38:07,599 --> 00:38:11,200
looks like one of them is degraded for

00:38:09,920 --> 00:38:13,520
some reason

00:38:11,200 --> 00:38:15,200
but i don't think that one's important

00:38:13,520 --> 00:38:18,400
but one thing that's nice about okd

00:38:15,200 --> 00:38:20,480
is i can look at these uh

00:38:18,400 --> 00:38:24,160
nodes that exist in the cluster and i

00:38:20,480 --> 00:38:27,440
can pull up information about them

00:38:24,160 --> 00:38:30,240
and this uh partic this you know okd

00:38:27,440 --> 00:38:31,599
itself knows about the os image that's

00:38:30,240 --> 00:38:34,400
in the cluster

00:38:31,599 --> 00:38:35,040
so it knows it's running fedora core os

00:38:34,400 --> 00:38:38,160
right

00:38:35,040 --> 00:38:39,520
and um it also knows how to bring up new

00:38:38,160 --> 00:38:43,839
nodes in the cluster

00:38:39,520 --> 00:38:45,440
so if i go look at the machine sets for

00:38:43,839 --> 00:38:47,839
for this machine i only brought up this

00:38:45,440 --> 00:38:50,400
cluster with two worker nodes

00:38:47,839 --> 00:38:52,000
and i can do something like oh just spin

00:38:50,400 --> 00:38:56,160
up a new worker node for me

00:38:52,000 --> 00:38:58,079
in this uh you know d zone

00:38:56,160 --> 00:39:00,000
and so what i'll do is i'll go in and

00:38:58,079 --> 00:39:02,640
edit that and i'll search for

00:39:00,000 --> 00:39:02,640
replicas

00:39:03,200 --> 00:39:07,839
and i will spin up a new one

00:39:08,240 --> 00:39:15,440
so we can see that the count changed

00:39:11,760 --> 00:39:17,760
and we can also see

00:39:15,440 --> 00:39:20,720
that there's a new node that's being

00:39:17,760 --> 00:39:25,440
spun up right now

00:39:20,720 --> 00:39:27,760
that is in us east 1d for gcp

00:39:25,440 --> 00:39:29,520
so different availability zone and

00:39:27,760 --> 00:39:30,079
eventually that node will join the

00:39:29,520 --> 00:39:31,839
cluster

00:39:30,079 --> 00:39:34,320
and it will show up right here in the

00:39:31,839 --> 00:39:37,040
list of nodes

00:39:34,320 --> 00:39:38,079
so that's pretty much it for the demo do

00:39:37,040 --> 00:39:43,839
we have any uh

00:39:38,079 --> 00:39:43,839
any other questions that i could answer

00:39:48,640 --> 00:39:54,320
so we have a question for

00:39:52,800 --> 00:39:56,480
ignition does it mean that every

00:39:54,320 --> 00:39:57,359
configuration change means reboot of the

00:39:56,480 --> 00:40:00,400
server

00:39:57,359 --> 00:40:04,560
i think it depends like obviously

00:40:00,400 --> 00:40:06,960
you can kind of evaluate how valuable

00:40:04,560 --> 00:40:08,319
um how valuable the reboot would be for

00:40:06,960 --> 00:40:12,160
example

00:40:08,319 --> 00:40:13,920
you know if you if you make a change to

00:40:12,160 --> 00:40:17,119
your application

00:40:13,920 --> 00:40:18,800
then i don't you know not unless your

00:40:17,119 --> 00:40:20,880
configuration for your application is

00:40:18,800 --> 00:40:23,440
delivered via ignition and not updated

00:40:20,880 --> 00:40:26,880
any other way for example you know

00:40:23,440 --> 00:40:28,400
in some cases you might do uh

00:40:26,880 --> 00:40:30,400
reach out to source control and grab a

00:40:28,400 --> 00:40:32,480
new version of your application or a new

00:40:30,400 --> 00:40:34,000
config setting or something like that

00:40:32,480 --> 00:40:35,760
um you know obviously you probably don't

00:40:34,000 --> 00:40:37,359
need to rerun ignition for that

00:40:35,760 --> 00:40:39,040
if you're changing networking or

00:40:37,359 --> 00:40:41,040
something like that

00:40:39,040 --> 00:40:42,240
you know you could want to rerun

00:40:41,040 --> 00:40:44,800
ignition

00:40:42,240 --> 00:40:46,560
just because you know what if you

00:40:44,800 --> 00:40:49,040
applied it to the node using

00:40:46,560 --> 00:40:50,800
network manager nmcli or something like

00:40:49,040 --> 00:40:52,560
that but then later

00:40:50,800 --> 00:40:54,960
and then also at the same time tried to

00:40:52,560 --> 00:40:57,280
apply that uh configuration via ignition

00:40:54,960 --> 00:40:59,119
but you didn't test it

00:40:57,280 --> 00:41:00,720
and then you know three months later

00:40:59,119 --> 00:41:02,319
when you when that node

00:41:00,720 --> 00:41:05,119
has trouble and you try to spin up a new

00:41:02,319 --> 00:41:06,000
one you know whatever configuration that

00:41:05,119 --> 00:41:08,560
you applied and

00:41:06,000 --> 00:41:10,160
didn't test doesn't work and you have to

00:41:08,560 --> 00:41:12,720
figure everything out so

00:41:10,160 --> 00:41:14,240
it really depends on you and how

00:41:12,720 --> 00:41:15,760
valuable you think that is

00:41:14,240 --> 00:41:18,160
obviously you can do things to the

00:41:15,760 --> 00:41:21,280
systems but

00:41:18,160 --> 00:41:24,079
you know if if there is low cost

00:41:21,280 --> 00:41:25,680
to spin up a brand new system uh

00:41:24,079 --> 00:41:26,720
obviously cloud environments make it

00:41:25,680 --> 00:41:29,440
really easy

00:41:26,720 --> 00:41:30,480
bare metal not not as easy right maybe

00:41:29,440 --> 00:41:32,560
you have pixie and

00:41:30,480 --> 00:41:33,920
and that makes things a lot a lot easier

00:41:32,560 --> 00:41:35,359
but

00:41:33,920 --> 00:41:37,359
if it's a low cost to bring up new

00:41:35,359 --> 00:41:40,000
systems i would recommend that you

00:41:37,359 --> 00:41:40,000
reprovision

00:41:41,760 --> 00:41:51,599
let's see

00:41:49,119 --> 00:41:53,680
okay uh how do i deal with auto update

00:41:51,599 --> 00:41:56,720
of containers running

00:41:53,680 --> 00:41:57,359
in this in this demo like the wechat one

00:41:56,720 --> 00:42:00,319
that i did

00:41:57,359 --> 00:42:02,000
um i'm gonna assume that so for the

00:42:00,319 --> 00:42:04,240
wechat one

00:42:02,000 --> 00:42:05,359
the the demo that i did was a little

00:42:04,240 --> 00:42:07,680
simplified but

00:42:05,359 --> 00:42:10,560
in the one that i actually have running

00:42:07,680 --> 00:42:13,599
um i have it periodically

00:42:10,560 --> 00:42:15,680
uh basically

00:42:13,599 --> 00:42:16,720
try to pull a new fedora 32 container

00:42:15,680 --> 00:42:19,839
and then also

00:42:16,720 --> 00:42:22,400
build from a git repository

00:42:19,839 --> 00:42:23,680
so for example once a week it'll try to

00:42:22,400 --> 00:42:25,359
do a new build

00:42:23,680 --> 00:42:27,200
and if there's nothing new to build it

00:42:25,359 --> 00:42:28,079
won't do it but if there is something

00:42:27,200 --> 00:42:29,839
new to build

00:42:28,079 --> 00:42:33,280
then it will do that and then the next

00:42:29,839 --> 00:42:35,359
time my fedora coreos box gets updated

00:42:33,280 --> 00:42:37,280
which happens roughly every two weeks

00:42:35,359 --> 00:42:44,240
i'll get the new wechat

00:42:37,280 --> 00:42:47,280
container that'll be used to start it

00:42:44,240 --> 00:42:48,960
okay cool uh i'm gonna you know

00:42:47,280 --> 00:42:50,560
stop presenting and all but i'll hang

00:42:48,960 --> 00:42:52,640
out in the in the chat

00:42:50,560 --> 00:42:55,119
uh for a little bit but thanks for

00:42:52,640 --> 00:42:57,359
everybody for coming and i appreciate uh

00:42:55,119 --> 00:42:58,880
you joining the talk and we have a

00:42:57,359 --> 00:43:00,480
workshop tomorrow

00:42:58,880 --> 00:43:03,440
so if you're interested in getting your

00:43:00,480 --> 00:43:05,359
hands on with fedora core os

00:43:03,440 --> 00:43:07,200
feel free to come to that if not it's on

00:43:05,359 --> 00:43:10,400
the website or on the docs page

00:43:07,200 --> 00:43:11,520
so you can you can execute that whenever

00:43:10,400 --> 00:43:17,440
you like

00:43:11,520 --> 00:43:17,440

YouTube URL: https://www.youtube.com/watch?v=mxiLgB9tua8


