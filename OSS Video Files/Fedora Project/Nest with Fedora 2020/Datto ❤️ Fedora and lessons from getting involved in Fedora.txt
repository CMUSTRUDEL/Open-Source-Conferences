Title: Datto ❤️ Fedora and lessons from getting involved in Fedora
Publication date: 2020-08-25
Playlist: Nest with Fedora 2020
Description: 
	This talk presents what Datto leverages from Fedora, how Datto uses it, and how we are becoming involved in Fedora, and other communities.

Presented at Nest With Fedora 2020.
Captions: 
	00:00:02,080 --> 00:00:06,560
hello all y'all

00:00:03,280 --> 00:00:08,720
uh my name is neil and i'm with me is

00:00:06,560 --> 00:00:10,559
dan axelrod daniel axelrod

00:00:08,720 --> 00:00:12,320
and we're here to talk about how data

00:00:10,559 --> 00:00:14,080
loves fedora what we do with it and the

00:00:12,320 --> 00:00:16,480
lessons that um

00:00:14,080 --> 00:00:17,680
you know that fedora can learn from us

00:00:16,480 --> 00:00:19,199
about contributing

00:00:17,680 --> 00:00:20,960
and how we've learned to contribute as

00:00:19,199 --> 00:00:22,880
well um so

00:00:20,960 --> 00:00:24,400
to start with this like let's talk a

00:00:22,880 --> 00:00:27,680
little bit about who we are

00:00:24,400 --> 00:00:29,439
um so my i consider myself a little bit

00:00:27,680 --> 00:00:30,400
of a professional technologist i've been

00:00:29,439 --> 00:00:32,960
doing

00:00:30,400 --> 00:00:33,920
stuff with linux for 15 years give or

00:00:32,960 --> 00:00:36,960
take

00:00:33,920 --> 00:00:37,600
i'm a contributor and developer um in

00:00:36,960 --> 00:00:40,399
fedora

00:00:37,600 --> 00:00:40,960
open souza magia open mandriva got a

00:00:40,399 --> 00:00:44,160
little bit

00:00:40,960 --> 00:00:45,920
uh here and there with debian and ubuntu

00:00:44,160 --> 00:00:47,760
um and you'll probably find me like

00:00:45,920 --> 00:00:49,280
listed somewhere probably in a few arch

00:00:47,760 --> 00:00:53,280
things or whatever like i

00:00:49,280 --> 00:00:55,840
i've lost track at this point uh and

00:00:53,280 --> 00:00:58,480
uh i'm a member of fesco as well as many

00:00:55,840 --> 00:01:02,079
fedora sigs and working groups and

00:00:58,480 --> 00:01:04,640
that's really been enabled by you know

00:01:02,079 --> 00:01:06,080
datto who has employed me generously as

00:01:04,640 --> 00:01:08,240
a devops engineer

00:01:06,080 --> 00:01:10,159
you know for whatever that kind of means

00:01:08,240 --> 00:01:13,360
but the most important part is

00:01:10,159 --> 00:01:15,920
um what i do tends to help me

00:01:13,360 --> 00:01:17,520
relate within fedora and they let me you

00:01:15,920 --> 00:01:20,240
know spend my time

00:01:17,520 --> 00:01:21,040
helping with fedora to help daddo and so

00:01:20,240 --> 00:01:23,759
there you go

00:01:21,040 --> 00:01:26,799
and uh dan uh why don't you uh go ahead

00:01:23,759 --> 00:01:30,400
and introduce yourself

00:01:26,799 --> 00:01:32,880
i'm daniel axelrod the

00:01:30,400 --> 00:01:34,960
shortest way to sum up a lot of what i

00:01:32,880 --> 00:01:38,000
do is build platforms

00:01:34,960 --> 00:01:40,320
um and i firmly believe that

00:01:38,000 --> 00:01:42,479
we get better technology by being

00:01:40,320 --> 00:01:46,079
empathetic towards people

00:01:42,479 --> 00:01:46,960
uh i've been a linux user for about 16

00:01:46,079 --> 00:01:50,000
years

00:01:46,960 --> 00:01:53,920
um i started on slackware

00:01:50,000 --> 00:01:56,079
and quickly ran into

00:01:53,920 --> 00:01:57,600
expecting that slackware 16 years ago

00:01:56,079 --> 00:01:58,479
would have a good package manager and

00:01:57,600 --> 00:02:01,520
didn't

00:01:58,479 --> 00:02:02,000
um which is how i eventually made my way

00:02:01,520 --> 00:02:05,040
to

00:02:02,000 --> 00:02:07,280
uh to other os's um that ended up making

00:02:05,040 --> 00:02:09,599
me kind of a package management nerd

00:02:07,280 --> 00:02:10,959
um and in fact i once wrote a terrible

00:02:09,599 --> 00:02:12,720
yum clone you will not hear

00:02:10,959 --> 00:02:14,879
anything about this terrible young clone

00:02:12,720 --> 00:02:17,920
in this talk um

00:02:14,879 --> 00:02:18,560
the details of it are best buried i am

00:02:17,920 --> 00:02:21,840
also

00:02:18,560 --> 00:02:25,200
a senior uh devops engineer at uh

00:02:21,840 --> 00:02:26,720
datto and i'm on nail's team well we

00:02:25,200 --> 00:02:28,800
already got our first comment he wants

00:02:26,720 --> 00:02:32,160
to know about your terrible young clone

00:02:28,800 --> 00:02:32,160
maybe that'll be my flock talk

00:02:34,239 --> 00:02:36,959
all right what was the

00:02:37,440 --> 00:02:41,599
of course oh oh boy yeah

00:02:43,680 --> 00:02:49,680
so um just a little bit about datto um

00:02:47,120 --> 00:02:51,120
we were founded in 2007 we got around 23

00:02:49,680 --> 00:02:54,800
offices around the world

00:02:51,120 --> 00:02:56,879
you know we we're 1800 strong growing um

00:02:54,800 --> 00:02:58,319
we operate exclusively in what's known

00:02:56,879 --> 00:03:00,640
as the channel which means that we

00:02:58,319 --> 00:03:02,879
operate in a market where we sell two

00:03:00,640 --> 00:03:05,920
businesses who sell to other businesses

00:03:02,879 --> 00:03:09,920
and through that network of our

00:03:05,920 --> 00:03:12,080
customer management whatever we have

00:03:09,920 --> 00:03:13,519
17 000 plus managed service provider

00:03:12,080 --> 00:03:16,560
partners that we work with

00:03:13,519 --> 00:03:18,480
to sell our products to sell the them to

00:03:16,560 --> 00:03:21,200
their customers

00:03:18,480 --> 00:03:21,920
and what we tend to offer is managed

00:03:21,200 --> 00:03:25,040
services

00:03:21,920 --> 00:03:27,519
for managed service provider

00:03:25,040 --> 00:03:28,959
oriented it solutions so that they can

00:03:27,519 --> 00:03:31,599
help support companies

00:03:28,959 --> 00:03:32,640
that may not necessarily have the

00:03:31,599 --> 00:03:36,239
wherewithal

00:03:32,640 --> 00:03:38,720
to handle their own it solutions

00:03:36,239 --> 00:03:40,239
and so that that starts with the what we

00:03:38,720 --> 00:03:41,840
call unified continuity which is our

00:03:40,239 --> 00:03:43,760
disaster recovery

00:03:41,840 --> 00:03:45,440
um business continuity solutions that do

00:03:43,760 --> 00:03:47,200
backups and restores and stuff like that

00:03:45,440 --> 00:03:49,519
as well as networking

00:03:47,200 --> 00:03:51,360
the file sync and share stuff and then

00:03:49,519 --> 00:03:54,159
as well as

00:03:51,360 --> 00:03:55,519
service automation and business

00:03:54,159 --> 00:03:58,239
management solutions

00:03:55,519 --> 00:04:01,040
and machine management mass management

00:03:58,239 --> 00:04:02,319
platform solutions um

00:04:01,040 --> 00:04:04,879
but you know that's not what we're here

00:04:02,319 --> 00:04:08,720
for we're here for why fedora um

00:04:04,879 --> 00:04:11,120
so you'll you might be surprised but the

00:04:08,720 --> 00:04:13,040
reason why fedora really comes down

00:04:11,120 --> 00:04:14,319
to those four pillars that make up

00:04:13,040 --> 00:04:17,840
fedora the four

00:04:14,319 --> 00:04:20,239
f's freedoms features

00:04:17,840 --> 00:04:23,199
first and friends and we'll start with

00:04:20,239 --> 00:04:25,280
the first pillar it's like

00:04:23,199 --> 00:04:26,960
the closer to upstream but stable

00:04:25,280 --> 00:04:29,280
platform that fedora

00:04:26,960 --> 00:04:30,960
is with the upstream first philosophy it

00:04:29,280 --> 00:04:33,040
leads to a great dynamic between

00:04:30,960 --> 00:04:35,199
fedorans and the projects they ship

00:04:33,040 --> 00:04:36,400
but you're shipping the latest stuff

00:04:35,199 --> 00:04:38,080
that is tested

00:04:36,400 --> 00:04:40,720
and integrated well with things like

00:04:38,080 --> 00:04:42,320
fedora ci and open qa and bode

00:04:40,720 --> 00:04:44,720
and things like that and it provides an

00:04:42,320 --> 00:04:46,240
excellent solid foundation to build upon

00:04:44,720 --> 00:04:47,919
and it makes it so that it's a very

00:04:46,240 --> 00:04:49,919
trustable platform to build

00:04:47,919 --> 00:04:52,560
everything that we want to build and

00:04:49,919 --> 00:04:52,560
start from

00:04:53,120 --> 00:04:56,800
and as we go through that and we start

00:04:55,600 --> 00:04:59,520
using those bits

00:04:56,800 --> 00:05:00,000
for ourselves it's the tooling that is

00:04:59,520 --> 00:05:01,360
built

00:05:00,000 --> 00:05:03,600
in fedora for supporting the

00:05:01,360 --> 00:05:05,120
distribution supporting leveraging it

00:05:03,600 --> 00:05:06,000
for various components and things like

00:05:05,120 --> 00:05:08,240
that or even like

00:05:06,000 --> 00:05:10,400
enabling contributions and stuff is

00:05:08,240 --> 00:05:12,479
fantastic they have a nice separation of

00:05:10,400 --> 00:05:14,240
concerns across the different scopes

00:05:12,479 --> 00:05:15,600
um it enables picking and integrating

00:05:14,240 --> 00:05:17,919
the bits that we've needed

00:05:15,600 --> 00:05:19,840
it's a lot of it is super adaptable for

00:05:17,919 --> 00:05:20,720
purposes that probably weren't conceived

00:05:19,840 --> 00:05:23,919
before

00:05:20,720 --> 00:05:25,280
um like internally we don't use koji we

00:05:23,919 --> 00:05:26,479
use a system called obs

00:05:25,280 --> 00:05:28,720
open build service which we'll talk

00:05:26,479 --> 00:05:29,840
about a little bit later and it's a nice

00:05:28,720 --> 00:05:31,759
echo of the

00:05:29,840 --> 00:05:33,680
unix philosophy i think in the way that

00:05:31,759 --> 00:05:35,759
people really intended it to be

00:05:33,680 --> 00:05:37,280
where you have tools that are fit for

00:05:35,759 --> 00:05:38,320
purpose that can be juggled around and

00:05:37,280 --> 00:05:40,080
adapted

00:05:38,320 --> 00:05:42,560
and integrated well for whatever purpose

00:05:40,080 --> 00:05:44,400
you feel like and so this is really

00:05:42,560 --> 00:05:45,039
handy for us and it makes it easy for us

00:05:44,400 --> 00:05:48,160
to

00:05:45,039 --> 00:05:48,560
uh you know use and remix the tooling

00:05:48,160 --> 00:05:51,600
for

00:05:48,560 --> 00:05:53,600
our purposes and we contribute back

00:05:51,600 --> 00:05:56,000
as as it makes sense and where things

00:05:53,600 --> 00:05:58,240
can be beneficial for fedora as well

00:05:56,000 --> 00:05:59,759
um and the bias towards action this is

00:05:58,240 --> 00:06:03,919
actually one of the things that aligns

00:05:59,759 --> 00:06:05,759
really well for us in uh for as a datto

00:06:03,919 --> 00:06:09,520
core value that we

00:06:05,759 --> 00:06:13,199
we try to go forward and and

00:06:09,520 --> 00:06:14,160
we can do stuff and if it turns out to

00:06:13,199 --> 00:06:16,720
go bad

00:06:14,160 --> 00:06:18,319
they can be fixed so this aligns very

00:06:16,720 --> 00:06:21,360
well with the features pillar

00:06:18,319 --> 00:06:23,120
and this is emphasized all over the

00:06:21,360 --> 00:06:24,800
place in all kinds of interesting ways

00:06:23,120 --> 00:06:25,680
like the lazy consensus model for

00:06:24,800 --> 00:06:28,720
changes

00:06:25,680 --> 00:06:30,000
like the way that someone can come up

00:06:28,720 --> 00:06:32,160
with a feature

00:06:30,000 --> 00:06:34,319
uh or a change and propose it and the

00:06:32,160 --> 00:06:37,600
community debates it and then it goes

00:06:34,319 --> 00:06:40,479
up for fesco and then if there aren't

00:06:37,600 --> 00:06:42,639
strong objections to it it goes out and

00:06:40,479 --> 00:06:45,520
it gets implemented and this is how

00:06:42,639 --> 00:06:46,960
you know this lazy consensus model plus

00:06:45,520 --> 00:06:49,840
this continuous improvement through

00:06:46,960 --> 00:06:49,840
these changes

00:06:50,160 --> 00:06:54,319
allows fedora to be successful at

00:06:53,120 --> 00:06:57,759
delivering

00:06:54,319 --> 00:07:00,160
a best-in-class platform and for us

00:06:57,759 --> 00:07:02,479
that's awesome because it means that you

00:07:00,160 --> 00:07:04,479
guys aren't afraid to make

00:07:02,479 --> 00:07:06,000
you know a better thing and you're not

00:07:04,479 --> 00:07:08,560
afraid to make a splash for it

00:07:06,000 --> 00:07:09,919
and everyone benefits from it it's not

00:07:08,560 --> 00:07:11,520
just about fedora it's

00:07:09,919 --> 00:07:13,520
you know it supports you know

00:07:11,520 --> 00:07:16,960
distributions like open souza

00:07:13,520 --> 00:07:18,720
um debian ubuntu you know arch everyone

00:07:16,960 --> 00:07:20,479
and that's fantastic and it helps us as

00:07:18,720 --> 00:07:22,400
well because some of the things we'd

00:07:20,479 --> 00:07:25,440
like to do we look at it and we

00:07:22,400 --> 00:07:27,120
and we take it in even as we take it in

00:07:25,440 --> 00:07:30,479
or we even propose into

00:07:27,120 --> 00:07:32,319
and that helps us and helps everyone um

00:07:30,479 --> 00:07:34,400
but of course the most important part is

00:07:32,319 --> 00:07:36,560
that the community is collaborative and

00:07:34,400 --> 00:07:37,360
very friendly the genuine desire to help

00:07:36,560 --> 00:07:40,800
everyone

00:07:37,360 --> 00:07:42,240
with the the interlocking bonds across

00:07:40,800 --> 00:07:44,240
the six the teams

00:07:42,240 --> 00:07:46,400
the working groups whatever and the

00:07:44,240 --> 00:07:47,840
default assumption of like everyone is

00:07:46,400 --> 00:07:49,039
working to help each other it's a

00:07:47,840 --> 00:07:52,479
positive intent

00:07:49,039 --> 00:07:54,160
and this extends out to beyond fedora

00:07:52,479 --> 00:07:55,840
like as we as it goes to

00:07:54,160 --> 00:07:58,240
across other projects and things like

00:07:55,840 --> 00:08:02,080
that this makes

00:07:58,240 --> 00:08:05,520
this makes it so much

00:08:02,080 --> 00:08:06,720
more fun and much easier for people to

00:08:05,520 --> 00:08:10,479
feel comfortable

00:08:06,720 --> 00:08:12,319
with bringing them their best self into

00:08:10,479 --> 00:08:14,400
into the community into the project and

00:08:12,319 --> 00:08:15,599
that has that is something that we

00:08:14,400 --> 00:08:18,160
really enjoy

00:08:15,599 --> 00:08:19,360
from the datto side like it's super easy

00:08:18,160 --> 00:08:22,000
for people to come in

00:08:19,360 --> 00:08:23,520
meet other folks try to work together

00:08:22,000 --> 00:08:26,160
and get something done

00:08:23,520 --> 00:08:27,599
um really well and so that has been

00:08:26,160 --> 00:08:30,240
fantastic

00:08:27,599 --> 00:08:31,440
um and to kind of jump past that let's

00:08:30,240 --> 00:08:33,680
talk a little bit about like how

00:08:31,440 --> 00:08:35,039
datto projects and products wind up

00:08:33,680 --> 00:08:37,680
using fedora

00:08:35,039 --> 00:08:38,880
so we use a wide range of technologies

00:08:37,680 --> 00:08:41,680
across the board

00:08:38,880 --> 00:08:43,680
so i think the most obvious one is that

00:08:41,680 --> 00:08:45,360
we use fedora linux itself we also use a

00:08:43,680 --> 00:08:46,399
lot of packages and backboarded for our

00:08:45,360 --> 00:08:49,680
own things

00:08:46,399 --> 00:08:52,959
um we use kvm and libvert we use

00:08:49,680 --> 00:08:56,800
okd with fedor core os

00:08:52,959 --> 00:08:58,399
for we obviously have with uh some usage

00:08:56,800 --> 00:09:01,680
of centos and we're doing

00:08:58,399 --> 00:09:03,440
some work with centos stream um recently

00:09:01,680 --> 00:09:06,160
uh and we're also using fedora apple on

00:09:03,440 --> 00:09:08,399
top of that because you know why why use

00:09:06,160 --> 00:09:09,200
why use it without apple that's crazy

00:09:08,399 --> 00:09:11,120
talk

00:09:09,200 --> 00:09:12,240
and we contribute to all of these things

00:09:11,120 --> 00:09:15,040
where we can

00:09:12,240 --> 00:09:16,560
we also use spacewalk for uh from

00:09:15,040 --> 00:09:17,920
machine management for workstation

00:09:16,560 --> 00:09:18,800
management and form and for our server

00:09:17,920 --> 00:09:22,480
management

00:09:18,800 --> 00:09:26,000
as well as so lio is the

00:09:22,480 --> 00:09:28,080
and we use lio which is the linux io

00:09:26,000 --> 00:09:31,200
target i think linux io is what it's

00:09:28,080 --> 00:09:35,760
called um it's basically the iscsi tools

00:09:31,200 --> 00:09:37,440
that are used for managing

00:09:35,760 --> 00:09:38,959
targets and initiators and all those

00:09:37,440 --> 00:09:40,480
sorts of things and

00:09:38,959 --> 00:09:42,640
this is actually under the fedora

00:09:40,480 --> 00:09:43,040
umbrella and although it's not that well

00:09:42,640 --> 00:09:46,480
known

00:09:43,040 --> 00:09:50,000
it is in fact part of it um yep

00:09:46,480 --> 00:09:52,480
that's right uh linux iscsi target

00:09:50,000 --> 00:09:54,080
um i don't know why it's called lio i

00:09:52,480 --> 00:09:57,120
think it means linux io but it's

00:09:54,080 --> 00:10:00,880
it's still weird anyway uh

00:09:57,120 --> 00:10:02,480
point past that um the starting point

00:10:00,880 --> 00:10:04,480
for this is like the data linux agent

00:10:02,480 --> 00:10:06,880
this involves the centos stream

00:10:04,480 --> 00:10:08,399
so the data linux backup agent is

00:10:06,880 --> 00:10:10,320
actually part of our business continuity

00:10:08,399 --> 00:10:12,640
disaster recovery solutions

00:10:10,320 --> 00:10:13,680
it enables seamless backups of linux

00:10:12,640 --> 00:10:17,279
systems

00:10:13,680 --> 00:10:18,160
um and it's it basically is built on

00:10:17,279 --> 00:10:20,959
with two components

00:10:18,160 --> 00:10:23,440
in mind in place the data bd which is an

00:10:20,959 --> 00:10:25,920
open source kernel module

00:10:23,440 --> 00:10:27,440
and data linux agent daemon which is a

00:10:25,920 --> 00:10:29,279
proprietary user space david for

00:10:27,440 --> 00:10:31,920
interfacing with our

00:10:29,279 --> 00:10:33,920
with our appliances and this solution

00:10:31,920 --> 00:10:35,600
was introduced in 2015 to add support

00:10:33,920 --> 00:10:38,240
for linux systems

00:10:35,600 --> 00:10:39,360
and with that we have done over 300

00:10:38,240 --> 00:10:41,680
releases since we

00:10:39,360 --> 00:10:44,079
since we started in five years ago and

00:10:41,680 --> 00:10:46,640
over 50 distribution releases

00:10:44,079 --> 00:10:47,120
across that time frame um currently we

00:10:46,640 --> 00:10:48,959
support

00:10:47,120 --> 00:10:50,720
slightly under half with the latest data

00:10:48,959 --> 00:10:53,920
linux agent versions

00:10:50,720 --> 00:10:55,440
um we actually do in fact support

00:10:53,920 --> 00:10:56,720
all the fedora uh all the currently

00:10:55,440 --> 00:10:58,720
supported fedora releases we've actually

00:10:56,720 --> 00:11:00,079
supported fedora since fedora 20.

00:10:58,720 --> 00:11:01,760
um of course we support red hat

00:11:00,079 --> 00:11:04,000
enterprise linux um

00:11:01,760 --> 00:11:05,519
we've supported open souza and well uh

00:11:04,000 --> 00:11:07,519
even into the transition of open source

00:11:05,519 --> 00:11:09,920
elite suse linux enterprise

00:11:07,519 --> 00:11:10,560
and of course debian and ubuntu lts but

00:11:09,920 --> 00:11:13,279
like

00:11:10,560 --> 00:11:13,680
we we actually do support fedora for

00:11:13,279 --> 00:11:17,120
this

00:11:13,680 --> 00:11:18,079
for this product and that has massively

00:11:17,120 --> 00:11:19,920
helped us

00:11:18,079 --> 00:11:22,000
and furthering along those lines is that

00:11:19,920 --> 00:11:23,839
when centos stream started we we started

00:11:22,000 --> 00:11:25,200
integrating this into our process

00:11:23,839 --> 00:11:27,519
and as i said keeping up with the

00:11:25,200 --> 00:11:29,279
joneses it's enabled us to

00:11:27,519 --> 00:11:31,120
build and test the data linux agent for

00:11:29,279 --> 00:11:32,160
the for rel and keep up with changes in

00:11:31,120 --> 00:11:33,920
the rel kernel

00:11:32,160 --> 00:11:35,279
and as things kind of start coming up

00:11:33,920 --> 00:11:37,360
every once in a while

00:11:35,279 --> 00:11:38,399
we have now the opportunity to

00:11:37,360 --> 00:11:40,320
contribute

00:11:38,399 --> 00:11:42,079
to fix problems we discover in rel as it

00:11:40,320 --> 00:11:44,160
progresses through centos stream

00:11:42,079 --> 00:11:45,839
before it hits our customers and this is

00:11:44,160 --> 00:11:48,959
a valuable thing

00:11:45,839 --> 00:11:51,519
for for both us and i think also for

00:11:48,959 --> 00:11:53,360
for centos and rel because it helps

00:11:51,519 --> 00:11:54,399
prevent issues down the line in upcoming

00:11:53,360 --> 00:11:56,240
rail releases

00:11:54,399 --> 00:11:58,399
and in some cases it makes it so that it

00:11:56,240 --> 00:12:01,279
enables other things that people i

00:11:58,399 --> 00:12:01,839
doubt thought were were possible before

00:12:01,279 --> 00:12:03,760
um

00:12:01,839 --> 00:12:06,079
like just straight up example off the

00:12:03,760 --> 00:12:07,360
top of my head uh when when centos

00:12:06,079 --> 00:12:09,440
stream first came out and

00:12:07,360 --> 00:12:11,279
census 8 was rolling out i discovered

00:12:09,440 --> 00:12:12,720
fairly early on that there was a problem

00:12:11,279 --> 00:12:13,519
that made it so that i couldn't build

00:12:12,720 --> 00:12:15,360
images

00:12:13,519 --> 00:12:18,000
i just went and fixed it i sent a pull

00:12:15,360 --> 00:12:19,760
request we got that integrated in and i

00:12:18,000 --> 00:12:21,440
filed a corresponding bug to say hey red

00:12:19,760 --> 00:12:23,200
hat please pull this into rel

00:12:21,440 --> 00:12:24,800
and they went and took care of it and so

00:12:23,200 --> 00:12:28,880
that's all good

00:12:24,800 --> 00:12:30,079
uh and leaning on past that

00:12:28,880 --> 00:12:33,440
we obviously do quite a bit of

00:12:30,079 --> 00:12:34,880
backboarding stuff um because of course

00:12:33,440 --> 00:12:37,040
that's how it kind of has to work when

00:12:34,880 --> 00:12:39,279
we're when we're

00:12:37,040 --> 00:12:41,040
rolling out stuff onto products but we

00:12:39,279 --> 00:12:44,320
backboard a lot of stuff from fedora

00:12:41,040 --> 00:12:45,040
but not necessarily to centos or

00:12:44,320 --> 00:12:46,880
whatever

00:12:45,040 --> 00:12:48,079
we're actually backboarding fedora

00:12:46,880 --> 00:12:50,000
packages

00:12:48,079 --> 00:12:53,040
to our platform which is currently

00:12:50,000 --> 00:12:53,600
ubuntu based and fedora packages are

00:12:53,040 --> 00:12:56,560
stable

00:12:53,600 --> 00:12:58,800
recent and tested which is very very

00:12:56,560 --> 00:13:01,120
useful for us because it lets us have a

00:12:58,800 --> 00:13:02,800
level of assurance about whether the

00:13:01,120 --> 00:13:03,600
software will actually work as we cherry

00:13:02,800 --> 00:13:06,079
pick it back

00:13:03,600 --> 00:13:08,000
into into our platform and so we use a

00:13:06,079 --> 00:13:11,200
tool called dev build

00:13:08,000 --> 00:13:13,120
uh which lets us use rpm spec files

00:13:11,200 --> 00:13:14,480
uh to take that as inputs to build

00:13:13,120 --> 00:13:17,600
debian packages

00:13:14,480 --> 00:13:18,880
we have actually we often do for almost

00:13:17,600 --> 00:13:22,639
everything i think now

00:13:18,880 --> 00:13:25,440
we build for fedora and cente or centos

00:13:22,639 --> 00:13:26,800
and ubuntu at the same time and verify

00:13:25,440 --> 00:13:28,240
that everything is still working the

00:13:26,800 --> 00:13:30,480
behaviors are consistent

00:13:28,240 --> 00:13:31,920
and we maintain and develop ports of

00:13:30,480 --> 00:13:33,920
fedora macros

00:13:31,920 --> 00:13:35,279
for debt build to run so that we can do

00:13:33,920 --> 00:13:38,800
this sort of thing

00:13:35,279 --> 00:13:42,320
and it is massively improved our ability

00:13:38,800 --> 00:13:45,440
to get things rolling faster and to get

00:13:42,320 --> 00:13:48,639
our feature enablement going um

00:13:45,440 --> 00:13:49,680
in a much more coherent and cohesive way

00:13:48,639 --> 00:13:53,760
and on time

00:13:49,680 --> 00:13:56,079
on time on time's important um

00:13:53,760 --> 00:13:58,639
and rolling into that like our package

00:13:56,079 --> 00:14:01,760
build stuff we've started looking into

00:13:58,639 --> 00:14:04,240
building things um leveraging modules

00:14:01,760 --> 00:14:04,959
because the whole modularity stuff is

00:14:04,240 --> 00:14:07,680
super

00:14:04,959 --> 00:14:09,760
interesting um but of course we don't

00:14:07,680 --> 00:14:10,240
use koji we use the open build service

00:14:09,760 --> 00:14:13,199
which is

00:14:10,240 --> 00:14:14,720
susan's version of koji um it's designed

00:14:13,199 --> 00:14:16,720
to support a wide variety of linux

00:14:14,720 --> 00:14:17,839
platforms such as reddit fedora suse

00:14:16,720 --> 00:14:19,279
debbie and ubuntu

00:14:17,839 --> 00:14:20,560
they offer a hosted version as the

00:14:19,279 --> 00:14:22,000
opensuse build service and that

00:14:20,560 --> 00:14:23,279
appliance image is freely available for

00:14:22,000 --> 00:14:25,360
you set up on your own

00:14:23,279 --> 00:14:26,880
and we have our own host we actually

00:14:25,360 --> 00:14:30,000
self-host our obs

00:14:26,880 --> 00:14:32,639
instance for our use and why we use

00:14:30,000 --> 00:14:34,320
it is the source input flexibility the

00:14:32,639 --> 00:14:36,320
easy scaling of resources

00:14:34,320 --> 00:14:37,760
to just we spit up workers and they work

00:14:36,320 --> 00:14:39,600
but the biggest is that it

00:14:37,760 --> 00:14:41,680
automatically handles chain builds and

00:14:39,600 --> 00:14:44,079
deals with all the dependency

00:14:41,680 --> 00:14:45,279
issues to resolve and clean things up

00:14:44,079 --> 00:14:46,399
and get it so everything's linked

00:14:45,279 --> 00:14:47,839
correctly and works

00:14:46,399 --> 00:14:49,199
um it was straightforward to deploy and

00:14:47,839 --> 00:14:50,000
it lets us build the packages with the

00:14:49,199 --> 00:14:51,920
spec file

00:14:50,000 --> 00:14:54,079
for both debian and rpm distributions

00:14:51,920 --> 00:14:54,880
and so we've we've gone down that road

00:14:54,079 --> 00:14:57,760
and used it

00:14:54,880 --> 00:14:59,360
of course we did we did need to do work

00:14:57,760 --> 00:15:01,360
for modularity and so we worked with the

00:14:59,360 --> 00:15:01,920
obs team along with members of the dnf

00:15:01,360 --> 00:15:03,839
team

00:15:01,920 --> 00:15:05,199
and the fedora modularity team to hash

00:15:03,839 --> 00:15:05,920
out a strategy to support modules and

00:15:05,199 --> 00:15:08,320
obs

00:15:05,920 --> 00:15:09,040
the upstream obs project you know did

00:15:08,320 --> 00:15:10,959
some work

00:15:09,040 --> 00:15:12,560
over the course of the last year which

00:15:10,959 --> 00:15:14,000
led us to refocus on porting that to the

00:15:12,560 --> 00:15:16,800
stable obs release

00:15:14,000 --> 00:15:18,079
we we added support for that and that

00:15:16,800 --> 00:15:21,360
was pulled into obs

00:15:18,079 --> 00:15:23,680
210.1 with our assistance and we

00:15:21,360 --> 00:15:25,680
started using that basically immediately

00:15:23,680 --> 00:15:27,680
to take advantage of modules at scale

00:15:25,680 --> 00:15:30,000
and we're we're actually really

00:15:27,680 --> 00:15:33,199
aggressively adopting modules

00:15:30,000 --> 00:15:35,519
to build out um our solutions um

00:15:33,199 --> 00:15:36,880
internally and to kind of talk more

00:15:35,519 --> 00:15:38,320
about that i'm going to hand this off to

00:15:36,880 --> 00:15:39,920
dan to talk about

00:15:38,320 --> 00:15:41,440
our containerized web apps which

00:15:39,920 --> 00:15:44,880
actually involves this whole scale of

00:15:41,440 --> 00:15:44,880
things that i was just talking about

00:15:47,360 --> 00:15:53,519
actually um

00:15:50,639 --> 00:15:54,800
so um one of the things i've been

00:15:53,519 --> 00:15:58,639
working on recently

00:15:54,800 --> 00:16:02,160
is uh some of our strategy around

00:15:58,639 --> 00:16:05,440
containers going forwards and um

00:16:02,160 --> 00:16:07,519
one of the um one of the one of the

00:16:05,440 --> 00:16:08,560
parts of datto's software ecosystem

00:16:07,519 --> 00:16:11,839
that makes the most sense to

00:16:08,560 --> 00:16:13,519
containerize is our web apps we have a

00:16:11,839 --> 00:16:16,240
ton of different web apps

00:16:13,519 --> 00:16:17,680
some of them are our front ends that

00:16:16,240 --> 00:16:20,160
people are interacting with some of them

00:16:17,680 --> 00:16:23,600
are services

00:16:20,160 --> 00:16:25,839
and as they grow and gain and get more

00:16:23,600 --> 00:16:28,160
complex and have interdependencies

00:16:25,839 --> 00:16:29,120
um containers give us a lot of benefits

00:16:28,160 --> 00:16:32,959
for them

00:16:29,120 --> 00:16:36,240
so uh i'm going to be focusing

00:16:32,959 --> 00:16:39,360
uh right now on specifically our

00:16:36,240 --> 00:16:40,959
php container stack um datto heavily

00:16:39,360 --> 00:16:41,839
uses php so a lot of our web

00:16:40,959 --> 00:16:45,199
applications

00:16:41,839 --> 00:16:47,920
are php applications using the symfony

00:16:45,199 --> 00:16:47,920
web framework

00:16:48,079 --> 00:16:54,320
so modularity actually

00:16:51,199 --> 00:16:56,240
became an extremely useful feature when

00:16:54,320 --> 00:16:58,000
building out these containers

00:16:56,240 --> 00:16:59,920
uh and the reason is really that

00:16:58,000 --> 00:17:01,759
everyone wants a different staple

00:16:59,920 --> 00:17:04,000
everyone wants staple but everyone has a

00:17:01,759 --> 00:17:06,559
different idea of what stable should be

00:17:04,000 --> 00:17:07,439
so on one hand you have application

00:17:06,559 --> 00:17:10,959
engineers

00:17:07,439 --> 00:17:14,240
they care about um the language stack

00:17:10,959 --> 00:17:16,799
um the the php version

00:17:14,240 --> 00:17:18,720
um ends up being somewhat tied to the uh

00:17:16,799 --> 00:17:20,559
the application framework version

00:17:18,720 --> 00:17:22,959
so in order to use a newer version of

00:17:20,559 --> 00:17:24,880
symfony you uh you often need a newer

00:17:22,959 --> 00:17:27,919
version of php

00:17:24,880 --> 00:17:30,720
um and php has

00:17:27,919 --> 00:17:32,000
um you know with every new version they

00:17:30,720 --> 00:17:33,679
things get deprecated

00:17:32,000 --> 00:17:35,919
eventually phased out new features get

00:17:33,679 --> 00:17:38,559
added so

00:17:35,919 --> 00:17:40,880
um application engineers care about

00:17:38,559 --> 00:17:45,200
which php version they're using

00:17:40,880 --> 00:17:47,600
um and because there are a lot of teams

00:17:45,200 --> 00:17:49,679
coordinating on these apps

00:17:47,600 --> 00:17:50,960
there needs to be at least somewhat

00:17:49,679 --> 00:17:52,640
agreement on

00:17:50,960 --> 00:17:54,080
these are the following php versions

00:17:52,640 --> 00:17:55,280
we're going to support and then we need

00:17:54,080 --> 00:17:56,799
to move forward

00:17:55,280 --> 00:17:59,039
everybody needs to go through a process

00:17:56,799 --> 00:17:59,760
of moving forward okay great everybody

00:17:59,039 --> 00:18:02,880
agrees

00:17:59,760 --> 00:18:04,799
we want php uh seven

00:18:02,880 --> 00:18:07,280
four cool let's start working to to go

00:18:04,799 --> 00:18:08,640
to setting four

00:18:07,280 --> 00:18:09,919
when i say everyone though that's the

00:18:08,640 --> 00:18:11,440
application engineers because the

00:18:09,919 --> 00:18:14,080
infrastructure engineers

00:18:11,440 --> 00:18:15,440
care about os versioning and they have a

00:18:14,080 --> 00:18:16,480
very different means than different

00:18:15,440 --> 00:18:19,600
cadence

00:18:16,480 --> 00:18:20,720
um their concerns about what os to use

00:18:19,600 --> 00:18:25,200
and what to upgrade

00:18:20,720 --> 00:18:25,200
uh come down more to um

00:18:25,440 --> 00:18:28,640
compatibility compatibility with

00:18:27,280 --> 00:18:32,080
deployment tools

00:18:28,640 --> 00:18:34,160
um interdependencies between um

00:18:32,080 --> 00:18:36,400
between different servers and also there

00:18:34,160 --> 00:18:38,640
are security concerns for example

00:18:36,400 --> 00:18:39,840
um oh for compliance reasons uh

00:18:38,640 --> 00:18:42,480
everything needs to move

00:18:39,840 --> 00:18:44,400
to for example this new crypto algorithm

00:18:42,480 --> 00:18:46,320
that's only supported in libraries that

00:18:44,400 --> 00:18:49,679
are in this version of the os

00:18:46,320 --> 00:18:51,520
so we need to update um now but then we

00:18:49,679 --> 00:18:54,640
hold off for a while

00:18:51,520 --> 00:18:57,919
um like i said all everybody

00:18:54,640 --> 00:19:00,320
from both parties wants something stable

00:18:57,919 --> 00:19:01,120
they ideally like distro maintain

00:19:00,320 --> 00:19:04,160
software

00:19:01,120 --> 00:19:05,200
so that every time there's a um every

00:19:04,160 --> 00:19:08,000
every time there's a

00:19:05,200 --> 00:19:10,160
security fix or bug fix uh you don't

00:19:08,000 --> 00:19:13,440
need a team of people internally

00:19:10,160 --> 00:19:14,960
um managing uh exactly how that gets

00:19:13,440 --> 00:19:18,240
rolled out what it breaks

00:19:14,960 --> 00:19:19,039
uh who gets it when so what we've come

00:19:18,240 --> 00:19:23,520
down to

00:19:19,039 --> 00:19:26,720
for for a container stack is an lts os

00:19:23,520 --> 00:19:28,400
um with newer php and

00:19:26,720 --> 00:19:30,880
modules are the perfect way to implement

00:19:28,400 --> 00:19:34,000
that so right now we've picked

00:19:30,880 --> 00:19:37,840
uh uvi8 and centos 8

00:19:34,000 --> 00:19:42,000
as the uh

00:19:37,840 --> 00:19:45,200
as the um as the os base and then

00:19:42,000 --> 00:19:47,039
um people can pick the php version they

00:19:45,200 --> 00:19:49,440
want on top of that so

00:19:47,039 --> 00:19:52,559
um some of what some of the containers

00:19:49,440 --> 00:19:55,760
enable uh php this php 7.2 module

00:19:52,559 --> 00:19:58,960
some of them enable the php 73 module

00:19:55,760 --> 00:20:01,360
um the 7 4 module will come out soon

00:19:58,960 --> 00:20:02,559
um but this is this is absolutely

00:20:01,360 --> 00:20:04,240
amazing for

00:20:02,559 --> 00:20:06,960
uh for letting teams work at the pace

00:20:04,240 --> 00:20:09,760
they want to work

00:20:06,960 --> 00:20:09,760
next slide please

00:20:12,240 --> 00:20:18,559
um so i'm not sure how many of you have

00:20:16,559 --> 00:20:20,880
dealt with php extensions before

00:20:18,559 --> 00:20:22,960
php extensions are native code that are

00:20:20,880 --> 00:20:23,600
loaded uh that's loaded into the php

00:20:22,960 --> 00:20:27,039
runtime

00:20:23,600 --> 00:20:30,480
you you build an so um it

00:20:27,039 --> 00:20:33,520
gets loaded in um php doesn't

00:20:30,480 --> 00:20:37,919
come with a lot of sophisticated

00:20:33,520 --> 00:20:40,720
uh tooling to um to kind of manage that

00:20:37,919 --> 00:20:41,760
so you end up having to do things like

00:20:40,720 --> 00:20:44,640
deal with

00:20:41,760 --> 00:20:47,360
um deal with dependencies of this

00:20:44,640 --> 00:20:50,559
extension requires this extension

00:20:47,360 --> 00:20:52,799
and you also end up caring about the

00:20:50,559 --> 00:20:55,039
load order of the sos and runtime that

00:20:52,799 --> 00:20:55,679
that ends up going into a configuration

00:20:55,039 --> 00:20:58,720
file

00:20:55,679 --> 00:21:00,400
and you actually need to care about this

00:20:58,720 --> 00:21:02,640
library has symbols that this other

00:21:00,400 --> 00:21:04,320
library needs so they need to be loaded

00:21:02,640 --> 00:21:07,919
in the following order

00:21:04,320 --> 00:21:11,039
um so all of this really

00:21:07,919 --> 00:21:13,760
really could use a package manager to uh

00:21:11,039 --> 00:21:16,480
to make it easier uh i say this because

00:21:13,760 --> 00:21:19,440
our original strategy was um

00:21:16,480 --> 00:21:21,039
cool let's use a similar strategy to uh

00:21:19,440 --> 00:21:24,159
to the community maintained

00:21:21,039 --> 00:21:25,919
php containers on docker hub and have a

00:21:24,159 --> 00:21:26,799
source built php with source built

00:21:25,919 --> 00:21:28,320
extensions

00:21:26,799 --> 00:21:30,799
we ended up with the all these hairy

00:21:28,320 --> 00:21:34,159
scripts around them until we realize

00:21:30,799 --> 00:21:37,120
dnf solves all of this so

00:21:34,159 --> 00:21:38,640
now we just dnf installed the php

00:21:37,120 --> 00:21:41,760
extensions we want

00:21:38,640 --> 00:21:44,799
uh the the package manager takes care of

00:21:41,760 --> 00:21:46,240
dependencies the um uh the packaging

00:21:44,799 --> 00:21:47,760
itself takes care of

00:21:46,240 --> 00:21:49,919
configuring things in the same load

00:21:47,760 --> 00:21:51,440
order and everything gets composed well

00:21:49,919 --> 00:21:55,280
together

00:21:51,440 --> 00:21:57,520
um what's neat about that is we can also

00:21:55,280 --> 00:21:58,720
get uh extensions from a bunch of

00:21:57,520 --> 00:22:01,840
different places

00:21:58,720 --> 00:22:05,360
so uh some of our extensions come

00:22:01,840 --> 00:22:08,000
from the um the php

00:22:05,360 --> 00:22:09,280
uh the php module itself that's supplied

00:22:08,000 --> 00:22:10,720
by the os

00:22:09,280 --> 00:22:12,720
uh i actually didn't have a bullet point

00:22:10,720 --> 00:22:16,240
for this some of them come from

00:22:12,720 --> 00:22:17,360
apple and for extensions that aren't in

00:22:16,240 --> 00:22:20,080
ether

00:22:17,360 --> 00:22:21,840
they're probably in fedora because lots

00:22:20,080 --> 00:22:24,320
of great stuff is in fedora

00:22:21,840 --> 00:22:26,559
um so we do a back porch from fedora and

00:22:24,320 --> 00:22:27,520
then we have a an easily packaged

00:22:26,559 --> 00:22:32,240
extension

00:22:27,520 --> 00:22:34,000
um what's really neat is that um

00:22:32,240 --> 00:22:35,760
we have things to the point and you

00:22:34,000 --> 00:22:37,840
wrote up some scripts so that

00:22:35,760 --> 00:22:39,760
you run a script and now we have a

00:22:37,840 --> 00:22:42,240
maintained back port

00:22:39,760 --> 00:22:43,200
with the sources inspect from fedora but

00:22:42,240 --> 00:22:45,360
built for

00:22:43,200 --> 00:22:46,640
uh for all the different modules we're

00:22:45,360 --> 00:22:49,120
using

00:22:46,640 --> 00:22:49,120
next slide

00:22:52,960 --> 00:22:56,480
okay so we have a bunch of applications

00:22:54,960 --> 00:22:58,400
they're in a bunch of containers

00:22:56,480 --> 00:23:00,880
uh it sure would be great to have some

00:22:58,400 --> 00:23:03,360
software to run all of these containers

00:23:00,880 --> 00:23:05,120
and uh and help you build them and help

00:23:03,360 --> 00:23:08,320
you manage them

00:23:05,120 --> 00:23:09,919
so uh this is where okd and fedora

00:23:08,320 --> 00:23:13,760
coreos come in

00:23:09,919 --> 00:23:14,720
um so in production right now we're

00:23:13,760 --> 00:23:18,400
using

00:23:14,720 --> 00:23:19,520
um version 3 of the okd kubernetes

00:23:18,400 --> 00:23:22,159
distribution

00:23:19,520 --> 00:23:23,360
um we're mainly using it for as a

00:23:22,159 --> 00:23:26,400
container registry

00:23:23,360 --> 00:23:29,760
and to do our container builds uh

00:23:26,400 --> 00:23:30,559
it it gives us a really smooth

00:23:29,760 --> 00:23:33,440
experience

00:23:30,559 --> 00:23:35,360
for having uh fast reproducible builds

00:23:33,440 --> 00:23:39,280
of all our containers

00:23:35,360 --> 00:23:42,320
uh we have been looking at okd4

00:23:39,280 --> 00:23:43,200
um which uh in case anybody here hasn't

00:23:42,320 --> 00:23:46,320
heard

00:23:43,200 --> 00:23:49,039
um okd4 has gone out of beta

00:23:46,320 --> 00:23:50,480
after uh after an extensive beta period

00:23:49,039 --> 00:23:54,080
and it's now ga

00:23:50,480 --> 00:23:55,919
go use it it's awesome um we have a we

00:23:54,080 --> 00:23:58,240
have a proof of concept where we're

00:23:55,919 --> 00:23:59,760
um we're testing that out and testing

00:23:58,240 --> 00:24:02,240
out workflows around it

00:23:59,760 --> 00:24:03,360
um it gives a really great developer

00:24:02,240 --> 00:24:06,400
experience

00:24:03,360 --> 00:24:09,600
um the uh the odo tool

00:24:06,400 --> 00:24:13,279
uh is a command line tool that um

00:24:09,600 --> 00:24:14,880
that works with okd to um make it easier

00:24:13,279 --> 00:24:17,120
to have

00:24:14,880 --> 00:24:19,360
a really tight loop from when you edit

00:24:17,120 --> 00:24:22,640
code to when it's running in a container

00:24:19,360 --> 00:24:24,799
um in ways that are not just

00:24:22,640 --> 00:24:26,559
i'm interacting with podman on my local

00:24:24,799 --> 00:24:27,760
machine but stuff is different in the

00:24:26,559 --> 00:24:29,919
cluster

00:24:27,760 --> 00:24:31,279
um and it's also got a really good admin

00:24:29,919 --> 00:24:33,440
console it has

00:24:31,279 --> 00:24:35,200
i think the best admin console of any

00:24:33,440 --> 00:24:37,600
kubernetes distribution

00:24:35,200 --> 00:24:39,360
for developer workflows uh that that we

00:24:37,600 --> 00:24:43,919
were able to find

00:24:39,360 --> 00:24:47,200
and underlying okd is is fedora core os

00:24:43,919 --> 00:24:48,720
um fedora core os is the perfect admin

00:24:47,200 --> 00:24:49,440
experience for a bunch of container

00:24:48,720 --> 00:24:51,520
hosts

00:24:49,440 --> 00:24:53,520
because you don't need a configuration

00:24:51,520 --> 00:24:56,080
management tool to manage it

00:24:53,520 --> 00:24:57,600
um it's an image and then it upgrades

00:24:56,080 --> 00:25:00,159
itself to a new image

00:24:57,600 --> 00:25:01,440
and the cluster can manage it all and

00:25:00,159 --> 00:25:04,559
it's not your problem

00:25:01,440 --> 00:25:07,279
it's just all taken care of for you

00:25:04,559 --> 00:25:07,840
um and you know that that all of your

00:25:07,279 --> 00:25:10,000
nodes

00:25:07,840 --> 00:25:12,000
look exactly the same underneath because

00:25:10,000 --> 00:25:15,520
they should

00:25:12,000 --> 00:25:17,600
uh so as as part of this uh

00:25:15,520 --> 00:25:19,120
datto employees are members of the okd

00:25:17,600 --> 00:25:22,320
working group um

00:25:19,120 --> 00:25:23,919
and um uh were

00:25:22,320 --> 00:25:25,679
were involved in in a lot of the

00:25:23,919 --> 00:25:29,440
conversations around

00:25:25,679 --> 00:25:29,840
uh what it would take to get um okay d4

00:25:29,440 --> 00:25:32,640
to

00:25:29,840 --> 00:25:32,640
uh to ga

00:25:35,279 --> 00:25:43,840
and uh next slide please

00:25:44,400 --> 00:25:48,320
all right so um is where i take back

00:25:47,600 --> 00:25:50,480
over

00:25:48,320 --> 00:25:51,440
um so you know you heard from dan

00:25:50,480 --> 00:25:53,679
talking about

00:25:51,440 --> 00:25:54,720
all of this container stuff and and

00:25:53,679 --> 00:25:57,440
workstation things

00:25:54,720 --> 00:25:58,000
the the sorry all this container stuff

00:25:57,440 --> 00:26:00,240
and

00:25:58,000 --> 00:26:02,640
and modularity and all that all those

00:26:00,240 --> 00:26:04,960
good crunchy things for developers

00:26:02,640 --> 00:26:06,240
um i tend to live a little bit lower in

00:26:04,960 --> 00:26:08,080
the stack so let's talk about

00:26:06,240 --> 00:26:09,760
workstation systems management

00:26:08,080 --> 00:26:11,200
because that that's a realm where i live

00:26:09,760 --> 00:26:12,960
in um we

00:26:11,200 --> 00:26:14,559
actually use spacewalk for wrangling our

00:26:12,960 --> 00:26:16,159
workstations so to speak

00:26:14,559 --> 00:26:18,320
so the reason we do this is because

00:26:16,159 --> 00:26:21,440
engineers can choose any distribution

00:26:18,320 --> 00:26:25,039
uh well within reason like we support um

00:26:21,440 --> 00:26:26,159
fedora we support centos and we support

00:26:25,039 --> 00:26:29,840
opensuse leap

00:26:26,159 --> 00:26:31,440
and we support um ubuntu lts those are

00:26:29,840 --> 00:26:32,720
the options that that they can choose

00:26:31,440 --> 00:26:34,320
from because

00:26:32,720 --> 00:26:35,919
and we've done work within spacewalk

00:26:34,320 --> 00:26:38,480
upstream to help support

00:26:35,919 --> 00:26:40,320
these platforms um and the and our

00:26:38,480 --> 00:26:42,559
philosophy here is that our compliance

00:26:40,320 --> 00:26:44,559
is through auditing rather than control

00:26:42,559 --> 00:26:46,559
because we generally trust our our

00:26:44,559 --> 00:26:48,240
engineers to make smart decisions about

00:26:46,559 --> 00:26:49,760
what they need to do and we also

00:26:48,240 --> 00:26:52,080
trust them that they're making changes

00:26:49,760 --> 00:26:55,279
to their systems to help support

00:26:52,080 --> 00:26:57,520
their needs to build our products and

00:26:55,279 --> 00:27:00,240
solutions and services

00:26:57,520 --> 00:27:00,960
so from that perspective spacewalk works

00:27:00,240 --> 00:27:05,120
great for us

00:27:00,960 --> 00:27:07,919
and and that's primarily because

00:27:05,120 --> 00:27:10,400
it doesn't mandate that you have to have

00:27:07,919 --> 00:27:12,400
a control mechanism on the workstations

00:27:10,400 --> 00:27:13,520
for managing them and or for maintaining

00:27:12,400 --> 00:27:15,520
them even really

00:27:13,520 --> 00:27:17,279
so that's why we've kind of gone down

00:27:15,520 --> 00:27:18,960
that road

00:27:17,279 --> 00:27:20,720
for our servers we do it with 4min and

00:27:18,960 --> 00:27:22,559
forbid obviously enforces this mass

00:27:20,720 --> 00:27:24,880
management and control mechanism

00:27:22,559 --> 00:27:26,880
and we do it that way as well um so like

00:27:24,880 --> 00:27:30,640
servers are tightly controlled

00:27:26,880 --> 00:27:32,480
uh for virtualization restores

00:27:30,640 --> 00:27:34,000
uh i guess i'm gonna kind of hand this

00:27:32,480 --> 00:27:35,600
back off to dan because he

00:27:34,000 --> 00:27:37,360
he's good at talking about this sort of

00:27:35,600 --> 00:27:41,120
thing

00:27:37,360 --> 00:27:44,880
sure um so

00:27:41,120 --> 00:27:47,840
our uh our backup products

00:27:44,880 --> 00:27:48,880
uh deal with vms in a couple of

00:27:47,840 --> 00:27:52,000
interesting ways

00:27:48,880 --> 00:27:52,640
and kvm and libert are essential

00:27:52,000 --> 00:27:55,919
projects

00:27:52,640 --> 00:27:58,399
as part of that so uh

00:27:55,919 --> 00:27:59,039
one of the ways in which our products

00:27:58,399 --> 00:28:01,279
can take

00:27:59,039 --> 00:28:02,640
backups of your machines rather than

00:28:01,279 --> 00:28:03,679
having an agent running within the

00:28:02,640 --> 00:28:06,799
machine

00:28:03,679 --> 00:28:08,720
we if your machine is a vm uh we can

00:28:06,799 --> 00:28:10,240
talk to the hypervisor and use

00:28:08,720 --> 00:28:13,600
hypervisor native features

00:28:10,240 --> 00:28:16,880
uh to take backups and so we use libvert

00:28:13,600 --> 00:28:19,200
uh as as a really nice abstraction layer

00:28:16,880 --> 00:28:20,240
over a bunch of different hypervisors so

00:28:19,200 --> 00:28:23,600
that we can support

00:28:20,240 --> 00:28:26,799
uh kvm hyper-v vmware um

00:28:23,600 --> 00:28:28,799
all as all as backup targets

00:28:26,799 --> 00:28:30,399
um the other really cool thing that we

00:28:28,799 --> 00:28:32,880
do is

00:28:30,399 --> 00:28:34,000
um backups are no good unless you can

00:28:32,880 --> 00:28:36,080
restore them that's

00:28:34,000 --> 00:28:37,360
that's one of the rules of backups a

00:28:36,080 --> 00:28:40,480
backup you can't restore

00:28:37,360 --> 00:28:43,200
is uh is not going to help you

00:28:40,480 --> 00:28:43,760
and one of our options for restoring a

00:28:43,200 --> 00:28:46,640
backup

00:28:43,760 --> 00:28:48,880
is to restore it directly into a vm

00:28:46,640 --> 00:28:52,960
either in your vm infrastructure

00:28:48,880 --> 00:28:55,840
um or in our vm infrastructure on

00:28:52,960 --> 00:28:56,640
our metal so we use kvm as the

00:28:55,840 --> 00:28:59,760
hypervisor

00:28:56,640 --> 00:29:03,039
for uh for running the uh

00:28:59,760 --> 00:29:05,279
the these vms um in

00:29:03,039 --> 00:29:06,960
in order to manage the complicated

00:29:05,279 --> 00:29:10,000
process of

00:29:06,960 --> 00:29:12,000
here's a bunch of temporary vms that we

00:29:10,000 --> 00:29:13,279
don't control the contents of because

00:29:12,000 --> 00:29:15,120
they're everything from people's

00:29:13,279 --> 00:29:17,520
workstations to servers but we gotta run

00:29:15,120 --> 00:29:17,520
them all

00:29:18,960 --> 00:29:21,919
and back to you neil

00:29:22,080 --> 00:29:27,200
so i mean you've heard from where what

00:29:24,399 --> 00:29:29,200
we love about fedor and what we're doing

00:29:27,200 --> 00:29:30,320
and how we're trying to you know be

00:29:29,200 --> 00:29:33,039
involved here to

00:29:30,320 --> 00:29:34,000
and why we like being involved um so i

00:29:33,039 --> 00:29:35,919
just want to

00:29:34,000 --> 00:29:37,600
you know touch on a little bit about how

00:29:35,919 --> 00:29:39,120
to make participation in fedora

00:29:37,600 --> 00:29:40,640
even better than it already is because

00:29:39,120 --> 00:29:43,120
it's already pretty great

00:29:40,640 --> 00:29:44,720
there's definitely room for improvement

00:29:43,120 --> 00:29:46,240
it's easy to participate but it could be

00:29:44,720 --> 00:29:48,399
way easier to figure out

00:29:46,240 --> 00:29:50,399
fedora has a well-defined contribution

00:29:48,399 --> 00:29:52,399
process model and tools that support

00:29:50,399 --> 00:29:55,520
drive by and sustained contributions

00:29:52,399 --> 00:29:57,919
are very very much top tier um

00:29:55,520 --> 00:29:59,440
a fan favorite internally is packers

00:29:57,919 --> 00:30:02,559
remote pull requests

00:29:59,440 --> 00:30:03,600
uh we we internally mirror diskit into

00:30:02,559 --> 00:30:05,360
our system

00:30:03,600 --> 00:30:06,720
and whenever we're making changes that

00:30:05,360 --> 00:30:07,440
we want to actually contribute back to

00:30:06,720 --> 00:30:09,279
fedora

00:30:07,440 --> 00:30:10,720
we set up a branch and we push it back

00:30:09,279 --> 00:30:13,120
out to a public mirror

00:30:10,720 --> 00:30:14,159
that we can then just go ahead and go

00:30:13,120 --> 00:30:16,880
into packer

00:30:14,159 --> 00:30:17,440
and then just type in the url in the

00:30:16,880 --> 00:30:19,600
branch

00:30:17,440 --> 00:30:20,720
and just submit it as a pull request

00:30:19,600 --> 00:30:22,880
this has

00:30:20,720 --> 00:30:24,480
literally we've literally gotten props

00:30:22,880 --> 00:30:25,120
like i've literally received feedback

00:30:24,480 --> 00:30:26,640
from

00:30:25,120 --> 00:30:28,320
other people in the company saying like

00:30:26,640 --> 00:30:31,039
this is fantastic

00:30:28,320 --> 00:30:32,720
and and i and like they don't know why

00:30:31,039 --> 00:30:33,440
other people don't have this and it's

00:30:32,720 --> 00:30:35,440
just

00:30:33,440 --> 00:30:36,559
it it turned into a super big fan

00:30:35,440 --> 00:30:38,799
favorite so like

00:30:36,559 --> 00:30:41,440
that's awesome um getting started

00:30:38,799 --> 00:30:44,880
however is super overwhelming for people

00:30:41,440 --> 00:30:45,840
um the wiki pages that are linked to

00:30:44,880 --> 00:30:48,399
from the

00:30:45,840 --> 00:30:49,520
what can i do for for fedora dot org

00:30:48,399 --> 00:30:52,799
website is

00:30:49,520 --> 00:30:54,960
awful um we hack around this

00:30:52,799 --> 00:30:56,240
by mentoring you know other people

00:30:54,960 --> 00:30:57,120
within the company who are actually

00:30:56,240 --> 00:30:59,360
familiar

00:30:57,120 --> 00:31:00,799
with contributing to fedora like but

00:30:59,360 --> 00:31:03,679
this doesn't scale

00:31:00,799 --> 00:31:04,080
uh very well um one thing that could

00:31:03,679 --> 00:31:06,640
really

00:31:04,080 --> 00:31:08,159
really help is taking a hard look at

00:31:06,640 --> 00:31:11,679
those pages

00:31:08,159 --> 00:31:13,519
and and breaking up that

00:31:11,679 --> 00:31:15,360
flow and that information into more

00:31:13,519 --> 00:31:18,000
bite-sized chunks to make it a lot less

00:31:15,360 --> 00:31:21,120
scary and make easier to

00:31:18,000 --> 00:31:23,120
to um you know kind of

00:31:21,120 --> 00:31:25,279
walk people through the process of doing

00:31:23,120 --> 00:31:27,519
your first your first package

00:31:25,279 --> 00:31:28,720
sending in your first patch you know

00:31:27,519 --> 00:31:31,279
making your first edit

00:31:28,720 --> 00:31:32,960
or updating some docs like right now

00:31:31,279 --> 00:31:35,440
like i look at the pages and

00:31:32,960 --> 00:31:37,200
at least one of them i think i i did the

00:31:35,440 --> 00:31:40,240
print to pdf and it was like

00:31:37,200 --> 00:31:40,960
15 pages that's a lot of dense

00:31:40,240 --> 00:31:42,880
information

00:31:40,960 --> 00:31:44,480
in one page so that's something that

00:31:42,880 --> 00:31:46,559
would really help and

00:31:44,480 --> 00:31:48,399
you know just some making it easier to

00:31:46,559 --> 00:31:50,080
discover some of these

00:31:48,399 --> 00:31:51,760
you know features that help support

00:31:50,080 --> 00:31:52,799
contributions more easily would also

00:31:51,760 --> 00:31:55,919
help as well

00:31:52,799 --> 00:31:58,399
like the the the remote pull request was

00:31:55,919 --> 00:31:59,840
a godsend and it's not exactly called

00:31:58,399 --> 00:32:02,159
out to anywhere

00:31:59,840 --> 00:32:03,919
but it's a very awesome thing so like

00:32:02,159 --> 00:32:06,080
you know you're doing great

00:32:03,919 --> 00:32:08,240
just just a little bit more to make it

00:32:06,080 --> 00:32:10,720
better

00:32:08,240 --> 00:32:11,360
so that's kind of it for our i guess

00:32:10,720 --> 00:32:13,919
what we would call

00:32:11,360 --> 00:32:15,279
prepared remarks if you want to check

00:32:13,919 --> 00:32:17,360
out more about us like we have our

00:32:15,279 --> 00:32:18,720
engineering blog at data.engineering

00:32:17,360 --> 00:32:20,799
if you want to join us maybe we're

00:32:18,720 --> 00:32:22,240
hiring data.com careers

00:32:20,799 --> 00:32:25,279
and you can check out our public

00:32:22,240 --> 00:32:27,760
github.com and gitlab.com

00:32:25,279 --> 00:32:29,200
organizations and see what what we've

00:32:27,760 --> 00:32:30,960
got there we've got a

00:32:29,200 --> 00:32:32,480
fair few open source projects as well as

00:32:30,960 --> 00:32:35,519
some other things there

00:32:32,480 --> 00:32:42,480
um you know questions comments

00:32:35,519 --> 00:32:44,960
we're here to to to lay it out

00:32:42,480 --> 00:32:46,000
with a comment everybody here give

00:32:44,960 --> 00:32:47,919
yourself a hug

00:32:46,000 --> 00:32:57,840
because the fedora community is

00:32:47,919 --> 00:32:57,840
fantastic to work with

00:33:10,480 --> 00:33:15,519
how how do people put them in the chat

00:33:14,480 --> 00:33:17,600
and then we answer them

00:33:15,519 --> 00:33:18,720
i believe that's how this works i mean

00:33:17,600 --> 00:33:20,640
we're uh

00:33:18,720 --> 00:33:22,399
so we were muted i think just out of

00:33:20,640 --> 00:33:25,039
habit we don't have to be mean

00:33:22,399 --> 00:33:25,919
oh let's see ben cotton just gave us a

00:33:25,039 --> 00:33:28,000
question

00:33:25,919 --> 00:33:29,679
if you could change one thing in fedora

00:33:28,000 --> 00:33:30,880
to make it work better for datto what

00:33:29,679 --> 00:33:33,460
would that be

00:33:30,880 --> 00:33:35,200
oh boy then you don't ask the easy ones

00:33:33,460 --> 00:33:38,960
[Laughter]

00:33:35,200 --> 00:33:41,279
um one thing okay

00:33:38,960 --> 00:33:41,279
uh

00:33:42,640 --> 00:33:49,039
um let's see

00:33:46,000 --> 00:33:51,919
if i could change one thing just

00:33:49,039 --> 00:33:53,120
only one you know what i'm going to i'm

00:33:51,919 --> 00:33:54,159
going to punt this i'm going to ask

00:33:53,120 --> 00:33:58,559
danda

00:33:54,159 --> 00:34:02,240
to do this um for me

00:33:58,559 --> 00:34:02,799
for me it was really the getting started

00:34:02,240 --> 00:34:06,480
problem

00:34:02,799 --> 00:34:09,520
of um i want to

00:34:06,480 --> 00:34:12,560
contribute a patch to a spec file

00:34:09,520 --> 00:34:15,679
um wait i can't just like

00:34:12,560 --> 00:34:17,520
have have packer trust my keys and

00:34:15,679 --> 00:34:18,720
and push to a get remote there's this

00:34:17,520 --> 00:34:21,520
whole like

00:34:18,720 --> 00:34:22,000
off process that opens up a web browser

00:34:21,520 --> 00:34:25,040
but

00:34:22,000 --> 00:34:27,119
i'm on a headless machine and so

00:34:25,040 --> 00:34:29,599
i i know work has been done since then

00:34:27,119 --> 00:34:34,320
this is this experience was also

00:34:29,599 --> 00:34:37,119
uh probably about a year ago but it was

00:34:34,320 --> 00:34:38,879
it was uh it was kind of frustrating to

00:34:37,119 --> 00:34:41,040
be already with a patch

00:34:38,879 --> 00:34:42,720
and then have that last little bit of

00:34:41,040 --> 00:34:43,679
how do i get the patch to where somebody

00:34:42,720 --> 00:34:47,119
can see it

00:34:43,679 --> 00:34:50,720
require way more steps than um

00:34:47,119 --> 00:34:52,240
that i'm used to that said um in irc

00:34:50,720 --> 00:34:53,839
people were super helpful getting me

00:34:52,240 --> 00:34:54,720
through them and that goes back to some

00:34:53,839 --> 00:34:58,000
of that mentoring

00:34:54,720 --> 00:34:59,520
but um the

00:34:58,000 --> 00:35:02,320
i believe also the docs have been

00:34:59,520 --> 00:35:04,640
improved since then

00:35:02,320 --> 00:35:06,480
just so with dan just said reminded me

00:35:04,640 --> 00:35:08,320
of my one

00:35:06,480 --> 00:35:11,040
i could i want to change about fedora

00:35:08,320 --> 00:35:14,079
that could make it better

00:35:11,040 --> 00:35:15,520
oh my goodness we gotta stop making

00:35:14,079 --> 00:35:17,520
people have to do

00:35:15,520 --> 00:35:18,720
all of the rebuild work by hand for

00:35:17,520 --> 00:35:20,640
themselves

00:35:18,720 --> 00:35:22,720
my goodness like if i if somebody

00:35:20,640 --> 00:35:25,280
updates a library they shouldn't have to

00:35:22,720 --> 00:35:27,119
search for all of it themselves figure

00:35:25,280 --> 00:35:28,800
out whether they can do this

00:35:27,119 --> 00:35:31,040
push it forward oh and make sure they

00:35:28,800 --> 00:35:34,240
have permissions to update everything

00:35:31,040 --> 00:35:36,400
like that is the worst

00:35:34,240 --> 00:35:37,920
thing that i've ever experienced and

00:35:36,400 --> 00:35:39,839
that is the one thing

00:35:37,920 --> 00:35:41,760
that if i could wave a magic wand that

00:35:39,839 --> 00:35:43,440
is what i would fix like i would make

00:35:41,760 --> 00:35:46,160
that entire problem

00:35:43,440 --> 00:35:47,280
just go away because that is how much i

00:35:46,160 --> 00:35:49,520
don't like that

00:35:47,280 --> 00:35:50,800
um and josh boyer asked like what are my

00:35:49,520 --> 00:35:53,839
our biggest pain points

00:35:50,800 --> 00:35:55,599
that's one of them um i think the other

00:35:53,839 --> 00:35:58,640
pain point that i one of the other pain

00:35:55,599 --> 00:36:01,280
points i would say is there is

00:35:58,640 --> 00:36:01,920
a lot of stuff that is in a half

00:36:01,280 --> 00:36:04,960
finished

00:36:01,920 --> 00:36:07,839
state that

00:36:04,960 --> 00:36:09,839
there is no there's no clear way for

00:36:07,839 --> 00:36:13,040
people to kind of get involved

00:36:09,839 --> 00:36:14,240
to to help push things over the finish

00:36:13,040 --> 00:36:15,359
line like there's a lot of little

00:36:14,240 --> 00:36:16,960
initiatives here

00:36:15,359 --> 00:36:19,920
and there but they're all kind of closed

00:36:16,960 --> 00:36:22,960
off and it makes it difficult for

00:36:19,920 --> 00:36:23,280
for for someone like me to jump in and

00:36:22,960 --> 00:36:24,720
say

00:36:23,280 --> 00:36:26,079
let's let's push this over the finish

00:36:24,720 --> 00:36:26,960
line let's fix this let's contribute

00:36:26,079 --> 00:36:28,800
let's make this

00:36:26,960 --> 00:36:30,160
like this better there's a lot of little

00:36:28,800 --> 00:36:34,240
things like that

00:36:30,160 --> 00:36:37,599
um the dynamics

00:36:34,240 --> 00:36:39,680
among uh the the other the other pain

00:36:37,599 --> 00:36:43,200
point i would say is that some of the

00:36:39,680 --> 00:36:45,680
the dynamics with um

00:36:43,200 --> 00:36:47,599
where am i going with this uh with how

00:36:45,680 --> 00:36:50,800
we do

00:36:47,599 --> 00:36:52,800
the builds to task to release

00:36:50,800 --> 00:36:54,480
while it's all happening it's not very

00:36:52,800 --> 00:36:56,560
observable and that makes things a

00:36:54,480 --> 00:36:59,359
little bit difficult for me to feel like

00:36:56,560 --> 00:37:00,720
i have the i have actionable feedback to

00:36:59,359 --> 00:37:03,680
be able to work from

00:37:00,720 --> 00:37:05,520
um like i recently just got bitten by

00:37:03,680 --> 00:37:06,240
something like this just not even a week

00:37:05,520 --> 00:37:09,040
ago

00:37:06,240 --> 00:37:10,480
and that's sort of a thing that's that i

00:37:09,040 --> 00:37:13,119
really wish

00:37:10,480 --> 00:37:14,640
was less of a problem like we do a lot

00:37:13,119 --> 00:37:18,560
of fantastic testing and

00:37:14,640 --> 00:37:21,599
things across the the project but

00:37:18,560 --> 00:37:23,359
but it's not observable like

00:37:21,599 --> 00:37:25,200
how would you find out that oh when you

00:37:23,359 --> 00:37:26,640
kick when a coach you build completes

00:37:25,200 --> 00:37:28,960
it runs through a bunch of tests and

00:37:26,640 --> 00:37:31,520
those are those are stored somewhere

00:37:28,960 --> 00:37:33,280
you don't you especially don't find out

00:37:31,520 --> 00:37:33,920
until it until you submit an update in

00:37:33,280 --> 00:37:35,440
bodhi

00:37:33,920 --> 00:37:36,720
and at which point it's too late for you

00:37:35,440 --> 00:37:38,400
to act on that feedback because it's

00:37:36,720 --> 00:37:40,960
already permanent and stuck

00:37:38,400 --> 00:37:42,320
things like that um those are pain

00:37:40,960 --> 00:37:44,079
points to me because it makes it

00:37:42,320 --> 00:37:45,920
difficult for me to feel like

00:37:44,079 --> 00:37:47,839
i can iterate quickly and i can do

00:37:45,920 --> 00:37:51,200
things effectively

00:37:47,839 --> 00:37:52,800
um so that that like from the pure like

00:37:51,200 --> 00:37:54,960
i am mechanically working through stuff

00:37:52,800 --> 00:37:58,000
point of view those are my pain points

00:37:54,960 --> 00:37:59,920
um uh

00:37:58,000 --> 00:38:01,440
dan do you do you have any others in

00:37:59,920 --> 00:38:02,880
particular like i know you you tend to

00:38:01,440 --> 00:38:04,480
focus a little bit more on like the

00:38:02,880 --> 00:38:05,599
communications and interplay kind of

00:38:04,480 --> 00:38:08,960
things so

00:38:05,599 --> 00:38:08,960
maybe you have some feedback here

00:38:13,920 --> 00:38:20,480
i i actually can't think of anything

00:38:17,680 --> 00:38:24,320
else i'll just have my head now

00:38:20,480 --> 00:38:27,119
so then uh i guess that part's fine

00:38:24,320 --> 00:38:28,400
um what's that are going on right now in

00:38:27,119 --> 00:38:32,000
terms of like

00:38:28,400 --> 00:38:33,599
the um rpm auto specs stuff where it's

00:38:32,000 --> 00:38:35,359
doing the release and change log stuff

00:38:33,599 --> 00:38:38,079
automatically is good

00:38:35,359 --> 00:38:38,800
i mean the crochet stuff is really cool

00:38:38,079 --> 00:38:40,720
um

00:38:38,800 --> 00:38:42,400
but i really wish crochet pushed to

00:38:40,720 --> 00:38:44,640
production immediately

00:38:42,400 --> 00:38:46,480
automatically but i think the rpm auto

00:38:44,640 --> 00:38:47,200
spec plus crochet might actually help

00:38:46,480 --> 00:38:49,920
this

00:38:47,200 --> 00:38:51,839
um i really do like some of the concepts

00:38:49,920 --> 00:38:52,800
of mbs i don't understand why it's a

00:38:51,839 --> 00:38:56,079
separate system

00:38:52,800 --> 00:38:57,599
i really don't get that like it some of

00:38:56,079 --> 00:38:59,280
the functionality in there is useful for

00:38:57,599 --> 00:39:02,079
even non-modular builds

00:38:59,280 --> 00:39:03,440
it should actually be part of it should

00:39:02,079 --> 00:39:06,720
actually be part of koji

00:39:03,440 --> 00:39:10,000
um there's things like that

00:39:06,720 --> 00:39:13,599
which makes me a little bit like

00:39:10,000 --> 00:39:15,760
somebody it needs to like

00:39:13,599 --> 00:39:16,880
holistically think about the experience

00:39:15,760 --> 00:39:18,560
i think that's

00:39:16,880 --> 00:39:20,240
that's what this comes down to like all

00:39:18,560 --> 00:39:22,480
of this comes down to like

00:39:20,240 --> 00:39:23,599
well there's a lot of great things here

00:39:22,480 --> 00:39:26,480
nobody has like

00:39:23,599 --> 00:39:27,280
thought about the holistic contributor

00:39:26,480 --> 00:39:29,200
experience

00:39:27,280 --> 00:39:30,880
in such a way that makes it much more

00:39:29,200 --> 00:39:33,280
streamlined and much more

00:39:30,880 --> 00:39:34,560
effective at helping people get work

00:39:33,280 --> 00:39:38,880
done

00:39:34,560 --> 00:39:39,920
um yeah uh coche does not make prs gens

00:39:38,880 --> 00:39:42,000
it actually just

00:39:39,920 --> 00:39:44,400
it'll rebuild off of already pushed

00:39:42,000 --> 00:39:44,400
commits

00:39:44,800 --> 00:39:49,280
um yeah so

00:39:47,170 --> 00:39:54,000
[Music]

00:39:49,280 --> 00:39:54,000
uh is there any other questions in here

00:39:54,839 --> 00:39:57,839
um so is there any other questions

00:39:57,440 --> 00:39:59,680
because

00:39:57,839 --> 00:40:01,680
at the moment i just see people talking

00:39:59,680 --> 00:40:03,599
to each other in the chat

00:40:01,680 --> 00:40:04,960
which is which is great it's good it's a

00:40:03,599 --> 00:40:11,040
good discussion yeah

00:40:04,960 --> 00:40:14,640
it's good stuff

00:40:11,040 --> 00:40:14,640
some of the success oh yeah yep

00:40:14,800 --> 00:40:17,839
yeah i mean there are some mitigating

00:40:16,560 --> 00:40:19,760
things that helps help this

00:40:17,839 --> 00:40:20,880
set this up like you have six that have

00:40:19,760 --> 00:40:22,640
ownership and

00:40:20,880 --> 00:40:24,640
you have proven packages and stuff like

00:40:22,640 --> 00:40:25,760
that but i'd like to move towards a

00:40:24,640 --> 00:40:27,680
world where

00:40:25,760 --> 00:40:30,160
proven packages don't need to exercise

00:40:27,680 --> 00:40:32,319
their abilities as much

00:40:30,160 --> 00:40:33,280
to do the things that need to be done

00:40:32,319 --> 00:40:35,200
anyway

00:40:33,280 --> 00:40:36,880
by even normal people like it's a

00:40:35,200 --> 00:40:37,599
barrier to entry and if somebody says

00:40:36,880 --> 00:40:39,280
hey

00:40:37,599 --> 00:40:41,119
i want to update this library to this

00:40:39,280 --> 00:40:41,440
new version that yes it bumps the so

00:40:41,119 --> 00:40:43,520
name

00:40:41,440 --> 00:40:45,440
but it brings like xyz awesome new

00:40:43,520 --> 00:40:46,880
features and it'd be super useful for

00:40:45,440 --> 00:40:47,359
everyone else to be able to start from

00:40:46,880 --> 00:40:50,720
it's

00:40:47,359 --> 00:40:52,560
so hard um what's oh ben's got a good

00:40:50,720 --> 00:40:53,920
one what's the centos stream experience

00:40:52,560 --> 00:40:57,280
been like for you so far

00:40:53,920 --> 00:40:57,760
what could make it better um centos

00:40:57,280 --> 00:41:00,640
stream

00:40:57,760 --> 00:41:01,760
is weird so i'm going i give it a lot of

00:41:00,640 --> 00:41:04,079
passes

00:41:01,760 --> 00:41:06,000
because it's so new and it's and and

00:41:04,079 --> 00:41:08,000
like the centos project is not a

00:41:06,000 --> 00:41:09,040
has historically not been a real

00:41:08,000 --> 00:41:10,960
community

00:41:09,040 --> 00:41:13,280
in the sense that there is not people

00:41:10,960 --> 00:41:16,400
being actively participating

00:41:13,280 --> 00:41:17,280
in what it does this is a relatively new

00:41:16,400 --> 00:41:19,680
thing for them

00:41:17,280 --> 00:41:20,640
um that being said there are two things

00:41:19,680 --> 00:41:23,359
that really

00:41:20,640 --> 00:41:24,800
grind my gears about centos stream the

00:41:23,359 --> 00:41:26,000
first is that pull requests are

00:41:24,800 --> 00:41:28,960
pointless

00:41:26,000 --> 00:41:30,079
they are absolutely completely 100

00:41:28,960 --> 00:41:32,319
useless

00:41:30,079 --> 00:41:34,880
um if you make them they don't go

00:41:32,319 --> 00:41:37,839
anywhere they just kind of sit there

00:41:34,880 --> 00:41:40,000
and eventually they go to a bugzilla

00:41:37,839 --> 00:41:42,400
which you need to independently track

00:41:40,000 --> 00:41:43,119
and then they might get merged but you

00:41:42,400 --> 00:41:46,000
don't know

00:41:43,119 --> 00:41:47,839
until some nebulous push at some point

00:41:46,000 --> 00:41:49,359
happens

00:41:47,839 --> 00:41:51,920
understand why that's happening again

00:41:49,359 --> 00:41:53,680
this is all new it's very hard to set

00:41:51,920 --> 00:41:57,359
all this stuff up from zero

00:41:53,680 --> 00:41:58,880
um it is an unpleasant experience if you

00:41:57,359 --> 00:42:00,640
don't have any background

00:41:58,880 --> 00:42:03,040
um what could definitely make it better

00:42:00,640 --> 00:42:05,920
is do more like what fedora does

00:42:03,040 --> 00:42:07,440
make it so that you know you have the

00:42:05,920 --> 00:42:08,960
same contribution model

00:42:07,440 --> 00:42:11,040
you make it easier for the drive-by

00:42:08,960 --> 00:42:13,359
changes and

00:42:11,040 --> 00:42:14,800
people react and give feedback quickly

00:42:13,359 --> 00:42:16,079
like if i make a pull request to a

00:42:14,800 --> 00:42:19,119
package on fedora

00:42:16,079 --> 00:42:20,880
uh about six times out of ten

00:42:19,119 --> 00:42:22,640
i'm going to get a response in the form

00:42:20,880 --> 00:42:24,079
of a comment or going to be merged

00:42:22,640 --> 00:42:27,200
within three days

00:42:24,079 --> 00:42:29,280
um i don't think that's ever

00:42:27,200 --> 00:42:30,560
been anywhere close to the case for the

00:42:29,280 --> 00:42:31,920
few pull requests i've done for

00:42:30,560 --> 00:42:36,079
sentostream

00:42:31,920 --> 00:42:39,599
um and i don't like that

00:42:36,079 --> 00:42:41,520
and i and like i want to be able to do

00:42:39,599 --> 00:42:43,040
the same workflow i do for fedora for

00:42:41,520 --> 00:42:44,400
centos i want to be able to do remote

00:42:43,040 --> 00:42:46,000
pull requests

00:42:44,400 --> 00:42:47,680
that because of packages that i've

00:42:46,000 --> 00:42:49,280
mirrored and done all the stuff

00:42:47,680 --> 00:42:50,720
uh i want to be able to send those i

00:42:49,280 --> 00:42:52,079
want those patches to get

00:42:50,720 --> 00:42:54,720
feedback response for the people

00:42:52,079 --> 00:42:58,240
maintaining those things i want to

00:42:54,720 --> 00:43:00,000
be able to react and respond to them

00:42:58,240 --> 00:43:01,920
relatively quickly so that i still have

00:43:00,000 --> 00:43:04,319
the context in my head

00:43:01,920 --> 00:43:05,040
all of those things um i think would

00:43:04,319 --> 00:43:08,079
make

00:43:05,040 --> 00:43:09,280
it better um so if i want to say what's

00:43:08,079 --> 00:43:11,359
the one thing that can make centos

00:43:09,280 --> 00:43:14,240
stream better

00:43:11,359 --> 00:43:14,960
do like fedora does that like that

00:43:14,240 --> 00:43:18,160
that's

00:43:14,960 --> 00:43:21,200
fedora has a fantastic

00:43:18,160 --> 00:43:21,839
wellspring of historical expertise and

00:43:21,200 --> 00:43:24,880
knowledge

00:43:21,839 --> 00:43:28,319
and infrastructure and tooling

00:43:24,880 --> 00:43:30,480
reuse that it's very useful stuff

00:43:28,319 --> 00:43:32,720
it's why we like fedora and i want to

00:43:30,480 --> 00:43:34,880
also like centos stream in the same way

00:43:32,720 --> 00:43:36,960
center stream is valuable i love using

00:43:34,880 --> 00:43:37,440
it and i and we do it take advantage of

00:43:36,960 --> 00:43:40,720
it

00:43:37,440 --> 00:43:44,240
but this is where it could be better

00:43:40,720 --> 00:43:46,640
and all um i'll make this point

00:43:44,240 --> 00:43:47,359
if if you're a corporate software

00:43:46,640 --> 00:43:51,599
engineer

00:43:47,359 --> 00:43:54,880
with um with internal deadlines

00:43:51,599 --> 00:43:57,280
having having the having the like

00:43:54,880 --> 00:43:59,599
feedback uh on your on your

00:43:57,280 --> 00:44:02,480
contributions within a few days

00:43:59,599 --> 00:44:04,480
is a great way to convince your

00:44:02,480 --> 00:44:06,480
management that you should be doing work

00:44:04,480 --> 00:44:10,160
in the open and in the upstream

00:44:06,480 --> 00:44:13,359
uh the longer it takes for you to

00:44:10,160 --> 00:44:16,240
get feedback get collaboration

00:44:13,359 --> 00:44:17,280
the easier it is going to be for

00:44:16,240 --> 00:44:18,800
everyone to say

00:44:17,280 --> 00:44:20,560
well why don't you just give up on them

00:44:18,800 --> 00:44:21,599
make your own internal fork and then

00:44:20,560 --> 00:44:23,200
upstream it later

00:44:21,599 --> 00:44:25,839
and then it's harder and harder to

00:44:23,200 --> 00:44:29,440
upstream it later so the

00:44:25,839 --> 00:44:32,000
um the more collaboration you get

00:44:29,440 --> 00:44:32,480
especially from corporations comes from

00:44:32,000 --> 00:44:37,839
the

00:44:32,480 --> 00:44:37,839
being able to iterate fast

00:44:46,319 --> 00:44:53,119
uh so another good question let's

00:44:50,400 --> 00:44:53,680
i'm sorry if i butchered your last name

00:44:53,119 --> 00:44:55,599
i'm not

00:44:53,680 --> 00:44:57,920
great with these things uh if you you

00:44:55,599 --> 00:44:59,599
asked if you we introduced modularity to

00:44:57,920 --> 00:45:01,119
obs are you the only users or

00:44:59,599 --> 00:45:02,160
of the feature out there how many people

00:45:01,119 --> 00:45:03,440
on your side were involved in

00:45:02,160 --> 00:45:03,760
maintaining that instance of pushing

00:45:03,440 --> 00:45:07,760
things

00:45:03,760 --> 00:45:07,760
upstream okay so um

00:45:07,839 --> 00:45:12,000
i maybe i misphrased this but like the

00:45:10,160 --> 00:45:13,680
initial code development for the feature

00:45:12,000 --> 00:45:15,280
in the open build service was actually

00:45:13,680 --> 00:45:17,359
done by the obs team

00:45:15,280 --> 00:45:19,920
after getting feedback from us and the

00:45:17,359 --> 00:45:21,760
dnf team and the fedora modularity teams

00:45:19,920 --> 00:45:22,960
where we basically figured out a plan of

00:45:21,760 --> 00:45:24,560
how it was going to get done

00:45:22,960 --> 00:45:26,400
once it was actually like once the

00:45:24,560 --> 00:45:29,760
initial code had been written

00:45:26,400 --> 00:45:33,200
um myself

00:45:29,760 --> 00:45:35,200
and dan worked on figuring out the

00:45:33,200 --> 00:45:36,640
pulling that code testing it and

00:45:35,200 --> 00:45:40,640
validating it internally

00:45:36,640 --> 00:45:42,240
for obs 210 and we

00:45:40,640 --> 00:45:44,640
backported that and that got merged and

00:45:42,240 --> 00:45:45,119
released and then we started using it

00:45:44,640 --> 00:45:48,319
then

00:45:45,119 --> 00:45:49,520
um as far as the only ones uh who is

00:45:48,319 --> 00:45:54,240
using it

00:45:49,520 --> 00:45:55,680
um i think we're the only ones i know of

00:45:54,240 --> 00:45:58,160
mostly because i don't think the

00:45:55,680 --> 00:46:01,119
features been talked about too much

00:45:58,160 --> 00:46:02,000
um it it's a very valuable it's a new

00:46:01,119 --> 00:46:04,079
feature

00:46:02,000 --> 00:46:05,920
but it's also listed technically as

00:46:04,079 --> 00:46:08,800
experimental by the obs team

00:46:05,920 --> 00:46:10,720
for a couple of reasons one the format

00:46:08,800 --> 00:46:13,040
for module mds and repos

00:46:10,720 --> 00:46:14,960
is unstable we do not have a final

00:46:13,040 --> 00:46:17,839
definition of all the behaviors

00:46:14,960 --> 00:46:18,720
that is supposed to exist and two the

00:46:17,839 --> 00:46:21,680
module

00:46:18,720 --> 00:46:23,920
support in obs is very weak it is at

00:46:21,680 --> 00:46:25,920
this point only capable of consuming

00:46:23,920 --> 00:46:27,520
modules it cannot produce them

00:46:25,920 --> 00:46:29,440
this is something that's a follow-up

00:46:27,520 --> 00:46:32,319
effort that um

00:46:29,440 --> 00:46:34,400
that we that my team is probably going

00:46:32,319 --> 00:46:36,800
to start looking into as we start

00:46:34,400 --> 00:46:38,079
revving up more usage of modularity um

00:46:36,800 --> 00:46:40,240
it's certainly something that

00:46:38,079 --> 00:46:42,160
we have been discussing off and on for i

00:46:40,240 --> 00:46:45,520
mean at least a couple of months now

00:46:42,160 --> 00:46:47,839
um um how many people

00:46:45,520 --> 00:46:48,560
are maintaining that obs instance it's

00:46:47,839 --> 00:46:51,760
mostly

00:46:48,560 --> 00:46:53,040
it's my team maintains it it's a team of

00:46:51,760 --> 00:46:55,359
five people

00:46:53,040 --> 00:46:57,440
um i am the primary maintainer of it

00:46:55,359 --> 00:46:59,520
with dan as my secondary

00:46:57,440 --> 00:47:00,480
um but there is a couple of others like

00:46:59,520 --> 00:47:02,160
um

00:47:00,480 --> 00:47:03,839
another one who's on my team who's

00:47:02,160 --> 00:47:04,480
actually also participating in fedor a

00:47:03,839 --> 00:47:07,760
little bit

00:47:04,480 --> 00:47:09,920
um dalton miner uh is also a thing

00:47:07,760 --> 00:47:11,119
uh also sorry not also things also

00:47:09,920 --> 00:47:13,119
participating

00:47:11,119 --> 00:47:14,480
and maintaining maintaining the system

00:47:13,119 --> 00:47:17,599
and helping us support

00:47:14,480 --> 00:47:20,240
these workflows uh so like we do

00:47:17,599 --> 00:47:21,839
have a number of people working on this

00:47:20,240 --> 00:47:23,280
um

00:47:21,839 --> 00:47:24,640
producing modules is not our top

00:47:23,280 --> 00:47:26,480
priority right now because we're right

00:47:24,640 --> 00:47:29,359
now focused on the container stuff

00:47:26,480 --> 00:47:30,240
and we can we can skip a whole bunch of

00:47:29,359 --> 00:47:31,280
things

00:47:30,240 --> 00:47:33,119
with the way that we're doing the

00:47:31,280 --> 00:47:34,319
container stuff but it is something that

00:47:33,119 --> 00:47:36,079
we are looking into

00:47:34,319 --> 00:47:38,079
because as we start expanding our usage

00:47:36,079 --> 00:47:39,440
of the modularity technology more

00:47:38,079 --> 00:47:41,200
this will become more important for us

00:47:39,440 --> 00:47:44,319
to solve um

00:47:41,200 --> 00:47:44,800
and at some point it may be it may be

00:47:44,319 --> 00:47:48,000
vital

00:47:44,800 --> 00:47:48,000
for our partners

00:47:48,079 --> 00:47:54,960
right to to have agents

00:47:51,280 --> 00:47:56,880
that um to have agents that are that are

00:47:54,960 --> 00:47:58,960
part of streams depending on how their

00:47:56,880 --> 00:48:00,319
their dependency trees work out right

00:47:58,960 --> 00:48:01,760
like right now we've been very lucky

00:48:00,319 --> 00:48:05,440
we've managed to

00:48:01,760 --> 00:48:07,839
to avoid having a dependency on a

00:48:05,440 --> 00:48:09,680
on a stream at runtime or at least a

00:48:07,839 --> 00:48:12,880
non-default stream at runtime

00:48:09,680 --> 00:48:13,440
once that changes we really have to deal

00:48:12,880 --> 00:48:16,160
with that

00:48:13,440 --> 00:48:18,000
and and hopefully that isn't gonna be

00:48:16,160 --> 00:48:19,440
for a while but that's certainly

00:48:18,000 --> 00:48:20,720
it's at the back of our mind and it's

00:48:19,440 --> 00:48:21,839
certainly something we're thinking about

00:48:20,720 --> 00:48:25,520
for doing this

00:48:21,839 --> 00:48:28,800
um jacob tradis chick

00:48:25,520 --> 00:48:31,599
uh sorry if i screwed up your name uh

00:48:28,800 --> 00:48:33,040
mentioned that uh there's some single

00:48:31,599 --> 00:48:34,480
purpose tools that they're working on

00:48:33,040 --> 00:48:36,319
for copper to

00:48:34,480 --> 00:48:37,680
support building modules and it might be

00:48:36,319 --> 00:48:40,240
useful for obs

00:48:37,680 --> 00:48:41,920
yeah uh actually funnily enough i think

00:48:40,240 --> 00:48:43,200
daniel mock mentioned it to me this

00:48:41,920 --> 00:48:45,119
morning

00:48:43,200 --> 00:48:47,119
and i was like yeah this is definitely

00:48:45,119 --> 00:48:48,960
going into my bookmarks to look into

00:48:47,119 --> 00:48:50,880
um and i think dan and i will definitely

00:48:48,960 --> 00:48:52,880
take a look at and seeing about this

00:48:50,880 --> 00:48:54,720
um there are some definitely some ideas

00:48:52,880 --> 00:48:56,400
in there that i think we could reuse

00:48:54,720 --> 00:48:58,000
and we'll most likely wind up having an

00:48:56,400 --> 00:49:01,680
obs to module

00:48:58,000 --> 00:49:02,640
uh um tool to handle mapping an obs

00:49:01,680 --> 00:49:05,040
project

00:49:02,640 --> 00:49:06,480
to an uh a yum repository with with

00:49:05,040 --> 00:49:10,720
modularity data

00:49:06,480 --> 00:49:10,720
um yeah uh

00:49:12,480 --> 00:49:19,520
so uh any other questions or comments

00:49:16,400 --> 00:49:24,160
uh also thank you for coming josh

00:49:19,520 --> 00:49:25,680
uh i i didn't expect that um

00:49:24,160 --> 00:49:27,680
and and thanks for all the great

00:49:25,680 --> 00:49:31,520
questions so far

00:49:27,680 --> 00:49:34,400
um i i won't de-anonymize them here

00:49:31,520 --> 00:49:34,720
but i saw at least one alum from our

00:49:34,400 --> 00:49:37,440
team

00:49:34,720 --> 00:49:38,400
in the audience and it's it's awesome to

00:49:37,440 --> 00:49:41,760
see you

00:49:38,400 --> 00:49:42,800
yeah no it was great i i'm glad to see

00:49:41,760 --> 00:49:44,720
like one of our

00:49:42,800 --> 00:49:46,000
one of our form our alums actually kind

00:49:44,720 --> 00:49:48,559
of showed up for our talk

00:49:46,000 --> 00:49:48,559
it's great

00:49:49,040 --> 00:49:55,359
um our spot was until

00:49:52,240 --> 00:49:56,960
uh 50 after right yes technically yes

00:49:55,359 --> 00:49:58,480
although i think almost everyone's been

00:49:56,960 --> 00:49:59,440
running over slightly but we don't have

00:49:58,480 --> 00:50:02,880
to run over

00:49:59,440 --> 00:50:04,640
i think if everyone's if everyone's all

00:50:02,880 --> 00:50:07,359
said and done then i guess we can

00:50:04,640 --> 00:50:09,359
kind of end it here um if anyone if no

00:50:07,359 --> 00:50:12,880
one's got anything else i mean

00:50:09,359 --> 00:50:14,640
thank you all for coming uh

00:50:12,880 --> 00:50:18,480
thank you to listen for listening to us

00:50:14,640 --> 00:50:18,480
you know talk about our love for fedora

00:50:18,800 --> 00:50:23,599
um y'all are great keep up the great

00:50:21,359 --> 00:50:23,599
work

00:50:24,480 --> 00:50:30,640
and it was our pleasure for sponsoring

00:50:27,640 --> 00:50:30,640

YouTube URL: https://www.youtube.com/watch?v=4viuzixOf8Y


