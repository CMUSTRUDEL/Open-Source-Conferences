Title: What's new with the Fedora kernel?
Publication date: 2020-09-01
Playlist: Nest with Fedora 2020
Description: 
	A lot is changed in how the Fedora kernel is maintained. This session will be an overview of what has changed, and how you can get involved.
Captions: 
	00:00:02,720 --> 00:00:06,240
all right

00:00:03,120 --> 00:00:08,080
i guess we'll get started um i apologize

00:00:06,240 --> 00:00:09,840
for not having slides up because

00:00:08,080 --> 00:00:13,280
apparently it doesn't want to

00:00:09,840 --> 00:00:15,679
allow me to share uh slides here it

00:00:13,280 --> 00:00:17,359
only wants to let me share a chrome tab

00:00:15,679 --> 00:00:21,920
and have them in chrome

00:00:17,359 --> 00:00:24,160
uh i'm justin forbes for people who

00:00:21,920 --> 00:00:25,519
don't know who i am uh fedora kernel

00:00:24,160 --> 00:00:28,560
maintainer

00:00:25,519 --> 00:00:31,760
i am pretty much the gatekeeper of the

00:00:28,560 --> 00:00:33,760
fedora colonel but i am not the only one

00:00:31,760 --> 00:00:35,680
responsible for the fedora colonel

00:00:33,760 --> 00:00:37,200
uh we've got great contributions from

00:00:35,680 --> 00:00:39,120
people like peter robinson

00:00:37,200 --> 00:00:41,200
uh hans geode and others in the

00:00:39,120 --> 00:00:45,360
community which help keep the fedora

00:00:41,200 --> 00:00:46,960
kernel ticking as it should be

00:00:45,360 --> 00:00:48,559
so today we're talking about what's new

00:00:46,960 --> 00:00:51,680
in the fedora kernel and

00:00:48,559 --> 00:00:51,680
some things have changed

00:00:52,239 --> 00:00:58,239
in process and and how things are done

00:00:56,480 --> 00:00:59,760
so i'm going to cover both the current

00:00:58,239 --> 00:01:03,120
affairs um

00:00:59,760 --> 00:01:06,400
what is kernel arc and why that matters

00:01:03,120 --> 00:01:09,439
um what's next for the fedora kernel and

00:01:06,400 --> 00:01:09,439
then how you can help

00:01:10,400 --> 00:01:14,560
so uh current affairs uh big and

00:01:12,799 --> 00:01:16,320
important one and i'll type this in chat

00:01:14,560 --> 00:01:20,159
just so people can

00:01:16,320 --> 00:01:23,200
see it it's kernel test week

00:01:20,159 --> 00:01:26,080
or the 5.8 kernel is essentially

00:01:23,200 --> 00:01:30,000
a week from monday it's august 25th all

00:01:26,080 --> 00:01:30,000
right sorry august 17th through 21st

00:01:38,159 --> 00:01:41,600
uh private day is important for a couple

00:01:40,240 --> 00:01:42,399
reasons we always have a test week

00:01:41,600 --> 00:01:45,360
before we

00:01:42,399 --> 00:01:47,119
rebase existing uh distributions to it

00:01:45,360 --> 00:01:48,799
so we don't want to rebase fedora 32 or

00:01:47,119 --> 00:01:51,040
31 until after we've had a test week

00:01:48,799 --> 00:01:53,680
gotten some general feedback

00:01:51,040 --> 00:01:54,240
and it's also important in this case

00:01:53,680 --> 00:01:56,240
because

00:01:54,240 --> 00:01:58,479
5.8 is going to be the release kernel

00:01:56,240 --> 00:02:02,399
for fedora 33.

00:01:58,479 --> 00:02:04,880
uh fedora 33 because it hasn't branched

00:02:02,399 --> 00:02:06,240
yet it kind of puts us in a weird state

00:02:04,880 --> 00:02:07,600
which means rawhide right now is

00:02:06,240 --> 00:02:10,239
actually not moving forward it's sitting

00:02:07,600 --> 00:02:12,800
at 5.8 until tuesday once the branches

00:02:10,239 --> 00:02:16,400
happen then rawhide goes back to

00:02:12,800 --> 00:02:17,360
linus's tree and 5.8 will be maintained

00:02:16,400 --> 00:02:22,000
inside of the

00:02:17,360 --> 00:02:25,280
uh fedora 33 branch

00:02:22,000 --> 00:02:29,200
right now obviously fedora uh 31 and 32

00:02:25,280 --> 00:02:32,000
are on 5.7 base kernels um

00:02:29,200 --> 00:02:32,959
they're 5.7.14 i believe is in updates

00:02:32,000 --> 00:02:35,440
testing now

00:02:32,959 --> 00:02:36,080
that could always use some some testing

00:02:35,440 --> 00:02:39,680
and

00:02:36,080 --> 00:02:43,920
uh feedback and

00:02:39,680 --> 00:02:46,239
uh i wanted to put a brief note on

00:02:43,920 --> 00:02:48,319
kernel headers and i'm going to put this

00:02:46,239 --> 00:02:49,599
little uh url in the chat i'll try to

00:02:48,319 --> 00:02:52,640
get these slides online some

00:02:49,599 --> 00:02:52,959
somewhere after but uh for those of you

00:02:52,640 --> 00:02:55,680
who

00:02:52,959 --> 00:02:57,760
who aren't aware uh used to be that the

00:02:55,680 --> 00:03:00,000
fedora kernel package would build the

00:02:57,760 --> 00:03:02,000
fedora kernel package the kernel headers

00:03:00,000 --> 00:03:03,360
package and the kernel tools package

00:03:02,000 --> 00:03:06,159
it hasn't been that way for quite a

00:03:03,360 --> 00:03:06,959
while the default for a long time though

00:03:06,159 --> 00:03:09,440
was to

00:03:06,959 --> 00:03:11,760
continue to build kernel headers and

00:03:09,440 --> 00:03:11,760
kernel

00:03:12,640 --> 00:03:15,680
tools with with pretty much every

00:03:14,400 --> 00:03:17,440
release and that's completely

00:03:15,680 --> 00:03:20,159
unnecessary

00:03:17,440 --> 00:03:20,879
uh you know the reason it's unnecessary

00:03:20,159 --> 00:03:22,319
is because

00:03:20,879 --> 00:03:24,239
the only reason to build kernel headers

00:03:22,319 --> 00:03:26,080
is if the uapi headers change

00:03:24,239 --> 00:03:27,760
any other headers can change but the

00:03:26,080 --> 00:03:30,159
uapi headers uh

00:03:27,760 --> 00:03:30,959
are the ones that matter because it it's

00:03:30,159 --> 00:03:32,640
what's

00:03:30,959 --> 00:03:34,879
kernel headers is what's used to build

00:03:32,640 --> 00:03:38,080
kernel space packages it's not what use

00:03:34,879 --> 00:03:40,159
what's used to build modules uh people

00:03:38,080 --> 00:03:42,480
get confused frequently and and

00:03:40,159 --> 00:03:44,959
complain that the kernel headers package

00:03:42,480 --> 00:03:47,519
is not

00:03:44,959 --> 00:03:49,519
uh in line with with what the kernel

00:03:47,519 --> 00:03:50,480
current kernel package is and and they

00:03:49,519 --> 00:03:53,280
need to build their

00:03:50,480 --> 00:03:53,280
driver headers

00:03:56,640 --> 00:04:00,080
so for those of you who want a more

00:03:58,959 --> 00:04:02,480
detailed explanation

00:04:00,080 --> 00:04:02,480
of that

00:04:08,080 --> 00:04:11,920
ah let me see if i can grab this link

00:04:12,840 --> 00:04:17,300
better

00:04:14,100 --> 00:04:17,300
[Music]

00:04:19,919 --> 00:04:24,080
all right i'll add a link in a little

00:04:21,040 --> 00:04:29,199
bit for the uh blog post that laura

00:04:24,080 --> 00:04:30,639
did a while ago

00:04:29,199 --> 00:04:32,880
uh another thing that i wanted to

00:04:30,639 --> 00:04:35,520
discuss was the uh eln

00:04:32,880 --> 00:04:36,960
kernel and what is the eln kernel and

00:04:35,520 --> 00:04:40,080
why it matters

00:04:36,960 --> 00:04:43,840
uh eln is there's actually a talk going

00:04:40,080 --> 00:04:43,840
on about it right now

00:04:43,919 --> 00:04:47,120
wait can you hear me okay

00:04:51,600 --> 00:04:55,600
okay cool yeah sorry the no slides thing

00:04:54,320 --> 00:04:57,759
i mentioned at the beginning

00:04:55,600 --> 00:04:59,600
uh so i have slides in impress but for

00:04:57,759 --> 00:05:02,240
some reason when i try to share

00:04:59,600 --> 00:05:02,639
apps it only lets me share chrome tabs

00:05:02,240 --> 00:05:04,639
so

00:05:02,639 --> 00:05:05,680
unfortunately i don't have them in a way

00:05:04,639 --> 00:05:07,360
to show the slides

00:05:05,680 --> 00:05:10,479
the slides are not that important anyway

00:05:07,360 --> 00:05:13,120
the only uh the only the religious

00:05:10,479 --> 00:05:16,400
bullet points the urls for them uh

00:05:13,120 --> 00:05:19,440
there's a blog post from laura that

00:05:16,400 --> 00:05:19,919
i wanted to redirect people to with with

00:05:19,440 --> 00:05:23,120
the

00:05:19,919 --> 00:05:25,759
kernel headers information and

00:05:23,120 --> 00:05:28,080
uh other otherwise it was just kind of

00:05:25,759 --> 00:05:30,960
bullet points

00:05:28,080 --> 00:05:31,919
so the eln kernel is essentially what's

00:05:30,960 --> 00:05:34,479
going to be

00:05:31,919 --> 00:05:36,160
you know the real next kernel right the

00:05:34,479 --> 00:05:37,360
it's the development for the next

00:05:36,160 --> 00:05:39,120
version of rel

00:05:37,360 --> 00:05:40,720
the world one of the reasons it matters

00:05:39,120 --> 00:05:42,800
is because most packages when they build

00:05:40,720 --> 00:05:44,960
for eln versus building for rawhide they

00:05:42,800 --> 00:05:47,039
build pretty much the exact same way

00:05:44,960 --> 00:05:49,039
with the rawhide kernel though with the

00:05:47,039 --> 00:05:50,639
kernel when you build an eln

00:05:49,039 --> 00:05:53,039
it's not fedora and you're actually

00:05:50,639 --> 00:05:54,560
building with a rel kernel config

00:05:53,039 --> 00:05:57,600
all of the extra stuff that we keep on

00:05:54,560 --> 00:05:59,919
fedora turned off things of that nature

00:05:57,600 --> 00:06:01,680
so you know why are we doing that i'll

00:05:59,919 --> 00:06:02,319
go into a little bit more detail on that

00:06:01,680 --> 00:06:05,680
when i

00:06:02,319 --> 00:06:07,680
discussed kernel arc but uh the

00:06:05,680 --> 00:06:09,280
long and short of it is we get more eyes

00:06:07,680 --> 00:06:11,440
uh i'm one person

00:06:09,280 --> 00:06:12,720
um you know one person dedicated to the

00:06:11,440 --> 00:06:14,639
fedora kernel and

00:06:12,720 --> 00:06:16,080
100 dedicated to the fedora kernel we

00:06:14,639 --> 00:06:17,840
have a

00:06:16,080 --> 00:06:19,360
very large number of people that are

00:06:17,840 --> 00:06:23,360
dedicated to the real kernel

00:06:19,360 --> 00:06:26,400
and by building the yale in kernel

00:06:23,360 --> 00:06:27,600
off of rawhide as well upstream suddenly

00:06:26,400 --> 00:06:28,639
have a lot more people who are

00:06:27,600 --> 00:06:31,919
interested in

00:06:28,639 --> 00:06:34,160
in rawhide and

00:06:31,919 --> 00:06:35,840
trying to make sure that config options

00:06:34,160 --> 00:06:37,600
which maybe have a huge performance

00:06:35,840 --> 00:06:39,120
impact or something we get to find that

00:06:37,600 --> 00:06:40,639
out because they're doing all of that

00:06:39,120 --> 00:06:44,240
testing right now

00:06:40,639 --> 00:06:47,280
against uh rawhide or against eln

00:06:44,240 --> 00:06:48,800
so we also have

00:06:47,280 --> 00:06:51,680
if you look on the kernel mailing list

00:06:48,800 --> 00:06:54,319
you'll see there are

00:06:51,680 --> 00:06:56,319
patches that are going through that are

00:06:54,319 --> 00:06:58,560
config changes and those config changes

00:06:56,319 --> 00:07:00,720
are actually set to default values

00:06:58,560 --> 00:07:02,000
but the reason is uh you know the the

00:07:00,720 --> 00:07:03,680
real maintainers on that side will

00:07:02,000 --> 00:07:04,800
review them and say yes we want this or

00:07:03,680 --> 00:07:06,639
no we don't and

00:07:04,800 --> 00:07:08,400
and frequently here's why they have to

00:07:06,639 --> 00:07:10,880
be act before they're changed

00:07:08,400 --> 00:07:12,800
so we get the data from those acts and

00:07:10,880 --> 00:07:16,319
acts as well and can help make more

00:07:12,800 --> 00:07:18,880
informed decisions in fedora uh

00:07:16,319 --> 00:07:19,599
just another little blip before we go

00:07:18,880 --> 00:07:22,240
through the

00:07:19,599 --> 00:07:23,360
the current affairs uh for people who

00:07:22,240 --> 00:07:25,599
are curious

00:07:23,360 --> 00:07:27,520
why you frequently see kernels that have

00:07:25,599 --> 00:07:30,880
a security update listed with them

00:07:27,520 --> 00:07:32,960
um there have been 124 cvs filed against

00:07:30,880 --> 00:07:36,960
the kernel just this calendar year

00:07:32,960 --> 00:07:40,400
now those cves are frequently absolutely

00:07:36,960 --> 00:07:43,120
not important for most users they're

00:07:40,400 --> 00:07:44,160
things in small drivers you know a lot

00:07:43,120 --> 00:07:46,000
of times they require

00:07:44,160 --> 00:07:48,639
root to crash a system which i don't

00:07:46,000 --> 00:07:51,919
know that should get a cv to begin with

00:07:48,639 --> 00:07:53,520
if root can crash a system um

00:07:51,919 --> 00:07:55,680
purposefully you know they don't they

00:07:53,520 --> 00:07:57,759
don't really need a kernel bug to do it

00:07:55,680 --> 00:07:59,120
but they are getting cvs and they do get

00:07:57,759 --> 00:08:00,960
addressed

00:07:59,120 --> 00:08:02,720
we try to address every single cv that

00:08:00,960 --> 00:08:05,440
comes in

00:08:02,720 --> 00:08:08,160
so that's why so many kernels will have

00:08:05,440 --> 00:08:09,520
a security notification with them

00:08:08,160 --> 00:08:10,639
you know as to whether or not it's

00:08:09,520 --> 00:08:11,599
really the ones that are really

00:08:10,639 --> 00:08:14,319
important will get

00:08:11,599 --> 00:08:15,680
listed as really important otherwise

00:08:14,319 --> 00:08:17,039
look at the bugs that are associated

00:08:15,680 --> 00:08:20,560
with that kernel and see if they

00:08:17,039 --> 00:08:20,560
perhaps apply to your situation

00:08:21,039 --> 00:08:25,680
so kernel arc is something i wanted to

00:08:22,800 --> 00:08:28,319
discuss a little bit more

00:08:25,680 --> 00:08:29,759
kernel arc is what we've already moved

00:08:28,319 --> 00:08:35,200
rawhide to

00:08:29,759 --> 00:08:36,880
and it is uh in gitlab

00:08:35,200 --> 00:08:38,399
and it is a source get tree and not a

00:08:36,880 --> 00:08:40,479
disket tree

00:08:38,399 --> 00:08:42,719
and the reason this is really important

00:08:40,479 --> 00:08:45,120
uh is because

00:08:42,719 --> 00:08:46,800
everything is is set up for automated

00:08:45,120 --> 00:08:50,240
building of the disk it now

00:08:46,800 --> 00:08:54,800
so here is the url for kernel arc but

00:08:50,240 --> 00:08:56,800
all development both on the um

00:08:54,800 --> 00:08:58,480
on the kernel patches themselves as well

00:08:56,800 --> 00:08:59,200
as the spec file configs and those

00:08:58,480 --> 00:09:01,680
things

00:08:59,200 --> 00:09:03,200
happen in git lab in this exploded

00:09:01,680 --> 00:09:05,040
source kit tree and then

00:09:03,200 --> 00:09:07,360
scripts are run to automatically

00:09:05,040 --> 00:09:08,480
generate diskit

00:09:07,360 --> 00:09:10,000
one of the reasons that's super

00:09:08,480 --> 00:09:11,519
important is because those scripts will

00:09:10,000 --> 00:09:12,720
actually overwrite anything that's in

00:09:11,519 --> 00:09:15,360
diskette at this time

00:09:12,720 --> 00:09:15,920
so if something is changed in disk it

00:09:15,360 --> 00:09:18,080
and not

00:09:15,920 --> 00:09:19,839
changed in source get then it will

00:09:18,080 --> 00:09:22,640
likely be forgotten

00:09:19,839 --> 00:09:24,000
realistically i do look at at diskit to

00:09:22,640 --> 00:09:24,480
make sure there hasn't been a commit

00:09:24,000 --> 00:09:26,480
between

00:09:24,480 --> 00:09:28,160
my last commit there to see if somebody

00:09:26,480 --> 00:09:29,519
added something and if that needs to be

00:09:28,160 --> 00:09:31,040
changed

00:09:29,519 --> 00:09:32,640
but if you do want to change something

00:09:31,040 --> 00:09:32,959
and you try to do it in source git it's

00:09:32,640 --> 00:09:36,399
just

00:09:32,959 --> 00:09:37,839
not the proper place to do that

00:09:36,399 --> 00:09:39,360
all right and diskid it's just not the

00:09:37,839 --> 00:09:40,720
proper place to do that and it really

00:09:39,360 --> 00:09:41,839
needs to be done in source kit so we

00:09:40,720 --> 00:09:44,000
don't forget about it

00:09:41,839 --> 00:09:45,600
um right now the process and you'll see

00:09:44,000 --> 00:09:47,920
there's there's documentation

00:09:45,600 --> 00:09:48,800
on that side if you you go off of the

00:09:47,920 --> 00:09:52,000
wiki

00:09:48,800 --> 00:09:55,200
or go off the docs page it takes you to

00:09:52,000 --> 00:09:57,440
the actual docs that explain kind of the

00:09:55,200 --> 00:09:59,040
process but it's very messy right now

00:09:57,440 --> 00:09:59,839
and that is one of the big pain points

00:09:59,040 --> 00:10:02,560
of this

00:09:59,839 --> 00:10:04,079
right now there are three trees that all

00:10:02,560 --> 00:10:07,120
interact with each other in different

00:10:04,079 --> 00:10:08,480
ways to get a release going and you have

00:10:07,120 --> 00:10:10,320
to do kernel patches

00:10:08,480 --> 00:10:12,800
you know against kernel code itself in

00:10:10,320 --> 00:10:16,000
the um

00:10:12,800 --> 00:10:19,519
arc patches tree that branch is

00:10:16,000 --> 00:10:21,839
rebased frequently so if

00:10:19,519 --> 00:10:23,360
you do a merge request yeah there's a

00:10:21,839 --> 00:10:24,800
good chance that once it's rebased it

00:10:23,360 --> 00:10:26,160
messes up your merge request and then

00:10:24,800 --> 00:10:29,360
has to be fixed

00:10:26,160 --> 00:10:32,399
uh os build is for kernel config options

00:10:29,360 --> 00:10:34,800
and for documentation

00:10:32,399 --> 00:10:35,519
spec file changes all of the the basic

00:10:34,800 --> 00:10:37,120
stuff there

00:10:35,519 --> 00:10:39,120
one of the cool things about that tree

00:10:37,120 --> 00:10:42,399
is you can take that and let's say

00:10:39,120 --> 00:10:45,040
you want to do some testing with

00:10:42,399 --> 00:10:46,000
you know linux next or with any other

00:10:45,040 --> 00:10:47,760
upstream tree

00:10:46,000 --> 00:10:50,399
you can you can actually just merge that

00:10:47,760 --> 00:10:52,480
tree in and you'll have access to all of

00:10:50,399 --> 00:10:55,360
the you know make this get make

00:10:52,480 --> 00:10:56,880
source rpms all of the things there that

00:10:55,360 --> 00:11:00,320
eventually lead to ci

00:10:56,880 --> 00:11:03,600
uh integration as well and

00:11:00,320 --> 00:11:05,760
it's all isolated so there are no kernel

00:11:03,600 --> 00:11:06,240
patches in there other than one makefile

00:11:05,760 --> 00:11:10,640
patch

00:11:06,240 --> 00:11:12,399
um which should just merge in cleanly

00:11:10,640 --> 00:11:14,079
that tree is is kept up to date with

00:11:12,399 --> 00:11:16,720
linus's tree as well

00:11:14,079 --> 00:11:18,720
but going forward at some point in the

00:11:16,720 --> 00:11:21,839
not too distant future we hope

00:11:18,720 --> 00:11:23,440
we will replace uh os build will exist

00:11:21,839 --> 00:11:25,440
but nothing will actually happen in west

00:11:23,440 --> 00:11:27,920
build all future development will happen

00:11:25,440 --> 00:11:30,320
in a developed tree and that tree will

00:11:27,920 --> 00:11:32,720
be a merged ford tree

00:11:30,320 --> 00:11:33,920
uh we'll still have a branch off thing

00:11:32,720 --> 00:11:37,120
to

00:11:33,920 --> 00:11:39,120
rebase and build this get off of but

00:11:37,120 --> 00:11:40,959
uh there's there's a couple of of

00:11:39,120 --> 00:11:41,600
interesting consequences for fedora

00:11:40,959 --> 00:11:44,959
there

00:11:41,600 --> 00:11:46,320
one is we won't be able to

00:11:44,959 --> 00:11:48,720
right now we have every single patch

00:11:46,320 --> 00:11:51,360
broken out as individual patches

00:11:48,720 --> 00:11:53,200
and i really like that i think it's it's

00:11:51,360 --> 00:11:55,360
clean it's easy to see what we're doing

00:11:53,200 --> 00:11:57,680
uh and and we don't want that to go away

00:11:55,360 --> 00:11:59,839
but it's caused some massive problems

00:11:57,680 --> 00:12:01,920
um you know one of the problems is we do

00:11:59,839 --> 00:12:06,399
have to rebase our patches

00:12:01,920 --> 00:12:09,680
and arc patches is is a um

00:12:06,399 --> 00:12:10,720
yeah as soon as it's rebased like it was

00:12:09,680 --> 00:12:13,680
rebased

00:12:10,720 --> 00:12:14,399
a few days ago as merge window came in

00:12:13,680 --> 00:12:16,160
and

00:12:14,399 --> 00:12:18,000
suddenly all of peter robinson's merch

00:12:16,160 --> 00:12:20,959
request

00:12:18,000 --> 00:12:23,040
would no longer apply because it lost

00:12:20,959 --> 00:12:25,200
references there

00:12:23,040 --> 00:12:27,120
so to get away from that and stick with

00:12:25,200 --> 00:12:28,480
the merge only tree

00:12:27,120 --> 00:12:30,399
um what that means is we're going to

00:12:28,480 --> 00:12:33,839
have to generate essentially a diff

00:12:30,399 --> 00:12:36,000
against linus so disk it will look like

00:12:33,839 --> 00:12:37,360
the upstream tarball and what's there

00:12:36,000 --> 00:12:40,560
and then a

00:12:37,360 --> 00:12:42,320
fedora patch or you know red hat patch

00:12:40,560 --> 00:12:44,399
whatever we decided to call it

00:12:42,320 --> 00:12:46,160
and just as one big patch ball now i

00:12:44,399 --> 00:12:47,680
still don't want to lose all of the

00:12:46,160 --> 00:12:49,760
the data that we have there so we're

00:12:47,680 --> 00:12:52,079
going to have a patch list file there

00:12:49,760 --> 00:12:54,639
that that has every commit listed

00:12:52,079 --> 00:12:56,160
that's included in the the patch ball

00:12:54,639 --> 00:12:57,519
and what it is and therefore you can

00:12:56,160 --> 00:12:58,560
look it up but they won't be listed as

00:12:57,519 --> 00:13:00,959
individual patch

00:12:58,560 --> 00:13:01,920
files um one of the reasons so there's

00:13:00,959 --> 00:13:04,800
you know right now

00:13:01,920 --> 00:13:06,639
if you try to make a tree with the stuff

00:13:04,800 --> 00:13:08,560
that merged uh but there's actually a

00:13:06,639 --> 00:13:10,160
makefile change in os build that comes

00:13:08,560 --> 00:13:13,200
out as a patch

00:13:10,160 --> 00:13:14,800
and because it's not a current a rebased

00:13:13,200 --> 00:13:16,240
patch it's a merge patch there was a

00:13:14,800 --> 00:13:17,440
change to make file and that patch

00:13:16,240 --> 00:13:19,920
doesn't apply anymore

00:13:17,440 --> 00:13:21,519
um you know it's a simple thing but we

00:13:19,920 --> 00:13:23,040
just rather get away from all of that

00:13:21,519 --> 00:13:24,160
and and make the workflow a little bit

00:13:23,040 --> 00:13:27,839
easier for everybody

00:13:24,160 --> 00:13:30,959
uh going forward there it is somewhat a

00:13:27,839 --> 00:13:32,480
shift from separate uh fedora and real

00:13:30,959 --> 00:13:35,920
focused trees

00:13:32,480 --> 00:13:38,160
um it is actually kind of not

00:13:35,920 --> 00:13:40,560
it's not the existing fedora or the real

00:13:38,160 --> 00:13:42,160
workflow i think rel is also trying to

00:13:40,560 --> 00:13:44,079
move to this workflow

00:13:42,160 --> 00:13:45,839
uh of course it's an advantage if

00:13:44,079 --> 00:13:49,120
everything is the same for everybody

00:13:45,839 --> 00:13:49,600
but it's it's not exactly their workflow

00:13:49,120 --> 00:13:51,519
either

00:13:49,600 --> 00:13:53,680
it's it's much easier for people

00:13:51,519 --> 00:13:57,040
generally to work on exploded trees

00:13:53,680 --> 00:13:58,320
um you know that we've we've had

00:13:57,040 --> 00:14:00,240
for a long time there was a tree

00:13:58,320 --> 00:14:02,079
maintained on colonel.org by a script

00:14:00,240 --> 00:14:06,000
josh boyer wrote and

00:14:02,079 --> 00:14:07,519
it worked okay um a lot of times and

00:14:06,000 --> 00:14:10,480
then sometimes it was just broken for a

00:14:07,519 --> 00:14:12,480
long period of time and

00:14:10,480 --> 00:14:14,079
by doing this we kind of keep everybody

00:14:12,480 --> 00:14:17,040
on the same page and keep everything

00:14:14,079 --> 00:14:18,560
moving forward

00:14:17,040 --> 00:14:20,160
so the improvements coming soon like i

00:14:18,560 --> 00:14:21,839
said those scripts have been worked on

00:14:20,160 --> 00:14:23,760
uh obviously i don't like to make any

00:14:21,839 --> 00:14:25,120
huge changes during the merge window

00:14:23,760 --> 00:14:26,639
because there's just too much other

00:14:25,120 --> 00:14:28,160
stuff going on during the merge window

00:14:26,639 --> 00:14:31,199
we get

00:14:28,160 --> 00:14:32,720
dozens sometimes uh you know sometimes

00:14:31,199 --> 00:14:33,760
over 100 config options come in

00:14:32,720 --> 00:14:35,839
overnight

00:14:33,760 --> 00:14:37,440
and those things all get looked at um

00:14:35,839 --> 00:14:38,800
from the fedora side i look at

00:14:37,440 --> 00:14:42,320
every one of those every day before i do

00:14:38,800 --> 00:14:44,240
a kernel build um

00:14:42,320 --> 00:14:45,519
and just with the number of patches the

00:14:44,240 --> 00:14:47,120
amount of turn that goes on during the

00:14:45,519 --> 00:14:48,800
merge window it's just not a great time

00:14:47,120 --> 00:14:50,720
to make sweeping changes so

00:14:48,800 --> 00:14:52,160
once everything kind of settles down a

00:14:50,720 --> 00:14:53,519
little bit it'll be the time to make

00:14:52,160 --> 00:14:55,600
those changes

00:14:53,519 --> 00:14:57,199
uh fedora test week is next week so

00:14:55,600 --> 00:14:58,720
it'll probably be after that or

00:14:57,199 --> 00:15:01,279
sorry a week after next we'll probably

00:14:58,720 --> 00:15:04,480
be after that

00:15:01,279 --> 00:15:07,440
um and another

00:15:04,480 --> 00:15:08,000
interesting thing about this workflow

00:15:07,440 --> 00:15:11,360
though with

00:15:08,000 --> 00:15:11,360
with arc and and

00:15:11,600 --> 00:15:15,120
all the discussion all those things

00:15:13,120 --> 00:15:17,040
happen that can happen both in git lab

00:15:15,120 --> 00:15:19,360
or the fedora chrome mailing list

00:15:17,040 --> 00:15:20,800
uh there's a mail bridge between the two

00:15:19,360 --> 00:15:21,440
so if you don't want to deal with mail

00:15:20,800 --> 00:15:23,120
all the time

00:15:21,440 --> 00:15:24,399
if you want to review patches and all

00:15:23,120 --> 00:15:25,040
those things you can do all that on

00:15:24,399 --> 00:15:26,880
gitlab

00:15:25,040 --> 00:15:28,560
and for the people who want to stick

00:15:26,880 --> 00:15:30,639
with an email-based workflow then that

00:15:28,560 --> 00:15:33,519
works for them as well because there's a

00:15:30,639 --> 00:15:36,480
mail bridge that generally works it kind

00:15:33,519 --> 00:15:36,480
of needs to be fixed

00:15:36,639 --> 00:15:42,800
so what's next the next step really

00:15:40,560 --> 00:15:43,920
outside of rawhide and getting those

00:15:42,800 --> 00:15:46,880
things moved

00:15:43,920 --> 00:15:49,040
is moving uh stable fedora into that

00:15:46,880 --> 00:15:50,160
type of workflow as well and the way

00:15:49,040 --> 00:15:54,560
that we do that

00:15:50,160 --> 00:15:56,160
is a little bit different so when we

00:15:54,560 --> 00:15:57,440
instead of having this one merge tree

00:15:56,160 --> 00:16:00,720
that kind of goes on forever

00:15:57,440 --> 00:16:02,560
when say 5.9 comes out then we will

00:16:00,720 --> 00:16:04,160
create a branch for 5.9

00:16:02,560 --> 00:16:06,720
there will not be a separate branch for

00:16:04,160 --> 00:16:08,639
fedora 30 31 32 whatever

00:16:06,720 --> 00:16:10,399
because that's not really the way the

00:16:08,639 --> 00:16:13,680
kernel is maintained

00:16:10,399 --> 00:16:15,440
so we'll have just a 5.9 and that 5.9

00:16:13,680 --> 00:16:17,519
will suddenly be rebased and all the

00:16:15,440 --> 00:16:20,240
patches will be clean on top of that

00:16:17,519 --> 00:16:21,279
and then it will follow the stable trees

00:16:20,240 --> 00:16:24,240
upstream

00:16:21,279 --> 00:16:24,639
as we grab things there what that does

00:16:24,240 --> 00:16:27,360
mean

00:16:24,639 --> 00:16:28,320
is the scripts have to be created there

00:16:27,360 --> 00:16:31,360
that create a

00:16:28,320 --> 00:16:33,360
source rpm for each relevant version uh

00:16:31,360 --> 00:16:34,880
so they can do the disk commit to each

00:16:33,360 --> 00:16:39,040
relevant version

00:16:34,880 --> 00:16:40,000
but it's i think fedor 22 was the last

00:16:39,040 --> 00:16:41,839
time we had

00:16:40,000 --> 00:16:43,199
hey here's a series of patches that we

00:16:41,839 --> 00:16:45,759
cannot include

00:16:43,199 --> 00:16:46,720
in the older version because of of

00:16:45,759 --> 00:16:48,240
upstream

00:16:46,720 --> 00:16:50,480
and if we do have those we'll have a way

00:16:48,240 --> 00:16:52,480
to work around those uh work around that

00:16:50,480 --> 00:16:54,480
so we can deal with here's the tree but

00:16:52,480 --> 00:16:57,120
oh yeah when you build the source rpm we

00:16:54,480 --> 00:16:58,320
need to drop this

00:16:57,120 --> 00:17:00,720
another thing that needs to happen is

00:16:58,320 --> 00:17:02,560
cleaning up the kernel spec a little bit

00:17:00,720 --> 00:17:04,240
if anybody's seen it it's pretty messy

00:17:02,560 --> 00:17:06,160
it's much nicer than it was

00:17:04,240 --> 00:17:08,720
you know several years ago but it's it

00:17:06,160 --> 00:17:10,000
still could use some improvement so

00:17:08,720 --> 00:17:13,439
that's one of the things that's kind of

00:17:10,000 --> 00:17:13,439
on the roadmap for the next

00:17:14,799 --> 00:17:18,480
six months probably uh hopefully it'll

00:17:16,799 --> 00:17:19,600
happen within that time frame

00:17:18,480 --> 00:17:22,240
and then we also need to update the

00:17:19,600 --> 00:17:25,120
kernel test app uh the kernel test app

00:17:22,240 --> 00:17:25,600
that people use to submit results and

00:17:25,120 --> 00:17:28,799
and

00:17:25,600 --> 00:17:29,840
all of those things for individual

00:17:28,799 --> 00:17:33,600
kernel tests or

00:17:29,840 --> 00:17:35,840
when we have test week test day that is

00:17:33,600 --> 00:17:37,919
it was written quite a while ago it's

00:17:35,840 --> 00:17:38,559
using fed message and not the new fedora

00:17:37,919 --> 00:17:41,120
messaging

00:17:38,559 --> 00:17:42,000
it's not using the new authentication uh

00:17:41,120 --> 00:17:44,640
all those things

00:17:42,000 --> 00:17:47,840
kind of need to be updated so that needs

00:17:44,640 --> 00:17:47,840
to happen

00:17:48,640 --> 00:17:54,080
so how can you help um and that's

00:17:52,400 --> 00:17:55,760
uh yeah that's the cool thing about

00:17:54,080 --> 00:17:58,640
fedora is we've got all this community

00:17:55,760 --> 00:17:59,280
and yeah people like to pitch in and

00:17:58,640 --> 00:18:02,640
it's

00:17:59,280 --> 00:18:03,120
amazing so we we really do need your

00:18:02,640 --> 00:18:06,480
help

00:18:03,120 --> 00:18:07,440
um the easiest way even if you're not a

00:18:06,480 --> 00:18:08,880
kernel developer

00:18:07,440 --> 00:18:15,120
you you don't feel like dealing with

00:18:08,880 --> 00:18:17,280
upstream you don't feel like um you know

00:18:15,120 --> 00:18:18,320
trying to fix bugs yourself uh kernel

00:18:17,280 --> 00:18:21,280
test week is

00:18:18,320 --> 00:18:22,720
a huge tool for helping determine

00:18:21,280 --> 00:18:24,480
whether or not a kernel is ready to roll

00:18:22,720 --> 00:18:26,559
out or what needs to be fixed before

00:18:24,480 --> 00:18:30,280
colonel's ready to roll out

00:18:26,559 --> 00:18:32,000
there we've had the last few we've had

00:18:30,280 --> 00:18:34,480
225 plus

00:18:32,000 --> 00:18:36,880
tests submitted uh we would love to see

00:18:34,480 --> 00:18:40,640
that be even more we would love to see

00:18:36,880 --> 00:18:42,720
uh people testing not just on a vm or

00:18:40,640 --> 00:18:44,640
but with real hardware because that's

00:18:42,720 --> 00:18:46,080
that's a huge factor and whether or not

00:18:44,640 --> 00:18:47,760
a kernel is really ready to go

00:18:46,080 --> 00:18:49,440
there's so much hardware out there and

00:18:47,760 --> 00:18:50,240
i've got a number of systems in this

00:18:49,440 --> 00:18:53,280
room

00:18:50,240 --> 00:18:54,000
but not that many of the not that many

00:18:53,280 --> 00:18:57,280
compared to

00:18:54,000 --> 00:18:59,919
what all is out there so if you can test

00:18:57,280 --> 00:19:00,640
boot up the kernel run the test suite um

00:18:59,919 --> 00:19:02,080
yeah

00:19:00,640 --> 00:19:03,280
honestly the results of the test suite

00:19:02,080 --> 00:19:04,799
aren't that important if you run the

00:19:03,280 --> 00:19:07,200
default test suite the

00:19:04,799 --> 00:19:10,240
simple easy default test suite that at

00:19:07,200 --> 00:19:12,080
least tells us that it's been run

00:19:10,240 --> 00:19:14,400
even if you don't run it in route it

00:19:12,080 --> 00:19:16,240
tells it it tells us it's been run

00:19:14,400 --> 00:19:17,919
that you successfully booted this kernel

00:19:16,240 --> 00:19:19,600
and you brewed this kernel as hardware

00:19:17,919 --> 00:19:21,520
and i kind of assumed that

00:19:19,600 --> 00:19:22,880
if you've you know booted the kernel and

00:19:21,520 --> 00:19:24,480
run the test suite then if you ran into

00:19:22,880 --> 00:19:27,360
an issue you would probably file a bug

00:19:24,480 --> 00:19:29,280
or mention it on the test week wiki or

00:19:27,360 --> 00:19:30,720
mailing list or something like that so

00:19:29,280 --> 00:19:33,840
it gives us a

00:19:30,720 --> 00:19:35,360
you know indication of these these

00:19:33,840 --> 00:19:37,200
these are the people are we don't know

00:19:35,360 --> 00:19:38,720
who but you know these are the number of

00:19:37,200 --> 00:19:42,240
people who run

00:19:38,720 --> 00:19:43,280
tests and you know like i said if we get

00:19:42,240 --> 00:19:44,960
varying hardware there

00:19:43,280 --> 00:19:48,559
it kind of puts us in a really good

00:19:44,960 --> 00:19:48,559
position to to know where we are

00:19:48,960 --> 00:19:52,160
another thing is upstream first i know

00:19:51,200 --> 00:19:53,679
that that

00:19:52,160 --> 00:19:55,440
people come to us every once in a while

00:19:53,679 --> 00:19:57,760
and say hey we want

00:19:55,440 --> 00:19:59,440
uh this feature implemented or that

00:19:57,760 --> 00:20:00,720
feature you know that feature turned on

00:19:59,440 --> 00:20:04,000
and these things are out of tree

00:20:00,720 --> 00:20:06,080
um it's just not manageable to be

00:20:04,000 --> 00:20:07,840
pulling in a lot of other free things we

00:20:06,080 --> 00:20:08,320
would love to see everything upstream

00:20:07,840 --> 00:20:11,360
first

00:20:08,320 --> 00:20:12,559
uh actually it's pretty much requirement

00:20:11,360 --> 00:20:14,400
so if there's something you really want

00:20:12,559 --> 00:20:17,760
to see in the kernel and it's not

00:20:14,400 --> 00:20:18,320
in upstream uh you know try to get it

00:20:17,760 --> 00:20:20,799
upstream

00:20:18,320 --> 00:20:22,480
try to just offer some cheerleading

00:20:20,799 --> 00:20:24,240
testing whatever it takes to

00:20:22,480 --> 00:20:26,880
to help out the the developer of that

00:20:24,240 --> 00:20:29,280
feature getting it upstream

00:20:26,880 --> 00:20:30,480
um yeah that's a fairly important thing

00:20:29,280 --> 00:20:32,640
we've had uh there's

00:20:30,480 --> 00:20:34,559
the f11k drivers we've had some users

00:20:32,640 --> 00:20:36,880
now i guess they're shipping hardware

00:20:34,559 --> 00:20:38,400
and you know i i just can't turn it on

00:20:36,880 --> 00:20:41,200
yet 5.9

00:20:38,400 --> 00:20:44,320
actually should have the f11k driver so

00:20:41,200 --> 00:20:45,840
i'm hoping that it gets up there

00:20:44,320 --> 00:20:47,520
and last speak up if there's something

00:20:45,840 --> 00:20:49,039
you need for

00:20:47,520 --> 00:20:51,280
all of the config options uh

00:20:49,039 --> 00:20:54,880
particularly in fedora when we decide to

00:20:51,280 --> 00:20:57,679
turn on a driver or turn off a driver

00:20:54,880 --> 00:20:58,400
it is based on an educated guess right

00:20:57,679 --> 00:20:59,360
um

00:20:58,400 --> 00:21:01,520
you know there are certain things we

00:20:59,360 --> 00:21:04,159
don't want we don't turn on staging um

00:21:01,520 --> 00:21:05,440
i'm not going to turn on a driver that i

00:21:04,159 --> 00:21:06,880
don't think there's there's valid

00:21:05,440 --> 00:21:07,840
hardware out there for i'm not going to

00:21:06,880 --> 00:21:11,360
turn on drivers

00:21:07,840 --> 00:21:13,039
that are known to be unstable

00:21:11,360 --> 00:21:14,640
but you know for other things i kind of

00:21:13,039 --> 00:21:15,280
look at it i'm like i'm not really sure

00:21:14,640 --> 00:21:17,200
if this

00:21:15,280 --> 00:21:18,400
this chip has valid hardware out there

00:21:17,200 --> 00:21:20,720
or not and i try to do a little bit of

00:21:18,400 --> 00:21:22,480
research and if i'm not seeing a lot

00:21:20,720 --> 00:21:24,240
i might choose not to turn on that

00:21:22,480 --> 00:21:26,480
module

00:21:24,240 --> 00:21:27,679
if you need that module turned on

00:21:26,480 --> 00:21:29,760
request

00:21:27,679 --> 00:21:31,520
if you send a mail to the email list or

00:21:29,760 --> 00:21:34,880
send a merge request to

00:21:31,520 --> 00:21:36,559
to gitlab those things tell us that oh

00:21:34,880 --> 00:21:39,360
hey somebody needs this now the

00:21:36,559 --> 00:21:41,200
the answer may be that hey we turn this

00:21:39,360 --> 00:21:42,960
off for a reason and here's why and if

00:21:41,200 --> 00:21:44,000
we can maybe find a way to get past this

00:21:42,960 --> 00:21:47,039
reason we can turn it on

00:21:44,000 --> 00:21:47,360
or the answer may be hey i'll have it on

00:21:47,039 --> 00:21:50,400
in

00:21:47,360 --> 00:21:51,440
next build and but if we don't hear from

00:21:50,400 --> 00:21:53,280
you if we don't know that that's

00:21:51,440 --> 00:21:55,679
something you want

00:21:53,280 --> 00:21:57,760
i don't know that that is it's not going

00:21:55,679 --> 00:21:59,200
to happen so i need to know that

00:21:57,760 --> 00:22:00,559
hey somebody out there needs this and

00:21:59,200 --> 00:22:01,280
then and then i can look at it and say

00:22:00,559 --> 00:22:04,880
oh yeah

00:22:01,280 --> 00:22:06,480
i'm happy to do that for you that's

00:22:04,880 --> 00:22:08,320
pretty much all everything and i would

00:22:06,480 --> 00:22:10,480
like i said i'm sorry about this

00:22:08,320 --> 00:22:12,080
slide setup so i'll get these slides i'm

00:22:10,480 --> 00:22:13,520
sure we'll be online and published but

00:22:12,080 --> 00:22:16,400
they were pretty simple

00:22:13,520 --> 00:22:17,679
um the only other thing i will post in

00:22:16,400 --> 00:22:20,320
the

00:22:17,679 --> 00:22:21,679
the chat real quick is the link for

00:22:20,320 --> 00:22:23,520
laura's talk

00:22:21,679 --> 00:22:25,039
or laura's blog post about kernel

00:22:23,520 --> 00:22:27,840
headers for people who want more

00:22:25,039 --> 00:22:27,840
information there

00:22:36,799 --> 00:22:40,000
that's there anybody have any questions

00:22:39,679 --> 00:22:42,400
or

00:22:40,000 --> 00:22:42,400
comments

00:22:53,039 --> 00:23:05,280
if not thank you for your time and

00:22:56,400 --> 00:23:05,280

YouTube URL: https://www.youtube.com/watch?v=urUktTIP0Fs


