Title: Using source-git to maintain packages in Fedora
Publication date: 2020-08-27
Playlist: Nest with Fedora 2020
Description: 
	This talk will review the source-git concept, how it's different from dist-git, and the various benefits it provides.

Presented at Nest With Fedora 2020.
Captions: 
	00:00:02,480 --> 00:00:06,319
um

00:00:03,199 --> 00:00:10,000
hello everyone uh this

00:00:06,319 --> 00:00:12,000
um short session um

00:00:10,000 --> 00:00:14,480
which window is this yes this is the

00:00:12,000 --> 00:00:16,960
window uh let me introduce myself

00:00:14,480 --> 00:00:18,400
my name is hunor chunwatani i'm a

00:00:16,960 --> 00:00:22,320
software engineer at

00:00:18,400 --> 00:00:25,279
red hat working with the packet team

00:00:22,320 --> 00:00:26,240
you can find me all over the internet

00:00:25,279 --> 00:00:29,359
with the nick

00:00:26,240 --> 00:00:30,080
chomha and pretty much the same profile

00:00:29,359 --> 00:00:34,000
picture

00:00:30,080 --> 00:00:34,000
everywhere hopefully

00:00:35,040 --> 00:00:40,559
today's session is going to be about

00:00:38,000 --> 00:00:44,480
using source kit to maintain packages

00:00:40,559 --> 00:00:44,480
whereas then in fedora

00:00:44,879 --> 00:00:52,079
the agenda is kind of short

00:00:48,719 --> 00:00:55,840
first i would like to do a quick

00:00:52,079 --> 00:00:59,280
walkthrough about what disk it is

00:00:55,840 --> 00:01:01,520
so maybe i should ask if

00:00:59,280 --> 00:01:02,800
there is someone in the audience who is

00:01:01,520 --> 00:01:06,799
not familiar with

00:01:02,800 --> 00:01:09,360
this kit concept you can write in the

00:01:06,799 --> 00:01:09,360
chat then

00:01:10,159 --> 00:01:15,680
and then i would like to walk around a

00:01:13,119 --> 00:01:15,680
little bit of

00:01:15,759 --> 00:01:22,240
yes um

00:01:18,880 --> 00:01:24,080
yes i don't know what that yes mean

00:01:22,240 --> 00:01:27,439
um i would like to walk around the

00:01:24,080 --> 00:01:30,799
concept of sources and

00:01:27,439 --> 00:01:31,840
then check a little bit uh how the

00:01:30,799 --> 00:01:36,000
tooling my

00:01:31,840 --> 00:01:37,360
me and my team is developing which is

00:01:36,000 --> 00:01:40,000
called packet

00:01:37,360 --> 00:01:41,759
okay so frank is not familiar with this

00:01:40,000 --> 00:01:46,240
kit

00:01:41,759 --> 00:01:48,880
so let's see what is this get

00:01:46,240 --> 00:01:51,920
um actually for this presentation i i

00:01:48,880 --> 00:01:51,920
did a little bit of

00:01:52,720 --> 00:01:57,280
research or i don't know looking in the

00:01:56,320 --> 00:02:00,799
past

00:01:57,280 --> 00:02:03,840
and uh on fedora wiki i happened to find

00:02:00,799 --> 00:02:04,079
the original this git proposal which was

00:02:03,840 --> 00:02:07,040
a

00:02:04,079 --> 00:02:07,439
change proposal to to introduce this get

00:02:07,040 --> 00:02:11,200
this

00:02:07,439 --> 00:02:14,640
seemingly was somewhere in end of

00:02:11,200 --> 00:02:17,760
2009 december maybe um

00:02:14,640 --> 00:02:19,360
and it turns out that back then uh all

00:02:17,760 --> 00:02:22,560
fedora packaging was

00:02:19,360 --> 00:02:23,520
happening within cbs which some shared

00:02:22,560 --> 00:02:26,879
directories

00:02:23,520 --> 00:02:29,280
and people were really not happy with

00:02:26,879 --> 00:02:31,599
it so this is how this gets started

00:02:29,280 --> 00:02:34,840
basically

00:02:31,599 --> 00:02:37,840
this git for fedora is

00:02:34,840 --> 00:02:37,840
src.fedoraproject.org

00:02:39,440 --> 00:02:46,959
and currently it's running a pegger

00:02:43,519 --> 00:02:47,519
as as the forge and this is the place

00:02:46,959 --> 00:02:50,160
where

00:02:47,519 --> 00:02:51,040
all the packages all the sources for all

00:02:50,160 --> 00:02:54,720
the packages

00:02:51,040 --> 00:02:57,680
are stored now the reason

00:02:54,720 --> 00:02:58,640
we don't just call git but there is this

00:02:57,680 --> 00:03:01,440
dist

00:02:58,640 --> 00:03:02,840
in the beginning which if i'm not wrong

00:03:01,440 --> 00:03:05,920
it stands for

00:03:02,840 --> 00:03:10,239
distribution um it's because

00:03:05,920 --> 00:03:13,920
has this um somewhat somewhat uh

00:03:10,239 --> 00:03:14,800
weird layout um as you can see here in

00:03:13,920 --> 00:03:18,159
firefox

00:03:14,800 --> 00:03:21,200
for example you are going to have um

00:03:18,159 --> 00:03:23,360
all the patches um which

00:03:21,200 --> 00:03:25,280
are distribution patches like uh

00:03:23,360 --> 00:03:28,640
specific to fedora

00:03:25,280 --> 00:03:32,000
and then if you are going to scroll down

00:03:28,640 --> 00:03:35,120
at some point um where is it yeah

00:03:32,000 --> 00:03:38,560
you are going to file the spec file

00:03:35,120 --> 00:03:41,920
in here plus all kinds of other files

00:03:38,560 --> 00:03:45,599
which are required to build this package

00:03:41,920 --> 00:03:47,840
um and then there is this

00:03:45,599 --> 00:03:49,200
weird little file which is called

00:03:47,840 --> 00:03:52,959
sources

00:03:49,200 --> 00:03:54,959
um which is having this format of

00:03:52,959 --> 00:03:58,159
specifying

00:03:54,959 --> 00:04:00,799
um how to check

00:03:58,159 --> 00:04:02,319
the validity of this archive and all

00:04:00,799 --> 00:04:04,879
these archives

00:04:02,319 --> 00:04:05,920
are stored in a place we call leukocyte

00:04:04,879 --> 00:04:09,120
cache

00:04:05,920 --> 00:04:11,040
and all these hashes will verify

00:04:09,120 --> 00:04:13,040
that the file retrieved from the

00:04:11,040 --> 00:04:14,480
leukocyte cache is really the one which

00:04:13,040 --> 00:04:17,120
was safe there

00:04:14,480 --> 00:04:18,160
and then really what happens during the

00:04:17,120 --> 00:04:21,919
weird process

00:04:18,160 --> 00:04:24,720
is um the archive

00:04:21,919 --> 00:04:25,919
is downloaded or these archives are

00:04:24,720 --> 00:04:29,360
downloaded from

00:04:25,919 --> 00:04:32,080
from the leukocyte cache unpacked

00:04:29,360 --> 00:04:34,400
then all these patches which are here

00:04:32,080 --> 00:04:37,919
and specified in the spec file

00:04:34,400 --> 00:04:43,440
are applied on top of that tree

00:04:37,919 --> 00:04:45,919
and then the build process can continue

00:04:43,440 --> 00:04:48,320
now collaboration in this format is a

00:04:45,919 --> 00:04:51,040
little bit

00:04:48,320 --> 00:04:51,040
strange

00:04:51,360 --> 00:04:57,680
maybe i'm wrong but as far as i know

00:04:54,560 --> 00:04:58,800
in previous versions when this git

00:04:57,680 --> 00:05:02,720
wasn't

00:04:58,800 --> 00:05:06,560
running uh a packer fort on top of it

00:05:02,720 --> 00:05:08,800
um some maintainers were even like

00:05:06,560 --> 00:05:10,960
directly pushing to branches which is

00:05:08,800 --> 00:05:13,600
still possible

00:05:10,960 --> 00:05:15,440
since beggar more and more people

00:05:13,600 --> 00:05:18,800
started using

00:05:15,440 --> 00:05:22,400
prs for any changes but because

00:05:18,800 --> 00:05:25,759
basically you store

00:05:22,400 --> 00:05:29,600
downstream patches as separate files

00:05:25,759 --> 00:05:32,160
in git reviewing such

00:05:29,600 --> 00:05:32,720
changes well a little bit interesting

00:05:32,160 --> 00:05:34,479
because

00:05:32,720 --> 00:05:35,919
as you can see for example in this

00:05:34,479 --> 00:05:38,639
example

00:05:35,919 --> 00:05:39,600
uh in a pr you are going to review

00:05:38,639 --> 00:05:43,039
patches

00:05:39,600 --> 00:05:47,680
of patches um which is

00:05:43,039 --> 00:05:47,680
kind of an indirection um

00:05:48,800 --> 00:05:53,280
cognitive load i would say and it's more

00:05:51,199 --> 00:05:54,160
difficult to check because basically you

00:05:53,280 --> 00:05:57,280
don't

00:05:54,160 --> 00:05:59,759
have the whole context of

00:05:57,280 --> 00:06:01,680
what in which these patches are

00:05:59,759 --> 00:06:07,199
happening

00:06:01,680 --> 00:06:11,039
so this is where source git comes in and

00:06:07,199 --> 00:06:11,840
i would like to say at the beginning

00:06:11,039 --> 00:06:15,039
that this

00:06:11,840 --> 00:06:18,240
isn't really a new thing that

00:06:15,039 --> 00:06:18,240
we just invent

00:06:18,639 --> 00:06:26,639
while i was doing uh archaeology in uh

00:06:22,880 --> 00:06:30,080
in the fedora wiki i also found that

00:06:26,639 --> 00:06:34,080
uh hello michael

00:06:30,080 --> 00:06:36,240
uh you just missed um what this git is

00:06:34,080 --> 00:06:40,560
about

00:06:36,240 --> 00:06:43,840
so yeah if you know that then

00:06:40,560 --> 00:06:47,759
it's fine yeah so i was

00:06:43,840 --> 00:06:50,000
i found this supposedly there was a

00:06:47,759 --> 00:06:51,360
source control management special

00:06:50,000 --> 00:06:54,400
interest group

00:06:51,360 --> 00:06:58,080
and um no problem and

00:06:54,400 --> 00:06:59,599
um they had an agenda and this is also

00:06:58,080 --> 00:07:02,800
back somewhere in

00:06:59,599 --> 00:07:06,319
2009 that can they have

00:07:02,800 --> 00:07:09,440
exploded three packages to work on

00:07:06,319 --> 00:07:12,960
and this is what we did source git is

00:07:09,440 --> 00:07:16,000
um source get is just you don't

00:07:12,960 --> 00:07:18,639
change the format of how you get

00:07:16,000 --> 00:07:20,080
sources from upstream you don't create

00:07:18,639 --> 00:07:22,560
an archive and then

00:07:20,080 --> 00:07:24,639
then upload to the lookup site cache we

00:07:22,560 --> 00:07:29,120
just fork the upstream repo

00:07:24,639 --> 00:07:33,199
like use git for what linus invented

00:07:29,120 --> 00:07:35,840
and you apply

00:07:33,199 --> 00:07:37,360
downstream or distributions changes as

00:07:35,840 --> 00:07:39,919
separate

00:07:37,360 --> 00:07:40,479
changes as commits on top of it so it's

00:07:39,919 --> 00:07:43,759
like

00:07:40,479 --> 00:07:47,039
really just use git as it was intended

00:07:43,759 --> 00:07:49,919
you have the upstream history and then

00:07:47,039 --> 00:07:52,800
just apply downstream patches as a

00:07:49,919 --> 00:07:52,800
separate branch

00:07:54,720 --> 00:08:01,440
and what our team thinks and

00:07:58,319 --> 00:08:05,120
what proves to be the case um

00:08:01,440 --> 00:08:08,160
we really think that a source git layout

00:08:05,120 --> 00:08:11,360
can can be a place for for

00:08:08,160 --> 00:08:14,479
to do creative and interesting work and

00:08:11,360 --> 00:08:17,280
not needing to do all these in

00:08:14,479 --> 00:08:18,080
to handle all these and in directions of

00:08:17,280 --> 00:08:22,479
what the

00:08:18,080 --> 00:08:26,720
this git format uh requires

00:08:22,479 --> 00:08:30,720
um how would this work another diagram

00:08:26,720 --> 00:08:34,000
um one of the things

00:08:30,720 --> 00:08:37,440
or the way we work with source gate is

00:08:34,000 --> 00:08:39,680
basically take up stream releases

00:08:37,440 --> 00:08:40,800
which might be tags or branches or

00:08:39,680 --> 00:08:43,440
whatever

00:08:40,800 --> 00:08:44,880
um pull them into your source git

00:08:43,440 --> 00:08:48,320
repository

00:08:44,880 --> 00:08:49,040
um you can uh create for each release a

00:08:48,320 --> 00:08:51,600
branch

00:08:49,040 --> 00:08:52,480
just for auditability so that you can go

00:08:51,600 --> 00:08:55,920
back anytime

00:08:52,480 --> 00:09:00,240
and see like okay what was the release

00:08:55,920 --> 00:09:03,839
and then starting from this branch

00:09:00,240 --> 00:09:07,120
uh apply your apply the

00:09:03,839 --> 00:09:10,560
distribution patches or changes

00:09:07,120 --> 00:09:14,640
and then synchronize

00:09:10,560 --> 00:09:17,279
this branch and create the master branch

00:09:14,640 --> 00:09:17,680
or like which is going to be real high

00:09:17,279 --> 00:09:20,160
for

00:09:17,680 --> 00:09:22,720
i don't know for the fedora like for

00:09:20,160 --> 00:09:25,040
each release you can do and create the

00:09:22,720 --> 00:09:28,399
corresponding branches

00:09:25,040 --> 00:09:29,120
um how would this live like we know that

00:09:28,399 --> 00:09:33,920
this part

00:09:29,120 --> 00:09:36,640
is src fedora project running pegger

00:09:33,920 --> 00:09:40,080
this can be any kind of kit for git

00:09:36,640 --> 00:09:42,880
forge any kind of git repository

00:09:40,080 --> 00:09:44,320
and this the source gate part this is

00:09:42,880 --> 00:09:47,760
what you can really store

00:09:44,320 --> 00:09:49,279
pretty much anywhere github gitlab

00:09:47,760 --> 00:09:51,839
pegger

00:09:49,279 --> 00:09:53,760
beat keeper sorry for not putting in the

00:09:51,839 --> 00:09:56,880
slide

00:09:53,760 --> 00:10:00,640
really anything you would like to

00:09:56,880 --> 00:10:03,760
um and now some people might say

00:10:00,640 --> 00:10:05,440
uh who are doing packages that wait i'm

00:10:03,760 --> 00:10:08,880
already doing something like this

00:10:05,440 --> 00:10:12,959
yes i said this is not a new invention

00:10:08,880 --> 00:10:15,120
uh actually what we found uh

00:10:12,959 --> 00:10:16,240
one of my teammates started the thread

00:10:15,120 --> 00:10:18,480
not long ago

00:10:16,240 --> 00:10:19,440
on on fedora devil regarding this

00:10:18,480 --> 00:10:22,480
subject

00:10:19,440 --> 00:10:25,279
and what we learned from that thread is

00:10:22,480 --> 00:10:26,160
that many teams and many people are

00:10:25,279 --> 00:10:29,760
using

00:10:26,160 --> 00:10:32,959
something similar uh either locally or

00:10:29,760 --> 00:10:35,519
they even have their forks

00:10:32,959 --> 00:10:36,720
of upstream repositories somewhere in

00:10:35,519 --> 00:10:39,680
github

00:10:36,720 --> 00:10:40,240
where where they create their branches

00:10:39,680 --> 00:10:42,880
and

00:10:40,240 --> 00:10:43,680
use those branches to manip to manage

00:10:42,880 --> 00:10:45,600
all the

00:10:43,680 --> 00:10:47,839
the downstream patches they are working

00:10:45,600 --> 00:10:47,839
with

00:10:48,720 --> 00:10:52,560
and what that really means for them is

00:10:51,600 --> 00:10:55,760
that they are

00:10:52,560 --> 00:10:57,920
able to open prs which are more

00:10:55,760 --> 00:10:59,440
meaningful because you are actually

00:10:57,920 --> 00:11:01,839
looking at the code which you are

00:10:59,440 --> 00:11:05,680
patching and not looking at the patch

00:11:01,839 --> 00:11:08,880
which is going to patch your code um

00:11:05,680 --> 00:11:10,560
so i think that's that that's a really

00:11:08,880 --> 00:11:14,880
nice thing to have

00:11:10,560 --> 00:11:19,200
um so yeah this is not a new invention

00:11:14,880 --> 00:11:22,640
um what is somewhat new

00:11:19,200 --> 00:11:26,480
and now let's have a look at tooling

00:11:22,640 --> 00:11:28,959
the basic tooling it will be get

00:11:26,480 --> 00:11:30,000
when you are working with this git yes

00:11:28,959 --> 00:11:33,519
you are also

00:11:30,000 --> 00:11:36,800
using git but then you are going to use

00:11:33,519 --> 00:11:41,120
some other tools um

00:11:36,800 --> 00:11:44,959
you need to use patch right sometimes uh

00:11:41,120 --> 00:11:48,000
div things like that

00:11:44,959 --> 00:11:49,279
um one of the tool uh my team was

00:11:48,000 --> 00:11:54,320
working on

00:11:49,279 --> 00:11:56,399
uh is packet this is package for fedora

00:11:54,320 --> 00:11:58,880
this should be really a command line

00:11:56,399 --> 00:12:02,160
tool which

00:11:58,880 --> 00:12:07,200
basically currently will help

00:12:02,160 --> 00:12:09,839
maintainers doing these these things

00:12:07,200 --> 00:12:12,560
uh between their source git repositories

00:12:09,839 --> 00:12:12,560
down to their

00:12:13,760 --> 00:12:20,240
disket repositories plus

00:12:17,040 --> 00:12:20,880
package also enables you to trigger some

00:12:20,240 --> 00:12:23,839
builds

00:12:20,880 --> 00:12:24,800
either in koji or to test your packages

00:12:23,839 --> 00:12:28,480
you could use

00:12:24,800 --> 00:12:31,360
a copper for that

00:12:28,480 --> 00:12:32,639
and but what is more import or

00:12:31,360 --> 00:12:34,880
interesting maybe

00:12:32,639 --> 00:12:36,079
is that we are working on a github

00:12:34,880 --> 00:12:39,760
application

00:12:36,079 --> 00:12:40,880
uh basically this is offering package as

00:12:39,760 --> 00:12:44,959
a service

00:12:40,880 --> 00:12:48,000
and what this application will offer you

00:12:44,959 --> 00:12:50,560
uh once you enable in your uh source git

00:12:48,000 --> 00:12:54,240
repositories which you are storing in

00:12:50,560 --> 00:12:57,680
in github is that it will

00:12:54,240 --> 00:13:00,000
um allow you to um

00:12:57,680 --> 00:13:00,800
it will give you some checks on your

00:13:00,000 --> 00:13:04,160
pr's in

00:13:00,800 --> 00:13:07,360
in source git it will build your changes

00:13:04,160 --> 00:13:11,279
uh in copper and provide feedback uh

00:13:07,360 --> 00:13:14,320
as flags on these prs

00:13:11,279 --> 00:13:15,120
plus there is a possibility to test

00:13:14,320 --> 00:13:19,200
these builds

00:13:15,120 --> 00:13:22,399
using testing form and

00:13:19,200 --> 00:13:24,480
it also supports uh proposing

00:13:22,399 --> 00:13:25,760
new releases to this kit it will

00:13:24,480 --> 00:13:28,959
basically open you

00:13:25,760 --> 00:13:33,040
uh this git this git vr

00:13:28,959 --> 00:13:36,399
in src.fedoraproject.org

00:13:33,040 --> 00:13:37,920
with all the changes uh you did in your

00:13:36,399 --> 00:13:40,160
sales git repository

00:13:37,920 --> 00:13:41,519
and then you can review that and and

00:13:40,160 --> 00:13:44,959
merge it

00:13:41,519 --> 00:13:48,880
uh this is currently a github app

00:13:44,959 --> 00:13:52,320
but we are working on

00:13:48,880 --> 00:13:55,360
on like pegger support is

00:13:52,320 --> 00:13:56,800
already done and gitlab support is in

00:13:55,360 --> 00:14:01,120
progress

00:13:56,800 --> 00:14:02,000
um thanks to one of the guys from google

00:14:01,120 --> 00:14:05,279
summer of course

00:14:02,000 --> 00:14:05,279
who is helping us with this

00:14:05,680 --> 00:14:12,480
and this is really a

00:14:09,040 --> 00:14:13,440
call for the brave of you out there who

00:14:12,480 --> 00:14:16,959
would like to

00:14:13,440 --> 00:14:20,959
try this way of

00:14:16,959 --> 00:14:24,240
packaging out um

00:14:20,959 --> 00:14:27,399
so you could reach us on

00:14:24,240 --> 00:14:28,959
on either check out our documentation on

00:14:27,399 --> 00:14:34,399
packet.dev or

00:14:28,959 --> 00:14:34,399
find us on on github or irc

00:14:35,519 --> 00:14:43,040
cool uh thank you

00:14:38,959 --> 00:14:46,800
for listening again in the name of

00:14:43,040 --> 00:14:49,680
the entire team and let's see if there

00:14:46,800 --> 00:14:49,680
are any questions

00:14:50,480 --> 00:14:55,839
frank is asking isn't just like rebasing

00:14:53,519 --> 00:14:56,839
downstream patches on top of upstream

00:14:55,839 --> 00:15:01,440
tree

00:14:56,839 --> 00:15:04,560
um yes many people do like that

00:15:01,440 --> 00:15:07,760
other people other projects

00:15:04,560 --> 00:15:10,839
we've seen doing this git will

00:15:07,760 --> 00:15:13,839
choose cherry picking or any other git

00:15:10,839 --> 00:15:13,839
operation

00:15:14,880 --> 00:15:17,440
so yeah

00:15:19,360 --> 00:15:25,279
it's like rebasing downstream patches i

00:15:22,480 --> 00:15:26,240
i think the main difference is that this

00:15:25,279 --> 00:15:28,720
is permanent

00:15:26,240 --> 00:15:30,320
you can share with others who you are

00:15:28,720 --> 00:15:33,519
packaging with

00:15:30,320 --> 00:15:37,440
i i hope i get the context right

00:15:33,519 --> 00:15:40,639
and it's it's not something like

00:15:37,440 --> 00:15:42,560
you do just locally on your machine it

00:15:40,639 --> 00:15:50,399
actually lives out there

00:15:42,560 --> 00:15:50,399

YouTube URL: https://www.youtube.com/watch?v=ep1ctX05lF8


