Title: MBBox - Module Building in a Box
Publication date: 2020-08-29
Playlist: Nest with Fedora 2020
Description: 
	This talk will review MBBox, a new Kubernetes/Openshift operator, and how the team around it was created and how they worked.

Presented at Nest With Fedora 2020.
Captions: 
	00:00:02,560 --> 00:00:06,799
i will talk

00:00:03,679 --> 00:00:11,200
about the mb box project uh

00:00:06,799 --> 00:00:11,200
it was a cp initiative

00:00:11,280 --> 00:00:17,279
my name is mikhail konechni i'm part of

00:00:13,920 --> 00:00:20,960
the cp team i work as software engineer

00:00:17,279 --> 00:00:24,320
it was initiative ambibox was initiative

00:00:20,960 --> 00:00:28,880
in the second quarter quarter for the

00:00:24,320 --> 00:00:28,880
cp team it was one of them

00:00:28,960 --> 00:00:34,640
okay so let's start okay

00:00:32,239 --> 00:00:35,280
this uh presentation will have three

00:00:34,640 --> 00:00:37,680
parts

00:00:35,280 --> 00:00:38,480
uh first i will talk about what is mb

00:00:37,680 --> 00:00:42,079
box

00:00:38,480 --> 00:00:45,200
i'm sure that plenty of people are

00:00:42,079 --> 00:00:47,840
don't not familiar what it is

00:00:45,200 --> 00:00:49,600
uh then i will talk about the team

00:00:47,840 --> 00:00:53,039
behind mb box

00:00:49,600 --> 00:00:58,640
and uh lastly i will talk about the

00:00:53,039 --> 00:01:02,879
actual work we did so let's start

00:00:58,640 --> 00:01:04,239
okay so the mb box was originally

00:01:02,879 --> 00:01:08,640
created by your

00:01:04,239 --> 00:01:10,400
former colleague patrick i

00:01:08,640 --> 00:01:13,840
don't try to pronounce his last name

00:01:10,400 --> 00:01:13,840
because i will fail

00:01:14,720 --> 00:01:22,159
the this was originally a

00:01:17,840 --> 00:01:26,720
python script he wrote for to

00:01:22,159 --> 00:01:30,079
to actually have easy way to deploy

00:01:26,720 --> 00:01:33,119
uh the mb box itself

00:01:30,079 --> 00:01:35,119
uh he did this manually before and

00:01:33,119 --> 00:01:36,640
we just he decided to write a python

00:01:35,119 --> 00:01:41,200
script it was

00:01:36,640 --> 00:01:44,880
actually just uh some script that was

00:01:41,200 --> 00:01:48,399
calling calling

00:01:44,880 --> 00:01:50,880
origin client and doing the work for him

00:01:48,399 --> 00:01:52,159
not anything that actually checked if

00:01:50,880 --> 00:01:55,840
everything is working

00:01:52,159 --> 00:01:55,840
and how it is

00:01:57,119 --> 00:02:04,560
okay the mb box itself has

00:02:00,560 --> 00:02:06,560
few parts uh it's actually has

00:02:04,560 --> 00:02:08,560
five parts but there are two

00:02:06,560 --> 00:02:11,680
applications in it

00:02:08,560 --> 00:02:15,280
the first one is koji which is

00:02:11,680 --> 00:02:18,319
which manages the module builds but

00:02:15,280 --> 00:02:18,800
doesn't do them actually this is done by

00:02:18,319 --> 00:02:22,720
the

00:02:18,800 --> 00:02:25,520
mbs the koji has three

00:02:22,720 --> 00:02:26,480
smaller components there is koji builder

00:02:25,520 --> 00:02:29,520
which is

00:02:26,480 --> 00:02:30,879
used in the mb box for creating new

00:02:29,520 --> 00:02:34,480
repositories

00:02:30,879 --> 00:02:35,120
there is koji hub which is web interface

00:02:34,480 --> 00:02:38,319
and

00:02:35,120 --> 00:02:42,640
you can actually see what is

00:02:38,319 --> 00:02:43,200
being built and the last thing is kojira

00:02:42,640 --> 00:02:47,360
which is

00:02:43,200 --> 00:02:50,560
uh working with a different build route

00:02:47,360 --> 00:02:53,840
then we have mbs which has two

00:02:50,560 --> 00:02:57,040
components in the mb box and

00:02:53,840 --> 00:03:01,200
is mb best mbs front-end and mbs

00:02:57,040 --> 00:03:05,120
again the mbs front-end is actually just

00:03:01,200 --> 00:03:08,560
this apache application that is uh

00:03:05,120 --> 00:03:10,959
doing it that is uh that is by a

00:03:08,560 --> 00:03:14,879
web interface for the mbs backend and

00:03:10,959 --> 00:03:17,920
the mbs backend doing the actual work

00:03:14,879 --> 00:03:21,360
uh they are communicating by sending

00:03:17,920 --> 00:03:25,440
a messages between them

00:03:21,360 --> 00:03:25,440
and they are using fed message

00:03:26,239 --> 00:03:32,799
and we tried to create

00:03:29,519 --> 00:03:36,319
to use the federal messaging so it was

00:03:32,799 --> 00:03:40,799
something about the mb box

00:03:36,319 --> 00:03:43,840
itself the system or the wall system is

00:03:40,799 --> 00:03:45,760
created to actually have the

00:03:43,840 --> 00:03:47,200
easy deployment of the model building

00:03:45,760 --> 00:03:50,560
system in

00:03:47,200 --> 00:03:53,599
any infrastructure you want

00:03:50,560 --> 00:03:55,760
and know about the team that was working

00:03:53,599 --> 00:04:00,879
on the initiative

00:03:55,760 --> 00:04:00,879
we were three there was adamsha

00:04:01,439 --> 00:04:08,159
and me

00:04:04,959 --> 00:04:11,280
you can see our scenic if you have

00:04:08,159 --> 00:04:14,480
any question or something

00:04:11,280 --> 00:04:17,199
about the mb books uh just

00:04:14,480 --> 00:04:18,000
ask us on the free note we are usually

00:04:17,199 --> 00:04:23,040
in

00:04:18,000 --> 00:04:26,400
a fedora apps channel

00:04:23,040 --> 00:04:28,960
okay what was our goal for the

00:04:26,400 --> 00:04:30,080
for this initiative our goal was to make

00:04:28,960 --> 00:04:33,120
deployment of

00:04:30,080 --> 00:04:36,400
mb box that is easy easy to deploy

00:04:33,120 --> 00:04:38,320
in the open shift we

00:04:36,400 --> 00:04:40,800
wanted to replace fat messages with

00:04:38,320 --> 00:04:43,280
fedora messaging

00:04:40,800 --> 00:04:46,000
we wanted to use existing certificate

00:04:43,280 --> 00:04:48,880
authority an existing messaging system

00:04:46,000 --> 00:04:49,280
because uh the original script deployed

00:04:48,880 --> 00:04:51,680
their

00:04:49,280 --> 00:04:53,360
own certificate authority their own

00:04:51,680 --> 00:04:56,639
messaging system

00:04:53,360 --> 00:04:58,880
so it had plenty of things that could be

00:04:56,639 --> 00:05:01,759
used from the actual infrastructure that

00:04:58,880 --> 00:05:01,759
is that is running

00:05:03,919 --> 00:05:11,520
we decided work on it

00:05:07,840 --> 00:05:13,440
and why we decided to create a operator

00:05:11,520 --> 00:05:15,280
for those that doesn't know what is

00:05:13,440 --> 00:05:18,400
operator it's uh

00:05:15,280 --> 00:05:21,199
just uh some

00:05:18,400 --> 00:05:22,080
unseeable playbook that is deploying the

00:05:21,199 --> 00:05:25,840
wall

00:05:22,080 --> 00:05:29,360
uh the wall solution you want

00:05:25,840 --> 00:05:32,479
uh we um wanted to go with

00:05:29,360 --> 00:05:35,280
templates into original request but uh

00:05:32,479 --> 00:05:37,360
decided to not go with it because the

00:05:35,280 --> 00:05:40,479
templates are deprecated in

00:05:37,360 --> 00:05:40,479
4 and

00:05:40,800 --> 00:05:48,160
there was there was aim to

00:05:44,800 --> 00:05:51,120
be deployable in openshift4 the operator

00:05:48,160 --> 00:05:54,880
works both on kubernetes and openshift

00:05:51,120 --> 00:05:58,319
there are some things that are not

00:05:54,880 --> 00:06:01,600
in kubernetes but are in openshift

00:05:58,319 --> 00:06:05,120
but you could use both

00:06:01,600 --> 00:06:07,440
or or

00:06:05,120 --> 00:06:09,919
operator was actually tested on the

00:06:07,440 --> 00:06:13,600
kubernetes of all time we tested on

00:06:09,919 --> 00:06:16,960
openshift uh at the end of uh

00:06:13,600 --> 00:06:20,080
your development cycle because uh

00:06:16,960 --> 00:06:23,520
we needed someone to provide us a

00:06:20,080 --> 00:06:25,840
free note and the kubernetes was easy to

00:06:23,520 --> 00:06:25,840
test

00:06:26,080 --> 00:06:29,840
the operator is configurable by admin

00:06:28,560 --> 00:06:32,960
you have

00:06:29,840 --> 00:06:32,960
custom resources

00:06:33,199 --> 00:06:36,800
custom resource files that you can

00:06:35,280 --> 00:06:42,000
actually edit

00:06:36,800 --> 00:06:44,319
and at your own configuration

00:06:42,000 --> 00:06:46,880
we decided to go with the full

00:06:44,319 --> 00:06:50,000
configurable

00:06:46,880 --> 00:06:52,800
configurable uh operator so

00:06:50,000 --> 00:06:54,639
you have ability to actually switch to

00:06:52,800 --> 00:06:58,560
your own configuration for

00:06:54,639 --> 00:07:01,039
any component that is part of the mb box

00:06:58,560 --> 00:07:02,560
and there is perfect deployments of pods

00:07:01,039 --> 00:07:04,960
which

00:07:02,560 --> 00:07:06,400
which was i what i was talking at the

00:07:04,960 --> 00:07:10,720
start the operator

00:07:06,400 --> 00:07:14,479
is deploying the wall i think for you

00:07:10,720 --> 00:07:18,000
um in our case we don't have uh

00:07:14,479 --> 00:07:20,560
we don't have right now something that

00:07:18,000 --> 00:07:24,639
will do the all the work for you

00:07:20,560 --> 00:07:28,080
but you need to deploy them one by one

00:07:24,639 --> 00:07:28,639
but everything is uh designed to work

00:07:28,080 --> 00:07:32,319
together

00:07:28,639 --> 00:07:32,319
and test it to work together

00:07:32,960 --> 00:07:39,440
so next slide

00:07:36,400 --> 00:07:42,720
okay so there are plenty of

00:07:39,440 --> 00:07:44,000
technologies we this we used when we

00:07:42,720 --> 00:07:48,960
work on the

00:07:44,000 --> 00:07:51,520
operator the technologies are

00:07:48,960 --> 00:07:52,080
some of them were new for me because i

00:07:51,520 --> 00:07:57,280
never

00:07:52,080 --> 00:08:00,560
worked with the with the operator before

00:07:57,280 --> 00:08:03,759
the mini cube was one of them i had some

00:08:00,560 --> 00:08:07,280
uh some experience with openshift but

00:08:03,759 --> 00:08:08,080
not with the kubernetes the zuul was new

00:08:07,280 --> 00:08:12,560
for me

00:08:08,080 --> 00:08:16,080
it was uh what we decided to use for the

00:08:12,560 --> 00:08:17,440
for the ci system we wanted to go with

00:08:16,080 --> 00:08:20,800
the center ci

00:08:17,440 --> 00:08:25,199
but zuul allowed us to have

00:08:20,800 --> 00:08:28,960
more freedom we needed

00:08:25,199 --> 00:08:30,240
the right the wall uh wall operator into

00:08:28,960 --> 00:08:32,800
unsibo

00:08:30,240 --> 00:08:34,320
we decided to go for the with the

00:08:32,800 --> 00:08:37,680
unsible because uh

00:08:34,320 --> 00:08:40,959
the team was familiar with it and

00:08:37,680 --> 00:08:45,040
this is the second most major uh

00:08:40,959 --> 00:08:48,480
operator operator language you can use

00:08:45,040 --> 00:08:50,800
the first is go but we didn't have

00:08:48,480 --> 00:08:52,959
any experience with go so we decided to

00:08:50,800 --> 00:08:55,920
go with uncyber and it's

00:08:52,959 --> 00:08:56,640
widely used in the cp team so there will

00:08:55,920 --> 00:09:00,320
be

00:08:56,640 --> 00:09:03,200
easier for anyone to actually manage it

00:09:00,320 --> 00:09:04,480
or maintain it if there is any need for

00:09:03,200 --> 00:09:07,360
it

00:09:04,480 --> 00:09:08,240
we used molecule for testing i never

00:09:07,360 --> 00:09:10,800
used

00:09:08,240 --> 00:09:12,080
that before this project i didn't know

00:09:10,800 --> 00:09:15,279
there is

00:09:12,080 --> 00:09:16,080
such nice tool for testing of the

00:09:15,279 --> 00:09:20,480
unseeable

00:09:16,080 --> 00:09:23,519
code it is actually running

00:09:20,480 --> 00:09:26,320
is providing some uh some data

00:09:23,519 --> 00:09:28,000
for the for deployment uh for the

00:09:26,320 --> 00:09:31,279
unsimple playbooks and then

00:09:28,000 --> 00:09:34,320
trying to just run them and

00:09:31,279 --> 00:09:38,880
you can assert if everything

00:09:34,320 --> 00:09:38,880
is done how you want it

00:09:39,040 --> 00:09:43,440
the test when you wanted when you want

00:09:41,920 --> 00:09:46,640
to

00:09:43,440 --> 00:09:47,279
do the wall deployment takes around i

00:09:46,640 --> 00:09:51,120
think

00:09:47,279 --> 00:09:54,720
10 minutes so it's not something you

00:09:51,120 --> 00:09:57,200
will want to run every time but uh

00:09:54,720 --> 00:09:58,480
it's good that you can actually test if

00:09:57,200 --> 00:10:01,600
your uncivil code

00:09:58,480 --> 00:10:06,079
do it is doing what you need

00:10:01,600 --> 00:10:09,200
we use the quay io for image hosting

00:10:06,079 --> 00:10:10,720
the most problematic in this was koji

00:10:09,200 --> 00:10:14,560
because

00:10:10,720 --> 00:10:17,680
there isn't any any actual

00:10:14,560 --> 00:10:21,120
containers at koji so we created

00:10:17,680 --> 00:10:21,120
one by uh

00:10:21,600 --> 00:10:28,800
by winner or in this project so

00:10:25,120 --> 00:10:29,920
you can actually you can find goji hub

00:10:28,800 --> 00:10:31,760
or cochi builder

00:10:29,920 --> 00:10:33,760
on the quay io they are publicly

00:10:31,760 --> 00:10:37,040
accessible if you want them to use

00:10:33,760 --> 00:10:39,279
for anything else they are they are

00:10:37,040 --> 00:10:39,279
there

00:10:39,760 --> 00:10:42,880
we used background for the development

00:10:41,760 --> 00:10:47,120
environment

00:10:42,880 --> 00:10:49,440
this is used in another few projects and

00:10:47,120 --> 00:10:51,040
it's nice that it creates everything for

00:10:49,440 --> 00:10:54,480
you and you just then

00:10:51,040 --> 00:10:57,920
you can actually work

00:10:54,480 --> 00:10:58,880
from the just do background up and then

00:10:57,920 --> 00:11:03,200
work on the

00:10:58,880 --> 00:11:06,480
on the project itself so

00:11:03,200 --> 00:11:09,600
let's go for next slide

00:11:06,480 --> 00:11:11,680
okay so we

00:11:09,600 --> 00:11:14,720
started by creating the development

00:11:11,680 --> 00:11:17,920
environment this actually started before

00:11:14,720 --> 00:11:22,640
even the project itself

00:11:17,920 --> 00:11:25,760
and the initiative itself the vagrant

00:11:22,640 --> 00:11:26,839
is running mini cube and osdk which is

00:11:25,760 --> 00:11:29,839
operator

00:11:26,839 --> 00:11:33,360
sdk it's designed it's a

00:11:29,839 --> 00:11:34,160
tool that is actually creating trolls

00:11:33,360 --> 00:11:37,440
for you

00:11:34,160 --> 00:11:41,040
and you can use it to

00:11:37,440 --> 00:11:44,720
test your operator

00:11:41,040 --> 00:11:46,240
uh there also was a second environment

00:11:44,720 --> 00:11:49,600
in the grand

00:11:46,240 --> 00:11:50,320
um uh they are called boxes i think into

00:11:49,600 --> 00:11:52,720
background

00:11:50,320 --> 00:11:53,839
for the python script itself so there

00:11:52,720 --> 00:11:56,880
were two

00:11:53,839 --> 00:12:00,079
we decided to remove the python things

00:11:56,880 --> 00:12:03,040
at the end but if you look at the

00:12:00,079 --> 00:12:05,200
history into repository of mbbox you can

00:12:03,040 --> 00:12:09,360
find it

00:12:05,200 --> 00:12:12,720
so if you ever want to

00:12:09,360 --> 00:12:16,800
run run

00:12:12,720 --> 00:12:18,000
operator sdk development environment in

00:12:16,800 --> 00:12:21,279
background

00:12:18,000 --> 00:12:24,079
you can use our repository and

00:12:21,279 --> 00:12:26,399
or unsybo playbooks for deploying to

00:12:24,079 --> 00:12:30,399
background with it

00:12:26,399 --> 00:12:33,680
there is also manual deployment which is

00:12:30,399 --> 00:12:36,639
this described in our documentation

00:12:33,680 --> 00:12:39,839
i will have the links at the end of the

00:12:36,639 --> 00:12:39,839
of this presentation

00:12:40,959 --> 00:12:48,639
and i could put

00:12:44,560 --> 00:12:48,639
put a link to at least

00:12:49,920 --> 00:12:53,760
okay i can put the link at the to the

00:12:52,560 --> 00:12:56,399
github repository

00:12:53,760 --> 00:12:58,079
in the chat so you can if anybody wants

00:12:56,399 --> 00:13:00,720
to look at it

00:12:58,079 --> 00:13:01,920
again there will be a link at the end of

00:13:00,720 --> 00:13:06,000
this presentation

00:13:01,920 --> 00:13:10,000
but i'm not sure where i actually have

00:13:06,000 --> 00:13:12,320
i have it uploaded to my github repo but

00:13:10,000 --> 00:13:13,200
i'm not sure if it will be uploaded

00:13:12,320 --> 00:13:17,040
somewhere in

00:13:13,200 --> 00:13:19,200
the nest um

00:13:17,040 --> 00:13:20,800
i see the question this is one of the

00:13:19,200 --> 00:13:24,320
things that

00:13:20,800 --> 00:13:27,519
we didn't do yet

00:13:24,320 --> 00:13:31,120
because uh this is

00:13:27,519 --> 00:13:35,040
right now we are uh we

00:13:31,120 --> 00:13:37,360
we uh we gave this uh

00:13:35,040 --> 00:13:38,639
we gave the work we did to the center

00:13:37,360 --> 00:13:42,240
string team which

00:13:38,639 --> 00:13:43,600
was which was the one who originally

00:13:42,240 --> 00:13:47,040
needed it

00:13:43,600 --> 00:13:48,720
and uh we are waiting for some feedback

00:13:47,040 --> 00:13:49,680
and there are a few things that needs to

00:13:48,720 --> 00:13:54,079
be done back

00:13:49,680 --> 00:13:54,880
before we be uploaded to the operator

00:13:54,079 --> 00:13:57,680
app

00:13:54,880 --> 00:13:59,600
so right now it's deployable there is uh

00:13:57,680 --> 00:14:01,839
documentation how to deploy it into

00:13:59,600 --> 00:14:05,519
openshift

00:14:01,839 --> 00:14:09,279
or into kubernetes but

00:14:05,519 --> 00:14:09,279
it isn't available in the operator

00:14:10,320 --> 00:14:16,720
okay okay

00:14:13,680 --> 00:14:20,720
so next part we work on is

00:14:16,720 --> 00:14:23,920
uh vaskoji uh tekuji actually took

00:14:20,720 --> 00:14:27,519
most of the time we spent on the

00:14:23,920 --> 00:14:30,240
mb box because there were

00:14:27,519 --> 00:14:32,000
we decided to go with separate roles for

00:14:30,240 --> 00:14:35,120
koji components

00:14:32,000 --> 00:14:40,000
the koji hub and koji though there were

00:14:35,120 --> 00:14:43,040
very difficult ones the koji hub

00:14:40,000 --> 00:14:46,399
the koji hub was never

00:14:43,040 --> 00:14:51,440
done to run in in the container so

00:14:46,399 --> 00:14:51,440
we needed to solve

00:14:52,720 --> 00:15:00,160
very much of the issues there was

00:14:56,320 --> 00:15:03,920
it was critical because every other

00:15:00,160 --> 00:15:07,519
component that is actually in uh

00:15:03,920 --> 00:15:10,959
in the mb box is communicating with it

00:15:07,519 --> 00:15:14,079
and the koji builder was the first we

00:15:10,959 --> 00:15:16,959
tried to get done

00:15:14,079 --> 00:15:18,320
and it was hard to get it actually

00:15:16,959 --> 00:15:22,480
communicate with

00:15:18,320 --> 00:15:23,040
koji up because of of the certificates

00:15:22,480 --> 00:15:27,920
and

00:15:23,040 --> 00:15:30,160
other things we weren't aware of

00:15:27,920 --> 00:15:30,959
we got some help from the koji team

00:15:30,160 --> 00:15:36,480
which was

00:15:30,959 --> 00:15:36,480
really helpful and really helped us out

00:15:36,800 --> 00:15:43,600
and when we get these two running

00:15:40,079 --> 00:15:47,040
the kojira was easy one

00:15:43,600 --> 00:15:50,480
so this was the most problematic

00:15:47,040 --> 00:15:53,600
and even the mbs we didn't

00:15:50,480 --> 00:15:56,720
take us that much time so

00:15:53,600 --> 00:15:58,320
the part three is the mbs we have uh

00:15:56,720 --> 00:16:00,160
for both of the component there are

00:15:58,320 --> 00:16:03,199
separate drawers

00:16:00,160 --> 00:16:06,560
all of this isn't uh in the github repo

00:16:03,199 --> 00:16:08,160
you could look at it it uh has two parts

00:16:06,560 --> 00:16:11,839
as i said there is mbs bro

00:16:08,160 --> 00:16:12,880
front-end and this back-end we decided

00:16:11,839 --> 00:16:17,120
to create our

00:16:12,880 --> 00:16:20,720
um also so some shared

00:16:17,120 --> 00:16:22,320
shared uh role for the for some of the

00:16:20,720 --> 00:16:26,480
components because the

00:16:22,320 --> 00:16:30,560
most of the components used the koji

00:16:26,480 --> 00:16:34,160
kojima point so we decided to

00:16:30,560 --> 00:16:37,360
create a shared shared roles

00:16:34,160 --> 00:16:39,839
that is deploying this only once and not

00:16:37,360 --> 00:16:43,360
for every component

00:16:39,839 --> 00:16:45,839
uh the mbs had plenty of shared

00:16:43,360 --> 00:16:46,800
configuration configuration options so

00:16:45,839 --> 00:16:51,120
we decided to

00:16:46,800 --> 00:16:53,600
create a shared role for it so it was

00:16:51,120 --> 00:16:55,680
very good to have this because it

00:16:53,600 --> 00:16:59,120
cleaned the code a little

00:16:55,680 --> 00:17:01,199
and help us to get the things faster

00:16:59,120 --> 00:17:04,240
deployed

00:17:01,199 --> 00:17:08,000
okay and the last

00:17:04,240 --> 00:17:11,520
thing we we did was to

00:17:08,000 --> 00:17:11,520
give all of this together

00:17:11,600 --> 00:17:15,760
we created draw for the shared

00:17:13,360 --> 00:17:18,160
attributes as i said before

00:17:15,760 --> 00:17:19,039
the updated documentation so

00:17:18,160 --> 00:17:22,079
documentation

00:17:19,039 --> 00:17:24,000
should be up to date the

00:17:22,079 --> 00:17:25,120
everything in the documentation should

00:17:24,000 --> 00:17:28,799
uh

00:17:25,120 --> 00:17:32,400
should be should work if you want to

00:17:28,799 --> 00:17:35,280
try it deploy it there should be

00:17:32,400 --> 00:17:35,280
there is a

00:17:36,559 --> 00:17:41,600
guide how to do it if you want to

00:17:39,600 --> 00:17:44,880
contribute to it there is

00:17:41,600 --> 00:17:47,919
uh there is guide for it so

00:17:44,880 --> 00:17:51,520
and there is uh there is

00:17:47,919 --> 00:17:55,360
also a description of every

00:17:51,520 --> 00:17:59,039
configurable option in the mb box

00:17:55,360 --> 00:18:00,320
so you could look at any component you

00:17:59,039 --> 00:18:04,240
need

00:18:00,320 --> 00:18:08,080
and just look what every

00:18:04,240 --> 00:18:11,440
configuration option does

00:18:08,080 --> 00:18:14,400
and what you need to set there there are

00:18:11,440 --> 00:18:15,919
some default values so you if you want

00:18:14,400 --> 00:18:18,000
to just deploy it

00:18:15,919 --> 00:18:19,039
you can use default values it will

00:18:18,000 --> 00:18:22,240
actually

00:18:19,039 --> 00:18:24,160
deploy for you the certification

00:18:22,240 --> 00:18:28,320
authority

00:18:24,160 --> 00:18:32,559
if you don't specify one and

00:18:28,320 --> 00:18:36,080
it will also deploy their own uh

00:18:32,559 --> 00:18:39,120
fed message hub and uh rapid mq cluster

00:18:36,080 --> 00:18:41,679
if to be able

00:18:39,120 --> 00:18:44,480
to send the messages if you don't uh

00:18:41,679 --> 00:18:44,480
specify one

00:18:47,120 --> 00:18:51,440
the last part last thing we did with was

00:18:49,919 --> 00:18:52,640
the testing deployment in centers

00:18:51,440 --> 00:18:54,799
openshift cluster

00:18:52,640 --> 00:18:56,400
took us a few days to actually have it

00:18:54,799 --> 00:19:00,160
deployed because there was

00:18:56,400 --> 00:19:04,080
some issue we didn't saw before

00:19:00,160 --> 00:19:08,160
but at the end we got it running

00:19:04,080 --> 00:19:11,120
we didn't we let the center stream

00:19:08,160 --> 00:19:11,520
deemed to test it because they know how

00:19:11,120 --> 00:19:13,919
this

00:19:11,520 --> 00:19:15,520
should work we actually did on little

00:19:13,919 --> 00:19:19,039
deployment

00:19:15,520 --> 00:19:20,960
and it was really nice to have it

00:19:19,039 --> 00:19:24,400
and see that everything is look

00:19:20,960 --> 00:19:28,880
everything works like it should

00:19:24,400 --> 00:19:32,799
so okay we have yeah

00:19:28,880 --> 00:19:36,080
okay here is uh the things that we

00:19:32,799 --> 00:19:38,960
want to work on next

00:19:36,080 --> 00:19:40,000
there is another initiative in the cp

00:19:38,960 --> 00:19:44,160
backlog

00:19:40,000 --> 00:19:47,200
that is called the mbo mb box phase 2

00:19:44,160 --> 00:19:50,240
which will take care of this not sure if

00:19:47,200 --> 00:19:51,200
we will be in in the the same team will

00:19:50,240 --> 00:19:55,840
be

00:19:51,200 --> 00:19:55,840
in this but you will see

00:19:56,160 --> 00:20:00,480
so the first thing is make it available

00:19:58,799 --> 00:20:02,240
in public operator repository

00:20:00,480 --> 00:20:04,080
we want to be sure that it's working

00:20:02,240 --> 00:20:06,960
like it should so we are

00:20:04,080 --> 00:20:08,480
waiting for the feedback we want the

00:20:06,960 --> 00:20:11,280
automatic image built

00:20:08,480 --> 00:20:13,120
on a rallies of components if there is a

00:20:11,280 --> 00:20:14,000
new version of koji or new version of

00:20:13,120 --> 00:20:17,039
mbs

00:20:14,000 --> 00:20:18,960
we would be glad to have automatically

00:20:17,039 --> 00:20:19,600
built image and upload it to the query

00:20:18,960 --> 00:20:23,600
io

00:20:19,600 --> 00:20:28,159
so we could just just

00:20:23,600 --> 00:20:30,320
download it and use it

00:20:28,159 --> 00:20:31,520
automatic update in running operator is

00:20:30,320 --> 00:20:34,799
something that

00:20:31,520 --> 00:20:35,760
is possible we didn't have it right now

00:20:34,799 --> 00:20:39,440
because

00:20:35,760 --> 00:20:42,400
without automatic image building it

00:20:39,440 --> 00:20:46,000
doesn't make sense

00:20:42,400 --> 00:20:48,240
so if you get the image there

00:20:46,000 --> 00:20:50,320
it should automatically deploy but this

00:20:48,240 --> 00:20:55,120
is the future i think

00:20:50,320 --> 00:20:56,559
not now not working right now

00:20:55,120 --> 00:20:58,559
we need to do some openshift

00:20:56,559 --> 00:21:01,200
optimization

00:20:58,559 --> 00:21:02,000
which will be based on the feedback from

00:21:01,200 --> 00:21:05,520
the center stream

00:21:02,000 --> 00:21:08,080
team fedora super messaging support for

00:21:05,520 --> 00:21:08,799
mbs the mbs is still using fed message

00:21:08,080 --> 00:21:11,440
and there

00:21:08,799 --> 00:21:11,840
there have plans for fedora messaging

00:21:11,440 --> 00:21:15,039
but

00:21:11,840 --> 00:21:17,840
didn't have the time to

00:21:15,039 --> 00:21:18,799
look at it yet and the last thing is the

00:21:17,840 --> 00:21:23,919
master component

00:21:18,799 --> 00:21:27,600
this should be a compion a component for

00:21:23,919 --> 00:21:30,880
deploying the whole thing in one

00:21:27,600 --> 00:21:31,679
step right now you need to do deployment

00:21:30,880 --> 00:21:34,080
uh

00:21:31,679 --> 00:21:34,880
by component by component but this

00:21:34,080 --> 00:21:39,360
should

00:21:34,880 --> 00:21:39,360
help you to deploy everything at once

00:21:39,440 --> 00:21:46,080
okay i think this is my last

00:21:42,840 --> 00:21:48,640
slide okay so i will look at the

00:21:46,080 --> 00:21:48,640
question

00:21:50,320 --> 00:21:57,039
oh okay uh i see from neil

00:21:53,840 --> 00:21:59,039
that there is uh this kit for a solution

00:21:57,039 --> 00:22:00,480
with this kit because this was uh

00:21:59,039 --> 00:22:03,280
requested by the

00:22:00,480 --> 00:22:03,840
center stream team they didn't needed

00:22:03,280 --> 00:22:07,520
this kit

00:22:03,840 --> 00:22:10,559
they just wanted the module building

00:22:07,520 --> 00:22:14,159
so this is why it is

00:22:10,559 --> 00:22:17,919
but uh in the future there is

00:22:14,159 --> 00:22:21,600
option that we actually create uh

00:22:17,919 --> 00:22:23,679
operators for another applications we

00:22:21,600 --> 00:22:25,280
use in the infrastructure it will be

00:22:23,679 --> 00:22:28,960
much easier to deploy them

00:22:25,280 --> 00:22:32,159
in the in our own infra but

00:22:28,960 --> 00:22:35,200
this is just uh just an

00:22:32,159 --> 00:22:38,720
idea not sure if we will

00:22:35,200 --> 00:22:41,840
go with it and where we find the time to

00:22:38,720 --> 00:22:41,840
do it

00:22:42,080 --> 00:22:45,280
there are no other operators for data

00:22:44,559 --> 00:22:48,000
services

00:22:45,280 --> 00:22:48,960
just like i said we it will be nice to

00:22:48,000 --> 00:22:52,480
have them

00:22:48,960 --> 00:22:56,159
this was the first operator in the cp

00:22:52,480 --> 00:22:59,360
team we created so it will be nice to

00:22:56,159 --> 00:23:02,640
have so half another

00:22:59,360 --> 00:23:06,000
for let's say this git

00:23:02,640 --> 00:23:09,039
or not sure what other

00:23:06,000 --> 00:23:12,080
data gripper data number some

00:23:09,039 --> 00:23:16,320
services some other services

00:23:12,080 --> 00:23:19,120
pago operator would be would be cool

00:23:16,320 --> 00:23:20,240
not sure if this will be part of the cpu

00:23:19,120 --> 00:23:23,280
team because

00:23:20,240 --> 00:23:26,559
we want to get rid of pagor

00:23:23,280 --> 00:23:30,159
we will we want to just set uh

00:23:26,559 --> 00:23:32,400
used or not to get rid but we

00:23:30,159 --> 00:23:37,840
don't want to make any so not sure if we

00:23:32,400 --> 00:23:37,840
will do any other work for it

00:23:37,919 --> 00:23:42,400
but it will be a nice nice idea neil

00:23:48,840 --> 00:23:55,520
um at the first glance the

00:23:52,480 --> 00:23:59,679
operators looks pretty tricky

00:23:55,520 --> 00:23:59,679
um if uh

00:23:59,840 --> 00:24:06,080
if we started looking i was really glad

00:24:03,200 --> 00:24:09,520
that we have leonardo in the team

00:24:06,080 --> 00:24:12,080
because he actually

00:24:09,520 --> 00:24:14,320
had some experience with kubernetes

00:24:12,080 --> 00:24:18,000
operators

00:24:14,320 --> 00:24:21,039
but but at the start

00:24:18,000 --> 00:24:22,880
i was just lost i didn't know where to

00:24:21,039 --> 00:24:27,279
start what to do and

00:24:22,880 --> 00:24:30,960
just tried to use the work that was

00:24:27,279 --> 00:24:33,919
done in other operators so just

00:24:30,960 --> 00:24:33,919
work go with it

00:24:39,200 --> 00:24:45,600
and zipper papers were parkour

00:24:42,320 --> 00:24:48,720
yeah as leo said it could be used

00:24:45,600 --> 00:24:52,080
but it could be used for the operator

00:24:48,720 --> 00:24:56,159
but for some degree

00:24:52,080 --> 00:24:59,360
we actually i'm not sure if we used

00:24:56,159 --> 00:25:01,200
any unsimple play book for the operator

00:24:59,360 --> 00:25:04,559
for mb box

00:25:01,200 --> 00:25:07,279
even if the tech is actually

00:25:04,559 --> 00:25:08,240
i think only we looked at them but

00:25:07,279 --> 00:25:11,120
didn't use

00:25:08,240 --> 00:25:11,120
anything from them

00:25:11,360 --> 00:25:18,080
but yeah because on civil base base it

00:25:15,039 --> 00:25:20,000
you can use at least some part of it

00:25:18,080 --> 00:25:22,720
some configuration some deployment

00:25:20,000 --> 00:25:25,760
things you can use the deployment config

00:25:22,720 --> 00:25:30,159
you can use the secrets the definition

00:25:25,760 --> 00:25:33,039
you can use not sure what is the

00:25:30,159 --> 00:25:33,840
image stream is only usable for the open

00:25:33,039 --> 00:25:36,960
shift so

00:25:33,840 --> 00:25:40,320
if you want to use or

00:25:36,960 --> 00:25:43,679
image stream you can but

00:25:40,320 --> 00:25:45,520
it is but uh if you want to use it

00:25:43,679 --> 00:25:47,120
also in kubernetes the midstream

00:25:45,520 --> 00:25:50,320
couldn't be used

00:25:47,120 --> 00:25:52,720
you can also use uh uh

00:25:50,320 --> 00:25:55,760
not sure how it is called uh the

00:25:52,720 --> 00:25:58,080
networking configuration

00:25:55,760 --> 00:26:00,799
the configuration itself the

00:25:58,080 --> 00:26:11,840
configuration of the app

00:26:00,799 --> 00:26:11,840
or this config deployment i think

00:26:12,159 --> 00:26:15,520
ah deployment conflict here

00:26:16,880 --> 00:26:22,480
uh yeah not sure uh operator hub but i

00:26:21,360 --> 00:26:24,960
think the operator hub

00:26:22,480 --> 00:26:25,600
is actually managed by kubernetes team

00:26:24,960 --> 00:26:28,799
so

00:26:25,600 --> 00:26:30,400
i think you need to be uh

00:26:28,799 --> 00:26:32,400
kubernetes you need to work in

00:26:30,400 --> 00:26:35,120
kubernetes uh

00:26:32,400 --> 00:26:36,880
the openshift the kubernetes operator

00:26:35,120 --> 00:26:38,000
actually works in openshift out of the

00:26:36,880 --> 00:26:40,159
box so

00:26:38,000 --> 00:26:41,039
if you it's working kubernetes it should

00:26:40,159 --> 00:26:43,840
work in

00:26:41,039 --> 00:26:43,840
the open shift

00:26:45,679 --> 00:26:52,400
okay the uh the

00:26:49,039 --> 00:26:55,840
time is gone for us

00:26:52,400 --> 00:27:01,440
so thank you everyone

00:26:55,840 --> 00:27:01,440
and i will just post here

00:27:02,400 --> 00:27:09,440
one one one other link that is uh

00:27:06,880 --> 00:27:10,400
for the blog post i've wrote about the

00:27:09,440 --> 00:27:13,919
mb box

00:27:10,400 --> 00:27:16,320
itself you can there should be

00:27:13,919 --> 00:27:17,200
the same information i just shared with

00:27:16,320 --> 00:27:20,240
you

00:27:17,200 --> 00:27:30,799
you can look at them

00:27:20,240 --> 00:27:30,799

YouTube URL: https://www.youtube.com/watch?v=YKDVEdhNSW4


