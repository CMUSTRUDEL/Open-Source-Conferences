Title: Getting Buttery with Fedora
Publication date: 2020-08-29
Playlist: Nest with Fedora 2020
Description: 
	As Btrfs is a brand new technology to most Fedorans, this talk will introduce Btrfs to the community.

Presented at Nest With Fedora 2020.
Captions: 
	00:00:02,399 --> 00:00:07,440
hello everybody um

00:00:04,720 --> 00:00:10,400
my name's uh my name is neil gampa i'm

00:00:07,440 --> 00:00:15,120
here with joseph basic

00:00:10,400 --> 00:00:15,120
say hello joseph uh and dusty

00:00:15,280 --> 00:00:18,560
uh we're here to talk to you about and

00:00:17,840 --> 00:00:21,760
butter fs

00:00:18,560 --> 00:00:22,960
and you know here we go so a little bit

00:00:21,760 --> 00:00:24,560
about all of us

00:00:22,960 --> 00:00:27,039
um i'm a contributor and package

00:00:24,560 --> 00:00:29,439
maintainer i work in various systems

00:00:27,039 --> 00:00:31,760
management projects and professionally

00:00:29,439 --> 00:00:33,520
i'm a devops engineer at datto um you

00:00:31,760 --> 00:00:34,320
can reach me by twitter and my emails on

00:00:33,520 --> 00:00:37,440
there

00:00:34,320 --> 00:00:39,040
uh joseph yeah i'm uh

00:00:37,440 --> 00:00:40,640
one of the core butterfest developers

00:00:39,040 --> 00:00:43,040
i've been working on butterfest

00:00:40,640 --> 00:00:44,879
since it was uh released to the public

00:00:43,040 --> 00:00:47,680
so

00:00:44,879 --> 00:00:48,079
14 years now a really long time i

00:00:47,680 --> 00:00:52,399
currently

00:00:48,079 --> 00:00:56,079
am a software engineer at facebook and

00:00:52,399 --> 00:00:59,359
yeah that's about it hey everybody

00:00:56,079 --> 00:01:01,199
uh my name is dusty uh a big fedora

00:00:59,359 --> 00:01:01,840
contributor at least i like to think i

00:01:01,199 --> 00:01:04,000
am

00:01:01,840 --> 00:01:05,040
i'm involved in fedora cloud and fedora

00:01:04,000 --> 00:01:08,320
core os groups

00:01:05,040 --> 00:01:10,400
and employed by red hat to work on

00:01:08,320 --> 00:01:11,760
you know red hat core os and open shifty

00:01:10,400 --> 00:01:14,159
things

00:01:11,760 --> 00:01:15,840
you can find me on twitter or email or

00:01:14,159 --> 00:01:18,000
irc or

00:01:15,840 --> 00:01:19,600
many different places that dusty mabe

00:01:18,000 --> 00:01:24,000
has posted up

00:01:19,600 --> 00:01:27,040
his name that's a good way to put it

00:01:24,000 --> 00:01:28,880
um alright so for the

00:01:27,040 --> 00:01:30,720
starting point um i'm going to hand this

00:01:28,880 --> 00:01:32,400
over to joseph to

00:01:30,720 --> 00:01:34,720
you know talk about butter effects and

00:01:32,400 --> 00:01:38,320
introduce it to the to the wider world

00:01:34,720 --> 00:01:40,640
so cool

00:01:38,320 --> 00:01:41,600
uh so what is butterfest butterfest is

00:01:40,640 --> 00:01:44,720
uh

00:01:41,600 --> 00:01:45,520
new we say new but it's relatively old

00:01:44,720 --> 00:01:48,079
actually

00:01:45,520 --> 00:01:49,840
it's a copy on write file system for uh

00:01:48,079 --> 00:01:52,000
for linux and it's kind of

00:01:49,840 --> 00:01:53,280
the idea behind it is bringing some of

00:01:52,000 --> 00:01:55,840
the more advanced

00:01:53,280 --> 00:01:57,360
uh modern features to a linux file

00:01:55,840 --> 00:02:00,960
system

00:01:57,360 --> 00:02:04,079
those features being snapshotting

00:02:00,960 --> 00:02:07,040
send and receive raid support uh

00:02:04,079 --> 00:02:08,239
check summing compression encryption all

00:02:07,040 --> 00:02:10,080
these kind of like

00:02:08,239 --> 00:02:11,360
built-in things you kind of would expect

00:02:10,080 --> 00:02:13,200
a file system to do

00:02:11,360 --> 00:02:15,520
this that was kind of the goal of butter

00:02:13,200 --> 00:02:15,520
fs

00:02:18,319 --> 00:02:23,599
you wanna do next slide uh i didn't

00:02:21,360 --> 00:02:24,640
not change no there goes that's just a

00:02:23,599 --> 00:02:27,599
little laggy

00:02:24,640 --> 00:02:28,000
okay there we go uh so what else copy on

00:02:27,599 --> 00:02:31,519
right

00:02:28,000 --> 00:02:33,440
uh so this is kind of how we maintain

00:02:31,519 --> 00:02:34,720
data integrity and by that i mean like

00:02:33,440 --> 00:02:36,160
whenever you crash the box

00:02:34,720 --> 00:02:39,040
it comes back and you want to be able to

00:02:36,160 --> 00:02:42,239
still have your file system in a

00:02:39,040 --> 00:02:44,560
you know a stable mountable situation

00:02:42,239 --> 00:02:45,920
uh the way butterfs does this is every

00:02:44,560 --> 00:02:48,239
time you modify

00:02:45,920 --> 00:02:50,160
the file system it allocates a new block

00:02:48,239 --> 00:02:52,000
and copies the

00:02:50,160 --> 00:02:53,920
whole data into it you modify it and you

00:02:52,000 --> 00:02:56,239
write out the uh the new data

00:02:53,920 --> 00:02:58,159
it gets a completely new set so there's

00:02:56,239 --> 00:03:01,680
always a

00:02:58,159 --> 00:03:05,040
a consistent view of the file system

00:03:01,680 --> 00:03:08,000
on disk at any time previous

00:03:05,040 --> 00:03:09,519
one of the more popular versions of data

00:03:08,000 --> 00:03:12,080
consistency is journaling so that's what

00:03:09,519 --> 00:03:14,560
ext 3 and 4 and xfs do

00:03:12,080 --> 00:03:15,120
which is essentially you write metadata

00:03:14,560 --> 00:03:17,120
to this

00:03:15,120 --> 00:03:18,480
one section of the disk so you write it

00:03:17,120 --> 00:03:19,599
to there and then you write it to the

00:03:18,480 --> 00:03:21,120
original place

00:03:19,599 --> 00:03:22,959
and then you say okay once it's written

00:03:21,120 --> 00:03:24,080
to the original place you tell the

00:03:22,959 --> 00:03:26,560
journal you don't need that block

00:03:24,080 --> 00:03:26,560
anymore

00:03:27,200 --> 00:03:32,720
and so it's it's kind of it's

00:03:30,560 --> 00:03:34,400
overwrite basically so you write to the

00:03:32,720 --> 00:03:36,799
journal and that's the new place

00:03:34,400 --> 00:03:37,440
but every time you modify the metadata

00:03:36,799 --> 00:03:40,640
you write

00:03:37,440 --> 00:03:42,239
over the old location and um

00:03:40,640 --> 00:03:44,720
the one of the benefits that copy out

00:03:42,239 --> 00:03:46,720
write gives us is

00:03:44,720 --> 00:03:48,080
really really cheap snapshots because we

00:03:46,720 --> 00:03:51,200
can just create

00:03:48,080 --> 00:03:52,319
new trees every time we modify things it

00:03:51,200 --> 00:03:54,560
makes it really easy

00:03:52,319 --> 00:03:56,000
to snapshot so you get snapshots for

00:03:54,560 --> 00:03:58,720
essentially free

00:03:56,000 --> 00:04:00,159
basically every snapshot operation is

00:03:58,720 --> 00:04:00,799
the same no matter how big the file

00:04:00,159 --> 00:04:03,920
system is

00:04:00,799 --> 00:04:05,519
you just copy the route update reference

00:04:03,920 --> 00:04:08,319
counts for all the children

00:04:05,519 --> 00:04:09,519
and go so it makes it like really cheap

00:04:08,319 --> 00:04:14,480
and easy

00:04:09,519 --> 00:04:15,920
uh to create and to keep track of

00:04:14,480 --> 00:04:17,680
that because of that it's really

00:04:15,920 --> 00:04:18,639
relatively easy to move back and forth

00:04:17,680 --> 00:04:21,120
in time

00:04:18,639 --> 00:04:21,840
uh and because of this we can because of

00:04:21,120 --> 00:04:24,000
the sharing

00:04:21,840 --> 00:04:24,960
it means that we can do things like send

00:04:24,000 --> 00:04:26,720
and receive

00:04:24,960 --> 00:04:28,479
really easily and really cheaply instead

00:04:26,720 --> 00:04:30,639
of having to like walk through the

00:04:28,479 --> 00:04:32,160
entire file system and say like compare

00:04:30,639 --> 00:04:34,240
m times and that sort of thing

00:04:32,160 --> 00:04:35,919
like what rsync does we can actually

00:04:34,240 --> 00:04:36,720
like in the metadata go down and say

00:04:35,919 --> 00:04:38,800
okay

00:04:36,720 --> 00:04:40,240
these blocks aren't shared to copy the

00:04:38,800 --> 00:04:44,320
unshared blocks

00:04:40,240 --> 00:04:48,000
and it's a lot more efficient um

00:04:44,320 --> 00:04:49,680
that being said this is copy and write

00:04:48,000 --> 00:04:51,040
is not some like magical thing that just

00:04:49,680 --> 00:04:53,759
like makes everything wonderful

00:04:51,040 --> 00:04:54,720
it's just a new or not new but like a

00:04:53,759 --> 00:04:57,680
different way

00:04:54,720 --> 00:04:58,320
of maintaining data consistency and so

00:04:57,680 --> 00:05:00,160
there's

00:04:58,320 --> 00:05:02,320
you know trade-offs for everything with

00:05:00,160 --> 00:05:05,440
file systems and

00:05:02,320 --> 00:05:06,960
we get really nice cheap efficient uh

00:05:05,440 --> 00:05:07,840
snapshots and that sort of thing but it

00:05:06,960 --> 00:05:10,160
still doesn't

00:05:07,840 --> 00:05:12,000
protect you really from bad hardware and

00:05:10,160 --> 00:05:14,800
that sort of thing so it's not really

00:05:12,000 --> 00:05:16,720
one of those things these sort of data

00:05:14,800 --> 00:05:19,840
integrity things that we have and but

00:05:16,720 --> 00:05:21,039
inside butterfs it's not an excuse for

00:05:19,840 --> 00:05:24,160
you to just ignore

00:05:21,039 --> 00:05:26,720
good data maintenance

00:05:24,160 --> 00:05:27,280
which is to say backups you should still

00:05:26,720 --> 00:05:29,440
you know

00:05:27,280 --> 00:05:30,720
be backing up your stuff you still have

00:05:29,440 --> 00:05:31,199
the single point of failure over your

00:05:30,720 --> 00:05:33,199
disk

00:05:31,199 --> 00:05:34,320
right there's only so much a file system

00:05:33,199 --> 00:05:35,680
is ever going to be able to do to

00:05:34,320 --> 00:05:39,840
protect you from

00:05:35,680 --> 00:05:39,840
bad hardware

00:05:41,280 --> 00:05:44,560
uh so how big can brfs get so you know

00:05:44,080 --> 00:05:46,560
it's

00:05:44,560 --> 00:05:48,479
kind of standard boring 64-bit file

00:05:46,560 --> 00:05:50,160
system xfs is like this

00:05:48,479 --> 00:05:51,840
most modern file systems like are like

00:05:50,160 --> 00:05:54,320
this will

00:05:51,840 --> 00:05:56,639
support up to a max file volume size of

00:05:54,320 --> 00:06:00,560
16 exabytes

00:05:56,639 --> 00:06:04,240
um yeah it's a lot of data

00:06:00,560 --> 00:06:05,759
but hopefully you don't ever

00:06:04,240 --> 00:06:07,280
really have a file system this big

00:06:05,759 --> 00:06:10,639
because it results in other

00:06:07,280 --> 00:06:12,880
interesting problems but yeah

00:06:10,639 --> 00:06:13,759
it's like i said it's a modern file

00:06:12,880 --> 00:06:15,600
system most

00:06:13,759 --> 00:06:17,039
file systems kind of do this the only

00:06:15,600 --> 00:06:19,600
exception really is um

00:06:17,039 --> 00:06:20,319
ext4 and that's just because the way

00:06:19,600 --> 00:06:24,160
they had to

00:06:20,319 --> 00:06:26,319
iterate on ext3 they have like 48 bit

00:06:24,160 --> 00:06:28,319
for their addressable size because

00:06:26,319 --> 00:06:29,759
that's as much space as they had in the

00:06:28,319 --> 00:06:32,160
super block at the time

00:06:29,759 --> 00:06:32,880
i want to say that that could be yeah

00:06:32,160 --> 00:06:35,520
yeah they did

00:06:32,880 --> 00:06:37,039
they did a recently a recently i say

00:06:35,520 --> 00:06:39,759
it's been like three years now

00:06:37,039 --> 00:06:42,000
they did a uh um an on disk format

00:06:39,759 --> 00:06:44,479
change to switch to 64-bit

00:06:42,000 --> 00:06:46,479
um super block and that was a backwards

00:06:44,479 --> 00:06:50,160
incompatible change

00:06:46,479 --> 00:06:51,840
right so yeah and even before i mean 48

00:06:50,160 --> 00:06:55,360
bits like you're still talking

00:06:51,840 --> 00:06:57,520
a ridiculously huge volume like yeah

00:06:55,360 --> 00:06:58,880
maybe a problem in 30 or 40 years so

00:06:57,520 --> 00:07:00,560
it's not a problem now

00:06:58,880 --> 00:07:03,039
i could say from personal experience you

00:07:00,560 --> 00:07:06,639
probably don't want to approach

00:07:03,039 --> 00:07:08,000
even a quarter of this size on a single

00:07:06,639 --> 00:07:10,000
file system

00:07:08,000 --> 00:07:11,759
because because bad things tend to

00:07:10,000 --> 00:07:13,440
happen when you get that big

00:07:11,759 --> 00:07:14,960
like i don't care what file system

00:07:13,440 --> 00:07:16,240
you're using bad things happen when you

00:07:14,960 --> 00:07:17,919
get that big

00:07:16,240 --> 00:07:19,440
yeah it's a matter of testing and that

00:07:17,919 --> 00:07:22,240
sort of thing like we

00:07:19,440 --> 00:07:24,319
so whatsapp has recently started using

00:07:22,240 --> 00:07:26,000
butterfs for their backing store for

00:07:24,319 --> 00:07:28,960
offline messages

00:07:26,000 --> 00:07:30,319
and they fill up they raid together two

00:07:28,960 --> 00:07:32,479
relatively large

00:07:30,319 --> 00:07:35,039
or no they rate together four relatively

00:07:32,479 --> 00:07:38,479
large nvme drives for a giant

00:07:35,039 --> 00:07:39,520
16 terabyte file system and they fill

00:07:38,479 --> 00:07:41,840
that thing up

00:07:39,520 --> 00:07:43,360
and it's exposed a lot of interesting

00:07:41,840 --> 00:07:45,199
corner cases

00:07:43,360 --> 00:07:47,919
so like you know file system developers

00:07:45,199 --> 00:07:51,039
kind of we test a lot of things but

00:07:47,919 --> 00:07:52,479
um stress testing is kind of where we

00:07:51,039 --> 00:07:55,599
lack and so

00:07:52,479 --> 00:07:59,840
we can do these things but your mileage

00:07:55,599 --> 00:07:59,840
may vary

00:08:00,639 --> 00:08:04,240
so this is sort of a list of the

00:08:02,560 --> 00:08:05,759
features of butterfest that joseph has

00:08:04,240 --> 00:08:08,800
actually kind of just

00:08:05,759 --> 00:08:11,039
touched on briefly throughout the

00:08:08,800 --> 00:08:12,960
earlier slides

00:08:11,039 --> 00:08:14,319
no reason to really read off all of them

00:08:12,960 --> 00:08:18,800
but the the

00:08:14,319 --> 00:08:20,879
16 exabytes is is the maximum size but

00:08:18,800 --> 00:08:22,879
the the most important thing here is

00:08:20,879 --> 00:08:25,120
that um

00:08:22,879 --> 00:08:26,960
this is this demonstrates like all the

00:08:25,120 --> 00:08:30,800
different capabilities that it has

00:08:26,960 --> 00:08:31,680
uh across the board for a variety of use

00:08:30,800 --> 00:08:34,959
cases

00:08:31,680 --> 00:08:36,880
um including the sub volumes and

00:08:34,959 --> 00:08:37,519
snapshots which then i'll hand back to

00:08:36,880 --> 00:08:39,440
joseph

00:08:37,519 --> 00:08:41,360
for talking a little bit more about that

00:08:39,440 --> 00:08:44,880
specifically

00:08:41,360 --> 00:08:47,680
right so every uh

00:08:44,880 --> 00:08:50,640
every file system or every file system

00:08:47,680 --> 00:08:53,279
tree inside butterfs has its own

00:08:50,640 --> 00:08:54,000
b tree so that's what a sub volume is

00:08:53,279 --> 00:08:57,680
every sub

00:08:54,000 --> 00:09:00,320
volume is its own essentially inode name

00:08:57,680 --> 00:09:01,279
space everything it's it's completely

00:09:00,320 --> 00:09:04,959
discrete

00:09:01,279 --> 00:09:07,440
b tree and so so volumes exist

00:09:04,959 --> 00:09:08,720
from a practical standpoint to be

00:09:07,440 --> 00:09:11,600
snapshot

00:09:08,720 --> 00:09:12,800
points right so for example you would

00:09:11,600 --> 00:09:15,440
like

00:09:12,800 --> 00:09:16,000
make your home you know each individual

00:09:15,440 --> 00:09:18,160
user

00:09:16,000 --> 00:09:20,240
its own sub volume so they could

00:09:18,160 --> 00:09:20,959
snapshot individual sub volumes or you

00:09:20,240 --> 00:09:23,760
could do

00:09:20,959 --> 00:09:24,320
home to snapshot entire like everybody's

00:09:23,760 --> 00:09:25,519
stuff

00:09:24,320 --> 00:09:27,440
that sort of thing it's it's kind of

00:09:25,519 --> 00:09:28,160
where you want to have discrete snapshot

00:09:27,440 --> 00:09:29,920
points

00:09:28,160 --> 00:09:31,440
is where you want to have sub volumes

00:09:29,920 --> 00:09:34,560
the other use case is

00:09:31,440 --> 00:09:36,959
because they are their own b

00:09:34,560 --> 00:09:38,959
trees sometimes for like application

00:09:36,959 --> 00:09:41,839
specific workloads it's handy to have

00:09:38,959 --> 00:09:43,360
different sub volumes just to spread out

00:09:41,839 --> 00:09:45,920
tasks

00:09:43,360 --> 00:09:46,720
kind of the example is this whatsapp use

00:09:45,920 --> 00:09:50,160
case

00:09:46,720 --> 00:09:53,279
where they have they kind of shard

00:09:50,160 --> 00:09:54,080
out messages based on user ids so they

00:09:53,279 --> 00:09:57,120
have a different

00:09:54,080 --> 00:09:58,000
task managing a different part section

00:09:57,120 --> 00:09:59,600
of the shard

00:09:58,000 --> 00:10:01,440
and each of these shards have their own

00:09:59,600 --> 00:10:02,880
sub volumes and this

00:10:01,440 --> 00:10:04,640
cuts down on the amount of lock

00:10:02,880 --> 00:10:06,880
contention because

00:10:04,640 --> 00:10:08,160
the every time you have to like modify

00:10:06,880 --> 00:10:09,040
the b tree you have to take locks down

00:10:08,160 --> 00:10:11,519
the b tree

00:10:09,040 --> 00:10:13,120
and so splitting up your sub volume like

00:10:11,519 --> 00:10:14,720
this is a nice way to spread across the

00:10:13,120 --> 00:10:18,160
load

00:10:14,720 --> 00:10:21,040
um but how do some zone volumes interact

00:10:18,160 --> 00:10:22,079
with the file like act just like a

00:10:21,040 --> 00:10:25,200
directory

00:10:22,079 --> 00:10:28,160
the only kind of special thing is

00:10:25,200 --> 00:10:29,360
that users can't remove their own sub

00:10:28,160 --> 00:10:32,399
volumes

00:10:29,360 --> 00:10:33,600
or snapshots without a special mount

00:10:32,399 --> 00:10:36,240
option

00:10:33,600 --> 00:10:36,800
um and they also they look a little bit

00:10:36,240 --> 00:10:40,320
funky

00:10:36,800 --> 00:10:42,560
because inode numbers are

00:10:40,320 --> 00:10:43,600
unique to the sub volumes itself so if

00:10:42,560 --> 00:10:45,120
you like

00:10:43,600 --> 00:10:46,560
if you're kind of used to like i know

00:10:45,120 --> 00:10:47,600
numbers being unique across the file

00:10:46,560 --> 00:10:48,320
system that doesn't really happen in

00:10:47,600 --> 00:10:52,079
butterfs

00:10:48,320 --> 00:10:55,120
if you have you know a new sub volume

00:10:52,079 --> 00:10:57,360
you create file foo that's going to have

00:10:55,120 --> 00:10:59,600
uh i know number of 257 if you create a

00:10:57,360 --> 00:11:00,000
new sub volume in that sub volume and

00:10:59,600 --> 00:11:01,440
create

00:11:00,000 --> 00:11:04,640
foo and that sub volume it's gonna have

00:11:01,440 --> 00:11:05,760
257. it's it's one of those weird unique

00:11:04,640 --> 00:11:08,880
things

00:11:05,760 --> 00:11:09,519
um uh and then from a user from like an

00:11:08,880 --> 00:11:11,200
rsync

00:11:09,519 --> 00:11:12,880
perspective the thing that we did a long

00:11:11,200 --> 00:11:14,640
time ago is we make these sub volumes

00:11:12,880 --> 00:11:16,000
appear to be on a different device

00:11:14,640 --> 00:11:18,560
and this was one of those things that

00:11:16,000 --> 00:11:19,600
was implemented to help rsync so it knew

00:11:18,560 --> 00:11:22,160
the difference between

00:11:19,600 --> 00:11:23,839
a sub volume and would not walk into

00:11:22,160 --> 00:11:27,360
snapshots and like

00:11:23,839 --> 00:11:29,040
back up millions of the same thing

00:11:27,360 --> 00:11:32,399
but generally speaking sub volumes kind

00:11:29,040 --> 00:11:32,399
of behave just like directories

00:11:33,440 --> 00:11:37,519
uh how big are the snapshots sorry i'm

00:11:35,760 --> 00:11:40,000
looking at questions in here

00:11:37,519 --> 00:11:42,079
uh how big are the snapshots are the

00:11:40,000 --> 00:11:44,560
same size as the data being snapshots no

00:11:42,079 --> 00:11:46,240
so it's because of the copy on write if

00:11:44,560 --> 00:11:48,240
you create a snapshot

00:11:46,240 --> 00:11:49,920
it's just an extra block it's an extra

00:11:48,240 --> 00:11:51,040
root so whatever your block size is it's

00:11:49,920 --> 00:11:54,399
like 16k

00:11:51,040 --> 00:11:55,839
and so as you go ahead now there was

00:11:54,399 --> 00:11:58,000
actually a question earlier that i

00:11:55,839 --> 00:12:00,399
realized i just missed those two of them

00:11:58,000 --> 00:12:01,040
one was what is the number of disks

00:12:00,399 --> 00:12:02,639
limited

00:12:01,040 --> 00:12:04,240
is that tested and also there was

00:12:02,639 --> 00:12:06,079
another one about what does seeding from

00:12:04,240 --> 00:12:09,279
other file systems mean

00:12:06,079 --> 00:12:11,920
okay so there is a disk limit because in

00:12:09,279 --> 00:12:13,760
the way butterfs handles multiple disks

00:12:11,920 --> 00:12:17,200
it has a mapping tree basically

00:12:13,760 --> 00:12:19,120
and that's how it bootstraps itself like

00:12:17,200 --> 00:12:20,800
everything inside butterfs just uses a

00:12:19,120 --> 00:12:23,680
logical byte number and that's just

00:12:20,800 --> 00:12:24,320
zero to the length of the disk right but

00:12:23,680 --> 00:12:26,320
then

00:12:24,320 --> 00:12:27,680
it has this mapping that says okay byte

00:12:26,320 --> 00:12:30,160
number one mag

00:12:27,680 --> 00:12:31,600
is actually on this disk at this real

00:12:30,160 --> 00:12:33,680
offset

00:12:31,600 --> 00:12:35,200
because of that we have to have the

00:12:33,680 --> 00:12:36,959
actual disk mappings

00:12:35,200 --> 00:12:39,760
in the super block itself and we have a

00:12:36,959 --> 00:12:43,920
limited size in our super block so

00:12:39,760 --> 00:12:46,720
i think the limit to 128 discs

00:12:43,920 --> 00:12:48,079
i want to say that's what it is uh we we

00:12:46,720 --> 00:12:51,920
had this weird case

00:12:48,079 --> 00:12:53,279
like 2006 like within months of

00:12:51,920 --> 00:12:55,440
butterfest coming out

00:12:53,279 --> 00:12:57,839
where somebody took this weird dell

00:12:55,440 --> 00:13:00,480
thing that had 256

00:12:57,839 --> 00:13:01,920
discs and tried to make a butterfs file

00:13:00,480 --> 00:13:04,639
system using all of them

00:13:01,920 --> 00:13:05,440
and it wouldn't let you um i think we

00:13:04,639 --> 00:13:08,560
figured out the

00:13:05,440 --> 00:13:11,120
the actual logical limit is 128

00:13:08,560 --> 00:13:12,800
disks and that's because of this mapping

00:13:11,120 --> 00:13:14,320
thing that you have to be able to

00:13:12,800 --> 00:13:17,120
bootstrap in order for us to be able to

00:13:14,320 --> 00:13:20,320
access the rest of the file system

00:13:17,120 --> 00:13:22,000
um and then seed devices there are like

00:13:20,320 --> 00:13:24,639
a special read-only device

00:13:22,000 --> 00:13:25,760
uh that's you can use so you create the

00:13:24,639 --> 00:13:27,440
file system

00:13:25,760 --> 00:13:29,680
and you mark it as a seed device and

00:13:27,440 --> 00:13:31,760
this is no longer

00:13:29,680 --> 00:13:34,399
uh readable it's not only a ride wall

00:13:31,760 --> 00:13:36,000
sorry it's only readable

00:13:34,399 --> 00:13:38,560
no longer readable would be very bad

00:13:36,000 --> 00:13:42,560
joseph yes that would be awful

00:13:38,560 --> 00:13:45,760
uh so the use case for this is for

00:13:42,560 --> 00:13:47,839
um secure enclaves we actually use this

00:13:45,760 --> 00:13:49,040
with our for facebook we have these

00:13:47,839 --> 00:13:52,160
things called pops

00:13:49,040 --> 00:13:53,760
um or uh

00:13:52,160 --> 00:13:56,240
yeah i think they're called anyway so

00:13:53,760 --> 00:13:57,360
they're special machines that we ship to

00:13:56,240 --> 00:13:58,880
isps

00:13:57,360 --> 00:14:00,480
places we don't trust right we don't

00:13:58,880 --> 00:14:00,880
control the infrastructure they just sit

00:14:00,480 --> 00:14:02,959
in an

00:14:00,880 --> 00:14:04,880
isp so like i've got like four sitting

00:14:02,959 --> 00:14:08,079
down the road for me and raleigh

00:14:04,880 --> 00:14:09,920
um so we need to val

00:14:08,079 --> 00:14:12,079
we need to make sure that nobody can

00:14:09,920 --> 00:14:14,320
mess with these things and so

00:14:12,079 --> 00:14:15,199
the thing will boot up and it has this

00:14:14,320 --> 00:14:18,240
encrypted

00:14:15,199 --> 00:14:21,760
seed device and then from there

00:14:18,240 --> 00:14:24,079
we add into it because you can add

00:14:21,760 --> 00:14:26,079
devices to c devices you add a

00:14:24,079 --> 00:14:27,760
copy on write device to this c device

00:14:26,079 --> 00:14:28,240
that's also encrypted so any writes that

00:14:27,760 --> 00:14:30,639
happen

00:14:28,240 --> 00:14:32,399
go to this other device but never to the

00:14:30,639 --> 00:14:35,519
actual seed device

00:14:32,399 --> 00:14:36,720
so when you reboot the the the scratch

00:14:35,519 --> 00:14:39,839
space is just deleted

00:14:36,720 --> 00:14:40,720
and the c devices in this exi the same

00:14:39,839 --> 00:14:43,920
thing

00:14:40,720 --> 00:14:46,160
another use case we use this for haves

00:14:43,920 --> 00:14:47,279
have used this for us with provisioning

00:14:46,160 --> 00:14:49,440
uh where

00:14:47,279 --> 00:14:51,199
you have like a raw image that's your c

00:14:49,440 --> 00:14:53,760
device you bring it up

00:14:51,199 --> 00:14:55,760
you add in the root device you delete

00:14:53,760 --> 00:14:59,120
the seed device which then copies

00:14:55,760 --> 00:15:01,600
the extra the the information to

00:14:59,120 --> 00:15:02,399
the right device and then you can keep

00:15:01,600 --> 00:15:04,240
on going

00:15:02,399 --> 00:15:05,600
so those are kind of like how we use the

00:15:04,240 --> 00:15:08,079
seed

00:15:05,600 --> 00:15:09,920
cool uh so i guess that's also like the

00:15:08,079 --> 00:15:10,880
fundamentals of how butterfest convert

00:15:09,920 --> 00:15:12,480
works then

00:15:10,880 --> 00:15:13,920
because that sounds very much like the

00:15:12,480 --> 00:15:16,480
same process for converting

00:15:13,920 --> 00:15:17,920
from one file system to butterfast yeah

00:15:16,480 --> 00:15:19,519
so convert is a is

00:15:17,920 --> 00:15:22,000
relatively similar so what we do with

00:15:19,519 --> 00:15:23,040
convert is basically create a butterfs

00:15:22,000 --> 00:15:25,600
file system

00:15:23,040 --> 00:15:27,040
and create extents that point at the old

00:15:25,600 --> 00:15:28,880
file system

00:15:27,040 --> 00:15:30,160
and just say okay those are special

00:15:28,880 --> 00:15:32,639
don't ever remove those

00:15:30,160 --> 00:15:34,160
and then when you do and so when it does

00:15:32,639 --> 00:15:36,079
the convert

00:15:34,160 --> 00:15:37,360
when you do the remove or whatever it

00:15:36,079 --> 00:15:39,120
goes and removes

00:15:37,360 --> 00:15:41,360
the extents for the metadata and it

00:15:39,120 --> 00:15:45,360
leaves the data the data in place

00:15:41,360 --> 00:15:49,199
okay yeah uh all right um

00:15:45,360 --> 00:15:50,560
just to kind of somehow slide back into

00:15:49,199 --> 00:15:53,440
the slide

00:15:50,560 --> 00:15:54,959
butterfest is developed by a wide

00:15:53,440 --> 00:15:58,480
variety of people

00:15:54,959 --> 00:15:59,920
long ago in the far past red hat was

00:15:58,480 --> 00:16:02,160
also part of this

00:15:59,920 --> 00:16:03,600
but today it is principally developed by

00:16:02,160 --> 00:16:07,199
folks with facebook

00:16:03,600 --> 00:16:10,560
souza um western digital and oracle

00:16:07,199 --> 00:16:12,800
um and i think at this point uh

00:16:10,560 --> 00:16:14,560
it's sort of kind of obvious why you

00:16:12,800 --> 00:16:16,720
would want to use butterfest but

00:16:14,560 --> 00:16:17,759
to make it clear like it's a great file

00:16:16,720 --> 00:16:18,880
system that's developed with the

00:16:17,759 --> 00:16:20,880
mainline kernel

00:16:18,880 --> 00:16:22,240
it takes advantage of the facilities

00:16:20,880 --> 00:16:24,800
provided within the kernel to be more

00:16:22,240 --> 00:16:27,120
efficient at doing operations on devices

00:16:24,800 --> 00:16:28,800
it's very straightforward to support in

00:16:27,120 --> 00:16:30,240
a in a linux distribution

00:16:28,800 --> 00:16:32,079
and provides a lot of advanced

00:16:30,240 --> 00:16:34,639
facilities that can be used to do all

00:16:32,079 --> 00:16:37,040
kinds of interesting

00:16:34,639 --> 00:16:38,000
user experience things with very minimal

00:16:37,040 --> 00:16:41,360
effort

00:16:38,000 --> 00:16:43,680
um and today it's used in production by

00:16:41,360 --> 00:16:45,440
as joseph has mentioned facebook it's

00:16:43,680 --> 00:16:49,040
also used in synology

00:16:45,440 --> 00:16:51,759
um ficus netgear and rock store

00:16:49,040 --> 00:16:54,240
nas devices as well as being used in

00:16:51,759 --> 00:16:56,800
open sousa and suse linux enterprise

00:16:54,240 --> 00:16:57,519
since 2014 as the default file system

00:16:56,800 --> 00:17:00,720
for

00:16:57,519 --> 00:17:04,319
operating system data and since 2018

00:17:00,720 --> 00:17:07,679
for all data in opensuse so

00:17:04,319 --> 00:17:08,079
yeah um justin do you want to talk about

00:17:07,679 --> 00:17:11,600
the

00:17:08,079 --> 00:17:13,280
facebook production stuff yeah so uh

00:17:11,600 --> 00:17:15,600
facebook production has grown really

00:17:13,280 --> 00:17:19,360
organically i like to

00:17:15,600 --> 00:17:21,439
you know i'm relatively conservative

00:17:19,360 --> 00:17:24,799
about butterfest's usage

00:17:21,439 --> 00:17:26,480
and i've sorry i don't know why that

00:17:24,799 --> 00:17:28,000
guy's on

00:17:26,480 --> 00:17:29,919
anyway uh the

00:17:28,000 --> 00:17:32,080
[Music]

00:17:29,919 --> 00:17:33,840
the there's facebook's a big company

00:17:32,080 --> 00:17:36,320
right and so a lot of engineers

00:17:33,840 --> 00:17:37,600
kind of run around trying and doing

00:17:36,320 --> 00:17:39,360
different things

00:17:37,600 --> 00:17:41,200
uh and it kind of originally started

00:17:39,360 --> 00:17:43,440
with our build servers

00:17:41,200 --> 00:17:44,240
where we do this thing where you know

00:17:43,440 --> 00:17:46,080
every

00:17:44,240 --> 00:17:48,080
patch that's applied so the code base

00:17:46,080 --> 00:17:51,280
isn't actually applied until it

00:17:48,080 --> 00:17:53,360
it builds and it passes all of its tests

00:17:51,280 --> 00:17:55,200
the way we do that is you know we check

00:17:53,360 --> 00:17:57,760
out a copy of

00:17:55,200 --> 00:17:58,960
the the root the repository apply the

00:17:57,760 --> 00:18:01,679
patch

00:17:58,960 --> 00:18:02,080
make sure it builds run the tests if it

00:18:01,679 --> 00:18:04,640
does

00:18:02,080 --> 00:18:05,120
land it and we delete the scratch space

00:18:04,640 --> 00:18:07,520
and this

00:18:05,120 --> 00:18:08,880
uh you know used to be run on xfs on

00:18:07,520 --> 00:18:12,400
like ram disks

00:18:08,880 --> 00:18:13,280
and it was real real slow you'd with uh

00:18:12,400 --> 00:18:15,120
as many

00:18:13,280 --> 00:18:16,960
developers as we have you'd end up with

00:18:15,120 --> 00:18:19,679
like queues of like two to three hours

00:18:16,960 --> 00:18:21,840
for every patch you tried to land which

00:18:19,679 --> 00:18:23,520
kind of got unwieldy

00:18:21,840 --> 00:18:26,160
so butterfs was kind of evaluated

00:18:23,520 --> 00:18:29,520
originally to solve this problem

00:18:26,160 --> 00:18:31,360
for one of our uh

00:18:29,520 --> 00:18:32,960
repos which was the android repo if i

00:18:31,360 --> 00:18:36,240
remember correctly

00:18:32,960 --> 00:18:37,760
and um and so we kind of instead of

00:18:36,240 --> 00:18:40,160
doing like these shallow

00:18:37,760 --> 00:18:42,480
get clones the idea was like snapshot

00:18:40,160 --> 00:18:43,440
like we only update the repo every 10

00:18:42,480 --> 00:18:46,480
minutes

00:18:43,440 --> 00:18:50,080
and we instead of shallow

00:18:46,480 --> 00:18:53,600
cloning we just snapshot the original

00:18:50,080 --> 00:18:57,440
apply build test remove

00:18:53,600 --> 00:19:01,120
and so that whole process

00:18:57,440 --> 00:19:03,600
took like seconds to run compared to

00:19:01,120 --> 00:19:05,200
minutes especially for the deletion so

00:19:03,600 --> 00:19:07,440
the snapshot deletions

00:19:05,200 --> 00:19:08,960
appear to be instantaneous because we'll

00:19:07,440 --> 00:19:10,320
just like say yeah we've finished and

00:19:08,960 --> 00:19:13,919
then we do it in the background

00:19:10,320 --> 00:19:14,559
so we're kind of cheating but that being

00:19:13,919 --> 00:19:17,360
said

00:19:14,559 --> 00:19:17,760
it's is significantly less heavyweight

00:19:17,360 --> 00:19:20,080
than

00:19:17,760 --> 00:19:22,240
rm minus rfing a shallow clone because

00:19:20,080 --> 00:19:24,240
you have to like remove links and that's

00:19:22,240 --> 00:19:25,679
however many files you have is however

00:19:24,240 --> 00:19:27,120
many links that you need to remove

00:19:25,679 --> 00:19:30,400
whereas snapshot delete

00:19:27,120 --> 00:19:31,840
is literally just un updating reference

00:19:30,400 --> 00:19:35,280
counts for any

00:19:31,840 --> 00:19:39,760
non-shared extents which ends up being

00:19:35,280 --> 00:19:41,840
orders magnitude smaller

00:19:39,760 --> 00:19:44,160
so it ended up being pretty fast and

00:19:41,840 --> 00:19:47,200
then from there people

00:19:44,160 --> 00:19:49,520
we started to use it

00:19:47,200 --> 00:19:50,960
and like evaluate it for like our web

00:19:49,520 --> 00:19:52,640
tier and that sort of thing because we

00:19:50,960 --> 00:19:56,720
could use compression

00:19:52,640 --> 00:19:58,559
and um you know a variety of other

00:19:56,720 --> 00:20:00,640
neat tools and feature like the

00:19:58,559 --> 00:20:02,240
snapshotting stuff was really handy so

00:20:00,640 --> 00:20:03,840
we did that and then the container guys

00:20:02,240 --> 00:20:04,240
got a hold of it and have done all sorts

00:20:03,840 --> 00:20:07,600
of

00:20:04,240 --> 00:20:09,520
horrifying things with it um and it's

00:20:07,600 --> 00:20:12,159
kind of gotten to this point where

00:20:09,520 --> 00:20:13,440
um it's our entire production

00:20:12,159 --> 00:20:16,960
environment relies on it

00:20:13,440 --> 00:20:17,919
it's the only thing that works well so i

00:20:16,960 --> 00:20:19,280
keep saying this but it's not

00:20:17,919 --> 00:20:21,200
necessarily true it's the only thing we

00:20:19,280 --> 00:20:24,720
test

00:20:21,200 --> 00:20:27,360
c group isolation with theoretically xfs

00:20:24,720 --> 00:20:29,120
will work now but at the time we were

00:20:27,360 --> 00:20:32,240
developing all this it didn't

00:20:29,120 --> 00:20:34,640
and the xd4 just can't because of how

00:20:32,240 --> 00:20:37,039
it's designed i say it can't it probably

00:20:34,640 --> 00:20:41,120
could it just would be really hard

00:20:37,039 --> 00:20:44,080
um and so because of all these other

00:20:41,120 --> 00:20:47,600
extenuating circumstances it's become

00:20:44,080 --> 00:20:49,200
what we build everything on and as it's

00:20:47,600 --> 00:20:50,799
become more ubiquitous in the fleet

00:20:49,200 --> 00:20:53,840
people have found new and

00:20:50,799 --> 00:20:57,360
you know horrifying ways to abuse it

00:20:53,840 --> 00:20:58,559
um the container the container thing was

00:20:57,360 --> 00:20:59,840
really interesting because it first

00:20:58,559 --> 00:21:01,679
started out with like yeah we're not

00:20:59,840 --> 00:21:03,600
sure if this is the right thing to do

00:21:01,679 --> 00:21:05,440
so we'll just ship loopback devices with

00:21:03,600 --> 00:21:06,400
butterfs file systems on it around

00:21:05,440 --> 00:21:08,640
everywhere

00:21:06,400 --> 00:21:09,520
so we had like millions of machines with

00:21:08,640 --> 00:21:13,039
the xd4

00:21:09,520 --> 00:21:14,640
but like every box had you know 10 to 20

00:21:13,039 --> 00:21:17,520
containers so they had like 10 to 20

00:21:14,640 --> 00:21:19,919
loopback devices with butterfs on them

00:21:17,520 --> 00:21:21,280
so that was super awesome nowadays

00:21:19,919 --> 00:21:23,919
because we have

00:21:21,280 --> 00:21:24,480
butterfest's roots we can send send and

00:21:23,919 --> 00:21:27,600
receive

00:21:24,480 --> 00:21:30,320
images which makes like

00:21:27,600 --> 00:21:31,360
has cut down on our bandwidth usage a

00:21:30,320 --> 00:21:33,760
lot

00:21:31,360 --> 00:21:35,919
for sending container updates and that

00:21:33,760 --> 00:21:37,600
sort of stuff

00:21:35,919 --> 00:21:38,960
and like i said because our entire

00:21:37,600 --> 00:21:42,400
production environment involves

00:21:38,960 --> 00:21:45,440
revolves around it the workloads

00:21:42,400 --> 00:21:48,240
that are running on butterfs are very

00:21:45,440 --> 00:21:49,919
dynamic you know kind of one of the

00:21:48,240 --> 00:21:52,480
arguments

00:21:49,919 --> 00:21:54,400
early on was like butter ffs usage at

00:21:52,480 --> 00:21:57,520
facebook is like not

00:21:54,400 --> 00:22:00,799
the same as how a user would use it

00:21:57,520 --> 00:22:02,880
which is you know relatively fair but

00:22:00,799 --> 00:22:05,120
the way we use it is way worse than a

00:22:02,880 --> 00:22:07,360
user would ever use it

00:22:05,120 --> 00:22:09,200
and there's also the fact that we use it

00:22:07,360 --> 00:22:10,559
on all our dev vms so like these are

00:22:09,200 --> 00:22:13,039
developers they're just

00:22:10,559 --> 00:22:14,799
writing code building things running

00:22:13,039 --> 00:22:15,600
tests which is how a fedora user is

00:22:14,799 --> 00:22:18,960
going to use

00:22:15,600 --> 00:22:21,600
their file system right and

00:22:18,960 --> 00:22:24,080
all of our dev vms are all butterfs file

00:22:21,600 --> 00:22:24,080
systems

00:22:24,480 --> 00:22:27,840
all right

00:22:28,640 --> 00:22:32,080
uh yeah so some of the big wins

00:22:31,280 --> 00:22:36,240
compression

00:22:32,080 --> 00:22:37,760
obviously was huge uh we

00:22:36,240 --> 00:22:40,080
again this is another thing we're like

00:22:37,760 --> 00:22:42,720
trying to

00:22:40,080 --> 00:22:43,280
you know show that facebook usage

00:22:42,720 --> 00:22:45,600
actually

00:22:43,280 --> 00:22:47,520
mirrors fedora usage in a lot of ways we

00:22:45,600 --> 00:22:49,440
buy probably the worst solid-state

00:22:47,520 --> 00:22:50,880
drives you could possibly buy

00:22:49,440 --> 00:22:53,360
you know ones that you would find in

00:22:50,880 --> 00:22:55,679
consumer laptops essentially

00:22:53,360 --> 00:22:57,120
and uh the compression was one of the

00:22:55,679 --> 00:22:58,000
things that really helped turn around

00:22:57,120 --> 00:23:00,480
the burn rates

00:22:58,000 --> 00:23:01,440
for these solid-state drives uh we were

00:23:00,480 --> 00:23:03,840
kind of burning through them pretty

00:23:01,440 --> 00:23:03,840
quickly

00:23:03,919 --> 00:23:08,320
the snapshots i've already mentioned

00:23:06,080 --> 00:23:10,080
really dramatically improved build and

00:23:08,320 --> 00:23:12,080
test times for build systems and a

00:23:10,080 --> 00:23:14,400
variety of other things send and receive

00:23:12,080 --> 00:23:16,880
is based on snapshotting rate and so

00:23:14,400 --> 00:23:18,960
that's really helped our container

00:23:16,880 --> 00:23:20,480
story and how we ship things and ship

00:23:18,960 --> 00:23:22,240
updates

00:23:20,480 --> 00:23:24,320
one of the things more recently um

00:23:22,240 --> 00:23:27,039
dennis one of the guys who worked

00:23:24,320 --> 00:23:29,760
for facebook who uh one of the things we

00:23:27,039 --> 00:23:31,600
noticed with uh

00:23:29,760 --> 00:23:34,799
with these crappy solid state drives

00:23:31,600 --> 00:23:38,000
plus c-group isolation is that discard

00:23:34,799 --> 00:23:40,480
uh performance varies widely on

00:23:38,000 --> 00:23:41,919
uh your solid state drives from from

00:23:40,480 --> 00:23:43,360
drive to drive from manufacturer to

00:23:41,919 --> 00:23:45,440
manufacturer

00:23:43,360 --> 00:23:46,480
oftentimes solid-state drives will go

00:23:45,440 --> 00:23:49,760
out you know

00:23:46,480 --> 00:23:53,120
stop responding for two to five seconds

00:23:49,760 --> 00:23:55,840
if they get the right discard

00:23:53,120 --> 00:23:58,320
area so this is kind of a thing that we

00:23:55,840 --> 00:24:00,320
had to really think hard about

00:23:58,320 --> 00:24:01,600
so async discard was a solution that we

00:24:00,320 --> 00:24:05,919
came up with which was

00:24:01,600 --> 00:24:09,039
move discard outside of any hot path

00:24:05,919 --> 00:24:12,480
um and uh

00:24:09,039 --> 00:24:13,919
rate limit it because ext forex fest and

00:24:12,480 --> 00:24:16,080
butterfest did this thing where it's

00:24:13,919 --> 00:24:16,799
like okay we have all the free space now

00:24:16,080 --> 00:24:19,520
we need to go

00:24:16,799 --> 00:24:21,440
discard all of the free space all at a

00:24:19,520 --> 00:24:22,960
time an async discard says okay well

00:24:21,440 --> 00:24:24,240
we're going to make sure it's only of a

00:24:22,960 --> 00:24:26,640
certain size

00:24:24,240 --> 00:24:28,480
and then we only do a certain amount

00:24:26,640 --> 00:24:29,600
over a given period of time in order to

00:24:28,480 --> 00:24:32,400
not affect the

00:24:29,600 --> 00:24:33,600
overall workflow workload this was kind

00:24:32,400 --> 00:24:36,799
of the last

00:24:33,600 --> 00:24:38,640
part of our c group isolation work where

00:24:36,799 --> 00:24:40,159
discards could drastically affect

00:24:38,640 --> 00:24:42,480
latencies

00:24:40,159 --> 00:24:47,840
if it went badly enough and this kind of

00:24:42,480 --> 00:24:47,840
solved that for us

00:24:50,159 --> 00:24:56,640
uh it's not always been awesome uh

00:24:53,440 --> 00:24:57,919
not everything is great uh

00:24:56,640 --> 00:25:01,200
we're you know we're still not awesome

00:24:57,919 --> 00:25:04,320
for databases uh kind of

00:25:01,200 --> 00:25:05,039
so we still use a lot of mysql stuff and

00:25:04,320 --> 00:25:08,320
a lot of it's

00:25:05,039 --> 00:25:08,799
moved on to my rocks which is the roxdb

00:25:08,320 --> 00:25:12,720
based

00:25:08,799 --> 00:25:15,120
backend for mysql and actually roxdb

00:25:12,720 --> 00:25:17,120
works real well for blood rfs with its

00:25:15,120 --> 00:25:20,080
append only

00:25:17,120 --> 00:25:21,039
write behavior roxdb is fantastic on

00:25:20,080 --> 00:25:24,880
butterfs

00:25:21,039 --> 00:25:27,760
the the old-fashioned nodb overwrites

00:25:24,880 --> 00:25:28,640
sort of thing does not work awesome for

00:25:27,760 --> 00:25:32,080
butter fs

00:25:28,640 --> 00:25:34,960
uh because of copy on writes

00:25:32,080 --> 00:25:36,720
any overwrite sort of behavior is gonna

00:25:34,960 --> 00:25:39,840
end up with a lot of fragmentation

00:25:36,720 --> 00:25:43,279
and ends up uh super super sad so

00:25:39,840 --> 00:25:45,520
again this is why uh vert images

00:25:43,279 --> 00:25:46,559
i think neil this is a later on but we

00:25:45,520 --> 00:25:50,000
recommend uh

00:25:46,559 --> 00:25:52,080
no data cow for pervert images

00:25:50,000 --> 00:25:53,520
and this is this is actually twofold uh

00:25:52,080 --> 00:25:56,320
no data cow means

00:25:53,520 --> 00:25:57,919
you can overwrite so like you get nice

00:25:56,320 --> 00:25:58,880
big pre-allocated chunk and you just

00:25:57,919 --> 00:26:00,080
overwrite you don't get the

00:25:58,880 --> 00:26:03,279
fragmentation

00:26:00,080 --> 00:26:04,880
the other thing is um the way butterfs

00:26:03,279 --> 00:26:07,760
does check summing

00:26:04,880 --> 00:26:08,640
you can't change the i o in flight which

00:26:07,760 --> 00:26:11,840
we can do

00:26:08,640 --> 00:26:14,799
in the kernel but things like convert

00:26:11,840 --> 00:26:16,000
virtual stuff or databases they'd like

00:26:14,799 --> 00:26:18,400
to use odirect

00:26:16,000 --> 00:26:20,080
which the user controls the memory and

00:26:18,400 --> 00:26:22,640
there's no way that the kernel can

00:26:20,080 --> 00:26:23,440
keep the user from modifying data in

00:26:22,640 --> 00:26:25,120
flight

00:26:23,440 --> 00:26:27,039
so you can often end up with check some

00:26:25,120 --> 00:26:30,080
mismatches because like

00:26:27,039 --> 00:26:33,120
windows for example doesn't um

00:26:30,080 --> 00:26:33,600
maintain the page state as it's being

00:26:33,120 --> 00:26:36,000
written

00:26:33,600 --> 00:26:36,960
so we calculate the check sum we start

00:26:36,000 --> 00:26:39,279
to write it out

00:26:36,960 --> 00:26:40,159
somebody changes the data before it gets

00:26:39,279 --> 00:26:42,080
written out so

00:26:40,159 --> 00:26:43,840
now there's different data that doesn't

00:26:42,080 --> 00:26:45,760
match the checksum

00:26:43,840 --> 00:26:48,880
so this is the sort of trade-off that

00:26:45,760 --> 00:26:48,880
you have with butterfs

00:26:49,200 --> 00:26:53,200
in addition to that you know check

00:26:50,559 --> 00:26:55,039
summing and generally heavier metadata

00:26:53,200 --> 00:26:56,240
usage results in higher latencies for

00:26:55,039 --> 00:26:59,440
some workloads

00:26:56,240 --> 00:27:01,440
you know for you create a file and ext4

00:26:59,440 --> 00:27:04,559
it goes and updates one bitmap

00:27:01,440 --> 00:27:07,760
and it like writes the inode out

00:27:04,559 --> 00:27:09,840
and it writes like one entry to a little

00:27:07,760 --> 00:27:13,440
tree to say this name belongs to this

00:27:09,840 --> 00:27:15,760
inode for butterfs we have two entries

00:27:13,440 --> 00:27:16,480
for the name to map back to the original

00:27:15,760 --> 00:27:18,480
inode

00:27:16,480 --> 00:27:20,640
plus we have the inode reference to

00:27:18,480 --> 00:27:22,640
update to the inode so we can keep track

00:27:20,640 --> 00:27:25,039
of reference this is how we can say like

00:27:22,640 --> 00:27:26,799
hey what what's the name of this file

00:27:25,039 --> 00:27:29,120
when you do scrub for example

00:27:26,799 --> 00:27:30,399
that's how we go and find out what the

00:27:29,120 --> 00:27:32,320
name of that file is

00:27:30,399 --> 00:27:33,600
is with the references and with all this

00:27:32,320 --> 00:27:37,600
like extra stuff

00:27:33,600 --> 00:27:41,200
you some workloads notice this

00:27:37,600 --> 00:27:42,000
uh but rfs is fantastic at finding bad

00:27:41,200 --> 00:27:44,720
hardware

00:27:42,000 --> 00:27:45,440
um unfortunately we had a fedora user

00:27:44,720 --> 00:27:49,039
find this out

00:27:45,440 --> 00:27:52,159
firsthand poor guy had bad memory

00:27:49,039 --> 00:27:55,440
um and it's corrupted his file system

00:27:52,159 --> 00:27:58,399
uh and noticed because

00:27:55,440 --> 00:27:59,840
get bad checksums and if you get a bad

00:27:58,399 --> 00:28:02,960
checksum in the wrong place

00:27:59,840 --> 00:28:06,080
you're gonna have a super bad time

00:28:02,960 --> 00:28:08,880
which again kind of highlights the need

00:28:06,080 --> 00:28:10,799
the continued need for backups right

00:28:08,880 --> 00:28:11,760
butterfs is really good at finding these

00:28:10,799 --> 00:28:15,200
problems

00:28:11,760 --> 00:28:18,159
and uh you know with ext4 or xfs

00:28:15,200 --> 00:28:18,960
you can go on your merry way ignorance

00:28:18,159 --> 00:28:20,799
of these issues

00:28:18,960 --> 00:28:22,559
we actually had a pretty interesting

00:28:20,799 --> 00:28:24,320
issue early on

00:28:22,559 --> 00:28:26,240
in our butterfest rollout where we had a

00:28:24,320 --> 00:28:28,000
raid device that would right to the

00:28:26,240 --> 00:28:29,039
middle of disk every time we rebooted

00:28:28,000 --> 00:28:31,840
the box

00:28:29,039 --> 00:28:33,039
and this was corrupting ai training data

00:28:31,840 --> 00:28:36,799
um

00:28:33,039 --> 00:28:38,559
and hence uh xfs

00:28:36,799 --> 00:28:40,320
you know has no idea right so they've

00:28:38,559 --> 00:28:43,919
just been using this corrupted

00:28:40,320 --> 00:28:45,600
um ai training data for years and

00:28:43,919 --> 00:28:46,880
butterfest started throwing checks on

00:28:45,600 --> 00:28:48,799
errors immediately

00:28:46,880 --> 00:28:50,559
and of course you know it's 2014 and i'm

00:28:48,799 --> 00:28:53,120
like no butterfest is wrong

00:28:50,559 --> 00:28:54,080
it's definitely there's a bug somewhere

00:28:53,120 --> 00:28:56,399
no it was

00:28:54,080 --> 00:28:58,000
this raid device just riding into the

00:28:56,399 --> 00:29:02,159
middle of disk every time it rebooted

00:28:58,000 --> 00:29:04,559
that was super cool um

00:29:02,159 --> 00:29:06,320
this you know and this isn't it's been

00:29:04,559 --> 00:29:09,840
relatively smooth sailing

00:29:06,320 --> 00:29:10,559
but there there are millions of machines

00:29:09,840 --> 00:29:13,039
that

00:29:10,559 --> 00:29:14,080
myself and omar sandoval and chris mason

00:29:13,039 --> 00:29:18,159
are responsible for

00:29:14,080 --> 00:29:18,159
so it's a it's a little stressful so

00:29:18,320 --> 00:29:22,720
yeah i mean i i wonder if you can

00:29:20,159 --> 00:29:26,000
measure your mountain dew consumption

00:29:22,720 --> 00:29:29,279
in in gallons at this point yeah

00:29:26,000 --> 00:29:30,960
i've got a i got a a trash can that's

00:29:29,279 --> 00:29:32,640
like desk height that's full of mountain

00:29:30,960 --> 00:29:34,559
dew bottles over there that's from

00:29:32,640 --> 00:29:35,760
that's two weeks worth of consumption

00:29:34,559 --> 00:29:40,080
whoa

00:29:35,760 --> 00:29:41,840
that's not good man

00:29:40,080 --> 00:29:43,039
so i guess this is where i kind of take

00:29:41,840 --> 00:29:44,559
over talking a little bit about

00:29:43,039 --> 00:29:46,320
butterflies and fedora like

00:29:44,559 --> 00:29:47,600
what what we're doing here and where

00:29:46,320 --> 00:29:50,240
we're going

00:29:47,600 --> 00:29:50,640
so a little bit about the current state

00:29:50,240 --> 00:29:52,720
um

00:29:50,640 --> 00:29:54,399
with fedora 33 anaconda's been

00:29:52,720 --> 00:29:56,000
configured to install the non-server

00:29:54,399 --> 00:29:57,760
variants with butterfs

00:29:56,000 --> 00:29:59,360
the disk images of the desktop variants

00:29:57,760 --> 00:30:02,559
have already been configured

00:29:59,360 --> 00:30:04,799
to be built with butter fs um

00:30:02,559 --> 00:30:06,240
we're still kind of waiting for for the

00:30:04,799 --> 00:30:06,840
final validation for some of those

00:30:06,240 --> 00:30:10,159
because

00:30:06,840 --> 00:30:13,279
of issues that we discovered through

00:30:10,159 --> 00:30:17,039
trying to build the arm images we've uh

00:30:13,279 --> 00:30:18,080
joseph myself davita we've we've worked

00:30:17,039 --> 00:30:20,159
through them and like

00:30:18,080 --> 00:30:22,399
david and i have made patches um across

00:30:20,159 --> 00:30:24,399
the stack for fixing them uh

00:30:22,399 --> 00:30:25,600
so we're just kind of waiting and seeing

00:30:24,399 --> 00:30:28,240
just if everything

00:30:25,600 --> 00:30:28,640
kind of works so crossing fingers but

00:30:28,240 --> 00:30:30,720
we're

00:30:28,640 --> 00:30:32,880
basically ready to fix more of those as

00:30:30,720 --> 00:30:36,320
they as issues like that come up

00:30:32,880 --> 00:30:39,600
um livfert now will set

00:30:36,320 --> 00:30:42,880
no data cal for vm disk images uh

00:30:39,600 --> 00:30:44,080
that it creates so this will apply to

00:30:42,880 --> 00:30:47,039
known boxes

00:30:44,080 --> 00:30:48,880
this will yay thanks kevin kevin just

00:30:47,039 --> 00:30:51,039
told me in the chat that

00:30:48,880 --> 00:30:53,200
they are in fact in production so we

00:30:51,039 --> 00:30:56,240
will find out with the nightly compose

00:30:53,200 --> 00:30:58,399
sweet uh

00:30:56,240 --> 00:31:00,000
so yeah so vms through livert are now

00:30:58,399 --> 00:31:01,919
going to vms created through livebird

00:31:00,000 --> 00:31:04,000
will have no data cal set automatically

00:31:01,919 --> 00:31:06,320
this avoids the very painful double cow

00:31:04,000 --> 00:31:09,840
scenario that impacts performance

00:31:06,320 --> 00:31:12,960
uh and will make it so that we can

00:31:09,840 --> 00:31:16,000
um avoid most of the painful um

00:31:12,960 --> 00:31:18,480
performance scenarios uh that people

00:31:16,000 --> 00:31:21,840
would see by a default fedora setup

00:31:18,480 --> 00:31:24,559
since we do ship gnome boxes on

00:31:21,840 --> 00:31:25,679
a fedora workstation and a lot of people

00:31:24,559 --> 00:31:28,399
use vert manager

00:31:25,679 --> 00:31:28,399
and library

00:31:29,440 --> 00:31:33,200
we do not have compression enabled

00:31:31,600 --> 00:31:34,799
currently and this is pending some

00:31:33,200 --> 00:31:36,880
discussion with the anaconda developers

00:31:34,799 --> 00:31:40,480
and tweaks to the image build tools

00:31:36,880 --> 00:31:41,440
um there's um chris murphy and i've been

00:31:40,480 --> 00:31:44,320
talking about this

00:31:41,440 --> 00:31:45,360
and there's some complexities related to

00:31:44,320 --> 00:31:48,720
the nature of

00:31:45,360 --> 00:31:50,720
how um

00:31:48,720 --> 00:31:52,640
how we actually produce images to make

00:31:50,720 --> 00:31:55,679
it so that we produce

00:31:52,640 --> 00:31:58,640
the butterfest image with one way saying

00:31:55,679 --> 00:31:59,840
z standard compression seven force all

00:31:58,640 --> 00:32:02,480
to make it so that it applies the

00:31:59,840 --> 00:32:05,279
compression uniformly across the board

00:32:02,480 --> 00:32:06,240
um and then after the fact in the mount

00:32:05,279 --> 00:32:09,200
options we just

00:32:06,240 --> 00:32:10,720
want it to do z standard one so that on

00:32:09,200 --> 00:32:14,000
an ongoing basis it's a

00:32:10,720 --> 00:32:15,760
cheap compression um this is not

00:32:14,000 --> 00:32:17,039
figured out yet i don't know how we're

00:32:15,760 --> 00:32:18,399
gonna do it and that's

00:32:17,039 --> 00:32:20,399
part of the reason why that's not there

00:32:18,399 --> 00:32:23,519
right now um boot

00:32:20,399 --> 00:32:24,880
is not butterfest by default this is

00:32:23,519 --> 00:32:27,039
also pending discussion with the

00:32:24,880 --> 00:32:28,640
bootloader team um

00:32:27,039 --> 00:32:30,240
it is technically possible to do this

00:32:28,640 --> 00:32:32,000
right now anaconda will happily let you

00:32:30,240 --> 00:32:35,200
do it and it does work

00:32:32,000 --> 00:32:36,640
but um there's some for turning it on by

00:32:35,200 --> 00:32:39,360
default i'm not

00:32:36,640 --> 00:32:40,159
comfortable with that until i figure out

00:32:39,360 --> 00:32:42,960
more of

00:32:40,159 --> 00:32:44,640
some of the other related feature

00:32:42,960 --> 00:32:48,399
enablement that i've got planned

00:32:44,640 --> 00:32:50,000
for this um and disk encryption

00:32:48,399 --> 00:32:52,480
currently will use lux

00:32:50,000 --> 00:32:54,240
lux with butterfest means only full disk

00:32:52,480 --> 00:32:57,200
encryption is possible

00:32:54,240 --> 00:32:58,000
uh that means that you can't do per sub

00:32:57,200 --> 00:33:00,799
volume

00:32:58,000 --> 00:33:01,519
uh or because it's not a partition it's

00:33:00,799 --> 00:33:04,000
the both

00:33:01,519 --> 00:33:04,799
home and route are on one volume but you

00:33:04,000 --> 00:33:08,799
can only

00:33:04,799 --> 00:33:08,799
encrypt the whole volume um

00:33:09,039 --> 00:33:13,360
now going forward to fedor in the future

00:33:11,679 --> 00:33:16,640
so fedor 34

00:33:13,360 --> 00:33:18,960
fedor 35 planning um

00:33:16,640 --> 00:33:21,200
i am very hopeful that we can get z

00:33:18,960 --> 00:33:23,760
standard compression by default

00:33:21,200 --> 00:33:25,279
uh that is something that i think will

00:33:23,760 --> 00:33:27,120
be extremely valuable and extremely

00:33:25,279 --> 00:33:29,120
useful in virtually every use case to

00:33:27,120 --> 00:33:32,080
have minimal z standard compression

00:33:29,120 --> 00:33:34,240
just across the board um boot on butter

00:33:32,080 --> 00:33:36,880
fs by default is something i do want to

00:33:34,240 --> 00:33:40,399
change for the butterfs default setup

00:33:36,880 --> 00:33:42,320
in sometime in the next year um

00:33:40,399 --> 00:33:44,320
this is essentially going to be a

00:33:42,320 --> 00:33:46,320
prerequisite for supporting online or

00:33:44,320 --> 00:33:48,320
live full or partial disk encryption

00:33:46,320 --> 00:33:51,360
using butterflies native encryption

00:33:48,320 --> 00:33:54,799
now um joseph has mentioned in uh

00:33:51,360 --> 00:33:56,080
before to us uh and uh and

00:33:54,799 --> 00:33:57,679
i don't know if you wanna do you wanna

00:33:56,080 --> 00:33:58,559
speak a little bit about like the native

00:33:57,679 --> 00:34:01,519
encryption stuff

00:33:58,559 --> 00:34:03,360
um but the core thing is that it will at

00:34:01,519 --> 00:34:04,080
least require moving boots butterfest

00:34:03,360 --> 00:34:05,679
because

00:34:04,080 --> 00:34:07,840
we need a way to do full disc encryption

00:34:05,679 --> 00:34:09,520
properly here but uh do you want to talk

00:34:07,840 --> 00:34:10,320
about like the pending upstream work

00:34:09,520 --> 00:34:13,440
that's

00:34:10,320 --> 00:34:16,240
going on here yeah uh so omar

00:34:13,440 --> 00:34:17,040
sandoval is working on the per sub

00:34:16,240 --> 00:34:19,679
volume

00:34:17,040 --> 00:34:21,440
encryption stuff for us uh so it'll look

00:34:19,679 --> 00:34:23,200
essentially like what fs crypt looks

00:34:21,440 --> 00:34:24,800
like for ext4

00:34:23,200 --> 00:34:26,720
uh it uses the same infrastructure and

00:34:24,800 --> 00:34:28,480
everything uh the last thing we want to

00:34:26,720 --> 00:34:30,320
do is kind of roll our own

00:34:28,480 --> 00:34:31,520
encryption stuff that always ends in

00:34:30,320 --> 00:34:35,359
tiers and

00:34:31,520 --> 00:34:38,320
you know uh security stuff

00:34:35,359 --> 00:34:39,679
uh so the the way it'll work is it'll be

00:34:38,320 --> 00:34:41,359
per sub volume

00:34:39,679 --> 00:34:42,960
and you can probably you will be able to

00:34:41,359 --> 00:34:46,879
do it per file system but

00:34:42,960 --> 00:34:50,720
volume obviously is the bigger get right

00:34:46,879 --> 00:34:50,720
um and

00:34:50,800 --> 00:34:54,560
the uh the main thing that he's working

00:34:53,119 --> 00:34:56,079
on right now is

00:34:54,560 --> 00:34:58,160
there's a lot of like features inside

00:34:56,079 --> 00:35:01,200
butterfs that need to be

00:34:58,160 --> 00:35:02,800
reworked in order to support this namely

00:35:01,200 --> 00:35:04,800
send and receive

00:35:02,800 --> 00:35:06,560
because again for our use case we want

00:35:04,800 --> 00:35:08,880
to be able to send and receive secure

00:35:06,560 --> 00:35:10,480
containers that like might have user

00:35:08,880 --> 00:35:13,839
data on it right

00:35:10,480 --> 00:35:15,839
and um to do this we need to like

00:35:13,839 --> 00:35:17,359
send and receive for example with

00:35:15,839 --> 00:35:18,480
compression will like decompress and

00:35:17,359 --> 00:35:21,520
send the raw stuff

00:35:18,480 --> 00:35:22,800
like the actual data over the wire and

00:35:21,520 --> 00:35:24,400
so

00:35:22,800 --> 00:35:25,760
that's not nice but wasn't really a

00:35:24,400 --> 00:35:26,320
problem but with encryption that's a

00:35:25,760 --> 00:35:27,920
problem

00:35:26,320 --> 00:35:29,440
uh we want to be able to send like the

00:35:27,920 --> 00:35:31,200
actual encrypted data

00:35:29,440 --> 00:35:32,640
as well as compressed extents and that

00:35:31,200 --> 00:35:34,720
sort of thing so uh

00:35:32,640 --> 00:35:36,400
there's he's working on that right now

00:35:34,720 --> 00:35:37,359
to be able to send and receive the like

00:35:36,400 --> 00:35:39,520
raw

00:35:37,359 --> 00:35:41,200
encrypted data on the center received

00:35:39,520 --> 00:35:42,480
side and once that's in place then it's

00:35:41,200 --> 00:35:46,079
just a matter of

00:35:42,480 --> 00:35:48,400
fixing that and fixing um

00:35:46,079 --> 00:35:50,079
getting that into place and getting the

00:35:48,400 --> 00:35:51,440
repair stuff for like scrub

00:35:50,079 --> 00:35:53,280
and multi-disk stuff because we'll

00:35:51,440 --> 00:35:55,359
automatically rewrite

00:35:53,280 --> 00:35:57,599
other things in the background like if

00:35:55,359 --> 00:35:58,000
you have a raid set up like a mirrored

00:35:57,599 --> 00:36:00,320
setup

00:35:58,000 --> 00:36:01,119
and one disc is going bad and the other

00:36:00,320 --> 00:36:04,320
disc is fine

00:36:01,119 --> 00:36:07,119
we'll like rewrite the second the bad

00:36:04,320 --> 00:36:09,359
copy to another location on that disc

00:36:07,119 --> 00:36:11,119
to repair it and this again has to be a

00:36:09,359 --> 00:36:14,079
little bit

00:36:11,119 --> 00:36:14,720
sensitive with encrypted data so we're

00:36:14,079 --> 00:36:16,880
gonna

00:36:14,720 --> 00:36:17,839
there's stuff like that and that needs

00:36:16,880 --> 00:36:19,359
to be figured out

00:36:17,839 --> 00:36:22,480
and he's getting that worked through

00:36:19,359 --> 00:36:24,800
right now the idea is that end of

00:36:22,480 --> 00:36:26,160
end of the year we have that at least

00:36:24,800 --> 00:36:28,960
going upstream

00:36:26,160 --> 00:36:30,640
and then who will have per sublime

00:36:28,960 --> 00:36:33,760
encryption

00:36:30,640 --> 00:36:35,599
cool um so yeah

00:36:33,760 --> 00:36:37,760
uh and as i said earlier that will

00:36:35,599 --> 00:36:40,240
require having boot on butterfest

00:36:37,760 --> 00:36:41,280
um the next thing that uh that i'm

00:36:40,240 --> 00:36:43,359
hoping to have

00:36:41,280 --> 00:36:44,880
done within the next year davida night

00:36:43,359 --> 00:36:45,440
had started strategizing about this and

00:36:44,880 --> 00:36:47,440
we've got

00:36:45,440 --> 00:36:48,800
and he made the initial work done for

00:36:47,440 --> 00:36:50,880
this um but

00:36:48,800 --> 00:36:52,079
support for butterfest for the os build

00:36:50,880 --> 00:36:54,079
image build tool

00:36:52,079 --> 00:36:55,200
so the initial work is already done um

00:36:54,079 --> 00:36:58,640
during this cycle

00:36:55,200 --> 00:36:59,760
it can produce a file system a butterfs

00:36:58,640 --> 00:37:01,599
file system

00:36:59,760 --> 00:37:03,119
but it doesn't have a mechanic for

00:37:01,599 --> 00:37:05,040
creating sub volumes

00:37:03,119 --> 00:37:07,280
and setting up those flags and stuff

00:37:05,040 --> 00:37:08,079
that we need um for a lot of what i'm

00:37:07,280 --> 00:37:10,800
what i've been talking

00:37:08,079 --> 00:37:11,599
about here and so that's something that

00:37:10,800 --> 00:37:13,200
we need to

00:37:11,599 --> 00:37:15,280
kind of go back and figure out how to

00:37:13,200 --> 00:37:16,320
implement and the reason why i put os

00:37:15,280 --> 00:37:20,400
build in here is that

00:37:16,320 --> 00:37:23,359
um we've been there there's been some

00:37:20,400 --> 00:37:24,160
discussions um and about using os build

00:37:23,359 --> 00:37:26,079
more

00:37:24,160 --> 00:37:27,920
for building images to replace some of

00:37:26,079 --> 00:37:29,920
the um

00:37:27,920 --> 00:37:31,520
litany of tools is the nicest way i

00:37:29,920 --> 00:37:33,440
could put it for

00:37:31,520 --> 00:37:35,040
building images in fedora i think at my

00:37:33,440 --> 00:37:37,359
last count there was like five

00:37:35,040 --> 00:37:38,160
and which is wait which is like four too

00:37:37,359 --> 00:37:41,119
many

00:37:38,160 --> 00:37:42,640
um it was very very hard figuring out

00:37:41,119 --> 00:37:45,839
everything i needed to fix

00:37:42,640 --> 00:37:47,680
um so that is something that uh we'd

00:37:45,839 --> 00:37:49,359
like to make sure if everything is in

00:37:47,680 --> 00:37:50,800
fact going to move towards os build

00:37:49,359 --> 00:37:52,800
we want to make sure that butterfest is

00:37:50,800 --> 00:37:53,200
a first class citizen there and so we're

00:37:52,800 --> 00:37:54,400
going to

00:37:53,200 --> 00:37:56,640
we're moving towards we're working

00:37:54,400 --> 00:37:57,280
towards that um and the last bit that

00:37:56,640 --> 00:37:58,720
i've been

00:37:57,280 --> 00:38:00,079
working towards and thinking about is a

00:37:58,720 --> 00:38:01,920
simpler setup for full system

00:38:00,079 --> 00:38:03,280
snapshotting and boot to snapshot

00:38:01,920 --> 00:38:04,560
this is pending some coordination with

00:38:03,280 --> 00:38:05,440
the bootloader team and snapper

00:38:04,560 --> 00:38:07,040
developers

00:38:05,440 --> 00:38:09,200
and the reason why i'm talking about

00:38:07,040 --> 00:38:10,880
this particularly as a separate point is

00:38:09,200 --> 00:38:13,040
because

00:38:10,880 --> 00:38:14,960
red hat and souza have very different

00:38:13,040 --> 00:38:15,359
philosophies on how this is going to

00:38:14,960 --> 00:38:17,680
work

00:38:15,359 --> 00:38:19,280
in their platforms um red hat has been

00:38:17,680 --> 00:38:22,320
moving more towards this

00:38:19,280 --> 00:38:25,520
um the strategy of using

00:38:22,320 --> 00:38:28,119
uh configuration file snippets

00:38:25,520 --> 00:38:29,520
with the bootloader spec in the

00:38:28,119 --> 00:38:31,200
non-standardized

00:38:29,520 --> 00:38:33,520
very super extended version of

00:38:31,200 --> 00:38:36,800
bootloader spec but

00:38:33,520 --> 00:38:38,640
using configuration snippets instead of

00:38:36,800 --> 00:38:40,720
having grub do auto discovery so the

00:38:38,640 --> 00:38:42,560
souza style has been

00:38:40,720 --> 00:38:43,760
if you structure the file system

00:38:42,560 --> 00:38:45,599
correctly

00:38:43,760 --> 00:38:47,680
grub can actually just figure out all of

00:38:45,599 --> 00:38:49,680
your snapshots populate the menus and

00:38:47,680 --> 00:38:51,839
set it up and you're good to go

00:38:49,680 --> 00:38:53,119
red hat is going for the more um

00:38:51,839 --> 00:38:56,000
concrete

00:38:53,119 --> 00:38:57,440
i guess in my opinion probably struck a

00:38:56,000 --> 00:38:59,680
strictly defined model

00:38:57,440 --> 00:39:02,000
of how to do this and we just simply

00:38:59,680 --> 00:39:04,960
don't have any infrastructure in place

00:39:02,000 --> 00:39:07,280
to do it that way just yet um we

00:39:04,960 --> 00:39:11,520
actually do support the souza style way

00:39:07,280 --> 00:39:12,320
today but i didn't want to kind of go

00:39:11,520 --> 00:39:15,440
towards that

00:39:12,320 --> 00:39:16,880
for defaults in fedora when the

00:39:15,440 --> 00:39:18,320
bootloader team and everyone else is

00:39:16,880 --> 00:39:19,359
really moving towards this bootloader

00:39:18,320 --> 00:39:21,200
spec thing so

00:39:19,359 --> 00:39:22,560
this is more of a i have to go back to

00:39:21,200 --> 00:39:24,079
the drawing board and figure out how we

00:39:22,560 --> 00:39:26,320
want to implement this

00:39:24,079 --> 00:39:28,400
to to do this properly and i want to

00:39:26,320 --> 00:39:31,119
make this something that we can expose

00:39:28,400 --> 00:39:31,520
to the desktop level um for tools and

00:39:31,119 --> 00:39:33,760
interest

00:39:31,520 --> 00:39:34,640
other things to use and take advantage

00:39:33,760 --> 00:39:36,400
of and

00:39:34,640 --> 00:39:37,680
i don't really know when that's going to

00:39:36,400 --> 00:39:40,800
happen but that's certainly

00:39:37,680 --> 00:39:41,119
that's it's on it's in my uh in my road

00:39:40,800 --> 00:39:45,119
map

00:39:41,119 --> 00:39:47,599
for this thing um and let's see before i

00:39:45,119 --> 00:39:50,400
move on to the next section is there any

00:39:47,599 --> 00:39:52,160
other yes matthew miller people need to

00:39:50,400 --> 00:39:52,960
stop making new tools for building

00:39:52,160 --> 00:39:54,720
images

00:39:52,960 --> 00:39:56,240
we're now at i think i last counted

00:39:54,720 --> 00:39:59,040
we're at seven

00:39:56,240 --> 00:39:59,760
we're at seven image building tools in

00:39:59,040 --> 00:40:02,800
fedora

00:39:59,760 --> 00:40:07,040
and they're all in use somewhere uh

00:40:02,800 --> 00:40:11,599
and that really hurts a lot

00:40:07,040 --> 00:40:13,200
um so yeah uh

00:40:11,599 --> 00:40:15,359
now i think i'm gonna hand this off to

00:40:13,200 --> 00:40:16,560
dusty who will show us the coolness that

00:40:15,359 --> 00:40:19,839
is butterfest

00:40:16,560 --> 00:40:21,760
with system snapshots um oh yeah kevin

00:40:19,839 --> 00:40:23,200
yes there is discussion at home d and

00:40:21,760 --> 00:40:25,040
butterfest integration

00:40:23,200 --> 00:40:27,599
actually leonard was one of the first to

00:40:25,040 --> 00:40:28,240
suggest that we use butterfest with home

00:40:27,599 --> 00:40:31,760
d

00:40:28,240 --> 00:40:34,160
so this will this will definitely um

00:40:31,760 --> 00:40:35,440
be a part of the overall strategy as we

00:40:34,160 --> 00:40:38,240
look towards

00:40:35,440 --> 00:40:39,839
towards this but like i'll let me hand

00:40:38,240 --> 00:40:42,160
this off to dusty so he can show us cool

00:40:39,839 --> 00:40:44,960
stuff

00:40:42,160 --> 00:40:45,520
we'll we'll see i actually have a slide

00:40:44,960 --> 00:40:49,920
in there

00:40:45,520 --> 00:40:53,280
neil if you yeah let me move on to it

00:40:49,920 --> 00:40:55,280
okay uh yes so i am gonna demo today

00:40:53,280 --> 00:40:56,960
kind of my custom setup that i've been

00:40:55,280 --> 00:41:00,160
using for years

00:40:56,960 --> 00:41:03,760
uh i a little bit of history here

00:41:00,160 --> 00:41:06,400
i used to work for a telecom company um

00:41:03,760 --> 00:41:08,560
and one of our big features was being

00:41:06,400 --> 00:41:11,920
able to upgrade and roll back

00:41:08,560 --> 00:41:12,720
at the time a very long time ago we were

00:41:11,920 --> 00:41:15,760
using

00:41:12,720 --> 00:41:17,119
rpm repackaged packages if you happen to

00:41:15,760 --> 00:41:20,240
know what those ever were

00:41:17,119 --> 00:41:23,040
oh no and uh to

00:41:20,240 --> 00:41:24,960
in order to do rollbacks um but part of

00:41:23,040 --> 00:41:27,760
my job when i was there was to

00:41:24,960 --> 00:41:29,760
actually advance our state of the art

00:41:27,760 --> 00:41:30,880
and not use rpm repackaged packages

00:41:29,760 --> 00:41:34,400
anymore because

00:41:30,880 --> 00:41:35,920
that that can be bad uh into something a

00:41:34,400 --> 00:41:37,040
little more reliable so we started

00:41:35,920 --> 00:41:41,040
moving over to

00:41:37,040 --> 00:41:41,680
uh lvm uh logical volume snapshots with

00:41:41,040 --> 00:41:45,040
thin

00:41:41,680 --> 00:41:45,599
pinpools uh and then when i came to red

00:41:45,040 --> 00:41:47,680
hat

00:41:45,599 --> 00:41:49,680
uh you know i kind of was monitoring

00:41:47,680 --> 00:41:51,599
butter fs a little bit and then also

00:41:49,680 --> 00:41:54,480
this rpm os tree thing

00:41:51,599 --> 00:41:56,319
was just getting a start uh so just

00:41:54,480 --> 00:41:57,040
everything in this space has always kind

00:41:56,319 --> 00:41:59,359
of interested

00:41:57,040 --> 00:42:01,200
me so anything that's like oh let me

00:41:59,359 --> 00:42:02,640
upgrade my system and also go back to a

00:42:01,200 --> 00:42:04,560
previous point in time

00:42:02,640 --> 00:42:06,240
i've kind of dabbled in a little bit so

00:42:04,560 --> 00:42:09,440
this is just an example of

00:42:06,240 --> 00:42:10,640
me you know playing around with the

00:42:09,440 --> 00:42:13,680
tools that exist and

00:42:10,640 --> 00:42:15,359
and seeing what's possible so my setup

00:42:13,680 --> 00:42:17,599
at least what i'll show you today is a

00:42:15,359 --> 00:42:20,800
simple system with a single file system

00:42:17,599 --> 00:42:22,560
uh you know a root file system i

00:42:20,800 --> 00:42:23,920
probably shouldn't have said slash root

00:42:22,560 --> 00:42:26,560
should have just been slash

00:42:23,920 --> 00:42:27,520
but um it's just a root file system in

00:42:26,560 --> 00:42:29,760
this case

00:42:27,520 --> 00:42:30,640
i do have a lux set up on here because

00:42:29,760 --> 00:42:32,400
that

00:42:30,640 --> 00:42:33,680
when the last time i tested it it just

00:42:32,400 --> 00:42:35,680
happened to be how it worked

00:42:33,680 --> 00:42:37,119
so i'll go ahead and apologize for

00:42:35,680 --> 00:42:40,319
having to wait

00:42:37,119 --> 00:42:41,680
uh for grub to decrypt the device in

00:42:40,319 --> 00:42:44,880
order to get into it

00:42:41,680 --> 00:42:45,839
i'll make uh neil answer a question or

00:42:44,880 --> 00:42:47,599
tell a joke

00:42:45,839 --> 00:42:49,520
or give a fun fact during that 10

00:42:47,599 --> 00:42:53,200
seconds it takes every time

00:42:49,520 --> 00:42:55,359
um so the way everything's set up is

00:42:53,200 --> 00:42:56,240
we have butterfs snapshots set up to be

00:42:55,359 --> 00:42:59,359
taken

00:42:56,240 --> 00:43:01,280
each time dnf does a package update

00:42:59,359 --> 00:43:02,960
and what we'll do today is demonstrate

00:43:01,280 --> 00:43:04,160
rolling back to a previously taken

00:43:02,960 --> 00:43:06,480
snapshot

00:43:04,160 --> 00:43:08,560
um all of this is kind of documented in

00:43:06,480 --> 00:43:09,839
a series of blog posts that i do

00:43:08,560 --> 00:43:11,839
periodically

00:43:09,839 --> 00:43:13,119
that says how i set this up for this

00:43:11,839 --> 00:43:15,680
version of fedora

00:43:13,119 --> 00:43:16,880
the last time i did it was before fedora

00:43:15,680 --> 00:43:20,960
00:43:16,880 --> 00:43:23,040
i usually skip releases just because

00:43:20,960 --> 00:43:25,280
uh i wish i had ample time to go through

00:43:23,040 --> 00:43:28,000
and do this every time but i usually

00:43:25,280 --> 00:43:30,240
wait until one eols and then i do it uh

00:43:28,000 --> 00:43:32,720
the caveat for my current setup is

00:43:30,240 --> 00:43:34,079
it does lump uh boot into the root file

00:43:32,720 --> 00:43:37,280
system so

00:43:34,079 --> 00:43:38,880
uh we i don't handle uefi i basically

00:43:37,280 --> 00:43:42,319
wanted to be able to snapshot

00:43:38,880 --> 00:43:43,599
everything and you know since uefi

00:43:42,319 --> 00:43:45,599
requires fat

00:43:43,599 --> 00:43:46,960
i just was just not something i really

00:43:45,599 --> 00:43:49,280
wanted to get into

00:43:46,960 --> 00:43:51,200
and the other caveat is the state of the

00:43:49,280 --> 00:43:54,079
art might be better today i mean i

00:43:51,200 --> 00:43:55,119
i implemented this a long time ago and

00:43:54,079 --> 00:43:56,560
it just happens

00:43:55,119 --> 00:43:58,160
i tweak it every once in a while but i

00:43:56,560 --> 00:43:58,400
haven't spent a lot of time going back

00:43:58,160 --> 00:44:01,040
in

00:43:58,400 --> 00:44:02,800
and trying to you know reinvestigate how

00:44:01,040 --> 00:44:05,839
things are so

00:44:02,800 --> 00:44:06,100
taking all that into consideration let's

00:44:05,839 --> 00:44:07,280
see

00:44:06,100 --> 00:44:11,200
[Music]

00:44:07,280 --> 00:44:13,839
if i can share my screen yay

00:44:11,200 --> 00:44:14,400
okay so everybody can see my screen and

00:44:13,839 --> 00:44:18,640
the

00:44:14,400 --> 00:44:21,200
cons or the font is big enough should i

00:44:18,640 --> 00:44:22,480
do anything different looks okay looks

00:44:21,200 --> 00:44:25,599
good

00:44:22,480 --> 00:44:26,880
all right so what i've got here is a

00:44:25,599 --> 00:44:28,960
system that's set up

00:44:26,880 --> 00:44:31,119
i've got the serial console up here and

00:44:28,960 --> 00:44:34,640
i've got ssh down here

00:44:31,119 --> 00:44:38,240
um basically what i have is a single uh

00:44:34,640 --> 00:44:39,680
disk in my system a partition lux on top

00:44:38,240 --> 00:44:42,720
of that and then um

00:44:39,680 --> 00:44:46,480
i actually do have lvm don't ask me why

00:44:42,720 --> 00:44:47,280
it's crazy uh but the important thing to

00:44:46,480 --> 00:44:50,160
know is that

00:44:47,280 --> 00:44:51,680
it's butter fs on top of that uh that

00:44:50,160 --> 00:44:55,680
root file system that's on

00:44:51,680 --> 00:44:59,040
the root lv so let me

00:44:55,680 --> 00:45:01,440
go through and actually show so

00:44:59,040 --> 00:45:02,400
this is the root logical volume is five

00:45:01,440 --> 00:45:06,079
gigabytes

00:45:02,400 --> 00:45:09,680
and if i show there's an actual

00:45:06,079 --> 00:45:13,119
butterfest file system there if i do

00:45:09,680 --> 00:45:14,640
block id on that it should show butter

00:45:13,119 --> 00:45:16,800
fs

00:45:14,640 --> 00:45:18,560
so that's all you really need to know at

00:45:16,800 --> 00:45:21,040
this point um so

00:45:18,560 --> 00:45:22,880
this system literally i just installed

00:45:21,040 --> 00:45:25,119
so it's been up 37 minutes

00:45:22,880 --> 00:45:26,160
since after the beginning of this talk

00:45:25,119 --> 00:45:28,560
um and

00:45:26,160 --> 00:45:30,400
you know it's brand new fresh so what

00:45:28,560 --> 00:45:33,520
i'm going to do right now

00:45:30,400 --> 00:45:35,760
is i'm going to uh enable um

00:45:33,520 --> 00:45:37,440
quota on the file system i don't know if

00:45:35,760 --> 00:45:38,480
this is still needed or not i just know

00:45:37,440 --> 00:45:40,560
it used to be

00:45:38,480 --> 00:45:41,839
and this kind of allows us to keep track

00:45:40,560 --> 00:45:44,880
of how much uses

00:45:41,839 --> 00:45:47,040
usage is in each snapshot um so that's

00:45:44,880 --> 00:45:48,480
just a preparatory step

00:45:47,040 --> 00:45:50,480
and the next thing i'm going to do is

00:45:48,480 --> 00:45:53,119
i'm going to install snapper

00:45:50,480 --> 00:45:54,480
and a python or a dnf plug-in that

00:45:53,119 --> 00:45:57,119
basically will

00:45:54,480 --> 00:45:59,040
hook into snapper every time we do a

00:45:57,119 --> 00:46:02,160
transaction

00:45:59,040 --> 00:46:05,280
so this basically will

00:46:02,160 --> 00:46:08,400
add the glue that allows dnf to trigger

00:46:05,280 --> 00:46:08,400
a snapshot to happen

00:46:12,240 --> 00:46:15,440
okay so that's installed and the next

00:46:14,400 --> 00:46:18,720
thing i'm going to do

00:46:15,440 --> 00:46:20,240
is i'm going to tell crap snapper

00:46:18,720 --> 00:46:22,160
oh my gosh i just almost called it the

00:46:20,240 --> 00:46:25,440
wrong thing uh

00:46:22,160 --> 00:46:28,480
to create a create a configuration

00:46:25,440 --> 00:46:32,160
for the root file system or yeah

00:46:28,480 --> 00:46:34,319
for the root snapshot um and then

00:46:32,160 --> 00:46:35,440
uh what we can see now is we have a dot

00:46:34,319 --> 00:46:38,640
snapshots

00:46:35,440 --> 00:46:40,720
uh sub volume um

00:46:38,640 --> 00:46:42,720
and barlow portables is in there just

00:46:40,720 --> 00:46:45,599
because systemd creates it by default

00:46:42,720 --> 00:46:46,560
so you can ignore that for now the next

00:46:45,599 --> 00:46:48,480
thing i'm going to do

00:46:46,560 --> 00:46:50,560
is i'm going to set it up so that dot

00:46:48,480 --> 00:46:55,760
snapshots

00:46:50,560 --> 00:46:57,680
actually gets mounted on boot

00:46:55,760 --> 00:46:58,800
i typically do that just so i can go

00:46:57,680 --> 00:47:01,280
back and look at

00:46:58,800 --> 00:47:01,920
you know what snapshots exist and you

00:47:01,280 --> 00:47:04,480
know

00:47:01,920 --> 00:47:06,480
diff files if i need to this actually

00:47:04,480 --> 00:47:07,200
what became a problem for me recently

00:47:06,480 --> 00:47:11,040
because

00:47:07,200 --> 00:47:12,720
uh an sa linux update caused a you know

00:47:11,040 --> 00:47:14,640
relabel of all the files in the file

00:47:12,720 --> 00:47:17,920
system that it could find and so

00:47:14,640 --> 00:47:19,760
for my 80 some snapshots over the past

00:47:17,920 --> 00:47:21,200
eight months or so it decided to go

00:47:19,760 --> 00:47:23,440
through each one of them and try to do

00:47:21,200 --> 00:47:26,880
that which was not good

00:47:23,440 --> 00:47:28,800
yeah that was that was not good anyway

00:47:26,880 --> 00:47:30,720
so what i can do now is i can look at

00:47:28,800 --> 00:47:34,240
the default sub volume for

00:47:30,720 --> 00:47:37,920
uh for root and it is

00:47:34,240 --> 00:47:38,640
the one with id5 and then the next thing

00:47:37,920 --> 00:47:42,000
i'm going to do

00:47:38,640 --> 00:47:44,800
is i'm going to create a new snapshot

00:47:42,000 --> 00:47:45,119
and call it big bang so this is just

00:47:44,800 --> 00:47:48,160
like

00:47:45,119 --> 00:47:49,599
represents the uh the first point in

00:47:48,160 --> 00:47:51,280
time at which

00:47:49,599 --> 00:47:53,520
you know there's a snapshot that exists

00:47:51,280 --> 00:47:56,160
for this system

00:47:53,520 --> 00:47:57,920
so we can see basically we have the

00:47:56,160 --> 00:48:00,160
thing that i'm currently booted into

00:47:57,920 --> 00:48:02,480
and then also the first snapshot that i

00:48:00,160 --> 00:48:05,520
created with the description big bang

00:48:02,480 --> 00:48:07,520
and you can see um you know kind of the

00:48:05,520 --> 00:48:09,599
amount of space that's exclusive to that

00:48:07,520 --> 00:48:11,280
snapshot

00:48:09,599 --> 00:48:14,000
um okay and the next thing i'm going to

00:48:11,280 --> 00:48:15,200
do since i just created a snapshot

00:48:14,000 --> 00:48:16,880
i'm going to go up here in the serial

00:48:15,200 --> 00:48:17,440
console and run something that's going

00:48:16,880 --> 00:48:19,440
to take

00:48:17,440 --> 00:48:21,119
just a little bit of time so now that

00:48:19,440 --> 00:48:22,640
i've got a snapshot let me do something

00:48:21,119 --> 00:48:25,359
to change the system

00:48:22,640 --> 00:48:26,400
so i'm going to update the kernel so if

00:48:25,359 --> 00:48:28,960
i look

00:48:26,400 --> 00:48:30,640
right now my kernel is very old because

00:48:28,960 --> 00:48:34,319
this is installed from the fedora

00:48:30,640 --> 00:48:38,000
31 server dvd yeah

00:48:34,319 --> 00:48:40,160
so this is 5.3.7 uh so i'm getting a

00:48:38,000 --> 00:48:42,240
much newer kernel up there at the top

00:48:40,160 --> 00:48:43,760
uh but while we wait on that kernel to

00:48:42,240 --> 00:48:45,760
get installed

00:48:43,760 --> 00:48:47,040
uh let's actually go through and look at

00:48:45,760 --> 00:48:49,839
the sub volume list

00:48:47,040 --> 00:48:52,559
that was created as a result of us

00:48:49,839 --> 00:48:54,960
creating this big bang snapshot

00:48:52,559 --> 00:48:56,800
so you can see that snapshots one

00:48:54,960 --> 00:48:58,800
snapshot now exists

00:48:56,800 --> 00:49:00,240
and there's actually a snapshots to

00:48:58,800 --> 00:49:03,920
snapshot

00:49:00,240 --> 00:49:06,000
that is because uh the start of that

00:49:03,920 --> 00:49:07,920
rpm transaction up there actually

00:49:06,000 --> 00:49:11,920
created a third

00:49:07,920 --> 00:49:14,559
or i don't know id number two snapshot

00:49:11,920 --> 00:49:16,400
um and so at the beginning of the rpm

00:49:14,559 --> 00:49:17,920
transaction it will create a snapshot

00:49:16,400 --> 00:49:20,000
and also at the end of the rpm

00:49:17,920 --> 00:49:22,319
transaction it will create a snapshot

00:49:20,000 --> 00:49:24,640
which is kind of cool so we're waiting

00:49:22,319 --> 00:49:27,040
for that to install

00:49:24,640 --> 00:49:29,839
once that gets done installing i will

00:49:27,040 --> 00:49:32,720
reboot the system

00:49:29,839 --> 00:49:34,000
we will see first of all we'll wait a

00:49:32,720 --> 00:49:37,839
really long time

00:49:34,000 --> 00:49:40,720
for grub to decrypt my uh

00:49:37,839 --> 00:49:42,800
my lux device and during that amount of

00:49:40,720 --> 00:49:46,400
time i'm going to make neil

00:49:42,800 --> 00:49:49,200
tell us something funny or interesting

00:49:46,400 --> 00:49:50,079
sure i mean uh while dusty's computer

00:49:49,200 --> 00:49:54,319
goes through a

00:49:50,079 --> 00:49:56,319
basically decryption hell um

00:49:54,319 --> 00:49:57,599
one of the things that differs from

00:49:56,319 --> 00:50:00,400
dusty setup in mine

00:49:57,599 --> 00:50:02,319
actually is well ignoring the fact that

00:50:00,400 --> 00:50:05,760
he's got lux and lvm

00:50:02,319 --> 00:50:07,920
underneath um i actually have

00:50:05,760 --> 00:50:09,119
butterfest split out as a sub volume

00:50:07,920 --> 00:50:10,559
rather than

00:50:09,119 --> 00:50:12,559
having it just integrate in the main

00:50:10,559 --> 00:50:13,839
file system and the main reason i have

00:50:12,559 --> 00:50:19,599
it that way

00:50:13,839 --> 00:50:23,760
uh i i do it because i want to be able

00:50:19,599 --> 00:50:24,400
to not have boot snapshot in the same

00:50:23,760 --> 00:50:26,640
cadence

00:50:24,400 --> 00:50:28,480
as the operating system and this is

00:50:26,640 --> 00:50:32,240
mostly because

00:50:28,480 --> 00:50:34,800
of quirks with configuring

00:50:32,240 --> 00:50:36,640
um the bootloader you don't want the

00:50:34,800 --> 00:50:37,520
bootloader configuration to get rolled

00:50:36,640 --> 00:50:39,599
back

00:50:37,520 --> 00:50:41,680
with the rest of the system sometimes

00:50:39,599 --> 00:50:43,920
and i like the flexibility

00:50:41,680 --> 00:50:44,800
of it that not happening when i don't

00:50:43,920 --> 00:50:47,200
want it to happen

00:50:44,800 --> 00:50:48,640
and also in my case i have grub set up

00:50:47,200 --> 00:50:51,040
to auto discover

00:50:48,640 --> 00:50:52,720
the snapshots and populate the menu

00:50:51,040 --> 00:50:54,400
whereas

00:50:52,720 --> 00:50:57,280
i don't know dusty is yours set up to

00:50:54,400 --> 00:51:00,559
auto populate or no

00:50:57,280 --> 00:51:02,720
uh the grub menu yeah yeah i

00:51:00,559 --> 00:51:04,319
so that i think those were extra patches

00:51:02,720 --> 00:51:06,720
that i needed to pull in

00:51:04,319 --> 00:51:09,440
okay so i don't have the option to

00:51:06,720 --> 00:51:12,640
select different snapshots in grub

00:51:09,440 --> 00:51:16,079
right now yeah i don't have that yeah i

00:51:12,640 --> 00:51:19,839
i have that by virtue of my weird setup

00:51:16,079 --> 00:51:20,480
which is nice but it's i don't think

00:51:19,839 --> 00:51:23,760
we'll fly

00:51:20,480 --> 00:51:27,440
in fedora anytime soon so

00:51:23,760 --> 00:51:29,359
um yeah

00:51:27,440 --> 00:51:31,200
so now i've got this from back up i've

00:51:29,359 --> 00:51:33,760
got the system back up

00:51:31,200 --> 00:51:34,839
and we can see we've got two different

00:51:33,760 --> 00:51:38,000
kernels

00:51:34,839 --> 00:51:40,079
um and you can also see that

00:51:38,000 --> 00:51:41,200
the newer one is the one that's booted

00:51:40,079 --> 00:51:45,040
right now

00:51:41,200 --> 00:51:49,119
so we essentially have an updated system

00:51:45,040 --> 00:51:49,599
but we also have those snapshots that

00:51:49,119 --> 00:51:52,960
exist

00:51:49,599 --> 00:51:56,559
that were taken you know pre and post

00:51:52,960 --> 00:51:59,599
uh the the the package update

00:51:56,559 --> 00:52:02,000
so what we're gonna do now is

00:51:59,599 --> 00:52:03,440
um actually i'm gonna go all the way

00:52:02,000 --> 00:52:05,839
back to

00:52:03,440 --> 00:52:09,119
the original snapshot that i took which

00:52:05,839 --> 00:52:12,319
was the very first one the big bang

00:52:09,119 --> 00:52:14,160
so i'm gonna roll back to one and

00:52:12,319 --> 00:52:16,400
it tells you what it's doing so it's

00:52:14,160 --> 00:52:18,480
creating a real read-only snapshot of

00:52:16,400 --> 00:52:20,960
the current system so it created a brand

00:52:18,480 --> 00:52:22,720
new snapshot snapshot four

00:52:20,960 --> 00:52:25,200
and it's going to create a read write

00:52:22,720 --> 00:52:27,920
snapshot of snapshot one

00:52:25,200 --> 00:52:28,640
so and that's what we're going to boot

00:52:27,920 --> 00:52:30,400
into

00:52:28,640 --> 00:52:32,640
as a result so it actually doesn't

00:52:30,400 --> 00:52:34,880
affect snapshot one

00:52:32,640 --> 00:52:36,800
it just says oh make a copy of snapshot

00:52:34,880 --> 00:52:39,359
one and set that as the target

00:52:36,800 --> 00:52:41,599
so if we look at um you know what

00:52:39,359 --> 00:52:43,599
snapshots exist right now we can see

00:52:41,599 --> 00:52:44,720
five is there and that's what we're

00:52:43,599 --> 00:52:46,880
actually going to boot into

00:52:44,720 --> 00:52:48,000
next time it's also important that

00:52:46,880 --> 00:52:51,200
snapshot 5

00:52:48,000 --> 00:52:53,760
takes up virtually no space yeah

00:52:51,200 --> 00:52:54,319
that's right yeah and it's funny because

00:52:53,760 --> 00:52:57,520
like

00:52:54,319 --> 00:52:59,839
as you go on you can start to see uh

00:52:57,520 --> 00:53:01,200
things like the exclusive space that's

00:52:59,839 --> 00:53:04,640
used for each one

00:53:01,200 --> 00:53:05,520
start to increase so if you start to run

00:53:04,640 --> 00:53:09,119
out of

00:53:05,520 --> 00:53:11,760
um let me type this

00:53:09,119 --> 00:53:13,599
if you start to run out of space for

00:53:11,760 --> 00:53:16,559
whatever reason you can go back

00:53:13,599 --> 00:53:16,960
in and like choose which snapshot is a

00:53:16,559 --> 00:53:19,359
good

00:53:16,960 --> 00:53:20,079
candidate to get rid of based on you

00:53:19,359 --> 00:53:23,200
know how

00:53:20,079 --> 00:53:26,000
how large it is and stuff like that

00:53:23,200 --> 00:53:27,280
neil any more fun facts for us ah sure

00:53:26,000 --> 00:53:30,640
um

00:53:27,280 --> 00:53:32,079
well uh no i don't i

00:53:30,640 --> 00:53:34,400
what about you joseph i don't have

00:53:32,079 --> 00:53:34,400
anything

00:53:34,720 --> 00:53:37,680
i got nothing man

00:53:38,079 --> 00:53:42,960
so yeah i apologize for having to wait

00:53:40,160 --> 00:53:45,680
uh for this to decrypt every time

00:53:42,960 --> 00:53:46,960
i'm guessing that grubbs lux code is

00:53:45,680 --> 00:53:49,359
like

00:53:46,960 --> 00:53:50,000
i don't know it doesn't take you know

00:53:49,359 --> 00:53:51,599
it's

00:53:50,000 --> 00:53:53,839
probably just all pure software

00:53:51,599 --> 00:53:56,240
implementation or something i don't know

00:53:53,839 --> 00:53:57,839
takes a while but uh and i also

00:53:56,240 --> 00:53:59,040
apologize for not setting this up in a

00:53:57,839 --> 00:54:01,200
different way

00:53:59,040 --> 00:54:03,040
i did try to do that right before this

00:54:01,200 --> 00:54:03,520
talk and it didn't work and i got scared

00:54:03,040 --> 00:54:05,760
so i

00:54:03,520 --> 00:54:07,119
was like no just go back to exactly what

00:54:05,760 --> 00:54:11,040
i know works

00:54:07,119 --> 00:54:14,079
so yeah at least we have a demo

00:54:11,040 --> 00:54:16,960
so all right so we should be

00:54:14,079 --> 00:54:18,720
back here peter just answered it has no

00:54:16,960 --> 00:54:19,280
way to use hardware acceleration or

00:54:18,720 --> 00:54:22,319
threading

00:54:19,280 --> 00:54:24,960
oh so it's been credited super slow yes

00:54:22,319 --> 00:54:28,000
it definitely is

00:54:24,960 --> 00:54:28,880
but hey it works support it's kind of

00:54:28,000 --> 00:54:32,240
neat

00:54:28,880 --> 00:54:35,599
um okay so now we are back into

00:54:32,240 --> 00:54:37,680
the system at the point in time that i

00:54:35,599 --> 00:54:39,280
basically created that first big bang

00:54:37,680 --> 00:54:42,960
snapshot

00:54:39,280 --> 00:54:45,839
so if i run rpm-q kernel

00:54:42,960 --> 00:54:47,520
i only see one kernel that exists if i

00:54:45,839 --> 00:54:51,040
look in the boot

00:54:47,520 --> 00:54:52,960
directory i don't see the new kernel

00:54:51,040 --> 00:54:54,319
that we installed i don't see any of

00:54:52,960 --> 00:54:57,040
that um

00:54:54,319 --> 00:54:58,720
so this is just an example of you made a

00:54:57,040 --> 00:55:00,799
change to your system

00:54:58,720 --> 00:55:02,799
maybe it didn't work for whatever reason

00:55:00,799 --> 00:55:03,520
and you can go completely back to the

00:55:02,799 --> 00:55:06,000
old

00:55:03,520 --> 00:55:06,880
uh you know the state of the system at

00:55:06,000 --> 00:55:09,359
which

00:55:06,880 --> 00:55:11,280
you uh you took a snapshot in the past

00:55:09,359 --> 00:55:13,680
you know this isn't going to solve

00:55:11,280 --> 00:55:14,480
a problem with regards to your data

00:55:13,680 --> 00:55:17,440
right

00:55:14,480 --> 00:55:18,160
um so like if you want if you don't want

00:55:17,440 --> 00:55:20,079
to

00:55:18,160 --> 00:55:21,359
take your data back to that point in the

00:55:20,079 --> 00:55:22,880
past then

00:55:21,359 --> 00:55:24,480
you'll you'll need to have another sub

00:55:22,880 --> 00:55:25,599
volume or something like that where your

00:55:24,480 --> 00:55:28,079
data is

00:55:25,599 --> 00:55:28,880
um so pretty much everything goes back

00:55:28,079 --> 00:55:30,480
and then

00:55:28,880 --> 00:55:32,319
you know everything is under the

00:55:30,480 --> 00:55:36,000
snapshots directory

00:55:32,319 --> 00:55:40,640
and we can actually look in snapshots

00:55:36,000 --> 00:55:43,839
was it three or four um

00:55:40,640 --> 00:55:47,920
and if we look under there you can see

00:55:43,839 --> 00:55:50,240
oh that is where we had actually updated

00:55:47,920 --> 00:55:52,079
the and the new kernel was exist existed

00:55:50,240 --> 00:55:54,799
on the file system right

00:55:52,079 --> 00:55:55,839
so this is just a quick and dirty

00:55:54,799 --> 00:55:59,040
example of

00:55:55,839 --> 00:56:01,599
what you can do with butter fs snapshots

00:55:59,040 --> 00:56:04,079
it interested me because rolling back

00:56:01,599 --> 00:56:07,119
was always fun

00:56:04,079 --> 00:56:10,559
yeah i mean just you know small

00:56:07,119 --> 00:56:12,240
point to add to this like this concept

00:56:10,559 --> 00:56:14,880
doesn't have to be applied to a full

00:56:12,240 --> 00:56:16,319
system as joseph mentioned earlier

00:56:14,880 --> 00:56:18,480
like facebook is using this with

00:56:16,319 --> 00:56:20,400
containers and this is actually

00:56:18,480 --> 00:56:22,400
most of what i use this for i mean i do

00:56:20,400 --> 00:56:24,240
have the full system snapshot set up

00:56:22,400 --> 00:56:26,240
one of the reasons why dusty setup is

00:56:24,240 --> 00:56:28,480
now more much more simple

00:56:26,240 --> 00:56:30,000
in his blog posts because i helped make

00:56:28,480 --> 00:56:32,160
it in the grub

00:56:30,000 --> 00:56:33,520
normally but uh because i used to have

00:56:32,160 --> 00:56:37,119
to patch my grub for this and

00:56:33,520 --> 00:56:38,960
that was not fun um but two i think i

00:56:37,119 --> 00:56:40,400
had a copper or something where i had a

00:56:38,960 --> 00:56:43,760
patched grub

00:56:40,400 --> 00:56:44,960
yeah that was not fun um but you know

00:56:43,760 --> 00:56:45,839
you can do this with containers and i

00:56:44,960 --> 00:56:47,280
actually do this

00:56:45,839 --> 00:56:48,880
quite a lot to manage different

00:56:47,280 --> 00:56:50,720
operating system environments

00:56:48,880 --> 00:56:52,880
where i need to do fairly destructive

00:56:50,720 --> 00:56:54,160
things inside of the environment and

00:56:52,880 --> 00:56:56,400
roll it back and so that's

00:56:54,160 --> 00:56:57,200
very handy and systemdnspawn has

00:56:56,400 --> 00:57:01,280
integrated

00:56:57,200 --> 00:57:04,640
support for this um so with that

00:57:01,280 --> 00:57:07,359
uh i we have just the

00:57:04,640 --> 00:57:08,799
questions and resources so i know we're

00:57:07,359 --> 00:57:11,040
technically over time

00:57:08,799 --> 00:57:14,240
but if anyone's got questions i think

00:57:11,040 --> 00:57:14,240
we're happy to answer a few

00:57:20,079 --> 00:57:25,359
uh is it possible to boot from usb dvd

00:57:23,440 --> 00:57:26,400
mount about rfs file system true to and

00:57:25,359 --> 00:57:29,440
do the rollback

00:57:26,400 --> 00:57:31,599
yes that is totally possible as long

00:57:29,440 --> 00:57:33,599
as your as long as your operating system

00:57:31,599 --> 00:57:36,000
environment actually supports

00:57:33,599 --> 00:57:37,040
mounting the butterfs file system you

00:57:36,000 --> 00:57:39,760
can do anything

00:57:37,040 --> 00:57:40,559
and i've actually i've actually um

00:57:39,760 --> 00:57:44,160
rescued

00:57:40,559 --> 00:57:45,920
one of my laptops which had a faulty um

00:57:44,160 --> 00:57:47,920
sata ssd which is how i found out i

00:57:45,920 --> 00:57:50,559
shouldn't buy certain brands

00:57:47,920 --> 00:57:51,440
ssds anymore um i've actually rescued

00:57:50,559 --> 00:57:54,559
one of them

00:57:51,440 --> 00:57:55,040
uh by using fedora live media mounting

00:57:54,559 --> 00:57:58,799
it up

00:57:55,040 --> 00:58:00,079
and roll it back um david's asking uh do

00:57:58,799 --> 00:58:01,520
we are we gonna have a blueprint for

00:58:00,079 --> 00:58:03,119
butterfest based images

00:58:01,520 --> 00:58:05,280
i assume you're talking about with os

00:58:03,119 --> 00:58:07,280
build uh

00:58:05,280 --> 00:58:08,799
yeah i mean i'm happy to work with

00:58:07,280 --> 00:58:10,319
anyone who's interested in that to like

00:58:08,799 --> 00:58:12,640
start making some examples

00:58:10,319 --> 00:58:13,839
of how to produce fedora based images

00:58:12,640 --> 00:58:16,480
using butterfists

00:58:13,839 --> 00:58:18,240
like i this is something that i i am

00:58:16,480 --> 00:58:18,960
personally very excited about so i'd

00:58:18,240 --> 00:58:20,559
love to

00:58:18,960 --> 00:58:22,319
if anyone's interested i'm happy to help

00:58:20,559 --> 00:58:25,359
them with that and i'm sure

00:58:22,319 --> 00:58:27,520
um davita and i can like help with

00:58:25,359 --> 00:58:29,599
making that sort of become a thing

00:58:27,520 --> 00:58:32,000
um jerry asked any progress on booting

00:58:29,599 --> 00:58:34,079
butterfest read only failed system

00:58:32,000 --> 00:58:36,319
ah joseph i think this is actually more

00:58:34,079 --> 00:58:37,839
in your wheelhouse well i

00:58:36,319 --> 00:58:39,599
you know it's kind of a bunch of us

00:58:37,839 --> 00:58:42,400
right so it's

00:58:39,599 --> 00:58:43,440
uh if things go wrong right now with any

00:58:42,400 --> 00:58:45,760
file system

00:58:43,440 --> 00:58:47,440
uh the you get dumped an emergency

00:58:45,760 --> 00:58:49,440
prompt which is not awesome

00:58:47,440 --> 00:58:50,640
uh not really a problem for xfs and the

00:58:49,440 --> 00:58:52,480
xd4 because

00:58:50,640 --> 00:58:54,240
generally you can limp along and you

00:58:52,480 --> 00:58:55,599
won't notice problems butterfest you

00:58:54,240 --> 00:58:58,799
will

00:58:55,599 --> 00:58:59,839
so the kind of the thing the idea is to

00:58:58,799 --> 00:59:01,440
change this

00:58:59,839 --> 00:59:03,040
and this is more of a system-wide change

00:59:01,440 --> 00:59:05,760
like this involves

00:59:03,040 --> 00:59:06,720
system d work and maybe some gnome work

00:59:05,760 --> 00:59:08,880
that sort of stuff

00:59:06,720 --> 00:59:10,880
to say like okay i couldn't mount the

00:59:08,880 --> 00:59:14,960
file system because of this

00:59:10,880 --> 00:59:16,480
try some of the fallback operations um

00:59:14,960 --> 00:59:18,000
in order to get like a read-only

00:59:16,480 --> 00:59:18,480
environment so we can boot up and at

00:59:18,000 --> 00:59:22,160
least

00:59:18,480 --> 00:59:24,400
try to fix things and so i'm doing work

00:59:22,160 --> 00:59:25,599
on the butterfs side to not only just

00:59:24,400 --> 00:59:27,760
make us more resilient

00:59:25,599 --> 00:59:28,720
to really bad failures in general but

00:59:27,760 --> 00:59:32,400
also

00:59:28,720 --> 00:59:33,520
allow us to limp along and better cases

00:59:32,400 --> 00:59:35,839
and then there's work that needs to be

00:59:33,520 --> 00:59:37,440
done on the systemd side to handle a

00:59:35,839 --> 00:59:39,520
file system that's read-only

00:59:37,440 --> 00:59:41,200
and then provide the ability to mount

00:59:39,520 --> 00:59:42,400
with these different options if things

00:59:41,200 --> 00:59:43,920
go wrong

00:59:42,400 --> 00:59:45,680
so there's a question about supporting

00:59:43,920 --> 00:59:46,000
defragmentation of the file system

00:59:45,680 --> 00:59:48,160
without

00:59:46,000 --> 00:59:50,000
undoing deduplication my understanding

00:59:48,160 --> 00:59:50,880
is that we already do this basically for

00:59:50,000 --> 00:59:52,880
free

00:59:50,880 --> 00:59:53,920
with the way that with the way that it

00:59:52,880 --> 00:59:56,240
works

00:59:53,920 --> 00:59:57,440
so the the defrag stuff is not snapshot

00:59:56,240 --> 00:59:58,880
aware because

00:59:57,440 --> 01:00:00,559
it was originally implemented like ohm

00:59:58,880 --> 01:00:03,280
owned the box

01:00:00,559 --> 01:00:04,799
oh and so it was one of those things

01:00:03,280 --> 01:00:06,400
where like i found it and was like oh

01:00:04,799 --> 01:00:09,680
god that's terrible

01:00:06,400 --> 01:00:11,760
and i turned it off because i couldn't

01:00:09,680 --> 01:00:14,000
i couldn't fix it at the time and then

01:00:11,760 --> 01:00:16,480
it just has not gotten fixed since

01:00:14,000 --> 01:00:17,760
then uh it's something that we can't

01:00:16,480 --> 01:00:19,599
address eventually

01:00:17,760 --> 01:00:21,839
it's not that hard to do it's just

01:00:19,599 --> 01:00:25,839
somebody needs to sit down and do it

01:00:21,839 --> 01:00:27,599
and um you know my to-do list keeps

01:00:25,839 --> 01:00:29,760
getting longer and longer and preempted

01:00:27,599 --> 01:00:30,319
and preempted so there are plans to do

01:00:29,760 --> 01:00:33,359
it it just

01:00:30,319 --> 01:00:36,720
it doesn't right now it kind of sucks

01:00:33,359 --> 01:00:36,720
yeah i know that feeling

01:00:37,520 --> 01:00:44,960
so anything else from anybody or

01:00:40,799 --> 01:00:47,440
are we done here uh

01:00:44,960 --> 01:00:48,720
looks like we're done here so thank you

01:00:47,440 --> 01:00:52,079
all for coming to

01:00:48,720 --> 01:00:54,240
our talk about butterfest on fedora

01:00:52,079 --> 01:00:55,760
i hope you'll have a great time with

01:00:54,240 --> 01:00:58,480
fedor 33

01:00:55,760 --> 01:01:00,559
with butterfest by default and let us

01:00:58,480 --> 01:01:02,400
know how you think about it oh and

01:01:00,559 --> 01:01:04,319
forgot to mention um there will be

01:01:02,400 --> 01:01:05,440
upcoming test days and all kinds of fun

01:01:04,319 --> 01:01:07,119
stuff like that and

01:01:05,440 --> 01:01:08,799
i'm crossing my fingers that we can get

01:01:07,119 --> 01:01:10,880
a badge

01:01:08,799 --> 01:01:11,920
for testing butterfest in fedora during

01:01:10,880 --> 01:01:14,559
this cycle

01:01:11,920 --> 01:01:15,200
and so if we can get that squared away

01:01:14,559 --> 01:01:17,200
then

01:01:15,200 --> 01:01:19,280
you know if you'd help us test during

01:01:17,200 --> 01:01:21,119
you know test days and beta

01:01:19,280 --> 01:01:22,480
and stuff like that you could get a

01:01:21,119 --> 01:01:24,640
badge for you know

01:01:22,480 --> 01:01:25,839
helping us make butter fs even more

01:01:24,640 --> 01:01:29,280
buttery

01:01:25,839 --> 01:01:33,880
so yeah thank you all

01:01:29,280 --> 01:01:36,880
uh thanks everybody yeah thanks

01:01:33,880 --> 01:01:36,880

YouTube URL: https://www.youtube.com/watch?v=iHjhouSxIrc


