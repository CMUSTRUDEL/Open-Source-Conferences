Title: Rpmautospec: goal, design and scope
Publication date: 2020-08-31
Playlist: Nest with Fedora 2020
Description: 
	This talk aims at presenting the goal of rpmautospec, its design and design choice, as well as limitations and work-arounds.

Presented at Nest With Fedora 2020.
Captions: 
	00:00:02,480 --> 00:00:05,920
all right

00:00:03,040 --> 00:00:07,120
we are three minutes past the normal uh

00:00:05,920 --> 00:00:10,559
starting time

00:00:07,120 --> 00:00:13,920
uh so let's just get started started

00:00:10,559 --> 00:00:15,759
thank you everyone for uh for joining

00:00:13,920 --> 00:00:17,440
this morning afternoon evening depending

00:00:15,759 --> 00:00:19,439
on where you are uh

00:00:17,440 --> 00:00:20,800
we are going to talk to you about the

00:00:19,439 --> 00:00:22,480
product that we worked on

00:00:20,800 --> 00:00:24,320
in the beginning of this year that's

00:00:22,480 --> 00:00:26,960
called rpm motorspec

00:00:24,320 --> 00:00:28,880
and when i say we this is going to be me

00:00:26,960 --> 00:00:31,519
jfc boss who knows that's bingo

00:00:28,880 --> 00:00:32,719
and nils if you want to introduce

00:00:31,519 --> 00:00:36,000
yourself

00:00:32,719 --> 00:00:39,440
yeah i'm lias phillipson um i'm

00:00:36,000 --> 00:00:41,200
called niels and i work in the same team

00:00:39,440 --> 00:00:43,360
as pingu and

00:00:41,200 --> 00:00:45,520
what we're talking about we worked on in

00:00:43,360 --> 00:00:47,920
the first quarter of this year

00:00:45,520 --> 00:00:48,559
but before all this circus with garora

00:00:47,920 --> 00:00:52,239
and i

00:00:48,559 --> 00:00:55,280
started um i think

00:00:52,239 --> 00:00:57,440
let's get going yeah

00:00:55,280 --> 00:01:00,239
so let's we can directly move to the to

00:00:57,440 --> 00:01:00,239
the first slide then

00:01:00,719 --> 00:01:04,000
niche is going to have the ends on

00:01:02,000 --> 00:01:05,280
keyboard and what i'll be doing the

00:01:04,000 --> 00:01:07,600
first part of it

00:01:05,280 --> 00:01:09,600
uh so as if the first thing we wanted to

00:01:07,600 --> 00:01:10,799
go through was the fact that uh what we

00:01:09,600 --> 00:01:12,799
are presenting here

00:01:10,799 --> 00:01:14,159
uh you know the prototype as well as the

00:01:12,799 --> 00:01:16,479
ids uh

00:01:14,159 --> 00:01:18,159
it's that you know nils and i were

00:01:16,479 --> 00:01:19,680
sitting on the understand here to to

00:01:18,159 --> 00:01:21,119
speak about this but this is not

00:01:19,680 --> 00:01:24,560
actually uh how

00:01:21,119 --> 00:01:27,360
just the two of us uh just not

00:01:24,560 --> 00:01:27,920
but i'll rephrase this is not just our

00:01:27,360 --> 00:01:30,159
baby

00:01:27,920 --> 00:01:31,840
uh for from the two of us this is also

00:01:30,159 --> 00:01:32,720
something that adam saleh from our team

00:01:31,840 --> 00:01:35,040
worked on

00:01:32,720 --> 00:01:36,560
uh and it also it's also the result of a

00:01:35,040 --> 00:01:37,520
lot of discussion we've had on the

00:01:36,560 --> 00:01:39,520
develist

00:01:37,520 --> 00:01:40,960
a lot of people are given their inputs

00:01:39,520 --> 00:01:42,320
and thought about this including the

00:01:40,960 --> 00:01:44,720
income by climb

00:01:42,320 --> 00:01:45,600
and many other people who haven't listed

00:01:44,720 --> 00:01:47,520
here

00:01:45,600 --> 00:01:48,960
so the first thing was well thank you

00:01:47,520 --> 00:01:51,280
for everyone

00:01:48,960 --> 00:01:52,240
on contributing to this what

00:01:51,280 --> 00:01:55,600
representing here

00:01:52,240 --> 00:01:58,880
is a solution it may it's probably not

00:01:55,600 --> 00:02:01,360
the solution it's a step forward uh

00:01:58,880 --> 00:02:03,119
hopefully not a step away uh there is

00:02:01,360 --> 00:02:05,360
already a second proposal that

00:02:03,119 --> 00:02:06,320
that addresses some of the some of the

00:02:05,360 --> 00:02:09,759
same angles

00:02:06,320 --> 00:02:10,399
that was uh pushed forward by uh nicola

00:02:09,759 --> 00:02:12,959
mayo

00:02:10,399 --> 00:02:13,920
as an f-34 change if i remember

00:02:12,959 --> 00:02:16,879
correctly

00:02:13,920 --> 00:02:18,480
uh so you'll see there a second a second

00:02:16,879 --> 00:02:20,239
way of doing uh something

00:02:18,480 --> 00:02:22,160
you know you'll see here another way of

00:02:20,239 --> 00:02:24,560
doing what nicola is presenting

00:02:22,160 --> 00:02:27,599
or you can see nicholas proposal another

00:02:24,560 --> 00:02:31,200
way of doing what we are presenting here

00:02:27,599 --> 00:02:31,200
so let's start with the problem

00:02:35,120 --> 00:02:39,440
um so the problem is we currently have

00:02:37,680 --> 00:02:40,959
inspect file we have two fields

00:02:39,440 --> 00:02:43,280
the release field and the changelog

00:02:40,959 --> 00:02:45,440
fields which are manually maintained

00:02:43,280 --> 00:02:46,319
and this leads to a number of problems

00:02:45,440 --> 00:02:48,480
um

00:02:46,319 --> 00:02:50,160
one of them being that every time you

00:02:48,480 --> 00:02:50,640
have a pull request that touches one of

00:02:50,160 --> 00:02:52,959
these

00:02:50,640 --> 00:02:53,840
fields uh the police are going to

00:02:52,959 --> 00:02:56,400
conflict with

00:02:53,840 --> 00:02:58,319
with one another uh that also includes

00:02:56,400 --> 00:02:59,120
you know outside of polyquest just doing

00:02:58,319 --> 00:03:01,440
merches

00:02:59,120 --> 00:03:02,720
from uh from a branch to another if you

00:03:01,440 --> 00:03:05,840
don't do a

00:03:02,720 --> 00:03:09,040
fast forward merge then you'll often

00:03:05,840 --> 00:03:11,040
have a conflict in these fields

00:03:09,040 --> 00:03:12,560
that it's also a decision where every

00:03:11,040 --> 00:03:13,280
automation that you want to build during

00:03:12,560 --> 00:03:15,360
spec file

00:03:13,280 --> 00:03:16,840
and automating spec file cleaning

00:03:15,360 --> 00:03:19,519
network

00:03:16,840 --> 00:03:20,800
will be more fragile because of this

00:03:19,519 --> 00:03:23,360
field they will need to be able to

00:03:20,800 --> 00:03:23,920
handle uh reconciliations or changelog

00:03:23,360 --> 00:03:27,120
and

00:03:23,920 --> 00:03:29,440
and release um

00:03:27,120 --> 00:03:30,640
and let's be honest we currently have

00:03:29,440 --> 00:03:33,760
three changelogs

00:03:30,640 --> 00:03:35,599
in federer we have one that is

00:03:33,760 --> 00:03:37,840
at the the describe the change of the

00:03:35,599 --> 00:03:38,480
spec file itself and that is in the spec

00:03:37,840 --> 00:03:40,239
file

00:03:38,480 --> 00:03:41,920
we have one that describes the history

00:03:40,239 --> 00:03:43,040
of the git repositories that store the

00:03:41,920 --> 00:03:45,360
spec file and that's

00:03:43,040 --> 00:03:46,959
the commit the git commit log and we

00:03:45,360 --> 00:03:48,720
have one in body which is meant to be

00:03:46,959 --> 00:03:50,159
user consumable

00:03:48,720 --> 00:03:52,959
that's something which shows in the in

00:03:50,159 --> 00:03:56,400
the gui for updating a system

00:03:52,959 --> 00:04:00,319
and that is the body date notes now

00:03:56,400 --> 00:04:02,799
the truth is that for lots of packages

00:04:00,319 --> 00:04:04,720
the rpm change log and the git comic log

00:04:02,799 --> 00:04:07,439
are just about the same for 90

00:04:04,720 --> 00:04:09,120
of the commits the one potential

00:04:07,439 --> 00:04:10,400
difference that you won't have in spec

00:04:09,120 --> 00:04:12,879
file is the usual

00:04:10,400 --> 00:04:14,560
oops i forgot to change the sources file

00:04:12,879 --> 00:04:16,720
commit that you will see in the gitlab

00:04:14,560 --> 00:04:19,120
but not in the rpm changelog

00:04:16,720 --> 00:04:20,799
and but for you know the vast majority

00:04:19,120 --> 00:04:23,120
of program of uh

00:04:20,799 --> 00:04:24,080
packages out there outside of this i

00:04:23,120 --> 00:04:26,080
forgot to

00:04:24,080 --> 00:04:27,360
update the sources file you know the

00:04:26,080 --> 00:04:29,120
these two changelogs are going to be

00:04:27,360 --> 00:04:32,479
about the same

00:04:29,120 --> 00:04:34,720
so the idea that we're trying to to

00:04:32,479 --> 00:04:37,199
to go to and then i'll start your clue

00:04:34,720 --> 00:04:39,919
for the next one

00:04:37,199 --> 00:04:41,600
there we go uh the idea is that we

00:04:39,919 --> 00:04:43,759
remove these two fields or we

00:04:41,600 --> 00:04:45,040
we don't remove them but we we no longer

00:04:43,759 --> 00:04:47,440
touch them manually

00:04:45,040 --> 00:04:48,080
so we want to automatically bump the

00:04:47,440 --> 00:04:50,880
release

00:04:48,080 --> 00:04:51,680
uh when we do a build and with this we

00:04:50,880 --> 00:04:54,560
actually uh

00:04:51,680 --> 00:04:57,120
want to keep in mind to do the upgrade

00:04:54,560 --> 00:04:59,199
pass so we want to be to be sure that

00:04:57,120 --> 00:05:00,400
if you do a rebuild uh if you reveal the

00:04:59,199 --> 00:05:03,280
package for f

00:05:00,400 --> 00:05:03,680
n minus one uh you can still upgrade to

00:05:03,280 --> 00:05:06,880
s

00:05:03,680 --> 00:05:09,520
f n uh easily uh as well as

00:05:06,880 --> 00:05:10,479
generate the rpm change log and then our

00:05:09,520 --> 00:05:12,800
since

00:05:10,479 --> 00:05:14,000
we believe that the that it's going to

00:05:12,800 --> 00:05:16,000
be most often

00:05:14,000 --> 00:05:17,919
uh there will be most often similar

00:05:16,000 --> 00:05:19,520
between the changelog and the rpm

00:05:17,919 --> 00:05:21,360
changelog the ids to generate the rpm

00:05:19,520 --> 00:05:23,680
changelog from the git comic

00:05:21,360 --> 00:05:25,440
messages but then we run into the

00:05:23,680 --> 00:05:27,120
questions of yes but not every commit

00:05:25,440 --> 00:05:29,520
message should be included

00:05:27,120 --> 00:05:30,240
uh you know the i forgot to update the

00:05:29,520 --> 00:05:31,520
sources file

00:05:30,240 --> 00:05:33,440
is probably one thing that you don't

00:05:31,520 --> 00:05:35,039
want to have in the rpm changelog so in

00:05:33,440 --> 00:05:37,759
the spec file

00:05:35,039 --> 00:05:38,400
and we also want to be able to edit and

00:05:37,759 --> 00:05:40,960
correct

00:05:38,400 --> 00:05:42,639
uh oops i made a typo i i referenced the

00:05:40,960 --> 00:05:44,320
wrong bugzilla bug id

00:05:42,639 --> 00:05:45,759
uh you know kind of thing so we want to

00:05:44,320 --> 00:05:47,919
be able to

00:05:45,759 --> 00:05:50,400
exclude some comments from the changelog

00:05:47,919 --> 00:05:50,400
as well as

00:05:51,120 --> 00:05:54,800
say edit uh past past change live

00:05:53,520 --> 00:05:57,360
entries

00:05:54,800 --> 00:05:58,639
and and we don't want to do this in a

00:05:57,360 --> 00:06:01,759
way that does not impact

00:05:58,639 --> 00:06:03,520
everyone uh we want this to be opt-in so

00:06:01,759 --> 00:06:04,720
you don't if you don't do anything it

00:06:03,520 --> 00:06:06,479
works as it does today

00:06:04,720 --> 00:06:08,880
if you are interesting to test then you

00:06:06,479 --> 00:06:11,759
can opt in and see how that works

00:06:08,880 --> 00:06:13,600
um so there is question already in the

00:06:11,759 --> 00:06:14,000
chat about the upgrade pass is it really

00:06:13,600 --> 00:06:16,960
uh

00:06:14,000 --> 00:06:18,000
important anymore it's it is a good

00:06:16,960 --> 00:06:19,840
question

00:06:18,000 --> 00:06:21,840
one of the thing is that the dnf system

00:06:19,840 --> 00:06:22,319
upgrade now does a distro sync rather

00:06:21,840 --> 00:06:25,120
than

00:06:22,319 --> 00:06:26,400
an update so it will downgrade

00:06:25,120 --> 00:06:29,600
everything that is

00:06:26,400 --> 00:06:32,479
uh lower in the new version uh

00:06:29,600 --> 00:06:33,360
so it is technically less important than

00:06:32,479 --> 00:06:35,360
than it was

00:06:33,360 --> 00:06:38,560
but it would it seemed to be it seemed

00:06:35,360 --> 00:06:40,080
for us to be a good practice nonetheless

00:06:38,560 --> 00:06:41,360
uh so there are two there are two

00:06:40,080 --> 00:06:42,960
aspects it is a good practice

00:06:41,360 --> 00:06:46,080
nonetheless to try to

00:06:42,960 --> 00:06:48,560
to keep fn plus one i that's higher

00:06:46,080 --> 00:06:49,919
version released on fn

00:06:48,560 --> 00:06:51,599
and there's someone saying it's it is

00:06:49,919 --> 00:06:52,960
something which we currently still try

00:06:51,599 --> 00:06:54,720
to do i don't think the

00:06:52,960 --> 00:06:56,560
packaging guidelines have been admitted

00:06:54,720 --> 00:06:57,919
to say you don't have to care about the

00:06:56,560 --> 00:07:00,720
upgrade pass anymore

00:06:57,919 --> 00:07:01,759
um so we still want to to try to adhere

00:07:00,720 --> 00:07:05,039
to this

00:07:01,759 --> 00:07:06,880
to these constraints so with

00:07:05,039 --> 00:07:08,560
these problems and this id in mind we're

00:07:06,880 --> 00:07:16,240
starting to look on how we can do the

00:07:08,560 --> 00:07:18,720
rpm change log

00:07:16,240 --> 00:07:20,720
uh so we looked for a few ideas uh one

00:07:18,720 --> 00:07:22,240
of them that was actually given nice

00:07:20,720 --> 00:07:24,240
i believe jeremy klein is the first one

00:07:22,240 --> 00:07:26,160
that mentioned it in the on the on the

00:07:24,240 --> 00:07:28,800
double list

00:07:26,160 --> 00:07:29,520
it was about using git tags so the idea

00:07:28,800 --> 00:07:32,000
is uh

00:07:29,520 --> 00:07:33,520
when you when that when you believe a

00:07:32,000 --> 00:07:36,560
commit is ready to be built

00:07:33,520 --> 00:07:39,520
you add a tag to it and in the in the

00:07:36,560 --> 00:07:40,240
metadata of the tag you can append a

00:07:39,520 --> 00:07:41,840
message

00:07:40,240 --> 00:07:43,360
and that message can include could

00:07:41,840 --> 00:07:45,199
include then your changelog could

00:07:43,360 --> 00:07:46,000
include the things like also the release

00:07:45,199 --> 00:07:47,840
field

00:07:46,000 --> 00:07:49,360
some people suggest it could be stored

00:07:47,840 --> 00:07:52,000
in there um

00:07:49,360 --> 00:07:53,440
but that doesn't actually solve the that

00:07:52,000 --> 00:07:54,879
doesn't actually solve the change like

00:07:53,440 --> 00:07:55,520
problem the three changelog problem

00:07:54,879 --> 00:07:57,039
because

00:07:55,520 --> 00:07:58,560
well you still have you will still have

00:07:57,039 --> 00:07:59,120
the change login body so we can ignore

00:07:58,560 --> 00:08:01,680
that one

00:07:59,120 --> 00:08:02,479
you still have the commit logs and now

00:08:01,680 --> 00:08:04,400
instead of

00:08:02,479 --> 00:08:06,560
storing the change log in the spec file

00:08:04,400 --> 00:08:08,879
you store it in the git tag

00:08:06,560 --> 00:08:10,240
so okay it can be auto generated but

00:08:08,879 --> 00:08:12,479
then you still have to go and

00:08:10,240 --> 00:08:13,759
check it and cleaning up the way it is

00:08:12,479 --> 00:08:15,199
not actually removing anything it's

00:08:13,759 --> 00:08:17,440
potentially helping to

00:08:15,199 --> 00:08:18,479
create it but you know at that point uh

00:08:17,440 --> 00:08:21,599
fat package

00:08:18,479 --> 00:08:23,599
build fat package commit uh as an

00:08:21,599 --> 00:08:24,960
as an option that just puts what's in

00:08:23,599 --> 00:08:28,400
the change lock whatever you want

00:08:24,960 --> 00:08:30,720
you enter as a git commit message so

00:08:28,400 --> 00:08:31,759
technically that option is basically

00:08:30,720 --> 00:08:34,479
already there

00:08:31,759 --> 00:08:34,880
plus it's it's going to be hard um how

00:08:34,479 --> 00:08:36,000
do we

00:08:34,880 --> 00:08:38,320
how do we want to retrieve that

00:08:36,000 --> 00:08:39,440
information should we should we include

00:08:38,320 --> 00:08:42,479
you know

00:08:39,440 --> 00:08:44,560
a thermal-like syntax in the the git tag

00:08:42,479 --> 00:08:46,160
to extract okay this is going to be the

00:08:44,560 --> 00:08:49,279
release field this is going to be

00:08:46,160 --> 00:08:50,800
uh the changelog then there is the old

00:08:49,279 --> 00:08:53,519
question how do you edit it

00:08:50,800 --> 00:08:55,279
such a changelog do we allow magic

00:08:53,519 --> 00:08:57,600
keywords that say swell

00:08:55,279 --> 00:08:58,800
um this this tag is actually replacing

00:08:57,600 --> 00:09:00,640
that tag over here

00:08:58,800 --> 00:09:01,920
uh because i made a typo and this is

00:09:00,640 --> 00:09:04,399
what you should be now

00:09:01,920 --> 00:09:05,440
using uh do we want to use git push

00:09:04,399 --> 00:09:08,399
minus force

00:09:05,440 --> 00:09:10,560
uh dash force for git tags do we want to

00:09:08,399 --> 00:09:11,360
allow people to remove and add git tags

00:09:10,560 --> 00:09:15,279
as they

00:09:11,360 --> 00:09:17,120
as they feel uh that seems very um

00:09:15,279 --> 00:09:19,200
potentially problematic because then you

00:09:17,120 --> 00:09:20,880
may under you may end up having

00:09:19,200 --> 00:09:22,800
two packages with the same changelog

00:09:20,880 --> 00:09:25,920
that actually come from two different

00:09:22,800 --> 00:09:27,839
the commit and they don't really you

00:09:25,920 --> 00:09:29,040
lose the history of what happened or why

00:09:27,839 --> 00:09:31,279
this build was

00:09:29,040 --> 00:09:32,240
including that change log uh because in

00:09:31,279 --> 00:09:34,160
the meantime the

00:09:32,240 --> 00:09:36,800
tag that was included at chandra got

00:09:34,160 --> 00:09:38,560
moved to some to somewhere else

00:09:36,800 --> 00:09:40,560
so that was a solution that we didn't

00:09:38,560 --> 00:09:43,600
really like um

00:09:40,560 --> 00:09:43,600
so we looked at another one

00:09:46,640 --> 00:09:51,120
so that was the song i did i was a

00:09:49,920 --> 00:09:52,959
shared on the double list

00:09:51,120 --> 00:09:54,720
and that's something that's uh something

00:09:52,959 --> 00:09:57,120
which seemed interesting

00:09:54,720 --> 00:09:59,680
you the idea is you generate the

00:09:57,120 --> 00:10:02,880
changelog from the commit log

00:09:59,680 --> 00:10:05,040
up to the point where the commit

00:10:02,880 --> 00:10:06,640
touches an external file a file that is

00:10:05,040 --> 00:10:08,000
external to the spec file

00:10:06,640 --> 00:10:10,560
at which point you just include that

00:10:08,000 --> 00:10:13,600
file so you have a changelog file

00:10:10,560 --> 00:10:16,000
in uh in this kit and just you know

00:10:13,600 --> 00:10:17,279
playing uh the changelog just as it is

00:10:16,000 --> 00:10:19,680
today in the spec file you just

00:10:17,279 --> 00:10:20,640
copy paste that into an external file in

00:10:19,680 --> 00:10:23,360
this kit

00:10:20,640 --> 00:10:25,440
and from that commit and all the

00:10:23,360 --> 00:10:26,880
comments above the more recent ones

00:10:25,440 --> 00:10:28,880
this will be auto generated from the

00:10:26,880 --> 00:10:30,800
commit message and

00:10:28,880 --> 00:10:31,920
as soon as you as soon as you know it it

00:10:30,800 --> 00:10:33,519
will basically start from the most

00:10:31,920 --> 00:10:37,279
recent commit and

00:10:33,519 --> 00:10:37,279
move down but as soon as it

00:10:37,600 --> 00:10:42,240
faces a commit that touches that file

00:10:40,079 --> 00:10:44,480
the the the algorithm is gonna start

00:10:42,240 --> 00:10:47,040
which means you can edit that changelog

00:10:44,480 --> 00:10:49,600
file and add all the new commits and

00:10:47,040 --> 00:10:50,480
reward and typo fix everything and then

00:10:49,600 --> 00:10:52,399
you know

00:10:50,480 --> 00:10:54,720
it will just include that file and stop

00:10:52,399 --> 00:11:00,399
trying to to regenerate

00:10:54,720 --> 00:11:02,000
anything from there

00:11:00,399 --> 00:11:04,320
that's the idea that we like most so

00:11:02,000 --> 00:11:06,720
that's the the one we went for

00:11:04,320 --> 00:11:08,640
uh then we started looking also to uh

00:11:06,720 --> 00:11:10,560
the release fields

00:11:08,640 --> 00:11:13,600
so one of the idea and that's i think

00:11:10,560 --> 00:11:16,000
neil brought this from the dobs

00:11:13,600 --> 00:11:17,680
angle experience so the open build

00:11:16,000 --> 00:11:20,560
service that open suse runs

00:11:17,680 --> 00:11:22,880
that that already has the the feature of

00:11:20,560 --> 00:11:24,800
bumping there is that they rebuilt

00:11:22,880 --> 00:11:26,160
it was to use the number of commits a

00:11:24,800 --> 00:11:28,480
number of builds

00:11:26,160 --> 00:11:30,560
in the release field that was really

00:11:28,480 --> 00:11:32,079
tempting because it's very easy to

00:11:30,560 --> 00:11:34,160
you change the version and then you

00:11:32,079 --> 00:11:34,640
count the number of uh commit that was

00:11:34,160 --> 00:11:36,959
done

00:11:34,640 --> 00:11:38,480
since the version was changed and then

00:11:36,959 --> 00:11:40,079
you can ask to build system how many

00:11:38,480 --> 00:11:41,920
bills that there have been with

00:11:40,079 --> 00:11:43,519
that version and that number of commits

00:11:41,920 --> 00:11:45,120
and then you can just increment that's

00:11:43,519 --> 00:11:48,240
that's very easy to do

00:11:45,120 --> 00:11:49,920
uh it had two two things that we didn't

00:11:48,240 --> 00:11:52,880
know exactly how to handle them

00:11:49,920 --> 00:11:53,839
that were um not happening in some ways

00:11:52,880 --> 00:11:55,920
one of them was

00:11:53,839 --> 00:11:57,440
the merch commits so when you when you

00:11:55,920 --> 00:11:59,120
have a single branch

00:11:57,440 --> 00:12:00,880
linear history that's very

00:11:59,120 --> 00:12:02,399
straightforward but when you start to

00:12:00,880 --> 00:12:05,200
consider merge commits

00:12:02,399 --> 00:12:06,800
uh you know that goes that branches and

00:12:05,200 --> 00:12:09,920
get merged

00:12:06,800 --> 00:12:10,800
well that's becoming a lot different to

00:12:09,920 --> 00:12:11,920
end all how

00:12:10,800 --> 00:12:13,200
how do you come to comments which

00:12:11,920 --> 00:12:15,360
permits do you count which committee do

00:12:13,200 --> 00:12:16,880
you not count how do you handle that

00:12:15,360 --> 00:12:18,399
and then there was the there is the old

00:12:16,880 --> 00:12:20,639
question of the upgrade pass

00:12:18,399 --> 00:12:22,320
uh because that reflects to the to the

00:12:20,639 --> 00:12:25,519
mesh command so if you have a

00:12:22,320 --> 00:12:26,399
you do a push to a commit on the right

00:12:25,519 --> 00:12:29,440
branch

00:12:26,399 --> 00:12:31,360
uh and so you get number of commits one

00:12:29,440 --> 00:12:33,760
and then you merge that you made that

00:12:31,360 --> 00:12:35,839
branch into federal 32 branch

00:12:33,760 --> 00:12:37,600
but then there is a merge commit which

00:12:35,839 --> 00:12:38,240
means suddenly the one commit that you

00:12:37,600 --> 00:12:40,560
have added

00:12:38,240 --> 00:12:41,920
on the road becomes two commits on the

00:12:40,560 --> 00:12:43,519
fedora 32 branch

00:12:41,920 --> 00:12:45,360
which means suddenly the upgrade pass is

00:12:43,519 --> 00:12:46,720
broken um so

00:12:45,360 --> 00:12:48,480
that is something that we still wanted

00:12:46,720 --> 00:12:50,880
to to maintain uh

00:12:48,480 --> 00:12:52,079
as i explained earlier and there are a

00:12:50,880 --> 00:12:53,519
few ways we could do

00:12:52,079 --> 00:12:55,680
we could do to address this we could

00:12:53,519 --> 00:12:58,959
start with the this tag at the front

00:12:55,680 --> 00:13:01,040
so then it becomes uh version this

00:12:58,959 --> 00:13:02,639
number of commits number of builds it

00:13:01,040 --> 00:13:05,519
could be uh one of

00:13:02,639 --> 00:13:07,040
the one we were looking at most was to

00:13:05,519 --> 00:13:10,079
to try to do version

00:13:07,040 --> 00:13:13,279
number of commits this number of builds

00:13:10,079 --> 00:13:14,480
um to try to mimic more of the current

00:13:13,279 --> 00:13:17,200
behavior of things

00:13:14,480 --> 00:13:18,959
um so there was there was a few things

00:13:17,200 --> 00:13:20,000
and we didn't know if we wanted to go in

00:13:18,959 --> 00:13:22,079
the past of changing

00:13:20,000 --> 00:13:23,839
the place of the d stack in the entire

00:13:22,079 --> 00:13:27,040
distribution and now the

00:13:23,839 --> 00:13:28,079
our tools like dnf you know package kit

00:13:27,040 --> 00:13:29,279
although i don't think this one is

00:13:28,079 --> 00:13:33,120
maintained so much anymore

00:13:29,279 --> 00:13:35,120
or just um would be able to copy them so

00:13:33,120 --> 00:13:37,200
we this is still something which may be

00:13:35,120 --> 00:13:38,240
doable this is something which we didn't

00:13:37,200 --> 00:13:39,920
uh

00:13:38,240 --> 00:13:42,000
well we started looking at other things

00:13:39,920 --> 00:13:43,600
as a as an alternative

00:13:42,000 --> 00:13:45,600
uh the second alternative we looked at

00:13:43,600 --> 00:13:47,440
was the arc packaging utils approach

00:13:45,600 --> 00:13:49,839
that is a utility that climb

00:13:47,440 --> 00:13:50,560
wrote which essentially adds a

00:13:49,839 --> 00:13:52,399
templating

00:13:50,560 --> 00:13:54,720
engine on the top of the spec file

00:13:52,399 --> 00:13:56,720
macros

00:13:54,720 --> 00:13:58,160
this is this would work and climb

00:13:56,720 --> 00:14:00,720
actually has it working it

00:13:58,160 --> 00:14:01,680
it does the work it does the job it's

00:14:00,720 --> 00:14:04,320
just we

00:14:01,680 --> 00:14:06,639
we did not like the the idea of having a

00:14:04,320 --> 00:14:07,040
template on the top of macros that seems

00:14:06,639 --> 00:14:10,320
like

00:14:07,040 --> 00:14:13,040
uh a fairly fragile approach it's

00:14:10,320 --> 00:14:15,360
it's adding template on you know it's

00:14:13,040 --> 00:14:17,040
adding layers of complexity and layers

00:14:15,360 --> 00:14:19,040
of potentially

00:14:17,040 --> 00:14:20,720
something that you know could be threat

00:14:19,040 --> 00:14:23,360
that could end up being fragile or

00:14:20,720 --> 00:14:24,959
hard to debug um so that's also

00:14:23,360 --> 00:14:28,079
something we

00:14:24,959 --> 00:14:28,720
it could work it does work climb as it

00:14:28,079 --> 00:14:31,760
working

00:14:28,720 --> 00:14:34,720
but it is not the most

00:14:31,760 --> 00:14:45,519
the most appealing idea so we looked for

00:14:34,720 --> 00:14:48,480
another one again

00:14:45,519 --> 00:14:50,000
there we go yeah uh so the third idea we

00:14:48,480 --> 00:14:53,360
looked at was basically

00:14:50,000 --> 00:14:56,480
to try to use the the build history

00:14:53,360 --> 00:14:58,880
and the build target to mimic to the

00:14:56,480 --> 00:15:01,040
the human maintainer so to reproduce

00:14:58,880 --> 00:15:03,680
what humans currently do

00:15:01,040 --> 00:15:05,040
uh just using uh to build the blue story

00:15:03,680 --> 00:15:08,639
in the build targets

00:15:05,040 --> 00:15:10,000
um i'm going to touch upon quickly uh to

00:15:08,639 --> 00:15:12,480
build the story so

00:15:10,000 --> 00:15:14,560
there are two ways we can do that uh one

00:15:12,480 --> 00:15:16,000
way would be uh we just create koji and

00:15:14,560 --> 00:15:19,120
tell us uh

00:15:16,000 --> 00:15:21,279
have it tell us how to behave um but

00:15:19,120 --> 00:15:23,920
that means that you need network access

00:15:21,279 --> 00:15:24,959
every time uh it's gonna be hard you

00:15:23,920 --> 00:15:26,399
know if you have a slow internet

00:15:24,959 --> 00:15:27,040
connection and you need to create the

00:15:26,399 --> 00:15:29,120
entire

00:15:27,040 --> 00:15:30,720
build this build history of c or

00:15:29,120 --> 00:15:33,040
something like the kernel

00:15:30,720 --> 00:15:33,839
uh that will be uh that will take some

00:15:33,040 --> 00:15:36,480
time

00:15:33,839 --> 00:15:38,240
uh so that's the place where we decided

00:15:36,480 --> 00:15:41,279
to use the git tags

00:15:38,240 --> 00:15:41,600
as a mechanism to record which commits

00:15:41,279 --> 00:15:45,199
was

00:15:41,600 --> 00:15:46,880
was built uh and then using that

00:15:45,199 --> 00:15:49,279
information of git tags with the build

00:15:46,880 --> 00:15:50,399
story together with the build targets

00:15:49,279 --> 00:15:52,399
which you can provide

00:15:50,399 --> 00:15:54,320
which either koji provides or you can

00:15:52,399 --> 00:15:54,639
provide as a as a packager when you want

00:15:54,320 --> 00:15:57,519
to

00:15:54,639 --> 00:15:58,959
build locally uh well then we have

00:15:57,519 --> 00:16:02,240
sufficient information to be

00:15:58,959 --> 00:16:05,120
to to be able to make our logic works

00:16:02,240 --> 00:16:06,839
and so that's that's the idea uh we went

00:16:05,120 --> 00:16:09,519
for

00:16:06,839 --> 00:16:12,800
um

00:16:09,519 --> 00:16:14,240
nice if you wanna yeah uh so that's the

00:16:12,800 --> 00:16:16,959
idea we went for we

00:16:14,240 --> 00:16:19,120
we're trying to emulate uh the human the

00:16:16,959 --> 00:16:19,920
current packagers experience as good as

00:16:19,120 --> 00:16:22,160
possible

00:16:19,920 --> 00:16:24,399
uh we do realize that there will be

00:16:22,160 --> 00:16:26,720
cases and spec files which will not be

00:16:24,399 --> 00:16:29,360
able to be supported by rpm spec uh

00:16:26,720 --> 00:16:30,240
autospec at this time uh we do hope that

00:16:29,360 --> 00:16:32,240
this is

00:16:30,240 --> 00:16:33,279
a step you know a step forward in the

00:16:32,240 --> 00:16:35,040
right direction

00:16:33,279 --> 00:16:37,199
uh we do realize that it's probably not

00:16:35,040 --> 00:16:39,360
going to be the final answer that

00:16:37,199 --> 00:16:42,000
shall be grave into stone and never to

00:16:39,360 --> 00:16:44,320
be moved again

00:16:42,000 --> 00:16:45,519
so the way we do that is you have very

00:16:44,320 --> 00:16:48,240
very little changes

00:16:45,519 --> 00:16:50,480
in the way we work and how you opt-in

00:16:48,240 --> 00:16:53,279
opt-out is also fairly easy

00:16:50,480 --> 00:16:55,279
we re we produce reproducible rpms so

00:16:53,279 --> 00:16:57,040
the spec file itself if you build the

00:16:55,279 --> 00:16:57,680
spec file locally and then koji you may

00:16:57,040 --> 00:17:00,160
end up

00:16:57,680 --> 00:17:01,279
uh button-shaped with some differences

00:17:00,160 --> 00:17:04,240
but once

00:17:01,279 --> 00:17:04,799
when the srpm is built in koji you can

00:17:04,240 --> 00:17:07,760
rebuild

00:17:04,799 --> 00:17:09,360
srbs this is rpm in every in any system

00:17:07,760 --> 00:17:11,679
that is rpm based and you'll get the

00:17:09,360 --> 00:17:14,319
exact same output all the time so

00:17:11,679 --> 00:17:15,199
the the spec file is no longer the the

00:17:14,319 --> 00:17:18,000
unit of

00:17:15,199 --> 00:17:19,039
reproducibility uh but the srpm becomes

00:17:18,000 --> 00:17:21,919
is it

00:17:19,039 --> 00:17:23,120
we we tried to prevent the upgrade pass

00:17:21,919 --> 00:17:25,919
as much as possible

00:17:23,120 --> 00:17:27,679
um that's that was one of our goal and

00:17:25,919 --> 00:17:30,240
that's what we are trying to achieve

00:17:27,679 --> 00:17:32,880
with the emulating the humans

00:17:30,240 --> 00:17:34,400
and we we do support local builds uh

00:17:32,880 --> 00:17:37,039
from the spec file it's just a

00:17:34,400 --> 00:17:38,080
there are a few tricks uh you to do but

00:17:37,039 --> 00:17:40,960
basically uh

00:17:38,080 --> 00:17:42,000
it is there so to give you an idea how

00:17:40,960 --> 00:17:45,600
easy or hard

00:17:42,000 --> 00:17:49,120
it is to to obtain into this uh well

00:17:45,600 --> 00:17:50,799
this is a a very simple uh spike file

00:17:49,120 --> 00:17:52,640
you have the name the version and then

00:17:50,799 --> 00:17:55,200
the release becomes that macro

00:17:52,640 --> 00:17:56,480
and the changelog becomes another macro

00:17:55,200 --> 00:17:58,320
and that's all you have to do

00:17:56,480 --> 00:18:00,320
uh you potentially if you had an

00:17:58,320 --> 00:18:03,360
existing change log you will want to

00:18:00,320 --> 00:18:05,440
you know save this into a separate file

00:18:03,360 --> 00:18:06,559
uh which i believe is simply named

00:18:05,440 --> 00:18:08,559
changelog

00:18:06,559 --> 00:18:10,000
and the really the existing arrays and

00:18:08,559 --> 00:18:11,360
you know you can you can basically

00:18:10,000 --> 00:18:14,880
ignore

00:18:11,360 --> 00:18:18,320
so how does it work a little bit more in

00:18:14,880 --> 00:18:21,760
in practice rpm motorspec itself

00:18:18,320 --> 00:18:23,440
is uh it's a cli tool uh it's a python

00:18:21,760 --> 00:18:25,760
mod it's a python module library

00:18:23,440 --> 00:18:27,200
that comes with a cli tool as well as

00:18:25,760 --> 00:18:29,200
two koji plugins

00:18:27,200 --> 00:18:32,320
one that runs on the builders and one

00:18:29,200 --> 00:18:32,320
that runs on the hub

00:18:32,480 --> 00:18:37,200
so to give you we have a small graphical

00:18:35,280 --> 00:18:39,520
representation of the workflow

00:18:37,200 --> 00:18:42,480
uh when you do the fat package build

00:18:39,520 --> 00:18:45,120
koji will start by building the srpm

00:18:42,480 --> 00:18:47,440
uh the building dearest rpm means we're

00:18:45,120 --> 00:18:49,120
basically doing a git clone

00:18:47,440 --> 00:18:51,280
then we have this is the the git

00:18:49,120 --> 00:18:51,919
checkout once the checkout is done it's

00:18:51,280 --> 00:18:53,840
going to

00:18:51,919 --> 00:18:56,000
koji is going to call all the koji

00:18:53,840 --> 00:18:59,440
plugins which are post sem checkout

00:18:56,000 --> 00:19:01,840
that includes the drp moto spec one uh

00:18:59,440 --> 00:19:03,120
so rpm with the spec will do its magic

00:19:01,840 --> 00:19:04,880
there and

00:19:03,120 --> 00:19:06,880
and then we just koji will just build

00:19:04,880 --> 00:19:09,919
the srpm as it does no money which is

00:19:06,880 --> 00:19:13,120
the equivalent of rpm build

00:19:09,919 --> 00:19:15,679
dash bs i believe uh

00:19:13,120 --> 00:19:17,120
rpm motor spec is going to pull from the

00:19:15,679 --> 00:19:20,320
digits representations the

00:19:17,120 --> 00:19:21,760
the existing tags as we mentioned once

00:19:20,320 --> 00:19:23,679
the srpm is built

00:19:21,760 --> 00:19:26,480
koji will build the rpm as it normally

00:19:23,679 --> 00:19:28,480
does once the rpm is built koji will tag

00:19:26,480 --> 00:19:30,559
the build as it normally does

00:19:28,480 --> 00:19:32,160
and once the tag is done koji will call

00:19:30,559 --> 00:19:34,480
all the plugins that are

00:19:32,160 --> 00:19:35,840
post tag that includes the second rpm

00:19:34,480 --> 00:19:38,720
with the spec plugin

00:19:35,840 --> 00:19:39,200
and that's that plugin will call this

00:19:38,720 --> 00:19:42,320
git

00:19:39,200 --> 00:19:44,400
and say tag add the add a git tag

00:19:42,320 --> 00:19:46,320
to this specific commit which has which

00:19:44,400 --> 00:19:48,480
i have just built successfully

00:19:46,320 --> 00:19:49,440
and that is the way that the app the

00:19:48,480 --> 00:19:51,760
koji actually

00:19:49,440 --> 00:19:52,880
manages itself to to record into the git

00:19:51,760 --> 00:19:54,799
repositories

00:19:52,880 --> 00:19:56,559
the the build history that rpm with the

00:19:54,799 --> 00:20:00,000
spec then we use this uh

00:19:56,559 --> 00:20:02,240
in the villa cm spec and now i'm going

00:20:00,000 --> 00:20:03,679
to leave the floor to nils who will uh

00:20:02,240 --> 00:20:06,320
run you through a little bit more

00:20:03,679 --> 00:20:10,080
information on how that works so

00:20:06,320 --> 00:20:10,080
i hope you all see the next slide

00:20:10,480 --> 00:20:16,720
okay um the quant line tool is

00:20:13,600 --> 00:20:18,960
uh basically the thing or doing all the

00:20:16,720 --> 00:20:22,159
dirty work it reads git tags

00:20:18,960 --> 00:20:24,000
which get there by some mechanism we'll

00:20:22,159 --> 00:20:27,520
talk about in a moment

00:20:24,000 --> 00:20:30,000
um the commit locker messages and

00:20:27,520 --> 00:20:30,640
this to the site change log file where

00:20:30,000 --> 00:20:32,960
we

00:20:30,640 --> 00:20:34,000
put the history in or where we can edit

00:20:32,960 --> 00:20:37,280
things after after

00:20:34,000 --> 00:20:41,760
the after the effect um

00:20:37,280 --> 00:20:44,720
it comes up with the next release value

00:20:41,760 --> 00:20:46,400
uh for a potential next build and

00:20:44,720 --> 00:20:49,039
generate some missing change log entries

00:20:46,400 --> 00:20:52,320
that aren't in the change of field yet

00:20:49,039 --> 00:20:53,840
and it has code to fill in these values

00:20:52,320 --> 00:20:56,960
in this spec file

00:20:53,840 --> 00:21:00,960
like when later

00:20:56,960 --> 00:21:04,000
um this one

00:21:00,960 --> 00:21:06,080
the code when it creates the srpm

00:21:04,000 --> 00:21:09,200
there's where we hook in

00:21:06,080 --> 00:21:10,640
um we ensure that the latest builds are

00:21:09,200 --> 00:21:14,080
tagged in this kit

00:21:10,640 --> 00:21:16,400
so um everything is

00:21:14,080 --> 00:21:17,520
prepared for for the command line tool

00:21:16,400 --> 00:21:19,760
to run

00:21:17,520 --> 00:21:21,360
and then we use that command line in the

00:21:19,760 --> 00:21:25,840
build root

00:21:21,360 --> 00:21:28,559
to uh insert the things in the spec file

00:21:25,840 --> 00:21:29,679
and then build the sr pin from there and

00:21:28,559 --> 00:21:31,919
this one

00:21:29,679 --> 00:21:34,400
is then used to to build the final

00:21:31,919 --> 00:21:34,400
packages

00:21:36,559 --> 00:21:39,760
okay um

00:21:40,559 --> 00:21:48,320
then uh pinga talked about that uh

00:21:44,080 --> 00:21:50,320
before after a build was successful

00:21:48,320 --> 00:21:51,600
it just detects it in the diskit

00:21:50,320 --> 00:21:55,120
repository we

00:21:51,600 --> 00:21:55,120
are implemented uh

00:21:55,200 --> 00:21:59,039
as a small api endpoint on on the pega

00:21:58,400 --> 00:22:00,960
side for

00:21:59,039 --> 00:22:02,240
for that so that koji doesn't have to

00:22:00,960 --> 00:22:06,559
have its own

00:22:02,240 --> 00:22:06,559
pega user um to do that

00:22:07,120 --> 00:22:11,600
okay so we have a couple of known side

00:22:09,919 --> 00:22:16,080
effects and shortcomings

00:22:11,600 --> 00:22:17,280
so that's always a good topic to talk

00:22:16,080 --> 00:22:21,520
about so

00:22:17,280 --> 00:22:25,200
um uh the

00:22:21,520 --> 00:22:25,600
we um like the the the order commits

00:22:25,200 --> 00:22:28,880
came

00:22:25,600 --> 00:22:32,080
came in or the order bills were done is

00:22:28,880 --> 00:22:33,440
uh how the changelog is sorted not the

00:22:32,080 --> 00:22:36,240
commit dates i mean

00:22:33,440 --> 00:22:37,840
um anybody who's worked with git for a

00:22:36,240 --> 00:22:40,559
time knows you can

00:22:37,840 --> 00:22:43,280
shuffle these around by by rebazing or

00:22:40,559 --> 00:22:46,559
cherry picking or stuff like that so the

00:22:43,280 --> 00:22:50,480
uh the order of dates doesn't well does

00:22:46,559 --> 00:22:52,960
doesn't hold too much importance

00:22:50,480 --> 00:22:55,520
there because i could cherry pick a very

00:22:52,960 --> 00:22:58,799
old commit from from some other branch

00:22:55,520 --> 00:22:59,679
and we don't want to resort that and we

00:22:58,799 --> 00:23:02,400
can also

00:22:59,679 --> 00:23:04,080
uh at least with a prototype while it

00:23:02,400 --> 00:23:05,760
was still working in staging we kind of

00:23:04,080 --> 00:23:07,280
have a couple of problems with staging

00:23:05,760 --> 00:23:08,000
right now that's related to the color

00:23:07,280 --> 00:23:11,120
move but

00:23:08,000 --> 00:23:13,760
um when staging is uh

00:23:11,120 --> 00:23:15,039
back in order again you'll be able to

00:23:13,760 --> 00:23:19,039
play around with that

00:23:15,039 --> 00:23:21,840
um so right now you can just

00:23:19,039 --> 00:23:22,480
tell koji to build from some random

00:23:21,840 --> 00:23:26,640
commit

00:23:22,480 --> 00:23:29,919
and uh this will of course influence

00:23:26,640 --> 00:23:32,080
um like um

00:23:29,919 --> 00:23:32,960
let me backtrack that that sent a

00:23:32,080 --> 00:23:37,840
sentence doesn't

00:23:32,960 --> 00:23:37,840
make too much of a sense um

00:23:38,159 --> 00:23:41,919
we can adjust we we have the tip of a

00:23:40,799 --> 00:23:45,200
branch like

00:23:41,919 --> 00:23:47,520
let's say fader 32 uh right now the

00:23:45,200 --> 00:23:48,240
current uh latest stable branch and we

00:23:47,520 --> 00:23:50,080
can do

00:23:48,240 --> 00:23:51,919
any number of of builds from the same

00:23:50,080 --> 00:23:55,039
commit with that scheme

00:23:51,919 --> 00:23:55,679
but we could also um build an older

00:23:55,039 --> 00:23:57,360
commit

00:23:55,679 --> 00:24:00,080
from that from that branch and that

00:23:57,360 --> 00:24:05,520
would um then

00:24:00,080 --> 00:24:07,600
uh uh like um

00:24:05,520 --> 00:24:09,520
the the changelog history would would

00:24:07,600 --> 00:24:09,919
look like a little bit weird there i

00:24:09,520 --> 00:24:13,520
mean

00:24:09,919 --> 00:24:16,320
um let me just there's some

00:24:13,520 --> 00:24:18,080
more to to that i'll post that in the

00:24:16,320 --> 00:24:21,120
chat

00:24:18,080 --> 00:24:21,600
the nitty-gritty details about that are

00:24:21,120 --> 00:24:26,480
here

00:24:21,600 --> 00:24:29,520
about both of these points um

00:24:26,480 --> 00:24:31,200
okay so right now the the prototype has

00:24:29,520 --> 00:24:34,000
some shortcomings

00:24:31,200 --> 00:24:35,600
in uh that it's a normal python package

00:24:34,000 --> 00:24:39,760
that is it's in the version pi

00:24:35,600 --> 00:24:44,159
uh python path it's a normal site a site

00:24:39,760 --> 00:24:46,480
package and if you upgrade the python

00:24:44,159 --> 00:24:48,000
python version on the builders suddenly

00:24:46,480 --> 00:24:50,480
it wouldn't find the

00:24:48,000 --> 00:24:51,840
the package anymore and uh the command

00:24:50,480 --> 00:24:53,440
line tool wouldn't be functioning and

00:24:51,840 --> 00:24:56,880
stuff like that so

00:24:53,440 --> 00:25:00,799
uh the solution to that is uh that we

00:24:56,880 --> 00:25:03,919
do it like in the olden days and uh

00:25:00,799 --> 00:25:05,760
make it uh like have a copy of it and

00:25:03,919 --> 00:25:08,480
use a share rpm or respect something

00:25:05,760 --> 00:25:11,520
that's not tied to the python version

00:25:08,480 --> 00:25:14,880
and uh then

00:25:11,520 --> 00:25:16,799
uh this uh this should work regardless

00:25:14,880 --> 00:25:18,720
of the of the exact python version

00:25:16,799 --> 00:25:20,640
like if you go at it with a new python

00:25:18,720 --> 00:25:22,320
interpreter it won't care

00:25:20,640 --> 00:25:24,080
that it's a new python interpreter as

00:25:22,320 --> 00:25:26,320
long as it's compatible but

00:25:24,080 --> 00:25:29,840
um python has been good to us in that

00:25:26,320 --> 00:25:29,840
regard so far

00:25:30,000 --> 00:25:34,640
uh we haven't gotten around to

00:25:31,919 --> 00:25:35,840
pre-release to implementing releases yet

00:25:34,640 --> 00:25:38,159
we put

00:25:35,840 --> 00:25:39,279
quite some thought into it and we made

00:25:38,159 --> 00:25:41,520
some preparations in

00:25:39,279 --> 00:25:42,480
how the macros work like if you if you

00:25:41,520 --> 00:25:45,520
think back to the

00:25:42,480 --> 00:25:47,679
to the examples back file

00:25:45,520 --> 00:25:48,799
uh the auto rail macro understands a

00:25:47,679 --> 00:25:52,480
couple of flags

00:25:48,799 --> 00:25:54,720
and options for these cases but there um

00:25:52,480 --> 00:25:56,320
there's no code behind that yet so we

00:25:54,720 --> 00:26:00,640
would have to implement

00:25:56,320 --> 00:26:04,000
these use cases before uh we can

00:26:00,640 --> 00:26:09,919
use it for these use cases

00:26:04,000 --> 00:26:13,919
and um in order that the spec files are

00:26:09,919 --> 00:26:15,440
buildable locally um we

00:26:13,919 --> 00:26:17,440
have to have the the marker files

00:26:15,440 --> 00:26:20,559
available on on

00:26:17,440 --> 00:26:24,480
the packages

00:26:20,559 --> 00:26:27,200
machine right now it's uh

00:26:24,480 --> 00:26:27,919
you would have to install it manually um

00:26:27,200 --> 00:26:30,960
we could just

00:26:27,919 --> 00:26:32,480
um install the dependency from the rpm

00:26:30,960 --> 00:26:34,640
config package to

00:26:32,480 --> 00:26:36,840
our one or integrate it with that one

00:26:34,640 --> 00:26:39,840
that doesn't make too much of a

00:26:36,840 --> 00:26:39,840
difference

00:26:40,400 --> 00:26:46,240
and uh all the other tools are currently

00:26:44,240 --> 00:26:47,440
totally unaware of of the magic we're

00:26:46,240 --> 00:26:49,840
doing here so

00:26:47,440 --> 00:26:51,360
we we need to integrate with them a

00:26:49,840 --> 00:26:54,000
little better right now you would have

00:26:51,360 --> 00:26:56,480
to tell fat package to skip nvr

00:26:54,000 --> 00:26:57,919
check because it doesn't really know the

00:26:56,480 --> 00:27:03,120
right ndr

00:26:57,919 --> 00:27:04,960
because it would have to have

00:27:03,120 --> 00:27:06,320
it would have to know to talk to our

00:27:04,960 --> 00:27:08,720
tool

00:27:06,320 --> 00:27:08,720
for that

00:27:11,679 --> 00:27:15,679
okay and uh scratch builds from local

00:27:14,799 --> 00:27:18,240
srpms

00:27:15,679 --> 00:27:21,360
don't work yet like if you commit to

00:27:18,240 --> 00:27:25,039
your repository if you push it

00:27:21,360 --> 00:27:26,880
to this kit and then uh tell fat package

00:27:25,039 --> 00:27:28,480
to build a scratch build from from from

00:27:26,880 --> 00:27:31,520
a known commit hash

00:27:28,480 --> 00:27:34,720
that works but uh from an

00:27:31,520 --> 00:27:37,520
arbitrary uh locally produced srpm that

00:27:34,720 --> 00:27:37,520
doesn't work yet

00:27:37,840 --> 00:27:42,480
and we would have to

00:27:40,960 --> 00:27:45,039
enhance fat package to

00:27:42,480 --> 00:27:48,080
[Music]

00:27:45,039 --> 00:27:50,159
create the um

00:27:48,080 --> 00:27:52,640
to pre-process the the spec file

00:27:50,159 --> 00:27:56,159
accordingly before producing the asp rpm

00:27:52,640 --> 00:28:00,559
from which to produce a scratch build

00:27:56,159 --> 00:28:00,559
and with that i'll hand it back to

00:28:00,840 --> 00:28:06,880
pingum

00:28:03,679 --> 00:28:07,440
so the our current next next steps are

00:28:06,880 --> 00:28:11,120
basically

00:28:07,440 --> 00:28:11,760
um we we used to have the studying

00:28:11,120 --> 00:28:13,039
environment

00:28:11,760 --> 00:28:14,559
before the columbus started we had

00:28:13,039 --> 00:28:16,720
deployed this on staging and we were

00:28:14,559 --> 00:28:18,159
able to test it there that's also

00:28:16,720 --> 00:28:20,880
good we got the feedback about for

00:28:18,159 --> 00:28:23,440
example the the the tie to the

00:28:20,880 --> 00:28:25,039
regular python packages uh which makes

00:28:23,440 --> 00:28:28,480
rgb multiple currently not

00:28:25,039 --> 00:28:31,600
working with the python sac

00:28:28,480 --> 00:28:34,480
so that was a good very good feedback uh

00:28:31,600 --> 00:28:36,320
so we want uh we want to deploy this

00:28:34,480 --> 00:28:38,080
again back to staging once that's

00:28:36,320 --> 00:28:38,720
environ the staging environment is back

00:28:38,080 --> 00:28:40,880
online

00:28:38,720 --> 00:28:42,320
so that we can call for testers on on

00:28:40,880 --> 00:28:45,679
this again

00:28:42,320 --> 00:28:47,919
uh after this we we do want to

00:28:45,679 --> 00:28:49,360
you know we have had a few people

00:28:47,919 --> 00:28:51,679
telling us that this is worth bringing

00:28:49,360 --> 00:28:54,080
to fresco so one of the point of this uh

00:28:51,679 --> 00:28:55,679
of this presentation was to give some

00:28:54,080 --> 00:28:58,559
more uh explanation on uh

00:28:55,679 --> 00:28:59,200
what rpm of the spec does uh how it

00:28:58,559 --> 00:29:01,360
works

00:28:59,200 --> 00:29:03,760
but also asking you if you believe that

00:29:01,360 --> 00:29:06,240
this is worth uh pushing forward

00:29:03,760 --> 00:29:07,840
if so then uh then we will bring this to

00:29:06,240 --> 00:29:08,720
fresco for consideration ask them if

00:29:07,840 --> 00:29:10,960
they believed

00:29:08,720 --> 00:29:12,240
if they agree that this is worth pushing

00:29:10,960 --> 00:29:14,960
forward

00:29:12,240 --> 00:29:15,679
then we need to to fix the information

00:29:14,960 --> 00:29:17,919
uh

00:29:15,679 --> 00:29:19,440
you know shortcomings including things

00:29:17,919 --> 00:29:22,799
like uh yeah the rpm

00:29:19,440 --> 00:29:23,679
uh the rpm dev pump spec change that we

00:29:22,799 --> 00:29:25,600
need to do

00:29:23,679 --> 00:29:28,320
that was discussed in the chat here

00:29:25,600 --> 00:29:31,679
including making fat package aware of uh

00:29:28,320 --> 00:29:32,640
auto release uh macro including uh you

00:29:31,679 --> 00:29:35,679
know

00:29:32,640 --> 00:29:35,679
fixing the the

00:29:36,080 --> 00:29:43,760
the pre what's the not pre-commit

00:29:39,679 --> 00:29:43,760
but uh help me here nails

00:29:44,000 --> 00:29:49,039
uh finish the macro the prerelease and

00:29:46,240 --> 00:29:51,279
press release uh

00:29:49,039 --> 00:29:52,320
yeah case use case because where the

00:29:51,279 --> 00:29:55,679
other use case

00:29:52,320 --> 00:29:58,880
um we haven't addressed addressed yet

00:29:55,679 --> 00:30:00,799
so okay so fixing fixing this

00:29:58,880 --> 00:30:02,559
and then of course the to use all the

00:30:00,799 --> 00:30:06,080
bug fixes and improvements

00:30:02,559 --> 00:30:08,399
um but that's that's basically uh

00:30:06,080 --> 00:30:09,120
that's basically what's on our roadmap

00:30:08,399 --> 00:30:12,080
the first

00:30:09,120 --> 00:30:12,799
step being today uh do you focus things

00:30:12,080 --> 00:30:16,480
uh

00:30:12,799 --> 00:30:18,399
this is good to to push forward

00:30:16,480 --> 00:30:20,080
and uh and then the next question the

00:30:18,399 --> 00:30:21,120
next slide is basically if you have any

00:30:20,080 --> 00:30:24,399
questions

00:30:21,120 --> 00:30:26,159
and i see jan as one in the scratch

00:30:24,399 --> 00:30:28,559
wheel section

00:30:26,159 --> 00:30:30,159
so there is fetaker just two ways to do

00:30:28,559 --> 00:30:31,200
scratch builds you can either do fat

00:30:30,159 --> 00:30:34,000
package build

00:30:31,200 --> 00:30:35,600
does scratch which is going to do a

00:30:34,000 --> 00:30:39,679
which is going to call koji

00:30:35,600 --> 00:30:41,600
and ask koji to build from a git url

00:30:39,679 --> 00:30:42,720
and mark and make this build the scratch

00:30:41,600 --> 00:30:45,200
build

00:30:42,720 --> 00:30:45,840
or you can do fat package scratch build

00:30:45,200 --> 00:30:48,880
dash dash

00:30:45,840 --> 00:30:52,080
rpm which which is going to generate

00:30:48,880 --> 00:30:54,159
an srpm locally first upload that one

00:30:52,080 --> 00:30:55,440
to koji and have koji do a scratch build

00:30:54,159 --> 00:30:59,600
from that

00:30:55,440 --> 00:31:02,480
um the issue is that the the

00:30:59,600 --> 00:31:04,080
koji pre-processed the spec files uh you

00:31:02,480 --> 00:31:06,480
know at the srpm

00:31:04,080 --> 00:31:07,679
level uh so if you do a fat package

00:31:06,480 --> 00:31:10,559
scratch build

00:31:07,679 --> 00:31:11,600
srpm without preprocessing the spread

00:31:10,559 --> 00:31:14,480
file locally

00:31:11,600 --> 00:31:16,159
manually yourself first uh then you

00:31:14,480 --> 00:31:17,679
won't have the the mac

00:31:16,159 --> 00:31:20,080
the spec file will not contain the

00:31:17,679 --> 00:31:23,600
macros that are needed for

00:31:20,080 --> 00:31:25,360
up for the rpm to build correctly uh so

00:31:23,600 --> 00:31:27,120
the the way you can do it currently is

00:31:25,360 --> 00:31:27,679
that you will have to call the rpmo to

00:31:27,120 --> 00:31:30,640
build

00:31:27,679 --> 00:31:32,240
manually on the this git repository

00:31:30,640 --> 00:31:33,519
before you do the

00:31:32,240 --> 00:31:35,919
before you do the fat package cross

00:31:33,519 --> 00:31:37,679
build command or

00:31:35,919 --> 00:31:39,039
in the long and the proper fix is going

00:31:37,679 --> 00:31:42,000
to have to

00:31:39,039 --> 00:31:42,399
to teach fat package to call rpm of the

00:31:42,000 --> 00:31:45,279
spec

00:31:42,399 --> 00:31:46,080
on the the grip on the disguise repo

00:31:45,279 --> 00:31:48,559
before

00:31:46,080 --> 00:31:49,600
uh for spec file that you know uses

00:31:48,559 --> 00:31:53,200
these macros

00:31:49,600 --> 00:31:55,440
uh called rpm of spec before doing the

00:31:53,200 --> 00:31:57,279
before when generating the srpm before

00:31:55,440 --> 00:32:01,360
uploading it to kojo

00:31:57,279 --> 00:32:03,200
does that make more sense okay thank you

00:32:01,360 --> 00:32:05,039
another question what about your levels

00:32:03,200 --> 00:32:06,720
of macro use of the changelog or

00:32:05,039 --> 00:32:15,840
changelog preset to changelog

00:32:06,720 --> 00:32:15,840
plus previous changer entries

00:32:16,240 --> 00:32:19,679
okay so the the question carl is

00:32:17,919 --> 00:32:20,320
basically wanting us to get rid of the

00:32:19,679 --> 00:32:22,640
changelog

00:32:20,320 --> 00:32:24,720
macro uh entirely from the spec file and

00:32:22,640 --> 00:32:25,279
just have the a2 change log instead of

00:32:24,720 --> 00:32:28,720
it

00:32:25,279 --> 00:32:29,200
and have the nil seven inside of that

00:32:28,720 --> 00:32:32,559
one

00:32:29,200 --> 00:32:33,279
um contrary to looks changelog isn't a

00:32:32,559 --> 00:32:36,720
macro

00:32:33,279 --> 00:32:36,720
so um yeah

00:32:37,360 --> 00:32:43,679
i'm not sure if if it's workable like

00:32:40,640 --> 00:32:46,320
have order change like to expand to

00:32:43,679 --> 00:32:47,120
changelog and then rpm build understands

00:32:46,320 --> 00:32:50,080
that

00:32:47,120 --> 00:32:52,399
um i wouldn't bet anything on it so we'd

00:32:50,080 --> 00:32:55,600
have to try it out i'm not sure

00:32:52,399 --> 00:32:58,799
um i guess it's it's

00:32:55,600 --> 00:33:02,320
mostly a matter of taste um if

00:32:58,799 --> 00:33:04,080
it works um if it doesn't uh it's it's

00:33:02,320 --> 00:33:04,640
out of the question because then then we

00:33:04,080 --> 00:33:08,840
lose the

00:33:04,640 --> 00:33:11,840
feature of of a locally rebuildable

00:33:08,840 --> 00:33:11,840
package

00:33:14,480 --> 00:33:20,960
um neil says that

00:33:18,000 --> 00:33:22,720
rpm doesn't expand any macros like if if

00:33:20,960 --> 00:33:26,399
a macro expanded to change like it would

00:33:22,720 --> 00:33:26,399
it wouldn't work do i get you right

00:33:26,799 --> 00:33:30,720
is packet aware of this change yes the

00:33:29,039 --> 00:33:31,440
packet team is aware of the rpm

00:33:30,720 --> 00:33:35,200
motorspec

00:33:31,440 --> 00:33:36,840
work we've been

00:33:35,200 --> 00:33:38,640
we've had a few discussion with tomas

00:33:36,840 --> 00:33:40,240
tomashek uh

00:33:38,640 --> 00:33:42,159
they are they were actually looking at

00:33:40,240 --> 00:33:45,039
rpm with the spec in the

00:33:42,159 --> 00:33:46,320
in in the early days uh then they saw

00:33:45,039 --> 00:33:48,080
the discussion under the list and they

00:33:46,320 --> 00:33:50,640
were like okay this is they're still uh

00:33:48,080 --> 00:33:51,679
working going but that's basically uh

00:33:50,640 --> 00:33:54,000
they are of that

00:33:51,679 --> 00:33:54,880
i actually think uh a little bit like a

00:33:54,000 --> 00:33:56,880
nil here that

00:33:54,880 --> 00:34:07,840
rpm motorspec would probably simplify

00:33:56,880 --> 00:34:07,840
their life

00:34:09,040 --> 00:34:22,480
where we knew the question

00:34:20,079 --> 00:34:24,159
i mean if if not right right now you can

00:34:22,480 --> 00:34:27,599
always get hold of us

00:34:24,159 --> 00:34:30,879
um on irc um

00:34:27,599 --> 00:34:32,839
wherever we frequent on the devil list i

00:34:30,879 --> 00:34:36,079
guess

00:34:32,839 --> 00:34:38,960
so the project is still on pagoda

00:34:36,079 --> 00:34:40,320
slash federation fra slash rpm motorspec

00:34:38,960 --> 00:34:41,359
i've put the link on the chat if you're

00:34:40,320 --> 00:34:43,040
looking for it

00:34:41,359 --> 00:34:44,399
and we do have one question for nyan's

00:34:43,040 --> 00:34:48,879
about comparison

00:34:44,399 --> 00:34:52,399
to uh nicola mario's proposal

00:34:48,879 --> 00:34:52,399
do you want to take this one neil sorry

00:34:53,200 --> 00:34:57,839
i think ours is at least for existing

00:34:56,960 --> 00:34:59,599
maintainers it's

00:34:57,839 --> 00:35:01,359
it's much simpler because it's really

00:34:59,599 --> 00:35:04,720
really really tiny change

00:35:01,359 --> 00:35:06,800
in in your workflow um

00:35:04,720 --> 00:35:07,920
your spec file before and after will

00:35:06,800 --> 00:35:10,720
look

00:35:07,920 --> 00:35:11,359
almost identical except the difference

00:35:10,720 --> 00:35:14,640
that

00:35:11,359 --> 00:35:14,960
the changelog is missing from uh from

00:35:14,640 --> 00:35:19,280
the

00:35:14,960 --> 00:35:19,280
from the spec file um

00:35:21,200 --> 00:35:25,440
i i think nikola's approach would

00:35:24,400 --> 00:35:28,550
would

00:35:25,440 --> 00:35:28,550
[Music]

00:35:29,280 --> 00:35:34,320
you would have to to adjust more

00:35:32,240 --> 00:35:35,119
yourself your workflow more to immortal

00:35:34,320 --> 00:35:38,160
that one

00:35:35,119 --> 00:35:38,160
it's um

00:35:39,119 --> 00:35:42,400
to to be frank i only

00:35:43,359 --> 00:35:49,200
got aware of this approach this week so

00:35:46,640 --> 00:35:49,760
i'll i'll stop here because because i

00:35:49,200 --> 00:35:54,320
haven't

00:35:49,760 --> 00:35:54,320
had too much time to look at look at it

00:35:56,839 --> 00:35:59,839
myself

00:36:05,280 --> 00:36:09,599
there was a question from what happens

00:36:07,680 --> 00:36:11,839
when federal messaging screws up and

00:36:09,599 --> 00:36:12,800
koji fails to take a commit with the

00:36:11,839 --> 00:36:14,880
building for

00:36:12,800 --> 00:36:16,880
and the answer is simply koji doesn't

00:36:14,880 --> 00:36:20,240
rely on federal messaging it directly

00:36:16,880 --> 00:36:22,480
calls spagger cpi and if that was not

00:36:20,240 --> 00:36:24,640
available for some reason

00:36:22,480 --> 00:36:27,200
i don't know whether the build would

00:36:24,640 --> 00:36:28,640
fail or not i expect i i i hope nothing

00:36:27,200 --> 00:36:31,200
it shouldn't fail at that point we

00:36:28,640 --> 00:36:33,839
should just um

00:36:31,200 --> 00:36:34,320
we we have to revisit um that one i mean

00:36:33,839 --> 00:36:36,000
uh

00:36:34,320 --> 00:36:37,839
mind that we worked on that couple

00:36:36,000 --> 00:36:41,040
months ago so it's not

00:36:37,839 --> 00:36:44,079
all super present in in our heads um

00:36:41,040 --> 00:36:46,480
but the way we should do it is

00:36:44,079 --> 00:36:47,920
uh retry it a couple times if it doesn't

00:36:46,480 --> 00:36:51,040
work out then

00:36:47,920 --> 00:36:51,599
then fail um if you if you remember back

00:36:51,040 --> 00:36:54,800
the

00:36:51,599 --> 00:36:57,839
uh the builder plug-in will ensure

00:36:54,800 --> 00:37:00,960
that the git tags are present if that

00:36:57,839 --> 00:37:03,280
if that failed at that point then the

00:37:00,960 --> 00:37:05,599
the subsequent build will fail of course

00:37:03,280 --> 00:37:08,800
but then there's something

00:37:05,599 --> 00:37:11,359
more serious so the

00:37:08,800 --> 00:37:12,640
what what neil says here is that

00:37:11,359 --> 00:37:14,160
basically one of the first thing the

00:37:12,640 --> 00:37:16,079
builder plugin does

00:37:14,160 --> 00:37:17,440
is it asks for koji for the build

00:37:16,079 --> 00:37:19,280
history of the package

00:37:17,440 --> 00:37:20,880
and then it checks that history against

00:37:19,280 --> 00:37:23,599
what's present in the git tags

00:37:20,880 --> 00:37:24,079
so it's it makes sure that git is up to

00:37:23,599 --> 00:37:27,440
date

00:37:24,079 --> 00:37:29,839
versus the koji database basically

00:37:27,440 --> 00:37:30,880
and and that's that's the second place

00:37:29,839 --> 00:37:33,839
where we actually

00:37:30,880 --> 00:37:35,280
are able to uh tag things in in beginner

00:37:33,839 --> 00:37:39,119
on this git

00:37:35,280 --> 00:37:39,119
from the koji build story

00:37:39,599 --> 00:37:43,200
uh we have a question from if is there

00:37:42,320 --> 00:37:45,920
likely to be a

00:37:43,200 --> 00:37:47,119
follow on project additional work from

00:37:45,920 --> 00:37:48,079
this work that you have already

00:37:47,119 --> 00:37:51,119
completed

00:37:48,079 --> 00:37:52,800
and the answer is yes um one of the

00:37:51,119 --> 00:37:55,359
ideas that if fesco

00:37:52,800 --> 00:37:57,040
uh if escort thinks that this is

00:37:55,359 --> 00:37:59,359
valuable and we want to

00:37:57,040 --> 00:38:01,359
move forward for that uh then we will

00:37:59,359 --> 00:38:02,880
have to schedule a

00:38:01,359 --> 00:38:05,280
i don't think this will be a three month

00:38:02,880 --> 00:38:07,760
initiative but it's maybe a

00:38:05,280 --> 00:38:09,599
one to two months thing where at least

00:38:07,760 --> 00:38:10,640
three people push these bi and i also

00:38:09,599 --> 00:38:13,680
remember um

00:38:10,640 --> 00:38:16,960
from earlier on during the talk

00:38:13,680 --> 00:38:19,839
um a question about the actual macro

00:38:16,960 --> 00:38:23,280
names involved i think

00:38:19,839 --> 00:38:25,200
right now this is a prototype so nothing

00:38:23,280 --> 00:38:26,400
with regard to naming is set in stone

00:38:25,200 --> 00:38:28,560
yet

00:38:26,400 --> 00:38:30,800
so if there are good reasons to name it

00:38:28,560 --> 00:38:32,640
some something else just maybe to

00:38:30,800 --> 00:38:35,440
also differentiate it from from

00:38:32,640 --> 00:38:38,480
competing approaches

00:38:35,440 --> 00:38:39,839
we can do that still it's not in

00:38:38,480 --> 00:38:46,079
production anywhere

00:38:39,839 --> 00:38:47,359
right now

00:38:46,079 --> 00:38:49,520
so there is the question could we

00:38:47,359 --> 00:38:50,960
consider making it so spec files that

00:38:49,520 --> 00:38:52,800
don't have a change log change

00:38:50,960 --> 00:38:54,000
that do not have a changelog section

00:38:52,800 --> 00:38:56,240
entirely

00:38:54,000 --> 00:38:57,599
uh would automatically we can just enter

00:38:56,240 --> 00:39:00,640
changelog yeah

00:38:57,599 --> 00:39:02,000
um i would to the answer to that is

00:39:00,640 --> 00:39:02,400
everything is possible with time and

00:39:02,000 --> 00:39:04,800
money

00:39:02,400 --> 00:39:05,839
i think it will even if it would even be

00:39:04,800 --> 00:39:07,920
fairly simple

00:39:05,839 --> 00:39:07,920
and

00:39:09,359 --> 00:39:13,680
that probably would be uh we would

00:39:11,839 --> 00:39:16,160
instead of changing instead of changing

00:39:13,680 --> 00:39:17,359
checking the auto change log is present

00:39:16,160 --> 00:39:19,839
uh we would just check

00:39:17,359 --> 00:39:21,280
the changes some slight change to the

00:39:19,839 --> 00:39:28,560
conditionals involved

00:39:21,280 --> 00:39:30,880
whether to to get active but yeah

00:39:28,560 --> 00:39:34,160
that's uh that may be a good idea do you

00:39:30,880 --> 00:39:34,160
want can you open a ticket for this

00:39:36,079 --> 00:39:43,839
thank you

00:39:50,079 --> 00:39:54,800
we are a few minutes ahead of schedule

00:39:52,079 --> 00:39:57,200
so i'm

00:39:54,800 --> 00:39:58,320
more than a victor to let you guys go to

00:39:57,200 --> 00:40:01,359
uh have the

00:39:58,320 --> 00:40:02,480
more social times uh guys and girls i

00:40:01,359 --> 00:40:04,000
should say uh

00:40:02,480 --> 00:40:06,960
to have a little bit more social times

00:40:04,000 --> 00:40:11,839
uh out there or we can hang around and

00:40:06,960 --> 00:40:11,839
give other questions if there are any

00:40:29,040 --> 00:40:33,839
all right i guess uh we've uh

00:40:32,480 --> 00:40:35,839
we've exhausted the list of questions

00:40:33,839 --> 00:40:37,040
here uh so thank you everyone for

00:40:35,839 --> 00:40:39,359
attending

00:40:37,040 --> 00:40:41,200
thank you for uh for your questions i've

00:40:39,359 --> 00:40:43,760
only seen support in the chat

00:40:41,200 --> 00:40:45,520
so i guess people are happy about this

00:40:43,760 --> 00:40:48,240
so let's uh let's bring it to

00:40:45,520 --> 00:40:49,680
to fresco and and talk to ifa to

00:40:48,240 --> 00:40:53,839
schedule some time

00:40:49,680 --> 00:40:53,839

YouTube URL: https://www.youtube.com/watch?v=sDKlzeutxok


