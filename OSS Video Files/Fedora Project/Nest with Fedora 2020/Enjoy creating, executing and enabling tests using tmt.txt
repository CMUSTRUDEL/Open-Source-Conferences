Title: Enjoy creating, executing and enabling tests using tmt
Publication date: 2020-08-29
Playlist: Nest with Fedora 2020
Description: 
	The talk will give a concise and practical introduction to those who are interested to start experimenting with tmt.

Presented at Nest With Fedora 2020.
Captions: 
	00:00:02,240 --> 00:00:06,399
uh so uh welcome

00:00:03,919 --> 00:00:06,960
uh everybody to our session which is

00:00:06,399 --> 00:00:09,360
called

00:00:06,960 --> 00:00:11,679
enjoy creating executing and enabling

00:00:09,360 --> 00:00:14,160
tests using tmt

00:00:11,679 --> 00:00:15,040
uh which is a tool we've been working on

00:00:14,160 --> 00:00:18,800
for about

00:00:15,040 --> 00:00:18,800
almost an uh almost a year

00:00:19,039 --> 00:00:23,680
here we are mero uh me spectre and

00:00:22,240 --> 00:00:25,279
pavalvana

00:00:23,680 --> 00:00:27,039
and we will guide you through this

00:00:25,279 --> 00:00:30,400
presentation

00:00:27,039 --> 00:00:33,520
uh let's see if it works okay

00:00:30,400 --> 00:00:34,320
so the agent for today uh we would like

00:00:33,520 --> 00:00:36,880
to give

00:00:34,320 --> 00:00:38,000
some short introduction uh really really

00:00:36,880 --> 00:00:41,120
very short brief

00:00:38,000 --> 00:00:43,520
introduction and then spent uh

00:00:41,120 --> 00:00:45,120
most of the time with examples give you

00:00:43,520 --> 00:00:46,239
some real life examples some more

00:00:45,120 --> 00:00:48,079
examples

00:00:46,239 --> 00:00:49,600
then a bit of theory so that you

00:00:48,079 --> 00:00:51,440
understand uh

00:00:49,600 --> 00:00:53,199
some of the details a little bit in the

00:00:51,440 --> 00:00:56,399
details uh what is

00:00:53,199 --> 00:00:59,760
what is under the hood and then uh

00:00:56,399 --> 00:01:01,760
even more examples uh then some over ufc

00:00:59,760 --> 00:01:03,760
our infrastructure status

00:01:01,760 --> 00:01:05,119
uh some information about how you can

00:01:03,760 --> 00:01:09,119
get involved

00:01:05,119 --> 00:01:11,840
uh and give some space for questions

00:01:09,119 --> 00:01:12,720
uh and we encourage you anytime you have

00:01:11,840 --> 00:01:14,400
question

00:01:12,720 --> 00:01:16,240
anytime there is anything you don't

00:01:14,400 --> 00:01:19,119
understand you want to

00:01:16,240 --> 00:01:19,520
get get explained or whatever please

00:01:19,119 --> 00:01:22,479
just

00:01:19,520 --> 00:01:23,360
jump in and ask us it can be on the chat

00:01:22,479 --> 00:01:26,320
or even

00:01:23,360 --> 00:01:27,680
even audio and i just want to remind

00:01:26,320 --> 00:01:30,320
that tomorrow we will have

00:01:27,680 --> 00:01:32,400
also workshop if you would like to get

00:01:30,320 --> 00:01:36,159
some hands-on experience

00:01:32,400 --> 00:01:37,759
with tnt so uh

00:01:36,159 --> 00:01:39,520
we start with the introduction so my

00:01:37,759 --> 00:01:42,880
name is peter sprichal

00:01:39,520 --> 00:01:46,240
i'm from the operating system ci uh

00:01:42,880 --> 00:01:47,600
i'm work at redhead i love to improve

00:01:46,240 --> 00:01:49,840
tooling processes

00:01:47,600 --> 00:01:51,439
uh so that they are uh so they are

00:01:49,840 --> 00:01:54,640
efficient elegant and

00:01:51,439 --> 00:01:57,840
good uh and so that one can enjoy

00:01:54,640 --> 00:01:59,759
enjoy them to use give her to mira for a

00:01:57,840 --> 00:02:02,159
while hey hello everyone i'm miroskarti

00:01:59,759 --> 00:02:03,040
i work for testing farm team and also

00:02:02,159 --> 00:02:06,320
from red hat

00:02:03,040 --> 00:02:10,080
and i have been involved in uh ci uh

00:02:06,320 --> 00:02:13,280
or have been involved in creating ci 4l

00:02:10,080 --> 00:02:15,680
for the next couple of years and i give

00:02:13,280 --> 00:02:18,959
her to pablo

00:02:15,680 --> 00:02:22,560
hello my name is pavel valada i work

00:02:18,959 --> 00:02:25,840
in red hat uh in a ruby maintenance team

00:02:22,560 --> 00:02:29,120
and we mostly try to push

00:02:25,840 --> 00:02:32,879
our work upstream into fedora and

00:02:29,120 --> 00:02:36,720
that's our daily part of it but

00:02:32,879 --> 00:02:39,840
there's github as a forefront

00:02:36,720 --> 00:02:42,959
but there's no fedora there so this is a

00:02:39,840 --> 00:02:42,959
crossover for me

00:02:45,840 --> 00:02:53,200
okay uh so thanks pavel

00:02:49,200 --> 00:02:56,239
and now we continue uh we start with why

00:02:53,200 --> 00:02:59,040
so uh where we started why we started

00:02:56,239 --> 00:03:00,959
to work on this on this project at the

00:02:59,040 --> 00:03:04,000
beginning there were a couple of stories

00:03:00,959 --> 00:03:06,640
uh and here i picked some of the

00:03:04,000 --> 00:03:08,239
the the most important ones as a

00:03:06,640 --> 00:03:10,400
developer or tester

00:03:08,239 --> 00:03:12,000
i want to i want an easy way how to

00:03:10,400 --> 00:03:15,519
contribute tests

00:03:12,000 --> 00:03:17,040
uh because um finding out how

00:03:15,519 --> 00:03:19,200
how tests should be configured how the

00:03:17,040 --> 00:03:21,360
test has to be created

00:03:19,200 --> 00:03:23,599
how the syntax is and all that can be uh

00:03:21,360 --> 00:03:26,159
very complex and is sometimes complex

00:03:23,599 --> 00:03:28,000
uh second one as a developer tester i

00:03:26,159 --> 00:03:29,680
want to easily run tests in my preferred

00:03:28,000 --> 00:03:31,120
environment so usually

00:03:29,680 --> 00:03:32,959
people have different preferences

00:03:31,120 --> 00:03:34,720
someone prefers to run

00:03:32,959 --> 00:03:36,319
tests very quickly and local hosts

00:03:34,720 --> 00:03:37,200
someone in a container someone in a

00:03:36,319 --> 00:03:39,599
virtual

00:03:37,200 --> 00:03:41,200
machine we wanted to provide all of this

00:03:39,599 --> 00:03:43,440
flexibility

00:03:41,200 --> 00:03:45,200
uh i want to easily reproduce issue

00:03:43,440 --> 00:03:47,280
revealed by the testing tool it happens

00:03:45,200 --> 00:03:49,200
that in the ci there is a problem

00:03:47,280 --> 00:03:50,400
you want to debug you want to see where

00:03:49,200 --> 00:03:53,120
the problem was

00:03:50,400 --> 00:03:55,920
but it's difficult to reproduce the same

00:03:53,120 --> 00:03:58,879
environment in in the same way

00:03:55,920 --> 00:04:00,239
so tmt is looking also into this to make

00:03:58,879 --> 00:04:03,519
this consistent

00:04:00,239 --> 00:04:05,280
uh and the last two have more flexible

00:04:03,519 --> 00:04:06,480
test execution metadata stored at a

00:04:05,280 --> 00:04:08,799
single place

00:04:06,480 --> 00:04:10,239
we were fighting with this little bit of

00:04:08,799 --> 00:04:12,799
uh inside red hat

00:04:10,239 --> 00:04:14,080
uh because we have scattered metadata on

00:04:12,799 --> 00:04:15,840
several places

00:04:14,080 --> 00:04:17,199
something is good in a different gate in

00:04:15,840 --> 00:04:17,840
the test case management system and we

00:04:17,199 --> 00:04:20,560
wanted to have

00:04:17,840 --> 00:04:21,359
some everything on one place ideally in

00:04:20,560 --> 00:04:24,080
git

00:04:21,359 --> 00:04:26,160
and uh that it should be human friendly

00:04:24,080 --> 00:04:29,440
unified and concise

00:04:26,160 --> 00:04:33,680
so i jumped next and give

00:04:29,440 --> 00:04:38,320
a very uh high level overview like

00:04:33,680 --> 00:04:40,960
about the plan so we had this

00:04:38,320 --> 00:04:42,240
presentation last year on flock and

00:04:40,960 --> 00:04:44,639
because we received a

00:04:42,240 --> 00:04:46,400
positive feedback for for the proposed

00:04:44,639 --> 00:04:48,080
uh for for the idea how

00:04:46,400 --> 00:04:50,960
how to use this how to improve this

00:04:48,080 --> 00:04:54,560
configuration how to make it more simple

00:04:50,960 --> 00:04:57,919
uh so uh here is uh

00:04:54,560 --> 00:05:00,560
where we are so first as i mentioned

00:04:57,919 --> 00:05:02,720
we would we want to store all this

00:05:00,560 --> 00:05:05,440
execution metadata at one place

00:05:02,720 --> 00:05:06,479
in plain text human readable and

00:05:05,440 --> 00:05:08,400
versioned

00:05:06,479 --> 00:05:10,400
and the best place for it seems to be

00:05:08,400 --> 00:05:12,400
git we would like to

00:05:10,400 --> 00:05:14,639
to prevent any external dependencies for

00:05:12,400 --> 00:05:18,320
example test case management system

00:05:14,639 --> 00:05:20,240
we want to use an efficient format to

00:05:18,320 --> 00:05:22,800
store this configuration

00:05:20,240 --> 00:05:23,440
in order to prevent the duplication

00:05:22,800 --> 00:05:25,440
because

00:05:23,440 --> 00:05:27,120
if you have like hundreds of tests there

00:05:25,440 --> 00:05:27,919
are some common data you don't want to

00:05:27,120 --> 00:05:29,840
duplicate

00:05:27,919 --> 00:05:32,000
in the plain text files uh again and

00:05:29,840 --> 00:05:34,639
again so we used fmfx

00:05:32,000 --> 00:05:36,720
fmf which is a flexible metadata format

00:05:34,639 --> 00:05:39,199
basically yaml plus a hierarchy

00:05:36,720 --> 00:05:40,400
and inheritance elasticity we will i

00:05:39,199 --> 00:05:42,080
will be telling something about the

00:05:40,400 --> 00:05:44,639
features later

00:05:42,080 --> 00:05:46,560
uh so that is that is done and the tool

00:05:44,639 --> 00:05:49,759
is there it's a two in fedora

00:05:46,560 --> 00:05:51,759
and it works we wanted to uh

00:05:49,759 --> 00:05:53,680
have a clear specification which would

00:05:51,759 --> 00:05:57,039
describe how the things should work

00:05:53,680 --> 00:06:00,319
and we dedicated quite some time to

00:05:57,039 --> 00:06:00,720
uh design this well so here on the link

00:06:00,319 --> 00:06:02,720
you can

00:06:00,720 --> 00:06:04,240
you can click and see the metadata

00:06:02,720 --> 00:06:07,280
specification which shows

00:06:04,240 --> 00:06:07,600
uh we show some details about it uh we

00:06:07,280 --> 00:06:10,000
are

00:06:07,600 --> 00:06:10,639
constantly working on that and then the

00:06:10,000 --> 00:06:14,000
next step

00:06:10,639 --> 00:06:16,560
is the tmt tool so to have something

00:06:14,000 --> 00:06:18,319
for users so that they are able to very

00:06:16,560 --> 00:06:21,360
easily create new tests

00:06:18,319 --> 00:06:22,000
execute them on on your laptop debug

00:06:21,360 --> 00:06:24,560
them

00:06:22,000 --> 00:06:26,080
enable them in the ci and generally

00:06:24,560 --> 00:06:29,280
maintain them

00:06:26,080 --> 00:06:32,800
and so here we are we have the tmt tool

00:06:29,280 --> 00:06:35,280
some proof of concept

00:06:32,800 --> 00:06:36,720
and we want to share it with you and and

00:06:35,280 --> 00:06:39,840
get a feedback

00:06:36,720 --> 00:06:44,160
and the next steps uh we want to

00:06:39,840 --> 00:06:46,080
enable this uh consistent configuration

00:06:44,160 --> 00:06:47,680
on several places across products for

00:06:46,080 --> 00:06:48,560
testing on github we already have

00:06:47,680 --> 00:06:50,319
something there

00:06:48,560 --> 00:06:52,000
for testing rail we have something

00:06:50,319 --> 00:06:53,759
internally for fedora

00:06:52,000 --> 00:06:55,520
we are working on that to make the

00:06:53,759 --> 00:06:57,680
pipeline available for send to us and

00:06:55,520 --> 00:07:01,039
maybe more

00:06:57,680 --> 00:07:04,400
and i think there was enough uh enough

00:07:01,039 --> 00:07:07,440
theory and start so let's uh let's see

00:07:04,400 --> 00:07:10,880
um the first steps so

00:07:07,440 --> 00:07:12,319
if you start uh working uh if you want

00:07:10,880 --> 00:07:14,319
to start working with tmt

00:07:12,319 --> 00:07:15,360
you just install it there is a package

00:07:14,319 --> 00:07:18,800
in fedora so

00:07:15,360 --> 00:07:19,840
just dnf install tmt there are some

00:07:18,800 --> 00:07:22,400
options

00:07:19,840 --> 00:07:25,360
the tmt is a minimal package which has

00:07:22,400 --> 00:07:28,080
some some basic the core functionality

00:07:25,360 --> 00:07:28,720
but because the provisioners have some

00:07:28,080 --> 00:07:31,440
like

00:07:28,720 --> 00:07:32,319
large set of dependencies there are some

00:07:31,440 --> 00:07:34,080
packages

00:07:32,319 --> 00:07:35,520
so if you want to run tests in container

00:07:34,080 --> 00:07:36,479
you would install tmt provision

00:07:35,520 --> 00:07:38,560
container

00:07:36,479 --> 00:07:39,840
if you would like to just under virtual

00:07:38,560 --> 00:07:41,360
machine you would install empty

00:07:39,840 --> 00:07:44,560
provision virtual

00:07:41,360 --> 00:07:46,400
and the tmt all is special sub packaging

00:07:44,560 --> 00:07:48,639
depends on everything so you will

00:07:46,400 --> 00:07:50,400
you get everything which we currently

00:07:48,639 --> 00:07:53,840
have

00:07:50,400 --> 00:07:56,800
okay um so uh let's see

00:07:53,840 --> 00:07:59,840
so far the sound is okay can you hear me

00:07:56,800 --> 00:07:59,840
no problem

00:08:00,240 --> 00:08:04,560
okay fine so uh the first command the

00:08:03,120 --> 00:08:06,319
shortest one

00:08:04,560 --> 00:08:07,840
as i promised i will be giving a lot of

00:08:06,319 --> 00:08:11,199
examples so

00:08:07,840 --> 00:08:13,360
tmt uh if you uh

00:08:11,199 --> 00:08:15,280
enter a repository where you have

00:08:13,360 --> 00:08:18,319
metadata or already stored

00:08:15,280 --> 00:08:21,440
you can run tmt and it will uh

00:08:18,319 --> 00:08:23,199
it would look around and tell you what's

00:08:21,440 --> 00:08:25,360
what's available in the repository so

00:08:23,199 --> 00:08:27,440
here we see i'm testing on the tmt

00:08:25,360 --> 00:08:30,319
because we have a lot of metadata here

00:08:27,440 --> 00:08:31,520
there are uh almost 30 tests uh around

00:08:30,319 --> 00:08:34,560
20 plans

00:08:31,520 --> 00:08:37,519
and 140 stories so

00:08:34,560 --> 00:08:38,959
that's um the first thing you you you

00:08:37,519 --> 00:08:39,760
would do when you come to a repository

00:08:38,959 --> 00:08:42,719
to check

00:08:39,760 --> 00:08:45,279
what's what's there now to get a very

00:08:42,719 --> 00:08:48,480
quick start with your component

00:08:45,279 --> 00:08:51,120
uh there is this init command

00:08:48,480 --> 00:08:52,720
which does the basic initialization and

00:08:51,120 --> 00:08:55,839
it has templates

00:08:52,720 --> 00:08:57,200
so if you're starting uh with uh with

00:08:55,839 --> 00:08:58,720
your company you would like to enable

00:08:57,200 --> 00:09:00,880
some basic small tests

00:08:58,720 --> 00:09:03,200
the only thing you need to do is to

00:09:00,880 --> 00:09:06,080
enter your kid repo

00:09:03,200 --> 00:09:07,040
make this initialization and you you

00:09:06,080 --> 00:09:09,519
have started

00:09:07,040 --> 00:09:10,160
so i will show how this could work for

00:09:09,519 --> 00:09:13,600
you so

00:09:10,160 --> 00:09:15,920
i create something like let's say

00:09:13,600 --> 00:09:17,360
this is this is a new repository and

00:09:15,920 --> 00:09:22,399
there's nothing here

00:09:17,360 --> 00:09:25,600
and i do tmt in it minus team mini

00:09:22,399 --> 00:09:28,080
so what happened uh

00:09:25,600 --> 00:09:28,880
here here you see there was a directory

00:09:28,080 --> 00:09:32,000
created

00:09:28,880 --> 00:09:34,800
uh the template called mini was used

00:09:32,000 --> 00:09:36,720
and this uh this file was created so you

00:09:34,800 --> 00:09:39,680
see there's directory plans and there is

00:09:36,720 --> 00:09:40,160
example plan this is intentionally very

00:09:39,680 --> 00:09:43,519
short

00:09:40,160 --> 00:09:46,640
because we wanted uh the simple

00:09:43,519 --> 00:09:47,279
use case uh very short so uh that's what

00:09:46,640 --> 00:09:50,800
uh

00:09:47,279 --> 00:09:51,920
i'm showing here uh that was one of the

00:09:50,800 --> 00:09:53,839
motivation

00:09:51,920 --> 00:09:56,480
if you start with testing you don't want

00:09:53,839 --> 00:09:59,680
to learn much stuff you just want to

00:09:56,480 --> 00:10:01,839
make something working so this is

00:09:59,680 --> 00:10:03,279
the simple uh simple config how to

00:10:01,839 --> 00:10:05,519
enable testing

00:10:03,279 --> 00:10:06,560
uh this basic smoke test and the summary

00:10:05,519 --> 00:10:10,240
part is

00:10:06,560 --> 00:10:11,360
optional so these two lines uh are the

00:10:10,240 --> 00:10:14,320
minimal config

00:10:11,360 --> 00:10:15,920
so if you create a file like this

00:10:14,320 --> 00:10:19,040
execute

00:10:15,920 --> 00:10:22,160
colon and script tmd miners minus help

00:10:19,040 --> 00:10:25,519
uh works you should should just

00:10:22,160 --> 00:10:28,800
shoot just around so here if i

00:10:25,519 --> 00:10:32,079
if i look around tmp it says there's

00:10:28,800 --> 00:10:35,600
there's one plan uh now

00:10:32,079 --> 00:10:38,880
um if you want to run again

00:10:35,600 --> 00:10:41,519
very common use case we wanted this

00:10:38,880 --> 00:10:43,279
way if you come to a repository

00:10:41,519 --> 00:10:44,880
everything is configured and prepared

00:10:43,279 --> 00:10:46,000
you would like to run the test it should

00:10:44,880 --> 00:10:49,360
be super simple to

00:10:46,000 --> 00:10:50,160
run it so tmt run is all what you need

00:10:49,360 --> 00:10:53,279
to do

00:10:50,160 --> 00:10:55,760
so let's see what will happen

00:10:53,279 --> 00:10:56,720
i see like it might be a little bit slow

00:10:55,760 --> 00:11:00,480
because

00:10:56,720 --> 00:11:04,160
this is uh by default running tests in a

00:11:00,480 --> 00:11:07,279
virtual machine to make make it safe and

00:11:04,160 --> 00:11:09,440
make sure that your uh that your machine

00:11:07,279 --> 00:11:10,560
is not affected or broken by by some

00:11:09,440 --> 00:11:14,320
destructive

00:11:10,560 --> 00:11:18,480
destructive tests so uh here uh

00:11:14,320 --> 00:11:21,200
you see uh a virtual machine is booting

00:11:18,480 --> 00:11:22,000
uh i have the uh we are using the test

00:11:21,200 --> 00:11:24,000
cloud

00:11:22,000 --> 00:11:26,560
uh python test card from the fedora qa

00:11:24,000 --> 00:11:30,720
guys uh which takes care of

00:11:26,560 --> 00:11:34,320
uh fetching fetching the the images

00:11:30,720 --> 00:11:37,760
when they are needed and then

00:11:34,320 --> 00:11:41,120
firing up the the vm this is done

00:11:37,760 --> 00:11:42,880
through through liberty so it seems like

00:11:41,120 --> 00:11:45,040
the video is taking uh

00:11:42,880 --> 00:11:46,800
some part of my machine and this is this

00:11:45,040 --> 00:11:50,079
is getting quite slow

00:11:46,800 --> 00:11:52,720
i will be continuing and

00:11:50,079 --> 00:11:54,480
if i may when we are waiting uh

00:11:52,720 --> 00:11:58,240
shameless plug

00:11:54,480 --> 00:12:01,920
when the vagrant plugin is uh finished

00:11:58,240 --> 00:12:05,760
uh converting to dynamic api

00:12:01,920 --> 00:12:07,920
uh you'll be able to use like everything

00:12:05,760 --> 00:12:10,320
that vagrant supports for your provision

00:12:07,920 --> 00:12:10,320
as well

00:12:11,600 --> 00:12:15,600
multiple plugins you can use for

00:12:13,600 --> 00:12:18,160
virtualization

00:12:15,600 --> 00:12:19,200
super supra thanks thanks for the note

00:12:18,160 --> 00:12:21,680
uh pablo

00:12:19,200 --> 00:12:22,560
so here we see uh everything went well

00:12:21,680 --> 00:12:25,040
you see

00:12:22,560 --> 00:12:26,399
the you have the impression how the how

00:12:25,040 --> 00:12:28,000
the steps might be work you see that

00:12:26,399 --> 00:12:30,079
there's some discover provision prepare

00:12:28,000 --> 00:12:32,160
execute report and finish

00:12:30,079 --> 00:12:33,200
and we see there's uh there's an error

00:12:32,160 --> 00:12:36,240
uh and we

00:12:33,200 --> 00:12:37,519
are uh like what happened i would like

00:12:36,240 --> 00:12:39,760
to see what happened

00:12:37,519 --> 00:12:41,440
and now you see uh oh i could i could

00:12:39,760 --> 00:12:42,480
run the job once more with more

00:12:41,440 --> 00:12:44,480
verbosity

00:12:42,480 --> 00:12:46,399
but that would take another minute or

00:12:44,480 --> 00:12:49,839
two but what we can do

00:12:46,399 --> 00:12:51,279
is uh just give me give me the results

00:12:49,839 --> 00:12:54,079
from the last from the

00:12:51,279 --> 00:12:54,560
last round so tmt run minus minus last

00:12:54,079 --> 00:12:57,519
uh

00:12:54,560 --> 00:12:58,000
give me a report if you see report it

00:12:57,519 --> 00:13:01,279
would be

00:12:58,000 --> 00:13:03,920
uh like this very uh very

00:13:01,279 --> 00:13:05,760
uh concise but if you're interested in

00:13:03,920 --> 00:13:08,160
some more details you can add some more

00:13:05,760 --> 00:13:11,200
verbosity to it so you see

00:13:08,160 --> 00:13:12,480
this is uh this is the lock where you

00:13:11,200 --> 00:13:15,680
could uh have a look

00:13:12,480 --> 00:13:16,320
at the log and here is uh on the third

00:13:15,680 --> 00:13:19,279
level

00:13:16,320 --> 00:13:20,000
uh sorry on the third level there would

00:13:19,279 --> 00:13:22,800
be

00:13:20,000 --> 00:13:24,480
there would be the complete output uh

00:13:22,800 --> 00:13:26,000
where you see like the tmt there is no

00:13:24,480 --> 00:13:28,720
such file directory so

00:13:26,000 --> 00:13:29,360
oh of course this does not work because

00:13:28,720 --> 00:13:32,399
uh

00:13:29,360 --> 00:13:35,760
it's a it's a cleaner virtual machine

00:13:32,399 --> 00:13:37,040
and and the command is not installed

00:13:35,760 --> 00:13:40,320
there so let's

00:13:37,040 --> 00:13:43,760
let's change this for i don't know by

00:13:40,320 --> 00:13:45,839
bash version and and this this would

00:13:43,760 --> 00:13:47,120
something like that would work but

00:13:45,839 --> 00:13:50,399
because it's slow i

00:13:47,120 --> 00:13:51,920
would skip it for now so let's jump uh

00:13:50,399 --> 00:13:55,199
let's jump forward

00:13:51,920 --> 00:13:58,800
uh minus minus help is your friend

00:13:55,199 --> 00:14:00,320
so if you don't know any if you want to

00:13:58,800 --> 00:14:02,800
know some more details

00:14:00,320 --> 00:14:03,760
about about any of the sub commands that

00:14:02,800 --> 00:14:06,800
tmt provides

00:14:03,760 --> 00:14:08,000
just use minus minus help so here uh i'm

00:14:06,800 --> 00:14:11,600
giving a tmt

00:14:08,000 --> 00:14:12,800
run so for running tests tmt run minus

00:14:11,600 --> 00:14:15,440
minus help

00:14:12,800 --> 00:14:16,240
uh would give you uh the detailed

00:14:15,440 --> 00:14:19,360
description

00:14:16,240 --> 00:14:22,160
about the options and here are

00:14:19,360 --> 00:14:24,160
is also the list of available commands

00:14:22,160 --> 00:14:26,720
so what are these commands for

00:14:24,160 --> 00:14:27,680
uh they describe the steps as you've

00:14:26,720 --> 00:14:30,240
seen already

00:14:27,680 --> 00:14:31,279
there are several steps which but you go

00:14:30,240 --> 00:14:34,399
when you run tests

00:14:31,279 --> 00:14:36,079
the first one is discover it is used for

00:14:34,399 --> 00:14:37,680
gathering information about test cases

00:14:36,079 --> 00:14:38,480
to be executed the second one is

00:14:37,680 --> 00:14:40,480
provision

00:14:38,480 --> 00:14:42,480
it prepares the the environment the

00:14:40,480 --> 00:14:43,760
guest the vm the container uses

00:14:42,480 --> 00:14:46,000
localhost

00:14:43,760 --> 00:14:47,199
then there's the third one it's prepare

00:14:46,000 --> 00:14:48,800
prepare

00:14:47,199 --> 00:14:50,240
prepares the environment for testing

00:14:48,800 --> 00:14:51,680
installing some packaging starting

00:14:50,240 --> 00:14:54,160
services and such stuff

00:14:51,680 --> 00:14:55,199
then you execute tests then you report

00:14:54,160 --> 00:14:57,360
results

00:14:55,199 --> 00:14:58,800
and you finish and we want it for each

00:14:57,360 --> 00:15:00,399
of these steps to have multiple

00:14:58,800 --> 00:15:02,480
implementations

00:15:00,399 --> 00:15:04,480
uh there are some additional commands

00:15:02,480 --> 00:15:05,920
like logging which provides user with

00:15:04,480 --> 00:15:08,160
interactive shop on the guest

00:15:05,920 --> 00:15:09,279
so that you can debug and plans and

00:15:08,160 --> 00:15:12,399
tests which can be used

00:15:09,279 --> 00:15:15,440
for selecting plans to be run

00:15:12,399 --> 00:15:15,920
and tests which should be run and if you

00:15:15,440 --> 00:15:18,160
are uh

00:15:15,920 --> 00:15:20,079
interested in more details about some of

00:15:18,160 --> 00:15:22,880
the some of the methods uh

00:15:20,079 --> 00:15:24,800
some of the plugins so you do of the

00:15:22,880 --> 00:15:25,920
steps sorry tmt run provision minus

00:15:24,800 --> 00:15:29,759
minus health

00:15:25,920 --> 00:15:30,639
so the same thing uh provision minus

00:15:29,759 --> 00:15:33,839
minus help

00:15:30,639 --> 00:15:36,639
would give you information about the

00:15:33,839 --> 00:15:38,079
provisioning options and here we see uh

00:15:36,639 --> 00:15:40,320
what's what's available

00:15:38,079 --> 00:15:41,519
we can connect to a provision guest we

00:15:40,320 --> 00:15:44,079
can use the local

00:15:41,519 --> 00:15:44,800
localhost we can use one-minute back-end

00:15:44,079 --> 00:15:48,880
we can use

00:15:44,800 --> 00:15:51,759
a container or virtual machine and again

00:15:48,880 --> 00:15:52,399
if you want to know some more you can

00:15:51,759 --> 00:15:55,600
say

00:15:52,399 --> 00:15:58,000
i would be interested how

00:15:55,600 --> 00:15:59,040
virtual options or what virtual options

00:15:58,000 --> 00:16:02,399
are available

00:15:59,040 --> 00:16:05,440
so here you see the options and also

00:16:02,399 --> 00:16:07,120
at the top you can see some uh examples

00:16:05,440 --> 00:16:08,639
for inspiration how to write a

00:16:07,120 --> 00:16:11,759
configuration

00:16:08,639 --> 00:16:13,759
uh in the plan but we will get to that

00:16:11,759 --> 00:16:15,199
so that's that's the example with the

00:16:13,759 --> 00:16:17,279
minus minus how virtual

00:16:15,199 --> 00:16:18,720
so if you specify the uh the particular

00:16:17,279 --> 00:16:22,160
method you would get

00:16:18,720 --> 00:16:22,959
some more information okay so that was

00:16:22,160 --> 00:16:26,000
the

00:16:22,959 --> 00:16:29,440
the simple uh the simple uh

00:16:26,000 --> 00:16:30,320
way the most uh simple example and now

00:16:29,440 --> 00:16:34,240
let's look

00:16:30,320 --> 00:16:37,279
on tmt run what this subcommand can

00:16:34,240 --> 00:16:40,639
do and what options we have so as

00:16:37,279 --> 00:16:41,680
i mentioned uh the first step is called

00:16:40,639 --> 00:16:44,720
discover

00:16:41,680 --> 00:16:45,519
discover step is used for gathering

00:16:44,720 --> 00:16:47,600
tests

00:16:45,519 --> 00:16:49,040
which will be run and it covers one of

00:16:47,600 --> 00:16:50,880
the user scenarios

00:16:49,040 --> 00:16:52,560
please just tell me what would be wrong

00:16:50,880 --> 00:16:54,320
i don't want to run the test but just

00:16:52,560 --> 00:16:57,440
just tell me what will happen

00:16:54,320 --> 00:16:59,040
so uh if i go uh

00:16:57,440 --> 00:17:02,639
let's let's let's have something more

00:16:59,040 --> 00:17:03,440
interesting tmt run discover and the tmp

00:17:02,639 --> 00:17:07,039
report

00:17:03,440 --> 00:17:09,760
and you would see you would see uh

00:17:07,039 --> 00:17:11,919
what uh what are the plans there and

00:17:09,760 --> 00:17:15,760
what are the tests discovered

00:17:11,919 --> 00:17:17,280
and uh and that happens for all the

00:17:15,760 --> 00:17:20,400
other plants

00:17:17,280 --> 00:17:22,720
for all the plants now you can select

00:17:20,400 --> 00:17:23,600
a particular plant so tnt run discover

00:17:22,720 --> 00:17:26,559
plant name

00:17:23,600 --> 00:17:27,439
plants basic would give you for that one

00:17:26,559 --> 00:17:30,240
and

00:17:27,439 --> 00:17:30,559
you can also enable verbosity to see

00:17:30,240 --> 00:17:33,440
some

00:17:30,559 --> 00:17:34,000
some some more details so here i could

00:17:33,440 --> 00:17:37,600
say

00:17:34,000 --> 00:17:38,320
plan name brand name plans basic let's

00:17:37,600 --> 00:17:42,320
say

00:17:38,320 --> 00:17:45,679
and i i would do some more verbosity

00:17:42,320 --> 00:17:48,080
so you would see

00:17:45,679 --> 00:17:49,360
you would see for that uh the list of

00:17:48,080 --> 00:17:52,240
tests which

00:17:49,360 --> 00:17:54,960
which go would go like this so that

00:17:52,240 --> 00:17:57,600
would be for the discover step

00:17:54,960 --> 00:17:58,720
the next one is provision uh in the

00:17:57,600 --> 00:18:01,440
previous example

00:17:58,720 --> 00:18:02,640
we selected a step which means that

00:18:01,440 --> 00:18:05,600
selected step would be

00:18:02,640 --> 00:18:07,520
would be run but here we see apply the

00:18:05,600 --> 00:18:10,720
option minus minus all which means

00:18:07,520 --> 00:18:14,559
run all steps but modify some so

00:18:10,720 --> 00:18:16,799
here uh what we have here is

00:18:14,559 --> 00:18:17,600
i would like to run all steps but i

00:18:16,799 --> 00:18:19,440
would like to

00:18:17,600 --> 00:18:21,280
modify the default provision which is

00:18:19,440 --> 00:18:24,640
virtual and instead

00:18:21,280 --> 00:18:27,200
uh use a user container for that so

00:18:24,640 --> 00:18:28,240
uh let's let's try i have a smoke test

00:18:27,200 --> 00:18:32,160
here

00:18:28,240 --> 00:18:35,760
and i would so let's let's try to run

00:18:32,160 --> 00:18:39,039
running smoke and we will be running all

00:18:35,760 --> 00:18:43,200
or minus a and the provision

00:18:39,039 --> 00:18:46,880
would be container so minus minus how

00:18:43,200 --> 00:18:49,600
or minus h container uh so

00:18:46,880 --> 00:18:50,400
this is this is how the smoke test will

00:18:49,600 --> 00:18:52,240
go

00:18:50,400 --> 00:18:54,720
you see the provision is done in

00:18:52,240 --> 00:18:57,039
container it's much faster

00:18:54,720 --> 00:18:58,320
the test works there because i have

00:18:57,039 --> 00:19:01,360
prepared a container with

00:18:58,320 --> 00:19:03,600
with tmt already soviet so it works like

00:19:01,360 --> 00:19:06,160
that

00:19:03,600 --> 00:19:07,840
so that's about choosing container you

00:19:06,160 --> 00:19:11,280
can specify the image

00:19:07,840 --> 00:19:15,280
by default the latest feature is used

00:19:11,280 --> 00:19:18,240
now virtual as i mentioned tmt runner

00:19:15,280 --> 00:19:19,600
by default runs in vm to make it to make

00:19:18,240 --> 00:19:21,360
it safe

00:19:19,600 --> 00:19:23,039
but the planner the configuration can

00:19:21,360 --> 00:19:24,720
change that you can

00:19:23,039 --> 00:19:26,720
but from the command line you can

00:19:24,720 --> 00:19:27,600
override the configuration so if you

00:19:26,720 --> 00:19:30,559
have like

00:19:27,600 --> 00:19:31,440
uh like me because i want to i want to

00:19:30,559 --> 00:19:34,480
test

00:19:31,440 --> 00:19:38,000
quickly i have provision local set

00:19:34,480 --> 00:19:39,840
uh so one once you need to you can you

00:19:38,000 --> 00:19:41,039
can override this default from from the

00:19:39,840 --> 00:19:44,480
command line

00:19:41,039 --> 00:19:47,200
and again specify the image uh

00:19:44,480 --> 00:19:48,880
using uh running tests local machine a

00:19:47,200 --> 00:19:51,600
very very

00:19:48,880 --> 00:19:53,679
basically very the same thing just just

00:19:51,600 --> 00:19:56,640
be aware that if the test is not safe

00:19:53,679 --> 00:19:57,120
you can you can break your stuff so tmt

00:19:56,640 --> 00:20:00,400
uh

00:19:57,120 --> 00:20:03,440
smoke i would say run on local machine

00:20:00,400 --> 00:20:06,720
so it would do it with the run the smoke

00:20:03,440 --> 00:20:09,760
completely on the local machine

00:20:06,720 --> 00:20:11,840
fine so that's about local uh

00:20:09,760 --> 00:20:12,960
we have a connect plugin which allows

00:20:11,840 --> 00:20:15,120
you to connect to an

00:20:12,960 --> 00:20:17,760
already running guest either with a

00:20:15,120 --> 00:20:20,480
private key or a login and password

00:20:17,760 --> 00:20:21,200
and that would be it uh and i mentioned

00:20:20,480 --> 00:20:24,080
also one minute

00:20:21,200 --> 00:20:25,520
but that's that's available only for uh

00:20:24,080 --> 00:20:26,000
for those who have the vulnerability

00:20:25,520 --> 00:20:29,039
beckon

00:20:26,000 --> 00:20:31,200
available now let's see some

00:20:29,039 --> 00:20:32,799
sorry uh some examples for the prepare

00:20:31,200 --> 00:20:35,200
step

00:20:32,799 --> 00:20:36,080
uh any questions so far everything is

00:20:35,200 --> 00:20:38,559
working

00:20:36,080 --> 00:20:40,320
i'm answering everything on the chat so

00:20:38,559 --> 00:20:43,520
everything for him

00:20:40,320 --> 00:20:47,120
okay uh so for the prepare step uh

00:20:43,520 --> 00:20:47,760
it's quite frequent or quite common that

00:20:47,120 --> 00:20:50,559
you

00:20:47,760 --> 00:20:52,000
you need to install uh packages on the

00:20:50,559 --> 00:20:54,799
system under test

00:20:52,000 --> 00:20:55,679
so uh we have a plug-in uh plug-in

00:20:54,799 --> 00:20:59,200
install

00:20:55,679 --> 00:21:01,280
which is uh for now able to prepare

00:20:59,200 --> 00:21:04,159
the machine by installing packages from

00:21:01,280 --> 00:21:06,799
the from the default repositories

00:21:04,159 --> 00:21:08,320
you would do just tmg run minus minus or

00:21:06,799 --> 00:21:10,799
prepare

00:21:08,320 --> 00:21:12,400
how install and package for example

00:21:10,799 --> 00:21:15,600
httpd

00:21:12,400 --> 00:21:18,159
you can enable a copy repository and

00:21:15,600 --> 00:21:18,799
install the package from there you can

00:21:18,159 --> 00:21:22,320
also

00:21:18,799 --> 00:21:23,200
uh you can also build a fresh fresh rpms

00:21:22,320 --> 00:21:26,799
which are

00:21:23,200 --> 00:21:30,080
like local so let's see i can do

00:21:26,799 --> 00:21:33,200
make rpm that will create uh uh

00:21:30,080 --> 00:21:36,640
that will create uh rpms locally

00:21:33,200 --> 00:21:38,960
and i could do uh installing these rpms

00:21:36,640 --> 00:21:40,400
uh inside the container so that so that

00:21:38,960 --> 00:21:43,200
there is everything

00:21:40,400 --> 00:21:44,799
so that there is everything fresh so uh

00:21:43,200 --> 00:21:47,360
the previous

00:21:44,799 --> 00:21:48,640
the previous stuff which which i did uh

00:21:47,360 --> 00:21:51,760
was

00:21:48,640 --> 00:21:52,799
uh running locally uh and then the

00:21:51,760 --> 00:21:55,919
container

00:21:52,799 --> 00:21:59,520
and i could do uh prepare uh

00:21:55,919 --> 00:22:03,520
minus how has install

00:21:59,520 --> 00:22:06,240
and now i see

00:22:03,520 --> 00:22:06,880
that the for example the tmt package is

00:22:06,240 --> 00:22:10,480
here

00:22:06,880 --> 00:22:14,080
so i can provide the i can provide them

00:22:10,480 --> 00:22:16,400
i can provide the full path and uh

00:22:14,080 --> 00:22:17,280
if everything goes well it will be

00:22:16,400 --> 00:22:19,919
provisioned

00:22:17,280 --> 00:22:21,360
then there's a preparer prepare it it

00:22:19,919 --> 00:22:24,400
runs the install

00:22:21,360 --> 00:22:25,440
now something happens uh if you are

00:22:24,400 --> 00:22:28,880
interested

00:22:25,440 --> 00:22:31,520
in more you can enable the variables

00:22:28,880 --> 00:22:33,919
output or debug output verbose is

00:22:31,520 --> 00:22:36,320
basically for users if you want to

00:22:33,919 --> 00:22:37,360
see some more details which are usually

00:22:36,320 --> 00:22:40,480
useful for

00:22:37,360 --> 00:22:41,039
for those who who run run the tests and

00:22:40,480 --> 00:22:44,480
the debug

00:22:41,039 --> 00:22:45,600
output is is usually useful for those

00:22:44,480 --> 00:22:48,880
who who want to

00:22:45,600 --> 00:22:50,640
debug the problems so here you see

00:22:48,880 --> 00:22:52,720
it went well one package was installed

00:22:50,640 --> 00:22:54,480
and reinstalled

00:22:52,720 --> 00:22:55,919
because just to make sure that the

00:22:54,480 --> 00:22:58,240
latest version is there

00:22:55,919 --> 00:23:00,960
and you could do also to install all

00:22:58,240 --> 00:23:03,360
rpms from uh from a directory

00:23:00,960 --> 00:23:04,159
from a directory so just it will take

00:23:03,360 --> 00:23:07,120
some time

00:23:04,159 --> 00:23:08,880
but i can do it like this you can do

00:23:07,120 --> 00:23:10,640
install from the directory

00:23:08,880 --> 00:23:12,240
and let's be a little bit more variables

00:23:10,640 --> 00:23:12,720
now so that we see what happens what's

00:23:12,240 --> 00:23:15,840
happening

00:23:12,720 --> 00:23:16,720
under the hood so again it will take

00:23:15,840 --> 00:23:19,360
some time

00:23:16,720 --> 00:23:20,080
it discovers what's available it

00:23:19,360 --> 00:23:23,200
provisions

00:23:20,080 --> 00:23:24,159
and does the preparation here you here

00:23:23,200 --> 00:23:27,760
you see that the

00:23:24,159 --> 00:23:30,400
the rpms are copied and

00:23:27,760 --> 00:23:33,360
then they will be they will be all of

00:23:30,400 --> 00:23:33,360
them will be installed

00:23:34,159 --> 00:23:38,080
and reinstalled because there was no uh

00:23:36,400 --> 00:23:41,039
it's not possible in the enough to like

00:23:38,080 --> 00:23:42,159
do the wrench one step so that that's

00:23:41,039 --> 00:23:44,799
about installed

00:23:42,159 --> 00:23:46,480
we also have antibol so as you would

00:23:44,799 --> 00:23:47,440
expect if you provide a and simple

00:23:46,480 --> 00:23:50,000
playbook

00:23:47,440 --> 00:23:51,840
you can uh apply it on the on the guest

00:23:50,000 --> 00:23:55,039
so that it's prepared for testing

00:23:51,840 --> 00:23:57,520
and we have also a shell method uh

00:23:55,039 --> 00:23:59,679
which allows you to like run arbitrary

00:23:57,520 --> 00:24:02,080
arbitration commands there

00:23:59,679 --> 00:24:03,520
so i guess that would be about about

00:24:02,080 --> 00:24:08,480
prepare

00:24:03,520 --> 00:24:11,919
and now i would jump to the report step

00:24:08,480 --> 00:24:13,840
so here uh as i already uh you get

00:24:11,919 --> 00:24:15,200
you got already some glimpse of how this

00:24:13,840 --> 00:24:18,799
could work so

00:24:15,200 --> 00:24:21,919
uh the report step is used for giving an

00:24:18,799 --> 00:24:22,559
overview of of the results so for

00:24:21,919 --> 00:24:26,559
example

00:24:22,559 --> 00:24:30,480
uh let's let's let's see this

00:24:26,559 --> 00:24:32,799
so i run tmg run plan name plans helps

00:24:30,480 --> 00:24:34,320
uh so here we see everything went

00:24:32,799 --> 00:24:37,600
everything went well

00:24:34,320 --> 00:24:41,760
and the packages have been installed uh

00:24:37,600 --> 00:24:44,840
now let's see tmt run run name

00:24:41,760 --> 00:24:47,919
plant helps and let's

00:24:44,840 --> 00:24:50,720
uh so if i if i run it

00:24:47,919 --> 00:24:51,679
you see uh that you would you would uh

00:24:50,720 --> 00:24:54,960
you would be

00:24:51,679 --> 00:24:58,559
given just a an overview

00:24:54,960 --> 00:25:00,960
so like it's executed it

00:24:58,559 --> 00:25:02,000
it says like forgets executed but i

00:25:00,960 --> 00:25:05,200
would like to see

00:25:02,000 --> 00:25:08,320
uh see more so tmt tnt

00:25:05,200 --> 00:25:12,000
around last report would give you

00:25:08,320 --> 00:25:14,640
uh just just the overview

00:25:12,000 --> 00:25:15,120
but you can you can force to provide

00:25:14,640 --> 00:25:18,400
some

00:25:15,120 --> 00:25:21,360
some more verbals output so uh here

00:25:18,400 --> 00:25:21,840
with minus v and you you need to do

00:25:21,360 --> 00:25:23,440
force

00:25:21,840 --> 00:25:25,120
uh look at this for now we can improve

00:25:23,440 --> 00:25:27,919
that in the future but

00:25:25,120 --> 00:25:28,400
uh with the minus v you could you would

00:25:27,919 --> 00:25:31,360
see

00:25:28,400 --> 00:25:32,320
uh the the results of individual tests

00:25:31,360 --> 00:25:35,840
with the

00:25:32,320 --> 00:25:38,159
uh which two these you would see for

00:25:35,840 --> 00:25:38,880
each test uh a link to the log so that

00:25:38,159 --> 00:25:41,039
you can

00:25:38,880 --> 00:25:42,960
inspect it and and see if there is a

00:25:41,039 --> 00:25:45,279
file so that you can see what would

00:25:42,960 --> 00:25:47,120
happen there or you can provide three

00:25:45,279 --> 00:25:50,720
uh like level three variables and you

00:25:47,120 --> 00:25:53,919
see the whole output uh immediately

00:25:50,720 --> 00:25:56,640
and so that would be about the

00:25:53,919 --> 00:25:57,039
exam plus the first bunch of examples

00:25:56,640 --> 00:26:00,480
and

00:25:57,039 --> 00:26:04,159
now a little bit of theory so

00:26:00,480 --> 00:26:07,200
uh what is fmf uh

00:26:04,159 --> 00:26:09,919
we chose or we invented fmf

00:26:07,200 --> 00:26:10,960
uh to store metadata and plain text

00:26:09,919 --> 00:26:13,279
files

00:26:10,960 --> 00:26:14,480
so that everything is git it's close to

00:26:13,279 --> 00:26:17,279
the test code

00:26:14,480 --> 00:26:17,919
that's the source code it's basically

00:26:17,279 --> 00:26:20,480
yaml

00:26:17,919 --> 00:26:21,039
but we've added a couple of features one

00:26:20,480 --> 00:26:24,640
is

00:26:21,039 --> 00:26:26,159
hierarchy in addition to

00:26:24,640 --> 00:26:28,000
the possibility to have files in the

00:26:26,159 --> 00:26:29,679
higher in the file system hierarchy

00:26:28,000 --> 00:26:31,520
there is a virtual hierarchy which can

00:26:29,679 --> 00:26:34,559
be in the in the files

00:26:31,520 --> 00:26:37,919
uh there is implemented inheritance so

00:26:34,559 --> 00:26:39,440
you can define a value a key up in the

00:26:37,919 --> 00:26:40,480
in the hierarchy and it will be

00:26:39,440 --> 00:26:43,120
inherited

00:26:40,480 --> 00:26:43,679
and elasticity i will show the example

00:26:43,120 --> 00:26:45,760
that would be

00:26:43,679 --> 00:26:48,559
there will be probably better so here's

00:26:45,760 --> 00:26:50,640
the link for the project

00:26:48,559 --> 00:26:52,240
so we started the simple use case it

00:26:50,640 --> 00:26:54,320
should be simple uh

00:26:52,240 --> 00:26:56,159
and so so this is how it works uh it

00:26:54,320 --> 00:26:58,320
looks like basic camera

00:26:56,159 --> 00:27:00,000
uh you have a key value keyboard you can

00:26:58,320 --> 00:27:00,880
keep it giveaway and that's that's about

00:27:00,000 --> 00:27:03,919
it

00:27:00,880 --> 00:27:04,640
but uh the hierarchy as i uh as i

00:27:03,919 --> 00:27:08,240
mentioned

00:27:04,640 --> 00:27:11,279
you can provide a virtual hierarchy

00:27:08,240 --> 00:27:11,520
directly in a single file so if you have

00:27:11,279 --> 00:27:13,360
a

00:27:11,520 --> 00:27:14,559
couple of tests just a couple of tests

00:27:13,360 --> 00:27:16,559
you can have a single file and

00:27:14,559 --> 00:27:19,279
everything defined there

00:27:16,559 --> 00:27:20,080
but if it grows you can separate them

00:27:19,279 --> 00:27:23,200
and here

00:27:20,080 --> 00:27:25,360
this inheritance example shows how this

00:27:23,200 --> 00:27:27,440
how the the sharing values sharing the

00:27:25,360 --> 00:27:30,640
key key values can work

00:27:27,440 --> 00:27:32,960
so at the top we define the contact and

00:27:30,640 --> 00:27:33,760
tags and test which is common for for

00:27:32,960 --> 00:27:36,480
the tests

00:27:33,760 --> 00:27:38,559
and now we have two tests one is uh for

00:27:36,480 --> 00:27:40,799
downloading it takes three minutes

00:27:38,559 --> 00:27:42,480
to complete uh but the record jovana

00:27:40,799 --> 00:27:43,200
which have has a different summary it

00:27:42,480 --> 00:27:45,679
has uh

00:27:43,200 --> 00:27:47,279
uh it has to it has to have some some

00:27:45,679 --> 00:27:50,080
extended extended

00:27:47,279 --> 00:27:50,880
extended time so that's the inheritance

00:27:50,080 --> 00:27:52,640
part

00:27:50,880 --> 00:27:54,000
and now just a couple of words for the

00:27:52,640 --> 00:27:56,159
elasticity

00:27:54,000 --> 00:27:58,000
this is the feature because you can

00:27:56,159 --> 00:27:59,679
define this virtual hierarchy

00:27:58,000 --> 00:28:02,159
it means that you can have everything in

00:27:59,679 --> 00:28:04,640
a single file but once the project grows

00:28:02,159 --> 00:28:05,440
and you see oh it's too long there's not

00:28:04,640 --> 00:28:07,919
enough

00:28:05,440 --> 00:28:08,559
it's hard to maintain you just separate

00:28:07,919 --> 00:28:11,200
uh

00:28:08,559 --> 00:28:11,840
the one file into separate in multiple

00:28:11,200 --> 00:28:14,799
files

00:28:11,840 --> 00:28:16,480
or even multiple directories and the the

00:28:14,799 --> 00:28:19,039
hierarchy still works

00:28:16,480 --> 00:28:20,000
and um you don't have to change anything

00:28:19,039 --> 00:28:21,840
like the metadata

00:28:20,000 --> 00:28:23,360
are the same but you can move the files

00:28:21,840 --> 00:28:26,480
freely as you need

00:28:23,360 --> 00:28:28,960
so uh you can read maybe some more

00:28:26,480 --> 00:28:29,520
if you're interested in this concept uh

00:28:28,960 --> 00:28:33,600
the

00:28:29,520 --> 00:28:37,440
the fm documentation and

00:28:33,600 --> 00:28:40,320
now um to finish the the theory part

00:28:37,440 --> 00:28:41,840
and the metadata levels uh so the

00:28:40,320 --> 00:28:44,320
material specification

00:28:41,840 --> 00:28:45,039
defines a couple of levels because we

00:28:44,320 --> 00:28:48,960
found it it's

00:28:45,039 --> 00:28:50,320
it's important uh to give each use case

00:28:48,960 --> 00:28:53,760
a separate level

00:28:50,320 --> 00:28:56,640
to to prevent duplication and hello test

00:28:53,760 --> 00:28:57,360
sharing and such stuff so i will mention

00:28:56,640 --> 00:28:58,960
the level one

00:28:57,360 --> 00:29:00,720
are the core attributes which are common

00:28:58,960 --> 00:29:02,880
like summary description order which are

00:29:00,720 --> 00:29:04,640
this is like common common ground level

00:29:02,880 --> 00:29:06,960
one uh metadata we call

00:29:04,640 --> 00:29:08,080
those uh methods which are related to

00:29:06,960 --> 00:29:10,159
individual tests

00:29:08,080 --> 00:29:11,360
so for example test script it's path

00:29:10,159 --> 00:29:14,240
it's duration

00:29:11,360 --> 00:29:15,440
it's summary tags and and that stuff

00:29:14,240 --> 00:29:17,360
level two we call

00:29:15,440 --> 00:29:18,799
uh those methods which are related to

00:29:17,360 --> 00:29:21,600
plans this is

00:29:18,799 --> 00:29:23,279
like uh the set of steps which is

00:29:21,600 --> 00:29:24,559
describing how to prepare the

00:29:23,279 --> 00:29:27,120
environment how to provision it

00:29:24,559 --> 00:29:27,840
how to how to prepare the packages and

00:29:27,120 --> 00:29:31,279
how to

00:29:27,840 --> 00:29:33,600
execute this uh for for given artifact

00:29:31,279 --> 00:29:35,120
and recently also edit level 3 which is

00:29:33,600 --> 00:29:38,480
used for stories

00:29:35,120 --> 00:29:41,440
and this is like advanced stuff

00:29:38,480 --> 00:29:41,840
if you find yourself sometimes lost or

00:29:41,440 --> 00:29:43,679
like

00:29:41,840 --> 00:29:45,039
what what are all the features you would

00:29:43,679 --> 00:29:47,679
like to implement and what

00:29:45,039 --> 00:29:49,520
which what is already covered by tests

00:29:47,679 --> 00:29:52,080
and implementation and documentation

00:29:49,520 --> 00:29:52,960
so stories can be used for that uh a

00:29:52,080 --> 00:29:56,320
brief example

00:29:52,960 --> 00:29:58,320
of level one so this is example test

00:29:56,320 --> 00:29:59,360
here you see key values summary

00:29:58,320 --> 00:30:01,919
description

00:29:59,360 --> 00:30:02,720
path through test and the test script

00:30:01,919 --> 00:30:04,880
tier one

00:30:02,720 --> 00:30:06,320
used for for like like picking filtering

00:30:04,880 --> 00:30:10,000
tests tagging

00:30:06,320 --> 00:30:12,240
uh some tags should be single

00:30:10,000 --> 00:30:14,080
duration maximum time so that you don't

00:30:12,240 --> 00:30:16,720
waste resources when the when the test

00:30:14,080 --> 00:30:20,000
is stuck and and the required packages

00:30:16,720 --> 00:30:20,480
similarly here is an example planner so

00:30:20,000 --> 00:30:22,480
this is

00:30:20,480 --> 00:30:23,840
level two uh the configuration of the

00:30:22,480 --> 00:30:26,159
steps

00:30:23,840 --> 00:30:26,960
you can provide summary uh as for all

00:30:26,159 --> 00:30:29,520
other

00:30:26,960 --> 00:30:30,960
objects you can specify the provision so

00:30:29,520 --> 00:30:33,440
here we have virtual

00:30:30,960 --> 00:30:35,120
we have specified the amount of memory

00:30:33,440 --> 00:30:37,840
because it's needed

00:30:35,120 --> 00:30:38,640
and then the preparers tab here you see

00:30:37,840 --> 00:30:40,960
there

00:30:38,640 --> 00:30:43,440
an example that you can have multiple

00:30:40,960 --> 00:30:47,679
multiple configs in a single step so

00:30:43,440 --> 00:30:50,960
here we do we install a package

00:30:47,679 --> 00:30:54,480
packages httpd and curl and then uh

00:30:50,960 --> 00:30:55,200
we do shell preparation and we call

00:30:54,480 --> 00:30:58,080
system

00:30:55,200 --> 00:31:00,159
control uh start httpd and then we do

00:30:58,080 --> 00:31:02,880
some very simple smoke tests some

00:31:00,159 --> 00:31:04,720
just storing the file and uh checking it

00:31:02,880 --> 00:31:08,000
with the kernel

00:31:04,720 --> 00:31:08,799
so that's about the theory and let's get

00:31:08,000 --> 00:31:12,240
back to the

00:31:08,799 --> 00:31:13,600
uh to the examples before i give award

00:31:12,240 --> 00:31:17,679
to middle

00:31:13,600 --> 00:31:20,720
so um the tmt plans uh sub subcommand

00:31:17,679 --> 00:31:23,760
is used for maintaining plans so

00:31:20,720 --> 00:31:27,200
that that means level two metadata so uh

00:31:23,760 --> 00:31:27,679
if i if i'm in the so let's let's clear

00:31:27,200 --> 00:31:32,159
it

00:31:27,679 --> 00:31:34,960
if i'm in the uh sorry

00:31:32,159 --> 00:31:36,799
tmt plans if i'm in the tmp repo you

00:31:34,960 --> 00:31:40,240
would see so uh there are

00:31:36,799 --> 00:31:43,840
22 plans pmt plans uh list

00:31:40,240 --> 00:31:45,679
you can you can list them and you can

00:31:43,840 --> 00:31:48,000
filter by regular expression

00:31:45,679 --> 00:31:48,880
for example i don't know smoked smoked

00:31:48,000 --> 00:31:53,039
gas our

00:31:48,880 --> 00:31:54,720
unit you see

00:31:53,039 --> 00:31:57,519
we have plenty planted plants here

00:31:54,720 --> 00:31:58,960
because we try all the combinations

00:31:57,519 --> 00:32:01,039
in different environments so the tests

00:31:58,960 --> 00:32:01,840
are run uh in a different environment

00:32:01,039 --> 00:32:04,480
thanks to

00:32:01,840 --> 00:32:06,159
the fm hierarchy features and simulinks

00:32:04,480 --> 00:32:07,919
but this is a little bit too advanced

00:32:06,159 --> 00:32:11,200
for a quick introduction

00:32:07,919 --> 00:32:14,960
and tmt plans show empty plan show

00:32:11,200 --> 00:32:18,320
uh gives you some more info so let's say

00:32:14,960 --> 00:32:21,039
for the plants basic uh uh

00:32:18,320 --> 00:32:21,519
what what is there what is there in them

00:32:21,039 --> 00:32:23,200
in it

00:32:21,519 --> 00:32:25,679
so this is testing basic commonly

00:32:23,200 --> 00:32:28,320
features uh there's some description

00:32:25,679 --> 00:32:30,159
uh there is some filter so it it filters

00:32:28,320 --> 00:32:31,760
available tests and picks only tier one

00:32:30,159 --> 00:32:33,519
and tier two tests

00:32:31,760 --> 00:32:36,559
and it's executed because these are be

00:32:33,519 --> 00:32:40,799
created so it's executed as a big clip

00:32:36,559 --> 00:32:43,919
a tmt plans show i've just shown and

00:32:40,799 --> 00:32:46,799
to get some more examples or inspiration

00:32:43,919 --> 00:32:47,519
you can have a look at the or you can

00:32:46,799 --> 00:32:50,640
have a look

00:32:47,519 --> 00:32:53,919
at the plans here uh in the tmp repo

00:32:50,640 --> 00:32:54,559
so that's the basic one the core one it

00:32:53,919 --> 00:32:57,600
chooses

00:32:54,559 --> 00:32:59,440
it chooses the tier zero the result tier

00:32:57,600 --> 00:33:02,640
zero test so for some

00:32:59,440 --> 00:33:02,880
quickly uh quickly uh quick checks here

00:33:02,640 --> 00:33:05,200
is

00:33:02,880 --> 00:33:06,799
uh an extra example to show that it's

00:33:05,200 --> 00:33:09,039
also possible to

00:33:06,799 --> 00:33:11,120
list the tests directly in the plan so

00:33:09,039 --> 00:33:12,880
here you see there is one test

00:33:11,120 --> 00:33:15,039
there is a second test it's it's

00:33:12,880 --> 00:33:17,120
included in the in the discover phase

00:33:15,039 --> 00:33:18,799
so if you're not interested into like uh

00:33:17,120 --> 00:33:20,000
creating many files everything can be in

00:33:18,799 --> 00:33:22,159
one file

00:33:20,000 --> 00:33:24,799
uh this is running po three guests which

00:33:22,159 --> 00:33:27,919
need virtualization so they are slow

00:33:24,799 --> 00:33:28,559
uh here you see the smoke which is the

00:33:27,919 --> 00:33:31,200
super

00:33:28,559 --> 00:33:32,559
super easy thing tmd minus minus help

00:33:31,200 --> 00:33:33,360
and nothing else and description in

00:33:32,559 --> 00:33:35,039
summary

00:33:33,360 --> 00:33:36,720
and we also run unit tests and unit

00:33:35,039 --> 00:33:38,000
tests they need to install some

00:33:36,720 --> 00:33:40,559
additional packages

00:33:38,000 --> 00:33:42,480
so here's some prepare uh which which

00:33:40,559 --> 00:33:45,279
shows how it can be done

00:33:42,480 --> 00:33:46,320
and you uh you've spotted differently

00:33:45,279 --> 00:33:48,080
that's this main

00:33:46,320 --> 00:33:49,600
which is something like index himmel

00:33:48,080 --> 00:33:52,799
it's it's uh

00:33:49,600 --> 00:33:55,679
like the the parent and the parent uh

00:33:52,799 --> 00:33:56,399
materials from which are all other plans

00:33:55,679 --> 00:33:59,440
inherit

00:33:56,399 --> 00:34:00,320
so here are it's possible i changed the

00:33:59,440 --> 00:34:02,320
provision

00:34:00,320 --> 00:34:04,399
at one place and all the plans would

00:34:02,320 --> 00:34:07,360
pick it they would inherit it

00:34:04,399 --> 00:34:07,840
or i can say let's uh let's just install

00:34:07,360 --> 00:34:10,560
all the

00:34:07,840 --> 00:34:10,960
freshly built packages from from from

00:34:10,560 --> 00:34:13,200
the

00:34:10,960 --> 00:34:14,560
rpms directory and all the all the

00:34:13,200 --> 00:34:16,159
clients would pick it

00:34:14,560 --> 00:34:18,839
so that's that's a very nice feature to

00:34:16,159 --> 00:34:22,240
have this inheritance here

00:34:18,839 --> 00:34:24,320
um okay so now i will be

00:34:22,240 --> 00:34:26,879
uh quickly finishing going through the

00:34:24,320 --> 00:34:30,800
last slides because the term is flying

00:34:26,879 --> 00:34:33,599
fast so uh create

00:34:30,800 --> 00:34:35,119
if we've already seen the tmt init can

00:34:33,599 --> 00:34:38,399
be used to quickly

00:34:35,119 --> 00:34:41,520
get you started but if you want to

00:34:38,399 --> 00:34:44,639
start with some more complex examples

00:34:41,520 --> 00:34:45,599
you can use tmt plan create so uh for

00:34:44,639 --> 00:34:48,720
example

00:34:45,599 --> 00:34:51,280
i can i can i can show this full so i

00:34:48,720 --> 00:34:52,079
i would go to the mini example which we

00:34:51,280 --> 00:34:55,440
had

00:34:52,079 --> 00:34:56,240
and do tmp planner create a minus

00:34:55,440 --> 00:34:59,280
template

00:34:56,240 --> 00:35:02,160
full and it could be plants full

00:34:59,280 --> 00:35:02,480
or whatever so this uh this will create

00:35:02,160 --> 00:35:04,560
uh

00:35:02,480 --> 00:35:05,520
an example with the full config and here

00:35:04,560 --> 00:35:07,680
you see it's not

00:35:05,520 --> 00:35:09,440
that they're just those two lines but

00:35:07,680 --> 00:35:11,040
you have an example for this cover step

00:35:09,440 --> 00:35:12,320
which is fetching tests from a different

00:35:11,040 --> 00:35:15,599
repository

00:35:12,320 --> 00:35:17,280
and it uses uh ansible to prepare them

00:35:15,599 --> 00:35:20,079
and prepare the box

00:35:17,280 --> 00:35:20,800
so in this way you can quickly you don't

00:35:20,079 --> 00:35:22,880
have to

00:35:20,800 --> 00:35:24,480
learn the syntax you can create use the

00:35:22,880 --> 00:35:26,960
template and

00:35:24,480 --> 00:35:28,720
quickly quickly start if you are not

00:35:26,960 --> 00:35:30,960
sure about the syntax

00:35:28,720 --> 00:35:33,520
check the help message so for example tm

00:35:30,960 --> 00:35:35,920
tran prepare minus minus how install

00:35:33,520 --> 00:35:36,560
minus minus help and you would you would

00:35:35,920 --> 00:35:38,800
see

00:35:36,560 --> 00:35:39,920
you would see what uh what the config uh

00:35:38,800 --> 00:35:42,960
which config can be

00:35:39,920 --> 00:35:45,920
can be used from this maybe just add

00:35:42,960 --> 00:35:46,560
the how is there important so the run

00:35:45,920 --> 00:35:48,480
prepare

00:35:46,560 --> 00:35:50,079
help can give you all the preparation

00:35:48,480 --> 00:35:51,440
steps and if you uh

00:35:50,079 --> 00:35:54,160
put how there it gives you additional

00:35:51,440 --> 00:35:57,359
context to help yeah

00:35:54,160 --> 00:36:01,359
yeah yeah thanks uh thanks meron

00:35:57,359 --> 00:36:01,920
uh the tmt test uh is the brother of tmt

00:36:01,359 --> 00:36:04,560
plan

00:36:01,920 --> 00:36:05,920
it can give you an overview of available

00:36:04,560 --> 00:36:07,760
tests in the same way

00:36:05,920 --> 00:36:10,240
you can list the tests you can filter

00:36:07,760 --> 00:36:10,480
them for example i want to see only for

00:36:10,240 --> 00:36:13,599
uh

00:36:10,480 --> 00:36:17,040
here you're on test so for example tmp

00:36:13,599 --> 00:36:18,560
test list uh would would give you

00:36:17,040 --> 00:36:21,119
like all the other tests which are

00:36:18,560 --> 00:36:22,079
available but you can you can say filter

00:36:21,119 --> 00:36:24,400
only tier one

00:36:22,079 --> 00:36:25,200
or tier zero and you would you would get

00:36:24,400 --> 00:36:27,440
only those

00:36:25,200 --> 00:36:28,720
those tests and the same way you can you

00:36:27,440 --> 00:36:31,280
can of course uh

00:36:28,720 --> 00:36:32,320
do tmd test shows so you could you could

00:36:31,280 --> 00:36:35,839
see like the

00:36:32,320 --> 00:36:39,920
information about the tier zero test uh

00:36:35,839 --> 00:36:41,359
tmt test land uh so far very very uh

00:36:39,920 --> 00:36:44,400
very stupid

00:36:41,359 --> 00:36:45,280
but the intention is that you would we

00:36:44,400 --> 00:36:46,640
would like to

00:36:45,280 --> 00:36:48,400
check the metadata against the

00:36:46,640 --> 00:36:49,200
specification and make sure that the

00:36:48,400 --> 00:36:51,040
tests

00:36:49,200 --> 00:36:55,760
how they are defined they are okay so

00:36:51,040 --> 00:36:59,119
you can imagine this something is a rpm

00:36:55,760 --> 00:37:01,040
uh creating tests uh in the same way as

00:36:59,119 --> 00:37:03,760
plan tmt test create

00:37:01,040 --> 00:37:06,160
uh we have two templates so far a simple

00:37:03,760 --> 00:37:09,359
shell test or b clip test

00:37:06,160 --> 00:37:12,400
so let's see i go back pmp

00:37:09,359 --> 00:37:15,599
test create uh

00:37:12,400 --> 00:37:16,000
let's see this some small test and i

00:37:15,599 --> 00:37:19,119
would

00:37:16,000 --> 00:37:22,400
select a big clip for that

00:37:19,119 --> 00:37:25,440
so let's see what was there

00:37:22,400 --> 00:37:27,839
there's a directory which contains a

00:37:25,440 --> 00:37:29,520
simple metadata level one metadata and a

00:37:27,839 --> 00:37:31,839
simple skeleton for the big grid

00:37:29,520 --> 00:37:33,440
so now you can start and this is already

00:37:31,839 --> 00:37:36,560
working so so you can you can just

00:37:33,440 --> 00:37:38,960
run it and adjust as you as you need

00:37:36,560 --> 00:37:40,240
uh because uh one of the motivations for

00:37:38,960 --> 00:37:43,119
the tmt was to

00:37:40,240 --> 00:37:44,400
uh get us free from from the test case

00:37:43,119 --> 00:37:46,800
management system

00:37:44,400 --> 00:37:49,760
uh systems and have everything indeed we

00:37:46,800 --> 00:37:50,480
have also tmt test import and export sub

00:37:49,760 --> 00:37:52,480
commands

00:37:50,480 --> 00:37:54,240
which are used for importing metadata

00:37:52,480 --> 00:37:55,680
from the old format from bigger make

00:37:54,240 --> 00:37:57,839
file and purpose

00:37:55,680 --> 00:37:59,040
and also from the from the nitrates case

00:37:57,839 --> 00:38:00,960
management system

00:37:59,040 --> 00:38:02,400
so just to give you idea how this would

00:38:00,960 --> 00:38:05,760
work uh

00:38:02,400 --> 00:38:09,359
dnp test uh import

00:38:05,760 --> 00:38:10,240
uh yeah yeah so i i changed the

00:38:09,359 --> 00:38:11,599
directory where

00:38:10,240 --> 00:38:13,440
there is a there is a make file on

00:38:11,599 --> 00:38:15,599
purpose so let's see

00:38:13,440 --> 00:38:16,480
how it looked before so make file and

00:38:15,599 --> 00:38:19,200
purpose

00:38:16,480 --> 00:38:20,000
before that that was the old way how how

00:38:19,200 --> 00:38:23,040
the

00:38:20,000 --> 00:38:24,320
data was was stored and the purpose

00:38:23,040 --> 00:38:27,680
extra file

00:38:24,320 --> 00:38:29,599
and then this uh this test case

00:38:27,680 --> 00:38:31,359
this test case will be stored in a test

00:38:29,599 --> 00:38:34,560
case management system

00:38:31,359 --> 00:38:37,359
i would i would uh show you in a while

00:38:34,560 --> 00:38:37,839
uh and now the result is here everything

00:38:37,359 --> 00:38:41,760
in one

00:38:37,839 --> 00:38:42,880
file uh nicely uh nicely put in a yaml

00:38:41,760 --> 00:38:44,720
format

00:38:42,880 --> 00:38:46,240
just the best case in dc and that's how

00:38:44,720 --> 00:38:48,880
it could look like

00:38:46,240 --> 00:38:50,000
okay so there will be about import and

00:38:48,880 --> 00:38:53,680
export

00:38:50,000 --> 00:38:54,400
and finally very very briefly uh tmt

00:38:53,680 --> 00:38:56,720
story

00:38:54,400 --> 00:38:58,640
as i mentioned the level three metadata

00:38:56,720 --> 00:39:00,640
can be used for storing like the

00:38:58,640 --> 00:39:03,760
features or requirements for your

00:39:00,640 --> 00:39:05,280
project and you can uh so it happened to

00:39:03,760 --> 00:39:07,200
us very uh very often that we had

00:39:05,280 --> 00:39:08,480
earlier and the tmt could do this and

00:39:07,200 --> 00:39:10,000
that and that

00:39:08,480 --> 00:39:11,760
but there was not enough time to

00:39:10,000 --> 00:39:12,400
implement it so we just put together the

00:39:11,760 --> 00:39:15,920
story

00:39:12,400 --> 00:39:18,400
and store it so uh if i

00:39:15,920 --> 00:39:20,160
if you want to investigate you can do

00:39:18,400 --> 00:39:22,079
tmt's story

00:39:20,160 --> 00:39:23,359
uh which gives you like the overview of

00:39:22,079 --> 00:39:26,800
the stories which are uh

00:39:23,359 --> 00:39:29,200
available tmp story list or show

00:39:26,800 --> 00:39:31,520
let's say some command line interface

00:39:29,200 --> 00:39:34,560
stories related to

00:39:31,520 --> 00:39:35,440
testing so you can you can see that we

00:39:34,560 --> 00:39:40,400
have these

00:39:35,440 --> 00:39:42,720
these stories which are relevant to uh

00:39:40,400 --> 00:39:43,680
last month uh to the test command on the

00:39:42,720 --> 00:39:45,760
command line

00:39:43,680 --> 00:39:46,880
but what's interesting here you can see

00:39:45,760 --> 00:39:49,440
the coverage

00:39:46,880 --> 00:39:52,400
so here for example tmt story but

00:39:49,440 --> 00:39:55,520
instead of a show i will do coverage

00:39:52,400 --> 00:39:57,680
uh cli test and you will see uh so

00:39:55,520 --> 00:39:58,720
these are the stories which are covered

00:39:57,680 --> 00:40:00,079
by code

00:39:58,720 --> 00:40:01,760
these are the stories which are covered

00:40:00,079 --> 00:40:03,920
by tests and these are the stories which

00:40:01,760 --> 00:40:06,800
are covered by documentation already

00:40:03,920 --> 00:40:07,280
so in this way you can you can easily uh

00:40:06,800 --> 00:40:09,920
you can

00:40:07,280 --> 00:40:10,319
easily have an overview of the status of

00:40:09,920 --> 00:40:13,760
your

00:40:10,319 --> 00:40:18,079
of your project and that's it from

00:40:13,760 --> 00:40:18,079
me for now and giving birth to middle

00:40:22,960 --> 00:40:32,480
mirror can you see my screen

00:40:26,640 --> 00:40:32,480
okay yeah i guess you can stop shooting

00:40:34,230 --> 00:40:38,079
[Music]

00:40:36,839 --> 00:40:40,000
okay

00:40:38,079 --> 00:40:41,359
so uh i'm going to speak a little bit

00:40:40,000 --> 00:40:44,800
about the uh

00:40:41,359 --> 00:40:45,359
about the testing infrastructure so last

00:40:44,800 --> 00:40:48,560
year

00:40:45,359 --> 00:40:51,200
we have enabled packet integration uh

00:40:48,560 --> 00:40:51,680
that means that if you are using packet

00:40:51,200 --> 00:40:53,839
uh

00:40:51,680 --> 00:40:55,520
like it is a tool that uh try is trying

00:40:53,839 --> 00:40:56,240
to automate the integration from

00:40:55,520 --> 00:40:58,240
upstream

00:40:56,240 --> 00:40:59,760
upstream open source projects into

00:40:58,240 --> 00:41:01,599
federal operating system

00:40:59,760 --> 00:41:03,280
so if you are using a package you are

00:41:01,599 --> 00:41:06,640
already uh also

00:41:03,280 --> 00:41:10,240
running uh partially some testing

00:41:06,640 --> 00:41:12,960
so packet is able to run these uh

00:41:10,240 --> 00:41:14,319
tests that uh you can define in this dmt

00:41:12,960 --> 00:41:16,400
format

00:41:14,319 --> 00:41:18,000
uh indirectly in your disk kit and when

00:41:16,400 --> 00:41:20,880
you uh when the

00:41:18,000 --> 00:41:21,520
event packet builds uh basically the uh

00:41:20,880 --> 00:41:24,000
the

00:41:21,520 --> 00:41:25,200
copper bills from that pr that you

00:41:24,000 --> 00:41:29,680
submit to it

00:41:25,200 --> 00:41:32,400
uh it will uh the the testing form

00:41:29,680 --> 00:41:34,640
one of the services that we have will

00:41:32,400 --> 00:41:36,000
run automatically these fmf tests on it

00:41:34,640 --> 00:41:38,240
one thing that we added from the last

00:41:36,000 --> 00:41:39,680
year is that each copper build

00:41:38,240 --> 00:41:41,119
that you build via packet is also

00:41:39,680 --> 00:41:42,560
automatically tested at least for

00:41:41,119 --> 00:41:44,880
installation so even

00:41:42,560 --> 00:41:46,640
if you don't onboard any tests uh in the

00:41:44,880 --> 00:41:48,560
way that peter described

00:41:46,640 --> 00:41:50,000
uh then the testing will be still

00:41:48,560 --> 00:41:53,200
executed right

00:41:50,000 --> 00:41:56,240
and then those uh results are available

00:41:53,200 --> 00:41:58,800
next to the pr checks uh we have all

00:41:56,240 --> 00:42:01,280
everything documented here on this uh on

00:41:58,800 --> 00:42:04,880
the package documentation page

00:42:01,280 --> 00:42:07,359
where you have uh basically step by step

00:42:04,880 --> 00:42:08,079
step-by-step instructions how to uh be

00:42:07,359 --> 00:42:11,599
on board your

00:42:08,079 --> 00:42:13,760
the testing and test your uh pr's

00:42:11,599 --> 00:42:15,119
i didn't say that this testing is only

00:42:13,760 --> 00:42:17,599
available currently on

00:42:15,119 --> 00:42:20,000
for github github itself because the

00:42:17,599 --> 00:42:23,280
packet currently integrates only with

00:42:20,000 --> 00:42:26,319
github yeah then the

00:42:23,280 --> 00:42:27,280
test results uh display as you as usual

00:42:26,319 --> 00:42:31,200
for github

00:42:27,280 --> 00:42:32,720
setting in the end of this slide here

00:42:31,200 --> 00:42:34,640
so this is how it looks like in the

00:42:32,720 --> 00:42:36,079
github interface where you have the test

00:42:34,640 --> 00:42:38,240
results available

00:42:36,079 --> 00:42:40,079
from the tmt execution and there is some

00:42:38,240 --> 00:42:41,920
simple console log

00:42:40,079 --> 00:42:43,520
available so that is for the backup

00:42:41,920 --> 00:42:46,240
integration uh

00:42:43,520 --> 00:42:46,800
i have to say after year of uh of

00:42:46,240 --> 00:42:49,920
integra

00:42:46,800 --> 00:42:51,359
of being available this testing uh

00:42:49,920 --> 00:42:53,040
there are quite some components already

00:42:51,359 --> 00:42:55,760
using it packet

00:42:53,040 --> 00:42:56,079
lately released this dashboard which has

00:42:55,760 --> 00:42:58,400
uh

00:42:56,079 --> 00:42:59,359
this type of test runs where basically

00:42:58,400 --> 00:43:00,720
we can see

00:42:59,359 --> 00:43:02,720
that there is quite a lot of testing

00:43:00,720 --> 00:43:04,640
going on here mostly

00:43:02,720 --> 00:43:06,400
our packages but there are a lot of

00:43:04,640 --> 00:43:08,640
others on board it so

00:43:06,400 --> 00:43:09,920
if you have some github project feel

00:43:08,640 --> 00:43:12,570
free to look at

00:43:09,920 --> 00:43:19,040
uh this integration okay

00:43:12,570 --> 00:43:21,599
[Music]

00:43:19,040 --> 00:43:22,800
so one thing that we didn't accomplish

00:43:21,599 --> 00:43:25,760
to deliver for

00:43:22,800 --> 00:43:27,520
this year's vlog or nest uh is is the

00:43:25,760 --> 00:43:28,079
federation integration unfortunately

00:43:27,520 --> 00:43:30,640
we're

00:43:28,079 --> 00:43:32,560
we wanted uh to have in federal ci the

00:43:30,640 --> 00:43:36,480
possibility that you place

00:43:32,560 --> 00:43:39,599
uh you place the tests uh directly

00:43:36,480 --> 00:43:41,920
directly in uh biscuit and you run

00:43:39,599 --> 00:43:44,000
the test from this git repository so

00:43:41,920 --> 00:43:44,640
that is uh ongoing and we have slipped a

00:43:44,000 --> 00:43:46,240
month so

00:43:44,640 --> 00:43:48,480
at the end of this month there should be

00:43:46,240 --> 00:43:50,960
an early access to that integration

00:43:48,480 --> 00:43:52,000
it means that federer ci uh basically

00:43:50,960 --> 00:43:54,720
when you build

00:43:52,000 --> 00:43:56,240
a new body update it will be firstly

00:43:54,720 --> 00:43:58,960
enabled for rawhide

00:43:56,240 --> 00:44:00,319
then if in this git there will be some

00:43:58,960 --> 00:44:03,040
tests available

00:44:00,319 --> 00:44:04,160
uh the fedora ci will call this service

00:44:03,040 --> 00:44:06,319
that we will have

00:44:04,160 --> 00:44:07,680
and that will execute the tests first

00:44:06,319 --> 00:44:09,520
install the packages from that build

00:44:07,680 --> 00:44:11,920
execute the test and report it

00:44:09,520 --> 00:44:13,680
uh report it as automated checks uh

00:44:11,920 --> 00:44:17,200
directly in the body interface

00:44:13,680 --> 00:44:20,000
so uh this way of running tests

00:44:17,200 --> 00:44:20,560
will be used also for the generic test

00:44:20,000 --> 00:44:22,640
which

00:44:20,560 --> 00:44:23,920
is already there for some small portion

00:44:22,640 --> 00:44:26,480
of the packages

00:44:23,920 --> 00:44:28,240
it looks like this so this is where

00:44:26,480 --> 00:44:29,200
these tests will appear in the body

00:44:28,240 --> 00:44:31,359
interface

00:44:29,200 --> 00:44:33,119
uh currently these are only static

00:44:31,359 --> 00:44:35,200
analysis checks or the generic

00:44:33,119 --> 00:44:36,960
checks that are being run there but here

00:44:35,200 --> 00:44:39,040
we're once this is ready

00:44:36,960 --> 00:44:41,520
and you have tests they will appear here

00:44:39,040 --> 00:44:45,200
as one as an additional test

00:44:41,520 --> 00:44:45,920
um yep so that is for the integration

00:44:45,200 --> 00:44:49,119
part

00:44:45,920 --> 00:44:51,119
um the system that we will be using

00:44:49,119 --> 00:44:53,520
uh to integrate this we call testing

00:44:51,119 --> 00:44:55,440
form it's basically a testing system as

00:44:53,520 --> 00:44:57,839
a service that we are preparing

00:44:55,440 --> 00:44:59,920
uh inside red hat and uh it will be

00:44:57,839 --> 00:45:00,560
shared the closer lci federation and

00:44:59,920 --> 00:45:02,319
packet

00:45:00,560 --> 00:45:03,680
possibly others in the future we have a

00:45:02,319 --> 00:45:05,760
public api

00:45:03,680 --> 00:45:06,720
where basically everything testing will

00:45:05,760 --> 00:45:09,680
go through

00:45:06,720 --> 00:45:10,480
um that's just uh in short we will be

00:45:09,680 --> 00:45:12,640
supporting

00:45:10,480 --> 00:45:14,400
generic package level tests in the empty

00:45:12,640 --> 00:45:15,280
format so that is something that federer

00:45:14,400 --> 00:45:17,920
ci

00:45:15,280 --> 00:45:19,520
will be able to easily add in this in

00:45:17,920 --> 00:45:21,680
this test format then will be

00:45:19,520 --> 00:45:23,359
functional tests that will run against

00:45:21,680 --> 00:45:26,079
the container or vm

00:45:23,359 --> 00:45:27,839
that will be all hosted on fedra's avs

00:45:26,079 --> 00:45:28,640
infrastructure and we will support also

00:45:27,839 --> 00:45:30,000
running

00:45:28,640 --> 00:45:32,240
the functional test in the standard test

00:45:30,000 --> 00:45:34,319
interface what is the currently

00:45:32,240 --> 00:45:35,599
uh the current format of the all the

00:45:34,319 --> 00:45:38,880
fedora ci

00:45:35,599 --> 00:45:38,880
uh functional tests

00:45:39,520 --> 00:45:44,800
that i said so we welcome any feedback

00:45:42,880 --> 00:45:47,839
and contributions here are some links

00:45:44,800 --> 00:45:50,480
that you can follow

00:45:47,839 --> 00:45:52,079
there is a very good documentation i

00:45:50,480 --> 00:45:54,000
encourage everybody

00:45:52,079 --> 00:45:57,680
to look at that it helps a lot i don't

00:45:54,000 --> 00:46:01,760
know but i'm sharing this sorry

00:45:57,680 --> 00:46:03,839
and there is a fedora quick start guide

00:46:01,760 --> 00:46:05,280
which uh we will be using uh to on the

00:46:03,839 --> 00:46:07,200
tomorrow's workshop

00:46:05,280 --> 00:46:08,640
so the the quick start guide will guide

00:46:07,200 --> 00:46:11,040
you basically through the

00:46:08,640 --> 00:46:12,880
main process of getting the tool and

00:46:11,040 --> 00:46:14,079
then the packing integration does that i

00:46:12,880 --> 00:46:16,079
mentioned

00:46:14,079 --> 00:46:17,760
uh later on the federal quick start

00:46:16,079 --> 00:46:18,880
guide will also include the information

00:46:17,760 --> 00:46:21,599
how to onboard

00:46:18,880 --> 00:46:22,720
the tests to federal ci when that is

00:46:21,599 --> 00:46:25,040
ready

00:46:22,720 --> 00:46:26,480
if you have any feedback we have a we

00:46:25,040 --> 00:46:28,160
have an issue tracker on github and we

00:46:26,480 --> 00:46:29,760
have also a dmp channel of reno so

00:46:28,160 --> 00:46:34,480
please join

00:46:29,760 --> 00:46:34,480
better i'm giving you back the words

00:46:35,520 --> 00:46:39,760
uh okay so that would be uh that would

00:46:37,680 --> 00:46:44,079
be it from from the content

00:46:39,760 --> 00:46:45,520
uh and now so a space for questions

00:46:44,079 --> 00:46:47,680
uh is there anything you would like to

00:46:45,520 --> 00:46:50,480
ask comment

00:46:47,680 --> 00:46:50,480
any feedback

00:46:51,040 --> 00:46:58,000
i'm not sure how it works with the audio

00:46:56,560 --> 00:47:00,000
also not sure i think somebody has to

00:46:58,000 --> 00:47:03,200
ask for access

00:47:00,000 --> 00:47:05,280
so we can enable him so i know if you

00:47:03,200 --> 00:47:11,839
have any question feel free to type it

00:47:05,280 --> 00:47:11,839
uh we are here still few minutes

00:47:24,480 --> 00:47:26,800
yeah i have to say it's a very

00:47:25,520 --> 00:47:27,839
interesting experience with the virtual

00:47:26,800 --> 00:47:31,599
element actually my

00:47:27,839 --> 00:47:35,040
first this year yeah

00:47:31,599 --> 00:47:35,040
so how does everybody like it

00:47:37,520 --> 00:47:41,920
yeah so it seems everybody's happy on

00:47:39,440 --> 00:47:44,559
the irc i tried to irc on the chat

00:47:41,920 --> 00:47:44,880
i tried to answer all questions cool

00:47:44,559 --> 00:47:46,000
cool

00:47:44,880 --> 00:47:47,520
[Music]

00:47:46,000 --> 00:47:49,520
okay so if there are no questions we can

00:47:47,520 --> 00:47:52,880
call it done

00:47:49,520 --> 00:47:53,280
i believe okay so thanks uh thanks all

00:47:52,880 --> 00:47:59,280
to

00:47:53,280 --> 00:47:59,280

YouTube URL: https://www.youtube.com/watch?v=zF6UPjgRbDY


