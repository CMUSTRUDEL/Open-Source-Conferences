Title: How to test Fedora updates with your custom CI
Publication date: 2020-09-01
Playlist: Nest with Fedora 2020
Description: 
	Learn an overview of Rawhide Gating, the steps to create your own pipeline in Fedora CI and more

Presented at Nest With Fedora 2020.
Captions: 
	00:00:02,240 --> 00:00:05,600
structure teams

00:00:03,199 --> 00:00:07,520
and people on fedora ci special interest

00:00:05,600 --> 00:00:10,639
group

00:00:07,520 --> 00:00:13,759
so the outline of the talk uh for today

00:00:10,639 --> 00:00:15,040
is uh first i'm going to go through a

00:00:13,759 --> 00:00:17,840
fedora height gating

00:00:15,040 --> 00:00:19,039
overview and remind what it is and how

00:00:17,840 --> 00:00:21,760
it works

00:00:19,039 --> 00:00:24,800
then i will explain how fedora ci a

00:00:21,760 --> 00:00:24,800
special interest group is

00:00:25,359 --> 00:00:29,519
present in this picture and what we are

00:00:28,320 --> 00:00:33,440
doing

00:00:29,519 --> 00:00:35,920
and then uh we'll cover how

00:00:33,440 --> 00:00:36,719
your test to the gate we have and how to

00:00:35,920 --> 00:00:39,760
add maybe

00:00:36,719 --> 00:00:43,040
the entire ci system to the gate if you

00:00:39,760 --> 00:00:45,600
happen to have one so

00:00:43,040 --> 00:00:48,480
let's start with the first item the

00:00:45,600 --> 00:00:48,480
rawhide gating

00:00:48,960 --> 00:00:52,559
uh rawhide gating is not a new concept

00:00:51,600 --> 00:00:55,280
but

00:00:52,559 --> 00:00:55,920
it was implemented last year but i'm

00:00:55,280 --> 00:00:58,800
going to

00:00:55,920 --> 00:01:00,320
provide some brief overview so first of

00:00:58,800 --> 00:01:02,399
all for those who don't know what's

00:01:00,320 --> 00:01:03,280
feeder rawhide fedora rawhide is the

00:01:02,399 --> 00:01:05,760
snapshot

00:01:03,280 --> 00:01:07,280
of all the latest updates of all rpm

00:01:05,760 --> 00:01:10,000
packages in fedora

00:01:07,280 --> 00:01:11,360
so this is our shared development space

00:01:10,000 --> 00:01:14,479
where we

00:01:11,360 --> 00:01:17,600
deliver uh updates first and then uh

00:01:14,479 --> 00:01:18,880
these uh packages go through

00:01:17,600 --> 00:01:21,600
stabilization phase

00:01:18,880 --> 00:01:22,320
and through beta and final release

00:01:21,600 --> 00:01:25,200
stages

00:01:22,320 --> 00:01:27,680
and then they go into the branched uh

00:01:25,200 --> 00:01:30,560
named stable feeder release

00:01:27,680 --> 00:01:32,720
so the important feature of fedora

00:01:30,560 --> 00:01:35,439
height is that it's a shared

00:01:32,720 --> 00:01:37,360
development space so even though the

00:01:35,439 --> 00:01:41,520
packages

00:01:37,360 --> 00:01:43,520
which we put into fedora hyde

00:01:41,520 --> 00:01:45,040
have less quality requirements there are

00:01:43,520 --> 00:01:47,520
development snapshots and

00:01:45,040 --> 00:01:48,880
their development packages that you are

00:01:47,520 --> 00:01:52,799
not targeting the

00:01:48,880 --> 00:01:54,880
regular typical workstation uh

00:01:52,799 --> 00:01:56,640
since it is a shared development space

00:01:54,880 --> 00:01:57,759
it still has a certain quality

00:01:56,640 --> 00:02:01,439
requirement

00:01:57,759 --> 00:02:04,159
which is basically that um

00:02:01,439 --> 00:02:04,799
development of one package shouldn't

00:02:04,159 --> 00:02:06,960
block

00:02:04,799 --> 00:02:08,239
development of all the other components

00:02:06,960 --> 00:02:10,879
in feeder or height

00:02:08,239 --> 00:02:12,640
and since we have thousands of packages

00:02:10,879 --> 00:02:15,360
this is a very tricky question

00:02:12,640 --> 00:02:15,840
how to make it so that one package

00:02:15,360 --> 00:02:18,400
doesn't

00:02:15,840 --> 00:02:20,160
uh prevent uh doesn't interrupt

00:02:18,400 --> 00:02:21,360
development of other components and

00:02:20,160 --> 00:02:24,000
these things can go

00:02:21,360 --> 00:02:25,280
and integrate nicely in this shared

00:02:24,000 --> 00:02:28,560
space

00:02:25,280 --> 00:02:29,440
the second aspect of this why we started

00:02:28,560 --> 00:02:32,720
to

00:02:29,440 --> 00:02:35,519
look into rawhide gating is that

00:02:32,720 --> 00:02:37,519
catching errors at alpha beta final

00:02:35,519 --> 00:02:40,800
checkpoints during the release cycle

00:02:37,519 --> 00:02:44,319
is actually too late uh

00:02:40,800 --> 00:02:46,800
it is very hard to find

00:02:44,319 --> 00:02:48,239
at the better release that we have a

00:02:46,800 --> 00:02:51,120
list of critical

00:02:48,239 --> 00:02:52,319
issues which prevent uh disturb from

00:02:51,120 --> 00:02:55,120
being released

00:02:52,319 --> 00:02:55,920
and then we need under time pressure

00:02:55,120 --> 00:02:59,599
very fast

00:02:55,920 --> 00:03:02,080
resolve it somehow which may cause

00:02:59,599 --> 00:03:02,720
huge dependency chains and and a lot of

00:03:02,080 --> 00:03:06,000
trouble

00:03:02,720 --> 00:03:08,959
so short and targeted feedback loops

00:03:06,000 --> 00:03:09,760
are much better in testing and provide

00:03:08,959 --> 00:03:12,159
much better

00:03:09,760 --> 00:03:13,280
um testing development experience

00:03:12,159 --> 00:03:15,599
because

00:03:13,280 --> 00:03:16,720
as soon if if you test to change the

00:03:15,599 --> 00:03:20,640
moment

00:03:16,720 --> 00:03:21,680
you created you have much smaller scope

00:03:20,640 --> 00:03:24,959
of a change and

00:03:21,680 --> 00:03:27,519
a much easier debugging procedure so

00:03:24,959 --> 00:03:28,799
rawhide gating supposed to address of

00:03:27,519 --> 00:03:32,000
these two

00:03:28,799 --> 00:03:35,360
pain points how it is

00:03:32,000 --> 00:03:37,280
it does that so uh by introducing the

00:03:35,360 --> 00:03:40,879
concept of the gate

00:03:37,280 --> 00:03:42,480
uh i find that many people think about

00:03:40,879 --> 00:03:45,440
the gate as like doors

00:03:42,480 --> 00:03:46,080
open and closing i find this association

00:03:45,440 --> 00:03:48,879
with

00:03:46,080 --> 00:03:52,080
airport gate is closer to what we

00:03:48,879 --> 00:03:52,080
actually are doing here

00:03:52,159 --> 00:03:59,439
even though yeah yeah

00:03:55,519 --> 00:04:02,560
so um the gate is not a

00:03:59,439 --> 00:04:04,000
door it's a place where you sit with

00:04:02,560 --> 00:04:07,280
your package until

00:04:04,000 --> 00:04:10,080
all the very all verifications uh are

00:04:07,280 --> 00:04:12,480
passing and only once all the required

00:04:10,080 --> 00:04:14,400
checks are passing the package can

00:04:12,480 --> 00:04:16,560
proceed through the gate and land in

00:04:14,400 --> 00:04:21,359
fedora height

00:04:16,560 --> 00:04:25,040
so this gate is implemented in uh

00:04:21,359 --> 00:04:28,080
quadri via on top of koji tags in

00:04:25,040 --> 00:04:31,440
targets and if you're interested

00:04:28,080 --> 00:04:33,520
in exact workflow how this works

00:04:31,440 --> 00:04:34,639
you can read the docs in in the change

00:04:33,520 --> 00:04:37,680
proposal

00:04:34,639 --> 00:04:40,840
so uh this was implemented last year

00:04:37,680 --> 00:04:42,160
and announced in february at def

00:04:40,840 --> 00:04:45,360
confirming

00:04:42,160 --> 00:04:48,320
or maybe even earlier flock and uh

00:04:45,360 --> 00:04:49,280
more to that we have now two kinds of

00:04:48,320 --> 00:04:52,000
gate

00:04:49,280 --> 00:04:53,280
we have single package gate where uh

00:04:52,000 --> 00:04:55,680
each change goes

00:04:53,280 --> 00:04:57,199
through the gate alone and we have a

00:04:55,680 --> 00:04:59,360
multi-package gate where

00:04:57,199 --> 00:05:00,400
if you want to update several packages

00:04:59,360 --> 00:05:03,680
at once

00:05:00,400 --> 00:05:05,039
uh for example we have a very tight

00:05:03,680 --> 00:05:07,120
dependency on

00:05:05,039 --> 00:05:08,560
each other then you can group those

00:05:07,120 --> 00:05:11,919
packages in one unit

00:05:08,560 --> 00:05:15,120
and test and work with this change as

00:05:11,919 --> 00:05:16,960
a unit of working and these packages

00:05:15,120 --> 00:05:19,840
from the group will pass through the

00:05:16,960 --> 00:05:19,840
gate together

00:05:20,160 --> 00:05:24,320
so the gating framework is there it

00:05:22,880 --> 00:05:26,160
works and it's nicely

00:05:24,320 --> 00:05:27,440
implemented in bodhi and supported in

00:05:26,160 --> 00:05:30,479
the ui

00:05:27,440 --> 00:05:32,400
but the question which we have now is

00:05:30,479 --> 00:05:34,800
like

00:05:32,400 --> 00:05:36,720
who runs the tests yeah we have a gate

00:05:34,800 --> 00:05:37,600
where are the checks and who creates

00:05:36,720 --> 00:05:40,960
them

00:05:37,600 --> 00:05:45,840
and this is where ci systems come into

00:05:40,960 --> 00:05:45,840
play so this is the small

00:05:46,240 --> 00:05:53,280
overview of how the gating process

00:05:49,280 --> 00:05:57,680
works together with a ci system

00:05:53,280 --> 00:06:00,800
so we have boughty service bodhi is a

00:05:57,680 --> 00:06:03,680
database of all fedora updates and

00:06:00,800 --> 00:06:05,520
it's a our main instrument and main tool

00:06:03,680 --> 00:06:07,759
to work with the updates

00:06:05,520 --> 00:06:08,720
every time you create a new update in

00:06:07,759 --> 00:06:11,039
fedora

00:06:08,720 --> 00:06:12,240
both in rawhide or in stable branches

00:06:11,039 --> 00:06:15,199
you create

00:06:12,240 --> 00:06:17,360
associated body update entry in bodhi

00:06:15,199 --> 00:06:18,880
which describes what this update is all

00:06:17,360 --> 00:06:22,319
about

00:06:18,880 --> 00:06:23,680
then but he sends the message into

00:06:22,319 --> 00:06:26,800
fedora messaging

00:06:23,680 --> 00:06:29,039
uh bus where it says that

00:06:26,800 --> 00:06:31,039
new update is coming a new update was

00:06:29,039 --> 00:06:34,319
created uh

00:06:31,039 --> 00:06:35,600
that's it so once message lands in

00:06:34,319 --> 00:06:39,199
fedora messaging

00:06:35,600 --> 00:06:41,360
bus we have multiple ci systems

00:06:39,199 --> 00:06:42,720
listening to the message bus listening

00:06:41,360 --> 00:06:46,400
specifically to

00:06:42,720 --> 00:06:47,759
this type of a message and whenever a ci

00:06:46,400 --> 00:06:50,160
system recognizes

00:06:47,759 --> 00:06:50,960
the message about a new update it

00:06:50,160 --> 00:06:54,960
triggers

00:06:50,960 --> 00:06:58,240
its own logic to trigger the tests

00:06:54,960 --> 00:07:01,280
which are relevant for this update

00:06:58,240 --> 00:07:03,680
once cis system does its magic

00:07:01,280 --> 00:07:06,000
it sends again a message to fedora

00:07:03,680 --> 00:07:08,400
messaging bus with a test result

00:07:06,000 --> 00:07:09,120
this test result can be passed can be uh

00:07:08,400 --> 00:07:12,400
the test can

00:07:09,120 --> 00:07:14,720
pass but this can fail test can also be

00:07:12,400 --> 00:07:16,720
end with an infrastructure error which

00:07:14,720 --> 00:07:20,960
is not uh

00:07:16,720 --> 00:07:24,080
which means that we haven't achieved

00:07:20,960 --> 00:07:26,639
we haven't gotten the result of a test

00:07:24,080 --> 00:07:28,800
so result is unknown there was some

00:07:26,639 --> 00:07:31,039
error on the way

00:07:28,800 --> 00:07:32,000
all those messages land in fedora

00:07:31,039 --> 00:07:34,160
messaging bus

00:07:32,000 --> 00:07:36,240
and then there's another database which

00:07:34,160 --> 00:07:38,720
is called resultsdb

00:07:36,240 --> 00:07:40,400
which collects all those messages from

00:07:38,720 --> 00:07:43,520
all vci systems

00:07:40,400 --> 00:07:47,199
puts them into one uh storage and

00:07:43,520 --> 00:07:50,319
uh you can query resultsdb and to

00:07:47,199 --> 00:07:52,479
learn uh all the tests relevant to this

00:07:50,319 --> 00:07:55,759
particular update for example

00:07:52,479 --> 00:07:56,639
uh and and their statuses this results

00:07:55,759 --> 00:07:59,440
db then

00:07:56,639 --> 00:07:59,759
uh is used by bodhi to make a decision

00:07:59,440 --> 00:08:03,120
on

00:07:59,759 --> 00:08:03,840
or whether or not uh to let the package

00:08:03,120 --> 00:08:07,919
go through

00:08:03,840 --> 00:08:08,639
of the the gate but from a purpose of

00:08:07,919 --> 00:08:11,520
this talk

00:08:08,639 --> 00:08:13,280
the important part is here here is that

00:08:11,520 --> 00:08:16,560
we have a ci system

00:08:13,280 --> 00:08:18,080
which role is uh in the role of ci

00:08:16,560 --> 00:08:20,879
system is to

00:08:18,080 --> 00:08:22,720
react on messages about a new updates

00:08:20,879 --> 00:08:26,080
coming

00:08:22,720 --> 00:08:29,280
do the magic and then send

00:08:26,080 --> 00:08:32,320
the message best outcome

00:08:29,280 --> 00:08:32,880
whether positive or negative everything

00:08:32,320 --> 00:08:35,360
else

00:08:32,880 --> 00:08:37,360
is managed by the gating system so the

00:08:35,360 --> 00:08:38,560
only thing which is needed to produce

00:08:37,360 --> 00:08:41,680
the tests is here

00:08:38,560 --> 00:08:46,000
is to create an update to trigger on

00:08:41,680 --> 00:08:49,120
update and to send message with a result

00:08:46,000 --> 00:08:51,600
and uh one

00:08:49,120 --> 00:08:54,399
important part about this picture and

00:08:51,600 --> 00:08:56,560
which i try to highlight here is that

00:08:54,399 --> 00:08:59,120
this is a distributed system you can

00:08:56,560 --> 00:09:02,160
have as many ci systems working

00:08:59,120 --> 00:09:02,480
in this workflow as you wish as soon as

00:09:02,160 --> 00:09:06,080
you

00:09:02,480 --> 00:09:10,320
maintain them so

00:09:06,080 --> 00:09:14,080
we can add ci systems independently

00:09:10,320 --> 00:09:16,399
and implement it through various tools

00:09:14,080 --> 00:09:20,160
one of the ci systems which is the

00:09:16,399 --> 00:09:22,720
default fedora ci system

00:09:20,160 --> 00:09:23,440
and this is what fedora ci special

00:09:22,720 --> 00:09:26,959
interest group

00:09:23,440 --> 00:09:30,000
maintains and develops right now so uh

00:09:26,959 --> 00:09:33,600
we uh create and uh

00:09:30,000 --> 00:09:35,920
maintain the engine which

00:09:33,600 --> 00:09:39,120
runs with tests for fedora or high

00:09:35,920 --> 00:09:42,320
gating infrastructure

00:09:39,120 --> 00:09:44,720
so you may be seeing uh this already

00:09:42,320 --> 00:09:45,360
in bodhi this is a screenshot of

00:09:44,720 --> 00:09:48,480
actually

00:09:45,360 --> 00:09:51,839
my update i made a week ago for

00:09:48,480 --> 00:09:54,720
fedor rawhide if you go in any

00:09:51,839 --> 00:09:55,680
on any page about a package update in

00:09:54,720 --> 00:09:57,920
bodhi

00:09:55,680 --> 00:09:58,720
you will we can go to automated test

00:09:57,920 --> 00:10:02,000
results

00:09:58,720 --> 00:10:05,279
tab and you will see test results there

00:10:02,000 --> 00:10:06,720
so you see tests has uh much longer

00:10:05,279 --> 00:10:09,279
names than a

00:10:06,720 --> 00:10:10,000
put in my picture but they always have a

00:10:09,279 --> 00:10:13,440
prefix

00:10:10,000 --> 00:10:16,399
which is a id of a ci system and then

00:10:13,440 --> 00:10:19,839
we have some name which describes what

00:10:16,399 --> 00:10:19,839
this test is all about

00:10:21,200 --> 00:10:26,160
so to give the overview of what fedora

00:10:23,680 --> 00:10:29,680
ci resources we have

00:10:26,160 --> 00:10:32,399
currently all all of this test execution

00:10:29,680 --> 00:10:33,760
is implemented on top of jenkins

00:10:32,399 --> 00:10:36,560
pipelines

00:10:33,760 --> 00:10:37,920
we have one old jenkins instance which

00:10:36,560 --> 00:10:40,399
is deployed to the

00:10:37,920 --> 00:10:41,040
uh centos cluster to be clustered

00:10:40,399 --> 00:10:44,959
provided

00:10:41,040 --> 00:10:48,480
to us by centuries project it runs this

00:10:44,959 --> 00:10:50,800
quadruple tier zero functional test

00:10:48,480 --> 00:10:53,120
it has no integration with fedora

00:10:50,800 --> 00:10:56,480
account system and it has several

00:10:53,120 --> 00:10:58,839
other problems on the way so basically

00:10:56,480 --> 00:11:01,760
it's on the road to be

00:10:58,839 --> 00:11:02,560
deprecated replace with old jenkins we

00:11:01,760 --> 00:11:05,440
have also

00:11:02,560 --> 00:11:07,279
two more jenkins instances like high

00:11:05,440 --> 00:11:10,240
availability and all that

00:11:07,279 --> 00:11:11,440
uh so we have uh two different jenkins

00:11:10,240 --> 00:11:14,640
master instances

00:11:11,440 --> 00:11:16,800
one is deployed on top of the kubernetes

00:11:14,640 --> 00:11:19,200
cluster in amazon cloud

00:11:16,800 --> 00:11:21,600
and one is deployed again on top of the

00:11:19,200 --> 00:11:24,399
openshift cluster provided by centos but

00:11:21,600 --> 00:11:26,880
now it's upgraded to openshift4 cluster

00:11:24,399 --> 00:11:27,839
which is new and which is has more

00:11:26,880 --> 00:11:30,880
features

00:11:27,839 --> 00:11:30,880
interesting for us

00:11:31,440 --> 00:11:38,399
so on from a point of resources

00:11:34,640 --> 00:11:40,800
we have access to the cloud on amazon

00:11:38,399 --> 00:11:41,680
which means we have a lot of resources

00:11:40,800 --> 00:11:44,959
here

00:11:41,680 --> 00:11:48,959
and we have access to openshift for a

00:11:44,959 --> 00:11:52,720
cloud of resources from centos the

00:11:48,959 --> 00:11:52,720
amount of resources here is

00:11:53,040 --> 00:11:59,360
limited but also quite a lot

00:11:56,959 --> 00:12:01,760
now what we do with all these resources

00:11:59,360 --> 00:12:03,920
this is the list of the tests which we

00:12:01,760 --> 00:12:07,200
are currently running

00:12:03,920 --> 00:12:10,079
one of the most interesting tests is

00:12:07,200 --> 00:12:10,959
the disk test so called uh this is what

00:12:10,079 --> 00:12:13,839
you saw

00:12:10,959 --> 00:12:15,279
from the previous screenshot in

00:12:13,839 --> 00:12:19,040
essentially

00:12:15,279 --> 00:12:21,600
this test scenario it runs whatever

00:12:19,040 --> 00:12:24,720
it is described in the test folder in

00:12:21,600 --> 00:12:26,880
the repository of a package

00:12:24,720 --> 00:12:28,160
we run we take what what's described

00:12:26,880 --> 00:12:31,200
there and we

00:12:28,160 --> 00:12:33,200
we run this scenario in x

00:12:31,200 --> 00:12:34,959
86 virtual machine so it's not a

00:12:33,200 --> 00:12:38,800
container it's a full

00:12:34,959 --> 00:12:41,360
featured virtual machine with fedora

00:12:38,800 --> 00:12:42,399
installed in there and we just run

00:12:41,360 --> 00:12:46,160
scenario

00:12:42,399 --> 00:12:46,800
inside and then we get the outcome of

00:12:46,160 --> 00:12:49,360
this

00:12:46,800 --> 00:12:50,320
run and post a message to the message

00:12:49,360 --> 00:12:53,519
bus

00:12:50,320 --> 00:12:53,839
about the outcome there are some links

00:12:53,519 --> 00:12:57,040
on

00:12:53,839 --> 00:12:58,079
how to uh do that uh so you can read for

00:12:57,040 --> 00:13:00,959
more

00:12:58,079 --> 00:13:01,839
more details from there the other test

00:13:00,959 --> 00:13:05,360
which we're running

00:13:01,839 --> 00:13:09,360
is rpm inspect this is a static

00:13:05,360 --> 00:13:12,959
analysis tool it analyzes

00:13:09,360 --> 00:13:13,519
a spec file on most common issues and

00:13:12,959 --> 00:13:15,680
errors

00:13:13,519 --> 00:13:16,639
sometimes it's licensing checks

00:13:15,680 --> 00:13:20,880
sometimes it's

00:13:16,639 --> 00:13:21,680
abi symbols it works not just on the rpm

00:13:20,880 --> 00:13:24,959
spec but on

00:13:21,680 --> 00:13:29,200
binary rpm as well

00:13:24,959 --> 00:13:31,680
and it also compares a new update

00:13:29,200 --> 00:13:32,959
updated rpm with a previous version of

00:13:31,680 --> 00:13:37,600
the same rpm

00:13:32,959 --> 00:13:40,000
so it gives you in it highlights when

00:13:37,600 --> 00:13:41,839
uh file chain uh there are some

00:13:40,000 --> 00:13:46,240
important file changes like you

00:13:41,839 --> 00:13:49,600
get a new binary with set uid bit

00:13:46,240 --> 00:13:53,680
which is potentially security threat

00:13:49,600 --> 00:13:57,440
so this is private tool

00:13:53,680 --> 00:14:00,000
this uh the tool itself is on github so

00:13:57,440 --> 00:14:01,600
for more information you can go there so

00:14:00,000 --> 00:14:04,320
rpm inspect is our

00:14:01,600 --> 00:14:05,199
main example of generic test it runs on

00:14:04,320 --> 00:14:10,480
every package

00:14:05,199 --> 00:14:13,120
not on package on per package basis

00:14:10,480 --> 00:14:14,240
should we use rpm inspect instead of rpm

00:14:13,120 --> 00:14:17,680
lint

00:14:14,240 --> 00:14:19,120
i think uh we're not completely

00:14:17,680 --> 00:14:22,320
overlapping

00:14:19,120 --> 00:14:26,079
so rpm lint is more about the

00:14:22,320 --> 00:14:29,120
form of the uh

00:14:26,079 --> 00:14:32,160
rpm spec while rpm inspect

00:14:29,120 --> 00:14:33,519
also goes deeper so for example it does

00:14:32,160 --> 00:14:37,440
the under beam checks

00:14:33,519 --> 00:14:40,800
and and things like that so uh i'm not

00:14:37,440 --> 00:14:43,360
familiar with the details in both tools

00:14:40,800 --> 00:14:44,880
so maybe it's a good question to ask to

00:14:43,360 --> 00:14:48,639
david cantrell who is the

00:14:44,880 --> 00:14:50,959
main maintainer of rpm inspect and he is

00:14:48,639 --> 00:14:52,639
very open for feedback so you can go to

00:14:50,959 --> 00:14:54,079
the github repo and file an issue with

00:14:52,639 --> 00:14:57,120
this question

00:14:54,079 --> 00:15:01,920
uh definitely something to consider but

00:14:57,120 --> 00:15:01,920
i'm just not sure about the details here

00:15:02,079 --> 00:15:05,519
the other two tests which we are

00:15:04,240 --> 00:15:08,160
preparing currently

00:15:05,519 --> 00:15:10,000
you may meet them already in the body

00:15:08,160 --> 00:15:11,279
interface but we are still working

00:15:10,000 --> 00:15:13,839
progress

00:15:11,279 --> 00:15:14,720
is rpm deployment and installability

00:15:13,839 --> 00:15:17,839
checks

00:15:14,720 --> 00:15:20,560
rpm deployment check

00:15:17,839 --> 00:15:22,800
verifies that dependencies of a package

00:15:20,560 --> 00:15:24,800
of a new package are satisfied in the

00:15:22,800 --> 00:15:27,839
current state of arepa

00:15:24,800 --> 00:15:31,040
it's quite simple but it catches

00:15:27,839 --> 00:15:32,399
some interesting errors sometimes an

00:15:31,040 --> 00:15:35,759
installability check

00:15:32,399 --> 00:15:37,920
is a very verification that

00:15:35,759 --> 00:15:39,199
the package you just built you can

00:15:37,920 --> 00:15:42,320
install

00:15:39,199 --> 00:15:44,079
uh then you can remove it you can also

00:15:42,320 --> 00:15:44,720
upgrade it from the previous version and

00:15:44,079 --> 00:15:47,519
then

00:15:44,720 --> 00:15:49,199
downgrade the upgraded one back to uh

00:15:47,519 --> 00:15:52,480
the old one

00:15:49,199 --> 00:15:54,160
so these tests are actively in progress

00:15:52,480 --> 00:15:58,079
so we're working on them

00:15:54,160 --> 00:16:00,160
right now there are more ideas and tests

00:15:58,079 --> 00:16:02,720
uh in consideration but

00:16:00,160 --> 00:16:03,680
like as usual resources i request a

00:16:02,720 --> 00:16:07,600
problem

00:16:03,680 --> 00:16:09,920
uh people resources mostly and uh

00:16:07,600 --> 00:16:11,040
definitely there are a lot of ways how

00:16:09,920 --> 00:16:15,440
to improve

00:16:11,040 --> 00:16:17,600
this part if you're interested in

00:16:15,440 --> 00:16:19,519
learning more about these tests then we

00:16:17,600 --> 00:16:20,480
have fedora ci special interest group

00:16:19,519 --> 00:16:22,800
it's a

00:16:20,480 --> 00:16:25,120
in a week in federal project wiki we

00:16:22,800 --> 00:16:28,480
have fedora ci channel on irc

00:16:25,120 --> 00:16:29,199
and we have also a mailing list which is

00:16:28,480 --> 00:16:32,399
called

00:16:29,199 --> 00:16:35,600
ci now uh

00:16:32,399 --> 00:16:39,360
i promise to explain how

00:16:35,600 --> 00:16:44,000
you can run your tests actually and uh

00:16:39,360 --> 00:16:47,680
this is where it gets more interesting

00:16:44,000 --> 00:16:50,880
so the uh question to

00:16:47,680 --> 00:16:54,079
you as the audience is uh like

00:16:50,880 --> 00:16:56,880
do you have ideas for the tests uh

00:16:54,079 --> 00:16:58,480
which we might run as a generic test for

00:16:56,880 --> 00:17:01,279
all fedora packages

00:16:58,480 --> 00:17:01,759
so first of all like if you have idea

00:17:01,279 --> 00:17:03,839
how

00:17:01,759 --> 00:17:04,799
you would like to test one specific

00:17:03,839 --> 00:17:09,280
package

00:17:04,799 --> 00:17:12,880
then the easiest way to add such a test

00:17:09,280 --> 00:17:15,600
is uh to contribute this test to

00:17:12,880 --> 00:17:16,400
the disgit repository of a package into

00:17:15,600 --> 00:17:19,280
that disk

00:17:16,400 --> 00:17:20,799
test workflow obviously to make it work

00:17:19,280 --> 00:17:22,400
you need to first talk to package

00:17:20,799 --> 00:17:24,160
maintainer and

00:17:22,400 --> 00:17:25,919
see if package maintainer agrees with

00:17:24,160 --> 00:17:28,720
the idea of a test

00:17:25,919 --> 00:17:30,000
when you contributed to the repository

00:17:28,720 --> 00:17:31,919
via pull request

00:17:30,000 --> 00:17:33,360
we recommend to use pull requests for

00:17:31,919 --> 00:17:36,640
such work because

00:17:33,360 --> 00:17:38,720
on pull requests we run a preview of the

00:17:36,640 --> 00:17:41,600
gating test and we post result of

00:17:38,720 --> 00:17:43,120
the gating test of the disk test in the

00:17:41,600 --> 00:17:46,160
pull request interface so

00:17:43,120 --> 00:17:47,760
you kind of know before you merge

00:17:46,160 --> 00:17:50,240
if the test which you contributed

00:17:47,760 --> 00:17:52,640
actually works

00:17:50,240 --> 00:17:53,919
if you have an idea of a generic test

00:17:52,640 --> 00:17:57,919
which might be

00:17:53,919 --> 00:18:00,160
uh i don't know

00:17:57,919 --> 00:18:02,880
checking build requireds and not just

00:18:00,160 --> 00:18:06,400
requires like rpm depleting does

00:18:02,880 --> 00:18:06,400
or checking a

00:18:07,039 --> 00:18:10,240
consistent custom consistent version in

00:18:09,679 --> 00:18:13,039
between

00:18:10,240 --> 00:18:14,320
some packages whatever logic you feel

00:18:13,039 --> 00:18:17,520
like you

00:18:14,320 --> 00:18:21,039
like fedora to have a enforced

00:18:17,520 --> 00:18:23,520
then if this check is simple enough to

00:18:21,039 --> 00:18:26,000
be run in a container environment

00:18:23,520 --> 00:18:27,280
which means it's not exactly that simple

00:18:26,000 --> 00:18:29,679
because

00:18:27,280 --> 00:18:31,360
we run virtual machines in container

00:18:29,679 --> 00:18:34,640
environment as well with no problem

00:18:31,360 --> 00:18:37,120
so uh if you have a test which can be

00:18:34,640 --> 00:18:38,640
run as a script in virtualized

00:18:37,120 --> 00:18:39,840
containerized to virtual machine

00:18:38,640 --> 00:18:43,039
environment

00:18:39,840 --> 00:18:44,559
then we now have resources and

00:18:43,039 --> 00:18:46,960
possibility to

00:18:44,559 --> 00:18:48,559
implement it as a part of fedora ci

00:18:46,960 --> 00:18:50,799
generic checks so

00:18:48,559 --> 00:18:53,760
to implement such tests you can just go

00:18:50,799 --> 00:18:58,080
directly to fedora cic

00:18:53,760 --> 00:19:00,640
what we would need to make it work is

00:18:58,080 --> 00:19:01,280
the test script itself which would be

00:19:00,640 --> 00:19:04,720
run on

00:19:01,280 --> 00:19:08,160
a certain container image

00:19:04,720 --> 00:19:10,960
once we have that we add the

00:19:08,160 --> 00:19:12,480
jenkins wrapper around this script and

00:19:10,960 --> 00:19:15,520
around this container

00:19:12,480 --> 00:19:18,320
so it becomes a jenkins pipeline

00:19:15,520 --> 00:19:20,240
uh you can create your jenkins pipelines

00:19:18,320 --> 00:19:23,760
on your own if you would like

00:19:20,240 --> 00:19:26,000
i just take a look into the dock and

00:19:23,760 --> 00:19:26,960
clone for example rpm deplete

00:19:26,000 --> 00:19:30,799
repositories

00:19:26,960 --> 00:19:34,240
and do the same thing but for your test

00:19:30,799 --> 00:19:36,840
or you can come to uh fedora cic

00:19:34,240 --> 00:19:38,000
and we can work on that together

00:19:36,840 --> 00:19:41,679
definitely

00:19:38,000 --> 00:19:44,160
so um one of the highlights of recurring

00:19:41,679 --> 00:19:45,120
state of the things is of in fedorasia

00:19:44,160 --> 00:19:48,400
is that

00:19:45,120 --> 00:19:50,160
uh we are refactoring our jenkins setup

00:19:48,400 --> 00:19:53,120
and these new jenkinses now

00:19:50,160 --> 00:19:55,360
allow give us more flexibility in how we

00:19:53,120 --> 00:19:57,280
work with uh jenkins pipelines

00:19:55,360 --> 00:19:59,520
we are now connected to fedora account

00:19:57,280 --> 00:20:02,400
system so you can retrieve your

00:19:59,520 --> 00:20:03,200
jobs just by using regular fedora

00:20:02,400 --> 00:20:06,000
account

00:20:03,200 --> 00:20:06,799
but also you uh have a more simple

00:20:06,000 --> 00:20:10,799
approach to

00:20:06,799 --> 00:20:14,000
writing the pipelines itself so we

00:20:10,799 --> 00:20:17,360
decoupled a lot of things and now uh

00:20:14,000 --> 00:20:20,320
writing pipeline usually means

00:20:17,360 --> 00:20:22,240
specify the pipeline metadata specify

00:20:20,320 --> 00:20:23,360
the container in which a pipeline should

00:20:22,240 --> 00:20:25,919
be running

00:20:23,360 --> 00:20:27,280
and specify the script which the

00:20:25,919 --> 00:20:28,799
pipeline should be running

00:20:27,280 --> 00:20:30,400
and the rest of it is the library

00:20:28,799 --> 00:20:32,480
functions which will be just

00:20:30,400 --> 00:20:34,559
like triggering and sending messages

00:20:32,480 --> 00:20:37,760
when it's all done

00:20:34,559 --> 00:20:41,200
so we're open to such work and

00:20:37,760 --> 00:20:44,240
we welcome all ideas which come from

00:20:41,200 --> 00:20:47,600
the community to this

00:20:44,240 --> 00:20:51,520
area now the

00:20:47,600 --> 00:20:51,520
other part about uh

00:20:51,840 --> 00:20:55,440
how to add your tests to fedora height

00:20:54,240 --> 00:20:58,799
gating

00:20:55,440 --> 00:21:01,520
is how you actually can add your

00:20:58,799 --> 00:21:04,559
ci system this use case is more

00:21:01,520 --> 00:21:08,320
interesting for people who maintain

00:21:04,559 --> 00:21:10,880
let's say their own hardware labs

00:21:08,320 --> 00:21:12,080
or certain specific environments which

00:21:10,880 --> 00:21:14,720
you cannot share

00:21:12,080 --> 00:21:17,280
and and you cannot re-implement on top

00:21:14,720 --> 00:21:19,760
of basic openshift cluster

00:21:17,280 --> 00:21:20,640
if you have a dedicated hardware sitting

00:21:19,760 --> 00:21:23,520
in a lab

00:21:20,640 --> 00:21:25,200
somewhere in a dark room and you want to

00:21:23,520 --> 00:21:28,080
test in advance that

00:21:25,200 --> 00:21:29,200
let's say update a fedora kernel or

00:21:28,080 --> 00:21:32,880
update of

00:21:29,200 --> 00:21:34,000
fedora libvirt doesn't break your stuff

00:21:32,880 --> 00:21:37,440
on that particular

00:21:34,000 --> 00:21:39,760
hardware what you can do

00:21:37,440 --> 00:21:41,840
is you can maintain your own ci

00:21:39,760 --> 00:21:44,480
environment ci system

00:21:41,840 --> 00:21:47,120
and then you can on board ci system to

00:21:44,480 --> 00:21:50,000
the rawhide gating workflow

00:21:47,120 --> 00:21:51,120
because as i showed before the only job

00:21:50,000 --> 00:21:54,240
of a ci system

00:21:51,120 --> 00:21:57,200
is read the message from the

00:21:54,240 --> 00:21:58,559
messaging bus and send the message with

00:21:57,200 --> 00:22:02,880
a result

00:21:58,559 --> 00:22:06,080
of course there will be logical

00:22:02,880 --> 00:22:08,640
assumptions on ci system so it can

00:22:06,080 --> 00:22:09,760
vote in fedora communi in fedora uh

00:22:08,640 --> 00:22:13,679
packages

00:22:09,760 --> 00:22:15,679
so uh if you

00:22:13,679 --> 00:22:17,200
vote with a test result but don't

00:22:15,679 --> 00:22:20,400
provide logs we can

00:22:17,200 --> 00:22:22,320
do anything about this so such a vote is

00:22:20,400 --> 00:22:24,320
probably useless

00:22:22,320 --> 00:22:26,400
thus if you want to have a ci system

00:22:24,320 --> 00:22:29,120
voting in fedora

00:22:26,400 --> 00:22:30,400
it can be a private ci system but it

00:22:29,120 --> 00:22:33,200
needs to publish

00:22:30,400 --> 00:22:35,280
some of the debugging login information

00:22:33,200 --> 00:22:36,000
in a way that fedora community can read

00:22:35,280 --> 00:22:39,440
that and

00:22:36,000 --> 00:22:42,240
can understand what's going on of course

00:22:39,440 --> 00:22:42,960
additionally to that you need to uh talk

00:22:42,240 --> 00:22:46,640
to people

00:22:42,960 --> 00:22:49,440
who which you're supposed to test so we

00:22:46,640 --> 00:22:51,840
approve and agree with the concept of a

00:22:49,440 --> 00:22:54,960
testing and they will not just ignore

00:22:51,840 --> 00:22:58,559
the test test results you're posting

00:22:54,960 --> 00:23:02,159
and you

00:22:58,559 --> 00:23:02,960
have some technical uh things you need

00:23:02,159 --> 00:23:05,600
to do like

00:23:02,960 --> 00:23:06,880
choose a name for ci system the id which

00:23:05,600 --> 00:23:11,280
will be the prefix of

00:23:06,880 --> 00:23:14,080
all your test cases you need to add um

00:23:11,280 --> 00:23:14,799
some triggering mechanism and in two

00:23:14,080 --> 00:23:17,280
requests

00:23:14,799 --> 00:23:18,400
uh we write to send messages back to

00:23:17,280 --> 00:23:21,600
fedora message bus

00:23:18,400 --> 00:23:24,960
so reading fedora messaging bus is

00:23:21,600 --> 00:23:25,760
open for everyone sending to fedora

00:23:24,960 --> 00:23:29,120
message bus

00:23:25,760 --> 00:23:31,760
is restricted so once you set up the

00:23:29,120 --> 00:23:34,320
system so it reads the messages

00:23:31,760 --> 00:23:36,240
posts the test results somewhere you

00:23:34,320 --> 00:23:39,440
have a history of uh

00:23:36,240 --> 00:23:41,120
actions done by this cia system you can

00:23:39,440 --> 00:23:44,240
request then uh

00:23:41,120 --> 00:23:46,080
the access to fedor message bus and then

00:23:44,240 --> 00:23:48,159
all those test results start to appear

00:23:46,080 --> 00:23:50,400
in body

00:23:48,159 --> 00:23:51,279
we have a more detailed documentation on

00:23:50,400 --> 00:23:54,000
that so

00:23:51,279 --> 00:23:55,600
based on the interest in the audience i

00:23:54,000 --> 00:23:59,200
i can

00:23:55,600 --> 00:24:02,480
answer some questions let me know if you

00:23:59,200 --> 00:24:02,480
want to talk more about it

00:24:02,799 --> 00:24:06,080
one important note about all of this

00:24:05,440 --> 00:24:08,960
setup

00:24:06,080 --> 00:24:08,960
is that

00:24:09,440 --> 00:24:16,400
we do separate

00:24:12,960 --> 00:24:18,240
the part of running a test and providing

00:24:16,400 --> 00:24:21,520
the test result

00:24:18,240 --> 00:24:24,240
and the part of

00:24:21,520 --> 00:24:26,240
making this test result blocking the

00:24:24,240 --> 00:24:29,039
update of a package

00:24:26,240 --> 00:24:31,279
it can be done in totally independent

00:24:29,039 --> 00:24:31,279
way

00:24:31,360 --> 00:24:35,919
you can add tests you can run them they

00:24:34,559 --> 00:24:38,400
will be visible in

00:24:35,919 --> 00:24:39,600
the interface will be reported but

00:24:38,400 --> 00:24:42,960
unless

00:24:39,600 --> 00:24:46,159
package maintainer explicitly agrees

00:24:42,960 --> 00:24:47,120
to block package updates on these test

00:24:46,159 --> 00:24:48,640
results

00:24:47,120 --> 00:24:50,640
these tests will not block in the

00:24:48,640 --> 00:24:51,440
package from from landing in feeder or

00:24:50,640 --> 00:24:53,440
height so

00:24:51,440 --> 00:24:55,039
it will not be considered as a required

00:24:53,440 --> 00:24:57,279
check in the gate

00:24:55,039 --> 00:24:58,080
configuration of a gate is a separate

00:24:57,279 --> 00:24:59,919
thing

00:24:58,080 --> 00:25:01,360
it lives in a separate configuration

00:24:59,919 --> 00:25:04,799
file in the disk

00:25:01,360 --> 00:25:09,760
repository and

00:25:04,799 --> 00:25:13,039
we have a dock about that i wonder

00:25:09,760 --> 00:25:15,600
yeah and basically

00:25:13,039 --> 00:25:16,960
every packager has a possibility to

00:25:15,600 --> 00:25:20,240
write down for his

00:25:16,960 --> 00:25:23,120
uh or her package that uh

00:25:20,240 --> 00:25:26,840
this is the list of tests which which

00:25:23,120 --> 00:25:29,120
should be blocking for my package update

00:25:26,840 --> 00:25:32,159
and this will

00:25:29,120 --> 00:25:35,679
uh add this uh enforcement

00:25:32,159 --> 00:25:38,799
a part to the whole process currently in

00:25:35,679 --> 00:25:42,080
fedora we do

00:25:38,799 --> 00:25:45,520
we don't do any global enforcement

00:25:42,080 --> 00:25:46,960
on any level so all the tests we run in

00:25:45,520 --> 00:25:49,760
fedora ci are not

00:25:46,960 --> 00:25:50,320
are providing feedback but we leave it

00:25:49,760 --> 00:25:53,360
to

00:25:50,320 --> 00:25:55,679
maintainer uh to choose if

00:25:53,360 --> 00:25:58,080
these tests will be blocking or not some

00:25:55,679 --> 00:26:01,440
of the maintainers already chosen

00:25:58,080 --> 00:26:04,880
uh that uh this guitars

00:26:01,440 --> 00:26:08,400
or rpm and pack test to be blocking but

00:26:04,880 --> 00:26:12,640
uh not all of uh all of them and

00:26:08,400 --> 00:26:15,760
yeah not as much as i would love to see

00:26:12,640 --> 00:26:18,640
uh people are still are not

00:26:15,760 --> 00:26:20,480
quite familiar with the system so by

00:26:18,640 --> 00:26:22,799
refactoring and by

00:26:20,480 --> 00:26:23,760
cleaning up some documentation pieces

00:26:22,799 --> 00:26:26,320
and uh

00:26:23,760 --> 00:26:28,240
we code and and opening it up for

00:26:26,320 --> 00:26:30,400
contributions we expect to

00:26:28,240 --> 00:26:31,679
get more traction and more understanding

00:26:30,400 --> 00:26:36,240
from the community on

00:26:31,679 --> 00:26:39,760
what's going on there and yeah uh

00:26:36,240 --> 00:26:43,679
one note here is like even the very

00:26:39,760 --> 00:26:47,200
very simple here which be looks like an

00:26:43,679 --> 00:26:48,799
absolutely obvious thing actually can be

00:26:47,200 --> 00:26:52,320
very important so

00:26:48,799 --> 00:26:56,320
as a red hat uh oci

00:26:52,320 --> 00:26:59,600
person we tried this

00:26:56,320 --> 00:27:02,960
sometimes and and we saw that uh tests

00:26:59,600 --> 00:27:05,279
make a difference and um

00:27:02,960 --> 00:27:06,559
you don't need to build too much logic

00:27:05,279 --> 00:27:08,960
at the beginning

00:27:06,559 --> 00:27:10,080
you just can start with something

00:27:08,960 --> 00:27:14,000
smaller and grow

00:27:10,080 --> 00:27:14,000
into a larger set of tests

00:27:14,320 --> 00:27:21,360
once you are evolving in that area so

00:27:18,840 --> 00:27:25,360
um to be

00:27:21,360 --> 00:27:28,720
honest this was faster than i expected

00:27:25,360 --> 00:27:31,919
so i wonder at which level

00:27:28,720 --> 00:27:33,279
are the audience is and do you have more

00:27:31,919 --> 00:27:36,799
questions

00:27:33,279 --> 00:27:39,039
on fedora ci on rawhide gating or

00:27:36,799 --> 00:27:42,320
on specific implementation details feel

00:27:39,039 --> 00:27:42,320
free to ask so i'll

00:27:42,720 --> 00:27:49,440
check how long ci system have to either

00:27:46,320 --> 00:27:52,640
report results or be skipped

00:27:49,440 --> 00:27:54,320
we don't have any limits right now as i

00:27:52,640 --> 00:27:57,760
said like we have

00:27:54,320 --> 00:28:01,200
gating framework we have ci systems

00:27:57,760 --> 00:28:03,200
uh pushing results to message bus and

00:28:01,200 --> 00:28:06,640
results they'd be aggregating them

00:28:03,200 --> 00:28:10,480
and this system uh

00:28:06,640 --> 00:28:15,039
like it need it needs to learn

00:28:10,480 --> 00:28:18,080
certain corner cases

00:28:15,039 --> 00:28:18,880
needs to add certain limits but it needs

00:28:18,080 --> 00:28:22,080
to grow

00:28:18,880 --> 00:28:27,279
out of the usage so basically right now

00:28:22,080 --> 00:28:29,760
we don't see requests and problems with

00:28:27,279 --> 00:28:32,799
loan test cases that's why we don't

00:28:29,760 --> 00:28:32,799
introduce limits

00:28:35,200 --> 00:28:41,520
any result that is available before the

00:28:38,000 --> 00:28:41,520
next row hide compose

00:28:42,080 --> 00:28:45,600
so let's put it this way you create an

00:28:45,039 --> 00:28:49,799
update

00:28:45,600 --> 00:28:51,919
uh this is uh your package of version

00:28:49,799 --> 00:28:54,640
1.2.0

00:28:51,919 --> 00:28:56,559
we run tests for this particular update

00:28:54,640 --> 00:28:57,360
and so we send the test message which

00:28:56,559 --> 00:29:00,559
says

00:28:57,360 --> 00:29:04,080
package x of version 1.2.0

00:29:00,559 --> 00:29:05,520
passed this rpm diplin test so this

00:29:04,080 --> 00:29:08,159
result will be valid

00:29:05,520 --> 00:29:09,440
just for this package and this means

00:29:08,159 --> 00:29:12,399
that this package

00:29:09,440 --> 00:29:13,679
can lend into rawhide once the package

00:29:12,399 --> 00:29:16,240
lands in rawhide

00:29:13,679 --> 00:29:18,159
result is not going anywhere it still is

00:29:16,240 --> 00:29:19,679
the entry in results db but it's

00:29:18,159 --> 00:29:22,960
attached to that

00:29:19,679 --> 00:29:25,360
specific build which you tested

00:29:22,960 --> 00:29:26,480
if you create new package update of the

00:29:25,360 --> 00:29:30,320
same package

00:29:26,480 --> 00:29:30,320
and you bump version and it's now

00:29:30,679 --> 00:29:35,919
1.2.0-3

00:29:32,240 --> 00:29:36,480
then you get a new test run a new test

00:29:35,919 --> 00:29:38,880
result

00:29:36,480 --> 00:29:40,640
specific for this build previous test

00:29:38,880 --> 00:29:43,120
result is not valid for this built

00:29:40,640 --> 00:29:43,120
anymore

00:29:44,559 --> 00:29:49,840
does it explain the question or not

00:29:47,440 --> 00:29:49,840
really

00:29:49,919 --> 00:29:55,840
okay good

00:29:56,240 --> 00:30:03,360
about how long ci system

00:30:00,080 --> 00:30:06,240
question we have an example

00:30:03,360 --> 00:30:08,880
of certain packages of course our

00:30:06,240 --> 00:30:13,039
favorite packages in on ci

00:30:08,880 --> 00:30:16,559
are gcc kernel

00:30:13,039 --> 00:30:20,320
tech tech life or tech leaf

00:30:16,559 --> 00:30:24,399
and and we're a couple more

00:30:20,320 --> 00:30:25,600
so i think gcc test cases run for more

00:30:24,399 --> 00:30:28,960
than 10 hours

00:30:25,600 --> 00:30:31,279
right now so

00:30:28,960 --> 00:30:34,320
we originally had a default limit of

00:30:31,279 --> 00:30:36,559
four hours per test for this git test

00:30:34,320 --> 00:30:38,799
but we added the feature into the

00:30:36,559 --> 00:30:42,880
configuration option so that

00:30:38,799 --> 00:30:46,000
uh limits can be extended to whatever

00:30:42,880 --> 00:30:50,159
time you wish

00:30:46,000 --> 00:30:51,600
basically our idea of this um time

00:30:50,159 --> 00:30:54,320
limits is that

00:30:51,600 --> 00:30:55,760
if packager if package maintainer is

00:30:54,320 --> 00:30:59,440
okay with waiting

00:30:55,760 --> 00:31:02,960
we don't mind running uh these tests for

00:30:59,440 --> 00:31:05,519
that long so we we try to

00:31:02,960 --> 00:31:07,840
give more possibilities to package

00:31:05,519 --> 00:31:10,559
maintainer to navigate this part

00:31:07,840 --> 00:31:11,679
while it works for package-specific

00:31:10,559 --> 00:31:14,799
tests of course

00:31:11,679 --> 00:31:18,080
for global tests where we consider

00:31:14,799 --> 00:31:20,399
eventually adding installability check

00:31:18,080 --> 00:31:23,120
for example as a global policy

00:31:20,399 --> 00:31:24,720
then uh in that conversation we will

00:31:23,120 --> 00:31:28,480
need to figure out the

00:31:24,720 --> 00:31:29,200
top limit which we must as uh fedora ci

00:31:28,480 --> 00:31:31,360
system

00:31:29,200 --> 00:31:32,240
provide before we actually enable this

00:31:31,360 --> 00:31:35,600
as a

00:31:32,240 --> 00:31:38,880
global blocking test so it's definitely

00:31:35,600 --> 00:31:40,960
not going to be just our decision to

00:31:38,880 --> 00:31:42,320
one day to enable the test and and

00:31:40,960 --> 00:31:46,240
everyone is blocked

00:31:42,320 --> 00:31:48,559
this will be a discussion and

00:31:46,240 --> 00:31:52,480
conversation about limits about uh

00:31:48,559 --> 00:31:55,279
reliability and and all of his parts

00:31:52,480 --> 00:31:57,039
and one more thing i forget to mention

00:31:55,279 --> 00:31:59,519
is that

00:31:57,039 --> 00:32:01,679
i talk about like blocking and

00:31:59,519 --> 00:32:06,240
non-blocking tests

00:32:01,679 --> 00:32:08,480
but uh if we

00:32:06,240 --> 00:32:09,360
look at the implementation there's

00:32:08,480 --> 00:32:13,039
actually no

00:32:09,360 --> 00:32:16,000
blocking tests at all so every

00:32:13,039 --> 00:32:17,440
blocking test even if it's really a

00:32:16,000 --> 00:32:20,000
blocking test which

00:32:17,440 --> 00:32:22,480
package maintainer decided to or run for

00:32:20,000 --> 00:32:26,159
this package and block on that

00:32:22,480 --> 00:32:29,279
uh every test results can be waived

00:32:26,159 --> 00:32:32,080
because again uh we want to

00:32:29,279 --> 00:32:32,640
keep the control on the maintainer side

00:32:32,080 --> 00:32:36,159
we

00:32:32,640 --> 00:32:39,840
expect that maintainers uh

00:32:36,159 --> 00:32:40,799
in certain cases uh where we just cannot

00:32:39,840 --> 00:32:42,960
predict

00:32:40,799 --> 00:32:44,320
some corner cases and what's happening

00:32:42,960 --> 00:32:47,440
with the tests and

00:32:44,320 --> 00:32:48,640
in in this particular combination of

00:32:47,440 --> 00:32:52,399
packages

00:32:48,640 --> 00:32:54,640
we give the freedom of making a final

00:32:52,399 --> 00:32:58,559
decision to the maintainer so what will

00:32:54,640 --> 00:33:00,399
happen in such cases that you add add

00:32:58,559 --> 00:33:02,080
your test as a blocking test and you

00:33:00,399 --> 00:33:04,559
configure your repository uh

00:33:02,080 --> 00:33:05,200
your package updates to block on results

00:33:04,559 --> 00:33:08,880
of

00:33:05,200 --> 00:33:12,000
say rpm diploid then

00:33:08,880 --> 00:33:16,960
you create an update

00:33:12,000 --> 00:33:16,960
it fails the rpm deployment and

00:33:18,159 --> 00:33:24,399
you see that rpm deployment is just not

00:33:21,919 --> 00:33:25,360
getting the right information because

00:33:24,399 --> 00:33:27,600
this package

00:33:25,360 --> 00:33:30,000
is uh slightly different from what we

00:33:27,600 --> 00:33:32,480
expected and there is a

00:33:30,000 --> 00:33:34,880
huge explanation why it still should go

00:33:32,480 --> 00:33:37,120
into fedora high

00:33:34,880 --> 00:33:39,360
then in this case you can say like i'm

00:33:37,120 --> 00:33:42,000
going to ignore this test result for now

00:33:39,360 --> 00:33:42,640
and let this package in i will deal with

00:33:42,000 --> 00:33:45,840
this pack

00:33:42,640 --> 00:33:47,039
with this uh test and this package later

00:33:45,840 --> 00:33:49,840
if needed

00:33:47,039 --> 00:33:51,600
but like i i know what's happening and i

00:33:49,840 --> 00:33:52,000
know that it's okay and i know that

00:33:51,600 --> 00:33:54,720
package

00:33:52,000 --> 00:33:55,760
can go forward so even blocking tests

00:33:54,720 --> 00:33:59,919
are not

00:33:55,760 --> 00:33:59,919
completely blocking in our setup

00:34:02,080 --> 00:34:07,840
any other questions

00:34:11,839 --> 00:34:17,839
if not then uh again we

00:34:14,960 --> 00:34:19,200
welcome everyone at our fedora ci rc

00:34:17,839 --> 00:34:22,159
channel mailing list and

00:34:19,200 --> 00:34:23,679
fedorasia special interest group we are

00:34:22,159 --> 00:34:25,760
open to ideas we

00:34:23,679 --> 00:34:29,359
are open for contributions our code is

00:34:25,760 --> 00:34:32,399
on github right now under fedora ci

00:34:29,359 --> 00:34:35,520
organization so if you

00:34:32,399 --> 00:34:39,440
interested in jenkins stuff

00:34:35,520 --> 00:34:41,919
and in things like that uh devops

00:34:39,440 --> 00:34:42,480
managing kubernetes clusters come talk

00:34:41,919 --> 00:34:46,560
we have

00:34:42,480 --> 00:34:48,879
interesting conversations about it and

00:34:46,560 --> 00:34:51,599
yeah we're open for adding new tasks to

00:34:48,879 --> 00:34:55,119
us and we're open to help you to

00:34:51,599 --> 00:34:56,399
uh make your ci systems testing fedora

00:34:55,119 --> 00:34:58,240
updates i think

00:34:56,399 --> 00:35:00,839
there will be could be a lot of hidden

00:34:58,240 --> 00:35:05,200
benefit for fedora from having such

00:35:00,839 --> 00:35:08,240
environments thanks everyone

00:35:05,200 --> 00:35:11,440
and see you on all other sessions

00:35:08,240 --> 00:35:17,839
including social and anti-social

00:35:11,440 --> 00:35:17,839

YouTube URL: https://www.youtube.com/watch?v=cm7l1Z-Ltzc


