Title: Fedora at Facebook: a pipeline to upstreams
Publication date: 2020-09-15
Playlist: Nest with Fedora 2020
Description: 
	This session will present Facebook's unique position for testing with Fedora, FB CentOS, and RHEL.

Presented at Nest With Fedora 2020.
Captions: 
	00:00:02,399 --> 00:00:07,040
welcome everyone

00:00:03,520 --> 00:00:09,120
uh i'm michelle from uh facebook's

00:00:07,040 --> 00:00:12,160
client platform engineering team

00:00:09,120 --> 00:00:12,719
i go by salim m.a on the federal account

00:00:12,160 --> 00:00:16,080
system

00:00:12,719 --> 00:00:18,320
and michelle salim on irc

00:00:16,080 --> 00:00:20,000
uh we have davide here as well from our

00:00:18,320 --> 00:00:21,760
operating system team

00:00:20,000 --> 00:00:23,600
so in case you guys have questions about

00:00:21,760 --> 00:00:26,000
how we manage um

00:00:23,600 --> 00:00:27,119
our server fleet or if you have any

00:00:26,000 --> 00:00:31,840
questions about centos

00:00:27,119 --> 00:00:31,840
david will be here to answer those

00:00:32,559 --> 00:00:35,120
oh dear

00:00:35,600 --> 00:00:39,440
i'm not sure what's going on the slides

00:00:37,120 --> 00:00:43,040
here it was working half an hour ago

00:00:39,440 --> 00:00:46,079
anyway so this vlog will describe

00:00:43,040 --> 00:00:49,760
facebook's federal client fleet and how

00:00:46,079 --> 00:00:51,280
it is well positioned at facebook

00:00:49,760 --> 00:00:53,360
to be used for cross-function

00:00:51,280 --> 00:00:55,680
collaboration with external

00:00:53,360 --> 00:00:57,199
external upstreams like fedora or

00:00:55,680 --> 00:01:01,440
internal themes of facebook

00:00:57,199 --> 00:01:01,440
that contribute to linux upstream

00:01:08,880 --> 00:01:12,479
so the agenda will start with

00:01:11,520 --> 00:01:15,680
introduction

00:01:12,479 --> 00:01:18,479
which we already know um i'll

00:01:15,680 --> 00:01:20,640
describe what i mean when i say that we

00:01:18,479 --> 00:01:26,560
treat fedora and

00:01:20,640 --> 00:01:29,439
our server team as upstreams

00:01:26,560 --> 00:01:30,400
i'll go to a concrete example of how we

00:01:29,439 --> 00:01:32,720
are

00:01:30,400 --> 00:01:34,159
provision revamping the way we provision

00:01:32,720 --> 00:01:35,759
client systems

00:01:34,159 --> 00:01:37,840
to make it easier to contribute to

00:01:35,759 --> 00:01:41,360
upstream

00:01:37,840 --> 00:01:42,799
and some of the changes in fedora 33

00:01:41,360 --> 00:01:43,360
that we are actually dog footing right

00:01:42,799 --> 00:01:46,720
now

00:01:43,360 --> 00:01:46,720
on top of fedora 32

00:01:46,960 --> 00:01:55,680
and some upcoming projects that we want

00:01:48,799 --> 00:01:59,520
to work on with upstream

00:01:55,680 --> 00:01:59,520
oh yeah back

00:02:00,159 --> 00:02:03,840
so um i've been on linux users since

00:02:02,799 --> 00:02:05,759
00:02:03,840 --> 00:02:07,840
i wanted to start a few years earlier

00:02:05,759 --> 00:02:09,920
but i didn't have my own computer

00:02:07,840 --> 00:02:11,280
i've been contributing to fedora since

00:02:09,920 --> 00:02:13,599
00:02:11,280 --> 00:02:14,480
mostly doing package maintenance but

00:02:13,599 --> 00:02:16,720
it's only

00:02:14,480 --> 00:02:17,599
in the past two years that i actually

00:02:16,720 --> 00:02:19,760
get to work

00:02:17,599 --> 00:02:22,480
get paid to actually work on fedora at

00:02:19,760 --> 00:02:26,480
facebook which is really really cool

00:02:22,480 --> 00:02:26,480
it's my second team here

00:02:27,040 --> 00:02:30,480
on my first team at facebook i actually

00:02:29,120 --> 00:02:34,000
manage

00:02:30,480 --> 00:02:37,120
this so yeah scary thing

00:02:34,000 --> 00:02:39,440
mobile phones in data centers these are

00:02:37,120 --> 00:02:41,120
used in our ci system so we can test

00:02:39,440 --> 00:02:44,080
mobile apps and find

00:02:41,120 --> 00:02:46,239
bugs and performance regressions they

00:02:44,080 --> 00:02:47,680
used to be a lot harder to maintain them

00:02:46,239 --> 00:02:49,840
right now because

00:02:47,680 --> 00:02:50,879
phones were not designed to be fully

00:02:49,840 --> 00:02:53,519
automated

00:02:50,879 --> 00:02:55,040
they assumed there's a bad gap and in

00:02:53,519 --> 00:02:59,760
this case we don't

00:02:55,040 --> 00:03:02,239
so we plug it into our automated

00:02:59,760 --> 00:03:03,360
recovery system but in case of phones a

00:03:02,239 --> 00:03:05,760
lot of the outages

00:03:03,360 --> 00:03:08,480
basically involve paging an operator to

00:03:05,760 --> 00:03:08,480
come and fix it

00:03:12,640 --> 00:03:16,480
and now i manage well no i don't manage

00:03:15,599 --> 00:03:18,640
my cats

00:03:16,480 --> 00:03:20,319
because they cannot be managed you might

00:03:18,640 --> 00:03:21,760
have seen some of you might have seen

00:03:20,319 --> 00:03:24,799
merlin the fluffy one

00:03:21,760 --> 00:03:26,480
in social hours he is banished right now

00:03:24,799 --> 00:03:28,239
because he likes

00:03:26,480 --> 00:03:29,519
to roll around on my keyboard too much

00:03:28,239 --> 00:03:32,959
and that might not be good

00:03:29,519 --> 00:03:35,599
i'm presenting

00:03:32,959 --> 00:03:36,720
so yeah um i'm in the client platform

00:03:35,599 --> 00:03:39,280
engineering team

00:03:36,720 --> 00:03:41,120
with uh jim who is on the chat and a

00:03:39,280 --> 00:03:46,159
bunch of other people although

00:03:41,120 --> 00:03:48,879
only about three of us actually um

00:03:46,159 --> 00:03:50,159
i have expertise in linux as jim said

00:03:48,879 --> 00:03:53,760
most of our fleet

00:03:50,159 --> 00:03:53,760
is mac os and then windows

00:03:57,680 --> 00:04:01,360
i don't know like um i might be a muscle

00:03:59,680 --> 00:04:03,760
kiss you know like i think mobile phone

00:04:01,360 --> 00:04:06,799
and then linux but hey you know

00:04:03,760 --> 00:04:09,760
someone has to do it it's fun and

00:04:06,799 --> 00:04:11,280
yeah so another view of our desktop

00:04:09,760 --> 00:04:14,640
linux clip

00:04:11,280 --> 00:04:15,680
we have on the magnitude of around a

00:04:14,640 --> 00:04:19,199
thousand

00:04:15,680 --> 00:04:21,680
lineups laptops and desktops we

00:04:19,199 --> 00:04:23,040
switched over from a few years ago from

00:04:21,680 --> 00:04:26,240
mostly running ubuntu

00:04:23,040 --> 00:04:28,479
to mostly running fedora and the reason

00:04:26,240 --> 00:04:30,880
for that is that we

00:04:28,479 --> 00:04:31,759
uh our production fleet in data center

00:04:30,880 --> 00:04:35,120
use um

00:04:31,759 --> 00:04:37,120
centos and having

00:04:35,120 --> 00:04:38,320
picking a more similar distribution

00:04:37,120 --> 00:04:41,040
makes it easier to

00:04:38,320 --> 00:04:43,040
share things like how we build internal

00:04:41,040 --> 00:04:45,919
packages and

00:04:43,040 --> 00:04:46,560
how um how we actually manage these

00:04:45,919 --> 00:04:49,600
systems

00:04:46,560 --> 00:04:52,800
um by reusing the same cookbooks

00:04:49,600 --> 00:04:55,759
uh the fleet is mostly lenovo uh

00:04:52,800 --> 00:04:57,040
thinkpads on laptops and think stations

00:04:55,759 --> 00:05:01,120
on

00:04:57,040 --> 00:05:01,919
desktops we are also looking at uh using

00:05:01,120 --> 00:05:03,919
samples

00:05:01,919 --> 00:05:06,720
for desktops and there are some reasons

00:05:03,919 --> 00:05:08,240
for that some of our

00:05:06,720 --> 00:05:10,320
some of the themes especially the ones

00:05:08,240 --> 00:05:14,639
on desktops

00:05:10,320 --> 00:05:17,039
find it they they prefer the stability

00:05:14,639 --> 00:05:20,080
of centers especially having a

00:05:17,039 --> 00:05:24,880
kernel that gets that port changes

00:05:20,080 --> 00:05:27,360
instead of getting a new kernel every

00:05:24,880 --> 00:05:29,440
every two months or so like fedora

00:05:27,360 --> 00:05:31,919
especially if they have some performance

00:05:29,440 --> 00:05:31,919
sensitive

00:05:32,320 --> 00:05:39,360
workloads there's also the case that

00:05:36,160 --> 00:05:42,560
some of these themes need nvidia

00:05:39,360 --> 00:05:44,560
because they use cuda and therefore

00:05:42,560 --> 00:05:46,400
they they need to use the binary nvidia

00:05:44,560 --> 00:05:48,880
driver which is

00:05:46,400 --> 00:05:50,720
it works in fedora but it's not really

00:05:48,880 --> 00:05:52,400
supported and if it breaks nvidia will

00:05:50,720 --> 00:05:55,759
not do anything to fix it

00:05:52,400 --> 00:05:58,960
so it might be uh better to

00:05:55,759 --> 00:05:58,960
put them on centos anyway

00:05:59,919 --> 00:06:05,440
so uh what do i mean when i say like

00:06:03,039 --> 00:06:08,319
we consider fedora and the server fleet

00:06:05,440 --> 00:06:08,319
as upstreams

00:06:08,479 --> 00:06:14,880
for fedora we

00:06:11,759 --> 00:06:17,919
we basically mostly use fedora

00:06:14,880 --> 00:06:18,639
as is and we try not to customize too

00:06:17,919 --> 00:06:21,680
many things

00:06:18,639 --> 00:06:24,319
that means when we have issues we can

00:06:21,680 --> 00:06:25,919
we can report them upstream we can work

00:06:24,319 --> 00:06:29,520
to actually fix it

00:06:25,919 --> 00:06:33,199
and we can work on upcoming changes

00:06:29,520 --> 00:06:36,400
we provision using kickstarts we'll

00:06:33,199 --> 00:06:39,440
go over this in more details in a bit

00:06:36,400 --> 00:06:42,479
so the reason we particularly need to

00:06:39,440 --> 00:06:44,560
use kickstart is that with

00:06:42,479 --> 00:06:46,840
linux right now we we have a requirement

00:06:44,560 --> 00:06:49,919
to have full disk encryption

00:06:46,840 --> 00:06:53,120
and with locks you have to basically

00:06:49,919 --> 00:06:56,000
encrypt when you install you cannot just

00:06:53,120 --> 00:06:58,319
bolt on encryption on an existing hard

00:06:56,000 --> 00:06:58,319
disk

00:06:58,479 --> 00:07:02,880
and we it's a super bad experience if

00:07:01,759 --> 00:07:04,400
after someone

00:07:02,880 --> 00:07:05,840
went to the trouble of installing linux

00:07:04,400 --> 00:07:07,360
and then we tell them hey sorry your

00:07:05,840 --> 00:07:11,039
machine is out of compliance

00:07:07,360 --> 00:07:14,800
you have to reprovision ah dog fooding

00:07:11,039 --> 00:07:14,800
yeah dog fooding just means

00:07:15,120 --> 00:07:18,720
internally using a change that's not

00:07:17,039 --> 00:07:22,160
actually uh it is outside yet

00:07:18,720 --> 00:07:24,960
so the idea being that if you find bugs

00:07:22,160 --> 00:07:27,520
you um get broken by the by the bug

00:07:24,960 --> 00:07:27,520
instead of your

00:07:28,840 --> 00:07:32,960
users

00:07:30,240 --> 00:07:34,560
production flip production fleet is

00:07:32,960 --> 00:07:37,599
mostly center 7 right now

00:07:34,560 --> 00:07:41,039
uh it's migrating to santos 8 stream

00:07:37,599 --> 00:07:43,440
the idea being that we we can catch

00:07:41,039 --> 00:07:44,560
errors and contribute fixes before they

00:07:43,440 --> 00:07:48,960
make it to

00:07:44,560 --> 00:07:51,120
the stable el release it's um

00:07:48,960 --> 00:07:52,000
very slightly modified and most other

00:07:51,120 --> 00:07:56,319
modifications

00:07:52,000 --> 00:07:58,400
are shared i've seen

00:07:56,319 --> 00:07:59,840
they are there publicly uh in the rpm

00:07:58,400 --> 00:08:02,000
backbox people

00:07:59,840 --> 00:08:03,120
of the main interest is that the kernel

00:08:02,000 --> 00:08:05,120
is um

00:08:03,120 --> 00:08:08,720
and systemd are much more up-to-date

00:08:05,120 --> 00:08:08,720
than on the stock center seven

00:08:10,319 --> 00:08:13,680
we facebook has a kernel team that

00:08:12,319 --> 00:08:16,479
actively um

00:08:13,680 --> 00:08:17,599
work upstream on new connell features

00:08:16,479 --> 00:08:19,199
and we um

00:08:17,599 --> 00:08:20,960
we also contribute to systemd and

00:08:19,199 --> 00:08:24,400
basically we track system the

00:08:20,960 --> 00:08:26,560
changes in the server fleet

00:08:24,400 --> 00:08:27,520
i think they will be mostly on santos 8

00:08:26,560 --> 00:08:30,879
stream uh

00:08:27,520 --> 00:08:33,440
by q1 next year

00:08:30,879 --> 00:08:34,479
uh one thing that we want to borrow um

00:08:33,440 --> 00:08:36,000
on the desktop

00:08:34,479 --> 00:08:37,839
uh that's already live on the server

00:08:36,000 --> 00:08:40,800
fleet is uh they do

00:08:37,839 --> 00:08:41,360
a lot of really cool resource control uh

00:08:40,800 --> 00:08:44,880
work

00:08:41,360 --> 00:08:46,959
on top of sync groups too uh

00:08:44,880 --> 00:08:49,120
so there's a link there to fb tags too

00:08:46,959 --> 00:08:51,680
which is the internal code name for it

00:08:49,120 --> 00:08:52,720
it's going to be it's in the process of

00:08:51,680 --> 00:08:57,040
being upstreamed

00:08:52,720 --> 00:08:59,839
to systemd so soon you'll be if you

00:08:57,040 --> 00:09:00,720
if you've heard of systemd umd that's

00:08:59,839 --> 00:09:02,880
based on

00:09:00,720 --> 00:09:05,120
facebook only that currently is live

00:09:02,880 --> 00:09:07,519
internally

00:09:05,120 --> 00:09:09,120
and yeah uh the production fleet is many

00:09:07,519 --> 00:09:12,399
choosing chef

00:09:09,120 --> 00:09:16,000
the same way we manage the desktop fleet

00:09:12,399 --> 00:09:18,160
we don't share uh we don't share all the

00:09:16,000 --> 00:09:20,839
cookbooks but we are trying to converge

00:09:18,160 --> 00:09:23,839
on using the same cookbooks

00:09:20,839 --> 00:09:23,839
everywhere

00:09:24,560 --> 00:09:30,399
yeah jim i wouldn't advise like

00:09:27,680 --> 00:09:30,399
eating dog food

00:09:31,360 --> 00:09:36,480
collaboration so yeah um so

00:09:35,040 --> 00:09:38,399
there's a lot of avenue for

00:09:36,480 --> 00:09:41,200
collaboration on um

00:09:38,399 --> 00:09:41,760
uh with fedora on testing upcoming

00:09:41,200 --> 00:09:44,480
changes

00:09:41,760 --> 00:09:45,200
and on basically uh reporting and

00:09:44,480 --> 00:09:48,160
helping fix

00:09:45,200 --> 00:09:50,080
issues that we find um for the for the

00:09:48,160 --> 00:09:52,800
upscale tooling that we use

00:09:50,080 --> 00:09:53,519
with the production fleet uh some of the

00:09:52,800 --> 00:09:56,240
changes

00:09:53,519 --> 00:09:57,200
uh like resource control go to the

00:09:56,240 --> 00:09:58,880
server fleet first

00:09:57,200 --> 00:10:00,880
and it would be nice to basically

00:09:58,880 --> 00:10:03,360
validate them on the

00:10:00,880 --> 00:10:04,480
desktop fleet before they make it into

00:10:03,360 --> 00:10:08,399
say fedora

00:10:04,480 --> 00:10:12,560
or into upswing

00:10:08,399 --> 00:10:15,279
another uh common feature is that

00:10:12,560 --> 00:10:16,480
centos like uh enterprise linux

00:10:15,279 --> 00:10:18,640
basically um

00:10:16,480 --> 00:10:20,320
they only have a subset of packages from

00:10:18,640 --> 00:10:22,800
fedora and those are the packages

00:10:20,320 --> 00:10:24,800
that red hat is committed to maintaining

00:10:22,800 --> 00:10:27,839
if you want to use anything else

00:10:24,800 --> 00:10:31,360
you need to use apple extra packages for

00:10:27,839 --> 00:10:33,920
enterprise linux and we do use

00:10:31,360 --> 00:10:34,560
some apple packages uh on the server

00:10:33,920 --> 00:10:38,480
fleet

00:10:34,560 --> 00:10:40,720
and um on the developer vms

00:10:38,480 --> 00:10:43,200
and the way apple works is that whenever

00:10:40,720 --> 00:10:45,040
there's a new major el release

00:10:43,200 --> 00:10:47,040
apple packages don't get automatically

00:10:45,040 --> 00:10:47,519
branched because there's no guarantee

00:10:47,040 --> 00:10:50,959
that

00:10:47,519 --> 00:10:53,519
someone actually wants to use package so

00:10:50,959 --> 00:10:55,440
it's um it's a room for collaboration

00:10:53,519 --> 00:10:57,440
here in that we um

00:10:55,440 --> 00:10:59,120
since we actually need some of these

00:10:57,440 --> 00:11:01,440
packages for our workflows

00:10:59,120 --> 00:11:02,720
we should probably at least commenting

00:11:01,440 --> 00:11:04,000
them to make sure that they actually

00:11:02,720 --> 00:11:06,560
branched

00:11:04,000 --> 00:11:06,560
and maintained

00:11:08,160 --> 00:11:11,680
oh going back to the collaboration

00:11:10,079 --> 00:11:13,360
there's um one

00:11:11,680 --> 00:11:15,680
other really cool thing that i

00:11:13,360 --> 00:11:19,040
discovered this morning in the ci talk

00:11:15,680 --> 00:11:22,240
apparently now it's possible to run your

00:11:19,040 --> 00:11:24,320
own ci server and contribute the results

00:11:22,240 --> 00:11:26,480
to the federal rca system which would be

00:11:24,320 --> 00:11:28,800
really cool because we do have some

00:11:26,480 --> 00:11:30,480
non-standard hardware and if we can

00:11:28,800 --> 00:11:31,920
actually automatically report

00:11:30,480 --> 00:11:35,680
regressions

00:11:31,920 --> 00:11:37,519
that will help prevent

00:11:35,680 --> 00:11:39,760
our users from being broken when it gets

00:11:37,519 --> 00:11:39,760
pushed

00:11:39,839 --> 00:11:43,600
so some organization changes we are

00:11:42,240 --> 00:11:46,320
thinking of doing

00:11:43,600 --> 00:11:48,160
we already have some people um at

00:11:46,320 --> 00:11:49,440
facebook who actually are federal

00:11:48,160 --> 00:11:51,760
contributors

00:11:49,440 --> 00:11:52,800
uh these are not really organized at the

00:11:51,760 --> 00:11:55,600
moment

00:11:52,800 --> 00:11:58,320
so it would be nice if there's um

00:11:55,600 --> 00:12:00,800
on-call rotation that's in charge of uh

00:11:58,320 --> 00:12:01,600
packaging so we can say hey um you know

00:12:00,800 --> 00:12:03,360
this package

00:12:01,600 --> 00:12:04,639
uh we need this package in apple but

00:12:03,360 --> 00:12:07,839
it's not there right now

00:12:04,639 --> 00:12:09,440
could someone help basically either get

00:12:07,839 --> 00:12:11,360
it commentated or get it

00:12:09,440 --> 00:12:13,200
branched and built by uh by the

00:12:11,360 --> 00:12:16,800
maintainer

00:12:13,200 --> 00:12:18,800
we we need to involve our

00:12:16,800 --> 00:12:21,040
users more in testing especially the

00:12:18,800 --> 00:12:24,240
ones that have non-standard hardware

00:12:21,040 --> 00:12:27,360
for example when the 5.7 kernel got up

00:12:24,240 --> 00:12:28,639
our msi users got broken because their

00:12:27,360 --> 00:12:31,760
wi-fi

00:12:28,639 --> 00:12:34,720
um pci device id was not

00:12:31,760 --> 00:12:35,600
recognized anymore after um after the

00:12:34,720 --> 00:12:38,800
driver got

00:12:35,600 --> 00:12:40,399
refactored personally so that was fun um

00:12:38,800 --> 00:12:42,000
if they had been participating in the

00:12:40,399 --> 00:12:44,959
test day they would have noticed

00:12:42,000 --> 00:12:45,839
and it would have been probably fixed

00:12:44,959 --> 00:12:47,200
upstream

00:12:45,839 --> 00:12:49,040
or you know like fedora wouldn't have

00:12:47,200 --> 00:12:53,360
released the 5.7

00:12:49,040 --> 00:12:57,120
update i think it's finally fixed in 579

00:12:53,360 --> 00:12:59,760
and yeah uh there are some

00:12:57,120 --> 00:13:00,320
changes that we are working on upstream

00:12:59,760 --> 00:13:06,160
with

00:13:00,320 --> 00:13:07,839
other facebook themes like uh battery vs

00:13:06,160 --> 00:13:11,360
i'll try and go a bit quicker since

00:13:07,839 --> 00:13:11,360
otherwise we won't get to the demo

00:13:11,760 --> 00:13:18,000
so um one example um

00:13:15,040 --> 00:13:18,880
of how we we are defactoring of the way

00:13:18,000 --> 00:13:20,720
we work to

00:13:18,880 --> 00:13:22,240
more closely at treycastling is

00:13:20,720 --> 00:13:25,200
provisioning

00:13:22,240 --> 00:13:26,079
we traditionally we provisioned with

00:13:25,200 --> 00:13:28,959
pixie

00:13:26,079 --> 00:13:32,800
doing network booting we later switched

00:13:28,959 --> 00:13:32,800
to ipxc because we find that

00:13:33,040 --> 00:13:37,440
trying to configure all our offices to

00:13:35,279 --> 00:13:40,480
make sure that pixi works in all of them

00:13:37,440 --> 00:13:42,000
is a pain especially as we move to ipv6

00:13:40,480 --> 00:13:44,480
only offices

00:13:42,000 --> 00:13:45,760
uh the downside using ipxc is that we

00:13:44,480 --> 00:13:49,680
cannot circuit build

00:13:45,760 --> 00:13:51,839
because the ipxc image is not fined

00:13:49,680 --> 00:13:53,760
it also assumes that you have access to

00:13:51,839 --> 00:13:55,760
the internal network

00:13:53,760 --> 00:13:57,920
it makes it hard to actually uh test

00:13:55,760 --> 00:14:00,880
kickstart changes because

00:13:57,920 --> 00:14:02,000
the kickstart files live on the server

00:14:00,880 --> 00:14:03,760
and whenever something

00:14:02,000 --> 00:14:05,440
breaks it's really hard to tell us him

00:14:03,760 --> 00:14:08,320
hey you know like it breaks

00:14:05,440 --> 00:14:08,880
but we we can give you lots but we don't

00:14:08,320 --> 00:14:10,560
really

00:14:08,880 --> 00:14:12,639
we cannot really share our kicks out

00:14:10,560 --> 00:14:16,079
because it has internal

00:14:12,639 --> 00:14:17,360
stuff in it and then uh covet hits and

00:14:16,079 --> 00:14:20,160
everyone's working from home

00:14:17,360 --> 00:14:22,160
and how do you provision at home right

00:14:20,160 --> 00:14:24,880
um

00:14:22,160 --> 00:14:25,680
so this is a system that we are moving

00:14:24,880 --> 00:14:28,880
to

00:14:25,680 --> 00:14:31,680
it's modular we use ks flatten and

00:14:28,880 --> 00:14:33,600
ks validate from pi kickstart so you can

00:14:31,680 --> 00:14:36,639
easily uh

00:14:33,600 --> 00:14:38,240
add snippets so

00:14:36,639 --> 00:14:39,839
uh if we want to import something we can

00:14:38,240 --> 00:14:41,279
just take out the snippet that contains

00:14:39,839 --> 00:14:43,040
our internal conflict and everything is

00:14:41,279 --> 00:14:46,079
fine

00:14:43,040 --> 00:14:47,440
we we then just inject a script that

00:14:46,079 --> 00:14:49,760
basically um

00:14:47,440 --> 00:14:51,440
let uh let our users uh run it and then

00:14:49,760 --> 00:14:54,079
it will pop them to authenticate so they

00:14:51,440 --> 00:14:57,519
can join the internal network

00:14:54,079 --> 00:15:00,959
we use logx to um basically inject

00:14:57,519 --> 00:15:02,079
the our kickstart into the standard net

00:15:00,959 --> 00:15:06,240
install iso

00:15:02,079 --> 00:15:09,120
so um so we get assigned bootloader

00:15:06,240 --> 00:15:10,480
we can keep circuit boot enabled it's

00:15:09,120 --> 00:15:14,320
brilliant and then

00:15:10,480 --> 00:15:18,240
we can just easily just put that iso

00:15:14,320 --> 00:15:18,240
on vms if you want to do testing

00:15:20,800 --> 00:15:26,399
so demo time let's hope this actually

00:15:24,839 --> 00:15:27,680
works

00:15:26,399 --> 00:15:29,839
so i'm going to speed it up since

00:15:27,680 --> 00:15:34,160
provisioning actually takes about

00:15:29,839 --> 00:15:40,959
half an hour sadly on a gigabit network

00:15:34,160 --> 00:15:43,199
so it's normal kickstart um it's

00:15:40,959 --> 00:15:44,320
it's a bit slow but um most things are

00:15:43,199 --> 00:15:47,600
automated

00:15:44,320 --> 00:15:55,839
um we found we found some bugs that i'll

00:15:47,600 --> 00:15:55,839
go um go over later

00:16:00,720 --> 00:16:07,440
okay this is at 30 times normal speed so

00:16:03,920 --> 00:16:09,279
i'll probably just talk to this a bit so

00:16:07,440 --> 00:16:10,480
as i mentioned we have some users who

00:16:09,279 --> 00:16:12,639
actually require

00:16:10,480 --> 00:16:13,519
uh using nvidia as part of their

00:16:12,639 --> 00:16:16,639
workflow so

00:16:13,519 --> 00:16:18,959
um the post install of this kickstart is

00:16:16,639 --> 00:16:20,639
actually going to set up rpm fusion

00:16:18,959 --> 00:16:22,560
so by the time the user gets that

00:16:20,639 --> 00:16:25,839
machine and put it for the first time

00:16:22,560 --> 00:16:25,839
and video is already enabled

00:16:30,959 --> 00:16:37,839
and i'll try to pause and get started

00:16:49,839 --> 00:16:55,120
oh neil interesting yeah

00:16:55,199 --> 00:16:58,880
yeah i don't want to mess around with

00:16:57,360 --> 00:17:01,440
the

00:16:58,880 --> 00:17:02,000
with the repo section a bit too much so

00:17:01,440 --> 00:17:04,240
basically

00:17:02,000 --> 00:17:06,000
right now it's uh this thing is going to

00:17:04,240 --> 00:17:07,199
auto detect and it will not actually

00:17:06,000 --> 00:17:09,760
enable rpm vision

00:17:07,199 --> 00:17:12,559
unless you actually have unless you

00:17:09,760 --> 00:17:16,000
actually have um

00:17:12,559 --> 00:17:18,480
have an nvidia graphics card

00:17:16,000 --> 00:17:19,919
or like i i make it to so that if you

00:17:18,480 --> 00:17:22,240
have a vm it will also

00:17:19,919 --> 00:17:24,799
install nvidia just so it's easier to

00:17:22,240 --> 00:17:24,799
test changes

00:17:25,919 --> 00:17:28,960
speaking of changes um so the

00:17:27,679 --> 00:17:31,760
kickstarter c

00:17:28,960 --> 00:17:32,960
actually installs uh actually insults

00:17:31,760 --> 00:17:35,440
but

00:17:32,960 --> 00:17:37,200
instead of est4 because we are not

00:17:35,440 --> 00:17:41,360
fooling changes that are going to go

00:17:37,200 --> 00:17:44,880
into affirmative three it uses lux

00:17:41,360 --> 00:17:45,440
because we as joseph was saying we don't

00:17:44,880 --> 00:17:49,919
have

00:17:45,440 --> 00:17:52,240
native butterflies encryption yet we

00:17:49,919 --> 00:17:54,000
uh before all these changes uh we used

00:17:52,240 --> 00:17:57,120
to use the default workstation layout

00:17:54,000 --> 00:17:58,799
so lvm and then using the good separate

00:17:57,120 --> 00:18:01,760
good at home partitions

00:17:58,799 --> 00:18:02,480
we find we find the same issue that

00:18:01,760 --> 00:18:04,720
caused

00:18:02,480 --> 00:18:06,000
fedora to want to switch to using

00:18:04,720 --> 00:18:09,760
battery fs anyway

00:18:06,000 --> 00:18:13,039
in that route tends to run out of space

00:18:09,760 --> 00:18:14,880
so just before using battery fs we

00:18:13,039 --> 00:18:15,520
switch to saying like screw it let's uh

00:18:14,880 --> 00:18:17,039
use

00:18:15,520 --> 00:18:18,799
a single unified to do that home

00:18:17,039 --> 00:18:20,160
partition which means you cannot

00:18:18,799 --> 00:18:22,640
re-image without backing up your home

00:18:20,160 --> 00:18:22,640
directory

00:18:23,280 --> 00:18:26,720
so now we still use lux until we have a

00:18:25,520 --> 00:18:28,880
diff encryption

00:18:26,720 --> 00:18:30,799
so we are not really in a hurry to

00:18:28,880 --> 00:18:32,640
encourage people to like hey please wipe

00:18:30,799 --> 00:18:35,039
your ext4 installation

00:18:32,640 --> 00:18:36,640
and use this shiny battery first you can

00:18:35,039 --> 00:18:38,000
if you want but

00:18:36,640 --> 00:18:40,240
in the near future we'll probably ask

00:18:38,000 --> 00:18:42,640
them to re-image anyway if we can

00:18:40,240 --> 00:18:44,240
move away from using locks the reason we

00:18:42,640 --> 00:18:44,799
don't really like using labs that much

00:18:44,240 --> 00:18:49,760
i'll

00:18:44,799 --> 00:18:52,720
go over it next slide we also use um

00:18:49,760 --> 00:18:54,960
dog food swap on zero and that way we

00:18:52,720 --> 00:18:56,160
can get away from using a separate swap

00:18:54,960 --> 00:19:00,080
partition

00:18:56,160 --> 00:19:03,760
we will probably add a swap file

00:19:00,080 --> 00:19:03,760
if if we find a need for it

00:19:04,880 --> 00:19:11,360
so some pain points uh if you use the

00:19:08,160 --> 00:19:12,480
default button fs layout in fedora and

00:19:11,360 --> 00:19:14,960
enable encryption

00:19:12,480 --> 00:19:16,400
you end up with a satellite uh root and

00:19:14,960 --> 00:19:19,840
swap

00:19:16,400 --> 00:19:21,600
partitions and they they are

00:19:19,840 --> 00:19:23,200
going to use the same encryption key but

00:19:21,600 --> 00:19:26,880
the problem is that

00:19:23,200 --> 00:19:28,960
if you ever change one of the key then

00:19:26,880 --> 00:19:31,679
it's you now have to type in two

00:19:28,960 --> 00:19:33,440
passwords to actually unlock your disks

00:19:31,679 --> 00:19:35,760
and it's basically between those two

00:19:33,440 --> 00:19:37,280
keys and the user account it's um

00:19:35,760 --> 00:19:38,799
now you suddenly have at least three

00:19:37,280 --> 00:19:41,039
passwords before

00:19:38,799 --> 00:19:42,240
any of the taking into account any

00:19:41,039 --> 00:19:45,679
amount of password that you might

00:19:42,240 --> 00:19:48,640
have to use um

00:19:45,679 --> 00:19:50,799
we another playing point in automating

00:19:48,640 --> 00:19:52,240
this is that anaconda doesn't have a way

00:19:50,799 --> 00:19:53,600
right now to actually say hey

00:19:52,240 --> 00:19:55,600
i want to install on the first

00:19:53,600 --> 00:19:57,200
non-removable drive and please don't

00:19:55,600 --> 00:20:00,320
touch anything else

00:19:57,200 --> 00:20:01,360
i had to implement a slightly climbing

00:20:00,320 --> 00:20:03,280
workaround

00:20:01,360 --> 00:20:05,280
which cas flattened doesn't like so

00:20:03,280 --> 00:20:06,880
basically i had to cast flatten the

00:20:05,280 --> 00:20:09,679
kickstart and then inject this other

00:20:06,880 --> 00:20:09,679
script behind it

00:20:09,840 --> 00:20:13,120
um there are some bugs that i'm going to

00:20:12,000 --> 00:20:16,559
report upstream

00:20:13,120 --> 00:20:18,880
like um if you want to basically not

00:20:16,559 --> 00:20:20,080
hard code the lux passphrase that's

00:20:18,880 --> 00:20:22,080
initially used

00:20:20,080 --> 00:20:23,760
it works in the text mode installer but

00:20:22,080 --> 00:20:25,919
not in graphical

00:20:23,760 --> 00:20:28,080
and also if you want to install the

00:20:25,919 --> 00:20:30,880
wi-fi it works in graphical mode but not

00:20:28,080 --> 00:20:30,880
over text mode

00:20:33,039 --> 00:20:37,679
i'll get to stefano's question later on

00:20:34,960 --> 00:20:37,679
using so far

00:20:39,039 --> 00:20:43,440
so yeah um right now we use uh swap on

00:20:42,320 --> 00:20:45,760
zero

00:20:43,440 --> 00:20:47,679
in this new kickstart most of our

00:20:45,760 --> 00:20:51,039
laptops have

00:20:47,679 --> 00:20:53,039
reasonably beefy hardware so um on

00:20:51,039 --> 00:20:54,400
on our initial testing we don't really

00:20:53,039 --> 00:20:57,760
need a swap file

00:20:54,400 --> 00:21:01,120
we we are going to basically manage it

00:20:57,760 --> 00:21:04,159
using chef if we find we need one

00:21:01,120 --> 00:21:06,080
we are not going to dog food the nano

00:21:04,159 --> 00:21:09,360
and steve operator change we'll just uh

00:21:06,080 --> 00:21:11,200
get it when philadelphia comes

00:21:09,360 --> 00:21:13,120
considering that the development

00:21:11,200 --> 00:21:15,039
discussion is uh

00:21:13,120 --> 00:21:16,480
way spicier than the discussion about

00:21:15,039 --> 00:21:19,520
adopting butler efforts

00:21:16,480 --> 00:21:20,880
we don't really want to get there we can

00:21:19,520 --> 00:21:25,200
probably drop foot uh

00:21:20,880 --> 00:21:27,200
some other phenotypic changes so

00:21:25,200 --> 00:21:29,280
i'm not sure which of them might be

00:21:27,200 --> 00:21:32,000
relevant to our use case but

00:21:29,280 --> 00:21:33,200
ping me if you if you want to get some

00:21:32,000 --> 00:21:36,080
if you think your change

00:21:33,200 --> 00:21:39,200
should actually um would make sense to

00:21:36,080 --> 00:21:39,200
get a wider person

00:21:39,360 --> 00:21:43,120
um so yeah uh i mentioned earlier that

00:21:42,320 --> 00:21:45,760
we

00:21:43,120 --> 00:21:46,480
we are probably going to work with some

00:21:45,760 --> 00:21:49,200
other

00:21:46,480 --> 00:21:50,320
internal teams at facebook to test

00:21:49,200 --> 00:21:53,760
systemd only

00:21:50,320 --> 00:21:56,559
uh before it basically enters upstream

00:21:53,760 --> 00:21:58,880
uh yeah it's a really good time to start

00:21:56,559 --> 00:22:00,320
working on resource control on the

00:21:58,880 --> 00:22:03,919
dessert fleet

00:22:00,320 --> 00:22:06,240
fedora already ships early only

00:22:03,919 --> 00:22:07,520
but with battery fs becoming the default

00:22:06,240 --> 00:22:10,080
file system

00:22:07,520 --> 00:22:11,200
it doesn't suffer from exc4's priority

00:22:10,080 --> 00:22:16,000
inversion problem

00:22:11,200 --> 00:22:16,000
meaning that we can actually constrain

00:22:16,320 --> 00:22:22,400
some i o operation without it actually

00:22:20,000 --> 00:22:24,400
becoming a problem because you have low

00:22:22,400 --> 00:22:26,240
priorities

00:22:24,400 --> 00:22:28,480
tasks actually blocking a higher quality

00:22:26,240 --> 00:22:28,480
one

00:22:30,640 --> 00:22:35,039
one really cool thing that um we might

00:22:33,919 --> 00:22:37,679
want to

00:22:35,039 --> 00:22:38,720
test as well uh really soon is the fa

00:22:37,679 --> 00:22:41,280
polar cd

00:22:38,720 --> 00:22:43,200
it's um it's a demon that someone at red

00:22:41,280 --> 00:22:45,840
hat is working on

00:22:43,200 --> 00:22:47,039
i'm blanking on the name right now we we

00:22:45,840 --> 00:22:50,000
deploy something similar

00:22:47,039 --> 00:22:51,200
on our mac os street called santa and

00:22:50,000 --> 00:22:54,080
the idea is that

00:22:51,200 --> 00:22:54,880
with this you you can whitelist which

00:22:54,080 --> 00:22:58,080
application

00:22:54,880 --> 00:23:01,840
sorry you can basically uh get

00:22:58,080 --> 00:23:03,120
execution of binaries to only those that

00:23:01,840 --> 00:23:06,640
actually

00:23:03,120 --> 00:23:09,600
are are considered safe

00:23:06,640 --> 00:23:10,480
so for instance binaries that come from

00:23:09,600 --> 00:23:12,720
rpms

00:23:10,480 --> 00:23:15,280
or binaries that are in the trust

00:23:12,720 --> 00:23:15,280
database

00:23:15,679 --> 00:23:19,760
there are some features that i think it

00:23:18,400 --> 00:23:21,840
doesn't have right now

00:23:19,760 --> 00:23:23,440
so we cannot say hey only trust certain

00:23:21,840 --> 00:23:25,440
rpm signing keys but

00:23:23,440 --> 00:23:26,799
don't trust rpms and the user installs

00:23:25,440 --> 00:23:29,919
themselves

00:23:26,799 --> 00:23:31,679
and we currently don't have a way to to

00:23:29,919 --> 00:23:34,000
manage this fleetwood yet but it's

00:23:31,679 --> 00:23:34,000
coming

00:23:35,120 --> 00:23:39,120
another cool red hat project that we

00:23:36,799 --> 00:23:40,880
want to try is flip commander

00:23:39,120 --> 00:23:42,960
so with this the idea is that you can

00:23:40,880 --> 00:23:46,080
deploy configuration profiles

00:23:42,960 --> 00:23:46,880
instead of using a share to actually lay

00:23:46,080 --> 00:23:48,640
them down

00:23:46,880 --> 00:23:50,000
so it might make more sense for things

00:23:48,640 --> 00:23:54,080
that are a bit trickier to manage

00:23:50,000 --> 00:23:56,320
like network manager we

00:23:54,080 --> 00:23:57,200
once made that the upstream

00:23:56,320 --> 00:24:00,159
implementation

00:23:57,200 --> 00:24:04,159
heavily ties it to either 80 or free ipa

00:24:00,159 --> 00:24:05,520
which we don't want to use because we we

00:24:04,159 --> 00:24:08,559
basically

00:24:05,520 --> 00:24:10,559
want uh want it to be easy to manage our

00:24:08,559 --> 00:24:13,039
client fleet when they are roaming about

00:24:10,559 --> 00:24:16,240
not inside the internal network

00:24:13,039 --> 00:24:18,400
so we already use and help comment in

00:24:16,240 --> 00:24:20,799
micromdm which is

00:24:18,400 --> 00:24:23,360
a device management framework normally

00:24:20,799 --> 00:24:27,120
used for mac os and ios

00:24:23,360 --> 00:24:30,240
so if we go with this we might basically

00:24:27,120 --> 00:24:31,760
write back end for

00:24:30,240 --> 00:24:34,720
the free command client that make it

00:24:31,760 --> 00:24:34,720
talk to micro indian

00:24:36,240 --> 00:24:39,360
so yeah in conclusion we have two

00:24:38,320 --> 00:24:42,960
minutes

00:24:39,360 --> 00:24:46,080
um the way we manage uh

00:24:42,960 --> 00:24:47,440
our desktop industry is increasingly

00:24:46,080 --> 00:24:49,679
involves uh cost

00:24:47,440 --> 00:24:50,799
function collaboration with uh other

00:24:49,679 --> 00:24:54,720
teams whether at

00:24:50,799 --> 00:24:56,640
fedora or facebook and we

00:24:54,720 --> 00:24:58,080
we hope to collaborate more with

00:24:56,640 --> 00:25:00,480
community members or with

00:24:58,080 --> 00:25:01,679
other companies that have similar needs

00:25:00,480 --> 00:25:05,600
as us in managing

00:25:01,679 --> 00:25:08,240
the fleet so yeah

00:25:05,600 --> 00:25:09,279
when you get to the slide there are some

00:25:08,240 --> 00:25:13,039
resources here

00:25:09,279 --> 00:25:16,240
that have links to the first two

00:25:13,039 --> 00:25:17,520
uh about um talks that david gave about

00:25:16,240 --> 00:25:19,440
centos

00:25:17,520 --> 00:25:20,880
and the next one is a talk i gave last

00:25:19,440 --> 00:25:23,200
year at flock

00:25:20,880 --> 00:25:26,559
and then our management cookbooks and

00:25:23,200 --> 00:25:29,120
the kickstarts i use for the demo

00:25:26,559 --> 00:25:29,840
so yeah um sorry for only leaving one

00:25:29,120 --> 00:25:32,720
minute for

00:25:29,840 --> 00:25:34,720
questions we can go over unless uh just

00:25:32,720 --> 00:25:36,799
some of the top people want to go to

00:25:34,720 --> 00:25:39,120
and you can scan this qr code to get to

00:25:36,799 --> 00:25:41,360
the presentation or the slide is

00:25:39,120 --> 00:25:43,840
the link to the slide is pinned on the

00:25:41,360 --> 00:25:43,840

YouTube URL: https://www.youtube.com/watch?v=6FhdGg_V7qk


