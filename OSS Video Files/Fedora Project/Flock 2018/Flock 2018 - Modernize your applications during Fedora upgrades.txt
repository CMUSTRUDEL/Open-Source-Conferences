Title: Flock 2018 - Modernize your applications during Fedora upgrades
Publication date: 2018-08-29
Playlist: Flock 2018
Description: 
	Wednesday, August 8, 2018
3:40pm - 4:30pm
@Hamburg 3+5

Talk: Modernize your applications during Fedora upgrades
Presenters: Vinzenz Feenstra

Description: The Leapp project wants to give more power into the hand of application developers
and system administrators to perform additional tasks during the upgrade process.

Leapp extends the power of the DNF upgrade capabilities and allows additional
custom handling to be added at many stages of the upgrade process.

This talk gives an introduction how Leapp can help to improve the upgrade
experience for Fedora users.

Examples what Leapp could do on top of the normal DNF system-upgrade:

Ask the user if they would like to switch to the new BootLoaderSpecification
as part of the upgrade process - and do the conversion during the upgrade
process for them

Modularity:

[Idea] detect python2 apps and automatically subscribe to python2
module streams

[Idea] detect postgres 9.x and ask if the user wants to upgrade to the
latest version or would like rather to subscribe to an appropriate
9.x postgres module for them

[Idea] Service Defaults
Ask the user if they would like to apply newly implemneted service
defaults or stay with old ones

More can be done these are just examples that are possible. More in the talk :-)
Captions: 
	00:00:04,920 --> 00:00:11,040
how everyone welcome to modernize your

00:00:07,470 --> 00:00:14,700
applications during further upgrades my

00:00:11,040 --> 00:00:16,980
name is Vincent Finster my Fedora

00:00:14,700 --> 00:00:19,700
account system name is bellissimo and

00:00:16,980 --> 00:00:21,900
I'm a community member since 2012

00:00:19,700 --> 00:00:27,720
working for red head as a senior

00:00:21,900 --> 00:00:30,570
software developer so what are we going

00:00:27,720 --> 00:00:35,340
to talk about what is sleep how can it

00:00:30,570 --> 00:00:37,260
help fedora an overview overleap and I

00:00:35,340 --> 00:00:42,890
would like to do some live coding of

00:00:37,260 --> 00:00:42,890
actors to show you how that works so

00:00:43,190 --> 00:00:51,920
what is leap leap it's a framework for

00:00:47,909 --> 00:00:51,920
application and OS modernization

00:00:53,760 --> 00:00:56,929
what does that mean

00:01:01,530 --> 00:01:08,940
means updating upgrading the system in

00:01:06,660 --> 00:01:11,810
that matter also up layer upgrading your

00:01:08,940 --> 00:01:14,310
applications updating configurations

00:01:11,810 --> 00:01:17,730
migrating them to new styles of migrated

00:01:14,310 --> 00:01:24,710
up configurations or transforming your

00:01:17,730 --> 00:01:24,710
data isn't that what DNF or rpm is doing

00:01:24,740 --> 00:01:30,110
yes

00:01:26,630 --> 00:01:30,110
but also no

00:01:30,260 --> 00:01:34,940
because there are a lot of things you

00:01:32,570 --> 00:01:37,840
can't do for example as I said like

00:01:34,940 --> 00:01:41,620
transforming data is very very very

00:01:37,840 --> 00:01:43,760
dangerous to do in a rpm transaction and

00:01:41,620 --> 00:01:46,780
we shouldn't do that and there are a lot

00:01:43,760 --> 00:01:48,160
of things you can't do in rpm

00:01:46,780 --> 00:01:50,720
transactions

00:01:48,160 --> 00:01:55,970
therefore both mainly forbidden by the

00:01:50,720 --> 00:01:57,830
RPM packaging guidelines so what we can

00:01:55,970 --> 00:01:59,420
do is it allows customization and

00:01:57,830 --> 00:02:02,960
extension of the upgrade process

00:01:59,420 --> 00:02:04,670
it utilizes the NFS rpm capabilities and

00:02:02,960 --> 00:02:09,410
allows additional modifications around

00:02:04,670 --> 00:02:12,440
around it to be packaged so what does

00:02:09,410 --> 00:02:14,870
mean like modifications well you can

00:02:12,440 --> 00:02:16,520
modify the transactions you can add

00:02:14,870 --> 00:02:18,410
packages to the transaction you can

00:02:16,520 --> 00:02:20,150
remove packages from the transaction we

00:02:18,410 --> 00:02:24,080
can replace a package with another one

00:02:20,150 --> 00:02:27,590
and things like that so how can that

00:02:24,080 --> 00:02:29,840
help fedora well you can make optional

00:02:27,590 --> 00:02:32,450
things available to users during the

00:02:29,840 --> 00:02:34,250
upgrade allows you to add the ability to

00:02:32,450 --> 00:02:38,030
ask the users questions during the

00:02:34,250 --> 00:02:40,459
upgrade process it allows you things to

00:02:38,030 --> 00:02:42,910
do during the upgrade which are which

00:02:40,459 --> 00:02:47,180
you should not or must not be doing

00:02:42,910 --> 00:02:52,070
during RPM transactions it allows the

00:02:47,180 --> 00:02:55,459
DNF upgrade transaction and now I will

00:02:52,070 --> 00:02:58,690
give some examples of what I had ideas

00:02:55,459 --> 00:03:02,959
for what we could have done or could do

00:02:58,690 --> 00:03:05,600
with fedora and this kind of upgrade

00:03:02,959 --> 00:03:07,610
process now that's that these are

00:03:05,600 --> 00:03:12,290
hipoteca hypothetical and all the

00:03:07,610 --> 00:03:14,540
examples are not implemented so I'd be a

00:03:12,290 --> 00:03:16,310
number one ask the user to switch to the

00:03:14,540 --> 00:03:19,459
new Butte load the specification

00:03:16,310 --> 00:03:22,450
automatically during the upgrade as

00:03:19,459 --> 00:03:24,980
maybe some of you know that we

00:03:22,450 --> 00:03:27,110
introduced in bootloader specification

00:03:24,980 --> 00:03:29,930
which gives a unified way of describing

00:03:27,110 --> 00:03:33,230
bootloader entries for the kernel and

00:03:29,930 --> 00:03:34,390
with all the configuration options which

00:03:33,230 --> 00:03:37,180
is

00:03:34,390 --> 00:03:39,790
basically the same across different

00:03:37,180 --> 00:03:42,700
types of bootloaders including grab to

00:03:39,790 --> 00:03:48,100
and I think it's called Zippo or

00:03:42,700 --> 00:03:50,650
something like this this is how this

00:03:48,100 --> 00:03:53,380
could look like during the upgrade the

00:03:50,650 --> 00:03:55,690
user could be asked like do you want to

00:03:53,380 --> 00:03:59,020
migrate to this new or do you want to

00:03:55,690 --> 00:04:03,430
convert you bootloader entries to to the

00:03:59,020 --> 00:04:05,110
news configuration format another thing

00:04:03,430 --> 00:04:06,959
what we can do is detect for example

00:04:05,110 --> 00:04:09,970
Python to application scrim and

00:04:06,959 --> 00:04:12,820
subscribe to Python to channels and with

00:04:09,970 --> 00:04:16,810
channels I mean modules like to a module

00:04:12,820 --> 00:04:18,250
stream it's like it's like an example

00:04:16,810 --> 00:04:20,709
how this could look like Python tube

00:04:18,250 --> 00:04:22,180
module stream it's like the title and

00:04:20,709 --> 00:04:23,919
then it's like we detect it right into

00:04:22,180 --> 00:04:25,270
scripts on your system the new version

00:04:23,919 --> 00:04:27,640
of a door or give city opportunity I

00:04:25,270 --> 00:04:29,500
think to the 7 module stream how would

00:04:27,640 --> 00:04:32,290
you like to continue and then you can

00:04:29,500 --> 00:04:34,710
switch to it do nothing this means like

00:04:32,290 --> 00:04:39,220
default behavior would what would be and

00:04:34,710 --> 00:04:41,440
abort the upgrade another idea would be

00:04:39,220 --> 00:04:42,720
detecting Python to application scripts

00:04:41,440 --> 00:04:47,500
and warn the user about this

00:04:42,720 --> 00:04:50,530
discontinued support very similar

00:04:47,500 --> 00:04:52,030
message and then it's like a ability for

00:04:50,530 --> 00:04:55,180
example to show what scripts are

00:04:52,030 --> 00:04:59,229
affected and it would print the list of

00:04:55,180 --> 00:05:00,550
scripts it was fire it found this in

00:04:59,229 --> 00:05:03,580
this example this has been actually

00:05:00,550 --> 00:05:07,240
implemented in a way that it tries to

00:05:03,580 --> 00:05:10,090
compile the Python 2 or the the Python

00:05:07,240 --> 00:05:11,979
modules with Python 3 just compile them

00:05:10,090 --> 00:05:15,190
and try to see if if it fails if it

00:05:11,979 --> 00:05:18,450
fails it would give you this message and

00:05:15,190 --> 00:05:18,450
give you all the scripts that fail

00:05:18,850 --> 00:05:24,470
well it is there's a PI compile module

00:05:21,830 --> 00:05:28,190
from the question was like what I mean

00:05:24,470 --> 00:05:31,340
with compile and Python has a PI compile

00:05:28,190 --> 00:05:33,740
module which I can run from the command

00:05:31,340 --> 00:05:35,930
line and just pass it the script and it

00:05:33,740 --> 00:05:38,450
basically it will do the syntax checks

00:05:35,930 --> 00:05:40,580
so if something would not parse it would

00:05:38,450 --> 00:05:44,270
like immediately fail of course this is

00:05:40,580 --> 00:05:48,650
not like 100% but this was just as an

00:05:44,270 --> 00:05:52,610
example for the first four for demo

00:05:48,650 --> 00:05:54,950
purposes another idea is like for

00:05:52,610 --> 00:05:56,720
example the detect that there is a post

00:05:54,950 --> 00:06:00,830
press 9 installation like it was on

00:05:56,720 --> 00:06:03,920
Fedora 27 there's like I think 9.6 right

00:06:00,830 --> 00:06:08,990
and we would ask the user if they would

00:06:03,920 --> 00:06:10,790
like to describe subscribe to the 9.6

00:06:08,990 --> 00:06:12,140
module stream or if they want to upgrade

00:06:10,790 --> 00:06:14,810
to their latest and greatest version

00:06:12,140 --> 00:06:17,770
instead this might actually be something

00:06:14,810 --> 00:06:21,170
that is very useful for people who have

00:06:17,770 --> 00:06:23,360
are a bit scared about transforming

00:06:21,170 --> 00:06:26,900
already during the upgrade their

00:06:23,360 --> 00:06:29,360
database especially if it is big to new

00:06:26,900 --> 00:06:31,760
version it might actually break their

00:06:29,360 --> 00:06:33,230
application if suddenly they come up

00:06:31,760 --> 00:06:36,860
with the newer version of things like

00:06:33,230 --> 00:06:39,680
that and that's like where modularity

00:06:36,860 --> 00:06:42,680
can actually be great and we would be

00:06:39,680 --> 00:06:44,840
able to transformed in my upgrade

00:06:42,680 --> 00:06:47,300
transaction not to upgrade it to version

00:06:44,840 --> 00:06:52,190
10 but instead would use the the

00:06:47,300 --> 00:06:55,370
modularity version 9.6 so another

00:06:52,190 --> 00:06:57,110
example of the output think it's like

00:06:55,370 --> 00:06:58,910
the options are like I switch to nine

00:06:57,110 --> 00:07:01,660
dot extreme upgrade to latest

00:06:58,910 --> 00:07:01,660
abort the upgrade

00:07:02,730 --> 00:07:07,600
another idea ask the user if they would

00:07:05,590 --> 00:07:09,430
like to apply a new newly implemented

00:07:07,600 --> 00:07:11,410
service defaults or stay with old ones

00:07:09,430 --> 00:07:13,900
if you want to change it I risk default

00:07:11,410 --> 00:07:15,970
in Fedora and someone has like changed

00:07:13,900 --> 00:07:18,970
them there might be a reason like for

00:07:15,970 --> 00:07:21,040
that and I'm not sure what the RPM

00:07:18,970 --> 00:07:23,410
transaction does but we can give them

00:07:21,040 --> 00:07:28,120
the ability when we detect that someone

00:07:23,410 --> 00:07:29,940
modified them that that they can keep

00:07:28,120 --> 00:07:32,830
their old settings in some way and

00:07:29,940 --> 00:07:37,000
instead of getting some rpm you or rpm

00:07:32,830 --> 00:07:39,750
old files in the end and well there's

00:07:37,000 --> 00:07:43,300
like just some ideas what we can do

00:07:39,750 --> 00:07:45,340
another idea and that's like also a

00:07:43,300 --> 00:07:48,670
little bit in conjunction with the title

00:07:45,340 --> 00:07:52,030
of the talk we can allow third-party

00:07:48,670 --> 00:07:54,190
applications creators to easily hook

00:07:52,030 --> 00:07:59,650
into the upgrade process right now this

00:07:54,190 --> 00:08:02,290
is very very difficult because they

00:07:59,650 --> 00:08:06,550
might want to do something like enable

00:08:02,290 --> 00:08:09,160
repositories before and and or change

00:08:06,550 --> 00:08:11,200
some or need to do some steps before

00:08:09,160 --> 00:08:12,610
they can do the upgrade so we will give

00:08:11,200 --> 00:08:14,170
them the ability to upgrade the

00:08:12,610 --> 00:08:17,410
applications during the upgrade and

00:08:14,170 --> 00:08:19,240
remove update at remove or update the

00:08:17,410 --> 00:08:21,640
repositories for the new merchants major

00:08:19,240 --> 00:08:23,230
version and things like that and they

00:08:21,640 --> 00:08:25,750
have the ability to do this after the

00:08:23,230 --> 00:08:28,630
download they can they can add maybe

00:08:25,750 --> 00:08:32,380
packages somewhere do their own download

00:08:28,630 --> 00:08:34,540
in the interface they can do a lot of

00:08:32,380 --> 00:08:37,300
changes to this to the or influence the

00:08:34,540 --> 00:08:41,530
upper rpm upgrade in in a way that does

00:08:37,300 --> 00:08:43,680
not it's not possible basically right

00:08:41,530 --> 00:08:43,680
now

00:08:44,800 --> 00:08:49,110
well and I've prepared a demo for this

00:09:14,850 --> 00:09:20,140
what we do here it's like we start to

00:09:17,110 --> 00:09:23,680
leave upgrade like it shows first of all

00:09:20,140 --> 00:09:28,090
that is a fedora 28 machine and I

00:09:23,680 --> 00:09:29,380
recorded it today and I will run I will

00:09:28,090 --> 00:09:32,290
show you that it's up to date with the

00:09:29,380 --> 00:09:35,680
latest packages and everything and then

00:09:32,290 --> 00:09:39,600
I will execute the leap upgrade it

00:09:35,680 --> 00:09:39,600
should be happening any second

00:09:42,390 --> 00:09:47,490
so and there you can see the questions

00:09:44,430 --> 00:09:49,459
which I was showing you in DSD ideas how

00:09:47,490 --> 00:09:52,350
this would look like in the process

00:09:49,459 --> 00:09:54,260
please beware the log messages you see

00:09:52,350 --> 00:09:58,410
are currently during the development are

00:09:54,260 --> 00:10:01,589
present but they will be removed and it

00:09:58,410 --> 00:10:04,640
will be more sensible messages should be

00:10:01,589 --> 00:10:07,050
printed during the during the upgrade

00:10:04,640 --> 00:10:08,850
but it helps a lot during the

00:10:07,050 --> 00:10:11,550
development to see if actually your

00:10:08,850 --> 00:10:13,620
staff get executed or not basically this

00:10:11,550 --> 00:10:16,950
is what what you would see in a verbose

00:10:13,620 --> 00:10:19,500
mode we would enable the logs that you

00:10:16,950 --> 00:10:20,790
can see them and if you need even debug

00:10:19,500 --> 00:10:25,200
logs you would have additionally to

00:10:20,790 --> 00:10:28,920
specify the - - debug option so right

00:10:25,200 --> 00:10:31,320
now it would like its edits to the DNF

00:10:28,920 --> 00:10:36,149
call it added actually add additional

00:10:31,320 --> 00:10:42,060
repository with my with my repository

00:10:36,149 --> 00:10:43,769
for the for the leap rpms so they can

00:10:42,060 --> 00:10:45,209
actually get upgraded because like if

00:10:43,769 --> 00:10:50,699
they wouldn't be there it would break

00:10:45,209 --> 00:10:55,160
also the transaction it's actually sped

00:10:50,699 --> 00:10:55,160
up I hope

00:11:03,240 --> 00:11:06,589
no it's the right one

00:11:13,390 --> 00:11:16,480
come on

00:11:19,180 --> 00:11:22,779
it feels like

00:11:23,280 --> 00:11:30,450
now it is not the right one sorry divert

00:11:28,470 --> 00:11:33,559
the long version hold her

00:11:30,450 --> 00:11:33,559
[Music]

00:11:44,980 --> 00:11:50,260
I'm sorry so let's

00:11:58,150 --> 00:12:00,990
okay

00:12:02,430 --> 00:12:09,090
okay now okay so we're back where we

00:12:07,110 --> 00:12:11,430
were so now I can see the cursor

00:12:09,090 --> 00:12:14,190
blinking really fast if you sit close

00:12:11,430 --> 00:12:16,860
enough so now you see I sped this up

00:12:14,190 --> 00:12:20,130
like I think 60 times or something

00:12:16,860 --> 00:12:22,050
so because it's basically what it does

00:12:20,130 --> 00:12:26,940
it just like downloads the packages and

00:12:22,050 --> 00:12:30,470
reboots then it starts running in a in a

00:12:26,940 --> 00:12:32,880
drum disk and we'll resume the upgrade

00:12:30,470 --> 00:12:35,730
and it's now you can see they're here

00:12:32,880 --> 00:12:38,190
and then the nf will start running again

00:12:35,730 --> 00:12:41,100
but this time in the offline mode with

00:12:38,190 --> 00:12:42,540
using the cached packages only and he's

00:12:41,100 --> 00:12:45,210
going it's going to apply the

00:12:42,540 --> 00:12:51,260
transaction which also of course is

00:12:45,210 --> 00:12:51,260
never that's that fast wishful thinking

00:12:52,190 --> 00:13:00,680
well and after that again and basically

00:12:57,780 --> 00:13:04,920
you will end up in the fedora t29 system

00:13:00,680 --> 00:13:08,400
and unlike with the DNF system upgrade

00:13:04,920 --> 00:13:11,340
you don't have to run like two commands

00:13:08,400 --> 00:13:13,920
I think it is a bit more convenient I

00:13:11,340 --> 00:13:17,240
don't really understand why vision like

00:13:13,920 --> 00:13:17,240
this made but

00:13:18,640 --> 00:13:25,390
so here's the reboot into the new system

00:13:22,060 --> 00:13:29,700
and we will end up in rawhide and

00:13:25,390 --> 00:13:33,820
basically it's like okay already c29

00:13:29,700 --> 00:13:36,100
rawhide basically this I will do the

00:13:33,820 --> 00:13:38,459
same thing I did before with the OS

00:13:36,100 --> 00:13:38,459
release

00:13:47,650 --> 00:13:51,120
so back to this

00:13:55,830 --> 00:13:58,830
so

00:14:00,529 --> 00:14:06,800
a proposal for this I will try to

00:14:03,379 --> 00:14:09,379
publish after flock not immediately but

00:14:06,800 --> 00:14:12,079
like sometime after block it's not

00:14:09,379 --> 00:14:13,790
available yet and I expected timeframe

00:14:12,079 --> 00:14:17,689
when we could do something like this

00:14:13,790 --> 00:14:22,519
make it available for for fedoras like

00:14:17,689 --> 00:14:23,990
probably around version 31 or 32 I don't

00:14:22,519 --> 00:14:27,379
know this is really hard to say because

00:14:23,990 --> 00:14:30,230
it will also need a lot of work from our

00:14:27,379 --> 00:14:32,930
contributions from a lot of community

00:14:30,230 --> 00:14:35,209
members because we can't know all the

00:14:32,930 --> 00:14:36,740
things that can be done and it would be

00:14:35,209 --> 00:14:39,709
really great to get also some feedback

00:14:36,740 --> 00:14:42,439
on that what community members have

00:14:39,709 --> 00:14:49,360
ideas about like what could we do on top

00:14:42,439 --> 00:14:55,160
of it so an overview overleap itself so

00:14:49,360 --> 00:14:57,110
leap has the notion of workflows which

00:14:55,160 --> 00:14:59,420
means describes the whole upgrade

00:14:57,110 --> 00:15:02,569
process what we've seen here that's

00:14:59,420 --> 00:15:05,360
called implies upgrade and that's one of

00:15:02,569 --> 00:15:09,620
these workflows and each of these

00:15:05,360 --> 00:15:13,579
workflows have phases and you I will

00:15:09,620 --> 00:15:17,889
visualize this moment later and each of

00:15:13,579 --> 00:15:21,009
these phases has three stages phases

00:15:17,889 --> 00:15:25,759
basically give you the ability to order

00:15:21,009 --> 00:15:29,389
your your execution of your modules or

00:15:25,759 --> 00:15:32,389
actors how we call them at a specific

00:15:29,389 --> 00:15:34,490
time during the workflow so if you say

00:15:32,389 --> 00:15:38,209
like I need to run before the download

00:15:34,490 --> 00:15:40,850
and you can do that if you want to run

00:15:38,209 --> 00:15:44,089
in the inner drum this at some point for

00:15:40,850 --> 00:15:47,059
example after the application the

00:15:44,089 --> 00:15:49,220
upgrade section has been executed you

00:15:47,059 --> 00:15:51,860
can do that and you can even do on the

00:15:49,220 --> 00:15:55,279
first run and a lot of other things so

00:15:51,860 --> 00:15:58,819
it's too much to display we have like a

00:15:55,279 --> 00:16:01,069
lot of phases and this is necessary we

00:15:58,819 --> 00:16:04,139
can even add more

00:16:01,069 --> 00:16:06,300
actors are basically the individual

00:16:04,139 --> 00:16:08,759
modules that can actually do some action

00:16:06,300 --> 00:16:12,269
that means they're the scripts that you

00:16:08,759 --> 00:16:15,980
can write to extend the capability of

00:16:12,269 --> 00:16:19,589
the upgrade messages are sent between

00:16:15,980 --> 00:16:21,569
actors that is a way of providing data

00:16:19,589 --> 00:16:23,459
from one actor to another this five

00:16:21,569 --> 00:16:26,579
means like if you in the beginning of

00:16:23,459 --> 00:16:28,410
the of the workflow you start scanning

00:16:26,579 --> 00:16:31,110
for something you have one actor and

00:16:28,410 --> 00:16:33,300
later in the in it in a drum disk you

00:16:31,110 --> 00:16:34,889
want to apply the data or will use the

00:16:33,300 --> 00:16:36,449
data to transform it you have would

00:16:34,889 --> 00:16:41,149
write a second actor that consumes that

00:16:36,449 --> 00:16:44,819
message and these messages contain

00:16:41,149 --> 00:16:48,209
definable model which is basically the

00:16:44,819 --> 00:16:53,310
you can define that way the pair payload

00:16:48,209 --> 00:16:57,110
of the message models are assigned to

00:16:53,310 --> 00:16:59,850
topics which is at the moment purely

00:16:57,110 --> 00:17:02,550
it's it's not really used at the moment

00:16:59,850 --> 00:17:03,959
but the idea is that you can start

00:17:02,550 --> 00:17:06,150
searching for data when you're debugging

00:17:03,959 --> 00:17:09,839
stuff based on this and you can

00:17:06,150 --> 00:17:12,000
subscribe and review blocks or anything

00:17:09,839 --> 00:17:14,880
easier like this because you can search

00:17:12,000 --> 00:17:16,699
for a specific topic what is in there it

00:17:14,880 --> 00:17:20,250
could be like something like networking

00:17:16,699 --> 00:17:21,839
system information storage information

00:17:20,250 --> 00:17:23,459
that this world would be topics we

00:17:21,839 --> 00:17:25,439
wouldn't put there and there could be

00:17:23,459 --> 00:17:27,360
also like for third parties they could

00:17:25,439 --> 00:17:31,470
put their own topic there let's define

00:17:27,360 --> 00:17:36,990
their own messages easier tags

00:17:31,470 --> 00:17:40,260
I used to designate actors for a certain

00:17:36,990 --> 00:17:43,260
phase and though because we have our

00:17:40,260 --> 00:17:45,210
notion of also repositories where all of

00:17:43,260 --> 00:17:47,789
this data which you've seen here all of

00:17:45,210 --> 00:17:51,450
these items are in Inked simply in there

00:17:47,789 --> 00:17:54,000
and can have multiple purposes so to

00:17:51,450 --> 00:17:56,340
define where an actor belongs to and

00:17:54,000 --> 00:18:00,179
when to which phase and to which

00:17:56,340 --> 00:18:04,010
workflow and even to which stage that is

00:18:00,179 --> 00:18:07,049
defined by the tags and

00:18:04,010 --> 00:18:09,620
additionally we have four libraries they

00:18:07,049 --> 00:18:12,809
are private and shared libraries

00:18:09,620 --> 00:18:15,720
libraries are Python modules that can be

00:18:12,809 --> 00:18:17,370
used by the actors and can be shared

00:18:15,720 --> 00:18:19,710
across them that is when they are

00:18:17,370 --> 00:18:23,730
defined on the repository level or can

00:18:19,710 --> 00:18:26,460
be used like to make the code of the

00:18:23,730 --> 00:18:32,130
actor better testable because like

00:18:26,460 --> 00:18:33,900
actors have tests abilities which were

00:18:32,130 --> 00:18:36,330
like the actors themselves not but we

00:18:33,900 --> 00:18:40,950
have built-in test support that you can

00:18:36,330 --> 00:18:42,809
run the full actor or and or just parts

00:18:40,950 --> 00:18:45,809
of it and that's like would be then used

00:18:42,809 --> 00:18:48,000
from the libraries additionally you can

00:18:45,809 --> 00:18:50,340
bundle tools and files so if you have

00:18:48,000 --> 00:18:52,289
static files which you want to read some

00:18:50,340 --> 00:18:55,770
data from or if you want to bundle some

00:18:52,289 --> 00:18:57,090
tools like because python is maybe not

00:18:55,770 --> 00:18:59,720
fast enough so you want to have a

00:18:57,090 --> 00:19:01,919
statically compiled compiled whatever C

00:18:59,720 --> 00:19:06,419
application or something like that you

00:19:01,919 --> 00:19:10,470
could use that as well so what I said

00:19:06,419 --> 00:19:13,590
workflow is basically a big box of of

00:19:10,470 --> 00:19:17,700
phases and each of these phases can

00:19:13,590 --> 00:19:19,950
basically contains the actors since the

00:19:17,700 --> 00:19:24,440
order of the actress is actually defined

00:19:19,950 --> 00:19:27,840
by the messages it consumes or produces

00:19:24,440 --> 00:19:31,710
actors that produce messages are usually

00:19:27,840 --> 00:19:34,320
coming first and actors that consume

00:19:31,710 --> 00:19:36,529
messages come later and it depends on

00:19:34,320 --> 00:19:39,029
what they consume and what they produce

00:19:36,529 --> 00:19:42,419
it's it's a little bit tricky to say but

00:19:39,029 --> 00:19:46,470
it's basically topical topology sort so

00:19:42,419 --> 00:19:48,210
I guess this for people who know

00:19:46,470 --> 00:19:50,480
computer science they know what this

00:19:48,210 --> 00:19:50,480
means

00:19:52,250 --> 00:19:57,539
yeah and with the faces I said like

00:19:55,799 --> 00:19:59,149
their stages I didn't put them here

00:19:57,539 --> 00:20:02,190
because it would make it so small

00:19:59,149 --> 00:20:06,600
basically you have the ability to say

00:20:02,190 --> 00:20:10,250
like okay my my actor would be executed

00:20:06,600 --> 00:20:12,570
too late in the order I want it to be

00:20:10,250 --> 00:20:14,730
executed before the other actors in the

00:20:12,570 --> 00:20:17,880
face so you have the ability to say like

00:20:14,730 --> 00:20:21,029
I put this in their face before in the

00:20:17,880 --> 00:20:23,309
before stage of the face by default they

00:20:21,029 --> 00:20:25,020
go to the main face and if you

00:20:23,309 --> 00:20:26,610
explicitly say that it should be before

00:20:25,020 --> 00:20:28,919
then it goes to before if you say

00:20:26,610 --> 00:20:32,070
explicitly go should go after it will be

00:20:28,919 --> 00:20:34,049
executed after that that way you can

00:20:32,070 --> 00:20:36,450
ensure that it is executed at around the

00:20:34,049 --> 00:20:38,880
same time in this face but you can

00:20:36,450 --> 00:20:40,620
influence the the order that is for

00:20:38,880 --> 00:20:44,159
example very important if you want to

00:20:40,620 --> 00:20:46,080
influence another actor with them custom

00:20:44,159 --> 00:20:48,059
actor you act like up for example an

00:20:46,080 --> 00:20:51,390
administrator is not happy about what an

00:20:48,059 --> 00:20:53,490
actor does for example it removes a file

00:20:51,390 --> 00:20:56,159
or whatever which he shouldn't so it

00:20:53,490 --> 00:20:58,710
could the the Act could write two actors

00:20:56,159 --> 00:21:00,270
once that backs up the file before and

00:20:58,710 --> 00:21:02,460
moves it somewhere else and afterwards

00:21:00,270 --> 00:21:04,799
like moves his back so the actor has no

00:21:02,460 --> 00:21:07,020
chance to modify it of course this is

00:21:04,799 --> 00:21:10,320
like a random example I just made up but

00:21:07,020 --> 00:21:15,870
I think there will be use cases where

00:21:10,320 --> 00:21:18,240
this is really useful so models are

00:21:15,870 --> 00:21:21,659
basically definable data structures like

00:21:18,240 --> 00:21:26,270
this we have a bunch of fields and very

00:21:21,659 --> 00:21:26,270
similar to what is done by

00:21:29,640 --> 00:21:36,300
SQL alchemy if you know Python ask your

00:21:33,580 --> 00:21:40,300
alchemy allows you to define data models

00:21:36,300 --> 00:21:42,850
for the database we have support for

00:21:40,300 --> 00:21:44,620
numbers that means we can say integers

00:21:42,850 --> 00:21:46,990
or florists like means that allows both

00:21:44,620 --> 00:21:50,410
we have support for boolean state I'm

00:21:46,990 --> 00:21:54,070
object strings in arms lists and we are

00:21:50,410 --> 00:21:58,060
allowed to embed other other models

00:21:54,070 --> 00:21:59,800
however we don't support maps or

00:21:58,060 --> 00:22:02,350
dictionaries because we don't want the

00:21:59,800 --> 00:22:04,390
freeform support because the four fits

00:22:02,350 --> 00:22:07,420
the whole idea of my defining the model

00:22:04,390 --> 00:22:10,390
if you do that then please just dump it

00:22:07,420 --> 00:22:11,320
to a JSON string and like be done with

00:22:10,390 --> 00:22:14,290
it

00:22:11,320 --> 00:22:17,500
on top of that the data is validated so

00:22:14,290 --> 00:22:20,290
if usually there should be not a problem

00:22:17,500 --> 00:22:22,150
but like it could be you do to the

00:22:20,290 --> 00:22:23,860
dynamic city of Python that someone puts

00:22:22,150 --> 00:22:25,390
the wrong type in there so it would

00:22:23,860 --> 00:22:29,950
actually raise an exception if you would

00:22:25,390 --> 00:22:33,310
try to put the wrong data type the

00:22:29,950 --> 00:22:36,580
repositories is as I said it's like a

00:22:33,310 --> 00:22:39,010
big back or cloud of of different types

00:22:36,580 --> 00:22:42,220
I put there now three but basically

00:22:39,010 --> 00:22:44,110
there there are a lot of them and these

00:22:42,220 --> 00:22:45,070
repositories they can actually be linked

00:22:44,110 --> 00:22:50,470
to each other that they have a

00:22:45,070 --> 00:22:52,120
relationship in currently in the in the

00:22:50,470 --> 00:22:54,910
demo which I showed you'd like there

00:22:52,120 --> 00:22:57,580
were actually three repositories there

00:22:54,910 --> 00:22:59,470
was a common repository which hardly

00:22:57,580 --> 00:23:01,420
contains anymore anything at the moment

00:22:59,470 --> 00:23:03,160
because it's supposed to be used for

00:23:01,420 --> 00:23:08,470
other workflow cases then there's the

00:23:03,160 --> 00:23:12,810
upgrades case upgrade repository which

00:23:08,470 --> 00:23:16,630
contains basically everything that is

00:23:12,810 --> 00:23:18,850
general apply applicable to to multiple

00:23:16,630 --> 00:23:20,200
operating systems and then the third one

00:23:18,850 --> 00:23:23,010
is like the we call it the offline

00:23:20,200 --> 00:23:29,490
upgrade right now but this is basically

00:23:23,010 --> 00:23:32,530
well rail or Fedora based systems

00:23:29,490 --> 00:23:34,720
this these dependencies are actually

00:23:32,530 --> 00:23:37,240
quite important because if you would

00:23:34,720 --> 00:23:39,130
like to write your own repository for

00:23:37,240 --> 00:23:41,350
testing like a new actor you can

00:23:39,130 --> 00:23:43,360
actually link one of them and can use

00:23:41,350 --> 00:23:45,190
all the information which is provided by

00:23:43,360 --> 00:23:48,760
them otherwise if you create and you

00:23:45,190 --> 00:23:50,530
want a new repository you have no models

00:23:48,760 --> 00:23:52,809
available nothing so you would have to

00:23:50,530 --> 00:23:54,340
start with everything from scratch the

00:23:52,809 --> 00:23:56,440
linking gives you the ability to avoid

00:23:54,340 --> 00:23:59,169
to have to copy anything or or to

00:23:56,440 --> 00:24:04,059
rewrite anything so this is the whole

00:23:59,169 --> 00:24:08,440
idea of this so what I said before with

00:24:04,059 --> 00:24:11,500
the tags they actually are extracted

00:24:08,440 --> 00:24:13,630
from these from these repositories

00:24:11,500 --> 00:24:16,059
it scans all the actors in there and

00:24:13,630 --> 00:24:18,520
sees what tags are there and by that it

00:24:16,059 --> 00:24:22,059
knows to which of the phases in the

00:24:18,520 --> 00:24:23,740
workflow it belongs to this you see here

00:24:22,059 --> 00:24:25,270
for example the green one it doesn't

00:24:23,740 --> 00:24:28,150
belong anywhere because there's no no

00:24:25,270 --> 00:24:30,820
green tag like like that this is a

00:24:28,150 --> 00:24:35,380
simplification of the way how the actors

00:24:30,820 --> 00:24:37,150
are selected additionally we have like

00:24:35,380 --> 00:24:38,530
this bundling supports what I said

00:24:37,150 --> 00:24:41,950
there's you can have batch scripts

00:24:38,530 --> 00:24:44,650
binaries whatever the path to it is

00:24:41,950 --> 00:24:47,380
automatically injected to your of the

00:24:44,650 --> 00:24:49,360
actors to the actors path environment

00:24:47,380 --> 00:24:51,789
variable that means like you don't have

00:24:49,360 --> 00:24:53,110
to actually figure out where are you and

00:24:51,789 --> 00:24:55,419
what are you need what do you need to do

00:24:53,110 --> 00:24:58,150
you just specify the name and boom your

00:24:55,419 --> 00:25:00,480
you can just use it files you can ask

00:24:58,150 --> 00:25:03,580
their special API calls that tell you

00:25:00,480 --> 00:25:05,890
either where are the folders that have

00:25:03,580 --> 00:25:07,539
files or the second thing is that you

00:25:05,890 --> 00:25:09,700
actually can search for him if you know

00:25:07,539 --> 00:25:13,900
the exact name then you can search for

00:25:09,700 --> 00:25:16,679
it by libraries that's like as I said

00:25:13,900 --> 00:25:19,150
shared and and bundled libraries are

00:25:16,679 --> 00:25:22,030
shared and private libraries are

00:25:19,150 --> 00:25:24,539
available so like I already covered that

00:25:22,030 --> 00:25:24,539
before

00:25:25,360 --> 00:25:32,360
so the next thing this is our mascot

00:25:28,879 --> 00:25:36,230
nectar we call him because it's a Python

00:25:32,360 --> 00:25:40,669
actor too so

00:25:36,230 --> 00:25:44,779
snake actor writes nectar the the tool

00:25:40,669 --> 00:25:48,019
is used for creating templates of actors

00:25:44,779 --> 00:25:50,779
models workflows it creates full boiler

00:25:48,019 --> 00:25:53,509
plates of tags and topics it can

00:25:50,779 --> 00:25:55,220
discover in the repository what do you

00:25:53,509 --> 00:25:57,649
have there and display them nicely it

00:25:55,220 --> 00:25:59,840
can export it as JSON and is used to

00:25:57,649 --> 00:26:04,279
link the repositories and and resolve

00:25:59,840 --> 00:26:07,369
them it's used to run actors for testing

00:26:04,279 --> 00:26:10,249
purposes it's used to run workflows for

00:26:07,369 --> 00:26:13,159
testing purposes of course if you try to

00:26:10,249 --> 00:26:16,730
run a implies upgrade workflow that will

00:26:13,159 --> 00:26:18,649
not go well because that is it needs

00:26:16,730 --> 00:26:20,629
route it needs a route rides it needs a

00:26:18,649 --> 00:26:24,999
lot of things and that might actually

00:26:20,629 --> 00:26:24,999
blow up into your face so don't try it

00:26:25,240 --> 00:26:32,840
yeah cool no so python is the

00:26:31,039 --> 00:26:38,440
first-class citizen that means like we

00:26:32,840 --> 00:26:43,610
do everything mainly in Python however

00:26:38,440 --> 00:26:46,369
all the things yes right now but it

00:26:43,610 --> 00:26:47,840
doesn't have to be if you need to do

00:26:46,369 --> 00:26:50,240
something in a different language

00:26:47,840 --> 00:26:51,879
well bundle these these things in a

00:26:50,240 --> 00:26:55,100
different language and just use them and

00:26:51,879 --> 00:26:57,440
like for example for like if someone

00:26:55,100 --> 00:26:59,299
really wants to use bash we might

00:26:57,440 --> 00:27:01,669
actually start if they are lucky enough

00:26:59,299 --> 00:27:03,649
people who who really have a need for it

00:27:01,669 --> 00:27:07,220
we might actually start providing you

00:27:03,649 --> 00:27:09,710
some some libraries that were like which

00:27:07,220 --> 00:27:11,830
you can use like which you can include

00:27:09,710 --> 00:27:14,869
in your scripts and and then basically

00:27:11,830 --> 00:27:16,789
send messages as well and and things

00:27:14,869 --> 00:27:20,029
like this write it directly from there

00:27:16,789 --> 00:27:22,879
or request the files the same way like

00:27:20,029 --> 00:27:25,159
it was if you use the bash scripts I

00:27:22,879 --> 00:27:29,690
mean basically you will still have to

00:27:25,159 --> 00:27:32,509
write the Python actor

00:27:29,690 --> 00:27:36,499
but we might actually start creating

00:27:32,509 --> 00:27:39,739
some kind of boilerplate that will allow

00:27:36,499 --> 00:27:43,129
you to say I I wanted I wanted to call a

00:27:39,739 --> 00:27:46,009
certain batch script they might in my in

00:27:43,129 --> 00:27:47,539
my tools folder and that will

00:27:46,009 --> 00:27:55,070
automatically start it and we would just

00:27:47,539 --> 00:27:56,450
like process it so last thing I wanted

00:27:55,070 --> 00:28:00,409
to show you how it actually looks like

00:27:56,450 --> 00:28:05,690
the right actors because it might be a

00:28:00,409 --> 00:28:08,119
little bit how you say that intimidating

00:28:05,690 --> 00:28:11,229
so for that reason I wanted to show it

00:28:08,119 --> 00:28:11,229
how it looks like

00:28:59,179 --> 00:29:12,580
let's hope diverse so this is a premade

00:29:09,849 --> 00:29:15,710
repository it has some tax topics and

00:29:12,580 --> 00:29:18,469
workflows as I said before you can use

00:29:15,710 --> 00:29:20,239
this negative tool to discover things so

00:29:18,469 --> 00:29:25,820
if you want to know what's there okay

00:29:20,239 --> 00:29:27,799
this is really not too big so you see

00:29:25,820 --> 00:29:30,219
like it will show you what tax you have

00:29:27,799 --> 00:29:33,049
it shows you what demo topics you have

00:29:30,219 --> 00:29:35,389
what topics you have what workflows you

00:29:33,049 --> 00:29:38,119
have defined and in this case the

00:29:35,389 --> 00:29:41,960
workflow is very simple it's different

00:29:38,119 --> 00:29:43,700
icon defined it has only one face and

00:29:41,960 --> 00:29:45,950
it's just for the demo purpose because

00:29:43,700 --> 00:29:46,429
it's like otherwise it would blow your

00:29:45,950 --> 00:29:48,859
minds

00:29:46,429 --> 00:29:54,049
like if you would see the the in-place

00:29:48,859 --> 00:29:57,919
upgrade this is just too long so for

00:29:54,049 --> 00:30:00,769
this task for this life coding I was

00:29:57,919 --> 00:30:03,139
saying like I I will write an actor that

00:30:00,769 --> 00:30:05,809
produces a message and it consumes it

00:30:03,139 --> 00:30:07,669
and prints it so and then executes at

00:30:05,809 --> 00:30:09,320
the end the workflow and in the meantime

00:30:07,669 --> 00:30:13,249
I can also show you how it looks like

00:30:09,320 --> 00:30:17,239
when they run so Specter you right there

00:30:13,249 --> 00:30:19,789
first of all the new model and you want

00:30:17,239 --> 00:30:24,979
to use the attacks you don't have to

00:30:19,789 --> 00:30:26,359
specify the tags sorry tax topic you

00:30:24,979 --> 00:30:29,210
don't have to specify the topic

00:30:26,359 --> 00:30:32,390
immediately it's just

00:30:29,210 --> 00:30:35,030
gives you the ability to avoid having to

00:30:32,390 --> 00:30:37,880
write it yourself later India in the

00:30:35,030 --> 00:30:40,340
produced thing so right now the the

00:30:37,880 --> 00:30:43,700
boiler pipe created looks like this like

00:30:40,340 --> 00:30:46,910
and since we want to send a message we

00:30:43,700 --> 00:30:50,360
should be a string right so and we make

00:30:46,910 --> 00:30:52,550
it required and that you write your

00:30:50,360 --> 00:30:55,370
model you're done

00:30:52,550 --> 00:30:57,920
next thing we want to do is like we want

00:30:55,370 --> 00:31:01,130
to write the actor so your sector a new

00:30:57,920 --> 00:31:03,440
actor tack is will define like that we

00:31:01,130 --> 00:31:06,860
want to have it in the flock face tag

00:31:03,440 --> 00:31:12,200
which is flop face and we want to have

00:31:06,860 --> 00:31:16,300
it in the flock workflow so you say tag

00:31:12,200 --> 00:31:19,900
and this is like flock message producer

00:31:16,300 --> 00:31:19,900
so we got the new

00:31:20,630 --> 00:31:25,190
if it's boilerplate here there's

00:31:22,370 --> 00:31:29,170
everything okay in this case if you

00:31:25,190 --> 00:31:33,860
won't also want to support produce the

00:31:29,170 --> 00:31:43,250
vlog message so from models import block

00:31:33,860 --> 00:31:45,560
message and we produce this so one one

00:31:43,250 --> 00:31:47,540
thing to say if you would want to use a

00:31:45,560 --> 00:31:50,510
library for this you would actually just

00:31:47,540 --> 00:31:55,130
use from leap actors from deep library

00:31:50,510 --> 00:31:56,960
sorry libraries actor import and the

00:31:55,130 --> 00:31:59,260
decir private ones and if it dislike a

00:31:56,960 --> 00:32:03,050
shared one it would be here like input

00:31:59,260 --> 00:32:07,040
common so that basically this is how it

00:32:03,050 --> 00:32:11,240
looks like and there's nothing magic to

00:32:07,040 --> 00:32:13,310
it from the usage it's just that for

00:32:11,240 --> 00:32:16,040
every actor which is actually executed

00:32:13,310 --> 00:32:18,890
in an own process it's a fork child of

00:32:16,040 --> 00:32:21,200
the main process it gets actually

00:32:18,890 --> 00:32:24,890
injected all the private libraries that

00:32:21,200 --> 00:32:26,780
are available and it so that it always

00:32:24,890 --> 00:32:29,420
has the same path no matter how the

00:32:26,780 --> 00:32:30,860
actor is called on anything so producing

00:32:29,420 --> 00:32:35,840
the message is actually quite simple

00:32:30,860 --> 00:32:40,130
it's like produce and you just like say

00:32:35,840 --> 00:32:45,000
what instantiate the the model and say

00:32:40,130 --> 00:32:50,680
message like hello flock 2018 right

00:32:45,000 --> 00:32:54,840
so now we can use nectar run

00:32:50,680 --> 00:32:54,840
message producer

00:32:55,190 --> 00:33:00,290
print output and it will show you that

00:32:57,350 --> 00:33:01,640
it actually created a message here if

00:33:00,290 --> 00:33:03,080
you don't say print output it will

00:33:01,640 --> 00:33:08,180
actually not do anything it will just

00:33:03,080 --> 00:33:11,150
like show you the normal output so

00:33:08,180 --> 00:33:13,190
there's nothing what you could see from

00:33:11,150 --> 00:33:14,660
it you could have added a lock message

00:33:13,190 --> 00:33:19,810
which I could show you as well this is

00:33:14,660 --> 00:33:23,600
relatively simple self log in for

00:33:19,810 --> 00:33:25,850
message and then if you if you run it

00:33:23,600 --> 00:33:29,480
then you actually can see it in here is

00:33:25,850 --> 00:33:33,350
he and you see that this was your actor

00:33:29,480 --> 00:33:37,820
with a flop message producer and you can

00:33:33,350 --> 00:33:42,530
actually use the blocks to filter it for

00:33:37,820 --> 00:33:46,490
you actor for example that's that so

00:33:42,530 --> 00:33:49,130
let's go on to the 2d produce art one

00:33:46,490 --> 00:33:52,490
more thing if you I will show you later

00:33:49,130 --> 00:33:55,100
so the new idea the consuming actor

00:33:52,490 --> 00:33:57,850
which will print it let's do the same

00:33:55,100 --> 00:33:57,850
thing flock

00:33:58,190 --> 00:34:08,330
face tag bag frog work flow tag and

00:34:08,750 --> 00:34:21,980
consumes flock message yeah it's like

00:34:14,220 --> 00:34:21,980
flock message Zoomer M actress

00:34:24,510 --> 00:34:31,770
I of course so this time I I did not

00:34:29,909 --> 00:34:34,050
forget that this this consumes and

00:34:31,770 --> 00:34:37,320
automatically adds it here it also

00:34:34,050 --> 00:34:40,380
automatically imports it and for the

00:34:37,320 --> 00:34:42,330
ones who are very keen about the order

00:34:40,380 --> 00:34:44,600
of imports it's even in alphabetical

00:34:42,330 --> 00:34:44,600
order

00:34:48,730 --> 00:34:56,440
yes messages are not like it's not a

00:34:53,109 --> 00:34:59,010
like a Q or anything in messages and you

00:34:56,440 --> 00:35:01,780
have there's no way of influencing it so

00:34:59,010 --> 00:35:03,940
they cannot be removed or anything they

00:35:01,780 --> 00:35:05,680
are there and that's it once they are

00:35:03,940 --> 00:35:09,579
there they can be consumed by anyone who

00:35:05,680 --> 00:35:11,380
knows their name basically and I mean

00:35:09,579 --> 00:35:13,089
basically the consuming part or the

00:35:11,380 --> 00:35:17,230
producing part you're not restricted to

00:35:13,089 --> 00:35:19,510
one thing or self-consumed thing they

00:35:17,230 --> 00:35:21,970
pass actually consume works a little bit

00:35:19,510 --> 00:35:25,059
different like they produce like you

00:35:21,970 --> 00:35:26,740
pass the type and with this it will just

00:35:25,059 --> 00:35:27,670
do the lookup but you're actually able

00:35:26,740 --> 00:35:29,680
to say like

00:35:27,670 --> 00:35:31,359
other message or whatever you have a

00:35:29,680 --> 00:35:34,599
different different one you can get

00:35:31,359 --> 00:35:37,450
consume both of them but since you this

00:35:34,599 --> 00:35:39,099
it returns a generator so you would have

00:35:37,450 --> 00:35:41,799
to check what type it is so usually you

00:35:39,099 --> 00:35:43,540
don't want that but if you if you find

00:35:41,799 --> 00:35:45,099
with it for example they have both the

00:35:43,540 --> 00:35:47,410
same structure just different names and

00:35:45,099 --> 00:35:50,109
you don't care why not you know so I

00:35:47,410 --> 00:35:51,940
mean that's the beauty of Python in this

00:35:50,109 --> 00:35:56,650
case that it allows you to do these

00:35:51,940 --> 00:35:58,560
things so for message in in self could

00:35:56,650 --> 00:36:01,020
you miss

00:35:58,560 --> 00:36:05,420
so consume flock message and now you can

00:36:01,020 --> 00:36:05,420
actually just well let's use the logger

00:36:06,530 --> 00:36:11,420
message message and there's like

00:36:19,200 --> 00:36:23,840
let's do it like this I am

00:36:21,810 --> 00:36:23,840
Oh

00:36:25,920 --> 00:36:32,580
we can do it properly with logging

00:36:30,210 --> 00:36:35,880
styles so it doesn't do it if the star

00:36:32,580 --> 00:36:37,860
is not enabled anyway so that's all you

00:36:35,880 --> 00:36:40,560
need to do to do it

00:36:37,860 --> 00:36:43,920
to to produce it now if you would want

00:36:40,560 --> 00:36:48,270
to run the actor you could do against

00:36:43,920 --> 00:36:49,980
nectar run well actually it doesn't

00:36:48,270 --> 00:36:52,530
matter if it is uppercase or lowercase I

00:36:49,980 --> 00:36:54,960
could say I can write it like this as

00:36:52,530 --> 00:36:56,250
well if you see that it actually doesn't

00:36:54,960 --> 00:36:56,610
do anything because it didn't get the

00:36:56,250 --> 00:37:00,960
message

00:36:56,610 --> 00:37:06,870
so before the other actor we had we can

00:37:00,960 --> 00:37:09,720
actually yeah what was it safe okay so

00:37:06,870 --> 00:37:11,810
it's the safe output if you do that it

00:37:09,720 --> 00:37:15,170
will be locally stored in your in your

00:37:11,810 --> 00:37:18,210
repository in the in the database there

00:37:15,170 --> 00:37:21,030
there's a there's a it's a database

00:37:18,210 --> 00:37:22,950
actually which you can review if you

00:37:21,030 --> 00:37:27,020
want this is just containing all the

00:37:22,950 --> 00:37:30,090
data and you can now consume it in your

00:37:27,020 --> 00:37:33,210
in your other actor so now you will see

00:37:30,090 --> 00:37:37,890
that there actually it printed here the

00:37:33,210 --> 00:37:40,710
message which was forwarded so and now

00:37:37,890 --> 00:37:45,950
since we had the workflow you can use an

00:37:40,710 --> 00:37:45,950
actor workflow run flock and

00:37:45,990 --> 00:37:49,580
thus the same thing

00:37:50,599 --> 00:38:00,170
so much for the demo are there any other

00:37:57,660 --> 00:38:00,170
questions

00:38:08,370 --> 00:38:12,320
so please

00:38:30,360 --> 00:38:37,230
well right now the question is if we

00:38:35,520 --> 00:38:39,090
would use this info drama if you would

00:38:37,230 --> 00:38:41,850
have a repository that we can use

00:38:39,090 --> 00:38:45,240
someone else already wrote the idea is

00:38:41,850 --> 00:38:49,310
that the that the actors are actually

00:38:45,240 --> 00:38:53,760
present all the time and that if

00:38:49,310 --> 00:38:55,410
something is not available like for

00:38:53,760 --> 00:38:57,660
example not installed and it would not

00:38:55,410 --> 00:39:00,510
affect it therefore should be actually a

00:38:57,660 --> 00:39:01,590
multiple sets of actors normally for

00:39:00,510 --> 00:39:02,850
example there should be in the beginning

00:39:01,590 --> 00:39:04,320
they should something that scans for

00:39:02,850 --> 00:39:05,520
this stuff and figures out there is

00:39:04,320 --> 00:39:07,920
nothing and it would not produce a

00:39:05,520 --> 00:39:09,750
message later another actor gets

00:39:07,920 --> 00:39:12,000
executed which would consume a message

00:39:09,750 --> 00:39:14,900
but the message is not present so it

00:39:12,000 --> 00:39:18,690
wouldn't do anything and that way it is

00:39:14,900 --> 00:39:21,630
the idea of how this should work is like

00:39:18,690 --> 00:39:23,520
this a a question like I mean basically

00:39:21,630 --> 00:39:25,590
and the availability to get to the

00:39:23,520 --> 00:39:29,970
availability but there would be

00:39:25,590 --> 00:39:33,180
basically installed but the default set

00:39:29,970 --> 00:39:35,010
of like what we support in fedora would

00:39:33,180 --> 00:39:38,400
be in should be installed basically the

00:39:35,010 --> 00:39:41,700
moment you install the leap tool who

00:39:38,400 --> 00:39:44,040
wants to add wanna use third-party ones

00:39:41,700 --> 00:39:46,230
while you can just include them into

00:39:44,040 --> 00:39:49,500
e.t.c leap repos D as a symlink

00:39:46,230 --> 00:39:52,200
the repository and they will get for the

00:39:49,500 --> 00:39:53,760
upgrade they get injected into that they

00:39:52,200 --> 00:39:55,470
get automatically loaded anything what

00:39:53,760 --> 00:39:57,600
is in the repos D folder gets actually

00:39:55,470 --> 00:39:59,850
injected that works without the linking

00:39:57,600 --> 00:40:01,530
actually but most of the times they use

00:39:59,850 --> 00:40:03,540
the linking as well because like they

00:40:01,530 --> 00:40:05,910
would refer to other things from there

00:40:03,540 --> 00:40:08,960
to consume to be actually using the tags

00:40:05,910 --> 00:40:12,470
to be injected into that whole workflow

00:40:08,960 --> 00:40:12,470
without that wouldn't work

00:40:17,470 --> 00:40:22,680
mm-hmm

00:40:19,930 --> 00:40:22,680
okay

00:40:24,890 --> 00:40:27,759
mm-hmm

00:40:31,360 --> 00:40:35,680
there's okay the question is like

00:40:33,700 --> 00:40:37,660
basically sharing actors between

00:40:35,680 --> 00:40:39,940
different databases for example the

00:40:37,660 --> 00:40:41,680
example was that one developer is

00:40:39,940 --> 00:40:43,480
maintaining Mario DB the other one is

00:40:41,680 --> 00:40:45,580
Postgres for my really be there

00:40:43,480 --> 00:40:49,120
implemented and the Postgres developer

00:40:45,580 --> 00:40:51,550
would like to reuse a bunch of them in

00:40:49,120 --> 00:40:53,620
that case I would actually wonder if

00:40:51,550 --> 00:40:56,110
that would not be a use case for shared

00:40:53,620 --> 00:40:58,150
libraries and that's the first thing

00:40:56,110 --> 00:41:00,580
that might actually solve your problem

00:40:58,150 --> 00:41:04,540
already if you share them on repository

00:41:00,580 --> 00:41:07,060
level that then they are like usable by

00:41:04,540 --> 00:41:10,690
anyone it's the first thing the second

00:41:07,060 --> 00:41:12,730
thing is like if necessary yes you can

00:41:10,690 --> 00:41:15,430
use them this is just like you basically

00:41:12,730 --> 00:41:17,880
produce the same messages and it would

00:41:15,430 --> 00:41:23,080
do something but you need to be careful

00:41:17,880 --> 00:41:25,030
generic actors might be a sign of that

00:41:23,080 --> 00:41:28,480
it is actually supposed to be as a

00:41:25,030 --> 00:41:30,250
library because it's if it is generic

00:41:28,480 --> 00:41:32,320
code that is more a library than

00:41:30,250 --> 00:41:38,050
actually an actor an actor should be

00:41:32,320 --> 00:41:40,530
specialized to specific tasks any other

00:41:38,050 --> 00:41:40,530
questions

00:41:57,390 --> 00:41:59,990
yeah

00:42:03,670 --> 00:42:12,100
well to be quite honest I I'm still a

00:42:08,680 --> 00:42:14,290
little bit back and forth with the idea

00:42:12,100 --> 00:42:15,880
where to office area where should live

00:42:14,290 --> 00:42:18,550
basically the actors like should they

00:42:15,880 --> 00:42:20,830
live with the with the product or which

00:42:18,550 --> 00:42:22,180
which is affected by it or should they

00:42:20,830 --> 00:42:25,180
live basically in a global repository

00:42:22,180 --> 00:42:28,090
for all all the things like let's say

00:42:25,180 --> 00:42:31,480
there's a upstream project which main

00:42:28,090 --> 00:42:34,900
manage manage maintains them for for

00:42:31,480 --> 00:42:36,730
fedora to be quite honest I don't really

00:42:34,900 --> 00:42:43,660
know right now what is the best approach

00:42:36,730 --> 00:42:47,560
here because initially I would have one

00:42:43,660 --> 00:42:50,710
like one global one only at one place

00:42:47,560 --> 00:42:52,930
where to put them and that is because

00:42:50,710 --> 00:42:55,420
until you have everyone on the same page

00:42:52,930 --> 00:42:57,490
of like how should be actors written and

00:42:55,420 --> 00:42:59,590
how should basically you would need to

00:42:57,490 --> 00:43:01,150
set up something like the packaging

00:42:59,590 --> 00:43:03,910
guidelines you would have to set up

00:43:01,150 --> 00:43:07,620
something similar and this needs to be

00:43:03,910 --> 00:43:10,390
undergoing reviews so at this because

00:43:07,620 --> 00:43:12,190
otherwise it's endangering the upgrade

00:43:10,390 --> 00:43:14,560
process you might actually do something

00:43:12,190 --> 00:43:17,230
which is dangerous and you should meet

00:43:14,560 --> 00:43:19,420
someone who looks over it a bit that

00:43:17,230 --> 00:43:22,570
until you basically understand how to do

00:43:19,420 --> 00:43:24,610
it and anything that is in fedora I

00:43:22,570 --> 00:43:28,120
think it would be beneficial to have one

00:43:24,610 --> 00:43:29,860
global place to like what is by default

00:43:28,120 --> 00:43:31,810
Fedora should be one global place this

00:43:29,860 --> 00:43:33,910
is like something external like copper

00:43:31,810 --> 00:43:38,050
or whatever they should bundle their

00:43:33,910 --> 00:43:39,970
repositories like with their rpm and

00:43:38,050 --> 00:43:41,980
have it specialized and it's like

00:43:39,970 --> 00:43:44,080
something like what was like for example

00:43:41,980 --> 00:43:46,660
in a relic scenario where we relaxed

00:43:44,080 --> 00:43:48,610
it's called they are like based on rel

00:43:46,660 --> 00:43:50,650
and we have light for example Rev and

00:43:48,610 --> 00:43:53,710
they would be upgraded to want to

00:43:50,650 --> 00:43:56,650
upgrade together with with the major

00:43:53,710 --> 00:43:59,350
version of rel to the new version of rel

00:43:56,650 --> 00:44:03,490
they should provide for example their

00:43:59,350 --> 00:44:05,140
own repositories very specific has

00:44:03,490 --> 00:44:07,270
absolutely nothing to do with the base

00:44:05,140 --> 00:44:08,920
operating system and then it should be

00:44:07,270 --> 00:44:11,760
bundled and that's like falling under

00:44:08,920 --> 00:44:15,120
this section of three third-party

00:44:11,760 --> 00:44:18,370
application developers

00:44:15,120 --> 00:44:21,030
let's see the answer D which good any

00:44:18,370 --> 00:44:21,030
other question

00:44:26,700 --> 00:44:29,930
but it's fine

00:44:35,730 --> 00:44:41,160
do you do you want do you want want to

00:44:38,700 --> 00:44:43,849
see that's a waiter on what did you see

00:44:41,160 --> 00:44:43,849
once more

00:44:50,120 --> 00:44:56,390
oh okay okay it is actually yeah the

00:44:53,900 --> 00:45:00,410
question is like what's the magic behind

00:44:56,390 --> 00:45:05,630
the the library support well in in the

00:45:00,410 --> 00:45:08,210
libraries we have basically we scanned

00:45:05,630 --> 00:45:10,310
the repository and we figure out what

00:45:08,210 --> 00:45:11,690
files are there and the moment you start

00:45:10,310 --> 00:45:13,250
an active we see like oh there are

00:45:11,690 --> 00:45:15,200
libraries okay I was like there's

00:45:13,250 --> 00:45:17,540
there's there are files in there so in

00:45:15,200 --> 00:45:21,050
that moment we since the actors are

00:45:17,540 --> 00:45:22,670
started in their own process about we

00:45:21,050 --> 00:45:24,560
use multi processing for it and forc

00:45:22,670 --> 00:45:27,290
basically at that moment before we load

00:45:24,560 --> 00:45:31,430
anything and what we do is we

00:45:27,290 --> 00:45:33,970
dynamically import this and insert them

00:45:31,430 --> 00:45:37,190
into the module dynamically on runtime

00:45:33,970 --> 00:45:39,560
so that you can do that and it has

00:45:37,190 --> 00:45:41,810
support for packages and and modules so

00:45:39,560 --> 00:45:44,930
if you use a normal Python package that

00:45:41,810 --> 00:45:46,010
works perfectly fine the only thing is

00:45:44,930 --> 00:45:48,290
like if you would want to use

00:45:46,010 --> 00:45:50,260
third-party stuff like let's say SQL

00:45:48,290 --> 00:45:53,330
alchemy or whatever things like this

00:45:50,260 --> 00:45:54,260
there's like one one restriction on

00:45:53,330 --> 00:45:57,170
actors

00:45:54,260 --> 00:45:59,150
you cannot globally import them and it

00:45:57,170 --> 00:46:02,330
is simply because we do in stress we

00:45:59,150 --> 00:46:04,970
load the actors quickly and if you're

00:46:02,330 --> 00:46:08,030
having a missing dependency it will blow

00:46:04,970 --> 00:46:10,490
up and it will make everything fail but

00:46:08,030 --> 00:46:11,990
we can ignore this eventually but like

00:46:10,490 --> 00:46:12,890
right now it would everything fail with

00:46:11,990 --> 00:46:15,350
it

00:46:12,890 --> 00:46:17,600
because we want them to to load

00:46:15,350 --> 00:46:20,030
successfully it is considered like a

00:46:17,600 --> 00:46:24,010
broken actor which is a problem because

00:46:20,030 --> 00:46:26,150
we don't know why it is broken so the

00:46:24,010 --> 00:46:29,270
functionality there is also because of

00:46:26,150 --> 00:46:31,220
testing if someone forgets like we want

00:46:29,270 --> 00:46:34,550
to have some make files that specify the

00:46:31,220 --> 00:46:36,410
the dependencies what you need or some

00:46:34,550 --> 00:46:37,850
other way we are not really hundred

00:46:36,410 --> 00:46:40,910
percent sure how to go with the

00:46:37,850 --> 00:46:42,380
dependencies of this most likely we will

00:46:40,910 --> 00:46:44,930
have to use something else than a make

00:46:42,380 --> 00:46:50,180
file because we need to eventually eject

00:46:44,930 --> 00:46:52,490
it into the spec files so you would need

00:46:50,180 --> 00:46:54,830
to provide that for the test as well so

00:46:52,490 --> 00:46:59,600
the test tries to load the actor and

00:46:54,830 --> 00:47:01,370
will fail so it is it's it's complicated

00:46:59,600 --> 00:47:02,980
so I mean like you

00:47:01,370 --> 00:47:05,510
should look at it then you will see why

00:47:02,980 --> 00:47:08,810
if you're really deeply interested in it

00:47:05,510 --> 00:47:11,030
but in general it I mean the the the way

00:47:08,810 --> 00:47:12,890
how this the libraries are injected is

00:47:11,030 --> 00:47:14,440
relatively simple from the idea

00:47:12,890 --> 00:47:18,800
it's just dynamic import with

00:47:14,440 --> 00:47:20,870
reassignment of the module to to the to

00:47:18,800 --> 00:47:22,760
the place and afterwards it's also

00:47:20,870 --> 00:47:24,380
environment variables get injected and

00:47:22,760 --> 00:47:25,370
it is basically running in a context

00:47:24,380 --> 00:47:31,150
manager and cleans up everything

00:47:25,370 --> 00:47:31,150
afterwards so anything else

00:47:36,400 --> 00:47:40,630
but it was about that was about

00:47:38,589 --> 00:47:44,770
modernization what does it mean so

00:47:40,630 --> 00:47:47,230
update update can be it's not in context

00:47:44,770 --> 00:47:49,299
of the Fedora upgrades in this case it

00:47:47,230 --> 00:47:50,859
is more what does modernization mean

00:47:49,299 --> 00:47:53,980
it's like you bring the software

00:47:50,859 --> 00:47:56,920
up-to-date or you bring the data to the

00:47:53,980 --> 00:48:00,309
up-to-date version I just used update /

00:47:56,920 --> 00:48:03,069
upgrades because to me quite honestly

00:48:00,309 --> 00:48:04,630
this is ambiguous you know this it's

00:48:03,069 --> 00:48:06,490
there's no clear line what is an

00:48:04,630 --> 00:48:09,329
operator what is an update at least to

00:48:06,490 --> 00:48:09,329
me not at all

00:48:16,049 --> 00:48:21,359
no no no no yeah well actually actually

00:48:19,589 --> 00:48:23,160
sorry for interrupting you're actually

00:48:21,359 --> 00:48:26,609
thinking about it I mean like there

00:48:23,160 --> 00:48:29,929
would be no problem using lead to create

00:48:26,609 --> 00:48:29,929
the verbs as well

00:48:53,359 --> 00:48:56,900
not actually thinking about it what

00:48:55,369 --> 00:49:01,009
you're just saying like I mean basically

00:48:56,900 --> 00:49:04,190
did the point is that no summarizing

00:49:01,009 --> 00:49:08,539
that what you just said basically the

00:49:04,190 --> 00:49:10,700
the question is if you could India

00:49:08,539 --> 00:49:12,920
basically have same messages about like

00:49:10,700 --> 00:49:15,589
what we had here for the upgrades also

00:49:12,920 --> 00:49:18,259
in the update scenarios so for beef

00:49:15,589 --> 00:49:20,119
someone would turn on a module and make

00:49:18,259 --> 00:49:22,279
it is available we could detect that of

00:49:20,119 --> 00:49:26,719
course and it could suggest that he does

00:49:22,279 --> 00:49:28,579
that on the contrary the questions it

00:49:26,719 --> 00:49:30,289
happens sometimes on Fedora did some

00:49:28,579 --> 00:49:33,140
major version upgrades during the

00:49:30,289 --> 00:49:36,229
lifecycle happened but it's very

00:49:33,140 --> 00:49:39,859
discouraged it's from what I know so I

00:49:36,229 --> 00:49:43,039
don't think that is really a use case I

00:49:39,859 --> 00:49:44,539
mean that particular example I can

00:49:43,039 --> 00:49:46,519
imagine that there are might be some

00:49:44,539 --> 00:49:48,619
things that you won't want to do maybe

00:49:46,519 --> 00:49:53,180
this might be interesting to system

00:49:48,619 --> 00:49:55,069
administrators to add notifications for

00:49:53,180 --> 00:49:56,809
example it's like something happened

00:49:55,069 --> 00:50:02,479
something was updated something wasn't

00:49:56,809 --> 00:50:04,450
updated things like that so kind of lost

00:50:02,479 --> 00:50:06,140
track of time

00:50:04,450 --> 00:50:09,619
[Music]

00:50:06,140 --> 00:50:12,970
okay yeah IIIi don't know I I don't know

00:50:09,619 --> 00:50:17,100
how long in this section gone thank you

00:50:12,970 --> 00:50:17,100

YouTube URL: https://www.youtube.com/watch?v=1t0zUFbInts


