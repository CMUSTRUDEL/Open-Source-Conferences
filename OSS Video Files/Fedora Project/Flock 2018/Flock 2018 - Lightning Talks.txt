Title: Flock 2018 - Lightning Talks
Publication date: 2018-09-08
Playlist: Flock 2018
Description: 
	Saturday, August 11, 2018 
11:20am - 12:20pm
@Dresden

Talk: Lightning Talks
Presenters: Various

Description: Lightning talks are short 6 minutes talks delivered without slides. The maximum is two lightning talks per speaker. Presentations should be in line with the theme of the conference, appropriate for Fedora and focused on Fedora contributors and their needs. In case we have more presentations than time, the organizers will select talks to make for an interesting cross-section of ideas. Sign up at the registration desk to deliver one, the deadline is Friday before lunch. The speakers will be announced shortly afterwards.
Captions: 
	00:00:01,879 --> 00:00:08,000
right hello everyone

00:00:05,370 --> 00:00:11,400
I'll be coordinating the lightning talks

00:00:08,000 --> 00:00:15,299
we have about ten speakers and we have a

00:00:11,400 --> 00:00:19,020
total at our disposal about an hour so

00:00:15,299 --> 00:00:22,199
it's six minutes per speaker as we as we

00:00:19,020 --> 00:00:25,460
already mentioned in the schedule so

00:00:22,199 --> 00:00:28,560
let's begin the first speaker is

00:00:25,460 --> 00:00:31,740
Miroslav Suki yeah perfect

00:00:28,560 --> 00:00:35,969
with mock what's new

00:00:31,740 --> 00:00:39,300
the next speaker is is one or Guha RP

00:00:35,969 --> 00:00:45,350
MPI installer perfect he should be

00:00:39,300 --> 00:00:45,350
prepared right afterwards and yep

00:00:55,250 --> 00:01:04,620
okay hi hi everybody so who doesn't know

00:01:00,870 --> 00:01:08,430
me I'm Marisol Sookie and I would like

00:01:04,620 --> 00:01:12,270
to share just what's new in Mach there's

00:01:08,430 --> 00:01:16,430
some interesting new features first of

00:01:12,270 --> 00:01:19,880
all there's a feature - - force arc

00:01:16,430 --> 00:01:22,800
which will allow you to instantly get a

00:01:19,880 --> 00:01:27,800
different architecture on your hand

00:01:22,800 --> 00:01:32,760
so if you write Mach shell - - force our

00:01:27,800 --> 00:01:35,610
PPC 64 al e you will get in after

00:01:32,760 --> 00:01:38,420
downloading few packages PowerPC

00:01:35,610 --> 00:01:41,010
packages you will have PowerPC machine

00:01:38,420 --> 00:01:43,650
that's just like one minute or two

00:01:41,010 --> 00:01:49,290
minutes you can do the same for our our

00:01:43,650 --> 00:01:51,290
axis T 64 any any architectures the

00:01:49,290 --> 00:01:54,960
slowdown is just a little bit

00:01:51,290 --> 00:01:58,110
the installation is like instead of SSD

00:01:54,960 --> 00:02:01,800
disk here you have back my like magnetic

00:01:58,110 --> 00:02:04,979
disk and that's all everything Calais is

00:02:01,800 --> 00:02:09,450
handled by 2 by mu you you just have to

00:02:04,979 --> 00:02:11,640
have installed by mu user static and our

00:02:09,450 --> 00:02:15,750
emulation is done software a software

00:02:11,640 --> 00:02:17,360
emulation work like charm so if you need

00:02:15,750 --> 00:02:21,840
to do something for foreign

00:02:17,360 --> 00:02:25,530
architectures use this it's much faster

00:02:21,840 --> 00:02:27,440
than creating a new virtual machine just

00:02:25,530 --> 00:02:31,170
if you need to some something develop

00:02:27,440 --> 00:02:37,819
other interesting feature is bootstrap

00:02:31,170 --> 00:02:40,650
it's in mock form or for one year and

00:02:37,819 --> 00:02:43,380
it's still not enabled by default

00:02:40,650 --> 00:02:45,959
because there are some glitches but it's

00:02:43,380 --> 00:02:52,980
good to know that it's there the feature

00:02:45,959 --> 00:02:56,520
comes like if you are on let's say RAL

00:02:52,980 --> 00:02:59,520
six or seven and you want to install a

00:02:56,520 --> 00:03:02,069
row height on our l7 you don't have

00:02:59,520 --> 00:03:03,600
young so what to do

00:03:02,069 --> 00:03:04,840
there was some

00:03:03,600 --> 00:03:08,120
[Music]

00:03:04,840 --> 00:03:10,520
things we will like magically do but

00:03:08,120 --> 00:03:13,959
bootstrap is more better solution

00:03:10,520 --> 00:03:18,380
because it will install very minimal

00:03:13,959 --> 00:03:21,620
fruit which install only DNF RPM and

00:03:18,380 --> 00:03:23,780
distribution GPG keys and that's all and

00:03:21,620 --> 00:03:26,630
from this fruit we will install the

00:03:23,780 --> 00:03:29,599
final fruit with the federal 28 or

00:03:26,630 --> 00:03:32,269
rawhide so you will have the final crude

00:03:29,599 --> 00:03:34,280
install with the DNF from that

00:03:32,269 --> 00:03:37,730
distribution you are going to install

00:03:34,280 --> 00:03:39,920
which is awesome and right now it's

00:03:37,730 --> 00:03:42,680
currently only possible way how you can

00:03:39,920 --> 00:03:45,739
install Fedora 28 on our l7 because of

00:03:42,680 --> 00:03:51,470
some rigid abundance is used in some

00:03:45,739 --> 00:03:54,980
packages which comes to point if you are

00:03:51,470 --> 00:03:59,450
maintaining some package which is used

00:03:54,980 --> 00:04:06,560
by rpm DNF brings peyten

00:03:59,450 --> 00:04:11,570
as please don't try to use some or any

00:04:06,560 --> 00:04:15,410
new rpm features otherwise even this

00:04:11,570 --> 00:04:18,769
feature will not help us to build fedora

00:04:15,410 --> 00:04:22,310
32 or something like that so in feature

00:04:18,769 --> 00:04:28,190
please try to not use any fancy rpm

00:04:22,310 --> 00:04:30,710
feature in those minimal rpm so but

00:04:28,190 --> 00:04:33,530
otherwise everywhere you can use any

00:04:30,710 --> 00:04:35,450
features as you like and Butera will be

00:04:33,530 --> 00:04:41,000
solution for you to build that package

00:04:35,450 --> 00:04:43,330
on any supported platform that's all

00:04:41,000 --> 00:04:49,500
thank you

00:04:43,330 --> 00:04:49,500
[Applause]

00:04:51,100 --> 00:05:00,310
so good morning everyone my name is June

00:04:56,300 --> 00:05:05,150
Olga so I have six minutes for my

00:05:00,310 --> 00:05:11,330
presentation so today what I want to

00:05:05,150 --> 00:05:18,230
share for you is about product recently

00:05:11,330 --> 00:05:25,220
I developed that is a installer to

00:05:18,230 --> 00:05:30,260
install RPM python binding in any Python

00:05:25,220 --> 00:05:35,030
environment I want to ask you how many

00:05:30,260 --> 00:05:37,690
people you know rpm of Python bindings

00:05:35,030 --> 00:05:39,920
raise your hands

00:05:37,690 --> 00:05:45,440
okay oh that's cool

00:05:39,920 --> 00:05:48,230
so actually for example coogee or some

00:05:45,440 --> 00:05:52,930
federal package command R package

00:05:48,230 --> 00:05:56,210
command is using our PM Python bindings

00:05:52,930 --> 00:06:01,130
the main purpose for the binding list of

00:05:56,210 --> 00:06:03,290
purpose RPM spec file but some

00:06:01,130 --> 00:06:07,670
challenging is people won't sometimes

00:06:03,290 --> 00:06:12,040
want to use our campus on binding on for

00:06:07,670 --> 00:06:16,610
example butter environment to develop

00:06:12,040 --> 00:06:22,370
your project using our RPM python

00:06:16,610 --> 00:06:27,100
bindings and this installer some service

00:06:22,370 --> 00:06:34,210
the problem and some people want to use

00:06:27,100 --> 00:06:39,590
RPM python bindings for example python

00:06:34,210 --> 00:06:45,350
3.5 not 3.06 RPM python binding is

00:06:39,590 --> 00:06:48,740
provided by RPM for pythons 3.06 but we

00:06:45,350 --> 00:06:53,330
want to use four different buttons and

00:06:48,740 --> 00:06:56,450
on sent OS the python binding for python

00:06:53,330 --> 00:06:57,980
3 is not provided but still people want

00:06:56,450 --> 00:07:03,040
to use

00:06:57,980 --> 00:07:03,040
and mine Stora to solve this problem

00:07:04,000 --> 00:07:14,000
still we have three minutes and when

00:07:09,290 --> 00:07:18,440
architecture is the main benefit is if

00:07:14,000 --> 00:07:23,240
your project needs rpm Python binding as

00:07:18,440 --> 00:07:27,050
a runtime dependencies your project

00:07:23,240 --> 00:07:31,340
maybe cannot upload to pi PI remote

00:07:27,050 --> 00:07:36,530
server right because rpm Python binding

00:07:31,340 --> 00:07:39,650
is not published as a fiber package but

00:07:36,530 --> 00:07:44,600
using this installer you can publish

00:07:39,650 --> 00:07:48,080
your package to pi PI server you can

00:07:44,600 --> 00:07:50,420
publish and actually the cosy is using

00:07:48,080 --> 00:07:56,540
with this technology so you can publish

00:07:50,420 --> 00:08:03,380
your Python application to PI server so

00:07:56,540 --> 00:08:04,160
main architecture is some for example pi

00:08:03,380 --> 00:08:09,710
PI

00:08:04,160 --> 00:08:14,560
another p IP install RPM - py -

00:08:09,710 --> 00:08:18,950
installer so in this timing the

00:08:14,560 --> 00:08:23,810
application will get source code of RPM

00:08:18,950 --> 00:08:27,920
and only build a part of python bindings

00:08:23,810 --> 00:08:31,390
not entire rpm so that is the main

00:08:27,920 --> 00:08:34,820
architecture so that enables to build

00:08:31,390 --> 00:08:40,160
rpm Python binding on anybody of the

00:08:34,820 --> 00:08:44,150
Python so yeah you can use it and still

00:08:40,160 --> 00:08:52,250
I have two minutes okay

00:08:44,150 --> 00:08:55,190
and the name is RPM - py - installer RPM

00:08:52,250 --> 00:08:58,400
- py just installer just remember the

00:08:55,190 --> 00:09:05,260
name and you can search this name on

00:08:58,400 --> 00:09:05,260
github or pi PI website

00:09:05,720 --> 00:09:15,100
so any questions I don't mean this I see

00:09:14,910 --> 00:09:19,220
[Music]

00:09:15,100 --> 00:09:32,940
[Laughter]

00:09:19,220 --> 00:09:36,779
ok it's done thank you very much thank

00:09:32,940 --> 00:09:42,300
you the next speaker is Luca Bruno his

00:09:36,779 --> 00:09:51,060
talk is ignition first boot Kauravas

00:09:42,300 --> 00:09:54,269
provisioning what are worth somebody

00:09:51,060 --> 00:09:57,269
else before but ok hi my name is Luca I

00:09:54,269 --> 00:09:58,620
used to work at Korres before and I'm

00:09:57,269 --> 00:10:01,709
gonna talk you about a technician which

00:09:58,620 --> 00:10:03,810
is something that we did as a new

00:10:01,709 --> 00:10:06,779
project let's say to solve a few issues

00:10:03,810 --> 00:10:12,630
and I'm gonna let you guess what are the

00:10:06,779 --> 00:10:14,820
design this is the rattle it's a what

00:10:12,630 --> 00:10:17,550
are the design details or the design

00:10:14,820 --> 00:10:18,839
goes that we were aiming for so first we

00:10:17,550 --> 00:10:21,089
were running clouding it at some point

00:10:18,839 --> 00:10:23,010
and the problem is we want to configure

00:10:21,089 --> 00:10:24,540
the machine the cloud machine or the

00:10:23,010 --> 00:10:27,149
bare metal machine when they are

00:10:24,540 --> 00:10:28,709
starting up for the first time but we

00:10:27,149 --> 00:10:30,600
have a problem with cloud in it and

00:10:28,709 --> 00:10:32,760
they're gonna guess you and you cannot

00:10:30,600 --> 00:10:35,279
let you guess you what are this problem

00:10:32,760 --> 00:10:36,990
like in which language is cloud in it

00:10:35,279 --> 00:10:40,560
written have you ever used cloud in it

00:10:36,990 --> 00:10:43,470
first how many of you had a few in which

00:10:40,560 --> 00:10:45,089
language is clouding it written okay

00:10:43,470 --> 00:10:47,910
what do you need in order to run a

00:10:45,089 --> 00:10:52,920
Python binary mm-hm

00:10:47,910 --> 00:10:56,040
and okay and then just the interpreter

00:10:52,920 --> 00:10:58,260
nothing else Sundaya is cool so where

00:10:56,040 --> 00:11:02,519
are the interpreters at library living

00:10:58,260 --> 00:11:04,140
in this machine haha cool so that means

00:11:02,519 --> 00:11:06,000
that now you want to package and manage

00:11:04,140 --> 00:11:08,010
python interpreters and python libraries

00:11:06,000 --> 00:11:10,260
and tell people hey this is the library

00:11:08,010 --> 00:11:11,910
that we provide you cool problem is in

00:11:10,260 --> 00:11:15,040
our operating system we don't have an

00:11:11,910 --> 00:11:17,980
interpreter and the Python libraries so

00:11:15,040 --> 00:11:20,259
good and then the other think is what do

00:11:17,980 --> 00:11:22,779
you configure with luck cloudy in it lot

00:11:20,259 --> 00:11:25,630
of stuff including I don't know network

00:11:22,779 --> 00:11:29,310
configuration right cool what is the

00:11:25,630 --> 00:11:32,620
user data for cloud in the Kami from

00:11:29,310 --> 00:11:34,839
somewhere outside in the network so how

00:11:32,620 --> 00:11:36,430
do we do it you run some network and

00:11:34,839 --> 00:11:38,800
then you get the configuration then you

00:11:36,430 --> 00:11:40,329
reconfigure the network and then you

00:11:38,800 --> 00:11:41,829
hope that there is nothing as racing

00:11:40,329 --> 00:11:43,389
with you in order to do something with

00:11:41,829 --> 00:11:45,490
the network because then it's like well

00:11:43,389 --> 00:11:47,440
it is a network now there is not anymore

00:11:45,490 --> 00:11:49,600
done it is the network down it's

00:11:47,440 --> 00:11:52,149
configured in a different way and this

00:11:49,600 --> 00:11:54,279
is exactly why we wrote ignition so

00:11:52,149 --> 00:11:56,319
ignition is basically a replacement for

00:11:54,279 --> 00:11:58,930
cloud in it and also bit for like

00:11:56,319 --> 00:12:01,839
kickstart anaconda same kind of like

00:11:58,930 --> 00:12:03,699
ideas and the main difference is that is

00:12:01,839 --> 00:12:07,779
not written in Python is written in gold

00:12:03,699 --> 00:12:10,420
so it's just a single binary it doesn't

00:12:07,779 --> 00:12:12,519
allow you to do a lot of things in our

00:12:10,420 --> 00:12:15,269
like known declarative way so you cannot

00:12:12,519 --> 00:12:17,380
run any arbitrary comments or whatever

00:12:15,269 --> 00:12:19,600
instead it is supposed to be a machine

00:12:17,380 --> 00:12:21,639
interface so you generate some JSON

00:12:19,600 --> 00:12:23,560
according to some JSON scheme and that's

00:12:21,639 --> 00:12:25,810
a declarative configuration on how does

00:12:23,560 --> 00:12:28,600
the machine looks like one it is once it

00:12:25,810 --> 00:12:31,149
is provisioned and then ignition just

00:12:28,600 --> 00:12:33,399
takes it from somewhere the network or

00:12:31,149 --> 00:12:35,230
whatever and it does all the

00:12:33,399 --> 00:12:37,449
configuration before the machine boots

00:12:35,230 --> 00:12:40,449
Indian a drama fest before the real

00:12:37,449 --> 00:12:42,610
switch to the real root of s and so at

00:12:40,449 --> 00:12:45,579
this point we have a deterministic prod

00:12:42,610 --> 00:12:48,519
process were there machine boots it does

00:12:45,579 --> 00:12:50,649
some ignition configuration if that

00:12:48,519 --> 00:12:53,230
declarative configuration is actually

00:12:50,649 --> 00:12:55,120
applied than the machine boots if that

00:12:53,230 --> 00:12:57,519
declarative configuration is not valid

00:12:55,120 --> 00:12:59,380
or cannot be applied for any reason then

00:12:57,519 --> 00:13:01,360
the machine doesn't proceed with the

00:12:59,380 --> 00:13:03,760
normal boot and it is stuck at the knee

00:13:01,360 --> 00:13:06,310
drama fest with some errors that you can

00:13:03,760 --> 00:13:09,069
inspect and after some time is going to

00:13:06,310 --> 00:13:10,990
reboot and try to reposition again and

00:13:09,069 --> 00:13:12,850
that's the main idea for for ignition

00:13:10,990 --> 00:13:14,939
that's the main point why we did it and

00:13:12,850 --> 00:13:18,189
that's the main point why we have this

00:13:14,939 --> 00:13:20,470
not invented here syndrome which in this

00:13:18,189 --> 00:13:21,819
case is more like we have different

00:13:20,470 --> 00:13:24,839
design goals and different design

00:13:21,819 --> 00:13:28,120
details and we wanted to actually solve

00:13:24,839 --> 00:13:28,570
tickets and bug reports that people were

00:13:28,120 --> 00:13:31,390
were

00:13:28,570 --> 00:13:33,340
port into us and that's it and I

00:13:31,390 --> 00:13:35,800
speaking about ignition because that's

00:13:33,340 --> 00:13:37,750
actually one of the components that we

00:13:35,800 --> 00:13:39,640
like that we want to carry over from

00:13:37,750 --> 00:13:43,120
from container linux and that's gonna be

00:13:39,640 --> 00:13:51,370
part of our how to provision Fedora core

00:13:43,120 --> 00:13:55,900
OS in the future questions so we don't

00:13:51,370 --> 00:13:58,420
have any performance goal at all but the

00:13:55,900 --> 00:14:01,660
goal that we have is like raise free and

00:13:58,420 --> 00:14:04,180
correctness provisioning so it's like as

00:14:01,660 --> 00:14:05,890
a side effect it may be faster it

00:14:04,180 --> 00:14:07,090
depends on what you are doing the thing

00:14:05,890 --> 00:14:08,890
is like with ignition you can basically

00:14:07,090 --> 00:14:10,750
provision whatever so if you are if you

00:14:08,890 --> 00:14:12,820
want to fetch at 3 gigabytes files

00:14:10,750 --> 00:14:14,380
before the machine boots it's gonna be

00:14:12,820 --> 00:14:19,330
slow depending on the network but that's

00:14:14,380 --> 00:14:20,920
the details other question somebody cut

00:14:19,330 --> 00:14:23,370
me at 6 minutes please I have not

00:14:20,920 --> 00:14:23,370
counting

00:14:38,640 --> 00:14:45,010
so yep so the questions like can report

00:14:42,490 --> 00:14:47,100
container ignition to other random

00:14:45,010 --> 00:14:50,380
distribution so the answer is yes and no

00:14:47,100 --> 00:14:52,210
the yes part is yes just a binary static

00:14:50,380 --> 00:14:55,690
binary it takes some JSON and does sum

00:14:52,210 --> 00:14:57,430
up some some operations so that part yes

00:14:55,690 --> 00:15:01,210
like packaging it for Fedora was not too

00:14:57,430 --> 00:15:02,740
hard the hard part is that it it is

00:15:01,210 --> 00:15:05,380
really designed it was really designed

00:15:02,740 --> 00:15:07,510
in order to fit into the container Linux

00:15:05,380 --> 00:15:09,490
bootstrapping process that assumes a lot

00:15:07,510 --> 00:15:11,770
of things are like read-only there are

00:15:09,490 --> 00:15:13,630
no packages there are no many things and

00:15:11,770 --> 00:15:16,270
you can like boot do some stuff and then

00:15:13,630 --> 00:15:17,620
continue with the boot and that's the

00:15:16,270 --> 00:15:19,540
are part so like the integration with

00:15:17,620 --> 00:15:21,160
racket and in EMFs for every single

00:15:19,540 --> 00:15:23,530
distribution is probably gonna look

00:15:21,160 --> 00:15:24,040
differently depending on the under your

00:15:23,530 --> 00:15:26,470
distribution

00:15:24,040 --> 00:15:28,630
apart from that no I just like go binary

00:15:26,470 --> 00:15:30,040
detects JSON and awesome stuff and

00:15:28,630 --> 00:15:32,200
that's it like right now in Fedora

00:15:30,040 --> 00:15:33,430
chorus we don't do any so ignition can

00:15:32,200 --> 00:15:35,470
do this partitioning in this

00:15:33,430 --> 00:15:37,570
manipulation but right now in federal

00:15:35,470 --> 00:15:39,400
cause I think we still don't do that

00:15:37,570 --> 00:15:41,710
because that assumes the old container

00:15:39,400 --> 00:15:44,710
Linux setup where you have to user

00:15:41,710 --> 00:15:46,480
partition area readwrite root filesystem

00:15:44,710 --> 00:15:48,600
and so on and so far so that's gonna

00:15:46,480 --> 00:15:52,350
take a bit more time I guess

00:15:48,600 --> 00:15:52,350
other question last one

00:15:54,910 --> 00:16:03,190
I cannot answer completely to that it

00:16:00,370 --> 00:16:04,690
supports some of the same providers some

00:16:03,190 --> 00:16:06,730
of the same methods of fetching it

00:16:04,690 --> 00:16:08,830
mostly like the remote endpoint metadata

00:16:06,730 --> 00:16:11,830
and then depending on specific providers

00:16:08,830 --> 00:16:13,720
some local like local disk or a local

00:16:11,830 --> 00:16:15,400
thermal configuration or whatever I

00:16:13,720 --> 00:16:17,200
didn't check all the providers including

00:16:15,400 --> 00:16:19,630
so I don't know but we support

00:16:17,200 --> 00:16:23,290
everything for like aw has to burn metal

00:16:19,630 --> 00:16:25,600
to DCP to all the other clouds one one

00:16:23,290 --> 00:16:26,920
like dark corner is viateur box and

00:16:25,600 --> 00:16:28,660
that's something that we are going to

00:16:26,920 --> 00:16:31,860
work on but from that is mostly okay

00:16:28,660 --> 00:16:37,059
everyone that's it thank you very much

00:16:31,860 --> 00:16:37,059
[Applause]

00:16:38,160 --> 00:16:46,980
thank you look at the next speaker is

00:16:40,300 --> 00:16:49,980
proven knopf with fedoras or for mind

00:16:46,980 --> 00:16:49,980
yep

00:17:13,449 --> 00:17:22,659
I I have some slides for that so my name

00:17:20,319 --> 00:17:27,279
is Praveen Kumar I work for Red Hat in a

00:17:22,659 --> 00:17:29,260
developer tools group and I am talking

00:17:27,279 --> 00:17:32,610
about the project which I walk usually

00:17:29,260 --> 00:17:35,830
on mini shift this is the way to

00:17:32,610 --> 00:17:39,039
provisional open Civ cluster locally

00:17:35,830 --> 00:17:41,490
with the single node cluster and I will

00:17:39,039 --> 00:17:47,220
talk about like why we are doing it and

00:17:41,490 --> 00:17:47,220
why we are using fedora so

00:17:51,650 --> 00:17:56,680
yeah so mini shift we say it's run open

00:17:55,340 --> 00:17:59,420
sift locally

00:17:56,680 --> 00:18:01,400
this is a basic architecture how many

00:17:59,420 --> 00:18:04,190
sift actually works so we use something

00:18:01,400 --> 00:18:07,940
called live machine and live machine is

00:18:04,190 --> 00:18:11,060
actually managed the VM lifecycle for

00:18:07,940 --> 00:18:13,640
the mini shift and using the mini shift

00:18:11,060 --> 00:18:16,400
we actually create a VM using the native

00:18:13,640 --> 00:18:19,610
hypervisor on the system like for Linux

00:18:16,400 --> 00:18:24,050
we use k vm windows we hyper-v and for

00:18:19,610 --> 00:18:25,970
the Mac we XA and then we used the the

00:18:24,050 --> 00:18:28,010
open sub client binary which actually

00:18:25,970 --> 00:18:30,590
internal do the ossicular scrub and then

00:18:28,010 --> 00:18:34,480
it was a cluster of actually deployed

00:18:30,590 --> 00:18:34,480
the single node open zip cluster for us

00:18:34,990 --> 00:18:41,720
we already have some existing is so for

00:18:38,060 --> 00:18:43,190
you know tryout and in the VM so we have

00:18:41,720 --> 00:18:46,490
sent to us we have something called boot

00:18:43,190 --> 00:18:49,160
to docker ISO and we had a mini cube ISO

00:18:46,490 --> 00:18:51,560
which we deprecated because it was not

00:18:49,160 --> 00:18:57,290
working as we expected to work so we

00:18:51,560 --> 00:19:00,890
deprecated it is so why we want to use

00:18:57,290 --> 00:19:02,420
the Fedora very simple way that now

00:19:00,890 --> 00:19:04,310
there are lot of different container

00:19:02,420 --> 00:19:07,280
technology which coming into the picture

00:19:04,310 --> 00:19:09,290
like its own manage their cryo is their

00:19:07,280 --> 00:19:11,870
Bill dies there and we also wanted to

00:19:09,290 --> 00:19:14,330
use the same thing right now see cluster

00:19:11,870 --> 00:19:16,130
up doesn't have the the option to

00:19:14,330 --> 00:19:18,320
actually select the different container

00:19:16,130 --> 00:19:22,250
and time it still use the docker as a

00:19:18,320 --> 00:19:24,950
default but even then if you just want

00:19:22,250 --> 00:19:26,480
to like try out some commands with the

00:19:24,950 --> 00:19:29,540
poor man or some command with the cryo

00:19:26,480 --> 00:19:31,970
he can do the you can log into the SS to

00:19:29,540 --> 00:19:33,740
the VM which is very easy for the

00:19:31,970 --> 00:19:35,870
ministry because it's already there he

00:19:33,740 --> 00:19:41,030
just do many services and then try out

00:19:35,870 --> 00:19:43,220
all the commands okay somebody will say

00:19:41,030 --> 00:19:44,690
that I'm already using Fedora then

00:19:43,220 --> 00:19:46,430
what's the use for it because I can

00:19:44,690 --> 00:19:49,520
directly then OC clutter up on my own

00:19:46,430 --> 00:19:53,330
laptop and then I have the local

00:19:49,520 --> 00:19:56,510
OpenShift cluster up and running so so

00:19:53,330 --> 00:19:59,050
yes you can do that and it it's good if

00:19:56,510 --> 00:20:03,500
you are only try to use only single

00:19:59,050 --> 00:20:05,690
OpenShift version like if I want to use

00:20:03,500 --> 00:20:08,600
like open shift weight three-point

00:20:05,690 --> 00:20:11,270
6.1 and tomorrow a three point six point

00:20:08,600 --> 00:20:14,420
two is released with ossicles drop I can

00:20:11,270 --> 00:20:16,700
only provision one single open

00:20:14,420 --> 00:20:18,140
suppressor on my own laptop but if you

00:20:16,700 --> 00:20:21,050
are using mini shift what we have is

00:20:18,140 --> 00:20:22,730
something called profile so what you do

00:20:21,050 --> 00:20:24,290
is that each profile can have a

00:20:22,730 --> 00:20:26,180
different version of open safe so you

00:20:24,290 --> 00:20:28,100
can actually test your application

00:20:26,180 --> 00:20:33,620
across whatever the version you want to

00:20:28,100 --> 00:20:36,530
select then how to build that that the I

00:20:33,620 --> 00:20:39,110
assume which we are using so we use the

00:20:36,530 --> 00:20:41,480
kickstart file the old way we already

00:20:39,110 --> 00:20:44,720
have a github repository and I was

00:20:41,480 --> 00:20:47,030
having a talk with the and we want to

00:20:44,720 --> 00:20:48,830
make it part of the fedora and then what

00:20:47,030 --> 00:20:51,350
we will do is that once we have it then

00:20:48,830 --> 00:20:56,720
with the official way we can release

00:20:51,350 --> 00:20:58,910
that ISO but I have a locally built is

00:20:56,720 --> 00:21:01,310
myself so this is how it actually looks

00:20:58,910 --> 00:21:03,530
like right if you do a search you can

00:21:01,310 --> 00:21:05,690
check what's the open what's the federal

00:21:03,530 --> 00:21:07,040
version I'm using so if you don't

00:21:05,690 --> 00:21:09,050
believe on the screenshot I have to go

00:21:07,040 --> 00:21:10,880
to the terminal try it try it out but I

00:21:09,050 --> 00:21:15,520
don't know how much time we have but

00:21:10,880 --> 00:21:18,110
yeah and then what if I have some issue

00:21:15,520 --> 00:21:21,140
so we are on the free node called mini

00:21:18,110 --> 00:21:24,500
shift we have a mailing list we have

00:21:21,140 --> 00:21:26,870
issue tracker and we we think that we

00:21:24,500 --> 00:21:29,810
have very good documentation around what

00:21:26,870 --> 00:21:30,800
we do but if you still think that there

00:21:29,810 --> 00:21:33,950
is some confusion around the

00:21:30,800 --> 00:21:36,110
documentation let us know we have some

00:21:33,950 --> 00:21:41,920
dedicated person for the documentation

00:21:36,110 --> 00:21:46,780
so that's that's it are we good on time

00:21:41,920 --> 00:21:46,780
now okay so if you have any questions

00:21:50,970 --> 00:21:57,570
yeah yeah so so so the the default we

00:21:54,540 --> 00:22:00,810
use for the VM is like 2 GB of RAM and

00:21:57,570 --> 00:22:02,310
20 GB of disk space but that that

00:22:00,810 --> 00:22:03,390
actually depend on the application to

00:22:02,310 --> 00:22:05,370
some of the people who are actually

00:22:03,390 --> 00:22:07,440
using mini shift if they want to deploy

00:22:05,370 --> 00:22:09,390
the application which are like more

00:22:07,440 --> 00:22:13,860
resource angry so they usually use like

00:22:09,390 --> 00:22:15,120
4 GB or 60 GB of RAM and then but for

00:22:13,860 --> 00:22:16,770
the for the user we want to just play

00:22:15,120 --> 00:22:20,930
around the open safe to see how it works

00:22:16,770 --> 00:22:20,930
I think that's the best word we have

00:22:41,270 --> 00:22:46,650
this this is the live ISO the disk size

00:22:44,520 --> 00:22:48,780
right the disk de jure there is a

00:22:46,650 --> 00:22:50,490
standard position and disk we create

00:22:48,780 --> 00:22:53,070
like 20 GB or whatever the user give

00:22:50,490 --> 00:22:55,350
that we what we do is that we mount in

00:22:53,070 --> 00:22:57,080
the live ISO so whatever written in the

00:22:55,350 --> 00:23:00,270
disk until unless you delete that VM

00:22:57,080 --> 00:23:01,740
that is there always so you can stop and

00:23:00,270 --> 00:23:04,260
start and your application is up and

00:23:01,740 --> 00:23:05,610
running but if you do delete then then

00:23:04,260 --> 00:23:07,620
it will be like nothing it will be there

00:23:05,610 --> 00:23:08,970
so you have to okay but the good thing

00:23:07,620 --> 00:23:11,040
is that we also have something called

00:23:08,970 --> 00:23:13,230
horse fault amount which we use SS Efes

00:23:11,040 --> 00:23:15,600
so you can actually mount your horse to

00:23:13,230 --> 00:23:17,280
the VM and have it like everything

00:23:15,600 --> 00:23:20,540
whatever you need for persistence would

00:23:17,280 --> 00:23:20,540
be there so

00:23:34,639 --> 00:23:38,100
No

00:23:35,970 --> 00:23:41,250
so so the thing that if we want to make

00:23:38,100 --> 00:23:43,110
it a Amazon image I think because the

00:23:41,250 --> 00:23:44,789
content is not different what the Fedora

00:23:43,110 --> 00:23:47,279
support the fedora of default Amazon

00:23:44,789 --> 00:23:48,720
image have so it's but it just doesn't

00:23:47,279 --> 00:23:51,179
make sense but what we want for the

00:23:48,720 --> 00:23:52,980
developer is that if they want to try

00:23:51,179 --> 00:23:57,259
out mini shift on with localhost they

00:23:52,980 --> 00:23:57,259
can use that is won't try it out I

00:24:00,110 --> 00:24:14,039
didn't I can talk about thank you

00:24:03,000 --> 00:24:15,200
thanks next one is Paul fields is he

00:24:14,039 --> 00:24:18,919
here

00:24:15,200 --> 00:24:30,509
nope okay let's keep that for now

00:24:18,919 --> 00:24:35,519
Jonathan with what is yep thank you hey

00:24:30,509 --> 00:24:36,889
can you guys hear me now sorry I'm just

00:24:35,519 --> 00:24:38,850
gonna try and make that a bit taller

00:24:36,889 --> 00:24:40,590
okay if any of you guys have been

00:24:38,850 --> 00:24:42,480
talking to me you'll know that right now

00:24:40,590 --> 00:24:44,429
the the thing I've been working on is Z

00:24:42,480 --> 00:24:45,929
chunk and I'm looking out here and I

00:24:44,429 --> 00:24:49,019
think probably about half of you guys

00:24:45,929 --> 00:24:51,539
have had to bear the burden of listening

00:24:49,019 --> 00:24:52,860
to me go on and on and on about this so

00:24:51,539 --> 00:24:54,960
I just thought I'd do it as a quick

00:24:52,860 --> 00:24:56,639
lightning talk what is the chunk why do

00:24:54,960 --> 00:24:58,919
you guys care most of you probably don't

00:24:56,639 --> 00:25:00,360
but let's get into it anyway and maybe

00:24:58,919 --> 00:25:00,750
some of you guys will think hey this is

00:25:00,360 --> 00:25:04,620
awesome

00:25:00,750 --> 00:25:06,720
Z chunk is a new compression format and

00:25:04,620 --> 00:25:08,700
your guys are like why on earth do we

00:25:06,720 --> 00:25:11,220
need a new one we've got about ten of

00:25:08,700 --> 00:25:13,409
them right well the thing is Z chunk is

00:25:11,220 --> 00:25:15,600
not actually a new compression format

00:25:13,409 --> 00:25:18,029
it's reusing another compression format

00:25:15,600 --> 00:25:20,970
in fact it can use different compression

00:25:18,029 --> 00:25:23,730
formats but what it is it is a method of

00:25:20,970 --> 00:25:27,720
compressing files where you split the

00:25:23,730 --> 00:25:30,029
files into independent chunks and the

00:25:27,720 --> 00:25:32,100
reason you do this is so that when you

00:25:30,029 --> 00:25:35,010
are wanting to download a new version of

00:25:32,100 --> 00:25:38,730
the file you are not stuck downloading

00:25:35,010 --> 00:25:41,730
the whole file again as each

00:25:38,730 --> 00:25:43,260
fall can be created using the zck

00:25:41,730 --> 00:25:46,410
command in the same way that you might

00:25:43,260 --> 00:25:50,250
use the XZ commander gzip command it can

00:25:46,410 --> 00:25:53,520
be decompressed using the uh next our

00:25:50,250 --> 00:25:57,360
uncie CK command in the same way G unzip

00:25:53,520 --> 00:26:00,630
or uh nexi but the there is an extra

00:25:57,360 --> 00:26:03,270
tool they're called zck download that

00:26:00,630 --> 00:26:05,280
will if you give it a older version of

00:26:03,270 --> 00:26:07,560
the file and you point it at the new

00:26:05,280 --> 00:26:10,550
file on the internet it will download

00:26:07,560 --> 00:26:14,490
only the chunks that have changed and

00:26:10,550 --> 00:26:16,110
this gets you depending on how big the

00:26:14,490 --> 00:26:20,220
differences are in the files this can

00:26:16,110 --> 00:26:22,680
get you some rather dramatic reduction

00:26:20,220 --> 00:26:26,040
in the amount that you download so why

00:26:22,680 --> 00:26:30,780
am I talking about this this here we are

00:26:26,040 --> 00:26:32,340
looking to Z chunk fedoras metadata the

00:26:30,780 --> 00:26:34,860
the metadata that you guys download

00:26:32,340 --> 00:26:37,470
every single time you run DN f update

00:26:34,860 --> 00:26:39,780
and you're looking at that beautifully

00:26:37,470 --> 00:26:41,340
long bar that goes and moves and moves

00:26:39,780 --> 00:26:44,160
that if you're like me trying to do this

00:26:41,340 --> 00:26:47,790
over 3G sometimes it's moving very very

00:26:44,160 --> 00:26:50,490
slowly using Z chunk you can go and

00:26:47,790 --> 00:26:52,920
download only the differences where we

00:26:50,490 --> 00:26:56,520
at this this was a feature we proposed

00:26:52,920 --> 00:26:59,580
for fedora 29 the bad news is it will

00:26:56,520 --> 00:27:02,870
not be completely done for fedora 29 my

00:26:59,580 --> 00:27:07,050
goal is to have the metadata generated

00:27:02,870 --> 00:27:09,840
for fedora 29 and fedora 30 there will

00:27:07,050 --> 00:27:11,760
be opt-in testing for people who are

00:27:09,840 --> 00:27:16,350
interested in risking their lives and

00:27:11,760 --> 00:27:18,480
their ability to update and and yeah

00:27:16,350 --> 00:27:24,500
assuming that everything works out well

00:27:18,480 --> 00:27:24,500
we can make it a all in for fedora 30

00:27:24,770 --> 00:27:29,400
I've got implementation details but

00:27:27,840 --> 00:27:33,200
honestly I think at this point I'll open

00:27:29,400 --> 00:27:33,200
it up for questions yes

00:27:35,620 --> 00:27:42,130
in I ran some tests basically the

00:27:39,940 --> 00:27:43,809
results are you have to get this each

00:27:42,130 --> 00:27:45,130
chunk fall has two parts a header that

00:27:43,809 --> 00:27:47,740
stores the checksums

00:27:45,130 --> 00:27:50,110
of the chunks and then the body which is

00:27:47,740 --> 00:27:53,049
the actual chunks themselves you have to

00:27:50,110 --> 00:27:55,330
download the header every single time so

00:27:53,049 --> 00:27:58,840
you're looking at a minimum like on

00:27:55,330 --> 00:28:01,720
primary dot XML you're looking at a

00:27:58,840 --> 00:28:03,549
minimum of maybe 50 to 100k that you're

00:28:01,720 --> 00:28:05,860
gonna download every single time and

00:28:03,549 --> 00:28:09,520
then on top of that it's the difference

00:28:05,860 --> 00:28:11,919
in on a day where like if you'd use it

00:28:09,520 --> 00:28:16,059
every single day you might be looking at

00:28:11,919 --> 00:28:18,760
an additional 50 K out of where's the

00:28:16,059 --> 00:28:22,690
normal primary dot XML is maybe three to

00:28:18,760 --> 00:28:25,090
four megabytes so drop that down to one

00:28:22,690 --> 00:28:28,419
or two hundred K including the header

00:28:25,090 --> 00:28:30,820
there if you're if you're taking longer

00:28:28,419 --> 00:28:33,610
in between updates you're gonna see much

00:28:30,820 --> 00:28:38,200
larger you're gonna have to download a

00:28:33,610 --> 00:28:43,500
whole lot more in the back yeah the

00:28:38,200 --> 00:28:45,640
chunk size varies with we're using a

00:28:43,500 --> 00:28:48,970
we're using a couple of different ways

00:28:45,640 --> 00:28:52,210
of generating the chunk size with with Z

00:28:48,970 --> 00:28:55,149
chunk you can actually manually end a

00:28:52,210 --> 00:28:57,159
chunk wherever the heck you want to the

00:28:55,149 --> 00:29:00,549
key thing is that you always do it in a

00:28:57,159 --> 00:29:02,260
consistent manner so in create repo when

00:29:00,549 --> 00:29:05,220
we're ending the chunk we're ending the

00:29:02,260 --> 00:29:08,770
chunk at the end of every single package

00:29:05,220 --> 00:29:10,779
well actually every source we try and

00:29:08,770 --> 00:29:12,640
combine packages that have the same

00:29:10,779 --> 00:29:14,200
source RPM together into the same chunk

00:29:12,640 --> 00:29:16,240
because there's not much point in

00:29:14,200 --> 00:29:19,059
putting them in separate chunks we do

00:29:16,240 --> 00:29:21,520
use compression dictionaries which means

00:29:19,059 --> 00:29:24,010
the size of the file the compression we

00:29:21,520 --> 00:29:31,720
get is still very very good at normally

00:29:24,010 --> 00:29:35,049
beats gzip by about 10% what does this

00:29:31,720 --> 00:29:37,750
mean okay right now it means absolutely

00:29:35,049 --> 00:29:39,580
nothing I have a vision I don't know if

00:29:37,750 --> 00:29:42,549
I've told you this but I have a vision

00:29:39,580 --> 00:29:47,380
and anyway is there anybody who works in

00:29:42,549 --> 00:29:49,270
on rpm here ok please don't shoot me my

00:29:47,380 --> 00:29:52,930
vision right here

00:29:49,270 --> 00:29:59,470
my vision is to kill dart delt RPMs with

00:29:52,930 --> 00:30:04,390
fire okay and instead make RP and make Z

00:29:59,470 --> 00:30:06,610
chunk a payload for RPMs okay there are

00:30:04,390 --> 00:30:08,680
some issues there because you have the

00:30:06,610 --> 00:30:12,070
file the information on the file system

00:30:08,680 --> 00:30:13,600
is uncompressed I have some ideas on Z

00:30:12,070 --> 00:30:17,050
chunk has the ability to do feature

00:30:13,600 --> 00:30:18,880
flags so I have some ideas on how you

00:30:17,050 --> 00:30:20,290
can still validate that the the

00:30:18,880 --> 00:30:21,580
information you're getting off the file

00:30:20,290 --> 00:30:23,680
system is the same you're looking very

00:30:21,580 --> 00:30:28,360
suspicious at me right now and I don't

00:30:23,680 --> 00:30:30,030
blame you but yeah what I do have a

00:30:28,360 --> 00:30:33,070
vision for how this could completely

00:30:30,030 --> 00:30:35,440
destroy the need for ever using dealt

00:30:33,070 --> 00:30:37,360
rpms again and I was the one who worked

00:30:35,440 --> 00:30:40,810
on getting them in originally and I

00:30:37,360 --> 00:30:52,300
loved them except I hate them so they're

00:30:40,810 --> 00:30:56,290
you know it's kind of a yeah you're all

00:30:52,300 --> 00:30:58,120
it is is you know when you're for create

00:30:56,290 --> 00:31:00,940
repo see when you're create when you're

00:30:58,120 --> 00:31:04,990
compressing the the file you're just

00:31:00,940 --> 00:31:06,580
compressing the file there's not in in

00:31:04,990 --> 00:31:09,970
the whole eight and a half hour composed

00:31:06,580 --> 00:31:11,440
cycle it might take a look the the

00:31:09,970 --> 00:31:13,200
compression level we're using it might

00:31:11,440 --> 00:31:19,300
take a little bit long another minute

00:31:13,200 --> 00:31:21,190
another two minutes yeah yeah yeah so

00:31:19,300 --> 00:31:23,620
well and if we could get rid of this it

00:31:21,190 --> 00:31:25,360
would it would be increasing the time it

00:31:23,620 --> 00:31:27,100
takes to create it would actually be

00:31:25,360 --> 00:31:30,970
moved to Koji because it's when Koji

00:31:27,100 --> 00:31:32,770
would create the RPM you would be in the

00:31:30,970 --> 00:31:35,140
compressing the RPM would take longer

00:31:32,770 --> 00:31:38,080
but the beauty of Z chunk is we don't

00:31:35,140 --> 00:31:39,700
have to know the old version Delta rpms

00:31:38,080 --> 00:31:42,040
we have to know the old version and the

00:31:39,700 --> 00:31:44,290
new one Delta in between them Z chunk

00:31:42,040 --> 00:31:46,980
it's up to the client to work out what

00:31:44,290 --> 00:31:46,980
it wants to grab

00:31:48,090 --> 00:31:57,550
[Applause]

00:31:52,680 --> 00:32:00,280
next one is done Iraq perfect

00:31:57,550 --> 00:32:17,670
and after that is Floria then Murray and

00:32:00,280 --> 00:32:20,290
then Adam primarily ibn once and

00:32:17,670 --> 00:32:22,960
lightning talk is about yeah

00:32:20,290 --> 00:32:26,740
using an Oprah power workstation or this

00:32:22,960 --> 00:32:28,120
time as a workstation for daily use yes

00:32:26,740 --> 00:32:31,420
the answer is yes

00:32:28,120 --> 00:32:34,870
you can use non-mainstream architecture

00:32:31,420 --> 00:32:37,990
as a daily workstation I personally use

00:32:34,870 --> 00:32:40,990
it with success eee there are still some

00:32:37,990 --> 00:32:44,410
issues with those 3d graphics need a

00:32:40,990 --> 00:32:47,410
fork gnome but as the community is

00:32:44,410 --> 00:32:51,250
collecting issues they are trying to

00:32:47,410 --> 00:32:55,080
find suffixes and get everything

00:32:51,250 --> 00:33:00,190
upstream so yeah should work fine

00:32:55,080 --> 00:33:02,470
actually the park station or the talus

00:33:00,190 --> 00:33:06,670
workstations it's based on the IBM or

00:33:02,470 --> 00:33:10,210
open power or nine CPUs is a result of

00:33:06,670 --> 00:33:14,710
the open power foundation effort it's

00:33:10,210 --> 00:33:18,820
based on reference design improved by

00:33:14,710 --> 00:33:21,520
the Raptor computing systems company one

00:33:18,820 --> 00:33:24,280
of the goals they had it's not only to

00:33:21,520 --> 00:33:26,170
provide some non-mainstream architecture

00:33:24,280 --> 00:33:29,170
it was not the primary goal of the

00:33:26,170 --> 00:33:32,920
primary goal was rather to have an older

00:33:29,170 --> 00:33:36,370
controllable system which means that

00:33:32,920 --> 00:33:40,270
with open power system you have all

00:33:36,370 --> 00:33:43,480
servers on github so you can compile it

00:33:40,270 --> 00:33:46,450
yourself really from the beginning for

00:33:43,480 --> 00:33:50,470
the PALS workstation or the Telos

00:33:46,450 --> 00:33:54,070
systems you also have sources for system

00:33:50,470 --> 00:33:57,910
P PGA with we've done some power own

00:33:54,070 --> 00:34:01,480
stuff really to do power up the system

00:33:57,910 --> 00:34:04,690
there is also a second computer inside

00:34:01,480 --> 00:34:08,400
the system which is the management ones

00:34:04,690 --> 00:34:11,740
a BMC that also runs fully open source

00:34:08,400 --> 00:34:16,750
operating systems open BMC also on

00:34:11,740 --> 00:34:20,169
github so yeah it's here it's usable

00:34:16,750 --> 00:34:24,550
there are some benchmarks done by the

00:34:20,169 --> 00:34:27,850
Forex guys they discovered some issues

00:34:24,550 --> 00:34:32,110
or performance issues I think primarily

00:34:27,850 --> 00:34:34,660
in the multimedia staff and immediately

00:34:32,110 --> 00:34:36,880
after they published the results there

00:34:34,660 --> 00:34:39,580
were some other guys and teams who pick

00:34:36,880 --> 00:34:42,850
the challenge and started to work on

00:34:39,580 --> 00:34:45,880
improving the stuff for power so we

00:34:42,850 --> 00:34:49,330
should get yeah even in these RS at

00:34:45,880 --> 00:34:56,770
least comparable performances on Intel

00:34:49,330 --> 00:34:59,020
or AMD systems yeah unfortunately I my

00:34:56,770 --> 00:35:02,110
workshop wasn't accepted so I didn't

00:34:59,020 --> 00:35:07,210
brought my system with me so I cannot

00:35:02,110 --> 00:35:10,890
show it to you so yeah it's probably all

00:35:07,210 --> 00:35:10,890
from me so any questions

00:35:17,960 --> 00:35:25,319
for what parents you mean yeah for what

00:35:22,650 --> 00:35:28,910
parents of time sure it's a IBM power

00:35:25,319 --> 00:35:28,910
it's a PowerPC so server architecture

00:35:30,019 --> 00:35:41,299
you mean for your project or any project

00:35:43,579 --> 00:35:53,630
yeah there are some projects in progress

00:35:49,859 --> 00:35:56,910
we are working with us and - as guys to

00:35:53,630 --> 00:36:01,740
start some infrastructure inside the

00:35:56,910 --> 00:36:06,059
central CI - hello upstreams - yeah

00:36:01,740 --> 00:36:08,549
ronzo CIO infrastructure bf or we also

00:36:06,059 --> 00:36:12,930
have some other virtual machines that we

00:36:08,549 --> 00:36:17,069
can give developers access to and they

00:36:12,930 --> 00:36:19,140
can run their own instances of they are

00:36:17,069 --> 00:36:22,440
CI systems they want so yeah definitely

00:36:19,140 --> 00:36:25,589
it's possible just talk to me or talk to

00:36:22,440 --> 00:36:29,599
send those guys we can definitely figure

00:36:25,589 --> 00:36:29,599
out some solution

00:36:34,140 --> 00:36:40,859
yeah it said this architecture should be

00:36:36,930 --> 00:36:42,980
possible with the Santos CI the other

00:36:40,859 --> 00:36:45,359
architecture we care about in federal

00:36:42,980 --> 00:36:48,839
strontium mainframe it's a bit more

00:36:45,359 --> 00:36:52,529
difficult but we have also solution or

00:36:48,839 --> 00:36:55,470
we had a solution I think two weeks

00:36:52,529 --> 00:36:58,049
before and hopefully so next week it

00:36:55,470 --> 00:37:00,390
will be back because yeah so machine we

00:36:58,049 --> 00:37:02,519
used or die process somehow diet and

00:37:00,390 --> 00:37:08,989
they are reinstalling it so should be

00:37:02,519 --> 00:37:22,849
back again any more questions

00:37:08,989 --> 00:37:31,680
so thank you next one is Floria feste

00:37:22,849 --> 00:37:34,799
change look get messages so the question

00:37:31,680 --> 00:37:36,839
of what to do with the change lock has

00:37:34,799 --> 00:37:39,720
come up a couple of times people have

00:37:36,839 --> 00:37:41,849
been annoyed of being doing change lock

00:37:39,720 --> 00:37:45,269
in the respect file and then having to

00:37:41,849 --> 00:37:47,430
type it again and to get and it every

00:37:45,269 --> 00:37:49,739
time you try to have some changes and

00:37:47,430 --> 00:37:53,730
put it in another branch it also gives a

00:37:49,739 --> 00:37:56,579
huge merge conflict it's pain and I was

00:37:53,730 --> 00:38:01,109
always wasn't my back of my mind so what

00:37:56,579 --> 00:38:03,059
to do with that and but I didn't really

00:38:01,109 --> 00:38:05,249
figure out what could be done I mean

00:38:03,059 --> 00:38:06,960
yeah someone just write a script to

00:38:05,249 --> 00:38:10,319
create a change lock then use include

00:38:06,960 --> 00:38:13,819
and don't bug don't back RPM developers

00:38:10,319 --> 00:38:13,819
will figure stupid details

00:38:15,670 --> 00:38:22,640
but it still kept in my mind and so I

00:38:18,440 --> 00:38:25,819
was under the shower and my my my brain

00:38:22,640 --> 00:38:28,489
cooled back to a working state and it

00:38:25,819 --> 00:38:32,049
but you may click and I realized the

00:38:28,489 --> 00:38:35,239
problem is actually not the change lock

00:38:32,049 --> 00:38:36,920
itself there the problem is all those

00:38:35,239 --> 00:38:38,449
merge conflicts and those merge

00:38:36,920 --> 00:38:41,209
conflicts are actually not really

00:38:38,449 --> 00:38:43,969
created by the change lock they actually

00:38:41,209 --> 00:38:47,029
created by the version actually the

00:38:43,969 --> 00:38:49,190
release number which is annoyingly get

00:38:47,029 --> 00:38:52,579
being changed every time in a different

00:38:49,190 --> 00:38:55,130
way and so I figured the only way to

00:38:52,579 --> 00:38:57,440
actually move to change lock out of the

00:38:55,130 --> 00:39:01,099
spec file in a way that actually reduces

00:38:57,440 --> 00:39:05,660
all those merge conflicts is to move the

00:39:01,099 --> 00:39:07,160
release number out with it that's

00:39:05,660 --> 00:39:10,009
basically the only way to actually get

00:39:07,160 --> 00:39:12,680
rid of that and so I was wondering can

00:39:10,009 --> 00:39:16,430
this be done so I wrote a small Python

00:39:12,680 --> 00:39:18,499
script and that basically does this and

00:39:16,430 --> 00:39:20,660
it arias basically this will you need

00:39:18,499 --> 00:39:24,140
like a couple of commands that you can

00:39:20,660 --> 00:39:26,900
put into the message lock and one is of

00:39:24,140 --> 00:39:30,079
course the default is let's take this

00:39:26,900 --> 00:39:32,569
message use the user user date created a

00:39:30,079 --> 00:39:35,989
change log entry out of this they're not

00:39:32,569 --> 00:39:37,549
the next thing is well where do we get

00:39:35,989 --> 00:39:39,589
the version number actually from this

00:39:37,549 --> 00:39:41,599
and that's the thing what you need is

00:39:39,589 --> 00:39:43,789
you need to need when the version change

00:39:41,599 --> 00:39:46,670
and then you just count the release

00:39:43,789 --> 00:39:49,579
numbers up from that so the package show

00:39:46,670 --> 00:39:51,349
doesn't even have to do anything when

00:39:49,579 --> 00:39:54,319
changing something you just commit and

00:39:51,349 --> 00:39:56,630
it magically updates your release number

00:39:54,319 --> 00:39:59,989
this has the great thing that if you

00:39:56,630 --> 00:40:01,729
have a change grab it from here and put

00:39:59,989 --> 00:40:04,459
it there it will just increase the

00:40:01,729 --> 00:40:05,690
number and you don't have to care that

00:40:04,459 --> 00:40:09,170
are actually not the same because

00:40:05,690 --> 00:40:12,430
they're not even in there so you need a

00:40:09,170 --> 00:40:15,319
way basically to tell the script wind

00:40:12,430 --> 00:40:17,599
version changes so we know it's where to

00:40:15,319 --> 00:40:20,089
start counting and so I basically said

00:40:17,599 --> 00:40:23,089
well we just whenever to change lock

00:40:20,089 --> 00:40:25,609
says update two we just grab that that's

00:40:23,089 --> 00:40:27,000
one one solution you could of course

00:40:25,609 --> 00:40:28,770
also just parse this

00:40:27,000 --> 00:40:30,630
like file but your power suspect file

00:40:28,770 --> 00:40:32,820
which has parts missing which are trying

00:40:30,630 --> 00:40:37,050
to create which probably works if you

00:40:32,820 --> 00:40:38,280
like be nice to it but I'm not quite

00:40:37,050 --> 00:40:39,510
sure yet what's what's the right thing

00:40:38,280 --> 00:40:41,310
to do there but they are basically to

00:40:39,510 --> 00:40:43,440
two options one is well leave the

00:40:41,310 --> 00:40:47,210
actually version in there and parse it

00:40:43,440 --> 00:40:50,400
out or basically put it in get also and

00:40:47,210 --> 00:40:54,360
probably impact too as if you think

00:40:50,400 --> 00:40:55,740
about it a bit more there probably two

00:40:54,360 --> 00:40:58,200
more features that are needed one is

00:40:55,740 --> 00:41:00,350
like ignore those message this message

00:40:58,200 --> 00:41:03,060
we really don't want to see it

00:41:00,350 --> 00:41:05,520
because it's just a rebuild or it's

00:41:03,060 --> 00:41:08,580
something where we put the wrong thing

00:41:05,520 --> 00:41:11,040
and I knew you need another thing that's

00:41:08,580 --> 00:41:13,620
basically saying well start generating

00:41:11,040 --> 00:41:15,720
the change lock from this point on to

00:41:13,620 --> 00:41:17,190
the future so you basically can keep all

00:41:15,720 --> 00:41:18,660
the other stuff the nice thing is if

00:41:17,190 --> 00:41:20,340
you're using include you can best

00:41:18,660 --> 00:41:23,100
basically keep the change lock you

00:41:20,340 --> 00:41:25,440
already have put an include line on top

00:41:23,100 --> 00:41:28,170
and so basically only use the

00:41:25,440 --> 00:41:30,410
regenerated change lock from that point

00:41:28,170 --> 00:41:33,690
on

00:41:30,410 --> 00:41:35,820
then there's enough so I had us working

00:41:33,690 --> 00:41:39,870
it kind of looks like it could be a

00:41:35,820 --> 00:41:43,140
thing there's one more problem and the

00:41:39,870 --> 00:41:46,440
problem is and get history basically

00:41:43,140 --> 00:41:49,350
yeah someone at some point will up

00:41:46,440 --> 00:41:52,950
something and you don't want to go back

00:41:49,350 --> 00:41:54,360
and basically change all history so the

00:41:52,950 --> 00:41:57,030
question is what to do with that and

00:41:54,360 --> 00:42:00,240
that's the obvious only the only obvious

00:41:57,030 --> 00:42:02,840
solution is well we misuse text to

00:42:00,240 --> 00:42:09,300
basically do the same type of commands

00:42:02,840 --> 00:42:11,730
which can be applied to changes in later

00:42:09,300 --> 00:42:14,220
on basically just put a tag on that's as

00:42:11,730 --> 00:42:17,310
well you can all this message or well

00:42:14,220 --> 00:42:21,660
actually we changed a version here so it

00:42:17,310 --> 00:42:24,600
could even be done for older for all the

00:42:21,660 --> 00:42:27,690
history that we want to convert if we

00:42:24,600 --> 00:42:30,359
really want to we probably don't

00:42:27,690 --> 00:42:32,609
so that that's the idea it's not really

00:42:30,359 --> 00:42:34,829
dare yet I'm not really sure I mean it

00:42:32,609 --> 00:42:37,200
it has a couple of problems obviously

00:42:34,829 --> 00:42:38,819
because you have like spec files which

00:42:37,200 --> 00:42:40,140
are no longer self-contained it will

00:42:38,819 --> 00:42:41,940
probably break the build system

00:42:40,140 --> 00:42:46,970
everywhere which I don't care because

00:42:41,940 --> 00:42:46,970
I'm an RPM developer I just don't care

00:42:47,660 --> 00:42:54,240
but so that's one way that can be done

00:42:52,289 --> 00:42:57,960
and it probably can be done without even

00:42:54,240 --> 00:43:00,049
new features in rpm right now there may

00:42:57,960 --> 00:43:03,440
be some things we can help talk to me

00:43:00,049 --> 00:43:03,440
that's basically it

00:43:04,010 --> 00:43:09,129
[Applause]

00:43:31,080 --> 00:43:56,530
the next one is Marie budsies micro

00:43:35,560 --> 00:43:59,920
brainstorming she will tell you hi I'm

00:43:56,530 --> 00:44:03,190
Marie Norton and I am the fedora badges

00:43:59,920 --> 00:44:05,140
design maintainer so really quick I just

00:44:03,190 --> 00:44:06,910
want to have a discussion with you guys

00:44:05,140 --> 00:44:09,520
I'm gonna give you some prompts and then

00:44:06,910 --> 00:44:12,970
like we can talk about get some new

00:44:09,520 --> 00:44:15,520
ideas so what is something you do all

00:44:12,970 --> 00:44:18,550
the time for fedora that you want to get

00:44:15,520 --> 00:44:20,740
a badge for what is something you might

00:44:18,550 --> 00:44:23,890
be working on that you need more help or

00:44:20,740 --> 00:44:26,830
contributions for what are some areas

00:44:23,890 --> 00:44:28,750
are projects of fedora you think that we

00:44:26,830 --> 00:44:32,710
need more people working on in general

00:44:28,750 --> 00:44:35,950
are you working on anything new that we

00:44:32,710 --> 00:44:39,730
can create badges for and then any other

00:44:35,950 --> 00:44:41,590
just general ideas are also welcome but

00:44:39,730 --> 00:44:44,320
I ask you to be as specific as possible

00:44:41,590 --> 00:44:47,410
because I'm gonna open the issues later

00:44:44,320 --> 00:44:50,170
and I might not know as much as about

00:44:47,410 --> 00:44:56,200
that topic as you do so go ahead I'm

00:44:50,170 --> 00:44:57,790
gonna take notes but I thought we had a

00:44:56,200 --> 00:45:02,010
lot of tickets open for that but it

00:44:57,790 --> 00:45:02,010
wasn't possible is it possible down

00:45:04,080 --> 00:45:19,930
bugzilla hooking it up with fed message

00:45:07,630 --> 00:45:22,540
yeah well okay so anything that was

00:45:19,930 --> 00:45:31,300
previously marked as not possible for

00:45:22,540 --> 00:45:34,270
Bugzilla is now possible okay all right

00:45:31,300 --> 00:45:41,190
so I will take revisit some of those

00:45:34,270 --> 00:45:41,190
issues or anyone else oh oh it's okay I

00:45:44,730 --> 00:45:49,770
will note that but that is not my job

00:45:53,580 --> 00:45:59,040
that's fair enough

00:45:55,510 --> 00:46:08,910
I'm gonna take a note go ahead

00:45:59,040 --> 00:46:08,910
okay what about module builds okay

00:46:10,000 --> 00:46:16,190
so a series of building packages for

00:46:13,369 --> 00:46:23,980
module builds so what I did I get that

00:46:16,190 --> 00:46:32,660
right a series of badges okay all right

00:46:23,980 --> 00:46:50,589
okay so that's not specific that's very

00:46:32,660 --> 00:46:50,589
general yeah okay dusty okay

00:46:55,880 --> 00:47:01,370
okay rest group go link group

00:47:10,190 --> 00:47:19,109
sure do we have one for that or I think

00:47:16,740 --> 00:47:20,670
there's a ticket open regarding

00:47:19,109 --> 00:47:25,130
silver-blue but I don't know if it's for

00:47:20,670 --> 00:47:25,130
membership or being part of the group

00:47:30,890 --> 00:47:44,670
I'm sorry I didn't quite hear you can

00:47:33,480 --> 00:47:46,170
speak up I'm just gonna take a note I'm

00:47:44,670 --> 00:47:47,970
gonna have to look into that so

00:47:46,170 --> 00:48:06,349
converting Python package from two to

00:47:47,970 --> 00:48:06,349
three okay

00:48:08,610 --> 00:48:37,640
Matt so you ran $100 party okay that's a

00:48:34,500 --> 00:48:37,640
pretty good one all right

00:48:40,880 --> 00:48:57,030
discourse yeah so we have three new open

00:48:44,400 --> 00:49:00,650
tickets we made them yesterday all right

00:48:57,030 --> 00:49:00,650
anything else dusty

00:49:27,920 --> 00:49:37,460
okay no but I could still open a ticket

00:49:33,630 --> 00:49:37,460
and we can discuss

00:49:47,240 --> 00:50:11,640
okay that's oh yeah that could get

00:50:03,210 --> 00:50:15,630
abused a little bit I mean it's a cool

00:50:11,640 --> 00:50:59,310
idea yeah I'm just gonna mark that one

00:50:15,630 --> 00:51:10,830
as this is a bad idea so where would we

00:50:59,310 --> 00:51:15,090
put that like how would that okay yeah I

00:51:10,830 --> 00:51:19,730
like that you're in the running for XYZ

00:51:15,090 --> 00:51:19,730
badge you need this many more

00:51:27,640 --> 00:51:34,240
anything else I'm sensing that this is

00:51:31,339 --> 00:51:44,089
about to be over

00:51:34,240 --> 00:51:47,060
alright thanks okay and last but not

00:51:44,089 --> 00:52:02,359
least adam somali yes i'm using my quest

00:51:47,060 --> 00:52:04,310
to make fedora better hey yeah i know

00:52:02,359 --> 00:52:06,920
that's a horrible title and I apologize

00:52:04,310 --> 00:52:10,750
and feel free to just shout boo but yes

00:52:06,920 --> 00:52:13,280
I but sometimes I use a Mac and

00:52:10,750 --> 00:52:15,020
sometimes I'm just stuck with my Mac and

00:52:13,280 --> 00:52:17,440
I want to work on fedora and I don't

00:52:15,020 --> 00:52:21,080
want for example Kerry to laptop so do

00:52:17,440 --> 00:52:23,410
whatever so I just use it to contribute

00:52:21,080 --> 00:52:25,730
and I'm also using on my Lenovo laptop

00:52:23,410 --> 00:52:28,520
fedora atomic workstation which is now

00:52:25,730 --> 00:52:31,400
called silver blue and I've noticed

00:52:28,520 --> 00:52:34,700
something very similar so on silver blue

00:52:31,400 --> 00:52:37,490
I do everything in containers on my Mac

00:52:34,700 --> 00:52:39,109
I do everything in containers and I

00:52:37,490 --> 00:52:41,869
somehow notice that I don't care each

00:52:39,109 --> 00:52:43,849
one I use because it's the same I use

00:52:41,869 --> 00:52:46,700
the same commands the same workflows the

00:52:43,849 --> 00:52:48,830
same everything and then I was wondering

00:52:46,700 --> 00:52:52,369
we want to attract more contributors and

00:52:48,830 --> 00:52:53,839
like the first thing we want to say we

00:52:52,369 --> 00:52:56,030
don't want to say it's just free install

00:52:53,839 --> 00:52:59,000
your laptop I feel like that's a bit

00:52:56,030 --> 00:53:01,070
high bar for new people so if we can

00:52:59,000 --> 00:53:02,390
make it possible for people using Mac's

00:53:01,070 --> 00:53:04,910
because there are many developer forum

00:53:02,390 --> 00:53:07,490
with using Mac's to contribute to fedora

00:53:04,910 --> 00:53:09,320
and maybe on board them and make them

00:53:07,490 --> 00:53:11,300
packaging or whatever because they can

00:53:09,320 --> 00:53:14,900
be contributing to server or anything

00:53:11,300 --> 00:53:17,270
else and then maybe switch them over so

00:53:14,900 --> 00:53:19,820
we can say hey if you switch the

00:53:17,270 --> 00:53:21,020
containers will run not natively so

00:53:19,820 --> 00:53:22,670
it'll be faster for you or you can

00:53:21,020 --> 00:53:25,040
customize it but if we don't want to you

00:53:22,670 --> 00:53:28,099
don't have to so if we could as for

00:53:25,040 --> 00:53:30,740
example part of the silver-blue build a

00:53:28,099 --> 00:53:33,140
consistent experience for both

00:53:30,740 --> 00:53:36,290
so that's just an idea we could maybe

00:53:33,140 --> 00:53:38,180
work with and by the way funny thing if

00:53:36,290 --> 00:53:40,280
I'm doing a graphical design in Inkscape

00:53:38,180 --> 00:53:42,650
I always choose Fedora which is ironic

00:53:40,280 --> 00:53:45,380
because on a Mac is so slow it's almost

00:53:42,650 --> 00:53:48,500
unusable so and Macs are usually seen as

00:53:45,380 --> 00:53:50,480
like a graphical laptop so no fedora is

00:53:48,500 --> 00:53:54,260
to go to graphical laptop for me and I

00:53:50,480 --> 00:53:57,940
think that's all any questions or booze

00:53:54,260 --> 00:53:57,940
or booze

00:54:09,480 --> 00:54:13,710
yeah cool

00:54:23,450 --> 00:54:27,890
yeah if we build if we build it for if

00:54:26,599 --> 00:54:29,240
you build is really nice

00:54:27,890 --> 00:54:31,010
for people to for example build

00:54:29,240 --> 00:54:32,359
containers based on fedora they might

00:54:31,010 --> 00:54:35,740
just choose Federal Register for this

00:54:32,359 --> 00:54:38,930
instead of other distributions available

00:54:35,740 --> 00:54:41,260
which are so I have a question there you

00:54:38,930 --> 00:54:41,260
next

00:54:47,760 --> 00:54:53,460
so so what I'm basically proposing is

00:54:50,850 --> 00:54:55,290
kind of like hand-wavy but the project

00:54:53,460 --> 00:54:57,359
silver-blue is about building container

00:54:55,290 --> 00:55:00,080
experiences for developers using fedora

00:54:57,359 --> 00:55:03,150
so you do everything in containers

00:55:00,080 --> 00:55:06,060
that's an OS but can we build the exact

00:55:03,150 --> 00:55:12,080
same experience on Mac OS and Matt you

00:55:06,060 --> 00:55:12,080
don't hate me and call it fedora right

00:55:23,940 --> 00:55:29,010
yeah so it may be just

00:55:36,800 --> 00:55:41,960
oh this was mostly about the command

00:55:40,220 --> 00:55:43,580
light tooling I don't think you need

00:55:41,960 --> 00:55:45,410
flat-pack on a Mac because for example

00:55:43,580 --> 00:55:47,840
when I used my editor and that's V s

00:55:45,410 --> 00:55:49,910
code by the way I'm using just like

00:55:47,840 --> 00:55:51,200
native installation on both or flatback

00:55:49,910 --> 00:55:52,940
on Fedora and just like native

00:55:51,200 --> 00:55:55,420
installation on the Mac so that just

00:55:52,940 --> 00:55:55,420
works fine

00:56:29,130 --> 00:56:32,249
[Music]

00:57:01,260 --> 00:57:05,730
and also it's not sometimes it's not

00:57:03,300 --> 00:57:08,520
about making new code but just making

00:57:05,730 --> 00:57:10,109
sure the one that exists works so for

00:57:08,520 --> 00:57:12,359
example I work on the federal

00:57:10,109 --> 00:57:14,430
documentation build pipeline and we made

00:57:12,359 --> 00:57:16,020
sure I made sure that it builds on both

00:57:14,430 --> 00:57:17,520
fedora and Mac OS and that was just like

00:57:16,020 --> 00:57:19,770
a little tweak to make sure it works on

00:57:17,520 --> 00:57:24,500
both and now we can have people

00:57:19,770 --> 00:57:24,500
contributing from like much more user

00:57:28,660 --> 00:57:31,770
[Music]

00:57:48,820 --> 00:57:55,100
so maybe I don't think it's a workflow

00:57:52,490 --> 00:59:01,100
is just like the mindset of just doing

00:57:55,100 --> 00:59:03,680
everything in containers but yeah

00:59:01,100 --> 00:59:05,090
so if it was six minutes just for him to

00:59:03,680 --> 00:59:08,330
cut me off because I don't want to hand

00:59:05,090 --> 00:59:10,040
hold you there okay every group cool if

00:59:08,330 --> 00:59:12,170
we have like few people interested and

00:59:10,040 --> 00:59:14,210
just like I don't know work on it think

00:59:12,170 --> 00:59:18,280
about and just make something happen

00:59:14,210 --> 00:59:22,399
that would be great thank you

00:59:18,280 --> 00:59:22,399

YouTube URL: https://www.youtube.com/watch?v=F_9cKDjInUY


