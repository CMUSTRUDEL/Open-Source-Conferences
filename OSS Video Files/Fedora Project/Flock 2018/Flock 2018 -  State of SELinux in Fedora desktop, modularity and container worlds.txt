Title: Flock 2018 -  State of SELinux in Fedora desktop, modularity and container worlds
Publication date: 2018-09-03
Playlist: Flock 2018
Description: 
	Thursday, August 9, 2018 
10:30am - 11:20am 
@Hamburg 1+2

Talk: State of SELinux in Fedora desktop, modularity and container worlds
Presenters: Amitosh Swain Mahapatra 

Description: This talk aims to address the state of SELinux deployment in Fedora. It discusses the number of packages that have been confined, packages that need to be confined and some suggestions that can be implemented from other projects (like Gentoo hardened). It also aims to discuss the issue with the current SE policy distribution method and how it will affect a modular distribution and containerized apps, flatpaks, AppImage etc.
Captions: 
	00:00:01,879 --> 00:00:10,550
yeah hello everybody and sorry for the

00:00:06,240 --> 00:00:16,049
delay the dhcp is crazy today okay so

00:00:10,550 --> 00:00:17,310
I'm a massage I'm a student at of

00:00:16,049 --> 00:00:19,109
student of computer science engineering

00:00:17,310 --> 00:00:23,580
at College of Engineering and Technology

00:00:19,109 --> 00:00:25,890
of nature India and I am gonna reflect

00:00:23,580 --> 00:00:30,720
something about first the state of

00:00:25,890 --> 00:00:32,250
SELinux in Fedora I try to touch both

00:00:30,720 --> 00:00:36,329
the things that are happening in our

00:00:32,250 --> 00:00:39,329
workstation server as well as the

00:00:36,329 --> 00:00:42,059
container stuff and the new changes that

00:00:39,329 --> 00:00:47,550
are supposed to be done when the new

00:00:42,059 --> 00:00:49,980
modularity stuff is gonna learn so so

00:00:47,550 --> 00:00:52,800
we'll start so before that let's just

00:00:49,980 --> 00:00:55,590
have a little bit of a view about what

00:00:52,800 --> 00:00:58,890
exactly is selinux

00:00:55,590 --> 00:01:01,500
so I hope most of you are familiar with

00:00:58,890 --> 00:01:05,850
this stuff like it's been from it's been

00:01:01,500 --> 00:01:08,369
for ages like when a CD NEX was actually

00:01:05,850 --> 00:01:11,790
introduced I was a small toddler so it

00:01:08,369 --> 00:01:14,430
has been from there so so in sort it's a

00:01:11,790 --> 00:01:17,880
like mandatory access control layer that

00:01:14,430 --> 00:01:20,939
sits above our discretionary user group

00:01:17,880 --> 00:01:24,330
based traditional layer so that we can

00:01:20,939 --> 00:01:27,119
restrict it to even a further level then

00:01:24,330 --> 00:01:32,310
we could do it just simply restricting

00:01:27,119 --> 00:01:37,049
the ownership or the users like ACL

00:01:32,310 --> 00:01:39,180
attributes and we could effectively tell

00:01:37,049 --> 00:01:41,100
that this particular kind of process is

00:01:39,180 --> 00:01:46,350
going to read this particular kinds of

00:01:41,100 --> 00:01:47,729
files or or just exclude to access this

00:01:46,350 --> 00:01:54,110
particular device or something like that

00:01:47,729 --> 00:01:58,619
so this thing is very very powerful and

00:01:54,110 --> 00:02:01,830
also sometimes dangerous because with

00:01:58,619 --> 00:02:11,420
great power comes great responsibility

00:02:01,830 --> 00:02:15,980
so so this is a bit confusing for me

00:02:11,420 --> 00:02:18,780
yeah so selinux basically works with

00:02:15,980 --> 00:02:22,020
something called as in security context

00:02:18,780 --> 00:02:26,010
so there's a context where you have the

00:02:22,020 --> 00:02:28,920
SELinux identity then a role then a type

00:02:26,010 --> 00:02:31,560
and a level so these four parts of the

00:02:28,920 --> 00:02:35,010
context work differently in different

00:02:31,560 --> 00:02:37,440
ways now the user and identity is more

00:02:35,010 --> 00:02:40,890
or less like similar to our traditional

00:02:37,440 --> 00:02:43,110
UNIX users and a role role is something

00:02:40,890 --> 00:02:45,240
that we can employ when we were doing

00:02:43,110 --> 00:02:48,720
some role based access controls using a

00:02:45,240 --> 00:02:51,090
silliness and using the type this type

00:02:48,720 --> 00:02:54,360
is more frequently used in fedora and

00:02:51,090 --> 00:02:56,880
most of us should be aware of this like

00:02:54,360 --> 00:02:59,040
we specify that this particular kind of

00:02:56,880 --> 00:03:02,670
process is not read this particular kind

00:02:59,040 --> 00:03:04,140
of files so and four levels levels is

00:03:02,670 --> 00:03:06,900
mostly used when you are doing a

00:03:04,140 --> 00:03:10,260
multi-level security stuff it's a bit

00:03:06,900 --> 00:03:18,090
advanced I will not be covering m's MLS

00:03:10,260 --> 00:03:19,739
today so this is it yeah so most of the

00:03:18,090 --> 00:03:22,440
time when we start discussing about

00:03:19,739 --> 00:03:24,300
SELinux some of them say that the best

00:03:22,440 --> 00:03:27,870
thing to do is go ahead and just disable

00:03:24,300 --> 00:03:29,790
it I strongly disagree with this because

00:03:27,870 --> 00:03:32,700
if you are doing that we are just

00:03:29,790 --> 00:03:36,870
kicking out this half of the security of

00:03:32,700 --> 00:03:39,239
the system so instead of actually now

00:03:36,870 --> 00:03:41,310
just go ahead and disable it try to fix

00:03:39,239 --> 00:03:43,380
it first what's wrong

00:03:41,310 --> 00:03:47,250
like are you doing something which you

00:03:43,380 --> 00:03:50,640
shouldn't be doing so for that we also

00:03:47,250 --> 00:03:52,709
have tools that will help us like we

00:03:50,640 --> 00:03:55,050
have a deal out we have se trouble suit

00:03:52,709 --> 00:03:58,140
or if it is something that's from your

00:03:55,050 --> 00:04:02,989
system repository please go ahead file a

00:03:58,140 --> 00:04:02,989
bug and our developers will look at it

00:04:04,390 --> 00:04:11,840
now here is what has happened in fedoras

00:04:07,310 --> 00:04:15,500
since SELinux started with Fedora core -

00:04:11,840 --> 00:04:17,840
so it was disabled by default because as

00:04:15,500 --> 00:04:20,540
for the release notes sub problems with

00:04:17,840 --> 00:04:24,139
the core X user experience breaking and

00:04:20,540 --> 00:04:26,330
then in Fedora core 3 there were like

00:04:24,139 --> 00:04:30,040
the implementation of targeted policies

00:04:26,330 --> 00:04:33,139
by starting with unconfined dash T and

00:04:30,040 --> 00:04:37,010
it was enabled on a very small subset of

00:04:33,139 --> 00:04:40,430
applications like SSST and then fc4

00:04:37,010 --> 00:04:45,260
expanded it to 80 policies and including

00:04:40,430 --> 00:04:47,030
apache nginx and all stuff then in fc5

00:04:45,260 --> 00:04:48,590
there was a de beautÃ© about multi

00:04:47,030 --> 00:04:49,240
category security and multi-level

00:04:48,590 --> 00:04:54,440
security

00:04:49,240 --> 00:04:58,220
it that time it was a bit complex but in

00:04:54,440 --> 00:05:00,740
today the scenario has improved and MCS

00:04:58,220 --> 00:05:03,260
and MLS as we will see will be

00:05:00,740 --> 00:05:04,729
implementing in our containerization

00:05:03,260 --> 00:05:07,760
systems so that to segregate different

00:05:04,729 --> 00:05:10,190
containers so that thing was probably

00:05:07,760 --> 00:05:14,180
not used much back then but now it is

00:05:10,190 --> 00:05:17,750
now it is been used then fc7 brought us

00:05:14,180 --> 00:05:21,320
the SE troubleshoot utility so something

00:05:17,750 --> 00:05:23,979
is wrong we get that GUI application and

00:05:21,320 --> 00:05:27,050
the list of things that is going on and

00:05:23,979 --> 00:05:31,910
also we had other tools at that time and

00:05:27,050 --> 00:05:34,580
then FC 10 brought a subset of the

00:05:31,910 --> 00:05:37,669
selinux policies that we were invented

00:05:34,580 --> 00:05:40,250
in fedora it's known as SC policy

00:05:37,669 --> 00:05:43,900
minimum it just had the rules and a

00:05:40,250 --> 00:05:46,400
single target called undone fine - t and

00:05:43,900 --> 00:05:49,039
upper subset that we come that is

00:05:46,400 --> 00:05:51,800
installed by default has all other 80

00:05:49,039 --> 00:05:54,020
and 100 policies so basically this was

00:05:51,800 --> 00:05:57,200
meant to be a starting point on which we

00:05:54,020 --> 00:06:02,660
could build our own policies for our

00:05:57,200 --> 00:06:06,580
custom applications and now somewhere

00:06:02,660 --> 00:06:10,820
around 15 and 16 selinux policies were

00:06:06,580 --> 00:06:12,830
decoupled from a large gigantic RPM into

00:06:10,820 --> 00:06:16,280
smaller packages that we are moving

00:06:12,830 --> 00:06:17,780
closer to code because having the

00:06:16,280 --> 00:06:20,389
policies closer to court

00:06:17,780 --> 00:06:21,920
is better for us to debug what's wrong

00:06:20,389 --> 00:06:23,270
with this policy like it is better for

00:06:21,920 --> 00:06:25,670
the QA it's better for the release

00:06:23,270 --> 00:06:29,330
engineering so and also we could also

00:06:25,670 --> 00:06:35,030
gather help from the upstream so that

00:06:29,330 --> 00:06:39,080
was done and now SELinux thing is having

00:06:35,030 --> 00:06:41,930
in Fedora is how is modularity gonna

00:06:39,080 --> 00:06:49,730
implement the implementation of SELinux

00:06:41,930 --> 00:06:53,270
in our ecosystem so so right now the

00:06:49,730 --> 00:06:58,270
state of SD Nexus we have almost covered

00:06:53,270 --> 00:07:01,270
all the core stuff like sshd like

00:06:58,270 --> 00:07:04,640
application servers that come with

00:07:01,270 --> 00:07:08,150
fedora Brian stopped by by out of the

00:07:04,640 --> 00:07:11,630
box as well as services of system D they

00:07:08,150 --> 00:07:13,280
are all covered with SC Linux then many

00:07:11,630 --> 00:07:16,370
of the applications that are available

00:07:13,280 --> 00:07:19,160
on the repositories have some policies

00:07:16,370 --> 00:07:21,740
confining have some policies guarding it

00:07:19,160 --> 00:07:24,229
against misuse like our database servers

00:07:21,740 --> 00:07:29,330
a web servers they all have dedicated

00:07:24,229 --> 00:07:33,320
policies in Linux packages and then what

00:07:29,330 --> 00:07:37,970
we should be doing is like making the AC

00:07:33,320 --> 00:07:40,220
Linux cover almost we should be able to

00:07:37,970 --> 00:07:42,590
cover our flat packs we should be able

00:07:40,220 --> 00:07:45,350
to cover containers we should be able to

00:07:42,590 --> 00:07:47,300
cover use a label and user facing

00:07:45,350 --> 00:07:49,700
applications that we are having

00:07:47,300 --> 00:07:52,610
let's take Firefox for example we should

00:07:49,700 --> 00:07:54,850
be able to cover that also and it should

00:07:52,610 --> 00:07:54,850
also

00:07:56,600 --> 00:08:03,030
yeah it should also be easier for a

00:07:59,570 --> 00:08:06,720
normal software developer like who one

00:08:03,030 --> 00:08:08,520
of us are writing code and going and

00:08:06,720 --> 00:08:11,280
publishing it on our own servers so that

00:08:08,520 --> 00:08:13,199
we could also easily secure it using sed

00:08:11,280 --> 00:08:16,050
next instead of writing a lot of complex

00:08:13,199 --> 00:08:18,229
tools that is what I think should be the

00:08:16,050 --> 00:08:24,180
future of SELinux in fedora

00:08:18,229 --> 00:08:29,040
now now in containers we already have a

00:08:24,180 --> 00:08:32,520
system of safeguarding Dockers using

00:08:29,040 --> 00:08:35,820
SELinux now docker by default has a

00:08:32,520 --> 00:08:39,390
SELinux policy this was inspired by live

00:08:35,820 --> 00:08:41,880
vert SELinux policy and in this every

00:08:39,390 --> 00:08:43,800
docker containers gets access to all

00:08:41,880 --> 00:08:47,220
files that are under slash user and

00:08:43,800 --> 00:08:50,640
slash EDC as well as any file that are

00:08:47,220 --> 00:08:53,640
leveled as docker - tea or a sweet

00:08:50,640 --> 00:08:56,640
sandbox file - tea are also accessible

00:08:53,640 --> 00:09:00,120
now if I want to do some separation

00:08:56,640 --> 00:09:01,650
between my containers like one container

00:09:00,120 --> 00:09:04,440
or another container should not be able

00:09:01,650 --> 00:09:08,810
to interact in any other way I need to

00:09:04,440 --> 00:09:12,959
implement MCS multi category six top now

00:09:08,810 --> 00:09:15,900
this is currently opt-in in the package

00:09:12,959 --> 00:09:17,370
that's available in fedora and the

00:09:15,900 --> 00:09:21,029
package that is available drill and

00:09:17,370 --> 00:09:24,810
CentOS as well and this is used by the

00:09:21,029 --> 00:09:27,089
core OS team and the rkt runtime they

00:09:24,810 --> 00:09:32,160
use and they separate the containers

00:09:27,089 --> 00:09:35,130
together so this is something that I

00:09:32,160 --> 00:09:38,610
think we should also work on like we

00:09:35,130 --> 00:09:43,279
should bring MCS by default and make it

00:09:38,610 --> 00:09:43,279
opt out rather than having it optin

00:09:44,550 --> 00:09:52,230
and then other containers like as I just

00:09:49,260 --> 00:09:56,160
said or OS and rkt the employers similar

00:09:52,230 --> 00:09:58,440
security model using MCS and flat axe

00:09:56,160 --> 00:10:00,720
they don't currently use SELinux

00:09:58,440 --> 00:10:02,399
but it would be good if they used so

00:10:00,720 --> 00:10:04,950
that we could provide more security

00:10:02,399 --> 00:10:08,190
against applications breaking out of the

00:10:04,950 --> 00:10:10,709
sandbox that we create so that would be

00:10:08,190 --> 00:10:13,140
something it may or may not be possible

00:10:10,709 --> 00:10:15,570
in all cases like user facing

00:10:13,140 --> 00:10:18,510
applications that need to access files

00:10:15,570 --> 00:10:20,490
from the home directory but we should

00:10:18,510 --> 00:10:22,230
look at it like if some application

00:10:20,490 --> 00:10:24,420
doesn't really need anything to do with

00:10:22,230 --> 00:10:26,370
the home or any files you could just

00:10:24,420 --> 00:10:29,790
confine it on SELinux dome and keep it

00:10:26,370 --> 00:10:35,430
totally separate so that's something

00:10:29,790 --> 00:10:38,520
that we can look at then then then comes

00:10:35,430 --> 00:10:42,300
this modularity that's the new thing

00:10:38,520 --> 00:10:45,480
that's coming up now modularity makes

00:10:42,300 --> 00:10:49,230
promises of having multiple applications

00:10:45,480 --> 00:10:55,140
in the repo available now it has its own

00:10:49,230 --> 00:10:59,190
problems and own own own stuff that we

00:10:55,140 --> 00:11:01,950
need to handle now traditionally all our

00:10:59,190 --> 00:11:04,709
packages where all our SELinux policies

00:11:01,950 --> 00:11:06,779
are under a single policy we just in DNF

00:11:04,709 --> 00:11:11,520
install selinux policy we get all the

00:11:06,779 --> 00:11:13,520
policies now what if we use a software

00:11:11,520 --> 00:11:16,500
that's having a radically different

00:11:13,520 --> 00:11:19,560
selinux policy in the next person how

00:11:16,500 --> 00:11:22,350
are you supposed to manage it now from

00:11:19,560 --> 00:11:25,170
that we have been in this going in this

00:11:22,350 --> 00:11:29,190
direction and pulling all the policies

00:11:25,170 --> 00:11:31,020
together as the code like the code as

00:11:29,190 --> 00:11:33,779
well as the policies as staying at the

00:11:31,020 --> 00:11:36,270
same place but this hasn't been

00:11:33,779 --> 00:11:41,459
completely going to eradicate the

00:11:36,270 --> 00:11:43,589
problem with modularity now if if there

00:11:41,459 --> 00:11:46,620
is is this possibility of running two

00:11:43,589 --> 00:11:48,440
software together or running two

00:11:46,620 --> 00:11:53,520
software at two different times and we

00:11:48,440 --> 00:11:56,490
do not wish to have access of something

00:11:53,520 --> 00:11:57,930
that runs on version one as well as

00:11:56,490 --> 00:12:00,330
version two

00:11:57,930 --> 00:12:03,630
that's a challenge how do we include

00:12:00,330 --> 00:12:05,490
some kind of name spacing sed next

00:12:03,630 --> 00:12:08,910
policies now selinux

00:12:05,490 --> 00:12:11,850
is global by default now if I have nginx

00:12:08,910 --> 00:12:14,850
- t like if it is common for all

00:12:11,850 --> 00:12:17,520
versions now one thing that we could

00:12:14,850 --> 00:12:22,380
probably do is have something like nginx

00:12:17,520 --> 00:12:26,430
- 1.8 - T and nginx - 1 point nginx - 2

00:12:22,380 --> 00:12:29,670
- T but then this will also lead to

00:12:26,430 --> 00:12:31,230
duplication of effort and sometimes it

00:12:29,670 --> 00:12:33,060
can be overwhelming for the

00:12:31,230 --> 00:12:35,670
administrators to actually manage this

00:12:33,060 --> 00:12:38,820
so probably you would have something

00:12:35,670 --> 00:12:41,790
like a meta tool that just reads from

00:12:38,820 --> 00:12:45,089
the RPM spec generates a policy at the

00:12:41,790 --> 00:12:47,100
runtime then applies it when our RPM is

00:12:45,089 --> 00:12:50,430
installed that could be one of the

00:12:47,100 --> 00:12:55,490
solution to this or else we could even

00:12:50,430 --> 00:12:58,110
write something that completely

00:12:55,490 --> 00:12:59,700
generates a policy at the runtime like

00:12:58,110 --> 00:13:05,400
we could have a separate meta language

00:12:59,700 --> 00:13:07,560
that generates a policy and it could

00:13:05,400 --> 00:13:10,140
have something like nginx common or

00:13:07,560 --> 00:13:11,910
nginx 1.2 something like an inheritance

00:13:10,140 --> 00:13:14,459
based model in which we will be just

00:13:11,910 --> 00:13:20,339
layering the changes over so that's one

00:13:14,459 --> 00:13:22,560
solution that we can have it here then I

00:13:20,339 --> 00:13:25,880
also have some general suggestions to

00:13:22,560 --> 00:13:28,589
the developers and the SELinux team

00:13:25,880 --> 00:13:30,660
there are there are other efforts in

00:13:28,589 --> 00:13:33,870
other communities like again to harden

00:13:30,660 --> 00:13:36,630
that is one thing that I need to notify

00:13:33,870 --> 00:13:38,750
they have a lot of proof of concept

00:13:36,630 --> 00:13:41,760
regarding

00:13:38,750 --> 00:13:44,700
confining userspace applications like

00:13:41,760 --> 00:13:48,600
one that I was researching was about

00:13:44,700 --> 00:13:50,730
confining Firefox like it had this LNS

00:13:48,600 --> 00:13:53,450
it had his issues but it is a great step

00:13:50,730 --> 00:13:56,730
forward if we move that way like we can

00:13:53,450 --> 00:13:59,130
we can some way say that users like the

00:13:56,730 --> 00:14:01,290
firefox browser isn't not gonna read my

00:13:59,130 --> 00:14:04,440
sss private key so I am going to exclude

00:14:01,290 --> 00:14:07,829
it but if a user is actually wanting

00:14:04,440 --> 00:14:08,720
then we could just bring them and add it

00:14:07,829 --> 00:14:13,939
to

00:14:08,720 --> 00:14:16,759
and then we also need some more tools to

00:14:13,939 --> 00:14:19,670
help application developers can find

00:14:16,759 --> 00:14:22,550
them so that we could reap the benefits

00:14:19,670 --> 00:14:26,360
of SELinux when we were deploying our

00:14:22,550 --> 00:14:29,720
own custom in-house applications the

00:14:26,360 --> 00:14:34,610
current workflow for generating SELinux

00:14:29,720 --> 00:14:37,160
is complicated you need to write three

00:14:34,610 --> 00:14:39,529
sort of files then compile it so that's

00:14:37,160 --> 00:14:42,920
not something that every one of us is

00:14:39,529 --> 00:14:46,730
willing to do every day so that's one

00:14:42,920 --> 00:14:50,329
more suggestion from me and there have

00:14:46,730 --> 00:14:52,730
been this concern in users like everyone

00:14:50,329 --> 00:14:55,129
just comes me and and tells key just

00:14:52,730 --> 00:14:57,920
disable it so why do we do that like

00:14:55,129 --> 00:15:01,129
they say that this is complicated which

00:14:57,920 --> 00:15:05,329
to some but I agree they say that this

00:15:01,129 --> 00:15:08,420
is this is buggy but which is not so we

00:15:05,329 --> 00:15:11,209
also need to do some kind of marketing

00:15:08,420 --> 00:15:13,430
so that silliness is actually the

00:15:11,209 --> 00:15:20,750
benefits is actually going to reach the

00:15:13,430 --> 00:15:22,850
people who are developing software yeah

00:15:20,750 --> 00:15:25,970
we know so we need to fix that also

00:15:22,850 --> 00:15:27,860
that's it like if we if the developers

00:15:25,970 --> 00:15:30,829
will complain that the policy is buggy

00:15:27,860 --> 00:15:32,360
like they just instead of telling that

00:15:30,829 --> 00:15:35,019
the police is buggy they could just go

00:15:32,360 --> 00:15:35,019
ahead file a ticket

00:15:37,410 --> 00:15:43,649
yeah that is also that's also some

00:15:41,429 --> 00:15:46,049
policies are buggy but that was like 10

00:15:43,649 --> 00:15:47,849
years back like policies have changed

00:15:46,049 --> 00:15:51,209
like I have been using fedora since

00:15:47,849 --> 00:15:54,169
hitter of 15 now I have seen policies

00:15:51,209 --> 00:15:56,339
that are buggy that were totally

00:15:54,169 --> 00:15:58,769
restricting applications to start but

00:15:56,339 --> 00:16:20,989
now there is no such issue in that

00:15:58,769 --> 00:16:23,939
policies have been fixed so that's was

00:16:20,989 --> 00:16:26,249
like if you are talking about policy

00:16:23,939 --> 00:16:28,259
drifting when our like destroy

00:16:26,249 --> 00:16:30,959
maintenance writer policy and off stream

00:16:28,259 --> 00:16:33,720
isn't aware of it so that's what I'm

00:16:30,959 --> 00:16:35,970
suggesting is bring the policy closer to

00:16:33,720 --> 00:16:37,889
the code like try to contribute the

00:16:35,970 --> 00:16:40,859
policy changes back to the upstream so

00:16:37,889 --> 00:16:42,809
that upstream also knows something has

00:16:40,859 --> 00:16:46,879
been written in some distro that can

00:16:42,809 --> 00:16:46,879
cause problems with yeah

00:16:47,359 --> 00:16:52,619
something whoa it's way louder even when

00:16:50,189 --> 00:16:55,049
I'm talking normally something that I've

00:16:52,619 --> 00:16:57,209
often seen is that a lot of the either

00:16:55,049 --> 00:17:00,959
SELinux are you know this guy's armor

00:16:57,209 --> 00:17:02,579
policies you know the the problem is the

00:17:00,959 --> 00:17:05,159
policies get written over and over and

00:17:02,579 --> 00:17:07,049
over again by different people and at no

00:17:05,159 --> 00:17:09,269
point does anybody realize that you know

00:17:07,049 --> 00:17:11,189
maybe it should go to the main project

00:17:09,269 --> 00:17:13,759
like even right now with the SE links

00:17:11,189 --> 00:17:16,319
policy and fedora being decomposed into

00:17:13,759 --> 00:17:19,139
into the mod into the packages for the

00:17:16,319 --> 00:17:21,240
software nobody has actually considered

00:17:19,139 --> 00:17:23,490
just putting it in with the package that

00:17:21,240 --> 00:17:24,899
actually has the software there being

00:17:23,490 --> 00:17:26,939
separate packages and still being

00:17:24,899 --> 00:17:28,529
version independently that keeps it

00:17:26,939 --> 00:17:32,059
makes it very difficult to do that kind

00:17:28,529 --> 00:17:32,059
of you know work you're suggesting

00:17:34,960 --> 00:17:43,040
yeah so that is also a major concern

00:17:38,690 --> 00:17:46,130
among this selinux community like we are

00:17:43,040 --> 00:17:47,840
not contributing our changes back to the

00:17:46,130 --> 00:17:51,350
upstream that is something we should

00:17:47,840 --> 00:17:54,320
really start so upstream should know

00:17:51,350 --> 00:17:58,670
that there is some policy somewhere yeah

00:17:54,320 --> 00:18:00,440
and also this could also foster the

00:17:58,670 --> 00:18:03,350
collaboration between different distros

00:18:00,440 --> 00:18:05,480
like fedora we consider that it's a gold

00:18:03,350 --> 00:18:08,600
standard for SELinux and but if

00:18:05,480 --> 00:18:11,930
different distros are going to actually

00:18:08,600 --> 00:18:14,480
implement SELinux in them so they should

00:18:11,930 --> 00:18:16,160
also know what policies we are doing so

00:18:14,480 --> 00:18:17,780
if we contribute it to back it's

00:18:16,160 --> 00:18:21,740
something that are giving back to a

00:18:17,780 --> 00:18:24,910
broader community even more people can

00:18:21,740 --> 00:18:27,680
go ahead and find bugs with the policy

00:18:24,910 --> 00:18:29,390
harden the policy like the more the

00:18:27,680 --> 00:18:30,980
people the more effort that we get and

00:18:29,390 --> 00:18:33,380
the more better result that will be

00:18:30,980 --> 00:18:37,700
going to get at the end of the day so

00:18:33,380 --> 00:18:43,870
these are the 3 and +1 4 main

00:18:37,700 --> 00:18:43,870
suggestions that we came up so like yeah

00:18:44,770 --> 00:18:51,800
I'm sorry so I have one more question I

00:18:49,820 --> 00:18:53,900
don't know what's the status of this

00:18:51,800 --> 00:18:57,530
right now about a couple of years ago

00:18:53,900 --> 00:18:59,150
there was a problem with the policy

00:18:57,530 --> 00:19:00,800
being monolithic and it basically can

00:18:59,150 --> 00:19:03,260
only be updated monolithically

00:19:00,800 --> 00:19:05,030
so there was an attempt to basically be

00:19:03,260 --> 00:19:07,010
able to split it up but it basically

00:19:05,030 --> 00:19:10,700
required updating the packages that

00:19:07,010 --> 00:19:13,430
would contain the sub policies at once

00:19:10,700 --> 00:19:16,430
and then rebuilt a policy

00:19:13,430 --> 00:19:18,470
one time only but that didn't work out

00:19:16,430 --> 00:19:20,180
and we threw that feature out of our

00:19:18,470 --> 00:19:23,690
p.m. again so I'm wondering what's the

00:19:20,180 --> 00:19:26,990
status there is as a Linux fixed so it

00:19:23,690 --> 00:19:29,990
can actually update the policy in

00:19:26,990 --> 00:19:31,580
reasonability time step by step or do

00:19:29,990 --> 00:19:34,250
you still have to put everything in one

00:19:31,580 --> 00:19:38,120
big package and update it monolithically

00:19:34,250 --> 00:19:40,700
can you comment on that please so some

00:19:38,120 --> 00:19:44,480
of the packages have decoupled their

00:19:40,700 --> 00:19:48,050
policies from our main policy rpm and

00:19:44,480 --> 00:19:50,630
put it like like like we have this

00:19:48,050 --> 00:19:54,230
docker SC Linux like there are other

00:19:50,630 --> 00:19:56,120
packages like MySQL SC Linux married ABS

00:19:54,230 --> 00:19:58,490
index there are packages like that so

00:19:56,120 --> 00:20:02,690
this has been done for some of the

00:19:58,490 --> 00:20:04,820
packages but like mostly many many of

00:20:02,690 --> 00:20:07,390
the rules are still in a monolithic rule

00:20:04,820 --> 00:20:12,200
like that still has not been completed

00:20:07,390 --> 00:20:15,350
now which the modularity I think it must

00:20:12,200 --> 00:20:17,840
be done so there is there is no other

00:20:15,350 --> 00:20:20,540
way around it like we have to go and

00:20:17,840 --> 00:20:21,140
decouple the couple's the modules that

00:20:20,540 --> 00:20:27,490
you're having

00:20:21,140 --> 00:20:27,490
yesterday next any other questions

00:20:31,090 --> 00:20:36,129
I I have a question about Jane to her

00:20:33,940 --> 00:20:38,379
heart and do you know if Jane Doe was

00:20:36,129 --> 00:20:43,179
able to can confine fire Firefox after

00:20:38,379 --> 00:20:45,759
all the question is whether Jane to was

00:20:43,179 --> 00:20:50,710
about to harden firefox after all

00:20:45,759 --> 00:20:53,440
so yeah confine okay so they did a POC

00:20:50,710 --> 00:20:56,710
on that so that they were able to

00:20:53,440 --> 00:20:59,830
confine the Cisco's that Firefox was

00:20:56,710 --> 00:21:04,029
going to make and folders that the

00:20:59,830 --> 00:21:07,840
Firefox was able to read now this is

00:21:04,029 --> 00:21:09,879
something that will work but the user

00:21:07,840 --> 00:21:12,639
needs to be told about that hey we are

00:21:09,879 --> 00:21:16,929
not allowing the Firefox to go and read

00:21:12,639 --> 00:21:18,759
a directory from your home or your you

00:21:16,929 --> 00:21:20,710
are not allowing Firefox to just write

00:21:18,759 --> 00:21:22,629
it at re locations like we have

00:21:20,710 --> 00:21:25,539
extensions and plugins like the

00:21:22,629 --> 00:21:29,049
experiment when they did Firefox was

00:21:25,539 --> 00:21:31,480
allowing our xpcom plugins and which had

00:21:29,049 --> 00:21:34,360
basically unrestricted access to

00:21:31,480 --> 00:21:37,330
everything so in that time it broke a

00:21:34,360 --> 00:21:39,850
lot of such plugins but right now

00:21:37,330 --> 00:21:42,759
Firefox itself is having some kind of

00:21:39,850 --> 00:21:45,399
confinement so if we attempt to do that

00:21:42,759 --> 00:21:48,610
confinement right now we will be able to

00:21:45,399 --> 00:21:51,549
mount of success then what they do so

00:21:48,610 --> 00:21:54,840
they were able to restrict file uploads

00:21:51,549 --> 00:21:58,960
file downloads in work invocation of

00:21:54,840 --> 00:22:01,779
arbitrary commands from the plug-ins

00:21:58,960 --> 00:22:04,529
that are installed and also they were

00:22:01,779 --> 00:22:07,950
able to restrict what dll's or what

00:22:04,529 --> 00:22:11,110
libraries were loaded by the plugins and

00:22:07,950 --> 00:22:12,879
also by the different extensions of

00:22:11,110 --> 00:22:17,559
Firefox they were able to do this and

00:22:12,879 --> 00:22:20,049
after that experiment we also have many

00:22:17,559 --> 00:22:23,590
changes since Linux policies in Fedora

00:22:20,049 --> 00:22:27,039
like we are having some confinement

00:22:23,590 --> 00:22:29,799
rules along the policies like many of

00:22:27,039 --> 00:22:31,720
the policies like some one most notable

00:22:29,799 --> 00:22:33,879
one that I will say is confining the

00:22:31,720 --> 00:22:36,159
Flash plugin so that it didn't do much

00:22:33,879 --> 00:22:38,880
damage so that is something that has

00:22:36,159 --> 00:22:41,830
been done in Federer also

00:22:38,880 --> 00:22:44,770
III have creakin comments on that so

00:22:41,830 --> 00:22:46,630
Steve grab a load of blog on confining

00:22:44,770 --> 00:22:49,390
Firefox writing a couple of years back

00:22:46,630 --> 00:22:51,070
and he basically concluded that you know

00:22:49,390 --> 00:22:53,650
it's it's really difficult to confine

00:22:51,070 --> 00:22:55,480
Firefox because modern-day bla bla sirs

00:22:53,650 --> 00:22:57,820
are like there are many operating

00:22:55,480 --> 00:23:00,250
systems they have media plugins and they

00:22:57,820 --> 00:23:02,440
have they had they have so many things

00:23:00,250 --> 00:23:04,060
like if you look at Firefox code or if

00:23:02,440 --> 00:23:06,490
you look at chrome chrome chromium code

00:23:04,060 --> 00:23:08,770
it's it's really it really embeds so so

00:23:06,490 --> 00:23:11,230
many things but that's one that's that's

00:23:08,770 --> 00:23:12,550
that that is something which which which

00:23:11,230 --> 00:23:15,310
makes it very difficult to confine

00:23:12,550 --> 00:23:17,770
Firefox the second problem over your as

00:23:15,310 --> 00:23:20,290
a Salinas is more about you know by

00:23:17,770 --> 00:23:21,610
default everything is closed so if you

00:23:20,290 --> 00:23:23,440
have a if you write in is easily next

00:23:21,610 --> 00:23:25,240
policy around Adam and then by default

00:23:23,440 --> 00:23:27,190
everything is restricted so you need to

00:23:25,240 --> 00:23:28,810
write a policy which will open up the

00:23:27,190 --> 00:23:31,180
restriction for each of the individual

00:23:28,810 --> 00:23:33,190
things like processes or files or

00:23:31,180 --> 00:23:35,380
whatever that's that that makes it very

00:23:33,190 --> 00:23:36,880
difficult to confine Firefox I I think

00:23:35,380 --> 00:23:39,490
there is still some war going on over

00:23:36,880 --> 00:23:41,320
your but it's user space applications

00:23:39,490 --> 00:23:42,790
like Firefox and LibreOffice and stuff

00:23:41,320 --> 00:23:46,750
like that it's going to it's going to be

00:23:42,790 --> 00:23:49,330
really difficult it's certainly going to

00:23:46,750 --> 00:23:52,360
be difficult but if it is difficult but

00:23:49,330 --> 00:23:54,580
it's still not impossible right so we

00:23:52,360 --> 00:23:57,990
need to improve both SELinux as well as

00:23:54,580 --> 00:23:57,990
Firefox to reach them

00:24:09,780 --> 00:24:16,110
so to the point about Firefox not being

00:24:12,900 --> 00:24:18,480
able to be confined actually it's easier

00:24:16,110 --> 00:24:21,600
now than it was before because plugins

00:24:18,480 --> 00:24:23,070
are gone as of the latest couple of

00:24:21,600 --> 00:24:25,350
Firefox releases at least in the Fodor

00:24:23,070 --> 00:24:26,970
case like if you're in old stable and

00:24:25,350 --> 00:24:28,830
this is you're still synapse kinda

00:24:26,970 --> 00:24:30,810
screwed but if you're using the latest

00:24:28,830 --> 00:24:32,910
Firefox releases you don't really have

00:24:30,810 --> 00:24:36,720
plugins anymore they don't work and XP u

00:24:32,910 --> 00:24:38,970
XB com extensions are gone and the

00:24:36,720 --> 00:24:41,100
sandbox is actually fairly simple it's a

00:24:38,970 --> 00:24:42,990
simple set comp filter and so you can

00:24:41,100 --> 00:24:46,590
overlay ascii links pretty easily on top

00:24:42,990 --> 00:24:49,590
of it if you really wanted to the main

00:24:46,590 --> 00:24:51,630
issue is of course that we can't keep up

00:24:49,590 --> 00:24:53,970
with Firefox as cadence so if we really

00:24:51,630 --> 00:24:56,340
wanted to do it we need to actually send

00:24:53,970 --> 00:24:58,740
the Mozilla policy we wrote a decade ago

00:24:56,340 --> 00:25:00,090
to Firefox upstream and have it

00:24:58,740 --> 00:25:02,010
maintained as part of that and actually

00:25:00,090 --> 00:25:04,560
assist them in plugging in with CI and

00:25:02,010 --> 00:25:07,980
you know from my own experience with

00:25:04,560 --> 00:25:11,160
snap D I wrote the assyrians policy for

00:25:07,980 --> 00:25:14,340
snap D very painfully bit by bit over

00:25:11,160 --> 00:25:16,910
like a year and that is actually

00:25:14,340 --> 00:25:19,980
integrated into the snap craft CI and

00:25:16,910 --> 00:25:23,280
every time everything breaks he has to

00:25:19,980 --> 00:25:24,420
fix it or I have to fix it but yeah but

00:25:23,280 --> 00:25:26,550
it's upstream and part of the project

00:25:24,420 --> 00:25:27,840
and it's actually a gate and that's the

00:25:26,550 --> 00:25:30,540
important factor now that people

00:25:27,840 --> 00:25:32,280
consider CIN CD part of the story it

00:25:30,540 --> 00:25:34,440
actually makes it much easier to plug in

00:25:32,280 --> 00:25:36,570
things like selinux into that into that

00:25:34,440 --> 00:25:38,250
model and the thing is the way I've seen

00:25:36,570 --> 00:25:41,520
the SE Lewis team currently approaching

00:25:38,250 --> 00:25:43,110
the selinux decomposition they're not

00:25:41,520 --> 00:25:45,090
thinking about it that way and that

00:25:43,110 --> 00:25:46,530
actually worries me because even the

00:25:45,090 --> 00:25:47,700
Debian guys with app armor are actually

00:25:46,530 --> 00:25:49,530
not thinking about it that way either

00:25:47,700 --> 00:25:51,210
and that scares me because nobody is

00:25:49,530 --> 00:25:54,740
thinking about it that way and that

00:25:51,210 --> 00:25:54,740
makes the drift all the more painful

00:25:54,820 --> 00:25:59,660
are there any AC Linux developers out

00:25:57,320 --> 00:26:04,179
here like those are totally associated

00:25:59,660 --> 00:26:04,179
with federal court as a Linux

00:26:05,630 --> 00:26:18,020
yeah that's an issue yeah they're needed

00:26:14,120 --> 00:26:19,100
flock also so we need to somehow convey

00:26:18,020 --> 00:26:23,809
this message to them

00:26:19,100 --> 00:26:25,820
that's is important yeah maybe as an

00:26:23,809 --> 00:26:27,710
observation from to cross the pond so

00:26:25,820 --> 00:26:29,330
with a partner we've been having the

00:26:27,710 --> 00:26:30,860
same story we start with just like let's

00:26:29,330 --> 00:26:32,330
write some policy for some important

00:26:30,860 --> 00:26:34,309
software server firefox and bunch of

00:26:32,330 --> 00:26:35,539
other stuff and we got some progress and

00:26:34,309 --> 00:26:36,980
then we wanted to have more and more

00:26:35,539 --> 00:26:39,289
apps and we essentially had the same

00:26:36,980 --> 00:26:41,299
approach a single monolithic package

00:26:39,289 --> 00:26:43,100
shipping all the policies that just

00:26:41,299 --> 00:26:46,130
didn't work much because it kept

00:26:43,100 --> 00:26:49,309
drifting we started raking it up but

00:26:46,130 --> 00:26:51,470
most projects don't really take the

00:26:49,309 --> 00:26:53,150
packages like if we actually go and

00:26:51,470 --> 00:26:55,190
submit the patches they you don't

00:26:53,150 --> 00:26:58,010
understand this it's not like they don't

00:26:55,190 --> 00:26:59,570
want to but for them it's well I'm not

00:26:58,010 --> 00:27:02,090
running on something that actually can

00:26:59,570 --> 00:27:03,890
use this LSM so I cannot really test

00:27:02,090 --> 00:27:05,330
this I don't really understand how this

00:27:03,890 --> 00:27:07,429
works so I'm not willing to take the

00:27:05,330 --> 00:27:08,990
patch so the problem is not only just of

00:27:07,429 --> 00:27:11,750
streaming but actually teaching up

00:27:08,990 --> 00:27:13,909
streams about how the LSM actually works

00:27:11,750 --> 00:27:21,020
how do you actually develop with it and

00:27:13,909 --> 00:27:24,620
it's not easy why okay so this we didn't

00:27:21,020 --> 00:27:27,440
I hope it's not so we didn't have this

00:27:24,620 --> 00:27:30,530
success here on the other hand one thing

00:27:27,440 --> 00:27:32,510
that did work very well click packages

00:27:30,530 --> 00:27:34,250
the precursor for snaps were also

00:27:32,510 --> 00:27:36,620
confined with up armor and the policy

00:27:34,250 --> 00:27:39,049
was written by a security expert who

00:27:36,620 --> 00:27:41,750
looked at every specific package and

00:27:39,049 --> 00:27:43,850
didn't scale obviously we stopped doing

00:27:41,750 --> 00:27:45,770
that and instead in snaps we don't have

00:27:43,850 --> 00:27:47,950
that there's one policy for every

00:27:45,770 --> 00:27:50,870
application and then we RF snippets that

00:27:47,950 --> 00:27:53,179
you know do well define things so an app

00:27:50,870 --> 00:27:55,190
developer who wants to write a RSS

00:27:53,179 --> 00:27:57,260
reader doesn't need to understand you

00:27:55,190 --> 00:27:58,880
know all of LSMs they just need to say I

00:27:57,260 --> 00:28:00,590
would like to have access to the network

00:27:58,880 --> 00:28:02,240
and the display system so I have a

00:28:00,590 --> 00:28:03,710
desktop application and that's much

00:28:02,240 --> 00:28:05,270
easier language and we found a much

00:28:03,710 --> 00:28:07,039
better traction because then they

00:28:05,270 --> 00:28:08,929
actually say ok I'm willing to take this

00:28:07,039 --> 00:28:10,789
that I want to have network and I want

00:28:08,929 --> 00:28:12,289
to talk to the display system but I'm

00:28:10,789 --> 00:28:14,030
not willing to take the whole big

00:28:12,289 --> 00:28:16,100
complex thing that it really compiles

00:28:14,030 --> 00:28:17,690
into so just maybe having an

00:28:16,100 --> 00:28:19,160
intermediate language it is much easier

00:28:17,690 --> 00:28:21,050
to work with

00:28:19,160 --> 00:28:24,850
you know could be a like a starting

00:28:21,050 --> 00:28:24,850
point for upstreaming

00:28:28,410 --> 00:28:37,860
I mean so to kind of riff off of Zygmunt

00:28:35,130 --> 00:28:40,200
point here one of the things that

00:28:37,860 --> 00:28:41,910
actually like I'm not an selinux team

00:28:40,200 --> 00:28:43,260
person or whatever but like I watched

00:28:41,910 --> 00:28:44,490
all that stuff very closely one of the

00:28:43,260 --> 00:28:46,890
things that actually happened two years

00:28:44,490 --> 00:28:49,920
ago was that SELinux gained the ability

00:28:46,890 --> 00:28:53,100
for you to write another language to

00:28:49,920 --> 00:28:54,390
describe how policy works and so one of

00:28:53,100 --> 00:28:57,300
the things that could happen is that

00:28:54,390 --> 00:28:59,700
somebody like the major policies the

00:28:57,300 --> 00:29:02,640
LSMs both app armor and SELinux could

00:28:59,700 --> 00:29:05,270
actually decide what a common high-level

00:29:02,640 --> 00:29:07,560
description of what that stuff should be

00:29:05,270 --> 00:29:09,570
so that upstreams could actually

00:29:07,560 --> 00:29:11,910
maintain descriptions of what those do

00:29:09,570 --> 00:29:13,290
and translate into the similar mechanism

00:29:11,910 --> 00:29:14,550
that you know snaps do with the

00:29:13,290 --> 00:29:17,250
well-defined snippets and whatnot

00:29:14,550 --> 00:29:19,820
because the I the concepts of what they

00:29:17,250 --> 00:29:23,220
what they restrict or allow is

00:29:19,820 --> 00:29:24,780
relatively easy to map conceptually the

00:29:23,220 --> 00:29:30,510
difficulty is actually making it so that

00:29:24,780 --> 00:29:33,260
they actually are implemented regarding

00:29:30,510 --> 00:29:37,290
this point I can think of an example

00:29:33,260 --> 00:29:39,600
like we also have SELinux in android

00:29:37,290 --> 00:29:42,600
now the SELinux policies for a

00:29:39,600 --> 00:29:44,820
particular app is like the restriction

00:29:42,600 --> 00:29:48,030
of the application in Android is both

00:29:44,820 --> 00:29:50,730
like the JDK Security Manager as well as

00:29:48,030 --> 00:29:54,240
whatever rules we supply in the manifest

00:29:50,730 --> 00:29:57,900
is translated in some form in 2's linux

00:29:54,240 --> 00:30:00,210
rules so that is one example that I can

00:29:57,900 --> 00:30:03,710
think of regarding to this like if we

00:30:00,210 --> 00:30:09,900
could have an XML or some other DSL and

00:30:03,710 --> 00:30:12,240
write make the definitely have not infer

00:30:09,900 --> 00:30:16,200
of XML I am NOT in for our example yeah

00:30:12,240 --> 00:30:18,600
so if we have something right that says

00:30:16,200 --> 00:30:22,200
key just give me access to this this

00:30:18,600 --> 00:30:25,230
this network on that like a very simple

00:30:22,200 --> 00:30:28,590
subset of what a bummer can do what

00:30:25,230 --> 00:30:30,570
selinux can do and write a tool that's

00:30:28,590 --> 00:30:32,220
gonna generate a second point out there

00:30:30,570 --> 00:30:34,200
like that's gonna generate a Linux

00:30:32,220 --> 00:30:36,210
policy or maybe at some point we could

00:30:34,200 --> 00:30:38,850
also ask is to generate an app a more

00:30:36,210 --> 00:30:40,680
policy put it there so that how streams

00:30:38,850 --> 00:30:42,980
will be happy will be happy everyone

00:30:40,680 --> 00:30:42,980
will be happy

00:30:46,549 --> 00:31:00,690
yeah yeah I think when we put the policy

00:30:57,660 --> 00:31:03,150
generation into the package environment

00:31:00,690 --> 00:31:07,039
we may run into the issue that either a

00:31:03,150 --> 00:31:09,929
package maintainer is like okay I

00:31:07,039 --> 00:31:12,210
usually I would maybe just have this

00:31:09,929 --> 00:31:14,150
package in place I will just say oh come

00:31:12,210 --> 00:31:18,120
on give me everything and it's fine

00:31:14,150 --> 00:31:20,850
because it makes my app work so what I

00:31:18,120 --> 00:31:25,140
like about them on a monolithic approach

00:31:20,850 --> 00:31:27,539
is that we have another team or another

00:31:25,140 --> 00:31:30,240
set of people who watch what the

00:31:27,539 --> 00:31:33,059
application does and says oh this is

00:31:30,240 --> 00:31:35,490
fine this is not fine and this makes it

00:31:33,059 --> 00:31:38,549
of course also more secure because you

00:31:35,490 --> 00:31:43,500
just have a second point of view for

00:31:38,549 --> 00:31:46,559
that applications that are watched by as

00:31:43,500 --> 00:31:51,690
a Linux and and confined so even when a

00:31:46,559 --> 00:31:54,570
malicious packager or a malicious

00:31:51,690 --> 00:31:57,090
package is provided it still isn't able

00:31:54,570 --> 00:32:02,159
to or the application which contains

00:31:57,090 --> 00:32:05,159
this malicious parts is still not able

00:32:02,159 --> 00:32:09,240
to read various parts cetera of course

00:32:05,159 --> 00:32:12,000
for the desktop it's currently well not

00:32:09,240 --> 00:32:15,090
really existent because we just run

00:32:12,000 --> 00:32:18,750
everything unconfined but the basic

00:32:15,090 --> 00:32:20,580
point is that especially when it comes

00:32:18,750 --> 00:32:24,210
to security features you want to have a

00:32:20,580 --> 00:32:26,760
second pair of eyes that is looking at

00:32:24,210 --> 00:32:28,970
all the policies and just double checks

00:32:26,760 --> 00:32:28,970
it

00:32:29,820 --> 00:32:35,590
absolutely agree with you so instead

00:32:33,790 --> 00:32:37,990
we're talking about decoupling the

00:32:35,590 --> 00:32:40,870
policies from a monolithic package we

00:32:37,990 --> 00:32:42,670
are not discarding the entire SELinux

00:32:40,870 --> 00:32:44,320
team like there will still be there and

00:32:42,670 --> 00:32:47,560
they will be still reviewing all the

00:32:44,320 --> 00:32:49,840
individual - selinux packages so they

00:32:47,560 --> 00:32:52,210
will still continue to have a look on

00:32:49,840 --> 00:32:55,990
what the application developer is

00:32:52,210 --> 00:32:58,870
sending them so we will not change the

00:32:55,990 --> 00:33:00,820
way we are packaging in fedora like we

00:32:58,870 --> 00:33:02,530
will still package the SELinux policy

00:33:00,820 --> 00:33:04,720
separately and it should be getting

00:33:02,530 --> 00:33:09,090
reviewed by the athlean-x team so that

00:33:04,720 --> 00:33:09,090
how it should continue that's my opening

00:33:09,150 --> 00:33:20,010
any other questions comments yeah the

00:33:17,110 --> 00:33:22,120
while the idea of a monolithic policy is

00:33:20,010 --> 00:33:24,430
interesting and one of the reasons why

00:33:22,120 --> 00:33:26,620
basically every LSM Under the Sun has

00:33:24,430 --> 00:33:29,500
done it that way in the beginning the

00:33:26,620 --> 00:33:32,980
problem is one human does not scale like

00:33:29,500 --> 00:33:34,480
just period they don't and everything

00:33:32,980 --> 00:33:35,740
and the thing is the SU Linux team at

00:33:34,480 --> 00:33:37,780
one point has been as large as like

00:33:35,740 --> 00:33:39,820
seven people but they all run away and

00:33:37,780 --> 00:33:41,620
go join different other circuses like

00:33:39,820 --> 00:33:43,060
Dan Walsh is now in the container circus

00:33:41,620 --> 00:33:45,130
you know one of the other ones just

00:33:43,060 --> 00:33:47,290
quite at frankly just left Linux forever

00:33:45,130 --> 00:33:50,820
because you know apparently security is

00:33:47,290 --> 00:33:54,040
very hard and the other thing is that

00:33:50,820 --> 00:33:56,770
generally speaking the concepts that are

00:33:54,040 --> 00:33:59,500
actually exposed that are described by

00:33:56,770 --> 00:34:01,420
both app armor and SELinux are too raw

00:33:59,500 --> 00:34:03,610
for anyone to really understand the cut

00:34:01,420 --> 00:34:04,810
of the consequences

00:34:03,610 --> 00:34:07,300
yeah the consequence of them that

00:34:04,810 --> 00:34:08,860
they're very raw and to the point that

00:34:07,300 --> 00:34:10,360
most people are like we're just gonna

00:34:08,860 --> 00:34:12,130
say screw this and this is actually the

00:34:10,360 --> 00:34:14,200
reason why we have a a minimal policy

00:34:12,130 --> 00:34:15,910
and be the targeted policy because we

00:34:14,200 --> 00:34:17,500
actually started out would see the one

00:34:15,910 --> 00:34:20,200
that covers everything and breaks

00:34:17,500 --> 00:34:21,780
everything and we went backwards because

00:34:20,200 --> 00:34:24,190
it turned out to be a horrible idea

00:34:21,780 --> 00:34:28,240
today if you actually launch new

00:34:24,190 --> 00:34:30,550
services on rel seven for example they

00:34:28,240 --> 00:34:32,710
are unconfined otherwise in fedora we

00:34:30,550 --> 00:34:36,070
flip the switch now everything breaks if

00:34:32,710 --> 00:34:36,580
it doesn't have a policy that's a big

00:34:36,070 --> 00:34:38,740
change

00:34:36,580 --> 00:34:40,899
and that that actually is a problematic

00:34:38,740 --> 00:34:43,329
change because there's actually no good

00:34:40,899 --> 00:34:46,179
easy or useful remedy for that problem

00:34:43,329 --> 00:34:47,829
because the amount of expertise out

00:34:46,179 --> 00:34:51,549
there and the documentation for how to

00:34:47,829 --> 00:34:53,529
actually do these things is so bad like

00:34:51,549 --> 00:34:56,349
I'm not it's not just su Linux it's all

00:34:53,529 --> 00:34:58,089
the SLE isms it is so bad that it is

00:34:56,349 --> 00:35:01,240
really really hard to figure out what

00:34:58,089 --> 00:35:02,260
you're supposed to do and so this is one

00:35:01,240 --> 00:35:03,760
of the reasons one of the reasons that

00:35:02,260 --> 00:35:04,960
I'm even involved in snaps adults

00:35:03,760 --> 00:35:07,089
because I actually like the way that

00:35:04,960 --> 00:35:09,339
they do the descriptions for for

00:35:07,089 --> 00:35:11,109
security and it's a concept I think

00:35:09,339 --> 00:35:13,270
actually doesn't necessarily need to be

00:35:11,109 --> 00:35:14,710
in snaps alone it could be something

00:35:13,270 --> 00:35:17,529
that you could pull into the general

00:35:14,710 --> 00:35:19,660
world of like how security is managed in

00:35:17,529 --> 00:35:22,470
Linux but the fact that it hasn't

00:35:19,660 --> 00:35:23,619
happened in almost what 20 years is

00:35:22,470 --> 00:35:25,539
shocking

00:35:23,619 --> 00:35:27,069
like it's almost twenty two thousand was

00:35:25,539 --> 00:35:31,180
when selinux was introduced to the world

00:35:27,069 --> 00:35:33,039
the first LSM and in 20 years almost 20

00:35:31,180 --> 00:35:35,319
years it's 18 years now nobody has ever

00:35:33,039 --> 00:35:36,760
thought about doing that it took google

00:35:35,319 --> 00:35:40,510
doing it with android for somebody to

00:35:36,760 --> 00:35:42,549
think that it was a good idea so just

00:35:40,510 --> 00:35:45,730
just recalled one thing that's i think

00:35:42,549 --> 00:35:47,920
useful so the high-level language that

00:35:45,730 --> 00:35:50,260
we have in snaps for describing like the

00:35:47,920 --> 00:35:52,539
shape of the sandbox for applications is

00:35:50,260 --> 00:35:54,400
not really strictly about up-armored a

00:35:52,539 --> 00:35:56,859
partner is one of like five or six

00:35:54,400 --> 00:35:59,049
things that actually gets you know done

00:35:56,859 --> 00:36:01,750
so when you say i want to access network

00:35:59,049 --> 00:36:04,089
it has implications on system calls

00:36:01,750 --> 00:36:06,849
through a sacrum filter it has

00:36:04,089 --> 00:36:09,010
implications on the ax primer itself

00:36:06,849 --> 00:36:10,630
which confines networking but if you

00:36:09,010 --> 00:36:12,700
look at some other interfaces which is

00:36:10,630 --> 00:36:14,200
the extensions of the sandbox they do

00:36:12,700 --> 00:36:16,750
device C groups they do all kinds of

00:36:14,200 --> 00:36:18,339
things and this is so nice because we

00:36:16,750 --> 00:36:20,319
found them to be very complimentary like

00:36:18,339 --> 00:36:21,609
some things work very well in one place

00:36:20,319 --> 00:36:23,470
like we can do this with a device C

00:36:21,609 --> 00:36:26,289
group other things work very well with

00:36:23,470 --> 00:36:28,180
us with SC Linux sorry with a Parmer and

00:36:26,289 --> 00:36:31,059
they are what things work very well with

00:36:28,180 --> 00:36:33,700
second filtering and just one of these

00:36:31,059 --> 00:36:36,279
alone is not sufficient usually to do

00:36:33,700 --> 00:36:40,630
what we want as a concept like I want to

00:36:36,279 --> 00:36:43,029
do this as an application so I don't

00:36:40,630 --> 00:36:44,740
think we like anyone ever realized this

00:36:43,029 --> 00:36:46,359
before and said that allow this is a

00:36:44,740 --> 00:36:50,230
very useful property we can we can

00:36:46,359 --> 00:36:52,900
plugin ditional things that help help to

00:36:50,230 --> 00:36:54,430
convey the you know the semantics of the

00:36:52,900 --> 00:36:55,000
confinement like access to the network

00:36:54,430 --> 00:36:56,470
what does it

00:36:55,000 --> 00:36:57,760
really mean right what doesn't really

00:36:56,470 --> 00:36:58,660
mean like what kind of limitation was

00:36:57,760 --> 00:36:59,980
going to put in place maybe there's

00:36:58,660 --> 00:37:02,170
gonna be a network namespace around the

00:36:59,980 --> 00:37:04,140
process but just the things that are one

00:37:02,170 --> 00:37:07,950
concept can map the multiple

00:37:04,140 --> 00:37:07,950
technologies that's very valuable

00:37:12,270 --> 00:37:19,030
although I mean one of my primary

00:37:15,070 --> 00:37:20,710
frustrations with Snap is that that all

00:37:19,030 --> 00:37:23,860
not all of those plugins are fully

00:37:20,710 --> 00:37:27,700
formed and the the result is that you

00:37:23,860 --> 00:37:29,290
get the same kind of it yeah you get the

00:37:27,700 --> 00:37:31,930
same thing with a class you get the same

00:37:29,290 --> 00:37:34,360
problem as you have with SELinux is that

00:37:31,930 --> 00:37:40,120
you just turn it off by writing classic

00:37:34,360 --> 00:37:41,920
snap right and and it's so so even even

00:37:40,120 --> 00:37:44,500
still even with them with a more

00:37:41,920 --> 00:37:46,690
abstracted model right I'm still running

00:37:44,500 --> 00:37:49,600
into some similar problems with the with

00:37:46,690 --> 00:37:58,900
the applications or loopholes or issues

00:37:49,600 --> 00:38:00,100
that are so Sigma I'm gonna just say

00:37:58,900 --> 00:38:03,550
this on the record with speakers and

00:38:00,100 --> 00:38:04,960
recording to say this is why I suggested

00:38:03,550 --> 00:38:06,580
two years ago you should just make snap

00:38:04,960 --> 00:38:07,660
confine a separate thing instead of just

00:38:06,580 --> 00:38:09,340
folding it cuz it could have been

00:38:07,660 --> 00:38:13,120
generally useful across the board for

00:38:09,340 --> 00:38:14,440
this kind of stuff and now so I agree

00:38:13,120 --> 00:38:17,860
what you say like every technology

00:38:14,440 --> 00:38:19,690
that's just like not super super mature

00:38:17,860 --> 00:38:21,670
and super polished it's gonna have rough

00:38:19,690 --> 00:38:23,080
edges so people use things like classic

00:38:21,670 --> 00:38:26,700
and fine which means really unconscience

00:38:23,080 --> 00:38:28,720
as a workaround they can also use

00:38:26,700 --> 00:38:32,200
non-enforcement confinement which is a

00:38:28,720 --> 00:38:35,320
lot more convenient for them in practice

00:38:32,200 --> 00:38:37,480
because it means things run and they see

00:38:35,320 --> 00:38:40,840
why used to not run like there's a

00:38:37,480 --> 00:38:42,760
message thing I'm allowing this but you

00:38:40,840 --> 00:38:44,590
know otherwise I wouldn't so there's

00:38:42,760 --> 00:38:47,680
some kind of feedback we can get but the

00:38:44,590 --> 00:38:50,890
primary point when I like heracross

00:38:47,680 --> 00:38:53,320
essentially this the surface of things

00:38:50,890 --> 00:38:55,330
that are broken is far smaller there's

00:38:53,320 --> 00:38:59,260
like a hundred or so interfaces and

00:38:55,330 --> 00:39:02,020
there's thousands of snaps so fixing one

00:38:59,260 --> 00:39:03,460
interface fixes it for every application

00:39:02,020 --> 00:39:05,500
out there without these guys knowing

00:39:03,460 --> 00:39:07,930
without these guys having to care who

00:39:05,500 --> 00:39:08,710
does I mean it's just a central point

00:39:07,930 --> 00:39:10,630
for the

00:39:08,710 --> 00:39:16,059
semantics that has to be fixed that's

00:39:10,630 --> 00:39:17,980
much easier to work with we also have

00:39:16,059 --> 00:39:22,839
something like selinux in permissive

00:39:17,980 --> 00:39:24,940
mode that exactly does this of course

00:39:22,839 --> 00:39:30,339
while debugging the policies that's the

00:39:24,940 --> 00:39:39,089
that's a friend so any other comments

00:39:30,339 --> 00:39:39,089
questions questions comments

00:39:46,110 --> 00:39:55,840
okay then yeah so I so this is all from

00:39:54,700 --> 00:39:59,850
me right now

00:39:55,840 --> 00:40:04,650
so thank you

00:39:59,850 --> 00:40:04,650

YouTube URL: https://www.youtube.com/watch?v=qi7gGGH7Tx8


