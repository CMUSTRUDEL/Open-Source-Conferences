Title: Flock 2018 -  State of Fedora Server Edition & Too Fast Too Slow: When does Modularity make sense?
Publication date: 2018-09-03
Playlist: Flock 2018
Description: 
	Thursday, August 9, 2018 
10:30am - 11:20am 
@Dresden

Talk: State of Fedora Server Edition and
Too Fast/Too Slow: When does Modularity make sense?
Presenters: Stephen Gallagher, Langdon White

Description: 
This will be the annual status and plenary session for the Fedora Server Edition. It will be a two-part session, the first 15-20 minutes will be a report on the current status of the Fedora Server Edition and the new features that were implemented over the last year.

Modularity is the Next Big Thing in Fedora, but is it the right hammer for your particular bolt?

This talk will walk through the benefits and drawbacks to converting your project from a traditional RPM to a Fedora Module. It will discuss how to analyze the cost-benefit ratio of maintainer effort vs. end-user utility as well as comparing and contrasting some of the alternative tools to accomplish similar tasks (such as Software Collections, Docker Containers and Amazon Linux Extras).
Captions: 
	00:00:08,059 --> 00:00:25,859
that's right just say you know I got

00:00:17,910 --> 00:00:27,090
that on tape think it's coming I'd

00:00:25,859 --> 00:00:28,980
introduced myself but if you don't know

00:00:27,090 --> 00:00:31,710
who you might now I've been talking all

00:00:28,980 --> 00:00:33,960
morning so hi I'm Steven Gallagher and

00:00:31,710 --> 00:00:36,570
we've read that I've been working on the

00:00:33,960 --> 00:00:40,280
on the fedora server edition since it

00:00:36,570 --> 00:00:40,280
began actually it's it's before it again

00:00:41,239 --> 00:00:47,780
it has been an interesting ride so it's

00:00:43,530 --> 00:00:51,840
now been what is it for years it was it

00:00:47,780 --> 00:00:54,390
was it was first thrown together as a as

00:00:51,840 --> 00:00:59,090
an idea at the first block in Charleston

00:00:54,390 --> 00:01:02,730
which was six years that can't be right

00:00:59,090 --> 00:01:09,930
I guess we'll split the difference book

00:01:02,730 --> 00:01:11,630
of life they're safe here so I've been

00:01:09,930 --> 00:01:14,400
giving one of these in each block since

00:01:11,630 --> 00:01:15,810
most of you have probably been to one on

00:01:14,400 --> 00:01:17,310
the path that passed what I will do is

00:01:15,810 --> 00:01:21,119
I'll probably talk for 10 or 15 minutes

00:01:17,310 --> 00:01:22,950
and then it would be a discussion which

00:01:21,119 --> 00:01:24,090
we will probably turn off the recording

00:01:22,950 --> 00:01:27,390
does it won't work overall pick anything

00:01:24,090 --> 00:01:28,860
up so I'm gonna go over a little bit

00:01:27,390 --> 00:01:34,079
about that what we've done the last year

00:01:28,860 --> 00:01:37,799
and what that some of our trials some of

00:01:34,079 --> 00:01:39,750
our tribulations a few successes and

00:01:37,799 --> 00:01:41,130
then we'll talk a little bit about where

00:01:39,750 --> 00:01:42,420
we think the fedora server is going to

00:01:41,130 --> 00:01:44,149
go in the next year and the year after

00:01:42,420 --> 00:01:49,409
that

00:01:44,149 --> 00:01:53,880
so first topic what I call modularity

00:01:49,409 --> 00:01:56,700
1.0 this was we started we were talking

00:01:53,880 --> 00:02:00,930
about this bit at the previous block and

00:01:56,700 --> 00:02:03,659
not Cape Cod and the idea at the time

00:02:00,930 --> 00:02:05,820
was that fedora server was going to be

00:02:03,659 --> 00:02:06,820
the prototype for this completely new

00:02:05,820 --> 00:02:08,979
way of building

00:02:06,820 --> 00:02:11,050
distribution from the ground up it was

00:02:08,979 --> 00:02:12,880
going to be just these interchangeable

00:02:11,050 --> 00:02:17,170
modules that could swap out in and out

00:02:12,880 --> 00:02:19,060
as we pleased and you know we were we

00:02:17,170 --> 00:02:22,420
made some good headway towards this but

00:02:19,060 --> 00:02:26,050
we really really were boiling the ocean

00:02:22,420 --> 00:02:28,120
and not all that long after last flock

00:02:26,050 --> 00:02:35,170
we ended up more or less scrapping the

00:02:28,120 --> 00:02:36,940
plan so that and that was pretty

00:02:35,170 --> 00:02:38,980
disheartening and I can speak for myself

00:02:36,940 --> 00:02:41,560
and I suspect for a number of the people

00:02:38,980 --> 00:02:44,590
were not that that was a pretty low

00:02:41,560 --> 00:02:47,230
point in the in the fall there was there

00:02:44,590 --> 00:02:48,820
was a lot of people in putting a lot of

00:02:47,230 --> 00:02:51,570
hours on this and we thought that this

00:02:48,820 --> 00:02:55,480
was it turned out to be a dead end

00:02:51,570 --> 00:02:58,630
however we did come up with a back-up

00:02:55,480 --> 00:03:00,070
plan and we were able to reuse a lot of

00:02:58,630 --> 00:03:01,660
the same framework that we had been

00:03:00,070 --> 00:03:04,560
using for modularity blundetto when we

00:03:01,660 --> 00:03:06,760
figured out that almost by accident

00:03:04,560 --> 00:03:08,410
because of the technique that we had

00:03:06,760 --> 00:03:11,680
been using but it turned out to be

00:03:08,410 --> 00:03:15,250
possible to just fake it into thinking

00:03:11,680 --> 00:03:18,549
that the main Fedora repository was one

00:03:15,250 --> 00:03:20,620
big module and go from there and hey

00:03:18,549 --> 00:03:22,780
what do you know all sudden quadrants it

00:03:20,620 --> 00:03:25,870
on the top and they're great we were

00:03:22,780 --> 00:03:28,510
happy again and we've been we've been

00:03:25,870 --> 00:03:30,640
did we've pretty much been putting all

00:03:28,510 --> 00:03:34,840
of our effort into this modularity 2.0

00:03:30,640 --> 00:03:36,640
thing now and it's been it's been a real

00:03:34,840 --> 00:03:38,739
labor of love for a number of people

00:03:36,640 --> 00:03:43,269
many of whom are in this room which you

00:03:38,739 --> 00:03:45,570
guys already know this but it's involved

00:03:43,269 --> 00:03:48,760
a lot of people in a lot of teams and I

00:03:45,570 --> 00:03:52,410
will say this I've been at Red Hat now

00:03:48,760 --> 00:03:54,640
for over a decade there are a few times

00:03:52,410 --> 00:03:57,100
I've experienced very few times like

00:03:54,640 --> 00:03:58,870
this where this many teams and this many

00:03:57,100 --> 00:04:00,579
people have actually come together to

00:03:58,870 --> 00:04:01,740
work on a project with the same goal in

00:04:00,579 --> 00:04:03,480
mind and

00:04:01,740 --> 00:04:07,080
the idealistic about achieving it and

00:04:03,480 --> 00:04:09,540
you know what we've got something good

00:04:07,080 --> 00:04:13,710
now so I'm actually going to apply you

00:04:09,540 --> 00:04:18,750
guys for a moment that did that didn't

00:04:13,710 --> 00:04:20,550
really work but it it wasn't just the

00:04:18,750 --> 00:04:23,790
modularity team and or the base OS team

00:04:20,550 --> 00:04:26,580
or the DNF team or the rel ins team or

00:04:23,790 --> 00:04:29,700
the infrastructure team or the docs team

00:04:26,580 --> 00:04:32,310
it was all of these groups working

00:04:29,700 --> 00:04:35,580
together so we actually did achieve

00:04:32,310 --> 00:04:38,540
something really really nice with

00:04:35,580 --> 00:04:41,790
modularity 200 and we had our first

00:04:38,540 --> 00:04:45,060
successful release in fedora 28 with 420

00:04:41,790 --> 00:04:46,710
a server edition and I'll talk a little

00:04:45,060 --> 00:04:50,160
bit more about it when I get to the

00:04:46,710 --> 00:04:52,320
future slide but as of fedora as of two

00:04:50,160 --> 00:04:57,030
weeks ago right now has modularity

00:04:52,320 --> 00:05:01,770
enabled for all users of fedora so

00:04:57,030 --> 00:05:05,430
that's pretty exciting in the last year

00:05:01,770 --> 00:05:06,960
we've when we started the server edition

00:05:05,430 --> 00:05:09,120
one of its key the fund of the

00:05:06,960 --> 00:05:10,890
fundamentals was we were gonna just

00:05:09,120 --> 00:05:14,580
design these server roles we're going to

00:05:10,890 --> 00:05:18,750
do these basically prepackaged best best

00:05:14,580 --> 00:05:21,060
practices solutions for how you would

00:05:18,750 --> 00:05:22,740
deploy a popular service and we were

00:05:21,060 --> 00:05:28,080
going to try to make that the de facto

00:05:22,740 --> 00:05:30,180
standard for how you do this index this

00:05:28,080 --> 00:05:32,880
would and Matthew saying this is still a

00:05:30,180 --> 00:05:35,730
good idea I think that's true I think

00:05:32,880 --> 00:05:37,680
that the world around us has moved on

00:05:35,730 --> 00:05:39,990
such that they have found better other

00:05:37,680 --> 00:05:44,910
other better ways to do that

00:05:39,990 --> 00:05:45,600
then roll kit which we finally put out

00:05:44,910 --> 00:05:49,230
of its misery

00:05:45,600 --> 00:05:51,990
this year it did not it had been though

00:05:49,230 --> 00:05:53,520
it was a simple DMS API for doing

00:05:51,990 --> 00:05:57,140
deployments it only ever really

00:05:53,520 --> 00:06:01,410
supported two server rolls free IPA and

00:05:57,140 --> 00:06:02,820
PostgreSQL it was mostly limping and run

00:06:01,410 --> 00:06:03,340
along and I hadn't killed it before this

00:06:02,820 --> 00:06:06,070
because

00:06:03,340 --> 00:06:07,990
QA was using it because was realeased

00:06:06,070 --> 00:06:10,500
easy to set up with a free API or cuba

00:06:07,990 --> 00:06:14,260
or Postgres server for their testing

00:06:10,500 --> 00:06:17,500
however it did not survive because of

00:06:14,260 --> 00:06:19,090
the move the move to python 3.7 and was

00:06:17,500 --> 00:06:21,150
sufficiently it was sufficiently

00:06:19,090 --> 00:06:27,150
complicated that i didn't feel like

00:06:21,150 --> 00:06:27,150
keeping it on life support any longer so

00:06:27,900 --> 00:06:39,160
yeah sorry kitty

00:06:31,350 --> 00:06:41,470
your time's up so one of the interesting

00:06:39,160 --> 00:06:45,660
problems we have right now is we've

00:06:41,470 --> 00:06:45,660
actually done almost too good of a job

00:06:45,930 --> 00:06:51,760
especially with with modularity we don't

00:06:49,590 --> 00:06:53,470
you know we've got that we've still have

00:06:51,760 --> 00:06:55,150
some bugs to fit to work out of me you

00:06:53,470 --> 00:06:56,410
know we definitely need to clean up and

00:06:55,150 --> 00:06:57,820
clean up the user experience with a

00:06:56,410 --> 00:06:59,200
little bit but the technology is sound

00:06:57,820 --> 00:07:06,190
and we've proved they proven that it can

00:06:59,200 --> 00:07:07,690
work but so we said we started in the

00:07:06,190 --> 00:07:09,130
server sink doing a little bit of a

00:07:07,690 --> 00:07:09,789
thought experiment so where does this go

00:07:09,130 --> 00:07:12,010
in the future

00:07:09,789 --> 00:07:14,340
well the obvious first the obvious next

00:07:12,010 --> 00:07:16,900
step is well we get this into epic

00:07:14,340 --> 00:07:19,360
because of course Apple is as Matthew

00:07:16,900 --> 00:07:22,990
showed his stadia state of Sporto Fedora

00:07:19,360 --> 00:07:24,880
speech Apple is what two orders of

00:07:22,990 --> 00:07:28,240
magnitude more popular than Fedora

00:07:24,880 --> 00:07:30,460
proper something in that area three okay

00:07:28,240 --> 00:07:34,210
three orders of magnitude more it hits

00:07:30,460 --> 00:07:38,050
the mirror at least that's pretty

00:07:34,210 --> 00:07:41,120
sizeable and binaries

00:07:38,050 --> 00:07:53,600
that's binary orders of magnitude not

00:07:41,120 --> 00:08:00,380
decimal once you colonel Vanek name

00:07:53,600 --> 00:08:01,880
sorry alright so but and and I think you

00:08:00,380 --> 00:08:03,200
know that is the logical next step is

00:08:01,880 --> 00:08:07,490
that we migrate this to being able to

00:08:03,200 --> 00:08:08,600
support our enterprise users as well but

00:08:07,490 --> 00:08:10,280
that's a bit of a double-edged sword

00:08:08,600 --> 00:08:12,650
because what we will have effectively

00:08:10,280 --> 00:08:15,980
done at that point is make the Fedora

00:08:12,650 --> 00:08:19,250
server Edition completely redundant as

00:08:15,980 --> 00:08:20,690
far as from a user's perspective we'll

00:08:19,250 --> 00:08:24,320
have up we will have reached a point at

00:08:20,690 --> 00:08:26,660
which right now we have a very small but

00:08:24,320 --> 00:08:29,810
dedicated and loyal set of people who

00:08:26,660 --> 00:08:33,850
actually deploy fedora as a server what

00:08:29,810 --> 00:08:36,470
we know from well from an Akita is that

00:08:33,850 --> 00:08:37,880
approximately 0 of them actually use the

00:08:36,470 --> 00:08:40,610
server edition they use the server

00:08:37,880 --> 00:08:46,210
install media to install at a smooth the

00:08:40,610 --> 00:08:46,210
small set of packages they can find so a

00:08:55,090 --> 00:08:59,630
server all right Matthew is creative

00:08:58,310 --> 00:09:01,130
Matthew is correcting me that his mirror

00:08:59,630 --> 00:09:02,810
stats didn't show that there were people

00:09:01,130 --> 00:09:05,660
actually getting them from the mérida

00:09:02,810 --> 00:09:07,910
the modular repo which was only enabled

00:09:05,660 --> 00:09:09,350
by default on a server edition that did

00:09:07,910 --> 00:09:11,270
not mean that they didn't they couldn't

00:09:09,350 --> 00:09:12,800
have manually selected that to play

00:09:11,270 --> 00:09:14,780
around with it either there was there

00:09:12,800 --> 00:09:17,210
was a small blip in the statistics that

00:09:14,780 --> 00:09:22,810
said somebody was using this it's more

00:09:17,210 --> 00:09:22,810
than 0 but asymptotically approaching 0

00:09:23,670 --> 00:09:32,980
so we are sort of engineering ourselves

00:09:29,860 --> 00:09:38,110
out of a job but we're in kind of an odd

00:09:32,980 --> 00:09:39,460
place because of course Fedora in all

00:09:38,110 --> 00:09:41,590
practical purposes ever I think

00:09:39,460 --> 00:09:43,450
everybody knows that rel ultimately

00:09:41,590 --> 00:09:45,940
comes from Fedora sir

00:09:43,450 --> 00:09:49,590
it's it's a place where we try things

00:09:45,940 --> 00:09:49,590
out where we start to stabilize them

00:09:49,830 --> 00:09:57,250
sorry hot spot we try to start

00:09:55,660 --> 00:09:59,710
stabilizing them where where we you know

00:09:57,250 --> 00:10:01,750
we fail fast too we try we try out new

00:09:59,710 --> 00:10:04,630
things and we figure out which one's of

00:10:01,750 --> 00:10:05,950
those are likely to be useful to Timman

00:10:04,630 --> 00:10:07,390
enterprise customer down the road I

00:10:05,950 --> 00:10:10,330
don't think I don't think this is

00:10:07,390 --> 00:10:11,890
surprising anyone I apologize to red hat

00:10:10,330 --> 00:10:17,260
if I'm not supposed to tell that secret

00:10:11,890 --> 00:10:21,460
but I don't think anybody doesn't so we

00:10:17,260 --> 00:10:23,530
have we have value to Red Hat but we're

00:10:21,460 --> 00:10:25,960
rapidly we're rapidly getting to a point

00:10:23,530 --> 00:10:28,300
where it doesn't appear that we have

00:10:25,960 --> 00:10:31,060
value to users which makes it difficult

00:10:28,300 --> 00:10:33,700
to actually use it as a testing ground

00:10:31,060 --> 00:10:36,000
and to figure out where they were to

00:10:33,700 --> 00:10:40,090
figure out what will be in the next

00:10:36,000 --> 00:10:46,810
Enterprise release so so where are we

00:10:40,090 --> 00:10:48,970
here this is where we are we really we

00:10:46,810 --> 00:10:52,750
really don't have a clear vision past

00:10:48,970 --> 00:10:53,920
modularity of what we are doing next we

00:10:52,750 --> 00:10:55,960
talked and we talked in the server to

00:10:53,920 --> 00:10:58,060
service again we met I think it was Adam

00:10:55,960 --> 00:11:00,760
Williamson that pointed out that most of

00:10:58,060 --> 00:11:02,320
what servicing has accomplished and it's

00:11:00,760 --> 00:11:05,410
like it's a tradition has accomplished

00:11:02,320 --> 00:11:06,970
in its life has been because somebody

00:11:05,410 --> 00:11:08,170
got was somebody was really interested

00:11:06,970 --> 00:11:09,580
about was something and drove it to

00:11:08,170 --> 00:11:11,470
completion that was what happened with

00:11:09,580 --> 00:11:11,740
early on those would happen with roll

00:11:11,470 --> 00:11:14,200
kid

00:11:11,740 --> 00:11:15,940
petered out later it was the it was the

00:11:14,200 --> 00:11:17,350
modularity stuff and it was you know it

00:11:15,940 --> 00:11:19,330
was a matter of this is an interesting

00:11:17,350 --> 00:11:21,010
new thing and we're driving and we drove

00:11:19,330 --> 00:11:23,830
it through and now we're approaching

00:11:21,010 --> 00:11:25,120
that annoying part where you know you

00:11:23,830 --> 00:11:27,670
have to actually make it stable but

00:11:25,120 --> 00:11:32,040
that's you know that that's where the

00:11:27,670 --> 00:11:34,930
career folks of us step in but how do we

00:11:32,040 --> 00:11:36,790
expand the server SiC how do we grow it

00:11:34,930 --> 00:11:38,320
how do we get people excited what is the

00:11:36,790 --> 00:11:40,600
next exciting thing that we can get

00:11:38,320 --> 00:11:41,830
people to work on that we want to get

00:11:40,600 --> 00:11:43,750
can't get people to come and say hey

00:11:41,830 --> 00:11:48,850
I've got this idea that I want to work

00:11:43,750 --> 00:11:50,680
on and right now we don't have a lot of

00:11:48,850 --> 00:11:52,630
good ideas for that because we've kind

00:11:50,680 --> 00:11:54,460
of we have kind of engineered ourselves

00:11:52,630 --> 00:11:56,350
into a position where we expect that

00:11:54,460 --> 00:12:02,590
people will probably start using us less

00:11:56,350 --> 00:12:04,120
because of the things we've done so this

00:12:02,590 --> 00:12:05,620
is the part of the talk where I point

00:12:04,120 --> 00:12:07,030
the microphone in your direction and you

00:12:05,620 --> 00:12:16,050
help me figure out what the hell we're

00:12:07,030 --> 00:12:16,050
doing next the floor recognizes Langdon

00:12:17,820 --> 00:12:22,000
yeah I think we should probably cut the

00:12:20,170 --> 00:12:23,830
recording at this point because the

00:12:22,000 --> 00:12:28,480
conversation is just going to be in the

00:12:23,830 --> 00:12:30,910
room so the big gap that I think servers

00:12:28,480 --> 00:12:35,320
can still built is one of the problems

00:12:30,910 --> 00:12:37,320
that having a party because that was my

00:12:35,320 --> 00:12:41,130
first on the list where I built the lot

00:12:37,320 --> 00:12:41,130
it has special

00:12:53,750 --> 00:12:56,909
[Applause]

00:13:11,230 --> 00:13:14,440
sorry folks

00:13:37,770 --> 00:13:44,190
trying to what are you trying to do it

00:13:40,380 --> 00:13:48,140
we're yeah it except all the solutions

00:13:44,190 --> 00:13:48,140
that doesn't actually just like okay I'm

00:13:54,410 --> 00:13:57,410
alright

00:14:10,430 --> 00:14:17,750
I love technology alright let's turn the

00:14:15,529 --> 00:14:21,830
laptop around except everything's

00:14:17,750 --> 00:14:24,160
crowded now depending on you on your

00:14:21,830 --> 00:14:26,630
slides can you just read an articulate

00:14:24,160 --> 00:14:28,520
me to some extent yeah but then you will

00:14:26,630 --> 00:14:30,760
miss the funny cat pictures that's the

00:14:28,520 --> 00:14:30,760
problem

00:14:33,820 --> 00:14:41,390
alright alright so it's good all right

00:14:39,620 --> 00:14:45,950
so it's most of you know I'm white and

00:14:41,390 --> 00:14:49,040
white and this Steven Gallagher and you

00:14:45,950 --> 00:14:50,420
wanna go to next slide so I always try

00:14:49,040 --> 00:14:51,980
to include some pictures of my kids

00:14:50,420 --> 00:14:55,670
because that way I can embarrass them

00:14:51,980 --> 00:14:56,839
for a long time but this is my current

00:14:55,670 --> 00:14:57,860
learning joke I'm trying to get them all

00:14:56,839 --> 00:15:02,540
in the same picture at the same time

00:14:57,860 --> 00:15:05,240
looking reasonable and I was I doing red

00:15:02,540 --> 00:15:08,930
hat actually as a developer advocate and

00:15:05,240 --> 00:15:10,459
my joke about it is that they got tired

00:15:08,930 --> 00:15:11,839
me complaining about all the problems

00:15:10,459 --> 00:15:13,880
haven't pulled me into engineering to

00:15:11,839 --> 00:15:18,709
try to fix them then I got suckered into

00:15:13,880 --> 00:15:20,480
the basically the fedora next project

00:15:18,709 --> 00:15:22,870
and kind of been involved in that for

00:15:20,480 --> 00:15:25,730
years now

00:15:22,870 --> 00:15:27,709
so most of you know me I'm Steven

00:15:25,730 --> 00:15:34,430
Gallagher that is an actual photo of me

00:15:27,709 --> 00:15:35,480
doing my job in fedora alright so first

00:15:34,430 --> 00:15:37,850
a little bit of the history of the

00:15:35,480 --> 00:15:39,620
problem that we're trying to solve so I

00:15:37,850 --> 00:15:42,170
try to this is kind of a short version

00:15:39,620 --> 00:15:43,400
of this conversation which is that you

00:15:42,170 --> 00:15:45,650
know we have different life cycles we

00:15:43,400 --> 00:15:46,550
have different styles of things right

00:15:45,650 --> 00:15:48,290
that's kind of what the plains are

00:15:46,550 --> 00:15:50,240
supposed to represent that you know we

00:15:48,290 --> 00:15:51,709
have you know some planes that fly fast

00:15:50,240 --> 00:15:52,970
and some that flight slower and

00:15:51,709 --> 00:15:54,620
sometimes you need to be able to hook

00:15:52,970 --> 00:15:57,470
them up together because you know one

00:15:54,620 --> 00:16:02,630
needs to feed gas to the other you know

00:15:57,470 --> 00:16:06,410
the bowl Bob I think that's what's

00:16:02,630 --> 00:16:08,060
called is this this cliff here kind of

00:16:06,410 --> 00:16:10,160
represents the idea that you know all

00:16:08,060 --> 00:16:12,670
the stuff in the distro is very tightly

00:16:10,160 --> 00:16:15,920
integrated one big huge vertical stack

00:16:12,670 --> 00:16:17,240
and so as a result it has a lot of

00:16:15,920 --> 00:16:18,680
problems with trying to shift things

00:16:17,240 --> 00:16:20,510
around because that whole

00:16:18,680 --> 00:16:24,350
all just crumble down also it's easy to

00:16:20,510 --> 00:16:25,880
fall off that too and then another thing

00:16:24,350 --> 00:16:28,850
I like to point out is that over the

00:16:25,880 --> 00:16:30,740
last kind of 10 years or so in

00:16:28,850 --> 00:16:33,200
particular software development has

00:16:30,740 --> 00:16:35,510
really changed a lot we've really

00:16:33,200 --> 00:16:37,820
shifted in a lot of ways to the power

00:16:35,510 --> 00:16:40,010
being with developers rather than the

00:16:37,820 --> 00:16:41,839
power being with dis admins so when the

00:16:40,010 --> 00:16:43,970
distro started kind of the concept of

00:16:41,839 --> 00:16:46,370
distros susceptance we're trying to take

00:16:43,970 --> 00:16:48,230
power back from developers and by

00:16:46,370 --> 00:16:50,300
developers I mean I could mean vendors

00:16:48,230 --> 00:16:53,089
or you get literally software developers

00:16:50,300 --> 00:16:55,640
in your IT department but the districts

00:16:53,089 --> 00:16:58,820
were trying to you know simplify the

00:16:55,640 --> 00:17:01,100
overall problem that they were having by

00:16:58,820 --> 00:17:04,010
locking down what developers could do

00:17:01,100 --> 00:17:06,020
and so over the last except maybe 10

00:17:04,010 --> 00:17:08,329
years the pendulum kind of has started

00:17:06,020 --> 00:17:09,530
to swing back the other way and software

00:17:08,329 --> 00:17:12,319
developers from now taking more control

00:17:09,530 --> 00:17:15,260
so we see things like containers right

00:17:12,319 --> 00:17:17,179
are a great example of developers

00:17:15,260 --> 00:17:19,459
wanting to put what they want to put in

00:17:17,179 --> 00:17:23,750
production and forget about the sis

00:17:19,459 --> 00:17:25,670
admins in the way how we do development

00:17:23,750 --> 00:17:27,770
has also significantly changed greatly

00:17:25,670 --> 00:17:30,500
you put up a website now and it's like

00:17:27,770 --> 00:17:32,600
on top of what a million several million

00:17:30,500 --> 00:17:36,260
lines of code before you get your little

00:17:32,600 --> 00:17:37,670
smattering of code on the very top so we

00:17:36,260 --> 00:17:40,070
have a couple of interesting things

00:17:37,670 --> 00:17:41,840
there both you have that vertical stack

00:17:40,070 --> 00:17:44,510
problem but on the flip side it means

00:17:41,840 --> 00:17:46,370
you can tear down your entire

00:17:44,510 --> 00:17:48,620
architecture that we replace it in

00:17:46,370 --> 00:17:50,750
sometimes a matter of a day sometimes a

00:17:48,620 --> 00:17:51,920
couple of weeks versus when I started

00:17:50,750 --> 00:17:53,929
doing software development where you

00:17:51,920 --> 00:17:55,790
will literally spend six months just

00:17:53,929 --> 00:17:59,390
building the architecture right before

00:17:55,790 --> 00:18:02,090
you got to your real content then kind

00:17:59,390 --> 00:18:04,220
of the last thing is and I still haven't

00:18:02,090 --> 00:18:07,370
found a better way to to show this is

00:18:04,220 --> 00:18:09,559
that different use cases have different

00:18:07,370 --> 00:18:11,000
needs so my little graph up there is

00:18:09,559 --> 00:18:12,350
kind of talking about mutual funds and

00:18:11,000 --> 00:18:14,780
so when you're trying to plan for

00:18:12,350 --> 00:18:16,520
retirement where you are what age you

00:18:14,780 --> 00:18:18,380
are means you should make different

00:18:16,520 --> 00:18:20,990
investments right so you want to make

00:18:18,380 --> 00:18:22,940
lower more conservative investments

00:18:20,990 --> 00:18:25,670
later in life and riskier investments

00:18:22,940 --> 00:18:26,960
earlier in life this is also true so for

00:18:25,670 --> 00:18:28,910
the same person you want

00:18:26,960 --> 00:18:31,400
different financial decisions depending

00:18:28,910 --> 00:18:32,990
on this position you're in right now so

00:18:31,400 --> 00:18:34,760
that's what we have this problem with

00:18:32,990 --> 00:18:36,590
software as well and distros don't

00:18:34,760 --> 00:18:39,200
really tolerate that very well right

00:18:36,590 --> 00:18:41,090
they there is one use case I am sold a

00:18:39,200 --> 00:18:43,250
web server it must be for production

00:18:41,090 --> 00:18:45,110
when in fact when I install web server I

00:18:43,250 --> 00:18:46,880
may be installing it so I can do

00:18:45,110 --> 00:18:49,580
development on the web server like I

00:18:46,880 --> 00:18:51,650
want to actually make commits to HTTP or

00:18:49,580 --> 00:18:53,930
I might be writing HTML pages or I make

00:18:51,650 --> 00:18:55,370
very good PHP all those use cases are

00:18:53,930 --> 00:18:59,270
kind of different and they require

00:18:55,370 --> 00:19:00,920
different things to kind of be installed

00:18:59,270 --> 00:19:03,500
or how they're set up right this is why

00:19:00,920 --> 00:19:05,450
developers instantly install Apache and

00:19:03,500 --> 00:19:07,340
then turn off SELinux and turn off the

00:19:05,450 --> 00:19:09,200
fire right because they don't have the

00:19:07,340 --> 00:19:11,330
time or the energy to figure out how to

00:19:09,200 --> 00:19:13,850
make this highly hardened

00:19:11,330 --> 00:19:15,590
production-ready system into one that

00:19:13,850 --> 00:19:19,120
they can must be work with right this

00:19:15,590 --> 00:19:23,180
says time to our next slide here yeah so

00:19:19,120 --> 00:19:25,070
basically those are kind of the problems

00:19:23,180 --> 00:19:29,420
that we saw when we wanted to go into

00:19:25,070 --> 00:19:31,460
this to this solution so this is how we

00:19:29,420 --> 00:19:34,040
think of well this is how the

00:19:31,460 --> 00:19:37,310
distribution thinks of its users right

00:19:34,040 --> 00:19:39,020
they're all neat and tidy right you know

00:19:37,310 --> 00:19:41,300
it's and we're kind of running with the

00:19:39,020 --> 00:19:51,950
joke you know it's in 1995

00:19:41,300 --> 00:19:54,590
you know Fedora distro Fedora as a

00:19:51,950 --> 00:19:57,650
distribution is still trapped in the Red

00:19:54,590 --> 00:20:00,650
Hat Linux days it's it comes it

00:19:57,650 --> 00:20:03,020
originates at a time when a distribution

00:20:00,650 --> 00:20:04,760
was really your only way of getting open

00:20:03,020 --> 00:20:06,320
source software you had that you started

00:20:04,760 --> 00:20:09,200
from it from a distro you started from a

00:20:06,320 --> 00:20:10,700
basic install and then you you know well

00:20:09,200 --> 00:20:12,320
once yum came around you dumb installed

00:20:10,700 --> 00:20:16,310
everything before that you went through

00:20:12,320 --> 00:20:17,810
RPM hell but everything came from a

00:20:16,310 --> 00:20:19,370
single source it was you know you

00:20:17,810 --> 00:20:20,870
generally would decide you either trust

00:20:19,370 --> 00:20:22,310
it or didn't trust that source and

00:20:20,870 --> 00:20:23,930
that's how you got your sock all right

00:20:22,310 --> 00:20:30,650
if it wasn't there your two choices were

00:20:23,930 --> 00:20:34,220
packaged it don't use it that world we

00:20:30,650 --> 00:20:36,460
want as open source one we are the

00:20:34,220 --> 00:20:38,160
default choice for run a new software

00:20:36,460 --> 00:20:42,150
throughout the world now

00:20:38,160 --> 00:20:44,040
and the distros didn't keep up with that

00:20:42,150 --> 00:20:45,590
the distros are still thinking we're the

00:20:44,040 --> 00:20:47,910
only way you can get software safely and

00:20:45,590 --> 00:20:49,770
we have to test it all together and it

00:20:47,910 --> 00:20:51,240
has to be delivered on this schedule and

00:20:49,770 --> 00:20:54,330
if you don't miss that schedule you go

00:20:51,240 --> 00:20:56,790
it's your you're out six months and it

00:20:54,330 --> 00:20:59,070
envisions a world where this is what

00:20:56,790 --> 00:21:00,660
your ETR user's desk looks like now they

00:20:59,070 --> 00:21:04,740
are very rigid they are very cautious

00:21:00,660 --> 00:21:06,720
there and no yeah and so if we move on

00:21:04,740 --> 00:21:09,330
the next slide this is what it actually

00:21:06,720 --> 00:21:10,920
looks like right and I've argued this is

00:21:09,330 --> 00:21:13,980
actually what it's always looked like

00:21:10,920 --> 00:21:16,860
right it's just that we could force them

00:21:13,980 --> 00:21:19,830
a little bit into the slide before so

00:21:16,860 --> 00:21:21,960
you know I try to find some fun pictures

00:21:19,830 --> 00:21:24,360
here just even actually have the idea

00:21:21,960 --> 00:21:26,460
yesterday of getting a toddler to go

00:21:24,360 --> 00:21:28,320
around with a Stamper and that's what

00:21:26,460 --> 00:21:31,470
you end up with for Venn diagram of your

00:21:28,320 --> 00:21:34,770
users and so I try to make it but I'm

00:21:31,470 --> 00:21:36,720
not a very good artist so yeah so this

00:21:34,770 --> 00:21:38,370
is kind of the idea is that users are

00:21:36,720 --> 00:21:41,130
actually very very messy right it's

00:21:38,370 --> 00:21:42,180
about use cases it's about you know what

00:21:41,130 --> 00:21:44,700
they're trying to accomplish that day

00:21:42,180 --> 00:21:46,860
you know etc etc and when I say users I

00:21:44,700 --> 00:21:48,720
mean kind of broad swath right I mean

00:21:46,860 --> 00:21:50,730
developers I mean maintain errs I mean

00:21:48,720 --> 00:21:54,210
you know whoever is actually your user

00:21:50,730 --> 00:21:55,860
and all of those considerations need to

00:21:54,210 --> 00:22:02,490
be thought out and that's kind of what

00:21:55,860 --> 00:22:06,510
we led to modularity good and so this is

00:22:02,490 --> 00:22:07,590
kind of where or modularity fits yeah we

00:22:06,510 --> 00:22:09,900
didn't really have a whole lot of great

00:22:07,590 --> 00:22:12,330
pictures for just slides so what I did

00:22:09,900 --> 00:22:14,220
was I decided to take an example when we

00:22:12,330 --> 00:22:16,230
did Fedora 28 have one of the examples I

00:22:14,220 --> 00:22:18,780
used was I've been maintaining a package

00:22:16,230 --> 00:22:21,420
called review board in Apple for the

00:22:18,780 --> 00:22:25,050
better part of a decade now it lived in

00:22:21,420 --> 00:22:27,480
fedora for two years before before it's

00:22:25,050 --> 00:22:31,200
dependent stacked Jango moved past work

00:22:27,480 --> 00:22:34,070
and support started with and that was

00:22:31,200 --> 00:22:36,170
that happened back in the Doris Evan

00:22:34,070 --> 00:22:40,160
or 18 it's been out of the distribution

00:22:36,170 --> 00:22:41,930
simply because it could yeah it just its

00:22:40,160 --> 00:22:43,280
upstream decided to lock on an old

00:22:41,930 --> 00:22:45,920
version they maintain the old they

00:22:43,280 --> 00:22:47,660
maintain the old version of Django a you

00:22:45,920 --> 00:22:50,330
know outside of upstream but we just

00:22:47,660 --> 00:22:54,410
couldn't happen in our distro fedoras

00:22:50,330 --> 00:22:56,120
first it only has the latest one so when

00:22:54,410 --> 00:22:57,590
we came when we came up with this much

00:22:56,120 --> 00:22:59,360
Larry ideas suddenly I was able to

00:22:57,590 --> 00:23:01,430
actually package this old but still

00:22:59,360 --> 00:23:04,220
supported version of Django and then

00:23:01,430 --> 00:23:06,470
bring my pet oh yeah my pet package back

00:23:04,220 --> 00:23:08,780
into fedora where it's been very popular

00:23:06,470 --> 00:23:10,370
apples but you know it's always been

00:23:08,780 --> 00:23:12,200
kind of an embarrassment to us that we

00:23:10,370 --> 00:23:14,300
couldn't keep it in the meet Fedora

00:23:12,200 --> 00:23:17,300
repositories and so that was an option

00:23:14,300 --> 00:23:18,890
and opportunity that this gave us right

00:23:17,300 --> 00:23:20,660
so what we're going to move on to so

00:23:18,890 --> 00:23:22,940
basically you know this is kind of the

00:23:20,660 --> 00:23:24,530
introduction this is why we did modular

00:23:22,940 --> 00:23:27,680
this is what oh this is kind of the

00:23:24,530 --> 00:23:30,020
point and I wouldn't say that modularity

00:23:27,680 --> 00:23:32,690
Nestle meets all of these goals

00:23:30,020 --> 00:23:34,760
perfectly but it's started right and I

00:23:32,690 --> 00:23:38,030
think the important part is that it's a

00:23:34,760 --> 00:23:41,870
start at the OS level right instead of

00:23:38,030 --> 00:23:48,740
things like alternatives or you know

00:23:41,870 --> 00:23:50,900
like Python and yeah virtually I always

00:23:48,740 --> 00:23:52,460
mix them up cuz there's our VM and 87

00:23:50,900 --> 00:23:54,440
different ones so all those different

00:23:52,460 --> 00:23:56,690
solutions are trying to solve very

00:23:54,440 --> 00:23:59,060
similar problems but they're doing it

00:23:56,690 --> 00:24:00,800
from a particular perspective right so

00:23:59,060 --> 00:24:03,050
the ruby developer who wants to use

00:24:00,800 --> 00:24:05,900
multiple versions of ruby has a

00:24:03,050 --> 00:24:08,300
particular solution for ruby whereas

00:24:05,900 --> 00:24:11,150
somebody who wants to run different

00:24:08,300 --> 00:24:13,250
versions of Java in production might use

00:24:11,150 --> 00:24:14,140
the alternatives infrastructure right so

00:24:13,250 --> 00:24:16,040
they're coming from different

00:24:14,140 --> 00:24:18,320
perspectives and so making different

00:24:16,040 --> 00:24:21,590
trade-offs and not actually providing

00:24:18,320 --> 00:24:24,050
kind of a quasi Universal solution and

00:24:21,590 --> 00:24:25,700
one that's integrated into you know when

00:24:24,050 --> 00:24:29,120
I say the OS I mean package management

00:24:25,700 --> 00:24:31,940
kind of all that in a way that is part

00:24:29,120 --> 00:24:33,080
of the system and so that's what we're

00:24:31,940 --> 00:24:34,580
trying to do with modularity is we're

00:24:33,080 --> 00:24:36,890
trying to make it so that it's at the at

00:24:34,580 --> 00:24:42,260
the lowest level and part of the overall

00:24:36,890 --> 00:24:42,470
system itself in a sense so the question

00:24:42,260 --> 00:24:45,259
is

00:24:42,470 --> 00:24:48,289
is alternatives not part of the arts I

00:24:45,259 --> 00:24:51,019
would say it's sort of part of the u.s.

00:24:48,289 --> 00:24:53,899
it's an add-on in the sense that it's a

00:24:51,019 --> 00:24:56,480
new piece that is not part of the things

00:24:53,899 --> 00:24:59,690
that a normal user uses regularly so

00:24:56,480 --> 00:25:01,429
it's like if I might yeah when we were

00:24:59,690 --> 00:25:03,309
doing we were designing this we looked

00:25:01,429 --> 00:25:06,080
at our potential set of requirements and

00:25:03,309 --> 00:25:07,610
alternatives was one of the solutions we

00:25:06,080 --> 00:25:10,309
had the way we had looked at as well as

00:25:07,610 --> 00:25:13,250
this saw our collections and containers

00:25:10,309 --> 00:25:16,220
and what we realized with a feedback

00:25:13,250 --> 00:25:18,860
from PMA I'm talking to customers and I

00:25:16,220 --> 00:25:20,690
was talking to a cosmetic users was that

00:25:18,860 --> 00:25:23,179
people didn't actually care about

00:25:20,690 --> 00:25:25,039
parallel install ability as a general

00:25:23,179 --> 00:25:26,990
case that were those of one or two

00:25:25,039 --> 00:25:28,700
percent that did but for the most part

00:25:26,990 --> 00:25:30,350
people only really cared about having

00:25:28,700 --> 00:25:33,860
the availability of these alternative

00:25:30,350 --> 00:25:36,710
versions and so doing multiple packages

00:25:33,860 --> 00:25:38,960
with different with alternatives was

00:25:36,710 --> 00:25:41,659
kind of heavyweight it required the it

00:25:38,960 --> 00:25:43,399
required users to make a conscious

00:25:41,659 --> 00:25:44,629
choices the same way they did with SDL's

00:25:43,399 --> 00:25:46,039
and they required they required them to

00:25:44,629 --> 00:25:48,019
change their install scripts and change

00:25:46,039 --> 00:25:50,990
their deployment scripts to make it to

00:25:48,019 --> 00:25:52,909
be aware of that to use it whereas the

00:25:50,990 --> 00:25:54,350
approach we took with with modularity as

00:25:52,909 --> 00:25:56,950
we've just switching with streams allows

00:25:54,350 --> 00:25:59,360
people to just drop their software in

00:25:56,950 --> 00:26:03,409
exactly where the upstream expects it to

00:25:59,360 --> 00:26:05,899
be and that just cut out a huge barrier

00:26:03,409 --> 00:26:07,549
to entry for there for users and made it

00:26:05,899 --> 00:26:08,840
and as much as why it's a much simpler

00:26:07,549 --> 00:26:12,080
way of doing things than for example

00:26:08,840 --> 00:26:15,559
soccer collections it loses the parallel

00:26:12,080 --> 00:26:17,149
install ability side of things but we've

00:26:15,559 --> 00:26:19,870
reasoned that that was probably not

00:26:17,149 --> 00:26:23,629
important enough and I would also add

00:26:19,870 --> 00:26:26,029
and it doesn't necessarily use parallel

00:26:23,629 --> 00:26:28,100
install forever it's just right now that

00:26:26,029 --> 00:26:29,870
in our current state the other thing I

00:26:28,100 --> 00:26:34,009
had about alternatives too is that it's

00:26:29,870 --> 00:26:35,389
very sysadmin biased as a developer it's

00:26:34,009 --> 00:26:37,730
hard to use the alternatives

00:26:35,389 --> 00:26:39,830
infrastructure to switch between like

00:26:37,730 --> 00:26:41,090
language language versions a lot or

00:26:39,830 --> 00:26:43,070
especially if you're a polyglot

00:26:41,090 --> 00:26:45,409
developer and you jump between different

00:26:43,070 --> 00:26:47,330
versions of different languages of the

00:26:45,409 --> 00:26:50,240
alternative structures very heart is a

00:26:47,330 --> 00:26:51,740
very high barrier to learn because it's

00:26:50,240 --> 00:26:53,440
a new thing you have to learn

00:26:51,740 --> 00:26:56,470
whereas like I already know

00:26:53,440 --> 00:27:01,500
right so that's also an argument for it

00:26:56,470 --> 00:27:04,450
I don't know it's tough good in modeler

00:27:01,500 --> 00:27:07,000
theoretically almost no that's the goal

00:27:04,450 --> 00:27:09,220
right is that modularity oh sorry the

00:27:07,000 --> 00:27:11,590
question was isn't it modularity a new

00:27:09,220 --> 00:27:14,200
thing I have to learn the idea with

00:27:11,590 --> 00:27:16,570
modularity as a user is that it's

00:27:14,200 --> 00:27:18,190
basically transparent you have to

00:27:16,570 --> 00:27:21,280
indicate that you want a different

00:27:18,190 --> 00:27:25,210
version of something but you but if that

00:27:21,280 --> 00:27:27,250
part is obvious and so but you can still

00:27:25,210 --> 00:27:29,170
just use it exactly the same way you've

00:27:27,250 --> 00:27:31,780
been using the system this whole time

00:27:29,170 --> 00:27:34,180
because we have the defaults component

00:27:31,780 --> 00:27:36,220
and so in that way if I wanted to just

00:27:34,180 --> 00:27:39,040
get Postgres that is shipped by fedora I

00:27:36,220 --> 00:27:40,690
just say DNF install Postgres and it's

00:27:39,040 --> 00:27:43,870
done there's no I don't know anything

00:27:40,690 --> 00:27:45,460
about modularity so to only want to get

00:27:43,870 --> 00:27:46,960
forward I think what he was saying

00:27:45,460 --> 00:27:48,700
though is yes it is still you know

00:27:46,960 --> 00:27:51,690
learning that you have step DNF module

00:27:48,700 --> 00:27:53,800
enable this version in this stream is

00:27:51,690 --> 00:27:55,630
something new you have to learn but it

00:27:53,800 --> 00:27:56,590
is essentially a one-liner compared to

00:27:55,630 --> 00:27:58,300
alternatives where you have to

00:27:56,590 --> 00:28:00,550
understand how they how alternatives

00:27:58,300 --> 00:28:01,960
interacts especially in the case of Java

00:28:00,550 --> 00:28:04,780
where you have to actually change a

00:28:01,960 --> 00:28:06,280
whole bunch of different commands all at

00:28:04,780 --> 00:28:08,680
the same time and know exactly which one

00:28:06,280 --> 00:28:10,000
you have to change it this it at the

00:28:08,680 --> 00:28:11,470
very least it narrows it down to a

00:28:10,000 --> 00:28:15,690
single command that we can document

00:28:11,470 --> 00:28:19,320
really easily as opposed to I just

00:28:15,690 --> 00:28:19,320
labyrinth of esoterica

00:28:23,260 --> 00:28:26,490
[Music]

00:28:29,110 --> 00:28:32,160
[Music]

00:28:35,210 --> 00:28:38,279
[Music]

00:28:43,960 --> 00:28:50,179
so the question is don't we already have

00:28:47,950 --> 00:28:52,940
alternative verbs or multiple versions

00:28:50,179 --> 00:28:57,490
of something given that we have multiple

00:28:52,940 --> 00:28:57,490
Rico's right so there's like everything

00:28:58,550 --> 00:29:01,630
[Music]

00:29:15,290 --> 00:29:18,380
[Music]

00:29:24,700 --> 00:29:30,230
right so okay so the I guess that's what

00:29:29,150 --> 00:29:33,020
the question is though

00:29:30,230 --> 00:29:39,740
are you just saying are you correct yeah

00:29:33,020 --> 00:29:43,670
okay so yeah so so the comment is

00:29:39,740 --> 00:29:45,500
basically what we have today is that we

00:29:43,670 --> 00:29:47,990
have saved the everything repo and the

00:29:45,500 --> 00:29:50,960
updates on top of that and basically we

00:29:47,990 --> 00:29:52,760
keep at most dish two versions of any

00:29:50,960 --> 00:29:55,190
given thing you know kind of the one

00:29:52,760 --> 00:29:57,650
that was shipped and then whatever the

00:29:55,190 --> 00:29:59,150
current update is splitting drinks and

00:29:57,650 --> 00:30:01,429
then tricks and hacks like name it like

00:29:59,150 --> 00:30:04,550
specialized naming right so we already

00:30:01,429 --> 00:30:06,140
do hack around that so and that's

00:30:04,550 --> 00:30:09,410
actually a little bit of the point and

00:30:06,140 --> 00:30:11,840
that with modularity we would

00:30:09,410 --> 00:30:13,820
potentially massively increase the

00:30:11,840 --> 00:30:16,790
number of copies of any given thing that

00:30:13,820 --> 00:30:18,020
we might have in the repo side and that

00:30:16,790 --> 00:30:20,570
is definitely a possibility

00:30:18,020 --> 00:30:22,429
however I would argue a couple of things

00:30:20,570 --> 00:30:24,710
one we do that already to some extent

00:30:22,429 --> 00:30:27,080
maybe not to this extent by using name

00:30:24,710 --> 00:30:29,500
mangling rather than actually using the

00:30:27,080 --> 00:30:32,330
metadata that we have and could provide

00:30:29,500 --> 00:30:35,630
so I think it's kind of ugly the way we

00:30:32,330 --> 00:30:38,990
do it now and the other thing is that I

00:30:35,630 --> 00:30:39,850
think people forget how much policy we

00:30:38,990 --> 00:30:42,400
have in place

00:30:39,850 --> 00:30:44,799
rpm we could do all kinds of that stuff

00:30:42,400 --> 00:30:46,990
right now today by just standing up near

00:30:44,799 --> 00:30:48,400
Evo's or whatever but we have policies

00:30:46,990 --> 00:30:50,049
in place that says you know what we're

00:30:48,400 --> 00:30:51,490
only going to have two copies of any

00:30:50,049 --> 00:30:53,590
given thing it's not because we

00:30:51,490 --> 00:30:55,600
technically can't

00:30:53,590 --> 00:30:57,610
so with modularity we have the same

00:30:55,600 --> 00:30:58,900
problem we just haven't built up ten

00:30:57,610 --> 00:31:01,960
years of knowledge of what those

00:30:58,900 --> 00:31:03,610
policies should be so we do need policy

00:31:01,960 --> 00:31:05,650
that says hey we need to limit the

00:31:03,610 --> 00:31:06,970
number of you know versions of things

00:31:05,650 --> 00:31:09,370
that are out there because we can't

00:31:06,970 --> 00:31:10,750
maintain a distro that you know where

00:31:09,370 --> 00:31:13,919
everything under the Sun is available

00:31:10,750 --> 00:31:16,840
I'm going to contradict you there sure

00:31:13,919 --> 00:31:18,730
and say that ultimately the decision on

00:31:16,840 --> 00:31:19,330
that I think the decision on how many

00:31:18,730 --> 00:31:21,250
versions

00:31:19,330 --> 00:31:23,320
how many streams of something that you

00:31:21,250 --> 00:31:24,850
want to use in modularity you should

00:31:23,320 --> 00:31:27,340
really be up to whoever is going to

00:31:24,850 --> 00:31:29,380
maintain it not up to the distress hole

00:31:27,340 --> 00:31:31,659
saying no you can only have two or three

00:31:29,380 --> 00:31:33,280
of them I think is if you're upstream

00:31:31,659 --> 00:31:34,600
yeah if you have a very easy upstream

00:31:33,280 --> 00:31:37,600
that just happens to release you know

00:31:34,600 --> 00:31:39,850
the very old Hollywood the old stable

00:31:37,600 --> 00:31:41,620
and the new and the new shiny really

00:31:39,850 --> 00:31:43,480
releases on a regular basis if you want

00:31:41,620 --> 00:31:45,280
to maintain those three maintain those

00:31:43,480 --> 00:31:47,470
three that's it's going to be up to the

00:31:45,280 --> 00:31:48,820
maintainer to decide which way when if

00:31:47,470 --> 00:31:50,409
they want to carry more than one stream

00:31:48,820 --> 00:31:51,820
and how much maintenance they want to do

00:31:50,409 --> 00:31:52,950
on it just as long as somebody's willing

00:31:51,820 --> 00:31:55,150
to step up and do the work

00:31:52,950 --> 00:31:57,340
modularity will let them step up and do

00:31:55,150 --> 00:31:59,020
that work I mean if we need to you know

00:31:57,340 --> 00:32:00,460
I'll pick in 100 bucks we need to go buy

00:31:59,020 --> 00:32:02,470
another terabyte drive right

00:32:00,460 --> 00:32:03,730
I mean space is cheap right so it

00:32:02,470 --> 00:32:05,770
doesn't you know it doesn't really

00:32:03,730 --> 00:32:07,179
matter that much from a disc perspective

00:32:05,770 --> 00:32:10,120
it does matter from a network

00:32:07,179 --> 00:32:14,740
perspective potentially but then and we

00:32:10,120 --> 00:32:16,330
might have policy around the actual like

00:32:14,740 --> 00:32:17,950
core components right this is where we

00:32:16,330 --> 00:32:19,570
get into things like ratings ideas and

00:32:17,950 --> 00:32:20,770
stuff like that all right we're gonna

00:32:19,570 --> 00:32:23,460
have them both talk to you but I'm not

00:32:20,770 --> 00:32:23,460
going to him then Olivia

00:32:40,029 --> 00:32:48,320
yeah so the concern is that the mirrors

00:32:46,610 --> 00:32:49,999
may not want to distribute a larger

00:32:48,320 --> 00:32:52,249
amount of content we have actually

00:32:49,999 --> 00:32:54,799
already run into that it is definitely a

00:32:52,249 --> 00:32:57,139
concern so we have to we have to

00:32:54,799 --> 00:32:59,659
consider that problem that's part of our

00:32:57,139 --> 00:33:01,789
policy problem right personally what I

00:32:59,659 --> 00:33:03,710
would actually recommend is that why

00:33:01,789 --> 00:33:05,690
don't we make mirroring significantly

00:33:03,710 --> 00:33:08,960
easier so I could run a mirror out of my

00:33:05,690 --> 00:33:10,489
house and because right now it's it's

00:33:08,960 --> 00:33:11,629
relatively difficult I would I would say

00:33:10,489 --> 00:33:13,700
actually was trying to increase our

00:33:11,629 --> 00:33:15,139
number of mirrors rather than worry too

00:33:13,700 --> 00:33:17,629
much about the amount of content we're

00:33:15,139 --> 00:33:19,820
pushing through them but to be fair this

00:33:17,629 --> 00:33:22,609
is a problem that fedora is facing maybe

00:33:19,820 --> 00:33:24,230
for modularity yeah I'm here is that are

00:33:22,609 --> 00:33:25,519
uncomfortable with the amount of content

00:33:24,230 --> 00:33:27,559
the fedora carries simply because we

00:33:25,519 --> 00:33:29,899
just carry so damn much yes and it's

00:33:27,559 --> 00:33:32,929
increasing at an exponential rate and

00:33:29,899 --> 00:33:36,139
having dealt with the mirror people

00:33:32,929 --> 00:33:38,119
before there was a an agreement about

00:33:36,139 --> 00:33:41,239
the amount of space that we're allowed

00:33:38,119 --> 00:33:44,269
to use bandwidth etc etc and we're well

00:33:41,239 --> 00:33:48,230
I'm totally over that semi pseudo agreed

00:33:44,269 --> 00:33:50,899
limit rep um and we have huge amounts of

00:33:48,230 --> 00:33:54,070
problems getting mirrors as it is and

00:33:50,899 --> 00:33:59,210
there are certain areas in the world

00:33:54,070 --> 00:34:01,190
South America Australia like if you're

00:33:59,210 --> 00:34:03,249
on certain networks in Australia you

00:34:01,190 --> 00:34:05,840
basically have to go to the US and back

00:34:03,249 --> 00:34:08,359
don't get access to the data because

00:34:05,840 --> 00:34:09,980
okay let me pause there so so basically

00:34:08,359 --> 00:34:12,409
there is definitely concern about

00:34:09,980 --> 00:34:15,109
mirrors it actually existed prior to

00:34:12,409 --> 00:34:16,520
modularity anyway yeah but you know

00:34:15,109 --> 00:34:19,210
modularity potentially could make it

00:34:16,520 --> 00:34:21,559
worse and I definitely agree but again I

00:34:19,210 --> 00:34:23,210
would reiterate it's like we've got a

00:34:21,559 --> 00:34:27,440
member that we've spent whatever ten

00:34:23,210 --> 00:34:28,700
years plus you know standing up policy

00:34:27,440 --> 00:34:31,669
around the way we do things today

00:34:28,700 --> 00:34:32,960
because we have a new more flexible way

00:34:31,669 --> 00:34:35,389
of doing things doesn't mean we don't

00:34:32,960 --> 00:34:37,819
mean policy around how we do them that

00:34:35,389 --> 00:34:38,520
makes it seem oddly thing one last

00:34:37,819 --> 00:34:40,050
comment

00:34:38,520 --> 00:34:41,909
this and then move on because it's kind

00:34:40,050 --> 00:34:43,740
of outside the scope of this talk but

00:34:41,909 --> 00:34:46,409
one there is actually one place that

00:34:43,740 --> 00:34:49,800
modularity can make this less of an

00:34:46,409 --> 00:34:51,780
issue and that is that in the Fedora

00:34:49,800 --> 00:34:53,220
project because of the way that RPMs

00:34:51,780 --> 00:34:55,320
have worked in past you've always had to

00:34:53,220 --> 00:34:57,690
package all of your dependencies first

00:34:55,320 --> 00:34:59,460
and then get those into Fedora and that

00:34:57,690 --> 00:35:01,140
those fill up the area the repository

00:34:59,460 --> 00:35:03,090
the repositories and those also fill up

00:35:01,140 --> 00:35:04,230
you know your maintenance time because

00:35:03,090 --> 00:35:05,850
now you're maintaining some other pet

00:35:04,230 --> 00:35:08,370
some package that some other package of

00:35:05,850 --> 00:35:11,070
packages are depending on modularity

00:35:08,370 --> 00:35:13,320
allows you the ability to to build your

00:35:11,070 --> 00:35:15,120
build depths and reuse them just for

00:35:13,320 --> 00:35:18,570
your package and then not ship that

00:35:15,120 --> 00:35:20,190
those build depths so if we if we move a

00:35:18,570 --> 00:35:21,360
lot more people to modularity I suspect

00:35:20,190 --> 00:35:23,610
we will discover that there's an awful

00:35:21,360 --> 00:35:25,740
lot of software in fedora that exists

00:35:23,610 --> 00:35:27,780
solely to support the build of some

00:35:25,740 --> 00:35:29,310
other package and we can probably trim

00:35:27,780 --> 00:35:34,100
down the mirrors and some to some degree

00:35:29,310 --> 00:35:34,100
by doing that so Adams here something

00:35:46,930 --> 00:35:53,020
for example if module the material went

00:35:51,260 --> 00:36:04,579
to conversion of three four or five

00:35:53,020 --> 00:36:06,829
three streams but so the question is

00:36:04,579 --> 00:36:11,060
essentially you know what is the policy

00:36:06,829 --> 00:36:12,890
around who owns that which streams are

00:36:11,060 --> 00:36:14,300
available for any given module and I

00:36:12,890 --> 00:36:16,040
would say from the modularity working

00:36:14,300 --> 00:36:18,109
group and let's make sure we set a

00:36:16,040 --> 00:36:20,750
policy for that so there's a lot of

00:36:18,109 --> 00:36:22,069
policy that's open right now and you

00:36:20,750 --> 00:36:23,480
know to some extent this is where we

00:36:22,069 --> 00:36:26,240
need the community to get involved and

00:36:23,480 --> 00:36:28,220
and start to help us be allowed what the

00:36:26,240 --> 00:36:29,750
right policies are I also found that

00:36:28,220 --> 00:36:31,640
we're gonna have the wrong policies at

00:36:29,750 --> 00:36:32,960
first and we will fix them over time I

00:36:31,640 --> 00:36:34,670
assume that the way we would handle that

00:36:32,960 --> 00:36:36,230
policy is the same way we do in Fedora

00:36:34,670 --> 00:36:37,700
and Apple there are plenty of people who

00:36:36,230 --> 00:36:39,079
maintain a package just for Apple

00:36:37,700 --> 00:36:42,079
because the Fedora maintainer doesn't

00:36:39,079 --> 00:36:43,640
want to support an old OS yeah Isis I

00:36:42,079 --> 00:36:45,140
assume we will just simply allow them to

00:36:43,640 --> 00:36:47,300
have access to that branch right if

00:36:45,140 --> 00:36:49,069
they're willing to do it but I reiterate

00:36:47,300 --> 00:36:50,210
the statement come help us define policy

00:36:49,069 --> 00:36:51,290
all right all right

00:36:50,210 --> 00:36:54,530
LuAnn I'm talking about the reasons why

00:36:51,290 --> 00:36:56,210
you might yeah all right so kind of the

00:36:54,530 --> 00:36:57,260
point of this talk is really like when

00:36:56,210 --> 00:36:59,210
does a module make sense for you

00:36:57,260 --> 00:37:06,079
especially given the architecture that

00:36:59,210 --> 00:37:07,040
we end up with for twenty so the current

00:37:06,079 --> 00:37:11,060
architecture

00:37:07,040 --> 00:37:14,359
kind of makes it so that you kind of add

00:37:11,060 --> 00:37:15,859
on the modules so what we want to do was

00:37:14,359 --> 00:37:17,869
a talk about when might you need that

00:37:15,859 --> 00:37:20,180
and so the first example which I think

00:37:17,869 --> 00:37:22,970
most people kind of know about already

00:37:20,180 --> 00:37:25,609
is this one where you want to have two

00:37:22,970 --> 00:37:27,020
versions of something and so we have you

00:37:25,609 --> 00:37:30,220
know big dolls which I thought was

00:37:27,020 --> 00:37:34,790
entertaining and goats those goats sheep

00:37:30,220 --> 00:37:37,099
animal so we have multiple versions of

00:37:34,790 --> 00:37:38,900
something maintained upstream you know

00:37:37,099 --> 00:37:41,450
the Django is a great example right is

00:37:38,900 --> 00:37:44,810
that they are supporting at least two

00:37:41,450 --> 00:37:45,420
probably versions you know as do most of

00:37:44,810 --> 00:37:47,450
those kinds

00:37:45,420 --> 00:37:49,799
frameworks they're usually to inflate

00:37:47,450 --> 00:37:51,780
usually there's no JSS the Department

00:37:49,799 --> 00:37:53,640
example here because they maintain - LTS

00:37:51,780 --> 00:37:55,049
versions enter and and they develop a

00:37:53,640 --> 00:37:57,900
person I think of it right right

00:37:55,049 --> 00:38:00,480
so no js' has even three but like most

00:37:57,900 --> 00:38:01,619
frameworks have at least two you know

00:38:00,480 --> 00:38:03,799
Drupal actually I've been fighting with

00:38:01,619 --> 00:38:06,270
lately they're currently maintaining

00:38:03,799 --> 00:38:07,079
three versions I think six seven and

00:38:06,270 --> 00:38:10,440
eight

00:38:07,079 --> 00:38:12,510
and all of them are not easy to port

00:38:10,440 --> 00:38:13,740
across so that's why they end up

00:38:12,510 --> 00:38:15,809
maintaining them for so long is because

00:38:13,740 --> 00:38:19,500
you it's very very difficult to move

00:38:15,809 --> 00:38:21,599
versions so this is one of the big

00:38:19,500 --> 00:38:25,049
examples basically what we're trying to

00:38:21,599 --> 00:38:26,819
do here is we're trying like it's good

00:38:25,049 --> 00:38:29,220
that the newest version of something is

00:38:26,819 --> 00:38:31,140
available in fedora what's bad is that

00:38:29,220 --> 00:38:32,520
if it's something like a framework it

00:38:31,140 --> 00:38:34,260
means that the newest version of

00:38:32,520 --> 00:38:36,210
something else is not a bit of one

00:38:34,260 --> 00:38:39,059
fedora because they haven't had time to

00:38:36,210 --> 00:38:39,990
port to the newest version right so what

00:38:39,059 --> 00:38:43,619
we're trying to do is give them

00:38:39,990 --> 00:38:46,319
lifecycle flexibility when you know when

00:38:43,619 --> 00:38:48,119
they're ready to do their upgrade you

00:38:46,319 --> 00:38:49,770
know they can kind of they can keep

00:38:48,119 --> 00:38:51,299
maintaining their application in the

00:38:49,770 --> 00:38:56,400
current version until they're ready to

00:38:51,299 --> 00:38:58,740
do that work so that's that one and

00:38:56,400 --> 00:39:02,190
similarly in keeping with fedoras

00:38:58,740 --> 00:39:03,900
you know first identity it also allows

00:39:02,190 --> 00:39:07,109
us like I said with nodejs the example

00:39:03,900 --> 00:39:08,520
is we can carry both LTS versions and

00:39:07,109 --> 00:39:10,290
make one of those you know make them

00:39:08,520 --> 00:39:11,640
newest one of those the default but then

00:39:10,290 --> 00:39:13,349
we can also carry their development

00:39:11,640 --> 00:39:15,030
along for some people who want so we can

00:39:13,349 --> 00:39:17,069
encourage people who want to do new

00:39:15,030 --> 00:39:18,480
Noches development to use for door as

00:39:17,069 --> 00:39:19,710
well and not be required to go off to

00:39:18,480 --> 00:39:23,700
node source or one of those other places

00:39:19,710 --> 00:39:24,990
that has a really hacked up fedora

00:39:23,700 --> 00:39:27,329
implementation it doesn't work very well

00:39:24,990 --> 00:39:28,770
right I mean a lot of this you know a

00:39:27,329 --> 00:39:30,599
good example for this was with Python

00:39:28,770 --> 00:39:32,339
right is that you know didn't want to

00:39:30,599 --> 00:39:33,690
switch fedora to Python three for a long

00:39:32,339 --> 00:39:36,809
time because of how much pythons to

00:39:33,690 --> 00:39:39,150
stuff would break right if you're using

00:39:36,809 --> 00:39:41,040
modularity you don't have to have that

00:39:39,150 --> 00:39:42,990
pain we can continue to make Python to

00:39:41,040 --> 00:39:45,390
the default but make Python three

00:39:42,990 --> 00:39:48,150
available we hope that that one's

00:39:45,390 --> 00:39:50,220
already sort of so they've got that and

00:39:48,150 --> 00:39:50,640
so the exam I thought here so terrible

00:39:50,220 --> 00:39:53,580
example

00:39:50,640 --> 00:39:55,170
let's stop you here swimming if that man

00:39:53,580 --> 00:39:56,700
said that one that one has a minefield

00:39:55,170 --> 00:39:58,260
and we're going to end up in a you know

00:39:56,700 --> 00:39:59,940
a debate rather than a college oh yeah

00:39:58,260 --> 00:40:02,070
so okay so the common things that a

00:39:59,940 --> 00:40:04,770
Python can can do parallel install

00:40:02,070 --> 00:40:07,290
ability on its own I definitely disagree

00:40:04,770 --> 00:40:12,570
that it's the same but whatever let's

00:40:07,290 --> 00:40:14,280
come on alright so the next one is when

00:40:12,570 --> 00:40:16,010
the upstream releases don't align we've

00:40:14,280 --> 00:40:20,010
kind of alluded to this example already

00:40:16,010 --> 00:40:22,070
but the you know Fedora comes out on a

00:40:20,010 --> 00:40:24,570
theoretical you know six-month cadence

00:40:22,070 --> 00:40:27,060
what happens when something comes out in

00:40:24,570 --> 00:40:29,660
1:7 well that means you have to wait a

00:40:27,060 --> 00:40:32,580
whole nother cycle before you get right

00:40:29,660 --> 00:40:34,560
with the modularity we can release them

00:40:32,580 --> 00:40:36,600
whenever we want right in theory

00:40:34,560 --> 00:40:38,520
depending on what it is and how it works

00:40:36,600 --> 00:40:41,490
but for the most part that's the idea is

00:40:38,520 --> 00:40:44,220
that we can ship whatever version comes

00:40:41,490 --> 00:40:46,230
out when it's ready and we can ship it

00:40:44,220 --> 00:40:48,900
for whatever currently supported

00:40:46,230 --> 00:40:49,920
versions of fedora are available we can

00:40:48,900 --> 00:40:52,680
actually do it for more than that

00:40:49,920 --> 00:40:56,100
accepting that policy we don't want to

00:40:52,680 --> 00:40:58,140
right so that's kind of what this is

00:40:56,100 --> 00:41:01,560
talking about is how do we make it so

00:40:58,140 --> 00:41:03,720
that you know software can land when we

00:41:01,560 --> 00:41:05,880
want it to and then on the flip side of

00:41:03,720 --> 00:41:07,710
that we have the older software right so

00:41:05,880 --> 00:41:09,090
things like databases for example have

00:41:07,710 --> 00:41:11,700
it typically oh like a five year life

00:41:09,090 --> 00:41:13,590
cycle do you really need to upgrade your

00:41:11,700 --> 00:41:15,660
database every time a new version of the

00:41:13,590 --> 00:41:18,060
OS comes out most people find that

00:41:15,660 --> 00:41:19,590
incredibly risky right so they stick

00:41:18,060 --> 00:41:24,090
with the version of the database for a

00:41:19,590 --> 00:41:26,700
long time so what this lets us do is let

00:41:24,090 --> 00:41:27,210
you to maintain your existing you know

00:41:26,700 --> 00:41:31,380
whatever

00:41:27,210 --> 00:41:32,880
Maria VB 10 across multiple versions of

00:41:31,380 --> 00:41:35,700
fedora without forcing you to upgrade

00:41:32,880 --> 00:41:38,280
your database until you're ready to make

00:41:35,700 --> 00:41:40,290
that choice considering that the

00:41:38,280 --> 00:41:46,220
database itself doesn't require an

00:41:40,290 --> 00:41:46,220
update all right so the last one

00:41:48,130 --> 00:41:54,950
so this this is similar to the previous

00:41:50,720 --> 00:41:56,810
one it's the the case we usually use as

00:41:54,950 --> 00:42:00,470
an example here would be hypothetically

00:41:56,810 --> 00:42:01,730
free IP a traditionally free IP and they

00:42:00,470 --> 00:42:04,360
would end the fan and the OS release

00:42:01,730 --> 00:42:07,100
have been very tightly related and

00:42:04,360 --> 00:42:09,890
similar to the database case when you go

00:42:07,100 --> 00:42:12,140
to upgrade fedora 28 to Fedor 29

00:42:09,890 --> 00:42:13,880
you're not just saying okay so I'm gonna

00:42:12,140 --> 00:42:15,320
get a newer kernel in newer G let's see

00:42:13,880 --> 00:42:18,110
some newer is some newer batch video

00:42:15,320 --> 00:42:19,850
system local tools and a new G DM or a

00:42:18,110 --> 00:42:21,650
new venue kinome setup what you're

00:42:19,850 --> 00:42:23,030
saying is everything on my system is

00:42:21,650 --> 00:42:25,970
good is upgrading including these

00:42:23,030 --> 00:42:28,240
applications that I rely on so I am NOT

00:42:25,970 --> 00:42:31,010
going to move anything until I can test

00:42:28,240 --> 00:42:32,900
that the entire stack that I could lie

00:42:31,010 --> 00:42:35,750
on my in my infrastructure works and

00:42:32,900 --> 00:42:36,950
that's unreasonable that's one of the

00:42:35,750 --> 00:42:39,560
main reasons why people don't like to

00:42:36,950 --> 00:42:42,530
deploy Fedora production is that you

00:42:39,560 --> 00:42:43,880
can't update the OS and the applications

00:42:42,530 --> 00:42:45,440
on their own on their own separate life

00:42:43,880 --> 00:42:47,810
cycles and so modularity gives us the

00:42:45,440 --> 00:42:50,180
ability to say hey this critical app

00:42:47,810 --> 00:42:52,550
that you're relying on you can lock that

00:42:50,180 --> 00:42:55,580
here and on an upgrade or an update you

00:42:52,550 --> 00:42:58,160
you know even between Fedora 28 but over

00:42:55,580 --> 00:42:59,480
30 as long as you know Fedora 30 is

00:42:58,160 --> 00:43:01,700
still capable of supporting that at that

00:42:59,480 --> 00:43:03,830
application you just update the OS

00:43:01,700 --> 00:43:06,590
underneath and your and the bits on the

00:43:03,830 --> 00:43:08,030
the module providing the application

00:43:06,590 --> 00:43:10,310
will stay the same so it allows you to

00:43:08,030 --> 00:43:12,230
update your at your OS which may mean

00:43:10,310 --> 00:43:13,850
that you get a you know low level kernel

00:43:12,230 --> 00:43:15,560
uh security updates and other than all

00:43:13,850 --> 00:43:19,100
sorts of you have new performance

00:43:15,560 --> 00:43:20,720
enhancements but you're actually the

00:43:19,100 --> 00:43:23,120
thing you care about is your application

00:43:20,720 --> 00:43:24,590
and then we've hammered this on is that

00:43:23,120 --> 00:43:25,280
nobody really cares what OS you're

00:43:24,590 --> 00:43:28,010
running as long as your application

00:43:25,280 --> 00:43:30,290
keeps going this is a way to do that and

00:43:28,010 --> 00:43:32,930
allow us to keep our fast a west

00:43:30,290 --> 00:43:34,490
schedule without that without it it is

00:43:32,930 --> 00:43:35,930
hopefully a way to get us from the set

00:43:34,490 --> 00:43:39,380
of users that are they're always update

00:43:35,930 --> 00:43:40,400
to two releases at a time because they

00:43:39,380 --> 00:43:43,460
they're because they just push

00:43:40,400 --> 00:43:45,050
everything they push off this pane for

00:43:43,460 --> 00:43:47,060
whatever whole year is that every six

00:43:45,050 --> 00:43:50,410
months and it allows us to get to a

00:43:47,060 --> 00:43:52,510
point where it or at 28 to 29 and 20

00:43:50,410 --> 00:43:55,000
thirty those are more like service packs

00:43:52,510 --> 00:43:57,099
than they are upgrades yeah you also

00:43:55,000 --> 00:43:58,900
have this this case in the application

00:43:57,099 --> 00:44:01,930
developer scenario and kind of the

00:43:58,900 --> 00:44:04,960
reverse where you want the bleeding edge

00:44:01,930 --> 00:44:06,430
of you know no gas because you know

00:44:04,960 --> 00:44:08,650
you're going to be deploying in three to

00:44:06,430 --> 00:44:10,690
six months and do you know that version

00:44:08,650 --> 00:44:12,160
will be stable by then so you want to go

00:44:10,690 --> 00:44:14,380
you want to do all your development on

00:44:12,160 --> 00:44:16,809
the dead version of nodejs

00:44:14,380 --> 00:44:18,490
so the idea is that okay but you still

00:44:16,809 --> 00:44:21,010
want to be able to upgrade here your

00:44:18,490 --> 00:44:23,410
operating system itself on your laptop

00:44:21,010 --> 00:44:24,670
or on your workstation or whatever so to

00:44:23,410 --> 00:44:26,650
provide be able to provide some

00:44:24,670 --> 00:44:28,630
independence there means that you don't

00:44:26,650 --> 00:44:30,789
turn off updates for six months while

00:44:28,630 --> 00:44:33,700
you're doing development which I know I

00:44:30,789 --> 00:44:35,799
have done before particularly on Windows

00:44:33,700 --> 00:44:39,010
because I know that there's a potential

00:44:35,799 --> 00:44:41,770
that those updates may impact my code

00:44:39,010 --> 00:44:44,020
and I want to scope the time period

00:44:41,770 --> 00:44:46,480
where I'm fighting through that fire to

00:44:44,020 --> 00:44:49,329
one period of time so you turn off

00:44:46,480 --> 00:44:51,940
updates for X amount of time and then

00:44:49,329 --> 00:44:52,990
all at once you turn on updates you take

00:44:51,940 --> 00:44:55,990
all the updates and then you go through

00:44:52,990 --> 00:44:57,640
your whole test CI whatever cycle and go

00:44:55,990 --> 00:45:00,069
and just deal with bugs from the upgrade

00:44:57,640 --> 00:45:01,390
so it's also the reverse case where you

00:45:00,069 --> 00:45:02,650
want the bleeding edge stuff but you

00:45:01,390 --> 00:45:08,380
want to still be able to take regular

00:45:02,650 --> 00:45:09,789
updates all right so one of the other

00:45:08,380 --> 00:45:13,900
things I want to make the point of and

00:45:09,789 --> 00:45:15,520
also teaser for my next service light

00:45:13,900 --> 00:45:18,130
here and I didn't I I forgot to so

00:45:15,520 --> 00:45:19,539
before this I wanted to cover a couple

00:45:18,130 --> 00:45:25,000
of the cases where modularity

00:45:19,539 --> 00:45:27,069
is not a good fit and so for example I

00:45:25,000 --> 00:45:30,010
do not foresee a world in which we

00:45:27,069 --> 00:45:32,740
modular eyes do you see I don't see I

00:45:30,010 --> 00:45:35,740
don't see a world where extremely common

00:45:32,740 --> 00:45:39,760
low level libraries are anything but

00:45:35,740 --> 00:45:44,319
part of the OS itself these if you've

00:45:39,760 --> 00:45:49,450
got if you've got G Lucy or you have I'm

00:45:44,319 --> 00:45:51,190
sorry here doesn't some of the problems

00:45:49,450 --> 00:45:55,750
where you're saying on one occasion one

00:45:51,190 --> 00:45:56,340
as version X like and then upgrade a

00:45:55,750 --> 00:45:57,930
different

00:45:56,340 --> 00:46:00,900
isn't some of that just fixed by running

00:45:57,930 --> 00:46:04,020
a mall in several containers so the

00:46:00,900 --> 00:46:06,180
question is basically if you want to

00:46:04,020 --> 00:46:08,820
have lifecycle independence between

00:46:06,180 --> 00:46:11,370
different limits PS say our app or

00:46:08,820 --> 00:46:15,240
distro couldn't you just use containers

00:46:11,370 --> 00:46:17,040
for that and the answer is sometimes

00:46:15,240 --> 00:46:19,200
in fact right if you look at data

00:46:17,040 --> 00:46:21,270
centers before containers most people

00:46:19,200 --> 00:46:22,830
run a VM for application now they're

00:46:21,270 --> 00:46:24,030
making that cheaper by doing it with

00:46:22,830 --> 00:46:30,060
containers but they're doing the same

00:46:24,030 --> 00:46:32,580
thing okay kind of like your RDA example

00:46:30,060 --> 00:46:34,710
like one of the flaws in that is IPA

00:46:32,580 --> 00:46:36,720
doesn't support running alongside other

00:46:34,710 --> 00:46:39,450
applications on the same machine so the

00:46:36,720 --> 00:46:41,580
problem is also though that you have you

00:46:39,450 --> 00:46:43,290
have other stuff besides IPA in your

00:46:41,580 --> 00:46:46,050
container and you may want to also

00:46:43,290 --> 00:46:48,960
upgrade that stuff question oh sorry so

00:46:46,050 --> 00:46:50,820
the example is going back to the

00:46:48,960 --> 00:46:52,800
container example or a VM example or a

00:46:50,820 --> 00:46:55,740
physical server example even if you're

00:46:52,800 --> 00:46:59,460
dedicating basically the the user space

00:46:55,740 --> 00:47:01,800
to one given application does that solve

00:46:59,460 --> 00:47:04,350
this problem in and of itself and the

00:47:01,800 --> 00:47:08,340
answer I would say is sometimes but that

00:47:04,350 --> 00:47:09,900
I think you're glossing over the other

00:47:08,340 --> 00:47:12,590
updates that are but that need to take

00:47:09,900 --> 00:47:15,630
place inside that user expanse that

00:47:12,590 --> 00:47:17,550
modularity can still help with and the

00:47:15,630 --> 00:47:21,030
other side of things too is the content

00:47:17,550 --> 00:47:22,680
that goes into your containers there are

00:47:21,030 --> 00:47:24,090
times when you want that containers user

00:47:22,680 --> 00:47:25,650
space to be the latest and greatest

00:47:24,090 --> 00:47:27,900
because you've got the list a new heart

00:47:25,650 --> 00:47:30,150
bleed or the new you know whatever it

00:47:27,900 --> 00:47:33,330
whatever new named vulnerability we've

00:47:30,150 --> 00:47:34,950
got and but you still want to have that

00:47:33,330 --> 00:47:36,000
same exact application you don't want

00:47:34,950 --> 00:47:38,280
you know you don't want to have to be

00:47:36,000 --> 00:47:40,020
required to pull down some new upstream

00:47:38,280 --> 00:47:42,960
version because they built it on top of

00:47:40,020 --> 00:47:45,060
the other one so constructing those

00:47:42,960 --> 00:47:50,310
containers modularity gives you it gives

00:47:45,060 --> 00:47:52,080
you that control as well okay so the

00:47:50,310 --> 00:47:56,790
example of kind of wouldn't modular is a

00:47:52,080 --> 00:47:59,220
bad idea you know is low-level heavily

00:47:56,790 --> 00:48:01,620
shared system components are probably

00:47:59,220 --> 00:48:02,720
not a great fit which is what we kind of

00:48:01,620 --> 00:48:06,140
discovered when we were

00:48:02,720 --> 00:48:09,080
to build the base OS or platform modules

00:48:06,140 --> 00:48:10,880
is that the maintenance and effort

00:48:09,080 --> 00:48:15,080
around that is as much as doing the

00:48:10,880 --> 00:48:17,750
whole district and having multiple

00:48:15,080 --> 00:48:21,790
versions available of any of those

00:48:17,750 --> 00:48:24,800
individual components is not very useful

00:48:21,790 --> 00:48:26,300
so that's probably used to shy away from

00:48:24,800 --> 00:48:28,880
it if it's something that's heavily

00:48:26,300 --> 00:48:30,980
reused by you know kind of everyone else

00:48:28,880 --> 00:48:34,790
a traditional rpm probably makes more

00:48:30,980 --> 00:48:36,770
sense the flipside of that is maybe

00:48:34,790 --> 00:48:40,580
we'll get there someday right maybe

00:48:36,770 --> 00:48:43,160
we'll see a way to to start to simplify

00:48:40,580 --> 00:48:45,859
those components so that we can do more

00:48:43,160 --> 00:48:47,900
shared components in this way but that

00:48:45,859 --> 00:48:50,780
day is not today and it's probably not

00:48:47,900 --> 00:48:52,490
for several years so we need to it's

00:48:50,780 --> 00:48:55,070
like a lot of new things when we have

00:48:52,490 --> 00:48:56,630
new capabilities we we should feel out

00:48:55,070 --> 00:48:59,720
how they work before making

00:48:56,630 --> 00:49:01,340
long-standing hard decisions about it

00:48:59,720 --> 00:49:04,369
what modularity is trying to do is offer

00:49:01,340 --> 00:49:07,609
flexibility in our decision-making it is

00:49:04,369 --> 00:49:09,820
not trying to say that everything should

00:49:07,609 --> 00:49:12,770
be a module right it's trying to say

00:49:09,820 --> 00:49:15,500
sometimes it makes sense and sometimes

00:49:12,770 --> 00:49:17,030
it doesn't and we want to have the build

00:49:15,500 --> 00:49:19,430
infrastructure flexibility that we can

00:49:17,030 --> 00:49:21,920
make those choices based on the software

00:49:19,430 --> 00:49:30,560
itself rather than based on what our

00:49:21,920 --> 00:49:31,910
build infrastructure can build so what I

00:49:30,560 --> 00:49:34,670
wanted to talk about here is just that

00:49:31,910 --> 00:49:38,869
there are other distros that are also

00:49:34,670 --> 00:49:41,570
doing this and you know and so here are

00:49:38,869 --> 00:49:44,690
basically some quick examples Amazon

00:49:41,570 --> 00:49:48,140
Linux - extras is what it's actually

00:49:44,690 --> 00:49:51,130
called starts to do something kind of

00:49:48,140 --> 00:49:53,390
like modularity where it they offer

00:49:51,130 --> 00:49:56,630
alternate versions of things in separate

00:49:53,390 --> 00:49:57,950
repos that you can install if you want

00:49:56,630 --> 00:50:00,680
to know more about it

00:49:57,950 --> 00:50:03,920
earlier sousei modules sousei is now

00:50:00,680 --> 00:50:05,839
offering in their Enterprise editions at

00:50:03,920 --> 00:50:07,910
least they were last time I looked in

00:50:05,839 --> 00:50:09,470
their Enterprise editions alternate

00:50:07,910 --> 00:50:11,569
repos with different versions of

00:50:09,470 --> 00:50:15,260
software they're doing more like it's

00:50:11,569 --> 00:50:16,250
more like rels extras so you they have I

00:50:15,260 --> 00:50:17,750
think that one's called like web

00:50:16,250 --> 00:50:20,089
development and so they have a bunch of

00:50:17,750 --> 00:50:21,740
new versions of say PHP in there but

00:50:20,089 --> 00:50:23,540
they're kind of mixed together into one

00:50:21,740 --> 00:50:25,730
repo so you enable that repo and you

00:50:23,540 --> 00:50:27,740
have options on a new version of PHP and

00:50:25,730 --> 00:50:28,910
a new version of nginx you know but then

00:50:27,740 --> 00:50:31,900
they have a couple of they have like

00:50:28,910 --> 00:50:36,579
five or seven different vers repos

00:50:31,900 --> 00:50:39,859
various subjects quicksand Nix OS is

00:50:36,579 --> 00:50:42,890
actually modularity if we could burn

00:50:39,859 --> 00:50:46,730
everything down and do it right it's

00:50:42,890 --> 00:50:50,630
really interesting from a user

00:50:46,730 --> 00:50:52,790
perspective it's very different right so

00:50:50,630 --> 00:50:54,650
like if we were totally fine with just

00:50:52,790 --> 00:50:56,720
you know everyone forgetting about this

00:50:54,650 --> 00:50:59,180
whole young the DNF thing altogether and

00:50:56,720 --> 00:51:02,000
just do things completely differently

00:50:59,180 --> 00:51:03,980
from the get-go Nix does a really

00:51:02,000 --> 00:51:08,839
interesting job of this I would actually

00:51:03,980 --> 00:51:11,030
going back to Peter's point that a lot

00:51:08,839 --> 00:51:14,599
of that advantage that they give is

00:51:11,030 --> 00:51:16,160
actually solved in containers so you

00:51:14,599 --> 00:51:17,900
know the parallel install ability is

00:51:16,160 --> 00:51:19,430
stuff that they're capable of is well

00:51:17,900 --> 00:51:22,160
really interesting it may not be that

00:51:19,430 --> 00:51:24,250
necessary especially not necessary

00:51:22,160 --> 00:51:27,790
enough to burn everything good grant

00:51:24,250 --> 00:51:30,530
yeah good I was going to have an example

00:51:27,790 --> 00:51:30,980
from the past the containers were not

00:51:30,530 --> 00:51:35,930
absoulte

00:51:30,980 --> 00:51:38,540
is when rails 4 came into fedora with a

00:51:35,930 --> 00:51:42,859
version of fedora with rail with rails 3

00:51:38,540 --> 00:51:45,440
and of life before rails 3 did and there

00:51:42,859 --> 00:51:48,079
was literally no way if you had not done

00:51:45,440 --> 00:51:51,470
the non-trivial task according to Russ

00:51:48,079 --> 00:51:55,520
for like we do yes so the example of

00:51:51,470 --> 00:51:56,730
basically is when rails 4 came out it

00:51:55,520 --> 00:51:59,670
basically missed

00:51:56,730 --> 00:52:00,690
release schedule window correctly you

00:51:59,670 --> 00:52:02,280
know it feel like it wasn't time

00:52:00,690 --> 00:52:04,950
perfectly with fedora so he was

00:52:02,280 --> 00:52:07,620
incredibly difficult to get from rails 3

00:52:04,950 --> 00:52:10,050
apps to Rails for apps no no real so

00:52:07,620 --> 00:52:12,360
real support went into fedora soul is a

00:52:10,050 --> 00:52:15,630
remote was let's say but the nor 15 came

00:52:12,360 --> 00:52:17,490
out with rails 4 and then fedora 16 came

00:52:15,630 --> 00:52:19,230
out and still had rails 4 but rails 4

00:52:17,490 --> 00:52:23,490
completely replaced rails 3 in the

00:52:19,230 --> 00:52:25,700
distro right but we had an app in this

00:52:23,490 --> 00:52:28,500
same team I was on written in rails 3

00:52:25,700 --> 00:52:30,810
and a very non-trivial to port to real

00:52:28,500 --> 00:52:33,960
sport but by the time we were able to

00:52:30,810 --> 00:52:38,100
port rails for the version of fedora

00:52:33,960 --> 00:52:39,330
with rails 3 was end-of-life so we we

00:52:38,100 --> 00:52:41,130
could have stuck in a container but then

00:52:39,330 --> 00:52:43,170
the entire container runtime doesn't get

00:52:41,130 --> 00:52:45,480
secured at this right so ok so the

00:52:43,170 --> 00:52:46,980
example I guess I just kind of state

00:52:45,480 --> 00:52:50,240
you're wrong I understood your point I

00:52:46,980 --> 00:52:52,350
just spoke it poorly oh no matter I was

00:52:50,240 --> 00:52:53,730
busy this is one of those cases that

00:52:52,350 --> 00:52:57,000
modularity would make easier never

00:52:53,730 --> 00:53:01,320
repeat so yeah so basically the example

00:52:57,000 --> 00:53:04,890
was that rails 3 was in version X of

00:53:01,320 --> 00:53:08,430
fedora rails 4 came out in version why

00:53:04,890 --> 00:53:11,010
they upgrade from rails 3 to rails 4 was

00:53:08,430 --> 00:53:13,950
non-trivial so most large applications

00:53:11,010 --> 00:53:16,260
that were using rails 3 were stuck and

00:53:13,950 --> 00:53:18,720
many of them stuck long enough that the

00:53:16,260 --> 00:53:20,970
version of the Northeast Ohio's 3 end of

00:53:18,720 --> 00:53:23,550
life before they actually got to do the

00:53:20,970 --> 00:53:25,200
upgrade and this is my exact example if

00:53:23,550 --> 00:53:28,260
like Drupal was the same problem I

00:53:25,200 --> 00:53:30,390
actually remember when Drupal had not

00:53:28,260 --> 00:53:32,610
upgraded to PHP I want to say 5 3 and

00:53:30,390 --> 00:53:34,260
all the distros adopted it so it wasn't

00:53:32,610 --> 00:53:36,540
even a distro you could choose that you

00:53:34,260 --> 00:53:39,020
could run google on you had to back pin

00:53:36,540 --> 00:53:42,210
or you had to pin it to older versions

00:53:39,020 --> 00:53:45,300
and it took it took Drupal like 6 months

00:53:42,210 --> 00:53:49,140
or a year to upgrade which is not cool

00:53:45,300 --> 00:53:50,850
so not on the Drupal guys not cool for

00:53:49,140 --> 00:53:54,020
anybody trying to run that for us

00:53:50,850 --> 00:53:56,180
alright so finally moving on now uh so

00:53:54,020 --> 00:53:59,310
this is kind of explaining

00:53:56,180 --> 00:54:01,999
modularity in kind of a new architecture

00:53:59,310 --> 00:54:05,329
which is basically that there's kind of

00:54:01,999 --> 00:54:08,179
a set of rpms or we have been jokingly

00:54:05,329 --> 00:54:11,419
referred to as bear rpms which of course

00:54:08,179 --> 00:54:13,639
sounds like the bear like the animal so

00:54:11,419 --> 00:54:16,189
then we end up with like ursine rpms and

00:54:13,639 --> 00:54:17,949
we ended up with what medve I don't know

00:54:16,189 --> 00:54:20,359
how to say that like that

00:54:17,949 --> 00:54:23,209
rpms etcetera so any word that you can

00:54:20,359 --> 00:54:26,809
think of for bear then rpm is also

00:54:23,209 --> 00:54:28,309
entertaining for us and then you have

00:54:26,809 --> 00:54:30,949
the models kind of sitting on top of it

00:54:28,309 --> 00:54:32,389
so you know the names are a little

00:54:30,949 --> 00:54:33,799
arbitrary but you know kind of imagine

00:54:32,389 --> 00:54:36,079
the application streams up on the top

00:54:33,799 --> 00:54:37,789
right and then the kind of the base or

00:54:36,079 --> 00:54:44,539
you know what is essentially the

00:54:37,789 --> 00:54:47,089
everything Rico today yes yes the calc

00:54:44,539 --> 00:54:49,039
use case is a major driver of all of

00:54:47,089 --> 00:54:53,149
modularity because there's apparently

00:54:49,039 --> 00:55:00,079
both a stable and developers of the calc

00:54:53,149 --> 00:55:02,379
application because you know all right

00:55:00,079 --> 00:55:06,649
so moving on

00:55:02,379 --> 00:55:07,369
and yeah Q&A which is good you can wear

00:55:06,649 --> 00:55:10,309
it two minutes

00:55:07,369 --> 00:55:13,369
oh good excellent so we timed it well we

00:55:10,309 --> 00:55:15,259
we planned the tech problems all right -

00:55:13,369 --> 00:55:17,209
do you have any more general questions

00:55:15,259 --> 00:55:19,939
we weren't sure if we wanted to show up

00:55:17,209 --> 00:55:24,079
like the actual examples and wardo

00:55:19,939 --> 00:55:25,459
actually had his hand up fastest oh but

00:55:24,079 --> 00:55:29,839
Brendan's what he wants Brendan to go

00:55:25,459 --> 00:55:31,399
first do you have specific policy that

00:55:29,839 --> 00:55:33,859
you're advocating for now that we have

00:55:31,399 --> 00:55:35,509
this technology in fedora so the

00:55:33,859 --> 00:55:39,199
question is do we have a specific

00:55:35,509 --> 00:55:42,799
policies that we would advocate for in

00:55:39,199 --> 00:55:45,499
fedora to make to keep this state well

00:55:42,799 --> 00:55:48,559
my first policy would be back the CI

00:55:45,499 --> 00:55:51,199
objective because that widens our

00:55:48,559 --> 00:55:54,679
abilities by a lot right the second we

00:55:51,199 --> 00:55:57,469
have good solid CI in the infrastructure

00:55:54,679 --> 00:55:59,059
a lot of our concerns about the number

00:55:57,469 --> 00:56:01,480
of different streams of things that we

00:55:59,059 --> 00:56:04,450
have are at least lessened if not

00:56:01,480 --> 00:56:05,650
all right so that's a huge thing I think

00:56:04,450 --> 00:56:07,420
it's really really important to the

00:56:05,650 --> 00:56:10,540
modularity project I thought so from the

00:56:07,420 --> 00:56:13,270
get-go so that's the first thing the

00:56:10,540 --> 00:56:15,070
next thing is I think we should also we

00:56:13,270 --> 00:56:18,340
should start small right in the sense

00:56:15,070 --> 00:56:22,030
that you know two streams of something

00:56:18,340 --> 00:56:23,830
is probably the limit at least if the

00:56:22,030 --> 00:56:29,920
well sorry and when I say two streams i

00:56:23,830 --> 00:56:31,420
mean there's maybe something you know

00:56:29,920 --> 00:56:33,040
there's there's a version of it in the

00:56:31,420 --> 00:56:35,470
basis right and then there's a there's

00:56:33,040 --> 00:56:39,070
one other version right so so two

00:56:35,470 --> 00:56:41,200
variants is not right so now we might

00:56:39,070 --> 00:56:43,090
have a few exceptions but for the most

00:56:41,200 --> 00:56:45,640
part we probably want to try to limit it

00:56:43,090 --> 00:56:48,100
to two ish until we really start to feel

00:56:45,640 --> 00:56:52,890
how much work it actually is so those

00:56:48,100 --> 00:56:52,890
would be some things let's see what else

00:56:55,619 --> 00:56:59,109
again I'm going to okay I'm going to

00:56:57,640 --> 00:57:03,100
disagree with you that I think the cost

00:56:59,109 --> 00:57:04,960
I think the policy I wouldn't set this

00:57:03,100 --> 00:57:07,990
as a formal policy I would just say that

00:57:04,960 --> 00:57:09,550
anyone who is doing the one who was

00:57:07,990 --> 00:57:11,230
willing to do the work is allowed to do

00:57:09,550 --> 00:57:13,180
the work if they if they find that it's

00:57:11,230 --> 00:57:15,070
too much effort then they drop a stream

00:57:13,180 --> 00:57:17,050
in the next release right right which

00:57:15,070 --> 00:57:19,960
our experience been Stephen we've been

00:57:17,050 --> 00:57:22,359
doing a chase and it might experience

00:57:19,960 --> 00:57:24,580
the multiple look like versus this day

00:57:22,359 --> 00:57:26,109
honestly I have found it with no js'

00:57:24,580 --> 00:57:27,730
specifically that has oh nothing about

00:57:26,109 --> 00:57:29,560
questions sorry the question was how was

00:57:27,730 --> 00:57:32,290
my personal experience I know I'm

00:57:29,560 --> 00:57:34,869
getting flagged for time so this will be

00:57:32,290 --> 00:57:38,830
other less answer sorry my experience

00:57:34,869 --> 00:57:40,600
has been that it has been minimal

00:57:38,830 --> 00:57:42,130
minimal additional effort over

00:57:40,600 --> 00:57:44,770
maintaining nodejs to begin with

00:57:42,130 --> 00:57:49,619
although we are talking about it you

00:57:44,770 --> 00:57:51,820
know 1% being a very large chunk but

00:57:49,619 --> 00:57:53,590
it's a little bit of additional work but

00:57:51,820 --> 00:57:55,050
also the module stream expansion stuff

00:57:53,590 --> 00:57:57,720
which we'll talk about later in

00:57:55,050 --> 00:58:00,450
Mohan it makes it a lot easier for me to

00:57:57,720 --> 00:58:03,450
get it running on 28:29 at the same time

00:58:00,450 --> 00:58:04,980
as well so there it it pretty much

00:58:03,450 --> 00:58:06,270
balances out I haven't actually found it

00:58:04,980 --> 00:58:09,750
to be more work than the backer then

00:58:06,270 --> 00:58:13,470
regular package movements alright so I

00:58:09,750 --> 00:58:20,310
think we are at time so

00:58:13,470 --> 00:58:20,310

YouTube URL: https://www.youtube.com/watch?v=aW8MuYk-9So


