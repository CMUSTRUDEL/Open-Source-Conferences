Title: Flock 2018 - State of cryptography in Fedora
Publication date: 2018-09-08
Playlist: Flock 2018
Description: 
	Friday, August 10, 2018 
10:20am - 11:10am
@Dresden

Talk: State of cryptography in Fedora
Presenters: Nikos Mavrogiannopoulos

Description: This talk goes through all the crypto related changes in Fedora starting from the crypto consolidation project, to more recent consistent crypto policy projects, and put them into perspective, as well as provide the overall strategy behind Fedora's crypto story. It also goes through future challenges for Fedora related to cryptography and security in general.
Captions: 
	00:00:04,430 --> 00:00:11,130
thank you for coming in Nicholas and I'm

00:00:08,610 --> 00:00:15,540
gonna present the state of cryptography

00:00:11,130 --> 00:00:18,830
in fedora hey Who am I I work for a

00:00:15,540 --> 00:00:22,080
redhead food that I had a crypto team we

00:00:18,830 --> 00:00:24,420
supervise a lot of components I would

00:00:22,080 --> 00:00:29,880
relate to crypto both in Red Hat

00:00:24,420 --> 00:00:31,500
Enterprise Linux and fedora I myself I

00:00:29,880 --> 00:00:36,870
contribute to open source software to

00:00:31,500 --> 00:00:38,550
free software and fedora of course so

00:00:36,870 --> 00:00:41,550
let me move on

00:00:38,550 --> 00:00:42,809
hey what this talk I will be about it

00:00:41,550 --> 00:00:47,010
would go through the major initiatives

00:00:42,809 --> 00:00:51,680
in Fedora cryptographic support I will

00:00:47,010 --> 00:00:56,070
also go through should briefly issue few

00:00:51,680 --> 00:00:59,129
important future directions and why is

00:00:56,070 --> 00:01:01,530
it useful to go through all these major

00:00:59,129 --> 00:01:03,600
major initiatives it's because we can

00:01:01,530 --> 00:01:08,010
learn from our mistakes there have been

00:01:03,600 --> 00:01:10,710
mistakes down there and we can also see

00:01:08,010 --> 00:01:15,689
our current status and current

00:01:10,710 --> 00:01:17,250
directions that we have taken so let me

00:01:15,689 --> 00:01:20,759
start from the beginning at the

00:01:17,250 --> 00:01:22,020
beginning is the early days of fedora

00:01:20,759 --> 00:01:25,860
and rahael itself

00:01:22,020 --> 00:01:28,740
I split it into two major periods the

00:01:25,860 --> 00:01:31,520
early days is a period where community

00:01:28,740 --> 00:01:36,329
and fedora and the record on one side

00:01:31,520 --> 00:01:38,070
were on different were separate on one

00:01:36,329 --> 00:01:41,369
side was the community doing one thing

00:01:38,070 --> 00:01:44,399
and the other side was Red Hat and

00:01:41,369 --> 00:01:49,079
Fedora doing a different thing and how

00:01:44,399 --> 00:01:52,380
did we end up there let me start telling

00:01:49,079 --> 00:01:55,530
a story so a record was entering the

00:01:52,380 --> 00:01:58,140
business world at the time we were the

00:01:55,530 --> 00:02:00,899
outside where I wanted to sell into

00:01:58,140 --> 00:02:03,920
financial sector into highly regulated

00:02:00,899 --> 00:02:05,969
industries so we were looking at

00:02:03,920 --> 00:02:07,979
certifications like comma criteria like

00:02:05,969 --> 00:02:09,239
Phipps and we wanted to get there to

00:02:07,979 --> 00:02:11,450
make open-source software

00:02:09,239 --> 00:02:13,290
pass all the certifications that

00:02:11,450 --> 00:02:16,650
commercial software all the time

00:02:13,290 --> 00:02:19,709
had a proprietary software all the time

00:02:16,650 --> 00:02:22,500
had I so in a way we managed the

00:02:19,709 --> 00:02:24,480
open-source entered highly regulated

00:02:22,500 --> 00:02:27,840
sectors the mining sectors have the

00:02:24,480 --> 00:02:30,390
financial sector quite successfully

00:02:27,840 --> 00:02:33,000
today nobody quences not quite

00:02:30,390 --> 00:02:37,400
today everything open source is very

00:02:33,000 --> 00:02:40,019
widespread and how do we manage this

00:02:37,400 --> 00:02:42,689
through a project called the fedora

00:02:40,019 --> 00:02:45,689
consolidation keep the consolidation

00:02:42,689 --> 00:02:48,629
project I don't know how many of you are

00:02:45,689 --> 00:02:51,900
familiar with that project if you have

00:02:48,629 --> 00:02:55,799
participated with it I may ask how many

00:02:51,900 --> 00:02:58,439
1 2 4 ok I will explain a little more

00:02:55,799 --> 00:03:00,569
about this project it was about a

00:02:58,439 --> 00:03:04,349
project to consolidate all the crypto to

00:03:00,569 --> 00:03:07,230
a single one because we saw there were

00:03:04,349 --> 00:03:10,200
there were many crypto libraries crypto

00:03:07,230 --> 00:03:12,510
backends in open source maybe way too

00:03:10,200 --> 00:03:15,090
many other time we thought at the time

00:03:12,510 --> 00:03:17,419
and it made sense to consolidate them in

00:03:15,090 --> 00:03:19,169
one so that we can easier certified

00:03:17,419 --> 00:03:21,239
certification was a very expensive

00:03:19,169 --> 00:03:24,690
process and I record was very small at

00:03:21,239 --> 00:03:28,440
the time we wanted to consolidate it in

00:03:24,690 --> 00:03:31,739
one and in a way we wanted to change the

00:03:28,440 --> 00:03:37,829
crypto landscape with a bulldozer that's

00:03:31,739 --> 00:03:43,049
why we had one bulldozer so it we didn't

00:03:37,829 --> 00:03:46,889
succeed so what was happening further

00:03:43,049 --> 00:03:49,560
all the time record was focused on NSS

00:03:46,889 --> 00:03:51,139
which was the selected library to

00:03:49,560 --> 00:03:54,000
replace everything

00:03:51,139 --> 00:03:57,049
Fedora was kind of following behind on

00:03:54,000 --> 00:03:59,459
what considering NSS the primary choice

00:03:57,049 --> 00:04:01,680
but everything else was actually

00:03:59,459 --> 00:04:03,919
building up without anyone paying

00:04:01,680 --> 00:04:07,079
attention open sorry will being updated

00:04:03,919 --> 00:04:09,479
utilize the same ignore everything else

00:04:07,079 --> 00:04:12,599
he was using their crypto libraries but

00:04:09,479 --> 00:04:14,639
no one was paying attention at least in

00:04:12,599 --> 00:04:17,459
organized way from the perspective of an

00:04:14,639 --> 00:04:18,359
operating system so all husbands were

00:04:17,459 --> 00:04:22,860
upstream driven

00:04:18,359 --> 00:04:24,750
we're entering Fedorenko coordinated and

00:04:22,860 --> 00:04:25,980
and we ended up with a very complex

00:04:24,750 --> 00:04:28,830
landscape like

00:04:25,980 --> 00:04:30,390
roxtor and he had a lot rough edges he

00:04:28,830 --> 00:04:35,370
did have a feeling of an operating

00:04:30,390 --> 00:04:38,730
system the second phase of that story is

00:04:35,370 --> 00:04:42,720
the reconsideration phase at the time

00:04:38,730 --> 00:04:44,160
ratchet and probably most of the direct

00:04:42,720 --> 00:04:46,550
contributors had realized that the

00:04:44,160 --> 00:04:51,620
consolidation project failed

00:04:46,550 --> 00:04:55,110
and something changed then and

00:04:51,620 --> 00:04:58,620
let me go again to the end of this phase

00:04:55,110 --> 00:05:02,480
it was that Fedora at least in my view

00:04:58,620 --> 00:05:05,910
and record were closer to the community

00:05:02,480 --> 00:05:07,620
why did that matter to us because we

00:05:05,910 --> 00:05:10,440
don't want to only pull from the

00:05:07,620 --> 00:05:12,510
community as Fedora we are an operating

00:05:10,440 --> 00:05:15,510
system we want to also contribute the

00:05:12,510 --> 00:05:17,310
community to improve backends in a way

00:05:15,510 --> 00:05:19,500
that they fit the operating system that

00:05:17,310 --> 00:05:21,330
they are suitable to be used in the

00:05:19,500 --> 00:05:23,340
operating system we don't want just open

00:05:21,330 --> 00:05:26,850
ssl in fedora we want to finish the cell

00:05:23,340 --> 00:05:29,910
in a way that we can use it consistently

00:05:26,850 --> 00:05:33,030
with the other libraries in fedora so

00:05:29,910 --> 00:05:34,380
it's much easier for for us to work

00:05:33,030 --> 00:05:41,460
together over the community rather than

00:05:34,380 --> 00:05:43,620
in parallel so how do we get there so we

00:05:41,460 --> 00:05:46,080
realized that we have a lot of paper

00:05:43,620 --> 00:05:48,660
libraries and we have a lot of diverse

00:05:46,080 --> 00:05:52,230
crypto libraries so we have to make them

00:05:48,660 --> 00:05:54,540
work well together I thought it was the

00:05:52,230 --> 00:05:58,170
first of the realization and what

00:05:54,540 --> 00:06:00,660
happens after realization it's there you

00:05:58,170 --> 00:06:04,200
have to face the facts and the fact was

00:06:00,660 --> 00:06:08,250
that fedora was very ugly at the time in

00:06:04,200 --> 00:06:09,870
terms of crypto if you know - for the

00:06:08,250 --> 00:06:13,350
internet public infrastructure to work

00:06:09,870 --> 00:06:15,690
you need to have trust anchors and trust

00:06:13,350 --> 00:06:19,680
anchors are installed in the operating

00:06:15,690 --> 00:06:20,730
system if you go to Windows - or to any

00:06:19,680 --> 00:06:23,360
other operating systems there are

00:06:20,730 --> 00:06:26,250
globally in fedora the timeyou they were

00:06:23,360 --> 00:06:29,550
installed with specific components Java

00:06:26,250 --> 00:06:31,770
has its own trust anchors open SSL I

00:06:29,550 --> 00:06:37,140
think with its own trust anchors Firefox

00:06:31,770 --> 00:06:38,850
its own and so on so what is the

00:06:37,140 --> 00:06:39,510
situational then you run an application

00:06:38,850 --> 00:06:41,430
it works

00:06:39,510 --> 00:06:42,750
because linguine's Java you run another

00:06:41,430 --> 00:06:45,210
application you cannot connect to

00:06:42,750 --> 00:06:49,590
another server because it's not linked

00:06:45,210 --> 00:06:51,480
with Java so you have a situation where

00:06:49,590 --> 00:06:54,870
its application uses its own set of

00:06:51,480 --> 00:06:56,670
trust anchors then it comes the question

00:06:54,870 --> 00:06:58,620
how do I install a company-wide

00:06:56,670 --> 00:07:02,610
certificate or a certificate that is

00:06:58,620 --> 00:07:04,230
only valid for my in lung how do I apply

00:07:02,610 --> 00:07:06,300
blacklist globally in the operating

00:07:04,230 --> 00:07:09,540
system we couldn't do any of this stuff

00:07:06,300 --> 00:07:12,750
at the time so the first project that

00:07:09,540 --> 00:07:14,340
was towards unification of the libraries

00:07:12,750 --> 00:07:18,170
of the time was the third system

00:07:14,340 --> 00:07:21,810
certificates across the operating system

00:07:18,170 --> 00:07:24,390
so it was a project about using the

00:07:21,810 --> 00:07:28,260
Mozilla trust or as a central trust or

00:07:24,390 --> 00:07:30,500
for everything on a fedora and in order

00:07:28,260 --> 00:07:36,050
to make it work we had to contribute to

00:07:30,500 --> 00:07:36,050
several sorry several upstream project

00:07:36,080 --> 00:07:41,430
and we can make it work as it is a

00:07:39,270 --> 00:07:43,650
little picture centers trust or used by

00:07:41,430 --> 00:07:46,610
every other application every keep the

00:07:43,650 --> 00:07:49,110
backend and how does it work

00:07:46,610 --> 00:07:51,000
by something like this if you have a

00:07:49,110 --> 00:07:53,970
fedora today you can write trust list

00:07:51,000 --> 00:07:55,890
and you've get the list of trusted

00:07:53,970 --> 00:07:57,540
certificates that exist there the list

00:07:55,890 --> 00:08:00,570
of trusted reviews are used by all

00:07:57,540 --> 00:08:05,900
applications in this particular case we

00:08:00,570 --> 00:08:10,290
see the Amazon root CA certificate and

00:08:05,900 --> 00:08:13,010
how do we add a new certificate again

00:08:10,290 --> 00:08:16,110
with the same tool trust Encore a

00:08:13,010 --> 00:08:20,250
certificate name and a certificate file

00:08:16,110 --> 00:08:24,420
and update CA trust propagate this trust

00:08:20,250 --> 00:08:29,280
to everywhere from Java tools to other

00:08:24,420 --> 00:08:33,260
applications when needed so that was

00:08:29,280 --> 00:08:37,250
about certificates then let's go on

00:08:33,260 --> 00:08:38,599
let's move on so this is the goddess of

00:08:37,250 --> 00:08:42,630
chaos

00:08:38,599 --> 00:08:46,350
her name is eros and this was the second

00:08:42,630 --> 00:08:48,060
part the second major issue they were

00:08:46,350 --> 00:08:51,060
saying during the reconsideration I

00:08:48,060 --> 00:08:54,390
faced is that one you have

00:08:51,060 --> 00:08:57,540
multiple systems using containers

00:08:54,390 --> 00:08:59,430
virtual machines running Fedora let's

00:08:57,540 --> 00:09:01,470
say you have a hundred containers

00:08:59,430 --> 00:09:02,910
running Fedora and you see a hundred

00:09:01,470 --> 00:09:05,910
connections coming out from these

00:09:02,910 --> 00:09:08,700
containers can you predict what would be

00:09:05,910 --> 00:09:13,910
the TLS settings that will be used for

00:09:08,700 --> 00:09:16,529
these connections can anybody answer

00:09:13,910 --> 00:09:17,850
that that's true you cannot predict and

00:09:16,529 --> 00:09:20,060
you don't know if they will be secure

00:09:17,850 --> 00:09:23,160
you don't know if they will be insecure

00:09:20,060 --> 00:09:25,200
that's why I selected to this goddess of

00:09:23,160 --> 00:09:28,020
chaos it was impossible to predict

00:09:25,200 --> 00:09:30,450
anything so we have the consistent

00:09:28,020 --> 00:09:32,580
settings not only on TLS but with

00:09:30,450 --> 00:09:35,339
associate with IPSec depending on the

00:09:32,580 --> 00:09:38,210
library application you'll be using you

00:09:35,339 --> 00:09:42,779
may use totally different settings

00:09:38,210 --> 00:09:44,970
that's when they crypt a fedora the

00:09:42,779 --> 00:09:49,160
policies project started which was

00:09:44,970 --> 00:09:51,990
mainly a safety net and will protect all

00:09:49,160 --> 00:09:54,380
applications from going under these

00:09:51,990 --> 00:09:58,440
settings it will provide the baseline

00:09:54,380 --> 00:10:02,220
for applications crypto settings how did

00:09:58,440 --> 00:10:04,740
you work it had three global policies so

00:10:02,220 --> 00:10:08,280
it was focused on simplicity only three

00:10:04,740 --> 00:10:10,680
policies who make it easy to to

00:10:08,280 --> 00:10:13,920
understand the default would apply by

00:10:10,680 --> 00:10:16,920
default to every application future was

00:10:13,920 --> 00:10:18,690
more conservative for networks that

00:10:16,920 --> 00:10:20,970
don't necessarily need to talk to the

00:10:18,690 --> 00:10:24,000
internet but they need to be protected

00:10:20,970 --> 00:10:27,960
for five or ten years maybe five is a

00:10:24,000 --> 00:10:30,480
more reasonable target legacy is if you

00:10:27,960 --> 00:10:32,280
are primarily deploying Fedora in an

00:10:30,480 --> 00:10:34,950
environment where you are talking only

00:10:32,280 --> 00:10:36,770
with very old systems and deployed 10 or

00:10:34,950 --> 00:10:39,510
15 years ago

00:10:36,770 --> 00:10:42,270
and you could select between these three

00:10:39,510 --> 00:10:45,870
policies globally and how would you do

00:10:42,270 --> 00:10:47,580
that you would run these commands update

00:10:45,870 --> 00:10:52,350
keep your policies so you will show you

00:10:47,580 --> 00:10:54,630
which policy is now your fedora and you

00:10:52,350 --> 00:11:01,230
can even switch it using the same tool

00:10:54,630 --> 00:11:03,279
and does it apply to all fedora no it

00:11:01,230 --> 00:11:06,009
applies to a large part of the

00:11:03,279 --> 00:11:08,259
however it applies to major crypto

00:11:06,009 --> 00:11:11,560
libraries it applies to Kerberos it

00:11:08,259 --> 00:11:14,139
applies to associate to open Isis AIDS

00:11:11,560 --> 00:11:20,499
he applies to DNS SEC if you are using

00:11:14,139 --> 00:11:23,800
bint Python Java Perl and all the major

00:11:20,499 --> 00:11:28,509
libraries and languages are pre being

00:11:23,800 --> 00:11:29,920
covered that relates also to the

00:11:28,509 --> 00:11:31,899
question it was raised in previous talks

00:11:29,920 --> 00:11:34,360
what is the core operating system today

00:11:31,899 --> 00:11:36,160
because we didn't have a target to cover

00:11:34,360 --> 00:11:38,379
we just were trying to cover everything

00:11:36,160 --> 00:11:41,199
and that was pretty much impossible a

00:11:38,379 --> 00:11:45,209
fedora is simply too large I will get

00:11:41,199 --> 00:11:47,559
back to it like there so as part of this

00:11:45,209 --> 00:11:50,939
policy we need to work with a lot of

00:11:47,559 --> 00:11:54,249
upstreams because the global settings

00:11:50,939 --> 00:11:56,740
notion was not available to open SSL it

00:11:54,249 --> 00:11:58,389
wasn't available to NSS he was not

00:11:56,740 --> 00:12:00,370
available in new TLS he was not

00:11:58,389 --> 00:12:02,350
available pretty much anywhere so we had

00:12:00,370 --> 00:12:04,709
to content to work together with all the

00:12:02,350 --> 00:12:09,459
options to introduce this notion and

00:12:04,709 --> 00:12:12,339
today in Fedora 28 it works well if at

00:12:09,459 --> 00:12:16,449
all 29 is going to work better but we

00:12:12,339 --> 00:12:18,189
are getting there so what was the next

00:12:16,449 --> 00:12:21,990
step the next piece is something

00:12:18,189 --> 00:12:24,399
different it was about smart cards I

00:12:21,990 --> 00:12:27,309
mean if you're familiar with smart cards

00:12:24,399 --> 00:12:29,649
there are two competing open-source

00:12:27,309 --> 00:12:32,290
drivers there is a cool key driver and

00:12:29,649 --> 00:12:35,379
competing in quotes I will explain why

00:12:32,290 --> 00:12:41,529
later there is the open seat driver and

00:12:35,379 --> 00:12:42,850
the cool cool key driver the cool key

00:12:41,529 --> 00:12:47,199
driver is something developed internally

00:12:42,850 --> 00:12:49,480
in Revit think it was any WL through an

00:12:47,199 --> 00:12:54,250
acquisition but maybe I'm wrong about

00:12:49,480 --> 00:12:57,550
this and it's a driver about which

00:12:54,250 --> 00:12:58,529
covers the cool key card which is a part

00:12:57,550 --> 00:13:02,800
of a very broad

00:12:58,529 --> 00:13:06,459
product and the US government cards open

00:13:02,800 --> 00:13:08,740
se is the community based project which

00:13:06,459 --> 00:13:12,550
targets pretty much everything under the

00:13:08,740 --> 00:13:15,490
Sun but didn't have support for these

00:13:12,550 --> 00:13:17,560
cards that I care about so Fedora was

00:13:15,490 --> 00:13:24,520
actually seeping into drivers for an

00:13:17,560 --> 00:13:27,250
overlapping list of cards and in the end

00:13:24,520 --> 00:13:30,100
we had to go there we wanted to go there

00:13:27,250 --> 00:13:33,970
we wanted to have only open se which was

00:13:30,100 --> 00:13:38,080
a viable like community project and move

00:13:33,970 --> 00:13:39,670
our kind of proprietary drivers because

00:13:38,080 --> 00:13:41,580
although they were open-source there was

00:13:39,670 --> 00:13:44,110
no community behind them egos a

00:13:41,580 --> 00:13:46,120
developer and read-only so we

00:13:44,110 --> 00:13:48,790
contributed this our drivers back to the

00:13:46,120 --> 00:13:51,459
community and we worked very well with

00:13:48,790 --> 00:13:53,350
the openness see guys there I don't know

00:13:51,459 --> 00:13:57,279
if I don't see someone from open sea but

00:13:53,350 --> 00:13:59,649
maybe I'm wrong so in the end now in

00:13:57,279 --> 00:14:02,560
Fedora 28 we have openness to drive

00:13:59,649 --> 00:14:07,270
recovering all possible smart cars as

00:14:02,560 --> 00:14:10,540
you may need in fedora and furthermore

00:14:07,270 --> 00:14:13,360
something that I'll scheme briefly but I

00:14:10,540 --> 00:14:16,270
think is quite important and it's about

00:14:13,360 --> 00:14:18,070
hardware security modules carousing

00:14:16,270 --> 00:14:21,820
security modes have very similar to

00:14:18,070 --> 00:14:23,829
markets and once we optimized the driver

00:14:21,820 --> 00:14:28,000
force markets the next step was

00:14:23,829 --> 00:14:29,890
optimizing making more more user

00:14:28,000 --> 00:14:33,010
friendly the interaction force markets

00:14:29,890 --> 00:14:34,930
and hardware security modules they

00:14:33,010 --> 00:14:39,490
usually operate under the same API

00:14:34,930 --> 00:14:42,670
called pkc 11 so a big husband that came

00:14:39,490 --> 00:14:46,000
in Fedora 28 a little it was not

00:14:42,670 --> 00:14:49,600
announced under the hood was that mod

00:14:46,000 --> 00:14:52,750
SSL had much better support for hardware

00:14:49,600 --> 00:14:55,300
security modules via I ends in pickets

00:14:52,750 --> 00:15:00,209
11 which is now called open SSL piggies

00:14:55,300 --> 00:15:04,149
11 in fedora so you can set up a party

00:15:00,209 --> 00:15:07,089
and have it use hardware security module

00:15:04,149 --> 00:15:17,040
a TPM or something as where you cannot

00:15:07,089 --> 00:15:17,040
extract the keys I already on Fedora 28

00:15:17,550 --> 00:15:22,770
I don't know I have you ever used a

00:15:21,330 --> 00:15:24,650
hardware security module are you

00:15:22,770 --> 00:15:33,030
familiar with hardware security modules

00:15:24,650 --> 00:15:34,650
Peter is they maybe most of you you are

00:15:33,030 --> 00:15:37,230
not haru security module is something

00:15:34,650 --> 00:15:39,420
that takes the keys out of your PC and

00:15:37,230 --> 00:15:41,760
moves them to a tip and in a way that

00:15:39,420 --> 00:15:44,490
you cannot extract it back but you can

00:15:41,760 --> 00:15:46,380
use it and that's quite important so you

00:15:44,490 --> 00:15:50,100
can run a party have your keys in the

00:15:46,380 --> 00:15:52,170
security module and you have a

00:15:50,100 --> 00:15:54,600
heartbleed attack on open SSL and but

00:15:52,170 --> 00:15:56,970
your keys are still correct you arranged

00:15:54,600 --> 00:16:00,270
all the operating system and you're su

00:15:56,970 --> 00:16:02,340
your your keys I have not been stolen so

00:16:00,270 --> 00:16:05,930
you don't need to regenerate old pikiao

00:16:02,340 --> 00:16:05,930
you don't need to regenerate anything

00:16:06,620 --> 00:16:14,250
let's go a little to the future

00:16:09,300 --> 00:16:16,530
direction so fedora maybe not that long

00:16:14,250 --> 00:16:20,250
but I'll go through a lot a few

00:16:16,530 --> 00:16:24,560
challenges that relate to crypto so TLS

00:16:20,250 --> 00:16:28,200
1.3 0.3 is a new protocol it was

00:16:24,560 --> 00:16:31,890
designed for four years in yet it was

00:16:28,200 --> 00:16:37,350
driven by browsers mostly it comes with

00:16:31,890 --> 00:16:39,540
a very significant performance change

00:16:37,350 --> 00:16:42,470
you can have connections in one

00:16:39,540 --> 00:16:45,510
round-trip or even in zero round-trip

00:16:42,470 --> 00:16:49,370
that's kind of important for systems who

00:16:45,510 --> 00:16:53,640
are you need it to be very interactive

00:16:49,370 --> 00:16:55,650
and it comes with better privacy the

00:16:53,640 --> 00:17:00,540
question is can we have it in federal 29

00:16:55,650 --> 00:17:02,580
or later there have been some trials

00:17:00,540 --> 00:17:07,200
already we believe have very few

00:17:02,580 --> 00:17:09,900
regressions because the protocol doesn't

00:17:07,200 --> 00:17:12,300
map 100% we have some reservations there

00:17:09,900 --> 00:17:15,150
but probably we're gonna see it sooner

00:17:12,300 --> 00:17:16,770
or later in fedora running there and the

00:17:15,150 --> 00:17:20,120
experience we have process is also

00:17:16,770 --> 00:17:25,470
encouraging so most likely you should

00:17:20,120 --> 00:17:28,320
expect it in fedora soon one other

00:17:25,470 --> 00:17:30,930
challenge for the future is

00:17:28,320 --> 00:17:36,840
i we have let's encrypt it's an easy way

00:17:30,930 --> 00:17:38,640
to get your certificates I think what is

00:17:36,840 --> 00:17:41,820
a nice challenge for Dora is can we have

00:17:38,640 --> 00:17:44,090
an operating system where you don't need

00:17:41,820 --> 00:17:46,500
to care about certificates where

00:17:44,090 --> 00:17:48,540
certificates come automatically by the

00:17:46,500 --> 00:17:49,860
operating system Europe yeah you install

00:17:48,540 --> 00:17:54,510
your service and you have a certificate

00:17:49,860 --> 00:17:58,530
already there I think it's a good idea I

00:17:54,510 --> 00:18:00,420
but at this point it's only me so if you

00:17:58,530 --> 00:18:05,700
are interested I'm really happy to

00:18:00,420 --> 00:18:07,890
discuss about it right there and my main

00:18:05,700 --> 00:18:10,700
point for the future directions is this

00:18:07,890 --> 00:18:13,680
actually if Fedora is puffing

00:18:10,700 --> 00:18:16,830
we are continuously adding software in

00:18:13,680 --> 00:18:18,990
Fedora we have a no process to deprecate

00:18:16,830 --> 00:18:21,240
any software once something is added

00:18:18,990 --> 00:18:23,670
it's over it will exist there forever as

00:18:21,240 --> 00:18:26,460
long as it compiles and there is some

00:18:23,670 --> 00:18:30,180
maintainer assigned to it that's a very

00:18:26,460 --> 00:18:33,150
low bar because the flows from a compile

00:18:30,180 --> 00:18:36,090
but threat models change over the years

00:18:33,150 --> 00:18:38,820
ten years ago the thread model for

00:18:36,090 --> 00:18:40,620
crypto was a remote attacker the threat

00:18:38,820 --> 00:18:43,980
model today is a remote attacker who has

00:18:40,620 --> 00:18:47,670
access to your CPU who has access to the

00:18:43,980 --> 00:18:50,040
castle you CPU so having created

00:18:47,670 --> 00:18:52,770
software for ten years with no updates

00:18:50,040 --> 00:18:55,310
most likely means you are today insecure

00:18:52,770 --> 00:18:59,430
and let's see what it means for fedora

00:18:55,310 --> 00:19:01,200
we have I skimmed through my Fedora

00:18:59,430 --> 00:19:04,290
system these are the capital average we

00:19:01,200 --> 00:19:06,660
are sipping that I could find in 20

00:19:04,290 --> 00:19:08,970
seconds most likely we have 10 times

00:19:06,660 --> 00:19:11,490
more days that's a very large security

00:19:08,970 --> 00:19:14,040
perimeter and on the operating system

00:19:11,490 --> 00:19:19,380
level it's an unmanageable a manageable

00:19:14,040 --> 00:19:22,670
situation I am do having that many keep

00:19:19,380 --> 00:19:26,940
the libraries really help the community

00:19:22,670 --> 00:19:28,860
that is not I that does not relate with

00:19:26,940 --> 00:19:35,430
the consolidation it's a different

00:19:28,860 --> 00:19:36,810
question having one and we can have we

00:19:35,430 --> 00:19:39,330
don't want to get to the situation where

00:19:36,810 --> 00:19:40,710
we say okay that's one crypto library we

00:19:39,330 --> 00:19:43,559
are using this but

00:19:40,710 --> 00:19:47,840
yeah is a thousand key to leverage good

00:19:43,559 --> 00:19:50,940
for fedora everyone from this lab

00:19:47,840 --> 00:19:55,259
relieves their library is the best it's

00:19:50,940 --> 00:19:58,320
their their own solution provides the

00:19:55,259 --> 00:20:01,139
best countermeasures for attacks however

00:19:58,320 --> 00:20:05,070
we see very little collaboration all

00:20:01,139 --> 00:20:06,840
over we see the more new libraries that

00:20:05,070 --> 00:20:09,509
just come and implement whatever is

00:20:06,840 --> 00:20:10,860
there continuously we see Amazon

00:20:09,509 --> 00:20:12,869
developing a new library instead of

00:20:10,860 --> 00:20:15,690
helping other library and the older

00:20:12,869 --> 00:20:17,429
libraries to become better we see

00:20:15,690 --> 00:20:19,710
Facebook creating a new library instead

00:20:17,429 --> 00:20:23,309
of helping all the drivers become better

00:20:19,710 --> 00:20:26,119
so how do we go from there

00:20:23,309 --> 00:20:29,369
do we add all these libraries in fedora

00:20:26,119 --> 00:20:31,860
and we also have several open source but

00:20:29,369 --> 00:20:33,509
not community or any solutions meaning

00:20:31,860 --> 00:20:35,490
we have a company which is open source

00:20:33,509 --> 00:20:37,200
is what they are doing however they

00:20:35,490 --> 00:20:40,230
don't really accept contributions from

00:20:37,200 --> 00:20:41,970
the community if you try to work with

00:20:40,230 --> 00:20:45,440
them they will tell you if it doesn't

00:20:41,970 --> 00:20:47,850
fit with what they are doing it's over

00:20:45,440 --> 00:20:50,190
so having too many leverage maybe

00:20:47,850 --> 00:20:52,080
doesn't help and let me put it in

00:20:50,190 --> 00:20:55,080
contrast with rel with a commercial

00:20:52,080 --> 00:20:57,059
operating system from various operating

00:20:55,080 --> 00:21:00,919
system it's a fraction of these

00:20:57,059 --> 00:21:05,059
libraries that is it zipped that's

00:21:00,919 --> 00:21:09,409
that's because you cannot guarantee the

00:21:05,059 --> 00:21:09,409
security of so many libraries

00:21:41,600 --> 00:21:47,730
yeah the question or the comment was

00:21:44,879 --> 00:21:50,879
that we have libraries which come as a

00:21:47,730 --> 00:21:52,320
dependency not necessarily because they

00:21:50,879 --> 00:21:54,389
thought it was the best library for the

00:21:52,320 --> 00:21:58,409
task but because it was depending on

00:21:54,389 --> 00:22:00,149
something else yeah I I don't have a

00:21:58,409 --> 00:22:04,320
good question who have seen this

00:22:00,149 --> 00:22:06,269
question in in Enterprise Linux and the

00:22:04,320 --> 00:22:09,269
answer was we don't bring these

00:22:06,269 --> 00:22:11,779
dependencies if they are known to be

00:22:09,269 --> 00:22:11,779
insecure

00:22:39,990 --> 00:22:45,250
yeah it would be very nice to have

00:22:42,970 --> 00:22:48,010
something automatic there to detect or

00:22:45,250 --> 00:22:51,280
at least to flag these components as

00:22:48,010 --> 00:22:52,750
inactive on upstream it can happen all

00:22:51,280 --> 00:22:54,430
the ways that you can have an inactive

00:22:52,750 --> 00:22:57,490
upstream for two or three years and then

00:22:54,430 --> 00:23:01,030
they are back developing but when you

00:22:57,490 --> 00:23:02,920
are ten years inactive maybe maybe

00:23:01,030 --> 00:23:04,690
Fedora shouldn't be sipping a software

00:23:02,920 --> 00:23:06,940
that is inactive for so long

00:23:04,690 --> 00:23:10,690
if it becomes later maybe we should

00:23:06,940 --> 00:23:12,610
consider it but this is that the reason

00:23:10,690 --> 00:23:16,290
I'm actually making this printed to

00:23:12,610 --> 00:23:16,290
underline this problem that we are

00:26:20,859 --> 00:26:25,429
that could be something and there is

00:26:22,850 --> 00:26:27,649
even better to learn bell pepper Luke is

00:26:25,429 --> 00:26:30,970
an internal tool that we used to

00:26:27,649 --> 00:26:30,970
identify cute

00:27:23,190 --> 00:27:27,150
okay you'll have a question

00:28:11,869 --> 00:28:16,739
the question is that I we have a lot of

00:28:15,109 --> 00:28:17,700
people average that that

00:28:16,739 --> 00:28:20,100
language-specific

00:28:17,700 --> 00:28:24,119
so Java has its own crypto library a

00:28:20,100 --> 00:28:28,409
goal and the same and I guess others the

00:28:24,119 --> 00:28:30,379
same what what's my take on this I don't

00:28:28,409 --> 00:28:33,389
think we can answer in general their

00:28:30,379 --> 00:28:36,119
languages which are safer so maybe it

00:28:33,389 --> 00:28:40,080
makes sense to have crypto there because

00:28:36,119 --> 00:28:42,899
it provides an advantage aroused let's

00:28:40,080 --> 00:28:44,639
say it's coming like this that we it's a

00:28:42,899 --> 00:28:47,159
safer language you can have crypto there

00:28:44,639 --> 00:29:00,529
and you you will not have all the buffer

00:28:47,159 --> 00:29:03,419
overflows you will not have yes yes

00:29:00,529 --> 00:29:04,889
correct and the point is that maybe the

00:29:03,419 --> 00:29:08,580
language is safe but maybe not the

00:29:04,889 --> 00:29:11,519
crypto is not but does not necessarily

00:29:08,580 --> 00:29:13,409
mean we need to follow that open JDK for

00:29:11,519 --> 00:29:18,029
example it provides hook and you can use

00:29:13,409 --> 00:29:20,549
NSS for job and rail was doing for quite

00:29:18,029 --> 00:29:22,169
some time so you would use Java but you

00:29:20,549 --> 00:29:25,080
would use underlying the NSS

00:29:22,169 --> 00:29:27,149
implementation for crypto so you reduce

00:29:25,080 --> 00:29:31,019
the security perimeter

00:29:27,149 --> 00:29:35,070
I believe goal and crypto I can do the

00:29:31,019 --> 00:29:42,419
same there is already parts from Google

00:29:35,070 --> 00:29:45,539
that I can use boring SSL and I am not

00:29:42,419 --> 00:29:47,940
sure if I can announce it but we are

00:29:45,539 --> 00:29:59,129
also looking on using golang with open

00:29:47,940 --> 00:30:00,779
SSL so yes yes so we can kind of reuse

00:29:59,129 --> 00:30:03,509
what we have there I mean if you have

00:30:00,779 --> 00:30:06,450
already open SSL in a system the

00:30:03,509 --> 00:30:08,399
security perimeter is fixed and if you

00:30:06,450 --> 00:30:12,840
use open SSL for goal and even if you

00:30:08,399 --> 00:30:14,879
introduce problems by doing that even if

00:30:12,840 --> 00:30:17,220
open SSL for example has a flow it will

00:30:14,879 --> 00:30:19,320
affect a goal line but you will not

00:30:17,220 --> 00:30:22,980
extend your perimeter you can still fix

00:30:19,320 --> 00:30:24,870
it once you don't need to fix flows in

00:30:22,980 --> 00:30:35,279
goal line and in openness

00:30:24,870 --> 00:30:37,770
I think that's a good idea I am NOT

00:30:35,279 --> 00:30:39,840
pushing for it I think sometimes it

00:30:37,770 --> 00:30:41,669
makes sense to have separate

00:30:39,840 --> 00:30:45,539
accumulation especially you have a safe

00:30:41,669 --> 00:30:47,730
language also in the terms of timing

00:30:45,539 --> 00:30:49,200
resistance or memory access resistance

00:30:47,730 --> 00:30:54,539
though I'm not sure we have such

00:30:49,200 --> 00:30:57,149
language yet so in in some case it may

00:30:54,539 --> 00:31:00,679
make sense in general I think it's

00:30:57,149 --> 00:31:00,679
better to reduce the security perimeter

00:31:00,740 --> 00:31:08,580
so so let me move on they think there

00:31:06,539 --> 00:31:11,870
was a discussion here were the questions

00:31:08,580 --> 00:31:15,860
I have here I were a third but not me

00:31:11,870 --> 00:31:19,429
can we stop that passing of the Dora I

00:31:15,860 --> 00:31:23,190
think we should make it easier to

00:31:19,429 --> 00:31:25,169
eliminate dead software from fedora we

00:31:23,190 --> 00:31:27,240
should make it automatic so that no one

00:31:25,169 --> 00:31:30,480
is involved it was addressed before

00:31:27,240 --> 00:31:32,279
involved fresco or I don't think anybody

00:31:30,480 --> 00:31:34,169
who should be involved if Soto has not

00:31:32,279 --> 00:31:36,570
been updated for 10-15 years it should

00:31:34,169 --> 00:31:39,450
be out automatically it doesn't make

00:31:36,570 --> 00:31:43,590
sense to keep it in Fedora it's a very

00:31:39,450 --> 00:31:45,299
long time and what I say under it maybe

00:31:43,590 --> 00:31:47,190
contradicts what we were suggesting

00:31:45,299 --> 00:31:50,190
before we sue the law in your crypto

00:31:47,190 --> 00:31:52,710
software 24 dora as long as they respect

00:31:50,190 --> 00:31:56,940
their policies for example we have set

00:31:52,710 --> 00:31:59,520
up we don't want to make Fedora stagnate

00:31:56,940 --> 00:32:03,390
we want to have the new open SSL or the

00:31:59,520 --> 00:32:06,539
new utilize in fedora when it gets

00:32:03,390 --> 00:32:09,539
designed if it is used if it is a nice

00:32:06,539 --> 00:32:12,059
library it follows the crypto policies

00:32:09,539 --> 00:32:14,990
let's bring the fedora let's not stop it

00:32:12,059 --> 00:32:17,429
we should make it easier to remove

00:32:14,990 --> 00:32:23,059
something that got in rather than make

00:32:17,429 --> 00:32:23,059
it harder to get things to fedora

00:32:59,940 --> 00:33:06,970
yes the comment was that it's good to

00:33:02,710 --> 00:33:10,240
make people aware of that this problem

00:33:06,970 --> 00:33:16,480
exists so that when something enters

00:33:10,240 --> 00:33:18,340
Fedora we can review it the thing is

00:33:16,480 --> 00:33:21,070
that I don't believe anybody would

00:33:18,340 --> 00:33:24,730
review it I've been involved in passing

00:33:21,070 --> 00:33:27,670
Fedora there are security I've never

00:33:24,730 --> 00:33:38,800
seen it functional I'm relatively in um

00:33:27,670 --> 00:33:40,540
only four years in the community if it

00:33:38,800 --> 00:33:42,730
does it could be a nice thing if you can

00:33:40,540 --> 00:33:44,860
review an implementation before getting

00:33:42,730 --> 00:33:47,080
in keep the implementation will be good

00:33:44,860 --> 00:33:49,660
and review even if it is superficial

00:33:47,080 --> 00:33:53,350
just to see is the good language is the

00:33:49,660 --> 00:33:54,550
style for is good good development

00:33:53,350 --> 00:34:00,310
practice being followed in the

00:33:54,550 --> 00:34:02,290
development lab would be good so so I

00:34:00,310 --> 00:34:02,860
yeah as you say I do not believe we are

00:34:02,290 --> 00:34:06,550
adults

00:34:02,860 --> 00:34:08,409
yeah I just I would like to I wanted to

00:34:06,550 --> 00:34:10,149
underline that we should allow new

00:34:08,409 --> 00:34:11,830
creeper to enter fedora we should not

00:34:10,149 --> 00:34:15,760
make it overly difficult so that we

00:34:11,830 --> 00:34:17,620
stagnate yeah and I would like to finish

00:34:15,760 --> 00:34:22,720
with that slide thank you very much for

00:34:17,620 --> 00:34:25,240
following I like that big picture but I

00:34:22,720 --> 00:34:32,020
think it's a good picture of fedora and

00:34:25,240 --> 00:34:38,020
crypto so thank you

00:34:32,020 --> 00:34:38,020
[Applause]

00:35:06,150 --> 00:35:10,270
and the question was about post quantum

00:35:08,589 --> 00:35:13,599
crypto is Fedora doing anything about it

00:35:10,270 --> 00:35:16,829
and whether Belk which is a relative

00:35:13,599 --> 00:35:19,930
will ever be made available to fedora I

00:35:16,829 --> 00:35:24,369
will start with a second about post

00:35:19,930 --> 00:35:26,319
Chronicle crypto both rather than for

00:35:24,369 --> 00:35:29,010
the or I do not believe we are doing

00:35:26,319 --> 00:35:32,680
something organ in an organized way

00:35:29,010 --> 00:35:35,980
that's kind of a problem industry-wide

00:35:32,680 --> 00:35:37,390
problem at least for ready Hut post

00:35:35,980 --> 00:35:40,059
condom greeter because we don't have

00:35:37,390 --> 00:35:43,359
solutions at the moment we have some

00:35:40,059 --> 00:35:46,990
algorithms being presented as post

00:35:43,359 --> 00:35:50,319
quantum safe but we have no proofs so we

00:35:46,990 --> 00:35:53,140
just know that these algorithms there is

00:35:50,319 --> 00:35:54,880
no attack on with AK wanna concrete

00:35:53,140 --> 00:35:57,250
computer but we don't know if they are

00:35:54,880 --> 00:35:59,410
really secure and that's not enough to

00:35:57,250 --> 00:36:01,690
start implementing int in operating

00:35:59,410 --> 00:36:03,940
systems we have also indications that

00:36:01,690 --> 00:36:05,920
quantum computers are getting close but

00:36:03,940 --> 00:36:07,450
we don't have a practical quantum

00:36:05,920 --> 00:36:11,170
computer that can attack the key we have

00:36:07,450 --> 00:36:16,930
today we just know that maybe in five or

00:36:11,170 --> 00:36:19,660
ten years we will be there we have that

00:36:16,930 --> 00:36:22,299
feeling depending on who you ask

00:36:19,660 --> 00:36:23,380
you may get a different timeline but we

00:36:22,299 --> 00:36:25,900
believe in 10 years

00:36:23,380 --> 00:36:29,020
the problem will be there so what do we

00:36:25,900 --> 00:36:31,270
do as fedora we wait and we wait until

00:36:29,020 --> 00:36:32,950
standards are established for Post

00:36:31,270 --> 00:36:35,410
contributor we have an algorithm that is

00:36:32,950 --> 00:36:38,109
widely accepted as a solution to the

00:36:35,410 --> 00:36:40,960
problem and then we will try to bring it

00:36:38,109 --> 00:36:42,520
in fedora maybe a third have to

00:36:40,960 --> 00:36:45,869
contribute to upstream is to bring the

00:36:42,520 --> 00:36:48,830
algorithm to our streams now about Pelt

00:36:45,869 --> 00:36:53,810
Park is a tool that automates

00:36:48,830 --> 00:36:56,720
discovery of crypto in in packages like

00:36:53,810 --> 00:36:58,250
rpms but it's it's not a very good tool

00:36:56,720 --> 00:37:01,870
I don't think we should bring this to

00:36:58,250 --> 00:37:07,490
fedora there is a big because it has

00:37:01,870 --> 00:37:09,380
very and it has many false false

00:37:07,490 --> 00:37:12,050
positives so you start with a very long

00:37:09,380 --> 00:37:16,720
list of crypto that was invented because

00:37:12,050 --> 00:37:19,160
idea for example I was mentioning in

00:37:16,720 --> 00:37:22,160
somewhere in the cold and he thinks

00:37:19,160 --> 00:37:26,960
ideas implemented here so there is a

00:37:22,160 --> 00:37:31,280
better tool developed in Red Hat for

00:37:26,960 --> 00:37:34,520
that reason but I maybe you can get that

00:37:31,280 --> 00:37:37,310
made open-source and donated to fedora

00:37:34,520 --> 00:37:44,080
and that's something we should probably

00:37:37,310 --> 00:37:44,080
just discuss offline please

00:38:24,500 --> 00:38:36,720
so the question is about the trust or a

00:38:28,160 --> 00:38:38,960
certificate and about certificates in

00:38:36,720 --> 00:38:43,260
general whether we can share it between

00:38:38,960 --> 00:38:45,390
containers between the host system with

00:38:43,260 --> 00:38:48,870
the trust or we have currently a

00:38:45,390 --> 00:38:52,740
solution to serve them across containers

00:38:48,870 --> 00:38:57,180
or across which machines actually flat

00:38:52,740 --> 00:38:59,550
pack is using that peel Evan kit were

00:38:57,180 --> 00:39:02,130
peeling kit implements trust during

00:38:59,550 --> 00:39:09,270
fedora so peel I think it allows you to

00:39:02,130 --> 00:39:12,960
forward smart cards in between systems

00:39:09,270 --> 00:39:17,340
so the trust or is being implemented as

00:39:12,960 --> 00:39:18,870
is being the interface of the truster is

00:39:17,340 --> 00:39:21,330
actually like the same interface of

00:39:18,870 --> 00:39:25,080
smart card so you can forward the trust

00:39:21,330 --> 00:39:26,640
or read-only to a remote system so you

00:39:25,080 --> 00:39:30,480
can actually have the same certificates

00:39:26,640 --> 00:39:32,910
the same trust anchors as you have in a

00:39:30,480 --> 00:39:37,620
host for example in containers by

00:39:32,910 --> 00:39:39,480
forwarding p11 kit however that will not

00:39:37,620 --> 00:39:41,970
work with the specific certificates as

00:39:39,480 --> 00:39:44,400
you said because we don't have a fedora

00:39:41,970 --> 00:39:47,720
or any other lanes you don't have

00:39:44,400 --> 00:39:50,840
something that is can be seen as

00:39:47,720 --> 00:39:50,840
[Music]

00:39:51,800 --> 00:39:57,480
container for your certificates or for

00:39:54,270 --> 00:39:59,280
your keys a keyring we don't have they

00:39:57,480 --> 00:40:01,410
used to be I'm kidding but it's not so

00:39:59,280 --> 00:40:04,940
generic to say see it as a system

00:40:01,410 --> 00:40:07,920
keyring and it's being phased out anyway

00:40:04,940 --> 00:40:09,150
so we have an answer for the trust or we

00:40:07,920 --> 00:40:17,600
don't have an answer for other

00:40:09,150 --> 00:40:17,600
certificates any other question please

00:40:55,590 --> 00:41:01,750
that's a nice question is opener selfish

00:40:59,170 --> 00:41:06,040
Levin I has a very bad description on

00:41:01,750 --> 00:41:07,740
its pocket and the question is should I

00:41:06,040 --> 00:41:10,450
install it on my system

00:41:07,740 --> 00:41:12,580
yes the nice description I will

00:41:10,450 --> 00:41:16,300
encourage you to open a bug against

00:41:12,580 --> 00:41:21,010
openers I'll pick it up and say I don't

00:41:16,300 --> 00:41:22,900
understand what it is about it makes

00:41:21,010 --> 00:41:25,780
sense I mean we should provide good

00:41:22,900 --> 00:41:27,430
descriptions in Fedora packages they now

00:41:25,780 --> 00:41:30,820
going to the point what does this

00:41:27,430 --> 00:41:32,470
package do is if you have a hardware

00:41:30,820 --> 00:41:40,540
security module if you have the putty on

00:41:32,470 --> 00:41:43,690
your laptop no usually if you run a web

00:41:40,540 --> 00:41:48,040
server I usually know you are running

00:41:43,690 --> 00:41:51,100
the service there and if you if you are

00:41:48,040 --> 00:41:54,700
if you want to use a hardware security

00:41:51,100 --> 00:41:58,540
module you also know because you have

00:41:54,700 --> 00:42:01,030
bought it you both the ubh the same or

00:41:58,540 --> 00:42:02,890
you both need any turkey or something

00:42:01,030 --> 00:42:05,230
that can be used as and it's the same

00:42:02,890 --> 00:42:07,420
you plug it to your server and then you

00:42:05,230 --> 00:42:12,910
move your keys there and then you make

00:42:07,420 --> 00:42:16,570
Apache use these keys so it it was maybe

00:42:12,910 --> 00:42:19,420
in the past targeted and an audience

00:42:16,570 --> 00:42:22,570
which was very into it they knew what

00:42:19,420 --> 00:42:26,370
the case 11 is maybe today that a the

00:42:22,570 --> 00:42:28,750
sames are being more easily available

00:42:26,370 --> 00:42:30,550
maybe we need to to make them more

00:42:28,750 --> 00:42:33,910
attractive more

00:42:30,550 --> 00:42:35,830
easy to understand so you say pickets 11

00:42:33,910 --> 00:42:38,650
in general doesn't tell anything into

00:42:35,830 --> 00:43:00,190
you as someone who may potentially want

00:42:38,650 --> 00:43:01,660
to use a hardware security module if you

00:43:00,190 --> 00:43:04,900
don't use the hardware security module

00:43:01,660 --> 00:43:07,780
you don't need it if you don't use smart

00:43:04,900 --> 00:43:10,780
cards you don't need it if you use

00:43:07,780 --> 00:43:12,970
markers and hardware modules you need it

00:43:10,780 --> 00:43:15,370
it will make your life easier with how

00:43:12,970 --> 00:43:19,390
you specify the object to this marker

00:43:15,370 --> 00:43:22,590
with how you specify with how you find

00:43:19,390 --> 00:43:22,590
the driver to the smarter

00:43:32,430 --> 00:43:39,030
I don't believe you'll receive anything

00:43:35,600 --> 00:43:41,970
because it's the dependencies are also

00:43:39,030 --> 00:43:45,270
recommended by a party and by

00:43:41,970 --> 00:43:47,250
applications that may use it so it will

00:43:45,270 --> 00:43:59,460
be installed automatically unless you

00:43:47,250 --> 00:44:02,240
remove it manually so thank you I think

00:43:59,460 --> 00:44:02,240
we're over time

00:44:03,300 --> 00:44:09,139
[Applause]

00:44:13,700 --> 00:44:15,760

YouTube URL: https://www.youtube.com/watch?v=JLcmMsO9RP0


