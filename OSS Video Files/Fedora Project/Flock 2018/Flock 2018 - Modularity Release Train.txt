Title: Flock 2018 - Modularity Release Train
Publication date: 2018-09-03
Playlist: Flock 2018
Description: 
	Thursday, August 9, 2018 
1:30pm - 1:55pm 
@Hamburg 1+2

Talk: Modularity Release Train
Presenters: Stephen Gallagher, Mohan Boddu

Description: This talk presents the entire modularity release process from building a module to making it available in the repos. We will explain this process flow in different life cycles of Fedora. Over this session we briefly go over the module build service, koji tagging structure, submitting your module builds in bodhi and how pungi is composing the modules.

We would like to invite everyone to come and join us in understanding modularity release train and start building modules!!!
Captions: 
	00:00:01,170 --> 00:00:05,970
I will introduce myself I suspect that

00:00:04,170 --> 00:00:09,080
most of you know me but I'm Steve

00:00:05,970 --> 00:00:15,059
Gallagher general cat herder and

00:00:09,080 --> 00:00:19,619
misanthrope Mohan but do I get right

00:00:15,059 --> 00:00:22,109
that time cool is our fedora fedora

00:00:19,619 --> 00:00:26,070
release engineering lead and we'll be

00:00:22,109 --> 00:00:31,099
talking today about how a how a yam will

00:00:26,070 --> 00:00:31,099
file turns into modularity unicorns

00:00:59,360 --> 00:01:08,650
do we have a clicker

00:01:00,870 --> 00:01:08,650
[Music]

00:01:12,290 --> 00:01:16,390
say hello Mon

00:01:14,210 --> 00:01:21,810
hello everyone

00:01:16,390 --> 00:01:21,810
yeah you use the Microsoft

00:01:26,270 --> 00:01:29,310
[Music]

00:01:32,570 --> 00:01:39,860
okay hello everybody as different was

00:01:37,580 --> 00:01:41,480
saying I'm Mohan Badou

00:01:39,860 --> 00:01:46,220
I work as a release engineer for fedora

00:01:41,480 --> 00:01:48,670
and we are here to talk about how you

00:01:46,220 --> 00:01:52,850
can build modules and how they will be

00:01:48,670 --> 00:01:55,270
available in federal reports so first

00:01:52,850 --> 00:01:57,260
part is how you can build them and

00:01:55,270 --> 00:01:57,650
stephanie is going to help you out with

00:01:57,260 --> 00:02:00,800
that

00:01:57,650 --> 00:02:02,360
all right so some of you may have come

00:02:00,800 --> 00:02:03,680
to my earlier talk where I explained why

00:02:02,360 --> 00:02:05,600
you might want to build a module so I'm

00:02:03,680 --> 00:02:08,000
not going to cover that again let's

00:02:05,600 --> 00:02:09,380
assume for the moment that you've

00:02:08,000 --> 00:02:15,110
decided that this is the right thing for

00:02:09,380 --> 00:02:16,370
your project so I'm gonna take an

00:02:15,110 --> 00:02:22,430
example that I is that I put together

00:02:16,370 --> 00:02:24,290
fairly recently for a yeah alright I

00:02:22,430 --> 00:02:26,060
realized that this is not terribly

00:02:24,290 --> 00:02:29,660
legible we will have the slides put up

00:02:26,060 --> 00:02:32,590
later but this is a this is a relatively

00:02:29,660 --> 00:02:35,090
simple example of a module MDM will file

00:02:32,590 --> 00:02:37,070
which is the basic recipe for how you

00:02:35,090 --> 00:02:40,340
put together alright this example is

00:02:37,070 --> 00:02:45,410
based on hub which is a tool for

00:02:40,340 --> 00:02:47,150
interacting with github wraps yet when I

00:02:45,410 --> 00:02:49,610
went when we started my own modularity

00:02:47,150 --> 00:02:51,739
I've been maintaining the stable version

00:02:49,610 --> 00:02:53,239
of this for some time and they hadn't

00:02:51,739 --> 00:02:55,250
done a stable release in well over a

00:02:53,239 --> 00:02:57,500
year but there were but their upstream

00:02:55,250 --> 00:02:59,450
had lots and lots of really new features

00:02:57,500 --> 00:03:01,160
so I decided I'll keep the stapler

00:02:59,450 --> 00:03:04,430
release in main fedora and I'll make a

00:03:01,160 --> 00:03:06,920
module stream for the latest you know

00:03:04,430 --> 00:03:12,250
they just it just the get snapshot I'll

00:03:06,920 --> 00:03:12,250
release it about every month great so

00:03:13,280 --> 00:03:16,850
the first thing I had to do there was I

00:03:14,960 --> 00:03:19,430
had to create a new branch and I had a

00:03:16,850 --> 00:03:21,320
request I had to use a at the time it

00:03:19,430 --> 00:03:23,380
was Federico request but now in now fed

00:03:21,320 --> 00:03:27,140
package actually has the capability to

00:03:23,380 --> 00:03:32,210
request from Relan from umbrella Inge a

00:03:27,140 --> 00:03:35,000
new branch for if for a an RPM so my my

00:03:32,210 --> 00:03:37,040
hub rpm I asked it for the pre-release I

00:03:35,000 --> 00:03:39,590
asked for a pre-release branch it took

00:03:37,040 --> 00:03:42,170
about I think was six hours turnaround

00:03:39,590 --> 00:03:44,480
to get and that was particularly long

00:03:42,170 --> 00:03:46,070
but they were busy that day and I got I

00:03:44,480 --> 00:03:49,040
got a new branch that I could connect

00:03:46,070 --> 00:03:50,990
commit to so I on that branch it treated

00:03:49,040 --> 00:03:52,520
just like a regular dist get branching

00:03:50,990 --> 00:03:55,670
prior you prepare your spec file you do

00:03:52,520 --> 00:03:57,200
you you can do fed package local and so

00:03:55,670 --> 00:04:01,070
on and so forth the only thing you don't

00:03:57,200 --> 00:04:02,240
do is fed package build because that is

00:04:01,070 --> 00:04:04,220
going to get rolled up into the actual

00:04:02,240 --> 00:04:05,450
module build so you can you push to the

00:04:04,220 --> 00:04:07,330
kit you push the repo but you don't

00:04:05,450 --> 00:04:11,209
actually need to do a traditional build

00:04:07,330 --> 00:04:14,770
then you request a module repository and

00:04:11,209 --> 00:04:20,239
disc it and you drop in it this file

00:04:14,770 --> 00:04:22,040
it's a it's a this is honestly it's a

00:04:20,239 --> 00:04:23,600
very simple one but they don't really

00:04:22,040 --> 00:04:25,940
get a whole lot of complicated either

00:04:23,600 --> 00:04:30,350
it's a very it's a very simple format so

00:04:25,940 --> 00:04:31,520
I'll walk through it quickly sorry we're

00:04:30,350 --> 00:04:33,680
having a little trouble with the

00:04:31,520 --> 00:04:36,220
speakers hope that doesn't get picked up

00:04:33,680 --> 00:04:36,220
on the recording

00:04:36,270 --> 00:04:40,289
aside from the header information which

00:04:37,979 --> 00:04:45,419
just says this is a monthly document for

00:04:40,289 --> 00:04:47,639
format to the mandatory feature entries

00:04:45,419 --> 00:04:52,110
are a summary which is basically the

00:04:47,639 --> 00:04:55,710
same as an RPM spec file summary is the

00:04:52,110 --> 00:04:57,930
same for a description for the license

00:04:55,710 --> 00:04:58,979
there are two kinds of there are two

00:04:57,930 --> 00:05:00,240
kinds of licenses

00:04:58,979 --> 00:05:03,150
you only need to specify what the

00:05:00,240 --> 00:05:04,199
licenses for the module during them the

00:05:03,150 --> 00:05:05,520
module build service this will

00:05:04,199 --> 00:05:07,199
automatically be populated with the

00:05:05,520 --> 00:05:10,979
license fields of any rpms that are

00:05:07,199 --> 00:05:17,430
built with it as well for compliance

00:05:10,979 --> 00:05:18,449
purposes the dependencies actually no

00:05:17,430 --> 00:05:19,710
I'm gonna do that one last because

00:05:18,449 --> 00:05:21,720
that's the only complicated part in this

00:05:19,710 --> 00:05:23,669
out in this so it runs through the rest

00:05:21,720 --> 00:05:27,030
references are fairly easy you just tell

00:05:23,669 --> 00:05:29,490
it for informational purposes profiles

00:05:27,030 --> 00:05:32,550
are sort of like comps groups except

00:05:29,490 --> 00:05:33,780
instead of a cabal of of people with

00:05:32,550 --> 00:05:35,909
commit privilege two comps you can

00:05:33,780 --> 00:05:39,060
actually just say I want to have these

00:05:35,909 --> 00:05:41,219
this set of profiles so that let's say

00:05:39,060 --> 00:05:45,900
my project has a server and a client I

00:05:41,219 --> 00:05:48,240
can choose to say if you install module

00:05:45,900 --> 00:05:50,310
name called slash server you get all the

00:05:48,240 --> 00:05:52,110
server bits stall module name slash

00:05:50,310 --> 00:05:54,569
client you just get the client to pieces

00:05:52,110 --> 00:05:56,460
and that's a and the package gets to

00:05:54,569 --> 00:06:01,380
define this which is a significant

00:05:56,460 --> 00:06:09,310
usability improvement over comps API

00:06:01,380 --> 00:06:12,100
here is you try to okay API here

00:06:09,310 --> 00:06:13,900
is one of the more interesting concepts

00:06:12,100 --> 00:06:17,350
about this it allows you to specify

00:06:13,900 --> 00:06:21,150
which output rpms from the from the

00:06:17,350 --> 00:06:33,340
module build you are treating as

00:06:21,150 --> 00:06:35,890
acceptable for general use thank you the

00:06:33,340 --> 00:06:38,080
the implication there is that anything

00:06:35,890 --> 00:06:39,670
any binary rpm that is produced from the

00:06:38,080 --> 00:06:43,630
module build that is not listed under

00:06:39,670 --> 00:06:47,680
API is therefore implicitly included and

00:06:43,630 --> 00:06:50,620
supported only insofar as it is used by

00:06:47,680 --> 00:06:51,970
this by this module so one of the

00:06:50,620 --> 00:06:54,730
classic problems we've had in fedora of

00:06:51,970 --> 00:06:55,960
course is that anytime you package a

00:06:54,730 --> 00:06:57,340
piece of software you care about you

00:06:55,960 --> 00:06:59,410
almost certainly have to package three

00:06:57,340 --> 00:07:00,880
or four dependencies that don't this

00:06:59,410 --> 00:07:03,250
allows us a way to bundle those together

00:07:00,880 --> 00:07:05,260
in such a way that you can say I only

00:07:03,250 --> 00:07:06,850
care about this from my package for my

00:07:05,260 --> 00:07:10,630
package and you shouldn't be using it

00:07:06,850 --> 00:07:11,590
for anything else and then lastly is the

00:07:10,630 --> 00:07:15,070
components these are the things that

00:07:11,590 --> 00:07:20,230
make up the module itself the name the

00:07:15,070 --> 00:07:24,340
name field your that reference that oh

00:07:20,230 --> 00:07:27,010
that will reference a a repository in

00:07:24,340 --> 00:07:29,740
the rpm's namespace of disk get the ref

00:07:27,010 --> 00:07:31,090
is any commit ish if you know the type

00:07:29,740 --> 00:07:34,390
of the get term it's any it's any branch

00:07:31,090 --> 00:07:35,860
or specific commit ID in that disk get

00:07:34,390 --> 00:07:38,530
branch that you want to build from so

00:07:35,860 --> 00:07:40,330
normally this will be a stream branch in

00:07:38,530 --> 00:07:41,620
very rare cases you might pin it on a

00:07:40,330 --> 00:07:43,480
particular commit if you know that

00:07:41,620 --> 00:07:45,190
something got broken and you need to get

00:07:43,480 --> 00:07:49,720
you need to build against an older

00:07:45,190 --> 00:07:54,150
version for example so I'll jump back

00:07:49,720 --> 00:07:54,150
now quickly to the dependency section

00:07:55,370 --> 00:08:00,270
that the rationale is just a comment

00:07:58,110 --> 00:08:02,460
essentially it's it's reminding yourself

00:08:00,270 --> 00:08:05,250
why you put this particular income and

00:08:02,460 --> 00:08:08,100
component into the module it's you know

00:08:05,250 --> 00:08:09,810
it's mostly useful for dependencies this

00:08:08,100 --> 00:08:11,400
library is required in order to use this

00:08:09,810 --> 00:08:12,570
function in the main packet repo or

00:08:11,400 --> 00:08:14,490
something like that it's it's a it's a

00:08:12,570 --> 00:08:16,800
useful hint for future use but it

00:08:14,490 --> 00:08:20,120
doesn't it doesn't get considered as

00:08:16,800 --> 00:08:23,240
part of any programmatic decision making

00:08:20,120 --> 00:08:23,240
thank you very

00:08:23,730 --> 00:08:26,640
no it can't

00:08:24,900 --> 00:08:30,780
and there are historical reasons for

00:08:26,640 --> 00:08:34,350
that that that's a vestige of the

00:08:30,780 --> 00:08:35,580
modularity one auto effort where since

00:08:34,350 --> 00:08:36,780
we were trying to modular as everything

00:08:35,580 --> 00:08:38,580
including the platform you had to

00:08:36,780 --> 00:08:40,230
justify and we made that a mandatory

00:08:38,580 --> 00:08:43,200
fuel because you had to justify why it

00:08:40,230 --> 00:08:44,840
got in there that I suspect will

00:08:43,200 --> 00:08:51,630
probably drop that when we get to three

00:08:44,840 --> 00:08:52,650
of this format so the dependencies this

00:08:51,630 --> 00:08:54,180
will this will be a little bit

00:08:52,650 --> 00:08:56,160
non-intuitive the way it's written here

00:08:54,180 --> 00:09:00,300
but I think you'll find once that once I

00:08:56,160 --> 00:09:02,400
explain it that it's really handy so the

00:09:00,300 --> 00:09:03,990
build requires and the requires in

00:09:02,400 --> 00:09:05,970
almost all cases they're going to be

00:09:03,990 --> 00:09:07,680
identical then they'll indicate that

00:09:05,970 --> 00:09:11,280
you'll build for this platform and

00:09:07,680 --> 00:09:14,040
you'll run on this platform so in yam

00:09:11,280 --> 00:09:16,110
well in yamo syntax that is an array and

00:09:14,040 --> 00:09:18,420
that is the reason we specify an empty

00:09:16,110 --> 00:09:19,980
array is that that's a special case for

00:09:18,420 --> 00:09:23,570
the module build service which will tell

00:09:19,980 --> 00:09:28,080
it build on any currently currently

00:09:23,570 --> 00:09:30,830
active branch platform so Fedora right

00:09:28,080 --> 00:09:33,870
now that would be Fedora 28 and rawhide

00:09:30,830 --> 00:09:36,870
in a little over a week that'll be

00:09:33,870 --> 00:09:39,690
Fedora 28 29 and rawhide eventually we

00:09:36,870 --> 00:09:43,899
hope this will be Apple

00:09:39,690 --> 00:09:45,670
so this just says when I build this tri

00:09:43,899 --> 00:09:47,709
for everything if you want to limit it

00:09:45,670 --> 00:09:49,540
you just may use Yambol syntax and you

00:09:47,709 --> 00:09:52,839
specify the specific releases that your

00:09:49,540 --> 00:09:54,519
that you want to put it on as long as

00:09:52,839 --> 00:09:56,860
those two things are the same

00:09:54,519 --> 00:09:58,509
you'll what you'll do is you'll the NBS

00:09:56,860 --> 00:10:00,579
will automatically build for each of

00:09:58,509 --> 00:10:03,519
those in separately and then it will all

00:10:00,579 --> 00:10:06,129
get pushed out into the repositories the

00:10:03,519 --> 00:10:08,350
other the other feature of that is not

00:10:06,129 --> 00:10:11,649
quite ready but will be hopefully soon

00:10:08,350 --> 00:10:14,230
which is if you if it is possible to

00:10:11,649 --> 00:10:19,120
specify a different set of them and have

00:10:14,230 --> 00:10:21,970
it for example build requires on f28 but

00:10:19,120 --> 00:10:25,120
be installable on 25 28 29 and there and

00:10:21,970 --> 00:10:26,949
rawhide because you know that it has no

00:10:25,120 --> 00:10:28,720
dependency on the actual platform you

00:10:26,949 --> 00:10:30,730
just need somewhere to build some

00:10:28,720 --> 00:10:33,009
builder it just I would like people to

00:10:30,730 --> 00:10:35,290
notice that there is no dish in front of

00:10:33,009 --> 00:10:38,050
requires it's it's a list of the

00:10:35,290 --> 00:10:41,709
requires and it requires just one okay

00:10:38,050 --> 00:10:45,040
so the comment from the peanut gallery

00:10:41,709 --> 00:10:47,620
I'm sorry patter is that there's a

00:10:45,040 --> 00:10:50,589
little trick enos in the gamal here this

00:10:47,620 --> 00:10:52,480
is actually a single entry and you can

00:10:50,589 --> 00:10:53,920
have multiple entries but that's a

00:10:52,480 --> 00:10:58,120
complicated feature that I hope never

00:10:53,920 --> 00:11:00,810
one no one ever uses and many people and

00:10:58,120 --> 00:11:00,810
people will get wrong

00:11:07,649 --> 00:11:11,589
okay so the question is what happens

00:11:10,060 --> 00:11:14,910
when you have module other modules

00:11:11,589 --> 00:11:14,910
besides platform in there I think

00:11:20,970 --> 00:11:29,920
okay those so the question is what do

00:11:28,510 --> 00:11:31,000
you do how do you map things when they

00:11:29,920 --> 00:11:34,000
when the build acquires and requires

00:11:31,000 --> 00:11:36,100
aren't exactly the same I'm going to

00:11:34,000 --> 00:11:37,449
gloss over that in this particular talk

00:11:36,100 --> 00:11:38,949
because I don't actually have it because

00:11:37,449 --> 00:11:40,990
it's a it's a fairly complicated case

00:11:38,949 --> 00:11:45,880
and we anticipate that the majority of

00:11:40,990 --> 00:11:49,930
cases will just Maps and match them we

00:11:45,880 --> 00:11:52,240
probably will only support the build one

00:11:49,930 --> 00:11:54,850
build on once and run many places case

00:11:52,240 --> 00:12:00,760
we I don't think it's likely that we

00:11:54,850 --> 00:12:04,350
will try to do the reverse buy policy I

00:12:00,760 --> 00:12:04,350
suspect we will not allow both

00:12:06,800 --> 00:12:10,269
if you wouldn't know Oh

00:12:10,329 --> 00:12:14,600
so once you have written that Yan will

00:12:13,309 --> 00:12:17,389
file that was the hardest part of this

00:12:14,600 --> 00:12:20,509
process from the from the perspective of

00:12:17,389 --> 00:12:22,129
the packager what remains is your fed

00:12:20,509 --> 00:12:24,649
package push and then you fed package

00:12:22,129 --> 00:12:26,720
module build in that in that modules to

00:12:24,649 --> 00:12:28,720
a diskette repository and in this case

00:12:26,720 --> 00:12:32,119
you'll see that it submits builds

00:12:28,720 --> 00:12:33,980
1978-1979 and the reason for that is

00:12:32,119 --> 00:12:36,529
because i request that it be built on

00:12:33,980 --> 00:12:41,209
all available modules they all available

00:12:36,529 --> 00:12:44,269
platforms and that was 28 and 29 so that

00:12:41,209 --> 00:12:47,779
I believe is my my half of this so much

00:12:44,269 --> 00:12:49,699
Mohan is going to talk to you about how

00:12:47,779 --> 00:12:59,089
the tagging structure works and how that

00:12:49,699 --> 00:13:04,089
gets out to a repository so now about

00:12:59,089 --> 00:13:04,089
how to get these modules into their APIs

00:13:04,410 --> 00:13:11,160
basically coach attacking how many of

00:13:07,530 --> 00:13:19,760
you guys know how normal rpm rpm tagging

00:13:11,160 --> 00:13:22,470
works in okay that's great actually so

00:13:19,760 --> 00:13:25,590
so it's basically similar to whatever

00:13:22,470 --> 00:13:29,310
the normal rpm tagging with slight

00:13:25,590 --> 00:13:34,040
differences which I'll go through it

00:13:29,310 --> 00:13:34,040
right now but we have three different

00:13:35,660 --> 00:13:43,140
okay so we have three different life

00:13:39,570 --> 00:13:46,350
cycles so the other one is branched and

00:13:43,140 --> 00:13:50,570
then released so we will go through on

00:13:46,350 --> 00:13:50,570
each of them first one is rawhide

00:13:51,410 --> 00:13:59,010
basically you call it package module

00:13:54,810 --> 00:14:02,930
bill and once you call that it will be

00:13:59,010 --> 00:14:06,360
tagged ooh that particular release

00:14:02,930 --> 00:14:08,580
rawhide a modular signing tag where it

00:14:06,360 --> 00:14:10,530
will wait for the signing and once the

00:14:08,580 --> 00:14:12,390
module gets signed with which means all

00:14:10,530 --> 00:14:14,370
that PM's in the module once they get

00:14:12,390 --> 00:14:17,010
signed they will be tagged into the base

00:14:14,370 --> 00:14:20,820
tag of that release which is f29 in the

00:14:17,010 --> 00:14:24,450
current scenario and the repo is

00:14:20,820 --> 00:14:29,400
generated every night in our nightly

00:14:24,450 --> 00:14:33,510
composes so and basically when I say

00:14:29,400 --> 00:14:36,900
repo we are actually having a sub

00:14:33,510 --> 00:14:39,270
package for a federalist which is a

00:14:36,900 --> 00:14:41,850
federal modular repose back until a week

00:14:39,270 --> 00:14:44,250
ago I guess yes

00:14:41,850 --> 00:14:46,740
so in which you contain all the module

00:14:44,250 --> 00:14:51,090
information and stuff like that but a

00:14:46,740 --> 00:14:55,170
week before we drop that and now each

00:14:51,090 --> 00:14:58,680
and every variant we have modularity

00:14:55,170 --> 00:15:00,960
enabled so guys who don't know about

00:14:58,680 --> 00:15:03,240
this and if you are using rawhide

00:15:00,960 --> 00:15:07,200
currently please go and try it out and

00:15:03,240 --> 00:15:09,930
please let us know how it is going so

00:15:07,200 --> 00:15:13,750
that's how you can consume the repose

00:15:09,930 --> 00:15:22,310
every night it will get updated with

00:15:13,750 --> 00:15:24,200
modules then we have blanched branched

00:15:22,310 --> 00:15:27,860
is a little bit different because we

00:15:24,200 --> 00:15:29,600
have both involved so how it works is

00:15:27,860 --> 00:15:33,350
once you build it it will get tagged

00:15:29,600 --> 00:15:35,180
into modular updates candidate where the

00:15:33,350 --> 00:15:38,360
update is going to sit until you submit

00:15:35,180 --> 00:15:41,750
the update in body once you submit the

00:15:38,360 --> 00:15:44,990
update it will be a it will be tagged

00:15:41,750 --> 00:15:48,890
into a modular signing pending tag where

00:15:44,990 --> 00:15:51,700
it will wait for its signing and once

00:15:48,890 --> 00:15:54,830
it's signed it will get into tagged into

00:15:51,700 --> 00:16:01,250
modular updates distinct pending I think

00:15:54,830 --> 00:16:03,380
I got it right yeah once it's there we

00:16:01,250 --> 00:16:07,430
release engineers and info people will

00:16:03,380 --> 00:16:10,370
push updates every day so once it is

00:16:07,430 --> 00:16:13,550
tagged into that pending tag testing

00:16:10,370 --> 00:16:18,640
pending tag when we push updates it will

00:16:13,550 --> 00:16:21,620
be tagged into modular testing tides and

00:16:18,640 --> 00:16:26,240
what it updates testing tags where we

00:16:21,620 --> 00:16:29,420
generate the repose and that we you can

00:16:26,240 --> 00:16:32,150
use it as the that's the testing repose

00:16:29,420 --> 00:16:34,730
that you can consume and once it meets

00:16:32,150 --> 00:16:37,940
the body requirements it will get tagged

00:16:34,730 --> 00:16:39,530
into the base tag and from which these

00:16:37,940 --> 00:16:44,210
reports are generated nightly again just

00:16:39,530 --> 00:16:50,150
as rawhide and you can get the stable

00:16:44,210 --> 00:16:51,620
repose from them and the released for

00:16:50,150 --> 00:16:54,110
the time psych it's similar to branched

00:16:51,620 --> 00:16:57,950
but we introduced a modular updates a

00:16:54,110 --> 00:17:01,250
tag as a stable tag so once it passes

00:16:57,950 --> 00:17:03,560
testing it will be once the body

00:17:01,250 --> 00:17:06,650
requirement is met it will be waiting in

00:17:03,560 --> 00:17:08,210
the modulus update pending time and once

00:17:06,650 --> 00:17:10,010
we and the push is completed it will

00:17:08,210 --> 00:17:11,480
tagged into modular updates and where

00:17:10,010 --> 00:17:17,230
the repose are generated and you can

00:17:11,480 --> 00:17:19,720
consume them as the stable repose and

00:17:17,230 --> 00:17:23,500
that differences

00:17:19,720 --> 00:17:27,909
from the normal rpm to current the

00:17:23,500 --> 00:17:31,539
modularity is as Steven was saying you

00:17:27,909 --> 00:17:33,879
can build modules for different releases

00:17:31,539 --> 00:17:36,490
at the same time based upon what your

00:17:33,879 --> 00:17:40,509
build requirements are so it can

00:17:36,490 --> 00:17:44,710
generate multiple builds and the way

00:17:40,509 --> 00:17:47,139
that with world work is with the same

00:17:44,710 --> 00:17:49,330
module build command you can get to

00:17:47,139 --> 00:17:53,350
different module builds each point in

00:17:49,330 --> 00:18:02,350
two different different releases and it

00:17:53,350 --> 00:18:05,769
will go through it if it is branched it

00:18:02,350 --> 00:18:20,610
will go through the process so that's

00:18:05,769 --> 00:18:20,610
how and let us know

00:18:41,200 --> 00:18:46,899
two details about you know how long they

00:18:43,960 --> 00:18:49,059
stay in the koji and we could let me use

00:18:46,899 --> 00:18:51,250
them for scratch adults erratically it's

00:18:49,059 --> 00:18:55,510
come back I get issue but specific

00:18:51,250 --> 00:18:58,120
question is so the question is about how

00:18:55,510 --> 00:19:00,779
do we prune modularity targets in fedora

00:18:58,120 --> 00:19:05,440
and up until recently that was a bug

00:19:00,779 --> 00:19:07,029
they weren't actually aren't they're not

00:19:05,440 --> 00:19:09,730
supposed to be pruned they were getting

00:19:07,029 --> 00:19:10,990
burned right now that pruning is

00:19:09,730 --> 00:19:12,760
entirely turned off on them and we're

00:19:10,990 --> 00:19:15,460
doing it manually if we know we know

00:19:12,760 --> 00:19:18,120
something is gone but uh yeah that would

00:19:15,460 --> 00:19:18,120
that was just a bug

00:19:28,370 --> 00:19:30,970
yeah

00:19:42,830 --> 00:19:46,789
what is the expected result if you build

00:19:45,059 --> 00:19:49,019
against 28 and 29 and one of them fails

00:19:46,789 --> 00:19:50,729
pretty much the same if you built in air

00:19:49,019 --> 00:19:55,289
the RPMs individually against 28 between

00:19:50,729 --> 00:19:57,570
and one of them has failed like it

00:19:55,289 --> 00:20:01,229
updates don't happen automatically well

00:19:57,570 --> 00:20:02,580
except for ride if it doesn't fail you

00:20:01,229 --> 00:20:04,080
won't have it available for to push

00:20:02,580 --> 00:20:05,940
about it to create a bode update for it

00:20:04,080 --> 00:20:08,090
just have to go fix it before you can do

00:20:05,940 --> 00:20:08,090
that

00:20:11,680 --> 00:20:16,930
so let me get another bill but you want

00:20:16,390 --> 00:20:19,590
to

00:20:16,930 --> 00:20:19,590
first

00:20:25,660 --> 00:20:31,270
yes the question was does that mean you

00:20:29,060 --> 00:20:36,500
get an A you have to do another build

00:20:31,270 --> 00:20:38,180
yes we don't really have a policy on

00:20:36,500 --> 00:20:40,850
whether or not your work what we want to

00:20:38,180 --> 00:20:42,920
require you to build them both a second

00:20:40,850 --> 00:20:45,200
time or just a lot or I mean you can

00:20:42,920 --> 00:20:47,120
always choose to modify refer a single

00:20:45,200 --> 00:20:48,920
build to have it just build for the one

00:20:47,120 --> 00:20:52,730
platform by changing that that bill

00:20:48,920 --> 00:20:54,110
requires and requires field so if you

00:20:52,730 --> 00:20:56,630
know that there's no reason to rebuild

00:20:54,110 --> 00:20:58,130
you can do that and then I then uncommit

00:20:56,630 --> 00:21:12,410
that after you know that change after

00:20:58,130 --> 00:21:15,550
you have done the build can you commit

00:21:12,410 --> 00:21:19,040
to take the new content of the branch or

00:21:15,550 --> 00:21:23,870
no what is the concept I are using the

00:21:19,040 --> 00:21:27,160
same name oh this is this is not at all

00:21:23,870 --> 00:21:29,630
policy this is a technical question and

00:21:27,160 --> 00:21:31,310
what he's asking about this why he needs

00:21:29,630 --> 00:21:33,440
to commit to the module again when he

00:21:31,310 --> 00:21:34,940
just updates the idea okay so the

00:21:33,440 --> 00:21:36,620
question is why do I have to commit to

00:21:34,940 --> 00:21:38,540
the why do I have to do another commit

00:21:36,620 --> 00:21:40,340
to the module repo when I when I make a

00:21:38,540 --> 00:21:44,330
commit to the rpm's repo nor to rebuild

00:21:40,340 --> 00:21:46,880
them that is a question better asked of

00:21:44,330 --> 00:21:49,420
the MB of the NBS maintain errs I'm not

00:21:46,880 --> 00:21:49,420
entirely sure

00:21:50,280 --> 00:21:56,950
right well yeah I so it when the NBS

00:21:55,120 --> 00:21:58,990
does its build it takes the it takes

00:21:56,950 --> 00:22:00,160
that branch and then it actually bill it

00:21:58,990 --> 00:22:02,260
actually goes and looks up what is the

00:22:00,160 --> 00:22:05,950
real commit ID and it saves that as part

00:22:02,260 --> 00:22:07,390
of this build and when you do a and the

00:22:05,950 --> 00:22:10,150
reason for this is sometimes you have

00:22:07,390 --> 00:22:12,160
test flakes or or issues where the build

00:22:10,150 --> 00:22:14,110
fails that it it's recoverable you just

00:22:12,160 --> 00:22:16,660
try it again and it would go and so this

00:22:14,110 --> 00:22:18,490
ensures that it actually rebuilds the

00:22:16,660 --> 00:22:19,780
same thing it was trying to before and

00:22:18,490 --> 00:22:21,160
even if you've made another commit they

00:22:19,780 --> 00:22:24,040
don't want to change things out from

00:22:21,160 --> 00:22:26,170
under you well while you're doing that

00:22:24,040 --> 00:22:27,550
so it requires you to make a new commit

00:22:26,170 --> 00:22:29,230
in order for it to go and look up the

00:22:27,550 --> 00:22:33,460
latest ID and make sure and see if it

00:22:29,230 --> 00:22:35,760
matches it's a really esoteric technical

00:22:33,460 --> 00:22:35,760
problem

00:22:41,250 --> 00:22:45,870
so the question from Langdon was didn't

00:22:44,789 --> 00:22:47,280
we push a change to make sure that

00:22:45,870 --> 00:22:53,880
wasn't the case anymore and the answer

00:22:47,280 --> 00:22:55,440
was no let's take that discussion to the

00:22:53,880 --> 00:22:57,770
expert to the expert help desk in the

00:22:55,440 --> 00:22:57,770
afternoon

00:23:13,370 --> 00:23:16,610
so the question is if you build

00:23:15,170 --> 00:23:17,870
something that is available only as a

00:23:16,610 --> 00:23:20,240
module and not in the standard

00:23:17,870 --> 00:23:22,430
traditional or rpm repositories will

00:23:20,240 --> 00:23:25,040
user have to go and enable a module in

00:23:22,430 --> 00:23:26,960
order to see it the answer is it depends

00:23:25,040 --> 00:23:27,650
on whether or not you have requested and

00:23:26,960 --> 00:23:30,140
this is something we should have

00:23:27,650 --> 00:23:32,330
probably recovered in there was a you

00:23:30,140 --> 00:23:34,510
have to request a default stream and if

00:23:32,330 --> 00:23:37,130
you differ and if you pick a pick one

00:23:34,510 --> 00:23:38,630
stream for of a module to be the default

00:23:37,130 --> 00:23:40,910
in this on this platform and on this

00:23:38,630 --> 00:23:43,400
platform then it will just simply show

00:23:40,910 --> 00:23:45,380
up as if it was a similar to if it was

00:23:43,400 --> 00:23:46,670
enabled there's only one minor technical

00:23:45,380 --> 00:23:49,060
reason why it's different than being

00:23:46,670 --> 00:23:49,060
enabled

00:23:54,520 --> 00:23:58,840
right so yeah so defaults are not

00:23:56,350 --> 00:24:01,270
invisible in the bill in the Builder

00:23:58,840 --> 00:24:04,480
you always have to explicitly state that

00:24:01,270 --> 00:24:06,960
in the build requires if it's a if you

00:24:04,480 --> 00:24:06,960
needed to build

00:24:16,059 --> 00:24:20,259
so the question is can I have an on

00:24:17,710 --> 00:24:22,149
module an on module rpm depend on

00:24:20,259 --> 00:24:25,899
something that that is in the default

00:24:22,149 --> 00:24:29,279
scheme of a module technically you can

00:24:25,899 --> 00:24:29,279
by policy say no

00:24:36,900 --> 00:24:40,440
can can a module the question is can a

00:24:39,030 --> 00:24:41,970
module depend on another module and

00:24:40,440 --> 00:24:45,240
build requires and requires yes

00:24:41,970 --> 00:24:46,620
absolutely I also kind of glossed over

00:24:45,240 --> 00:24:49,440
that because if that when that list

00:24:46,620 --> 00:24:51,360
starts getting long and divergent it the

00:24:49,440 --> 00:24:55,470
number of MBS builds that get fired off

00:24:51,360 --> 00:24:56,790
gets large but I said that that would be

00:24:55,470 --> 00:24:58,530
one of those cases where you might see

00:24:56,790 --> 00:25:00,720
more than one list there's if you know

00:24:58,530 --> 00:25:02,220
that it depends on this version stream

00:25:00,720 --> 00:25:03,600
in this release and this version stream

00:25:02,220 --> 00:25:05,430
in that release you can spell that you

00:25:03,600 --> 00:25:07,470
you can actually dictate that in this in

00:25:05,430 --> 00:25:09,000
the file format but we are out of time

00:25:07,470 --> 00:25:11,270
so I'm definitely not covering that

00:25:09,000 --> 00:25:11,270
today

00:25:14,269 --> 00:25:17,269
oh really we have a different we have

00:25:15,830 --> 00:25:20,980
different clocks so I had time to say

00:25:17,269 --> 00:25:24,190
thanks for coming thank you very much

00:25:20,980 --> 00:25:24,190

YouTube URL: https://www.youtube.com/watch?v=bC4p06dySBw


