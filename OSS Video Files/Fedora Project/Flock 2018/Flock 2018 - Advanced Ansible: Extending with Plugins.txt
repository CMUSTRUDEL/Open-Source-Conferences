Title: Flock 2018 - Advanced Ansible: Extending with Plugins
Publication date: 2018-08-29
Playlist: Flock 2018
Description: 
	Wednesday, August 8, 2018
2:30pm - 3:20pm
@Hamburg 3+5

Talk: Advanced Ansible: Extending with Plugins
Presenters: Adam Miller

Description: Ansible is a radically simple IT agentless automation system. It handles configuration-management, application deployment, cloud provisioning, ad-hoc task-execution, and multinode orchestration - including trivializing things like zero-downtime rolling updates with load balancers. Currently, Ansible is used heavily within the Fedora Project by the Infrastructure, CI, QA, and Release Engineering teams. There are use cases within Fedora where Ansible's usage could easily be extended to make Ansible more natively fit into the Fedora Worflow process by way of proper fedmsg integration or otherwise. Ansible Plugins lend themselves to these potential integration points. In this session we will discuss advanced topics in Ansible such as extending core functionality with plugins in hopes to be a catalyst of new ideas and new ways Ansible can solve problems or improve upon solutions in service of the Fedora Project.
Captions: 
	00:00:03,980 --> 00:00:08,639
okay well it's whereat time we'll get

00:00:06,029 --> 00:00:12,360
started hi my name is Adam Miller I am

00:00:08,639 --> 00:00:15,360
on the ansible core engineering team at

00:00:12,360 --> 00:00:16,740
Red Hat I before that have been on the

00:00:15,360 --> 00:00:20,449
food or engineering team and I've been a

00:00:16,740 --> 00:00:22,740
Fedora community member since roughly

00:00:20,449 --> 00:00:26,220
been contributing through our community

00:00:22,740 --> 00:00:28,320
members since roughly 2008 but a

00:00:26,220 --> 00:00:30,179
longtime user been doing stuff here and

00:00:28,320 --> 00:00:32,579
there but I want to talk today about

00:00:30,179 --> 00:00:34,710
advanced ansible extending ansible

00:00:32,579 --> 00:00:37,739
through plugins we're gonna kind of talk

00:00:34,710 --> 00:00:39,690
about a quick outline why this matters

00:00:37,739 --> 00:00:41,730
for fedora why this is you know being

00:00:39,690 --> 00:00:43,829
presented here it's some ansible

00:00:41,730 --> 00:00:45,210
internals plug-in types of examples how

00:00:43,829 --> 00:00:47,489
to write a plug-in and how to contribute

00:00:45,210 --> 00:00:48,480
a plugin if you find something that is

00:00:47,489 --> 00:00:50,370
very useful you think that might be

00:00:48,480 --> 00:00:54,300
useful for other users out in the

00:00:50,370 --> 00:00:55,980
ansible community so why advanced and

00:00:54,300 --> 00:00:56,280
split flock well quick is a history

00:00:55,980 --> 00:00:59,250
lesson

00:00:56,280 --> 00:01:00,780
so ansible infinite of shared history so

00:00:59,250 --> 00:01:02,430
for starters ansible was created by

00:01:00,780 --> 00:01:05,400
Michael de Haan who has history in

00:01:02,430 --> 00:01:07,680
fedora and then actually as well a

00:01:05,400 --> 00:01:09,900
redhead emerging technologies Adrienne

00:01:07,680 --> 00:01:13,439
likens Greg Dakotas Berg and Seth at all

00:01:09,900 --> 00:01:17,400
Greg deck being a Fedora project leader

00:01:13,439 --> 00:01:19,320
and Seth fat all being the original

00:01:17,400 --> 00:01:24,330
author of young longtime fedora can't

00:01:19,320 --> 00:01:26,070
remember before he tragically passed and

00:01:24,330 --> 00:01:28,020
then so Funke also does anybody remember

00:01:26,070 --> 00:01:31,770
funk from thrower arm stretch team like

00:01:28,020 --> 00:01:33,540
okay two three so funk was a tool that

00:01:31,770 --> 00:01:36,600
was kind of created once upon a time to

00:01:33,540 --> 00:01:38,310
do this concept of orchestration within

00:01:36,600 --> 00:01:40,680
the environment ad hoc tasks those kind

00:01:38,310 --> 00:01:41,880
of things but it was based on a message

00:01:40,680 --> 00:01:44,700
bus and these various different

00:01:41,880 --> 00:01:47,130
architectural decisions and ansible is

00:01:44,700 --> 00:01:49,140
born kind of from some of those concepts

00:01:47,130 --> 00:01:51,420
mixed with other concepts learned and

00:01:49,140 --> 00:01:53,460
things but as far as a history of

00:01:51,420 --> 00:01:55,920
Technology and as far as the concepts

00:01:53,460 --> 00:01:57,960
that came into the design and

00:01:55,920 --> 00:02:00,060
implementation of ansible many of those

00:01:57,960 --> 00:02:01,680
things actually stemmed from experience

00:02:00,060 --> 00:02:04,860
gained in the Fedora community as well

00:02:01,680 --> 00:02:06,090
as directly from Fedora commute the

00:02:04,860 --> 00:02:07,799
other thing is the fedora fedora

00:02:06,090 --> 00:02:09,690
infrastructure team actually started

00:02:07,799 --> 00:02:12,300
using ansible since it was created

00:02:09,690 --> 00:02:13,440
because seth time was on the forum

00:02:12,300 --> 00:02:16,050
structure team and

00:02:13,440 --> 00:02:18,690
he was part of the influence and the

00:02:16,050 --> 00:02:20,730
creation of the project they initially

00:02:18,690 --> 00:02:22,470
started off very quickly using it for

00:02:20,730 --> 00:02:24,840
ad-hoc tasks things like that over time

00:02:22,470 --> 00:02:27,180
but eventually repeat it replaced puppet

00:02:24,840 --> 00:02:29,100
for full and end configuration

00:02:27,180 --> 00:02:31,860
management automation and things in the

00:02:29,100 --> 00:02:34,020
fedora infrastructure Fedora CI and QA

00:02:31,860 --> 00:02:36,600
so things that seth walters and those

00:02:34,020 --> 00:02:39,590
folks work on Tim flank and those those

00:02:36,600 --> 00:02:42,360
groups are working with ansible as well

00:02:39,590 --> 00:02:43,920
also our friends over not directly

00:02:42,360 --> 00:02:46,410
related Fedora but our friends over and

00:02:43,920 --> 00:02:48,390
OpenStack if anybody familiar with Zul

00:02:46,410 --> 00:02:50,640
the CI system Xul's completely

00:02:48,390 --> 00:02:53,100
implemented using ansible as well as all

00:02:50,640 --> 00:02:54,270
their tests being written in ansible how

00:02:53,100 --> 00:02:57,390
does anybody remember Jenkins job

00:02:54,270 --> 00:03:00,390
builder yeah so James job builder the

00:02:57,390 --> 00:03:02,190
OpenStack team actually implemented a

00:03:00,390 --> 00:03:03,720
translation layer that turned Jenkins

00:03:02,190 --> 00:03:05,880
job templates into ansible that's when

00:03:03,720 --> 00:03:08,220
they move Zul dual v3 and it's all Ansel

00:03:05,880 --> 00:03:10,080
powered so just an example another

00:03:08,220 --> 00:03:11,100
example of CI efforts Fodor release

00:03:10,080 --> 00:03:13,170
engineering does some workflow

00:03:11,100 --> 00:03:16,140
automation that was some work that I was

00:03:13,170 --> 00:03:17,610
involved in a while back were we started

00:03:16,140 --> 00:03:20,190
actually doing workflow automation

00:03:17,610 --> 00:03:21,630
because there was these you know decade

00:03:20,190 --> 00:03:22,739
old shell scripts that have been sitting

00:03:21,630 --> 00:03:24,030
around that we're just kind of have to

00:03:22,739 --> 00:03:25,739
limp along and it just kind of made

00:03:24,030 --> 00:03:26,940
sense to try and move that stuff along

00:03:25,739 --> 00:03:28,470
something that was a little bit more and

00:03:26,940 --> 00:03:31,650
more maintainable a little more general

00:03:28,470 --> 00:03:34,380
use could be more easily contributed to

00:03:31,650 --> 00:03:36,810
other aspects of the Fedora project

00:03:34,380 --> 00:03:38,610
last I checked were kind of evaluating

00:03:36,810 --> 00:03:40,560
where it would work I don't know who's

00:03:38,610 --> 00:03:42,750
actually using it widespread if

00:03:40,560 --> 00:03:45,450
everybody wants aw Matt Miller's talked

00:03:42,750 --> 00:03:49,830
this morning with the web graph of you

00:03:45,450 --> 00:03:51,959
know the 37 odd different sub projects

00:03:49,830 --> 00:03:56,640
in fedora I didn't survey everybody

00:03:51,959 --> 00:04:01,730
sorry and the advanced uses available

00:03:56,640 --> 00:04:05,459
through plugins and things doing well

00:04:01,730 --> 00:04:07,260
using ansible plugins to extend the

00:04:05,459 --> 00:04:09,690
functionality to better integrate with

00:04:07,260 --> 00:04:12,570
different systems you might be using so

00:04:09,690 --> 00:04:14,370
for example the QA team they use

00:04:12,570 --> 00:04:15,600
fabricator you know there's potentially

00:04:14,370 --> 00:04:17,100
some integration points we could

00:04:15,600 --> 00:04:20,970
actually interact directly with

00:04:17,100 --> 00:04:24,030
fabricator based on actions during

00:04:20,970 --> 00:04:26,560
runtime of a playbook based on some

00:04:24,030 --> 00:04:29,410
input or some you know side effect of

00:04:26,560 --> 00:04:30,880
an automation component executing we can

00:04:29,410 --> 00:04:33,520
you know update their tickets we could

00:04:30,880 --> 00:04:35,290
update different aspects of their their

00:04:33,520 --> 00:04:37,750
planning whatever

00:04:35,290 --> 00:04:39,639
similarly with you know github or if

00:04:37,750 --> 00:04:40,870
you're you know doing our C BOTS those

00:04:39,639 --> 00:04:43,540
kind of things we can actually interact

00:04:40,870 --> 00:04:44,950
with those as well we have some plugins

00:04:43,540 --> 00:04:46,060
built in today that'll do those sorts of

00:04:44,950 --> 00:04:48,280
things but if you know there's a

00:04:46,060 --> 00:04:49,389
component that you need or that's going

00:04:48,280 --> 00:04:51,389
to be custom tailored to a specific

00:04:49,389 --> 00:04:53,680
workflow somewhere in the Fedora project

00:04:51,389 --> 00:04:56,560
plugins and those kind of things will be

00:04:53,680 --> 00:04:58,600
useful there so we're gonna go through

00:04:56,560 --> 00:05:00,250
instable internals 101 kind of given an

00:04:58,600 --> 00:05:01,780
overview of how some of the stuff comes

00:05:00,250 --> 00:05:04,479
together how it might be useful to you

00:05:01,780 --> 00:05:07,270
in things you're doing in Fedora so

00:05:04,479 --> 00:05:09,280
quick refresher or a quick refresher so

00:05:07,270 --> 00:05:12,790
I can talk I promise

00:05:09,280 --> 00:05:16,330
ansible is an agentless idempotent task

00:05:12,790 --> 00:05:17,979
automation tool task functionality is

00:05:16,330 --> 00:05:19,210
provided by modules and modules are

00:05:17,979 --> 00:05:20,320
technically a type of plug-in but

00:05:19,210 --> 00:05:21,820
they're special we'll talk about that a

00:05:20,320 --> 00:05:24,820
little bit tasks are grouped together

00:05:21,820 --> 00:05:27,419
via plays a play operates on a set of

00:05:24,820 --> 00:05:29,680
hosts hosts are indexed by an inventory

00:05:27,419 --> 00:05:32,500
playbooks can contain one or more plays

00:05:29,680 --> 00:05:34,330
and a role is a bundled reusable set of

00:05:32,500 --> 00:05:36,850
files templates variables and tasks is

00:05:34,330 --> 00:05:38,979
any of this news to anybody everybody

00:05:36,850 --> 00:05:40,780
hopefully familiar with ansible using it

00:05:38,979 --> 00:05:45,280
yes cool cool not a bunch of head nods

00:05:40,780 --> 00:05:47,650
wonderful ooh or jump okay now how Ansel

00:05:45,280 --> 00:05:49,900
works under the hood when you run

00:05:47,650 --> 00:05:52,840
ansible or ansible playbook

00:05:49,900 --> 00:05:55,139
more specifically it's gonna parse and

00:05:52,840 --> 00:05:58,240
load an inventory it will parse and load

00:05:55,139 --> 00:06:03,520
the playbook or play books in the event

00:05:58,240 --> 00:06:05,289
of includes and things or a role for

00:06:03,520 --> 00:06:08,229
each play in the play books

00:06:05,289 --> 00:06:11,289
it will then for each task in the play

00:06:08,229 --> 00:06:13,990
and then it will for each host filtered

00:06:11,289 --> 00:06:14,620
on your your host group filters and

00:06:13,990 --> 00:06:16,479
things like that

00:06:14,620 --> 00:06:18,370
it will then run the task on the host

00:06:16,479 --> 00:06:20,020
and read the results during each of

00:06:18,370 --> 00:06:22,450
these steps one more plug-in types are

00:06:20,020 --> 00:06:25,990
used so the plugins are actually taking

00:06:22,450 --> 00:06:28,180
action during the execution on each host

00:06:25,990 --> 00:06:29,800
depending on what's in your playbook so

00:06:28,180 --> 00:06:31,930
conditionally based on what's actually

00:06:29,800 --> 00:06:33,430
happening during the automation is gonna

00:06:31,930 --> 00:06:35,500
Penn which plugins or play some of them

00:06:33,430 --> 00:06:36,630
are always in play and will kind of what

00:06:35,500 --> 00:06:40,270
kind of walk through some of that stuff

00:06:36,630 --> 00:06:42,850
so the plug-in system there's a top top

00:06:40,270 --> 00:06:46,300
top class loader called the plugin

00:06:42,850 --> 00:06:47,980
loader so this is responsible for keep

00:06:46,300 --> 00:06:49,210
kicking this thing and it's probably not

00:06:47,980 --> 00:06:52,690
great because it's kind of jiggling

00:06:49,210 --> 00:06:56,560
display I'm sorry it's responsible for

00:06:52,690 --> 00:07:00,010
loading owl all of the other types for

00:06:56,560 --> 00:07:01,630
of plugins it also like I noted before

00:07:00,010 --> 00:07:04,090
modules or technically plugins they're

00:07:01,630 --> 00:07:06,100
just kind of special in a lot of ways it

00:07:04,090 --> 00:07:07,780
does actually load modules but it only

00:07:06,100 --> 00:07:10,900
finds them it doesn't actually love them

00:07:07,780 --> 00:07:12,240
because we don't load plugins on or we

00:07:10,900 --> 00:07:14,680
don't load modules on the controller

00:07:12,240 --> 00:07:17,140
since the Institute for plugins can

00:07:14,680 --> 00:07:18,700
declare their own requirements so if

00:07:17,140 --> 00:07:20,080
you're a plug-in author you can actually

00:07:18,700 --> 00:07:22,660
declare your requirements and those can

00:07:20,080 --> 00:07:25,780
be exposed to be configurable to and an

00:07:22,660 --> 00:07:29,230
sis administrator and as of 2.5 on the

00:07:25,780 --> 00:07:33,250
control host you can actually explicitly

00:07:29,230 --> 00:07:34,810
enable or disable specific plugins on

00:07:33,250 --> 00:07:37,870
your control host as a system

00:07:34,810 --> 00:07:40,900
administrator if you would like to so

00:07:37,870 --> 00:07:42,790
modules shipped in ansible are in Lib

00:07:40,900 --> 00:07:45,190
ansible plugins by default that's going

00:07:42,790 --> 00:07:47,860
to be universal if you installed from an

00:07:45,190 --> 00:07:50,410
RPM or pip or you extract a tarball and

00:07:47,860 --> 00:07:53,920
you're running from source the main

00:07:50,410 --> 00:07:56,470
plug-in class lives in the init inside

00:07:53,920 --> 00:08:01,960
of that directory and then you can do

00:07:56,470 --> 00:08:05,170
custom defined plugins through the type

00:08:01,960 --> 00:08:07,390
of plug-in underscore plugins so we have

00:08:05,170 --> 00:08:11,260
these types of plugins and these this is

00:08:07,390 --> 00:08:13,840
just an LS - one of Live ansible plugins

00:08:11,260 --> 00:08:16,530
so action cache callbacks CLI comp

00:08:13,840 --> 00:08:19,870
connection filter HTTP API inventory

00:08:16,530 --> 00:08:22,090
lookup net comp shell strategy terminal

00:08:19,870 --> 00:08:23,740
test and VARs any of those and then

00:08:22,090 --> 00:08:25,570
underscore plugins you can have a

00:08:23,740 --> 00:08:28,090
directory name that and then ants will

00:08:25,570 --> 00:08:29,920
will search for plugins in that

00:08:28,090 --> 00:08:32,260
directory of that type or you can

00:08:29,920 --> 00:08:34,300
actually do custom definitions in your

00:08:32,260 --> 00:08:36,310
configuration file if you want something

00:08:34,300 --> 00:08:37,570
to note is some of these aren't actually

00:08:36,310 --> 00:08:39,520
going to be general use they're going to

00:08:37,570 --> 00:08:41,860
be specific for ansible networking so

00:08:39,520 --> 00:08:44,610
for those who are not familiar ants will

00:08:41,860 --> 00:08:47,530
have networking extensions to configure

00:08:44,610 --> 00:08:50,460
network gear physical network e'er

00:08:47,530 --> 00:08:50,460
juniper cisco

00:08:50,610 --> 00:08:54,330
Palo Alto I'm not a networking person

00:08:52,500 --> 00:08:56,190
I'm leaving out a whole bunch of them

00:08:54,330 --> 00:08:58,170
but so some of those aren't going to be

00:08:56,190 --> 00:09:01,800
directly useful for necessarily people

00:08:58,170 --> 00:09:03,600
in the Fedora ecosystem were probably

00:09:01,800 --> 00:09:05,580
generally going to be doing things with

00:09:03,600 --> 00:09:08,010
systems and doing assisted ministration

00:09:05,580 --> 00:09:09,480
and automation tasks things like that so

00:09:08,010 --> 00:09:11,820
just kind of take note some of these are

00:09:09,480 --> 00:09:13,110
gonna not directly be applicable and as

00:09:11,820 --> 00:09:16,880
such we're not going to go through them

00:09:13,110 --> 00:09:19,740
today also in the interest of time so

00:09:16,880 --> 00:09:21,900
special cases modules are loaded okay I

00:09:19,740 --> 00:09:24,600
mentioned this earlier I forgot which

00:09:21,900 --> 00:09:26,130
slide it was on modules are loaded

00:09:24,600 --> 00:09:29,100
through the plugin loader but we don't

00:09:26,130 --> 00:09:32,520
actually execute them or to the into the

00:09:29,100 --> 00:09:37,020
Python runtime at the time documentation

00:09:32,520 --> 00:09:40,440
fragments so there are special cases in

00:09:37,020 --> 00:09:42,810
which files are basically documentation

00:09:40,440 --> 00:09:50,160
fragments that can then get merged with

00:09:42,810 --> 00:09:52,020
other sets of documentation but so doc

00:09:50,160 --> 00:09:53,790
strings used in common code module

00:09:52,020 --> 00:09:55,650
common those kind of things those were

00:09:53,790 --> 00:09:58,890
there I forgot to mention the beginning

00:09:55,650 --> 00:10:01,320
the slide I just realized I didn't james

00:09:58,890 --> 00:10:03,960
Cammarata that I stole most of the slide

00:10:01,320 --> 00:10:06,540
deck from him I had a little attribution

00:10:03,960 --> 00:10:08,090
down here because he wrote it those who

00:10:06,540 --> 00:10:10,860
aren't familiar it goes by Jamie see on

00:10:08,090 --> 00:10:15,870
github where the Jamie see on Twitter he

00:10:10,860 --> 00:10:17,610
is in schools VfL since Mike left anyway

00:10:15,870 --> 00:10:19,230
so the first time plugin we talked about

00:10:17,610 --> 00:10:20,430
is an action plugin and the action

00:10:19,230 --> 00:10:24,180
plugin is very interesting from the

00:10:20,430 --> 00:10:28,290
aspect of if you are working with a

00:10:24,180 --> 00:10:29,340
module or you've written a module i just

00:10:28,290 --> 00:10:31,770
really quick note showing hands who's

00:10:29,340 --> 00:10:36,390
written a module

00:10:31,770 --> 00:10:38,430
okay four or five so an example of a

00:10:36,390 --> 00:10:44,330
maje will be the DNF module so we have a

00:10:38,430 --> 00:10:49,380
task DNF name a Bosch State installed an

00:10:44,330 --> 00:10:52,550
action plug-in is effectively a module

00:10:49,380 --> 00:10:54,720
that runs controller side you you can

00:10:52,550 --> 00:10:57,510
invoke an action plug-in just like you

00:10:54,720 --> 00:10:59,310
and invoke a module but it takes action

00:10:57,510 --> 00:11:02,360
on the local system and you can actually

00:10:59,310 --> 00:11:06,870
overload that and have both an action

00:11:02,360 --> 00:11:08,490
plug-in and a module name the same thing

00:11:06,870 --> 00:11:14,750
and you can have them interact together

00:11:08,490 --> 00:11:18,770
and an example of that would be the oh

00:11:14,750 --> 00:11:18,770
my gosh when we link on this

00:11:19,850 --> 00:11:26,509
the sink pretty sure it's the

00:11:23,120 --> 00:11:28,310
synchronized yeah so synchronized so for

00:11:26,509 --> 00:11:30,860
example it has to actually do some

00:11:28,310 --> 00:11:33,410
things on the localhost that you that

00:11:30,860 --> 00:11:34,970
you're doing controlling from so it

00:11:33,410 --> 00:11:36,920
needs to you know find some files

00:11:34,970 --> 00:11:39,380
probably find our sink do some things

00:11:36,920 --> 00:11:44,899
and then it needs to contact the remote

00:11:39,380 --> 00:11:47,899
system so you would do an action plug-in

00:11:44,899 --> 00:11:50,569
if for some reason you need to on your

00:11:47,899 --> 00:11:53,180
localhost perform tasks like terrible

00:11:50,569 --> 00:11:54,860
local directory of for setting and

00:11:53,180 --> 00:11:56,899
extending across the wire to the remote

00:11:54,860 --> 00:12:00,199
system and if you want to do all of that

00:11:56,899 --> 00:12:04,519
without having to require your user or

00:12:00,199 --> 00:12:06,410
your team to create a set of tasks to do

00:12:04,519 --> 00:12:07,730
those individual things one by one and

00:12:06,410 --> 00:12:09,410
do that you just kind of want to have it

00:12:07,730 --> 00:12:11,420
handled in the roundtrip single task

00:12:09,410 --> 00:12:13,279
definition in your playbook an actually

00:12:11,420 --> 00:12:15,649
plug-in is therefore there to enable

00:12:13,279 --> 00:12:19,569
that so if an actually plugin by the

00:12:15,649 --> 00:12:23,870
same name the action plugin is used and

00:12:19,569 --> 00:12:25,759
then otherwise you know the normal

00:12:23,870 --> 00:12:35,199
remote execution of the laws will happen

00:12:25,759 --> 00:12:35,199
so an example is this

00:12:37,050 --> 00:12:42,820
okay so basically is you everything

00:12:41,170 --> 00:12:45,430
starts with the base so there's a base

00:12:42,820 --> 00:12:48,720
class for each plug-in type so for

00:12:45,430 --> 00:12:50,740
action plug-in there's action base for

00:12:48,720 --> 00:12:53,470
you know she'll plug in there she'll

00:12:50,740 --> 00:12:55,029
base those kind of things and you so you

00:12:53,470 --> 00:12:57,279
subclass it and then everything is gonna

00:12:55,029 --> 00:12:59,910
have a definition of run that's going to

00:12:57,279 --> 00:13:02,529
become our invocation point and

00:12:59,910 --> 00:13:04,540
something to note is that's kind of

00:13:02,529 --> 00:13:07,600
special to the action module is you have

00:13:04,540 --> 00:13:11,350
an execute module so for some reason you

00:13:07,600 --> 00:13:13,720
are actually defining an ansible action

00:13:11,350 --> 00:13:15,370
module perhaps aren't actually that

00:13:13,720 --> 00:13:17,829
action plug-in and you need to invoke

00:13:15,370 --> 00:13:20,250
the module the same name and I think a

00:13:17,829 --> 00:13:23,640
really good example this is the package

00:13:20,250 --> 00:13:23,640
really quickly

00:13:25,070 --> 00:13:28,060
we're gonna do this

00:13:53,490 --> 00:13:59,399
well nevermind I just lost Internet and

00:13:57,370 --> 00:14:02,699
I can't connect my demo box anymore

00:13:59,399 --> 00:14:02,699
that's cool

00:14:02,820 --> 00:14:11,490
okay well anyways we'll just walk

00:14:04,440 --> 00:14:15,300
through this instead so task bars is

00:14:11,490 --> 00:14:18,090
going to be the dictionary that we get

00:14:15,300 --> 00:14:19,740
by by doing the the super module or I'm

00:14:18,090 --> 00:14:21,180
sorry the super invocation of our parent

00:14:19,740 --> 00:14:22,830
class and that's how we're going to get

00:14:21,180 --> 00:14:27,270
actually the variables that are passed

00:14:22,830 --> 00:14:30,270
so again if we were using the example of

00:14:27,270 --> 00:14:33,060
DNF as our tasks of task name equals

00:14:30,270 --> 00:14:34,530
bash State Eagles install those we sent

00:14:33,060 --> 00:14:36,090
into that dictionary you would get those

00:14:34,530 --> 00:14:41,040
as the arguments that get sent in and

00:14:36,090 --> 00:14:42,600
you can actually use those for making

00:14:41,040 --> 00:14:45,150
decisions in your action plug-in

00:14:42,600 --> 00:14:47,220
programmatically through Python and then

00:14:45,150 --> 00:14:52,230
if something that you need to do

00:14:47,220 --> 00:14:55,770
actually will execute a module you can

00:14:52,230 --> 00:14:58,560
then pass those into that module because

00:14:55,770 --> 00:15:00,330
executing the module needs those

00:14:58,560 --> 00:15:02,400
arguments passed into it so this would

00:15:00,330 --> 00:15:04,680
be exempt for example the implementation

00:15:02,400 --> 00:15:05,670
of the task and how that gets executed

00:15:04,680 --> 00:15:12,720
through the answer

00:15:05,670 --> 00:15:14,400
turtles and then you you would need to

00:15:12,720 --> 00:15:16,290
actually report those results in the

00:15:14,400 --> 00:15:19,170
same way that you report your module

00:15:16,290 --> 00:15:20,430
results which is the return results and

00:15:19,170 --> 00:15:22,740
that's going to be the JSON structure

00:15:20,430 --> 00:15:26,450
that answe forward expects or because a

00:15:22,740 --> 00:15:29,460
module itself executes and returns JSON

00:15:26,450 --> 00:15:32,990
so for an action plug-in because an

00:15:29,460 --> 00:15:32,990
action plug-in is effectively

00:15:33,180 --> 00:15:37,080
implemented in a way that's meant to be

00:15:34,950 --> 00:15:41,310
used as a module locally on the on the

00:15:37,080 --> 00:15:44,310
control host we have to handle that yes

00:15:41,310 --> 00:15:48,090
very quickly why are you removing the

00:15:44,310 --> 00:15:51,330
inks will notify from the results that

00:15:48,090 --> 00:15:54,420
it is a historic thing and we have

00:15:51,330 --> 00:15:56,220
documentation in the jebel Docs that

00:15:54,420 --> 00:15:59,190
just says you need to do this and I

00:15:56,220 --> 00:16:01,650
don't remember why I think the reason to

00:15:59,190 --> 00:16:04,680
do that predates me as as something who

00:16:01,650 --> 00:16:08,250
looks around them but I'm not actually

00:16:04,680 --> 00:16:09,200
sure there's there's a reasonable

00:16:08,250 --> 00:16:15,810
somewhere

00:16:09,200 --> 00:16:18,060
do you remember yeah yeah in in the in

00:16:15,810 --> 00:16:19,710
the development says you need to do this

00:16:18,060 --> 00:16:22,170
because I think it was part of the

00:16:19,710 --> 00:16:23,580
Hanceville 1.92 tadano transition like

00:16:22,170 --> 00:16:25,140
somewhere in there is like we don't need

00:16:23,580 --> 00:16:28,740
this anymore so always delete it so

00:16:25,140 --> 00:16:30,690
we're not because every time just the

00:16:28,740 --> 00:16:32,130
question sorry to repeat for the sake of

00:16:30,690 --> 00:16:33,300
the reporter the question was why do we

00:16:32,130 --> 00:16:36,210
have the delete results invocation

00:16:33,300 --> 00:16:37,320
module art and the reason is I don't I

00:16:36,210 --> 00:16:38,910
don't remember but I know that we need

00:16:37,320 --> 00:16:40,620
to do this I believe it was part of the

00:16:38,910 --> 00:16:42,990
ants but one not minded to transition

00:16:40,620 --> 00:16:45,150
because every time and the results gets

00:16:42,990 --> 00:16:46,560
copied around there are various points

00:16:45,150 --> 00:16:49,500
in these long run time that do a deep

00:16:46,560 --> 00:16:51,090
copy so that entire dictionary structure

00:16:49,500 --> 00:16:52,830
would be continuously copied over and

00:16:51,090 --> 00:16:54,270
over again and it won't add up to a

00:16:52,830 --> 00:16:55,920
whole lot of data unless you get into

00:16:54,270 --> 00:16:57,000
the world of like a large inventory or

00:16:55,920 --> 00:17:00,000
something where you're doing a lot of

00:16:57,000 --> 00:17:01,980
dynamic reevaluation to variables

00:17:00,000 --> 00:17:04,710
because then we just keep deep pot deep

00:17:01,980 --> 00:17:06,960
copying ever currently and then you're

00:17:04,710 --> 00:17:08,190
in the memory problems so if I believe

00:17:06,960 --> 00:17:12,000
it's just kind of those like

00:17:08,190 --> 00:17:13,290
get it out here don't need it okay so

00:17:12,000 --> 00:17:15,270
call back plugins I think call back

00:17:13,290 --> 00:17:19,230
plugins are probably the most common for

00:17:15,270 --> 00:17:20,910
system administrators and they're used

00:17:19,230 --> 00:17:22,790
to act on events which occurred during

00:17:20,910 --> 00:17:27,270
the execution of play books so you can

00:17:22,790 --> 00:17:31,560
for example at the start of a play book

00:17:27,270 --> 00:17:33,330
run or at the success of a task or any

00:17:31,560 --> 00:17:35,130
time there's output you can take action

00:17:33,330 --> 00:17:37,560
so this is this allows us to do like

00:17:35,130 --> 00:17:40,410
custom logging events this allows us to

00:17:37,560 --> 00:17:41,880
do chat ops because when something

00:17:40,410 --> 00:17:44,730
starts you can kind of kick off some

00:17:41,880 --> 00:17:48,480
message to your IRC BOTS of your slack

00:17:44,730 --> 00:17:51,150
bot or whatever you're using so you have

00:17:48,480 --> 00:17:53,010
multiple callbacks and and they're all

00:17:51,150 --> 00:17:59,690
configured in the ansible config file

00:17:53,010 --> 00:17:59,690
you can set multiple of them to run and

00:18:01,490 --> 00:18:06,110
oh yeah the the comics that do output to

00:18:04,549 --> 00:18:07,370
this to the screen to your local

00:18:06,110 --> 00:18:09,559
terminal

00:18:07,370 --> 00:18:14,090
you can't overload those because that

00:18:09,559 --> 00:18:15,409
gets weird the one not 9x note I didn't

00:18:14,090 --> 00:18:16,370
I thought about deleting this but I

00:18:15,409 --> 00:18:19,039
thought just on the off chance

00:18:16,370 --> 00:18:24,110
somebody's hopefully not but maybe still

00:18:19,039 --> 00:18:27,529
doing a 1 1 9 2 2 Oh transition there

00:18:24,110 --> 00:18:29,450
was a configuration component added so

00:18:27,529 --> 00:18:31,309
to know though we decided to just add

00:18:29,450 --> 00:18:33,440
the different events I did leave this in

00:18:31,309 --> 00:18:35,750
there because if you're copying around

00:18:33,440 --> 00:18:37,880
all back plugins that have been around

00:18:35,750 --> 00:18:39,409
in the ether for a long time you're

00:18:37,880 --> 00:18:41,240
potentially going to see on PlayBook

00:18:39,409 --> 00:18:43,340
star versus that b2 on playbook start

00:18:41,240 --> 00:18:45,860
that's all compatibility stuff for the

00:18:43,340 --> 00:18:47,510
most part anything you're writing today

00:18:45,860 --> 00:18:49,700
when you write a call that plugin should

00:18:47,510 --> 00:18:52,070
be doing the v2 underscore but the the

00:18:49,700 --> 00:18:53,630
old the old implementation still works

00:18:52,070 --> 00:18:55,429
so if you do fine we'll call that plugin

00:18:53,630 --> 00:19:01,000
we maintain compatibility moving forward

00:18:55,429 --> 00:19:01,000
for those so

00:19:04,120 --> 00:19:06,750
I cut

00:19:08,080 --> 00:19:13,900
okay anyways so you have your callback

00:19:12,160 --> 00:19:16,060
module which is again I'm going to do

00:19:13,900 --> 00:19:18,820
the callback base and then your callback

00:19:16,060 --> 00:19:21,420
version should be 200 and your callback

00:19:18,820 --> 00:19:23,770
type there's different kind of types

00:19:21,420 --> 00:19:25,270
callback name so the callback name is

00:19:23,770 --> 00:19:28,680
going to be how you identify in the

00:19:25,270 --> 00:19:31,660
configuration file and then your plugin

00:19:28,680 --> 00:19:32,860
needs a whitelist so this is going to be

00:19:31,660 --> 00:19:35,620
about whether or not it's enabled by

00:19:32,860 --> 00:19:38,460
default if you have to add it explicitly

00:19:35,620 --> 00:19:41,640
to the configuration and

00:19:38,460 --> 00:19:41,640
[Music]

00:19:42,460 --> 00:19:46,049
this is working top right

00:21:11,820 --> 00:21:17,960
every that is a reasonable all right so

00:21:19,790 --> 00:21:28,850
all right so our comic module here has

00:21:26,210 --> 00:21:31,370
the definition of version the main looks

00:21:28,850 --> 00:21:32,840
like thinks this is a profile task so

00:21:31,370 --> 00:21:35,630
it's going to kind of go through and do

00:21:32,840 --> 00:21:38,270
some some statistics but we have a

00:21:35,630 --> 00:21:43,840
handful of definitions here so playbook

00:21:38,270 --> 00:21:46,910
on on where am I on test start on

00:21:43,840 --> 00:21:48,590
handler task start so again here so you

00:21:46,910 --> 00:21:49,700
have your tasks in a playbook then you

00:21:48,590 --> 00:21:51,350
have your handlers and if we're trying

00:21:49,700 --> 00:21:53,170
to profile all of those things we want

00:21:51,350 --> 00:21:56,720
to make sure to take action based on

00:21:53,170 --> 00:21:59,900
based on that so inside of here we have

00:21:56,720 --> 00:22:02,960
a couple of internal methods that will

00:21:59,900 --> 00:22:06,680
record the tasks so that we can display

00:22:02,960 --> 00:22:09,620
the the different metrics and then we're

00:22:06,680 --> 00:22:13,060
going to display information on setup

00:22:09,620 --> 00:22:15,500
and then on stats so you have different

00:22:13,060 --> 00:22:18,170
action points or different

00:22:15,500 --> 00:22:20,510
basically schedulable moments throughout

00:22:18,170 --> 00:22:24,490
a playbook execution where you can

00:22:20,510 --> 00:22:24,490
actually run some action and

00:22:29,450 --> 00:22:34,930
so for the full like run-through you

00:22:32,660 --> 00:22:34,930
have

00:22:38,299 --> 00:22:47,599
so here's the v2 so you have runner on a

00:22:44,599 --> 00:22:54,830
sink pole you have on a sink okay acing

00:22:47,599 --> 00:22:58,700
failed playbook start start notify host

00:22:54,830 --> 00:23:02,359
match host remaining tasks start cleanup

00:22:58,700 --> 00:23:04,999
handler VARs prompt so there's a lot of

00:23:02,359 --> 00:23:06,169
defined points throughout the execution

00:23:04,999 --> 00:23:08,089
where you can actually have an

00:23:06,169 --> 00:23:10,429
inflection point to take action based on

00:23:08,089 --> 00:23:14,089
something that's occurring and you have

00:23:10,429 --> 00:23:16,429
a considerable amount of access to to

00:23:14,089 --> 00:23:18,379
the information about the context in

00:23:16,429 --> 00:23:21,289
which the execution is going so the goal

00:23:18,379 --> 00:23:23,869
here is to allow you to get

00:23:21,289 --> 00:23:27,639
introspection into your your execution

00:23:23,869 --> 00:23:27,639
of a playbook from through the callbacks

00:23:33,580 --> 00:23:38,059
huh

00:23:35,390 --> 00:23:39,530
yeah this this got chopped off they're

00:23:38,059 --> 00:23:43,910
supposed to another slide with like some

00:23:39,530 --> 00:23:46,010
of the different examples of function

00:23:43,910 --> 00:23:47,420
calls okay so a connection plugins so

00:23:46,010 --> 00:23:49,250
connection plugins are used to provide

00:23:47,420 --> 00:23:51,950
the transport layer between ansible

00:23:49,250 --> 00:23:53,360
and whatever you're connecting to so

00:23:51,950 --> 00:23:55,220
they're relatively simple we have a

00:23:53,360 --> 00:23:57,350
connect execute command put file get

00:23:55,220 --> 00:23:58,640
filed disconnect and the goal there is

00:23:57,350 --> 00:24:00,650
to make it easier to write easy to

00:23:58,640 --> 00:24:02,420
implement easy extend ansible to do

00:24:00,650 --> 00:24:06,460
things other than just an ssh connection

00:24:02,420 --> 00:24:09,290
the most often use connection types for

00:24:06,460 --> 00:24:12,220
Edmonds are going to be local and SSH

00:24:09,290 --> 00:24:14,690
but there's there's quite a few of them

00:24:12,220 --> 00:24:17,150
so we actually have a we have a troop

00:24:14,690 --> 00:24:19,190
transport so you can actually also

00:24:17,150 --> 00:24:20,600
define pipelining so for those who are

00:24:19,190 --> 00:24:22,010
not familiar the pipelining

00:24:20,600 --> 00:24:24,440
functionality allows you to pipeline

00:24:22,010 --> 00:24:25,790
some of the commands together and for

00:24:24,440 --> 00:24:30,160
SSH that means you're able to use

00:24:25,790 --> 00:24:32,900
multiplexing and those kind of things so

00:24:30,160 --> 00:24:35,140
this again I'm just cooling drops off

00:24:32,900 --> 00:24:35,140
there

00:24:46,590 --> 00:24:53,210
what fun one

00:24:49,130 --> 00:24:55,250
yeah oops the cuoco why not so we

00:24:53,210 --> 00:24:57,770
actually a Cooper days we have a coop

00:24:55,250 --> 00:24:59,000
cuddle connection plugin for anybody

00:24:57,770 --> 00:25:02,600
talking to kubernetes you can actually

00:24:59,000 --> 00:25:05,240
talk directly to kubernetes over this

00:25:02,600 --> 00:25:08,299
connection plug-in so it's got its init

00:25:05,240 --> 00:25:11,660
function then we go through and then we

00:25:08,299 --> 00:25:14,270
define exact command so that's how to it

00:25:11,660 --> 00:25:21,590
does that execute the command over the

00:25:14,270 --> 00:25:24,350
the connection and we have our put file

00:25:21,590 --> 00:25:27,020
we have our fetch file and are closed so

00:25:24,350 --> 00:25:28,820
the idea is everything else all handler

00:25:27,020 --> 00:25:31,669
code in there is simply at service of

00:25:28,820 --> 00:25:33,350
defining these required methods and then

00:25:31,669 --> 00:25:35,360
at the point in time that the execution

00:25:33,350 --> 00:25:37,429
runs it simply calls the appropriate

00:25:35,360 --> 00:25:39,770
plug-in and so you can kind of dream up

00:25:37,429 --> 00:25:42,559
just based on everything that we have

00:25:39,770 --> 00:25:44,570
right now you can kind of dream up

00:25:42,559 --> 00:25:47,450
whatever you want whatever might be

00:25:44,570 --> 00:25:52,580
necessary are useful so we've got build

00:25:47,450 --> 00:25:54,679
a true docker foam PHP API those kinds

00:25:52,580 --> 00:25:56,809
of things so Network CLI so again like

00:25:54,679 --> 00:25:59,240
that's gonna be in service of you know

00:25:56,809 --> 00:26:00,440
network routers and things which is so

00:25:59,240 --> 00:26:02,150
that might not necessarily be very

00:26:00,440 --> 00:26:04,370
useful to you but we have a considerable

00:26:02,150 --> 00:26:06,409
number of different connection plugins

00:26:04,370 --> 00:26:07,700
and if you have some type of system

00:26:06,409 --> 00:26:09,620
you're trying to connect directly to

00:26:07,700 --> 00:26:11,120
without trying to do like an ssh jump

00:26:09,620 --> 00:26:12,559
through and run weird commands or

00:26:11,120 --> 00:26:14,030
something you can actually do those

00:26:12,559 --> 00:26:16,370
those kinds of things really the

00:26:14,030 --> 00:26:18,380
connection plugins

00:26:16,370 --> 00:26:19,820
so strategy for gun plugins these are

00:26:18,380 --> 00:26:22,220
probably the hardest or right they're

00:26:19,820 --> 00:26:24,740
the most laborious to do but by default

00:26:22,220 --> 00:26:26,539
when you run ansible the way that it

00:26:24,740 --> 00:26:28,490
actually executes is in order

00:26:26,539 --> 00:26:31,610
tasks execution and what we mean by in

00:26:28,490 --> 00:26:32,960
order is every hosts in that matches the

00:26:31,610 --> 00:26:36,500
host group that you're running against

00:26:32,960 --> 00:26:37,850
for your play each task will wait to

00:26:36,500 --> 00:26:41,150
remove to the next task

00:26:37,850 --> 00:26:44,409
for every host in the inventory matched

00:26:41,150 --> 00:26:47,900
group to finish so if you have that DNF

00:26:44,409 --> 00:26:50,120
you know name state state installed and

00:26:47,900 --> 00:26:51,770
you have a hundred hosts that task will

00:26:50,120 --> 00:26:53,210
not move on to the next tasks in the

00:26:51,770 --> 00:26:55,190
play until all hundred hosts have

00:26:53,210 --> 00:26:58,580
checked back in that's going to be

00:26:55,190 --> 00:27:01,809
linear then there's free free is free

00:26:58,580 --> 00:27:04,340
basically says every task in the play

00:27:01,809 --> 00:27:06,169
every host just go out and do it as fast

00:27:04,340 --> 00:27:07,760
as you can and then at the end of the

00:27:06,169 --> 00:27:09,260
play book or at the at the end of the

00:27:07,760 --> 00:27:10,970
play will wait for you all to check in

00:27:09,260 --> 00:27:13,429
we're not worried about each task

00:27:10,970 --> 00:27:15,169
individually and then there's a debug

00:27:13,429 --> 00:27:16,730
which just subclasses linear and gives

00:27:15,169 --> 00:27:18,169
you all current all kinds of debuff

00:27:16,730 --> 00:27:20,600
functionality if it hits a problem it'll

00:27:18,169 --> 00:27:22,700
actually drop to a debug console you can

00:27:20,600 --> 00:27:25,370
kind of do whatever you want you can you

00:27:22,700 --> 00:27:27,320
can get really really creative but do

00:27:25,370 --> 00:27:31,820
note that from a development standpoint

00:27:27,320 --> 00:27:33,830
it's gonna it's going to get pretty it's

00:27:31,820 --> 00:27:37,760
gonna pretty off the weeds and you kind

00:27:33,830 --> 00:27:40,130
of are left with a little bit of if you

00:27:37,760 --> 00:27:44,059
break it you buy it from from an

00:27:40,130 --> 00:27:46,580
execution standpoint the I I would be

00:27:44,059 --> 00:27:50,690
amazed that many people need to extend

00:27:46,580 --> 00:27:51,529
or do something different here but the

00:27:50,690 --> 00:27:54,080
option is there

00:27:51,529 --> 00:27:55,909
and so this was new in 2.0 and and if

00:27:54,080 --> 00:27:58,669
you really want to get creative and if

00:27:55,909 --> 00:28:00,980
you just have a wild idea for the actual

00:27:58,669 --> 00:28:03,860
execution strategy of how your playbooks

00:28:00,980 --> 00:28:06,429
run you have that that flexibility if

00:28:03,860 --> 00:28:06,429
you want it

00:28:07,989 --> 00:28:12,619
there we go so look at plugins I think

00:28:10,849 --> 00:28:16,129
look at plugins are also very common

00:28:12,619 --> 00:28:18,519
aside from callback plugins so for

00:28:16,129 --> 00:28:18,519
example

00:28:18,589 --> 00:28:22,580
oh just really quick we'll just go so

00:28:20,690 --> 00:28:24,440
look up plugins are used in two ways

00:28:22,580 --> 00:28:26,210
traditionally so the template for

00:28:24,440 --> 00:28:29,899
templating variables and then also for

00:28:26,210 --> 00:28:31,489
loops on tasks Jimmy's not a fan of the

00:28:29,899 --> 00:28:34,580
loops on tasks but if you use the with

00:28:31,489 --> 00:28:36,769
items it actually loads the the item top

00:28:34,580 --> 00:28:38,059
hi uses the lookup plug-in to find

00:28:36,769 --> 00:28:40,070
variables and that kind of thing

00:28:38,059 --> 00:28:42,049
but this is gonna be a very common

00:28:40,070 --> 00:28:44,179
pattern who is familiar that you could

00:28:42,049 --> 00:28:46,099
actually template variables inline in

00:28:44,179 --> 00:28:49,609
your in your play in your playbooks

00:28:46,099 --> 00:28:50,929
to do lookups of various things okay

00:28:49,609 --> 00:28:57,519
about half alright cool

00:28:50,929 --> 00:28:57,519
so just since word why not

00:29:01,500 --> 00:29:09,720
we'll just kind of for kicks pulling

00:29:04,049 --> 00:29:10,289
inaudible if DNS maybe maybe nope just

00:29:09,720 --> 00:29:11,610
kidding

00:29:10,289 --> 00:29:13,590
I was going to show you some Docs and

00:29:11,610 --> 00:29:19,710
some examples but I'm a lie to you

00:29:13,590 --> 00:29:21,179
instead okay so the main thing with

00:29:19,710 --> 00:29:23,399
lookup plugins is it's always going to

00:29:21,179 --> 00:29:27,299
run on the controller this does not ever

00:29:23,399 --> 00:29:30,029
run remotely and that's important from

00:29:27,299 --> 00:29:32,480
the perspective of if you think for some

00:29:30,029 --> 00:29:34,529
reason you're looking up information

00:29:32,480 --> 00:29:37,470
contextually about the host you're

00:29:34,529 --> 00:29:40,230
remotely executing a task on don't think

00:29:37,470 --> 00:29:41,340
that because you will not get expected

00:29:40,230 --> 00:29:44,120
results

00:29:41,340 --> 00:29:44,120
I think I've got

00:29:44,200 --> 00:29:47,279
[Music]

00:30:08,840 --> 00:30:11,840
yeah

00:30:16,270 --> 00:30:19,740
magic okay wonderful

00:30:26,090 --> 00:30:32,780
can I read that yeah all right so we

00:30:30,170 --> 00:30:34,340
have plugin lookup plug-ins for all

00:30:32,780 --> 00:30:36,770
sorts of things so you can get a DFS

00:30:34,340 --> 00:30:40,360
account attributes which is you can do

00:30:36,770 --> 00:30:42,560
Cartesian products of lists chef things

00:30:40,360 --> 00:30:44,120
so you can really read environment

00:30:42,560 --> 00:30:46,370
variables you can get the file of the

00:30:44,120 --> 00:30:48,830
contents of files so for some reason you

00:30:46,370 --> 00:30:51,200
want to read a file contents into a

00:30:48,830 --> 00:30:53,060
variable at runtime without having to

00:30:51,200 --> 00:30:54,530
store that information in playbooks I'll

00:30:53,060 --> 00:30:56,660
look at the lookup plug-in for that is

00:30:54,530 --> 00:30:58,160
very useful another one that I think is

00:30:56,660 --> 00:31:00,980
is very useful that people aren't very

00:30:58,160 --> 00:31:07,520
familiar with is pipe reading the output

00:31:00,980 --> 00:31:09,800
from a command so the example of that is

00:31:07,520 --> 00:31:11,950
you can literally just say look up pipe

00:31:09,800 --> 00:31:16,880
and then run the command like date or

00:31:11,950 --> 00:31:18,410
add things there so that's basically the

00:31:16,880 --> 00:31:20,720
ability to just run some arbitrary

00:31:18,410 --> 00:31:23,720
command it's store its output as as your

00:31:20,720 --> 00:31:28,220
as a variable at runtime inline-four

00:31:23,720 --> 00:31:30,050
it's a templated variable so not

00:31:28,220 --> 00:31:32,390
directly plug in writing and related but

00:31:30,050 --> 00:31:34,640
just there wasn't nearly as many people

00:31:32,390 --> 00:31:39,440
who knew about lookup plugins I thought

00:31:34,640 --> 00:31:42,320
so I won't at least mention those ok so

00:31:39,440 --> 00:31:47,270
look I plug an example so again we have

00:31:42,320 --> 00:31:48,410
our run I think this is actually yeah

00:31:47,270 --> 00:31:50,270
this is the pipe so this is a pipe

00:31:48,410 --> 00:31:51,410
lookup plug in so basically it just it

00:31:50,270 --> 00:31:53,450
just runs a subprocess

00:31:51,410 --> 00:31:55,490
it goes ahead and runs the command that

00:31:53,450 --> 00:31:57,560
you asked for it gets the information

00:31:55,490 --> 00:31:59,120
and then it returns it returns that and

00:31:57,560 --> 00:32:01,100
then when the plugin loader runs it at

00:31:59,120 --> 00:32:03,050
the templated variable I just inputs it

00:32:01,100 --> 00:32:06,710
in line where that where that template a

00:32:03,050 --> 00:32:09,890
variable value would be so again so we

00:32:06,710 --> 00:32:11,750
have a lookup module it's subclasses

00:32:09,890 --> 00:32:15,200
lookup base and then we have to provide

00:32:11,750 --> 00:32:17,210
a run method and the code for this is

00:32:15,200 --> 00:32:19,970
relatively you know simple so you pass

00:32:17,210 --> 00:32:21,200
in some terms for term in terms you want

00:32:19,970 --> 00:32:24,020
to make sure it's you know stream

00:32:21,200 --> 00:32:26,510
validated run it as a sub process do a

00:32:24,020 --> 00:32:28,880
communication to the sub process make

00:32:26,510 --> 00:32:34,970
sure that a return code is 0 so that

00:32:28,880 --> 00:32:36,230
we're not yeah it's fine make sure

00:32:34,970 --> 00:32:38,810
return code is 0 so we're not returning

00:32:36,230 --> 00:32:39,500
failed things or else you know go ahead

00:32:38,810 --> 00:32:41,440
and

00:32:39,500 --> 00:32:43,220
offer a meaningful error message

00:32:41,440 --> 00:32:45,650
otherwise we would get the error

00:32:43,220 --> 00:32:49,150
messages the templated variable value

00:32:45,650 --> 00:32:49,150
and that's probably not what users want

00:32:50,720 --> 00:32:55,250
so filter and test plugins so filter and

00:32:52,880 --> 00:32:59,659
tests extend the Jinja to templating

00:32:55,250 --> 00:33:01,520
system for ansible so filters are used

00:32:59,659 --> 00:33:04,429
to transform data so everybody familiar

00:33:01,520 --> 00:33:07,309
with the pipe syntax of doing filters

00:33:04,429 --> 00:33:14,929
and Jinja and then tests are used to

00:33:07,309 --> 00:33:20,890
validate data the filter and tests so an

00:33:14,929 --> 00:33:24,760
example so again oh that filter modules

00:33:20,890 --> 00:33:24,760
examples outdated

00:33:41,610 --> 00:33:45,390
yeah I'm pretty sure that's wrong

00:33:49,540 --> 00:33:53,660
No okay it should not come back if it

00:33:52,010 --> 00:33:57,170
comes back we'll get to that man

00:33:53,660 --> 00:33:59,330
so cash plugins so for fact cashing cash

00:33:57,170 --> 00:34:01,310
plugins are used to store gathered fact

00:33:59,330 --> 00:34:04,580
data outside of local memory and this

00:34:01,310 --> 00:34:06,380
can be useful for systems that are gonna

00:34:04,580 --> 00:34:07,580
change very frequently if you don't want

00:34:06,380 --> 00:34:09,710
to actually have to regather that fact

00:34:07,580 --> 00:34:11,330
information you don't actually have to

00:34:09,710 --> 00:34:13,580
do anything beyond configuring a fact

00:34:11,330 --> 00:34:14,990
cache plugin you don't have to go

00:34:13,580 --> 00:34:17,000
through and modify your playbooks or

00:34:14,990 --> 00:34:20,480
anything ansible itself flex should go

00:34:17,000 --> 00:34:23,630
and handle this but if there is a a fact

00:34:20,480 --> 00:34:25,820
caching or if there's a data system that

00:34:23,630 --> 00:34:27,860
you want to store your fact cash in that

00:34:25,820 --> 00:34:30,770
ansible doesn't currently provide a

00:34:27,860 --> 00:34:34,130
plugin to offer that functionality you

00:34:30,770 --> 00:34:37,730
can extend ansible through a fad a cache

00:34:34,130 --> 00:34:39,980
plug-in to store the information in that

00:34:37,730 --> 00:34:42,290
in that back-end data store whatever

00:34:39,980 --> 00:34:44,450
that may be trying to get one that we

00:34:42,290 --> 00:34:53,510
don't have Cassandra

00:34:44,450 --> 00:34:56,659
react so again base cache so base cache

00:34:53,510 --> 00:34:58,910
module for cache module you need to have

00:34:56,659 --> 00:35:00,980
your get set keys contains and delete

00:34:58,910 --> 00:35:02,720
and that's basically as long as you

00:35:00,980 --> 00:35:04,070
could provide provide that basic

00:35:02,720 --> 00:35:06,320
functionality the rest of it we can

00:35:04,070 --> 00:35:07,460
handle because we can do comparison to

00:35:06,320 --> 00:35:10,730
make sure that the back-end data store

00:35:07,460 --> 00:35:18,760
has values and then we can get set and

00:35:10,730 --> 00:35:23,380
delete based on those shell plugins

00:35:18,760 --> 00:35:23,380
these are sorry

00:35:23,500 --> 00:35:27,700
it's very warm in here shell plugins are

00:35:26,140 --> 00:35:30,880
used to properly format commands for

00:35:27,700 --> 00:35:32,619
remote execution so an example of that's

00:35:30,880 --> 00:35:35,010
gonna be like POSIX SH or fish shell

00:35:32,619 --> 00:35:38,080
anybody fish shell show hands

00:35:35,010 --> 00:35:39,820
alright 303 okay

00:35:38,080 --> 00:35:42,940
so yeah so for those who didn't know

00:35:39,820 --> 00:35:44,680
ansible support fish shell so was

00:35:42,940 --> 00:35:48,250
originally written to make handling SH

00:35:44,680 --> 00:35:49,990
versus win RM less painful but it's been

00:35:48,250 --> 00:35:51,790
extended for all sorts of interesting

00:35:49,990 --> 00:35:54,640
things I think we directly support

00:35:51,790 --> 00:36:03,340
Debian's a sh which I think's what

00:35:54,640 --> 00:36:05,800
alchemists shell a sh fish a handful of

00:36:03,340 --> 00:36:07,720
others think c sh yeah so we have

00:36:05,800 --> 00:36:13,390
various different implementations to

00:36:07,720 --> 00:36:16,300
offer that so this is a little bit more

00:36:13,390 --> 00:36:19,660
laborious in terms of doing common

00:36:16,300 --> 00:36:22,240
common shells the shell family embedded

00:36:19,660 --> 00:36:25,869
end of life the null you kind of have to

00:36:22,240 --> 00:36:27,400
define the group of what what's

00:36:25,869 --> 00:36:30,010
different or what you is unique about

00:36:27,400 --> 00:36:31,599
that shell environment and then these

00:36:30,010 --> 00:36:33,040
different variables get used throughout

00:36:31,599 --> 00:36:35,080
the construction of commands and those

00:36:33,040 --> 00:36:38,080
kinds of things inside of ansible itself

00:36:35,080 --> 00:36:40,450
that when when a command has to be run

00:36:38,080 --> 00:36:42,490
that we can't just implement directly or

00:36:40,450 --> 00:36:46,420
makes less sense to implement directly

00:36:42,490 --> 00:36:51,609
in python these are used and then you

00:36:46,420 --> 00:36:53,920
just define the m prefix name name may

00:36:51,609 --> 00:36:57,790
have any wild suggestions first shell

00:36:53,920 --> 00:36:59,500
that we might not have I don't know how

00:36:57,790 --> 00:37:00,760
common this is necessarily in real world

00:36:59,500 --> 00:37:02,830
use from a system in a straighter

00:37:00,760 --> 00:37:05,980
standpoint but just know that we have

00:37:02,830 --> 00:37:07,930
that there so how to write plugins so

00:37:05,980 --> 00:37:11,700
anytime ansible or i'm sorry

00:37:07,930 --> 00:37:13,720
first off should i write a plug-in so

00:37:11,700 --> 00:37:15,040
advanced Ville doesn't do what you need

00:37:13,720 --> 00:37:17,890
it to and you need to connect to a

00:37:15,040 --> 00:37:20,170
system fetch data external to ansible

00:37:17,890 --> 00:37:22,630
store retrieve facts from a centralized

00:37:20,170 --> 00:37:24,099
system which would bear fat caching do

00:37:22,630 --> 00:37:27,400
custom actions which is going to be a

00:37:24,099 --> 00:37:28,930
callback plug-in or make ansible execute

00:37:27,400 --> 00:37:31,470
tasks in a pattern that we have not

00:37:28,930 --> 00:37:34,330
thought of which can be strategy plug-in

00:37:31,470 --> 00:37:36,550
if if you find yourself in any

00:37:34,330 --> 00:37:37,090
situations that's when you are a prime

00:37:36,550 --> 00:37:39,400
candidate

00:37:37,090 --> 00:37:43,300
for writing ansible plugins otherwise

00:37:39,400 --> 00:37:47,290
there's probably a module or a plugin or

00:37:43,300 --> 00:37:49,240
something built in or available on

00:37:47,290 --> 00:37:51,760
galaxy and you initially have to always

00:37:49,240 --> 00:37:53,620
search galaxy first but anyway so the

00:37:51,760 --> 00:37:55,240
power of ansible is is its simplicity

00:37:53,620 --> 00:37:57,850
and extensibility so we have the

00:37:55,240 --> 00:38:00,790
opportunity to do these things so always

00:37:57,850 --> 00:38:03,430
use the provided base classes number one

00:38:00,790 --> 00:38:07,840
there's a lot of kind of standard

00:38:03,430 --> 00:38:08,830
generic structural methods defined in

00:38:07,840 --> 00:38:10,210
there that are meant to help you

00:38:08,830 --> 00:38:12,730
implement these things so you're not

00:38:10,210 --> 00:38:15,910
having to reinvent those wheels beyond

00:38:12,730 --> 00:38:19,890
that it won't get loaded

00:38:15,910 --> 00:38:19,890
if you don't load off the base class

00:38:23,190 --> 00:38:30,640
testing debugging plugins so unit tests

00:38:26,260 --> 00:38:33,490
since it's relatively easy to load the

00:38:30,640 --> 00:38:35,650
the classes please provide unit tests if

00:38:33,490 --> 00:38:37,660
you're going to contribute your test up

00:38:35,650 --> 00:38:41,710
to ansible unit tests are great

00:38:37,660 --> 00:38:44,890
integration tests are also appreciated

00:38:41,710 --> 00:38:47,830
from a standpoint of our testing we try

00:38:44,890 --> 00:38:50,620
to favor integration tests mostly

00:38:47,830 --> 00:38:53,080
because as long as the functionality of

00:38:50,620 --> 00:38:55,960
the end result of an Sable's execution

00:38:53,080 --> 00:38:57,700
of a playbook mirrors what a user would

00:38:55,960 --> 00:38:58,990
expect it doesn't really matter what you

00:38:57,700 --> 00:39:01,120
did the internal structure of the

00:38:58,990 --> 00:39:03,250
internal code but unit tests are great

00:39:01,120 --> 00:39:04,870
please if you know if you're doing

00:39:03,250 --> 00:39:09,880
really wild things like a strategy

00:39:04,870 --> 00:39:13,860
plug-in you protest or - so so we've uh

00:39:09,880 --> 00:39:13,860
this is an example of a lookup module

00:39:17,180 --> 00:39:26,780
why did this come on

00:39:23,970 --> 00:39:26,780
Hana Klee

00:39:35,670 --> 00:39:42,629
yeah okay so we have CSH fish shell Sh

00:39:39,530 --> 00:39:42,629
[Music]

00:39:55,010 --> 00:39:58,869
and I lost it again that's awesome

00:39:59,910 --> 00:40:04,010
okay well that's been useless

00:40:09,700 --> 00:40:16,829
all right um well I had a I had some

00:40:13,869 --> 00:40:19,930
code I wanted to walk through there but

00:40:16,829 --> 00:40:21,790
doesn't seem to be my day all right

00:40:19,930 --> 00:40:24,700
um so a handful of guidelines for

00:40:21,790 --> 00:40:27,010
contributing plugins back to ansible so

00:40:24,700 --> 00:40:29,680
coding guidelines is for GPL 3 is

00:40:27,010 --> 00:40:31,030
required with an asterisks on it module

00:40:29,680 --> 00:40:34,420
utils has been kind of a grab bag of

00:40:31,030 --> 00:40:38,650
licenses in recent years but plugins

00:40:34,420 --> 00:40:41,710
themselves should be GPL 3 Doc's are are

00:40:38,650 --> 00:40:43,780
basically required not all the plug-in

00:40:41,710 --> 00:40:46,839
types of documentation sections but you

00:40:43,780 --> 00:40:48,400
need to at least have some something

00:40:46,839 --> 00:40:49,990
useful in terms of comments or

00:40:48,400 --> 00:40:52,240
docstrings those kind of things for your

00:40:49,990 --> 00:40:54,730
functions just because of what's going

00:40:52,240 --> 00:40:57,369
on familiarize yourself with the modules

00:40:54,730 --> 00:40:59,380
available and some of the stuff in the

00:40:57,369 --> 00:41:00,730
base classes because there's a

00:40:59,380 --> 00:41:02,470
reasonable chance that you will

00:41:00,730 --> 00:41:05,770
implement something that's already been

00:41:02,470 --> 00:41:08,619
done and then if you submit a code

00:41:05,770 --> 00:41:11,710
review you'll be asked to not do that

00:41:08,619 --> 00:41:13,990
so we have Google Groups as our our

00:41:11,710 --> 00:41:15,760
development forum ansible develop reno

00:41:13,990 --> 00:41:18,099
diff enemy has any questions and then

00:41:15,760 --> 00:41:19,420
there's two core team meetings a week so

00:41:18,099 --> 00:41:20,859
every Tuesday and Thursday we actually

00:41:19,420 --> 00:41:23,440
have a core community team meeting on

00:41:20,859 --> 00:41:26,770
IRC that anyone can add things the

00:41:23,440 --> 00:41:28,420
Gentoo on on github and please do that

00:41:26,770 --> 00:41:29,589
because anytime there's a decision that

00:41:28,420 --> 00:41:31,000
needs to be made anytime there's

00:41:29,589 --> 00:41:35,440
questions about a review that people

00:41:31,000 --> 00:41:37,210
have if there's any kind of debate about

00:41:35,440 --> 00:41:38,740
a decision in which something should go

00:41:37,210 --> 00:41:40,000
or people need advisement that they are

00:41:38,740 --> 00:41:41,500
not getting just from the general

00:41:40,000 --> 00:41:43,690
develop discussions that kind of thing

00:41:41,500 --> 00:41:45,640
the core contributors are there and

00:41:43,690 --> 00:41:47,680
something to note is that as far as core

00:41:45,640 --> 00:41:49,510
contributors go I believe it's about

00:41:47,680 --> 00:41:50,890
half and half now I think about half the

00:41:49,510 --> 00:41:52,299
core contributors work for Red Hat about

00:41:50,890 --> 00:41:54,760
half the core contributors are community

00:41:52,299 --> 00:41:56,859
based but it's not just Red Hatters who

00:41:54,760 --> 00:41:58,390
have direct get access to to the

00:41:56,859 --> 00:42:00,369
codebase these days I think it's

00:41:58,390 --> 00:42:02,650
somewhere in the ballpark of like 30

00:42:00,369 --> 00:42:05,410
people and about 15 of them work for Red

00:42:02,650 --> 00:42:09,450
Hat so yeah we're doing doing better

00:42:05,410 --> 00:42:09,450
there so questions

00:42:10,880 --> 00:42:18,620
No all right cool well um seven spare

00:42:15,000 --> 00:42:18,620
yes oh I'm sorry good

00:42:24,700 --> 00:42:27,700
yes

00:42:32,010 --> 00:42:40,500
okay so module so modules are kind of a

00:42:34,950 --> 00:42:44,400
special thing because they are loaded

00:42:40,500 --> 00:42:46,710
like a plugin such that they have

00:42:44,400 --> 00:42:48,030
certain attributes like their indexing

00:42:46,710 --> 00:42:48,420
and their configuration those kind of

00:42:48,030 --> 00:42:49,950
things

00:42:48,420 --> 00:42:51,060
but they aren't actually implemented

00:42:49,950 --> 00:42:53,490
like a plug-in because plugins are

00:42:51,060 --> 00:42:55,740
loaded directly as Python classes or

00:42:53,490 --> 00:43:00,000
subclasses whereas modules aren't

00:42:55,740 --> 00:43:02,040
inherently modules are actually loaded

00:43:00,000 --> 00:43:03,930
as Python sub modules and subclasses

00:43:02,040 --> 00:43:05,100
when they're written in Python but

00:43:03,930 --> 00:43:06,590
they're not required to be written in

00:43:05,100 --> 00:43:11,490
Python you can write a module in

00:43:06,590 --> 00:43:15,560
PowerShell or Ruby or Java or C if you

00:43:11,490 --> 00:43:20,160
feel like it a module just has to accept

00:43:15,560 --> 00:43:21,359
and return JSON as input and output so

00:43:20,160 --> 00:43:23,220
you can write in any language you want

00:43:21,359 --> 00:43:26,130
and that's why they're special because

00:43:23,220 --> 00:43:28,109
we have this this implementation thing

00:43:26,130 --> 00:43:29,520
called anti ball z which is a tip of the

00:43:28,109 --> 00:43:31,530
hat to dragon ball z for those of our

00:43:29,520 --> 00:43:34,410
animation which will actually allow you

00:43:31,530 --> 00:43:36,750
to basically package up and bundle a

00:43:34,410 --> 00:43:39,750
module to be sent over the wire written

00:43:36,750 --> 00:43:42,060
in any language and the idea there is to

00:43:39,750 --> 00:43:45,359
allow module development to be flexible

00:43:42,060 --> 00:43:47,520
because what majority of people are

00:43:45,359 --> 00:43:49,020
doing the majority people are writing is

00:43:47,520 --> 00:43:50,700
going to be module let me back up

00:43:49,020 --> 00:43:55,140
majority people I'm writing play books

00:43:50,700 --> 00:43:57,350
or roles slightly less people will be

00:43:55,140 --> 00:43:59,220
writing modules for custom functionality

00:43:57,350 --> 00:44:02,100
considerably less people are gonna be

00:43:59,220 --> 00:44:05,340
writing a strategy plug-in or you know

00:44:02,100 --> 00:44:07,410
cache cache plugin that kind of thing so

00:44:05,340 --> 00:44:10,410
the you know the flexibility in the

00:44:07,410 --> 00:44:13,619
range kind of in terms of implementation

00:44:10,410 --> 00:44:15,480
for for proper plugins which is you know

00:44:13,619 --> 00:44:17,160
kind of what we went through today those

00:44:15,480 --> 00:44:18,869
are written in Python whereas modules

00:44:17,160 --> 00:44:22,950
themselves have a lot of flexibility to

00:44:18,869 --> 00:44:25,109
them in terms of what you can do so the

00:44:22,950 --> 00:44:27,210
the stipulation that was ever placed on

00:44:25,109 --> 00:44:33,030
a module was that it has to accept and

00:44:27,210 --> 00:44:35,940
return JSON the big kicker beyond that

00:44:33,030 --> 00:44:37,950
though is for a module to be accepted

00:44:35,940 --> 00:44:39,870
into upstream ansible it has to be

00:44:37,950 --> 00:44:43,110
employed in Python

00:44:39,870 --> 00:44:44,580
or powershell the window the windows

00:44:43,110 --> 00:44:46,920
modules are written in PowerShell I can

00:44:44,580 --> 00:44:50,640
always i sorry windows people I always

00:44:46,920 --> 00:45:07,380
forget I don't mean to just forget that

00:44:50,640 --> 00:45:09,180
you exist yeah yeah so the question was

00:45:07,380 --> 00:45:11,190
how do you write plug-ins for Windows

00:45:09,180 --> 00:45:12,630
the answer is you don't the plugins

00:45:11,190 --> 00:45:14,580
because in the reason I say that is

00:45:12,630 --> 00:45:16,260
because the plugins run controller side

00:45:14,580 --> 00:45:17,850
and ansible is only supported controller

00:45:16,260 --> 00:45:20,580
side on Linux

00:45:17,850 --> 00:45:22,980
so plugins themselves are always going

00:45:20,580 --> 00:45:25,440
to run controller side on the Linux

00:45:22,980 --> 00:45:27,780
system modules however modules are

00:45:25,440 --> 00:45:29,760
written powershell for windows yeah in

00:45:27,780 --> 00:45:30,900
powershell yeah and we have native so

00:45:29,760 --> 00:45:32,850
from an answer perspective we have

00:45:30,900 --> 00:45:34,740
native support for powershell for module

00:45:32,850 --> 00:45:38,160
authoring and the mod and the modules

00:45:34,740 --> 00:45:40,080
are what carry what provide

00:45:38,160 --> 00:45:43,350
functionality for the task execution in

00:45:40,080 --> 00:45:44,760
a playbook so that's yeah so modules

00:45:43,350 --> 00:45:48,690
themselves can be written in PowerShell

00:45:44,760 --> 00:45:50,520
to try to do the native stuff with with

00:45:48,690 --> 00:46:04,590
the local or those with the remote

00:45:50,520 --> 00:46:05,970
Windows host so the question was where

00:46:04,590 --> 00:46:09,150
do we put modules that we've written our

00:46:05,970 --> 00:46:10,500
own so you can put it in your module

00:46:09,150 --> 00:46:12,660
path you which you can define your

00:46:10,500 --> 00:46:14,430
configuration or at the command line you

00:46:12,660 --> 00:46:21,810
can put in the default module path which

00:46:14,430 --> 00:46:25,500
is at C ansible modules or in your local

00:46:21,810 --> 00:46:26,160
directory under the libraries directory

00:46:25,500 --> 00:46:29,310
name

00:46:26,160 --> 00:46:30,780
I'm sorry library singular not plural so

00:46:29,310 --> 00:46:32,700
library and your local directory or

00:46:30,780 --> 00:46:34,290
within the directory of a role so if

00:46:32,700 --> 00:46:35,160
you've if you've defined a role and you

00:46:34,290 --> 00:46:36,570
have played books and stuff in there you

00:46:35,160 --> 00:46:38,190
can put library in there and put your

00:46:36,570 --> 00:46:40,440
custom modules in there and that will

00:46:38,190 --> 00:46:42,360
provide that functionality why does it

00:46:40,440 --> 00:46:46,010
get called library I don't know I need

00:46:42,360 --> 00:46:50,090
historic reasons I don't know maybe

00:46:46,010 --> 00:46:52,280
I mean that make sense yeah that might

00:46:50,090 --> 00:46:55,100
there I like that I should probably ask

00:46:52,280 --> 00:46:56,900
Jimmy or Michael one day I've just

00:46:55,100 --> 00:47:04,460
always accepted that as truth and never

00:46:56,900 --> 00:47:05,570
really thought to ask why yeah well so

00:47:04,460 --> 00:47:07,340
it's funny actually because there's a

00:47:05,570 --> 00:47:09,020
handful of modules that like in their

00:47:07,340 --> 00:47:10,880
metadata it's like version added it just

00:47:09,020 --> 00:47:11,840
has historic like cuz nobody knows it's

00:47:10,880 --> 00:47:14,000
like it's been here since the dawn of

00:47:11,840 --> 00:47:15,560
time we did some time in the past

00:47:14,000 --> 00:47:17,960
yummmm is one of those if you go in the

00:47:15,560 --> 00:47:22,670
version added for yum is its historic

00:47:17,960 --> 00:47:26,600
scythe inkyung existed in like 0.2 or

00:47:22,670 --> 00:47:28,610
something 0.1 it was forever ago yeah so

00:47:26,600 --> 00:47:32,360
I I had every intention to show a couple

00:47:28,610 --> 00:47:33,710
examples in like actual code but my

00:47:32,360 --> 00:47:35,020
mom's connection I pressure just

00:47:33,710 --> 00:47:37,010
tethered my phone make that better

00:47:35,020 --> 00:47:38,750
anyways if you have a questions I'm

00:47:37,010 --> 00:47:40,370
around I'm happy to like sit down and do

00:47:38,750 --> 00:47:41,750
some hackfest like things when we have

00:47:40,370 --> 00:47:44,480
like some time to break out if anybody

00:47:41,750 --> 00:47:45,830
wants to actually implement a plugin but

00:47:44,480 --> 00:47:50,320
hopefully you know so like one of the

00:47:45,830 --> 00:47:50,320
things that I always talked about is

00:47:50,620 --> 00:47:54,350
performing automation tasks based on fed

00:47:53,150 --> 00:47:56,540
messages and that's something of like an

00:47:54,350 --> 00:47:57,920
idea and I wrote a tool called loopable

00:47:56,540 --> 00:47:58,820
and that's been deployed in fedora

00:47:57,920 --> 00:48:02,060
instructure I have no idea if it's

00:47:58,820 --> 00:48:04,270
actually being used these days but the

00:48:02,060 --> 00:48:09,460
idea was is to actually be able to marry

00:48:04,270 --> 00:48:12,440
a fed message event to a responsive

00:48:09,460 --> 00:48:13,490
Fedora playbook and then use plugins to

00:48:12,440 --> 00:48:16,460
kind of accelerate to be able to

00:48:13,490 --> 00:48:18,470
integrate more more tightly coupled or

00:48:16,460 --> 00:48:20,000
more natively with various services with

00:48:18,470 --> 00:48:21,770
it with the within the Fedora

00:48:20,000 --> 00:48:24,440
infrastructure to to kind of do those

00:48:21,770 --> 00:48:27,230
things so hopefully you know throughout

00:48:24,440 --> 00:48:28,550
the Fedora project in different areas

00:48:27,230 --> 00:48:30,200
into sub projects that I have zero

00:48:28,550 --> 00:48:31,880
visibility into just because there's

00:48:30,200 --> 00:48:34,910
only so many hours in the day hopefully

00:48:31,880 --> 00:48:37,370
this can be useful to kind of extend the

00:48:34,910 --> 00:48:40,520
functionality of ansible to take your

00:48:37,370 --> 00:48:46,000
automation kind of in places you might

00:48:40,520 --> 00:48:46,000
not have thought it could cool thank you

00:48:46,220 --> 00:48:50,520

YouTube URL: https://www.youtube.com/watch?v=P0mWJbNSljc


