Title: Flock 2018 - How Distributions Are Changing
Publication date: 2018-09-03
Playlist: Flock 2018
Description: 
	Thursday, August 9, 2018 
11:30am - 12:20pm 
@Dresden

Talk: How Distributions Are Changing
Presenters: Langdon White

Description: Many people in the Fedora Community have recognized the need to adapt the distribution to meet the changing needs of the user community. We have looked at and implemented a number of things over the years, software collections, EPEL, COPR, and now, Modularity. However, we are not the only distribution and, as a result, it is worthwhile to review what other distributions are doing and compare that to our solutions.

In this talk, we will discuss some of the changing needs that the distributions are facing and what solutions have been put forward. Specifically, we will review Amazon Extras, SUSE Modules, Flatpak, Snaps, Ubuntu PPAs, and Nix. During the review we will compare the solutions to equivalents in Fedora. As much as possible, we will use demonstrations of the technologies to make the comparisons.
Captions: 
	00:00:02,100 --> 00:00:06,160
all right so if you were here for my

00:00:04,809 --> 00:00:07,479
last thought hearing Sully's pictures

00:00:06,160 --> 00:00:09,820
but okay sorry

00:00:07,479 --> 00:00:13,200
so I'm like the light I was a developer

00:00:09,820 --> 00:00:15,040
advocate Pharrell I came with the odd

00:00:13,200 --> 00:00:17,050
qualifications and I've done production

00:00:15,040 --> 00:00:19,089
applications in almost every major

00:00:17,050 --> 00:00:24,039
language with the except for the Python

00:00:19,089 --> 00:00:25,390
which is kind of entertaining so yes I

00:00:24,039 --> 00:00:27,189
did that for a while and then I kind of

00:00:25,390 --> 00:00:29,499
moved into engineering to try to help

00:00:27,189 --> 00:00:32,140
improve the developer experience for

00:00:29,499 --> 00:00:35,790
users of mirela primarily and then I

00:00:32,140 --> 00:00:37,960
moved into working on our next project

00:00:35,790 --> 00:00:41,020
and I've been kind of working on that

00:00:37,960 --> 00:00:49,360
for a long time and I'm the modularity

00:00:41,020 --> 00:00:51,610
objectives lead alright so hopefully not

00:00:49,360 --> 00:00:55,930
too many familiar photos before but so

00:00:51,610 --> 00:00:57,250
basically the world that we're kind of

00:00:55,930 --> 00:01:00,460
operating in that it's been changing

00:00:57,250 --> 00:01:03,220
over the years and it's shifting to be

00:01:00,460 --> 00:01:04,449
much more developer focused you know as

00:01:03,220 --> 00:01:08,800
we've seen with the rise of containers

00:01:04,449 --> 00:01:10,690
it's we have these monster stacks that

00:01:08,800 --> 00:01:12,790
we build our applications on top of a

00:01:10,690 --> 00:01:17,350
very thin layer almost these days on

00:01:12,790 --> 00:01:18,940
most applications the way we do software

00:01:17,350 --> 00:01:20,710
development has changed and that we can

00:01:18,940 --> 00:01:23,080
basically delete entire architectures

00:01:20,710 --> 00:01:26,290
and rebuild them in you know a matter of

00:01:23,080 --> 00:01:31,780
days if not weeks versus months and

00:01:26,290 --> 00:01:33,880
years the software as we distributed in

00:01:31,780 --> 00:01:37,270
distributions has kind of a single use

00:01:33,880 --> 00:01:39,760
case for most part and it takes it's not

00:01:37,270 --> 00:01:41,680
very discoverable if there is available

00:01:39,760 --> 00:01:45,250
other versions or alternate use cases

00:01:41,680 --> 00:01:47,020
that you might want and so you know a

00:01:45,250 --> 00:01:48,880
lot of these things are starting to kind

00:01:47,020 --> 00:01:52,240
of come to a head and so what we see is

00:01:48,880 --> 00:01:53,640
results like the advent of containers

00:01:52,240 --> 00:01:56,530
right so it's not so much that

00:01:53,640 --> 00:01:58,030
containers you know whether containers

00:01:56,530 --> 00:02:00,490
are good bad or indifferent it's more

00:01:58,030 --> 00:02:02,500
that they're obviously a clear

00:02:00,490 --> 00:02:05,470
option two restrictions placed on

00:02:02,500 --> 00:02:07,450
developers on how they can build and

00:02:05,470 --> 00:02:09,310
deploy their software there's other

00:02:07,450 --> 00:02:11,739
examples as well but that's kind of one

00:02:09,310 --> 00:02:13,959
of the clearest ones that clearly the

00:02:11,739 --> 00:02:16,090
districts are doing something wrong if

00:02:13,959 --> 00:02:17,950
you need things like containers in order

00:02:16,090 --> 00:02:19,959
to be able to run the applications they

00:02:17,950 --> 00:02:25,239
want to run in the way they want to run

00:02:19,959 --> 00:02:29,980
them so that's at least mining so moving

00:02:25,239 --> 00:02:32,290
on we have you know sorry I there's a

00:02:29,980 --> 00:02:36,489
slide behind so now we're starting to

00:02:32,290 --> 00:02:37,780
see as well that the containers are kind

00:02:36,489 --> 00:02:41,500
of going all over the place right so we

00:02:37,780 --> 00:02:43,959
have this this huge growth in types of

00:02:41,500 --> 00:02:46,810
containers with different trade-offs in

00:02:43,959 --> 00:02:48,310
different use cases you know so you kind

00:02:46,810 --> 00:02:50,049
of have like rocket I would say it's

00:02:48,310 --> 00:02:52,360
like the clearest example of something

00:02:50,049 --> 00:02:54,430
that is heavily targeted at sis admins

00:02:52,360 --> 00:02:58,540
for deployment docker was heavily

00:02:54,430 --> 00:03:02,019
targeted at developers kind of bypassing

00:02:58,540 --> 00:03:04,030
the assist administration then you have

00:03:02,019 --> 00:03:06,340
also things like snaps and flat packs

00:03:04,030 --> 00:03:08,980
which is trying to do basically an

00:03:06,340 --> 00:03:11,280
application isolation on the desktop and

00:03:08,980 --> 00:03:13,359
these are all kind of overlapping

00:03:11,280 --> 00:03:14,530
functionalities but they're not the same

00:03:13,359 --> 00:03:16,600
right there they have different

00:03:14,530 --> 00:03:18,790
trade-offs different goals and you'll

00:03:16,600 --> 00:03:20,350
probably start to see them come together

00:03:18,790 --> 00:03:22,690
and we have to understand already break

00:03:20,350 --> 00:03:25,239
like OCI is starting to try to set a

00:03:22,690 --> 00:03:27,400
standard for at least the outputs even

00:03:25,239 --> 00:03:29,440
if the goals are kind of different

00:03:27,400 --> 00:03:31,840
and then cryo is kind of a newer one

00:03:29,440 --> 00:03:34,480
that's really specifically targeted for

00:03:31,840 --> 00:03:38,890
running you know kind of cluster set

00:03:34,480 --> 00:03:40,420
cluster containers in a sense or

00:03:38,890 --> 00:03:43,299
clusters of containers against a better

00:03:40,420 --> 00:03:46,840
weapon so you have a bunch of these

00:03:43,299 --> 00:03:48,670
different solutions that clearly like

00:03:46,840 --> 00:03:51,970
said I think clearly show that there's a

00:03:48,670 --> 00:03:54,519
gap in what the Linux distribution is

00:03:51,970 --> 00:03:58,510
giving you on a server that these things

00:03:54,519 --> 00:04:01,209
are trying to solve however the problem

00:03:58,510 --> 00:04:02,709
with alloys is that there's really it's

00:04:01,209 --> 00:04:05,799
really difficult to know what's in there

00:04:02,709 --> 00:04:07,810
or why it works right so we can look at

00:04:05,799 --> 00:04:08,510
it from the outside and we can do lots

00:04:07,810 --> 00:04:10,670
of things to

00:04:08,510 --> 00:04:12,860
trying to make it safer right so for

00:04:10,670 --> 00:04:15,110
example you know there's the push around

00:04:12,860 --> 00:04:17,269
with like chrono for example to make

00:04:15,110 --> 00:04:18,889
sure that you know having privilege

00:04:17,269 --> 00:04:21,560
inside because here it doesn't mean you

00:04:18,889 --> 00:04:24,080
have privilege outside will continue so

00:04:21,560 --> 00:04:25,729
those are all great right but that

00:04:24,080 --> 00:04:27,380
doesn't tell you if you have a sequel

00:04:25,729 --> 00:04:31,160
injection error right I mean it doesn't

00:04:27,380 --> 00:04:32,720
defend you at all okay so and if you

00:04:31,160 --> 00:04:34,580
don't really know what's exactly even

00:04:32,720 --> 00:04:38,600
the content inside it could be really

00:04:34,580 --> 00:04:40,970
dangerous especially as the model around

00:04:38,600 --> 00:04:43,280
containers a lot of the time is people

00:04:40,970 --> 00:04:45,530
are encouraged to just pick something up

00:04:43,280 --> 00:04:48,410
off the shelf and start using it without

00:04:45,530 --> 00:04:50,000
having a good idea of its provenance so

00:04:48,410 --> 00:04:51,440
these are these are dangerous and I

00:04:50,000 --> 00:04:54,139
think these are things that are getting

00:04:51,440 --> 00:04:57,169
solved and won't be solved over time but

00:04:54,139 --> 00:04:58,760
it still kind of shows that there's you

00:04:57,169 --> 00:05:02,389
know that the things that we've been

00:04:58,760 --> 00:05:06,110
doing in the district to ensure the this

00:05:02,389 --> 00:05:08,449
problem not happening isn't working for

00:05:06,110 --> 00:05:12,889
what developers insist that means need

00:05:08,449 --> 00:05:14,479
today so however there's kind of the

00:05:12,889 --> 00:05:16,160
flipside never started to kind of

00:05:14,479 --> 00:05:19,849
further out into that we have this

00:05:16,160 --> 00:05:22,010
curation right we say in fedora we work

00:05:19,849 --> 00:05:23,270
on making sure that we know the

00:05:22,010 --> 00:05:25,190
provenance of something we need to make

00:05:23,270 --> 00:05:26,900
sure that when you ask for something to

00:05:25,190 --> 00:05:29,479
get what you think you're getting we

00:05:26,900 --> 00:05:31,280
sign it you have a trusted partner all

00:05:29,479 --> 00:05:32,360
these things and again we're starting to

00:05:31,280 --> 00:05:34,610
see some of that stuff in the container

00:05:32,360 --> 00:05:36,139
world but the districts already have it

00:05:34,610 --> 00:05:39,050
so how can we try to start to marry

00:05:36,139 --> 00:05:42,099
these things and the project I lead

00:05:39,050 --> 00:05:44,479
right into the modularity project but

00:05:42,099 --> 00:05:46,400
what I wanted to show in this talk is

00:05:44,479 --> 00:05:49,070
here are some other distros of what

00:05:46,400 --> 00:05:51,289
they're doing which in my opinion is

00:05:49,070 --> 00:05:54,050
trying to solve the same problem in

00:05:51,289 --> 00:05:55,849
different in other ways and you know

00:05:54,050 --> 00:05:57,470
obviously it's always good to look at

00:05:55,849 --> 00:05:59,150
other people's solutions just to figure

00:05:57,470 --> 00:06:04,400
out you know where the gaps in yours are

00:05:59,150 --> 00:06:06,020
so here is how they're changing this was

00:06:04,400 --> 00:06:08,620
the best I can do for a changing picture

00:06:06,020 --> 00:06:12,069
you know so I just turned

00:06:08,620 --> 00:06:14,289
so Amazon when it's two extras is the

00:06:12,069 --> 00:06:15,490
first one and then sousei modules is

00:06:14,289 --> 00:06:18,370
another one we'll talk about and then

00:06:15,490 --> 00:06:19,719
quicksand nix I'm sure there are others

00:06:18,370 --> 00:06:24,180
but these are kind of the ones that I

00:06:19,719 --> 00:06:24,180
thought were interesting for this talk

00:06:24,389 --> 00:06:32,349
so the idea here is they make alternate

00:06:29,860 --> 00:06:37,270
versions of software available they do

00:06:32,349 --> 00:06:38,889
it with basically creating it's kind of

00:06:37,270 --> 00:06:41,169
weird how it works but basically there

00:06:38,889 --> 00:06:42,819
are new repos enabled what you want that

00:06:41,169 --> 00:06:46,060
piece of software so you want the latest

00:06:42,819 --> 00:06:49,060
version of Postgres and then you

00:06:46,060 --> 00:06:52,599
basically enable the topic and now a new

00:06:49,060 --> 00:06:53,830
repo is added that has this newer

00:06:52,599 --> 00:06:58,330
version of Postgres and many

00:06:53,830 --> 00:07:02,439
dependencies that it has and so there

00:06:58,330 --> 00:07:04,360
are no I meant to meant to count them I

00:07:02,439 --> 00:07:09,129
want to say there's like 20 of these at

00:07:04,360 --> 00:07:10,330
this point give or take and you know so

00:07:09,129 --> 00:07:11,409
you can have but you can have multiple

00:07:10,330 --> 00:07:13,870
versions and things you'll get two

00:07:11,409 --> 00:07:15,460
different repos and you know so you have

00:07:13,870 --> 00:07:17,349
Postgres nine is available for example

00:07:15,460 --> 00:07:19,330
and then Postgres I think it's actually

00:07:17,349 --> 00:07:21,039
nine six and nine eight as well as

00:07:19,330 --> 00:07:23,110
Postgres tenth right so you have

00:07:21,039 --> 00:07:24,669
different versions available and you

00:07:23,110 --> 00:07:27,639
kind of can turn the monitor off using

00:07:24,669 --> 00:07:30,819
this new special command called Amazon

00:07:27,639 --> 00:07:32,709
and Linux extras and you enable the

00:07:30,819 --> 00:07:37,689
topic you enable version and that's how

00:07:32,709 --> 00:07:41,589
you get so and depending on how much

00:07:37,689 --> 00:07:43,870
time we've had well demo but let's see

00:07:41,589 --> 00:07:45,219
oh and so Pakistan also overrides right

00:07:43,870 --> 00:07:48,129
so you can have something in these

00:07:45,219 --> 00:07:50,680
repositories that is overriding us in

00:07:48,129 --> 00:07:56,289
the base so it has a few problems that

00:07:50,680 --> 00:07:58,629
in my opinion of how it works so it's

00:07:56,289 --> 00:08:00,729
it's kind of assuming that in and when

00:07:58,629 --> 00:08:03,550
you run the application itself it warns

00:08:00,729 --> 00:08:07,300
you not to turn on too many movies which

00:08:03,550 --> 00:08:09,400
i think is kind of concerning in all the

00:08:07,300 --> 00:08:10,540
documentation and I will say work with

00:08:09,400 --> 00:08:12,759
I think we have this problem a little

00:08:10,540 --> 00:08:14,440
bit too but in all the documentation it

00:08:12,759 --> 00:08:16,930
warns over and over again that this is

00:08:14,440 --> 00:08:18,190
not supported in production and so if

00:08:16,930 --> 00:08:20,199
you use any of this stuff it's not

00:08:18,190 --> 00:08:21,580
supported etcetera I don't know if that

00:08:20,199 --> 00:08:23,350
would change you know maybe it's kind of

00:08:21,580 --> 00:08:27,250
the tech preview transitioning to

00:08:23,350 --> 00:08:28,900
production usage but the the part that

00:08:27,250 --> 00:08:30,970
concern me it was the if you have too

00:08:28,900 --> 00:08:32,169
many it will not work one of the other

00:08:30,970 --> 00:08:35,110
key differences that I think that

00:08:32,169 --> 00:08:40,890
modularity does that this doesn't do is

00:08:35,110 --> 00:08:44,620
that if I enable if I enable the kind of

00:08:40,890 --> 00:08:46,570
trampy notices so there's no there's

00:08:44,620 --> 00:08:48,820
kind of no sticking to the stream in a

00:08:46,570 --> 00:08:50,589
sense right so it's whatever's in the

00:08:48,820 --> 00:08:54,040
repository it's just available there's

00:08:50,589 --> 00:08:57,339
no tracking about the fact that you know

00:08:54,040 --> 00:08:59,140
I'm on Postgres II and I now have been

00:08:57,339 --> 00:09:00,910
upgraded to Postgres nine it just

00:08:59,140 --> 00:09:03,970
happens and it's silent just like a

00:09:00,910 --> 00:09:05,800
normal rpm update this is one of the key

00:09:03,970 --> 00:09:10,029
things I think with modularity is that

00:09:05,800 --> 00:09:12,839
you are warm before you do an upgrade so

00:09:10,029 --> 00:09:16,450
that you can choose to switch streams

00:09:12,839 --> 00:09:18,550
the other concern and we actually would

00:09:16,450 --> 00:09:20,440
have had this problem but we were

00:09:18,550 --> 00:09:24,070
concerned about it is that it's a

00:09:20,440 --> 00:09:26,170
repository repository her topic and the

00:09:24,070 --> 00:09:28,990
problem with that is that both DNF and

00:09:26,170 --> 00:09:31,120
Jung's start falling down pretty hard

00:09:28,990 --> 00:09:33,850
when you have a large number of postures

00:09:31,120 --> 00:09:36,070
so if you move your whole system to

00:09:33,850 --> 00:09:40,240
using these topics you would end up with

00:09:36,070 --> 00:09:41,980
you know 30 40 50 repositories and the

00:09:40,240 --> 00:09:43,270
package management tooling doesn't

00:09:41,980 --> 00:09:50,190
actually handle large numbers

00:09:43,270 --> 00:09:50,190
repositories very well good certainly

00:09:50,270 --> 00:10:01,380
you've used 700 posters in DNA okay so

00:09:58,950 --> 00:10:04,700
the point was made that we can do 700

00:10:01,380 --> 00:10:08,190
Busters and DNF I know when we tested it

00:10:04,700 --> 00:10:16,200
I guess come 10 years ago it definitely

00:10:08,190 --> 00:10:18,300
could not so yeah so actually source

00:10:16,200 --> 00:10:20,730
their comment was they his young and

00:10:18,300 --> 00:10:23,460
Amazon when I was digging around

00:10:20,730 --> 00:10:24,780
actually they both are available but I

00:10:23,460 --> 00:10:26,460
don't I don't know if yum is just a

00:10:24,780 --> 00:10:29,160
singling to Deena what Fodor has been

00:10:26,460 --> 00:10:32,720
doing because I didn't I miss getting to

00:10:29,160 --> 00:10:32,720
that step I was really surprised

00:10:33,080 --> 00:10:43,380
yeah so apparently maybe 7 1 we most fun

00:10:37,860 --> 00:10:47,460
I'm surprised so oh and then the other

00:10:43,380 --> 00:10:48,870
thing that I was was interesting and I

00:10:47,460 --> 00:10:52,410
couldn't quite figure out how this book

00:10:48,870 --> 00:10:54,780
work but basically if I say YUM all

00:10:52,410 --> 00:10:58,590
right sorry you know kind of Amazon

00:10:54,780 --> 00:10:58,830
Linux extras install oh no that's how it

00:10:58,590 --> 00:11:01,590
works

00:10:58,830 --> 00:11:04,200
sorry I just figured it out so so you do

00:11:01,590 --> 00:11:05,970
Amazon Linux extras kind of enable

00:11:04,200 --> 00:11:09,180
whatever the topic is and then you go

00:11:05,970 --> 00:11:11,070
and install what you think of this kind

00:11:09,180 --> 00:11:13,020
of a high level packaging them in there

00:11:11,070 --> 00:11:15,450
which has is a man package and then kind

00:11:13,020 --> 00:11:19,410
of gets all its dependencies and so when

00:11:15,450 --> 00:11:22,770
it when you enable it it says hey we

00:11:19,410 --> 00:11:26,160
recommend you use basically this you

00:11:22,770 --> 00:11:28,800
know this name of the post press or P so

00:11:26,160 --> 00:11:30,030
you have a few things there so we have

00:11:28,800 --> 00:11:31,980
this kind of concept in modularity

00:11:30,030 --> 00:11:34,440
called profiles which allow you to have

00:11:31,980 --> 00:11:36,480
different use cases for a given piece of

00:11:34,440 --> 00:11:37,860
software so Postgres you might have

00:11:36,480 --> 00:11:39,750
client you might have served right

00:11:37,860 --> 00:11:42,900
you'll get different rpms installed

00:11:39,750 --> 00:11:45,540
depending on which profile use this has

00:11:42,900 --> 00:11:47,940
basically a single profile that you use

00:11:45,540 --> 00:11:49,680
and then and then the other thing that I

00:11:47,940 --> 00:11:51,270
I don't really like about it but it is

00:11:49,680 --> 00:11:53,190
not anything particularly

00:11:51,270 --> 00:11:56,040
necessarily wrong with it is that it

00:11:53,190 --> 00:11:58,440
uses name mangling to separate the

00:11:56,040 --> 00:12:01,460
different versus post gross so it is

00:11:58,440 --> 00:12:04,080
Postgres equal one zero is the name

00:12:01,460 --> 00:12:06,720
rather than kind of using the version

00:12:04,080 --> 00:12:10,530
number in some kind of proper metadata

00:12:06,720 --> 00:12:13,680
area so those are a few things that I

00:12:10,530 --> 00:12:16,910
found challenging about it but it does

00:12:13,680 --> 00:12:20,940
work you know it's it's available today

00:12:16,910 --> 00:12:23,460
you can I don't I didn't see a way to

00:12:20,940 --> 00:12:26,550
kind of use it offline even though you

00:12:23,460 --> 00:12:29,400
can use animals on Linux to offline you

00:12:26,550 --> 00:12:31,680
can actually download registry but

00:12:29,400 --> 00:12:33,990
obviously you know most of our rpm repos

00:12:31,680 --> 00:12:35,010
are online anyway so that's not too big

00:12:33,990 --> 00:12:37,020
a deal

00:12:35,010 --> 00:12:39,570
the other interesting thing that I

00:12:37,020 --> 00:12:42,810
thought was that they actually use their

00:12:39,570 --> 00:12:45,900
CDN Network with base be individual

00:12:42,810 --> 00:12:48,540
hashes for each of the rpms rather than

00:12:45,900 --> 00:12:49,830
there being like a web page right that

00:12:48,540 --> 00:12:52,140
you can go to and actually because see

00:12:49,830 --> 00:12:53,940
everything in the repo which I also

00:12:52,140 --> 00:12:56,790
thought was interesting but again not

00:12:53,940 --> 00:12:59,480
really a full just different sorry

00:12:56,790 --> 00:13:02,010
apparently that's talking a long time

00:12:59,480 --> 00:13:06,360
alright so that's it was on the Linux

00:13:02,010 --> 00:13:10,470
extras any questions on that all right

00:13:06,360 --> 00:13:12,980
we'll see how we do all right so SUSE

00:13:10,470 --> 00:13:16,950
modules is another relatively new thing

00:13:12,980 --> 00:13:19,320
and is as far as last I looked is only

00:13:16,950 --> 00:13:24,180
available for the enterprise version and

00:13:19,320 --> 00:13:26,940
this is like seven or so different

00:13:24,180 --> 00:13:29,850
repositories that have

00:13:26,940 --> 00:13:33,180
kind of a a choose work topic but kind

00:13:29,850 --> 00:13:34,710
of a topic area that bring a new

00:13:33,180 --> 00:13:36,150
versions of software together that are

00:13:34,710 --> 00:13:37,650
related to that topic so I'm like

00:13:36,150 --> 00:13:39,420
there's a web development one that might

00:13:37,650 --> 00:13:42,210
have new verses PHP and might have new

00:13:39,420 --> 00:13:43,230
versions of you know web servers etc but

00:13:42,210 --> 00:13:47,130
they're kind of all bundled into one

00:13:43,230 --> 00:13:49,380
repo they are as far as I can tell it is

00:13:47,130 --> 00:13:51,600
essentially similar to like rel extras

00:13:49,380 --> 00:13:54,630
or like our confusion in a sense like

00:13:51,600 --> 00:13:57,600
here is an extra repository that has new

00:13:54,630 --> 00:14:00,000
or what's a different potentially newer

00:13:57,600 --> 00:14:03,960
versions of software and made available

00:14:00,000 --> 00:14:07,350
to the end user in a supportive way in

00:14:03,960 --> 00:14:10,680
terms of you know for enterprise Susac

00:14:07,350 --> 00:14:12,480
and you know so they have this kind of

00:14:10,680 --> 00:14:14,370
weapon scripting was one of them legacy

00:14:12,480 --> 00:14:16,470
is another one and there's a bunch of

00:14:14,370 --> 00:14:19,680
others but essentially you're just

00:14:16,470 --> 00:14:22,650
adding the equivalent of rel extras or

00:14:19,680 --> 00:14:26,220
well it's not quite like optional but

00:14:22,650 --> 00:14:28,680
more like extras so it's pretty

00:14:26,220 --> 00:14:32,730
straightforward and I love that the

00:14:28,680 --> 00:14:38,790
massive name collision is confusing

00:14:32,730 --> 00:14:40,800
so I guess our examples you know and and

00:14:38,790 --> 00:14:41,970
I don't know where they're going with

00:14:40,800 --> 00:14:43,790
this it's a little hard to tell there

00:14:41,970 --> 00:14:47,760
hasn't really been updates of like

00:14:43,790 --> 00:14:50,280
additional of these buckets in the time

00:14:47,760 --> 00:14:54,270
I've been looking at it so I think it's

00:14:50,280 --> 00:14:57,690
just you know customer demand it's

00:14:54,270 --> 00:14:59,220
getting very warm alright so the next

00:14:57,690 --> 00:15:04,680
one then I think is really interesting

00:14:59,220 --> 00:15:09,890
is Nix OS and Wix so the way this works

00:15:04,680 --> 00:15:12,180
is quite different in that when you

00:15:09,890 --> 00:15:14,310
install a particular piece of software

00:15:12,180 --> 00:15:16,590
it actually kind of puts it in a

00:15:14,310 --> 00:15:19,020
non-standard location and then

00:15:16,590 --> 00:15:20,520
essentially adds in symlinks to the

00:15:19,020 --> 00:15:23,130
correct location or from the correct

00:15:20,520 --> 00:15:26,370
location to the this alternate location

00:15:23,130 --> 00:15:30,360
and you know so as a result it allows

00:15:26,370 --> 00:15:33,480
for full parallel installation as well

00:15:30,360 --> 00:15:35,640
so you can have a complete clone of you

00:15:33,480 --> 00:15:38,700
know whatever set of libraries and then

00:15:35,640 --> 00:15:42,750
it provides them to each application so

00:15:38,700 --> 00:15:44,670
it's it's very sophisticated and and it

00:15:42,750 --> 00:15:46,170
seems to work well

00:15:44,670 --> 00:15:50,340
I have mornings too many problems with

00:15:46,170 --> 00:15:52,050
it and it's you know it kind of uses

00:15:50,340 --> 00:15:55,830
they have a bunch of other nice features

00:15:52,050 --> 00:15:58,290
like the entire OS is actually it does

00:15:55,830 --> 00:16:00,690
the atomic thing where you know you can

00:15:58,290 --> 00:16:03,930
have infinite roll back and even any

00:16:00,690 --> 00:16:05,610
given adds it to grow so that you know

00:16:03,930 --> 00:16:08,760
if you try to do an install and it fails

00:16:05,610 --> 00:16:11,910
you can always roll back it uses a

00:16:08,760 --> 00:16:13,860
declarative mechanism for describing the

00:16:11,910 --> 00:16:17,580
configuration of your out of your entire

00:16:13,860 --> 00:16:23,970
OS so it's really nice and it works

00:16:17,580 --> 00:16:25,950
quite well however yes so the user

00:16:23,970 --> 00:16:28,980
adoption is tough because it's

00:16:25,950 --> 00:16:31,290
completely different like you you know

00:16:28,980 --> 00:16:33,600
the package like the usage of the

00:16:31,290 --> 00:16:35,430
package management and stuff is just not

00:16:33,600 --> 00:16:37,890
you know it's not the anything yeah it's

00:16:35,430 --> 00:16:39,750
quite different and how you approach

00:16:37,890 --> 00:16:41,190
managing your system is quite different

00:16:39,750 --> 00:16:44,220
because you use this declarative syntax

00:16:41,190 --> 00:16:47,670
inside of a configuration file that kind

00:16:44,220 --> 00:16:49,170
of declares I want thunderbird versus

00:16:47,670 --> 00:16:51,900
you know what I think it was what we

00:16:49,170 --> 00:16:54,480
would do normally is you know will

00:16:51,900 --> 00:16:55,920
install blah blah in a sense it's

00:16:54,480 --> 00:16:57,810
actually more like managing a system

00:16:55,920 --> 00:17:00,540
with ansible so in that way it is

00:16:57,810 --> 00:17:03,330
similar but look for general user

00:17:00,540 --> 00:17:06,420
adoption it's pretty tough you know like

00:17:03,330 --> 00:17:07,860
I said I really like the other massive

00:17:06,420 --> 00:17:10,410
problem is it requires new packaging

00:17:07,860 --> 00:17:13,250
right so our twenty one thousand or

00:17:10,410 --> 00:17:18,450
something packages all we need to factor

00:17:13,250 --> 00:17:21,600
and then but to the end to the end point

00:17:18,450 --> 00:17:23,700
it is a very you know it is a it is a

00:17:21,600 --> 00:17:28,320
good solution it's good at what it does

00:17:23,700 --> 00:17:28,910
and it may be even if we adopt you know

00:17:28,320 --> 00:17:32,210
kind of stuff

00:17:28,910 --> 00:17:34,340
or games cetera it might be a good way

00:17:32,210 --> 00:17:39,080
to shift if we wanted to get to parallel

00:17:34,340 --> 00:17:42,470
installation died uh I'm just curious

00:17:39,080 --> 00:17:44,960
anyway investigate trying to change rpm

00:17:42,470 --> 00:17:46,900
build an RPM on the back end to do this

00:17:44,960 --> 00:17:50,330
instead of trying to rebuild the world

00:17:46,900 --> 00:17:53,570
yeah so the question is basically could

00:17:50,330 --> 00:17:58,220
we in you know in in the things that

00:17:53,570 --> 00:18:02,330
build rpm is in a sense cause the output

00:17:58,220 --> 00:18:08,090
to result in something like the next

00:18:02,330 --> 00:18:11,300
symmetry like this guy so it was kind of

00:18:08,090 --> 00:18:13,760
toying around with you know the there's

00:18:11,300 --> 00:18:15,350
other the problems you also have to kind

00:18:13,760 --> 00:18:16,730
of convince the applications so you have

00:18:15,350 --> 00:18:19,760
to pass that information to the

00:18:16,730 --> 00:18:21,380
applications as well so like you have to

00:18:19,760 --> 00:18:25,400
tell them which set of settings to be

00:18:21,380 --> 00:18:30,290
using why so like if you have parallel

00:18:25,400 --> 00:18:32,750
installation you need so Falcon a is

00:18:30,290 --> 00:18:34,820
using library food version 2 and

00:18:32,750 --> 00:18:37,220
application B using the library food

00:18:34,820 --> 00:18:39,170
version 3 you also need to pass that

00:18:37,220 --> 00:18:42,800
information to the applications

00:18:39,170 --> 00:18:47,870
themselves and with the symlinks you can

00:18:42,800 --> 00:18:50,930
turn around extensive yeah I have I have

00:18:47,870 --> 00:18:53,060
ideas of how yeah we do that so I think

00:18:50,930 --> 00:18:54,920
I actually got much having to change

00:18:53,060 --> 00:18:57,590
application context I think we can lie

00:18:54,920 --> 00:18:59,300
to it about yeah so so basically Connor

00:18:57,590 --> 00:19:02,540
is like you know are there mechanisms

00:18:59,300 --> 00:19:05,870
that we could use to make this result

00:19:02,540 --> 00:19:09,110
but transparent to both the applications

00:19:05,870 --> 00:19:12,830
and the users and the maintainer and I

00:19:09,110 --> 00:19:14,900
think it is potentially possible I don't

00:19:12,830 --> 00:19:16,370
think it's trivial no it's not for that

00:19:14,900 --> 00:19:23,360
one might also break everything right

00:19:16,370 --> 00:19:26,950
it's right all right so go ahead so in

00:19:23,360 --> 00:19:29,570
fedora we have NV ours and our RPM names

00:19:26,950 --> 00:19:31,780
how are these identified in the file

00:19:29,570 --> 00:19:31,780
system

00:19:32,230 --> 00:19:38,420
well the RPM is a trivia question oh

00:19:35,660 --> 00:19:40,040
sorry so the question is like how are

00:19:38,420 --> 00:19:41,590
the different versions identified in the

00:19:40,040 --> 00:19:44,210
file system

00:19:41,590 --> 00:19:45,740
we don't actually identify on the file

00:19:44,210 --> 00:19:48,650
system where we use them in the Arkham

00:19:45,740 --> 00:19:52,550
database it's kind of similar it's that

00:19:48,650 --> 00:19:55,130
it keeps track of with what input where

00:19:52,550 --> 00:19:58,490
and so when you try to install it again

00:19:55,130 --> 00:20:01,040
but there's no conflicts because you can

00:19:58,490 --> 00:20:02,300
have parallel installation it right but

00:20:01,040 --> 00:20:05,030
I was like looking at the distribution

00:20:02,300 --> 00:20:06,800
and I saw there was a core utils like

00:20:05,030 --> 00:20:09,530
how is it what is the file name that

00:20:06,800 --> 00:20:11,930
contains core utils eight to five it's

00:20:09,530 --> 00:20:15,050
it's a it's a directory and with a UUID

00:20:11,930 --> 00:20:16,970
yeah like crazy you IDs places it in

00:20:15,050 --> 00:20:18,950
there and that hashes generated at Build

00:20:16,970 --> 00:20:21,200
time so there's a there's a discoverable

00:20:18,950 --> 00:20:22,550
mapping right so this cooling when you

00:20:21,200 --> 00:20:25,970
go to query the system will tell you

00:20:22,550 --> 00:20:27,950
what that yeah sorry so the question was

00:20:25,970 --> 00:20:30,650
you know how do you how do you track

00:20:27,950 --> 00:20:32,030
down where like what version of

00:20:30,650 --> 00:20:34,820
something that you're actually you don't

00:20:32,030 --> 00:20:36,800
have installed or you're using and when

00:20:34,820 --> 00:20:39,710
it puts it in this alternate location

00:20:36,800 --> 00:20:41,240
actually is this it's yeah kind of like

00:20:39,710 --> 00:20:43,010
a UID but basically there's this

00:20:41,240 --> 00:20:46,850
generated hash that is actually the

00:20:43,010 --> 00:20:48,710
input into the hash is directly made

00:20:46,850 --> 00:20:51,350
from the binaries and all of its

00:20:48,710 --> 00:20:53,480
dependencies so you can I think it you

00:20:51,350 --> 00:20:57,140
can even reverse it right yeah yeah so

00:20:53,480 --> 00:21:00,440
you can reverse the the hash and know

00:20:57,140 --> 00:21:03,710
exactly all the things that built it as

00:21:00,440 --> 00:21:08,630
well as it runs with and that's where it

00:21:03,710 --> 00:21:11,600
kind of gets stored off under suppose it

00:21:08,630 --> 00:21:13,940
distributed Oh typical package

00:21:11,600 --> 00:21:15,350
management like repos and what's

00:21:13,940 --> 00:21:18,200
interesting about it actually is that it

00:21:15,350 --> 00:21:20,450
will check that the NICS repo and if

00:21:18,200 --> 00:21:21,950
it's there it will pull binary but if

00:21:20,450 --> 00:21:24,740
it's not there it'll actually build it

00:21:21,950 --> 00:21:27,290
locally which is kind of neat so you get

00:21:24,740 --> 00:21:28,990
both that kind of source and binary

00:21:27,290 --> 00:21:32,240
distribution that goes in the same time

00:21:28,990 --> 00:21:35,120
and so what what further or what follows

00:21:32,240 --> 00:21:38,780
from that is that if you modify one of

00:21:35,120 --> 00:21:40,730
their spec files locally and then

00:21:38,780 --> 00:21:42,860
you know kind of install it it will

00:21:40,730 --> 00:21:44,780
rebuild it locally there will be your

00:21:42,860 --> 00:21:47,510
custom build with whatever your changes

00:21:44,780 --> 00:21:51,830
are they say it's really it's really

00:21:47,510 --> 00:21:53,120
quite sophisticated and I think to Adams

00:21:51,830 --> 00:21:55,700
point I think there's a lot of things we

00:21:53,120 --> 00:21:58,550
could learn from it that but it's just

00:21:55,700 --> 00:22:00,410
it's going to take a while and what I

00:21:58,550 --> 00:22:03,830
think modularity one of the big drivers

00:22:00,410 --> 00:22:05,660
with modularity was really about getting

00:22:03,830 --> 00:22:07,610
our flexibility back

00:22:05,660 --> 00:22:10,250
and so they've changes to the

00:22:07,610 --> 00:22:13,610
infrastructure that allow us to do new

00:22:10,250 --> 00:22:15,920
things and so I think the steps

00:22:13,610 --> 00:22:17,570
following from here modularity are about

00:22:15,920 --> 00:22:19,370
like how can we now take advantage of

00:22:17,570 --> 00:22:21,740
that new flexibility about how we build

00:22:19,370 --> 00:22:25,070
things and maybe maybe start to think

00:22:21,740 --> 00:22:33,140
about things like this you know so

00:22:25,070 --> 00:22:35,500
that's kind of India so then we move on

00:22:33,140 --> 00:22:38,000
through modularity

00:22:35,500 --> 00:22:39,650
let me just can I see a show of hands

00:22:38,000 --> 00:22:43,250
like do we want to talk about modularity

00:22:39,650 --> 00:22:47,170
itself yes raise your hand all right

00:22:43,250 --> 00:22:49,130
cool all right so the idea of modularity

00:22:47,170 --> 00:22:50,720
you know what I was trying to point out

00:22:49,130 --> 00:22:52,130
in some of the earlier slides reasons

00:22:50,720 --> 00:22:55,280
like these are some approaches that

00:22:52,130 --> 00:22:59,060
people are taking with the exception of

00:22:55,280 --> 00:23:03,230
mix both Amazon Linux - and to say are

00:22:59,060 --> 00:23:05,090
both post Austin modularity so I don't

00:23:03,230 --> 00:23:07,310
know if they were following and used

00:23:05,090 --> 00:23:08,570
some ideas from us or whatever but we we

00:23:07,310 --> 00:23:10,130
haven't really been able to take

00:23:08,570 --> 00:23:11,810
advantage of looking at their stuff and

00:23:10,130 --> 00:23:13,700
applying it back you know where there

00:23:11,810 --> 00:23:17,900
might be lessons learned because they're

00:23:13,700 --> 00:23:21,170
pretty new but this is kind of the idea

00:23:17,900 --> 00:23:24,500
with modularity is that we're trying to

00:23:21,170 --> 00:23:28,640
stop being are trying to stop being

00:23:24,500 --> 00:23:31,790
focused on the RPM as the know

00:23:28,640 --> 00:23:34,490
everything component because we have

00:23:31,790 --> 00:23:38,000
this like kind of mindset that we you

00:23:34,490 --> 00:23:40,220
know that in our source tree you know

00:23:38,000 --> 00:23:41,540
it's just leads us to this binary and

00:23:40,220 --> 00:23:42,150
everything's wrapped around this like

00:23:41,540 --> 00:23:44,430
rpm

00:23:42,150 --> 00:23:47,730
binary both of our distribution

00:23:44,430 --> 00:23:50,640
mechanisms as well as our as well as how

00:23:47,730 --> 00:23:52,530
we build them etc etc and so it's very

00:23:50,640 --> 00:23:55,110
very difficult for us to look at to be

00:23:52,530 --> 00:23:57,780
able to kind of build or understand in

00:23:55,110 --> 00:24:00,870
our system sense anything that isn't in

00:23:57,780 --> 00:24:02,460
RPM and so what modularity wanted to do

00:24:00,870 --> 00:24:03,990
it's drying of your gray its kind of

00:24:02,460 --> 00:24:06,570
takes step back from that a little bit

00:24:03,990 --> 00:24:10,470
and say can we describe things in terms

00:24:06,570 --> 00:24:13,320
of essentially source and then result in

00:24:10,470 --> 00:24:17,190
binaries where the binary artifact is

00:24:13,320 --> 00:24:19,830
just one output type rather than being a

00:24:17,190 --> 00:24:22,160
be the be-all and end-all of the entire

00:24:19,830 --> 00:24:26,340
pipeline so right now our pipeline are

00:24:22,160 --> 00:24:28,350
yes but before modularity started is our

00:24:26,340 --> 00:24:30,630
pipeline knew how to build RPM basically

00:24:28,350 --> 00:24:31,920
that's it didn't know that it was

00:24:30,630 --> 00:24:33,750
dealing with terms and sources and that

00:24:31,920 --> 00:24:35,340
kind stuff and so as a result over the

00:24:33,750 --> 00:24:37,740
years it's been very difficult to build

00:24:35,340 --> 00:24:40,590
things like jars right or very difficult

00:24:37,740 --> 00:24:42,600
to build containers because they're

00:24:40,590 --> 00:24:44,460
different output artifacts than our

00:24:42,600 --> 00:24:46,710
build system Numa

00:24:44,460 --> 00:24:49,590
so what Monte Larry is trying to do is

00:24:46,710 --> 00:24:52,220
say okay can we describe things in terms

00:24:49,590 --> 00:24:54,390
of the source control or in terms of the

00:24:52,220 --> 00:24:58,230
you know basically a pointer into the

00:24:54,390 --> 00:25:00,840
source tree and then kind of inject

00:24:58,230 --> 00:25:02,730
things like spec files or whatever later

00:25:00,840 --> 00:25:04,410
on in the process so then we can kind of

00:25:02,730 --> 00:25:06,870
build up these binaries and result in

00:25:04,410 --> 00:25:08,940
different kinds of output artifacts so

00:25:06,870 --> 00:25:11,010
kind of that's where we kind of started

00:25:08,940 --> 00:25:13,530
from and so what we were led to is that

00:25:11,010 --> 00:25:15,750
okay so we can describe what the

00:25:13,530 --> 00:25:18,480
pointers in the source tree are through

00:25:15,750 --> 00:25:19,830
this thing called modulo MD file which

00:25:18,480 --> 00:25:24,060
is basically just a demo file with

00:25:19,830 --> 00:25:25,800
pointers and then we can kind of build

00:25:24,060 --> 00:25:28,560
that as a collective set we can build

00:25:25,800 --> 00:25:30,390
them all together and we can make them

00:25:28,560 --> 00:25:31,470
rely on each other and we know that they

00:25:30,390 --> 00:25:34,890
were built together so they'll work

00:25:31,470 --> 00:25:37,830
together and then we can ship that now

00:25:34,890 --> 00:25:39,780
unify component as a union right because

00:25:37,830 --> 00:25:41,150
nobody actually cares if they got the

00:25:39,780 --> 00:25:42,500
live XML to

00:25:41,150 --> 00:25:45,320
right what they care about is the

00:25:42,500 --> 00:25:47,510
application that depends on it right the

00:25:45,320 --> 00:25:49,520
you know which which libraries they are

00:25:47,510 --> 00:25:50,690
summer I had nobody generally that mean

00:25:49,520 --> 00:25:52,340
except for developers right we

00:25:50,690 --> 00:25:53,420
definitely don't install a library right

00:25:52,340 --> 00:25:54,890
what you're doing is installing an

00:25:53,420 --> 00:25:57,080
application and so you want to know that

00:25:54,890 --> 00:25:58,610
the unit itself works together and

00:25:57,080 --> 00:26:01,610
that's where the term module comes from

00:25:58,610 --> 00:26:04,550
is that we are trying to describe the

00:26:01,610 --> 00:26:06,920
and there's a guy right actually you can

00:26:04,550 --> 00:26:08,180
call some installable things which I

00:26:06,920 --> 00:26:12,140
also kind of like they would end up with

00:26:08,180 --> 00:26:14,090
ITU member 22 but we what we care about

00:26:12,140 --> 00:26:16,010
is the thing that is installable at the

00:26:14,090 --> 00:26:17,120
endpoint and so that's what a module is

00:26:16,010 --> 00:26:19,190
trying to describe this is trying to

00:26:17,120 --> 00:26:24,460
describe the thing rather than the

00:26:19,190 --> 00:26:26,750
individual components without losing the

00:26:24,460 --> 00:26:28,250
decomposition than our camera locks

00:26:26,750 --> 00:26:29,390
right so the decomposition is also

00:26:28,250 --> 00:26:31,880
really good because then we can share

00:26:29,390 --> 00:26:34,340
libraries across the system we can have

00:26:31,880 --> 00:26:37,730
you know simple fire what's available

00:26:34,340 --> 00:26:39,650
cetera so that's what we're trying to do

00:26:37,730 --> 00:26:42,080
with the module so we build the binaries

00:26:39,650 --> 00:26:43,940
but we build them as a unit and then we

00:26:42,080 --> 00:26:46,220
can decide what kind of artifact output

00:26:43,940 --> 00:26:48,530
types we want right now we pretty much

00:26:46,220 --> 00:26:50,780
lonely bill rpms and then we secondarily

00:26:48,530 --> 00:26:52,340
build things like containers but the

00:26:50,780 --> 00:26:55,690
flexibility is starting to be in the in

00:26:52,340 --> 00:27:00,690
destructure to do something different

00:26:55,690 --> 00:27:00,690
[Music]

00:27:01,410 --> 00:27:06,490
right so the question is what other

00:27:04,210 --> 00:27:07,960
types of third do we have a timeline for

00:27:06,490 --> 00:27:11,590
trying to deliver other types of content

00:27:07,960 --> 00:27:14,200
not really in that what we want to do is

00:27:11,590 --> 00:27:16,690
have a flexibility to do so no we didn't

00:27:14,200 --> 00:27:24,490
really have a plan that tomorrow we're

00:27:16,690 --> 00:27:27,580
gonna start shipping Jen assume somebody

00:27:24,490 --> 00:27:30,910
asked for it will okay yeah I mean so

00:27:27,580 --> 00:27:34,530
you know this means that no that's yeah

00:27:30,910 --> 00:27:37,450
there's no there's no plans exactly

00:27:34,530 --> 00:27:39,400
right so the so what we want to do is

00:27:37,450 --> 00:27:42,730
have an architecture that supported that

00:27:39,400 --> 00:27:45,910
type of change because the end of the

00:27:42,730 --> 00:27:47,500
day like the modularity stuff has some

00:27:45,910 --> 00:27:49,960
you know like everything else has some

00:27:47,500 --> 00:27:51,460
end user benefits but the goal was

00:27:49,960 --> 00:27:53,560
really about making sure that we have

00:27:51,460 --> 00:27:58,420
the flexibility in our infrastructure to

00:27:53,560 --> 00:28:00,070
adapt to what users want right because

00:27:58,420 --> 00:28:01,300
what we're trying to get to it's kind of

00:28:00,070 --> 00:28:03,670
what I was getting to it earlier in the

00:28:01,300 --> 00:28:06,310
slides is that we need a way web

00:28:03,670 --> 00:28:14,410
sleeping here I forgot to install

00:28:06,310 --> 00:28:16,810
caffeine sorry so what we're trying to

00:28:14,410 --> 00:28:18,310
do is you know enhance the flexibility

00:28:16,810 --> 00:28:20,650
but that doesn't necessarily mean we

00:28:18,310 --> 00:28:22,900
have a goal for what that flexibility

00:28:20,650 --> 00:28:27,820
should be useful we just want to open it

00:28:22,900 --> 00:28:30,220
up so yeah and then we can kind of

00:28:27,820 --> 00:28:31,960
target you know that output artifacts

00:28:30,220 --> 00:28:33,490
that we want to have one of the things

00:28:31,960 --> 00:28:37,060
that we have not gotten to yet that we

00:28:33,490 --> 00:28:38,650
wanted to get to try with atomic was can

00:28:37,060 --> 00:28:41,110
we describe the output artifact as a

00:28:38,650 --> 00:28:43,660
module Indy itself so that we can say

00:28:41,110 --> 00:28:45,940
okay you know here's the set of

00:28:43,660 --> 00:28:50,230
components that go into this container

00:28:45,940 --> 00:28:51,910
type right or this a so and so we kind

00:28:50,230 --> 00:28:54,580
of toyed around with it or whatever but

00:28:51,910 --> 00:28:55,300
you know it was a lot of work so we

00:28:54,580 --> 00:28:59,950
didn't get to it

00:28:55,300 --> 00:29:01,810
but maybe someday and really to your

00:28:59,950 --> 00:29:03,880
point right is that what we're trying to

00:29:01,810 --> 00:29:05,620
do is enable innovation around how the

00:29:03,880 --> 00:29:08,680
distribution works and how things get

00:29:05,620 --> 00:29:10,470
done not so much because we have a

00:29:08,680 --> 00:29:13,020
particular goal

00:29:10,470 --> 00:29:15,690
instead of shipping gems tomorrow it's

00:29:13,020 --> 00:29:16,950
more about we need more flexibility and

00:29:15,690 --> 00:29:19,020
the kinds of things we build and the

00:29:16,950 --> 00:29:21,030
kinds of things we ship because the the

00:29:19,020 --> 00:29:28,380
infrastructure has changed for what we

00:29:21,030 --> 00:29:31,289
need and then lastly the goal was we

00:29:28,380 --> 00:29:35,340
wanted to we want a user to not

00:29:31,289 --> 00:29:38,130
experience any change at all unless they

00:29:35,340 --> 00:29:40,650
want something that's non-standard so

00:29:38,130 --> 00:29:45,030
you know DNF install Postgres people

00:29:40,650 --> 00:29:46,770
should just work and if they decide that

00:29:45,030 --> 00:29:49,409
they want something that is not the

00:29:46,770 --> 00:29:51,030
current version of costar sequel then

00:29:49,409 --> 00:29:53,820
they can go and choose something

00:29:51,030 --> 00:29:55,950
different you know so DMS install and

00:29:53,820 --> 00:29:58,020
this is one of the things that modules

00:29:55,950 --> 00:30:00,570
are trying to help with right is like

00:29:58,020 --> 00:30:04,230
DNS install Postgres sequel at the lead

00:30:00,570 --> 00:30:05,789
gives you the client indeed if installed

00:30:04,230 --> 00:30:07,020
I know I've got a bad word sorry

00:30:05,789 --> 00:30:11,340
Postgres sequel moves to the server

00:30:07,020 --> 00:30:13,110
maria TV gives you the client so we

00:30:11,340 --> 00:30:14,309
didn't with the profiles we're trying to

00:30:13,110 --> 00:30:16,169
make it so that you can actually know

00:30:14,309 --> 00:30:18,030
that there's client server available we

00:30:16,169 --> 00:30:20,970
know that but it will make the defaults

00:30:18,030 --> 00:30:23,700
to work as much as they do today so that

00:30:20,970 --> 00:30:25,830
if you type DNF install maria TV you get

00:30:23,700 --> 00:30:28,799
what you expect but then you can start

00:30:25,830 --> 00:30:30,840
to work on multiple versions or you can

00:30:28,799 --> 00:30:32,940
start to work on different profiles by

00:30:30,840 --> 00:30:35,490
adding a little quote-unquote syntactic

00:30:32,940 --> 00:30:37,770
sugar to your command rather than having

00:30:35,490 --> 00:30:39,990
to water in a whole new application

00:30:37,770 --> 00:30:43,020
architecture you know mechanism for

00:30:39,990 --> 00:30:47,159
doing this I think that might be all my

00:30:43,020 --> 00:30:54,960
slides yeah I can show you the Amazon

00:30:47,159 --> 00:30:56,190
links in theory go ahead the networking

00:30:54,960 --> 00:31:00,630
here is terrible and I have to bounce to

00:30:56,190 --> 00:31:02,730
another machine so yeah so you'd allude

00:31:00,630 --> 00:31:04,559
to the fact that this could open up the

00:31:02,730 --> 00:31:07,860
possibility of shipping other types of

00:31:04,559 --> 00:31:09,690
artifacts has anybody started to map out

00:31:07,860 --> 00:31:13,590
what that would look like how we could

00:31:09,690 --> 00:31:17,240
potentially achieve what the curate

00:31:13,590 --> 00:31:20,650
content stream concept was supposed to

00:31:17,240 --> 00:31:25,720
so the question is has anybody looked

00:31:20,650 --> 00:31:27,309
okay so we've back up for a little bit

00:31:25,720 --> 00:31:30,039
so one of the one of the challenges we

00:31:27,309 --> 00:31:33,000
have in Sonora land right is that the

00:31:30,039 --> 00:31:36,309
application like application languages

00:31:33,000 --> 00:31:39,669
have many many libraries right huge

00:31:36,309 --> 00:31:43,240
numbers of them of huge variability and

00:31:39,669 --> 00:31:46,750
quality you know as some of you might

00:31:43,240 --> 00:31:50,380
remember you know NPM lost one

00:31:46,750 --> 00:31:54,539
particular library and the entire

00:31:50,380 --> 00:31:56,740
node.js will tell or for a few days so

00:31:54,539 --> 00:31:58,780
there's all these libraries kind of

00:31:56,740 --> 00:32:00,400
coming out coming out and some of them

00:31:58,780 --> 00:32:03,220
continuing to maintain some zone it's

00:32:00,400 --> 00:32:04,600
ever it's basically impossible for a

00:32:03,220 --> 00:32:07,470
distribution of Linux distribution to

00:32:04,600 --> 00:32:10,870
keep up with that we have some of those

00:32:07,470 --> 00:32:13,150
languages are very friendly to us and

00:32:10,870 --> 00:32:15,850
try to help us do that so Python is a

00:32:13,150 --> 00:32:19,179
great example right so Python tries very

00:32:15,850 --> 00:32:21,850
hard to make it easy for distributions

00:32:19,179 --> 00:32:24,340
to distribute them aware has things like

00:32:21,850 --> 00:32:26,830
Ruby don't they do that's not their goal

00:32:24,340 --> 00:32:28,210
you know again you know it just works

00:32:26,830 --> 00:32:32,049
why would you need a distribution in the

00:32:28,210 --> 00:32:35,440
middle so there was a push a couple of

00:32:32,049 --> 00:32:36,490
years ago - can we stop packaging those

00:32:35,440 --> 00:32:39,789
things as rpms

00:32:36,490 --> 00:32:41,559
and instead find a way to make them

00:32:39,789 --> 00:32:45,039
available through the normal federal

00:32:41,559 --> 00:32:47,799
infrastructure such that the end user

00:32:45,039 --> 00:32:50,919
can make choices about getting any you

00:32:47,799 --> 00:32:54,220
know library that they want but also

00:32:50,919 --> 00:32:56,770
understand its quality so provide the

00:32:54,220 --> 00:33:00,280
and money thing sir and licensing and

00:32:56,770 --> 00:33:02,049
licensing so and that's actually another

00:33:00,280 --> 00:33:04,120
example why we can't like automatically

00:33:02,049 --> 00:33:06,280
generate our camps from gems for example

00:33:04,120 --> 00:33:09,429
is that it's missing data that we

00:33:06,280 --> 00:33:13,720
require to create rpms or it's allowed

00:33:09,429 --> 00:33:15,159
to miss be missing days power so we were

00:33:13,720 --> 00:33:16,720
trying to paralyze when we could we

00:33:15,159 --> 00:33:19,120
share that information

00:33:16,720 --> 00:33:20,260
the user from directly from the upstream

00:33:19,120 --> 00:33:26,290
so that we wouldn't have to kind of keep

00:33:20,260 --> 00:33:28,990
on and one of the ideas there was can we

00:33:26,290 --> 00:33:30,490
use modules to just help solve at our

00:33:28,990 --> 00:33:33,610
teens this infrastructure to help solve

00:33:30,490 --> 00:33:35,730
that and I would say yes the idea has

00:33:33,610 --> 00:33:39,130
been considered but not really pursued

00:33:35,730 --> 00:33:41,710
and but if anybody now here wants to

00:33:39,130 --> 00:33:43,570
start a project doing content

00:33:41,710 --> 00:33:46,390
distribution like that I would be very

00:33:43,570 --> 00:33:50,410
excited about it because it'd be really

00:33:46,390 --> 00:33:53,320
useful to have the information that you

00:33:50,410 --> 00:33:56,440
know like this MDM library how much is

00:33:53,320 --> 00:33:58,180
it used you know who's they used by and

00:33:56,440 --> 00:34:01,240
you know what is its license its era

00:33:58,180 --> 00:34:03,490
without having to have had an RPM

00:34:01,240 --> 00:34:06,060
maintainer look dig all that information

00:34:03,490 --> 00:34:06,060
up right

00:34:06,270 --> 00:34:15,870
sorry sue oh sorry was gonna show you

00:34:09,190 --> 00:34:15,870
guys a demo in theory see how long yeah

00:34:22,809 --> 00:34:26,859
sorry the length of where it goes

00:34:34,010 --> 00:34:38,139
it's hard to run dinero asses 15

00:34:45,880 --> 00:34:50,530
we throw this

00:34:55,020 --> 00:35:00,670
yes yeah all right

00:34:56,650 --> 00:35:06,040
they go yeah all right so this is just

00:35:00,670 --> 00:35:07,810
all I did was download there some sort

00:35:06,040 --> 00:35:10,720
of a I can't proper typist KVM I

00:35:07,810 --> 00:35:14,640
assume and you know kind of started

00:35:10,720 --> 00:35:14,640
hanging around so if you do

00:35:25,810 --> 00:35:34,190
oh my god this may be too slow so oddly

00:35:31,430 --> 00:35:38,120
enough it seems familiar kind of looks

00:35:34,190 --> 00:35:40,070
like the DNS module list so basically

00:35:38,120 --> 00:35:42,410
these are all the different topics you

00:35:40,070 --> 00:35:45,320
have it's it's a little unclear to me

00:35:42,410 --> 00:35:47,900
whether it's a topic and then it's a

00:35:45,320 --> 00:35:50,270
version of that topic or if the versions

00:35:47,900 --> 00:35:53,060
are topics themselves like I just don't

00:35:50,270 --> 00:35:54,410
quite come to shame their lingo but it's

00:35:53,060 --> 00:35:58,520
probably some immediate not because it's

00:35:54,410 --> 00:36:00,170
bad so if you see there I actually have

00:35:58,520 --> 00:36:02,180
three versions of Postgres enabled

00:36:00,170 --> 00:36:05,150
because I wanted to kind of see what

00:36:02,180 --> 00:36:07,850
would happen and it will now pick

00:36:05,150 --> 00:36:11,870
Postgres tech right because it will

00:36:07,850 --> 00:36:15,770
always choose latest and but you kind of

00:36:11,870 --> 00:36:18,430
just you know do what is actually just

00:36:15,770 --> 00:36:21,980
see if I can do it this way might be

00:36:18,430 --> 00:36:24,260
easier yeah so you just see I just

00:36:21,980 --> 00:36:26,600
enable it right I mean it's not you know

00:36:24,260 --> 00:36:28,730
not that complex not just similar from

00:36:26,600 --> 00:36:32,210
what we have and then I would go along

00:36:28,730 --> 00:36:34,360
and you saw it and you know and then I'd

00:36:32,210 --> 00:36:38,210
get the version that I was looking for

00:36:34,360 --> 00:36:41,870
the thing is that when you what I think

00:36:38,210 --> 00:36:44,080
is kind of interesting is if I trying to

00:36:41,870 --> 00:36:44,080
do

00:36:51,990 --> 00:37:00,089
yeah so if you notice the top line there

00:36:54,800 --> 00:37:03,270
so this is kind of interesting but

00:37:00,089 --> 00:37:06,240
basically so if you have installed a

00:37:03,270 --> 00:37:08,460
library or a thing from the topic and

00:37:06,240 --> 00:37:11,609
then you know kind of remove it and

00:37:08,460 --> 00:37:13,319
disable it I'm not actually sure what

00:37:11,609 --> 00:37:17,550
they're worried about but they seem

00:37:13,319 --> 00:37:18,900
worried that this may not work so like

00:37:17,550 --> 00:37:20,250
you know as far as I know

00:37:18,900 --> 00:37:22,950
young D and a half right should be able

00:37:20,250 --> 00:37:23,880
to handle this pretty well without too

00:37:22,950 --> 00:37:26,450
much trouble

00:37:23,880 --> 00:37:26,450
now I'm curious

00:37:32,610 --> 00:37:40,890
but I saw in their document teeth I

00:37:35,130 --> 00:37:41,940
can't say all the commercially so it

00:37:40,890 --> 00:37:43,830
does say that they have D enough

00:37:41,940 --> 00:37:55,080
available to but I have to go David

00:37:43,830 --> 00:38:05,010
figure it out right right yeah I said at

00:37:55,080 --> 00:38:07,380
some point doctors right so the state is

00:38:05,010 --> 00:38:09,420
just that they replace the other version

00:38:07,380 --> 00:38:12,470
of it available but if you notice I was

00:38:09,420 --> 00:38:14,670
doing some searches before not

00:38:12,470 --> 00:38:16,890
everything that is a topic is available

00:38:14,670 --> 00:38:18,600
currently so there's no gift for example

00:38:16,890 --> 00:38:21,840
the only gift you can get us through

00:38:18,600 --> 00:38:24,210
this topic but Tomcat there is a like a

00:38:21,840 --> 00:38:26,700
based version available and then there

00:38:24,210 --> 00:38:31,590
is a topic for a tomcat 85 I think that

00:38:26,700 --> 00:38:33,600
the base one is seven maybe so it's not

00:38:31,590 --> 00:38:35,640
necessarily required that the thing

00:38:33,600 --> 00:38:38,210
already exist in the naval rods it's

00:38:35,640 --> 00:38:38,210
both

00:38:46,150 --> 00:38:51,500
so okay so the question is what happens

00:38:49,190 --> 00:38:53,750
to the base the Tomcat 7 that's

00:38:51,500 --> 00:38:58,490
available in the base when you enable

00:38:53,750 --> 00:39:00,559
the Tomcat P topic it's actually exactly

00:38:58,490 --> 00:39:03,829
what would happen if you got Tomcat eat

00:39:00,559 --> 00:39:06,140
from our p.m. fusion is that you just

00:39:03,829 --> 00:39:08,150
now have two repositories one has a

00:39:06,140 --> 00:39:14,420
higher-end ER and so you get the higher

00:39:08,150 --> 00:39:16,220
in the air that's it good mostly just

00:39:14,420 --> 00:39:19,510
commentary I find interesting that make

00:39:16,220 --> 00:39:22,760
desktop is one of X but rust is just one

00:39:19,510 --> 00:39:25,730
yeah so the comment is basically that

00:39:22,760 --> 00:39:29,319
the the naming of the versions here

00:39:25,730 --> 00:39:33,020
right so mate desktop is one dot X and

00:39:29,319 --> 00:39:34,640
one yeah so that rust use uses a numeral

00:39:33,020 --> 00:39:37,579
one I actually think we're gonna have

00:39:34,640 --> 00:39:42,020
the same problem in much later and well

00:39:37,579 --> 00:39:47,359
it's good at that so the idea is that

00:39:42,020 --> 00:39:49,579
some things are good about basically

00:39:47,359 --> 00:39:52,430
doing like Z streaming only bug fixes

00:39:49,579 --> 00:39:54,200
right Y string being your backwards

00:39:52,430 --> 00:39:57,609
compatible and X being you know major

00:39:54,200 --> 00:40:01,790
changes not everything PHP for example

00:39:57,609 --> 00:40:05,329
there are breaking changes between PHP y

00:40:01,790 --> 00:40:07,750
versus so the naming convention you end

00:40:05,329 --> 00:40:12,020
up with is what policy do they follow

00:40:07,750 --> 00:40:13,220
and so rust in theory and I'm not sure

00:40:12,020 --> 00:40:15,799
if these were good choices or not for

00:40:13,220 --> 00:40:18,470
the individual examples but rust in

00:40:15,799 --> 00:40:21,650
theory is doing a good job of only doing

00:40:18,470 --> 00:40:24,730
breaking changes on X's and make that

00:40:21,650 --> 00:40:30,650
stop it's only doing a good job of why's

00:40:24,730 --> 00:40:33,049
that make sense yeah so a patsy actually

00:40:30,650 --> 00:40:35,390
has this problem too even though the

00:40:33,049 --> 00:40:37,880
like they are actually really good about

00:40:35,390 --> 00:40:40,099
not doing breaking changes on minor

00:40:37,880 --> 00:40:44,390
versions people don't trust them so

00:40:40,099 --> 00:40:48,150
people really want Apache HTTP 2.2 vs.

00:40:44,390 --> 00:40:50,279
2.6 so you know we 10

00:40:48,150 --> 00:40:53,190
use the minor version never - sorry go

00:40:50,279 --> 00:40:54,299
ahead no my point was just that if it is

00:40:53,190 --> 00:40:58,770
a breaking change it should be a

00:40:54,299 --> 00:41:00,240
separate screen right so the statement

00:40:58,770 --> 00:41:04,079
is that if it's a reeking change to be a

00:41:00,240 --> 00:41:07,470
separate stream yes so this is actually

00:41:04,079 --> 00:41:10,380
what's more equivalent to our streams so

00:41:07,470 --> 00:41:12,930
we would call the the module itself mate

00:41:10,380 --> 00:41:16,829
desktop and then we would have a stream

00:41:12,930 --> 00:41:18,180
that was 1.19 like this actually this is

00:41:16,829 --> 00:41:19,650
where the thing I was talking about

00:41:18,180 --> 00:41:24,809
really what happened so you would have

00:41:19,650 --> 00:41:26,309
maybe 1.19 and 1.20 as two separate

00:41:24,809 --> 00:41:28,890
streams because you didn't trust the

00:41:26,309 --> 00:41:30,869
live versions yeah so my point was so

00:41:28,890 --> 00:41:33,119
you have like PostgreSQL 96 and that's

00:41:30,869 --> 00:41:34,770
like a stream that that tracks something

00:41:33,119 --> 00:41:37,950
that will have Z stream updates

00:41:34,770 --> 00:41:40,710
whereas mate desktop doesn't have a 1.19

00:41:37,950 --> 00:41:42,750
in a 1.20 but pretending that those are

00:41:40,710 --> 00:41:45,119
breaking changes I just thought the

00:41:42,750 --> 00:41:47,130
inconsistent naming was odd well so this

00:41:45,119 --> 00:41:48,809
does not seem to follow it doesn't add

00:41:47,130 --> 00:41:51,270
them well so their common vision is that

00:41:48,809 --> 00:41:52,740
the naming is odd and I will also point

00:41:51,270 --> 00:41:55,039
out though personally because they're

00:41:52,740 --> 00:41:57,660
using naming work so they need to inject

00:41:55,039 --> 00:42:00,089
information into the name no it gives

00:41:57,660 --> 00:42:03,599
you what how to choose the right thing

00:42:00,089 --> 00:42:05,910
yeah and observe one Ivan said we're

00:42:03,599 --> 00:42:09,140
missing we're talking past each other

00:42:05,910 --> 00:42:09,140
all right very good

00:42:11,480 --> 00:42:16,160
yeah it doesn't follow any convention

00:42:18,470 --> 00:42:27,450
it's Brendan's turn so it's tempting as

00:42:23,160 --> 00:42:29,520
it is to debug Amazon nomenclature do we

00:42:27,450 --> 00:42:31,799
have good guidance for stream names and

00:42:29,520 --> 00:42:33,809
photos we're starting this so there's no

00:42:31,799 --> 00:42:36,240
questions do we have

00:42:33,809 --> 00:42:39,420
consistent or do we have policy or

00:42:36,240 --> 00:42:40,950
whatever documentation around how to

00:42:39,420 --> 00:42:45,960
mean things that are related to

00:42:40,950 --> 00:42:48,390
modularity we have basically a working

00:42:45,960 --> 00:42:53,210
draft it's not it's not approved yet

00:42:48,390 --> 00:42:54,490
it's closed and it's mind-boggling how

00:42:53,210 --> 00:42:58,210
mess

00:42:54,490 --> 00:42:59,619
it got so quickly so literally so I'm

00:42:58,210 --> 00:43:02,289
talking about the different profiles for

00:42:59,619 --> 00:43:03,339
example and when you talk about a

00:43:02,289 --> 00:43:06,520
database rain it's pretty easy

00:43:03,339 --> 00:43:09,400
client-server right but let's talk about

00:43:06,520 --> 00:43:11,410
say Apache or something like that where

00:43:09,400 --> 00:43:13,089
you might have a def version versus the

00:43:11,410 --> 00:43:16,930
production version yeah we literally

00:43:13,089 --> 00:43:19,510
have dev devel development all meaning

00:43:16,930 --> 00:43:23,980
the same thing on different profiles of

00:43:19,510 --> 00:43:26,440
different models so yes we have a

00:43:23,980 --> 00:43:29,589
working draft no it is not implemented

00:43:26,440 --> 00:43:31,299
and oh my god it's good so that we have

00:43:29,589 --> 00:43:34,390
this convention the other problem we

00:43:31,299 --> 00:43:37,260
have when we say global point is is that

00:43:34,390 --> 00:43:42,039
sometimes we are gonna want to names

00:43:37,260 --> 00:43:43,869
modules by with some bit of mingling by

00:43:42,039 --> 00:43:46,630
using some versioning in there for

00:43:43,869 --> 00:43:48,700
example Python where we might want to do

00:43:46,630 --> 00:43:51,609
allow for parallel install ability

00:43:48,700 --> 00:43:53,980
because first of all pythons are

00:43:51,609 --> 00:43:56,200
tolerated second we have a Python that

00:43:53,980 --> 00:43:57,940
we used as part of the u.s. that is not

00:43:56,200 --> 00:44:00,609
necessarily the same as the Python that

00:43:57,940 --> 00:44:02,559
the user wants to use so we need

00:44:00,609 --> 00:44:09,369
guidance on that as well

00:44:02,559 --> 00:44:12,010
so that people do right but I want

00:44:09,369 --> 00:44:14,440
consistency in the naming in how you

00:44:12,010 --> 00:44:17,260
name the version of the names of the

00:44:14,440 --> 00:44:19,599
module so that if it comes up again they

00:44:17,260 --> 00:44:28,059
don't get inconsistent that's all but

00:44:19,599 --> 00:44:31,890
sorry good yeah really it should be the

00:44:28,059 --> 00:44:31,890
next few weeks yeah

00:44:38,550 --> 00:44:44,320
yes that's in there too

00:44:40,630 --> 00:44:47,230
yeah any restrictions I mean it's policy

00:44:44,320 --> 00:44:49,420
that we expect to change you know it may

00:44:47,230 --> 00:44:50,830
not be 100% right the first try but we

00:44:49,420 --> 00:44:53,950
got it going to service something and

00:44:50,830 --> 00:44:55,750
say here is the mechanism by how you

00:44:53,950 --> 00:44:57,550
should choose your screen names and what

00:44:55,750 --> 00:44:59,950
and how you should you know separated

00:44:57,550 --> 00:45:02,110
with hyphens or whatever just so that we

00:44:59,950 --> 00:45:27,790
get consistency we may want to change it

00:45:02,110 --> 00:45:30,220
over time but you know well let's say I

00:45:27,790 --> 00:45:32,960
want you to install an Xcode and some

00:45:30,220 --> 00:45:38,150
other PHP application and

00:45:32,960 --> 00:45:42,619
means PHP box one needs to php5 two or

00:45:38,150 --> 00:45:45,260
whatever when I'm used traditional

00:45:42,619 --> 00:45:49,099
package management than its defined like

00:45:45,260 --> 00:45:51,050
this with the relationship to other

00:45:49,099 --> 00:45:53,180
testers and thus dependencies of course

00:45:51,050 --> 00:45:55,940
this to make asana conflict and them

00:45:53,180 --> 00:46:01,910
both or at least one of the applications

00:45:55,940 --> 00:46:05,569
program is there any intention to change

00:46:01,910 --> 00:46:06,859
this or is it just so immature para is

00:46:05,569 --> 00:46:08,569
so basically the problems either two

00:46:06,859 --> 00:46:12,230
different applications they're not using

00:46:08,569 --> 00:46:13,760
the same shared libraries so we refer to

00:46:12,230 --> 00:46:16,819
that problem is the parallel install

00:46:13,760 --> 00:46:19,280
ability problem and there is no intent

00:46:16,819 --> 00:46:21,650
to fix that at the moment you should go

00:46:19,280 --> 00:46:22,910
use two different user spaces and the

00:46:21,650 --> 00:46:24,140
reason I've been using the term user

00:46:22,910 --> 00:46:26,119
space is right so that could be in

00:46:24,140 --> 00:46:27,440
containers it could mean DM to be you

00:46:26,119 --> 00:46:30,589
know kind of whatever mechanism you want

00:46:27,440 --> 00:46:34,280
to use but what I can help you with is

00:46:30,589 --> 00:46:36,470
that you need th p5n PHP 6 they'll both

00:46:34,280 --> 00:46:38,329
be available so when you build a

00:46:36,470 --> 00:46:40,700
container to do both applications you

00:46:38,329 --> 00:46:42,160
can actually get those applications both

00:46:40,700 --> 00:46:45,200
of them even though they're not using

00:46:42,160 --> 00:46:46,609
the same versions and things the other

00:46:45,200 --> 00:46:48,650
thing that's kind of interesting here

00:46:46,609 --> 00:46:52,400
too is because we are using this

00:46:48,650 --> 00:46:56,720
defaults infrastructure if you have a

00:46:52,400 --> 00:47:00,200
container that is you know using PHP and

00:46:56,720 --> 00:47:02,059
you know that you want it to walk you

00:47:00,200 --> 00:47:03,650
know major versions or you want it to

00:47:02,059 --> 00:47:05,720
walk like something you want to walk me

00:47:03,650 --> 00:47:08,089
into versions because we are doing this

00:47:05,720 --> 00:47:11,750
default stuff you can actually inject a

00:47:08,089 --> 00:47:14,180
different file into XE with a different

00:47:11,750 --> 00:47:17,450
set of defaults than what is standard so

00:47:14,180 --> 00:47:21,799
when in your docker file you can say DNF

00:47:17,450 --> 00:47:25,160
install PHP and you'll just get the

00:47:21,799 --> 00:47:26,089
right version so that's also kind of

00:47:25,160 --> 00:47:28,099
cool

00:47:26,089 --> 00:47:33,290
I think I don't wants me to stop I can't

00:47:28,099 --> 00:47:35,530
tell so but yeah yeah thank you thanks

00:47:33,290 --> 00:47:35,530
coming

00:47:38,570 --> 00:47:41,729

YouTube URL: https://www.youtube.com/watch?v=6cVTs7J13l8


