Title: Flock 2018 - Fedora and Snaps: A two year retrospective and an exciting future!
Publication date: 2018-09-08
Playlist: Flock 2018
Description: 
	Friday, August 10, 2018 
11:20am - 12:10pm
@Hamburg 1+2

Talk: Fedora and Snaps: A two year retrospective and an exciting future!
Presenters: Neal Gompa, Zygmunt Krynicki

Description: Over the last two years, we've gone from having zero support for using snaps to having almost full runtime support. For this aspect, this will be a retrospective of how that happened, what went well, and what went poorly. We'll also talk about some of the interesting aspects of snaps and the challenges in supporting Fedora from an upstream perspective, and how we work closely with the upstream Snapcraft group to ensure Fedora is a top-tier supported platform.

Now that we have support for running snaps in Fedora, it's time to make the next logical leap: building Fedora-based snaps! We'll talk about what is going on upstream to enable this, and what we're doing within Fedora to make it possible so that anyone can build a snap using Fedora content and ship the latest and greatest software leveraging the Fedora ecosystem to be used on any distribution!

This will also include a short demo of a Fedora-based snap to show off the possibility.
Captions: 
	00:00:00,860 --> 00:00:04,890
hello people thank you for coming I'm as

00:00:04,080 --> 00:00:06,690
ignorant this is new

00:00:04,890 --> 00:00:10,650
hello I'm gonna talk about fedora and

00:00:06,690 --> 00:00:12,300
snaps obviously so we're both of us

00:00:10,650 --> 00:00:13,559
gonna talk we haven't rehearsed so this

00:00:12,300 --> 00:00:15,480
is not gonna work very well so I'm just

00:00:13,559 --> 00:00:20,130
gonna let Neil talk until I interrupt

00:00:15,480 --> 00:00:23,850
him okay go ahead so Wow

00:00:20,130 --> 00:00:26,010
so my name is Neil that is sigmund over

00:00:23,850 --> 00:00:27,480
there many of you know me because I've

00:00:26,010 --> 00:00:30,390
been involved into our community for

00:00:27,480 --> 00:00:32,910
almost a little over a decade now Fedora

00:00:30,390 --> 00:00:35,579
I'm the Fedora packager contributor I'm

00:00:32,910 --> 00:00:37,950
also involved in mafia openSUSE open

00:00:35,579 --> 00:00:40,079
Mandriva occasionally you will see my

00:00:37,950 --> 00:00:43,379
name show up randomly in Debian things

00:00:40,079 --> 00:00:45,420
hopefully not too often but it shows up

00:00:43,379 --> 00:00:47,940
every once in a while I'm a contributor

00:00:45,420 --> 00:00:49,980
to rpm DNF open build service Kouji

00:00:47,940 --> 00:00:54,000
zipper the word all the related projects

00:00:49,980 --> 00:00:56,190
in that particular space and I guess for

00:00:54,000 --> 00:00:58,859
completeness I professionally am a

00:00:56,190 --> 00:01:01,890
DevOps engineer at data incorporated and

00:00:58,859 --> 00:01:05,220
my Twitter email address v1 email me and

00:01:01,890 --> 00:01:07,729
gum pad Fedora project at org Sigmund

00:01:05,220 --> 00:01:10,140
yeah so I'm with canonical I've been

00:01:07,729 --> 00:01:11,700
various places before but essentially

00:01:10,140 --> 00:01:14,490
here I'm representing the snap craft

00:01:11,700 --> 00:01:18,210
project and I'm working on snappy since

00:01:14,490 --> 00:01:19,619
2016 and yeah so there's been lot of

00:01:18,210 --> 00:01:23,310
stuff you can Google about me but that's

00:01:19,619 --> 00:01:25,770
not that interesting I think that's it

00:01:23,310 --> 00:01:27,960
so just because Zigman keeps forgetting

00:01:25,770 --> 00:01:31,590
us he's technically officially the cross

00:01:27,960 --> 00:01:33,900
distro guy and he's the guy who does all

00:01:31,590 --> 00:01:35,490
the confinement crap and so he's I get

00:01:33,900 --> 00:01:41,850
to bug him all the time when stuff

00:01:35,490 --> 00:01:45,540
doesn't work it's a team effort so

00:01:41,850 --> 00:01:50,010
so what are snaps so sis some of the

00:01:45,540 --> 00:01:53,130
boilerplate e stuff that that he uses

00:01:50,010 --> 00:01:57,210
that he pulled from the website from

00:01:53,130 --> 00:01:58,619
snap craft I oh but it basically is you

00:01:57,210 --> 00:02:02,130
know just squash a fast file system

00:01:58,619 --> 00:02:04,170
thingies that contain all the code of

00:02:02,130 --> 00:02:05,550
your application and hopefully is

00:02:04,170 --> 00:02:07,350
minimally linked to other things but can

00:02:05,550 --> 00:02:10,020
be connected to each other to provide

00:02:07,350 --> 00:02:13,709
something marginally useful kind of like

00:02:10,020 --> 00:02:16,230
bundles of bundles hopefully it's easy

00:02:13,709 --> 00:02:18,510
to use and easy to set up and easy to

00:02:16,230 --> 00:02:20,070
make that's the hope anyway this is the

00:02:18,510 --> 00:02:21,750
technical view yeah this is you know

00:02:20,070 --> 00:02:25,080
this is a squash efest read-only

00:02:21,750 --> 00:02:26,430
confined you know tries to be simple but

00:02:25,080 --> 00:02:28,530
really I think the point of a snaps is

00:02:26,430 --> 00:02:30,060
just the ship software like raise your

00:02:28,530 --> 00:02:34,739
hand if you ship software on Linux

00:02:30,060 --> 00:02:37,110
yourself to users okay not everyone's

00:02:34,739 --> 00:02:38,880
holding their hand up if this was me

00:02:37,110 --> 00:02:40,410
talking to people in any other community

00:02:38,880 --> 00:02:42,900
everyone would be holding your hand up

00:02:40,410 --> 00:02:47,580
because they can just do it so we'd like

00:02:42,900 --> 00:02:49,709
to make that possible as well so these

00:02:47,580 --> 00:02:52,830
are some of the popular snaps you'll

00:02:49,709 --> 00:02:54,570
notice you know to some instead not all

00:02:52,830 --> 00:02:56,850
of them are actually free and open

00:02:54,570 --> 00:02:58,739
source software but you know apparently

00:02:56,850 --> 00:03:00,810
they don't discriminate so here you go

00:02:58,739 --> 00:03:03,329
there's stuff that's good and nice and

00:03:00,810 --> 00:03:06,120
fun and stuff that just makes you want

00:03:03,329 --> 00:03:07,829
to cry inside and one thing that I think

00:03:06,120 --> 00:03:09,420
is really important to highlight is that

00:03:07,829 --> 00:03:11,850
we're trying to make people ship

00:03:09,420 --> 00:03:14,070
software not through intermediate people

00:03:11,850 --> 00:03:16,079
like distributions we really want them

00:03:14,070 --> 00:03:20,160
ship the ship the software themselves so

00:03:16,079 --> 00:03:22,350
not all of these are shipped by the

00:03:20,160 --> 00:03:24,360
upstream people I think maybe minecraft

00:03:22,350 --> 00:03:25,980
is nuts and the rest is actually

00:03:24,360 --> 00:03:27,120
shipping directly from the people who

00:03:25,980 --> 00:03:28,920
make the software in the first place so

00:03:27,120 --> 00:03:30,540
I think this is the thing I wanted to

00:03:28,920 --> 00:03:32,820
highlight this is really trying to make

00:03:30,540 --> 00:03:34,709
a funnel to users from the people making

00:03:32,820 --> 00:03:36,570
the software in the first place and we

00:03:34,709 --> 00:03:37,980
have of course you know the big part of

00:03:36,570 --> 00:03:40,739
this is because it's about making the

00:03:37,980 --> 00:03:43,110
development and the shipping of software

00:03:40,739 --> 00:03:44,070
easy and useful there's obviously going

00:03:43,110 --> 00:03:45,720
to be integration with various

00:03:44,070 --> 00:03:48,060
developments tax including you know

00:03:45,720 --> 00:03:50,100
weird IOT things like robot OS and moose

00:03:48,060 --> 00:03:51,419
and you know horrible things that make

00:03:50,100 --> 00:03:52,919
you want to cry when you look at how the

00:03:51,419 --> 00:03:53,819
code is actually organized how you build

00:03:52,919 --> 00:03:56,310
stuff

00:03:53,819 --> 00:03:57,840
we want to abstract away the crappy yep

00:03:56,310 --> 00:04:00,329
so this part is coming from the build

00:03:57,840 --> 00:04:02,280
part of snaps which is not snap d it's a

00:04:00,329 --> 00:04:03,480
sister project cut snap craft but

00:04:02,280 --> 00:04:04,650
essentially the idea is that people

00:04:03,480 --> 00:04:06,180
already are using this stuff that is

00:04:04,650 --> 00:04:07,590
natural for whatever their environment

00:04:06,180 --> 00:04:09,510
they're working with like Python has its

00:04:07,590 --> 00:04:11,250
own stack for you know doing stuff so

00:04:09,510 --> 00:04:12,659
instead of like coming up with a you

00:04:11,250 --> 00:04:14,879
know way of doing things if you have to

00:04:12,659 --> 00:04:16,259
learn we're just like essentially asking

00:04:14,879 --> 00:04:17,669
them to point us to the thing they're

00:04:16,259 --> 00:04:19,380
familiar and comfortable but in the

00:04:17,669 --> 00:04:21,630
first place so the whole packaging

00:04:19,380 --> 00:04:22,949
experience is much easier and one thing

00:04:21,630 --> 00:04:24,479
which is not clear from all of this this

00:04:22,949 --> 00:04:26,610
is not another packaging format without

00:04:24,479 --> 00:04:28,800
Bible you have to read which is the

00:04:26,610 --> 00:04:30,900
policy that makes it work there is

00:04:28,800 --> 00:04:33,710
nothing to read this is essentially a

00:04:30,900 --> 00:04:37,139
Wild West free-for-all because of the

00:04:33,710 --> 00:04:38,729
changing the mechanism this works so you

00:04:37,139 --> 00:04:41,009
don't have to adhere to a policy because

00:04:38,729 --> 00:04:43,020
well if you don't nothing breaks it's

00:04:41,009 --> 00:04:45,120
not that all of these live next to each

00:04:43,020 --> 00:04:46,680
other have to be very nice and you know

00:04:45,120 --> 00:04:48,630
very gentle order they're stopped on

00:04:46,680 --> 00:04:50,060
each other's toes it's much easier to

00:04:48,630 --> 00:04:52,440
package suffer that's why we actually

00:04:50,060 --> 00:04:55,050
went through the effort to integrate all

00:04:52,440 --> 00:04:56,310
of these things because you know if we

00:04:55,050 --> 00:04:58,020
integrate but all these people still

00:04:56,310 --> 00:04:59,580
have to read them you know a 100 page

00:04:58,020 --> 00:05:00,990
manual to figure out how to package a

00:04:59,580 --> 00:05:02,490
strable program they're not going to

00:05:00,990 --> 00:05:03,630
really do it and they're not gonna go

00:05:02,490 --> 00:05:05,849
through the exercise and we wouldn't

00:05:03,630 --> 00:05:07,440
have the previous slide so I think the

00:05:05,849 --> 00:05:09,900
point is that snaps are easier to

00:05:07,440 --> 00:05:12,300
package the normal software used to be

00:05:09,900 --> 00:05:15,470
because we changed kind of how they run

00:05:12,300 --> 00:05:19,440
so we don't have to have all these rules

00:05:15,470 --> 00:05:21,389
so this is kind of the story from my

00:05:19,440 --> 00:05:23,580
part of this you know how it kind of

00:05:21,389 --> 00:05:25,470
started the conversation this is

00:05:23,580 --> 00:05:28,650
obviously a little bit of a dramatic

00:05:25,470 --> 00:05:30,120
reenactment this is a little bit of a

00:05:28,650 --> 00:05:31,949
dramatic reenactment but it was like I

00:05:30,120 --> 00:05:34,229
showed up in the snappy IRC channel

00:05:31,949 --> 00:05:35,460
after they were talking they're fanciful

00:05:34,229 --> 00:05:37,110
press release about how they wanted to

00:05:35,460 --> 00:05:39,240
make snaps like a cross distro thing I

00:05:37,110 --> 00:05:41,280
was like hey you want to help doing this

00:05:39,240 --> 00:05:42,719
I saw you know you made this stuff you

00:05:41,280 --> 00:05:44,270
made this package for fedora and it's

00:05:42,719 --> 00:05:46,560
god-awful and it doesn't actually work

00:05:44,270 --> 00:05:47,009
would you like some help and it's like

00:05:46,560 --> 00:05:48,750
awesome

00:05:47,009 --> 00:05:52,650
this guy's the guy who was working on it

00:05:48,750 --> 00:05:53,190
and he says you know I don't know what

00:05:52,650 --> 00:05:56,159
I'm doing

00:05:53,190 --> 00:05:58,830
help and I was like sure and next thing

00:05:56,159 --> 00:06:00,690
I know I'm getting a plane ticket and to

00:05:58,830 --> 00:06:02,550
go and meet him in person here in

00:06:00,690 --> 00:06:05,250
Germany first time I've ever been to

00:06:02,550 --> 00:06:07,139
Germany is because of him and you know

00:06:05,250 --> 00:06:07,529
we had fun and we figured out and that's

00:06:07,139 --> 00:06:10,979
how it

00:06:07,529 --> 00:06:12,629
started and the ongoing work that it you

00:06:10,979 --> 00:06:14,639
know Zygmunt and I've been working on

00:06:12,629 --> 00:06:17,399
have been mainly about getting them

00:06:14,639 --> 00:06:19,889
snappy releases actually a lot better a

00:06:17,399 --> 00:06:21,599
lot faster and also like we can actually

00:06:19,889 --> 00:06:23,759
catch things before they become release

00:06:21,599 --> 00:06:26,369
problems for fedora and that's always

00:06:23,759 --> 00:06:28,409
been a you know troublesome and so like

00:06:26,369 --> 00:06:29,909
I wrote an SEO lyrics policy one of my

00:06:28,409 --> 00:06:32,939
first complete policies to be quite

00:06:29,909 --> 00:06:34,409
honest and started yeah up streamed it

00:06:32,939 --> 00:06:35,849
into the codebase because it makes way

00:06:34,409 --> 00:06:37,949
more sense to have it part of that and

00:06:35,849 --> 00:06:40,739
we just you know we tested it against it

00:06:37,949 --> 00:06:42,419
we keep improving it and we've started

00:06:40,739 --> 00:06:43,469
turning on integrations now that things

00:06:42,419 --> 00:06:44,609
are actually starting to work we've

00:06:43,469 --> 00:06:46,979
started turning on integrations for

00:06:44,609 --> 00:06:49,229
desktop environments so genome software

00:06:46,979 --> 00:06:50,879
was turned on and then plasma discovered

00:06:49,229 --> 00:06:52,349
recently got switched on and the big

00:06:50,879 --> 00:06:55,259
focus for Zigman and i it has been

00:06:52,349 --> 00:06:58,469
mainly things that get weird because it

00:06:55,259 --> 00:07:00,719
expects a bun to we find them and kill

00:06:58,469 --> 00:07:02,879
them with fire and so the whole process

00:07:00,719 --> 00:07:05,969
is actually you know if you don't hate

00:07:02,879 --> 00:07:08,459
go with the passion it's actually kind

00:07:05,969 --> 00:07:10,469
of fun ish you know come and take a look

00:07:08,459 --> 00:07:15,389
and yes actually the cookies are quite

00:07:10,469 --> 00:07:18,329
good so where we are right now

00:07:15,389 --> 00:07:19,769
since Fedora 26 we've actually had snap

00:07:18,329 --> 00:07:21,899
be active available it actually was

00:07:19,769 --> 00:07:25,289
technically in the archive in Fedora 25

00:07:21,899 --> 00:07:27,449
but it was an updates but as of 26 it

00:07:25,289 --> 00:07:28,769
was part of the really GA and we've also

00:07:27,449 --> 00:07:30,179
had it so that snappy will actually

00:07:28,769 --> 00:07:34,529
activate correctly depending on your

00:07:30,179 --> 00:07:37,859
environment since 27 we had it working

00:07:34,529 --> 00:07:39,059
correctly for cloud environments so we

00:07:37,859 --> 00:07:41,539
have snap being good gnome software

00:07:39,059 --> 00:07:44,189
integration that was turned on in 26

00:07:41,539 --> 00:07:47,159
it's been improved over the last few

00:07:44,189 --> 00:07:48,539
releases so now it actually will give

00:07:47,159 --> 00:07:50,369
you the ability to select channels and

00:07:48,539 --> 00:07:51,659
tracks which are various aspects of

00:07:50,369 --> 00:07:53,759
testing different classes of the

00:07:51,659 --> 00:07:55,199
software either it's testing or it's got

00:07:53,759 --> 00:07:58,109
a different feature or some kind of

00:07:55,199 --> 00:07:59,339
configuration difference and you can and

00:07:58,109 --> 00:08:01,469
it's basically like the same kind of

00:07:59,339 --> 00:08:02,879
experience you'd expect from you know if

00:08:01,469 --> 00:08:04,469
you want to install an application from

00:08:02,879 --> 00:08:05,939
from the fedora repos or other

00:08:04,469 --> 00:08:08,249
third-party repos that have app stream

00:08:05,939 --> 00:08:09,809
data and stuff like that the some of the

00:08:08,249 --> 00:08:11,039
data is not quite there but at least

00:08:09,809 --> 00:08:13,859
it'll all show up and you can actually

00:08:11,039 --> 00:08:16,860
pick them we have for plasma discovers

00:08:13,859 --> 00:08:18,089
since plasma 5:13 it finally works

00:08:16,860 --> 00:08:19,919
enough that I'm actually comfortable

00:08:18,089 --> 00:08:21,360
with switching it on so I have plasma

00:08:19,919 --> 00:08:24,360
5:13 has been back for

00:08:21,360 --> 00:08:26,490
2:28 so it is now available there too

00:08:24,360 --> 00:08:28,469
please give it a shot start talking

00:08:26,490 --> 00:08:31,979
about it start using it pile bugs

00:08:28,469 --> 00:08:33,990
against KDE because like they nobody has

00:08:31,979 --> 00:08:36,510
it on except for us right now so we're

00:08:33,990 --> 00:08:38,909
like the guinea pigs for this it kind of

00:08:36,510 --> 00:08:40,289
works there's glitches but I'd love to

00:08:38,909 --> 00:08:43,409
hear more about what's going on in there

00:08:40,289 --> 00:08:45,000
so that we can see and improve that the

00:08:43,409 --> 00:08:46,980
bad thing right now we have no

00:08:45,000 --> 00:08:48,930
development developer story for fedora

00:08:46,980 --> 00:08:52,769
snaps yet that's something we're we're

00:08:48,930 --> 00:08:55,110
like on working on yeah there's gonna be

00:08:52,769 --> 00:08:56,910
some nice stuff like the the point of

00:08:55,110 --> 00:08:59,399
this thing is to prepare you so you can

00:08:56,910 --> 00:09:00,750
see the nice left.we cama cama put later

00:08:59,399 --> 00:09:03,750
so snap craft is the part that makes

00:09:00,750 --> 00:09:05,310
snaps buildable which you know it's like

00:09:03,750 --> 00:09:06,450
belts and suspenders it's easier to

00:09:05,310 --> 00:09:08,519
build you don't have really understand

00:09:06,450 --> 00:09:10,019
the full thing you can still build them

00:09:08,519 --> 00:09:11,790
manually but people actually use snap

00:09:10,019 --> 00:09:13,920
craft because it's nice but snap draft

00:09:11,790 --> 00:09:15,570
is like tied to the Ubuntu archive as a

00:09:13,920 --> 00:09:16,950
source from anything so you have

00:09:15,570 --> 00:09:19,140
actually want to build something the two

00:09:16,950 --> 00:09:21,540
chains coming from there so no it's it's

00:09:19,140 --> 00:09:24,089
just one thing and and when we looked at

00:09:21,540 --> 00:09:26,010
making it possible to use you know the

00:09:24,089 --> 00:09:27,899
fedora archive for that well it turned

00:09:26,010 --> 00:09:30,269
out to be extraordinarily difficult yeah

00:09:27,899 --> 00:09:31,949
that I gave up twice so the good thing

00:09:30,269 --> 00:09:33,779
is that snap graph itself has changed

00:09:31,949 --> 00:09:36,480
it's changed because it's gotten way too

00:09:33,779 --> 00:09:37,620
complex to actually work reliably so

00:09:36,480 --> 00:09:39,750
when people are on the specific

00:09:37,620 --> 00:09:41,430
configuration things would work but when

00:09:39,750 --> 00:09:42,990
people drift from that configuration and

00:09:41,430 --> 00:09:44,459
things would just stop working so the

00:09:42,990 --> 00:09:46,050
whole concept of snap prep works

00:09:44,459 --> 00:09:47,730
internally has been much simplified to

00:09:46,050 --> 00:09:49,529
essentially there is no deviation

00:09:47,730 --> 00:09:51,420
everyone would just build in a VM which

00:09:49,529 --> 00:09:53,220
is appropriate for the snap you're

00:09:51,420 --> 00:09:54,449
trying to build it the snap expects to

00:09:53,220 --> 00:09:55,470
be built in the Fedora environments just

00:09:54,449 --> 00:09:57,209
gonna build enough into our environment

00:09:55,470 --> 00:09:58,980
it's just gonna work fine so it's

00:09:57,209 --> 00:10:00,360
actually possible to take you know take

00:09:58,980 --> 00:10:01,470
a snap profile and hand it off to

00:10:00,360 --> 00:10:02,550
someone is that going to build it

00:10:01,470 --> 00:10:03,779
they're gonna get a working package

00:10:02,550 --> 00:10:06,269
instead of something that doesn't work

00:10:03,779 --> 00:10:08,070
right so that actually allows us to make

00:10:06,269 --> 00:10:09,750
the fedora part of it possible because

00:10:08,070 --> 00:10:12,269
it's both easier to do internally in

00:10:09,750 --> 00:10:13,680
snap craft and because we have done

00:10:12,269 --> 00:10:17,730
something cool which you're gonna come

00:10:13,680 --> 00:10:21,000
to soon like did a nice lead on here so

00:10:17,730 --> 00:10:22,829
like where we're going they're supposed

00:10:21,000 --> 00:10:24,449
to be there there's there's a super nice

00:10:22,829 --> 00:10:26,220
emoji it'll probably show up when I like

00:10:24,449 --> 00:10:28,290
export the slides and put it up for

00:10:26,220 --> 00:10:30,360
people to look at later but just imagine

00:10:28,290 --> 00:10:32,069
like a smiling angel with a halo on top

00:10:30,360 --> 00:10:34,110
you know that that's what it's supposed

00:10:32,069 --> 00:10:34,980
to be you know whole the whole thing

00:10:34,110 --> 00:10:36,990
we've been working on

00:10:34,980 --> 00:10:39,300
since everything is now running you know

00:10:36,990 --> 00:10:41,070
more or less okay there's there's some

00:10:39,300 --> 00:10:42,660
ugly caveats with you know security

00:10:41,070 --> 00:10:44,490
confinement and stuff but you know we're

00:10:42,660 --> 00:10:45,660
getting we're working through those the

00:10:44,490 --> 00:10:47,579
big thing that we're working on right

00:10:45,660 --> 00:10:49,860
now is making Fedora first-class citizen

00:10:47,579 --> 00:10:51,930
that means including people making

00:10:49,860 --> 00:10:53,940
fedora a preferential source for

00:10:51,930 --> 00:10:55,709
building snaps and shipping them because

00:10:53,940 --> 00:10:58,320
a lot of times when people want is the

00:10:55,709 --> 00:11:00,269
latest and greatest stacks and today as

00:10:58,320 --> 00:11:02,070
Fedora as it is is actually an excellent

00:11:00,269 --> 00:11:04,529
source for all these things we want to

00:11:02,070 --> 00:11:06,510
make it the way people want to build

00:11:04,529 --> 00:11:09,420
software to release to people so that

00:11:06,510 --> 00:11:11,370
they get the first-class software they

00:11:09,420 --> 00:11:14,310
get the new stuff as it is available and

00:11:11,370 --> 00:11:15,750
it is stabilized and tested and so the

00:11:14,310 --> 00:11:17,519
testing and integration for the base

00:11:15,750 --> 00:11:20,519
snap is actually happening during this

00:11:17,519 --> 00:11:22,440
development cycle the whole hope is that

00:11:20,519 --> 00:11:24,540
we will actually be able to get all the

00:11:22,440 --> 00:11:26,310
pieces in place to make it so that

00:11:24,540 --> 00:11:28,050
within the infer that as part of release

00:11:26,310 --> 00:11:29,579
composes we will be automatically

00:11:28,050 --> 00:11:32,490
updating and pushing these out and then

00:11:29,579 --> 00:11:33,870
same to how we do for docker images and

00:11:32,490 --> 00:11:35,100
eventually hopefully I think for

00:11:33,870 --> 00:11:36,959
flat-pack they're doing something with

00:11:35,100 --> 00:11:39,620
the Fedora runtime stuff we want to have

00:11:36,959 --> 00:11:43,139
the same kind of facilities in place for

00:11:39,620 --> 00:11:45,449
for synapse and that part after that

00:11:43,139 --> 00:11:48,569
which is honestly I think probably going

00:11:45,449 --> 00:11:50,610
to be kind of the most difficult aspect

00:11:48,569 --> 00:11:52,050
and hopefully once we've got the base

00:11:50,610 --> 00:11:53,220
snap stuff done people will be

00:11:52,050 --> 00:11:55,440
interested in helping us cuz I would

00:11:53,220 --> 00:11:57,899
love to have other people like working

00:11:55,440 --> 00:11:59,940
with us on this is getting snap craft to

00:11:57,899 --> 00:12:01,860
be first class in fedora because we

00:11:59,940 --> 00:12:04,019
already have snap graft kind of packaged

00:12:01,860 --> 00:12:06,930
I can't ship it because it's basically

00:12:04,019 --> 00:12:08,850
broken but we would love to make it so

00:12:06,930 --> 00:12:11,190
that Fedora support is first-class and

00:12:08,850 --> 00:12:14,190
works so well that people will choose it

00:12:11,190 --> 00:12:16,800
over a bun to just to expand the one

00:12:14,190 --> 00:12:18,839
thing here so you may not know that if

00:12:16,800 --> 00:12:20,550
it have our applications snap the

00:12:18,839 --> 00:12:22,440
developer of that snap actually chose

00:12:20,550 --> 00:12:26,160
the base is gonna run on top up with

00:12:22,440 --> 00:12:29,100
substantially the runtime you know the

00:12:26,160 --> 00:12:32,579
libraries the the data files that it

00:12:29,100 --> 00:12:34,560
chooses to use is purse snap so I may

00:12:32,579 --> 00:12:36,329
have a system running to applications

00:12:34,560 --> 00:12:37,589
from two developers one of them is gonna

00:12:36,329 --> 00:12:38,850
run onto the do you want to run time

00:12:37,589 --> 00:12:40,829
while the other is gonna run to the

00:12:38,850 --> 00:12:42,630
Fedora runtime and they don't conflict

00:12:40,829 --> 00:12:44,910
and it with with with each other in any

00:12:42,630 --> 00:12:46,860
way and also doesn't mean that if I'm on

00:12:44,910 --> 00:12:47,950
Fedora every application I have is

00:12:46,860 --> 00:12:50,260
running on the fedora

00:12:47,950 --> 00:12:51,790
on the Fedora runtime or has to or has

00:12:50,260 --> 00:12:54,130
to be rebuilt it's just the same binary

00:12:51,790 --> 00:12:55,990
running always on all the machines but

00:12:54,130 --> 00:12:57,220
developer gets to choose what they want

00:12:55,990 --> 00:12:59,140
to like essentially they want to trust

00:12:57,220 --> 00:13:00,820
more or who has the most latest software

00:12:59,140 --> 00:13:02,350
available and as you actually develop

00:13:00,820 --> 00:13:04,330
your application you can freely switch

00:13:02,350 --> 00:13:05,800
this on you know and this releases was

00:13:04,330 --> 00:13:08,440
this thing but I actually tested this

00:13:05,800 --> 00:13:09,880
other base is actually better and I can

00:13:08,440 --> 00:13:12,010
switch and for the user since there's no

00:13:09,880 --> 00:13:14,380
you know they don't actually you know

00:13:12,010 --> 00:13:16,120
get to do anything complicated it's just

00:13:14,380 --> 00:13:18,160
an application update and there are none

00:13:16,120 --> 00:13:20,620
other release using perhaps another base

00:13:18,160 --> 00:13:23,590
so it's all smooth and integrated in a

00:13:20,620 --> 00:13:25,780
way that developers can have the tools

00:13:23,590 --> 00:13:27,190
they have they want to have from the

00:13:25,780 --> 00:13:32,380
best source they feel comfortable with

00:13:27,190 --> 00:13:35,110
and the user sees just works so demo

00:13:32,380 --> 00:13:36,940
time yet so this is gonna be a live demo

00:13:35,110 --> 00:13:39,370
where I will show you some something

00:13:36,940 --> 00:13:42,040
pretty simple so you can try this on if

00:13:39,370 --> 00:13:43,540
you're on Fedora there are four steps

00:13:42,040 --> 00:13:48,070
I'm just gonna read it laughs people can

00:13:43,540 --> 00:13:49,930
see what I'm doing later mentally for

00:13:48,070 --> 00:13:53,740
reinstalling sanity it's not installed

00:13:49,930 --> 00:13:56,230
by default then we asked snaps D to

00:13:53,740 --> 00:13:57,760
install the Fedora 29 base snap I have

00:13:56,230 --> 00:13:59,770
to actually do it explicitly because

00:13:57,760 --> 00:14:01,630
we're not comfortable that to say this

00:13:59,770 --> 00:14:03,370
is stable so I have to do it explicitly

00:14:01,630 --> 00:14:05,110
otherwise just installing a snap that

00:14:03,370 --> 00:14:07,000
chooses to use some base which just pull

00:14:05,110 --> 00:14:09,100
in the base and I'm gonna install the

00:14:07,000 --> 00:14:11,680
hello fedora snap and for all of these

00:14:09,100 --> 00:14:13,180
snaps are nice get your URL so you can

00:14:11,680 --> 00:14:14,830
see how they're made they're super

00:14:13,180 --> 00:14:16,210
trivial to our understands you don't

00:14:14,830 --> 00:14:18,880
there'd like they're essentially made

00:14:16,210 --> 00:14:20,980
with shell and make and I run this snap

00:14:18,880 --> 00:14:22,720
using either snap run if you haven't

00:14:20,980 --> 00:14:24,550
installed snap T before you will not

00:14:22,720 --> 00:14:26,110
have to pass it up correctly so snap Ron

00:14:24,550 --> 00:14:28,120
will run it or just say hello fedora if

00:14:26,110 --> 00:14:29,470
you have before so I'm gonna type it now

00:14:28,120 --> 00:14:32,290
and you're gonna see what happens and

00:14:29,470 --> 00:14:34,840
there's no open to in any of that so I

00:14:32,290 --> 00:14:36,910
ran a snap on Fedora without boon to

00:14:34,840 --> 00:14:38,560
pieces being included so that's the

00:14:36,910 --> 00:14:40,660
thing we managed to reach this cycle

00:14:38,560 --> 00:14:41,710
most importantly while segment is

00:14:40,660 --> 00:14:44,230
running this he's running this on a

00:14:41,710 --> 00:14:45,640
laptop running Fedora 28 because there's

00:14:44,230 --> 00:14:46,750
no bunt on his computer I made sure that

00:14:45,640 --> 00:14:49,600
he made sure of that

00:14:46,750 --> 00:14:52,440
so this is this is live and in you know

00:14:49,600 --> 00:14:52,440
all the right ways

00:14:53,350 --> 00:14:57,220
Wow you can't type

00:15:01,510 --> 00:15:05,560
you know nobody can hear you right now

00:15:12,019 --> 00:15:18,860
you know he's gonna check check okay

00:15:16,420 --> 00:15:21,050
he's just gonna hold it for you

00:15:18,860 --> 00:15:22,339
be nice to Florian so the intercom

00:15:21,050 --> 00:15:24,529
addict actually shows you the

00:15:22,339 --> 00:15:25,670
information about the snap and it

00:15:24,529 --> 00:15:27,379
doesn't show you the base here

00:15:25,670 --> 00:15:28,999
unfortunately you know it knows about

00:15:27,379 --> 00:15:30,429
the basin just doesn't choose not to

00:15:28,999 --> 00:15:32,629
show it

00:15:30,429 --> 00:15:33,860
but you can see that this is just a

00:15:32,629 --> 00:15:35,149
simple hello world application there's

00:15:33,860 --> 00:15:36,259
some license there's some metadata you

00:15:35,149 --> 00:15:38,179
would see in a storativity

00:15:36,259 --> 00:15:39,529
it has some commands that exports to the

00:15:38,179 --> 00:15:40,910
system and there are some channels

00:15:39,529 --> 00:15:42,739
available so you actually you can

00:15:40,910 --> 00:15:44,269
actually choose like the stability level

00:15:42,739 --> 00:15:46,309
of this per application you want to

00:15:44,269 --> 00:15:48,709
install so right now I think I have

00:15:46,309 --> 00:15:52,610
installed version 1 so actually I have

00:15:48,709 --> 00:15:53,929
2.0 so yeah the practice of trying your

00:15:52,610 --> 00:15:55,879
demo before actually makes you leave

00:15:53,929 --> 00:15:59,540
this state again but I'm just gonna run

00:15:55,879 --> 00:16:01,639
it so you can see what happens well that

00:15:59,540 --> 00:16:03,949
was like a non-event right it just ran

00:16:01,639 --> 00:16:06,249
but there is no boon to anywhere in

00:16:03,949 --> 00:16:09,439
involved in that whole thing it was

00:16:06,249 --> 00:16:11,389
essentially creating a nother truth like

00:16:09,439 --> 00:16:14,239
a container with the Fedora root file

00:16:11,389 --> 00:16:16,369
system based on Fedora row height it had

00:16:14,239 --> 00:16:18,379
the application which is just a single C

00:16:16,369 --> 00:16:21,740
file compiled to a single exec table

00:16:18,379 --> 00:16:26,290
essentially in that space it ran it and

00:16:21,740 --> 00:16:26,290
that's what I had how can you prove it

00:16:30,380 --> 00:16:35,120
so because people are like always when

00:16:33,740 --> 00:16:36,380
they're introduced to a new technology

00:16:35,120 --> 00:16:38,060
they'd understand that you want to

00:16:36,380 --> 00:16:40,850
understand how it works by playing out

00:16:38,060 --> 00:16:43,220
in the environment we have a way to run

00:16:40,850 --> 00:16:45,320
a shell within a within the environment

00:16:43,220 --> 00:16:47,060
of a given snap so this is now the

00:16:45,320 --> 00:16:48,770
environment in which the hello Fedora

00:16:47,060 --> 00:16:50,330
binary would execute and actually

00:16:48,770 --> 00:16:53,480
actually show you you know around what

00:16:50,330 --> 00:16:58,790
it is and it's just raw height but it's

00:16:53,480 --> 00:16:59,960
not a boon to this is a little bit

00:16:58,790 --> 00:17:01,490
hacked that version of row height

00:16:59,960 --> 00:17:02,930
because I pushed the patch to master

00:17:01,490 --> 00:17:04,160
obviously doing this I had to find a bug

00:17:02,930 --> 00:17:05,930
and snap B so this is just working

00:17:04,160 --> 00:17:07,490
around the bug but this is just a row

00:17:05,930 --> 00:17:08,720
hide OS release file except for the

00:17:07,490 --> 00:17:10,010
little hack and the whole root

00:17:08,720 --> 00:17:11,540
filesystem is essentially row height

00:17:10,010 --> 00:17:13,460
they're a bunch of things are coming

00:17:11,540 --> 00:17:15,740
from my distribution which is at our 28

00:17:13,460 --> 00:17:17,570
like my home home directory and couple

00:17:15,740 --> 00:17:19,970
of other things but essentially it is

00:17:17,570 --> 00:17:22,810
just this distribution I chose to pick

00:17:19,970 --> 00:17:22,810
as my run time

00:17:30,120 --> 00:17:38,130
and the application actually is mounted

00:17:31,830 --> 00:17:40,980
here so this is where this is where the

00:17:38,130 --> 00:17:42,630
entire application lives and this is

00:17:40,980 --> 00:17:44,820
another file system and actually you can

00:17:42,630 --> 00:17:46,710
see that there's not that many things in

00:17:44,820 --> 00:17:48,600
here it's not the full container with

00:17:46,710 --> 00:17:49,830
like this is not like you know you get a

00:17:48,600 --> 00:17:51,360
talking take the container with some

00:17:49,830 --> 00:17:52,680
application and it's like a gigabyte and

00:17:51,360 --> 00:17:54,000
you're not quite sure what's in it

00:17:52,680 --> 00:17:55,680
this is just what actually you want to

00:17:54,000 --> 00:17:57,240
ship so as little as possible that makes

00:17:55,680 --> 00:17:58,680
your application work could be a single

00:17:57,240 --> 00:18:00,660
file could be you know a huge Java

00:17:58,680 --> 00:18:02,760
Runtime which have another example of

00:18:00,660 --> 00:18:04,470
the ensign jar files or whatever you

00:18:02,760 --> 00:18:06,090
want is just some container bundle you

00:18:04,470 --> 00:18:08,310
want to have that runs on top of the

00:18:06,090 --> 00:18:10,170
file system bundle you picked as the

00:18:08,310 --> 00:18:11,610
base snap and actually I can run just

00:18:10,170 --> 00:18:18,210
the hello fedora binary here to shoot

00:18:11,610 --> 00:18:20,310
you know to prove it this works you know

00:18:18,210 --> 00:18:23,820
it's not like interesting because it's

00:18:20,310 --> 00:18:25,020
obviously just doing it but again it

00:18:23,820 --> 00:18:26,850
took us a while to get to the point

00:18:25,020 --> 00:18:31,710
where we're going to is not extract

00:18:26,850 --> 00:18:33,630
dependency of the whole stack anymore so

00:18:31,710 --> 00:18:37,140
one thing I also want to show you is

00:18:33,630 --> 00:18:38,940
that snaps have this fancy thing which

00:18:37,140 --> 00:18:41,790
we call channels and I'm just gonna

00:18:38,940 --> 00:18:43,470
quickly show you that I can switch per

00:18:41,790 --> 00:18:45,810
snap the version of application I want

00:18:43,470 --> 00:18:50,300
to have you can also install them

00:18:45,810 --> 00:18:50,300
simultaneously but well I'll get to that

00:18:57,700 --> 00:19:01,390
so as I said before and right now I have

00:18:59,320 --> 00:19:02,710
a version 2.0 it's at the very bottom is

00:19:01,390 --> 00:19:04,990
this is installed version 2.0

00:19:02,710 --> 00:19:06,430
it's the revision switch to 1.0 which is

00:19:04,990 --> 00:19:08,020
in this label channel right now I'm

00:19:06,430 --> 00:19:11,370
testing the canid release so I'm gonna

00:19:08,020 --> 00:19:11,370
switch to stable Asiya this works

00:19:19,310 --> 00:19:25,670
so I asked snappy to refer to the stable

00:19:22,370 --> 00:19:28,190
channel and that's done and now if I

00:19:25,670 --> 00:19:30,170
actually run it again it says the same

00:19:28,190 --> 00:19:32,540
thing but actually that's the only

00:19:30,170 --> 00:19:34,070
applications just hello fedora but if I

00:19:32,540 --> 00:19:35,990
go to the candidate Channel I have

00:19:34,070 --> 00:19:37,340
another application there which is in

00:19:35,990 --> 00:19:42,440
the same snap but there's another

00:19:37,340 --> 00:19:45,700
application one day you'll get the hang

00:19:42,440 --> 00:19:45,700
of this typing thing yeah

00:19:48,110 --> 00:19:51,590
Oh

00:19:49,820 --> 00:19:53,690
and boom there's another application

00:19:51,590 --> 00:19:55,850
here it says goodbye fedora and it's

00:19:53,690 --> 00:19:57,740
just another application exposed of the

00:19:55,850 --> 00:19:58,640
same snap and the point for this is that

00:19:57,740 --> 00:20:01,010
you can actually have multiple

00:19:58,640 --> 00:20:03,230
applications services in your background

00:20:01,010 --> 00:20:05,330
staff desktop applications command-line

00:20:03,230 --> 00:20:07,550
tools in a single package so you can

00:20:05,330 --> 00:20:09,830
actually do this and every user can

00:20:07,550 --> 00:20:11,780
choose purse snap the you know stability

00:20:09,830 --> 00:20:14,360
level the risk level they want to follow

00:20:11,780 --> 00:20:16,250
you can also have like major releases so

00:20:14,360 --> 00:20:18,110
maybe there's like a one point X release

00:20:16,250 --> 00:20:19,850
with which is stable and two point X

00:20:18,110 --> 00:20:21,320
which is stable but people actually have

00:20:19,850 --> 00:20:23,090
to choose to go from one to the other so

00:20:21,320 --> 00:20:25,310
if every every developer who makes a

00:20:23,090 --> 00:20:26,870
snap gets to essentially design how

00:20:25,310 --> 00:20:28,700
people can consume this snap as a user

00:20:26,870 --> 00:20:31,310
and this is this is what I was

00:20:28,700 --> 00:20:33,140
mentioning earlier about channels and

00:20:31,310 --> 00:20:35,330
tracks and things like that so like a

00:20:33,140 --> 00:20:37,070
developer can choose how they want to

00:20:35,330 --> 00:20:38,540
structure the delivery of the software

00:20:37,070 --> 00:20:40,550
and how people move forward and stuff

00:20:38,540 --> 00:20:41,930
like that so there's a simple example

00:20:40,550 --> 00:20:44,390
that I'm done typing so just gonna

00:20:41,930 --> 00:20:45,800
quickly stand up as a simple example

00:20:44,390 --> 00:20:47,570
this is the Skype snap which is

00:20:45,800 --> 00:20:49,520
published by Microsoft and you know snap

00:20:47,570 --> 00:20:51,500
has a sorry Skype has this insider thing

00:20:49,520 --> 00:20:54,080
which is the Microsoft term for you know

00:20:51,500 --> 00:20:55,520
made a future beta whatever so you can

00:20:54,080 --> 00:20:57,680
actually see that I can install Skype

00:20:55,520 --> 00:21:00,080
from eiders a stable channel or from the

00:20:57,680 --> 00:21:01,580
insider channel so insider is like a you

00:21:00,080 --> 00:21:03,380
know a separate track so I can like

00:21:01,580 --> 00:21:04,910
click the latest and greatest insider

00:21:03,380 --> 00:21:06,950
which is kind of stable or you know even

00:21:04,910 --> 00:21:08,390
follow edge and it's essentially of the

00:21:06,950 --> 00:21:09,980
developer to figure out how to shape

00:21:08,390 --> 00:21:11,660
this space in a way that is meaningful

00:21:09,980 --> 00:21:13,490
to the project so this is like

00:21:11,660 --> 00:21:15,670
modularity but you know kind of

00:21:13,490 --> 00:21:19,160
delivered per application per package

00:21:15,670 --> 00:21:21,290
well it's it's basically you know per

00:21:19,160 --> 00:21:25,250
application rather than its its

00:21:21,290 --> 00:21:27,110
modularity in is the concept itself is

00:21:25,250 --> 00:21:29,720
actually more or less in the snapped

00:21:27,110 --> 00:21:32,180
world and like modules how modularity

00:21:29,720 --> 00:21:34,970
aims to offer with the snaps you can

00:21:32,180 --> 00:21:36,440
actually do modules for any type of

00:21:34,970 --> 00:21:38,540
application rather than having it

00:21:36,440 --> 00:21:41,630
multiple different technologies to try

00:21:38,540 --> 00:21:42,920
to achieve that like instead of having

00:21:41,630 --> 00:21:44,660
to have different docker thingies and

00:21:42,920 --> 00:21:46,250
different flat pack thingies and stuff

00:21:44,660 --> 00:21:47,720
like that where you have piecemeal

00:21:46,250 --> 00:21:49,010
integrations across the board the idea

00:21:47,720 --> 00:21:51,170
is that you can have a coherent and

00:21:49,010 --> 00:21:53,540
consistent integration with your host

00:21:51,170 --> 00:21:56,300
system and the application environment

00:21:53,540 --> 00:21:58,280
in a way that is flexible and meaningful

00:21:56,300 --> 00:22:00,940
and relatively easy to audit and

00:21:58,280 --> 00:22:03,370
maintain over time

00:22:00,940 --> 00:22:06,520
and across the server and clouds and IOT

00:22:03,370 --> 00:22:08,200
and desktop you know so it's just one

00:22:06,520 --> 00:22:19,960
solution that seems to fit all the

00:22:08,200 --> 00:22:23,830
places very well sure yeah so so it

00:22:19,960 --> 00:22:25,330
anyone have any questions this slide is

00:22:23,830 --> 00:22:27,250
just Q&A so now you know you can just

00:22:25,330 --> 00:22:28,180
feel just ask us questions but if you

00:22:27,250 --> 00:22:29,380
switch to the next slide there's gonna

00:22:28,180 --> 00:22:32,050
be some links if you'll not take photos

00:22:29,380 --> 00:22:33,520
and just go there later yeah no you

00:22:32,050 --> 00:22:35,200
don't have to take photos because I will

00:22:33,520 --> 00:22:37,390
actually export these slides and put

00:22:35,200 --> 00:22:40,870
them up on the clock 2018 page whenever

00:22:37,390 --> 00:22:41,950
it shows up but if you want yeah there's

00:22:40,870 --> 00:22:43,450
actually a couple of other tools I'll

00:22:41,950 --> 00:22:44,770
probably have the links later but like

00:22:43,450 --> 00:22:47,140
these two are the ones that zigga used

00:22:44,770 --> 00:22:48,700
for this particular demo there's a

00:22:47,140 --> 00:22:50,230
couple of others that I wrote as well

00:22:48,700 --> 00:22:54,660
for like how didn't you make these

00:22:50,230 --> 00:22:57,340
things so so yeah Wow

00:22:54,660 --> 00:22:58,780
stop being a she microphone so I was

00:22:57,340 --> 00:23:00,250
told that if we actually speak we don't

00:22:58,780 --> 00:23:01,750
have to speak of it we can't speak at

00:23:00,250 --> 00:23:02,980
the same time or we get a she and if we

00:23:01,750 --> 00:23:05,950
don't want to speak we just boot this

00:23:02,980 --> 00:23:07,750
but just as like as a quick explanation

00:23:05,950 --> 00:23:10,000
this is the the source the entire store

00:23:07,750 --> 00:23:12,160
for the Fedora 29 base snap it's an

00:23:10,000 --> 00:23:14,410
under the umbrella of the server working

00:23:12,160 --> 00:23:16,480
group I think so we have the permission

00:23:14,410 --> 00:23:18,330
to call it Fedora we're gonna hand it

00:23:16,480 --> 00:23:20,470
off to the infrastructure team

00:23:18,330 --> 00:23:22,000
essentially when we stop tweaking the

00:23:20,470 --> 00:23:23,140
way it's built and I think we're feeling

00:23:22,000 --> 00:23:25,000
comfortable we need to have a

00:23:23,140 --> 00:23:26,710
conversation you know about we want to

00:23:25,000 --> 00:23:28,540
hand it off this is how it looks like

00:23:26,710 --> 00:23:32,140
where do we plug it every time there's a

00:23:28,540 --> 00:23:33,730
compose and the hello Fedora program is

00:23:32,140 --> 00:23:36,610
just that there's a mic file there's a C

00:23:33,730 --> 00:23:37,690
file there's a license and you can build

00:23:36,610 --> 00:23:39,310
it yourself you can try them in your

00:23:37,690 --> 00:23:40,690
machine so all of these things you can

00:23:39,310 --> 00:23:42,640
essentially easily try on your machines

00:23:40,690 --> 00:23:43,750
either by following them instructions

00:23:42,640 --> 00:23:45,880
which I'll let you just install the

00:23:43,750 --> 00:23:47,050
video at 29 snaps straight trim the

00:23:45,880 --> 00:23:48,970
floor by building it on your machine

00:23:47,050 --> 00:23:50,650
installing it but you know directly and

00:23:48,970 --> 00:23:53,020
note that the hope is that once we get

00:23:50,650 --> 00:23:55,600
to snap craft you can just take regular

00:23:53,020 --> 00:23:56,920
Fedora packages no modifications no need

00:23:55,600 --> 00:23:58,990
to rebuild them all over the place to

00:23:56,920 --> 00:24:01,690
change like namespaces or whatnot we can

00:23:58,990 --> 00:24:05,200
use them as pristine inputs to actually

00:24:01,690 --> 00:24:07,840
put together snaps of application

00:24:05,200 --> 00:24:09,430
services and stuff like that so unlike

00:24:07,840 --> 00:24:10,930
in the flat pack model you know that

00:24:09,430 --> 00:24:12,520
it's fine for you know how they're doing

00:24:10,930 --> 00:24:14,380
it for their model but unlike the flat

00:24:12,520 --> 00:24:16,150
pack model actually we could

00:24:14,380 --> 00:24:18,640
use the packages as they are because we

00:24:16,150 --> 00:24:20,560
preserve full FHS inside and we use a

00:24:18,640 --> 00:24:22,030
what does it Biden Mountain we use the

00:24:20,560 --> 00:24:23,710
mountain Ames base - actually yeah the

00:24:22,030 --> 00:24:25,120
mountainous bases with squash FS

00:24:23,710 --> 00:24:26,950
overlays and stuff like that

00:24:25,120 --> 00:24:28,990
no overlays actually but well I mean the

00:24:26,950 --> 00:24:30,820
overlay is and not not overlay at that

00:24:28,990 --> 00:24:32,800
specifically because there's whole host

00:24:30,820 --> 00:24:35,590
of problems there so the further r29

00:24:32,800 --> 00:24:37,930
step is actually just a bunch of rpms in

00:24:35,590 --> 00:24:41,920
fact so we have like of the file system

00:24:37,930 --> 00:24:43,660
package some line packs bash core utils

00:24:41,920 --> 00:24:45,100
things like that just like we don't have

00:24:43,660 --> 00:24:46,960
to we actually rebuild him it's just

00:24:45,100 --> 00:24:49,120
like the whole thing takes like you know

00:24:46,960 --> 00:24:50,350
ten seconds to build I mean no one takes

00:24:49,120 --> 00:24:52,990
ten seconds because you split up all the

00:24:50,350 --> 00:25:04,900
steps no if you put all the steps in one

00:24:52,990 --> 00:25:07,180
it's like four and a half seconds so I'm

00:25:04,900 --> 00:25:10,500
the RPM guy so I have to ask our updates

00:25:07,180 --> 00:25:13,150
are going to work so first how do you

00:25:10,500 --> 00:25:15,490
how do you get updates on your base

00:25:13,150 --> 00:25:17,680
system and and do you have tooling

00:25:15,490 --> 00:25:20,500
basically to monitor two packages you've

00:25:17,680 --> 00:25:23,920
put in there to get this base updated

00:25:20,500 --> 00:25:26,110
and also how our users going to see

00:25:23,920 --> 00:25:32,260
updates and are there automatic updates

00:25:26,110 --> 00:25:33,760
for snap snaps themselves the questions

00:25:32,260 --> 00:25:35,950
so the question is how do those updates

00:25:33,760 --> 00:25:36,910
works how both on the back end how do

00:25:35,950 --> 00:25:39,400
you know where we have to rebuild

00:25:36,910 --> 00:25:41,560
something and how the users get it so on

00:25:39,400 --> 00:25:43,060
the back end technically we just build

00:25:41,560 --> 00:25:44,530
it for instance every day or every time

00:25:43,060 --> 00:25:46,120
there's something urgent like a CV

00:25:44,530 --> 00:25:47,560
triggers of rebuilds we can put the

00:25:46,120 --> 00:25:49,180
manifests of things that are actually in

00:25:47,560 --> 00:25:50,830
it and if it change we can say okay

00:25:49,180 --> 00:25:52,480
that's fine we now can publish it so

00:25:50,830 --> 00:25:53,920
essentially every time you build it you

00:25:52,480 --> 00:25:56,080
get a squash of his file a single file

00:25:53,920 --> 00:25:59,350
and they can just say okay I find I'm

00:25:56,080 --> 00:26:01,780
gonna upload this to the edge channel in

00:25:59,350 --> 00:26:04,810
the store and after some QA I can go to

00:26:01,780 --> 00:26:06,820
beta to candidate and to stable and then

00:26:04,810 --> 00:26:08,800
whichever channel you're subscribed to

00:26:06,820 --> 00:26:10,420
as a user you'll just get the update so

00:26:08,800 --> 00:26:11,860
you don't have to actually you know do

00:26:10,420 --> 00:26:14,830
anything about it just everything

00:26:11,860 --> 00:26:15,790
updates automatically a big scar done by

00:26:14,830 --> 00:26:18,670
the vault

00:26:15,790 --> 00:26:20,170
I think twice a day so twice a day

00:26:18,670 --> 00:26:21,970
everything changes or once a day I

00:26:20,170 --> 00:26:23,320
forgot just goes to the store and asked

00:26:21,970 --> 00:26:25,030
you know well is there anything to

00:26:23,320 --> 00:26:27,340
update to and just gets pulled in and

00:26:25,030 --> 00:26:28,269
for some of the updates they are applied

00:26:27,340 --> 00:26:31,089
live so

00:26:28,269 --> 00:26:34,809
things like well it's complicated but

00:26:31,089 --> 00:26:37,029
the essence is that if the part like a

00:26:34,809 --> 00:26:38,679
service Apache for instance and there's

00:26:37,029 --> 00:26:39,940
an update it just gets restarted it's up

00:26:38,679 --> 00:26:42,969
to date you're actually running the new

00:26:39,940 --> 00:26:44,109
version it's like Firefox you will

00:26:42,969 --> 00:26:45,729
actually get a prompt you have to

00:26:44,109 --> 00:26:47,529
restart it and once you close it all the

00:26:45,729 --> 00:26:49,119
processes go away then the switch

00:26:47,529 --> 00:26:50,739
happens and you actually get the new one

00:26:49,119 --> 00:26:52,570
so for the youth from the users point of

00:26:50,739 --> 00:26:54,249
view there is no off switch which is

00:26:52,570 --> 00:26:56,109
sometimes controversial but they mean it

00:26:54,249 --> 00:26:57,549
means they actually are updating all the

00:26:56,109 --> 00:26:58,749
time they can only pick the schedule

00:26:57,549 --> 00:27:00,700
when they on update they can put

00:26:58,749 --> 00:27:01,929
deferred for like three months but they

00:27:00,700 --> 00:27:07,659
cannot turn it off so everyone's gonna

00:27:01,929 --> 00:27:09,070
update oh yes and if you're on a matter

00:27:07,659 --> 00:27:10,329
connection like you have a modem you're

00:27:09,070 --> 00:27:11,859
roaming you don't want to pull them in

00:27:10,329 --> 00:27:13,329
right now we can this is actually

00:27:11,859 --> 00:27:14,709
integration with that so we're you know

00:27:13,329 --> 00:27:16,299
just gonna be postponed while you're on

00:27:14,709 --> 00:27:17,289
this connection this is also preference

00:27:16,299 --> 00:27:19,509
so there's a lot of the things you can

00:27:17,289 --> 00:27:22,809
tweak but the default is you just update

00:27:19,509 --> 00:27:24,279
all the time and it's transparent and

00:27:22,809 --> 00:27:26,259
also Delta updates so this is actually

00:27:24,279 --> 00:27:28,059
pretty nice you know if if there's a

00:27:26,259 --> 00:27:33,519
typo but it's essential well it's a very

00:27:28,059 --> 00:27:34,570
very very small update so one of the

00:27:33,519 --> 00:27:35,950
things actually is gonna come out of

00:27:34,570 --> 00:27:37,450
this is we're gonna have to figure out

00:27:35,950 --> 00:27:39,219
what building is easy

00:27:37,450 --> 00:27:41,440
well publishing is interesting because

00:27:39,219 --> 00:27:43,419
we publish it to stable is there gonna

00:27:41,440 --> 00:27:45,190
be QA involved we don't have answers for

00:27:43,419 --> 00:27:47,619
that yet this is just us staining

00:27:45,190 --> 00:27:49,659
there's some possibilities we can export

00:27:47,619 --> 00:27:51,309
but we don't have a process for this yet

00:27:49,659 --> 00:27:52,929
I can tell you how this works in a boon

00:27:51,309 --> 00:27:55,209
to wartime there's a new course snap

00:27:52,929 --> 00:27:59,049
which essentially is like a small true

00:27:55,209 --> 00:28:02,079
Twitter bin - it goes to a huge QA phase

00:27:59,049 --> 00:28:04,149
which lasts around the week at least of

00:28:02,079 --> 00:28:07,179
busy work like tons of tons of things

00:28:04,149 --> 00:28:09,669
happen during that time and this is only

00:28:07,179 --> 00:28:12,369
after it has been in handed it for

00:28:09,669 --> 00:28:15,249
because I think so there's a you know it

00:28:12,369 --> 00:28:17,469
there's not always like a 1 month lag

00:28:15,249 --> 00:28:18,849
maybe unless it's super urgent we do a

00:28:17,469 --> 00:28:21,700
very quick release with a very targeted

00:28:18,849 --> 00:28:23,589
update but there's a lot of QA involved

00:28:21,700 --> 00:28:25,419
the reason for this is again because

00:28:23,589 --> 00:28:27,399
this actually goes to people and they

00:28:25,419 --> 00:28:29,469
are always going to get it and there's

00:28:27,399 --> 00:28:30,309
no distributor in between so if we ship

00:28:29,469 --> 00:28:33,879
something broken

00:28:30,309 --> 00:28:35,969
well we break everyone who has it so the

00:28:33,879 --> 00:28:38,409
good thing is we can also unbreak it so

00:28:35,969 --> 00:28:40,719
the it's one really interesting thing

00:28:38,409 --> 00:28:41,090
like I've been doing packaging in the

00:28:40,719 --> 00:28:42,560
past

00:28:41,090 --> 00:28:44,180
and it was always like yeah you know

00:28:42,560 --> 00:28:45,230
well it's broken we're gonna fix it the

00:28:44,180 --> 00:28:47,150
next package it's fine

00:28:45,230 --> 00:28:48,770
but also we have some devices which you

00:28:47,150 --> 00:28:50,750
do not have classic packages there's no

00:28:48,770 --> 00:28:52,490
D packages there's no app on the system

00:28:50,750 --> 00:28:54,800
the only thing that is on the system is

00:28:52,490 --> 00:28:56,810
snap T and and everything is a snap so

00:28:54,800 --> 00:28:58,030
we had some gray hair and some very

00:28:56,810 --> 00:29:00,470
interesting technologies that let us

00:28:58,030 --> 00:29:02,000
unbreak the world in case we ship

00:29:00,470 --> 00:29:03,740
something that doesn't work at all so

00:29:02,000 --> 00:29:06,080
people can still recover these things

00:29:03,740 --> 00:29:08,360
and one of the things we did use a

00:29:06,080 --> 00:29:11,030
couple of times as we were just figuring

00:29:08,360 --> 00:29:13,190
out how the whole thing works is that

00:29:11,030 --> 00:29:14,930
because the store has binary that are

00:29:13,190 --> 00:29:16,160
you know there's revision one when I

00:29:14,930 --> 00:29:18,560
upload it there's revision 2 when I

00:29:16,160 --> 00:29:19,580
upload it I say ok revision 1 is stable

00:29:18,560 --> 00:29:21,470
people get revision 1

00:29:19,580 --> 00:29:23,300
I say revision 2 is stable people get

00:29:21,470 --> 00:29:25,850
revision 2 and oh my god it's broken I

00:29:23,300 --> 00:29:27,980
don't have to build revision 3 I can

00:29:25,850 --> 00:29:30,350
just say you know revision 1 is stable

00:29:27,980 --> 00:29:31,580
so you just go to revision 1 these are

00:29:30,350 --> 00:29:33,530
no like version you have to increment

00:29:31,580 --> 00:29:35,090
them this is like a branch you follow

00:29:33,530 --> 00:29:36,710
this is a stream of things you can't

00:29:35,090 --> 00:29:38,390
they have a version as a name for you to

00:29:36,710 --> 00:29:40,070
look at so it's you know you can

00:29:38,390 --> 00:29:41,660
familiarize okay this is this version of

00:29:40,070 --> 00:29:44,000
the application but essentially it's a

00:29:41,660 --> 00:29:45,560
channel Europe you subscribe to so you

00:29:44,000 --> 00:29:47,330
can go back to the one you had just a

00:29:45,560 --> 00:29:51,010
moment ago and you know the devices

00:29:47,330 --> 00:29:51,010
stopped catching on fire in the field

00:29:54,700 --> 00:30:00,410
yeah but the problem with that is of

00:29:58,400 --> 00:30:01,970
course you know I assume you've got

00:30:00,410 --> 00:30:03,710
config files sitting in the users home

00:30:01,970 --> 00:30:06,860
directory so you know you've your

00:30:03,710 --> 00:30:08,390
stables been version to the users config

00:30:06,860 --> 00:30:11,300
files have all been rewritten

00:30:08,390 --> 00:30:13,160
they you then declare stable being

00:30:11,300 --> 00:30:15,050
version 1 and it can't read all the

00:30:13,160 --> 00:30:16,460
version 2 config files and you've broken

00:30:15,050 --> 00:30:18,410
the even more it's such an audacity

00:30:16,460 --> 00:30:20,660
question thank you so we actually solve

00:30:18,410 --> 00:30:22,460
that in a very nice way so what we do so

00:30:20,660 --> 00:30:24,440
we can do this from our and we can say

00:30:22,460 --> 00:30:27,530
oh my god we broke the world we can say

00:30:24,440 --> 00:30:29,480
go back to revision 1 if a user sees

00:30:27,530 --> 00:30:31,430
that it's broken for me I don't like it

00:30:29,480 --> 00:30:33,260
for whatever reason I can just say snap

00:30:31,430 --> 00:30:35,030
revert Firefox and bam and on the rest

00:30:33,260 --> 00:30:36,170
version I was running including the data

00:30:35,030 --> 00:30:38,360
I had so if there was like an

00:30:36,170 --> 00:30:39,920
incompatible schema change or the data

00:30:38,360 --> 00:30:42,590
just got lost because there was a typo

00:30:39,920 --> 00:30:44,330
and it removed everything snapped he

00:30:42,590 --> 00:30:46,040
actually manages the application data so

00:30:44,330 --> 00:30:47,270
it knows where it is it can be anywhere

00:30:46,040 --> 00:30:49,160
else it can just write all over the

00:30:47,270 --> 00:30:50,960
system I can actually take a snapshot of

00:30:49,160 --> 00:30:52,790
that data before we do the Refresh so we

00:30:50,960 --> 00:30:54,620
actually have something to go back to so

00:30:52,790 --> 00:30:57,200
in this case we're you know some

00:30:54,620 --> 00:30:58,940
ship's broken update to a full

00:30:57,200 --> 00:31:01,100
application and eats all of your photos

00:30:58,940 --> 00:31:02,780
well well we have some at least some

00:31:01,100 --> 00:31:04,610
attempts to solve that you can also

00:31:02,780 --> 00:31:06,650
always kind of circumvent the system

00:31:04,610 --> 00:31:08,180
because if an application developer

00:31:06,650 --> 00:31:09,920
chooses to integrate with snaps at this

00:31:08,180 --> 00:31:11,150
level they can say I want to have two

00:31:09,920 --> 00:31:13,190
datasets I want to have these that that

00:31:11,150 --> 00:31:15,200
just gets manager by snap the entirely

00:31:13,190 --> 00:31:17,210
and it may be copying that something

00:31:15,200 --> 00:31:19,130
that's gonna be you know costly I also

00:31:17,210 --> 00:31:21,830
want to have a snap sorry a data set

00:31:19,130 --> 00:31:23,510
which is common across revision so maybe

00:31:21,830 --> 00:31:25,160
it's like you know me like in the

00:31:23,510 --> 00:31:26,750
metadata for the photos get snapshot at

00:31:25,160 --> 00:31:28,790
all the time but they actually photos

00:31:26,750 --> 00:31:30,590
are not so it would be like a separate

00:31:28,790 --> 00:31:32,030
data set but that's not the level we

00:31:30,590 --> 00:31:34,309
have this distinction and applications

00:31:32,030 --> 00:31:36,320
can be written in a smart way to do the

00:31:34,309 --> 00:31:38,420
right thing so we can both do it from

00:31:36,320 --> 00:31:40,790
our end like pull in on pull on an

00:31:38,420 --> 00:31:42,530
update and switch it to something that

00:31:40,790 --> 00:31:44,120
used to work before and every user can

00:31:42,530 --> 00:31:46,429
choose to do it from themselves because

00:31:44,120 --> 00:31:47,960
not only you know it's their computer

00:31:46,429 --> 00:31:49,850
they're in control of this they have the

00:31:47,960 --> 00:31:51,350
data you can go back it also gives us a

00:31:49,850 --> 00:31:53,690
hint that didn't work for them so this

00:31:51,350 --> 00:31:56,179
revision gets a black like marked as bad

00:31:53,690 --> 00:31:58,100
on their machine and we get a ping in

00:31:56,179 --> 00:31:59,480
the store so we can we don't have this

00:31:58,100 --> 00:32:00,530
working end to end yet but essentially

00:31:59,480 --> 00:32:02,390
going to be able to surface this to

00:32:00,530 --> 00:32:03,890
developers like a large percentage of

00:32:02,390 --> 00:32:06,230
your population is actually you know

00:32:03,890 --> 00:32:16,040
having issues with this release so they

00:32:06,230 --> 00:32:17,900
will have some information so honest so

00:32:16,040 --> 00:32:21,740
I have questions about publishing so how

00:32:17,900 --> 00:32:23,630
many snaps do you make and how do you

00:32:21,740 --> 00:32:26,990
publish them and can you sign them and

00:32:23,630 --> 00:32:29,390
I'm guessing you're only making base

00:32:26,990 --> 00:32:32,600
snap and you are letting the developers

00:32:29,390 --> 00:32:36,410
make their own snaps on top of it so are

00:32:32,600 --> 00:32:39,890
you releasing ping those layered snaps

00:32:36,410 --> 00:32:42,800
on you are in infrastructure or they can

00:32:39,890 --> 00:32:45,140
build their own okay so four things to

00:32:42,800 --> 00:32:48,140
unpack you I'm gonna go back because

00:32:45,140 --> 00:32:50,030
this is like recent memory so the

00:32:48,140 --> 00:32:51,770
developer gets the build the application

00:32:50,030 --> 00:32:54,110
and they can push it to the storage for

00:32:51,770 --> 00:32:55,940
publishing they can also set up a CI CD

00:32:54,110 --> 00:32:57,650
solution where essentially a developer

00:32:55,940 --> 00:32:58,910
but this works perfect for free software

00:32:57,650 --> 00:33:00,710
it just gets to point to a good tree

00:32:58,910 --> 00:33:02,510
which has all the things that are

00:33:00,710 --> 00:33:03,860
necessary to know how to build it we

00:33:02,510 --> 00:33:05,840
build it in our infrastructure it's

00:33:03,860 --> 00:33:08,210
essentially like a click on github and

00:33:05,840 --> 00:33:10,160
you get a snap out of this repository

00:33:08,210 --> 00:33:11,360
and it's fully automatic but you can

00:33:10,160 --> 00:33:12,380
always build it on your infrastructure

00:33:11,360 --> 00:33:14,510
and uploaded this source we can

00:33:12,380 --> 00:33:16,760
completely control the build process for

00:33:14,510 --> 00:33:18,230
publishing we publish like canonical

00:33:16,760 --> 00:33:20,600
publishes bunch of snaps for the

00:33:18,230 --> 00:33:22,580
products we make we publish the base

00:33:20,600 --> 00:33:24,350
snaps with Ubuntu in it because we

00:33:22,580 --> 00:33:25,760
maintains we like we have security

00:33:24,350 --> 00:33:28,580
promises without we have pain dense

00:33:25,760 --> 00:33:30,220
promises for that we have a community of

00:33:28,580 --> 00:33:33,380
people who publish third-party software

00:33:30,220 --> 00:33:35,030
but most of that is just like you know

00:33:33,380 --> 00:33:36,860
we published like we made a snap it

00:33:35,030 --> 00:33:38,210
works you can see how this works in this

00:33:36,860 --> 00:33:40,250
store would you like to take it and they

00:33:38,210 --> 00:33:41,810
say usually say oh that's great yes and

00:33:40,250 --> 00:33:43,430
they just do it themselves now so

00:33:41,810 --> 00:33:45,800
essentially that on the first slide with

00:33:43,430 --> 00:33:48,170
all the icons one of these snaps out of

00:33:45,800 --> 00:33:50,480
all the all the set was done by someone

00:33:48,170 --> 00:33:51,950
working essentially more on snaps than

00:33:50,480 --> 00:33:53,210
the upstream project everything else is

00:33:51,950 --> 00:33:55,760
purely upstream people doing the

00:33:53,210 --> 00:33:57,560
releases during the QA driving figuring

00:33:55,760 --> 00:33:59,210
out how they want to use it and them are

00:33:57,560 --> 00:34:00,500
publishing the whole thing through this

00:33:59,210 --> 00:34:02,600
story so this story is essentially a

00:34:00,500 --> 00:34:04,550
place for you to publish and we just to

00:34:02,600 --> 00:34:06,080
help the bootstrap the system sometimes

00:34:04,550 --> 00:34:08,030
packaged software that is popular and

00:34:06,080 --> 00:34:11,270
hand it over to the upstream developers

00:34:08,030 --> 00:34:14,110
to publish do you have more questions I

00:34:11,270 --> 00:34:16,730
lost the context you please repeat that

00:34:14,110 --> 00:34:18,560
yes fantastic question

00:34:16,730 --> 00:34:20,780
so snap D which I have not mentioned has

00:34:18,560 --> 00:34:23,140
a fantastic security system about

00:34:20,780 --> 00:34:25,340
signatures there's a root of trust

00:34:23,140 --> 00:34:27,860
everything is signs permissions are

00:34:25,340 --> 00:34:29,270
signed like if I want to be a snap which

00:34:27,860 --> 00:34:31,070
has super deep system integration like

00:34:29,270 --> 00:34:32,330
I'm a container runtime which means I

00:34:31,070 --> 00:34:33,320
can do a lot of things which probably

00:34:32,330 --> 00:34:35,510
allow me to break out of the sandbox

00:34:33,320 --> 00:34:37,640
this is a fully signed document saying

00:34:35,510 --> 00:34:39,470
that this snap ID has these permissions

00:34:37,640 --> 00:34:39,980
it's fully signed all the way back to

00:34:39,470 --> 00:34:41,330
the store

00:34:39,980 --> 00:34:43,220
so yes everything has automatically

00:34:41,330 --> 00:34:44,960
signed by to you as a developer when you

00:34:43,220 --> 00:34:46,880
build it by the story it gets cross

00:34:44,960 --> 00:34:49,330
signed it's it's this all across the

00:34:46,880 --> 00:34:49,330
stack yes

00:34:52,839 --> 00:34:58,339
all right so I'll take this question so

00:34:55,819 --> 00:35:00,740
the answer is currently no you cannot

00:34:58,339 --> 00:35:03,319
host your own store oh yeah yes Oh

00:35:00,740 --> 00:35:05,269
repeat the question okay you asked if we

00:35:03,319 --> 00:35:06,769
could host our own store the answer is

00:35:05,269 --> 00:35:09,230
unfortunately no not right now

00:35:06,769 --> 00:35:11,630
or possibly episode oh no I can tell you

00:35:09,230 --> 00:35:13,279
overriding that the idea the idea is

00:35:11,630 --> 00:35:15,109
there's going to be one store but you

00:35:13,279 --> 00:35:17,420
can host your staff so we can have your

00:35:15,109 --> 00:35:18,829
own private view of the store that lets

00:35:17,420 --> 00:35:20,029
like you deploy in an enterprise you

00:35:18,829 --> 00:35:21,529
wanna have your private snap so you can

00:35:20,029 --> 00:35:22,940
both host them locally physically on

00:35:21,529 --> 00:35:24,619
your premise that they never lived on

00:35:22,940 --> 00:35:27,589
the internet and you can also have a

00:35:24,619 --> 00:35:29,390
proxy which essentially is like a proxy

00:35:27,589 --> 00:35:31,309
for all the machines that talk to this

00:35:29,390 --> 00:35:32,720
thing instead of the real store so it's

00:35:31,309 --> 00:35:34,069
just all in your network so you can do

00:35:32,720 --> 00:35:36,019
like really like offline like

00:35:34,069 --> 00:35:38,089
deployments and you can keep this snaps

00:35:36,019 --> 00:35:39,650
local but essentially there's one store

00:35:38,089 --> 00:35:41,990
so this thing is just like a filter on

00:35:39,650 --> 00:35:44,089
the real store you can say I'm a full

00:35:41,990 --> 00:35:45,740
filter I just give you the file five

00:35:44,089 --> 00:35:46,999
snaps that I want in my enterprise and

00:35:45,740 --> 00:35:48,319
nothing else it could be like an add-on

00:35:46,999 --> 00:35:50,390
could be like a filter it's essentially

00:35:48,319 --> 00:35:52,730
we don't want to have a world where

00:35:50,390 --> 00:35:54,259
there's very little repositories and all

00:35:52,730 --> 00:35:56,660
the users are tricked to sign up to that

00:35:54,259 --> 00:35:58,160
repository which will never like there

00:35:56,660 --> 00:35:59,809
was this fantastic case with someone

00:35:58,160 --> 00:36:02,089
they uploaded an application the miner

00:35:59,809 --> 00:36:04,400
in it so we run a game but it's mining

00:36:02,089 --> 00:36:06,140
Bitcoin or whatever in your machine what

00:36:04,400 --> 00:36:07,460
we did when this was identified is

00:36:06,140 --> 00:36:09,980
within a couple of minutes we blocked

00:36:07,460 --> 00:36:12,680
this snap so no one could install it we

00:36:09,980 --> 00:36:15,410
pull it from the store we remove the

00:36:12,680 --> 00:36:16,880
miner reuploaded it to the store got in

00:36:15,410 --> 00:36:18,410
touch with the developer and within a

00:36:16,880 --> 00:36:19,369
couple of hours the whole planet was on

00:36:18,410 --> 00:36:21,829
a version without the miner

00:36:19,369 --> 00:36:24,109
if this was a separate repository that

00:36:21,829 --> 00:36:26,329
these guys set up none of that will be

00:36:24,109 --> 00:36:28,489
possible so we have a you know we have a

00:36:26,329 --> 00:36:30,710
film vision and design on Y we have a

00:36:28,489 --> 00:36:32,509
single store we have ways of deploying

00:36:30,710 --> 00:36:34,130
stores for enterprises for companies for

00:36:32,509 --> 00:36:35,480
even people I mean it's like you could

00:36:34,130 --> 00:36:38,299
just deploy the Box in your laptop if

00:36:35,480 --> 00:36:40,099
you want to but there are reasons why we

00:36:38,299 --> 00:36:43,730
chose to do it it's not like an herb is

00:36:40,099 --> 00:36:45,259
Wild West and this PPA has a fancy game

00:36:43,730 --> 00:36:47,150
but it also happens to ship let's see

00:36:45,259 --> 00:36:49,009
why well people don't really understand

00:36:47,150 --> 00:36:50,749
why but it ships its and it has this

00:36:49,009 --> 00:36:52,309
fancy version number nine or nine so

00:36:50,749 --> 00:36:53,809
you're just gonna update why well

00:36:52,309 --> 00:36:55,549
because that's how the packaging system

00:36:53,809 --> 00:36:57,349
works we want to avoid these problems

00:36:55,549 --> 00:36:59,210
because we there's ton of these things

00:36:57,349 --> 00:37:00,680
in the world it'll end it's just a

00:36:59,210 --> 00:37:02,960
design issue it's not like we can walk

00:37:00,680 --> 00:37:05,750
it in more we have to make the system so

00:37:02,960 --> 00:37:14,370
that they cannot be done

00:37:05,750 --> 00:37:16,110
so yes yes but every device has to sign

00:37:14,370 --> 00:37:17,990
like I want to talk to the proxy tell

00:37:16,110 --> 00:37:20,670
the device please talk to this proxy

00:37:17,990 --> 00:37:24,330
energy essentially what this is the

00:37:20,670 --> 00:37:25,950
proxy is a mechanism in which you have a

00:37:24,330 --> 00:37:27,690
slice of it where you are hosting

00:37:25,950 --> 00:37:29,580
yourself and it's a transparent overlay

00:37:27,690 --> 00:37:30,900
on top of the main snap story that means

00:37:29,580 --> 00:37:32,940
that the ultimate route Trust is the

00:37:30,900 --> 00:37:39,120
canonical store

00:37:32,940 --> 00:37:42,300
pun intended but yeah well the the route

00:37:39,120 --> 00:37:44,220
it's x.509 base route trust not GPG

00:37:42,300 --> 00:37:46,530
trust so it's based on the root CA that

00:37:44,220 --> 00:37:48,120
comes from the canonical store and every

00:37:46,530 --> 00:37:51,060
cert is derived from that and that's how

00:37:48,120 --> 00:37:53,130
snap D trust everything there is no

00:37:51,060 --> 00:37:56,160
currently open source implementation of

00:37:53,130 --> 00:37:58,080
the proxy server which is something that

00:37:56,160 --> 00:37:59,940
I'm fighting to have a version of

00:37:58,080 --> 00:38:01,950
because that will make it easier for us

00:37:59,940 --> 00:38:03,780
to say in Fedora have a gateway for

00:38:01,950 --> 00:38:05,580
actually storing them and actually

00:38:03,780 --> 00:38:07,500
plugging it into Bodhi or some other

00:38:05,580 --> 00:38:09,420
release process to be able to do this

00:38:07,500 --> 00:38:12,090
correctly so as we push it forward this

00:38:09,420 --> 00:38:13,950
store is huge and complicated like it's

00:38:12,090 --> 00:38:15,990
a living project with the long pass so

00:38:13,950 --> 00:38:18,000
it's not like we don't you know it's

00:38:15,990 --> 00:38:20,100
both a product and it's both a complex

00:38:18,000 --> 00:38:21,900
stack that doesn't really make sense to

00:38:20,100 --> 00:38:23,370
give to people one thing that I think

00:38:21,900 --> 00:38:25,020
was gonna happen very quickly as part of

00:38:23,370 --> 00:38:26,400
the other proxy work is that essentially

00:38:25,020 --> 00:38:27,540
gonna be able to have a snap in the main

00:38:26,400 --> 00:38:29,430
store but to say I want to host it here

00:38:27,540 --> 00:38:30,600
so people actually go to the store I say

00:38:29,430 --> 00:38:32,040
I want to install this snap and they

00:38:30,600 --> 00:38:33,450
stop going to the CDN which would give

00:38:32,040 --> 00:38:36,810
everyone for free and we can just go to

00:38:33,450 --> 00:38:39,810
the place you picked so it's evolving I

00:38:36,810 --> 00:38:40,950
mean we're using it people are saying I

00:38:39,810 --> 00:38:42,960
would like to use it in this way but

00:38:40,950 --> 00:38:44,790
it's not doable right now and we talk to

00:38:42,960 --> 00:38:47,100
them and things improve so the store has

00:38:44,790 --> 00:38:49,350
improved tremendously the API is public

00:38:47,100 --> 00:38:52,170
if the API is documented it's just also

00:38:49,350 --> 00:38:53,640
kind of not full because it's been

00:38:52,170 --> 00:38:55,350
improved tremendously but there are

00:38:53,640 --> 00:38:56,850
still some crafty things in it because

00:38:55,350 --> 00:38:59,970
it's a it's been a Legacy Project in the

00:38:56,850 --> 00:39:01,290
past and I think at some point we're

00:38:59,970 --> 00:39:03,270
gonna hit a moment we're gonna feel this

00:39:01,290 --> 00:39:05,100
is the feature set we plan to have and

00:39:03,270 --> 00:39:06,510
this is okay we're gonna say this is the

00:39:05,100 --> 00:39:07,800
stable API I think people can just

00:39:06,510 --> 00:39:09,360
easily make another store

00:39:07,800 --> 00:39:11,760
the thing that is tricky there is

00:39:09,360 --> 00:39:13,770
essentially snap D has as you know a

00:39:11,760 --> 00:39:15,660
certificate of trust so well you can

00:39:13,770 --> 00:39:17,100
always rebuild snappy - trust - but then

00:39:15,660 --> 00:39:18,210
you get to figure out what Federation

00:39:17,100 --> 00:39:19,890
means in this context

00:39:18,210 --> 00:39:21,450
maybe we'll get there eventually it's

00:39:19,890 --> 00:39:22,859
just a process that's what--that's this

00:39:21,450 --> 00:39:25,790
is simpler now I'm gonna hand this to

00:39:22,859 --> 00:39:25,790
you because it wouldn't waiting so long

00:39:26,010 --> 00:39:31,140
so can the proxy store blacklist some

00:39:29,220 --> 00:39:33,990
packages from the main store because of

00:39:31,140 --> 00:39:35,280
some policies for example yes so that's

00:39:33,990 --> 00:39:37,050
actually the so that's one of the

00:39:35,280 --> 00:39:39,150
reasons why I kind of want to have an

00:39:37,050 --> 00:39:41,339
open the open source version of the

00:39:39,150 --> 00:39:43,589
proxy server because so for example

00:39:41,339 --> 00:39:45,690
currently today canonical publishes a

00:39:43,589 --> 00:39:47,790
network manager snap they publish it

00:39:45,690 --> 00:39:50,970
based on the Ubuntu packages for Network

00:39:47,790 --> 00:39:53,490
manager however that does nobody any

00:39:50,970 --> 00:39:55,619
good if you are running that snap on a

00:39:53,490 --> 00:39:58,589
fedora because it isn't compiled to

00:39:55,619 --> 00:40:00,869
support if config Red Hat so without

00:39:58,589 --> 00:40:03,810
that compile capability it is not able

00:40:00,869 --> 00:40:05,970
to read our configuration so in our case

00:40:03,810 --> 00:40:07,920
we would want to have our device of

00:40:05,970 --> 00:40:10,050
fedora based systems go through our

00:40:07,920 --> 00:40:11,880
proxy first detect our network

00:40:10,050 --> 00:40:13,950
management snap use it which can read

00:40:11,880 --> 00:40:15,869
our configuration but still provide all

00:40:13,950 --> 00:40:18,750
the same functionality and plug into the

00:40:15,869 --> 00:40:21,180
slot and override essentially the

00:40:18,750 --> 00:40:23,550
canonical snap these are all good ideas

00:40:21,180 --> 00:40:24,630
I mean just like we have never attempted

00:40:23,550 --> 00:40:25,950
something like this before we have the

00:40:24,630 --> 00:40:27,780
network manager system specifically

00:40:25,950 --> 00:40:28,980
because snap T has a double life on the

00:40:27,780 --> 00:40:31,109
desktop and the server and everywhere

00:40:28,980 --> 00:40:33,150
else and as a core distribution which is

00:40:31,109 --> 00:40:35,220
without any classic packages meant for

00:40:33,150 --> 00:40:36,660
embedded devices for IOT so we have

00:40:35,220 --> 00:40:37,830
actually network managers so we can have

00:40:36,660 --> 00:40:39,839
like a little box somewhere in the

00:40:37,830 --> 00:40:41,849
forest with a solar panel and an antenna

00:40:39,839 --> 00:40:44,280
and you know you actually want to have

00:40:41,849 --> 00:40:45,480
it reliable so a kernel isn't snap the

00:40:44,280 --> 00:40:46,680
whole file system is a snap all the

00:40:45,480 --> 00:40:48,089
applications are snaps when something

00:40:46,680 --> 00:40:49,950
news about can roll back automatically

00:40:48,089 --> 00:40:51,240
it's old super reliable and robust to

00:40:49,950 --> 00:40:53,550
the level which we could never do with

00:40:51,240 --> 00:40:55,770
deep package because like all of these

00:40:53,550 --> 00:40:57,270
are squash squash FS file system we

00:40:55,770 --> 00:40:58,890
don't unpack hundreds and thousands of

00:40:57,270 --> 00:41:00,660
files in the past system just mount them

00:40:58,890 --> 00:41:03,270
and pick the one we want to use so it's

00:41:00,660 --> 00:41:05,970
atomic and all the levels that matter so

00:41:03,270 --> 00:41:07,770
we have the necklace because IOT but you

00:41:05,970 --> 00:41:09,270
know improvements welcome really it's

00:41:07,770 --> 00:41:10,890
the best example I could come up with on

00:41:09,270 --> 00:41:12,660
a short notice about a reason why we

00:41:10,890 --> 00:41:13,920
would want to be able to do that but

00:41:12,660 --> 00:41:15,359
there's obviously other reasons like

00:41:13,920 --> 00:41:17,369
policy reasons maybe you don't want

00:41:15,359 --> 00:41:19,440
people to install you know weird games

00:41:17,369 --> 00:41:23,570
or stuff like that on on the computers

00:41:19,440 --> 00:41:23,570
or maybe of approved vendors or whatnot

00:41:41,540 --> 00:41:46,590
so that question is something that

00:41:44,370 --> 00:41:49,170
actually yes I actually have the answer

00:41:46,590 --> 00:41:51,810
to this because I have talked to Gustavo

00:41:49,170 --> 00:41:55,200
who is the tech lead and other things

00:41:51,810 --> 00:41:57,480
about this one of the things that we are

00:41:55,200 --> 00:41:59,280
working on for both genomes for verse

00:41:57,480 --> 00:42:01,710
nap t first because it's not quite in

00:41:59,280 --> 00:42:04,050
place yet because snap T now actually

00:42:01,710 --> 00:42:06,210
validates s PDX expressions as well as

00:42:04,050 --> 00:42:08,250
other conditions in the surgeons we can

00:42:06,210 --> 00:42:09,600
actually add filters that part is

00:42:08,250 --> 00:42:11,190
already in place just the store part

00:42:09,600 --> 00:42:19,020
doesn't like the gum software doesn't do

00:42:11,190 --> 00:42:21,330
it but epi can do well so snappy has

00:42:19,020 --> 00:42:23,040
these facilities the store side is you

00:42:21,330 --> 00:42:25,470
know there's work on that on going to

00:42:23,040 --> 00:42:27,290
export this information and now what

00:42:25,470 --> 00:42:29,850
we're also working on is getting the

00:42:27,290 --> 00:42:31,140
various desktop integration plugins to

00:42:29,850 --> 00:42:32,700
be able to respect that so that for

00:42:31,140 --> 00:42:34,650
example in Fedora it's very important

00:42:32,700 --> 00:42:35,960
that we present by default of view that

00:42:34,650 --> 00:42:39,420
doesn't include things that would

00:42:35,960 --> 00:42:41,850
encumber otherwise you know you know be

00:42:39,420 --> 00:42:42,990
bad for people to deal with so we want

00:42:41,850 --> 00:42:44,640
to be able to present a view that is

00:42:42,990 --> 00:42:46,680
consistent with fedoras principles by

00:42:44,640 --> 00:42:49,500
default if people want to choose to see

00:42:46,680 --> 00:42:51,170
other things we can obviously option of

00:42:49,500 --> 00:42:53,430
flipping it just like what happened with

00:42:51,170 --> 00:42:56,220
thirty-four third-party repos for fedora

00:42:53,430 --> 00:42:57,810
28 so just a component of that snow this

00:42:56,220 --> 00:42:59,940
store knows the license or everything

00:42:57,810 --> 00:43:01,410
this snap Dinos and comparison can

00:42:59,940 --> 00:43:03,600
they're analyzed and you can actually

00:43:01,410 --> 00:43:05,550
make a query give me like this like

00:43:03,600 --> 00:43:07,320
connect is this snap free software tiny

00:43:05,550 --> 00:43:09,270
installers so the only thing that's

00:43:07,320 --> 00:43:10,890
missing today is a flip switch in gnome

00:43:09,270 --> 00:43:13,110
software that just shows you a different

00:43:10,890 --> 00:43:21,420
list by default but the whole back-end

00:43:13,110 --> 00:43:22,590
work is done sure so I think this is

00:43:21,420 --> 00:43:24,960
tricky because you're actually shipping

00:43:22,590 --> 00:43:26,400
VLC so it's a legal question whether

00:43:24,960 --> 00:43:27,990
that's necessary or not I'm not gonna

00:43:26,400 --> 00:43:29,340
answer I'm just gonna point out that

00:43:27,990 --> 00:43:29,700
it's not coming from the repository of

00:43:29,340 --> 00:43:32,940
fedora

00:43:29,700 --> 00:43:34,410
it is not shipped on the image it is

00:43:32,940 --> 00:43:36,060
something they can just like saying

00:43:34,410 --> 00:43:38,130
leaked it's mad it's about to ship

00:43:36,060 --> 00:43:41,790
Firefox because you can go to a website

00:43:38,130 --> 00:43:43,920
with MPEG Island it's users the users

00:43:41,790 --> 00:43:45,630
actually gonna do the thing unless you

00:43:43,920 --> 00:43:49,400
start shipping snaps in the distribution

00:43:45,630 --> 00:43:49,400
well then then it's tricky

00:43:56,670 --> 00:44:00,790
but it's this mm-hmm but it's the same

00:43:59,650 --> 00:44:03,160
situation with the third-party

00:44:00,790 --> 00:44:04,630
repository toggle that you start when

00:44:03,160 --> 00:44:05,920
you run guns don't suffer the first time

00:44:04,630 --> 00:44:16,450
is asking if you want to have this or

00:44:05,920 --> 00:44:18,820
not and if you do you have VLC and no no

00:44:16,450 --> 00:44:20,440
there's Spotify there there's tons of

00:44:18,820 --> 00:44:22,390
stuff no no the switch is essentially

00:44:20,440 --> 00:44:24,369
saying instead of looking just as the

00:44:22,390 --> 00:44:28,210
federal repository look at anything that

00:44:24,369 --> 00:44:30,790
is there the while it is true that that

00:44:28,210 --> 00:44:32,859
list is curated it does include chrome

00:44:30,790 --> 00:44:36,010
and Chrome most definitely has patented

00:44:32,859 --> 00:44:37,869
technologies so you know it's up again

00:44:36,010 --> 00:44:39,940
we're the point is we want to make it so

00:44:37,869 --> 00:44:40,930
that by default we're not presenting

00:44:39,940 --> 00:44:42,460
people with things that they're either

00:44:40,930 --> 00:44:45,250
uncomfortable with or don't want to see

00:44:42,460 --> 00:44:46,780
or against fedoras principles but we

00:44:45,250 --> 00:44:48,490
want to be able to give the same level

00:44:46,780 --> 00:44:49,900
we want to give people the option of

00:44:48,490 --> 00:44:51,700
choosing if they want to deliberately

00:44:49,900 --> 00:44:53,830
ignore that with all the same warnings

00:44:51,700 --> 00:44:55,630
and whatnot that happens you know when

00:44:53,830 --> 00:44:59,560
we when the third-party repo setup hack

00:44:55,630 --> 00:45:01,119
occurs Richard I believe yes I mean just

00:44:59,560 --> 00:45:03,280
to kind of follow up there you know see

00:45:01,119 --> 00:45:05,440
in openSUSE we do not have the

00:45:03,280 --> 00:45:07,750
third-party toggle on software because

00:45:05,440 --> 00:45:10,359
you know it yeah for all of these

00:45:07,750 --> 00:45:13,540
reasons it's it's legally unsound at

00:45:10,359 --> 00:45:15,369
least in Europe in addition I mean that

00:45:13,540 --> 00:45:17,520
the general principle from our lawyers

00:45:15,369 --> 00:45:20,080
is one of if it's enabled by default

00:45:17,520 --> 00:45:21,850
then we are responsible for the

00:45:20,080 --> 00:45:24,609
distribution of everything via that

00:45:21,850 --> 00:45:26,500
software source so the Covenant the

00:45:24,609 --> 00:45:28,420
whole single unified snap store

00:45:26,500 --> 00:45:30,850
completely kills the either being

00:45:28,420 --> 00:45:32,800
anywhere near an automatic openSUSE

00:45:30,850 --> 00:45:34,869
installation because we can't trust a

00:45:32,800 --> 00:45:37,840
third party that we have no control over

00:45:34,869 --> 00:45:39,369
so it's it's just legally unsound we

00:45:37,840 --> 00:45:41,770
never could even if you're doing

00:45:39,369 --> 00:45:43,990
everything wonderfully you know it's

00:45:41,770 --> 00:45:46,540
we're the legal person responsible how

00:45:43,990 --> 00:45:47,800
could we trust you and that that's

00:45:46,540 --> 00:45:49,780
something really desperately need to

00:45:47,800 --> 00:45:51,220
look at because with flat-pack there's a

00:45:49,780 --> 00:45:53,440
story that we can live with with app

00:45:51,220 --> 00:45:58,519
images is the store we can live with and

00:45:53,440 --> 00:46:04,739
which oh there's our

00:45:58,519 --> 00:46:06,779
yep but it's a story we can live with

00:46:04,739 --> 00:46:08,489
better than the snap-on well I mean but

00:46:06,779 --> 00:46:11,430
because there's no story nap image yeah

00:46:08,489 --> 00:46:15,289
yeah oh yeah yeah so that yeah if you

00:46:11,430 --> 00:46:17,819
want what would you need to look at this

00:46:15,289 --> 00:46:20,220
some cases you can maybe make the

00:46:17,819 --> 00:46:22,109
analogy of Yaman open Susie I choose to

00:46:20,220 --> 00:46:23,339
install steam and therefore I as the

00:46:22,109 --> 00:46:25,019
user made the choice was an on the

00:46:23,339 --> 00:46:27,299
default and now can it run all the

00:46:25,019 --> 00:46:28,559
proprietary stuff and steam well that's

00:46:27,299 --> 00:46:29,910
okay I think that's like we can

00:46:28,559 --> 00:46:31,109
definitely make it better I mean this is

00:46:29,910 --> 00:46:32,880
really useful feedback when you let me

00:46:31,109 --> 00:46:34,049
make it better so maybe it could be

00:46:32,880 --> 00:46:35,339
installed by default but it gives you a

00:46:34,049 --> 00:46:38,220
different view by default that you can

00:46:35,339 --> 00:46:39,869
control that's fine but they're always

00:46:38,220 --> 00:46:41,789
just ways to install it and let people

00:46:39,869 --> 00:46:43,410
use it because it's their choice not the

00:46:41,789 --> 00:46:44,940
distribution at this point I doubt you

00:46:43,410 --> 00:46:46,739
know the distribution is legally

00:46:44,940 --> 00:46:49,049
encumbered because someone may install

00:46:46,739 --> 00:46:50,519
steam and therefore installed

00:46:49,049 --> 00:46:54,859
proprietary software also may be

00:46:50,519 --> 00:46:54,859
patented so I mean I think there

00:46:58,950 --> 00:47:02,680
hold on but steam is a gateway to a load

00:47:01,809 --> 00:47:06,299
of things that are definitely

00:47:02,680 --> 00:47:06,299
proprietary so I don't get the point

00:47:13,059 --> 00:47:19,190
so if you ship steam in the repository

00:47:16,520 --> 00:47:22,790
and someone puts bad stuff in steam and

00:47:19,190 --> 00:47:24,859
valve says we will not remove it this is

00:47:22,790 --> 00:47:26,869
the exact situation that you would be if

00:47:24,859 --> 00:47:29,359
you ship this lamp store these steamed

00:47:26,869 --> 00:47:32,089
an intermediary so don't you know adding

00:47:29,359 --> 00:47:34,040
yeah adding an app store so we don't

00:47:32,089 --> 00:47:36,230
expose name by default choosing to add

00:47:34,040 --> 00:47:39,530
an app store of the third party and then

00:47:36,230 --> 00:47:40,970
find no problem if we enabled steam by

00:47:39,530 --> 00:47:42,920
default so if steam was automatically

00:47:40,970 --> 00:47:45,380
pulling stuff from the third party which

00:47:42,920 --> 00:47:46,700
is basically a sign okay yeah then we're

00:47:45,380 --> 00:47:49,160
in legal trouble that's the difference

00:47:46,700 --> 00:47:50,809
sure I understand you know I think we

00:47:49,160 --> 00:47:52,520
just need to have a conversation of what

00:47:50,809 --> 00:47:53,780
will be accessible because I think we

00:47:52,520 --> 00:47:55,970
have the means of figuring out how to

00:47:53,780 --> 00:47:57,650
make it happen so you know for what it's

00:47:55,970 --> 00:47:59,660
worth I think this this is more or less

00:47:57,650 --> 00:48:01,849
the same conversation we have you know

00:47:59,660 --> 00:48:04,220
when it comes to fedora and so well

00:48:01,849 --> 00:48:06,470
right now obviously activating the snap

00:48:04,220 --> 00:48:08,119
integrations is actually the users

00:48:06,470 --> 00:48:11,450
choice it's not active by default it's

00:48:08,119 --> 00:48:13,970
not shipped on any images and so for us

00:48:11,450 --> 00:48:15,349
the question is more or less basically

00:48:13,970 --> 00:48:17,480
the same kind of answer that you know

00:48:15,349 --> 00:48:20,119
you Richard have for openSUSE with steam

00:48:17,480 --> 00:48:21,470
basically user has to choose to even

00:48:20,119 --> 00:48:22,760
install it in the first place and at

00:48:21,470 --> 00:48:23,750
that point they'll see the view and then

00:48:22,760 --> 00:48:26,390
they'll get the question about which

00:48:23,750 --> 00:48:27,829
views they want to see so I think from

00:48:26,390 --> 00:48:30,500
the Fedora perspective at least how

00:48:27,829 --> 00:48:32,420
we're doing this now we're is we're in

00:48:30,500 --> 00:48:34,040
the clear but we do need to start having

00:48:32,420 --> 00:48:35,299
that conversation I think it was

00:48:34,040 --> 00:48:39,559
actually great I'm glad that you did

00:48:35,299 --> 00:48:43,040
bring that up this is not just me but I

00:48:39,559 --> 00:48:45,200
definitely want to have a more

00:48:43,040 --> 00:48:49,099
conversation about that and less ash

00:48:45,200 --> 00:48:50,030
involved check check so I mean

00:48:49,099 --> 00:48:53,119
definitely this really great feedback

00:48:50,030 --> 00:48:54,980
because we need this kind of feedback to

00:48:53,119 --> 00:48:56,390
know what is the blocker for you know

00:48:54,980 --> 00:48:57,859
making this just available to users and

00:48:56,390 --> 00:49:00,260
make it pleasant and easy to use

00:48:57,859 --> 00:49:01,940
it's one thing legal while studying you

00:49:00,260 --> 00:49:03,230
know in sync with the principles of the

00:49:01,940 --> 00:49:09,470
given medium so I think this is all

00:49:03,230 --> 00:49:13,220
great any more questions so when we were

00:49:09,470 --> 00:49:15,170
talking about when when some application

00:49:13,220 --> 00:49:18,619
breaks and I need to revert to some

00:49:15,170 --> 00:49:22,040
older version so me as a user can I

00:49:18,619 --> 00:49:24,619
return to any arbitrary older version or

00:49:22,040 --> 00:49:26,540
can I return just the latest one so

00:49:24,619 --> 00:49:28,430
that's actually a fantastic quest

00:49:26,540 --> 00:49:31,010
as you saw earlier in the demo Zigman

00:49:28,430 --> 00:49:33,500
actually did that exactly and you can

00:49:31,010 --> 00:49:36,620
actually speak when you do the refresh

00:49:33,500 --> 00:49:38,180
you can he said refresh to a channel but

00:49:36,620 --> 00:49:39,830
you can actually refresh to any revision

00:49:38,180 --> 00:49:40,670
that's installed or has been installed

00:49:39,830 --> 00:49:43,310
on your computer

00:49:40,670 --> 00:49:44,540
barring barring certain restrictions

00:49:43,310 --> 00:49:46,250
that the developer has indicated that

00:49:44,540 --> 00:49:48,020
say for example there may be a

00:49:46,250 --> 00:49:50,780
blacklisted revision or something has

00:49:48,020 --> 00:49:52,610
been there's a feature that we didn't

00:49:50,780 --> 00:49:54,080
talk about called epics and stepped up

00:49:52,610 --> 00:49:55,670
gray if you've gone through a sufficient

00:49:54,080 --> 00:49:56,870
number of data migrations the the

00:49:55,670 --> 00:49:59,660
developer may have said that there's

00:49:56,870 --> 00:50:01,100
going backwards at this point is like a

00:49:59,660 --> 00:50:02,270
super bad idea so I don't want to let

00:50:01,100 --> 00:50:04,250
you do it

00:50:02,270 --> 00:50:05,630
there is a certain point but generally

00:50:04,250 --> 00:50:07,220
speaking I think most software haven't

00:50:05,630 --> 00:50:09,590
been using that particular restriction

00:50:07,220 --> 00:50:11,000
so yeah as a general rule you can assume

00:50:09,590 --> 00:50:12,230
that you can go backwards and forwards

00:50:11,000 --> 00:50:14,000
with provided that the data has been

00:50:12,230 --> 00:50:15,620
captured so that it can roll back and

00:50:14,000 --> 00:50:17,630
move forward the data migrations and

00:50:15,620 --> 00:50:19,130
just just clarify one specific detail

00:50:17,630 --> 00:50:20,660
but you can always go to any revision

00:50:19,130 --> 00:50:22,340
you just publish in that channel so you

00:50:20,660 --> 00:50:23,780
know like if you look at snapping for

00:50:22,340 --> 00:50:24,890
MySQL you're gonna see lots of things

00:50:23,780 --> 00:50:27,320
you can go to like all the major

00:50:24,890 --> 00:50:29,360
revisions bunch of like you know nightly

00:50:27,320 --> 00:50:31,010
builds from from master and and some

00:50:29,360 --> 00:50:32,870
other things you can always go to all of

00:50:31,010 --> 00:50:34,550
these in addition you can go to any

00:50:32,870 --> 00:50:36,380
revision that you had on your machine

00:50:34,550 --> 00:50:38,690
like it snappy when you refresh this

00:50:36,380 --> 00:50:40,580
you're a snap it keeps up to three loop

00:50:38,690 --> 00:50:42,050
it's tough it's a toggle now so you can

00:50:40,580 --> 00:50:44,780
keep like up to one or up to one hundred

00:50:42,050 --> 00:50:46,400
it keeps a set of revisions you have

00:50:44,780 --> 00:50:48,320
before along with their data so you can

00:50:46,400 --> 00:50:50,390
go back in case something breaks on like

00:50:48,320 --> 00:50:51,800
an IOT device goes the factory one we

00:50:50,390 --> 00:50:53,720
can go to always in case everything

00:50:51,800 --> 00:50:55,820
breaks so you were always a way to you

00:50:53,720 --> 00:50:58,880
know bootstrap the machine so this means

00:50:55,820 --> 00:51:00,410
that as a user you have a public set of

00:50:58,880 --> 00:51:02,570
things you can go to which are just the

00:51:00,410 --> 00:51:04,640
published versions and some branches

00:51:02,570 --> 00:51:05,870
plus the things you had before on your

00:51:04,640 --> 00:51:07,640
machine that you can still go back to

00:51:05,870 --> 00:51:09,140
because of the data as a developer you

00:51:07,640 --> 00:51:10,460
can always go to any revision that is in

00:51:09,140 --> 00:51:11,300
the store even if it's not published

00:51:10,460 --> 00:51:12,650
because you can actually upload a

00:51:11,300 --> 00:51:14,570
revision and not publish it and you just

00:51:12,650 --> 00:51:16,730
use it on your machines this is one way

00:51:14,570 --> 00:51:18,830
in which people actually use snaps they

00:51:16,730 --> 00:51:20,510
just you know have their app publish it

00:51:18,830 --> 00:51:22,550
to the store or publish upload it to the

00:51:20,510 --> 00:51:23,840
store it's private and there's use it

00:51:22,550 --> 00:51:25,550
under your fleet of machines that's fine

00:51:23,840 --> 00:51:27,980
or even just copy the file around

00:51:25,550 --> 00:51:29,180
install it there but as a developer you

00:51:27,980 --> 00:51:30,980
have access to anything you have

00:51:29,180 --> 00:51:32,420
uploaded as a user you have the access

00:51:30,980 --> 00:51:34,220
to the things that the developer chose

00:51:32,420 --> 00:51:36,050
to publish or the things you were on

00:51:34,220 --> 00:51:37,400
which means the things you were on

00:51:36,050 --> 00:51:39,180
before because the developer chose to

00:51:37,400 --> 00:51:43,030
publish it

00:51:39,180 --> 00:51:46,000
and can I have several revisions active

00:51:43,030 --> 00:51:48,250
at the same time for a snap the answer

00:51:46,000 --> 00:51:50,920
to that is actually yes because if

00:51:48,250 --> 00:51:52,720
antastic Zigman is very very happy about

00:51:50,920 --> 00:51:54,369
this because he spent like two months

00:51:52,720 --> 00:51:57,190
working on making that possible it's not

00:51:54,369 --> 00:51:58,300
me it's match a from our team so we have

00:51:57,190 --> 00:52:00,730
something which we call parallel

00:51:58,300 --> 00:52:03,250
installs so I can say it's like think

00:52:00,730 --> 00:52:04,540
about a web developer thinking in I'm

00:52:03,250 --> 00:52:06,070
insurance gonna do something on my

00:52:04,540 --> 00:52:09,640
laptop but it's gonna look like I'm like

00:52:06,070 --> 00:52:12,430
a server oh it's that okay so I can say

00:52:09,640 --> 00:52:14,619
like snap install my sequel underscore

00:52:12,430 --> 00:52:17,619
production it's not installed my sequel

00:52:14,619 --> 00:52:18,970
underscore devel I had just choose like

00:52:17,619 --> 00:52:21,609
I have the same snap install device

00:52:18,970 --> 00:52:24,640
under a different name so I can shoot

00:52:21,609 --> 00:52:27,010
has separate data sets obviously that I

00:52:24,640 --> 00:52:29,500
can freely choose to move like I can

00:52:27,010 --> 00:52:31,869
keep production on like five point X

00:52:29,500 --> 00:52:34,510
stable and just move the valve to like

00:52:31,869 --> 00:52:37,119
fine for X like candidate or edge or six

00:52:34,510 --> 00:52:39,220
I can essentially install a snap on my

00:52:37,119 --> 00:52:40,900
machine any number of times I want three

00:52:39,220 --> 00:52:42,730
different names so it's gonna be like

00:52:40,900 --> 00:52:44,950
you know the prefix is the same and

00:52:42,730 --> 00:52:46,930
you're gonna have you know an identifier

00:52:44,950 --> 00:52:49,810
of the instance essentially so this is

00:52:46,930 --> 00:52:51,970
modularity with parallel ability take

00:52:49,810 --> 00:52:53,200
that availability and parallel install

00:52:51,970 --> 00:52:54,460
ability and you get to choose every

00:52:53,200 --> 00:52:56,560
single revision of every version of

00:52:54,460 --> 00:52:58,510
every track of every channel and this is

00:52:56,560 --> 00:53:00,640
this is in master now it's gonna be

00:52:58,510 --> 00:53:03,069
roughly either it's gonna be available

00:53:00,640 --> 00:53:04,960
in the next release as an opt-in because

00:53:03,069 --> 00:53:06,609
that's a new feature and it's gonna have

00:53:04,960 --> 00:53:08,050
general availability perhaps in the

00:53:06,609 --> 00:53:10,900
following release which is probably two

00:53:08,050 --> 00:53:12,190
months from now and is that the next

00:53:10,900 --> 00:53:14,619
release because it includes some of the

00:53:12,190 --> 00:53:18,369
fixes that is some of the fixes that

00:53:14,619 --> 00:53:20,170
Zigman finally got merged today probably

00:53:18,369 --> 00:53:22,270
the next release to 35 whenever it gets

00:53:20,170 --> 00:53:24,040
tagged he and I are gonna work on

00:53:22,270 --> 00:53:25,420
actually bringing it into fedora so

00:53:24,040 --> 00:53:27,819
expect to see it as a Bodi update

00:53:25,420 --> 00:53:29,050
sometime for all stable Fedora releases

00:53:27,819 --> 00:53:31,240
and another thing that we're working on

00:53:29,050 --> 00:53:33,400
or I'm working on because it's

00:53:31,240 --> 00:53:36,099
complicated and awful and hard is

00:53:33,400 --> 00:53:38,470
actually bringing it also to Apple 7 so

00:53:36,099 --> 00:53:39,970
we want to also add this devil 7 and

00:53:38,470 --> 00:53:41,920
I've been gradually working on this for

00:53:39,970 --> 00:53:46,480
the past I think what eight nine months

00:53:41,920 --> 00:53:48,400
or so it's actually quite it's a lot of

00:53:46,480 --> 00:53:50,309
work done within the security stack in

00:53:48,400 --> 00:53:52,439
fedora to make things really

00:53:50,309 --> 00:53:54,719
good and we've been working off of the

00:53:52,439 --> 00:53:57,180
assumption that like that stuff is

00:53:54,719 --> 00:54:00,209
available to us some of that stuff have

00:53:57,180 --> 00:54:02,489
doesn't exist in el7 and for a while

00:54:00,209 --> 00:54:04,499
that made it just not possible and as

00:54:02,489 --> 00:54:07,380
every rebase of RAL 7 has occurred and

00:54:04,499 --> 00:54:08,789
sent all seven consequently it does make

00:54:07,380 --> 00:54:10,410
it easier and easier to bring it and so

00:54:08,789 --> 00:54:12,119
we're like nearly to the point where I

00:54:10,410 --> 00:54:13,799
can actually start being comfortable

00:54:12,119 --> 00:54:17,009
with shipping it to epple 7 itself

00:54:13,799 --> 00:54:19,949
although to be quite honest you press

00:54:17,009 --> 00:54:21,779
aim cadence for releases that we do for

00:54:19,949 --> 00:54:24,660
Apple 7 that we do for fedora itself

00:54:21,779 --> 00:54:26,099
because it's a it's an application that

00:54:24,660 --> 00:54:29,339
people don't generally integrate with

00:54:26,099 --> 00:54:30,989
and it also is a gateway application for

00:54:29,339 --> 00:54:33,779
accessing other services and stuff that

00:54:30,989 --> 00:54:35,640
people will generally want to use so I'm

00:54:33,779 --> 00:54:37,709
do this on a monthly just because

00:54:35,640 --> 00:54:39,239
frankly most of the point releases are

00:54:37,709 --> 00:54:40,650
most the point releases that they make

00:54:39,239 --> 00:54:42,029
are irrelevant to me because they're

00:54:40,650 --> 00:54:44,749
mostly because they're broken on a bun

00:54:42,029 --> 00:54:46,859
too and none of the breakages affect me

00:54:44,749 --> 00:54:48,930
so the point releases we make yar

00:54:46,859 --> 00:54:50,489
because we have the very integrated QA

00:54:48,930 --> 00:54:51,630
pipeline if something breaks we actually

00:54:50,489 --> 00:54:54,359
have to make a new release so that

00:54:51,630 --> 00:54:56,429
either the test is corrected or you know

00:54:54,359 --> 00:54:58,380
something else happens that makes it

00:54:56,429 --> 00:54:59,699
fixed so with this normally a point

00:54:58,380 --> 00:55:01,229
release but typically it doesn't really

00:54:59,699 --> 00:55:03,630
mean anything in the applications in the

00:55:01,229 --> 00:55:05,160
whole QA around it and also on the core

00:55:03,630 --> 00:55:06,839
devices because it's the same thing that

00:55:05,160 --> 00:55:08,549
gets shipped to vault desktop service

00:55:06,839 --> 00:55:10,890
and IOT devices some of the things are

00:55:08,549 --> 00:55:12,900
shipped are actually only meaningful in

00:55:10,890 --> 00:55:15,029
an IOT context where it snaps run

00:55:12,900 --> 00:55:16,349
without anything else and they have to

00:55:15,029 --> 00:55:18,479
manage the kernel they have to manage

00:55:16,349 --> 00:55:20,609
the bootloader and everything else so

00:55:18,479 --> 00:55:22,289
some of the updates are actually no big

00:55:20,609 --> 00:55:23,819
yeah you get the update but there's

00:55:22,289 --> 00:55:25,489
nothing really changing for you because

00:55:23,819 --> 00:55:27,689
you're not using that part of the code

00:55:25,489 --> 00:55:29,429
reason why you tend to only see me do

00:55:27,689 --> 00:55:31,679
snap update snap D updates

00:55:29,429 --> 00:55:34,890
well more or less monthly maybe every

00:55:31,679 --> 00:55:36,809
two months because sometimes it doesn't

00:55:34,890 --> 00:55:40,439
work and then fixing it takes a lot of

00:55:36,809 --> 00:55:42,150
effort and whatever so I try to keep up

00:55:40,439 --> 00:55:44,069
as close with this with a snappy

00:55:42,150 --> 00:55:46,219
upstream maintenance and like Zigman and

00:55:44,069 --> 00:55:48,959
I actually work very closely upstream a

00:55:46,219 --> 00:55:50,880
lot because like it's a big deal that we

00:55:48,959 --> 00:55:53,130
want to make sure everything is working

00:55:50,880 --> 00:55:55,529
as well as it can to the best of our

00:55:53,130 --> 00:55:56,999
ability now anyone's interested one of

00:55:55,529 --> 00:55:59,269
the if you are interested and want to

00:55:56,999 --> 00:56:01,469
help us with making this better please

00:55:59,269 --> 00:56:04,300
get in touch with either one of us

00:56:01,469 --> 00:56:06,790
either me or segment and like we can

00:56:04,300 --> 00:56:08,740
we we have all kinds of things that you

00:56:06,790 --> 00:56:10,210
know we would love to have help on and

00:56:08,740 --> 00:56:11,740
just you know and we'll give you cookies

00:56:10,210 --> 00:56:15,310
and maybe you'll get to see like random

00:56:11,740 --> 00:56:17,080
awesome countries to maybe I don't know

00:56:15,310 --> 00:56:17,830
probably not but you know there's at

00:56:17,080 --> 00:56:22,810
least good cookies

00:56:17,830 --> 00:56:24,400
yeah any other questions okay a last

00:56:22,810 --> 00:56:28,540
question because I think we are already

00:56:24,400 --> 00:56:32,140
over time so if I want to create if I

00:56:28,540 --> 00:56:35,700
want to create a snap and it's not

00:56:32,140 --> 00:56:39,100
currently packaged in federal let's say

00:56:35,700 --> 00:56:41,050
but I want to use the existing rpms for

00:56:39,100 --> 00:56:45,070
dependencies of the program and then

00:56:41,050 --> 00:56:47,590
just compile the actual application is

00:56:45,070 --> 00:56:49,180
it possible so that is literally the

00:56:47,590 --> 00:56:51,070
whole point of what we're trying to do

00:56:49,180 --> 00:56:53,110
because aside from being able to use

00:56:51,070 --> 00:56:54,940
Fedora content for door rpms for like

00:56:53,110 --> 00:56:57,310
the applications themselves we also want

00:56:54,940 --> 00:56:59,260
to make it so like yeah finally could

00:56:57,310 --> 00:57:02,310
you unlock the screen so that the we can

00:56:59,260 --> 00:57:04,990
go back to the slide with the stacks

00:57:02,310 --> 00:57:07,270
thank you and connect to the internet

00:57:04,990 --> 00:57:12,130
again yes really because you've

00:57:07,270 --> 00:57:16,960
disconnected for too long and okay so

00:57:12,130 --> 00:57:18,460
now there we go so this is sort of the

00:57:16,960 --> 00:57:20,500
point of this particular slide with the

00:57:18,460 --> 00:57:22,510
development stacks pre-built apps is

00:57:20,500 --> 00:57:24,550
only one of them but the idea is all

00:57:22,510 --> 00:57:26,170
these stacks um so I'm gonna use some

00:57:24,550 --> 00:57:29,140
snap craft terminology here

00:57:26,170 --> 00:57:31,870
so snap craft has a concept of parts and

00:57:29,140 --> 00:57:33,670
inputs and sources and the idea is that

00:57:31,870 --> 00:57:36,310
these would be defined in the Fedora

00:57:33,670 --> 00:57:39,640
context to use the fedora framework

00:57:36,310 --> 00:57:40,000
stacks app libraries language things and

00:57:39,640 --> 00:57:41,800
so on

00:57:40,000 --> 00:57:43,000
and so like for example let's talk about

00:57:41,800 --> 00:57:45,100
Python cuz that's a very common thing

00:57:43,000 --> 00:57:46,300
you know maybe you want to use Python 3

00:57:45,100 --> 00:57:48,070
7 it's not available anywhere else

00:57:46,300 --> 00:57:49,300
nobody else has it yet or Python 3 8

00:57:48,070 --> 00:57:51,040
because it's got an alpha in the bra

00:57:49,300 --> 00:57:53,230
height or whatever and you want to build

00:57:51,040 --> 00:57:54,850
an application that uses that so you you

00:57:53,230 --> 00:57:56,920
you choose a fedora base that includes

00:57:54,850 --> 00:57:58,330
that Python you install that Python you

00:57:56,920 --> 00:57:59,860
then tell it to pull in all the

00:57:58,330 --> 00:58:02,410
dependencies that you want there Python

00:57:59,860 --> 00:58:05,500
modules and whatnot then you just do the

00:58:02,410 --> 00:58:07,870
PIP thing inside or the or the pi build

00:58:05,500 --> 00:58:10,330
or whatever whatever mechanism you used

00:58:07,870 --> 00:58:14,010
hits is here and the packages are here

00:58:10,330 --> 00:58:14,010
so so you can do whatever you want there

00:58:16,430 --> 00:58:21,810
ya know it doesn't matter that yeah yeah

00:58:19,590 --> 00:58:23,460
so essentially the point is that this is

00:58:21,810 --> 00:58:25,140
not that doesn't mean you have to have a

00:58:23,460 --> 00:58:27,030
Python package it pieces the Python

00:58:25,140 --> 00:58:29,280
language with its ecosystem every

00:58:27,030 --> 00:58:31,500
pre-built rpms here so you can pick

00:58:29,280 --> 00:58:33,480
WebKit and if this is a community that

00:58:31,500 --> 00:58:34,980
chooses to use a certain way to deploy

00:58:33,480 --> 00:58:37,770
and install and manage software like dip

00:58:34,980 --> 00:58:40,560
or whatever he's here gems or whatever

00:58:37,770 --> 00:58:42,120
is here cargo or I don't know rust and

00:58:40,560 --> 00:58:43,830
these things are in the native thing for

00:58:42,120 --> 00:58:45,660
that community so essentially when

00:58:43,830 --> 00:58:48,180
there's a community making for instance

00:58:45,660 --> 00:58:50,370
electron applications the native thing

00:58:48,180 --> 00:58:52,290
for them is some version of electron

00:58:50,370 --> 00:58:54,180
builder I suspect and we haven't

00:58:52,290 --> 00:58:55,890
invented a new way and said this is

00:58:54,180 --> 00:58:57,930
better you have to learn this now we

00:58:55,890 --> 00:58:59,400
actually went to them and said electron

00:58:57,930 --> 00:59:01,020
pool is great and now it's actually when

00:58:59,400 --> 00:59:03,930
you make out of the electron building

00:59:01,020 --> 00:59:05,550
you get a snap so for them it's the same

00:59:03,930 --> 00:59:07,260
thing they're used to it so this is

00:59:05,550 --> 00:59:09,060
exactly why all these icons are here

00:59:07,260 --> 00:59:11,790
this is the same thing people are using

00:59:09,060 --> 00:59:14,040
these communities and this is the entire

00:59:11,790 --> 00:59:15,480
distribution as it's you know as its

00:59:14,040 --> 00:59:17,160
muscle so you can take all the good

00:59:15,480 --> 00:59:18,720
stuff including pulling the security

00:59:17,160 --> 00:59:20,160
fixes so one thing I want to highlight

00:59:18,720 --> 00:59:23,310
because this is super cool Aaron's

00:59:20,160 --> 00:59:26,220
really unknown if I'm a developer and I

00:59:23,310 --> 00:59:29,970
pull in as a prebuilt application just

00:59:26,220 --> 00:59:32,370
some packages right and there's a CV I

00:59:29,970 --> 00:59:35,100
get an indication that my my snap may be

00:59:32,370 --> 00:59:36,720
vulnerable to the CVE and there are

00:59:35,100 --> 00:59:38,370
instructions on how to rebuild my stamp

00:59:36,720 --> 00:59:40,560
their instructions what to do to check

00:59:38,370 --> 00:59:42,090
there's more information about CVS just

00:59:40,560 --> 00:59:43,500
sent to the developer because we don't

00:59:42,090 --> 00:59:45,480
know it's actually used by the stem so

00:59:43,500 --> 00:59:47,190
can Excel tell it in public but the

00:59:45,480 --> 00:59:49,230
whole pipeline of security updates goes

00:59:47,190 --> 00:59:50,610
really nicely because I can say okay I

00:59:49,230 --> 00:59:53,220
may be vulnerable I'm just gonna hit

00:59:50,610 --> 00:59:55,020
this button to rebuild I'm gonna publish

00:59:53,220 --> 00:59:57,060
it and people gonna get it with a delta

00:59:55,020 --> 00:59:58,560
update and when it comes to for the

00:59:57,060 --> 01:00:00,900
Fedora perspective the idea was that we

00:59:58,560 --> 01:00:03,150
integrate with things like our update

01:00:00,900 --> 01:00:05,460
info publishing and bori and whatnot and

01:00:03,150 --> 01:00:06,930
we since we know what the content is

01:00:05,460 --> 01:00:10,830
inside and we have an introspective

01:00:06,930 --> 01:00:13,200
which I already wrote for identifying

01:00:10,830 --> 01:00:14,640
rpms and what's going on inside we can

01:00:13,200 --> 01:00:16,830
actually just go and see okay this

01:00:14,640 --> 01:00:18,420
version is match to this update info say

01:00:16,830 --> 01:00:20,640
this packages match to this update info

01:00:18,420 --> 01:00:22,650
saying this NVR is newer and this one

01:00:20,640 --> 01:00:22,950
fixes this CVE this one's older than

01:00:22,650 --> 01:00:24,420
that

01:00:22,950 --> 01:00:26,820
maybe there's something that's affected

01:00:24,420 --> 01:00:27,250
so like we want to introduce that kind

01:00:26,820 --> 01:00:29,050
of pipeline

01:00:27,250 --> 01:00:31,590
also for fedora and hopefully we can

01:00:29,050 --> 01:00:33,250
actually do some interesting things for

01:00:31,590 --> 01:00:34,720
applications that are published by

01:00:33,250 --> 01:00:36,520
fedora and within the release

01:00:34,720 --> 01:00:38,050
engineering pipeline to make things a

01:00:36,520 --> 01:00:39,100
little bit better for things that people

01:00:38,050 --> 01:00:40,480
want to publish under the fedora

01:00:39,100 --> 01:00:42,700
organization but for you as an

01:00:40,480 --> 01:00:44,290
individual developer you know we have we

01:00:42,700 --> 01:00:46,270
have some resources for that kind of

01:00:44,290 --> 01:00:48,040
stuff and the other important thing is

01:00:46,270 --> 01:00:49,480
this is all mix and match so that means

01:00:48,040 --> 01:00:51,790
that you can have some stuff that is

01:00:49,480 --> 01:00:53,440
pre-built RPM's some stuff that uses pip

01:00:51,790 --> 01:00:56,170
some stuff that uses gem some stuff that

01:00:53,440 --> 01:00:59,080
uses fuck-all who knows what uses go and

01:00:56,170 --> 01:01:01,540
then all those other things and it will

01:00:59,080 --> 01:01:03,880
it has introspect errs and part managers

01:01:01,540 --> 01:01:05,680
for all of those things to be able to

01:01:03,880 --> 01:01:08,470
tell you whether or not you might have

01:01:05,680 --> 01:01:09,910
to do something as an interesting

01:01:08,470 --> 01:01:11,440
observation like there was a session

01:01:09,910 --> 01:01:13,210
here on this course like this course is

01:01:11,440 --> 01:01:16,030
a nicer thing than a mailing list

01:01:13,210 --> 01:01:17,440
obviously and it may be useful to use so

01:01:16,030 --> 01:01:19,690
if you go to the forum that snap craft

01:01:17,440 --> 01:01:21,340
at i/o that is the the discourse

01:01:19,690 --> 01:01:23,650
instance obviously and all of that is a

01:01:21,340 --> 01:01:25,090
snap the whole discourse is a snap the

01:01:23,650 --> 01:01:26,500
database is a snap all that thing is

01:01:25,090 --> 01:01:27,820
running from a snap so you can

01:01:26,500 --> 01:01:29,860
essentially it's not like you have to

01:01:27,820 --> 01:01:33,130
have like my application like Python -

01:01:29,860 --> 01:01:34,990
something - develop you know that it's

01:01:33,130 --> 01:01:36,670
like a huge split it's you can put all

01:01:34,990 --> 01:01:38,740
of these things in a single package if

01:01:36,670 --> 01:01:41,950
that's what the but what make sense to

01:01:38,740 --> 01:01:43,060
your system well if you wanted to build

01:01:41,950 --> 01:01:44,680
something that's super weird and

01:01:43,060 --> 01:01:46,570
complicated you want to put Koji as a

01:01:44,680 --> 01:01:47,980
snap that would involve pulling in

01:01:46,570 --> 01:01:49,780
Python stuff that would involve pulling

01:01:47,980 --> 01:01:51,970
in C and C++ stuff some pre-built

01:01:49,780 --> 01:01:53,950
applications maybe you're gonna wind up

01:01:51,970 --> 01:01:56,050
having some application services like

01:01:53,950 --> 01:01:58,240
database stuff you're gonna have you

01:01:56,050 --> 01:01:59,530
know a web server thing and then so all

01:01:58,240 --> 01:02:02,530
those things together would wind up

01:01:59,530 --> 01:02:04,150
being in a snap and then or if you

01:02:02,530 --> 01:02:05,320
choose to for whatever reason you can

01:02:04,150 --> 01:02:07,030
actually make multiple snaps and make

01:02:05,320 --> 01:02:09,550
connections between them to make like

01:02:07,030 --> 01:02:10,660
okay all these things I already maintain

01:02:09,550 --> 01:02:12,490
have Python so I'm just gonna have my

01:02:10,660 --> 01:02:14,950
own pison step I'm gonna connect it to

01:02:12,490 --> 01:02:16,750
all these I don't have to have a another

01:02:14,950 --> 01:02:18,610
copy of Python and B I can actually ship

01:02:16,750 --> 01:02:21,460
an update to this my version of Python

01:02:18,610 --> 01:02:23,500
across my fleet of snaps and hey they

01:02:21,460 --> 01:02:24,970
update so there's with there ways to mix

01:02:23,500 --> 01:02:26,320
and match you know how much you're gonna

01:02:24,970 --> 01:02:27,610
have in one snap and how much you have

01:02:26,320 --> 01:02:29,080
and you want to share among your snaps

01:02:27,610 --> 01:02:30,490
it's really interesting because it's not

01:02:29,080 --> 01:02:31,840
among the planets so if you make a

01:02:30,490 --> 01:02:33,490
Python stuff you're not promising a

01:02:31,840 --> 01:02:35,200
support for the planet it's just your

01:02:33,490 --> 01:02:36,970
pipe your snaps that can actually use it

01:02:35,200 --> 01:02:38,890
and one can install it but they cannot

01:02:36,970 --> 01:02:40,060
refer to it so they cannot like you're

01:02:38,890 --> 01:02:41,110
not gonna be on the hook just because

01:02:40,060 --> 01:02:43,150
you made some

01:02:41,110 --> 01:02:44,800
with some files in it and then someone

01:02:43,150 --> 01:02:47,110
actually uses it in some way you don't

01:02:44,800 --> 01:02:48,190
know about but then you change it and

01:02:47,110 --> 01:02:49,810
you broke the other guys so this is

01:02:48,190 --> 01:02:50,890
impossible in the snap world because

01:02:49,810 --> 01:02:52,180
essentially you can only break yourself

01:02:50,890 --> 01:02:56,470
which are always good by shipping a

01:02:52,180 --> 01:03:06,850
broken snap you have if you break your

01:02:56,470 --> 01:03:08,470
users it's all your fault okay but thank

01:03:06,850 --> 01:03:14,050
you for coming

01:03:08,470 --> 01:03:14,050

YouTube URL: https://www.youtube.com/watch?v=xKPI8srvrjs


