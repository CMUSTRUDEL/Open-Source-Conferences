Title: Flock 2018 - Improving Fedora Compose process
Publication date: 2018-08-29
Playlist: Flock 2018
Description: 
	Wednesday, August 8, 2018
2:30pm - 3:20pm
@Hamburg 3+5

Talk: Improving Fedora Compose process
Presenters: Lubos Sedlar, Mohan Boddu

Description: Fedora's compose process creates deliverables such as bootable isos, installation trees, and more. Release Engineering want to reduce the compose process from today's eight hour minimum to something allowing faster iteration.

The community is invited to listen to our proposals and share their own ideas about how to make composes faster. We can all benefit from more consistently usable nightly rawhide composes and faster respins for testers during the development freeze.
Captions: 
	00:00:02,899 --> 00:00:10,650
okay hello welcome my name is Luba Mir

00:00:07,740 --> 00:00:12,090
this is Mohan and we're well we're we

00:00:10,650 --> 00:00:14,340
will try and tell you something about

00:00:12,090 --> 00:00:16,170
what happens with Fedora composes how

00:00:14,340 --> 00:00:19,140
they are done what issues there are and

00:00:16,170 --> 00:00:21,900
what might be possible to do not fixing

00:00:19,140 --> 00:00:24,570
that like ended keynotes you heard like

00:00:21,900 --> 00:00:27,869
a lot about it what's the bright future

00:00:24,570 --> 00:00:31,349
and what what are like the hi little

00:00:27,869 --> 00:00:33,840
goals this is nothing like that we will

00:00:31,349 --> 00:00:35,430
basically just tell you what we can do

00:00:33,840 --> 00:00:38,309
to keep on tracking the way we are right

00:00:35,430 --> 00:00:41,270
now just slightly faster so that we

00:00:38,309 --> 00:00:44,040
eliminate some of the problems so first

00:00:41,270 --> 00:00:46,070
we sort of try and describe what

00:00:44,040 --> 00:00:49,289
problems you are facing why it's bad

00:00:46,070 --> 00:00:51,329
then try and describe say what's

00:00:49,289 --> 00:00:54,030
actually the cause of those slowness

00:00:51,329 --> 00:00:56,899
issues that we are facing and then we're

00:00:54,030 --> 00:00:59,190
trying brainstorm some solutions and

00:00:56,899 --> 00:01:02,510
this is actually where you come in

00:00:59,190 --> 00:01:06,450
because we are looking for suggestions

00:01:02,510 --> 00:01:08,299
so the main problem is that Fedora

00:01:06,450 --> 00:01:11,700
campuses are taking way too long

00:01:08,299 --> 00:01:14,340
so for a height on a good day it's eight

00:01:11,700 --> 00:01:16,979
and a half hours but there were cases

00:01:14,340 --> 00:01:19,890
where it took maybe 1820 hours as well

00:01:16,979 --> 00:01:22,049
that's not really doable especially

00:01:19,890 --> 00:01:25,340
given that there's basically a single

00:01:22,049 --> 00:01:32,220
person who usually runs those composes

00:01:25,340 --> 00:01:34,619
so especially before release we need to

00:01:32,220 --> 00:01:35,549
make make it possible to test changes in

00:01:34,619 --> 00:01:39,329
installer

00:01:35,549 --> 00:01:41,100
all the important packages and if it

00:01:39,329 --> 00:01:44,939
takes eight hours that's sort of not

00:01:41,100 --> 00:01:49,290
really fast iteration so that's what we

00:01:44,939 --> 00:01:50,880
would like to fix and let's actually try

00:01:49,290 --> 00:01:53,640
and describe what's happening in the

00:01:50,880 --> 00:01:55,590
compost so as you might know the

00:01:53,640 --> 00:01:58,920
composes are done with a tool named

00:01:55,590 --> 00:02:03,420
punji which does a whole lot of work and

00:01:58,920 --> 00:02:06,960
it tries and does do it in a parallel

00:02:03,420 --> 00:02:09,450
way so that it's not completely stupidly

00:02:06,960 --> 00:02:11,310
slow but still it's not that perfect

00:02:09,450 --> 00:02:13,150
so the actual work is split into

00:02:11,310 --> 00:02:17,080
multiple phases

00:02:13,150 --> 00:02:19,739
I'll try not to ruin everything here so

00:02:17,080 --> 00:02:24,060
we are not at sea okay I just hit the

00:02:19,739 --> 00:02:27,580
screen it will calm down

00:02:24,060 --> 00:02:29,290
so this is basically the overview of

00:02:27,580 --> 00:02:32,790
what's happening in there and I will go

00:02:29,290 --> 00:02:37,840
into more detail about each part of that

00:02:32,790 --> 00:02:40,150
okay so first some of the housekeeping

00:02:37,840 --> 00:02:42,069
that's those are things that are fairly

00:02:40,150 --> 00:02:45,430
necessary for the compose but are

00:02:42,069 --> 00:02:47,680
relatively quick I mean I will have

00:02:45,430 --> 00:02:50,290
these average times those are averages

00:02:47,680 --> 00:02:53,950
taking from last five right composes and

00:02:50,290 --> 00:02:56,170
it's an average so this sort of

00:02:53,950 --> 00:02:58,599
housekeeping takes up almost 40 minutes

00:02:56,170 --> 00:03:02,319
so in the init face we start by

00:02:58,599 --> 00:03:05,170
preparing the combs files that includes

00:03:02,319 --> 00:03:08,470
checking out the git repo including

00:03:05,170 --> 00:03:10,030
translations in there and some

00:03:08,470 --> 00:03:12,190
housekeeping at the end of the compose

00:03:10,030 --> 00:03:13,840
is computing check sums for all the

00:03:12,190 --> 00:03:16,030
images that they were generated and

00:03:13,840 --> 00:03:19,060
there's actually quite a lot of them so

00:03:16,030 --> 00:03:22,660
it's not just the same server installer

00:03:19,060 --> 00:03:24,849
we have net inst images there are a live

00:03:22,660 --> 00:03:26,919
media there's a bunch of spins and laps

00:03:24,849 --> 00:03:29,889
for all of these we need to make sure

00:03:26,919 --> 00:03:32,169
that we have a checksum some people

00:03:29,889 --> 00:03:38,040
might want to check those at some point

00:03:32,169 --> 00:03:40,569
and one the test face at the end is

00:03:38,040 --> 00:03:42,549
relatively simple essentially all it

00:03:40,569 --> 00:03:44,949
does is we're on the repo closure on all

00:03:42,549 --> 00:03:48,819
the reports that we created you usually

00:03:44,949 --> 00:03:50,680
in row ID there are problems for actual

00:03:48,819 --> 00:03:53,199
released versions of federal akan GA

00:03:50,680 --> 00:03:55,720
date we probably shouldn't have many of

00:03:53,199 --> 00:03:59,049
those but to be honest there still are

00:03:55,720 --> 00:04:00,790
some of them and also we run some tests

00:03:59,049 --> 00:04:03,489
on the images themselves

00:04:00,790 --> 00:04:05,470
like if something claims to be an ISO

00:04:03,489 --> 00:04:07,540
file we actually check the headers if it

00:04:05,470 --> 00:04:10,090
is an ISO file if it claims to be

00:04:07,540 --> 00:04:13,060
bootable we check some flags and magic

00:04:10,090 --> 00:04:14,769
bits in the file to verify that it can

00:04:13,060 --> 00:04:17,019
actually be booted interest in some way

00:04:14,769 --> 00:04:20,079
because in the past we have been bitten

00:04:17,019 --> 00:04:22,630
by this the process changed a little bit

00:04:20,079 --> 00:04:25,360
and suddenly we could ISOs and the

00:04:22,630 --> 00:04:27,040
I think it worked if you burned it on

00:04:25,360 --> 00:04:30,270
the physical media but who does it

00:04:27,040 --> 00:04:35,020
nowadays next slide please

00:04:30,270 --> 00:04:36,700
so the first real slow part is the code

00:04:35,020 --> 00:04:38,590
package set and this is essentially

00:04:36,700 --> 00:04:41,170
about talking to Koji and figuring out

00:04:38,590 --> 00:04:43,870
what packages were built and should be

00:04:41,170 --> 00:04:45,420
included in the compose historically we

00:04:43,870 --> 00:04:48,970
have started with a single code attack

00:04:45,420 --> 00:04:52,330
fine the fine signed copies on the file

00:04:48,970 --> 00:04:55,540
system because you can't really get that

00:04:52,330 --> 00:04:59,520
nicely from the API and once we have all

00:04:55,540 --> 00:05:03,100
the signed copies we create a temporary

00:04:59,520 --> 00:05:06,430
rpm md5 repo on the file system that's

00:05:03,100 --> 00:05:08,320
used in the following phases so this

00:05:06,430 --> 00:05:11,260
just includes really everything that's

00:05:08,320 --> 00:05:13,630
in the tag and there's one repo for each

00:05:11,260 --> 00:05:16,930
architecture there's not no filtering at

00:05:13,630 --> 00:05:20,640
this point and as you can see like it

00:05:16,930 --> 00:05:22,150
takes over an hour so it's not ideal

00:05:20,640 --> 00:05:26,620
next please

00:05:22,150 --> 00:05:29,050
so the first part that's using this repo

00:05:26,620 --> 00:05:31,150
is called build install for historic

00:05:29,050 --> 00:05:32,530
reasons because originally it used to

00:05:31,150 --> 00:05:36,070
call the script called build install

00:05:32,530 --> 00:05:38,170
nowadays here we just run Lorax to

00:05:36,070 --> 00:05:41,920
create install tree so there's a boot

00:05:38,170 --> 00:05:45,610
Isildur's configuration for grab and on

00:05:41,920 --> 00:05:49,900
average it takes maybe 43 minutes but it

00:05:45,610 --> 00:05:51,790
varies quite quite wildly like if it on

00:05:49,900 --> 00:05:56,740
a good day it can be done in 10 minutes

00:05:51,790 --> 00:05:59,620
on a bad day it can be 2 hours it also

00:05:56,740 --> 00:06:01,300
it depends on for example how busy code

00:05:59,620 --> 00:06:03,630
is because all this happens on koji

00:06:01,300 --> 00:06:03,630
builders

00:06:09,850 --> 00:06:15,430
that's the individual instance actually

00:06:13,080 --> 00:06:18,070
that's the actual individual instance

00:06:15,430 --> 00:06:20,260
because if you check the blocks from the

00:06:18,070 --> 00:06:21,790
compose for how long the face took due

00:06:20,260 --> 00:06:23,350
to how it's implemented like it will

00:06:21,790 --> 00:06:25,120
only record its if it's finished

00:06:23,350 --> 00:06:27,250
after these two things are finished as

00:06:25,120 --> 00:06:29,950
well so it's not really doable from that

00:06:27,250 --> 00:06:32,410
so I just looked at I think it was 90

00:06:29,950 --> 00:06:35,320
tasks and Koji from from those five

00:06:32,410 --> 00:06:47,350
composes and I ran the average over

00:06:35,320 --> 00:06:50,290
death and that was the result they might

00:06:47,350 --> 00:06:52,570
be in the surgical comment was that the

00:06:50,290 --> 00:06:55,030
builders in Koji that are used for these

00:06:52,570 --> 00:06:58,060
tasks are in their own channel so it

00:06:55,030 --> 00:07:00,070
shouldn't vary based on the load so in

00:06:58,060 --> 00:07:17,050
that case I have no idea why it's vary

00:07:00,070 --> 00:07:22,270
so much it can be affected by the

00:07:17,050 --> 00:07:25,140
overall IO load on man Koji and it quite

00:07:22,270 --> 00:07:25,140
possibly can be

00:07:32,050 --> 00:07:37,699
it's like even when I I mean I'm not

00:07:35,509 --> 00:07:40,340
doing it in like under whatnot but

00:07:37,699 --> 00:07:43,490
whenever I'm running image builds I'm

00:07:40,340 --> 00:07:46,639
using Lorenz it takes a good deal of

00:07:43,490 --> 00:07:49,150
time like the shortest I've ever had an

00:07:46,639 --> 00:07:49,150
anaconda

00:07:50,650 --> 00:08:25,430
I never actually had there was a very

00:08:23,599 --> 00:08:27,289
long common they're all Oryx is just

00:08:25,430 --> 00:08:33,680
slow and that's why it might take this

00:08:27,289 --> 00:08:36,140
time so the next part it's go together

00:08:33,680 --> 00:08:38,419
and this is basically when we did when

00:08:36,140 --> 00:08:40,399
when she decides what packages should go

00:08:38,419 --> 00:08:42,469
into each part of the compost because

00:08:40,399 --> 00:08:44,329
technically it's not just one big

00:08:42,469 --> 00:08:46,279
compost there are separate parts there's

00:08:44,329 --> 00:08:49,190
everything which as the name suggests

00:08:46,279 --> 00:08:52,880
includes pretty much everything there's

00:08:49,190 --> 00:08:55,070
server workstation cloud and for each of

00:08:52,880 --> 00:08:58,010
these we just include subset of packages

00:08:55,070 --> 00:09:01,070
that are in the overall tag this is

00:08:58,010 --> 00:09:03,140
configured mostly by comps file and at

00:09:01,070 --> 00:09:05,360
each of those variants basically say I

00:09:03,140 --> 00:09:07,880
want these comms groups plus all the

00:09:05,360 --> 00:09:10,100
dependencies so that's how we decide

00:09:07,880 --> 00:09:11,959
what goes in there and once we know what

00:09:10,100 --> 00:09:15,050
goes in there we create hard links to

00:09:11,959 --> 00:09:17,870
every single rpm which is also in this

00:09:15,050 --> 00:09:19,520
face and overall this takes over 2 hours

00:09:17,870 --> 00:09:21,649
so there's definitely room for

00:09:19,520 --> 00:09:25,750
improvement here as well because it

00:09:21,649 --> 00:09:33,939
probably shouldn't be taking this long

00:09:25,750 --> 00:09:35,769
freeze for every very question why are

00:09:33,939 --> 00:09:37,740
we creating trees for every single

00:09:35,769 --> 00:09:40,480
variant and architecture combination if

00:09:37,740 --> 00:09:43,360
there is nothing other than the compost

00:09:40,480 --> 00:09:44,740
process using them well the answer to

00:09:43,360 --> 00:09:46,509
that if there is something in the

00:09:44,740 --> 00:09:50,550
compost process that's using that we

00:09:46,509 --> 00:09:50,550
serve need their files and the

00:10:04,439 --> 00:10:10,300
suggestion which is what we are exactly

00:10:06,970 --> 00:10:12,040
looking for why are we rerun in this

00:10:10,300 --> 00:10:13,600
whole process every time and not just

00:10:12,040 --> 00:10:26,230
including the changes that happened

00:10:13,600 --> 00:10:28,569
since the last compose when we don't

00:10:26,230 --> 00:10:29,889
need to rerun the whole create for

00:10:28,569 --> 00:10:32,050
everything we could just include the new

00:10:29,889 --> 00:10:33,819
builds and that's great suggestion the

00:10:32,050 --> 00:10:48,309
reason why this is not done is that no

00:10:33,819 --> 00:10:50,079
one has actually implemented it yet we

00:10:48,309 --> 00:10:54,430
need to make sure that we can actually

00:10:50,079 --> 00:10:55,689
run the process as a whole so the part

00:10:54,430 --> 00:10:57,189
that would doing the increment that

00:10:55,689 --> 00:11:00,459
would be doing the incremental changes

00:10:57,189 --> 00:11:02,379
would still be sort of like an add-on to

00:11:00,459 --> 00:11:04,959
that we still need to make sure that we

00:11:02,379 --> 00:11:06,699
can say for GA we need to be able to

00:11:04,959 --> 00:11:08,829
create like the whole thing and run it

00:11:06,699 --> 00:11:10,329
at the same time not just collect random

00:11:08,829 --> 00:11:22,870
pieces from row height and say like hey

00:11:10,329 --> 00:11:25,300
yeah this is federer 40 now here we

00:11:22,870 --> 00:11:28,269
don't yet create the repos that's over

00:11:25,300 --> 00:11:30,250
here this is just figuring out what

00:11:28,269 --> 00:11:33,000
packages will be in that repo and hard

00:11:30,250 --> 00:11:33,000
links them into place

00:11:33,930 --> 00:11:39,450
so so they can make me feel funny under

00:11:36,480 --> 00:11:40,950
everything for something that's so that

00:11:39,450 --> 00:11:44,610
you can run create rebeaud it's the

00:11:40,950 --> 00:11:47,040
record right necessarily it's not just

00:11:44,610 --> 00:11:48,390
sorry the question is are we linking the

00:11:47,040 --> 00:11:50,520
packages just so that we can all run

00:11:48,390 --> 00:11:53,760
create repo over the directory and the

00:11:50,520 --> 00:11:55,560
answer to that is no we could run create

00:11:53,760 --> 00:11:57,210
repo against packages in random

00:11:55,560 --> 00:11:58,710
locations that's not a problem we

00:11:57,210 --> 00:12:01,740
already do that in package that face

00:11:58,710 --> 00:12:03,870
that we need to copy the packages into

00:12:01,740 --> 00:12:05,400
some locations so that we can our sync

00:12:03,870 --> 00:12:16,620
them to mirrors so that people can

00:12:05,400 --> 00:12:18,630
consume yeah I mean for pushing the

00:12:16,620 --> 00:12:20,550
mirrors we need to make sure we have

00:12:18,630 --> 00:12:22,080
something that is our sinkable like we

00:12:20,550 --> 00:12:24,390
don't want to our sync random stuff

00:12:22,080 --> 00:12:26,430
romantic orgy I mean technically it's

00:12:24,390 --> 00:12:34,590
possible but I don't want to be the one

00:12:26,430 --> 00:12:36,150
who has to implement that so one of the

00:12:34,590 --> 00:12:38,310
questions was related to why do we

00:12:36,150 --> 00:12:41,070
generate install trees for things when

00:12:38,310 --> 00:12:43,260
we don't ship them so when we stopped

00:12:41,070 --> 00:12:46,400
doing that for cloud because we don't

00:12:43,260 --> 00:12:46,400
ship an iso for cloud

00:12:49,600 --> 00:12:55,459
right well I'm just saying we don't do

00:12:51,889 --> 00:12:56,990
it anymore for cloud and the reason that

00:12:55,459 --> 00:13:00,110
we have done that in the past is because

00:12:56,990 --> 00:13:03,050
we actually ship an iso with an embedded

00:13:00,110 --> 00:13:05,420
repo on it for server right so we need a

00:13:03,050 --> 00:13:07,730
separate you know repo for server

00:13:05,420 --> 00:13:10,480
specifically because we need a repo that

00:13:07,730 --> 00:13:14,120
will fit on a 4 gigabyte DVD it's right

00:13:10,480 --> 00:13:16,970
for workstation we ship an ISO but it's

00:13:14,120 --> 00:13:20,569
a live install right so there's a long

00:13:16,970 --> 00:13:22,819
thread on a tiger rail engine issue that

00:13:20,569 --> 00:13:23,569
says do we really need to do this for

00:13:22,819 --> 00:13:26,810
workstation

00:13:23,569 --> 00:13:28,550
and and and so there's a long

00:13:26,810 --> 00:13:31,430
conversation there and I don't think the

00:13:28,550 --> 00:13:33,639
answer is no we just haven't explored

00:13:31,430 --> 00:13:36,589
everything yep

00:13:33,639 --> 00:13:39,430
also there is some value in having the

00:13:36,589 --> 00:13:43,220
repos even if we are not shipping them

00:13:39,430 --> 00:13:45,889
for creating say the workstation live

00:13:43,220 --> 00:13:49,220
media in that like we know what set of

00:13:45,889 --> 00:13:50,420
packages was there like in theory you

00:13:49,220 --> 00:13:53,209
could have like a package that's not

00:13:50,420 --> 00:13:54,889
listed in comes get on to the media if

00:13:53,209 --> 00:13:59,870
it was done from some other opponent

00:13:54,889 --> 00:14:03,019
just this subset it's it's not like a

00:13:59,870 --> 00:14:05,329
big deal it's in fedora but for other

00:14:03,019 --> 00:14:07,819
use cases where this process is used it

00:14:05,329 --> 00:14:11,870
is sort of like a requirement we need to

00:14:07,819 --> 00:14:20,149
make sure that the image is consumed

00:14:11,870 --> 00:14:22,339
only the stuff that should be there the

00:14:20,149 --> 00:14:23,870
slow part here is mostly figuring out

00:14:22,339 --> 00:14:28,540
the dependencies for the packages

00:14:23,870 --> 00:14:28,540
because from comms groups we know what

00:14:30,470 --> 00:14:34,890
it's it's not really the question of

00:14:33,270 --> 00:14:36,930
reading it that's still a relatively

00:14:34,890 --> 00:14:38,610
quick we read the report I did we

00:14:36,930 --> 00:14:40,560
prepared here the thing is that we

00:14:38,610 --> 00:14:42,029
actually have to run a transaction for

00:14:40,560 --> 00:14:44,070
every architecture and variant

00:14:42,029 --> 00:14:45,959
combination and figure out all the

00:14:44,070 --> 00:14:48,089
dependencies what should go in there

00:14:45,959 --> 00:14:51,899
apply rules for motely

00:14:48,089 --> 00:14:53,640
plus a few other magic rules that create

00:14:51,899 --> 00:15:01,920
it over time because someone needed to

00:14:53,640 --> 00:15:03,600
fix some problem yes

00:15:01,920 --> 00:15:05,339
using lips off could possibly speed this

00:15:03,600 --> 00:15:07,290
up quite significantly there is some

00:15:05,339 --> 00:15:09,089
work in progress on implementing a

00:15:07,290 --> 00:15:11,010
back-end that would use lips off right

00:15:09,089 --> 00:15:13,880
now it's basically Python code using lip

00:15:11,010 --> 00:15:15,930
DNF to parse the repo data and ask for

00:15:13,880 --> 00:15:34,680
dependencies like what provides this

00:15:15,930 --> 00:15:37,529
thing so that's a big reason for is

00:15:34,680 --> 00:15:39,600
using lips off to so similar problem and

00:15:37,529 --> 00:15:42,209
it's very fast and I can actually

00:15:39,600 --> 00:15:44,220
confirm it like from the tests on the

00:15:42,209 --> 00:15:46,200
new back-end that I've been running like

00:15:44,220 --> 00:15:47,790
it's a lot faster if we just run lips

00:15:46,200 --> 00:15:51,240
off I mean technically we have to run it

00:15:47,790 --> 00:15:56,100
multiple times to add like say the multi

00:15:51,240 --> 00:15:58,050
way packages yeah but once it's moved in

00:15:56,100 --> 00:16:04,890
to see it's like a lot faster than the

00:15:58,050 --> 00:16:09,660
Python implementation we have now next

00:16:04,890 --> 00:16:10,830
please this is just creating the repos

00:16:09,660 --> 00:16:13,920
for the files that are already in place

00:16:10,830 --> 00:16:16,020
it's fairly fast I mean it could be

00:16:13,920 --> 00:16:18,750
faster because right now it all happens

00:16:16,020 --> 00:16:21,300
on the machine that's running the

00:16:18,750 --> 00:16:23,640
compose which is usually there's one

00:16:21,300 --> 00:16:27,180
compose machine for row height one for

00:16:23,640 --> 00:16:29,160
releases so on and so on and it could

00:16:27,180 --> 00:16:32,040
run anywhere we could ship it to Koji

00:16:29,160 --> 00:16:34,920
builders and run one create repo on

00:16:32,040 --> 00:16:37,079
every single own separate builder might

00:16:34,920 --> 00:16:39,360
help us a little bit but it's not a big

00:16:37,079 --> 00:16:41,339
pain points just five minutes and I mean

00:16:39,360 --> 00:16:43,520
we run multiple processes at the same

00:16:41,339 --> 00:16:43,520
time

00:16:44,790 --> 00:16:51,640
so I'm actually bundled to us three

00:16:48,280 --> 00:16:53,410
parts here that's creating the OS tree

00:16:51,640 --> 00:16:56,080
commit itself with the new updated

00:16:53,410 --> 00:16:59,430
packages and then creating an bootable

00:16:56,080 --> 00:17:03,700
image that includes the OS three and

00:16:59,430 --> 00:17:06,070
this does take a fair bit of time the

00:17:03,700 --> 00:17:09,190
thing that we can do here and that will

00:17:06,070 --> 00:17:11,140
happen fairly soon hopefully is to move

00:17:09,190 --> 00:17:28,510
this and run it in parallel with these

00:17:11,140 --> 00:17:37,900
other bits this is our current time

00:17:28,510 --> 00:17:40,720
using our current I think so I mean door

00:17:37,900 --> 00:17:42,790
the the times are four from five row

00:17:40,720 --> 00:17:48,130
height composes and I took five last

00:17:42,790 --> 00:17:50,050
successful just like two weeks ago yes

00:17:48,130 --> 00:18:01,300
some bits and pieces are missing from

00:17:50,050 --> 00:18:03,400
that but come and here is that slow part

00:18:01,300 --> 00:18:06,430
here might be that it's overall

00:18:03,400 --> 00:18:11,350
architectures and some of them are

00:18:06,430 --> 00:18:14,040
relatively slow way so the solution here

00:18:11,350 --> 00:18:16,840
is basically move this and run this part

00:18:14,040 --> 00:18:20,920
earlier than we do now the reason why

00:18:16,840 --> 00:18:23,920
it's not done is that there was a bug

00:18:20,920 --> 00:18:25,960
somewhere between rpm OS 3 and lip DNF

00:18:23,920 --> 00:18:28,330
and it got confused when it saw a repo

00:18:25,960 --> 00:18:30,100
with binary and source packages this

00:18:28,330 --> 00:18:35,800
should be hopefully resolved now but we

00:18:30,100 --> 00:18:42,130
need to make sure and let's test it this

00:18:35,800 --> 00:18:44,410
is the time or the OS creation and then

00:18:42,130 --> 00:18:45,410
the process for creating an installable

00:18:44,410 --> 00:18:47,930
image

00:18:45,410 --> 00:18:49,550
it's treating Bettany what is the time

00:18:47,930 --> 00:18:51,290
for actually created an OS tree commit

00:18:49,550 --> 00:18:52,100
by itself does anyone actually know how

00:18:51,290 --> 00:18:53,540
long that takes

00:18:52,100 --> 00:18:55,250
I've never actually made analysts

00:18:53,540 --> 00:18:57,020
recommit with firm rpm industry so I

00:18:55,250 --> 00:18:59,840
don't know because I'm wondering how

00:18:57,020 --> 00:19:03,830
much of that time actually is a rough

00:18:59,840 --> 00:19:05,720
guess for the question is how does this

00:19:03,830 --> 00:19:07,760
time split between creating the OS tree

00:19:05,720 --> 00:19:10,520
commit itself and creating the image and

00:19:07,760 --> 00:19:12,470
my guess would be that the Installer

00:19:10,520 --> 00:19:16,700
creation should be roughly the same as

00:19:12,470 --> 00:19:19,550
for the regular installer so about 45

00:19:16,700 --> 00:19:23,560
minutes so that would leave about 20

00:19:19,550 --> 00:19:23,560
minutes for the most recommended selfies

00:19:29,470 --> 00:19:36,650
the comment is a lot of that is copying

00:19:32,170 --> 00:19:39,400
images sorry rpms and not not doing

00:19:36,650 --> 00:19:39,400
actual work

00:19:46,680 --> 00:19:51,570
why don't we after we fetch the the

00:19:50,250 --> 00:19:53,370
stuff the first time

00:19:51,570 --> 00:19:54,840
why don't we distance this is being

00:19:53,370 --> 00:19:57,180
carried through through the same light

00:19:54,840 --> 00:19:59,040
we just hold the passion pass it forward

00:19:57,180 --> 00:20:00,330
to them into the rest of the phases so

00:19:59,040 --> 00:20:03,000
that we don't need free downloading

00:20:00,330 --> 00:20:05,880
every time the question is why do we

00:20:03,000 --> 00:20:08,370
download the files over and over again

00:20:05,880 --> 00:20:10,350
and the answer to that is that we are

00:20:08,370 --> 00:20:13,620
basically not I mean it's all on the

00:20:10,350 --> 00:20:18,900
same NFS volume it's all running in the

00:20:13,620 --> 00:20:32,010
same data center as far as I know okay

00:20:18,900 --> 00:20:33,810
yeah is about three-quarters of it is

00:20:32,010 --> 00:20:38,610
benching metadata and then downloading

00:20:33,810 --> 00:20:41,010
the packages okay so the suggestion here

00:20:38,610 --> 00:20:43,290
and it's good one is to create a cache

00:20:41,010 --> 00:20:45,540
with the packages locally so that we

00:20:43,290 --> 00:21:02,610
don't have to actually check that again

00:20:45,540 --> 00:21:07,560
and again for multiple things moving

00:21:02,610 --> 00:21:08,970
lorax to tmpfs is also a good suggestion

00:21:07,560 --> 00:21:11,940
that one might be slightly problematic

00:21:08,970 --> 00:21:14,280
because we can't run all the lorax tasks

00:21:11,940 --> 00:21:16,200
on a simple single machine that needs to

00:21:14,280 --> 00:21:18,140
be like for each architecture it needs

00:21:16,200 --> 00:21:20,280
to run on that particular architecture

00:21:18,140 --> 00:21:24,950
like you can you can't create the

00:21:20,280 --> 00:21:24,950
installer for s/390 or something else

00:21:27,360 --> 00:21:31,340
yeah you should just be alright and

00:21:36,860 --> 00:21:42,720
question it was why can't we create

00:21:39,750 --> 00:21:46,880
installers for different architecture

00:21:42,720 --> 00:21:46,880
and the answer to that is I have no idea

00:21:52,970 --> 00:21:57,540
this brings us basically to the last

00:21:55,290 --> 00:21:59,820
part and that's actually the biggest

00:21:57,540 --> 00:22:03,180
slowest part and that's creating all the

00:21:59,820 --> 00:22:04,890
live images and spins and whatnot there

00:22:03,180 --> 00:22:06,420
are technically all that stuff is split

00:22:04,890 --> 00:22:07,800
into four different phases because there

00:22:06,420 --> 00:22:13,770
are four different kinds of things that

00:22:07,800 --> 00:22:16,790
we generate but overall it yeah it's

00:22:13,770 --> 00:22:18,960
four not five I can't count today

00:22:16,790 --> 00:22:21,150
basically it's all the same thing we

00:22:18,960 --> 00:22:23,850
just run a time for it to finish once it

00:22:21,150 --> 00:22:25,950
finishes we copy the file the actual

00:22:23,850 --> 00:22:27,780
image into the compose directory and we

00:22:25,950 --> 00:22:30,000
get done with it most of the time here

00:22:27,780 --> 00:22:33,420
is really just spent sitting and waiting

00:22:30,000 --> 00:22:36,300
until the task finishes and overall it

00:22:33,420 --> 00:22:38,340
takes about three hours on average so

00:22:36,300 --> 00:22:41,070
there might be some possible

00:22:38,340 --> 00:22:42,570
improvements here but it would have to

00:22:41,070 --> 00:22:49,560
happen like in the actual tools that

00:22:42,570 --> 00:22:51,900
create those files it should not run

00:22:49,560 --> 00:22:56,930
lorax because it's consuming the output

00:22:51,900 --> 00:22:56,930
for all the lorax on we ran before

00:23:11,549 --> 00:23:15,029
about 30 minutes by itself that should

00:23:14,070 --> 00:23:16,799
be down low because it doesn't

00:23:15,029 --> 00:23:22,879
understand catching and then we'll

00:23:16,799 --> 00:23:25,499
actually insult and produce the tree so

00:23:22,879 --> 00:23:27,419
so the comment here is that at least

00:23:25,499 --> 00:23:30,629
live media creator is running Lorax

00:23:27,419 --> 00:23:33,840
again and we might be able to save some

00:23:30,629 --> 00:23:44,820
time there good thing to look into thank

00:23:33,840 --> 00:23:47,580
you we might want to create some logging

00:23:44,820 --> 00:23:49,379
you or do something to indicate when

00:23:47,580 --> 00:23:53,220
we're filling those channels up because

00:23:49,379 --> 00:23:55,350
we reallocate litters so they might be

00:23:53,220 --> 00:23:57,389
that we have eight images we're trying

00:23:55,350 --> 00:24:04,169
to build and only seven builders in

00:23:57,389 --> 00:24:06,779
there we have one another comment is

00:24:04,169 --> 00:24:09,749
that we might get some speed ups here by

00:24:06,779 --> 00:24:12,509
reallocating builders in Koji so that it

00:24:09,749 --> 00:24:16,049
matches the actual demand it's kind of

00:24:12,509 --> 00:24:18,210
not obvious from the actual process like

00:24:16,049 --> 00:24:19,799
what takes how long and we don't

00:24:18,210 --> 00:24:22,230
actually run everything on the same

00:24:19,799 --> 00:24:24,720
architecture like there are more images

00:24:22,230 --> 00:24:28,169
for x86 64 then for other different

00:24:24,720 --> 00:24:30,929
architectures huh okay so I think that's

00:24:28,169 --> 00:24:36,359
it for my part I'll hand it over to

00:24:30,929 --> 00:24:40,159
Mohan for his more say ambitious ideas

00:24:36,359 --> 00:24:40,159
on how to fix our problems

00:24:42,040 --> 00:24:47,060
no sorry I was just taking some notes

00:24:45,340 --> 00:24:51,290
with all the solutions

00:24:47,060 --> 00:24:56,870
I don't mind me taking on the but anyway

00:24:51,290 --> 00:24:59,000
so you heard of the pain points why it

00:24:56,870 --> 00:25:01,760
is slow I am thank for all the solutions

00:24:59,000 --> 00:25:05,720
now I want to talk about couple of

00:25:01,760 --> 00:25:07,400
solutions that I have in mind and these

00:25:05,720 --> 00:25:08,900
are the poor solution that I am thinking

00:25:07,400 --> 00:25:11,810
of right now

00:25:08,900 --> 00:25:14,990
well fourth one is a preferred choice

00:25:11,810 --> 00:25:18,710
but I'm just putting it out there first

00:25:14,990 --> 00:25:22,340
one is like we are running depth solving

00:25:18,710 --> 00:25:24,920
as part of the compost process I want to

00:25:22,340 --> 00:25:28,310
move away move it away from the compost

00:25:24,920 --> 00:25:30,200
and run it on demand let's say let's

00:25:28,310 --> 00:25:32,660
take the example of Ravi whenever it

00:25:30,200 --> 00:25:35,560
gets billed it gets tucked into f29

00:25:32,660 --> 00:25:38,510
pending tax get signed and move into f

00:25:35,560 --> 00:25:41,780
29:29 being draw fight right now so I

00:25:38,510 --> 00:25:45,620
wanted to run depth solve once it's get

00:25:41,780 --> 00:25:50,600
sine and story by variant by art so that

00:25:45,620 --> 00:25:54,890
it just also it also finds the puts the

00:25:50,600 --> 00:25:57,470
location of this on the bins so whenever

00:25:54,890 --> 00:26:00,230
it bungee runs we we can eliminate the

00:25:57,470 --> 00:26:01,970
packet set and as well as Qaddafi's well

00:26:00,230 --> 00:26:05,780
part of kuvira's because the other case

00:26:01,970 --> 00:26:08,750
also has some fun linking but pakka set

00:26:05,780 --> 00:26:11,420
and part of the vectors can be removed

00:26:08,750 --> 00:26:13,130
which essentially says about two to

00:26:11,420 --> 00:26:15,110
three of us because it's taking more

00:26:13,130 --> 00:26:19,710
than three hours right now for both of

00:26:15,110 --> 00:26:25,300
those phases and they are not run family

00:26:19,710 --> 00:26:28,660
so that being said there are a couple of

00:26:25,300 --> 00:26:31,750
things we need to fix should be cozy or

00:26:28,660 --> 00:26:34,810
some service that could even call to do

00:26:31,750 --> 00:26:36,730
that absorbing and punchy changes

00:26:34,810 --> 00:26:43,060
because obviously we don't need all

00:26:36,730 --> 00:26:45,280
these gatherings over there that's the

00:26:43,060 --> 00:26:49,030
first option first option and my

00:26:45,280 --> 00:26:52,660
favorite option and the second one is

00:26:49,030 --> 00:26:54,790
also my favorite basically tracking all

00:26:52,660 --> 00:26:57,700
the changes in the images what goes into

00:26:54,790 --> 00:27:00,520
the images so correctly the images are

00:26:57,700 --> 00:27:02,440
shattered from looking at the kid starts

00:27:00,520 --> 00:27:07,930
and it's dark and I say that includes

00:27:02,440 --> 00:27:09,340
some comms and as well as some changes

00:27:07,930 --> 00:27:12,370
and everything if you can track all

00:27:09,340 --> 00:27:14,340
those changes and identify if anything

00:27:12,370 --> 00:27:17,950
has changed from yesterday to today

00:27:14,340 --> 00:27:21,190
compost basically and we can eliminate

00:27:17,950 --> 00:27:24,460
the creation of the same image over and

00:27:21,190 --> 00:27:28,860
over and just like hardening the

00:27:24,460 --> 00:27:33,760
previous image from previous compose

00:27:28,860 --> 00:27:36,160
essentially what happens is we have to

00:27:33,760 --> 00:27:37,750
run everything because everything

00:27:36,160 --> 00:27:42,010
changes every day

00:27:37,750 --> 00:27:44,710
so everything creation everything we

00:27:42,010 --> 00:27:48,130
have to run it but all the other labs

00:27:44,710 --> 00:27:49,360
and spins and workstation and even sell

00:27:48,130 --> 00:27:52,720
well sometimes you don't have to lock

00:27:49,360 --> 00:27:55,360
them so that would save a lot of time

00:27:52,720 --> 00:28:00,100
and when we looked it's about the three

00:27:55,360 --> 00:28:04,300
hours plus so I'm guessing it will come

00:28:00,100 --> 00:28:05,860
down doing less not half of it any

00:28:04,300 --> 00:28:07,210
guessing because we don't know how much

00:28:05,860 --> 00:28:09,850
comes

00:28:07,210 --> 00:28:13,720
things are changing every day but

00:28:09,850 --> 00:28:16,169
definitely you spin stand much won't

00:28:13,720 --> 00:28:16,169
change much

00:28:25,240 --> 00:28:33,520
this my guess would be there actually

00:28:28,810 --> 00:28:36,850
almost always yes but not in all

00:28:33,520 --> 00:28:40,540
davidians and all the auctions right

00:28:36,850 --> 00:28:44,820
for example arm our baby can be a little

00:28:40,540 --> 00:28:55,210
bit more than say yesterday might get so

00:28:44,820 --> 00:28:56,950
many exits like you know one day get

00:28:55,210 --> 00:29:06,220
lucky and came to the next day the

00:28:56,950 --> 00:29:10,530
colonel would see changes in every ten

00:29:06,220 --> 00:29:12,190
is a possibility of that packet ah oh

00:29:10,530 --> 00:29:15,790
sorry

00:29:12,190 --> 00:29:17,140
so if we implement this change so the

00:29:15,790 --> 00:29:19,570
question is if we can get the change

00:29:17,140 --> 00:29:24,060
that's going to reduce the average time

00:29:19,570 --> 00:29:31,740
of this or phases but not the total time

00:29:24,060 --> 00:29:35,140
so I would like to say that any any

00:29:31,740 --> 00:29:37,720
change or any time that we can say it is

00:29:35,140 --> 00:29:41,500
really helpful especially during the

00:29:37,720 --> 00:29:44,650
French time that's what I was actually

00:29:41,500 --> 00:29:47,470
driving me to make this changes happen

00:29:44,650 --> 00:29:51,880
because during free stands we actually

00:29:47,470 --> 00:29:54,190
get about one or two days to create the

00:29:51,880 --> 00:29:56,230
aussi Campos and sometimes we will find

00:29:54,190 --> 00:29:58,060
more bugs and every time we will be

00:29:56,230 --> 00:30:01,470
stuck with like postponing the release

00:29:58,060 --> 00:30:05,380
by a week because which is found above

00:30:01,470 --> 00:30:09,040
yeah just before no go-go or nobility so

00:30:05,380 --> 00:30:12,409
I would like to implement as much as I

00:30:09,040 --> 00:30:14,809
can to get that number

00:30:12,409 --> 00:30:17,789
and some of the things we cannot do

00:30:14,809 --> 00:30:20,039
basically as I said asking for anything

00:30:17,789 --> 00:30:23,070
a strength TX mission it's never going

00:30:20,039 --> 00:30:32,729
to happen or adding more builders

00:30:23,070 --> 00:30:35,039
probably but still friend sure I can say

00:30:32,729 --> 00:30:37,349
by one look like why would there not be

00:30:35,039 --> 00:30:43,169
more builders or no no they talk about

00:30:37,349 --> 00:30:45,259
their creative ways we we have access to

00:30:43,169 --> 00:30:48,299
extra money boomers the Austin Boston

00:30:45,259 --> 00:30:51,779
the physical notation difference is the

00:30:48,299 --> 00:30:55,379
problem actually and all about builders

00:30:51,779 --> 00:30:58,079
sorry all of our builders and Mount Fuji

00:30:55,379 --> 00:31:02,239
is located in Phoenix location whereas

00:30:58,079 --> 00:31:02,239
has three night excellent Boston so

00:31:09,200 --> 00:31:15,690
response to helping during free signs I

00:31:12,840 --> 00:31:17,550
don't know if this particular change

00:31:15,690 --> 00:31:19,410
would help us that much in free time

00:31:17,550 --> 00:31:21,840
because I feel like when when we're

00:31:19,410 --> 00:31:27,420
doing an artsy we wouldn't want to

00:31:21,840 --> 00:31:29,340
actually do everything a total compose

00:31:27,420 --> 00:31:31,260
as part of the RC and not a partial

00:31:29,340 --> 00:31:33,420
compose that's optimized based on

00:31:31,260 --> 00:31:35,940
whether or not the previous that's

00:31:33,420 --> 00:31:40,950
compose look it's like the the actual

00:31:35,940 --> 00:31:43,050
you know version would be different

00:31:40,950 --> 00:31:47,280
right between the two like you know

00:31:43,050 --> 00:31:49,620
compose basically has like the example

00:31:47,280 --> 00:31:53,310
that we would probably want all come

00:31:49,620 --> 00:31:55,200
from another case they are another case

00:31:53,310 --> 00:31:58,410
that would this would be very helpful is

00:31:55,200 --> 00:32:01,170
with rocketed so the compose goes along

00:31:58,410 --> 00:32:03,390
it things right oh I think that might be

00:32:01,170 --> 00:32:05,670
TNF but I'm not sure this is great okay

00:32:03,390 --> 00:32:07,380
I rebuild everything and then you have

00:32:05,670 --> 00:32:10,260
to wait an ovary now this is great for

00:32:07,380 --> 00:32:12,540
littering yeah yeah yes yes but even in

00:32:10,260 --> 00:32:14,640
the free time as well

00:32:12,540 --> 00:32:16,440
definitely the first RC combos going to

00:32:14,640 --> 00:32:17,490
be the everything I'm not going because

00:32:16,440 --> 00:32:22,580
it's going to be in a different

00:32:17,490 --> 00:32:25,110
directory and and we haven't composed

00:32:22,580 --> 00:32:26,940
NERC compost before that right for that

00:32:25,110 --> 00:32:31,970
release right so first Arthur compose

00:32:26,940 --> 00:32:35,430
will have everything but let's say and

00:32:31,970 --> 00:32:38,130
probably we add one or two pills cure

00:32:35,430 --> 00:32:41,280
for something they want to add one or

00:32:38,130 --> 00:32:43,380
two bills into the right ways damn yeah

00:32:41,280 --> 00:32:45,750
outside the first or see ya first is

00:32:43,380 --> 00:32:47,400
definitely not and the last one that we

00:32:45,750 --> 00:32:49,320
actually releases the full compose but

00:32:47,400 --> 00:32:51,540
we can do optimized releases in between

00:32:49,320 --> 00:32:53,310
there and like in the QA immediately yep

00:32:51,540 --> 00:32:54,330
and say yes it works and then kick off

00:32:53,310 --> 00:32:59,700
in posters

00:32:54,330 --> 00:33:02,850
yes and uh in my experience I have done

00:32:59,700 --> 00:33:04,830
1rc compose for one release everyone

00:33:02,850 --> 00:33:05,730
else it's like multiple other computers

00:33:04,830 --> 00:33:09,090
for one day

00:33:05,730 --> 00:33:12,860
so out of all the like six releases of

00:33:09,090 --> 00:33:16,050
someone really a psychopath and

00:33:12,860 --> 00:33:20,010
definitely that means some changes to

00:33:16,050 --> 00:33:22,110
Bungie as well as we need to have some

00:33:20,010 --> 00:33:28,590
smartness to identifying changes in

00:33:22,110 --> 00:33:30,260
these things and just opposed probably

00:33:28,590 --> 00:33:33,930
you guys might have heard about it and

00:33:30,260 --> 00:33:36,360
it's kind of implemented but we just

00:33:33,930 --> 00:33:40,430
fell not using it because there is a

00:33:36,360 --> 00:33:46,020
small issue over there but anyway with

00:33:40,430 --> 00:33:47,730
district us what we can do is a packet

00:33:46,020 --> 00:33:50,760
suppress we're basically in punchy it

00:33:47,730 --> 00:33:56,580
runs on all touch come back together on

00:33:50,760 --> 00:34:00,540
one machine with this we can split that

00:33:56,580 --> 00:34:02,430
run multiple district go on different

00:34:00,540 --> 00:34:05,190
tax on different builders basically

00:34:02,430 --> 00:34:07,560
calling cookie and then split them again

00:34:05,190 --> 00:34:09,210
on based off an arch and sending it to

00:34:07,560 --> 00:34:12,800
different builders just open their

00:34:09,210 --> 00:34:17,010
architecture as well so it will save

00:34:12,800 --> 00:34:21,060
some time not sure how much but

00:34:17,010 --> 00:34:23,460
definitely package it being long face

00:34:21,060 --> 00:34:25,169
about takes over to two of us so this

00:34:23,460 --> 00:34:30,960
will definitely take some time over

00:34:25,169 --> 00:34:33,720
there and the idea is basically call the

00:34:30,960 --> 00:34:36,540
three entities to go task which is part

00:34:33,720 --> 00:34:42,510
of cozy whenever a new gates new page

00:34:36,540 --> 00:34:45,540
tab and use doctor for so it definitely

00:34:42,510 --> 00:34:49,800
made some changes to punchy and they

00:34:45,540 --> 00:34:56,270
have to fix the cheeky so

00:34:49,800 --> 00:34:56,270
no it's a debug packages and packages

00:35:00,050 --> 00:35:04,860
yeah that plate I was working with Mike

00:35:03,090 --> 00:35:06,660
Lee and a couple of other people on like

00:35:04,860 --> 00:35:08,460
finalizing the structure for this and

00:35:06,660 --> 00:35:10,680
that is actually Benedict okay the

00:35:08,460 --> 00:35:16,230
latest code you release it has never

00:35:10,680 --> 00:35:18,090
been packaged for fedora okay and I'm

00:35:16,230 --> 00:35:24,480
holding off on it for the rest of the

00:35:18,090 --> 00:35:26,970
branches because 161 yeah and that's

00:35:24,480 --> 00:35:28,950
look what you still create the bow for

00:35:26,970 --> 00:35:33,120
because she's the previous he does

00:35:28,950 --> 00:35:35,520
murdering those internally I'm not sure

00:35:33,120 --> 00:35:40,170
it does it catches the previous I have

00:35:35,520 --> 00:35:41,760
black open it down okay the design of it

00:35:40,170 --> 00:35:44,340
is that it uses the previous repose

00:35:41,760 --> 00:35:47,490
input and the same as it does for the

00:35:44,340 --> 00:35:49,410
Builder agree pose yeah it's very how

00:35:47,490 --> 00:35:50,360
that's supposed to if it's not then it

00:35:49,410 --> 00:35:55,510
is

00:35:50,360 --> 00:35:55,510
I've not seen that report is it

00:35:56,680 --> 00:36:08,090
sometimes I will check it now the last

00:36:02,540 --> 00:36:10,520
one which is not my favorite creating

00:36:08,090 --> 00:36:13,120
this images on demand or on interval

00:36:10,520 --> 00:36:15,470
phasers on demand

00:36:13,120 --> 00:36:17,600
obviously I country is involved in some

00:36:15,470 --> 00:36:20,270
of those images definitely keep this low

00:36:17,600 --> 00:36:23,240
if let's say packet gets bell and it

00:36:20,270 --> 00:36:27,560
goes into one of the image probably we

00:36:23,240 --> 00:36:29,780
are creating image and waiting for like

00:36:27,560 --> 00:36:33,890
40 minutes to complete which is not

00:36:29,780 --> 00:36:36,790
optimal hence not my best option and

00:36:33,890 --> 00:36:40,910
also it's very complicated to implement

00:36:36,790 --> 00:36:43,370
because we have to create the repose and

00:36:40,910 --> 00:36:46,160
then create the images out of it and

00:36:43,370 --> 00:36:48,050
then we carefully have to copy all this

00:36:46,160 --> 00:36:49,880
remove and of course include the bungee

00:36:48,050 --> 00:37:03,830
compos later on when we come back to the

00:36:49,880 --> 00:37:07,340
country process that you're still

00:37:03,830 --> 00:37:12,110
downloading the packages to yes yes and

00:37:07,340 --> 00:37:15,770
so like probably her easier photo foot

00:37:12,110 --> 00:37:18,320
wind that would be to first get it so

00:37:15,770 --> 00:37:19,160
that it doesn't force you every time to

00:37:18,320 --> 00:37:20,660
read down

00:37:19,160 --> 00:37:24,070
the way to tell if there was a permanent

00:37:20,660 --> 00:37:26,420
x-ray and then the second would be

00:37:24,070 --> 00:37:28,430
making it so that if you've got a

00:37:26,420 --> 00:37:30,670
partial three already in place that you

00:37:28,430 --> 00:37:34,040
can use that as a source to feed into

00:37:30,670 --> 00:37:36,450
the producers Lincoln's in some steps

00:37:34,040 --> 00:37:41,460
yes

00:37:36,450 --> 00:37:45,619
thanks for the session and nothing much

00:37:41,460 --> 00:37:48,329
if saves time image building and like

00:37:45,619 --> 00:37:52,440
new changes for koji onion song

00:37:48,329 --> 00:37:54,029
smartness I said not my favorite that

00:37:52,440 --> 00:37:55,140
these are the four options that I was

00:37:54,029 --> 00:37:57,599
thinking about and I have taken

00:37:55,140 --> 00:37:59,150
installations from you guys that's

00:37:57,599 --> 00:38:04,140
really helpful

00:37:59,150 --> 00:38:07,619
this is the goal of my previous release

00:38:04,140 --> 00:38:10,819
engineer and now became Michael bungee

00:38:07,619 --> 00:38:13,619
it needs to be a gathering not a creator

00:38:10,819 --> 00:38:16,380
so everything should be ready and you

00:38:13,619 --> 00:38:17,609
just goes there collects them puts them

00:38:16,380 --> 00:38:37,109
in place

00:38:17,609 --> 00:38:44,789
thoughts you haven't written to any

00:38:37,109 --> 00:38:46,440
questions for me how I mean the work

00:38:44,789 --> 00:38:49,109
period first talk are going ahead and

00:38:46,440 --> 00:38:51,539
looking at holiday takes I'm worried it

00:38:49,109 --> 00:38:56,940
would make sense to basically create a

00:38:51,539 --> 00:39:00,089
new chart for a punchy broad look at

00:38:56,940 --> 00:39:03,329
they wait and wait accessory 9tx holder

00:39:00,089 --> 00:39:10,319
for two hours we know we're just you

00:39:03,329 --> 00:39:12,300
know basically why that would comment

00:39:10,319 --> 00:39:14,760
was if it wouldn't make sense to that

00:39:12,300 --> 00:39:16,740
son sir an overview of where time is

00:39:14,760 --> 00:39:18,540
spent in the compost process so that we

00:39:16,740 --> 00:39:20,490
can actually see what was the slow part

00:39:18,540 --> 00:39:24,119
and that's a great suggestion it would

00:39:20,490 --> 00:39:26,880
actually be kind of helpful and you can

00:39:24,119 --> 00:39:28,290
sort of get this information in part

00:39:26,880 --> 00:39:30,240
from the logs because there are time

00:39:28,290 --> 00:39:31,770
stamps for everything the only downside

00:39:30,240 --> 00:39:33,240
is that due to some implementation

00:39:31,770 --> 00:39:36,119
details especially for the image

00:39:33,240 --> 00:39:39,240
building you don't actually get the

00:39:36,119 --> 00:39:40,980
runtimes from the tasks then so you

00:39:39,240 --> 00:39:44,130
would have to very quickly about that

00:39:40,980 --> 00:39:46,970
and if there are multiple phases running

00:39:44,130 --> 00:39:49,950
in parallel if you remember the diagram

00:39:46,970 --> 00:39:51,839
they all start in giving order and

00:39:49,950 --> 00:39:54,270
finishing a given order so it might be

00:39:51,839 --> 00:39:57,630
waiting just for another face book but

00:39:54,270 --> 00:39:59,430
if we got the duration on each task and

00:39:57,630 --> 00:40:06,000
like sorted it by what's the slowest

00:39:59,430 --> 00:40:08,849
task it would be created useful if we

00:40:06,000 --> 00:40:11,910
get the directions for every single

00:40:08,849 --> 00:40:13,650
possible that's a fair point yes and

00:40:11,910 --> 00:40:17,400
also I just wanted to add one more point

00:40:13,650 --> 00:40:19,710
over there yes we can do that but every

00:40:17,400 --> 00:40:22,589
day the business act differently yeah

00:40:19,710 --> 00:40:26,310
well so that the use in a different way

00:40:22,589 --> 00:40:28,940
but you keep it if you saw if you can

00:40:26,310 --> 00:40:28,940
see it glance

00:40:39,660 --> 00:40:44,320
yeah definitely just a repeat recommend

00:40:42,400 --> 00:40:46,869
is that if we have this information we

00:40:44,320 --> 00:40:49,480
can actually tell when these weird

00:40:46,869 --> 00:40:51,670
outliers are happening anywhere like

00:40:49,480 --> 00:40:51,940
what suddenly starts taking longer time

00:40:51,670 --> 00:40:55,330
today

00:40:51,940 --> 00:41:00,190
before actually I was doing some

00:40:55,330 --> 00:41:04,510
profiling on the surface like and I

00:41:00,190 --> 00:41:06,610
found out that the second like function

00:41:04,510 --> 00:41:08,200
which was called like most of the time

00:41:06,610 --> 00:41:13,270
and took more than that was there in the

00:41:08,200 --> 00:41:15,790
press that press like Python it was like

00:41:13,270 --> 00:41:20,050
the hub of the Bible the whole package

00:41:15,790 --> 00:41:23,650
the duration like looking at client

00:41:20,050 --> 00:41:26,590
rights and I mean thank you so the

00:41:23,650 --> 00:41:28,990
comment is that from some profiling

00:41:26,590 --> 00:41:32,830
might be that the actual slowdown is

00:41:28,990 --> 00:41:35,470
ineffective implementation in white we

00:41:32,830 --> 00:41:38,850
are using red threads in an optimal way

00:41:35,470 --> 00:41:41,410
in this might actually be solved by the

00:41:38,850 --> 00:41:44,340
suggestion number view of moving this

00:41:41,410 --> 00:41:48,150
logic into OD and of actually preparing

00:41:44,340 --> 00:41:48,150
making sure in

00:41:48,380 --> 00:41:55,549
that fartist I mostly improvement like

00:41:50,930 --> 00:42:01,279
enabler for further optimization they

00:41:55,549 --> 00:42:03,819
were said the first step was this

00:42:01,279 --> 00:42:03,819
actually

00:42:11,390 --> 00:42:17,640
the question is if we actually need to

00:42:15,180 --> 00:42:22,109
compute the chicks are foreign images or

00:42:17,640 --> 00:42:23,849
we could catch them somehow and I'm not

00:42:22,109 --> 00:42:26,070
actually sure if it's possible because

00:42:23,849 --> 00:42:28,530
in each composer you get a different

00:42:26,070 --> 00:42:30,450
image right then even if the packages

00:42:28,530 --> 00:42:32,760
are saying I believe that you will get

00:42:30,450 --> 00:42:36,599
like a big twice different file you will

00:42:32,760 --> 00:42:47,880
understand she will be different I mean

00:42:36,599 --> 00:42:50,940
it's just not that hard to make but we

00:42:47,880 --> 00:42:53,580
do not always from that so the comment

00:42:50,940 --> 00:42:55,980
was that we can when we run the

00:42:53,580 --> 00:42:59,340
generator i I saw that you have whatever

00:42:55,980 --> 00:43:02,310
it is it can spit out the tricks on as

00:42:59,340 --> 00:43:04,410
well the downside rig that is that we do

00:43:02,310 --> 00:43:06,109
not have direct access together with for

00:43:04,410 --> 00:43:12,359
breathing say like media

00:43:06,109 --> 00:43:14,940
it's somewhere behind behind for mm what

00:43:12,359 --> 00:43:16,650
it's so it needs to be changed for

00:43:14,940 --> 00:43:19,320
different places we also checked some

00:43:16,650 --> 00:43:21,810
things okay yeah but you're attending

00:43:19,320 --> 00:43:23,820
the show me two files and we can make a

00:43:21,810 --> 00:43:24,750
seat on that the text on one file the

00:43:23,820 --> 00:43:29,030
fact that we don't take some the other

00:43:24,750 --> 00:43:29,030
problem the other thing we thought right

00:43:30,819 --> 00:43:36,609
if before exiling foods over missouri so

00:43:33,549 --> 00:43:38,289
there's some work on that yeah we should

00:43:36,609 --> 00:43:40,539
just take the checksum data that's out

00:43:38,289 --> 00:43:42,959
click by the immigration a bit in here

00:43:40,539 --> 00:43:46,329
yeah the image creation will either

00:43:42,959 --> 00:43:47,559
bulge a nice element or the resources

00:43:46,329 --> 00:43:49,650
they're going to output in that

00:43:47,559 --> 00:43:55,689
information nobody's gonna do it twice

00:43:49,650 --> 00:43:59,549
yeah so the common this usage exams from

00:43:55,689 --> 00:44:02,380
the tool the breadth of the image the

00:43:59,549 --> 00:44:04,959
reproducible bill guys are doing work on

00:44:02,380 --> 00:44:08,499
making point iso creation and stuff be

00:44:04,959 --> 00:44:11,349
reproducible it's currently not totally

00:44:08,499 --> 00:44:13,329
possible because of date and time stamps

00:44:11,349 --> 00:44:16,059
and stuff like that you know slightly

00:44:13,329 --> 00:44:17,679
different there's people working to try

00:44:16,059 --> 00:44:21,150
and make that be reproducible so she

00:44:17,679 --> 00:44:21,150
could do things like that

00:44:22,290 --> 00:44:26,560
already in places that we saw passages

00:44:24,970 --> 00:44:28,420
you know one of the reasons why I'm

00:44:26,560 --> 00:44:31,120
working on moving to it in reliance each

00:44:28,420 --> 00:44:35,470
creator which don't lose anymore so you

00:44:31,120 --> 00:44:36,940
can tear but then whether yeah but it's

00:44:35,470 --> 00:44:38,440
one of the reasons I have a branch where

00:44:36,940 --> 00:44:41,890
I'm working on actually changing over to

00:44:38,440 --> 00:44:47,590
that but the other thing is Jen I said

00:44:41,890 --> 00:44:49,810
it was basically dead while yeah I did I

00:44:47,590 --> 00:44:54,760
had people you guys who switched over

00:44:49,810 --> 00:44:56,680
and these tools I know there's

00:44:54,760 --> 00:44:58,480
apparently a couple of works with how

00:44:56,680 --> 00:45:03,120
war axe actually produces bootable media

00:44:58,480 --> 00:45:03,120
that is blocking sorriso festa means

00:45:04,560 --> 00:45:10,210
well so the problem is that borax

00:45:07,840 --> 00:45:11,740
assumes that the ice will be digital

00:45:10,210 --> 00:45:15,550
cannot actually bring the hybridize so

00:45:11,740 --> 00:45:17,140
it one step three so if s cap and so it

00:45:15,550 --> 00:45:18,850
bangles the image the way it does it's

00:45:17,140 --> 00:45:20,890
in manually angles the image and once

00:45:18,850 --> 00:45:22,570
again we have an extrusive in the

00:45:20,890 --> 00:45:24,640
process because the padding is slightly

00:45:22,570 --> 00:45:26,680
different between the how giant image

00:45:24,640 --> 00:45:28,270
does but doesn't really you know do some

00:45:26,680 --> 00:45:32,370
alright so yeah it is easy enough to fix

00:45:28,270 --> 00:45:32,370
is just you know get details never enter

00:45:32,869 --> 00:45:39,170
I didn't I found acting I thought it was

00:45:35,150 --> 00:45:41,390
like this is really weird but yeah

00:45:39,170 --> 00:45:43,020
there's a couple of ways to like improve

00:45:41,390 --> 00:45:45,370
that

00:45:43,020 --> 00:45:49,300
this was a very long comment about

00:45:45,370 --> 00:45:52,600
possibilities improving creating images

00:45:49,300 --> 00:46:00,760
with different tools that might be more

00:45:52,600 --> 00:46:02,410
efficient there's another slide it's is

00:46:00,760 --> 00:46:05,020
the special sweeper let's break them

00:46:02,410 --> 00:46:08,040
that one is on the right now I can

00:46:05,020 --> 00:46:14,200
change this one more thing so this one

00:46:08,040 --> 00:46:22,660
is short the good thing is 5 seconds to

00:46:14,200 --> 00:46:25,030
make so I might get worse but I want

00:46:22,660 --> 00:46:26,320
them to make the bass snapper absolutely

00:46:25,030 --> 00:46:28,120
for it just want to plug it you can

00:46:26,320 --> 00:46:30,460
absolutely space on the whole

00:46:28,120 --> 00:46:33,580
infrastructure so they don't think I'm

00:46:30,460 --> 00:46:35,830
just gonna and then you know bleep I was

00:46:33,580 --> 00:46:37,930
having the door run time lapse and

00:46:35,830 --> 00:46:40,810
that'll be that'll that'll be a whole

00:46:37,930 --> 00:46:43,360
nother set of thing that will most

00:46:40,810 --> 00:46:46,810
likely fall in the making images sparked

00:46:43,360 --> 00:46:49,510
me correctly I think early I don't have

00:46:46,810 --> 00:46:52,600
a plan to create out of compose process

00:46:49,510 --> 00:46:56,010
that I was there to be this didn't you

00:46:52,600 --> 00:46:56,010
don't great

00:47:01,009 --> 00:47:08,519
yeah that's what they said the desert

00:47:03,829 --> 00:47:21,509
applicators so yeah it could definitely

00:47:08,519 --> 00:47:23,670
be something that was yeah we're going

00:47:21,509 --> 00:47:26,099
to be available you know some number to

00:47:23,670 --> 00:47:27,779
keep you guys by five lines of Sheldon I

00:47:26,099 --> 00:47:29,910
mean I'd run a Python program that will

00:47:27,779 --> 00:47:31,829
basically do it and have support for

00:47:29,910 --> 00:47:33,420
caching and stuff but like we don't know

00:47:31,829 --> 00:47:34,799
where to plug it in and that's one of

00:47:33,420 --> 00:47:42,420
the reasons we're hearing the simplest

00:47:34,799 --> 00:47:44,279
thing is just making like basically I

00:47:42,420 --> 00:47:47,009
hung he doesn't have a generic run Ruby

00:47:44,279 --> 00:47:48,930
flake thing but basically we would make

00:47:47,009 --> 00:47:51,690
a new config option and Bungie that says

00:47:48,930 --> 00:47:54,239
create a snap and it basically knows how

00:47:51,690 --> 00:47:56,880
to you know call comes with cookie with

00:47:54,239 --> 00:48:04,170
run roof and which is basically

00:47:56,880 --> 00:48:06,089
engineering do these things painter yeah

00:48:04,170 --> 00:48:08,720
so that's what because that's what we do

00:48:06,089 --> 00:48:08,720
for ax

00:48:14,780 --> 00:48:19,619
yeah okay that some of it El Alto

00:48:17,280 --> 00:48:23,839
I'll explain human host your buzzword of

00:48:19,619 --> 00:48:23,839
project names is fantastic idea

00:48:29,960 --> 00:48:38,430
all right so

00:48:32,580 --> 00:48:40,320
this'll probably so a lot of us have

00:48:38,430 --> 00:48:43,080
mentioned cashing things so that we get

00:48:40,320 --> 00:48:52,890
away from hitting Mount Cody for

00:48:43,080 --> 00:48:54,500
everything every time goes like there's

00:48:52,890 --> 00:48:58,440
a lot of ways to do caching wrong

00:48:54,500 --> 00:49:00,420
basically use the hell out of yourselves

00:48:58,440 --> 00:49:02,490
so that it makes it impossible to move

00:49:00,420 --> 00:49:04,080
on or you thought something was

00:49:02,490 --> 00:49:06,330
happening but it really wasn't a good

00:49:04,080 --> 00:49:11,190
fashion right so like do you guys have

00:49:06,330 --> 00:49:14,040
any ideas on the best way so the

00:49:11,190 --> 00:49:16,920
question is testing is easy to get wrong

00:49:14,040 --> 00:49:18,360
right there are some idea do we have

00:49:16,920 --> 00:49:22,290
some ideas how to actually implement

00:49:18,360 --> 00:49:25,380
that and at least myself I do not really

00:49:22,290 --> 00:49:27,570
the issue in technician is that if we

00:49:25,380 --> 00:49:29,060
actually want to reuse the same in

00:49:27,570 --> 00:49:31,560
multiple places

00:49:29,060 --> 00:49:35,850
it gets a lot more complicated than it

00:49:31,560 --> 00:49:37,620
would need to make so that I mean if we

00:49:35,850 --> 00:49:45,000
create a new cache for every single step

00:49:37,620 --> 00:49:48,920
in the process we would need to make

00:49:45,000 --> 00:49:48,920
sure that the cache is used by the right

00:49:52,970 --> 00:49:56,540
that's part is over

00:50:02,900 --> 00:50:07,349
build-it can write that's a more than

00:50:05,189 --> 00:50:09,269
one place and then putting a copy of

00:50:07,349 --> 00:50:17,160
Mount Cody up sitting next to the vestry

00:50:09,269 --> 00:50:21,059
90 in western to my father basically had

00:50:17,160 --> 00:50:23,160
me cache with the fur builder and yeah

00:50:21,059 --> 00:50:27,329
and so for example the caches per

00:50:23,160 --> 00:50:30,869
builder yeah right and so like if if

00:50:27,329 --> 00:50:33,449
this task went on this builder this time

00:50:30,869 --> 00:50:35,130
it would create a cache right if it goes

00:50:33,449 --> 00:50:37,319
to a different builder next time it

00:50:35,130 --> 00:50:40,369
creates a separate cache but that's okay

00:50:37,319 --> 00:50:43,380
because the cache is an optimization

00:50:40,369 --> 00:50:45,089
it's not say yes if it's not there it

00:50:43,380 --> 00:50:47,880
will basically go get food by itself

00:50:45,089 --> 00:50:49,349
right but the idea here you know we

00:50:47,880 --> 00:50:53,599
could do an optimization where you say

00:50:49,349 --> 00:50:56,249
you went to this builder last time and

00:50:53,599 --> 00:50:58,439
you know that builder is currently free

00:50:56,249 --> 00:51:01,259
so go ahead and go there but the idea

00:50:58,439 --> 00:51:03,419
here is that essentially you know you

00:51:01,259 --> 00:51:05,819
make it generic enough so that all of

00:51:03,419 --> 00:51:08,489
these different tasks including pull

00:51:05,819 --> 00:51:10,890
Indiana including pulling herbs are rpms

00:51:08,489 --> 00:51:12,690
including pulling other things could

00:51:10,890 --> 00:51:15,880
possibly

00:51:12,690 --> 00:51:17,800
you know this catch that is for builder

00:51:15,880 --> 00:51:19,800
so if you're going to build like you

00:51:17,800 --> 00:51:22,630
know if you're going to create images

00:51:19,800 --> 00:51:25,780
using anaconda and you need to pull down

00:51:22,630 --> 00:51:28,450
stuff from the building saw that was

00:51:25,780 --> 00:51:32,500
created we can also pull those down not

00:51:28,450 --> 00:51:33,850
in just our pantry that's good leaders

00:51:32,500 --> 00:51:37,840
are any other birds

00:51:33,850 --> 00:51:39,430
oh so something that's a keeper poster

00:51:37,840 --> 00:51:53,080
they're hooked at all yeah because then

00:51:39,430 --> 00:51:54,460
you just so that it it's not just the

00:51:53,080 --> 00:51:55,720
tool that would consume the cake but

00:51:54,460 --> 00:52:06,250
also a bunch of the infrastructure

00:51:55,720 --> 00:52:07,600
around it question more is came lead

00:52:06,250 --> 00:52:11,200
filter it through something like

00:52:07,600 --> 00:52:13,930
currently and at best is it's basically

00:52:11,200 --> 00:52:15,880
something that like you can't create

00:52:13,930 --> 00:52:18,940
like a proxy board right

00:52:15,880 --> 00:52:21,100
however HTTP is something you can create

00:52:18,940 --> 00:52:23,500
it is already old captions are they

00:52:21,100 --> 00:52:25,990
already go with them the country

00:52:23,500 --> 00:52:28,690
packages when all the downloads for the

00:52:25,990 --> 00:52:30,820
by HDB heaven for making Matakana

00:52:28,690 --> 00:52:33,700
runtime because none of the DNS

00:52:30,820 --> 00:52:36,010
processes are using NFS directly there

00:52:33,700 --> 00:52:38,440
always enough at HTTP which has a huge

00:52:36,010 --> 00:52:40,060
big cash on coach packages right which

00:52:38,440 --> 00:52:42,610
catches all the RPM so they're not

00:52:40,060 --> 00:52:44,830
hitting disk that being set up time

00:52:42,610 --> 00:52:46,840
every 90 percent of the time right it's

00:52:44,830 --> 00:52:48,670
very rare than actually hitting this the

00:52:46,840 --> 00:52:50,320
only time you hit the disk is when

00:52:48,670 --> 00:52:52,840
you're doing things like writing a repo

00:52:50,320 --> 00:52:56,380
to actually

00:52:52,840 --> 00:52:58,810
because then you got to em and then Koji

00:52:56,380 --> 00:53:00,550
does optimizations like skips that and

00:52:58,810 --> 00:53:02,290
stuff like that where it assumes it's

00:53:00,550 --> 00:53:04,870
the filenames exactly the same nothing's

00:53:02,290 --> 00:53:06,640
changed and it shuts all existing and

00:53:04,870 --> 00:53:10,240
pulls the metadata from the existing

00:53:06,640 --> 00:53:13,150
metadata under stop date so what you're

00:53:10,240 --> 00:53:14,800
saying is it is cached so it's not so

00:53:13,150 --> 00:53:17,070
we're not hitting my Fuji but we are

00:53:14,800 --> 00:53:20,740
getting a proxy that is outside it's

00:53:17,070 --> 00:53:21,250
wrong because the tools are still

00:53:20,740 --> 00:53:22,900
pending

00:53:21,250 --> 00:53:24,820
every time they were resolving

00:53:22,900 --> 00:53:27,220
everything having to go through that

00:53:24,820 --> 00:53:29,860
work every single right but they're just

00:53:27,220 --> 00:53:33,250
not eating right yeah the reason that's

00:53:29,860 --> 00:53:37,240
intentionally done that way is to ensure

00:53:33,250 --> 00:53:40,600
that every time that you make the new

00:53:37,240 --> 00:53:43,630
image or whatever that you can recreate

00:53:40,600 --> 00:53:46,810
that so any passion that you put in

00:53:43,630 --> 00:53:49,180
there to make it somewhat limitation

00:53:46,810 --> 00:53:51,310
elsewhere you then also need to take

00:53:49,180 --> 00:53:53,860
extra steps to make sure that however

00:53:51,310 --> 00:53:56,620
you go about doing that that you can

00:53:53,860 --> 00:53:58,510
then reduce that exact same thing

00:53:56,620 --> 00:54:01,960
regardless on the state in which you

00:53:58,510 --> 00:54:03,010
start right right I think the people

00:54:01,960 --> 00:54:04,780
what a lot of us are thinking right now

00:54:03,010 --> 00:54:08,710
that those extra steps are smaller than

00:54:04,780 --> 00:54:11,950
what we're doing yeah it should be

00:54:08,710 --> 00:54:14,560
anyway yeah it's literally just what

00:54:11,950 --> 00:54:16,960
what's the event lady about the whole

00:54:14,560 --> 00:54:19,510
reason that was get questioned if that

00:54:16,960 --> 00:54:22,450
was essential yeah happy I that started

00:54:19,510 --> 00:54:24,280
this conversation probably right and I

00:54:22,450 --> 00:54:25,750
think what you're saying is you know we

00:54:24,280 --> 00:54:29,040
go and exercise and what we're already

00:54:25,750 --> 00:54:32,600
doing then it gets harder to do it right

00:54:29,040 --> 00:54:35,420
but you know is there

00:54:32,600 --> 00:54:39,260
that helps is our assumption that now

00:54:35,420 --> 00:54:41,600
Koji is the bottleneck mmm not now right

00:54:39,260 --> 00:54:43,970
probably not ballad so things like

00:54:41,600 --> 00:54:45,950
Danica under runtime we don't actually

00:54:43,970 --> 00:54:50,470
know what's inside it so this is good

00:54:45,950 --> 00:54:50,470
very enlightening discussion

00:54:57,330 --> 00:55:00,219

YouTube URL: https://www.youtube.com/watch?v=kW7oz_zbSD0


