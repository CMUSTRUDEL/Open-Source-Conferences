Title: Flock 2018 - Desktop testing using dogtail and behave
Publication date: 2018-08-29
Playlist: Flock 2018
Description: 
	Wednesday, August 8, 2018
4:40pm - 5:30pm
@Hamburg 3+5

Talk: Desktop testing using dogtail and behave
Presenters: Petr Schindler

Description: I'd like to describe how desktop applications are tested in Red Hat's DesktopQE team. I started with upstreaming tests and would like to introduce them to QA community so they can participate in creation of automation of desktop testing in Fedora.

In the talk I'll show how tests written in behave look like and how to write a new one. I'll also show how to use At-spi browser and ipython to find UI elements of application we want to test and how to simulate user actions with dogtail.
Captions: 
	00:00:04,259 --> 00:00:14,469
so hello my name is Peter Schindler

00:00:09,969 --> 00:00:17,530
I am from Czech Republic from the Red

00:00:14,469 --> 00:00:20,550
Hat's desktop QE team and I'd like to

00:00:17,530 --> 00:00:25,690
show you how we test steps desktop

00:00:20,550 --> 00:00:29,650
applications we test ignore and how we

00:00:25,690 --> 00:00:35,560
use doc tell and behave for that purpose

00:00:29,650 --> 00:00:40,840
so the stop QE

00:00:35,560 --> 00:00:45,570
it's quite small internal team we do

00:00:40,840 --> 00:00:45,570
some automation also some manual testing

00:00:46,559 --> 00:00:55,620
it's not long time ago when we decided

00:00:51,430 --> 00:00:58,840
to start with upstream our test and it's

00:00:55,620 --> 00:01:04,449
like my work and I'd like to continue

00:00:58,840 --> 00:01:06,930
with what I just begun you can look in a

00:01:04,449 --> 00:01:11,800
page or there is a group desktop QA but

00:01:06,930 --> 00:01:16,509
right now I'm there there is just one

00:01:11,800 --> 00:01:20,800
one test or test for genome calculator

00:01:16,509 --> 00:01:23,619
and I hope that other will show up soon

00:01:20,800 --> 00:01:26,410
and it would be great if there would be

00:01:23,619 --> 00:01:30,369
some community when there will be tests

00:01:26,410 --> 00:01:33,009
or if there will be someone who would

00:01:30,369 --> 00:01:39,640
like to write some tests that would be

00:01:33,009 --> 00:01:43,479
the best we focus on testing of

00:01:39,640 --> 00:01:47,290
applications on different desktop

00:01:43,479 --> 00:01:51,159
environments like gnome and KDE but

00:01:47,290 --> 00:01:55,090
mainly gnome we also test office

00:01:51,159 --> 00:01:57,390
applications like Libre Office and few

00:01:55,090 --> 00:01:57,390
others

00:01:58,260 --> 00:02:06,009
then we test some other components which

00:02:02,350 --> 00:02:11,470
are desktop related like some konso apps

00:02:06,009 --> 00:02:16,360
for example B and libraries for example

00:02:11,470 --> 00:02:19,120
it's like gnome keyring also we test

00:02:16,360 --> 00:02:22,300
hardware which probably won't be up

00:02:19,120 --> 00:02:26,110
streamed because I don't think that

00:02:22,300 --> 00:02:32,290
thread head will give community a lot of

00:02:26,110 --> 00:02:35,019
hardware just like that but community

00:02:32,290 --> 00:02:39,580
can help us with testing on their own

00:02:35,019 --> 00:02:43,330
hardware that's where's the strength of

00:02:39,580 --> 00:02:47,830
the community lot of hardware so does

00:02:43,330 --> 00:02:55,269
someone know behave or met him before if

00:02:47,830 --> 00:02:57,940
now you can find some documentation this

00:02:55,269 --> 00:03:02,500
link I'm not sure if you can read it

00:02:57,940 --> 00:03:06,040
properly it's quite dark and but if you

00:03:02,500 --> 00:03:07,720
will look for behave and Python on the

00:03:06,040 --> 00:03:09,040
google it will show you probably this

00:03:07,720 --> 00:03:13,299
page

00:03:09,040 --> 00:03:17,760
and there you can find a lot of

00:03:13,299 --> 00:03:17,760
information about what is it how it

00:03:18,930 --> 00:03:26,159
could be used what's the philosophy

00:03:21,579 --> 00:03:29,670
behind it as it is written there its

00:03:26,159 --> 00:03:36,220
purpose is behavior driven developed

00:03:29,670 --> 00:03:43,120
which means that you define what you

00:03:36,220 --> 00:03:47,439
want your program to work like like you

00:03:43,120 --> 00:03:51,939
click some button and you expect to show

00:03:47,439 --> 00:03:58,359
hello world text somewhere and then you

00:03:51,939 --> 00:04:02,500
will program test for it which will test

00:03:58,359 --> 00:04:04,989
if it all really happens and then you

00:04:02,500 --> 00:04:08,049
will write a code and something like

00:04:04,989 --> 00:04:11,560
that we don't use it like that we just

00:04:08,049 --> 00:04:13,329
want to use behave for writing our tests

00:04:11,560 --> 00:04:16,599
for those application which already

00:04:13,329 --> 00:04:20,289
exists and developers quite probably

00:04:16,599 --> 00:04:25,570
doesn't care about development behavior

00:04:20,289 --> 00:04:28,330
and development driven development so we

00:04:25,570 --> 00:04:31,340
just use it for creating at the stasis

00:04:28,330 --> 00:04:35,690
or test plans

00:04:31,340 --> 00:04:38,030
and write em in behave the good thing

00:04:35,690 --> 00:04:41,470
about it and the advantage of behaviors

00:04:38,030 --> 00:04:46,300
that you can read the code and

00:04:41,470 --> 00:04:51,949
understand what's happening there so I

00:04:46,300 --> 00:04:55,400
will show you some tests it looks like

00:04:51,949 --> 00:04:57,860
this so you can see that there is some

00:04:55,400 --> 00:04:59,900
feature this is test case for non

00:04:57,860 --> 00:05:06,710
calculator you can find on on the page

00:04:59,900 --> 00:05:11,240
over big Bagheera you can probably read

00:05:06,710 --> 00:05:18,620
it right I'm not sure if this can like I

00:05:11,240 --> 00:05:20,810
will open it and get it wait so you can

00:05:18,620 --> 00:05:23,780
see that there is something like feature

00:05:20,810 --> 00:05:28,669
advanced mode which is grown calculators

00:05:23,780 --> 00:05:31,430
mode so we have some feature and we have

00:05:28,669 --> 00:05:37,370
some scenarios we want to test that

00:05:31,430 --> 00:05:43,580
could be particular test case and that's

00:05:37,370 --> 00:05:45,950
the test plan may be in every scenario

00:05:43,580 --> 00:05:49,099
which is one test case and one around

00:05:45,950 --> 00:05:52,940
you can define some steps for example

00:05:49,099 --> 00:05:58,360
this is not good example because it's a

00:05:52,940 --> 00:06:00,770
lot of test cases in one for example

00:05:58,360 --> 00:06:06,889
this one

00:06:00,770 --> 00:06:09,919
or this one it's it has name which is

00:06:06,889 --> 00:06:12,620
useful when you run a lot of tests you

00:06:09,919 --> 00:06:16,250
can see which one is this one in and the

00:06:12,620 --> 00:06:20,030
output which I will show later and then

00:06:16,250 --> 00:06:24,590
you have some steps which you want to do

00:06:20,030 --> 00:06:29,030
and you want to check some output so you

00:06:24,590 --> 00:06:29,419
can see that calculate done P divided by

00:06:29,030 --> 00:06:33,889
00:06:29,419 --> 00:06:38,270
it's like you can you know what it's

00:06:33,889 --> 00:06:42,409
wanted here and then there is a step

00:06:38,270 --> 00:06:45,470
called 10 which assume that something

00:06:42,409 --> 00:06:48,860
happened and you just checked if what

00:06:45,470 --> 00:06:51,949
happens is right and you just are

00:06:48,860 --> 00:06:54,889
looking for some error and that's that's

00:06:51,949 --> 00:07:00,069
it it's like you would some say to

00:06:54,889 --> 00:07:03,770
someone how he should test this feature

00:07:00,069 --> 00:07:08,479
it has some advantages like when you

00:07:03,770 --> 00:07:11,870
have to put it through deeper testing

00:07:08,479 --> 00:07:15,280
and use more values you can write

00:07:11,870 --> 00:07:20,960
something like scenario outline and use

00:07:15,280 --> 00:07:23,780
variables and bright the table and it

00:07:20,960 --> 00:07:26,389
will run for each line in the table it

00:07:23,780 --> 00:07:29,430
will run all those tests so it will

00:07:26,389 --> 00:07:34,930
click different button

00:07:29,430 --> 00:07:38,740
calculate different value and expects

00:07:34,930 --> 00:07:43,380
the different result so you don't have

00:07:38,740 --> 00:07:49,090
to write this like ten times just once

00:07:43,380 --> 00:07:56,050
so that's how would look like also you

00:07:49,090 --> 00:07:59,980
can have something like background which

00:07:56,050 --> 00:08:03,370
means that when you run scenario you

00:07:59,980 --> 00:08:07,180
want to do some preparation to some

00:08:03,370 --> 00:08:13,030
values so right here you want to set

00:08:07,180 --> 00:08:16,390
number format to be fixed and so so you

00:08:13,030 --> 00:08:18,430
don't have to write it to every test

00:08:16,390 --> 00:08:22,570
case you just write it here that you

00:08:18,430 --> 00:08:25,210
want to set the state of application to

00:08:22,570 --> 00:08:28,410
this one and then run the test case or

00:08:25,210 --> 00:08:31,410
the scenario as it is called in the

00:08:28,410 --> 00:08:31,410
behave

00:08:32,630 --> 00:08:45,750
so the another advantage of that is that

00:08:41,370 --> 00:08:47,910
you have reusable steps so if you use

00:08:45,750 --> 00:08:52,350
the same steps you will program it just

00:08:47,910 --> 00:08:56,339
once and you can use it in more more

00:08:52,350 --> 00:09:00,120
test cases or scenarios and also another

00:08:56,339 --> 00:09:03,990
advantage is it has nice outputs which I

00:09:00,120 --> 00:09:09,750
have opened right here I'm not sure if

00:09:03,990 --> 00:09:15,110
it's big enough to so you could see can

00:09:09,750 --> 00:09:19,980
you read it at least somehow yeah that's

00:09:15,110 --> 00:09:24,410
when I ran the whole feature

00:09:19,980 --> 00:09:28,380
I told behave to create HTML HTML output

00:09:24,410 --> 00:09:33,360
and it created something like this it

00:09:28,380 --> 00:09:38,040
says which scenario was run its first

00:09:33,360 --> 00:09:42,360
line in that table and those particular

00:09:38,040 --> 00:09:44,910
steps and if it's green then it's okay

00:09:42,360 --> 00:09:52,830
if it's not then it's broken

00:09:44,910 --> 00:09:57,060
like and it's in red so you can check

00:09:52,830 --> 00:10:00,390
what happened so you can see okay this

00:09:57,060 --> 00:10:04,740
is this should be P that's the only

00:10:00,390 --> 00:10:09,180
problem with this HTML output that some

00:10:04,740 --> 00:10:12,450
Unicode signs are shown wrongly like

00:10:09,180 --> 00:10:15,030
this so but if you know the test case or

00:10:12,450 --> 00:10:18,600
the scenario you can guess what's what

00:10:15,030 --> 00:10:29,110
it should be and you can see that it

00:10:18,600 --> 00:10:33,100
tried to somehow compute sin she knows

00:10:29,110 --> 00:10:37,620
and the result was wrong but you can

00:10:33,100 --> 00:10:41,079
also look what was the error message

00:10:37,620 --> 00:10:44,709
just it says that the result was

00:10:41,079 --> 00:10:49,390
different than expected you can also

00:10:44,709 --> 00:10:56,440
look on the screenshot it really was

00:10:49,390 --> 00:11:00,180
different than expected yeah it's this

00:10:56,440 --> 00:11:05,670
is the error in the test case itself so

00:11:00,180 --> 00:11:09,970
there should be just one P it was I

00:11:05,670 --> 00:11:13,720
think typo because it happened more time

00:11:09,970 --> 00:11:16,630
so but it's something you have to fix if

00:11:13,720 --> 00:11:20,050
you find this if you find something

00:11:16,630 --> 00:11:24,519
isn't working properly then it could be

00:11:20,050 --> 00:11:27,810
back in feature on in the application we

00:11:24,519 --> 00:11:35,079
are testing or it could and probably is

00:11:27,810 --> 00:11:38,860
back in your test which this one was and

00:11:35,079 --> 00:11:42,940
you can also see the video in calculator

00:11:38,860 --> 00:11:46,570
it doesn't make sense but there lot but

00:11:42,940 --> 00:11:49,410
there are some features which it's very

00:11:46,570 --> 00:11:54,130
it's really helpful to see what happened

00:11:49,410 --> 00:11:57,339
like it's not here but for example it

00:11:54,130 --> 00:12:00,880
was trying to click on currency button

00:11:57,339 --> 00:12:04,269
and then it didn't do nothing so you can

00:12:00,880 --> 00:12:07,660
see it here that it really didn't do

00:12:04,269 --> 00:12:18,329
nothing so

00:12:07,660 --> 00:12:18,329
and if you so you can see what happens

00:12:18,670 --> 00:12:23,730
yeah

00:12:21,120 --> 00:12:28,850
you can do this with behaves which is

00:12:23,730 --> 00:12:28,850
quite nice and helps to solve the box

00:12:36,889 --> 00:12:39,759
excuse me

00:12:42,020 --> 00:12:45,399
screen shot when the moment of the

00:12:44,720 --> 00:12:49,279
failure

00:12:45,399 --> 00:12:52,700
yeah it takes screenshots whenever I

00:12:49,279 --> 00:12:54,800
think whenever this step begins and ends

00:12:52,700 --> 00:12:57,140
or something like that and if something

00:12:54,800 --> 00:13:00,730
happens then it will propagate it to the

00:12:57,140 --> 00:13:00,730
HTML I think

00:13:04,760 --> 00:13:10,080
no passwords wannabes

00:13:07,170 --> 00:13:14,700
if you will click on button to show

00:13:10,080 --> 00:13:19,830
password then yes but if you are writing

00:13:14,700 --> 00:13:22,620
passwords in those days aha no you can

00:13:19,830 --> 00:13:27,920
program it to showed screenshots and

00:13:22,620 --> 00:13:30,840
videos also and in past it's just

00:13:27,920 --> 00:13:32,760
written like this because when you do a

00:13:30,840 --> 00:13:36,030
lot of testing there would be a lot of

00:13:32,760 --> 00:13:41,130
videos and HTML would be really big

00:13:36,030 --> 00:13:46,680
so it's saving space too yeah but you

00:13:41,130 --> 00:13:49,890
can program it it in yeah I will show

00:13:46,680 --> 00:13:55,770
you where it is I'm not sure if I will

00:13:49,890 --> 00:13:59,880
find directly the the code of doing the

00:13:55,770 --> 00:14:02,670
screenshots but I will show you where

00:13:59,880 --> 00:14:06,660
you can look for it and it can be

00:14:02,670 --> 00:14:09,840
programmed to create a different output

00:14:06,660 --> 00:14:14,430
so you can for example make a screenshot

00:14:09,840 --> 00:14:17,660
when in every step or when it's passing

00:14:14,430 --> 00:14:17,660
or something like that

00:14:18,020 --> 00:14:24,519
so that was to behave

00:14:21,390 --> 00:14:24,519
[Music]

00:14:25,820 --> 00:14:38,690
I did it so undock tail duck tail is

00:14:31,850 --> 00:14:43,270
Python library and utilities which are

00:14:38,690 --> 00:14:48,080
used to automation for automation and

00:14:43,270 --> 00:14:51,950
it's paid on XP which is toolkit which

00:14:48,080 --> 00:15:01,390
gives you the ability to click or to

00:14:51,950 --> 00:15:04,610
come like to do user input like clicking

00:15:01,390 --> 00:15:08,450
writing text and also to gather

00:15:04,610 --> 00:15:10,880
information like position of some of

00:15:08,450 --> 00:15:14,150
some parts of the screen or of some

00:15:10,880 --> 00:15:15,800
parts of the application like you want

00:15:14,150 --> 00:15:21,310
to know where the button you want to

00:15:15,800 --> 00:15:21,310
click on is and that's done with

00:15:22,770 --> 00:15:33,149
doc tail so when you want to write the

00:15:27,930 --> 00:15:35,970
test you will write the behave test case

00:15:33,149 --> 00:15:39,959
and you then have to program the

00:15:35,970 --> 00:15:45,779
particular steps and it's done with duck

00:15:39,959 --> 00:15:50,399
tail it gives you some IP to execute

00:15:45,779 --> 00:15:54,649
those things to search to you I three of

00:15:50,399 --> 00:16:00,450
the application for those buttons and

00:15:54,649 --> 00:16:05,279
text inputs areas and so sadly right now

00:16:00,450 --> 00:16:10,020
it doesn't work with Weiland and I'm not

00:16:05,279 --> 00:16:17,149
sure and nobody is if it will ever work

00:16:10,020 --> 00:16:22,800
with Phelan because you can find UI

00:16:17,149 --> 00:16:26,250
three and search it you can find where

00:16:22,800 --> 00:16:30,120
the button is in application but not on

00:16:26,250 --> 00:16:33,720
the screen hole so that's one problem

00:16:30,120 --> 00:16:36,120
and second problem is you can do the

00:16:33,720 --> 00:16:40,700
user actions like typing and clicking

00:16:36,120 --> 00:16:45,000
which is quite bad for this type of

00:16:40,700 --> 00:16:48,510
testing so right now we have to use xorg

00:16:45,000 --> 00:16:50,930
there while it is still present in

00:16:48,510 --> 00:16:50,930
fedora

00:16:51,079 --> 00:16:57,079
so yeah there's a problem you have to

00:16:54,720 --> 00:16:57,079
set

00:16:57,730 --> 00:17:08,539
custom dot-com of gdm - don't use valent

00:17:04,520 --> 00:17:11,659
in the session and then it works so you

00:17:08,539 --> 00:17:14,510
can still test the functionality of the

00:17:11,659 --> 00:17:17,829
application but you won't be probably

00:17:14,510 --> 00:17:27,189
able to catch all the crashes due to

00:17:17,829 --> 00:17:27,189
wrong due to motor programs or wayland

00:17:31,950 --> 00:17:35,109
[Music]

00:17:40,390 --> 00:17:50,659
they can work it work on it because it

00:17:43,669 --> 00:17:53,590
depends on the on the accessibility and

00:17:50,659 --> 00:17:58,610
it accessibility doesn't work on

00:17:53,590 --> 00:18:00,970
properly on violent and dr. L won't be

00:17:58,610 --> 00:18:00,970
able to

00:18:01,820 --> 00:18:08,670
to work properly on valent until the

00:18:06,630 --> 00:18:11,970
accessibility will work and it will

00:18:08,670 --> 00:18:18,120
probably never happen or not because

00:18:11,970 --> 00:18:20,430
it's quite difficult to change change

00:18:18,120 --> 00:18:24,450
the way Weiland works because the

00:18:20,430 --> 00:18:28,010
security reasons it doesn't work for it

00:18:24,450 --> 00:18:32,340
doesn't work Inc if it's directly in

00:18:28,010 --> 00:18:35,460
deeply written in Wayland so it's it

00:18:32,340 --> 00:18:38,850
will be really hard to change it somehow

00:18:35,460 --> 00:18:45,620
and it would took a lot of work probably

00:18:38,850 --> 00:18:51,510
and it would probably could create some

00:18:45,620 --> 00:18:54,390
security security or something like so

00:18:51,510 --> 00:18:59,610
it's maybe it's not a good idea to solve

00:18:54,390 --> 00:19:01,980
it but we'll see we are trying to make

00:18:59,610 --> 00:19:05,810
developers to change it and to make it

00:19:01,980 --> 00:19:10,260
somehow run at least for example in some

00:19:05,810 --> 00:19:12,100
some like distinct mode of of matter or

00:19:10,260 --> 00:19:18,810
something

00:19:12,100 --> 00:19:22,210
so how to define the steps behaviors

00:19:18,810 --> 00:19:26,260
decorators which will make which will

00:19:22,210 --> 00:19:29,380
match the steps I will show the code and

00:19:26,260 --> 00:19:36,350
I will show you I will have to open it

00:19:29,380 --> 00:19:39,309
in open it here yep

00:19:36,350 --> 00:19:39,309
so

00:19:40,590 --> 00:19:44,090
for example

00:19:46,130 --> 00:19:52,420
to calculate maybe step so you have to

00:19:53,210 --> 00:20:01,070
decorator step which will say that the

00:19:57,440 --> 00:20:03,759
step looks like calculate and some

00:20:01,070 --> 00:20:03,759
variable

00:20:05,110 --> 00:20:13,290
which is defined here and you define the

00:20:09,070 --> 00:20:18,190
function which gets context a variable

00:20:13,290 --> 00:20:20,200
which provides behave provides the

00:20:18,190 --> 00:20:24,760
context variable where are various

00:20:20,200 --> 00:20:29,350
information for example what feature is

00:20:24,760 --> 00:20:34,840
run what step is run what scenario there

00:20:29,350 --> 00:20:37,660
is you can run with context you can run

00:20:34,840 --> 00:20:39,850
another step from the code so you can

00:20:37,660 --> 00:20:42,160
just if you have step which to something

00:20:39,850 --> 00:20:45,720
you need to do in this step you can

00:20:42,160 --> 00:20:50,970
reuse that step and run it from this and

00:20:45,720 --> 00:20:54,130
it also can be filled with weight

00:20:50,970 --> 00:20:58,990
information you need for your testing so

00:20:54,130 --> 00:21:02,440
for example we use it for saving the

00:20:58,990 --> 00:21:06,730
instance of application like what we

00:21:02,440 --> 00:21:09,790
find in the UI 3 we can save it to the

00:21:06,730 --> 00:21:12,780
context and it's visible in all steps in

00:21:09,790 --> 00:21:17,220
this context

00:21:12,780 --> 00:21:19,890
and also you have to have variable which

00:21:17,220 --> 00:21:23,400
has the same name as in the crater and

00:21:19,890 --> 00:21:29,480
you can you will get what behave as in

00:21:23,400 --> 00:21:34,260
its test case there so you then do some

00:21:29,480 --> 00:21:38,640
typing and the magic you want to know we

00:21:34,260 --> 00:21:43,560
want to do with on on the session like

00:21:38,640 --> 00:21:47,220
click buttons everything you need and

00:21:43,560 --> 00:21:51,270
you use doc tail for it and it's written

00:21:47,220 --> 00:21:56,910
in Python but I forgot to mention in

00:21:51,270 --> 00:22:00,780
that it's holy in the Python so for

00:21:56,910 --> 00:22:04,280
example here you can see this instance

00:22:00,780 --> 00:22:08,100
is instance of the application which is

00:22:04,280 --> 00:22:12,210
which is tested right here so it's Dom

00:22:08,100 --> 00:22:14,960
calculator and you want to find in UI 3

00:22:12,210 --> 00:22:19,980
the children of the whole application

00:22:14,960 --> 00:22:26,100
which have some properties like this

00:22:19,980 --> 00:22:34,550
child have those his name result and is

00:22:26,100 --> 00:22:34,550
showing right now so it will find the UI

00:22:35,630 --> 00:22:45,740
for example for example button which is

00:22:38,820 --> 00:22:52,620
named result and it will returns it and

00:22:45,740 --> 00:22:56,600
then you can click on it for playing

00:22:52,620 --> 00:23:03,060
with this the idle thing is to play with

00:22:56,600 --> 00:23:05,880
ipython so I will I will if we have time

00:23:03,060 --> 00:23:11,610
you have a lot of time so I go show you

00:23:05,880 --> 00:23:15,680
how to play with those tests or with

00:23:11,610 --> 00:23:15,680
doctor later

00:23:17,370 --> 00:23:20,370
so

00:23:21,160 --> 00:23:30,970
and also if you define the den

00:23:27,330 --> 00:23:36,330
statements or den steps you can for

00:23:30,970 --> 00:23:39,760
example use assert to check if those

00:23:36,330 --> 00:23:44,950
routes are what you expect for example

00:23:39,760 --> 00:23:47,890
here it was the one I showed you in the

00:23:44,950 --> 00:23:50,590
example of behave it expects some error

00:23:47,890 --> 00:23:53,500
message so you will check if that

00:23:50,590 --> 00:23:56,890
message is what you expect you will get

00:23:53,500 --> 00:24:02,370
the actual message you will find the

00:23:56,890 --> 00:24:06,100
right child which is sometimes quite

00:24:02,370 --> 00:24:11,590
it's not straightforward because

00:24:06,100 --> 00:24:14,380
sometimes those those items aren't

00:24:11,590 --> 00:24:17,320
directly named or something

00:24:14,380 --> 00:24:19,630
they are just somewhere in the tree so

00:24:17,320 --> 00:24:23,800
we will have to find some item which is

00:24:19,630 --> 00:24:28,500
near in the tree and from the parent for

00:24:23,800 --> 00:24:33,010
example go to another branch of the tree

00:24:28,500 --> 00:24:37,630
but yeah it's I will show you how to

00:24:33,010 --> 00:24:42,550
find out where you can find it and when

00:24:37,630 --> 00:24:44,310
this isn't needed it happens sometimes

00:24:42,550 --> 00:24:49,830
because

00:24:44,310 --> 00:24:56,920
developers mostly don't write their UI

00:24:49,830 --> 00:25:00,970
to be really tested like this but mostly

00:24:56,920 --> 00:25:06,100
you want some items which have names

00:25:00,970 --> 00:25:12,060
like buttons or have some text in it so

00:25:06,100 --> 00:25:12,060
it can be found like quite easily

00:25:13,869 --> 00:25:23,909
also there is a one file which is quite

00:25:18,759 --> 00:25:25,209
important which is named environment

00:25:23,909 --> 00:25:34,089
goodbye

00:25:25,209 --> 00:25:38,079
where are defined special steps I would

00:25:34,089 --> 00:25:41,709
say or special functions is before all

00:25:38,079 --> 00:25:44,859
before scenario after step and so and it

00:25:41,709 --> 00:25:50,859
says that for example before scenario is

00:25:44,859 --> 00:25:53,829
run whenever is before the scenario its

00:25:50,859 --> 00:25:57,659
office run so for example you want to

00:25:53,829 --> 00:26:02,139
run some scenario for testing if it

00:25:57,659 --> 00:26:04,599
calculates sinuous of beep correctly so

00:26:02,139 --> 00:26:07,149
you run the scenario but before just

00:26:04,599 --> 00:26:13,269
before that you want to set up the

00:26:07,149 --> 00:26:18,579
context to have the right application

00:26:13,269 --> 00:26:21,009
it's here is as I said that you can save

00:26:18,579 --> 00:26:23,049
some information so information to

00:26:21,009 --> 00:26:26,559
context it's it could be done for

00:26:23,049 --> 00:26:30,700
example here so we just create the

00:26:26,559 --> 00:26:33,609
application instance which will show to

00:26:30,700 --> 00:26:37,899
the tree to the which will give the tree

00:26:33,609 --> 00:26:40,299
of the genome calculator the UI 3 of the

00:26:37,899 --> 00:26:45,940
genome calculator you can also put there

00:26:40,299 --> 00:26:48,849
more parameters like record video and a

00:26:45,940 --> 00:26:53,829
lot of others for example if the desktop

00:26:48,849 --> 00:26:56,370
file is named unusually then you can put

00:26:53,829 --> 00:27:01,170
it here so

00:26:56,370 --> 00:27:04,630
under steps which need to have this

00:27:01,170 --> 00:27:09,670
desktop file and use this it use them

00:27:04,630 --> 00:27:14,860
have write rest of our write name so you

00:27:09,670 --> 00:27:19,030
can do a lot of stuff here we have some

00:27:14,860 --> 00:27:23,440
common common steps and a common common

00:27:19,030 --> 00:27:27,610
common steps which are commonly uses

00:27:23,440 --> 00:27:28,240
between all the project we have right

00:27:27,610 --> 00:27:30,929
now

00:27:28,240 --> 00:27:36,760
there is only one project which is

00:27:30,929 --> 00:27:41,200
upstream but we have quite a lot tests

00:27:36,760 --> 00:27:44,080
for a lot of applications so for example

00:27:41,200 --> 00:27:47,410
I steps like run this application is

00:27:44,080 --> 00:27:50,650
used in every every test almost every

00:27:47,410 --> 00:27:55,350
test so it have steps and it does have

00:27:50,650 --> 00:27:59,170
sense to have it on some one place so

00:27:55,350 --> 00:28:03,570
every every project don't have to have

00:27:59,170 --> 00:28:06,570
this in own project so it makes shorter

00:28:03,570 --> 00:28:06,570
called

00:28:09,229 --> 00:28:16,720
okay

00:28:11,530 --> 00:28:20,050
so let's look on the UI 3 I am not sure

00:28:16,720 --> 00:28:23,380
if on this on this monitor our own on

00:28:20,050 --> 00:28:29,470
this screen it will be visible but

00:28:23,380 --> 00:28:33,900
hopefully s I will run it on my session

00:28:29,470 --> 00:28:41,320
so there is application which comes with

00:28:33,900 --> 00:28:45,010
XP it's called sniff and it shows the UI

00:28:41,320 --> 00:28:52,710
trace of running applications for

00:28:45,010 --> 00:28:52,710
example if I run calculator I have to

00:28:53,400 --> 00:29:00,560
refresh

00:28:56,030 --> 00:29:07,040
then I will hopefully find the

00:29:00,560 --> 00:29:13,150
calculator here and there is a UI 3 this

00:29:07,040 --> 00:29:16,810
is what you have in the context dot app

00:29:13,150 --> 00:29:20,990
you have this tree so it's the same as

00:29:16,810 --> 00:29:26,270
you can see in the Python Python dock

00:29:20,990 --> 00:29:29,420
tail and it has quite nice feature which

00:29:26,270 --> 00:29:34,550
is highlight items I'm not sure if it's

00:29:29,420 --> 00:29:38,030
visible its highlight items and it do

00:29:34,550 --> 00:29:41,360
the thing you would guess if you click

00:29:38,030 --> 00:29:43,700
on some item it will highlight it if

00:29:41,360 --> 00:29:49,010
it's visible then it will highlight

00:29:43,700 --> 00:29:50,750
directly where it is if it's not visible

00:29:49,010 --> 00:29:55,280
it just blink somewhere else

00:29:50,750 --> 00:29:57,800
so if I click on this item I know that

00:29:55,280 --> 00:30:01,510
it's the main part of the calculator so

00:29:57,800 --> 00:30:06,880
I can open it and investigate further I

00:30:01,510 --> 00:30:10,900
want some buttons so let me see okay

00:30:06,880 --> 00:30:18,650
buttons here you can see that those

00:30:10,900 --> 00:30:21,740
those trees aren't quite simple but

00:30:18,650 --> 00:30:26,210
still the main thing you need is for

00:30:21,740 --> 00:30:29,720
example to find a particular button so

00:30:26,210 --> 00:30:35,690
yeah I found button for factorial and

00:30:29,720 --> 00:30:38,360
it's called factorial great so now when

00:30:35,690 --> 00:30:40,460
I want to click on the bad factorial I

00:30:38,360 --> 00:30:45,110
know that I am looking for children

00:30:40,460 --> 00:30:48,470
which have the name property set to

00:30:45,110 --> 00:30:51,230
factorial if I want to specify further

00:30:48,470 --> 00:30:53,750
because there is written factorial

00:30:51,230 --> 00:30:56,810
somewhere else or there are two items

00:30:53,750 --> 00:31:00,419
with named factorial or something I can

00:30:56,810 --> 00:31:04,409
specify that roll name is push button

00:31:00,419 --> 00:31:08,489
and I can do this stuff with lot of

00:31:04,409 --> 00:31:11,429
things with everything which is here so

00:31:08,489 --> 00:31:17,100
I can investigate like this what I am

00:31:11,429 --> 00:31:22,730
looking for and then I can use it in

00:31:17,100 --> 00:31:27,769
Python I really I would now not SH

00:31:22,730 --> 00:31:27,769
probably work right now

00:31:33,240 --> 00:31:38,700
okay that's another session

00:31:39,960 --> 00:31:44,240
so you can

00:31:55,600 --> 00:31:58,900
can you see it

00:32:14,680 --> 00:32:23,660
so there is a one main thing you want to

00:32:21,310 --> 00:32:26,720
import from Doc tail

00:32:23,660 --> 00:32:31,640
it's from Doc tail tree its root which

00:32:26,720 --> 00:32:34,280
is really the root of this tree and then

00:32:31,640 --> 00:32:41,720
if you want some particle application

00:32:34,280 --> 00:32:44,800
you just write root application and the

00:32:41,720 --> 00:32:44,800
name of the application

00:33:08,990 --> 00:33:14,790
okay and then we have a root of the

00:33:11,730 --> 00:33:19,250
application Grom calculator so we can

00:33:14,790 --> 00:33:25,130
play with it you can find for example

00:33:19,250 --> 00:33:25,130
the I hope free we'll find it

00:33:44,310 --> 00:33:56,880
so I found just find the button I wanted

00:33:48,550 --> 00:33:56,880
to I was looking for before and if I

00:33:57,020 --> 00:34:02,789
[Music]

00:33:58,590 --> 00:34:08,690
if I just try to click on it you'll see

00:34:02,789 --> 00:34:08,690
what it will do will them do

00:34:12,190 --> 00:34:17,649
oops

00:34:14,960 --> 00:34:17,649
click

00:34:19,020 --> 00:34:26,460
and we clicked on it so a magic and I

00:34:23,700 --> 00:34:30,060
didn't know that I have X or I thought

00:34:26,460 --> 00:34:34,050
that I have Wayland so yeah this good

00:34:30,060 --> 00:34:37,589
good way to realize that you have X or

00:34:34,050 --> 00:34:43,550
exceptional not because I totally forget

00:34:37,589 --> 00:34:47,580
to change so yeah you can play with

00:34:43,550 --> 00:34:56,429
ipython and doctor like this so this is

00:34:47,580 --> 00:35:00,359
how I mostly write tests or mostly fix

00:34:56,429 --> 00:35:03,990
tests because from time to time

00:35:00,359 --> 00:35:08,280
developers decide that it's time to

00:35:03,990 --> 00:35:12,440
change the tree and then your tests are

00:35:08,280 --> 00:35:17,420
quite screwed and you have to rewrite it

00:35:12,440 --> 00:35:22,140
which doesn't happen a lot a lot and

00:35:17,420 --> 00:35:29,160
that's the main advantage of this this

00:35:22,140 --> 00:35:32,609
way to test UI applications so yeah but

00:35:29,160 --> 00:35:36,180
for example it happens to calculator

00:35:32,609 --> 00:35:40,560
quite some time

00:35:36,180 --> 00:35:43,440
so every one every button was renamed

00:35:40,560 --> 00:35:46,589
but fortunately it was renamed to what

00:35:43,440 --> 00:35:54,150
it's written on those buttons because

00:35:46,589 --> 00:35:59,910
for example for example button lock or

00:35:54,150 --> 00:36:02,760
no button sin wasn't both named sinners

00:35:59,910 --> 00:36:08,490
like the whole name of the function and

00:36:02,760 --> 00:36:10,920
now it's name is just as I am like

00:36:08,490 --> 00:36:12,060
what's written on the button so you

00:36:10,920 --> 00:36:16,859
don't have to guess it

00:36:12,060 --> 00:36:19,469
you just write for example capital and

00:36:16,859 --> 00:36:22,559
and need to know that it will find the

00:36:19,469 --> 00:36:25,910
proper button but you have to change it

00:36:22,559 --> 00:36:25,910
if it happens

00:36:30,430 --> 00:36:42,290
sometimes also when developers want to

00:36:36,770 --> 00:36:45,790
try a new stuff like new.i GUI fancy

00:36:42,290 --> 00:36:48,790
stuff like buttons like something like

00:36:45,790 --> 00:36:48,790
this

00:36:50,970 --> 00:36:57,210
you have to then change everything cord

00:36:53,670 --> 00:37:02,010
this is a very great way to store stuff

00:36:57,210 --> 00:37:04,340
in variables like so you have from time

00:37:02,010 --> 00:37:07,710
to time we have to rewrite a test as so

00:37:04,340 --> 00:37:10,680
so you have to go for to the sniff or

00:37:07,710 --> 00:37:13,830
play with ipython and fiber proper way

00:37:10,680 --> 00:37:21,420
to do what you want to do and to write

00:37:13,830 --> 00:37:29,730
the step so you can also highlight in

00:37:21,420 --> 00:37:32,520
ipython its function blink but I won't

00:37:29,730 --> 00:37:35,240
do it in my session because the the

00:37:32,520 --> 00:37:37,650
rectangle will stay on the on the screen

00:37:35,240 --> 00:37:40,320
indefinitely probably or I'm not sure

00:37:37,650 --> 00:37:43,620
how to remove it so I'm gonna do it

00:37:40,320 --> 00:37:50,180
because don't like random rectangles on

00:37:43,620 --> 00:37:54,330
my screen yeah and that's really useful

00:37:50,180 --> 00:37:58,640
because it show you that you have the

00:37:54,330 --> 00:38:01,980
right right item you are looking for so

00:37:58,640 --> 00:38:04,560
if you want to play on the virtual

00:38:01,980 --> 00:38:07,380
machine which mostly you want because

00:38:04,560 --> 00:38:09,960
for example you don't have the right

00:38:07,380 --> 00:38:12,780
version or federal urban you want to

00:38:09,960 --> 00:38:15,480
write tests for like you want write

00:38:12,780 --> 00:38:20,280
tests for federal 28 you already have

00:38:15,480 --> 00:38:23,730
row height as it should be then you can

00:38:20,280 --> 00:38:25,020
install just to the virtual machine uses

00:38:23,730 --> 00:38:28,020
SH to connect to it

00:38:25,020 --> 00:38:35,790
and from the root session you can use

00:38:28,020 --> 00:38:41,730
this this command to run user session

00:38:35,790 --> 00:38:48,120
and to be connected to it and so you can

00:38:41,730 --> 00:38:51,210
use the Python or I Payton stuff even in

00:38:48,120 --> 00:38:56,230
SSH session which is really useful

00:38:51,210 --> 00:38:58,000
because for example you can you can play

00:38:56,230 --> 00:39:01,090
with it you don't have to care about

00:38:58,000 --> 00:39:04,960
rectangles on your screen and everything

00:39:01,090 --> 00:39:08,830
and when you end this session it will

00:39:04,960 --> 00:39:11,970
just end the session so yeah it's good

00:39:08,830 --> 00:39:14,500
for playing with it and you can do there

00:39:11,970 --> 00:39:20,770
everything and don't have to care about

00:39:14,500 --> 00:39:23,380
your own session so two main functions I

00:39:20,770 --> 00:39:26,260
use in my pattern or two things I import

00:39:23,380 --> 00:39:30,280
this route for getting the root of

00:39:26,260 --> 00:39:32,980
application and some raw input like

00:39:30,280 --> 00:39:38,680
press key which is function which just

00:39:32,980 --> 00:39:41,680
press key down or up or enter so it's

00:39:38,680 --> 00:39:45,040
useful and also there is there is a

00:39:41,680 --> 00:39:49,780
function click and so so you can look in

00:39:45,040 --> 00:39:52,560
the doc tail it's it's quite nice to

00:39:49,780 --> 00:39:52,560
look on the code

00:39:53,400 --> 00:39:58,590
so as I said you can run it locally

00:39:55,740 --> 00:40:02,790
aside it right now you can run it on VM

00:39:58,590 --> 00:40:07,400
and also in bare metal and use SSH to

00:40:02,790 --> 00:40:11,790
connect to it you can play with doc tail

00:40:07,400 --> 00:40:17,190
with a patent or you can just run this

00:40:11,790 --> 00:40:23,670
bit behave in the NAM calculator you can

00:40:17,190 --> 00:40:34,800
find there for example if you will if

00:40:23,670 --> 00:40:40,200
you go download download code from that

00:40:34,800 --> 00:40:45,540
pig ear or how is it pronounced then you

00:40:40,200 --> 00:40:50,430
will find there the ranted stage which

00:40:45,540 --> 00:40:54,420
looks like this which will when you run

00:40:50,430 --> 00:40:57,660
it it will download the sub-module which

00:40:54,420 --> 00:41:01,110
is for downloading recommen steps from

00:40:57,660 --> 00:41:06,600
another git repo so it will include all

00:41:01,110 --> 00:41:08,730
those common steps into your project it

00:41:06,600 --> 00:41:12,780
will remove all the videos because

00:41:08,730 --> 00:41:18,660
there's if you record the sessions it's

00:41:12,780 --> 00:41:23,810
this will get full of those and then it

00:41:18,660 --> 00:41:27,740
run the behave in again in test session

00:41:23,810 --> 00:41:33,870
that's it's done by this function this

00:41:27,740 --> 00:41:37,080
ducktail run headless next create

00:41:33,870 --> 00:41:40,170
session when we run it with sudo and

00:41:37,080 --> 00:41:43,620
some user it will run it as user so it

00:41:40,170 --> 00:41:45,780
will be used as asian so it will look

00:41:43,620 --> 00:41:50,220
like your normal session you are using

00:41:45,780 --> 00:41:54,530
as user and you can then put there some

00:41:50,220 --> 00:42:00,260
function you want to run when i show

00:41:54,530 --> 00:42:02,990
when I was showing you this before I

00:42:00,260 --> 00:42:06,080
there was a Bosch which is the way how

00:42:02,990 --> 00:42:10,340
we what you want to run when you use SSH

00:42:06,080 --> 00:42:12,380
because you want to play with it but if

00:42:10,340 --> 00:42:16,760
you run directly behave

00:42:12,380 --> 00:42:26,390
it will run tests those behave tests

00:42:16,760 --> 00:42:29,450
it's done like this behave Minos - T it

00:42:26,390 --> 00:42:35,750
says that you want to run a test which

00:42:29,450 --> 00:42:41,570
is wait and there is parameter if I look

00:42:35,750 --> 00:42:45,950
in the test all those scenarios have

00:42:41,570 --> 00:42:50,150
defined tax so if you want just run this

00:42:45,950 --> 00:42:54,090
scenario you will put there

00:42:50,150 --> 00:42:56,520
- T advance calculation and it will run

00:42:54,090 --> 00:43:01,950
this particular scenario you can also

00:42:56,520 --> 00:43:05,520
run a whole feature because the feature

00:43:01,950 --> 00:43:09,420
was stacked with it and you can also put

00:43:05,520 --> 00:43:13,140
the same tag two more scenarios so you

00:43:09,420 --> 00:43:15,570
can use tax to run different for example

00:43:13,140 --> 00:43:18,750
if you would have tests for different

00:43:15,570 --> 00:43:23,190
tiers then you could run it like this

00:43:18,750 --> 00:43:29,390
you could tuck it by with Tier one tuck

00:43:23,190 --> 00:43:33,180
and run all those t1 tax t run tests

00:43:29,390 --> 00:43:37,470
okay what's the time okay I should end

00:43:33,180 --> 00:43:41,640
in five minutes I guess okay that's

00:43:37,470 --> 00:43:47,790
right because I'm on the end right now

00:43:41,640 --> 00:43:50,870
I'm trying to write some osci we I will

00:43:47,790 --> 00:43:54,990
probably won't get it to it right now

00:43:50,870 --> 00:43:59,640
it's a good way to run those tests if

00:43:54,990 --> 00:44:02,640
you want don't want to set anything

00:43:59,640 --> 00:44:06,390
because normally you have to install dr.

00:44:02,640 --> 00:44:10,340
behave and everything set up but with

00:44:06,390 --> 00:44:13,110
that it could be used on the cloud base

00:44:10,340 --> 00:44:16,710
image which you can download you have to

00:44:13,110 --> 00:44:19,470
enlarge the partition because it's too

00:44:16,710 --> 00:44:24,240
small it's default by default for gigs

00:44:19,470 --> 00:44:26,780
so you have to make it at least eight to

00:44:24,240 --> 00:44:32,160
run those tests and then you will just

00:44:26,780 --> 00:44:34,380
use you will use under test interface to

00:44:32,160 --> 00:44:42,230
run the machine for you with that image

00:44:34,380 --> 00:44:42,230
and I have written the osci

00:44:44,520 --> 00:44:55,770
oscy I like rapper for it and llamo I

00:44:51,190 --> 00:44:59,220
would have to find it in here

00:44:55,770 --> 00:45:02,060
upstream first

00:44:59,220 --> 00:45:02,060
okay

00:45:05,470 --> 00:45:12,170
that's the next stuff we want to do like

00:45:09,320 --> 00:45:12,920
when we upstream the tests to run it in

00:45:12,170 --> 00:45:16,790
osci

00:45:12,920 --> 00:45:18,740
but it's under go because there is some

00:45:16,790 --> 00:45:23,450
problems with desktop application being

00:45:18,740 --> 00:45:26,690
run there and but it's like running DC

00:45:23,450 --> 00:45:29,450
ml with ansible PlayBook with test

00:45:26,690 --> 00:45:32,869
subject set on the kyouko image you want

00:45:29,450 --> 00:45:36,940
to run it on and it will do everything

00:45:32,869 --> 00:45:42,010
if you have to write a CI image

00:45:36,940 --> 00:45:45,800
Emma said and this one just said the

00:45:42,010 --> 00:45:50,240
image to have everything installed like

00:45:45,800 --> 00:45:53,270
workstation to have test user for user

00:45:50,240 --> 00:45:57,700
session it will install required

00:45:53,270 --> 00:46:02,500
packages download gate and run tests and

00:45:57,700 --> 00:46:02,500
that's everything you need to do

00:46:04,030 --> 00:46:13,670
normally I run it like I run virtual

00:46:10,340 --> 00:46:17,420
machine then SSH to that we were to a

00:46:13,670 --> 00:46:25,160
machine download from gate or arcing

00:46:17,420 --> 00:46:29,990
from my local computer or my host I copy

00:46:25,160 --> 00:46:35,290
the tests and run it with run dot SH a

00:46:29,990 --> 00:46:37,760
run test just SH and see results so

00:46:35,290 --> 00:46:41,170
that's how I run it

00:46:37,760 --> 00:46:46,520
and you can try it too

00:46:41,170 --> 00:46:49,700
so that was if I had some slides if I

00:46:46,520 --> 00:46:51,410
would like run a flow rate in ten

00:46:49,700 --> 00:46:56,450
minutes and it didn't happened

00:46:51,410 --> 00:46:59,870
so it's further a QA so if you are

00:46:56,450 --> 00:47:05,870
interested in testing you can also look

00:46:59,870 --> 00:47:08,900
on other stuff like open QA and just ask

00:47:05,870 --> 00:47:13,130
guys in Faro a QA team how can you help

00:47:08,900 --> 00:47:16,460
be testing Ferrara and if you have some

00:47:13,130 --> 00:47:20,180
questions and don't want to talk to me

00:47:16,460 --> 00:47:22,280
directly because I don't know I smell

00:47:20,180 --> 00:47:32,330
for example like that indeed whether

00:47:22,280 --> 00:47:37,730
it's not it's not it happens so you can

00:47:32,330 --> 00:47:43,250
reach me on the mail machine at redhead

00:47:37,730 --> 00:47:47,660
calm or if you are in Brno you can come

00:47:43,250 --> 00:47:55,610
to my office or just find me on Fedora

00:47:47,660 --> 00:47:59,690
IRC like pushing or yeah that's that's

00:47:55,610 --> 00:48:01,490
it probably just find me and ask me to

00:47:59,690 --> 00:48:06,070
whatever you want if you have questions

00:48:01,490 --> 00:48:11,420
now I can probably give you some time in

00:48:06,070 --> 00:48:13,780
order of seconds to answer but if you're

00:48:11,420 --> 00:48:17,180
not I thank you for your attention and

00:48:13,780 --> 00:48:19,960
have a nice day and evening playing

00:48:17,180 --> 00:48:19,960
games or what

00:48:27,880 --> 00:48:33,570
you

00:48:30,180 --> 00:48:36,810
I'm not really sure I haven't done stuff

00:48:33,570 --> 00:48:40,320
like that because it's I'm quite shortly

00:48:36,810 --> 00:48:43,830
in the team but I know that the graphic

00:48:40,320 --> 00:48:46,980
cards are tested on hardware not sure

00:48:43,830 --> 00:48:51,390
how there's there are probably tests

00:48:46,980 --> 00:48:52,880
running behave which test if everything

00:48:51,390 --> 00:48:56,160
looks okay

00:48:52,880 --> 00:49:00,510
Wi-Fi is tested probably with network

00:48:56,160 --> 00:49:04,140
manager which was one of nice stuff

00:49:00,510 --> 00:49:07,710
because the developer of network manager

00:49:04,140 --> 00:49:12,090
tests just upstream his tests and use

00:49:07,710 --> 00:49:14,880
osci already so you can look on network

00:49:12,090 --> 00:49:18,690
manager tests there it's on github

00:49:14,880 --> 00:49:21,840
network manager network manager CI so

00:49:18,690 --> 00:49:25,920
yeah I think that they just have a

00:49:21,840 --> 00:49:29,610
machine stuffed with a lot of Wi-Fi and

00:49:25,920 --> 00:49:33,680
network cut and run tests on them I

00:49:29,610 --> 00:49:37,610
think that this is what's wrong there

00:49:33,680 --> 00:49:42,030
I'm not sure with graphic cards but

00:49:37,610 --> 00:49:45,120
maybe we do manual testing also so I

00:49:42,030 --> 00:49:48,390
think that it's part of manual testing

00:49:45,120 --> 00:49:52,200
also probably there are some automated

00:49:48,390 --> 00:49:55,260
tests but yeah not sure I'm not sure

00:49:52,200 --> 00:49:58,770
saying but if you will ask me when I

00:49:55,260 --> 00:50:01,410
will be in office I can direct you to

00:49:58,770 --> 00:50:02,240
the right person who will answer your

00:50:01,410 --> 00:50:05,580
questions

00:50:02,240 --> 00:50:07,589
happily I will make him happily answer

00:50:05,580 --> 00:50:12,930
questions

00:50:07,589 --> 00:50:15,410
another question you can make sure that

00:50:12,930 --> 00:50:18,350
things are rendered correctly

00:50:15,410 --> 00:50:21,830
like if the button is like some other

00:50:18,350 --> 00:50:24,770
row or something or it's wrong that's

00:50:21,830 --> 00:50:27,020
what I'm not sure about you can do it

00:50:24,770 --> 00:50:36,920
with open QA but we don't use open

00:50:27,020 --> 00:50:40,960
queuing you can right step to do it one

00:50:36,920 --> 00:50:44,630
member of our team written open CV tests

00:50:40,960 --> 00:50:47,510
so you can like give it a picture how it

00:50:44,630 --> 00:50:51,640
should look like and it would make a

00:50:47,510 --> 00:50:54,910
screenshot or something but still it

00:50:51,640 --> 00:50:54,910
could be

00:50:55,980 --> 00:51:05,430
it's a it's a step in lockdown a step

00:51:00,960 --> 00:51:10,070
for behave written not with duck tail

00:51:05,430 --> 00:51:10,070
this one just in Peyton Peyton knows

00:51:10,299 --> 00:51:18,980
yeah mm-hmm

00:51:16,309 --> 00:51:22,549
that's what's open QA is you just

00:51:18,980 --> 00:51:25,519
compares pictures so you can make it

00:51:22,549 --> 00:51:28,640
work like this with behave you just

00:51:25,519 --> 00:51:30,650
write the correct step which says check

00:51:28,640 --> 00:51:35,660
if the button is on the right place or

00:51:30,650 --> 00:51:38,299
looks like it should but I'm not sure if

00:51:35,660 --> 00:51:41,809
it will discover some hardware issues

00:51:38,299 --> 00:51:44,690
probably not so not not sure I'm really

00:51:41,809 --> 00:51:48,380
not sure how this is done because my

00:51:44,690 --> 00:51:51,950
work is in testing off top application

00:51:48,380 --> 00:51:55,660
was not the hardware so I so far didn't

00:51:51,950 --> 00:51:55,660
care about the hardware tests

00:52:00,130 --> 00:52:05,260
this

00:52:02,180 --> 00:52:05,260
I spent

00:52:18,900 --> 00:52:34,720
excuse me that's to be decided for

00:52:31,930 --> 00:52:41,020
public and it's from our manager not on

00:52:34,720 --> 00:52:43,450
us any problem is real problem is

00:52:41,020 --> 00:52:47,200
blocker for us and we are working on

00:52:43,450 --> 00:52:49,990
making someone to solve it but if it

00:52:47,200 --> 00:52:53,290
won't happen and it will be a problem to

00:52:49,990 --> 00:53:02,280
run it on X or because for example it's

00:52:53,290 --> 00:53:06,220
or will disappear then yeah it will be I

00:53:02,280 --> 00:53:10,300
think that there is already written

00:53:06,220 --> 00:53:15,450
pythons free detail and behave not sure

00:53:10,300 --> 00:53:17,980
I haven't tried yes and it should be

00:53:15,450 --> 00:53:21,880
rewritten but I think the doctor is

00:53:17,980 --> 00:53:25,270
written for Python 3 I think that I use

00:53:21,880 --> 00:53:28,690
it already but the behave probably isn't

00:53:25,270 --> 00:53:31,859
right now and that's something I'm not

00:53:28,690 --> 00:53:37,450
sure and because of changing of default

00:53:31,859 --> 00:53:41,920
of Python or in 29 we have to issue

00:53:37,450 --> 00:53:46,120
probably but behave Python behave is

00:53:41,920 --> 00:53:50,470
someone else package so

00:53:46,120 --> 00:53:56,110
yeah that's a good question for us to

00:53:50,470 --> 00:54:03,330
ask the developer so the weather is

00:53:56,110 --> 00:54:04,690
getting better yeah some storm is coming

00:54:03,330 --> 00:54:10,020
okay

00:54:04,690 --> 00:54:10,020

YouTube URL: https://www.youtube.com/watch?v=Lo7EgwcOeLo


