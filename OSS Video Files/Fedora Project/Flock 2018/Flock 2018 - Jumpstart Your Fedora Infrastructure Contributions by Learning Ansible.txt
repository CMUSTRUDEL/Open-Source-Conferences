Title: Flock 2018 - Jumpstart Your Fedora Infrastructure Contributions by Learning Ansible
Publication date: 2018-09-08
Playlist: Flock 2018
Description: 
	Friday, August 10, 2018 
11:30am - 11:55am
@Dresden

Talk: Jumpstart Your Fedora Infrastructure Contributions by Learning Ansible
Presenters: Adam Miller

Description: Ansible is a radically simple agentless IT automation system. It handles configuration-management, application deployment, cloud provisioning, ad-hoc task-execution, and multinode orchestration - 
including trivializing things like zero-downtime rolling updates with load balancers.

The Fedora Infrastructure Team has been long time users, advocates of, and contributors to Ansible, with both Fedora and Ansible having a long shared history. In this session we will discuss Ansible: what it is, general concepts, how to use it, and how it can be used to automate IT operations. From there we will discuss some specific aspects of how the Fedora Infrastructure Team uses Ansible to configure and automate the Fedora Infrastructure, which itself powers the Fedora Project. This aims to provide a jump-start to the skill set of systems administrators who are interested in getting involved with the Fedora Infrastructure Team.
Captions: 
	00:00:09,290 --> 00:00:14,830
let's do this so my name is Adam Miller

00:00:11,879 --> 00:00:18,700
I've been in fedora

00:00:14,830 --> 00:00:21,760
a contributing member of the instructure

00:00:18,700 --> 00:00:24,790
team less so these days because life's

00:00:21,760 --> 00:00:27,880
busy but yeah so the instructure team is

00:00:24,790 --> 00:00:29,980
heavily using ansible to to automate and

00:00:27,880 --> 00:00:32,349
provision and configure all of the

00:00:29,980 --> 00:00:34,720
infrastructure in fedora and so part of

00:00:32,349 --> 00:00:36,910
my motivation as a fan of fedoras fan of

00:00:34,720 --> 00:00:38,470
the instructor team and then also as a

00:00:36,910 --> 00:00:40,330
member of the ansible team and a fan of

00:00:38,470 --> 00:00:42,550
ansible its kind of hoping to kind of

00:00:40,330 --> 00:00:44,650
drum up some folks with a little bit of

00:00:42,550 --> 00:00:47,170
skill set to hopefully contribute back

00:00:44,650 --> 00:00:54,879
to that effort so

00:00:47,170 --> 00:00:59,559
oh really quickly just attribution did I

00:00:54,879 --> 00:01:01,210
change hah that's wrong these are stole

00:00:59,559 --> 00:01:04,030
most these slides from James house Nick

00:01:01,210 --> 00:01:05,770
he's the lead of ansible galaxy but I

00:01:04,030 --> 00:01:07,060
left the wrong attribution on there

00:01:05,770 --> 00:01:11,229
because I still a different slide deck

00:01:07,060 --> 00:01:15,340
from James Cammarata I borrowed we

00:01:11,229 --> 00:01:18,119
shared collective collaboration okay so

00:01:15,340 --> 00:01:18,119
things we're gonna talk about today

00:01:23,310 --> 00:01:27,070
things we're talking about it we're

00:01:25,000 --> 00:01:29,700
quickly going to discuss what ansible

00:01:27,070 --> 00:01:33,490
is we're gonna talk about ad-hoc command

00:01:29,700 --> 00:01:36,070
orchestration inventory playbooks and

00:01:33,490 --> 00:01:40,840
roles so just quick show of hands who is

00:01:36,070 --> 00:01:43,990
familiar with ansible is very cool okay

00:01:40,840 --> 00:01:45,520
most of the room so this is probably

00:01:43,990 --> 00:01:48,690
review for most of you but just very

00:01:45,520 --> 00:01:51,670
quickly ansible is a simple agent list a

00:01:48,690 --> 00:01:53,650
simple agentless item potent task

00:01:51,670 --> 00:01:54,760
automation tool and the reason I make

00:01:53,650 --> 00:01:56,680
that distinction is because a lot of

00:01:54,760 --> 00:01:58,030
people call configuration management and

00:01:56,680 --> 00:01:59,860
technically we can't accomplish

00:01:58,030 --> 00:02:01,210
configuration management because some of

00:01:59,860 --> 00:02:03,930
the things that we can automate are

00:02:01,210 --> 00:02:05,920
effectively the automation of templating

00:02:03,930 --> 00:02:07,930
configuration files those kind of things

00:02:05,920 --> 00:02:10,780
just kind of traditional definition of

00:02:07,930 --> 00:02:12,310
State for the system but as an

00:02:10,780 --> 00:02:13,840
automation platform an automation tool

00:02:12,310 --> 00:02:16,299
we can do considerably more than that we

00:02:13,840 --> 00:02:18,879
can provision our virtual machines we

00:02:16,299 --> 00:02:22,480
can do bare metal bootstrapping we can

00:02:18,879 --> 00:02:25,209
actually you know work with networking

00:02:22,480 --> 00:02:27,160
devices those kinds of things we can

00:02:25,209 --> 00:02:29,680
provision your cloud

00:02:27,160 --> 00:02:32,290
all sorts of very interesting things and

00:02:29,680 --> 00:02:34,810
we can do so between multiple sets of

00:02:32,290 --> 00:02:42,010
hosts so where we have the ability to

00:02:34,810 --> 00:02:45,550
kind of work okay sorry I don't like

00:02:42,010 --> 00:02:47,110
being like tethered to this thing with

00:02:45,550 --> 00:02:48,580
the ability to work between different

00:02:47,110 --> 00:02:53,050
sets of hosts and kind of jump back and

00:02:48,580 --> 00:02:54,880
forth and make conditional action take

00:02:53,050 --> 00:02:58,420
conditional action based on some

00:02:54,880 --> 00:03:01,030
parameters of the environment so a task

00:02:58,420 --> 00:03:02,350
when we talk about automating things the

00:03:01,030 --> 00:03:04,830
fundamental component that we're gonna

00:03:02,350 --> 00:03:07,350
be automating is a task so tasks

00:03:04,830 --> 00:03:10,120
functionality is provided by a module

00:03:07,350 --> 00:03:12,310
tasks are grouped together via plays so

00:03:10,120 --> 00:03:14,950
a set of tasks is considered a play and

00:03:12,310 --> 00:03:17,050
a play is restricted to a group of hosts

00:03:14,950 --> 00:03:18,880
a play operates

00:03:17,050 --> 00:03:21,720
okay so I'll play operates on a set of

00:03:18,880 --> 00:03:24,040
hosts hosts are indexed via an inventory

00:03:21,720 --> 00:03:26,140
and we'll talk about what that means in

00:03:24,040 --> 00:03:28,180
a minute play books contain what can

00:03:26,140 --> 00:03:29,560
contain one or more plays traditionally

00:03:28,180 --> 00:03:31,030
a lot of play books you'll see will only

00:03:29,560 --> 00:03:32,680
contain one play they'll only have one

00:03:31,030 --> 00:03:34,600
heading with one group of hosts but you

00:03:32,680 --> 00:03:37,450
can actually put in multiple plays in a

00:03:34,600 --> 00:03:39,670
play book and then roles with this

00:03:37,450 --> 00:03:43,570
concept of a role a role is a bundled

00:03:39,670 --> 00:03:45,130
reusable set of content and that can be

00:03:43,570 --> 00:03:47,440
you know your templates that can be your

00:03:45,130 --> 00:03:49,510
files that can be your task lists those

00:03:47,440 --> 00:03:51,340
kinds of things and they're meant to be

00:03:49,510 --> 00:03:56,560
kind of all-encompassing and able to be

00:03:51,340 --> 00:03:58,270
redistributed and shared and reused so

00:03:56,560 --> 00:04:01,000
this is an example of an ad hoc command

00:03:58,270 --> 00:04:03,400
so in this example we were using the yum

00:04:01,000 --> 00:04:06,940
module we're using the arguments to the

00:04:03,400 --> 00:04:08,470
module package and state and the values

00:04:06,940 --> 00:04:11,890
we're giving to those respectively our

00:04:08,470 --> 00:04:13,360
bash and installed so if you can see I

00:04:11,890 --> 00:04:15,340
don't know hopefully in the back you can

00:04:13,360 --> 00:04:18,100
see it's ansible local host so local

00:04:15,340 --> 00:04:19,570
host there is going to be our identifier

00:04:18,100 --> 00:04:22,419
for our host group and we were using

00:04:19,570 --> 00:04:24,280
local host which is a you can actually

00:04:22,419 --> 00:04:26,050
define local host and inventory but we

00:04:24,280 --> 00:04:28,780
also kind of just have a built in

00:04:26,050 --> 00:04:32,050
inferred local host so we know what you

00:04:28,780 --> 00:04:34,240
mean there - M we passed the module

00:04:32,050 --> 00:04:35,890
which is yum - a is going to be the

00:04:34,240 --> 00:04:38,169
arguments and then from the command line

00:04:35,890 --> 00:04:40,090
you need to quote those so that we have

00:04:38,169 --> 00:04:40,569
a string that's passed in to be parsed

00:04:40,090 --> 00:04:42,490
so

00:04:40,569 --> 00:04:44,409
package equals bash state equals

00:04:42,490 --> 00:04:46,419
installed and then you get some output

00:04:44,409 --> 00:04:48,039
and so we have the host name which is

00:04:46,419 --> 00:04:51,039
localhost a status which would be

00:04:48,039 --> 00:04:54,249
success to me success success changed or

00:04:51,039 --> 00:04:58,509
failed here we had no change so the

00:04:54,249 --> 00:05:00,159
status change was false and then message

00:04:58,509 --> 00:05:02,199
nothing to do there was nothing to do

00:05:00,159 --> 00:05:03,429
for that one so what if we want to do

00:05:02,199 --> 00:05:10,439
more than one thing well that's where

00:05:03,429 --> 00:05:12,610
playbooks come in so getting started the

00:05:10,439 --> 00:05:14,860
before we get into playbooks there's a

00:05:12,610 --> 00:05:17,229
few things we're going to cover that

00:05:14,860 --> 00:05:19,389
kind of are in service of better

00:05:17,229 --> 00:05:20,770
understanding playbooks so really

00:05:19,389 --> 00:05:22,930
quickly module we kind of covered this

00:05:20,770 --> 00:05:26,909
but it's called by a task performs an

00:05:22,930 --> 00:05:29,619
action and you can actually use it to

00:05:26,909 --> 00:05:31,119
take direct action through an API call

00:05:29,619 --> 00:05:32,740
it's potentially it's potentially

00:05:31,119 --> 00:05:34,599
possible that on the backend the module

00:05:32,740 --> 00:05:37,300
wraps a command line tool or something

00:05:34,599 --> 00:05:41,619
but the idea is that the module handles

00:05:37,300 --> 00:05:46,449
what is necessary to perform item potent

00:05:41,619 --> 00:05:49,419
tasks declarative State so you have the

00:05:46,449 --> 00:05:52,719
desire that your system has the package

00:05:49,419 --> 00:05:54,159
bash State installed you you request

00:05:52,719 --> 00:05:55,599
that of the module then the module goes

00:05:54,159 --> 00:05:59,439
out and handles that for you that's kind

00:05:55,599 --> 00:06:01,209
of the idea behind it and and in in this

00:05:59,439 --> 00:06:03,369
in the OU and in this instance of yum

00:06:01,209 --> 00:06:06,399
and DNF it calls the respective back-end

00:06:03,369 --> 00:06:08,769
Python api's but in the worst in the

00:06:06,399 --> 00:06:10,689
instance of certain modules it just

00:06:08,769 --> 00:06:13,539
there's not a you know reasonable Python

00:06:10,689 --> 00:06:15,369
API something to note about modules so

00:06:13,539 --> 00:06:16,809
right now ansible includes I think

00:06:15,369 --> 00:06:18,819
somewhere in the ballpark of 2200

00:06:16,809 --> 00:06:20,379
different modules so if you need to do

00:06:18,819 --> 00:06:23,860
something as a reasonable chance we have

00:06:20,379 --> 00:06:25,269
the functionality now however you can

00:06:23,860 --> 00:06:27,249
write your own and something to note

00:06:25,269 --> 00:06:28,869
about writing your own is you can write

00:06:27,249 --> 00:06:31,059
your own modules in any programming

00:06:28,869 --> 00:06:33,759
language you want so long as it in its

00:06:31,059 --> 00:06:37,360
SEC accepts JSON as input and will

00:06:33,759 --> 00:06:39,430
return JSON as output however have your

00:06:37,360 --> 00:06:41,889
modules be accepted upstream into

00:06:39,430 --> 00:06:45,789
ansible core they need be written in

00:06:41,889 --> 00:06:47,919
Python so facts facts are provided by

00:06:45,789 --> 00:06:49,719
the setup module anybody who's ever done

00:06:47,919 --> 00:06:51,579
anything with configuration management

00:06:49,719 --> 00:06:53,510
in the past is probably very familiar

00:06:51,579 --> 00:06:55,400
with this it basically just kind

00:06:53,510 --> 00:06:57,560
goes through and scans the system and

00:06:55,400 --> 00:07:00,520
provides you a set of facts about the

00:06:57,560 --> 00:07:04,520
system this can be platform architecture

00:07:00,520 --> 00:07:07,760
distribution name release major minor

00:07:04,520 --> 00:07:10,370
version they can be your network

00:07:07,760 --> 00:07:12,860
interfaces what their IP addresses are

00:07:10,370 --> 00:07:14,630
you know ipv4 ipv6 those kind of things

00:07:12,860 --> 00:07:16,580
and it provides isn't a standard

00:07:14,630 --> 00:07:18,200
standard way with the standard name so

00:07:16,580 --> 00:07:20,420
that you can actually use those as

00:07:18,200 --> 00:07:23,750
variables inside of your playbooks to do

00:07:20,420 --> 00:07:27,400
conditionals those kind of things

00:07:23,750 --> 00:07:30,440
Owen variable substitution so anyways

00:07:27,400 --> 00:07:32,380
it's using the this set fact so there's

00:07:30,440 --> 00:07:35,360
a there's kind of like a high order

00:07:32,380 --> 00:07:38,320
built-in called set fact and you can

00:07:35,360 --> 00:07:41,330
actually on a play define if you want to

00:07:38,320 --> 00:07:42,970
I'm sorry

00:07:41,330 --> 00:07:45,290
gather facts so there's a high order

00:07:42,970 --> 00:07:46,940
thing in plays you can say gather facts

00:07:45,290 --> 00:07:48,890
true or false to whether or not you want

00:07:46,940 --> 00:07:51,980
to have your play go out and do that

00:07:48,890 --> 00:07:55,370
scan or just skip it all together but

00:07:51,980 --> 00:07:57,440
you can actually create a fact in line

00:07:55,370 --> 00:07:59,690
in your PlayBook using set fact so for

00:07:57,440 --> 00:08:01,310
any reason you've gathered some output

00:07:59,690 --> 00:08:02,600
you've registered the output of a task

00:08:01,310 --> 00:08:04,700
and you therefore want to keep that

00:08:02,600 --> 00:08:06,470
persistent for the hosts for the

00:08:04,700 --> 00:08:08,180
duration of the play playbook for the

00:08:06,470 --> 00:08:10,870
hosts you're working on you can do a set

00:08:08,180 --> 00:08:13,220
fact and it will actually store that in

00:08:10,870 --> 00:08:16,120
whatever means you have you can cache

00:08:13,220 --> 00:08:18,860
facts but we'll get to that later

00:08:16,120 --> 00:08:20,960
so inventory inventory defines your

00:08:18,860 --> 00:08:22,190
infrastructure you can define it using a

00:08:20,960 --> 00:08:23,720
static file you can just write

00:08:22,190 --> 00:08:25,550
everything out you can do it dynamically

00:08:23,720 --> 00:08:28,190
we have dynamic inventories and those

00:08:25,550 --> 00:08:30,140
will query some system so in the

00:08:28,190 --> 00:08:32,840
instance of a structure as a service

00:08:30,140 --> 00:08:35,180
provider such as AWS Google compute as

00:08:32,840 --> 00:08:37,070
your open stack those kinds of things

00:08:35,180 --> 00:08:39,380
we have dynamic inventories that will go

00:08:37,070 --> 00:08:41,510
out and query what you've created within

00:08:39,380 --> 00:08:44,930
some confines or parameters return the

00:08:41,510 --> 00:08:47,180
metadata you can then index your hosts

00:08:44,930 --> 00:08:49,520
that way on the fly which is very

00:08:47,180 --> 00:08:52,160
powerful in in the sense of if you are

00:08:49,520 --> 00:08:53,420
using ansible to create systems out

00:08:52,160 --> 00:08:55,880
there but then they're immediately

00:08:53,420 --> 00:08:58,910
available in your inventory and you can

00:08:55,880 --> 00:09:00,710
you can work with them from there so

00:08:58,910 --> 00:09:03,650
instable provides a considerable number

00:09:00,710 --> 00:09:06,100
of dynamic inventories we have them in

00:09:03,650 --> 00:09:06,100
contributing

00:09:06,140 --> 00:09:09,769
the new way there's inventory plugins

00:09:08,000 --> 00:09:12,050
we're still working on getting those

00:09:09,769 --> 00:09:14,180
built up I think we've got about 10 10

00:09:12,050 --> 00:09:16,730
or 12 of those right now but there's a

00:09:14,180 --> 00:09:19,690
lot of there's a lot of them available

00:09:16,730 --> 00:09:23,630
in the in the contributor of available

00:09:19,690 --> 00:09:25,640
so this is an inventory so inventories

00:09:23,630 --> 00:09:27,110
traditionally were any files we also do

00:09:25,640 --> 00:09:28,910
now support yeah no files but if you're

00:09:27,110 --> 00:09:32,000
gonna do standard static file definition

00:09:28,910 --> 00:09:33,860
you just this is it so you have a group

00:09:32,000 --> 00:09:36,230
name which would be web and then you

00:09:33,860 --> 00:09:38,360
have a list of hosts there are certain

00:09:36,230 --> 00:09:39,589
variables that you can list out here and

00:09:38,360 --> 00:09:41,630
there's different ways we can do that

00:09:39,589 --> 00:09:43,370
but that's a little bit outside the

00:09:41,630 --> 00:09:47,600
scope here this is this is an inventory

00:09:43,370 --> 00:09:51,500
at face value so well not here web being

00:09:47,600 --> 00:09:54,140
our group name and these being our hosts

00:09:51,500 --> 00:09:55,970
so anytime if I were to run that ad hoc

00:09:54,140 --> 00:09:56,779
command from before where I said

00:09:55,970 --> 00:10:02,690
localhost

00:09:56,779 --> 00:10:05,329
and I do ansible web - mmm - a package

00:10:02,690 --> 00:10:06,620
equals bash State Eagles installed it

00:10:05,329 --> 00:10:08,990
will actually go out and run that on

00:10:06,620 --> 00:10:10,850
both of these systems now because the

00:10:08,990 --> 00:10:15,380
group is web and that's my identifier

00:10:10,850 --> 00:10:17,449
that's my filter so playbooks are text

00:10:15,380 --> 00:10:19,130
files they're written in the amyl they

00:10:17,449 --> 00:10:22,040
define a set of plays and they bring to

00:10:19,130 --> 00:10:24,079
vet together inventory and tasks so when

00:10:22,040 --> 00:10:26,959
in wool actually we'll just go for it

00:10:24,079 --> 00:10:28,850
so this is a playbook and the idea here

00:10:26,959 --> 00:10:31,310
is that the playbook is relatively easy

00:10:28,850 --> 00:10:33,350
for somebody who's never seen one before

00:10:31,310 --> 00:10:38,449
to understand what's going on so let's

00:10:33,350 --> 00:10:41,029
read it from top to bottom so a name so

00:10:38,449 --> 00:10:46,339
the name of this play is to install and

00:10:41,029 --> 00:10:49,279
start nginx the host we want it to run

00:10:46,339 --> 00:10:52,220
on our web hosts from our inventory

00:10:49,279 --> 00:10:54,440
that's where it's going to run so become

00:10:52,220 --> 00:10:58,850
means that we want this to actually

00:10:54,440 --> 00:11:01,310
become a privilege user then we have

00:10:58,850 --> 00:11:04,360
variables so these variables are going

00:11:01,310 --> 00:11:07,370
to be passed into the rest of the play

00:11:04,360 --> 00:11:09,250
so we have nginx packages these are

00:11:07,370 --> 00:11:13,100
gonna be packages that we want installed

00:11:09,250 --> 00:11:18,199
nginx text message and nginx keep a

00:11:13,100 --> 00:11:19,089
lifetime out now in the tasks this is

00:11:18,199 --> 00:11:20,379
our tasks section

00:11:19,089 --> 00:11:22,959
so just like we did with the

00:11:20,379 --> 00:11:24,879
command-line this is how we will this is

00:11:22,959 --> 00:11:27,519
how we will stream together many tasks

00:11:24,879 --> 00:11:28,930
is in the tasks section we would do what

00:11:27,519 --> 00:11:33,149
we would have done from the command line

00:11:28,930 --> 00:11:35,889
just instead we define it with a name

00:11:33,149 --> 00:11:38,620
which would be install nginx packages

00:11:35,889 --> 00:11:40,209
and then we can say yum and then this

00:11:38,620 --> 00:11:44,019
should look pretty familiar name equals

00:11:40,209 --> 00:11:46,959
state equals and then the thing the the

00:11:44,019 --> 00:11:48,309
so name equals item state equals present

00:11:46,959 --> 00:11:51,930
so the thing where we throw a curveball

00:11:48,309 --> 00:11:55,449
here and what's new is this is how you

00:11:51,930 --> 00:11:57,999
do a variable substitution so we use

00:11:55,449 --> 00:11:59,709
Jinja to templating language so if

00:11:57,999 --> 00:12:02,920
anyways foam over Jinja - it's a

00:11:59,709 --> 00:12:05,769
relatively popular Python templating

00:12:02,920 --> 00:12:08,170
language and so you you know open curly

00:12:05,769 --> 00:12:11,319
open curly closed curly closed curly the

00:12:08,170 --> 00:12:15,309
thing to note about item in this

00:12:11,319 --> 00:12:18,459
instance is it's a built-in loop so down

00:12:15,309 --> 00:12:21,399
here with items with items will loop

00:12:18,459 --> 00:12:24,100
through the list so nginx packages up

00:12:21,399 --> 00:12:28,449
there we've defined as nginx Python pip

00:12:24,100 --> 00:12:31,829
Python de valència dirait through each

00:12:28,449 --> 00:12:34,480
one of those now some things to note is

00:12:31,829 --> 00:12:36,389
while this is still supported today and

00:12:34,480 --> 00:12:39,540
will continue to be supported we've

00:12:36,389 --> 00:12:41,889
recently introduced a new feature but

00:12:39,540 --> 00:12:45,279
it's possible that not everybody is

00:12:41,889 --> 00:12:47,259
using the develop branch of ansible but

00:12:45,279 --> 00:12:49,509
in the the new version we're actually

00:12:47,259 --> 00:12:53,589
just going to have an inherent loop to

00:12:49,509 --> 00:12:56,139
where if you pass in the the list and a

00:12:53,589 --> 00:12:57,670
loop will will do some things for you

00:12:56,139 --> 00:12:59,949
it'll be kind of like syntactic

00:12:57,670 --> 00:13:07,230
happiness the other thing to note is the

00:12:59,949 --> 00:13:09,999
yum module oh gosh it's a 2 to 4 to 5

00:13:07,230 --> 00:13:11,709
I'll remember some way the yell module

00:13:09,999 --> 00:13:14,259
will actually accept a list so you can

00:13:11,709 --> 00:13:16,809
kind of just skip this these days and in

00:13:14,259 --> 00:13:18,670
if you do that with the yell modulo the

00:13:16,809 --> 00:13:20,769
DNF module you actually get a

00:13:18,670 --> 00:13:22,629
performance increase because it will

00:13:20,769 --> 00:13:28,299
accept it and parse it as a single

00:13:22,629 --> 00:13:31,029
transaction but for the example of a

00:13:28,299 --> 00:13:32,830
task the concept of doing with items to

00:13:31,029 --> 00:13:36,160
be able to loop you can do that with any

00:13:32,830 --> 00:13:37,570
any module is specific modules are gonna

00:13:36,160 --> 00:13:39,010
have different capabilities based on

00:13:37,570 --> 00:13:40,570
what they're doing based on what the

00:13:39,010 --> 00:13:43,089
developer of the module has implemented

00:13:40,570 --> 00:13:45,010
but with items is a construct of the

00:13:43,089 --> 00:13:49,320
PlayBook that we offer for anything

00:13:45,010 --> 00:13:53,200
you're doing so the next one is named

00:13:49,320 --> 00:13:57,399
install you whiskey so we're gonna have

00:13:53,200 --> 00:13:57,910
pip oh I didn't highlight pip for you

00:13:57,399 --> 00:14:01,269
okay

00:13:57,910 --> 00:14:03,450
so down here pip we're gonna use the pip

00:14:01,269 --> 00:14:06,399
module to go and install you whiskey

00:14:03,450 --> 00:14:08,410
against 8 equals president and not I

00:14:06,399 --> 00:14:10,300
mean not all of the modules are just

00:14:08,410 --> 00:14:13,810
installed and defined state some of them

00:14:10,300 --> 00:14:16,959
can get very very sophisticated but just

00:14:13,810 --> 00:14:17,620
for for case of example it's you know

00:14:16,959 --> 00:14:21,730
keeping it easy

00:14:17,620 --> 00:14:24,700
so includes the imports let's say that

00:14:21,730 --> 00:14:26,019
we wanted to define a set of tasks and

00:14:24,700 --> 00:14:28,720
we wanted to reuse it over and over

00:14:26,019 --> 00:14:30,160
again and we didn't want to rewrite it

00:14:28,720 --> 00:14:31,690
or copy and paste it around to all of

00:14:30,160 --> 00:14:33,670
our play books what we can do you can

00:14:31,690 --> 00:14:35,829
use includes and import so you can

00:14:33,670 --> 00:14:38,050
import a file containing a list of tasks

00:14:35,829 --> 00:14:41,230
they're kind of commonly known as just a

00:14:38,050 --> 00:14:42,850
task list or a task file you can pass it

00:14:41,230 --> 00:14:47,050
parameters you can do it can you can

00:14:42,850 --> 00:14:49,440
include conditionally and the idea is to

00:14:47,050 --> 00:14:52,060
encourage code reuse

00:14:49,440 --> 00:14:55,360
so includes an imports that just a quick

00:14:52,060 --> 00:14:58,029
note is with includes I'm sorry with

00:14:55,360 --> 00:15:01,060
imports that's what we consider static

00:14:58,029 --> 00:15:03,810
so they are parsed they're pre-processed

00:15:01,060 --> 00:15:07,029
whereas include statements are

00:15:03,810 --> 00:15:09,910
dynamically evaluated when they're run

00:15:07,029 --> 00:15:11,649
into and that has two implications one

00:15:09,910 --> 00:15:13,329
for certain things like loops where you

00:15:11,649 --> 00:15:16,720
need to actually reevaluate it every

00:15:13,329 --> 00:15:21,130
time that can be very powerful but to it

00:15:16,720 --> 00:15:23,410
does actually have a memory implication

00:15:21,130 --> 00:15:25,360
on your control host so the the place

00:15:23,410 --> 00:15:27,550
where you run ansible from is considered

00:15:25,360 --> 00:15:28,990
your control host so when you execute an

00:15:27,550 --> 00:15:31,240
instable command or an ansible playbook

00:15:28,990 --> 00:15:32,829
command on a host we consider that the

00:15:31,240 --> 00:15:35,769
control host and all the machines that

00:15:32,829 --> 00:15:39,130
your you're controlling from there to be

00:15:35,769 --> 00:15:40,630
your nodes and the control host is where

00:15:39,130 --> 00:15:41,980
you're going to you know do most of your

00:15:40,630 --> 00:15:44,770
processing it's where the templating

00:15:41,980 --> 00:15:46,180
happens it's where plugins fire off

00:15:44,770 --> 00:15:49,779
those kind of things

00:15:46,180 --> 00:15:51,520
and so when you do includes there's a

00:15:49,779 --> 00:15:53,080
lot of memory being copied around

00:15:51,520 --> 00:15:55,300
constantly because everything's being

00:15:53,080 --> 00:15:58,240
re-evaluated a lot so just note that

00:15:55,300 --> 00:15:59,830
your performance profile or your your

00:15:58,240 --> 00:16:01,660
memory profile is gonna be a little bit

00:15:59,830 --> 00:16:03,459
different performance wise if you're

00:16:01,660 --> 00:16:06,190
using a whole bunch of includes versus

00:16:03,459 --> 00:16:09,880
imports and that's why generally if you

00:16:06,190 --> 00:16:13,450
don't need anything dynamic import is is

00:16:09,880 --> 00:16:14,770
the way to go and I mean that's not like

00:16:13,450 --> 00:16:17,890
a hard requirement it's just kind of

00:16:14,770 --> 00:16:21,250
like a best practice for huge air quotes

00:16:17,890 --> 00:16:25,089
on best practice we hate that term

00:16:21,250 --> 00:16:27,279
okay so includes and imports so let's

00:16:25,089 --> 00:16:33,040
say I had a task list called add

00:16:27,279 --> 00:16:36,149
hostname and then I would then include

00:16:33,040 --> 00:16:40,750
all the tasks defined in add hostname

00:16:36,149 --> 00:16:45,160
and then here I would include tasks from

00:16:40,750 --> 00:16:46,630
add hostname with a parameter with the

00:16:45,160 --> 00:16:49,060
item so I would loop through and I would

00:16:46,630 --> 00:16:51,010
rien clewd that each time with a new

00:16:49,060 --> 00:16:54,580
parameter so let's say for some reason

00:16:51,010 --> 00:16:55,600
there was maybe maybe the width item

00:16:54,580 --> 00:16:57,300
should have been like a list of host

00:16:55,600 --> 00:17:02,650
names or something so that way each time

00:16:57,300 --> 00:17:04,750
it gets loaded the parameter V at host

00:17:02,650 --> 00:17:11,640
name could be variable substituted for

00:17:04,750 --> 00:17:14,260
whatever item in the list and then so

00:17:11,640 --> 00:17:15,730
the import tasks again so if we're not

00:17:14,260 --> 00:17:17,800
doing any substitution import assets

00:17:15,730 --> 00:17:19,530
that's kind of the better way to go but

00:17:17,800 --> 00:17:23,530
here we can actually conditional eyes

00:17:19,530 --> 00:17:26,319
what we're importing because we can

00:17:23,530 --> 00:17:29,100
template the file so this can be very

00:17:26,319 --> 00:17:32,140
useful because it you can name your

00:17:29,100 --> 00:17:34,809
conditional imports things that are

00:17:32,140 --> 00:17:38,350
ansible facts so for example you know

00:17:34,809 --> 00:17:41,710
distro family so if you've got Red Hat

00:17:38,350 --> 00:17:45,850
based family or Fedora specific as

00:17:41,710 --> 00:17:47,500
opposed to CentOS or Debian or souza

00:17:45,850 --> 00:17:50,170
those kinds of things like you can

00:17:47,500 --> 00:17:51,730
actually import specific tasks that are

00:17:50,170 --> 00:17:54,070
catered to those specific distributions

00:17:51,730 --> 00:17:58,059
conditionally doing this and then

00:17:54,070 --> 00:17:58,759
there's also a we have conditionals for

00:17:58,059 --> 00:18:03,409
first of

00:17:58,759 --> 00:18:04,729
tasks themselves okay so a role so we

00:18:03,409 --> 00:18:07,699
can kind of take everything that we've

00:18:04,729 --> 00:18:09,589
just done for you know tasks plays play

00:18:07,699 --> 00:18:11,359
books and we can bundle it up together

00:18:09,589 --> 00:18:13,159
into a role and then the role can

00:18:11,359 --> 00:18:14,719
actually be reused and distributed and

00:18:13,159 --> 00:18:20,179
shipped around and those kind of things

00:18:14,719 --> 00:18:23,239
shared amongst teams oh that's not just

00:18:20,179 --> 00:18:25,429
that's out of order okay we'll just go

00:18:23,239 --> 00:18:27,440
with it so the plug-in so plugins

00:18:25,429 --> 00:18:30,559
augment ansible core functionality so

00:18:27,440 --> 00:18:34,369
action cache callback connection filter

00:18:30,559 --> 00:18:37,129
I didn't talk on Wednesday Tuesday

00:18:34,369 --> 00:18:39,019
what's today today's Friday Wednesday I

00:18:37,129 --> 00:18:41,690
talk on Wednesday there's actually about

00:18:39,019 --> 00:18:43,940
plugins I was hoping that schedule wise

00:18:41,690 --> 00:18:45,109
that those would be switched so I could

00:18:43,940 --> 00:18:48,799
say hey if you want to learn more about

00:18:45,109 --> 00:18:51,079
plugins go to this but here we are so

00:18:48,799 --> 00:18:53,569
what's interesting about these is you

00:18:51,079 --> 00:18:55,729
can enable different plugins to augment

00:18:53,569 --> 00:18:56,959
the functionality one of the most

00:18:55,729 --> 00:18:58,639
popular ones are gonna be for your

00:18:56,959 --> 00:19:00,440
timing profile so you can actually see

00:18:58,639 --> 00:19:01,699
which tasks are taking the longest you

00:19:00,440 --> 00:19:04,969
can see how long your entire playbook

00:19:01,699 --> 00:19:06,559
runs those kind of things so if you know

00:19:04,969 --> 00:19:08,629
you have a quote-unquote hot spot in

00:19:06,559 --> 00:19:12,229
your in your playbook you can kind of

00:19:08,629 --> 00:19:13,190
have a very well defined or well

00:19:12,229 --> 00:19:15,919
documented

00:19:13,190 --> 00:19:18,259
you know index of that another thing is

00:19:15,919 --> 00:19:20,989
callback plugins those are very popular

00:19:18,259 --> 00:19:24,619
for the sake of being able to do take

00:19:20,989 --> 00:19:26,690
action based on the beginning end of a

00:19:24,619 --> 00:19:28,449
certain task success/failure those kind

00:19:26,690 --> 00:19:31,429
of things so in the event that something

00:19:28,449 --> 00:19:33,739
fails you can set a message somewhere to

00:19:31,429 --> 00:19:35,449
your IRC channel your bot or something

00:19:33,739 --> 00:19:37,429
or if something fails you can have your

00:19:35,449 --> 00:19:38,659
bot like ping people and say hey this

00:19:37,429 --> 00:19:42,799
failed maybe something go look at it

00:19:38,659 --> 00:19:44,989
those kind of things so yeah so examples

00:19:42,799 --> 00:19:48,229
oh the other thing is connection plugins

00:19:44,989 --> 00:19:51,559
so when you run on the inherent

00:19:48,229 --> 00:19:53,149
localhost using the ansible command line

00:19:51,559 --> 00:19:55,699
you actually get the answer local

00:19:53,149 --> 00:19:57,559
connection so actually run and so local

00:19:55,699 --> 00:19:59,389
instead of trying to do a round-trip you

00:19:57,559 --> 00:20:01,129
know you're not doing diffie-hellman

00:19:59,389 --> 00:20:03,709
handshakes to your local machine because

00:20:01,129 --> 00:20:05,719
you don't need to whereas we can also do

00:20:03,709 --> 00:20:07,249
SSH darker Giroud there's there's a

00:20:05,719 --> 00:20:08,269
number of connection plugins some of

00:20:07,249 --> 00:20:10,819
them are going to be specific for

00:20:08,269 --> 00:20:12,410
network devices so like don't try to use

00:20:10,819 --> 00:20:15,880
you know like the

00:20:12,410 --> 00:20:17,960
arista junus or you know Cisco IOS

00:20:15,880 --> 00:20:20,120
connection plug-in for your Linux box

00:20:17,960 --> 00:20:21,350
you're gonna have a bad time but we have

00:20:20,120 --> 00:20:25,930
all these different connection plugins

00:20:21,350 --> 00:20:30,020
that can kind of be used for optimizing

00:20:25,930 --> 00:20:32,800
talking to different devices or

00:20:30,020 --> 00:20:35,750
different systems in ways that might not

00:20:32,800 --> 00:20:37,820
that might be needed or necessary or

00:20:35,750 --> 00:20:39,410
might be more appropriate than just a

00:20:37,820 --> 00:20:41,300
straight-up ssh connection but the

00:20:39,410 --> 00:20:42,740
default when you're doing remote host is

00:20:41,300 --> 00:20:46,310
going to be ssh unless you specify

00:20:42,740 --> 00:20:48,680
otherwise so in action plug in action

00:20:46,310 --> 00:20:51,560
plug ins take action on your control

00:20:48,680 --> 00:20:53,780
host before going out and contacting the

00:20:51,560 --> 00:20:55,790
remote host to run the module so some of

00:20:53,780 --> 00:20:57,530
that's going to be you know copy fetch

00:20:55,790 --> 00:21:00,740
synchronized and so like for

00:20:57,530 --> 00:21:02,570
synchronized it needs to literally

00:21:00,740 --> 00:21:04,880
synchronize something from local host to

00:21:02,570 --> 00:21:06,710
the remote host and it has to sometimes

00:21:04,880 --> 00:21:09,020
do some prep work I don't know tarball

00:21:06,710 --> 00:21:11,780
up something synchronize it on tar at

00:21:09,020 --> 00:21:13,880
those kind of things there's a full list

00:21:11,780 --> 00:21:15,620
and we've extensive documentation on

00:21:13,880 --> 00:21:19,880
those anybody's interests in those okay

00:21:15,620 --> 00:21:21,470
so back to roles what is a role so we've

00:21:19,880 --> 00:21:28,010
briefly discussed this so a roles are

00:21:21,470 --> 00:21:32,810
made up of plays why is this oh okay

00:21:28,010 --> 00:21:37,160
this is yep sorry I somehow got my

00:21:32,810 --> 00:21:40,250
slides out of order alright so uh

00:21:37,160 --> 00:21:42,230
in contrast of what a role is being all

00:21:40,250 --> 00:21:43,490
on come sing and define play books are

00:21:42,230 --> 00:21:46,390
made up of plays and play books are

00:21:43,490 --> 00:21:49,910
opinionated so the reason that this is

00:21:46,390 --> 00:21:52,640
important is because a playbook is

00:21:49,910 --> 00:21:54,620
defined to a set of hosts it will define

00:21:52,640 --> 00:21:57,080
whether or not you need to you know

00:21:54,620 --> 00:21:59,030
become privileged or not you're gonna

00:21:57,080 --> 00:22:01,670
gather facts or not depending on what

00:21:59,030 --> 00:22:03,050
you need for for that specific set of

00:22:01,670 --> 00:22:04,970
things you can say your connection plug

00:22:03,050 --> 00:22:06,530
ins you're gonna have specific variables

00:22:04,970 --> 00:22:08,810
those kinds of things and generally

00:22:06,530 --> 00:22:10,580
those definitions are going to be

00:22:08,810 --> 00:22:12,640
specific to the set of hosts that you

00:22:10,580 --> 00:22:16,730
want to run the tasks in that play

00:22:12,640 --> 00:22:18,830
against so the assumed specific

00:22:16,730 --> 00:22:20,690
inventory and they target a specific use

00:22:18,830 --> 00:22:24,230
case and they're generally not very

00:22:20,690 --> 00:22:25,610
reusable in but but I design like it's

00:22:24,230 --> 00:22:26,840
not a fault of them normal

00:22:25,610 --> 00:22:28,520
you're trying to accomplish a specific

00:22:26,840 --> 00:22:32,270
task and that's what your PlayBook is

00:22:28,520 --> 00:22:34,490
for but in the sense of wanting to so

00:22:32,270 --> 00:22:38,530
again so this is our example playbook

00:22:34,490 --> 00:22:40,460
you're doing installing nginx and then

00:22:38,530 --> 00:22:42,830
you install whiskey

00:22:40,460 --> 00:22:45,440
you're gonna copy your default Kampf

00:22:42,830 --> 00:22:48,410
we're gonna put a template over there to

00:22:45,440 --> 00:22:50,270
our template file so J - that's Jinja -

00:22:48,410 --> 00:22:51,890
we also use Jinja - for templating our

00:22:50,270 --> 00:22:54,530
files you can have a digit - template

00:22:51,890 --> 00:22:57,080
file do anything your heart's content

00:22:54,530 --> 00:22:58,130
for the Jinja - templating language

00:22:57,080 --> 00:23:00,950
which we have pretty extensive

00:22:58,130 --> 00:23:03,049
documentation on jinja - is very

00:23:00,950 --> 00:23:05,390
pythonic so if anybody codes in Python

00:23:03,049 --> 00:23:06,770
you want to do for loops and logic and

00:23:05,390 --> 00:23:09,500
all that kind of stuff inside of your

00:23:06,770 --> 00:23:12,049
templates to you know define different

00:23:09,500 --> 00:23:13,850
sections of configuration files based on

00:23:12,049 --> 00:23:17,150
multiple entries in lists that kind of

00:23:13,850 --> 00:23:18,710
thing we have all that functionality so

00:23:17,150 --> 00:23:22,190
and then you know we'll copy our

00:23:18,710 --> 00:23:29,210
index.html with the swamp down change of

00:23:22,190 --> 00:23:30,380
our default message oh handlers so well

00:23:29,210 --> 00:23:31,850
out of this thing called handlers

00:23:30,380 --> 00:23:34,070
handlers are effectively specialized

00:23:31,850 --> 00:23:37,520
tasks that only get fired in the event

00:23:34,070 --> 00:23:41,809
that something notifies them in in that

00:23:37,520 --> 00:23:44,210
allows you to conditionally like restart

00:23:41,809 --> 00:23:46,400
services or reload services only when

00:23:44,210 --> 00:23:47,690
something changes so if you have a

00:23:46,400 --> 00:23:50,299
template file that lays down a

00:23:47,690 --> 00:23:53,090
configuration and you notify your

00:23:50,299 --> 00:23:55,940
Handler and that template file didn't

00:23:53,090 --> 00:23:58,220
change then it won't fire the handler

00:23:55,940 --> 00:23:59,660
whereas if you just define a task to

00:23:58,220 --> 00:24:01,160
reload your configuration file it's

00:23:59,660 --> 00:24:02,540
going to reload the config or restart

00:24:01,160 --> 00:24:04,040
your daemon every time you run the

00:24:02,540 --> 00:24:07,100
playbook the handler is meant to

00:24:04,040 --> 00:24:09,470
conditionally execute something on your

00:24:07,100 --> 00:24:11,510
behalf in the event only in the event of

00:24:09,470 --> 00:24:14,570
a change and that's kind of the idea is

00:24:11,510 --> 00:24:21,470
to handle an event as opposed to always

00:24:14,570 --> 00:24:22,669
execute a task okay so the roles roles

00:24:21,470 --> 00:24:25,190
are meant to be decoupled from the

00:24:22,669 --> 00:24:27,980
inventory in the plays but they're not

00:24:25,190 --> 00:24:29,900
just a set of tasks so you can do the

00:24:27,980 --> 00:24:32,750
set of tasks that you import or you

00:24:29,900 --> 00:24:34,570
include and you can reuse content that

00:24:32,750 --> 00:24:36,710
way and that's very powerful

00:24:34,570 --> 00:24:38,300
however roles kind of take it to the

00:24:36,710 --> 00:24:39,559
next next level because they're

00:24:38,300 --> 00:24:41,480
self-contained the

00:24:39,559 --> 00:24:43,279
useable and they're a complete unit of

00:24:41,480 --> 00:24:45,440
work complete unit of work being kind of

00:24:43,279 --> 00:24:48,139
an operative term there they should

00:24:45,440 --> 00:24:50,389
depend on nothing and they should

00:24:48,139 --> 00:24:53,629
perform everything that they claim they

00:24:50,389 --> 00:24:56,120
do in its entirety and what I mean by

00:24:53,629 --> 00:24:59,749
that is if you're if you're attempting

00:24:56,120 --> 00:25:02,299
to install nginx and configure it and

00:24:59,749 --> 00:25:04,309
the role is meant to do that it should

00:25:02,299 --> 00:25:07,100
not assume anything about system state

00:25:04,309 --> 00:25:09,620
it should ensure that all the packages

00:25:07,100 --> 00:25:13,129
that needs are installed it should have

00:25:09,620 --> 00:25:16,840
templated files embedded in it and

00:25:13,129 --> 00:25:21,340
simply take variables passed in from

00:25:16,840 --> 00:25:24,740
your PlayBook to populate those things

00:25:21,340 --> 00:25:28,720
so we'll kind of go through so if we

00:25:24,740 --> 00:25:30,409
switch to a role let's say we have role

00:25:28,720 --> 00:25:34,850
install nginx

00:25:30,409 --> 00:25:36,769
and we pass it variables packages nginx

00:25:34,850 --> 00:25:42,320
text message and nginx to keep a

00:25:36,769 --> 00:25:44,299
lifetime out that should carry out all

00:25:42,320 --> 00:25:47,330
of the operations that we previously did

00:25:44,299 --> 00:25:48,919
previously defined it should verify that

00:25:47,330 --> 00:25:50,389
our packages are installed it should set

00:25:48,919 --> 00:25:51,980
up our test message with our default

00:25:50,389 --> 00:25:56,539
configuration follow those kinds of

00:25:51,980 --> 00:25:58,970
things but we need actually convert that

00:25:56,539 --> 00:26:00,919
playbook into a role so it can be reused

00:25:58,970 --> 00:26:04,340
and what's powerful about this and when

00:26:00,919 --> 00:26:05,899
the goal here is let's say that you have

00:26:04,340 --> 00:26:07,940
multiple data centers or if you have

00:26:05,899 --> 00:26:09,139
different systems or you have different

00:26:07,940 --> 00:26:13,399
systems that are attempting to do

00:26:09,139 --> 00:26:16,549
different things based on whatever your

00:26:13,399 --> 00:26:19,159
specific use case is and they all need

00:26:16,549 --> 00:26:22,220
this they all need a web server to then

00:26:19,159 --> 00:26:24,559
serve some purpose well you could just

00:26:22,220 --> 00:26:27,619
copy that playbook around or you could

00:26:24,559 --> 00:26:30,169
import it a whole bunch of places but

00:26:27,619 --> 00:26:33,409
when you get into really when you get

00:26:30,169 --> 00:26:34,700
into kind of higher order sets of logic

00:26:33,409 --> 00:26:36,830
and your playbooks you're doing things

00:26:34,700 --> 00:26:38,480
conditionally and and those kind of

00:26:36,830 --> 00:26:39,830
things and you have templates well then

00:26:38,480 --> 00:26:41,480
you have to copy around these templates

00:26:39,830 --> 00:26:45,049
and that kind of stuff whereas with

00:26:41,480 --> 00:26:47,539
roles it's all in one and we have

00:26:45,049 --> 00:26:48,889
various ways to install roles discover

00:26:47,539 --> 00:26:51,470
roles that kind of stuff and we'll talk

00:26:48,889 --> 00:26:54,500
about that in few minutes

00:26:51,470 --> 00:26:58,250
so there's a so really quickly ansible

00:26:54,500 --> 00:27:00,710
galaxy is our index our public index for

00:26:58,250 --> 00:27:04,100
it's kind of our forge it's our public

00:27:00,710 --> 00:27:06,590
index of all contributed content in

00:27:04,100 --> 00:27:08,330
rolls if you need to install something

00:27:06,590 --> 00:27:10,399
in genetics PostgreSQL those kind of

00:27:08,330 --> 00:27:12,950
things look there there's probably a

00:27:10,399 --> 00:27:14,120
role to do what you're trying to do that

00:27:12,950 --> 00:27:16,279
you can just go out and use at face

00:27:14,120 --> 00:27:18,710
value or potentially contribute to they

00:27:16,279 --> 00:27:21,590
they should all be open-source but we

00:27:18,710 --> 00:27:22,940
have an ansible galaxy command and the

00:27:21,590 --> 00:27:26,120
instable galaxy command allows you to

00:27:22,940 --> 00:27:32,509
install roles from that from a personal

00:27:26,120 --> 00:27:35,330
host at galaxy or any arbitrary remote

00:27:32,509 --> 00:27:37,759
file because you can just tore up a roll

00:27:35,330 --> 00:27:41,120
file or from the git repository and we

00:27:37,759 --> 00:27:43,460
also support mm SVN or mercurial I

00:27:41,120 --> 00:27:45,080
remember which one there's a couple of

00:27:43,460 --> 00:27:47,539
them so this is what galaxy looks like

00:27:45,080 --> 00:27:50,570
it recently got a redesign if anybody is

00:27:47,539 --> 00:27:52,659
familiar with pattern ply we redid the

00:27:50,570 --> 00:27:55,309
UI pattern fly it's very nice I'm a fan

00:27:52,659 --> 00:27:56,779
so you can go out to galaxy galaxy

00:27:55,309 --> 00:27:59,179
danceable calm and kind of check out

00:27:56,779 --> 00:28:02,330
what we have out there those kind of

00:27:59,179 --> 00:28:05,779
things but the galaxy danceable galaxy

00:28:02,330 --> 00:28:07,009
command has an an it sub command and the

00:28:05,779 --> 00:28:08,870
knit sub command allows you to

00:28:07,009 --> 00:28:10,580
initialize a module on your home

00:28:08,870 --> 00:28:12,590
directory and that's gonna set up the

00:28:10,580 --> 00:28:14,750
directory structure that you need it's

00:28:12,590 --> 00:28:16,759
gonna have you know various metadata

00:28:14,750 --> 00:28:18,740
files pre-populated that you just go in

00:28:16,759 --> 00:28:19,850
they're all commented and documented and

00:28:18,740 --> 00:28:24,889
you can go in and just fill in some

00:28:19,850 --> 00:28:26,809
fields those kinds of things so yeah so

00:28:24,889 --> 00:28:30,620
you can download from galaxy I already

00:28:26,809 --> 00:28:32,629
covered all this so this is actually how

00:28:30,620 --> 00:28:35,450
you would install so if you found one on

00:28:32,629 --> 00:28:37,820
galaxy that you wanted to the author in

00:28:35,450 --> 00:28:41,210
galaxy the author is the namespace so

00:28:37,820 --> 00:28:43,429
your github username is going to be your

00:28:41,210 --> 00:28:45,259
name space if you upload control content

00:28:43,429 --> 00:28:48,470
to galaxy or you can just install one

00:28:45,259 --> 00:28:50,690
from wherever you want you can actually

00:28:48,470 --> 00:28:52,399
have over quirements Djamel if you want

00:28:50,690 --> 00:28:55,309
to define multiple roles that are

00:28:52,399 --> 00:28:58,179
required for your task at hand so if

00:28:55,309 --> 00:29:00,379
you're if you're setting up in in one

00:28:58,179 --> 00:29:01,669
playbook you want to set up your

00:29:00,379 --> 00:29:03,049
database server you want to set up your

00:29:01,669 --> 00:29:04,540
web front-end you want to set up your

00:29:03,049 --> 00:29:06,100
load balancer you want to

00:29:04,540 --> 00:29:09,940
rotate things in and out that kind of

00:29:06,100 --> 00:29:11,770
stuff you can define multiple roles that

00:29:09,940 --> 00:29:14,530
you need to have installed and required

00:29:11,770 --> 00:29:20,370
and then just do a single install before

00:29:14,530 --> 00:29:23,050
starting your playbook okay so roles are

00:29:20,370 --> 00:29:27,640
traditionally going to be the default

00:29:23,050 --> 00:29:32,170
role path is as I'm pretty sure Etsy

00:29:27,640 --> 00:29:33,550
ansible I should know this I was running

00:29:32,170 --> 00:29:36,760
on my local directory because everyone

00:29:33,550 --> 00:29:39,700
everything off of source get check out I

00:29:36,760 --> 00:29:41,020
should know this but I don't you can in

00:29:39,700 --> 00:29:43,600
your ansible config you can set default

00:29:41,020 --> 00:29:44,890
role path you can set the environment

00:29:43,600 --> 00:29:47,380
variable at the command line ansible

00:29:44,890 --> 00:29:49,630
roles path to whatever you want you can

00:29:47,380 --> 00:29:54,370
use a colon to provide separate paths

00:29:49,630 --> 00:29:56,050
because of course you can and a roles

00:29:54,370 --> 00:29:58,030
directory next to the playbook so if you

00:29:56,050 --> 00:30:00,250
have a playbook in your current working

00:29:58,030 --> 00:30:01,600
directory and there is a roles directory

00:30:00,250 --> 00:30:04,750
in that same current working directory

00:30:01,600 --> 00:30:06,610
any content any role content that is in

00:30:04,750 --> 00:30:11,470
that roles directory will be detected at

00:30:06,610 --> 00:30:14,320
runtime so what's in a role it was a lot

00:30:11,470 --> 00:30:16,300
of stuff so previously you know

00:30:14,320 --> 00:30:18,870
theoretically let's just pretend that we

00:30:16,300 --> 00:30:21,760
ran that that ansible galaxy in it

00:30:18,870 --> 00:30:23,520
install nginx command so this is what we

00:30:21,760 --> 00:30:26,770
would have been left with so we have

00:30:23,520 --> 00:30:30,460
Travis Gamal because if you are running

00:30:26,770 --> 00:30:33,340
your Travis stuff you can we can report

00:30:30,460 --> 00:30:34,810
that through galaxy readme so it comes

00:30:33,340 --> 00:30:36,640
with a readme kind of the idea there is

00:30:34,810 --> 00:30:38,140
to have you know some sort of

00:30:36,640 --> 00:30:39,460
documentation for users who are

00:30:38,140 --> 00:30:41,950
potentially going to reuse your role

00:30:39,460 --> 00:30:43,690
whether that's locally on your team or

00:30:41,950 --> 00:30:46,230
externally to the worlds for anyone

00:30:43,690 --> 00:30:48,840
who's gonna upload something to galaxy

00:30:46,230 --> 00:30:51,100
default zoom your default variables

00:30:48,840 --> 00:30:52,660
files so any kind of file that you're

00:30:51,100 --> 00:30:53,860
gonna copy around and just lay down at

00:30:52,660 --> 00:30:57,220
face value that doesn't need to be

00:30:53,860 --> 00:30:59,710
template it should go in files handlers

00:30:57,220 --> 00:31:01,000
again this is gonna be a task list that

00:30:59,710 --> 00:31:02,590
defines your handlers that are

00:31:01,000 --> 00:31:05,410
conditionally executed based on

00:31:02,590 --> 00:31:07,690
something notifying them your metadata

00:31:05,410 --> 00:31:09,250
metadata that the meta directory is

00:31:07,690 --> 00:31:11,020
purely for galaxy uses if you're not

00:31:09,250 --> 00:31:13,150
uploading the galaxy you probably don't

00:31:11,020 --> 00:31:16,669
need to bother filling that out but

00:31:13,150 --> 00:31:18,049
please PLEASE contribute the Alex

00:31:16,669 --> 00:31:21,859
so this is gonna be where all your task

00:31:18,049 --> 00:31:23,090
files are you can have one or many you

00:31:21,859 --> 00:31:24,350
can kind of the only requirements that

00:31:23,090 --> 00:31:26,029
you have one called bane and that's

00:31:24,350 --> 00:31:29,080
gonna be the entry point into your roles

00:31:26,029 --> 00:31:33,799
main meta so tasks main yeah Mille

00:31:29,080 --> 00:31:35,809
templates again so files j2 for Jinja to

00:31:33,799 --> 00:31:38,480
templating files that are put in there

00:31:35,809 --> 00:31:40,070
that get templated at runtime and you

00:31:38,480 --> 00:31:40,460
know copied around and those kind of

00:31:40,070 --> 00:31:45,799
things

00:31:40,460 --> 00:31:47,359
tests so if you have tests probably

00:31:45,799 --> 00:31:48,889
gonna be related to your travels that

00:31:47,359 --> 00:31:52,429
you animal those who don't know travel

00:31:48,889 --> 00:31:55,100
Travis CI as a CI system hooked up to

00:31:52,429 --> 00:31:56,720
github you can put tests in a lot of

00:31:55,100 --> 00:31:58,279
people actually interesting they know if

00:31:56,720 --> 00:31:59,869
your tests are written in ants will play

00:31:58,279 --> 00:32:02,149
books there's a lot of assertion things

00:31:59,869 --> 00:32:03,919
that we can do with with play books all

00:32:02,149 --> 00:32:08,659
of the ansible integration tests are

00:32:03,919 --> 00:32:09,080
written in ansible it's very meta so and

00:32:08,659 --> 00:32:10,820
then VARs

00:32:09,080 --> 00:32:13,749
to define your set of bars that can be

00:32:10,820 --> 00:32:13,749
pass in those kinds of things

00:32:14,320 --> 00:32:19,279
okay so tasks that main this is gonna be

00:32:17,029 --> 00:32:21,440
your entry point to me what drives your

00:32:19,279 --> 00:32:24,830
role so when somebody just in either

00:32:21,440 --> 00:32:27,139
includes or if anyone imports your role

00:32:24,830 --> 00:32:30,320
or include your role or defines it in

00:32:27,139 --> 00:32:32,359
the roles section of their playbook this

00:32:30,320 --> 00:32:35,869
is what what the entry point is this is

00:32:32,359 --> 00:32:38,539
gonna be your you know int main if

00:32:35,869 --> 00:32:40,070
you're a C coder so this is going to tie

00:32:38,539 --> 00:32:41,809
together all of your templates and

00:32:40,070 --> 00:32:44,090
handlers and tasks and and and those

00:32:41,809 --> 00:32:45,499
kind of things and and hopefully be kind

00:32:44,090 --> 00:32:47,389
of the driving logic now and the main

00:32:45,499 --> 00:32:49,369
thing to note is you can actually have

00:32:47,389 --> 00:32:51,950
multiple other task files that can be

00:32:49,369 --> 00:32:53,269
conditionally included or imported so

00:32:51,950 --> 00:32:54,710
you can actually combine some of this

00:32:53,269 --> 00:32:59,600
functionality together where it makes

00:32:54,710 --> 00:33:02,149
sense so your task so what we had before

00:32:59,600 --> 00:33:03,889
in our playbook the tasks section you

00:33:02,149 --> 00:33:06,289
can literally just drop that into the

00:33:03,889 --> 00:33:09,649
tasks file and main dot yeah Mille and

00:33:06,289 --> 00:33:11,509
the idea there is again this is a very -

00:33:09,649 --> 00:33:14,119
there's a relatively simple example so

00:33:11,509 --> 00:33:15,649
it might seem a little like long-winded

00:33:14,119 --> 00:33:18,980
to kind of put this in a roll but the

00:33:15,649 --> 00:33:20,809
idea is if you have something so let's

00:33:18,980 --> 00:33:22,639
say for example this playbook took into

00:33:20,809 --> 00:33:23,659
consideration various different

00:33:22,639 --> 00:33:25,159
distributions you have in your

00:33:23,659 --> 00:33:26,720
environment it also took into

00:33:25,159 --> 00:33:28,159
consideration different package names

00:33:26,720 --> 00:33:30,259
for those different distributions and

00:33:28,159 --> 00:33:30,490
you have you know various parameters and

00:33:30,259 --> 00:33:32,230
can

00:33:30,490 --> 00:33:33,070
and it kind of just Cascades and the

00:33:32,230 --> 00:33:37,080
next thing you know you have this

00:33:33,070 --> 00:33:39,970
relatively complicated or complex set of

00:33:37,080 --> 00:33:41,920
tasks that are you know ordered and

00:33:39,970 --> 00:33:43,740
defined and then you need to use it a

00:33:41,920 --> 00:33:46,059
whole bunch different places well

00:33:43,740 --> 00:33:48,280
instead of copying that around and you

00:33:46,059 --> 00:33:49,809
have this ability to to just reuse it

00:33:48,280 --> 00:33:52,960
through the role and that's kind of the

00:33:49,809 --> 00:33:57,580
the driving idea behind this so handlers

00:33:52,960 --> 00:33:59,170
handlers main the module that runs will

00:33:57,580 --> 00:34:00,670
indicate when a change has occurred when

00:33:59,170 --> 00:34:04,000
the change has occurred the handler

00:34:00,670 --> 00:34:07,030
handler will trigger you can also do

00:34:04,000 --> 00:34:08,619
topic handlers this is new ansible 2.2 I

00:34:07,030 --> 00:34:11,950
won't really go into that a whole lot

00:34:08,619 --> 00:34:16,950
but the idea is that you have a topic

00:34:11,950 --> 00:34:19,090
definition and you can you can notify or

00:34:16,950 --> 00:34:22,510
through the other vocabulary term was

00:34:19,090 --> 00:34:24,850
for that basically the idea is just if

00:34:22,510 --> 00:34:27,159
something changes so for example so our

00:34:24,850 --> 00:34:28,990
template this is how we would do this

00:34:27,159 --> 00:34:31,450
notify being kind of a top order

00:34:28,990 --> 00:34:33,820
instruction so name template being the

00:34:31,450 --> 00:34:36,540
module name and then notify and then

00:34:33,820 --> 00:34:40,000
we'll say start engine X and that will

00:34:36,540 --> 00:34:44,350
start or restart engine X if that file

00:34:40,000 --> 00:34:46,270
if the template module reports changed

00:34:44,350 --> 00:34:49,000
so the idea there is the template module

00:34:46,270 --> 00:34:51,550
being item potent in nature will only

00:34:49,000 --> 00:34:53,080
report changed if the template file it's

00:34:51,550 --> 00:34:58,690
putting out on the remote host actually

00:34:53,080 --> 00:35:01,000
changes handlers my name there we go

00:34:58,690 --> 00:35:03,670
listen so listen being the other

00:35:01,000 --> 00:35:05,910
vocabulary term and there are different

00:35:03,670 --> 00:35:14,230
implications on this listen versus

00:35:05,910 --> 00:35:17,190
notify I don't remember I have to check

00:35:14,230 --> 00:35:20,800
the docs I genuinely don't recall I

00:35:17,190 --> 00:35:23,500
should sorry okay files and templates

00:35:20,800 --> 00:35:24,940
files the base directory and templates

00:35:23,500 --> 00:35:27,250
is the base directory for template files

00:35:24,940 --> 00:35:29,440
the main thing to note there is when

00:35:27,250 --> 00:35:31,300
you're in a role and you have templates

00:35:29,440 --> 00:35:32,980
and files in their respective

00:35:31,300 --> 00:35:34,930
directories that are namespaces are

00:35:32,980 --> 00:35:36,550
supposed to be you don't have to refer

00:35:34,930 --> 00:35:38,440
to their full path or the relative path

00:35:36,550 --> 00:35:39,970
you can just say the file name and the

00:35:38,440 --> 00:35:41,740
role knows where to go look for it

00:35:39,970 --> 00:35:42,700
because it's it's a standard directory

00:35:41,740 --> 00:35:44,829
layout

00:35:42,700 --> 00:35:46,720
those kinds of things so that can be

00:35:44,829 --> 00:35:51,940
very useful just because you don't have

00:35:46,720 --> 00:35:53,470
to type as much okay so for example so

00:35:51,940 --> 00:35:55,510
our template file here you'll see these

00:35:53,470 --> 00:35:59,740
these file names are just Source engine

00:35:55,510 --> 00:36:01,059
X comma J two index.html J 2 but we

00:35:59,740 --> 00:36:03,099
don't have a directory listing there and

00:36:01,059 --> 00:36:05,200
that's because they are in the template

00:36:03,099 --> 00:36:08,920
directory therefore the role knows where

00:36:05,200 --> 00:36:13,809
to go find them and that's where we put

00:36:08,920 --> 00:36:17,799
them ok so this is our nginx config

00:36:13,809 --> 00:36:20,380
template file so we can in there define

00:36:17,799 --> 00:36:22,990
or a do variable substitution you can

00:36:20,380 --> 00:36:24,520
also do other fancy things with the

00:36:22,990 --> 00:36:26,170
Jinju templating language but this is

00:36:24,520 --> 00:36:28,119
probably going to be your most common

00:36:26,170 --> 00:36:29,829
thing to do is just in place variable

00:36:28,119 --> 00:36:31,420
substitution for config files those

00:36:29,829 --> 00:36:33,430
kinds of things but if you have a lot of

00:36:31,420 --> 00:36:35,799
sections of a config file that you need

00:36:33,430 --> 00:36:37,450
to basically replicate so virtual hosts

00:36:35,799 --> 00:36:38,559
if you're if you're doing virtual host

00:36:37,450 --> 00:36:39,849
entries and you want to put in a whole

00:36:38,559 --> 00:36:43,089
bunch of virtual hosts you could have a

00:36:39,849 --> 00:36:45,069
list of you know dictionary variable

00:36:43,089 --> 00:36:46,420
entries or something that defines all of

00:36:45,069 --> 00:36:48,099
your virtual hosts and then you can loop

00:36:46,420 --> 00:36:49,690
through them and lay down those

00:36:48,099 --> 00:36:52,660
configuration files there there are the

00:36:49,690 --> 00:36:55,630
configuration sections to the file so

00:36:52,660 --> 00:37:01,270
you know here's our index.html with a

00:36:55,630 --> 00:37:04,059
templated message and a paragraph our

00:37:01,270 --> 00:37:07,210
variables so defining variables the user

00:37:04,059 --> 00:37:09,040
can override in the defaults for

00:37:07,210 --> 00:37:11,140
conditionals of configuration settings

00:37:09,040 --> 00:37:13,150
and then variables main which are going

00:37:11,140 --> 00:37:15,490
to be used by the author so that's kind

00:37:13,150 --> 00:37:18,640
of you as the role author hopefully you

00:37:15,490 --> 00:37:22,780
as the role author can can use the

00:37:18,640 --> 00:37:24,670
organizer role additional files and to

00:37:22,780 --> 00:37:27,670
dynamically kind of like change things

00:37:24,670 --> 00:37:30,099
up within the role so anything you want

00:37:27,670 --> 00:37:31,990
your your potential users the people are

00:37:30,099 --> 00:37:36,819
going to consume your role to reuse them

00:37:31,990 --> 00:37:38,530
put those in defaults so defaults not

00:37:36,819 --> 00:37:40,450
main so we have our packages we have our

00:37:38,530 --> 00:37:42,700
nginx test message nginx to keep a live

00:37:40,450 --> 00:37:47,650
time out and then those are kind of you

00:37:42,700 --> 00:37:49,210
know used for the variable substitution

00:37:47,650 --> 00:37:53,349
in the templates as well as in the

00:37:49,210 --> 00:37:56,740
PlayBook meta main so this is going to

00:37:53,349 --> 00:37:58,540
be specifically for galaxy or for

00:37:56,740 --> 00:38:00,940
if you're if you're pulling content from

00:37:58,540 --> 00:38:02,320
galaxy as a dependency for yours that's

00:38:00,940 --> 00:38:05,380
the other thing too is you can actually

00:38:02,320 --> 00:38:10,230
do recursive dependencies for roles so

00:38:05,380 --> 00:38:12,520
if for some reason your nginx role needs

00:38:10,230 --> 00:38:13,839
probably bad example let's go the other

00:38:12,520 --> 00:38:17,230
way let's say you're trying to install

00:38:13,839 --> 00:38:18,970
some web app and in you have a role for

00:38:17,230 --> 00:38:22,330
that web app you can say that my web app

00:38:18,970 --> 00:38:25,150
role requires this nginx role so that

00:38:22,330 --> 00:38:26,890
way it will set things up and I know

00:38:25,150 --> 00:38:27,940
that this is a mild contradiction

00:38:26,890 --> 00:38:29,770
because I said before it should be a

00:38:27,940 --> 00:38:30,910
complete unit of work and that's true it

00:38:29,770 --> 00:38:33,300
should be a complete unit of work for

00:38:30,910 --> 00:38:35,710
the task that it sets out to accomplish

00:38:33,300 --> 00:38:37,270
however if there's a different unit of

00:38:35,710 --> 00:38:39,160
work that you need to rely on that needs

00:38:37,270 --> 00:38:42,099
to be in place before your unit of work

00:38:39,160 --> 00:38:44,770
occurs you can set dependencies so that

00:38:42,099 --> 00:38:46,030
way at runtime it will install the role

00:38:44,770 --> 00:38:48,760
that you need and then it will actually

00:38:46,030 --> 00:38:51,310
execute that role first so so those

00:38:48,760 --> 00:38:55,650
those are ways that we allow to kind of

00:38:51,310 --> 00:38:55,650
cascade daisy-chain those together

00:38:56,460 --> 00:39:03,940
dependencies you can define dependencies

00:38:58,599 --> 00:39:06,040
roll some parameter you can define them

00:39:03,940 --> 00:39:12,040
source if if they're not going to be

00:39:06,040 --> 00:39:14,740
from galaxy if they are gonna be from

00:39:12,040 --> 00:39:18,990
galaxy you can define them as name being

00:39:14,740 --> 00:39:21,760
namespace Geering guys is a very

00:39:18,990 --> 00:39:24,430
well-known contributor in ansible and he

00:39:21,760 --> 00:39:28,330
has a lot of amazing content on galaxy

00:39:24,430 --> 00:39:31,109
he wrote a book pretty sure his ansible

00:39:28,330 --> 00:39:33,640
for DevOps I think that one says yeah

00:39:31,109 --> 00:39:35,650
anyway it's great I mean great community

00:39:33,640 --> 00:39:37,720
member he's done amazing work his book

00:39:35,650 --> 00:39:41,830
is fantastic check it out but anyways so

00:39:37,720 --> 00:39:45,580
Gil and I the PHP fpm so we would then

00:39:41,830 --> 00:39:47,589
pull his role from galaxy documentation

00:39:45,580 --> 00:39:50,530
we can talk about before meta main is

00:39:47,589 --> 00:39:52,900
gonna be for galaxy specific stuff

00:39:50,530 --> 00:39:56,560
readme and you can also embed an example

00:39:52,900 --> 00:39:58,150
playbook tests again ansible playbook

00:39:56,560 --> 00:40:01,330
tests and your Travis TM will

00:39:58,150 --> 00:40:03,760
configuration modules and plugins you

00:40:01,330 --> 00:40:05,800
can actually add a library directory

00:40:03,760 --> 00:40:07,420
with your custom modules if your role

00:40:05,800 --> 00:40:08,530
needs custom modules that we don't have

00:40:07,420 --> 00:40:10,540
and you want to distribute them on a

00:40:08,530 --> 00:40:12,730
separate life cycle than danceable core

00:40:10,540 --> 00:40:16,030
you can do that or you can have a type

00:40:12,730 --> 00:40:19,630
underscore plugin for custom plugins one

00:40:16,030 --> 00:40:22,210
thing to know if your users of your role

00:40:19,630 --> 00:40:24,550
have a bug in your module and they come

00:40:22,210 --> 00:40:27,340
to us and they're like hey this thing

00:40:24,550 --> 00:40:28,990
broke it's a module please fix it

00:40:27,340 --> 00:40:31,780
that's what core will not fix your

00:40:28,990 --> 00:40:32,860
module I mean somebody might some of you

00:40:31,780 --> 00:40:36,550
might just be like oh that's really cool

00:40:32,860 --> 00:40:41,290
check it out but no that's that's kind

00:40:36,550 --> 00:40:43,180
of like you get your you get to play

00:40:41,290 --> 00:40:45,640
with your broken Legos if you if you

00:40:43,180 --> 00:40:47,620
break them so in a play to use a roll

00:40:45,640 --> 00:40:51,910
you have a rolls section you can do it

00:40:47,620 --> 00:40:53,350
that way you can also include roles as

00:40:51,910 --> 00:40:56,400
to make them seem a little bit more like

00:40:53,350 --> 00:40:59,160
tasked and this is very powerful for

00:40:56,400 --> 00:41:01,480
[Music]

00:40:59,160 --> 00:41:06,580
passing different variables to different

00:41:01,480 --> 00:41:08,830
things at different places but also yeah

00:41:06,580 --> 00:41:13,180
so we can say include roll when we say

00:41:08,830 --> 00:41:15,430
tasks from so if for some reason you

00:41:13,180 --> 00:41:17,710
want to include a tasks file from a role

00:41:15,430 --> 00:41:21,490
but not execute the entire role you can

00:41:17,710 --> 00:41:23,800
grab just a one of the tasks file out of

00:41:21,490 --> 00:41:26,650
the tasks directory of that role by

00:41:23,800 --> 00:41:28,330
defining tasks from so for example the

00:41:26,650 --> 00:41:30,460
name of this role will be my role and

00:41:28,330 --> 00:41:32,740
then in the tasks directory there's

00:41:30,460 --> 00:41:36,610
going to be other amyl and you would say

00:41:32,740 --> 00:41:39,580
I want the tasks from other out of that

00:41:36,610 --> 00:41:43,090
role just that specific set of tasks and

00:41:39,580 --> 00:41:46,270
and that can get you know that can allow

00:41:43,090 --> 00:41:47,140
us a little bit more flexibility and

00:41:46,270 --> 00:41:54,160
some of the things that we're going to

00:41:47,140 --> 00:41:55,630
do ok do not have yeah ok perfect

00:41:54,160 --> 00:41:57,460
this is what I was hoping I was really

00:41:55,630 --> 00:41:58,990
worried and how this example ok so you

00:41:57,460 --> 00:42:00,340
can do an include role with items so you

00:41:58,990 --> 00:42:01,690
could include the role multiple times

00:42:00,340 --> 00:42:03,850
bypassing different sets of variables

00:42:01,690 --> 00:42:07,060
which is very powerful for hopefully

00:42:03,850 --> 00:42:08,500
obvious reasons and then the next one

00:42:07,060 --> 00:42:12,130
that I really like and this is what I

00:42:08,500 --> 00:42:15,490
think has a lot of I think this has a

00:42:12,130 --> 00:42:17,290
lot of applicability for various

00:42:15,490 --> 00:42:20,200
different workflows because the roles

00:42:17,290 --> 00:42:22,390
section of a play book or a play a role

00:42:20,200 --> 00:42:24,040
section of a play always gets included

00:42:22,390 --> 00:42:26,830
and always gets executed

00:42:24,040 --> 00:42:28,570
so you can set some variables you can

00:42:26,830 --> 00:42:30,100
set some you know when conditions in

00:42:28,570 --> 00:42:31,720
there but to be honest the syntax is

00:42:30,100 --> 00:42:34,480
just kind of weird and that's why I'm a

00:42:31,720 --> 00:42:36,880
big fan of include roll or ale or import

00:42:34,480 --> 00:42:39,790
roll with a wind condition just as far

00:42:36,880 --> 00:42:43,090
as cleanliness of play book the ability

00:42:39,790 --> 00:42:44,530
to you know adhere to the simplicity of

00:42:43,090 --> 00:42:47,320
a playbook being something that somebody

00:42:44,530 --> 00:42:50,680
can understand who isn't well versed and

00:42:47,320 --> 00:42:53,250
ansible you can include a role by name

00:42:50,680 --> 00:42:55,390
only when a condition happens so

00:42:53,250 --> 00:42:57,040
checkout ansible galaxy there's a lot of

00:42:55,390 --> 00:42:59,109
roll content up there for anything that

00:42:57,040 --> 00:43:02,440
you need to do please

00:42:59,109 --> 00:43:03,970
hopefully use oh something to note just

00:43:02,440 --> 00:43:05,530
from a fedora and treasurer standpoint

00:43:03,970 --> 00:43:07,690
if you do find something for Mansell

00:43:05,530 --> 00:43:10,260
galaxy that you want to use it needs to

00:43:07,690 --> 00:43:14,200
be imported into the into the fedora

00:43:10,260 --> 00:43:15,700
infrastructures git repository fedora

00:43:14,200 --> 00:43:18,570
I'm structure does not actually pull

00:43:15,700 --> 00:43:21,609
roles at runtime on the fly it has to be

00:43:18,570 --> 00:43:26,500
kind of like sneaker netted over into

00:43:21,609 --> 00:43:28,359
the git repo just as a point of note for

00:43:26,500 --> 00:43:30,010
for anyone wanting to contribute so

00:43:28,359 --> 00:43:32,680
hopefully this was useful please

00:43:30,010 --> 00:43:33,970
automate the world and and please you

00:43:32,680 --> 00:43:37,230
know bring some of that magic back into

00:43:33,970 --> 00:43:37,230
form structure yes Dennis

00:43:57,380 --> 00:44:02,010
so the question the question is how do

00:44:00,030 --> 00:44:03,870
you handle package installs because

00:44:02,010 --> 00:44:05,370
there's DNF and there's yum how do you

00:44:03,870 --> 00:44:07,530
handle package results for four

00:44:05,370 --> 00:44:09,570
different distros so there there is a

00:44:07,530 --> 00:44:11,730
package module it has limited

00:44:09,570 --> 00:44:13,440
functionality because like the DNF and

00:44:11,730 --> 00:44:15,090
the EON modules can can do all sorts of

00:44:13,440 --> 00:44:17,160
things like it you know duke exclude

00:44:15,090 --> 00:44:18,870
repos enable repos that kind of stuff

00:44:17,160 --> 00:44:19,950
but if you just need to raw install or

00:44:18,870 --> 00:44:21,960
remove that kind of stuff

00:44:19,950 --> 00:44:25,680
the packaged module will automatically

00:44:21,960 --> 00:44:27,600
detect which package manager is in use

00:44:25,680 --> 00:44:31,520
on the back end and and pass that off

00:44:27,600 --> 00:44:34,350
something to note and ansible 2.7 I

00:44:31,520 --> 00:44:36,660
actually it's like on me it's on the

00:44:34,350 --> 00:44:38,730
roadmap to have the young and DNF

00:44:36,660 --> 00:44:41,850
modules have beef at feature parity and

00:44:38,730 --> 00:44:43,290
for them to be interchangeable so you

00:44:41,850 --> 00:44:44,760
will be able to actually run the yum

00:44:43,290 --> 00:44:48,450
module against the Fedora machine and

00:44:44,760 --> 00:44:49,650
get DNF on the backend because I mean

00:44:48,450 --> 00:44:51,210
technically the yum command is still

00:44:49,650 --> 00:44:53,820
around even though it's kind of a lie

00:44:51,210 --> 00:44:55,650
but it's there yeah so we do have a

00:44:53,820 --> 00:44:58,020
packaged module absolutely the big

00:44:55,650 --> 00:45:00,000
kicker that we always tell people to

00:44:58,020 --> 00:45:01,980
watch out for is your package names are

00:45:00,000 --> 00:45:04,920
gonna change but you know probably from

00:45:01,980 --> 00:45:11,750
CentOS to Fedora or you know fedora

00:45:04,920 --> 00:45:14,520
Tyrell it's pretty much the same right

00:45:11,750 --> 00:45:17,310
right exactly so the comment was Apache

00:45:14,520 --> 00:45:19,320
in Debian is Apache - whereas it's httpd

00:45:17,310 --> 00:45:21,480
in fedora and yeah so that's where

00:45:19,320 --> 00:45:22,710
that's generally where like in the the

00:45:21,480 --> 00:45:25,080
variable substitution will come in

00:45:22,710 --> 00:45:26,610
people will have variables to define the

00:45:25,080 --> 00:45:28,110
sets of packages they need based on

00:45:26,610 --> 00:45:29,330
which distro they're working with and

00:45:28,110 --> 00:45:31,050
then this passed the appropriate

00:45:29,330 --> 00:45:33,960
variable at run time

00:45:31,050 --> 00:45:37,250
once we've detected the platform based

00:45:33,960 --> 00:45:37,250
on the ansible facts question

00:46:20,970 --> 00:46:26,500
I'm not sure I understand the question

00:46:22,750 --> 00:46:30,420
so you're trying to just grab a single

00:46:26,500 --> 00:46:30,420
file from a git repo

00:46:42,920 --> 00:47:02,089
okay so are you are you telling to get

00:46:59,569 --> 00:47:04,549
clone or specifically like web URI

00:47:02,089 --> 00:47:07,299
requests yeah yeah you can get clone

00:47:04,549 --> 00:47:26,510
with the get module absolutely yeah

00:47:07,299 --> 00:47:29,029
question so the question was in the past

00:47:26,510 --> 00:47:31,430
you had to install Python DNF because it

00:47:29,029 --> 00:47:33,650
didn't work out of the box so that is

00:47:31,430 --> 00:47:36,349
true if you use the default Python 2

00:47:33,650 --> 00:47:38,420
interpreter which is assumed if you

00:47:36,349 --> 00:47:41,539
actually pass in your inventory hosts

00:47:38,420 --> 00:47:44,240
file that a host should use the ansible

00:47:41,539 --> 00:47:45,529
Python interpreter for Python 3 it will

00:47:44,240 --> 00:47:48,799
work out of the box because it will then

00:47:45,529 --> 00:47:51,710
use the Python 3 libraries do you note

00:47:48,799 --> 00:47:53,269
that again because we're just gonna be

00:47:51,710 --> 00:47:56,390
talking about all the Python 2 features

00:47:53,269 --> 00:47:59,390
today or I'm sorry ansible Python 2.7 I

00:47:56,390 --> 00:48:01,519
can't talk the ansible 2.7 to us Evans

00:47:59,390 --> 00:48:04,369
gonna be a weird one for us the ansible

00:48:01,519 --> 00:48:05,930
version 2.7 feature we're actually gonna

00:48:04,369 --> 00:48:07,549
audit attack to the interpreter on the

00:48:05,930 --> 00:48:10,160
remote end and python 3 will take

00:48:07,549 --> 00:48:12,859
precedent so you shouldn't have that

00:48:10,160 --> 00:48:16,069
problem in the future but right now for

00:48:12,859 --> 00:48:19,220
for ansible to support python 3 you have

00:48:16,069 --> 00:48:21,740
to define a host variable that tells it

00:48:19,220 --> 00:48:23,779
to use python 3 as opposed to python 2

00:48:21,740 --> 00:48:26,299
and then it'll find yeah it'll find it

00:48:23,779 --> 00:48:30,170
that way there are a handful of other

00:48:26,299 --> 00:48:34,009
things that we kind of in in fedora I

00:48:30,170 --> 00:48:37,970
think since Fedora 25 have to bootstrap

00:48:34,009 --> 00:48:39,799
so you have tell to install the like the

00:48:37,970 --> 00:48:42,920
selinux Python stuff and various

00:48:39,799 --> 00:48:44,660
different things just because the things

00:48:42,920 --> 00:48:47,240
the module use aren't default in the

00:48:44,660 --> 00:48:49,400
distro anymore but yeah so there's

00:48:47,240 --> 00:48:51,019
there's documentation for to handle

00:48:49,400 --> 00:48:53,089
different scenarios but specifically for

00:48:51,019 --> 00:48:56,289
DNF yeah we just need to tell it to use

00:48:53,089 --> 00:48:56,289
Python 3 and you know pick it up

00:48:56,869 --> 00:49:27,660
another question oh okay so the question

00:49:24,720 --> 00:49:32,030
is can you run like the ansible command

00:49:27,660 --> 00:49:38,430
for an ad-hoc task but perform a role no

00:49:32,030 --> 00:49:47,780
no that needs to be a playbook it could

00:49:38,430 --> 00:49:47,780
be interesting shoot let's keep it going

00:49:54,020 --> 00:49:57,020
yes

00:50:37,760 --> 00:50:43,730
so the question is in intra in Travis CI

00:50:41,390 --> 00:50:45,440
oftentimes people will claim in galaxy

00:50:43,730 --> 00:50:47,000
that they support multiple distros but

00:50:45,440 --> 00:50:48,140
don't actually swarm also do shows

00:50:47,000 --> 00:50:50,330
because they're not testing on multiple

00:50:48,140 --> 00:50:53,000
distros there is I believe it's called

00:50:50,330 --> 00:50:55,730
kitchen kitchen ci kitchen ci does

00:50:53,000 --> 00:50:57,770
multiple distro and things with Chef and

00:50:55,730 --> 00:51:00,350
ansible and those kind of things so from

00:50:57,770 --> 00:51:02,030
our perspective as far as like I don't

00:51:00,350 --> 00:51:04,250
think it's an official project

00:51:02,030 --> 00:51:05,480
recommendation but me personally if

00:51:04,250 --> 00:51:07,340
you're gonna do that kind of testing

00:51:05,480 --> 00:51:10,220
things locally there's project called

00:51:07,340 --> 00:51:12,890
molecule that does it has various

00:51:10,220 --> 00:51:14,480
providers in the backend vagrant AWS GCE

00:51:12,890 --> 00:51:16,810
those kind of things

00:51:14,480 --> 00:51:20,930
and it'll do multi distro and it'll do

00:51:16,810 --> 00:51:47,780
you know effective verification of your

00:51:20,930 --> 00:51:50,020
PlayBook so let's see yeah so if you're

00:51:47,780 --> 00:51:55,010
gonna molecule don't read the docs

00:51:50,020 --> 00:51:59,180
that'll take you there I can't remember

00:51:55,010 --> 00:52:01,550
who created this initially there was a

00:51:59,180 --> 00:52:03,200
startup that got bought I think they got

00:52:01,550 --> 00:52:05,900
bought by Cisco but they originally made

00:52:03,200 --> 00:52:08,060
this and it's been amazing and we're

00:52:05,900 --> 00:52:10,490
we've been talking with them a little

00:52:08,060 --> 00:52:12,140
bit to do some project integration and

00:52:10,490 --> 00:52:14,090
that kind of stuff but yeah that's what

00:52:12,140 --> 00:52:16,040
I would recommend I don't you know I

00:52:14,090 --> 00:52:17,570
won't claim that's a ansible official

00:52:16,040 --> 00:52:18,920
recommendation but me personally I think

00:52:17,570 --> 00:52:20,390
that's what I would you know that's what

00:52:18,920 --> 00:52:22,510
I've done in the past that's what I

00:52:20,390 --> 00:52:24,859
would do you have another one

00:52:22,510 --> 00:52:27,500
okay well it's real quick well let's go

00:52:24,859 --> 00:52:28,910
to Dave and then actually it's lunchtime

00:52:27,500 --> 00:52:32,109
so if usually if you just want to come

00:52:28,910 --> 00:52:32,109
up we can chat I'm having a chat

00:52:40,410 --> 00:52:46,240
latest yeah so Kevin frenzy near ik

00:52:43,990 --> 00:52:49,360
fedora and fresher lead he maintains

00:52:46,240 --> 00:52:51,880
ansible in fedora and I think he

00:52:49,360 --> 00:52:54,310
probably lags behind upstream by maybe a

00:52:51,880 --> 00:52:56,920
week he generally has it packaged the

00:52:54,310 --> 00:52:59,530
same day in Koji it just takes a little

00:52:56,920 --> 00:53:01,930
bit to get through bode yeah so latest

00:52:59,530 --> 00:53:06,780
we're always pushing latest able in in

00:53:01,930 --> 00:53:09,710
fedora infra alright yeah I will chat

00:53:06,780 --> 00:53:13,949
all right thank you

00:53:09,710 --> 00:53:13,949

YouTube URL: https://www.youtube.com/watch?v=g4KoWPpI1Cw


