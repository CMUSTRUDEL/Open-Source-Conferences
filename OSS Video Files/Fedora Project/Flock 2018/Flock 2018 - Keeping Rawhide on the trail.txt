Title: Flock 2018 - Keeping Rawhide on the trail
Publication date: 2018-09-08
Playlist: Flock 2018
Description: 
	Thursday, August 9, 2018 
1:30pm - 3:20pm
@Hamburg 4+6

Talk: Keeping Rawhide on the trail
Presenters: Kevin Fenzi

Description: It's this years exciting Rawhide talk! We will go over the last year and talk about how things are going, some interesting bugs we hit and how to diagnose compose failures so everyone can join in the fun. Then we will cast our gaze forward to the coming year and talk about the gating plans and other ideas to make rawhide better and more useful day to day for everyone.
Captions: 
	00:00:03,740 --> 00:00:12,000
hello everybody can you hear me hello

00:00:06,710 --> 00:00:15,150
cool I guess it's about 10:30 so let's

00:00:12,000 --> 00:00:18,690
go ahead and start my name is Kevin

00:00:15,150 --> 00:00:20,490
Finzi I do many things in fedora but

00:00:18,690 --> 00:00:23,340
today I'm going to talk to you about

00:00:20,490 --> 00:00:27,390
rawhide and all the stuff that I do in

00:00:23,340 --> 00:00:32,120
ride and a lot of things about problems

00:00:27,390 --> 00:00:35,520
we've run into and interesting things

00:00:32,120 --> 00:00:39,510
that we fixed and why you should care

00:00:35,520 --> 00:00:41,460
and all sorts of things about rawhide if

00:00:39,510 --> 00:00:44,219
anyone has questions at any point just

00:00:41,460 --> 00:00:48,090
feel free to to raise your hand or shout

00:00:44,219 --> 00:00:49,800
out your question there also of course

00:00:48,090 --> 00:00:54,600
hopefully be time at the end for

00:00:49,800 --> 00:00:59,039
questions so I'm going to kind of look

00:00:54,600 --> 00:01:06,420
over the past that we've had with

00:00:59,039 --> 00:01:09,780
rawhide and then kind of where we're at

00:01:06,420 --> 00:01:12,080
now and then some thoughts and problems

00:01:09,780 --> 00:01:14,340
that were hat we're hitting now and

00:01:12,080 --> 00:01:17,400
hopefully we can brainstorm some

00:01:14,340 --> 00:01:22,229
solutions to some of the things we're

00:01:17,400 --> 00:01:24,930
seeing so I don't know if you guys can

00:01:22,229 --> 00:01:28,229
read this it's kind of small print but

00:01:24,930 --> 00:01:31,520
rawhide is almost twenty years old this

00:01:28,229 --> 00:01:35,670
email was sent to the Red Hat Linux

00:01:31,520 --> 00:01:40,619
developed on August 18th 1998

00:01:35,670 --> 00:01:42,000
announcing the first rawhide release you

00:01:40,619 --> 00:01:44,490
can see at the bottom there they dubbed

00:01:42,000 --> 00:01:48,079
it rawhide and of course over the years

00:01:44,490 --> 00:01:52,110
that's changed to rawhide just one word

00:01:48,079 --> 00:01:58,079
so there's a long history here and we've

00:01:52,110 --> 00:02:02,009
had it round for a very long time so

00:01:58,079 --> 00:02:05,460
looking back at the past composes mostly

00:02:02,009 --> 00:02:07,140
daily it was at first turn aliy and

00:02:05,460 --> 00:02:09,000
synched out so there wasn't a whole lot

00:02:07,140 --> 00:02:11,640
of visibility into what was there until

00:02:09,000 --> 00:02:13,680
it was synced out and this was just

00:02:11,640 --> 00:02:17,159
repository trees only

00:02:13,680 --> 00:02:22,140
so it was groups of packages no images

00:02:17,159 --> 00:02:26,280
or artifacts in particular it was just a

00:02:22,140 --> 00:02:28,230
tree of a bunch to begin with kind of a

00:02:26,280 --> 00:02:31,590
preview of the next release but not

00:02:28,230 --> 00:02:34,340
necessarily an exact copy of what the

00:02:31,590 --> 00:02:41,730
next release would be just more like a

00:02:34,340 --> 00:02:44,939
test compose type of thing so then we of

00:02:41,730 --> 00:02:49,200
course had Corin extras merge into

00:02:44,939 --> 00:02:52,709
Fedora and this was the era of mash we

00:02:49,200 --> 00:02:55,680
used a tool called mash to compose

00:02:52,709 --> 00:02:58,609
rawhide this was done of course in the

00:02:55,680 --> 00:03:02,099
open because corn Dexter's merged out

00:02:58,609 --> 00:03:05,489
mash had multiple architecture support

00:03:02,099 --> 00:03:09,719
so it could compose various different

00:03:05,489 --> 00:03:12,060
architectures but each mash each

00:03:09,719 --> 00:03:16,500
instance was separate so there would be

00:03:12,060 --> 00:03:19,530
a spark rawhide and a PowerPC rawhide

00:03:16,500 --> 00:03:21,150
compose and all the architectures were

00:03:19,530 --> 00:03:23,430
kind of done independently on their

00:03:21,150 --> 00:03:26,400
their own time

00:03:23,430 --> 00:03:28,199
this actually toward the end of Nash's

00:03:26,400 --> 00:03:30,689
tenure started producing more than just

00:03:28,199 --> 00:03:32,699
a tree of packages we also produced a

00:03:30,689 --> 00:03:35,370
boot ISO that you could actually use a

00:03:32,699 --> 00:03:40,049
net install ISO to to install from that

00:03:35,370 --> 00:03:42,030
tree and toward the end of this 10 year

00:03:40,049 --> 00:03:44,879
also fed message started appearing and

00:03:42,030 --> 00:03:47,659
we added fed message support to mash so

00:03:44,879 --> 00:03:50,370
you could see wind composes finished and

00:03:47,659 --> 00:03:54,500
when they started and and when it went

00:03:50,370 --> 00:03:54,500
through various phases as it went along

00:03:54,829 --> 00:04:04,470
let's see what else was gonna mention

00:03:57,000 --> 00:04:07,049
about mash yeah so mash served us long

00:04:04,470 --> 00:04:15,060
and well but it certainly had its its

00:04:07,049 --> 00:04:16,919
share of issues and then along came some

00:04:15,060 --> 00:04:18,479
more issues that we ran into in the in

00:04:16,919 --> 00:04:21,830
the mash era

00:04:18,479 --> 00:04:25,110
it was failures at this point were a

00:04:21,830 --> 00:04:26,639
particular kind usually what meant that

00:04:25,110 --> 00:04:27,630
the build route that it was trying to

00:04:26,639 --> 00:04:30,180
build

00:04:27,630 --> 00:04:31,800
this compose in failed for some reason

00:04:30,180 --> 00:04:34,110
so it was a very fundamental package

00:04:31,800 --> 00:04:35,970
that broke it was pretty rare that it

00:04:34,110 --> 00:04:40,440
happened it would have to be you know

00:04:35,970 --> 00:04:42,810
the Installer or the kernel or something

00:04:40,440 --> 00:04:45,930
very very low level for for this to

00:04:42,810 --> 00:04:49,410
break so it didn't break that often mash

00:04:45,930 --> 00:04:53,280
also was built on our code base of yum

00:04:49,410 --> 00:04:55,380
and Python 2 and all those great things

00:04:53,280 --> 00:04:58,080
and of course when we started getting

00:04:55,380 --> 00:05:00,780
new features in rpm rich dependencies

00:04:58,080 --> 00:05:03,480
and things like that it had no concept

00:05:00,780 --> 00:05:06,180
of them one of the interesting things we

00:05:03,480 --> 00:05:07,920
ran into somebody added rich

00:05:06,180 --> 00:05:11,280
dependencies to a package in rawhide

00:05:07,920 --> 00:05:14,160
back when we were using mash and when

00:05:11,280 --> 00:05:16,380
yum sees a rich dependency it it looks

00:05:14,160 --> 00:05:18,510
at it like somebody said requires

00:05:16,380 --> 00:05:21,870
something or something else and it says

00:05:18,510 --> 00:05:24,630
requires I can't find package or so it

00:05:21,870 --> 00:05:27,450
just bombs out at that point and doesn't

00:05:24,630 --> 00:05:30,840
process anything after that so obviously

00:05:27,450 --> 00:05:37,040
we needed a better solution for all the

00:05:30,840 --> 00:05:43,080
new stuff so of course along comes punji

00:05:37,040 --> 00:05:47,970
punji is another tool that does use DNF

00:05:43,080 --> 00:05:49,620
it is Python 3 aware etc etc and really

00:05:47,970 --> 00:05:51,150
one of the fundamental changes here is

00:05:49,620 --> 00:05:54,510
instead of just building a tree of

00:05:51,150 --> 00:05:58,080
packages we wanted to build everything

00:05:54,510 --> 00:05:59,430
we wanted to make every compose like we

00:05:58,080 --> 00:06:02,580
were gonna release the whole operating

00:05:59,430 --> 00:06:04,970
system and there was a specific reason

00:06:02,580 --> 00:06:07,980
for this with the old days with Nash and

00:06:04,970 --> 00:06:10,260
rawhide you would go along Nash will be

00:06:07,980 --> 00:06:11,760
fine you could compose a rawhide tree

00:06:10,260 --> 00:06:13,020
everything would be great there but then

00:06:11,760 --> 00:06:15,810
when it came time to actually do a

00:06:13,020 --> 00:06:19,200
release you found all these problems you

00:06:15,810 --> 00:06:21,570
couldn't build images you had dependency

00:06:19,200 --> 00:06:24,170
problems or whatever and so we

00:06:21,570 --> 00:06:27,420
specifically wanted to make things as

00:06:24,170 --> 00:06:29,910
like a real compose for a release as we

00:06:27,420 --> 00:06:33,780
possibly could Bungie actually produces

00:06:29,910 --> 00:06:36,780
all the images and everything that it

00:06:33,780 --> 00:06:38,760
produces is like it was a full release

00:06:36,780 --> 00:06:41,460
so all the ISO images are there all the

00:06:38,760 --> 00:06:42,960
check sums are there all the trees

00:06:41,460 --> 00:06:45,180
all of everything that would be in a

00:06:42,960 --> 00:06:48,840
regular release is is there in each

00:06:45,180 --> 00:06:50,699
nightly compose of course this presented

00:06:48,840 --> 00:06:52,800
a much higher surface area right so

00:06:50,699 --> 00:06:55,590
before the only thing that could break

00:06:52,800 --> 00:06:57,300
the the composes were things that were

00:06:55,590 --> 00:06:59,910
in the bill Drude are very fundamental

00:06:57,300 --> 00:07:02,130
things and now since we're building all

00:06:59,910 --> 00:07:04,229
of this stuff anything that breaks any

00:07:02,130 --> 00:07:06,680
of those things that we require is going

00:07:04,229 --> 00:07:10,130
to cause the compose to fail so

00:07:06,680 --> 00:07:13,620
obviously we have a different issue here

00:07:10,130 --> 00:07:18,150
one of the things we also added is dusty

00:07:13,620 --> 00:07:20,009
here I don't see no dusty actually came

00:07:18,150 --> 00:07:22,560
up with this idea and it's been very

00:07:20,009 --> 00:07:25,560
helpful for us he set up a pagar

00:07:22,560 --> 00:07:28,590
instance and it listens on fed messages

00:07:25,560 --> 00:07:30,690
and when a compose fails it writes a

00:07:28,590 --> 00:07:33,599
ticket and shows all the tasks that

00:07:30,690 --> 00:07:39,810
failed so one thing that's been really

00:07:33,599 --> 00:07:41,370
helpful for is coordinating but one of

00:07:39,810 --> 00:07:43,860
the things that this has been really

00:07:41,370 --> 00:07:46,470
helpful for is coordinating between

00:07:43,860 --> 00:07:48,060
people trying to fix problems because

00:07:46,470 --> 00:07:49,650
often there's multiple problems or

00:07:48,060 --> 00:07:50,759
people one person starts working on it

00:07:49,650 --> 00:07:54,060
doesn't tell other people and they start

00:07:50,759 --> 00:07:56,969
working on it etc so if you're curious

00:07:54,060 --> 00:07:59,340
as to you know what's failing the

00:07:56,969 --> 00:08:00,990
compose or or what's going on or who's

00:07:59,340 --> 00:08:03,469
working on it or what not you can look

00:08:00,990 --> 00:08:03,469
in that

00:08:07,270 --> 00:08:12,400
you can look in this issue tracker and

00:08:09,280 --> 00:08:15,220
see you know what the most recent

00:08:12,400 --> 00:08:17,200
compose failure was and and what the

00:08:15,220 --> 00:08:20,170
release engineering folks think is is

00:08:17,200 --> 00:08:22,090
going on on that it's a bit overwhelming

00:08:20,170 --> 00:08:24,370
because obviously we do a compose every

00:08:22,090 --> 00:08:27,730
every day so if there's failures there's

00:08:24,370 --> 00:08:33,250
lots of tickets in there but it's been

00:08:27,730 --> 00:08:36,730
very useful so I don't know how readable

00:08:33,250 --> 00:08:38,620
this is it's probably pretty small but

00:08:36,730 --> 00:08:43,360
this is from the rawhide page on the

00:08:38,620 --> 00:08:47,050
wiki and this is kind of the the high

00:08:43,360 --> 00:08:49,150
level goals of rawhide to allow package

00:08:47,050 --> 00:08:53,200
maintainers to integrate the newest

00:08:49,150 --> 00:08:55,510
usable versions of their packages a lot

00:08:53,200 --> 00:08:58,600
of people miss that they're supposed to

00:08:55,510 --> 00:09:00,520
be integrating usable packages we want

00:08:58,600 --> 00:09:02,970
this thing to be usable we don't want to

00:09:00,520 --> 00:09:05,830
just throw something over the fence and

00:09:02,970 --> 00:09:07,690
you know oh that's broken completely no

00:09:05,830 --> 00:09:09,040
you want to make sure that that what

00:09:07,690 --> 00:09:12,390
you're doing there is integrating

00:09:09,040 --> 00:09:12,390
something that's useful and usable

00:09:13,890 --> 00:09:21,990
excellent so it also allows advanced

00:09:19,450 --> 00:09:24,610
users access to newest usable packages

00:09:21,990 --> 00:09:26,560
it allows incremental changes to

00:09:24,610 --> 00:09:28,960
packages that are too small or too large

00:09:26,560 --> 00:09:31,870
for other releases there's a lot of

00:09:28,960 --> 00:09:36,060
things that we could do in rawhide you

00:09:31,870 --> 00:09:38,830
know simple fixes that don't actually

00:09:36,060 --> 00:09:42,880
need to be pushed out to every user a

00:09:38,830 --> 00:09:47,380
good example of this is recently I think

00:09:42,880 --> 00:09:51,490
it was relics timeframe the rpm specs

00:09:47,380 --> 00:09:53,140
used to have a build root invocation in

00:09:51,490 --> 00:09:56,230
them you could specify what you wanted

00:09:53,140 --> 00:10:00,100
the temporary build root to be and ever

00:09:56,230 --> 00:10:03,370
since rl6 days that has had no effect in

00:10:00,100 --> 00:10:05,710
in our rpms it rpm just defaults that to

00:10:03,370 --> 00:10:07,570
something saying so somebody actually

00:10:05,710 --> 00:10:10,810
went through and cleaned up all of the

00:10:07,570 --> 00:10:12,850
spec files that had those still in it so

00:10:10,810 --> 00:10:15,310
it doesn't actually change anything it

00:10:12,850 --> 00:10:17,290
just gets rid of cruft or things that

00:10:15,310 --> 00:10:19,270
confuse other people when they're

00:10:17,290 --> 00:10:23,200
looking at the spec file or

00:10:19,270 --> 00:10:25,960
what not so you know if there's a very

00:10:23,200 --> 00:10:27,460
minor issue you can push into rawhide

00:10:25,960 --> 00:10:31,660
and make sure that it's working before

00:10:27,460 --> 00:10:38,140
it goes into stable and so it's a good

00:10:31,660 --> 00:10:41,860
arena for those sorts of changes also

00:10:38,140 --> 00:10:45,310
the we recently added this last line

00:10:41,860 --> 00:10:47,950
about GCC and GMC it's a place where the

00:10:45,310 --> 00:10:49,900
low level packages can gain real worked

00:10:47,950 --> 00:10:52,180
real-world testing and pre-release

00:10:49,900 --> 00:10:55,330
versions Fedora works very closely with

00:10:52,180 --> 00:10:58,090
GMC folks they try and align their

00:10:55,330 --> 00:11:00,310
cycles so that you know they can take

00:10:58,090 --> 00:11:02,650
advantage of the fedora mastery build to

00:11:00,310 --> 00:11:05,560
see what's going on in the compiler or G

00:11:02,650 --> 00:11:07,990
Lipsy and it's very beneficial to both

00:11:05,560 --> 00:11:10,480
of us because by the time Fedora 29

00:11:07,990 --> 00:11:13,300
comes out it will have the latest GFC

00:11:10,480 --> 00:11:15,370
and GCC and they will have had all this

00:11:13,300 --> 00:11:17,430
test data of this huge distribution

00:11:15,370 --> 00:11:20,470
building all these strange things and

00:11:17,430 --> 00:11:26,740
you know working the bugs out of out of

00:11:20,470 --> 00:11:29,850
their tools so just a little quick note

00:11:26,740 --> 00:11:32,830
about why we should care about rawhide

00:11:29,850 --> 00:11:36,310
you know the the goals mentioned in the

00:11:32,830 --> 00:11:39,070
last slide are pretty important but

00:11:36,310 --> 00:11:42,880
there's the integration work that we do

00:11:39,070 --> 00:11:45,580
in ride is is just super vital for the

00:11:42,880 --> 00:11:47,620
rest of fedora it's if you don't have

00:11:45,580 --> 00:11:51,730
this ability to integrate stuff at that

00:11:47,620 --> 00:11:56,290
point it becomes so much harder to to

00:11:51,730 --> 00:11:58,150
get that to users and it it really is

00:11:56,290 --> 00:12:00,510
something that I think everyone should

00:11:58,150 --> 00:12:00,510
care about

00:12:02,440 --> 00:12:07,300
so here's a interesting statistic those

00:12:05,110 --> 00:12:10,079
amongst you might notice how many times

00:12:07,300 --> 00:12:13,209
the rawhide compose has worked recently

00:12:10,079 --> 00:12:14,949
I'm happy to report I didn't add this to

00:12:13,209 --> 00:12:18,699
the slide but we have a composed today

00:12:14,949 --> 00:12:20,529
we actually have a composed today and I

00:12:18,699 --> 00:12:21,279
have a slide on why this has been the

00:12:20,529 --> 00:12:24,519
case

00:12:21,279 --> 00:12:29,620
a little later here but if you look at

00:12:24,519 --> 00:12:30,730
that 11 completed actually let me let me

00:12:29,620 --> 00:12:33,699
back up a second

00:12:30,730 --> 00:12:36,959
punji has various states to indicate how

00:12:33,699 --> 00:12:38,230
the compose worked or did not work

00:12:36,959 --> 00:12:40,509
doomed

00:12:38,230 --> 00:12:42,939
means that something that is a required

00:12:40,509 --> 00:12:47,259
deliverable did not compose did not

00:12:42,939 --> 00:12:49,839
function so it's no good incomplete

00:12:47,259 --> 00:12:52,870
means that all of the required

00:12:49,839 --> 00:12:55,959
deliverables did complete but some of

00:12:52,870 --> 00:13:01,269
the non required deliverables did not so

00:12:55,959 --> 00:13:03,670
for example the I 686 media is not a

00:13:01,269 --> 00:13:06,279
required deliverable so there was a long

00:13:03,670 --> 00:13:08,560
time there I forget how long it was a

00:13:06,279 --> 00:13:11,649
week or two when there was no I 686

00:13:08,560 --> 00:13:13,300
colonel and so all the I 686 media

00:13:11,649 --> 00:13:15,009
failed which was fine for rawhide it

00:13:13,300 --> 00:13:19,689
just said incomplete because those

00:13:15,009 --> 00:13:21,910
things did not finish there is one other

00:13:19,689 --> 00:13:24,490
state that punji has called finished

00:13:21,910 --> 00:13:28,089
which is everything worked everything

00:13:24,490 --> 00:13:30,939
composed and earlier this year in March

00:13:28,089 --> 00:13:33,279
we actually had that happen it like

00:13:30,939 --> 00:13:34,990
printed out rawhide finished compose

00:13:33,279 --> 00:13:37,509
finished and we're like whoa is that

00:13:34,990 --> 00:13:41,370
finished finished everything worked and

00:13:37,509 --> 00:13:45,490
then we found out it was a punji bug

00:13:41,370 --> 00:13:47,920
because it had actually reported that

00:13:45,490 --> 00:13:50,199
everything worked but there's a number

00:13:47,920 --> 00:13:52,930
of tasks where it tries to make media

00:13:50,199 --> 00:13:55,630
for say for architectures and some of

00:13:52,930 --> 00:13:57,579
them are not required and some of those

00:13:55,630 --> 00:14:01,329
had failed but it marked the overall

00:13:57,579 --> 00:14:04,500
task as completed correctly so we'll get

00:14:01,329 --> 00:14:04,500
there we will get there someday

00:14:08,050 --> 00:14:12,820
those of you who went to the making

00:14:10,540 --> 00:14:15,340
composes better talk may be familiar

00:14:12,820 --> 00:14:19,540
with this diagram which I shamelessly

00:14:15,340 --> 00:14:21,700
stole from the punchy website but this

00:14:19,540 --> 00:14:27,310
is kind of an overview of what punji

00:14:21,700 --> 00:14:29,260
does and the steps if you're interested

00:14:27,310 --> 00:14:30,940
in this obviously go go look at punchy

00:14:29,260 --> 00:14:33,340
or go look at the recording of the the

00:14:30,940 --> 00:14:35,770
making composes faster talk because they

00:14:33,340 --> 00:14:37,300
went into a lot more detail on this but

00:14:35,770 --> 00:14:39,820
you can see that punchy does a whole lot

00:14:37,300 --> 00:14:42,550
of stuff it gathers a lot of packages

00:14:39,820 --> 00:14:46,060
and Fedora is huge I mean there's 20,000

00:14:42,550 --> 00:14:47,830
packages some of them are gigantic some

00:14:46,060 --> 00:14:50,470
of them have tons and tons of sub

00:14:47,830 --> 00:14:52,900
packages so it's moving around tons and

00:14:50,470 --> 00:14:55,300
tons of stuff and because we're trying

00:14:52,900 --> 00:14:59,350
to make this compose exactly like a real

00:14:55,300 --> 00:15:03,310
compose it does you know tons tons of

00:14:59,350 --> 00:15:05,530
tons of stuff tons of images we

00:15:03,310 --> 00:15:07,420
basically add images all the time or we

00:15:05,530 --> 00:15:11,200
add new deliverables all the time people

00:15:07,420 --> 00:15:14,620
come along and say oh well like this

00:15:11,200 --> 00:15:17,170
cycle we have the mini shift spin I

00:15:14,620 --> 00:15:20,830
think is going to be added we have all

00:15:17,170 --> 00:15:26,700
the labs all the spins all the live

00:15:20,830 --> 00:15:26,700
media so tons and tons of deliverables

00:15:28,080 --> 00:15:33,700
so here's a kind of a quick list of

00:15:31,030 --> 00:15:35,910
things that break the compose now or

00:15:33,700 --> 00:15:39,220
problems that I've seen that break

00:15:35,910 --> 00:15:42,250
scripted errors when in initial install

00:15:39,220 --> 00:15:44,560
chroot so all of these image builds that

00:15:42,250 --> 00:15:48,400
are building live CDs or DVDs or things

00:15:44,560 --> 00:15:50,850
like that are done in Koji and Koji goes

00:15:48,400 --> 00:15:54,010
to a builder creates a mock chroot

00:15:50,850 --> 00:15:57,580
installs packages in that and in some

00:15:54,010 --> 00:16:00,100
cases installs packages into a further

00:15:57,580 --> 00:16:02,140
loopback image in you know underneath

00:16:00,100 --> 00:16:04,930
that so there's all these layers of

00:16:02,140 --> 00:16:07,180
stuff here and at the lowest level

00:16:04,930 --> 00:16:09,430
you're installing you're using rpm and

00:16:07,180 --> 00:16:12,580
you're installing packages into a chroot

00:16:09,430 --> 00:16:14,050
that has nothing else in it right you're

00:16:12,580 --> 00:16:16,390
doing the initial install of these

00:16:14,050 --> 00:16:18,080
packages and sometimes the maintainer

00:16:16,390 --> 00:16:20,360
don't think about this case

00:16:18,080 --> 00:16:22,360
so they'll do you know they'll call

00:16:20,360 --> 00:16:24,530
something that they don't have a

00:16:22,360 --> 00:16:26,540
requires pre for or something like that

00:16:24,530 --> 00:16:29,390
and they're scriptlets so it's not there

00:16:26,540 --> 00:16:31,280
it doesn't exist yet or they try and

00:16:29,390 --> 00:16:32,900
grep a file that doesn't exist yet

00:16:31,280 --> 00:16:35,540
because the package that has that file

00:16:32,900 --> 00:16:38,390
hasn't been installed yet or they try

00:16:35,540 --> 00:16:40,520
and look at something in procore sis or

00:16:38,390 --> 00:16:43,970
something like that which it doesn't

00:16:40,520 --> 00:16:46,250
exist or they try and call system D and

00:16:43,970 --> 00:16:48,020
system D is running in a seat root and

00:16:46,250 --> 00:16:50,150
it says no sorry I don't know what

00:16:48,020 --> 00:16:53,450
you're talking about I'm not in it so

00:16:50,150 --> 00:16:58,400
that is a real common issue that we see

00:16:53,450 --> 00:17:00,680
in the base packages unannounced version

00:16:58,400 --> 00:17:02,630
updates for libraries causing broken

00:17:00,680 --> 00:17:05,959
depths this happens far too frequently

00:17:02,630 --> 00:17:08,480
still somebody will update a package and

00:17:05,959 --> 00:17:10,730
not even realize sometimes that the

00:17:08,480 --> 00:17:12,020
library has increased inversion and you

00:17:10,730 --> 00:17:13,970
know these four other things are broken

00:17:12,020 --> 00:17:15,800
and then we'll see that in the compose

00:17:13,970 --> 00:17:17,990
because it tries to install stuff and

00:17:15,800 --> 00:17:21,380
then it can't because the broken

00:17:17,990 --> 00:17:25,339
dependencies so that is all to come in

00:17:21,380 --> 00:17:28,060
these days not fully coordinating moves

00:17:25,339 --> 00:17:31,040
changes in several packages we see this

00:17:28,060 --> 00:17:34,070
we see this all the time I have a good

00:17:31,040 --> 00:17:36,770
example of this in today's compose or

00:17:34,070 --> 00:17:40,160
yesterday's compose which we'll see

00:17:36,770 --> 00:17:42,050
later size changes this is another one

00:17:40,160 --> 00:17:44,660
that we see all the time actually lately

00:17:42,050 --> 00:17:46,390
it's seems like it's been G Lib C has

00:17:44,660 --> 00:17:50,570
had a lot of trouble with their locales

00:17:46,390 --> 00:17:52,970
so a lot of these media are defined to a

00:17:50,570 --> 00:17:55,640
certain size and somebody says you know

00:17:52,970 --> 00:17:58,280
this is a DVD or we want this under two

00:17:55,640 --> 00:18:00,290
gig or something like that and then G

00:17:58,280 --> 00:18:03,050
Lib C has some kind of bug or issue

00:18:00,290 --> 00:18:05,900
where they do a build and the look house

00:18:03,050 --> 00:18:09,230
are suddenly you know 500 gigabytes and

00:18:05,900 --> 00:18:11,900
then it doesn't fit and boom things

00:18:09,230 --> 00:18:14,960
things don't work so that that is an

00:18:11,900 --> 00:18:17,690
issue that a lot of people hit I think

00:18:14,960 --> 00:18:20,630
that could possibly be mitigated by kind

00:18:17,690 --> 00:18:22,340
of informing people more quickly what

00:18:20,630 --> 00:18:24,020
the difference is in that their builds

00:18:22,340 --> 00:18:27,040
are you know you're doing a build of

00:18:24,020 --> 00:18:30,770
this package hey your last package was

00:18:27,040 --> 00:18:33,100
498 you know gigabytes less something is

00:18:30,770 --> 00:18:33,100
wrong here

00:18:33,940 --> 00:18:42,009
so yes exclude arch is another one we

00:18:39,649 --> 00:18:44,419
haven't hit this too much recently but

00:18:42,009 --> 00:18:46,369
occasionally people will run into a

00:18:44,419 --> 00:18:50,090
problem with a particular architecture

00:18:46,369 --> 00:18:52,070
and the process for doing that is to you

00:18:50,090 --> 00:18:54,950
know at exclude arch block the

00:18:52,070 --> 00:18:57,340
architecture bug and you know mention

00:18:54,950 --> 00:19:00,350
all the things to the architecture team

00:18:57,340 --> 00:19:02,929
but the case this doesn't work on is

00:19:00,350 --> 00:19:04,840
things that we need in base images or

00:19:02,929 --> 00:19:06,979
build routes or things like that I

00:19:04,840 --> 00:19:13,429
forget there was an example of this

00:19:06,979 --> 00:19:14,690
earlier this year it was I don't know I

00:19:13,429 --> 00:19:16,669
I can't remember the name of the package

00:19:14,690 --> 00:19:19,340
but it was some package that was

00:19:16,669 --> 00:19:22,849
basically in a basic package set and

00:19:19,340 --> 00:19:25,309
they excluded arm v7 and one of the arm

00:19:22,849 --> 00:19:29,149
v7 deliverables is required so no

00:19:25,309 --> 00:19:32,080
compose so we have to be careful about

00:19:29,149 --> 00:19:32,080
that also

00:19:32,900 --> 00:19:44,070
it might have been yeah so here's a

00:19:39,480 --> 00:19:46,740
quick list of what a few things this is

00:19:44,070 --> 00:19:50,190
interesting I only added locking to the

00:19:46,740 --> 00:19:52,740
composed process early this year before

00:19:50,190 --> 00:19:56,070
it would just compose it composes from a

00:19:52,740 --> 00:19:58,680
cron and it would just compose you know

00:19:56,070 --> 00:20:02,100
however many and we ran into this very

00:19:58,680 --> 00:20:04,590
very bad problem weight which we

00:20:02,100 --> 00:20:07,290
recovered from but I am doubt very many

00:20:04,590 --> 00:20:09,240
people are aware of it so Fedora 28 the

00:20:07,290 --> 00:20:14,190
run-up to that release we were doing our

00:20:09,240 --> 00:20:16,710
C composes and we got a an RC that was

00:20:14,190 --> 00:20:18,660
gold that passed all of the tests we

00:20:16,710 --> 00:20:22,230
were gonna release it gonna release it

00:20:18,660 --> 00:20:23,970
next week and unbeknownst to us or

00:20:22,230 --> 00:20:27,800
unnoticed by us there was another

00:20:23,970 --> 00:20:30,300
composed running previous to that a

00:20:27,800 --> 00:20:33,210
Brant it was branched instead of rawhide

00:20:30,300 --> 00:20:35,940
but it same principle and it only

00:20:33,210 --> 00:20:38,790
finished after we had staged the GA

00:20:35,940 --> 00:20:41,790
release that right mom it was like two

00:20:38,790 --> 00:20:44,460
days after two days after the release it

00:20:41,790 --> 00:20:48,090
finally completed and of course this

00:20:44,460 --> 00:20:50,310
messed up the staging of the the regular

00:20:48,090 --> 00:20:53,640
fedora 28 release so we had to like

00:20:50,310 --> 00:20:54,810
clean up that manually and you know make

00:20:53,640 --> 00:20:57,990
sure everything was in the right place

00:20:54,810 --> 00:21:01,020
so I put locking in place and we have

00:20:57,990 --> 00:21:03,330
hit definitely hit cases now where a

00:21:01,020 --> 00:21:06,480
composers been running and the Quran

00:21:03,330 --> 00:21:08,880
doesn't kick off because it has locking

00:21:06,480 --> 00:21:10,680
around it now just to avoid these sort

00:21:08,880 --> 00:21:14,640
of problems where you get multiple

00:21:10,680 --> 00:21:16,590
composes stacked up behind each other we

00:21:14,640 --> 00:21:19,440
also had cases where a rawhide compose

00:21:16,590 --> 00:21:21,480
would go along another one would go

00:21:19,440 --> 00:21:23,490
along and complete and then the first

00:21:21,480 --> 00:21:25,560
one would complete and right over the

00:21:23,490 --> 00:21:28,710
second the one the newer one that had

00:21:25,560 --> 00:21:31,140
already completed so the locking has

00:21:28,710 --> 00:21:35,310
definitely been a useful a useful

00:21:31,140 --> 00:21:40,560
addition why do we make the compose fail

00:21:35,310 --> 00:21:43,410
on required required deliverables we

00:21:40,560 --> 00:21:46,130
want rawhide to be alpha quality at all

00:21:43,410 --> 00:21:50,400
times this was part of the

00:21:46,130 --> 00:21:54,660
no more alphas proposal that we did with

00:21:50,400 --> 00:21:56,820
Fedora 27 so the idea is ride is always

00:21:54,660 --> 00:21:59,940
alpha it always meets the alpha criteria

00:21:56,820 --> 00:22:04,110
that the deliverables are there the

00:21:59,940 --> 00:22:06,330
tests pass etc and we have open QA

00:22:04,110 --> 00:22:10,410
running to do a lot of those tests and

00:22:06,330 --> 00:22:12,900
adam williamson who is not here catches

00:22:10,410 --> 00:22:14,730
all kinds of things with with open QA I

00:22:12,900 --> 00:22:16,560
mean he's he's been filing stuff right

00:22:14,730 --> 00:22:19,380
and left as he hits it and it's it's

00:22:16,560 --> 00:22:20,970
great this also prevents us from having

00:22:19,380 --> 00:22:24,300
the problem that we had earlier with

00:22:20,970 --> 00:22:26,070
mash where you get to like a beta and

00:22:24,300 --> 00:22:28,290
you say okay well it's been composing

00:22:26,070 --> 00:22:30,390
we're probably great and then you find

00:22:28,290 --> 00:22:32,310
out everything's broken so if you keep

00:22:30,390 --> 00:22:35,340
things at a high enough quality to begin

00:22:32,310 --> 00:22:37,620
with a background quality then doing

00:22:35,340 --> 00:22:42,240
those beta and final releases are a lot

00:22:37,620 --> 00:22:44,670
easier composing all arches at the same

00:22:42,240 --> 00:22:46,950
time as I mentioned with mash things

00:22:44,670 --> 00:22:49,170
were split out by architecture so each

00:22:46,950 --> 00:22:52,260
architecture team did their own thing

00:22:49,170 --> 00:22:55,550
and that ran into strange artifacts

00:22:52,260 --> 00:23:00,210
where you know PowerPC would be behind

00:22:55,550 --> 00:23:03,720
say arm v7 or you know you've run into

00:23:00,210 --> 00:23:09,510
these very strange version skew issues

00:23:03,720 --> 00:23:12,420
and this allows us to do all the all the

00:23:09,510 --> 00:23:14,340
architectures we can promote certain

00:23:12,420 --> 00:23:16,110
things from certain architectures as

00:23:14,340 --> 00:23:21,240
being released blocking or not so like

00:23:16,110 --> 00:23:25,410
the arm v7 xfce image I believe is is or

00:23:21,240 --> 00:23:27,600
the arm v7 server image anyway we can

00:23:25,410 --> 00:23:29,580
just decide what architecture and what

00:23:27,600 --> 00:23:31,050
images are released blocking or not and

00:23:29,580 --> 00:23:32,760
we don't have to worry about whether

00:23:31,050 --> 00:23:35,760
they're being done in certain other

00:23:32,760 --> 00:23:37,470
places or not so that also is helpful

00:23:35,760 --> 00:23:40,130
but it of course increases all the

00:23:37,470 --> 00:23:40,130
composed time

00:23:42,870 --> 00:23:48,370
so this is a few of the more amusing

00:23:46,539 --> 00:23:51,760
little problems we've run into I thought

00:23:48,370 --> 00:23:54,760
I'd share so we ran into a string of

00:23:51,760 --> 00:23:57,460
compose issues where rawhide would not

00:23:54,760 --> 00:24:00,640
compose and it was appliance images

00:23:57,460 --> 00:24:04,990
which are arm images that you DD to arm

00:24:00,640 --> 00:24:08,440
devices that would not complete and if

00:24:04,990 --> 00:24:10,450
use all it would say is that is one of

00:24:08,440 --> 00:24:11,860
the ones that's sort of oniony it goes

00:24:10,450 --> 00:24:13,630
to the Builder it creates a mock seat

00:24:11,860 --> 00:24:15,880
root and it creates a loopback device

00:24:13,630 --> 00:24:18,820
and it installs into that file that

00:24:15,880 --> 00:24:20,590
loopback file closes that off does some

00:24:18,820 --> 00:24:23,289
things and then uploads it the result

00:24:20,590 --> 00:24:25,419
well it was unable to unmount that

00:24:23,289 --> 00:24:27,010
loopback something was holding that

00:24:25,419 --> 00:24:30,250
image open so it couldn't actually

00:24:27,010 --> 00:24:33,490
finish unmounting it and this one was a

00:24:30,250 --> 00:24:35,950
big pain to to track down but the

00:24:33,490 --> 00:24:39,640
problem is were looking at the changes

00:24:35,950 --> 00:24:44,289
from the previous working rawhide s SSD

00:24:39,640 --> 00:24:46,149
had updated their their package and they

00:24:44,289 --> 00:24:49,120
had put in their package that certain

00:24:46,149 --> 00:24:52,059
files were owned by the SS SD user right

00:24:49,120 --> 00:24:55,029
which is fine and all but when they're

00:24:52,059 --> 00:24:58,720
installing in the CH root that has to be

00:24:55,029 --> 00:25:01,179
looked up G Lib C says ok SSS D user

00:24:58,720 --> 00:25:03,909
what is that a look in the string of

00:25:01,179 --> 00:25:06,789
things that I have to look up so it

00:25:03,909 --> 00:25:08,860
opened those libraries and all of those

00:25:06,789 --> 00:25:13,210
libraries were already open in the

00:25:08,860 --> 00:25:17,140
chroot except one library the NSS system

00:25:13,210 --> 00:25:19,659
D library system DS in SS user support

00:25:17,140 --> 00:25:22,270
was not open in the CH root so it would

00:25:19,659 --> 00:25:23,740
open the one in the image because it was

00:25:22,270 --> 00:25:26,500
looking for this library and if there

00:25:23,740 --> 00:25:29,669
wasn't the image it would open that look

00:25:26,500 --> 00:25:33,159
up the SS SD user and then keep it open

00:25:29,669 --> 00:25:36,250
so this was worked around in appliance

00:25:33,159 --> 00:25:39,070
tools we just basically added something

00:25:36,250 --> 00:25:40,659
to say hey when you start making an

00:25:39,070 --> 00:25:42,669
appliance before you start that loop

00:25:40,659 --> 00:25:44,529
back make sure all the libraries that

00:25:42,669 --> 00:25:46,539
you need to open are open in the chroot

00:25:44,529 --> 00:25:50,820
and not the image that you're trying to

00:25:46,539 --> 00:25:50,820
make this this was a big

00:25:54,290 --> 00:26:01,530
so let's see

00:25:57,870 --> 00:26:04,080
Oh another issue that we've run into the

00:26:01,530 --> 00:26:06,780
way package signing works rawhide is now

00:26:04,080 --> 00:26:09,540
fully signed the way it works is you do

00:26:06,780 --> 00:26:12,030
a build and it lands in the f29 pending

00:26:09,540 --> 00:26:14,520
tag and then we have an automated

00:26:12,030 --> 00:26:15,990
process called Robo signatory that looks

00:26:14,520 --> 00:26:18,830
at the stuff that lands in that tag

00:26:15,990 --> 00:26:21,840
signs it and then moves it over to the

00:26:18,830 --> 00:26:23,400
f29 tag and that's that's great but

00:26:21,840 --> 00:26:25,110
every once in a while there's there's a

00:26:23,400 --> 00:26:28,800
problem with it and usually it's because

00:26:25,110 --> 00:26:31,290
something we did like we rebooted

00:26:28,800 --> 00:26:34,320
servers or there was a database outage

00:26:31,290 --> 00:26:36,900
or you know some some issue that caused

00:26:34,320 --> 00:26:40,200
it to not process some amount of builds

00:26:36,900 --> 00:26:42,330
there the problem then becomes that you

00:26:40,200 --> 00:26:44,250
get these packages that are sitting in

00:26:42,330 --> 00:26:46,260
there and then later somebody says hey

00:26:44,250 --> 00:26:49,380
my package never got signed it never

00:26:46,260 --> 00:26:51,060
went out well if you then flush that

00:26:49,380 --> 00:26:53,040
queue out you say sign all these

00:26:51,060 --> 00:26:54,810
packages put them in the right tag but

00:26:53,040 --> 00:26:57,060
some of them are from five days ago and

00:26:54,810 --> 00:26:58,860
so maybe there's a newer version of one

00:26:57,060 --> 00:27:01,530
of those things and you've just tagged

00:26:58,860 --> 00:27:04,560
an older one on top of it so you get

00:27:01,530 --> 00:27:07,560
these strange artifacts where packages

00:27:04,560 --> 00:27:11,330
go back in version which is not what you

00:27:07,560 --> 00:27:14,120
want so we need to we need to solve that

00:27:11,330 --> 00:27:17,450
better put some monitoring on it or

00:27:14,120 --> 00:27:17,450
something similar

00:27:19,710 --> 00:27:25,530
yes I I thought I would mention this

00:27:21,900 --> 00:27:27,300
Laura is shaking her head yes the random

00:27:25,530 --> 00:27:28,250
kernel issue was one that we ran into

00:27:27,300 --> 00:27:31,590
you

00:27:28,250 --> 00:27:34,200
it was a are 64 images were not

00:27:31,590 --> 00:27:37,710
composing and so we're like why is that

00:27:34,200 --> 00:27:39,870
and so I launched one off a test one and

00:27:37,710 --> 00:27:41,700
sure enough it just like sat there

00:27:39,870 --> 00:27:44,430
didn't do anything and then timed out

00:27:41,700 --> 00:27:47,190
and so then I looked on the console and

00:27:44,430 --> 00:27:48,990
it got to just you know partway through

00:27:47,190 --> 00:27:51,480
the boot and then just sort of sat there

00:27:48,990 --> 00:27:53,910
and then Patrick looked at it even

00:27:51,480 --> 00:27:56,870
further and he found that it was yeah

00:27:53,910 --> 00:28:01,020
the the way that the kernel is using

00:27:56,870 --> 00:28:07,560
well it was a confluence of things good

00:28:01,020 --> 00:28:10,860
new TLS I think it was using Lib G crypt

00:28:07,560 --> 00:28:13,920
that's right that's right so yeah it's a

00:28:10,860 --> 00:28:16,230
confluence of a bunch of things Lib

00:28:13,920 --> 00:28:18,270
decrypt using Phipps so it needed

00:28:16,230 --> 00:28:20,490
randomness and the kernel changing the

00:28:18,270 --> 00:28:22,500
way randomness is gathered initially

00:28:20,490 --> 00:28:25,050
well on boot

00:28:22,500 --> 00:28:28,280
I don't know how if that actually ever

00:28:25,050 --> 00:28:28,280
got solved upstream but

00:28:32,490 --> 00:28:38,310
okay yeah the the issue has been solved

00:28:35,110 --> 00:28:41,320
in Lib G crypt but again it was a

00:28:38,310 --> 00:28:42,520
strange one to try and debug because it

00:28:41,320 --> 00:28:48,610
didn't seem like anything was going

00:28:42,520 --> 00:28:51,720
wrong it was just timing out another fun

00:28:48,610 --> 00:28:56,200
one that we hit very recently DNF 3.1

00:28:51,720 --> 00:28:59,020
landed in rawhide and live media images

00:28:56,200 --> 00:29:01,480
stopped composing because they said

00:28:59,020 --> 00:29:04,480
package whatever is blocked and for a

00:29:01,480 --> 00:29:06,100
whole bunch of packages and this this

00:29:04,480 --> 00:29:08,980
gets back to the fact that a lot of this

00:29:06,100 --> 00:29:12,010
stuff that we do has no spec right I

00:29:08,980 --> 00:29:15,550
mean if you ask somebody what is a well

00:29:12,010 --> 00:29:16,990
formatted comps file what is the you

00:29:15,550 --> 00:29:19,420
know what is the spec for this well

00:29:16,990 --> 00:29:22,060
there isn't really one and what is a

00:29:19,420 --> 00:29:23,380
well formatted kickstart file well we

00:29:22,060 --> 00:29:25,630
don't know the behavior of some of this

00:29:23,380 --> 00:29:29,610
stuff so what had happened here is that

00:29:25,630 --> 00:29:32,050
we have a bass live CD package package

00:29:29,610 --> 00:29:34,510
kickstart file that includes the

00:29:32,050 --> 00:29:37,660
standard group and at some point the

00:29:34,510 --> 00:29:38,740
workstation folks to reduce size decided

00:29:37,660 --> 00:29:42,130
they did not want to include the

00:29:38,740 --> 00:29:47,140
standard group so they did - at standard

00:29:42,130 --> 00:29:49,090
well old DNF and yum treated this as you

00:29:47,140 --> 00:29:52,630
wanted standard now you don't want

00:29:49,090 --> 00:29:54,670
standard that cancels out DNF 3.1 made

00:29:52,630 --> 00:29:56,680
the assumption that you said you wanted

00:29:54,670 --> 00:29:58,660
standard you said you don't want any of

00:29:56,680 --> 00:30:00,700
the packages in standard we're going to

00:29:58,660 --> 00:30:02,320
block those and not let you install any

00:30:00,700 --> 00:30:05,530
of those packages that are in that group

00:30:02,320 --> 00:30:08,110
and unfortunately that has d-bus and

00:30:05,530 --> 00:30:09,310
core utils and things like that so it

00:30:08,110 --> 00:30:11,350
did not work

00:30:09,310 --> 00:30:14,080
the DNF folks fix this up pretty quickly

00:30:11,350 --> 00:30:17,050
but this is a case where it's the

00:30:14,080 --> 00:30:19,360
problem isn't necessarily that they you

00:30:17,050 --> 00:30:21,520
know change the behavior it's that we

00:30:19,360 --> 00:30:23,940
don't define some of our inputs very

00:30:21,520 --> 00:30:23,940
well at all

00:30:27,110 --> 00:30:34,280
so the we did get a rawhide composed

00:30:29,780 --> 00:30:36,140
today I thought I'd share the last four

00:30:34,280 --> 00:30:37,780
or five things that have been preventing

00:30:36,140 --> 00:30:41,060
it from working the last few weeks

00:30:37,780 --> 00:30:44,320
first we ran into a grub to relocation

00:30:41,060 --> 00:30:47,780
to looking toolchain issue on arm where

00:30:44,320 --> 00:30:50,990
it was doing something funny to the grub

00:30:47,780 --> 00:30:54,110
to binary and messing it up essentially

00:30:50,990 --> 00:30:56,450
and Peter fixed that pretty quickly only

00:30:54,110 --> 00:31:00,200
to run into file conflicts between two

00:30:56,450 --> 00:31:02,930
of the grub to sub packages so he fixed

00:31:00,200 --> 00:31:05,780
that and then the next compose after

00:31:02,930 --> 00:31:11,000
that was one of these uncoordinated

00:31:05,780 --> 00:31:12,770
changes issues man pages got our van

00:31:11,000 --> 00:31:16,010
pages used to carry a man page for the

00:31:12,770 --> 00:31:18,170
time command but now the time package

00:31:16,010 --> 00:31:20,480
wanted to carry that man page so they

00:31:18,170 --> 00:31:23,810
both had it and it was a conflict and

00:31:20,480 --> 00:31:27,200
nothing installed so again that got

00:31:23,810 --> 00:31:30,410
fixed quickly but you have to realize

00:31:27,200 --> 00:31:32,030
that between all these issues you fix

00:31:30,410 --> 00:31:33,500
the one issue and then you start a

00:31:32,030 --> 00:31:36,080
compose and it's eight and a half nine

00:31:33,500 --> 00:31:39,530
at ten hours later before you can tell

00:31:36,080 --> 00:31:41,270
that the next thing that is broken so

00:31:39,530 --> 00:31:41,920
that makes things take a really long

00:31:41,270 --> 00:31:44,390
time

00:31:41,920 --> 00:31:47,410
the latest thing which was just fixed

00:31:44,390 --> 00:31:52,910
yesterday yesterday by Adam Williamson

00:31:47,410 --> 00:31:56,990
DNF 3.1 changed again defining things in

00:31:52,910 --> 00:32:01,870
the DNF comp or yum comp the repo files

00:31:56,990 --> 00:32:01,870
we have a failover priority equals

00:32:02,620 --> 00:32:07,520
parameter and Koji was passing this many

00:32:06,410 --> 00:32:11,390
for many years

00:32:07,520 --> 00:32:14,330
I'm sure passing this configuration in

00:32:11,390 --> 00:32:18,620
there with no value so it was failover

00:32:14,330 --> 00:32:21,560
priority equals nothing and DNF was DNF

00:32:18,620 --> 00:32:24,520
previously just ignored it DNF 3.1 said

00:32:21,560 --> 00:32:24,520
trace back

00:32:32,800 --> 00:32:37,870
okay so I thought I'd throw out a whole

00:32:35,890 --> 00:32:39,630
bunch of problems here and if people

00:32:37,870 --> 00:32:42,070
have ideas for these we can certainly

00:32:39,630 --> 00:32:45,820
discuss them and write try and write

00:32:42,070 --> 00:32:48,760
them down and see what we can do so one

00:32:45,820 --> 00:32:50,530
of the problems here is that as I

00:32:48,760 --> 00:32:54,520
mentioned it's the ability to find

00:32:50,530 --> 00:32:57,010
breaking changes and block them so

00:32:54,520 --> 00:32:58,360
there's a proposal for gating that has

00:32:57,010 --> 00:33:01,060
been discussed many times on the

00:32:58,360 --> 00:33:04,380
developed and I actually have a slide on

00:33:01,060 --> 00:33:07,030
that here in a second we'll talk about

00:33:04,380 --> 00:33:08,560
ability to test proposed fixes all the

00:33:07,030 --> 00:33:10,810
times they come in because this would

00:33:08,560 --> 00:33:14,790
help us be able to isolate things like

00:33:10,810 --> 00:33:17,410
that DNF the grub2 relocation issue

00:33:14,790 --> 00:33:19,660
stuff like that and catch it before we

00:33:17,410 --> 00:33:23,380
have to endure eight or ten hours of

00:33:19,660 --> 00:33:27,580
composing the composed times obviously a

00:33:23,380 --> 00:33:30,100
problem for iterating over this stuff

00:33:27,580 --> 00:33:31,810
the signing issues which I mentioned

00:33:30,100 --> 00:33:35,170
earlier we can probably address by

00:33:31,810 --> 00:33:37,600
monitoring and doing a few things and I

00:33:35,170 --> 00:33:39,790
also wanted to add here marketing issues

00:33:37,600 --> 00:33:42,900
because I still hear people saying you

00:33:39,790 --> 00:33:46,300
know raw eyes unusable day-to-day or

00:33:42,900 --> 00:33:47,800
it's bleeding edge or haha you know it

00:33:46,300 --> 00:33:49,900
eats babies or whatnot

00:33:47,800 --> 00:33:52,270
I've been running rawhide on my laptop

00:33:49,900 --> 00:33:56,170
for like six years something like that

00:33:52,270 --> 00:33:57,730
and sure there are problems but I think

00:33:56,170 --> 00:34:01,120
it's vastly better than it used to be

00:33:57,730 --> 00:34:03,190
for a number of reasons for one thing

00:34:01,120 --> 00:34:05,650
broken dependencies don't cause the

00:34:03,190 --> 00:34:08,530
headache that they used to because DNF

00:34:05,650 --> 00:34:10,450
basically will say I'll resolve this oh

00:34:08,530 --> 00:34:13,540
all the stuff is broken I'll just not

00:34:10,450 --> 00:34:16,270
update that so you stick to the working

00:34:13,540 --> 00:34:19,360
thing until that gets unlogged jammed in

00:34:16,270 --> 00:34:21,880
ride I think that we're also getting

00:34:19,360 --> 00:34:23,770
better about catching these things and

00:34:21,880 --> 00:34:26,950
composes instead of letting them get out

00:34:23,770 --> 00:34:28,210
to in user systems all those DNF or grub

00:34:26,950 --> 00:34:30,909
things would have been caught by

00:34:28,210 --> 00:34:34,510
end-users in the mash era and have to be

00:34:30,909 --> 00:34:36,659
fixed by them by people and iterated and

00:34:34,510 --> 00:34:39,659
pushed out again and breaking users

00:34:36,659 --> 00:34:39,659
stuff

00:34:43,620 --> 00:34:48,520
so just real quickly the gating proposal

00:34:46,780 --> 00:34:51,940
you can look up the full thing on the

00:34:48,520 --> 00:34:54,880
devel list basically we want to teach

00:34:51,940 --> 00:34:58,770
Bodi about rawhide and try and make it

00:34:54,880 --> 00:35:01,330
as transparent as we possibly can so

00:34:58,770 --> 00:35:03,610
basically all changes if you do an

00:35:01,330 --> 00:35:06,940
update just a regular one package update

00:35:03,610 --> 00:35:09,340
for no reason or for a version update or

00:35:06,940 --> 00:35:12,070
whatever it would get a Bodi update you

00:35:09,340 --> 00:35:14,340
wouldn't have to worry about this in the

00:35:12,070 --> 00:35:17,020
common case it would get the update and

00:35:14,340 --> 00:35:18,730
tests would run on it and get a +1 and

00:35:17,020 --> 00:35:21,760
go out in the next day just like it does

00:35:18,730 --> 00:35:24,100
today if you have a collection of

00:35:21,760 --> 00:35:28,060
packages that you need to build we would

00:35:24,100 --> 00:35:29,860
teach Bodi about side tags so that would

00:35:28,060 --> 00:35:33,280
add a little bit more overhead but it

00:35:29,860 --> 00:35:36,010
would add a lot more help to our

00:35:33,280 --> 00:35:38,200
composes so Bodie then would get a side

00:35:36,010 --> 00:35:39,760
tag ability so you'd say I need a side

00:35:38,200 --> 00:35:42,160
tag but he would say here's your side

00:35:39,760 --> 00:35:44,020
tag you build your 20 packages or

00:35:42,160 --> 00:35:47,050
whatever it would take them as a

00:35:44,020 --> 00:35:49,870
collection and test them as a collection

00:35:47,050 --> 00:35:53,410
and so if there was a failure on those

00:35:49,870 --> 00:35:55,810
20 packages you could address that

00:35:53,410 --> 00:35:58,270
iterate over it and then get them

00:35:55,810 --> 00:35:59,770
through and so this would help us you

00:35:58,270 --> 00:36:01,810
know if there's a problem with a group

00:35:59,770 --> 00:36:03,580
of packages or whatever we can see what

00:36:01,810 --> 00:36:07,300
that case is we could test that whole

00:36:03,580 --> 00:36:09,160
collection at the same time which would

00:36:07,300 --> 00:36:12,160
be extremely helpful for QA because

00:36:09,160 --> 00:36:14,650
right now things come in at a pace that

00:36:12,160 --> 00:36:18,520
the maintainer is doing and it doesn't

00:36:14,650 --> 00:36:20,830
necessarily you know reflecting on the

00:36:18,520 --> 00:36:23,760
completed state that they want all their

00:36:20,830 --> 00:36:23,760
packages to be in

00:36:31,180 --> 00:36:34,690
actually so the question was how does

00:36:33,040 --> 00:36:38,010
this affect the build route and I

00:36:34,690 --> 00:36:41,350
believe we said that side tags would

00:36:38,010 --> 00:36:43,510
have their own or populate their own so

00:36:41,350 --> 00:36:47,940
you can build against other things in

00:36:43,510 --> 00:36:47,940
that side tag but not in the base

00:36:59,250 --> 00:37:05,310
now so the question was if if compiler

00:37:03,570 --> 00:37:10,320
is rebuilt and you want to use that

00:37:05,310 --> 00:37:12,720
compiler you know that same day so after

00:37:10,320 --> 00:37:15,359
it does the gating and it will be it

00:37:12,720 --> 00:37:17,580
would be tagged into like just f29 so it

00:37:15,359 --> 00:37:20,280
would add to the build route after after

00:37:17,580 --> 00:37:23,840
the temperate went out as rawhide the

00:37:20,280 --> 00:37:23,840
next day if that makes sense right

00:37:24,770 --> 00:37:31,609
exactly it takes however long the CI

00:37:27,090 --> 00:37:31,609
stuff takes to run and approve it

00:37:38,550 --> 00:37:43,980
all right so let's see uh updates merge

00:37:41,490 --> 00:37:45,570
in the pending tag for testing and then

00:37:43,980 --> 00:37:48,390
the tests run on that this would also

00:37:45,570 --> 00:37:54,810
give us another place for feedback for

00:37:48,390 --> 00:37:56,580
users if another thing that we really

00:37:54,810 --> 00:37:59,190
love to have and I believe Mohan has

00:37:56,580 --> 00:38:01,410
been working on this is a quick smoke

00:37:59,190 --> 00:38:03,300
testing composed type of thing this

00:38:01,410 --> 00:38:06,630
would really help us for critical

00:38:03,300 --> 00:38:09,090
packages Colonel anaconda grub Lorax

00:38:06,630 --> 00:38:11,670
stuff that's used in all the images

00:38:09,090 --> 00:38:13,050
because right now we untag something and

00:38:11,670 --> 00:38:14,820
we have to wait twelve you know eight

00:38:13,050 --> 00:38:18,120
ten hours to see if everything works

00:38:14,820 --> 00:38:19,380
it'd be really nice to up front see that

00:38:18,120 --> 00:38:21,420
there's an update to one of these things

00:38:19,380 --> 00:38:22,530
and go okay let's do a test compose oh

00:38:21,420 --> 00:38:25,530
no it doesn't work

00:38:22,530 --> 00:38:28,580
untag it and you know get back to a

00:38:25,530 --> 00:38:31,710
working state until that can be fixed

00:38:28,580 --> 00:38:34,950
also a subset of images for open QA

00:38:31,710 --> 00:38:36,900
would be very useful if we do just the

00:38:34,950 --> 00:38:40,050
the real high profile wants to start

00:38:36,900 --> 00:38:42,720
with workstation live media server DVD

00:38:40,050 --> 00:38:45,930
that kind of stuff open QA can run tests

00:38:42,720 --> 00:38:49,520
on those and and tell us you know if a

00:38:45,930 --> 00:38:49,520
proposed thing is going to work or not

00:38:58,530 --> 00:39:06,210
so more future stuff I put man my smiley

00:39:04,050 --> 00:39:10,230
didn't show up or up there bummer

00:39:06,210 --> 00:39:13,530
I put drop I 686 with a smiley we now

00:39:10,230 --> 00:39:15,810
still continue to make all I six eighty

00:39:13,530 --> 00:39:19,160
six images that we've always made so

00:39:15,810 --> 00:39:22,200
that's like every lab every spin

00:39:19,160 --> 00:39:25,740
workstation server you know that is a

00:39:22,200 --> 00:39:28,140
lot of images and it may be something to

00:39:25,740 --> 00:39:29,700
consider to say you know we're going to

00:39:28,140 --> 00:39:31,860
cut our compose times by a couple of

00:39:29,700 --> 00:39:36,320
hours by just not making all that stuff

00:39:31,860 --> 00:39:36,320
or making less of it Justin

00:39:44,270 --> 00:39:50,100
okay Justin points out that we can talk

00:39:47,520 --> 00:39:52,860
to the AI 686 sig and see if they're

00:39:50,100 --> 00:39:55,140
targeting or care about any subset of

00:39:52,860 --> 00:39:57,810
those specifically and that's a that's a

00:39:55,140 --> 00:40:00,900
real good idea because you know there's

00:39:57,810 --> 00:40:03,000
just so many of these and I'm unsure how

00:40:00,900 --> 00:40:04,590
many people are using them especially

00:40:03,000 --> 00:40:08,130
when you look at things like you know

00:40:04,590 --> 00:40:10,920
the design lab spin you know how many

00:40:08,130 --> 00:40:13,210
people are doing intensive work on

00:40:10,920 --> 00:40:16,389
I six eighty six box

00:40:13,210 --> 00:40:16,389
[Music]

00:40:24,010 --> 00:40:29,170
right right so they're more interested

00:40:26,380 --> 00:40:29,800
in ecstasy or LXDE or you know those

00:40:29,170 --> 00:40:34,030
sort of things

00:40:29,800 --> 00:40:36,250
yep yep that's a good idea try and do

00:40:34,030 --> 00:40:38,800
more in parallel this was already

00:40:36,250 --> 00:40:41,290
discussed quite a bit at the the make

00:40:38,800 --> 00:40:43,290
composes faster talk the other day so I

00:40:41,290 --> 00:40:47,700
encourage you to go look at that

00:40:43,290 --> 00:40:49,869
recording when you get a chance and

00:40:47,700 --> 00:40:53,290
actually we talked about the incremental

00:40:49,869 --> 00:40:56,590
mode also there being able to cache a

00:40:53,290 --> 00:40:58,300
previous compose and use things that

00:40:56,590 --> 00:41:02,970
have not changed from that compose if

00:40:58,300 --> 00:41:02,970
we're wish wishing to do things faster

00:41:05,369 --> 00:41:11,740
so there's always new deliverables

00:41:08,200 --> 00:41:14,530
modules new OS tree new containers all

00:41:11,740 --> 00:41:16,600
kinds of things but rawhide should

00:41:14,530 --> 00:41:19,510
really strive to push the latest working

00:41:16,600 --> 00:41:21,340
versions to users there's a few cases

00:41:19,510 --> 00:41:23,950
where we're not right now like the

00:41:21,340 --> 00:41:28,380
rawhide container is really old at this

00:41:23,950 --> 00:41:32,020
point and hopefully we're fixing that I

00:41:28,380 --> 00:41:35,740
don't think I think oh s tree is all on

00:41:32,020 --> 00:41:40,300
two-week cadence but at one point we had

00:41:35,740 --> 00:41:42,609
an OS tree that was running off of the

00:41:40,300 --> 00:41:44,859
Koji Bill Brut I believe and we may want

00:41:42,609 --> 00:41:45,910
to explore doing something like that at

00:41:44,859 --> 00:41:47,800
a later date

00:41:45,910 --> 00:41:51,880
OS tree lends itself very well to

00:41:47,800 --> 00:41:54,280
testing ride because you can bisect your

00:41:51,880 --> 00:41:56,410
problem you know this is working at this

00:41:54,280 --> 00:41:58,660
point it's not working here all right

00:41:56,410 --> 00:42:04,300
I'm gonna just bisect and see where it

00:41:58,660 --> 00:42:07,810
broke and what what changed so a few

00:42:04,300 --> 00:42:09,580
things for the future new MOC right now

00:42:07,810 --> 00:42:12,070
we're using an older version of MOC in

00:42:09,580 --> 00:42:15,220
all our builders and we need to move up

00:42:12,070 --> 00:42:18,220
to the newest version we need to

00:42:15,220 --> 00:42:21,609
leverage system D and spawn bootstrap

00:42:18,220 --> 00:42:24,850
mode is something we need for Apple

00:42:21,609 --> 00:42:26,800
builds so we need to really start

00:42:24,850 --> 00:42:29,320
working on that especially since there's

00:42:26,800 --> 00:42:32,230
a lot of pressure now with Python 2

00:42:29,320 --> 00:42:35,350
going away next year so we really need

00:42:32,230 --> 00:42:37,549
to move move on and get Python 2 out of

00:42:35,350 --> 00:42:39,980
out of the environment

00:42:37,549 --> 00:42:42,019
we may want to consider allowing

00:42:39,980 --> 00:42:44,410
packages to go backwards in some cases

00:42:42,019 --> 00:42:51,079
this was discussed on a developed

00:42:44,410 --> 00:42:53,690
recently in the past distro sink the DNF

00:42:51,079 --> 00:42:55,910
district sink didn't work that great but

00:42:53,690 --> 00:42:59,359
I've been using it lately for for all my

00:42:55,910 --> 00:43:02,749
updates and it's doing a pretty good job

00:42:59,359 --> 00:43:05,720
but as somebody pointed out on the

00:43:02,749 --> 00:43:08,720
mailing list you kind of want a common

00:43:05,720 --> 00:43:10,369
understanding here a common platform for

00:43:08,720 --> 00:43:11,960
everyone to build on if you're trying to

00:43:10,369 --> 00:43:14,150
integrate your packages and then

00:43:11,960 --> 00:43:16,849
somebody who you depend on is moves

00:43:14,150 --> 00:43:18,289
their package back versions it makes it

00:43:16,849 --> 00:43:21,739
very difficult for you to be able to you

00:43:18,289 --> 00:43:23,599
find that thing usable so I don't know

00:43:21,739 --> 00:43:23,779
we may want to look at that rule right

00:43:23,599 --> 00:43:26,150
now

00:43:23,779 --> 00:43:28,670
vesko there's a fesker rule that you're

00:43:26,150 --> 00:43:30,890
not allowed to go backward in a update

00:43:28,670 --> 00:43:34,220
that's shipped out in rawhide but we may

00:43:30,890 --> 00:43:35,989
want to revisit that we may bring in a

00:43:34,220 --> 00:43:37,910
lot more users with bride containers

00:43:35,989 --> 00:43:41,210
because it's a lot easier way to consume

00:43:37,910 --> 00:43:42,410
rod you just fire up a container and you

00:43:41,210 --> 00:43:46,130
have the environment you have those

00:43:42,410 --> 00:43:49,220
newer packages you can do tests you can

00:43:46,130 --> 00:43:52,089
do anything you could do in a container

00:43:49,220 --> 00:43:56,980
so I think we may get a lot of people

00:43:52,089 --> 00:44:00,650
looking at using it for that reason

00:43:56,980 --> 00:44:02,989
mass bug fixes and spec changes this has

00:44:00,650 --> 00:44:06,559
been something that's kind of up up

00:44:02,989 --> 00:44:08,749
ticked in the the last year or so and I

00:44:06,559 --> 00:44:10,849
think it's probably a very good thing to

00:44:08,749 --> 00:44:13,999
do because it saves people a lot of time

00:44:10,849 --> 00:44:16,539
and it ends up making things better but

00:44:13,999 --> 00:44:16,539
we need to

00:44:21,410 --> 00:44:26,620
we need to look into to the to that and

00:44:24,320 --> 00:44:29,810
making that easier leveraging that

00:44:26,620 --> 00:44:31,550
Python 3 I mentioned we want to move

00:44:29,810 --> 00:44:34,670
everything to Python 3 a lot of things

00:44:31,550 --> 00:44:38,690
are but we need the newer Mach and we

00:44:34,670 --> 00:44:43,400
need koji I think still has a dependency

00:44:38,690 --> 00:44:45,440
somewhere I forget where also there's

00:44:43,400 --> 00:44:47,030
the release ver equals rawhide change

00:44:45,440 --> 00:44:51,260
which was discussed in the develop

00:44:47,030 --> 00:44:53,810
basically this is to allow the Fedora

00:44:51,260 --> 00:44:56,480
release in rawhide to advertise its

00:44:53,810 --> 00:45:00,380
version as rawhide instead of the number

00:44:56,480 --> 00:45:03,770
right now it says 29 if we do this it

00:45:00,380 --> 00:45:05,570
ends up making things like QA and so

00:45:03,770 --> 00:45:08,450
forth a lot easier because they don't

00:45:05,570 --> 00:45:10,880
have to compute what number is rawhide

00:45:08,450 --> 00:45:13,010
right now and that if they want a ride

00:45:10,880 --> 00:45:15,770
something they can just say release for

00:45:13,010 --> 00:45:18,710
rawhide we could make the number still

00:45:15,770 --> 00:45:22,610
work also but I think this will actually

00:45:18,710 --> 00:45:26,900
be a nice win for making it uniform we

00:45:22,610 --> 00:45:29,450
can also drop the fedora repose rawhide

00:45:26,900 --> 00:45:32,750
package because all fedora fedora

00:45:29,450 --> 00:45:35,630
updates or updates testing can all use

00:45:32,750 --> 00:45:38,570
the rawhide name with Mayor Manager and

00:45:35,630 --> 00:45:40,550
it will just all work so that will also

00:45:38,570 --> 00:45:44,240
save things needing to be changed and

00:45:40,550 --> 00:45:46,790
tweaked I mentioned to us tree earlier

00:45:44,240 --> 00:45:49,160
for testing I think that there's a lot

00:45:46,790 --> 00:45:52,400
of ability to leverage os tree for for

00:45:49,160 --> 00:45:54,380
rawhide testing it if we can get the

00:45:52,400 --> 00:45:56,750
composed time of those down enough it

00:45:54,380 --> 00:45:59,720
might be worth having something where we

00:45:56,750 --> 00:46:01,460
compose an OS tree for every package

00:45:59,720 --> 00:46:03,050
that lands in the build route then you

00:46:01,460 --> 00:46:05,630
could bisect actually down to the

00:46:03,050 --> 00:46:10,010
package level what broke some particular

00:46:05,630 --> 00:46:15,500
use case of yours actually close to the

00:46:10,010 --> 00:46:18,080
end how are we doing on time come oh all

00:46:15,500 --> 00:46:21,040
right well questions comments concerns

00:46:18,080 --> 00:46:21,040
yeah

00:47:00,369 --> 00:47:03,059
right

00:47:03,660 --> 00:47:09,420
right so the question is about if if we

00:47:07,740 --> 00:47:11,940
have these periods where there's like a

00:47:09,420 --> 00:47:14,220
week of no rawhides we're not updating

00:47:11,940 --> 00:47:16,289
the package repositories on the mirrors

00:47:14,220 --> 00:47:18,750
and people can't use those packages for

00:47:16,289 --> 00:47:20,520
other builds and other things and yeah

00:47:18,750 --> 00:47:22,859
absolutely and that's I think something

00:47:20,520 --> 00:47:25,829
that we can address with the the gating

00:47:22,859 --> 00:47:28,319
and the seei things basically make it so

00:47:25,829 --> 00:47:34,079
that these composes are not this

00:47:28,319 --> 00:47:36,030
unreliable that's I think that's the

00:47:34,079 --> 00:47:38,400
easiest solution the thing we could do

00:47:36,030 --> 00:47:40,950
is go back to the the mash world where

00:47:38,400 --> 00:47:43,200
we push the trees out even if the images

00:47:40,950 --> 00:47:44,640
don't compose but the problem there is

00:47:43,200 --> 00:47:47,250
that we're just kind of pushing it

00:47:44,640 --> 00:47:53,270
pushing the problem off a little bit it

00:47:47,250 --> 00:47:53,270
isn't actually solving it so yeah

00:48:00,550 --> 00:48:06,250
so the question is what what happens

00:48:02,980 --> 00:48:10,570
with signing rawhide on the branching

00:48:06,250 --> 00:48:13,060
day we talked about that a lot last

00:48:10,570 --> 00:48:15,700
branching I don't know if we came up

00:48:13,060 --> 00:48:18,700
with very many solutions I think we were

00:48:15,700 --> 00:48:22,450
gonna well in the past we have signed it

00:48:18,700 --> 00:48:26,920
with both keys and you know I've done

00:48:22,450 --> 00:48:28,330
that yeah I don't know if we came up

00:48:26,920 --> 00:48:32,410
with a good solution there cuz it

00:48:28,330 --> 00:48:34,150
there's a period of time where there

00:48:32,410 --> 00:48:37,420
they may be both signed but you also

00:48:34,150 --> 00:48:41,140
have to push out the new the new

00:48:37,420 --> 00:48:42,820
signature or the RPM signature file we

00:48:41,140 --> 00:48:44,440
could talk about that some more and see

00:48:42,820 --> 00:48:46,420
if we can come up with a better solution

00:48:44,440 --> 00:48:53,230
but signing them in advance is

00:48:46,420 --> 00:48:57,900
definitely good yes right yes we should

00:48:53,230 --> 00:48:57,900
sign all those now yeah yeah

00:49:15,630 --> 00:49:20,489
huh yeah I'm not sure I seem to remember

00:49:17,789 --> 00:49:23,369
a ticket about that the question was the

00:49:20,489 --> 00:49:25,410
rpm OS tree silver-blue composes in

00:49:23,369 --> 00:49:27,900
rawhide aren't functioning currently I

00:49:25,410 --> 00:49:31,349
saw a ticket on that I don't remember

00:49:27,900 --> 00:49:34,079
what the the problem was he also

00:49:31,349 --> 00:49:36,779
actually just tried out essentially

00:49:34,079 --> 00:49:38,579
silver-blue not too long ago and there

00:49:36,779 --> 00:49:40,890
was a problem our PMS tree couldn't

00:49:38,579 --> 00:49:43,019
layer packages and there were some other

00:49:40,890 --> 00:49:45,180
issues but I think those got solved so I

00:49:43,019 --> 00:49:47,460
don't we'd have to look and see what the

00:49:45,180 --> 00:49:49,200
the problem is that that brings up

00:49:47,460 --> 00:49:52,920
another issue is that when these

00:49:49,200 --> 00:49:54,720
required deliverables fail you know the

00:49:52,920 --> 00:49:55,859
only peer the only people who pay

00:49:54,720 --> 00:49:56,729
attention to them are the people who

00:49:55,859 --> 00:49:58,079
care about them

00:49:56,729 --> 00:50:01,829
you know Braille Inge does not have the

00:49:58,079 --> 00:50:04,319
cycles to care about any of those so if

00:50:01,829 --> 00:50:05,819
something breaks and nobody is actively

00:50:04,319 --> 00:50:07,880
looking at it it can be broken for a

00:50:05,819 --> 00:50:07,880
while

00:50:13,430 --> 00:50:16,180
right

00:50:16,190 --> 00:50:20,329
right so so that brings up the broken

00:50:19,039 --> 00:50:22,339
dependencies report

00:50:20,329 --> 00:50:25,190
there isn't one currently because the

00:50:22,339 --> 00:50:27,289
old one was written in yeah written to

00:50:25,190 --> 00:50:29,920
use yum and did not understand rich

00:50:27,289 --> 00:50:29,920
dependencies

00:50:35,980 --> 00:50:43,540
oh okay I see what you're saying right

00:50:41,230 --> 00:50:45,940
so see the observation was that if we

00:50:43,540 --> 00:50:48,070
pointed out the things that fail in the

00:50:45,940 --> 00:50:49,480
rawhide message people would be more

00:50:48,070 --> 00:50:50,530
likely to notice them and fix them

00:50:49,480 --> 00:50:53,740
that's a good point

00:50:50,530 --> 00:50:57,750
that's that's a very good point other

00:50:53,740 --> 00:50:57,750
questions comments yeah

00:51:00,320 --> 00:51:07,010
it's the question was what is the user

00:51:05,180 --> 00:51:09,920
base and we don't have a real good idea

00:51:07,010 --> 00:51:11,750
it's small but that's one other thing

00:51:09,920 --> 00:51:14,240
the changing the release version to

00:51:11,750 --> 00:51:15,770
rawhide from the number would give us

00:51:14,240 --> 00:51:17,950
because then we could actually look at

00:51:15,770 --> 00:51:21,890
the people who are using rawhide

00:51:17,950 --> 00:51:23,210
specifically because the number gets

00:51:21,890 --> 00:51:26,030
really murky or especially around

00:51:23,210 --> 00:51:28,940
branching time whether somebody's on 29

00:51:26,030 --> 00:51:31,370
or is that rawhide before branching or

00:51:28,940 --> 00:51:33,230
was it ride after branch after branching

00:51:31,370 --> 00:51:34,880
that kind of thing so doing rawhide

00:51:33,230 --> 00:51:37,520
there will actually give us better

00:51:34,880 --> 00:51:40,970
numbers for that but it's it's not large

00:51:37,520 --> 00:51:43,250
right now I think Matthew Miller may

00:51:40,970 --> 00:51:48,430
have some information on that how many

00:51:43,250 --> 00:51:48,430
it was but I'd say thousands at most

00:51:55,790 --> 00:51:58,790
okay

00:52:00,859 --> 00:52:05,359
okay yeah so that the observation was

00:52:03,559 --> 00:52:09,910
there maybe more more users because

00:52:05,359 --> 00:52:09,910
there's more interested in things yeah

00:52:15,589 --> 00:52:23,479
yeah I I file bugs on our PMO's tree and

00:52:19,670 --> 00:52:25,969
POD man because it wasn't working and on

00:52:23,479 --> 00:52:28,729
our PMO's tree you know people were like

00:52:25,969 --> 00:52:31,839
oh what works fine on f28 well I'm not

00:52:28,729 --> 00:52:31,839
on f28 so

00:52:53,229 --> 00:52:59,589
yeah so we actually there used to be

00:52:55,630 --> 00:53:03,640
long ago a blog site called is rawhide

00:52:59,589 --> 00:53:05,650
broken comm and we use that for a little

00:53:03,640 --> 00:53:07,839
while but it's really hard because

00:53:05,650 --> 00:53:10,419
things move so fast so like you know

00:53:07,839 --> 00:53:12,549
somebody will notice a problem and then

00:53:10,419 --> 00:53:15,779
you post about it and then it's fixed

00:53:12,549 --> 00:53:18,969
already or or something like that

00:53:15,779 --> 00:53:21,689
we talked actually last year I think

00:53:18,969 --> 00:53:23,799
about setting up something in Bugzilla a

00:53:21,689 --> 00:53:27,160
whiteboard field or something like that

00:53:23,799 --> 00:53:29,709
where you could say you know rawhide

00:53:27,160 --> 00:53:30,999
important or ride noticeable something

00:53:29,709 --> 00:53:32,410
like that and then you could do a

00:53:30,999 --> 00:53:34,539
Bugzilla search and see if there were

00:53:32,410 --> 00:53:41,400
any new bugs I think that might be

00:53:34,539 --> 00:53:41,400
useful I don't know yeah yeah so

00:53:47,609 --> 00:53:53,190
yeah so the question is where to look

00:53:50,670 --> 00:53:54,950
for broken issues and packages in

00:53:53,190 --> 00:53:56,969
rawhide and yeah IRC is probably

00:53:54,950 --> 00:54:01,559
sometimes if it's really bad it will

00:53:56,969 --> 00:54:08,420
make the mailing list but not always all

00:54:01,559 --> 00:54:08,420
right anything else oh sure

00:54:09,450 --> 00:54:14,460
uh we need to talk to you Randy about

00:54:12,089 --> 00:54:15,869
that I don't think he's in here he has a

00:54:14,460 --> 00:54:17,849
whole bunch of other stuff on his plate

00:54:15,869 --> 00:54:22,500
so I don't know I'm thinking it's

00:54:17,849 --> 00:54:26,339
probably more a f30 type of thing but I

00:54:22,500 --> 00:54:28,050
don't know when he has it planned but we

00:54:26,339 --> 00:54:33,829
really need that stuff to land before we

00:54:28,050 --> 00:54:37,010
can do it in a meaningful way so okay

00:54:33,829 --> 00:54:42,270
okay thank you everybody

00:54:37,010 --> 00:54:42,270

YouTube URL: https://www.youtube.com/watch?v=-3Wqi1IzQ7s


