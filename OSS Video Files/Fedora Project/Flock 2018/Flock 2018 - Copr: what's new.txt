Title: Flock 2018 - Copr: what's new
Publication date: 2018-09-08
Playlist: Flock 2018
Description: 
	Friday, August 10, 2018 
9:00am - 9:50am
@Meissen + Radebeul

Talk: Copr: what's new
Presenters: Michal Novotny

Description: Copr (https://pagure.io/copr/copr) is a community build service which enables users to easily transform their project into an rpm package that other people can then immediately install and use. The ongoing and long-term Copr mission is to make this process as simple as possible so that developers can really just develop and leave all the rest to Copr.

There have been some advances in this direction lately including introduction of make_srpm, rpkg, and custom build methods. There really are lots of ways to build a package in Copr nowadays which all stem from various use-cases that people have.

The main goal of this talk is to present and in some sense compare these newly introduced build methods. Basic setup for automatic push rebuilding will be sketched and additionally, we would like to discuss possibilities for automatic Pull Request rebuilding from Pagure and other Git hosting sites.

Oh, and we finally have a new slick API.

This talk should give attendees a good idea about what Copr is actually good for and how it can help to make a developer's life easier.
Captions: 
	00:00:00,050 --> 00:00:07,620
okay thank you so hello my name is

00:00:04,589 --> 00:00:09,570
Michael nice to meet you and I would

00:00:07,620 --> 00:00:10,260
like to talk to about projects I'm

00:00:09,570 --> 00:00:13,889
working on

00:00:10,260 --> 00:00:18,119
it's called copper and here are some of

00:00:13,889 --> 00:00:20,070
my colleagues so I might invite them in

00:00:18,119 --> 00:00:22,949
the middle of the talk to talk about

00:00:20,070 --> 00:00:25,050
something we all see and particularly I

00:00:22,949 --> 00:00:26,789
would like to mention what's new in a

00:00:25,050 --> 00:00:29,160
copper like what features we have

00:00:26,789 --> 00:00:31,619
recently introduced some features might

00:00:29,160 --> 00:00:35,880
be interesting for you so I hope that

00:00:31,619 --> 00:00:44,280
will be the case maybe out who doesn't

00:00:35,880 --> 00:00:47,340
know Cooper here okay so just to get

00:00:44,280 --> 00:00:51,120
like basic context for this talk I will

00:00:47,340 --> 00:00:53,340
briefly introduce it even though most of

00:00:51,120 --> 00:00:59,399
you probably know something or heard of

00:00:53,340 --> 00:01:02,550
it so copper is an RPN built system it's

00:00:59,399 --> 00:01:05,840
basically a tool that can take your

00:01:02,550 --> 00:01:10,049
source code that you are working on and

00:01:05,840 --> 00:01:12,180
it can make it a young repository it can

00:01:10,049 --> 00:01:14,610
produce young repository from your

00:01:12,180 --> 00:01:17,700
source code so if you are a developer

00:01:14,610 --> 00:01:21,150
you are making making some new cool

00:01:17,700 --> 00:01:25,820
application this is something you might

00:01:21,150 --> 00:01:29,280
you might want to easily get your work

00:01:25,820 --> 00:01:33,150
distributed to your end-users and this

00:01:29,280 --> 00:01:37,729
is basically the main idea to make young

00:01:33,150 --> 00:01:41,009
repositories out of people's source code

00:01:37,729 --> 00:01:43,229
but okay so we have this platform we

00:01:41,009 --> 00:01:45,930
have this tool that is able to do this

00:01:43,229 --> 00:01:48,570
task but what is actually our mission

00:01:45,930 --> 00:01:53,869
what do we want to do with this platform

00:01:48,570 --> 00:01:58,020
where we want to go so it can be

00:01:53,869 --> 00:02:00,810
summarized like this our mission is to

00:01:58,020 --> 00:02:04,409
make this platform these are two

00:02:00,810 --> 00:02:06,240
developers on the platform so our goal

00:02:04,409 --> 00:02:07,619
is to make this platform as stable as

00:02:06,240 --> 00:02:10,110
possible so that people can actually

00:02:07,619 --> 00:02:13,470
rely orient because if you are a

00:02:10,110 --> 00:02:16,850
software developer you want your ante

00:02:13,470 --> 00:02:19,830
to be happy and you want them to always

00:02:16,850 --> 00:02:22,920
get the latest software that you are

00:02:19,830 --> 00:02:27,300
producing because it may contain some

00:02:22,920 --> 00:02:31,020
bug fix and if it is security bug fix or

00:02:27,300 --> 00:02:34,500
some sort of bug fix that's good to get

00:02:31,020 --> 00:02:38,760
to users fast the platform needs to be

00:02:34,500 --> 00:02:41,940
reliable but we also want to make it

00:02:38,760 --> 00:02:45,620
easy to use at the same time ideally

00:02:41,940 --> 00:02:49,800
this middle piece in this diagram and

00:02:45,620 --> 00:02:52,800
this diagram should not be visible to

00:02:49,800 --> 00:02:55,790
users like ideal case would be that you

00:02:52,800 --> 00:02:59,459
you are just editing lines of code and

00:02:55,790 --> 00:03:00,600
somewhere without you maybe even knowing

00:02:59,459 --> 00:03:04,110
our PM's

00:03:00,600 --> 00:03:06,630
are produced that ant users consume that

00:03:04,110 --> 00:03:09,540
and users install and use this is like

00:03:06,630 --> 00:03:13,370
ideas scenario that you don't need to

00:03:09,540 --> 00:03:16,170
setup anything but it's a long way to go

00:03:13,370 --> 00:03:20,100
maybe we won't be able to achieve this

00:03:16,170 --> 00:03:24,480
completely but it's I think good - good

00:03:20,100 --> 00:03:27,300
goal to have in mind and finally we also

00:03:24,480 --> 00:03:29,360
would like to be attractive we would

00:03:27,300 --> 00:03:33,209
like to attract new people to copper

00:03:29,360 --> 00:03:35,730
because copper actually stands for

00:03:33,209 --> 00:03:39,590
community project and we would like to

00:03:35,730 --> 00:03:46,799
make community around our p.m. ecosystem

00:03:39,590 --> 00:03:50,940
bigger and maybe happier so we need to

00:03:46,799 --> 00:03:53,040
make sure that all the possible use

00:03:50,940 --> 00:03:56,220
cases that people might have because

00:03:53,040 --> 00:03:59,850
they are like tons of tons of use cases

00:03:56,220 --> 00:04:03,560
are supported by copper so that they can

00:03:59,850 --> 00:04:06,420
use the novel project and not use

00:04:03,560 --> 00:04:09,330
possibility some other projects that has

00:04:06,420 --> 00:04:12,540
more features or is more stable and so

00:04:09,330 --> 00:04:15,330
on and I would like to also mention that

00:04:12,540 --> 00:04:17,340
by developers I don't mean just upstream

00:04:15,330 --> 00:04:21,299
developers actually we are focusing also

00:04:17,340 --> 00:04:25,950
on federal developers and namely package

00:04:21,299 --> 00:04:28,980
maintainer and this is something I think

00:04:25,950 --> 00:04:33,560
we can bring something into the game

00:04:28,980 --> 00:04:36,240
with this because it's not obvious that

00:04:33,560 --> 00:04:38,580
there can be a system that can support

00:04:36,240 --> 00:04:42,390
both of these groups because use cases

00:04:38,580 --> 00:04:45,180
in these two groups are usually quite a

00:04:42,390 --> 00:04:48,300
bit different the kid maintainer usually

00:04:45,180 --> 00:04:50,580
uses this gate which means a git

00:04:48,300 --> 00:04:53,310
repository with patches spec file and

00:04:50,580 --> 00:04:56,520
turbos where else upstream developers

00:04:53,310 --> 00:05:00,300
usually work with upstream sources with

00:04:56,520 --> 00:05:03,660
a raw source code C files Bui files RB

00:05:00,300 --> 00:05:06,030
files and so on so it's interesting that

00:05:03,660 --> 00:05:12,360
Cooper actual aims to support both of

00:05:06,030 --> 00:05:14,850
these groups so I mentioned that we

00:05:12,360 --> 00:05:19,620
would like to be attractive to new new

00:05:14,850 --> 00:05:22,440
users to step back a little bit and for

00:05:19,620 --> 00:05:26,760
that we have introduced some new both

00:05:22,440 --> 00:05:29,130
methods into Cooper traditionally and it

00:05:26,760 --> 00:05:31,590
is even nowadays the most used method is

00:05:29,130 --> 00:05:34,050
uploading as rpms into Cooper you

00:05:31,590 --> 00:05:36,600
basically have some sources checked out

00:05:34,050 --> 00:05:38,550
locally you built an s RPM and you

00:05:36,600 --> 00:05:41,430
upload it to copper to build rpms from

00:05:38,550 --> 00:05:45,510
it this is cool and this is still the

00:05:41,430 --> 00:05:49,920
most used to use case as I can see every

00:05:45,510 --> 00:05:51,450
day in Cooper but it has some

00:05:49,920 --> 00:05:53,700
disadvantages and it doesn't allow

00:05:51,450 --> 00:05:56,190
certain things namely you are

00:05:53,700 --> 00:05:58,980
responsible you need to build your s RPM

00:05:56,190 --> 00:06:02,220
or self some manual work that you need

00:05:58,980 --> 00:06:05,580
to do in addition and you need to upload

00:06:02,220 --> 00:06:09,810
it as RPM can be huge like I don't know

00:06:05,580 --> 00:06:14,270
like 200 megabytes and it also doesn't

00:06:09,810 --> 00:06:17,880
allow continuous integration because

00:06:14,270 --> 00:06:21,300
developers very often they want results

00:06:17,880 --> 00:06:24,030
of their builds get reported back to

00:06:21,300 --> 00:06:27,800
later SourceForge and if you need to

00:06:24,030 --> 00:06:31,680
manually build the s RPM in the middle

00:06:27,800 --> 00:06:34,470
then this use case is not possible so to

00:06:31,680 --> 00:06:38,130
really make sure that we can support s

00:06:34,470 --> 00:06:39,689
wide range of user use cases as possible

00:06:38,130 --> 00:06:43,679
we have

00:06:39,689 --> 00:06:47,279
reduce the following three methods SEM

00:06:43,679 --> 00:06:51,679
make us rpm custom and assume our pkg so

00:06:47,279 --> 00:06:51,679
I would like to introduce them briefly

00:06:53,299 --> 00:06:58,049
actually dolly so there is a cool

00:06:55,349 --> 00:07:01,669
project both upstream cryo family on a

00:06:58,049 --> 00:07:04,110
copper this is a copper and it contains

00:07:01,669 --> 00:07:07,619
packages the latest packages from

00:07:04,110 --> 00:07:10,019
project atomic from their github project

00:07:07,619 --> 00:07:13,019
page so you can check it out and I will

00:07:10,019 --> 00:07:15,300
actually demonstrate D make s RPM and

00:07:13,019 --> 00:07:18,739
cast a method on this project because

00:07:15,300 --> 00:07:20,579
they have really nice setup so I think I

00:07:18,739 --> 00:07:24,029
wouldn't be able to make a better

00:07:20,579 --> 00:07:28,289
example than this and I will start with

00:07:24,029 --> 00:07:31,860
make s RPM so if you want to use this

00:07:28,289 --> 00:07:35,399
method in copper you basically just need

00:07:31,860 --> 00:07:38,449
to specify clone URL this is pointing to

00:07:35,399 --> 00:07:41,509
the github project atomic page you may

00:07:38,449 --> 00:07:44,219
want to specify branch

00:07:41,509 --> 00:07:46,829
we call it commit ish because it can be

00:07:44,219 --> 00:07:51,059
a reference it can be tag back but

00:07:46,829 --> 00:07:53,639
usually there is a branch there and you

00:07:51,059 --> 00:07:56,610
if you want auto auto rebuilds on a new

00:07:53,639 --> 00:08:01,110
pushes you just check order about

00:07:56,610 --> 00:08:07,079
optional and you choose make s RPM as a

00:08:01,110 --> 00:08:09,979
source RPM build method but this is not

00:08:07,079 --> 00:08:13,499
everything you need to do you actually

00:08:09,979 --> 00:08:16,069
also need to provide this make file in

00:08:13,499 --> 00:08:20,039
your git repository that's getting built

00:08:16,069 --> 00:08:24,329
by the makers RPM method and this make

00:08:20,039 --> 00:08:26,339
file is expected to be located at George

00:08:24,329 --> 00:08:29,789
copper hidden directory in there in your

00:08:26,339 --> 00:08:34,709
top-level git repository git directory

00:08:29,789 --> 00:08:38,069
fergie depository and it should contain

00:08:34,709 --> 00:08:42,389
as RPM target and copper if you make new

00:08:38,069 --> 00:08:45,360
new belt with this method could prevail

00:08:42,389 --> 00:08:48,389
clone the remote repository and and will

00:08:45,360 --> 00:08:51,329
invoke this as RPM target in the make

00:08:48,389 --> 00:08:53,040
file so that as RPM is actually produce

00:08:51,329 --> 00:08:56,040
as it would be if you

00:08:53,040 --> 00:08:59,699
did it locally and from that point if

00:08:56,040 --> 00:09:03,660
the s rpm is produced then Cooper can do

00:08:59,699 --> 00:09:07,500
what what it usually does with uploaded

00:09:03,660 --> 00:09:10,350
source rpm for example so the procedure

00:09:07,500 --> 00:09:13,470
is done the same as rpm gets built into

00:09:10,350 --> 00:09:16,709
rpms and create rapport C is invoked to

00:09:13,470 --> 00:09:20,339
actually create the resulting cam

00:09:16,709 --> 00:09:24,660
repository so this is rpm method should

00:09:20,339 --> 00:09:28,920
just produce some source rpm into our

00:09:24,660 --> 00:09:31,889
dealer and we can see that before that

00:09:28,920 --> 00:09:34,380
there is some invocation of repair SH

00:09:31,889 --> 00:09:37,680
script so let's see what it does it's

00:09:34,380 --> 00:09:40,230
quite interesting so you can see that

00:09:37,680 --> 00:09:45,480
actually from this paper as each script

00:09:40,230 --> 00:09:49,019
you can install stuff which um many

00:09:45,480 --> 00:09:50,490
people consider like unexpected you are

00:09:49,019 --> 00:09:53,130
actually you have actually root

00:09:50,490 --> 00:09:57,060
privileges there this is run in a mock

00:09:53,130 --> 00:09:59,399
to root and you have root privileges

00:09:57,060 --> 00:10:03,389
root user with some stripped-down

00:09:59,399 --> 00:10:05,819
capabilities so it's like safe secure

00:10:03,389 --> 00:10:07,380
because we stripped it down like the

00:10:05,819 --> 00:10:10,589
bare minimum that you need to actually

00:10:07,380 --> 00:10:13,170
build something but you can install

00:10:10,589 --> 00:10:15,510
stuff at the same time so here if it is

00:10:13,170 --> 00:10:18,389
not present it will be installed this is

00:10:15,510 --> 00:10:21,480
because somebody wants to also test it

00:10:18,389 --> 00:10:24,329
work locally so he has it already

00:10:21,480 --> 00:10:30,449
installed so he doesn't need to call it

00:10:24,329 --> 00:10:32,880
the NF locally and then there there are

00:10:30,449 --> 00:10:36,569
some substitutions you can notice that

00:10:32,880 --> 00:10:40,019
those substitutions are done on some

00:10:36,569 --> 00:10:45,889
Portman's back in which is presumably a

00:10:40,019 --> 00:10:48,420
spec file template so basically those

00:10:45,889 --> 00:10:50,130
hash commit hash short commit hash

00:10:48,420 --> 00:10:52,769
common name hash commit date are some

00:10:50,130 --> 00:10:55,699
tags that are placed in that spec file

00:10:52,769 --> 00:10:59,370
template and they get substituted here

00:10:55,699 --> 00:11:00,480
from some values that are computed from

00:10:59,370 --> 00:11:04,649
history

00:11:00,480 --> 00:11:07,260
so why anyone would want to do this like

00:11:04,649 --> 00:11:09,720
sub do some weird substitution

00:11:07,260 --> 00:11:14,010
here substitutions that should just

00:11:09,720 --> 00:11:18,890
modify spec file before s rpm the final

00:11:14,010 --> 00:11:22,880
rpm is actually built the reason is that

00:11:18,890 --> 00:11:27,110
with this method with those kind of

00:11:22,880 --> 00:11:30,710
substitutions you can make your rpms

00:11:27,110 --> 00:11:35,250
follow get history of your project

00:11:30,710 --> 00:11:38,880
basically name of the produced rpm will

00:11:35,250 --> 00:11:42,960
contain for example get hash of the

00:11:38,880 --> 00:11:46,610
commit that the source for the source

00:11:42,960 --> 00:11:50,550
rpm comes from the source archive so

00:11:46,610 --> 00:11:53,670
from the name of the final rpms you

00:11:50,550 --> 00:11:57,420
immediately are you are immediately able

00:11:53,670 --> 00:11:59,190
to recognize from which commit this rpm

00:11:57,420 --> 00:12:02,130
comes from and this is very useful for

00:11:59,190 --> 00:12:07,890
debugging because if there is some back

00:12:02,130 --> 00:12:10,680
and the produced rpm you immediately

00:12:07,890 --> 00:12:16,230
know where to jump in through in your

00:12:10,680 --> 00:12:19,170
code base so some substitutions are done

00:12:16,230 --> 00:12:24,450
and then get archived is called to

00:12:19,170 --> 00:12:27,510
actually back the source repository or

00:12:24,450 --> 00:12:32,540
content of the repository into tarball

00:12:27,510 --> 00:12:38,550
and spec and Darbo are then used to

00:12:32,540 --> 00:12:42,990
actually build an RPM so this was make s

00:12:38,550 --> 00:12:46,500
RPM method now custom method just a

00:12:42,990 --> 00:12:48,780
method is actually very similar to make

00:12:46,500 --> 00:12:51,150
s RPM the only difference

00:12:48,780 --> 00:12:55,020
basically is that the script is not

00:12:51,150 --> 00:12:57,060
placed in the remote git repository but

00:12:55,020 --> 00:13:00,140
it is stored directly in copper DB and

00:12:57,060 --> 00:13:04,530
this has some disadvantage history

00:13:00,140 --> 00:13:08,400
because if you are for example a package

00:13:04,530 --> 00:13:11,790
maintainer and you care about upstream

00:13:08,400 --> 00:13:15,660
not breaking your package you are able

00:13:11,790 --> 00:13:19,110
to set up custom package in copper and

00:13:15,660 --> 00:13:22,320
then just ask upstream

00:13:19,110 --> 00:13:25,350
to put web hook and that will invoke

00:13:22,320 --> 00:13:27,630
builds of this package in copper into

00:13:25,350 --> 00:13:30,060
their that book settings in github so

00:13:27,630 --> 00:13:33,360
basically you just need you just ask

00:13:30,060 --> 00:13:36,720
upstream please include me this Web book

00:13:33,360 --> 00:13:38,490
and that's it you take care of all the

00:13:36,720 --> 00:13:42,899
other stuff that's needed to actually

00:13:38,490 --> 00:13:45,029
build working package from the upstream

00:13:42,899 --> 00:13:47,820
sources so you don't need to ask them

00:13:45,029 --> 00:13:50,459
like please put this weird dot copper

00:13:47,820 --> 00:13:53,750
make files and somewhere you just need

00:13:50,459 --> 00:13:59,820
this so that's that's quite nice and

00:13:53,750 --> 00:14:03,750
also it has some extended attributes

00:13:59,820 --> 00:14:07,680
when compared to make SRP end with make

00:14:03,750 --> 00:14:10,860
s RPM you install stuff manually into

00:14:07,680 --> 00:14:12,690
Church but here you can specify you can

00:14:10,860 --> 00:14:15,120
even specify which church it should be

00:14:12,690 --> 00:14:19,380
whether it should be Federer the latest

00:14:15,120 --> 00:14:22,920
Bennett Federer or some or Federer

00:14:19,380 --> 00:14:25,980
height and you can also just put a list

00:14:22,920 --> 00:14:29,220
here which specifies what packages

00:14:25,980 --> 00:14:30,149
should be installed before the RPM is

00:14:29,220 --> 00:14:32,640
actually built

00:14:30,149 --> 00:14:36,060
so what dependencies order to build

00:14:32,640 --> 00:14:39,750
resource RPM and also result directory

00:14:36,060 --> 00:14:41,940
there where the s RPM is expected to be

00:14:39,750 --> 00:14:44,899
put by script where Cooper can find it

00:14:41,940 --> 00:14:48,990
afterwards and take it and build rpms

00:14:44,899 --> 00:14:54,990
from it so custom

00:14:48,990 --> 00:14:58,940
nice method and our pkg RPG G again

00:14:54,990 --> 00:15:02,310
allows you to build source rpms from

00:14:58,940 --> 00:15:06,180
remote get or even as we an apposite

00:15:02,310 --> 00:15:09,149
Aries but it is much easier to set up

00:15:06,180 --> 00:15:12,449
because the only thing that you need for

00:15:09,149 --> 00:15:16,649
make for our pkg to work our pkg method

00:15:12,449 --> 00:15:18,600
is just a spec file or spec file

00:15:16,649 --> 00:15:21,500
template in the remote repository and

00:15:18,600 --> 00:15:26,170
you don't need the script that actually

00:15:21,500 --> 00:15:29,889
notes the resource rpm and even

00:15:26,170 --> 00:15:34,320
as you could see there were the set

00:15:29,889 --> 00:15:36,089
substitutions in the previous script and

00:15:34,320 --> 00:15:40,120
here

00:15:36,089 --> 00:15:44,260
so our PKG has actually a built in

00:15:40,120 --> 00:15:47,500
solution for this it has a library of

00:15:44,260 --> 00:15:50,050
tacks that are supported in spectral

00:15:47,500 --> 00:15:52,899
template that it can recognize for

00:15:50,050 --> 00:15:55,480
example get version which will

00:15:52,899 --> 00:15:58,750
automatically generate a version string

00:15:55,480 --> 00:16:02,350
that contains a number of commits from

00:15:58,750 --> 00:16:05,620
delays this tag and get hash so it will

00:16:02,350 --> 00:16:08,380
do those substitutions for you and you

00:16:05,620 --> 00:16:11,050
can even specify your own macros if you

00:16:08,380 --> 00:16:13,600
want so you could possibly generate

00:16:11,050 --> 00:16:15,550
build dependencies at the source RPM

00:16:13,600 --> 00:16:20,199
world time which is pretty I think

00:16:15,550 --> 00:16:22,630
interesting option and another cool

00:16:20,199 --> 00:16:27,160
thing is that by default it can work

00:16:22,630 --> 00:16:30,120
with upstream repositories unpacked

00:16:27,160 --> 00:16:32,680
sources but it can also work with

00:16:30,120 --> 00:16:36,279
diskette repositories with packets or

00:16:32,680 --> 00:16:41,290
sources and you just specify a clone URL

00:16:36,279 --> 00:16:44,890
and it doesn't care if it is backed or

00:16:41,290 --> 00:16:46,630
unpacked it will produce as RPM no

00:16:44,890 --> 00:16:53,560
matter what the type is and this is

00:16:46,630 --> 00:16:56,260
quite cool that it both inputs are are

00:16:53,560 --> 00:16:59,620
actually supported by our PKG method so

00:16:56,260 --> 00:17:03,910
here are the settings that you can see

00:16:59,620 --> 00:17:06,520
are quite many there is mycommittee

00:17:03,910 --> 00:17:10,689
parameter specified master the branch

00:17:06,520 --> 00:17:13,150
but also subdirectory and spec file the

00:17:10,689 --> 00:17:16,299
name of the spec file and subdirectory

00:17:13,150 --> 00:17:18,490
means where the are PKG command should

00:17:16,299 --> 00:17:21,850
be called

00:17:18,490 --> 00:17:24,130
you actually don't need to specify these

00:17:21,850 --> 00:17:27,429
parameters they are optional if you had

00:17:24,130 --> 00:17:29,320
as flat and get repository where I

00:17:27,429 --> 00:17:33,340
respect file is placed in a top-level

00:17:29,320 --> 00:17:37,840
directory then this is optional because

00:17:33,340 --> 00:17:43,210
our pkg when it produces s RPM will auto

00:17:37,840 --> 00:17:46,090
locate spec file and it can work from

00:17:43,210 --> 00:17:49,660
their own and also it is a tool that you

00:17:46,090 --> 00:17:51,820
can install for example dinner for

00:17:49,660 --> 00:17:55,090
install our PKG from federal repository

00:17:51,820 --> 00:17:57,760
x' and if there is something off we will

00:17:55,090 --> 00:18:01,420
to setup if there's some problem you can

00:17:57,760 --> 00:18:03,940
just debug it locally the previous two

00:18:01,420 --> 00:18:11,140
methods they are a bit difficult to

00:18:03,940 --> 00:18:14,230
reproduce locally ok so we have some new

00:18:11,140 --> 00:18:18,460
methods like some methods that we hope

00:18:14,230 --> 00:18:21,670
will support like wide range of use

00:18:18,460 --> 00:18:24,160
cases but this is not enough to be

00:18:21,670 --> 00:18:26,650
attractive for new comers this is like

00:18:24,160 --> 00:18:30,250
this is cool that we can build in like

00:18:26,650 --> 00:18:33,660
thousand days but this is not really not

00:18:30,250 --> 00:18:36,790
really the thing that developers want

00:18:33,660 --> 00:18:40,840
not the only thing another thing they

00:18:36,790 --> 00:18:43,929
usually want is to get belts or build

00:18:40,840 --> 00:18:48,670
results reported back to their source

00:18:43,929 --> 00:18:51,990
for SourceForge so so for example if

00:18:48,670 --> 00:18:57,280
there is a new poll request coming into

00:18:51,990 --> 00:19:00,820
their project they want to see if the

00:18:57,280 --> 00:19:04,590
changes actually are valid and that the

00:19:00,820 --> 00:19:07,929
project builds with those changes this

00:19:04,590 --> 00:19:12,429
can be very useful because you might

00:19:07,929 --> 00:19:15,429
immediately fix some problems before

00:19:12,429 --> 00:19:17,710
they are actually merged so now we

00:19:15,429 --> 00:19:20,590
focused on this problem this is like

00:19:17,710 --> 00:19:24,490
part of CI of continuous integration

00:19:20,590 --> 00:19:26,440
it's only a part because ideally we

00:19:24,490 --> 00:19:29,080
would like to build we would also like

00:19:26,440 --> 00:19:31,530
to be able to run some tests afterwards

00:19:29,080 --> 00:19:34,290
some integration tests but we just

00:19:31,530 --> 00:19:38,270
focused on this part first and we have

00:19:34,290 --> 00:19:42,870
implemented assimilation with Aguiar

00:19:38,270 --> 00:19:45,780
this might seem like poor because just

00:19:42,870 --> 00:19:48,990
pack your we we can actually also

00:19:45,780 --> 00:19:51,000
there's like github gitlab a bit packet

00:19:48,990 --> 00:19:54,750
and we don't have an integration with

00:19:51,000 --> 00:19:58,140
those sites but it's not that bad

00:19:54,750 --> 00:20:00,350
because Federalists get uses figure

00:19:58,140 --> 00:20:03,570
which means that you can use this

00:20:00,350 --> 00:20:05,780
feature with better Federalist get back

00:20:03,570 --> 00:20:08,160
your I oh of course use this peg your

00:20:05,780 --> 00:20:09,720
upstream first to use this figure and

00:20:08,160 --> 00:20:14,220
then there might be more regular

00:20:09,720 --> 00:20:17,790
instances so any SourceForge that uses

00:20:14,220 --> 00:20:19,350
Packer is supported just by adding this

00:20:17,790 --> 00:20:22,380
feature which is called this is like

00:20:19,350 --> 00:20:26,400
great advantages of pedir that it can be

00:20:22,380 --> 00:20:31,890
reused for also for wide range of use

00:20:26,400 --> 00:20:34,220
cases so I would like to show you a demo

00:20:31,890 --> 00:20:34,220
of this

00:20:36,090 --> 00:20:43,140
I will show it on production Cooper and

00:20:39,540 --> 00:20:50,450
production Federalists yet so I'm

00:20:43,140 --> 00:20:50,450
curious if it will work yes

00:20:52,800 --> 00:21:00,440
and I will actually start from scratch I

00:20:55,830 --> 00:21:00,440
already have created some projects here

00:21:12,380 --> 00:21:17,600
so I have this package on federalists

00:21:15,140 --> 00:21:20,419
kit and I would like to get it altered I

00:21:17,600 --> 00:21:23,330
built when new changes arrived and also

00:21:20,419 --> 00:21:28,280
I would like to get the build results

00:21:23,330 --> 00:21:30,850
reported feedback that back to the pool

00:21:28,280 --> 00:21:30,850
requests

00:21:34,290 --> 00:21:37,970
so I will create the project

00:21:50,510 --> 00:21:57,650
the name can be arbitrary but I chose

00:21:53,480 --> 00:22:01,640
the name that is the same as the package

00:21:57,650 --> 00:22:05,020
name now I will create a package

00:22:01,640 --> 00:22:07,910
definition for the discrete package

00:22:05,020 --> 00:22:10,750
which basically describes how the

00:22:07,910 --> 00:22:10,750
package gets built

00:22:12,840 --> 00:22:15,980
so I will

00:22:16,999 --> 00:22:20,439
just go pedis

00:22:24,610 --> 00:22:34,809
and I will specify package name and I

00:22:31,510 --> 00:22:41,190
can basically okay I need to check this

00:22:34,809 --> 00:22:45,130
and our PKG is okay so i can submit it

00:22:41,190 --> 00:22:48,370
so at this point if a new change arrives

00:22:45,130 --> 00:22:50,919
in the master branch of the package it

00:22:48,370 --> 00:22:53,100
will get author built-in copper in this

00:22:50,919 --> 00:22:56,380
in this particular copper but it will

00:22:53,100 --> 00:23:04,049
not be reported back for that i need to

00:22:56,380 --> 00:23:10,139
go to settings integration step and I

00:23:04,049 --> 00:23:10,139
should enter URL of the project

00:23:12,250 --> 00:23:21,520
and also an API key for the project so

00:23:17,080 --> 00:23:28,289
this is basically API set up so that

00:23:21,520 --> 00:23:28,289
copper knows the credentials

00:23:32,840 --> 00:23:44,160
just a moment please so I will create a

00:23:37,680 --> 00:23:45,960
new key just to flag roller quests so I

00:23:44,160 --> 00:23:48,150
don't mind if you use it for something

00:23:45,960 --> 00:23:49,860
if you try to use it for something else

00:23:48,150 --> 00:23:52,490
or if you've like my floor occurs during

00:23:49,860 --> 00:23:52,490
presentation

00:23:54,590 --> 00:24:03,460
and I will copy the API key here okay

00:24:04,900 --> 00:24:16,080
all right so we should be set up now so

00:24:11,680 --> 00:24:16,080
let's try some requests

00:24:18,890 --> 00:24:22,030
now actually

00:24:26,080 --> 00:24:33,700
I will actually use a disappear across

00:24:29,470 --> 00:24:36,100
that already exists and I will just make

00:24:33,700 --> 00:24:38,050
a new change to the already existing law

00:24:36,100 --> 00:24:41,830
request that will work with a new Pro

00:24:38,050 --> 00:24:44,500
requests that are filed as new as well

00:24:41,830 --> 00:24:47,170
but I can use also this one which

00:24:44,500 --> 00:24:54,940
already exists and a new change is added

00:24:47,170 --> 00:24:58,410
to it so I will do my fork and let's do

00:24:54,940 --> 00:24:58,410
some modification

00:25:02,360 --> 00:25:05,290
just for

00:25:09,260 --> 00:25:12,309
and commit

00:25:16,510 --> 00:25:22,360
okay so let's see if the change is

00:25:19,309 --> 00:25:26,169
visible and in the in the pull request

00:25:22,360 --> 00:25:26,169
of the main repo

00:25:33,100 --> 00:25:41,580
okay so it's here so let's see if there

00:25:37,120 --> 00:25:41,580
is something happening in this copper

00:25:43,830 --> 00:25:51,630
yeah maybe yeah I didn't notice so it's

00:25:46,770 --> 00:25:57,480
here it's building importing haze here

00:25:51,630 --> 00:26:02,220
you can see the forked repo the origin

00:25:57,480 --> 00:26:05,730
people for the build and the reference

00:26:02,220 --> 00:26:10,140
on the hash of the get comment gets that

00:26:05,730 --> 00:26:12,570
Cal and that is getting built and it's

00:26:10,140 --> 00:26:15,420
cool that from here I can easily get

00:26:12,570 --> 00:26:22,400
back to the pull request so you have

00:26:15,420 --> 00:26:25,830
nice linking between those two things so

00:26:22,400 --> 00:26:29,370
Cooper build is here also simply see I

00:26:25,830 --> 00:26:32,100
got triggered and from this link I can

00:26:29,370 --> 00:26:37,230
get back to the build so it's nice that

00:26:32,100 --> 00:26:41,330
you can jump between those two and also

00:26:37,230 --> 00:26:44,520
directory thing here this is actually

00:26:41,330 --> 00:26:48,000
something that I can use to enable build

00:26:44,520 --> 00:26:49,830
from this pool request and install

00:26:48,000 --> 00:26:58,170
packages from this pluralist and test

00:26:49,830 --> 00:27:00,590
them locally so I can invoke this

00:26:58,170 --> 00:27:00,590
command

00:27:01,900 --> 00:27:08,980
and I think it's PR - maybe I'm not

00:27:05,800 --> 00:27:11,430
correct and put PR stands for pull

00:27:08,980 --> 00:27:11,430
requests

00:27:15,490 --> 00:27:19,649
okay so it doesn't exist

00:27:28,740 --> 00:27:32,340
monomakh oh okay

00:27:33,860 --> 00:27:39,289
all right so I have it enabled and that

00:27:36,799 --> 00:27:43,789
means I can install packages from this

00:27:39,289 --> 00:27:47,120
breakfast so I so ideally I would like

00:27:43,789 --> 00:27:50,570
to do this in my normal work in a

00:27:47,120 --> 00:27:53,779
container for example because it depends

00:27:50,570 --> 00:27:56,210
how you dressed and that will request so

00:27:53,779 --> 00:28:00,620
you might want to do this in a container

00:27:56,210 --> 00:28:05,149
actually so I will just have a look what

00:28:00,620 --> 00:28:10,130
the cages are there by using the network

00:28:05,149 --> 00:28:13,210
where plug in so they have this new cute

00:28:10,130 --> 00:28:13,210
nice switch

00:28:21,830 --> 00:28:24,830
okay

00:28:27,270 --> 00:28:31,429
well not sure what's going on but

00:28:35,900 --> 00:28:39,790
I think the packages should be there

00:28:46,900 --> 00:28:51,400
well not sure what

00:29:08,670 --> 00:29:16,320
but I probably made some mistake but you

00:29:12,990 --> 00:29:18,810
can see that the modular macros pr2 and

00:29:16,320 --> 00:29:23,270
repository got synchronized successfully

00:29:18,810 --> 00:29:23,270
and that I can install stuff from there

00:29:25,730 --> 00:29:37,320
all right so this is something that you

00:29:31,470 --> 00:29:41,700
can use for developing and - we have

00:29:37,320 --> 00:29:43,710
also introduced new API finally after

00:29:41,700 --> 00:29:46,770
many years and I would like to introduce

00:29:43,710 --> 00:29:53,460
Jakob here and he'll tell you more about

00:29:46,770 --> 00:29:58,230
this hello everyone

00:29:53,460 --> 00:30:00,150
can you hear me okay nice so in the

00:29:58,230 --> 00:30:05,400
following five minutes I'm going to talk

00:30:00,150 --> 00:30:08,430
about doing new API I bet that the first

00:30:05,400 --> 00:30:11,550
thought that comes to your head is why

00:30:08,430 --> 00:30:16,410
why do we need another API version

00:30:11,550 --> 00:30:20,460
they're already two of them well none of

00:30:16,410 --> 00:30:24,330
the none of them is complete they both

00:30:20,460 --> 00:30:33,480
provide some features but also like some

00:30:24,330 --> 00:30:38,310
features and we could possibly pick one

00:30:33,480 --> 00:30:44,130
of them and finish it but it's not that

00:30:38,310 --> 00:30:47,010
easy there are several issues that is

00:30:44,130 --> 00:30:50,090
not possible to solve without breaking a

00:30:47,010 --> 00:30:52,560
backward compatibility a lot so we

00:30:50,090 --> 00:30:56,060
decided that it would be probably better

00:30:52,560 --> 00:30:59,160
to just create a new API version and

00:30:56,060 --> 00:31:03,450
give you enough time to learn it and

00:30:59,160 --> 00:31:09,270
migrate to it so

00:31:03,450 --> 00:31:12,300
what did we wanted to achieve well the

00:31:09,270 --> 00:31:15,390
first API version is here for years we

00:31:12,300 --> 00:31:20,520
use seem to like it we really like using

00:31:15,390 --> 00:31:25,710
it so we wanted to take a good things

00:31:20,520 --> 00:31:28,880
that are in the first API version and do

00:31:25,710 --> 00:31:31,890
the things that don't work differently

00:31:28,880 --> 00:31:36,570
mainly we wanted to have Jason

00:31:31,890 --> 00:31:42,150
everywhere for both get requests but

00:31:36,570 --> 00:31:47,850
also post requests so it will allow us

00:31:42,150 --> 00:31:52,410
to easily fix many many data type issues

00:31:47,850 --> 00:31:56,310
that the first API version had there

00:31:52,410 --> 00:32:02,310
were a lot of another goals but I just

00:31:56,310 --> 00:32:04,320
want to show you a demo so I apologize I

00:32:02,310 --> 00:32:06,300
don't have a live demo because I don't

00:32:04,320 --> 00:32:09,240
like to live my life as dangerously as

00:32:06,300 --> 00:32:15,090
Macaulay er but it will be awesome I

00:32:09,240 --> 00:32:18,210
promise ok nice here we have a terminal

00:32:15,090 --> 00:32:23,520
window with ipython in it and we'll try

00:32:18,210 --> 00:32:29,480
to type some commands so first we need

00:32:23,520 --> 00:32:34,500
to import a version 3 client bam and

00:32:29,480 --> 00:32:42,050
create a client object from it we will

00:32:34,500 --> 00:32:44,980
use default dot config slash copper

00:32:42,050 --> 00:32:49,720
configuration

00:32:44,980 --> 00:32:52,690
and let's for example try to create a

00:32:49,720 --> 00:32:55,269
new project so we define some choose

00:32:52,690 --> 00:32:58,450
variable not important and we will

00:32:55,269 --> 00:33:05,519
create a project it will be called flock

00:32:58,450 --> 00:33:09,039
and it will be owned by corporate group

00:33:05,519 --> 00:33:13,330
now here now we have a project created

00:33:09,039 --> 00:33:17,909
and the result is stored in project

00:33:13,330 --> 00:33:22,360
variable what do we know about it

00:33:17,909 --> 00:33:24,580
it has attributes and it has more

00:33:22,360 --> 00:33:28,409
attributes and it has many many more

00:33:24,580 --> 00:33:28,409
attributes try it and see

00:33:28,500 --> 00:33:38,519
so what can we do next let's try for

00:33:32,500 --> 00:33:41,830
example submit some build here we have

00:33:38,519 --> 00:33:44,260
source RPM package for testing purposes

00:33:41,830 --> 00:33:50,260
and we'll try to submit it to our

00:33:44,260 --> 00:33:53,429
project so we will use attributes from

00:33:50,260 --> 00:33:55,600
the project variable and so on been

00:33:53,429 --> 00:34:01,330
built is submitted

00:33:55,600 --> 00:34:05,710
and we can see what is going on here it

00:34:01,330 --> 00:34:11,440
has this ID and it is importing right

00:34:05,710 --> 00:34:16,659
now awesome right if you want to know

00:34:11,440 --> 00:34:19,540
more please read about my blog post

00:34:16,659 --> 00:34:22,329
about the new API there are links to the

00:34:19,540 --> 00:34:27,540
documentation and many explanations and

00:34:22,329 --> 00:34:27,540
everything thank you

00:34:32,619 --> 00:34:39,869
ok so we have some new build methods we

00:34:37,539 --> 00:34:42,789
have some kind of continuous integration

00:34:39,869 --> 00:34:48,969
that we want to continue working on and

00:34:42,789 --> 00:34:50,769
the new API so what's next right now

00:34:48,969 --> 00:34:54,129
even right now we are working on a

00:34:50,769 --> 00:34:57,339
support for multiple copper instances in

00:34:54,129 --> 00:35:02,469
DNF copper plugin which is interesting

00:34:57,339 --> 00:35:04,900
because it enables people to deploy

00:35:02,469 --> 00:35:07,989
their own copper instance anywhere in

00:35:04,900 --> 00:35:11,380
the world if they want to and some

00:35:07,989 --> 00:35:14,049
people might find that useful because

00:35:11,380 --> 00:35:17,170
for example if you want to create your

00:35:14,049 --> 00:35:20,410
own distribution copper might be a true

00:35:17,170 --> 00:35:24,670
very suitable for this task we don't

00:35:20,410 --> 00:35:27,759
have composes we have just separate yum

00:35:24,670 --> 00:35:31,180
repositories for each user and each

00:35:27,759 --> 00:35:34,259
project so that part is missing but a

00:35:31,180 --> 00:35:37,239
device this is something that can be

00:35:34,259 --> 00:35:40,930
implemented by a custom solution at the

00:35:37,239 --> 00:35:43,539
moment and actually University of New

00:35:40,930 --> 00:35:48,130
York I started to use copper rpm build

00:35:43,539 --> 00:35:51,999
which is our builder package in in their

00:35:48,130 --> 00:35:53,559
custom solution to make Fedora remix so

00:35:51,999 --> 00:35:56,440
this is quite interesting that it's

00:35:53,559 --> 00:35:59,499
actually getting used like this even

00:35:56,440 --> 00:36:02,769
though it's just copper art being built

00:35:59,499 --> 00:36:04,809
not the whole copper stack but we need

00:36:02,769 --> 00:36:10,239
more work to actually make the whole

00:36:04,809 --> 00:36:13,239
copper stack easily deployable what we

00:36:10,239 --> 00:36:15,940
would also like to do our application

00:36:13,239 --> 00:36:18,940
destitutes automatically run after build

00:36:15,940 --> 00:36:23,310
so that you don't get just builders out

00:36:18,940 --> 00:36:26,810
in a pull request but also test results

00:36:23,310 --> 00:36:31,290
and this is nice because okay you can

00:36:26,810 --> 00:36:33,210
run some tests in check section of a

00:36:31,290 --> 00:36:36,390
spec file but if you want to run

00:36:33,210 --> 00:36:40,050
integration tests that are distinct your

00:36:36,390 --> 00:36:43,110
package in a larger context in a larger

00:36:40,050 --> 00:36:45,930
group of packages that are supposed to

00:36:43,110 --> 00:36:50,340
work together then two unit integration

00:36:45,930 --> 00:36:52,710
tests will just do the whole deployment

00:36:50,340 --> 00:36:54,420
of your packages and test how they work

00:36:52,710 --> 00:36:59,520
together so this is something we would

00:36:54,420 --> 00:37:06,060
like to achieve very soon I would I

00:36:59,520 --> 00:37:11,010
would say and right now we have copper

00:37:06,060 --> 00:37:14,280
disk it but it only serves as a lock as

00:37:11,010 --> 00:37:18,540
a builder lock you can find their builds

00:37:14,280 --> 00:37:21,660
that were built in the past there but

00:37:18,540 --> 00:37:25,790
it's not writable it's read-only people

00:37:21,660 --> 00:37:28,530
want it to interact with it to actually

00:37:25,790 --> 00:37:30,930
make changes there to make some

00:37:28,530 --> 00:37:34,650
development there so we would like to

00:37:30,930 --> 00:37:41,060
make this possible and open a copper

00:37:34,650 --> 00:37:44,060
disk gate for public writing we are also

00:37:41,060 --> 00:37:49,620
considering building container images

00:37:44,060 --> 00:37:52,710
but the implementation of it we are

00:37:49,620 --> 00:37:56,790
unsure of at the moment we are

00:37:52,710 --> 00:37:59,910
considering some options using project

00:37:56,790 --> 00:38:05,660
atomic packages like for example portman

00:37:59,910 --> 00:38:08,940
or or bill duck but this is still in

00:38:05,660 --> 00:38:12,500
consideration I would say and the

00:38:08,940 --> 00:38:16,830
question also is we actually can handle

00:38:12,500 --> 00:38:19,290
the size requirements that are related

00:38:16,830 --> 00:38:21,700
to storing cur larger number number of

00:38:19,290 --> 00:38:26,749
container images

00:38:21,700 --> 00:38:32,319
and that's it so I would like to thank

00:38:26,749 --> 00:38:32,319
you and if you have some questions now

00:38:40,670 --> 00:38:43,390
okay

00:38:55,030 --> 00:39:03,860
yes yes this is something we would like

00:38:58,280 --> 00:39:06,130
to implement and yes thank you

00:39:03,860 --> 00:39:10,810
so the question was if it is possible

00:39:06,130 --> 00:39:14,120
for us to implement automatic tasks

00:39:10,810 --> 00:39:16,760
triggering after builds that users can

00:39:14,120 --> 00:39:20,870
set up some custom tasks but did they

00:39:16,760 --> 00:39:22,550
want to run after a successful build if

00:39:20,870 --> 00:39:25,430
this is possible to implement in copper

00:39:22,550 --> 00:39:27,020
and we planet and yet yes we would like

00:39:25,430 --> 00:39:30,100
we would like to have this feature of

00:39:27,020 --> 00:39:33,260
course and we are thinking about

00:39:30,100 --> 00:39:36,380
integration with tasks or on actually

00:39:33,260 --> 00:39:39,950
there are more possibilities than just

00:39:36,380 --> 00:39:42,680
dead but tasks are on is certainly one

00:39:39,950 --> 00:39:47,020
of the of the options there any other

00:39:42,680 --> 00:39:49,940
question well it actually is possible

00:39:47,020 --> 00:39:53,210
even nowadays because we emit fade

00:39:49,940 --> 00:39:57,130
Masuka notification so you can set up

00:39:53,210 --> 00:40:03,050
firmus watch is the name of the project

00:39:57,130 --> 00:40:07,940
we will allow you to set up your own

00:40:03,050 --> 00:40:10,700
script when some custom fed masago

00:40:07,940 --> 00:40:14,180
arrives so you can just write that on

00:40:10,700 --> 00:40:16,610
copper notification you your script

00:40:14,180 --> 00:40:19,390
should be executed and you can do that

00:40:16,610 --> 00:40:19,390
donation

00:40:21,490 --> 00:40:29,450
all right thanks I didn't realize that

00:40:26,450 --> 00:40:34,690
so this is this is also possible right

00:40:29,450 --> 00:40:34,690
now even another question

00:40:41,780 --> 00:40:46,110
was there any

00:40:44,190 --> 00:40:48,390
under different exid action to set up

00:40:46,110 --> 00:40:53,730
her own operations because I have I

00:40:48,390 --> 00:40:55,980
built this for multiple services for my

00:40:53,730 --> 00:41:00,440
own personal use in the interested with

00:40:55,980 --> 00:41:00,440
the SCM style back-end stuff

00:41:07,599 --> 00:41:15,819
all righty right cool so the question

00:41:13,569 --> 00:41:19,239
was how difficult it is actually to

00:41:15,819 --> 00:41:24,640
deploy and own copper instance is the

00:41:19,239 --> 00:41:27,609
right right now it is quite difficult I

00:41:24,640 --> 00:41:30,099
would say it is difficult to make

00:41:27,609 --> 00:41:33,999
everything the whole stack they are

00:41:30,099 --> 00:41:37,449
deployed and working and we are actually

00:41:33,999 --> 00:41:39,940
thinking about writing ansible play

00:41:37,449 --> 00:41:42,069
books that would be able to do it for

00:41:39,940 --> 00:41:46,029
you and you would basically just provide

00:41:42,069 --> 00:41:49,539
IP s of the target machines that should

00:41:46,029 --> 00:41:52,479
get the deployed and you would run the

00:41:49,539 --> 00:41:54,699
unseeable playbook and the setup would

00:41:52,479 --> 00:41:57,160
just run and you would have your own

00:41:54,699 --> 00:42:01,749
copper instance so this is what we would

00:41:57,160 --> 00:42:05,589
like to have and - if we have it we will

00:42:01,749 --> 00:42:07,479
also use it for our testing suits so

00:42:05,589 --> 00:42:09,759
basically we will instead of their

00:42:07,479 --> 00:42:12,459
machines of virtual machines somewhere

00:42:09,759 --> 00:42:15,099
we will be deploying local containers

00:42:12,459 --> 00:42:19,739
and enter general incur destitute

00:42:15,099 --> 00:42:24,130
again against it so basically this route

00:42:19,739 --> 00:42:26,319
this would make us pretty sure that the

00:42:24,130 --> 00:42:29,529
stack actually works if you run the

00:42:26,319 --> 00:42:32,170
playbooks so right now it is quite

00:42:29,529 --> 00:42:35,739
difficult it is not that difficult to

00:42:32,170 --> 00:42:38,259
take just some parts of our stack our

00:42:35,739 --> 00:42:40,539
infrastructure for example copper began

00:42:38,259 --> 00:42:44,769
and copper rpm built and use them

00:42:40,539 --> 00:42:46,749
without front-end maybe it's even more

00:42:44,769 --> 00:42:50,829
easier to just take copper rpm built as

00:42:46,749 --> 00:42:54,219
the University of New York done that

00:42:50,829 --> 00:42:56,440
have you done that but this is something

00:42:54,219 --> 00:42:58,449
we would like to improve and we would

00:42:56,440 --> 00:43:02,469
like to have those kind of scripts that

00:42:58,449 --> 00:43:05,799
are able no matter what the target

00:43:02,469 --> 00:43:07,150
machine is what kind of machine it is if

00:43:05,799 --> 00:43:10,269
it is a container virtual much

00:43:07,150 --> 00:43:12,369
environmental the PlayBook should be the

00:43:10,269 --> 00:43:30,260
same so it would be cool

00:43:12,369 --> 00:43:33,680
yes right right right at the moment I

00:43:30,260 --> 00:43:35,869
would say we are not exactly thinking

00:43:33,680 --> 00:43:38,780
about this even though we were asked if

00:43:35,869 --> 00:43:41,810
this is possible with already by the

00:43:38,780 --> 00:43:46,160
tiger team from tiger always buy from

00:43:41,810 --> 00:43:49,010
the university of new york but and from

00:43:46,160 --> 00:43:53,030
other places also but or right now we

00:43:49,010 --> 00:43:56,560
are not like really we are focusing just

00:43:53,030 --> 00:44:00,770
on development side of things and quick

00:43:56,560 --> 00:44:04,040
distributions of individual projects and

00:44:00,770 --> 00:44:07,790
- we haven't got that far to think about

00:44:04,040 --> 00:44:09,590
making an ISO from it or something that

00:44:07,790 --> 00:44:12,950
the user can install as a complete set

00:44:09,590 --> 00:44:19,070
of packages does that answer your

00:44:12,950 --> 00:44:24,070
question okay so maybe maybe in the

00:44:19,070 --> 00:44:26,960
future I will add something to that

00:44:24,070 --> 00:44:30,550
actually a lot of people are asking this

00:44:26,960 --> 00:44:36,100
kind of question we can some images

00:44:30,550 --> 00:44:38,960
container images as well in fact even

00:44:36,100 --> 00:44:45,910
some people in Red Hat are pushing for

00:44:38,960 --> 00:44:48,910
that but actually when it comes to the

00:44:45,910 --> 00:44:48,910
domani

00:44:49,040 --> 00:44:58,530
suddenly everyone stop stop their

00:44:53,610 --> 00:45:00,930
interests oh yeah we can do that but it

00:44:58,530 --> 00:45:03,780
needs storage and if you are willing to

00:45:00,930 --> 00:45:06,080
pay for that storage contact me and we

00:45:03,780 --> 00:45:10,800
can do something about it but us us

00:45:06,080 --> 00:45:12,810
until today everything stopped when we

00:45:10,800 --> 00:45:20,610
come to the question of the storage and

00:45:12,810 --> 00:45:36,740
the money alright so we have no money or

00:45:20,610 --> 00:45:36,740
that that's something we could try okay

00:45:38,360 --> 00:45:44,730
current system is not very big I would

00:45:41,250 --> 00:45:47,270
say like we we tend to trim it down as

00:45:44,730 --> 00:45:50,280
much as possible so it consists of

00:45:47,270 --> 00:45:54,060
copper front-end cooper bag and copper

00:45:50,280 --> 00:45:56,580
disk gate and copper RPM belt so and

00:45:54,060 --> 00:45:59,730
Cooper Keegan which is generating key so

00:45:56,580 --> 00:46:02,340
those two five packages they basically

00:45:59,730 --> 00:46:06,060
take care of everything and I would say

00:46:02,340 --> 00:46:08,760
it's pretty small system and we would

00:46:06,060 --> 00:46:14,810
like to keep it that way and even make

00:46:08,760 --> 00:46:14,810
it more minimal but we'll see about it

00:46:16,910 --> 00:46:27,520
all right okay so all right so right now

00:46:22,850 --> 00:46:31,850
I think on Cooper began we have around

00:46:27,520 --> 00:46:34,130
six terabytes of disk space allocated I

00:46:31,850 --> 00:46:37,430
would say and on Cooper disk it is

00:46:34,130 --> 00:46:40,880
around four terabytes which are

00:46:37,430 --> 00:46:42,890
basically the kid repos I should repeat

00:46:40,880 --> 00:46:46,310
the question the question was how big

00:46:42,890 --> 00:46:48,530
the current deployment is what are our

00:46:46,310 --> 00:46:52,970
would our requirements for the

00:46:48,530 --> 00:46:55,730
deployment so it's around 10 terabytes

00:46:52,970 --> 00:46:58,670
in total I would say of disk space and

00:46:55,730 --> 00:47:01,670
who we are using OpenStack as a building

00:46:58,670 --> 00:47:05,150
platform so we are using virtual

00:47:01,670 --> 00:47:10,010
machines there approximately around 30

00:47:05,150 --> 00:47:13,400
to 40 builders usually not every builder

00:47:10,010 --> 00:47:17,170
works usually it's only a subset of them

00:47:13,400 --> 00:47:21,620
working but we also hope that this will

00:47:17,170 --> 00:47:28,880
change is all changing - better - better

00:47:21,620 --> 00:47:32,620
shape engine feature that answer the

00:47:28,880 --> 00:47:32,620
question think any other question

00:47:39,990 --> 00:47:49,119
well we are not rushing that mmm we have

00:47:45,760 --> 00:47:54,220
basically obsoleted API one API to buy

00:47:49,119 --> 00:47:56,710
the new API but it might stay there for

00:47:54,220 --> 00:48:00,250
another a year I would say or even

00:47:56,710 --> 00:48:03,789
longer if people actually use it still

00:48:00,250 --> 00:48:06,760
the new API is I would say much more

00:48:03,789 --> 00:48:10,960
pleasant kind of development than the

00:48:06,760 --> 00:48:16,150
previous ones so we will try to promote

00:48:10,960 --> 00:48:18,460
it but we are not actually rushing to

00:48:16,150 --> 00:48:22,210
the brocade and remove old ones they can

00:48:18,460 --> 00:48:25,569
stay there you know we have not not a

00:48:22,210 --> 00:48:27,400
big issue with it we are we are just

00:48:25,569 --> 00:48:30,430
happy that we have finally a new API to

00:48:27,400 --> 00:48:38,260
this usable actually somebody can use

00:48:30,430 --> 00:48:40,440
and be quite happy about using it all

00:48:38,260 --> 00:48:40,440
right

00:48:46,380 --> 00:48:49,530
all right

00:48:52,800 --> 00:49:01,570
right so okay so the note remark was

00:48:58,210 --> 00:49:04,060
that we should actually state or say

00:49:01,570 --> 00:49:06,550
when we want to remove the previous API

00:49:04,060 --> 00:49:09,760
so we need to talk about it and team and

00:49:06,550 --> 00:49:13,330
decide on under date and we should be

00:49:09,760 --> 00:49:21,040
able to say some definite date and are

00:49:13,330 --> 00:49:24,400
the question okay so that's it thank you

00:49:21,040 --> 00:49:26,790
very much for your attention and did you

00:49:24,400 --> 00:49:26,790

YouTube URL: https://www.youtube.com/watch?v=yhTzOJaqLdk


