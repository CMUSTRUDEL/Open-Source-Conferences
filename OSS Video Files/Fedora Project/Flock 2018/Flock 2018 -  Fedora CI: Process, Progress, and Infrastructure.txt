Title: Flock 2018 -  Fedora CI: Process, Progress, and Infrastructure
Publication date: 2018-09-03
Playlist: Flock 2018
Description: 
	Thursday, August 9, 2018 
11:30am - 12:20pm 
@Hamburg 3+5

Talk: Fedora CI: Process, Progress, and Infrastructure
Presenters: Brian Stinson

Description: In this talk I'd like to highlight the work lots of folks have been doing on the package-level tests, test frameworks, and infrastructure for the Fedora CI Initiative. I'll cover the components, show how the same scheme can be used to test things other than just the distro, and talk about why "ci.centos.org" is showing up so much in Fedora logs/notifications.
Captions: 
	00:00:01,460 --> 00:00:09,300
okay let's go and get started so my name

00:00:06,509 --> 00:00:11,340
is Brian Stinson and I'll talk a little

00:00:09,300 --> 00:00:13,559
bit about why I'm wearing a Santosh

00:00:11,340 --> 00:00:17,190
shirt here at a Fedora conference

00:00:13,559 --> 00:00:20,310
because we've actually done quite a few

00:00:17,190 --> 00:00:23,820
things over the past past year and a

00:00:20,310 --> 00:00:25,260
half or so actually to kind of

00:00:23,820 --> 00:00:27,019
collaborate on a number of different

00:00:25,260 --> 00:00:29,609
things and one of them is the Fedora CI

00:00:27,019 --> 00:00:33,390
project I'm here to talk a little bit

00:00:29,609 --> 00:00:35,520
about some of the the processes that go

00:00:33,390 --> 00:00:37,800
into Fedora CI I'm going to give you a

00:00:35,520 --> 00:00:41,809
little bit of a background and why it

00:00:37,800 --> 00:00:46,200
exists and talk a little bit about the

00:00:41,809 --> 00:00:47,670
infrastructure and the kind of the

00:00:46,200 --> 00:00:51,600
things the hurdles that we had to come

00:00:47,670 --> 00:00:54,989
to get over in order to get a lot of

00:00:51,600 --> 00:00:59,010
this stuff implemented for the Fedora

00:00:54,989 --> 00:01:01,500
process so I think it's probably good to

00:00:59,010 --> 00:01:04,559
give a little bit of background and I'm

00:01:01,500 --> 00:01:08,280
apologize for these slides because they

00:01:04,559 --> 00:01:12,479
are kind of misaligned but that's okay

00:01:08,280 --> 00:01:14,210
so what is Fedora CI it's a number of

00:01:12,479 --> 00:01:18,780
different things

00:01:14,210 --> 00:01:21,240
it's a Fedora objective it's got a

00:01:18,780 --> 00:01:23,189
number of people who are tasked to work

00:01:21,240 --> 00:01:27,450
on it and a number of people who

00:01:23,189 --> 00:01:30,320
volunteer their time to both add tests

00:01:27,450 --> 00:01:34,590
and also to give feedback on some of the

00:01:30,320 --> 00:01:37,770
infrastructure components it has a set

00:01:34,590 --> 00:01:41,509
of infrastructure we do have some a good

00:01:37,770 --> 00:01:47,310
set of hardware behind the project and

00:01:41,509 --> 00:01:48,899
we do have a place that that you can

00:01:47,310 --> 00:01:53,070
actually go through the process and and

00:01:48,899 --> 00:01:56,790
try it out and it's it's a process it's

00:01:53,070 --> 00:02:00,750
targeted at the individual packages that

00:01:56,790 --> 00:02:03,469
go into diskit and the background behind

00:02:00,750 --> 00:02:03,469
this is we

00:02:04,370 --> 00:02:14,400
make check is pretty awesome but it's

00:02:09,660 --> 00:02:16,800
not quite enough to once you actually

00:02:14,400 --> 00:02:19,140
build a package and and get it through

00:02:16,800 --> 00:02:21,630
the system install it on a on a machine

00:02:19,140 --> 00:02:24,390
you kind of want some other things to go

00:02:21,630 --> 00:02:29,100
on after the fact make check is kind of

00:02:24,390 --> 00:02:29,790
a a good process to run in the build

00:02:29,100 --> 00:02:32,280
system

00:02:29,790 --> 00:02:34,230
maybe it's you've shoves some things

00:02:32,280 --> 00:02:37,200
into your spec file in make check so

00:02:34,230 --> 00:02:39,239
that you can kind of get some initial

00:02:37,200 --> 00:02:43,340
feedback on the quality of the package

00:02:39,239 --> 00:02:48,870
but really the build system shouldn't be

00:02:43,340 --> 00:02:50,370
composing and a new thing adding your

00:02:48,870 --> 00:02:51,900
package onto it and doing a whole bunch

00:02:50,370 --> 00:02:56,489
of integration tests because maybe your

00:02:51,900 --> 00:02:58,560
package is is is pretty complex maybe

00:02:56,489 --> 00:03:00,510
you need to set up a number of different

00:02:58,560 --> 00:03:04,260
systems in order to do a full end-to-end

00:03:00,510 --> 00:03:07,320
test or maybe it's just just the fact

00:03:04,260 --> 00:03:10,350
that you want your package bills to

00:03:07,320 --> 00:03:12,660
complete a whole lot faster and you know

00:03:10,350 --> 00:03:17,180
shove the tests on down the road but

00:03:12,660 --> 00:03:22,440
it's a we can talk a little bit about

00:03:17,180 --> 00:03:24,780
the objective we talked about the Fedora

00:03:22,440 --> 00:03:27,720
CI initiative a little bit at flock 2017

00:03:24,780 --> 00:03:31,610
and I think it was made an official

00:03:27,720 --> 00:03:34,340
project of objective shortly after that

00:03:31,610 --> 00:03:36,450
the the background behind this was

00:03:34,340 --> 00:03:38,370
there's a group of people that wanted to

00:03:36,450 --> 00:03:43,140
figure out what continuous integration

00:03:38,370 --> 00:03:47,790
looks like you know based on both pull

00:03:43,140 --> 00:03:50,970
requests to disk it which we we recently

00:03:47,790 --> 00:03:53,790
added in but also to you know what

00:03:50,970 --> 00:03:58,940
happens when you actually push a branch

00:03:53,790 --> 00:04:03,019
to disk it and do an actual build and

00:03:58,940 --> 00:04:08,280
there were a number of challenges that

00:04:03,019 --> 00:04:11,970
that the team wanted to kind of overlook

00:04:08,280 --> 00:04:15,209
at the beginning and so the I'll talk a

00:04:11,970 --> 00:04:16,560
little bit about the history there was a

00:04:15,209 --> 00:04:17,130
group of people that was it was

00:04:16,560 --> 00:04:20,310
interested

00:04:17,130 --> 00:04:23,960
in what it would look like if after a

00:04:20,310 --> 00:04:26,550
commit to disk it happened if we just

00:04:23,960 --> 00:04:29,400
recomposed an artifact including the new

00:04:26,550 --> 00:04:32,280
package what would it look like if we

00:04:29,400 --> 00:04:34,140
built that package recomposed the

00:04:32,280 --> 00:04:37,290
operating system and then did tests on

00:04:34,140 --> 00:04:41,280
the operating system itself and so we

00:04:37,290 --> 00:04:46,320
started with this this really

00:04:41,280 --> 00:04:49,110
self-contained system that you know as

00:04:46,320 --> 00:04:50,760
it was sort of a side process alongside

00:04:49,110 --> 00:04:52,590
the rest of the fedora the the

00:04:50,760 --> 00:04:56,370
traditional Fedora package workflow that

00:04:52,590 --> 00:05:00,270
you're you know no one loved and so what

00:04:56,370 --> 00:05:02,490
the what the pipeline did was very

00:05:00,270 --> 00:05:06,390
focused on the Fedora atomic package set

00:05:02,490 --> 00:05:09,690
because well for a number of reasons but

00:05:06,390 --> 00:05:12,900
one of the nice things that the fedora

00:05:09,690 --> 00:05:16,980
fedora atomic package set gives you is a

00:05:12,900 --> 00:05:20,520
limited self-contained package set that

00:05:16,980 --> 00:05:22,860
can produce an operating system and you

00:05:20,520 --> 00:05:24,090
know you don't have to go through it if

00:05:22,860 --> 00:05:27,600
you imagine you're building the whole

00:05:24,090 --> 00:05:29,880
process from scratch and and kind of

00:05:27,600 --> 00:05:32,070
thinking about things as they go if you

00:05:29,880 --> 00:05:36,030
use the the Fedora atomic package set

00:05:32,070 --> 00:05:37,800
you don't really have to you don't

00:05:36,030 --> 00:05:41,130
really have to reinvent a whole lot of

00:05:37,800 --> 00:05:43,530
things until you do I know that's that's

00:05:41,130 --> 00:05:45,960
kind of confusing but it's really easy

00:05:43,530 --> 00:05:48,330
to actually you know build an RPM

00:05:45,960 --> 00:05:51,740
compose an OS tree and then test that

00:05:48,330 --> 00:05:54,330
that artifact itself and so that's why

00:05:51,740 --> 00:05:57,960
we started with the with the fedora

00:05:54,330 --> 00:06:02,010
atomic package set it's a it was kind of

00:05:57,960 --> 00:06:05,790
a nice way to keep things isolated while

00:06:02,010 --> 00:06:10,860
also giving us a good set of packages

00:06:05,790 --> 00:06:15,870
and tests to to try things out and so

00:06:10,860 --> 00:06:18,510
the the project kind of grew as things

00:06:15,870 --> 00:06:19,770
go because we started with a you know

00:06:18,510 --> 00:06:22,410
kind of a small group of people who are

00:06:19,770 --> 00:06:26,729
looking to re-implement a few processes

00:06:22,410 --> 00:06:29,700
to try some new things related to the

00:06:26,729 --> 00:06:31,710
the build and test process but it turns

00:06:29,700 --> 00:06:34,230
out that we have

00:06:31,710 --> 00:06:43,500
quite a few moving pieces to take care

00:06:34,230 --> 00:06:46,050
of and to kind of echo the the sentiment

00:06:43,500 --> 00:06:49,290
and the keynotes earlier most everything

00:06:46,050 --> 00:06:52,800
in fedora is about people and that's

00:06:49,290 --> 00:06:56,480
very true of the Fedora CI process as

00:06:52,800 --> 00:06:58,710
well there are a number of different

00:06:56,480 --> 00:07:02,490
teams we work on it full-time for their

00:06:58,710 --> 00:07:03,750
job a number of volunteers and a number

00:07:02,490 --> 00:07:06,390
of different groups who all have to

00:07:03,750 --> 00:07:07,860
collaborate together and who've done

00:07:06,390 --> 00:07:09,330
quite over the past couple of years to

00:07:07,860 --> 00:07:14,700
to make this happen

00:07:09,330 --> 00:07:18,360
and so I I tried to kind of capture this

00:07:14,700 --> 00:07:21,780
in in visual form and I am leaving a ton

00:07:18,360 --> 00:07:23,729
of stuff out even to get to this page so

00:07:21,780 --> 00:07:28,790
this is a number of of different teams

00:07:23,729 --> 00:07:32,669
and I kind of grouped everyone by a team

00:07:28,790 --> 00:07:34,790
but it's not necessarily folks who are

00:07:32,669 --> 00:07:36,690
you know working full time these are all

00:07:34,790 --> 00:07:40,229
just different groups are responsible

00:07:36,690 --> 00:07:41,400
for four different pieces of the the

00:07:40,229 --> 00:07:44,250
infrastructure and it doesn't look like

00:07:41,400 --> 00:07:48,350
this slide fits on on the screen here

00:07:44,250 --> 00:07:53,430
but but if you see what you you've got

00:07:48,350 --> 00:07:55,560
the the Fedora CI thing here in the

00:07:53,430 --> 00:07:57,990
middle and this is a number of of

00:07:55,560 --> 00:07:59,880
different folks who who all have a piece

00:07:57,990 --> 00:08:02,370
of infrastructure a piece of software

00:07:59,880 --> 00:08:04,580
that relates to the Fedora CI initiative

00:08:02,370 --> 00:08:10,710
so you've got the QA team down here who

00:08:04,580 --> 00:08:13,260
manages a tasket Ron and and results DB

00:08:10,710 --> 00:08:16,530
which are important for getting results

00:08:13,260 --> 00:08:18,000
in from all the various places you've

00:08:16,530 --> 00:08:22,620
got the fedora infrastructure team who

00:08:18,000 --> 00:08:28,440
manages the the actual systems that you

00:08:22,620 --> 00:08:31,280
interact with Kouji diskit Bodie you've

00:08:28,440 --> 00:08:34,650
got the the factory 2 team who is

00:08:31,280 --> 00:08:37,830
working on some of the the decision

00:08:34,650 --> 00:08:39,690
models and the software that that helps

00:08:37,830 --> 00:08:43,080
you or that helps Bodie make decisions

00:08:39,690 --> 00:08:44,610
about are supposed to help Bodie make

00:08:43,080 --> 00:08:48,150
decisions about gating and things like

00:08:44,610 --> 00:08:49,890
that you've got the the contra CI CD

00:08:48,150 --> 00:08:55,410
team those are the folks who actually

00:08:49,890 --> 00:08:57,170
wrote most of the the Jenkins libraries

00:08:55,410 --> 00:09:00,450
that we'll talk about later that

00:08:57,170 --> 00:09:02,459
operationalize the Fedora CI pipelines

00:09:00,450 --> 00:09:04,800
and I'll show you how that stuff works

00:09:02,459 --> 00:09:05,990
and we'll talk about that here in just a

00:09:04,800 --> 00:09:10,260
minute

00:09:05,990 --> 00:09:18,200
you've got the Fedora CI in the upstream

00:09:10,260 --> 00:09:20,670
first teams those folks are there we go

00:09:18,200 --> 00:09:22,470
those folks are focused on the standard

00:09:20,670 --> 00:09:24,110
test roles that's another thing we'll

00:09:22,470 --> 00:09:27,030
talk about here in a little bit it's the

00:09:24,110 --> 00:09:30,480
wrappers and and libraries that help you

00:09:27,030 --> 00:09:34,650
actually either wrap existing tests or

00:09:30,480 --> 00:09:38,820
write new tests and they're also working

00:09:34,650 --> 00:09:42,300
on actually helping individual packagers

00:09:38,820 --> 00:09:44,730
get existing tests from various places

00:09:42,300 --> 00:09:49,709
put in to disc it on their own packages

00:09:44,730 --> 00:09:52,890
and then there's there's me who is up

00:09:49,709 --> 00:09:58,230
here in the corner I work for the Santos

00:09:52,890 --> 00:10:00,630
infrastructure team when we came when

00:09:58,230 --> 00:10:04,200
the Fedora CI initiative first kind of

00:10:00,630 --> 00:10:07,890
started out we were looking around for a

00:10:04,200 --> 00:10:10,280
set of infrastructure and just kind of a

00:10:07,890 --> 00:10:14,430
base based platform in order to run

00:10:10,280 --> 00:10:16,589
these various experiments and luckily

00:10:14,430 --> 00:10:19,920
enough in the Santos project we'd had

00:10:16,589 --> 00:10:23,040
some extra capacity and we were looking

00:10:19,920 --> 00:10:24,390
to to sort of partner with the Fedora

00:10:23,040 --> 00:10:27,030
project in a number of different ways

00:10:24,390 --> 00:10:30,810
anyways and so the Fedora CI initiative

00:10:27,030 --> 00:10:33,720
was it was kind of important for us as

00:10:30,810 --> 00:10:36,630
an infrastructure team because we could

00:10:33,720 --> 00:10:38,790
you know provide the infrastructure and

00:10:36,630 --> 00:10:41,190
also help help folks collaborate a

00:10:38,790 --> 00:10:45,770
little bit by using our hardware and

00:10:41,190 --> 00:10:45,770
some of our some our existing resources

00:10:46,640 --> 00:10:53,970
so I'll talk a little bit about the

00:10:49,740 --> 00:10:55,620
infrastructure itself because that's

00:10:53,970 --> 00:10:59,820
what I'm interested in that's what I do

00:10:55,620 --> 00:11:05,880
for my day job and sometimes my not day

00:10:59,820 --> 00:11:09,180
job the it was it was important for us

00:11:05,880 --> 00:11:15,390
to during the Fedora CI initiative to

00:11:09,180 --> 00:11:17,400
kind of rethink some of the some of the

00:11:15,390 --> 00:11:20,520
existing patterns that existed in CI

00:11:17,400 --> 00:11:23,810
already so if you think of your upstream

00:11:20,520 --> 00:11:28,500
project that you might be working on a

00:11:23,810 --> 00:11:30,120
lot of people are familiar with the the

00:11:28,500 --> 00:11:32,550
existing ways of running a Jenkins

00:11:30,120 --> 00:11:34,470
master you have a Jenkins master that

00:11:32,550 --> 00:11:36,740
lives on a machine somewhere and you

00:11:34,470 --> 00:11:39,780
create a number of different jobs that

00:11:36,740 --> 00:11:42,870
that point directly to your repos it's a

00:11:39,780 --> 00:11:46,140
lot of stuff to manage just a lot of if

00:11:42,870 --> 00:11:47,790
you don't do it correctly you end up

00:11:46,140 --> 00:11:49,560
with a lot of pointy clicky types of

00:11:47,790 --> 00:11:51,450
things in your Jenkins master enough

00:11:49,560 --> 00:11:53,940
like that we wanted to rethink that a

00:11:51,450 --> 00:11:57,810
little bit and orchestrate some things

00:11:53,940 --> 00:12:00,870
in open shift and so to give you a

00:11:57,810 --> 00:12:04,430
little bit of an idea of you know we're

00:12:00,870 --> 00:12:07,260
still kind of a small scale project here

00:12:04,430 --> 00:12:11,340
but we can support all of the the stuff

00:12:07,260 --> 00:12:14,430
going on in Apps CI dot CentOS org we

00:12:11,340 --> 00:12:17,460
started with open shift origin 3.5 and

00:12:14,430 --> 00:12:20,850
we've upgraded a few times in place over

00:12:17,460 --> 00:12:25,970
the over the past year but we are up to

00:12:20,850 --> 00:12:29,310
about 19 19 nodes bare-metal nodes that

00:12:25,970 --> 00:12:32,610
run various processes across the

00:12:29,310 --> 00:12:34,200
infrastructure all of the the tests that

00:12:32,610 --> 00:12:36,090
go in to disk guitar actually scheduled

00:12:34,200 --> 00:12:38,340
on different pods and OpenShift

00:12:36,090 --> 00:12:41,040
Jenkins actually orchid orchestrates all

00:12:38,340 --> 00:12:46,350
of that for for us in the pipeline and

00:12:41,040 --> 00:12:50,790
openshift has been it's been pretty

00:12:46,350 --> 00:12:52,770
critical in spreading around that that

00:12:50,790 --> 00:12:55,190
test load across you know a number of

00:12:52,770 --> 00:12:58,920
different machines luckily we do have

00:12:55,190 --> 00:13:02,829
some bare metal resources

00:12:58,920 --> 00:13:05,470
dedicated to that so you know you can

00:13:02,829 --> 00:13:07,510
actually spin up vm's and OpenShift if

00:13:05,470 --> 00:13:09,760
you really want and there's a lot of

00:13:07,510 --> 00:13:11,380
things that that you can do when you

00:13:09,760 --> 00:13:13,899
have a bare metal infrastructure like

00:13:11,380 --> 00:13:18,579
this and it was a it was kind of a way

00:13:13,899 --> 00:13:22,120
to let the the folks developing the CI

00:13:18,579 --> 00:13:25,199
pipeline it was a way for them to

00:13:22,120 --> 00:13:27,300
consume infrastructure in a way that

00:13:25,199 --> 00:13:29,769
didn't get in their way

00:13:27,300 --> 00:13:33,970
so they didn't have to come to me every

00:13:29,769 --> 00:13:36,579
time they wanted to try out a new a new

00:13:33,970 --> 00:13:37,779
service or a new a new part of the

00:13:36,579 --> 00:13:39,970
Jenkins libraries they didn't have to

00:13:37,779 --> 00:13:44,350
ask me for vm's they didn't have to

00:13:39,970 --> 00:13:45,820
really need any of that they could it

00:13:44,350 --> 00:13:47,170
was a way to for us to get the

00:13:45,820 --> 00:13:49,630
infrastructure out of the way of the

00:13:47,170 --> 00:13:51,269
development process for them and that

00:13:49,630 --> 00:13:56,250
helped quite a bit

00:13:51,269 --> 00:13:58,779
so I mentioned Jenkins OpenShift

00:13:56,250 --> 00:14:02,110
has a pretty good standard set of

00:13:58,779 --> 00:14:03,880
Jenkins images that are available that

00:14:02,110 --> 00:14:06,760
you can you know deploy in your projects

00:14:03,880 --> 00:14:08,860
and and stuff like that they started the

00:14:06,760 --> 00:14:10,720
the CI pipeline folks started with the

00:14:08,860 --> 00:14:12,459
bass OpenShift Jenkins and then ended up

00:14:10,720 --> 00:14:14,740
customizing it and in a number of

00:14:12,459 --> 00:14:17,920
different ways which is actually a whole

00:14:14,740 --> 00:14:21,850
lot of fun for certain definitions of

00:14:17,920 --> 00:14:24,160
fun if you're interested in in how that

00:14:21,850 --> 00:14:26,050
all works we actually do that for some

00:14:24,160 --> 00:14:29,010
of our other tenants and in openshift as

00:14:26,050 --> 00:14:30,959
well so I'm happy to talk about that

00:14:29,010 --> 00:14:32,949
sort of out in the hallway if you're

00:14:30,959 --> 00:14:36,610
interested in running a whole bunch of

00:14:32,949 --> 00:14:42,310
Jenkins ambassadors because we I think

00:14:36,610 --> 00:14:44,110
we're up to we're up to 20 different

00:14:42,310 --> 00:14:46,480
projects that we've migrated and

00:14:44,110 --> 00:14:50,890
different tenants in the in other parts

00:14:46,480 --> 00:14:52,750
of the Santos CI infrastructure and yeah

00:14:50,890 --> 00:14:55,810
so that's been a kind of a fun thing to

00:14:52,750 --> 00:14:59,800
watch so this is this is kind of what

00:14:55,810 --> 00:15:04,329
the CI pipeline is all about it looks

00:14:59,800 --> 00:15:06,970
pretty simple if you go to this is a

00:15:04,329 --> 00:15:08,649
public URL I don't have it on here but

00:15:06,970 --> 00:15:10,480
there's a another one later on that you

00:15:08,649 --> 00:15:11,760
can look at this is a number of the

00:15:10,480 --> 00:15:13,350
different pipelines

00:15:11,760 --> 00:15:17,780
that are targeted specifically at the

00:15:13,350 --> 00:15:22,760
Fedora CI initiative so you've got these

00:15:17,780 --> 00:15:29,790
this CI pipeline tab right here that is

00:15:22,760 --> 00:15:34,310
it's sort of the initial the initial

00:15:29,790 --> 00:15:37,940
pipelines targeted at the atomic host

00:15:34,310 --> 00:15:41,190
style pipeline I'm going to show you a

00:15:37,940 --> 00:15:42,270
view of of one of these pipelines here

00:15:41,190 --> 00:15:44,970
in a minute and we'll talk through some

00:15:42,270 --> 00:15:46,860
of the individual steps but I did want

00:15:44,970 --> 00:15:50,130
to show this sort of front page here

00:15:46,860 --> 00:15:53,580
some of the interesting things that you

00:15:50,130 --> 00:15:55,500
see we've got the the two the two

00:15:53,580 --> 00:15:59,250
pipelines for F 26 F 27 and were

00:15:55,500 --> 00:16:01,560
targeted at the atomic host this fedora

00:15:59,250 --> 00:16:04,800
all packages pipeline that's something

00:16:01,560 --> 00:16:07,650
that we started earlier this year pretty

00:16:04,800 --> 00:16:09,810
early in the year actually and that's

00:16:07,650 --> 00:16:12,870
probably more applicable to you folks

00:16:09,810 --> 00:16:18,900
here in the room I'll show a little bit

00:16:12,870 --> 00:16:21,240
about that here in a minute but um but

00:16:18,900 --> 00:16:24,240
yeah hittin this front page it's

00:16:21,240 --> 00:16:26,340
completely open I don't think we've

00:16:24,240 --> 00:16:28,500
we've really documented this very well

00:16:26,340 --> 00:16:30,750
about how to actually go in here and

00:16:28,500 --> 00:16:33,420
find things on how to get results we'll

00:16:30,750 --> 00:16:38,670
talk about that as well

00:16:33,420 --> 00:16:41,070
and finally the the the CI pipeline

00:16:38,670 --> 00:16:43,980
objects and libraries I mentioned the

00:16:41,070 --> 00:16:48,050
the contras the ICD team is working on

00:16:43,980 --> 00:16:51,810
that those are all open source up in the

00:16:48,050 --> 00:16:53,040
its the Santos past cig is where these

00:16:51,810 --> 00:16:54,870
these folks are actually doing their

00:16:53,040 --> 00:16:59,420
work if you look so if you look on

00:16:54,870 --> 00:17:02,550
github comm slash CentOS - past cig

00:16:59,420 --> 00:17:05,940
those folks are all of these pipeline

00:17:02,550 --> 00:17:09,209
objects and libraries are available to

00:17:05,940 --> 00:17:11,040
you up upstream there you can you can

00:17:09,209 --> 00:17:14,699
check those out but basically it's a set

00:17:11,040 --> 00:17:18,530
of convenience methods in Jenkins that

00:17:14,699 --> 00:17:22,020
are imported into all the masters that

00:17:18,530 --> 00:17:23,670
that these folks deploy and it's a set

00:17:22,020 --> 00:17:24,419
of convenience methods to go through and

00:17:23,670 --> 00:17:27,299
and run

00:17:24,419 --> 00:17:31,830
parts of the CI pipeline based on the

00:17:27,299 --> 00:17:37,139
tests and things but at the core for the

00:17:31,830 --> 00:17:43,619
interface for for packagers it's really

00:17:37,139 --> 00:17:47,340
just ansible the the mechanism for for

00:17:43,619 --> 00:17:50,489
doing all of this stuff is is pretty

00:17:47,340 --> 00:17:52,590
easy if you you know kind of look at

00:17:50,489 --> 00:17:54,659
things a little bit when you're putting

00:17:52,590 --> 00:17:58,529
your tests and iskut we there's a

00:17:54,659 --> 00:18:00,539
specification for where those go and

00:17:58,529 --> 00:18:03,149
kind of a little bit of boilerplate um

00:18:00,539 --> 00:18:12,330
all that you put in the in the file

00:18:03,149 --> 00:18:14,129
there but i mentioned that the the

00:18:12,330 --> 00:18:16,559
upstream first team and the Fedora CI

00:18:14,129 --> 00:18:21,559
the folks working on Fedora see I have

00:18:16,559 --> 00:18:21,559
put together a set of roles that are

00:18:21,980 --> 00:18:29,009
directly available to you as a packager

00:18:25,789 --> 00:18:31,289
so this is the standard test roles and

00:18:29,009 --> 00:18:33,720
the libraries that go with it they have

00:18:31,289 --> 00:18:35,429
a number of of different methods that

00:18:33,720 --> 00:18:38,629
help make things a whole lot easier for

00:18:35,429 --> 00:18:43,049
example there were a number of test

00:18:38,629 --> 00:18:46,889
suites that were tied to a harness

00:18:43,049 --> 00:18:49,619
called beaker Lib and so when you have a

00:18:46,889 --> 00:18:50,970
number of of packages that are using the

00:18:49,619 --> 00:18:55,129
same test suite it kind of makes sense

00:18:50,970 --> 00:18:57,359
to create a separate role that kind of

00:18:55,129 --> 00:18:59,609
abstracts a whole lot of of

00:18:57,359 --> 00:19:01,859
functionality for the package er it

00:18:59,609 --> 00:19:03,779
makes things a whole lot easier to to

00:19:01,859 --> 00:19:06,259
migrate into the the test infrastructure

00:19:03,779 --> 00:19:08,669
and so they have a number of roles that

00:19:06,259 --> 00:19:10,049
that both you know you can there's a

00:19:08,669 --> 00:19:12,239
role that just runs a script there's a

00:19:10,049 --> 00:19:15,359
role that will run your beaker lab

00:19:12,239 --> 00:19:23,690
harness and I think they I think they

00:19:15,359 --> 00:19:23,690
were looking at avvocato as well but

00:19:23,900 --> 00:19:30,450
we can take a look at that here because

00:19:27,120 --> 00:19:35,010
the Fedora CI initiative is a process

00:19:30,450 --> 00:19:38,640
and it's something that requires a

00:19:35,010 --> 00:19:42,200
little bit of it requires a little bit

00:19:38,640 --> 00:19:45,330
of work from from some folks and I

00:19:42,200 --> 00:19:48,600
promise it's not hard or anything but

00:19:45,330 --> 00:19:54,290
there is a process to it I want to take

00:19:48,600 --> 00:20:03,270
a look at some examples so this is from

00:19:54,290 --> 00:20:06,590
libo NP this is actually a yeah this

00:20:03,270 --> 00:20:10,740
looks alright yeah so this is libo NP

00:20:06,590 --> 00:20:16,470
under the under the hood this is a

00:20:10,740 --> 00:20:18,660
beaker Lib test I believe this right but

00:20:16,470 --> 00:20:20,340
anyway so there's a there's a roll in

00:20:18,660 --> 00:20:23,610
here that you guess is the entire test

00:20:20,340 --> 00:20:26,460
um wall file in libo and peas diskette

00:20:23,610 --> 00:20:28,550
directory so if you look under if you go

00:20:26,460 --> 00:20:32,580
to source Stepford or project org slash

00:20:28,550 --> 00:20:36,330
you know libo and P you'll find this UML

00:20:32,580 --> 00:20:38,760
file I'm gonna show you a kind of a

00:20:36,330 --> 00:20:43,500
basic one now that I just tried out last

00:20:38,760 --> 00:20:45,990
night for one of my packages called env

00:20:43,500 --> 00:20:48,090
I I wanted to do the structure in there

00:20:45,990 --> 00:20:50,340
there's there aren't really any tests

00:20:48,090 --> 00:20:52,620
for nvi because I don't know if you know

00:20:50,340 --> 00:20:57,120
anything about it it's from it's a

00:20:52,620 --> 00:21:01,800
reimplementation of vai from for bsd a

00:20:57,120 --> 00:21:07,190
long time ago so yeah we just this is

00:21:01,800 --> 00:21:09,630
the test suite user been true which is I

00:21:07,190 --> 00:21:13,559
don't know it's it's a good test suite

00:21:09,630 --> 00:21:15,179
for this I guess but but the idea is

00:21:13,559 --> 00:21:17,220
that the yellow for this is actually

00:21:15,179 --> 00:21:19,830
pretty short especially if you use the

00:21:17,220 --> 00:21:23,809
the basic roles you can just run a

00:21:19,830 --> 00:21:27,840
script and if the script is in your

00:21:23,809 --> 00:21:31,410
check the script into your repository

00:21:27,840 --> 00:21:33,950
there or you can deliver it as part of

00:21:31,410 --> 00:21:36,610
your your actual package

00:21:33,950 --> 00:21:39,080
or you can deliver a sub package that

00:21:36,610 --> 00:21:41,660
includes the the test suite that you

00:21:39,080 --> 00:21:43,280
that you're actually run so if n VI

00:21:41,660 --> 00:21:46,340
upstream actually included their test

00:21:43,280 --> 00:21:48,280
suite and a test runner script all I'd

00:21:46,340 --> 00:21:52,370
have to do here is just package that up

00:21:48,280 --> 00:21:55,240
tell it the directory the the working

00:21:52,370 --> 00:22:00,140
directory of the test suite and then

00:21:55,240 --> 00:22:03,559
this run directive right here actually

00:22:00,140 --> 00:22:08,960
tells you what script to run so it's a

00:22:03,559 --> 00:22:11,090
pretty easy - to write that in basic

00:22:08,960 --> 00:22:14,720
shell if you you're just getting started

00:22:11,090 --> 00:22:18,890
out you can actually run the tests on

00:22:14,720 --> 00:22:23,690
your own machine so the standard test

00:22:18,890 --> 00:22:26,750
roles are packaged in rpms it's a number

00:22:23,690 --> 00:22:34,340
of like I said ansible roles but then

00:22:26,750 --> 00:22:36,080
also us an inventory that is basically

00:22:34,340 --> 00:22:39,620
operates on the the package that you

00:22:36,080 --> 00:22:41,720
have installed so in in this on your

00:22:39,620 --> 00:22:44,630
local machine basically as long as you

00:22:41,720 --> 00:22:47,500
have the package installed on there and

00:22:44,630 --> 00:22:50,419
so I would you know DNF install in VI

00:22:47,500 --> 00:22:53,720
and then run this ansible playbook

00:22:50,419 --> 00:22:55,340
script this is the standard inventory

00:22:53,720 --> 00:22:58,940
that says I'm going to use the the local

00:22:55,340 --> 00:23:02,380
machine and not do any sort of of

00:22:58,940 --> 00:23:05,240
provisioning or anything like that and

00:23:02,380 --> 00:23:08,330
then give it my test yeah Mille it's

00:23:05,240 --> 00:23:12,309
going to spin up ansible run user been

00:23:08,330 --> 00:23:14,929
true and then say that everything passed

00:23:12,309 --> 00:23:19,340
there's a couple of different different

00:23:14,929 --> 00:23:23,419
things that you can do the tags let me

00:23:19,340 --> 00:23:26,780
let me actually go back the tags

00:23:23,419 --> 00:23:28,880
directive here talks about different

00:23:26,780 --> 00:23:32,030
scenarios that you can run the tests

00:23:28,880 --> 00:23:35,059
under so the classic the classic case is

00:23:32,030 --> 00:23:39,080
you know just a bare RPM on a system you

00:23:35,059 --> 00:23:40,970
can run it in the in a container context

00:23:39,080 --> 00:23:43,520
and there's a number of of things that

00:23:40,970 --> 00:23:46,510
you can do it based on the tags that you

00:23:43,520 --> 00:23:46,510
give your test

00:23:46,769 --> 00:23:53,940
one of the cool things about the

00:23:55,080 --> 00:24:00,700
standard test roles here is it does

00:23:57,789 --> 00:24:02,649
include other inventories as well so if

00:24:00,700 --> 00:24:05,049
you didn't want to install nvi on your

00:24:02,649 --> 00:24:07,480
local machine there there's actually an

00:24:05,049 --> 00:24:10,749
inventory and a roll in there that will

00:24:07,480 --> 00:24:14,139
spin up the fedora QQ image install your

00:24:10,749 --> 00:24:16,119
package and then run the test there if

00:24:14,139 --> 00:24:17,590
it's you know you don't want to actually

00:24:16,119 --> 00:24:19,840
pollute your machine or something like

00:24:17,590 --> 00:24:23,559
that that's actually what we do in the

00:24:19,840 --> 00:24:25,509
in the CI pipelines themselves I'll show

00:24:23,559 --> 00:24:29,379
that in the the different stages here in

00:24:25,509 --> 00:24:30,759
just a minute so I'm going to talk a

00:24:29,379 --> 00:24:38,259
little bit about what we've done this

00:24:30,759 --> 00:24:41,320
year the fedora atomic CI pipeline that

00:24:38,259 --> 00:24:43,960
was sort of the first step of doing all

00:24:41,320 --> 00:24:45,759
of this building out the individual what

00:24:43,960 --> 00:24:49,929
happens after someone commits to just

00:24:45,759 --> 00:24:53,619
get and there were some pros and cons

00:24:49,929 --> 00:24:55,450
here because on the one hand it was nice

00:24:53,619 --> 00:24:57,070
that we had a limited package set and a

00:24:55,450 --> 00:24:58,539
limited deliverable to work with in the

00:24:57,070 --> 00:25:01,269
beginning because that makes things

00:24:58,539 --> 00:25:03,580
easier to develop but when you have such

00:25:01,269 --> 00:25:08,499
a limited packet doesn't it doesn't

00:25:03,580 --> 00:25:12,220
reflect the entirety of packagers that

00:25:08,499 --> 00:25:14,440
you can address it doesn't it doesn't

00:25:12,220 --> 00:25:19,239
include the entire Fedora package or

00:25:14,440 --> 00:25:21,489
ecosystem and that was kind of that's

00:25:19,239 --> 00:25:24,970
kind of unfortunate the the Fedora

00:25:21,489 --> 00:25:27,070
atomic CI pipeline again this is I could

00:25:24,970 --> 00:25:28,539
have put this I could have put all three

00:25:27,070 --> 00:25:33,820
of these kind of in the pro and con

00:25:28,539 --> 00:25:35,799
section because the the pros are all of

00:25:33,820 --> 00:25:38,019
this actually makes it easier to get

00:25:35,799 --> 00:25:39,489
started with but then we have to we have

00:25:38,019 --> 00:25:41,679
to iterate on that to make it actually

00:25:39,489 --> 00:25:45,039
useful to the general package or

00:25:41,679 --> 00:25:47,289
ecosystem because the Fedora atomic CI

00:25:45,039 --> 00:25:48,970
pipeline does run its own builds it

00:25:47,289 --> 00:25:51,190
doesn't call out to Koji or anything

00:25:48,970 --> 00:25:55,450
like that it it's got a separate process

00:25:51,190 --> 00:25:58,500
for that it runs its own tests composes

00:25:55,450 --> 00:26:00,940
to do its own

00:25:58,500 --> 00:26:05,020
you know tiny little atomic host to do

00:26:00,940 --> 00:26:08,530
tests on and it operates after the merge

00:26:05,020 --> 00:26:15,820
happens so you don't really get results

00:26:08,530 --> 00:26:19,780
on this until after the the the push has

00:26:15,820 --> 00:26:25,510
already happened to disk it so this is

00:26:19,780 --> 00:26:30,000
the original pipeline this is the atomic

00:26:25,510 --> 00:26:34,020
CI pipeline so you can see here this is

00:26:30,000 --> 00:26:36,220
what packages this VIN for fedora 27

00:26:34,020 --> 00:26:38,140
there's a number of different steps here

00:26:36,220 --> 00:26:41,170
and what it actually does is it performs

00:26:38,140 --> 00:26:42,730
an RPM build so let's back up the the

00:26:41,170 --> 00:26:47,590
package maintainer z' for vim have just

00:26:42,730 --> 00:26:51,010
pushed a new commit to disc it on the

00:26:47,590 --> 00:26:53,400
f27 branch and the CI pipeline is gonna

00:26:51,010 --> 00:26:56,530
run an RPM build on that there's a

00:26:53,400 --> 00:27:00,100
limited environment that we actually run

00:26:56,530 --> 00:27:03,490
that in to get the VIN packages out of

00:27:00,100 --> 00:27:06,310
it it injects the output of this RPM

00:27:03,490 --> 00:27:11,380
build process into the OS tree compose

00:27:06,310 --> 00:27:14,320
and will actually compose a new image a

00:27:11,380 --> 00:27:16,330
new these are kind of truncated here a

00:27:14,320 --> 00:27:19,480
little bit it'll it'll compose a new

00:27:16,330 --> 00:27:22,090
image a new cloud image that includes

00:27:19,480 --> 00:27:25,000
the OS tree and then it'll boot and do

00:27:22,090 --> 00:27:28,390
functional tests and then there's some

00:27:25,000 --> 00:27:30,670
some things down the road that that are

00:27:28,390 --> 00:27:34,420
more relevant to the atomic host use

00:27:30,670 --> 00:27:37,270
case and an open shift but you can see

00:27:34,420 --> 00:27:41,140
that the the test pass this is all

00:27:37,270 --> 00:27:45,040
defined in the the repository itself in

00:27:41,140 --> 00:27:48,250
the test directory along with some of

00:27:45,040 --> 00:27:49,030
the integration tests for atomic host

00:27:48,250 --> 00:27:54,490
and OpenShift

00:27:49,030 --> 00:27:56,860
and so we don't like I mentioned this

00:27:54,490 --> 00:28:00,190
doesn't target the entire fedora

00:27:56,860 --> 00:28:02,860
packager ecosystem directly because it's

00:28:00,190 --> 00:28:05,110
a limited package set and a small number

00:28:02,860 --> 00:28:09,220
of maintained errs and things like that

00:28:05,110 --> 00:28:10,360
so we started the fedora all packages

00:28:09,220 --> 00:28:16,630
pipeline

00:28:10,360 --> 00:28:19,660
and this kind of fits some of the some

00:28:16,630 --> 00:28:21,550
of the differences between the atomic CI

00:28:19,660 --> 00:28:24,880
process and what you would expect as a

00:28:21,550 --> 00:28:26,980
normal Fedora packager so the all

00:28:24,880 --> 00:28:28,960
packages pipeline either performs or

00:28:26,980 --> 00:28:31,600
imports Kouji builds that's dependent on

00:28:28,960 --> 00:28:33,400
if it's a merge to disk it or if it's a

00:28:31,600 --> 00:28:36,370
pull request so if it's a pull request

00:28:33,400 --> 00:28:38,620
it'll actually the pipeline will go out

00:28:36,370 --> 00:28:43,240
and actually do a scratch build and then

00:28:38,620 --> 00:28:45,220
use that RPM and in the tests like I

00:28:43,240 --> 00:28:48,100
said there's a similar process same

00:28:45,220 --> 00:28:51,250
pipeline style for pull requests and

00:28:48,100 --> 00:28:53,560
it's available for any package that

00:28:51,250 --> 00:28:57,580
exists in fedora right now it's not a

00:28:53,560 --> 00:29:01,570
limited subset of them the cons right

00:28:57,580 --> 00:29:03,070
now is the the major one is that the

00:29:01,570 --> 00:29:07,470
results aren't being effectively

00:29:03,070 --> 00:29:09,340
communicated back to the packager and

00:29:07,470 --> 00:29:15,160
that's that's for a number of different

00:29:09,340 --> 00:29:17,680
reasons but the results of that you know

00:29:15,160 --> 00:29:21,400
by the fact that resort results aren't

00:29:17,680 --> 00:29:23,500
getting back for existing packages

00:29:21,400 --> 00:29:25,360
basically means that we're running a

00:29:23,500 --> 00:29:29,520
whole lot of tests in the infrastructure

00:29:25,360 --> 00:29:32,260
more than you might think but that

00:29:29,520 --> 00:29:35,440
information is more or less useless

00:29:32,260 --> 00:29:40,830
because it's really hard to find and and

00:29:35,440 --> 00:29:44,620
things like that I will talk about the

00:29:40,830 --> 00:29:48,040
number of tests that are available this

00:29:44,620 --> 00:29:52,450
was taken this morning let's see what is

00:29:48,040 --> 00:29:55,600
this this is base OS so there are 793

00:29:52,450 --> 00:29:58,200
packages in the base OS group in

00:29:55,600 --> 00:30:02,080
diskette there are 81 packages that have

00:29:58,200 --> 00:30:06,810
a test out yeah mole committed directly

00:30:02,080 --> 00:30:06,810
to disk it and then there are another

00:30:07,410 --> 00:30:14,080
116 that have a test yeah mole committed

00:30:10,990 --> 00:30:15,700
to the upstream first repo and I'll talk

00:30:14,080 --> 00:30:17,440
about that a little bit more here in

00:30:15,700 --> 00:30:21,880
just a minute but upstream first is a

00:30:17,440 --> 00:30:24,250
separate place that the the teams are

00:30:21,880 --> 00:30:26,620
using in order to sort of stage tests

00:30:24,250 --> 00:30:33,100
in before they get merged into disk it

00:30:26,620 --> 00:30:39,310
so we've got 81 existing plus 116 and

00:30:33,100 --> 00:30:43,990
then there are 46 packages that are this

00:30:39,310 --> 00:30:48,070
is a pending pull request to disk it at

00:30:43,990 --> 00:30:51,700
the moment and a few more stats this is

00:30:48,070 --> 00:30:55,450
for fedora server there are 518 total

00:30:51,700 --> 00:30:58,390
packages in the group 77 of them have a

00:30:55,450 --> 00:31:02,560
test committed to this kit 108 of them

00:30:58,390 --> 00:31:09,790
are still being worked on in the

00:31:02,560 --> 00:31:16,480
upstream first repositories and yeah so

00:31:09,790 --> 00:31:19,390
that that kind of brings us to one of

00:31:16,480 --> 00:31:22,180
the things that is is missing a little

00:31:19,390 --> 00:31:25,750
bit and one thing that we hope to to

00:31:22,180 --> 00:31:31,750
solve because the outputs of these

00:31:25,750 --> 00:31:33,280
pipelines are they're putting out

00:31:31,750 --> 00:31:35,230
messages to fed message but that's

00:31:33,280 --> 00:31:37,990
really the only place that we're

00:31:35,230 --> 00:31:42,720
notifying at the moment and so you might

00:31:37,990 --> 00:31:45,340
have seen if you're a frequent

00:31:42,720 --> 00:31:46,870
subscriber to messages and data grepper

00:31:45,340 --> 00:31:49,300
or something like that

00:31:46,870 --> 00:31:55,140
as you're seeing a lot of Santos and

00:31:49,300 --> 00:31:55,140
fedora and maybe yeah

00:31:55,179 --> 00:32:11,379
yes yes yes so this is the I don't know

00:32:06,649 --> 00:32:11,379
if they are linked directly from here

00:32:11,559 --> 00:32:16,159
but this yeah this does exist this is

00:32:14,419 --> 00:32:18,289
these are actually populated

00:32:16,159 --> 00:32:20,480
automatically so I don't know if the if

00:32:18,289 --> 00:32:23,749
the tests directory here was actually

00:32:20,480 --> 00:32:26,499
created okay I will fix that and make

00:32:23,749 --> 00:32:31,869
sure that we link to those that's a good

00:32:26,499 --> 00:32:34,879
good observation there so if you look in

00:32:31,869 --> 00:32:39,109
in data gripper right now you'll

00:32:34,879 --> 00:32:41,409
probably see quite a bit of of message

00:32:39,109 --> 00:32:45,139
traffic on the org dot sent a stop CI

00:32:41,409 --> 00:32:46,480
message prefix that's where all of this

00:32:45,139 --> 00:32:48,559
stuff is actually getting delivered

00:32:46,480 --> 00:32:51,259
we've got some work to do

00:32:48,559 --> 00:32:56,239
in order to to tie that back into some

00:32:51,259 --> 00:32:59,389
of the notifications and and and make

00:32:56,239 --> 00:33:00,950
that available to to you but out there

00:32:59,389 --> 00:33:04,999
we are emitting fed messages for each

00:33:00,950 --> 00:33:12,369
each step that you see in in Jenkins

00:33:04,999 --> 00:33:12,369
there and so

00:33:13,510 --> 00:33:25,810
I want to take a minute to just kind of

00:33:20,040 --> 00:33:28,690
work through what's coming up next and

00:33:25,810 --> 00:33:32,290
what the focus should be because the

00:33:28,690 --> 00:33:36,700
packagers are kind of a the important

00:33:32,290 --> 00:33:38,410
part of this process and we've we've

00:33:36,700 --> 00:33:41,380
been able to build all of these pieces

00:33:38,410 --> 00:33:45,070
of the infrastructure the individual

00:33:41,380 --> 00:33:49,930
software the kind of processes to go

00:33:45,070 --> 00:33:53,350
through it but if we don't get more

00:33:49,930 --> 00:33:56,730
tests and the teams that are working on

00:33:53,350 --> 00:34:00,550
the Fedora CI initiative Kent themselves

00:33:56,730 --> 00:34:03,100
put in tests for you know thousands and

00:34:00,550 --> 00:34:05,550
thousands of packages themselves we're

00:34:03,100 --> 00:34:07,750
gonna need help from from packagers and

00:34:05,550 --> 00:34:15,130
so I'm hoping that we can make it a

00:34:07,750 --> 00:34:18,669
little bit easier going forward to to

00:34:15,130 --> 00:34:24,460
get these things committed so let's talk

00:34:18,669 --> 00:34:25,780
about what's next documentation uh it

00:34:24,460 --> 00:34:28,020
was brought to our attention that the

00:34:25,780 --> 00:34:29,800
QuickStart on the wiki needs updated and

00:34:28,020 --> 00:34:35,530
it needs to be displayed more

00:34:29,800 --> 00:34:37,990
prominently the the nvi example that I

00:34:35,530 --> 00:34:39,490
went through last night I think there

00:34:37,990 --> 00:34:41,710
are some simpler things that we could do

00:34:39,490 --> 00:34:44,050
to make it easy for folks to write

00:34:41,710 --> 00:34:46,030
simple shell scripts that test their

00:34:44,050 --> 00:34:48,190
packages and and plumb that indirectly

00:34:46,030 --> 00:34:50,980
instead of going with a couple of

00:34:48,190 --> 00:34:53,139
examples and just have a couple of

00:34:50,980 --> 00:34:58,450
actual QuickStart examples in addition

00:34:53,139 --> 00:35:00,400
to what exists already there there's

00:34:58,450 --> 00:35:03,130
some great information out on the wiki

00:35:00,400 --> 00:35:06,250
already if you want to write your own

00:35:03,130 --> 00:35:11,700
ansible roles for doing integration

00:35:06,250 --> 00:35:11,700
tests and things like that but

00:35:12,390 --> 00:35:19,859
but yeah that I think that the doing the

00:35:17,059 --> 00:35:22,739
doing your own ansible roles is probably

00:35:19,859 --> 00:35:25,710
like step two type of thing

00:35:22,739 --> 00:35:27,930
where after you you know get your

00:35:25,710 --> 00:35:31,109
individual scripts written you want to

00:35:27,930 --> 00:35:35,549
to move on later it's getting

00:35:31,109 --> 00:35:37,499
notifications enabled is is probably one

00:35:35,549 --> 00:35:40,769
of one of the things that we should

00:35:37,499 --> 00:35:42,839
focus on I know that the all packages

00:35:40,769 --> 00:35:46,799
pipeline doesn't have a good set of

00:35:42,839 --> 00:35:50,009
filters in FM N and so I think we should

00:35:46,799 --> 00:35:53,819
probably work on that going forward

00:35:50,009 --> 00:35:55,130
because you know it's really hard to we

00:35:53,819 --> 00:36:00,539
didn't provide a good policy for that

00:35:55,130 --> 00:36:06,180
and split things out in a way that that

00:36:00,539 --> 00:36:08,940
folks can consume and then finally just

00:36:06,180 --> 00:36:11,239
keep one of the the things that we

00:36:08,940 --> 00:36:14,809
should do is to keep the conversion

00:36:11,239 --> 00:36:17,880
going so I showed the the upstream first

00:36:14,809 --> 00:36:19,529
statistics there are a number of

00:36:17,880 --> 00:36:21,200
packages that already have tests that

00:36:19,529 --> 00:36:23,880
have been migrated from various places

00:36:21,200 --> 00:36:29,489
but we need to continue that as we go

00:36:23,880 --> 00:36:32,249
and if your if your upstream project has

00:36:29,489 --> 00:36:36,809
a test suite I'm happy to talk with you

00:36:32,249 --> 00:36:39,720
about how to you know both get that into

00:36:36,809 --> 00:36:41,400
into disc it but then also approach them

00:36:39,720 --> 00:36:43,170
about some upstream testing as well so

00:36:41,400 --> 00:36:47,489
if if you're interested in this

00:36:43,170 --> 00:36:52,019
definitely find me or you can hang out

00:36:47,489 --> 00:36:53,549
in pound Fedora CI on freenode where we

00:36:52,019 --> 00:36:55,920
usually hang out in there but the

00:36:53,549 --> 00:36:59,670
conversion process is is going to be

00:36:55,920 --> 00:37:04,470
really important to to getting more more

00:36:59,670 --> 00:37:06,059
of those tests into disc it and I wanted

00:37:04,470 --> 00:37:11,549
to leave quite a bit of time actually

00:37:06,059 --> 00:37:14,190
for some open discussion because the it

00:37:11,549 --> 00:37:18,809
looks like Fedora CI and CI in general

00:37:14,190 --> 00:37:22,369
is a popular topic so I'd kind of like

00:37:18,809 --> 00:37:22,369
to open it up for questions and

00:37:22,850 --> 00:37:36,220
or comments about the the process that

00:37:25,340 --> 00:37:36,220
you've seen so far yep

00:37:37,410 --> 00:37:40,010
yep

00:37:51,670 --> 00:37:57,880
yeah so the the question was we have

00:37:53,830 --> 00:37:59,860
percent check um should we choose

00:37:57,880 --> 00:38:02,230
percent check over you know writing a

00:37:59,860 --> 00:38:04,570
new a new test that runs in the new

00:38:02,230 --> 00:38:09,460
system and I think you know one of the

00:38:04,570 --> 00:38:11,220
major things is if percent check fails

00:38:09,460 --> 00:38:15,580
it's always going to fail the Koji build

00:38:11,220 --> 00:38:17,080
that's a that's kind of a consideration

00:38:15,580 --> 00:38:21,090
you have to take in into account but

00:38:17,080 --> 00:38:21,090
it's also the fact that you can't do

00:38:21,150 --> 00:38:27,520
actual install tests and install the RPM

00:38:25,030 --> 00:38:29,860
on a system maybe orchestrate it with a

00:38:27,520 --> 00:38:31,570
you know two or three different systems

00:38:29,860 --> 00:38:34,660
that are that are stood up the idea is

00:38:31,570 --> 00:38:37,600
you want to install the RPM on a on a

00:38:34,660 --> 00:38:41,710
distro and then run a test suite against

00:38:37,600 --> 00:38:45,220
that entire thing plus your update right

00:38:41,710 --> 00:38:48,970
and so percent check is is good for

00:38:45,220 --> 00:38:51,760
doing I think is good for unit tests in

00:38:48,970 --> 00:38:54,610
some sense that tests the internal

00:38:51,760 --> 00:38:57,460
consistency of the package but anything

00:38:54,610 --> 00:39:01,240
else that interacts with the the system

00:38:57,460 --> 00:39:04,720
outside of your package is better for an

00:39:01,240 --> 00:39:09,870
external system to actually do that yeah

00:39:04,720 --> 00:39:09,870
in the back yeah

00:39:26,550 --> 00:39:31,800
so that's a that's an implementation

00:39:29,160 --> 00:39:34,590
detail because the gating process itself

00:39:31,800 --> 00:39:36,840
was what was sending messages to the

00:39:34,590 --> 00:39:39,600
packagers and so we know that was that

00:39:36,840 --> 00:39:42,450
goes to the what I said later on about

00:39:39,600 --> 00:39:45,390
we didn't do a good set of policies in

00:39:42,450 --> 00:39:47,870
FM n that listened to the all packages

00:39:45,390 --> 00:39:50,040
pipeline and send notifications itself

00:39:47,870 --> 00:39:57,200
because we were relying on the gating

00:39:50,040 --> 00:39:57,200
process to do that for us yeah

00:39:59,240 --> 00:40:06,510
exactly yeah that's that's a high

00:40:02,820 --> 00:40:08,280
priority for for going forward because I

00:40:06,510 --> 00:40:10,880
think there's a there's a couple of

00:40:08,280 --> 00:40:15,300
different cases when you would want that

00:40:10,880 --> 00:40:17,250
you'd want the test in place for a while

00:40:15,300 --> 00:40:20,220
and notifying you before you actually

00:40:17,250 --> 00:40:21,780
choose to gate on it for a number of

00:40:20,220 --> 00:40:24,210
different reasons and I think that's a

00:40:21,780 --> 00:40:29,450
sort of a killer feature that we we need

00:40:24,210 --> 00:40:29,450
to work on I saw that next

00:40:49,770 --> 00:40:57,840
yeah so the the question is is there any

00:40:55,070 --> 00:41:00,300
is there an effort to integrate with fed

00:40:57,840 --> 00:41:03,210
package build and I don't know of

00:41:00,300 --> 00:41:05,910
anything off the top of my head but but

00:41:03,210 --> 00:41:08,490
I do agree with you that would be pretty

00:41:05,910 --> 00:41:11,220
awesome if that that process actually

00:41:08,490 --> 00:41:14,820
waited for the test to exit the the

00:41:11,220 --> 00:41:18,060
thing is the we don't have a guaranteed

00:41:14,820 --> 00:41:19,500
turnaround time on tests so you know

00:41:18,060 --> 00:41:23,580
it's something you could cancel but if

00:41:19,500 --> 00:41:25,590
you but yeah if you if you wanted to to

00:41:23,580 --> 00:41:27,750
wait on that I'd love to talk about that

00:41:25,590 --> 00:41:30,650
and see what we can do to to work on

00:41:27,750 --> 00:41:30,650
that Neal

00:42:10,130 --> 00:42:16,460
yeah yeah so I think and that's part of

00:42:14,289 --> 00:42:20,329
that would be the mechanism for

00:42:16,460 --> 00:42:22,220
notifications going forward because the

00:42:20,329 --> 00:42:24,890
the original design was to do all of

00:42:22,220 --> 00:42:29,630
this through Bodie so it would go

00:42:24,890 --> 00:42:31,220
through the update process but we yeah

00:42:29,630 --> 00:42:35,029
it is too late at that point

00:42:31,220 --> 00:42:38,989
and it's it's useful to have that

00:42:35,029 --> 00:42:41,690
information in multiple places but yeah

00:42:38,989 --> 00:42:43,279
I think that's a that's that's certainly

00:42:41,690 --> 00:42:51,640
something that that we should look at

00:42:43,279 --> 00:42:51,640
for the the notification piece so yep

00:42:57,660 --> 00:43:05,779
yep Steph has did you have a comment or

00:43:00,480 --> 00:43:05,779
question okay

00:44:25,730 --> 00:44:28,599
so

00:44:34,200 --> 00:44:40,710
so 2 to shortly summarize the the

00:44:37,260 --> 00:44:44,330
conversation that just happened Steph

00:44:40,710 --> 00:44:46,200
was basically saying that the the

00:44:44,330 --> 00:44:50,880
notifications are important as long as

00:44:46,200 --> 00:44:53,700
we act on them because Fedora is kind of

00:44:50,880 --> 00:44:56,520
a interconnected mesh of packages and

00:44:53,700 --> 00:45:00,390
you don't want failures to pile up and

00:44:56,520 --> 00:45:02,370
effect other packages and so we just had

00:45:00,390 --> 00:45:06,140
a little kind of side discussion about

00:45:02,370 --> 00:45:08,220
where to where to place that and I think

00:45:06,140 --> 00:45:09,840
yeah I think we agreed that multiple

00:45:08,220 --> 00:45:12,360
places is good and that Bodhi is

00:45:09,840 --> 00:45:16,910
probably too late was that a good

00:45:12,360 --> 00:45:16,910
summary other things to add yes

00:45:27,359 --> 00:45:32,870
right

00:45:29,330 --> 00:45:37,790
yeah yeah so the suggestion is to run a

00:45:32,870 --> 00:45:44,230
second round of testing when when the

00:45:37,790 --> 00:45:44,230
update okay yeah

00:45:47,160 --> 00:45:54,369
yes they're doing combination testing of

00:45:49,950 --> 00:46:04,560
of things in updates testing is was a

00:45:54,369 --> 00:46:04,560
suggestion yeah right yeah yeah

00:46:06,390 --> 00:46:10,799
is so the question is is there a place

00:46:09,119 --> 00:46:12,930
to see the CI for the package building

00:46:10,799 --> 00:46:16,940
so you're running the the individual

00:46:12,930 --> 00:46:16,940
test results for your package or

00:46:23,250 --> 00:46:33,590
yeah yeah so that's I didn't put a URL

00:46:27,960 --> 00:46:33,590
in here did I

00:46:34,369 --> 00:46:38,270
that is unfortunate

00:46:40,480 --> 00:46:50,230
yes oh that yeah so the I will update

00:46:48,970 --> 00:46:53,470
this real quick

00:46:50,230 --> 00:46:55,420
I'm gonna post the slides for this and

00:46:53,470 --> 00:46:56,860
and come and find me I'll get you links

00:46:55,420 --> 00:46:58,960
to all of this stuff it's it is on the

00:46:56,860 --> 00:47:01,270
wiki there are links to these these

00:46:58,960 --> 00:47:03,220
individual pipelines but but I'll make

00:47:01,270 --> 00:47:07,240
sure you have that information as to

00:47:03,220 --> 00:47:09,280
your question was the there are two

00:47:07,240 --> 00:47:13,770
pipelines we have the the Fedora atomic

00:47:09,280 --> 00:47:13,770
one and all packages one what was the

00:47:21,090 --> 00:47:26,950
yes so this one this one right here is

00:47:24,250 --> 00:47:30,370
the fidor atomic pipeline we do an RPM

00:47:26,950 --> 00:47:34,600
build in this infrastructure of the new

00:47:30,370 --> 00:47:41,340
package for the all packages pipeline

00:47:34,600 --> 00:47:41,340
which did I miss that somewhere

00:47:44,120 --> 00:47:49,520
there we go yeah so the the all packages

00:47:46,850 --> 00:47:52,640
pipeline is is similar but it does pull

00:47:49,520 --> 00:47:57,320
from in the in the build case so you

00:47:52,640 --> 00:48:00,440
just push to a branch in dis kit we take

00:47:57,320 --> 00:48:04,820
the the build that you know just

00:48:00,440 --> 00:48:09,290
happened in Koji presumably so basically

00:48:04,820 --> 00:48:11,540
you push the biskits we wait for Koji to

00:48:09,290 --> 00:48:13,820
say hey I have a new build on that on

00:48:11,540 --> 00:48:15,890
that branch and then we pull that in for

00:48:13,820 --> 00:48:17,690
the pull request case so if you were to

00:48:15,890 --> 00:48:19,790
go out and open a pull request against a

00:48:17,690 --> 00:48:25,360
package we actually do a scratch build

00:48:19,790 --> 00:48:25,360
for you yep in the back

00:48:34,080 --> 00:48:40,540
yeah so the question is what

00:48:36,460 --> 00:48:43,300
environments are available in in this

00:48:40,540 --> 00:48:46,060
this pipeline and I'm sorry I didn't

00:48:43,300 --> 00:48:49,150
make that clear because there are there

00:48:46,060 --> 00:48:53,020
is a container case that you can use in

00:48:49,150 --> 00:48:56,140
your tests tamil file but in the like in

00:48:53,020 --> 00:48:58,540
the the standard case for the test rolls

00:48:56,140 --> 00:49:01,180
what we actually do as part of the

00:48:58,540 --> 00:49:03,610
pipeline process we take the fedora

00:49:01,180 --> 00:49:05,650
cloud image and we inject your rpm and

00:49:03,610 --> 00:49:09,790
then spin up a QM you process in

00:49:05,650 --> 00:49:12,520
OpenShift to run the tests so there's a

00:49:09,790 --> 00:49:14,800
yeah we take the base image kind of

00:49:12,520 --> 00:49:18,220
explode it a little bit and add in the

00:49:14,800 --> 00:49:20,770
the test suite that you that you

00:49:18,220 --> 00:49:22,690
provided to us install your rpm and then

00:49:20,770 --> 00:49:27,370
let that you know tiny little vm

00:49:22,690 --> 00:49:31,930
actually run the the test suite how tiny

00:49:27,370 --> 00:49:34,620
is that I don't know I can take a look

00:49:31,930 --> 00:49:34,620
afterwards in

00:49:44,220 --> 00:49:48,760
yep

00:49:45,610 --> 00:49:48,760
[Music]

00:49:51,780 --> 00:49:54,380
yep

00:50:11,520 --> 00:50:14,150
yep

00:50:20,950 --> 00:50:27,820
yes the the question is the the free IPA

00:50:25,540 --> 00:50:31,300
folks have larger scale tests around and

00:50:27,820 --> 00:50:33,220
they're they're concerned about you know

00:50:31,300 --> 00:50:34,500
call it multi node orchestration and the

00:50:33,220 --> 00:50:37,000
resources that are required for that

00:50:34,500 --> 00:50:41,760
there's a there's a separate inventory

00:50:37,000 --> 00:50:44,490
in in this that will actually let you do

00:50:41,760 --> 00:50:48,190
sort of more than than just a single

00:50:44,490 --> 00:50:49,900
virtual machine but then you can also if

00:50:48,190 --> 00:50:51,460
you if you end up having a really

00:50:49,900 --> 00:50:53,560
complex test suite or you're doing an

00:50:51,460 --> 00:50:55,390
integration test suite there are

00:50:53,560 --> 00:50:57,820
mechanisms that you can include in the

00:50:55,390 --> 00:51:03,130
test site yeah Mel to basically provide

00:50:57,820 --> 00:51:05,380
a list of what you need to ask from the

00:51:03,130 --> 00:51:09,550
CI system and it will give you you know

00:51:05,380 --> 00:51:11,170
what you need basically memory

00:51:09,550 --> 00:51:12,730
requirements or if you need you know

00:51:11,170 --> 00:51:15,280
more than one machine at a time that's

00:51:12,730 --> 00:51:17,760
that's the job of the CI system to to

00:51:15,280 --> 00:51:17,760
kind of figure out

00:51:38,360 --> 00:51:40,960
yep

00:51:45,800 --> 00:51:48,460
right

00:52:12,520 --> 00:52:15,510
we don't for this

00:52:21,200 --> 00:52:24,790
yeah it's part of the pipeline

00:52:27,690 --> 00:52:33,810
using it because they were focused on

00:52:29,650 --> 00:52:33,810
their but in the single host test babies

00:52:59,610 --> 00:53:10,440
so the question is does the CI pipeline

00:53:02,490 --> 00:53:13,140
assume x86 and at this moment yes but

00:53:10,440 --> 00:53:16,530
there's no there are no there are no

00:53:13,140 --> 00:53:18,860
limitations other than plumbing and

00:53:16,530 --> 00:53:21,750
hardware into the the infrastructures

00:53:18,860 --> 00:53:25,200
and making sure that you know we have

00:53:21,750 --> 00:53:27,330
the the scaffolding in place so there's

00:53:25,200 --> 00:53:29,280
nothing in the in the test IMO file that

00:53:27,330 --> 00:53:40,650
would prevent you from doing other

00:53:29,280 --> 00:53:42,930
architectures yeah yeah so the question

00:53:40,650 --> 00:53:45,150
is is that the simple Co GCI thing you

00:53:42,930 --> 00:53:47,610
see in Packer and no that is a separate

00:53:45,150 --> 00:53:49,890
thing the that's that's part of the

00:53:47,610 --> 00:53:53,130
notifications plan I think going forward

00:53:49,890 --> 00:53:55,380
is to have a similar little little tick

00:53:53,130 --> 00:53:57,240
in the Packer pull request that comes

00:53:55,380 --> 00:54:01,040
from the all packages pipeline and says

00:53:57,240 --> 00:54:01,040
whether you you passed or failed to PR

00:54:02,450 --> 00:54:10,400
No so you have to go into the into the

00:54:06,770 --> 00:54:16,940
actual Jenkins interface which is nasty

00:54:10,400 --> 00:54:22,420
I saw a hand back there first yeah I saw

00:54:16,940 --> 00:54:22,420
you first so okay

00:54:24,350 --> 00:54:26,920
yep

00:55:00,660 --> 00:55:07,050
okay yeah so the the question is is

00:55:03,810 --> 00:55:10,310
there a way to tell the test system to

00:55:07,050 --> 00:55:12,780
skip testing on pull request because of

00:55:10,310 --> 00:55:19,380
test suite requirements and things like

00:55:12,780 --> 00:55:21,720
that I am NOT I am blanking on if that

00:55:19,380 --> 00:55:25,340
is possible but I come find me and mold

00:55:21,720 --> 00:55:25,340
will figure out the answer together and

00:55:28,970 --> 00:55:31,970
there

00:56:00,270 --> 00:56:03,270
so

00:56:22,390 --> 00:56:27,500
let's so so let's let's talk about let's

00:56:25,820 --> 00:56:28,760
talk together about your requirements

00:56:27,500 --> 00:56:31,850
there because I could see a case where

00:56:28,760 --> 00:56:33,530
we you know you run the the generic test

00:56:31,850 --> 00:56:34,820
suite on on pull requests but then have

00:56:33,530 --> 00:56:38,980
a separate test suite that checks your

00:56:34,820 --> 00:56:42,470
your signatures on yep

00:56:38,980 --> 00:56:46,780
yep well let's yeah let's talk together

00:56:42,470 --> 00:56:46,780
about that and yeah

00:57:12,450 --> 00:57:15,050
yep

00:57:26,020 --> 00:57:31,270
sure yeah so the the comment was there

00:57:29,920 --> 00:57:33,070
should there should definitely be a

00:57:31,270 --> 00:57:36,790
focus on the user experience for

00:57:33,070 --> 00:57:39,010
packagers and yeah if that wasn't

00:57:36,790 --> 00:57:40,840
explicit I think we we should make that

00:57:39,010 --> 00:57:42,880
explicit that yes we're looking into

00:57:40,840 --> 00:57:44,290
what that looks like for the the

00:57:42,880 --> 00:57:49,860
packager process because making that

00:57:44,290 --> 00:57:49,860
smooth is is important yeah

00:58:01,250 --> 00:58:03,849
yep

00:58:08,730 --> 00:58:16,540
yes of the the plan is so there's the

00:58:12,910 --> 00:58:17,800
upstream first repository that is you

00:58:16,540 --> 00:58:20,130
know the sort of the separate place

00:58:17,800 --> 00:58:23,130
where we're tests are being staged in

00:58:20,130 --> 00:58:23,130
that

00:58:30,250 --> 00:58:35,230
ah alright right right right yeah so

00:58:33,220 --> 00:58:37,119
there I don't believe there are any

00:58:35,230 --> 00:58:39,210
restrictions if you choose one or the

00:58:37,119 --> 00:58:39,210
other

00:58:46,320 --> 00:58:52,610
I'm trying to remember if we make of yep

00:59:17,990 --> 00:59:24,830
yes so what I'm hearing is we we might

00:59:20,900 --> 00:59:28,270
want to clarify that that part of the

00:59:24,830 --> 00:59:28,270
the recommendation there

00:59:50,390 --> 00:59:52,990
yeah

00:59:55,790 --> 00:59:58,720
okay

01:00:06,710 --> 01:00:09,370
yes

01:00:27,640 --> 01:00:30,330
was that

01:00:46,319 --> 01:00:48,919
yep

01:01:04,270 --> 01:01:07,600
question in the back

01:01:14,670 --> 01:01:19,170
so the question is this is pretty

01:01:17,729 --> 01:01:26,239
awesome for single rpms is there a

01:01:19,170 --> 01:01:26,239
roadmap for modules I don't know yet

01:01:28,729 --> 01:01:31,729
sure

01:01:37,660 --> 01:01:43,539
that's yes of the the I think I repeated

01:01:42,279 --> 01:01:48,099
the question is there is there a plan

01:01:43,539 --> 01:01:49,869
for modules I don't I don't know yeah

01:01:48,099 --> 01:01:51,670
maybe that's maybe that's just part of

01:01:49,869 --> 01:01:54,809
documentation because the the test

01:01:51,670 --> 01:01:57,789
system itself should be general ish and

01:01:54,809 --> 01:02:00,369
but the but if there are if yeah if

01:01:57,789 --> 01:02:03,880
there are limitations or ways that we

01:02:00,369 --> 01:02:06,220
can abstract some of the the the

01:02:03,880 --> 01:02:07,569
differences between doing bear rpm

01:02:06,220 --> 01:02:11,309
testing and module testing I think we

01:02:07,569 --> 01:02:11,309
should yeah Steph go ahead

01:02:46,370 --> 01:02:48,970
yep

01:02:56,660 --> 01:02:59,260
yeah

01:03:04,080 --> 01:03:12,220
yeah so the the question is can you kick

01:03:07,270 --> 01:03:16,780
off tests for dependent RPMs that is

01:03:12,220 --> 01:03:18,280
sort of up to you as the tester for what

01:03:16,780 --> 01:03:20,620
is important for you to include in your

01:03:18,280 --> 01:03:23,170
test or not so if you have a whole bunch

01:03:20,620 --> 01:03:24,370
of of tight dependencies on other rpms

01:03:23,170 --> 01:03:28,240
and you want to run their test Suites

01:03:24,370 --> 01:03:30,460
after after that the the ansible

01:03:28,240 --> 01:03:39,040
specification will let you do that but

01:03:30,460 --> 01:03:40,920
stuff wants to answer again I've seen

01:03:39,040 --> 01:03:44,590
that exact thing on Dominic's roadmap

01:03:40,920 --> 01:03:46,060
for the team is how can I either

01:03:44,590 --> 01:03:47,740
automatically look at the reverse

01:03:46,060 --> 01:03:49,390
dependencies and you have them trigger

01:03:47,740 --> 01:03:52,480
all the tests from my package so that I

01:03:49,390 --> 01:03:54,730
know I'm not breaking anyone or actually

01:03:52,480 --> 01:03:57,790
list them the other other test repos

01:03:54,730 --> 01:04:00,250
that I care about yeah I believe that

01:03:57,790 --> 01:04:03,280
that's going to happen soon if it

01:04:00,250 --> 01:04:08,480
doesn't I know lots of testing that I'm

01:04:03,280 --> 01:04:11,480
involved in won't be possible yep yeah

01:04:08,480 --> 01:04:11,480
right

01:04:21,540 --> 01:04:30,100
okay so the next the next talk is

01:04:25,300 --> 01:04:32,650
starting pretty soon so the lunch is

01:04:30,100 --> 01:04:35,170
starting pretty soon so yeah that's even

01:04:32,650 --> 01:04:38,050
more important okay

01:04:35,170 --> 01:04:39,640
so I'm up here I'll be around all week

01:04:38,050 --> 01:04:43,200
if you want to talk about Fedora see

01:04:39,640 --> 01:04:46,390
let's continue as we go Thanks

01:04:43,200 --> 01:04:46,390

YouTube URL: https://www.youtube.com/watch?v=aWUoZW0zUtI


