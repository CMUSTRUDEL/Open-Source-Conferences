Title: Flock 2018 - What next with spec files? [Part 2]
Publication date: 2018-08-29
Playlist: Flock 2018
Description: 
	Wednesday, August 8, 2018
3:40am - 4:30pm
@Hamburg 1+2

Talk: What next with spec files?
Presenters: Florian Festi

Description: The basics of RPM spec files have been unchanged for decades. I want to survey for use cases that no longer fit the traditional model or need new features. We are for now going to focus on larger groups of packages. E.g. packages in a given programming language or packages with a given function like language packs or add-on documentation.

Issue could be
* Difficulties moving from one interpreter version to another
* Supporting multiple versions of a language in parallel
* Not enough flexibility when creating sub packages
* The dependency system not quite cutting it
Captions: 
	00:00:00,000 --> 00:00:05,100
okay I want to start something different

00:00:02,669 --> 00:00:09,120
I did a peek in mind sliding this one

00:00:05,100 --> 00:00:12,269
one more point I want to tell about and

00:00:09,120 --> 00:00:12,630
that's something dawned on me a few days

00:00:12,269 --> 00:00:15,179
ago

00:00:12,630 --> 00:00:19,369
which is pretty funny when it comes to

00:00:15,179 --> 00:00:23,369
features in general and I realized

00:00:19,369 --> 00:00:26,010
there's an interesting distribution on

00:00:23,369 --> 00:00:26,960
how difficult it is to get some changes

00:00:26,010 --> 00:00:30,359
implemented

00:00:26,960 --> 00:00:33,800
that's a basically bathtub distribution

00:00:30,359 --> 00:00:37,200
it's very easy for very small changes

00:00:33,800 --> 00:00:41,730
macro no one cares you just do it it's

00:00:37,200 --> 00:00:44,070
in there someone updates we update your

00:00:41,730 --> 00:00:48,120
rpm and forego runs in there it just

00:00:44,070 --> 00:00:50,730
works it's easy and then they are really

00:00:48,120 --> 00:00:54,149
really big changes they break the world

00:00:50,730 --> 00:00:57,449
that require replacing young everywhere

00:00:54,149 --> 00:01:00,270
that will break the solution and

00:00:57,449 --> 00:01:04,140
whatever and they are all so easy we did

00:01:00,270 --> 00:01:06,840
we did boolean expressions and we just

00:01:04,140 --> 00:01:08,580
committed that released and didn't do

00:01:06,840 --> 00:01:10,650
anything and it magically happened

00:01:08,580 --> 00:01:13,890
probably some people did something but

00:01:10,650 --> 00:01:16,320
we didn't and magically all

00:01:13,890 --> 00:01:20,729
infrastructure were fixed and it was

00:01:16,320 --> 00:01:22,979
very very very easy and smooth for for

00:01:20,729 --> 00:01:25,770
us at least I hear some people other

00:01:22,979 --> 00:01:29,490
people have things to do but we don't

00:01:25,770 --> 00:01:32,369
care we don't care that that's like

00:01:29,490 --> 00:01:33,990
elsewhere but there's there's the funny

00:01:32,369 --> 00:01:36,150
thing is they're middle sized in

00:01:33,990 --> 00:01:39,930
adventure and they're just impossible

00:01:36,150 --> 00:01:41,890
you just can't their features they don't

00:01:39,930 --> 00:01:46,950
have the huge benefits

00:01:41,890 --> 00:01:46,950
like the big ones but I have similar

00:01:48,570 --> 00:01:56,920
risks involved like breaking somewhere

00:01:52,240 --> 00:02:01,030
randomly and so they don't don't get so

00:01:56,920 --> 00:02:03,610
that till the version compared is one of

00:02:01,030 --> 00:02:06,670
those it's in there for years it's very

00:02:03,610 --> 00:02:16,240
small it's a neat little patch of a few

00:02:06,670 --> 00:02:18,420
lines change part of road six but you

00:02:16,240 --> 00:02:21,880
can't get in the door because of course

00:02:18,420 --> 00:02:25,330
it might break some things somewhere

00:02:21,880 --> 00:02:26,980
I see the machinery in the in the back

00:02:25,330 --> 00:02:29,709
side of the machine where you can't see

00:02:26,980 --> 00:02:31,600
and no one knows what it might already

00:02:29,709 --> 00:02:35,020
could sell me I'm afraid so you can't

00:02:31,600 --> 00:02:36,730
get it in four years I mean why can't we

00:02:35,020 --> 00:02:44,770
just do that like just like the other

00:02:36,730 --> 00:02:47,130
one then see what breaks who will refuse

00:02:44,770 --> 00:02:50,549
to do it

00:02:47,130 --> 00:02:50,549
why you ask

00:02:52,860 --> 00:02:56,920
it's all in first figured ahead well

00:02:55,299 --> 00:03:12,870
that's let's let's make new law

00:02:56,920 --> 00:03:16,870
defensive I just got like four years

00:03:12,870 --> 00:03:20,530
yeah and as you know it's uh still

00:03:16,870 --> 00:03:22,830
existing they'd be fine so here's the

00:03:20,530 --> 00:03:22,830
best

00:03:37,610 --> 00:04:38,160
it's a world you're screwed because you

00:04:35,310 --> 00:04:43,650
will suddenly come to read our Ian's

00:04:38,160 --> 00:04:51,050
config package which use which

00:04:43,650 --> 00:04:55,530
dependencies requires to be teased GCC

00:04:51,050 --> 00:05:00,890
route 7 RPM doesn't recognize

00:04:55,530 --> 00:05:07,130
so the error message is unrecognized tag

00:05:00,890 --> 00:05:07,130
parentheses which is a wizard or a

00:05:07,370 --> 00:05:17,690
instead of saying you need our

00:05:14,180 --> 00:05:21,160
capability foo or instead you need our

00:05:17,690 --> 00:05:23,980
bigger diversion something

00:05:21,160 --> 00:05:34,480
groaning bad yeah the problem is that we

00:05:23,980 --> 00:05:38,860
do have those no actually there is a

00:05:34,480 --> 00:05:42,730
mechanism because there is a requires in

00:05:38,860 --> 00:05:47,140
the package requiring RPM build reach

00:05:42,730 --> 00:05:52,210
tab so not somewhere but the problem is

00:05:47,140 --> 00:05:56,140
a mysterious contacted archaea bars all

00:05:52,210 --> 00:06:00,880
the dependencies together so it will

00:05:56,140 --> 00:06:04,420
pass though I'm reading which dependency

00:06:00,880 --> 00:06:10,840
subversion so okay I'm putting the sack

00:06:04,420 --> 00:06:14,070
and then we'll come to break I don't

00:06:10,840 --> 00:06:18,850
know this so what I propose is that

00:06:14,070 --> 00:06:23,050
these the RPM should read those RPM

00:06:18,850 --> 00:06:41,050
believe that is something first and then

00:06:23,050 --> 00:06:45,910
say okay this is good Wow have any clue

00:06:41,050 --> 00:06:49,600
about the 20 years on integers but but I

00:06:45,910 --> 00:06:52,740
guess that not the curse the subtypes

00:06:49,600 --> 00:06:59,220
for the dependencies has not changed

00:06:52,740 --> 00:06:59,220
right things exactly once change

00:07:05,230 --> 00:07:10,550
yeah because until Hammond did that

00:07:08,360 --> 00:07:13,310
backboard to light and read the text the

00:07:10,550 --> 00:07:15,320
first place you know that's not a syntax

00:07:13,310 --> 00:07:17,600
print but that's not a program here

00:07:15,320 --> 00:07:19,220
because first rpm you can also text it

00:07:17,600 --> 00:07:22,310
doesn't know yeah

00:07:19,220 --> 00:07:24,260
so for binary packages right and of

00:07:22,310 --> 00:07:27,500
course would break the spec file with

00:07:24,260 --> 00:07:31,550
you notice proper error message like

00:07:27,500 --> 00:07:33,440
what effectiveness yes and so total it's

00:07:31,550 --> 00:07:35,860
a very specific thing that actually

00:07:33,440 --> 00:07:38,870
didn't happen because we never come out

00:07:35,860 --> 00:07:40,910
page super true is that those three

00:07:38,870 --> 00:07:43,730
dependency was little bit perhaps

00:07:40,910 --> 00:07:47,090
because previously given the V

00:07:43,730 --> 00:07:50,980
dependency were present in rpm for a

00:07:47,090 --> 00:07:54,860
long long time and we filled up so they

00:07:50,980 --> 00:07:59,480
have been used only after long long

00:07:54,860 --> 00:08:02,870
years or the very readability here we

00:07:59,480 --> 00:08:07,360
starting after quite short of time I yes

00:08:02,870 --> 00:08:07,360
we we've sped up

00:08:16,320 --> 00:08:21,260
nothing else changed to accommodate the

00:08:18,060 --> 00:08:24,060
fact that things are actually now moving

00:08:21,260 --> 00:08:28,470
to is actually a quite a wildlife to to

00:08:24,060 --> 00:08:33,080
get like Fedora restructure to move also

00:08:28,470 --> 00:08:33,080
with the pace that actually can keep

00:08:33,560 --> 00:08:40,650
donkey step your speed up the pace you

00:08:37,020 --> 00:08:45,620
should have some mechanism saying you

00:08:40,650 --> 00:08:45,620
need these version or this capability to

00:08:54,020 --> 00:08:59,370
yeah you are Theo Halfmoon media

00:08:57,590 --> 00:09:03,120
diagnose Dubrow

00:08:59,370 --> 00:09:05,130
I mean basically it's it's actually not

00:09:03,120 --> 00:09:07,800
doing something wrong it's just not very

00:09:05,130 --> 00:09:32,630
helpful with their yeah which which is a

00:09:07,800 --> 00:09:39,270
feature well I'm not trying to say

00:09:32,630 --> 00:09:42,690
situation I'm trying to say situation

00:09:39,270 --> 00:09:46,500
where after three years from now they

00:09:42,690 --> 00:09:50,130
don't include function teleport inside

00:09:46,500 --> 00:09:52,460
rpm and current rpm doesn't recognize so

00:09:50,130 --> 00:09:55,550
I'm trying to say situation of the year

00:09:52,460 --> 00:09:58,790
the general general thing

00:09:55,550 --> 00:10:01,580
we've always guaranteed backward

00:09:58,790 --> 00:10:05,390
compatibility but not for our community

00:10:01,580 --> 00:10:08,720
we're just you know basically can if you

00:10:05,390 --> 00:10:13,610
start doing forward compatibility there

00:10:08,720 --> 00:10:21,650
you lose every other game you basically

00:10:13,610 --> 00:10:50,150
stopped movie project to try it jump for

00:10:21,650 --> 00:10:53,450
exactly and I mean processing actually

00:10:50,150 --> 00:10:54,620
ignores all of those okay so like they

00:10:53,450 --> 00:10:56,330
don't read them they don't actually even

00:10:54,620 --> 00:10:58,460
see them cuz they're not exported by

00:10:56,330 --> 00:11:01,310
bravery proceeds so like there's no

00:10:58,460 --> 00:11:02,270
point to investigate them so all those

00:11:01,310 --> 00:11:03,470
tools would need to be changed

00:11:02,270 --> 00:11:05,420
I'm not saying that it's a hard change

00:11:03,470 --> 00:11:08,000
or anything like that but we don't

00:11:05,420 --> 00:11:10,910
actually have a mechanism right now I

00:11:08,000 --> 00:11:13,340
mean they are stripped out of the NEPA

00:11:10,910 --> 00:11:17,870
that are with their argument that well

00:11:13,340 --> 00:11:21,250
it's basically redundant package sauce

00:11:17,870 --> 00:11:21,250
from the wrong repository

00:11:25,360 --> 00:11:41,960
but I mean there'll all of them in every

00:11:29,030 --> 00:11:45,610
package and then that would actually be

00:11:41,960 --> 00:11:47,960
an optimization trip because everywhere

00:11:45,610 --> 00:11:56,000
the maximal subset of all the

00:11:47,960 --> 00:11:59,690
capabilities of this repo requires what

00:11:56,000 --> 00:12:03,080
you I have hit it

00:11:59,690 --> 00:12:08,150
sometimes when you accidentally do

00:12:03,080 --> 00:12:11,900
something quite important to do post or

00:12:08,150 --> 00:12:16,240
Pratt on screen do you put some like

00:12:11,900 --> 00:12:23,590
exit wound so you screw your screen

00:12:16,240 --> 00:12:29,300
right uninstall then there is no way to

00:12:23,590 --> 00:12:33,740
defeat it because even if you fix next

00:12:29,300 --> 00:12:36,830
version of linkage RPM always try to run

00:12:33,740 --> 00:12:41,980
the brown scrape of the previous script

00:12:36,830 --> 00:12:48,020
and the administrator had to manually

00:12:41,980 --> 00:12:50,480
step in under an RPM the erase national

00:12:48,020 --> 00:12:54,830
screens so every i mean in the world

00:12:50,480 --> 00:12:59,660
have to do that to fix your mistake so

00:12:54,830 --> 00:13:01,790
it would be nice if if I ever do

00:12:59,660 --> 00:13:05,780
something like that I can somehow

00:13:01,790 --> 00:13:10,660
override these mechanism honest I don't

00:13:05,780 --> 00:13:14,770
run these brands or something

00:13:10,660 --> 00:13:17,950
or the previous script so at some point

00:13:14,770 --> 00:13:22,570
suggested having update script which

00:13:17,950 --> 00:13:24,700
would also make you wouldn't be reduced

00:13:22,570 --> 00:13:30,760
to script English Sumer for install for

00:13:24,700 --> 00:13:32,140
that kind of thing yeah if you start

00:13:30,760 --> 00:13:34,350
getting into weird states though because

00:13:32,140 --> 00:13:36,820
now you have to separately consider

00:13:34,350 --> 00:13:38,380
what's happening for those stages and

00:13:36,820 --> 00:13:40,330
then now you start having the

00:13:38,380 --> 00:13:42,040
requirement you know may be delayed

00:13:40,330 --> 00:13:44,980
script execution so things actually run

00:13:42,040 --> 00:13:47,170
correctly all the time because the way

00:13:44,980 --> 00:13:49,120
that transactions can happen maintenance

00:13:47,170 --> 00:13:50,980
acetate some kind of special sequencing

00:13:49,120 --> 00:13:53,770
to make everything happen that's not

00:13:50,980 --> 00:13:56,580
necessarily easy to do currently because

00:13:53,770 --> 00:13:59,170
of how ordering actually works

00:13:56,580 --> 00:14:00,730
transsexuals get really funny if artful

00:13:59,170 --> 00:14:01,330
for pre-owned that's probably not going

00:14:00,730 --> 00:14:03,940
to work

00:14:01,330 --> 00:14:05,920
yeah yeah the transaction did really

00:14:03,940 --> 00:14:08,740
really here when you start talking about

00:14:05,920 --> 00:14:10,420
like anything that could cause the

00:14:08,740 --> 00:14:12,940
breakage where you wanted like split or

00:14:10,420 --> 00:14:14,140
overwrite script operation because you

00:14:12,940 --> 00:14:16,750
don't actually know what other things

00:14:14,140 --> 00:14:18,130
might I mean it may be nothing and it

00:14:16,750 --> 00:14:20,320
might be still better than than the

00:14:18,130 --> 00:14:24,270
worst case but like it's a difficult

00:14:20,320 --> 00:14:24,270
option to exposed to just why actually

00:14:25,110 --> 00:14:32,920
they look so in the very very way

00:14:30,089 --> 00:14:34,420
because it gets very painful and it

00:14:32,920 --> 00:14:36,520
requires knowledge that than admin just

00:14:34,420 --> 00:14:40,690
may not necessarily have about what

00:14:36,520 --> 00:14:42,370
decision to do I think that the right

00:14:40,690 --> 00:14:46,360
thing would be to have some tactical

00:14:42,370 --> 00:14:48,740
rights that works for us and that could

00:14:46,360 --> 00:14:51,020
be a nuisance

00:14:48,740 --> 00:14:54,620
like India like transactions like that

00:14:51,020 --> 00:14:56,390
you can push this is a factor now you

00:14:54,620 --> 00:14:58,310
don't want to have to transsexual course

00:14:56,390 --> 00:14:59,780
that's something that users to do you

00:14:58,310 --> 00:15:03,310
would you have one for half that night

00:14:59,780 --> 00:15:03,310
that's probably why

00:15:04,130 --> 00:15:08,660
yeah well you could put it as an

00:15:07,220 --> 00:15:10,040
argument for the scribbler like if

00:15:08,660 --> 00:15:16,460
you're overriding the same script or

00:15:10,040 --> 00:15:18,020
from an older package just as a oh you

00:15:16,460 --> 00:15:22,700
know I don't care what happened in this

00:15:18,020 --> 00:15:26,050
old one don't wanna yeah yeah my guess

00:15:22,700 --> 00:15:29,390
is this could get interesting soothed

00:15:26,050 --> 00:15:35,390
apostle meets of whatever I do which

00:15:29,390 --> 00:15:37,430
package citrate man but maybe you had

00:15:35,390 --> 00:15:41,750
maybe a ninety percent solution is

00:15:37,430 --> 00:15:44,490
better than none any other curves doing

00:15:41,750 --> 00:15:48,990
thing by running around

00:15:44,490 --> 00:15:48,990
and really right for there

00:15:56,040 --> 00:16:29,450
which is you could also just attack

00:16:33,779 --> 00:16:36,779
where

00:16:45,610 --> 00:16:51,010
for research was just have to take

00:16:47,780 --> 00:16:51,010
another attack

00:16:57,500 --> 00:17:03,820
because the thing is you could actually

00:16:59,300 --> 00:17:03,820
use the full strength

00:17:08,680 --> 00:17:15,710
okay good basic you just let's let's

00:17:12,530 --> 00:17:32,180
quit and then floor made smaller than

00:17:15,710 --> 00:17:35,800
something well I need you're describing

00:17:32,180 --> 00:17:35,800
triggers it's the other

00:18:02,220 --> 00:19:06,700
this would be helped because a lot of

00:18:06,610 --> 00:19:08,680
times when because in my actually being

00:19:06,700 --> 00:19:11,680
mothered that does another thing that's

00:19:08,680 --> 00:19:14,440
insane up here if you have a problem

00:19:11,680 --> 00:19:18,190
you're too busy two ways this can you

00:19:14,440 --> 00:19:22,180
know the one is you had like five lines

00:19:18,190 --> 00:19:23,560
and it just works the most more common

00:19:22,180 --> 00:19:25,870
version this you have to rewrite like

00:19:23,560 --> 00:19:34,150
three subsystems and then it's still not

00:19:25,870 --> 00:19:37,290
quite there was more fun to it there's

00:19:34,150 --> 00:19:37,290
no way of telling them apart

00:19:42,360 --> 00:19:57,490
what I had me Debbie on board we have we

00:19:54,790 --> 00:20:16,270
have the macro underscore is a long

00:19:57,490 --> 00:20:19,810
length you can stop while the beard word

00:20:16,270 --> 00:20:23,620
has some Sun come on very you have just

00:20:19,810 --> 00:20:26,650
nice and keywords many of you at least

00:20:23,620 --> 00:20:29,050
on the location you will just click I

00:20:26,650 --> 00:20:31,930
don't want these sleep locales like

00:20:29,050 --> 00:20:37,050
attorney and Chinese and so on so you

00:20:31,930 --> 00:20:41,190
talk about that well it's dead on fire

00:20:37,050 --> 00:20:46,240
but they have said application as well

00:20:41,190 --> 00:20:49,420
it will do all in stock locales like

00:20:46,240 --> 00:20:51,850
Julian and next time I will be studying

00:20:49,420 --> 00:20:54,220
package it don't stop Italy in Milwaukee

00:20:51,850 --> 00:20:55,840
and it's a gigabytes of that so

00:20:54,220 --> 00:20:58,060
basically we're missing the part where

00:20:55,840 --> 00:20:59,560
like you decide to set install lines and

00:20:58,060 --> 00:21:00,570
I want to retro actively purge all the

00:20:59,560 --> 00:22:03,629
crap it doesn't

00:21:00,570 --> 00:22:06,139
yeah well they were able to find the

00:22:03,629 --> 00:22:06,139
lenses

00:22:06,149 --> 00:22:09,179
that's where like if you set install

00:22:07,980 --> 00:22:11,129
lens do you wanna have a little bread

00:22:09,179 --> 00:22:12,539
just go back to the our canoes some

00:22:11,129 --> 00:22:14,669
personal things don't match your

00:22:12,539 --> 00:22:16,440
language because her people stop staring

00:22:14,669 --> 00:22:19,080
about those clouds anyway once you set

00:22:16,440 --> 00:22:20,610
that so urging them is not a big deal we

00:22:19,080 --> 00:22:22,500
just it's not easy to find that

00:22:20,610 --> 00:22:24,950
information because it's not like

00:22:22,500 --> 00:22:24,950
something

00:22:25,549 --> 00:22:32,269
but a tool for doing that probably I'm

00:22:29,630 --> 00:22:37,010
all open to having any more stuff at the

00:22:32,269 --> 00:22:39,019
treatme I one of the hope for a boolean

00:22:37,010 --> 00:22:42,529
expression was to be able to solve

00:22:39,019 --> 00:22:45,260
issues like this in a generic way from

00:22:42,529 --> 00:22:46,760
from interference by setting up the

00:22:45,260 --> 00:22:49,039
package of the problem with connection

00:22:46,760 --> 00:22:52,269
it's basically just a question of doing

00:22:49,039 --> 00:22:52,269
the Trulie

00:22:53,789 --> 00:23:05,700
so when we are the boolean stuff will be

00:22:59,730 --> 00:23:07,980
easy to add boolean provides I'm not

00:23:05,700 --> 00:23:10,740
aware of answer phones also I need to

00:23:07,980 --> 00:23:11,909
think about this and I decided not to

00:23:10,740 --> 00:23:14,880
for a reason

00:23:11,909 --> 00:23:17,909
in the main reason is it requires 4 p.m.

00:23:14,880 --> 00:23:21,690
- and she do solving to be able to check

00:23:17,909 --> 00:23:25,379
it whether it can install package right

00:23:21,690 --> 00:23:26,870
now rpm has a very simple check whether

00:23:25,379 --> 00:23:32,070
I can install a set of packages

00:23:26,870 --> 00:23:34,620
basically just evaluates each boolean

00:23:32,070 --> 00:23:37,889
term and if it's true it's fine if it's

00:23:34,620 --> 00:23:40,769
false it's obviously an error and it's

00:23:37,889 --> 00:23:43,320
simple to implement it is also simple to

00:23:40,769 --> 00:23:46,080
understand so while the dependencies all

00:23:43,320 --> 00:23:48,960
being is complicated checking the result

00:23:46,080 --> 00:23:53,759
is easy to see if it's if this is

00:23:48,960 --> 00:23:56,399
working if you have the boolean stuff

00:23:53,759 --> 00:24:01,470
under the on the provide side also it's

00:23:56,399 --> 00:24:09,120
not at all trivial to decide whether the

00:24:01,470 --> 00:24:12,059
set of packages is insoluble it's not

00:24:09,120 --> 00:24:13,799
only an implementation problem problem

00:24:12,059 --> 00:24:34,169
of people figuring out whites were

00:24:13,799 --> 00:24:37,500
working I have installed almost provides

00:24:34,169 --> 00:24:40,220
for now just there then they would but

00:24:37,500 --> 00:24:43,830
then they would basically split up into

00:24:40,220 --> 00:24:45,480
quantum state yeah you better get after

00:24:43,830 --> 00:24:47,250
this and whether you have to decide for

00:24:45,480 --> 00:24:49,950
each of them which value they do have

00:24:47,250 --> 00:24:51,590
well the workaround we want to do for

00:24:49,950 --> 00:24:54,980
this is

00:24:51,590 --> 00:24:57,470
tea packages empty pictures package

00:24:54,980 --> 00:25:10,549
without files that just requires

00:24:57,470 --> 00:25:13,370
something to package features so we

00:25:10,549 --> 00:25:15,650
cannot do it in rpm so we will just

00:25:13,370 --> 00:25:34,640
bring some packages which so the main

00:25:15,650 --> 00:25:48,169
page will just depend on if it's not

00:25:34,640 --> 00:25:50,960
like you have to create actually how

00:25:48,169 --> 00:25:56,840
they work so well don't don't ask you

00:25:50,960 --> 00:25:58,279
for things you don't know what don't ask

00:25:56,840 --> 00:26:00,340
for things that you don't understand

00:25:58,279 --> 00:26:03,529
what the consequences might be because

00:26:00,340 --> 00:26:07,120
they're kind of horrifying oh well I'm

00:26:03,529 --> 00:26:09,740
only asking for rpm to be a superset of

00:26:07,120 --> 00:26:14,179
what the Python ecosystem already has

00:26:09,740 --> 00:26:16,070
yeah no the feature tag thing and the

00:26:14,179 --> 00:26:18,530
basically environment markers and all

00:26:16,070 --> 00:26:20,180
those all those things

00:26:18,530 --> 00:26:22,490
they're they're the same kind of

00:26:20,180 --> 00:26:26,840
drinking problem with rust but the the

00:26:22,490 --> 00:26:29,930
core issue for doing it is that if we

00:26:26,840 --> 00:26:32,450
turn provides into expressions that

00:26:29,930 --> 00:26:33,920
evaluating them becomes so painful that

00:26:32,450 --> 00:26:40,520
it actually might not be possible to

00:26:33,920 --> 00:26:42,110
debug dependencies anymore you can't

00:26:40,520 --> 00:26:44,590
keep up dependencies like what the

00:26:42,110 --> 00:26:44,590
are you doing

00:26:45,160 --> 00:26:50,240
there's not even a way to tell rpm fake

00:26:48,050 --> 00:26:54,680
things to be able to get expressions

00:26:50,240 --> 00:27:00,110
that you want to know and there's not

00:26:54,680 --> 00:27:03,800
actually a wait okay I mean it could be

00:27:00,110 --> 00:27:06,050
done like that's a lot of work that

00:27:03,800 --> 00:27:08,840
possibly could be solved in a different

00:27:06,050 --> 00:27:12,830
way like the way that the rust rates are

00:27:08,840 --> 00:27:15,320
doing it right now is that they do with

00:27:12,830 --> 00:27:16,940
the with the provides and required

00:27:15,320 --> 00:27:18,470
statements the provides basically all

00:27:16,940 --> 00:27:20,210
the markers are broken out a separate

00:27:18,470 --> 00:27:23,120
provides and then the require statement

00:27:20,210 --> 00:27:25,190
does with clauses so that the same

00:27:23,120 --> 00:27:27,680
package must provide all of those things

00:27:25,190 --> 00:27:29,900
together and so we basically avoid

00:27:27,680 --> 00:27:33,170
having to have provides math because the

00:27:29,900 --> 00:27:36,140
require says one package must provide

00:27:33,170 --> 00:27:39,380
all those provides together

00:27:36,140 --> 00:27:42,500
which we had yeah well this was the

00:27:39,380 --> 00:27:44,240
reason why it was added because that way

00:27:42,500 --> 00:27:46,400
you could avoid having math and provides

00:27:44,240 --> 00:27:51,640
because that was the alternative

00:27:46,400 --> 00:27:54,350
that's probably down somewhere yeah yeah

00:27:51,640 --> 00:27:56,920
I brought you the mailing list puzzled

00:27:54,350 --> 00:28:01,220
in retrospect not easy

00:27:56,920 --> 00:28:04,809
can you resend us to me in it or put it

00:28:01,220 --> 00:28:08,299
up on the OPM or yeah I can do that

00:28:04,809 --> 00:28:12,200
beside yeah because India goes well to

00:28:08,299 --> 00:28:14,720
have some examples of yeah that's that's

00:28:12,200 --> 00:28:17,179
like it's not that well-known the Jews

00:28:14,720 --> 00:28:18,740
when it comes down to this gets a brand

00:28:17,179 --> 00:28:21,110
new dependency expression we added in

00:28:18,740 --> 00:28:23,240
our pin 14 precisely to solve this

00:28:21,110 --> 00:28:28,190
problem because for us was in the ark

00:28:23,240 --> 00:28:30,679
before that what what people wants to do

00:28:28,190 --> 00:28:32,419
is another way to do it and it's

00:28:30,679 --> 00:28:35,530
technically more efficient if there's

00:28:32,419 --> 00:28:39,580
multiple providers of a feature but in

00:28:35,530 --> 00:28:41,900
practice that doesn't turn out to happen

00:28:39,580 --> 00:28:44,809
the only ones where this kind of happens

00:28:41,900 --> 00:28:49,040
in is rust and go and go stupid so we

00:28:44,809 --> 00:28:50,419
don't care and rust actually has a bunch

00:28:49,040 --> 00:28:52,760
of different ways of dealing with this

00:28:50,419 --> 00:28:54,200
problem internally and a lot of those

00:28:52,760 --> 00:28:56,510
can be flattened into expressions that

00:28:54,200 --> 00:28:59,570
we're already using in our theater so

00:28:56,510 --> 00:29:01,340
it's only kind of edge KC

00:28:59,570 --> 00:29:03,200
in most cases people just winds up

00:29:01,340 --> 00:29:07,690
upgrading dependency anyway so that who

00:29:03,200 --> 00:29:11,210
the cares anymore and so but yeah

00:29:07,690 --> 00:29:13,850
in the Python case and I think most

00:29:11,210 --> 00:29:16,040
ecosystem human Ruthie would also

00:29:13,850 --> 00:29:18,350
benefit from just using the width

00:29:16,040 --> 00:29:20,420
dependency to just match the markers so

00:29:18,350 --> 00:29:23,030
that they all bind to the same package

00:29:20,420 --> 00:29:24,710
and yeah I'll send you know recently the

00:29:23,030 --> 00:29:26,900
link to my mailing list post which

00:29:24,710 --> 00:29:29,240
explains why these relative and I'll

00:29:26,900 --> 00:29:31,220
write a smaller bit because we put that

00:29:29,240 --> 00:29:32,870
on the arcane websites that people know

00:29:31,220 --> 00:29:36,140
about this because that is the reason we

00:29:32,870 --> 00:29:38,860
added that here and see if there's a

00:29:36,140 --> 00:29:38,860
couple of interesting

00:29:42,020 --> 00:29:48,679
so it's it worth maybe talking through

00:29:45,770 --> 00:29:51,620
your eyes yeah I don't understand with

00:29:48,679 --> 00:29:55,610
them how it works oh it's alright so you

00:29:51,620 --> 00:30:01,100
have saw everyone together so you have a

00:29:55,610 --> 00:30:03,590
package that gains a provide a feature

00:30:01,100 --> 00:30:03,980
if it just combined it's another package

00:30:03,590 --> 00:30:07,070
yes

00:30:03,980 --> 00:30:09,440
but basically yes the issue basically

00:30:07,070 --> 00:30:10,820
you need something that represents

00:30:09,440 --> 00:30:12,650
basically the space in between those

00:30:10,820 --> 00:30:18,010
packages for example I have a document

00:30:12,650 --> 00:30:18,010
generator that gains PDF supportive PDF

00:30:18,370 --> 00:30:22,970
so so obvious thing is of course have

00:30:21,050 --> 00:30:25,309
been having us a small package that

00:30:22,970 --> 00:30:29,270
WordPress installs bridge which is

00:30:25,309 --> 00:30:33,550
annoying but obvious it works and so how

00:30:29,270 --> 00:30:33,550
do you do this it will in rust

00:30:38,429 --> 00:30:45,470
requirements like I need which means

00:31:00,769 --> 00:31:05,970
that we wrap that in rounds and safe

00:31:03,179 --> 00:31:08,220
with the feature clip rate which means

00:31:05,970 --> 00:31:10,230
that the package must egg match the

00:31:08,220 --> 00:31:11,999
version clause which binds to one

00:31:10,230 --> 00:31:14,249
package one package must satisfy both

00:31:11,999 --> 00:31:16,230
clauses and then this said that after

00:31:14,249 --> 00:31:18,090
that resolved then it checks against the

00:31:16,230 --> 00:31:21,119
second clause which is the feature that

00:31:18,090 --> 00:31:22,740
we actually request so then but so so

00:31:21,119 --> 00:31:24,509
you but you're doing this in the

00:31:22,740 --> 00:31:26,669
requirement right you're doing the

00:31:24,509 --> 00:31:28,590
require so that's basically don't press

00:31:26,669 --> 00:31:36,499
it together thing off what he wants

00:31:28,590 --> 00:31:36,499
Frank he wants a provide everybody wants

00:31:37,850 --> 00:31:44,070
putting it as a boolean provide be too

00:31:41,999 --> 00:31:47,340
catastrophic

00:31:44,070 --> 00:31:49,979
property side would be can we gain the

00:31:47,340 --> 00:31:56,309
new thing for rpms

00:31:49,979 --> 00:31:58,440
that specify extra features or I said

00:31:56,309 --> 00:32:01,080
like Justin overkill and this is just

00:31:58,440 --> 00:32:02,399
stickers you can probably just right

00:32:01,080 --> 00:32:12,119
around my product creates this

00:32:02,399 --> 00:32:13,979
application you can actually do so the

00:32:12,119 --> 00:32:18,769
colonel does with a bunch of actually a

00:32:13,979 --> 00:32:39,929
bunch of packages have this even worse

00:32:18,769 --> 00:32:42,389
to debug in full packages so create the

00:32:39,929 --> 00:32:43,769
sub packages we were you're gonna I'm

00:32:42,389 --> 00:32:47,460
gonna have to write a description about

00:32:43,769 --> 00:32:51,149
this for you because like we were so so

00:32:47,460 --> 00:32:57,419
basically automatic package creationists

00:32:51,149 --> 00:32:58,830
online like 4.1 if not really gifted a

00:32:57,419 --> 00:33:03,059
couple of open questions how to actually

00:32:58,830 --> 00:33:05,399
do that what and they have been

00:33:03,059 --> 00:33:10,409
discussion with panel if we really want

00:33:05,399 --> 00:33:12,179
to do that because some so it basic is

00:33:10,409 --> 00:33:13,679
it's one of those control questions the

00:33:12,179 --> 00:33:16,200
questions who's controlling how the

00:33:13,679 --> 00:33:18,090
package is going to look like is it in

00:33:16,200 --> 00:33:19,460
control of the package are orsakon the

00:33:18,090 --> 00:33:23,369
control of the distribution that

00:33:19,460 --> 00:33:26,399
provides like the patterns for some

00:33:23,369 --> 00:33:28,610
packages or is it what's involved a

00:33:26,399 --> 00:33:31,490
memorize

00:33:28,610 --> 00:33:33,980
so that's all still to be determined

00:33:31,490 --> 00:33:36,169
determined yeah so a lot of things is

00:33:33,980 --> 00:33:38,600
that I'm going to look into writing like

00:33:36,169 --> 00:33:40,399
at least a design proposal for Florian

00:33:38,600 --> 00:33:43,010
to figure out like whether this will

00:33:40,399 --> 00:33:44,630
actually be workable in a way that

00:33:43,010 --> 00:33:46,640
doesn't make everyone's heads explode

00:33:44,630 --> 00:33:47,779
for having the sub package generation

00:33:46,640 --> 00:33:49,730
because it's actually something I want

00:33:47,779 --> 00:33:51,559
to because he won the distribution that

00:33:49,730 --> 00:33:53,480
worked in mafia and we split out every

00:33:51,559 --> 00:33:56,350
goddamn librarians on the sub package

00:33:53,480 --> 00:33:58,700
and so it takes a lot of work and it's a

00:33:56,350 --> 00:34:00,500
boilerplate and I don't like doing it

00:33:58,700 --> 00:34:02,990
and I just would like it to be automatic

00:34:00,500 --> 00:34:05,539
and that's with Python stuff with Perl

00:34:02,990 --> 00:34:07,370
stuff libraries they give me get the

00:34:05,539 --> 00:34:10,040
list of stuff I can just get pretty big

00:34:07,370 --> 00:34:13,369
once you start you know dealing you

00:34:10,040 --> 00:34:16,669
could have also like spent out instead

00:34:13,369 --> 00:34:20,440
of libraries like noir yeah files and

00:34:16,669 --> 00:34:24,470
stuff like it's document documentation

00:34:20,440 --> 00:34:27,830
language specs automatically there's a

00:34:24,470 --> 00:34:36,349
lot of things that can be averaged it's

00:34:27,830 --> 00:34:38,000
just a matter of like the problem

00:34:36,349 --> 00:34:41,320
basically is that the spec file itself

00:34:38,000 --> 00:34:45,440
is basically oblivious of how actually

00:34:41,320 --> 00:34:47,210
package looks so you don't have two

00:34:45,440 --> 00:34:49,070
finalists this is only generated

00:34:47,210 --> 00:34:52,849
basically after the spec file is power

00:34:49,070 --> 00:34:56,500
so questions what's the workflow there

00:34:52,849 --> 00:34:56,500
but at some point

00:35:04,069 --> 00:35:09,259
well it makes sense to kind of fertilize

00:35:17,960 --> 00:35:24,359
yeah I think we might mean to

00:35:21,329 --> 00:35:27,359
implemented using factors for our

00:35:24,359 --> 00:35:30,630
respective generator first if we save

00:35:27,359 --> 00:35:32,759
stuff actually works this way and then

00:35:30,630 --> 00:35:35,900
compare notes and try to put some

00:35:32,759 --> 00:35:40,349
solution so if you want a little Anthony

00:35:35,900 --> 00:35:41,730
inspect generator tool what this boring

00:35:40,349 --> 00:35:44,279
is going to kill me for mentioning this

00:35:41,730 --> 00:35:47,099
auto spec is actually one example this

00:35:44,279 --> 00:35:48,990
is from Intel and what auto spec does is

00:35:47,099 --> 00:35:50,849
it builds the package over and over

00:35:48,990 --> 00:35:53,009
again it analyzes the output every time

00:35:50,849 --> 00:35:54,809
it changes the options to figure out

00:35:53,009 --> 00:35:57,630
what all the sub packages are following

00:35:54,809 --> 00:35:59,279
a pattern list to identify how it's

00:35:57,630 --> 00:36:01,259
constructed and it ultimately produces

00:35:59,279 --> 00:36:03,480
the final RPM with the rules set up the

00:36:01,259 --> 00:36:05,970
descriptions done license determined and

00:36:03,480 --> 00:36:08,309
then it spits out everything internally

00:36:05,970 --> 00:36:11,250
consistent but it takes hundreds of runs

00:36:08,309 --> 00:36:13,589
to get some packages together there this

00:36:11,250 --> 00:36:15,660
is the last one he wants to do this

00:36:13,589 --> 00:36:17,490
because the problem with it is you're

00:36:15,660 --> 00:36:21,150
talking about mechanically understanding

00:36:17,490 --> 00:36:23,789
software and so the the reason we're not

00:36:21,150 --> 00:36:25,680
talking about full-blown we don't we

00:36:23,789 --> 00:36:28,790
have one line and then spec magically

00:36:25,680 --> 00:36:33,880
happens is because of that

00:36:28,790 --> 00:36:44,060
no no what I want to just basically take

00:36:33,880 --> 00:37:06,800
files and push it to the well yes we

00:36:44,060 --> 00:37:10,340
have yeah - I mean if you want to push

00:37:06,800 --> 00:37:12,500
that metadata there than sure it's

00:37:10,340 --> 00:37:18,890
probably not a bad thing you know so a

00:37:12,500 --> 00:37:23,770
problem and the Python ecosystem OPM has

00:37:18,890 --> 00:37:23,770
does some things right oh it's so much

00:37:27,340 --> 00:37:33,380
depends packaging systems can still

00:37:30,710 --> 00:37:43,570
learn a trick or two like doing proper

00:37:33,380 --> 00:37:43,570
dependencies example religious

00:37:45,890 --> 00:38:00,260
Jem's copper is like 80,000 keys if the

00:37:55,910 --> 00:38:01,160
policy of rubygems is you don't state

00:38:00,260 --> 00:38:05,660
license

00:38:01,160 --> 00:38:11,140
it means proprietor so we get respect

00:38:05,660 --> 00:38:15,200
actually and and at that point and

00:38:11,140 --> 00:38:19,780
project to proceed so if we somehow

00:38:15,200 --> 00:38:23,390
ahead for example for purchase the

00:38:19,780 --> 00:38:24,970
license back to the ruby gems that will

00:38:23,390 --> 00:38:28,460
be awesome

00:38:24,970 --> 00:38:31,430
even for few hundred packages that will

00:38:28,460 --> 00:38:34,580
be also so if you go started in fighting

00:38:31,430 --> 00:38:43,369
one you will you will have some how to

00:38:34,580 --> 00:38:46,009
do that every single distribution

00:38:43,369 --> 00:38:48,380
they actually used different licenses so

00:38:46,009 --> 00:38:48,920
for example and though for us enough

00:38:48,380 --> 00:38:51,890
shame though

00:38:48,920 --> 00:38:53,170
nowadays there is a check for SPD's it

00:38:51,890 --> 00:39:02,650
doesn't mean the

00:38:53,170 --> 00:39:09,549
because a cell-base 2.0 is oh you can

00:39:02,650 --> 00:39:11,950
always do some translation and license

00:39:09,549 --> 00:39:16,299
actually so if you find in Ventura that

00:39:11,950 --> 00:39:22,150
the license is GPL it's only missing the

00:39:16,299 --> 00:39:24,309
metadata yeah well the problem with that

00:39:22,150 --> 00:39:26,829
isn't actually your case is absolutely

00:39:24,309 --> 00:39:29,109
fine and so unfortunately is this was a

00:39:26,829 --> 00:39:31,869
bad example that they good example where

00:39:29,109 --> 00:39:33,819
this goes horribly wrong is BSD and MIT

00:39:31,869 --> 00:39:34,990
license is where Thomas going to drink

00:39:33,819 --> 00:39:38,260
because there's almost hundred to

00:39:34,990 --> 00:39:40,000
preparing to all those and the the

00:39:38,260 --> 00:39:42,160
problem with that is that in SPG

00:39:40,000 --> 00:39:44,740
excellent every single bloody variant

00:39:42,160 --> 00:39:46,960
has its own tag and the distributions

00:39:44,740 --> 00:39:49,210
that do use us PDX this problem is fine

00:39:46,960 --> 00:39:51,640
they can map up and down or sideways and

00:39:49,210 --> 00:39:54,250
whatever but in the Dora and machi land

00:39:51,640 --> 00:39:56,859
where we use the Fedora tank system if

00:39:54,250 --> 00:39:59,500
we are not insane enough to have to like

00:39:56,859 --> 00:40:02,890
try to identify every goddamn flavor we

00:39:59,500 --> 00:40:04,660
just call it BSD and MIT and all today

00:40:02,890 --> 00:40:08,259
but this means that our data is actually

00:40:04,660 --> 00:40:10,180
inadequate for upstream systems so like

00:40:08,259 --> 00:40:13,029
that that that's one of the reasons why

00:40:10,180 --> 00:40:14,529
this becomes a big problem because we

00:40:13,029 --> 00:40:15,940
decide that we're going to move to s P

00:40:14,529 --> 00:40:17,710
DX stuff which is a conversation that

00:40:15,940 --> 00:40:20,470
keeps happening over and over again over

00:40:17,710 --> 00:40:22,000
again yes I know I know I actually

00:40:20,470 --> 00:40:23,820
instigated one of the more recent ones

00:40:22,000 --> 00:40:27,900
when we were starting to talk about Ross

00:40:23,820 --> 00:40:29,370
and yeah that's a conversation but if we

00:40:27,900 --> 00:40:30,960
want to start talking about doing that

00:40:29,370 --> 00:40:33,540
which is a different type of problem

00:40:30,960 --> 00:40:34,830
then that makes our data a little bit

00:40:33,540 --> 00:40:37,650
more valuable if we want to push that

00:40:34,830 --> 00:40:41,130
into Python or well Python uses irises

00:40:37,650 --> 00:40:43,110
deletions different rupee and all the

00:40:41,130 --> 00:40:44,730
other ones it would it would make sense

00:40:43,110 --> 00:40:47,040
in that case but like there's no meaning

00:40:44,730 --> 00:40:49,170
when it comes to pushing stuff like

00:40:47,040 --> 00:40:50,520
license data backwards and forwards

00:40:49,170 --> 00:40:51,840
because you can't guarantee that they're

00:40:50,520 --> 00:40:55,110
going to be consistent between the two

00:40:51,840 --> 00:40:56,850
systems I personally like for some of

00:40:55,110 --> 00:40:58,140
the big major ones like the copyleft

00:40:56,850 --> 00:41:00,630
ones and the ones that are formulated

00:40:58,140 --> 00:41:03,750
for missive licenses yes but everything

00:41:00,630 --> 00:41:05,100
else no and that's that's the problem is

00:41:03,750 --> 00:41:07,230
that increasingly you have more of the

00:41:05,100 --> 00:41:09,420
less formulaic ones than the more

00:41:07,230 --> 00:41:11,480
formulaic ones because they're just

00:41:09,420 --> 00:41:13,380
that's just what people want to do now

00:41:11,480 --> 00:41:15,960
you know being mostly corporate

00:41:13,380 --> 00:41:17,250
environment helpers that feel more for

00:41:15,960 --> 00:41:19,620
that kind of stuff that's what they mean

00:41:17,250 --> 00:41:21,050
ports so it becomes actually harder not

00:41:19,620 --> 00:41:24,650
easier for us to be able to provide

00:41:21,050 --> 00:41:24,650
value in that sense

00:41:30,540 --> 00:41:36,930
we just showed it to the audience

00:41:33,130 --> 00:41:52,950
project sham which is my pet project

00:41:36,930 --> 00:41:52,950

YouTube URL: https://www.youtube.com/watch?v=ZWhqC0rk8C4


