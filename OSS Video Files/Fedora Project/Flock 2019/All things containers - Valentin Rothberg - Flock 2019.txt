Title: All things containers - Valentin Rothberg - Flock 2019
Publication date: 2019-08-28
Playlist: Flock 2019
Description: 
	A deep dive into untold features of Podman, Buildah and Skopeo.

--
Recordings of talks at Flock are a community effort. Unfortunately not everything works perfectly every time. If you're interested in helping us improve, let us know.
Captions: 
	00:00:01,520 --> 00:00:08,930
hi I'm van T I'm engineer in the

00:00:05,750 --> 00:00:12,919
container inches engines team at red

00:00:08,930 --> 00:00:15,019
head and my talk so when proposing the

00:00:12,919 --> 00:00:18,650
talk I thought that the community

00:00:15,019 --> 00:00:21,080
already knows part man at least we're

00:00:18,650 --> 00:00:25,699
blogging a lot about it it's also now in

00:00:21,080 --> 00:00:28,189
rel officially four for some time so I

00:00:25,699 --> 00:00:29,779
wanted to dedicate this talk and talk a

00:00:28,189 --> 00:00:31,759
little bit about the things that we

00:00:29,779 --> 00:00:36,140
usually don't present in the talks

00:00:31,759 --> 00:00:39,230
because we introduced the tool or the

00:00:36,140 --> 00:00:41,810
tools we talked about how new users can

00:00:39,230 --> 00:00:45,230
approach it or users coming from docker

00:00:41,810 --> 00:00:50,830
or other container tools can migrate to

00:00:45,230 --> 00:00:53,480
it so the the scheduling of the talks is

00:00:50,830 --> 00:00:56,000
not ideal in the sense that the follow

00:00:53,480 --> 00:00:58,610
up talk will be how to replace docker

00:00:56,000 --> 00:01:01,400
apartment with docker or daughter with

00:00:58,610 --> 00:01:03,590
portman I'm gonna give the next two

00:01:01,400 --> 00:01:06,530
talks as well because unfortunately Dan

00:01:03,590 --> 00:01:09,469
Walsh didn't make it he had some some

00:01:06,530 --> 00:01:12,829
problems he wanted to come or to fly via

00:01:09,469 --> 00:01:14,270
India but for one one reason or another

00:01:12,829 --> 00:01:16,929
his visa

00:01:14,270 --> 00:01:21,189
didn't work so all the follow-up flights

00:01:16,929 --> 00:01:23,600
didn't work so I'm replacing him I I

00:01:21,189 --> 00:01:26,090
hope this doesn't scare you off I'm not

00:01:23,600 --> 00:01:27,890
it as entertaining as then but I'm a

00:01:26,090 --> 00:01:30,229
little bit taller with more hair so I'm

00:01:27,890 --> 00:01:30,909
not sure if that if that counts for

00:01:30,229 --> 00:01:35,020
something

00:01:30,909 --> 00:01:38,630
so I briefly mentioned that already

00:01:35,020 --> 00:01:41,539
redhead or Fedora as much as everywhere

00:01:38,630 --> 00:01:43,999
else containerization started with

00:01:41,539 --> 00:01:46,609
docker and this is really a great

00:01:43,999 --> 00:01:49,999
contribution and they've done a an

00:01:46,609 --> 00:01:54,740
awesome job making it approachable and

00:01:49,999 --> 00:01:58,130
usable by others and over time the

00:01:54,740 --> 00:01:59,810
requirements grew more use cases wanted

00:01:58,130 --> 00:02:02,630
to be met by customers and also the

00:01:59,810 --> 00:02:05,149
community so I compared it a little bit

00:02:02,630 --> 00:02:08,690
to a Swiss Army knife and the one

00:02:05,149 --> 00:02:10,850
displayed here actually exists I think

00:02:08,690 --> 00:02:12,080
it costs over a thousand euros and is

00:02:10,850 --> 00:02:15,320
one point

00:02:12,080 --> 00:02:18,320
or to kilograms so where I'm pointing at

00:02:15,320 --> 00:02:22,090
is the more features you support with

00:02:18,320 --> 00:02:24,800
one tool means the bigger it gets so

00:02:22,090 --> 00:02:28,790
supporting everything comes at a cost

00:02:24,800 --> 00:02:33,140
and and Red Hat or the team especially

00:02:28,790 --> 00:02:35,060
then reflected a lot on about it so when

00:02:33,140 --> 00:02:37,400
you look at docker now the situation

00:02:35,060 --> 00:02:40,130
improved a little bit but it's being

00:02:37,400 --> 00:02:43,540
used everywhere for all use cases on the

00:02:40,130 --> 00:02:47,450
desktop on the server in kubernetes

00:02:43,540 --> 00:02:48,830
which is not true necessarily for all

00:02:47,450 --> 00:02:51,320
deployments anymore because there's

00:02:48,830 --> 00:02:54,710
container D which is more targeted so

00:02:51,320 --> 00:02:57,200
this argument may not count anymore but

00:02:54,710 --> 00:03:01,550
it it's basically meant to support

00:02:57,200 --> 00:03:04,880
everything and especially dan sat down

00:03:01,550 --> 00:03:07,190
and assembled a team to work a little

00:03:04,880 --> 00:03:11,270
bit and reflect on how can the future

00:03:07,190 --> 00:03:14,480
look like what can we need and basically

00:03:11,270 --> 00:03:17,510
the philosophy of reddit is to have no

00:03:14,480 --> 00:03:19,690
one-size-fits-all solution but to have a

00:03:17,510 --> 00:03:22,670
set of dedicated and specialized tools

00:03:19,690 --> 00:03:25,970
which are based on open standards namely

00:03:22,670 --> 00:03:28,370
the open container initiative still

00:03:25,970 --> 00:03:32,920
being backwards compatible to what has

00:03:28,370 --> 00:03:35,600
been existing or predates D the OCI

00:03:32,920 --> 00:03:39,860
docker for instance the different

00:03:35,600 --> 00:03:41,930
formats docker schema to the image

00:03:39,860 --> 00:03:44,060
format for instance everything should be

00:03:41,930 --> 00:03:46,400
developed in the open right Red Hat is

00:03:44,060 --> 00:03:49,489
an open source company and all these

00:03:46,400 --> 00:03:51,170
projects are really open for

00:03:49,489 --> 00:03:53,090
contributions from outside this is

00:03:51,170 --> 00:03:55,070
actually how how I joined the team I

00:03:53,090 --> 00:03:56,390
came from another company and I like the

00:03:55,070 --> 00:04:00,290
team so much that I said this is where

00:03:56,390 --> 00:04:02,870
where I want to work and also to have a

00:04:00,290 --> 00:04:07,130
certain degree of interoperability among

00:04:02,870 --> 00:04:08,959
these tools so if we really want to have

00:04:07,130 --> 00:04:11,720
something like this but with a smaller

00:04:08,959 --> 00:04:14,120
set of tools they need to be able or

00:04:11,720 --> 00:04:16,580
users and we need to be able to compose

00:04:14,120 --> 00:04:20,510
them in a way to really fit fit all the

00:04:16,580 --> 00:04:22,970
needs so cryo in this case I'm not going

00:04:20,510 --> 00:04:25,750
to talk much about cryo today because

00:04:22,970 --> 00:04:28,280
it's intentionally

00:04:25,750 --> 00:04:30,710
something boring why it's something

00:04:28,280 --> 00:04:34,130
boring because the only use case is

00:04:30,710 --> 00:04:37,460
kubernetes nothing more nothing less

00:04:34,130 --> 00:04:39,740
so this is a really good example of

00:04:37,460 --> 00:04:42,680
having a specialized and any use case

00:04:39,740 --> 00:04:45,800
dedicated to so what it is it's

00:04:42,680 --> 00:04:47,600
basically a container runtime in for

00:04:45,800 --> 00:04:49,790
kubernetes so if you're a kubernetes

00:04:47,600 --> 00:04:51,770
user you don't have to worry about this

00:04:49,790 --> 00:04:53,540
you don't you actually shouldn't care

00:04:51,770 --> 00:04:55,580
this this is why we intentionally

00:04:53,540 --> 00:04:59,270
advertise it as being something really

00:04:55,580 --> 00:05:02,780
boring this year in April it joined the

00:04:59,270 --> 00:05:04,850
CN CF which was a really really good

00:05:02,780 --> 00:05:09,950
thing for the project because it gains a

00:05:04,850 --> 00:05:12,050
lot of visibility the CN CF is a great

00:05:09,950 --> 00:05:14,930
platform that also supports the growth

00:05:12,050 --> 00:05:16,430
of the tools and it's also a certain

00:05:14,930 --> 00:05:19,430
complement because it shows a certain

00:05:16,430 --> 00:05:22,310
maturity of the project and also the

00:05:19,430 --> 00:05:24,800
commitment of the core maintainer

00:05:22,310 --> 00:05:27,950
to the overall community it supports all

00:05:24,800 --> 00:05:30,110
OCI compatible container images also

00:05:27,950 --> 00:05:33,140
including the older docker formats that

00:05:30,110 --> 00:05:35,300
I was mentioning before it can talk to

00:05:33,140 --> 00:05:39,290
basically any any container registry

00:05:35,300 --> 00:05:40,760
that is out there there's also different

00:05:39,290 --> 00:05:43,340
container runtimes and here you see a

00:05:40,760 --> 00:05:46,220
certain redundancy in the term run time

00:05:43,340 --> 00:05:47,960
because cryo is already a run time so

00:05:46,220 --> 00:05:49,730
what is a container run time when it's

00:05:47,960 --> 00:05:51,650
already a run time this is why

00:05:49,730 --> 00:05:54,350
especially Dan advertises the

00:05:51,650 --> 00:05:57,110
terminology of a container engine which

00:05:54,350 --> 00:05:59,720
cryo apartment docker actually are so

00:05:57,110 --> 00:06:02,660
they basically take care of the images

00:05:59,720 --> 00:06:05,780
and they instruct other tools to

00:06:02,660 --> 00:06:07,520
actually do all the heavy lifting so

00:06:05,780 --> 00:06:11,270
their container run time something like

00:06:07,520 --> 00:06:14,720
run CC run then I think from Google

00:06:11,270 --> 00:06:16,430
dares to run SC also a bunch a bunch of

00:06:14,720 --> 00:06:18,920
container run times which actually take

00:06:16,430 --> 00:06:21,740
a bundle and execute the real container

00:06:18,920 --> 00:06:25,120
so this tool actually executes the

00:06:21,740 --> 00:06:29,030
processes that we see on the on the host

00:06:25,120 --> 00:06:31,850
there's over 100 contributors more than

00:06:29,030 --> 00:06:33,879
90 releases I guess now we are over 110

00:06:31,850 --> 00:06:36,399
releases actually and

00:06:33,879 --> 00:06:38,919
we have actually there's something miss

00:06:36,399 --> 00:06:43,779
missing so on the one hundred fifty or

00:06:38,919 --> 00:06:47,800
fifteen caper Pyaar means tests so we

00:06:43,779 --> 00:06:51,219
run a lot a lot of tests there is a huge

00:06:47,800 --> 00:06:52,929
amount of unit tests of mocking tests

00:06:51,219 --> 00:06:55,240
and we actually run the end-to-end tests

00:06:52,929 --> 00:06:57,550
of kubernetes upstream to make sure

00:06:55,240 --> 00:07:01,199
we're not regressing on something in

00:06:57,550 --> 00:07:03,580
fact this week we actually found

00:07:01,199 --> 00:07:05,409
regression in the kubernetes upstream

00:07:03,580 --> 00:07:07,779
tests so this is really cool this is

00:07:05,409 --> 00:07:09,849
also contributing something back to what

00:07:07,779 --> 00:07:13,360
we consume so there's a really good

00:07:09,849 --> 00:07:15,669
thing going on there and although

00:07:13,360 --> 00:07:18,189
sometimes on Twitter it's advertised as

00:07:15,669 --> 00:07:20,529
only being retina thing not necessarily

00:07:18,189 --> 00:07:22,719
from reddit but competitors actually

00:07:20,529 --> 00:07:26,399
there's really a collaboration across

00:07:22,719 --> 00:07:29,610
the industry so Souza is working

00:07:26,399 --> 00:07:35,259
actually a core maintainer Intel IBM

00:07:29,610 --> 00:07:37,959
lived and nowadays also since IBM

00:07:35,259 --> 00:07:39,939
acquired red head there's a lot of good

00:07:37,959 --> 00:07:43,119
things and code of collaboration going

00:07:39,939 --> 00:07:45,490
on I guess I need to hurry a little bit

00:07:43,119 --> 00:07:48,610
more right I like I like talking about

00:07:45,490 --> 00:07:50,469
these tools so but there's more tools

00:07:48,610 --> 00:07:51,699
because there's way more use cases and

00:07:50,469 --> 00:07:55,439
those are the tools that I'm going to

00:07:51,699 --> 00:07:57,999
present today there's kopi Oh which is

00:07:55,439 --> 00:08:01,209
responsible or meant for distributing

00:07:57,999 --> 00:08:03,879
images and managing them it allows for

00:08:01,209 --> 00:08:07,269
converting them between different

00:08:03,879 --> 00:08:09,399
formats I'm gonna talk about scope EO at

00:08:07,269 --> 00:08:12,129
the end of the talk then there's pot man

00:08:09,399 --> 00:08:14,860
which is yes that's really a container

00:08:12,129 --> 00:08:17,259
engine and it's responsible for the

00:08:14,860 --> 00:08:19,539
container for containers and pods so

00:08:17,259 --> 00:08:22,029
pods comes from kubernetes which is more

00:08:19,539 --> 00:08:24,399
or less a glorified group of containers

00:08:22,029 --> 00:08:27,219
sharing certain resources namespaces may

00:08:24,399 --> 00:08:29,979
be the pit or network namespace and then

00:08:27,219 --> 00:08:32,199
we have build up which is responsible

00:08:29,979 --> 00:08:34,269
for building container images so all

00:08:32,199 --> 00:08:36,509
share the same libraries and are

00:08:34,269 --> 00:08:39,370
developed upstream at github.com

00:08:36,509 --> 00:08:42,459
containers project by sharing all the

00:08:39,370 --> 00:08:44,530
libraries we achieve especially the

00:08:42,459 --> 00:08:48,280
interoperability part that

00:08:44,530 --> 00:08:50,110
I was referring to before and also here

00:08:48,280 --> 00:08:52,930
it's a collaboration across the industry

00:08:50,110 --> 00:08:55,510
most maintain errs our redhead but

00:08:52,930 --> 00:08:57,460
they're highly non-trivial contributions

00:08:55,510 --> 00:08:59,830
from outside and more and more show

00:08:57,460 --> 00:09:02,650
interest in to helping maintaining the

00:08:59,830 --> 00:09:05,590
tools and also across Linux

00:09:02,650 --> 00:09:07,390
distributions so I guess the hardest

00:09:05,590 --> 00:09:10,660
thing is getting a package into Debian

00:09:07,390 --> 00:09:14,340
because the packaging go tools there is

00:09:10,660 --> 00:09:17,770
inherently different to what Fedora or

00:09:14,340 --> 00:09:20,590
openSUSE are doing so when you know are

00:09:17,770 --> 00:09:22,120
you familiar with go who is who's

00:09:20,590 --> 00:09:26,230
familiar with go or who is not familiar

00:09:22,120 --> 00:09:29,710
with go ok that's that's good only only

00:09:26,230 --> 00:09:32,830
few don't know this pain so in and go

00:09:29,710 --> 00:09:35,380
all dependencies or there's different

00:09:32,830 --> 00:09:38,110
different ways to to compile a GoPro

00:09:35,380 --> 00:09:40,660
program but conventionally all

00:09:38,110 --> 00:09:43,150
dependencies are put in all dependencies

00:09:40,660 --> 00:09:47,740
are put into a folder in the root of the

00:09:43,150 --> 00:09:50,340
project which is called vendor and this

00:09:47,740 --> 00:09:53,440
means that there's a lot of redundancy

00:09:50,340 --> 00:09:55,480
which makes sense right so pot man

00:09:53,440 --> 00:09:57,280
vendors containers image the image

00:09:55,480 --> 00:10:00,910
library the storage library build a

00:09:57,280 --> 00:10:04,240
builder vendors the same and all of the

00:10:00,910 --> 00:10:06,220
code is statically compiled so from a

00:10:04,240 --> 00:10:08,590
traditional point of view from a Linux

00:10:06,220 --> 00:10:11,560
distribution point of view this is this

00:10:08,590 --> 00:10:15,340
is a little bit terrifying because right

00:10:11,560 --> 00:10:19,840
ideally we have dynamically linked

00:10:15,340 --> 00:10:22,980
binaries we just update the binary sorry

00:10:19,840 --> 00:10:27,760
the library that my might have a

00:10:22,980 --> 00:10:30,700
vulnerability or a bug so this make

00:10:27,760 --> 00:10:34,900
makes upgrades from the distribution

00:10:30,700 --> 00:10:37,810
perspective very easy and it's it's

00:10:34,900 --> 00:10:42,610
something worth doing in in go the

00:10:37,810 --> 00:10:44,710
ecosystem ignores is mostly because of

00:10:42,610 --> 00:10:47,650
just how girl who go works go comes from

00:10:44,710 --> 00:10:49,990
from Google and they just deploy

00:10:47,650 --> 00:10:52,150
everything at once so it's a little it's

00:10:49,990 --> 00:10:55,769
inherently different to to what we are

00:10:52,150 --> 00:10:58,559
doing so

00:10:55,769 --> 00:11:00,389
apartment I was talking a little bit

00:10:58,559 --> 00:11:03,600
about it already so it's a container

00:11:00,389 --> 00:11:07,550
engine for managing containers and pots

00:11:03,600 --> 00:11:09,869
the CLI so the command-line interface is

00:11:07,550 --> 00:11:11,610
identical almost identical to the one of

00:11:09,869 --> 00:11:15,209
docker why because it's a de facto

00:11:11,610 --> 00:11:16,739
standard for managing containers most of

00:11:15,209 --> 00:11:19,230
the people who are working with

00:11:16,739 --> 00:11:21,269
containers already know it so there was

00:11:19,230 --> 00:11:24,839
no need to introduce yet another thing

00:11:21,269 --> 00:11:29,360
which makes migrations way more complex

00:11:24,839 --> 00:11:32,249
so adhering to the CLI of docker makes

00:11:29,360 --> 00:11:36,059
the transition of users and also scripts

00:11:32,249 --> 00:11:38,939
much easier and it's developed at the

00:11:36,059 --> 00:11:41,040
container slip-up project and uses the

00:11:38,939 --> 00:11:44,369
image library for the image management

00:11:41,040 --> 00:11:47,549
the storage library for local storage

00:11:44,369 --> 00:11:50,040
it's basically when you explode the

00:11:47,549 --> 00:11:52,170
container image on your hard drive it's

00:11:50,040 --> 00:11:54,179
most likely being stored there and it

00:11:52,170 --> 00:11:57,839
supports different kinds of drivers or

00:11:54,179 --> 00:12:01,439
overlay butter if as VFS and and so on

00:11:57,839 --> 00:12:03,990
also s3 and build up for building images

00:12:01,439 --> 00:12:07,790
but i've been talking enough and in the

00:12:03,990 --> 00:12:10,829
talk after i'm gonna get into the more

00:12:07,790 --> 00:12:12,959
basic tasks but now i really want to

00:12:10,829 --> 00:12:15,600
show you some some of the the features

00:12:12,959 --> 00:12:18,839
that i love but we usually don't talk

00:12:15,600 --> 00:12:21,389
about much I want to start with the plot

00:12:18,839 --> 00:12:23,910
min mount and I'm not featured so what

00:12:21,389 --> 00:12:26,759
it does it mounts the root of as on a

00:12:23,910 --> 00:12:29,759
container on the host so what what you

00:12:26,759 --> 00:12:33,660
can do is you do apartment mount then it

00:12:29,759 --> 00:12:35,759
spits out a path on your host and this

00:12:33,660 --> 00:12:38,569
is a mount point where you can access

00:12:35,759 --> 00:12:42,449
the entire route of s of the container

00:12:38,569 --> 00:12:46,259
so some some folks are asking why not

00:12:42,449 --> 00:12:49,769
just use a volume right volume there you

00:12:46,259 --> 00:12:54,269
can mount or basically the volume allows

00:12:49,769 --> 00:12:57,509
for sharing files directories entire

00:12:54,269 --> 00:13:00,059
paths among containers and also the host

00:12:57,509 --> 00:13:02,489
because in my opinion volumes are

00:13:00,059 --> 00:13:03,220
annoying to use when you want to have a

00:13:02,489 --> 00:13:06,280
lot of share

00:13:03,220 --> 00:13:07,840
right just sharing route usually don't

00:13:06,280 --> 00:13:11,920
it doesn't work because then you cannot

00:13:07,840 --> 00:13:13,780
mount anymore it's not really useful to

00:13:11,920 --> 00:13:16,120
operate on the root of s of the

00:13:13,780 --> 00:13:17,440
container because it's usually meant the

00:13:16,120 --> 00:13:20,140
other way around that you're mounting

00:13:17,440 --> 00:13:21,910
something into the container so it we

00:13:20,140 --> 00:13:24,210
come from a different different

00:13:21,910 --> 00:13:26,710
perspective a different angle here and

00:13:24,210 --> 00:13:30,040
it's generally useful for sharing data

00:13:26,710 --> 00:13:34,570
but not for altering data in a in a

00:13:30,040 --> 00:13:36,430
generic way so why not just use copy in

00:13:34,570 --> 00:13:38,590
this case because copy would just be a

00:13:36,430 --> 00:13:42,550
workaround if we edit because we first

00:13:38,590 --> 00:13:44,830
have to copy data from the container to

00:13:42,550 --> 00:13:47,920
the host and edit data and then copy

00:13:44,830 --> 00:13:50,380
copy it back with Department mount it

00:13:47,920 --> 00:13:54,250
can be as easy as display here right we

00:13:50,380 --> 00:13:57,490
run an exemplary container fit or a 30

00:13:54,250 --> 00:13:59,980
then we unshare why do we need to

00:13:57,490 --> 00:14:04,660
unshare because we are running rootless

00:13:59,980 --> 00:14:08,140
and we buy by default overlay we don't

00:14:04,660 --> 00:14:11,500
have enough rights to mount by on

00:14:08,140 --> 00:14:13,930
sharing we create a new user name space

00:14:11,500 --> 00:14:19,030
where we then have the rights to do it

00:14:13,930 --> 00:14:21,280
and yeah then we do appointment mount we

00:14:19,030 --> 00:14:25,540
get back the path which is then in the

00:14:21,280 --> 00:14:27,640
m80 variable and if i grab for s release

00:14:25,540 --> 00:14:30,280
you can see that well it's a fedora

00:14:27,640 --> 00:14:34,300
container image and this is really cool

00:14:30,280 --> 00:14:37,930
for specific use cases for instance if

00:14:34,300 --> 00:14:42,490
you have certain scripts or that you

00:14:37,930 --> 00:14:44,260
don't want to adjust to the specific

00:14:42,490 --> 00:14:45,670
container images that you're running if

00:14:44,260 --> 00:14:46,990
you want to have something generic and

00:14:45,670 --> 00:14:49,630
not specialized in the sense because you

00:14:46,990 --> 00:14:51,190
might want to run a fedora container a

00:14:49,630 --> 00:14:54,550
debian container and a Punto container

00:14:51,190 --> 00:14:56,350
arch container and you you don't want to

00:14:54,550 --> 00:14:58,120
find out about all these specifics but

00:14:56,350 --> 00:14:59,500
you know exactly the host system that

00:14:58,120 --> 00:15:02,310
it's running on this is something

00:14:59,500 --> 00:15:02,310
something really nice

00:15:13,490 --> 00:15:18,220
I forgot etc' they're in the path that's

00:15:16,519 --> 00:15:23,060
that's right

00:15:18,220 --> 00:15:25,910
so I adjusted Accord yeah so there is

00:15:23,060 --> 00:15:28,040
the e.t.c missing so we really mount the

00:15:25,910 --> 00:15:30,980
entire route of s there here in this

00:15:28,040 --> 00:15:33,350
example I I just screwed it while while

00:15:30,980 --> 00:15:35,720
copying into into the program which is

00:15:33,350 --> 00:15:37,639
generating these nice nice images here

00:15:35,720 --> 00:15:42,500
but thanks for noticing in a while I

00:15:37,639 --> 00:15:45,259
will update it then next topic is

00:15:42,500 --> 00:15:47,600
managing container images so here once

00:15:45,259 --> 00:15:50,360
on my local system I had really a lot of

00:15:47,600 --> 00:15:52,069
things going on because I use it for

00:15:50,360 --> 00:15:55,670
development I use it for running

00:15:52,069 --> 00:15:59,420
specific tools right things can can get

00:15:55,670 --> 00:16:01,129
messy and oftentimes I want to clean up

00:15:59,420 --> 00:16:03,350
but I don't want to remove everything

00:16:01,129 --> 00:16:07,930
and but I want to find out okay

00:16:03,350 --> 00:16:11,120
howhow how did I come to this and

00:16:07,930 --> 00:16:14,810
there's a pretty cool feature which has

00:16:11,120 --> 00:16:17,360
been contributed by NTP which is a

00:16:14,810 --> 00:16:20,060
company in Japan which has a very very

00:16:17,360 --> 00:16:23,600
good team which is contributing a lot in

00:16:20,060 --> 00:16:25,579
the containers ecosystem so this is

00:16:23,600 --> 00:16:29,750
called portman image tree apartment in

00:16:25,579 --> 00:16:32,630
it image tree lists or basically checks

00:16:29,750 --> 00:16:37,069
the image analyzes the layers and spits

00:16:32,630 --> 00:16:39,410
them out in a tree format so if we if we

00:16:37,069 --> 00:16:43,550
look here we first download WordPress

00:16:39,410 --> 00:16:46,459
then PHP 72 Apache and if we then run

00:16:43,550 --> 00:16:53,180
put man image tree on the WordPress

00:16:46,459 --> 00:16:58,899
image it spits out a few a few things

00:16:53,180 --> 00:17:01,040
I'm trying to use this I'm really bad

00:16:58,899 --> 00:17:03,649
okay I don't know how to use the laser

00:17:01,040 --> 00:17:07,370
pointer apparently well what you can see

00:17:03,649 --> 00:17:10,039
is the the image ID tags so all tags

00:17:07,370 --> 00:17:12,199
that are associated to the top layer of

00:17:10,039 --> 00:17:14,120
this image right one image can have

00:17:12,199 --> 00:17:18,110
multiple text those would be displayed

00:17:14,120 --> 00:17:19,910
here in a list it spits out the size so

00:17:18,110 --> 00:17:23,030
you know how big

00:17:19,910 --> 00:17:24,709
or how much disk size it consumes and

00:17:23,030 --> 00:17:28,520
then it lists the layers below and there

00:17:24,709 --> 00:17:31,160
we can see that the WordPress binary or

00:17:28,520 --> 00:17:36,080
sorry the WordPress image is based on

00:17:31,160 --> 00:17:38,720
the PHP Apache one so this is really

00:17:36,080 --> 00:17:42,770
useful to figure out which layers does

00:17:38,720 --> 00:17:44,600
my image actually use because quite

00:17:42,770 --> 00:17:47,600
often if you download something from

00:17:44,600 --> 00:17:50,330
from the web the dependencies and where

00:17:47,600 --> 00:17:54,140
it comes from is not very trivial to

00:17:50,330 --> 00:17:55,610
find out but it can also go the other

00:17:54,140 --> 00:18:00,590
way around if we want to figure out

00:17:55,610 --> 00:18:03,080
which layers require my image then we

00:18:00,590 --> 00:18:04,940
can pass the what requires option and

00:18:03,080 --> 00:18:07,490
then it goes in the other direction and

00:18:04,940 --> 00:18:10,760
this is actually really really helpful

00:18:07,490 --> 00:18:15,110
or at least for me I'm not sure if you

00:18:10,760 --> 00:18:18,290
use suffer the same use cases so I was I

00:18:15,110 --> 00:18:20,180
think I was implementing or working on a

00:18:18,290 --> 00:18:21,740
feature for the containers image library

00:18:20,180 --> 00:18:24,380
in some paths some tests were not

00:18:21,740 --> 00:18:26,840
passing any more and I knew there was

00:18:24,380 --> 00:18:28,640
something wrong with the layers and with

00:18:26,840 --> 00:18:29,890
Putman image tree I really understood

00:18:28,640 --> 00:18:33,170
what was wrong

00:18:29,890 --> 00:18:37,070
so also during development it can can be

00:18:33,170 --> 00:18:39,110
really really helpful so in a nutshell

00:18:37,070 --> 00:18:40,970
put my image tree prints the layer

00:18:39,110 --> 00:18:43,910
hierarchy of an image in a tree format

00:18:40,970 --> 00:18:47,000
it can show you which layers does my

00:18:43,910 --> 00:18:48,890
image consists of so basically explode

00:18:47,000 --> 00:18:51,650
everything there we could find out that

00:18:48,890 --> 00:18:53,840
WordPress is using the PHP Apache one

00:18:51,650 --> 00:18:55,910
and also to figure out which layers

00:18:53,840 --> 00:18:58,340
actually use me or the image I'm

00:18:55,910 --> 00:19:01,100
currently looking at it also matches

00:18:58,340 --> 00:19:06,860
layers to text so when you look here you

00:19:01,100 --> 00:19:09,860
see the top layer of line at the end but

00:19:06,860 --> 00:19:13,130
this only works when the image is pulled

00:19:09,860 --> 00:19:15,050
so if if we don't know the tag we may

00:19:13,130 --> 00:19:17,450
download the image from the registry or

00:19:15,050 --> 00:19:18,890
sorry the layer from the registry but to

00:19:17,450 --> 00:19:20,930
know the top layer we also need to

00:19:18,890 --> 00:19:22,400
download the image only then we have to

00:19:20,930 --> 00:19:24,550
have to knowledge in case you want to

00:19:22,400 --> 00:19:27,170
use it and ask ok I downloaded it

00:19:24,550 --> 00:19:30,350
Valentin said this is going to be there

00:19:27,170 --> 00:19:32,060
but you need to really both sorry both

00:19:30,350 --> 00:19:35,840
images this is why we

00:19:32,060 --> 00:19:37,670
why we pull both here too and it can

00:19:35,840 --> 00:19:40,010
help in understanding the dependencies

00:19:37,670 --> 00:19:42,080
among the images and it can also really

00:19:40,010 --> 00:19:44,870
help in image builds so I'm building

00:19:42,080 --> 00:19:46,940
something let's assume we have a complex

00:19:44,870 --> 00:19:49,490
talker file and want to see I want to

00:19:46,940 --> 00:19:51,950
see really what what the image is is

00:19:49,490 --> 00:19:54,770
made of or how the layer hierarchy looks

00:19:51,950 --> 00:19:57,680
like without inspecting the image and

00:19:54,770 --> 00:19:59,270
then trying to extract it from there and

00:19:57,680 --> 00:20:01,370
as I've mentioned before it already

00:19:59,270 --> 00:20:04,220
helped me really key back during

00:20:01,370 --> 00:20:07,490
development the next the next feature

00:20:04,220 --> 00:20:09,590
here is one of my favorites if I I love

00:20:07,490 --> 00:20:12,580
all of them but if I would choose I may

00:20:09,590 --> 00:20:16,160
love this a little bit a little bit more

00:20:12,580 --> 00:20:16,490
some people think I'm insane because of

00:20:16,160 --> 00:20:18,830
it

00:20:16,490 --> 00:20:19,900
but I really see a beauty in it so let's

00:20:18,830 --> 00:20:22,460
get straight to it

00:20:19,900 --> 00:20:23,420
first we see the docker file right we're

00:20:22,460 --> 00:20:26,930
from fedora

00:20:23,420 --> 00:20:30,770
so we base our image on the Fedora 30 31

00:20:26,930 --> 00:20:33,410
and then I'm adding a label here so we

00:20:30,770 --> 00:20:34,730
say label echo label so this is

00:20:33,410 --> 00:20:37,250
basically the key everything that

00:20:34,730 --> 00:20:41,390
follows is the value of the label

00:20:37,250 --> 00:20:44,600
portman run image echo hello flock then

00:20:41,390 --> 00:20:47,660
we build it with department partment

00:20:44,600 --> 00:20:51,050
build and when I execute apartment

00:20:47,660 --> 00:20:54,670
container run label and specify a label

00:20:51,050 --> 00:20:58,820
like a key to look for and an image

00:20:54,670 --> 00:21:02,270
portman will parse the config of the

00:20:58,820 --> 00:21:04,640
image look for the labels try and looks

00:21:02,270 --> 00:21:08,420
up the label that we specified and then

00:21:04,640 --> 00:21:12,320
execute the value of the label on the

00:21:08,420 --> 00:21:16,460
host so as we can see here it in this

00:21:12,320 --> 00:21:20,480
case running the image and runs echo

00:21:16,460 --> 00:21:22,550
hello flock there the problem is run

00:21:20,480 --> 00:21:26,930
label can execute any command on the

00:21:22,550 --> 00:21:31,360
host and as you may may think this is

00:21:26,930 --> 00:21:35,810
not necessarily a good thing to do but I

00:21:31,360 --> 00:21:37,850
don't suggest to abandon common sense in

00:21:35,810 --> 00:21:40,490
any case we shouldn't download or pull

00:21:37,850 --> 00:21:43,570
random images from from the web or from

00:21:40,490 --> 00:21:46,239
some registry and just blindly trusted

00:21:43,570 --> 00:21:49,479
and this is especially true for the lung

00:21:46,239 --> 00:21:51,999
run label there we really need to trust

00:21:49,479 --> 00:21:55,809
the image and we really need to know

00:21:51,999 --> 00:22:01,720
what it's going to happen why do I like

00:21:55,809 --> 00:22:05,350
it so much because it somehow lifts what

00:22:01,720 --> 00:22:09,729
an image can do usually the image

00:22:05,350 --> 00:22:12,549
specification of the docker format or

00:22:09,729 --> 00:22:14,940
also the open OCI format is a little bit

00:22:12,549 --> 00:22:19,269
limited and this is intentional because

00:22:14,940 --> 00:22:22,389
the standard or the OCI is meant to be

00:22:19,269 --> 00:22:24,669
the sorry I'm not native the smallest

00:22:22,389 --> 00:22:26,559
common denominator right it should be

00:22:24,669 --> 00:22:29,700
something that everybody can use and is

00:22:26,559 --> 00:22:33,309
less specialized as possible to not

00:22:29,700 --> 00:22:35,320
close doors at the beginning so what the

00:22:33,309 --> 00:22:37,570
image when we create an image we can

00:22:35,320 --> 00:22:40,599
specify the commands inside we can

00:22:37,570 --> 00:22:43,269
specify the environment variables we can

00:22:40,599 --> 00:22:47,950
add a lot of metadata as we do for

00:22:43,269 --> 00:22:50,799
instance with the labels and a bunch of

00:22:47,950 --> 00:22:55,749
security switches for instance running

00:22:50,799 --> 00:22:58,869
it privileged I'm not actually sure the

00:22:55,749 --> 00:23:03,429
the a bomber profile but it's it's very

00:22:58,869 --> 00:23:06,639
limited in the sense with using run

00:23:03,429 --> 00:23:09,729
label we can add a lot more information

00:23:06,639 --> 00:23:12,970
to the image so if we know that a

00:23:09,729 --> 00:23:15,909
certain image must be executed by the

00:23:12,970 --> 00:23:17,529
container engine in a specific way so

00:23:15,909 --> 00:23:19,299
the container engine department or

00:23:17,529 --> 00:23:22,330
docker they have a lot of switches

00:23:19,299 --> 00:23:25,299
basically that we need to specify things

00:23:22,330 --> 00:23:29,169
maybe mount points maybe an embalmer

00:23:25,299 --> 00:23:32,529
profile and as olynyk's label ii

00:23:29,169 --> 00:23:34,749
profiles things like that or if the

00:23:32,529 --> 00:23:37,149
image has certain requirements on the

00:23:34,749 --> 00:23:39,909
host where it's being executed maybe we

00:23:37,149 --> 00:23:43,749
need to install a certain package on the

00:23:39,909 --> 00:23:45,940
host for whatever reason then run label

00:23:43,749 --> 00:23:49,149
is a really really great way of doing it

00:23:45,940 --> 00:23:53,830
because especially in automation because

00:23:49,149 --> 00:23:55,809
if you know the or if you have a

00:23:53,830 --> 00:23:57,550
convention for using a specific label

00:23:55,809 --> 00:23:59,410
the developers

00:23:57,550 --> 00:24:01,660
the creators of the image know how the

00:23:59,410 --> 00:24:04,000
new version must be executed they just

00:24:01,660 --> 00:24:05,620
update the run label and basically your

00:24:04,000 --> 00:24:08,680
servers just need to execute the run

00:24:05,620 --> 00:24:11,590
label and everything will work but again

00:24:08,680 --> 00:24:20,260
this is something something that should

00:24:11,590 --> 00:24:23,020
be used with care yeah yeah so you can

00:24:20,260 --> 00:24:24,610
inspect the image so you could if you

00:24:23,020 --> 00:24:28,420
want to have a look at it before you can

00:24:24,610 --> 00:24:32,430
do apartment inspect and then use the

00:24:28,420 --> 00:24:34,930
format filter or just look at the entire

00:24:32,430 --> 00:24:36,250
JSON output and then you can expect it

00:24:34,930 --> 00:24:38,050
so it's really it's something

00:24:36,250 --> 00:24:42,810
transparent nothing nothing is sitting

00:24:38,050 --> 00:24:42,810
the metadata is is obvious at the point

00:24:57,029 --> 00:25:02,559
yeah definitely definitely

00:24:59,710 --> 00:25:06,220
so in the end there's there's no magic

00:25:02,559 --> 00:25:08,650
behind it in theory you can come up with

00:25:06,220 --> 00:25:10,840
a convention and use it with other other

00:25:08,650 --> 00:25:14,289
container engines than the department

00:25:10,840 --> 00:25:17,080
for instance but this is just a way to

00:25:14,289 --> 00:25:20,970
automate it right and to have semi

00:25:17,080 --> 00:25:23,409
standard at least at least for part Minh

00:25:20,970 --> 00:25:25,899
all right any any more questions on run

00:25:23,409 --> 00:25:28,679
ladle I'm happy that it was a question

00:25:25,899 --> 00:25:28,679
because I like it so much

00:25:31,559 --> 00:25:39,070
yeah that's again a copy a copy thing I

00:25:35,549 --> 00:25:42,700
did for from a blog post I wrote for for

00:25:39,070 --> 00:25:44,860
a German news or IT news website and I

00:25:42,700 --> 00:25:47,460
wanted it to we label it to flock to

00:25:44,860 --> 00:25:50,049
make it a little bit more appealing but

00:25:47,460 --> 00:25:56,559
in this case it should have thrown air

00:25:50,049 --> 00:25:58,419
yeah all right so I saw a few people

00:25:56,559 --> 00:26:02,500
running around with everybody loves

00:25:58,419 --> 00:26:04,210
systemd t-shirts and well this is this

00:26:02,500 --> 00:26:05,919
is something maybe not everybody does

00:26:04,210 --> 00:26:06,940
but we all have to live with it and we

00:26:05,919 --> 00:26:11,799
cannot hide from it

00:26:06,940 --> 00:26:14,799
and one big problem in the containers

00:26:11,799 --> 00:26:19,960
ecosystem for a long while was this is

00:26:14,799 --> 00:26:21,940
systemd support right so running and

00:26:19,960 --> 00:26:24,220
they're from we need to see it from

00:26:21,940 --> 00:26:26,919
various angles we can use system D on

00:26:24,220 --> 00:26:28,870
the host and use for instance a unit

00:26:26,919 --> 00:26:32,380
file is displayed below to execute a

00:26:28,870 --> 00:26:35,669
container with portman this works really

00:26:32,380 --> 00:26:38,260
well because Portman's the way part men

00:26:35,669 --> 00:26:42,100
execute or runs a container is

00:26:38,260 --> 00:26:44,289
inherently different to dr.

00:26:42,100 --> 00:26:47,590
follows the fork exit model so all

00:26:44,289 --> 00:26:51,100
containers are really the children of

00:26:47,590 --> 00:26:54,909
the partment process which makes things

00:26:51,100 --> 00:26:56,620
quite more appealing it's easier for

00:26:54,909 --> 00:26:58,809
service management as we can see here

00:26:56,620 --> 00:26:59,919
because then really system D has full

00:26:58,809 --> 00:27:02,740
control over it

00:26:59,919 --> 00:27:05,560
for instance C groups so if we specify

00:27:02,740 --> 00:27:09,010
certain limits those limits will be

00:27:05,560 --> 00:27:11,200
applied to the container if we do it

00:27:09,010 --> 00:27:12,970
with docker the limits will only be

00:27:11,200 --> 00:27:14,920
applied to the docker client in the

00:27:12,970 --> 00:27:16,360
docker client will sell we'll send a

00:27:14,920 --> 00:27:20,740
remote procedure call to the docker

00:27:16,360 --> 00:27:22,200
daemon and in in this case there it

00:27:20,740 --> 00:27:25,830
won't won't work

00:27:22,200 --> 00:27:30,280
also it can send SD notify many managers

00:27:25,830 --> 00:27:33,250
messages so if another unit file depends

00:27:30,280 --> 00:27:35,860
on the successful execution or start of

00:27:33,250 --> 00:27:39,670
the container this works as well whereas

00:27:35,860 --> 00:27:41,650
for the docker client we're not sure if

00:27:39,670 --> 00:27:45,300
the container the service is actually

00:27:41,650 --> 00:27:50,350
running at the point the client

00:27:45,300 --> 00:27:53,200
terminates or exits so if for instance

00:27:50,350 --> 00:27:55,120
here is an exemplary system to unit file

00:27:53,200 --> 00:28:00,280
for a Redis container it's pretty

00:27:55,120 --> 00:28:03,760
straightforward we can implement a

00:28:00,280 --> 00:28:06,520
restart always one so when you look at

00:28:03,760 --> 00:28:09,100
the docker for instance docker does all

00:28:06,520 --> 00:28:10,690
these things in the demon or has to do

00:28:09,100 --> 00:28:13,990
all these things in the demon that's

00:28:10,690 --> 00:28:16,060
just because or a consequence of the

00:28:13,990 --> 00:28:18,970
architectural choices the developers

00:28:16,060 --> 00:28:21,970
hand which is perfectly fine but it has

00:28:18,970 --> 00:28:26,320
certain limitations when we want to use

00:28:21,970 --> 00:28:28,900
it in in a system d-unit file to make

00:28:26,320 --> 00:28:31,210
things a little bit more easy part man

00:28:28,900 --> 00:28:35,260
allows for generating those systemd unit

00:28:31,210 --> 00:28:37,690
files so here we call apartment generate

00:28:35,260 --> 00:28:40,690
system d flock so flock is a container

00:28:37,690 --> 00:28:44,320
I've been been starting before and it

00:28:40,690 --> 00:28:47,830
spits out a system D unit file that we

00:28:44,320 --> 00:28:52,120
can use directly or uses a template for

00:28:47,830 --> 00:28:56,050
further extension so if you look at the

00:28:52,120 --> 00:28:58,600
third last line there is first what we

00:28:56,050 --> 00:29:00,340
see is it's a rootless container because

00:28:58,600 --> 00:29:03,400
the container storage is in my home

00:29:00,340 --> 00:29:04,690
directory and then there is a dog head

00:29:03,400 --> 00:29:07,929
file

00:29:04,690 --> 00:29:10,809
one thing I missed by by trimming the

00:29:07,929 --> 00:29:13,299
line is that there is a conman dr. Pitt

00:29:10,809 --> 00:29:17,080
violence in case you asked what this is

00:29:13,299 --> 00:29:20,590
the con man stands for container monitor

00:29:17,080 --> 00:29:23,620
and it's a process sitting between pot

00:29:20,590 --> 00:29:25,899
men and the runtime so partment is not

00:29:23,620 --> 00:29:30,220
directly calling run see but it's

00:29:25,899 --> 00:29:34,720
instructing Kanban to run run see then

00:29:30,220 --> 00:29:36,789
it double Forks for the reasons of being

00:29:34,720 --> 00:29:38,679
able to run the background and not

00:29:36,789 --> 00:29:41,620
having problems if Department exits or

00:29:38,679 --> 00:29:44,049
is being killed and it provides a socket

00:29:41,620 --> 00:29:46,840
that we can use for attaching so if you

00:29:44,049 --> 00:29:49,990
do apartment X SEC apartment will

00:29:46,840 --> 00:29:52,649
actually attach to the socket of Kanban

00:29:49,990 --> 00:29:57,340
and con one will stream everything out

00:29:52,649 --> 00:30:00,009
it all Kanban is also used to log for

00:29:57,340 --> 00:30:02,559
logging so there's two drivers supported

00:30:00,009 --> 00:30:05,860
at the moment you can either lock to to

00:30:02,559 --> 00:30:07,629
a file on disk or use directly the

00:30:05,860 --> 00:30:10,659
system TV ohno so then you can do your

00:30:07,629 --> 00:30:13,570
shaunell CTL yadda-yadda and look up

00:30:10,659 --> 00:30:17,220
what's going on it also keeps a bunch of

00:30:13,570 --> 00:30:17,220
file descriptors and ports open

00:30:17,250 --> 00:30:21,519
basically we have to do this if not a

00:30:19,269 --> 00:30:24,429
container cannot cannot access the ports

00:30:21,519 --> 00:30:27,730
for instance and it also records the

00:30:24,429 --> 00:30:32,740
containers exit time and code so conman

00:30:27,730 --> 00:30:36,519
so when saying pot man is no demon it's

00:30:32,740 --> 00:30:39,549
it's factually true but only because

00:30:36,519 --> 00:30:42,250
there is common because some process

00:30:39,549 --> 00:30:45,639
needs to watch the containers right what

00:30:42,250 --> 00:30:47,980
what's happening to record the exit code

00:30:45,639 --> 00:30:51,610
keep the sockets open and all these

00:30:47,980 --> 00:30:54,610
things and common is basically used to

00:30:51,610 --> 00:30:57,070
prevent pointman from being a demon but

00:30:54,610 --> 00:31:01,450
to be fair at least we believe it's the

00:30:57,070 --> 00:31:05,250
smallest possible demon it's 70 76 k in

00:31:01,450 --> 00:31:07,140
now the the 100 release

00:31:05,250 --> 00:31:13,290
yeah it's it's pretty small it's also

00:31:07,140 --> 00:31:17,040
written and see not not in go so the

00:31:13,290 --> 00:31:20,550
next use case for system D is to have it

00:31:17,040 --> 00:31:26,130
in containers right if we have a docker

00:31:20,550 --> 00:31:28,890
file yum install httpd this requires

00:31:26,130 --> 00:31:32,100
system D because it's being started by

00:31:28,890 --> 00:31:34,830
system D unit files if we don't have

00:31:32,100 --> 00:31:36,420
system D in a container because the

00:31:34,830 --> 00:31:39,120
container engine doesn't support it

00:31:36,420 --> 00:31:41,790
because system D is a little bit special

00:31:39,120 --> 00:31:44,550
in the requirements it has for the mount

00:31:41,790 --> 00:31:47,040
points for instance it wants run run

00:31:44,550 --> 00:31:49,950
lock attempt and warlocks are no less

00:31:47,040 --> 00:31:52,560
attentive as and it wants to bind mount

00:31:49,950 --> 00:31:55,110
or needs to bite mounts this of s C

00:31:52,560 --> 00:31:59,250
group of system D so that system de can

00:31:55,110 --> 00:32:02,190
actually talk then we have a problem and

00:31:59,250 --> 00:32:07,770
this problem existed for a long long

00:32:02,190 --> 00:32:10,440
long long while so what what we had to

00:32:07,770 --> 00:32:14,940
do or what basically everybody was left

00:32:10,440 --> 00:32:17,900
alone with the task of writing init

00:32:14,940 --> 00:32:20,970
scripts so everybody had to write some

00:32:17,900 --> 00:32:24,780
scripts to start the services instead of

00:32:20,970 --> 00:32:26,970
just doing systemctl enable maybe even

00:32:24,780 --> 00:32:28,680
in the build of the container so

00:32:26,970 --> 00:32:32,820
whenever you execute the container the

00:32:28,680 --> 00:32:35,100
service starts automatically for docker

00:32:32,820 --> 00:32:41,550
the team wrote a few years ago the

00:32:35,100 --> 00:32:45,030
system do CI hook which OC OC I hook is

00:32:41,550 --> 00:32:46,710
a standardized way of telling OC i

00:32:45,030 --> 00:32:49,140
compatible runtimes

00:32:46,710 --> 00:32:51,060
to execute certain binaries at a

00:32:49,140 --> 00:32:55,020
specific point of execution you can

00:32:51,060 --> 00:32:58,380
compare like certain steps in a compiler

00:32:55,020 --> 00:33:00,030
certain paths in a compiler and this is

00:32:58,380 --> 00:33:02,460
happening here here as well so let's

00:33:00,030 --> 00:33:04,440
start and it stopped the system TOC i

00:33:02,460 --> 00:33:07,350
hook was was being executed it was

00:33:04,440 --> 00:33:09,280
setting up the mount points Department

00:33:07,350 --> 00:33:11,890
now does implicitly

00:33:09,280 --> 00:33:14,080
then did some cleanups as well so with

00:33:11,890 --> 00:33:16,270
part men as I was already saying now is

00:33:14,080 --> 00:33:19,510
that it has built-in support for it

00:33:16,270 --> 00:33:22,330
because this is this is something we

00:33:19,510 --> 00:33:24,790
need we don't want people to manually

00:33:22,330 --> 00:33:26,950
write in it scripts because this is a

00:33:24,790 --> 00:33:32,860
problem that has been solved already and

00:33:26,950 --> 00:33:35,110
threw us back by a decade or so and we

00:33:32,860 --> 00:33:37,360
want a container not to be something

00:33:35,110 --> 00:33:40,420
special that people need to treat in a

00:33:37,360 --> 00:33:42,750
what people need to create or think

00:33:40,420 --> 00:33:45,280
differently it's really just a glorified

00:33:42,750 --> 00:33:47,530
process on the host this is why I

00:33:45,280 --> 00:33:48,400
already see the cool cool t-shirt in the

00:33:47,530 --> 00:33:50,680
back

00:33:48,400 --> 00:33:55,150
containers are Linux and this pretty

00:33:50,680 --> 00:33:56,830
much pretty much nails it so there's no

00:33:55,150 --> 00:33:59,170
workarounds need that I mean anymore we

00:33:56,830 --> 00:34:05,050
can just install the packages and this

00:33:59,170 --> 00:34:07,180
is something I really found or find that

00:34:05,050 --> 00:34:10,960
nice it's not something amazing in the

00:34:07,180 --> 00:34:13,659
sense that it's innovative it's just

00:34:10,960 --> 00:34:24,010
something normal and this is this is the

00:34:13,659 --> 00:34:26,530
nice point of it one of the or a common

00:34:24,010 --> 00:34:28,690
feature that is being demanded or asked

00:34:26,530 --> 00:34:32,379
for by the community especially by my

00:34:28,690 --> 00:34:34,929
folks migrating from docker is hotman

00:34:32,379 --> 00:34:40,210
supports docker compose write docker

00:34:34,929 --> 00:34:47,020
compose is a particular declarative way

00:34:40,210 --> 00:34:49,389
to start a set of containers and the

00:34:47,020 --> 00:34:51,580
basically compose a bigger service right

00:34:49,389 --> 00:34:53,919
you may want to start your web server

00:34:51,580 --> 00:34:55,840
independently from your from your

00:34:53,919 --> 00:34:58,630
database because it makes sense from the

00:34:55,840 --> 00:35:04,930
micro service point of view and this is

00:34:58,630 --> 00:35:08,680
a nice way to do it but we don't why

00:35:04,930 --> 00:35:11,890
because the Red Hat and the core team

00:35:08,680 --> 00:35:14,920
really believes that kubernetes is is

00:35:11,890 --> 00:35:16,440
the the now de facto standard way to do

00:35:14,920 --> 00:35:21,180
such things

00:35:16,440 --> 00:35:24,060
and Putman compose does a great job but

00:35:21,180 --> 00:35:27,150
we don't want to invest resources into

00:35:24,060 --> 00:35:30,270
supporting it we're not closing doors so

00:35:27,150 --> 00:35:33,180
if people want to contribute upstream

00:35:30,270 --> 00:35:36,960
they are more than welcome to do it but

00:35:33,180 --> 00:35:39,900
so far the need hasn't been apparently

00:35:36,960 --> 00:35:42,060
big enough to invest resources into

00:35:39,900 --> 00:35:44,310
putting it or supporting it officially

00:35:42,060 --> 00:35:50,130
in partner however there's a Python

00:35:44,310 --> 00:35:51,839
rapper by muadh al Soddy who is very

00:35:50,130 --> 00:35:55,050
active in the in the Fedora community as

00:35:51,839 --> 00:35:59,280
well and apparently this this works well

00:35:55,050 --> 00:36:03,569
it has been received super positively by

00:35:59,280 --> 00:36:05,609
the community alternatively we want

00:36:03,569 --> 00:36:08,510
people or the alternative that the

00:36:05,609 --> 00:36:12,599
basically apartment offers is it

00:36:08,510 --> 00:36:15,089
supports a kubernetes llamó file so

00:36:12,599 --> 00:36:17,760
usually what you throw at cube CTL you

00:36:15,089 --> 00:36:19,740
can now throw a department but you don't

00:36:17,760 --> 00:36:23,280
need a kubernetes cluster to run it you

00:36:19,740 --> 00:36:27,210
can really use it locally and this is I

00:36:23,280 --> 00:36:30,210
find amazing because sometimes we have

00:36:27,210 --> 00:36:32,520
to debug things or if I want to run a

00:36:30,210 --> 00:36:35,430
certain kubernetes llamó file but don't

00:36:32,520 --> 00:36:39,720
want to spin up a big cluster or maybe

00:36:35,430 --> 00:36:41,430
if I don't have access to it then I can

00:36:39,720 --> 00:36:43,859
just use it so it's a bridge between

00:36:41,430 --> 00:36:47,430
local development and the cloud native

00:36:43,859 --> 00:36:51,690
world and I find this really nice so if

00:36:47,430 --> 00:36:55,500
people have existing deployments that

00:36:51,690 --> 00:36:58,140
are based on on Putman compose there is

00:36:55,500 --> 00:37:02,099
another way to migrate to kubernetes

00:36:58,140 --> 00:37:05,130
llamó which is using que impose so

00:37:02,099 --> 00:37:07,020
compose which is a tool under the

00:37:05,130 --> 00:37:09,630
official kubernetes umbrella which

00:37:07,020 --> 00:37:13,440
converts docker compose files into

00:37:09,630 --> 00:37:17,690
kubernetes llamó file so there is a

00:37:13,440 --> 00:37:26,010
migration path between the two worlds

00:37:17,690 --> 00:37:29,040
and so here we somehow thought if we can

00:37:26,010 --> 00:37:29,839
already read the file why not generate

00:37:29,040 --> 00:37:33,140
the file

00:37:29,839 --> 00:37:35,930
based on on an existing container so you

00:37:33,140 --> 00:37:38,059
may wanna or you you may already have

00:37:35,930 --> 00:37:40,150
some containers running locally then you

00:37:38,059 --> 00:37:42,920
say okay I want to push this thing now

00:37:40,150 --> 00:37:46,519
into kubernetes you can do appointment

00:37:42,920 --> 00:37:48,199
generate cube on the container or on on

00:37:46,519 --> 00:37:51,079
the pot depending on what you're having

00:37:48,199 --> 00:37:54,349
and then pot man will spit out a

00:37:51,079 --> 00:37:57,259
kubernetes ml file that you can use so

00:37:54,349 --> 00:37:59,660
here I had to trim it a little bit it's

00:37:57,259 --> 00:38:02,599
really just a standard kubernetes llamó

00:37:59,660 --> 00:38:05,180
we have a parts or metadata than the

00:38:02,599 --> 00:38:07,880
spec of it we can see that a campaign

00:38:05,180 --> 00:38:12,259
the command is sleep with an infinity

00:38:07,880 --> 00:38:15,619
argument we have the environment list

00:38:12,259 --> 00:38:17,989
the image is the Fedora 31 we have a

00:38:15,619 --> 00:38:20,420
name and it's an unprivileged container

00:38:17,989 --> 00:38:26,390
i was hiding a lot of information that

00:38:20,420 --> 00:38:28,160
was not necessarily important for for

00:38:26,390 --> 00:38:32,420
what i'm trying to say here but this is

00:38:28,160 --> 00:38:35,509
really an easy way as the first line

00:38:32,420 --> 00:38:39,319
says it's still under development this

00:38:35,509 --> 00:38:42,589
is not an easy thing to do but we plan

00:38:39,319 --> 00:38:44,959
to basically make this a really stable

00:38:42,589 --> 00:38:45,679
thing at the moment it will work for

00:38:44,959 --> 00:38:48,109
most things

00:38:45,679 --> 00:38:49,630
please don't nail me to it famous last

00:38:48,109 --> 00:38:53,239
words

00:38:49,630 --> 00:38:56,599
but this is how the team and maintainer

00:38:53,239 --> 00:38:58,819
x' in envision the future and where they

00:38:56,599 --> 00:39:02,599
want to support different kinds kinds of

00:38:58,819 --> 00:39:08,119
needs it's also so the cool thing about

00:39:02,599 --> 00:39:10,130
kubernetes llamo is also a nice way to

00:39:08,119 --> 00:39:11,929
declare what you're what you're trying

00:39:10,130 --> 00:39:14,839
to execute so you don't need to have a

00:39:11,929 --> 00:39:17,329
shell script anymore that where you you

00:39:14,839 --> 00:39:18,679
want to do it or maybe even run contain

00:39:17,329 --> 00:39:20,569
a run label because everything is

00:39:18,679 --> 00:39:22,489
specified here you can also just put

00:39:20,569 --> 00:39:26,660
everything into into a kubernetes AML

00:39:22,489 --> 00:39:28,309
file and do the same thing but man

00:39:26,660 --> 00:39:30,769
checkpoint and restored this is a

00:39:28,309 --> 00:39:34,039
feature that is supported since part man

00:39:30,769 --> 00:39:37,670
since the 100 release so what you can do

00:39:34,039 --> 00:39:40,009
is you have a container you checkpoint

00:39:37,670 --> 00:39:42,109
it and you restore it on and on another

00:39:40,009 --> 00:39:43,520
machine so it allow it allows for

00:39:42,109 --> 00:39:47,210
migrating content

00:39:43,520 --> 00:39:49,370
among machine among machines personally

00:39:47,210 --> 00:39:52,700
I cannot go into all the technical

00:39:49,370 --> 00:39:56,260
details because I didn't implement it at

00:39:52,700 --> 00:39:58,720
all it's a very very complex thing and

00:39:56,260 --> 00:40:01,810
Adrian Adrian worried about the deaths

00:39:58,720 --> 00:40:05,660
they're using or we are using cryo which

00:40:01,810 --> 00:40:09,650
allows for migrating processes a lot of

00:40:05,660 --> 00:40:12,800
things have been there in user space but

00:40:09,650 --> 00:40:14,810
what we can do here is as shown in the

00:40:12,800 --> 00:40:17,060
example we run a container we check pon

00:40:14,810 --> 00:40:22,250
the container we export it into a tar

00:40:17,060 --> 00:40:23,630
archive we copy it to another machine in

00:40:22,250 --> 00:40:24,860
this case it was just a virtual machine

00:40:23,630 --> 00:40:29,870
that was running on my notebook here

00:40:24,860 --> 00:40:31,820
then we restore it by importing the the

00:40:29,870 --> 00:40:40,420
tar archive and then we can start it and

00:40:31,820 --> 00:40:40,420
it will just start yes the they use case

00:40:41,920 --> 00:40:50,090
I give me a container export and import

00:40:46,630 --> 00:40:53,720
all right here everything is frozen so

00:40:50,090 --> 00:40:55,580
the container the processes execute or

00:40:53,720 --> 00:41:01,310
execute where there were frozen before

00:40:55,580 --> 00:41:03,170
so yes you can do you can export a

00:41:01,310 --> 00:41:05,450
running container also an ATAR icon

00:41:03,170 --> 00:41:07,730
archive but what is happening there it's

00:41:05,450 --> 00:41:10,700
a very good good question I will

00:41:07,730 --> 00:41:12,320
remember it what usually happens when

00:41:10,700 --> 00:41:14,300
you do an export like a docker export

00:41:12,320 --> 00:41:16,940
appointment export what it does is it

00:41:14,300 --> 00:41:19,700
looks at the current route of s it

00:41:16,940 --> 00:41:22,010
commits it to a layer and makes an image

00:41:19,700 --> 00:41:25,090
out of it so when you start the image it

00:41:22,010 --> 00:41:28,400
will start it will create a new process

00:41:25,090 --> 00:41:31,430
so that will execute the entry point and

00:41:28,400 --> 00:41:34,190
then the command with checkpoint and

00:41:31,430 --> 00:41:37,550
restore it really freezes the process

00:41:34,190 --> 00:41:40,190
and starts executing at the point of the

00:41:37,550 --> 00:41:42,650
restore or where it has been has been

00:41:40,190 --> 00:41:43,760
frozen before does this answer your

00:41:42,650 --> 00:41:49,220
question okay

00:41:43,760 --> 00:41:50,990
so perfect thanks so much

00:41:49,220 --> 00:41:54,130
so much Department there's still a few

00:41:50,990 --> 00:41:56,990
other tools and I seem to talk very slow

00:41:54,130 --> 00:41:58,610
some some resources if you're interested

00:41:56,990 --> 00:42:02,690
extreme development and the community is

00:41:58,610 --> 00:42:05,960
on github.com containers the pod there

00:42:02,690 --> 00:42:08,630
is a channel on freenode apartment

00:42:05,960 --> 00:42:10,610
there's also a mailing list which has

00:42:08,630 --> 00:42:15,910
been introduced I guess a month ago or

00:42:10,610 --> 00:42:20,420
so but men at lists dot part men IO and

00:42:15,910 --> 00:42:22,850
also the website pot men dot IO we try

00:42:20,420 --> 00:42:25,490
to block there regularly and share

00:42:22,850 --> 00:42:28,760
resources from from other pages as well

00:42:25,490 --> 00:42:29,540
and it's available on most Linux

00:42:28,760 --> 00:42:31,369
distributions

00:42:29,540 --> 00:42:33,710
I cannot say all because I don't know

00:42:31,369 --> 00:42:35,840
all distributions but I think you will

00:42:33,710 --> 00:42:37,580
see some some major ones here for sure

00:42:35,840 --> 00:42:40,220
there's Red Hat Enterprise Linux and

00:42:37,580 --> 00:42:42,830
fedora there's also openSUSE I think our

00:42:40,220 --> 00:42:44,560
friends SUSE are also planning to

00:42:42,830 --> 00:42:48,619
support it in SUSE Linux Enterprise

00:42:44,560 --> 00:42:52,880
which is a really cool thing on Manjaro

00:42:48,619 --> 00:42:55,460
Gentoo Arch Linux Ubuntu and on Debian

00:42:52,880 --> 00:42:57,710
but as I've said before Debian is a

00:42:55,460 --> 00:43:00,050
really Herculean task because all the

00:42:57,710 --> 00:43:02,230
dependencies that have others have in a

00:43:00,050 --> 00:43:06,080
vendor folder have to be put into

00:43:02,230 --> 00:43:10,609
separate dedicated DEP source packages

00:43:06,080 --> 00:43:14,330
this is really hard because not many

00:43:10,609 --> 00:43:18,109
tools share the dependencies so dr.

00:43:14,330 --> 00:43:20,570
Portman Scorpio builder and whoever and

00:43:18,109 --> 00:43:22,760
they will certainly have different

00:43:20,570 --> 00:43:24,920
versions so you have to package

00:43:22,760 --> 00:43:27,859
different versions and this is this is

00:43:24,920 --> 00:43:30,410
really really a tough problem now let's

00:43:27,859 --> 00:43:34,100
come to to build ax or how dan would say

00:43:30,410 --> 00:43:39,830
build aa but I can't imitate his Boston

00:43:34,100 --> 00:43:41,660
accent so well so builder is dedicated

00:43:39,830 --> 00:43:43,580
for building container images parts of

00:43:41,660 --> 00:43:47,150
the source code are actually used in

00:43:43,580 --> 00:43:49,520
part men build so now I'm trying to tell

00:43:47,150 --> 00:43:52,490
you why and when you should use build

00:43:49,520 --> 00:43:55,100
instead of part men because it goes

00:43:52,490 --> 00:43:56,869
beyond the functionality that a docker

00:43:55,100 --> 00:43:58,880
apartment built have which solely works

00:43:56,869 --> 00:44:00,890
with the docker file and it's meant to

00:43:58,880 --> 00:44:03,740
be used as really as a low-level core

00:44:00,890 --> 00:44:07,230
utils like tool for building container

00:44:03,740 --> 00:44:09,180
images it's also build upstream on

00:44:07,230 --> 00:44:11,640
github containers project and shares the

00:44:09,180 --> 00:44:13,460
image in the storage library with the

00:44:11,640 --> 00:44:16,770
other tools as well

00:44:13,460 --> 00:44:20,339
builder supports using docker files with

00:44:16,770 --> 00:44:23,970
bilder built using docker file or just

00:44:20,339 --> 00:44:26,550
for the lazy ones builder but like

00:44:23,970 --> 00:44:28,829
bahtman it can run rootless same

00:44:26,550 --> 00:44:30,240
architecture the impartment no demon

00:44:28,829 --> 00:44:33,990
besides conman

00:44:30,240 --> 00:44:35,520
it focuses on OCI standards and on open

00:44:33,990 --> 00:44:40,020
development as much as the other tools

00:44:35,520 --> 00:44:42,839
and it's also targeted for towards

00:44:40,020 --> 00:44:46,200
kubernetes or the built pipeline

00:44:42,839 --> 00:44:48,780
specifically so bilder is offered on

00:44:46,200 --> 00:44:53,010
Quay or you can download in a builder

00:44:48,780 --> 00:44:56,099
image and in a later talk today I will

00:44:53,010 --> 00:44:58,410
present how we can use it or basically

00:44:56,099 --> 00:45:01,500
how also redhead is using it internally

00:44:58,410 --> 00:45:03,510
for for build pipelines there's a lot of

00:45:01,500 --> 00:45:07,740
cool things we can do with it to speed

00:45:03,510 --> 00:45:09,180
up builds and secure them so a common

00:45:07,740 --> 00:45:11,790
question is does builder have a

00:45:09,180 --> 00:45:16,230
scripting language perhaps build a file

00:45:11,790 --> 00:45:19,470
and here I'm shamelessly copying Dan's

00:45:16,230 --> 00:45:21,480
joke yes there is bash and this is

00:45:19,470 --> 00:45:24,329
billed as ultimate scripting language

00:45:21,480 --> 00:45:27,150
what I mean by it what we can do is we

00:45:24,329 --> 00:45:29,240
do a builder from it could be any image

00:45:27,150 --> 00:45:32,430
here we build a new one from scratch

00:45:29,240 --> 00:45:34,500
then we mount the container which is the

00:45:32,430 --> 00:45:36,450
same thing as we've done previously for

00:45:34,500 --> 00:45:38,579
apartment it's the same concept we get

00:45:36,450 --> 00:45:40,800
the mount point of the working container

00:45:38,579 --> 00:45:43,319
that we use to create an image and then

00:45:40,800 --> 00:45:47,130
we can do whatever we want on it we can

00:45:43,319 --> 00:45:50,970
do a DNF in install root on on this

00:45:47,130 --> 00:45:53,040
mount point and use the hosts DNF and

00:45:50,970 --> 00:45:55,560
all the repositories on the host and

00:45:53,040 --> 00:45:59,880
install stuff there so in theory you can

00:45:55,560 --> 00:46:02,700
create images without RPM without yam

00:45:59,880 --> 00:46:04,200
without you Neve very minimal footprint

00:46:02,700 --> 00:46:06,720
or whatever you want to do on the

00:46:04,200 --> 00:46:09,780
container then we can unmount it and

00:46:06,720 --> 00:46:11,850
then build a commit creates a new image

00:46:09,780 --> 00:46:14,930
based on the car

00:46:11,850 --> 00:46:19,260
date of this container so this is really

00:46:14,930 --> 00:46:21,390
envisioned as a way to create tools that

00:46:19,260 --> 00:46:25,110
are more complex that have specific

00:46:21,390 --> 00:46:27,480
needs and use build as a very very at

00:46:25,110 --> 00:46:30,000
the very very low or maybe lowest

00:46:27,480 --> 00:46:33,570
possible level and build more complex

00:46:30,000 --> 00:46:35,610
things around it another cool feature

00:46:33,570 --> 00:46:39,750
that I liked a lot and that we

00:46:35,610 --> 00:46:42,300
constantly failed to advertise is that

00:46:39,750 --> 00:46:44,610
builder supports including other

00:46:42,300 --> 00:46:47,790
daughter files this is a feature that

00:46:44,610 --> 00:46:50,670
has been asked for I guess since 2000 13

00:46:47,790 --> 00:46:52,650
or 14 upstream at docker but the

00:46:50,670 --> 00:46:56,460
maintainer czar very reluctant which I

00:46:52,650 --> 00:47:00,150
understand because the docker file

00:46:56,460 --> 00:47:03,660
syntax doesn't support include and if

00:47:00,150 --> 00:47:06,390
they introduce or introduce it now older

00:47:03,660 --> 00:47:08,280
versions of docker will break and this

00:47:06,390 --> 00:47:10,800
is this is something really hard dealing

00:47:08,280 --> 00:47:14,820
with backwards and forward compatibility

00:47:10,800 --> 00:47:16,140
is a very tough tough thing to do so we

00:47:14,820 --> 00:47:18,060
were thinking about what we can do

00:47:16,140 --> 00:47:19,910
people still want to use docker files

00:47:18,060 --> 00:47:22,590
and we still want to use docker files

00:47:19,910 --> 00:47:24,810
but we also want to be able to include

00:47:22,590 --> 00:47:28,230
another docker file why because we have

00:47:24,810 --> 00:47:30,990
a lot of boilerplate code a lot of

00:47:28,230 --> 00:47:34,140
docker files if you work with them you

00:47:30,990 --> 00:47:36,420
might know it there's a lot of enough

00:47:34,140 --> 00:47:39,210
update DNF install then cleaning the

00:47:36,420 --> 00:47:42,840
cache and most of them use or install

00:47:39,210 --> 00:47:45,270
common packages you might not want to

00:47:42,840 --> 00:47:50,340
rebase them on on one another but you

00:47:45,270 --> 00:47:51,690
because maybe you wanna you wanna make

00:47:50,340 --> 00:47:54,150
one layer out of them instead of

00:47:51,690 --> 00:47:56,610
squashed all the layers for instance so

00:47:54,150 --> 00:48:01,680
what we are doing here is we use the c

00:47:56,610 --> 00:48:03,930
preprocessor so this way we can include

00:48:01,680 --> 00:48:06,300
another file we can include any file

00:48:03,930 --> 00:48:09,150
because in line 3 you see the include

00:48:06,300 --> 00:48:10,800
directive which is basically exactly

00:48:09,150 --> 00:48:14,010
what we want to do the C preprocessor

00:48:10,800 --> 00:48:16,230
among many other nasty nasty things it

00:48:14,010 --> 00:48:18,780
does text textual replacement it takes

00:48:16,230 --> 00:48:20,770
the contents of the one file that we're

00:48:18,780 --> 00:48:28,300
including and copies it at the

00:48:20,770 --> 00:48:30,160
there yes yes you can this is why some

00:48:28,300 --> 00:48:32,460
people say we shouldn't do it but it's

00:48:30,160 --> 00:48:36,640
really up to the user so if you likes

00:48:32,460 --> 00:48:40,000
CPP macros you're free you're free to do

00:48:36,640 --> 00:48:41,410
it so we're doing it so this is

00:48:40,000 --> 00:48:43,450
something that anybody can do you can

00:48:41,410 --> 00:48:45,910
you can run the C preprocessor on your

00:48:43,450 --> 00:48:47,880
on your system and basically use this

00:48:45,910 --> 00:48:50,950
and throw it at docker as well

00:48:47,880 --> 00:48:54,700
what bilder is doing are also part men

00:48:50,950 --> 00:48:58,690
in this case is whenever a file has the

00:48:54,700 --> 00:49:03,030
dot I n suffix then we pre processes it

00:48:58,690 --> 00:49:06,940
before and this is a way to achieve it

00:49:03,030 --> 00:49:08,590
again it's some of the same the same

00:49:06,940 --> 00:49:10,570
philosophy behind we don't want to

00:49:08,590 --> 00:49:12,790
reinvent something we use something

00:49:10,570 --> 00:49:13,570
that's already there and the C

00:49:12,790 --> 00:49:16,360
preprocessor

00:49:13,570 --> 00:49:18,700
is as all this UNIX basically so this is

00:49:16,360 --> 00:49:21,070
something that you can even install on

00:49:18,700 --> 00:49:23,140
Windows so this is this is something

00:49:21,070 --> 00:49:26,530
really really nice and I like it because

00:49:23,140 --> 00:49:31,720
it's a it's a very approachable way of

00:49:26,530 --> 00:49:34,390
achieving the task for bilder same as

00:49:31,720 --> 00:49:37,510
for pointman upstream on get up

00:49:34,390 --> 00:49:40,360
containers we're in free node it has its

00:49:37,510 --> 00:49:42,430
own website and also a list feel free

00:49:40,360 --> 00:49:45,510
and invited to join and it's available

00:49:42,430 --> 00:49:49,450
on the same Linux distros as part man

00:49:45,510 --> 00:49:51,190
last but not least scope you so scope EO

00:49:49,450 --> 00:49:53,950
is a tool for managing and distributing

00:49:51,190 --> 00:49:56,140
container images it's basically the

00:49:53,950 --> 00:49:59,170
first tool of the github.com containers

00:49:56,140 --> 00:50:03,010
family and used and I think it's the

00:49:59,170 --> 00:50:05,350
most widely used tool not only due to

00:50:03,010 --> 00:50:08,020
its age because it's older than all our

00:50:05,350 --> 00:50:10,330
other tools but it seems to be a really

00:50:08,020 --> 00:50:12,490
serious problem so it's used in many non

00:50:10,330 --> 00:50:15,130
docker pipelines to to push images for

00:50:12,490 --> 00:50:17,920
instance in the the open build service

00:50:15,130 --> 00:50:20,500
of Susan openSUSE they use emoji for

00:50:17,920 --> 00:50:22,960
building container images but then they

00:50:20,500 --> 00:50:24,190
also need to push them to a registry

00:50:22,960 --> 00:50:26,170
right we mean need to make them

00:50:24,190 --> 00:50:28,680
available in Scorpio does a very very

00:50:26,170 --> 00:50:31,530
good job at that

00:50:28,680 --> 00:50:35,670
and originally as copy was born by the

00:50:31,530 --> 00:50:39,720
desire to inspect remote images I guess

00:50:35,670 --> 00:50:41,880
it was in 2000 2014 or so Antonia more

00:50:39,720 --> 00:50:46,280
daca a colleague from from redhead

00:50:41,880 --> 00:50:49,920
opened a pull request at docker adding a

00:50:46,280 --> 00:50:54,420
docker inspect command what I wanted to

00:50:49,920 --> 00:50:56,430
do is to contact the registry download

00:50:54,420 --> 00:51:01,280
the config and metadata and displayed

00:50:56,430 --> 00:51:03,630
and the maintainer x' liked the idea but

00:51:01,280 --> 00:51:05,670
still rejected the pull request because

00:51:03,630 --> 00:51:07,079
they said well sorry the the command

00:51:05,670 --> 00:51:09,599
line is getting more and more complex

00:51:07,079 --> 00:51:11,640
and we understand this but they said

00:51:09,599 --> 00:51:13,619
well a container registry is nothing but

00:51:11,640 --> 00:51:16,740
a web server so in theory you can curl

00:51:13,619 --> 00:51:18,990
everything and then I Tony sit down and

00:51:16,740 --> 00:51:21,150
said ok cool I'm gonna do it and this is

00:51:18,990 --> 00:51:23,119
how house copy was born so here's an

00:51:21,150 --> 00:51:24,300
example we do a scope you in inspect

00:51:23,119 --> 00:51:27,059
docker

00:51:24,300 --> 00:51:28,530
the docker prefix means we're talking to

00:51:27,059 --> 00:51:30,030
a docker registry there's different

00:51:28,530 --> 00:51:33,960
transports that I'm going to present the

00:51:30,030 --> 00:51:36,569
next slide on the Fedora latest one and

00:51:33,960 --> 00:51:38,130
then it spits out a bunch of information

00:51:36,569 --> 00:51:41,400
that we can use for post-processing or

00:51:38,130 --> 00:51:43,260
just exploring what's going on what how

00:51:41,400 --> 00:51:46,290
does the image look like we also see the

00:51:43,260 --> 00:51:48,510
layers so in in theory you can write a

00:51:46,290 --> 00:51:51,030
better script which also does something

00:51:48,510 --> 00:51:52,740
like compartment image tree around scope

00:51:51,030 --> 00:51:54,809
you inspect so here you see the degree

00:51:52,740 --> 00:51:57,359
of interoperability I was also referring

00:51:54,809 --> 00:52:03,690
to before because all share to some the

00:51:57,359 --> 00:52:07,020
same libraries so Scorpio supports

00:52:03,690 --> 00:52:09,960
multiple so-called transports so when

00:52:07,020 --> 00:52:14,250
you do apartment pool it uses the docker

00:52:09,960 --> 00:52:15,869
transport for pulling the image into the

00:52:14,250 --> 00:52:17,549
container storage one so container

00:52:15,869 --> 00:52:20,099
storage is the local container storage

00:52:17,549 --> 00:52:24,750
we support different drivers overlay or

00:52:20,099 --> 00:52:30,900
butter as in in fact back then it has

00:52:24,750 --> 00:52:34,890
been a fork of docker the docker code we

00:52:30,900 --> 00:52:37,830
can't use the storage library of docker

00:52:34,890 --> 00:52:40,890
or container D directly because

00:52:37,830 --> 00:52:43,010
we is because they're not a demon the

00:52:40,890 --> 00:52:45,300
tools are demon less besides cryo

00:52:43,010 --> 00:52:49,220
but all the tools are demonized so when

00:52:45,300 --> 00:52:52,980
we have to sink we cannot use memory

00:52:49,220 --> 00:52:55,080
mechanisms like semaphore or mutex

00:52:52,980 --> 00:52:58,080
we really have to go down to the file

00:52:55,080 --> 00:53:00,000
system use file ox for it so there was a

00:52:58,080 --> 00:53:01,920
lot of refactoring going on in

00:53:00,000 --> 00:53:04,410
supporting use cases where the tools

00:53:01,920 --> 00:53:06,560
running in parallel so this is the price

00:53:04,410 --> 00:53:10,050
you have to pay when you're not a demon

00:53:06,560 --> 00:53:11,730
it also supports a directory transport

00:53:10,050 --> 00:53:13,890
which is a non-standard very

00:53:11,730 --> 00:53:16,050
standardized way to explode an image or

00:53:13,890 --> 00:53:17,520
to a specific directory so there you can

00:53:16,050 --> 00:53:19,320
explore it you can check out the

00:53:17,520 --> 00:53:22,770
manifest of the images and things like

00:53:19,320 --> 00:53:24,660
this besides docker we also support OCI

00:53:22,770 --> 00:53:26,880
and so this is basically an

00:53:24,660 --> 00:53:30,390
implementation of the OCI image

00:53:26,880 --> 00:53:33,210
specification and it can also be

00:53:30,390 --> 00:53:35,900
compressed like docker like docker say

00:53:33,210 --> 00:53:38,280
for Putman save in as a tar archive and

00:53:35,900 --> 00:53:43,530
last but not least there's also support

00:53:38,280 --> 00:53:47,100
for 400s tree so the different

00:53:43,530 --> 00:53:49,500
transports give a lot of flexibility it

00:53:47,100 --> 00:53:53,310
works rootless where possible so you

00:53:49,500 --> 00:53:55,590
don't need to root - for scope you

00:53:53,310 --> 00:53:57,330
certainly there are limitations so if

00:53:55,590 --> 00:53:59,640
you want to talk to the docker daemon

00:53:57,330 --> 00:54:01,860
and copy an image from there you need

00:53:59,640 --> 00:54:03,690
root because the darkened enum diamond

00:54:01,860 --> 00:54:05,520
disc ways in this case requires root and

00:54:03,690 --> 00:54:07,260
it's a non opinion way and non

00:54:05,520 --> 00:54:11,070
opinionated way of managing images so

00:54:07,260 --> 00:54:14,130
there's copy inspect and delete and very

00:54:11,070 --> 00:54:17,730
limited functionality so users can build

00:54:14,130 --> 00:54:19,830
something more complex around it and as

00:54:17,730 --> 00:54:21,540
I'm repeating myself quite a lot with it

00:54:19,830 --> 00:54:23,040
but they all share the same library so

00:54:21,540 --> 00:54:25,860
if you do apartment pool it's basically

00:54:23,040 --> 00:54:29,840
the same as a Scorpio copy docker

00:54:25,860 --> 00:54:34,320
yada-yada container storage yada yada

00:54:29,840 --> 00:54:37,590
and it's easy to integrate into into the

00:54:34,320 --> 00:54:39,480
tool chains so here you can inspect for

00:54:37,590 --> 00:54:43,170
instance the Fedora rawhide image and

00:54:39,480 --> 00:54:47,310
just use Jake hue to inspect the fields

00:54:43,170 --> 00:54:48,510
of the Chaisson same as here but Scorpio

00:54:47,310 --> 00:54:49,690
does not have a dedicated website

00:54:48,510 --> 00:54:52,750
everything

00:54:49,690 --> 00:54:55,000
upstream on github if you want to reach

00:54:52,750 --> 00:54:58,330
out to the developers you can use the

00:54:55,000 --> 00:55:03,760
containers channel on freenode and it's

00:54:58,330 --> 00:55:06,370
available on mmm basically the same same

00:55:03,760 --> 00:55:09,630
Linux distributions but Debian already

00:55:06,370 --> 00:55:13,630
has it in the main repositories so I

00:55:09,630 --> 00:55:17,290
started the talk with the the big huge

00:55:13,630 --> 00:55:20,620
Swiss Army knife which does thinks well

00:55:17,290 --> 00:55:23,860
but it it has some side effects or some

00:55:20,620 --> 00:55:26,410
consequences maybe security maybe you

00:55:23,860 --> 00:55:28,930
just don't have root on your system so

00:55:26,410 --> 00:55:32,950
the philosophy of Red Hat there is to

00:55:28,930 --> 00:55:35,470
have smaller more specialized tools so

00:55:32,950 --> 00:55:39,520
you can really choose based on your use

00:55:35,470 --> 00:55:48,480
case and that's that's pretty much it

00:55:39,520 --> 00:55:48,480
do you have questions yes

00:56:07,460 --> 00:56:12,839
yeah yeah that's that's pretty

00:56:10,020 --> 00:56:14,910
straightforward so the interface is all

00:56:12,839 --> 00:56:19,680
all of the different drivers use the

00:56:14,910 --> 00:56:21,299
same interfaces and it's it's not rocket

00:56:19,680 --> 00:56:23,220
science there's a few things when it

00:56:21,299 --> 00:56:26,010
comes to layers you have to store it you

00:56:23,220 --> 00:56:28,230
have to compute a diff between two

00:56:26,010 --> 00:56:30,359
layers you have to apply it if you have

00:56:28,230 --> 00:56:31,440
to extract it sometimes depending on

00:56:30,359 --> 00:56:33,859
what you want to do you may want to

00:56:31,440 --> 00:56:38,670
compress it or decompress it but

00:56:33,859 --> 00:56:40,589
extending it for new drivers is is

00:56:38,670 --> 00:56:42,359
something I can only encourage if you

00:56:40,589 --> 00:56:47,430
have to use case we would be happy to

00:56:42,359 --> 00:56:49,410
know it the same applies to different

00:56:47,430 --> 00:56:52,099
story transports also in containers

00:56:49,410 --> 00:56:55,500
containers image for instance it's a

00:56:52,099 --> 00:56:57,930
it's a fairly stable interface we have

00:56:55,500 --> 00:57:01,980
there sometimes we need to change it but

00:56:57,930 --> 00:57:03,930
if it's upstream we commit to

00:57:01,980 --> 00:57:06,260
maintaining it so basically it's the

00:57:03,930 --> 00:57:08,849
same thing as with the Linux kernel as

00:57:06,260 --> 00:57:14,369
soon as you get it upstream the

00:57:08,849 --> 00:57:16,849
maintainer x' will take care any more

00:57:14,369 --> 00:57:16,849
questions

00:57:18,370 --> 00:57:22,630
all right so I guess we hang we're going

00:57:20,950 --> 00:57:25,390
to hang out for the next hour as well

00:57:22,630 --> 00:57:28,720
because unfortunately Dan Walsh is is

00:57:25,390 --> 00:57:30,730
not here so after that if you see him

00:57:28,720 --> 00:57:42,610
please remind him he owes me one or two

00:57:30,730 --> 00:57:45,070
beers so now we still have a few minutes

00:57:42,610 --> 00:57:48,300
if you want to use the restrooms or

00:57:45,070 --> 00:57:54,010
refresh yourself or get some some drinks

00:57:48,300 --> 00:57:56,230
I'm gonna wait for you all right

00:57:54,010 --> 00:58:01,210
I think the talk is supposed to start

00:57:56,230 --> 00:58:03,610
three minutes ago so as you see I am a

00:58:01,210 --> 00:58:05,800
taller younger version of Dan Walsh with

00:58:03,610 --> 00:58:08,590
a little bit more hair unfortunately he

00:58:05,800 --> 00:58:10,000
didn't make it he had some some problems

00:58:08,590 --> 00:58:14,440
traveling because he wanted to travel to

00:58:10,000 --> 00:58:17,470
DEFCON five in India and something went

00:58:14,440 --> 00:58:21,850
wrong with a with a visa and now he's

00:58:17,470 --> 00:58:26,050
stuck in in Boston but I'm I'm Valentin

00:58:21,850 --> 00:58:29,830
I'm working in dance team on Patna and

00:58:26,050 --> 00:58:32,800
build a cryo basically a little bit on

00:58:29,830 --> 00:58:37,270
on all the things they're more kind of a

00:58:32,800 --> 00:58:39,820
generalist so I hope to replace them if

00:58:37,270 --> 00:58:49,810
you see him remind him he owes me a beer

00:58:39,820 --> 00:58:53,640
he will know why so I'm gonna throw that

00:58:49,810 --> 00:58:58,870
at his head I will have a lot of fun so

00:58:53,640 --> 00:59:01,990
in in the talk before I I was talking

00:58:58,870 --> 00:59:06,190
about some of the untold features of hot

00:59:01,990 --> 00:59:10,030
men which are mostly things that darker

00:59:06,190 --> 00:59:12,490
doesn't support so point man and docker

00:59:10,030 --> 00:59:17,230
they share a lot of features on a sea

00:59:12,490 --> 00:59:19,750
lion so when the dance team came up with

00:59:17,230 --> 00:59:22,750
the idea of creating a demon last

00:59:19,750 --> 00:59:24,940
container engine the decision was clear

00:59:22,750 --> 00:59:26,890
to also basically

00:59:24,940 --> 00:59:30,220
imitate docker on the sea lion why

00:59:26,890 --> 00:59:32,140
because we're all used to it they did a

00:59:30,220 --> 00:59:35,860
great job everybody knows that scripts

00:59:32,140 --> 00:59:37,540
already shell out to it so just sticking

00:59:35,860 --> 00:59:42,150
to it may make sense it's a de facto

00:59:37,540 --> 00:59:47,080
standard sea line so in in this talk

00:59:42,150 --> 00:59:49,680
then wants to show how portman works how

00:59:47,080 --> 00:59:51,790
you can migrate from docker to portman

00:59:49,680 --> 00:59:54,460
explaining a few of the technical

00:59:51,790 --> 00:59:57,970
details that where the department has

00:59:54,460 --> 01:00:02,340
explaining the architecture how portman

00:59:57,970 --> 01:00:06,550
uses username spaces to also implement

01:00:02,340 --> 01:00:08,080
rootless containers so if you if you

01:00:06,550 --> 01:00:11,650
don't like the talk you also have to

01:00:08,080 --> 01:00:15,520
complain to Dan so let's get the demo

01:00:11,650 --> 01:00:21,270
started let's first execute everything

01:00:15,520 --> 01:00:21,270
is as rude as we're as we're used to

01:00:22,890 --> 01:00:29,350
here we see the version we have a remote

01:00:25,960 --> 01:00:30,970
API version we see the go version which

01:00:29,350 --> 01:00:32,980
is basically also used a little bit for

01:00:30,970 --> 01:00:34,390
for debugging and the OS and

01:00:32,980 --> 01:00:38,560
architecture that's being used by the

01:00:34,390 --> 01:00:41,710
go-go compiler the remote API is

01:00:38,560 --> 01:00:43,930
implemented in invar link and we are

01:00:41,710 --> 01:00:48,610
really committed to make this a stable

01:00:43,930 --> 01:00:51,040
thing for part man the cockpit a

01:00:48,610 --> 01:00:54,040
cockpits of which is also used in Fedora

01:00:51,040 --> 01:00:58,600
is basically using the VAR link API to

01:00:54,040 --> 01:01:04,660
do it so this one excuse me I have to

01:00:58,600 --> 01:01:07,390
make it a little bit shorter so now yeah

01:01:04,660 --> 01:01:11,470
Derek in tune so if we do apartment info

01:01:07,390 --> 01:01:14,350
it's similar to docker info where it

01:01:11,470 --> 01:01:17,920
displays basically most things that

01:01:14,350 --> 01:01:20,440
portman uses for execution and also most

01:01:17,920 --> 01:01:22,270
things we need to understand in black

01:01:20,440 --> 01:01:24,480
reports so what we can see here is

01:01:22,270 --> 01:01:26,710
conmen

01:01:24,480 --> 01:01:29,320
those who have attended to talk before

01:01:26,710 --> 01:01:33,640
no con one already so con man stands for

01:01:29,320 --> 01:01:36,160
container monitor and it's a small small

01:01:33,640 --> 01:01:38,060
small small binary sitting between pot

01:01:36,160 --> 01:01:40,280
man and the container runtime

01:01:38,060 --> 01:01:42,950
for instance Runcie and what it does is

01:01:40,280 --> 01:01:44,870
it keeps a sock and open that part men

01:01:42,950 --> 01:01:48,170
can attach to for instance when we do

01:01:44,870 --> 01:01:50,270
apartment x''k it uses this socket it

01:01:48,170 --> 01:01:54,640
also keeps a bunch of file descriptors

01:01:50,270 --> 01:01:57,620
open for instance to keep ports open it

01:01:54,640 --> 01:02:00,350
records the exit code puts it into a

01:01:57,620 --> 01:02:02,750
file so portman actually knows what the

01:02:00,350 --> 01:02:03,920
exit code of the container was which in

01:02:02,750 --> 01:02:05,720
case of docker for instance does

01:02:03,920 --> 01:02:10,730
container D and then reports it back to

01:02:05,720 --> 01:02:13,630
docker it also does logging so con man

01:02:10,730 --> 01:02:18,110
is so when saying part man is rootless

01:02:13,630 --> 01:02:20,840
it's factually true but a little I just

01:02:18,110 --> 01:02:23,540
a little a very little one because from

01:02:20,840 --> 01:02:26,090
a technical point of view we need some

01:02:23,540 --> 01:02:29,660
process to monitor the containers and

01:02:26,090 --> 01:02:31,790
this is what caught one is only this

01:02:29,660 --> 01:02:33,920
however we believe common is the

01:02:31,790 --> 01:02:43,820
smallest daemon possible for this task

01:02:33,920 --> 01:02:47,300
and it has 76 km/h 76 km/h a lot of

01:02:43,820 --> 01:02:49,610
other things we have the OCI runtime the

01:02:47,300 --> 01:02:52,220
path to it also the version and the

01:02:49,610 --> 01:02:55,930
commit and unfortunately there's still

01:02:52,220 --> 01:03:00,260
no stable or no one that all release of

01:02:55,930 --> 01:03:02,330
run C because things are popping up all

01:03:00,260 --> 01:03:04,370
the time and are blocking the release so

01:03:02,330 --> 01:03:07,310
docker is using a different version of

01:03:04,370 --> 01:03:09,770
run seed and pot men and maybe cryo is

01:03:07,310 --> 01:03:13,940
using another one because things are

01:03:09,770 --> 01:03:16,010
changing rather quickly and when you

01:03:13,940 --> 01:03:19,190
have when something is changing quickly

01:03:16,010 --> 01:03:21,020
you maybe need to pin to a specific

01:03:19,190 --> 01:03:23,300
commit where you know this is just

01:03:21,020 --> 01:03:24,920
working container D does the same so

01:03:23,300 --> 01:03:28,970
this is why we why we display this

01:03:24,920 --> 01:03:32,210
information as well and a lot of other

01:03:28,970 --> 01:03:34,070
things the uptime yesterday it looked

01:03:32,210 --> 01:03:38,960
nicer ahead around 10 days but I

01:03:34,070 --> 01:03:41,690
rebooted this morning it shows also a

01:03:38,960 --> 01:03:44,600
bunch of registries and search

01:03:41,690 --> 01:03:46,910
registries so search registries is

01:03:44,600 --> 01:03:49,310
something I like and hate at the same

01:03:46,910 --> 01:03:50,930
same time I like it because it's nice

01:03:49,310 --> 01:03:54,880
for users and

01:03:50,930 --> 01:03:57,109
hate it because it's really painful to

01:03:54,880 --> 01:03:59,809
develop and maintain the code in the

01:03:57,109 --> 01:04:04,819
background so when you do a docker poll

01:03:59,809 --> 01:04:08,539
Alpine docker is doing a lot of things

01:04:04,819 --> 01:04:13,250
for you because it's resolving the name

01:04:08,539 --> 01:04:18,260
into darker dot IO /library slash Alpine

01:04:13,250 --> 01:04:21,230
: latest and we wanted to have the same

01:04:18,260 --> 01:04:25,220
thing also for other registries so when

01:04:21,230 --> 01:04:27,369
you do what men pool yada-yada and we

01:04:25,220 --> 01:04:29,779
don't find yada-yada on docker dot io

01:04:27,369 --> 01:04:31,369
apartment we'll go through the list or

01:04:29,779 --> 01:04:33,799
basically the containers image library

01:04:31,369 --> 01:04:37,220
will iterate over all items in the list

01:04:33,799 --> 01:04:40,400
you see here in the search in a search

01:04:37,220 --> 01:04:42,430
list and contact the registries one

01:04:40,400 --> 01:04:44,510
after another so then it will ask

01:04:42,430 --> 01:04:46,700
registry fedora org

01:04:44,510 --> 01:04:49,789
do you have yada yada and then iterate

01:04:46,700 --> 01:04:52,579
iterate over it so it's something you

01:04:49,789 --> 01:04:56,680
can you can configure so it's something

01:04:52,579 --> 01:05:00,470
really nice to use but it's a lot of

01:04:56,680 --> 01:05:02,180
complexity in in the code because

01:05:00,470 --> 01:05:04,460
there's a lot of special casing and

01:05:02,180 --> 01:05:08,950
tokerau io is always something special

01:05:04,460 --> 01:05:13,910
and will always be something special

01:05:08,950 --> 01:05:16,309
then we have a bunch of conflicts which

01:05:13,910 --> 01:05:19,880
is an option for the container storage

01:05:16,309 --> 01:05:22,640
so there's a container storage conf that

01:05:19,880 --> 01:05:24,319
can be configured for all the tools that

01:05:22,640 --> 01:05:29,750
are based on the container storage

01:05:24,319 --> 01:05:32,119
library there you can or dairy can alter

01:05:29,750 --> 01:05:34,279
for instance the paths where images are

01:05:32,119 --> 01:05:37,279
being stored where containers are being

01:05:34,279 --> 01:05:40,760
stored you can control which deck and

01:05:37,279 --> 01:05:42,859
driver the tool should use or storage

01:05:40,760 --> 01:05:44,630
start smackin should be using maybe

01:05:42,859 --> 01:05:49,579
butter if as if you're running on

01:05:44,630 --> 01:05:56,270
openSUSE maybe overlay if you're on X of

01:05:49,579 --> 01:05:58,250
s or x4 and you can also point it to the

01:05:56,270 --> 01:06:00,150
mount program that is being used which

01:05:58,250 --> 01:06:03,450
is something we need for

01:06:00,150 --> 01:06:07,740
for rootless I'm gonna talk a little bit

01:06:03,450 --> 01:06:09,660
more about this later in the next talk

01:06:07,740 --> 01:06:12,870
and a falling talk after where we go

01:06:09,660 --> 01:06:14,910
into the details of build up same for

01:06:12,870 --> 01:06:16,620
the image store well I I guess you you

01:06:14,910 --> 01:06:20,790
get the idea of what you can do and what

01:06:16,620 --> 01:06:22,830
you can see so now I'm gonna increase it

01:06:20,790 --> 01:06:25,890
a little bit so here we have a docker

01:06:22,830 --> 01:06:29,250
file from Alpine we can set the

01:06:25,890 --> 01:06:33,420
environment a few or a label so add some

01:06:29,250 --> 01:06:38,070
metadata to it and the important part is

01:06:33,420 --> 01:06:40,110
the but here everything before you can

01:06:38,070 --> 01:06:46,800
more or less ignore for now this is just

01:06:40,110 --> 01:06:49,350
to run the demo but the bot is basically

01:06:46,800 --> 01:06:51,330
instructed apartment to build the the

01:06:49,350 --> 01:06:54,570
docker file that we're that we're seeing

01:06:51,330 --> 01:06:56,640
above I was talking too long so I need

01:06:54,570 --> 01:07:00,030
to re-enter my password so here we can

01:06:56,640 --> 01:07:03,480
see we can execute docker file parsad

01:07:00,030 --> 01:07:09,330
run everything we're pulling it at the

01:07:03,480 --> 01:07:11,600
moment and voila we have a new image so

01:07:09,330 --> 01:07:15,570
the last digest we are seeing here is

01:07:11,600 --> 01:07:17,910
the image ID of the container image that

01:07:15,570 --> 01:07:20,520
we were just building before can you

01:07:17,910 --> 01:07:23,340
still read it ok perfect and I might

01:07:20,520 --> 01:07:26,400
just keep this font size next one is

01:07:23,340 --> 01:07:28,620
images like docker images we have

01:07:26,400 --> 01:07:31,110
apartment images and have a look at the

01:07:28,620 --> 01:07:36,120
container images that we're here

01:07:31,110 --> 01:07:38,190
RMI stands for remove image and one

01:07:36,120 --> 01:07:40,770
thing that has been asked for a long

01:07:38,190 --> 01:07:42,810
time upstream at docker is please give

01:07:40,770 --> 01:07:45,300
us a switch to remove everything because

01:07:42,810 --> 01:07:49,260
it's a common feature because things get

01:07:45,300 --> 01:07:51,930
messy quickly but the maintainer didn't

01:07:49,260 --> 01:07:53,430
want it Putman supports it it's trivial

01:07:51,930 --> 01:07:55,110
you list the images you iterate over

01:07:53,430 --> 01:07:56,820
them and then you remove them so it was

01:07:55,110 --> 01:08:00,240
no no rocket science but something

01:07:56,820 --> 01:08:02,280
really that improves the the usability

01:08:00,240 --> 01:08:05,160
of the tool so here we see we have the

01:08:02,280 --> 01:08:07,830
two images before local how's my image

01:08:05,160 --> 01:08:09,700
and the Alpine one we see that both have

01:08:07,830 --> 01:08:13,780
been removed

01:08:09,700 --> 01:08:14,799
so now no Dan wants to do more cleanup

01:08:13,780 --> 01:08:17,080
what man

01:08:14,799 --> 01:08:20,370
RM does the same but for the containers

01:08:17,080 --> 01:08:23,469
we remove all the containers so we had

01:08:20,370 --> 01:08:26,469
one for building and we executed a few

01:08:23,469 --> 01:08:29,350
before so basically this is the

01:08:26,469 --> 01:08:31,870
leftovers we're having now it's the nice

01:08:29,350 --> 01:08:35,529
part everybody likes part man because we

01:08:31,870 --> 01:08:38,080
can execute it as non-root and actually

01:08:35,529 --> 01:08:40,779
lately we have been approached a lot by

01:08:38,080 --> 01:08:44,380
the HPC community high high performance

01:08:40,779 --> 01:08:47,980
computing so they can't really use

01:08:44,380 --> 01:08:51,130
docker because they don't get root if

01:08:47,980 --> 01:08:56,380
you have a big HPC environment you can

01:08:51,130 --> 01:08:59,170
do nothing and well for docker at least

01:08:56,380 --> 01:09:01,660
until now you needed root for a long

01:08:59,170 --> 01:09:06,759
while now it allows for executing it

01:09:01,660 --> 01:09:09,730
it also per user nonetheless there is a

01:09:06,759 --> 01:09:11,710
lot of interest in rootless and it's

01:09:09,730 --> 01:09:13,900
really really cool cool to see the

01:09:11,710 --> 01:09:17,170
different use cases they're having so

01:09:13,900 --> 01:09:22,179
let's dive a little bit into it we can

01:09:17,170 --> 01:09:23,650
do the same we pull an image I hope

01:09:22,179 --> 01:09:27,160
you're not downloading too much here

01:09:23,650 --> 01:09:33,040
okay I already had it here so you can

01:09:27,160 --> 01:09:34,989
see here in the in the output the the

01:09:33,040 --> 01:09:38,679
pool or the download has been skipped

01:09:34,989 --> 01:09:40,750
because it already exists in the source

01:09:38,679 --> 01:09:43,440
sorry in a destination transport in

01:09:40,750 --> 01:09:46,569
which in this case is containers storage

01:09:43,440 --> 01:09:50,710
this year we've been working a lot on

01:09:46,569 --> 01:09:52,509
improvements for pool so it's easy to

01:09:50,710 --> 01:09:56,469
compare performance especially when you

01:09:52,509 --> 01:09:58,739
migrate and let's say in internal

01:09:56,469 --> 01:10:00,250
customers I'd read had said like well

01:09:58,739 --> 01:10:02,980
it's working

01:10:00,250 --> 01:10:04,449
but the pools are really slow and that's

01:10:02,980 --> 01:10:07,120
that's a bottleneck so what we were

01:10:04,449 --> 01:10:12,730
doing before is all layers have been

01:10:07,120 --> 01:10:14,650
pulled in one after one after another

01:10:12,730 --> 01:10:15,160
sorry I'm missing my English at the

01:10:14,650 --> 01:10:18,489
moment

01:10:15,160 --> 01:10:21,499
so the obvious thing was to paralyze

01:10:18,489 --> 01:10:25,190
everything but this was a was

01:10:21,499 --> 01:10:27,469
a rather non-trivial change because the

01:10:25,190 --> 01:10:29,719
the tools Putman build a cryo scope you

01:10:27,469 --> 01:10:31,010
all share the containers image library

01:10:29,719 --> 01:10:35,599
and well there was a lot of

01:10:31,010 --> 01:10:37,159
synchronization going on but now we're

01:10:35,599 --> 01:10:40,760
faster than docker which is which is

01:10:37,159 --> 01:10:42,710
cool also considering that it's a daemon

01:10:40,760 --> 01:10:46,039
less architecture so the process has to

01:10:42,710 --> 01:10:46,729
be initialized before and yeah that's

01:10:46,039 --> 01:10:50,119
really nice

01:10:46,729 --> 01:10:54,739
so rootless we can also run a container

01:10:50,119 --> 01:10:57,949
we can now show all non-privileged

01:10:54,739 --> 01:11:00,199
containers so if you run pot man PS it

01:10:57,949 --> 01:11:03,650
you can basically list the containers -

01:11:00,199 --> 01:11:06,280
a will list also also the ones that are

01:11:03,650 --> 01:11:11,929
not running anymore you can't see

01:11:06,280 --> 01:11:13,999
however containers from root so it's

01:11:11,929 --> 01:11:16,969
different storages we don't have access

01:11:13,999 --> 01:11:19,849
there so this is something that is

01:11:16,969 --> 01:11:22,489
different if we pull an image for root

01:11:19,849 --> 01:11:24,019
and pull the same image for non root or

01:11:22,489 --> 01:11:27,849
for a user you have to pull it twice

01:11:24,019 --> 01:11:27,849
because it's just different starches

01:11:29,170 --> 01:11:34,519
same goes here apartment images now we

01:11:32,300 --> 01:11:37,249
do a suit appointment images and we see

01:11:34,519 --> 01:11:41,510
well they're not having the same the

01:11:37,249 --> 01:11:43,429
same containers oh well ok they're close

01:11:41,510 --> 01:11:45,880
to the same because I'm running a lot of

01:11:43,429 --> 01:11:50,650
fruit and rootless with the demos here

01:11:45,880 --> 01:11:54,949
so now Dan wants to show a little bit

01:11:50,650 --> 01:11:58,219
behind the curtain how is part man using

01:11:54,949 --> 01:11:59,630
user namespaces how is this working so

01:11:58,219 --> 01:12:01,969
I'm gonna read a little bit the demo

01:11:59,630 --> 01:12:04,309
will now unshare the user name space of

01:12:01,969 --> 01:12:05,179
a rootless container using the build on

01:12:04,309 --> 01:12:09,139
share command

01:12:05,179 --> 01:12:11,539
so what builder unshare does it creates

01:12:09,139 --> 01:12:15,159
a new user username space where we have

01:12:11,539 --> 01:12:17,869
more privileges than in the current one

01:12:15,159 --> 01:12:19,670
pod men and now supports the same

01:12:17,869 --> 01:12:23,929
actually deviance you a department

01:12:19,670 --> 01:12:25,369
unshare right that's cool so first we

01:12:23,929 --> 01:12:28,280
have a look outside the container and

01:12:25,369 --> 01:12:32,800
look at the EDC

01:12:28,280 --> 01:12:37,120
sub UID so what we're seeing here

01:12:32,800 --> 01:12:40,030
the UID map that the user in this case

01:12:37,120 --> 01:12:43,690
volunteen which is me has been assigned

01:12:40,030 --> 01:12:47,230
to so the the first item in the colons

01:12:43,690 --> 01:12:52,720
separately list is the u ID or the

01:12:47,230 --> 01:12:56,950
username the second one is a UID of the

01:12:52,720 --> 01:12:59,410
range that we can use in usernames basis

01:12:56,950 --> 01:13:03,790
so when we create a new username space

01:12:59,410 --> 01:13:06,370
the this is basically the starting ID

01:13:03,790 --> 01:13:11,380
that we can use and the last item the

01:13:06,370 --> 01:13:15,790
65k is the range or the the number of

01:13:11,380 --> 01:13:20,290
you IDs that can be assigned to so zero

01:13:15,790 --> 01:13:23,710
will be 100 k 1 will be hundred k 1 and

01:13:20,290 --> 01:13:28,210
this goes up to a hundred 165 k and so

01:13:23,710 --> 01:13:30,160
on so when we do now we create a new

01:13:28,210 --> 01:13:33,160
username space we're leaving the one

01:13:30,160 --> 01:13:37,690
create a new one and if we now have a

01:13:33,160 --> 01:13:42,940
look the UID map that is assigned to me

01:13:37,690 --> 01:13:45,370
so we can see that zero in the username

01:13:42,940 --> 01:13:50,140
space so the root in the user name space

01:13:45,370 --> 01:13:57,100
is UID 1000 outside the username space

01:13:50,140 --> 01:14:00,460
which happens to be me so what we're

01:13:57,100 --> 01:14:03,610
basically seen here is that inside the

01:14:00,460 --> 01:14:05,890
username space the process is root and

01:14:03,610 --> 01:14:08,710
had the st. has the same rights or has

01:14:05,890 --> 01:14:12,310
root privileges inside this username

01:14:08,710 --> 01:14:17,080
space but outside in the parent username

01:14:12,310 --> 01:14:18,790
space it has ID or user ID 1000 so even

01:14:17,080 --> 01:14:21,430
if we manage to break out of the

01:14:18,790 --> 01:14:23,830
username space now we can't do many

01:14:21,430 --> 01:14:29,440
nasty things or only as much as the user

01:14:23,830 --> 01:14:33,190
can do in any case alright and then we

01:14:29,440 --> 01:14:34,690
have the UID or the ID one which starts

01:14:33,190 --> 01:14:37,090
exactly the way I described before

01:14:34,690 --> 01:14:42,450
so one starts as

01:14:37,090 --> 01:14:48,070
100 K and then all the following 65 case

01:14:42,450 --> 01:14:51,550
so think now Dan wants me to exit we

01:14:48,070 --> 01:14:53,890
clear and now we're gonna look at

01:14:51,550 --> 01:14:57,100
Department usernames base support so

01:14:53,890 --> 01:15:00,250
what we're seeing here is something we

01:14:57,100 --> 01:15:02,760
can also control on the CLI so here we

01:15:00,250 --> 01:15:07,000
have another UID map a new range

01:15:02,760 --> 01:15:12,210
starting at 100,000 and with the length

01:15:07,000 --> 01:15:17,590
or the range of 5,000 we do sleep and

01:15:12,210 --> 01:15:19,540
create a new container and now I may

01:15:17,590 --> 01:15:21,340
regret it because I should have cleaned

01:15:19,540 --> 01:15:23,680
up my processes so I'm not sure if the

01:15:21,340 --> 01:15:25,390
next call will actually succeed but what

01:15:23,680 --> 01:15:28,570
we're doing now we use Department top

01:15:25,390 --> 01:15:31,060
command on the latest container so the

01:15:28,570 --> 01:15:33,700
last created container and we're going

01:15:31,060 --> 01:15:37,540
to display the user and the host user H

01:15:33,700 --> 01:15:38,620
user and it grew up a little bit on it

01:15:37,540 --> 01:15:45,070
and oh nice

01:15:38,620 --> 01:15:46,540
okay we see that the host user is 100 K

01:15:45,070 --> 01:15:49,930
which is exactly what we've been

01:15:46,540 --> 01:15:54,700
specifying in the UID map above but is

01:15:49,930 --> 01:15:56,560
route inside and later I'm going to show

01:15:54,700 --> 01:15:59,050
a little bit more about partment Appa

01:15:56,560 --> 01:16:02,200
so partment table has been extended

01:15:59,050 --> 01:16:04,540
quite extensively to make it easier to

01:16:02,200 --> 01:16:10,960
explore what's going on in the container

01:16:04,540 --> 01:16:18,250
and if we do the same on the host we see

01:16:10,960 --> 01:16:20,290
here that it has actually basically here

01:16:18,250 --> 01:16:23,740
here we see the the process running on

01:16:20,290 --> 01:16:27,670
the host this is the ID here we have the

01:16:23,740 --> 01:16:30,220
pit and this is basically how or meant

01:16:27,670 --> 01:16:33,970
to illustrate how a UID map works we can

01:16:30,220 --> 01:16:39,250
do the same starting at 200 K same as

01:16:33,970 --> 01:16:41,340
we've done before and here we go give a

01:16:39,250 --> 01:16:45,430
question

01:16:41,340 --> 01:16:49,060
perfect alright let's dive a little bit

01:16:45,430 --> 01:16:52,239
into apartment four exit model so this

01:16:49,060 --> 01:16:56,650
is basically the biggest differentiator

01:16:52,239 --> 01:16:59,500
between docker and apartment so docker

01:16:56,650 --> 01:17:03,580
has a client-server model so whenever

01:16:59,500 --> 01:17:06,100
you execute docker run you're not

01:17:03,580 --> 01:17:08,920
talking directly to the docker binary or

01:17:06,100 --> 01:17:10,480
in some in some sense yes but there's

01:17:08,920 --> 01:17:13,450
another one called the docker Docherty

01:17:10,480 --> 01:17:15,220
the docker Damon so what the docker

01:17:13,450 --> 01:17:18,160
client does it sends a remote procedure

01:17:15,220 --> 01:17:23,200
call to the demon and the demon will do

01:17:18,160 --> 01:17:26,080
all the heavy lifting for it this is in

01:17:23,200 --> 01:17:28,690
one sense great because everything is

01:17:26,080 --> 01:17:33,220
centralized in the daemon all state is

01:17:28,690 --> 01:17:35,380
there it makes development faster and

01:17:33,220 --> 01:17:38,530
also raises a lot of sources or

01:17:35,380 --> 01:17:41,770
potential for bugs

01:17:38,530 --> 01:17:43,900
mainly because what men and the others

01:17:41,770 --> 01:17:46,660
have to synchronize on disk right we

01:17:43,900 --> 01:17:49,720
can't use mutexes we can use semaphores

01:17:46,660 --> 01:17:52,840
all the cool things that dock can do we

01:17:49,720 --> 01:17:56,880
can't however it comes at a price

01:17:52,840 --> 01:18:02,020
it makes everything a little bit slower

01:17:56,880 --> 01:18:06,550
and it's quite hard or harder to

01:18:02,020 --> 01:18:08,020
integrate into existing Lennox's so for

01:18:06,550 --> 01:18:11,130
instance when you want to use it in

01:18:08,020 --> 01:18:14,200
system d-unit files you cannot really

01:18:11,130 --> 01:18:17,260
use the C group restrictions on it

01:18:14,200 --> 01:18:19,570
because they will be only applied to the

01:18:17,260 --> 01:18:22,630
client process but not to the daemon and

01:18:19,570 --> 01:18:25,720
hence not to the to the container

01:18:22,630 --> 01:18:28,870
processes so this is a little bit a

01:18:25,720 --> 01:18:32,680
little bit hairy but man has a fork x'q

01:18:28,870 --> 01:18:34,660
model which allows for an easier and

01:18:32,680 --> 01:18:37,330
smoother integration into into the

01:18:34,660 --> 01:18:39,160
system same applies to to audit for

01:18:37,330 --> 01:18:42,700
instance I guess I guess Dan will show

01:18:39,160 --> 01:18:49,170
it in in a few minutes here in the in

01:18:42,700 --> 01:18:52,140
the demo and so all containers

01:18:49,170 --> 01:18:55,530
executed appointment our child processes

01:18:52,140 --> 01:18:57,960
of Portman itself and this changes

01:18:55,530 --> 01:19:00,810
everything so the luck I luck and UID

01:18:57,960 --> 01:19:04,100
will be will be following we can see who

01:19:00,810 --> 01:19:07,980
has been executing what on the system

01:19:04,100 --> 01:19:15,180
it's easier to be used in system system

01:19:07,980 --> 01:19:19,430
deem and so forth so the Dan will tell

01:19:15,180 --> 01:19:25,710
it now so if we look at the lock and UID

01:19:19,430 --> 01:19:29,040
it has the ID 1000 so the lock lock and

01:19:25,710 --> 01:19:31,980
UID is something that is set once to

01:19:29,040 --> 01:19:34,230
process and can never be changed so the

01:19:31,980 --> 01:19:35,700
Linux kernel makes sure make sure so

01:19:34,230 --> 01:19:38,280
it's actually in the in the proc

01:19:35,700 --> 01:19:39,930
structure of each process the Linux

01:19:38,280 --> 01:19:45,980
kernel will make sure it will never be

01:19:39,930 --> 01:19:49,890
changed again and this is following me

01:19:45,980 --> 01:19:51,840
as soon as I log in so whenever I log

01:19:49,890 --> 01:19:54,450
into my machine and execute something

01:19:51,840 --> 01:19:57,120
the law this lock and UID is attached to

01:19:54,450 --> 01:19:58,770
all processes everything I do is

01:19:57,120 --> 01:20:02,490
attached there and this is what I'm

01:19:58,770 --> 01:20:06,300
going to show now so if I run Batman

01:20:02,490 --> 01:20:09,690
Fedora container and executed login UID

01:20:06,300 --> 01:20:14,700
well it's the same if I do the same with

01:20:09,690 --> 01:20:17,610
docker now I should make sure to also

01:20:14,700 --> 01:20:21,500
start docker if I do the same with

01:20:17,610 --> 01:20:26,550
docker like holy crap what's that well

01:20:21,500 --> 01:20:31,110
the parent of the docker demon is system

01:20:26,550 --> 01:20:34,430
D and system D is the init process so

01:20:31,110 --> 01:20:38,160
there is no login attached to it so the

01:20:34,430 --> 01:20:39,960
value we see here is basically an an

01:20:38,160 --> 01:20:44,000
overflow this is this is something that

01:20:39,960 --> 01:20:46,500
can can never happen on the system and

01:20:44,000 --> 01:20:49,470
this is what I mean it comes it comes at

01:20:46,500 --> 01:20:51,240
a price to have have a demon so for

01:20:49,470 --> 01:20:53,790
instance the in the audit subsystem

01:20:51,240 --> 01:20:57,840
let's say we wanna we want a secure or

01:20:53,790 --> 01:21:00,960
watch et Cie shadow right there there's

01:20:57,840 --> 01:21:03,989
a lot of necessary information

01:21:00,960 --> 01:21:05,790
we might want to know what's going on in

01:21:03,989 --> 01:21:06,900
etc' shadow because if somebody has

01:21:05,790 --> 01:21:09,480
write access to it

01:21:06,900 --> 01:21:13,530
oh well then then they can log into the

01:21:09,480 --> 01:21:16,110
system into whatever they want so let's

01:21:13,530 --> 01:21:19,020
put it under audit control so the audit

01:21:16,110 --> 01:21:21,719
subsystem will we'll watch it and now

01:21:19,020 --> 01:21:28,739
we're gonna create a Fedora container

01:21:21,719 --> 01:21:32,969
we're gonna volume mount the root on my

01:21:28,739 --> 01:21:38,670
host into the host or into a path on in

01:21:32,969 --> 01:21:41,850
the container and touch etc' shadow when

01:21:38,670 --> 01:21:44,790
we are now using a a you search and

01:21:41,850 --> 01:21:47,900
check what has recently happening on

01:21:44,790 --> 01:21:50,640
etc' shadow file well we see o

01:21:47,900 --> 01:21:54,870
vollentine has done something there so

01:21:50,640 --> 01:21:59,280
we it's being locked the system can

01:21:54,870 --> 01:22:01,920
assign it or map it to my user and as an

01:21:59,280 --> 01:22:05,040
admin or if I want to see what has

01:22:01,920 --> 01:22:08,489
happened on on my system I know who did

01:22:05,040 --> 01:22:13,650
it so now it's me to blame if I do the

01:22:08,489 --> 01:22:13,830
same with docker and check who has done

01:22:13,650 --> 01:22:16,800
it

01:22:13,830 --> 01:22:20,280
it's unset well this is this is a

01:22:16,800 --> 01:22:22,530
problem and this is actually a or is a

01:22:20,280 --> 01:22:25,230
blocker of using docker in certain

01:22:22,530 --> 01:22:28,500
environments because certain security

01:22:25,230 --> 01:22:36,090
certifications actually require that

01:22:28,500 --> 01:22:37,680
everything is auditable yes now we come

01:22:36,090 --> 01:22:39,320
to the top features that I was

01:22:37,680 --> 01:22:42,860
mentioning before

01:22:39,320 --> 01:22:47,400
so now let's first start a container and

01:22:42,860 --> 01:22:50,910
now we use apartment top to display the

01:22:47,400 --> 01:22:52,890
PID in the container and well maybe we

01:22:50,910 --> 01:22:55,230
want to do some debugging or understand

01:22:52,890 --> 01:22:57,780
what what actually is a container it's

01:22:55,230 --> 01:23:03,000
really helpful to use apartment top HP

01:22:57,780 --> 01:23:06,150
we map it to the corresponding PID on

01:23:03,000 --> 01:23:10,110
the host which is basically the PID in

01:23:06,150 --> 01:23:13,210
the parent user and pin namespace

01:23:10,110 --> 01:23:17,739
this is pretty this is pretty nice

01:23:13,210 --> 01:23:24,070
we can also list the SAE Linux label we

01:23:17,739 --> 01:23:27,489
can check the if a second is if a second

01:23:24,070 --> 01:23:31,479
filter is enabled for the process which

01:23:27,489 --> 01:23:35,139
can be which can be it can be useful to

01:23:31,479 --> 01:23:36,789
figure out or see my second profile that

01:23:35,139 --> 01:23:39,880
I'm writing and attached to the

01:23:36,789 --> 01:23:43,659
containers actually effective we can

01:23:39,880 --> 01:23:48,280
also list the capabilities so there's a

01:23:43,659 --> 01:23:51,729
lot of different capabilities that the

01:23:48,280 --> 01:23:56,349
process can have one of them and which

01:23:51,729 --> 01:23:59,320
is the biggest one is the caps is this

01:23:56,349 --> 01:24:03,550
admin one which is close to be something

01:23:59,320 --> 01:24:07,780
like route and in the next talk I'm

01:24:03,550 --> 01:24:12,550
gonna talk about why we or how we

01:24:07,780 --> 01:24:15,460
support overlay for none or for rootless

01:24:12,550 --> 01:24:19,440
containers because if overlay for

01:24:15,460 --> 01:24:22,539
mounting requires caps is that mean

01:24:19,440 --> 01:24:23,289
all right this is a demo so something

01:24:22,539 --> 01:24:28,389
must have gone wrong

01:24:23,289 --> 01:24:30,579
here's but one thing I want to look at

01:24:28,389 --> 01:24:36,550
apartment top yeah we still have a lot

01:24:30,579 --> 01:24:39,869
of time to look a little bit on at what

01:24:36,550 --> 01:24:43,030
part man top supports so here

01:24:39,869 --> 01:24:45,699
here it's a little bit funny because

01:24:43,030 --> 01:24:49,989
bottom and top is actually a PS but

01:24:45,699 --> 01:24:53,860
apartment PS shows the the containers so

01:24:49,989 --> 01:24:55,869
yeah well it's an inheritance from from

01:24:53,860 --> 01:24:57,999
the docker seal I but I wouldn't have no

01:24:55,869 --> 01:25:02,320
on any any other way so in case you

01:24:57,999 --> 01:25:05,110
wonder why I'm now comparing it to 2p as

01:25:02,320 --> 01:25:13,150
one because that is actually what has

01:25:05,110 --> 01:25:15,760
been happening before so docker top or

01:25:13,150 --> 01:25:18,969
run see top they're basically executing

01:25:15,760 --> 01:25:22,749
PS and try to and do some parsing and

01:25:18,969 --> 01:25:25,929
try to map the the PID in the container

01:25:22,749 --> 01:25:32,440
to the PID on the host and things like

01:25:25,929 --> 01:25:36,909
this and P as is nice but it's really

01:25:32,440 --> 01:25:40,179
old and it's not meant to be used in a

01:25:36,909 --> 01:25:43,420
way we're using it here because it just

01:25:40,179 --> 01:25:45,070
prints things right it prints and I it

01:25:43,420 --> 01:25:49,090
prints the output in a nice tabular

01:25:45,070 --> 01:25:52,719
table of form but the columns are just

01:25:49,090 --> 01:25:54,699
split by white spaces so it's it's very

01:25:52,719 --> 01:25:56,739
unambiguous in a way that we cannot

01:25:54,699 --> 01:26:00,400
figure out what where is the border of a

01:25:56,739 --> 01:26:04,119
column which is pretty much pretty much

01:26:00,400 --> 01:26:05,949
a breaker or a blocker for certain

01:26:04,119 --> 01:26:08,530
combinations for instance the arguments

01:26:05,949 --> 01:26:10,269
or the command and especially the

01:26:08,530 --> 01:26:12,760
arguments can certainly have white

01:26:10,269 --> 01:26:16,630
spaces right so we cannot just split at

01:26:12,760 --> 01:26:18,639
white spaces because of if not we we

01:26:16,630 --> 01:26:22,809
have a pretty ugly ugly table in the end

01:26:18,639 --> 01:26:25,030
so other tools like git for instance or

01:26:22,809 --> 01:26:27,929
LS you can split everything by by null

01:26:25,030 --> 01:26:32,559
by its which is which is nice which is

01:26:27,929 --> 01:26:34,449
unique easy easy for formatting long

01:26:32,559 --> 01:26:37,269
story short we had to implement our own

01:26:34,449 --> 01:26:39,369
PS and now we're parsing everything in

01:26:37,269 --> 01:26:41,920
the process which takes a little bit

01:26:39,369 --> 01:26:45,309
time but there's no other way on Linux

01:26:41,920 --> 01:26:49,809
than parsing professed but it allows us

01:26:45,309 --> 01:26:54,460
or it allowed us to ride the library the

01:26:49,809 --> 01:26:57,639
PS go library with the the the thought

01:26:54,460 --> 01:26:59,739
of containers so it's aware of what a

01:26:57,639 --> 01:27:03,309
container is it will join the necessary

01:26:59,739 --> 01:27:05,679
namespaces to extract the data so on and

01:27:03,309 --> 01:27:10,510
so forth so at the beginning we have a

01:27:05,679 --> 01:27:12,010
list of things of all supported ones so

01:27:10,510 --> 01:27:14,349
here we have the arguments of the

01:27:12,010 --> 01:27:16,749
command the binding capabilities the

01:27:14,349 --> 01:27:18,579
effective capabilities they inherited

01:27:16,749 --> 01:27:20,920
capabilities and the permissive

01:27:18,579 --> 01:27:23,559
capabilities don't ask me the difference

01:27:20,920 --> 01:27:25,780
I always have to read the man pages and

01:27:23,559 --> 01:27:27,489
every time I feel stupid because I don't

01:27:25,780 --> 01:27:29,800
understand them at the beginning I

01:27:27,489 --> 01:27:31,570
somehow always look at the effective

01:27:29,800 --> 01:27:32,150
ones because those are the ones that are

01:27:31,570 --> 01:27:33,980
actually

01:27:32,150 --> 01:27:36,619
effective for the process we have to

01:27:33,980 --> 01:27:40,070
command we have some time group the

01:27:36,619 --> 01:27:43,010
house group labels and so so on so you

01:27:40,070 --> 01:27:43,699
can you can use them in in different

01:27:43,010 --> 01:27:45,800
combinations

01:27:43,699 --> 01:27:49,880
it will also if you're running on a bun

01:27:45,800 --> 01:27:52,580
- or on Debian you can also inspect the

01:27:49,880 --> 01:27:54,980
app armor profile that is currently

01:27:52,580 --> 01:27:57,560
attached if I recall correctly this

01:27:54,980 --> 01:27:59,599
should be also the yes that's also

01:27:57,560 --> 01:28:02,420
hidden behind label this is why we say

01:27:59,599 --> 01:28:10,219
security a creepy attributes and not as

01:28:02,420 --> 01:28:13,090
a Linux for instance so part men the

01:28:10,219 --> 01:28:17,060
name of part man actually stands for pod

01:28:13,090 --> 01:28:19,389
manager what is a part a part is a

01:28:17,060 --> 01:28:23,840
concept that we inherited from

01:28:19,389 --> 01:28:29,199
kubernetes it's a group of containers

01:28:23,840 --> 01:28:34,989
that share certain resources most likely

01:28:29,199 --> 01:28:37,969
the sorry the the pit namespace the

01:28:34,989 --> 01:28:42,830
network namespace and then depending on

01:28:37,969 --> 01:28:46,599
what we want else to be to be shared so

01:28:42,830 --> 01:28:50,780
partment supports this concept is

01:28:46,599 --> 01:28:55,310
basically from from day one so here we

01:28:50,780 --> 01:29:01,099
can create new pod which is called pod

01:28:55,310 --> 01:29:08,599
test now we create a new container and

01:29:01,099 --> 01:29:10,900
attach it to the the pod I think this is

01:29:08,599 --> 01:29:12,860
actually wrong there should just be a

01:29:10,900 --> 01:29:15,530
apartment create I guess that's a

01:29:12,860 --> 01:29:17,929
there's a it's a typo in the echo

01:29:15,530 --> 01:29:21,530
statement here so if we do apartment

01:29:17,929 --> 01:29:24,110
create - - pod we can specify or tell

01:29:21,530 --> 01:29:28,670
Portman to create a new container and

01:29:24,110 --> 01:29:35,360
put it into this pot we do the same

01:29:28,670 --> 01:29:38,179
again and if we do apartment PS we will

01:29:35,360 --> 01:29:40,849
see that oh right there's no container

01:29:38,179 --> 01:29:43,460
any because we just created the pot we

01:29:40,849 --> 01:29:44,679
created the containers but we didn't

01:29:43,460 --> 01:29:47,929
start them

01:29:44,679 --> 01:29:55,640
so now if we started I don't know what's

01:29:47,929 --> 01:29:57,230
wrong in the script if we do a PS now we

01:29:55,640 --> 01:30:00,469
actually see that two containers are

01:29:57,230 --> 01:30:02,300
running I replicated it locally and it's

01:30:00,469 --> 01:30:04,940
running so that must be must be a buck

01:30:02,300 --> 01:30:07,880
in the demo script just just ignore it

01:30:04,940 --> 01:30:10,640
yeah now you can can trust me for sure

01:30:07,880 --> 01:30:15,170
the two containers are starting so the

01:30:10,640 --> 01:30:18,620
concept of pods is really nice many

01:30:15,170 --> 01:30:22,400
users approached us for how can

01:30:18,620 --> 01:30:25,929
containers communicate how can i name

01:30:22,400 --> 01:30:28,370
containers because docker supports

01:30:25,929 --> 01:30:31,640
creating new networks and attaching

01:30:28,370 --> 01:30:35,390
names to it and it's able to map a

01:30:31,640 --> 01:30:37,460
container name name to basically the IP

01:30:35,390 --> 01:30:42,350
to the network of the container so you

01:30:37,460 --> 01:30:45,890
can use or talk to or you can ping pot

01:30:42,350 --> 01:30:47,780
tag : and then the port this is

01:30:45,890 --> 01:30:51,679
something apartment does not yet support

01:30:47,780 --> 01:30:53,630
why because CNI the container networking

01:30:51,679 --> 01:30:56,360
interface doesn't support it yet it's an

01:30:53,630 --> 01:30:58,570
open standard but we're working hard at

01:30:56,360 --> 01:31:02,540
the moment and prioritized very highly

01:30:58,570 --> 01:31:06,110
to get it working long story short our

01:31:02,540 --> 01:31:08,600
answer is always put them in a in a pod

01:31:06,110 --> 01:31:11,150
and then talk to local host and then the

01:31:08,600 --> 01:31:13,670
part on local host so this is a little

01:31:11,150 --> 01:31:15,679
bit hacky it's it's not alright it's not

01:31:13,670 --> 01:31:20,449
really hacky it's it's just a different

01:31:15,679 --> 01:31:22,790
way of letting containers talk to

01:31:20,449 --> 01:31:25,760
another I would argue if you need

01:31:22,790 --> 01:31:27,469
containers to talk to another then it

01:31:25,760 --> 01:31:32,660
may be wise to put them in the same pot

01:31:27,469 --> 01:31:36,110
as well kubernetes does the same and now

01:31:32,660 --> 01:31:37,370
we can we can stop it well maybe I was

01:31:36,110 --> 01:31:39,920
talking too long and the pot doesn't

01:31:37,370 --> 01:31:42,080
exist anymore but here you can see it

01:31:39,920 --> 01:31:46,400
really doesn't exist anymore we remove

01:31:42,080 --> 01:31:51,739
it we listed there is no pot anymore and

01:31:46,400 --> 01:31:56,030
this is the end of the demo so I'm not

01:31:51,739 --> 01:31:57,130
Dan so I'm not sure what else he wanted

01:31:56,030 --> 01:32:23,230
to talk about

01:31:57,130 --> 01:32:23,800
but maybe you have some questions all

01:32:23,230 --> 01:32:27,580
right

01:32:23,800 --> 01:32:30,580
the question was if I can also create a

01:32:27,580 --> 01:32:33,130
new pot at container creation right so

01:32:30,580 --> 01:32:35,530
here in the demo I was first creating a

01:32:33,130 --> 01:32:38,740
pod and then creating containers and

01:32:35,530 --> 01:32:43,030
which were then part of this pot yes you

01:32:38,740 --> 01:32:44,020
can you can sow portman create and

01:32:43,030 --> 01:32:46,090
Putman run

01:32:44,020 --> 01:32:48,130
they basically shared the same options

01:32:46,090 --> 01:32:53,740
the same flex so you can also do it for

01:32:48,130 --> 01:32:54,370
apartment run so if I do now what and

01:32:53,740 --> 01:32:58,180
run

01:32:54,370 --> 01:33:00,580
oh I usually I don't want to do demos

01:32:58,180 --> 01:33:03,670
life because I'm I'm not as much as a

01:33:00,580 --> 01:33:09,990
cowboy as Dan is but we're in this

01:33:03,670 --> 01:33:19,840
together so you can help me right so

01:33:09,990 --> 01:33:21,550
here I run it should be like this so we

01:33:19,840 --> 01:33:23,050
run the new container or a run is

01:33:21,550 --> 01:33:28,690
basically a create and start at the same

01:33:23,050 --> 01:33:31,360
time we say we want to attach it or put

01:33:28,690 --> 01:33:35,860
it into the pot which is called life if

01:33:31,360 --> 01:33:39,670
I do apartment pot list we see bar and

01:33:35,860 --> 01:33:40,090
foo but life doesn't exist and we're on

01:33:39,670 --> 01:33:42,130
it

01:33:40,090 --> 01:33:51,640
we detach from the Container immediately

01:33:42,130 --> 01:33:56,160
and run top all right I thought it would

01:33:51,640 --> 01:33:56,160
work I was certain it would work

01:33:58,160 --> 01:34:06,390
all right either either I was wrong or

01:34:03,750 --> 01:34:06,960
we added support for it at a at a later

01:34:06,390 --> 01:34:10,670
point

01:34:06,960 --> 01:34:10,670
let me try out something

01:34:20,100 --> 01:34:26,410
all right so this is currently not

01:34:24,219 --> 01:34:32,590
possible apparently I was convinced we

01:34:26,410 --> 01:34:34,739
support it any other questions yeah too

01:34:32,590 --> 01:34:34,739
much

01:34:41,269 --> 01:34:48,389
so the question was how much support or

01:34:45,599 --> 01:34:50,070
how much work is going on in the Linux

01:34:48,389 --> 01:34:55,079
kernel to better support rootless

01:34:50,070 --> 01:34:57,480
containers I I honestly am NOT able to

01:34:55,079 --> 01:35:00,389
mention all of it because I just have a

01:34:57,480 --> 01:35:02,849
limited focus and I'm using the kernel

01:35:00,389 --> 01:35:07,559
I'm not much working on it lately but

01:35:02,849 --> 01:35:09,900
there is a lot of stuff going on a big

01:35:07,559 --> 01:35:14,429
problem always seemed to be file systems

01:35:09,900 --> 01:35:18,150
right overlay for instance requires caps

01:35:14,429 --> 01:35:23,070
as admin so it's not usable by a non

01:35:18,150 --> 01:35:26,780
root user which is why we have overlay

01:35:23,070 --> 01:35:30,090
implementation in fuse or in user space

01:35:26,780 --> 01:35:37,920
so there are a lot of workarounds going

01:35:30,090 --> 01:35:40,019
on then one big thing or one big topic

01:35:37,920 --> 01:35:44,519
that is also going on is what is a

01:35:40,019 --> 01:35:47,489
container right there is no such thing

01:35:44,519 --> 01:35:51,449
as a container in sorry in the Linux

01:35:47,489 --> 01:35:54,960
kernel which is also why there's the

01:35:51,449 --> 01:35:57,059
cool t-shirt I'm not sure if he's still

01:35:54,960 --> 01:35:59,789
there the containers are Linux load

01:35:57,059 --> 01:36:03,449
right there's a container is nothing

01:35:59,789 --> 01:36:06,840
special it's in the end every process is

01:36:03,449 --> 01:36:09,090
in some namespace under or in some

01:36:06,840 --> 01:36:11,639
secret but the ones for containers are

01:36:09,090 --> 01:36:17,789
just a little bit different

01:36:11,639 --> 01:36:20,670
however it would be nice to know which

01:36:17,789 --> 01:36:24,269
processes are running within a specific

01:36:20,670 --> 01:36:27,809
container so there is the ID idea of

01:36:24,269 --> 01:36:31,679
adding or introducing the concept of a

01:36:27,809 --> 01:36:33,300
container ID so when you create the

01:36:31,679 --> 01:36:35,969
inner process of the container so the

01:36:33,300 --> 01:36:37,350
first process in this namespace to

01:36:35,969 --> 01:36:40,719
attach an

01:36:37,350 --> 01:36:45,940
to that similar to the login UID which

01:36:40,719 --> 01:36:49,719
cannot be altered anymore and there's a

01:36:45,940 --> 01:36:52,780
lot of work going on from redhead

01:36:49,719 --> 01:36:54,969
engineers but also from canonical from

01:36:52,780 --> 01:36:58,420
Sousa so there's a lot of people having

01:36:54,969 --> 01:37:01,030
interest in it but it's hard to find

01:36:58,420 --> 01:37:06,040
consensus how to do it

01:37:01,030 --> 01:37:08,260
where to do it so I think Divi engine I

01:37:06,040 --> 01:37:11,530
guess it's a tomorrow or on Saturday the

01:37:08,260 --> 01:37:14,800
google Summer of Code presentations on

01:37:11,530 --> 01:37:17,739
Saturday so here here in the front row I

01:37:14,800 --> 01:37:22,090
was sitting deviant he was working with

01:37:17,739 --> 01:37:25,750
Dan g7 screamin oh and me this year on a

01:37:22,090 --> 01:37:31,750
google Summer of Code project and if the

01:37:25,750 --> 01:37:34,000
idea we had was basically to add another

01:37:31,750 --> 01:37:35,590
feature to part man part men allows to

01:37:34,000 --> 01:37:38,320
generate system the unit files already

01:37:35,590 --> 01:37:42,700
it allows generate kubernetes ml file

01:37:38,320 --> 01:37:45,100
and dan is all about security right so

01:37:42,700 --> 01:37:48,010
we thought how can we make Portman more

01:37:45,100 --> 01:37:49,270
secure how we can help users to secure

01:37:48,010 --> 01:37:51,760
the containers and lock down the

01:37:49,270 --> 01:37:54,580
containers a little bit more so we also

01:37:51,760 --> 01:37:57,940
wanted to generate a sec comp profile

01:37:54,580 --> 01:38:00,630
so what ii does it's basically a filter

01:37:57,940 --> 01:38:04,989
mechanism in the kernel where you can

01:38:00,630 --> 01:38:08,800
configure system calls to be allowed or

01:38:04,989 --> 01:38:11,440
forbidden and this goes it's on it can

01:38:08,800 --> 01:38:13,840
go go down in a very fine granular level

01:38:11,440 --> 01:38:15,640
also down to the arguments but this is

01:38:13,840 --> 01:38:20,260
basically what every container engine

01:38:15,640 --> 01:38:23,800
out there does and the most portable way

01:38:20,260 --> 01:38:29,980
is to have a whitelist approach so it

01:38:23,800 --> 01:38:32,170
allows for so this this list includes

01:38:29,980 --> 01:38:35,200
all system calls that a container can

01:38:32,170 --> 01:38:38,410
execute and there's a default one that

01:38:35,200 --> 01:38:40,420
was created a furious back by by jesse

01:38:38,410 --> 01:38:42,880
Frizzell from at the time she was

01:38:40,420 --> 01:38:45,840
working at docker and this was a really

01:38:42,880 --> 01:38:49,380
Herculean task because you can imagine

01:38:45,840 --> 01:38:51,989
this standard whitelist is

01:38:49,380 --> 01:38:55,790
we used for basically all containers out

01:38:51,989 --> 01:38:59,280
there so finding a set of system calls

01:38:55,790 --> 01:39:03,000
that every container can execute without

01:38:59,280 --> 01:39:07,530
breaking it is really really really

01:39:03,000 --> 01:39:11,520
really tough yet all other system calls

01:39:07,530 --> 01:39:16,110
are implicitly forbidden so it's it's a

01:39:11,520 --> 01:39:18,929
way of having yet another onion layer of

01:39:16,110 --> 01:39:25,409
security around the containers and for

01:39:18,929 --> 01:39:28,560
pretty certain things and well it's but

01:39:25,409 --> 01:39:31,260
for sure to support all containers out

01:39:28,560 --> 01:39:33,300
there or nearly all containers or

01:39:31,260 --> 01:39:36,000
workloads out there it's very loose

01:39:33,300 --> 01:39:38,489
right defense do you remember how many

01:39:36,000 --> 01:39:41,730
system calls are enabled it's 180 or

01:39:38,489 --> 01:39:44,070
something like this all right so it

01:39:41,730 --> 01:39:46,080
blocks it blocks 44 so it depends really

01:39:44,070 --> 01:39:49,679
on on the kernel version that you're

01:39:46,080 --> 01:39:52,440
using but it's it's obvious that by the

01:39:49,679 --> 01:39:53,790
we can erase many of the two or three

01:39:52,440 --> 01:39:55,620
hundred system calls depending on the

01:39:53,790 --> 01:39:57,389
kernel version we don't need everything

01:39:55,620 --> 01:40:00,090
if you really want to lock look at

01:39:57,389 --> 01:40:01,590
things more down it would be nice to

01:40:00,090 --> 01:40:05,580
have an automated way of doing it

01:40:01,590 --> 01:40:08,630
because it's non-trivial to figure out

01:40:05,580 --> 01:40:11,340
which system calls might be executed

01:40:08,630 --> 01:40:14,040
within a container yes you can s trace

01:40:11,340 --> 01:40:17,699
but I guarantee you will miss something

01:40:14,040 --> 01:40:21,179
because they're still run C and run C

01:40:17,699 --> 01:40:22,739
will create the process and there are

01:40:21,179 --> 01:40:26,250
certain system calls that are required

01:40:22,739 --> 01:40:31,320
for run C to then create the init

01:40:26,250 --> 01:40:33,449
process long story short we were working

01:40:31,320 --> 01:40:36,000
on that with deviant and deviant really

01:40:33,449 --> 01:40:37,920
really did an amazing job there we have

01:40:36,000 --> 01:40:39,659
an open poll requests at the moment

01:40:37,920 --> 01:40:43,790
we're that we're working on to support

01:40:39,659 --> 01:40:47,040
exactly that and to come back to the

01:40:43,790 --> 01:40:50,420
concept of having a container ID in the

01:40:47,040 --> 01:40:55,020
kernel this would be amazing to have

01:40:50,420 --> 01:40:57,179
because how Debian solved it was so we

01:40:55,020 --> 01:40:58,920
were looking at a few things or at a few

01:40:57,179 --> 01:40:59,800
mechanisms to do it we could use p trays

01:40:58,920 --> 01:41:03,370
but

01:40:59,800 --> 01:41:05,950
this is low and has an impact on on the

01:41:03,370 --> 01:41:08,110
performance which may have some side

01:41:05,950 --> 01:41:10,570
effects on the control path and the

01:41:08,110 --> 01:41:13,300
execution paths within the container so

01:41:10,570 --> 01:41:15,610
we might miss things and then Vivian

01:41:13,300 --> 01:41:17,890
said why don't we use EBP F everybody's

01:41:15,610 --> 01:41:22,600
talking about it so now let's let's do

01:41:17,890 --> 01:41:27,790
this so we were looking at that and in

01:41:22,600 --> 01:41:31,750
EBP F we have access to a lot of data of

01:41:27,790 --> 01:41:34,090
the process in the kernel and we were

01:41:31,750 --> 01:41:36,700
trying to figure out well now we have

01:41:34,090 --> 01:41:39,220
this EBP F filter and we want to filter

01:41:36,700 --> 01:41:43,380
or we want to lock the system calls that

01:41:39,220 --> 01:41:47,470
are executed by a given process but

01:41:43,380 --> 01:41:51,370
which one is inside the container having

01:41:47,470 --> 01:41:54,760
an ID which is an approach structure of

01:41:51,370 --> 01:41:56,980
a process in the in Linux would be ideal

01:41:54,760 --> 01:42:00,100
because we it's one comparison it's

01:41:56,980 --> 01:42:02,020
super cheap right we can be certain that

01:42:00,100 --> 01:42:04,600
this is a process in the container right

01:42:02,020 --> 01:42:07,420
that can be that can be dozens or

01:42:04,600 --> 01:42:09,010
hundreds at least in theory processes

01:42:07,420 --> 01:42:10,600
running within a container and we need

01:42:09,010 --> 01:42:12,490
to figure out is this process on the

01:42:10,600 --> 01:42:15,700
host in another container or something

01:42:12,490 --> 01:42:18,970
completely different so we had to work a

01:42:15,700 --> 01:42:21,760
little bit around this and do an

01:42:18,970 --> 01:42:25,750
approximation based on the namespaces

01:42:21,760 --> 01:42:28,030
and the IDs so if the container in or if

01:42:25,750 --> 01:42:31,210
processes inside the container create

01:42:28,030 --> 01:42:34,780
new namespaces sorry we might be missing

01:42:31,210 --> 01:42:37,600
information but this is as close as we

01:42:34,780 --> 01:42:40,120
can get so this is something from our

01:42:37,600 --> 01:42:43,690
perspective a very recent story or it's

01:42:40,120 --> 01:42:46,600
still ongoing at the moment where work

01:42:43,690 --> 01:42:51,100
is going on in the kernel it's not yet

01:42:46,600 --> 01:42:54,180
finished and it's it's hard to find

01:42:51,100 --> 01:42:56,950
consensus because there are many people

01:42:54,180 --> 01:42:59,080
who have different views different use

01:42:56,950 --> 01:43:01,660
cases different opinions and finding

01:42:59,080 --> 01:43:04,150
consensus there is something long I

01:43:01,660 --> 01:43:07,540
guess the first article on lwn is

01:43:04,150 --> 01:43:09,550
already three or four years old and we

01:43:07,540 --> 01:43:11,739
were we were very we were full of hope

01:43:09,550 --> 01:43:14,920
like okay maybe perfect timing and

01:43:11,739 --> 01:43:17,590
this gets in into Colonel I guess it was

01:43:14,920 --> 01:43:21,190
five to two but then Eric Eric Peterman

01:43:17,590 --> 01:43:24,570
he said like uh sorry now some some

01:43:21,190 --> 01:43:27,460
folks from from canonical Alexei Alex D

01:43:24,570 --> 01:43:28,960
they said no they want to rethink how

01:43:27,460 --> 01:43:30,519
are they gonna do it which is which is

01:43:28,960 --> 01:43:34,030
great they're they're doing a lot a lot

01:43:30,519 --> 01:43:36,630
of great stuff a lot of other work is

01:43:34,030 --> 01:43:40,090
going on with respect to security

01:43:36,630 --> 01:43:45,789
so at Souza for instance there's Alexis

01:43:40,090 --> 01:43:48,820
RI who is working on a lot of security

01:43:45,789 --> 01:43:53,579
in particular for for containers and a

01:43:48,820 --> 01:43:55,869
lot of attacks also recently came by

01:43:53,579 --> 01:43:58,840
escaping via the file system so you

01:43:55,869 --> 01:44:00,670
escape the control container at specific

01:43:58,840 --> 01:44:07,260
execution times for instance via

01:44:00,670 --> 01:44:11,349
symlinks or there was an another one oh

01:44:07,260 --> 01:44:13,599
I had I had to read it up how exactly it

01:44:11,349 --> 01:44:16,659
works earlier after the chaos

01:44:13,599 --> 01:44:22,389
communication congress there was a CVE

01:44:16,659 --> 01:44:24,909
released by replacing III the problem

01:44:22,389 --> 01:44:28,389
was that run C was dynamically linked

01:44:24,909 --> 01:44:33,340
and you still see run C in the container

01:44:28,389 --> 01:44:38,800
and if you handcraft container image

01:44:33,340 --> 01:44:40,749
with the militias Lipsy then with a few

01:44:38,800 --> 01:44:42,940
nasty tricks you can basically escape

01:44:40,749 --> 01:44:46,480
the container and then have access on

01:44:42,940 --> 01:44:48,760
the host so there there are there's a

01:44:46,480 --> 01:44:51,670
lot of work going on in locking things

01:44:48,760 --> 01:44:53,469
more down I would say in the kernel

01:44:51,670 --> 01:44:57,610
there's two big things which is rootless

01:44:53,469 --> 01:45:00,630
how sorry how to get this done and then

01:44:57,610 --> 01:45:00,630
there's also security

01:45:15,970 --> 01:45:18,720
hmm

01:46:03,669 --> 01:46:06,669
right

01:46:15,960 --> 01:46:19,469
can he beat you

01:46:32,940 --> 01:46:40,510
yeah so the question was well it was a

01:46:38,260 --> 01:46:42,130
lot of information actually I actually I

01:46:40,510 --> 01:46:43,890
think last week we were in a call I

01:46:42,130 --> 01:46:46,960
didn't see the face but I remember your

01:46:43,890 --> 01:46:50,380
your voice but I was silent because gzip

01:46:46,960 --> 01:46:55,840
and he is doing all the the C group work

01:46:50,380 --> 01:46:57,700
at the moment so I think if I rephrase

01:46:55,840 --> 01:47:00,640
please tell me if I refreshed it

01:46:57,700 --> 01:47:03,790
correctly is which Colonel api's are

01:47:00,640 --> 01:47:08,770
available which things you can expect to

01:47:03,790 --> 01:47:12,010
be available in a container I would say

01:47:08,770 --> 01:47:14,740
everything and none because it's it's

01:47:12,010 --> 01:47:16,570
really hard to say what's what's inside

01:47:14,740 --> 01:47:20,620
a container and what is a container so

01:47:16,570 --> 01:47:22,840
from the it depends what we're talking

01:47:20,620 --> 01:47:26,140
about if it depends on on the mount

01:47:22,840 --> 01:47:30,460
points this is something we can more or

01:47:26,140 --> 01:47:31,870
less control if it depends or if you're

01:47:30,460 --> 01:47:34,330
looking at the syscalls

01:47:31,870 --> 01:47:35,710
it then it depends on the kernel version

01:47:34,330 --> 01:47:38,820
that we're running and on the second

01:47:35,710 --> 01:47:43,870
filter that we're using at the moment

01:47:38,820 --> 01:47:49,360
and with system D I'm not entirely up to

01:47:43,870 --> 01:47:52,750
date with with the recent work on on C

01:47:49,360 --> 01:47:55,300
groups but as far as I understood that

01:47:52,750 --> 01:47:58,120
well one problem is that C groups we've

01:47:55,300 --> 01:48:01,600
won as you mentioned is it doesn't allow

01:47:58,120 --> 01:48:04,270
delegation which is something that C

01:48:01,600 --> 01:48:06,280
groups we two supports but then we have

01:48:04,270 --> 01:48:06,930
the problem that run C doesn't support

01:48:06,280 --> 01:48:12,220
it

01:48:06,930 --> 01:48:14,200
however with Fedora 31 we will enable

01:48:12,220 --> 01:48:14,740
see groups v2 and then things have to

01:48:14,200 --> 01:48:18,970
change

01:48:14,740 --> 01:48:23,560
so I how it looks like is run C will be

01:48:18,970 --> 01:48:27,520
too late for Fedora 31 to support C

01:48:23,560 --> 01:48:30,520
groups B 2 so we will switch over to see

01:48:27,520 --> 01:48:33,160
run which is an implementation by also

01:48:30,520 --> 01:48:34,810
Giuseppe who brought an Aussie I

01:48:33,160 --> 01:48:38,110
complain container runtime but fully

01:48:34,810 --> 01:48:39,570
written in C write run C is written and

01:48:38,110 --> 01:48:42,810
go

01:48:39,570 --> 01:48:44,940
and go has a lot of limitations in the

01:48:42,810 --> 01:48:48,120
sense it doesn't allow for and things

01:48:44,940 --> 01:48:50,220
like that then there are the runtime has

01:48:48,120 --> 01:48:52,230
some implications because there are some

01:48:50,220 --> 01:48:55,740
some routines running in the background

01:48:52,230 --> 01:48:58,590
so you cannot fully or you cannot

01:48:55,740 --> 01:49:01,050
unshare in all circumstances so there

01:48:58,590 --> 01:49:03,420
there are some weird tricks needed for

01:49:01,050 --> 01:49:05,850
run C to execute run C and then exit and

01:49:03,420 --> 01:49:09,990
then do basically a double fork and and

01:49:05,850 --> 01:49:13,140
things like this which are not not that

01:49:09,990 --> 01:49:15,990
hard to do in C so I hope that with

01:49:13,140 --> 01:49:18,240
respect to system D support in the

01:49:15,990 --> 01:49:19,560
containers not everything is supported

01:49:18,240 --> 01:49:22,050
as you just mentioned because some

01:49:19,560 --> 01:49:25,440
things there are just some limitations

01:49:22,050 --> 01:49:29,330
but with the C groups we to work I guess

01:49:25,440 --> 01:49:29,330
things will improve dramatically

01:50:11,800 --> 01:50:18,140
so I'm I'm not working on it so I cannot

01:50:15,710 --> 01:50:21,470
tell you for sure Giuseppe is definitely

01:50:18,140 --> 01:50:23,600
the person to talk to my guts tell me I

01:50:21,470 --> 01:50:26,060
would be surprised if we wouldn't use

01:50:23,600 --> 01:50:28,760
systemd for it so there's basically two

01:50:26,060 --> 01:50:31,070
ways of configuring cgroups or two

01:50:28,760 --> 01:50:34,090
managers we're calling it one is C group

01:50:31,070 --> 01:50:36,830
of s and the other one is system D and

01:50:34,090 --> 01:50:43,220
I'm pretty sure we will use system T

01:50:36,830 --> 01:50:48,680
also for all the duplication there all

01:50:43,220 --> 01:50:51,470
right any other questions I guess you

01:50:48,680 --> 01:50:54,080
need coffee as much as I do so I hope to

01:50:51,470 --> 01:50:56,530
see you in 35 minutes then I'll be

01:50:54,080 --> 01:50:59,530
talking a little bit about builder

01:50:56,530 --> 01:50:59,530

YouTube URL: https://www.youtube.com/watch?v=Sz2uizzwRzs


