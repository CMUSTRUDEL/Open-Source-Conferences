Title: Bring your upstream releases to Fedora Rawhide in one step - Tomas Tomecek - Flock 2019
Publication date: 2019-09-02
Playlist: Flock 2019
Description: 
	Imagine a world where the only manual action you need to perform when putting a new upstream release into a Linux distro is to just approve it.

With packit service now live, this is the world we live in!

We will not stop there: as you develop your upstream project, packit service is giving you constant feedback on how your project is doing within Fedora OS: can it be built? Do the tests pass? Is my change breaking a compose?

--
Recordings of talks at Flock are a community effort.  Unfortunately not everything works perfectly every time. If you're interested in helping us improve, let us know.
Captions: 
	00:00:01,579 --> 00:00:07,340
so we'll come up to our talk or told

00:00:04,939 --> 00:00:09,620
it's called bring corruption releases to

00:00:07,340 --> 00:00:13,550
federal height in one step so very short

00:00:09,620 --> 00:00:17,000
and concise title and this is talk this

00:00:13,550 --> 00:00:19,820
is a talk about the packet project so

00:00:17,000 --> 00:00:22,880
let me first introduce our team we have

00:00:19,820 --> 00:00:26,150
40 members from our team here so the

00:00:22,880 --> 00:00:27,589
time tomash is Franta lira silica and

00:00:26,150 --> 00:00:30,109
there is Shraddha so there's the four of

00:00:27,589 --> 00:00:33,620
us and our team has actually much more

00:00:30,109 --> 00:00:35,809
people and they are at home not here so

00:00:33,620 --> 00:00:37,940
if you ever open an issue or send a pull

00:00:35,809 --> 00:00:39,829
request or projects like you will

00:00:37,940 --> 00:00:43,219
probably see one of the faces commenting

00:00:39,829 --> 00:00:48,920
on the pull request or the issue should

00:00:43,219 --> 00:00:52,059
be when I introduce yourself okay so I

00:00:48,920 --> 00:00:54,410
guess let's start let's start the why

00:00:52,059 --> 00:00:57,429
like why we are working on packet

00:00:54,410 --> 00:01:00,320
project or why we want to actually bring

00:00:57,429 --> 00:01:04,460
new up stimulus into rawhide like very

00:01:00,320 --> 00:01:07,670
very easily very nice diagram which was

00:01:04,460 --> 00:01:11,900
drawn by staff and we used it in red

00:01:07,670 --> 00:01:16,450
summit and it's like shows you was the

00:01:11,900 --> 00:01:20,300
current flow of or like work of obtained

00:01:16,450 --> 00:01:22,970
developers and how their work lines into

00:01:20,300 --> 00:01:25,040
the red head echo system and bioethical

00:01:22,970 --> 00:01:27,200
system I mean all our operating systems

00:01:25,040 --> 00:01:30,800
which means federal stable federales

00:01:27,200 --> 00:01:34,640
releases federal hide Red Hat Enterprise

00:01:30,800 --> 00:01:37,250
Linux Red Hat chorus and CentOS and all

00:01:34,640 --> 00:01:39,290
these different flavors as you can see

00:01:37,250 --> 00:01:42,470
on the left side we have the engineers

00:01:39,290 --> 00:01:45,080
and contributors there under code they

00:01:42,470 --> 00:01:47,510
create new features there fix bugs and

00:01:45,080 --> 00:01:50,540
there's all of this code lands in

00:01:47,510 --> 00:01:53,750
different like in different projects so

00:01:50,540 --> 00:01:56,510
you can see like Linux kernel or Python

00:01:53,750 --> 00:01:59,990
or different projects on github and then

00:01:56,510 --> 00:02:02,240
at some point the project says like ok

00:01:59,990 --> 00:02:04,130
it's time to do an upstream release and

00:02:02,240 --> 00:02:06,380
that's usually the time when the

00:02:04,130 --> 00:02:07,940
downstream maintainer x' pick up the

00:02:06,380 --> 00:02:10,940
upstream Ulysses and bring them into

00:02:07,940 --> 00:02:13,200
fedora height and then at some point all

00:02:10,940 --> 00:02:16,980
these new option releases bubble to

00:02:13,200 --> 00:02:18,989
all the other different flavors so I'm

00:02:16,980 --> 00:02:21,510
pretty sure like all of you working

00:02:18,989 --> 00:02:23,879
upstream so you know this very well so

00:02:21,510 --> 00:02:25,769
is there anything you are missing or are

00:02:23,879 --> 00:02:28,760
you okay with this workflow and like

00:02:25,769 --> 00:02:34,410
would you like to change it or keep it

00:02:28,760 --> 00:02:35,280
yes Mohan oh so a man says that Apple is

00:02:34,410 --> 00:02:39,360
missing

00:02:35,280 --> 00:02:43,349
yeah it's nothing intentionally but okay

00:02:39,360 --> 00:02:43,709
so what's your comment actually oh all

00:02:43,349 --> 00:02:46,200
right

00:02:43,709 --> 00:02:48,480
oh yeah so yeah we are missing Apple on

00:02:46,200 --> 00:02:51,360
the on the slide that's correct we

00:02:48,480 --> 00:02:53,970
should fix it okay so I'll give you my

00:02:51,360 --> 00:02:56,640
answer what's missing here like my

00:02:53,970 --> 00:02:58,489
problem here is that all the arrows are

00:02:56,640 --> 00:03:01,019
just pointing from left to right and

00:02:58,489 --> 00:03:03,120
there is no arrow which would point from

00:03:01,019 --> 00:03:06,420
right to left which means that when

00:03:03,120 --> 00:03:08,519
something goes good or bad on the right

00:03:06,420 --> 00:03:11,280
side the people or the projects on the

00:03:08,519 --> 00:03:12,720
left side would not realize it and with

00:03:11,280 --> 00:03:15,599
the packet project we are trying to do

00:03:12,720 --> 00:03:17,880
some like this that we would have a also

00:03:15,599 --> 00:03:20,609
a flow from the right side that for

00:03:17,880 --> 00:03:23,190
example there's a new of families we get

00:03:20,609 --> 00:03:25,650
it to feather our height and the tests

00:03:23,190 --> 00:03:27,870
would fail or the compose would fail and

00:03:25,650 --> 00:03:30,450
we want to inform the upstream project

00:03:27,870 --> 00:03:33,389
about this so this is one of our goals

00:03:30,450 --> 00:03:36,090
and you can also see that the color of

00:03:33,389 --> 00:03:38,069
the arrows between the projects and

00:03:36,090 --> 00:03:40,829
federal high change and it's also

00:03:38,069 --> 00:03:44,370
another goal of us and it would be like

00:03:40,829 --> 00:03:46,829
automation create automation to bring

00:03:44,370 --> 00:03:50,630
the optimal releases to federal height

00:03:46,829 --> 00:03:50,630
and that's what this whole talk is about

00:03:50,989 --> 00:03:58,400
so now it's up to Franta to introduce

00:03:54,690 --> 00:04:02,910
the packet tool yeah so to help people

00:03:58,400 --> 00:04:06,269
with the bore process described in the

00:04:02,910 --> 00:04:09,810
previous slide we work on the two core

00:04:06,269 --> 00:04:12,230
packet so packet is a packaged Python

00:04:09,810 --> 00:04:14,940
package with the Python API and

00:04:12,230 --> 00:04:20,539
command-line interface you can install

00:04:14,940 --> 00:04:23,940
it easily do DNF it has rich

00:04:20,539 --> 00:04:26,370
command-line interface with many sub

00:04:23,940 --> 00:04:29,880
commands for instance you have sub

00:04:26,370 --> 00:04:32,400
for proposing updates from upstream

00:04:29,880 --> 00:04:35,610
repository to downstream to this gate or

00:04:32,400 --> 00:04:38,639
to thinking changes back to upstream

00:04:35,610 --> 00:04:44,479
from this gate you can run belts or

00:04:38,639 --> 00:04:49,919
create updates or great s rpm files or

00:04:44,479 --> 00:04:53,880
run a couple built the main advantage to

00:04:49,919 --> 00:04:56,669
use packet is you can use this sub

00:04:53,880 --> 00:04:58,860
commands directly from the upstream

00:04:56,669 --> 00:05:00,690
apposite Ares so you can here you can

00:04:58,860 --> 00:05:05,820
see the one of the sub commands the

00:05:00,690 --> 00:05:10,440
status and you can run this status from

00:05:05,820 --> 00:05:14,430
the repository or you can place the URL

00:05:10,440 --> 00:05:19,350
and now you can get all necessary info

00:05:14,430 --> 00:05:22,949
so you are working on the real code not

00:05:19,350 --> 00:05:28,380
the patches not in the disk eight but

00:05:22,949 --> 00:05:31,440
you are using the real code so to

00:05:28,380 --> 00:05:34,080
automate more things we have also the

00:05:31,440 --> 00:05:39,120
service which is built on top of the

00:05:34,080 --> 00:05:43,470
packet the tool so it's not the vice

00:05:39,120 --> 00:05:47,120
versa by now we packet service works as

00:05:43,470 --> 00:05:50,580
a github up before you ask

00:05:47,120 --> 00:05:53,550
we have other good forges in mind but we

00:05:50,580 --> 00:05:58,229
have to start with something so get up

00:05:53,550 --> 00:06:00,360
up only for now the packet service pack

00:05:58,229 --> 00:06:04,139
it as a service as you can find it in

00:06:00,360 --> 00:06:11,060
github uses packet to to do the real

00:06:04,139 --> 00:06:16,669
thing and packet service uses its own

00:06:11,060 --> 00:06:20,330
tokens its own users and authentication

00:06:16,669 --> 00:06:26,880
with the packet to you are using your

00:06:20,330 --> 00:06:31,710
tokens and your user we have no API yet

00:06:26,880 --> 00:06:38,009
and no the no client for the API itself

00:06:31,710 --> 00:06:41,490
so all service and tomash

00:06:38,009 --> 00:06:45,809
show some examples thank you for an

00:06:41,490 --> 00:06:48,719
interaction so yeah let's not put many

00:06:45,809 --> 00:06:51,300
more text on the slides and I start with

00:06:48,719 --> 00:06:54,270
pictures like how does the package

00:06:51,300 --> 00:06:56,219
service look actually so Esperanto said

00:06:54,270 --> 00:06:58,919
you can easily find it on github

00:06:56,219 --> 00:07:00,629
marketplace or should just google it I

00:06:58,919 --> 00:07:02,699
believe that Google would give you the

00:07:00,629 --> 00:07:04,169
right thing and if you install it into

00:07:02,699 --> 00:07:04,889
your github project it would look like

00:07:04,169 --> 00:07:08,249
this

00:07:04,889 --> 00:07:10,830
that now you'd be using package service

00:07:08,249 --> 00:07:12,960
which means that whatever you do in your

00:07:10,830 --> 00:07:15,210
github repo we would get all the events

00:07:12,960 --> 00:07:17,729
so for example you push new commits to a

00:07:15,210 --> 00:07:20,099
pull request you create a new release or

00:07:17,729 --> 00:07:21,599
there's a new issue or there's a new

00:07:20,099 --> 00:07:25,710
comment in an issue and you would start

00:07:21,599 --> 00:07:28,349
getting these events and this means that

00:07:25,710 --> 00:07:31,889
we are getting the events and then you

00:07:28,349 --> 00:07:33,870
can like you can set what the package

00:07:31,889 --> 00:07:36,180
service such should do about these

00:07:33,870 --> 00:07:38,550
events which means that for example when

00:07:36,180 --> 00:07:39,419
you create a new upstream release you

00:07:38,550 --> 00:07:42,629
could say that

00:07:39,419 --> 00:07:44,459
okay so pack it service place get these

00:07:42,629 --> 00:07:46,319
new of stimulus and push it to feather

00:07:44,459 --> 00:07:48,990
or height and that's actually what you

00:07:46,319 --> 00:07:50,789
can do and you'll see it in a bit so

00:07:48,990 --> 00:07:54,209
this is how it would look in your github

00:07:50,789 --> 00:07:57,330
repo and then when you start using it

00:07:54,209 --> 00:08:00,029
like one of the like main features we

00:07:57,330 --> 00:08:01,529
have right now that we would do copper

00:08:00,029 --> 00:08:03,449
builds for every change in a pull

00:08:01,529 --> 00:08:06,149
request so which means that for example

00:08:03,449 --> 00:08:08,249
in here someone created new pull request

00:08:06,149 --> 00:08:12,719
on a repo which is using package service

00:08:08,249 --> 00:08:15,089
and all this setup and packet service

00:08:12,719 --> 00:08:17,370
actually took the change and created

00:08:15,089 --> 00:08:19,110
source RPM and pushed it to copper for a

00:08:17,370 --> 00:08:22,559
build so right now the build is pending

00:08:19,110 --> 00:08:24,479
and when the build is finished package

00:08:22,559 --> 00:08:26,849
service would create a new comment in

00:08:24,479 --> 00:08:30,089
the pull request and would inform the

00:08:26,849 --> 00:08:32,010
user how you can actually get get the

00:08:30,089 --> 00:08:34,469
change install it locally and play with

00:08:32,010 --> 00:08:38,519
the actually content of the pull request

00:08:34,469 --> 00:08:40,500
locally we actually did this for sake of

00:08:38,519 --> 00:08:43,229
fred had some it because i know that all

00:08:40,500 --> 00:08:44,670
of us here are engineers so and we are

00:08:43,229 --> 00:08:46,740
working on the federal project so we

00:08:44,670 --> 00:08:48,530
know how to get things from copper but

00:08:46,740 --> 00:08:50,570
i'd rather some it with

00:08:48,530 --> 00:08:53,600
like credit customers and they are not

00:08:50,570 --> 00:08:55,640
very familiar with federal copper so we

00:08:53,600 --> 00:09:00,830
wanted to give this nice comment today

00:08:55,640 --> 00:09:03,770
to them and the main thing we have a

00:09:00,830 --> 00:09:06,590
website so if you to know more about our

00:09:03,770 --> 00:09:08,450
principles or a documentation or all

00:09:06,590 --> 00:09:10,250
these things so please remember back

00:09:08,450 --> 00:09:14,590
into death that's our website where

00:09:10,250 --> 00:09:30,740
everything lives and you can learn more

00:09:14,590 --> 00:09:33,800
any questions so far yes you got yeah so

00:09:30,740 --> 00:09:35,990
the question is whether we are using it

00:09:33,800 --> 00:09:38,000
for redhead specific projects and

00:09:35,990 --> 00:09:40,520
whether you have need to have spec

00:09:38,000 --> 00:09:44,090
following upstream and the sexually

00:09:40,520 --> 00:09:47,950
question unlike slide Plus then so we'll

00:09:44,090 --> 00:09:47,950
get to it but thank you for asking

00:09:48,400 --> 00:09:54,980
okay so let's move on okay so if you

00:09:53,150 --> 00:09:58,640
know something about our project you

00:09:54,980 --> 00:10:03,020
might remember that we had a bet and we

00:09:58,640 --> 00:10:05,000
did this bet with Dominic Dominic and it

00:10:03,020 --> 00:10:08,570
was done at Def Con and the bet was

00:10:05,000 --> 00:10:10,910
about that if we are able to get 500

00:10:08,570 --> 00:10:13,700
projects on board of package service by

00:10:10,910 --> 00:10:17,090
flack dominic would grow a beard and

00:10:13,700 --> 00:10:20,660
that was the bet as you can see the

00:10:17,090 --> 00:10:23,480
Minich doesn't have any beard so you can

00:10:20,660 --> 00:10:25,910
guess how it ended up yeah

00:10:23,480 --> 00:10:28,160
right now we have like tens of projects

00:10:25,910 --> 00:10:30,350
on board it turns out that it's actually

00:10:28,160 --> 00:10:32,480
really tough to create a service which

00:10:30,350 --> 00:10:35,240
is supposed to be like secure and

00:10:32,480 --> 00:10:38,540
scalable and has all the features and be

00:10:35,240 --> 00:10:40,220
bug free and like well maintainable and

00:10:38,540 --> 00:10:42,520
it took us actually a lot of time to do

00:10:40,220 --> 00:10:45,860
this especially the security part

00:10:42,520 --> 00:10:47,540
because if you think about it well when

00:10:45,860 --> 00:10:50,060
we are creating source rpms in our

00:10:47,540 --> 00:10:52,160
service it means that you can have like

00:10:50,060 --> 00:10:54,080
RM RF in your spec file and then you

00:10:52,160 --> 00:10:57,190
could actually trash our like our

00:10:54,080 --> 00:10:59,699
deployment or you could just do like

00:10:57,190 --> 00:11:01,379
look in the files and

00:10:59,699 --> 00:11:03,689
and all the content to your server and

00:11:01,379 --> 00:11:06,119
probably try to access our certificates

00:11:03,689 --> 00:11:08,669
or tokens or all these things so it took

00:11:06,119 --> 00:11:12,480
us actually a long time to figure out to

00:11:08,669 --> 00:11:14,730
do security right and since we actually

00:11:12,480 --> 00:11:16,980
robbed you of the thing of seeing

00:11:14,730 --> 00:11:20,569
dominic with a beard so I decided

00:11:16,980 --> 00:11:24,059
actually to like our review of this and

00:11:20,569 --> 00:11:27,059
hopefully in a year maybe we could get

00:11:24,059 --> 00:11:29,249
this and it's actually a lesson for us

00:11:27,059 --> 00:11:34,100
to make like bets which we can actually

00:11:29,249 --> 00:11:38,269
win so so good job Dominic that you win

00:11:34,100 --> 00:11:41,699
okay so let's continue with actually the

00:11:38,269 --> 00:11:44,160
topic of our presentation and it is how

00:11:41,699 --> 00:11:46,709
you can actually use packet to bring an

00:11:44,160 --> 00:11:48,720
app simulus to rawhide and we'll show

00:11:46,709 --> 00:11:50,459
you in these two different flavors as

00:11:48,720 --> 00:11:53,689
you've seen so far with the tool or with

00:11:50,459 --> 00:11:56,759
the service so with the tool itself

00:11:53,689 --> 00:11:58,259
first thing Esperanto said like when you

00:11:56,759 --> 00:12:01,439
are using the tool on your command line

00:11:58,259 --> 00:12:03,509
you're using your credentials and all

00:12:01,439 --> 00:12:08,699
these things so you need to have the

00:12:03,509 --> 00:12:10,709
federal Kerberos ticket then you need to

00:12:08,699 --> 00:12:13,470
be in your upstream project and then you

00:12:10,709 --> 00:12:15,779
need to have like tags meaning the new

00:12:13,470 --> 00:12:17,579
upstream tag fetched from the extreme

00:12:15,779 --> 00:12:20,039
repo so that's that's the meaning of

00:12:17,579 --> 00:12:22,049
these three commands and then you can

00:12:20,039 --> 00:12:24,600
just call one command which is called

00:12:22,049 --> 00:12:27,209
proposed update and this command

00:12:24,600 --> 00:12:30,859
actually takes the upstream release and

00:12:27,209 --> 00:12:33,679
updates spec file in fedora in this case

00:12:30,859 --> 00:12:37,049
it actually pushes directly to this gate

00:12:33,679 --> 00:12:38,970
that's the no PR command the thing is

00:12:37,049 --> 00:12:41,399
that you can't create pull requests via

00:12:38,970 --> 00:12:44,069
API in federal disk it right now there

00:12:41,399 --> 00:12:45,959
is an issue in peggy api and you are

00:12:44,069 --> 00:12:49,350
waiting for a new deployment to fix this

00:12:45,959 --> 00:12:52,470
and so the precise meaning of the

00:12:49,350 --> 00:12:55,109
command is that they take the zero point

00:12:52,470 --> 00:12:57,929
five extremities and update spec file in

00:12:55,109 --> 00:13:00,419
fedora and like i'm committed and push

00:12:57,929 --> 00:13:02,429
it and then you can build it with

00:13:00,419 --> 00:13:06,569
another command which is packet build

00:13:02,429 --> 00:13:08,970
and that's it so it's pretty simple but

00:13:06,569 --> 00:13:10,720
it's the title of the presentation says

00:13:08,970 --> 00:13:11,980
like do it in one step and

00:13:10,720 --> 00:13:15,069
see there's a bunch of steps here so

00:13:11,980 --> 00:13:17,860
let's try make it even simpler and

00:13:15,069 --> 00:13:26,139
that's using the package service so as I

00:13:17,860 --> 00:13:27,970
said take it sir oh so so in this case

00:13:26,139 --> 00:13:32,290
you need to have the right access to the

00:13:27,970 --> 00:13:32,829
disk it because yeah in this case it is

00:13:32,290 --> 00:13:35,709
yeah

00:13:32,829 --> 00:13:37,750
so actually like the packet build

00:13:35,709 --> 00:13:39,819
command it's just a very thin wrapper on

00:13:37,750 --> 00:13:51,129
top of fat package built like you do

00:13:39,819 --> 00:13:52,839
just in this case it's everything

00:13:51,129 --> 00:13:56,949
running locally yes

00:13:52,839 --> 00:14:00,819
very similar concept as fat package but

00:13:56,949 --> 00:14:02,439
in this case yeah in this case if you

00:14:00,819 --> 00:14:04,779
want package service to update your

00:14:02,439 --> 00:14:07,240
packages in fedora height you'd need to

00:14:04,779 --> 00:14:10,120
give permissions to the packet user in

00:14:07,240 --> 00:14:13,420
fedora to actually be able to sorry

00:14:10,120 --> 00:14:15,759
commit commit to your discrete repo and

00:14:13,420 --> 00:14:17,379
as soon as the película start working

00:14:15,759 --> 00:14:19,240
like you don't even need to do that and

00:14:17,379 --> 00:14:22,259
packet service will be able to create

00:14:19,240 --> 00:14:25,389
pull requests for this discreet repos

00:14:22,259 --> 00:14:27,790
okay I already this explained jobs so we

00:14:25,389 --> 00:14:30,250
have different jobs in package service

00:14:27,790 --> 00:14:33,579
and they have different triggers all

00:14:30,250 --> 00:14:35,500
right yeah I even have an example so we

00:14:33,579 --> 00:14:37,779
have the job proposed downstream which

00:14:35,500 --> 00:14:39,399
means like get the upstream you list for

00:14:37,779 --> 00:14:42,040
fedora and get it to feather at this

00:14:39,399 --> 00:14:44,980
gate the trigger is release so it's

00:14:42,040 --> 00:14:46,509
obvious we have all we also support like

00:14:44,980 --> 00:14:50,110
different triggers for different jobs

00:14:46,509 --> 00:14:52,180
and this is all documented and all the

00:14:50,110 --> 00:14:54,279
jobs can have additional metadata and

00:14:52,180 --> 00:14:56,319
metadata in this case is also like to

00:14:54,279 --> 00:14:58,329
what branch you want to push so you can

00:14:56,319 --> 00:15:00,339
actually define 3 jobs for all the

00:14:58,329 --> 00:15:02,350
maintains that there are branches and

00:15:00,339 --> 00:15:07,509
push new releases like this which

00:15:02,350 --> 00:15:10,559
package service and ok and it's like the

00:15:07,509 --> 00:15:10,559
titled yeah

00:15:15,960 --> 00:15:21,960
okay so we have the question if the

00:15:19,480 --> 00:15:25,330
spectrum is to be extreme for again and

00:15:21,960 --> 00:15:29,380
its second slide from now like the

00:15:25,330 --> 00:15:32,290
question okay so let's

00:15:29,380 --> 00:15:34,420
yeah and just one comment to this slide

00:15:32,290 --> 00:15:36,339
that packet service doesn't support

00:15:34,420 --> 00:15:38,410
builds yet because we didn't have time

00:15:36,339 --> 00:15:41,140
to implement it but hopefully able to do

00:15:38,410 --> 00:15:43,660
it in coming weeks so that we would have

00:15:41,140 --> 00:15:45,910
it all and finally let's go to the

00:15:43,660 --> 00:15:48,490
question of okay I'll skip the first

00:15:45,910 --> 00:15:49,870
question and let's talk about the do I

00:15:48,490 --> 00:15:52,029
really need to have a spectra in the

00:15:49,870 --> 00:15:54,040
upstream repo like this question we was

00:15:52,029 --> 00:15:55,990
asked this question like hundred times

00:15:54,040 --> 00:15:58,690
and everyone was furious about the

00:15:55,990 --> 00:16:00,850
packet project like having spectra in a

00:15:58,690 --> 00:16:03,550
string up like do you really need to

00:16:00,850 --> 00:16:05,589
have it or do we need to have it so the

00:16:03,550 --> 00:16:08,980
answer is no you don't need to have it

00:16:05,589 --> 00:16:11,589
you can actually do something like this

00:16:08,980 --> 00:16:14,440
in fact it we support things called

00:16:11,589 --> 00:16:16,870
actions which means that we have our own

00:16:14,440 --> 00:16:18,900
actions like default implementation of

00:16:16,870 --> 00:16:21,000
some actions and you can easily

00:16:18,900 --> 00:16:23,589
completely swap the default

00:16:21,000 --> 00:16:25,960
implementation for your command so in

00:16:23,589 --> 00:16:28,450
our case we expected the spec values in

00:16:25,960 --> 00:16:30,610
the extreme repo but you can actually

00:16:28,450 --> 00:16:32,800
easily download it from whatever place

00:16:30,610 --> 00:16:36,130
you want so you can put these three

00:16:32,800 --> 00:16:38,920
lines into your packet or DML and it

00:16:36,130 --> 00:16:44,170
will download the spec file from in this

00:16:38,920 --> 00:16:46,510
case from federales get or actually

00:16:44,170 --> 00:16:48,490
another another way how to do this you

00:16:46,510 --> 00:16:50,080
can actually have template of spec file

00:16:48,490 --> 00:16:52,440
in upstream and then you can have some

00:16:50,080 --> 00:16:55,360
action where you just process it and

00:16:52,440 --> 00:16:58,380
render it into the proper purpose spec

00:16:55,360 --> 00:16:58,380
file syntax

00:17:06,309 --> 00:17:11,449
so the question is if we could do it the

00:17:09,260 --> 00:17:13,610
other way around and have a repo with

00:17:11,449 --> 00:17:15,350
spec file and pull the code instead

00:17:13,610 --> 00:17:17,209
so there's actually how this gate works

00:17:15,350 --> 00:17:19,730
like that's literally how this kit works

00:17:17,209 --> 00:17:21,860
that it's a repo with spec file and all

00:17:19,730 --> 00:17:25,429
the other files needed to create the

00:17:21,860 --> 00:17:28,910
source rpm and the upstream archives are

00:17:25,429 --> 00:17:30,530
actually pulled so yeah this disc it

00:17:28,910 --> 00:17:32,230
like you can keep using this gate and

00:17:30,530 --> 00:17:37,460
don't care about packet at all and

00:17:32,230 --> 00:17:38,900
you're good but the and actually thank

00:17:37,460 --> 00:17:41,530
you for the question because there's

00:17:38,900 --> 00:17:44,600
also other feedback we've got so far

00:17:41,530 --> 00:17:46,340
like I'm actually okay working in this

00:17:44,600 --> 00:17:49,130
gate but I would like to have like more

00:17:46,340 --> 00:17:51,080
automation regarding like getting things

00:17:49,130 --> 00:17:54,080
from upstream so maybe that's also a

00:17:51,080 --> 00:17:56,600
area where we as a project could like

00:17:54,080 --> 00:17:58,909
look into and try to figure out some

00:17:56,600 --> 00:18:01,669
workflows which could be better and

00:17:58,909 --> 00:18:03,860
automate something so yeah there's also

00:18:01,669 --> 00:18:06,100
a thing which we could explore yes

00:18:03,860 --> 00:18:06,100
Alexander

00:18:21,030 --> 00:18:25,980
I'm sorry I probably lost him understand

00:18:54,930 --> 00:19:00,720
so the comments from Alexandra is that

00:18:57,830 --> 00:19:03,120
with with the Becket CLI tool you can

00:19:00,720 --> 00:19:05,270
just clone the upstream repo and put a

00:19:03,120 --> 00:19:08,430
spec file inside and work from that

00:19:05,270 --> 00:19:10,740
workplace so yeah that's exactly what we

00:19:08,430 --> 00:19:12,600
are trying to go for that you would work

00:19:10,740 --> 00:19:14,550
all the time from your upstream app oh

00:19:12,600 --> 00:19:36,090
and you would not need to touch this get

00:19:14,550 --> 00:19:39,570
like that's what we are trying to do we

00:19:36,090 --> 00:19:55,890
are using rebase hopper to determine the

00:19:39,570 --> 00:19:58,160
last version if you don't okay so the

00:19:55,890 --> 00:20:00,620
question is that on the previous command

00:19:58,160 --> 00:20:03,240
it was a very long command where we

00:20:00,620 --> 00:20:06,890
explicitly specified a lot of stuff and

00:20:03,240 --> 00:20:09,810
it could be actually discovered and yes

00:20:06,890 --> 00:20:12,630
and actually you can run the proposed

00:20:09,810 --> 00:20:15,690
command just by itself for the discrete

00:20:12,630 --> 00:20:17,520
branch the default is master and you can

00:20:15,690 --> 00:20:19,470
also see dot that means like working the

00:20:17,520 --> 00:20:21,720
current directory it is also the default

00:20:19,470 --> 00:20:25,530
and his front a set for the version we

00:20:21,720 --> 00:20:27,230
can use the observable is monitoring to

00:20:25,530 --> 00:20:30,570
get the latest version of the software

00:20:27,230 --> 00:20:32,280
so yeah I was really trying to be like

00:20:30,570 --> 00:20:34,080
very explicit in this case so that it's

00:20:32,280 --> 00:20:36,840
clear what's happening because if I

00:20:34,080 --> 00:20:38,550
would just print packet purpose update

00:20:36,840 --> 00:20:40,640
it wouldn't be clear what what might be

00:20:38,550 --> 00:20:40,640
happening

00:20:50,450 --> 00:20:56,550
so the question is whether the version

00:20:53,460 --> 00:20:59,730
is mandatory argument the answer is no

00:20:56,550 --> 00:21:02,100
it's as far as I said it peg it is

00:20:59,730 --> 00:21:04,140
trying to figure it out on its own if

00:21:02,100 --> 00:21:06,270
you don't specify it and is trying to

00:21:04,140 --> 00:21:08,400
like pick the up latest upstream release

00:21:06,270 --> 00:21:15,840
via the upstream rail is monitoring or

00:21:08,400 --> 00:21:26,010
and we we definitely have also like oh

00:21:15,840 --> 00:21:27,630
yeah well but we are still we still

00:21:26,010 --> 00:21:29,580
expect that you have spec file them in

00:21:27,630 --> 00:21:33,860
the extreme repo and that the spec file

00:21:29,580 --> 00:21:33,860
is up to date so that's our expectation

00:21:36,920 --> 00:21:42,000
now sexually special case to be honest

00:21:39,690 --> 00:21:43,950
like we expected out the spec files in

00:21:42,000 --> 00:21:46,140
the observable and it is up to date and

00:21:43,950 --> 00:21:49,320
the version in there is the one you want

00:21:46,140 --> 00:21:51,240
to bring to Federer and if not like it's

00:21:49,320 --> 00:21:54,600
up to you to figure it out or pretty

00:21:51,240 --> 00:21:58,290
much like that this one packet is like

00:21:54,600 --> 00:22:01,520
not very like this is a special case

00:21:58,290 --> 00:22:01,520
that's what I'm trying to say

00:22:22,940 --> 00:22:28,169
so the question is whether the packet

00:22:26,669 --> 00:22:30,600
project could replace president

00:22:28,169 --> 00:22:32,850
functionality with an ET an abnormality

00:22:30,600 --> 00:22:36,450
monitoring where new bugs are being

00:22:32,850 --> 00:22:41,460
created with some additional things so

00:22:36,450 --> 00:22:43,919
the answer is no actually the maintainer

00:22:41,460 --> 00:22:45,779
is from afternoons monitoring is working

00:22:43,919 --> 00:22:49,669
on exact features you just described

00:22:45,779 --> 00:22:51,980
that instead of creating bugs I lost the

00:22:49,669 --> 00:22:54,539
one of the services from a stimulus

00:22:51,980 --> 00:22:57,690
monitoring would create pull requests in

00:22:54,539 --> 00:23:00,419
this gate but sadly the maintainer got

00:22:57,690 --> 00:23:02,309
sidetracked or with the rawhide gating

00:23:00,419 --> 00:23:04,860
initiative so he was working on that and

00:23:02,309 --> 00:23:15,149
he didn't have time to work on the pull

00:23:04,860 --> 00:23:18,809
request so okay question from eager if

00:23:15,149 --> 00:23:21,450
if if if you do use packet yeah we

00:23:18,809 --> 00:23:24,149
actually collaborate together and the

00:23:21,450 --> 00:23:25,770
new code is developing actually uses

00:23:24,149 --> 00:23:28,710
some parts of packet like from packet

00:23:25,770 --> 00:23:35,840
API I'm not sure if like which parts

00:23:28,710 --> 00:23:35,840
exactly but like some parts are creating

00:23:37,850 --> 00:23:44,080
we're hungry trust packages and I want

00:24:04,570 --> 00:24:09,799
so comment from eager is that he's

00:24:06,919 --> 00:24:12,470
maintaining 900 trust packages and it's

00:24:09,799 --> 00:24:14,899
infeasible to to every upstreaming

00:24:12,470 --> 00:24:16,879
report to have packet EML and do all

00:24:14,899 --> 00:24:19,879
this so he's using optimal is monitoring

00:24:16,879 --> 00:24:22,639
conferred message to get notified yeah

00:24:19,879 --> 00:24:24,649
it's very I'm pretty sure there are more

00:24:22,639 --> 00:24:28,039
people like you with the similar use

00:24:24,649 --> 00:24:30,679
case and like in current case with

00:24:28,039 --> 00:24:33,620
packet project like it's not one of our

00:24:30,679 --> 00:24:36,500
I mean we don't have capacity to like

00:24:33,620 --> 00:24:38,570
support 200 percent I create you like

00:24:36,500 --> 00:24:40,909
perfect solution like right now we are

00:24:38,570 --> 00:24:43,070
trying to be more generic and like for

00:24:40,909 --> 00:24:45,159
everyone and hopefully at some point we

00:24:43,070 --> 00:24:47,899
will be able to start implementing

00:24:45,159 --> 00:24:51,700
workflows for people with special needs

00:24:47,899 --> 00:24:51,700
so that's my answer

00:24:58,120 --> 00:25:03,139
so the question is how many projects

00:25:00,950 --> 00:25:06,830
already has big fans just upstream which

00:25:03,139 --> 00:25:08,450
piggy is using all of them as I said we

00:25:06,830 --> 00:25:10,250
have tens of projects who are using

00:25:08,450 --> 00:25:12,379
packet right now and all of them have

00:25:10,250 --> 00:25:14,090
spectra and the upstream report but like

00:25:12,379 --> 00:25:16,220
on the other hand all of the people are

00:25:14,090 --> 00:25:18,169
I would say reddit employees Federal

00:25:16,220 --> 00:25:24,830
contributors and all these things you

00:25:18,169 --> 00:25:27,159
can first alright first question yeah

00:25:24,830 --> 00:25:30,019
and the other question we are getting

00:25:27,159 --> 00:25:32,450
asked a lot and it was asked right now

00:25:30,019 --> 00:25:34,549
is that what if the upstream project

00:25:32,450 --> 00:25:37,220
doesn't care about federal or packet or

00:25:34,549 --> 00:25:40,090
whatever yeah the answer is just create

00:25:37,220 --> 00:25:42,860
a mirror on github and like mirror

00:25:40,090 --> 00:25:44,629
mirrored exactly the upstream project

00:25:42,860 --> 00:25:46,580
and put more commits within federal

00:25:44,629 --> 00:25:50,120
packaging and then you can start using

00:25:46,580 --> 00:25:52,070
packet right away so but I agree like

00:25:50,120 --> 00:25:54,440
it's paying to maintain such a thing

00:25:52,070 --> 00:25:56,149
because you constantly need to pull new

00:25:54,440 --> 00:25:57,590
changes from the upstream repo and

00:25:56,149 --> 00:26:01,100
hopefully we'll be able

00:25:57,590 --> 00:26:02,630
to implement automation into packets so

00:26:01,100 --> 00:26:03,800
for example when there is a new upstream

00:26:02,630 --> 00:26:06,140
Willie spec it would create pull

00:26:03,800 --> 00:26:08,330
requests in your mirror so that you

00:26:06,140 --> 00:26:11,540
don't have to do it manually but it's

00:26:08,330 --> 00:26:14,320
just just a thought right now we are

00:26:11,540 --> 00:26:14,320
getting out of time

00:26:21,830 --> 00:26:48,289
so the question is about mirroring I

00:26:24,019 --> 00:26:50,269
believe in yourself specific so the

00:26:48,289 --> 00:26:52,279
question is whether it's easier to have

00:26:50,269 --> 00:26:55,249
CI for upstream projects easier or

00:26:52,279 --> 00:26:57,649
packaging easier I would say both but

00:26:55,249 --> 00:27:00,289
the thing is that if when our goal is

00:26:57,649 --> 00:27:03,440
both we can't do like one perfectly we

00:27:00,289 --> 00:27:05,210
can do like two may be good so yeah it

00:27:03,440 --> 00:27:07,039
would make sense to focus on one but

00:27:05,210 --> 00:27:09,649
right now the goal is like both and

00:27:07,039 --> 00:27:13,519
maybe like the higher priority has like

00:27:09,649 --> 00:27:16,220
is making CI for upstream projects

00:27:13,519 --> 00:27:18,679
easier and that's actually the theme of

00:27:16,220 --> 00:27:20,690
the next presentation and yeah we are

00:27:18,679 --> 00:27:23,169
sorry we're out of time

00:27:20,690 --> 00:27:23,169
yeah

00:27:44,320 --> 00:27:49,490
yeah thank you so we have a workshop

00:27:47,450 --> 00:27:51,950
tomorrow so please come by and you'll

00:27:49,490 --> 00:27:53,900
see all of the things in action you just

00:27:51,950 --> 00:27:56,030
heard about and thank you for coming

00:27:53,900 --> 00:27:58,310
these are the links to the project two

00:27:56,030 --> 00:28:00,350
slides and to our website and to our

00:27:58,310 --> 00:28:02,120
mailing list so feel free to get in

00:28:00,350 --> 00:28:05,110
touch with us we are here til Sunday

00:28:02,120 --> 00:28:05,110
thank you for coming

00:28:06,360 --> 00:28:10,200

YouTube URL: https://www.youtube.com/watch?v=8RfVnXpBm40


