Title: Fedora CI Objective: present and future - Dominik Perpeet, Aleksandra Fedorova - Flock 2019
Publication date: 2019-09-02
Playlist: Flock 2019
Description: 
	The Fedora CI Objective is an important piece of transforming the way all the bits of Fedora are developed and put together to work how we expect Fedora to work. We will look at where we are today in Fedora and where we want to go. From that vision we will explain the roadmap and what you can expect to change in Fedora by next Flock! Spoiler alert: It will be better.

Core areas include Rawhide stabilization, CI, Gating, distro-wide testing, automated packaging. Challenges, questions and suggestions are welcome throughout the talk!

--
Recordings of talks at Flock are a community effort.  Unfortunately not everything works perfectly every time. If you're interested in helping us improve, let us know.
Captions: 
	00:00:01,569 --> 00:00:05,140
so welcome everyone to the fedora see

00:00:04,240 --> 00:00:08,620
objective talk

00:00:05,140 --> 00:00:10,870
I think the rawhide package gating will

00:00:08,620 --> 00:00:16,439
had the higher impact most immediate one

00:00:10,870 --> 00:00:18,820
that was well attended this is a yeah

00:00:16,439 --> 00:00:22,000
looking back at the fedora see objective

00:00:18,820 --> 00:00:25,570
we had back in 2017 kind of believe it's

00:00:22,000 --> 00:00:28,390
that long ago already then a small

00:00:25,570 --> 00:00:30,579
detour into what do you actually mean by

00:00:28,390 --> 00:00:32,230
continuous integration because that sets

00:00:30,579 --> 00:00:37,980
the stage for where we won't want to go

00:00:32,230 --> 00:00:43,240
and looking at the current CI objective

00:00:37,980 --> 00:00:45,580
so in 2017 we set out to deliver the

00:00:43,240 --> 00:00:47,290
atomic host in Fedora via continuous

00:00:45,580 --> 00:00:49,150
integration and continuous delivery that

00:00:47,290 --> 00:00:52,120
was the goal I took this directly from

00:00:49,150 --> 00:00:53,950
the objective page we wanted to provide

00:00:52,120 --> 00:00:57,100
a framework for automating tests and

00:00:53,950 --> 00:00:59,290
providing results and the primary goal

00:00:57,100 --> 00:01:02,590
was to know that component builds are

00:00:59,290 --> 00:01:06,460
tested working and ready for compose so

00:01:02,590 --> 00:01:08,770
this was yeah a lot of words the

00:01:06,460 --> 00:01:13,300
objective page still says it should be

00:01:08,770 --> 00:01:15,310
done by flock in September 2017 so yeah

00:01:13,300 --> 00:01:18,940
the the update there hasn't really

00:01:15,310 --> 00:01:20,680
happened and we can see that a few

00:01:18,940 --> 00:01:22,870
things here we're done others like

00:01:20,680 --> 00:01:26,590
atomic hosts are not quite that relevant

00:01:22,870 --> 00:01:28,690
anymore today but some things that did

00:01:26,590 --> 00:01:31,360
come out of this were a standard test

00:01:28,690 --> 00:01:33,640
interface that we defined that provides

00:01:31,360 --> 00:01:35,130
a standard way of discovery and staging

00:01:33,640 --> 00:01:37,540
and invocation of integration tests

00:01:35,130 --> 00:01:40,990
which provides a baseline for other

00:01:37,540 --> 00:01:44,890
tests that we can run we have a pipeline

00:01:40,990 --> 00:01:46,390
to actually run tests and we actually do

00:01:44,890 --> 00:01:50,409
provide feedback to users

00:01:46,390 --> 00:01:52,570
so these things actually came out of the

00:01:50,409 --> 00:01:56,140
Lisi objective and all the work of the

00:01:52,570 --> 00:01:58,060
teams involved so the most visible part

00:01:56,140 --> 00:02:00,580
for most people are probably a tests in

00:01:58,060 --> 00:02:02,070
diskit so we have packages with tests in

00:02:00,580 --> 00:02:04,750
this kit you don't have to read this

00:02:02,070 --> 00:02:08,080
it's not meant to be read like anger

00:02:04,750 --> 00:02:11,319
would say but basically we still to this

00:02:08,080 --> 00:02:13,389
day regularly look which packages have

00:02:11,319 --> 00:02:15,569
tests and diskette so of the roughly

00:02:13,389 --> 00:02:20,849
1500 components

00:02:15,569 --> 00:02:25,080
I think we have about 7% that do have

00:02:20,849 --> 00:02:27,930
tests in place so while not not a lot of

00:02:25,080 --> 00:02:31,739
tests that still covers a significant

00:02:27,930 --> 00:02:34,440
portion of the packages and a lot of

00:02:31,739 --> 00:02:36,959
these tests actually came from the

00:02:34,440 --> 00:02:40,380
upstream first initiative or team tests

00:02:36,959 --> 00:02:43,319
that were formerly internal Terrell to

00:02:40,380 --> 00:02:46,379
fedora to the upstream and some of them

00:02:43,319 --> 00:02:47,940
also come from integrating upstream

00:02:46,379 --> 00:02:50,489
tests into Fedora

00:02:47,940 --> 00:02:53,400
so already here we can see a bit of

00:02:50,489 --> 00:02:56,849
connection happening and while it might

00:02:53,400 --> 00:02:58,049
seem like a small thing I think one of

00:02:56,849 --> 00:03:00,269
the biggest thing what are the biggest

00:02:58,049 --> 00:03:02,430
advantages of this is I can go to a

00:03:00,269 --> 00:03:04,200
package and run their tests and I know

00:03:02,430 --> 00:03:06,930
how to do that I don't have to contact a

00:03:04,200 --> 00:03:09,810
team or figure out which environment to

00:03:06,930 --> 00:03:12,660
set up or where to find the code so the

00:03:09,810 --> 00:03:15,599
discoverability of this and just the the

00:03:12,660 --> 00:03:17,400
fact that there is and should be a

00:03:15,599 --> 00:03:19,470
common way of doing this like this

00:03:17,400 --> 00:03:25,829
mindset change I think is one of the

00:03:19,470 --> 00:03:28,170
biggest outcomes so the testing of that

00:03:25,829 --> 00:03:30,120
even while the the gating for various

00:03:28,170 --> 00:03:32,310
reasons which which I'll which I can

00:03:30,120 --> 00:03:35,280
mention briefly had its ups and downs

00:03:32,310 --> 00:03:37,380
the testing still is a thing so these CI

00:03:35,280 --> 00:03:39,150
pipelines they run to this day I took

00:03:37,380 --> 00:03:41,850
the screenshot this morning where you

00:03:39,150 --> 00:03:44,850
can see recent builds I'm saying where

00:03:41,850 --> 00:03:46,170
it says for Kouji build number for a

00:03:44,850 --> 00:03:48,630
different different code G builds test

00:03:46,170 --> 00:03:51,329
for a skipped or tests for actually run

00:03:48,630 --> 00:03:53,489
then it's green or we have test filter

00:03:51,329 --> 00:03:59,489
of test failures well in this case build

00:03:53,489 --> 00:04:01,500
uh failed a Fedora 34:29 a ride so these

00:03:59,489 --> 00:04:05,389
things are still run the the CI system

00:04:01,500 --> 00:04:05,389
is still churning away in the background

00:04:05,630 --> 00:04:12,000
so for those are not familiar with this

00:04:08,549 --> 00:04:14,040
the the tests are run on the Unruh hide

00:04:12,000 --> 00:04:16,470
and on the branch release is currently

00:04:14,040 --> 00:04:16,829
since atomic host isn't really thing

00:04:16,470 --> 00:04:19,530
anymore

00:04:16,829 --> 00:04:25,560
we switch to running tests on these

00:04:19,530 --> 00:04:28,170
branches so for the c objective i'm just

00:04:25,560 --> 00:04:34,460
gonna call it 1.0 so like

00:04:28,170 --> 00:04:36,420
numbers we can say it's done sort of

00:04:34,460 --> 00:04:39,180
because let's look at what really

00:04:36,420 --> 00:04:41,100
happened right we wanted to deliver the

00:04:39,180 --> 00:04:43,560
atomic host okay let's just say that's

00:04:41,100 --> 00:04:46,470
kind of moot at this point we had the

00:04:43,560 --> 00:04:49,380
continuous delivery aspect that part we

00:04:46,470 --> 00:04:52,470
did not do so we focus on testing one

00:04:49,380 --> 00:04:54,330
the standard way of looking at tests so

00:04:52,470 --> 00:04:56,130
we have the standard test interface and

00:04:54,330 --> 00:04:57,480
we have an implementation of that the

00:04:56,130 --> 00:05:00,750
standard tests rolls which is the

00:04:57,480 --> 00:05:02,910
packaging fedora you know how to there's

00:05:00,750 --> 00:05:05,280
the common way of staging tests of

00:05:02,910 --> 00:05:07,910
running them or them locally you can

00:05:05,280 --> 00:05:11,130
have them run by the CI pipeline and

00:05:07,910 --> 00:05:14,700
that is in place and working we also

00:05:11,130 --> 00:05:18,330
have the mindset change of that of the

00:05:14,700 --> 00:05:21,270
whole CI conversion happening

00:05:18,330 --> 00:05:24,000
that's you see more and more projects do

00:05:21,270 --> 00:05:25,920
CI and testing upstream you see more

00:05:24,000 --> 00:05:28,530
projects and more and more components

00:05:25,920 --> 00:05:30,960
caring about how do I test my things how

00:05:28,530 --> 00:05:33,030
do I combine things it's not just unit

00:05:30,960 --> 00:05:35,700
tests after a build it's actual

00:05:33,030 --> 00:05:37,020
integration tests like how how do I use

00:05:35,700 --> 00:05:39,570
this how do I bring these pieces

00:05:37,020 --> 00:05:43,980
together not just pieces on their own

00:05:39,570 --> 00:05:48,720
and also we did have some workflows that

00:05:43,980 --> 00:05:50,970
hurt like we had the package gating that

00:05:48,720 --> 00:05:53,460
was enabled and disabled and then kind

00:05:50,970 --> 00:05:55,680
of enabled and then kind of disabled and

00:05:53,460 --> 00:05:58,800
kind of had sit ups and downs until now

00:05:55,680 --> 00:06:01,710
we have proper enablement again but I'll

00:05:58,800 --> 00:06:04,860
get into it into that with a currency

00:06:01,710 --> 00:06:07,680
objective so the retro for the first

00:06:04,860 --> 00:06:09,480
objective really is that we said okay we

00:06:07,680 --> 00:06:11,220
need more design on this when you think

00:06:09,480 --> 00:06:13,560
when you just step back and see what do

00:06:11,220 --> 00:06:14,190
we actually want to do so that we can

00:06:13,560 --> 00:06:17,060
make it happen

00:06:14,190 --> 00:06:21,270
so we have these building blocks but

00:06:17,060 --> 00:06:23,670
let's see what we can do with them so

00:06:21,270 --> 00:06:25,380
for that you went back to the definition

00:06:23,670 --> 00:06:27,900
and thought what is continuous

00:06:25,380 --> 00:06:30,300
integration what is CI and there is an

00:06:27,900 --> 00:06:33,360
actual manifesto that is a available on

00:06:30,300 --> 00:06:38,490
the on the docs site and I'm quoting a

00:06:33,360 --> 00:06:41,430
bit from that here so primarily for all

00:06:38,490 --> 00:06:42,490
intents and purposes here continuous

00:06:41,430 --> 00:06:44,349
integration

00:06:42,490 --> 00:06:47,380
is a developer and package a process and

00:06:44,349 --> 00:06:49,000
workflow it's quite a mouthful right but

00:06:47,380 --> 00:06:53,080
it kind of sets the scope for what we

00:06:49,000 --> 00:06:55,690
want to achieve and what we do want we

00:06:53,080 --> 00:06:58,509
want to ensure that broken changes don't

00:06:55,690 --> 00:07:02,310
affect others data shouldn't affect

00:06:58,509 --> 00:07:06,039
developers significant a nurs or users

00:07:02,310 --> 00:07:08,530
before CI you would say there's a

00:07:06,039 --> 00:07:11,620
there's a QA process right so everyone

00:07:08,530 --> 00:07:13,210
just put things in to rawhide then we'll

00:07:11,620 --> 00:07:15,370
assemble them and we'll figure it out

00:07:13,210 --> 00:07:17,979
right let's just make sure users don't

00:07:15,370 --> 00:07:21,310
get affected by this but it turns out

00:07:17,979 --> 00:07:23,860
that developers maintainer is also users

00:07:21,310 --> 00:07:26,289
and they are also happy if they're not

00:07:23,860 --> 00:07:30,009
impacted by breakage right I mean I know

00:07:26,289 --> 00:07:31,690
I am happy if I can use my system and I

00:07:30,009 --> 00:07:35,710
know I also know that development is a

00:07:31,690 --> 00:07:38,199
lot easier if the system works so see I

00:07:35,710 --> 00:07:44,380
kind of makes sense and to and I think

00:07:38,199 --> 00:07:46,570
on this everyone agrees so what does it

00:07:44,380 --> 00:07:48,490
actually mean and that's where gets a

00:07:46,570 --> 00:07:51,190
bit more tricky right because that's

00:07:48,490 --> 00:07:55,449
when you start in to start getting into

00:07:51,190 --> 00:07:56,979
how does that affect me so for

00:07:55,449 --> 00:08:00,400
continuous integration what we want to

00:07:56,979 --> 00:08:04,000
do want to assemble things like in

00:08:00,400 --> 00:08:07,090
production we want to really drive it

00:08:04,000 --> 00:08:09,130
like a user so we call it integration so

00:08:07,090 --> 00:08:11,319
the whole difference of saying there's

00:08:09,130 --> 00:08:14,620
only unit tests not integration tests

00:08:11,319 --> 00:08:16,509
yeah they have their uses but before I

00:08:14,620 --> 00:08:19,210
start impacting other people I do want

00:08:16,509 --> 00:08:22,960
the duration tests because that's what

00:08:19,210 --> 00:08:25,180
we will use and then also want to do

00:08:22,960 --> 00:08:28,479
these tests for every single change

00:08:25,180 --> 00:08:30,219
whatever change means and then fedora

00:08:28,479 --> 00:08:33,610
those are things that go into rawhide

00:08:30,219 --> 00:08:38,079
this is continuous so together we have

00:08:33,610 --> 00:08:40,570
continuous integration that's all well

00:08:38,079 --> 00:08:42,760
and good but we don't want to spend all

00:08:40,570 --> 00:08:44,890
our time on CI and testing right we

00:08:42,760 --> 00:08:46,630
actually do want to develop features

00:08:44,890 --> 00:08:48,850
work on the packages and get the cool

00:08:46,630 --> 00:08:51,610
stuff out because in the end CI it

00:08:48,850 --> 00:08:54,670
should be a tool or a process right it's

00:08:51,610 --> 00:08:55,960
not I mean some people probably say okay

00:08:54,670 --> 00:08:57,370
CI is good

00:08:55,960 --> 00:08:58,840
means to an end I could spend all my

00:08:57,370 --> 00:09:00,970
time on it but I would venture to say

00:08:58,840 --> 00:09:03,460
not every packagers thinks that way and

00:09:00,970 --> 00:09:04,830
that's fair right so how do we make it

00:09:03,460 --> 00:09:08,490
sustainable

00:09:04,830 --> 00:09:11,590
that means tests have to be changeable

00:09:08,490 --> 00:09:13,570
by people making the software change so

00:09:11,590 --> 00:09:15,430
if I change a piece of software I should

00:09:13,570 --> 00:09:17,530
be able to change the tests because I

00:09:15,430 --> 00:09:19,090
know what I'm doing at that moment then

00:09:17,530 --> 00:09:22,360
I can change the test at the same time

00:09:19,090 --> 00:09:23,710
and also want to have rapid feedback to

00:09:22,360 --> 00:09:25,810
the person who makes the change that's

00:09:23,710 --> 00:09:27,820
often the question like how long should

00:09:25,810 --> 00:09:31,030
testing take how long should I wait

00:09:27,820 --> 00:09:33,190
order the guidelines and we can debate a

00:09:31,030 --> 00:09:35,740
lot about that but like Sandra had a

00:09:33,190 --> 00:09:37,330
good comment on that earlier and the

00:09:35,740 --> 00:09:38,950
rohad gating discussion saying this is

00:09:37,330 --> 00:09:41,830
this is part of the freedom we have

00:09:38,950 --> 00:09:43,570
right that's there's a good reason we

00:09:41,830 --> 00:09:45,100
don't have the defining policy and say

00:09:43,570 --> 00:09:47,200
your tests have to build and be done in

00:09:45,100 --> 00:09:49,390
three minutes because that's that would

00:09:47,200 --> 00:09:51,070
be the wrong incentive the incentive is

00:09:49,390 --> 00:09:54,370
still we don't want the breaking change

00:09:51,070 --> 00:09:56,770
we don't want the breakage so do what

00:09:54,370 --> 00:09:59,470
you have to do to not to prevent that if

00:09:56,770 --> 00:10:01,360
you have to if you're if you say you

00:09:59,470 --> 00:10:03,550
need to certain tests a certain set of

00:10:01,360 --> 00:10:05,370
tests to run to prevent breakage then

00:10:03,550 --> 00:10:09,420
run those tests of those take too long

00:10:05,370 --> 00:10:14,430
then either make them faster hardware

00:10:09,420 --> 00:10:20,680
software optimization there the usual or

00:10:14,430 --> 00:10:22,300
change your definition or wait longer so

00:10:20,680 --> 00:10:25,450
that's there's there's a sense of

00:10:22,300 --> 00:10:27,160
freedom there and I think this is a part

00:10:25,450 --> 00:10:30,100
where we need community also where we

00:10:27,160 --> 00:10:34,060
share experience and this is one of the

00:10:30,100 --> 00:10:36,790
places where we said okay as a as a

00:10:34,060 --> 00:10:39,160
central driver we want to make sure we

00:10:36,790 --> 00:10:41,800
provide best practices and tell you hey

00:10:39,160 --> 00:10:43,300
if you're unsure come into a discussion

00:10:41,800 --> 00:10:44,680
with us and we can do it can tell you

00:10:43,300 --> 00:10:47,350
how other teams have done it we can show

00:10:44,680 --> 00:10:49,480
you other components have done it and

00:10:47,350 --> 00:10:50,860
say these are some options for you so

00:10:49,480 --> 00:10:57,490
it's not you're not operating in a

00:10:50,860 --> 00:11:00,190
vacuum so let's let's look at the fedora

00:10:57,490 --> 00:11:03,340
see objective in 2019 which i think is

00:11:00,190 --> 00:11:04,960
the current year I'm not mistaken first

00:11:03,340 --> 00:11:06,580
of all why does this need to be an

00:11:04,960 --> 00:11:07,930
objective we can set all these cool

00:11:06,580 --> 00:11:09,610
goals without without having an

00:11:07,930 --> 00:11:12,970
objective right

00:11:09,610 --> 00:11:16,630
I try to phrase it as this is as things

00:11:12,970 --> 00:11:19,180
larger than one problem it's not just

00:11:16,630 --> 00:11:23,200
one individual thing need to solve it's

00:11:19,180 --> 00:11:26,140
really an over overarching story and for

00:11:23,200 --> 00:11:29,800
this to be effective we need to really

00:11:26,140 --> 00:11:32,080
synchronize on multiple goals I'll list

00:11:29,800 --> 00:11:34,870
a few that we have set out here but I

00:11:32,080 --> 00:11:36,520
think everyone just looking at just from

00:11:34,870 --> 00:11:39,360
looking at the previous objective we see

00:11:36,520 --> 00:11:41,710
that it's not really just one thing and

00:11:39,360 --> 00:11:45,190
it is also very important that aside

00:11:41,710 --> 00:11:47,890
from the technical goals we have to see

00:11:45,190 --> 00:11:50,110
the whole community aspect of this right

00:11:47,890 --> 00:11:52,600
we have an overall rate of change and

00:11:50,110 --> 00:11:54,670
overall impact we can do a lot a bunch

00:11:52,600 --> 00:11:58,660
of small changes to the workflow they

00:11:54,670 --> 00:12:00,940
all seem fine but if for for a

00:11:58,660 --> 00:12:02,380
maintainer that means there are 10 small

00:12:00,940 --> 00:12:04,510
changes that have to do for the next

00:12:02,380 --> 00:12:08,140
release to their workflow that's a lot

00:12:04,510 --> 00:12:10,060
that's asking a lot for of anyone so we

00:12:08,140 --> 00:12:14,620
want to make sure that by aligning these

00:12:10,060 --> 00:12:17,110
goals we minimize the pain which sounds

00:12:14,620 --> 00:12:24,610
very negative it's a phrase no positi we

00:12:17,110 --> 00:12:28,150
want to optimize the benefits so what is

00:12:24,610 --> 00:12:30,490
the the objective for 2019 so we're away

00:12:28,150 --> 00:12:32,890
from the atomic host stage we said let's

00:12:30,490 --> 00:12:37,720
do it all let's take a Tomic host do see

00:12:32,890 --> 00:12:40,360
I do CD establish the real the basis of

00:12:37,720 --> 00:12:45,820
this all the principles let's let's go

00:12:40,360 --> 00:12:47,529
for it right we step back and said look

00:12:45,820 --> 00:12:49,480
at this look at the feedback cycle right

00:12:47,529 --> 00:12:51,459
rapid feedback where does this go where

00:12:49,480 --> 00:12:53,709
does the C where C I the most useful and

00:12:51,459 --> 00:12:54,970
that is where we do the development and

00:12:53,709 --> 00:12:58,000
where things come together and that is

00:12:54,970 --> 00:13:00,430
rawhide in fedora so we want continuous

00:12:58,000 --> 00:13:04,360
integration for all hide that's a pretty

00:13:00,430 --> 00:13:05,920
good scope and as a good guideline we

00:13:04,360 --> 00:13:08,920
say changes shouldn't break other

00:13:05,920 --> 00:13:11,410
contributions that's there's some leeway

00:13:08,920 --> 00:13:16,450
in that but I think it's a good guiding

00:13:11,410 --> 00:13:20,110
principle so the key areas we've

00:13:16,450 --> 00:13:22,220
identified a rawhide gating driven by

00:13:20,110 --> 00:13:24,410
peer or Pangu

00:13:22,220 --> 00:13:26,710
talk on that earlier we have

00:13:24,410 --> 00:13:30,380
distribution wide tests for packages

00:13:26,710 --> 00:13:31,970
driven by by David and Tim we have

00:13:30,380 --> 00:13:35,870
documentation for the package of

00:13:31,970 --> 00:13:38,000
experience from Alexandra and we have

00:13:35,870 --> 00:13:42,290
the tie-in with the upstream via packet

00:13:38,000 --> 00:13:47,300
driven by Tomas this does anyone not

00:13:42,290 --> 00:13:48,770
know who these people are so just

00:13:47,300 --> 00:13:50,480
because I call them out so Pierre if you

00:13:48,770 --> 00:13:53,090
could please send out real quick that's

00:13:50,480 --> 00:13:55,520
Pierre you can ask about about rawhide

00:13:53,090 --> 00:14:00,770
gating then the distribution wide test

00:13:55,520 --> 00:14:01,460
for packages that's David and Tim Tim

00:14:00,770 --> 00:14:05,480
there you go

00:14:01,460 --> 00:14:09,770
thank you the documentation for package

00:14:05,480 --> 00:14:17,540
experience like Sandra and packet it's

00:14:09,770 --> 00:14:20,630
mush thank you and let's look at rawhide

00:14:17,540 --> 00:14:22,910
eating first so for this part this is

00:14:20,630 --> 00:14:25,820
kind of looking into the future what is

00:14:22,910 --> 00:14:28,400
the current what is the future and this

00:14:25,820 --> 00:14:31,430
is also the part where I actively

00:14:28,400 --> 00:14:33,200
encourage questions and raising your

00:14:31,430 --> 00:14:34,700
hand if you have questions about where

00:14:33,200 --> 00:14:37,340
this is going or what the current status

00:14:34,700 --> 00:14:40,160
is so I kept these slides very short but

00:14:37,340 --> 00:14:42,790
please yeah raise your hand if you have

00:14:40,160 --> 00:14:45,170
a question so what currently works and

00:14:42,790 --> 00:14:48,230
summarized very succinctly is that we

00:14:45,170 --> 00:14:49,580
have single package updates and the next

00:14:48,230 --> 00:14:51,830
part that we want to do

00:14:49,580 --> 00:14:55,610
very roughly spoken as to have multi

00:14:51,830 --> 00:14:57,860
package updates once that is done we

00:14:55,610 --> 00:15:00,470
should be in a place where we

00:14:57,860 --> 00:15:04,850
essentially gate all the changes going

00:15:00,470 --> 00:15:08,660
into rawhide and we should be getting to

00:15:04,850 --> 00:15:09,800
a more stable rawhide with that I mean

00:15:08,660 --> 00:15:11,360
there was a lot of discussion of that

00:15:09,800 --> 00:15:15,490
already in the the rawhide gating talk

00:15:11,360 --> 00:15:15,490
but if there any more questions on this

00:15:29,410 --> 00:16:12,670
you're getting microphone okay what I'm

00:16:10,480 --> 00:16:14,140
going to ask is coming from the teams

00:16:12,670 --> 00:16:16,450
who are working on different parts of

00:16:14,140 --> 00:16:19,630
the operating system and this is coming

00:16:16,450 --> 00:16:22,870
from the team behind DN I flipped the NF

00:16:19,630 --> 00:16:26,470
on all these things and they're requests

00:16:22,870 --> 00:16:28,090
whenever we talk together is that they

00:16:26,470 --> 00:16:30,070
are working on their software and their

00:16:28,090 --> 00:16:31,210
software is interconnected which means

00:16:30,070 --> 00:16:33,670
that there are a bunch of upstream

00:16:31,210 --> 00:16:35,440
projects which depend on each other so

00:16:33,670 --> 00:16:38,320
usually when they are rolling out a new

00:16:35,440 --> 00:16:40,270
feature the new feature is spent across

00:16:38,320 --> 00:16:42,610
different pool requests in different

00:16:40,270 --> 00:16:45,610
projects and usually they need to test

00:16:42,610 --> 00:16:47,650
their thing as one unit which means that

00:16:45,610 --> 00:16:50,050
in order to test the feature you need to

00:16:47,650 --> 00:16:53,140
build all the packages in specific order

00:16:50,050 --> 00:16:55,030
and then have a one repo and then

00:16:53,140 --> 00:16:58,900
install it and then you can finally test

00:16:55,030 --> 00:17:01,150
it so my question is could like the work

00:16:58,900 --> 00:17:03,640
being done on rawhide gating and multi

00:17:01,150 --> 00:17:05,950
package updates be the upstream CI

00:17:03,640 --> 00:17:09,090
system for this use case or it's like

00:17:05,950 --> 00:17:09,090
completely out of the question

00:17:09,900 --> 00:17:16,660
so if we are talking about upstream pool

00:17:13,270 --> 00:17:21,640
requests which were not merged in this

00:17:16,660 --> 00:17:24,520
kit yet then the current rawhide gating

00:17:21,640 --> 00:17:28,870
setup is not fit for this use case but

00:17:24,520 --> 00:17:32,530
we have fab in here who presented the

00:17:28,870 --> 00:17:36,790
Zulu pipeline here on the second row

00:17:32,530 --> 00:17:40,120
here who presented Zulu pipeline which

00:17:36,790 --> 00:17:40,970
is much better in the pull request part

00:17:40,120 --> 00:17:47,960
of the

00:17:40,970 --> 00:17:50,390
see I so Zul can provide groups Zul

00:17:47,960 --> 00:17:52,610
covers the use case of cross project

00:17:50,390 --> 00:17:55,280
dependencies when you have pull requests

00:17:52,610 --> 00:17:59,630
into multiple components and you want to

00:17:55,280 --> 00:18:04,100
run tests in them all as a group so or

00:17:59,630 --> 00:18:07,730
like as a dependent chain probably this

00:18:04,100 --> 00:18:11,360
is a better direction to look into

00:18:07,730 --> 00:18:14,870
unmerged group of changes the Zulu

00:18:11,360 --> 00:18:16,460
pipeline can help here so I think in the

00:18:14,870 --> 00:18:18,710
future we're going to split

00:18:16,460 --> 00:18:21,049
responsibilities a bit so the rawhide

00:18:18,710 --> 00:18:23,740
gating will focus more on post-merge

00:18:21,049 --> 00:18:27,549
setup and tests running in the gate

00:18:23,740 --> 00:18:30,169
before we compose while for pull across

00:18:27,549 --> 00:18:33,710
v4 now will drive a different story with

00:18:30,169 --> 00:18:34,000
Azul trying to cover this case ok thank

00:18:33,710 --> 00:18:38,450
you

00:18:34,000 --> 00:18:41,350
and also a good guideline for that is

00:18:38,450 --> 00:18:44,360
that ride essentially means the set of

00:18:41,350 --> 00:18:48,380
packages that we work with as rawhide so

00:18:44,360 --> 00:18:51,559
the floor quests are really more in the

00:18:48,380 --> 00:18:53,539
earlier workflow so that is why that

00:18:51,559 --> 00:18:56,299
somewhat out of scope of the rawhide

00:18:53,539 --> 00:18:59,500
gating but definitely in the scope of

00:18:56,299 --> 00:18:59,500
the CI objective

00:19:07,070 --> 00:19:11,750
so going beyond the raw high gating

00:19:10,130 --> 00:19:13,580
which i think is awesome that's done

00:19:11,750 --> 00:19:18,170
this year it's not not a planning stage

00:19:13,580 --> 00:19:21,410
but actually done so visibly going back

00:19:18,170 --> 00:19:24,140
I want to say one of the the lessons

00:19:21,410 --> 00:19:27,500
learned really from this compared to the

00:19:24,140 --> 00:19:30,470
C Objective version one was to take this

00:19:27,500 --> 00:19:33,080
more slowly and get more community

00:19:30,470 --> 00:19:35,630
feedback and really look at the the

00:19:33,080 --> 00:19:39,380
workflows that are impacted and I think

00:19:35,630 --> 00:19:41,990
the CPE team a good job of with Pierre

00:19:39,380 --> 00:19:44,750
did a good job of looking really at what

00:19:41,990 --> 00:19:46,580
we have in the community and building

00:19:44,750 --> 00:19:52,790
that out from from within Fedora so

00:19:46,580 --> 00:19:56,270
thank you now when we have gating in

00:19:52,790 --> 00:19:57,890
place that is well and good but what

00:19:56,270 --> 00:19:59,300
what provides the information like how

00:19:57,890 --> 00:20:02,510
do I decide what gets in and what

00:19:59,300 --> 00:20:04,070
doesn't now when though we did this the

00:20:02,510 --> 00:20:07,280
first time we said okay everyone should

00:20:04,070 --> 00:20:09,170
add tests to disc it which is good but

00:20:07,280 --> 00:20:12,440
not not every project isn't a place to

00:20:09,170 --> 00:20:14,600
do that so and there's the question of

00:20:12,440 --> 00:20:17,000
how much like how to explain how much

00:20:14,600 --> 00:20:19,700
value you a package will get out of

00:20:17,000 --> 00:20:22,160
adding tests and I need to have that

00:20:19,700 --> 00:20:25,180
conversation for every maintainer that

00:20:22,160 --> 00:20:29,030
is not and did not scale that well

00:20:25,180 --> 00:20:30,760
because see I gets a lot better when

00:20:29,030 --> 00:20:33,410
more people already have tests in place

00:20:30,760 --> 00:20:34,880
so we need kind of like a critical set

00:20:33,410 --> 00:20:36,820
of things in place to have a certain

00:20:34,880 --> 00:20:40,430
quality to be able to see the gains

00:20:36,820 --> 00:20:42,950
otherwise then I mean you can say you

00:20:40,430 --> 00:20:44,300
get what you incentivize right and what

00:20:42,950 --> 00:20:47,090
we had before with a small set of

00:20:44,300 --> 00:20:49,460
package with tests saying if you added

00:20:47,090 --> 00:20:51,530
tests and your your development was

00:20:49,460 --> 00:20:53,540
slower or it seemed slower because your

00:20:51,530 --> 00:20:55,910
things were gated people who did not

00:20:53,540 --> 00:20:57,590
have tests just get everything in that's

00:20:55,910 --> 00:21:01,180
not quite the incentive we want to have

00:20:57,590 --> 00:21:04,310
right so let's let's say let's invest

00:21:01,180 --> 00:21:06,770
with a small group in distribution why'd

00:21:04,310 --> 00:21:10,670
tests and let's write those for the

00:21:06,770 --> 00:21:13,190
benefit of everyone and for that we have

00:21:10,670 --> 00:21:17,270
RPM inspect different by Tim and David

00:21:13,190 --> 00:21:20,690
and also and yet we want to set that up

00:21:17,270 --> 00:21:23,210
as a reliable system-wide tests

00:21:20,690 --> 00:21:25,040
that's Fedora QA experience loss of

00:21:23,210 --> 00:21:27,290
experience from running RPM different

00:21:25,040 --> 00:21:29,030
Erna Lee and within Red Hat

00:21:27,290 --> 00:21:31,490
so this is not just something we just

00:21:29,030 --> 00:21:33,410
dreamt up right and this is a place if

00:21:31,490 --> 00:21:35,930
you've if you've went to the talks you

00:21:33,410 --> 00:21:37,370
can contribute to and that is accessible

00:21:35,930 --> 00:21:40,040
you can see what's actually happening

00:21:37,370 --> 00:21:42,260
right you can run it locally you can try

00:21:40,040 --> 00:21:44,930
it out you can try changes so this is

00:21:42,260 --> 00:21:48,770
yeah let's say the modern way of how we

00:21:44,930 --> 00:21:52,070
imagine testing should go and we will

00:21:48,770 --> 00:21:56,080
start running this for everyone for all

00:21:52,070 --> 00:21:59,030
the updates and once that has

00:21:56,080 --> 00:22:01,160
established itself once we've seen that

00:21:59,030 --> 00:22:04,820
it works and refined it to a place where

00:22:01,160 --> 00:22:06,950
is an acceptable dating tests we can

00:22:04,820 --> 00:22:09,110
will first see people saying hey I want

00:22:06,950 --> 00:22:10,970
to get my package on this right this was

00:22:09,110 --> 00:22:12,620
good information and then there will

00:22:10,970 --> 00:22:16,190
probably be a tipping point or will say

00:22:12,620 --> 00:22:18,170
okay as a community we have so many

00:22:16,190 --> 00:22:20,860
packages gating on this some people

00:22:18,170 --> 00:22:23,720
chose not to but really everyone should

00:22:20,860 --> 00:22:26,360
so let's let's adopt a policy of gating

00:22:23,720 --> 00:22:28,760
everyone on that I think that's what

00:22:26,360 --> 00:22:33,410
we'll get to hopefully for rpm inspect

00:22:28,760 --> 00:22:37,010
certainly for some tools and yeah this

00:22:33,410 --> 00:22:39,260
this policy aspect is one of the the C

00:22:37,010 --> 00:22:40,790
objective Gold's that were setting for

00:22:39,260 --> 00:22:43,790
the next couple of months talking to to

00:22:40,790 --> 00:22:46,100
fess Co to see what would it take what

00:22:43,790 --> 00:22:48,800
are the requirements to make one of

00:22:46,100 --> 00:22:51,320
these test skating for everyone and then

00:22:48,800 --> 00:22:54,290
in addition to rpm inspect we also want

00:22:51,320 --> 00:22:56,810
to look at other distro white tests we

00:22:54,290 --> 00:23:00,320
want to look at install ability can let

00:22:56,810 --> 00:23:02,690
can my package be installed similar

00:23:00,320 --> 00:23:03,860
question there I think the policy

00:23:02,690 --> 00:23:07,400
questions there's probably going to be

00:23:03,860 --> 00:23:08,840
pretty easy I always like to say can you

00:23:07,400 --> 00:23:10,670
can you tell me why your package

00:23:08,840 --> 00:23:11,600
shouldn't be able like why users

00:23:10,670 --> 00:23:12,200
shouldn't be able to install your

00:23:11,600 --> 00:23:13,790
package

00:23:12,200 --> 00:23:17,510
give me a reason to get it in any way

00:23:13,790 --> 00:23:19,310
it's the hard argument to make reverse

00:23:17,510 --> 00:23:21,860
dependency testing that incentive I

00:23:19,310 --> 00:23:24,800
talked about let's turn that around like

00:23:21,860 --> 00:23:26,750
if people break your package add tests

00:23:24,800 --> 00:23:31,670
to you a story like what is why is your

00:23:26,750 --> 00:23:34,060
package in rawhide say you depend on a

00:23:31,670 --> 00:23:36,550
library on its API so

00:23:34,060 --> 00:23:38,890
tests where you were your package used

00:23:36,550 --> 00:23:40,480
that API and if that if that IP I

00:23:38,890 --> 00:23:42,640
suddenly changes and they didn't talk to

00:23:40,480 --> 00:23:44,440
you that test should fail and I should

00:23:42,640 --> 00:23:46,690
fail when that library wants to get

00:23:44,440 --> 00:23:49,330
updated not later on when you want to

00:23:46,690 --> 00:23:51,280
update so that's the right incentive to

00:23:49,330 --> 00:23:54,240
say let's prevent the whole breaking

00:23:51,280 --> 00:23:57,520
change where it occurs not too late

00:23:54,240 --> 00:23:59,380
otherwise we just be punishing people

00:23:57,520 --> 00:24:01,650
who use a lot of other packages which is

00:23:59,380 --> 00:24:04,390
again not the right incentive and

00:24:01,650 --> 00:24:06,940
rebuild testing like let's do Adam a

00:24:04,390 --> 00:24:08,470
Tory builds as we like it was raised a

00:24:06,940 --> 00:24:11,140
couple times here and I think everyone

00:24:08,470 --> 00:24:14,230
is aware rebuilding is not not always a

00:24:11,140 --> 00:24:16,060
trivial thing right but let's let's see

00:24:14,230 --> 00:24:19,450
how we can test it to see how we can

00:24:16,060 --> 00:24:21,310
rebuild the pending packages to make

00:24:19,450 --> 00:24:23,920
sure that that doesn't break these are

00:24:21,310 --> 00:24:26,520
all things that are solvable on the

00:24:23,920 --> 00:24:29,530
distribution wide scale makes sense and

00:24:26,520 --> 00:24:32,500
we want to work with fedora QA and

00:24:29,530 --> 00:24:34,780
whoever wants to contribute to make

00:24:32,500 --> 00:24:37,450
making these available distribution wide

00:24:34,780 --> 00:24:39,160
and then allowing the community or

00:24:37,450 --> 00:24:45,630
individual Packers to decide what they

00:24:39,160 --> 00:24:47,530
want to get on any question on this part

00:24:45,630 --> 00:24:49,270
maybe someone who doesn't believe in

00:24:47,530 --> 00:24:52,690
reverse dependency testing that's always

00:24:49,270 --> 00:24:56,440
argued to have maybe I would add a

00:24:52,690 --> 00:24:59,560
different aspect to this so when we

00:24:56,440 --> 00:25:02,140
talked about those tests and rawhide

00:24:59,560 --> 00:25:05,440
gating I believe people might be scared

00:25:02,140 --> 00:25:08,590
a bit by the fact that they're going to

00:25:05,440 --> 00:25:10,630
be blocked from getting into rawhide by

00:25:08,590 --> 00:25:13,060
some tests which we are not quite

00:25:10,630 --> 00:25:16,330
familiar with yet or like a need to be

00:25:13,060 --> 00:25:19,540
getting familiar with so I really want

00:25:16,330 --> 00:25:22,000
to send this message that as a

00:25:19,540 --> 00:25:24,670
distribution we are just entering the

00:25:22,000 --> 00:25:28,210
world of continuous integration which

00:25:24,670 --> 00:25:31,870
means it's not easy and we're like we're

00:25:28,210 --> 00:25:35,350
huge project it's not going to be like

00:25:31,870 --> 00:25:40,390
one step for us we're going to move in

00:25:35,350 --> 00:25:42,730
slowly and the while we will be talking

00:25:40,390 --> 00:25:47,040
about a phase called setting up the

00:25:42,730 --> 00:25:50,800
policies and enabling disturb watching

00:25:47,040 --> 00:25:54,250
gating tests as a blocking test in fact

00:25:50,800 --> 00:26:00,820
all everything we built regarding gating

00:25:54,250 --> 00:26:02,980
here is more of a informational rather

00:26:00,820 --> 00:26:05,950
than really blocking so we don't take

00:26:02,980 --> 00:26:07,990
control from a maintainer in the end we

00:26:05,950 --> 00:26:10,720
built a system which will test your

00:26:07,990 --> 00:26:12,640
change which will send you results which

00:26:10,720 --> 00:26:15,820
will block you from getting into your

00:26:12,640 --> 00:26:18,730
hide immediately but it will keep it

00:26:15,820 --> 00:26:20,740
will still be you who will have full

00:26:18,730 --> 00:26:24,370
control of what's going on with this

00:26:20,740 --> 00:26:27,730
change forever on you are will be you

00:26:24,370 --> 00:26:31,150
will be the deciding person and I see

00:26:27,730 --> 00:26:34,930
the first phase of gating as giving you

00:26:31,150 --> 00:26:35,260
the information to make decision in the

00:26:34,930 --> 00:26:38,680
end

00:26:35,260 --> 00:26:40,510
to pass or not to pass so for example

00:26:38,680 --> 00:26:43,210
reverse dependency testing is going to

00:26:40,510 --> 00:26:45,850
be complicated so you send an update and

00:26:43,210 --> 00:26:47,800
then your update trigger tests of a

00:26:45,850 --> 00:26:51,100
certain package which depends on you and

00:26:47,800 --> 00:26:53,080
that test failed so you're getting a

00:26:51,100 --> 00:26:58,390
failure of reverse dependency test

00:26:53,080 --> 00:27:01,030
because something else was broken and at

00:26:58,390 --> 00:27:04,390
this moment you may find this error

00:27:01,030 --> 00:27:06,100
shouldn't be on your chain relevant to

00:27:04,390 --> 00:27:07,570
your change or you don't know how to do

00:27:06,100 --> 00:27:10,030
how to deal with it

00:27:07,570 --> 00:27:11,920
at least you will have an information

00:27:10,030 --> 00:27:13,480
and you will have a talking point you

00:27:11,920 --> 00:27:17,040
will have a place to collaborate with

00:27:13,480 --> 00:27:19,990
that the dependency to discuss things so

00:27:17,040 --> 00:27:22,420
the main goal of the first stage of

00:27:19,990 --> 00:27:25,900
gating is not to actually block you from

00:27:22,420 --> 00:27:28,870
doing such things it's about showing you

00:27:25,900 --> 00:27:32,080
the impact of your changes and making

00:27:28,870 --> 00:27:35,230
you do a decision based on knowledge

00:27:32,080 --> 00:27:38,470
about the impact so you should know what

00:27:35,230 --> 00:27:40,870
are you going to made in rawhide after

00:27:38,470 --> 00:27:42,850
you change his landed and then you

00:27:40,870 --> 00:27:45,910
should make a decision if it's what you

00:27:42,850 --> 00:27:47,960
want to do if it you need to make more

00:27:45,910 --> 00:27:50,990
communication or if you need to

00:27:47,960 --> 00:27:54,520
to deal with consequences before you

00:27:50,990 --> 00:28:00,830
land at least information will be there

00:27:54,520 --> 00:28:03,310
thank you so the next aspect is

00:28:00,830 --> 00:28:07,400
documentation do you want to continue

00:28:03,310 --> 00:28:10,760
yeah so this is the part where we need

00:28:07,400 --> 00:28:15,020
to improve our documentation and all the

00:28:10,760 --> 00:28:17,090
things covering this workflow so I feel

00:28:15,020 --> 00:28:19,310
from from reading de velas and from

00:28:17,090 --> 00:28:21,770
participating in conversations where

00:28:19,310 --> 00:28:26,480
there is a feeling that people like

00:28:21,770 --> 00:28:28,640
really scared a bit by the fact that we

00:28:26,480 --> 00:28:32,030
are introducing some new terms in the

00:28:28,640 --> 00:28:34,760
work flow so we are more scared by the

00:28:32,030 --> 00:28:37,970
fact that their new term spent by the

00:28:34,760 --> 00:28:40,580
actual content what we storms bringing

00:28:37,970 --> 00:28:44,930
to the workflow so I believe that once

00:28:40,580 --> 00:28:45,320
we made it more once we explained it

00:28:44,930 --> 00:28:47,660
better

00:28:45,320 --> 00:28:49,400
people stopped being scared of these

00:28:47,660 --> 00:28:52,040
changes because in fact really

00:28:49,400 --> 00:28:53,960
underlying change is not that big you

00:28:52,040 --> 00:28:56,330
are already doing a lot of this stuff

00:28:53,960 --> 00:28:59,240
you're just not calling gating by some

00:28:56,330 --> 00:29:01,340
reason and we we can really improve in

00:28:59,240 --> 00:29:06,470
that so you are getting more familiar

00:29:01,340 --> 00:29:09,890
with the terminology while not being

00:29:06,470 --> 00:29:12,380
scared of probable changes which look

00:29:09,890 --> 00:29:14,660
like black box to you so this is a huge

00:29:12,380 --> 00:29:17,120
effort of course and like we won't need

00:29:14,660 --> 00:29:20,300
everyone to participate in that this is

00:29:17,120 --> 00:29:22,730
one part that as soon as we get

00:29:20,300 --> 00:29:24,920
disturbed white gating in place we hope

00:29:22,730 --> 00:29:27,080
that people will get more information in

00:29:24,920 --> 00:29:29,870
how this works and will contribute to

00:29:27,080 --> 00:29:32,030
documentation we want to build in the

00:29:29,870 --> 00:29:34,520
end the community around CI the same way

00:29:32,030 --> 00:29:39,170
as we build community around every other

00:29:34,520 --> 00:29:41,210
project so this is about it like we have

00:29:39,170 --> 00:29:45,590
a git repo with documentation where

00:29:41,210 --> 00:29:48,380
everyone is can contribute to so you can

00:29:45,590 --> 00:29:50,270
join right now or you can follow and we

00:29:48,380 --> 00:29:52,730
will be posting updates and we will be

00:29:50,270 --> 00:29:55,700
doing some stuff in that documentation

00:29:52,730 --> 00:29:57,440
repo later on you know and invalid

00:29:55,700 --> 00:29:59,730
contributions are also I don't

00:29:57,440 --> 00:30:03,120
understand the documentation you have

00:29:59,730 --> 00:30:05,279
like I want to do this and tell me how I

00:30:03,120 --> 00:30:06,539
can do that that's also a valid

00:30:05,279 --> 00:30:08,760
contribution you don't need to write

00:30:06,539 --> 00:30:10,799
guides you can ask the questions and

00:30:08,760 --> 00:30:13,649
tell us hey this is confusing this is

00:30:10,799 --> 00:30:15,360
missing my workflow is different you

00:30:13,649 --> 00:30:18,330
talk about these packages but mine is

00:30:15,360 --> 00:30:20,340
completely different for this reason and

00:30:18,330 --> 00:30:21,419
then we can tell you hey it's actually

00:30:20,340 --> 00:30:22,649
not that different if you do these

00:30:21,419 --> 00:30:24,750
things or Wow

00:30:22,649 --> 00:30:27,059
we didn't think of that one which is

00:30:24,750 --> 00:30:30,179
also we could always can also happen so

00:30:27,059 --> 00:30:31,950
yeah we we already have some like

00:30:30,179 --> 00:30:34,019
there's a lot of documentation I think

00:30:31,950 --> 00:30:35,880
in this case it's like Alexandra said we

00:30:34,019 --> 00:30:38,210
offer a question of how can you explain

00:30:35,880 --> 00:30:41,039
things maybe more a bit differently and

00:30:38,210 --> 00:30:48,570
making the documentation we have a bit

00:30:41,039 --> 00:30:51,049
more accessible so the packets it's

00:30:48,570 --> 00:30:55,010
there's just the Colossians had his talk

00:30:51,049 --> 00:30:58,260
just so you put a quick picture in here

00:30:55,010 --> 00:31:03,269
about connecting the upstream to Fedora

00:30:58,260 --> 00:31:06,450
this is kind of a Red Hat view on where

00:31:03,269 --> 00:31:08,700
Fedora rawhide is and you can see a lot

00:31:06,450 --> 00:31:10,620
of things really happen right a lot of

00:31:08,700 --> 00:31:14,159
things go into rawhide you have

00:31:10,620 --> 00:31:16,289
different groups of people you have the

00:31:14,159 --> 00:31:19,919
kernel you have application stacks open

00:31:16,289 --> 00:31:23,820
source projects partners of Red Hat and

00:31:19,919 --> 00:31:26,130
other companies and contributing you

00:31:23,820 --> 00:31:28,139
have operating system tools there's lots

00:31:26,130 --> 00:31:32,940
of things going into rawhide and then

00:31:28,139 --> 00:31:34,529
you have fedora coming out you have Red

00:31:32,940 --> 00:31:36,450
Hat Enterprise Linux coming out then you

00:31:34,529 --> 00:31:38,850
eventually have CentOS it's quite the

00:31:36,450 --> 00:31:42,570
complex environment but what we want to

00:31:38,850 --> 00:31:44,730
do is really make the connection to

00:31:42,570 --> 00:31:48,029
fedora easier saying that's like like a

00:31:44,730 --> 00:31:50,460
default thing and I don't go into too

00:31:48,029 --> 00:31:53,940
much detail here you can look at packet

00:31:50,460 --> 00:31:56,669
if you want to have more but the short

00:31:53,940 --> 00:31:59,669
of it is that for example if you open a

00:31:56,669 --> 00:32:03,750
pull request on github or a project it

00:31:59,669 --> 00:32:07,260
is easy to say see then feed back on the

00:32:03,750 --> 00:32:09,570
pull request from packet here packaging

00:32:07,260 --> 00:32:12,150
and fedora worked you can download the

00:32:09,570 --> 00:32:14,310
packages here and the tests

00:32:12,150 --> 00:32:16,170
asked while the tests failed but you

00:32:14,310 --> 00:32:19,530
don't have to tag your release and

00:32:16,170 --> 00:32:21,570
github push to disc it and fedora update

00:32:19,530 --> 00:32:23,310
the spec file do all those things you

00:32:21,570 --> 00:32:25,440
can automate those things away if you

00:32:23,310 --> 00:32:27,060
want to right this is not a it's not

00:32:25,440 --> 00:32:30,150
intended as a replacement for everyone

00:32:27,060 --> 00:32:32,880
this is an optional tool to really tie

00:32:30,150 --> 00:32:35,550
in the upstream projects and get the

00:32:32,880 --> 00:32:37,260
logic work where it belongs because if

00:32:35,550 --> 00:32:39,240
you have if you have that connection to

00:32:37,260 --> 00:32:40,920
the upstream project that's where the

00:32:39,240 --> 00:32:42,960
development is happening that's where

00:32:40,920 --> 00:32:44,940
you want to have the discussion not when

00:32:42,960 --> 00:32:47,460
so if the officer has released any

00:32:44,940 --> 00:32:48,990
package in fedora and then you want to

00:32:47,460 --> 00:32:50,670
change something that's probably a lot

00:32:48,990 --> 00:32:54,000
harder and when it's still a pull

00:32:50,670 --> 00:32:57,060
request in the upstream so packet really

00:32:54,000 --> 00:32:59,100
makes that very easy and I think one of

00:32:57,060 --> 00:33:01,460
the next steps is that packet can can do

00:32:59,100 --> 00:33:04,740
builds think it will use copper and

00:33:01,460 --> 00:33:06,960
it'll it has I think tens of packages

00:33:04,740 --> 00:33:10,350
right now that it supports and as that

00:33:06,960 --> 00:33:17,060
pool grows so the the pool so-called the

00:33:10,350 --> 00:33:19,140
functionality of packet so with this I'm

00:33:17,060 --> 00:33:24,210
pretty much almost straight ahead at the

00:33:19,140 --> 00:33:26,100
end so who has questions on the

00:33:24,210 --> 00:33:27,390
objective good questions for example

00:33:26,100 --> 00:33:29,810
could be timelines so it's kind of scary

00:33:27,390 --> 00:33:29,810
but

00:33:34,620 --> 00:33:42,660
hello so and all of these conversations

00:33:38,770 --> 00:33:46,330
we're having the focus is obviously on

00:33:42,660 --> 00:33:48,460
individual packages but I haven't heard

00:33:46,330 --> 00:33:52,570
a lot I've heard a little bit but not a

00:33:48,460 --> 00:33:54,940
lot about any handling of like mass

00:33:52,570 --> 00:33:58,770
rebuilds or things like that since that

00:33:54,940 --> 00:34:02,490
would obviously result in a lot of I

00:33:58,770 --> 00:34:05,350
mean a lot of activity like all at once

00:34:02,490 --> 00:34:08,080
we have any thoughts on that right now

00:34:05,350 --> 00:34:10,540
or is that still an unknown so first of

00:34:08,080 --> 00:34:12,700
all the important part of things the

00:34:10,540 --> 00:34:14,379
short feedback loop right so when

00:34:12,700 --> 00:34:17,710
changes actually happen so the question

00:34:14,379 --> 00:34:19,690
is is the mass rebuild really is that

00:34:17,710 --> 00:34:22,120
the change or are we doing the mass

00:34:19,690 --> 00:34:25,060
reboot because we introduced it a change

00:34:22,120 --> 00:34:27,580
across many things if it's just a if

00:34:25,060 --> 00:34:28,899
it's just a rebuild the question is

00:34:27,580 --> 00:34:31,990
should we have done parts of that

00:34:28,899 --> 00:34:35,290
earlier like I think some of these

00:34:31,990 --> 00:34:38,260
things will go away when we actually do

00:34:35,290 --> 00:34:41,260
test dependencies we do test changes as

00:34:38,260 --> 00:34:42,610
a whole before they go in so I think

00:34:41,260 --> 00:34:46,629
some of the rebuild questions will go

00:34:42,610 --> 00:34:47,950
away and for other cases I think mass

00:34:46,629 --> 00:34:50,649
reboots are probably a special case

00:34:47,950 --> 00:34:52,450
because who does who gets the feedback

00:34:50,649 --> 00:34:54,940
if there's no I had no actual change

00:34:52,450 --> 00:34:59,530
I think Alexandre has a sort of opinion

00:34:54,940 --> 00:35:01,810
on this I think that mass reviews don't

00:34:59,530 --> 00:35:04,960
fit into CI and gating workflow in

00:35:01,810 --> 00:35:07,590
general but that's okay it's because

00:35:04,960 --> 00:35:11,590
it's the operation by nature is not CI

00:35:07,590 --> 00:35:13,900
we probably would need to like it's

00:35:11,590 --> 00:35:16,330
already happens in a SciTech yeah so I

00:35:13,900 --> 00:35:19,120
think we need to consider adding

00:35:16,330 --> 00:35:21,670
additional layer of testing on top of

00:35:19,120 --> 00:35:23,740
this side tag so we don't just rebuild

00:35:21,670 --> 00:35:26,200
things in a SciTech we also test them

00:35:23,740 --> 00:35:28,000
after we rebuilt them in a site tag so

00:35:26,200 --> 00:35:30,400
this could be one direction of thoughts

00:35:28,000 --> 00:35:33,400
like what can we do with this must

00:35:30,400 --> 00:35:35,260
rebuild operations and the second part

00:35:33,400 --> 00:35:38,950
would be of course like trying to

00:35:35,260 --> 00:35:42,040
eliminate master abuse like why do we

00:35:38,950 --> 00:35:44,470
still have that is it it's also like a

00:35:42,040 --> 00:35:45,640
direction so I would say we are not

00:35:44,470 --> 00:35:48,460
going to trite

00:35:45,640 --> 00:35:51,519
you must rebuild into a gating framework

00:35:48,460 --> 00:35:54,730
we rather use it as a separate case but

00:35:51,519 --> 00:35:57,069
we consider once we understand better of

00:35:54,730 --> 00:35:59,920
a dependency graph maybe with rebuild

00:35:57,069 --> 00:36:02,890
service which to help us with drive is

00:35:59,920 --> 00:36:04,990
understanding we are going to have

00:36:02,890 --> 00:36:07,359
better information about what we need to

00:36:04,990 --> 00:36:10,059
rebuild and we move slowly from us

00:36:07,359 --> 00:36:11,289
rebuilt to targeting rebuilds of things

00:36:10,059 --> 00:36:13,869
which actually matter

00:36:11,289 --> 00:36:16,809
and then the gating will cover this part

00:36:13,869 --> 00:36:18,069
yep yeah and if you introduce a change

00:36:16,809 --> 00:36:20,230
that affects a lot of packages and

00:36:18,069 --> 00:36:35,859
that's not a mass rebuild it's actually

00:36:20,230 --> 00:36:37,630
a massive change request so one of the

00:36:35,859 --> 00:36:40,569
things that I've at least picked up as a

00:36:37,630 --> 00:36:41,710
common theme for you know one of what

00:36:40,569 --> 00:36:44,769
we're trying to do going forward is

00:36:41,710 --> 00:36:47,440
efficiency and here I'm hearing you talk

00:36:44,769 --> 00:36:50,109
about adding another platform for

00:36:47,440 --> 00:36:52,119
running ci so not only would we have the

00:36:50,109 --> 00:36:54,460
Jenkins on top of openshift

00:36:52,119 --> 00:36:56,890
but now we're adding zulan to the mix

00:36:54,460 --> 00:36:58,480
this seems to fly in the face of a lot

00:36:56,890 --> 00:37:01,750
of the stuff that's been talked about so

00:36:58,480 --> 00:37:03,670
far can you elaborate on why we're

00:37:01,750 --> 00:37:06,220
looking at having two separate systems

00:37:03,670 --> 00:37:11,140
when there's been such a gigantic push

00:37:06,220 --> 00:37:13,329
to have one up until now yeah so so

00:37:11,140 --> 00:37:15,160
first of all I'm not a big believer and

00:37:13,329 --> 00:37:16,869
let's have all once let's have one

00:37:15,160 --> 00:37:21,400
system that solves all our problems

00:37:16,869 --> 00:37:23,440
I think the key question here is what is

00:37:21,400 --> 00:37:24,789
sustainable what can you maintain like

00:37:23,440 --> 00:37:28,150
where is the complexity whereas the

00:37:24,789 --> 00:37:30,849
actual work if we have multiple tests

00:37:28,150 --> 00:37:32,890
different tests that provide different

00:37:30,849 --> 00:37:37,900
results for example have rpm inspect I

00:37:32,890 --> 00:37:40,029
have install ability versus dependency

00:37:37,900 --> 00:37:42,490
testing tests and disk it they might

00:37:40,029 --> 00:37:44,160
have different maintained errs they

00:37:42,490 --> 00:37:46,059
might have different ways of running so

00:37:44,160 --> 00:37:51,579
they will probably have different

00:37:46,059 --> 00:37:53,200
requirements so if if one group of

00:37:51,579 --> 00:37:55,000
people decides to maintain all those

00:37:53,200 --> 00:37:57,039
tests they may decide to do them all in

00:37:55,000 --> 00:37:58,250
the same system for simplicity's sake

00:37:57,039 --> 00:37:59,660
for maintenance

00:37:58,250 --> 00:38:01,070
but if they maintain by different people

00:37:59,660 --> 00:38:04,340
they could choose to be implemented in

00:38:01,070 --> 00:38:08,060
different technology so I think for

00:38:04,340 --> 00:38:09,890
these as as the objective lead for me

00:38:08,060 --> 00:38:12,170
those the systems they run on our

00:38:09,890 --> 00:38:13,490
implementation details I think there's a

00:38:12,170 --> 00:38:15,590
good reason to make sure that we use

00:38:13,490 --> 00:38:17,680
similar things maybe as scaleable

00:38:15,590 --> 00:38:22,040
approaches and not reinvent the wheel

00:38:17,680 --> 00:38:24,220
but we have an architecture with that

00:38:22,040 --> 00:38:26,900
we've set up with the messaging system

00:38:24,220 --> 00:38:28,849
results to be everything that we are

00:38:26,900 --> 00:38:31,580
pretty independent of where the test

00:38:28,849 --> 00:38:34,000
results come from I don't have to like

00:38:31,580 --> 00:38:36,650
from a gating perspective and from a

00:38:34,000 --> 00:38:39,020
from a rawhide stability perspective I

00:38:36,650 --> 00:38:42,530
don't have to worry about what systems

00:38:39,020 --> 00:38:46,640
actually produce those results so I

00:38:42,530 --> 00:38:48,070
think it is we should try to keep the

00:38:46,640 --> 00:38:51,619
number of different systems we have

00:38:48,070 --> 00:38:53,390
probably down with we're looking at if

00:38:51,619 --> 00:38:56,480
the same group of people maintains them

00:38:53,390 --> 00:38:58,910
and look at can we share best practices

00:38:56,480 --> 00:39:01,820
can we reuse things for sure I think

00:38:58,910 --> 00:39:04,900
that's always good but I would not say

00:39:01,820 --> 00:39:06,980
just just to have the same system I

00:39:04,900 --> 00:39:09,020
wouldn't want to force people to use the

00:39:06,980 --> 00:39:12,619
same system if they chose a different

00:39:09,020 --> 00:39:17,510
technology to implement our tests maybe

00:39:12,619 --> 00:39:19,790
if I can continue it obvious what there

00:39:17,510 --> 00:39:21,800
is a different thing between bringing in

00:39:19,790 --> 00:39:25,460
average system for fedora infrastructure

00:39:21,800 --> 00:39:28,070
to maintain or enable in another system

00:39:25,460 --> 00:39:31,060
which is going to be maintained by

00:39:28,070 --> 00:39:33,619
different people so where as different

00:39:31,060 --> 00:39:36,920
workloads here which we're talking about

00:39:33,619 --> 00:39:39,650
so for the whole part visual team

00:39:36,920 --> 00:39:43,210
actually suggests to maintain the rule

00:39:39,650 --> 00:39:45,980
service and I think this is a

00:39:43,210 --> 00:39:47,900
possibility to actually reduce the load

00:39:45,980 --> 00:39:51,980
on Fedora infrastructure team and

00:39:47,900 --> 00:39:56,150
actually split the workload currently so

00:39:51,980 --> 00:40:00,080
that it's not all brought to the Fedora

00:39:56,150 --> 00:40:04,640
infra to work with so we have a

00:40:00,080 --> 00:40:06,980
possibility to by the nature of our

00:40:04,640 --> 00:40:10,430
system as a distributed gating framework

00:40:06,980 --> 00:40:11,510
so we can enable various CI systems each

00:40:10,430 --> 00:40:15,380
maintained by

00:40:11,510 --> 00:40:17,390
various dedicated people who can who

00:40:15,380 --> 00:40:19,850
then will be completely independent from

00:40:17,390 --> 00:40:22,130
Fedora infrastructure team which means

00:40:19,850 --> 00:40:25,310
we are going to reduce the load on mein

00:40:22,130 --> 00:40:27,290
fedora infra this is one of the benefits

00:40:25,310 --> 00:40:29,690
with which we get from such a system and

00:40:27,290 --> 00:40:32,840
I suspect I'm getting close to this

00:40:29,690 --> 00:40:34,520
should be taken offline but if they're

00:40:32,840 --> 00:40:37,430
willing to maintain a dual system why

00:40:34,520 --> 00:40:38,780
aren't we using that for everything that

00:40:37,430 --> 00:40:41,180
is a good question

00:40:38,780 --> 00:40:43,760
but that's a question for the test

00:40:41,180 --> 00:40:46,550
systems for AG for the interval Chester

00:40:43,760 --> 00:40:50,840
to decide I think if we look at this

00:40:46,550 --> 00:40:51,740
from the well the Fedora perspective we

00:40:50,840 --> 00:40:53,740
look at how this is set up with our

00:40:51,740 --> 00:40:57,530
additions and services and teams

00:40:53,740 --> 00:40:59,930
essentially Zul in this case would be I

00:40:57,530 --> 00:41:02,810
guess a mixture of it would be a team

00:40:59,930 --> 00:41:04,850
that chooses to contribute to Fedora by

00:41:02,810 --> 00:41:09,710
providing a service of providing results

00:41:04,850 --> 00:41:12,350
and the community decides to consume

00:41:09,710 --> 00:41:15,140
those results we're not we're not

00:41:12,350 --> 00:41:17,030
telling the team to do this they are

00:41:15,140 --> 00:41:18,830
providing it we're consuming it and

00:41:17,030 --> 00:41:21,680
saying hey this is nice to use I think

00:41:18,830 --> 00:41:25,490
it goes along with what made you present

00:41:21,680 --> 00:41:28,070
it at the state of Fedora talk but we

00:41:25,490 --> 00:41:31,310
are innovating platform actually yeah so

00:41:28,070 --> 00:41:33,500
he was talking more about possibility

00:41:31,310 --> 00:41:36,500
for different people to create different

00:41:33,500 --> 00:41:38,810
spins and different a secondary

00:41:36,500 --> 00:41:42,140
artifacts from Fedora based on Fedora

00:41:38,810 --> 00:41:44,000
but infrastructure is also a place in

00:41:42,140 --> 00:41:45,590
continuous integration infrastructure is

00:41:44,000 --> 00:41:49,430
also placed where you innovate and

00:41:45,590 --> 00:41:51,770
that's why we provide a platform for

00:41:49,430 --> 00:41:54,590
people to try where to come with their

00:41:51,770 --> 00:41:57,290
solutions we don't want people to be

00:41:54,590 --> 00:42:00,350
gatekeepers who don't let people in just

00:41:57,290 --> 00:42:03,170
because we don't fit in our work we want

00:42:00,350 --> 00:42:04,880
to provide an API so people can come

00:42:03,170 --> 00:42:09,050
with something they want to implement

00:42:04,880 --> 00:42:14,120
and in a and start doing this so in case

00:42:09,050 --> 00:42:16,220
of Zul we are trying to like the fabian

00:42:14,120 --> 00:42:19,040
presented actually the proof of concept

00:42:16,220 --> 00:42:20,660
which is already there it works and it

00:42:19,040 --> 00:42:22,910
works nicely it's integrated with

00:42:20,660 --> 00:42:23,740
procore and so on so there is literally

00:42:22,910 --> 00:42:25,690
no reason

00:42:23,740 --> 00:42:27,880
for us to stop this effort because there

00:42:25,690 --> 00:42:32,170
are people who willing to do it so we

00:42:27,880 --> 00:42:35,970
just need to let them do the thing we

00:42:32,170 --> 00:42:38,770
wanted to contribute and this the

00:42:35,970 --> 00:42:41,500
responsibility of us here so we keep it

00:42:38,770 --> 00:42:44,820
working in the end is that we need to

00:42:41,500 --> 00:42:48,070
keep several compatibility layers so we

00:42:44,820 --> 00:42:50,290
can switch between CI systems we can

00:42:48,070 --> 00:42:54,220
enable/disable CI systems we can

00:42:50,290 --> 00:42:56,140
maintain with workflows but we want to

00:42:54,220 --> 00:43:01,200
give people freedom to contribute this

00:42:56,140 --> 00:43:06,400
is basically rationale behind does it

00:43:01,200 --> 00:43:09,040
does that make sense to you I wanted to

00:43:06,400 --> 00:43:11,290
add on that a bit on the link on the

00:43:09,040 --> 00:43:12,850
Linux kernel development you have a

00:43:11,290 --> 00:43:14,380
number of companies that provide tests

00:43:12,850 --> 00:43:16,630
for every patch that are sent to the

00:43:14,380 --> 00:43:19,030
list on other words that they run and

00:43:16,630 --> 00:43:22,000
that the kernel community does not have

00:43:19,030 --> 00:43:23,740
access to but as the development and the

00:43:22,000 --> 00:43:25,930
feedback of these tests has been built

00:43:23,740 --> 00:43:28,450
and as grown people have started to

00:43:25,930 --> 00:43:30,100
realize that when the test fails and

00:43:28,450 --> 00:43:32,200
they get a report that this patch is

00:43:30,100 --> 00:43:34,030
failing on that hardware it turns out in

00:43:32,200 --> 00:43:35,680
the long term that that test was

00:43:34,030 --> 00:43:38,320
actually valuable and was providing

00:43:35,680 --> 00:43:40,960
inputs so the kernel community I started

00:43:38,320 --> 00:43:42,820
to learn to rely on tests that on that

00:43:40,960 --> 00:43:44,590
are running on systems and that they

00:43:42,820 --> 00:43:47,170
don't have access to and they have been

00:43:44,590 --> 00:43:49,180
open to that and I think long-term for

00:43:47,170 --> 00:43:51,970
us further on as a community needs also

00:43:49,180 --> 00:43:53,980
to be open to the idea of receiving test

00:43:51,970 --> 00:43:55,900
results from result that are not within

00:43:53,980 --> 00:43:58,420
the control of the direct control of the

00:43:55,900 --> 00:44:01,810
community if Amazon wants or Amazon

00:43:58,420 --> 00:44:03,720
Facebook really wants to do this we want

00:44:01,810 --> 00:44:06,040
to participate we've had facebook

00:44:03,720 --> 00:44:07,950
standing here as the first keynote we've

00:44:06,040 --> 00:44:10,660
had I p.m. from the news this morning

00:44:07,950 --> 00:44:12,670
mentioned and if these companies want to

00:44:10,660 --> 00:44:14,950
contribute to fedora row Heights follow

00:44:12,670 --> 00:44:18,400
us development in general and provide us

00:44:14,950 --> 00:44:19,630
with a set of test results coming from

00:44:18,400 --> 00:44:21,340
their system that they have access to

00:44:19,630 --> 00:44:23,200
their own specific architecture on

00:44:21,340 --> 00:44:25,450
Pacific hardware and provide us with

00:44:23,200 --> 00:44:27,640
that kernel update that system the

00:44:25,450 --> 00:44:28,720
update that GCC Singh is breaking on

00:44:27,640 --> 00:44:30,910
this Hardware for these and these

00:44:28,720 --> 00:44:33,010
reasons we need to be open to receive

00:44:30,910 --> 00:44:34,810
that feedback whether we want to get on

00:44:33,010 --> 00:44:36,910
this results or not this is going to be

00:44:34,810 --> 00:44:37,210
a time decision this is going to be in

00:44:36,910 --> 00:44:38,740
for

00:44:37,210 --> 00:44:41,350
the maintenance of this result

00:44:38,740 --> 00:44:43,150
consistent enough that I can rely on but

00:44:41,350 --> 00:44:46,600
at least we need to be able to unboard

00:44:43,150 --> 00:44:48,580
them and let the community decide if the

00:44:46,600 --> 00:44:50,470
value they provide is good enough for to

00:44:48,580 --> 00:44:53,500
be carried out what we definitely don't

00:44:50,470 --> 00:44:56,530
want is that developers have to write

00:44:53,500 --> 00:44:58,690
tests for Zul tests for Jenkins and test

00:44:56,530 --> 00:45:00,670
for something in different formats this

00:44:58,690 --> 00:45:03,790
is what we want to avoid but this is our

00:45:00,670 --> 00:45:06,220
agreement that CI systems will need to

00:45:03,790 --> 00:45:08,620
comply to certain standards so if I'm

00:45:06,220 --> 00:45:10,690
described my integration tests once and

00:45:08,620 --> 00:45:12,820
put them in this kit when any of those

00:45:10,690 --> 00:45:15,340
CI systems which wants to try to try

00:45:12,820 --> 00:45:18,250
them they should be able to run it so

00:45:15,340 --> 00:45:21,700
there should be an this compatibility

00:45:18,250 --> 00:45:23,680
layer between CI systems but other than

00:45:21,700 --> 00:45:26,500
that like the actual implementation of

00:45:23,680 --> 00:45:28,300
how the CI system is going to run we

00:45:26,500 --> 00:45:30,430
would like to provide complete freedom

00:45:28,300 --> 00:45:33,550
to people to to work with us to play

00:45:30,430 --> 00:45:35,980
with us to participate in them I think

00:45:33,550 --> 00:45:38,260
with what Fedora infra has built allows

00:45:35,980 --> 00:45:40,060
that feedback to come in without

00:45:38,260 --> 00:45:41,740
changing the underlying tooling all the

00:45:40,060 --> 00:45:43,360
time which i think is awesome right the

00:45:41,740 --> 00:45:47,170
infrastructure itself is now in a place

00:45:43,360 --> 00:45:50,590
we can try these things out like let's

00:45:47,170 --> 00:45:52,150
if the Zul team or Facebook or some

00:45:50,590 --> 00:45:54,220
other team wants is ones to try this out

00:45:52,150 --> 00:45:56,530
why not like why does this hurt right

00:45:54,220 --> 00:45:58,750
let's try it out see what happens and if

00:45:56,530 --> 00:46:01,510
it if it's like well other communities

00:45:58,750 --> 00:46:04,390
if acceptance of this grows and that's a

00:46:01,510 --> 00:46:06,280
good thing and and we don't need a

00:46:04,390 --> 00:46:08,560
central policy to define that I think

00:46:06,280 --> 00:46:10,840
that's one of the biggest changes from

00:46:08,560 --> 00:46:13,480
from also and if you look at the the

00:46:10,840 --> 00:46:15,700
Fedora policy as a whole what Matthew

00:46:13,480 --> 00:46:18,430
outlined this reflects that where well

00:46:15,700 --> 00:46:20,200
like aleksandra said so I think that is

00:46:18,430 --> 00:46:24,280
a good good development towards freedom

00:46:20,200 --> 00:46:27,130
without tying decisions to tooling over

00:46:24,280 --> 00:46:29,380
much and and literally anyone in this

00:46:27,130 --> 00:46:31,570
room can just go and start being the CI

00:46:29,380 --> 00:46:33,010
system on Fedora if you want to run a

00:46:31,570 --> 00:46:35,590
certain test when a certain packers

00:46:33,010 --> 00:46:37,390
change you can just start doing it you

00:46:35,590 --> 00:46:39,430
can just start sending your results and

00:46:37,390 --> 00:46:41,920
your results will be visible for people

00:46:39,430 --> 00:46:43,360
who are updating the package and yeah

00:46:41,920 --> 00:46:44,170
people may complain that you're sending

00:46:43,360 --> 00:46:47,380
some

00:46:44,170 --> 00:46:49,360
rubbish but if you actually talk with

00:46:47,380 --> 00:46:52,360
Quinton with maintainer of a package it

00:46:49,360 --> 00:46:54,460
may be valuable input so it's literally

00:46:52,360 --> 00:46:57,250
anyone can just jump in and start

00:46:54,460 --> 00:47:14,770
testing and providing feedback but

00:46:57,250 --> 00:47:16,150
that's nice okay and so I have to repeat

00:47:14,770 --> 00:47:19,750
the question how many packets do you say

00:47:16,150 --> 00:47:29,890
how many Packers have tests or like in

00:47:19,750 --> 00:47:31,570
disc it or anywhere I think this should

00:47:29,890 --> 00:47:40,090
be that we keep I choose from it was

00:47:31,570 --> 00:47:45,100
that that age I had earlier I think so

00:47:40,090 --> 00:47:48,730
here I have yeah I thinks 111 I think in

00:47:45,100 --> 00:47:51,400
the category that's listed there so not

00:47:48,730 --> 00:47:58,390
that many but that's the reason for that

00:47:51,400 --> 00:48:00,760
appear it I think it's everything it's

00:47:58,390 --> 00:48:03,550
like 1500 this is this is subset of 1500

00:48:00,760 --> 00:48:06,460
packages not sure if that's so seven

00:48:03,550 --> 00:48:08,500
percent of those 1556 but this is the

00:48:06,460 --> 00:48:10,720
integration test if we're going to talk

00:48:08,500 --> 00:48:12,580
about rpm inspects it will be 100

00:48:10,720 --> 00:48:15,340
percent coverage because it's a generic

00:48:12,580 --> 00:48:18,910
test which will run for everything so

00:48:15,340 --> 00:48:23,680
for this kit does we really decided to

00:48:18,910 --> 00:48:25,480
like leave it on the very we will run

00:48:23,680 --> 00:48:27,670
this key test in those places where

00:48:25,480 --> 00:48:29,770
people configure them but we're not

00:48:27,670 --> 00:48:31,810
going to focus on extending the reach of

00:48:29,770 --> 00:48:35,140
these key tests right now because we

00:48:31,810 --> 00:48:38,650
really don't want people to fight alone

00:48:35,140 --> 00:48:40,900
with the gating and so by focusing on

00:48:38,650 --> 00:48:43,120
generic district-wide test we kind of

00:48:40,900 --> 00:48:44,710
share the experience and all developers

00:48:43,120 --> 00:48:46,900
work with them through the same tests

00:48:44,710 --> 00:48:49,560
and all infrastructure teams work with

00:48:46,900 --> 00:48:52,720
the same tests and we don't have these

00:48:49,560 --> 00:48:55,630
people stuck with the framework with

00:48:52,720 --> 00:48:57,760
their component alone and just trying to

00:48:55,630 --> 00:49:00,609
get it running so for

00:48:57,760 --> 00:49:04,680
the first stage mr. white tests are we

00:49:00,609 --> 00:49:07,480
primary focus for next month

00:49:04,680 --> 00:49:10,750
probably we're not talking about time

00:49:07,480 --> 00:49:12,640
with here if so to put this into

00:49:10,750 --> 00:49:14,290
perspective instead of having all these

00:49:12,640 --> 00:49:16,750
services what we could have done is

00:49:14,290 --> 00:49:19,750
added this added the RPM inspect as the

00:49:16,750 --> 00:49:22,930
gating tests in this distributists in

00:49:19,750 --> 00:49:25,480
this in the pipeline framework into and

00:49:22,930 --> 00:49:26,859
for every individual package I could of

00:49:25,480 --> 00:49:29,020
that what if we would have one way of

00:49:26,859 --> 00:49:30,700
doing it but we're saying explicitly

00:49:29,020 --> 00:49:32,050
we're maintaining this in a different

00:49:30,700 --> 00:49:33,730
place you don't have to maintain it you

00:49:32,050 --> 00:49:35,710
can you can contribute you can see it

00:49:33,730 --> 00:49:38,650
you can try it out but it's not on you

00:49:35,710 --> 00:49:40,840
to maintain you still get the results so

00:49:38,650 --> 00:49:42,220
we want the benefits but not and what

00:49:40,840 --> 00:49:44,470
basically we were saying we're saying

00:49:42,220 --> 00:49:51,100
this is worth it to maintain in a

00:49:44,470 --> 00:49:53,920
centralized place okay hey girl

00:49:51,100 --> 00:49:57,970
out of time any one last question anyone

00:49:53,920 --> 00:49:59,690
has one okay

00:49:57,970 --> 00:50:00,120
thank you very much

00:49:59,690 --> 00:50:03,239
[Applause]

00:50:00,120 --> 00:50:03,239

YouTube URL: https://www.youtube.com/watch?v=tyXOYNNjSRw


