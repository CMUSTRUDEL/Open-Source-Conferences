Title: communishift - Kevin Fenzi - Flock 2019
Publication date: 2019-08-28
Playlist: Flock 2019
Description: 
	A OpenShift cluster for Fedora community managed applications.

 Introduce the  community openshift instance we have setup to allow community members to have resources to run things for the Fedora or CentOS community.

This will allow community members to run existing applications or create proof of concept applications that they fully maintain, reducing burden on the CPE team as well as providing services for the community and learning in the process.

The talk will start with some history, then on to what the hardware and setup looks like, then policies and process and finally live demo of a new app deployment.

--
Recordings of talks at Flock are a community effort. Unfortunately not everything works perfectly every time. If you're interested in helping us improve, let us know.
Captions: 
	00:00:01,770 --> 00:00:07,870
as is indicated there my name is Kevin

00:00:04,840 --> 00:00:12,790
for anyone who doesn't know me I work on

00:00:07,870 --> 00:00:15,220
Fedora infrastructure so this talk is

00:00:12,790 --> 00:00:16,710
going to be about our new community

00:00:15,220 --> 00:00:21,429
instance which I'm going to talk about

00:00:16,710 --> 00:00:23,980
how it's set up how you can use it what

00:00:21,429 --> 00:00:25,929
it consists of how we expect it to be

00:00:23,980 --> 00:00:27,339
used all that kind of stuff

00:00:25,929 --> 00:00:30,849
but I thought I'd give a little brief

00:00:27,339 --> 00:00:34,329
history of the kind of things that we

00:00:30,849 --> 00:00:37,210
were that this is replacing essentially

00:00:34,329 --> 00:00:40,570
we have right now a private cloud

00:00:37,210 --> 00:00:45,359
instance that's running OpenStack 55.0

00:00:40,570 --> 00:00:47,589
if anyone remembers that long ago and

00:00:45,359 --> 00:00:51,070
it's of course having lots of problems

00:00:47,589 --> 00:00:53,850
because it's so ancient and we have a

00:00:51,070 --> 00:00:56,559
number of instances there that are

00:00:53,850 --> 00:01:01,059
community oriented things we have

00:00:56,559 --> 00:01:06,880
maintainer test machines koper runs some

00:01:01,059 --> 00:01:08,470
of its stuff there we have just a lot of

00:01:06,880 --> 00:01:11,980
development instances for our

00:01:08,470 --> 00:01:14,260
application developers and we we kind of

00:01:11,980 --> 00:01:16,660
envisioned that cloud network as being a

00:01:14,260 --> 00:01:18,820
place where people could spin up things

00:01:16,660 --> 00:01:22,210
experiment figure out how their their

00:01:18,820 --> 00:01:24,280
applications were working you know test

00:01:22,210 --> 00:01:26,890
things get things to a state where they

00:01:24,280 --> 00:01:29,350
wanted to have wider usage things like

00:01:26,890 --> 00:01:32,290
that and it wasn't really that

00:01:29,350 --> 00:01:35,080
successful and I think we've learned a

00:01:32,290 --> 00:01:38,290
lot of lessons from that and hopefully

00:01:35,080 --> 00:01:46,390
this this replacement will will be much

00:01:38,290 --> 00:01:48,840
more effective yeah my presentation

00:01:46,390 --> 00:01:48,840
pencil

00:01:51,640 --> 00:02:00,610
so we have this comunist instance it's a

00:01:55,470 --> 00:02:02,800
OpenShift 4.1 instance and it's using a

00:02:00,610 --> 00:02:07,990
lot of a lot of hardware so it's got a

00:02:02,800 --> 00:02:10,119
lot of capacity for things it is one of

00:02:07,990 --> 00:02:12,700
the reasons we went with OpenShift 4 as

00:02:10,119 --> 00:02:15,550
opposed to OpenShift 3 or another

00:02:12,700 --> 00:02:17,440
OpenStack something like that you may

00:02:15,550 --> 00:02:20,680
have seen some of the other talks at

00:02:17,440 --> 00:02:23,020
this flock about how the CPE team which

00:02:20,680 --> 00:02:26,110
I'm part of or the Fedora engineering

00:02:23,020 --> 00:02:28,240
team as we used to be are overloaded we

00:02:26,110 --> 00:02:30,940
have a lot of stuff to do we don't have

00:02:28,240 --> 00:02:32,170
that much time we we're trying to cut

00:02:30,940 --> 00:02:33,580
back on the things we're doing we're

00:02:32,170 --> 00:02:36,070
trying to focus on the things that will

00:02:33,580 --> 00:02:37,959
give us the most bang for the buck so

00:02:36,070 --> 00:02:39,430
one of the things we really wanted out

00:02:37,959 --> 00:02:42,130
of this is for it to be very

00:02:39,430 --> 00:02:45,670
self-service so people were not blocked

00:02:42,130 --> 00:02:47,530
waiting for us or you know asking us for

00:02:45,670 --> 00:02:50,830
things they could just dive right in and

00:02:47,530 --> 00:02:54,910
go do what they needed to do without any

00:02:50,830 --> 00:02:57,730
further interaction and so OpenShift

00:02:54,910 --> 00:03:00,940
for for those you have who have not used

00:02:57,730 --> 00:03:04,480
it yet is very hands-off as far as

00:03:00,940 --> 00:03:05,860
managing if we have time here I'll show

00:03:04,480 --> 00:03:08,110
you because there's an update pending

00:03:05,860 --> 00:03:10,180
but basically when there's up an update

00:03:08,110 --> 00:03:12,190
you just click a button that says ok go

00:03:10,180 --> 00:03:13,780
ahead and update my cluster it does

00:03:12,190 --> 00:03:17,049
everything in the background it moves

00:03:13,780 --> 00:03:18,640
your pods off of the node it updates the

00:03:17,049 --> 00:03:20,650
node it reboots the node and make sure

00:03:18,640 --> 00:03:23,440
it's working it removes pods back onto

00:03:20,650 --> 00:03:26,890
it it does all of that and so that's

00:03:23,440 --> 00:03:32,670
gonna it it does work it does it's

00:03:26,890 --> 00:03:35,170
amazing it is magic so one of the things

00:03:32,670 --> 00:03:36,720
we really wanted was to have something

00:03:35,170 --> 00:03:38,440
that was low maintenance for us

00:03:36,720 --> 00:03:41,950
self-service for the people who are

00:03:38,440 --> 00:03:43,570
using it and so that people could

00:03:41,950 --> 00:03:50,230
actually get a lot of use out of it

00:03:43,570 --> 00:03:52,120
without us having to babysit it so how

00:03:50,230 --> 00:03:55,870
many people here know what open shift is

00:03:52,120 --> 00:03:58,329
have used it quite a few people good so

00:03:55,870 --> 00:04:00,250
I won't go too much into this but if you

00:03:58,329 --> 00:04:03,099
have never used openshift it's just

00:04:00,250 --> 00:04:04,700
basically a platform for managing your

00:04:03,099 --> 00:04:06,650
containers and

00:04:04,700 --> 00:04:08,450
you can stuff all kinds of things in

00:04:06,650 --> 00:04:11,510
containers as you might imagine your

00:04:08,450 --> 00:04:13,819
application can run in a container opens

00:04:11,510 --> 00:04:16,100
just has a concept called pods which is

00:04:13,819 --> 00:04:17,989
multiple containers that are sort of

00:04:16,100 --> 00:04:20,840
able to talk to each other and perform

00:04:17,989 --> 00:04:23,780
different functions openshift gives you

00:04:20,840 --> 00:04:27,230
a platform that is opinionated and is

00:04:23,780 --> 00:04:29,030
the same from a cluster to cluster you

00:04:27,230 --> 00:04:32,600
can export from one cluster import to

00:04:29,030 --> 00:04:35,510
another cluster it's the same stuff and

00:04:32,600 --> 00:04:38,090
it's it's really nice because it's you

00:04:35,510 --> 00:04:39,650
can get started really quickly you can

00:04:38,090 --> 00:04:42,639
have it manage a lot of the heavy

00:04:39,650 --> 00:04:44,660
lifting stuff that the infrastructure

00:04:42,639 --> 00:04:46,820
that you would normally have to do

00:04:44,660 --> 00:04:48,770
yourself if you were if you were just

00:04:46,820 --> 00:04:51,590
deploying this to a VM or something like

00:04:48,770 --> 00:04:54,639
that so it's it's very handy for this

00:04:51,590 --> 00:04:57,919
sort of thing

00:04:54,639 --> 00:05:01,100
so you're here are the use cases we kind

00:04:57,919 --> 00:05:04,070
of imagined for this cluster proof of

00:05:01,100 --> 00:05:06,200
concept applications so you might have

00:05:04,070 --> 00:05:08,450
an idea for something and go hmm you

00:05:06,200 --> 00:05:10,280
know I I think this is a great idea but

00:05:08,450 --> 00:05:13,340
I'd like to make sure it works before I

00:05:10,280 --> 00:05:15,070
ask people to help me with it that kind

00:05:13,340 --> 00:05:17,360
of thing

00:05:15,070 --> 00:05:19,880
applications to get your work done more

00:05:17,360 --> 00:05:24,110
efficiently and a good example of this

00:05:19,880 --> 00:05:27,289
is there's some folks who use build

00:05:24,110 --> 00:05:29,300
modules right now for Koji and do a lot

00:05:27,289 --> 00:05:32,870
of their work in their own koji

00:05:29,300 --> 00:05:34,370
instances that they run elsewhere this

00:05:32,870 --> 00:05:38,090
is certainly a place that you could run

00:05:34,370 --> 00:05:42,560
that and do test module builds things

00:05:38,090 --> 00:05:46,340
like that very easily applications

00:05:42,560 --> 00:05:49,700
supported by the community that we're

00:05:46,340 --> 00:05:51,520
trying to not support ourselves anymore

00:05:49,700 --> 00:05:54,289
because we're trying to focus on things

00:05:51,520 --> 00:05:56,210
this is a great place to have the

00:05:54,289 --> 00:05:59,870
resources to stand up that application

00:05:56,210 --> 00:06:03,020
and get a team or a group to work on it

00:05:59,870 --> 00:06:05,210
and make sure that it continues to to

00:06:03,020 --> 00:06:08,630
function and provide value to the

00:06:05,210 --> 00:06:10,039
community and it's a generally a nice

00:06:08,630 --> 00:06:11,960
way to for people to learn about

00:06:10,039 --> 00:06:13,739
openshift if you don't have experience

00:06:11,960 --> 00:06:16,139
with it or

00:06:13,739 --> 00:06:20,969
you want to to gain experience with it

00:06:16,139 --> 00:06:31,229
or see how it works there's any level of

00:06:20,969 --> 00:06:32,609
detail you can get to here sure and

00:06:31,229 --> 00:06:36,149
that's actually something that we've

00:06:32,609 --> 00:06:37,709
we've had in the past where local

00:06:36,149 --> 00:06:40,319
communities have come to us and said you

00:06:37,709 --> 00:06:42,119
know oh we want a website and you know

00:06:40,319 --> 00:06:44,519
place for gathering and we didn't have

00:06:42,119 --> 00:06:46,109
any way to do that you know we didn't

00:06:44,519 --> 00:06:47,909
have a general infrastructure for that

00:06:46,109 --> 00:06:49,949
kind of thing but yeah that's absolutely

00:06:47,909 --> 00:06:54,359
something that they could run in in this

00:06:49,949 --> 00:06:56,279
in this instance so what do we support

00:06:54,359 --> 00:07:00,359
in this instance we support the

00:06:56,279 --> 00:07:03,649
OpenShift platform and that's it we want

00:07:00,359 --> 00:07:07,409
things to be as self-service as possible

00:07:03,649 --> 00:07:09,539
there will be outages at downtime but we

00:07:07,409 --> 00:07:11,039
will try and keep that to a minimum as a

00:07:09,539 --> 00:07:13,979
minimum as possible

00:07:11,039 --> 00:07:16,859
I mentioned upgrades earlier OpenShift

00:07:13,979 --> 00:07:20,039
for is like I said has been really good

00:07:16,859 --> 00:07:24,360
at upgrades our our cluster is running

00:07:20,039 --> 00:07:26,459
Red Hat core OS as all the nodes so even

00:07:24,360 --> 00:07:29,759
the even the nodes are managed by the

00:07:26,459 --> 00:07:31,610
cluster manager by kubernetes so it does

00:07:29,759 --> 00:07:33,869
a really pretty good job about

00:07:31,610 --> 00:07:36,269
processing through the updates and and

00:07:33,869 --> 00:07:38,459
and just handling that for us so I don't

00:07:36,269 --> 00:07:40,949
foresee there being downtime for updates

00:07:38,459 --> 00:07:43,679
or things like that there might be a

00:07:40,949 --> 00:07:46,229
downtime for you know data center issues

00:07:43,679 --> 00:07:49,049
or network issues or things like that

00:07:46,229 --> 00:07:51,089
but there there really shouldn't be that

00:07:49,049 --> 00:07:57,479
much in the way of maintenance and

00:07:51,089 --> 00:07:59,789
whatnot and so what does that leave for

00:07:57,479 --> 00:08:03,389
the people running things to support

00:07:59,789 --> 00:08:05,609
well there's a wiki page that I have at

00:08:03,389 --> 00:08:08,909
the end that has a lot of this mentioned

00:08:05,609 --> 00:08:11,819
more in more detail but it's up to you

00:08:08,909 --> 00:08:13,919
to back up your application which when

00:08:11,819 --> 00:08:15,929
you're using OpenShift that's pretty

00:08:13,919 --> 00:08:18,419
easy you can actually export the the

00:08:15,929 --> 00:08:19,289
definition and if you have a database or

00:08:18,419 --> 00:08:22,589
something like that you'll obviously

00:08:19,289 --> 00:08:24,209
need to backup that database but it's

00:08:22,589 --> 00:08:27,030
actually pretty easy to do that kind of

00:08:24,209 --> 00:08:29,460
thing with openshift

00:08:27,030 --> 00:08:31,830
we definitely recommend that you put

00:08:29,460 --> 00:08:34,349
your management of your application in

00:08:31,830 --> 00:08:37,110
to get you can use any get Ford you want

00:08:34,349 --> 00:08:38,940
pag air get hub get lab your own

00:08:37,110 --> 00:08:42,030
personal git server whatever you want to

00:08:38,940 --> 00:08:43,650
use but if you use git for your changes

00:08:42,030 --> 00:08:45,590
to your application that way you keep

00:08:43,650 --> 00:08:48,120
track of them you can roll back easily

00:08:45,590 --> 00:08:51,900
other people can contribute new pull

00:08:48,120 --> 00:08:55,200
requests etc etc and OpenShift is really

00:08:51,900 --> 00:08:56,640
built around that sort of workflow your

00:08:55,200 --> 00:09:00,170
application can build out of your git

00:08:56,640 --> 00:09:02,220
repo you can actually set things up very

00:09:00,170 --> 00:09:03,840
automatically so you don't actually need

00:09:02,220 --> 00:09:05,880
to mess with the OpenShift side of

00:09:03,840 --> 00:09:08,700
things anymore you know you just do a

00:09:05,880 --> 00:09:10,740
commit to your git repo it openshift

00:09:08,700 --> 00:09:13,590
notices that there's a change rebuilds

00:09:10,740 --> 00:09:15,570
your source image rolls out your your

00:09:13,590 --> 00:09:18,660
new application and there it is and you

00:09:15,570 --> 00:09:24,360
actually all you had to do was commit

00:09:18,660 --> 00:09:27,450
that get commit another thing that's

00:09:24,360 --> 00:09:29,910
very important with this setup is your

00:09:27,450 --> 00:09:31,860
application needs to have a way for

00:09:29,910 --> 00:09:33,630
people to know who it is that they can

00:09:31,860 --> 00:09:36,150
contact if they start using your

00:09:33,630 --> 00:09:37,260
application and it goes down we're not

00:09:36,150 --> 00:09:39,450
going to be able to do anything about

00:09:37,260 --> 00:09:42,089
that we need to know who to refer them

00:09:39,450 --> 00:09:45,270
to so we would definitely recommend you

00:09:42,089 --> 00:09:54,650
have some way of referring them to you

00:09:45,270 --> 00:09:54,650
email address etc etc yes

00:10:04,139 --> 00:10:08,430
yes so the question was is there

00:10:06,300 --> 00:10:12,089
persistent storage and the answer is yes

00:10:08,430 --> 00:10:13,499
and the second question was if you're

00:10:12,089 --> 00:10:15,629
responsible for backing up that

00:10:13,499 --> 00:10:19,110
persistent storage and the answer again

00:10:15,629 --> 00:10:23,059
is yes and we do have it it's a NFS

00:10:19,110 --> 00:10:27,180
storage and we do have it set to not

00:10:23,059 --> 00:10:28,980
reclaim so like if you got if you

00:10:27,180 --> 00:10:30,870
accidentally deleted your app or

00:10:28,980 --> 00:10:32,910
something like that that storage would

00:10:30,870 --> 00:10:35,749
still be there for a while until we

00:10:32,910 --> 00:10:40,139
manually went and reclaimed that drive

00:10:35,749 --> 00:10:41,579
that claim but you know you you

00:10:40,139 --> 00:11:02,600
shouldn't count on that you should

00:10:41,579 --> 00:11:11,939
actually backup that information right

00:11:02,600 --> 00:11:14,550
right correct and and the reason we

00:11:11,939 --> 00:11:16,709
thought about it you know providing us a

00:11:14,550 --> 00:11:18,809
backup service or we even thought about

00:11:16,709 --> 00:11:21,089
providing database services things like

00:11:18,809 --> 00:11:24,389
that but then we get back to us doing a

00:11:21,089 --> 00:11:27,329
lot of work and we're already overloaded

00:11:24,389 --> 00:11:29,009
so it's like okay do you want rawhide

00:11:27,329 --> 00:11:30,509
composed to be fixed today or do you

00:11:29,009 --> 00:11:34,019
want me to restore the data for this

00:11:30,509 --> 00:11:36,389
application so we wanted it to be pretty

00:11:34,019 --> 00:11:38,670
clear that it's it's up to the user to

00:11:36,389 --> 00:11:40,050
back up that Nate or not I mean if you

00:11:38,670 --> 00:11:42,870
don't want to back up your data and if

00:11:40,050 --> 00:11:46,610
you want to reproduce it it depends on

00:11:42,870 --> 00:11:46,610
what your data is I suppose so

00:11:54,510 --> 00:12:01,240
huh now it's it's just NFS right now

00:11:59,500 --> 00:12:03,820
although I haven't run into that problem

00:12:01,240 --> 00:12:40,870
with that but maybe it's still there

00:12:03,820 --> 00:12:43,240
it's absolutely we can we can look into

00:12:40,870 --> 00:12:45,550
that I think it depends on what you're

00:12:43,240 --> 00:12:47,560
storing I mean if it's a database then

00:12:45,550 --> 00:13:14,410
obviously you just connect to your

00:12:47,560 --> 00:13:17,290
database into a Dom but right absolutely

00:13:14,410 --> 00:13:20,620
and yeah we could look into that and see

00:13:17,290 --> 00:13:27,400
what the best practice is I think there

00:13:20,620 --> 00:13:30,370
may be a way to get it exported or right

00:13:27,400 --> 00:13:33,280
you could maybe do it with another

00:13:30,370 --> 00:13:38,140
container that does stuff or possibly

00:13:33,280 --> 00:13:40,990
even just some sort of OCR shell script

00:13:38,140 --> 00:13:42,310
thing I don't I'd have to look but

00:13:40,990 --> 00:13:42,870
you're right you're right that's that's

00:13:42,310 --> 00:13:44,850
a good point

00:13:42,870 --> 00:13:48,039
yeah

00:13:44,850 --> 00:13:48,039
[Music]

00:13:48,950 --> 00:13:55,419
[Laughter]

00:13:52,439 --> 00:13:58,299
so the question was would we provide the

00:13:55,419 --> 00:14:00,099
platform for the backups and I don't

00:13:58,299 --> 00:14:02,199
think we plan to do that now I mean I

00:14:00,099 --> 00:14:11,079
guess if there was a great demand we

00:14:02,199 --> 00:14:13,659
could look into doing that correct yeah

00:14:11,079 --> 00:14:15,369
and I was a later slide about that but

00:14:13,659 --> 00:14:16,779
yeah one of the other things is we're

00:14:15,369 --> 00:14:19,239
thinking of this is sort of a an

00:14:16,779 --> 00:14:20,589
incubator so like if somebody brings up

00:14:19,239 --> 00:14:24,329
an app and they get a team and they

00:14:20,589 --> 00:14:27,909
start making this out great and you know

00:14:24,329 --> 00:14:30,099
the it gets used by a lot of people it

00:14:27,909 --> 00:14:32,559
becomes central to whatever and it's

00:14:30,099 --> 00:14:34,509
it's something that is in our mission so

00:14:32,559 --> 00:14:36,369
it's like something that helps with the

00:14:34,509 --> 00:14:38,619
build system or something like that then

00:14:36,369 --> 00:14:42,059
yeah absolutely we could look at you

00:14:38,619 --> 00:14:42,059
know promoting it into a different area

00:14:56,940 --> 00:15:01,769
yeah open shet the question was logging

00:14:59,279 --> 00:15:07,319
shared logging and open shift does

00:15:01,769 --> 00:15:10,199
provide for itself a elq stack type of

00:15:07,319 --> 00:15:12,120
thing but that is just for the sort of

00:15:10,199 --> 00:15:14,430
the infrastructure so it would like log

00:15:12,120 --> 00:15:15,600
that your pod was crashing or something

00:15:14,430 --> 00:15:18,029
like that it wouldn't be your

00:15:15,600 --> 00:15:21,269
application but you can instantiate your

00:15:18,029 --> 00:15:25,339
own logging stack obviously you would

00:15:21,269 --> 00:15:25,339
have to store that data somewhere

00:15:45,999 --> 00:15:52,310
okay so the question is is the is the

00:15:49,040 --> 00:15:54,470
cluster manager view available we

00:15:52,310 --> 00:15:56,389
haven't talked about that but I don't

00:15:54,470 --> 00:15:59,779
see any reason why we wouldn't make that

00:15:56,389 --> 00:16:02,529
available or he seems good others

00:15:59,779 --> 00:16:02,529
question back there

00:16:02,660 --> 00:16:05,750
[Music]

00:16:08,350 --> 00:16:13,550
yeah so I've got a slide on on quota

00:16:11,029 --> 00:16:17,180
actually right right coming up so let me

00:16:13,550 --> 00:16:18,740
let me get to what so this is just

00:16:17,180 --> 00:16:22,009
briefly talking about access right now

00:16:18,740 --> 00:16:24,709
or what our plan is is to have a fast

00:16:22,009 --> 00:16:27,379
operator or an operator that syncs fast

00:16:24,709 --> 00:16:30,110
groups and we'll just add people to a

00:16:27,379 --> 00:16:31,730
fast group and then it'll just create

00:16:30,110 --> 00:16:34,670
your account or give you privileges to

00:16:31,730 --> 00:16:38,779
self provision right now that is not

00:16:34,670 --> 00:16:41,120
done yet so I would ask anyone to who it

00:16:38,779 --> 00:16:43,939
wants access let me know send me an

00:16:41,120 --> 00:16:45,470
email I will write a list and then after

00:16:43,939 --> 00:16:47,959
flock I will sit down and just add

00:16:45,470 --> 00:16:50,809
everybody and then you can log in we're

00:16:47,959 --> 00:16:54,319
using the Fedora IDP so it's it will use

00:16:50,809 --> 00:16:56,420
your Fedora credentials to log in and it

00:16:54,319 --> 00:17:00,500
will by default everyone will be a self

00:16:56,420 --> 00:17:02,540
managed or whatever it's a poor whatever

00:17:00,500 --> 00:17:05,020
that role is so you can create your own

00:17:02,540 --> 00:17:08,329
apps you could create your your own pods

00:17:05,020 --> 00:17:10,189
if you need for some reason if you want

00:17:08,329 --> 00:17:12,260
a shared app if you there's some app

00:17:10,189 --> 00:17:13,730
that you know multiple people are

00:17:12,260 --> 00:17:16,100
wanting to work on you don't want it in

00:17:13,730 --> 00:17:19,399
a particular your particular namespace

00:17:16,100 --> 00:17:22,039
something like that just talk to us and

00:17:19,399 --> 00:17:25,760
we can set that up fairly fairly easily

00:17:22,039 --> 00:17:27,289
or move an app after the fact if if need

00:17:25,760 --> 00:17:29,840
be

00:17:27,289 --> 00:17:32,870
we're hoping or I'm hoping to do more

00:17:29,840 --> 00:17:37,460
widespread access down the road like

00:17:32,870 --> 00:17:39,559
packager or QA or you know just open it

00:17:37,460 --> 00:17:44,230
up to all those groups and just you know

00:17:39,559 --> 00:17:44,230
see what what people want to use it for

00:17:44,470 --> 00:17:49,970
so quotas this is kind of the the

00:17:48,260 --> 00:17:53,120
lowball quota that we were thinking of

00:17:49,970 --> 00:17:55,440
but we could certainly change it it's

00:17:53,120 --> 00:17:58,789
five projects ten pods

00:17:55,440 --> 00:18:01,110
five volumes something like that

00:17:58,789 --> 00:18:03,210
like I said we're open to changing this

00:18:01,110 --> 00:18:05,580
it just depends on how many people are

00:18:03,210 --> 00:18:07,860
interested what kind of apps people are

00:18:05,580 --> 00:18:10,679
doing that kind of stuff

00:18:07,860 --> 00:18:24,090
we could also either look at bumping

00:18:10,679 --> 00:18:26,820
this totally or on-demand here right

00:18:24,090 --> 00:18:31,890
it's multi it's multi project these are

00:18:26,820 --> 00:18:43,590
multi project quotas so ya know it's ten

00:18:31,890 --> 00:18:45,270
pods total yeah right yeah we could we

00:18:43,590 --> 00:18:47,039
could put those restrictions in place

00:18:45,270 --> 00:18:50,400
but I was just gonna start out at least

00:18:47,039 --> 00:18:52,500
not doing that and just you know if

00:18:50,400 --> 00:18:54,750
somebody we reserve the right if you're

00:18:52,500 --> 00:18:58,860
disrupting things to destroy your app

00:18:54,750 --> 00:19:01,409
but hopefully people are good about that

00:18:58,860 --> 00:19:04,710
and just you know use as much resources

00:19:01,409 --> 00:19:12,000
as they actually need also I think the a

00:19:04,710 --> 00:19:14,730
lot of the well the CPU and some of the

00:19:12,000 --> 00:19:21,750
other resources are are kind of strange

00:19:14,730 --> 00:19:28,620
and OpenShift to deal with anyway so so

00:19:21,750 --> 00:19:31,049
the future I actually had got a Qbert C

00:19:28,620 --> 00:19:33,150
and v2 dot IO installed and I've been

00:19:31,049 --> 00:19:36,750
playing around with it for those not

00:19:33,150 --> 00:19:41,000
familiar Qbert is a way to use OpenShift

00:19:36,750 --> 00:19:44,010
to manage VMs instead of containers

00:19:41,000 --> 00:19:47,490
unfortunately I hit a bug in 2.0 that

00:19:44,010 --> 00:19:50,130
makes it not very useful for anyone so

00:19:47,490 --> 00:19:53,010
I'm hoping there's a bug fix release out

00:19:50,130 --> 00:19:55,650
soon that will fix that as soon as a

00:19:53,010 --> 00:19:58,679
that's useful enough to where we can we

00:19:55,650 --> 00:20:01,650
can use it I'm going to try and move all

00:19:58,679 --> 00:20:04,620
the stuff from our old cloud off so that

00:20:01,650 --> 00:20:06,330
we can decommission it and most of those

00:20:04,620 --> 00:20:08,850
things don't need a whole lot they need

00:20:06,330 --> 00:20:13,020
you know SSH access

00:20:08,850 --> 00:20:14,520
or at web access things like that so as

00:20:13,020 --> 00:20:17,520
soon as they fix the The Masquerade

00:20:14,520 --> 00:20:30,270
issue that I hit hopefully we can move

00:20:17,520 --> 00:20:33,300
those yeah Neil I don't know if it does

00:20:30,270 --> 00:20:36,810
nested or not but basically what it does

00:20:33,300 --> 00:20:39,600
is it creates a a pod that runs libvirt

00:20:36,810 --> 00:20:42,240
and runs your VM with the definition

00:20:39,600 --> 00:20:44,790
that you gave it so it may be possible

00:20:42,240 --> 00:20:48,750
to just to define that in the in the

00:20:44,790 --> 00:20:51,140
config I don't know yeah yeah I'm not

00:20:48,750 --> 00:20:51,140
sure

00:20:59,909 --> 00:21:04,179
right I think the only thing that

00:21:02,350 --> 00:21:06,070
prevents that is you may need to get

00:21:04,179 --> 00:21:10,500
permissions to the KB and device or

00:21:06,070 --> 00:21:10,500
something like that yes yeah right right

00:21:10,559 --> 00:21:28,929
yeah yeah right right

00:21:25,090 --> 00:21:31,330
and it's the VM stuff is very flexible -

00:21:28,929 --> 00:21:33,010
there's different sizes and you can you

00:21:31,330 --> 00:21:34,510
could pick your image and you can say

00:21:33,010 --> 00:21:37,029
what the storage is that you want

00:21:34,510 --> 00:21:40,270
associated with it and blah blah blah

00:21:37,029 --> 00:21:45,070
you can use cloud in it etc if you

00:21:40,270 --> 00:21:47,049
really want wide availability as I was

00:21:45,070 --> 00:21:49,720
saying earlier I hope to open this to

00:21:47,049 --> 00:21:52,120
like some general Fedora groups so we

00:21:49,720 --> 00:21:56,320
can get people just testing it out and

00:21:52,120 --> 00:21:58,600
and playing with their apps so this is

00:21:56,320 --> 00:22:00,370
something that we have discussed but we

00:21:58,600 --> 00:22:02,529
never came to a conclusion on and we

00:22:00,370 --> 00:22:04,419
probably need to figure out it's been

00:22:02,529 --> 00:22:08,049
suggested that we we have some kind of

00:22:04,419 --> 00:22:12,070
heartbeat or periodic check type thing

00:22:08,049 --> 00:22:15,390
so that we know you know if you start an

00:22:12,070 --> 00:22:18,370
app and you run it and then you leave

00:22:15,390 --> 00:22:20,770
that this app is you know not really

00:22:18,370 --> 00:22:23,529
maintained anymore nobody's using it etc

00:22:20,770 --> 00:22:26,260
etc but it's kind of difficult to know

00:22:23,529 --> 00:22:28,390
what the best way to do this is so if

00:22:26,260 --> 00:22:31,950
anyone has suggestions on on how we

00:22:28,390 --> 00:22:31,950
should do this we're all ears

00:23:04,800 --> 00:23:22,270
yeah that's right for further recording

00:23:20,470 --> 00:23:24,730
the the suggestion is that we leverage

00:23:22,270 --> 00:23:29,400
the alert manager built-in to open shift

00:23:24,730 --> 00:23:32,530
to require app owners to do something or

00:23:29,400 --> 00:23:33,490
prove that they still exist periodically

00:23:32,530 --> 00:23:48,000
yeah that's a good idea

00:23:33,490 --> 00:23:50,530
that's yeah I mean we thought about

00:23:48,000 --> 00:23:55,930
looking to see if it have you traffic or

00:23:50,530 --> 00:23:58,000
you know mailing the app owner but again

00:23:55,930 --> 00:24:00,970
we want to avoid any kind of like manual

00:23:58,000 --> 00:24:02,710
stuff I don't want to oh it's six months

00:24:00,970 --> 00:24:20,590
I've got to go through these 50 apps and

00:24:02,710 --> 00:24:23,500
mail these people no bad here well the

00:24:20,590 --> 00:24:25,510
the the kind of the top level

00:24:23,500 --> 00:24:28,690
requirement there is that it's Fedora

00:24:25,510 --> 00:24:31,920
related so people should not run their

00:24:28,690 --> 00:24:50,770
personal email server no crypto mining

00:24:31,920 --> 00:24:53,590
no you know none of that stuff so no so

00:24:50,770 --> 00:24:56,740
here's some links there's our wiki page

00:24:53,590 --> 00:24:59,590
with more information we also have a

00:24:56,740 --> 00:25:01,030
hackfest Sunday morning so if you want

00:24:59,590 --> 00:25:03,040
to catch me and ask me questions about

00:25:01,030 --> 00:25:06,640
it or say that you're interested in want

00:25:03,040 --> 00:25:08,980
to login just you could definitely find

00:25:06,640 --> 00:25:11,650
me there and if you have any ideas or

00:25:08,980 --> 00:25:13,929
feedback or whatever the fedora Emperor

00:25:11,650 --> 00:25:15,460
list would be the best place or tickets

00:25:13,929 --> 00:25:16,100
if there's there's something you want to

00:25:15,460 --> 00:25:27,200
change

00:25:16,100 --> 00:25:31,610
yes yes actually that's a good point we

00:25:27,200 --> 00:25:33,980
we have set up the so OpenShift for has

00:25:31,610 --> 00:25:37,610
operators that can do all kinds of fun

00:25:33,980 --> 00:25:39,950
things and we've we've set up a SSL cert

00:25:37,610 --> 00:25:41,840
operator so it's actually got let's

00:25:39,950 --> 00:25:45,049
encrypt certs for all of its stuff and

00:25:41,840 --> 00:25:47,630
any application that wants to be under

00:25:45,049 --> 00:25:49,970
that domain you know apps iOS not fedora

00:25:47,630 --> 00:25:52,850
and for cloud whatever will just be

00:25:49,970 --> 00:25:54,559
under those those certs if you're doing

00:25:52,850 --> 00:25:56,840
a VM or you're doing something with an

00:25:54,559 --> 00:25:58,700
external IP or something like that you

00:25:56,840 --> 00:26:00,320
can actually call that operator in your

00:25:58,700 --> 00:26:03,380
app you could say hey I want to TLS

00:26:00,320 --> 00:26:06,620
search for this route and it will it'll

00:26:03,380 --> 00:26:09,320
handle it it'll get the cert renew it

00:26:06,620 --> 00:26:17,390
keep make sure everything's great so

00:26:09,320 --> 00:26:20,510
yeah operators are awesome right right

00:26:17,390 --> 00:26:23,270
now it's a flat domain so it's it's the

00:26:20,510 --> 00:26:27,140
typical or the top part of it is OS dot

00:26:23,270 --> 00:26:29,690
fedora and for cloud dot org and so

00:26:27,140 --> 00:26:33,260
there's apps and then username and

00:26:29,690 --> 00:26:35,809
projects on top of that so it is kind of

00:26:33,260 --> 00:26:38,120
gets kind of unwieldy but if there's a

00:26:35,809 --> 00:26:41,840
demand for different domains we could

00:26:38,120 --> 00:26:45,380
look at that but I don't know if that

00:26:41,840 --> 00:26:47,330
matters that much but there are there

00:26:45,380 --> 00:26:50,539
are external IPs that will probably be

00:26:47,330 --> 00:26:54,530
get used with the VMS so we could put

00:26:50,539 --> 00:26:56,600
things that want other other domains on

00:26:54,530 --> 00:27:04,110
some other external IP and do a

00:26:56,600 --> 00:27:09,840
different before

00:27:04,110 --> 00:27:12,059
yep yep yep absolutely yeah and if there

00:27:09,840 --> 00:27:14,549
was like say there's a popular app that

00:27:12,059 --> 00:27:39,389
a lot of people use might want a

00:27:14,549 --> 00:27:41,190
different easier to use URL but yeah so

00:27:39,389 --> 00:27:43,169
actually we have three clusters because

00:27:41,190 --> 00:27:47,100
we have a staging cluster a production

00:27:43,169 --> 00:27:50,669
cluster and then this cluster but but

00:27:47,100 --> 00:27:52,710
yeah it depends really our staging in

00:27:50,669 --> 00:27:54,269
our production clusters we're keeping

00:27:52,710 --> 00:27:56,880
four things that we're actually

00:27:54,269 --> 00:27:59,970
maintaining as a team the infrastructure

00:27:56,880 --> 00:28:01,860
team and the community one is for things

00:27:59,970 --> 00:28:04,590
that so it's a matter who's maintaining

00:28:01,860 --> 00:28:08,539
or who's who's the upstream for it or

00:28:04,590 --> 00:28:10,980
who you know that sort of thing so if

00:28:08,539 --> 00:28:12,179
yeah it's very easy to move it would be

00:28:10,980 --> 00:28:15,470
very easy to move stuff through

00:28:12,179 --> 00:28:15,470
especially if it's stateless

00:28:31,430 --> 00:28:36,780
right right Edie and like I said at the

00:28:34,440 --> 00:28:39,780
beginning I mean our vision for this is

00:28:36,780 --> 00:28:43,710
that it it pretty much self manages

00:28:39,780 --> 00:28:46,230
itself and barring you know some sort of

00:28:43,710 --> 00:28:48,180
hardware catastrophe it's just gonna run

00:28:46,230 --> 00:28:50,820
we're not going to it doesn't need

00:28:48,180 --> 00:28:58,080
updates it doesn't need or it updates

00:28:50,820 --> 00:29:01,940
itself so yeah I am it I am lying with

00:28:58,080 --> 00:29:01,940
that yes it does need updates but

00:29:10,360 --> 00:29:15,860
so yeah it's running for 1/8 right now

00:29:13,670 --> 00:29:21,290
and actually do we have a little time

00:29:15,860 --> 00:29:23,570
left maybe a minute or two for one nine

00:29:21,290 --> 00:29:24,770
is out and it's pending so I could click

00:29:23,570 --> 00:29:31,160
the little button that says update

00:29:24,770 --> 00:29:57,890
cluster if you want yeah which of course

00:29:31,160 --> 00:30:09,580
it will since I'm the network might be

00:29:57,890 --> 00:30:09,580
not too great here though it just

00:30:27,450 --> 00:30:41,570
see they're cluster update is available

00:30:31,050 --> 00:30:43,780
update now it's not done yet

00:30:41,570 --> 00:30:47,000
[Laughter]

00:30:43,780 --> 00:30:47,000
[Music]

00:30:48,179 --> 00:30:56,040
like updates the Red Hat core OS on all

00:30:52,750 --> 00:30:58,480
of the nodes reboots them all and

00:30:56,040 --> 00:31:01,210
updates all the containers of all the

00:30:58,480 --> 00:31:03,910
stuff that is the cluster so it like

00:31:01,210 --> 00:31:05,950
pulls the new containers does stuff

00:31:03,910 --> 00:31:10,960
reboots it make sure that comes back up

00:31:05,950 --> 00:31:13,390
does the next one etc etc right it

00:31:10,960 --> 00:31:15,340
evacuates all the pods off of the nodes

00:31:13,390 --> 00:31:19,140
as it reboots them and moves them back

00:31:15,340 --> 00:31:19,140
just in the background

00:31:26,200 --> 00:31:29,519
[Music]

00:31:37,259 --> 00:31:41,919
right so the question is do we have any

00:31:40,539 --> 00:31:44,919
particular way of deploying the

00:31:41,919 --> 00:31:46,779
production openshift stuff so that you

00:31:44,919 --> 00:31:49,779
could look to doing that later and the

00:31:46,779 --> 00:31:52,929
in the future yeah we do and its really

00:31:49,779 --> 00:31:54,629
opinionated so it is all in ansible it's

00:31:52,929 --> 00:31:57,519
in our ansible repo you can look at it

00:31:54,629 --> 00:31:59,559
the way it works is it does everything

00:31:57,519 --> 00:32:01,419
in ansible so ansible is responsible for

00:31:59,559 --> 00:32:05,499
creating all the the project all the

00:32:01,419 --> 00:32:07,359
objects everything so if the cluster

00:32:05,499 --> 00:32:10,019
burned to the ground tomorrow we could

00:32:07,359 --> 00:32:12,340
run ansible the and the app would be

00:32:10,019 --> 00:32:19,299
redeployed if it did not have any

00:32:12,340 --> 00:32:22,809
persistent data we we don't store ammo

00:32:19,299 --> 00:32:24,909
files we use ansible to to make the

00:32:22,809 --> 00:32:27,190
individual objects so if you look it's

00:32:24,909 --> 00:32:30,039
it's not that it's not the amel it's

00:32:27,190 --> 00:32:32,649
like the describes how the gamal should

00:32:30,039 --> 00:32:35,259
be yes i don't know how to describe that

00:32:32,649 --> 00:32:42,999
but you can look at examples on our on

00:32:35,259 --> 00:32:45,220
our ansible repo those are not but those

00:32:42,999 --> 00:32:46,779
are not the bra if you dump that out of

00:32:45,220 --> 00:32:49,570
OpenShift that's not what you would get

00:32:46,779 --> 00:32:54,609
you you wouldn't get you know ansible

00:32:49,570 --> 00:32:56,759
roll this with this yeah right right

00:32:54,609 --> 00:32:56,759
right

00:33:02,820 --> 00:33:06,340
on our production cluster that's not

00:33:05,799 --> 00:33:08,830
true

00:33:06,340 --> 00:33:11,559
a planners have only permission to their

00:33:08,830 --> 00:33:14,470
app and ansible runs the play books and

00:33:11,559 --> 00:33:16,929
everything they do not have for this one

00:33:14,470 --> 00:33:19,090
yes absolutely you you can use Oh see

00:33:16,929 --> 00:33:21,130
you can define your app whatever you

00:33:19,090 --> 00:33:23,200
want to do there but again it's up to

00:33:21,130 --> 00:33:25,020
you to back up that application or

00:33:23,200 --> 00:33:28,059
manage it however you want to manage it

00:33:25,020 --> 00:33:31,030
you know I'm I would suggest to get repo

00:33:28,059 --> 00:33:33,280
and you know have some some management

00:33:31,030 --> 00:33:35,169
there but if that's not what you want to

00:33:33,280 --> 00:33:39,960
do that's fine but you know if something

00:33:35,169 --> 00:33:45,750
happens then you'll have to recreate it

00:33:39,960 --> 00:33:45,750
yeah yeah

00:33:58,770 --> 00:34:04,300
yeah I believe the registry should be

00:34:01,360 --> 00:34:06,580
available yeah so again the the thought

00:34:04,300 --> 00:34:09,040
here is also that anything in here is

00:34:06,580 --> 00:34:16,179
open-source you should now never put

00:34:09,040 --> 00:34:21,580
anything in this that is not what is

00:34:16,179 --> 00:34:23,380
that eighteen percent complete so if you

00:34:21,580 --> 00:34:26,169
want to look at more detail you can look

00:34:23,380 --> 00:34:35,260
at the cluster operators here and it'll

00:34:26,169 --> 00:34:40,050
actually show you eventually it takes

00:34:35,260 --> 00:34:40,050
like twenty minutes or something usually

00:34:42,540 --> 00:34:52,720
three masters and eight workers eight

00:34:45,400 --> 00:34:54,760
nodes right yeah it does them I think

00:34:52,720 --> 00:35:07,600
one at a time so you could see what what

00:34:54,760 --> 00:35:09,610
things are already four one nine so it's

00:35:07,600 --> 00:35:10,660
pretty cool and it's pretty nice that I

00:35:09,610 --> 00:35:13,090
don't have to do anything

00:35:10,660 --> 00:35:15,580
our production clusters is open shift

00:35:13,090 --> 00:35:19,260
three and there you have to end their

00:35:15,580 --> 00:35:22,240
realm nodes not core OS so you have to

00:35:19,260 --> 00:35:33,760
evacuate them update them reboot them

00:35:22,240 --> 00:35:38,470
run ansible open shift ansible it's

00:35:33,760 --> 00:35:42,720
actually a dell what's to del FX boxes

00:35:38,470 --> 00:35:46,630
they're a blade type system it's just

00:35:42,720 --> 00:35:48,790
yeah yeah it's it's in our cloud network

00:35:46,630 --> 00:35:51,220
though at the same network that our our

00:35:48,790 --> 00:35:53,830
private cloud is in which is completely

00:35:51,220 --> 00:35:56,170
separated from anything else there it

00:35:53,830 --> 00:36:00,490
it's like directly connected to the

00:35:56,170 --> 00:36:03,070
outside so that section of the network

00:36:00,490 --> 00:36:05,620
could not conceivably it's physically

00:36:03,070 --> 00:36:06,430
impossible for that network to get back

00:36:05,620 --> 00:36:08,829
into the inside

00:36:06,430 --> 00:36:12,910
which also means if you need resources

00:36:08,829 --> 00:36:15,760
from from Fedora project your requests

00:36:12,910 --> 00:36:19,539
go out and then back in and use the

00:36:15,760 --> 00:36:22,990
public IP space so there's no there's no

00:36:19,539 --> 00:36:24,549
like back entrance to like Kouji

00:36:22,990 --> 00:36:26,950
packages or anything there but you can

00:36:24,549 --> 00:36:34,059
go around to the public IP and and

00:36:26,950 --> 00:36:38,010
access that stuff so yeah yeah let's

00:36:34,059 --> 00:36:38,010
wrap this up any other questions

00:36:39,440 --> 00:36:42,959

YouTube URL: https://www.youtube.com/watch?v=phCHilTEQb4


