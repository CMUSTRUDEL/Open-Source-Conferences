Title: An objective Minimization Objective update - Adam Samalik - Flock 2019
Publication date: 2019-09-02
Playlist: Flock 2019
Description: 
	Let's make things smaller! This is an update to the new Minimization Objective in Fedora. We'll discuss some of the early discoveries, the next steps for the short-term, and some longer-term vision.

--
Recordings of talks at Flock are a community effort.  Unfortunately not everything works perfectly every time. If you're interested in helping us improve, let us know.
Captions: 
	00:00:03,959 --> 00:00:09,209
my name is Adam and this is a

00:00:06,029 --> 00:00:11,910
minimization talk and so I was

00:00:09,209 --> 00:00:13,650
minimizing my system and I minimize it

00:00:11,910 --> 00:00:15,450
so much that there were no phones left

00:00:13,650 --> 00:00:21,060
so everything is handwritten on the

00:00:15,450 --> 00:00:22,980
slides so one of the points points I

00:00:21,060 --> 00:00:26,669
want to make here is that smaller might

00:00:22,980 --> 00:00:27,989
not necessarily mean better so if you

00:00:26,669 --> 00:00:29,939
minimize a system that there are no

00:00:27,989 --> 00:00:33,180
phones left is it better or is it worse

00:00:29,939 --> 00:00:35,460
I don't think it's better so um that's

00:00:33,180 --> 00:00:36,719
just something to keep in mind but let's

00:00:35,460 --> 00:00:39,539
just start with the problem so what's

00:00:36,719 --> 00:00:41,670
the problem with with like I'm trying to

00:00:39,539 --> 00:00:44,070
solve so the promise that things are

00:00:41,670 --> 00:00:45,929
getting bigger and that means that some

00:00:44,070 --> 00:00:48,719
container images are getting bigger and

00:00:45,929 --> 00:00:51,749
some applications or runtimes and their

00:00:48,719 --> 00:00:55,170
dependencies are also getting bigger and

00:00:51,749 --> 00:01:00,179
that's just a fact that we have and why

00:00:55,170 --> 00:01:01,829
is it problem so they have like four

00:01:00,179 --> 00:01:03,780
things I've identified maintenance

00:01:01,829 --> 00:01:06,510
footprint so it's like more things you

00:01:03,780 --> 00:01:08,190
need to maintain more things right um

00:01:06,510 --> 00:01:11,730
the attack vector is also a thing

00:01:08,190 --> 00:01:15,000
because um many dependencies on your

00:01:11,730 --> 00:01:17,850
system there may be more about

00:01:15,000 --> 00:01:20,130
vulnerabilities it's less flexible

00:01:17,850 --> 00:01:22,530
because things can overlap and what I

00:01:20,130 --> 00:01:24,390
learned just today that some IOT devices

00:01:22,530 --> 00:01:27,120
that have very low miss connection

00:01:24,390 --> 00:01:29,790
getting updates there might take time so

00:01:27,120 --> 00:01:33,300
minimizing is also relevant in that use

00:01:29,790 --> 00:01:36,690
case a lot but as I said bigger it's not

00:01:33,300 --> 00:01:39,830
necessarily always bad and I have some

00:01:36,690 --> 00:01:42,450
examples here so I on the Left I have

00:01:39,830 --> 00:01:44,160
small base image which is like you maybe

00:01:42,450 --> 00:01:46,320
container image and some applications on

00:01:44,160 --> 00:01:49,200
it and on the right I have bigger base

00:01:46,320 --> 00:01:50,940
image and smaller applications and if

00:01:49,200 --> 00:01:55,160
you have bigger base image and if you

00:01:50,940 --> 00:01:57,690
have in the cloud and on a bigger scale

00:01:55,160 --> 00:01:59,640
the base image will share things with

00:01:57,690 --> 00:02:02,280
for all the images so like the total

00:01:59,640 --> 00:02:05,250
size will be smaller so bigger is not

00:02:02,280 --> 00:02:10,019
necessarily better in this in this

00:02:05,250 --> 00:02:13,170
example but on the other hand if I have

00:02:10,019 --> 00:02:14,909
a smaller base based less things so it's

00:02:13,170 --> 00:02:17,010
more flexible because whatever I put on

00:02:14,909 --> 00:02:17,610
this good work because I can track with

00:02:17,010 --> 00:02:19,650
a pianist

00:02:17,610 --> 00:02:22,290
but in the other one I would have to

00:02:19,650 --> 00:02:24,870
replace packages and so it's not always

00:02:22,290 --> 00:02:26,550
the case um if I something like this if

00:02:24,870 --> 00:02:28,980
I have like the base in the applications

00:02:26,550 --> 00:02:32,040
and there's some space in the middle um

00:02:28,980 --> 00:02:33,900
what to do like so at the bottom right

00:02:32,040 --> 00:02:36,210
but their species like everyone once

00:02:33,900 --> 00:02:37,680
geo-leap see for example in the middle

00:02:36,210 --> 00:02:39,900
there might be things that someone wants

00:02:37,680 --> 00:02:43,020
and then like just the application and I

00:02:39,900 --> 00:02:45,420
could just make a cut somewhere but

00:02:43,020 --> 00:02:48,570
that's not really a minimization like

00:02:45,420 --> 00:02:50,130
that's not optimizing anything um this

00:02:48,570 --> 00:02:53,130
is a very different conversation a very

00:02:50,130 --> 00:02:54,930
different decision and this music is

00:02:53,130 --> 00:03:00,840
something I don't want to really really

00:02:54,930 --> 00:03:03,480
solve so about smaller images I'm this

00:03:00,840 --> 00:03:06,270
effort will be enabling building smaller

00:03:03,480 --> 00:03:08,010
images by optimizing and by making

00:03:06,270 --> 00:03:10,020
things smaller it will be informing

00:03:08,010 --> 00:03:11,970
decisions to make small images we can

00:03:10,020 --> 00:03:14,490
say this package for example is very

00:03:11,970 --> 00:03:16,550
popular but this other one is not but we

00:03:14,490 --> 00:03:20,040
won't be defining smaller images so

00:03:16,550 --> 00:03:22,790
these are not very focus here so so

00:03:20,040 --> 00:03:25,170
what's the focus what's the goal so

00:03:22,790 --> 00:03:26,690
because it's really to optimize use

00:03:25,170 --> 00:03:29,430
cases and by use cases I mean

00:03:26,690 --> 00:03:32,790
applications in runtime deploy in

00:03:29,430 --> 00:03:35,010
certain contexts so like web server in a

00:03:32,790 --> 00:03:38,100
container or something whatever is

00:03:35,010 --> 00:03:42,239
useful and we can then focus and try to

00:03:38,100 --> 00:03:45,930
make it try to minimize but keep it

00:03:42,239 --> 00:03:48,650
useful so we can look at multiple things

00:03:45,930 --> 00:03:50,970
like dependencies features or

00:03:48,650 --> 00:03:54,510
alternatives and all just a mistake but

00:03:50,970 --> 00:03:56,910
that's what all of that is so if I have

00:03:54,510 --> 00:03:59,100
an application and best lot of

00:03:56,910 --> 00:04:00,900
dependencies right and I it can happen

00:03:59,100 --> 00:04:03,120
that something was just cracking by

00:04:00,900 --> 00:04:05,190
mistake or maybe there was something

00:04:03,120 --> 00:04:07,860
forgotten and just direct too many

00:04:05,190 --> 00:04:09,959
things so I can just cut it in half and

00:04:07,860 --> 00:04:12,060
maybe it'll continue working so that's

00:04:09,959 --> 00:04:13,950
like the easiest thing that we can do

00:04:12,060 --> 00:04:17,250
and I'm sure there will be some of these

00:04:13,950 --> 00:04:19,140
some of these existing um what we can

00:04:17,250 --> 00:04:21,630
also do is that I have an application

00:04:19,140 --> 00:04:23,790
and maybe for my use case I don't need

00:04:21,630 --> 00:04:26,760
all the features of the application so I

00:04:23,790 --> 00:04:29,340
can just cut so the application out and

00:04:26,760 --> 00:04:30,810
it might minimize things that's an

00:04:29,340 --> 00:04:33,810
approach as well

00:04:30,810 --> 00:04:37,650
or and this is what's what might be

00:04:33,810 --> 00:04:40,260
happening a lot is that if I need

00:04:37,650 --> 00:04:41,400
certain functionality there might be a

00:04:40,260 --> 00:04:44,190
different provider of the same

00:04:41,400 --> 00:04:46,290
functionality in the repos so I might be

00:04:44,190 --> 00:04:48,419
able to cut like those I don't know 17

00:04:46,290 --> 00:04:51,330
packages and replace it with other two

00:04:48,419 --> 00:04:52,980
and that might happen as well and with

00:04:51,330 --> 00:04:55,590
all of these data we might be able to

00:04:52,980 --> 00:04:58,169
look at things in bigger context so I

00:04:55,590 --> 00:05:01,680
can have a look at multiple multiple

00:04:58,169 --> 00:05:04,590
applications or use cases and see make

00:05:01,680 --> 00:05:06,000
some statistics so what's what's in

00:05:04,590 --> 00:05:08,610
debate what what could be in the base

00:05:06,000 --> 00:05:10,860
and I can use that to I can use these

00:05:08,610 --> 00:05:12,300
data to give it to the people who

00:05:10,860 --> 00:05:14,460
actually care about containers or

00:05:12,300 --> 00:05:17,430
actually will be doing smaller images so

00:05:14,460 --> 00:05:20,729
like I can minimize things and get some

00:05:17,430 --> 00:05:26,520
data from it um so before this objective

00:05:20,729 --> 00:05:32,100
started there were already people doing

00:05:26,520 --> 00:05:35,640
minimization things and how can we help

00:05:32,100 --> 00:05:37,890
them so because this is nothing new like

00:05:35,640 --> 00:05:40,289
there are already people doing this so

00:05:37,890 --> 00:05:45,419
how can we help and how can we make it

00:05:40,289 --> 00:05:49,260
on baby on a bigger scale or with bigger

00:05:45,419 --> 00:05:52,560
impact so first thing is making smaller

00:05:49,260 --> 00:05:55,470
versus keeping smaller and I think we

00:05:52,560 --> 00:05:57,300
need to do bit over both but just like

00:05:55,470 --> 00:05:58,770
doing there and minimizing things and

00:05:57,300 --> 00:06:00,389
hoping they will stay small that would

00:05:58,770 --> 00:06:03,300
happen so we need to have some kind of

00:06:00,389 --> 00:06:05,639
balance between these two um the same

00:06:03,300 --> 00:06:08,940
with doing versus automating I can do

00:06:05,639 --> 00:06:11,789
something or I can automate whatever is

00:06:08,940 --> 00:06:13,229
possible again I can't just automate I

00:06:11,789 --> 00:06:17,220
need to be doing something first so I

00:06:13,229 --> 00:06:19,560
know what to automate so but a tools and

00:06:17,220 --> 00:06:23,030
automation will be one of the focus here

00:06:19,560 --> 00:06:25,590
and that's the new thing and I have

00:06:23,030 --> 00:06:31,830
something about graphs so these are like

00:06:25,590 --> 00:06:34,289
dependency graphs so we can look at the

00:06:31,830 --> 00:06:36,120
repos and see all the dependency

00:06:34,289 --> 00:06:39,390
relations you know in Africa repo for

00:06:36,120 --> 00:06:41,220
example or I can have a look at a

00:06:39,390 --> 00:06:43,460
specific installation the specific use

00:06:41,220 --> 00:06:48,380
case so let's have a look at both

00:06:43,460 --> 00:06:49,910
this is the federal repos it took three

00:06:48,380 --> 00:06:52,280
hours to generate is a hundred and

00:06:49,910 --> 00:06:56,180
thirty megabytes SVG file with 1.6

00:06:52,280 --> 00:06:59,270
million lines it took me like five

00:06:56,180 --> 00:07:01,520
minutes to load in a browser and this is

00:06:59,270 --> 00:07:03,800
not good for humans and not good for

00:07:01,520 --> 00:07:05,480
computers this is like really hard to

00:07:03,800 --> 00:07:08,330
process already hard to work with so I

00:07:05,480 --> 00:07:10,220
don't think this will be the it's nice

00:07:08,330 --> 00:07:12,080
to look at it's interesting but I don't

00:07:10,220 --> 00:07:15,800
think it's useful so that's what what

00:07:12,080 --> 00:07:18,110
we're gonna do so let's have a look at

00:07:15,800 --> 00:07:19,820
the installations instead and maybe we

00:07:18,110 --> 00:07:24,140
can come some information from the repos

00:07:19,820 --> 00:07:26,540
later and well I have a demo I managed

00:07:24,140 --> 00:07:29,080
to prototype a tool that can visualize

00:07:26,540 --> 00:07:31,730
some dependencies

00:07:29,080 --> 00:07:33,440
it's an early prototype but it might be

00:07:31,730 --> 00:07:38,090
useful even now and we can extend it

00:07:33,440 --> 00:07:43,220
with things so this is demo umm so I'm

00:07:38,090 --> 00:07:46,730
opening a terminal and the tool is just

00:07:43,220 --> 00:07:48,830
called show me and I can do to help and

00:07:46,730 --> 00:07:52,610
basically what you need to do is show me

00:07:48,830 --> 00:07:54,560
what how and where so let's have a look

00:07:52,610 --> 00:07:56,750
at the filter up based image container

00:07:54,560 --> 00:08:00,430
base image I just say but show me

00:07:56,750 --> 00:08:05,060
federal authority graph and I say where

00:08:00,430 --> 00:08:10,040
that'll be an SVG file it's just gross

00:08:05,060 --> 00:08:13,580
this is things and there we go and I can

00:08:10,040 --> 00:08:16,030
open the SVG file in a Firefox for

00:08:13,580 --> 00:08:16,030
example

00:08:21,210 --> 00:08:24,860
and this is it this is the Federer 30

00:08:23,340 --> 00:08:27,360
base image um

00:08:24,860 --> 00:08:29,220
it's not ideal but it's much more

00:08:27,360 --> 00:08:33,180
readable right and we can see Julius II

00:08:29,220 --> 00:08:35,520
in the middle so what I can do is I can

00:08:33,180 --> 00:08:37,320
click on any of the nodes and see the

00:08:35,520 --> 00:08:39,599
relations between the packages and I

00:08:37,320 --> 00:08:42,599
have like red arrows that means that and

00:08:39,599 --> 00:08:44,730
I can be the package from here but the

00:08:42,599 --> 00:08:46,730
RPM build lips require a sload of

00:08:44,730 --> 00:08:49,709
packages and it's required by one and

00:08:46,730 --> 00:08:52,290
what I can use it to is just to do a

00:08:49,709 --> 00:08:54,570
quick inspection of like what's going on

00:08:52,290 --> 00:08:58,800
so if I want to trace down the package

00:08:54,570 --> 00:09:00,540
the RPM build lives so I can follow the

00:08:58,800 --> 00:09:04,050
blue line and it's just required by

00:09:00,540 --> 00:09:08,220
Python 3 rpm which yes again just one

00:09:04,050 --> 00:09:10,170
line required by Python 3 DNF I click on

00:09:08,220 --> 00:09:12,420
that again one line is like it's been

00:09:10,170 --> 00:09:16,080
chosen for a demo required by DN F and

00:09:12,420 --> 00:09:18,600
so on and this can give me like a very

00:09:16,080 --> 00:09:21,380
quick overview why something is is in

00:09:18,600 --> 00:09:21,380
the installation

00:09:29,360 --> 00:09:34,670
so yeah this is just a simple view of of

00:09:32,989 --> 00:09:36,199
the dependencies I can click on Geneva

00:09:34,670 --> 00:09:38,989
see because everyone wants to see it I

00:09:36,199 --> 00:09:41,959
think everything on the screen requires

00:09:38,989 --> 00:09:46,339
Chile PC except one package somewhere

00:09:41,959 --> 00:09:49,220
there um all right so so that was a vu

00:09:46,339 --> 00:09:50,749
on on a on a specific image but again

00:09:49,220 --> 00:09:53,899
that was just too many things and maybe

00:09:50,749 --> 00:09:56,480
not useful like for for looking at it so

00:09:53,899 --> 00:09:58,819
let's have a look at httpd on top of the

00:09:56,480 --> 00:10:03,290
base image so first of all I'm gonna do

00:09:58,819 --> 00:10:06,949
um I'll build an HTTP D container so

00:10:03,290 --> 00:10:09,889
I'll just say that I want to use the 30

00:10:06,949 --> 00:10:13,509
but as a base image only installations

00:10:09,889 --> 00:10:13,509
appearing and let's see what happens

00:10:19,350 --> 00:10:22,910
blow the container

00:10:29,780 --> 00:10:37,580
and there we go and I can just use the

00:10:33,200 --> 00:10:39,170
same command actually no I won't use

00:10:37,580 --> 00:10:41,690
exact same command I will use this

00:10:39,170 --> 00:10:43,490
specific option and I will say I want to

00:10:41,690 --> 00:10:45,950
define package group and I'm going to

00:10:43,490 --> 00:10:48,470
merge the whole base image into a single

00:10:45,950 --> 00:10:55,540
note that a little bit better view so I

00:10:48,470 --> 00:10:55,540
can do show me httpd at 30 graph

00:11:01,209 --> 00:11:07,230
and I'll define the group I called it

00:11:03,910 --> 00:11:07,230
for the authority based image

00:11:12,810 --> 00:11:20,610
and it's from the container okay again

00:11:17,790 --> 00:11:23,450
engine Rises VG file I can open it with

00:11:20,610 --> 00:11:23,450
a Firefox

00:11:29,250 --> 00:11:36,209
and there we go this is much simple view

00:11:31,379 --> 00:11:39,060
and if I click on the federal base image

00:11:36,209 --> 00:11:40,649
I can see much simpler view um maybe in

00:11:39,060 --> 00:11:42,750
this simple view I don't need like all

00:11:40,649 --> 00:11:46,319
the clustering in there and I can have a

00:11:42,750 --> 00:11:49,319
different one so let me change that to a

00:11:46,319 --> 00:11:52,259
directed graph instead of home I see

00:11:49,319 --> 00:11:57,480
thing so I just changed this graph to

00:11:52,259 --> 00:12:04,230
direct it and this will be much better

00:11:57,480 --> 00:12:05,910
view open your Firefox and I think this

00:12:04,230 --> 00:12:08,129
is much more readable just to see on

00:12:05,910 --> 00:12:10,680
like what HTTP it looks like on top of

00:12:08,129 --> 00:12:12,870
the base image um I'm sure some of you

00:12:10,680 --> 00:12:14,550
can see a bug there are two packages on

00:12:12,870 --> 00:12:17,009
the left that are not pulled in by

00:12:14,550 --> 00:12:22,350
anything that's because this doesn't

00:12:17,009 --> 00:12:24,209
show any weak dependencies but that'd be

00:12:22,350 --> 00:12:28,350
quite easy to fix and they're poked in

00:12:24,209 --> 00:12:33,149
by the other package so that's how I can

00:12:28,350 --> 00:12:35,699
basically visualize this it can work

00:12:33,149 --> 00:12:39,660
with other things not just containers it

00:12:35,699 --> 00:12:41,670
can work with parts on your system even

00:12:39,660 --> 00:12:43,529
your own system so what I'm doing here

00:12:41,670 --> 00:12:46,019
is just I'm installing a package into an

00:12:43,529 --> 00:12:47,730
empty root and I'm going to visualize

00:12:46,019 --> 00:12:49,829
that and that's one more feature I'm

00:12:47,730 --> 00:12:57,389
going to show you um that was super fast

00:12:49,829 --> 00:13:00,240
I think video is great all right so I'll

00:12:57,389 --> 00:13:02,189
say show me and I can just do a path and

00:13:00,240 --> 00:13:04,259
it recognizes the path and shows the

00:13:02,189 --> 00:13:08,120
path and there is one new option I'm

00:13:04,259 --> 00:13:11,550
also using Easton is - - like size and

00:13:08,120 --> 00:13:15,209
it with every package it just also shows

00:13:11,550 --> 00:13:20,399
how big it is on the system which is

00:13:15,209 --> 00:13:25,790
useful to maybe see like if there's

00:13:20,399 --> 00:13:25,790
something big I should maybe focus on

00:13:25,940 --> 00:13:35,030
so that's the it's like little packages

00:13:28,820 --> 00:13:41,420
again it looks very similar ng loob see

00:13:35,030 --> 00:13:43,340
um alright so like in this I haven't

00:13:41,420 --> 00:13:45,500
minimized anything but maybe this

00:13:43,340 --> 00:13:48,440
tooling might be helpful to someone and

00:13:45,500 --> 00:13:51,050
probably not to use it in the in in the

00:13:48,440 --> 00:13:53,450
scenario as I was on image that has been

00:13:51,050 --> 00:13:56,270
already produced and might take days to

00:13:53,450 --> 00:13:58,670
to produce that feedback might not be

00:13:56,270 --> 00:14:03,050
that useful but maybe if we run it for

00:13:58,670 --> 00:14:05,540
in the filter CI or as part of the ating

00:14:03,050 --> 00:14:08,660
or whatever in fedora you might be able

00:14:05,540 --> 00:14:10,040
to generate that for builds that we want

00:14:08,660 --> 00:14:11,600
to focus on and we might be able to

00:14:10,040 --> 00:14:13,010
generate these graphs you might be able

00:14:11,600 --> 00:14:16,610
to generate um

00:14:13,010 --> 00:14:19,580
size changes over time and if the size

00:14:16,610 --> 00:14:21,680
goes if something goes up the threshold

00:14:19,580 --> 00:14:23,990
I can just do an alert and that's how we

00:14:21,680 --> 00:14:28,070
can maybe monitor and try to keep things

00:14:23,990 --> 00:14:30,200
smaller over time um but that was just

00:14:28,070 --> 00:14:32,990
like really abstract um I have enough

00:14:30,200 --> 00:14:37,370
roadmap as well so what's the plan for

00:14:32,990 --> 00:14:39,830
the future um I have four stages and the

00:14:37,370 --> 00:14:42,140
later two are a little bit fuzzy but the

00:14:39,830 --> 00:14:46,250
first is discovery so first we need to

00:14:42,140 --> 00:14:47,420
see what's going on and basically do

00:14:46,250 --> 00:14:50,750
discovery um

00:14:47,420 --> 00:14:52,490
experiments that's the next one and then

00:14:50,750 --> 00:14:53,870
I have stabilization and integration

00:14:52,490 --> 00:14:56,510
well we'll see what's gonna happen

00:14:53,870 --> 00:14:59,030
because the first will inform the other

00:14:56,510 --> 00:15:00,830
one etc so this is a timeline I have

00:14:59,030 --> 00:15:02,450
this is the probably most specific

00:15:00,830 --> 00:15:06,800
timeline right now we're in the

00:15:02,450 --> 00:15:09,650
discovery phase in August and what we

00:15:06,800 --> 00:15:12,020
need to do is to have some sort but more

00:15:09,650 --> 00:15:14,380
specific plan for the next phase so we

00:15:12,020 --> 00:15:16,820
can do actually some experiments but

00:15:14,380 --> 00:15:19,310
because we shouldn't just get random

00:15:16,820 --> 00:15:22,990
dependencies we need to know what to do

00:15:19,310 --> 00:15:25,130
that's why discovery first um if

00:15:22,990 --> 00:15:27,560
anything of this is interested for you

00:15:25,130 --> 00:15:29,210
um you can join the team

00:15:27,560 --> 00:15:31,880
we very welcome to join the team and a

00:15:29,210 --> 00:15:33,830
few people already did that if you

00:15:31,880 --> 00:15:35,510
searching for information you just open

00:15:33,830 --> 00:15:37,550
the federal documentation you can click

00:15:35,510 --> 00:15:39,080
on engineering teams click on

00:15:37,550 --> 00:15:41,890
minimization objective

00:15:39,080 --> 00:15:45,620
and there's all the info there as the

00:15:41,890 --> 00:15:48,529
actually objective page there's an

00:15:45,620 --> 00:15:51,170
action plan for most of the discovery

00:15:48,529 --> 00:15:52,850
phase or like should action plan have

00:15:51,170 --> 00:15:56,540
four focus areas there you can read

00:15:52,850 --> 00:15:58,579
about there's a team already ten people

00:15:56,540 --> 00:16:02,060
in the team interested in doing things

00:15:58,579 --> 00:16:04,910
over much about minimization and there's

00:16:02,060 --> 00:16:07,160
also link at the tool in the tools

00:16:04,910 --> 00:16:09,470
section and this space will be basically

00:16:07,160 --> 00:16:14,269
growing and having more information as

00:16:09,470 --> 00:16:16,779
we go there are some links and writing

00:16:14,269 --> 00:16:20,329
is right so sorry about that

00:16:16,779 --> 00:16:22,339
so that's the documentation which at on

00:16:20,329 --> 00:16:26,230
the federal level and this is our issue

00:16:22,339 --> 00:16:26,230
tracker and if you have any questions

00:16:36,410 --> 00:16:42,140
there's a space for policy change in for

00:16:39,380 --> 00:16:44,690
the right definitely yes um this already

00:16:42,140 --> 00:16:46,490
little policy about making making

00:16:44,690 --> 00:16:48,560
minimal things and it's more might be

00:16:46,490 --> 00:16:50,240
more about enforcing but I haven't seen

00:16:48,560 --> 00:16:52,130
all the policy and as definitely space

00:16:50,240 --> 00:16:55,070
it's not just yeah cutting things off

00:16:52,130 --> 00:16:56,870
but making sure that it's um

00:16:55,070 --> 00:17:02,240
it stays like over time so policy is

00:16:56,870 --> 00:17:03,980
definitely in scope yeah if it's run

00:17:02,240 --> 00:17:05,810
time or real time primarily a fine time

00:17:03,980 --> 00:17:10,760
because that's what matters for the

00:17:05,810 --> 00:17:15,640
installations but yeah basically that's

00:17:10,760 --> 00:17:15,640
the primary focus run time yeah

00:17:20,319 --> 00:17:25,230
mmm

00:17:22,540 --> 00:17:25,230
mmm

00:17:27,589 --> 00:17:33,289
hmm so if there's a folk it is a focus

00:17:30,110 --> 00:17:35,090
on sub-packages as well yeah so on the

00:17:33,289 --> 00:17:36,559
graph these were binary packages from

00:17:35,090 --> 00:17:39,710
fedora so these are basically the sub

00:17:36,559 --> 00:17:42,529
packages I think what you mean is if you

00:17:39,710 --> 00:17:44,299
have infinite source RPM package it has

00:17:42,529 --> 00:17:45,980
multiple you can have potentially

00:17:44,299 --> 00:17:50,950
multiple binary packages in there and

00:17:45,980 --> 00:17:50,950
that's what the graph shows so yeah

00:17:59,429 --> 00:18:05,879
oh yeah oh yeah oh yeah so maybe if

00:18:02,669 --> 00:18:07,769
their I like multiple options the tool

00:18:05,879 --> 00:18:10,049
could suggest alternatives and that's

00:18:07,769 --> 00:18:12,419
definitely the plan that could do that

00:18:10,049 --> 00:18:14,820
like yeah this way I want to focus

00:18:12,419 --> 00:18:16,559
primarily on installation so the initial

00:18:14,820 --> 00:18:18,779
graph is much more than the repo that

00:18:16,559 --> 00:18:21,119
was basically unreadable right but it

00:18:18,779 --> 00:18:23,070
can consume the repo data and show you

00:18:21,119 --> 00:18:26,099
alternatives like yeah hey this package

00:18:23,070 --> 00:18:27,929
drags in this but like there are five

00:18:26,099 --> 00:18:29,820
other options and you can instantly see

00:18:27,929 --> 00:18:31,499
the impact it's definitely not

00:18:29,820 --> 00:18:33,330
implemented but it's something that you

00:18:31,499 --> 00:18:35,029
would be interesting hoping I would be

00:18:33,330 --> 00:18:37,259
very happy to have you on board

00:18:35,029 --> 00:18:42,049
otherwise yeah I think that would be

00:18:37,259 --> 00:18:42,049
very useful yeah

00:18:57,140 --> 00:19:02,700
yes so I said I wanna the question was

00:19:00,240 --> 00:19:03,990
that I said I would have features but

00:19:02,700 --> 00:19:05,490
that's in conflict some people want

00:19:03,990 --> 00:19:07,590
small some people want all the features

00:19:05,490 --> 00:19:09,750
so what to do with that um that's what I

00:19:07,590 --> 00:19:11,610
want want to focus on use cases and

00:19:09,750 --> 00:19:14,700
unnecessary packages of the necessary

00:19:11,610 --> 00:19:18,120
order all the ecosystem and it'll depend

00:19:14,700 --> 00:19:21,210
case-by-case but we definitely like if

00:19:18,120 --> 00:19:23,310
there if if we discover that for example

00:19:21,210 --> 00:19:25,740
and I'm just making this up we have two

00:19:23,310 --> 00:19:27,960
use cases for httpd one full features

00:19:25,740 --> 00:19:31,140
and one very small we can build two

00:19:27,960 --> 00:19:33,660
versions of age two variants of httpd

00:19:31,140 --> 00:19:35,100
with different feature sets like that's

00:19:33,660 --> 00:19:36,600
not the problem I guess

00:19:35,100 --> 00:19:38,910
so yeah that would be the that would be

00:19:36,600 --> 00:19:43,350
the that would be option I don't know if

00:19:38,910 --> 00:19:47,210
that happens ever but yeah that that

00:19:43,350 --> 00:19:47,210
basically would be a solution there

00:20:09,320 --> 00:20:18,400
oh so the question was if if we get to

00:20:16,610 --> 00:20:20,660
the point that we have alternative

00:20:18,400 --> 00:20:22,310
variants of packages with different

00:20:20,660 --> 00:20:24,470
features if we can have an install image

00:20:22,310 --> 00:20:26,330
with those maybe

00:20:24,470 --> 00:20:27,710
yeah like giving them options yes

00:20:26,330 --> 00:20:30,320
probably but that would be very very

00:20:27,710 --> 00:20:32,420
later right we first need to make it

00:20:30,320 --> 00:20:35,450
happen so we first need to discover like

00:20:32,420 --> 00:20:37,310
what's what the focus would be then

00:20:35,450 --> 00:20:39,140
actually minimize it and produce it and

00:20:37,310 --> 00:20:40,700
then in the end yeah maybe make the

00:20:39,140 --> 00:20:43,040
installation easier by giving people

00:20:40,700 --> 00:20:45,440
better interface but that will be very

00:20:43,040 --> 00:20:49,780
very later but yeah could be could be

00:20:45,440 --> 00:20:49,780
not now not this year probably but like

00:21:04,919 --> 00:21:09,759
so the yeah that was mostly remarked

00:21:07,539 --> 00:21:13,749
that we have some like coral or coral

00:21:09,759 --> 00:21:15,489
minimal and there's a primary problem

00:21:13,749 --> 00:21:18,429
that if you install one into docker

00:21:15,489 --> 00:21:20,799
image you can do a container image you

00:21:18,429 --> 00:21:24,429
can easily switch to the other one um I

00:21:20,799 --> 00:21:26,649
don't think that's a problem that much

00:21:24,429 --> 00:21:29,379
like if you can achieve that state

00:21:26,649 --> 00:21:31,509
that's fine and if there is a use case

00:21:29,379 --> 00:21:34,389
for switching from one to another maybe

00:21:31,509 --> 00:21:36,279
we can work on that right but I think

00:21:34,389 --> 00:21:38,200
first we'll be enabling this and I'm

00:21:36,279 --> 00:21:41,469
happy that there are already cases like

00:21:38,200 --> 00:21:43,899
that but yeah we still need to do the

00:21:41,469 --> 00:21:47,499
minimization work first and then I think

00:21:43,899 --> 00:21:49,149
worried about switching from variants

00:21:47,499 --> 00:21:52,859
and things like that but if it's a use

00:21:49,149 --> 00:21:52,859
case it's use case yeah

00:22:14,180 --> 00:22:19,970
yeah yeah I agree with you um it was

00:22:17,120 --> 00:22:21,680
about um yet we have contain an image

00:22:19,970 --> 00:22:23,870
Federer based image that has a certain

00:22:21,680 --> 00:22:25,490
size that has full-featured package if

00:22:23,870 --> 00:22:27,080
we switch the full picture package do

00:22:25,490 --> 00:22:28,460
something limited it'll be smaller but

00:22:27,080 --> 00:22:30,530
some people couldn't be able to use it

00:22:28,460 --> 00:22:32,540
and this is exactly what I want to don't

00:22:30,530 --> 00:22:35,240
want to focus on container images it's a

00:22:32,540 --> 00:22:38,090
very different job than this I want this

00:22:35,240 --> 00:22:40,610
to be focused on actual minimization of

00:22:38,090 --> 00:22:42,050
those use cases and then deciding what's

00:22:40,610 --> 00:22:45,320
in the base image and what's not that's

00:22:42,050 --> 00:22:46,820
a very different thing and we have a

00:22:45,320 --> 00:22:48,590
container second photograph with that

00:22:46,820 --> 00:22:51,250
but yeah we can give them data like I

00:22:48,590 --> 00:22:53,930
can see I had I had the screen with like

00:22:51,250 --> 00:22:55,550
multiple apps and like what's what's the

00:22:53,930 --> 00:22:57,500
intersection in that like what's the

00:22:55,550 --> 00:22:59,360
overlap and we can say hey this package

00:22:57,500 --> 00:23:00,890
is used by almost everything so you

00:22:59,360 --> 00:23:03,680
should have it in the base image this

00:23:00,890 --> 00:23:06,460
one isn't so you might not be there but

00:23:03,680 --> 00:23:08,920
it's up to you to actually decide and

00:23:06,460 --> 00:23:12,440
who knows that you might have multiple

00:23:08,920 --> 00:23:14,720
base images in fedora anyway right you

00:23:12,440 --> 00:23:16,040
can have very small one for rest

00:23:14,720 --> 00:23:18,680
applications because you don't need

00:23:16,040 --> 00:23:20,150
almost anything you can have a big full

00:23:18,680 --> 00:23:23,000
feature one for other deployments I

00:23:20,150 --> 00:23:29,240
don't know um but I guess that's the

00:23:23,000 --> 00:23:32,740
container sick any other questions

00:23:29,240 --> 00:23:32,740
RDS ideas comments

00:23:35,140 --> 00:23:39,110
all righty thanks for coming and enjoy

00:23:37,270 --> 00:23:42,550
the boat

00:23:39,110 --> 00:23:42,550

YouTube URL: https://www.youtube.com/watch?v=jaMkd5EyZqE


