Title: State of authentication and identity management in Fedora - Alexander Bokovoy - Flock 2019
Publication date: 2019-08-28
Playlist: Flock 2019
Description: 
	Fedora Project is often seen as a leading test bed for identity management, thanks to its close relationship with FreeIPA, SSSD, and other projects. However, we rarely talk about goals and use cases these projects are trying to solve within Fedora distributions' context. Changes happen almost in every Fedora release: authconfig replaced by authselect, SSSD providing a new Kerberos credentials cache storage, smartcards support being added and a multitude of other changes came in with FreeIPA or Samba refreshes. Still, use of new features is somewhat limited by a relative complexity of detecting and setting up actual environments.

With the addition of Fedora Silverblue, many classic desktop integration methods that are backed by FreeIPA, Samba and SSSD tools would need to be re-thought to fit immutable containerised environments.
There is also an industry-wide effort to reduce use of insecure versions of various network protocols. While there is a good progress with protocols like TLS and common security policies, ease of use for desktop users directly clashes with these activities and we need to look into how both user experience and security could be improved.

The talk is going to provide a Fedora-wide overview of the work being done by multiple teams to improve identity and authentication packaging infrastructure within Fedora projects, how individual components play together and what to expect in future.

--
Recordings of talks at Flock are a community effort. Unfortunately not everything works perfectly every time. If you're interested in helping us improve, let us know.
Captions: 
	00:00:01,290 --> 00:00:10,200
so hello my name is Alexandra Beckett I

00:00:06,390 --> 00:00:15,360
am working on different things within

00:00:10,200 --> 00:00:19,080
the identity management area and on free

00:00:15,360 --> 00:00:21,900
ap project on Samba and Kerberos and

00:00:19,080 --> 00:00:25,580
other areas SSD and so on so this is

00:00:21,900 --> 00:00:29,910
going to be a presentation about the

00:00:25,580 --> 00:00:32,520
general state of the authentication and

00:00:29,910 --> 00:00:35,789
Identity Management and fedora and it

00:00:32,520 --> 00:00:39,920
can be seen as a kind of joint report

00:00:35,789 --> 00:00:39,920
from all of these projects

00:00:39,929 --> 00:00:48,510
the idea is to cover what we have done

00:00:43,409 --> 00:00:51,510
in let's say last year or two in reality

00:00:48,510 --> 00:00:55,350
because it's all spread out in time in

00:00:51,510 --> 00:00:58,589
many areas so but the first thing I

00:00:55,350 --> 00:01:03,449
wanted to start with is the celebration

00:00:58,589 --> 00:01:07,980
so we actually have 40 years of ho 6 API

00:01:03,449 --> 00:01:16,190
service for identity because they get PW

00:01:07,980 --> 00:01:21,660
nom and get gr nom were added in version

00:01:16,190 --> 00:01:24,000
7 AT&T UNIX and 7 in 1979 so we have 40

00:01:21,660 --> 00:01:27,500
years this year of a celebration of

00:01:24,000 --> 00:01:31,340
probably one of the longest existing

00:01:27,500 --> 00:01:35,460
stable api's in the POSIX environment

00:01:31,340 --> 00:01:40,380
which is yeah which is an interesting

00:01:35,460 --> 00:01:43,350
thing in itself because despite all the

00:01:40,380 --> 00:01:46,380
changes on the protocol level on the

00:01:43,350 --> 00:01:51,420
storage everywhere we still use the same

00:01:46,380 --> 00:01:54,120
semantics behind all these calls and the

00:01:51,420 --> 00:01:56,760
name service switch the mechanism that

00:01:54,120 --> 00:02:01,310
actually defines that you can plug in

00:01:56,760 --> 00:02:05,690
different mechanisms was introduced at

00:02:01,310 --> 00:02:09,179
26 years ago so again we just off by one

00:02:05,690 --> 00:02:13,439
with the quarter of centuries of

00:02:09,179 --> 00:02:14,830
operation there on the other side event

00:02:13,439 --> 00:02:20,520
occasion api's

00:02:14,830 --> 00:02:24,160
like Pam the API was created in 1995 and

00:02:20,520 --> 00:02:27,250
standardized it into single sign-on spec

00:02:24,160 --> 00:02:29,710
in 1997 so again we're dealing with

00:02:27,250 --> 00:02:34,690
something that happened before the turn

00:02:29,710 --> 00:02:38,290
of millennia and looking at that the NSS

00:02:34,690 --> 00:02:44,170
and Pam basically represent the last a

00:02:38,290 --> 00:02:51,430
be eyes made in 19th century so this is

00:02:44,170 --> 00:02:54,010
a picture of kids finishing school high

00:02:51,430 --> 00:02:56,700
school in Finland where they celebrated

00:02:54,010 --> 00:03:01,900
by driving in this kind of trucks and

00:02:56,700 --> 00:03:04,570
showing the weird kind of posters on it

00:03:01,900 --> 00:03:08,170
and yeah representing themselves in

00:03:04,570 --> 00:03:11,170
whatever kind of you know costumes they

00:03:08,170 --> 00:03:14,440
can have it's it happens every year and

00:03:11,170 --> 00:03:17,070
they throw away candies so there are

00:03:14,440 --> 00:03:20,800
people standing around and watching and

00:03:17,070 --> 00:03:24,489
gathering those candies for about two

00:03:20,800 --> 00:03:28,060
hours so this is in Helsinki they have a

00:03:24,489 --> 00:03:32,950
lot of schools and so this procession is

00:03:28,060 --> 00:03:37,660
going twice and I think it's around 80

00:03:32,950 --> 00:03:41,920
trucks or so so quite impressive and if

00:03:37,660 --> 00:03:45,880
we look into the situation the network

00:03:41,920 --> 00:03:49,750
protocols that we use for identity

00:03:45,880 --> 00:03:54,850
purposes they all actually from that

00:03:49,750 --> 00:04:02,310
century a zombie is already 30 years

00:03:54,850 --> 00:04:10,390
into into each 35 even right Kerberos is

00:04:02,310 --> 00:04:14,410
30 LDAP is 26 and Active Directory is

00:04:10,390 --> 00:04:17,350
just turned 20 last year by combining

00:04:14,410 --> 00:04:19,419
all of these things together of course

00:04:17,350 --> 00:04:22,210
there are updates to the protocols but

00:04:19,419 --> 00:04:26,039
the fundamentals are still there and

00:04:22,210 --> 00:04:27,610
it's amazing what we achieved as the

00:04:26,039 --> 00:04:30,759
industry

00:04:27,610 --> 00:04:34,509
with those fundamentals because like 90%

00:04:30,759 --> 00:04:37,270
of Kerberos and held up an SMB

00:04:34,509 --> 00:04:38,169
infrastructure is probably what runs the

00:04:37,270 --> 00:04:42,219
whole world

00:04:38,169 --> 00:04:45,340
we have Active Directory but on the

00:04:42,219 --> 00:04:50,349
other side is standard API caused a lot

00:04:45,340 --> 00:04:52,509
of because it's a lot of work among

00:04:50,349 --> 00:04:54,280
among different groups and we have

00:04:52,509 --> 00:04:58,030
different implementations of the same

00:04:54,280 --> 00:05:00,219
stuff so there's NSS paneled up that

00:04:58,030 --> 00:05:04,599
kind of combines all these things

00:05:00,219 --> 00:05:09,669
together then 12 years ago we started

00:05:04,599 --> 00:05:14,159
with SSD and there are rumors that it's

00:05:09,669 --> 00:05:17,620
actually contains the the SSD is the

00:05:14,159 --> 00:05:22,409
naming after the people who were doing

00:05:17,620 --> 00:05:22,409
it right and Steven was one of them

00:05:29,460 --> 00:05:39,480
yes yes and we have a bunch of Pam

00:05:34,680 --> 00:05:41,850
modules that come with Linux Pam project

00:05:39,480 --> 00:05:44,250
but there is a bunch of prod Pam modules

00:05:41,850 --> 00:05:46,950
that come from different vendors and

00:05:44,250 --> 00:05:50,850
different other projects notable ones is

00:05:46,950 --> 00:05:56,400
the upon win bond for example or RSA

00:05:50,850 --> 00:05:58,560
SecurID implementations and Kerberos

00:05:56,400 --> 00:06:01,740
there are actually two palm caerbae five

00:05:58,560 --> 00:06:04,260
versions two separate projects with

00:06:01,740 --> 00:06:12,350
different code bases but the same naming

00:06:04,260 --> 00:06:15,660
and it will look into the reality of

00:06:12,350 --> 00:06:17,850
production use of that one a typical

00:06:15,660 --> 00:06:25,770
environment you see all these all these

00:06:17,850 --> 00:06:30,180
things so the yellow ones orange ones

00:06:25,770 --> 00:06:33,120
they can't kind of load it into the grip

00:06:30,180 --> 00:06:37,890
see so effectively they load it into

00:06:33,120 --> 00:06:42,380
every single application the green ones

00:06:37,890 --> 00:06:47,820
they load it through the authentication

00:06:42,380 --> 00:06:49,950
faizan in Pam and this looks like a

00:06:47,820 --> 00:06:53,790
generally good idea to have this

00:06:49,950 --> 00:06:58,230
extended but it led to a number of real

00:06:53,790 --> 00:07:00,030
problems over years because first it's a

00:06:58,230 --> 00:07:04,020
modular stack yes but you have to

00:07:00,030 --> 00:07:07,050
maintain this modular stack in a certain

00:07:04,020 --> 00:07:10,380
way and then you have to configure it so

00:07:07,050 --> 00:07:12,600
of course most people don't like to read

00:07:10,380 --> 00:07:17,610
the documentation and do configuration

00:07:12,600 --> 00:07:20,160
by hand and twenty years ago of config

00:07:17,610 --> 00:07:26,700
tool was created to kind of help them

00:07:20,160 --> 00:07:31,170
with it and it became quickly yeah a

00:07:26,700 --> 00:07:34,800
pasta of multiple choices that

00:07:31,170 --> 00:07:38,160
contradict each other and create a funny

00:07:34,800 --> 00:07:40,650
environment where you where you don't

00:07:38,160 --> 00:07:43,979
know what what applies to what because

00:07:40,650 --> 00:07:46,830
really no way to to tell it you need to

00:07:43,979 --> 00:07:49,770
know things behind it but then the other

00:07:46,830 --> 00:07:53,520
part of complexity is that effectively

00:07:49,770 --> 00:07:56,520
most of these modules aid on the NSS on

00:07:53,520 --> 00:07:58,620
Pam's site they are configured locally

00:07:56,520 --> 00:08:00,840
they cannot consult the network for

00:07:58,620 --> 00:08:03,210
their own configuration because it's a

00:08:00,840 --> 00:08:05,370
bootstrapping problem and this means

00:08:03,210 --> 00:08:08,550
that you have to distribute somehow all

00:08:05,370 --> 00:08:10,830
the details and and have them locally

00:08:08,550 --> 00:08:15,389
because they load it into every single

00:08:10,830 --> 00:08:19,350
process they need effectively you have

00:08:15,389 --> 00:08:22,740
access to the system-wide place where

00:08:19,350 --> 00:08:24,690
these credentials for example in

00:08:22,740 --> 00:08:29,449
configuration is stored which creates

00:08:24,690 --> 00:08:32,490
some security problems and motive that

00:08:29,449 --> 00:08:34,289
we came to the point where there is a

00:08:32,490 --> 00:08:37,560
bunch of applications that would like to

00:08:34,289 --> 00:08:40,979
use the same information store for

00:08:37,560 --> 00:08:43,080
example LDAP to derive the and get the

00:08:40,979 --> 00:08:47,790
access to information which is

00:08:43,080 --> 00:08:50,880
ultimately non POSIX like POSIX API has

00:08:47,790 --> 00:08:56,459
no call and no way to tell that the user

00:08:50,880 --> 00:08:59,610
has email account as mean you detail

00:08:56,459 --> 00:09:06,060
that still something that did not come

00:08:59,610 --> 00:09:09,870
into need for like 40 years but any

00:09:06,060 --> 00:09:12,600
application that wants to operate like

00:09:09,870 --> 00:09:15,810
we've did that user databases most

00:09:12,600 --> 00:09:19,410
likely wants to use email or some other

00:09:15,810 --> 00:09:21,839
in the identifiers that it can use to

00:09:19,410 --> 00:09:24,750
communicate with the user so this

00:09:21,839 --> 00:09:27,839
information doesn't come from the system

00:09:24,750 --> 00:09:30,600
database means there is a duplication of

00:09:27,839 --> 00:09:33,570
effort to access it and so on so we have

00:09:30,600 --> 00:09:35,940
new requirements new technically they

00:09:33,570 --> 00:09:38,310
are 20 plus years all the requirements

00:09:35,940 --> 00:09:43,050
but they are new in a sense that they

00:09:38,310 --> 00:09:45,990
don't fit into a POSIX API here and with

00:09:43,050 --> 00:09:48,630
all of this thing we have a standard API

00:09:45,990 --> 00:09:52,440
but we have variety of issues related to

00:09:48,630 --> 00:09:53,820
it and one set of issues that I

00:09:52,440 --> 00:09:56,640
described it there really

00:09:53,820 --> 00:09:59,790
from production side but the other is

00:09:56,640 --> 00:10:02,970
long-term issues related to maintenance

00:09:59,790 --> 00:10:08,400
and development of such things so for

00:10:02,970 --> 00:10:11,330
example because the way how both api's

00:10:08,400 --> 00:10:13,950
work for NSS and Pam there is no

00:10:11,330 --> 00:10:16,470
execution context isolation other than

00:10:13,950 --> 00:10:20,160
the process itself so whatever you load

00:10:16,470 --> 00:10:24,570
in NSS will be accessible to any part of

00:10:20,160 --> 00:10:27,930
a process they can tourette eclis pick

00:10:24,570 --> 00:10:30,330
up your credentials if they can snoop on

00:10:27,930 --> 00:10:32,700
the on the process content itself which

00:10:30,330 --> 00:10:36,750
is by default they can because that's

00:10:32,700 --> 00:10:39,450
their own execution process and then as

00:10:36,750 --> 00:10:41,640
I said it's all local configurations of

00:10:39,450 --> 00:10:46,190
scale in configuration across thousands

00:10:41,640 --> 00:10:49,320
of nodes is a real problem and then

00:10:46,190 --> 00:10:53,910
because these things exist for quite a

00:10:49,320 --> 00:10:56,340
long time and open-source projects not

00:10:53,910 --> 00:10:59,370
all of them actually persistent or that

00:10:56,340 --> 00:11:04,740
persistent in the existence the lack of

00:10:59,370 --> 00:11:07,650
support because original author decides

00:11:04,740 --> 00:11:11,130
it's not the topic that interests him

00:11:07,650 --> 00:11:12,150
anymore and so only the lack of support

00:11:11,130 --> 00:11:17,600
is a real thing

00:11:12,150 --> 00:11:21,540
so I said about two palm care b5 modules

00:11:17,600 --> 00:11:25,170
basically both of them died a long time

00:11:21,540 --> 00:11:27,630
ago we're resurrected last year one of

00:11:25,170 --> 00:11:30,930
them and one of them was written because

00:11:27,630 --> 00:11:33,090
they are died five years before so it's

00:11:30,930 --> 00:11:35,130
kind of confusion thing that that

00:11:33,090 --> 00:11:41,430
happens there and then the other part is

00:11:35,130 --> 00:11:44,430
a lack of server so so fancy technology

00:11:41,430 --> 00:11:47,640
behind it it's not really attractive to

00:11:44,430 --> 00:11:50,460
new generations of Engineers that are

00:11:47,640 --> 00:11:54,740
coming out of universities and willing

00:11:50,460 --> 00:11:59,270
to work with fancy app stores and mobile

00:11:54,740 --> 00:12:03,230
applications where they might get faster

00:11:59,270 --> 00:12:06,860
breakthrough into top 1% and

00:12:03,230 --> 00:12:11,600
so on the dreams are not always coming

00:12:06,860 --> 00:12:14,030
true but they definitely put us away how

00:12:11,600 --> 00:12:16,580
far away from from the interest of of

00:12:14,030 --> 00:12:20,300
new developers so probably life is

00:12:16,580 --> 00:12:27,050
easier with rest and we don't have rest

00:12:20,300 --> 00:12:31,100
we have to maintain this stuff and we

00:12:27,050 --> 00:12:32,270
use s SSD in fedora and actually this

00:12:31,100 --> 00:12:36,700
year

00:12:32,270 --> 00:12:40,130
is 10 years universe anniversary of

00:12:36,700 --> 00:12:46,390
bringing in SSD in fedora the first

00:12:40,130 --> 00:12:53,360
built 0 1 0 some get commit hash I

00:12:46,390 --> 00:13:00,170
happened in 2009 I was even before I

00:12:53,360 --> 00:13:03,890
think it was Fedora core 11 it was still

00:13:00,170 --> 00:13:13,750
Fedora core according to the coachee at

00:13:03,890 --> 00:13:16,010
that point it's Fedora core 11 yeah the

00:13:13,750 --> 00:13:19,100
way it works

00:13:16,010 --> 00:13:23,960
architecture still stays basically the

00:13:19,100 --> 00:13:26,270
same and scalable in terms of how it

00:13:23,960 --> 00:13:30,410
handles things the most important part

00:13:26,270 --> 00:13:34,310
is that the actual work is separated

00:13:30,410 --> 00:13:37,750
from the application that loads n SS SSS

00:13:34,310 --> 00:13:41,810
or Pam SSS so we don't pollute the

00:13:37,750 --> 00:13:44,570
executable space of that application we

00:13:41,810 --> 00:13:47,750
just talked to over the UNIX domain

00:13:44,570 --> 00:13:50,870
socket to the responders somewhere and

00:13:47,750 --> 00:13:53,810
use cache there's some cheating here

00:13:50,870 --> 00:13:57,200
because this cache has multiple layers

00:13:53,810 --> 00:14:01,340
and memory cache is actually mapped into

00:13:57,200 --> 00:14:06,680
the actual process but that should be

00:14:01,340 --> 00:14:10,030
very low that should create very low

00:14:06,680 --> 00:14:14,090
overhead to access it and especially for

00:14:10,030 --> 00:14:15,310
quickly and often access it IDs for

00:14:14,090 --> 00:14:18,790
groups and users

00:14:15,310 --> 00:14:22,210
this creates quite fast operation even

00:14:18,790 --> 00:14:26,650
not requiring the contact switches in in

00:14:22,210 --> 00:14:30,970
many cases over years this was extended

00:14:26,650 --> 00:14:35,620
to handle the offline logins extended to

00:14:30,970 --> 00:14:39,640
store and enforce pseudo rules as a

00:14:35,620 --> 00:14:42,910
linux policies some other rules like in

00:14:39,640 --> 00:14:47,110
case of free APA there are access

00:14:42,910 --> 00:14:50,050
controls based on the host and service

00:14:47,110 --> 00:14:54,190
your excess and then multi-factor

00:14:50,050 --> 00:14:59,339
authentication things that came a bit

00:14:54,190 --> 00:15:02,589
later and in smart cards of course so

00:14:59,339 --> 00:15:04,990
the interesting thing is that we tend to

00:15:02,589 --> 00:15:08,050
think that fedora is a bit of on the

00:15:04,990 --> 00:15:12,550
edge with all of this but apparently rl8

00:15:08,050 --> 00:15:15,670
went even more extreme than fedora in

00:15:12,550 --> 00:15:18,910
its handling of of this architectures so

00:15:15,670 --> 00:15:23,380
Fedora still has all of these parker

00:15:18,910 --> 00:15:28,300
bibim pkcs 11 modules they mostly

00:15:23,380 --> 00:15:32,230
rebuilt by the release engineering when

00:15:28,300 --> 00:15:35,110
mass rebuilds happen but they are still

00:15:32,230 --> 00:15:37,600
in in fedora repository so you could

00:15:35,110 --> 00:15:41,050
configure a system if you need to use

00:15:37,600 --> 00:15:45,850
them while rail decided to stop doing

00:15:41,050 --> 00:15:48,420
that and deprecated and eventually

00:15:45,850 --> 00:15:52,600
remove those modules because of the

00:15:48,420 --> 00:15:55,930
various factors there's as I say it's

00:15:52,600 --> 00:15:58,720
some up streams I've effectively dead

00:15:55,930 --> 00:16:00,610
there's nothing to contribute to there

00:15:58,720 --> 00:16:05,440
are better replacements in some cases

00:16:00,610 --> 00:16:08,260
and just I think this week on fedora

00:16:05,440 --> 00:16:15,400
devil there was requests let's let's

00:16:08,260 --> 00:16:17,980
remove NS CD from GLIP see because well

00:16:15,400 --> 00:16:21,970
it's obsolete apparently it's not fully

00:16:17,980 --> 00:16:26,230
obsolete but as I said Fedora quickly

00:16:21,970 --> 00:16:30,250
losing its extreme frontier

00:16:26,230 --> 00:16:33,910
and of thinking because people are

00:16:30,250 --> 00:16:41,380
thinking that time has come for some of

00:16:33,910 --> 00:16:48,640
those technologies because there's s SSD

00:16:41,380 --> 00:16:51,060
SSD handles all of it yes yes yes yes

00:16:48,640 --> 00:16:55,810
it's just a different module represents

00:16:51,060 --> 00:16:57,520
access to it and the other part is that

00:16:55,810 --> 00:16:59,650
you have to manage it you have to

00:16:57,520 --> 00:17:02,200
somehow configure systems and that

00:16:59,650 --> 00:17:05,080
became a mess so if you look at the

00:17:02,200 --> 00:17:09,610
lower part of this slide

00:17:05,080 --> 00:17:14,110
it's a screenshot from Fedora Bugzilla

00:17:09,610 --> 00:17:23,650
from Fedora 26 actually we're just

00:17:14,110 --> 00:17:29,820
calling off config package actually

00:17:23,650 --> 00:17:29,820
makes your system not accessible anymore

00:17:30,720 --> 00:17:38,350
so you just uninstall a package and your

00:17:35,260 --> 00:17:42,850
system disabled logins the reason for

00:17:38,350 --> 00:17:45,430
that is that the off config - - update

00:17:42,850 --> 00:17:47,890
actually requires you to specify all the

00:17:45,430 --> 00:17:50,530
original options that you specified

00:17:47,890 --> 00:17:54,670
there if you want to keep them there is

00:17:50,530 --> 00:17:57,850
no state and it just regenerates configs

00:17:54,670 --> 00:17:59,380
based on what you've provided there and

00:17:57,850 --> 00:18:03,190
if you don't know what you provided

00:17:59,380 --> 00:18:07,360
there's no state you lost it so at some

00:18:03,190 --> 00:18:10,360
point we decided that we need to do

00:18:07,360 --> 00:18:14,250
something with it the old config

00:18:10,360 --> 00:18:17,590
maintainer said I'm done with this call

00:18:14,250 --> 00:18:21,550
there was need also to ported to Python

00:18:17,590 --> 00:18:25,180
3 so there was decision made to redo and

00:18:21,550 --> 00:18:28,450
you - looking at the actual use cases

00:18:25,180 --> 00:18:32,980
and covering those that matter of course

00:18:28,450 --> 00:18:35,380
you can have customization added but for

00:18:32,980 --> 00:18:38,860
the majority of people this actually

00:18:35,380 --> 00:18:43,030
went more or less transparent in Fedora

00:18:38,860 --> 00:18:47,080
so we had this in Fedora for two and a

00:18:43,030 --> 00:18:50,230
half years before relate game and I

00:18:47,080 --> 00:18:53,860
think there were few bugs we fixed them

00:18:50,230 --> 00:18:56,220
but they were mostly no bugs related

00:18:53,860 --> 00:19:00,610
that you cannot configure

00:18:56,220 --> 00:19:04,600
and an innocence pummelled up or stuff

00:19:00,610 --> 00:19:07,050
like that well in in rail we got more

00:19:04,600 --> 00:19:11,590
conservative customers and they are

00:19:07,050 --> 00:19:19,440
really wanting to have some easy way to

00:19:11,590 --> 00:19:22,510
generate config for them on the earth

00:19:19,440 --> 00:19:25,540
select site so there are two - big

00:19:22,510 --> 00:19:28,090
profiles the NHIS profile is is there

00:19:25,540 --> 00:19:33,160
for historical reasons and mostly

00:19:28,090 --> 00:19:35,530
deprecated because you actually use it

00:19:33,160 --> 00:19:39,880
in the high-performance computing

00:19:35,530 --> 00:19:42,250
because of the really small overhead

00:19:39,880 --> 00:19:45,510
they don't need authentication there

00:19:42,250 --> 00:19:49,930
they just need fast fast access to these

00:19:45,510 --> 00:19:51,970
IDs because typically clusters are

00:19:49,930 --> 00:19:54,580
isolated enough in the trusted

00:19:51,970 --> 00:20:03,940
environment that they really don't need

00:19:54,580 --> 00:20:04,930
any authentication around it it used to

00:20:03,940 --> 00:20:07,570
be this way

00:20:04,930 --> 00:20:10,410
the net group support is actually using

00:20:07,570 --> 00:20:14,860
LDAP behind the scenes so there's nice

00:20:10,410 --> 00:20:17,110
API on the host for the net groups but

00:20:14,860 --> 00:20:19,360
real implementation doesn't use nice

00:20:17,110 --> 00:20:25,660
protocol anymore so you don't need it

00:20:19,360 --> 00:20:28,300
and the old select itself is configuring

00:20:25,660 --> 00:20:33,430
is is a set of configuration templates

00:20:28,300 --> 00:20:36,630
that simply configure the D files that

00:20:33,430 --> 00:20:38,140
are defined here but it doesn't do

00:20:36,630 --> 00:20:42,910
create

00:20:38,140 --> 00:20:45,930
SSS d.com for example for you or SP that

00:20:42,910 --> 00:20:48,360
conf it's not its task

00:20:45,930 --> 00:20:52,560
for this you have systems that enroll

00:20:48,360 --> 00:20:57,300
you into a domain IPA has IPA client

00:20:52,560 --> 00:21:01,530
install Samba has net abs join but also

00:20:57,300 --> 00:21:05,580
it has there's realm tool that unifies

00:21:01,530 --> 00:21:09,420
both of them so realm join detects which

00:21:05,580 --> 00:21:13,280
domain controller you are using and then

00:21:09,420 --> 00:21:16,880
uses the appropriate method to that so

00:21:13,280 --> 00:21:19,860
there is a wrapper called off config

00:21:16,880 --> 00:21:23,250
that implements kind of the basic

00:21:19,860 --> 00:21:26,100
options that people use by remapping

00:21:23,250 --> 00:21:30,300
them to the old select options but not

00:21:26,100 --> 00:21:32,610
all of them and if you want to add

00:21:30,300 --> 00:21:35,880
something you just add a new profile in

00:21:32,610 --> 00:21:38,940
all select and maintain it yourself it's

00:21:35,880 --> 00:21:43,740
extensible then on the other side for

00:21:38,940 --> 00:21:47,340
the authentication our colleagues from

00:21:43,740 --> 00:21:53,490
the security team they work it over

00:21:47,340 --> 00:21:58,170
years to simplify access to tokens to

00:21:53,490 --> 00:22:00,840
smart cards to all of these devices

00:21:58,170 --> 00:22:04,910
whether they are virtual software or

00:22:00,840 --> 00:22:07,970
hardware that implement paquius eleven

00:22:04,910 --> 00:22:14,030
protocol the bejeezus 11 protocol itself

00:22:07,970 --> 00:22:17,970
api itself is there since 1993 but in

00:22:14,030 --> 00:22:21,030
2015 that was new Arif see that kind of

00:22:17,970 --> 00:22:25,110
unified how you specify access as a

00:22:21,030 --> 00:22:31,860
string access to device and that made

00:22:25,110 --> 00:22:35,130
possible to generate a common access to

00:22:31,860 --> 00:22:41,460
to everything by parsing this you arise

00:22:35,130 --> 00:22:44,210
somewhere in the p11 kit layer and then

00:22:41,460 --> 00:22:47,340
decide and where to go so this was

00:22:44,210 --> 00:22:51,840
plugged in in all crypto libraries that

00:22:47,340 --> 00:22:56,610
we have in open SSL through the pkcs 11

00:22:51,840 --> 00:22:59,100
engine into NSS into new TLS and

00:22:56,610 --> 00:23:02,039
directly in OpenSSH because they have

00:22:59,100 --> 00:23:05,429
their unique needs and again there's

00:23:02,039 --> 00:23:08,720
another tool new PG which has also its

00:23:05,429 --> 00:23:14,159
unique needs to access resources so this

00:23:08,720 --> 00:23:18,269
now interesting unified pkcs 11 stack

00:23:14,159 --> 00:23:22,860
that you can access on a fedora machine

00:23:18,269 --> 00:23:27,000
and if you insert a token like a Yubikey

00:23:22,860 --> 00:23:30,600
or a nitro key you this token suddenly

00:23:27,000 --> 00:23:32,039
becomes available at any application at

00:23:30,600 --> 00:23:34,679
the in the top list

00:23:32,039 --> 00:23:36,779
and actually on there are other

00:23:34,679 --> 00:23:39,029
applications that use for example new

00:23:36,779 --> 00:23:42,559
TLS and open SSL and all standard

00:23:39,029 --> 00:23:46,820
mechanisms work there so instead of

00:23:42,559 --> 00:23:49,889
following complex kind of configurations

00:23:46,820 --> 00:23:55,009
complex blogs how to set up things we

00:23:49,889 --> 00:23:55,009
have smart cards we are down to really

00:23:59,269 --> 00:24:02,659
want to use

00:24:18,390 --> 00:24:30,809
these are just two separates but this

00:24:28,919 --> 00:24:34,260
dream they can be long

00:24:30,809 --> 00:24:40,700
they are mostly human unbreathable but

00:24:34,260 --> 00:24:45,450
the p11 kid too and pkcs 11 - they can

00:24:40,700 --> 00:24:50,460
produce them for you so ideally we

00:24:45,450 --> 00:24:53,850
should have known tools that allow you

00:24:50,460 --> 00:24:54,809
to choose which talking to do to use and

00:24:53,850 --> 00:24:58,230
in Firefox

00:24:54,809 --> 00:25:00,660
this is pulling automatically so in

00:24:58,230 --> 00:25:02,429
Firefox you actually have the UI to

00:25:00,660 --> 00:25:05,549
choose which talking to authenticate

00:25:02,429 --> 00:25:07,919
with automatically and you don't need to

00:25:05,549 --> 00:25:11,070
do any configuration it's it's working

00:25:07,919 --> 00:25:14,280
automatically as long as you have access

00:25:11,070 --> 00:25:16,950
to the hardware which is the other part

00:25:14,280 --> 00:25:20,760
that you need to have you Dev rules that

00:25:16,950 --> 00:25:23,280
map right access to to token that is

00:25:20,760 --> 00:25:25,740
enter it but on the workstation I think

00:25:23,280 --> 00:25:29,460
it's it's already there for for most of

00:25:25,740 --> 00:25:35,429
the things for the logged in user while

00:25:29,460 --> 00:25:39,929
on the Kerberos site we did two big

00:25:35,429 --> 00:25:41,910
areas of changes over years one of them

00:25:39,929 --> 00:25:46,559
is on the client side there was a lot of

00:25:41,910 --> 00:25:51,210
work to simplify how how credentials are

00:25:46,559 --> 00:25:55,290
stored how they accessed and how we find

00:25:51,210 --> 00:26:00,140
out users not users of our domain

00:25:55,290 --> 00:26:04,320
controllers over the network and then

00:26:00,140 --> 00:26:07,350
after all of these security breaches

00:26:04,320 --> 00:26:09,960
after the problems we have hardware and

00:26:07,350 --> 00:26:16,440
so on there was a lot of pressure to

00:26:09,960 --> 00:26:19,790
actually stop using weak cryptic hashes

00:26:16,440 --> 00:26:23,110
stop using the algorithms that really

00:26:19,790 --> 00:26:25,750
live through their life

00:26:23,110 --> 00:26:30,670
and the other the other part that

00:26:25,750 --> 00:26:33,790
happened is that yes you can recommend

00:26:30,670 --> 00:26:35,740
that people should not use them but they

00:26:33,790 --> 00:26:39,220
still use them because they have

00:26:35,740 --> 00:26:44,920
software that was installed like in 90s

00:26:39,220 --> 00:26:49,780
and it works and it is a simple thing

00:26:44,920 --> 00:26:52,120
but new people who come and implement

00:26:49,780 --> 00:26:54,809
new applications they don't really

00:26:52,120 --> 00:26:59,110
follow all of these recommendations

00:26:54,809 --> 00:27:04,179
always so some of the way to apply this

00:26:59,110 --> 00:27:07,120
is actually force on defaults to not

00:27:04,179 --> 00:27:09,820
provide access to to the deprecated

00:27:07,120 --> 00:27:13,419
script and we started doing this way of

00:27:09,820 --> 00:27:19,210
the system crypto policies in fedora -

00:27:13,419 --> 00:27:21,880
two years ago and now we basically got

00:27:19,210 --> 00:27:28,720
to the point that we removed DES and

00:27:21,880 --> 00:27:32,470
Triple DES from it and our c4 hashes on

00:27:28,720 --> 00:27:35,500
the life support but for example in the

00:27:32,470 --> 00:27:39,280
current fedora you cannot use them from

00:27:35,500 --> 00:27:44,280
the comment line with the Care Bears so

00:27:39,280 --> 00:27:50,440
going over the client side first

00:27:44,280 --> 00:27:53,830
there is a new addition in SSD that

00:27:50,440 --> 00:27:57,400
implements a storage for Kerberos

00:27:53,830 --> 00:28:00,309
credentials using the so called

00:27:57,400 --> 00:28:03,880
credential manager protocol that was

00:28:00,309 --> 00:28:10,000
originally created by Heimdall Kerberos

00:28:03,880 --> 00:28:13,179
and reused by Apple in in Mac OS and MIT

00:28:10,000 --> 00:28:19,470
CalPERS has support for this for what

00:28:13,179 --> 00:28:23,110
five years or so but client support only

00:28:19,470 --> 00:28:26,350
while the server support for MIT and

00:28:23,110 --> 00:28:30,070
didn't exist so SSS D team implemented

00:28:26,350 --> 00:28:33,220
the server support of KCM storage so you

00:28:30,070 --> 00:28:35,150
can now use all of these file directory

00:28:33,220 --> 00:28:39,020
Kiran & KCM

00:28:35,150 --> 00:28:41,900
storages originally thought that we will

00:28:39,020 --> 00:28:45,320
use keyring as a secure method because

00:28:41,900 --> 00:28:48,380
that's the memory in kernel space that

00:28:45,320 --> 00:28:51,650
you cannot swap out you cannot access if

00:28:48,380 --> 00:28:53,059
you're not allow it but apparently there

00:28:51,650 --> 00:28:56,780
are two problems with it

00:28:53,059 --> 00:29:00,410
one is that it's a limited kernel memory

00:28:56,780 --> 00:29:03,980
so if you're assisted mean that has to

00:29:00,410 --> 00:29:06,860
access with your credentials thousands

00:29:03,980 --> 00:29:10,760
of nodes you basically generate

00:29:06,860 --> 00:29:14,150
thousands of small tickets that populate

00:29:10,760 --> 00:29:20,030
this area and in the kernel side we get

00:29:14,150 --> 00:29:25,309
only fatigue which is 64 kilobytes space

00:29:20,030 --> 00:29:27,080
there per element and there's a quota on

00:29:25,309 --> 00:29:31,460
what you can have there and most

00:29:27,080 --> 00:29:35,120
importantly for it's per user so if your

00:29:31,460 --> 00:29:37,340
route you get it's used up by multiple

00:29:35,120 --> 00:29:40,970
applications easily but really if you

00:29:37,340 --> 00:29:43,370
run parallel SSH you immediately create

00:29:40,970 --> 00:29:48,710
thousands of tickets that needs to be

00:29:43,370 --> 00:29:51,320
stored there somewhere so KCM solves

00:29:48,710 --> 00:29:55,700
this problem by not storing in kernel

00:29:51,320 --> 00:29:58,550
but store in on disk and hidden by unix

00:29:55,700 --> 00:30:00,320
time and socket access and this solves

00:29:58,550 --> 00:30:03,860
the other problem the other problem is

00:30:00,320 --> 00:30:06,650
that the keyring is not namespaces so

00:30:03,860 --> 00:30:08,870
you cannot use it in containers all

00:30:06,650 --> 00:30:11,270
containers have access to the same

00:30:08,870 --> 00:30:17,140
Kyrian that is on the system if they run

00:30:11,270 --> 00:30:21,140
with the same ID and and that means that

00:30:17,140 --> 00:30:23,000
you're not secure with it while with the

00:30:21,140 --> 00:30:27,200
UNIX domain socket access you

00:30:23,000 --> 00:30:31,340
effectively can around a UID and name

00:30:27,200 --> 00:30:34,790
space and you can apply discretional

00:30:31,340 --> 00:30:37,850
access quite easily so this works well

00:30:34,790 --> 00:30:43,640
for the containers access and works well

00:30:37,850 --> 00:30:46,150
for stuff like desktops silver-blue and

00:30:43,640 --> 00:30:47,840
for example the fedora toolbox already

00:30:46,150 --> 00:30:51,650
imports automatic

00:30:47,840 --> 00:30:53,870
year KCM credential which is default in

00:30:51,650 --> 00:30:56,330
fedora if you didn't upgrade from the

00:30:53,870 --> 00:30:59,179
early versions a new installations

00:30:56,330 --> 00:31:01,370
default to KCM and you automatically get

00:30:59,179 --> 00:31:31,419
the Kerberos credentials working in the

00:31:01,370 --> 00:31:34,700
toolbox containers yeah so all of these

00:31:31,419 --> 00:31:37,730
keyrings they had some use cases behind

00:31:34,700 --> 00:31:42,230
and they still do in another use case

00:31:37,730 --> 00:31:45,640
with the dear credentials caches that in

00:31:42,230 --> 00:31:50,630
MIT Kerberos credentials cache access

00:31:45,640 --> 00:31:53,990
treated in transiently from the code

00:31:50,630 --> 00:31:56,380
that resolves to which realm your ticket

00:31:53,990 --> 00:31:59,179
belongs to and if you have to a

00:31:56,380 --> 00:32:01,610
credential sketch collection and you

00:31:59,179 --> 00:32:04,909
have gssapi based application like

00:32:01,610 --> 00:32:07,820
firefox then if it sees a ticket from

00:32:04,909 --> 00:32:10,429
the realm that you want to access

00:32:07,820 --> 00:32:12,289
servicing it will use that ticket

00:32:10,429 --> 00:32:15,529
instead of the one that you want

00:32:12,289 --> 00:32:18,559
so effectively tries to be closer to the

00:32:15,529 --> 00:32:21,500
final destination but sometimes it's

00:32:18,559 --> 00:32:25,250
it's not correct behavior sometimes you

00:32:21,500 --> 00:32:28,669
want to use the cross realm ticket and

00:32:25,250 --> 00:32:32,659
an access with your own so that that was

00:32:28,669 --> 00:32:38,059
breaking some assumptions and splitting

00:32:32,659 --> 00:32:40,460
things required using different types on

00:32:38,059 --> 00:32:48,049
the client side is well we had the

00:32:40,460 --> 00:32:50,899
problem with DNS base it finding of the

00:32:48,049 --> 00:32:53,679
domain controllers especially if you had

00:32:50,899 --> 00:32:58,010
old Kerberos environment and you had

00:32:53,679 --> 00:33:01,090
access to those resources without fully

00:32:58,010 --> 00:33:04,000
qualifying service name so you access

00:33:01,090 --> 00:33:08,980
at all your systems by their first name

00:33:04,000 --> 00:33:13,480
let's say ssh server one not server 1

00:33:08,980 --> 00:33:17,560
dot example.com this doesn't really work

00:33:13,480 --> 00:33:21,790
well because client needs to find out a

00:33:17,560 --> 00:33:24,520
mechanism to to redirect and construct

00:33:21,790 --> 00:33:28,930
the full name it supplies to the server

00:33:24,520 --> 00:33:34,060
and this to the domain controller and

00:33:28,930 --> 00:33:37,300
what's worse if you get server one as

00:33:34,060 --> 00:33:39,400
you name there is ambiguity because

00:33:37,300 --> 00:33:42,340
there might be multiple server one in

00:33:39,400 --> 00:33:45,640
different DNS zones so it works well in

00:33:42,340 --> 00:33:48,490
a single environment single domain

00:33:45,640 --> 00:33:51,070
environment but really doesn't work over

00:33:48,490 --> 00:33:54,520
the internet so you need to have some

00:33:51,070 --> 00:33:57,880
tools to discover the right one and you

00:33:54,520 --> 00:34:00,550
need to find to have some tools to fall

00:33:57,880 --> 00:34:03,430
back from the canalization or to can

00:34:00,550 --> 00:34:06,580
annualization and these two things were

00:34:03,430 --> 00:34:08,650
done in fedora so one of them is to

00:34:06,580 --> 00:34:11,980
support the DNS URI

00:34:08,650 --> 00:34:15,400
RFC and it's used by Fedora project

00:34:11,980 --> 00:34:17,620
itself so you have this Fedora package a

00:34:15,400 --> 00:34:20,320
package if you install it installs the

00:34:17,620 --> 00:34:29,440
snippet of Kerberos configuration that

00:34:20,320 --> 00:34:33,850
says hey we have Fedora Kerberos domain

00:34:29,440 --> 00:34:37,900
controllers there and also use the KDC

00:34:33,850 --> 00:34:42,400
proxy for them to access security if you

00:34:37,900 --> 00:34:45,250
know and the client will use DNS you

00:34:42,400 --> 00:34:49,750
write to discover them and discover the

00:34:45,250 --> 00:34:52,630
URI to to point to the server the

00:34:49,750 --> 00:34:56,110
canonisation part is is now a tree state

00:34:52,630 --> 00:35:00,100
so this was a big problem with two state

00:34:56,110 --> 00:35:02,920
on and off when people started using

00:35:00,100 --> 00:35:06,190
when Fedora project deployed free ap aid

00:35:02,920 --> 00:35:10,120
in the environment where it's all fully

00:35:06,190 --> 00:35:12,070
qualified domain name but some some

00:35:10,120 --> 00:35:13,290
environments where Fedora contributors

00:35:12,070 --> 00:35:17,940
work it

00:35:13,290 --> 00:35:20,850
used the old like non non fully

00:35:17,940 --> 00:35:24,150
qualified naming of of the hosts and it

00:35:20,850 --> 00:35:25,830
was failing because the library doesn't

00:35:24,150 --> 00:35:29,970
know really where you want to go before

00:35:25,830 --> 00:35:33,530
it goes there and tries it so we we

00:35:29,970 --> 00:35:37,830
introduced the fallback it will be in

00:35:33,530 --> 00:35:40,800
Kerberos 118 and it is backwards it

00:35:37,830 --> 00:35:44,790
already in fedora and I think in rail as

00:35:40,800 --> 00:35:47,550
well and it fixes also use the open

00:35:44,790 --> 00:35:50,700
shift environment where they typically

00:35:47,550 --> 00:35:54,240
don't have the right principles in place

00:35:50,700 --> 00:36:00,630
they have principles issued in in the

00:35:54,240 --> 00:36:05,580
name of a container and not the print

00:36:00,630 --> 00:36:10,830
the primary principle and how it should

00:36:05,580 --> 00:36:15,050
be so we have also some work in the KDC

00:36:10,830 --> 00:36:18,660
discoveries so for KDC proxies because

00:36:15,050 --> 00:36:22,620
SSD allows to find out the closest site

00:36:18,660 --> 00:36:25,230
for you to use but the way how KDC

00:36:22,620 --> 00:36:29,730
locator plug in in in Kerberos library

00:36:25,230 --> 00:36:32,040
operates together with providers it

00:36:29,730 --> 00:36:35,070
doesn't really allow you to say hey I

00:36:32,040 --> 00:36:37,410
have a key DC proxy here use it it just

00:36:35,070 --> 00:36:41,490
allows to say hey here is an IP address

00:36:37,410 --> 00:36:45,240
talk to it using standard Kerberos port

00:36:41,490 --> 00:36:48,330
which isn't not not necessarily what you

00:36:45,240 --> 00:36:52,740
want to have we have with the proxy

00:36:48,330 --> 00:36:56,460
environment on the crypt side

00:36:52,740 --> 00:37:00,930
so finally we deprecated des that code

00:36:56,460 --> 00:37:06,030
removed in Fedora from Kerberos Triple

00:37:00,930 --> 00:37:08,430
DES as well most of our four features

00:37:06,030 --> 00:37:13,460
removed except the ones that someone

00:37:08,430 --> 00:37:16,590
needs for the Active Directory operation

00:37:13,460 --> 00:37:19,950
its market deprecated and there is a

00:37:16,590 --> 00:37:23,600
nice addition that in in the Kerberos

00:37:19,950 --> 00:37:26,850
library basically when you do

00:37:23,600 --> 00:37:29,910
tracing of Kerberos operations you can

00:37:26,850 --> 00:37:32,460
see encryption types as numbers and you

00:37:29,910 --> 00:37:36,630
don't know what they mean so now in

00:37:32,460 --> 00:37:39,869
fedora those numbers actually prefix it

00:37:36,630 --> 00:37:41,940
with the short name of the encryption

00:37:39,869 --> 00:37:44,310
type so you immediately get and it's not

00:37:41,940 --> 00:37:45,900
only encryption type at all so the pre

00:37:44,310 --> 00:37:49,260
authentication operations for example

00:37:45,900 --> 00:37:51,240
offer it by the KDC and the client so

00:37:49,260 --> 00:37:53,450
you can easily see what is there you

00:37:51,240 --> 00:38:01,530
don't need to go and search for those

00:37:53,450 --> 00:38:05,520
obscure numbers the other part that is

00:38:01,530 --> 00:38:08,610
happening is the spec pre authentication

00:38:05,520 --> 00:38:12,420
this is one thing that supposed to

00:38:08,610 --> 00:38:14,640
replace encrypted timestamp pre

00:38:12,420 --> 00:38:18,990
authentication which allows completely

00:38:14,640 --> 00:38:21,930
to avoid yeah attacks a password

00:38:18,990 --> 00:38:24,690
dictionary attacks it is already in

00:38:21,930 --> 00:38:28,760
Fedora enabled by default for free ap

00:38:24,690 --> 00:38:31,670
installs and if you disable encryption

00:38:28,760 --> 00:38:37,770
timestamp if you don't have old clients

00:38:31,670 --> 00:38:40,290
then you cannot be attacked anymore with

00:38:37,770 --> 00:38:43,340
the password dictionary things the next

00:38:40,290 --> 00:38:46,470
step with spake will be to add their

00:38:43,340 --> 00:38:50,460
multi-factor support so that you can

00:38:46,470 --> 00:38:53,430
within the spake pass all your token

00:38:50,460 --> 00:38:58,490
values and authenticate easily that is

00:38:53,430 --> 00:39:02,100
that is one thing that currently SSD is

00:38:58,490 --> 00:39:05,070
complements and by using the host key

00:39:02,100 --> 00:39:07,109
tap creates an a wrapper and then using

00:39:05,070 --> 00:39:09,840
that wrapper to pass your token

00:39:07,109 --> 00:39:12,119
credentials but it doesn't work from

00:39:09,840 --> 00:39:16,109
comment line if you do K in it you need

00:39:12,119 --> 00:39:20,190
to do a special mangling there to get it

00:39:16,109 --> 00:39:22,740
working so it will work then the other

00:39:20,190 --> 00:39:24,990
part that we have is the authentication

00:39:22,740 --> 00:39:29,700
indicators it's a nice thing that says

00:39:24,990 --> 00:39:33,240
okay here's a service it's serious

00:39:29,700 --> 00:39:35,400
enough to grant access to it only to

00:39:33,240 --> 00:39:39,990
those who in possession of

00:39:35,400 --> 00:39:43,740
two factor tokens or smart cards and in

00:39:39,990 --> 00:39:45,839
IPA you can say to configuration that

00:39:43,740 --> 00:39:48,930
only issue Kerberos tickets to that

00:39:45,839 --> 00:39:54,170
service if the original ticket that the

00:39:48,930 --> 00:39:58,380
user owns was obtained we have a token

00:39:54,170 --> 00:40:00,900
we have a smart card or with something

00:39:58,380 --> 00:40:06,869
else so we we allow this differentiation

00:40:00,900 --> 00:40:09,450
and we currently work together with MIT

00:40:06,869 --> 00:40:14,549
upstream to do this more flexible there

00:40:09,450 --> 00:40:19,170
is already an interface in 117 MIT

00:40:14,549 --> 00:40:24,059
Kerberos that allows us to do KDC policy

00:40:19,170 --> 00:40:27,119
so that KDC driver like free IPA can

00:40:24,059 --> 00:40:29,490
make a decision whether to issue ticket

00:40:27,119 --> 00:40:34,049
or not whether to issue ticket with

00:40:29,490 --> 00:40:35,910
prolong its time based on what was used

00:40:34,049 --> 00:40:38,400
for example if you use smart cart you

00:40:35,910 --> 00:40:40,230
might get longer ticket if you use just

00:40:38,400 --> 00:40:43,829
a password you might get ticket that

00:40:40,230 --> 00:40:47,940
short time and manipulate any

00:40:43,829 --> 00:40:50,910
authentication indicators and this will

00:40:47,940 --> 00:40:54,960
also allow us for the with speak to add

00:40:50,910 --> 00:40:57,390
to support for video you to have tokens

00:40:54,960 --> 00:41:01,799
which is very promising thing because it

00:40:57,390 --> 00:41:05,250
really isolates you from whoever is

00:41:01,799 --> 00:41:09,859
handling this but there's still need to

00:41:05,250 --> 00:41:09,859
write an RFC how this integrates with

00:41:10,039 --> 00:41:17,730
with Kerberos and the question is not in

00:41:14,670 --> 00:41:20,609
the code it's more or less time in

00:41:17,730 --> 00:41:24,180
question so who has time to write this

00:41:20,609 --> 00:41:27,299
down yes and the one promising thing I'm

00:41:24,180 --> 00:41:30,119
I'm looking right now in to is to map

00:41:27,299 --> 00:41:33,510
between different approaches so Active

00:41:30,119 --> 00:41:36,480
Directory we have ad integration with

00:41:33,510 --> 00:41:41,220
Windows hello for business with Windows

00:41:36,480 --> 00:41:43,380
10 has support for they call it password

00:41:41,220 --> 00:41:47,089
less so you don't need a password

00:41:43,380 --> 00:41:48,940
because they can use your biometry or

00:41:47,089 --> 00:41:53,970
single issue

00:41:48,940 --> 00:41:57,670
Oh TPM in your computer to unlock

00:41:53,970 --> 00:42:00,339
behind-the-scenes it it really is using

00:41:57,670 --> 00:42:03,789
smart card authentication Deepika Aeneid

00:42:00,339 --> 00:42:07,930
so certificate basis Kerberos operations

00:42:03,789 --> 00:42:10,450
but it's not visible to users but the

00:42:07,930 --> 00:42:15,220
users get a Kerberos ticket that has

00:42:10,450 --> 00:42:18,759
special asserted membership in in the

00:42:15,220 --> 00:42:22,109
special area of that ticket and we can

00:42:18,759 --> 00:42:24,490
actually map this information to

00:42:22,109 --> 00:42:27,160
authentication indicator and therefore

00:42:24,490 --> 00:42:29,769
allow them accessing resources on our

00:42:27,160 --> 00:42:31,990
site so now all we can do the other way

00:42:29,769 --> 00:42:37,660
around we can provision this information

00:42:31,990 --> 00:42:40,359
in the MS back record so that windows

00:42:37,660 --> 00:42:42,130
resources or samba can see that there

00:42:40,359 --> 00:42:45,700
are these seeds and they can grant

00:42:42,130 --> 00:42:48,509
access to so it's it's becoming more

00:42:45,700 --> 00:42:53,140
transparent moving between different

00:42:48,509 --> 00:42:57,400
approaches that was client sort of side

00:42:53,140 --> 00:43:00,190
so identity services and in servers and

00:42:57,400 --> 00:43:02,799
we have plenty of alternatives we have

00:43:00,190 --> 00:43:07,329
less in rel than than in fedora on this

00:43:02,799 --> 00:43:10,990
front right and there are some news on

00:43:07,329 --> 00:43:13,839
the directory server for example so it

00:43:10,990 --> 00:43:17,099
has now integrated plugin for cockpit

00:43:13,839 --> 00:43:20,829
that allows you to configure and manage

00:43:17,099 --> 00:43:23,200
instance this is my IP a instance that

00:43:20,829 --> 00:43:25,329
you can see will monitor in details

00:43:23,200 --> 00:43:28,180
cache statistics and so on so that we

00:43:25,329 --> 00:43:33,279
don't need to expose this in IP itself

00:43:28,180 --> 00:43:37,269
for example it's a you can create

00:43:33,279 --> 00:43:41,200
records just a normal like LDAP modify

00:43:37,269 --> 00:43:44,079
LDAP ad but from this UI not like users

00:43:41,200 --> 00:43:47,200
but real LDAP entries that you copy

00:43:44,079 --> 00:43:49,779
there so it's still hard core but it

00:43:47,200 --> 00:43:53,710
allows you to configure some parameters

00:43:49,779 --> 00:43:57,299
that you otherwise need to create LDS to

00:43:53,710 --> 00:44:01,119
manage them there was a lot of work on

00:43:57,299 --> 00:44:02,099
audit using different caches and so on

00:44:01,119 --> 00:44:07,380
together we have

00:44:02,099 --> 00:44:12,259
Susy and there's some work also on the

00:44:07,380 --> 00:44:16,470
usability of three 890 as console tools

00:44:12,259 --> 00:44:18,150
together way of Susy and a lot of

00:44:16,470 --> 00:44:23,900
improvements for performance there will

00:44:18,150 --> 00:44:29,549
be even more soon some cache contentions

00:44:23,900 --> 00:44:33,089
already track it and fixes are coming so

00:44:29,549 --> 00:44:35,279
on free IPA site it's basically

00:44:33,089 --> 00:44:38,819
integration right so it integrates most

00:44:35,279 --> 00:44:41,640
of those fixes and changes as you can

00:44:38,819 --> 00:44:46,890
see but there's one notable thing is

00:44:41,640 --> 00:44:47,519
that you can now with free ap for 8-0 in

00:44:46,890 --> 00:44:50,309
fedora

00:44:47,519 --> 00:44:54,619
you can run sample file server on free

00:44:50,309 --> 00:44:58,650
ap a client as official server and

00:44:54,619 --> 00:45:00,900
there's a single comment utility that

00:44:58,650 --> 00:45:04,739
configures everything for you so all you

00:45:00,900 --> 00:45:08,099
need to do is to add your shares into

00:45:04,739 --> 00:45:11,430
the config file it generates it enrolls

00:45:08,099 --> 00:45:14,339
machine well you you have an IP enrolled

00:45:11,430 --> 00:45:16,469
machine then you run this tool it

00:45:14,339 --> 00:45:18,930
doesn't need any credentials it enough

00:45:16,469 --> 00:45:21,390
to have the Machine credentials itself

00:45:18,930 --> 00:45:24,599
so you run it on the root it creates all

00:45:21,390 --> 00:45:30,749
the needed things registers configures

00:45:24,599 --> 00:45:33,509
SSD configures the Samba in SMB the conf

00:45:30,749 --> 00:45:36,589
creates all the needed things and it

00:45:33,509 --> 00:45:39,089
works in my tests it also works for

00:45:36,589 --> 00:45:43,019
users from trusted Active Directory

00:45:39,089 --> 00:45:46,259
domains so you can actually have Windows

00:45:43,019 --> 00:45:49,039
users come in for shares on the Linux

00:45:46,259 --> 00:45:53,519
side and there's one thing that

00:45:49,039 --> 00:45:56,099
apparently works in in Fedora is that if

00:45:53,519 --> 00:45:59,549
you take a Windows machine and try to

00:45:56,099 --> 00:46:02,369
login into it with IP user it will work

00:45:59,549 --> 00:46:05,940
and it will al bill will be able to

00:46:02,369 --> 00:46:08,519
access the shares from IP but only if

00:46:05,940 --> 00:46:11,430
it's not a domain controller on the

00:46:08,519 --> 00:46:13,950
windows side because there you have to

00:46:11,430 --> 00:46:15,330
have some additional things which are

00:46:13,950 --> 00:46:17,550
not in fedora yet

00:46:15,330 --> 00:46:20,280
but we are working on them then there's

00:46:17,550 --> 00:46:23,280
a interesting thing the hidden an

00:46:20,280 --> 00:46:27,120
advertised replicas which was a request

00:46:23,280 --> 00:46:28,740
from Red Hat IT which run free IPA on

00:46:27,120 --> 00:46:31,610
the scale

00:46:28,740 --> 00:46:35,940
they want to have systems that they

00:46:31,610 --> 00:46:39,960
remove from customer use but for example

00:46:35,940 --> 00:46:43,320
run backup on them so now free ap has a

00:46:39,960 --> 00:46:45,900
mechanism to mark a replica as hidden

00:46:43,320 --> 00:46:47,940
if client is enrolled directly into that

00:46:45,900 --> 00:46:52,070
replicate we'll continue using it but if

00:46:47,940 --> 00:46:56,310
it's doing the discovery it will skip

00:46:52,070 --> 00:46:58,710
and we have added a lot of changes in

00:46:56,310 --> 00:47:01,710
the certificate management one

00:46:58,710 --> 00:47:05,610
interesting one is that we have now as

00:47:01,710 --> 00:47:08,220
ability to supply a snippet for initial

00:47:05,610 --> 00:47:11,700
doctor configuration so you can say that

00:47:08,220 --> 00:47:14,070
I want to have different key lengths for

00:47:11,700 --> 00:47:17,760
this year certificate yeah I want to

00:47:14,070 --> 00:47:19,890
have it stored in HSM that doesn't work

00:47:17,760 --> 00:47:25,500
yet but we are working right now

00:47:19,890 --> 00:47:28,950
on this so hopefully by next Fedora 32

00:47:25,500 --> 00:47:32,970
actually release we might even get that

00:47:28,950 --> 00:47:34,890
and we also have support for IP

00:47:32,970 --> 00:47:40,130
addresses in the certificate so that

00:47:34,890 --> 00:47:42,720
should help guys poor guys who run home

00:47:40,130 --> 00:47:46,560
routers and want to issue certificates

00:47:42,720 --> 00:47:50,850
for them without using names DNS names

00:47:46,560 --> 00:47:54,150
in those certificates or OpenStack that

00:47:50,850 --> 00:47:57,600
wants to use it and we have health check

00:47:54,150 --> 00:47:59,580
utility that verifies I think several

00:47:57,600 --> 00:48:05,820
hundred different conditions that your

00:47:59,580 --> 00:48:08,070
server might be under and there's work

00:48:05,820 --> 00:48:13,170
on going to have recommendations on it

00:48:08,070 --> 00:48:15,660
how to fix things yes so it will detect

00:48:13,170 --> 00:48:17,820
that there are conflicts but on a single

00:48:15,660 --> 00:48:20,210
master you run on all of them and

00:48:17,820 --> 00:48:24,690
collects all together but it for example

00:48:20,210 --> 00:48:26,280
identifies broken DNS in trust and that

00:48:24,690 --> 00:48:27,510
kind of thing that users are not

00:48:26,280 --> 00:48:34,470
resolvable and

00:48:27,510 --> 00:48:37,790
and this can yeah it tries to to help to

00:48:34,470 --> 00:48:41,220
point out where where the problem is and

00:48:37,790 --> 00:48:45,750
finally in fedora we have ansible free

00:48:41,220 --> 00:48:50,100
IPA which is a set of roles and tools

00:48:45,750 --> 00:48:53,030
that provision client master and replica

00:48:50,100 --> 00:48:55,440
and we started working also on the real

00:48:53,030 --> 00:49:00,030
management parts like adding users

00:48:55,440 --> 00:49:03,260
groups and all this stuff seems to be

00:49:00,030 --> 00:49:08,220
quite popular now so people report on it

00:49:03,260 --> 00:49:11,130
and use it so on samba side some before

00:49:08,220 --> 00:49:14,340
10:00 it has full Python 3 support so

00:49:11,130 --> 00:49:23,250
know Python 2 anymore so we got through

00:49:14,340 --> 00:49:26,190
it took five years yeah yes Jason basic

00:49:23,250 --> 00:49:28,440
login so you get information about users

00:49:26,190 --> 00:49:32,490
that were logged in into your domain

00:49:28,440 --> 00:49:35,070
controller and you can then transform it

00:49:32,490 --> 00:49:38,220
into some other things into a central

00:49:35,070 --> 00:49:41,130
login with it there's a lot of

00:49:38,220 --> 00:49:48,359
improvements on GPO support on samba ad

00:49:41,130 --> 00:49:51,450
side and yeah of line yes we have in two

00:49:48,359 --> 00:49:54,600
things one of them and in SSD if you

00:49:51,450 --> 00:49:58,080
enroll into Active Directory directly

00:49:54,600 --> 00:50:02,640
it supports GPIOs the other thing is

00:49:58,080 --> 00:50:05,640
that if you deploy Samba ad it uses GPS

00:50:02,640 --> 00:50:10,020
there so it can provide for Windows

00:50:05,640 --> 00:50:12,630
clients GPS and you can manage them then

00:50:10,020 --> 00:50:16,380
there are some improvements on the LDAP

00:50:12,630 --> 00:50:20,160
server in Samba like parallel operations

00:50:16,380 --> 00:50:23,640
and page control added because somebody

00:50:20,160 --> 00:50:26,100
has its own embedded LDAP server so work

00:50:23,640 --> 00:50:29,160
in progress very promising is the

00:50:26,100 --> 00:50:32,340
unification of crypto replacing the

00:50:29,160 --> 00:50:36,440
homegrown Samba crypt implementations

00:50:32,340 --> 00:50:39,930
with no TLS that gives us aside from

00:50:36,440 --> 00:50:40,920
some compliance we have Phipps and and

00:50:39,930 --> 00:50:44,280
so on

00:50:40,920 --> 00:50:45,960
attempting to get keep afips we also get

00:50:44,280 --> 00:50:49,020
performance improvements because of

00:50:45,960 --> 00:50:53,040
optimize it Crypton some keys as we get

00:50:49,020 --> 00:50:57,000
in smb3 and creep that stream faster

00:50:53,040 --> 00:50:59,160
than SMB 3 check zoomed stream which you

00:50:57,000 --> 00:51:03,900
did not encrypt it just checks some and

00:50:59,160 --> 00:51:07,800
the fast means 2 3 10 times so we get

00:51:03,900 --> 00:51:11,370
really good performance and the same is

00:51:07,800 --> 00:51:15,990
being added right now to see if client

00:51:11,370 --> 00:51:21,900
in in the kernel so between the Linux

00:51:15,990 --> 00:51:25,050
client and Linux server we get boost of

00:51:21,900 --> 00:51:28,440
performance and the other the other part

00:51:25,050 --> 00:51:32,270
is that there is a composition in the

00:51:28,440 --> 00:51:34,800
Linux client in the 6000 and it's the

00:51:32,270 --> 00:51:37,290
operations are kind of combined in a

00:51:34,800 --> 00:51:41,490
single request that has multiple

00:51:37,290 --> 00:51:44,130
operations in it and that reduces number

00:51:41,490 --> 00:51:46,800
of file operations you need to send it

00:51:44,130 --> 00:51:51,930
so you you actually get something like

00:51:46,800 --> 00:51:54,420
30 or 40 percent boost over NFS compare

00:51:51,930 --> 00:51:56,490
it to anaphase so once we complete the

00:51:54,420 --> 00:51:59,550
other part the last part the POSIX

00:51:56,490 --> 00:52:05,310
extensions for smb3 protocol we will

00:51:59,550 --> 00:52:07,710
have an ideal replacement for NFS for

00:52:05,310 --> 00:52:12,210
home chairs for example a high

00:52:07,710 --> 00:52:15,930
performance access so we are very very

00:52:12,210 --> 00:52:18,860
close to having all this stuff and I'm

00:52:15,930 --> 00:52:18,860

YouTube URL: https://www.youtube.com/watch?v=NAE9aAILBJM


