Title: Just In Time Transformation - Brendan Conoboy - Flock 2019
Publication date: 2019-08-28
Playlist: Flock 2019
Description: 
	The formula to success is ever changing so successful stewards plan for the future. In 2015 Red Hat both began and stopped work on the next generation of RHEL. Why was that? RHEL, an Open Source distribution combining the work of thousands of upstream communities, still had its roots in a process and culture that predated Agile software development. To build the next generation of Enterprise Linux it was necessary to change the very core of how it was made while maintaining compatibility and community norms. Join this session to learn how Red Hat changed the design, process, and cultural underpinning of its most successful product and what we learned along the way.

--
Recordings of talks at Flock are a community effort. Unfortunately not everything works perfectly every time. If you're interested in helping us improve, let us know.
Captions: 
	00:00:01,570 --> 00:00:07,670
hi I'm Brendan Connor boy not Jen

00:00:05,240 --> 00:00:09,620
Krieger Jen couldn't be here so I'll be

00:00:07,670 --> 00:00:12,019
presenting both parts of today's play

00:00:09,620 --> 00:00:15,730
and what we're talking about today is

00:00:12,019 --> 00:00:17,900
basically the four-year journey that was

00:00:15,730 --> 00:00:21,140
required to produce rel8

00:00:17,900 --> 00:00:23,540
so Howard have monetized rally design

00:00:21,140 --> 00:00:25,100
processing culture and for our marketing

00:00:23,540 --> 00:00:29,180
folks rel is short for Red Hat

00:00:25,100 --> 00:00:32,180
Enterprise Linux so what are we talking

00:00:29,180 --> 00:00:33,410
about we're talking about this problem

00:00:32,180 --> 00:00:35,600
we had there was this one technical

00:00:33,410 --> 00:00:37,879
objective separating the operating

00:00:35,600 --> 00:00:40,070
system from the applications we in the

00:00:37,879 --> 00:00:42,499
side rail had to process nightmares to

00:00:40,070 --> 00:00:44,539
kind of sort out and it took four years

00:00:42,499 --> 00:00:46,309
of work to get to the point that we

00:00:44,539 --> 00:00:47,960
could actually launch a new rail release

00:00:46,309 --> 00:00:50,210
with those process nightmares in hand

00:00:47,960 --> 00:00:53,929
and it involved about 1,200 people

00:00:50,210 --> 00:00:58,789
overall inside the redhead organization

00:00:53,929 --> 00:01:02,510
so a full ten percent of the company so

00:00:58,789 --> 00:01:06,140
what's let's go back in time back to

00:01:02,510 --> 00:01:09,829
March of 2015 this is when r-la began

00:01:06,140 --> 00:01:10,909
and it was it was great we had a

00:01:09,829 --> 00:01:13,219
schedule

00:01:10,909 --> 00:01:17,960
Adolphe was gonna be based on Fedora 24

00:01:13,219 --> 00:01:21,729
do July 2016 8 beta based on pidor 25 do

00:01:17,960 --> 00:01:23,780
in February and GA do in August of 2017

00:01:21,729 --> 00:01:26,539
that did not happen

00:01:23,780 --> 00:01:29,570
August 2017 was two years ago rel was

00:01:26,539 --> 00:01:31,880
launched more recently so this other

00:01:29,570 --> 00:01:33,799
thing happened at the same time we

00:01:31,880 --> 00:01:36,140
started the rel 8 project we also

00:01:33,799 --> 00:01:38,500
started the rel next project which was

00:01:36,140 --> 00:01:42,380
inspired by fedora dot next actually and

00:01:38,500 --> 00:01:44,030
rel dot next was inspired by just the

00:01:42,380 --> 00:01:45,950
notion that if we divide the operating

00:01:44,030 --> 00:01:47,329
system from the applications we could do

00:01:45,950 --> 00:01:49,310
some things we wanted to do that would

00:01:47,329 --> 00:01:50,929
be good for the product good for the

00:01:49,310 --> 00:01:54,170
distribution good for the business and

00:01:50,929 --> 00:01:56,210
for us we were trying to solve that to

00:01:54,170 --> 00:01:58,009
fast to slow problem that Matthew talked

00:01:56,210 --> 00:01:59,479
about where some things you want to

00:01:58,009 --> 00:02:00,079
deliver faster some things wand over

00:01:59,479 --> 00:02:02,179
slower

00:02:00,079 --> 00:02:04,789
it didn't seem tractable to please

00:02:02,179 --> 00:02:07,969
everybody all of the time but for our

00:02:04,789 --> 00:02:11,840
customers what they wanted was a really

00:02:07,969 --> 00:02:14,360
stable operating system but also really

00:02:11,840 --> 00:02:16,400
rapid moving applications like you want

00:02:14,360 --> 00:02:17,900
your OA you don't boot your distribution

00:02:16,400 --> 00:02:19,700
just to boot you like boot because

00:02:17,900 --> 00:02:21,530
you're gonna run something and so

00:02:19,700 --> 00:02:23,180
whatever you're gonna run you want your

00:02:21,530 --> 00:02:24,830
operating system to be rock-solid but

00:02:23,180 --> 00:02:27,140
you also want your applications to have

00:02:24,830 --> 00:02:29,989
the features that you want and generally

00:02:27,140 --> 00:02:31,909
that means getting at upstream into the

00:02:29,989 --> 00:02:34,310
distribution as rapidly as possible and

00:02:31,909 --> 00:02:37,420
as safely as possible so basically we

00:02:34,310 --> 00:02:40,310
make upstream save for consumption and

00:02:37,420 --> 00:02:42,080
on top of all that we wanted to be able

00:02:40,310 --> 00:02:44,810
to add features without changing the

00:02:42,080 --> 00:02:46,159
user experience so all the time we're

00:02:44,810 --> 00:02:48,920
like I want everything the way it is

00:02:46,159 --> 00:02:51,349
only with this one thing and when you

00:02:48,920 --> 00:02:52,430
put all of those one things together you

00:02:51,349 --> 00:02:55,549
get into this problem where you've

00:02:52,430 --> 00:02:57,260
changed everything for everybody so we

00:02:55,549 --> 00:02:59,000
kind of had this contradiction of how do

00:02:57,260 --> 00:03:01,879
we serve everybody the thing that they

00:02:59,000 --> 00:03:07,010
want and yet not change anything for

00:03:01,879 --> 00:03:09,920
anybody that they don't want it so with

00:03:07,010 --> 00:03:11,870
this problem in mind we actually stopped

00:03:09,920 --> 00:03:14,150
the railway project we just put it dead

00:03:11,870 --> 00:03:16,129
in its tracks it was such a hard stop

00:03:14,150 --> 00:03:18,290
that there was a swear jar like we were

00:03:16,129 --> 00:03:21,019
meeting at a conference that had or

00:03:18,290 --> 00:03:23,780
ahead of dev Kampf in Czech Republic in

00:03:21,019 --> 00:03:26,989
2016 and we actually had a swear jar if

00:03:23,780 --> 00:03:32,090
you said really you'd had to a basically

00:03:26,989 --> 00:03:34,069
a crown so anyway it was it was

00:03:32,090 --> 00:03:35,629
significant we decided let's really

00:03:34,069 --> 00:03:39,349
solve this problem what's really put our

00:03:35,629 --> 00:03:41,420
energy into it and what we what we found

00:03:39,349 --> 00:03:43,040
was that we didn't actually know how to

00:03:41,420 --> 00:03:44,780
proceed we didn't have the skills we

00:03:43,040 --> 00:03:48,140
didn't have the tools we didn't have the

00:03:44,780 --> 00:03:49,400
mindset so what did we have well we had

00:03:48,140 --> 00:03:51,290
Linux distributions and there were a

00:03:49,400 --> 00:03:55,189
quarter of a century old now right like

00:03:51,290 --> 00:03:56,659
like even Red Hat Enterprise Linux is is

00:03:55,189 --> 00:03:59,629
pretty new in the grand scheme of things

00:03:56,659 --> 00:04:01,189
Red Hat Linux came before that slack

00:03:59,629 --> 00:04:04,489
work came before that SOS came before

00:04:01,189 --> 00:04:06,110
that they are old and and they're kind

00:04:04,489 --> 00:04:08,750
of set in their ways and then a

00:04:06,110 --> 00:04:11,540
distribution is just a composition of

00:04:08,750 --> 00:04:14,360
different components so read Enterprise

00:04:11,540 --> 00:04:16,190
Linux 8 is is about 3,000 components

00:04:14,360 --> 00:04:19,009
overall and each one of them has their

00:04:16,190 --> 00:04:21,709
their own like every community has its

00:04:19,009 --> 00:04:23,479
own norms for development and and of

00:04:21,709 --> 00:04:25,550
course because we're not the owner of

00:04:23,479 --> 00:04:26,800
those 3,000 communities were just

00:04:25,550 --> 00:04:29,259
participants we we

00:04:26,800 --> 00:04:31,629
best stewards of those communities and

00:04:29,259 --> 00:04:33,099
so we can't just go in and make radical

00:04:31,629 --> 00:04:36,639
change we actually have to go and work

00:04:33,099 --> 00:04:38,110
with all 3000 different points of

00:04:36,639 --> 00:04:42,030
interest and do something that's

00:04:38,110 --> 00:04:45,449
compatible with all those communities so

00:04:42,030 --> 00:04:49,720
well of course is pretty successful and

00:04:45,449 --> 00:04:52,389
we have we have most of the stewards of

00:04:49,720 --> 00:04:54,129
that success but what we needed were

00:04:52,389 --> 00:04:55,840
actually new development teams when we

00:04:54,129 --> 00:04:58,000
looked at the the problems that we

00:04:55,840 --> 00:05:01,330
wanted to solve in the Enterprise Linux

00:04:58,000 --> 00:05:03,789
business it was we needed to make new

00:05:01,330 --> 00:05:06,220
code whereas all these communities have

00:05:03,789 --> 00:05:08,530
existing code existing somebody created

00:05:06,220 --> 00:05:10,479
this thing and it's great and we're

00:05:08,530 --> 00:05:11,979
using it we're working with them with it

00:05:10,479 --> 00:05:13,720
we actually needed to make some net new

00:05:11,979 --> 00:05:16,720
things and that was not actually a skill

00:05:13,720 --> 00:05:18,280
that we were staffed for and what we had

00:05:16,720 --> 00:05:20,800
were mature Linux distributions Fedora

00:05:18,280 --> 00:05:23,979
is great and real is great and even said

00:05:20,800 --> 00:05:25,210
to us as it has a great place for us but

00:05:23,979 --> 00:05:26,889
what we needed was to actually change

00:05:25,210 --> 00:05:28,000
the fundamentals of all three of them

00:05:26,889 --> 00:05:30,880
like splitting a OS from the

00:05:28,000 --> 00:05:33,400
applications is what does that even mean

00:05:30,880 --> 00:05:34,990
right like one of the foundations of how

00:05:33,400 --> 00:05:37,300
things work right now is that anything

00:05:34,990 --> 00:05:39,969
you can depend on anything and this this

00:05:37,300 --> 00:05:42,039
is pretty fundamental and and of course

00:05:39,969 --> 00:05:43,659
we just have a legacy we have people are

00:05:42,039 --> 00:05:45,430
used to using this they're used to the

00:05:43,659 --> 00:05:47,770
way things are but we actually need to

00:05:45,430 --> 00:05:50,529
to change the way things are and not

00:05:47,770 --> 00:05:52,750
interfere so what do you do when when

00:05:50,529 --> 00:05:58,690
all of these come together well you know

00:05:52,750 --> 00:06:00,520
reset this calls for agile and it sounds

00:05:58,690 --> 00:06:03,520
like a good idea but it's also a little

00:06:00,520 --> 00:06:06,430
messy so we did the usual thing that

00:06:03,520 --> 00:06:09,969
most companies do when they think let's

00:06:06,430 --> 00:06:12,250
let's do a jille we tried out scrum like

00:06:09,969 --> 00:06:14,289
that is that is the thing that makes

00:06:12,250 --> 00:06:15,819
sense to the most people because they're

00:06:14,289 --> 00:06:17,819
like oh there's there's a schedule and

00:06:15,819 --> 00:06:20,139
there's feedback and yeah it's good and

00:06:17,819 --> 00:06:22,240
that actually worked really well we we

00:06:20,139 --> 00:06:23,860
create some great scrum teams we had

00:06:22,240 --> 00:06:25,449
some great projects and we had great

00:06:23,860 --> 00:06:27,039
success and we also made the typical

00:06:25,449 --> 00:06:30,969
blenders like we just did textbook stuff

00:06:27,039 --> 00:06:32,919
we had experts in we had like a highly

00:06:30,969 --> 00:06:34,649
proficient agile coaches and whatnot we

00:06:32,919 --> 00:06:36,520
still made all the same mistakes so

00:06:34,649 --> 00:06:39,280
we're gonna talk a little bit about what

00:06:36,520 --> 00:06:42,940
those were so first

00:06:39,280 --> 00:06:45,130
were the good things so we had scrum

00:06:42,940 --> 00:06:47,980
teams and those teams actually did

00:06:45,130 --> 00:06:51,550
produce good work they they made new

00:06:47,980 --> 00:06:53,620
stuff the the the foundation of

00:06:51,550 --> 00:06:57,040
modularity came from that are in place

00:06:53,620 --> 00:06:59,680
upgrade infrastructure a product called

00:06:57,040 --> 00:07:00,610
I think it's well project wise in fedora

00:06:59,680 --> 00:07:02,410
it's called composure

00:07:00,610 --> 00:07:04,780
it's like Red Hat image tool as a

00:07:02,410 --> 00:07:06,639
product so those came out of the scrum

00:07:04,780 --> 00:07:08,470
teams we created and they made a net new

00:07:06,639 --> 00:07:09,970
stuff directed by product management and

00:07:08,470 --> 00:07:12,280
that was a thing we hadn't done before

00:07:09,970 --> 00:07:14,560
we built a muscle that was that we

00:07:12,280 --> 00:07:17,050
didn't have or it was atrophied and we

00:07:14,560 --> 00:07:21,040
did that with cross-functional team work

00:07:17,050 --> 00:07:22,360
this was this was also kind of an novel

00:07:21,040 --> 00:07:24,640
thing for us because we have a lot of

00:07:22,360 --> 00:07:26,320
developers please we staff extensively

00:07:24,640 --> 00:07:28,870
for engineering unless so for most other

00:07:26,320 --> 00:07:32,680
roles and so that that imbalance means

00:07:28,870 --> 00:07:34,690
that we end up with a lot of a lot of

00:07:32,680 --> 00:07:36,940
self-directed engineers making choices

00:07:34,690 --> 00:07:38,970
without product managers or customer

00:07:36,940 --> 00:07:42,520
support or anything else kind of

00:07:38,970 --> 00:07:43,840
tempering design decisions and and we

00:07:42,520 --> 00:07:48,370
did some distribution experimentation

00:07:43,840 --> 00:07:50,530
just along the way of making rl8 we we

00:07:48,370 --> 00:07:52,419
wondered okay well what is it that that

00:07:50,530 --> 00:07:54,100
we want to have be the operating system

00:07:52,419 --> 00:07:55,990
and what is it that is the the

00:07:54,100 --> 00:08:00,039
applications is it just the kernel

00:07:55,990 --> 00:08:02,800
versus user space is it system D is it

00:08:00,039 --> 00:08:04,960
what goes into base container image and

00:08:02,800 --> 00:08:06,190
we we did a lot of different things the

00:08:04,960 --> 00:08:07,479
fastest supercomputers in the world

00:08:06,190 --> 00:08:10,150
right now we're running a variation of

00:08:07,479 --> 00:08:13,690
rel seven this was internally codenamed

00:08:10,150 --> 00:08:16,450
pegasus a modern kernel and that that

00:08:13,690 --> 00:08:17,380
worked very well for that use case but

00:08:16,450 --> 00:08:20,140
it turned out it was a really good

00:08:17,380 --> 00:08:21,340
general solution so so even though we

00:08:20,140 --> 00:08:24,490
got a lot of great success not

00:08:21,340 --> 00:08:26,169
everything went well and I just want to

00:08:24,490 --> 00:08:28,150
cover two things that didn't work well

00:08:26,169 --> 00:08:29,740
the first was that we didn't accept

00:08:28,150 --> 00:08:32,560
failure fast enough and this is one of

00:08:29,740 --> 00:08:34,120
those things where if you're if you're

00:08:32,560 --> 00:08:35,680
on the team you see failure and you're

00:08:34,120 --> 00:08:38,380
like I won't accept failure I want to

00:08:35,680 --> 00:08:40,900
like I want to push through and make it

00:08:38,380 --> 00:08:42,849
work and all failure accepting failure

00:08:40,900 --> 00:08:45,280
means is observing something isn't

00:08:42,849 --> 00:08:49,030
working and then making a change and in

00:08:45,280 --> 00:08:50,380
those cases where we looked at what are

00:08:49,030 --> 00:08:51,460
the problems that we have what are we

00:08:50,380 --> 00:08:54,930
going to do about it and we

00:08:51,460 --> 00:08:57,520
we really dug into it we made

00:08:54,930 --> 00:08:59,730
significant change and because of that

00:08:57,520 --> 00:09:02,740
significant change those those things

00:08:59,730 --> 00:09:04,839
rapidly got much better and when we took

00:09:02,740 --> 00:09:07,720
a long time to actually have that that

00:09:04,839 --> 00:09:10,029
honest introspection of things dragged

00:09:07,720 --> 00:09:12,459
on and it was it was very painful for

00:09:10,029 --> 00:09:14,020
many members of the team so that was one

00:09:12,459 --> 00:09:15,640
thing but there's this other thing I

00:09:14,020 --> 00:09:18,580
mentioned earlier that we generally

00:09:15,640 --> 00:09:23,980
staff for development over other roles

00:09:18,580 --> 00:09:26,680
so in most in most development houses in

00:09:23,980 --> 00:09:29,920
the industry you have a pretty standard

00:09:26,680 --> 00:09:32,260
set of developers to quality engineers

00:09:29,920 --> 00:09:34,000
to product managers and whatnot it looks

00:09:32,260 --> 00:09:35,890
something like this like usually have

00:09:34,000 --> 00:09:39,130
five date developers for every one

00:09:35,890 --> 00:09:41,529
product manager and in in our case

00:09:39,130 --> 00:09:43,209
because of our long history we actually

00:09:41,529 --> 00:09:45,190
have I think we started out with a

00:09:43,209 --> 00:09:46,959
hundred thirty to one product managers

00:09:45,190 --> 00:09:52,120
and now it's down to like 75 or

00:09:46,959 --> 00:09:53,709
something yeah it was it was really out

00:09:52,120 --> 00:09:57,339
of balance and that meant that doing

00:09:53,709 --> 00:09:59,320
things like scrum actually didn't work

00:09:57,339 --> 00:10:02,050
or if they didn't scale very well so

00:09:59,320 --> 00:10:04,839
what we learned was that you can't just

00:10:02,050 --> 00:10:07,510
take scrum and and apply it and have

00:10:04,839 --> 00:10:09,400
everything work great because when we

00:10:07,510 --> 00:10:10,779
did that we topped out at about 50

00:10:09,400 --> 00:10:12,940
people we actually ran out of scrum

00:10:10,779 --> 00:10:14,920
masters we're product managers and we

00:10:12,940 --> 00:10:17,350
ran out of qyz like we just we ran out

00:10:14,920 --> 00:10:18,490
of everybody but engineers of course we

00:10:17,350 --> 00:10:19,600
wanted to create more teams but we

00:10:18,490 --> 00:10:22,630
couldn't because we didn't have the

00:10:19,600 --> 00:10:24,790
people to do that with and further we

00:10:22,630 --> 00:10:27,400
needed to go from not we didn't need 50

00:10:24,790 --> 00:10:29,080
people we need to get 1,200 people to be

00:10:27,400 --> 00:10:30,250
adopting these process changes to have

00:10:29,080 --> 00:10:32,680
these capabilities that they didn't have

00:10:30,250 --> 00:10:35,230
before including remote staff so a lot

00:10:32,680 --> 00:10:37,270
of best practices actually are designed

00:10:35,230 --> 00:10:39,100
for everybody's in the same building in

00:10:37,270 --> 00:10:42,550
the same room at very least in the same

00:10:39,100 --> 00:10:44,860
time zone here we are we inside Red Hat

00:10:42,550 --> 00:10:47,980
have staff basically every time zone on

00:10:44,860 --> 00:10:49,990
earth literally and the practices that

00:10:47,980 --> 00:10:52,089
are necessary to make that work are very

00:10:49,990 --> 00:10:56,380
different than what you would do if you

00:10:52,089 --> 00:10:58,480
had everybody in the same room so we did

00:10:56,380 --> 00:11:00,190
manage to scale this though and the way

00:10:58,480 --> 00:11:02,709
we did that was by formalizing a thing

00:11:00,190 --> 00:11:04,080
called autonomous subsystem teams which

00:11:02,709 --> 00:11:05,820
is something that we did

00:11:04,080 --> 00:11:07,500
invent it's actually something that the

00:11:05,820 --> 00:11:09,810
rel seven team invented while we were

00:11:07,500 --> 00:11:13,110
doing our our scrum work because

00:11:09,810 --> 00:11:14,550
everybody faces the same problems if one

00:11:13,110 --> 00:11:15,779
of the cool things about agile is like

00:11:14,550 --> 00:11:17,820
science you kind of rediscover the

00:11:15,779 --> 00:11:19,950
principles as you go along and so the

00:11:17,820 --> 00:11:21,959
teams that were delivering productized

00:11:19,950 --> 00:11:23,970
well at that point in time we're having

00:11:21,959 --> 00:11:26,790
the same scaling issues and basically

00:11:23,970 --> 00:11:29,790
all they did was they took all of the

00:11:26,790 --> 00:11:33,000
roles that are necessary to to move

00:11:29,790 --> 00:11:34,740
technology from like an idea to

00:11:33,000 --> 00:11:37,140
delivering it to a customer into one

00:11:34,740 --> 00:11:38,399
group so product management engineering

00:11:37,140 --> 00:11:40,829
quality engineering documentation

00:11:38,399 --> 00:11:43,260
support like that end-to-end team we

00:11:40,829 --> 00:11:45,620
just set one up for every single one of

00:11:43,260 --> 00:11:48,450
the technology areas where rel is and

00:11:45,620 --> 00:11:50,190
they came together for l7 when they're

00:11:48,450 --> 00:11:51,660
going to plan the next minor Early's

00:11:50,190 --> 00:11:54,420
update like seven seven came out last

00:11:51,660 --> 00:11:55,529
week and if there was a change in the

00:11:54,420 --> 00:11:57,930
networking stack the networking

00:11:55,529 --> 00:12:01,170
subsystem team decided to do that and

00:11:57,930 --> 00:12:04,260
they decided it on their own so all we

00:12:01,170 --> 00:12:06,750
did was take that concept and apply some

00:12:04,260 --> 00:12:08,640
of the agile principles to it so no

00:12:06,750 --> 00:12:11,040
change on who was in a subsystem team

00:12:08,640 --> 00:12:14,130
but we scaled out what they were

00:12:11,040 --> 00:12:16,500
supposed to do so they went from just

00:12:14,130 --> 00:12:18,779
planning to actually executing together

00:12:16,500 --> 00:12:20,279
and that is that is really fundamental

00:12:18,779 --> 00:12:22,589
you can't just show up some of the time

00:12:20,279 --> 00:12:23,970
you have to be there all of the time or

00:12:22,589 --> 00:12:29,040
at least at the right times in order to

00:12:23,970 --> 00:12:33,089
deliver understanding to one another

00:12:29,040 --> 00:12:35,220
because basically you need to be a team

00:12:33,089 --> 00:12:36,860
not just a group of people that do

00:12:35,220 --> 00:12:40,050
things sometimes related to one another

00:12:36,860 --> 00:12:42,240
so we created all these subsystem teams

00:12:40,050 --> 00:12:44,579
we made them in charge of themselves and

00:12:42,240 --> 00:12:46,709
then we added optional agile

00:12:44,579 --> 00:12:50,040
facilitators for when they needed it and

00:12:46,709 --> 00:12:53,160
by doing this we were able to scale up a

00:12:50,040 --> 00:12:55,800
little bit so that was the first two

00:12:53,160 --> 00:12:56,100
years of this four year journey so where

00:12:55,800 --> 00:13:00,089
were we

00:12:56,100 --> 00:13:01,740
March of 2017 let's do a checkpoint so

00:13:00,089 --> 00:13:03,899
technology goals were instantiated

00:13:01,740 --> 00:13:07,350
upstream when we had modularity we had

00:13:03,899 --> 00:13:11,510
other projects that were well in hand we

00:13:07,350 --> 00:13:13,890
were exploring cadence and and other

00:13:11,510 --> 00:13:16,290
aspects of splitting the operation

00:13:13,890 --> 00:13:17,970
system from the applications and we had

00:13:16,290 --> 00:13:19,949
roughly managed staffing

00:13:17,970 --> 00:13:21,689
ratios it's still not great it's better

00:13:19,949 --> 00:13:24,029
to just go with industry norms but it

00:13:21,689 --> 00:13:26,430
was working out okay and so we decided

00:13:24,029 --> 00:13:30,810
to restart real late in March of 2017

00:13:26,430 --> 00:13:33,180
and what actually happened so it alpha

00:13:30,810 --> 00:13:36,029
was delivered on July of 2018 that was

00:13:33,180 --> 00:13:38,370
based on Fedora 27 a beta was delivered

00:13:36,029 --> 00:13:42,029
in November I was based on the fedora 28

00:13:38,370 --> 00:13:43,889
and GA in May two months ago actually

00:13:42,029 --> 00:13:46,980
and that was actually based on eight

00:13:43,889 --> 00:13:49,740
beta so once we get to beta we stopped

00:13:46,980 --> 00:13:56,160
inheriting from Fedora which is topic of

00:13:49,740 --> 00:13:57,750
a talk nix or tomorrow actually so we

00:13:56,160 --> 00:13:59,370
did that but how did we do that like

00:13:57,750 --> 00:14:01,350
what were the actual steps like what

00:13:59,370 --> 00:14:03,300
were the things that we did because like

00:14:01,350 --> 00:14:05,220
just creating some system teams is not

00:14:03,300 --> 00:14:06,750
the end result it's like what did we

00:14:05,220 --> 00:14:09,389
learn and how do we apply it to all

00:14:06,750 --> 00:14:13,259
1,200 people so the first thing was

00:14:09,389 --> 00:14:15,629
creating empathy between roles so as I

00:14:13,259 --> 00:14:20,009
mentioned we mostly are engineers

00:14:15,629 --> 00:14:21,600
inside the relative agent like eight

00:14:20,009 --> 00:14:23,970
times out of ten you're an engineer if

00:14:21,600 --> 00:14:25,649
you work on rel and that often means

00:14:23,970 --> 00:14:28,259
that you don't know what somebody else

00:14:25,649 --> 00:14:31,470
does you don't understand their role and

00:14:28,259 --> 00:14:34,350
you don't know how what you do affects

00:14:31,470 --> 00:14:36,509
them or how what they're doing is

00:14:34,350 --> 00:14:41,129
supposed to affect you and so this was a

00:14:36,509 --> 00:14:44,389
pretty deep change for us likewise ro

00:14:41,129 --> 00:14:46,829
uses a waterfall schedule this is we

00:14:44,389 --> 00:14:49,339
didn't do scrum and in fact if you try

00:14:46,829 --> 00:14:52,500
doing scrum across twelve hundred people

00:14:49,339 --> 00:14:55,019
all in the same sprint cycle there are

00:14:52,500 --> 00:14:56,970
definite scaling issues and so we had a

00:14:55,019 --> 00:14:59,459
waterfall versus agile problem to tackle

00:14:56,970 --> 00:15:01,889
and we also just had these outdated

00:14:59,459 --> 00:15:03,329
tools so our to defrost less problems

00:15:01,889 --> 00:15:05,300
were basically a waterfall in planning

00:15:03,329 --> 00:15:07,860
because the ability to plan

00:15:05,300 --> 00:15:10,439
fundamentally is about being able to see

00:15:07,860 --> 00:15:12,180
what the big picture is and break it

00:15:10,439 --> 00:15:14,160
down into actionable pieces and then

00:15:12,180 --> 00:15:17,189
take action and we didn't really have

00:15:14,160 --> 00:15:19,470
good tooling for that so what was the

00:15:17,189 --> 00:15:22,949
foundation for our change like how did

00:15:19,470 --> 00:15:25,259
we how did we kind of apply some of

00:15:22,949 --> 00:15:27,959
these insights that we gained and this

00:15:25,259 --> 00:15:30,120
is this is the hardest thing of anything

00:15:27,959 --> 00:15:31,100
and it's just it's just getting started

00:15:30,120 --> 00:15:35,000
because

00:15:31,100 --> 00:15:36,920
is so easy to do what you have done that

00:15:35,000 --> 00:15:40,700
just starting is the hardest part

00:15:36,920 --> 00:15:43,790
sometimes so let's let's think about

00:15:40,700 --> 00:15:46,490
this when you need to change the process

00:15:43,790 --> 00:15:48,230
for 1,200 people what do you do what do

00:15:46,490 --> 00:15:52,190
you choose what is what is the way to

00:15:48,230 --> 00:15:54,920
start and further what if they've been

00:15:52,190 --> 00:15:56,210
doing it for 20 years what if they like

00:15:54,920 --> 00:15:58,100
their entire lifetime their entire

00:15:56,210 --> 00:16:01,990
career they've done things one way and

00:15:58,100 --> 00:16:05,690
you want them to do it another way well

00:16:01,990 --> 00:16:07,220
and just a side note the the Revel

00:16:05,690 --> 00:16:08,660
development process is based on the Red

00:16:07,220 --> 00:16:10,670
Hat Linux development process which was

00:16:08,660 --> 00:16:12,710
created in 1998 that's when the first

00:16:10,670 --> 00:16:14,630
Bugzilla was filed the agile manifesto

00:16:12,710 --> 00:16:17,150
wasn't even the gleam in somebody's eyes

00:16:14,630 --> 00:16:21,710
until three years after that so it's a

00:16:17,150 --> 00:16:24,460
really deeply entrenched production

00:16:21,710 --> 00:16:27,730
process kind of based more in in like

00:16:24,460 --> 00:16:30,770
physical manufacture of goods then then

00:16:27,730 --> 00:16:32,660
rapid software development practices so

00:16:30,770 --> 00:16:34,940
where did we start we started with a

00:16:32,660 --> 00:16:37,190
tool which is the exact opposite of

00:16:34,940 --> 00:16:40,040
anything you're ever supposed to do like

00:16:37,190 --> 00:16:43,010
tooling is not the right thing like a

00:16:40,040 --> 00:16:44,720
tool is a means to an end and there's

00:16:43,010 --> 00:16:46,940
only one reason why we started with a

00:16:44,720 --> 00:16:48,830
tool and that's because we didn't have a

00:16:46,940 --> 00:16:51,350
tool to do the thing that we needed to

00:16:48,830 --> 00:16:56,210
do in order to create empathy to plan

00:16:51,350 --> 00:17:01,810
together to do any sort of capacity work

00:16:56,210 --> 00:17:03,860
and that tool was JIRA actually so

00:17:01,810 --> 00:17:06,380
that's how we started we started with a

00:17:03,860 --> 00:17:08,420
tool but just having a tool doesn't mean

00:17:06,380 --> 00:17:10,430
you know how to use it so we invested in

00:17:08,420 --> 00:17:11,870
organizational abilities and what does

00:17:10,430 --> 00:17:15,650
that mean

00:17:11,870 --> 00:17:18,440
first thing is how versus what so a lot

00:17:15,650 --> 00:17:19,970
of the time when you see a problem if

00:17:18,440 --> 00:17:21,590
you're an engineer first thing you think

00:17:19,970 --> 00:17:26,240
is oh I know how to solve that let's do

00:17:21,590 --> 00:17:27,590
this let's do that and when you're

00:17:26,240 --> 00:17:29,360
trying to execute a scale what you

00:17:27,590 --> 00:17:32,060
actually need are some people to be in

00:17:29,360 --> 00:17:34,520
charge of the what needs to be done and

00:17:32,060 --> 00:17:36,560
some people in charge of how you do that

00:17:34,520 --> 00:17:40,700
and the way it normally breaks down is

00:17:36,560 --> 00:17:42,200
that the product management your support

00:17:40,700 --> 00:17:44,960
organization

00:17:42,200 --> 00:17:47,960
well that are deeply lined up to or

00:17:44,960 --> 00:17:49,759
upstream or tuned in to where things are

00:17:47,960 --> 00:17:52,369
going we really need to focus on the

00:17:49,759 --> 00:17:55,450
what and then the people that are are

00:17:52,369 --> 00:17:57,590
really fantastic at handling code and in

00:17:55,450 --> 00:18:00,559
implementing things and whatnot are

00:17:57,590 --> 00:18:02,359
really good at the how so how versus

00:18:00,559 --> 00:18:04,700
what and the other piece is just

00:18:02,359 --> 00:18:09,529
ownership versus leadership there are so

00:18:04,700 --> 00:18:11,809
many so many people that want to be

00:18:09,529 --> 00:18:14,149
owners but an open source most people

00:18:11,809 --> 00:18:16,340
don't own anything we are we are working

00:18:14,149 --> 00:18:19,009
together we are just trying to get

00:18:16,340 --> 00:18:21,019
things done and there are things that we

00:18:19,009 --> 00:18:22,429
want to do and leadership you can send

00:18:21,019 --> 00:18:24,799
them to get people to do the same things

00:18:22,429 --> 00:18:28,190
you want to do ownership is kind of like

00:18:24,799 --> 00:18:29,389
a proprietary notion right and and that

00:18:28,190 --> 00:18:30,769
kind of leads to the last thing which is

00:18:29,389 --> 00:18:33,080
the difference between consensus and

00:18:30,769 --> 00:18:34,429
consent when you have 1200 people how do

00:18:33,080 --> 00:18:36,919
you get everybody to agree on it

00:18:34,429 --> 00:18:40,100
you generally don't what you do is you

00:18:36,919 --> 00:18:44,029
find the things that everybody can live

00:18:40,100 --> 00:18:46,279
with and if you get there you have gone

00:18:44,029 --> 00:18:47,570
far because 12-under people are

00:18:46,279 --> 00:18:50,179
definitely gonna give you their opinions

00:18:47,570 --> 00:18:52,039
that is that is I have that is Fedora

00:18:50,179 --> 00:18:55,489
that is that is how we develop we have

00:18:52,039 --> 00:18:57,409
opinions but if some of them are just

00:18:55,489 --> 00:18:59,539
because we came up with one and some of

00:18:57,409 --> 00:19:02,509
them are because we are the the expert

00:18:59,539 --> 00:19:04,340
and it deeply affects us and we we are

00:19:02,509 --> 00:19:06,379
informed those are the ones that we want

00:19:04,340 --> 00:19:09,409
to have consensus from and consent from

00:19:06,379 --> 00:19:10,970
from those that can live with choices so

00:19:09,409 --> 00:19:12,470
those are the organizational abilities

00:19:10,970 --> 00:19:14,600
and then when we actually put it into

00:19:12,470 --> 00:19:20,019
practice we were we kind of started out

00:19:14,600 --> 00:19:20,019
with with the only use bugzilla

00:19:20,740 --> 00:19:25,640
if you look at bugzilla under the hood

00:19:23,120 --> 00:19:28,280
it's just a it's a database with with a

00:19:25,640 --> 00:19:30,680
little web interface on top it is it's

00:19:28,280 --> 00:19:33,830
pretty primitive as far as tools go but

00:19:30,680 --> 00:19:35,120
it is like grains of sand and in the

00:19:33,830 --> 00:19:36,890
metaphor here is that it's like playing

00:19:35,120 --> 00:19:39,140
checkers playing with buggies always

00:19:36,890 --> 00:19:40,520
liked playing with checkers and when you

00:19:39,140 --> 00:19:42,920
actually want to plan when you want to

00:19:40,520 --> 00:19:44,510
actually talk about and design the the

00:19:42,920 --> 00:19:46,250
beach resort you need something more

00:19:44,510 --> 00:19:49,910
sophisticated it's more like playing a

00:19:46,250 --> 00:19:53,180
game of chess and so starting with a

00:19:49,910 --> 00:19:55,850
tool developing the abilities to to

00:19:53,180 --> 00:19:57,230
actually listen to the right people or

00:19:55,850 --> 00:19:59,120
be the right person to be listened to

00:19:57,230 --> 00:20:01,280
and then the tool to actually have the

00:19:59,120 --> 00:20:05,330
conversation in that's how we got

00:20:01,280 --> 00:20:07,790
started so when we did that when we had

00:20:05,330 --> 00:20:10,160
those things in place then we could

00:20:07,790 --> 00:20:13,130
actually realistically talk about things

00:20:10,160 --> 00:20:15,560
that we could do inside of Rell and this

00:20:13,130 --> 00:20:18,650
is where this is where things got kind

00:20:15,560 --> 00:20:20,420
of interesting in more into how does

00:20:18,650 --> 00:20:22,190
fedora and morel relate to one another

00:20:20,420 --> 00:20:26,180
because one of the things that we

00:20:22,190 --> 00:20:28,120
figured out was that if you want to give

00:20:26,180 --> 00:20:31,010
customers the feature that they want

00:20:28,120 --> 00:20:32,390
without forcing everybody to adopt that

00:20:31,010 --> 00:20:34,640
picture themselves you actually have to

00:20:32,390 --> 00:20:36,650
make it opt-in like we all the

00:20:34,640 --> 00:20:39,230
preference of opt in versus opt out spam

00:20:36,650 --> 00:20:40,850
right well we all it turns out that

00:20:39,230 --> 00:20:43,640
everybody actually wants opt in versus

00:20:40,850 --> 00:20:46,760
opt out features so if you can do that

00:20:43,640 --> 00:20:49,790
and we did it a lot in part due to the

00:20:46,760 --> 00:20:51,650
fedora change log process we scan

00:20:49,790 --> 00:20:53,750
hundreds of those and read them and made

00:20:51,650 --> 00:20:56,210
decisions about whether we were going to

00:20:53,750 --> 00:20:58,010
keep them reversed them and document

00:20:56,210 --> 00:21:00,800
them do training for them it was really

00:20:58,010 --> 00:21:03,470
helpful and in many cases we just

00:21:00,800 --> 00:21:06,410
documented it in a few cases we changed

00:21:03,470 --> 00:21:09,500
things to be opt in and in other cases

00:21:06,410 --> 00:21:11,210
we just did a whole hog reversion so

00:21:09,500 --> 00:21:13,550
probably the biggest example I can think

00:21:11,210 --> 00:21:17,140
of as DNF when we looked at how wildly

00:21:13,550 --> 00:21:21,440
different the DNF experience was between

00:21:17,140 --> 00:21:24,110
young and and DNF we sorted a two and a

00:21:21,440 --> 00:21:25,250
half year project just to get DNF

00:21:24,110 --> 00:21:28,059
behavior to look more like young

00:21:25,250 --> 00:21:30,849
behavior because that would have been

00:21:28,059 --> 00:21:31,840
you know like the systemd of really we

00:21:30,849 --> 00:21:34,599
didn't want to have no one of those

00:21:31,840 --> 00:21:37,539
cases where we did great technology but

00:21:34,599 --> 00:21:38,889
also got negative publicity for that

00:21:37,539 --> 00:21:42,099
great technology just because it was

00:21:38,889 --> 00:21:43,299
incompatible the other piece was that

00:21:42,099 --> 00:21:45,479
when the teams were actually doing their

00:21:43,299 --> 00:21:48,729
work they got to own their process so

00:21:45,479 --> 00:21:51,840
inside the traditional real waterfall

00:21:48,729 --> 00:21:56,139
schedule there there's basically this

00:21:51,840 --> 00:21:59,409
this huge waterfall like Niagara Falls

00:21:56,139 --> 00:22:03,219
kind of set of milestones and what we

00:21:59,409 --> 00:22:05,229
did was say okay within these windows

00:22:03,219 --> 00:22:09,369
you can do whatever you want as long as

00:22:05,229 --> 00:22:10,929
your output is the thing that is needed

00:22:09,369 --> 00:22:12,999
so however you want to develop if you

00:22:10,929 --> 00:22:16,239
want to do scrum Kanban you want to do

00:22:12,999 --> 00:22:17,469
just like your own process you can do

00:22:16,239 --> 00:22:20,019
whatever you like as long as it happens

00:22:17,469 --> 00:22:21,369
between these boundaries and that's even

00:22:20,019 --> 00:22:22,899
though that doesn't mean we got rid of

00:22:21,369 --> 00:22:24,729
the waterfall schedule it meant that we

00:22:22,899 --> 00:22:26,739
changed the relationship between what

00:22:24,729 --> 00:22:29,619
the teams were doing and how we talked

00:22:26,739 --> 00:22:33,009
about the schedule and and finally

00:22:29,619 --> 00:22:35,769
because we were adopting new tools a lot

00:22:33,009 --> 00:22:37,839
of the time our tools shape our thinking

00:22:35,769 --> 00:22:39,940
so our tool shape art processes are

00:22:37,839 --> 00:22:41,919
processes ties to our tools when we

00:22:39,940 --> 00:22:43,359
introduced a new tool there was a

00:22:41,919 --> 00:22:45,369
natural inclination to say okay let's

00:22:43,359 --> 00:22:47,169
just copy everything over and it was

00:22:45,369 --> 00:22:49,269
really important to create space between

00:22:47,169 --> 00:22:51,609
the old and the new so while we have

00:22:49,269 --> 00:22:53,769
some bridges between the old and new

00:22:51,609 --> 00:22:56,379
tools we're trying to actually create a

00:22:53,769 --> 00:23:00,279
better way of working in new tools so

00:22:56,379 --> 00:23:02,200
that teams can in like more readily

00:23:00,279 --> 00:23:05,339
adopt modern software development

00:23:02,200 --> 00:23:09,129
methods they don't have to but they can

00:23:05,339 --> 00:23:11,229
so how are we doing like we we made all

00:23:09,129 --> 00:23:14,619
these changes we've this seems kind of

00:23:11,229 --> 00:23:16,599
fluffy but just as a reminder of these

00:23:14,619 --> 00:23:18,879
where the focus is for change empathy

00:23:16,599 --> 00:23:21,639
Waterfall versus agile rolling out the

00:23:18,879 --> 00:23:25,899
tools so how do we do an empathy between

00:23:21,639 --> 00:23:29,379
roles we got some things done and some

00:23:25,899 --> 00:23:30,999
things we're still working on so now all

00:23:29,379 --> 00:23:34,690
roles are represented on subsystem teams

00:23:30,999 --> 00:23:37,059
and for the first time in rails 15 year

00:23:34,690 --> 00:23:39,700
life the team is not who your manager is

00:23:37,059 --> 00:23:41,410
the team is what your technology area is

00:23:39,700 --> 00:23:42,960
and whether you're an engineer or

00:23:41,410 --> 00:23:45,430
quality engineer or you know any other

00:23:42,960 --> 00:23:46,720
technology specific role that is your

00:23:45,430 --> 00:23:49,870
team your manager is kind of irrelevant

00:23:46,720 --> 00:23:51,850
to the matter and we made the more real

00:23:49,870 --> 00:23:53,170
with quarterly planning so one of the

00:23:51,850 --> 00:23:55,690
things I didn't mention I probably

00:23:53,170 --> 00:23:58,660
should have is that within overall

00:23:55,690 --> 00:24:00,190
schedules we would talk about rel seven

00:23:58,660 --> 00:24:01,630
as its own program and six and stone

00:24:00,190 --> 00:24:05,230
program and eight as its own program and

00:24:01,630 --> 00:24:06,940
all the schedules are separate and it's

00:24:05,230 --> 00:24:09,160
really structured as though the people

00:24:06,940 --> 00:24:10,420
are different in every one of them and

00:24:09,160 --> 00:24:12,430
the technology is different every one of

00:24:10,420 --> 00:24:14,320
them the truth is it's all the same

00:24:12,430 --> 00:24:16,570
people with almost with that exception

00:24:14,320 --> 00:24:18,430
it's almost all the same technology the

00:24:16,570 --> 00:24:20,110
difference between the Bosch and our l7

00:24:18,430 --> 00:24:22,900
and the Bosch and rail eight is not a

00:24:20,110 --> 00:24:28,090
lot like it's it's just a few patches

00:24:22,900 --> 00:24:32,500
and they're great patches but when when

00:24:28,090 --> 00:24:34,750
you treat multiple releases as though it

00:24:32,500 --> 00:24:36,310
were a separate set of individuals you

00:24:34,750 --> 00:24:38,560
actually create a situation where people

00:24:36,310 --> 00:24:41,530
are very likely to over commit and over

00:24:38,560 --> 00:24:43,270
committing is is the path to burnout

00:24:41,530 --> 00:24:46,480
it's the path to frustrations a path to

00:24:43,270 --> 00:24:48,640
bad work really so quarterly planning is

00:24:46,480 --> 00:24:50,230
a thing that we've implemented or kind

00:24:48,640 --> 00:24:52,540
of in the process of implementing where

00:24:50,230 --> 00:24:55,210
we view all of our releases like all of

00:24:52,540 --> 00:24:56,410
our work at one time and decide just

00:24:55,210 --> 00:24:58,600
what we're gonna do over a short period

00:24:56,410 --> 00:25:00,550
of time and that is the thing that most

00:24:58,600 --> 00:25:02,350
teams are doing now and we also

00:25:00,550 --> 00:25:04,720
implemented facilitation norms for those

00:25:02,350 --> 00:25:06,730
teams that did need to have an agile

00:25:04,720 --> 00:25:07,960
practitioner we standardized on agile

00:25:06,730 --> 00:25:10,300
practices that are based on best

00:25:07,960 --> 00:25:12,190
practices so they don't have to use them

00:25:10,300 --> 00:25:14,320
but if they want if they want to go

00:25:12,190 --> 00:25:15,460
agile they have ways to do it but there

00:25:14,320 --> 00:25:19,600
are still some things that we're working

00:25:15,460 --> 00:25:23,140
on so the the ratio of product managers

00:25:19,600 --> 00:25:25,180
to developers is still too high the

00:25:23,140 --> 00:25:26,770
number of people writing documentation

00:25:25,180 --> 00:25:28,150
is not enough things like that it's

00:25:26,770 --> 00:25:30,910
something that we're still working on

00:25:28,150 --> 00:25:32,680
but we have like the path we have we

00:25:30,910 --> 00:25:35,380
have quantified what the problem is and

00:25:32,680 --> 00:25:37,810
if you can see what is needed see where

00:25:35,380 --> 00:25:40,600
you are then it's very easy to chart a

00:25:37,810 --> 00:25:42,400
course to getting there much more so

00:25:40,600 --> 00:25:43,360
than just like this nebulous feeling of

00:25:42,400 --> 00:25:46,390
something's wrong

00:25:43,360 --> 00:25:48,340
and also we're just working on getting

00:25:46,390 --> 00:25:50,290
better reports out of the tools that

00:25:48,340 --> 00:25:52,000
we've adopted because we have like these

00:25:50,290 --> 00:25:53,740
high-level planning tools and

00:25:52,000 --> 00:25:55,780
we are executing on the low levels and

00:25:53,740 --> 00:25:57,730
we're tying them together and actually

00:25:55,780 --> 00:26:01,240
getting a good visualization for how am

00:25:57,730 --> 00:26:03,700
i doing on creating that that resort at

00:26:01,240 --> 00:26:05,500
the beach is it's tricky it turns out

00:26:03,700 --> 00:26:08,890
it's more tricky than just talking about

00:26:05,500 --> 00:26:11,620
the state of every grain of sand so the

00:26:08,890 --> 00:26:14,140
second part Waterfall versus agile we're

00:26:11,620 --> 00:26:15,850
doing so we updated the program cycle

00:26:14,140 --> 00:26:18,100
considerably one of the things that was

00:26:15,850 --> 00:26:21,150
announced when rel came out was that

00:26:18,100 --> 00:26:23,020
instead of this thing where we're

00:26:21,150 --> 00:26:25,270
reluctant to talk about when will the

00:26:23,020 --> 00:26:26,530
next rail release be has anybody ever

00:26:25,270 --> 00:26:30,340
wonder when the next roll release is

00:26:26,530 --> 00:26:33,330
going to be yeah yeah it's it's been

00:26:30,340 --> 00:26:33,330
shrouded in mystery

00:26:35,130 --> 00:26:39,850
obviously that is that is true because

00:26:37,600 --> 00:26:42,070
what we what we did early on was we

00:26:39,850 --> 00:26:44,680
would set the schedule based on what the

00:26:42,070 --> 00:26:46,420
needs were and those needs came from our

00:26:44,680 --> 00:26:47,860
customers from our hardware partners and

00:26:46,420 --> 00:26:50,230
we would mix all of those things down

00:26:47,860 --> 00:26:51,430
and we come up with the exact optimal

00:26:50,230 --> 00:26:54,030
schedule if everything went right

00:26:51,430 --> 00:26:56,350
nothing ever went right ended in crisis

00:26:54,030 --> 00:26:58,030
and as the number of customers has

00:26:56,350 --> 00:26:59,020
increased it's a good problem to have as

00:26:58,030 --> 00:26:59,950
a number of partners have increased

00:26:59,020 --> 00:27:01,570
that's a good problem to have it's

00:26:59,950 --> 00:27:03,400
gotten harder harder to do that when

00:27:01,570 --> 00:27:04,870
really it was launched we also announced

00:27:03,400 --> 00:27:07,870
that we would just be making a release

00:27:04,870 --> 00:27:10,780
every six months so approximately six

00:27:07,870 --> 00:27:12,490
months you know it's it's notional eight

00:27:10,780 --> 00:27:16,630
one beta is already out so we're on

00:27:12,490 --> 00:27:19,210
track for that but that is that was kind

00:27:16,630 --> 00:27:22,050
of like groundbreaking so for for us we

00:27:19,210 --> 00:27:24,220
can actually say we know when rel

00:27:22,050 --> 00:27:27,250
eight-six won't be out or 8:10 we'll be

00:27:24,220 --> 00:27:30,580
out and and anybody can line up on that

00:27:27,250 --> 00:27:32,950
and then we just reimagined waterfall by

00:27:30,580 --> 00:27:33,580
by the role people are fulfilling not by

00:27:32,950 --> 00:27:36,670
the outcome

00:27:33,580 --> 00:27:39,070
so within any boundary we provide the

00:27:36,670 --> 00:27:40,510
the thing that needs to be done should

00:27:39,070 --> 00:27:42,040
happen but it doesn't have to happen on

00:27:40,510 --> 00:27:43,600
this date or that date it's just you

00:27:42,040 --> 00:27:45,820
know you have this spectrum that you can

00:27:43,600 --> 00:27:47,320
work in and we're still working on that

00:27:45,820 --> 00:27:50,380
schedule like getting to a six-month

00:27:47,320 --> 00:27:51,940
schedule has has come at a cost of

00:27:50,380 --> 00:27:54,940
cutting some things down and leaving

00:27:51,940 --> 00:27:57,970
something as large and actually when you

00:27:54,940 --> 00:27:59,710
go from a nine to twelve month schedule

00:27:57,970 --> 00:28:01,450
to a six month schedule it's still

00:27:59,710 --> 00:28:03,100
really easy to overcommit so we're still

00:28:01,450 --> 00:28:04,429
working on you know what does it look

00:28:03,100 --> 00:28:09,110
like what is it optimally

00:28:04,429 --> 00:28:10,970
like to to plan build test and deliver

00:28:09,110 --> 00:28:12,830
release every six months

00:28:10,970 --> 00:28:14,360
right now we're erring on the side of

00:28:12,830 --> 00:28:16,759
stability because that's what customers

00:28:14,360 --> 00:28:19,789
primarily looking for and we're still

00:28:16,759 --> 00:28:20,809
rolling out quarterly planning and we're

00:28:19,789 --> 00:28:23,090
still working on consistently meeting

00:28:20,809 --> 00:28:24,619
deadlines like we're we're doing pretty

00:28:23,090 --> 00:28:26,899
good on this like things are coming out

00:28:24,619 --> 00:28:28,970
on time or within one day but that's

00:28:26,899 --> 00:28:30,769
because a lot of high contact management

00:28:28,970 --> 00:28:34,100
not because everybody's used to it yet

00:28:30,769 --> 00:28:35,840
so we're making progress and then

00:28:34,100 --> 00:28:39,619
updating outmoded tools what does that

00:28:35,840 --> 00:28:41,149
actually mean so for us it means that

00:28:39,619 --> 00:28:44,480
we're using a combination of Bugzilla

00:28:41,149 --> 00:28:47,179
and Giro so bugzilla is a big community

00:28:44,480 --> 00:28:49,399
interface it is it is where developers

00:28:47,179 --> 00:28:51,559
do their work it is it is fundamental

00:28:49,399 --> 00:28:53,330
it's foundational and the way that we've

00:28:51,559 --> 00:28:56,600
adopted dura is that they're just some

00:28:53,330 --> 00:28:58,639
bzees that are in Bugzilla where we set

00:28:56,600 --> 00:29:00,619
a little flag in the VZ and it gets

00:28:58,639 --> 00:29:03,230
mirrored to zero enduro we have like our

00:29:00,619 --> 00:29:05,389
high-level plans and we can drop those

00:29:03,230 --> 00:29:08,360
bzees into epics and so we have this

00:29:05,389 --> 00:29:09,980
wider data container to hold work in so

00:29:08,360 --> 00:29:12,440
if there's like 20 different development

00:29:09,980 --> 00:29:14,720
items across like three subsystem teams

00:29:12,440 --> 00:29:18,169
we can have three epics that go into one

00:29:14,720 --> 00:29:20,600
feature that that are all in missoula so

00:29:18,169 --> 00:29:22,399
if you're an engineer you work in

00:29:20,600 --> 00:29:24,440
Bugzilla you have to do anything because

00:29:22,399 --> 00:29:26,299
your workflow didn't change at all it's

00:29:24,440 --> 00:29:29,539
changing people's workflows is unpopular

00:29:26,299 --> 00:29:30,950
but if you are one of the team leads you

00:29:29,539 --> 00:29:33,289
did planning you connected everything up

00:29:30,950 --> 00:29:35,629
and you can then see the the high-level

00:29:33,289 --> 00:29:37,070
effect one thing that we we knew was

00:29:35,629 --> 00:29:38,990
really important was to not have to

00:29:37,070 --> 00:29:40,519
replicate data like if there are two

00:29:38,990 --> 00:29:42,049
sources of truth one of them is always

00:29:40,519 --> 00:29:45,409
going to be wrong and that's the one

00:29:42,049 --> 00:29:48,110
somebody's never high on so it's it's so

00:29:45,409 --> 00:29:50,539
important to you to have there only be

00:29:48,110 --> 00:29:51,559
one source of data and have that source

00:29:50,539 --> 00:29:55,220
of data be something that people

00:29:51,559 --> 00:29:56,990
actually want to update so that they're

00:29:55,220 --> 00:29:58,369
it's not like a burden to go in and get

00:29:56,990 --> 00:30:00,049
things be current it actually has to be

00:29:58,369 --> 00:30:03,649
part of their workflow for them to be

00:30:00,049 --> 00:30:06,980
happy and so changing bugzilla was was a

00:30:03,649 --> 00:30:09,860
non-starter and of course also when we

00:30:06,980 --> 00:30:11,659
went with JIRA what we discovered was

00:30:09,860 --> 00:30:14,539
some organizational issues that we were

00:30:11,659 --> 00:30:16,999
completely unaware of so I mentioned

00:30:14,539 --> 00:30:17,780
that that balance between development

00:30:16,999 --> 00:30:19,820
and

00:30:17,780 --> 00:30:22,220
and other roles being out of whack but

00:30:19,820 --> 00:30:24,260
what actually happens is that the weight

00:30:22,220 --> 00:30:26,720
bugzilla is set up is also developer

00:30:24,260 --> 00:30:28,820
centric like the the most people that do

00:30:26,720 --> 00:30:31,070
work have a workflow that works really

00:30:28,820 --> 00:30:33,980
well for them so everybody that isn't

00:30:31,070 --> 00:30:35,870
that their workflow their work their

00:30:33,980 --> 00:30:39,320
output is kind of hidden somewhere else

00:30:35,870 --> 00:30:41,270
like you will never see in a BZ the the

00:30:39,320 --> 00:30:42,890
documentation that's going to be updated

00:30:41,270 --> 00:30:43,790
you won't see the test plan you won't

00:30:42,890 --> 00:30:47,300
see any of this stuff it doesn't even

00:30:43,790 --> 00:30:48,860
have a place for that to go so how do

00:30:47,300 --> 00:30:50,120
you know that documentation is important

00:30:48,860 --> 00:30:52,010
how do you know there's a plan for

00:30:50,120 --> 00:30:53,390
testing how do you know that you need to

00:30:52,010 --> 00:30:55,730
hire more people because that thing

00:30:53,390 --> 00:30:57,260
doesn't exist actually in Deraa we

00:30:55,730 --> 00:30:59,750
actually treat all of those different

00:30:57,260 --> 00:31:02,900
things as as on parity within the same

00:30:59,750 --> 00:31:05,030
epic we have bugzilla x' for engineering

00:31:02,900 --> 00:31:06,650
activities we have test plan test case

00:31:05,030 --> 00:31:08,990
development verification documentation

00:31:06,650 --> 00:31:11,150
doing demos they they're all there side

00:31:08,990 --> 00:31:13,340
by side and by raising the profile

00:31:11,150 --> 00:31:15,260
thought non-development work we're

00:31:13,340 --> 00:31:18,500
actually creating visibility so that

00:31:15,260 --> 00:31:20,000
development knows oh I need to actually

00:31:18,500 --> 00:31:22,010
be done on time because all these other

00:31:20,000 --> 00:31:27,530
people can't even start until I'm done

00:31:22,010 --> 00:31:29,030
so we've gotten that far but we're still

00:31:27,530 --> 00:31:31,130
making use of this we're still kind of

00:31:29,030 --> 00:31:33,980
feeling out what is the best way to use

00:31:31,130 --> 00:31:35,270
epics should we use sub-caste like you

00:31:33,980 --> 00:31:37,010
get all these features and you kind of

00:31:35,270 --> 00:31:39,650
go crazy with like oh let's do all the

00:31:37,010 --> 00:31:41,480
things and making good use of tools

00:31:39,650 --> 00:31:43,280
means kind of standardizing on practices

00:31:41,480 --> 00:31:44,750
that actually work well for people and

00:31:43,280 --> 00:31:47,990
you only learn that through iteration so

00:31:44,750 --> 00:31:49,280
we're iterating and of course process

00:31:47,990 --> 00:31:52,340
automation like actually having to

00:31:49,280 --> 00:31:54,470
update things in Endura is and a great

00:31:52,340 --> 00:31:56,360
experience if if it could just

00:31:54,470 --> 00:31:58,250
automatically update when BZ is update

00:31:56,360 --> 00:32:02,000
like your epic status would be super

00:31:58,250 --> 00:32:04,190
because right now we have two two

00:32:02,000 --> 00:32:05,540
sources of truth if all of the all of

00:32:04,190 --> 00:32:07,670
the bug zilla's are being updated

00:32:05,540 --> 00:32:09,740
regularly but there's some data type

00:32:07,670 --> 00:32:12,800
above it like an epoch that says I'm

00:32:09,740 --> 00:32:14,390
just waiting to be done and and all the

00:32:12,800 --> 00:32:16,610
bzees under it are done that epoch

00:32:14,390 --> 00:32:18,290
should say I'm also done and without

00:32:16,610 --> 00:32:19,580
automation and that only happens by

00:32:18,290 --> 00:32:20,840
human updating it which means it's no

00:32:19,580 --> 00:32:23,990
over accurate which means we've kind of

00:32:20,840 --> 00:32:26,540
missed that whole point of a single

00:32:23,990 --> 00:32:30,020
source of truth so we're working on that

00:32:26,540 --> 00:32:31,290
automation so with all of that in mind

00:32:30,020 --> 00:32:36,450
we're didn't we

00:32:31,290 --> 00:32:39,330
not with a so I would say right now the

00:32:36,450 --> 00:32:41,370
the rel organization has reluctantly

00:32:39,330 --> 00:32:43,350
gotten into a mindset of continuous

00:32:41,370 --> 00:32:45,660
improvement it is no longer the case

00:32:43,350 --> 00:32:48,180
that teams are like oh we've watch drill

00:32:45,660 --> 00:32:51,240
it's back to normal no change we will

00:32:48,180 --> 00:32:52,950
just be our our stodgy cantankerous

00:32:51,240 --> 00:32:55,020
selves dissatisfied with the way things

00:32:52,950 --> 00:32:57,000
are but living with it it's it's

00:32:55,020 --> 00:32:59,310
actually the case that there are changes

00:32:57,000 --> 00:33:00,840
that are going to be happening every

00:32:59,310 --> 00:33:02,300
single release and we're trying to roll

00:33:00,840 --> 00:33:04,740
them out responsibly and respectfully

00:33:02,300 --> 00:33:06,330
but there's an expectation now that

00:33:04,740 --> 00:33:08,010
there didn't used to be there's an

00:33:06,330 --> 00:33:10,590
there's this notion that you can

00:33:08,010 --> 00:33:12,330
actually introduce change for the better

00:33:10,590 --> 00:33:15,140
instead of just complaining about it

00:33:12,330 --> 00:33:18,240
which was the state for quite some time

00:33:15,140 --> 00:33:19,680
we also have a much much greater state

00:33:18,240 --> 00:33:23,070
of empathy between roles especially

00:33:19,680 --> 00:33:25,080
between development and QE like like it

00:33:23,070 --> 00:33:27,000
is they are they're our brothers and

00:33:25,080 --> 00:33:29,160
sisters in engineering now the fact

00:33:27,000 --> 00:33:32,010
there's engineering both of us both of

00:33:29,160 --> 00:33:38,460
our job titles is is no longer lost on

00:33:32,010 --> 00:33:40,620
us and in those two things we are when

00:33:38,460 --> 00:33:43,320
we're working in Fedora when we're

00:33:40,620 --> 00:33:45,540
working upstream we are really heavily

00:33:43,320 --> 00:33:48,420
focused it's not perfect yet but we were

00:33:45,540 --> 00:33:51,180
heavily focused on delivering changes

00:33:48,420 --> 00:33:54,180
that are opt-in that that what people

00:33:51,180 --> 00:34:00,210
use them but not have to use them that

00:33:54,180 --> 00:34:01,710
what customers or end-users all choose

00:34:00,210 --> 00:34:05,040
the things that they turn on and

00:34:01,710 --> 00:34:08,130
continue to get the value out of fedora

00:34:05,040 --> 00:34:10,050
out of rail now descent to us that is

00:34:08,130 --> 00:34:12,960
right for them so they don't have to

00:34:10,050 --> 00:34:14,370
kind of take a long time to adopt new

00:34:12,960 --> 00:34:16,800
releases which is really where this all

00:34:14,370 --> 00:34:20,310
came from was you know changing versions

00:34:16,800 --> 00:34:22,860
is hard well 7 was based on Fedora 19

00:34:20,310 --> 00:34:24,929
and rel 8 was based on Fedora 28 can you

00:34:22,860 --> 00:34:28,310
imagine just like doing a yum update

00:34:24,929 --> 00:34:32,300
from fedora 19 to 28 like that would

00:34:28,310 --> 00:34:37,080
they would fail first of all

00:34:32,300 --> 00:34:41,670
and your system wouldn't boot and yeah

00:34:37,080 --> 00:34:44,400
if you got and and even then just

00:34:41,670 --> 00:34:46,500
there's there's so much so much change

00:34:44,400 --> 00:34:49,290
and so much of it wasn't optional like

00:34:46,500 --> 00:34:51,840
building those options and were what it

00:34:49,290 --> 00:34:54,240
was a fundamental and so between

00:34:51,840 --> 00:34:56,460
continuous improvement and like

00:34:54,240 --> 00:34:58,610
respecting roles and and like developing

00:34:56,460 --> 00:35:00,720
technology for people to actually use

00:34:58,610 --> 00:35:05,760
we're a state where we don't have to

00:35:00,720 --> 00:35:08,760
plan a 24 month schedule out and and

00:35:05,760 --> 00:35:10,980
like design technology for yesterday's

00:35:08,760 --> 00:35:14,610
problems that that no longer are

00:35:10,980 --> 00:35:16,230
relevant for today's solutions and you

00:35:14,610 --> 00:35:18,000
put all those all together and you can

00:35:16,230 --> 00:35:22,470
actually make your changes just in time

00:35:18,000 --> 00:35:25,920
you can you can iterate you can build

00:35:22,470 --> 00:35:28,460
for the current moment and that's really

00:35:25,920 --> 00:35:31,470
the biggest change for 8 was that

00:35:28,460 --> 00:35:35,610
shortened schedule paying attention to

00:35:31,470 --> 00:35:37,440
customers designing for opt-in means

00:35:35,610 --> 00:35:44,270
that you deliver the right things at the

00:35:37,440 --> 00:35:44,270
right time any questions

00:35:46,830 --> 00:35:49,940
[Music]

00:36:16,589 --> 00:36:21,849
have you looked at like partitioning how

00:36:19,329 --> 00:36:24,489
the engineering effort and planning

00:36:21,849 --> 00:36:36,789
stuff goes into life instead of doing it

00:36:24,489 --> 00:36:39,999
oh yeah we are we are working on

00:36:36,789 --> 00:36:41,829
micromanaging that schedule so we

00:36:39,999 --> 00:36:44,349
launched a new release every six months

00:36:41,829 --> 00:36:46,029
but the total cycle time like the from

00:36:44,349 --> 00:36:47,709
start to finish is like nine and a half

00:36:46,029 --> 00:36:49,839
months right now which is way too long

00:36:47,709 --> 00:36:52,269
we're trying to shorten that but there

00:36:49,839 --> 00:36:54,160
there is a period of planning which is

00:36:52,269 --> 00:36:55,420
principally why it's longer than six

00:36:54,160 --> 00:36:57,819
months and then there's a development

00:36:55,420 --> 00:36:59,499
window a testing window and then a final

00:36:57,819 --> 00:37:01,689
testing window so within that

00:36:59,499 --> 00:37:03,969
development window apart from just

00:37:01,689 --> 00:37:05,439
shortening it we've actually set it up

00:37:03,969 --> 00:37:08,499
so that you have to do your features

00:37:05,439 --> 00:37:10,329
first and then your bugs I mean you can

00:37:08,499 --> 00:37:12,339
do bugs but you're incentivized to get

00:37:10,329 --> 00:37:13,989
your features done early and the reason

00:37:12,339 --> 00:37:16,479
we do that is that features are

00:37:13,989 --> 00:37:19,119
generally more invasive but they also

00:37:16,479 --> 00:37:20,799
require new novel tests to be created

00:37:19,119 --> 00:37:22,569
they require new documentation to be

00:37:20,799 --> 00:37:24,729
written so if we get the things that

00:37:22,569 --> 00:37:27,729
require more people done early we can

00:37:24,729 --> 00:37:29,380
paralyze like all of this like my

00:37:27,729 --> 00:37:31,900
summary for this is we just didn't like

00:37:29,380 --> 00:37:33,609
make - J on rel like just sitting

00:37:31,900 --> 00:37:35,499
setting up to make files to run in

00:37:33,609 --> 00:37:39,239
parallel is kind of the foundation of it

00:37:35,499 --> 00:37:43,150
and and absolutely part of that is by

00:37:39,239 --> 00:37:44,920
shortening windows and by making things

00:37:43,150 --> 00:37:47,279
happen early that are better to happen

00:37:44,920 --> 00:37:47,279
early

00:37:57,850 --> 00:38:00,940
[Music]

00:38:09,750 --> 00:38:16,090
yes not there yet

00:38:14,350 --> 00:38:18,940
right now the JIRA server is behind a

00:38:16,090 --> 00:38:25,840
firewall work is being done to make that

00:38:18,940 --> 00:38:28,000
not true yeah yeah I want to I want

00:38:25,840 --> 00:38:31,230
exposed euro I want a community to be

00:38:28,000 --> 00:38:31,230
able to engage with us where we are

00:39:04,680 --> 00:39:24,760
yeah but every tool has a place I would

00:39:23,260 --> 00:39:27,640
say the fundamental reason why all this

00:39:24,760 --> 00:39:29,050
change is necessary is that nobody knows

00:39:27,640 --> 00:39:31,750
why all this change is necessary

00:39:29,050 --> 00:39:34,710
like literally everybody is complaining

00:39:31,750 --> 00:39:37,230
about everything all of the time and

00:39:34,710 --> 00:39:39,220
change if you're not paying attention

00:39:37,230 --> 00:39:41,200
you don't know why things are happening

00:39:39,220 --> 00:39:43,600
but fundamentally everything that is

00:39:41,200 --> 00:39:51,000
happening is to address some problem

00:39:43,600 --> 00:39:53,500
it's like a legit problem so like if if

00:39:51,000 --> 00:39:57,250
developers aren't happy about something

00:39:53,500 --> 00:39:58,930
and we take some action to fix it will

00:39:57,250 --> 00:40:00,030
they be happy that we fixed the

00:39:58,930 --> 00:40:01,410
something

00:40:00,030 --> 00:40:05,910
we'll be unhappy that there is a change

00:40:01,410 --> 00:40:09,000
the answer is yes so what we generally

00:40:05,910 --> 00:40:11,250
try to do is talk about the why

00:40:09,000 --> 00:40:12,540
extensively well the fact is a lot of

00:40:11,250 --> 00:40:15,600
people don't notice the why everyone's

00:40:12,540 --> 00:40:18,270
overwhelmed by like sheer volume and so

00:40:15,600 --> 00:40:20,220
well don't notice the why until they've

00:40:18,270 --> 00:40:22,080
actually run into the what and then

00:40:20,220 --> 00:40:24,210
there's like a retroactive why is this

00:40:22,080 --> 00:40:25,290
happening to be and then you explain it

00:40:24,210 --> 00:40:26,940
they're like oh that makes sense

00:40:25,290 --> 00:40:28,470
why didn't I know that because you

00:40:26,940 --> 00:40:30,780
didn't go to this thing to read that

00:40:28,470 --> 00:40:34,140
thing or hear this thing like over

00:40:30,780 --> 00:40:37,430
communication in with 1200 people is

00:40:34,140 --> 00:40:40,860
actually not possible you cannot say

00:40:37,430 --> 00:40:42,900
something enough times enough forums to

00:40:40,860 --> 00:40:45,840
actually get more than like a 50% hit

00:40:42,900 --> 00:41:09,540
rate then answer your question or did I

00:40:45,840 --> 00:41:12,390
just like filibuster oh yeah actually

00:41:09,540 --> 00:41:14,850
that's a great question yeah so I'm

00:41:12,390 --> 00:41:17,310
gonna repeat that so the question is is

00:41:14,850 --> 00:41:20,460
is the result of all this that

00:41:17,310 --> 00:41:22,020
developers can see more of the result of

00:41:20,460 --> 00:41:25,050
their work in the why the answer is

00:41:22,020 --> 00:41:26,970
absolutely so here's the thing when

00:41:25,050 --> 00:41:29,190
you're just working on B's if you're

00:41:26,970 --> 00:41:30,840
just working on a task you don't really

00:41:29,190 --> 00:41:32,490
know where it came from you just know

00:41:30,840 --> 00:41:33,840
that it showed up and and for some

00:41:32,490 --> 00:41:35,250
reason you're working on it and you

00:41:33,840 --> 00:41:36,840
might want to know why am i working on

00:41:35,250 --> 00:41:38,910
this thing what what does this connect

00:41:36,840 --> 00:41:41,310
to and the whole point of having

00:41:38,910 --> 00:41:44,760
planning tools is that you can connect

00:41:41,310 --> 00:41:48,810
your work to like a broader objective to

00:41:44,760 --> 00:41:51,030
a greater goal and our theory is that if

00:41:48,810 --> 00:41:52,320
you have like transparency and the

00:41:51,030 --> 00:41:53,670
reason why you're doing something you

00:41:52,320 --> 00:41:57,240
can make better decisions possibly

00:41:53,670 --> 00:42:00,840
without even asking somebody so if if

00:41:57,240 --> 00:42:01,830
you take the trouble to to like look at

00:42:00,840 --> 00:42:03,060
the work you go hey what does this

00:42:01,830 --> 00:42:04,980
connect to and then read the thing that

00:42:03,060 --> 00:42:07,230
connects to you can go all the way back

00:42:04,980 --> 00:42:08,730
to a market problem you can see what

00:42:07,230 --> 00:42:10,080
other things are being worked on and how

00:42:08,730 --> 00:42:12,140
they're supposed to work together like

00:42:10,080 --> 00:42:15,500
these things are

00:42:12,140 --> 00:42:18,110
meant to allow greater transparency to

00:42:15,500 --> 00:42:20,960
increase understanding to actually give

00:42:18,110 --> 00:42:24,080
people like the the holistic view not

00:42:20,960 --> 00:42:42,530
just this little micro bit of

00:42:24,080 --> 00:42:44,420
implementation so I would totally defer

00:42:42,530 --> 00:42:50,510
that question to Jen but I think she'd

00:42:44,420 --> 00:42:51,800
say about two-thirds when we get to a

00:42:50,510 --> 00:42:55,370
hundred percent all sorts of things

00:42:51,800 --> 00:42:57,430
happen it's gonna be great right other

00:42:55,370 --> 00:42:57,430
questions

00:43:00,910 --> 00:43:08,209
cool thank you for coming

00:43:03,860 --> 00:43:08,209

YouTube URL: https://www.youtube.com/watch?v=2AwLszovwJM


