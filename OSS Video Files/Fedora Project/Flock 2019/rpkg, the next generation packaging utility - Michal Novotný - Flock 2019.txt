Title: rpkg, the next generation packaging utility - Michal Novotný - Flock 2019
Publication date: 2019-09-02
Playlist: Flock 2019
Description: 
	Call for feedback.

I'd like to present a new rpkg packaging utility, which is almost ready to improve overall packaging experience in Fedora. One of the benefits is that it brings the solution to the long-standing problem of duplicating changelog messages in Git commit records as well as in the spec files but it can do much more than that.

The above problem was solved in a generic way by introduction of spec file templates, which additionally allows for storing packages in DistGit in their unpacked ("upstream") form, which can be preferred for some projects. And there is more spec templates can do.

In addition, rpkg should allow to define package-wide commands, which then extend the basic rpkg functionality for the given package. This can be for example used for integration with Bugzilla to e.g. close bugs automatically when a new release is done that fixes them. It can be also used to make rpkg distribution-specific (e.g. by adding integration with specific build system, specific issue tracker, etc.) only by editing the main rpkg.conf file and adding spec requirements for the newly defined commands.

--
Recordings of talks at Flock are a community effort.  Unfortunately not everything works perfectly every time. If you're interested in helping us improve, let us know.
Captions: 
	00:00:02,980 --> 00:00:10,450
hello my name is Michael McConnell tea

00:00:06,580 --> 00:00:13,240
and I would like to talk to about our

00:00:10,450 --> 00:00:16,930
pkg which should be the next-generation

00:00:13,240 --> 00:00:19,830
packaging utility basically a tool that

00:00:16,930 --> 00:00:22,960
should serve its purpose for pitchers

00:00:19,830 --> 00:00:26,440
but also maybe for upstream developers

00:00:22,960 --> 00:00:28,390
and university students and so on if

00:00:26,440 --> 00:00:32,410
they want to do any kind of rpm

00:00:28,390 --> 00:00:35,380
packaging or generally creating European

00:00:32,410 --> 00:00:40,270
packages from their software that they

00:00:35,380 --> 00:00:44,110
are working on yeah I missed maintainer

00:00:40,270 --> 00:00:47,050
and I also maintain a few packages for

00:00:44,110 --> 00:00:58,239
fedora in general so it's mined the

00:00:47,050 --> 00:01:04,089
ground so why did I start to work on

00:00:58,239 --> 00:01:07,569
this thing in the first place so like

00:01:04,089 --> 00:01:10,380
three years ago it was I guess I became

00:01:07,569 --> 00:01:13,539
a listicle maintainer I basically

00:01:10,380 --> 00:01:16,719
packaged war ghost in federal

00:01:13,539 --> 00:01:18,729
infrastructure repositories regarding

00:01:16,719 --> 00:01:23,139
dist kit and its deployment

00:01:18,729 --> 00:01:30,700
I made a github package or RPM package

00:01:23,139 --> 00:01:37,299
out of it and there were some issues in

00:01:30,700 --> 00:01:40,060
the repository so basically they were

00:01:37,299 --> 00:01:43,840
some issues in the repository

00:01:40,060 --> 00:01:47,289
regarding adding support for git LFS

00:01:43,840 --> 00:01:51,119
or get an ax instead of using like

00:01:47,289 --> 00:01:54,369
simple HTTP uploading and downloading

00:01:51,119 --> 00:01:58,259
there were suggestions about using git

00:01:54,369 --> 00:02:01,560
alavés or Linux or something more

00:01:58,259 --> 00:02:07,389
integrated with git and more up-to-date

00:02:01,560 --> 00:02:11,459
and these issues actually touch much

00:02:07,389 --> 00:02:16,480
many more topics regarding for example

00:02:11,459 --> 00:02:19,070
work with unpacked sources like not only

00:02:16,480 --> 00:02:21,650
the farthest get repository that has a

00:02:19,070 --> 00:02:25,130
spec file purchase under balls in it but

00:02:21,650 --> 00:02:28,940
also repositories that have spec file

00:02:25,130 --> 00:02:32,930
and next to it or source or sources like

00:02:28,940 --> 00:02:36,410
that which have upstream form and they

00:02:32,930 --> 00:02:39,050
were discussing workflows they were also

00:02:36,410 --> 00:02:41,810
discussing people on these issues

00:02:39,050 --> 00:02:44,920
they were also discussing work with sub

00:02:41,810 --> 00:02:49,460
modules and usage of some new rules and

00:02:44,920 --> 00:02:52,910
these issues actually gave me an idea to

00:02:49,460 --> 00:02:55,670
build a new clan tool for biscuit

00:02:52,910 --> 00:02:58,670
because lots of stuff that people are

00:02:55,670 --> 00:03:00,980
talking about there was actually not

00:02:58,670 --> 00:03:03,140
quite possible to do server-side but

00:03:00,980 --> 00:03:06,560
instead I knew that I need to do this

00:03:03,140 --> 00:03:11,300
client-side so that's why I started

00:03:06,560 --> 00:03:13,640
developing it and also there were many

00:03:11,300 --> 00:03:17,060
deployments they still are Meniere's

00:03:13,640 --> 00:03:21,560
deployments for Santa Wes and for fedora

00:03:17,060 --> 00:03:24,260
and Red Hat internal and so on and I had

00:03:21,560 --> 00:03:28,720
this idea to build one tool that will

00:03:24,260 --> 00:03:32,390
work with any of them so that's also

00:03:28,720 --> 00:03:35,300
factor that motivated me in the

00:03:32,390 --> 00:03:38,720
beginning but again then I then I

00:03:35,300 --> 00:03:40,700
realized that this actually there are

00:03:38,720 --> 00:03:43,010
two ways how to do this to make the tool

00:03:40,700 --> 00:03:47,570
that is compatible with all possible

00:03:43,010 --> 00:03:51,310
deployments one way is to put some hex

00:03:47,570 --> 00:03:55,150
into this client tool that basically

00:03:51,310 --> 00:03:58,280
changes operation based on with which

00:03:55,150 --> 00:04:03,580
deployment you work with or the other

00:03:58,280 --> 00:04:06,860
way is to provide some package that

00:04:03,580 --> 00:04:10,070
every deployment will use some unified

00:04:06,860 --> 00:04:12,800
interface so I went this way so that was

00:04:10,070 --> 00:04:16,340
like work on the server itself and that

00:04:12,800 --> 00:04:19,669
was basically finished by making RPM

00:04:16,340 --> 00:04:22,730
package out of this gate now the thing

00:04:19,669 --> 00:04:26,170
that is left is for people to start

00:04:22,730 --> 00:04:32,540
using it but that's not my problem

00:04:26,170 --> 00:04:35,210
anyway all the other points below that

00:04:32,540 --> 00:04:37,790
like average stirring changes that

00:04:35,210 --> 00:04:41,870
directly inspect files and so on that's

00:04:37,790 --> 00:04:45,820
that's why I started to develop a new

00:04:41,870 --> 00:04:49,870
tool so this is like a problem that

00:04:45,820 --> 00:04:53,410
occurs a lot on mailing lists that

00:04:49,870 --> 00:04:56,780
change locks are long and they often

00:04:53,410 --> 00:05:00,919
duplicate what is in common messages or

00:04:56,780 --> 00:05:04,550
maybe in some other change lock file in

00:05:00,919 --> 00:05:09,070
the repository so I wanted to figure out

00:05:04,550 --> 00:05:15,610
how we can prevent this duplication and

00:05:09,070 --> 00:05:19,700
at the same time I knew about Tito and

00:05:15,610 --> 00:05:24,020
Rdio Becky G and so on which are able to

00:05:19,700 --> 00:05:26,360
work with unpacked sources so there was

00:05:24,020 --> 00:05:29,240
another motivation that I wanted to also

00:05:26,360 --> 00:05:35,650
support this views case because I wanted

00:05:29,240 --> 00:05:38,870
to offer the same as competition offers

00:05:35,650 --> 00:05:43,580
and also provide automatic versioning

00:05:38,870 --> 00:05:47,419
based on get tags and get commit IDs

00:05:43,580 --> 00:05:50,000
basically and also I wanted to avoid any

00:05:47,419 --> 00:05:52,160
unneeded stuff that doesn't really need

00:05:50,000 --> 00:05:54,740
to be there and be clean in the solution

00:05:52,160 --> 00:05:58,070
which means I didn't want to put any

00:05:54,740 --> 00:06:01,400
extra files into the repository which

00:05:58,070 --> 00:06:04,310
are not part of the package itself which

00:06:01,400 --> 00:06:07,370
should be there only to support usage of

00:06:04,310 --> 00:06:10,900
our PKG or the package utility in

00:06:07,370 --> 00:06:13,640
general so i managed to do that and i

00:06:10,900 --> 00:06:15,650
managed to do that but you can still put

00:06:13,640 --> 00:06:18,530
our PKG dot conf

00:06:15,650 --> 00:06:21,710
into your repository and change some

00:06:18,530 --> 00:06:24,979
configuration for our PKG when it when

00:06:21,710 --> 00:06:30,169
it runs on that particular repository so

00:06:24,979 --> 00:06:33,650
for example you can set up paths to your

00:06:30,169 --> 00:06:38,199
own macros that are used on in the spec

00:06:33,650 --> 00:06:42,830
file of your rewriter or you can

00:06:38,199 --> 00:06:45,740
you can basically change upload URL to

00:06:42,830 --> 00:06:47,710
this gate or download so you will

00:06:45,740 --> 00:06:51,620
download sources from different

00:06:47,710 --> 00:06:54,979
resources than default but this is all

00:06:51,620 --> 00:07:07,039
like optional if you don't want anything

00:06:54,979 --> 00:07:11,409
there you can achieve that state so so I

00:07:07,039 --> 00:07:14,020
started to work on that and I tried to

00:07:11,409 --> 00:07:17,060
yeah one more thing that I should say

00:07:14,020 --> 00:07:20,509
actually my vision was to create a tool

00:07:17,060 --> 00:07:23,479
that is used by university students as

00:07:20,509 --> 00:07:28,029
well as package managers or package

00:07:23,479 --> 00:07:32,930
maintainers I wanted a tool that is

00:07:28,029 --> 00:07:36,919
basically recommended when someone has

00:07:32,930 --> 00:07:39,710
some university project for some course

00:07:36,919 --> 00:07:43,759
and he wants to make it a system

00:07:39,710 --> 00:07:46,639
installable package so I wanted our PKG

00:07:43,759 --> 00:07:51,039
to be the thing that is recommended to

00:07:46,639 --> 00:07:54,649
that student so people from university

00:07:51,039 --> 00:07:59,810
start working with RPM and basically

00:07:54,649 --> 00:08:04,969
start using it so yeah it should be easy

00:07:59,810 --> 00:08:07,969
to use and then I try to figure out how

00:08:04,969 --> 00:08:15,860
to do how to basically implement those

00:08:07,969 --> 00:08:18,860
points this one and this one and also

00:08:15,860 --> 00:08:21,710
this one and I found out that there is a

00:08:18,860 --> 00:08:25,750
common denominator and is that you can

00:08:21,710 --> 00:08:30,879
actually do this 3 points in the same

00:08:25,750 --> 00:08:35,599
uniform way by using spec templates and

00:08:30,879 --> 00:08:38,449
this is some extra language on top of

00:08:35,599 --> 00:08:40,250
standard RPM syntax that you can put

00:08:38,449 --> 00:08:43,010
into your spec files and it will make

00:08:40,250 --> 00:08:45,589
certain parts of the spectral dynamic so

00:08:43,010 --> 00:08:50,300
edit 4 for example it will generate the

00:08:45,589 --> 00:08:53,660
region based on the latest annotated tag

00:08:50,300 --> 00:08:57,740
have made in the repository and actually

00:08:53,660 --> 00:09:00,700
if you call get describe get describe

00:08:57,740 --> 00:09:05,630
retune you something very similar to

00:09:00,700 --> 00:09:08,060
what I'm returning so this idea about

00:09:05,630 --> 00:09:12,680
the versioning shift software based on

00:09:08,060 --> 00:09:15,350
commit hashes and tag names was here for

00:09:12,680 --> 00:09:18,529
very long time actually Lee knows

00:09:15,350 --> 00:09:23,600
himself implemented this command so it's

00:09:18,529 --> 00:09:25,399
good I don't know for 10 years but it

00:09:23,600 --> 00:09:30,740
has been for a long time so it just

00:09:25,399 --> 00:09:35,180
needs to be put into some nice package

00:09:30,740 --> 00:09:41,029
that people can use and that is easy to

00:09:35,180 --> 00:09:46,420
get to anyone so yeah I spec template I

00:09:41,029 --> 00:09:50,079
wanted to implement it - because rpm has

00:09:46,420 --> 00:09:54,770
shell expansion micro basically which

00:09:50,079 --> 00:09:56,750
passes the expression recommend but

00:09:54,770 --> 00:10:00,290
what's the expression to bash it will

00:09:56,750 --> 00:10:06,490
evaluate it and replace output of that

00:10:00,290 --> 00:10:12,649
run command with the tag or if the macro

00:10:06,490 --> 00:10:16,160
invocation in the spec file but there is

00:10:12,649 --> 00:10:18,829
a catch you know I I was thinking about

00:10:16,160 --> 00:10:20,870
actually using this just shell expansion

00:10:18,829 --> 00:10:22,970
which is already provided in IBM itself

00:10:20,870 --> 00:10:25,339
so that I don't need to do anything new

00:10:22,970 --> 00:10:29,810
but there is slight problem with this

00:10:25,339 --> 00:10:33,050
approach because if you make as rpm from

00:10:29,810 --> 00:10:37,240
such a spec file this is our this spec

00:10:33,050 --> 00:10:42,079
file is put verbatim into as rpm and

00:10:37,240 --> 00:10:44,810
when you later rebuilt this rpm it no

00:10:42,079 --> 00:10:47,930
longer has the get context around it

00:10:44,810 --> 00:10:50,000
so it misses get metadata so when you

00:10:47,930 --> 00:10:54,050
try to rebuild it and if you would have

00:10:50,000 --> 00:10:56,510
some shell shell commands there that

00:10:54,050 --> 00:10:59,300
would get meta data it would fail

00:10:56,510 --> 00:11:03,370
because the metadata are no longer in

00:10:59,300 --> 00:11:08,500
the as RPM itself so rpm does not have

00:11:03,370 --> 00:11:13,600
a good macro for this if there was a

00:11:08,500 --> 00:11:16,690
macro that is basically putting the

00:11:13,600 --> 00:11:18,730
dynamically generated spec file into the

00:11:16,690 --> 00:11:25,000
s rpm itself I wouldn't need to do this

00:11:18,730 --> 00:11:26,650
so but yet this can be like in this in

00:11:25,000 --> 00:11:29,440
my opinion it doesn't really matter if

00:11:26,650 --> 00:11:32,970
it is implemented in s rpm or somewhere

00:11:29,440 --> 00:11:37,839
else so I just implemented in package

00:11:32,970 --> 00:11:41,050
utility for packaging and yeah so I

00:11:37,839 --> 00:11:44,230
spent a lot of time on bash IRC channel

00:11:41,050 --> 00:11:46,860
and later also on get IRC channel asking

00:11:44,230 --> 00:11:51,190
about various stuff how thing works and

00:11:46,860 --> 00:11:55,810
especially channel is not exactly

00:11:51,190 --> 00:11:58,950
friendly to newbies so you can see one

00:11:55,810 --> 00:12:04,770
of the first phrase that I started there

00:11:58,950 --> 00:12:12,400
it was basically about passing named

00:12:04,770 --> 00:12:24,830
arguments to show function so I will

00:12:12,400 --> 00:12:27,909
show you example thank you

00:12:24,830 --> 00:12:27,909
[Music]

00:12:30,499 --> 00:12:36,529
so basically I wanted something like

00:12:32,819 --> 00:12:41,309
this so you don't pass free and

00:12:36,529 --> 00:12:48,120
prototype to some macro but you name

00:12:41,309 --> 00:12:52,410
these arguments and this is - because I

00:12:48,120 --> 00:12:54,540
just wanted to be similar want it to be

00:12:52,410 --> 00:12:57,360
compatible with your rpms it's already

00:12:54,540 --> 00:13:02,009
doing and basically do something similar

00:12:57,360 --> 00:13:05,610
to expansion so I was asking on IRC

00:13:02,009 --> 00:13:09,089
channel how to do this you can see that

00:13:05,610 --> 00:13:11,999
it very fast ended up in a nuke

00:13:09,089 --> 00:13:15,059
explosion basically very often it

00:13:11,999 --> 00:13:18,120
happened like that so I was told that I

00:13:15,059 --> 00:13:20,279
should basically stop trying to make a

00:13:18,120 --> 00:13:23,790
code like to look like a Python code

00:13:20,279 --> 00:13:29,069
language or any other language you can

00:13:23,790 --> 00:13:33,360
imagine I am basically - community is

00:13:29,069 --> 00:13:41,399
friendly but you need to learn their

00:13:33,360 --> 00:13:43,769
ways to express friendliness yeah in the

00:13:41,399 --> 00:13:50,249
end it was actually possible what I was

00:13:43,769 --> 00:13:57,329
asking for by this thing this like I

00:13:50,249 --> 00:13:59,720
would say way you can use declare yes

00:13:57,329 --> 00:13:59,720
sir

00:14:01,490 --> 00:14:08,910
you can use declare by directive which

00:14:05,929 --> 00:14:13,639
declares new variables and assigns

00:14:08,910 --> 00:14:16,110
values to them and also you can specify

00:14:13,639 --> 00:14:17,879
declare you can specify also type of a

00:14:16,110 --> 00:14:22,589
variable if you want to so you can

00:14:17,879 --> 00:14:26,490
specify like - a for hash or for

00:14:22,589 --> 00:14:31,439
associative array or - X to make it like

00:14:26,490 --> 00:14:35,579
exported variable and funny thing is

00:14:31,439 --> 00:14:36,410
that you can name the arguments that the

00:14:35,579 --> 00:14:40,370
function

00:14:36,410 --> 00:14:43,580
should expect here and give some default

00:14:40,370 --> 00:14:46,610
values to those arguments and then if

00:14:43,580 --> 00:14:49,760
you use this expression which basically

00:14:46,610 --> 00:14:54,980
unpacks actual inputs that the function

00:14:49,760 --> 00:15:00,340
gets an runtime and you call it if

00:14:54,980 --> 00:15:04,310
something like this so it will get this

00:15:00,340 --> 00:15:09,790
here expand it so basically declare Vil

00:15:04,310 --> 00:15:14,450
first declare name as B but you from

00:15:09,790 --> 00:15:21,290
this invocation it's actually not here

00:15:14,450 --> 00:15:23,690
but I can pass name full and you can

00:15:21,290 --> 00:15:26,060
override this default value so that's

00:15:23,690 --> 00:15:28,610
really nice because that's like function

00:15:26,060 --> 00:15:30,860
hundred basically in the end so I was

00:15:28,610 --> 00:15:34,370
surprised how many things you can do in

00:15:30,860 --> 00:15:37,640
bash in the end but you really need to

00:15:34,370 --> 00:15:39,880
look hard for them but but even bash

00:15:37,640 --> 00:15:43,040
it's not so bad like I was really

00:15:39,880 --> 00:15:46,160
excited lots of times that it can do

00:15:43,040 --> 00:15:49,640
things that I wouldn't expect it that it

00:15:46,160 --> 00:15:51,680
could do so yeah here it prints ABC

00:15:49,640 --> 00:15:56,860
because these are different values and

00:15:51,680 --> 00:15:56,860
here purposeful okay

00:15:59,940 --> 00:16:10,620
so what is the current feature set I

00:16:07,370 --> 00:16:13,140
implemented all the stuff from goals and

00:16:10,620 --> 00:16:17,160
I implemented them by using spec

00:16:13,140 --> 00:16:19,190
templates and yeah I made it parallel

00:16:17,160 --> 00:16:26,510
safe which is kind of fun

00:16:19,190 --> 00:16:30,690
basically I was thinking about scenarios

00:16:26,510 --> 00:16:34,920
when you for example run evaluation of

00:16:30,690 --> 00:16:38,730
this spec file like you render the

00:16:34,920 --> 00:16:41,430
macros and at the same time someone is

00:16:38,730 --> 00:16:44,910
switching branches or adding new comets

00:16:41,430 --> 00:16:48,840
or making new text because then you

00:16:44,910 --> 00:16:53,730
evaluate this macro at some point and

00:16:48,840 --> 00:16:56,880
then someone adds changes the repository

00:16:53,730 --> 00:16:59,910
name or adds new tech or adds new

00:16:56,880 --> 00:17:02,640
commits or whatever and then this macro

00:16:59,910 --> 00:17:06,270
has different context so it will produce

00:17:02,640 --> 00:17:10,230
some spec file that is like inconsistent

00:17:06,270 --> 00:17:17,190
and I wasn't happy that this is possible

00:17:10,230 --> 00:17:20,960
so I first I introduced some something

00:17:17,190 --> 00:17:24,420
like remembering what was the output of

00:17:20,960 --> 00:17:27,470
this macro and then reusing in it in

00:17:24,420 --> 00:17:30,230
this macro but that was sorry

00:17:27,470 --> 00:17:32,880
in the end what I did was that I

00:17:30,230 --> 00:17:36,350
basically set up the state at the

00:17:32,880 --> 00:17:39,150
beginning of the evaluation like certain

00:17:36,350 --> 00:17:46,440
data that I use all the time afterwards

00:17:39,150 --> 00:17:49,790
and I the way the soft took me a while

00:17:46,440 --> 00:17:55,140
to figure out how to do this properly

00:17:49,790 --> 00:17:58,260
and yeah let's keep it at the end keep

00:17:55,140 --> 00:18:03,390
us at the end an extension of supported

00:17:58,260 --> 00:18:06,710
git command set so I wasn't like direct

00:18:03,390 --> 00:18:11,760
throat when I started to use fat PKG or

00:18:06,710 --> 00:18:13,590
RPK here or whatever that the it offers

00:18:11,760 --> 00:18:17,520
some git commands

00:18:13,590 --> 00:18:19,950
but this set is very incomplete like I

00:18:17,520 --> 00:18:25,440
don't know if I've fed pkg installed

00:18:19,950 --> 00:18:35,580
because because because I have a new

00:18:25,440 --> 00:18:39,960
laptop now so basically it offers for

00:18:35,580 --> 00:18:42,660
example commit or clone but there is no

00:18:39,960 --> 00:18:46,320
match or lock or other things that you

00:18:42,660 --> 00:18:49,650
commonly use so I basically tried to

00:18:46,320 --> 00:18:51,750
make the this set of git commands that

00:18:49,650 --> 00:18:55,440
packager can use complete so that you

00:18:51,750 --> 00:18:58,590
don't need to use git if you don't need

00:18:55,440 --> 00:19:00,900
to do some lot of operations like Sam

00:18:58,590 --> 00:19:04,140
sometimes if you want some really techie

00:19:00,900 --> 00:19:07,700
features of git like for example setting

00:19:04,140 --> 00:19:11,930
multi-strategy or something like that

00:19:07,700 --> 00:19:14,490
you you need to go for the gate but for

00:19:11,930 --> 00:19:18,930
normal things that I personally do

00:19:14,490 --> 00:19:25,440
everyday you I can just use our PKG and

00:19:18,930 --> 00:19:29,790
that's it so this is the end thanks for

00:19:25,440 --> 00:19:32,340
attention and now i would like to hear

00:19:29,790 --> 00:19:33,000
from you what do you think and if it is

00:19:32,340 --> 00:19:36,180
a good idea

00:19:33,000 --> 00:19:38,930
and if possibly it could be used in

00:19:36,180 --> 00:19:38,930
fedora

00:19:56,179 --> 00:19:59,210
Yeah right

00:20:11,390 --> 00:20:23,130
No yeah alright so actually I lift out

00:20:20,160 --> 00:20:27,000
this thing you use a definite define

00:20:23,130 --> 00:20:29,340
subcommands it doesn't need to be

00:20:27,000 --> 00:20:32,460
user-defined but also a distribution

00:20:29,340 --> 00:20:35,850
defined so basically this is last

00:20:32,460 --> 00:20:38,670
feature that I'm missing right now that

00:20:35,850 --> 00:20:42,030
I want to do that you can actually

00:20:38,670 --> 00:20:44,340
implement your own workflow as a

00:20:42,030 --> 00:20:46,650
packager so you can add a connection to

00:20:44,340 --> 00:20:49,380
a build system or an update system and

00:20:46,650 --> 00:20:53,940
you can add your own supplement that

00:20:49,380 --> 00:20:56,760
builds it and then you don't need to do

00:20:53,940 --> 00:20:58,980
this on a package level meaning that you

00:20:56,760 --> 00:21:01,350
define this stuff in repository itself

00:20:58,980 --> 00:21:04,130
in our pkg dude conf configuration file

00:21:01,350 --> 00:21:07,070
but you also can do it in distribution

00:21:04,130 --> 00:21:10,680
provided our pkg conf which is placed in

00:21:07,070 --> 00:21:12,540
etc' so just define this commanded are

00:21:10,680 --> 00:21:14,550
specific for the distribution and

00:21:12,540 --> 00:21:18,350
specific for particular birds note

00:21:14,550 --> 00:21:21,750
system and so on if you look at this

00:21:18,350 --> 00:21:24,720
list of the command commands built

00:21:21,750 --> 00:21:27,390
comment is not there it's something that

00:21:24,720 --> 00:21:29,640
took me some time to decide if I want to

00:21:27,390 --> 00:21:31,800
include some built comment that add some

00:21:29,640 --> 00:21:34,500
integration with a specific board system

00:21:31,800 --> 00:21:38,490
but Indiana I decided that I own just

00:21:34,500 --> 00:21:41,610
this bare bone utility that you can

00:21:38,490 --> 00:21:46,020
extend easily and you can add what you

00:21:41,610 --> 00:21:48,390
need to it so this this is just about

00:21:46,020 --> 00:21:52,590
rpm and gate and put a key putting it

00:21:48,390 --> 00:21:57,440
together and provide a way that you can

00:21:52,590 --> 00:21:57,440
extend this for our own workflows

00:22:04,470 --> 00:22:11,260
so by the way if you want to join

00:22:08,740 --> 00:22:14,740
development here is a good rapper

00:22:11,260 --> 00:22:18,930
you can write me and we can do this

00:22:14,740 --> 00:22:21,730
together I would appreciate it because

00:22:18,930 --> 00:22:28,860
it's more fun to do it with someone else

00:22:21,730 --> 00:22:28,860
also so do you have any questions

00:22:39,590 --> 00:22:46,769
basically the idea is to create always a

00:22:44,159 --> 00:22:50,840
new annotated tag for each new release

00:22:46,769 --> 00:22:54,809
where you specify what are changes and

00:22:50,840 --> 00:22:57,659
then release if you use the macros that

00:22:54,809 --> 00:22:59,129
application offers for basically

00:22:57,659 --> 00:23:02,609
generating release and generating

00:22:59,129 --> 00:23:05,039
version you get that for free you don't

00:23:02,609 --> 00:23:07,739
need to like edit spec file you just

00:23:05,039 --> 00:23:09,749
make a new annotated tag and the

00:23:07,739 --> 00:23:13,759
rendered spec file will contain bump

00:23:09,749 --> 00:23:13,759
version and mutual block entry

00:23:19,630 --> 00:23:33,970
I read a body of annotated tags like

00:23:30,250 --> 00:23:36,970
when you make a new tag if RPG it stores

00:23:33,970 --> 00:23:40,120
the tag message into the tag and then

00:23:36,970 --> 00:23:42,670
when I rendered the spec file I read the

00:23:40,120 --> 00:23:45,940
contents and render change lock like

00:23:42,670 --> 00:23:48,760
valid are pinching look from it and you

00:23:45,940 --> 00:23:52,720
can basically there are some parameters

00:23:48,760 --> 00:23:54,580
that weeks the way the change lock is

00:23:52,720 --> 00:23:57,070
generated so you can for example leave

00:23:54,580 --> 00:24:00,310
out some tech if it for example contain

00:23:57,070 --> 00:24:03,220
mistake you can provide that change look

00:24:00,310 --> 00:24:06,970
manually and that then provide the rest

00:24:03,220 --> 00:24:09,970
of the change log entries automatically

00:24:06,970 --> 00:24:12,450
so you can leave something out and just

00:24:09,970 --> 00:24:12,450
stuff like that

00:24:20,049 --> 00:24:25,299
basically their change look is the thing

00:24:23,389 --> 00:24:28,639
that generates the change look and

00:24:25,299 --> 00:24:31,460
before I had this macro I was putting

00:24:28,639 --> 00:24:34,669
stuff manually into respect file so this

00:24:31,460 --> 00:24:39,019
is like manual history but I could also

00:24:34,669 --> 00:24:42,460
like limit this command to only generate

00:24:39,019 --> 00:24:46,070
change look to a certain tag and then

00:24:42,460 --> 00:24:48,980
again start doing this manually or I

00:24:46,070 --> 00:24:51,490
could just not use this macro at all if

00:24:48,980 --> 00:24:51,490
I don't want

00:25:06,340 --> 00:25:09,369
[Music]

00:25:18,550 --> 00:25:29,630
that's true that's true

00:25:23,020 --> 00:25:32,390
the name is not very useful thing this

00:25:29,630 --> 00:25:35,060
is I would say useful or there is also

00:25:32,390 --> 00:25:38,840
attack for release for automatic bumping

00:25:35,060 --> 00:25:41,650
and then there is this stuff this is

00:25:38,840 --> 00:25:44,480
quite horrible because I have actually

00:25:41,650 --> 00:25:47,300
these two macros get their archive and

00:25:44,480 --> 00:25:49,700
get their pack they are taking the raw

00:25:47,300 --> 00:25:52,850
content of a git repository and they

00:25:49,700 --> 00:26:00,290
make a terrible from it that rpm can

00:25:52,850 --> 00:26:05,240
then use and make rpm from it and this

00:26:00,290 --> 00:26:08,480
gear pack uses git ignore command which

00:26:05,240 --> 00:26:15,050
is us which is supported only from like

00:26:08,480 --> 00:26:18,820
get 1.8 which is not available on Apple

00:26:15,050 --> 00:26:21,110
6 or some 2's 6 so I needed to do this

00:26:18,820 --> 00:26:25,100
expression that basically you see their

00:26:21,110 --> 00:26:27,710
archive if we are on higher than 6

00:26:25,100 --> 00:26:30,890
version of operating system and revised

00:26:27,710 --> 00:26:35,470
use get their pack but these microbes

00:26:30,890 --> 00:26:35,470
basically do the packing so you can I

00:26:35,710 --> 00:26:46,640
work all the time with this resources

00:26:40,340 --> 00:26:49,550
and if I want to make an RPM from it so

00:26:46,640 --> 00:26:55,940
we call our PKG local and we

00:26:49,550 --> 00:26:58,400
automatically create the tables at the

00:26:55,940 --> 00:27:01,120
beginning and then it passes them to RPM

00:26:58,400 --> 00:27:01,120
to continue

00:27:05,250 --> 00:27:18,630
oh not very well because you cannot

00:27:15,570 --> 00:27:22,620
merge text into your branch you have

00:27:18,630 --> 00:27:26,310
attack in side branch you cannot replace

00:27:22,620 --> 00:27:28,620
it like full forwarded into into your

00:27:26,310 --> 00:27:37,020
branch it will always create like side

00:27:28,620 --> 00:27:39,330
branch so you actually if you want to

00:27:37,020 --> 00:27:40,620
create a new release you should do it on

00:27:39,330 --> 00:27:43,230
the main branch that you are developing

00:27:40,620 --> 00:27:45,720
come and the side branches should be

00:27:43,230 --> 00:27:50,030
probably used for development only I'm

00:27:45,720 --> 00:27:52,350
not releasing I guess I need to look

00:27:50,030 --> 00:27:57,540
closer into this if there is some

00:27:52,350 --> 00:28:00,380
possibility but I think I think there

00:27:57,540 --> 00:28:00,380
isn't this limitation

00:28:16,640 --> 00:28:19,390
really

00:28:26,640 --> 00:28:29,659
that makes sense

00:28:32,610 --> 00:28:36,330
so it probably works

00:28:42,279 --> 00:28:48,580
do you actually have to have all the

00:28:45,289 --> 00:28:48,580
changes you want to make

00:28:57,390 --> 00:29:03,029
all right yes it does

00:29:01,510 --> 00:29:06,669
[Music]

00:29:03,029 --> 00:29:09,190
basically it is working with if you are

00:29:06,669 --> 00:29:18,640
on your own machine and doing stuff like

00:29:09,190 --> 00:29:21,699
changing something so what can I do

00:29:18,640 --> 00:29:21,699
[Music]

00:29:26,530 --> 00:29:37,540
so you can see that now the version of a

00:29:30,880 --> 00:29:40,180
package is reported as dirty and if I am

00:29:37,540 --> 00:29:43,390
using get their pack macro in my spec

00:29:40,180 --> 00:29:45,970
file which I'm on the system then this

00:29:43,390 --> 00:29:50,560
the RPM that I will create from this

00:29:45,970 --> 00:29:53,590
will contain that dirty spec file so but

00:29:50,560 --> 00:29:57,190
if I am using it there with their

00:29:53,590 --> 00:30:00,370
archive the archive only works on a

00:29:57,190 --> 00:30:03,580
clean tree it never works on a dirty

00:30:00,370 --> 00:30:06,190
tree so if I am if I want to create a

00:30:03,580 --> 00:30:09,460
clean rpm that doesn't contain any dirty

00:30:06,190 --> 00:30:18,460
changes then I can use get get their

00:30:09,460 --> 00:30:20,440
archive if I am developing or testing

00:30:18,460 --> 00:30:24,520
stuff on my own machine that I can use

00:30:20,440 --> 00:30:27,810
get their pack because then I can do

00:30:24,520 --> 00:30:31,420
changes on the fly and I go see them

00:30:27,810 --> 00:30:35,560
actually I can use get their archive all

00:30:31,420 --> 00:30:38,290
the time because get their archive if it

00:30:35,560 --> 00:30:43,260
finds out that it works with dirty tree

00:30:38,290 --> 00:30:45,760
it will use get their pack and it will

00:30:43,260 --> 00:30:50,590
automatically if you if you work on a

00:30:45,760 --> 00:30:52,480
tree to tree you will get dirty rpm and

00:30:50,590 --> 00:30:56,080
if you have clean tree you will get

00:30:52,480 --> 00:30:59,590
clean rpm the difference is it's not

00:30:56,080 --> 00:31:02,380
clear sorry I'm stepping over time so

00:30:59,590 --> 00:31:05,350
the last thing the difference is that if

00:31:02,380 --> 00:31:09,970
you are working on a clean tree then you

00:31:05,350 --> 00:31:16,800
get in in the generated turbo by get

00:31:09,970 --> 00:31:19,960
archive you get H some of the tarball so

00:31:16,800 --> 00:31:22,480
not hash but commit ID from from which

00:31:19,960 --> 00:31:25,720
the turbo comes from so you can

00:31:22,480 --> 00:31:28,450
recognize when you expect the RPM later

00:31:25,720 --> 00:31:31,420
if it was generating generated from a

00:31:28,450 --> 00:31:37,679
dirty or clean tree by expecting the tar

00:31:31,420 --> 00:31:37,679
hydrous and we will also see it from

00:31:38,730 --> 00:31:47,110
from this get there from this VCS stack

00:31:42,970 --> 00:31:51,940
if the tree was dirty hash commit will

00:31:47,110 --> 00:31:54,789
not be there in the URL if it was clean

00:31:51,940 --> 00:31:58,539
it will be it will be - commit so you

00:31:54,789 --> 00:32:00,640
can generate something you don't need to

00:31:58,539 --> 00:32:02,830
be afraid to use somehow mix ended up

00:32:00,640 --> 00:32:04,659
mixing dirty rpms with clean rpms

00:32:02,830 --> 00:32:06,820
because there is like clean

00:32:04,659 --> 00:32:09,610
differentiation between those and you

00:32:06,820 --> 00:32:12,510
can look at this VCS tag and even know

00:32:09,610 --> 00:32:15,429
if it was clean or dirty

00:32:12,510 --> 00:32:17,870
so let's probably hit thank you very

00:32:15,429 --> 00:32:21,250
much for attention

00:32:17,870 --> 00:32:21,250

YouTube URL: https://www.youtube.com/watch?v=3cgVZrQYVOY


