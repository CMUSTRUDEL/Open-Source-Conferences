Title: Fedora RISC-V 64-bit: a three-year long journey - David Abdurachmanov - Flock 2019
Publication date: 2019-08-28
Playlist: Flock 2019
Description: 
	Flock marks three years for Fedora RISC-V 64-bit (riscv64) efforts. August 10, 2016 was the day we could run rpmbuild on riscv64 [0]. We had multiple talks about Fedora and RISC-V in a number of RISC-V Workshops (Europe & Asia) and FOSDEM, but not directly with wider Fedora community. We would like to provide a quick introduction into RISC-V, Fedora RISC-V efforts (past, present and future). Furthermore we would like to gather some feedback on where we should focus the most.

[0] https://rwmj.wordpress.com/2016/08/10/first-successful-rpmbuild-on-risc-v/

--
Recordings of talks at Flock are a community effort. Unfortunately not everything works perfectly every time. If you're interested in helping us improve, let us know.
Captions: 
	00:00:01,319 --> 00:00:06,089
um so the goal of this presentation I

00:00:04,200 --> 00:00:08,879
mean it's 15 minutes 15 minutes so it's

00:00:06,089 --> 00:00:11,580
a bit long so it's to not just have a

00:00:08,879 --> 00:00:14,790
plain slides something old you have a

00:00:11,580 --> 00:00:17,220
discussion so you know there are slides

00:00:14,790 --> 00:00:18,869
that the goal would be like 30 minutes

00:00:17,220 --> 00:00:20,489
of slides and then I have 20 minutes of

00:00:18,869 --> 00:00:22,050
discussions but you can have more

00:00:20,489 --> 00:00:30,270
discussions if you don't want to look at

00:00:22,050 --> 00:00:31,919
the slides that's fine so maybe who

00:00:30,270 --> 00:00:40,140
doesn't know anything about there's five

00:00:31,919 --> 00:00:41,940
do you have so you don't okay so so

00:00:40,140 --> 00:00:44,070
let's look very quickly for water supply

00:00:41,940 --> 00:00:45,960
this I'm not gonna go into details and

00:00:44,070 --> 00:00:48,720
very complicated stuff like how the

00:00:45,960 --> 00:00:51,570
boots flow exactly is working but just

00:00:48,720 --> 00:00:55,230
let's over you what the risk five is so

00:00:51,570 --> 00:00:58,470
I responded oil tree so it's completely

00:00:55,230 --> 00:01:01,560
for free it's a module and it's very

00:00:58,470 --> 00:01:03,949
extensively CPU instruction set okay it

00:01:01,560 --> 00:01:07,620
started to use in the University of

00:01:03,949 --> 00:01:09,630
California Berkeley and we now have you

00:01:07,620 --> 00:01:13,380
know harbors fire foundation and start

00:01:09,630 --> 00:01:16,190
20 19 or 18 is fully managing the

00:01:13,380 --> 00:01:18,450
specification so it's moved into the

00:01:16,190 --> 00:01:19,830
foundation with the multiple members

00:01:18,450 --> 00:01:21,570
different companies different

00:01:19,830 --> 00:01:24,090
universities collaborating on the

00:01:21,570 --> 00:01:25,950
specifications releasing ratifying it

00:01:24,090 --> 00:01:27,810
having different working groups to

00:01:25,950 --> 00:01:30,780
develop the specifications it's not

00:01:27,810 --> 00:01:32,850
anymore this isn't a single university

00:01:30,780 --> 00:01:36,600
some contributors it has a bigger

00:01:32,850 --> 00:01:40,610
framework how it's being managed so

00:01:36,600 --> 00:01:43,860
again the spec is fully open so it's a

00:01:40,610 --> 00:01:45,659
license so anyone can take respect there

00:01:43,860 --> 00:01:49,229
are multiple specification there is a

00:01:45,659 --> 00:01:51,180
private user mode the debug

00:01:49,229 --> 00:01:55,200
specifications which describe different

00:01:51,180 --> 00:01:58,049
different parts the risk for targets

00:01:55,200 --> 00:02:00,150
everything from very very small systems

00:01:58,049 --> 00:02:03,320
and medet systems to a very large system

00:02:00,150 --> 00:02:05,610
like supercomputers a large accelerators

00:02:03,320 --> 00:02:08,340
majority problem for its five implement

00:02:05,610 --> 00:02:11,760
changes today is going to be embedded

00:02:08,340 --> 00:02:14,340
and there are some companies working on

00:02:11,760 --> 00:02:14,970
linux capable system some targeting like

00:02:14,340 --> 00:02:18,570
a rx

00:02:14,970 --> 00:02:22,200
Asians for example sci-fi has Linux

00:02:18,570 --> 00:02:24,000
capable chip and these also have a

00:02:22,200 --> 00:02:27,090
people arts to do that there is a spur

00:02:24,000 --> 00:02:31,080
on tow company who is working on a big

00:02:27,090 --> 00:02:34,850
little hike or count AI accelerator

00:02:31,080 --> 00:02:37,470
based on there is five so it's very wide

00:02:34,850 --> 00:02:40,140
application so it's not the processor

00:02:37,470 --> 00:02:43,320
itself I heard this question you know

00:02:40,140 --> 00:02:45,650
people sometimes just you know a CPU

00:02:43,320 --> 00:02:47,790
very specific one no it's not and

00:02:45,650 --> 00:02:49,110
there's also recent discussions on the

00:02:47,790 --> 00:02:51,030
mailing list but some people think that

00:02:49,110 --> 00:02:53,430
you mention or is far ability like your

00:02:51,030 --> 00:02:56,400
on Linux it's not the case so only a

00:02:53,430 --> 00:02:58,380
fractions the chips are inescapable so

00:02:56,400 --> 00:03:00,480
again it's good because it's very

00:02:58,380 --> 00:03:04,050
modular you don't need to implement

00:03:00,480 --> 00:03:05,610
specific extensions to get the Linux

00:03:04,050 --> 00:03:07,800
running especially if you're targeting

00:03:05,610 --> 00:03:11,250
variable devices or something that

00:03:07,800 --> 00:03:12,900
doesn't you need to run Linux so while

00:03:11,250 --> 00:03:14,700
the spec is fully Oakland anyone can

00:03:12,900 --> 00:03:16,170
take it anyone can write the course and

00:03:14,700 --> 00:03:18,660
there are multiple people who wrote the

00:03:16,170 --> 00:03:21,330
own course it doesn't mean that it's

00:03:18,660 --> 00:03:26,280
supposed to be the course free so for

00:03:21,330 --> 00:03:27,989
example sci-fi has Rocket course that's

00:03:26,280 --> 00:03:30,000
what they used it's fully open source

00:03:27,989 --> 00:03:32,130
there's another boom core which is out

00:03:30,000 --> 00:03:34,830
of order execution core which is also

00:03:32,130 --> 00:03:38,670
based on rocket open source there's a

00:03:34,830 --> 00:03:40,500
full project in Europe from between

00:03:38,670 --> 00:03:42,780
Switzerland and Italy thing which they

00:03:40,500 --> 00:03:45,510
have a pulp organization they have

00:03:42,780 --> 00:03:47,160
multiple cores and those howls open open

00:03:45,510 --> 00:03:48,900
source but again it doesn't mean for

00:03:47,160 --> 00:03:50,850
example Esperanto company which is

00:03:48,900 --> 00:03:52,950
designing the world probably the most

00:03:50,850 --> 00:03:56,430
powerful or is five chip there's many

00:03:52,950 --> 00:03:59,340
course and targeting AI I don't think

00:03:56,430 --> 00:04:01,920
that is well they're basing some of the

00:03:59,340 --> 00:04:03,900
work from the boom but it's probably not

00:04:01,920 --> 00:04:08,390
going to be you know open sources

00:04:03,900 --> 00:04:08,390
commercial product so yes

00:04:16,359 --> 00:04:24,680
probably not in very good way so I

00:04:23,090 --> 00:04:28,460
haven't followed what was happening with

00:04:24,680 --> 00:04:32,030
our open power foundation so I think you

00:04:28,460 --> 00:04:33,620
can now contribute and probably power 10

00:04:32,030 --> 00:04:36,740
chips gonna have some contributions

00:04:33,620 --> 00:04:42,410
through open power I guess that's the

00:04:36,740 --> 00:04:44,449
direction they're taking risk 5 has its

00:04:42,410 --> 00:04:45,590
so it defines the spec different

00:04:44,449 --> 00:04:47,389
extensions I'm going to show in a few

00:04:45,590 --> 00:04:49,669
slides but you're also allowed to do

00:04:47,389 --> 00:04:52,010
your own extensions so your own

00:04:49,669 --> 00:04:56,000
proprietary extensions if you need it so

00:04:52,010 --> 00:04:58,850
it's fully modular so the base

00:04:56,000 --> 00:05:01,400
instruction set allows 32 bits 64 bits

00:04:58,850 --> 00:05:04,070
and a hundred twenty eight bits of

00:05:01,400 --> 00:05:07,120
course the only two that matches 32 64

00:05:04,070 --> 00:05:11,180
bits aren't 1/8 that is not fully frozen

00:05:07,120 --> 00:05:15,680
and at least the door is 5 what you're

00:05:11,180 --> 00:05:17,599
focusing is pure 64 bit so a 32 bit ABI

00:05:15,680 --> 00:05:21,229
is not frozen so it was just a gypsy

00:05:17,599 --> 00:05:24,169
release 2.30 and that didn't make the

00:05:21,229 --> 00:05:26,000
final risk 32 bit changes so that's

00:05:24,169 --> 00:05:30,349
number 6 to 12 months probably before

00:05:26,000 --> 00:05:32,570
it's gonna be frozen the way it's done

00:05:30,349 --> 00:05:35,870
is that so

00:05:32,570 --> 00:05:38,150
all these 32 64 hard 23 independent so

00:05:35,870 --> 00:05:41,539
that means you cannot run 32-bit apps on

00:05:38,150 --> 00:05:44,630
64-bit rs.5 you probably can build a

00:05:41,539 --> 00:05:46,430
chip but it has two different modes but

00:05:44,630 --> 00:05:47,900
again there's no like compatibility mode

00:05:46,430 --> 00:05:50,389
there's no move tool it they're just

00:05:47,900 --> 00:05:53,090
pure 64-bit of pure 32 bits or pro hard

00:05:50,389 --> 00:05:55,190
one 8 bit or whatever so so that's a

00:05:53,090 --> 00:05:59,810
nice thing for people who don't like

00:05:55,190 --> 00:06:02,479
have multi lives so the way that the

00:05:59,810 --> 00:06:04,490
licensing is done or compliance is done

00:06:02,479 --> 00:06:06,740
in there is five you have to become a

00:06:04,490 --> 00:06:09,440
member there are different levels of

00:06:06,740 --> 00:06:12,169
becoming a member it has it gives you

00:06:09,440 --> 00:06:14,389
different rights and once you become a

00:06:12,169 --> 00:06:16,789
member you then can actually use which

00:06:14,389 --> 00:06:19,969
there's five trademarks and put you

00:06:16,789 --> 00:06:21,950
there is five compliant CPE so this is

00:06:19,969 --> 00:06:22,910
how it's been handled because if anyone

00:06:21,950 --> 00:06:25,400
can take and

00:06:22,910 --> 00:06:28,880
respect kisses open sores they do some

00:06:25,400 --> 00:06:32,060
kind of changes there is five Bay's but

00:06:28,880 --> 00:06:35,270
I might not be as far compliant ship so

00:06:32,060 --> 00:06:37,430
that is being done manageable with fire

00:06:35,270 --> 00:06:40,220
foundation you know becoming a member

00:06:37,430 --> 00:06:43,040
and then you have a rights to you become

00:06:40,220 --> 00:06:44,870
there's five compliant ship if you make

00:06:43,040 --> 00:06:46,490
one and just few days ago and I think

00:06:44,870 --> 00:06:50,330
yesterday's been public at Red Hat is

00:06:46,490 --> 00:06:55,370
finally joining respond Foundation which

00:06:50,330 --> 00:06:58,670
is very nice so again it's very very

00:06:55,370 --> 00:07:03,020
modular so just you know a look of what

00:06:58,670 --> 00:07:06,470
it is so we have a base instruction set

00:07:03,020 --> 00:07:08,480
so again every 32 I so that's R stands

00:07:06,470 --> 00:07:10,310
for integer then have M for

00:07:08,480 --> 00:07:13,130
multiplication and division you have a

00:07:10,310 --> 00:07:17,590
from Atomics you have a single floats

00:07:13,130 --> 00:07:21,050
the four double float squad four quad

00:07:17,590 --> 00:07:26,450
flows c4 compressed so are different

00:07:21,050 --> 00:07:28,580
modules extensions and basically the way

00:07:26,450 --> 00:07:31,550
that software is developed we have no

00:07:28,580 --> 00:07:39,170
predefined target which is usually is V

00:07:31,550 --> 00:07:42,160
64 G C and that's so where's the G C is

00:07:39,170 --> 00:07:45,290
defined by the UNIX pack so the Linux

00:07:42,160 --> 00:07:51,910
FreeBSD whatever vo everyone's targeting

00:07:45,290 --> 00:07:56,450
that at least 64 64 GC target and that's

00:07:51,910 --> 00:07:58,940
yeah and if you want to have a little

00:07:56,450 --> 00:08:01,430
capable chip your chip needs to support

00:07:58,940 --> 00:08:03,200
including compressed instructions so

00:08:01,430 --> 00:08:05,270
none of the distros including center or

00:08:03,200 --> 00:08:07,340
of course does not support chips that

00:08:05,270 --> 00:08:10,370
have not compressed instructions

00:08:07,340 --> 00:08:13,730
available as far as I know there's only

00:08:10,370 --> 00:08:16,220
one shipped it out from Indian Shakti

00:08:13,730 --> 00:08:17,570
team which doesn't have a compressed

00:08:16,220 --> 00:08:23,170
instruction but the next one's supposed

00:08:17,570 --> 00:08:26,750
to have so yeah it's a bit cryptic again

00:08:23,170 --> 00:08:29,900
it's basically known as it is 564 and

00:08:26,750 --> 00:08:32,210
that's it but it's the same name every

00:08:29,900 --> 00:08:34,400
64 GC which expands the very long name

00:08:32,210 --> 00:08:36,390
and that long name can also expand you

00:08:34,400 --> 00:08:39,269
even longer one which includes the

00:08:36,390 --> 00:08:41,990
minor and major revisions in the in that

00:08:39,269 --> 00:08:41,990
you see a string

00:08:54,990 --> 00:08:57,770
right

00:09:05,889 --> 00:09:12,889
so again if you have a very quick look

00:09:08,779 --> 00:09:16,069
at what you get 32 registers the first

00:09:12,889 --> 00:09:19,999
register is also hard to borrow 2-0 most

00:09:16,069 --> 00:09:22,999
instructions going to be 50 bit length

00:09:19,999 --> 00:09:24,829
and if you have a compressed those gonna

00:09:22,999 --> 00:09:27,170
be 16 bit so some of the very popular

00:09:24,829 --> 00:09:31,610
instructions can be compress into 60 16

00:09:27,170 --> 00:09:32,870
bits because you have multiple extension

00:09:31,610 --> 00:09:35,720
you can build a chip is different

00:09:32,870 --> 00:09:37,819
extension different pieces it it also

00:09:35,720 --> 00:09:40,100
means that you have different API so you

00:09:37,819 --> 00:09:42,290
have a lot of baby eyes so the one that

00:09:40,100 --> 00:09:45,199
they using in the Fodor and which is the

00:09:42,290 --> 00:09:48,649
foal and the GCC is called lp64 d so it

00:09:45,199 --> 00:09:56,449
means 64 bit and has everything up to

00:09:48,649 --> 00:09:59,240
the double floats yes you have a PC

00:09:56,449 --> 00:10:07,930
which is at the bottom yeah you have a

00:09:59,240 --> 00:10:10,100
register so that so building Fedora is

00:10:07,930 --> 00:10:11,059
complicated because you need the fedora

00:10:10,100 --> 00:10:14,509
to build the fedora

00:10:11,059 --> 00:10:17,240
so typical problem but when you solve

00:10:14,509 --> 00:10:19,009
that you kinda attempt to build a very

00:10:17,240 --> 00:10:22,819
mini model with the first file system

00:10:19,009 --> 00:10:24,410
and you want to get the RPM build and

00:10:22,819 --> 00:10:27,230
then start from that building something

00:10:24,410 --> 00:10:29,149
and after many many duration starts

00:10:27,230 --> 00:10:29,689
looking like fedora so it looks

00:10:29,149 --> 00:10:31,639
something like that

00:10:29,689 --> 00:10:35,480
you take care you build your course tool

00:10:31,639 --> 00:10:37,899
chain so then utils GCC's you tickle

00:10:35,480 --> 00:10:40,939
take a lot of the common projects like

00:10:37,899 --> 00:10:43,040
bash said and stuff like that and you

00:10:40,939 --> 00:10:46,879
attempt to build a very minimal but

00:10:43,040 --> 00:10:49,610
bootable on under key mu a file system

00:10:46,879 --> 00:10:52,759
and you want to get an RPM so you want

00:10:49,610 --> 00:10:54,500
to get the basics it's not going to look

00:10:52,759 --> 00:10:55,519
correct it might not work correctly it's

00:10:54,500 --> 00:10:58,459
probably going to be missing a lot of

00:10:55,519 --> 00:11:01,550
stuff so we're gonna start adding stuff

00:10:58,459 --> 00:11:03,350
to your with the Fez and at the same

00:11:01,550 --> 00:11:06,019
time you're gonna start taking those

00:11:03,350 --> 00:11:08,059
slpm from ecology and search using RPM

00:11:06,019 --> 00:11:11,089
built attempt to rebuild it so you wanna

00:11:08,059 --> 00:11:13,970
rebuild that smaller to fast from the

00:11:11,089 --> 00:11:16,850
RPMs at some point so that involves a

00:11:13,970 --> 00:11:18,379
lot of hacking going back doing all the

00:11:16,850 --> 00:11:19,080
worse things that you're not allowed to

00:11:18,379 --> 00:11:20,580
do in Fodor

00:11:19,080 --> 00:11:22,410
but you have to do it to get to the

00:11:20,580 --> 00:11:25,140
points it's gonna look like the door and

00:11:22,410 --> 00:11:27,240
at some point you might be very likely

00:11:25,140 --> 00:11:29,040
to start where you can actually import

00:11:27,240 --> 00:11:31,589
this package in to Akagi and start

00:11:29,040 --> 00:11:36,089
building more you know and similarly in

00:11:31,589 --> 00:11:39,140
the fedora so the first time it started

00:11:36,089 --> 00:11:41,880
basically in almost four years ago wait

00:11:39,140 --> 00:11:45,269
let's say exactly four years ago by

00:11:41,880 --> 00:11:47,640
Richard from Red Hat utilization group

00:11:45,269 --> 00:11:50,790
and just few days after I joined and

00:11:47,640 --> 00:11:55,470
stuff and joined a few months he builds

00:11:50,790 --> 00:11:59,130
like 55,000 packages and we had some

00:11:55,470 --> 00:12:01,410
what to do or a looking system Richard

00:11:59,130 --> 00:12:03,600
had a lot of blog posts so if you want

00:12:01,410 --> 00:12:06,750
to look exactly what was happening can

00:12:03,600 --> 00:12:09,990
look into those links below so the

00:12:06,750 --> 00:12:12,899
project stopped so a lot of stuffs are

00:12:09,990 --> 00:12:15,420
not finals so and there was a breakage

00:12:12,899 --> 00:12:17,370
in ABI and that meant that whatever

00:12:15,420 --> 00:12:20,700
built is not exactly what we can use

00:12:17,370 --> 00:12:22,829
anymore so it was to stop and wait till

00:12:20,700 --> 00:12:25,920
the final gypsy patches emerged in the

00:12:22,829 --> 00:12:30,230
restart or work that took some time it

00:12:25,920 --> 00:12:33,540
was finalized and in at the end of 2017

00:12:30,230 --> 00:12:36,570
before those changes landed you should

00:12:33,540 --> 00:12:38,880
already started testing them and then so

00:12:36,570 --> 00:12:42,440
after finals landed almost very close to

00:12:38,880 --> 00:12:45,329
the FOSDEM we started fully rebuilding

00:12:42,440 --> 00:12:50,430
the four final time bootstrapping the

00:12:45,329 --> 00:12:54,209
Fedora distro and about in mid well a

00:12:50,430 --> 00:12:56,310
mid April 2018 I got the car G running

00:12:54,209 --> 00:12:58,470
the imported there were packages and he

00:12:56,310 --> 00:13:00,180
started actually pulling the sorcerer

00:12:58,470 --> 00:13:03,990
p.m. from official college and starting

00:13:00,180 --> 00:13:06,720
to build that of course if you look at

00:13:03,990 --> 00:13:12,440
whatever we had before ecology it was a

00:13:06,720 --> 00:13:16,680
myth mix of Fedora 25 till 28 it was

00:13:12,440 --> 00:13:18,899
very very complicated beast and up till

00:13:16,680 --> 00:13:20,519
now you're not using card shadows so

00:13:18,899 --> 00:13:22,320
packages are not built in the same order

00:13:20,519 --> 00:13:26,370
but your built in official fedora so

00:13:22,320 --> 00:13:29,520
that comes with some problems so

00:13:26,370 --> 00:13:31,320
building a distro just for fun maybe you

00:13:29,520 --> 00:13:32,790
can do it I don't know if bootstrapping

00:13:31,320 --> 00:13:35,190
could be called fun

00:13:32,790 --> 00:13:37,590
but I think that the fun comes from and

00:13:35,190 --> 00:13:39,720
you start seeing it's being used in real

00:13:37,590 --> 00:13:41,880
life people use it people are doing

00:13:39,720 --> 00:13:44,400
something is it people are showing some

00:13:41,880 --> 00:13:46,740
things it so let's look at the few

00:13:44,400 --> 00:13:50,280
pictures I guess so the first time we

00:13:46,740 --> 00:13:52,050
booted Fedora in the real harbor so

00:13:50,280 --> 00:13:56,190
that's the sci-fi offices in San Mateo

00:13:52,050 --> 00:13:59,520
California there is a sci-fi board

00:13:56,190 --> 00:14:02,070
connected to the Exile except PGA's FMC

00:13:59,520 --> 00:14:04,620
connectors you know and then the cable

00:14:02,070 --> 00:14:07,170
goes to the box which has the extra PCI

00:14:04,620 --> 00:14:09,720
Express devices you have a keyboard and

00:14:07,170 --> 00:14:11,940
a mouse and the GPU attached so you get

00:14:09,720 --> 00:14:13,680
the nice display now this here a console

00:14:11,940 --> 00:14:15,960
on your laptop and it's the first time

00:14:13,680 --> 00:14:17,580
it actually booted Fedora 28 and they're

00:14:15,960 --> 00:14:21,060
doing an upgrade of the system and

00:14:17,580 --> 00:14:22,290
actually running that office SSD so

00:14:21,060 --> 00:14:25,880
that's the first time with the door

00:14:22,290 --> 00:14:25,880
Lander than the real physical hardware

00:14:26,150 --> 00:14:31,590
so we got some boards so sci-fi ceded

00:14:29,460 --> 00:14:36,390
various development boards the different

00:14:31,590 --> 00:14:37,980
projects distros major programming

00:14:36,390 --> 00:14:41,100
languages and stuff like that

00:14:37,980 --> 00:14:43,560
so Richard has two boards one is

00:14:41,100 --> 00:14:46,860
official fedora board another one he's a

00:14:43,560 --> 00:14:49,830
his private board DJ from Chile she has

00:14:46,860 --> 00:14:52,170
another one and that's the picture on

00:14:49,830 --> 00:14:53,850
the right so again it's a similar setup

00:14:52,170 --> 00:14:58,230
it's probably the most expensive way to

00:14:53,850 --> 00:15:00,120
attach SSD probably $6,000 to attach SSD

00:14:58,230 --> 00:15:02,970
but at least I don't need to deal with

00:15:00,120 --> 00:15:07,590
NFC or empathy or whatever network it

00:15:02,970 --> 00:15:10,350
file storage so when I was at sigh fine

00:15:07,590 --> 00:15:12,990
the first widget Fedora is the same

00:15:10,350 --> 00:15:15,960
light as start working gnome desktop it

00:15:12,990 --> 00:15:18,960
took a while but the same year we got

00:15:15,960 --> 00:15:21,960
that actually running it was surprising

00:15:18,960 --> 00:15:24,540
because it worked out of a box he spent

00:15:21,960 --> 00:15:28,230
several days trying to figure out one

00:15:24,540 --> 00:15:30,600
major issue we didn't have the mouse and

00:15:28,230 --> 00:15:34,440
a keyboard working it was very good

00:15:30,600 --> 00:15:38,520
thing nothing just as being dumb

00:15:34,440 --> 00:15:40,650
yes but yeah I mean that it works so it

00:15:38,520 --> 00:15:44,250
boots into initial setup you set up so

00:15:40,650 --> 00:15:46,490
just as after make normal install and it

00:15:44,250 --> 00:15:46,490
works

00:15:46,860 --> 00:15:52,830
so Western Digital starts using in demos

00:15:49,020 --> 00:15:56,840
arisen as demo so nice the work so this

00:15:52,830 --> 00:16:00,540
one he doesn't use and the Xilinx FPGA

00:15:56,840 --> 00:16:02,760
there is an extension board so what that

00:16:00,540 --> 00:16:05,550
extension board gives you it gives the

00:16:02,760 --> 00:16:10,830
ability to you have SSD similar to SSDs

00:16:05,550 --> 00:16:13,200
and PCI Express another thing you can

00:16:10,830 --> 00:16:16,470
actually boot the Dewar 29 in X 11 mode

00:16:13,200 --> 00:16:19,890
or in the CLI mode on your browser so

00:16:16,470 --> 00:16:21,420
Butler has the protocol J Linux and he

00:16:19,890 --> 00:16:23,279
has the multiple images available in

00:16:21,420 --> 00:16:25,410
Internet so if you have a you have the

00:16:23,279 --> 00:16:28,080
Chrome or Firefox you can go to the web

00:16:25,410 --> 00:16:29,510
and just boot it play with it you don't

00:16:28,080 --> 00:16:32,990
need to install anything on your system

00:16:29,510 --> 00:16:35,550
but don't exploit higher performance

00:16:32,990 --> 00:16:37,200
it's basically based on a tiny move

00:16:35,550 --> 00:16:39,779
which used to be called the risky move

00:16:37,200 --> 00:16:41,400
so we used to support that and that was

00:16:39,779 --> 00:16:43,830
the first time later to actually support

00:16:41,400 --> 00:16:48,210
graphics outlets at the time akima

00:16:43,830 --> 00:16:53,820
couldn't do any display output this was

00:16:48,210 --> 00:16:55,560
was done yesterday so the way we we I'll

00:16:53,820 --> 00:16:59,400
encourage at least new users to use

00:16:55,560 --> 00:17:01,260
Fedora's files you use live dirt if you

00:16:59,400 --> 00:17:04,800
go to the key mu you need to you know

00:17:01,260 --> 00:17:09,000
pass a lot of things everything in

00:17:04,800 --> 00:17:11,220
fedora 30 by default should work as far

00:17:09,000 --> 00:17:13,530
as I know I tested everything is already

00:17:11,220 --> 00:17:17,329
in so it should work out of the box

00:17:13,530 --> 00:17:20,390
including a display output if you wanna

00:17:17,329 --> 00:17:24,000
do some more testing you can go and use

00:17:20,390 --> 00:17:25,740
Vareen sig a copper repository to pull

00:17:24,000 --> 00:17:27,959
the latest stuff latest live bird latest

00:17:25,740 --> 00:17:32,010
with manager leaders whatever emu bills

00:17:27,959 --> 00:17:36,330
to play visit so yeah so the support is

00:17:32,010 --> 00:17:38,460
the river i tested at least two device

00:17:36,330 --> 00:17:39,570
out plus a vga and bars display that's

00:17:38,460 --> 00:17:43,050
both work

00:17:39,570 --> 00:17:46,800
we also somewhat recently switched from

00:17:43,050 --> 00:17:48,360
their kill em emoji virtual pci so

00:17:46,800 --> 00:17:50,400
that's nice of all the dial devices are

00:17:48,360 --> 00:17:51,690
now connected for PCI Express if you run

00:17:50,400 --> 00:17:52,980
a little bit you get the proper

00:17:51,690 --> 00:17:55,890
networking you know I need to start up

00:17:52,980 --> 00:17:58,090
any bridges or anything so and all the

00:17:55,890 --> 00:18:02,529
infrastructure that you're running now

00:17:58,090 --> 00:18:04,570
is fully liberal based so there's also a

00:18:02,529 --> 00:18:07,270
news article for be open we actually had

00:18:04,570 --> 00:18:10,210
like 10 minutes video of how to build

00:18:07,270 --> 00:18:14,409
the rs5 PCE and that's also uses fedora

00:18:10,210 --> 00:18:16,570
gnome desktop so basically as you can

00:18:14,409 --> 00:18:19,210
see people start using it it's not just

00:18:16,570 --> 00:18:21,730
a small CLI thing that you can run the

00:18:19,210 --> 00:18:25,500
letter Q mu you can actually have a

00:18:21,730 --> 00:18:28,480
large scale little Kimmy based setups

00:18:25,500 --> 00:18:30,970
you can boot into ignore desktop that

00:18:28,480 --> 00:18:32,980
you can use it you actually can also

00:18:30,970 --> 00:18:34,659
play quick G you should have hardware

00:18:32,980 --> 00:18:37,990
you can play quake 2 you

00:18:34,659 --> 00:18:42,279
let's yeah I had a match it's decent

00:18:37,990 --> 00:18:48,100
performance had no problems so the

00:18:42,279 --> 00:18:49,600
current state so we have a cod you build

00:18:48,100 --> 00:18:50,980
form so that's a very nice thing to do

00:18:49,600 --> 00:18:53,440
you don't have a script it just goes

00:18:50,980 --> 00:18:55,960
from A to B to Z whatever and those

00:18:53,440 --> 00:18:58,090
attempts to build all the packages so a

00:18:55,960 --> 00:19:01,179
current build forum has three physical

00:18:58,090 --> 00:19:03,460
boards a couple of my using and BD still

00:19:01,179 --> 00:19:07,600
load with the first one is a she cancels

00:19:03,460 --> 00:19:11,590
D we have one x86 64 node so that's a

00:19:07,600 --> 00:19:16,240
main card server it has everything

00:19:11,590 --> 00:19:18,899
remains cardi storage all the elements

00:19:16,240 --> 00:19:21,429
database everything we have another

00:19:18,899 --> 00:19:22,720
virtual node it's a sub storage which is

00:19:21,429 --> 00:19:26,890
used for backing up the whole

00:19:22,720 --> 00:19:28,990
configurations and Akagi storage in case

00:19:26,890 --> 00:19:31,510
something happens and you already had to

00:19:28,990 --> 00:19:34,049
use it to recover the database so pack

00:19:31,510 --> 00:19:37,450
abs are very important if you're running

00:19:34,049 --> 00:19:41,890
94 q instances today so those are all

00:19:37,450 --> 00:19:45,700
for core 8 gigs most some are 8 core 32

00:19:41,890 --> 00:19:50,200
gig instances and everything is managed

00:19:45,700 --> 00:19:52,960
by live dirt we have a new server coming

00:19:50,200 --> 00:19:54,820
so it's already running we just need to

00:19:52,960 --> 00:19:58,120
finish the configuration finish sinking

00:19:54,820 --> 00:19:59,649
the storage and we can actually probably

00:19:58,120 --> 00:20:03,570
grow in more so there are some

00:19:59,649 --> 00:20:03,570
discussions to add more q instances

00:20:07,010 --> 00:20:19,850
on both so you're mixing the boards with

00:20:10,110 --> 00:20:19,850
the chemo instances yeah

00:20:20,390 --> 00:20:24,930
no you're not cause do not we are

00:20:23,220 --> 00:20:32,400
running emulation so you have total

00:20:24,930 --> 00:20:36,000
machines for ki-moon yes of course

00:20:32,400 --> 00:20:38,190
yeah there's no so right now there is

00:20:36,000 --> 00:20:41,040
attached said being upstream from KVM

00:20:38,190 --> 00:20:42,210
support so technically that's a digit

00:20:41,040 --> 00:20:44,640
already proved that you can launch

00:20:42,210 --> 00:20:46,230
multiple virtual guests on eros

00:20:44,640 --> 00:20:49,890
filesystem so that's being upstream

00:20:46,230 --> 00:20:51,360
right now but considering the strength

00:20:49,890 --> 00:20:53,640
of the hardware you don't probably want

00:20:51,360 --> 00:20:58,520
to run virtual machines in it especially

00:20:53,640 --> 00:21:02,940
on the dual form so we starting doing a

00:20:58,520 --> 00:21:04,230
repository nurse just official fedora

00:21:02,940 --> 00:21:07,140
websites if something goes terribly

00:21:04,230 --> 00:21:09,420
wrong the disk images and all the source

00:21:07,140 --> 00:21:11,100
the bug whatever all their p.m. so

00:21:09,420 --> 00:21:13,500
available so someone can take that and

00:21:11,100 --> 00:21:15,720
kickstart a new college instance so at

00:21:13,500 --> 00:21:19,110
least some way to survive is something

00:21:15,720 --> 00:21:21,480
happens so this is the current

00:21:19,110 --> 00:21:26,130
statistics from Akagi pulled last night

00:21:21,480 --> 00:21:29,520
so we had 430 probably now 34,000 bills

00:21:26,130 --> 00:21:31,370
I guess by now about 7000 failed for

00:21:29,520 --> 00:21:33,750
very different reasons

00:21:31,370 --> 00:21:38,130
anything from overloaded main service

00:21:33,750 --> 00:21:41,100
cannot deliver rpms do generic errors to

00:21:38,130 --> 00:21:42,810
risk file specific errors to mistakes

00:21:41,100 --> 00:21:46,380
and building things in the wrong order

00:21:42,810 --> 00:21:48,720
and stuff like that so you're doing

00:21:46,380 --> 00:21:50,970
right now master build so this month we

00:21:48,720 --> 00:21:53,400
did about 9,000 packages already built

00:21:50,970 --> 00:21:56,220
successfully there's one thing that he

00:21:53,400 --> 00:22:00,240
done do or we didn't do for most of the

00:21:56,220 --> 00:22:02,780
time was we didn't run any tests so when

00:22:00,240 --> 00:22:08,280
he started the car instance he only had

00:22:02,780 --> 00:22:10,110
8 VMs and doing tests was expensive so

00:22:08,280 --> 00:22:12,990
we had to cut to us to actually build

00:22:10,110 --> 00:22:15,150
more packages faster so as the

00:22:12,990 --> 00:22:16,770
increasing the number of builders we can

00:22:15,150 --> 00:22:18,690
actually say we have more bandwidth so

00:22:16,770 --> 00:22:21,389
we can actually make our jobs longer and

00:22:18,690 --> 00:22:25,950
do more proper thing so all the tests on

00:22:21,389 --> 00:22:27,539
our way enabled an ecology so if you

00:22:25,950 --> 00:22:31,499
look at the numbers is a fast them from

00:22:27,539 --> 00:22:34,349
2019 and numbers from today most of the

00:22:31,499 --> 00:22:36,479
fedora builds surprisingly build

00:22:34,349 --> 00:22:38,849
surprisingly without you know testing

00:22:36,479 --> 00:22:43,349
works and you rarely get any kind of

00:22:38,849 --> 00:22:45,649
errors so yeah so that's that's a good

00:22:43,349 --> 00:22:48,929
result the major missing pieces today

00:22:45,649 --> 00:22:50,759
was upstream Kenna was not able to boot

00:22:48,929 --> 00:22:54,059
on the board so five free Colonel can

00:22:50,759 --> 00:22:56,220
finally boot on the board we didn't have

00:22:54,059 --> 00:22:58,019
a little be implying stack and nine

00:22:56,220 --> 00:23:00,509
point zero or she won already supports

00:22:58,019 --> 00:23:02,820
that we don't have rest

00:23:00,509 --> 00:23:04,799
but of course clan just happenings means

00:23:02,820 --> 00:23:07,919
that rest is gonna happen very soon

00:23:04,799 --> 00:23:11,159
after and there's no gulang but that's

00:23:07,919 --> 00:23:13,859
also like basically done Carlos I think

00:23:11,159 --> 00:23:16,710
she's from Red Hat she's working on that

00:23:13,859 --> 00:23:18,779
so he has a go line port working I think

00:23:16,710 --> 00:23:21,659
was a darker could Burnett it open fast

00:23:18,779 --> 00:23:23,429
and other pieces it's being blog because

00:23:21,659 --> 00:23:26,159
the gulang was supposed to cut the

00:23:23,429 --> 00:23:30,840
release so it's basically frozen for

00:23:26,159 --> 00:23:33,509
adding in new architecture so we have

00:23:30,840 --> 00:23:35,340
problems so the servers for the ecology

00:23:33,509 --> 00:23:39,359
what we have is basically very very very

00:23:35,340 --> 00:23:43,229
old so we have memory issues may have IO

00:23:39,359 --> 00:23:45,809
issues especially if you want to do fast

00:23:43,229 --> 00:23:48,509
composes that's really terrible thing

00:23:45,809 --> 00:23:50,369
because in general about 150 gigs per

00:23:48,509 --> 00:23:53,599
repository if you try to do like two

00:23:50,369 --> 00:23:57,210
Sidora cycles it quickly becomes

00:23:53,599 --> 00:23:59,489
basically a project of moving data like

00:23:57,210 --> 00:24:02,999
hundreds of gigs per day to different

00:23:59,489 --> 00:24:06,899
places to solve that we got a new server

00:24:02,999 --> 00:24:09,330
so it's full and mini storage corporate

00:24:06,899 --> 00:24:11,729
stuff you know loads of Isles loads of

00:24:09,330 --> 00:24:13,529
bandwidth it's not being yeast yet until

00:24:11,729 --> 00:24:16,979
we fully can configure that and then can

00:24:13,529 --> 00:24:20,330
switch to that and finally start

00:24:16,979 --> 00:24:25,049
building fast a new composes and images

00:24:20,330 --> 00:24:26,970
our subdomain was added into ich es es

00:24:25,049 --> 00:24:29,489
preload list which means automatically

00:24:26,970 --> 00:24:31,230
redirected to HTTPS which is bad because

00:24:29,489 --> 00:24:33,960
the card is configured

00:24:31,230 --> 00:24:36,389
so hosted a so certificate which of

00:24:33,960 --> 00:24:41,039
course no one has installed in the

00:24:36,389 --> 00:24:43,019
system so people started complaining but

00:24:41,039 --> 00:24:47,399
you cannot access the website and where

00:24:43,019 --> 00:24:50,190
is DNS alias fedora dot is v dot rocks

00:24:47,399 --> 00:24:54,240
which solves most of the problems until

00:24:50,190 --> 00:24:58,200
we moved to the new server we still have

00:24:54,240 --> 00:25:00,960
problems - Kim you instances so every

00:24:58,200 --> 00:25:02,940
day I have to recreate some of the VMS

00:25:00,960 --> 00:25:05,820
because the CPU stalls for some unknown

00:25:02,940 --> 00:25:08,299
reason and was a five - and five free

00:25:05,820 --> 00:25:08,299
kernels

00:25:08,450 --> 00:25:15,510
using the current firmware we have

00:25:11,539 --> 00:25:18,779
problems even more probably to be

00:25:15,510 --> 00:25:20,399
flushes not fully properly working and

00:25:18,779 --> 00:25:22,440
that causes extra instability in the

00:25:20,399 --> 00:25:24,179
kernels which is being investigated by

00:25:22,440 --> 00:25:26,460
multiple companies right now to be

00:25:24,179 --> 00:25:29,730
solved but you think that's a problem

00:25:26,460 --> 00:25:31,919
was a similar firmware but he build and

00:25:29,730 --> 00:25:34,049
so being investigated where exactly

00:25:31,919 --> 00:25:36,090
problem is so if using the latest for

00:25:34,049 --> 00:25:38,279
doris five images you might get extra

00:25:36,090 --> 00:25:40,260
instability so that means it might crash

00:25:38,279 --> 00:25:42,000
in a few days if you you know if you're

00:25:40,260 --> 00:25:45,570
doing along if you just occasion to run

00:25:42,000 --> 00:25:49,350
it you know common stuff booted tested

00:25:45,570 --> 00:25:51,210
something short it's works fine so so

00:25:49,350 --> 00:25:52,649
the problem is if you spend all the

00:25:51,210 --> 00:25:55,200
assignments infrastructure and you have

00:25:52,649 --> 00:25:58,399
less time to deal this actual porting

00:25:55,200 --> 00:26:02,100
stuff you know fixing release related

00:25:58,399 --> 00:26:06,330
stuff GA stuff so what's missing so we

00:26:02,100 --> 00:26:08,760
don't sign any sin any rpms I somewhat

00:26:06,330 --> 00:26:11,370
consider that as a feature so you

00:26:08,760 --> 00:26:14,789
shouldn't trust it yet it's not up to

00:26:11,370 --> 00:26:17,100
you or a full standard so that's one

00:26:14,789 --> 00:26:19,760
thing same as a very building positive

00:26:17,100 --> 00:26:22,169
it's not signed if that's something that

00:26:19,760 --> 00:26:24,120
bothers you very much and you want to

00:26:22,169 --> 00:26:26,880
have it sign it's it's possible to do

00:26:24,120 --> 00:26:28,559
that considering our current server we

00:26:26,880 --> 00:26:30,240
cannot do that but once we move it

00:26:28,559 --> 00:26:33,809
should have enough managed to start

00:26:30,240 --> 00:26:36,990
signing rpms are we have no body I don't

00:26:33,809 --> 00:26:40,789
think that you need it we have no pangy

00:26:36,990 --> 00:26:43,019
so at this point we are using sukar G's

00:26:40,789 --> 00:26:45,550
generating distribution repositories

00:26:43,019 --> 00:26:49,170
it's also generating the images

00:26:45,550 --> 00:26:53,620
that works it's basically the way that

00:26:49,170 --> 00:26:55,420
rv7 works but in the future we probably

00:26:53,620 --> 00:26:57,070
have to look in the two things so that's

00:26:55,420 --> 00:26:59,590
a punji if you want to have my job

00:26:57,070 --> 00:27:01,270
modularity and then the whole MDS

00:26:59,590 --> 00:27:03,550
infrastructure which I think there's no

00:27:01,270 --> 00:27:07,870
tutorial how to set it up except the and

00:27:03,550 --> 00:27:10,150
symbol scripts you don't produce

00:27:07,870 --> 00:27:12,550
workstation or server images we probably

00:27:10,150 --> 00:27:14,140
can do that and I'm gonna talk about

00:27:12,550 --> 00:27:17,080
different images that you produce later

00:27:14,140 --> 00:27:21,000
on so yeah so from instruction point

00:27:17,080 --> 00:27:24,730
that you shouldn't be punchy and and

00:27:21,000 --> 00:27:28,660
modularity because otherwise the missing

00:27:24,730 --> 00:27:31,240
a check you know a piece of fedora so

00:27:28,660 --> 00:27:33,520
for the boot stuff we have no BLS and

00:27:31,240 --> 00:27:37,690
Fedora is moving to BLS I think our only

00:27:33,520 --> 00:27:40,420
seven might not have it the good part is

00:27:37,690 --> 00:27:43,270
that you have a you boot it works on cue

00:27:40,420 --> 00:27:47,140
it works on on a physical hardware and

00:27:43,270 --> 00:27:49,570
we just got a grub 2.04 which also has

00:27:47,140 --> 00:27:53,260
Wi-Fi support so technically you should

00:27:49,570 --> 00:27:56,770
be able to use you boot EFI and boots

00:27:53,260 --> 00:27:58,300
EFI binary of crap grub - and when you

00:27:56,770 --> 00:28:01,330
stop here because kernel doesn't have

00:27:58,300 --> 00:28:03,670
any Ethier stops at this point that is

00:28:01,330 --> 00:28:06,100
on the list but you know that's the only

00:28:03,670 --> 00:28:10,750
thing missing piece and then plus but of

00:28:06,100 --> 00:28:12,490
course do you get something you know the

00:28:10,750 --> 00:28:20,050
boot get getting the boot which looks

00:28:12,490 --> 00:28:22,090
like like er 64 so because you do you

00:28:20,050 --> 00:28:24,400
have a new boot that means it finally

00:28:22,090 --> 00:28:26,200
can actually install a new kernel reboot

00:28:24,400 --> 00:28:28,000
the chemo instance which was not the

00:28:26,200 --> 00:28:31,240
case before because you have to pass the

00:28:28,000 --> 00:28:32,980
binaries directly to chemo or lizard so

00:28:31,240 --> 00:28:34,720
that's a very nice addition we didn't

00:28:32,980 --> 00:28:40,120
run and again we didn't run any tests

00:28:34,720 --> 00:28:43,870
which we do now so finally because we do

00:28:40,120 --> 00:28:46,840
have a bandage to do that so custom bits

00:28:43,870 --> 00:28:50,740
so we don't use a card shadow that's

00:28:46,840 --> 00:28:53,260
probably my fault I did try it once

00:28:50,740 --> 00:28:56,110
I followed the configuration you know

00:28:53,260 --> 00:28:57,810
there is a wiki page from 2015 there's

00:28:56,110 --> 00:29:00,360
some to-do list of

00:28:57,810 --> 00:29:02,940
you know not fully described but how

00:29:00,360 --> 00:29:04,710
it's supposed to work I did that it

00:29:02,940 --> 00:29:06,300
launched it so it was paranoid and

00:29:04,710 --> 00:29:08,130
waited to look at the screen for like

00:29:06,300 --> 00:29:10,230
one hour or something it was a lot of

00:29:08,130 --> 00:29:11,880
any we are comparing that comparing that

00:29:10,230 --> 00:29:14,220
replaced by newer and VR and stuff like

00:29:11,880 --> 00:29:18,300
that and it's finally imported a single

00:29:14,220 --> 00:29:21,240
package from Fedora core 12 and I killed

00:29:18,300 --> 00:29:25,230
it so you know that's was like too far

00:29:21,240 --> 00:29:27,000
ahead so so I'm bit afraid of what cause

00:29:25,230 --> 00:29:29,910
you shadow could do to the current state

00:29:27,000 --> 00:29:33,330
if it starts tagging packages from

00:29:29,910 --> 00:29:35,280
Fedora core 12 because the last act

00:29:33,330 --> 00:29:39,870
package is the one which is in ends up

00:29:35,280 --> 00:29:41,850
in repository so I should use a card

00:29:39,870 --> 00:29:45,450
shadow I think that would be requirement

00:29:41,850 --> 00:29:48,690
to do that so but I currently don't have

00:29:45,450 --> 00:29:51,540
the correct documentation of how to set

00:29:48,690 --> 00:29:52,920
it up but it doesn't go that deep and I

00:29:51,540 --> 00:29:55,080
just want to have a recent stuff that

00:29:52,920 --> 00:29:57,270
goes into Kaji official ecology to go

00:29:55,080 --> 00:30:00,090
check its mycology not to go all the way

00:29:57,270 --> 00:30:02,340
to dinosaur age and try to you know

00:30:00,090 --> 00:30:05,640
import something but I don't what I have

00:30:02,340 --> 00:30:07,620
in my car G he also didn't produce a

00:30:05,640 --> 00:30:09,990
syrupy and packages so big Akashi did

00:30:07,620 --> 00:30:12,030
because it was expensive so setting

00:30:09,990 --> 00:30:14,940
setting up for build route to the X one

00:30:12,030 --> 00:30:16,890
hour and then you have to pay like one

00:30:14,940 --> 00:30:18,780
to two hours to get yourself p.m. so

00:30:16,890 --> 00:30:20,490
that was done I say this ticks target

00:30:18,780 --> 00:30:23,940
you know in a darker and the pod man at

00:30:20,490 --> 00:30:26,220
the beginning and you also had to you

00:30:23,940 --> 00:30:27,900
also didn't want to submit the packages

00:30:26,220 --> 00:30:29,940
but you know it's gonna fail because

00:30:27,900 --> 00:30:32,850
that's also expensive especially if you

00:30:29,940 --> 00:30:35,430
have like eight virtual machines so I

00:30:32,850 --> 00:30:37,260
had my own script kind of my own card

00:30:35,430 --> 00:30:40,080
each other which also you know pulled a

00:30:37,260 --> 00:30:42,510
DNF data from our card she checked all

00:30:40,080 --> 00:30:43,980
the requirements try to figure out if he

00:30:42,510 --> 00:30:46,440
can get them and then submitted those

00:30:43,980 --> 00:30:49,710
and the success rate of our build was

00:30:46,440 --> 00:30:51,720
like you could hit make 90% of which is

00:30:49,710 --> 00:30:55,410
quite good

00:30:51,720 --> 00:30:57,300
we do have a cm overlay for this kit so

00:30:55,410 --> 00:31:01,170
it's a separate repository it holds

00:30:57,300 --> 00:31:05,400
everything that I'm hacking on so if the

00:31:01,170 --> 00:31:07,950
release has dot number dot R is 5 before

00:31:05,400 --> 00:31:10,770
the dist that means I did something to

00:31:07,950 --> 00:31:11,520
that package so it's either a paschal ID

00:31:10,770 --> 00:31:14,010
which is not

00:31:11,520 --> 00:31:16,290
steamed or seen but not in release or

00:31:14,010 --> 00:31:19,410
had to make changes to a spec file and

00:31:16,290 --> 00:31:22,200
didn't yet push them to this gate so

00:31:19,410 --> 00:31:24,090
that's you know I changed something but

00:31:22,200 --> 00:31:26,790
probably be a change like entry of what

00:31:24,090 --> 00:31:29,610
I did and there is a separate SEM and

00:31:26,790 --> 00:31:31,650
also that means that I can make changes

00:31:29,610 --> 00:31:34,440
without you know waiting like two weeks

00:31:31,650 --> 00:31:38,670
to four weeks until someone you know

00:31:34,440 --> 00:31:41,280
reacts on a disk it disk images so

00:31:38,670 --> 00:31:43,410
basically we are free now Ivor is a

00:31:41,280 --> 00:31:45,810
developer what I call which is like the

00:31:43,410 --> 00:31:48,420
kitchen sink it has everything that you

00:31:45,810 --> 00:31:54,170
would like to do our PM's it has no mode

00:31:48,420 --> 00:31:54,170
x11 support the buggers Emacs films

00:31:54,440 --> 00:31:59,610
everything you might want to do even

00:31:56,940 --> 00:32:01,890
manipulate virtual disk images so the

00:31:59,610 --> 00:32:03,600
problem is if you want to boot the

00:32:01,890 --> 00:32:06,090
system and you want to get the package

00:32:03,600 --> 00:32:08,340
you might need to wait 10 minutes to get

00:32:06,090 --> 00:32:10,620
it and if you want to have like you know

00:32:08,340 --> 00:32:12,690
oh I'm missing a get another 10 minutes

00:32:10,620 --> 00:32:15,330
I'm missing my vim another 10 minutes to

00:32:12,690 --> 00:32:19,740
missing that in another 10 minutes so

00:32:15,330 --> 00:32:21,810
it's very annoying DNF and parsing XML

00:32:19,740 --> 00:32:27,750
files I believe the last time you looked

00:32:21,810 --> 00:32:29,370
but DNS is slow so yeah and there's a

00:32:27,750 --> 00:32:31,320
genome disk image which basically

00:32:29,370 --> 00:32:33,030
developer plus whatever you needed to

00:32:31,320 --> 00:32:34,620
run a genome desktop and there is the

00:32:33,030 --> 00:32:36,630
minimal so some people don't want to

00:32:34,620 --> 00:32:38,250
spend you know talent one gigabyte we

00:32:36,630 --> 00:32:40,170
just need to boot and save it it works

00:32:38,250 --> 00:32:42,840
so for example virtualization people we

00:32:40,170 --> 00:32:45,960
just need something small with boots so

00:32:42,840 --> 00:32:47,460
that's basically that's it again we

00:32:45,960 --> 00:32:50,990
probably could build workstation or

00:32:47,460 --> 00:32:53,340
server at this point I don't exactly see

00:32:50,990 --> 00:32:56,120
something blocking us but it needs to be

00:32:53,340 --> 00:32:56,120
investigated

00:33:01,660 --> 00:33:07,280
yes yes if you have a hard word so much

00:33:04,940 --> 00:33:11,030
faster yeah it's decent

00:33:07,280 --> 00:33:13,100
yes yeah I'm like um well unless you

00:33:11,030 --> 00:33:14,720
have a Intel's the five-pointed your

00:33:13,100 --> 00:33:17,240
health system running for will you don't

00:33:14,720 --> 00:33:19,880
have any problems if you're running in a

00:33:17,240 --> 00:33:24,799
laptop like I tend to do then it's gonna

00:33:19,880 --> 00:33:27,020
be slow disk images so we started to

00:33:24,799 --> 00:33:29,809
have a blast this images so it means I

00:33:27,020 --> 00:33:31,309
take some image I booted the Kia Moo I

00:33:29,809 --> 00:33:32,990
started playing this it seeing if things

00:33:31,309 --> 00:33:34,400
working you know if everything on the

00:33:32,990 --> 00:33:36,830
system do you looks green

00:33:34,400 --> 00:33:39,440
so most images are posted on Fedora

00:33:36,830 --> 00:33:42,200
project at arc so you can get flows you

00:33:39,440 --> 00:33:44,510
can pull directly images from Akagi if

00:33:42,200 --> 00:33:48,169
you want to look at old stage for disk

00:33:44,510 --> 00:33:50,290
images that's also still available we

00:33:48,169 --> 00:33:54,200
don't provide disk images for the board

00:33:50,290 --> 00:33:57,110
so all because it didn't it wasn't

00:33:54,200 --> 00:33:59,620
supported upstream kernel I didn't want

00:33:57,110 --> 00:34:04,160
to pull in a large number of you know

00:33:59,620 --> 00:34:06,110
moving patches so anyone who wanted to

00:34:04,160 --> 00:34:08,389
do the board runs the door on the board

00:34:06,110 --> 00:34:10,250
they had to build beyond kernels this is

00:34:08,389 --> 00:34:12,350
gonna be changing very soon because five

00:34:10,250 --> 00:34:15,290
point free can do that so after we

00:34:12,350 --> 00:34:17,419
finished master build how long I don't

00:34:15,290 --> 00:34:18,740
know how long it's gonna take yet I can

00:34:17,419 --> 00:34:20,629
I'm gonna start looking a fire free

00:34:18,740 --> 00:34:22,310
kernel and actually having an image of

00:34:20,629 --> 00:34:25,850
it can boot on the board out of the box

00:34:22,310 --> 00:34:28,879
I also set up ever build a repository

00:34:25,850 --> 00:34:30,970
it's not assigned one but it makes your

00:34:28,879 --> 00:34:33,320
life easier because you can just have a

00:34:30,970 --> 00:34:35,480
very builder to generate your disk

00:34:33,320 --> 00:34:37,940
images do modifications to it you know

00:34:35,480 --> 00:34:41,240
change the size hast passwords whatever

00:34:37,940 --> 00:34:45,710
and then you can use dirt install to get

00:34:41,240 --> 00:34:48,109
it into your levert and the only thing

00:34:45,710 --> 00:34:51,740
you'll need to extract from the from

00:34:48,109 --> 00:34:53,600
that disk image is your server blob so

00:34:51,740 --> 00:34:57,560
that's what he is an openness be I was a

00:34:53,600 --> 00:34:59,840
you boot it's also available on the web

00:34:57,560 --> 00:35:02,359
page if you if you follow the first link

00:34:59,840 --> 00:35:03,980
under disk images it's also extract as

00:35:02,359 --> 00:35:06,440
you if you don't want to deal with the

00:35:03,980 --> 00:35:08,119
disk images you don't need you to do so

00:35:06,440 --> 00:35:11,119
the targets that here supports the key

00:35:08,119 --> 00:35:12,320
amou Liberty Musa tab and you used to

00:35:11,119 --> 00:35:14,960
support at least the older

00:35:12,320 --> 00:35:16,760
disk images also worked as a tiny mu but

00:35:14,960 --> 00:35:20,420
he moved so far ahead that it's not

00:35:16,760 --> 00:35:22,250
fully working now so if you pull a load

00:35:20,420 --> 00:35:24,920
all the Dory image what's gonna work

00:35:22,250 --> 00:35:26,660
this tiny move newer ones not gonna work

00:35:24,920 --> 00:35:29,210
there's a physical board as I mentioned

00:35:26,660 --> 00:35:33,080
the five feet is going to support it

00:35:29,210 --> 00:35:34,760
and we gonna do so yeah that's going to

00:35:33,080 --> 00:35:38,900
be in disc images as soon as you can

00:35:34,760 --> 00:35:41,390
finish the master build and if you wanna

00:35:38,900 --> 00:35:42,980
run this micro SM expansion board the

00:35:41,390 --> 00:35:44,690
problem I'm gonna have those patches in

00:35:42,980 --> 00:35:47,030
so you're gonna only support the board

00:35:44,690 --> 00:35:49,070
not the old expansion stuff that you

00:35:47,030 --> 00:35:50,750
cannot use today and all the

00:35:49,070 --> 00:35:55,430
instructions are available on the Fedora

00:35:50,750 --> 00:35:57,950
wiki page so annoying bit so configure

00:35:55,430 --> 00:36:01,600
config scripts so config that guess and

00:35:57,950 --> 00:36:04,280
sub it's still a case so there is

00:36:01,600 --> 00:36:07,760
configure a macro which attempts to

00:36:04,280 --> 00:36:11,390
replace it not always work so that's

00:36:07,760 --> 00:36:13,790
still a bit annoying versus the somewhat

00:36:11,390 --> 00:36:15,380
initiative is Atomics so is five only

00:36:13,790 --> 00:36:16,940
supports both sides Atomics and

00:36:15,380 --> 00:36:21,380
everything else goes from good atomic

00:36:16,940 --> 00:36:23,240
and people tend to use - LP fred which

00:36:21,380 --> 00:36:25,790
is not the correct way to use you have

00:36:23,240 --> 00:36:26,960
to use - be fred and that expands two

00:36:25,790 --> 00:36:28,730
different things in the different

00:36:26,960 --> 00:36:33,470
platforms so apparently a lot of

00:36:28,730 --> 00:36:35,600
packages do that so they use - LP fred

00:36:33,470 --> 00:36:37,970
and then that happens that you get and

00:36:35,600 --> 00:36:39,470
defined references to you lobotomy calls

00:36:37,970 --> 00:36:41,780
because the compiler is not going to

00:36:39,470 --> 00:36:46,400
take care of it so the current GC does

00:36:41,780 --> 00:36:49,760
not inline most of atomic calls you can

00:36:46,400 --> 00:36:52,640
fix that by manually link into the - -

00:36:49,760 --> 00:36:55,160
lab atomic or you can probably I'm

00:36:52,640 --> 00:36:57,380
somewhat considering but not doing it

00:36:55,160 --> 00:37:01,670
yet is actually replacing the P Fred

00:36:57,380 --> 00:37:04,310
this linker script a similar way like

00:37:01,670 --> 00:37:09,110
let's see works so it automatically

00:37:04,310 --> 00:37:14,390
includes as an idiot - al atomic - - has

00:37:09,110 --> 00:37:16,610
no needed so if you use - be fred on the

00:37:14,390 --> 00:37:18,500
risk v there's a GCC so Jesus is going

00:37:16,610 --> 00:37:22,520
to do corrects thing for a spec and it's

00:37:18,500 --> 00:37:25,490
going to link - all atomic another thing

00:37:22,520 --> 00:37:28,210
for example was dynamic section

00:37:25,490 --> 00:37:31,510
being read only in there is five read

00:37:28,210 --> 00:37:34,070
every texture that does that is MIPS and

00:37:31,510 --> 00:37:36,290
then the streaming was happening in

00:37:34,070 --> 00:37:39,410
agility it was copied from the MIPS file

00:37:36,290 --> 00:37:41,810
so so technically that comment is wrong

00:37:39,410 --> 00:37:45,530
because respect doesn't require to be

00:37:41,810 --> 00:37:47,210
read only but now it's part of ABI

00:37:45,530 --> 00:37:49,880
another thing is that the library is

00:37:47,210 --> 00:37:53,030
living a bit different location so you

00:37:49,880 --> 00:37:56,660
have /u star slash lipsticks before and

00:37:53,030 --> 00:38:00,260
then have an ABI and again the using

00:37:56,660 --> 00:38:02,530
lp64 d as an ABI the way we solve that

00:38:00,260 --> 00:38:05,480
in the fedora we have a sim links do you

00:38:02,530 --> 00:38:08,720
do a parent directory so that works so

00:38:05,480 --> 00:38:10,820
we can use either the official risk five

00:38:08,720 --> 00:38:13,190
defined locations of the library so it

00:38:10,820 --> 00:38:15,560
can still use the same slash lips 64 and

00:38:13,190 --> 00:38:19,070
that's the points the same thing and we

00:38:15,560 --> 00:38:21,130
found no problems is that and many ideas

00:38:19,070 --> 00:38:23,869
again they have to move to new server

00:38:21,130 --> 00:38:26,420
they're still ongoing discussions was

00:38:23,869 --> 00:38:29,540
ordered so I have streamed audit

00:38:26,420 --> 00:38:31,400
framework in the kernel the library in

00:38:29,540 --> 00:38:33,980
the user space is a bit blocked because

00:38:31,400 --> 00:38:35,600
the maintainer wants to refactor the

00:38:33,980 --> 00:38:38,390
library doesn't want to take the tables

00:38:35,600 --> 00:38:40,250
forest fire protection because then

00:38:38,390 --> 00:38:43,040
someone might not maintain them and then

00:38:40,250 --> 00:38:45,980
it's gonna you know typical problems the

00:38:43,040 --> 00:38:48,200
second patch also exists I have it

00:38:45,980 --> 00:38:51,230
including fedora disk images I have to

00:38:48,200 --> 00:38:52,910
send out the v2 version to the kernel

00:38:51,230 --> 00:38:55,550
mailing list but basically it works

00:38:52,910 --> 00:38:58,010
except one kernel stuff soft test is

00:38:55,550 --> 00:38:59,540
failing which is the new edition so I

00:38:58,010 --> 00:39:02,240
still need you look so we still have

00:38:59,540 --> 00:39:04,369
packages in disk it if you probably have

00:39:02,240 --> 00:39:06,680
a hundreds of them which I still need to

00:39:04,369 --> 00:39:08,680
go and check and probably submit to this

00:39:06,680 --> 00:39:11,650
gate or push some patches to have stream

00:39:08,680 --> 00:39:13,580
but that's you know going slow because

00:39:11,650 --> 00:39:15,619
infrastructure number one because that's

00:39:13,580 --> 00:39:19,460
not running servers no fedora it's five

00:39:15,619 --> 00:39:21,560
and you know we had a lot of new changes

00:39:19,460 --> 00:39:23,720
that have deal and now working we have

00:39:21,560 --> 00:39:25,970
added a compiler we have free Pascal

00:39:23,720 --> 00:39:28,790
working we have Haskell compilers the

00:39:25,970 --> 00:39:30,980
missing pieces are rust a little VM

00:39:28,790 --> 00:39:32,630
clang which is basically done once it

00:39:30,980 --> 00:39:34,520
lands in official cause I'm gonna pull

00:39:32,630 --> 00:39:37,040
that end and that's gonna work I was

00:39:34,520 --> 00:39:38,400
supposed to be gonna work and a go line

00:39:37,040 --> 00:39:40,109
which also a

00:39:38,400 --> 00:39:43,609
this but it's not yet merged because

00:39:40,109 --> 00:39:46,589
it's blood play upcoming Galang release

00:39:43,609 --> 00:39:48,779
I'm supposed to use a card a shadow but

00:39:46,589 --> 00:39:50,490
I'm bit afraid of it again because I'm

00:39:48,779 --> 00:39:55,200
not fully sure what its gonna do to the

00:39:50,490 --> 00:39:58,319
current Kaji state we usually have a

00:39:55,200 --> 00:40:00,359
birthday bootloader before we had the

00:39:58,319 --> 00:40:01,829
proper firmware which is you know open

00:40:00,359 --> 00:40:03,720
as we are in the u-boot so that's also

00:40:01,829 --> 00:40:05,880
solved and again you can install new

00:40:03,720 --> 00:40:08,279
kernels and can reboot and you don't

00:40:05,880 --> 00:40:10,920
need to kind of kill a VM change your

00:40:08,279 --> 00:40:12,569
CLI arguments to a new kernel booty so

00:40:10,920 --> 00:40:16,049
that's very nice and not officially

00:40:12,569 --> 00:40:17,880
produce me the images for the board and

00:40:16,049 --> 00:40:20,309
there were a number of companies which

00:40:17,880 --> 00:40:22,109
directly supports fedoras five directly

00:40:20,309 --> 00:40:23,460
and not directly so most of the servers

00:40:22,109 --> 00:40:25,140
that we use for builders are old

00:40:23,460 --> 00:40:30,329
Facebook servers today

00:40:25,140 --> 00:40:32,819
hosted by GCC compiled form project and

00:40:30,329 --> 00:40:34,680
sci-fi dilated the board's tranquility

00:40:32,819 --> 00:40:37,890
donated three initial car G servers

00:40:34,680 --> 00:40:41,250
backup servers Westin digital also

00:40:37,890 --> 00:40:42,990
donated the storage from a new server so

00:40:41,250 --> 00:40:44,760
a lot of so a lot of individuals a lot

00:40:42,990 --> 00:40:48,930
of individuals from Red Hat different

00:40:44,760 --> 00:40:52,980
companies specs so it's moving very fast

00:40:48,930 --> 00:40:55,349
and it's expanding very fast so that's

00:40:52,980 --> 00:40:57,589
long so but you still have time for

00:40:55,349 --> 00:40:57,589
questions

00:41:04,900 --> 00:41:11,559
no it's a separate way as far as you

00:41:07,960 --> 00:41:15,190
know I think there might be we're still

00:41:11,559 --> 00:41:17,319
discussions changed to some potential

00:41:15,190 --> 00:41:18,999
changes for virtualization so I did I

00:41:17,319 --> 00:41:23,920
don't think that the spec is frozen at

00:41:18,999 --> 00:41:25,119
this point yes so there's a key so we

00:41:23,920 --> 00:41:27,339
started working on an implementation

00:41:25,119 --> 00:41:29,380
there are some ideas how to improve the

00:41:27,339 --> 00:41:30,999
performance and stuff like that there

00:41:29,380 --> 00:41:33,849
are some discussions of what can be done

00:41:30,999 --> 00:41:35,230
and improved it's still gonna work but

00:41:33,849 --> 00:41:37,410
you know in the future might work a bit

00:41:35,230 --> 00:41:40,299
more efficient

00:41:37,410 --> 00:41:42,249
yeah well the baseline is just integer

00:41:40,299 --> 00:41:47,039
that's it you don't get you know Atomics

00:41:42,249 --> 00:41:51,549
multiplications flows nothing so yes

00:41:47,039 --> 00:41:54,220
that probably get I I mean if you look

00:41:51,549 --> 00:41:56,440
at this page but basically you can build

00:41:54,220 --> 00:42:03,039
a very very minimal chip without

00:41:56,440 --> 00:42:06,809
anything much for Linux just ever be 64

00:42:03,039 --> 00:42:09,999
GC that's defined in the ERISA 5 UNIX

00:42:06,809 --> 00:42:12,309
platform specification so it's not

00:42:09,999 --> 00:42:16,960
instruction instruction that defines the

00:42:12,309 --> 00:42:19,869
basic software target which is be 64 G

00:42:16,960 --> 00:42:22,539
that's the G stands for integer

00:42:19,869 --> 00:42:24,369
multiplications atomic still no it

00:42:22,539 --> 00:42:26,619
defines a set of extensions but you want

00:42:24,369 --> 00:42:28,869
to have and then this unique SPECT

00:42:26,619 --> 00:42:30,670
defines that all you need also extra

00:42:28,869 --> 00:42:32,680
compressed instructions you need to you

00:42:30,670 --> 00:42:41,769
know this virtual memory stuff you need

00:42:32,680 --> 00:42:44,170
this and that's for your Linux system it

00:42:41,769 --> 00:42:47,410
doesn't talk about that so the spec is

00:42:44,170 --> 00:42:49,989
very shorter today so respectful nation

00:42:47,410 --> 00:42:51,849
has started at has group to define you

00:42:49,989 --> 00:42:55,359
know have a very well written document

00:42:51,849 --> 00:42:57,910
of what even UNIX and the it that it's

00:42:55,359 --> 00:42:59,289
all named is a unique spec specification

00:42:57,910 --> 00:43:00,910
but it's a bit wrong because you're

00:42:59,289 --> 00:43:03,609
gonna have specification not only for

00:43:00,910 --> 00:43:05,440
the unix-like systems vision beyond that

00:43:03,609 --> 00:43:06,970
so you might have a different profiles

00:43:05,440 --> 00:43:09,730
for different kind of systems you want

00:43:06,970 --> 00:43:13,829
target like like embedded you know needs

00:43:09,730 --> 00:43:17,109
a different targets so that

00:43:13,829 --> 00:43:19,569
it's not frozen so it's again there's a

00:43:17,109 --> 00:43:21,279
working group it has group with a nurse

00:43:19,569 --> 00:43:23,289
five Foundation which is working on that

00:43:21,279 --> 00:43:26,700
specification this also includes an open

00:43:23,289 --> 00:43:29,650
SBI OSBI supervisor binary interface

00:43:26,700 --> 00:43:32,469
thermal interface basically so that's

00:43:29,650 --> 00:43:35,289
still very much moving target so we just

00:43:32,469 --> 00:43:37,420
needed have something as a base so it's

00:43:35,289 --> 00:43:40,479
ended up being like two paragraph at the

00:43:37,420 --> 00:43:42,339
beginning it was a reformatted recently

00:43:40,479 --> 00:43:44,229
but it's haven't moved very far from

00:43:42,339 --> 00:43:55,779
that so it's very basic not like

00:43:44,229 --> 00:44:03,459
something that you get from arm if you

00:43:55,779 --> 00:44:21,549
have a custom patches yes there's no

00:44:03,459 --> 00:44:24,219
hard realization so the way the sci-fi

00:44:21,549 --> 00:44:27,359
at least compares the chip so the

00:44:24,219 --> 00:44:30,849
current sci-fi and leash board is I

00:44:27,359 --> 00:44:32,979
think it's you 54 course there are four

00:44:30,849 --> 00:44:37,420
cores of fat and that's performance like

00:44:32,979 --> 00:44:41,319
cortex a53 and the next generation used

00:44:37,420 --> 00:44:45,119
74 fingers to be market is as similar to

00:44:41,319 --> 00:44:45,119
cortex ace 55

00:44:55,920 --> 00:45:03,930
the way we found it surprisingly not

00:44:59,369 --> 00:45:05,970
well depends on your host machine but if

00:45:03,930 --> 00:45:09,450
you compare our builder systems we find

00:45:05,970 --> 00:45:12,270
that the board is still faster like

00:45:09,450 --> 00:45:15,240
building kernels or GCC's so if you have

00:45:12,270 --> 00:45:16,680
a very complicated like C++ project the

00:45:15,240 --> 00:45:19,200
board is still better than running on

00:45:16,680 --> 00:45:20,970
the Q moon well unless again you have a

00:45:19,200 --> 00:45:23,010
high performance in total and each chip

00:45:20,970 --> 00:45:25,890
which can boost is like 5.2 gears or

00:45:23,010 --> 00:45:28,080
something in that case I don't know the

00:45:25,890 --> 00:45:30,720
numbers but you might be be a performant

00:45:28,080 --> 00:45:33,030
of the board or maybe even better you

00:45:30,720 --> 00:45:36,260
can go up to eight cores on the Q

00:45:33,030 --> 00:45:36,260
instance that's the limit

00:46:00,590 --> 00:46:05,340
so my suggestion was like years ago but

00:46:03,720 --> 00:46:07,560
you need something maybe like the narrow

00:46:05,340 --> 00:46:09,570
developer cloud so that the people can

00:46:07,560 --> 00:46:12,570
actually get some allocations of the

00:46:09,570 --> 00:46:17,970
boards to run BCI's do you know porting

00:46:12,570 --> 00:46:20,430
or performance checks today that's not

00:46:17,970 --> 00:46:22,440
the case Seifer was the first company to

00:46:20,430 --> 00:46:25,350
seed the development boards physical

00:46:22,440 --> 00:46:27,150
boards for free to like Debian Galang

00:46:25,350 --> 00:46:29,280
people so anyone who's working on a some

00:46:27,150 --> 00:46:31,890
major project could get the physical

00:46:29,280 --> 00:46:34,670
board so we would have direct access

00:46:31,890 --> 00:46:34,670
okay

00:46:34,730 --> 00:46:43,980
the rest depends

00:46:36,630 --> 00:46:48,630
I mean it's yes I mean I would like to

00:46:43,980 --> 00:46:49,460
have that I mentioned that but you don't

00:46:48,630 --> 00:46:52,020
have it yet

00:46:49,460 --> 00:46:55,820
and I'm not sure if it's gonna be in the

00:46:52,020 --> 00:46:55,820
future but I think that'd be great

00:47:10,600 --> 00:47:19,330
so this which it checks my conscience is

00:47:15,050 --> 00:47:19,330
and if my constant has a new package or

00:47:21,700 --> 00:47:25,810
okay this okay

00:47:26,690 --> 00:47:30,230
does anyone plan to write the full

00:47:28,580 --> 00:47:34,010
documentation for Kasia shadows that

00:47:30,230 --> 00:47:35,450
would be great yeah so that was my idea

00:47:34,010 --> 00:47:37,250
the only way to figure out what the

00:47:35,450 --> 00:47:44,660
cardi shadow is doing just take a coat

00:47:37,250 --> 00:47:46,550
on you know and read it yeah so yeah so

00:47:44,660 --> 00:47:48,290
I think in the future

00:47:46,550 --> 00:47:50,120
Kaja shadow is something that you need

00:47:48,290 --> 00:47:55,810
if you want to ever become an official

00:47:50,120 --> 00:47:58,640
secondary architecture so yeah so I I

00:47:55,810 --> 00:48:00,700
kind of want to avoid it but I can avoid

00:47:58,640 --> 00:48:00,700
it

00:48:05,950 --> 00:48:22,460
yeah that would be great and you could

00:48:07,910 --> 00:48:24,080
have it Vicky pasted maybe so jessica

00:48:22,460 --> 00:48:27,010
works that's the first thing we tried

00:48:24,080 --> 00:48:29,660
the networks there might be a small

00:48:27,010 --> 00:48:33,980
smallish issues in the fedora in the

00:48:29,660 --> 00:48:36,350
future related to Lib FFI so the problem

00:48:33,980 --> 00:48:38,360
is that Fedora uses the last official

00:48:36,350 --> 00:48:41,840
release which apparently some districts

00:48:38,360 --> 00:48:44,420
don't even use because the look fi is

00:48:41,840 --> 00:48:47,870
not being released and the maintainer is

00:48:44,420 --> 00:48:50,120
very slowly believed so the risk v is

00:48:47,870 --> 00:48:55,190
merged in it's even the patches emerged

00:48:50,120 --> 00:48:56,600
on the GCC copy of the identify so at

00:48:55,190 --> 00:48:58,850
some point it would be nice if Fedora

00:48:56,600 --> 00:49:00,710
could bump to something to a get worse

00:48:58,850 --> 00:49:02,900
you know specific get commit off a

00:49:00,710 --> 00:49:05,150
little afar because I don't expect do

00:49:02,900 --> 00:49:08,650
you have any release next what there

00:49:05,150 --> 00:49:08,650
were a few years if ever

00:49:16,920 --> 00:49:23,470
well let's see interesting questions I

00:49:20,200 --> 00:49:25,690
think we are the first ones so we worked

00:49:23,470 --> 00:49:27,190
very close to the Debian believe it or

00:49:25,690 --> 00:49:33,580
not but I would say that's the door is

00:49:27,190 --> 00:49:35,380
partly Debian and Fedora baby you're

00:49:33,580 --> 00:49:36,790
gonna even find the Debian people in a

00:49:35,380 --> 00:49:39,730
fedora spark channel and we're

00:49:36,790 --> 00:49:41,860
discussing all the things we had more

00:49:39,730 --> 00:49:44,680
bad news so human power to push it

00:49:41,860 --> 00:49:47,200
through so I think we got in a better

00:49:44,680 --> 00:49:49,360
shape and we still may be delivering

00:49:47,200 --> 00:49:51,970
some things faster than Debian but they

00:49:49,360 --> 00:49:54,820
again I'm not fully sure because I'm not

00:49:51,970 --> 00:49:57,670
running the Debian but I was working as

00:49:54,820 --> 00:50:01,060
a full time for four years so I had the

00:49:57,670 --> 00:50:03,940
bandage to push things faster and Fedora

00:50:01,060 --> 00:50:05,890
to some people are interesting be mainly

00:50:03,940 --> 00:50:08,080
rawhide so it's a fast moving target so

00:50:05,890 --> 00:50:10,390
we want to be too fast in this case and

00:50:08,080 --> 00:50:12,550
that for example might this get overlay

00:50:10,390 --> 00:50:14,200
allows me to be too fast if there is a

00:50:12,550 --> 00:50:16,690
package someone comes in and says if you

00:50:14,200 --> 00:50:19,630
need it for academic research or I'm a

00:50:16,690 --> 00:50:21,580
developer and I need that you know when

00:50:19,630 --> 00:50:24,010
that's what I can use out actually

00:50:21,580 --> 00:50:26,500
waiting you know whatever it takes weeks

00:50:24,010 --> 00:50:28,780
days or whatever to get that and in this

00:50:26,500 --> 00:50:30,370
case even if it's not yet fully murdered

00:50:28,780 --> 00:50:32,470
or something for example I am planning

00:50:30,370 --> 00:50:34,240
to have a goal and and not waiting for

00:50:32,470 --> 00:50:38,550
the next trigger line release for

00:50:34,240 --> 00:50:38,550
example because people want to use it

00:50:48,239 --> 00:50:57,339
so there's no board specification but

00:50:53,859 --> 00:51:00,819
the atleast sci-fi board has the benign

00:50:57,339 --> 00:51:04,239
ship which stores one of the I think

00:51:00,819 --> 00:51:06,819
it's called FST the FSB L bootloader

00:51:04,239 --> 00:51:10,299
which also has a DTD file which can be

00:51:06,819 --> 00:51:12,789
flashed the new year build which mine

00:51:10,299 --> 00:51:26,890
may or may not be replaced in the future

00:51:12,789 --> 00:51:31,029
this open boot SPL so in that case you

00:51:26,890 --> 00:51:33,519
most likely want to end up in race v

00:51:31,029 --> 00:51:35,440
foundation last for a specification Task

00:51:33,519 --> 00:51:38,279
Group and say that that's something you

00:51:35,440 --> 00:51:38,279
want to put in a spec

00:51:49,510 --> 00:51:57,380
yeah so today I don't I don't have an

00:51:54,650 --> 00:51:59,390
idea how to support multiple boards so I

00:51:57,380 --> 00:52:01,430
mean where's a single board there is an

00:51:59,390 --> 00:52:04,070
Andes platform that also has a you boot

00:52:01,430 --> 00:52:06,980
and MMC support so we technically could

00:52:04,070 --> 00:52:09,770
do that but we don't produce chips we

00:52:06,980 --> 00:52:13,700
are the same as a sci-fi be targeting a

00:52:09,770 --> 00:52:16,700
custom solutions so but only sci-fi

00:52:13,700 --> 00:52:32,180
released a chip that can be used by

00:52:16,700 --> 00:52:34,670
developers that so the boot stuff is not

00:52:32,180 --> 00:52:36,680
being it defined it's being worked also

00:52:34,670 --> 00:52:38,930
part of that working group team as far

00:52:36,680 --> 00:52:40,610
as I know so if you want to define you

00:52:38,930 --> 00:52:42,640
want to have some concerns battery

00:52:40,610 --> 00:52:46,790
issues raise them

00:52:42,640 --> 00:52:53,210
when that risk 5 was added to a CPI your

00:52:46,790 --> 00:52:56,300
I red fish and PC PC virus specs it is a

00:52:53,210 --> 00:52:58,850
channel core which can boot on FPGA chip

00:52:56,300 --> 00:53:01,880
and get into a shell there is a group

00:52:58,850 --> 00:53:03,440
2.0 4 which also supports there is 5v if

00:53:01,880 --> 00:53:05,300
you are and the you would also supports

00:53:03,440 --> 00:53:07,790
when there is 5 again the only missing

00:53:05,300 --> 00:53:10,150
piece in the kernel to you is if I

00:53:07,790 --> 00:53:10,150
Stubbs

00:53:28,239 --> 00:53:36,259
so yeah it has to be at some point and

00:53:34,249 --> 00:53:37,699
again it's a working working progress if

00:53:36,259 --> 00:53:39,920
you have concerns about we're supposed

00:53:37,699 --> 00:53:43,009
to but the best place to raise it or at

00:53:39,920 --> 00:53:45,140
least on the various open mailing lists

00:53:43,009 --> 00:53:46,249
but that's what you like to have and you

00:53:45,140 --> 00:53:49,009
know what is your reasoning

00:53:46,249 --> 00:53:52,670
I personally don't expect to have a full

00:53:49,009 --> 00:53:55,670
Tanika or anyone on the boards the best

00:53:52,670 --> 00:53:58,400
I could expect something ebbr like and

00:53:55,670 --> 00:54:02,119
you know my target my personal target is

00:53:58,400 --> 00:54:12,249
something a r64 has slowly moving

00:54:02,119 --> 00:54:12,249
towards that more questions

00:54:13,770 --> 00:54:20,269
okay thank you

00:54:15,610 --> 00:54:20,269

YouTube URL: https://www.youtube.com/watch?v=L6ZaWKaQCD0


