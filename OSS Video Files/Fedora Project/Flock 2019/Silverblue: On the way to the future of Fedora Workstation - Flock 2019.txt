Title: Silverblue: On the way to the future of Fedora Workstation - Flock 2019
Publication date: 2019-08-28
Playlist: Flock 2019
Description: 
	Tomáš Popela, Jiří Eischmann

We will talk about the achievements and challenges on the way towards making the Silverblue the official Fedora desktop offering.

--
Recordings of talks at Flock are a community effort. Unfortunately not everything works perfectly every time. If you're interested in helping us improve, let us know.
Captions: 
	00:00:01,120 --> 00:00:08,300
so I put like this yesterday to the

00:00:05,990 --> 00:00:10,490
slides because I like what metamer said

00:00:08,300 --> 00:00:12,139
about silver blue that's a blue

00:00:10,490 --> 00:00:15,200
basically is a federal system for living

00:00:12,139 --> 00:00:17,420
in the container world I think that it

00:00:15,200 --> 00:00:19,940
really makes the point because they are

00:00:17,420 --> 00:00:23,060
I maybe we could replace it even with

00:00:19,940 --> 00:00:28,490
that toys toy story picture if I

00:00:23,060 --> 00:00:34,010
containers everywhere so that's how we

00:00:28,490 --> 00:00:36,500
can like describe some basic stuff about

00:00:34,010 --> 00:00:38,929
the silver blue so it's basically next

00:00:36,500 --> 00:00:41,629
generation desktop operating system it's

00:00:38,929 --> 00:00:44,719
like its uses some fundamental

00:00:41,629 --> 00:00:46,879
technologies like OS 3 and our pmos 3

00:00:44,719 --> 00:00:49,969
that our web is that were basically

00:00:46,879 --> 00:00:51,829
developed by the chorus guys we are

00:00:49,969 --> 00:00:56,210
sharing another like technologies with

00:00:51,829 --> 00:00:59,120
them and we are together we put this

00:00:56,210 --> 00:01:05,420
like technologies together and we'll

00:00:59,120 --> 00:01:08,240
make sure we make the so we are sharing

00:01:05,420 --> 00:01:12,440
a lot of technologies with chorus team

00:01:08,240 --> 00:01:16,820
like OS 3 and rpm or 3 and then in the

00:01:12,440 --> 00:01:20,240
toolbox what's like typical for this

00:01:16,820 --> 00:01:21,950
kind of stuff is that there are so s3 as

00:01:20,240 --> 00:01:25,370
you probably know it's basically get

00:01:21,950 --> 00:01:27,680
like system for file systems and like to

00:01:25,370 --> 00:01:30,290
deploying images the operating system

00:01:27,680 --> 00:01:32,780
images and so on so some parts of this

00:01:30,290 --> 00:01:36,830
file system are mounted as read-only

00:01:32,780 --> 00:01:38,750
that's like it has some pros and some

00:01:36,830 --> 00:01:42,470
cons that we were to talk about later

00:01:38,750 --> 00:01:46,100
and another great thing about that is it

00:01:42,470 --> 00:01:47,480
does atomic updates so it's like

00:01:46,100 --> 00:01:49,400
necessary to resign to the new

00:01:47,480 --> 00:01:53,720
deployment when when you're actually

00:01:49,400 --> 00:01:57,530
doing to update and so on so the main

00:01:53,720 --> 00:02:01,000
benefits of server blue are at least in

00:01:57,530 --> 00:02:01,000
our point of view the robustness

00:02:01,030 --> 00:02:07,370
robustness of the system is basically

00:02:03,890 --> 00:02:10,759
done by these things the domination over

00:02:07,370 --> 00:02:12,740
there beside atomic updates so you avoid

00:02:10,759 --> 00:02:14,750
the life updates the

00:02:12,740 --> 00:02:17,600
you are probably used to from the

00:02:14,750 --> 00:02:20,990
regular federal revenue update the

00:02:17,600 --> 00:02:24,380
system by running TANF but the thing is

00:02:20,990 --> 00:02:26,540
that it's not a great idea to update on

00:02:24,380 --> 00:02:29,060
right system because it could be like

00:02:26,540 --> 00:02:31,130
server the Google server progress and if

00:02:29,060 --> 00:02:34,430
I remember from the past there was I

00:02:31,130 --> 00:02:36,380
think Nome was crashing at some point

00:02:34,430 --> 00:02:41,420
and it was suggested that people should

00:02:36,380 --> 00:02:44,420
write down update the update the let

00:02:41,420 --> 00:02:47,060
particle update like running in T max if

00:02:44,420 --> 00:02:49,520
they didn't want it like the crash the

00:02:47,060 --> 00:02:51,650
whole system and also there was like

00:02:49,520 --> 00:02:56,030
Firefox was misbehaving because some

00:02:51,650 --> 00:02:59,960
library did use was like updating why it

00:02:56,030 --> 00:03:05,360
was the Firefox was running and then the

00:02:59,960 --> 00:03:07,250
Firefox was misbehaving another part of

00:03:05,360 --> 00:03:12,530
the robustness was the minimal base to

00:03:07,250 --> 00:03:15,980
us does the minimal operating the base

00:03:12,530 --> 00:03:18,140
operating system that that mistress or

00:03:15,980 --> 00:03:23,090
brew is so it should be like minimal to

00:03:18,140 --> 00:03:27,190
actually decrease decrease the the

00:03:23,090 --> 00:03:28,850
problems that could arise from like

00:03:27,190 --> 00:03:31,160
basically added more and more

00:03:28,850 --> 00:03:35,950
precondition to that and it could be

00:03:31,160 --> 00:03:38,780
like basically ballot proof from the

00:03:35,950 --> 00:03:43,220
problems with updates when there are

00:03:38,780 --> 00:03:45,680
some conflicts and so on the we are

00:03:43,220 --> 00:03:48,380
looking forward actually to reward to

00:03:45,680 --> 00:03:50,930
work that is done by Adam shamanic and

00:03:48,380 --> 00:03:53,590
others the minimization effort because

00:03:50,930 --> 00:03:56,360
it will allow us to decrease the

00:03:53,590 --> 00:04:02,330
probably decrease the size of the base

00:03:56,360 --> 00:04:05,480
basis even more and also do so the

00:04:02,330 --> 00:04:06,470
manual basis it's really the base based

00:04:05,480 --> 00:04:10,550
operating system

00:04:06,470 --> 00:04:12,560
it's like currently it's still not the

00:04:10,550 --> 00:04:15,230
covered completely from the applications

00:04:12,560 --> 00:04:17,450
are not completely decoupled from it but

00:04:15,230 --> 00:04:20,209
in the future everything will basically

00:04:17,450 --> 00:04:23,210
be on a flat packs and in containers so

00:04:20,209 --> 00:04:24,650
we should really have like the the basis

00:04:23,210 --> 00:04:29,600
operating system should be

00:04:24,650 --> 00:04:32,930
and just like more robust another part

00:04:29,600 --> 00:04:36,500
of the euro business are read-only parts

00:04:32,930 --> 00:04:39,710
of the system that basically slash user

00:04:36,500 --> 00:04:42,350
is mounted as read-only so that means I

00:04:39,710 --> 00:04:44,660
don't know if you are if you have the

00:04:42,350 --> 00:04:49,460
same experience as me but when I first

00:04:44,660 --> 00:04:51,770
got to the totally nuts I many times

00:04:49,460 --> 00:04:54,680
like completely destroyed my system but

00:04:51,770 --> 00:04:58,760
removing some random driver and so on

00:04:54,680 --> 00:05:00,550
but this this time there is something

00:04:58,760 --> 00:05:04,580
like super glue it could help me like

00:05:00,550 --> 00:05:06,889
whew it would save me like few maybe not

00:05:04,580 --> 00:05:09,169
to feel many more hours than fixing

00:05:06,889 --> 00:05:13,190
reinstalling systems and trying to find

00:05:09,169 --> 00:05:15,530
what's wrong and the another part of the

00:05:13,190 --> 00:05:17,889
robustness is the ability to roll back

00:05:15,530 --> 00:05:21,500
that means that if you find that

00:05:17,889 --> 00:05:23,810
something is broken in your currently

00:05:21,500 --> 00:05:27,710
running image then you can easily return

00:05:23,810 --> 00:05:30,080
to the previous one also another benefit

00:05:27,710 --> 00:05:33,949
is security that's basically combination

00:05:30,080 --> 00:05:35,900
of the previous parts that that's read

00:05:33,949 --> 00:05:38,419
only parts of the system and also

00:05:35,900 --> 00:05:41,419
minimal base based on us because we are

00:05:38,419 --> 00:05:43,820
like decreasing we are shrinking the

00:05:41,419 --> 00:05:49,090
basically attack surface by removing

00:05:43,820 --> 00:05:54,979
quite a few applications from from the

00:05:49,090 --> 00:05:56,870
from domain OS also it's there's an

00:05:54,979 --> 00:06:02,320
gnome deployment we were talking about

00:05:56,870 --> 00:06:04,849
with some IT shops that are deploying

00:06:02,320 --> 00:06:07,010
some operating system across their

00:06:04,849 --> 00:06:08,900
company and they said that they would

00:06:07,010 --> 00:06:12,530
they would like to have something like

00:06:08,900 --> 00:06:15,860
server grew because when they are

00:06:12,530 --> 00:06:18,020
handling the hardware over to do their

00:06:15,860 --> 00:06:21,139
employees they give them in some state

00:06:18,020 --> 00:06:23,150
but as stein comes and people are adding

00:06:21,139 --> 00:06:26,030
or removing stunts are in can remove

00:06:23,150 --> 00:06:29,180
stuff from the front distribution then

00:06:26,030 --> 00:06:31,099
it goes into weird States so they when

00:06:29,180 --> 00:06:34,190
they actually try to produce some

00:06:31,099 --> 00:06:36,229
scripts or anything like that they

00:06:34,190 --> 00:06:39,139
expect that

00:06:36,229 --> 00:06:42,080
that the system is in a well-known state

00:06:39,139 --> 00:06:46,729
but usually it's not and then they are

00:06:42,080 --> 00:06:50,300
just fixing the problems unlike on each

00:06:46,729 --> 00:06:52,610
increase system alone so that will be

00:06:50,300 --> 00:06:55,460
really helpful for them because then

00:06:52,610 --> 00:07:02,990
they could like predict in what state or

00:06:55,460 --> 00:07:06,800
how to how the system will look like and

00:07:02,990 --> 00:07:08,779
so this like the decor so the based

00:07:06,800 --> 00:07:10,610
operating system is the most important

00:07:08,779 --> 00:07:12,139
part into a degree it doesn't matter if

00:07:10,610 --> 00:07:14,900
a container breaks or an application

00:07:12,139 --> 00:07:16,490
doesn't run but it's not acceptable to

00:07:14,900 --> 00:07:19,909
not have the main operating system

00:07:16,490 --> 00:07:22,250
working so we have to have the the main

00:07:19,909 --> 00:07:29,120
operating to braking system working to

00:07:22,250 --> 00:07:34,729
actually because if you are let me

00:07:29,120 --> 00:07:38,689
rephrase it so I media and as there was

00:07:34,729 --> 00:07:43,849
the five point to release the media

00:07:38,689 --> 00:07:47,689
binary drivers are compatible if and as

00:07:43,849 --> 00:07:50,810
I'm running several on that when I was

00:07:47,689 --> 00:07:53,860
trying to upgrade then basically the

00:07:50,810 --> 00:07:58,129
kernel modules for any media are are

00:07:53,860 --> 00:08:06,020
compiled during the update and so

00:07:58,129 --> 00:08:09,319
actually the the update doesn't because

00:08:06,020 --> 00:08:11,180
there are some errors but I'm I don't

00:08:09,319 --> 00:08:14,210
have that particular update like

00:08:11,180 --> 00:08:16,189
installed so it's not like in the old

00:08:14,210 --> 00:08:18,229
days when I would just restart and they

00:08:16,189 --> 00:08:21,050
came out and so on will try to compile

00:08:18,229 --> 00:08:23,539
the module while booting the device and

00:08:21,050 --> 00:08:33,430
that I would be like during the broken

00:08:23,539 --> 00:08:36,969
system like Ruben could like several

00:08:33,430 --> 00:08:42,890
replace the current federal position

00:08:36,969 --> 00:08:46,610
yeah sorry currently we we don't really

00:08:42,890 --> 00:08:48,560
have any any approves plan that would

00:08:46,610 --> 00:08:49,320
take place federal workstation but it's

00:08:48,560 --> 00:08:52,800
different different

00:08:49,320 --> 00:08:56,250
is something that we are considering it

00:08:52,800 --> 00:09:00,090
may happen in the future but only if if

00:08:56,250 --> 00:09:02,340
early is it's a acceptable a placement

00:09:00,090 --> 00:09:05,190
for federal work station and certain

00:09:02,340 --> 00:09:11,940
criteria we are gonna talk about are met

00:09:05,190 --> 00:09:16,280
so it's you could hear I mean the the

00:09:11,940 --> 00:09:19,230
 in terms of the software content

00:09:16,280 --> 00:09:23,040
silver-blue is not very different from

00:09:19,230 --> 00:09:25,500
the standard fedora but the biggest

00:09:23,040 --> 00:09:27,750
difference is in is in software delivery

00:09:25,500 --> 00:09:29,810
so it's not like the traditional way you

00:09:27,750 --> 00:09:33,570
install packages and they basically

00:09:29,810 --> 00:09:36,630
install stuff into the system itself the

00:09:33,570 --> 00:09:40,560
system the system is basically immutable

00:09:36,630 --> 00:09:43,050
and the standard way how to install

00:09:40,560 --> 00:09:46,950
software into silver-blue is through

00:09:43,050 --> 00:09:52,500
containers and it's either it could be

00:09:46,950 --> 00:09:55,770
portman for clear plication x' for

00:09:52,500 --> 00:09:59,100
command line applications and it's flat

00:09:55,770 --> 00:10:03,450
back for graphical applications there's

00:09:59,100 --> 00:10:07,500
the there's the peg that way it helps us

00:10:03,450 --> 00:10:10,560
in a lot of ways one of the great things

00:10:07,500 --> 00:10:12,960
is that we basically can decouple the

00:10:10,560 --> 00:10:16,170
applications from the the base operating

00:10:12,960 --> 00:10:19,830
system they can have different life

00:10:16,170 --> 00:10:22,650
cycles so the applications can you know

00:10:19,830 --> 00:10:25,380
update and obviate themselves no matter

00:10:22,650 --> 00:10:28,410
you know no they're lying on the

00:10:25,380 --> 00:10:33,270
underlying operating system so we can

00:10:28,410 --> 00:10:38,100
you can get sort of like to speed its

00:10:33,270 --> 00:10:40,410
wealth the system could be stable with

00:10:38,100 --> 00:10:43,170
some lifetime the applications get

00:10:40,410 --> 00:10:46,550
updated as as they as they need it or

00:10:43,170 --> 00:10:46,550
they are released

00:10:55,670 --> 00:10:59,430
Nadia

00:10:57,000 --> 00:11:02,940
yeah somebody's going to talk about

00:10:59,430 --> 00:11:07,400
through books it's actually one thing we

00:11:02,940 --> 00:11:09,600
consider the to have a nice you

00:11:07,400 --> 00:11:11,400
graphically right for that but we

00:11:09,600 --> 00:11:17,089
currently don't it's a common light

00:11:11,400 --> 00:11:19,320
brain side right now well there is also

00:11:17,089 --> 00:11:21,660
another way and let's put this package

00:11:19,320 --> 00:11:25,589
layering basically our prima Wesley

00:11:21,660 --> 00:11:28,680
allows you to to install our p.m.

00:11:25,589 --> 00:11:32,910
packages from depositors directly into

00:11:28,680 --> 00:11:36,300
the base OS image so it basically alters

00:11:32,910 --> 00:11:43,730
the the OS image to this delivered by

00:11:36,300 --> 00:11:46,800
fedora and allows you to in have changes

00:11:43,730 --> 00:11:49,560
by our packages indeed in the base OS

00:11:46,800 --> 00:11:51,600
well it has some it has some limitations

00:11:49,560 --> 00:11:54,720
first it goes against the idea of

00:11:51,600 --> 00:11:57,870
immutable system so one one of the

00:11:54,720 --> 00:12:00,839
benefits of silver-blue is that we as a

00:11:57,870 --> 00:12:03,959
federal we can test and deliver the base

00:12:00,839 --> 00:12:06,750
of us to you and and we know that's

00:12:03,959 --> 00:12:10,200
gonna stay that way but once you start

00:12:06,750 --> 00:12:14,339
our changing it by our team over stay is

00:12:10,200 --> 00:12:17,040
not the case anymore and another another

00:12:14,339 --> 00:12:19,680
thing also is that it's it's it's a nice

00:12:17,040 --> 00:12:21,839
way it should definitely be something

00:12:19,680 --> 00:12:23,970
like the last resort when you really

00:12:21,839 --> 00:12:27,660
need some package that or something that

00:12:23,970 --> 00:12:30,450
currently be done through the paper

00:12:27,660 --> 00:12:33,209
grace then then you should do it like

00:12:30,450 --> 00:12:36,000
for example you need a tariff or a PI

00:12:33,209 --> 00:12:38,040
integral is only available as rpm and

00:12:36,000 --> 00:12:40,529
needs to be in the base of us then you

00:12:38,040 --> 00:12:45,050
install that one narrator but once you

00:12:40,529 --> 00:12:48,750
go into dozens of packages right over

00:12:45,050 --> 00:12:52,200
the other standard base of s then first

00:12:48,750 --> 00:12:54,660
like you can down into unexpected issues

00:12:52,200 --> 00:12:58,170
because that's not a set up be with the

00:12:54,660 --> 00:13:00,360
state and the river and second once

00:12:58,170 --> 00:13:02,440
you've for example we want to a base to

00:13:00,360 --> 00:13:06,459
another release of fedora

00:13:02,440 --> 00:13:09,160
then it it may not just go through the

00:13:06,459 --> 00:13:11,860
debase because of I don't dependency

00:13:09,160 --> 00:13:14,769
issues it's a term so this this is this

00:13:11,860 --> 00:13:17,769
is still there it's probably be a

00:13:14,769 --> 00:13:20,649
solution for things that we won't be

00:13:17,769 --> 00:13:25,569
able to solve differently but one of the

00:13:20,649 --> 00:13:29,860
goals we have is to minimize the cases

00:13:25,569 --> 00:13:33,699
or that would be in which it would be

00:13:29,860 --> 00:13:36,040
the only way for users so once we once

00:13:33,699 --> 00:13:39,040
we are good enough that you know package

00:13:36,040 --> 00:13:42,850
layering is definitely just last I

00:13:39,040 --> 00:13:44,790
solved for a few cases then that would

00:13:42,850 --> 00:13:51,160
be the goal

00:13:44,790 --> 00:13:53,319
so I mentioned flat packs is is anyone

00:13:51,160 --> 00:13:56,620
here at least a bit familiar a bit with

00:13:53,319 --> 00:14:00,509
flat pack as the installation format so

00:13:56,620 --> 00:14:06,129
it yeah so it's basic is it basically a

00:14:00,509 --> 00:14:09,550
format that works across distributions

00:14:06,129 --> 00:14:14,259
pretty minimal dependencies so you can

00:14:09,550 --> 00:14:16,630
you can create one installation could be

00:14:14,259 --> 00:14:21,279
even a file that can then be installed

00:14:16,630 --> 00:14:23,860
on different distributions no matter you

00:14:21,279 --> 00:14:26,680
know what both components they have

00:14:23,860 --> 00:14:29,980
etcetera bits basically all contained in

00:14:26,680 --> 00:14:31,930
a basically a container or sandbox so

00:14:29,980 --> 00:14:35,439
currently there is like the main source

00:14:31,930 --> 00:14:40,480
of flatbacks was flat hub which is

00:14:35,439 --> 00:14:43,480
pretty much an obscene project are quite

00:14:40,480 --> 00:14:47,019
associated with the norm but also KD is

00:14:43,480 --> 00:14:52,689
involved and another like companies like

00:14:47,019 --> 00:14:55,689
endless for example they it's on flat

00:14:52,689 --> 00:14:59,019
half flat specs are basically built from

00:14:55,689 --> 00:15:01,629
source mostly I mean if it's a

00:14:59,019 --> 00:15:05,500
proprietary application it's just it's

00:15:01,629 --> 00:15:07,809
like packages some some binary or some

00:15:05,500 --> 00:15:09,850
flatbacks work even with with packages

00:15:07,809 --> 00:15:12,970
that is basically if there is for

00:15:09,850 --> 00:15:14,110
example an official the package it's it

00:15:12,970 --> 00:15:17,200
just

00:15:14,110 --> 00:15:19,570
pretty much unpacks it and and installs

00:15:17,200 --> 00:15:22,440
it in innocent books so it's not always

00:15:19,570 --> 00:15:26,110
a source to flat-pack but they're mostly

00:15:22,440 --> 00:15:29,620
and we also started working on a federal

00:15:26,110 --> 00:15:32,170
repository of flat pegs and the

00:15:29,620 --> 00:15:36,250
fundamental difference is that they are

00:15:32,170 --> 00:15:39,339
built from from rpms and only only from

00:15:36,250 --> 00:15:41,860
rpms so basically what you get is

00:15:39,339 --> 00:15:45,310
something that is basically verified by

00:15:41,860 --> 00:15:48,040
by the federal check so you you are not

00:15:45,310 --> 00:15:52,540
going to end up with some arbitrary

00:15:48,040 --> 00:15:55,300
stuff that was added thereby meant an

00:15:52,540 --> 00:15:59,560
aphorism plainer in a flood help so it's

00:15:55,300 --> 00:16:02,050
it's it's something that we can ship by

00:15:59,560 --> 00:16:04,690
default in in silver blue because it

00:16:02,050 --> 00:16:06,940
meets also read all the real legal

00:16:04,690 --> 00:16:13,060
requirements the greater requirements

00:16:06,940 --> 00:16:19,230
that's a term and that's one of our next

00:16:13,060 --> 00:16:22,209
criteria basically that if you wanna go

00:16:19,230 --> 00:16:25,089
out safely with sarahbooth and we need

00:16:22,209 --> 00:16:27,310
to have a an offering of those

00:16:25,089 --> 00:16:29,380
applications bifida we are not to a lie

00:16:27,310 --> 00:16:31,779
completely and flat half on the other

00:16:29,380 --> 00:16:35,589
hand yeah so this is the this is

00:16:31,779 --> 00:16:37,810
currently the situation so Fred hop has

00:16:35,589 --> 00:16:39,880
been here for much longer I don't know

00:16:37,810 --> 00:16:43,180
say years maybe it has already

00:16:39,880 --> 00:16:46,950
accumulated 600 applications while

00:16:43,180 --> 00:16:50,860
Fedora I've been working for on that for

00:16:46,950 --> 00:16:52,990
last month's thing the the building

00:16:50,860 --> 00:16:55,870
itself was introduced at the last floor

00:16:52,990 --> 00:16:59,040
but it took a while until it was usable

00:16:55,870 --> 00:17:02,470
so we currently have 50 applications

00:16:59,040 --> 00:17:06,510
which is which is not bad and we are

00:17:02,470 --> 00:17:09,189
progressing as I mentioned also the

00:17:06,510 --> 00:17:13,390
Fedora ones are faceoff 12 so they

00:17:09,189 --> 00:17:19,000
basically are I have the same license

00:17:13,390 --> 00:17:20,520
and illegal requirements as RPM packages

00:17:19,000 --> 00:17:24,060
in federal since the

00:17:20,520 --> 00:17:27,170
from them yeah it's like how we can get

00:17:24,060 --> 00:17:31,610
software with different licenses

00:17:27,170 --> 00:17:35,580
open-source for piety that's it there

00:17:31,610 --> 00:17:37,830
yeah fed well the the flat pegs I'm I'm

00:17:35,580 --> 00:17:40,550
maintained by federal community well at

00:17:37,830 --> 00:17:43,230
flat hub which maintained by like either

00:17:40,550 --> 00:17:46,680
software vendors who are behind the

00:17:43,230 --> 00:17:49,560
applications themselves or community

00:17:46,680 --> 00:17:51,480
volunteers for example II the original

00:17:49,560 --> 00:17:54,380
author is not interested in maintaining

00:17:51,480 --> 00:17:58,280
for the flat-pack there are community

00:17:54,380 --> 00:18:02,070
volunteers who are doing it for users

00:17:58,280 --> 00:18:05,970
also uh big differences is that flood

00:18:02,070 --> 00:18:09,270
hub flat packs are using a West a so the

00:18:05,970 --> 00:18:13,950
same technology we used for the the base

00:18:09,270 --> 00:18:18,540
OS in silver blue wall fedora is more

00:18:13,950 --> 00:18:22,380
aligned with modules and containers in

00:18:18,540 --> 00:18:24,720
in federal so we use OCI

00:18:22,380 --> 00:18:28,080
so if you install the application it

00:18:24,720 --> 00:18:31,020
behaves the same way it's just really

00:18:28,080 --> 00:18:35,660
built and stored in the industry where

00:18:31,020 --> 00:18:39,330
apposite ori has OCI compatible archives

00:18:35,660 --> 00:18:44,030
instead of having an anova stay like

00:18:39,330 --> 00:18:46,500
positive yeah we can't we can't we have

00:18:44,030 --> 00:18:50,850
still some problems with federal fat

00:18:46,500 --> 00:18:54,380
packs so for people who want to build

00:18:50,850 --> 00:18:56,550
them out of Actium packages there is

00:18:54,380 --> 00:18:58,620
there is still a lot of manual work

00:18:56,550 --> 00:19:02,820
involved so there is currently no

00:18:58,620 --> 00:19:06,270
automation so for example let's say your

00:19:02,820 --> 00:19:09,420
your flat pack is built out of 10 RPM

00:19:06,270 --> 00:19:12,030
packages and in the ideal wellton and

00:19:09,420 --> 00:19:14,970
that's the the ultimate goal is that if

00:19:12,030 --> 00:19:19,860
there is any change in one of those 10

00:19:14,970 --> 00:19:23,100
packages then like a bit of that flat

00:19:19,860 --> 00:19:24,690
pack gets like tiger automatically and

00:19:23,100 --> 00:19:27,060
you don't even have to do anything about

00:19:24,690 --> 00:19:29,580
that it doesn't work that way currently

00:19:27,060 --> 00:19:33,750
you have to you have to tell you in the

00:19:29,580 --> 00:19:34,100
bill to yourself and also right now as

00:19:33,750 --> 00:19:36,320
the

00:19:34,100 --> 00:19:39,080
spec maintainer you don't even get a

00:19:36,320 --> 00:19:42,830
notification about the changes unless

00:19:39,080 --> 00:19:45,289
you set up your own filters in a message

00:19:42,830 --> 00:19:47,960
or something like that so it's currently

00:19:45,289 --> 00:19:50,419
it's it's it's not that easy to maintain

00:19:47,960 --> 00:19:53,390
the flat pack so this that's definitely

00:19:50,419 --> 00:19:56,530
an area to work on currently we also

00:19:53,390 --> 00:20:00,500
don't have any policy set for long term

00:19:56,530 --> 00:20:03,169
support and maintenance it to have a

00:20:00,500 --> 00:20:07,960
flat peg you basically have to ask for

00:20:03,169 --> 00:20:14,570
another repository where you host the

00:20:07,960 --> 00:20:17,030
diamo configuration files so we don't

00:20:14,570 --> 00:20:19,070
really have to be even like a package

00:20:17,030 --> 00:20:22,370
maintainer of that application so if

00:20:19,070 --> 00:20:24,830
there's for example Firefox in federal

00:20:22,370 --> 00:20:26,470
depository is you can package Firefox as

00:20:24,830 --> 00:20:29,240
a flat back and you don't have to be

00:20:26,470 --> 00:20:31,630
maintaining of those RPM packages and

00:20:29,240 --> 00:20:35,870
currently we don't really have set any

00:20:31,630 --> 00:20:38,059
policy or boundaries of responsibilities

00:20:35,870 --> 00:20:40,370
between package maintainer and flat-pack

00:20:38,059 --> 00:20:44,559
maintainer and a flood segmented

00:20:40,370 --> 00:20:46,850
maintainer ultimately rely on our p.m.

00:20:44,559 --> 00:20:51,140
maintained exhibits because sometimes

00:20:46,850 --> 00:20:54,230
you need you rely on spec files on that

00:20:51,140 --> 00:20:56,750
build some time it's I think it's also

00:20:54,230 --> 00:20:59,090
somewhere I mentioned that sometimes the

00:20:56,750 --> 00:21:05,270
spec files have to be adapted or fixed

00:20:59,090 --> 00:21:09,010
and the thing is that flat pack

00:21:05,270 --> 00:21:12,409
basically it's not doing any sort of

00:21:09,010 --> 00:21:15,080
overlaying because if you've got a ton

00:21:12,409 --> 00:21:19,070
time this the the application is using

00:21:15,080 --> 00:21:21,679
as an ink environment and then you've

00:21:19,070 --> 00:21:25,070
got the application and it's files on

00:21:21,679 --> 00:21:27,740
the top of that and when flat pack was

00:21:25,070 --> 00:21:30,470
created was there was no reliable

00:21:27,740 --> 00:21:33,980
overlaying technology that would that

00:21:30,470 --> 00:21:37,970
would be present across all

00:21:33,980 --> 00:21:40,120
distributions so basically what the

00:21:37,970 --> 00:21:43,280
founders decided was that basically

00:21:40,120 --> 00:21:45,790
downtime would be in slash user and the

00:21:43,280 --> 00:21:49,660
add content would be in slash app

00:21:45,790 --> 00:21:51,490
which helped back then but it caused a

00:21:49,660 --> 00:21:54,430
big problem for us now because basically

00:21:51,490 --> 00:21:56,620
now we can't use the RPM packages as

00:21:54,430 --> 00:22:00,010
they are already built but we have to

00:21:56,620 --> 00:22:05,710
rebuild them with this with this path

00:22:00,010 --> 00:22:08,650
and you wouldn't you wouldn't guess into

00:22:05,710 --> 00:22:11,860
how many issues we are problems in spec

00:22:08,650 --> 00:22:15,250
files beyond like hard-coded paths at

00:22:11,860 --> 00:22:18,820
cetera and it's something unless it gets

00:22:15,250 --> 00:22:21,550
fixed in spec files we are stuck on that

00:22:18,820 --> 00:22:23,860
so there a the flat-pack maintained as a

00:22:21,550 --> 00:22:26,710
lie on the quality of octane packages

00:22:23,860 --> 00:22:29,890
and I maintain us a lot so that

00:22:26,710 --> 00:22:32,530
definitely needs to be some some policy

00:22:29,890 --> 00:22:40,390
and boundaries of responsibilities on

00:22:32,530 --> 00:22:43,000
that done also we have a we have we are

00:22:40,390 --> 00:22:45,160
planning to set some goal you know how

00:22:43,000 --> 00:22:49,390
many flat pegs we'd like to have

00:22:45,160 --> 00:22:52,480
available as or federal Apogee federal

00:22:49,390 --> 00:22:56,710
applications as flat packs so currently

00:22:52,480 --> 00:23:00,250
there are over 1000 desktop applications

00:22:56,710 --> 00:23:06,040
or more precisely RPM packages with

00:23:00,250 --> 00:23:09,160
desktop files in I posit race and to go

00:23:06,040 --> 00:23:11,620
out asleep it's your observable we would

00:23:09,160 --> 00:23:14,260
like to have at least 30 percent of flat

00:23:11,620 --> 00:23:16,780
packs so like I don't say hundreds and

00:23:14,260 --> 00:23:19,500
we are currently at 50 so it's likely we

00:23:16,780 --> 00:23:22,480
have to multiply the kind of things or

00:23:19,500 --> 00:23:27,520
there are still what we currently don't

00:23:22,480 --> 00:23:30,940
support our Delta updates does the net

00:23:27,520 --> 00:23:34,960
cost by using the basically the OCI

00:23:30,940 --> 00:23:39,970
format that doesn't support it with if

00:23:34,960 --> 00:23:42,330
this would have sticked with Oeste and

00:23:39,970 --> 00:23:46,530
would be would be fine because Oeste

00:23:42,330 --> 00:23:49,150
supports Delta updates for a long time

00:23:46,530 --> 00:23:52,570
that's something we would have to

00:23:49,150 --> 00:23:55,390
definitely solve because currently like

00:23:52,570 --> 00:23:57,830
you've got federal run time which is

00:23:55,390 --> 00:24:01,580
three hundred five hundred mega

00:23:57,830 --> 00:24:04,249
and basically if there is a single

00:24:01,580 --> 00:24:08,029
component changed then the users would

00:24:04,249 --> 00:24:10,580
have to download 350 megabytes and you

00:24:08,029 --> 00:24:15,499
can imagine how how often components

00:24:10,580 --> 00:24:17,149
changes in the base image of off area so

00:24:15,499 --> 00:24:19,759
it would definitely have something like

00:24:17,149 --> 00:24:22,429
Delta updates for that you currently

00:24:19,759 --> 00:24:24,649
also we haven't solved the localization

00:24:22,429 --> 00:24:26,239
in flat-pack so you get it them in

00:24:24,649 --> 00:24:29,629
English only but that's definitely

00:24:26,239 --> 00:24:32,539
something we would have to solve also to

00:24:29,629 --> 00:24:35,210
meet the criteria what's also quite

00:24:32,539 --> 00:24:37,700
annoying for people who wanna build the

00:24:35,210 --> 00:24:41,179
flat packs is that if you wanna build it

00:24:37,700 --> 00:24:44,840
locally there there is no caching

00:24:41,179 --> 00:24:46,879
which is particularly annoying if you

00:24:44,840 --> 00:24:49,460
build a big application like for example

00:24:46,879 --> 00:24:52,759
Filipe is building non boxes it

00:24:49,460 --> 00:24:57,700
basically includes all the actualization

00:24:52,759 --> 00:24:59,679
stack and how long does it build like

00:24:57,700 --> 00:25:03,409
three hours

00:24:59,679 --> 00:25:05,539
imagine like you it builds for example a

00:25:03,409 --> 00:25:08,269
August and it fails because of some

00:25:05,539 --> 00:25:10,639
error you fix that error and you let it

00:25:08,269 --> 00:25:12,919
build again and if you wait another day

00:25:10,639 --> 00:25:16,940
others to actually find out if they if

00:25:12,919 --> 00:25:18,409
it fixed the issue or or not so this is

00:25:16,940 --> 00:25:24,859
this is something we have to work on as

00:25:18,409 --> 00:25:27,590
well so yeah it is something we don't

00:25:24,859 --> 00:25:30,739
have mentioned on the slide yeah one of

00:25:27,590 --> 00:25:33,919
the goals like right the close ones is

00:25:30,739 --> 00:25:37,369
to have flat pegs and an x panes thought

00:25:33,919 --> 00:25:40,669
on on silver-blue so currently the basic

00:25:37,369 --> 00:25:43,730
set of applications is part of the base

00:25:40,669 --> 00:25:48,590
image we like to have all applications

00:25:43,730 --> 00:25:53,059
besides likely system ones like system

00:25:48,590 --> 00:25:54,769
monitor etc as flat backs so 540's

00:25:53,059 --> 00:25:57,379
currently on the base image it should be

00:25:54,769 --> 00:26:00,499
moved to flat back

00:25:57,379 --> 00:26:03,049
so we are working on actually the

00:26:00,499 --> 00:26:06,139
Anaconda team is working on having them

00:26:03,049 --> 00:26:09,549
pay installed downtime and the beta base

00:26:06,139 --> 00:26:09,549
set of applications

00:26:09,950 --> 00:26:17,640
and now too much is gonna talk about two

00:26:13,230 --> 00:26:23,280
looks so fat packs are meant to be for

00:26:17,640 --> 00:26:26,220
the graphic applications and tool box is

00:26:23,280 --> 00:26:30,680
actually maybe that's saying something

00:26:26,220 --> 00:26:33,750
about two box what is it about it's like

00:26:30,680 --> 00:26:35,880
it's used to moving the development from

00:26:33,750 --> 00:26:38,310
the base operations system how it used

00:26:35,880 --> 00:26:41,220
to be away from the main operating

00:26:38,310 --> 00:26:47,270
system to actually into containers that

00:26:41,220 --> 00:26:52,980
way how it's done that we are actually

00:26:47,270 --> 00:26:55,350
mount passing basically a shell script

00:26:52,980 --> 00:26:57,020
around the port man and what we are

00:26:55,350 --> 00:27:00,690
doing in the chest script that we are

00:26:57,020 --> 00:27:03,090
passing various various variables into

00:27:00,690 --> 00:27:05,010
into the container and so on so even the

00:27:03,090 --> 00:27:08,280
graphical applications works inside

00:27:05,010 --> 00:27:11,160
inside the tool box actually so it's a

00:27:08,280 --> 00:27:14,270
easy way to get the traditional federal

00:27:11,160 --> 00:27:18,450
on the server blue so if you found the

00:27:14,270 --> 00:27:20,460
container and you have the regular

00:27:18,450 --> 00:27:23,970
federal over there so you have DNF and

00:27:20,460 --> 00:27:26,340
everything and you can play there play

00:27:23,970 --> 00:27:30,960
there and without like any consequences

00:27:26,340 --> 00:27:33,990
on on your mini operating system so we

00:27:30,960 --> 00:27:36,210
really want to get people use the

00:27:33,990 --> 00:27:38,580
toolbox and so on adopt the workflow to

00:27:36,210 --> 00:27:41,490
actually have be separate toolbox per

00:27:38,580 --> 00:27:44,610
projects let me say like Python

00:27:41,490 --> 00:27:46,890
development serum open this kind of

00:27:44,610 --> 00:27:50,940
stuff and also we want to have like

00:27:46,890 --> 00:27:54,000
special tool boxes for for software

00:27:50,940 --> 00:27:56,790
that's actually hard to configure setup

00:27:54,000 --> 00:27:58,830
and so on so I was working with team

00:27:56,790 --> 00:28:03,200
inside Red Hat to actually have the

00:27:58,830 --> 00:28:06,090
tensor flow container or 10-0 toolbox

00:28:03,200 --> 00:28:13,800
ready because like cancer for isn't not

00:28:06,090 --> 00:28:16,230
that easy to easy to configure so as I

00:28:13,800 --> 00:28:21,750
already said to boxes our wrap around

00:28:16,230 --> 00:28:25,320
the poolman project that's nice but

00:28:21,750 --> 00:28:27,539
during the last half a year we had some

00:28:25,320 --> 00:28:29,730
problems with poor men and it's

00:28:27,539 --> 00:28:33,659
regressions it was basically it was not

00:28:29,730 --> 00:28:37,740
a week when I stopped in it didn't broke

00:28:33,659 --> 00:28:39,210
so we are thinking about rewriting it in

00:28:37,740 --> 00:28:41,909
go

00:28:39,210 --> 00:28:44,700
why go because poor man is returning go

00:28:41,909 --> 00:28:47,100
and we could like easily incorporate the

00:28:44,700 --> 00:28:51,539
unit tests into poor man that will

00:28:47,100 --> 00:28:58,110
actually test our use cases also we are

00:28:51,539 --> 00:29:01,019
thinking as thinking about some like or

00:28:58,110 --> 00:29:04,080
integration to the USS when asked about

00:29:01,019 --> 00:29:06,509
the some application that could like at

00:29:04,080 --> 00:29:08,879
least like two boxes and terminals and

00:29:06,509 --> 00:29:10,169
so on so we - we want to have some

00:29:08,879 --> 00:29:12,870
application that was ok

00:29:10,169 --> 00:29:16,679
showcase what's available and what

00:29:12,870 --> 00:29:20,250
actually users can consume and also we

00:29:16,679 --> 00:29:23,610
are we were like try to modify the

00:29:20,250 --> 00:29:25,700
non-terminal regime has already done the

00:29:23,610 --> 00:29:29,399
preparations for that to actually like

00:29:25,700 --> 00:29:31,350
distinguish in Nome terminal in what two

00:29:29,399 --> 00:29:33,779
books you are and so on so probably

00:29:31,350 --> 00:29:39,149
write some differential by cars and so

00:29:33,779 --> 00:29:41,700
on so it's like is easily so it won't

00:29:39,149 --> 00:29:44,879
happen that you will by accident write

00:29:41,700 --> 00:29:48,539
some command in you know different

00:29:44,879 --> 00:29:49,919
toolbox or or in the host when you need

00:29:48,539 --> 00:29:56,519
to run it in a completely different

00:29:49,919 --> 00:30:02,009
price so another part of this is that we

00:29:56,519 --> 00:30:07,409
are able to make it easy to actually

00:30:02,009 --> 00:30:09,600
work with the if this system operations

00:30:07,409 --> 00:30:13,919
like to make it easier for the regular

00:30:09,600 --> 00:30:16,409
user to update and so on the the main

00:30:13,919 --> 00:30:19,710
operating system so we want to like

00:30:16,409 --> 00:30:23,279
improve Nome so prayer currently it only

00:30:19,710 --> 00:30:26,909
supports the the update which basically

00:30:23,279 --> 00:30:30,840
means rpms the upgrade we want to

00:30:26,909 --> 00:30:32,580
actually have the system upgrade there

00:30:30,840 --> 00:30:33,990
as well that means actually like uribe

00:30:32,580 --> 00:30:38,580
rebasing to

00:30:33,990 --> 00:30:41,550
another tree or another branch also we

00:30:38,580 --> 00:30:44,370
want to have like support for aerobics

00:30:41,550 --> 00:30:45,750
so people if they were found there is

00:30:44,370 --> 00:30:47,510
something wrong with the currently

00:30:45,750 --> 00:30:50,720
deployed image they could like easily

00:30:47,510 --> 00:30:54,120
roll back to the previous one that was

00:30:50,720 --> 00:30:55,380
working flawlessly and also the

00:30:54,120 --> 00:31:02,150
persistent roll backs

00:30:55,380 --> 00:31:07,260
I mean generally this is all possible

00:31:02,150 --> 00:31:09,960
through rpm Oeste in in command line or

00:31:07,260 --> 00:31:13,470
we like to improve the user experience

00:31:09,960 --> 00:31:16,290
by supporting it in graphical interface

00:31:13,470 --> 00:31:20,940
in gnome software the persistent

00:31:16,290 --> 00:31:23,220
aerobics it's basically if you if you

00:31:20,940 --> 00:31:26,910
vary based for example from Pharaoh a 29

00:31:23,220 --> 00:31:29,400
to pharaoh a 30 you find out there is

00:31:26,910 --> 00:31:31,230
something not working for you silver

00:31:29,400 --> 00:31:33,750
blue easily allows you to go back to

00:31:31,230 --> 00:31:36,870
federal 29 you just able to choose

00:31:33,750 --> 00:31:39,690
interrupted the second ante which is the

00:31:36,870 --> 00:31:42,780
the old image the thing is that you if

00:31:39,690 --> 00:31:47,600
you boot to read the old image our PMO

00:31:42,780 --> 00:31:53,910
or Oeste is still pointed to February 30

00:31:47,600 --> 00:31:57,300
day II or branch so basically you wanna

00:31:53,910 --> 00:31:59,309
switch permanently to filler at 29 and

00:31:57,300 --> 00:32:01,410
wait for example a month or two until

00:31:59,309 --> 00:32:06,330
your issue is fixed then you have to

00:32:01,410 --> 00:32:09,510
change that danger as well and currently

00:32:06,330 --> 00:32:16,550
we can only do it through command line

00:32:09,510 --> 00:32:19,860
or command your rpm overstaying also be

00:32:16,550 --> 00:32:23,670
the last flat pack your bags that's

00:32:19,860 --> 00:32:28,650
something you can do it also for for

00:32:23,670 --> 00:32:30,750
applications so not only the OS if

00:32:28,650 --> 00:32:33,210
something basic diversity always you can

00:32:30,750 --> 00:32:37,320
go back but we like to support that also

00:32:33,210 --> 00:32:39,690
or make it expose it to users also for

00:32:37,320 --> 00:32:42,440
applications because flat bar allows it

00:32:39,690 --> 00:32:44,029
for applications as well so for example

00:32:42,440 --> 00:32:47,880
updates

00:32:44,029 --> 00:32:50,760
the libreoffice 6.3 was at least today

00:32:47,880 --> 00:32:52,580
so you update to that you find out that

00:32:50,760 --> 00:32:55,320
something you know there was some

00:32:52,580 --> 00:32:57,149
aggregation in calc and some of your

00:32:55,320 --> 00:33:00,000
spreadsheets just doesn't work with that

00:32:57,149 --> 00:33:02,279
you can if we implement this you can

00:33:00,000 --> 00:33:04,559
then easily go to ignore software and

00:33:02,279 --> 00:33:06,870
you click a button next time to a

00:33:04,559 --> 00:33:09,179
previous version and it gives you the

00:33:06,870 --> 00:33:13,549
the previous snapshot of the application

00:33:09,179 --> 00:33:13,549
so that would be really good as well

00:33:15,409 --> 00:33:22,320
okay another thing we are thinking about

00:33:19,620 --> 00:33:24,720
like changing a little bit is that are

00:33:22,320 --> 00:33:26,880
we are bringing too often and as you can

00:33:24,720 --> 00:33:31,019
see that based on the feedback that we

00:33:26,880 --> 00:33:34,490
are getting yes they are like may nearly

00:33:31,019 --> 00:33:37,470
every day there's an update go go in

00:33:34,490 --> 00:33:39,990
people are like constantly like getting

00:33:37,470 --> 00:33:44,429
notified by no software or anything that

00:33:39,990 --> 00:33:47,010
they should update and so on so we want

00:33:44,429 --> 00:33:49,649
to actually like change the stuff there

00:33:47,010 --> 00:33:53,100
to actually slow down the a basic update

00:33:49,649 --> 00:33:55,380
cycle to just two or three weeks or even

00:33:53,100 --> 00:33:59,909
maybe a little bit longer but that's

00:33:55,380 --> 00:34:02,100
like to be decided that needs to like we

00:33:59,909 --> 00:34:05,669
have to cooperate with fara QE about

00:34:02,100 --> 00:34:09,270
their opinion on that because what we

00:34:05,669 --> 00:34:11,300
want to do in that time it's like we

00:34:09,270 --> 00:34:16,070
really want to like properly test the

00:34:11,300 --> 00:34:18,720
update as a unit so it's not like like

00:34:16,070 --> 00:34:20,490
separate updates that can influence each

00:34:18,720 --> 00:34:23,369
other but we want to see like the bigger

00:34:20,490 --> 00:34:28,409
picture with loops when you actually

00:34:23,369 --> 00:34:31,379
test the a bit as a whole it could be

00:34:28,409 --> 00:34:34,859
like done by manually by the error

00:34:31,379 --> 00:34:37,530
adopters and so on or out automatically

00:34:34,859 --> 00:34:41,720
but that's to be decided by the fair

00:34:37,530 --> 00:34:45,750
rocky way so people like should like

00:34:41,720 --> 00:34:48,720
easily obtain for for the regular

00:34:45,750 --> 00:34:52,000
cadence because that they will actually

00:34:48,720 --> 00:34:58,780
update daily

00:34:52,000 --> 00:35:00,940
also what about the security updates so

00:34:58,780 --> 00:35:04,900
definitely the critical vulnerabilities

00:35:00,940 --> 00:35:08,560
will be pushed because this armors more

00:35:04,900 --> 00:35:11,349
important and maybe we will see if I do

00:35:08,560 --> 00:35:13,750
the same should be done for the import

00:35:11,349 --> 00:35:15,970
important like you know Bertie's but

00:35:13,750 --> 00:35:31,869
that's needs to be like cooperated with

00:35:15,970 --> 00:35:36,099
the security team it's basically as I

00:35:31,869 --> 00:35:40,480
mentioned at the beginning some cases

00:35:36,099 --> 00:35:42,849
where it's not only you can delay solve

00:35:40,480 --> 00:35:45,030
them through containers because you need

00:35:42,849 --> 00:35:48,369
to work with the with the base image and

00:35:45,030 --> 00:35:52,619
those are probably the cases where they

00:35:48,369 --> 00:35:56,320
will have to with the RPM layering and

00:35:52,619 --> 00:35:58,599
one of the the cases is drivers for

00:35:56,320 --> 00:36:02,830
example it could be even a third-party

00:35:58,599 --> 00:36:05,820
software that is not available as flood

00:36:02,830 --> 00:36:10,560
packs so currently we use Artyom

00:36:05,820 --> 00:36:13,960
layering for Google Chrome for example

00:36:10,560 --> 00:36:17,170
with with the drivers it's also I mean

00:36:13,960 --> 00:36:21,070
we one example of optically turbulence

00:36:17,170 --> 00:36:24,030
we've run into is that you know you know

00:36:21,070 --> 00:36:28,690
HP leaked right that's the the tool for

00:36:24,030 --> 00:36:32,770
HP painters and so you can you can set

00:36:28,690 --> 00:36:34,690
up the HP painters so that and what some

00:36:32,770 --> 00:36:36,970
of the painters iacquire like a

00:36:34,690 --> 00:36:39,160
proprietary plugins that have to be

00:36:36,970 --> 00:36:42,940
there has to be downloaded from at the

00:36:39,160 --> 00:36:46,720
HP servers and this plug-in is installed

00:36:42,940 --> 00:36:50,710
into a path that is state only in silver

00:36:46,720 --> 00:36:53,890
blue green in slash user something so we

00:36:50,710 --> 00:36:55,869
were like hey HP lip is open-source we

00:36:53,890 --> 00:36:59,200
can just patch it so that it allows it

00:36:55,869 --> 00:37:01,570
into or something but the case is there

00:36:59,200 --> 00:37:05,590
when we when we actually investigated

00:37:01,570 --> 00:37:09,820
that we found out that it doesn't down

00:37:05,590 --> 00:37:13,120
the the plug-in directly it downloads a

00:37:09,820 --> 00:37:16,090
binary from HP servers and that binary

00:37:13,120 --> 00:37:20,110
does the download so you cannot say Li

00:37:16,090 --> 00:37:22,690
you cannot early patch it so looks like

00:37:20,110 --> 00:37:25,990
that it's a it's a case until we of

00:37:22,690 --> 00:37:28,240
course contacted the HP developers if

00:37:25,990 --> 00:37:29,740
you like they could fix it for us but

00:37:28,240 --> 00:37:32,860
it's definitely something we just

00:37:29,740 --> 00:37:35,740
currently go by on that so that's that's

00:37:32,860 --> 00:37:40,600
a case where we will probably use rpm

00:37:35,740 --> 00:37:45,630
layering there also the debugging

00:37:40,600 --> 00:37:51,330
experience these are basically from my

00:37:45,630 --> 00:37:54,610
experience so imagine a situation that

00:37:51,330 --> 00:37:58,510
something no you don't even have to

00:37:54,610 --> 00:38:00,850
imagine it's like some application or

00:37:58,510 --> 00:38:05,490
anything crashes and it's the part of

00:38:00,850 --> 00:38:09,750
the OS so you can get like the useful

00:38:05,490 --> 00:38:13,870
back trace or anything like that so if

00:38:09,750 --> 00:38:17,260
mr. rue is very hard because you what

00:38:13,870 --> 00:38:20,020
you could do is like to get with rpm to

00:38:17,260 --> 00:38:22,530
get in like diversion of the install

00:38:20,020 --> 00:38:25,000
package and to go to the Koji and

00:38:22,530 --> 00:38:27,100
download the debug info packages and so

00:38:25,000 --> 00:38:30,790
on it's like that's a horrible

00:38:27,100 --> 00:38:34,450
experience so what actually OST allows

00:38:30,790 --> 00:38:39,640
you to do is like to unlock the system

00:38:34,450 --> 00:38:41,890
and have I made a regu regular writable

00:38:39,640 --> 00:38:45,480
system from there and I'm personally

00:38:41,890 --> 00:38:48,040
using some scripts that actually are

00:38:45,480 --> 00:38:50,140
unique and stunning the micro DNF and

00:38:48,040 --> 00:38:53,020
with micro DNF I'm installing regular

00:38:50,140 --> 00:38:55,780
DNA to actually have the debug info

00:38:53,020 --> 00:38:58,270
plug-in and at that point on it's easy

00:38:55,780 --> 00:39:00,790
to like get obtain the debugging

00:38:58,270 --> 00:39:02,830
packages and then provide the back

00:39:00,790 --> 00:39:05,920
tracks to

00:39:02,830 --> 00:39:09,790
- to the developer or anything like that

00:39:05,920 --> 00:39:12,910
but Ray the process can be in that way

00:39:09,790 --> 00:39:14,880
to be like simplified and so on the

00:39:12,910 --> 00:39:18,430
problem is that we could maybe reuse

00:39:14,880 --> 00:39:20,890
abrt for that but it doesn't play well

00:39:18,430 --> 00:39:24,940
with which server we had and we we have

00:39:20,890 --> 00:39:28,060
to like talk with the ABR abrt team to

00:39:24,940 --> 00:39:31,270
actually improve the situation and the

00:39:28,060 --> 00:39:35,290
last point over there is like dual boot

00:39:31,270 --> 00:39:38,770
use experience so what you could easily

00:39:35,290 --> 00:39:42,220
try the silver-blue on you're not easily

00:39:38,770 --> 00:39:46,750
you can try server blue on your regular

00:39:42,220 --> 00:39:50,700
workstation by actually in deploying the

00:39:46,750 --> 00:39:53,950
OS 3 image into your root partition into

00:39:50,700 --> 00:39:57,580
OSD directory and then just operating

00:39:53,950 --> 00:40:00,810
grab and just booting from this

00:39:57,580 --> 00:40:07,500
directory the problem is that the I

00:40:00,810 --> 00:40:10,300
think if you are using grab not efi that

00:40:07,500 --> 00:40:13,630
you have to manually update the

00:40:10,300 --> 00:40:16,420
configuration after ike any update of

00:40:13,630 --> 00:40:19,240
the camera i think so

00:40:16,420 --> 00:40:22,000
there are some big problems and we

00:40:19,240 --> 00:40:27,190
should really make this like to work

00:40:22,000 --> 00:40:29,800
flawlessly because if if if we fix exist

00:40:27,190 --> 00:40:34,470
we could get like a lot of like adopters

00:40:29,800 --> 00:40:37,600
of Saru and new users it's actually our

00:40:34,470 --> 00:40:39,700
team there are batteries is supposed to

00:40:37,600 --> 00:40:48,970
work on that and hopefully we should get

00:40:39,700 --> 00:40:53,290
something real soon documentation issue

00:40:48,970 --> 00:40:57,550
tracker we we are planning that

00:40:53,290 --> 00:40:59,890
silver-blue project in in teams the dot

00:40:57,550 --> 00:41:02,620
Fedora project at work so you can if you

00:40:59,890 --> 00:41:04,900
wanna see what we are working on and the

00:41:02,620 --> 00:41:07,540
progress it's that I can you can take a

00:41:04,900 --> 00:41:12,370
look there even if for example we wanna

00:41:07,540 --> 00:41:15,470
wanna help and contribute but actually

00:41:12,370 --> 00:41:18,740
once as we are in

00:41:15,470 --> 00:41:21,410
on the roadmap I suspect like the the

00:41:18,740 --> 00:41:23,210
tiger instance over there will the ante

00:41:21,410 --> 00:41:27,460
so there were actual change in zero to

00:41:23,210 --> 00:41:43,580
actually align along with the video Mac

00:41:27,460 --> 00:41:52,630
ok so questions questions so how many

00:41:43,580 --> 00:41:58,550
people try to do like it

00:41:52,630 --> 00:42:03,560
and from those do you think that fixing

00:41:58,550 --> 00:42:12,340
the like the dual boot experience could

00:42:03,560 --> 00:42:12,340
I convince you to try it no one ok

00:42:41,299 --> 00:43:02,489
that's that's that's not a plug into

00:42:44,069 --> 00:43:05,130
this package in high politics I mean

00:43:02,489 --> 00:43:07,769
with vs codes for example one of the

00:43:05,130 --> 00:43:11,160
issues we also have to fix this

00:43:07,769 --> 00:43:15,569
basically that vs kosher an early work

00:43:11,160 --> 00:43:17,999
with the components that are either in

00:43:15,569 --> 00:43:20,640
the the flight program time or in the

00:43:17,999 --> 00:43:23,599
host but we'd like to find a way like

00:43:20,640 --> 00:43:27,269
for example you can hook up your

00:43:23,599 --> 00:43:32,239
development Portman contain I for

00:43:27,269 --> 00:43:32,239
example with that application in

00:44:01,580 --> 00:44:05,780
and get GUI tools that haven't been put

00:44:03,590 --> 00:44:07,910
the flat back yet so the big one I ran

00:44:05,780 --> 00:44:11,630
into and this was a while ago but it was

00:44:07,910 --> 00:44:14,800
melt you know when we get Mel couldn't

00:44:11,630 --> 00:44:14,800
bear I knew we'd get it without

00:44:16,530 --> 00:44:23,260
so I think some combination of toolbox

00:44:20,859 --> 00:44:41,619
and like being able to watch buoys from

00:44:23,260 --> 00:44:44,170
toolbox like humans but you have to have

00:44:41,619 --> 00:44:46,240
to exactly like execute the commanding

00:44:44,170 --> 00:44:48,130
in the terminals I mean I wonder if

00:44:46,240 --> 00:45:21,460
there would be any way to export this

00:44:48,130 --> 00:45:23,740
file hey this doesn't work here this is

00:45:21,460 --> 00:45:25,660
what you should do it's like I think

00:45:23,740 --> 00:45:27,130
early adopter phase right there's a

00:45:25,660 --> 00:45:29,680
bunch of stuff we can do that kind of

00:45:27,130 --> 00:45:31,359
says hey you're doing this wrong but

00:45:29,680 --> 00:45:33,579
until we can do it right you know this

00:45:31,359 --> 00:45:36,250
is the workaround easy this is how you

00:45:33,579 --> 00:45:38,790
approach solving this you know that very

00:45:36,250 --> 00:45:38,790
injury

00:46:16,420 --> 00:46:19,659
[Music]

00:46:35,890 --> 00:46:43,690
so I placed the graphical version that

00:46:40,940 --> 00:46:43,690
called shadow

00:46:51,740 --> 00:46:56,750
however I can't there's no automation

00:46:54,530 --> 00:47:03,670
there at all to actually distribute the

00:46:56,750 --> 00:47:03,670
version of the bill even though wait

00:47:07,510 --> 00:47:13,299
you know that's what that split up

00:47:25,580 --> 00:47:34,730
I mean I don't think we wanna support

00:47:32,930 --> 00:47:37,550
the use case that you installed

00:47:34,730 --> 00:47:41,540
silver-blue with genome and then you can

00:47:37,550 --> 00:47:44,360
besides that you install eggs f ck d etc

00:47:41,540 --> 00:47:47,930
I guess this is something that indeed

00:47:44,360 --> 00:47:52,430
the whole I mean the immutable system as

00:47:47,930 --> 00:47:55,700
a concept doesn't really work when you

00:47:52,430 --> 00:47:58,700
wanna do huge changes to device OS it's

00:47:55,700 --> 00:48:01,040
only for users who wanna adjust to use

00:47:58,700 --> 00:48:04,220
the bio base of us it works for them and

00:48:01,040 --> 00:48:07,400
they do everything on the top of it once

00:48:04,220 --> 00:48:10,970
you wanna build your own kernel install

00:48:07,400 --> 00:48:14,030
of different desktop environments and

00:48:10,970 --> 00:48:16,760
have XFC on Monday and KD on Tuesday

00:48:14,030 --> 00:48:19,010
etcetera then the traditional federer

00:48:16,760 --> 00:48:20,750
will serve you much better but it

00:48:19,010 --> 00:48:26,960
doesn't mean that there can't be a

00:48:20,750 --> 00:48:35,000
survival without like with other desktop

00:48:26,960 --> 00:48:39,410
environment I think there is simply like

00:48:35,000 --> 00:48:41,300
KDE plasma spin and XFC spin no one no

00:48:39,410 --> 00:48:44,900
one really holds the the community

00:48:41,300 --> 00:48:49,340
members from building them but yeah it

00:48:44,900 --> 00:48:51,160
would be Katy spin just the scenario

00:48:49,340 --> 00:48:54,470
where you have you know we install

00:48:51,160 --> 00:48:57,890
various or multiple desktop environments

00:48:54,470 --> 00:49:01,880
side by side by we can theoretically do

00:48:57,890 --> 00:49:05,410
it through the over layering but that's

00:49:01,880 --> 00:49:05,410
not good

00:49:27,650 --> 00:49:35,869
you need direct access to it really

00:49:33,860 --> 00:49:40,150
makes sense to turn it in the same

00:49:35,869 --> 00:49:40,150
namespace as daily basis

00:50:05,430 --> 00:50:26,700
I mean it just doesn't make sense to me

00:50:23,880 --> 00:50:29,190
to anything in a container you know then

00:50:26,700 --> 00:50:33,180
you run into lots of problems so it you

00:50:29,190 --> 00:50:35,790
know the the base desktop components I

00:50:33,180 --> 00:50:38,400
actually contain in a container and they

00:50:35,790 --> 00:50:40,410
actually have to interact with other

00:50:38,400 --> 00:50:43,319
components in the base of us frequently

00:50:40,410 --> 00:50:46,109
is you see into how many issues we are

00:50:43,319 --> 00:50:49,260
with sandboxing desktop applications

00:50:46,109 --> 00:50:52,130
like sandboxing desktop based the scope

00:50:49,260 --> 00:51:01,829
components that would be like hell of

00:50:52,130 --> 00:51:04,349
fixing actually do the research and

00:51:01,829 --> 00:51:06,450
someone fix the like do the hard work

00:51:04,349 --> 00:51:08,369
and so on and at that point community

00:51:06,450 --> 00:51:10,920
could just take our work and replace

00:51:08,369 --> 00:51:14,130
noumenon packages with anything what

00:51:10,920 --> 00:51:16,319
they want but i expect that they will

00:51:14,130 --> 00:51:19,170
need to adapt like cady's stuff and so

00:51:16,319 --> 00:51:21,030
on probably no no but I expect there

00:51:19,170 --> 00:51:27,930
will be some changing that needs to be

00:51:21,030 --> 00:51:36,109
done to the question probably our last

00:51:27,930 --> 00:51:36,109
one since we are not think so

00:51:37,100 --> 00:51:40,449

YouTube URL: https://www.youtube.com/watch?v=zdDT33wtSNo


