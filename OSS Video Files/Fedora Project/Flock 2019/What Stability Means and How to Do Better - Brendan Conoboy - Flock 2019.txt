Title: What Stability Means and How to Do Better - Brendan Conoboy - Flock 2019
Publication date: 2019-08-28
Playlist: Flock 2019
Description: 
	Sometimes people say Fedora is too unstable, but what does that actually mean?  This talk covers the 4 most common meanings and what the community can do to improve stability in Fedora and Open Source generally.

--
Recordings of talks at Flock are a community effort. Unfortunately not everything works perfectly every time. If you're interested in helping us improve, let us know.
Captions: 
	00:00:01,770 --> 00:00:06,479
last question before we get started

00:00:03,750 --> 00:00:08,719
which will then have more questions can

00:00:06,479 --> 00:00:12,870
you hear my amplified voice right now

00:00:08,719 --> 00:00:14,339
okay cool so welcome to the what

00:00:12,870 --> 00:00:16,620
stability means and how to do better a

00:00:14,339 --> 00:00:18,510
talk so before we get started I just

00:00:16,620 --> 00:00:21,270
want to do a quick poll how many people

00:00:18,510 --> 00:00:26,450
in here are package maintainer is in

00:00:21,270 --> 00:00:32,309
fedora okay and how many people in here

00:00:26,450 --> 00:00:34,589
work upstream on those packages okay so

00:00:32,309 --> 00:00:37,820
some but not all all right cool

00:00:34,589 --> 00:00:41,070
so I think we've got the right the right

00:00:37,820 --> 00:00:43,289
level for today some of you were gonna

00:00:41,070 --> 00:00:44,940
be very bored by this but hopefully you

00:00:43,289 --> 00:00:47,129
can take it and make it better so just

00:00:44,940 --> 00:00:49,140
first thing on the list

00:00:47,129 --> 00:00:51,539
this is Corrigan he wants to start a

00:00:49,140 --> 00:00:55,109
revolution but he didn't print enough

00:00:51,539 --> 00:00:56,730
flyers and I too want to start a

00:00:55,109 --> 00:00:59,879
revolution but I did not prepare enough

00:00:56,730 --> 00:01:01,800
slides and what I want to say is that

00:00:59,879 --> 00:01:03,629
stability is an open source community

00:01:01,800 --> 00:01:04,140
problem in general this isn't just

00:01:03,629 --> 00:01:07,920
fedora

00:01:04,140 --> 00:01:09,810
but inside fedora we do have some things

00:01:07,920 --> 00:01:11,580
that we have created that help us be

00:01:09,810 --> 00:01:13,760
more stable than your average upstream

00:01:11,580 --> 00:01:15,720
and we should take advantage of them so

00:01:13,760 --> 00:01:19,460
with that let's talk about what

00:01:15,720 --> 00:01:21,360
stability is because stability

00:01:19,460 --> 00:01:24,480
fundamentally comes down to your frame

00:01:21,360 --> 00:01:26,850
of reference like the gyroscope when

00:01:24,480 --> 00:01:29,790
it's spinning can glide along a string

00:01:26,850 --> 00:01:31,500
and not fall over but I wouldn't call it

00:01:29,790 --> 00:01:36,930
stable because I know it's going to slow

00:01:31,500 --> 00:01:38,520
down and fall down so stability in a

00:01:36,930 --> 00:01:41,310
Linux distribution fundamentally is

00:01:38,520 --> 00:01:45,600
changes for the better because you know

00:01:41,310 --> 00:01:47,550
any system can can be resilient it can

00:01:45,600 --> 00:01:50,310
run fine it will crash it'll corrupt

00:01:47,550 --> 00:01:52,200
data but the thing that is different the

00:01:50,310 --> 00:01:54,300
thing that is under attended are the

00:01:52,200 --> 00:01:56,450
other forms of stability so we're going

00:01:54,300 --> 00:02:00,240
to cover four of them there is of course

00:01:56,450 --> 00:02:02,400
crashes and corruption but what really

00:02:00,240 --> 00:02:04,950
makes things unstable is what we do as

00:02:02,400 --> 00:02:07,740
developers to the software when we push

00:02:04,950 --> 00:02:09,390
out updates when we make changes so that

00:02:07,740 --> 00:02:12,180
comes down to kind of three major

00:02:09,390 --> 00:02:14,860
categories the first one is developer is

00:02:12,180 --> 00:02:17,170
be stability if you maintain a

00:02:14,860 --> 00:02:18,790
library like a shared library a static

00:02:17,170 --> 00:02:20,770
library anything that other people are

00:02:18,790 --> 00:02:24,790
relying on and you make an update to it

00:02:20,770 --> 00:02:26,770
if that update is incompatible then

00:02:24,790 --> 00:02:29,530
applications are already built and can

00:02:26,770 --> 00:02:31,630
crash and if you want to rebuild them

00:02:29,530 --> 00:02:33,760
sometimes they don't rebuild there's

00:02:31,630 --> 00:02:36,790
also kind of provision and management

00:02:33,760 --> 00:02:39,550
stability where say you're making a

00:02:36,790 --> 00:02:40,990
Linux distribution and the you introduce

00:02:39,550 --> 00:02:44,820
changes into that distribution that

00:02:40,990 --> 00:02:47,890
cause it to no longer say install or

00:02:44,820 --> 00:02:49,300
update for a change and then finally

00:02:47,890 --> 00:02:51,940
there's operational stability and this

00:02:49,300 --> 00:02:54,220
is this is like the big one that we all

00:02:51,940 --> 00:02:58,500
get wrong all the time because we choose

00:02:54,220 --> 00:03:03,340
perfection of execution over like

00:02:58,500 --> 00:03:05,860
continuity of expectation so let's just

00:03:03,340 --> 00:03:08,950
cover these a little more detail one by

00:03:05,860 --> 00:03:13,050
one so crashes in corruption what's the

00:03:08,950 --> 00:03:17,200
problem it's 20 these are still a thing

00:03:13,050 --> 00:03:19,780
why is that there's a lot of reasons for

00:03:17,200 --> 00:03:22,180
it and the fact it's the solutions are

00:03:19,780 --> 00:03:24,400
really well known and and all you have

00:03:22,180 --> 00:03:26,590
to do is is do them and it'll be fine

00:03:24,400 --> 00:03:28,180
you can stop this just by like applying

00:03:26,590 --> 00:03:31,330
the best practices that are well

00:03:28,180 --> 00:03:32,650
documented throughout the industry my

00:03:31,330 --> 00:03:34,120
favorite just as a starting point though

00:03:32,650 --> 00:03:38,320
is turning on warnings and then fixing

00:03:34,120 --> 00:03:41,530
them that goes a really long way but for

00:03:38,320 --> 00:03:44,709
for like deep details on how to solve

00:03:41,530 --> 00:03:45,910
all of your your package crashes your

00:03:44,709 --> 00:03:48,570
data corrupters and whatnot

00:03:45,910 --> 00:03:50,709
there are a thousand talks there are

00:03:48,570 --> 00:03:52,810
10,000 tools there are all sorts of

00:03:50,709 --> 00:03:55,989
things and all you have to do is use

00:03:52,810 --> 00:03:57,790
them but that's not really the thrust of

00:03:55,989 --> 00:03:59,500
this because everybody knows yeah we

00:03:57,790 --> 00:04:01,090
shouldn't crash and if you get a bug

00:03:59,500 --> 00:04:02,590
report that of the crashes it's the kind

00:04:01,090 --> 00:04:04,959
of thing you pay attention to and you're

00:04:02,590 --> 00:04:07,120
like yeah that's definitely wrong that I

00:04:04,959 --> 00:04:09,430
did not mean for that program to crash I

00:04:07,120 --> 00:04:11,260
didn't mean to lose your data I'm gonna

00:04:09,430 --> 00:04:12,430
try fixing that we don't actually have a

00:04:11,260 --> 00:04:14,560
problem with this other than the fact

00:04:12,430 --> 00:04:17,859
that it still happens but when it does

00:04:14,560 --> 00:04:20,530
happen then we pay attention so where do

00:04:17,859 --> 00:04:23,080
we not pay attention it's it's in these

00:04:20,530 --> 00:04:27,370
other cases it's like developer is fee

00:04:23,080 --> 00:04:29,050
stability if I do an update on my system

00:04:27,370 --> 00:04:30,970
developer I write an application I want

00:04:29,050 --> 00:04:33,580
to ship that application I generally

00:04:30,970 --> 00:04:36,729
expect that that application is going to

00:04:33,580 --> 00:04:39,070
continue to run on the systems that

00:04:36,729 --> 00:04:40,419
people deploy it on even if they do a

00:04:39,070 --> 00:04:42,160
software update if they update their

00:04:40,419 --> 00:04:43,419
operating system even if I'm not part of

00:04:42,160 --> 00:04:47,520
their operating system even if I'm not

00:04:43,419 --> 00:04:50,260
part of the infrastructure that does

00:04:47,520 --> 00:04:51,880
that does the update I expect before the

00:04:50,260 --> 00:04:54,729
update and after the update for my

00:04:51,880 --> 00:04:56,590
application to continue running and what

00:04:54,729 --> 00:04:58,540
actually happens sometimes library

00:04:56,590 --> 00:05:01,960
updates break binaries it until they're

00:04:58,540 --> 00:05:03,820
recompiled in other cases updates to

00:05:01,960 --> 00:05:05,710
that same library I mean that you can't

00:05:03,820 --> 00:05:08,680
recompile them because you broke the API

00:05:05,710 --> 00:05:10,750
so this is basically API API breakage

00:05:08,680 --> 00:05:13,780
and it is it's one of the things we do

00:05:10,750 --> 00:05:16,419
in rel to that that actually causes

00:05:13,780 --> 00:05:17,770
people to use rel even though it doesn't

00:05:16,419 --> 00:05:20,500
have all of the awesome features of

00:05:17,770 --> 00:05:22,539
fedora just because the value of this

00:05:20,500 --> 00:05:24,039
sort of stability is greater than the

00:05:22,539 --> 00:05:26,320
value of the novelty that Fedora

00:05:24,039 --> 00:05:27,940
provides so there are things that you

00:05:26,320 --> 00:05:30,789
can do there are solutions to this that

00:05:27,940 --> 00:05:32,530
anybody who is a developer or anybody

00:05:30,789 --> 00:05:34,630
who is a maintainer can manage the first

00:05:32,530 --> 00:05:36,010
is if your upstream and you update the

00:05:34,630 --> 00:05:38,860
library if you're gonna break the API or

00:05:36,010 --> 00:05:40,840
API update the version number dead

00:05:38,860 --> 00:05:44,800
simple stuff right and oftentimes this

00:05:40,840 --> 00:05:46,690
doesn't happen and also if you happen to

00:05:44,800 --> 00:05:48,280
be a maintainer don't assume that your

00:05:46,690 --> 00:05:50,590
upstream has actually done this

00:05:48,280 --> 00:05:52,720
frequently they'll just go ahead and

00:05:50,590 --> 00:05:54,099
break ABI or API without bumping the

00:05:52,720 --> 00:05:56,889
version number but we have tools that

00:05:54,099 --> 00:05:58,330
detect even this my favorite is ABI diff

00:05:56,889 --> 00:06:00,310
which is part of live Abigail which is

00:05:58,330 --> 00:06:03,460
in fedora and does a phenomenal job and

00:06:00,310 --> 00:06:07,030
then finally if you are a package

00:06:03,460 --> 00:06:11,070
maintainer and there is ABI breakage

00:06:07,030 --> 00:06:14,229
consider packaging the new package

00:06:11,070 --> 00:06:16,150
independent of the old package use name

00:06:14,229 --> 00:06:17,289
versioning so that people don't have to

00:06:16,150 --> 00:06:20,380
go forward I mean one of the great

00:06:17,289 --> 00:06:22,990
functions if it or is that it causes us

00:06:20,380 --> 00:06:24,699
to kind of take all of the packages that

00:06:22,990 --> 00:06:26,830
are inside fedora and move them to the

00:06:24,699 --> 00:06:30,340
latest version but for anything outside

00:06:26,830 --> 00:06:32,020
of fedora like Steam or Chrome or many

00:06:30,340 --> 00:06:33,280
other things that haven't like gotten

00:06:32,020 --> 00:06:35,560
into the Fedora universe that aren't

00:06:33,280 --> 00:06:39,729
part of like the Kodi infrastructure

00:06:35,560 --> 00:06:40,510
those things can't benefit if we force

00:06:39,729 --> 00:06:43,300
them to

00:06:40,510 --> 00:06:46,120
move like so if we want greater adoption

00:06:43,300 --> 00:06:47,500
outside of the fedora sphere then

00:06:46,120 --> 00:06:49,900
actually providing compatibility

00:06:47,500 --> 00:06:52,240
libraries for older versions is actually

00:06:49,900 --> 00:06:53,590
a really useful thing and if you do that

00:06:52,240 --> 00:06:54,910
please set them up for parallel

00:06:53,590 --> 00:06:57,100
installation so you can have more than

00:06:54,910 --> 00:07:00,040
one available at a time best practices

00:06:57,100 --> 00:07:02,740
for this are really well documented so

00:07:00,040 --> 00:07:04,510
just any questions on this comments I

00:07:02,740 --> 00:07:29,260
want time box everything to four or five

00:07:04,510 --> 00:07:31,870
minutes well the way I would do it is

00:07:29,260 --> 00:07:33,280
put it in the main repository I would

00:07:31,870 --> 00:07:35,260
not use modules for this right now

00:07:33,280 --> 00:07:38,320
unless I had to

00:07:35,260 --> 00:07:40,630
but I would also defer to like

00:07:38,320 --> 00:07:42,190
modularity leads on that topic this is

00:07:40,630 --> 00:07:43,600
something that there's some guidance on

00:07:42,190 --> 00:07:47,100
in fedora but the packaging guidelines

00:07:43,600 --> 00:07:47,100
are a little bit fuzzy actually

00:08:34,669 --> 00:08:39,029
yeah it's in user bin these are being

00:08:37,020 --> 00:08:41,159
API deaf and it's got a man page and

00:08:39,029 --> 00:08:43,860
it's very comprehensive I mean like any

00:08:41,159 --> 00:08:47,430
canoe tool it it's deeply detailed and

00:08:43,860 --> 00:08:49,500
it only scratches the surface so I would

00:08:47,430 --> 00:08:51,720
say as if you start using it you don't

00:08:49,500 --> 00:08:53,430
find the answers no close to Fedora

00:08:51,720 --> 00:08:54,870
devel we have the team that built it

00:08:53,430 --> 00:08:57,029
inside Red Hat and it's the kind of

00:08:54,870 --> 00:08:59,100
thing we want to grow the use of because

00:08:57,029 --> 00:09:01,620
the more people do a bi compatibility

00:08:59,100 --> 00:09:03,210
the easier our job is to get make the

00:09:01,620 --> 00:09:05,550
next version of rel come out and have it

00:09:03,210 --> 00:09:08,220
be just as as compatible as the previous

00:09:05,550 --> 00:09:10,140
one you know if I had my way like all

00:09:08,220 --> 00:09:12,870
future rail releases would have all old

00:09:10,140 --> 00:09:14,220
rail releases libraries in them and you

00:09:12,870 --> 00:09:15,810
could install them side-by-side if you

00:09:14,220 --> 00:09:17,670
needed to because that would actually

00:09:15,810 --> 00:09:20,100
provide genuine value to people as long

00:09:17,670 --> 00:09:23,280
as we're like doing security updates all

00:09:20,100 --> 00:09:25,589
right so let's let's move on provision

00:09:23,280 --> 00:09:27,540
and management so this is this is like a

00:09:25,589 --> 00:09:29,550
really straightforward one how many

00:09:27,540 --> 00:09:33,720
people like if you ever used anaconda

00:09:29,550 --> 00:09:35,310
kick-starts yeah do you have to change

00:09:33,720 --> 00:09:37,260
them every time you go to a new Fedora

00:09:35,310 --> 00:09:41,339
release like beyond updating a path name

00:09:37,260 --> 00:09:43,170
oh no of course not because breaking

00:09:41,339 --> 00:09:47,250
something so fundamental would be a bad

00:09:43,170 --> 00:09:48,570
idea and yet there is there's often a

00:09:47,250 --> 00:09:49,800
push to do this and we often have to

00:09:48,570 --> 00:09:52,140
push back and sometimes there's good

00:09:49,800 --> 00:09:54,810
reasons why you'd want to but the the

00:09:52,140 --> 00:09:56,310
basic problem is that when distributions

00:09:54,810 --> 00:09:57,930
are over 25 years old

00:09:56,310 --> 00:10:00,060
we have really strongly established

00:09:57,930 --> 00:10:01,830
visioning and updating mechanisms we

00:10:00,060 --> 00:10:04,470
have management tools that expect them

00:10:01,830 --> 00:10:06,600
to remain the same and so anytime we

00:10:04,470 --> 00:10:08,010
actually want to make a change one of

00:10:06,600 --> 00:10:11,160
the fundamentals what we're actually

00:10:08,010 --> 00:10:12,990
saying is everybody who's ever tried to

00:10:11,160 --> 00:10:15,480
write software that depends on the

00:10:12,990 --> 00:10:17,010
ability to install our software has to

00:10:15,480 --> 00:10:19,230
go back and update their software to

00:10:17,010 --> 00:10:20,850
match and so this is a problem for like

00:10:19,230 --> 00:10:23,010
the virtualization team it's a problem

00:10:20,850 --> 00:10:24,630
for any of the companies that have their

00:10:23,010 --> 00:10:26,160
own management solutions it's a problem

00:10:24,630 --> 00:10:26,880
for OpenStack it's a problem for open

00:10:26,160 --> 00:10:28,590
shipped

00:10:26,880 --> 00:10:33,510
Bernays just anything that provisions

00:10:28,590 --> 00:10:34,710
and likewise if if you're in some sort

00:10:33,510 --> 00:10:37,140
of configuration management you use

00:10:34,710 --> 00:10:39,480
ansible you use cfengine you use chef

00:10:37,140 --> 00:10:42,180
like the ability to actually get into

00:10:39,480 --> 00:10:43,680
the system and connect and do updates if

00:10:42,180 --> 00:10:45,480
you change one of those fundamentals

00:10:43,680 --> 00:10:47,220
then you've kind of broken provision and

00:10:45,480 --> 00:10:49,590
management and that's really bad from an

00:10:47,220 --> 00:10:51,090
ops perspective and that just makes

00:10:49,590 --> 00:10:53,160
people less likely to trust the

00:10:51,090 --> 00:10:55,140
distribution to you take the time if

00:10:53,160 --> 00:10:57,210
setting it up one time for fedora

00:10:55,140 --> 00:10:59,040
setting it up one time for a distro is

00:10:57,210 --> 00:11:00,720
easy if you can trust it forevermore if

00:10:59,040 --> 00:11:05,180
you have to do keep updating every six

00:11:00,720 --> 00:11:08,430
months it Rhodes trust and it it just

00:11:05,180 --> 00:11:09,840
makes you disinclined to go there and so

00:11:08,430 --> 00:11:12,000
the more trust we build the more likely

00:11:09,840 --> 00:11:13,260
people are to join in and that's really

00:11:12,000 --> 00:11:17,150
what we want to do is just kind of grow

00:11:13,260 --> 00:11:19,260
community grow grow the ecosystem so the

00:11:17,150 --> 00:11:20,760
the basic solution to this one is don't

00:11:19,260 --> 00:11:23,970
break the old thing make a new thing

00:11:20,760 --> 00:11:25,530
like we have Fedora core OS it's a

00:11:23,970 --> 00:11:27,570
different provisioning model but I

00:11:25,530 --> 00:11:29,580
didn't go back and like destroy server

00:11:27,570 --> 00:11:31,380
they just made a new thing and it's got

00:11:29,580 --> 00:11:33,150
its own way of deploying and it's it's

00:11:31,380 --> 00:11:34,830
good it's effective and it didn't harm

00:11:33,150 --> 00:11:38,040
anything it's just another take on on

00:11:34,830 --> 00:11:39,180
how to do it and of course just

00:11:38,040 --> 00:11:41,670
following the fedora Packaging

00:11:39,180 --> 00:11:43,050
guidelines is good advice no matter what

00:11:41,670 --> 00:11:47,160
because all of these things have been

00:11:43,050 --> 00:11:50,040
contemplated by the greatest minds of

00:11:47,160 --> 00:11:52,920
fedora and they know all of those evil

00:11:50,040 --> 00:11:55,500
corner cases and as as we invent new

00:11:52,920 --> 00:11:57,560
things the guidelines are updated and it

00:11:55,500 --> 00:12:00,810
just it generally works out pretty well

00:11:57,560 --> 00:12:03,360
so here is here's the big one that I

00:12:00,810 --> 00:12:05,730
think bites us the most the hardest was

00:12:03,360 --> 00:12:07,910
just operational stability and this is

00:12:05,730 --> 00:12:10,860
this is really straightforward like

00:12:07,910 --> 00:12:11,280
here's the problem we we have muscle

00:12:10,860 --> 00:12:14,040
memory

00:12:11,280 --> 00:12:16,020
we have commands and to get broken by

00:12:14,040 --> 00:12:17,280
behavioral changes and packages like

00:12:16,020 --> 00:12:18,600
does anybody think that the get

00:12:17,280 --> 00:12:22,050
command-line options are in any way

00:12:18,600 --> 00:12:23,940
intuitive like it's it's confusing and

00:12:22,050 --> 00:12:26,010
you can very easily look at it and say

00:12:23,940 --> 00:12:27,750
and the clarity of hindsight if we just

00:12:26,010 --> 00:12:30,300
remapped all these things to these

00:12:27,750 --> 00:12:32,780
letters and these words then we would

00:12:30,300 --> 00:12:35,550
have things that make a lot more sense

00:12:32,780 --> 00:12:38,280
but it would also break everything that

00:12:35,550 --> 00:12:40,110
has come before and then as time goes on

00:12:38,280 --> 00:12:42,180
those things wouldn't make sense I

00:12:40,110 --> 00:12:44,940
so at some point we have to realize that

00:12:42,180 --> 00:12:46,440
the getting to the perfect set of

00:12:44,940 --> 00:12:48,840
features are the perfect configuration

00:12:46,440 --> 00:12:51,420
or the perfect interaction is actually

00:12:48,840 --> 00:12:54,870
worse than providing continuity of

00:12:51,420 --> 00:12:56,910
what's already there and this is this is

00:12:54,870 --> 00:13:03,350
something that it's not obvious right

00:12:56,910 --> 00:13:05,340
when when we it's we've all done it

00:13:03,350 --> 00:13:08,970
we've all done it I'm not blaming

00:13:05,340 --> 00:13:11,840
anybody it makes it is clear that we can

00:13:08,970 --> 00:13:14,310
always improve but how we value

00:13:11,840 --> 00:13:16,770
improvement if you look at it not just

00:13:14,310 --> 00:13:18,750
from what makes sense in the moment and

00:13:16,770 --> 00:13:20,220
the clarity of hindsight is different

00:13:18,750 --> 00:13:22,200
than what makes sense if you are

00:13:20,220 --> 00:13:25,680
somebody that wasn't deeply involved if

00:13:22,200 --> 00:13:29,570
you just rely on this thing and so the

00:13:25,680 --> 00:13:33,390
the example that I have relayed is that

00:13:29,570 --> 00:13:34,950
rail 7 had young and and then DNF

00:13:33,390 --> 00:13:36,900
happened in DNF came out with an

00:13:34,950 --> 00:13:38,820
explicit goal of being incompatible and

00:13:36,900 --> 00:13:41,820
there are some good reasons for this

00:13:38,820 --> 00:13:44,310
right like incompatibility was or the

00:13:41,820 --> 00:13:48,150
the force of compatibility was kind of

00:13:44,310 --> 00:13:50,640
crippling to innovation there are a lot

00:13:48,150 --> 00:13:52,860
of dynamics in play but basically a lot

00:13:50,640 --> 00:13:55,200
of good things people wanted to do and

00:13:52,860 --> 00:13:57,600
being constrained by compatibility was a

00:13:55,200 --> 00:14:01,080
problem initially but we actually spent

00:13:57,600 --> 00:14:02,430
two and a half years after DNF was

00:14:01,080 --> 00:14:04,020
rolled out just trying to make it more

00:14:02,430 --> 00:14:06,390
compatible with young and it's not a

00:14:04,020 --> 00:14:08,550
hundred percent and perhaps some

00:14:06,390 --> 00:14:11,490
compromises were made the wrong way but

00:14:08,550 --> 00:14:16,080
basically that compatibility mattered so

00:14:11,490 --> 00:14:18,000
much more to our customers in rel and

00:14:16,080 --> 00:14:20,340
our product managers who are seeking new

00:14:18,000 --> 00:14:23,100
customers that that reversion was worth

00:14:20,340 --> 00:14:25,560
it so what are the actual solutions if

00:14:23,100 --> 00:14:27,450
you have powered the upstream make

00:14:25,560 --> 00:14:31,710
behavioral changes runtime configurable

00:14:27,450 --> 00:14:34,620
so basically like if you could if you

00:14:31,710 --> 00:14:36,990
want to change the my key bindings for

00:14:34,620 --> 00:14:39,210
instance put it in a config file and and

00:14:36,990 --> 00:14:41,520
make sane defaults and and just

00:14:39,210 --> 00:14:43,740
otherwise make it so that you can have

00:14:41,520 --> 00:14:46,950
the thing that is technically correct to

00:14:43,740 --> 00:14:49,200
you but also the thing that is known to

00:14:46,950 --> 00:14:51,420
others to work and then make that an

00:14:49,200 --> 00:14:53,520
option that'll help you move over time

00:14:51,420 --> 00:14:55,200
it will let them get the benefit of the

00:14:53,520 --> 00:14:57,870
changes that you've made when they're

00:14:55,200 --> 00:15:00,240
ready for them without causing them to

00:14:57,870 --> 00:15:02,010
to try it out say uh it doesn't work

00:15:00,240 --> 00:15:05,100
right and then not even use it at all

00:15:02,010 --> 00:15:08,310
and then if you happen to be a

00:15:05,100 --> 00:15:10,020
maintainer and you want to maybe put in

00:15:08,310 --> 00:15:12,300
a new application that is incompatible

00:15:10,020 --> 00:15:14,640
with an old application put it in this

00:15:12,300 --> 00:15:17,130
another module stream because then you

00:15:14,640 --> 00:15:19,740
can give that same ability you can be

00:15:17,130 --> 00:15:21,690
you can say there's this version and

00:15:19,740 --> 00:15:23,640
there's this version the new version is

00:15:21,690 --> 00:15:25,470
kind of incompatible but it's really

00:15:23,640 --> 00:15:26,940
worthwhile and then the person who is

00:15:25,470 --> 00:15:29,190
actually going to use this stuff kids

00:15:26,940 --> 00:15:30,870
gets to decide this is like one of the

00:15:29,190 --> 00:15:33,300
fundamental cool things that modules

00:15:30,870 --> 00:15:36,320
give us is just the ability to provide

00:15:33,300 --> 00:15:38,520
new features and the ability to provide

00:15:36,320 --> 00:15:42,030
legacy support without having to

00:15:38,520 --> 00:15:43,230
compromise on either so when you get

00:15:42,030 --> 00:15:45,660
right down to it stability is the

00:15:43,230 --> 00:15:48,270
continuity of experience over time and

00:15:45,660 --> 00:15:49,980
we don't want software to standstill the

00:15:48,270 --> 00:15:50,850
all the cool stuff happens in fedora we

00:15:49,980 --> 00:15:52,350
definitely want that to keep on

00:15:50,850 --> 00:15:55,260
happening all the stuff that happens

00:15:52,350 --> 00:15:57,570
upstream it's great but if we make just

00:15:55,260 --> 00:15:59,790
a few small changes along these lines if

00:15:57,570 --> 00:16:01,170
you make those changes opt in you get a

00:15:59,790 --> 00:16:03,390
better customer experience yet more

00:16:01,170 --> 00:16:06,030
people that can actually trust an open

00:16:03,390 --> 00:16:08,400
source and and deploy it and Trust in

00:16:06,030 --> 00:16:09,750
fedora and deploy it and use that as

00:16:08,400 --> 00:16:12,140
their basis and I think that's what we

00:16:09,750 --> 00:16:14,670
all want is for fedora to get bigger and

00:16:12,140 --> 00:16:16,590
address more use cases that do the

00:16:14,670 --> 00:16:18,740
things that we wished it could do but

00:16:16,590 --> 00:16:23,360
but for somebody not being willing to

00:16:18,740 --> 00:16:26,430
and that's actually the whole thing so

00:16:23,360 --> 00:16:29,510
more questions more comments and would

00:16:26,430 --> 00:16:31,770
anybody like to maybe take this talk of

00:16:29,510 --> 00:16:33,480
turn it into their own and like give it

00:16:31,770 --> 00:16:35,640
a pause them or you know kind of like

00:16:33,480 --> 00:16:37,050
spread the word of you know what you

00:16:35,640 --> 00:16:39,000
think compatibility is because I think

00:16:37,050 --> 00:16:41,430
that's the kind of thing we need is to

00:16:39,000 --> 00:16:44,630
just like a grow this as a mindset

00:16:41,430 --> 00:16:44,630
inside the community

00:16:54,140 --> 00:16:58,460
understand what interfaces

00:17:07,329 --> 00:17:12,600
all right you're you're in the

00:17:09,970 --> 00:17:12,600
revolution now

00:17:26,850 --> 00:17:32,710
nice alright so different question for

00:17:30,760 --> 00:17:34,240
y'all then is there something else that

00:17:32,710 --> 00:17:36,340
you think oh this is stability this is

00:17:34,240 --> 00:17:38,950
what it's about that wasn't even close

00:17:36,340 --> 00:17:55,750
to cover it in this like is there some

00:17:38,950 --> 00:17:57,730
fifth thing Stephen that's true like the

00:17:55,750 --> 00:18:00,130
the most mature distribution of

00:17:57,730 --> 00:18:02,080
communities have like their their annual

00:18:00,130 --> 00:18:05,169
release or their quarterly release or

00:18:02,080 --> 00:18:05,850
something but it is it does seem pretty

00:18:05,169 --> 00:18:09,640
chaotic

00:18:05,850 --> 00:18:10,990
well yeah distributions do but like GCC

00:18:09,640 --> 00:18:14,020
you know it's going to come out every

00:18:10,990 --> 00:18:16,720
once a year GFC and and and things that

00:18:14,020 --> 00:18:19,240
like components that have been around

00:18:16,720 --> 00:18:20,980
for for long enough that they can rent a

00:18:19,240 --> 00:18:24,309
cars and not have to pay extra in the

00:18:20,980 --> 00:18:26,200
u.s. yes those those ones have have kind

00:18:24,309 --> 00:18:27,909
of gone through this pain but we don't

00:18:26,200 --> 00:18:29,890
want every component we ship to have to

00:18:27,909 --> 00:18:32,830
be like a quarter of a century old

00:18:29,890 --> 00:18:36,809
before we're going to like take the

00:18:32,830 --> 00:18:38,980
lessons of the past right so definitely

00:18:36,809 --> 00:18:41,200
predictable cadence for any community is

00:18:38,980 --> 00:18:47,020
an outstanding thing that's a great

00:18:41,200 --> 00:18:48,549
suggestion all right anybody else other

00:18:47,020 --> 00:18:51,029
thing you think man I can't believe II

00:18:48,549 --> 00:18:51,029
didn't cover this

00:18:52,500 --> 00:18:57,880
alright everybody want advice on how to

00:18:55,120 --> 00:19:01,029
like stop your packages from crashing

00:18:57,880 --> 00:19:02,169
and burning like if anyone came in with

00:19:01,029 --> 00:19:06,429
that we could definitely like have a

00:19:02,169 --> 00:19:08,860
discussion alright so a few people

00:19:06,429 --> 00:19:13,179
raised their hands for maintainer like

00:19:08,860 --> 00:19:14,500
you're a package maintainer in fedora do

00:19:13,179 --> 00:19:16,960
you think you would do any of these

00:19:14,500 --> 00:19:21,539
things would you would you modular eyes

00:19:16,960 --> 00:19:21,539
would you version number your libraries

00:20:02,110 --> 00:20:07,550
yeah if you see Fedora as simply being

00:20:05,780 --> 00:20:10,130
the place where the latest up streams

00:20:07,550 --> 00:20:12,680
get together and have a good time every

00:20:10,130 --> 00:20:15,410
six months it doesn't necessarily fit

00:20:12,680 --> 00:20:16,730
but when you start with when when people

00:20:15,410 --> 00:20:20,000
want to take Fedor a little bit further

00:20:16,730 --> 00:20:22,250
if they if you want to have Fedora core

00:20:20,000 --> 00:20:24,530
OS and fedora IOT if you actually want

00:20:22,250 --> 00:20:26,420
to deploy it not just because you're

00:20:24,530 --> 00:20:28,340
developing operating system but because

00:20:26,420 --> 00:20:30,260
you want to use the result for some

00:20:28,340 --> 00:20:31,880
purpose these things start to make a

00:20:30,260 --> 00:20:34,510
little bit of sense even in the Fedora

00:20:31,880 --> 00:20:34,510
context

00:21:59,110 --> 00:22:16,360
the only case we can think of looks like

00:22:12,230 --> 00:22:16,360
let's do it

00:22:36,909 --> 00:22:41,360
and indeed this is something we could

00:22:38,900 --> 00:22:43,250
get ahead of by by having this be a

00:22:41,360 --> 00:22:45,470
standard inside the community so the

00:22:43,250 --> 00:22:47,450
question is can it be done in such a way

00:22:45,470 --> 00:22:51,110
that for for all the volunteers that are

00:22:47,450 --> 00:23:08,020
doing this packaging it's not really a

00:22:51,110 --> 00:23:08,020
great hardship to them a topic for four

00:23:17,460 --> 00:23:20,660
[Music]

00:23:46,310 --> 00:23:49,410
[Music]

00:24:15,140 --> 00:24:18,140
surprising

00:24:41,050 --> 00:24:45,370
unless there's a reason to

00:25:14,120 --> 00:25:17,820
so in any case we should probably start

00:25:16,379 --> 00:25:20,460
the discussion and just kind of see

00:25:17,820 --> 00:25:23,610
where we're at now so this was 25

00:25:20,460 --> 00:25:24,779
minutes thank you for joining and come

00:25:23,610 --> 00:25:25,909
talk to me afterward if this is

00:25:24,779 --> 00:25:28,020
something that kind of spoke to you

00:25:25,909 --> 00:25:33,270
thanks

00:25:28,020 --> 00:25:33,270

YouTube URL: https://www.youtube.com/watch?v=joVcRPmLMGQ


