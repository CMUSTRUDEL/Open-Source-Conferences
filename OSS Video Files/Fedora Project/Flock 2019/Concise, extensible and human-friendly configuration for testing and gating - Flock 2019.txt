Title: Concise, extensible and human-friendly configuration for testing and gating - Flock 2019
Publication date: 2019-09-02
Playlist: Flock 2019
Description: 
	Miroslav Vadkerti, Petr Å plÃ­chal, Frantisek Sumsal

The current way of enabling tests in the Fedora CI is awkward. There is repeated feedback that the configuration is hard to understand and write. Also its extensibility is quite limited. We want to change that so:

    Simple & common use cases are super simple to write
    The format is flexible enough to cover future extensions
    Concise and easily readable for both machines & humans
    Everything needed for testing & gating at one place
    Easier reuse of test cases across different distros
    Clear test steps separation allows easier local execution
    Support for inheritance to minimize duplication & maintenance

We've defined Level 1 and Level 2 metadata specification and would like to present a proof of concept on the systemd component showing how simple it could be to enable set of shared tests for continuously testing changes in GitHub, Fedora CI, CentOS CI...

--
Recordings of talks at Flock are a community effort.  Unfortunately not everything works perfectly every time. If you're interested in helping us improve, let us know.
Captions: 
	00:00:02,120 --> 00:00:08,929
so welcome to the CIA docked MMF talk

00:00:06,130 --> 00:00:13,000
what is it what it is about like the

00:00:08,929 --> 00:00:17,839
main goal is to make the life of of the

00:00:13,000 --> 00:00:21,349
developer in the point of view to enable

00:00:17,839 --> 00:00:24,890
tests more easier as easier as as

00:00:21,349 --> 00:00:27,609
possible and also to enable open

00:00:24,890 --> 00:00:33,350
sourcing operants open sourcing tests

00:00:27,609 --> 00:00:35,510
very very simple so little bit of words

00:00:33,350 --> 00:00:38,329
about the agenda after a short

00:00:35,510 --> 00:00:41,390
introduction I I will give him some

00:00:38,329 --> 00:00:44,539
short info about the FMF format about

00:00:41,390 --> 00:00:47,510
level 1 and level 2 metadata then we'll

00:00:44,539 --> 00:00:51,559
give a couple of real-life examples and

00:00:47,510 --> 00:00:53,800
then I shall show a demo about how this

00:00:51,559 --> 00:00:57,940
could be working in the future we have a

00:00:53,800 --> 00:00:57,940
simple proof of concept working there

00:00:58,989 --> 00:01:05,150
yes so the introduction who we are

00:01:02,300 --> 00:01:07,820
that's the slide so my name is Peter

00:01:05,150 --> 00:01:11,450
Schmeichel I am from the OSC I team this

00:01:07,820 --> 00:01:14,840
is Murat Kirti also from osci and also

00:01:11,450 --> 00:01:17,450
testing firm team and then we have

00:01:14,840 --> 00:01:21,430
Franta Sushil who is from the plumber's

00:01:17,450 --> 00:01:25,970
team and Brooks on system D testing

00:01:21,430 --> 00:01:27,710
let's start with the motivation so there

00:01:25,970 --> 00:01:31,030
is a feedback a repeated feedback that

00:01:27,710 --> 00:01:35,210
if you want to enable tests in CI its

00:01:31,030 --> 00:01:37,340
kind of kind of awkward complicated

00:01:35,210 --> 00:01:39,920
there are multiple files in multiple

00:01:37,340 --> 00:01:41,660
locations with different extensions and

00:01:39,920 --> 00:01:44,450
names that needs to be created to enable

00:01:41,660 --> 00:01:47,180
test the gating for example is a

00:01:44,450 --> 00:01:50,780
completely separate file from the how

00:01:47,180 --> 00:01:53,240
you enable tests tests themselves also

00:01:50,780 --> 00:01:55,280
we internally keep metadata which are

00:01:53,240 --> 00:01:57,320
necessary for test execution and there

00:01:55,280 --> 00:01:59,150
are store in different places and

00:01:57,320 --> 00:02:02,390
scattered across across the place so

00:01:59,150 --> 00:02:04,730
it's very hard to take them and open

00:02:02,390 --> 00:02:06,680
source them to make the testing as early

00:02:04,730 --> 00:02:10,130
as possible so what we are looking for

00:02:06,680 --> 00:02:12,860
is to have like the very simple common

00:02:10,130 --> 00:02:14,160
use case is super simple you just place

00:02:12,860 --> 00:02:15,720
one file

00:02:14,160 --> 00:02:18,000
couple of lines everything is already

00:02:15,720 --> 00:02:19,740
enabled we want to have a consistent

00:02:18,000 --> 00:02:22,920
right of storing or test execution

00:02:19,740 --> 00:02:26,550
metadata and this should also allow us

00:02:22,920 --> 00:02:29,220
to easier open source tests and run them

00:02:26,550 --> 00:02:33,330
earlier the format should be concise

00:02:29,220 --> 00:02:37,040
easily readable and also flexible and

00:02:33,330 --> 00:02:42,390
extensible for future so a bit of words

00:02:37,040 --> 00:02:45,540
about SMS so what is this flexible

00:02:42,390 --> 00:02:48,890
metadata format this is something which

00:02:45,540 --> 00:02:52,860
we were looking for for some time and

00:02:48,890 --> 00:02:56,580
this is the answer for our question how

00:02:52,860 --> 00:03:00,150
to efficiently store all test execution

00:02:56,580 --> 00:03:04,020
related metadata somehow in a sensible

00:03:00,150 --> 00:03:06,750
way and we found it that the FMF could

00:03:04,020 --> 00:03:08,850
be the answer it allows us to save

00:03:06,750 --> 00:03:12,000
everything in gate it's nicely in plain

00:03:08,850 --> 00:03:15,090
text plain text format there version

00:03:12,000 --> 00:03:19,890
under under version control basically

00:03:15,090 --> 00:03:22,170
it's it's based on llamo so the concise

00:03:19,890 --> 00:03:25,410
Humana machine readable variable format

00:03:22,170 --> 00:03:27,990
and it adds a couple of couple of nice

00:03:25,410 --> 00:03:30,690
features like hierarchy inheritance and

00:03:27,990 --> 00:03:33,270
elasticity and I will speak about them

00:03:30,690 --> 00:03:37,310
now it's available in federal corporate

00:03:33,270 --> 00:03:40,830
tips so you can directly install it and

00:03:37,310 --> 00:03:43,890
start to experiment with that so the

00:03:40,830 --> 00:03:46,560
features simple use case as simple as

00:03:43,890 --> 00:03:49,430
possible as you see summary contracts

00:03:46,560 --> 00:03:52,020
acts how to run the test duration

00:03:49,430 --> 00:03:55,040
everything very simple and it could be

00:03:52,020 --> 00:03:57,840
for for a simple single test like this

00:03:55,040 --> 00:04:00,900
then the hierarchy there is a virtual

00:03:57,840 --> 00:04:02,640
hierarchy support so you can in a single

00:04:00,900 --> 00:04:06,510
file if you have like five tests you

00:04:02,640 --> 00:04:08,310
don't want to create 5/5 files with this

00:04:06,510 --> 00:04:10,380
information metadata for the test you

00:04:08,310 --> 00:04:12,750
create single file and you put the barge

00:04:10,380 --> 00:04:14,850
virtual hierarchy there and save

00:04:12,750 --> 00:04:19,230
everything everything in it in a single

00:04:14,850 --> 00:04:20,880
in a single file then inheritance it

00:04:19,230 --> 00:04:22,860
quite often happens that you have a

00:04:20,880 --> 00:04:24,630
bunch of tests and the contact person

00:04:22,860 --> 00:04:26,180
for those tests the duration of the

00:04:24,630 --> 00:04:28,460
requirements or the

00:04:26,180 --> 00:04:30,410
which is relevant is common for all of

00:04:28,460 --> 00:04:33,080
them so while like repeating and

00:04:30,410 --> 00:04:35,600
duplicating this information you can say

00:04:33,080 --> 00:04:37,310
like this is the common information this

00:04:35,600 --> 00:04:39,650
should be inherited so the previous

00:04:37,310 --> 00:04:41,600
slide as it was like this you can write

00:04:39,650 --> 00:04:43,750
like this you have the common parts at

00:04:41,600 --> 00:04:47,449
the start and the objects which are

00:04:43,750 --> 00:04:49,870
under this hierarchy inherit of these

00:04:47,449 --> 00:04:52,970
options this also allows you to create

00:04:49,870 --> 00:04:55,669
something we call virtual spaces so here

00:04:52,970 --> 00:04:59,449
you have one implementation one shot

00:04:55,669 --> 00:05:01,310
script and then you run a short version

00:04:59,449 --> 00:05:04,009
I said here run test for example or a

00:05:01,310 --> 00:05:05,840
quick can be like part of the gating and

00:05:04,009 --> 00:05:09,680
you could do some like deeper deeper

00:05:05,840 --> 00:05:12,500
tests which then you can run outside of

00:05:09,680 --> 00:05:15,550
the gating but you can still like see

00:05:12,500 --> 00:05:18,940
the results and make sure it passed

00:05:15,550 --> 00:05:22,130
elasticity just a couple of words like

00:05:18,940 --> 00:05:24,110
from the start you usually like start

00:05:22,130 --> 00:05:28,820
with a couple of lines and a couple of

00:05:24,110 --> 00:05:31,460
tests but as the time goes you run into

00:05:28,820 --> 00:05:34,639
like it in the file grows and becomes

00:05:31,460 --> 00:05:37,550
becomes hard to maintain so FMF rules

00:05:34,639 --> 00:05:39,110
you'd if you need you separate those

00:05:37,550 --> 00:05:40,880
information into different directories

00:05:39,110 --> 00:05:46,580
or files and have it nicely structured

00:05:40,880 --> 00:05:49,970
in a file structure so if you want to

00:05:46,580 --> 00:05:52,099
try just in a fence tarp install or take

00:05:49,970 --> 00:05:54,289
it from the github and start

00:05:52,099 --> 00:05:56,509
experimenting the package itself

00:05:54,289 --> 00:05:58,699
contains a couple of examples so you can

00:05:56,509 --> 00:06:04,370
just go to the directory and start to

00:05:58,699 --> 00:06:06,979
experiment with that it has CLI so like

00:06:04,370 --> 00:06:09,740
quite intuitive sub commands I would say

00:06:06,979 --> 00:06:11,240
FMF Alice will list all the objects

00:06:09,740 --> 00:06:13,880
which are present in the directory where

00:06:11,240 --> 00:06:16,520
you currently are you can filter objects

00:06:13,880 --> 00:06:19,070
which are you interested in you can say

00:06:16,520 --> 00:06:22,009
like just show me all all test cases

00:06:19,070 --> 00:06:26,000
which are stored there or you can you

00:06:22,009 --> 00:06:28,130
can do some filtering based on tags or I

00:06:26,000 --> 00:06:31,430
don't know run time Robin component as

00:06:28,130 --> 00:06:34,039
such but I won't not dive into that and

00:06:31,430 --> 00:06:35,930
also there is a Python module so if you

00:06:34,039 --> 00:06:38,160
want to like instead your application to

00:06:35,930 --> 00:06:40,920
add support for for this map

00:06:38,160 --> 00:06:44,040
kind of metadata you can just like read

00:06:40,920 --> 00:06:47,190
the metadata 3 using ff3 climb the whole

00:06:44,040 --> 00:06:50,070
tree and filter all only those objects

00:06:47,190 --> 00:06:51,720
which you are interested in so there was

00:06:50,070 --> 00:06:57,960
a little bit about FMF

00:06:51,720 --> 00:07:00,420
and then a little bound metadata so when

00:06:57,960 --> 00:07:04,050
we were thinking about this and after

00:07:00,420 --> 00:07:06,450
some time of discussions we ended up and

00:07:04,050 --> 00:07:08,730
this like separation of level 1 with

00:07:06,450 --> 00:07:11,490
rate and level 2 metadata the Elliott

00:07:08,730 --> 00:07:14,130
down we call those those data which are

00:07:11,490 --> 00:07:17,220
necessary for test executions and which

00:07:14,130 --> 00:07:19,350
are closely related to individual test

00:07:17,220 --> 00:07:21,480
cases I usually you'd place this

00:07:19,350 --> 00:07:23,190
information very or you would want to

00:07:21,480 --> 00:07:25,860
place this information as close to the

00:07:23,190 --> 00:07:32,190
best code or the source code even as

00:07:25,860 --> 00:07:35,460
cool as possible so in federal CI / /

00:07:32,190 --> 00:07:37,800
metadata project on Peggy or we have

00:07:35,460 --> 00:07:40,200
proposal refined for now a couple of

00:07:37,800 --> 00:07:41,670
attributes for this like summary

00:07:40,200 --> 00:07:43,920
description contact test path

00:07:41,670 --> 00:07:45,990
environment you've seen some of those in

00:07:43,920 --> 00:07:48,450
the examples and for each of them we

00:07:45,990 --> 00:07:50,760
have like nice like short description

00:07:48,450 --> 00:07:52,800
motivation user stories examples so that

00:07:50,760 --> 00:07:58,860
it's clear for what this attribute

00:07:52,800 --> 00:08:02,760
should be should be used now how it was

00:07:58,860 --> 00:08:05,550
before so internally we have a kind of

00:08:02,760 --> 00:08:08,669
metadata for running Vickery tests in

00:08:05,550 --> 00:08:11,340
mic files it looks like this and started

00:08:08,669 --> 00:08:13,440
like that like 10 years ago and we still

00:08:11,340 --> 00:08:17,730
keep in creating these files when

00:08:13,440 --> 00:08:21,440
creating new tests and I think this does

00:08:17,730 --> 00:08:24,120
not deserve any more common command

00:08:21,440 --> 00:08:25,740
another file purpose where you would

00:08:24,120 --> 00:08:28,620
place like some more detailed

00:08:25,740 --> 00:08:30,990
description of the test then another

00:08:28,620 --> 00:08:33,630
bunch of metadata we have in our test

00:08:30,990 --> 00:08:35,099
case management system which some of the

00:08:33,630 --> 00:08:36,930
data I duplicated some there are some

00:08:35,099 --> 00:08:38,430
additional data and there are some

00:08:36,930 --> 00:08:40,050
fields which we were missing so we

00:08:38,430 --> 00:08:41,849
invented something like structured for

00:08:40,050 --> 00:08:43,469
you because it was not possible to add

00:08:41,849 --> 00:08:46,200
attribute to the to the tool so we

00:08:43,469 --> 00:08:47,700
invented like this workaround so you see

00:08:46,200 --> 00:08:50,640
like for places where you keep

00:08:47,700 --> 00:08:52,520
information about the test case how it

00:08:50,640 --> 00:08:58,530
could look like

00:08:52,520 --> 00:09:01,230
single one as you see key-value some

00:08:58,530 --> 00:09:04,200
extensions of course the support for

00:09:01,230 --> 00:09:05,790
inheritance as I mentioned before so in

00:09:04,200 --> 00:09:08,010
fact like this this example could

00:09:05,790 --> 00:09:10,290
probably would look like like this

00:09:08,010 --> 00:09:11,760
because the rest of the data are shared

00:09:10,290 --> 00:09:16,860
in the component so you would not want

00:09:11,760 --> 00:09:18,870
to repeat that again and again so there

00:09:16,860 --> 00:09:20,120
would be about level 1 and level 2 what

00:09:18,870 --> 00:09:23,280
is level 2 metadata

00:09:20,120 --> 00:09:25,560
these are metadata additional

00:09:23,280 --> 00:09:30,060
information for execution of one or more

00:09:25,560 --> 00:09:31,470
test cases and it says things like how

00:09:30,060 --> 00:09:33,900
the environment for testing should be

00:09:31,470 --> 00:09:35,340
prepared which set of test cases is

00:09:33,900 --> 00:09:38,310
rather than forgetting which is not

00:09:35,340 --> 00:09:41,010
relevant for gating and which framework

00:09:38,310 --> 00:09:43,530
should be used and some some stuff like

00:09:41,010 --> 00:09:45,450
that similar as the previous r1 and this

00:09:43,530 --> 00:09:48,420
is defined in the Federation metadata

00:09:45,450 --> 00:09:51,870
regular project l2 so you will find some

00:09:48,420 --> 00:09:56,670
details there are a couple of words

00:09:51,870 --> 00:09:58,800
about the concept so artifact as the

00:09:56,670 --> 00:10:02,550
thing you are going to test and we would

00:09:58,800 --> 00:10:04,140
like to define or enable users to say

00:10:02,550 --> 00:10:06,360
that like for a pull request I would

00:10:04,140 --> 00:10:08,130
like to run these tests for build I

00:10:06,360 --> 00:10:09,840
would like to run these tests and when

00:10:08,130 --> 00:10:13,230
there is update maybe it contains

00:10:09,840 --> 00:10:14,910
multiple packages for that case I would

00:10:13,230 --> 00:10:16,620
like to run a different set of tests I

00:10:14,910 --> 00:10:17,940
think in the previous presentation there

00:10:16,620 --> 00:10:19,740
was a question about like if it would be

00:10:17,940 --> 00:10:22,260
possible like there is update and

00:10:19,740 --> 00:10:23,820
decided like multiple packages so this

00:10:22,260 --> 00:10:26,010
this could be one one of the options

00:10:23,820 --> 00:10:27,900
that you say like for the when it is

00:10:26,010 --> 00:10:29,400
update there are multiple packages you

00:10:27,900 --> 00:10:31,470
can you can do a different type of

00:10:29,400 --> 00:10:37,020
testing some integration testing like

00:10:31,470 --> 00:10:39,390
that well a test set is a basically

00:10:37,020 --> 00:10:44,190
something like a group of tests it can

00:10:39,390 --> 00:10:46,050
have like summary and then the

00:10:44,190 --> 00:10:48,330
definition here here you see like the

00:10:46,050 --> 00:10:50,900
structure so for the pura class artifact

00:10:48,330 --> 00:10:54,480
you have one test set called pet like

00:10:50,900 --> 00:10:56,400
check check the PAP ate there then some

00:10:54,480 --> 00:10:58,920
linting for the build when the build is

00:10:56,400 --> 00:11:02,670
built you can you could run a smoke test

00:10:58,920 --> 00:11:04,670
which for example run runs fast and you

00:11:02,670 --> 00:11:06,380
would enable it in gating and

00:11:04,670 --> 00:11:08,270
features feature test which can maybe

00:11:06,380 --> 00:11:13,270
take a long time and you would not

00:11:08,270 --> 00:11:17,240
enable that in gating so the test steps

00:11:13,270 --> 00:11:19,640
so there's the idea to separate the

00:11:17,240 --> 00:11:22,310
steps in the configuration so that it's

00:11:19,640 --> 00:11:24,140
possible to select those steps which

00:11:22,310 --> 00:11:27,320
were interested in we have like user

00:11:24,140 --> 00:11:30,200
stories I as a developer I would like to

00:11:27,320 --> 00:11:32,630
check my component report and see what

00:11:30,200 --> 00:11:35,120
tests will be run but mmm it's not

00:11:32,630 --> 00:11:37,850
possible there's decimal by book and

00:11:35,120 --> 00:11:40,130
other play books and I don't know and if

00:11:37,850 --> 00:11:42,740
I run run it it takes an hour and I

00:11:40,130 --> 00:11:44,330
don't find it so you would say just run

00:11:42,740 --> 00:11:48,740
the discover step as show me the tests

00:11:44,330 --> 00:11:50,420
you give the tests or another thing for

00:11:48,740 --> 00:11:53,600
example you could you would like to do a

00:11:50,420 --> 00:11:55,940
quick testing on your localhost so I

00:11:53,600 --> 00:11:58,070
would say skip the provisioning parts

00:11:55,940 --> 00:12:03,200
keep the prepare part just do the

00:11:58,070 --> 00:12:06,770
execute or discover execute and each of

00:12:03,200 --> 00:12:09,620
the steps could do like could have

00:12:06,770 --> 00:12:12,950
multiple implementations there so for

00:12:09,620 --> 00:12:15,070
the discover to discover is to detect

00:12:12,950 --> 00:12:18,050
what are the tests that should be run

00:12:15,070 --> 00:12:19,880
provisioning part prepare the machine

00:12:18,050 --> 00:12:22,730
for testing take it from beaker from

00:12:19,880 --> 00:12:23,210
OpenStack or like testing on my local

00:12:22,730 --> 00:12:26,540
machine

00:12:23,210 --> 00:12:28,280
prepare some additional steps for like

00:12:26,540 --> 00:12:30,500
setting up the box so installing

00:12:28,280 --> 00:12:31,100
packages starting up services things

00:12:30,500 --> 00:12:34,070
like that

00:12:31,100 --> 00:12:38,060
execute the step for execution itself

00:12:34,070 --> 00:12:40,640
then reporting maybe for the future some

00:12:38,060 --> 00:12:42,410
possibilities to set up the notification

00:12:40,640 --> 00:12:45,680
or how the reporting should be that

00:12:42,410 --> 00:12:50,330
where messages should be sent finishing

00:12:45,680 --> 00:12:52,160
for some cleanup tasks so before the

00:12:50,330 --> 00:12:55,100
current situation is that if you want to

00:12:52,160 --> 00:12:57,490
enable testing and enable them in gating

00:12:55,100 --> 00:12:59,920
you create the test CML flower and

00:12:57,490 --> 00:13:01,790
already here you see some like

00:12:59,920 --> 00:13:03,740
implementation details which are not

00:13:01,790 --> 00:13:06,590
that interesting for a developer like

00:13:03,740 --> 00:13:09,680
hosts localhost what does it mean a text

00:13:06,590 --> 00:13:11,960
classic the possibility currently and so

00:13:09,680 --> 00:13:14,390
and if you if you run into some like

00:13:11,960 --> 00:13:15,480
more complicated complex situations that

00:13:14,390 --> 00:13:19,110
test some of how could

00:13:15,480 --> 00:13:23,100
much more much more complicated but

00:13:19,110 --> 00:13:26,610
that's how it is currently then this was

00:13:23,100 --> 00:13:30,330
yeah there was a request to be able to

00:13:26,610 --> 00:13:32,220
configure amount of RAM for the test so

00:13:30,330 --> 00:13:35,370
we added as one of proof-of-concept how

00:13:32,220 --> 00:13:37,830
fmet could be used this this five

00:13:35,370 --> 00:13:39,810
provision FMF which which should which

00:13:37,830 --> 00:13:41,970
can contain the information about the

00:13:39,810 --> 00:13:47,070
memory but like as a proof of concept

00:13:41,970 --> 00:13:49,200
just we didn't put it into some more

00:13:47,070 --> 00:13:51,540
more thought so there's this there's

00:13:49,200 --> 00:13:53,400
this in text under a network you go why

00:13:51,540 --> 00:13:55,110
is it there like that and the m and so

00:13:53,400 --> 00:14:00,900
it's not very it's not very intuitive

00:13:55,110 --> 00:14:04,170
and for the gating m oh yeah copy and

00:14:00,900 --> 00:14:07,110
paste one once or multiple times if you

00:14:04,170 --> 00:14:10,680
want to enable multiple gates and it

00:14:07,110 --> 00:14:13,650
looks like this and here's our vision of

00:14:10,680 --> 00:14:16,440
this could look like in the future so

00:14:13,650 --> 00:14:21,510
you would have provision memory three

00:14:16,440 --> 00:14:23,940
gigs execute the binary which was to

00:14:21,510 --> 00:14:27,750
send the same in the in the example with

00:14:23,940 --> 00:14:31,050
the CMO and then you say like this this

00:14:27,750 --> 00:14:34,350
tested should be enabled for the for the

00:14:31,050 --> 00:14:39,660
gate for push push to testing everything

00:14:34,350 --> 00:14:41,880
everything in one file so that's about

00:14:39,660 --> 00:14:45,030
the first part and I will give over to

00:14:41,880 --> 00:14:54,470
from that to say something about the the

00:14:45,030 --> 00:14:58,740
examples Apache okay so the Apache one

00:14:54,470 --> 00:15:00,600
quite simple example let's say you have

00:14:58,740 --> 00:15:03,810
a component you just want to run a set

00:15:00,600 --> 00:15:05,940
of shell commands so you add the test

00:15:03,810 --> 00:15:08,880
set and say this is the first line you

00:15:05,940 --> 00:15:10,830
add the step the execute step and then

00:15:08,880 --> 00:15:13,140
like the implementation how is child and

00:15:10,830 --> 00:15:15,150
the list of commands and that's it in

00:15:13,140 --> 00:15:17,040
this way you should be able to create a

00:15:15,150 --> 00:15:19,830
simple integration tests like install

00:15:17,040 --> 00:15:22,380
package here's start the service create

00:15:19,830 --> 00:15:24,450
web page check that it runs so these

00:15:22,380 --> 00:15:26,910
like I don't know seven seven lines

00:15:24,450 --> 00:15:28,350
could be everything or even if you have

00:15:26,910 --> 00:15:29,910
like smoke test - -

00:15:28,350 --> 00:15:33,090
something it could be just like a

00:15:29,910 --> 00:15:45,480
something like for rides to to enable

00:15:33,090 --> 00:15:48,180
the test yes yeah actually you would

00:15:45,480 --> 00:15:50,280
probably go on something like this to do

00:15:48,180 --> 00:15:53,040
like in the prepare in the propeller

00:15:50,280 --> 00:15:56,370
step to install the packages and and

00:15:53,040 --> 00:15:58,260
then let's let the framework install the

00:15:56,370 --> 00:16:01,350
actual rpm which is which is to be

00:15:58,260 --> 00:16:03,350
tested instead of like replacing it with

00:16:01,350 --> 00:16:08,010
the DNF commands or something like that

00:16:03,350 --> 00:16:11,010
system the example so in rating system D

00:16:08,010 --> 00:16:13,830
we managed to collect hundreds of

00:16:11,010 --> 00:16:16,590
regression tests and for many customer

00:16:13,830 --> 00:16:18,780
scenarios and so on and usually these

00:16:16,590 --> 00:16:21,150
scenarios they depend on upstream

00:16:18,780 --> 00:16:24,270
features which were reported in Tyrell

00:16:21,150 --> 00:16:26,430
and it actually kind of makes sense to

00:16:24,270 --> 00:16:28,620
run this test in upstream first to check

00:16:26,430 --> 00:16:33,030
if they are not broken by future updates

00:16:28,620 --> 00:16:36,270
so I wanted to upstream the whole test

00:16:33,030 --> 00:16:38,340
into in today for example Fedora but I

00:16:36,270 --> 00:16:40,460
wasn't able to because many of the

00:16:38,340 --> 00:16:43,980
metadata are scattered around the

00:16:40,460 --> 00:16:46,620
internal infrastructure and the metadata

00:16:43,980 --> 00:16:49,440
are vital to run this test so even if I

00:16:46,620 --> 00:16:52,740
upstream data to it I could only run it

00:16:49,440 --> 00:16:55,620
for example Fedora so thanks to the FMF

00:16:52,740 --> 00:16:57,840
we managed to move this metadata into

00:16:55,620 --> 00:17:00,120
the separate files which lies in the git

00:16:57,840 --> 00:17:02,790
repository with the tests themselves so

00:17:00,120 --> 00:17:06,990
this is just an example of tiny fraction

00:17:02,790 --> 00:17:09,420
of the test suite we actually collected

00:17:06,990 --> 00:17:11,760
the metadata for hardware requirements

00:17:09,420 --> 00:17:14,550
and dependencies and so on into the

00:17:11,760 --> 00:17:16,470
files so everything is in the one git

00:17:14,550 --> 00:17:19,920
repository and you don't have to hunt it

00:17:16,470 --> 00:17:22,380
around the infrastructure so this is the

00:17:19,920 --> 00:17:24,930
infrastructure of the test retro and now

00:17:22,380 --> 00:17:26,970
this is the config in the upstream

00:17:24,930 --> 00:17:29,580
repository or around eight repository

00:17:26,970 --> 00:17:33,150
which basically there's the prepare face

00:17:29,580 --> 00:17:35,160
which installs all the test dependencies

00:17:33,150 --> 00:17:37,430
which were usually in the make file but

00:17:35,160 --> 00:17:40,380
the dependencies are actually

00:17:37,430 --> 00:17:41,070
infrastructure dependents so you have

00:17:40,380 --> 00:17:42,360
dependent

00:17:41,070 --> 00:17:43,680
different dependencies per

00:17:42,360 --> 00:17:45,810
infrastructure so it doesn't make sense

00:17:43,680 --> 00:17:47,670
to have them in the test metadata

00:17:45,810 --> 00:17:49,320
themselves because they don't know where

00:17:47,670 --> 00:17:51,380
they run

00:17:49,320 --> 00:17:54,480
then I have the discovery phase which

00:17:51,380 --> 00:17:56,670
allows you to filter the tests depends

00:17:54,480 --> 00:18:00,930
on the tags distribution and so on and

00:17:56,670 --> 00:18:03,330
for the historical reasons the system is

00:18:00,930 --> 00:18:06,240
written in the Calypso you can tell it

00:18:03,330 --> 00:18:09,750
how to run the tests to it this is the

00:18:06,240 --> 00:18:12,120
most basic conflict but force for

00:18:09,750 --> 00:18:14,600
example in rail we do several waves of

00:18:12,120 --> 00:18:17,820
this thing which is called tears and

00:18:14,600 --> 00:18:20,190
basically for the tears the only thing

00:18:17,820 --> 00:18:21,960
we are the only row which changes is the

00:18:20,190 --> 00:18:24,570
filter itself so it wouldn't make sense

00:18:21,960 --> 00:18:27,420
to just copy over the whole every face

00:18:24,570 --> 00:18:30,330
again and again so you can write a

00:18:27,420 --> 00:18:33,720
common config which has all the common

00:18:30,330 --> 00:18:37,140
data in one place and then you can just

00:18:33,720 --> 00:18:39,690
overwrite specific phases to contain

00:18:37,140 --> 00:18:41,790
different deer tags different aesthetics

00:18:39,690 --> 00:18:47,360
and so on so this should make the data

00:18:41,790 --> 00:18:51,060
duplication less command I guess and

00:18:47,360 --> 00:18:54,960
thanks to the FMF and work which mirror

00:18:51,060 --> 00:18:58,170
date we managed to run the internal test

00:18:54,960 --> 00:19:01,140
suite on Fedora at least the part of the

00:18:58,170 --> 00:19:03,480
in the federal to test in fedoras so

00:19:01,140 --> 00:19:05,370
hopefully in the following months we

00:19:03,480 --> 00:19:08,820
will manage to upstream the whole test

00:19:05,370 --> 00:19:13,800
to it and run it at least in fedora and

00:19:08,820 --> 00:19:16,800
CentOS CIA yeah sorry for the quick

00:19:13,800 --> 00:19:18,720
presentation short to 25 minutes is that

00:19:16,800 --> 00:19:21,060
of 50 so we need to very quick so let me

00:19:18,720 --> 00:19:24,090
show you how we manage to basically put

00:19:21,060 --> 00:19:25,950
or running the test on basically copper

00:19:24,090 --> 00:19:27,930
builds of each packet builds and if you

00:19:25,950 --> 00:19:30,390
were in the previous presentation you

00:19:27,930 --> 00:19:32,820
saw that so packet here the tool which

00:19:30,390 --> 00:19:33,600
was printed by the guys to integrate up

00:19:32,820 --> 00:19:35,790
simple objects

00:19:33,600 --> 00:19:37,170
dark the fedora and part of it packet

00:19:35,790 --> 00:19:38,640
service basically built copper wheels

00:19:37,170 --> 00:19:40,830
right so we take those copper bolts I

00:19:38,640 --> 00:19:42,650
want to run it on a real VM for those

00:19:40,830 --> 00:19:46,710
federer according to that code and

00:19:42,650 --> 00:19:50,820
report it back directly to github yeah

00:19:46,710 --> 00:19:52,840
so packet tsarism we have testing system

00:19:50,820 --> 00:19:55,240
will provide it has a testing system as

00:19:52,840 --> 00:19:56,679
service but it's not not really here for

00:19:55,240 --> 00:19:58,570
announcement I just say its name so

00:19:56,679 --> 00:20:01,210
testing form and basically provides the

00:19:58,570 --> 00:20:03,520
service which packet uses to contact us

00:20:01,210 --> 00:20:06,400
once the copper bills are built to do

00:20:03,520 --> 00:20:09,370
this testing and we after the testing is

00:20:06,400 --> 00:20:11,650
done we do that on a VM and we run on

00:20:09,370 --> 00:20:14,169
CentOS CI openshift we spin up there a

00:20:11,650 --> 00:20:17,080
VM how install the packages according to

00:20:14,169 --> 00:20:18,940
according up the VM according to the

00:20:17,080 --> 00:20:21,730
recruit right so if you are building for

00:20:18,940 --> 00:20:24,309
three copper hood then we spin up three

00:20:21,730 --> 00:20:27,610
DMS and around testing report back

00:20:24,309 --> 00:20:29,740
report back to packet very shortly

00:20:27,610 --> 00:20:31,270
yeah so how does it look like so this

00:20:29,740 --> 00:20:35,799
for the simple shell executors the one

00:20:31,270 --> 00:20:37,899
that patron was showing here so this

00:20:35,799 --> 00:20:39,820
very simple step a very simple shell

00:20:37,899 --> 00:20:43,590
test the basically runs for these

00:20:39,820 --> 00:20:45,669
commands and asserts each line we have a

00:20:43,590 --> 00:20:47,230
example packet configuration here so

00:20:45,669 --> 00:20:50,169
this is how you actually configure

00:20:47,230 --> 00:20:52,600
package to run those tests I think the

00:20:50,169 --> 00:20:54,490
copper build job I don't know if it was

00:20:52,600 --> 00:20:56,409
shown on the previous presentation so

00:20:54,490 --> 00:20:58,390
that's how you say to pack it that it

00:20:56,409 --> 00:20:59,620
should build copper builds and basic lot

00:20:58,390 --> 00:21:04,210
of the copper builds are built and you

00:20:59,620 --> 00:21:06,940
add additional test jobs instruct

00:21:04,210 --> 00:21:11,649
testing form to run around the testing

00:21:06,940 --> 00:21:15,250
on these copper routes and so here is a

00:21:11,649 --> 00:21:17,679
br and this is all package staging so we

00:21:15,250 --> 00:21:20,620
need to be sorry so it's not yet in

00:21:17,679 --> 00:21:23,140
production we will work on that in the

00:21:20,620 --> 00:21:24,520
next weeks to get it done but this is a

00:21:23,140 --> 00:21:26,740
simple pulley class this is just empty

00:21:24,520 --> 00:21:29,049
one or the metadata is already stored as

00:21:26,740 --> 00:21:31,090
I showed you the tornado repository and

00:21:29,049 --> 00:21:32,860
you are basically the checks so you can

00:21:31,090 --> 00:21:34,899
see that Becky staging here below to the

00:21:32,860 --> 00:21:37,299
RPM built successfully and then there

00:21:34,899 --> 00:21:38,679
have been three different tests has

00:21:37,299 --> 00:21:42,100
being run on these three different

00:21:38,679 --> 00:21:44,260
failures 29 30 and row height and if I

00:21:42,100 --> 00:21:47,860
go to the detail step to testing farms

00:21:44,260 --> 00:21:51,070
console I could see you have the output

00:21:47,860 --> 00:21:52,720
of testing form which is which is we try

00:21:51,070 --> 00:21:54,159
to be very concise so as there is no

00:21:52,720 --> 00:21:56,529
like middle layer between so you know

00:21:54,159 --> 00:21:59,549
what is going on so as you can see here

00:21:56,529 --> 00:22:01,960
has been installing the copper builds

00:21:59,549 --> 00:22:05,280
installing the copper bills from the

00:22:01,960 --> 00:22:07,090
from the cop recruit yeah downloading

00:22:05,280 --> 00:22:10,009
developing the base

00:22:07,090 --> 00:22:13,250
tests which are placed directly right in

00:22:10,009 --> 00:22:17,630
the repo so we actually cloned the BR

00:22:13,250 --> 00:22:18,950
and here at the end at the end you could

00:22:17,630 --> 00:22:21,799
see basically the commands which have

00:22:18,950 --> 00:22:24,559
been around so installing the the stuff

00:22:21,799 --> 00:22:26,630
system D system cetera start httpd here

00:22:24,559 --> 00:22:28,279
echo foo and this curl right so this is

00:22:26,630 --> 00:22:30,679
this one actually the test right and

00:22:28,279 --> 00:22:33,470
after this is done we contact back

00:22:30,679 --> 00:22:37,639
packet or set it to the rest API the

00:22:33,470 --> 00:22:41,480
results it's very simple for the for the

00:22:37,639 --> 00:22:46,370
system D very similarly so this is the

00:22:41,480 --> 00:22:50,740
FMF test that front of us showing packet

00:22:46,370 --> 00:22:53,419
 completely the same no magic there

00:22:50,740 --> 00:22:57,860
and here we mocked actually the results

00:22:53,419 --> 00:22:59,629
so they fail so you get an idea how it

00:22:57,860 --> 00:23:00,830
would look like if it fails and if it

00:22:59,629 --> 00:23:03,679
fails even for the testing

00:23:00,830 --> 00:23:06,350
infrastructure so yeah here only one

00:23:03,679 --> 00:23:07,850
test is being run which actually failed

00:23:06,350 --> 00:23:10,879
and we can go again to the console to

00:23:07,850 --> 00:23:13,549
inspect again the artifacts to inspect

00:23:10,879 --> 00:23:16,250
the test output and here is actually

00:23:13,549 --> 00:23:17,509
infrastructure infrastructure so we are

00:23:16,250 --> 00:23:20,690
trying to be concise here and return

00:23:17,509 --> 00:23:21,919
some reasonable error out that as you

00:23:20,690 --> 00:23:23,659
can see our in store in copper wheels

00:23:21,919 --> 00:23:26,450
what could that mean so you can go back

00:23:23,659 --> 00:23:30,019
to testing forms console and basically

00:23:26,450 --> 00:23:33,769
investigate so here is well actually the

00:23:30,019 --> 00:23:35,840
packet copper is enabled here where it

00:23:33,769 --> 00:23:40,129
is installed and here at the end I will

00:23:35,840 --> 00:23:42,710
find that this particular built actually

00:23:40,129 --> 00:23:44,000
older build of system V so it's like it

00:23:42,710 --> 00:23:47,269
conflicts with a new one that we are

00:23:44,000 --> 00:23:48,950
testing on already so yeah most probably

00:23:47,269 --> 00:23:54,980
you need to replace the poor request and

00:23:48,950 --> 00:23:59,779
to the latest lead sources yep that's

00:23:54,980 --> 00:24:01,399
very shortly it so one very important

00:23:59,779 --> 00:24:03,860
thing of course like you want being

00:24:01,399 --> 00:24:05,720
testing forms like the system that does

00:24:03,860 --> 00:24:08,149
this to be able to users right so we

00:24:05,720 --> 00:24:09,679
will expose this as one one tool that

00:24:08,149 --> 00:24:13,580
would basically use a container so you

00:24:09,679 --> 00:24:15,649
don't need to install and Marian will

00:24:13,580 --> 00:24:16,940
provide this is container so here you

00:24:15,649 --> 00:24:18,650
can run this command already and this is

00:24:16,940 --> 00:24:21,610
your run

00:24:18,650 --> 00:24:23,840
basically the hello world hello world

00:24:21,610 --> 00:24:26,210
test there that was the first one is the

00:24:23,840 --> 00:24:27,770
ATT PD and you can execute this on your

00:24:26,210 --> 00:24:29,540
localhost and it will do basically the

00:24:27,770 --> 00:24:31,730
same thing as as I showed you on

00:24:29,540 --> 00:24:34,730
production instance which reports to

00:24:31,730 --> 00:24:37,220
packet yeah and will you won't be

00:24:34,730 --> 00:24:39,309
running docker here we'll make it

00:24:37,220 --> 00:24:41,900
possible make it and available as a tool

00:24:39,309 --> 00:24:43,700
so we don't need to specify some things

00:24:41,900 --> 00:24:45,140
that of course if it's a container there

00:24:43,700 --> 00:24:48,430
will need to be some additional magic

00:24:45,140 --> 00:24:50,390
once the tool will be more mature

00:24:48,430 --> 00:24:53,630
currently need to land in privileged

00:24:50,390 --> 00:24:56,720
because we're on VM in the container of

00:24:53,630 --> 00:24:58,580
course like that's how it is if you want

00:24:56,720 --> 00:25:01,370
to reproduce the stuff you'll need to

00:24:58,580 --> 00:25:02,809
run the in privileged mode and doesn't

00:25:01,370 --> 00:25:06,020
work and because there is a bag open and

00:25:02,809 --> 00:25:11,240
I think it's not yet released to be able

00:25:06,020 --> 00:25:15,860
to do this because yeah the second

00:25:11,240 --> 00:25:18,740
example this would actually run the

00:25:15,860 --> 00:25:20,720
tests that are placed in your local

00:25:18,740 --> 00:25:23,510
directory so basically if you won't just

00:25:20,720 --> 00:25:25,520
create tests you just added how you just

00:25:23,510 --> 00:25:26,960
create them and with some one simple

00:25:25,520 --> 00:25:29,270
command you will be able to run them and

00:25:26,960 --> 00:25:31,580
execute so that's where we are getting

00:25:29,270 --> 00:25:34,340
yeah more announcement about testing

00:25:31,580 --> 00:25:35,809
form it will be coming yeah we don't

00:25:34,340 --> 00:25:37,940
have yet we don't have yet the

00:25:35,809 --> 00:25:40,150
announcement so I I'm just mentioning it

00:25:37,940 --> 00:25:40,150
here

00:25:57,850 --> 00:26:05,150
you don't yeah so like like you don't

00:26:03,140 --> 00:26:07,309
like of course like we can run tests for

00:26:05,150 --> 00:26:09,230
example Nestle for if you will be using

00:26:07,309 --> 00:26:11,270
directly Pullman container where you run

00:26:09,230 --> 00:26:12,800
the test you don't want need route but

00:26:11,270 --> 00:26:15,970
if you will want to run it on a full

00:26:12,800 --> 00:26:18,290
fledge VM you need some exit right and

00:26:15,970 --> 00:26:26,740
document is actually not exit run this

00:26:18,290 --> 00:26:28,790
route but yeah it runs this route it

00:26:26,740 --> 00:26:31,130
yeah of course like we can support that

00:26:28,790 --> 00:26:33,140
we already actually the tool supports

00:26:31,130 --> 00:26:34,670
connecting to an existing instance but

00:26:33,140 --> 00:26:36,590
then it expects that you provision into

00:26:34,670 --> 00:26:37,970
some some certain way because you need

00:26:36,590 --> 00:26:40,010
to connect it to this allow or they

00:26:37,970 --> 00:26:42,320
supply all the information like the the

00:26:40,010 --> 00:26:47,200
key and everything of course but like

00:26:42,320 --> 00:26:47,200
that's so portable definitely and yes

00:26:57,190 --> 00:27:05,760
oh so it's a needle

00:27:15,180 --> 00:27:21,510
so cool we can drop it

00:27:17,080 --> 00:27:21,510
thanks yeah

00:27:58,040 --> 00:28:03,150
like we would like to have and that was

00:28:01,350 --> 00:28:05,310
the intention like to have the the frame

00:28:03,150 --> 00:28:08,700
open source and free and so that it

00:28:05,310 --> 00:28:10,740
could be used at different different

00:28:08,700 --> 00:28:13,050
places and protestingly from distros so

00:28:10,740 --> 00:28:15,630
I think like if it really possible I

00:28:13,050 --> 00:28:18,240
really would have liked the very and the

00:28:15,630 --> 00:28:20,490
very identical way of how to enable test

00:28:18,240 --> 00:28:24,090
and these testers and and gating and in

00:28:20,490 --> 00:28:27,510
Federer and in Ralph as well plus if I

00:28:24,090 --> 00:28:31,230
understand correctly we have also like

00:28:27,510 --> 00:28:32,970
an RFP for FMF to be able to have some

00:28:31,230 --> 00:28:34,920
like default configuration in a metadata

00:28:32,970 --> 00:28:38,130
tree and then I have somewhere for

00:28:34,920 --> 00:28:40,230
example downstream another sign of tree

00:28:38,130 --> 00:28:42,330
which you would just merge the upstream

00:28:40,230 --> 00:28:44,400
so it's like everything from the

00:28:42,330 --> 00:28:46,350
configuration in Federer is copied or

00:28:44,400 --> 00:28:48,510
inherited and you just override some

00:28:46,350 --> 00:28:50,760
internal information so you would have

00:28:48,510 --> 00:28:53,900
to still have all almost like just a

00:28:50,760 --> 00:28:53,900
single source of truth

00:29:12,000 --> 00:29:15,299
yes the idea is that you have just a

00:29:13,830 --> 00:29:16,980
single configuration you reference the

00:29:15,299 --> 00:29:19,289
other one which should be inherited and

00:29:16,980 --> 00:29:21,629
then you have like just a single single

00:29:19,289 --> 00:29:23,690
mine but with the internal change for

00:29:21,629 --> 00:29:23,690
example

00:29:42,440 --> 00:29:45,990
definitely to know like we will meet you

00:29:44,220 --> 00:29:48,690
work at a doubter or have a discussion

00:29:45,990 --> 00:29:51,029
about it like how it should look like

00:29:48,690 --> 00:29:52,409
and these things so I completely agree

00:29:51,029 --> 00:29:59,309
that gating is separate for that and

00:29:52,409 --> 00:30:01,769
depends on a single branch in master at

00:29:59,309 --> 00:30:04,340
level 2 metadata are actually branched

00:30:01,769 --> 00:30:06,750
for specific distrust so you would have

00:30:04,340 --> 00:30:09,000
the possibility and it wants to have

00:30:06,750 --> 00:30:11,039
like different different configuration

00:30:09,000 --> 00:30:12,690
for different branches so like naturally

00:30:11,039 --> 00:30:15,029
I would say this this convicts are in

00:30:12,690 --> 00:30:17,159
different branches but if if needed like

00:30:15,029 --> 00:30:19,110
to remove some additional duplication

00:30:17,159 --> 00:30:23,010
even here I think it would be possible

00:30:19,110 --> 00:30:25,909
to introduce this remove references but

00:30:23,010 --> 00:30:25,909
not necessarily

00:30:28,289 --> 00:30:31,480
any other questions like we are out of

00:30:30,940 --> 00:30:32,860
time

00:30:31,480 --> 00:30:34,899
I think it's coffee break or something

00:30:32,860 --> 00:30:36,549
but if you want to ask something yeah so

00:30:34,899 --> 00:30:39,399
I just mentioned like this is the

00:30:36,549 --> 00:30:41,620
prototype that we have now for github

00:30:39,399 --> 00:30:44,710
requests and like you want to add this

00:30:41,620 --> 00:30:47,139
like also to Federer see I don't want I

00:30:44,710 --> 00:30:49,960
can possibility to how to define this

00:30:47,139 --> 00:30:51,340
indifferently and yeah we are internally

00:30:49,960 --> 00:30:53,649
working to move in basically all that

00:30:51,340 --> 00:30:56,049
all the legacy start getting rid of it

00:30:53,649 --> 00:30:58,509
but we need to do it continuously as

00:30:56,049 --> 00:31:03,090
slowly because a lot of tests that have

00:30:58,509 --> 00:31:03,090

YouTube URL: https://www.youtube.com/watch?v=UjUDz-BxdKM


