Title: Fedora IoT Security features - Patrick Uiterwijk - Flock 2019
Publication date: 2019-08-28
Playlist: Flock 2019
Description: 
	So, you want to deploy Fedora IoT to deploy your next big thing on? What features do we have now, and what do we plan to integrate, to make sure that you can trust the systems you deploy to the field?

--
Recordings of talks at Flock are a community effort. Unfortunately not everything works perfectly every time. If you're interested in helping us improve, let us know.
Captions: 
	00:00:02,889 --> 00:00:10,370
hi I'm Patrick and for now I'm still in

00:00:08,900 --> 00:00:13,340
the community platform engineering team

00:00:10,370 --> 00:00:20,029
as of coming Monday I won't be and I'll

00:00:13,340 --> 00:00:23,090
be working on its IOT security so yeah

00:00:20,029 --> 00:00:28,310
it a lot of this is what we're currently

00:00:23,090 --> 00:00:37,690
planning to do so we'll see what like

00:00:28,310 --> 00:00:39,620
how much of us goes right so I think

00:00:37,690 --> 00:00:45,379
there should have been I've worked

00:00:39,620 --> 00:00:47,570
Fedora before it because IOT has a lot

00:00:45,379 --> 00:00:50,390
of meanings for a lot of people are

00:00:47,570 --> 00:00:57,739
people who have smart thermostats there

00:00:50,390 --> 00:01:00,559
are people who like see it it's a I I

00:00:57,739 --> 00:01:05,239
want to play media on my TV and there's

00:01:00,559 --> 00:01:09,229
people who do things like controlling

00:01:05,239 --> 00:01:14,170
oil and gas platforms I mean that might

00:01:09,229 --> 00:01:17,930
not be the same kind of use case for

00:01:14,170 --> 00:01:21,979
authority we're usually meaning leaning

00:01:17,930 --> 00:01:26,110
towards DD larger scope of the spectrum

00:01:21,979 --> 00:01:29,840
I think that we try not to focus on like

00:01:26,110 --> 00:01:33,560
your random five-dollar gadget that

00:01:29,840 --> 00:01:40,939
happens to have a Wi-Fi connection but

00:01:33,560 --> 00:01:43,159
more serious things so one of the things

00:01:40,939 --> 00:01:46,670
that is always amusing with security and

00:01:43,159 --> 00:01:48,409
computers is but why would I need to

00:01:46,670 --> 00:01:53,170
worry about someone touching my server

00:01:48,409 --> 00:01:56,299
it's in a data center and yeah

00:01:53,170 --> 00:01:59,210
how can someone get access to it why is

00:01:56,299 --> 00:02:02,149
this drug bug which lets me bypass

00:01:59,210 --> 00:02:05,960
security by hitting Enter 50 times a

00:02:02,149 --> 00:02:07,610
terrible issue I mean nobody will get

00:02:05,960 --> 00:02:11,330
access to my server there's a lock on my

00:02:07,610 --> 00:02:13,820
cage yeah I now try doing it for array

00:02:11,330 --> 00:02:16,370
or a light pole where someone can just

00:02:13,820 --> 00:02:21,440
walk up and just grab the machine out of

00:02:16,370 --> 00:02:27,290
it that is kind of a different attack

00:02:21,440 --> 00:02:31,010
vector that usually hasn't been looked

00:02:27,290 --> 00:02:33,440
at a lot in the past so that's what

00:02:31,010 --> 00:02:35,140
we're currently trying to like how are

00:02:33,440 --> 00:02:37,880
we going to deal with some of that

00:02:35,140 --> 00:02:40,880
because if we ever want to get bigger

00:02:37,880 --> 00:02:44,630
customers to use this stuff in

00:02:40,880 --> 00:02:50,720
production we probably want a reasonable

00:02:44,630 --> 00:02:59,440
answer to the to what you how you secure

00:02:50,720 --> 00:03:05,510
that stuff so for good time this is a a

00:02:59,440 --> 00:03:09,770
like to use it you want to make sure

00:03:05,510 --> 00:03:11,690
that what your system boots is like the

00:03:09,770 --> 00:03:15,590
thing you attempt to boot and not

00:03:11,690 --> 00:03:20,150
someone prep your device and snuck in

00:03:15,590 --> 00:03:22,910
drone as the card and oops now we've got

00:03:20,150 --> 00:03:25,640
a compromise system on our network that

00:03:22,910 --> 00:03:29,209
might not be appreciated in a industrial

00:03:25,640 --> 00:03:33,470
environment so we're planning to use

00:03:29,209 --> 00:03:36,920
secure boot there some people might know

00:03:33,470 --> 00:03:39,950
about it basically verify all of the

00:03:36,920 --> 00:03:46,010
parts of the boot process as it's being

00:03:39,950 --> 00:03:50,300
booted and in addition measure it which

00:03:46,010 --> 00:03:53,720
means that you take a checksum of what

00:03:50,300 --> 00:03:55,780
is being booted so when a remote way you

00:03:53,720 --> 00:03:59,870
want to try to connect suit something

00:03:55,780 --> 00:04:05,570
you can prove what is running on the

00:03:59,870 --> 00:04:08,269
platform and have the server's actually

00:04:05,570 --> 00:04:13,000
trust that you are not a compromised

00:04:08,269 --> 00:04:16,530
device now of course there's also some

00:04:13,000 --> 00:04:20,040
data that you might want to put on there

00:04:16,530 --> 00:04:22,170
where you wanted to be unavailable if

00:04:20,040 --> 00:04:24,750
someone instead of pushing puts their

00:04:22,170 --> 00:04:26,730
own SD card in your device grabbed your

00:04:24,750 --> 00:04:31,980
SD card out and plugged it into your

00:04:26,730 --> 00:04:35,670
laptop so I don't know how many people

00:04:31,980 --> 00:04:40,040
have heard of clevis it's a way to tie

00:04:35,670 --> 00:04:43,440
in different sealing mechanisms to a

00:04:40,040 --> 00:04:45,780
disk or to provide disk encryption

00:04:43,440 --> 00:04:53,130
passphrase automatically to Lux on boot

00:04:45,780 --> 00:04:57,180
it's because Suri it's saying it right

00:04:53,130 --> 00:05:02,190
yeah pretty much that's it very simple

00:04:57,180 --> 00:05:05,250
submarine because for some reason having

00:05:02,190 --> 00:05:08,820
to enter a password on every device you

00:05:05,250 --> 00:05:11,910
have on every boot temps not to be

00:05:08,820 --> 00:05:14,520
appreciated very well it tends to be a

00:05:11,910 --> 00:05:20,360
bunch of manual labor that people might

00:05:14,520 --> 00:05:20,360
prefer yeah

00:05:53,050 --> 00:05:56,149
[Music]

00:06:00,260 --> 00:06:03,380
[Music]

00:06:07,370 --> 00:06:15,090
where you storage or device the whole

00:06:12,420 --> 00:06:17,310
attack is like it is entirely possible

00:06:15,090 --> 00:06:21,570
for someone to get this blackberry

00:06:17,310 --> 00:06:24,540
machine this encryption is usually is

00:06:21,570 --> 00:06:26,400
because ders company confidential data

00:06:24,540 --> 00:06:29,190
but you need to store on there with

00:06:26,400 --> 00:06:34,560
algorithms and stuff that you want to

00:06:29,190 --> 00:06:38,610
compute on the nose you really don't

00:06:34,560 --> 00:06:40,800
want dos to leak to an attacker because

00:06:38,610 --> 00:06:49,470
there's actually intellectual property

00:06:40,800 --> 00:06:52,490
tied up in the algorithms yes this is

00:06:49,470 --> 00:06:52,490
mostly for people

00:07:18,839 --> 00:07:25,539
we also want to make sure that once the

00:07:21,580 --> 00:07:31,149
platform is actually running attacks

00:07:25,539 --> 00:07:35,289
don't we have some way to thwart a lot

00:07:31,149 --> 00:07:40,239
of vulnerabilities for example oh we are

00:07:35,289 --> 00:07:42,729
running a DCP client oh now there's a

00:07:40,239 --> 00:07:44,289
vulnerability in the DCP sir or the DCP

00:07:42,729 --> 00:07:49,629
client which allows for mode code

00:07:44,289 --> 00:07:52,209
execution which would be significantly

00:07:49,629 --> 00:07:55,749
threaded with as Linux because suddenly

00:07:52,209 --> 00:07:58,449
you come escape because well in a data

00:07:55,749 --> 00:08:01,569
center you can just say oh there's this

00:07:58,449 --> 00:08:06,519
to severe vulnerability let's just roll

00:08:01,569 --> 00:08:10,300
up excess to over the next I don't know

00:08:06,519 --> 00:08:14,919
our if you have about 56 kilobytes or

00:08:10,300 --> 00:08:17,499
kid a bits of data that patching all the

00:08:14,919 --> 00:08:18,939
time it might take a bit for an app

00:08:17,499 --> 00:08:21,749
actress to actually sync out to all of

00:08:18,939 --> 00:08:25,379
your nodes you still want him to be

00:08:21,749 --> 00:08:30,639
somewhat secure and not be remotely

00:08:25,379 --> 00:08:34,810
exploited immediately as part of that is

00:08:30,639 --> 00:08:38,409
also ima I had to write it down because

00:08:34,810 --> 00:08:41,229
I always forget what it stands for is a

00:08:38,409 --> 00:08:43,870
Linux kernel feature which actually is

00:08:41,229 --> 00:08:47,290
now back to enabled in Fedora right it

00:08:43,870 --> 00:08:51,880
was enabled a while ago and then things

00:08:47,290 --> 00:08:56,410
blew up basically it's a way where you

00:08:51,880 --> 00:09:00,250
can say either this is the file content

00:08:56,410 --> 00:09:05,139
I expect and don't bug them if anything

00:09:00,250 --> 00:09:08,279
changes so if you get a file that

00:09:05,139 --> 00:09:13,649
someone manages to change on the disk

00:09:08,279 --> 00:09:13,649
you can figure it out and not loaded and

00:09:14,459 --> 00:09:21,069
that also ties into measurement because

00:09:19,240 --> 00:09:23,410
I'm a can also measure the files that

00:09:21,069 --> 00:09:27,790
are being read which can then be

00:09:23,410 --> 00:09:34,060
in a later stage so the operating system

00:09:27,790 --> 00:09:36,339
integrity for both making sure we you

00:09:34,060 --> 00:09:39,579
always have the same image deploy and

00:09:36,339 --> 00:09:41,860
you know which images building we're

00:09:39,579 --> 00:09:45,879
using our chemistry some of you might

00:09:41,860 --> 00:09:51,189
know it from atomic or core OS Fedora

00:09:45,879 --> 00:09:53,199
core OS not the original one so then to

00:09:51,189 --> 00:09:56,800
connect time because you now have a

00:09:53,199 --> 00:09:59,740
platform running and yeah a platform on

00:09:56,800 --> 00:10:02,170
itself I mean I can put a computer on

00:09:59,740 --> 00:10:04,439
here but it's not going to be of any use

00:10:02,170 --> 00:10:10,660
until I can actually connect to it

00:10:04,439 --> 00:10:12,370
supposedly you do need connections but

00:10:10,660 --> 00:10:15,339
how are we going to prevent someone from

00:10:12,370 --> 00:10:17,980
stealing the device extracting keys from

00:10:15,339 --> 00:10:22,449
it and then oh I can now connect to the

00:10:17,980 --> 00:10:24,250
VPN of the owner of this device and roam

00:10:22,449 --> 00:10:27,490
around in their network because that is

00:10:24,250 --> 00:10:31,149
not really the intended purpose of

00:10:27,490 --> 00:10:34,180
things and I can tell you that this has

00:10:31,149 --> 00:10:39,430
happened in other deployments probably

00:10:34,180 --> 00:10:43,230
not intended to be repeated so we intend

00:10:39,430 --> 00:10:46,899
to store the actual encryption key oded

00:10:43,230 --> 00:10:49,509
authentication keys in a TPM where you

00:10:46,899 --> 00:10:54,220
basically cannot extract the private key

00:10:49,509 --> 00:10:56,439
material out of it in order to connect

00:10:54,220 --> 00:11:00,639
without that specific platform in a

00:10:56,439 --> 00:11:04,540
known good way so only if that system

00:11:00,639 --> 00:11:08,259
has booted and has correctly verified

00:11:04,540 --> 00:11:10,779
his entire boot process can you get

00:11:08,259 --> 00:11:15,029
access to keys to connect to the network

00:11:10,779 --> 00:11:18,309
and as part of that also all the

00:11:15,029 --> 00:11:21,069
measurements previously we can use that

00:11:18,309 --> 00:11:24,819
to prove to remote server that we are in

00:11:21,069 --> 00:11:25,480
fact the correct machine with the

00:11:24,819 --> 00:11:30,730
correct

00:11:25,480 --> 00:11:34,380
from software and yeah now we can

00:11:30,730 --> 00:11:37,450
actually connect to a network however

00:11:34,380 --> 00:11:39,880
you still want to run an application so

00:11:37,450 --> 00:11:41,560
we now have a platform where we can what

00:11:39,880 --> 00:11:46,630
we know that was running on a platform

00:11:41,560 --> 00:11:48,930
is secure the platform it or the device

00:11:46,630 --> 00:11:51,580
can connect security to remote network

00:11:48,930 --> 00:11:57,970
but does that mean you trust everything

00:11:51,580 --> 00:12:01,720
in a in most systems this is basically

00:11:57,970 --> 00:12:04,420
the stack of the what you trust in a

00:12:01,720 --> 00:12:07,720
system where each color means a

00:12:04,420 --> 00:12:11,320
different provider of the data or of the

00:12:07,720 --> 00:12:14,710
application or code you first have to

00:12:11,320 --> 00:12:16,420
CPU which you need to trust which runs

00:12:14,710 --> 00:12:19,330
management engine for example if use

00:12:16,420 --> 00:12:22,660
Intel which is already scary nacelle

00:12:19,330 --> 00:12:26,410
then there's the EFI from Lenovo in my

00:12:22,660 --> 00:12:29,490
case - I trust them to write secure code

00:12:26,410 --> 00:12:29,490
I don't

00:12:30,929 --> 00:12:43,589
oh yeah there's ya know like you need to

00:12:40,170 --> 00:12:45,779
trust all kind of different firmware and

00:12:43,589 --> 00:12:48,179
then just also want to run an

00:12:45,779 --> 00:12:50,040
application so these days most of the

00:12:48,179 --> 00:12:52,199
time you actually run things inside a

00:12:50,040 --> 00:12:54,989
virtual machine now you've got a

00:12:52,199 --> 00:12:58,379
hypervisor to trust inside that you have

00:12:54,989 --> 00:13:01,170
another bootloader and another kernel in

00:12:58,379 --> 00:13:03,119
there and container engine for example

00:13:01,170 --> 00:13:05,999
docker because everything is containers

00:13:03,119 --> 00:13:09,839
these days and then you finally get to

00:13:05,999 --> 00:13:12,600
your user space like your Lipsy and

00:13:09,839 --> 00:13:14,369
other applications and middleware and

00:13:12,600 --> 00:13:20,279
then finally you can run your own

00:13:14,369 --> 00:13:27,869
algorithm on it xkcd made a perfect

00:13:20,279 --> 00:13:38,269
summary of this yes all laters you can

00:13:27,869 --> 00:13:42,149
basically assume so this one guts had

00:13:38,269 --> 00:13:45,209
perfectly for the project we were

00:13:42,149 --> 00:13:48,929
working on we were like they just

00:13:45,209 --> 00:13:50,699
publishes for us so some of you might

00:13:48,929 --> 00:13:53,309
have heard of NRT's one of the other

00:13:50,699 --> 00:14:00,689
core people is sitting right there Peter

00:13:53,309 --> 00:14:02,579
Jones and he will probably bash me if I

00:14:00,689 --> 00:14:11,220
say anything wrong so that's kind of

00:14:02,579 --> 00:14:15,019
scary yeah that's fine so the intention

00:14:11,220 --> 00:14:17,610
with an arch is that we basically say

00:14:15,019 --> 00:14:19,799
you get down to you trust the CPU and

00:14:17,610 --> 00:14:25,499
firmware because you need to run your

00:14:19,799 --> 00:14:28,799
application somewhere and yeah yeah you

00:14:25,499 --> 00:14:30,689
gotta trust something and then you skip

00:14:28,799 --> 00:14:33,149
all the layers in between with what you

00:14:30,689 --> 00:14:35,720
need to verify it because we run

00:14:33,149 --> 00:14:39,290
middleware or basically we have

00:14:35,720 --> 00:14:41,379
a Application Platform and on top of

00:14:39,290 --> 00:14:46,639
that you just run your application I

00:14:41,379 --> 00:14:49,850
don't have any further slides no so the

00:14:46,639 --> 00:14:52,699
intention here is basically most modern

00:14:49,850 --> 00:14:57,009
CPUs architectures have a little

00:14:52,699 --> 00:15:00,379
entrusted trusted execution environment

00:14:57,009 --> 00:15:03,550
which is a specific mode of the CPU

00:15:00,379 --> 00:15:07,610
where even the host operating system

00:15:03,550 --> 00:15:12,279
cannot see or touch any of the co2 or

00:15:07,610 --> 00:15:17,029
running for example there's Intel SGX or

00:15:12,279 --> 00:15:23,180
in the SV sorry

00:15:17,029 --> 00:15:27,649
discretions so there's Intel SGX and the

00:15:23,180 --> 00:15:31,970
SCV both of them are a way to run an

00:15:27,649 --> 00:15:34,519
application on your CPU where all of

00:15:31,970 --> 00:15:39,050
your host operating system is not able

00:15:34,519 --> 00:15:42,550
to actually see it so the intention here

00:15:39,050 --> 00:15:48,290
is to be able to run an application as a

00:15:42,550 --> 00:15:51,920
we shove it inside as yet or AMD a CV

00:15:48,290 --> 00:15:54,589
and you don't have to trust any

00:15:51,920 --> 00:15:59,649
intermediate layers and you just get a

00:15:54,589 --> 00:16:02,779
connection via a secure protocol and

00:15:59,649 --> 00:16:05,500
whatever you run in there is invisible

00:16:02,779 --> 00:16:07,579
to the host operating system so whatever

00:16:05,500 --> 00:16:11,420
malware you haven't running in there

00:16:07,579 --> 00:16:16,399
will have no clue what is going on or be

00:16:11,420 --> 00:16:18,100
unable to temper with it so that is how

00:16:16,399 --> 00:16:22,160
we are hoping to get some

00:16:18,100 --> 00:16:28,209
trustworthiness of your results and the

00:16:22,160 --> 00:16:28,209
platform you run things on so

00:16:28,709 --> 00:16:36,730
yeah we we assumed no physical security

00:16:32,199 --> 00:16:39,519
and then and try to ensure integrity

00:16:36,730 --> 00:16:42,279
from their arm for the platform

00:16:39,519 --> 00:16:48,879
connection and then they are the actual

00:16:42,279 --> 00:16:51,029
applications and are there any further

00:16:48,879 --> 00:16:51,029
questions

00:17:08,039 --> 00:17:18,549
right so our chemistry is when you

00:17:14,799 --> 00:17:22,799
deploy a tree you deploy a particular

00:17:18,549 --> 00:17:28,049
commit that commits is signed by the

00:17:22,799 --> 00:17:31,750
distributor Fedora for example and it

00:17:28,049 --> 00:17:33,820
contains the checksum of every single

00:17:31,750 --> 00:17:36,340
file that is shipped as part of that

00:17:33,820 --> 00:17:39,429
tree so while you're pulling the image

00:17:36,340 --> 00:17:42,010
down and also later at runtime you can

00:17:39,429 --> 00:17:45,640
verify that everything that you

00:17:42,010 --> 00:17:49,360
downloaded and or put on disk is exactly

00:17:45,640 --> 00:17:56,590
as it was shipped at any point in time

00:17:49,360 --> 00:18:00,669
and in addition that the root filesystem

00:17:56,590 --> 00:18:04,390
is also mounted read-only so it is also

00:18:00,669 --> 00:18:07,210
very hard to actually modify it and then

00:18:04,390 --> 00:18:10,860
also to detect it is then also possible

00:18:07,210 --> 00:18:10,860
to detect if it has been modified

00:18:17,930 --> 00:18:27,820
it's one oh yes

00:18:38,420 --> 00:18:43,370
kind of

00:18:41,120 --> 00:18:45,700
before tea or sink and worried that

00:18:43,370 --> 00:18:48,700
somebody could secure the device

00:18:45,700 --> 00:18:48,700
protected

00:18:56,390 --> 00:19:04,760
yes however the TPM itself like the core

00:19:02,270 --> 00:19:08,600
feature of a TPM is that it's really

00:19:04,760 --> 00:19:10,790
hard to get or basically practically

00:19:08,600 --> 00:19:16,460
impossible to get this key material out

00:19:10,790 --> 00:19:20,330
of it and you can tell the TPM that it

00:19:16,460 --> 00:19:24,230
will only release its keys so be able to

00:19:20,330 --> 00:19:29,200
do tricks if this sorry right no but

00:19:24,230 --> 00:19:31,910
like that it will only use its keys if

00:19:29,200 --> 00:19:36,080
everything up to Derrick is booted with

00:19:31,910 --> 00:19:41,270
correct material so if you were to pull

00:19:36,080 --> 00:19:43,490
out the kernel and it tried to pull with

00:19:41,270 --> 00:19:47,570
an attacker kernel which locks the

00:19:43,490 --> 00:19:49,790
passphrase or something the TPM doesn't

00:19:47,570 --> 00:19:54,400
have the correct measurements and then

00:19:49,790 --> 00:19:54,400
it won't decrypt the disk encryption key

00:20:17,960 --> 00:20:21,140
[Music]

00:20:32,690 --> 00:20:36,119
[Music]

00:20:47,210 --> 00:20:50,309
[Music]

00:21:00,040 --> 00:21:03,170
[Music]

00:21:23,070 --> 00:21:28,960
so if someone like if someone steals to

00:21:26,980 --> 00:21:31,960
device and they hook it up to their own

00:21:28,960 --> 00:21:35,050
power and network it will just boot but

00:21:31,960 --> 00:21:37,930
that doesn't buy them anything because

00:21:35,050 --> 00:21:40,150
they don't the system is still denying

00:21:37,930 --> 00:21:41,500
you standard box yeah like you don't

00:21:40,150 --> 00:21:54,060
have a terminal because you don't have a

00:21:41,500 --> 00:21:57,160
root password yeah well I mean is that

00:21:54,060 --> 00:21:59,140
if if you steal the device you plug it

00:21:57,160 --> 00:22:01,390
into your home the only result is that

00:21:59,140 --> 00:22:03,070
the person who owns the device doesn't

00:22:01,390 --> 00:22:03,550
have to power the electricity bill

00:22:03,070 --> 00:22:16,870
anymore

00:22:03,550 --> 00:22:20,130
because you just the main thing is if

00:22:16,870 --> 00:22:23,080
you actually wonder what's under this

00:22:20,130 --> 00:22:25,930
like you would need the exact same disk

00:22:23,080 --> 00:22:27,520
new sexing device with the exact same

00:22:25,930 --> 00:22:34,060
bootloader and the exact same kernel

00:22:27,520 --> 00:22:35,620
which supposedly like the TPM ensures

00:22:34,060 --> 00:22:40,270
that you boot the same bootloader and

00:22:35,620 --> 00:22:43,390
the same kernel and which case yeah

00:22:40,270 --> 00:22:46,770
we're we're hoping that the kernel isn't

00:22:43,390 --> 00:22:46,770
totally compromised

00:22:48,650 --> 00:22:58,500
yeah Layton possibly the neighborhood

00:22:50,970 --> 00:23:01,950
you could try to attack surfaces yeah

00:22:58,500 --> 00:23:04,640
that's why late you just get to put you

00:23:01,950 --> 00:23:04,640
in Christie bill

00:23:12,500 --> 00:23:22,700
[Music]

00:23:13,900 --> 00:23:24,590
right yeah Dean right so the idea there

00:23:22,700 --> 00:23:27,740
is that we want to protect against other

00:23:24,590 --> 00:23:31,010
people extracting either key material so

00:23:27,740 --> 00:23:35,540
connect to other devices or algorithms

00:23:31,010 --> 00:23:38,840
out of the device the physical device

00:23:35,540 --> 00:23:41,200
ourselves we assume is going to be

00:23:38,840 --> 00:23:41,200
stolen

00:24:15,670 --> 00:24:18,939
[Music]

00:24:23,230 --> 00:24:29,060
the device you might write say a

00:24:26,360 --> 00:24:30,860
watchdog club that strokes the disk if

00:24:29,060 --> 00:24:35,900
it doesn't check in on the right network

00:24:30,860 --> 00:24:53,690
often enough but that's the thing so is

00:24:35,900 --> 00:24:56,000
this a here are the devices here here's

00:24:53,690 --> 00:25:00,230
they put them together in terms of the

00:24:56,000 --> 00:25:04,340
crypto what what this signature is

00:25:00,230 --> 00:25:08,530
policy for how is it going to be the

00:25:04,340 --> 00:25:08,530
negative house of one can be sure

00:25:13,740 --> 00:25:16,890
[Music]

00:25:18,480 --> 00:25:24,789
it is totally in scope for fedora IOT it

00:25:22,299 --> 00:25:27,000
was mostly out of scope for the security

00:25:24,789 --> 00:25:31,480
part because a lot of that is playing

00:25:27,000 --> 00:25:34,210
what we turned EF for rpm Westry which

00:25:31,480 --> 00:25:39,279
pulls down the deltas and then verifies

00:25:34,210 --> 00:25:43,419
it there I tried to focus more on how do

00:25:39,279 --> 00:25:46,149
we ensure like that our intellectual

00:25:43,419 --> 00:25:49,029
property isn't stolen and that people

00:25:46,149 --> 00:25:53,820
don't get access or data but we will

00:25:49,029 --> 00:25:53,820
focus on it just in a different context

00:25:54,929 --> 00:25:58,710
any other questions

00:26:00,360 --> 00:26:03,409

YouTube URL: https://www.youtube.com/watch?v=kat-nMyldXI


