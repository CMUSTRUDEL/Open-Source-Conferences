Title: Gating rawhide packages: things just got real! - Pierre-Yves Chibon - Flock 2019
Publication date: 2019-09-02
Playlist: Flock 2019
Description: 
	Package gating in rawhide is now a reality. Let's walk through how it came to life, how it stands today and how it will look tomorrow.
This is a major change in the packager's workflow in Fedora but it also opens the door to new ways to work in Fedora. With more automation we will free time for our contributors allowing them to invest other parts of our distribution or of the upstream ecosystem. 

--
Recordings of talks at Flock are a community effort.  Unfortunately not everything works perfectly every time. If you're interested in helping us improve, let us know.
Captions: 
	00:00:01,670 --> 00:00:05,300
thank you everyone for coming we'll get

00:00:03,920 --> 00:00:08,360
started I guess

00:00:05,300 --> 00:00:10,820
so we've here to go to speak about

00:00:08,360 --> 00:00:13,219
something big that's just landed a few

00:00:10,820 --> 00:00:18,050
weeks ago is we are finally getting

00:00:13,219 --> 00:00:19,970
right packages so we'll go to the you

00:00:18,050 --> 00:00:22,670
know the usual why do we do want to do

00:00:19,970 --> 00:00:25,369
that and what's what the challenge is

00:00:22,670 --> 00:00:28,820
and what's what we currently have what's

00:00:25,369 --> 00:00:30,920
upcoming will tell you about some of the

00:00:28,820 --> 00:00:32,330
issues that we are foreseeing you will

00:00:30,920 --> 00:00:35,180
tell us about the issues that we have

00:00:32,330 --> 00:00:37,070
not foreseen and all of us together will

00:00:35,180 --> 00:00:41,330
find our solution for making these works

00:00:37,070 --> 00:00:42,860
somehow so we are helping you you may

00:00:41,330 --> 00:00:44,420
have known me before you may have seen

00:00:42,860 --> 00:00:46,460
me at the previous vlog not one last

00:00:44,420 --> 00:00:48,800
year I work in the federal

00:00:46,460 --> 00:00:51,800
infrastructure team and I'm leading the

00:00:48,800 --> 00:00:53,690
road getting initiative and with this

00:00:51,800 --> 00:00:57,200
I'm working closely with Dominic who is

00:00:53,690 --> 00:00:59,540
going to yeah and the Fedora CI

00:00:57,200 --> 00:01:01,820
objective lead and I'm also I work for

00:00:59,540 --> 00:01:04,400
Red Hat I'm a manager and the Fedora CI

00:01:01,820 --> 00:01:05,930
space and also in the rel space for

00:01:04,400 --> 00:01:12,350
those who work for Red Hat you may have

00:01:05,930 --> 00:01:14,540
also already see me so this is nice and

00:01:12,350 --> 00:01:16,910
nice and easy you know we are we know

00:01:14,540 --> 00:01:21,200
what to talk but why are we doing this

00:01:16,910 --> 00:01:23,000
well the the answer is easy we want to

00:01:21,200 --> 00:01:24,470
say right to be more stable we don't try

00:01:23,000 --> 00:01:26,870
to be something that people can actually

00:01:24,470 --> 00:01:28,700
use on a day-to-day basis and stopped

00:01:26,870 --> 00:01:31,040
with the with the idea that right eat

00:01:28,700 --> 00:01:32,270
your babies and you should not you

00:01:31,040 --> 00:01:34,070
shouldn't touch it and it's okay to

00:01:32,270 --> 00:01:36,560
break rawhide it's okay for right to be

00:01:34,070 --> 00:01:39,200
broken four weeks in a rose because a

00:01:36,560 --> 00:01:41,510
check exactly is not just think of it as

00:01:39,200 --> 00:01:44,960
rawhide is our master branch there is a

00:01:41,510 --> 00:01:46,340
reason why you know rawhide is our

00:01:44,960 --> 00:01:48,830
master branch there is actually no

00:01:46,340 --> 00:01:50,060
reason for that but if you think of it

00:01:48,830 --> 00:01:51,560
as your master branch actually don't

00:01:50,060 --> 00:01:54,320
want to mess around to be broken all the

00:01:51,560 --> 00:01:56,000
time you have CI for that you prefix

00:01:54,320 --> 00:01:57,740
things he wants you you want to master

00:01:56,000 --> 00:01:59,659
branch to be working all the time so

00:01:57,740 --> 00:02:01,460
that's there is no reason for fedora not

00:01:59,659 --> 00:02:03,640
to have these dates as well so we want

00:02:01,460 --> 00:02:06,920
to have a more stable write of a stable

00:02:03,640 --> 00:02:09,440
master branch we want to have composed

00:02:06,920 --> 00:02:12,200
working in rawhide there is frequent

00:02:09,440 --> 00:02:14,210
time where composes in write are broken

00:02:12,200 --> 00:02:17,030
for days if not weeks in a row

00:02:14,210 --> 00:02:18,800
and when composes don't abandon right

00:02:17,030 --> 00:02:20,390
when the compost failing right that

00:02:18,800 --> 00:02:22,250
means that no updates are getting pushed

00:02:20,390 --> 00:02:24,170
which means that all the bill that we

00:02:22,250 --> 00:02:25,940
have nicely been working on all day of

00:02:24,170 --> 00:02:27,590
data to have nicely been working on are

00:02:25,940 --> 00:02:29,540
not being improved to any other people

00:02:27,590 --> 00:02:31,280
who actually ran rawhide and we do us

00:02:29,540 --> 00:02:32,750
some of these heroes and there is even

00:02:31,280 --> 00:02:35,750
one stealing in the first row here

00:02:32,750 --> 00:02:37,370
thank you Kevin for running her hide so

00:02:35,750 --> 00:02:40,580
every time we break the compost

00:02:37,370 --> 00:02:42,560
Kevin cannot get his is lettuce package

00:02:40,580 --> 00:02:44,480
so it's very sad and that's making no

00:02:42,560 --> 00:02:47,240
and when Kevin said it makes us sad as

00:02:44,480 --> 00:02:48,980
well there is a sizing on this is that

00:02:47,240 --> 00:02:50,960
if we make rawhide more stable we'll

00:02:48,980 --> 00:02:53,390
actually get some benefits at the

00:02:50,960 --> 00:02:55,400
federal branching points when you fry

00:02:53,390 --> 00:02:57,050
disable and compasses when we branch

00:02:55,400 --> 00:02:59,150
from our highlights to do our bitter

00:02:57,050 --> 00:03:01,340
release that's branch is also going to

00:02:59,150 --> 00:03:03,950
be more stable we we will stop having to

00:03:01,340 --> 00:03:06,320
run and make every effort to actually

00:03:03,950 --> 00:03:09,710
fix our branching model and get better

00:03:06,320 --> 00:03:11,780
out there just to compose and you know

00:03:09,710 --> 00:03:14,090
faster update release that's basically

00:03:11,780 --> 00:03:16,700
what I was saying in right if you don't

00:03:14,090 --> 00:03:19,460
compose it on get updates so we want to

00:03:16,700 --> 00:03:21,650
we want to avoid that there is a side

00:03:19,460 --> 00:03:23,450
effect of this is that when currently

00:03:21,650 --> 00:03:26,150
you dump something in rohana that breaks

00:03:23,450 --> 00:03:27,920
the world you know we can go on your

00:03:26,150 --> 00:03:29,690
weekends and and run and a fan or you

00:03:27,920 --> 00:03:32,120
can go on PTO and left people with a

00:03:29,690 --> 00:03:33,590
broken will ride for weeks so we want to

00:03:32,120 --> 00:03:36,710
get a little bit in the mindset of well

00:03:33,590 --> 00:03:38,570
if you break it you fix it but if you

00:03:36,710 --> 00:03:40,130
were at nÃ®mes talked yesterday humanely

00:03:38,570 --> 00:03:42,380
you may remember that he was pointing

00:03:40,130 --> 00:03:44,630
out that not everybody can fix things

00:03:42,380 --> 00:03:46,130
and that's where alec sunrise definitely

00:03:44,630 --> 00:03:48,200
right where we want to increase the

00:03:46,130 --> 00:03:50,090
teamwork in federal with we if you want

00:03:48,200 --> 00:03:51,800
if you are working on something which is

00:03:50,090 --> 00:03:53,540
of significant importance and you don't

00:03:51,800 --> 00:03:55,190
have all the access that you need to

00:03:53,540 --> 00:03:57,590
well then you need to actually reach out

00:03:55,190 --> 00:03:59,480
to people who are maintaining the part

00:03:57,590 --> 00:04:01,160
the part that you can touch and work

00:03:59,480 --> 00:04:03,830
with them to make sure that the the

00:04:01,160 --> 00:04:05,210
entire of your change with the

00:04:03,830 --> 00:04:08,720
dependencies is still working and

00:04:05,210 --> 00:04:10,460
passing but if you do have the power if

00:04:08,720 --> 00:04:11,990
you have a prevent a career well you

00:04:10,460 --> 00:04:15,560
know then you you have no excuse to

00:04:11,990 --> 00:04:19,400
actually fix what you break a bunch of

00:04:15,560 --> 00:04:21,230
our contributors are volunteers most of

00:04:19,400 --> 00:04:22,880
our contributors some of them working at

00:04:21,230 --> 00:04:24,710
reddit as well are volunteers they are

00:04:22,880 --> 00:04:27,800
contributing to federal under spare time

00:04:24,710 --> 00:04:30,530
weekend's evenings videos

00:04:27,800 --> 00:04:33,289
we cannot dump something in rawhide and

00:04:30,530 --> 00:04:34,819
let something else take dirt time off to

00:04:33,289 --> 00:04:36,979
actually fix what you break there is no

00:04:34,819 --> 00:04:38,780
reason for me to push something right

00:04:36,979 --> 00:04:40,669
that breaks the world and let someone

00:04:38,780 --> 00:04:44,300
else contribute the who is a contributor

00:04:40,669 --> 00:04:47,599
who is giving the project free time to

00:04:44,300 --> 00:04:49,430
go after my mess and clean it up so we

00:04:47,599 --> 00:04:51,770
have to be careful when people say on

00:04:49,430 --> 00:04:53,870
the on the devilish and if you follow it

00:04:51,770 --> 00:04:56,479
you you've seen that before it's okay

00:04:53,870 --> 00:04:59,240
for a lie to be broken no it's not it's

00:04:56,479 --> 00:05:01,699
not if you if you break it you fix it if

00:04:59,240 --> 00:05:03,229
it's okay for a part of right to be

00:05:01,699 --> 00:05:04,940
broken but that part of right should not

00:05:03,229 --> 00:05:06,740
affect the entire project it's not okay

00:05:04,940 --> 00:05:08,569
for me to break your work when you work

00:05:06,740 --> 00:05:09,819
when you're contributing freely on your

00:05:08,569 --> 00:05:13,250
own your own time

00:05:09,819 --> 00:05:16,340
so what are the challenges to make this

00:05:13,250 --> 00:05:18,440
happen well the first thing is a as I've

00:05:16,340 --> 00:05:20,389
started it's it has been a long it has

00:05:18,440 --> 00:05:22,219
been a long process we have been trying

00:05:20,389 --> 00:05:23,780
to make ride more stable for years now

00:05:22,219 --> 00:05:26,449
we have been speaking about getting

00:05:23,780 --> 00:05:28,490
great packages for a long time so the

00:05:26,449 --> 00:05:30,860
first challenge that we had that we were

00:05:28,490 --> 00:05:32,719
facing which is let's make it let's make

00:05:30,860 --> 00:05:36,349
it happen let's actually get right

00:05:32,719 --> 00:05:38,000
packages but we have a few we have a few

00:05:36,349 --> 00:05:39,409
conditions for that we have your

00:05:38,000 --> 00:05:41,180
requirements we want to actually fit

00:05:39,409 --> 00:05:42,979
into in the existing tooling we don't

00:05:41,180 --> 00:05:44,599
want to reinvent the wheel we want to

00:05:42,979 --> 00:05:47,779
create a new build system we don't want

00:05:44,599 --> 00:05:50,479
to create a new body part so we want to

00:05:47,779 --> 00:05:51,919
fit into our existing infrastructure we

00:05:50,479 --> 00:05:53,539
also want to interact as little as

00:05:51,919 --> 00:05:54,710
possible the packages workflow and

00:05:53,539 --> 00:05:56,930
that's something which is deter us

00:05:54,710 --> 00:05:58,909
because as I said contributors

00:05:56,930 --> 00:06:01,370
contribute under free time and the more

00:05:58,909 --> 00:06:04,099
change we impose on them the more chance

00:06:01,370 --> 00:06:05,870
we have to drive them away or it's going

00:06:04,099 --> 00:06:07,490
to take them more time it's going to be

00:06:05,870 --> 00:06:09,650
less interesting for them so we need to

00:06:07,490 --> 00:06:12,590
be careful about the experience there so

00:06:09,650 --> 00:06:14,090
we need a smooth user experience that

00:06:12,590 --> 00:06:16,310
doesn't mean there is ding there is

00:06:14,090 --> 00:06:18,979
going to be zero changes I mean we are

00:06:16,310 --> 00:06:20,180
changing the way our packaging workflow

00:06:18,979 --> 00:06:22,130
works in theory so there will be

00:06:20,180 --> 00:06:24,289
changing to the publication of workflow

00:06:22,130 --> 00:06:26,690
but we want to try to have them as

00:06:24,289 --> 00:06:28,250
minimal as possible and then there is a

00:06:26,690 --> 00:06:30,590
big challenge as well which is going to

00:06:28,250 --> 00:06:32,719
be on so on hello Don Malek Sondra and

00:06:30,590 --> 00:06:34,250
Dominic is the false positive side how

00:06:32,719 --> 00:06:36,770
do we make sure that the tests are

00:06:34,250 --> 00:06:39,259
sending proper results that we don't

00:06:36,770 --> 00:06:41,210
have packaged that are brought by

00:06:39,259 --> 00:06:42,889
because the test is faulty

00:06:41,210 --> 00:06:44,750
because the test is valid and the

00:06:42,889 --> 00:06:46,580
package should be booked that is a

00:06:44,750 --> 00:06:49,610
metaphysical question that happens with

00:06:46,580 --> 00:06:51,740
a heavy hand NEC I if you play the run

00:06:49,610 --> 00:06:53,630
we say you know you know we've testing

00:06:51,740 --> 00:06:56,660
in general you know about false positive

00:06:53,630 --> 00:06:59,720
and the issue they grow on so how do we

00:06:56,660 --> 00:07:01,849
plan to do that well we plan to do to

00:06:59,720 --> 00:07:03,830
roll out in phases we start with a

00:07:01,849 --> 00:07:05,900
smaller change and then try to go for

00:07:03,830 --> 00:07:08,479
the bigger one we want your feedback as

00:07:05,900 --> 00:07:10,130
early as possible even when we did the

00:07:08,479 --> 00:07:11,990
change proposal to fresco we did a call

00:07:10,130 --> 00:07:14,300
for feedback on the devil list and we

00:07:11,990 --> 00:07:16,340
actually got very good input there some

00:07:14,300 --> 00:07:17,690
of some of the inputs we already had in

00:07:16,340 --> 00:07:20,060
our mind but they were not properly

00:07:17,690 --> 00:07:23,120
worded in a change proposal somebody put

00:07:20,060 --> 00:07:24,860
we had missed so we added and we

00:07:23,120 --> 00:07:28,550
actually definitely want to apologize

00:07:24,860 --> 00:07:30,830
the Polish user experience so where we

00:07:28,550 --> 00:07:34,039
are we are in the we are currently

00:07:30,830 --> 00:07:36,919
getting single build updates in row

00:07:34,039 --> 00:07:39,199
height so how does it work so that's

00:07:36,919 --> 00:07:40,580
basically the entire workflow of it

00:07:39,199 --> 00:07:43,389
works it's unreal

00:07:40,580 --> 00:07:46,280
I know it's meant to be readable here

00:07:43,389 --> 00:07:48,289
just the ID you have the user is on the

00:07:46,280 --> 00:07:50,389
right you have ten systems behind it

00:07:48,289 --> 00:07:51,889
hopefully most of them as you can see

00:07:50,389 --> 00:07:54,440
the user does not interact with them

00:07:51,889 --> 00:07:56,990
this is the simplified version of it so

00:07:54,440 --> 00:07:59,180
it's the one I'm going to run user when

00:07:56,990 --> 00:08:03,560
the packet here does a build it lands

00:07:59,180 --> 00:08:05,330
into a certain tag in kochi the a tool

00:08:03,560 --> 00:08:07,430
called Robo signatory takes the build

00:08:05,330 --> 00:08:10,550
signs it and moved it to a to a

00:08:07,430 --> 00:08:13,580
secondary tag there Koji's body sees it

00:08:10,550 --> 00:08:16,789
creates an update from it waits for the

00:08:13,580 --> 00:08:19,430
CI system to report that the the build

00:08:16,789 --> 00:08:21,050
to update is the Institute and the test

00:08:19,430 --> 00:08:23,479
pass or the date is not tested and

00:08:21,050 --> 00:08:25,969
therefore it should not be get it and if

00:08:23,479 --> 00:08:29,180
if everything is good it moves into the

00:08:25,969 --> 00:08:33,229
the right built and tagged and you get

00:08:29,180 --> 00:08:35,510
your usual ride experience I'm going to

00:08:33,229 --> 00:08:38,419
be distressing a little bit from from

00:08:35,510 --> 00:08:42,610
this workflow here just to go through

00:08:38,419 --> 00:08:42,610
the decision-making so how does the

00:08:45,700 --> 00:08:50,450
just to emphasize this part the first

00:08:48,590 --> 00:08:52,730
step is one where you actually make the

00:08:50,450 --> 00:08:55,250
decision and the rest is automatic so it

00:08:52,730 --> 00:08:58,280
might be complicated but like by default

00:08:55,250 --> 00:09:01,340
these things will just go through so no

00:08:58,280 --> 00:09:06,620
no watching and shepherding things to

00:09:01,340 --> 00:09:09,170
the process let me this is definitely

00:09:06,620 --> 00:09:11,990
right it's all automatic the other thing

00:09:09,170 --> 00:09:13,910
that to consider is what changes from

00:09:11,990 --> 00:09:16,610
the current workflow before getting is

00:09:13,910 --> 00:09:18,500
basically the second box here we were we

00:09:16,610 --> 00:09:20,780
were using two tags where only we are

00:09:18,500 --> 00:09:23,930
using three we did not use body we are

00:09:20,780 --> 00:09:25,490
now using body for in right that's

00:09:23,930 --> 00:09:28,520
basically the amount of change we've

00:09:25,490 --> 00:09:31,310
done so I wanted to go a little bit on

00:09:28,520 --> 00:09:34,640
out the CI system makes a decision what

00:09:31,310 --> 00:09:37,100
can go in what cannot so we have the CI

00:09:34,640 --> 00:09:40,310
system that is running the test the test

00:09:37,100 --> 00:09:44,600
lands into an application that is called

00:09:40,310 --> 00:09:46,490
whistles to be so before I go to the to

00:09:44,600 --> 00:09:48,290
do this I'm going to destroy

00:09:46,490 --> 00:09:50,440
applications which are key and the three

00:09:48,290 --> 00:09:53,120
names to keep in mind our results EB

00:09:50,440 --> 00:09:54,980
green wave and wave a DB these are the

00:09:53,120 --> 00:09:58,340
three items which are used to make a

00:09:54,980 --> 00:10:00,050
decision so the CI systems sends to the

00:09:58,340 --> 00:10:02,720
test results two results tab it it's

00:10:00,050 --> 00:10:06,170
just a database which exposes a JSON API

00:10:02,720 --> 00:10:07,880
that says well this build passed this

00:10:06,170 --> 00:10:09,740
test this test this test is not pass

00:10:07,880 --> 00:10:11,840
that test that does does test and so on

00:10:09,740 --> 00:10:14,420
so every entry in the database is about

00:10:11,840 --> 00:10:17,270
an item that was tested code rebuildin

00:10:14,420 --> 00:10:19,280
in our case and the test that was tested

00:10:17,270 --> 00:10:20,690
and the outcome of the test as well as

00:10:19,280 --> 00:10:22,370
the URL which is indeed when you

00:10:20,690 --> 00:10:23,840
actually want to send a user well it

00:10:22,370 --> 00:10:27,200
failed and this is the log where you can

00:10:23,840 --> 00:10:29,840
find a white failed then we have Green

00:10:27,200 --> 00:10:32,180
Wave which is a it's a decision-making

00:10:29,840 --> 00:10:34,970
it's a policy engine it goes through a

00:10:32,180 --> 00:10:36,800
set of rules and based on the result it

00:10:34,970 --> 00:10:40,400
finds in result EB it makes a decision

00:10:36,800 --> 00:10:42,320
for this it has to source for making a

00:10:40,400 --> 00:10:44,810
decision one it's its own configuration

00:10:42,320 --> 00:10:47,840
file which is managed in the federal

00:10:44,810 --> 00:10:50,030
infrastructure which contains policies

00:10:47,840 --> 00:10:51,220
rules that would be applicable to every

00:10:50,030 --> 00:10:54,590
packages in Fira

00:10:51,220 --> 00:10:57,230
so if you're at David and Tim flings

00:10:54,590 --> 00:10:57,590
talk yesterday about rpm inspect if one

00:10:57,230 --> 00:10:58,440
day

00:10:57,590 --> 00:11:00,600
appearance

00:10:58,440 --> 00:11:02,220
spec becomes stable enough and readable

00:11:00,600 --> 00:11:04,380
and useful enough for the community to

00:11:02,220 --> 00:11:05,820
say well we want to rpm inspect to pass

00:11:04,380 --> 00:11:08,160
on every single package in fira

00:11:05,820 --> 00:11:09,240
we will put that in green waves on

00:11:08,160 --> 00:11:11,730
configuration file

00:11:09,240 --> 00:11:13,260
currently there is nothing in green

00:11:11,730 --> 00:11:16,350
voice configuration file everything is

00:11:13,260 --> 00:11:19,590
in this gate in the package specific so

00:11:16,350 --> 00:11:21,180
you can have per package you can make a

00:11:19,590 --> 00:11:22,830
decision per package what are the tests

00:11:21,180 --> 00:11:24,780
that I want to my package to be get it

00:11:22,830 --> 00:11:26,070
on so which means that if you don't want

00:11:24,780 --> 00:11:28,260
your package to be get it on you just

00:11:26,070 --> 00:11:30,300
don't tell Green Wave to get this that's

00:11:28,260 --> 00:11:33,210
it so it's entirely obtained under

00:11:30,300 --> 00:11:34,770
moments so you put in your diskette repo

00:11:33,210 --> 00:11:36,620
I get in the Chimel file there is

00:11:34,770 --> 00:11:38,850
documentation online on how to do that

00:11:36,620 --> 00:11:40,260
that's what I was missing I want you to

00:11:38,850 --> 00:11:43,100
add the link to that documentation in

00:11:40,260 --> 00:11:45,390
the pin the slides so I love to do that

00:11:43,100 --> 00:11:47,340
so you put a getting the channel in your

00:11:45,390 --> 00:11:49,410
diskette repo that tells green wave I

00:11:47,340 --> 00:11:51,960
want to test I want to get on these and

00:11:49,410 --> 00:11:54,690
these results when Green Wave receives a

00:11:51,960 --> 00:11:57,030
new result about your package for some

00:11:54,690 --> 00:12:00,660
CB it shakes that file and it says well

00:11:57,030 --> 00:12:03,800
are all the walls satisfied yes now I'm

00:12:00,660 --> 00:12:06,210
missing some and it will announce that

00:12:03,800 --> 00:12:08,280
but he listens to guten wave messages

00:12:06,210 --> 00:12:10,890
and every time the Green Wave announced

00:12:08,280 --> 00:12:12,420
well this bill can go through it checks

00:12:10,890 --> 00:12:15,420
is there an update corresponding to this

00:12:12,420 --> 00:12:17,760
build yes the update goes to stable is

00:12:15,420 --> 00:12:21,330
if the update is not if the bill did not

00:12:17,760 --> 00:12:24,390
pass CI then green waves body say well

00:12:21,330 --> 00:12:27,060
you know it's it blocks and the user can

00:12:24,390 --> 00:12:29,550
go and they can wave the test results so

00:12:27,060 --> 00:12:32,700
waving is basically saying well I have

00:12:29,550 --> 00:12:34,830
checked the test results and I know they

00:12:32,700 --> 00:12:37,260
fail but they should not fail this is a

00:12:34,830 --> 00:12:38,670
false negative it shouldn't it should be

00:12:37,260 --> 00:12:40,170
passing it with something in the CI

00:12:38,670 --> 00:12:42,570
system itself there was a network issue

00:12:40,170 --> 00:12:44,820
there was a drive issue there was could

00:12:42,570 --> 00:12:47,130
not talk something so we try to minimize

00:12:44,820 --> 00:12:48,839
that except that you know stringer and

00:12:47,130 --> 00:12:53,160
scat and Murphy's Law being what they

00:12:48,839 --> 00:12:55,470
are it happens one of the way we want to

00:12:53,160 --> 00:12:57,600
end up in the future avoid waving tests

00:12:55,470 --> 00:12:59,160
is being able to reach rigor test so if

00:12:57,600 --> 00:13:00,930
you have a network issue you should be

00:12:59,160 --> 00:13:02,490
able well looking at the logs this

00:13:00,930 --> 00:13:04,920
doesn't look like an error in the test

00:13:02,490 --> 00:13:07,440
so let's rerun them and see that spaz is

00:13:04,920 --> 00:13:09,240
just that time but sometime you end up

00:13:07,440 --> 00:13:10,740
in a situation where you actually want

00:13:09,240 --> 00:13:12,899
to wait the results

00:13:10,740 --> 00:13:16,350
and that's why we have a TV does you are

00:13:12,899 --> 00:13:18,890
us user you said to it to to ever DB

00:13:16,350 --> 00:13:21,330
that test result here can be ignored

00:13:18,890 --> 00:13:23,279
then green wave will receive the

00:13:21,330 --> 00:13:25,770
notification from wave a DB it will

00:13:23,279 --> 00:13:28,649
again pull the data but your your built

00:13:25,770 --> 00:13:31,470
from result CB and so well if I ignore

00:13:28,649 --> 00:13:33,870
that test everything L is clear so that

00:13:31,470 --> 00:13:35,490
Abed can go through which one body picks

00:13:33,870 --> 00:13:38,640
up the message and say idea they can go

00:13:35,490 --> 00:13:40,649
to stable so I just included some links

00:13:38,640 --> 00:13:43,350
here you probably don't want to click on

00:13:40,649 --> 00:13:45,480
them because there are there are AP is

00:13:43,350 --> 00:13:47,490
they are meant to be consumed consumed

00:13:45,480 --> 00:13:49,800
by computers and not really much by

00:13:47,490 --> 00:13:52,529
human will DB as some sort of UI not

00:13:49,800 --> 00:13:54,810
above it which makes the JSON prettier

00:13:52,529 --> 00:13:57,240
than the Green Wave and where DB which

00:13:54,810 --> 00:14:00,870
are really meant to be just used by

00:13:57,240 --> 00:14:03,270
called by by commuters but if you ever

00:14:00,870 --> 00:14:05,550
curious of where they are where they

00:14:03,270 --> 00:14:15,120
live they look like you can feel free to

00:14:05,550 --> 00:14:17,190
have a look at them maybe from my

00:14:15,120 --> 00:14:20,070
hand-wavy perspective just some of the

00:14:17,190 --> 00:14:22,350
background for this is this is actually

00:14:20,070 --> 00:14:24,570
pretty nice differentiation between the

00:14:22,350 --> 00:14:27,000
tools that implement this and the policy

00:14:24,570 --> 00:14:28,529
right so even I who don't know about

00:14:27,000 --> 00:14:30,660
these tools specifically I can go in and

00:14:28,529 --> 00:14:33,140
understand what the rules are but I can

00:14:30,660 --> 00:14:35,640
find packager I can put a rule in my

00:14:33,140 --> 00:14:39,300
package saying what I want to be gated

00:14:35,640 --> 00:14:41,760
on I have control over that as a looking

00:14:39,300 --> 00:14:44,700
at fur Dora as a whole for FS Co or the

00:14:41,760 --> 00:14:46,220
community we can set policy central

00:14:44,700 --> 00:14:48,709
policy there applies to everything

00:14:46,220 --> 00:14:54,209
without changing these tools again and

00:14:48,709 --> 00:14:56,760
as a packager and or a proven packager

00:14:54,209 --> 00:14:58,800
or whatever I can I can use a waving

00:14:56,760 --> 00:15:01,110
mechanism to say whatever these tools

00:14:58,800 --> 00:15:03,810
are telling I know better right because

00:15:01,110 --> 00:15:05,970
we we should trust our judgment and our

00:15:03,810 --> 00:15:08,190
experience here over these tools so you

00:15:05,970 --> 00:15:09,600
can that's what the way the mechanism is

00:15:08,190 --> 00:15:12,209
for so we have the we can you can set

00:15:09,600 --> 00:15:14,550
the policy for it packages destroy a

00:15:12,209 --> 00:15:17,310
wide or you have the you also have the

00:15:14,550 --> 00:15:19,020
control to wave and say say this is what

00:15:17,310 --> 00:15:20,430
the result should be and not what the

00:15:19,020 --> 00:15:23,870
tools are saying just to kind of

00:15:20,430 --> 00:15:23,870
summarize these these levels

00:15:29,100 --> 00:15:33,300
so I just want you to come back to the

00:15:31,260 --> 00:15:34,770
to the waving part a little bit so we

00:15:33,300 --> 00:15:36,560
still want this to be the last resort

00:15:34,770 --> 00:15:40,440
but we understand that sometime it's not

00:15:36,560 --> 00:15:41,970
and to make the the user experiences

00:15:40,440 --> 00:15:44,040
waving is actually pretty easy you have

00:15:41,970 --> 00:15:47,090
to do body CLI and you can just say well

00:15:44,040 --> 00:15:49,530
body updates wave and then you put the

00:15:47,090 --> 00:15:53,160
identifier of the body update and a

00:15:49,530 --> 00:15:55,410
comment on why you were being at this my

00:15:53,160 --> 00:15:56,820
favorite test when I have a test that

00:15:55,410 --> 00:15:58,020
you know goes through the entire

00:15:56,820 --> 00:16:00,060
pipeline and make sure that everything

00:15:58,020 --> 00:16:01,530
works and the comment is this is fine

00:16:00,060 --> 00:16:02,810
you know you probably want to other

00:16:01,530 --> 00:16:05,400
something a little bit more descriptive

00:16:02,810 --> 00:16:06,990
because you actually want to we want to

00:16:05,400 --> 00:16:10,170
be able to go back to these waivers and

00:16:06,990 --> 00:16:12,450
say well why was it waived it was waived

00:16:10,170 --> 00:16:13,740
because that tool did not be able to

00:16:12,450 --> 00:16:14,910
affect it because there was a networking

00:16:13,740 --> 00:16:17,420
issue because there was not right with

00:16:14,910 --> 00:16:20,850
you because I know better than the toll

00:16:17,420 --> 00:16:23,010
me as an example we use this internally

00:16:20,850 --> 00:16:25,950
as well and at least in the beginning

00:16:23,010 --> 00:16:27,900
the most common used comment for the

00:16:25,950 --> 00:16:32,580
waiver was this is an example waiver

00:16:27,900 --> 00:16:35,370
that's you can use that but like looking

00:16:32,580 --> 00:16:37,740
back things trying to understand why

00:16:35,370 --> 00:16:39,690
exactly you did waive that that test

00:16:37,740 --> 00:16:42,300
result a month ago that's gonna take

00:16:39,690 --> 00:16:44,760
some debugging so so I kind of like to

00:16:42,300 --> 00:16:46,770
do add comment or to do a description

00:16:44,760 --> 00:16:47,450
thank you don't just don't do that

00:16:46,770 --> 00:16:50,490
please

00:16:47,450 --> 00:16:53,490
and the one thing I want you to point

00:16:50,490 --> 00:16:55,980
out is that when you use a body update

00:16:53,490 --> 00:16:58,140
wave you can wave fail test but you can

00:16:55,980 --> 00:17:00,150
also wave missing tests that's

00:16:58,140 --> 00:17:02,280
especially important at this time where

00:17:00,150 --> 00:17:04,770
things are still in progress we come to

00:17:02,280 --> 00:17:07,290
trigger the test yet so if for some

00:17:04,770 --> 00:17:09,839
reasons the CI pipeline or something

00:17:07,290 --> 00:17:12,600
else broke and no results are showing up

00:17:09,839 --> 00:17:14,699
after you know a certain time you are

00:17:12,600 --> 00:17:16,770
able to say well you know what just let

00:17:14,699 --> 00:17:18,480
that up gate go through and I know that

00:17:16,770 --> 00:17:21,120
something is wrong here it has been

00:17:18,480 --> 00:17:24,630
reported let's just go through so that I

00:17:21,120 --> 00:17:26,790
can keep on with my work so we got some

00:17:24,630 --> 00:17:30,330
early feedbacks the the first one is

00:17:26,790 --> 00:17:32,130
that it works so yay because the second

00:17:30,330 --> 00:17:34,710
one was that if you do a single update

00:17:32,130 --> 00:17:35,779
in ride it currently get between five to

00:17:34,710 --> 00:17:38,479
seven emails

00:17:35,779 --> 00:17:41,059
and for people who do you know a number

00:17:38,479 --> 00:17:43,190
of significant work in rawhide that is a

00:17:41,059 --> 00:17:47,210
little bit of a little bit too much

00:17:43,190 --> 00:17:48,499
information hey emails to receive there

00:17:47,210 --> 00:17:49,729
is something else that we found out

00:17:48,499 --> 00:17:51,049
that's actually not a feedback but

00:17:49,729 --> 00:17:54,080
something we found out is that if you

00:17:51,049 --> 00:17:56,809
use being route overrides you end up I

00:17:54,080 --> 00:17:59,169
need to go back here you end up in a

00:17:56,809 --> 00:18:04,639
different tag than any of these ones

00:17:59,169 --> 00:18:06,469
which means basically nothing so in a

00:18:04,639 --> 00:18:08,389
different tag here which means nothing

00:18:06,469 --> 00:18:10,489
is moving you're built into the next

00:18:08,389 --> 00:18:12,919
stage automatically which hands up

00:18:10,489 --> 00:18:15,019
making basically the update being the

00:18:12,919 --> 00:18:17,149
build being stuck so currently this is

00:18:15,019 --> 00:18:19,909
work in progress currently do not use

00:18:17,149 --> 00:18:21,710
bill read of Rights don't you shouldn't

00:18:19,909 --> 00:18:23,629
need them because everything goes

00:18:21,710 --> 00:18:25,099
through and you don't need them if you

00:18:23,629 --> 00:18:26,809
need them that basically means you

00:18:25,099 --> 00:18:29,779
probably are looking for a multi built

00:18:26,809 --> 00:18:31,429
update situation in which case you

00:18:29,779 --> 00:18:32,960
actually don't want to obtain into

00:18:31,429 --> 00:18:35,479
getting yet because this is not

00:18:32,960 --> 00:18:37,940
currently released so we don't support

00:18:35,479 --> 00:18:39,830
that so we only support single build so

00:18:37,940 --> 00:18:41,659
if you're looking at multi bill bill

00:18:39,830 --> 00:18:45,649
Road arise there is probably something

00:18:41,659 --> 00:18:48,139
wrong here something we clearly saw it

00:18:45,649 --> 00:18:50,690
was that we released single package

00:18:48,139 --> 00:18:53,239
getting on on Wednesday and it was right

00:18:50,690 --> 00:18:57,830
in the middle of the mass release for

00:18:53,239 --> 00:19:00,529
f31 the masterbuilt and when the builds

00:18:57,830 --> 00:19:04,460
landed into the Sun and the designing

00:19:00,529 --> 00:19:07,700
tag well you know when you have twenty

00:19:04,460 --> 00:19:09,710
thousand builds robot signatory takes

00:19:07,700 --> 00:19:12,049
them one by one and where you sign yes

00:19:09,710 --> 00:19:15,169
no where you sign yes no well it takes a

00:19:12,049 --> 00:19:16,789
little bit of time and when the queue is

00:19:15,169 --> 00:19:18,529
filled with twenty thousand bills it

00:19:16,789 --> 00:19:20,779
means that you're right bills that are

00:19:18,529 --> 00:19:21,679
coming next to it so they are just one

00:19:20,779 --> 00:19:24,289
in the queue

00:19:21,679 --> 00:19:26,179
and it can take a little bit of time

00:19:24,289 --> 00:19:27,499
until you're one in the cube comes out

00:19:26,179 --> 00:19:29,389
to be the next one in the queue or the

00:19:27,499 --> 00:19:31,369
one that is currently being processed so

00:19:29,389 --> 00:19:34,279
we will need to make some adjustments

00:19:31,369 --> 00:19:35,839
about signing materials how it's going

00:19:34,279 --> 00:19:37,639
to look like we don't know yet

00:19:35,839 --> 00:19:40,729
can we have dedicated signing we don't

00:19:37,639 --> 00:19:43,669
know can we have worker based model for

00:19:40,729 --> 00:19:46,609
signing it's up in here that's something

00:19:43,669 --> 00:19:48,830
we have realized we've you know rolling

00:19:46,609 --> 00:19:49,370
this out I'm a period where you're

00:19:48,830 --> 00:19:51,530
finding me

00:19:49,370 --> 00:19:53,890
now rather than later on because that

00:19:51,530 --> 00:19:57,740
will also impact the multi build getting

00:19:53,890 --> 00:20:00,860
but that is something we need to fix on

00:19:57,740 --> 00:20:02,180
the roadmap we are still working on you

00:20:00,860 --> 00:20:04,309
know polishing the single build

00:20:02,180 --> 00:20:06,830
experience as well as working on the

00:20:04,309 --> 00:20:10,610
multi build update so I'm happy to tell

00:20:06,830 --> 00:20:12,740
you that currently in body in gates we

00:20:10,610 --> 00:20:14,840
have fixed it so that's four row height

00:20:12,740 --> 00:20:17,150
updates you will only get between two

00:20:14,840 --> 00:20:18,800
and three emails depending on if you

00:20:17,150 --> 00:20:22,130
test pass or not instead of five to

00:20:18,800 --> 00:20:24,890
seven so less image for you we may still

00:20:22,130 --> 00:20:26,690
go to reduce that we have kept some

00:20:24,890 --> 00:20:28,910
email notification because we've seen

00:20:26,690 --> 00:20:30,440
they are interesting if you know the

00:20:28,910 --> 00:20:33,140
community things that there really are

00:20:30,440 --> 00:20:35,660
not interesting then we can always look

00:20:33,140 --> 00:20:37,280
at reducing that number again we have

00:20:35,660 --> 00:20:40,160
also fixed the build with a variety show

00:20:37,280 --> 00:20:41,840
so if you end up using them you

00:20:40,160 --> 00:20:44,150
shouldn't need them again but if you do

00:20:41,840 --> 00:20:46,309
then we actually have ways to unstuck

00:20:44,150 --> 00:20:49,070
you yeah well maybe one corners on the

00:20:46,309 --> 00:20:53,000
emails what we're looking at is also to

00:20:49,070 --> 00:20:55,160
see if we have a CI dashboard you know

00:20:53,000 --> 00:20:56,809
where where is the trade off to see what

00:20:55,160 --> 00:20:58,370
is useful to people whether you want to

00:20:56,809 --> 00:20:59,990
opt into emails or rather you want to

00:20:58,370 --> 00:21:02,270
rather check on another dashboard

00:20:59,990 --> 00:21:04,700
I think that's the balance we'll have to

00:21:02,270 --> 00:21:06,170
have to find and kind of iterate on so

00:21:04,700 --> 00:21:08,960
when you sees things happening there

00:21:06,170 --> 00:21:11,870
watch the lists and give you feedback

00:21:08,960 --> 00:21:13,250
what's useful to you one other thing

00:21:11,870 --> 00:21:15,620
that we know are we are currently

00:21:13,250 --> 00:21:17,059
missing is when you create an update for

00:21:15,620 --> 00:21:19,460
a certain build you have no way of

00:21:17,059 --> 00:21:21,500
monitoring what's going on and but the

00:21:19,460 --> 00:21:23,300
CI pipeline actually announce hey I'm

00:21:21,500 --> 00:21:25,010
currently starting to work on this on

00:21:23,300 --> 00:21:26,450
this build so we actually want to be

00:21:25,010 --> 00:21:28,100
able to comment on the video update

00:21:26,450 --> 00:21:29,390
saying well hey if you're interesting

00:21:28,100 --> 00:21:31,000
this is where your tests are being

00:21:29,390 --> 00:21:33,590
running you can monitor them over there

00:21:31,000 --> 00:21:35,150
so that's something which we have in the

00:21:33,590 --> 00:21:36,530
pipeline is I haven't put it in a

00:21:35,150 --> 00:21:38,540
roadmap here but it is something which

00:21:36,530 --> 00:21:42,710
we have in our head and that we want to

00:21:38,540 --> 00:21:44,240
get sooner rather than later okay and

00:21:42,710 --> 00:21:47,420
the next big thing that we are working

00:21:44,240 --> 00:21:49,490
is the multi build update so this is

00:21:47,420 --> 00:21:51,140
again how it looks you know and again

00:21:49,490 --> 00:21:53,179
it's unreadable and again it's involves

00:21:51,140 --> 00:21:57,620
ten systems and again I have made a

00:21:53,179 --> 00:21:59,300
simplified version of it so the user has

00:21:57,620 --> 00:22:01,130
to do a little bit more work here the

00:21:59,300 --> 00:22:02,960
first step that you do is you create

00:22:01,130 --> 00:22:04,820
saitec so site AG is going to be the

00:22:02,960 --> 00:22:06,980
place where you do your work in an

00:22:04,820 --> 00:22:09,560
isolated environment from everything

00:22:06,980 --> 00:22:10,910
else in real light so that and it will

00:22:09,560 --> 00:22:13,550
contain everything you want to have

00:22:10,910 --> 00:22:15,590
tested so you create your site tag it's

00:22:13,550 --> 00:22:18,260
going to be a fat package just landed

00:22:15,590 --> 00:22:21,170
the work on this liberal Mir which I'm

00:22:18,260 --> 00:22:23,720
not saying in the audience as as pull it

00:22:21,170 --> 00:22:25,730
off so you will be able to do a third

00:22:23,720 --> 00:22:28,160
package site AG requests or create I

00:22:25,730 --> 00:22:30,260
forget exactly what was the syntax that

00:22:28,160 --> 00:22:33,350
we automatically create a site AK for

00:22:30,260 --> 00:22:36,560
you in in Kochi then you will do your

00:22:33,350 --> 00:22:38,720
usual git commit git commit git push

00:22:36,560 --> 00:22:41,420
that package build but there you need to

00:22:38,720 --> 00:22:43,610
use the - - target and use the site AG

00:22:41,420 --> 00:22:46,580
that you've created as a target for your

00:22:43,610 --> 00:22:48,620
builds once you're all done so you have

00:22:46,580 --> 00:22:50,570
you know ten five twenty Android

00:22:48,620 --> 00:22:53,600
packages that you have rebuilt you will

00:22:50,570 --> 00:22:56,000
go to Koji - sorry - body and you will

00:22:53,600 --> 00:22:57,860
say please create an update from this

00:22:56,000 --> 00:23:00,730
site tag and you will pass him the name

00:22:57,860 --> 00:23:03,260
of your site tag body will interact will

00:23:00,730 --> 00:23:05,870
interrogate Koji and say well what are

00:23:03,260 --> 00:23:07,940
the build do you see what are the bills

00:23:05,870 --> 00:23:09,620
that are presenting in that in this ayah

00:23:07,940 --> 00:23:10,100
and it will come up with the list of the

00:23:09,620 --> 00:23:13,310
bills

00:23:10,100 --> 00:23:15,230
it will move them to a dedicated sign

00:23:13,310 --> 00:23:17,450
impending tag where will be signature

00:23:15,230 --> 00:23:20,270
will be pick them up sign them move them

00:23:17,450 --> 00:23:24,140
to a testing tag which points body will

00:23:20,270 --> 00:23:26,120
pick up the list of bills again and will

00:23:24,140 --> 00:23:28,850
send a notification to the CI pipeline

00:23:26,120 --> 00:23:31,550
this I tagged with these bills are ready

00:23:28,850 --> 00:23:33,710
to be tested the CI pipeline will do its

00:23:31,550 --> 00:23:35,660
magic and will report the results EB

00:23:33,710 --> 00:23:37,790
Greenway if we come back to you use the

00:23:35,660 --> 00:23:39,710
usual suspects and when wave will tell

00:23:37,790 --> 00:23:42,830
you you know this list of bills that you

00:23:39,710 --> 00:23:46,150
tell me about this I tagged the order to

00:23:42,830 --> 00:23:46,150
go I have a question on the back

00:23:59,049 --> 00:24:01,960
so the question is I'm going to repeat

00:24:00,669 --> 00:24:03,909
the question well like Sandra picks up

00:24:01,960 --> 00:24:05,879
the microphone to answer it the question

00:24:03,909 --> 00:24:08,469
is really possible to actually define

00:24:05,879 --> 00:24:10,330
tests for set of packages rather than

00:24:08,469 --> 00:24:12,789
individual packages and now we want to

00:24:10,330 --> 00:24:14,169
do that and I'm going to say two things

00:24:12,789 --> 00:24:15,909
just before giving you the microphone

00:24:14,169 --> 00:24:17,440
first you're putting my next slide that

00:24:15,909 --> 00:24:21,159
was the very last question here and

00:24:17,440 --> 00:24:21,700
second is giving the magenta my 2x not

00:24:21,159 --> 00:24:24,309
to answer it

00:24:21,700 --> 00:24:28,690
so for now the first iteration would be

00:24:24,309 --> 00:24:31,089
just that site tag will pass if every of

00:24:28,690 --> 00:24:33,849
the packages in the site tag passes its

00:24:31,089 --> 00:24:35,710
individual gating policy so that's going

00:24:33,849 --> 00:24:38,440
to be the role because we configure

00:24:35,710 --> 00:24:42,700
policy per component but obviously it's

00:24:38,440 --> 00:24:45,700
not where we should stop and there are

00:24:42,700 --> 00:24:48,519
talks about how we implement we need

00:24:45,700 --> 00:24:51,159
more generic gating policy but we need

00:24:48,519 --> 00:24:53,979
to really work on the place for it and

00:24:51,159 --> 00:24:58,210
we like way how to define it so

00:24:53,979 --> 00:25:01,179
basically we it's not technically too

00:24:58,210 --> 00:25:04,349
complicated to define additional rules

00:25:01,179 --> 00:25:07,479
but we really need to figure out the

00:25:04,349 --> 00:25:09,909
user experience around it where to put

00:25:07,479 --> 00:25:12,580
it how to update it how people are going

00:25:09,909 --> 00:25:15,809
to manage that so if you interested in

00:25:12,580 --> 00:25:18,639
this topic follow fedora CI fedora devel

00:25:15,809 --> 00:25:23,440
conversations and provide feedback and

00:25:18,639 --> 00:25:25,809
participate I think one one aspect also

00:25:23,440 --> 00:25:28,419
think about there is why would you want

00:25:25,809 --> 00:25:30,519
specific tests for a set of updates like

00:25:28,419 --> 00:25:32,920
why should they not be part of the

00:25:30,519 --> 00:25:36,019
individual packages as well

00:25:32,920 --> 00:25:36,019
[Music]

00:25:44,530 --> 00:25:49,000
yeah so the answer receiver was that

00:25:47,740 --> 00:25:50,800
they're they're ecosystems out there

00:25:49,000 --> 00:25:53,800
that have whole set of tests I don't

00:25:50,800 --> 00:25:57,520
know that we had like the talk yesterday

00:25:53,800 --> 00:26:00,070
about the fedora server say that came up

00:25:57,520 --> 00:26:03,310
as well so I think that the trade-off

00:26:00,070 --> 00:26:05,140
there to think about is is it is it

00:26:03,310 --> 00:26:07,510
another test I want to add to specific

00:26:05,140 --> 00:26:10,420
packages or sets of packages or is it

00:26:07,510 --> 00:26:12,970
something I want to monitor specifically

00:26:10,420 --> 00:26:15,550
as a separate test for example saying I

00:26:12,970 --> 00:26:18,100
have rpm inspect running the entire

00:26:15,550 --> 00:26:20,200
distro I have the CI pipeline running

00:26:18,100 --> 00:26:22,090
for all tests that have pilot for all

00:26:20,200 --> 00:26:23,470
packages that have tests and disc it but

00:26:22,090 --> 00:26:25,810
I might also have a separate test

00:26:23,470 --> 00:26:28,300
that's called Fedora server that

00:26:25,810 --> 00:26:29,830
provides feedback if any number of

00:26:28,300 --> 00:26:31,240
packages are or a specific set of

00:26:29,830 --> 00:26:32,440
packers are involved so I think there

00:26:31,240 --> 00:26:35,860
are multiple models that we can think

00:26:32,440 --> 00:26:37,240
about and for now I would say what you

00:26:35,860 --> 00:26:42,420
can do is definitely add test the

00:26:37,240 --> 00:26:42,420
package is involved and start from there

00:26:50,290 --> 00:26:55,850
so there are things that have been

00:26:53,090 --> 00:26:58,760
refreshing about getting composes and I

00:26:55,850 --> 00:27:00,380
actually believe and you can correct me

00:26:58,760 --> 00:27:02,540
if I'm wrong that Green Wave already

00:27:00,380 --> 00:27:07,460
pre-tests and publishes decisions on

00:27:02,540 --> 00:27:09,560
composes if they can because Rewa not so

00:27:07,460 --> 00:27:12,020
so Morin confirms that actually our

00:27:09,560 --> 00:27:13,730
composites are educating with the same

00:27:12,020 --> 00:27:17,090
tolling yeah so so getting compose is

00:27:13,730 --> 00:27:18,620
definitely a good augmentation I think

00:27:17,090 --> 00:27:20,420
what it shouldn't replace is testing

00:27:18,620 --> 00:27:23,150
before something actually lands because

00:27:20,420 --> 00:27:25,850
this is the point where we can effect a

00:27:23,150 --> 00:27:27,140
change before it breaks someone else and

00:27:25,850 --> 00:27:29,060
I think that's that's a place we all

00:27:27,140 --> 00:27:31,090
want to be where we're not under time

00:27:29,060 --> 00:27:31,090
pressure

00:27:59,990 --> 00:28:09,840
there was another question here so the

00:28:08,220 --> 00:28:12,630
question is what is the expectation for

00:28:09,840 --> 00:28:16,590
how much time these test runs so I have

00:28:12,630 --> 00:28:17,940
I have a package that is so the federal

00:28:16,590 --> 00:28:20,070
gas our easy fix if you want to look it

00:28:17,940 --> 00:28:22,260
up it has a very simple test that

00:28:20,070 --> 00:28:25,140
general that or all of these stars is

00:28:22,260 --> 00:28:26,910
calling the fail module from unstable so

00:28:25,140 --> 00:28:29,700
it just you know directly start and

00:28:26,910 --> 00:28:32,940
crash so that I can taste the actual

00:28:29,700 --> 00:28:35,720
gating mechanism and that overhead is

00:28:32,940 --> 00:28:35,720
about eight minutes

00:29:12,000 --> 00:29:16,090
so the question was about how long

00:29:14,679 --> 00:29:18,549
should ashley tests run what's

00:29:16,090 --> 00:29:21,519
acceptable I think that varies per

00:29:18,549 --> 00:29:24,610
package because essentially what you're

00:29:21,519 --> 00:29:26,919
doing as a maintainer is you're saying

00:29:24,610 --> 00:29:28,360
I'm willing to wait this long for my

00:29:26,919 --> 00:29:30,190
change to go in like how sure do you

00:29:28,360 --> 00:29:32,289
want to be I think the answer is

00:29:30,190 --> 00:29:35,500
probably going to be different whether

00:29:32,289 --> 00:29:38,110
you tests bash or whether you test GCC

00:29:35,500 --> 00:29:39,299
or something that's more complex and

00:29:38,110 --> 00:29:50,950
that involves a lot of other components

00:29:39,299 --> 00:29:52,389
so I think I think I think we're that

00:29:50,950 --> 00:29:56,110
the policy so the question was about the

00:29:52,389 --> 00:29:58,419
policy where this comes in is in and

00:29:56,110 --> 00:29:59,799
I'll touch on this and the Ferdowsi

00:29:58,419 --> 00:30:02,320
object to talk later and we talk about

00:29:59,799 --> 00:30:04,090
reverse dependency testing and when you

00:30:02,320 --> 00:30:08,350
actually start testing or running tests

00:30:04,090 --> 00:30:10,240
from other packages the short answer is

00:30:08,350 --> 00:30:12,370
as long as it needs is it'll take as

00:30:10,240 --> 00:30:14,220
long as it needs to take a good

00:30:12,370 --> 00:30:16,299
guideline is the like this is

00:30:14,220 --> 00:30:19,000
essentially if we look at this as part

00:30:16,299 --> 00:30:22,240
of the developer workflow if it takes

00:30:19,000 --> 00:30:24,580
more than an hour or two that's that

00:30:22,240 --> 00:30:27,250
starts to feel really long more than a

00:30:24,580 --> 00:30:30,159
day that's really questionable so how

00:30:27,250 --> 00:30:32,049
useful that feedback is but it's that

00:30:30,159 --> 00:30:33,220
shouldn't be like for example if the

00:30:32,049 --> 00:30:35,830
infrastructure goes down you shouldn't

00:30:33,220 --> 00:30:38,110
say oh this takes too long let's just

00:30:35,830 --> 00:30:39,700
wait everything like that's also the

00:30:38,110 --> 00:30:41,080
flipside right so that's why the

00:30:39,700 --> 00:30:43,830
guideline is still as long as it needs

00:30:41,080 --> 00:30:47,350
to take if you think a test is essential

00:30:43,830 --> 00:30:50,230
then that's how long it takes if you say

00:30:47,350 --> 00:30:52,769
it's not essential then it doesn't need

00:30:50,230 --> 00:30:52,769
to be included

00:31:46,870 --> 00:31:52,180
well differentiation between rare and

00:31:49,820 --> 00:31:54,860
and not sir Ayres is about one I think

00:31:52,180 --> 00:31:56,960
but the question is but you shouldn't

00:31:54,860 --> 00:31:58,580
ask wait the question you have to ask

00:31:56,960 --> 00:32:01,550
yourself here is not how long should I

00:31:58,580 --> 00:32:03,500
have to wait but what happens if I don't

00:32:01,550 --> 00:32:07,660
catch something and everyone else can't

00:32:03,500 --> 00:32:09,920
use rawhide because of what I did I

00:32:07,660 --> 00:32:11,690
think that's that's Donna spooks deaths

00:32:09,920 --> 00:32:13,370
that's the hidden costs right blocking

00:32:11,690 --> 00:32:20,590
everyone else and breaking everyone

00:32:13,370 --> 00:32:23,660
else's workflow I would question the

00:32:20,590 --> 00:32:26,390
claim that there should be unified

00:32:23,660 --> 00:32:29,960
policy on the time of testing actually

00:32:26,390 --> 00:32:33,440
because the good thing about gating is

00:32:29,960 --> 00:32:36,710
that the well you haven't landed in a

00:32:33,440 --> 00:32:39,320
compose yet this is your part of the

00:32:36,710 --> 00:32:41,690
process and you don't block other people

00:32:39,320 --> 00:32:45,320
from doing their job of your stuff only

00:32:41,690 --> 00:32:47,990
composed so it actually gives you a

00:32:45,320 --> 00:32:52,010
freedom to decide for yourself and for

00:32:47,990 --> 00:32:55,460
your level of involvement how much you

00:32:52,010 --> 00:32:58,340
are ok with waiting and how beneficial

00:32:55,460 --> 00:33:00,980
these tests are for you so I would I

00:32:58,340 --> 00:33:04,130
would say our current framework allows

00:33:00,980 --> 00:33:07,040
us if full flexibility we can use

00:33:04,130 --> 00:33:09,380
various CI systems in various cases you

00:33:07,040 --> 00:33:12,140
and configure them per component per

00:33:09,380 --> 00:33:15,530
group of component so where is the

00:33:12,140 --> 00:33:17,570
freedom and that we need to have certain

00:33:15,530 --> 00:33:21,650
guidelines on generic tests but for

00:33:17,570 --> 00:33:24,920
companies specific tests we actually can

00:33:21,650 --> 00:33:44,840
allow very different policies for people

00:33:24,920 --> 00:33:46,850
I would I would say this is since when

00:33:44,840 --> 00:33:48,710
it comes to package time the time it

00:33:46,850 --> 00:33:50,000
takes to run the test I would say since

00:33:48,710 --> 00:33:51,560
the tests are in your hands it depends

00:33:50,000 --> 00:33:53,690
on how long you're willing to wait to

00:33:51,560 --> 00:33:56,360
wait for it if you start to affect other

00:33:53,690 --> 00:33:58,940
people because for example you in you

00:33:56,360 --> 00:34:02,330
mix you make it so that your test runs

00:33:58,940 --> 00:34:04,130
on your dependencies without consulting

00:34:02,330 --> 00:34:05,960
with the people that are maintaining

00:34:04,130 --> 00:34:07,610
these dependencies then it's probably a

00:34:05,960 --> 00:34:09,320
problem but that's something that you

00:34:07,610 --> 00:34:13,130
need to communicate with these people

00:34:09,320 --> 00:34:15,380
and you say well free IPA tests run for

00:34:13,130 --> 00:34:17,480
6 hours and that's only impact and not

00:34:15,380 --> 00:34:19,640
people that are working on Vipp IPA are

00:34:17,480 --> 00:34:22,010
ok with that then I think it's it's fine

00:34:19,640 --> 00:34:23,570
if the OpenSSL for sale well I don't

00:34:22,010 --> 00:34:26,150
want to wait for 6 hours and I would

00:34:23,570 --> 00:34:27,740
rather that we do the one hour side then

00:34:26,150 --> 00:34:29,600
maybe you can do the one hour site for

00:34:27,740 --> 00:34:31,480
the OpenSSL and the six hours for a few

00:34:29,600 --> 00:34:40,310
I think there it's a matter of

00:34:31,480 --> 00:34:43,540
communication so what I think two things

00:34:40,310 --> 00:34:45,919
here one is what will probably help is

00:34:43,540 --> 00:34:47,690
if especially if you have do more

00:34:45,919 --> 00:34:50,750
testing and become more involved let's

00:34:47,690 --> 00:34:52,669
look at the the Fedora CI cig I kind of

00:34:50,750 --> 00:34:54,440
have that exchange with others who do

00:34:52,669 --> 00:34:57,530
this to kind of see what works what

00:34:54,440 --> 00:35:01,010
doesn't work and also based on my

00:34:57,530 --> 00:35:02,590
experience at least the the lowest

00:35:01,010 --> 00:35:05,360
amount of time you should wait is

00:35:02,590 --> 00:35:08,570
slightly more than the river then the

00:35:05,360 --> 00:35:09,590
developers are comfortable with if you

00:35:08,570 --> 00:35:11,090
ask someone how long you want to wait

00:35:09,590 --> 00:35:17,830
for test results you should definitely

00:35:11,090 --> 00:35:17,830
wait longer that's kind of lower bar

00:35:29,760 --> 00:35:34,690
so how could so you're thinking that

00:35:32,500 --> 00:35:36,750
something that so the question is what

00:35:34,690 --> 00:35:43,990
happened with what happened if free IP a

00:35:36,750 --> 00:35:46,660
lens in right what what happen if

00:35:43,990 --> 00:35:49,210
something with a long test sweet lens in

00:35:46,660 --> 00:35:50,770
the right and brakes ride in the way

00:35:49,210 --> 00:35:52,930
that was not caught by the long test

00:35:50,770 --> 00:35:56,650
wish so you have to wait for X amount of

00:35:52,930 --> 00:36:02,760
time before a new a new build arise and

00:35:56,650 --> 00:36:05,470
lens and I would point out that there is

00:36:02,760 --> 00:36:08,230
you can always wave missing results

00:36:05,470 --> 00:36:13,210
right for example if something if you

00:36:08,230 --> 00:36:20,530
need to go something quickly through you

00:36:13,210 --> 00:36:23,500
can wave missing results of course with

00:36:20,530 --> 00:36:25,540
the caveat that saying let me just add

00:36:23,500 --> 00:36:27,910
this quick fix that only fix one problem

00:36:25,540 --> 00:36:30,460
definitely not introduce more and I

00:36:27,910 --> 00:36:32,050
would I would recommend that you run at

00:36:30,460 --> 00:36:34,540
least a basic set of tests and use

00:36:32,050 --> 00:36:36,490
judgment before waving some like it's a

00:36:34,540 --> 00:36:38,740
valid case of waving I'm just saying you

00:36:36,490 --> 00:36:40,540
should like especially when you use

00:36:38,740 --> 00:36:42,849
reasons as let me just do this really

00:36:40,540 --> 00:36:45,160
quick or there's a deadline or let me

00:36:42,849 --> 00:36:50,190
just add this one fix those are classic

00:36:45,160 --> 00:36:52,690
cases of oops so the the the

00:36:50,190 --> 00:36:55,240
complimentary version of this is if ride

00:36:52,690 --> 00:36:56,920
is working for six hours it's still

00:36:55,240 --> 00:37:01,410
better than the state it is today where

00:36:56,920 --> 00:37:01,410
it it can end up being working for weeks

00:37:09,680 --> 00:37:21,119
so the question is is possible to cancel

00:37:12,479 --> 00:37:23,430
a build process when it's being so it

00:37:21,119 --> 00:37:26,279
has already been built I would say if

00:37:23,430 --> 00:37:28,319
you burn the release and just resubmit

00:37:26,279 --> 00:37:29,999
it the old one will bit the door one

00:37:28,319 --> 00:37:32,880
will still just test weight will still

00:37:29,999 --> 00:37:34,769
continue but the the new one will be

00:37:32,880 --> 00:37:37,249
will take procedure or precedence over

00:37:34,769 --> 00:37:37,249
the old one

00:37:40,459 --> 00:37:45,539
that's decision we that's an

00:37:43,529 --> 00:37:47,099
optimization for the seei pipeline which

00:37:45,539 --> 00:37:50,789
we may want to look at at one point

00:37:47,099 --> 00:37:56,939
although yeah that's something we can

00:37:50,789 --> 00:38:00,660
discuss question and I never grow to a

00:37:56,939 --> 00:38:03,619
gating test so I created getting a mold

00:38:00,660 --> 00:38:06,869
test you know how can I trigger it

00:38:03,619 --> 00:38:08,939
without actually building the built-in

00:38:06,869 --> 00:38:11,430
body somewhere like when I'm writing

00:38:08,939 --> 00:38:14,579
spec I will locally built-in walk can I

00:38:11,430 --> 00:38:17,009
somehow trigger the test so I know that

00:38:14,579 --> 00:38:18,539
I've wrote it correctly so the question

00:38:17,009 --> 00:38:19,559
is yes sorry yeah the microphones are

00:38:18,539 --> 00:38:24,989
probably don't need to repeat the

00:38:19,559 --> 00:38:28,739
question I thought so there are several

00:38:24,989 --> 00:38:30,660
options we still are lagging behind with

00:38:28,739 --> 00:38:34,829
documenting them properly but we will

00:38:30,660 --> 00:38:37,549
work with it so you can run you can

00:38:34,829 --> 00:38:40,559
create full requesting picure which will

00:38:37,549 --> 00:38:43,049
be used by CI systems and they will

00:38:40,559 --> 00:38:45,269
provide feedback on the pull request so

00:38:43,049 --> 00:38:47,579
you will get your test results oh no it

00:38:45,269 --> 00:38:50,819
was a flag on a pull request you can

00:38:47,579 --> 00:38:52,949
also run screech builds and I think some

00:38:50,819 --> 00:38:54,809
of the CI systems are trigger transcript

00:38:52,949 --> 00:39:00,269
bills but probably not all of them right

00:38:54,809 --> 00:39:02,910
now and you can run the test locally but

00:39:00,269 --> 00:39:06,929
you need to follow a dog for that which

00:39:02,910 --> 00:39:08,729
we're going to publish there is some

00:39:06,929 --> 00:39:12,119
documentation on how to run the test

00:39:08,729 --> 00:39:13,499
locally I think which there is probably

00:39:12,119 --> 00:39:14,910
improvement to due to the documentation

00:39:13,499 --> 00:39:17,219
and I think we should also look at

00:39:14,910 --> 00:39:17,950
providing or some sort of wrapper to a

00:39:17,219 --> 00:39:19,570
pond

00:39:17,950 --> 00:39:21,930
undoing this but what we don't have

00:39:19,570 --> 00:39:24,520
right now as far as I knows proper

00:39:21,930 --> 00:39:26,020
testing and pre validation of the actual

00:39:24,520 --> 00:39:26,710
definition I think for yourselves what

00:39:26,020 --> 00:39:29,950
you're asking

00:39:26,710 --> 00:39:35,050
yeah there is no lint for the Donnell

00:39:29,950 --> 00:39:38,109
files so so your follow up already given

00:39:35,050 --> 00:39:39,570
us a quite a bit of feedback here there

00:39:38,109 --> 00:39:41,740
are some things that we are aware of

00:39:39,570 --> 00:39:43,750
especially we've got the two the multi

00:39:41,740 --> 00:39:44,829
build there is a question of site AG

00:39:43,750 --> 00:39:47,470
proliferation

00:39:44,829 --> 00:39:49,390
how is Kochi going to handle this if a

00:39:47,470 --> 00:39:52,859
lot of people are using Sai tags in

00:39:49,390 --> 00:39:55,599
write to do their development work there

00:39:52,859 --> 00:39:56,980
we got something which we will need to

00:39:55,599 --> 00:40:00,220
test and see how that beers

00:39:56,980 --> 00:40:02,170
I mean if everybody uses Sai tag to do

00:40:00,220 --> 00:40:03,400
the work I think this is a good problem

00:40:02,170 --> 00:40:05,290
to have

00:40:03,400 --> 00:40:06,849
but that would rather that we anticipate

00:40:05,290 --> 00:40:08,980
it a little bit before then we actually

00:40:06,849 --> 00:40:11,380
hit the wall because Koji is not able to

00:40:08,980 --> 00:40:13,810
manage that there is a big question

00:40:11,380 --> 00:40:15,910
about merging the Sai tags how do we

00:40:13,810 --> 00:40:17,740
result conflicting builds how do we

00:40:15,910 --> 00:40:20,140
provide feedback to the user with

00:40:17,740 --> 00:40:21,430
instructions on how to fix that there is

00:40:20,140 --> 00:40:23,829
the question about race condition

00:40:21,430 --> 00:40:25,869
between Koji and body because body will

00:40:23,829 --> 00:40:27,849
store the list of bills that are present

00:40:25,869 --> 00:40:30,099
in this I tagged and that's what it will

00:40:27,849 --> 00:40:32,170
send to the CI system and that's what it

00:40:30,099 --> 00:40:34,359
will receive information about and what

00:40:32,170 --> 00:40:36,339
happens if just before making the

00:40:34,359 --> 00:40:38,349
decision the user realized that a

00:40:36,339 --> 00:40:40,030
something is broken I can I can or I've

00:40:38,349 --> 00:40:42,490
missed that one package and I can push

00:40:40,030 --> 00:40:44,319
it as well then suddenly you have one

00:40:42,490 --> 00:40:46,119
more built in your site tag that body

00:40:44,319 --> 00:40:48,579
was not aware of so we need to be

00:40:46,119 --> 00:40:50,950
careful very careful your being being

00:40:48,579 --> 00:40:53,829
sure that what we what body pushes to

00:40:50,950 --> 00:40:56,140
stable is exactly what what is present

00:40:53,829 --> 00:40:58,180
in the site AG and there is no we try to

00:40:56,140 --> 00:41:00,760
minimize the possibility or first

00:40:58,180 --> 00:41:02,740
condition between the two here then

00:41:00,760 --> 00:41:04,599
there is the entire question that Stefan

00:41:02,740 --> 00:41:07,660
has already raised was how do we test

00:41:04,599 --> 00:41:09,970
site acts we considered and the sum of

00:41:07,660 --> 00:41:12,160
all individual package tests present in

00:41:09,970 --> 00:41:14,230
the site AG can we create site like

00:41:12,160 --> 00:41:15,400
specific tests how do we handle that so

00:41:14,230 --> 00:41:18,550
I'm not going to go back to it because

00:41:15,400 --> 00:41:20,560
Eric's on record it we solve some point

00:41:18,550 --> 00:41:22,030
of attention for testing itself and I'm

00:41:20,560 --> 00:41:23,440
going to let the Dominican that's one

00:41:22,030 --> 00:41:26,140
there are maybe just two atoms the

00:41:23,440 --> 00:41:27,579
previous slide so the goal here is not

00:41:26,140 --> 00:41:29,470
to have something that's perfect

00:41:27,579 --> 00:41:31,360
right we want to have something that

00:41:29,470 --> 00:41:33,070
improves stability

00:41:31,360 --> 00:41:35,950
makes things makes our world a better

00:41:33,070 --> 00:41:37,660
place and there will be a lot of points

00:41:35,950 --> 00:41:39,940
where we can improve this and I think if

00:41:37,660 --> 00:41:41,770
we iterate together it'll be better but

00:41:39,940 --> 00:41:43,780
that's like the goal is not to wait

00:41:41,770 --> 00:41:45,100
until everything is finished then have

00:41:43,780 --> 00:41:48,100
the system that solves all the problems

00:41:45,100 --> 00:41:51,070
that would probably take a long time to

00:41:48,100 --> 00:41:52,120
wait for you mean wait until everything

00:41:51,070 --> 00:41:57,060
is finished and then the diverter system

00:41:52,120 --> 00:42:02,320
that's all - Nolan the problem exactly

00:41:57,060 --> 00:42:06,520
so yeah we're testing there are a lot of

00:42:02,320 --> 00:42:08,350
things here that a lot of aspects that I

00:42:06,520 --> 00:42:09,700
get to think about like when we do have

00:42:08,350 --> 00:42:13,000
tests we have to think about stability

00:42:09,700 --> 00:42:15,570
right it's like how stable are our tests

00:42:13,000 --> 00:42:18,750
how stable is the testing infrastructure

00:42:15,570 --> 00:42:20,680
how reliable are things all of these

00:42:18,750 --> 00:42:21,850
player roles some of these we can

00:42:20,680 --> 00:42:24,250
influence some of these you can

00:42:21,850 --> 00:42:26,020
influence some of these are easier to

00:42:24,250 --> 00:42:28,930
influence the others so that's just I

00:42:26,020 --> 00:42:31,720
mean we like feedbacks good on these

00:42:28,930 --> 00:42:34,710
things but it's we have to attack those

00:42:31,720 --> 00:42:37,720
specific problems to solve them I think

00:42:34,710 --> 00:42:40,420
the impact of these tests

00:42:37,720 --> 00:42:42,940
something to keep in mind it's like when

00:42:40,420 --> 00:42:45,100
you when you do this of course you're

00:42:42,940 --> 00:42:47,830
slowing down individual development

00:42:45,100 --> 00:42:50,350
package development the benefit is not

00:42:47,830 --> 00:42:53,170
breaking others and giving yourself the

00:42:50,350 --> 00:42:56,710
time to fix things address the address

00:42:53,170 --> 00:42:59,190
issues but also as we as we ramp up but

00:42:56,710 --> 00:43:01,480
as you contribute to tests think about

00:42:59,190 --> 00:43:03,520
what does this do for others if this is

00:43:01,480 --> 00:43:06,550
run as a reverse dependency test other

00:43:03,520 --> 00:43:08,980
packages can they can people understand

00:43:06,550 --> 00:43:10,240
the results can they can they like do

00:43:08,980 --> 00:43:12,580
they know what this does can they

00:43:10,240 --> 00:43:14,140
interpret the results how can they how

00:43:12,580 --> 00:43:20,380
can others contribute if they see an

00:43:14,140 --> 00:43:22,150
easy fix we are aware that we have more

00:43:20,380 --> 00:43:26,800
than one architecture that fedora runs

00:43:22,150 --> 00:43:28,330
on so some tests do do a four door test

00:43:26,800 --> 00:43:31,690
for a multi arch right now I don't think

00:43:28,330 --> 00:43:34,840
any do right now that is definitely

00:43:31,690 --> 00:43:36,790
something we want to do it is a question

00:43:34,840 --> 00:43:39,580
of prioritization so if you have a case

00:43:36,790 --> 00:43:42,940
where that is really important you can

00:43:39,580 --> 00:43:44,830
reach out to us and the answer will most

00:43:42,940 --> 00:43:45,190
likely contain somewhere the word can

00:43:44,830 --> 00:43:50,380
she be

00:43:45,190 --> 00:43:54,309
and please so so that is we are aware

00:43:50,380 --> 00:43:56,380
that is a thing but coverage and getting

00:43:54,309 --> 00:43:59,140
things in at least for one architecture

00:43:56,380 --> 00:44:00,609
is a priority we made so if you have

00:43:59,140 --> 00:44:05,530
feedback on that decision please reach

00:44:00,609 --> 00:44:07,510
out to us maintainability it is with

00:44:05,530 --> 00:44:10,780
tests I'll probably get to that a bit

00:44:07,510 --> 00:44:13,599
more in the SI objective talk at 3:30

00:44:10,780 --> 00:44:15,520
but think about how maintainable tests

00:44:13,599 --> 00:44:16,660
are like if you add something especially

00:44:15,520 --> 00:44:18,520
if you add that contribute test another

00:44:16,660 --> 00:44:20,559
package or it takes something to the

00:44:18,520 --> 00:44:22,839
upstream think about what would it take

00:44:20,559 --> 00:44:24,640
to maintain that does it make sense can

00:44:22,839 --> 00:44:27,640
i against something that exists can't or

00:44:24,640 --> 00:44:29,530
even can I take my tests upstream even

00:44:27,640 --> 00:44:31,450
further upstream fedora the third

00:44:29,530 --> 00:44:34,390
further upstream the better for you

00:44:31,450 --> 00:44:37,539
usually and otherwise the same

00:44:34,390 --> 00:44:40,539
principles as with other code apply like

00:44:37,539 --> 00:44:42,190
how to write maintainable code Marty

00:44:40,539 --> 00:44:45,220
come to the the connection to upstream

00:44:42,190 --> 00:44:47,559
and of course we are aware that we don't

00:44:45,220 --> 00:44:51,400
just have packages but also modules and

00:44:47,559 --> 00:44:54,460
containers and these are also tested but

00:44:51,400 --> 00:44:56,589
to different extents because the the

00:44:54,460 --> 00:44:58,240
infrastructure that is tied to those

00:44:56,589 --> 00:45:01,260
it's just different in some cases so

00:44:58,240 --> 00:45:03,460
this is mostly a question of priorities

00:45:01,260 --> 00:45:06,369
not that we think one is more important

00:45:03,460 --> 00:45:08,559
than the other just that we have more

00:45:06,369 --> 00:45:10,930
rpms right now and they're also used for

00:45:08,559 --> 00:45:13,359
modules and containers and so it seems a

00:45:10,930 --> 00:45:18,190
logical choice to start with the

00:45:13,359 --> 00:45:21,010
packages and with this well you've

00:45:18,190 --> 00:45:23,319
already been very helpful but we would

00:45:21,010 --> 00:45:26,799
like to invite you to help us more we

00:45:23,319 --> 00:45:28,270
need more more testers give us more take

00:45:26,799 --> 00:45:29,770
a look at the current workload tell us

00:45:28,270 --> 00:45:31,210
what's right about it tell us what's

00:45:29,770 --> 00:45:34,240
wrong about it don't forget the first

00:45:31,210 --> 00:45:38,020
part please if you want to test the

00:45:34,240 --> 00:45:40,240
multi builds reach out to us we will be

00:45:38,020 --> 00:45:42,789
looking at deploying this in staging in

00:45:40,240 --> 00:45:44,710
the coming months so if you if you're

00:45:42,789 --> 00:45:46,690
interesting to do to do this if you have

00:45:44,710 --> 00:45:50,410
a set of tests or packages you want to

00:45:46,690 --> 00:45:52,299
be looking at testing yeah again reach

00:45:50,410 --> 00:45:54,309
out to us we work with you we will see

00:45:52,299 --> 00:45:57,190
how to get this working and staging with

00:45:54,309 --> 00:45:58,500
you this is going to be an you know a

00:45:57,190 --> 00:46:00,390
great friend right

00:45:58,500 --> 00:46:02,340
so don't hesitate give us your feedback

00:46:00,390 --> 00:46:04,320
that's that's the main testament of

00:46:02,340 --> 00:46:06,720
thing try try it give us a feedback tell

00:46:04,320 --> 00:46:08,400
us what works what doesn't and and tell

00:46:06,720 --> 00:46:11,880
us how we can improve it and and also

00:46:08,400 --> 00:46:13,859
the your workflows right think about the

00:46:11,880 --> 00:46:15,720
poor like Sano said said that the

00:46:13,859 --> 00:46:18,510
freedom you have to choose what tests

00:46:15,720 --> 00:46:21,210
you run how much to run where to run

00:46:18,510 --> 00:46:23,070
them use that to decide what would fit

00:46:21,210 --> 00:46:24,780
your workflow and then if you're unsure

00:46:23,070 --> 00:46:27,270
how that fits with what we've

00:46:24,780 --> 00:46:29,280
implemented talk to us and we will try

00:46:27,270 --> 00:46:31,080
to help you or we will help you figure

00:46:29,280 --> 00:46:33,720
out whether that fits into what we've

00:46:31,080 --> 00:46:36,599
built if it doesn't fit do we need to

00:46:33,720 --> 00:46:38,040
change what we've built maybe or maybe

00:46:36,599 --> 00:46:39,869
we have suggestions and what you can

00:46:38,040 --> 00:46:43,859
could do differently and we can talk

00:46:39,869 --> 00:46:45,840
about how we can make it work anyway

00:46:43,859 --> 00:47:09,180
Jase we would like to thank you and take

00:46:45,840 --> 00:47:11,910
any questions left so the question is

00:47:09,180 --> 00:47:14,310
what happens when the tests fail if I do

00:47:11,910 --> 00:47:16,380
a body wave they will buddy updates wave

00:47:14,310 --> 00:47:18,330
what happens so when you do Budi a date

00:47:16,380 --> 00:47:20,820
wave which what you're saying is you're

00:47:18,330 --> 00:47:24,390
actually sending a request to waver DB

00:47:20,820 --> 00:47:27,150
by your body to say well wave the test

00:47:24,390 --> 00:47:29,310
the to fail test so you can when you do

00:47:27,150 --> 00:47:30,960
body update wave you can specify your

00:47:29,310 --> 00:47:33,930
single test you can specify all the

00:47:30,960 --> 00:47:37,380
tests which is the default whether they

00:47:33,930 --> 00:47:39,300
are missing or just failed so you're

00:47:37,380 --> 00:47:42,420
sending something to waver DB whoever DB

00:47:39,300 --> 00:47:44,490
will send a message that there was a new

00:47:42,420 --> 00:47:47,280
waiver I did when wave will pick this up

00:47:44,490 --> 00:47:48,720
and say well this this waiver concern

00:47:47,280 --> 00:47:50,580
status result that concerned this

00:47:48,720 --> 00:47:52,230
package whatever the world for that

00:47:50,580 --> 00:47:54,990
package what for the test result for

00:47:52,230 --> 00:47:56,280
that package if I ignore that result

00:47:54,990 --> 00:47:58,800
that I was told that I was just taught

00:47:56,280 --> 00:48:01,109
to ignore what's the outcome of it if if

00:47:58,800 --> 00:48:03,300
it still falls then it's nothing's gonna

00:48:01,109 --> 00:48:05,310
happen if it becomes true the package

00:48:03,300 --> 00:48:07,380
can be can go through it will announce

00:48:05,310 --> 00:48:09,660
it body will pick up that and say well

00:48:07,380 --> 00:48:11,599
this can go through move just move the

00:48:09,660 --> 00:48:30,229
update to stable push the bill to the

00:48:11,599 --> 00:48:33,739
- right so the question is the question

00:48:30,229 --> 00:48:36,650
is out - is there any plans to do this

00:48:33,739 --> 00:48:40,519
for level testing especially when a bump

00:48:36,650 --> 00:48:41,900
spec failed in so Netzarim berms broken

00:48:40,519 --> 00:48:46,400
dependencies and these kind of things

00:48:41,900 --> 00:48:48,279
yes more more in the in the talk and the

00:48:46,400 --> 00:48:51,170
Fodor see objective we also have

00:48:48,279 --> 00:48:53,869
destroyed tests being developed right

00:48:51,170 --> 00:48:56,599
now like the RPM inspect with David and

00:48:53,869 --> 00:48:57,949
Tim that they presented and now present

00:48:56,599 --> 00:49:00,380
some more options and if you have more

00:48:57,949 --> 00:49:02,479
ideas then that's that's a perfect place

00:49:00,380 --> 00:49:05,390
to contribute because this is like the

00:49:02,479 --> 00:49:08,299
system allows you to add other systems

00:49:05,390 --> 00:49:10,519
that provide feedback and test results

00:49:08,299 --> 00:49:12,440
so there's no no single place you have

00:49:10,519 --> 00:49:16,099
to put them the the messaging system

00:49:12,440 --> 00:49:19,999
remains the same and that the intent of

00:49:16,099 --> 00:49:22,519
this is also that we can start deploying

00:49:19,999 --> 00:49:25,009
these systems seeing the results and

00:49:22,519 --> 00:49:27,440
then deciding as a community do we want

00:49:25,009 --> 00:49:32,119
to gate on those I think that's that's

00:49:27,440 --> 00:49:34,569
the key difference there was another

00:49:32,119 --> 00:49:34,569
question

00:49:38,680 --> 00:49:42,880
we are right on time so if there are

00:49:40,990 --> 00:49:44,470
more questions if there is one last

00:49:42,880 --> 00:49:45,790
question then we happy to take it as

00:49:44,470 --> 00:50:05,770
always we're happy to let you go to the

00:49:45,790 --> 00:50:09,430
next so the question is how to get this

00:50:05,770 --> 00:50:11,310
provide testing without getting is that

00:50:09,430 --> 00:50:14,580
correct

00:50:11,310 --> 00:50:17,440
you can you can add test results to any

00:50:14,580 --> 00:50:20,080
you can basically run tests on anything

00:50:17,440 --> 00:50:22,000
and report to test with an integrate

00:50:20,080 --> 00:50:25,390
this into results EB they will show up

00:50:22,000 --> 00:50:27,100
in the body tests results page which is

00:50:25,390 --> 00:50:29,290
basically our tasks are on and open Q

00:50:27,100 --> 00:50:31,240
have been working so far and as long as

00:50:29,290 --> 00:50:33,580
you don't document that in green waste

00:50:31,240 --> 00:50:36,040
policy whether that policies in you know

00:50:33,580 --> 00:50:38,170
this reliable one of package level one

00:50:36,040 --> 00:50:39,760
it won't be it won't be used to make the

00:50:38,170 --> 00:50:41,740
decision about the gating process and

00:50:39,760 --> 00:50:46,320
individual packages could opt into

00:50:41,740 --> 00:50:46,320
gating on that by choice for example

00:50:47,580 --> 00:50:55,660
this right to see the results that would

00:50:51,420 --> 00:50:57,370
basically yes by result to be also to

00:50:55,660 --> 00:50:59,260
information so that would mean basically

00:50:57,370 --> 00:51:01,030
we need to create results to be for all

00:50:59,260 --> 00:51:02,440
the results about a certain test during

00:51:01,030 --> 00:51:05,320
a certain period of time probably and

00:51:02,440 --> 00:51:08,400
see the trends goes so with there would

00:51:05,320 --> 00:51:08,400
be ways to monitor that and

00:51:16,680 --> 00:51:24,010
so the so the question from Exxon is in

00:51:22,210 --> 00:51:25,960
the body a date page two we saw the test

00:51:24,010 --> 00:51:27,849
result that are that are being

00:51:25,960 --> 00:51:31,349
considered forgetting or all of them we

00:51:27,849 --> 00:51:31,349
are showing all of them which

00:51:39,470 --> 00:51:54,119
okay come on get the last one but we

00:51:43,020 --> 00:51:56,250
should stop at is there any plans our

00:51:54,119 --> 00:51:57,990
policy about not being able to waive

00:51:56,250 --> 00:52:01,020
certain tests and technique seems to be

00:51:57,990 --> 00:52:04,650
very good turns on the fan yeah so that

00:52:01,020 --> 00:52:07,080
is not implemented right now I would say

00:52:04,650 --> 00:52:10,980
in the future would make very much sense

00:52:07,080 --> 00:52:12,750
to restrict certain wavers but that

00:52:10,980 --> 00:52:14,760
would be probably decision for fresco

00:52:12,750 --> 00:52:17,190
and the community to make so I think

00:52:14,760 --> 00:52:18,869
technically that is possible it is

00:52:17,190 --> 00:52:20,700
definitely not planned in the near

00:52:18,869 --> 00:52:23,310
future and would not happen without

00:52:20,700 --> 00:52:25,650
community involvement like with this

00:52:23,310 --> 00:52:29,099
this would eat wide consensus it's my

00:52:25,650 --> 00:52:30,990
opinion and I think reduce we're going

00:52:29,099 --> 00:52:32,600
to close because it's about time

00:52:30,990 --> 00:52:36,000
thank you everyone

00:52:32,600 --> 00:52:36,000

YouTube URL: https://www.youtube.com/watch?v=updIehlik2Q


