Title: What can we do for cross-distro collaboration in packaging? - Igor Gnatenko - Flock 2019
Publication date: 2019-09-02
Playlist: Flock 2019
Description: 
	Packages in each distributions are quite different. Why do we actually spend maintainers’ time on dealing with these things? I will go through differences in each ecosystem (Python, Ruby, Rust, …) between Fedora and other closest distributions and then we will discuss and try to find out what ideas are good, bad and figure out plan how to get to the future with same packaging across the world.

--
Recordings of talks at Flock are a community effort.  Unfortunately not everything works perfectly every time. If you're interested in helping us improve, let us know.
Captions: 
	00:00:02,270 --> 00:00:08,930
I would like to talk about more about

00:00:05,270 --> 00:00:10,849
cross collaboration which is not very

00:00:08,930 --> 00:00:13,960
popular things to talk about and it's

00:00:10,849 --> 00:00:17,180
not really happening much as I as I wish

00:00:13,960 --> 00:00:18,710
so why do we actually want people to

00:00:17,180 --> 00:00:20,450
work between different distributions

00:00:18,710 --> 00:00:22,610
because we're basically wasting

00:00:20,450 --> 00:00:24,470
packagers time because they have to

00:00:22,610 --> 00:00:27,500
package in one distribution in one way

00:00:24,470 --> 00:00:31,250
in a dispersion different way and it's

00:00:27,500 --> 00:00:33,800
just getting crazy it's also confusing

00:00:31,250 --> 00:00:35,840
for the outside people who want to start

00:00:33,800 --> 00:00:38,149
contributing something like whether to

00:00:35,840 --> 00:00:40,309
use software or actually contribute some

00:00:38,149 --> 00:00:42,829
sort room because it's like oh you know

00:00:40,309 --> 00:00:45,050
I have Federer here and I have to do it

00:00:42,829 --> 00:00:47,960
using these guidelines but it won't work

00:00:45,050 --> 00:00:51,350
for openSUSE so I need to do it in some

00:00:47,960 --> 00:00:55,969
different way so that's that's not good

00:00:51,350 --> 00:01:00,050
for the community either so let's take a

00:00:55,969 --> 00:01:02,960
look at the some Python and open source

00:01:00,050 --> 00:01:05,059
stuff yeah I even have the Internet so

00:01:02,960 --> 00:01:08,990
basically python is packaged really

00:01:05,059 --> 00:01:12,979
differently in federal and openSUSE so

00:01:08,990 --> 00:01:16,009
for example in federal we have this

00:01:12,979 --> 00:01:17,869
simple spec file which has a bunch of

00:01:16,009 --> 00:01:20,119
build requires we have Python 2 so

00:01:17,869 --> 00:01:21,950
piggish which should die soon but we

00:01:20,119 --> 00:01:24,710
have it you have a bunch of bill

00:01:21,950 --> 00:01:27,590
requires you have Python 3 the same

00:01:24,710 --> 00:01:29,600
thing and you specify PI 2 pi 3 builds

00:01:27,590 --> 00:01:33,619
and then you basically duplicate

00:01:29,600 --> 00:01:39,310
sections for Python for them openSUSE

00:01:33,619 --> 00:01:42,890
it's looks like this you just specify

00:01:39,310 --> 00:01:44,810
python module whatever and python build

00:01:42,890 --> 00:01:46,430
you don't have any sub package you don't

00:01:44,810 --> 00:01:49,520
have any duplication you just have it in

00:01:46,430 --> 00:01:53,329
one place and it just works magically

00:01:49,520 --> 00:01:58,399
but if magic is really horrible inside

00:01:53,329 --> 00:02:00,799
if you look at it so like after after we

00:01:58,399 --> 00:02:03,020
go through the all ecosystems I would

00:02:00,799 --> 00:02:05,149
like to choose some some example of some

00:02:03,020 --> 00:02:07,250
language and toad like how can we

00:02:05,149 --> 00:02:08,990
improve like what's what's good in one

00:02:07,250 --> 00:02:10,820
distribution and what's bad in an error

00:02:08,990 --> 00:02:13,630
so we can build something which would

00:02:10,820 --> 00:02:13,630
work for all of us

00:02:13,819 --> 00:02:22,400
so the Ruby yes I see you I don't know

00:02:20,329 --> 00:02:25,549
the entire story behind the Ruby because

00:02:22,400 --> 00:02:27,500
at some point I heard that openSUSE

00:02:25,549 --> 00:02:29,870
people actually wanted to use federal

00:02:27,500 --> 00:02:31,849
packaging but they didn't like some

00:02:29,870 --> 00:02:34,189
aspects that tried to change federal

00:02:31,849 --> 00:02:36,409
packaging but there was some conflict so

00:02:34,189 --> 00:02:40,900
we ended up with different ways of

00:02:36,409 --> 00:02:45,319
packaging so I know I took some random

00:02:40,900 --> 00:02:51,079
rubygem where we have some awful stuff

00:02:45,319 --> 00:02:54,739
in the buildin in install I also copy

00:02:51,079 --> 00:02:57,950
manually stuff and run checks I mean I

00:02:54,739 --> 00:03:02,540
can read it but it's not that nice well

00:02:57,950 --> 00:03:05,260
in openSUSE you have this spec file

00:03:02,540 --> 00:03:07,370
basically we just run gem install and

00:03:05,260 --> 00:03:09,290
jump packages and it generates all the

00:03:07,370 --> 00:03:11,840
sub packages it basically runs all those

00:03:09,290 --> 00:03:15,769
comments I know this one looks for me as

00:03:11,840 --> 00:03:18,799
a person who has no idea about Ruby it

00:03:15,769 --> 00:03:21,079
looks much better I don't know what's

00:03:18,799 --> 00:03:25,720
the reason why it was so different and

00:03:21,079 --> 00:03:28,220
why it's it wasn't contributed back if

00:03:25,720 --> 00:03:33,319
you know the story you will tell us

00:03:28,220 --> 00:03:37,099
later so for the rust I'm happy that

00:03:33,319 --> 00:03:39,079
it's actually same because basically we

00:03:37,099 --> 00:03:40,639
have absolutely same spec file so

00:03:39,079 --> 00:03:43,909
basically if you take this spec file and

00:03:40,639 --> 00:03:45,560
compile it on openSUSE or do it other

00:03:43,909 --> 00:03:47,799
way around it will be it will give you

00:03:45,560 --> 00:03:51,229
same results so you will get a bunch of

00:03:47,799 --> 00:03:59,629
packages and you just have a few simple

00:03:51,229 --> 00:04:01,729
macro in here openSUSE package it's

00:03:59,629 --> 00:04:03,680
basically almost same except for dynamic

00:04:01,729 --> 00:04:05,389
build requires you have all those bunch

00:04:03,680 --> 00:04:11,419
of the packages and all the macros are

00:04:05,389 --> 00:04:15,470
the same golden keys yet another level

00:04:11,419 --> 00:04:17,810
of complexity because recently nicolas

00:04:15,470 --> 00:04:20,299
started to rework roland packaging

00:04:17,810 --> 00:04:22,550
without talking to anybody outside even

00:04:20,299 --> 00:04:25,250
and even inside of Federer so it's just

00:04:22,550 --> 00:04:26,830
over complicated even in further it's

00:04:25,250 --> 00:04:31,770
not consistent so

00:04:26,830 --> 00:04:35,590
I'm going to skip this part so just some

00:04:31,770 --> 00:04:38,020
useful tips like when you want to start

00:04:35,590 --> 00:04:39,819
some projects about something anything

00:04:38,020 --> 00:04:41,560
related to our p.m. packaging basically

00:04:39,819 --> 00:04:43,990
talk to people before you actually start

00:04:41,560 --> 00:04:46,120
working it because I figured out that

00:04:43,990 --> 00:04:47,259
many people don't know about some rpm

00:04:46,120 --> 00:04:50,319
features which they could use for

00:04:47,259 --> 00:04:52,419
example and generating the runtime

00:04:50,319 --> 00:04:52,930
requires on the file on the files and

00:04:52,419 --> 00:04:56,229
things like that

00:04:52,930 --> 00:05:00,449
you know just talk to people and they

00:04:56,229 --> 00:05:02,440
will help you yeah if you actually

00:05:00,449 --> 00:05:05,500
started working on something and you

00:05:02,440 --> 00:05:07,479
decided oh this is a really bad idea I

00:05:05,500 --> 00:05:08,919
need to change it don't just yeah I'm

00:05:07,479 --> 00:05:11,020
doing this change I'm pushing it to

00:05:08,919 --> 00:05:13,120
further I'm done basically talk to

00:05:11,020 --> 00:05:15,460
people from the other distros which are

00:05:13,120 --> 00:05:16,780
using your code and make sure that

00:05:15,460 --> 00:05:19,270
they're aware of what you want to do

00:05:16,780 --> 00:05:24,370
take into account their input what they

00:05:19,270 --> 00:05:25,900
think about this change and so another

00:05:24,370 --> 00:05:28,210
thing which can help with this is

00:05:25,900 --> 00:05:29,889
basically you need to get some common

00:05:28,210 --> 00:05:32,099
place where you can talk to people so

00:05:29,889 --> 00:05:34,659
for example in case of rust we got

00:05:32,099 --> 00:05:40,259
further across our scene channel where

00:05:34,659 --> 00:05:43,690
we have actually guys from openSUSE Maji

00:05:40,259 --> 00:05:48,069
debian on the federalists yes they are

00:05:43,690 --> 00:05:50,800
also contributing to some extent if you

00:05:48,069 --> 00:05:53,169
don't really have some place some strong

00:05:50,800 --> 00:05:56,139
opinion where to put you can use RPM

00:05:53,169 --> 00:05:59,849
ecosystem mailing lists and there is

00:05:56,139 --> 00:06:03,389
even RPM extras git repo so basically

00:05:59,849 --> 00:06:06,849
idea was that you you have some

00:06:03,389 --> 00:06:09,310
ecosystem and you can put here your all

00:06:06,849 --> 00:06:12,219
your macros and this package could be

00:06:09,310 --> 00:06:16,210
shared between the distros but nobody

00:06:12,219 --> 00:06:18,180
put anything here so far yeah there are

00:06:16,210 --> 00:06:21,940
some bunch of scripts which are

00:06:18,180 --> 00:06:23,529
different between these rows I know I

00:06:21,940 --> 00:06:25,870
don't like this situation but it's just

00:06:23,529 --> 00:06:28,330
people should go there submit pull

00:06:25,870 --> 00:06:30,729
requests and other people look on it and

00:06:28,330 --> 00:06:33,279
basically at some point you will get to

00:06:30,729 --> 00:06:35,630
some point where you can share the code

00:06:33,279 --> 00:06:39,170
between these rows

00:06:35,630 --> 00:06:42,260
yeah don't try to be too clever for

00:06:39,170 --> 00:06:45,920
example the goal and packaging is just a

00:06:42,260 --> 00:06:48,140
bunch of Lua I know probably more than

00:06:45,920 --> 00:06:50,720
thousand lines of law which is rewriting

00:06:48,140 --> 00:06:52,790
speck inside multiple times somehow so

00:06:50,720 --> 00:06:55,910
instead of just going to the RPM and

00:06:52,790 --> 00:06:58,610
asking them hey I want dynamic sub

00:06:55,910 --> 00:07:01,690
packages I'm missing this feature I want

00:06:58,610 --> 00:07:04,790
to do this can you add support for it

00:07:01,690 --> 00:07:06,800
well rpm is different than it used to be

00:07:04,790 --> 00:07:09,770
like probably seven years ago it's

00:07:06,800 --> 00:07:11,840
possible to change it it's not that hard

00:07:09,770 --> 00:07:17,420
you just need to talk to our PM guys and

00:07:11,840 --> 00:07:19,190
file tickets and we'll get some stuff

00:07:17,420 --> 00:07:21,110
done because we got dynamic build

00:07:19,190 --> 00:07:26,150
requires we got till there

00:07:21,110 --> 00:07:27,950
we got carrot versions you know we got

00:07:26,150 --> 00:07:31,070
some kind of new reach dependencies

00:07:27,950 --> 00:07:34,010
where you can specify I won't package

00:07:31,070 --> 00:07:37,610
food more equals 1 0 0 and at the same

00:07:34,010 --> 00:07:39,530
time less than 2 0 0 like people were

00:07:37,610 --> 00:07:41,330
trying to create some workarounds using

00:07:39,530 --> 00:07:48,440
conflicts or multiple requires or things

00:07:41,330 --> 00:07:52,150
like that but we can get it better yeah

00:07:48,440 --> 00:07:54,800
and obviously always talk to people so

00:07:52,150 --> 00:07:56,600
now I'm getting more to the details do

00:07:54,800 --> 00:08:01,160
you have some preference which language

00:07:56,600 --> 00:08:13,340
where we should take and talk about it

00:08:01,160 --> 00:08:15,140
Ruby Python Python ok so basically one

00:08:13,340 --> 00:08:18,590
of the things which I kind of like about

00:08:15,140 --> 00:08:22,610
openSUSE and not really nice in Fedora

00:08:18,590 --> 00:08:26,780
is that basically the idea is in federal

00:08:22,610 --> 00:08:29,000
worship only one Python 3 foo but in

00:08:26,780 --> 00:08:31,070
openSUSE they actually build all the

00:08:29,000 --> 00:08:34,010
packages for all versions of supported

00:08:31,070 --> 00:08:38,650
pythons is that something what we would

00:08:34,010 --> 00:08:38,650
like to do or is why not

00:08:44,850 --> 00:08:49,290
yeah they do it same with the pies

00:09:04,830 --> 00:09:09,520
but you you you build a package for

00:09:07,960 --> 00:09:18,490
multiple versions you run the test for

00:09:09,520 --> 00:09:23,280
all the Ruby versions and but you can

00:09:18,490 --> 00:09:23,280
exclude some sub version of Ruby and say

00:09:45,510 --> 00:09:55,960
you mean for the interpreter or for the

00:09:48,310 --> 00:09:58,630
like packager site I think if you would

00:09:55,960 --> 00:10:00,460
actually magically turn on multiple

00:09:58,630 --> 00:10:03,540
bills people will like try to fix

00:10:00,460 --> 00:10:03,540
them No

00:10:25,380 --> 00:10:28,899
[Music]

00:10:45,750 --> 00:10:50,769
but then what is the reason why do we

00:10:48,279 --> 00:10:52,149
actually package those things if we

00:10:50,769 --> 00:10:57,180
actually have four other versions of

00:10:52,149 --> 00:10:57,180
fighting we want you can

00:11:10,420 --> 00:11:13,600
[Music]

00:11:34,940 --> 00:11:42,930
well there are things which you actually

00:11:37,230 --> 00:11:44,640
cannot do peep install well it's not

00:11:42,930 --> 00:11:46,620
really system specific but because

00:11:44,640 --> 00:11:53,940
people create the bindings but they

00:11:46,620 --> 00:11:58,290
don't publish on pi PI that's actually

00:11:53,940 --> 00:12:01,770
problem I think for every Co system so

00:11:58,290 --> 00:12:05,690
what I would like to get rid out of in

00:12:01,770 --> 00:12:08,480
low spec files I don't mean in PPR but

00:12:05,690 --> 00:12:11,460
yeah nowadays we actually generate

00:12:08,480 --> 00:12:13,230
automatically those requires actually

00:12:11,460 --> 00:12:22,670
not many people know that we actually do

00:12:13,230 --> 00:12:22,670
that so if some Titan oh sure

00:12:22,820 --> 00:12:30,780
better I know some so basically those

00:12:28,950 --> 00:12:32,820
those dependencies are automatically

00:12:30,780 --> 00:12:35,880
generated but for some reason people

00:12:32,820 --> 00:12:38,190
still still put them in the spec files

00:12:35,880 --> 00:12:40,620
manually so probably one of the things

00:12:38,190 --> 00:12:42,780
we could do is basically clean up the

00:12:40,620 --> 00:12:45,780
stuff because actually in openSUSE they

00:12:42,780 --> 00:12:49,589
implemented this dependency generation I

00:12:45,780 --> 00:12:53,190
know two three years ago so basically

00:12:49,589 --> 00:12:54,720
one step to get closer and might be so

00:12:53,190 --> 00:12:57,900
if we are looking at Python I had

00:12:54,720 --> 00:13:00,950
somewhere opened it here

00:12:57,900 --> 00:13:04,410
I know probably one thing to make it a

00:13:00,950 --> 00:13:06,150
bit better and all that's we can define

00:13:04,410 --> 00:13:09,570
and further a heightened build which

00:13:06,150 --> 00:13:12,150
will be Python free built in the end I

00:13:09,570 --> 00:13:16,860
know what this Titan expend knows to be

00:13:12,150 --> 00:13:19,050
honest we can create some some shims for

00:13:16,860 --> 00:13:21,470
it so we can actually share share the

00:13:19,050 --> 00:13:21,470
packages

00:13:25,090 --> 00:13:29,560
basically they have since they have

00:13:26,860 --> 00:13:30,940
multiple versions of Titan they for each

00:13:29,560 --> 00:13:32,560
version of patent they want to execute

00:13:30,940 --> 00:13:35,230
some common so I guess this is like

00:13:32,560 --> 00:13:36,850
changing Titan side lip to every version

00:13:35,230 --> 00:13:40,210
of Python and remove the director in

00:13:36,850 --> 00:13:42,820
there well in federal we can just say

00:13:40,210 --> 00:13:45,190
pint expand is macro which expense to

00:13:42,820 --> 00:13:56,550
nothing so you would remove just that

00:13:45,190 --> 00:13:56,550
wonder so what else

00:13:56,640 --> 00:14:01,170
yeah another thing which came to my mind

00:13:59,590 --> 00:14:03,970
is why don't we actually generate the

00:14:01,170 --> 00:14:06,430
file lists automatically because for

00:14:03,970 --> 00:14:10,720
example in Java they make sure dude it

00:14:06,430 --> 00:14:12,670
so they after MV a maven install they

00:14:10,720 --> 00:14:17,440
actually it automatically generates some

00:14:12,670 --> 00:14:29,800
file which you pass files minus F why

00:14:17,440 --> 00:14:32,520
don't we do it no you want you won't

00:14:29,800 --> 00:14:32,520
know about it

00:14:56,570 --> 00:15:02,580
what what about two for example Amazon I

00:15:00,600 --> 00:15:04,050
think they created some tool in rust

00:15:02,580 --> 00:15:06,000
which is actually going through the list

00:15:04,050 --> 00:15:07,620
of the files and tries to think is is

00:15:06,000 --> 00:15:09,600
that license file is that license file

00:15:07,620 --> 00:15:18,570
so we can actually use something like

00:15:09,600 --> 00:15:22,490
that to detect well you do because you

00:15:18,570 --> 00:15:22,490
run unpick for some terrible

00:15:49,719 --> 00:15:57,259
we have this tool called rpm which only

00:15:54,619 --> 00:15:59,619
generates the spec files and it does a

00:15:57,259 --> 00:15:59,619
lot of

00:16:15,120 --> 00:16:18,230
[Music]

00:16:51,150 --> 00:17:00,270
well so actually in rust there is some

00:16:57,790 --> 00:17:03,280
special field like license file and

00:17:00,270 --> 00:17:04,750
readme file or some like this it doesn't

00:17:03,280 --> 00:17:08,199
work if you have multiple license files

00:17:04,750 --> 00:17:10,589
but it's different story so basically

00:17:08,199 --> 00:17:13,030
what we're talking with the RPM folks is

00:17:10,589 --> 00:17:15,939
we can actually implement something like

00:17:13,030 --> 00:17:18,100
this in rpm so basically you can get

00:17:15,939 --> 00:17:20,199
most of the parts like license and

00:17:18,100 --> 00:17:22,900
probably read me it might be sometimes

00:17:20,199 --> 00:17:24,880
not working properly but do you really

00:17:22,900 --> 00:17:27,970
care if some of the files is marked as

00:17:24,880 --> 00:17:30,960
the license we should not be like is

00:17:27,970 --> 00:17:30,960
that really big problem

00:17:42,070 --> 00:17:47,510
so if I if I understand correctly

00:17:45,310 --> 00:17:50,480
basically their license was invented

00:17:47,510 --> 00:17:52,910
because people do - - no dogs or exclude

00:17:50,480 --> 00:17:54,440
dogs in the installation so they don't

00:17:52,910 --> 00:17:58,130
get license file which is properly

00:17:54,440 --> 00:18:00,140
evaluating some some licensing so they

00:17:58,130 --> 00:18:02,360
decided to have license which is not

00:18:00,140 --> 00:18:06,110
getting excluded when you run - - no

00:18:02,360 --> 00:18:09,890
dogs so I would say it's really minor

00:18:06,110 --> 00:18:11,800
use case and like it's better to you

00:18:09,890 --> 00:18:14,960
know to have some wrongly identified

00:18:11,800 --> 00:18:16,550
files marked as a license because it

00:18:14,960 --> 00:18:18,080
won't affect probably some really really

00:18:16,550 --> 00:18:19,820
minimal installations which actually

00:18:18,080 --> 00:18:22,210
want to exclude documentation for

00:18:19,820 --> 00:18:22,210
example

00:18:47,510 --> 00:18:53,550
well but you check their licenses like

00:18:51,180 --> 00:18:55,980
you're talking about like license field

00:18:53,550 --> 00:19:05,840
not like the license like percent

00:18:55,980 --> 00:19:09,720
license or both I'm pretty sure I know

00:19:05,840 --> 00:19:12,000
500 packages out of her late don't have

00:19:09,720 --> 00:19:15,090
license files in the person's license

00:19:12,000 --> 00:19:16,770
but they have a person dog I'm like I

00:19:15,090 --> 00:19:23,520
didn't look at those packages but I'm

00:19:16,770 --> 00:19:25,080
pretty sure they're like that now it's

00:19:23,520 --> 00:19:26,970
not because of the review but because

00:19:25,080 --> 00:19:28,440
it's not automated so if you want to

00:19:26,970 --> 00:19:32,040
change some doctor license so you

00:19:28,440 --> 00:19:34,170
introduce new field and that means like

00:19:32,040 --> 00:19:36,480
somebody has to go everywhere and fix it

00:19:34,170 --> 00:19:38,460
and if you have some kind of auto

00:19:36,480 --> 00:19:39,930
detection you just change that part

00:19:38,460 --> 00:19:51,420
which is automatically detecting it and

00:19:39,930 --> 00:19:55,220
marxists I'm not sure if you can define

00:19:51,420 --> 00:19:55,220
standard but you definitely can

00:20:07,669 --> 00:20:12,320
you can get it correct to some extent

00:20:13,429 --> 00:20:18,389
yeah because basically even talking

00:20:16,379 --> 00:20:20,940
about Python where basically there is

00:20:18,389 --> 00:20:24,960
that project about creating dynamic

00:20:20,940 --> 00:20:27,029
build requires like you cannot what

00:20:24,960 --> 00:20:28,230
people are not going to validate all the

00:20:27,029 --> 00:20:30,000
requires which are generated

00:20:28,230 --> 00:20:31,679
automatically whether it's build

00:20:30,000 --> 00:20:35,129
requires or requires they just rely on

00:20:31,679 --> 00:20:36,929
that they're correct they're most people

00:20:35,129 --> 00:20:39,690
most of the time there they are but

00:20:36,929 --> 00:20:53,970
sometimes they're not so I think the

00:20:39,690 --> 00:20:55,529
license is yeah but probably and is

00:20:53,970 --> 00:20:59,730
there something for Python which says

00:20:55,529 --> 00:21:03,440
this is the license files so let's

00:20:59,730 --> 00:21:03,440
propose it to the Titan

00:21:16,630 --> 00:21:30,170
but you can convert it well you can

00:21:27,470 --> 00:21:32,030
convert from SP Deeks to Fedora like not

00:21:30,170 --> 00:21:35,060
the other way around but from Hispanics

00:21:32,030 --> 00:21:38,210
to Phaedra because we have just BSD and

00:21:35,060 --> 00:21:41,290
further about the SPD's defines 50 of BS

00:21:38,210 --> 00:21:47,540
DS that's actually what we do in the

00:21:41,290 --> 00:21:53,590
restore p.m. so we have this Bishop

00:21:47,540 --> 00:21:53,590
contributed that's that file which is I

00:21:54,190 --> 00:21:58,850
know how its generated to be honest but

00:21:57,020 --> 00:22:00,950
basically have lists of SPD and the

00:21:58,850 --> 00:22:08,240
federal license and probably some

00:22:00,950 --> 00:22:10,750
comment no it's not it's SPD x2 federal

00:22:08,240 --> 00:22:10,750
license list

00:22:19,330 --> 00:22:25,220
well because you cannot generate license

00:22:22,370 --> 00:22:26,960
filled in the RPM so it was we can

00:22:25,220 --> 00:22:31,580
definitely create some macro in rpm

00:22:26,960 --> 00:22:34,190
which says SP Deeks convert and put SP

00:22:31,580 --> 00:23:11,240
Deeks identifiers there and Federer will

00:22:34,190 --> 00:23:16,789
have further UNAIDS would that work no

00:23:11,240 --> 00:23:18,230
it will be because micro expense yeah

00:23:16,789 --> 00:23:21,850
but we don't have many things in the

00:23:18,230 --> 00:23:21,850
spec file which are in s rpm

00:23:30,209 --> 00:23:35,379
why you don't need anything extra like

00:23:32,799 --> 00:24:01,599
you don't need the files to put

00:23:35,379 --> 00:24:04,989
something there license list yes well we

00:24:01,599 --> 00:24:08,379
have to store s RP s RPM for the legal

00:24:04,989 --> 00:24:11,789
purposes so the s RPM is the source not

00:24:08,379 --> 00:24:11,789
like git repo

00:24:15,140 --> 00:24:18,219
[Music]

00:24:45,929 --> 00:24:51,789
for example dynamic bill requires is

00:24:48,760 --> 00:24:53,620
kind of similar to the license field

00:24:51,789 --> 00:24:55,659
because you need to have bill requires

00:24:53,620 --> 00:24:57,730
to start the build but it's not

00:24:55,659 --> 00:24:59,769
necessarily true because you can now

00:24:57,730 --> 00:25:01,600
generate it so you need some bill

00:24:59,769 --> 00:25:04,240
requires to be able to generate another

00:25:01,600 --> 00:25:07,120
bill requires so we can make for example

00:25:04,240 --> 00:25:08,649
this well whether it will be just macro

00:25:07,120 --> 00:25:12,730
which is converting SP leaks names to

00:25:08,649 --> 00:25:15,179
federal names or does some more magic we

00:25:12,730 --> 00:25:15,179
can do that

00:25:19,990 --> 00:26:24,400
so are we going to submit some pep

00:25:23,100 --> 00:26:26,350
something like proposal well I would

00:26:24,400 --> 00:26:29,080
like to get it in the RPM instead I

00:26:26,350 --> 00:26:38,410
would I would like to get it in the RPM

00:26:29,080 --> 00:26:40,510
properly well it it's improving because

00:26:38,410 --> 00:26:42,910
I remember when I just started to

00:26:40,510 --> 00:26:45,460
contribute into rpm like that till the

00:26:42,910 --> 00:26:47,710
support and Federer I took 10 years to

00:26:45,460 --> 00:26:51,280
get it and it was 42 and rl6

00:26:47,710 --> 00:26:54,060
because it was the concern it's actually

00:26:51,280 --> 00:26:54,060
improved now

00:27:22,530 --> 00:27:37,570
yeah but we don't have to be different

00:27:25,090 --> 00:27:39,250
in this case do you have some some

00:27:37,570 --> 00:27:40,960
example the proper one because I just

00:27:39,250 --> 00:27:44,280
took her on the one which was updated

00:27:40,960 --> 00:27:44,280
not so long time ago

00:27:54,040 --> 00:27:57,690
so basically I was talking to the Souza

00:27:56,470 --> 00:28:12,220
guys

00:27:57,690 --> 00:28:15,610
yeah it's use oh sure okay so basically

00:28:12,220 --> 00:28:18,070
the whole thing what I wanted to say is

00:28:15,610 --> 00:28:20,200
basically the Souza guys I talked to

00:28:18,070 --> 00:28:22,630
them on the openSUSE conference in in

00:28:20,200 --> 00:28:24,760
May in Nuremberg they were open for any

00:28:22,630 --> 00:28:27,370
changes they were open to actually get

00:28:24,760 --> 00:28:28,900
it in the RPM upstream to have some

00:28:27,370 --> 00:28:32,140
better way of defining sub-packages

00:28:28,900 --> 00:28:36,580
or do some crazy stuff and so that will

00:28:32,140 --> 00:28:38,530
be more closer so probably from federal

00:28:36,580 --> 00:28:40,330
site we can also like for example if we

00:28:38,530 --> 00:28:43,030
want license file let's get it in the

00:28:40,330 --> 00:28:45,730
Python upstream and then get it in the

00:28:43,030 --> 00:28:58,840
RPM upstream so all these benefit from

00:28:45,730 --> 00:29:00,790
that would it work well we can infer the

00:28:58,840 --> 00:29:02,200
us say that we are not going to build

00:29:00,790 --> 00:29:04,270
them like the macros will be same

00:29:02,200 --> 00:29:05,680
everything will look same but in further

00:29:04,270 --> 00:29:07,180
we will say we're not building multiple

00:29:05,680 --> 00:29:19,090
versions were building only one version

00:29:07,180 --> 00:29:21,870
I mean you will still have yeah like is

00:29:19,090 --> 00:29:21,870
that a problem or

00:29:29,670 --> 00:29:34,350

YouTube URL: https://www.youtube.com/watch?v=rHMMOE72EFk


