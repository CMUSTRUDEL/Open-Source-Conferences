Title: Improving Packaging Experience with Automation - Neal Gompa, Igor Gnatenko - Flock 2019
Publication date: 2019-09-02
Playlist: Flock 2019
Description: 
	We are working on a Fedora Objective about saving packagersâ€™ time with an automation related to building of their packages. That includes but not limited to automatic rebuild of packages on dependency changes, removing manual work on writing changelog both in spec and later in git and doing release bumps on rebuilds.
This talk is about presenting our ideas of how to improve the quality of life for packagers (the lifeblood of our distribution) and getting feedback (in a panel-ish form) about how to further refine and improve the packaging and maintenance experience. This is becoming increasingly important as the way we deliver software is increasing in complexity with things like modules and flatpaks and whatnot. 

--
Recordings of talks at Flock are a community effort.  Unfortunately not everything works perfectly every time. If you're interested in helping us improve, let us know.
Captions: 
	00:00:02,870 --> 00:00:09,270
so I'm Neil this is Igor and we're

00:00:06,689 --> 00:00:11,130
talking about how the packager

00:00:09,270 --> 00:00:13,560
experience really stinks and we should

00:00:11,130 --> 00:00:19,310
improve it with some robots and you know

00:00:13,560 --> 00:00:22,770
ideally simplifying the human parts yeah

00:00:19,310 --> 00:00:26,100
ideal so let's kind of first start with

00:00:22,770 --> 00:00:28,949
the problems and so the first is every

00:00:26,100 --> 00:00:31,980
time we have to deal with things that

00:00:28,949 --> 00:00:34,739
depend on each other getting everything

00:00:31,980 --> 00:00:36,269
fixed is horrible because it's a manual

00:00:34,739 --> 00:00:37,890
effort to figure out what the

00:00:36,269 --> 00:00:40,649
dependencies are that need to be built

00:00:37,890 --> 00:00:42,629
reverse and forward so dealing with

00:00:40,649 --> 00:00:44,879
those involves you know you've update

00:00:42,629 --> 00:00:47,370
your thing the world breaks people

00:00:44,879 --> 00:00:51,569
on the mailing list and then it has to

00:00:47,370 --> 00:00:53,639
get fixed again and it happens manually

00:00:51,569 --> 00:00:56,159
and if you're not a proven packager this

00:00:53,639 --> 00:00:59,309
is way worse because you don't have the

00:00:56,159 --> 00:01:01,190
ability to fix it and so this is a huge

00:00:59,309 --> 00:01:04,220
crimp in the style for anybody who's not

00:01:01,190 --> 00:01:08,430
empowered like say Igor or myself or the

00:01:04,220 --> 00:01:11,280
small cabal of proven packagers to be

00:01:08,430 --> 00:01:13,650
able to just go and fix the distro and

00:01:11,280 --> 00:01:15,090
that in that basically means hero work

00:01:13,650 --> 00:01:17,280
has happened and that's not something

00:01:15,090 --> 00:01:19,200
that should be something that needs to

00:01:17,280 --> 00:01:23,130
be done on what amounts to be a fairly

00:01:19,200 --> 00:01:24,630
regular occurrence and then there's

00:01:23,130 --> 00:01:26,880
duplicated change logs all over the

00:01:24,630 --> 00:01:30,120
place so in theory what's supposed to be

00:01:26,880 --> 00:01:33,540
in theory what's supposed to be is that

00:01:30,120 --> 00:01:35,490
there is a single package or change log

00:01:33,540 --> 00:01:37,950
entry or something like that and then

00:01:35,490 --> 00:01:40,170
you have user information that is in a

00:01:37,950 --> 00:01:43,400
document or in the bodhi updates info or

00:01:40,170 --> 00:01:45,960
something what winds up happening is

00:01:43,400 --> 00:01:47,909
people write the change log with a

00:01:45,960 --> 00:01:49,920
mixture of information in the spec file

00:01:47,909 --> 00:01:51,840
change log which it's committed to get

00:01:49,920 --> 00:01:53,580
also and then it's just pasta into bode

00:01:51,840 --> 00:01:55,980
so they're not there's they're not even

00:01:53,580 --> 00:01:57,659
serving the purpose of being the unique

00:01:55,980 --> 00:02:00,300
separate roles and this gets really

00:01:57,659 --> 00:02:02,610
stupid when you actually look at the

00:02:00,300 --> 00:02:04,440
update info that is returned by DNF or

00:02:02,610 --> 00:02:06,600
in the emails that get saddled by fedora

00:02:04,440 --> 00:02:09,389
announced because Fedora announced it

00:02:06,600 --> 00:02:11,790
shows you the bode updates and it is the

00:02:09,389 --> 00:02:12,989
bode update information which is the

00:02:11,790 --> 00:02:14,190
stuff you put in when you're submitting

00:02:12,989 --> 00:02:15,990
the updates then

00:02:14,190 --> 00:02:19,470
a section which shows the package

00:02:15,990 --> 00:02:21,180
changelog and then below that is like

00:02:19,470 --> 00:02:23,250
what's actually including the update I

00:02:21,180 --> 00:02:24,480
think most people have never looked at

00:02:23,250 --> 00:02:28,220
those emails which is why they don't

00:02:24,480 --> 00:02:30,150
know why these are separate fields so

00:02:28,220 --> 00:02:32,580
that's probably something that needs

00:02:30,150 --> 00:02:35,430
partially education some partial fixing

00:02:32,580 --> 00:02:38,430
of the workflow and things like that and

00:02:35,430 --> 00:02:42,060
then the really specific information

00:02:38,430 --> 00:02:44,430
that shows up in the in in the packages

00:02:42,060 --> 00:02:47,220
in the spec file the change log of

00:02:44,430 --> 00:02:49,110
whatnot is all kinds of pain for

00:02:47,220 --> 00:02:51,210
cherry-picking across branches which

00:02:49,110 --> 00:02:53,070
we'll get into like for pushing into

00:02:51,210 --> 00:02:54,630
different releases that's a another can

00:02:53,070 --> 00:02:56,490
of worms that should never have been

00:02:54,630 --> 00:03:00,300
made to exist in the first place but

00:02:56,490 --> 00:03:01,740
that those things cause all kinds of

00:03:00,300 --> 00:03:05,190
issues for people that maintain for

00:03:01,740 --> 00:03:06,990
example they make a fun fix into rawhide

00:03:05,190 --> 00:03:08,640
and then that could be in theory

00:03:06,990 --> 00:03:10,410
cherry-picked into a stable release

00:03:08,640 --> 00:03:11,940
without bumping the version or any of

00:03:10,410 --> 00:03:13,800
those things and then they can't because

00:03:11,940 --> 00:03:15,360
it causes conflicts all over the place

00:03:13,800 --> 00:03:16,650
and you spend like a half hour fixing

00:03:15,360 --> 00:03:19,770
everything and then you realize you

00:03:16,650 --> 00:03:21,900
still got it wrong because it's not

00:03:19,770 --> 00:03:26,520
chronological anymore somehow and you

00:03:21,900 --> 00:03:29,520
broke it so and then the this one is

00:03:26,520 --> 00:03:31,350
something that doesn't happen to a lot

00:03:29,520 --> 00:03:34,170
of packages but the ones that it does it

00:03:31,350 --> 00:03:35,730
is a it's a severe issue when you have

00:03:34,170 --> 00:03:37,530
to deal with large collections of

00:03:35,730 --> 00:03:39,900
packages being pushed and updated

00:03:37,530 --> 00:03:41,850
outside of rawhide which unfortunately

00:03:39,900 --> 00:03:44,370
now in rawhide this is a problem but

00:03:41,850 --> 00:03:46,470
before it wasn't this was only a stable

00:03:44,370 --> 00:03:48,150
updates problem was if you have to do a

00:03:46,470 --> 00:03:50,340
collection of them in the correct order

00:03:48,150 --> 00:03:51,989
and get it all together and push it out

00:03:50,340 --> 00:03:54,870
as one thing this was actually really

00:03:51,989 --> 00:03:58,590
really hard because the process is not

00:03:54,870 --> 00:04:01,380
designed to handle people doing large

00:03:58,590 --> 00:04:03,120
chunks of things at once it more or less

00:04:01,380 --> 00:04:05,640
was optimized around people just doing

00:04:03,120 --> 00:04:07,170
one thing at a time and just kind of

00:04:05,640 --> 00:04:08,910
rolling with it and having other people

00:04:07,170 --> 00:04:12,570
like just fill in their bits after the

00:04:08,910 --> 00:04:13,920
fact these days that's really not what a

00:04:12,570 --> 00:04:15,840
lot of people do anymore

00:04:13,920 --> 00:04:17,780
like if you look at Fedora KD for

00:04:15,840 --> 00:04:20,580
example it is the best-case scenario

00:04:17,780 --> 00:04:22,229
where they get a side tag and then they

00:04:20,580 --> 00:04:25,110
do all their stuff and then somebody

00:04:22,229 --> 00:04:26,640
magically shovels it all through until

00:04:25,110 --> 00:04:27,840
it makes it to the bodhi update where

00:04:26,640 --> 00:04:28,889
Bodie starts crashing

00:04:27,840 --> 00:04:31,350
because there's too many updates

00:04:28,889 --> 00:04:32,760
happening in one update and sometimes

00:04:31,350 --> 00:04:34,350
things have to be split up and it's more

00:04:32,760 --> 00:04:36,630
broken because one of the updates pushes

00:04:34,350 --> 00:04:38,130
out out of sync of the other ones and

00:04:36,630 --> 00:04:43,680
all the Fedora KT people are sad

00:04:38,130 --> 00:04:46,680
including myself so in the Fedora

00:04:43,680 --> 00:04:50,490
workflow you know this is the kind of

00:04:46,680 --> 00:04:51,930
starting point of like we're okay the

00:04:50,490 --> 00:04:53,820
starting point of where the failures are

00:04:51,930 --> 00:04:55,979
so you start with packaging your

00:04:53,820 --> 00:04:58,800
software you do review requests which

00:04:55,979 --> 00:05:00,540
are sadly in Bugzilla and have no

00:04:58,800 --> 00:05:03,150
workflow tools or automation or

00:05:00,540 --> 00:05:04,290
formatting or anything useful for

00:05:03,150 --> 00:05:07,020
telling you what you're supposed to be

00:05:04,290 --> 00:05:09,450
doing except for if you type the wrong

00:05:07,020 --> 00:05:10,710
URLs into the wrong spots on the little

00:05:09,450 --> 00:05:13,130
form thing that people don't necessarily

00:05:10,710 --> 00:05:15,990
know they're supposed to be using

00:05:13,130 --> 00:05:20,880
everything goes haywire because we parse

00:05:15,990 --> 00:05:22,139
text randomly cool right and then we

00:05:20,880 --> 00:05:24,180
have to find somebody to review and

00:05:22,139 --> 00:05:25,110
prepare it so this is this is actually

00:05:24,180 --> 00:05:26,280
gonna be a problem no matter what cuz

00:05:25,110 --> 00:05:29,880
there needs to be human element to this

00:05:26,280 --> 00:05:31,860
but the problem with this is the

00:05:29,880 --> 00:05:33,510
discoverability of new reviews and the

00:05:31,860 --> 00:05:36,930
ability for people to locate people who

00:05:33,510 --> 00:05:39,419
are capable of reviewing is hard and

00:05:36,930 --> 00:05:40,590
it's even worse if you're unfortunately

00:05:39,419 --> 00:05:42,110
a brand new package here because now you

00:05:40,590 --> 00:05:45,690
have to find this nebulous group of

00:05:42,110 --> 00:05:47,190
sponsors now this is a group of people

00:05:45,690 --> 00:05:48,690
that are supposed to be known but it's

00:05:47,190 --> 00:05:50,190
not like it's easy for anyone to figure

00:05:48,690 --> 00:05:52,950
out who they are who to contact or how

00:05:50,190 --> 00:05:54,960
to get started and so like there's that

00:05:52,950 --> 00:05:56,430
whole other human element problem that

00:05:54,960 --> 00:05:59,580
I'm not completely certain how we're

00:05:56,430 --> 00:06:01,650
supposed to solve but it's definitely a

00:05:59,580 --> 00:06:04,770
problem and it doesn't help that because

00:06:01,650 --> 00:06:06,479
of problem one of dependency things most

00:06:04,770 --> 00:06:08,910
of sponsor people who are also often

00:06:06,479 --> 00:06:10,950
proven packages are overtaxed so they

00:06:08,910 --> 00:06:14,610
can't really help new people over the

00:06:10,950 --> 00:06:16,590
over the barrier so then the request

00:06:14,610 --> 00:06:18,360
repo which is just is actually probably

00:06:16,590 --> 00:06:20,430
the nicest part of this process because

00:06:18,360 --> 00:06:23,160
it is running a command pointing it to a

00:06:20,430 --> 00:06:26,099
bug saying this is a thing but then

00:06:23,160 --> 00:06:27,840
there's the waiting part you have to

00:06:26,099 --> 00:06:30,330
wait and you have no idea what you have

00:06:27,840 --> 00:06:32,700
to wait for because there's no feedback

00:06:30,330 --> 00:06:34,830
in the when you create that when you

00:06:32,700 --> 00:06:36,960
create that like so the request repo

00:06:34,830 --> 00:06:38,909
says well this URL was created what

00:06:36,960 --> 00:06:40,710
about in the buck what about anywhere

00:06:38,909 --> 00:06:41,639
else where where people actually look or

00:06:40,710 --> 00:06:44,400
watching

00:06:41,639 --> 00:06:47,130
like for example when I did a review to

00:06:44,400 --> 00:06:49,740
get something that was supposed to be

00:06:47,130 --> 00:06:50,280
that we wanted to ship in Fedora from my

00:06:49,740 --> 00:06:52,710
employer

00:06:50,280 --> 00:06:53,790
like it was just a font package but when

00:06:52,710 --> 00:06:54,900
they were tracking the bug they were

00:06:53,790 --> 00:06:57,300
like well what's going on there's

00:06:54,900 --> 00:07:00,330
nothing happening mm-hmm yeah I don't

00:06:57,300 --> 00:07:02,190
know well I'm waiting for what

00:07:00,330 --> 00:07:04,050
so like there's no feedback loops in

00:07:02,190 --> 00:07:06,000
there with the review process even a

00:07:04,050 --> 00:07:09,990
minor thing would be maybe let's improve

00:07:06,000 --> 00:07:11,430
that and then once it's done got a push

00:07:09,990 --> 00:07:15,360
content there the default workflow

00:07:11,430 --> 00:07:18,200
created by request repo is multiple

00:07:15,360 --> 00:07:20,940
branches pointing to specific releases

00:07:18,200 --> 00:07:23,190
we haven't actually needed to do that

00:07:20,940 --> 00:07:24,750
for a few releases now but nobody is

00:07:23,190 --> 00:07:26,760
sure whether that work new workflow that

00:07:24,750 --> 00:07:28,590
has been implemented works and so

00:07:26,760 --> 00:07:32,220
everyone's a little bit scared to try to

00:07:28,590 --> 00:07:33,660
jump onto that so the default workflow

00:07:32,220 --> 00:07:35,460
is an unnecessarily cumbersome for

00:07:33,660 --> 00:07:37,500
shipping updates packages that go into

00:07:35,460 --> 00:07:39,800
multiple releases so there's especially

00:07:37,500 --> 00:07:42,720
since I think the last time I looked a

00:07:39,800 --> 00:07:43,949
little over 70 percent of all the spec

00:07:42,720 --> 00:07:45,930
files are identical across multiple

00:07:43,949 --> 00:07:47,700
stable branches because most people

00:07:45,930 --> 00:07:49,680
don't really have the necessary

00:07:47,700 --> 00:07:52,470
bandwidth to maintain them separately

00:07:49,680 --> 00:07:55,110
across releases so I mean I know mine I

00:07:52,470 --> 00:07:57,380
only have two out of 160 that are

00:07:55,110 --> 00:08:02,160
maintained differently across branches

00:07:57,380 --> 00:08:03,840
that's a pretty low number so and then

00:08:02,160 --> 00:08:05,550
let's go fire up the bills this supposed

00:08:03,840 --> 00:08:08,190
to be easy and nice but it it ain't

00:08:05,550 --> 00:08:09,330
because you know after you fire the

00:08:08,190 --> 00:08:10,889
bills you have to submit them to bodie

00:08:09,330 --> 00:08:12,660
because it nothing actually happens

00:08:10,889 --> 00:08:17,220
after you've built them and that part's

00:08:12,660 --> 00:08:18,539
not obvious either cool but then we get

00:08:17,220 --> 00:08:21,030
to the multi build workflow and this

00:08:18,539 --> 00:08:22,860
just gets made worse because I was just

00:08:21,030 --> 00:08:25,500
describing a single workflow the multi

00:08:22,860 --> 00:08:28,110
workflow involves a new step which is

00:08:25,500 --> 00:08:31,950
figure out the build order by hand or

00:08:28,110 --> 00:08:35,190
keep hitting it enough until it works I

00:08:31,950 --> 00:08:37,830
can guarantee you that most people in

00:08:35,190 --> 00:08:40,500
this room don't know how to figure out

00:08:37,830 --> 00:08:44,279
the build order because it is not

00:08:40,500 --> 00:08:45,510
obvious or easy to do that even I get it

00:08:44,279 --> 00:08:50,670
wrong most of the time and I'm supposed

00:08:45,510 --> 00:08:52,709
to be somewhat good at this and the

00:08:50,670 --> 00:08:55,090
override stuff in bode like this one

00:08:52,709 --> 00:08:56,950
involves a whole new set of like okay

00:08:55,090 --> 00:08:58,480
do new things that isn't correctly

00:08:56,950 --> 00:08:58,840
described or what I'm supposed to do

00:08:58,480 --> 00:09:00,790
with it

00:08:58,840 --> 00:09:03,100
and then there's waiting and this isn't

00:09:00,790 --> 00:09:05,110
a human kind of wait this is we have to

00:09:03,100 --> 00:09:07,000
wait for a machine to figure out the

00:09:05,110 --> 00:09:08,110
thing that we could do so that we could

00:09:07,000 --> 00:09:10,750
keep going and if you have multiple

00:09:08,110 --> 00:09:13,120
weights if you have multiple overrides

00:09:10,750 --> 00:09:16,000
you need to implement this takes upwards

00:09:13,120 --> 00:09:17,800
to a day or so depending on like all

00:09:16,000 --> 00:09:19,750
kinds of factors server side because

00:09:17,800 --> 00:09:21,160
it's regenerating repos and stuff like

00:09:19,750 --> 00:09:22,180
that in the background nobody's supposed

00:09:21,160 --> 00:09:26,589
to care about that part but that

00:09:22,180 --> 00:09:29,230
implementation detail matters but then

00:09:26,589 --> 00:09:30,730
you know there's a an alternative

00:09:29,230 --> 00:09:33,279
workflow that I've experienced quite a

00:09:30,730 --> 00:09:35,710
fair bit in my work in the last four

00:09:33,279 --> 00:09:38,610
years being involved in openSUSE along

00:09:35,710 --> 00:09:40,750
with being in fedora and the workflow

00:09:38,610 --> 00:09:43,350
might surprise you a little bit it's

00:09:40,750 --> 00:09:46,960
packaged the software push it to the VCS

00:09:43,350 --> 00:09:50,650
side note VCS and OBS in the openSUSE

00:09:46,960 --> 00:09:52,120
system is absolutely terrible and don't

00:09:50,650 --> 00:09:53,680
ever look for it as a model of how you

00:09:52,120 --> 00:09:56,200
implement a version control system by

00:09:53,680 --> 00:09:58,510
hand because there are a lot of things

00:09:56,200 --> 00:10:01,150
wrong with it but it gets built

00:09:58,510 --> 00:10:03,400
automatically once you push it like all

00:10:01,150 --> 00:10:05,710
of the building and figuring out the

00:10:03,400 --> 00:10:09,100
order and what's supposed to happen

00:10:05,710 --> 00:10:12,810
resolve ability states that's all done

00:10:09,100 --> 00:10:15,760
for you you don't have to care and then

00:10:12,810 --> 00:10:17,890
you once you have your all of your stuff

00:10:15,760 --> 00:10:20,680
uploaded into your project or whatever

00:10:17,890 --> 00:10:22,510
you just go ahead and do what's the

00:10:20,680 --> 00:10:25,180
submit request so if you know about pull

00:10:22,510 --> 00:10:27,310
requests or merge request this is the

00:10:25,180 --> 00:10:29,589
same model except it's actually very

00:10:27,310 --> 00:10:31,290
much oriented around packaging and so

00:10:29,589 --> 00:10:33,160
like it shows you relevant diffs

00:10:31,290 --> 00:10:35,770
collapses dips that don't matter but

00:10:33,160 --> 00:10:37,540
also lets you see software changes it

00:10:35,770 --> 00:10:40,510
has bots that run that do specific

00:10:37,540 --> 00:10:44,170
checks for packaging shows human review

00:10:40,510 --> 00:10:46,209
queries bot responses things like that

00:10:44,170 --> 00:10:47,650
and it allows you to get feedback in a

00:10:46,209 --> 00:10:49,870
way that's optimized for that kind of

00:10:47,650 --> 00:10:51,400
stuff now Baron

00:10:49,870 --> 00:10:52,690
this is caveated with you have to have

00:10:51,400 --> 00:10:55,630
human resources to make this work

00:10:52,690 --> 00:10:59,770
openSUSE has got a pretty bad case of no

00:10:55,630 --> 00:11:02,170
resources there's only four or five

00:10:59,770 --> 00:11:03,940
people that can review any and all

00:11:02,170 --> 00:11:06,670
packages going into factory which is

00:11:03,940 --> 00:11:08,440
their equivalent of rawhide and so when

00:11:06,670 --> 00:11:11,910
you have like

00:11:08,440 --> 00:11:14,800
a hundred or a thousand or 10,000

00:11:11,910 --> 00:11:18,790
packages in the queue it can take months

00:11:14,800 --> 00:11:20,410
for packages to actually land now this

00:11:18,790 --> 00:11:23,170
is actually amplified by the fact in the

00:11:20,410 --> 00:11:25,449
openSUSE workflow every single update

00:11:23,170 --> 00:11:28,420
goes through the review process again

00:11:25,449 --> 00:11:31,449
and again and again and that includes

00:11:28,420 --> 00:11:35,110
legal review so there's a there is a

00:11:31,449 --> 00:11:38,259
system with a bot that I am working on

00:11:35,110 --> 00:11:39,100
trying to adapt for fedora it is slow

00:11:38,259 --> 00:11:41,589
going

00:11:39,100 --> 00:11:44,470
that actually does a good chunk of the

00:11:41,589 --> 00:11:45,939
legal review process or when it figures

00:11:44,470 --> 00:11:48,939
out that it is too complicated to figure

00:11:45,939 --> 00:11:51,189
out bounces it to a human and so like

00:11:48,939 --> 00:11:52,800
that allows us to do rule checks and

00:11:51,189 --> 00:11:54,970
things like that they do all of this

00:11:52,800 --> 00:11:56,790
automatically so then the last mile

00:11:54,970 --> 00:12:01,740
check for the human is a spot check

00:11:56,790 --> 00:12:04,629
making sure that the the maybe some

00:12:01,740 --> 00:12:06,699
human specific things are going on some

00:12:04,629 --> 00:12:09,279
policy things nothing too wigged out in

00:12:06,699 --> 00:12:11,560
a weird way like they do install tracks

00:12:09,279 --> 00:12:12,819
and stuff like that making sure all

00:12:11,560 --> 00:12:14,290
those are good and then hitting the

00:12:12,819 --> 00:12:17,290
final except button and then it gets

00:12:14,290 --> 00:12:19,600
merged now the only downside to their

00:12:17,290 --> 00:12:23,170
particular thing sorry only downside to

00:12:19,600 --> 00:12:26,319
their particular thing is that when that

00:12:23,170 --> 00:12:28,420
happens the commit history is lost on

00:12:26,319 --> 00:12:30,310
transfer to the to the other project

00:12:28,420 --> 00:12:32,259
which is why they maintain a changes

00:12:30,310 --> 00:12:33,610
file with the full changelog because

00:12:32,259 --> 00:12:36,579
that's the only authoritative source

00:12:33,610 --> 00:12:37,930
their system has now since we use git

00:12:36,579 --> 00:12:39,519
for a version control system if we

00:12:37,930 --> 00:12:41,649
implemented an equivalent to this model

00:12:39,519 --> 00:12:43,750
we can preserve that commit history

00:12:41,649 --> 00:12:46,329
because of the way it works and it is

00:12:43,750 --> 00:12:47,889
not completely stupid it is always so

00:12:46,329 --> 00:12:50,170
much stupid it is not completely stupid

00:12:47,889 --> 00:12:51,970
so we can keep commits as they come in

00:12:50,170 --> 00:12:52,930
from various things from pull requests

00:12:51,970 --> 00:12:55,120
and stuff like that and that's how it

00:12:52,930 --> 00:12:57,519
works now with with Packer disk it

00:12:55,120 --> 00:12:58,709
it's just nothing useful happens after

00:12:57,519 --> 00:13:03,459
you merge a pull request

00:12:58,709 --> 00:13:04,750
who knew apparently nobody so some of

00:13:03,459 --> 00:13:06,040
the things that Igor and I have been

00:13:04,750 --> 00:13:07,209
talking about this this conversation

00:13:06,040 --> 00:13:09,819
actually started when we were at the

00:13:07,209 --> 00:13:12,189
openSUSE conference back in May was that

00:13:09,819 --> 00:13:17,399
we want to look at moving the change

00:13:12,189 --> 00:13:20,830
logs out of the spec file wow really

00:13:17,399 --> 00:13:23,980
out of the spec file

00:13:20,830 --> 00:13:26,740
in to get ideally as a get commit

00:13:23,980 --> 00:13:27,640
message I don't actually know how we

00:13:26,740 --> 00:13:29,560
want to do this

00:13:27,640 --> 00:13:33,459
because one of the problems with get in

00:13:29,560 --> 00:13:36,459
fedora specifically is that it commits

00:13:33,459 --> 00:13:37,750
are immutable and this is a problem

00:13:36,459 --> 00:13:40,630
because you can't amend the commit

00:13:37,750 --> 00:13:42,490
message unless we figure out another way

00:13:40,630 --> 00:13:45,040
of doing it or we decide some aspect of

00:13:42,490 --> 00:13:46,480
commits is mutable and I don't know what

00:13:45,040 --> 00:13:48,730
we will do or how we would do that like

00:13:46,480 --> 00:13:56,770
annotations for example could be mutable

00:13:48,730 --> 00:13:59,680
while the actual commit is not I don't

00:13:56,770 --> 00:14:01,149
think anyone else would be happy about

00:13:59,680 --> 00:14:04,290
that but I would agree with you on that

00:14:01,149 --> 00:14:04,290
yeah sure

00:14:11,759 --> 00:14:21,619
that's a brand-new commit when that

00:14:13,319 --> 00:14:21,619
happens but why

00:14:34,550 --> 00:14:42,400
so first I have worked in projects where

00:14:38,360 --> 00:14:45,470
they use be really okay what what oh

00:14:42,400 --> 00:14:51,050
yeah uh well I don't actually know what

00:14:45,470 --> 00:14:54,440
he said so oh well I was more I was more

00:14:51,050 --> 00:14:56,870
like okay whatever but no okay what you

00:14:54,440 --> 00:14:58,460
were saying was basically we want to

00:14:56,870 --> 00:14:59,630
accept the history as ugly and we're

00:14:58,460 --> 00:15:00,650
going to just go ahead and commit it

00:14:59,630 --> 00:15:02,930
that we're going to just generate

00:15:00,650 --> 00:15:05,570
changelogs based on that or do prefixes

00:15:02,930 --> 00:15:09,230
to match on what the what the way to

00:15:05,570 --> 00:15:10,850
handle a valid message to ship out my

00:15:09,230 --> 00:15:12,950
counterpoint to this as someone who's

00:15:10,850 --> 00:15:15,110
actually worked in distributions that do

00:15:12,950 --> 00:15:17,210
use the commit messages for change luck

00:15:15,110 --> 00:15:20,600
so in Mott in the mandrill family for

00:15:17,210 --> 00:15:21,770
going on almost twenty years now all of

00:15:20,600 --> 00:15:23,870
their change logs have been generated

00:15:21,770 --> 00:15:25,670
from VCS they started with CVS they went

00:15:23,870 --> 00:15:27,350
to subversion up at Mandriva does it

00:15:25,670 --> 00:15:32,210
from yet mocchi has still does it from

00:15:27,350 --> 00:15:34,820
some subversion the problem is that with

00:15:32,210 --> 00:15:36,560
get specifically this becomes really

00:15:34,820 --> 00:15:39,170
painful if you want to make sure that

00:15:36,560 --> 00:15:41,810
you can identify the same build or the

00:15:39,170 --> 00:15:44,510
same iteration and have a different

00:15:41,810 --> 00:15:46,370
message because the act of changing the

00:15:44,510 --> 00:15:50,810
message changes the blob which

00:15:46,370 --> 00:15:52,400
dereferences it from from the system the

00:15:50,810 --> 00:15:53,660
thought I had about this and I'm not

00:15:52,400 --> 00:15:55,760
completely sure if this would work is

00:15:53,660 --> 00:15:57,440
that if we don't allow the real commit

00:15:55,760 --> 00:15:59,960
message to ever be used and we always

00:15:57,440 --> 00:16:02,990
generate an annotation so if we annotate

00:15:59,960 --> 00:16:05,210
and allow annotations to be edited then

00:16:02,990 --> 00:16:08,270
that allows us to change it but I don't

00:16:05,210 --> 00:16:11,120
know how this controls work for

00:16:08,270 --> 00:16:13,070
annotations and I'm afraid to experiment

00:16:11,120 --> 00:16:18,250
with our disk it because I don't want

00:16:13,070 --> 00:16:18,250
bad things in there yeah

00:16:34,350 --> 00:16:39,750
bad yeah this is bad this is bad for

00:16:38,040 --> 00:16:43,020
your for your conception of the world

00:16:39,750 --> 00:16:45,600
the pre wanted this to work from a rel

00:16:43,020 --> 00:16:47,190
Santa's Fedora sandwich we would

00:16:45,600 --> 00:16:48,900
actually need the real commit messages

00:16:47,190 --> 00:16:51,960
from the real diskette that exists

00:16:48,900 --> 00:16:53,690
within rel to have a way to mimic those

00:16:51,960 --> 00:16:56,730
messages when they're pushed out to

00:16:53,690 --> 00:17:00,500
CentOS and that is going to be

00:16:56,730 --> 00:17:03,480
non-trivial possible but don trivial

00:17:00,500 --> 00:17:07,500
because sending annotated messages the

00:17:03,480 --> 00:17:10,020
api is weird and hard especially if they

00:17:07,500 --> 00:17:12,140
get amended later which will definitely

00:17:10,020 --> 00:17:12,140
happen

00:17:28,850 --> 00:17:31,419
you

00:17:34,980 --> 00:17:45,180
mm-hmm yeah sure we could but I will I

00:17:43,560 --> 00:17:48,120
will point out that that is actually the

00:17:45,180 --> 00:17:50,100
approach souza uses right now so the the

00:17:48,120 --> 00:17:52,350
commits that are going into the OBS VCS

00:17:50,100 --> 00:17:54,210
do contain all the same information

00:17:52,350 --> 00:17:57,210
that's in there changes file the changes

00:17:54,210 --> 00:17:59,700
file is a separate file and that is on

00:17:57,210 --> 00:18:02,040
build merged into the spec file to

00:17:59,700 --> 00:18:06,120
produce an RPM change log so that

00:18:02,040 --> 00:18:08,130
approach can work the issue is that

00:18:06,120 --> 00:18:09,750
people have to agree what the frickin

00:18:08,130 --> 00:18:14,960
files format is going to be and that is

00:18:09,750 --> 00:18:14,960
a lot more work to go down what

00:18:20,690 --> 00:18:28,909
so so two things one you're wrong

00:18:25,340 --> 00:18:30,859
because there have always been VCS as in

00:18:28,909 --> 00:18:34,609
the era of package managers VCS has

00:18:30,859 --> 00:18:36,649
predate package managers as and package

00:18:34,609 --> 00:18:38,419
managers changelogs are intended to

00:18:36,649 --> 00:18:39,799
represent information that people can

00:18:38,419 --> 00:18:44,629
consume to understand what the hell

00:18:39,799 --> 00:18:46,009
happened so the idea of obsoleting a

00:18:44,629 --> 00:18:47,389
package change log is out of the

00:18:46,009 --> 00:18:48,889
question because you are making the

00:18:47,389 --> 00:18:51,169
assumption everybody has access to the

00:18:48,889 --> 00:18:53,629
same data you knew we know that's not

00:18:51,169 --> 00:18:56,179
true because Rell is quite obviously not

00:18:53,629 --> 00:18:58,309
available for people to look at and we

00:18:56,179 --> 00:19:00,409
know that is not true because Santos has

00:18:58,309 --> 00:19:04,070
less than enough information to build

00:19:00,409 --> 00:19:05,720
itself so we know that this is true and

00:19:04,070 --> 00:19:09,259
that means we need to have a way to

00:19:05,720 --> 00:19:10,729
externalize that information in the

00:19:09,259 --> 00:19:12,200
Mandriva family this has never been a

00:19:10,729 --> 00:19:14,149
problem because from the very beginning

00:19:12,200 --> 00:19:16,489
of the how the distro is built they

00:19:14,149 --> 00:19:19,429
started with a VCS import and they built

00:19:16,489 --> 00:19:22,700
everything that way and as part of their

00:19:19,429 --> 00:19:25,789
process that change log is externalized

00:19:22,700 --> 00:19:27,769
and copied into the spec file as it

00:19:25,789 --> 00:19:29,720
produces the source RPM so there is

00:19:27,769 --> 00:19:31,429
absolutely no way nobody gets all the

00:19:29,720 --> 00:19:33,679
information they even have the revision

00:19:31,429 --> 00:19:34,940
that it came from all that informations

00:19:33,679 --> 00:19:38,059
there and they can they actually give

00:19:34,940 --> 00:19:40,989
more detail than most other

00:19:38,059 --> 00:19:43,369
distributions that do VCS based stuff so

00:19:40,989 --> 00:19:45,739
that's sort of the model i want to aim

00:19:43,369 --> 00:19:49,909
for for us because i want us to have

00:19:45,739 --> 00:19:51,979
more reproducibility not less so i don't

00:19:49,909 --> 00:19:57,799
think it's in the cards to say we don't

00:19:51,979 --> 00:20:00,679
do a changelog at all because i was

00:19:57,799 --> 00:20:02,119
going kind of blind here so the other

00:20:00,679 --> 00:20:05,539
bit is that the release field is a

00:20:02,119 --> 00:20:08,149
nightmare by itself because weird things

00:20:05,539 --> 00:20:09,619
happen as we build stuff and we have to

00:20:08,149 --> 00:20:12,470
keep changing it and people who don't

00:20:09,619 --> 00:20:15,950
know that NVRs that fail can be rebuilt

00:20:12,470 --> 00:20:18,529
again with the same NVR keep bumping it

00:20:15,950 --> 00:20:20,119
and causing conflicts and changes as we

00:20:18,529 --> 00:20:22,429
keep as we do cherry picks and other

00:20:20,119 --> 00:20:24,379
weird things with gear or git flow that

00:20:22,429 --> 00:20:28,729
we have our git workflow that we have

00:20:24,379 --> 00:20:30,139
for disk it and it's also a point of

00:20:28,729 --> 00:20:32,619
contention for figuring out how to do

00:20:30,139 --> 00:20:34,220
upgrades properly how to deal with

00:20:32,619 --> 00:20:39,200
version

00:20:34,220 --> 00:20:41,210
the package as in its entirety and it

00:20:39,200 --> 00:20:43,340
makes it a problem when if we want to

00:20:41,210 --> 00:20:47,630
have automatic rebuilds on dependencies

00:20:43,340 --> 00:20:49,610
so we what we're looking at is the idea

00:20:47,630 --> 00:20:51,409
of making it so whatever you put in the

00:20:49,610 --> 00:20:53,179
release field does not matter because

00:20:51,409 --> 00:20:55,909
it's gonna get reset to one disk and

00:20:53,179 --> 00:20:57,980
it's gonna get a suffix indicating the

00:20:55,909 --> 00:20:59,960
build or whatever like some kind of idea

00:20:57,980 --> 00:21:01,580
of how many builds did it happen from

00:20:59,960 --> 00:21:03,409
this last commit from this last version

00:21:01,580 --> 00:21:04,880
Bob things like that that information

00:21:03,409 --> 00:21:06,950
allows you to understand how many

00:21:04,880 --> 00:21:08,240
changes have happened with the same NVR

00:21:06,950 --> 00:21:10,490
how many rebuilds have happened with

00:21:08,240 --> 00:21:11,659
that same change and you get a better

00:21:10,490 --> 00:21:16,179
understanding of how many times

00:21:11,659 --> 00:21:16,179
something has been used yep

00:21:21,520 --> 00:21:25,850
if it's a suffix then you can still do

00:21:24,140 --> 00:21:27,500
it on the prefix that is being set based

00:21:25,850 --> 00:21:29,420
on what the build the build systems

00:21:27,500 --> 00:21:30,920
mechanism for setting that will be

00:21:29,420 --> 00:21:32,900
predictable and if you bump a new

00:21:30,920 --> 00:21:34,160
version it resets to one things like

00:21:32,900 --> 00:21:35,630
that there will be a set of rules that

00:21:34,160 --> 00:21:37,880
you can actually use for that otherwise

00:21:35,630 --> 00:21:39,770
you could do add just like something

00:21:37,880 --> 00:21:42,230
something that openSUSE guys do is they

00:21:39,770 --> 00:21:43,970
do a plus one on the version for an

00:21:42,230 --> 00:21:45,440
obsolete which functions in the same

00:21:43,970 --> 00:21:49,310
role because they're never gonna really

00:21:45,440 --> 00:21:51,470
do a plus one version but that's kind of

00:21:49,310 --> 00:21:53,090
dumb and it's based on real weird hacky

00:21:51,470 --> 00:21:54,530
rules again something that we're

00:21:53,090 --> 00:21:57,410
thinking about I don't actually have

00:21:54,530 --> 00:21:59,150
fully solid details about how this is

00:21:57,410 --> 00:22:00,920
supposed to work but like the release

00:21:59,150 --> 00:22:02,180
field has to be solved some way because

00:22:00,920 --> 00:22:08,240
otherwise we have no way of doing

00:22:02,180 --> 00:22:09,860
automatic rebuilds so and this leads to

00:22:08,240 --> 00:22:12,410
the create tooling which will rebuild

00:22:09,860 --> 00:22:14,090
packages on dependency changes I want to

00:22:12,410 --> 00:22:16,610
make it so proven packages don't have to

00:22:14,090 --> 00:22:17,900
be heroes because it sucks when we have

00:22:16,610 --> 00:22:20,150
to do it

00:22:17,900 --> 00:22:21,590
fixing half of the dependency chain

00:22:20,150 --> 00:22:24,680
because something just broke or

00:22:21,590 --> 00:22:26,600
something changed and the person in made

00:22:24,680 --> 00:22:30,800
the change doesn't have the power to fix

00:22:26,600 --> 00:22:32,270
it and has to beg to fix it is terrible

00:22:30,800 --> 00:22:34,730
we put people in a terrible position

00:22:32,270 --> 00:22:37,190
when we do that and that should never be

00:22:34,730 --> 00:22:38,630
the case we should never put people in a

00:22:37,190 --> 00:22:39,980
position of being afraid of actually

00:22:38,630 --> 00:22:41,810
shipping new software even into ride

00:22:39,980 --> 00:22:45,140
because they can't fix everything else

00:22:41,810 --> 00:22:47,000
that relate that depends on it and I

00:22:45,140 --> 00:22:50,630
think this is actually one of the

00:22:47,000 --> 00:22:52,400
underlying symptoms that caused the

00:22:50,630 --> 00:22:54,890
creation of the modularity stuff because

00:22:52,400 --> 00:22:56,780
a lot of people were talking about well

00:22:54,890 --> 00:22:57,980
this makes it easier for me to make it

00:22:56,780 --> 00:22:59,300
so that my stuff is always gonna be

00:22:57,980 --> 00:23:01,040
working and then I don't have to deal

00:22:59,300 --> 00:23:03,320
with breakage is happening as the

00:23:01,040 --> 00:23:04,910
distribution turns but if this part was

00:23:03,320 --> 00:23:06,590
already handled for you why do you care

00:23:04,910 --> 00:23:09,050
anymore because it's already fixing

00:23:06,590 --> 00:23:10,430
itself and if it fails you can fix your

00:23:09,050 --> 00:23:14,440
aspect without having to worry about the

00:23:10,430 --> 00:23:14,440
rest of it yeah

00:23:25,430 --> 00:23:30,820
so maybe maybe I'm not sure

00:23:36,230 --> 00:23:39,889
right if there it requires human

00:23:37,940 --> 00:23:43,269
intervention then there's a problem and

00:23:39,889 --> 00:23:43,269
that mean that might be necessary

00:23:55,620 --> 00:24:00,390
so again I'll refer back to my

00:23:58,590 --> 00:24:03,210
experience working with an OBS and

00:24:00,390 --> 00:24:05,070
internally and in openSUSE open OBS is

00:24:03,210 --> 00:24:07,559
actually a policy control for how it

00:24:05,070 --> 00:24:09,450
does rebuilds so it can do it can do it

00:24:07,559 --> 00:24:11,400
based on whether a dependency disappears

00:24:09,450 --> 00:24:13,230
whether it should always happen or

00:24:11,400 --> 00:24:14,159
whether it should do it not at all and

00:24:13,230 --> 00:24:16,740
it should require human intervention

00:24:14,159 --> 00:24:18,480
every time so the last one is the stupid

00:24:16,740 --> 00:24:20,070
mode and you should never do that and

00:24:18,480 --> 00:24:22,770
that is the mode we operate in in fedora

00:24:20,070 --> 00:24:24,570
the first mode is the mode that

00:24:22,770 --> 00:24:26,220
tumbleweed and rawhide should operate in

00:24:24,570 --> 00:24:28,980
because that's the mode where everything

00:24:26,220 --> 00:24:30,990
gets fixed the second mode is the way

00:24:28,980 --> 00:24:33,149
openSUSE leap operates and that's the

00:24:30,990 --> 00:24:35,100
way that rel like distros and stable

00:24:33,149 --> 00:24:36,480
releases should operate it and that

00:24:35,100 --> 00:24:40,529
allows for things to be fixed without

00:24:36,480 --> 00:24:43,440
everything blowing up so we would need a

00:24:40,529 --> 00:24:44,970
policy control like that but rebuilding

00:24:43,440 --> 00:24:47,490
on dependency changes absolutely needs

00:24:44,970 --> 00:24:50,510
to happen because otherwise lots and

00:24:47,490 --> 00:24:55,049
lots of things will just subtly break

00:24:50,510 --> 00:24:56,190
and yeah so that's kind of the it for

00:24:55,049 --> 00:25:01,799
that part but like if there's any

00:24:56,190 --> 00:25:15,919
questions feedback whatever that's sure

00:25:01,799 --> 00:25:18,870
why don't you talk now so basically

00:25:15,919 --> 00:25:21,539
about the release fields a new mention

00:25:18,870 --> 00:25:23,159
like that we want to generate it but he

00:25:21,539 --> 00:25:26,580
didn't mention like what exactly do we

00:25:23,159 --> 00:25:29,309
want to put there so our idea was to put

00:25:26,580 --> 00:25:31,289
there two numbers so you put first

00:25:29,309 --> 00:25:34,020
number is the number of commits since

00:25:31,289 --> 00:25:35,880
the version bump and the second number

00:25:34,020 --> 00:25:37,740
is number of the rebuilds of the commits

00:25:35,880 --> 00:25:39,330
so basically if you don't push any new

00:25:37,740 --> 00:25:40,919
commits that would answer Mira's

00:25:39,330 --> 00:25:42,630
question about like how do you observe

00:25:40,919 --> 00:25:43,980
you things because only the second

00:25:42,630 --> 00:25:46,440
number would be incremented over the

00:25:43,980 --> 00:25:48,270
time yeah and basically you know number

00:25:46,440 --> 00:25:50,970
of commits you know when version changed

00:25:48,270 --> 00:25:53,070
so you actually know that yeah and the

00:25:50,970 --> 00:25:56,399
second one is number of reveals so we

00:25:53,070 --> 00:25:59,039
can do this in Koji when building s rpm

00:25:56,399 --> 00:26:01,200
so we could look up previous builds find

00:25:59,039 --> 00:26:03,210
the committee it was made from find a

00:26:01,200 --> 00:26:06,210
number of commits between and put that

00:26:03,210 --> 00:26:07,490
number in source rpm so source rpm which

00:26:06,210 --> 00:26:09,050
you would get from

00:26:07,490 --> 00:26:21,400
the federal would already contain the

00:26:09,050 --> 00:26:21,400
number so

00:26:32,640 --> 00:26:41,370
so so so the question was what will

00:26:37,590 --> 00:26:44,190
happen if we have two different let's

00:26:41,370 --> 00:26:50,690
say side tags and we do build over there

00:26:44,190 --> 00:26:50,690
and there so I think yeah we did

00:27:23,870 --> 00:27:26,500
yep

00:27:39,080 --> 00:27:42,039
yep that's it

00:27:52,559 --> 00:28:01,470
so yeah yeah you got it I didn't have to

00:27:59,280 --> 00:28:06,059
say it but basically if you just counted

00:28:01,470 --> 00:28:07,200
only the builds you could count just the

00:28:06,059 --> 00:28:08,760
builds but the problem is that it keeps

00:28:07,200 --> 00:28:10,500
resetting every time with the policies

00:28:08,760 --> 00:28:12,990
to reset those every time you bump the

00:28:10,500 --> 00:28:14,340
version and that makes it and if you do

00:28:12,990 --> 00:28:16,290
it in different tags it's different it's

00:28:14,340 --> 00:28:19,260
difficult to count them and it becomes

00:28:16,290 --> 00:28:21,360
really really weird we want to have more

00:28:19,260 --> 00:28:23,190
or less a linear path for understanding

00:28:21,360 --> 00:28:27,179
this and also counting the git commits

00:28:23,190 --> 00:28:30,870
is a very stable is a word as I would

00:28:27,179 --> 00:28:33,300
use for getting the number that you can

00:28:30,870 --> 00:28:34,679
use for obsoletes like the the main the

00:28:33,300 --> 00:28:36,660
main reason for even carrying about it

00:28:34,679 --> 00:28:38,640
is we need a stable number for

00:28:36,660 --> 00:28:41,190
obsoleting because otherwise i wouldn't

00:28:38,640 --> 00:28:43,170
care because in the openSUSE world they

00:28:41,190 --> 00:28:46,230
don't do this at all they actually just

00:28:43,170 --> 00:28:47,610
let everything just dist upgrade up and

00:28:46,230 --> 00:28:49,290
down because and they don't really use

00:28:47,610 --> 00:28:50,910
obsoletes in the same way we do so they

00:28:49,290 --> 00:28:52,980
never really deal with this problem and

00:28:50,910 --> 00:28:55,110
I don't particularly want to break that

00:28:52,980 --> 00:28:56,580
particular aspect because it's actually

00:28:55,110 --> 00:28:59,250
not a bad way to deal with package

00:28:56,580 --> 00:29:02,090
replacements or version downgrades and

00:28:59,250 --> 00:29:02,090
upgrades yep

00:29:15,580 --> 00:29:21,890
because I don't want to do that so I

00:29:19,460 --> 00:29:23,540
have actually worked in a package so I'm

00:29:21,890 --> 00:29:25,720
gonna point out something that I wasn't

00:29:23,540 --> 00:29:28,160
going to say but you brought it up so

00:29:25,720 --> 00:29:29,990
Matt was asking why not just ignore the

00:29:28,160 --> 00:29:32,900
the Eevee part and just count the

00:29:29,990 --> 00:29:35,510
release field for for version sorting so

00:29:32,900 --> 00:29:36,100
I have worked in a distro that does it

00:29:35,510 --> 00:29:39,650
that way

00:29:36,100 --> 00:29:41,300
so it is a bad idea because it means

00:29:39,650 --> 00:29:44,530
that you can never figure out what

00:29:41,300 --> 00:29:44,530
you're actually moving to

00:30:13,450 --> 00:30:22,280
yes I don't want to think about buying

00:30:15,950 --> 00:30:24,169
right now the epic of 12 is insane yeah

00:30:22,280 --> 00:30:27,770
so soulless actually works this way

00:30:24,169 --> 00:30:29,240
there yo package system ignores the in

00:30:27,770 --> 00:30:31,760
the EPR comparison they only compare

00:30:29,240 --> 00:30:34,040
release and it always goes up except for

00:30:31,760 --> 00:30:35,510
the case where it doesn't which is not

00:30:34,040 --> 00:30:38,720
important because it doesn't happen very

00:30:35,510 --> 00:30:39,830
often but it always good because the

00:30:38,720 --> 00:30:42,169
release always goes up because it's

00:30:39,830 --> 00:30:44,210
being counted based on their get commit

00:30:42,169 --> 00:30:46,940
message method from the base all the way

00:30:44,210 --> 00:30:48,890
up they also don't support pull requests

00:30:46,940 --> 00:30:51,290
and that's actually the main reason they

00:30:48,890 --> 00:30:52,520
can even do that because if your your

00:30:51,290 --> 00:30:54,140
commit history has to be fully linear

00:30:52,520 --> 00:30:55,730
for that to work correctly if you have

00:30:54,140 --> 00:31:01,010
merge commits and sideways trees that

00:30:55,730 --> 00:31:06,080
counting is really up you don't

00:31:01,010 --> 00:31:08,809
but but the problem the the problem is

00:31:06,080 --> 00:31:11,750
that if you have pull requests or merge

00:31:08,809 --> 00:31:13,880
requests you can in fact accept and we

00:31:11,750 --> 00:31:15,620
have them in in our diskette in some

00:31:13,880 --> 00:31:18,260
places where people have done merge

00:31:15,620 --> 00:31:21,970
commits and that messes up gets the get

00:31:18,260 --> 00:31:24,049
counting for commit messages for commits

00:31:21,970 --> 00:31:26,200
yeah don't don't think about it hard

00:31:24,049 --> 00:31:26,200
enough

00:31:36,029 --> 00:31:42,300
yeah

00:31:38,660 --> 00:31:42,300
[Laughter]

00:31:52,759 --> 00:31:57,259
yeah don't do this

00:32:15,980 --> 00:32:22,559
ideally ideally in your case yeah

00:32:20,580 --> 00:32:24,420
ideally in this case DNF would just

00:32:22,559 --> 00:32:25,650
follow repo sources as a key for

00:32:24,420 --> 00:32:27,270
identifying where it should come from

00:32:25,650 --> 00:32:28,830
and then just not care anymore about

00:32:27,270 --> 00:32:32,640
other ones until the user says to switch

00:32:28,830 --> 00:32:33,660
which is how zipper operates except for

00:32:32,640 --> 00:32:35,340
it's a little strange on that behavior

00:32:33,660 --> 00:32:38,190
but that's supposedly how zipper

00:32:35,340 --> 00:32:39,450
operates which is they call it sticky

00:32:38,190 --> 00:32:42,210
vendors so they operate on the vendor

00:32:39,450 --> 00:32:43,830
key as well as the repo ID as a

00:32:42,210 --> 00:32:45,540
combination for figuring out whether

00:32:43,830 --> 00:32:48,000
something should go follow that source

00:32:45,540 --> 00:32:51,990
or not so and they have vendor classes

00:32:48,000 --> 00:32:53,370
and other fun stuff but the point is we

00:32:51,990 --> 00:32:55,470
don't want to mess with the EDR

00:32:53,370 --> 00:32:58,350
comparison too much because it breaks

00:32:55,470 --> 00:32:59,730
too many user expectations and it also

00:32:58,350 --> 00:33:02,970
makes it super hard for people to

00:32:59,730 --> 00:33:05,490
experiment experimentation is important

00:33:02,970 --> 00:33:08,520
and valuable otherwise and if you if we

00:33:05,490 --> 00:33:10,530
make it so that we must all operate in

00:33:08,520 --> 00:33:13,710
the coachee all the time there is

00:33:10,530 --> 00:33:15,179
literally no way for people to do really

00:33:13,710 --> 00:33:16,590
crazy things because Koji doesn't

00:33:15,179 --> 00:33:19,830
support being crazy

00:33:16,590 --> 00:33:21,900
it literally has no experimental mode it

00:33:19,830 --> 00:33:23,910
has no way to do playground D things

00:33:21,900 --> 00:33:25,350
properly everything must wind up in dis

00:33:23,910 --> 00:33:25,800
kit which means that it's stuck there

00:33:25,350 --> 00:33:27,809
forever

00:33:25,800 --> 00:33:30,179
and if you don't and so like there's too

00:33:27,809 --> 00:33:32,429
many problems with that for being able

00:33:30,179 --> 00:33:35,760
to consider doing that in the soleus

00:33:32,429 --> 00:33:37,920
workflow they actually don't have a

00:33:35,760 --> 00:33:39,000
playground mode they don't have a way

00:33:37,920 --> 00:33:40,890
for people to do any of these things

00:33:39,000 --> 00:33:42,630
there is no third party sources because

00:33:40,890 --> 00:33:46,200
nobody makes yo packages outside of

00:33:42,630 --> 00:33:48,390
Solus so it's not a big deal and they

00:33:46,200 --> 00:33:50,280
can have that kind of control Fedora has

00:33:48,390 --> 00:33:53,150
an ecosystem and that it has to be

00:33:50,280 --> 00:33:53,150
considered yep

00:33:58,090 --> 00:34:02,700
sure you mean the second to hit the

00:34:00,430 --> 00:34:02,700
buttons

00:34:12,419 --> 00:34:21,859
yep because our tools don't work no they

00:34:19,679 --> 00:34:21,859
don't

00:34:27,840 --> 00:34:31,440
yeah but that's why our tools don't work

00:34:29,820 --> 00:34:35,790
because the this guarantees that they

00:34:31,440 --> 00:34:39,230
will get built and released no no no

00:34:35,790 --> 00:34:43,170
sorry I didn't this the when it is so

00:34:39,230 --> 00:34:46,740
every single build in OBS happens in a

00:34:43,170 --> 00:34:48,990
project that publishes so that means it

00:34:46,740 --> 00:34:52,320
releases which means people can test it

00:34:48,990 --> 00:34:58,560
and use it and whatever that part I

00:34:52,320 --> 00:35:01,760
forgot to mention well yet again mixed

00:34:58,560 --> 00:35:01,760
mixed riders sorry

00:35:07,830 --> 00:35:11,930
I know why not

00:35:18,290 --> 00:35:22,339
because you don't know whether that

00:35:19,829 --> 00:35:22,339
worked or not

00:35:34,780 --> 00:35:38,230
right so

00:36:02,080 --> 00:36:05,080
so

00:36:08,500 --> 00:36:12,270
I want to say something I mean you can

00:36:10,089 --> 00:36:12,270
too

00:36:23,480 --> 00:36:33,250
so there are several problems with what

00:36:27,350 --> 00:36:33,250
you're saying the first problem is

00:37:05,570 --> 00:37:10,130
yeah so yeah so like that's equivalent

00:37:08,600 --> 00:37:11,900
to our taggi model that that's not the

00:37:10,130 --> 00:37:14,990
problem the problem is we don't do any

00:37:11,900 --> 00:37:17,210
tests at Build time at all ever they

00:37:14,990 --> 00:37:20,420
happen at update time so that means that

00:37:17,210 --> 00:37:21,860
everything happens too late and so if we

00:37:20,420 --> 00:37:24,170
just automatically built all the time

00:37:21,860 --> 00:37:25,850
like this we'd essentially be pushing

00:37:24,170 --> 00:37:29,020
broken packages into Koji and reserving

00:37:25,850 --> 00:37:31,190
NVRs for no particularly good reason

00:37:29,020 --> 00:37:32,990
that's not fine right now because that

00:37:31,190 --> 00:37:35,260
means it takes up storage and they never

00:37:32,990 --> 00:37:35,260
go away

00:37:39,280 --> 00:37:45,080
yeah but they happen at bode so that's

00:37:41,690 --> 00:37:47,540
still too late yeah but it's still too

00:37:45,080 --> 00:37:49,070
late you're you're literally not making

00:37:47,540 --> 00:37:51,790
it possible to replace a built in Koji

00:37:49,070 --> 00:37:51,790
so you takes up space

00:38:01,220 --> 00:38:06,470
right in the OBS model the package that

00:38:03,560 --> 00:38:07,760
isn't if the package is not needed to be

00:38:06,470 --> 00:38:10,640
pushed out the binaries are not

00:38:07,760 --> 00:38:12,290
available nothing changes or if it fails

00:38:10,640 --> 00:38:16,510
nothing gets published nothing changes

00:38:12,290 --> 00:38:16,510
again and you don't have to care

00:38:35,309 --> 00:38:51,419
yeah yeah like there has to the way that

00:38:49,890 --> 00:38:53,130
our workflow works for the automation

00:38:51,419 --> 00:38:55,709
site needs to be inverted it has to

00:38:53,130 --> 00:38:57,329
happen early rather than late so that

00:38:55,709 --> 00:38:59,279
means it has to happen when somebody

00:38:57,329 --> 00:39:02,369
does fed package build fed package build

00:38:59,279 --> 00:39:04,409
has to fail not succeed if that package

00:39:02,369 --> 00:39:06,900
build does not fail and the NVR is not

00:39:04,409 --> 00:39:10,319
marked as failed in koji there is no way

00:39:06,900 --> 00:39:12,589
to reap the build ever and that is a

00:39:10,319 --> 00:39:12,589
problem

00:39:16,750 --> 00:39:22,330
yep so in the openSUSE workflow the

00:39:20,440 --> 00:39:24,850
assumption is nothing actually is

00:39:22,330 --> 00:39:28,540
persistent until it is persisted into a

00:39:24,850 --> 00:39:30,760
compose so which is their publishing

00:39:28,540 --> 00:39:32,260
process for their repo which is the only

00:39:30,760 --> 00:39:34,180
part that actually matters so when you

00:39:32,260 --> 00:39:35,950
submit a package and it gets built and

00:39:34,180 --> 00:39:36,730
it says oh this is exactly the same as

00:39:35,950 --> 00:39:37,480
the other one it doesn't get published

00:39:36,730 --> 00:39:39,820
who cares

00:39:37,480 --> 00:39:41,470
if it is older or it's broken like the

00:39:39,820 --> 00:39:42,910
post build checks that run at the RPM

00:39:41,470 --> 00:39:44,470
build time say that there's something

00:39:42,910 --> 00:39:46,900
wrong with it it fails it doesn't get

00:39:44,470 --> 00:39:48,250
published it doesn't get built like the

00:39:46,900 --> 00:39:48,880
artifact gets thrown away nothing

00:39:48,250 --> 00:39:51,370
happens

00:39:48,880 --> 00:39:55,780
that is a very important distinction we

00:39:51,370 --> 00:39:57,490
do not have in Fedora and that is

00:39:55,780 --> 00:40:00,480
something we need to have to optimize

00:39:57,490 --> 00:40:00,480
things better yep

00:40:07,500 --> 00:40:12,900
so what we have now is in for rawhide is

00:40:11,700 --> 00:40:14,750
marginally better than what we had

00:40:12,900 --> 00:40:18,270
before what

00:40:14,750 --> 00:40:19,670
it still doesn't fix a lot of the

00:40:18,270 --> 00:40:23,190
fundamental problems for improving

00:40:19,670 --> 00:40:25,440
packager workflows and the other part of

00:40:23,190 --> 00:40:27,180
it is that because Bodie is slow it

00:40:25,440 --> 00:40:28,560
makes it actually take longer for people

00:40:27,180 --> 00:40:30,240
to do multi builds right now I

00:40:28,560 --> 00:40:32,970
understand you're working on fixing that

00:40:30,240 --> 00:40:35,430
but like one of the simple things would

00:40:32,970 --> 00:40:37,619
be to mimic the develop project kind of

00:40:35,430 --> 00:40:39,480
thing that OBS has by allowing people to

00:40:37,619 --> 00:40:41,490
have side tags that represent that and

00:40:39,480 --> 00:40:43,020
that the side tags can be the artifact

00:40:41,490 --> 00:40:48,050
that merges with fed package update

00:40:43,020 --> 00:40:48,050
rather than individual package artifacts

00:40:48,500 --> 00:40:52,800
yeah so if that happens that actually

00:40:51,240 --> 00:40:54,900
simplifies a good chunk of the pain

00:40:52,800 --> 00:40:56,970
points because that means that we can

00:40:54,900 --> 00:40:59,970
now take whole collections a lot more

00:40:56,970 --> 00:41:02,609
easily because like for example shipping

00:40:59,970 --> 00:41:04,800
the plasma update is probably the worst

00:41:02,609 --> 00:41:08,880
case scenario we have right now because

00:41:04,800 --> 00:41:10,500
it's somewhere close to 300 or so

00:41:08,880 --> 00:41:12,869
packages that have to be updated all

00:41:10,500 --> 00:41:15,140
together and because it's so big they

00:41:12,869 --> 00:41:17,099
get chunked into two and then the

00:41:15,140 --> 00:41:19,500
depending on the race of which one

00:41:17,099 --> 00:41:21,990
actually gets pushed out first your your

00:41:19,500 --> 00:41:24,440
desktops broken congratulations you have

00:41:21,990 --> 00:41:31,349
to wait 48 hours before it works again

00:41:24,440 --> 00:41:33,330
maybe Katie has an exception because of

00:41:31,349 --> 00:41:35,760
the it has ABI compatibility but

00:41:33,330 --> 00:41:38,910
behavior compatibility is not perfect

00:41:35,760 --> 00:41:39,960
and when you mess with private api's as

00:41:38,910 --> 00:41:41,280
long as they're supposed to be updated

00:41:39,960 --> 00:41:43,260
together it's not really a problem

00:41:41,280 --> 00:41:44,910
except for Bodie has limitations on

00:41:43,260 --> 00:41:48,420
handling large updates and crashes a lot

00:41:44,910 --> 00:41:50,010
when you deal with that so most of it is

00:41:48,420 --> 00:41:51,599
because Bodie crashes with large updates

00:41:50,010 --> 00:41:53,820
not because the policy doesn't allow it

00:41:51,599 --> 00:41:56,849
policy allows large updates as all hell

00:41:53,820 --> 00:41:58,020
but it just doesn't work so for multi

00:41:56,849 --> 00:41:59,280
updates with rawhide this is actually

00:41:58,020 --> 00:42:00,450
something that's gonna have to get fixed

00:41:59,280 --> 00:42:02,670
if we want to use Bodie as our

00:42:00,450 --> 00:42:04,470
integration point and I think we have to

00:42:02,670 --> 00:42:06,630
because nobody has done any development

00:42:04,470 --> 00:42:08,609
on Kouji to make it useful in that

00:42:06,630 --> 00:42:11,160
regard and so we have this weird

00:42:08,609 --> 00:42:12,810
bifurcation of our system and because

00:42:11,160 --> 00:42:14,310
everything happens too late we need a

00:42:12,810 --> 00:42:15,930
call back into Kouji tiff marker build

00:42:14,310 --> 00:42:17,310
has failed and that actually will allow

00:42:15,930 --> 00:42:19,080
us to do something approaching this

00:42:17,310 --> 00:42:21,210
without having to re-engineer the whole

00:42:19,080 --> 00:42:22,770
world so I would say

00:42:21,210 --> 00:42:23,970
one of the things that has to happen for

00:42:22,770 --> 00:42:25,859
at least a testing stuff and the

00:42:23,970 --> 00:42:27,510
automation and the gating is that if a

00:42:25,859 --> 00:42:29,550
test fails the bill has to be marked as

00:42:27,510 --> 00:42:32,490
failed in Gogi that way it can be reaped

00:42:29,550 --> 00:42:35,180
and replaced that can't happen then

00:42:32,490 --> 00:42:35,180
we're in a problem

00:42:47,589 --> 00:42:50,219
right

00:42:56,040 --> 00:42:58,670
yeah

00:42:58,750 --> 00:43:04,810
right well and and that and that's one

00:43:03,099 --> 00:43:06,280
of the reasons why one of the things I

00:43:04,810 --> 00:43:07,840
had advocated for a long time is that we

00:43:06,280 --> 00:43:09,640
need to move the things earlier in the

00:43:07,840 --> 00:43:12,490
process before the publishing phase

00:43:09,640 --> 00:43:15,869
which is what Bodie does so but we can't

00:43:12,490 --> 00:43:15,869
because we have no tooling for it

00:43:16,920 --> 00:43:30,160
Kochi in fedora does not publish to the

00:43:20,500 --> 00:43:31,359
mayor Network right right but here's the

00:43:30,160 --> 00:43:32,980
thing if you mark a build as failed it

00:43:31,359 --> 00:43:36,520
can be read it can be deleted because it

00:43:32,980 --> 00:43:38,230
falls under the garbage collection yeah

00:43:36,520 --> 00:43:41,010
that's what I'm saying if it's marked as

00:43:38,230 --> 00:43:41,010
failed it can be reaped

00:43:52,569 --> 00:44:10,650
that's true but that's why I want them

00:43:59,140 --> 00:44:10,650
to happen before they get to Bodi right

00:44:49,780 --> 00:44:58,030
so like so one idea I had about doing

00:44:56,620 --> 00:44:59,500
this before I was told summarily that

00:44:58,030 --> 00:45:01,330
Kochi is never going to get modified and

00:44:59,500 --> 00:45:02,530
we're never going to fix this was that

00:45:01,330 --> 00:45:04,060
we would add a separate test that

00:45:02,530 --> 00:45:05,800
happens after all the build step said

00:45:04,060 --> 00:45:07,180
that's before it does the tagging to

00:45:05,800 --> 00:45:09,550
push it out and be available to download

00:45:07,180 --> 00:45:11,410
would be a post build check step and

00:45:09,550 --> 00:45:13,120
that's where the test would run and if

00:45:11,410 --> 00:45:14,800
it failed that nothing gets published

00:45:13,120 --> 00:45:17,140
nothing gets pushed and the build is

00:45:14,800 --> 00:45:25,780
marked as failed but since everyone told

00:45:17,140 --> 00:45:27,280
me we can never do that I ignored it but

00:45:25,780 --> 00:45:32,950
at that point it's the same as a scratch

00:45:27,280 --> 00:45:35,130
build that's that's the whole point we

00:45:32,950 --> 00:45:35,130
don't

00:45:43,860 --> 00:45:47,090
yeah so

00:45:55,900 --> 00:46:02,049
right yeah so the the thing though is

00:46:00,519 --> 00:46:03,549
that all the tests still act on an

00:46:02,049 --> 00:46:05,470
individual package limit on an

00:46:03,549 --> 00:46:10,749
individual build no matter what form of

00:46:05,470 --> 00:46:12,130
multi or single so if you decide to

00:46:10,749 --> 00:46:13,630
change that that that changes some of

00:46:12,130 --> 00:46:15,249
the calculus for all this but I'm

00:46:13,630 --> 00:46:18,069
working off the assumption that we test

00:46:15,249 --> 00:46:19,569
every package currently with with a

00:46:18,069 --> 00:46:22,539
common set of tests that apply to

00:46:19,569 --> 00:46:24,670
everything now if those tests are run as

00:46:22,539 --> 00:46:26,829
a post build step that happens in Kouji

00:46:24,670 --> 00:46:29,200
before it marks it as tagged to go into

00:46:26,829 --> 00:46:31,900
the system then there's a there's a

00:46:29,200 --> 00:46:36,009
potential for you know avoiding the tom

00:46:31,900 --> 00:46:36,789
legal problem and so that's what I was

00:46:36,009 --> 00:46:39,970
hoping for

00:46:36,789 --> 00:46:41,619
we can't probably do that so at the next

00:46:39,970 --> 00:46:44,470
step would be figuring out how to not

00:46:41,619 --> 00:46:45,849
publish until Bodhi says it's okay and I

00:46:44,470 --> 00:46:47,740
don't know whether that's actually

00:46:45,849 --> 00:46:50,499
possible either because of how Kouji

00:46:47,740 --> 00:46:52,799
currently does its process flow to send

00:46:50,499 --> 00:46:52,799
to Bodhi

00:47:04,480 --> 00:47:12,880
right so here the the way this the

00:47:10,150 --> 00:47:14,290
reason why the OBS works the way it does

00:47:12,880 --> 00:47:15,490
where it doesn't preserve binaries

00:47:14,290 --> 00:47:19,570
anything except for the ones that are

00:47:15,490 --> 00:47:23,380
pushed is because they would run out of

00:47:19,570 --> 00:47:24,880
space in very fast because so for

00:47:23,380 --> 00:47:27,130
example my open shift origin package

00:47:24,880 --> 00:47:30,730
where i ported all of OpenShift openSUSE

00:47:27,130 --> 00:47:35,950
about a year ago has been built 41 times

00:47:30,730 --> 00:47:37,780
in tumbleweed each of those packages

00:47:35,950 --> 00:47:42,099
each iteration of those packages is like

00:47:37,780 --> 00:47:45,940
close to 250 megabytes if they if OBS

00:47:42,099 --> 00:47:47,619
kept every single build they would run

00:47:45,940 --> 00:47:48,910
out of space in my home project before

00:47:47,619 --> 00:47:52,390
they ran out of space in tumbleweed

00:47:48,910 --> 00:47:54,760
itself because it was built 41 times in

00:47:52,390 --> 00:47:56,740
tumbleweed and it was built 25 times in

00:47:54,760 --> 00:47:59,980
leap and it was built you know it all

00:47:56,740 --> 00:48:02,680
those builds add up and that is a major

00:47:59,980 --> 00:48:04,450
problem from a space point from a space

00:48:02,680 --> 00:48:06,670
preservation point of view especially

00:48:04,450 --> 00:48:09,250
since Fedora is storage it's not cheap

00:48:06,670 --> 00:48:11,109
because it's a net app appliance and so

00:48:09,250 --> 00:48:16,770
adding more space to it is not simple

00:48:11,109 --> 00:48:16,770
and probably not worth it yep

00:48:20,409 --> 00:48:29,209
what will we test uh yeah we could that

00:48:27,679 --> 00:48:31,039
that's another way to do it but we still

00:48:29,209 --> 00:48:34,039
need the test part to happen and they

00:48:31,039 --> 00:48:35,509
don't happen with scratch builds because

00:48:34,039 --> 00:48:37,009
there's not no interface to kick off

00:48:35,509 --> 00:48:38,689
from that because the problem is that

00:48:37,009 --> 00:48:48,229
that system works by shipping the crap

00:48:38,689 --> 00:48:54,829
to to to actually run the tests no no no

00:48:48,229 --> 00:48:56,900
no so that's that's not that so that

00:48:54,829 --> 00:48:58,999
only works if we disable Packers ability

00:48:56,900 --> 00:49:00,949
to do local pull requests if every pull

00:48:58,999 --> 00:49:02,929
request came from another git server and

00:49:00,949 --> 00:49:04,159
that would be less of a problem but if

00:49:02,929 --> 00:49:05,299
it comes from the same get server it

00:49:04,159 --> 00:49:06,709
doesn't matter because everything's

00:49:05,299 --> 00:49:15,199
already been committed somewhere on the

00:49:06,709 --> 00:49:17,659
pegar disk it sort of it's supposed to

00:49:15,199 --> 00:49:19,969
work that way it doesn't always but yes

00:49:17,659 --> 00:49:21,289
the problem but the issue is that you

00:49:19,969 --> 00:49:23,119
still are building something on Fedora

00:49:21,289 --> 00:49:25,249
infrastructure something is already

00:49:23,119 --> 00:49:26,839
going to be stored there something that

00:49:25,249 --> 00:49:29,959
Fedora and unfortunately that means Red

00:49:26,839 --> 00:49:31,249
Hat is responsible for so somebody is

00:49:29,959 --> 00:49:33,589
going to care about the fact that you

00:49:31,249 --> 00:49:34,759
just build a weird thing on there and in

00:49:33,589 --> 00:49:36,589
order to go through the testing process

00:49:34,759 --> 00:49:37,880
today it has to go through Bodhi and

00:49:36,589 --> 00:49:39,319
scratch builds are forbidden to go into

00:49:37,880 --> 00:49:41,809
Bodhi because they're not supposed to be

00:49:39,319 --> 00:49:43,969
real and if they're not real they can't

00:49:41,809 --> 00:49:46,900
run tests and so since we can't run

00:49:43,969 --> 00:49:46,900
tests properly for that

00:49:55,309 --> 00:50:02,390
we can't run all the tests that's the

00:49:58,069 --> 00:50:04,659
problem because he made it work through

00:50:02,390 --> 00:50:04,659
Bodi

00:50:32,960 --> 00:50:37,880
yeah

00:50:35,240 --> 00:50:38,800
yes exactly that'd be the ideal state

00:50:37,880 --> 00:50:42,890
where it could actually happen

00:50:38,800 --> 00:50:44,630
everywhere but we also need to make sure

00:50:42,890 --> 00:50:46,730
that anything that people have decided

00:50:44,630 --> 00:50:49,310
is okay there needs to be a final way to

00:50:46,730 --> 00:50:50,900
make sure it doesn't go through or if

00:50:49,310 --> 00:50:53,599
it's got like an extended test or like

00:50:50,900 --> 00:50:54,950
for example the Tom legal test that has

00:50:53,599 --> 00:50:57,290
to happen before it actually passes

00:50:54,950 --> 00:50:59,240
through if there is an automated magical

00:50:57,290 --> 00:51:01,550
thing for doing legal tests before

00:50:59,240 --> 00:51:03,260
submitting anything into fedora it'd be

00:51:01,550 --> 00:51:06,380
nice if that happened before it actually

00:51:03,260 --> 00:51:08,240
get final submission or like something

00:51:06,380 --> 00:51:10,250
that says this is gonna this is going to

00:51:08,240 --> 00:51:12,020
hang until somebody picks it up or this

00:51:10,250 --> 00:51:14,900
is good or this is just bad we're gonna

00:51:12,020 --> 00:51:16,210
snot gonna allow it and then just it

00:51:14,900 --> 00:51:19,400
just stops it from being distributed

00:51:16,210 --> 00:51:24,050
right so that there's there's multiple

00:51:19,400 --> 00:51:27,260
checks that humans may miss that need to

00:51:24,050 --> 00:51:28,520
still happen somewhere that we currently

00:51:27,260 --> 00:51:30,589
today of middlee the status quo is we

00:51:28,520 --> 00:51:32,480
don't do them at all but if we want to

00:51:30,589 --> 00:51:34,750
be better we want to do them all the

00:51:32,480 --> 00:51:34,750
time

00:51:41,440 --> 00:51:49,530
uh today yes No

00:51:50,900 --> 00:51:55,480
uh so what is published in this case

00:51:56,950 --> 00:52:06,049
sorry yeah so this is done ish whatever

00:52:03,890 --> 00:52:10,600
anyway we can talk about this more

00:52:06,049 --> 00:52:16,270
outside this is an ugly ugly talk

00:52:10,600 --> 00:52:16,270

YouTube URL: https://www.youtube.com/watch?v=jlNuV-BV2AA


