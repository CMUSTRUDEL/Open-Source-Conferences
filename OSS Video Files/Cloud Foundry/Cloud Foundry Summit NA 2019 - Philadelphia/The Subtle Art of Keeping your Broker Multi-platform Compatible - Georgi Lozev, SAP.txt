Title: The Subtle Art of Keeping your Broker Multi-platform Compatible - Georgi Lozev, SAP
Publication date: 2019-04-11
Playlist: Cloud Foundry Summit NA 2019 - Philadelphia
Description: 
	The Subtle Art of Keeping your Broker Multi-platform Compatible - Georgi Lozev, SAP

The Open Service Broker API is a standard which allows different vendors to deliver their services to applications running within Cloud Native platforms. Today there are two platform implementations Cloud Foundry && Kubernetes and thousands of brokers adhering to the specifications. As we all know often the devil is hidden in the details and while the specifications defines the general contract for platform to broker communications there are lots of pitfalls which could make your broker incompatible. So if youâ€™re a broker author or plan to be and want to give your best shot in making your broker platform agnostic, then this session is for you! 

We will start by giving an overview of the different types of broker based on their deployment model like hosted brokers, one deployed alongside the platform or on top of it. Then we will show you some pitfalls we came across while working on CF as a platform implementations and last but not least will go over good practices and future improvements that should keep our brokers multi-platform compatible.

About Georgi Lozev
Georgi is currently a software engineer for the Cloud Foundry Services API project. In the past he actively contributed to the Abacus usage metering and aggregation service and act as a DevOps engineer for a logging stacks based on ELK. Georgi gave a talk at the CF Summit and in the last several years, he is a trainer in CD & DevOps SAP in-house course.

https://www.cloudfoundry.org/
Captions: 
	00:00:00,030 --> 00:00:05,569
hey everyone welcome to the Soto art of

00:00:03,510 --> 00:00:08,610
keeping cure service broker

00:00:05,569 --> 00:00:10,530
multi-platform compatible I will

00:00:08,610 --> 00:00:12,719
immediately start because I have more

00:00:10,530 --> 00:00:15,630
than 30 slides and less than a minute

00:00:12,719 --> 00:00:18,690
for every one of them and I'm all

00:00:15,630 --> 00:00:20,939
against the odds because it already took

00:00:18,690 --> 00:00:24,480
me half a minute to just say that title

00:00:20,939 --> 00:00:27,630
of my talk I'll have three simple goals

00:00:24,480 --> 00:00:30,000
as part of my presentation the first one

00:00:27,630 --> 00:00:32,759
will be at the end of this session

00:00:30,000 --> 00:00:35,670
everyone including me to have a better

00:00:32,759 --> 00:00:37,739
understanding how we can build a service

00:00:35,670 --> 00:00:39,200
broker which is compatible with as many

00:00:37,739 --> 00:00:43,410
platforms as possible

00:00:39,200 --> 00:00:45,329
the second goal will be due to the fact

00:00:43,410 --> 00:00:47,250
that this is one of the first breakout

00:00:45,329 --> 00:00:49,590
sessions that you participate during

00:00:47,250 --> 00:00:52,710
this summit I will try to give

00:00:49,590 --> 00:00:55,260
references and give some suggestions for

00:00:52,710 --> 00:00:56,940
other talks which I believe are related

00:00:55,260 --> 00:00:59,520
to the things that I say so if you'd

00:00:56,940 --> 00:01:02,750
like to learn more about those specific

00:00:59,520 --> 00:01:06,750
things you you can do that later on and

00:01:02,750 --> 00:01:09,409
last but not least I will try to set a

00:01:06,750 --> 00:01:12,390
very very low bar with my presentation

00:01:09,409 --> 00:01:14,100
the reason for that is because I believe

00:01:12,390 --> 00:01:16,770
we should always start with low

00:01:14,100 --> 00:01:18,390
expectations then gradually during the

00:01:16,770 --> 00:01:21,180
conference when we exceed our

00:01:18,390 --> 00:01:23,490
expectations we could have an overall

00:01:21,180 --> 00:01:26,189
great conference and awesome experience

00:01:23,490 --> 00:01:29,280
and all of that will be due to my talk

00:01:26,189 --> 00:01:31,799
and my poor performance on stage I'm

00:01:29,280 --> 00:01:34,560
going to use the following agenda to

00:01:31,799 --> 00:01:38,009
achieve my plan the first question that

00:01:34,560 --> 00:01:40,320
I'll try to answer is Who am I and why

00:01:38,009 --> 00:01:43,950
do I even dare to talk about platforms

00:01:40,320 --> 00:01:45,930
and brokers the second one will be the

00:01:43,950 --> 00:01:49,530
why behind the talk or the reason that

00:01:45,930 --> 00:01:52,110
made me submit this this session and the

00:01:49,530 --> 00:01:54,570
third one will be what are the things

00:01:52,110 --> 00:01:56,820
that I personally believe affect every

00:01:54,570 --> 00:02:00,270
single broker outter in case they would

00:01:56,820 --> 00:02:04,229
like to be compatible with the different

00:02:00,270 --> 00:02:06,689
platforms so Who am I my name is Yuri if

00:02:04,229 --> 00:02:08,610
you already don't know that I mean I've

00:02:06,689 --> 00:02:11,700
been part of the Cloud Foundry community

00:02:08,610 --> 00:02:13,860
for three and a half years so far so

00:02:11,700 --> 00:02:15,540
during my career in

00:02:13,860 --> 00:02:19,920
Cloud Foundry or as Cloud Foundry

00:02:15,540 --> 00:02:21,960
contributor my former team exposed the

00:02:19,920 --> 00:02:25,200
so called metering and aggregation

00:02:21,960 --> 00:02:28,560
service CF abacus - cloud foundry users

00:02:25,200 --> 00:02:32,130
by developing a service broker so in

00:02:28,560 --> 00:02:34,830
other words I've been into the role of

00:02:32,130 --> 00:02:37,290
broker author or implementing a service

00:02:34,830 --> 00:02:40,230
broker specifically for cloud foundry as

00:02:37,290 --> 00:02:43,050
a platform then the things have slightly

00:02:40,230 --> 00:02:45,180
changed so I moved to another team which

00:02:43,050 --> 00:02:48,750
is actually a cloud foundry foundation

00:02:45,180 --> 00:02:50,700
team the so called services API or zappy

00:02:48,750 --> 00:02:53,280
and if you're not familiar with what

00:02:50,700 --> 00:02:55,709
does this team do maybe the first

00:02:53,280 --> 00:02:58,560
sentence of the team Charter will help

00:02:55,709 --> 00:03:00,780
you clarify that in general the zappy

00:02:58,560 --> 00:03:03,450
team aims to improve the developers and

00:03:00,780 --> 00:03:06,930
operators experience related to services

00:03:03,450 --> 00:03:09,750
and we mainly do this by adding

00:03:06,930 --> 00:03:12,510
improvements to the cloud controller to

00:03:09,750 --> 00:03:15,600
the CFC Ally and to the open service

00:03:12,510 --> 00:03:18,660
broker API specification or in other

00:03:15,600 --> 00:03:21,480
words I've been also into into the role

00:03:18,660 --> 00:03:25,110
of implementing a platform or cloud

00:03:21,480 --> 00:03:27,660
foundry so then the second question the

00:03:25,110 --> 00:03:30,540
why behind the talk was actually a

00:03:27,660 --> 00:03:32,810
presentation that last year in Basel my

00:03:30,540 --> 00:03:35,040
colleague Sam and I did with the

00:03:32,810 --> 00:03:37,769
presentation was with the fancy title

00:03:35,040 --> 00:03:42,030
one up two platforms three cloud

00:03:37,769 --> 00:03:44,940
services for whatever reason the people

00:03:42,030 --> 00:03:45,840
after the talk decided that I know what

00:03:44,940 --> 00:03:47,970
I'm talking about

00:03:45,840 --> 00:03:50,370
so they approached me and asked

00:03:47,970 --> 00:03:52,140
different questions and for majority of

00:03:50,370 --> 00:03:54,660
them they were into the following

00:03:52,140 --> 00:03:57,870
situation so they were having a service

00:03:54,660 --> 00:04:00,900
broker which offers their services to a

00:03:57,870 --> 00:04:03,269
market placing in cloud foundry and they

00:04:00,900 --> 00:04:05,730
were looking forward to extending their

00:04:03,269 --> 00:04:07,760
service offerings to actually users

00:04:05,730 --> 00:04:11,430
running their containers including

00:04:07,760 --> 00:04:14,160
kubernetes and quite interestingly even

00:04:11,430 --> 00:04:17,489
one of the people was looking actually

00:04:14,160 --> 00:04:20,070
for concrete reasons why their specific

00:04:17,489 --> 00:04:22,860
service and their specific broker one

00:04:20,070 --> 00:04:25,610
just magically works and won't just be

00:04:22,860 --> 00:04:27,570
able to register successfully in case

00:04:25,610 --> 00:04:29,610
because his main

00:04:27,570 --> 00:04:31,710
was quite sure that because the broker

00:04:29,610 --> 00:04:33,660
is always but we complied it should just

00:04:31,710 --> 00:04:37,080
work at the end of the day it's always

00:04:33,660 --> 00:04:39,289
bar P the specification is is is there

00:04:37,080 --> 00:04:41,910
and it's abstract enough and good enough

00:04:39,289 --> 00:04:46,199
and both platforms support that

00:04:41,910 --> 00:04:48,960
however on stage and when you're

00:04:46,199 --> 00:04:51,360
demonstrating something like in the case

00:04:48,960 --> 00:04:53,789
where Sam and I did as part of the

00:04:51,360 --> 00:04:57,570
summit where we showed how easy is to

00:04:53,789 --> 00:04:59,789
actually deploy a single applications

00:04:57,570 --> 00:05:02,160
with the application without any code

00:04:59,789 --> 00:05:04,349
changes to cut foundry and kubernetes in

00:05:02,160 --> 00:05:06,539
this application actually to consume

00:05:04,349 --> 00:05:11,070
services from the app from IBM cloud

00:05:06,539 --> 00:05:13,320
from Google Cloud and from Asia however

00:05:11,070 --> 00:05:14,669
when the things come to production and

00:05:13,320 --> 00:05:16,919
when the things come to different

00:05:14,669 --> 00:05:19,889
services and different offerings and

00:05:16,919 --> 00:05:23,280
different brokers the things are not as

00:05:19,889 --> 00:05:25,410
trivial as on stage and as some demo and

00:05:23,280 --> 00:05:28,169
the reason behind the talk is simply to

00:05:25,410 --> 00:05:30,780
just give you the other perspective or

00:05:28,169 --> 00:05:33,300
the other point of view about what are

00:05:30,780 --> 00:05:36,090
the things that you need to consider if

00:05:33,300 --> 00:05:39,120
you aim for a broker that is compatible

00:05:36,090 --> 00:05:41,070
with the different platforms so I'm

00:05:39,120 --> 00:05:42,990
going to start with a brief introduction

00:05:41,070 --> 00:05:45,870
to the common terminology that I'm going

00:05:42,990 --> 00:05:48,330
to use later to talk most probably most

00:05:45,870 --> 00:05:50,490
of you are already familiar with with

00:05:48,330 --> 00:05:54,030
that but there bear with me I'll try to

00:05:50,490 --> 00:05:56,639
keep it short so open service broker API

00:05:54,030 --> 00:05:59,520
or always bar P or just the spec how we

00:05:56,639 --> 00:06:02,250
usually reference that is actually a

00:05:59,520 --> 00:06:04,340
document so it's a readme it's a

00:06:02,250 --> 00:06:08,909
document which defines a contract

00:06:04,340 --> 00:06:11,370
between platforms and brokers so what do

00:06:08,909 --> 00:06:14,720
we usually refer when we say a platform

00:06:11,370 --> 00:06:17,909
so a platform is Cloud Foundry or

00:06:14,720 --> 00:06:20,820
talking or getting even a little bit

00:06:17,909 --> 00:06:22,770
further into the details the component

00:06:20,820 --> 00:06:25,020
from the Cloud Foundry ecosystem which

00:06:22,770 --> 00:06:28,020
is responsible for implementing the

00:06:25,020 --> 00:06:29,880
platform part of the specification is

00:06:28,020 --> 00:06:32,550
called the cloud controller this is the

00:06:29,880 --> 00:06:36,330
main component which my team contributes

00:06:32,550 --> 00:06:37,740
to the second component or the

00:06:36,330 --> 00:06:38,360
equivalent in the queue bernetta

00:06:37,740 --> 00:06:39,770
sequence

00:06:38,360 --> 00:06:42,849
system is called the service catalog

00:06:39,770 --> 00:06:45,639
this is the project which actually

00:06:42,849 --> 00:06:47,900
bridges together at the container

00:06:45,639 --> 00:06:50,229
orchestration of kubernetes together

00:06:47,900 --> 00:06:53,210
with the concepts of of the brokers and

00:06:50,229 --> 00:06:53,979
services and bindings and no that kind

00:06:53,210 --> 00:06:57,259
of stuff

00:06:53,979 --> 00:06:59,330
so the next abstraction or the next main

00:06:57,259 --> 00:07:02,090
actor as part of the specification is

00:06:59,330 --> 00:07:04,610
the well-known broker so brokers

00:07:02,090 --> 00:07:07,580
actually just advertise a set of

00:07:04,610 --> 00:07:12,469
services and plants rather catalog and

00:07:07,580 --> 00:07:15,529
they handle some requests based on some

00:07:12,469 --> 00:07:18,050
kind of user action which provision or

00:07:15,529 --> 00:07:21,500
create service instance which creates a

00:07:18,050 --> 00:07:24,560
binding or the equivalent destructive

00:07:21,500 --> 00:07:26,629
operations like unbind or the provision

00:07:24,560 --> 00:07:28,699
or delete of a service instance so it's

00:07:26,629 --> 00:07:31,400
a pretty powerful abstraction where you

00:07:28,699 --> 00:07:34,400
can fit a lot of things and you can

00:07:31,400 --> 00:07:36,680
actually connect those platforms where

00:07:34,400 --> 00:07:39,259
your workloads live to different kind of

00:07:36,680 --> 00:07:41,860
service offerings so a typical example

00:07:39,259 --> 00:07:44,539
that a lot of people use to actually

00:07:41,860 --> 00:07:48,740
give something concrete about a broker

00:07:44,539 --> 00:07:53,259
is the MySQL broker or the my sequel

00:07:48,740 --> 00:07:56,569
broker which advertised a service which

00:07:53,259 --> 00:07:59,270
creates a dedicated relational database

00:07:56,569 --> 00:08:03,409
for you and the plants usually are small

00:07:59,270 --> 00:08:05,089
medium some kind of t-shirt size so once

00:08:03,409 --> 00:08:07,729
we have this common understanding about

00:08:05,089 --> 00:08:10,099
the terminal terminology what are the

00:08:07,729 --> 00:08:11,810
different types of brokers based on

00:08:10,099 --> 00:08:15,379
their deployment mechanism that are

00:08:11,810 --> 00:08:17,599
quite popular today so the first type of

00:08:15,379 --> 00:08:19,460
broker is the one that I call and

00:08:17,599 --> 00:08:22,219
usually most people refer as one

00:08:19,460 --> 00:08:24,409
deployed alongside the platform so if

00:08:22,219 --> 00:08:26,479
you if we imagine that this is some kind

00:08:24,409 --> 00:08:29,509
of private network which the platform

00:08:26,479 --> 00:08:33,260
lives in those service brokers are

00:08:29,509 --> 00:08:35,779
usually deployed by a boss and they live

00:08:33,260 --> 00:08:38,269
right next to the platform in some kind

00:08:35,779 --> 00:08:40,550
of inner private circle or in our

00:08:38,269 --> 00:08:45,290
network of this of this platform and

00:08:40,550 --> 00:08:47,480
they communicate or interact together so

00:08:45,290 --> 00:08:50,120
an example of such brokers is the

00:08:47,480 --> 00:08:52,100
service fabric or the on-demand service

00:08:50,120 --> 00:08:54,949
broker so usually the

00:08:52,100 --> 00:08:58,670
expose that there are service offerings

00:08:54,949 --> 00:09:02,540
were such kind of a broker so the next

00:08:58,670 --> 00:09:05,990
type of brokers are the one that live on

00:09:02,540 --> 00:09:08,930
top of the platform you most of people

00:09:05,990 --> 00:09:11,420
or in most teams start with with this

00:09:08,930 --> 00:09:13,519
because it's simple in the Cloud Foundry

00:09:11,420 --> 00:09:15,410
case you have a stateless Cloud Foundry

00:09:13,519 --> 00:09:18,470
application running on top of the

00:09:15,410 --> 00:09:21,769
platform and you just delegate or you

00:09:18,470 --> 00:09:23,779
just put some resources for the users in

00:09:21,769 --> 00:09:26,959
case they provisional service instance

00:09:23,779 --> 00:09:29,240
or create a service instance and the

00:09:26,959 --> 00:09:32,529
third type which is kind of newer at

00:09:29,240 --> 00:09:35,660
least for me are the one that's our code

00:09:32,529 --> 00:09:38,420
hosted brokers or some kind of central

00:09:35,660 --> 00:09:41,449
brokers an example of such broker is the

00:09:38,420 --> 00:09:44,089
Google hosted broker which is actually a

00:09:41,449 --> 00:09:46,000
single central broker where every single

00:09:44,089 --> 00:09:48,500
platform no matter it's a cloud foundry

00:09:46,000 --> 00:09:50,149
deployment installation on whether it's

00:09:48,500 --> 00:09:52,790
a Cuban it is cluster with service

00:09:50,149 --> 00:09:54,970
catalog actually registers this central

00:09:52,790 --> 00:09:58,040
broker and they are all sharing the same

00:09:54,970 --> 00:10:00,199
logical broker behind the scenes it's

00:09:58,040 --> 00:10:02,870
something running in the cloud which of

00:10:00,199 --> 00:10:05,300
course is some kind of distributed

00:10:02,870 --> 00:10:08,300
system but for the end users they look

00:10:05,300 --> 00:10:12,139
like a single instance of the of this

00:10:08,300 --> 00:10:14,600
broker so then what are the things that

00:10:12,139 --> 00:10:18,350
every broker router needs to consider

00:10:14,600 --> 00:10:19,639
when they try to be compatible with the

00:10:18,350 --> 00:10:22,339
different platforms

00:10:19,639 --> 00:10:24,920
most probably quad foundry and cuber

00:10:22,339 --> 00:10:26,990
natives so if you already saw from the

00:10:24,920 --> 00:10:29,120
diagrams there are some specifics about

00:10:26,990 --> 00:10:30,889
the networking and this is one of the

00:10:29,120 --> 00:10:33,620
topics or the first topic that I want to

00:10:30,889 --> 00:10:36,500
talk about so Network Inc is quite quite

00:10:33,620 --> 00:10:38,360
crucial so if you remember that the

00:10:36,500 --> 00:10:40,279
first diagram where we have the broker

00:10:38,360 --> 00:10:41,810
which is deployed alongside the platform

00:10:40,279 --> 00:10:44,089
and they are living in some kind of

00:10:41,810 --> 00:10:49,130
private network imagine this is a cloud

00:10:44,089 --> 00:10:52,009
foundry running on AWS and if we'd like

00:10:49,130 --> 00:10:55,850
our kubernetes cluster to actually

00:10:52,009 --> 00:10:59,269
access that cloud foundry running on a

00:10:55,850 --> 00:11:01,790
separate let's have a platform to be a

00:10:59,269 --> 00:11:03,730
Q&A disco star running con GK and if

00:11:01,790 --> 00:11:08,199
you'd like to register that same broke

00:11:03,730 --> 00:11:11,410
in in the service catalog in the Cuban

00:11:08,199 --> 00:11:13,629
eighties then with just the things just

00:11:11,410 --> 00:11:15,759
won't work because there won't be a

00:11:13,629 --> 00:11:18,819
networking connectivity between the two

00:11:15,759 --> 00:11:21,609
cloud providers so you have to do some

00:11:18,819 --> 00:11:23,889
additional effort to actually ensure

00:11:21,609 --> 00:11:26,679
that connectivity and today if you saw

00:11:23,889 --> 00:11:30,480
the talk from Ralph on the keynote about

00:11:26,679 --> 00:11:33,579
the demo that he make so basically those

00:11:30,480 --> 00:11:35,829
charts and the diagram that you saw are

00:11:33,579 --> 00:11:38,859
some of the things that you need to take

00:11:35,829 --> 00:11:41,049
care of so does that mean we should

00:11:38,859 --> 00:11:43,600
always aim for brokers which have a

00:11:41,049 --> 00:11:48,189
public endpoint or a public address

00:11:43,600 --> 00:11:49,809
assigned to to them well I could not say

00:11:48,189 --> 00:11:52,480
that there are some pretty good reasons

00:11:49,809 --> 00:11:54,819
why certain brokers make sense to be in

00:11:52,480 --> 00:11:56,889
a private network and I'll give a

00:11:54,819 --> 00:12:01,149
concrete example of that later on during

00:11:56,889 --> 00:12:03,459
the presentation but in general it looks

00:12:01,149 --> 00:12:06,429
like the trends the last couple of

00:12:03,459 --> 00:12:09,339
months or even a year is the following

00:12:06,429 --> 00:12:11,980
so a lot of companies especially running

00:12:09,339 --> 00:12:14,829
multiple platforms multi box vanities

00:12:11,980 --> 00:12:18,339
clusters are aiming towards some kind of

00:12:14,829 --> 00:12:21,519
centralized place which actually aims to

00:12:18,339 --> 00:12:25,539
manage your brokers and connect your

00:12:21,519 --> 00:12:27,819
broker to different platforms so you as

00:12:25,539 --> 00:12:30,220
a broker author just have to register

00:12:27,819 --> 00:12:32,949
your broker once in one place this

00:12:30,220 --> 00:12:35,379
centralized control plane and then the

00:12:32,949 --> 00:12:37,539
broke this this thing this component is

00:12:35,379 --> 00:12:39,220
responsible for connecting it to the

00:12:37,539 --> 00:12:41,470
different platforms applying some

00:12:39,220 --> 00:12:43,869
policies and doing some kind of other

00:12:41,470 --> 00:12:45,730
stuff so currently there are two

00:12:43,869 --> 00:12:47,889
initiatives going into that direction

00:12:45,730 --> 00:12:51,429
the first one is called the service

00:12:47,889 --> 00:12:54,100
manager if you attended this the Basel

00:12:51,429 --> 00:12:56,499
summit last year most probably you saw a

00:12:54,100 --> 00:12:59,410
demo from Florian and maybe you have

00:12:56,499 --> 00:13:01,449
attended the talk after that if you are

00:12:59,410 --> 00:13:05,249
interested in to learning more about the

00:13:01,449 --> 00:13:08,470
service manager you can ask Toria or

00:13:05,249 --> 00:13:10,419
yeah or you can ask me and I'll try to

00:13:08,470 --> 00:13:13,149
do my best to answer you some questions

00:13:10,419 --> 00:13:15,129
the next initiative that is going into

00:13:13,149 --> 00:13:17,380
that direction about having a single

00:13:15,129 --> 00:13:21,550
centralized control plane

00:13:17,380 --> 00:13:24,280
for managing your services is called ism

00:13:21,550 --> 00:13:27,370
which stands for independent services

00:13:24,280 --> 00:13:30,940
marketplace so tomorrow there is a talk

00:13:27,370 --> 00:13:33,310
from Matt and Laurel with the title one

00:13:30,940 --> 00:13:35,740
marketplace to rule them all I will

00:13:33,310 --> 00:13:37,480
reference that in my last slide if you'd

00:13:35,740 --> 00:13:43,420
like to take a picture of when it

00:13:37,480 --> 00:13:46,060
actually happens and where so the second

00:13:43,420 --> 00:13:48,880
class of things that every broker needs

00:13:46,060 --> 00:13:52,690
to needs to consider at least from from

00:13:48,880 --> 00:13:54,970
my opinion is the authentication so just

00:13:52,690 --> 00:13:57,690
a few releases from the last version of

00:13:54,970 --> 00:13:59,980
the specification the only

00:13:57,690 --> 00:14:02,820
authentication method between platforms

00:13:59,980 --> 00:14:06,310
and brokers was the good old basic out

00:14:02,820 --> 00:14:08,470
there are a number of problems with with

00:14:06,310 --> 00:14:10,900
this technology because it's quite dated

00:14:08,470 --> 00:14:13,090
and this is actually the reason why

00:14:10,900 --> 00:14:15,430
certain brokers somehow mitigate the

00:14:13,090 --> 00:14:17,860
fact that they support only basic

00:14:15,430 --> 00:14:19,720
authentication and they don't want to go

00:14:17,860 --> 00:14:21,820
public so they don't want to have a

00:14:19,720 --> 00:14:24,760
public dns route assigned to them and

00:14:21,820 --> 00:14:28,360
they prefer to stick to stay in some

00:14:24,760 --> 00:14:33,040
kind of private network just to not be

00:14:28,360 --> 00:14:35,760
exposed to the internet and not be

00:14:33,040 --> 00:14:38,650
protected just by a basic authentication

00:14:35,760 --> 00:14:41,320
so the latest version of the spec is

00:14:38,650 --> 00:14:43,740
quite loose so it's not any more the

00:14:41,320 --> 00:14:46,500
case that the basic is the only

00:14:43,740 --> 00:14:49,540
authentication method today the spec

00:14:46,500 --> 00:14:53,080
actually supports a bearer token

00:14:49,540 --> 00:14:55,570
education flow however it's a great upon

00:14:53,080 --> 00:14:59,890
out of bond between the platform and the

00:14:55,570 --> 00:15:02,140
broker how actually fetching the tokens

00:14:59,890 --> 00:15:05,350
refreshing the tokens revoking the

00:15:02,140 --> 00:15:08,200
tokens in validating them works so it's

00:15:05,350 --> 00:15:11,230
somehow in a way a black box for the

00:15:08,200 --> 00:15:13,450
platform and kyu Burnett is today

00:15:11,230 --> 00:15:17,260
supports opaque bearer token

00:15:13,450 --> 00:15:18,850
authentication however it's very tightly

00:15:17,260 --> 00:15:21,340
coupled to the way the Google

00:15:18,850 --> 00:15:25,330
authentication server works and it won't

00:15:21,340 --> 00:15:27,310
work with your a you a a or the AWS

00:15:25,330 --> 00:15:31,030
authentication server and so forth

00:15:27,310 --> 00:15:32,890
so today if you'd like to have a service

00:15:31,030 --> 00:15:37,570
which is compatible with both platforms

00:15:32,890 --> 00:15:40,090
your your only chances by going basic so

00:15:37,570 --> 00:15:41,770
I guess if it's an already known problem

00:15:40,090 --> 00:15:44,170
what does the community do in this

00:15:41,770 --> 00:15:47,590
direction to actually improve this and

00:15:44,170 --> 00:15:50,740
make the things better today there is a

00:15:47,590 --> 00:15:53,230
proposal with the title declarative

00:15:50,740 --> 00:15:55,660
authentication flow which aims to put

00:15:53,230 --> 00:15:58,420
some kind of standard between how the

00:15:55,660 --> 00:16:00,850
platform and the broker should negotiate

00:15:58,420 --> 00:16:02,710
the authentication flow so it's not any

00:16:00,850 --> 00:16:06,340
more black box it's some kind of

00:16:02,710 --> 00:16:08,500
different color box in a way and it

00:16:06,340 --> 00:16:10,930
should become a part of the spec how

00:16:08,500 --> 00:16:14,140
brokers and platforms should should

00:16:10,930 --> 00:16:16,810
handle this flow but it's still a work

00:16:14,140 --> 00:16:19,060
in progress and it will take some time

00:16:16,810 --> 00:16:22,900
until it it makes its way to the

00:16:19,060 --> 00:16:27,790
specification and to the brokers so yeah

00:16:22,900 --> 00:16:30,370
and the third class of things that I

00:16:27,790 --> 00:16:32,980
wanted to share with you about what you

00:16:30,370 --> 00:16:34,870
should consider if you have to if you

00:16:32,980 --> 00:16:36,940
want to have a broker compatible with

00:16:34,870 --> 00:16:39,460
the different platforms are the so

00:16:36,940 --> 00:16:42,610
called pitfalls or spec interpretations

00:16:39,460 --> 00:16:44,950
or something in this way so due to the

00:16:42,610 --> 00:16:47,350
fact that the specification is written

00:16:44,950 --> 00:16:51,760
by humans it's also read by humans and

00:16:47,350 --> 00:16:54,190
implemented by the later usually humans

00:16:51,760 --> 00:16:56,710
tend to have different or read the same

00:16:54,190 --> 00:16:58,930
thing in different ways so they make

00:16:56,710 --> 00:17:01,650
some kind based on their context or

00:16:58,930 --> 00:17:05,740
based on some assumptions that they make

00:17:01,650 --> 00:17:08,890
which leads into different end results

00:17:05,740 --> 00:17:11,500
so to say so I decided to just put two

00:17:08,890 --> 00:17:14,290
examples of the things that I know and

00:17:11,500 --> 00:17:15,640
that we faced last year but there are

00:17:14,290 --> 00:17:17,800
plenty more and there are a lot of

00:17:15,640 --> 00:17:20,160
uncovered things between how certain

00:17:17,800 --> 00:17:22,860
things are done in Cloud Foundry and how

00:17:20,160 --> 00:17:27,160
certain things are done in cuber natives

00:17:22,860 --> 00:17:31,120
so the first example is the service and

00:17:27,160 --> 00:17:33,100
the plan name so the latest 2.14 release

00:17:31,120 --> 00:17:36,760
version of the spec is quite strict

00:17:33,100 --> 00:17:38,500
about what you should put as a plan name

00:17:36,760 --> 00:17:42,290
or as a service name as part of your

00:17:38,500 --> 00:17:44,840
broker so it must be a CLI friendly name

00:17:42,290 --> 00:17:47,060
and a CLI friend the name is defined as

00:17:44,840 --> 00:17:49,640
something that contains alphanumeric

00:17:47,060 --> 00:17:52,390
characters periods hyphens with no

00:17:49,640 --> 00:17:56,290
spaces no underscores and etc and

00:17:52,390 --> 00:17:59,390
service catalogue actually enforce that

00:17:56,290 --> 00:18:01,280
constraint pretty strictly so in case

00:17:59,390 --> 00:18:03,020
you have an underscore Union or service

00:18:01,280 --> 00:18:06,800
name the broker registration will fail

00:18:03,020 --> 00:18:09,440
however it wasn't the case at all in

00:18:06,800 --> 00:18:12,290
cloud foundry so called foundry always

00:18:09,440 --> 00:18:14,810
allows spaces or ampersand or

00:18:12,290 --> 00:18:18,950
underscores or on or all that kind of

00:18:14,810 --> 00:18:21,440
stuff which means that you could have a

00:18:18,950 --> 00:18:23,360
service broker with a with an underscore

00:18:21,440 --> 00:18:25,280
in its name and it to successfully able

00:18:23,360 --> 00:18:27,560
to register in cloud foundry but it will

00:18:25,280 --> 00:18:29,960
fail registration in service catalog

00:18:27,560 --> 00:18:31,670
incarnated so all the things that have

00:18:29,960 --> 00:18:34,190
changed in this direction is that the

00:18:31,670 --> 00:18:36,470
spec is currently the late or the

00:18:34,190 --> 00:18:38,840
current work-in-progress version of the

00:18:36,470 --> 00:18:42,110
spec is quite loose so it starts

00:18:38,840 --> 00:18:44,750
recommending some stuff and recommending

00:18:42,110 --> 00:18:48,170
a CLI friendly names but don't force and

00:18:44,750 --> 00:18:50,660
don't have this most in there but it's a

00:18:48,170 --> 00:18:52,960
pretty good example how how you you

00:18:50,660 --> 00:18:57,860
could be affected with such kind of of

00:18:52,960 --> 00:19:00,290
tweak the next thing or the next pitfall

00:18:57,860 --> 00:19:04,130
that I wanted to show you are the limits

00:19:00,290 --> 00:19:08,510
or here the spec is not so strict about

00:19:04,130 --> 00:19:11,960
what you as a broker router should have

00:19:08,510 --> 00:19:15,200
as limit on certain string fields so the

00:19:11,960 --> 00:19:17,480
recommendation here is that you have 255

00:19:15,200 --> 00:19:19,190
characters otherwise you compromise your

00:19:17,480 --> 00:19:22,370
compatibility with with the different

00:19:19,190 --> 00:19:25,430
platforms however last year we worked on

00:19:22,370 --> 00:19:28,100
on an issue in our team where we had a

00:19:25,430 --> 00:19:30,920
service broker which was successfully

00:19:28,100 --> 00:19:33,170
registered in cloud foundry and failed

00:19:30,920 --> 00:19:36,620
registration on another Cloud Foundry

00:19:33,170 --> 00:19:39,410
instance and the interesting bit here

00:19:36,620 --> 00:19:41,960
was that they both were running the same

00:19:39,410 --> 00:19:45,110
cloud controller version they were

00:19:41,960 --> 00:19:47,180
having the same API version and when we

00:19:45,110 --> 00:19:51,050
get deeper into the problem

00:19:47,180 --> 00:19:53,900
it looks like the root cause of it was

00:19:51,050 --> 00:19:56,540
actually the relational database that

00:19:53,900 --> 00:19:58,880
was she was backing up one of the

00:19:56,540 --> 00:20:00,770
foundry platforms was different than the

00:19:58,880 --> 00:20:02,750
version in the other the first one was

00:20:00,770 --> 00:20:06,800
using Postgres the second one was using

00:20:02,750 --> 00:20:09,980
MySQL so it turns out that for this

00:20:06,800 --> 00:20:13,730
specific field or for some fields some

00:20:09,980 --> 00:20:16,160
string fields the in MySQL case it

00:20:13,730 --> 00:20:18,680
defaults if you have a string field and

00:20:16,160 --> 00:20:23,420
if you don't specify yourself a limit it

00:20:18,680 --> 00:20:25,910
defaults to to 255 characters and in the

00:20:23,420 --> 00:20:29,050
post gray case it defaults to a text

00:20:25,910 --> 00:20:34,460
field which has an enormous or pretty

00:20:29,050 --> 00:20:37,130
big limit so this is another example of

00:20:34,460 --> 00:20:38,900
how within the same platform you could

00:20:37,130 --> 00:20:41,540
have different interpretations or

00:20:38,900 --> 00:20:43,790
different implementation details which

00:20:41,540 --> 00:20:46,550
could fail your broker registration and

00:20:43,790 --> 00:20:50,810
at the end of they could break your

00:20:46,550 --> 00:20:52,970
delivery pipeline because imagine there

00:20:50,810 --> 00:20:55,790
are some fields like which are generated

00:20:52,970 --> 00:20:57,980
automatically like dashboard URLs or

00:20:55,790 --> 00:20:59,930
have some very long goods and you don't

00:20:57,980 --> 00:21:02,270
have control about how many characters

00:20:59,930 --> 00:21:03,800
you actually specify because it all you

00:21:02,270 --> 00:21:09,050
have a control but it's not so direct

00:21:03,800 --> 00:21:11,120
and still this could affect you and the

00:21:09,050 --> 00:21:16,070
last thing that I wanted to finish my

00:21:11,120 --> 00:21:18,550
talk with is or what are the the things

00:21:16,070 --> 00:21:20,540
that every broker author should consider

00:21:18,550 --> 00:21:23,060
unfortunately I don't have a silver

00:21:20,540 --> 00:21:25,640
bullet which will work for for every

00:21:23,060 --> 00:21:28,040
broker because depending on your broker

00:21:25,640 --> 00:21:30,920
depending on your product requirements

00:21:28,040 --> 00:21:34,670
on your security requirement on your

00:21:30,920 --> 00:21:37,100
service you you could have different

00:21:34,670 --> 00:21:38,420
problems into providing a multi platform

00:21:37,100 --> 00:21:41,510
compatible broker

00:21:38,420 --> 00:21:46,250
however the things that will work for

00:21:41,510 --> 00:21:48,430
for majority of of the users are no your

00:21:46,250 --> 00:21:51,890
audience or no your platforms and

00:21:48,430 --> 00:21:53,450
ideally validate against them or test as

00:21:51,890 --> 00:21:55,640
part of your continuous delivery

00:21:53,450 --> 00:21:57,860
pipelines continuous deployment pipe

00:21:55,640 --> 00:22:01,690
lines then test against the platform

00:21:57,860 --> 00:22:05,660
that you aim to deliver your services to

00:22:01,690 --> 00:22:08,510
there is a talk today later on called

00:22:05,660 --> 00:22:09,410
testing production environments and

00:22:08,510 --> 00:22:11,480
validating code

00:22:09,410 --> 00:22:15,020
by compliance so if you're looking into

00:22:11,480 --> 00:22:17,930
learning more about specific use cases

00:22:15,020 --> 00:22:20,420
or how different companies does validate

00:22:17,930 --> 00:22:24,110
that I encourage you visiting this talk

00:22:20,420 --> 00:22:26,210
I will reference it later then the

00:22:24,110 --> 00:22:28,760
second takeaway or the second thing that

00:22:26,210 --> 00:22:31,670
should work for for all service brokers

00:22:28,760 --> 00:22:34,840
are try to avoid as much as possible

00:22:31,670 --> 00:22:38,840
some platform specific context or

00:22:34,840 --> 00:22:41,390
features for example space good and/or

00:22:38,840 --> 00:22:44,060
good only make sense in cloud foundry so

00:22:41,390 --> 00:22:46,100
if you rely on those both those things

00:22:44,060 --> 00:22:48,590
it won't work in kubernetes there we

00:22:46,100 --> 00:22:51,140
have only have namespaces or if you have

00:22:48,590 --> 00:22:55,820
a service broker which is a syslog drain

00:22:51,140 --> 00:22:56,090
or volume mount broker or something like

00:22:55,820 --> 00:22:58,280
that

00:22:56,090 --> 00:23:00,920
it's only a feature supported in call

00:22:58,280 --> 00:23:05,630
foundry today so it won't work in queue

00:23:00,920 --> 00:23:07,580
burn edges the next thing is that if you

00:23:05,630 --> 00:23:11,000
remember the slide about the centralized

00:23:07,580 --> 00:23:13,130
component which should manage brokers

00:23:11,000 --> 00:23:16,400
and platforms on the one hand and the

00:23:13,130 --> 00:23:18,650
other so expect more platforms in in

00:23:16,400 --> 00:23:21,440
quotes in future so technically speaking

00:23:18,650 --> 00:23:24,590
this centralized component which you

00:23:21,440 --> 00:23:28,460
actually breach or will act as a gateway

00:23:24,590 --> 00:23:31,220
of brokers to two platforms will

00:23:28,460 --> 00:23:34,850
actually be one or will be a newer

00:23:31,220 --> 00:23:38,030
platform in implementation according to

00:23:34,850 --> 00:23:41,510
the to the spec terminology so you could

00:23:38,030 --> 00:23:44,330
expect more interpretations coming from

00:23:41,510 --> 00:23:46,340
that there might even some book books or

00:23:44,330 --> 00:23:48,890
some kind of false assumption that

00:23:46,340 --> 00:23:51,190
someone did a long time ago due to

00:23:48,890 --> 00:23:53,960
historical reasons and then this new

00:23:51,190 --> 00:23:57,380
central component just reviews that and

00:23:53,960 --> 00:23:59,450
makes it obvious so this could is

00:23:57,380 --> 00:24:01,640
something that you should also consider

00:23:59,450 --> 00:24:04,340
and at least for me it looks like the

00:24:01,640 --> 00:24:06,530
trend is more hidden or heading into

00:24:04,340 --> 00:24:09,260
that direction about having a single

00:24:06,530 --> 00:24:11,120
centralized place for which connects

00:24:09,260 --> 00:24:16,490
different brokers with with different

00:24:11,120 --> 00:24:18,980
platforms and last but not least if your

00:24:16,490 --> 00:24:20,630
broker author your best bet to actually

00:24:18,980 --> 00:24:22,140
know what is going as part of the

00:24:20,630 --> 00:24:25,140
specification is to

00:24:22,140 --> 00:24:27,420
participate into the community so there

00:24:25,140 --> 00:24:30,420
it's a living thing so it's constantly

00:24:27,420 --> 00:24:33,300
changing if you attend into that

00:24:30,420 --> 00:24:36,390
community you we can have your feedback

00:24:33,300 --> 00:24:40,080
for certain things that platform makes

00:24:36,390 --> 00:24:44,370
sense and that platon think it makes

00:24:40,080 --> 00:24:46,530
sense to provide to their users so your

00:24:44,370 --> 00:24:50,700
your feedback as a broker author is very

00:24:46,530 --> 00:24:53,430
valuable and you can also be informed at

00:24:50,700 --> 00:24:55,920
a relatively early stage before the

00:24:53,430 --> 00:24:59,490
things get through the platform or to

00:24:55,920 --> 00:25:01,830
the platform whether some some spec

00:24:59,490 --> 00:25:03,930
changes could break your broker and

00:25:01,830 --> 00:25:07,110
could break your compatibility with one

00:25:03,930 --> 00:25:10,530
platform or the other and it's a pretty

00:25:07,110 --> 00:25:12,810
good way of actually connecting to user

00:25:10,530 --> 00:25:15,990
groups the platform authors and the

00:25:12,810 --> 00:25:18,120
broker authors and on that terrible

00:25:15,990 --> 00:25:20,970
disappointment I would like to thank you

00:25:18,120 --> 00:25:25,050
all for your attention I hope you have

00:25:20,970 --> 00:25:27,480
an awesome conference overall and if you

00:25:25,050 --> 00:25:30,840
have any questions right now is the time

00:25:27,480 --> 00:25:34,680
oh you can find me somewhere around I

00:25:30,840 --> 00:25:38,460
lock tokura session submission for the

00:25:34,680 --> 00:25:41,400
next summit so I'm very keen on getting

00:25:38,460 --> 00:25:45,360
some inspiration from the conversations

00:25:41,400 --> 00:25:47,790
that I have with video so here is the

00:25:45,360 --> 00:25:50,280
slide for the references that I gave you

00:25:47,790 --> 00:25:51,810
can take a picture if you'd like and if

00:25:50,280 --> 00:25:57,410
you feel interested into learning more

00:25:51,810 --> 00:25:57,410
about that thank you for your attention

00:26:00,970 --> 00:26:04,229
[Applause]

00:26:15,120 --> 00:26:22,000
yeah yeah so the question was about the

00:26:18,520 --> 00:26:27,190
decorative authentication so yeah it's a

00:26:22,000 --> 00:26:29,409
thing that currently is standing as as

00:26:27,190 --> 00:26:31,539
an issue on the open service broker API

00:26:29,409 --> 00:26:33,190
specification and there is a document

00:26:31,539 --> 00:26:36,010
with with some findings in there which

00:26:33,190 --> 00:26:38,320
our team does Sabbatini did so in

00:26:36,010 --> 00:26:40,990
general the go there is try to put some

00:26:38,320 --> 00:26:44,020
kind of standard and this authentication

00:26:40,990 --> 00:26:45,370
phone not to be agreeing upon out of

00:26:44,020 --> 00:26:47,620
bound between the platform and the

00:26:45,370 --> 00:26:50,799
broker so in a way not to be a black box

00:26:47,620 --> 00:26:55,630
but just have some kind of a way to

00:26:50,799 --> 00:26:57,460
define how what are the support adult

00:26:55,630 --> 00:26:59,289
education flows of the broker and

00:26:57,460 --> 00:27:02,500
whether the plot or how the platform

00:26:59,289 --> 00:27:09,789
could act to actually execute them or

00:27:02,500 --> 00:27:12,580
follow them in in general there are a

00:27:09,789 --> 00:27:14,799
couple of options written there but the

00:27:12,580 --> 00:27:18,250
most simple one is that imagine that we

00:27:14,799 --> 00:27:21,100
have a swagger or open API document

00:27:18,250 --> 00:27:24,010
which describes which is animala

00:27:21,100 --> 00:27:26,590
describing that okay I have an endpoint

00:27:24,010 --> 00:27:29,500
which should serve post or which should

00:27:26,590 --> 00:27:32,169
respond to post request and the result

00:27:29,500 --> 00:27:35,140
or as a result of that post request I

00:27:32,169 --> 00:27:39,370
should return some kind of body and some

00:27:35,140 --> 00:27:42,120
kind of flow described in in an open API

00:27:39,370 --> 00:27:44,799
document about how the flow should work

00:27:42,120 --> 00:27:46,419
there are a lot of uncertainties there

00:27:44,799 --> 00:27:49,419
if I have to be honest it's not a

00:27:46,419 --> 00:27:51,669
trivial thing especially if you aim to

00:27:49,419 --> 00:27:53,590
provide something that is generic across

00:27:51,669 --> 00:27:56,820
the different authentication servers

00:27:53,590 --> 00:27:59,860
because our investigation was actually

00:27:56,820 --> 00:28:02,110
there is not much common between the

00:27:59,860 --> 00:28:04,900
Google authentication server the UA the

00:28:02,110 --> 00:28:08,110
aja authentication server the AWS server

00:28:04,900 --> 00:28:12,290
so it's so few things that are common

00:28:08,110 --> 00:28:16,610
between those those servers so it's not

00:28:12,290 --> 00:28:20,090
trivial to put some some kind of yeah

00:28:16,610 --> 00:28:23,480
I've a standard thing there good thank

00:28:20,090 --> 00:28:30,020
you for your question any more questions

00:28:23,480 --> 00:28:33,130
I guess that's not so

00:28:30,020 --> 00:28:33,130
yep thank you

00:28:35,470 --> 00:28:38,349

YouTube URL: https://www.youtube.com/watch?v=UwPzdFmKrp4


