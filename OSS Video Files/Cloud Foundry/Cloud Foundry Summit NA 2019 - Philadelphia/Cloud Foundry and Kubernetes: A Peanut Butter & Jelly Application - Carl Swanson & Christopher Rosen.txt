Title: Cloud Foundry and Kubernetes: A Peanut Butter & Jelly Application - Carl Swanson & Christopher Rosen
Publication date: 2019-04-11
Playlist: Cloud Foundry Summit NA 2019 - Philadelphia
Description: 
	Cloud Foundry and Kubernetes: A Peanut Butter and Jelly Application Sandwich - Carl Swanson & Christopher Rosen, IBM

While debates continue about whether to use Cloud Foundry or Kubernetes, the real question is how these two make better apps together. So what does this have to with sandwiches? Cloud Foundry developers can rapidly create and deploy (peanut butter), while Kubernetes gives you flexibility to manage and scale complex micro-services (jelly). In this session, we’ll show workloads with both Cloud Foundry and Kubernetes, ones that simplify security with cross-compute tools and that are portable across multi-clouds. And just like the multi-facet sandwich, these solutions together give a truly exceptional overall cloud-native application workload experience.

NOTICE: Please be advised that presentation doesn’t contain peanuts or fruit-spread, and is gluten-free. But it will make you hungry.

About Christopher Rosen
Chris Rosen is a Program Director, Offering Management, for IBM Cloud Kubernetes Service and IBM Cloud Container Registry. Chris has held a variety of roles in his 18-year career with IBM and is currently responsible for delivering IBM’s container service offering across public and dedicated delivery models by working closely with customers, development, design, and research. He has a BS in Information Technology and an MBA, both from Rochester Institute of Technology. Chris has presented at multiple conferences including Pulse, InterConnect, Think, DockerCon, ContainerWorld, and DevOps Days.

About Carl Swanson
Carl Swanson is an Offering Manager for the IBM Cloud group, and has held many development and leadership roles in his highly technical career. Currently he is the Offering Manager for IBM Cloud Foundry, and responsible for delivering this IBM Cloud open source compute by working closely with customers, development, design, and research. He is a passionate technologist with many years of practical experience in the area of software development, enterprise software delivery, customer success stories, and technology engagement. He advocates, attends, and presents at numerous cloud conferences, including IBM THINK, Cloud Foundry Summits, Cloud Foundry Days, OSCON, CloudExpo, Java One, and Kubecon. He holds several patents and remains an active developer in cloud technologies and IoT.

https://www.cloudfoundry.org/
Captions: 
	00:00:00,030 --> 00:00:06,089
my name is Carl Swanson I'm the offering

00:00:02,280 --> 00:00:08,099
manager for IBM Cloud Foundry Chris I'm

00:00:06,089 --> 00:00:09,929
Chris Rosen I'm the offering manager for

00:00:08,099 --> 00:00:11,490
our public kubernetes service and IBM

00:00:09,929 --> 00:00:14,000
cloud so we're gonna talk to you today

00:00:11,490 --> 00:00:17,490
about cloud foundry or kubernetes a

00:00:14,000 --> 00:00:21,480
peanut-butter-and-jelly application

00:00:17,490 --> 00:00:22,560
sandwich so it's people know peanut

00:00:21,480 --> 00:00:24,660
butter and jelly as a delicious sandwich

00:00:22,560 --> 00:00:27,199
and we think the two of these

00:00:24,660 --> 00:00:29,550
technologies together is also delicious

00:00:27,199 --> 00:00:31,260
so we're gonna talk about that let's

00:00:29,550 --> 00:00:34,590
start off with Cloud Foundry what can we

00:00:31,260 --> 00:00:35,550
talk about Cloud Foundry no Chris I

00:00:34,590 --> 00:00:38,250
thought you said you're gonna remove

00:00:35,550 --> 00:00:40,530
that slide no I understand that we're at

00:00:38,250 --> 00:00:43,590
CF summit but I think all the people are

00:00:40,530 --> 00:00:45,800
here to talk about kubernetes fine if

00:00:43,590 --> 00:00:50,910
you want to do that absolutely

00:00:45,800 --> 00:00:54,239
c22 or good at bat games anyway okay all

00:00:50,910 --> 00:00:55,649
right in all seriousness this comes up

00:00:54,239 --> 00:00:58,289
quite a lot when we're talking to our

00:00:55,649 --> 00:01:00,539
customers what type of computers do I

00:00:58,289 --> 00:01:02,430
need to run is it Cloud Foundry is it

00:01:00,539 --> 00:01:04,860
kubernetes is it always one or the other

00:01:02,430 --> 00:01:06,000
or when and should they coexist so

00:01:04,860 --> 00:01:09,960
that's really what we want to talk about

00:01:06,000 --> 00:01:13,470
today is that real love relationship

00:01:09,960 --> 00:01:15,990
that the two have yeah so let's start

00:01:13,470 --> 00:01:18,000
off with talking about the basic

00:01:15,990 --> 00:01:19,259
computes I think we're most people here

00:01:18,000 --> 00:01:23,390
are familiar with these nundi there's a

00:01:19,259 --> 00:01:26,189
surprise and kind of the curve as you

00:01:23,390 --> 00:01:28,409
increase your focus on business logic

00:01:26,189 --> 00:01:30,390
and take away from you know manipulating

00:01:28,409 --> 00:01:31,799
the underlying infrastructure bare metal

00:01:30,390 --> 00:01:33,479
of course virtual machines we're all

00:01:31,799 --> 00:01:35,700
very familiar with those containers

00:01:33,479 --> 00:01:43,850
right you know not a new technology but

00:01:35,700 --> 00:01:43,850
certainly new we're on the scene sorry

00:01:44,310 --> 00:01:48,899
cloud foundry applications of course

00:01:46,680 --> 00:01:51,960
which we all know and love and functions

00:01:48,899 --> 00:01:55,229
right you know server list type servers

00:01:51,960 --> 00:01:59,820
type compute option right so let's let's

00:01:55,229 --> 00:02:01,829
put in perspective those computes with

00:01:59,820 --> 00:02:03,450
the type of users you're typically

00:02:01,829 --> 00:02:05,340
following at a development organization

00:02:03,450 --> 00:02:07,890
right there's two kind of focus

00:02:05,340 --> 00:02:09,660
important personas operators and

00:02:07,890 --> 00:02:11,430
developers right I mean we kind of know

00:02:09,660 --> 00:02:12,750
and understand that right

00:02:11,430 --> 00:02:13,440
what are developers to do what are they

00:02:12,750 --> 00:02:15,080
responsible for

00:02:13,440 --> 00:02:17,790
they're responsible for high throughput

00:02:15,080 --> 00:02:20,640
delet development and rapid delivery of

00:02:17,790 --> 00:02:23,430
you know quality code they need easy

00:02:20,640 --> 00:02:26,100
extensions like services rapid build and

00:02:23,430 --> 00:02:28,290
test cycles they're not focus initially

00:02:26,100 --> 00:02:29,760
on deploying a full solution and that

00:02:28,290 --> 00:02:31,890
comes over time right so that's kind of

00:02:29,760 --> 00:02:33,630
the developer focus give them what they

00:02:31,890 --> 00:02:36,530
need to get through it rapidly and

00:02:33,630 --> 00:02:38,670
deliver quality code right operators

00:02:36,530 --> 00:02:41,450
kind of spend the other side of the

00:02:38,670 --> 00:02:44,460
spectrum responsible for deploying that

00:02:41,450 --> 00:02:46,740
technology and that application but to a

00:02:44,460 --> 00:02:49,950
full solution tolerant of and often

00:02:46,740 --> 00:02:54,000
desire complex tools flexible deployment

00:02:49,950 --> 00:02:55,620
features isolations critical of the

00:02:54,000 --> 00:02:58,350
hosted environments and then things like

00:02:55,620 --> 00:03:00,120
you know deep pervasive scaling H a

00:02:58,350 --> 00:03:01,410
disaster recovery right and of course

00:03:00,120 --> 00:03:03,510
they have common things beneath them

00:03:01,410 --> 00:03:06,300
containers flexible tool chains

00:03:03,510 --> 00:03:08,610
obviously the build packs and you know

00:03:06,300 --> 00:03:13,470
micro services but it takes both of them

00:03:08,610 --> 00:03:17,550
together to bring out an application and

00:03:13,470 --> 00:03:21,360
deliver it you know to customers so

00:03:17,550 --> 00:03:23,130
let's talk a bit more about the computer

00:03:21,360 --> 00:03:26,220
abstractions and then how that applies

00:03:23,130 --> 00:03:28,560
to those users and stuff working there

00:03:26,220 --> 00:03:33,320
we go yeah so we start fiscal machines

00:03:28,560 --> 00:03:33,320
obviously move up to virtual machines

00:03:40,730 --> 00:03:44,640
there we go

00:03:42,780 --> 00:03:47,370
continue with containers and of course

00:03:44,640 --> 00:03:48,780
you know the the kubernetes now overlaid

00:03:47,370 --> 00:03:50,700
with that container technology an

00:03:48,780 --> 00:03:52,260
important piece of the puzzle and that's

00:03:50,700 --> 00:03:54,180
kind of the operator experience right

00:03:52,260 --> 00:03:56,880
the developer experience is kind of

00:03:54,180 --> 00:03:58,590
above that and as we see on the Left you

00:03:56,880 --> 00:04:00,390
do sacrifice something to gain something

00:03:58,590 --> 00:04:02,610
you sacrifice control of your

00:04:00,390 --> 00:04:04,320
environment and you lose control of some

00:04:02,610 --> 00:04:06,959
of the things that you thought you

00:04:04,320 --> 00:04:08,610
wanted to do but you gain something in

00:04:06,959 --> 00:04:11,640
perspective you gain ease-of-use and

00:04:08,610 --> 00:04:13,770
speed right so continuing we have

00:04:11,640 --> 00:04:15,300
applications and functions and that's

00:04:13,770 --> 00:04:17,630
kind of how that lays out in kind of a

00:04:15,300 --> 00:04:20,130
coherent stack you can actually begin

00:04:17,630 --> 00:04:21,810
doing something or deploying an

00:04:20,130 --> 00:04:23,940
application that any one of those stack

00:04:21,810 --> 00:04:26,700
levels but the higher up you go

00:04:23,940 --> 00:04:29,760
you typically gain speed and ease of you

00:04:26,700 --> 00:04:31,980
right and then when an entire stack is

00:04:29,760 --> 00:04:34,320
integrated it delivers all that all that

00:04:31,980 --> 00:04:37,800
the teams needed one platform right so

00:04:34,320 --> 00:04:40,320
and here's an example of kind of the

00:04:37,800 --> 00:04:42,780
difference between a cloud foundry and

00:04:40,320 --> 00:04:45,060
kubernetes deployment experience right

00:04:42,780 --> 00:04:46,560
on the other side we have things I

00:04:45,060 --> 00:04:50,010
barely even understand these are kind of

00:04:46,560 --> 00:04:51,600
complicated right Chris anyway and on

00:04:50,010 --> 00:04:53,850
the Left we have a cloud foundry

00:04:51,600 --> 00:04:56,790
deployment and if you guys were watching

00:04:53,850 --> 00:04:57,780
Jules this more dr. Jules this morning

00:04:56,790 --> 00:04:59,670
talked about ireenie

00:04:57,780 --> 00:05:02,520
they gave this kind of example of the

00:04:59,670 --> 00:05:07,290
differences between them right so as we

00:05:02,520 --> 00:05:09,060
try to decide where the mix of tools

00:05:07,290 --> 00:05:10,020
comes for the different personas it's

00:05:09,060 --> 00:05:11,580
kind of important to get that right

00:05:10,020 --> 00:05:16,770
because it really accelerates teams

00:05:11,580 --> 00:05:19,890
quite a bit so from our perspective we

00:05:16,770 --> 00:05:22,140
think about the evolution of the

00:05:19,890 --> 00:05:25,770
platform and what is a platform and

00:05:22,140 --> 00:05:27,600
think about 20 years ago everyone we're

00:05:25,770 --> 00:05:29,460
writing and standardizing and building

00:05:27,600 --> 00:05:32,550
and running applications on java

00:05:29,460 --> 00:05:35,220
application server because that platform

00:05:32,550 --> 00:05:37,500
allowed and simplified all of the

00:05:35,220 --> 00:05:40,380
underlying plumbing to run those

00:05:37,500 --> 00:05:42,630
applications now 20 years ago it seems

00:05:40,380 --> 00:05:45,360
like a long time but fast-forward we're

00:05:42,630 --> 00:05:48,990
solving the same problems in the cloud

00:05:45,360 --> 00:05:52,680
era but the difference is we're doing it

00:05:48,990 --> 00:05:55,470
in open source in a very dynamic in

00:05:52,680 --> 00:05:57,180
ever-changing environment so as we're

00:05:55,470 --> 00:05:59,190
moving that workload to cloud

00:05:57,180 --> 00:06:02,160
the developers still have the same three

00:05:59,190 --> 00:06:05,280
main challenges how can I deliver things

00:06:02,160 --> 00:06:08,670
quickly how can I innovate rapidly how

00:06:05,280 --> 00:06:12,060
can I scale up or down in a moment's

00:06:08,670 --> 00:06:14,370
notice to meet my users expectations and

00:06:12,060 --> 00:06:16,380
requirements regardless of the time of

00:06:14,370 --> 00:06:20,300
day or time of season for my application

00:06:16,380 --> 00:06:23,550
and then the last thing is really round

00:06:20,300 --> 00:06:25,920
availability stability uptime back to

00:06:23,550 --> 00:06:27,540
the operational side of the house those

00:06:25,920 --> 00:06:30,300
are what the operators are concerned

00:06:27,540 --> 00:06:32,490
about I need the nines of uptime to meet

00:06:30,300 --> 00:06:35,130
my SLA I need to be able to roll out new

00:06:32,490 --> 00:06:36,810
versions it's great that someone's over

00:06:35,130 --> 00:06:38,720
here developing and adding all these

00:06:36,810 --> 00:06:41,170
features and buzz and what

00:06:38,720 --> 00:06:44,180
and all these things but the reality is

00:06:41,170 --> 00:06:51,050
someone ultimately is responsible to run

00:06:44,180 --> 00:06:55,130
it and ensure its availability so in any

00:06:51,050 --> 00:06:57,080
realistic dev project there are a

00:06:55,130 --> 00:06:59,600
variety of different use cases and

00:06:57,080 --> 00:07:00,800
requirements to be able to deliver on

00:06:59,600 --> 00:07:03,800
those objectives

00:07:00,800 --> 00:07:06,620
now some components may require a

00:07:03,800 --> 00:07:08,360
stateless web application some

00:07:06,620 --> 00:07:10,190
components may require some high

00:07:08,360 --> 00:07:13,010
resource intensive whether it's a

00:07:10,190 --> 00:07:15,110
database or other type of workload Trent

00:07:13,010 --> 00:07:17,870
that's very transactional and those have

00:07:15,110 --> 00:07:19,730
very different characteristics it may be

00:07:17,870 --> 00:07:22,130
something that's event-driven server

00:07:19,730 --> 00:07:24,800
less so I'm just sitting out I'm waiting

00:07:22,130 --> 00:07:27,740
for some action to take place something

00:07:24,800 --> 00:07:31,250
to occur now I run an action I do

00:07:27,740 --> 00:07:34,280
something else as a result of that so

00:07:31,250 --> 00:07:36,860
the challenge is developers have to

00:07:34,280 --> 00:07:38,720
learn those three different environments

00:07:36,860 --> 00:07:41,600
and what we're trying to do is simplify

00:07:38,720 --> 00:07:44,360
the platform to ensure ease of use

00:07:41,600 --> 00:07:46,190
across all those different requirements

00:07:44,360 --> 00:07:53,150
those different use cases in one

00:07:46,190 --> 00:07:55,640
platform so as I said the complexity

00:07:53,150 --> 00:07:57,800
comes from today when you think about

00:07:55,640 --> 00:08:00,350
kind of this you know we simplified it

00:07:57,800 --> 00:08:03,680
to three kind of compute choices here

00:08:00,350 --> 00:08:06,229
whether it's cloud foundry containers or

00:08:03,680 --> 00:08:09,890
open West for event-driven server lists

00:08:06,229 --> 00:08:13,760
things Lamba capabilities that they've

00:08:09,890 --> 00:08:15,800
each been developed in their own silo so

00:08:13,760 --> 00:08:18,800
developers naturally have had to

00:08:15,800 --> 00:08:21,680
gravitate toward one silo versus another

00:08:18,800 --> 00:08:23,600
which then increases the complexity of

00:08:21,680 --> 00:08:26,300
the technology to run it because now we

00:08:23,600 --> 00:08:30,140
need to handle three different siloed

00:08:26,300 --> 00:08:32,780
types of technologies in one place or I

00:08:30,140 --> 00:08:34,580
only know one versus another so that's

00:08:32,780 --> 00:08:37,490
the real challenge for developers is

00:08:34,580 --> 00:08:39,620
that once they're in a silo they're

00:08:37,490 --> 00:08:42,020
really stuck in a silo unless they have

00:08:39,620 --> 00:08:44,770
a platform to be able to run a variety

00:08:42,020 --> 00:08:44,770
of compute

00:08:45,610 --> 00:08:51,500
so if you think about you know the

00:08:49,129 --> 00:08:53,269
components of a stack and you could

00:08:51,500 --> 00:08:56,029
argue what component should go in a

00:08:53,269 --> 00:08:58,190
stack but in this simplified view we

00:08:56,029 --> 00:09:00,819
think about the foundation the building

00:08:58,190 --> 00:09:03,319
black layer the actual container engine

00:09:00,819 --> 00:09:05,449
now it's gone through a lot of change

00:09:03,319 --> 00:09:08,120
there's been a lot of projects but we're

00:09:05,449 --> 00:09:10,939
really seeing a lot of convergence at

00:09:08,120 --> 00:09:12,649
least in my world to container D as that

00:09:10,939 --> 00:09:15,529
engine of choice kind of the

00:09:12,649 --> 00:09:18,560
standardization as we move up the stack

00:09:15,529 --> 00:09:21,230
you know eighteen months two years ago

00:09:18,560 --> 00:09:23,660
it was a real war if someone said swarm

00:09:21,230 --> 00:09:25,370
versus kubernetes you know they might

00:09:23,660 --> 00:09:26,750
fight each other over which one they

00:09:25,370 --> 00:09:29,269
felt was going to win the container

00:09:26,750 --> 00:09:31,550
orchestration war fast forward I think

00:09:29,269 --> 00:09:34,879
it's very clear in evident to everyone

00:09:31,550 --> 00:09:37,209
the kubernetes was chosen by you by the

00:09:34,879 --> 00:09:40,790
ecosystem by the open source community

00:09:37,209 --> 00:09:44,240
to leverage kubernetes as that container

00:09:40,790 --> 00:09:46,850
orchestration now some of the good

00:09:44,240 --> 00:09:49,250
things as we move up the stack there's

00:09:46,850 --> 00:09:51,860
already been convergence in agreement

00:09:49,250 --> 00:09:54,230
across the different silos of compute

00:09:51,860 --> 00:09:56,389
abound how do we handle open service

00:09:54,230 --> 00:09:59,480
broker with a service catalog to do that

00:09:56,389 --> 00:10:02,209
consistently across kubernetes and Cloud

00:09:59,480 --> 00:10:04,579
Foundry at the top when you think about

00:10:02,209 --> 00:10:06,380
the service mesh so as the complexity of

00:10:04,579 --> 00:10:09,439
my micro services architectures grows

00:10:06,380 --> 00:10:12,610
and grows I need some insight some in

00:10:09,439 --> 00:10:15,110
depth telemetry some layered abstract

00:10:12,610 --> 00:10:16,790
regardless of where that's running so

00:10:15,110 --> 00:10:20,000
we've really standardize on things like

00:10:16,790 --> 00:10:21,889
sto and sidecar technology with envoy to

00:10:20,000 --> 00:10:27,649
be able to deliver that micro service

00:10:21,889 --> 00:10:30,199
capability so what does that all mean it

00:10:27,649 --> 00:10:34,699
basically brings it together into one

00:10:30,199 --> 00:10:38,180
unified stack so now as a developer I've

00:10:34,699 --> 00:10:40,550
got a core base of capability in which

00:10:38,180 --> 00:10:42,290
I'm building on top of a lot of times

00:10:40,550 --> 00:10:43,850
you'll see that's where the operations

00:10:42,290 --> 00:10:47,420
side of the house is going to live in

00:10:43,850 --> 00:10:49,250
that lower layer of the stack is a

00:10:47,420 --> 00:10:51,860
developer or a development team or

00:10:49,250 --> 00:10:54,050
development organization based on my

00:10:51,860 --> 00:10:57,410
requirements is it stateless is it

00:10:54,050 --> 00:10:59,660
stateful is it event-driven I can chew

00:10:57,410 --> 00:11:02,839
the type of compute to meet those

00:10:59,660 --> 00:11:05,149
requirements instead of taking my

00:11:02,839 --> 00:11:06,829
requirements saying well we're all Cloud

00:11:05,149 --> 00:11:08,779
Foundry all the time you're all

00:11:06,829 --> 00:11:11,089
containers all the time we're all

00:11:08,779 --> 00:11:12,889
event-driven all the time pick the type

00:11:11,089 --> 00:11:14,810
of compute that's going to help with

00:11:12,889 --> 00:11:16,730
that given component when you think

00:11:14,810 --> 00:11:19,370
about breaking down your apps to micro

00:11:16,730 --> 00:11:22,279
services the micro services will not

00:11:19,370 --> 00:11:24,259
have the same compute requirements so

00:11:22,279 --> 00:11:25,519
what we want to do is deliver that

00:11:24,259 --> 00:11:27,860
options that way you've got the

00:11:25,519 --> 00:11:33,139
flexibility to run and meet it with the

00:11:27,860 --> 00:11:35,120
minimal amount of effort as possible all

00:11:33,139 --> 00:11:36,709
right let's take a step back and and

00:11:35,120 --> 00:11:37,790
talk about what kind of some of the

00:11:36,709 --> 00:11:41,480
stuff Chris talked about between

00:11:37,790 --> 00:11:44,120
functions applications containers and

00:11:41,480 --> 00:11:47,180
how do you decide and we've talked about

00:11:44,120 --> 00:11:50,629
it a bit already how do you decide which

00:11:47,180 --> 00:11:53,810
of the computes you want to use right it

00:11:50,629 --> 00:11:55,759
comes down to basically what are your

00:11:53,810 --> 00:11:57,920
develops more productive in and what do

00:11:55,759 --> 00:12:00,680
they perhaps know better you know

00:11:57,920 --> 00:12:03,230
control over the environment you know

00:12:00,680 --> 00:12:05,990
lack or more control and consistency

00:12:03,230 --> 00:12:07,880
between them right so again we kind of

00:12:05,990 --> 00:12:09,680
have a language framework that can

00:12:07,880 --> 00:12:11,899
typically be used on any platform you

00:12:09,680 --> 00:12:13,490
know bare metal and VMs as it has for a

00:12:11,899 --> 00:12:15,649
long time those can be certainly

00:12:13,490 --> 00:12:18,860
deployed in containers or cloud foundry

00:12:15,649 --> 00:12:20,569
applications as well and then functions

00:12:18,860 --> 00:12:26,149
kind of sits there but it really comes

00:12:20,569 --> 00:12:28,579
down to what level of control and

00:12:26,149 --> 00:12:31,399
performance do you need versus speed of

00:12:28,579 --> 00:12:33,620
development delivery right sometimes in

00:12:31,399 --> 00:12:35,180
some cases or for some application

00:12:33,620 --> 00:12:37,310
components you need a great deal of

00:12:35,180 --> 00:12:38,689
tuning you need a great deal of speed

00:12:37,310 --> 00:12:40,639
you need a great deal of performance

00:12:38,689 --> 00:12:42,470
that's why bare metal exists in certain

00:12:40,639 --> 00:12:46,880
cloud vendors but you know as you move

00:12:42,470 --> 00:12:48,019
up you you sacrifice control but you do

00:12:46,880 --> 00:12:49,790
that with the knowledge that you're

00:12:48,019 --> 00:12:56,779
gaining something which is typically

00:12:49,790 --> 00:12:59,240
ease and speed of deployment so when do

00:12:56,779 --> 00:13:00,649
you need these things and do they fall

00:12:59,240 --> 00:13:04,339
into different phases right

00:13:00,649 --> 00:13:06,500
so typically day one operations are kind

00:13:04,339 --> 00:13:07,880
of pretty straightforward you typically

00:13:06,500 --> 00:13:11,150
see security or something that's very

00:13:07,880 --> 00:13:15,440
important scale from a basic perspective

00:13:11,150 --> 00:13:17,390
pretty important knowing how to manage

00:13:15,440 --> 00:13:18,500
the infrastructure whether it's going

00:13:17,390 --> 00:13:20,480
ahead and designing the different

00:13:18,500 --> 00:13:22,100
containers and stuff you use or in

00:13:20,480 --> 00:13:23,900
deciding on isolation choices which is

00:13:22,100 --> 00:13:25,460
typically very important but what what

00:13:23,900 --> 00:13:27,620
happens is when that day one

00:13:25,460 --> 00:13:29,090
quote-unquote is finished and did do

00:13:27,620 --> 00:13:31,160
kind of begins

00:13:29,090 --> 00:13:32,630
you then have to settle into operations

00:13:31,160 --> 00:13:35,510
right you actually have to operate it

00:13:32,630 --> 00:13:37,490
you have to have really good and

00:13:35,510 --> 00:13:38,630
sophisticated DevOps to make sure that

00:13:37,490 --> 00:13:41,090
when you push things through code it

00:13:38,630 --> 00:13:42,920
goes very smoothly you have to have you

00:13:41,090 --> 00:13:44,510
know robust log and that actually merges

00:13:42,920 --> 00:13:47,240
together logging from multiple

00:13:44,510 --> 00:13:49,040
components and actually processes that

00:13:47,240 --> 00:13:52,700
and centralizes it and then you need

00:13:49,040 --> 00:13:54,530
monitoring to make sure that the things

00:13:52,700 --> 00:13:56,560
are operating the way they should allow

00:13:54,530 --> 00:13:58,610
you to troubleshooting with logging

00:13:56,560 --> 00:14:00,770
making sure you understand the alerts

00:13:58,610 --> 00:14:02,480
that are happening and designing you

00:14:00,770 --> 00:14:04,550
know dashboards and such to make sure

00:14:02,480 --> 00:14:07,160
you understand it so part of the

00:14:04,550 --> 00:14:09,050
decision is not just how do i onboard

00:14:07,160 --> 00:14:11,930
and start an application it's just as

00:14:09,050 --> 00:14:13,730
important as how do i armbar start an

00:14:11,930 --> 00:14:15,500
application but then how do I take care

00:14:13,730 --> 00:14:19,250
of a long-term and that's kind of where

00:14:15,500 --> 00:14:24,260
that that balance is important right so

00:14:19,250 --> 00:14:27,500
good so IBM cloud kubernetes service IKS

00:14:24,260 --> 00:14:29,930
for short the C is silent this is our

00:14:27,500 --> 00:14:31,970
managed offering in the community space

00:14:29,930 --> 00:14:35,780
so as Carl likes to point out to me

00:14:31,970 --> 00:14:37,580
every day the complexities of running in

00:14:35,780 --> 00:14:43,310
kubernetes from a developer perspective

00:14:37,580 --> 00:14:45,110
every other day every day but also from

00:14:43,310 --> 00:14:48,470
an Operations perspective kubernetes is

00:14:45,110 --> 00:14:52,180
hard the kubernetes stack is hard from

00:14:48,470 --> 00:14:55,730
container D to fluent D to Prometheus to

00:14:52,180 --> 00:14:58,010
security to kubernetes itself there's a

00:14:55,730 --> 00:15:00,320
lot of open source projects and I forgot

00:14:58,010 --> 00:15:02,390
calico for networking how do we manage

00:15:00,320 --> 00:15:04,250
the stack of that so that's really what

00:15:02,390 --> 00:15:06,860
we're focused on is simplifying the

00:15:04,250 --> 00:15:09,230
lifecycle of your kubernetes clusters so

00:15:06,860 --> 00:15:12,110
that way you as developers are just

00:15:09,230 --> 00:15:14,450
deploying applications adding innovation

00:15:12,110 --> 00:15:17,300
helping your line of business objectives

00:15:14,450 --> 00:15:19,220
not oh no a new version of kubernetes

00:15:17,300 --> 00:15:21,050
came out from the community is it going

00:15:19,220 --> 00:15:23,270
to break anything in my entire stack

00:15:21,050 --> 00:15:25,760
instead let us have no hand

00:15:23,270 --> 00:15:28,430
the lifecycle for you and the real value

00:15:25,760 --> 00:15:30,860
out of IBM cloud is to extend the

00:15:28,430 --> 00:15:33,680
capabilities with higher value services

00:15:30,860 --> 00:15:35,960
so my application that I've modernized

00:15:33,680 --> 00:15:37,730
and now I'm running in the cloud I want

00:15:35,960 --> 00:15:40,970
to extend its capabilities I want to use

00:15:37,730 --> 00:15:43,370
something like Watson virtual visual

00:15:40,970 --> 00:15:45,830
recognition or speech to text to create

00:15:43,370 --> 00:15:48,740
some cool chat BOTS to help engage my

00:15:45,830 --> 00:15:50,210
users in a more meaningful manner and

00:15:48,740 --> 00:15:52,520
you'll see you know obviously we're part

00:15:50,210 --> 00:15:54,260
of the CN CF conformance so that way is

00:15:52,520 --> 00:15:56,180
an end user you know that the same

00:15:54,260 --> 00:15:58,760
building blocks that you use the same

00:15:56,180 --> 00:16:00,800
Yambol the same everything are

00:15:58,760 --> 00:16:02,690
consistent in any environment so there's

00:16:00,800 --> 00:16:04,850
you know coming back to containers the

00:16:02,690 --> 00:16:06,920
whole premise of eliminating vendor

00:16:04,850 --> 00:16:09,230
lock-in and having that portability you

00:16:06,920 --> 00:16:12,710
get that as you move up the stack and an

00:16:09,230 --> 00:16:15,500
orchestration level as well so I could

00:16:12,710 --> 00:16:17,300
spend an hour on IKS but Karl said I'm

00:16:15,500 --> 00:16:19,850
limited so with that I'll hand it back

00:16:17,300 --> 00:16:21,410
to you sir so and just to be clear I

00:16:19,850 --> 00:16:22,820
only tell you it's difficult on Tuesdays

00:16:21,410 --> 00:16:25,340
and Thursdays it's not every single day

00:16:22,820 --> 00:16:26,870
now I mean kubernetes is difficult and

00:16:25,340 --> 00:16:28,880
container your organization is difficult

00:16:26,870 --> 00:16:30,560
for a reason it's a difficult space is a

00:16:28,880 --> 00:16:32,510
different difficult concept to get

00:16:30,560 --> 00:16:34,790
around so that complexity is important

00:16:32,510 --> 00:16:36,920
but it's important for the right people

00:16:34,790 --> 00:16:38,570
and and and in contrast the cloud

00:16:36,920 --> 00:16:40,490
platter e cloud foundry platform

00:16:38,570 --> 00:16:43,280
delivers things that developer team

00:16:40,490 --> 00:16:45,050
devote Eames want but never want to

00:16:43,280 --> 00:16:46,820
build themselves right we've gotten to

00:16:45,050 --> 00:16:49,280
the point where they're they're out of

00:16:46,820 --> 00:16:50,990
the the path of reinventing the wheel

00:16:49,280 --> 00:16:53,390
essentially every time they want to

00:16:50,990 --> 00:16:54,830
simplify developer experience for rapid

00:16:53,390 --> 00:16:57,290
with rapid being the really important

00:16:54,830 --> 00:16:59,180
word their rapid development iteration

00:16:57,290 --> 00:17:01,670
if it takes you a long time to actually

00:16:59,180 --> 00:17:03,410
make a change and then test it that

00:17:01,670 --> 00:17:05,930
doesn't really go well with your you

00:17:03,410 --> 00:17:08,420
know your cycle of delivery automatic

00:17:05,930 --> 00:17:10,670
and rapid compilation and deployments

00:17:08,420 --> 00:17:11,570
very important right the steps to do

00:17:10,670 --> 00:17:14,330
that

00:17:11,570 --> 00:17:16,130
highly saleable spelled wrong highly

00:17:14,330 --> 00:17:17,839
scalable is obviously very important

00:17:16,130 --> 00:17:20,780
both platforms do that very very

00:17:17,839 --> 00:17:22,640
maturely easily integrated with a range

00:17:20,780 --> 00:17:24,200
of DevOps tools we can share the DevOps

00:17:22,640 --> 00:17:26,390
tools between the two platforms but

00:17:24,200 --> 00:17:28,490
obviously excels is that as well and and

00:17:26,390 --> 00:17:31,370
and more importantly full application

00:17:28,490 --> 00:17:34,730
lifecycle management so you can actually

00:17:31,370 --> 00:17:36,620
not only develop and deploy but you can

00:17:34,730 --> 00:17:39,529
manage and change

00:17:36,620 --> 00:17:40,909
scale up and scale down your application

00:17:39,529 --> 00:17:42,799
change its memory requirements or what

00:17:40,909 --> 00:17:45,260
have you so the bottom line here is

00:17:42,799 --> 00:17:47,990
Cloud Foundry lets you move faster and

00:17:45,260 --> 00:17:49,909
focus on your unique code and business

00:17:47,990 --> 00:17:52,159
logic which is after all what you're

00:17:49,909 --> 00:17:54,190
doing right versus common and

00:17:52,159 --> 00:17:57,740
countlessly receipt repeated

00:17:54,190 --> 00:18:00,200
infrastructure tasks right so taking

00:17:57,740 --> 00:18:01,610
taking all that the compute basis and

00:18:00,200 --> 00:18:03,159
the different users and kind of the

00:18:01,610 --> 00:18:05,330
different the different tools here

00:18:03,159 --> 00:18:07,789
obviously this brings us to one of the

00:18:05,330 --> 00:18:10,940
subjects of the summit which for example

00:18:07,789 --> 00:18:13,159
chip Childers the CTO of the CFF spoke

00:18:10,940 --> 00:18:15,080
this morning about and I grabbed oops I

00:18:13,159 --> 00:18:18,110
really like that adaptation and

00:18:15,080 --> 00:18:20,210
evolution of large software products and

00:18:18,110 --> 00:18:22,700
and that's very very appropriate he

00:18:20,210 --> 00:18:24,860
spoke very well about that project

00:18:22,700 --> 00:18:28,370
ireenie is one of those evolutionary

00:18:24,860 --> 00:18:30,019
steps its mutational change in the cloud

00:18:28,370 --> 00:18:32,450
foundry and in kubernetes itself I

00:18:30,019 --> 00:18:35,029
suppose that we believe becomes a better

00:18:32,450 --> 00:18:39,350
a positive evolutionary step so it's the

00:18:35,029 --> 00:18:41,059
convergence to of pieces of technology

00:18:39,350 --> 00:18:42,830
with cloud foundry and kubernetes and

00:18:41,059 --> 00:18:45,500
the reading project was the name of it

00:18:42,830 --> 00:18:48,529
and it's basic task is enabling a

00:18:45,500 --> 00:18:50,450
plug-in a pluggable scheduler plugin

00:18:48,529 --> 00:18:52,820
pogos scheduling for a cloud foundry

00:18:50,450 --> 00:18:54,440
application runtime right operators can

00:18:52,820 --> 00:18:56,260
choose between either the diego

00:18:54,440 --> 00:18:59,210
scheduler which is the default or

00:18:56,260 --> 00:19:01,309
kubernetes which is that the new one to

00:18:59,210 --> 00:19:04,010
orchestrate applications and the

00:19:01,309 --> 00:19:05,299
container instances right the goal of

00:19:04,010 --> 00:19:06,919
course behind it at what you're trying

00:19:05,299 --> 00:19:10,220
to get out of it is and this is

00:19:06,919 --> 00:19:12,649
important reusing an existing kubernetes

00:19:10,220 --> 00:19:14,950
cluster infrastructure right being able

00:19:12,649 --> 00:19:17,600
to work together in that environment or

00:19:14,950 --> 00:19:19,639
in fact actually use that as your

00:19:17,600 --> 00:19:22,130
underlying I as you know it could very

00:19:19,639 --> 00:19:24,950
well be new toast applications deployed

00:19:22,130 --> 00:19:26,570
by Cloud Foundry right and what that

00:19:24,950 --> 00:19:29,059
gives us is it allows us to use

00:19:26,570 --> 00:19:32,419
kubernetes tools processes and workflows

00:19:29,059 --> 00:19:35,120
to manipulate containers in the same way

00:19:32,419 --> 00:19:37,279
on both layers simple and and and it

00:19:35,120 --> 00:19:39,529
really simplifies the overall container

00:19:37,279 --> 00:19:42,740
management so by by this kind of merge

00:19:39,529 --> 00:19:44,750
the overall change is is hopefully going

00:19:42,740 --> 00:19:46,970
to bring about not only more advanced

00:19:44,750 --> 00:19:49,940
capabilities that are fine-tuning it

00:19:46,970 --> 00:19:51,919
increased it continued speed of delivery

00:19:49,940 --> 00:19:54,500
our configuration options like we talked

00:19:51,919 --> 00:19:56,629
about and that depth of complexity but

00:19:54,500 --> 00:20:01,759
also simplification and less effort

00:19:56,629 --> 00:20:04,730
right so and of course this brings us to

00:20:01,759 --> 00:20:06,710
what we are delivering what we have

00:20:04,730 --> 00:20:09,139
delivered to bring together cloud

00:20:06,710 --> 00:20:10,940
foundry kubernetes we delivered cloud

00:20:09,139 --> 00:20:15,019
foundry enterprise environment last year

00:20:10,940 --> 00:20:17,840
which is cloud foundry built on top of

00:20:15,019 --> 00:20:20,600
the IBM kubernetes service to create and

00:20:17,840 --> 00:20:23,330
manage isolated paths environments for

00:20:20,600 --> 00:20:25,250
hosting applications exclusively for a

00:20:23,330 --> 00:20:27,070
given enterprise right self-service

00:20:25,250 --> 00:20:29,720
deployment elastic consumption

00:20:27,070 --> 00:20:31,970
representing and complete access to both

00:20:29,720 --> 00:20:33,500
cloud foundry and kubernetes admit

00:20:31,970 --> 00:20:36,139
operations which is kind of kind of

00:20:33,500 --> 00:20:38,149
important also mention it just happens

00:20:36,139 --> 00:20:40,100
to also work on top of our IBM cloud

00:20:38,149 --> 00:20:42,529
private offering as well so just a

00:20:40,100 --> 00:20:45,889
different flavor with the same with the

00:20:42,529 --> 00:20:48,110
same you know look for your in operation

00:20:45,889 --> 00:20:52,659
although let me say that final delivery

00:20:48,110 --> 00:20:52,659
is a future unnamed unpromising

00:20:55,460 --> 00:21:00,139
to gether right every development

00:20:58,250 --> 00:21:02,149
organization has a story basically a

00:21:00,139 --> 00:21:03,860
mission right and those stories have

00:21:02,149 --> 00:21:05,929
heroes and in this case those are

00:21:03,860 --> 00:21:09,200
developers and operators right and their

00:21:05,929 --> 00:21:10,789
mission is enhanced simplified and more

00:21:09,200 --> 00:21:13,639
successful when they have the right

00:21:10,789 --> 00:21:15,340
tools or weapons for the job so cloud

00:21:13,639 --> 00:21:17,659
foundry crew Bernays are those tools

00:21:15,340 --> 00:21:21,649
that when wielded as weapons by the

00:21:17,659 --> 00:21:24,500
right hero can conquer any challenge and

00:21:21,649 --> 00:21:27,250
I to here as we need and the heroes we

00:21:24,500 --> 00:21:30,830
deserve I had way too much fun on this

00:21:27,250 --> 00:21:34,070
so peanut butter and jelly sandwich yes

00:21:30,830 --> 00:21:35,990
Chris you are the one in heels and of

00:21:34,070 --> 00:21:38,720
course of course will give them weapons

00:21:35,990 --> 00:21:40,190
as well so just to the next steps to

00:21:38,720 --> 00:21:41,889
call to action and it's a call to action

00:21:40,190 --> 00:21:45,649
for you guys right it's a call to action

00:21:41,889 --> 00:21:48,669
so many cloud companies were involved in

00:21:45,649 --> 00:21:51,259
the ireenie project across the space

00:21:48,669 --> 00:21:52,940
suicide for example the other day just a

00:21:51,259 --> 00:21:55,669
day or two ago released their cloud

00:21:52,940 --> 00:21:56,990
application platform 1.4 and from what I

00:21:55,669 --> 00:21:58,610
understand from the blog and from

00:21:56,990 --> 00:22:00,619
talking to these guys here they also

00:21:58,610 --> 00:22:02,740
have a technology preview which

00:22:00,619 --> 00:22:05,530
demonstrates the emerging

00:22:02,740 --> 00:22:07,960
of CF and kubernetes with every knee so

00:22:05,530 --> 00:22:11,470
it's been done twice now one by us by

00:22:07,960 --> 00:22:13,480
them and other people as well right so

00:22:11,470 --> 00:22:15,520
the project arena you can learn a lot

00:22:13,480 --> 00:22:17,679
more information of course our offering

00:22:15,520 --> 00:22:19,840
is deployed there and there's a nice

00:22:17,679 --> 00:22:21,820
TechCrunch article that came out just

00:22:19,840 --> 00:22:23,290
google it you'll find it and they talked

00:22:21,820 --> 00:22:26,950
about the whole thing happening at the

00:22:23,290 --> 00:22:30,250
summit so I think that's that's the end

00:22:26,950 --> 00:22:31,809
Chris and I are happy to engage and talk

00:22:30,250 --> 00:22:33,100
about this at any opportunity and

00:22:31,809 --> 00:22:41,890
hopefully we created a pretty good

00:22:33,100 --> 00:22:43,480
damage does it and yeah any questions

00:22:41,890 --> 00:22:54,809
we're happy to take questions

00:22:43,480 --> 00:22:54,809
oh yeah any questions

00:23:01,039 --> 00:23:07,409
so we're between you and beard so if you

00:23:05,100 --> 00:23:08,879
have any more catch us in hallways or

00:23:07,409 --> 00:23:11,140
whatever and of course we're easily

00:23:08,879 --> 00:23:14,289
contacted so that's it

00:23:11,140 --> 00:23:14,289

YouTube URL: https://www.youtube.com/watch?v=jqOCnjKe2PM


