Title: Live Migration Demo of a WebSphere-based Java EE Monolith to Cloud Foundry - Matthias Haeussler
Publication date: 2019-04-11
Playlist: Cloud Foundry Summit NA 2019 - Philadelphia
Description: 
	Live Migration Demo of a WebSphere-based Java EE Monolith to Cloud Foundry - Thorsten Jakoby & Matthias Haeussler, Novatec Consulting

The intention of this talk is to show a live step-by-step approach to migrate a monolithic WebSphere application to Cloud Foundry. It starts showing the application running in itâ€™s WebSphere environments and finishes running the migrated app on Cloud Foundry. On the migration journey the following steps are shown:

* Deployment and runtime on WebSphere
* Analysis of application in terms of required code changes and connected backend services
* Configuration and bring up of the application on WebSphere Liberty Profile
* Deployment and runtime on PCF Dev using Community Buildpack for Liberty
* Migration of backend services to Cloud Platform (Microsoft Azure in this example)
* Deployment and runtime of application on PCF on Azure
* Application of strangler pattern to start slicing the monolith into Microservices.

It is based on a talk given at the User track of Cloud Foundry Summit in Basel 2018. It was received very well, got a lot of good feedback and brought up interesting discussions with the attendees. While this talk was very conceptual, this new version is intended to demonstrate the involved steps in a live example and perform the migration within the given time of 30 minutes.

About Thorsten Jakoby
Thorsten Jakoby is a consultant for IT-Architectures and Cloud Migrations at Novatec in Germany. He is currently technical lead for an enterprise-scale cloud migration at a global automotive client. With a background of 10 years in distributed applications Thorsten enables both customers building cloud architectures and students entering the IT and cloud world. Prior to his role at Novatec he led a company specialized in cloud-based startup projects. Besides his role as consultant, he also speaks on meetups and conferences (like Cloud Foundry Summit EU, W-JAX, OOP).

About Matthias Haeussler
Matthias Haeussler is Cloud Consultant at NovaTec, organizer of the Stuttgart Cloud Foundry Meetup and proud member of the Cloud Foundry Ambassador community. In his primary role he advises clients on Cloud strategies and supports architecture, implementations and migrations. Besides that he teaches Cloud Native Software Development at universities. He is frequent speaker on meetups and conferences (Cloud Foundry Summit NA & EU, KubeCon, WJAX and many more). Prior to his position at Novatec he was employed at IBM R&D Germany for 15 years.

https://www.cloudfoundry.org/
Captions: 
	00:00:00,030 --> 00:00:06,960
okay good afternoon thanks for coming to

00:00:04,020 --> 00:00:08,670
my talk I know there's other great

00:00:06,960 --> 00:00:12,710
options and so I appreciate you stopping

00:00:08,670 --> 00:00:16,830
by and watching with me the life

00:00:12,710 --> 00:00:18,029
migration of a Java EE application based

00:00:16,830 --> 00:00:22,320
on WebSphere to a cloud foundry

00:00:18,029 --> 00:00:26,519
environment as you can see also here

00:00:22,320 --> 00:00:28,529
there are two names listed so one is

00:00:26,519 --> 00:00:32,309
myself the other one is my colleague

00:00:28,529 --> 00:00:34,739
Torsten unfortunately he had to cancel

00:00:32,309 --> 00:00:36,329
his trip in the night before the flight

00:00:34,739 --> 00:00:42,660
he had to go to the hospital in an

00:00:36,329 --> 00:00:44,610
emergency and this I don't know who he's

00:00:42,660 --> 00:00:47,160
doing better now but it was unable to

00:00:44,610 --> 00:00:48,780
travel so quick shoutout from my side

00:00:47,160 --> 00:00:50,850
and I'm not sure if this is you recorded

00:00:48,780 --> 00:00:52,770
and later on in YouTube but you'll be

00:00:50,850 --> 00:00:54,800
missed my friend and it's not the same

00:00:52,770 --> 00:00:59,160
to stand up on the stage here on my own

00:00:54,800 --> 00:01:01,230
wish your speedy recovery this also had

00:00:59,160 --> 00:01:03,300
of course a bit of an effect on the on

00:01:01,230 --> 00:01:05,519
the things that I want to show because

00:01:03,300 --> 00:01:06,960
we had kind of split the individual demo

00:01:05,519 --> 00:01:10,159
steps so I had to align it a little bit

00:01:06,960 --> 00:01:15,180
and now we're going to see how things go

00:01:10,159 --> 00:01:18,180
so as I said it is kind of a live demo

00:01:15,180 --> 00:01:23,060
so there are almost no slides I have a

00:01:18,180 --> 00:01:25,770
few slides just as a like a visual

00:01:23,060 --> 00:01:27,630
representation of the things that I that

00:01:25,770 --> 00:01:29,220
I tried to do and try to show and what

00:01:27,630 --> 00:01:32,340
is the other thing is coming from I

00:01:29,220 --> 00:01:35,610
should probably say we have done an

00:01:32,340 --> 00:01:37,320
initial presentation of this talk last

00:01:35,610 --> 00:01:41,070
year at the Cloud Foundry summit in in

00:01:37,320 --> 00:01:42,930
Basel however this was more on a talk in

00:01:41,070 --> 00:01:44,970
a conceptual way why we did the

00:01:42,930 --> 00:01:49,409
individual things and how we approach it

00:01:44,970 --> 00:01:51,420
and so on and more about the technical

00:01:49,409 --> 00:01:53,939
backgrounds the one today is more about

00:01:51,420 --> 00:01:56,610
how we actually did it so showing the

00:01:53,939 --> 00:01:59,100
steps that we that we try to do in order

00:01:56,610 --> 00:02:01,530
to get the job done so more honor on a

00:01:59,100 --> 00:02:03,960
hands-on kind of thing so if you have

00:02:01,530 --> 00:02:05,909
any further questions about why we came

00:02:03,960 --> 00:02:07,920
to that conclusion or why did certain

00:02:05,909 --> 00:02:10,800
things that way I'm happy to answer any

00:02:07,920 --> 00:02:13,770
questions in the end also there will be

00:02:10,800 --> 00:02:15,390
a couple of like times where deploy

00:02:13,770 --> 00:02:16,830
and we have to wait a little bit and I

00:02:15,390 --> 00:02:22,160
can have I'm happy to answer questions

00:02:16,830 --> 00:02:26,010
there as well so this is basically how

00:02:22,160 --> 00:02:29,010
the the high-level overview of how

00:02:26,010 --> 00:02:31,290
things started so initially we had a web

00:02:29,010 --> 00:02:33,900
or we still have that an application

00:02:31,290 --> 00:02:36,450
running on a clustered WebSphere in a

00:02:33,900 --> 00:02:39,180
local data center and our the desire of

00:02:36,450 --> 00:02:43,140
our client was basically to modernize

00:02:39,180 --> 00:02:44,490
this application stack and run this run

00:02:43,140 --> 00:02:46,920
the software in on a cloud-based

00:02:44,490 --> 00:02:49,410
platform potentially develop in in

00:02:46,920 --> 00:02:51,390
towards a micro service architecture so

00:02:49,410 --> 00:02:53,760
it's pretty much like here's our

00:02:51,390 --> 00:02:56,990
monolith running on the cloud for us we

00:02:53,760 --> 00:02:59,460
don't care how all right and so well

00:02:56,990 --> 00:03:00,930
this was new for us as well this is the

00:02:59,460 --> 00:03:02,310
firm we have funded a couple of times in

00:03:00,930 --> 00:03:03,780
the meantime but this was like the

00:03:02,310 --> 00:03:05,910
experience report from the first time we

00:03:03,780 --> 00:03:09,240
did it the steps were going to show

00:03:05,910 --> 00:03:10,580
first of all WebSphere was not we found

00:03:09,240 --> 00:03:13,500
Webster not to be the suitable

00:03:10,580 --> 00:03:15,660
application like the applications of a

00:03:13,500 --> 00:03:17,880
runtime for for micro services so the

00:03:15,660 --> 00:03:20,670
first step would be to migrate from

00:03:17,880 --> 00:03:23,790
WebSphere to WebSphere Liberty profile

00:03:20,670 --> 00:03:28,320
this is like a lightweight application

00:03:23,790 --> 00:03:31,200
server also with its roots in IBM after

00:03:28,320 --> 00:03:34,500
that if this step goes fine in it most

00:03:31,200 --> 00:03:36,600
likely will go find trying the Cloud

00:03:34,500 --> 00:03:38,940
Foundry approach Cloud Foundry does have

00:03:36,600 --> 00:03:40,950
a community build pack for Liberty

00:03:38,940 --> 00:03:42,690
profile so that's was an initial

00:03:40,950 --> 00:03:45,510
decision for us to take that direction

00:03:42,690 --> 00:03:47,580
and then the first thing we did was

00:03:45,510 --> 00:03:50,190
trying to run it on a local development

00:03:47,580 --> 00:03:52,800
environment like a PC FF still having it

00:03:50,190 --> 00:03:55,380
connected to the same back-end services

00:03:52,800 --> 00:03:57,030
that we had at the time and then the

00:03:55,380 --> 00:04:00,750
final step to get it running in the

00:03:57,030 --> 00:04:03,840
cloud was using a solution to run on PCF

00:04:00,750 --> 00:04:05,459
on Azure in this case of course also

00:04:03,840 --> 00:04:07,590
involved not only the migration of the

00:04:05,459 --> 00:04:11,700
application side but also of the backend

00:04:07,590 --> 00:04:14,580
services so initially the the WebSphere

00:04:11,700 --> 00:04:17,280
landscape was connected to it to db2 db2

00:04:14,580 --> 00:04:19,440
most likely not available on Asscher as

00:04:17,280 --> 00:04:25,700
a managed service so we did a migration

00:04:19,440 --> 00:04:25,700
to two Postgres at the time okay so

00:04:25,979 --> 00:04:32,219
about the application it's a big your

00:04:31,770 --> 00:04:34,800
file

00:04:32,219 --> 00:04:37,560
it has about 250 thousand lines of code

00:04:34,800 --> 00:04:39,780
so it's not that the largest of all mana

00:04:37,560 --> 00:04:44,009
lists but it's definitely bigger than a

00:04:39,780 --> 00:04:46,259
micro service and it's it's more it's

00:04:44,009 --> 00:04:49,530
it's a back-end application from on

00:04:46,259 --> 00:04:51,030
automotive client that we serve and most

00:04:49,530 --> 00:04:51,900
of the caught incoming calls are being

00:04:51,030 --> 00:04:53,669
done through rest

00:04:51,900 --> 00:04:55,229
there's also be different web interface

00:04:53,669 --> 00:04:57,240
and I'm gonna show four for validation

00:04:55,229 --> 00:04:59,460
but it's not like a fancy UI application

00:04:57,240 --> 00:05:01,650
it's mostly about data processing so it

00:04:59,460 --> 00:05:03,719
does about a million requests in an hour

00:05:01,650 --> 00:05:05,490
or so so it's kind under constant load

00:05:03,719 --> 00:05:08,310
which also had an effect on our

00:05:05,490 --> 00:05:10,560
decisions in the migration so the first

00:05:08,310 --> 00:05:14,189
step as I said is basically trying to

00:05:10,560 --> 00:05:16,680
take WebSphere out and bring Liberty in

00:05:14,189 --> 00:05:18,620
as a validation to say if this is

00:05:16,680 --> 00:05:21,180
running on a Latin on a much lighter

00:05:18,620 --> 00:05:23,069
Java EE infrastructure than WebSphere is

00:05:21,180 --> 00:05:26,189
and this is also like the recommended

00:05:23,069 --> 00:05:27,930
solution from both IBM and Pirlo to to

00:05:26,189 --> 00:05:29,400
to run those workloads in in cloud

00:05:27,930 --> 00:05:34,349
foundry or in containers in general and

00:05:29,400 --> 00:05:37,289
that's the the thing we try to do so is

00:05:34,349 --> 00:05:39,220
that big enough for the people in the

00:05:37,289 --> 00:05:41,620
background to read

00:05:39,220 --> 00:05:45,430
if you cannot see it raise your hands

00:05:41,620 --> 00:05:50,380
please okay okay like it's getting

00:05:45,430 --> 00:05:51,940
better okay so I have a couple of

00:05:50,380 --> 00:05:53,440
folders here with the individual demo

00:05:51,940 --> 00:05:55,120
steps so I'm not going to show anything

00:05:53,440 --> 00:05:56,470
how the application is running in

00:05:55,120 --> 00:05:59,350
WebSphere so I'm really starting at the

00:05:56,470 --> 00:06:03,460
point where I say here is the ear file

00:05:59,350 --> 00:06:05,770
and we're gonna look at that so the ear

00:06:03,460 --> 00:06:08,410
file is basically this one here it has

00:06:05,770 --> 00:06:11,140
about 14 megabytes in size so I should

00:06:08,410 --> 00:06:13,930
probably say this is like the real world

00:06:11,140 --> 00:06:16,180
code the only thing that we did was

00:06:13,930 --> 00:06:19,210
completely scramble it and take all the

00:06:16,180 --> 00:06:22,330
references out from the internal project

00:06:19,210 --> 00:06:23,740
names and customer name and so on in

00:06:22,330 --> 00:06:25,750
order to use it as for such demo

00:06:23,740 --> 00:06:27,820
purposes but it's not something we set

00:06:25,750 --> 00:06:30,250
up in a fake way to do a demo on that so

00:06:27,820 --> 00:06:34,090
this is the the real code of that

00:06:30,250 --> 00:06:38,230
application the first thing we did is

00:06:34,090 --> 00:06:40,510
there IBM provides a tool called the

00:06:38,230 --> 00:06:43,840
binary app scanner and with this one

00:06:40,510 --> 00:06:45,910
will basically scan the ear file to

00:06:43,840 --> 00:06:48,190
check what kind of technologies we're

00:06:45,910 --> 00:06:50,140
internally using and if they are

00:06:48,190 --> 00:06:52,300
compliant with a liberty runtime and

00:06:50,140 --> 00:06:57,419
what you need to basically do to enable

00:06:52,300 --> 00:07:03,110
them so this is a java application i

00:06:57,419 --> 00:07:05,620
provide the and i think

00:07:03,110 --> 00:07:05,620
works like that

00:07:06,479 --> 00:07:12,409
okay so it's we're going to go over that

00:07:08,520 --> 00:07:16,740
list and that feature list command will

00:07:12,409 --> 00:07:20,009
will actually trigger an XML

00:07:16,740 --> 00:07:22,939
configuration to use later on with with

00:07:20,009 --> 00:07:25,169
liberty and it can also bring up a

00:07:22,939 --> 00:07:26,909
migration report file this is something

00:07:25,169 --> 00:07:30,180
that I have done in advance notice is to

00:07:26,909 --> 00:07:33,980
save some time here so after executing

00:07:30,180 --> 00:07:36,590
this file we're gonna get this one

00:07:33,980 --> 00:07:38,900
and if I look into that these are like

00:07:36,590 --> 00:07:41,090
the features that it has detected from a

00:07:38,900 --> 00:07:45,100
Java II technology perspective which

00:07:41,090 --> 00:07:48,110
would an intern needs to to run it in a

00:07:45,100 --> 00:07:52,340
to run it in Liberty profile now looking

00:07:48,110 --> 00:07:54,500
at that webpage real quick this is a

00:07:52,340 --> 00:07:57,200
long website that you're gonna get this

00:07:54,500 --> 00:08:00,230
application migration report so it will

00:07:57,200 --> 00:08:02,290
basically check if it finds certain

00:08:00,230 --> 00:08:05,000
platforms to be compliant to run it with

00:08:02,290 --> 00:08:07,640
this will also evaluate individual

00:08:05,000 --> 00:08:10,010
technologies that you use and it will

00:08:07,640 --> 00:08:11,570
also describe a couple of things that it

00:08:10,010 --> 00:08:13,790
found that you say well this runs on

00:08:11,570 --> 00:08:16,190
WebSphere that's not even a Liberty so

00:08:13,790 --> 00:08:19,010
please have a look into that too to

00:08:16,190 --> 00:08:21,740
update your code I'm just going to close

00:08:19,010 --> 00:08:23,900
that section it also I mean this shows

00:08:21,740 --> 00:08:25,490
the content of the file I think it would

00:08:23,900 --> 00:08:27,680
be pointless for you to throw you

00:08:25,490 --> 00:08:29,540
something in the code but just to give

00:08:27,680 --> 00:08:33,919
you an impression of what the complexity

00:08:29,540 --> 00:08:35,690
of the application kind of is and it's a

00:08:33,919 --> 00:08:37,610
good analysis tool for the application

00:08:35,690 --> 00:08:39,950
and channel but very helpful also for

00:08:37,610 --> 00:08:41,750
the migration in the end it will come up

00:08:39,950 --> 00:08:43,849
with these features and these are the

00:08:41,750 --> 00:08:46,100
features that we basically use them too

00:08:43,849 --> 00:08:49,330
for the application migration so I'm

00:08:46,100 --> 00:08:49,330
trying to show that now

00:08:52,339 --> 00:08:56,160
what you moved you're gonna have

00:08:54,420 --> 00:08:58,410
come up with in the end is a so-called

00:08:56,160 --> 00:09:01,590
server.xml file and that on the top of

00:08:58,410 --> 00:09:03,750
the server.xml file you just list those

00:09:01,590 --> 00:09:05,910
features like each a/b is chain the

00:09:03,750 --> 00:09:07,380
chain the I what kind of security things

00:09:05,910 --> 00:09:09,330
and so on basically everything your

00:09:07,380 --> 00:09:11,820
application needs and what you can take

00:09:09,330 --> 00:09:13,410
from the from the scanning what you

00:09:11,820 --> 00:09:15,600
can't take from the scanning are your

00:09:13,410 --> 00:09:17,100
application specific properties like if

00:09:15,600 --> 00:09:18,870
you said chain the I entries for

00:09:17,100 --> 00:09:21,240
yourself or if you connect to a database

00:09:18,870 --> 00:09:25,740
so right here you get like the reference

00:09:21,240 --> 00:09:27,930
to to the db2 that your application can

00:09:25,740 --> 00:09:29,400
connect in the same way it would be kind

00:09:27,930 --> 00:09:30,660
of dangerous if the application is going

00:09:29,400 --> 00:09:31,890
to could read out the passwords and so

00:09:30,660 --> 00:09:33,780
on so these are the things that you have

00:09:31,890 --> 00:09:36,440
to set by yourself so it's a combination

00:09:33,780 --> 00:09:40,760
basically or features and configuration

00:09:36,440 --> 00:09:44,100
after this one is done you can basically

00:09:40,760 --> 00:09:48,960
run the thing so we have I have written

00:09:44,100 --> 00:09:51,480
a little script to to do that so the

00:09:48,960 --> 00:09:53,940
important command is basically liberties

00:09:51,480 --> 00:09:55,860
bin server run and then uses that file

00:09:53,940 --> 00:09:57,300
in the beginning which is copy a few

00:09:55,860 --> 00:09:59,850
file because I have done a bit of local

00:09:57,300 --> 00:10:01,970
development here to adapt for this demo

00:09:59,850 --> 00:10:04,920
that's why I put it into this script fan

00:10:01,970 --> 00:10:09,090
so I should probably also mention I have

00:10:04,920 --> 00:10:11,630
a db2 running in a docker container I

00:10:09,090 --> 00:10:14,670
hope it is running in the talk yes it is

00:10:11,630 --> 00:10:18,680
this one I will try to connect to the

00:10:14,670 --> 00:10:24,240
only thing I have to validate quickly is

00:10:18,680 --> 00:10:25,830
the network connection because this this

00:10:24,240 --> 00:10:28,380
is how the application connects and this

00:10:25,830 --> 00:10:31,230
IP is different from the one in my hotel

00:10:28,380 --> 00:10:33,390
and at home but it looks like it hasn't

00:10:31,230 --> 00:10:38,610
changed again so this is good

00:10:33,390 --> 00:10:41,850
that means I can run this and now

00:10:38,610 --> 00:10:43,500
liberty will basically come up you will

00:10:41,850 --> 00:10:45,180
see the the output of the locked files

00:10:43,500 --> 00:10:48,600
it probably not going to tell you much

00:10:45,180 --> 00:10:50,430
or not as much as it as it tells me so

00:10:48,600 --> 00:10:52,980
in the meantime I can give a bit of an

00:10:50,430 --> 00:10:56,690
idea of why we did things that way as I

00:10:52,980 --> 00:11:00,030
said before the the application is under

00:10:56,690 --> 00:11:03,530
very heavy load and it was not a good

00:11:00,030 --> 00:11:03,530
not an easy thing for us

00:11:04,100 --> 00:11:09,590
need to have an eye on that a little bit

00:11:06,600 --> 00:11:12,230
[Music]

00:11:09,590 --> 00:11:13,960
so it's as initialization successful I'm

00:11:12,230 --> 00:11:16,790
gonna continue with that story later

00:11:13,960 --> 00:11:18,890
because now I can I should be good to

00:11:16,790 --> 00:11:21,800
show it I just need to scroll back a

00:11:18,890 --> 00:11:23,180
little and see it will basically say at

00:11:21,800 --> 00:11:25,340
some point where the application is

00:11:23,180 --> 00:11:27,770
running and what port is is bound to so

00:11:25,340 --> 00:11:32,529
this is the one right here and if I go

00:11:27,770 --> 00:11:36,230
to my browser again and put the URL in

00:11:32,529 --> 00:11:39,680
then I'm basically getting the DUI of

00:11:36,230 --> 00:11:42,260
the application so it basically is a

00:11:39,680 --> 00:11:43,850
registry for the vehicles uses partners

00:11:42,260 --> 00:11:45,860
and so on I mean we're not really

00:11:43,850 --> 00:11:48,980
interested in what the application does

00:11:45,860 --> 00:11:52,220
internally just to show that things can

00:11:48,980 --> 00:11:54,710
be run that way so that means the first

00:11:52,220 --> 00:11:56,839
part of the migration has been finished

00:11:54,710 --> 00:12:00,770
so we know we can run the application on

00:11:56,839 --> 00:12:02,779
Liberty now and have a look at the

00:12:00,770 --> 00:12:06,620
further steps so the next thing would be

00:12:02,779 --> 00:12:08,779
to make it run on Cloud Foundry and we

00:12:06,620 --> 00:12:11,420
use PCF def a lot for like local

00:12:08,779 --> 00:12:13,580
development that means what what we did

00:12:11,420 --> 00:12:14,210
was running PCF dev on the local

00:12:13,580 --> 00:12:19,280
environment

00:12:14,210 --> 00:12:21,290
just leave the database as it is and not

00:12:19,280 --> 00:12:23,300
run it with the Liberty profile in that

00:12:21,290 --> 00:12:25,370
way but using that Liberty build pack

00:12:23,300 --> 00:12:28,880
and run the application on top of that

00:12:25,370 --> 00:12:32,210
so I should probably also mention we

00:12:28,880 --> 00:12:34,010
didn't connect to db2 as as a use of

00:12:32,210 --> 00:12:35,630
provided service as Cloud Foundry would

00:12:34,010 --> 00:12:37,010
probably as it would be a best practice

00:12:35,630 --> 00:12:38,510
in Cloud Foundry we basically just

00:12:37,010 --> 00:12:43,100
connected straight over the network just

00:12:38,510 --> 00:12:44,450
to see if the application service or the

00:12:43,100 --> 00:12:49,089
update the application can connect

00:12:44,450 --> 00:12:52,089
successfully all right so to save some

00:12:49,089 --> 00:12:52,089
memory

00:12:53,160 --> 00:13:05,000
if this were okay I'm gonna stop this

00:12:56,400 --> 00:13:05,000
application and go over to the PCF

00:13:05,269 --> 00:13:12,369
now from a configuration perspective we

00:13:10,100 --> 00:13:15,439
left pretty much the server.xml

00:13:12,369 --> 00:13:17,809
unchanged as it was connecting to the

00:13:15,439 --> 00:13:19,759
same database on the same host them in

00:13:17,809 --> 00:13:21,889
the same port I mean the only thing we

00:13:19,759 --> 00:13:24,939
really had to set up is the the money

00:13:21,889 --> 00:13:24,939
the manifest file

00:13:26,980 --> 00:13:33,940
and so what we specified was about two

00:13:29,950 --> 00:13:36,370
gigs of RAM 1 1 gig of disk specified

00:13:33,940 --> 00:13:39,250
that that zip file where the application

00:13:36,370 --> 00:13:41,920
is contained and explicitly sped picked

00:13:39,250 --> 00:13:43,360
the build pack that we need to run so as

00:13:41,920 --> 00:13:45,519
you can see this is take coming from

00:13:43,360 --> 00:13:48,760
github from the Cloud Foundry from the

00:13:45,519 --> 00:13:50,050
foundry space is a community thing what

00:13:48,760 --> 00:13:52,360
you can see in the bottom here is just

00:13:50,050 --> 00:13:55,060
like IBM licensing information that you

00:13:52,360 --> 00:14:00,399
have to put in for making your Liberty

00:13:55,060 --> 00:14:02,050
work ok so now as you are all here on

00:14:00,399 --> 00:14:04,930
the Cloud Foundry summit I'm pretty sure

00:14:02,050 --> 00:14:06,940
you're familiar with this command but

00:14:04,930 --> 00:14:09,160
before I do it I just want to check if

00:14:06,940 --> 00:14:11,500
I'm connected to the right platform at

00:14:09,160 --> 00:14:14,890
the moment so this is PCF def yeah this

00:14:11,500 --> 00:14:18,519
is good so I'm going to execute a CF

00:14:14,890 --> 00:14:22,120
push this will probably take a bit of

00:14:18,519 --> 00:14:23,980
time I still have 18 minutes left for my

00:14:22,120 --> 00:14:25,209
overall migration so that that's looking

00:14:23,980 --> 00:14:27,970
good

00:14:25,209 --> 00:14:31,660
what will be happening now is first of

00:14:27,970 --> 00:14:33,310
all the the Liberty container or like

00:14:31,660 --> 00:14:34,839
the instance will be created then it

00:14:33,310 --> 00:14:37,240
will have to detect what kind of

00:14:34,839 --> 00:14:38,949
features are required those features are

00:14:37,240 --> 00:14:41,230
gonna be installed then and in the end

00:14:38,949 --> 00:14:43,149
it will come up with a droplet there

00:14:41,230 --> 00:14:47,769
holding the Liberty application runtime

00:14:43,149 --> 00:14:50,709
and the application on top so as it is

00:14:47,769 --> 00:14:53,800
quite heavy as you have seen before we

00:14:50,709 --> 00:14:55,600
we specified two two gigs of RAM which

00:14:53,800 --> 00:15:00,370
we found to be sufficient for that

00:14:55,600 --> 00:15:02,649
purpose now as we wait on that I can

00:15:00,370 --> 00:15:04,690
still come finish on the thing that I

00:15:02,649 --> 00:15:06,579
try to explain before a lot of people

00:15:04,690 --> 00:15:08,800
have asked us why did we do this

00:15:06,579 --> 00:15:10,449
approach and not like try to rewrite

00:15:08,800 --> 00:15:13,810
things either in springboard or create

00:15:10,449 --> 00:15:17,339
micro services and so on and the primary

00:15:13,810 --> 00:15:20,529
reason for that is as I said before we

00:15:17,339 --> 00:15:24,029
the application is live in production

00:15:20,529 --> 00:15:27,160
and is under constant and heavy load so

00:15:24,029 --> 00:15:29,800
rewriting stuff as microservice would

00:15:27,160 --> 00:15:32,440
have meant for us to have like a split

00:15:29,800 --> 00:15:35,140
development team for like maintaining

00:15:32,440 --> 00:15:36,819
the the the legacy application and and

00:15:35,140 --> 00:15:38,360
running the and trading the new one on

00:15:36,819 --> 00:15:41,779
the other hand

00:15:38,360 --> 00:15:43,720
we said if we can come to a way that we

00:15:41,779 --> 00:15:46,939
have the same code base that we run on

00:15:43,720 --> 00:15:48,769
WebSphere and the Liberty then we

00:15:46,939 --> 00:15:50,720
already know we have like a proper

00:15:48,769 --> 00:15:53,059
tested codes because like this code base

00:15:50,720 --> 00:15:56,149
is always running in production and life

00:15:53,059 --> 00:15:58,549
and so we can't we shouldn't expect too

00:15:56,149 --> 00:16:01,970
many difficulties in that on the cloud

00:15:58,549 --> 00:16:04,249
side so the overall goal was still like

00:16:01,970 --> 00:16:06,529
to get it running on the cloud as as a

00:16:04,249 --> 00:16:09,499
monolith and once we're there starting

00:16:06,529 --> 00:16:12,699
to take benefits of of a cloud platform

00:16:09,499 --> 00:16:15,319
like automatic restart scaling and so on

00:16:12,699 --> 00:16:17,839
but the first intention was to really

00:16:15,319 --> 00:16:22,579
get it there in in the same shape also

00:16:17,839 --> 00:16:24,619
what we found is that especially running

00:16:22,579 --> 00:16:28,759
those tests and making it compliant for

00:16:24,619 --> 00:16:32,869
Liberty Liberty is its kind of stricter

00:16:28,759 --> 00:16:36,019
in enforcing Java EE or like chairman

00:16:32,869 --> 00:16:38,480
general policies and websphere like at

00:16:36,019 --> 00:16:40,369
the same code sometimes Liberty would

00:16:38,480 --> 00:16:42,290
complain about something that WebSphere

00:16:40,369 --> 00:16:44,149
tolerated so in the end we we actually

00:16:42,290 --> 00:16:46,129
this helped us to make our code a little

00:16:44,149 --> 00:16:47,989
cleaner so once we got it running for

00:16:46,129 --> 00:16:52,699
liberty it was absolutely running fine

00:16:47,989 --> 00:16:56,679
on WebSphere and this is basically the

00:16:52,699 --> 00:16:59,899
point where once you go to now I can see

00:16:56,679 --> 00:17:02,149
well as we wait on this are there any

00:16:59,899 --> 00:17:06,740
questions I can answer right now are you

00:17:02,149 --> 00:17:08,809
all good to follow I did it normally

00:17:06,740 --> 00:17:11,179
takes around four or five minutes on the

00:17:08,809 --> 00:17:12,620
first run and then once you once you

00:17:11,179 --> 00:17:14,809
start and stop the individual instance

00:17:12,620 --> 00:17:17,269
later on it's like in a timeframe of

00:17:14,809 --> 00:17:19,429
about thirty Seconds to a minute and

00:17:17,269 --> 00:17:20,839
which is a lot of big improvement to

00:17:19,429 --> 00:17:22,699
what we had compared to the original

00:17:20,839 --> 00:17:25,850
WebSphere environment where the startup

00:17:22,699 --> 00:17:28,760
time was about five minutes or so

00:17:25,850 --> 00:17:32,420
now if this should for some whatever

00:17:28,760 --> 00:17:37,540
reason not come up in the desired

00:17:32,420 --> 00:17:37,540
timeframe I also have a

00:17:38,370 --> 00:17:44,420
that's a video up and you are mighty

00:17:40,290 --> 00:17:44,420
like that yes

00:17:49,620 --> 00:17:56,170
okay so repeating the question if I

00:17:53,470 --> 00:17:57,970
understood it correctly it's like if you

00:17:56,170 --> 00:17:59,530
find out during the migration process if

00:17:57,970 --> 00:18:02,890
the application is too big that you

00:17:59,530 --> 00:18:04,660
can't migrate it I mean in general we

00:18:02,890 --> 00:18:07,990
know we have to find out what too big

00:18:04,660 --> 00:18:10,690
means I mean there's no size limitation

00:18:07,990 --> 00:18:12,010
so on I mean technically you can run

00:18:10,690 --> 00:18:13,510
everything in a container you can

00:18:12,010 --> 00:18:18,280
Webster no container it just doesn't

00:18:13,510 --> 00:18:20,710
make any sense so this is a thing you

00:18:18,280 --> 00:18:22,450
need to really be careful of is trying

00:18:20,710 --> 00:18:25,480
to comply with the to a factor app

00:18:22,450 --> 00:18:27,910
guidelines and in particular to get in

00:18:25,480 --> 00:18:31,090
memory state out of the application this

00:18:27,910 --> 00:18:32,920
is basically a one thing we it took us a

00:18:31,090 --> 00:18:36,610
bit of time to validate that we have the

00:18:32,920 --> 00:18:37,990
same instances scaled that they perform

00:18:36,610 --> 00:18:41,620
like they're doing this the same thing

00:18:37,990 --> 00:18:43,840
in the same way but from from a size

00:18:41,620 --> 00:18:44,590
perspective in terms of lines of code or

00:18:43,840 --> 00:18:46,809
whatsoever

00:18:44,590 --> 00:18:48,429
there is no limitation if you're if this

00:18:46,809 --> 00:18:51,070
application runs on WebSphere and

00:18:48,429 --> 00:18:54,940
doesn't really use any particular

00:18:51,070 --> 00:18:57,490
libraries which don't exist there then

00:18:54,940 --> 00:18:59,410
it will run on Liberty as well in case

00:18:57,490 --> 00:19:02,650
if you get in such a scenario that it's

00:18:59,410 --> 00:19:04,750
really something very I don't know

00:19:02,650 --> 00:19:06,670
legacy prone and you can't run it

00:19:04,750 --> 00:19:09,040
anywhere else then this approach will

00:19:06,670 --> 00:19:13,090
not work but we have done it for a

00:19:09,040 --> 00:19:14,890
couple of applications so far and then

00:19:13,090 --> 00:19:17,110
the mode the main effect we normally had

00:19:14,890 --> 00:19:19,630
was really just it helped us clean up or

00:19:17,110 --> 00:19:21,550
monitor code in the first place and once

00:19:19,630 --> 00:19:24,460
we had it migrated then it was kind of

00:19:21,550 --> 00:19:26,980
easy to kick off new development and

00:19:24,460 --> 00:19:28,540
write new micro services alongside of it

00:19:26,980 --> 00:19:31,150
and deploy it on the same platform or

00:19:28,540 --> 00:19:35,830
cut out micro services from the existing

00:19:31,150 --> 00:19:42,360
monolith so it says here waiting for the

00:19:35,830 --> 00:19:42,360
app to start I'm going to yeah

00:19:42,860 --> 00:19:52,179
so it actually this one already says it

00:19:46,130 --> 00:19:52,179
has started let me just check the locks

00:19:56,169 --> 00:19:58,230
you

00:19:59,710 --> 00:20:04,750
so this is still saying it is starting

00:20:02,320 --> 00:20:06,610
container became healthy well this one

00:20:04,750 --> 00:20:08,410
will actually say it has failed I think

00:20:06,610 --> 00:20:10,270
it runs in a timeout or something

00:20:08,410 --> 00:20:12,820
because it takes longer than the 300

00:20:10,270 --> 00:20:14,080
seconds or whatever it has but as you

00:20:12,820 --> 00:20:16,900
can see on the locks on the right hand

00:20:14,080 --> 00:20:20,980
side it is still in the process of doing

00:20:16,900 --> 00:20:25,420
that and will eventually become healthy

00:20:20,980 --> 00:20:30,130
so I can already prepare for that and

00:20:25,420 --> 00:20:37,810
say I have CF abs then my link will be

00:20:30,130 --> 00:20:39,650
nt link local dot PC and opening that

00:20:37,810 --> 00:20:44,260
here

00:20:39,650 --> 00:20:46,890
this our writers in need to specify

00:20:44,260 --> 00:20:46,890
the other port

00:20:47,240 --> 00:20:52,070
right so there it is I just this is the

00:20:50,630 --> 00:20:54,799
same application that you have seen

00:20:52,070 --> 00:20:58,549
before and as the URL reveals this is

00:20:54,799 --> 00:21:00,590
not a fake it is running on my local PCF

00:20:58,549 --> 00:21:02,899
environment now which which basically

00:21:00,590 --> 00:21:04,460
tells me okay now have validated it's

00:21:02,899 --> 00:21:06,950
not only Liberty compliant it's also

00:21:04,460 --> 00:21:09,159
country compliant and the next step

00:21:06,950 --> 00:21:14,620
would then be how I'm gonna get this

00:21:09,159 --> 00:21:20,899
into like a enterprise level cloud so

00:21:14,620 --> 00:21:24,289
looking at my windows so that means we

00:21:20,899 --> 00:21:26,480
try to stay on a platform level with

00:21:24,289 --> 00:21:29,330
with pivotal Cloud Foundry but which we

00:21:26,480 --> 00:21:30,940
remove the DEF and switch it to a proper

00:21:29,330 --> 00:21:34,850
installation of privity Cloud Foundry

00:21:30,940 --> 00:21:40,399
running on Microsoft Azure and tie it

00:21:34,850 --> 00:21:45,620
then to a Postgres database so what that

00:21:40,399 --> 00:21:47,450
basically means what we have to do is do

00:21:45,620 --> 00:21:49,220
that database migration I mean this is a

00:21:47,450 --> 00:21:52,549
part that I cannot show here completely

00:21:49,220 --> 00:21:53,929
I can just tell you what the steps you

00:21:52,549 --> 00:21:58,520
need to do from platforms I don't order

00:21:53,929 --> 00:22:02,290
to get there so I'm going to close this

00:21:58,520 --> 00:22:08,730
I can let the other one run

00:22:02,290 --> 00:22:08,730
now I'm going to change the target

00:22:10,240 --> 00:22:17,960
this is an environment that I got

00:22:14,690 --> 00:22:23,240
provided from our friends at a total to

00:22:17,960 --> 00:22:26,210
to demonstrate that and I hope the

00:22:23,240 --> 00:22:29,510
network is good enough right that looks

00:22:26,210 --> 00:22:33,430
good so it says PCF Escher this is my

00:22:29,510 --> 00:22:38,510
end point and where I am connected so

00:22:33,430 --> 00:22:40,910
basically what you need to do is get

00:22:38,510 --> 00:22:42,500
yourself a database service and this is

00:22:40,910 --> 00:22:44,810
basically something we found really

00:22:42,500 --> 00:22:47,270
helpful running on that platform so I

00:22:44,810 --> 00:22:48,950
can open up the apps manager here I'm

00:22:47,270 --> 00:22:53,050
sure most if you have seen something

00:22:48,950 --> 00:22:57,070
like that and you can also make this

00:22:53,050 --> 00:22:57,070
sorry make this bigger

00:23:02,520 --> 00:23:05,779
and if we go to services here and you

00:23:05,370 --> 00:23:10,369
basically

00:23:05,779 --> 00:23:13,549
to add a service you get all the the

00:23:10,369 --> 00:23:15,769
Asscher provided back-end services

00:23:13,549 --> 00:23:17,690
directly like as native Cloud Foundry

00:23:15,769 --> 00:23:20,479
services you can just invoke them with a

00:23:17,690 --> 00:23:21,379
simple sea of create command and the in

00:23:20,479 --> 00:23:23,779
the backend

00:23:21,379 --> 00:23:25,309
the services will be created for you and

00:23:23,779 --> 00:23:27,109
once you once you're tied to the

00:23:25,309 --> 00:23:28,729
application or the connection

00:23:27,109 --> 00:23:31,159
information and credentials are going to

00:23:28,729 --> 00:23:33,649
be injected so this this one made it

00:23:31,159 --> 00:23:38,599
really really smooth for us to get there

00:23:33,649 --> 00:23:41,320
so it's just that service creation that

00:23:38,599 --> 00:23:41,320
was one too many

00:23:42,210 --> 00:23:46,380
it takes a bit of time I mean this note

00:23:45,240 --> 00:23:47,940
I think in the background they will

00:23:46,380 --> 00:23:50,670
probably spin up a VM and put the

00:23:47,940 --> 00:23:54,510
database there so for this case I have

00:23:50,670 --> 00:23:59,310
already created one which I call the PSP

00:23:54,510 --> 00:24:01,080
I'll test it and and now basically we

00:23:59,310 --> 00:24:04,320
need to access it from the outside and

00:24:01,080 --> 00:24:06,810
run our initial configuration scripts

00:24:04,320 --> 00:24:08,900
for the database to make sure it will be

00:24:06,810 --> 00:24:17,960
running together with that application

00:24:08,900 --> 00:24:23,280
so I have also on the application side I

00:24:17,960 --> 00:24:26,460
think I can take this one how it well I

00:24:23,280 --> 00:24:28,440
can actually use it so I'm gonna save us

00:24:26,460 --> 00:24:30,210
the time of the CF push again that would

00:24:28,440 --> 00:24:33,810
be the similar thing so the thing you

00:24:30,210 --> 00:24:36,390
should do in the first place then do a

00:24:33,810 --> 00:24:38,070
CF push with a no start option so that

00:24:36,390 --> 00:24:39,570
will basically just create the

00:24:38,070 --> 00:24:41,180
application and push the code but it's

00:24:39,570 --> 00:24:43,440
not going to start any instances yet

00:24:41,180 --> 00:24:45,360
it's just basically as the one you can

00:24:43,440 --> 00:24:52,640
see here which I called NT link back up

00:24:45,360 --> 00:24:56,240
and then you can do a bind service

00:24:52,640 --> 00:24:59,799
this is it's the app name and then it's

00:24:56,240 --> 00:24:59,799
the service name

00:25:00,620 --> 00:25:07,059
and the service name was psql test

00:25:07,299 --> 00:25:09,360
you

00:25:09,630 --> 00:25:14,510
so it would probably tell me the net had

00:25:11,700 --> 00:25:14,510
no need to restage

00:25:15,410 --> 00:25:18,340
did I

00:25:19,730 --> 00:25:23,769
oh it's back up its not service

00:25:31,400 --> 00:25:35,690
so yeah it tells me to restage this is

00:25:33,860 --> 00:25:37,490
something I don't really care about what

00:25:35,690 --> 00:25:39,770
I really care about is I can now check

00:25:37,490 --> 00:25:44,600
the environment variables of my

00:25:39,770 --> 00:25:48,410
application and with that it will tell

00:25:44,600 --> 00:25:51,460
me all the connection information that

00:25:48,410 --> 00:25:56,059
got injected to the application from

00:25:51,460 --> 00:25:58,490
from Asha so I can see up here this is

00:25:56,059 --> 00:26:00,110
basically the URL where the application

00:25:58,490 --> 00:26:02,330
where the database backing is really

00:26:00,110 --> 00:26:04,760
running I get the configuration for

00:26:02,330 --> 00:26:06,740
username password and so on this is

00:26:04,760 --> 00:26:08,660
basically what is generated internally

00:26:06,740 --> 00:26:10,580
by the platform and injected to the

00:26:08,660 --> 00:26:12,650
application so from an application

00:26:10,580 --> 00:26:17,059
perspective the end user will never have

00:26:12,650 --> 00:26:20,240
to deal with that and I'm just going to

00:26:17,059 --> 00:26:23,179
change the directory here and this will

00:26:20,240 --> 00:26:27,590
have a bit of an effect on the on the

00:26:23,179 --> 00:26:30,200
server.xml so in the server.xml you can

00:26:27,590 --> 00:26:33,260
then say the database name is just like

00:26:30,200 --> 00:26:35,630
cloud services and then psql back about

00:26:33,260 --> 00:26:37,760
psql test or whatever you name your your

00:26:35,630 --> 00:26:39,740
your database connection is and all of

00:26:37,760 --> 00:26:41,240
that will be injected to the application

00:26:39,740 --> 00:26:46,280
and will don't have to be configured out

00:26:41,240 --> 00:26:49,550
of there also what it means for us is we

00:26:46,280 --> 00:26:50,960
can we can leverage that to connect to

00:26:49,550 --> 00:26:51,520
the database and configure it in the

00:26:50,960 --> 00:26:56,150
first place

00:26:51,520 --> 00:26:59,020
so I have a another script to do that

00:26:56,150 --> 00:27:02,080
thing it's called restore peds general

00:26:59,020 --> 00:27:02,080
okay so

00:27:02,630 --> 00:27:13,389
I need to split my screen here real

00:27:06,620 --> 00:27:13,389
quick and read this

00:27:15,250 --> 00:27:21,280
so this is something I will most likely

00:27:18,280 --> 00:27:23,080
not get done until the end of this talk

00:27:21,280 --> 00:27:25,690
and it probably a bit too challenging

00:27:23,080 --> 00:27:29,380
idea to do a migrant I'm one of those

00:27:25,690 --> 00:27:31,059
migration in 30 minutes but I I just

00:27:29,380 --> 00:27:35,470
want to make sure I show you all the

00:27:31,059 --> 00:27:38,010
steps that we did in there and now I

00:27:35,470 --> 00:27:38,010
have

00:27:38,070 --> 00:27:41,930
I will execute this call

00:27:44,200 --> 00:27:48,250
ah

00:27:45,030 --> 00:27:48,250
[Music]

00:27:48,710 --> 00:27:53,710
oh it's like so I have to do hat

00:27:54,910 --> 00:28:06,630
and PS GL minus u the username which has

00:28:01,060 --> 00:28:06,630
just been created is this one

00:28:08,100 --> 00:28:10,850
the

00:28:10,910 --> 00:28:13,910
database

00:28:13,940 --> 00:28:16,510
is

00:28:16,870 --> 00:28:22,270
forgetting a home should be a hostname

00:28:19,760 --> 00:28:26,520
as well

00:28:22,270 --> 00:28:26,520
give me a second I need to

00:28:29,549 --> 00:28:32,549
okay

00:28:33,210 --> 00:28:43,870
- database this is the database name

00:28:39,539 --> 00:28:48,789
this is the hostname so you normally you

00:28:43,870 --> 00:28:52,850
do that only once right and so I got

00:28:48,789 --> 00:28:56,990
user hostname and maybe the port

00:28:52,850 --> 00:28:59,720
five four three two and if things if I

00:28:56,990 --> 00:29:02,660
didn't do a type thought its asked me

00:28:59,720 --> 00:29:04,190
for the password and I also find the

00:29:02,660 --> 00:29:07,780
password here somewhere

00:29:04,190 --> 00:29:07,780
yeah I got it thanks

00:29:07,940 --> 00:29:14,499
yeah and entering that now should

00:29:10,639 --> 00:29:14,499
hopefully give me the excess and

00:29:15,820 --> 00:29:18,539
now

00:29:20,610 --> 00:29:23,179
it was

00:29:24,509 --> 00:29:26,570
you

00:29:28,760 --> 00:29:35,840
well I mean just trust me that this will

00:29:32,120 --> 00:29:37,940
normally work it's a bit too much come a

00:29:35,840 --> 00:29:40,610
come on let in tweaking right here I'll

00:29:37,940 --> 00:29:42,260
try it later on before I do that I just

00:29:40,610 --> 00:29:44,000
want to show you that this actually

00:29:42,260 --> 00:29:47,690
works as you might have noticed I've

00:29:44,000 --> 00:29:50,559
already deployed an application there to

00:29:47,690 --> 00:29:54,220
show you that this is actually running

00:29:50,559 --> 00:29:58,190
this is this is the one right here and

00:29:54,220 --> 00:30:03,080
going back to my browser putting this in

00:29:58,190 --> 00:30:04,730
and say app to admin

00:30:03,080 --> 00:30:08,210
and then you see it's the same

00:30:04,730 --> 00:30:10,610
application now running on PC f1 Asscher

00:30:08,210 --> 00:30:11,750
connecting to that database if I mean

00:30:10,610 --> 00:30:13,640
you could actually validate this as a

00:30:11,750 --> 00:30:15,440
public URL you would be able to access

00:30:13,640 --> 00:30:17,810
it on or from your mobile phone so this

00:30:15,440 --> 00:30:20,390
is this is not a setup and from from

00:30:17,810 --> 00:30:22,670
that point on this was a very effective

00:30:20,390 --> 00:30:24,380
means also for for the customer so when

00:30:22,670 --> 00:30:26,870
we when we wanted to show like the state

00:30:24,380 --> 00:30:28,730
we just send them an email with the link

00:30:26,870 --> 00:30:31,010
and say here access your application

00:30:28,730 --> 00:30:33,620
please it's the migration has been done

00:30:31,010 --> 00:30:35,780
to that point it was also very good to

00:30:33,620 --> 00:30:38,450
like test the application now having it

00:30:35,780 --> 00:30:41,390
running on on Cloud Foundry and we could

00:30:38,450 --> 00:30:43,670
it should like in a continuous way work

00:30:41,390 --> 00:30:45,860
out if there were any problems trying to

00:30:43,670 --> 00:30:48,230
do scaling doing Bluegreen deployments

00:30:45,860 --> 00:30:49,540
and all that the the typical benefits

00:30:48,230 --> 00:30:52,220
that you would have from such a platform

00:30:49,540 --> 00:30:54,830
all right I'm getting down with them

00:30:52,220 --> 00:30:58,430
that with the time I think so

00:30:54,830 --> 00:31:00,800
I just wanted to recap the couple of

00:30:58,430 --> 00:31:03,860
steps we did first to Liberty then to

00:31:00,800 --> 00:31:06,620
PCF def using Liberty then the PCF PCF

00:31:03,860 --> 00:31:08,150
one actually using Liberty if you're

00:31:06,620 --> 00:31:10,430
interested more in the backgrounds why

00:31:08,150 --> 00:31:14,570
we did this that the talk from tourists

00:31:10,430 --> 00:31:16,760
and I from past last year you can find

00:31:14,570 --> 00:31:20,420
on youtube you can also catch me later I

00:31:16,760 --> 00:31:21,560
will be happy to answer any questions

00:31:20,420 --> 00:31:24,320
I'm just have another target four

00:31:21,560 --> 00:31:26,120
o'clock so that I might be busy then the

00:31:24,320 --> 00:31:28,340
only thing I want to say thanks to my

00:31:26,120 --> 00:31:30,050
colleagues to be as vicious and

00:31:28,340 --> 00:31:34,460
Constantine because they have been

00:31:30,050 --> 00:31:37,190
helping me to set up the to set up the

00:31:34,460 --> 00:31:38,870
the macht code and one thing I would

00:31:37,190 --> 00:31:40,850
just really quickly could everybody

00:31:38,870 --> 00:31:41,870
raise their hands who wishes torched in

00:31:40,850 --> 00:31:44,300
a speedy recovery

00:31:41,870 --> 00:31:47,450
because then I'll send this photo to him

00:31:44,300 --> 00:31:52,070
and I'm pretty sure thanks that was very

00:31:47,450 --> 00:31:54,260
very kind he was yeah he was very

00:31:52,070 --> 00:31:58,400
disappointed that he couldn't make it

00:31:54,260 --> 00:32:00,880
here and I'm sure like oh you sympathy

00:31:58,400 --> 00:32:05,090
build and make him recover a lot faster

00:32:00,880 --> 00:32:08,180
so I don't know what the timing looks

00:32:05,090 --> 00:32:09,560
like them yeah so I think maybe two

00:32:08,180 --> 00:32:11,480
questions in here would be fine and then

00:32:09,560 --> 00:32:14,920
we could definitely take some all right

00:32:11,480 --> 00:32:14,920
his lady was first

00:32:20,560 --> 00:32:26,450
okay the question was that we initially

00:32:23,630 --> 00:32:30,590
use db2 and where it then went when we

00:32:26,450 --> 00:32:35,720
migrated to Cloud Foundry so okay this

00:32:30,590 --> 00:32:40,760
is my timer tells me that I'm done we

00:32:35,720 --> 00:32:42,950
lost db2 at the PCF dev step so

00:32:40,760 --> 00:32:45,830
initially WebSphere was connecting to

00:32:42,950 --> 00:32:48,440
db2 Liberty was connecting to db2 and

00:32:45,830 --> 00:32:51,110
the initial version running on PCF def

00:32:48,440 --> 00:32:54,370
was also connected to db2 at that point

00:32:51,110 --> 00:32:57,920
we were already able to like spin up the

00:32:54,370 --> 00:32:59,720
the Postgres sequel in parallel and I

00:32:57,920 --> 00:33:02,150
mean this one of course required some

00:32:59,720 --> 00:33:04,660
modification in the application this

00:33:02,150 --> 00:33:08,930
step I couldn't demo here but it's like

00:33:04,660 --> 00:33:12,500
we did that POC on PCF def to validate

00:33:08,930 --> 00:33:14,630
it works against psql - and then I

00:33:12,500 --> 00:33:16,880
created the P SQL instance on Azure

00:33:14,630 --> 00:33:18,680
running that initial configuration

00:33:16,880 --> 00:33:21,290
script and that would be the same way as

00:33:18,680 --> 00:33:24,280
you can load the data into it makes

00:33:21,290 --> 00:33:24,280
sense now what

00:33:26,220 --> 00:33:33,610
yes so that like the data migration part

00:33:30,160 --> 00:33:35,740
is not content of this talk so I mean I

00:33:33,610 --> 00:33:37,590
the way I'm that what I did here was

00:33:35,740 --> 00:33:41,800
just basically initializing the database

00:33:37,590 --> 00:33:45,670
that the application can connect to it

00:33:41,800 --> 00:33:47,380
and work with it but it didn't it I

00:33:45,670 --> 00:33:50,320
didn't migrate the data yeah that's

00:33:47,380 --> 00:33:54,040
that's a pretty tough thing to do

00:33:50,320 --> 00:33:58,590
but yes this might might be stuff for

00:33:54,040 --> 00:33:58,590
another talk okay you had a question too

00:34:04,530 --> 00:34:11,110
I mean it was a bit that way as the

00:34:09,130 --> 00:34:13,990
things we're not running in the same

00:34:11,110 --> 00:34:16,480
networks so this had of course an impact

00:34:13,990 --> 00:34:18,370
on well the question basically was about

00:34:16,480 --> 00:34:20,770
the performance differences between

00:34:18,370 --> 00:34:23,590
initial WebSphere and then running on

00:34:20,770 --> 00:34:25,390
the cloud later on well this was kind

00:34:23,590 --> 00:34:27,340
kind of hard to measure because we had

00:34:25,390 --> 00:34:30,850
like a direct data center access on the

00:34:27,340 --> 00:34:33,490
WebSphere side and then for the POC we

00:34:30,850 --> 00:34:35,500
were running on a public assure I can

00:34:33,490 --> 00:34:37,870
only say we didn't notice any

00:34:35,500 --> 00:34:39,550
significant degradation or something

00:34:37,870 --> 00:34:43,600
like that so the application responded

00:34:39,550 --> 00:34:47,290
in a similar way as it did before we we

00:34:43,600 --> 00:34:49,540
we did some comparisons running it by

00:34:47,290 --> 00:34:52,929
like locally on a WebSphere and then on

00:34:49,540 --> 00:34:55,000
a Liberty and yeah that didn't do any

00:34:52,929 --> 00:35:02,670
harm to that

00:34:55,000 --> 00:35:02,670
I see yes

00:35:09,400 --> 00:35:15,380
well this the one the reason why I

00:35:13,310 --> 00:35:17,090
showed it that way is that it worked

00:35:15,380 --> 00:35:20,950
we'll work this way all the time

00:35:17,090 --> 00:35:23,420
I mean IBM provides additional tooling

00:35:20,950 --> 00:35:25,220
well the one I showed was command line

00:35:23,420 --> 00:35:27,140
generating the roof's report there is

00:35:25,220 --> 00:35:29,810
not a tooling where you can plug in into

00:35:27,140 --> 00:35:31,220
an eclipse and it will highlight the

00:35:29,810 --> 00:35:32,990
pieces in the code that you actually

00:35:31,220 --> 00:35:36,200
have to migrate so that would be

00:35:32,990 --> 00:35:38,540
somewhat more visual but well the CF

00:35:36,200 --> 00:35:40,310
thing you can of course start an

00:35:38,540 --> 00:35:43,310
application through the apps manager and

00:35:40,310 --> 00:35:45,860
upload it this way but I wanted to have

00:35:43,310 --> 00:35:47,120
it in a generic way so a couple of

00:35:45,860 --> 00:35:47,480
things can definitely be done different

00:35:47,120 --> 00:35:51,020
yeah

00:35:47,480 --> 00:35:54,500
there are ways yeah there is just no

00:35:51,020 --> 00:35:56,300
like end-to-end migration tooling yet

00:35:54,500 --> 00:35:58,250
which basically takes the monolith and

00:35:56,300 --> 00:35:59,420
then comes back with something which

00:35:58,250 --> 00:36:01,820
already running and connect the

00:35:59,420 --> 00:36:03,650
different database if I had that that

00:36:01,820 --> 00:36:06,920
would be very good but it would take me

00:36:03,650 --> 00:36:11,570
out of my job then okay so thanks all

00:36:06,920 --> 00:36:14,300
for listening and as you are all

00:36:11,570 --> 00:36:16,220
experienced Cloud Foundry is already I

00:36:14,300 --> 00:36:18,050
have another talk which is in the one on

00:36:16,220 --> 00:36:19,430
one section at 4:30 if you're interested

00:36:18,050 --> 00:36:19,910
but I expect most of you to know that

00:36:19,430 --> 00:36:23,560
already

00:36:19,910 --> 00:36:23,560

YouTube URL: https://www.youtube.com/watch?v=YL7T3ZTUHVM


