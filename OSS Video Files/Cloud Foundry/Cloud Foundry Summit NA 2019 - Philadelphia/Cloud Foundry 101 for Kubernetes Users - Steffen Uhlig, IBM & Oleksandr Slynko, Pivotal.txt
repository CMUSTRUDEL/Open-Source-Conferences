Title: Cloud Foundry 101 for Kubernetes Users - Steffen Uhlig, IBM & Oleksandr Slynko, Pivotal
Publication date: 2019-04-11
Playlist: Cloud Foundry Summit NA 2019 - Philadelphia
Description: 
	Cloud Foundry 101 for Kubernetes Users - Steffen Uhlig, IBM & Oleksandr Slynko, Pivotal

This talk will take Kubernetes users from “zero to hero” with Cloud Foundry. Kubernetes is fantastic, but since you are at CF Summit you are probably tempted by the Cloud Foundry promise of letting you “just push code” and not worry about the details of containers, and scheduling, and scaling. But Cloud Foundry does still have a learning curve -- this talk is here to help you over it!

Kubernetes is meant to be used by operators, not developers. Developers shouldn’t need to care about the inner workings of Kubernetes such as Pods, Services, StatefulSets, Ingresses and how to use and configure them just to get their application running, right? This is where Cloud Foundry comes in.

In this talk, we will explore what Kubernetes users need to know when using Cloud Foundry. We’ll get familiar with CF's own container scheduler -Diego- and its differences with Kubernetes. We will also look at how, using Eirini, you can get up and running with CF on your existing Kubernetes cluster with a couple of helm installs. And we’ll compare, hands-on, the effort it takes to bring up an application from scratch in both Cloud Foundry and Kubernetes and see it running in the cloud!

About Oleksandr Slynko
Oleksandr is Staff Software Engineer at Pivotal. He works on project Eirini. Before that he worked on Cloud Foundry Container Runtime and related projects for more than two years. Oleksandr has a background in automation and working on high available cloud solutions.

About Steffen Uhlig
Steffen is a Senior Software Engineer at IBM Research and Development near Stuttgart, Germany. Besides working on Eirini, he is also a member of the postgres-release team. Steffen also served as the first anchor of the bits-service, where a large set of operations was extracted from the Cloud Controller. While he is still a Ruby enthusiast, Steffen also enjoyed spending some time in the Garden team. His spare time is reserved for his wife, two kids, and a cat.
Captions: 
	00:00:00,030 --> 00:00:05,940
so welcome everyone to Cloud Foundry 101

00:00:03,030 --> 00:00:08,250
for Google in this series I have the

00:00:05,940 --> 00:00:11,099
pleasure to introduce you to Alex Cinco

00:00:08,250 --> 00:00:13,469
he works for pivot law he is currently a

00:00:11,099 --> 00:00:15,000
member of the irony team and he

00:00:13,469 --> 00:00:20,119
previously worked on the Cloud Foundry

00:00:15,000 --> 00:00:20,119
container runtime and here Stefan oh

00:00:20,660 --> 00:00:28,380
sorry hi

00:00:23,400 --> 00:00:30,960
so here Stefan he rocks the IBM he also

00:00:28,380 --> 00:00:33,660
works in irony before that he worked on

00:00:30,960 --> 00:00:37,950
bitters and he really lost programming

00:00:33,660 --> 00:00:40,610
in Ruby and I suppose people here know

00:00:37,950 --> 00:00:44,670
something about karate so cabarrus users

00:00:40,610 --> 00:00:47,820
but let's do some quick refresher this

00:00:44,670 --> 00:00:50,340
is like I hope it's typical to best

00:00:47,820 --> 00:00:53,399
application and as you can see this

00:00:50,340 --> 00:00:56,010
green grass always sports and they

00:00:53,399 --> 00:00:58,739
connect to the some database service

00:00:56,010 --> 00:01:00,350
using pods and they have some secret to

00:00:58,739 --> 00:01:02,219
connect to it and there are some

00:01:00,350 --> 00:01:04,500
invisible parts such as security

00:01:02,219 --> 00:01:07,290
policies may be config Marv's might be

00:01:04,500 --> 00:01:10,610
service accounts things and darker and

00:01:07,290 --> 00:01:13,350
yeah I think that you've done it and

00:01:10,610 --> 00:01:16,200
doesn't look that hard that look

00:01:13,350 --> 00:01:18,869
complicated but if you introduce small

00:01:16,200 --> 00:01:22,850
applications is basically everything is

00:01:18,869 --> 00:01:24,630
the same except code is different and

00:01:22,850 --> 00:01:27,090
your progress

00:01:24,630 --> 00:01:29,070
chimera sportif use a multi assignment

00:01:27,090 --> 00:01:31,799
all llamó gameplay it's mostly the same

00:01:29,070 --> 00:01:34,470
with just tiny changes sensor might be

00:01:31,799 --> 00:01:38,430
in docker files and what people usually

00:01:34,470 --> 00:01:41,060
do they just do copy paste copy one

00:01:38,430 --> 00:01:44,310
llamo to another copy docker files and I

00:01:41,060 --> 00:01:46,470
think it's a problem and actually the

00:01:44,310 --> 00:01:50,700
question can we do better than this and

00:01:46,470 --> 00:01:53,159
just copy llamo files and the answer as

00:01:50,700 --> 00:01:55,439
I hope you guessed because on you on

00:01:53,159 --> 00:01:58,340
your cloud for assignment is call for me

00:01:55,439 --> 00:02:03,320
because Godfather can do it for you and

00:01:58,340 --> 00:02:07,140
that because cloud father incubate is

00:02:03,320 --> 00:02:12,720
very similar they go by both by stones a

00:02:07,140 --> 00:02:13,750
Google Park which was doing the same

00:02:12,720 --> 00:02:16,870
thing as cover

00:02:13,750 --> 00:02:20,140
Greta's does you just declare desired

00:02:16,870 --> 00:02:21,370
state of the road and it will do

00:02:20,140 --> 00:02:24,250
everything for you it will deploy

00:02:21,370 --> 00:02:28,060
applications start application will run

00:02:24,250 --> 00:02:32,740
the code and everything will rock and

00:02:28,060 --> 00:02:34,900
it's not only that the common things one

00:02:32,740 --> 00:02:37,209
more thing is llamo because everyone

00:02:34,900 --> 00:02:39,550
wants to be certified caramel developer

00:02:37,209 --> 00:02:43,350
and the trans applications and

00:02:39,550 --> 00:02:46,630
containers both in call for its

00:02:43,350 --> 00:02:50,080
container sent in devices like bicycle

00:02:46,630 --> 00:02:53,140
docker containers and their two main

00:02:50,080 --> 00:02:56,350
concepts lawn ryan' processes that has

00:02:53,140 --> 00:02:58,840
to be monitored and restarted the

00:02:56,350 --> 00:03:01,450
mutants and to be monitors they have

00:02:58,840 --> 00:03:04,180
some health checks and tasks that just

00:03:01,450 --> 00:03:08,290
execute once and when they stop they

00:03:04,180 --> 00:03:12,010
stop but that's if they so similar you

00:03:08,290 --> 00:03:14,410
will see it I just still use cabarrus

00:03:12,010 --> 00:03:19,110
but there's something that is unique to

00:03:14,410 --> 00:03:21,850
CF and Stefan will tell us about it

00:03:19,110 --> 00:03:23,650
right so if you come from the kubernetes

00:03:21,850 --> 00:03:26,170
world you may be used to be able to do

00:03:23,650 --> 00:03:28,989
everything right there is enormous

00:03:26,170 --> 00:03:30,700
flexibility you can do all sorts of

00:03:28,989 --> 00:03:32,620
things with kubernetes declare whatever

00:03:30,700 --> 00:03:34,239
you want to do in cloud foundry it's a

00:03:32,620 --> 00:03:36,310
little bit different cloud foundry has

00:03:34,239 --> 00:03:38,320
opinions and that opinion in cloud

00:03:36,310 --> 00:03:43,000
foundry is mostly about the application

00:03:38,320 --> 00:03:44,590
developer so this is a tweet that is I

00:03:43,000 --> 00:03:46,570
think that around four years old or so

00:03:44,590 --> 00:03:49,260
and the concept of CF Porsche is

00:03:46,570 --> 00:03:51,459
actually even older and the idea is

00:03:49,260 --> 00:03:53,079
everything in cloud foundry is centered

00:03:51,459 --> 00:03:55,620
around that concept of the developer

00:03:53,079 --> 00:04:01,360
pushing code from the local workstation

00:03:55,620 --> 00:04:03,040
from your your your hard disk then you

00:04:01,360 --> 00:04:05,110
push it to the cloud and the cloud will

00:04:03,040 --> 00:04:06,820
take care of what it needs to happen to

00:04:05,110 --> 00:04:09,100
that application so this is like the

00:04:06,820 --> 00:04:12,310
most important opinion in car andriy it

00:04:09,100 --> 00:04:14,200
doesn't give you all the all the points

00:04:12,310 --> 00:04:16,570
to configure something it gives you all

00:04:14,200 --> 00:04:19,209
only the points right things you should

00:04:16,570 --> 00:04:21,130
have and say about how things work so

00:04:19,209 --> 00:04:24,070
this is like the strongest point about

00:04:21,130 --> 00:04:26,590
our foundry so with these opinions comes

00:04:24,070 --> 00:04:27,379
a set of things a set of objects that

00:04:26,590 --> 00:04:29,150
are

00:04:27,379 --> 00:04:30,949
present in Cloud Foundry that are

00:04:29,150 --> 00:04:32,690
important to know so for instance

00:04:30,949 --> 00:04:36,069
there's organizations and there are

00:04:32,690 --> 00:04:39,139
spaces and there's roles so instead of

00:04:36,069 --> 00:04:41,090
centering everything around an operator

00:04:39,139 --> 00:04:42,860
it is everything centered around the

00:04:41,090 --> 00:04:44,569
application developer but the person

00:04:42,860 --> 00:04:46,220
that is pushing the application or

00:04:44,569 --> 00:04:48,830
making sure that your application is in

00:04:46,220 --> 00:04:51,800
the right state and additional things

00:04:48,830 --> 00:04:55,039
also foundry has opinions about routing

00:04:51,800 --> 00:04:57,080
so there's a very well-defined way of

00:04:55,039 --> 00:04:59,330
how traffic reaches your application and

00:04:57,080 --> 00:05:01,430
how the vara knows about your

00:04:59,330 --> 00:05:04,610
application and what should happen in

00:05:01,430 --> 00:05:06,349
what stage of your application and also

00:05:04,610 --> 00:05:08,690
services is another important concept

00:05:06,349 --> 00:05:11,360
it's the first class citizen in Condry

00:05:08,690 --> 00:05:13,190
services or something that exists that

00:05:11,360 --> 00:05:14,629
can be bound to and everything that

00:05:13,190 --> 00:05:19,639
needs to be managed to get your

00:05:14,629 --> 00:05:21,860
application to access the services so CF

00:05:19,639 --> 00:05:23,389
push aside one single thing it's not of

00:05:21,860 --> 00:05:26,120
course not the only command that you can

00:05:23,389 --> 00:05:29,509
run on Cloud Foundry but that's the main

00:05:26,120 --> 00:05:31,400
focus so your as an application

00:05:29,509 --> 00:05:33,500
developer you're mostly concerned about

00:05:31,400 --> 00:05:35,180
your application code itself that

00:05:33,500 --> 00:05:38,900
implements the business logic whatever

00:05:35,180 --> 00:05:42,169
you want to achieve and once you push it

00:05:38,900 --> 00:05:44,389
to the Cloud Foundry instance you

00:05:42,169 --> 00:05:45,919
basically let go and let the platform do

00:05:44,389 --> 00:05:47,719
its thing and make sure it's available

00:05:45,919 --> 00:05:49,909
so this is what it's all about it's

00:05:47,719 --> 00:05:51,469
about that user experience that simple

00:05:49,909 --> 00:05:55,729
sea have pushed to get your stuff over

00:05:51,469 --> 00:06:00,560
to cloud foundry another differentiator

00:05:55,729 --> 00:06:03,020
is that with in many cases CAD foundry

00:06:00,560 --> 00:06:04,909
it is about HTTP applications

00:06:03,020 --> 00:06:07,279
applications that are reachable by a

00:06:04,909 --> 00:06:09,770
DHCP protocol which isn't to say that

00:06:07,279 --> 00:06:13,310
it's not possible to do others there is

00:06:09,770 --> 00:06:15,110
TCP routing so you can do basically also

00:06:13,310 --> 00:06:17,690
the arbitrary applications in cloud

00:06:15,110 --> 00:06:20,360
foundry but the majority of workflows is

00:06:17,690 --> 00:06:22,279
really centered around the idea of there

00:06:20,360 --> 00:06:26,569
is an app web application that is

00:06:22,279 --> 00:06:30,169
running the next concept that is unique

00:06:26,569 --> 00:06:32,330
to foundry is the idea of build packs so

00:06:30,169 --> 00:06:34,819
bill packs are basically another

00:06:32,330 --> 00:06:36,830
expression of these opinions how should

00:06:34,819 --> 00:06:38,330
you go from your application code to

00:06:36,830 --> 00:06:40,200
something that something that is

00:06:38,330 --> 00:06:43,890
actually responding to the age

00:06:40,200 --> 00:06:46,020
P protocol so that could be some HTTP

00:06:43,890 --> 00:06:48,060
server coming with your buildpack that

00:06:46,020 --> 00:06:50,220
could be something that needs to compile

00:06:48,060 --> 00:06:53,010
any source code or just bundle it

00:06:50,220 --> 00:06:55,470
together in certain ways maybe create a

00:06:53,010 --> 00:06:59,900
wall file or char file or whatever it is

00:06:55,470 --> 00:07:02,490
so build packs take everything that

00:06:59,900 --> 00:07:04,620
needs to be done from your application

00:07:02,490 --> 00:07:06,270
to something that is actually running on

00:07:04,620 --> 00:07:10,260
listening on some port

00:07:06,270 --> 00:07:12,720
maybe 8080 or something else bill packs

00:07:10,260 --> 00:07:13,950
also make it easy to update versions of

00:07:12,720 --> 00:07:16,800
your applications or if you have

00:07:13,950 --> 00:07:19,410
dependencies on external things in the

00:07:16,800 --> 00:07:21,000
Ruby world for instance there is gems so

00:07:19,410 --> 00:07:22,470
the build pack will download all the

00:07:21,000 --> 00:07:24,870
dependencies of your application and

00:07:22,470 --> 00:07:30,050
make sure your application can run in

00:07:24,870 --> 00:07:33,660
the right way so Bill pecks are mostly

00:07:30,050 --> 00:07:35,520
language or framework specific so there

00:07:33,660 --> 00:07:37,410
is a number of bill packs that come with

00:07:35,520 --> 00:07:39,420
the Cloud Foundry platform where we

00:07:37,410 --> 00:07:42,660
express the opinions that we have around

00:07:39,420 --> 00:07:45,330
how a ruby app or how is a set of static

00:07:42,660 --> 00:07:47,340
HTML files should be deployed so if you

00:07:45,330 --> 00:07:48,990
have a couple of files that you just

00:07:47,340 --> 00:07:51,600
want to push somewhere and serve with a

00:07:48,990 --> 00:07:54,390
static web server there is the nginx

00:07:51,600 --> 00:07:56,880
bill peg or there's the static file bill

00:07:54,390 --> 00:07:59,340
peg for Ruby there's a Ruby bill pack

00:07:56,880 --> 00:08:01,500
that comes with Ruby implementation also

00:07:59,340 --> 00:08:03,450
with the tools to download the gems that

00:08:01,500 --> 00:08:06,090
are required so you can really start

00:08:03,450 --> 00:08:08,280
only with your applications files and

00:08:06,090 --> 00:08:12,840
everything else will be taken care of by

00:08:08,280 --> 00:08:14,610
the build pack so this is the some of

00:08:12,840 --> 00:08:16,530
the core appeal packs that come with the

00:08:14,610 --> 00:08:19,140
platform there's also community

00:08:16,530 --> 00:08:20,160
community build packs so people have

00:08:19,140 --> 00:08:22,710
contributed to the Cloud Foundry

00:08:20,160 --> 00:08:24,810
platform bill packs about other

00:08:22,710 --> 00:08:27,240
frameworks about other languages and

00:08:24,810 --> 00:08:29,070
there's even the way to bring your own

00:08:27,240 --> 00:08:32,130
build packs since it's a open source

00:08:29,070 --> 00:08:33,780
product product it's easy to bring your

00:08:32,130 --> 00:08:34,860
build pack and do whatever you want to

00:08:33,780 --> 00:08:37,919
do so

00:08:34,860 --> 00:08:38,220
does Bill tech actually create image for

00:08:37,919 --> 00:08:40,710
us

00:08:38,220 --> 00:08:43,020
docker image you would think that it

00:08:40,710 --> 00:08:45,330
actually what comes out of that is a

00:08:43,020 --> 00:08:47,880
container image but it's not there is

00:08:45,330 --> 00:08:50,700
one step in between that Cloud Foundry

00:08:47,880 --> 00:08:53,490
again has opinions about and this is the

00:08:50,700 --> 00:08:53,970
idea of a droplet the droplet is that

00:08:53,490 --> 00:08:56,370
hinder me

00:08:53,970 --> 00:08:58,829
buildpack sorry that intermediate built

00:08:56,370 --> 00:09:02,040
product that comes out of the build

00:08:58,829 --> 00:09:04,889
process so the application and the build

00:09:02,040 --> 00:09:07,680
packed together that output is what we

00:09:04,889 --> 00:09:10,920
call the droplet and only once you take

00:09:07,680 --> 00:09:13,110
that droplet and add it to a root

00:09:10,920 --> 00:09:15,360
filesystem you come up with something

00:09:13,110 --> 00:09:16,980
that is known as the application image

00:09:15,360 --> 00:09:19,019
that will then can then be used to

00:09:16,980 --> 00:09:21,810
create a container but that's a little

00:09:19,019 --> 00:09:23,220
bit complicated why you just CF push and

00:09:21,810 --> 00:09:25,259
create image why do you need this

00:09:23,220 --> 00:09:27,480
intermediate step yeah that's a good

00:09:25,259 --> 00:09:30,300
question and the answer to that is

00:09:27,480 --> 00:09:32,879
actually that we when we run

00:09:30,300 --> 00:09:34,319
applications on in the cloud it's not

00:09:32,879 --> 00:09:35,790
enough to care only about the

00:09:34,319 --> 00:09:37,860
application developer this is the main

00:09:35,790 --> 00:09:40,230
focus in cloud foundry but we also have

00:09:37,860 --> 00:09:41,910
people running the platform we have the

00:09:40,230 --> 00:09:44,209
operators of the cloud foundry platform

00:09:41,910 --> 00:09:46,920
and with this separation between

00:09:44,209 --> 00:09:48,709
droplets and the actual final image we

00:09:46,920 --> 00:09:51,660
get the chance to actually update the

00:09:48,709 --> 00:09:53,519
root filesystem without bothering the

00:09:51,660 --> 00:09:55,350
application developer so as a platform

00:09:53,519 --> 00:09:57,509
operator you can patch your root

00:09:55,350 --> 00:09:59,879
filesystem we search the applications

00:09:57,509 --> 00:10:01,649
and all the security fixes that you have

00:09:59,879 --> 00:10:03,480
added to the roof Assam will

00:10:01,649 --> 00:10:04,980
automatically apply to all of the

00:10:03,480 --> 00:10:07,769
applications that are running which is

00:10:04,980 --> 00:10:14,189
very important for small and also large

00:10:07,769 --> 00:10:17,459
of course platform developers okay let's

00:10:14,189 --> 00:10:20,879
now talk about some set we come here to

00:10:17,459 --> 00:10:24,000
hear how commands features map to call

00:10:20,879 --> 00:10:25,769
for the features and how it all works so

00:10:24,000 --> 00:10:29,279
let's just start from the application

00:10:25,769 --> 00:10:33,269
access so applications in kubernetes

00:10:29,279 --> 00:10:35,819
transport and the ephemeral and multiple

00:10:33,269 --> 00:10:37,680
ports and to load bar them you deploy

00:10:35,819 --> 00:10:40,529
service your create so we think

00:10:37,680 --> 00:10:42,449
communities and the service and can be

00:10:40,529 --> 00:10:45,240
exposed to the internet using node port

00:10:42,449 --> 00:10:48,209
a lot bouncer or ingress and multiple

00:10:45,240 --> 00:10:50,399
options incubators what about here yeah

00:10:48,209 --> 00:10:52,709
and see if there is one single idea of

00:10:50,399 --> 00:10:55,079
how application traffic reaches your

00:10:52,709 --> 00:10:57,540
application from the outside and this is

00:10:55,079 --> 00:10:59,910
the go water component so the goldwater

00:10:57,540 --> 00:11:01,649
is something that sits there and waits

00:10:59,910 --> 00:11:03,750
for registration messages when your

00:11:01,649 --> 00:11:06,090
application comes up becomes healthy a

00:11:03,750 --> 00:11:08,430
message is sent to the go water and it

00:11:06,090 --> 00:11:10,200
from then on we'll route traffic to that

00:11:08,430 --> 00:11:13,140
application there's this one idea and

00:11:10,200 --> 00:11:17,430
that is central to car foundry and there

00:11:13,140 --> 00:11:20,100
is no other way around doing this so

00:11:17,430 --> 00:11:23,630
when you deploy plication you actually

00:11:20,100 --> 00:11:25,680
want to access database surprise and

00:11:23,630 --> 00:11:28,260
incubators you either bring your own

00:11:25,680 --> 00:11:31,830
services and then do some secrets

00:11:28,260 --> 00:11:34,320
manually burrito you can try to deploy

00:11:31,830 --> 00:11:38,640
source catalog and I think it comes from

00:11:34,320 --> 00:11:40,260
cf right so the idea of having services

00:11:38,640 --> 00:11:42,000
as a first-class citizen as an object

00:11:40,260 --> 00:11:44,400
that you can manage bind to and all the

00:11:42,000 --> 00:11:47,490
things actually was extracted from Cloud

00:11:44,400 --> 00:11:49,890
Foundry and there is where it has its

00:11:47,490 --> 00:11:51,420
natural place so an application just

00:11:49,890 --> 00:11:53,490
binds to a service and you can

00:11:51,420 --> 00:11:55,860
instantiate a service and therefore

00:11:53,490 --> 00:11:57,900
connector you can access services from

00:11:55,860 --> 00:11:59,400
your application you don't have to deal

00:11:57,900 --> 00:12:02,130
with the details of creating that

00:11:59,400 --> 00:12:04,680
service unless you want to unless you

00:12:02,130 --> 00:12:06,810
want to become a service provider yeah

00:12:04,680 --> 00:12:09,600
and by the way if you want to find out

00:12:06,810 --> 00:12:12,420
how to bring your own services from

00:12:09,600 --> 00:12:14,040
commands to Cloud Foundry so this one

00:12:12,420 --> 00:12:16,020
interesting talk unfortunately it

00:12:14,040 --> 00:12:20,220
happening right now but you can check

00:12:16,020 --> 00:12:21,300
the recording later and since we started

00:12:20,220 --> 00:12:23,880
about secrets

00:12:21,300 --> 00:12:25,470
so in kubernetes if you want to usually

00:12:23,880 --> 00:12:28,350
when you connect with database you want

00:12:25,470 --> 00:12:30,990
to somehow get the secrets and a special

00:12:28,350 --> 00:12:35,100
secrets object and if you use some

00:12:30,990 --> 00:12:36,960
custom configuration you use config map

00:12:35,100 --> 00:12:40,020
which will create file on the disk and

00:12:36,960 --> 00:12:41,640
yeah there also many more options you

00:12:40,020 --> 00:12:44,790
can set environment variables in the

00:12:41,640 --> 00:12:46,680
container multiple options as usual

00:12:44,790 --> 00:12:48,930
incubators what about Colin foundry

00:12:46,680 --> 00:12:51,750
you could argue that there is not really

00:12:48,930 --> 00:12:53,520
in need to manage secrets in Cloud

00:12:51,750 --> 00:12:55,320
Foundry because in the end if you ask

00:12:53,520 --> 00:12:57,420
why do you need secrets while you need

00:12:55,320 --> 00:12:59,700
secrets in order to able to be able to

00:12:57,420 --> 00:13:01,830
access a service and when you have that

00:12:59,700 --> 00:13:04,230
service binding as a first-class citizen

00:13:01,830 --> 00:13:06,260
what happens in contrary is once you

00:13:04,230 --> 00:13:08,490
bind to that service all the necessary

00:13:06,260 --> 00:13:10,260
configuration as well as secrets get

00:13:08,490 --> 00:13:12,090
injected into your applications

00:13:10,260 --> 00:13:13,770
environment and you just have to consume

00:13:12,090 --> 00:13:15,870
an environment variable where the

00:13:13,770 --> 00:13:16,120
application can find all of the things

00:13:15,870 --> 00:13:18,730
that

00:13:16,120 --> 00:13:20,020
needed so there is not really a need to

00:13:18,730 --> 00:13:22,390
do that from the application perspective

00:13:20,020 --> 00:13:24,760
however if you really want to do that

00:13:22,390 --> 00:13:26,830
for whatever reason maybe for some

00:13:24,760 --> 00:13:28,089
customization or for because your

00:13:26,830 --> 00:13:29,950
application is written in a certain

00:13:28,089 --> 00:13:31,810
style there is other environment

00:13:29,950 --> 00:13:33,700
variables that at least are called user

00:13:31,810 --> 00:13:35,760
provided environment variables where you

00:13:33,700 --> 00:13:40,720
can achieve a similar configuration

00:13:35,760 --> 00:13:42,700
using a manual approach and then next

00:13:40,720 --> 00:13:46,120
part when you deploy applications you

00:13:42,700 --> 00:13:48,640
want to be to be highly available so you

00:13:46,120 --> 00:13:50,440
want to place container somehow so they

00:13:48,640 --> 00:13:53,080
won't influence each other and in

00:13:50,440 --> 00:13:55,750
kubernetes I wrote multiple lots of

00:13:53,080 --> 00:13:57,580
files because there's so many reasons I

00:13:55,750 --> 00:14:00,070
have very long names they don't fit the

00:13:57,580 --> 00:14:02,860
slide but its affiliate and the affinity

00:14:00,070 --> 00:14:04,930
rules and you can based on labels so it

00:14:02,860 --> 00:14:08,320
can be on different disease on say my Z

00:14:04,930 --> 00:14:10,089
or in different VMs or maybe like

00:14:08,320 --> 00:14:13,560
samples needs to run with some other

00:14:10,089 --> 00:14:17,290
pods and then you can specify different

00:14:13,560 --> 00:14:19,690
priorities on the pose so maybe some

00:14:17,290 --> 00:14:23,980
nodes will allow to run only some

00:14:19,690 --> 00:14:25,480
specific posts and many options many

00:14:23,980 --> 00:14:29,140
options what about Cloud Foundry

00:14:25,480 --> 00:14:31,089
as always it's much simpler hungry there

00:14:29,140 --> 00:14:33,730
is one default scheduler that's called

00:14:31,089 --> 00:14:36,610
Diego and as an application developer

00:14:33,730 --> 00:14:38,709
you don't have almost no say about

00:14:36,610 --> 00:14:41,050
container placement Diego does the right

00:14:38,709 --> 00:14:43,150
thing because Cloud Foundry is

00:14:41,050 --> 00:14:44,950
opinionated and will make sure that your

00:14:43,150 --> 00:14:48,730
application is running on the right

00:14:44,950 --> 00:14:50,589
nodes and we'll make sure that it's it's

00:14:48,730 --> 00:14:52,779
up and all the things having said that

00:14:50,589 --> 00:14:54,760
there is one way to actually influence

00:14:52,779 --> 00:14:57,130
placement and that is the concept of

00:14:54,760 --> 00:15:00,339
isolation segments so that you can

00:14:57,130 --> 00:15:02,620
implicitly specify and which parts of

00:15:00,339 --> 00:15:04,870
your deployment of your infrastructure

00:15:02,620 --> 00:15:06,430
the application is actually running and

00:15:04,870 --> 00:15:08,800
how its distributed but this is this is

00:15:06,430 --> 00:15:10,120
way more coarse-grained than all the

00:15:08,800 --> 00:15:11,760
things that you have available in

00:15:10,120 --> 00:15:15,520
kubernetes

00:15:11,760 --> 00:15:19,089
and as usual for storage to buy this

00:15:15,520 --> 00:15:20,350
many options so the parents again you

00:15:19,089 --> 00:15:23,560
can use cloud

00:15:20,350 --> 00:15:28,270
specific volumes like Google storage or

00:15:23,560 --> 00:15:29,250
IBM storage or you can use an affair SMB

00:15:28,270 --> 00:15:31,290
can

00:15:29,250 --> 00:15:34,710
it's connected easily or some other

00:15:31,290 --> 00:15:36,840
external services like Gloucester

00:15:34,710 --> 00:15:39,690
Affairs or you can even use local

00:15:36,840 --> 00:15:44,430
district store information so many ways

00:15:39,690 --> 00:15:47,550
to store data in Cabarrus Cloud Foundry

00:15:44,430 --> 00:15:50,360
it's way simpler again because we

00:15:47,550 --> 00:15:53,520
recommend to follow the 12 factor

00:15:50,360 --> 00:15:56,040
pattern or manifesto and that one says

00:15:53,520 --> 00:15:57,930
any data that needs to persist must be

00:15:56,040 --> 00:16:00,960
stored in a stateful packing service

00:15:57,930 --> 00:16:02,790
typically a database so what you usually

00:16:00,960 --> 00:16:04,590
do in Cloud Foundry is you have an

00:16:02,790 --> 00:16:06,420
object store or you have a database

00:16:04,590 --> 00:16:09,360
where the application can actually

00:16:06,420 --> 00:16:12,480
purchase process stuff again there is an

00:16:09,360 --> 00:16:13,830
option in California and that is created

00:16:12,480 --> 00:16:17,550
by the percy project where you can

00:16:13,830 --> 00:16:19,410
actually do mount NFS or SMB volumes so

00:16:17,550 --> 00:16:22,710
you can actually have a disk that is not

00:16:19,410 --> 00:16:24,660
ephemeral but kind of the 80% of

00:16:22,710 --> 00:16:27,450
applications that we see it's actually

00:16:24,660 --> 00:16:29,040
not using persistence in in local disks

00:16:27,450 --> 00:16:33,390
but it actually goes out and stores it

00:16:29,040 --> 00:16:35,970
for instance in an object store so as we

00:16:33,390 --> 00:16:39,030
said a long run process is central in

00:16:35,970 --> 00:16:40,440
both California varieties and to make it

00:16:39,030 --> 00:16:44,430
a long run we need to monitor it and

00:16:40,440 --> 00:16:47,610
Mike charlotte's can if it's broken it

00:16:44,430 --> 00:16:50,970
should be restarted so how did it in

00:16:47,610 --> 00:16:53,280
kubernetes that do different things

00:16:50,970 --> 00:16:54,690
Linus prop and readiness probe if port

00:16:53,280 --> 00:16:57,030
is not ready to just doesn't solve

00:16:54,690 --> 00:17:02,640
traffic if it's not alive weaves get

00:16:57,030 --> 00:17:07,110
recreated and they both support the same

00:17:02,640 --> 00:17:11,220
set of checks it's say I they just HTTP

00:17:07,110 --> 00:17:13,680
GET now just connected to DC people

00:17:11,220 --> 00:17:15,510
socket but if you need something fancy

00:17:13,680 --> 00:17:17,370
you can basically take you to any

00:17:15,510 --> 00:17:21,209
comment on the container and verify that

00:17:17,370 --> 00:17:23,400
your application is up and running cross

00:17:21,209 --> 00:17:25,140
country again it's very straightforward

00:17:23,400 --> 00:17:28,590
there are three types of health checks

00:17:25,140 --> 00:17:30,810
there is HTTP so just checking whether

00:17:28,590 --> 00:17:33,240
something is responding by HTTP protocol

00:17:30,810 --> 00:17:36,440
on the pre-configured port and there is

00:17:33,240 --> 00:17:38,960
support check that is especially

00:17:36,440 --> 00:17:41,130
interesting for TCP

00:17:38,960 --> 00:17:42,929
applications that we discussed before

00:17:41,130 --> 00:17:44,190
and then there is a third

00:17:42,929 --> 00:17:47,340
kind of check that just makes sure that

00:17:44,190 --> 00:17:48,869
in a process actually exists and the

00:17:47,340 --> 00:17:53,879
application is considered healthy when

00:17:48,869 --> 00:17:56,039
that process is up and running yeah and

00:17:53,879 --> 00:17:59,039
also you want to monitor properly you

00:17:56,039 --> 00:18:01,230
want to see the metrics and income

00:17:59,039 --> 00:18:05,039
earners you have to deploy something you

00:18:01,230 --> 00:18:06,659
have diplomatic service but also if you

00:18:05,039 --> 00:18:08,759
want to use dashboard you need to deploy

00:18:06,659 --> 00:18:10,350
officer it hipster unfortunately and

00:18:08,759 --> 00:18:12,799
then you need to something to store

00:18:10,350 --> 00:18:14,879
metrics or people use Prometheus and

00:18:12,799 --> 00:18:17,999
multiple things that you have to add to

00:18:14,879 --> 00:18:21,389
it it's a cause had to make it show you

00:18:17,999 --> 00:18:23,909
matrix and stall matrix income foundry

00:18:21,389 --> 00:18:25,559
it's twofold there is of course platform

00:18:23,909 --> 00:18:27,929
metrics so something that is interesting

00:18:25,559 --> 00:18:29,999
for the platform operator and that is

00:18:27,929 --> 00:18:31,619
built into the platform but from the

00:18:29,999 --> 00:18:33,240
application perspective there isn't

00:18:31,619 --> 00:18:35,490
really a first level of concept of

00:18:33,240 --> 00:18:38,820
metrics so of course you can build this

00:18:35,490 --> 00:18:40,860
you know yourself and make it part of

00:18:38,820 --> 00:18:42,539
your application infrastructure and then

00:18:40,860 --> 00:18:44,610
of course you can use services to

00:18:42,539 --> 00:18:46,529
actually make sure that your events or

00:18:44,610 --> 00:18:48,480
metrics actually end up in the right

00:18:46,529 --> 00:18:50,159
infrastructure but from an implication

00:18:48,480 --> 00:18:52,110
perspective there isn't really a

00:18:50,159 --> 00:18:56,340
high-level concept that is sort of

00:18:52,110 --> 00:18:59,070
available in cloud foundry and

00:18:56,340 --> 00:19:01,340
biometrics dialogues so in kubernetes

00:18:59,070 --> 00:19:05,759
logs are just taught on the disk in

00:19:01,340 --> 00:19:07,799
plain text or in JSON and on specific

00:19:05,759 --> 00:19:12,690
location and then you can access these

00:19:07,799 --> 00:19:14,700
logs from like directly cabarrus knows

00:19:12,690 --> 00:19:16,980
this non location you can just run keep

00:19:14,700 --> 00:19:19,950
catalogs but if you want to forward them

00:19:16,980 --> 00:19:22,259
people just deploy a daemon set which

00:19:19,950 --> 00:19:25,710
will forward all the logs to some

00:19:22,259 --> 00:19:28,980
different storage symmetric storage some

00:19:25,710 --> 00:19:32,610
some lock storage and that's how you do

00:19:28,980 --> 00:19:34,559
it the foundry it's again about the user

00:19:32,610 --> 00:19:36,480
experience mostly as an application

00:19:34,559 --> 00:19:39,480
developer so if you have an application

00:19:36,480 --> 00:19:41,190
with several instances all of the locks

00:19:39,480 --> 00:19:43,139
of all of the instances are merged

00:19:41,190 --> 00:19:45,389
together into one stream of logs and

00:19:43,139 --> 00:19:47,999
they get very easily

00:19:45,389 --> 00:19:50,190
piped into your terminal so you can just

00:19:47,999 --> 00:19:52,200
call CF locks and see all the logs for

00:19:50,190 --> 00:19:54,119
me all your applications instances and

00:19:52,200 --> 00:19:55,350
you just switch the application name to

00:19:54,119 --> 00:19:57,990
see logs from a different

00:19:55,350 --> 00:19:59,730
so it's all like done for you by a

00:19:57,990 --> 00:20:02,520
component that that's called local gator

00:19:59,730 --> 00:20:06,620
same idea again locks are a central

00:20:02,520 --> 00:20:09,419
concept and therefore are catered for

00:20:06,620 --> 00:20:12,270
yeah and then one nice concept that

00:20:09,419 --> 00:20:14,280
gobitis has its automatic rollouts and

00:20:12,270 --> 00:20:15,870
drawbacks so there is deployment object

00:20:14,280 --> 00:20:18,750
which allows you to deploy a new version

00:20:15,870 --> 00:20:23,480
and when deploy a new version of which

00:20:18,750 --> 00:20:26,580
deployment it will scale internal

00:20:23,480 --> 00:20:29,220
replicas set new replica set to the

00:20:26,580 --> 00:20:31,500
desired size and downscale existing one

00:20:29,220 --> 00:20:33,480
and you can stop it at any moment and

00:20:31,500 --> 00:20:34,909
general back the previous version which

00:20:33,480 --> 00:20:38,880
is very nice

00:20:34,909 --> 00:20:41,419
what about ZF yeah that's something that

00:20:38,880 --> 00:20:44,130
really doesn't exist in Cloud Foundry

00:20:41,419 --> 00:20:46,950
there is extensions coming as you might

00:20:44,130 --> 00:20:49,230
hurt before there's new features but

00:20:46,950 --> 00:20:53,010
right now there is nothing like

00:20:49,230 --> 00:20:54,750
automated rolls and rollbacks it is

00:20:53,010 --> 00:20:56,669
trivial of course with external

00:20:54,750 --> 00:20:58,890
scripting there is the established

00:20:56,669 --> 00:21:02,480
pattern of green-blue deployments that

00:20:58,890 --> 00:21:06,059
you can use and since the command line

00:21:02,480 --> 00:21:07,919
of Cal foundry is so simple it's not

00:21:06,059 --> 00:21:11,280
very hard to build yourself but it's not

00:21:07,919 --> 00:21:14,190
part of the platform yet yeah and then

00:21:11,280 --> 00:21:17,429
the other concept is batch execution so

00:21:14,190 --> 00:21:20,490
if you want to execute some some single

00:21:17,429 --> 00:21:22,679
run script again so many choices in

00:21:20,490 --> 00:21:24,929
kubernetes so you can reuse jobs which

00:21:22,679 --> 00:21:27,000
fill just around container is stripped

00:21:24,929 --> 00:21:29,429
or you can use pre start script which

00:21:27,000 --> 00:21:31,230
will start something before start your

00:21:29,429 --> 00:21:33,510
mind application or you can use in each

00:21:31,230 --> 00:21:35,730
container which will start before your

00:21:33,510 --> 00:21:38,220
pod starts so so many choices

00:21:35,730 --> 00:21:40,950
what about Cloud Foundry no choice at

00:21:38,220 --> 00:21:45,150
all is just the concept of tasks so this

00:21:40,950 --> 00:21:47,159
is again a concept that is since I

00:21:45,150 --> 00:21:49,470
presided with the application and it

00:21:47,159 --> 00:21:50,330
just runs to completion and does its

00:21:49,470 --> 00:21:53,520
thing

00:21:50,330 --> 00:21:57,179
yeah and now we'll talk a little bit how

00:21:53,520 --> 00:21:59,280
lots of map so in kubernetes it's very

00:21:57,179 --> 00:22:01,049
operator specific you just have control

00:21:59,280 --> 00:22:03,570
plane and then you can do whatever you

00:22:01,049 --> 00:22:07,580
want to do like you can operate it you

00:22:03,570 --> 00:22:09,720
can tinker you can choose so many things

00:22:07,580 --> 00:22:12,900
you guess the answer in Cloud Foundry

00:22:09,720 --> 00:22:15,000
it's again a very clear separation there

00:22:12,900 --> 00:22:16,470
is two roles basically there is the

00:22:15,000 --> 00:22:18,090
application develop deployer or

00:22:16,470 --> 00:22:20,340
application developer that is also

00:22:18,090 --> 00:22:22,410
deploying where CF push and there is the

00:22:20,340 --> 00:22:25,350
platform operator both use different

00:22:22,410 --> 00:22:27,330
tools both you use different metrics and

00:22:25,350 --> 00:22:31,110
so on so if there is a very clear

00:22:27,330 --> 00:22:34,830
distinction between them yeah let's see

00:22:31,110 --> 00:22:36,000
the typical developer workflow so I want

00:22:34,830 --> 00:22:39,570
to deploy in your application

00:22:36,000 --> 00:22:42,600
communities that happens so first create

00:22:39,570 --> 00:22:45,210
docker image usually just google it find

00:22:42,600 --> 00:22:49,620
some existing doctrine might replace URL

00:22:45,210 --> 00:22:52,350
for github repo from existing from the

00:22:49,620 --> 00:22:53,910
source don't carry much to my own then I

00:22:52,350 --> 00:22:56,820
pour just docker image to a registry

00:22:53,910 --> 00:22:58,590
might be created something then I get

00:22:56,820 --> 00:23:01,170
credentials for database because it's

00:22:58,590 --> 00:23:04,200
hard important kubernetes put it in some

00:23:01,170 --> 00:23:07,650
specified secret and then I want to

00:23:04,200 --> 00:23:10,170
deploy I almost tried to deploy and I

00:23:07,650 --> 00:23:12,780
created by the spec file with its my

00:23:10,170 --> 00:23:14,790
multiple llamo sections it's always all

00:23:12,780 --> 00:23:18,240
the things as I mentioned so is

00:23:14,790 --> 00:23:20,490
deployment policies and again I don't

00:23:18,240 --> 00:23:22,830
write it because I it's impossible to

00:23:20,490 --> 00:23:27,480
write I just copy some existing and

00:23:22,830 --> 00:23:30,210
replace names we said it's very easy

00:23:27,480 --> 00:23:33,330
everyone loves replacing it and then

00:23:30,210 --> 00:23:36,660
when I do it I do just apply this file

00:23:33,330 --> 00:23:39,720
with Kip cart I'll apply and then I just

00:23:36,660 --> 00:23:42,690
run this command and wait for it to

00:23:39,720 --> 00:23:44,790
finish let's see come on finally work

00:23:42,690 --> 00:23:48,210
with all I think it's white hair in more

00:23:44,790 --> 00:23:50,130
steps I hope yeah that's all you guessed

00:23:48,210 --> 00:23:53,670
it right that's all you need to do when

00:23:50,130 --> 00:23:55,950
you deploy a new application it's

00:23:53,670 --> 00:23:58,470
against EF push and if you're using

00:23:55,950 --> 00:23:59,550
services you only once need to do the

00:23:58,470 --> 00:24:01,170
define service

00:23:59,550 --> 00:24:03,510
so the application knows about the

00:24:01,170 --> 00:24:08,970
service instance and keeps the

00:24:03,510 --> 00:24:11,520
configuration for future pushes and now

00:24:08,970 --> 00:24:13,320
update an application because for some

00:24:11,520 --> 00:24:17,010
reason new you need to write new code

00:24:13,320 --> 00:24:20,070
and I mean if you wrote in production

00:24:17,010 --> 00:24:21,390
you for sure use some pipelines that

00:24:20,070 --> 00:24:24,760
will deploy it for you

00:24:21,390 --> 00:24:26,830
but if you try to run it and like

00:24:24,760 --> 00:24:29,470
develop and fall and want to test it

00:24:26,830 --> 00:24:33,810
manually so you what you do again I'm

00:24:29,470 --> 00:24:36,550
day doctor image might be just updates a

00:24:33,810 --> 00:24:39,700
manually build it and then just change

00:24:36,550 --> 00:24:41,590
they to the new code then pushes doctor

00:24:39,700 --> 00:24:44,890
image to registry because it has to be

00:24:41,590 --> 00:24:47,170
somewhere then you change they spiked up

00:24:44,890 --> 00:24:48,820
I respect to use this new image then

00:24:47,170 --> 00:24:52,890
apply the spec and then write again

00:24:48,820 --> 00:24:58,090
until it's deployed yeah so simple

00:24:52,890 --> 00:25:02,590
indeed it's simple sorry are we missing

00:24:58,090 --> 00:25:05,260
a slight no I just click and click okay

00:25:02,590 --> 00:25:07,720
that was a race condition yeah I mean

00:25:05,260 --> 00:25:09,340
obviously right CF push nothing else

00:25:07,720 --> 00:25:10,870
needs to be done in Cloud Foundry to

00:25:09,340 --> 00:25:14,380
update your application you just push

00:25:10,870 --> 00:25:19,090
your code again yeah so I hope now you

00:25:14,380 --> 00:25:22,120
really want to start use Cloud Foundry

00:25:19,090 --> 00:25:24,100
and you can use public provider such as

00:25:22,120 --> 00:25:26,380
speed up so IBM cloud or maybe something

00:25:24,100 --> 00:25:28,510
else and if you have goodbye this

00:25:26,380 --> 00:25:32,050
cluster you can even deploy it yourself

00:25:28,510 --> 00:25:36,190
it will take 30 seconds yeah you'll find

00:25:32,050 --> 00:25:39,040
out yeah and what you got is you just do

00:25:36,190 --> 00:25:41,460
CF push and then I really does magic and

00:25:39,040 --> 00:25:44,590
as a result of how application in

00:25:41,460 --> 00:25:48,130
kubernetes which almost looked the same

00:25:44,590 --> 00:25:50,920
as I showed on first light almost

00:25:48,130 --> 00:25:53,020
because we heard finish the project yet

00:25:50,920 --> 00:25:56,050
so there are some missing parts but yeah

00:25:53,020 --> 00:25:57,540
very verticals and let's see how it

00:25:56,050 --> 00:26:00,100
looks

00:25:57,540 --> 00:26:03,430
fortunately we don't have so much time

00:26:00,100 --> 00:26:08,640
but you can see there some fancy names

00:26:03,430 --> 00:26:11,020
and taking pictures

00:26:08,640 --> 00:26:12,970
unfortunately it's like three minutes

00:26:11,020 --> 00:26:15,310
left for the talk we can describe it

00:26:12,970 --> 00:26:19,000
afterwards or you can just come to irony

00:26:15,310 --> 00:26:22,180
sessions so check hiring sessions

00:26:19,000 --> 00:26:26,950
tomorrow and I'll just find us and talk

00:26:22,180 --> 00:26:27,490
to us and we'll explain it for you thank

00:26:26,950 --> 00:26:32,080
you for our time

00:26:27,490 --> 00:26:32,380
here's your l4 talk you can see it thank

00:26:32,080 --> 00:26:45,660
you

00:26:32,380 --> 00:26:48,719
questions thank you feel free to find us

00:26:45,660 --> 00:26:48,719
[Music]

00:26:58,590 --> 00:27:01,590
yes

00:27:02,390 --> 00:27:05,699
[Applause]

00:27:10,800 --> 00:27:16,720
so if you question was why would you use

00:27:14,710 --> 00:27:18,280
code foundry or communities why would

00:27:16,720 --> 00:27:20,980
you choose co-founder why over to choose

00:27:18,280 --> 00:27:26,200
gratis so if you just deploy application

00:27:20,980 --> 00:27:29,320
I would say Cloud Foundry if you want to

00:27:26,200 --> 00:27:31,690
experiment a lot if you like choosing

00:27:29,320 --> 00:27:35,260
things use kubernetes if you want to

00:27:31,690 --> 00:27:38,440
deploy database and kind of don't like

00:27:35,260 --> 00:27:40,720
Bosch you can use kubernetes if you have

00:27:38,440 --> 00:27:43,540
sounds that really need persistent

00:27:40,720 --> 00:27:46,420
storage you can do the girl foundry but

00:27:43,540 --> 00:27:48,970
maybe reverse it will be easier if you

00:27:46,420 --> 00:27:53,800
like llamó you definitely chose

00:27:48,970 --> 00:27:54,940
kubernetes mmm what else but you didn't

00:27:53,800 --> 00:27:58,750
have to choose you can deploy

00:27:54,940 --> 00:28:05,980
cooperative karate since that's like my

00:27:58,750 --> 00:28:08,830
device of towards hope is bicycles yeah

00:28:05,980 --> 00:28:13,200
what is not as Vicki ominous call for

00:28:08,830 --> 00:28:13,200
the manifest as Cabarrus manifest

00:28:14,640 --> 00:28:22,380
any more question no all right thank you

00:28:20,080 --> 00:28:22,380
very much

00:28:22,520 --> 00:28:26,859
[Music]

00:28:22,770 --> 00:28:26,859

YouTube URL: https://www.youtube.com/watch?v=iwpsruxseus


