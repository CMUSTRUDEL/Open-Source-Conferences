Title: Deep Dive: Chaos Engineering for Cloud Foundry Platform - Karun Chennuri & Ramesh Krishnaram, T-Mobi
Publication date: 2019-04-11
Playlist: Cloud Foundry Summit NA 2019 - Philadelphia
Description: 
	Deep Dive: Chaos Engineering for Cloud Foundry Platform - Karun Chennuri & Ramesh Krishnaram, T-Mobile USA Inc

Modern Internet-scale microservice architectures exhibit complex communication behavior and failure scenarios with chaotic behavior (a.k.a the Butterfly Effect) that may lead to large scale disruptive events. This complexity comes from the Cloud Foundry components, services running thereon, and the underlying infrastructure necessary to provide highly available compute, network, security, storage, persistence services. For a distributed microservice architecture to function ideally, these elements must all work in tandem and tolerate failure. To systematically verify that a system can tolerate failure, a disciplined approach is necessary. One such approach is “Chaos Engineering.”

Cloud Foundry is key in T-Mobile’s infrastructure, undoubtedly one of the largest CF platforms in the world, running business critical operations with over 30,000+ containers. Building resilency, self-healing and High Availability in to systems and apps – is one of the core factors that decides the success of our group. This proposal demonstrates the approach and the custom tools T-Mobile has been working on to purposefully breaking systems, identifying weaknesses, taking corrective actions and preparing for Game Days. 

Here at T-Mobile we started addressing Chaos Engineering at 2 different levels - “Platform” & “App” level Chaos Engineering. In this talk, we would like to discuss the architecture details, drivers that we had opensourced to the community, Demo walk-through on features and future steps. As a part of this talk, Karun would like to demo the following features: 

Simulate App level attacks
* Bad gateway errors at app level
* Latency between service and database
* Kill an app/service app is dependent on

Simulate Platform attacks:
* Terminate VM instances
* Host level attacks – CPU, Memory hogs
* Advanced Network Traffic attacks 
* Advanced Packet Level attacks

Technology: 
Python, Go, Spring boot, Java, PCF, Linux

All this put together helps any large technology company in a systematic approach to verifying reliability of the Cloud Foundry platform.

About Karun Chennuri
Karun Chennuri, is the Sr Engineer at T-Mobile, who currently leads DevSecOps efforts for Cloud Foundry and Kubernetes teams within T-Mobile. He is a Software Developer with Security Expertise and has about 14 years of experience handling various assignments dealing in Security Solution integration, Product security development, Cloud Security, SDN and security assignments in general.⠀

About Ramesh Krishnaram
Ramesh Krishnaram is the Sr.Manager for Platform Engineering at T-Mobile. His team at T-Mobile is responsible for providing simple, secure, scalable services with which developers can rapidly build, test, deploy software to the cloud. Over the past few years, Ramesh has spent time building, managing teams that are responsible for a suite of services in the PaaS portfolio. As part of his professional experience, Ramesh also has experience serving an evangelist for Chaos engineering delivering on tech talks and also working with software development teams educating them on the principles of failure testing (how/why/what).

https://www.cloudfoundry.org/
Captions: 
	00:00:00,060 --> 00:00:06,089
didn't folks how's everybody doing good

00:00:03,959 --> 00:00:08,370
well first off I want to thank you for

00:00:06,089 --> 00:00:09,750
joining us for a session this late of

00:00:08,370 --> 00:00:12,210
the day I know everybody is ready for

00:00:09,750 --> 00:00:13,620
their evening beers right after this but

00:00:12,210 --> 00:00:15,509
we'll promise you there's good content

00:00:13,620 --> 00:00:17,880
here and there's nothing boring that you

00:00:15,509 --> 00:00:19,590
would get out of the session stuff true

00:00:17,880 --> 00:00:21,779
to our name we'll start off with the

00:00:19,590 --> 00:00:23,760
tour story around chaos so I have I'm

00:00:21,779 --> 00:00:27,240
here with some crew members from

00:00:23,760 --> 00:00:29,429
t-mobile and before I get started with

00:00:27,240 --> 00:00:31,199
my story and actually content how many

00:00:29,429 --> 00:00:35,190
of you have actually not been on an

00:00:31,199 --> 00:00:38,430
airplane okay that's good I was

00:00:35,190 --> 00:00:43,320
expecting that who's being with Alaska

00:00:38,430 --> 00:00:48,300
Airlines okay couple who knows about

00:00:43,320 --> 00:00:49,379
chaos engineering okay that's great so

00:00:48,300 --> 00:00:50,640
you may be wondering what the hell is

00:00:49,379 --> 00:00:53,489
the connection between all this right

00:00:50,640 --> 00:00:55,469
but there's a story to it so we are this

00:00:53,489 --> 00:00:57,480
crew that I'm talking about started with

00:00:55,469 --> 00:01:00,300
Alaska Airlines on Monday from Seattle

00:00:57,480 --> 00:01:00,870
so we're based up in Seattle and we

00:01:00,300 --> 00:01:03,300
checked in

00:01:00,870 --> 00:01:04,979
I had my baggage checked in hand lock

00:01:03,300 --> 00:01:06,750
hand luggage which I should have just

00:01:04,979 --> 00:01:08,939
carried on with me but figured I'll just

00:01:06,750 --> 00:01:10,590
check it in showed up at the gate and

00:01:08,939 --> 00:01:12,450
they were looking for some volunteers

00:01:10,590 --> 00:01:14,670
Alaska Airlines by the way is huge in

00:01:12,450 --> 00:01:17,070
Seattle if you didn't know that right

00:01:14,670 --> 00:01:18,299
and I I was in the East Coast in Fort

00:01:17,070 --> 00:01:19,799
Lauderdale I never heard about Alaska

00:01:18,299 --> 00:01:21,750
Airlines up until I went to Seattle and

00:01:19,799 --> 00:01:25,770
little by realize that they're huge

00:01:21,750 --> 00:01:27,720
there so we checked in at the gate they

00:01:25,770 --> 00:01:28,439
were looking for volunteers who could

00:01:27,720 --> 00:01:30,720
take a later flight

00:01:28,439 --> 00:01:33,000
and in exchange this was April 1st in

00:01:30,720 --> 00:01:36,299
exchange the deal was you'd get someone

00:01:33,000 --> 00:01:38,340
and $50 per person more like this crew

00:01:36,299 --> 00:01:40,079
right yeah but there's nothing we're

00:01:38,340 --> 00:01:41,970
gonna do on day one we can offer the

00:01:40,079 --> 00:01:43,829
stopover let's just it's it's too good

00:01:41,970 --> 00:01:45,030
of a deal hourly rate just was

00:01:43,829 --> 00:01:47,250
mind-blowing we're like yeah we're going

00:01:45,030 --> 00:01:47,970
to take this deal so three of us decided

00:01:47,250 --> 00:01:50,880
to take the deal

00:01:47,970 --> 00:01:53,369
Karuna and I did you know got the coupon

00:01:50,880 --> 00:01:57,000
a handwritten voucher and our flights

00:01:53,369 --> 00:01:59,040
had a stopover and Detroit Michigan and

00:01:57,000 --> 00:02:01,380
then we end up ended up coming into

00:01:59,040 --> 00:02:03,210
Seattle or into a Philadelphia by 8

00:02:01,380 --> 00:02:05,670
o'clock and then another member came

00:02:03,210 --> 00:02:07,830
through Raleigh so

00:02:05,670 --> 00:02:10,380
what happened is little did I know that

00:02:07,830 --> 00:02:13,500
that was the start of some chaotic

00:02:10,380 --> 00:02:17,520
events after I landed into Philadelphia

00:02:13,500 --> 00:02:19,890
my luggage made it into Philadelphia and

00:02:17,520 --> 00:02:24,210
it was in this Alaska office locked up

00:02:19,890 --> 00:02:26,970
and I could see it from outside okay so

00:02:24,210 --> 00:02:29,040
then there was numbers there we try to

00:02:26,970 --> 00:02:31,320
go to different boots nobody was there

00:02:29,040 --> 00:02:32,790
and little did I know that Alaska

00:02:31,320 --> 00:02:35,430
Airlines only has three flights out of

00:02:32,790 --> 00:02:37,380
Philadelphia every day one two in the

00:02:35,430 --> 00:02:38,970
morning and one at 6 o'clock in the

00:02:37,380 --> 00:02:40,200
evening so the last flight was done for

00:02:38,970 --> 00:02:42,090
the day so these guys are checked out

00:02:40,200 --> 00:02:43,260
and their home so you reach their

00:02:42,090 --> 00:02:44,670
customer service terrible customer

00:02:43,260 --> 00:02:48,480
service by the way so I have to take

00:02:44,670 --> 00:02:49,470
that to Twitter okay so anyways so I was

00:02:48,480 --> 00:02:52,560
done for the day you know I was ready

00:02:49,470 --> 00:02:54,330
for drinks food so we came in I had just

00:02:52,560 --> 00:02:56,040
my laptop so you can imagine what I went

00:02:54,330 --> 00:02:57,900
through for that night right and I had

00:02:56,040 --> 00:03:00,209
to wake up early in the morning but this

00:02:57,900 --> 00:03:02,220
time around on Tuesday morning I decided

00:03:00,209 --> 00:03:03,780
to validate some of my essentials and

00:03:02,220 --> 00:03:05,850
what I did there was I call their

00:03:03,780 --> 00:03:07,200
customer service number again to

00:03:05,850 --> 00:03:09,930
validate if these guys are actually

00:03:07,200 --> 00:03:11,430
working or they just checked out right

00:03:09,930 --> 00:03:13,560
so the central number happens to be a

00:03:11,430 --> 00:03:15,239
number in Philadelphia and I call them

00:03:13,560 --> 00:03:17,100
and then they want me like hey we have

00:03:15,239 --> 00:03:17,640
two shifts the first shift is done at

00:03:17,100 --> 00:03:18,630
8:00 o'clock

00:03:17,640 --> 00:03:21,299
so if you don't make it by 8:00 o'clock

00:03:18,630 --> 00:03:23,790
you can pick up your luggage or up until

00:03:21,299 --> 00:03:26,010
2 o'clock so I made it by the clock got

00:03:23,790 --> 00:03:27,450
my luggage thought everything was cool

00:03:26,010 --> 00:03:29,430
and then for some reason you know

00:03:27,450 --> 00:03:30,870
naturally the 750 dollars that was the

00:03:29,430 --> 00:03:32,489
big cut for me right so I was like I

00:03:30,870 --> 00:03:34,860
couldn't validate it online I couldn't

00:03:32,489 --> 00:03:36,780
get it checked online and then I call

00:03:34,860 --> 00:03:37,290
the customer service again and they tell

00:03:36,780 --> 00:03:39,090
me that

00:03:37,290 --> 00:03:40,910
oh yeah the person that handed the

00:03:39,090 --> 00:03:45,000
voucher forgot to do an extra step of

00:03:40,910 --> 00:03:47,190
validation I'm like WTF right so as of

00:03:45,000 --> 00:03:49,440
now the coupon is not validated so I'm

00:03:47,190 --> 00:03:51,299
still like dealing with the pains of the

00:03:49,440 --> 00:03:52,910
chaos so maybe wondering what's the

00:03:51,299 --> 00:03:55,019
story and the connection here right it's

00:03:52,910 --> 00:03:57,030
the connection here is the ripple

00:03:55,019 --> 00:03:59,310
effects that one event can have in your

00:03:57,030 --> 00:04:01,769
life leading to poor customer experience

00:03:59,310 --> 00:04:03,690
that's exactly what chaos engineering

00:04:01,769 --> 00:04:05,310
deals with which is expensive customer

00:04:03,690 --> 00:04:07,709
facing outages and how do you avoid it

00:04:05,310 --> 00:04:11,850
before your customers realize it in this

00:04:07,709 --> 00:04:13,230
case the customer was me yeah so without

00:04:11,850 --> 00:04:15,480
further delay we'll get started that's

00:04:13,230 --> 00:04:16,950
our first story for the day so I'm

00:04:15,480 --> 00:04:18,630
Ramesh I'm a senior manager for the

00:04:16,950 --> 00:04:20,880
platform engineering team at

00:04:18,630 --> 00:04:22,530
currents one of our brilliant engineers

00:04:20,880 --> 00:04:24,539
on the team so he's here with us he's

00:04:22,530 --> 00:04:26,009
got some live demos by the way we don't

00:04:24,539 --> 00:04:29,509
do record demos we'd like to do live

00:04:26,009 --> 00:04:31,889
demos well we'll see how that goes

00:04:29,509 --> 00:04:33,720
anyway so without any further delays I

00:04:31,889 --> 00:04:35,729
already mentioned my team's name were

00:04:33,720 --> 00:04:39,270
Platt more called as fondly call as the

00:04:35,729 --> 00:04:40,710
platform engineering team and behind the

00:04:39,270 --> 00:04:43,020
scenes my team runs the container

00:04:40,710 --> 00:04:45,930
strategy for t-mobile so if you look at

00:04:43,020 --> 00:04:48,120
the evolution of infrastructure you know

00:04:45,930 --> 00:04:49,460
everything is as a service model today

00:04:48,120 --> 00:04:52,530
starting off with infrastructure

00:04:49,460 --> 00:04:53,940
containers platforms and functions so

00:04:52,530 --> 00:04:55,229
you name it we have services and

00:04:53,940 --> 00:04:57,389
capabilities and each of these stacks

00:04:55,229 --> 00:04:58,680
and we're growing fast into the top

00:04:57,389 --> 00:05:02,580
level stack which is function as a

00:04:58,680 --> 00:05:04,560
service so my groups you know prime

00:05:02,580 --> 00:05:07,139
objective is to like deliver modern

00:05:04,560 --> 00:05:09,210
simple secure scalable services that our

00:05:07,139 --> 00:05:11,039
platform and infrastructure agnostic we

00:05:09,210 --> 00:05:13,289
actually want to plug our platform

00:05:11,039 --> 00:05:15,139
capabilities that we built agnostic to

00:05:13,289 --> 00:05:17,520
any infrastructure so behind-the-scenes

00:05:15,139 --> 00:05:19,110
application workloads can don't know

00:05:17,520 --> 00:05:20,340
where their workloads are that's the

00:05:19,110 --> 00:05:22,880
vision that we have in mind when we

00:05:20,340 --> 00:05:25,710
deliver on these platform capabilities

00:05:22,880 --> 00:05:27,810
if you don't know the higher up you go

00:05:25,710 --> 00:05:30,900
on the stack the more flexibility you

00:05:27,810 --> 00:05:32,699
get less conformance to standards if you

00:05:30,900 --> 00:05:34,949
stay lower on the stack so every

00:05:32,699 --> 00:05:36,659
application workload is unique so at

00:05:34,949 --> 00:05:38,310
t-mobile we're trying to expose these

00:05:36,659 --> 00:05:40,590
different capabilities from a platform

00:05:38,310 --> 00:05:42,300
perspective so that our application

00:05:40,590 --> 00:05:43,919
teams will rightfully choose what and

00:05:42,300 --> 00:05:46,099
where they want to run their workload

00:05:43,919 --> 00:05:49,710
Center

00:05:46,099 --> 00:05:51,300
so speaking of cloud foundry I see a

00:05:49,710 --> 00:05:52,800
couple of faces that may have been in

00:05:51,300 --> 00:05:55,169
the previous session around how big is

00:05:52,800 --> 00:05:56,940
too big if you didn't know we are

00:05:55,169 --> 00:05:59,690
actually one of the world's largest

00:05:56,940 --> 00:06:01,800
cloud foundry installation by all means

00:05:59,690 --> 00:06:04,050
some which are very proud of some which

00:06:01,800 --> 00:06:06,900
we are not and I'll get to those we have

00:06:04,050 --> 00:06:08,729
13 plus foundations the 36,000

00:06:06,900 --> 00:06:11,490
containers is outdated as of last night

00:06:08,729 --> 00:06:13,919
it's 39,000 containers 700 million daily

00:06:11,490 --> 00:06:16,319
transactions right and 3,000 plus

00:06:13,919 --> 00:06:18,569
business critical applications 100 plus

00:06:16,319 --> 00:06:20,490
project teams so that's the scale at

00:06:18,569 --> 00:06:23,219
which we're running and behind the

00:06:20,490 --> 00:06:24,659
scenes my team is around 25 including my

00:06:23,219 --> 00:06:27,360
leadership group behind my product

00:06:24,659 --> 00:06:29,430
manager so but this group

00:06:27,360 --> 00:06:31,169
is not all doing PCF we also have

00:06:29,430 --> 00:06:32,639
another platform to manage with this PKS

00:06:31,169 --> 00:06:34,710
right so behind the scenes we have four

00:06:32,639 --> 00:06:36,750
different domains trying to deliver this

00:06:34,710 --> 00:06:38,879
customer experience doing bigger things

00:06:36,750 --> 00:06:40,680
our own platform intelligence and then

00:06:38,879 --> 00:06:43,939
focusing on some of the core stuff that

00:06:40,680 --> 00:06:46,500
we need to deliver for PCF and PKS so

00:06:43,939 --> 00:06:48,599
PCF is all about agility redefine I

00:06:46,500 --> 00:06:50,310
won't sell too much on marketing here

00:06:48,599 --> 00:06:52,319
for Cloud Foundry you guys know what

00:06:50,310 --> 00:06:54,719
what this is about right so for us it's

00:06:52,319 --> 00:06:57,060
all about developer agility faster apps

00:06:54,719 --> 00:06:59,340
more frequent changes in fact one of the

00:06:57,060 --> 00:07:01,889
numbers I have from our peer teams here

00:06:59,340 --> 00:07:03,449
as a thousand changes day time changes

00:07:01,889 --> 00:07:05,909
that have gone through in fiscal year

00:07:03,449 --> 00:07:08,250
2018 fewer incidents zero downtime

00:07:05,909 --> 00:07:10,740
deployments it's all of these radical

00:07:08,250 --> 00:07:12,509
culture shift changes at t-mobile really

00:07:10,740 --> 00:07:14,879
embracing the DevOps buzzword it's no

00:07:12,509 --> 00:07:16,259
longer a buzzword where we truly believe

00:07:14,879 --> 00:07:21,449
that you write a piece of code you own

00:07:16,259 --> 00:07:26,569
it when it's deployed to production who

00:07:21,449 --> 00:07:26,569
knows what this is - the team of folks

00:07:26,659 --> 00:07:33,690
that star who is that awesome thank you

00:07:30,180 --> 00:07:38,490
do you know who's that star that is well

00:07:33,690 --> 00:07:41,639
I wish but okay okay who do you think

00:07:38,490 --> 00:07:48,900
this is good who do you think that is

00:07:41,639 --> 00:07:50,490
that is t-mobile so yeah so this is what

00:07:48,900 --> 00:07:53,339
I call the explosion of micro services

00:07:50,490 --> 00:07:55,949
right containers is everywhere this

00:07:53,339 --> 00:07:57,719
trend towards you know service model

00:07:55,949 --> 00:07:59,430
comes with the cost which is people

00:07:57,719 --> 00:08:01,589
write these micro services not knowing

00:07:59,430 --> 00:08:03,270
what kind of ecosystem that these micro

00:08:01,589 --> 00:08:06,289
services live in right and that's the

00:08:03,270 --> 00:08:08,580
kind of ecosystem keep in mind that I

00:08:06,289 --> 00:08:10,529
used to be with Amazon at some point so

00:08:08,580 --> 00:08:14,250
it's this is I think a snapshot from

00:08:10,529 --> 00:08:15,930
year 2009 so it's pretty old and you can

00:08:14,250 --> 00:08:17,819
only imagine with the growth that they

00:08:15,930 --> 00:08:20,039
have had what this could look like today

00:08:17,819 --> 00:08:21,419
the guy that wrote this tool I don't

00:08:20,039 --> 00:08:22,919
think he care to refresh he's like this

00:08:21,419 --> 00:08:25,800
is too much work for me to refresh right

00:08:22,919 --> 00:08:27,569
but we are were fascinated to see all

00:08:25,800 --> 00:08:29,310
growth with containers and the whole

00:08:27,569 --> 00:08:32,669
evolution towards micro services and

00:08:29,310 --> 00:08:34,110
this explosion so for us it's all about

00:08:32,669 --> 00:08:36,089
like what could go wrong when your

00:08:34,110 --> 00:08:37,919
services get released to this wild

00:08:36,089 --> 00:08:39,160
atmosphere where it's a share ecosystem

00:08:37,919 --> 00:08:41,979
but

00:08:39,160 --> 00:08:45,280
how to cope with failures right so for

00:08:41,979 --> 00:08:47,770
us the only thing that is constant is

00:08:45,280 --> 00:08:49,330
not changed anymore its failures we want

00:08:47,770 --> 00:08:51,550
to embrace it because failure is

00:08:49,330 --> 00:08:53,160
inevitable so this is not a line from

00:08:51,550 --> 00:08:55,330
the final destination way this is my own

00:08:53,160 --> 00:08:56,860
if you've seen final destination they

00:08:55,330 --> 00:08:58,660
talk about debt that's inevitable right

00:08:56,860 --> 00:09:00,460
now that's not this this is our own

00:08:58,660 --> 00:09:04,900
version of chaos engineering and what we

00:09:00,460 --> 00:09:06,100
think about failures okay so going to

00:09:04,900 --> 00:09:07,450
the problem statement today's talk is

00:09:06,100 --> 00:09:08,830
around chaos engineering forward Cloud

00:09:07,450 --> 00:09:10,270
Foundry we spoke about developer

00:09:08,830 --> 00:09:13,210
productivity we spoke about customer

00:09:10,270 --> 00:09:15,540
obsession you know you wanna like have

00:09:13,210 --> 00:09:18,670
your developers build deploy rapidly

00:09:15,540 --> 00:09:20,290
operate these services in the cloud at

00:09:18,670 --> 00:09:21,820
the same time you want to focus on

00:09:20,290 --> 00:09:23,500
delightful customer experience all it

00:09:21,820 --> 00:09:25,450
take is this one chaotic event just like

00:09:23,500 --> 00:09:27,550
I explained with the Alaska event that

00:09:25,450 --> 00:09:30,550
happened to me to break my trust with

00:09:27,550 --> 00:09:31,840
them which today it's gone right so they

00:09:30,550 --> 00:09:33,610
need to get it back from me and they

00:09:31,840 --> 00:09:35,290
have to work on it so the same the same

00:09:33,610 --> 00:09:38,470
thing happens with service ecosystem we

00:09:35,290 --> 00:09:39,880
are a customer driven dream our job is

00:09:38,470 --> 00:09:42,160
to deliver capabilities to our customer

00:09:39,880 --> 00:09:43,810
and if we break that trust it's going to

00:09:42,160 --> 00:09:45,940
be an expensive trust break that we have

00:09:43,810 --> 00:09:48,370
to fix so what if there is real chaos

00:09:45,940 --> 00:09:52,090
and that's the problem statement black

00:09:48,370 --> 00:09:54,160
said so before I give you the actual

00:09:52,090 --> 00:10:01,900
solution design let's begin with another

00:09:54,160 --> 00:10:03,640
story here once there lived a king he

00:10:01,900 --> 00:10:06,430
received a gift of two magnificent

00:10:03,640 --> 00:10:09,420
Falcons they were so adorable the king

00:10:06,430 --> 00:10:12,790
gave it to head falconer to train them

00:10:09,420 --> 00:10:14,200
months past the Falcon trainer trained

00:10:12,790 --> 00:10:16,810
them for two months or three months and

00:10:14,200 --> 00:10:18,850
months passed one of the Falcons was

00:10:16,810 --> 00:10:22,930
flying but the other remained on the

00:10:18,850 --> 00:10:25,480
branch King got so upset he got so

00:10:22,930 --> 00:10:27,700
depressed he called up all the wise men

00:10:25,480 --> 00:10:32,530
in his kingdom but no one could make the

00:10:27,700 --> 00:10:34,510
bird fly but after few days when the

00:10:32,530 --> 00:10:38,740
king came out he saw the second fire

00:10:34,510 --> 00:10:40,510
Falcon flying to King immediately calls

00:10:38,740 --> 00:10:43,030
his minister and Assam who is a doer

00:10:40,510 --> 00:10:45,580
doer of this miracle Minister it's a

00:10:43,030 --> 00:10:47,200
local farmer who solved this problem the

00:10:45,580 --> 00:10:49,430
king with the farmer how could you do it

00:10:47,200 --> 00:10:52,589
when all the wise men couldn't do it

00:10:49,430 --> 00:10:54,600
the farmer says it was very easy your

00:10:52,589 --> 00:10:56,310
highness I simply cut the branch where

00:10:54,600 --> 00:11:00,000
the bird was flying where the bird was

00:10:56,310 --> 00:11:02,519
sitting so the moral of the story is the

00:11:00,000 --> 00:11:04,670
simple change made the bird fly the

00:11:02,519 --> 00:11:07,550
simple change can disrupt our systems

00:11:04,670 --> 00:11:10,680
not all problems need a complex solution

00:11:07,550 --> 00:11:12,420
so with all the complex systems with all

00:11:10,680 --> 00:11:15,839
the distributed environment we have are

00:11:12,420 --> 00:11:19,200
we prepared for chaos what do you think

00:11:15,839 --> 00:11:21,750
about the average VNC yeah rightly said

00:11:19,200 --> 00:11:23,130
you know like it says on the slide right

00:11:21,750 --> 00:11:24,600
or confirmation to the familiar

00:11:23,130 --> 00:11:27,930
comfortable on Monday and that's our

00:11:24,600 --> 00:11:29,160
usual comfort zone but for you to get

00:11:27,930 --> 00:11:30,570
out of your comfort zone you need to

00:11:29,160 --> 00:11:33,510
learn to destroy the branch of these

00:11:30,570 --> 00:11:35,010
network connections and free ourselves

00:11:33,510 --> 00:11:36,420
no glory of a presidency if you want to

00:11:35,010 --> 00:11:40,350
build better applications you got to

00:11:36,420 --> 00:11:41,880
break your applications great so let me

00:11:40,350 --> 00:11:43,470
reiterate the problem statement before

00:11:41,880 --> 00:11:45,089
that we need to understand the

00:11:43,470 --> 00:11:47,399
definition of chaos engineering it's

00:11:45,089 --> 00:11:49,500
basically a discipline of experimenting

00:11:47,399 --> 00:11:50,850
on a distributed system in order to

00:11:49,500 --> 00:11:53,310
build confidence in the system's

00:11:50,850 --> 00:11:55,620
capability to withstand turbulent

00:11:53,310 --> 00:11:57,329
conditions in the production so that's

00:11:55,620 --> 00:11:59,339
what is principle of chaos engineering

00:11:57,329 --> 00:12:01,790
from Netflix definition s so let me

00:11:59,339 --> 00:12:04,740
reiterate the problem statement so like

00:12:01,790 --> 00:12:05,940
at t-mobile we started looking at the

00:12:04,740 --> 00:12:08,490
chaos engineering problem in two

00:12:05,940 --> 00:12:11,670
different ways one infrastructure level

00:12:08,490 --> 00:12:14,100
chaos attack the other one is

00:12:11,670 --> 00:12:15,750
application level chaos attack so T

00:12:14,100 --> 00:12:17,640
Mobile is not a single application

00:12:15,750 --> 00:12:19,800
company we have three thousand-plus

00:12:17,640 --> 00:12:21,510
applications belonging to multiple

00:12:19,800 --> 00:12:24,029
internal customers running on a shared

00:12:21,510 --> 00:12:25,560
foundation so performing a chaos attack

00:12:24,029 --> 00:12:27,420
at the infrastructure level is

00:12:25,560 --> 00:12:30,630
definitely going to create customer

00:12:27,420 --> 00:12:33,930
impact at different levels right so so

00:12:30,630 --> 00:12:36,270
as Ronnie said how customer obsessed we

00:12:33,930 --> 00:12:37,949
are we we came out with another concept

00:12:36,270 --> 00:12:40,940
called application level chaos attack

00:12:37,949 --> 00:12:43,410
wherein we can perform a single targeted

00:12:40,940 --> 00:12:45,779
attack on a particular application or

00:12:43,410 --> 00:12:47,550
its dependency without affecting any

00:12:45,779 --> 00:12:50,730
other application running on the same

00:12:47,550 --> 00:12:52,470
Diego cell or on the foundation so we

00:12:50,730 --> 00:12:54,690
use to open source solutions here like

00:12:52,470 --> 00:12:57,089
you know turbulence plus plus is a

00:12:54,690 --> 00:12:58,630
wrapper around another open source open

00:12:57,089 --> 00:13:01,750
source solution called turbulence

00:12:58,630 --> 00:13:03,339
whereas monarch is our own internal

00:13:01,750 --> 00:13:05,620
toolkit that we have started open

00:13:03,339 --> 00:13:06,339
sourcing it and it is responsible for

00:13:05,620 --> 00:13:11,860
performing

00:13:06,339 --> 00:13:14,649
application-level chaos attacks so in

00:13:11,860 --> 00:13:16,389
our journey for finding out the existing

00:13:14,649 --> 00:13:18,730
solution sir we didn't wanted to

00:13:16,389 --> 00:13:21,000
reinvent the veil so our journey started

00:13:18,730 --> 00:13:23,259
this way so we started with chaos lemur

00:13:21,000 --> 00:13:24,610
but you can see the feature functions

00:13:23,259 --> 00:13:26,380
like you know some of the functions that

00:13:24,610 --> 00:13:28,240
we have picked up here are only finite

00:13:26,380 --> 00:13:30,339
view just to give you a brief

00:13:28,240 --> 00:13:31,779
understanding of how the comparison goes

00:13:30,339 --> 00:13:33,730
between the different solutions that

00:13:31,779 --> 00:13:35,860
exists in the market today so chaos

00:13:33,730 --> 00:13:37,930
lemur can only perform killing of the

00:13:35,860 --> 00:13:40,800
VMS but we also wanted to perform

00:13:37,930 --> 00:13:43,600
killing of a random process killing of

00:13:40,800 --> 00:13:45,579
introducing a latency introducing CPU

00:13:43,600 --> 00:13:47,769
memory hog and application knowledge as

00:13:45,579 --> 00:13:50,470
well so chaos slimmer was falling short

00:13:47,769 --> 00:13:52,779
in this so we also evaluated another

00:13:50,470 --> 00:13:56,009
commercial offering called gremlin it

00:13:52,779 --> 00:13:58,540
later a point of time they also added

00:13:56,009 --> 00:14:01,029
application knowledge to their toolkits

00:13:58,540 --> 00:14:02,800
so which was good and then but we were

00:14:01,029 --> 00:14:04,689
still constantly hunting for a solution

00:14:02,800 --> 00:14:06,910
in the open source space so that's when

00:14:04,689 --> 00:14:09,850
we came across turbulence the turbulence

00:14:06,910 --> 00:14:11,620
as I said is is in chaos engineering

00:14:09,850 --> 00:14:13,870
toolkit at the infrastructure level it

00:14:11,620 --> 00:14:15,730
can perform killing of virtual machines

00:14:13,870 --> 00:14:17,980
killing of a process introducing

00:14:15,730 --> 00:14:20,560
latencies and introducing CPU and memory

00:14:17,980 --> 00:14:22,089
Hawks but it can it doesn't know where

00:14:20,560 --> 00:14:24,279
your application is learning running in

00:14:22,089 --> 00:14:27,069
your cluster so that's where the

00:14:24,279 --> 00:14:29,800
t-mobile's ctk comes in which has got

00:14:27,069 --> 00:14:31,839
all check marks and the CT K of T Mobile

00:14:29,800 --> 00:14:35,769
is a combination of both monarch and

00:14:31,839 --> 00:14:37,779
turbulence plus plus so introducing

00:14:35,769 --> 00:14:38,500
monarch and turbulence plus plus both

00:14:37,779 --> 00:14:40,750
these solutions

00:14:38,500 --> 00:14:43,300
enables initiating sophisticated failure

00:14:40,750 --> 00:14:46,630
injection tests on any boss deployed

00:14:43,300 --> 00:14:48,759
infrastructure so it could be PC F or it

00:14:46,630 --> 00:14:50,889
could be a Cuban at ease that is managed

00:14:48,759 --> 00:14:53,199
by the boss and apps deployed in such

00:14:50,889 --> 00:14:54,819
infrastructure can also go through you

00:14:53,199 --> 00:14:58,180
know a sophisticated chaos engineering

00:14:54,819 --> 00:15:00,250
attacks now let's look at the high-level

00:14:58,180 --> 00:15:02,139
features that we offer as a part of

00:15:00,250 --> 00:15:04,720
turbulence plus plus today so the

00:15:02,139 --> 00:15:07,059
turbulence as such is both an API server

00:15:04,720 --> 00:15:07,990
and an agent so the agent gets deployed

00:15:07,059 --> 00:15:09,459
in each

00:15:07,990 --> 00:15:12,130
of the virtual machines of the Cloud

00:15:09,459 --> 00:15:14,589
Foundry now the features that are in you

00:15:12,130 --> 00:15:16,750
know highlighted here are the offerings

00:15:14,589 --> 00:15:19,240
that we have added on the top of open

00:15:16,750 --> 00:15:21,339
source solution turbulence so killing VM

00:15:19,240 --> 00:15:23,589
killing the process causing a process

00:15:21,339 --> 00:15:26,170
introducing some stress corrupting the

00:15:23,589 --> 00:15:28,660
disk limiting the bandwidth reordering

00:15:26,170 --> 00:15:30,370
of the packets targeted blocking and

00:15:28,660 --> 00:15:31,870
blocking DNS and duplication of the

00:15:30,370 --> 00:15:33,100
packets so these are some of the

00:15:31,870 --> 00:15:34,779
features that we have added to

00:15:33,100 --> 00:15:37,480
turbulence + + we are going to look at

00:15:34,779 --> 00:15:40,029
some demo and you know get a feel of the

00:15:37,480 --> 00:15:41,920
functionality as well whereas from the

00:15:40,029 --> 00:15:45,279
monarch which is an application level

00:15:41,920 --> 00:15:46,990
chaos attack it can it can identify it

00:15:45,279 --> 00:15:48,970
can discover where your application is

00:15:46,990 --> 00:15:51,339
running inside the cluster of multiple

00:15:48,970 --> 00:15:53,380
virtual machines it can block the

00:15:51,339 --> 00:15:55,690
traffic ingress or egress to the

00:15:53,380 --> 00:15:57,910
application it can also introduce

00:15:55,690 --> 00:15:59,050
latency at the service level so let's

00:15:57,910 --> 00:16:00,940
say if there is a service to service

00:15:59,050 --> 00:16:02,890
communication that is happening and you

00:16:00,940 --> 00:16:05,010
have programmed a time-out mechanism

00:16:02,890 --> 00:16:08,260
what happens if you're dependent service

00:16:05,010 --> 00:16:11,260
you know throws out some latency how is

00:16:08,260 --> 00:16:13,180
your service 1 is going to act right so

00:16:11,260 --> 00:16:14,920
those kind of scenarios can be simulated

00:16:13,180 --> 00:16:17,320
through monarch and bandwidth

00:16:14,920 --> 00:16:19,300
restriction and crashing a random a ice

00:16:17,320 --> 00:16:20,980
we'll look at some demos you know each

00:16:19,300 --> 00:16:25,570
explaining some of the functionalities

00:16:20,980 --> 00:16:29,589
as well so infrastructure level chaos

00:16:25,570 --> 00:16:32,110
engineering so Cloud Foundry is a

00:16:29,589 --> 00:16:36,370
collection of multiple virtual machines

00:16:32,110 --> 00:16:39,250
so imagine a scenario where there is a

00:16:36,370 --> 00:16:41,350
process called wrap that is responsible

00:16:39,250 --> 00:16:43,180
for managing the entire lifecycle of the

00:16:41,350 --> 00:16:46,209
containers running on that degauss or

00:16:43,180 --> 00:16:49,450
the ego cell is skilled what happens if

00:16:46,209 --> 00:16:50,680
a virtual machine goes down right so

00:16:49,450 --> 00:16:52,540
what happens to the application

00:16:50,680 --> 00:16:55,060
instances or the containers running in

00:16:52,540 --> 00:16:57,430
that ego-self and cloud foundry is based

00:16:55,060 --> 00:16:59,470
on time out mechanism what happens if

00:16:57,430 --> 00:17:02,339
there's a latency introduced between go

00:16:59,470 --> 00:17:04,929
router and the Teager cell so all these

00:17:02,339 --> 00:17:07,209
kind of simulations can be performed

00:17:04,929 --> 00:17:10,480
with turbulence + + today so you can

00:17:07,209 --> 00:17:12,309
given a Cloud Foundry cluster you can go

00:17:10,480 --> 00:17:14,140
and choose which particular virtual

00:17:12,309 --> 00:17:16,809
machine or which random virtual machine

00:17:14,140 --> 00:17:19,179
you wanted to kill or you can also kill

00:17:16,809 --> 00:17:19,459
a particular process running inside the

00:17:19,179 --> 00:17:21,110
deal

00:17:19,459 --> 00:17:23,149
self and what happens how would the

00:17:21,110 --> 00:17:24,860
Cloud Foundry cluster behave in the

00:17:23,149 --> 00:17:26,839
process of you know when the process

00:17:24,860 --> 00:17:29,360
gets killed right and what happens if

00:17:26,839 --> 00:17:31,520
they if a fake latency is introduced

00:17:29,360 --> 00:17:33,649
between go router and couple of other

00:17:31,520 --> 00:17:35,960
virtual machines so the turbulence plus

00:17:33,649 --> 00:17:38,570
plus is a solution for this and we have

00:17:35,960 --> 00:17:40,070
it's all written and go and you know we

00:17:38,570 --> 00:17:43,850
have a demo for showing these three

00:17:40,070 --> 00:17:45,309
capabilities can we look into the demo

00:17:43,850 --> 00:17:48,590
yeah

00:17:45,309 --> 00:17:50,870
so for this demo we are going to look at

00:17:48,590 --> 00:17:53,120
using turbulence plus plus how are we

00:17:50,870 --> 00:17:55,279
going to kill virtual machine how are we

00:17:53,120 --> 00:17:55,820
going to block ssh traffic to the

00:17:55,279 --> 00:17:58,039
ego-self

00:17:55,820 --> 00:18:00,559
and how can we manipulate network

00:17:58,039 --> 00:18:03,409
traffic so for this demo i have used

00:18:00,559 --> 00:18:07,490
boss light environment but it can very

00:18:03,409 --> 00:18:11,260
well be replicated on any cloud for me

00:18:07,490 --> 00:18:11,260
or pivotal Cloud Foundry clusters

00:18:27,799 --> 00:18:33,480
is the font visible check okay cool

00:18:32,940 --> 00:18:37,320
thanks

00:18:33,480 --> 00:18:41,789
so this is a wash wash light running on

00:18:37,320 --> 00:18:43,980
my laptop and so boss I have already

00:18:41,789 --> 00:18:46,980
logged into it these are the deployments

00:18:43,980 --> 00:18:50,129
that I've got I have CF deployment and

00:18:46,980 --> 00:18:53,460
have got turbulence so let's look at

00:18:50,129 --> 00:18:56,779
what turbulence Bosch add on this is the

00:18:53,460 --> 00:18:56,779
Bosch add-on that we have added and

00:18:58,159 --> 00:19:05,490
turbulence let's list the VMS that are

00:19:03,210 --> 00:19:07,919
there in turbulence so there is an API

00:19:05,490 --> 00:19:10,080
server that is running so it's a very

00:19:07,919 --> 00:19:11,820
simple and we have not made it much

00:19:10,080 --> 00:19:14,639
change for this demo it's already part

00:19:11,820 --> 00:19:16,379
of open source turbulent solution so the

00:19:14,639 --> 00:19:18,629
API server is running and it's listening

00:19:16,379 --> 00:19:28,230
on this IP address and let's look at the

00:19:18,629 --> 00:19:29,700
virtual machines of CF so you can see we

00:19:28,230 --> 00:19:32,039
have a bunch of virtual machines in the

00:19:29,700 --> 00:19:35,220
boss light Cloud Foundry deployment you

00:19:32,039 --> 00:19:37,980
have adapter you have API server worker

00:19:35,220 --> 00:19:40,529
console database Vigo levo API and D

00:19:37,980 --> 00:19:43,440
cursor so we have only one Diego cell

00:19:40,529 --> 00:19:45,600
here so as I said earlier as weak as you

00:19:43,440 --> 00:19:47,879
might be knowing Diego cell is the one

00:19:45,600 --> 00:19:49,799
which host application instances in it

00:19:47,879 --> 00:19:51,389
or the containers running in it you know

00:19:49,799 --> 00:19:53,070
are deployed in the Diego cell and right

00:19:51,389 --> 00:19:57,480
now for this boss light environment I

00:19:53,070 --> 00:20:01,259
have only one to yourself so I'm going

00:19:57,480 --> 00:20:04,590
to use chaos toolkit which is a driver

00:20:01,259 --> 00:20:08,070
for which has a driver for turbulence to

00:20:04,590 --> 00:20:11,700
initiate a pause process so what does it

00:20:08,070 --> 00:20:16,919
mean so let's see let's do an ssh into

00:20:11,700 --> 00:20:20,279
the day go cell so what you do is you

00:20:16,919 --> 00:20:23,119
just select the target to the actual

00:20:20,279 --> 00:20:25,740
deployment do an ssh and the d go cell

00:20:23,119 --> 00:20:27,570
as you can see you are inside the shell

00:20:25,740 --> 00:20:29,970
of the Diego cell and it's very pretty

00:20:27,570 --> 00:20:32,309
responsive now right so let me exit from

00:20:29,970 --> 00:20:34,889
here and I'm gonna repeat the same step

00:20:32,309 --> 00:20:37,049
when I do the chaos attack during and

00:20:34,889 --> 00:20:40,990
after

00:20:37,049 --> 00:20:43,330
so chaos toolkit turbulence is all open

00:20:40,990 --> 00:20:45,640
sourced as well so when you go in here

00:20:43,330 --> 00:20:47,679
we run a bunch of Python scripts for

00:20:45,640 --> 00:20:54,460
running these experiments so first

00:20:47,679 --> 00:20:59,250
attack that I'm going to do is okay

00:20:54,460 --> 00:21:03,460
before that let me give you a very quick

00:20:59,250 --> 00:21:12,760
insight into the Jason the Jason the

00:21:03,460 --> 00:21:17,139
actual chaos toolkit Jason itself so

00:21:12,760 --> 00:21:19,149
this is a chaos toolkit Jason object it

00:21:17,139 --> 00:21:21,250
basically has a standard title

00:21:19,149 --> 00:21:23,230
description what kind of attack that you

00:21:21,250 --> 00:21:25,510
are trying to perform and what we are

00:21:23,230 --> 00:21:28,240
doing is impacting or pausing and SSST

00:21:25,510 --> 00:21:30,220
access to a random Diego cell there is a

00:21:28,240 --> 00:21:32,289
steady state hypothesis it is empty for

00:21:30,220 --> 00:21:33,580
now but the most important thing is a

00:21:32,289 --> 00:21:36,760
method that you are performing the

00:21:33,580 --> 00:21:39,610
action that you're doing is attacking

00:21:36,760 --> 00:21:42,610
and pausing a process with the process

00:21:39,610 --> 00:21:44,620
named SSST on a deployment cf4 a Diego

00:21:42,610 --> 00:21:48,399
cell and select any ID for this limit to

00:21:44,620 --> 00:21:49,860
one so what I'm going to do is I'm going

00:21:48,399 --> 00:21:55,210
to run this experiment

00:21:49,860 --> 00:21:58,539
pause process and before I run this

00:21:55,210 --> 00:22:01,120
glitch let's check if the SSH connection

00:21:58,539 --> 00:22:03,460
is fine and it's pretty responsive again

00:22:01,120 --> 00:22:07,990
right so let's go back and initiate the

00:22:03,460 --> 00:22:13,360
attack so it's running the experiment

00:22:07,990 --> 00:22:15,490
and and it's trying to run it so let's

00:22:13,360 --> 00:22:18,570
try and see if we can do an SSH now

00:22:15,490 --> 00:22:18,570
let's do

00:22:26,010 --> 00:22:29,069
[Music]

00:22:33,390 --> 00:22:36,650
to the live demos

00:22:37,930 --> 00:22:41,160
[Music]

00:22:46,330 --> 00:22:51,330
[Music]

00:22:48,240 --> 00:22:53,460
oh cool it's not working anyways so

00:22:51,330 --> 00:22:58,890
let's move on to the second demo and

00:22:53,460 --> 00:23:07,110
let's see if we can perform Network you

00:22:58,890 --> 00:23:11,390
know latency there that's the challenge

00:23:07,110 --> 00:23:11,390
with like demos but hang tight guys

00:23:11,600 --> 00:23:16,830
yes somebody is running attack on us yes

00:23:15,120 --> 00:23:21,780
the Challenger I don't know who it is

00:23:16,830 --> 00:23:24,480
please if you're doing something stop so

00:23:21,780 --> 00:23:27,060
we have the pink operation happening on

00:23:24,480 --> 00:23:30,630
the digo cell and you can see the time

00:23:27,060 --> 00:23:32,910
is less than you know once you can hear

00:23:30,630 --> 00:23:36,810
it's a couple of zero zero point zero

00:23:32,910 --> 00:23:39,650
six zero milliseconds right so let's try

00:23:36,810 --> 00:23:39,650
to inject some

00:24:13,179 --> 00:24:15,210
Oh

00:24:32,350 --> 00:24:37,180
I think I'm unconnected on the internet

00:24:34,180 --> 00:24:39,040
that's the reason VPN so that's the it

00:24:37,180 --> 00:24:42,180
is coming from the VPN yeah so no I

00:24:39,040 --> 00:24:42,180
think it should be okay

00:24:48,050 --> 00:24:53,160
[Music]

00:24:49,750 --> 00:24:55,570
yeah so I was on the VPN server it was

00:24:53,160 --> 00:25:01,840
playing with my network into the network

00:24:55,570 --> 00:25:05,880
so on the boss slide so let's uh you

00:25:01,840 --> 00:25:08,140
start the experiment again yeah process

00:25:05,880 --> 00:25:09,820
so we're going back to the pass process

00:25:08,140 --> 00:25:11,020
the original first part of the demo

00:25:09,820 --> 00:25:13,530
because we want our demos to be

00:25:11,020 --> 00:25:13,530
successful

00:25:26,450 --> 00:25:29,859
me and refresh

00:26:05,150 --> 00:26:18,270
okay let me exit now let's start with

00:26:08,430 --> 00:26:21,270
our boss process so the steady state

00:26:18,270 --> 00:26:24,840
hypothesis and so the attack has been

00:26:21,270 --> 00:26:27,330
initiated so let's try and do the SSS

00:26:24,840 --> 00:26:30,140
connector connect until now so as you

00:26:27,330 --> 00:26:33,720
can see there is a there's a brief pause

00:26:30,140 --> 00:26:36,180
because we have passed a SSH connection

00:26:33,720 --> 00:26:39,450
for about 60 seconds and that you can

00:26:36,180 --> 00:26:43,380
see it in the chaos toolkit timeout here

00:26:39,450 --> 00:26:45,660
as in the in the in the file here you

00:26:43,380 --> 00:26:47,430
have a timeout of one minute so after 60

00:26:45,660 --> 00:26:49,110
seconds this lock on the SSH

00:26:47,430 --> 00:26:53,730
connectivity on to the DSL will be

00:26:49,110 --> 00:26:55,470
automatically released so for now for

00:26:53,730 --> 00:26:57,660
about 60 seconds like you know the SSH

00:26:55,470 --> 00:27:00,180
connectivity to the boss to this

00:26:57,660 --> 00:27:02,430
particular VM will be lost and you can

00:27:00,180 --> 00:27:04,830
simulate this experiment on any other

00:27:02,430 --> 00:27:06,240
process as well like you know a process

00:27:04,830 --> 00:27:07,710
what happens if you are causing the read

00:27:06,240 --> 00:27:09,630
process or killing the rep process for

00:27:07,710 --> 00:27:11,610
about 60 seconds what happens to the

00:27:09,630 --> 00:27:14,550
application instances running on that

00:27:11,610 --> 00:27:17,310
digo cell so automatically roll back

00:27:14,550 --> 00:27:19,740
after yeah it's it yeah it got released

00:27:17,310 --> 00:27:22,020
to see after 60 seconds so now I'm gonna

00:27:19,740 --> 00:27:24,390
exit again and I'm gonna try because now

00:27:22,020 --> 00:27:26,700
I have not can run any experiment now I

00:27:24,390 --> 00:27:29,010
should be able to do an SSH connection

00:27:26,700 --> 00:27:31,190
without any issue so that's very

00:27:29,010 --> 00:27:34,560
responsive now right so that's our first

00:27:31,190 --> 00:27:36,900
failure attack on a Bosch by killing a

00:27:34,560 --> 00:27:39,240
process now let's move on to the other

00:27:36,900 --> 00:27:42,810
attack which I said is manipulating the

00:27:39,240 --> 00:27:45,750
traffic inside the D go self so for that

00:27:42,810 --> 00:27:49,650
I have got another experiment which is

00:27:45,750 --> 00:27:51,660
defined here as Network attack JSON file

00:27:49,650 --> 00:27:54,690
it has got title description the

00:27:51,660 --> 00:27:56,640
standard definition structure of Kaos

00:27:54,690 --> 00:27:58,680
toolkit the method that we are going to

00:27:56,640 --> 00:28:01,460
do is a network attack the ago cell the

00:27:58,680 --> 00:28:05,100
action that we are going to perform is

00:28:01,460 --> 00:28:07,830
attack control net we tell in the packet

00:28:05,100 --> 00:28:09,450
loss of 10% and this is going to timeout

00:28:07,830 --> 00:28:11,550
after one minute with a delay of 100

00:28:09,450 --> 00:28:12,850
milliseconds so we are injecting 100

00:28:11,550 --> 00:28:14,650
millisecond delay

00:28:12,850 --> 00:28:19,210
and when you are doing a ping operation

00:28:14,650 --> 00:28:21,700
on to the degausser so let's run that

00:28:19,210 --> 00:28:25,260
again we follow the same thing Python -

00:28:21,700 --> 00:28:29,610
M Kaos toolkit run the experiment and

00:28:25,260 --> 00:28:32,980
network attack Jason so the attack has

00:28:29,610 --> 00:28:39,070
started now let's look at the virtual

00:28:32,980 --> 00:28:44,520
machines finished and get the IP address

00:28:39,070 --> 00:28:47,980
of D yourself so you can see the time

00:28:44,520 --> 00:28:49,600
factor here there is a time of 100

00:28:47,980 --> 00:28:51,100
milliseconds approximately 100

00:28:49,600 --> 00:28:52,540
milliseconds there is always a standard

00:28:51,100 --> 00:28:55,300
deviation of 10 percent here and there

00:28:52,540 --> 00:28:57,250
which you can see like it's taking about

00:28:55,300 --> 00:28:59,950
100 milliseconds to come back and we

00:28:57,250 --> 00:29:02,890
also spoke about introducing a 5% packet

00:28:59,950 --> 00:29:05,410
loss so if we keep this ping operation

00:29:02,890 --> 00:29:07,810
running the ICMP traffic it's that you

00:29:05,410 --> 00:29:09,580
will find at one point within that one

00:29:07,810 --> 00:29:12,760
minute some of the packets are

00:29:09,580 --> 00:29:15,280
deliberately lost so the the turbulence

00:29:12,760 --> 00:29:16,750
agent which is deployed inside the DSL

00:29:15,280 --> 00:29:19,090
is going to play a role there in

00:29:16,750 --> 00:29:21,730
dropping some of the path packets so as

00:29:19,090 --> 00:29:25,570
you can see there's a two warnings here

00:29:21,730 --> 00:29:27,490
and there's a packet loss so so we have

00:29:25,570 --> 00:29:29,830
kept this attack for about 60 seconds

00:29:27,490 --> 00:29:31,720
again so that's the reason you see and

00:29:29,830 --> 00:29:33,460
and then we have also said like a 5% of

00:29:31,720 --> 00:29:36,130
the packet loss so again if you come

00:29:33,460 --> 00:29:39,370
back and see here the time is back to

00:29:36,130 --> 00:29:40,810
the normal it was 100 milliseconds

00:29:39,370 --> 00:29:43,000
around and then there's a quick

00:29:40,810 --> 00:29:45,190
transition so the attack was there for

00:29:43,000 --> 00:29:46,630
about 60 seconds and there are gain n

00:29:45,190 --> 00:29:47,590
number of combinations you can keep

00:29:46,630 --> 00:29:49,510
trying there's like you know you can

00:29:47,590 --> 00:29:51,970
inject some latency deliberately into

00:29:49,510 --> 00:29:53,560
one of the decoy cells it can be 100

00:29:51,970 --> 00:29:55,360
milliseconds or it can be even more than

00:29:53,560 --> 00:29:57,490
that and see how your cluster behaves

00:29:55,360 --> 00:30:00,910
that's that's one way of you know

00:29:57,490 --> 00:30:02,830
checking that X now let's perform the

00:30:00,910 --> 00:30:05,260
third attack killing the virtual machine

00:30:02,830 --> 00:30:07,180
itself like what happens if the Diego

00:30:05,260 --> 00:30:08,860
cell goes down what happens to the

00:30:07,180 --> 00:30:10,660
application instances running in that

00:30:08,860 --> 00:30:12,880
particular virtual machine so I'm going

00:30:10,660 --> 00:30:15,390
to kill this gear yourself running in

00:30:12,880 --> 00:30:15,390
the borscht light

00:30:17,429 --> 00:30:22,299
so there's a kill Diego cell Jason

00:30:20,559 --> 00:30:29,109
objects is again a standard chaos

00:30:22,299 --> 00:30:31,359
toolkit structure that I've got here so

00:30:29,109 --> 00:30:34,899
the action we have terminated ego cell

00:30:31,359 --> 00:30:37,779
and the attack function is to kill any

00:30:34,899 --> 00:30:39,369
random Diego sir limiting it to one

00:30:37,779 --> 00:30:41,440
Diego cell for now so you can limit to

00:30:39,369 --> 00:30:43,089
if you have five Diego cells running in

00:30:41,440 --> 00:30:45,219
your cluster or 100 Diego cells you can

00:30:43,089 --> 00:30:46,899
limit to any number for that for now

00:30:45,219 --> 00:30:52,690
since I have got only one Diego cell I'm

00:30:46,899 --> 00:30:57,849
going to kill that diva cell so it got

00:30:52,690 --> 00:30:59,919
killed experiment right now so I mean I

00:30:57,849 --> 00:31:01,739
list the virtual machines you can see

00:30:59,919 --> 00:31:04,960
that the Diego cell is missing here

00:31:01,739 --> 00:31:07,539
so there's Deva API but and then the

00:31:04,960 --> 00:31:10,479
doctor there's no D ever self so now

00:31:07,539 --> 00:31:12,519
since it's deployed on so if you can see

00:31:10,479 --> 00:31:14,109
in the previous case you had API server

00:31:12,519 --> 00:31:16,629
and the Diego servers right beneath it

00:31:14,109 --> 00:31:19,479
so the Diego cell has been killed by our

00:31:16,629 --> 00:31:21,639
turbulence + + experiment now the Boche

00:31:19,479 --> 00:31:24,339
the nature of the posture so it has a

00:31:21,639 --> 00:31:26,499
self feeling and self resiliency inbuilt

00:31:24,339 --> 00:31:28,389
capability so it is going to bring up a

00:31:26,499 --> 00:31:32,619
new bigger cell after couple of minutes

00:31:28,389 --> 00:31:35,200
so this is what you know in brief how

00:31:32,619 --> 00:31:37,179
turbulence + + works and there are more

00:31:35,200 --> 00:31:38,619
it's more a more more functionalities

00:31:37,179 --> 00:31:41,529
that have they have added and are more

00:31:38,619 --> 00:31:45,460
experiments that you can perform let's

00:31:41,529 --> 00:31:50,830
move on to the application level of

00:31:45,460 --> 00:31:52,330
engineering now like I said earlier the

00:31:50,830 --> 00:31:55,809
application level chaos engineering

00:31:52,330 --> 00:31:58,269
enables one to perform very targeted

00:31:55,809 --> 00:32:01,679
attack on an application running inside

00:31:58,269 --> 00:32:04,570
a cluster so let's say I have an

00:32:01,679 --> 00:32:06,190
application instance a droplet a

00:32:04,570 --> 00:32:10,779
container that is deployed inside the

00:32:06,190 --> 00:32:13,119
Diego cell here so now this this

00:32:10,779 --> 00:32:15,460
container this app is dependent on my

00:32:13,119 --> 00:32:18,039
sequel database it could be a shared

00:32:15,460 --> 00:32:20,769
service as well now in this case what

00:32:18,039 --> 00:32:23,320
happens if the traffic between the

00:32:20,769 --> 00:32:25,049
application instance or the container to

00:32:23,320 --> 00:32:27,750
the my sequel database is blocked

00:32:25,049 --> 00:32:30,929
how would your application behave

00:32:27,750 --> 00:32:33,090
what happens if there is a UI front

00:32:30,929 --> 00:32:35,010
ending this micro service and if you are

00:32:33,090 --> 00:32:40,980
crashing that microservice how would the

00:32:35,010 --> 00:32:43,500
UI behave and again what if there is a

00:32:40,980 --> 00:32:45,929
latency introduced between your

00:32:43,500 --> 00:32:49,080
container and my sequel database all

00:32:45,929 --> 00:32:52,640
these three simulations can be performed

00:32:49,080 --> 00:32:55,830
with open source again a monarch so

00:32:52,640 --> 00:32:58,080
there are n number of again log

00:32:55,830 --> 00:32:58,950
combinations that you can think of what

00:32:58,080 --> 00:33:02,309
happens if there are multiple

00:32:58,950 --> 00:33:05,100
applications using the same shared my

00:33:02,309 --> 00:33:07,350
sequel database you can go and then do a

00:33:05,100 --> 00:33:09,690
specific targeted block traffic attack

00:33:07,350 --> 00:33:11,520
for a particular application in that

00:33:09,690 --> 00:33:13,260
case without impacting any other

00:33:11,520 --> 00:33:15,600
applications running within the same

00:33:13,260 --> 00:33:17,309
Diego cell or inside the cluster so that

00:33:15,600 --> 00:33:19,890
is what is the application level chaos

00:33:17,309 --> 00:33:20,159
engineering really mean let me ask you a

00:33:19,890 --> 00:33:23,100
question

00:33:20,159 --> 00:33:24,960
so turbulence is focused on

00:33:23,100 --> 00:33:27,150
infrastructure I just want to make sure

00:33:24,960 --> 00:33:28,860
folks understand that that monarch is

00:33:27,150 --> 00:33:30,210
our newest capability focused on

00:33:28,860 --> 00:33:31,650
application level right so there's

00:33:30,210 --> 00:33:34,890
failures at two levels that you're

00:33:31,650 --> 00:33:36,570
targeting yeah so usually as I said

00:33:34,890 --> 00:33:39,360
t-mobile is not a single application

00:33:36,570 --> 00:33:41,730
company we have multiple customers using

00:33:39,360 --> 00:33:43,620
our foundation so if I go ahead and

00:33:41,730 --> 00:33:46,110
perform a chaos attack on the

00:33:43,620 --> 00:33:48,179
infrastructure I have to get an approval

00:33:46,110 --> 00:33:50,220
from you know many other customers right

00:33:48,179 --> 00:33:53,010
so that's not something that I wanted to

00:33:50,220 --> 00:33:55,440
do so rather how about simulating those

00:33:53,010 --> 00:33:57,360
failures at the application belonging to

00:33:55,440 --> 00:34:00,750
a particular customer so that's what is

00:33:57,360 --> 00:34:02,700
app level chaos engineering so you might

00:34:00,750 --> 00:34:05,400
be familiar with this there's a concept

00:34:02,700 --> 00:34:07,770
called the butterfly effect yes do you

00:34:05,400 --> 00:34:09,149
know what is butterfly effect yeah just

00:34:07,770 --> 00:34:11,580
the effect that I went through with

00:34:09,149 --> 00:34:13,740
Alaska Airlines which is a butterfly

00:34:11,580 --> 00:34:16,409
effect right one event leading to

00:34:13,740 --> 00:34:18,599
another and in industry it's also called

00:34:16,409 --> 00:34:20,010
as a thundering herd effect where you

00:34:18,599 --> 00:34:21,629
have this cattle running against you

00:34:20,010 --> 00:34:24,179
right or running running in front of you

00:34:21,629 --> 00:34:25,169
because something triggered an event you

00:34:24,179 --> 00:34:28,379
know that's the butterfly effect

00:34:25,169 --> 00:34:29,879
well-said so again coming to the

00:34:28,379 --> 00:34:31,649
definition of the butterfly effect it's

00:34:29,879 --> 00:34:34,349
basically a butterfly flying somewhere

00:34:31,649 --> 00:34:36,540
in the press'll area the flutter of the

00:34:34,349 --> 00:34:38,190
wings of butterfly can lead to

00:34:36,540 --> 00:34:40,260
catastrophic effects somewhere in the

00:34:38,190 --> 00:34:43,800
Texas area so that's a theory

00:34:40,260 --> 00:34:45,720
so applying that theory here typically

00:34:43,800 --> 00:34:46,950
let's say there is a micro service or an

00:34:45,720 --> 00:34:48,540
application deployed in the Cloud

00:34:46,950 --> 00:34:50,130
Foundry with micro services here right

00:34:48,540 --> 00:34:52,919
there's a front ending application

00:34:50,130 --> 00:34:55,560
called web app which has a UI and it has

00:34:52,919 --> 00:34:57,720
it depends on service one and service

00:34:55,560 --> 00:35:00,030
one in turn is dependent on database and

00:34:57,720 --> 00:35:01,500
service one is also calling service two

00:35:00,030 --> 00:35:07,290
and service two in turn is calling third

00:35:01,500 --> 00:35:09,210
party now in this case what happens in

00:35:07,290 --> 00:35:12,090
this case what happens if the third

00:35:09,210 --> 00:35:14,310
party application starts behaving so the

00:35:12,090 --> 00:35:15,990
service two would not get the response

00:35:14,310 --> 00:35:17,760
from the third party right now what

00:35:15,990 --> 00:35:19,860
happens if this what happens to the

00:35:17,760 --> 00:35:21,720
service one that is dependent on service

00:35:19,860 --> 00:35:23,640
2 which is in turn dependent on third

00:35:21,720 --> 00:35:25,860
party so there is a cascading there is a

00:35:23,640 --> 00:35:27,540
time or that you can clearly see in the

00:35:25,860 --> 00:35:30,150
service 1 and what happens if the

00:35:27,540 --> 00:35:33,840
database connectivity from service 1

00:35:30,150 --> 00:35:35,250
goes down right so all these 3 put

00:35:33,840 --> 00:35:37,710
together is going to create an

00:35:35,250 --> 00:35:39,720
unfavorable behavior at the UI level and

00:35:37,710 --> 00:35:42,390
in turn is going to create a customer

00:35:39,720 --> 00:35:45,810
impact or a your UI issue at the

00:35:42,390 --> 00:35:47,010
client-side so Corona so just for these

00:35:45,810 --> 00:35:49,350
scenarios you're talking about

00:35:47,010 --> 00:35:51,840
specifically don't we have something

00:35:49,350 --> 00:35:53,790
like a circuit breaker that can help you

00:35:51,840 --> 00:35:55,650
out here great great question so circuit

00:35:53,790 --> 00:35:57,150
breaker you are going to configure

00:35:55,650 --> 00:35:58,590
circuit breaker let's say if it's a

00:35:57,150 --> 00:36:00,660
spring application you can leverage

00:35:58,590 --> 00:36:03,210
spring cloud service circuit breaker

00:36:00,660 --> 00:36:06,030
here and the web application in order to

00:36:03,210 --> 00:36:08,220
minimize the UI impact it can call the

00:36:06,030 --> 00:36:10,410
circuit breaker and fall back into the

00:36:08,220 --> 00:36:12,720
other service that this application is

00:36:10,410 --> 00:36:15,080
configured with but having said that

00:36:12,720 --> 00:36:17,490
what we are trying to say is monarch is

00:36:15,080 --> 00:36:20,640
creating a job for the circuit breaker

00:36:17,490 --> 00:36:23,400
it is giving you a chance to verify if

00:36:20,640 --> 00:36:24,840
circuit breaker is working as you know

00:36:23,400 --> 00:36:26,640
as you have programmed or not right as

00:36:24,840 --> 00:36:28,470
you have configured or not so that's the

00:36:26,640 --> 00:36:31,050
you know one one way like you know

00:36:28,470 --> 00:36:33,840
moaner can give you rings and testing

00:36:31,050 --> 00:36:37,230
all this kind of latency and also you

00:36:33,840 --> 00:36:39,840
know the issues within your app for the

00:36:37,230 --> 00:36:41,910
next demo I am going to talk about a

00:36:39,840 --> 00:36:44,070
fortune UI application it's an open

00:36:41,910 --> 00:36:46,020
source application and back to with a

00:36:44,070 --> 00:36:48,360
fortune service it's a micro service

00:36:46,020 --> 00:36:49,590
here and fortune service is back to with

00:36:48,360 --> 00:36:53,340
my sequel database

00:36:49,590 --> 00:36:55,800
so the fortune service is pulling a

00:36:53,340 --> 00:36:58,650
random fortune event from my sequel

00:36:55,800 --> 00:37:00,570
database and fortune UI is talking to

00:36:58,650 --> 00:37:03,540
Fortune Service to display whatever is a

00:37:00,570 --> 00:37:06,390
random fortune you know string that is

00:37:03,540 --> 00:37:09,540
past the UI now in this case what

00:37:06,390 --> 00:37:11,130
happens if the database if there is a

00:37:09,540 --> 00:37:12,840
latency that you have introduced into

00:37:11,130 --> 00:37:15,300
fortune service and my sequel database

00:37:12,840 --> 00:37:17,280
what happens if you have crashed

00:37:15,300 --> 00:37:18,060
fortunes service if you are killing the

00:37:17,280 --> 00:37:19,860
service itself

00:37:18,060 --> 00:37:22,620
how is a UI of watchin UI going to

00:37:19,860 --> 00:37:24,540
behave now what happens if you're

00:37:22,620 --> 00:37:26,190
blocking so there was a latency and now

00:37:24,540 --> 00:37:28,050
you're blocking the service itself so

00:37:26,190 --> 00:37:30,090
fortunes that fortune service can no

00:37:28,050 --> 00:37:33,110
more talk to the my sequel database in

00:37:30,090 --> 00:37:35,190
all such scenarios you have fortune UI

00:37:33,110 --> 00:37:38,010
configured with historic circuit breaker

00:37:35,190 --> 00:37:40,440
the circuit breaker has to fall back on

00:37:38,010 --> 00:37:42,420
to a you know alternative service in

00:37:40,440 --> 00:37:44,970
order to ensure that the UI is not

00:37:42,420 --> 00:37:47,160
impacted when these kind of attacks are

00:37:44,970 --> 00:37:50,220
happening on the dependent or down

00:37:47,160 --> 00:37:53,220
services so let's get into a live demo

00:37:50,220 --> 00:38:05,040
again another so I'm going to show you a

00:37:53,220 --> 00:38:10,860
web application fortune UI you can see

00:38:05,040 --> 00:38:12,300
the screen right so okay oh yeah you

00:38:10,860 --> 00:38:13,890
have to kind of guy anyway right so

00:38:12,300 --> 00:38:15,240
while he is connecting back to the VPN

00:38:13,890 --> 00:38:17,100
because this part of the demo requires

00:38:15,240 --> 00:38:20,760
the VPN I guess I'll be a storyteller

00:38:17,100 --> 00:38:23,100
until not happens everybody here has

00:38:20,760 --> 00:38:25,050
ever been in a fire drill not a fire

00:38:23,100 --> 00:38:26,520
drill let fire drill about your boss

00:38:25,050 --> 00:38:28,200
calls you and said I get this done right

00:38:26,520 --> 00:38:30,480
not that I'm talking about an actual

00:38:28,200 --> 00:38:31,500
fire drill who's been on an actual fire

00:38:30,480 --> 00:38:36,030
drill at work

00:38:31,500 --> 00:38:39,470
do you guys know why we do it practice

00:38:36,030 --> 00:38:39,470
why do you think we need practice

00:38:39,660 --> 00:38:45,330
bingo yes so if you think about a fire

00:38:42,750 --> 00:38:47,040
drill what's happening is you have a

00:38:45,330 --> 00:38:49,050
system for which you have a steady state

00:38:47,040 --> 00:38:51,510
and there's a known recovery path for

00:38:49,050 --> 00:38:52,920
that system and what happens in the fire

00:38:51,510 --> 00:38:55,440
drill is you're trying to validate the

00:38:52,920 --> 00:38:57,000
known recovery path because when real

00:38:55,440 --> 00:38:59,340
incident happens you don't want to fail

00:38:57,000 --> 00:39:01,350
right so the practice drill here is to

00:38:59,340 --> 00:39:03,360
validate that system's recovery path so

00:39:01,350 --> 00:39:05,400
you can get all your clients outside the

00:39:03,360 --> 00:39:07,590
building safely and securely that's the

00:39:05,400 --> 00:39:09,360
whole point of a fire drill that's very

00:39:07,590 --> 00:39:11,250
much ready to the analogy of chaos

00:39:09,360 --> 00:39:14,220
engineering because you have a system

00:39:11,250 --> 00:39:15,660
every system has an own recovery pad you

00:39:14,220 --> 00:39:17,550
make assumptions if you don't validate

00:39:15,660 --> 00:39:20,910
the known recovery pads you are bound to

00:39:17,550 --> 00:39:22,910
fail so the next story I had not really

00:39:20,910 --> 00:39:25,590
a story but just came to my mind

00:39:22,910 --> 00:39:27,480
you have another story I don't have

00:39:25,590 --> 00:39:30,110
another story but we'll take a question

00:39:27,480 --> 00:39:30,110
okay

00:39:52,670 --> 00:40:01,320
right ya know so there's a graduation

00:39:59,400 --> 00:40:02,490
pad to everything just like where you go

00:40:01,320 --> 00:40:04,770
through your grades to get to high

00:40:02,490 --> 00:40:06,270
school to get to college so you you

00:40:04,770 --> 00:40:07,290
don't want to go start off targeting

00:40:06,270 --> 00:40:08,910
your business critical apps in

00:40:07,290 --> 00:40:10,260
production and take them down because

00:40:08,910 --> 00:40:14,550
your CEO or somebody's gonna call in

00:40:10,260 --> 00:40:16,140
like WTF again right so if you think

00:40:14,550 --> 00:40:18,360
about Netflix this concept of chaos

00:40:16,140 --> 00:40:20,040
engineering they were nicely positioned

00:40:18,360 --> 00:40:21,360
to be that company where they started

00:40:20,040 --> 00:40:23,520
off these in a lower enrollment

00:40:21,360 --> 00:40:25,140
graduated and today they run their

00:40:23,520 --> 00:40:26,910
attacks live in production in Amazon's

00:40:25,140 --> 00:40:28,530
infrastructure they take an AC down if

00:40:26,910 --> 00:40:30,090
you don't know they take an actual AC

00:40:28,530 --> 00:40:32,340
down and you know know the impact

00:40:30,090 --> 00:40:34,230
because it's happening during live hours

00:40:32,340 --> 00:40:35,610
so there's a graduation path and that's

00:40:34,230 --> 00:40:37,080
what the principles of chaos enjoying

00:40:35,610 --> 00:40:39,600
advocated right we're nowhere close to

00:40:37,080 --> 00:40:41,160
that in fact we're not even ready to

00:40:39,600 --> 00:40:43,980
touch our non prada environments because

00:40:41,160 --> 00:40:45,300
its production to us so anything that is

00:40:43,980 --> 00:40:47,820
trying to go through this graduation

00:40:45,300 --> 00:40:49,680
path we have to do it in cycles and not

00:40:47,820 --> 00:40:52,440
just a spur to go back so right now our

00:40:49,680 --> 00:40:54,210
focus is a specific set of apps in non

00:40:52,440 --> 00:40:56,430
production in a control in or on rent

00:40:54,210 --> 00:40:58,020
and then taking it further because you

00:40:56,430 --> 00:40:59,730
want to understand the blast radius you

00:40:58,020 --> 00:41:01,560
want to make sure the teams that are

00:40:59,730 --> 00:41:04,950
interacting with has specific Ron books

00:41:01,560 --> 00:41:06,630
to know the recovery pads can be getting

00:41:04,950 --> 00:41:08,940
back to the demo here so we have two

00:41:06,630 --> 00:41:11,220
applications the fortune service is a

00:41:08,940 --> 00:41:13,530
micro service and fortune UI is talking

00:41:11,220 --> 00:41:17,760
to the fortune service and let's look at

00:41:13,530 --> 00:41:20,220
the services so I'm using CF CLI and

00:41:17,760 --> 00:41:23,250
connecting to my org and space and you

00:41:20,220 --> 00:41:25,800
have circuit breaker configure a bound

00:41:23,250 --> 00:41:27,690
to the app watch in UI here and fortune

00:41:25,800 --> 00:41:30,150
database of type my sequel is bound to

00:41:27,690 --> 00:41:33,000
fortune service and service registry is

00:41:30,150 --> 00:41:35,100
a service discovery so all the apps that

00:41:33,000 --> 00:41:36,480
you have inside the space are bound to

00:41:35,100 --> 00:41:40,500
this service registry so that they can

00:41:36,480 --> 00:41:43,050
talk to each other now let me open this

00:41:40,500 --> 00:41:46,620
UI so I copy this URL and then I go in

00:41:43,050 --> 00:41:48,339
here and you can see here you have

00:41:46,620 --> 00:41:50,880
random fortunes

00:41:48,339 --> 00:41:55,539
you know a one-liner strange that keeps

00:41:50,880 --> 00:41:56,950
showing up here and it's pretty

00:41:55,539 --> 00:41:58,630
responsive like you know you don't see

00:41:56,950 --> 00:42:02,289
an issue here right so now let's perform

00:41:58,630 --> 00:42:04,420
a Kaos attack on this application I like

00:42:02,289 --> 00:42:08,880
the last one love candy I don't know if

00:42:04,420 --> 00:42:08,880
you saw that it's random

00:42:11,789 --> 00:42:18,009
so monarchy has been open source so you

00:42:14,890 --> 00:42:22,980
need to it's a pipe it's based on Python

00:42:18,009 --> 00:42:22,980
so I need to import the required library

00:42:34,510 --> 00:42:40,180
so I need to config a hammer file here

00:42:37,990 --> 00:42:41,410
because I need to provide to the monarch

00:42:40,180 --> 00:42:43,990
like you know which environment I'm

00:42:41,410 --> 00:42:49,630
connecting to which cloud form retarget

00:42:43,990 --> 00:42:51,340
I'm connecting to so we have a VPN you

00:42:49,630 --> 00:42:55,440
know a foundation in our own environment

00:42:51,340 --> 00:42:55,440
and I have to connect it for every peer

00:42:57,000 --> 00:43:00,420
valid argument

00:43:11,520 --> 00:43:14,719
[Music]

00:43:16,960 --> 00:43:29,320
the school config uh you haven't why a

00:43:21,710 --> 00:43:29,320
is that it yeah yeah yeah hmm yeah

00:43:29,740 --> 00:43:35,320
[Music]

00:43:31,730 --> 00:43:35,320
now there's an extra

00:43:52,720 --> 00:43:58,240
and config so let me go in there

00:44:29,760 --> 00:44:35,320
okay so we have this now and then the

00:44:34,000 --> 00:44:37,660
first thing that we are going to do is

00:44:35,320 --> 00:44:39,550
we have to discover where the fault

00:44:37,660 --> 00:44:41,500
where the swatch and services fit in the

00:44:39,550 --> 00:44:44,080
cluster so all I need to do is provide

00:44:41,500 --> 00:44:46,960
an orc name and a space name and the

00:44:44,080 --> 00:44:48,520
application name so Abdur discover is

00:44:46,960 --> 00:44:50,710
going to discover where my application

00:44:48,520 --> 00:44:52,750
is running inside a cluster of 100

00:44:50,710 --> 00:44:56,380
virtual machines once I have the app

00:44:52,750 --> 00:44:58,240
object loaded it takes a couple of

00:44:56,380 --> 00:45:04,780
seconds to identify where the app app is

00:44:58,240 --> 00:45:07,060
running the first attack that we're

00:45:04,780 --> 00:45:08,500
going to do while this is running is we

00:45:07,060 --> 00:45:14,160
are going to block the traffic from

00:45:08,500 --> 00:45:14,160
fortune service to the MySQL database

00:45:21,510 --> 00:45:27,440
yeah they're still taking baths it's

00:45:24,270 --> 00:45:27,440
taking some time to discover yeah

00:45:30,289 --> 00:45:36,359
okay so we got so the app has been

00:45:33,420 --> 00:45:40,650
discovered now I'm going to block so

00:45:36,359 --> 00:45:43,549
this is fortune C B so this is a my

00:45:40,650 --> 00:45:45,869
sequel database that I'm trying to block

00:45:43,549 --> 00:45:54,690
anybody has an idea of what's gonna

00:45:45,869 --> 00:45:56,549
happen when you block yes all back so

00:45:54,690 --> 00:45:58,079
the circuit breaker has been kicked a

00:45:56,549 --> 00:45:59,940
little kicked off and then you know you

00:45:58,079 --> 00:46:01,890
can see your future is unclear so this

00:45:59,940 --> 00:46:04,019
is coming from the circuit breaker so we

00:46:01,890 --> 00:46:05,880
didn't want it to impact the UI so some

00:46:04,019 --> 00:46:07,829
random string is being it's not random

00:46:05,880 --> 00:46:09,450
it's a static string which is your

00:46:07,829 --> 00:46:13,079
future is not clear has been programmed

00:46:09,450 --> 00:46:14,910
by your broker to show up here so so

00:46:13,079 --> 00:46:16,769
that's what is blocking the service so

00:46:14,910 --> 00:46:18,809
we have blocked micro service to the my

00:46:16,769 --> 00:46:20,089
sequel database so all we need to do now

00:46:18,809 --> 00:46:25,609
is like you know if we have to rollback

00:46:20,089 --> 00:46:25,609
we can unblock services

00:46:38,310 --> 00:46:43,110
take all right this is done so now again

00:46:40,590 --> 00:46:44,940
when you unblock you will see that you

00:46:43,110 --> 00:46:47,340
know everything is back into action so

00:46:44,940 --> 00:46:48,900
one thing I want you to note here is the

00:46:47,340 --> 00:46:51,120
response coming from the Foreign Service

00:46:48,900 --> 00:46:54,600
is pretty quick now I am going to inject

00:46:51,120 --> 00:46:57,080
a latency into the into the fortune

00:46:54,600 --> 00:47:01,110
service so for that I'm going to use

00:46:57,080 --> 00:47:03,030
manipulate traffic so what do you guys

00:47:01,110 --> 00:47:10,830
think will happen when you do latency

00:47:03,030 --> 00:47:12,780
injection anybody timeout so I've given

00:47:10,830 --> 00:47:15,150
like 100 milliseconds of latency for now

00:47:12,780 --> 00:47:17,550
with a standard deviation of 10 so it's

00:47:15,150 --> 00:47:19,440
basically a 10 percentage of the latency

00:47:17,550 --> 00:47:22,260
so it can be 10 plus or minus 10

00:47:19,440 --> 00:47:24,860
milliseconds so when I inject when I

00:47:22,260 --> 00:47:30,060
start initiated this manipulate Network

00:47:24,860 --> 00:47:35,780
you can see that the it takes time there

00:47:30,060 --> 00:47:41,550
is a pause yeah I think I can increase a

00:47:35,780 --> 00:47:44,900
timeout to more it works but it's pretty

00:47:41,550 --> 00:47:48,270
obvious that it's taking time yeah so

00:47:44,900 --> 00:47:49,980
you have to unmanipulated are here so

00:47:48,270 --> 00:47:53,120
you attack yeah so that's a improvement

00:47:49,980 --> 00:47:53,120
that we are trying to make again

00:47:55,930 --> 00:48:04,410
so let's introduce let's inject like 400

00:47:58,720 --> 00:48:04,410
milliseconds of latency to the same app

00:48:10,079 --> 00:48:16,720
yeah so this is running now you can see

00:48:14,349 --> 00:48:18,250
there's a brief pause so there is a

00:48:16,720 --> 00:48:19,539
timeout and the service register picked

00:48:18,250 --> 00:48:22,150
it up and sometimes like you know there

00:48:19,539 --> 00:48:24,010
is no timeout so you can see like you

00:48:22,150 --> 00:48:26,349
know there's a brief pause of about 400

00:48:24,010 --> 00:48:30,210
milliseconds for the message to come up

00:48:26,349 --> 00:48:32,619
so now I'm gonna unmanipulated then

00:48:30,210 --> 00:48:34,750
finally do one perform one more test

00:48:32,619 --> 00:48:37,680
which is crashing the HAP instance which

00:48:34,750 --> 00:48:39,880
is fortunate service here so for that

00:48:37,680 --> 00:48:42,099
idea is what's gonna happen here when

00:48:39,880 --> 00:48:44,109
you crash the instance karoon hinted

00:48:42,099 --> 00:48:48,670
about it earlier when you did a similar

00:48:44,109 --> 00:48:52,750
attack correct that's the beauty of

00:48:48,670 --> 00:48:54,700
Cloud Foundry so appealing yeah so when

00:48:52,750 --> 00:48:57,160
you crash this instance the Cloud

00:48:54,700 --> 00:49:00,819
Foundry will bring back a new instance

00:48:57,160 --> 00:49:04,839
in its place but you can you can also

00:49:00,819 --> 00:49:08,589
check CF events on for shown different

00:49:04,839 --> 00:49:12,420
service on the left side you can see the

00:49:08,589 --> 00:49:17,170
crash events pretty much clear here and

00:49:12,420 --> 00:49:19,720
then if you can see the circuit breaker

00:49:17,170 --> 00:49:21,760
is coming into action again and after a

00:49:19,720 --> 00:49:25,859
few minutes a few seconds like you know

00:49:21,760 --> 00:49:28,210
once the app is back we can check the

00:49:25,859 --> 00:49:31,059
instance count of the fortunes service

00:49:28,210 --> 00:49:33,549
now because California would have

00:49:31,059 --> 00:49:35,760
brought back a new app instance in its

00:49:33,549 --> 00:49:35,760
place

00:49:36,820 --> 00:49:45,770
so you've got 1 out of 1 to maintain the

00:49:39,800 --> 00:49:47,690
desired state ok so it started working

00:49:45,770 --> 00:49:51,260
again so that's these are some of the

00:49:47,690 --> 00:49:57,790
attacks that you can perform on your any

00:49:51,260 --> 00:49:57,790
target application so let's move on to

00:50:03,460 --> 00:50:08,150
we just saw like you know how to block a

00:50:06,380 --> 00:50:09,740
service how to introduce latency and how

00:50:08,150 --> 00:50:11,690
history circuit breaker will play you

00:50:09,740 --> 00:50:13,730
know so some of the limitations and

00:50:11,690 --> 00:50:15,530
improvements and future enhancements

00:50:13,730 --> 00:50:18,080
that we are planning is mode out right

00:50:15,530 --> 00:50:20,480
now can attack one cluster at a time so

00:50:18,080 --> 00:50:22,640
imagine you have applications deployed

00:50:20,480 --> 00:50:24,310
in multi foundation so you have multiple

00:50:22,640 --> 00:50:26,780
clusters and you have application the

00:50:24,310 --> 00:50:28,580
spread across multiple clusters so

00:50:26,780 --> 00:50:31,070
monarch at any point of time can only

00:50:28,580 --> 00:50:33,170
attack one application in one cluster so

00:50:31,070 --> 00:50:35,060
that's a particular limitation that we

00:50:33,170 --> 00:50:37,100
are trying to overcome and we wanted to

00:50:35,060 --> 00:50:39,770
make some more enhancements in that and

00:50:37,100 --> 00:50:41,150
improvement areas and turbulence + + and

00:50:39,770 --> 00:50:43,220
monarch are two different applications

00:50:41,150 --> 00:50:44,630
or two different toolkits right now for

00:50:43,220 --> 00:50:46,430
performing infrastructure and the

00:50:44,630 --> 00:50:49,100
application so there is a possibility of

00:50:46,430 --> 00:50:51,470
merge into one solution most likely that

00:50:49,100 --> 00:50:54,020
is going to happen in next version of

00:50:51,470 --> 00:50:56,450
monarch and that there are evolving

00:50:54,020 --> 00:50:58,820
design patterns like sto and Envoy so

00:50:56,450 --> 00:51:01,910
there is a so envoy which is a sidecar

00:50:58,820 --> 00:51:04,340
container - - every application instance

00:51:01,910 --> 00:51:07,550
can also have this kind of injection

00:51:04,340 --> 00:51:09,230
attacks that you can program and which

00:51:07,550 --> 00:51:11,390
can also perform simulation tests like

00:51:09,230 --> 00:51:12,950
you know what monarch is doing today so

00:51:11,390 --> 00:51:14,540
we wanted to see like you know how we

00:51:12,950 --> 00:51:17,480
can converge the efforts that we are

00:51:14,540 --> 00:51:20,150
putting in monarch and how the Envoy can

00:51:17,480 --> 00:51:22,310
be leveraged or is there any possibility

00:51:20,150 --> 00:51:24,110
of these two working together going

00:51:22,310 --> 00:51:26,240
forward so those are three things that

00:51:24,110 --> 00:51:28,880
we wanted to work on do you want to talk

00:51:26,240 --> 00:51:32,620
about game days oh sure um let me take

00:51:28,880 --> 00:51:35,290
the so we're towards the end here

00:51:32,620 --> 00:51:37,700
anybody heard about game days here so

00:51:35,290 --> 00:51:39,740
yeah game days is essentially an

00:51:37,700 --> 00:51:42,140
industry standard for anybody doing

00:51:39,740 --> 00:51:44,750
chaos engineering where you get your

00:51:42,140 --> 00:51:47,300
teams together and you run targeted

00:51:44,750 --> 00:51:49,450
attacks in a confined environment and

00:51:47,300 --> 00:51:51,460
you validate your run books right so

00:51:49,450 --> 00:51:53,440
we're trying to share game days for our

00:51:51,460 --> 00:51:56,890
app teams in fact we completed our first

00:51:53,440 --> 00:51:58,780
game day with a team that does coverage

00:51:56,890 --> 00:52:00,460
maps there if you're a customer of

00:51:58,780 --> 00:52:00,820
t-mobile there is the personal coverage

00:52:00,460 --> 00:52:02,460
checker

00:52:00,820 --> 00:52:05,770
where you can see the t-mobile coverage

00:52:02,460 --> 00:52:07,630
and we did an attack on their

00:52:05,770 --> 00:52:08,950
applications running in NP nonprofit

00:52:07,630 --> 00:52:10,630
environment not put prod

00:52:08,950 --> 00:52:12,839
like I mentioned again you got to start

00:52:10,630 --> 00:52:16,180
off in a smaller in Iran right so

00:52:12,839 --> 00:52:17,619
forging ahead six months ago when we did

00:52:16,180 --> 00:52:18,849
our first talk in chaos engineering we

00:52:17,619 --> 00:52:21,579
were exploring the capabilities and

00:52:18,849 --> 00:52:23,680
tools here we are today we're we're

00:52:21,579 --> 00:52:25,119
actually doing game days and we want to

00:52:23,680 --> 00:52:27,400
continue in this momentum of running

00:52:25,119 --> 00:52:28,960
more game based arab teams so if

00:52:27,400 --> 00:52:30,970
everything holds together you will see

00:52:28,960 --> 00:52:36,130
us back at spring one to talk about our

00:52:30,970 --> 00:52:38,619
advancements with Kaos engineering so so

00:52:36,130 --> 00:52:40,390
this is the last slide so just to come

00:52:38,619 --> 00:52:43,960
sum up like you know clearly we are

00:52:40,390 --> 00:52:47,940
moving from the analogy of Joker here

00:52:43,960 --> 00:52:50,050
when he says chaos is fair in 2008 to

00:52:47,940 --> 00:52:52,990
what is it today in Game of Thrones

00:52:50,050 --> 00:52:55,930
where the later says chaos isn't a pit

00:52:52,990 --> 00:52:57,760
chaos is a ladder so every person wants

00:52:55,930 --> 00:53:00,760
to go up the ladder but still they

00:52:57,760 --> 00:53:02,829
falter or some people do not want to

00:53:00,760 --> 00:53:05,349
grow up the ladder that's because they

00:53:02,829 --> 00:53:07,300
are still accustomed with the group

00:53:05,349 --> 00:53:10,390
rooted it's so rooted that they wanted

00:53:07,300 --> 00:53:12,700
to stick to their own beliefs or some

00:53:10,390 --> 00:53:14,170
kind of you know belief in the God that

00:53:12,700 --> 00:53:17,440
you know everything would work so well

00:53:14,170 --> 00:53:19,569
so what we are trying to say is make

00:53:17,440 --> 00:53:21,220
sure that you know chaos is you want it

00:53:19,569 --> 00:53:22,810
you have to decide whether you want to

00:53:21,220 --> 00:53:25,390
stay in a pit or you want to go up the

00:53:22,810 --> 00:53:28,210
ladder so that's where this thing comes

00:53:25,390 --> 00:53:30,640
in yeah nicely said so before we wrap up

00:53:28,210 --> 00:53:32,980
9 o'clock tomorrow keynote will be back

00:53:30,640 --> 00:53:34,780
on stage there is another exciting demo

00:53:32,980 --> 00:53:37,119
which won't be a live demo because it's

00:53:34,780 --> 00:53:39,250
keynote we want to play it safe the

00:53:37,119 --> 00:53:40,960
keynote no validate our recovery pad to

00:53:39,250 --> 00:53:44,650
it so we're just gonna like do a la

00:53:40,960 --> 00:53:47,380
carte a demo but similar content but in

00:53:44,650 --> 00:53:49,060
a more condensed version nicer format

00:53:47,380 --> 00:53:51,339
than this I won't say this is not nice

00:53:49,060 --> 00:53:52,750
but you know something new at 9 o'clock

00:53:51,339 --> 00:53:54,310
it's only a 10-minute talk so I

00:53:52,750 --> 00:53:57,660
encourage everybody to come their cheer

00:53:54,310 --> 00:53:57,660
for us thank you

00:54:01,680 --> 00:54:07,290
questions we can take questions yes

00:54:09,720 --> 00:54:19,240
lineage to Infante actually not I'm

00:54:13,330 --> 00:54:21,780
curious what it is what are the

00:54:19,240 --> 00:54:21,780
questions do we have

00:54:23,900 --> 00:54:26,589
gotcha

00:54:28,060 --> 00:54:31,920
this type of chaos

00:54:43,260 --> 00:54:48,010
sure the monarch is I think we have

00:54:46,270 --> 00:54:50,530
scoped it already in the next release

00:54:48,010 --> 00:54:53,440
where we wanted to inject security

00:54:50,530 --> 00:54:55,420
configuration into the app level so when

00:54:53,440 --> 00:54:57,400
for a given runtime application we

00:54:55,420 --> 00:54:58,930
wanted to inject a specific

00:54:57,400 --> 00:55:00,580
configuration and see how your

00:54:58,930 --> 00:55:09,360
application behaves yeah this is pretty

00:55:00,580 --> 00:55:13,500
much there anybody else questions okay

00:55:09,360 --> 00:55:13,500
thank you guys thank you

00:55:13,650 --> 00:55:16,519

YouTube URL: https://www.youtube.com/watch?v=oRHW6blkphk


