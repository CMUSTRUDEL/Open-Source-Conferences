Title: The Essential Getting Started Guide to Cloud Foundry - Tyler Poland & Tyler Bird, Stark & Wayne
Publication date: 2019-04-11
Playlist: Cloud Foundry Summit NA 2019 - Philadelphia
Description: 
	The Essential Getting Started Guide to Cloud Foundry - Tyler Poland & Tyler Bird, Stark & Wayne, LLC.

Today’s user expects a self-service, always-on, plug-and-play, ever-evolving experience. That’s a-lot of hyphens. Cloud Foundry is based on the premise of making Application Development agile and Infrastructure flexible in order for modern enterprise to meet dynamic business needs.

We’ll guide you through the essential, need-to-know basics for an owner, operator, or developer who is new to Cloud Foundry. In thirty minutes, we can give you the keys to enable you to become a core part of the digital transformation within your organization.

About Tyler Bird
Tyler Bird is a Cloud Engineer at Stark & Wayne. He has 20 years of experience in areas such as app development and operations of platforms. At Stark & Wayne, he led the creation of the Introduction to Cloud Foundry course on www.edx.org. He also authored and presented the BOSH Operator course CF Summit 2018.

At home, he loves playing board games with wife and friends, and digging in the digital depths of Minecraft with his seven-year-old son.

About Tyler Poland
Tyler Poland is a Technical Director at Stark & Wayne. He has almost 20 years experience in Information Technology which is heavily influenced by more than decade focusing on Cloud Operations, Application Support, and Database Technologies. Tyler is a co-organizer and regular speaker of the @BuffaloData meetup group.

Tyler lives with his family just outside Niagara Falls, NY. When not working with technology, he can often be found tinkering on home improvement projects or traipsing through the wilds of Western New York or Southern Ontario.

https://www.cloudfoundry.org
Captions: 
	00:00:00,030 --> 00:00:03,870
welcome to the central getting started

00:00:02,100 --> 00:00:05,400
guide to Cloud Foundry thank you for

00:00:03,870 --> 00:00:06,560
joining us this morning let's get

00:00:05,400 --> 00:00:09,450
started

00:00:06,560 --> 00:00:11,309
I'm Tyler Poland I'm a technical

00:00:09,450 --> 00:00:13,650
director at Stockman Wayne I helped to

00:00:11,309 --> 00:00:16,440
ensure customer success and by leading

00:00:13,650 --> 00:00:19,410
our cloud engineers like Tyler here yeah

00:00:16,440 --> 00:00:22,170
and I'm Tyler bird as a cloud engineer I

00:00:19,410 --> 00:00:24,510
help to enable teams to build and

00:00:22,170 --> 00:00:27,029
maintain cloud foundries all across the

00:00:24,510 --> 00:00:29,310
nation I'm also part of a larger team at

00:00:27,029 --> 00:00:32,399
Stark and Wayne that does cloud native

00:00:29,310 --> 00:00:33,809
enablement all around the world today

00:00:32,399 --> 00:00:36,210
we're going to give you a broad overview

00:00:33,809 --> 00:00:39,059
on getting started with the exciting

00:00:36,210 --> 00:00:41,070
world of cloud foundry each of these

00:00:39,059 --> 00:00:43,890
topics will be covered in more depth

00:00:41,070 --> 00:00:45,420
throughout the conference for the moment

00:00:43,890 --> 00:00:47,309
our goal is to give you a template that

00:00:45,420 --> 00:00:48,800
will help you make sense of all that's

00:00:47,309 --> 00:00:51,539
going on these days in cloud foundry

00:00:48,800 --> 00:00:53,100
we're going to cover a lot of ground but

00:00:51,539 --> 00:00:54,930
we will try to leave some room at the

00:00:53,100 --> 00:00:57,420
end for some questions if you don't

00:00:54,930 --> 00:00:59,280
catch us now follow us on Twitter catch

00:00:57,420 --> 00:01:01,710
us in the hallway or track us down at

00:00:59,280 --> 00:01:09,720
booth before before what

00:01:01,710 --> 00:01:11,010
no no booth before ah bazinga so ok we'd

00:01:09,720 --> 00:01:14,540
like to take you on a journey through

00:01:11,010 --> 00:01:18,950
the eyes of our three main characters

00:01:14,540 --> 00:01:21,210
the developer operator and owner and

00:01:18,950 --> 00:01:23,939
we'll point out the benefits of each of

00:01:21,210 --> 00:01:27,689
them get from using Cloud Foundry so

00:01:23,939 --> 00:01:30,720
let's set the scene it's the 24th

00:01:27,689 --> 00:01:31,740
century where the explorers from the

00:01:30,720 --> 00:01:36,659
planet Earth

00:01:31,740 --> 00:01:41,610
roam the known and unknown galaxies to

00:01:36,659 --> 00:01:44,450
seek out new life wait Tyler and what

00:01:41,610 --> 00:01:48,880
does this have to do with Cloud Foundry

00:01:44,450 --> 00:01:51,490
you'll see ok

00:01:48,880 --> 00:01:53,420
[Music]

00:01:51,490 --> 00:01:58,970
you guys came for a talk about

00:01:53,420 --> 00:02:00,200
enterprise software right so how about

00:01:58,970 --> 00:02:01,970
we have a little fun and talk about

00:02:00,200 --> 00:02:06,640
Cloud Foundry for the enterprise right

00:02:01,970 --> 00:02:06,640
oh no what have you done to the slides

00:02:08,649 --> 00:02:14,840
so far our developer let's use Wesley

00:02:12,800 --> 00:02:17,600
Crusher right he's just getting started

00:02:14,840 --> 00:02:20,900
and he shows some promise you know it

00:02:17,600 --> 00:02:21,400
just needs little experience okay I get

00:02:20,900 --> 00:02:23,980
it

00:02:21,400 --> 00:02:26,150
how about we use Jordie is an operator

00:02:23,980 --> 00:02:30,380
basically he's got to keep things

00:02:26,150 --> 00:02:32,330
running for everyone okay sure and you

00:02:30,380 --> 00:02:33,830
know he has to do it while the entire

00:02:32,330 --> 00:02:36,940
ship's about to explode

00:02:33,830 --> 00:02:39,920
so who would be our project donor

00:02:36,940 --> 00:02:42,200
probably commander Riker because he

00:02:39,920 --> 00:02:44,360
coordinating across all departments of

00:02:42,200 --> 00:02:47,210
the ship and he has an awesome approach

00:02:44,360 --> 00:02:49,360
to sitting in chairs it's true that's

00:02:47,210 --> 00:02:49,360
true

00:02:49,420 --> 00:02:54,520
before we get started though we've got a

00:02:51,470 --> 00:02:59,030
quick way to show you on which slides

00:02:54,520 --> 00:03:06,110
which role matters the most like the

00:02:59,030 --> 00:03:08,120
owner or an operator or developer but

00:03:06,110 --> 00:03:10,970
first let's get started about talking

00:03:08,120 --> 00:03:13,880
about a platform as a service for the

00:03:10,970 --> 00:03:15,890
developer simply put a platform as a

00:03:13,880 --> 00:03:18,580
service provides developers the ability

00:03:15,890 --> 00:03:23,090
to self provision their own applications

00:03:18,580 --> 00:03:25,010
resources and services for an operator

00:03:23,090 --> 00:03:26,660
there is no longer a need to manually

00:03:25,010 --> 00:03:28,610
provision VMs for apps and services

00:03:26,660 --> 00:03:31,480
instead they can focus on site

00:03:28,610 --> 00:03:34,070
reliability engineering improvements and

00:03:31,480 --> 00:03:35,420
the owner can sell the platform to the

00:03:34,070 --> 00:03:38,120
business because the return on

00:03:35,420 --> 00:03:39,530
investment is the savings of time of no

00:03:38,120 --> 00:03:42,290
longer having to be concerned with

00:03:39,530 --> 00:03:44,120
developing and managing a platform as

00:03:42,290 --> 00:03:48,320
well as an application faster

00:03:44,120 --> 00:03:50,390
time-to-market and so on therefore as a

00:03:48,320 --> 00:03:53,420
platform as a Service Cloud Foundry you

00:03:50,390 --> 00:03:55,340
already helps everyone out as that sinks

00:03:53,420 --> 00:03:58,850
in a little let's look at it with an

00:03:55,340 --> 00:04:01,220
illustration in the traditional model

00:03:58,850 --> 00:04:02,750
our development and operation teams both

00:04:01,220 --> 00:04:03,260
need to be concerned with the entire

00:04:02,750 --> 00:04:05,269
stack

00:04:03,260 --> 00:04:07,370
a new application often means

00:04:05,269 --> 00:04:08,780
provisioning new systems a process which

00:04:07,370 --> 00:04:11,239
can take weeks or even months to

00:04:08,780 --> 00:04:13,519
complete scaling up an architecture also

00:04:11,239 --> 00:04:15,709
often includes the same long lead times

00:04:13,519 --> 00:04:17,799
because resources just aren't sitting

00:04:15,709 --> 00:04:22,580
around waiting to be put into service

00:04:17,799 --> 00:04:24,080
and failure on one component or multiple

00:04:22,580 --> 00:04:26,360
components in this model becomes a big

00:04:24,080 --> 00:04:29,150
concern often requiring next or same-day

00:04:26,360 --> 00:04:31,400
business support contracts from hardware

00:04:29,150 --> 00:04:34,790
vendors or significant redundancies for

00:04:31,400 --> 00:04:37,520
critical systems the operations team

00:04:34,790 --> 00:04:40,630
needs geordie along with a fistful of

00:04:37,520 --> 00:04:43,580
datas just to keep everything running

00:04:40,630 --> 00:04:46,940
and then when we talk about

00:04:43,580 --> 00:04:48,139
infrastructure as a service it it

00:04:46,940 --> 00:04:51,260
creates the architecture that allows

00:04:48,139 --> 00:04:53,330
virtualized components to be adapted to

00:04:51,260 --> 00:04:55,430
and fits the needs of a given

00:04:53,330 --> 00:04:56,990
application workloads can be shifted

00:04:55,430 --> 00:04:59,360
across the virtualization layer if a

00:04:56,990 --> 00:05:01,699
system fails and extra resources are

00:04:59,360 --> 00:05:05,539
easier to build beforehand since

00:05:01,699 --> 00:05:08,410
hardware is no longer available to be

00:05:05,539 --> 00:05:10,760
dedicated to one specific purpose

00:05:08,410 --> 00:05:12,560
developers deploying applications in

00:05:10,760 --> 00:05:14,900
this model still have to have some idea

00:05:12,560 --> 00:05:16,340
about the underlying infrastructure and

00:05:14,900 --> 00:05:18,860
how to work with the storage and other

00:05:16,340 --> 00:05:21,200
supporting services like databases the

00:05:18,860 --> 00:05:23,060
components available and the methods

00:05:21,200 --> 00:05:25,039
needed to connect to those components

00:05:23,060 --> 00:05:27,020
will be infrastructure specific

00:05:25,039 --> 00:05:28,849
preventing a lift and shift of the

00:05:27,020 --> 00:05:32,530
application to the new infrastructure

00:05:28,849 --> 00:05:32,530
and resulting in vendor lock-in

00:05:32,680 --> 00:05:37,789
operators would still have to manage

00:05:35,750 --> 00:05:40,070
their service requests and maintain the

00:05:37,789 --> 00:05:44,599
application stack manually and manage

00:05:40,070 --> 00:05:47,030
security etc a cloud native platform

00:05:44,599 --> 00:05:48,950
such as a service such as cloud foundry

00:05:47,030 --> 00:05:50,470
abstracts away the details of working

00:05:48,950 --> 00:05:52,669
with the underlying infrastructure

00:05:50,470 --> 00:05:54,620
connections to backing components like

00:05:52,669 --> 00:05:57,169
databases are provided in a standardized

00:05:54,620 --> 00:05:59,090
fashion community supports that source

00:05:57,169 --> 00:06:00,620
the application runtimes are packaged

00:05:59,090 --> 00:06:02,840
with the application to ensure that

00:06:00,620 --> 00:06:05,150
applications run the same locally as

00:06:02,840 --> 00:06:06,889
they would in production applications

00:06:05,150 --> 00:06:09,320
are deployed with manifests that tell

00:06:06,889 --> 00:06:11,300
the platform important things about the

00:06:09,320 --> 00:06:13,849
application such as what services are

00:06:11,300 --> 00:06:15,559
needed what build packs are in use how

00:06:13,849 --> 00:06:18,079
much physical storage is

00:06:15,559 --> 00:06:20,719
or how instances how many instances

00:06:18,079 --> 00:06:22,279
should be started applications can

00:06:20,719 --> 00:06:23,749
readily be ported to any cloud foundry

00:06:22,279 --> 00:06:26,179
that has been configured with the same

00:06:23,749 --> 00:06:27,679
version services and rules regardless of

00:06:26,179 --> 00:06:31,159
the infrastructure that it ultimately

00:06:27,679 --> 00:06:33,469
runs on you mean I don't have to run my

00:06:31,159 --> 00:06:35,629
Trekkie blog on my laptop anymore

00:06:33,469 --> 00:06:37,189
yep with a switch to Cloud Foundry

00:06:35,629 --> 00:06:40,689
you'll be ready for development at warp

00:06:37,189 --> 00:06:40,689
speed bazinga

00:06:41,769 --> 00:06:48,529
so the magic of Cloud Foundry is driven

00:06:45,889 --> 00:06:51,409
primarily by a few key concepts that we

00:06:48,529 --> 00:06:54,109
want to highlight here Bausch is a

00:06:51,409 --> 00:06:56,809
powerful purpose-built tool for managing

00:06:54,109 --> 00:06:59,569
the lifecycle of cloud software and

00:06:56,809 --> 00:07:01,759
cloud VMs Cloud Foundry itself is just

00:06:59,569 --> 00:07:05,269
one of the many software packages that

00:07:01,759 --> 00:07:07,009
Bosh can deploy most importantly Bosh is

00:07:05,269 --> 00:07:09,049
capable of monitoring the state of VMs

00:07:07,009 --> 00:07:11,269
it starts and provide for automatic

00:07:09,049 --> 00:07:14,029
failure recovery and a canary mechanism

00:07:11,269 --> 00:07:15,709
for safe software upgrades the true

00:07:14,029 --> 00:07:18,799
power of Bosh lives in its cloud

00:07:15,709 --> 00:07:20,839
provider interface or CPI the CPI is an

00:07:18,799 --> 00:07:23,089
API that abstract sin freh structure

00:07:20,839 --> 00:07:24,949
differences from Bosh enabling it to

00:07:23,089 --> 00:07:29,179
manage resources on an ever growing

00:07:24,949 --> 00:07:31,099
number of infrastructures the Cloud

00:07:29,179 --> 00:07:33,349
Controller is responsible for

00:07:31,099 --> 00:07:35,539
orchestrating and at the application

00:07:33,349 --> 00:07:37,729
lifecycle and balancing demand across

00:07:35,539 --> 00:07:41,029
the cluster when an application is first

00:07:37,729 --> 00:07:43,069
deployed the stem cell application

00:07:41,029 --> 00:07:46,219
runtime and application are packaged

00:07:43,069 --> 00:07:50,689
into a droplet and uploaded to the cloud

00:07:46,219 --> 00:07:52,969
foundry storage called the blob store to

00:07:50,689 --> 00:07:55,509
scale up an application this droplet is

00:07:52,969 --> 00:07:58,189
simply executed as many times as needed

00:07:55,509 --> 00:07:59,719
the router knows where all the VM is

00:07:58,189 --> 00:08:02,599
actively running any given application

00:07:59,719 --> 00:08:05,479
are located it's job is to route inbound

00:08:02,599 --> 00:08:07,369
traffic requests to the VMs running the

00:08:05,479 --> 00:08:10,009
applications those requests are intended

00:08:07,369 --> 00:08:11,959
for when an application scales up the

00:08:10,009 --> 00:08:15,649
router knows how to dry direct traffic

00:08:11,959 --> 00:08:20,299
to those new resources so what happens

00:08:15,649 --> 00:08:22,609
when something goes kaboom the cold hard

00:08:20,299 --> 00:08:24,529
reality is that systems sometimes fail

00:08:22,609 --> 00:08:26,899
rather than trying to prevent those

00:08:24,529 --> 00:08:29,240
failures Cloud Foundry has been designed

00:08:26,899 --> 00:08:32,719
with the mindset of embracing them and

00:08:29,240 --> 00:08:34,940
ready to respond when they occur let's

00:08:32,719 --> 00:08:37,610
take the example of a server failure

00:08:34,940 --> 00:08:39,409
within the infrastructure layer the

00:08:37,610 --> 00:08:42,669
cloud controller is going to recognize

00:08:39,409 --> 00:08:46,339
that the applications that were running

00:08:42,669 --> 00:08:49,060
on that host are no longer have the

00:08:46,339 --> 00:08:51,440
proper number of active processes and

00:08:49,060 --> 00:08:53,300
the controller will then fetch the

00:08:51,440 --> 00:08:55,910
necessary droplets from these

00:08:53,300 --> 00:08:58,220
applications and schedule them on the

00:08:55,910 --> 00:09:00,890
remaining available VMs assigned to

00:08:58,220 --> 00:09:03,589
Cloud Foundry the router will first

00:09:00,890 --> 00:09:05,540
redirect traffic to the missings for the

00:09:03,589 --> 00:09:07,720
missing service instances to other

00:09:05,540 --> 00:09:09,890
process notes for that same application

00:09:07,720 --> 00:09:11,990
when the additional VMS are brought

00:09:09,890 --> 00:09:13,580
online that load will be spread back out

00:09:11,990 --> 00:09:17,360
to all of the all of the available

00:09:13,580 --> 00:09:19,850
instances and finally Bosh will

00:09:17,360 --> 00:09:22,250
automatically work at the infrastructure

00:09:19,850 --> 00:09:25,480
layer to allocate a replacement VM to

00:09:22,250 --> 00:09:27,770
take the place of the one that failed

00:09:25,480 --> 00:09:36,910
restoring your Cloud Foundry to its full

00:09:27,770 --> 00:09:39,380
capacity to learn more we recommend that

00:09:36,910 --> 00:09:40,329
you look at some of these additional

00:09:39,380 --> 00:09:42,920
resources

00:09:40,329 --> 00:09:47,149
you know we can't do a really deep dive

00:09:42,920 --> 00:09:49,339
into all the internals here so these are

00:09:47,149 --> 00:09:52,279
some of the good starting points both

00:09:49,339 --> 00:09:55,270
Bosch and Cloud Foundry main excuse me

00:09:52,279 --> 00:09:57,890
maintain excellent online documentation

00:09:55,270 --> 00:09:59,930
which is also open for community

00:09:57,890 --> 00:10:02,240
collaboration as a result the

00:09:59,930 --> 00:10:03,800
documentation is current and thorough

00:10:02,240 --> 00:10:07,220
and keeps pace with the ever-changing

00:10:03,800 --> 00:10:09,020
face of cloud foundry EDX offers an

00:10:07,220 --> 00:10:11,209
introduction to cloud foundry and cloud

00:10:09,020 --> 00:10:13,160
native software architecture as part of

00:10:11,209 --> 00:10:16,010
their massive open online courseware

00:10:13,160 --> 00:10:17,959
program the ultimate guide to bosh is a

00:10:16,010 --> 00:10:19,790
deeper dive into the power of Bosh and

00:10:17,959 --> 00:10:25,100
we'll walk you through various exercises

00:10:19,790 --> 00:10:27,620
on your local system to run a cloud

00:10:25,100 --> 00:10:30,410
foundry locally you can your best bet is

00:10:27,620 --> 00:10:33,860
probably CF dev it's a bit of a resource

00:10:30,410 --> 00:10:36,170
intensive program requires two cores and

00:10:33,860 --> 00:10:39,140
eight gig of memory but it will give you

00:10:36,170 --> 00:10:40,100
your own space to explore with minimal

00:10:39,140 --> 00:10:42,560
time investment

00:10:40,100 --> 00:10:44,029
there's also PCF dev

00:10:42,560 --> 00:10:46,820
you're interested in trying pivitol

00:10:44,029 --> 00:10:49,250
Cloud Foundry on a high-speed connection

00:10:46,820 --> 00:10:52,040
CF dev takes around 45 minutes to

00:10:49,250 --> 00:10:53,990
install the Cloud Foundry foundation

00:10:52,040 --> 00:10:56,000
keeps a list of certified platforms

00:10:53,990 --> 00:10:57,410
running Cloud Foundry which will explain

00:10:56,000 --> 00:10:59,779
what options are available on a

00:10:57,410 --> 00:11:01,850
subscription basis if you're not ready

00:10:59,779 --> 00:11:03,800
to build your own Cloud Foundry many of

00:11:01,850 --> 00:11:05,450
these services also offer free trials

00:11:03,800 --> 00:11:07,250
that let you experiment with deploying

00:11:05,450 --> 00:11:09,860
your application on a real production

00:11:07,250 --> 00:11:11,750
Cloud Foundry finally if you find

00:11:09,860 --> 00:11:13,460
yourself stuck or just want to get to

00:11:11,750 --> 00:11:15,380
know more of the community the Cloud

00:11:13,460 --> 00:11:20,660
Foundry foundation runs an open slack

00:11:15,380 --> 00:11:21,860
organization that you can sign up for so

00:11:20,660 --> 00:11:23,390
now that you know a little bit more

00:11:21,860 --> 00:11:26,060
about Cloud Foundry how about we just

00:11:23,390 --> 00:11:30,110
see a little bit of a demo and learn

00:11:26,060 --> 00:11:32,140
more about that so as we mentioned Cloud

00:11:30,110 --> 00:11:35,660
Foundry Foundation has certified

00:11:32,140 --> 00:11:38,029
platforms these platforms use the same

00:11:35,660 --> 00:11:41,720
Cloud Foundry that you'd use if you

00:11:38,029 --> 00:11:43,670
install it yourself so let's use the

00:11:41,720 --> 00:11:46,550
pivotal Web Services platform as an

00:11:43,670 --> 00:11:49,670
example today and show you how simple it

00:11:46,550 --> 00:11:51,010
is to rent your own Cloud Foundry in a

00:11:49,670 --> 00:11:54,830
matter of minutes

00:11:51,010 --> 00:11:58,220
of course I've jumped over a couple of a

00:11:54,830 --> 00:12:03,710
account verification steps here to show

00:11:58,220 --> 00:12:08,450
the best parts yet in over just a minute

00:12:03,710 --> 00:12:12,500
I went from one click to sign up to a

00:12:08,450 --> 00:12:15,100
deployed example app and Cloud Foundry

00:12:12,500 --> 00:12:19,600
was ready and waiting for for me to join

00:12:15,100 --> 00:12:23,870
at this point I've pushed the app and

00:12:19,600 --> 00:12:27,010
click on the link and it's running and

00:12:23,870 --> 00:12:27,010
it took less than a minute

00:12:27,950 --> 00:12:33,410
so now we're gonna take a minute to talk

00:12:29,810 --> 00:12:36,050
about proof of concept for the proof of

00:12:33,410 --> 00:12:38,450
concept focus on a quick simple

00:12:36,050 --> 00:12:40,670
environment keep in mind that this is

00:12:38,450 --> 00:12:41,740
meant to be used to learn from and then

00:12:40,670 --> 00:12:44,750
thrown away

00:12:41,740 --> 00:12:47,120
typically self signed certificate will

00:12:44,750 --> 00:12:48,620
be adequate at this early stage you'll

00:12:47,120 --> 00:12:50,870
want to be aware of what that

00:12:48,620 --> 00:12:52,670
certificate request process ultimately

00:12:50,870 --> 00:12:54,199
looks like in your organization and

00:12:52,670 --> 00:12:56,420
understand the turnaround time

00:12:54,199 --> 00:12:59,660
associated with it but it shouldn't be a

00:12:56,420 --> 00:13:02,269
blocker this environment is only going

00:12:59,660 --> 00:13:04,550
to be around for a short time you need

00:13:02,269 --> 00:13:07,459
to you don't need to be crisp at this

00:13:04,550 --> 00:13:10,579
point but you do want to take a lot of

00:13:07,459 --> 00:13:14,510
notes and that will help you out when

00:13:10,579 --> 00:13:16,430
you get in future phases so we also

00:13:14,510 --> 00:13:19,250
recommend that you identify a

00:13:16,430 --> 00:13:22,370
cross-section of employees to work on

00:13:19,250 --> 00:13:25,279
this project from the development

00:13:22,370 --> 00:13:29,690
operations infrastructure security and

00:13:25,279 --> 00:13:31,699
compliance teams these early discussions

00:13:29,690 --> 00:13:33,290
and exploration will help when you're

00:13:31,699 --> 00:13:37,310
putting together the proof proof of

00:13:33,290 --> 00:13:39,800
concept gather early feedback from then

00:13:37,310 --> 00:13:43,250
your stakeholders so that the concerns

00:13:39,800 --> 00:13:45,380
and issues can be planned for at future

00:13:43,250 --> 00:13:48,230
stages and when you're ready to build

00:13:45,380 --> 00:13:50,990
the real thing try to keep this to the

00:13:48,230 --> 00:13:53,290
small lean team like we mentioned you

00:13:50,990 --> 00:13:56,000
know four or five people's is great

00:13:53,290 --> 00:13:57,500
start with minimal architecture you

00:13:56,000 --> 00:13:59,690
shouldn't need to install more than five

00:13:57,500 --> 00:14:01,519
or ten applications and typically won't

00:13:59,690 --> 00:14:04,040
need more than ten to twenty application

00:14:01,519 --> 00:14:06,290
instances even if you are ultimately

00:14:04,040 --> 00:14:08,600
going to deploy to private in-house

00:14:06,290 --> 00:14:10,610
infrastructure consider using a public

00:14:08,600 --> 00:14:12,709
cloud during this phase this avoids the

00:14:10,610 --> 00:14:15,260
long lead times for hardware acquisition

00:14:12,709 --> 00:14:16,790
and install and minimizes the size of

00:14:15,260 --> 00:14:18,230
the team needed to prove that Cloud

00:14:16,790 --> 00:14:24,500
Foundry will be the right choice for

00:14:18,230 --> 00:14:28,600
your enterprise and many people may

00:14:24,500 --> 00:14:30,949
think that the the next logical step to

00:14:28,600 --> 00:14:33,319
jump right in after they've done a proof

00:14:30,949 --> 00:14:35,940
of concept is that they have to own a

00:14:33,319 --> 00:14:39,120
Cloud Foundry at this point

00:14:35,940 --> 00:14:41,520
as a general rule a general rule that

00:14:39,120 --> 00:14:43,770
takes around 120 application instances

00:14:41,520 --> 00:14:45,840
or AIS to reach an economy of scale

00:14:43,770 --> 00:14:48,330
where it starts to make sense to operate

00:14:45,840 --> 00:14:50,250
your own Cloud Foundry this can of

00:14:48,330 --> 00:14:52,650
course be influenced by application

00:14:50,250 --> 00:14:53,790
complexity instance size and security

00:14:52,650 --> 00:14:56,370
and compliance rules

00:14:53,790 --> 00:14:56,960
so keep certified platforms in mind for

00:14:56,370 --> 00:15:00,600
that

00:14:56,960 --> 00:15:03,480
another alternative are managed services

00:15:00,600 --> 00:15:06,840
which can fill in or augment your

00:15:03,480 --> 00:15:08,850
existing operations team and provide the

00:15:06,840 --> 00:15:14,870
deep technical expertise and experience

00:15:08,850 --> 00:15:17,730
you need to hit the ground running so

00:15:14,870 --> 00:15:22,820
how do you safely transition from your

00:15:17,730 --> 00:15:24,600
current version to the new hotness I

00:15:22,820 --> 00:15:28,710
personally like the galaxy-class

00:15:24,600 --> 00:15:33,140
although the saucer separation was

00:15:28,710 --> 00:15:33,140
admittedly a bit impractical all right

00:15:33,560 --> 00:15:38,970
one of the key differences in cloud

00:15:36,060 --> 00:15:41,550
foundry community is that we use

00:15:38,970 --> 00:15:43,980
infrastructure as code right and with

00:15:41,550 --> 00:15:47,070
infrastructure defined by a code in your

00:15:43,980 --> 00:15:51,210
repository you can start to build a CI

00:15:47,070 --> 00:15:56,640
CD pipeline to manage your platform and

00:15:51,210 --> 00:15:58,170
to do upgrades and installs when doing

00:15:56,640 --> 00:16:00,000
so keep in mind that is usually

00:15:58,170 --> 00:16:03,450
important to have a separate delivery

00:16:00,000 --> 00:16:05,580
channel for the platform whoops

00:16:03,450 --> 00:16:08,880
skipped ahead I put a click in there but

00:16:05,580 --> 00:16:12,570
it's not the right one and the

00:16:08,880 --> 00:16:15,210
application teams concourse fits well

00:16:12,570 --> 00:16:18,990
into this ecosystem is designed to help

00:16:15,210 --> 00:16:20,520
deploy and manage Cloud Foundry when it

00:16:18,990 --> 00:16:22,500
comes to the application channel if

00:16:20,520 --> 00:16:25,650
you've got something already like

00:16:22,500 --> 00:16:28,080
Jenkins Travis CI or team city by all

00:16:25,650 --> 00:16:29,850
means keep using those tools otherwise

00:16:28,080 --> 00:16:32,880
Concours is great at deploying

00:16:29,850 --> 00:16:34,620
applications to start and wayne hosts an

00:16:32,880 --> 00:16:39,960
excellent guide at concours tutorial

00:16:34,620 --> 00:16:41,880
comm that you can check out of course

00:16:39,960 --> 00:16:43,940
there are still some things to watch out

00:16:41,880 --> 00:16:43,940
for

00:16:45,150 --> 00:16:49,570
one of the most overlooked topics not

00:16:47,800 --> 00:16:53,200
only in cloud foundry but information

00:16:49,570 --> 00:16:57,220
technology in general is somehow still

00:16:53,200 --> 00:16:58,990
backups are ignored make sure you have

00:16:57,220 --> 00:17:01,570
them make sure you know how to use them

00:16:58,990 --> 00:17:03,910
make sure they work and backup the right

00:17:01,570 --> 00:17:07,209
things to actually enable a complete

00:17:03,910 --> 00:17:09,130
restore another common pain point is

00:17:07,209 --> 00:17:10,990
keeping up with the updates as the

00:17:09,130 --> 00:17:13,540
community releases updated stem cells

00:17:10,990 --> 00:17:15,579
and build packs for applications once

00:17:13,540 --> 00:17:17,410
you fall behind in applying updates it

00:17:15,579 --> 00:17:18,760
becomes more difficult to define the

00:17:17,410 --> 00:17:20,800
maintenance events that will help you

00:17:18,760 --> 00:17:24,390
catch up while also ensuring minimal

00:17:20,800 --> 00:17:27,610
impact to your application deployments

00:17:24,390 --> 00:17:30,370
then with certificates that you use in

00:17:27,610 --> 00:17:31,929
production you first need to research

00:17:30,370 --> 00:17:36,100
and find out the right one that you need

00:17:31,929 --> 00:17:39,010
to use what especially for wildcards so

00:17:36,100 --> 00:17:40,270
that might be a SAN and all those

00:17:39,010 --> 00:17:43,150
different requirements for your

00:17:40,270 --> 00:17:45,070
certificates you need to be stay on top

00:17:43,150 --> 00:17:50,380
of renewing renewing them because

00:17:45,070 --> 00:17:52,120
certificates expire right and then we

00:17:50,380 --> 00:17:54,670
also put in our link here to our blog

00:17:52,120 --> 00:17:58,000
because when we find pain points at

00:17:54,670 --> 00:18:00,010
clients we like to share the results

00:17:58,000 --> 00:18:02,679
that we find on our blog so we recommend

00:18:00,010 --> 00:18:04,150
checking out our blog for the things

00:18:02,679 --> 00:18:06,160
that we like to share back to the

00:18:04,150 --> 00:18:08,590
community because a lot of times we

00:18:06,160 --> 00:18:11,230
share things in code but we also like to

00:18:08,590 --> 00:18:14,130
share things in blog articles that help

00:18:11,230 --> 00:18:14,130
other people out

00:18:16,130 --> 00:18:22,560
so in this episode of Star Trek we have

00:18:20,190 --> 00:18:25,200
two captain's stranded on a foreign

00:18:22,560 --> 00:18:28,950
world who are forced forced to work

00:18:25,200 --> 00:18:31,410
together and learn to communicate before

00:18:28,950 --> 00:18:35,280
a common foe can overpower and destroy

00:18:31,410 --> 00:18:37,650
them both what we are talking about here

00:18:35,280 --> 00:18:39,840
is culture not only within your team's

00:18:37,650 --> 00:18:41,400
interpersonal relationships but also

00:18:39,840 --> 00:18:43,920
within your established business

00:18:41,400 --> 00:18:44,790
practices make sure you are speaking the

00:18:43,920 --> 00:18:47,070
same language

00:18:44,790 --> 00:18:48,840
at this level we are all technical but

00:18:47,070 --> 00:18:51,150
our various disciplines have a tendency

00:18:48,840 --> 00:18:54,630
to reuse terms which can make it seem

00:18:51,150 --> 00:18:56,960
like we're talking in metaphor cloud

00:18:54,630 --> 00:19:01,170
foundry will help you to adopt rap t'v

00:18:56,960 --> 00:19:03,090
rapid delivery practices but they won't

00:19:01,170 --> 00:19:06,060
automatically create that culture for

00:19:03,090 --> 00:19:07,890
you as an organization you need to be

00:19:06,060 --> 00:19:11,660
willing to adapt your processes and

00:19:07,890 --> 00:19:15,420
controls to maximize the advantage of

00:19:11,660 --> 00:19:18,000
new agility above all keep in mind

00:19:15,420 --> 00:19:20,430
you're all on the same side you're here

00:19:18,000 --> 00:19:24,510
to look for things things to make your

00:19:20,430 --> 00:19:34,080
business go thank you for joining us

00:19:24,510 --> 00:19:34,760
today live long and prosper does anyone

00:19:34,080 --> 00:19:37,789
have any questions

00:19:34,760 --> 00:19:37,789
[Music]

00:19:38,150 --> 00:19:46,740
that we didn't go over I imagine with

00:19:44,430 --> 00:19:50,760
people who are getting started you have

00:19:46,740 --> 00:19:52,770
a lot of questions so that's fine we do

00:19:50,760 --> 00:19:54,240
definitely recommend you come see us in

00:19:52,770 --> 00:19:56,640
the booth we can answer a lot of

00:19:54,240 --> 00:19:58,200
questions but if anybody has any

00:19:56,640 --> 00:20:01,650
specific questions they'd like to talk

00:19:58,200 --> 00:20:04,309
about we'd be happy to talk about those

00:20:01,650 --> 00:20:25,830
there yeah

00:20:04,309 --> 00:20:29,010
yes they will brain when we were talking

00:20:25,830 --> 00:20:31,200
about the cost of ownership or we're

00:20:29,010 --> 00:20:33,450
talking about ownership in general I

00:20:31,200 --> 00:20:36,210
would say that people really need to be

00:20:33,450 --> 00:20:40,320
committed to wanting to run Cloud

00:20:36,210 --> 00:20:42,420
Foundry just like let's say you know you

00:20:40,320 --> 00:20:44,429
think about getting a dog you know and

00:20:42,420 --> 00:20:47,130
you think oh it's gonna be so fun to

00:20:44,429 --> 00:20:48,480
have a puppy take care of it do the

00:20:47,130 --> 00:20:50,670
research ahead of the time and find out

00:20:48,480 --> 00:20:53,400
whether it sheds how much activity it's

00:20:50,670 --> 00:20:54,660
going to to have you know how much how

00:20:53,400 --> 00:20:56,460
much time you're gonna have to spend

00:20:54,660 --> 00:20:58,260
walking it and doing all the time you

00:20:56,460 --> 00:21:01,080
know I'm saying it's if that's an

00:20:58,260 --> 00:21:03,480
analogy of you don't know how big it's

00:21:01,080 --> 00:21:05,280
going to get and how much time you're

00:21:03,480 --> 00:21:07,559
gonna have to spend walking it and doing

00:21:05,280 --> 00:21:10,110
those types of things I think sometimes

00:21:07,559 --> 00:21:12,330
people are not they just think oh this

00:21:10,110 --> 00:21:14,760
is gonna solve all my problems you know

00:21:12,330 --> 00:21:18,090
that and so that's that's one caution

00:21:14,760 --> 00:21:21,570
that I see that sometimes they're not

00:21:18,090 --> 00:21:23,040
knowing that it does take maintenance

00:21:21,570 --> 00:21:25,140
and care and it needs people who are

00:21:23,040 --> 00:21:29,900
committed and interested interested and

00:21:25,140 --> 00:21:29,900
committed to sticking sticking to it

00:21:31,010 --> 00:21:34,010
yeah

00:21:45,370 --> 00:21:51,160
so the question is what are the gotchas

00:21:48,770 --> 00:22:00,860
to deploying your own proof of concept

00:21:51,160 --> 00:22:03,970
is that kind of a summary okay so to try

00:22:00,860 --> 00:22:06,410
to refine the question is it that

00:22:03,970 --> 00:22:09,050
setting up a long-term playground for

00:22:06,410 --> 00:22:15,260
people or to just set up a proof of

00:22:09,050 --> 00:22:17,660
concept okay so because in me the the

00:22:15,260 --> 00:22:19,190
pitfalls sometimes with just a proof of

00:22:17,660 --> 00:22:21,290
concept let's separate that question

00:22:19,190 --> 00:22:25,360
into two parts the proof of concept can

00:22:21,290 --> 00:22:27,950
sometimes be you don't have time and and

00:22:25,360 --> 00:22:29,630
fear of like I don't think I can finish

00:22:27,950 --> 00:22:31,930
this or I don't know what I'm doing kind

00:22:29,630 --> 00:22:34,160
of stuff so and lack of knowledge

00:22:31,930 --> 00:22:36,650
setting setting up a proof concept is

00:22:34,160 --> 00:22:39,470
just you know trying to try to figure it

00:22:36,650 --> 00:22:43,580
out but setting up long-term and having

00:22:39,470 --> 00:22:47,840
something to really sandbox in and learn

00:22:43,580 --> 00:22:49,910
is is something that you sometimes you

00:22:47,840 --> 00:22:54,080
just got to bite the bullet and build

00:22:49,910 --> 00:22:57,140
the proof of concept or do that and the

00:22:54,080 --> 00:23:00,560
sandbox I think that having something to

00:22:57,140 --> 00:23:02,690
really learn from over a long period of

00:23:00,560 --> 00:23:04,550
time is this from an operator

00:23:02,690 --> 00:23:10,880
perspective or from a developer

00:23:04,550 --> 00:23:12,680
perspective or a little both okay as a

00:23:10,880 --> 00:23:15,560
developer if you want to do that I would

00:23:12,680 --> 00:23:18,650
recommend being able to go to one of the

00:23:15,560 --> 00:23:20,500
certified providers and and just because

00:23:18,650 --> 00:23:23,570
then you don't have to stand up a

00:23:20,500 --> 00:23:25,070
foundation you know you can you just use

00:23:23,570 --> 00:23:27,770
what's already there

00:23:25,070 --> 00:23:29,660
I would just add that if you want to if

00:23:27,770 --> 00:23:31,880
you want to have a step stable

00:23:29,660 --> 00:23:34,520
development environment then you want to

00:23:31,880 --> 00:23:36,530
keep you you have to maintain some of

00:23:34,520 --> 00:23:38,180
the same discipline in order to make

00:23:36,530 --> 00:23:40,520
sure you know is it documented

00:23:38,180 --> 00:23:43,490
effectively if this thing blew up

00:23:40,520 --> 00:23:46,370
tomorrow could I rebuild it does the

00:23:43,490 --> 00:23:47,450
data matter that that lives there and if

00:23:46,370 --> 00:23:50,690
so what am i doing to

00:23:47,450 --> 00:23:53,630
protect that you know am i doing the

00:23:50,690 --> 00:23:55,370
right things to monitor capacity within

00:23:53,630 --> 00:23:55,610
that environment and am i shutting it

00:23:55,370 --> 00:23:59,000
down

00:23:55,610 --> 00:24:00,950
right because the probably the you know

00:23:59,000 --> 00:24:03,830
unless you have a lab in your closet

00:24:00,950 --> 00:24:06,590
you're probably using GCP or AWS which

00:24:03,830 --> 00:24:08,899
means people are deploying stuff it gets

00:24:06,590 --> 00:24:10,639
bigger it gets bigger it gets bigger and

00:24:08,899 --> 00:24:13,429
before you know it you're spending ten

00:24:10,639 --> 00:24:15,200
thousand dollars on a month for 30

00:24:13,429 --> 00:24:22,630
applications that aren't running into

00:24:15,200 --> 00:24:22,630
that are yeah thanks any other questions

00:24:23,889 --> 00:24:28,820
all right any other questions offline

00:24:26,210 --> 00:24:32,260
please come see us thank you for your

00:24:28,820 --> 00:24:32,260

YouTube URL: https://www.youtube.com/watch?v=k2Mk9-54Bs0


