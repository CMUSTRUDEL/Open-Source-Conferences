Title: The Making of a Cloud Native Application Platform - Sam Ramji Keynote
Publication date: 2016-03-18
Playlist: Cloud Foundry CEO, Sam Ramji
Description: 
	From OSCON 2015: It wasn’t too long ago that artisans, bathed in the glow of molten metal, forged parts that would go on to make up bigger, more powerful machines. Today, we call those artisans developers. Instead of metal, they use bits and bytes in the cloud to forge a modern application architecture.

It’s an architecture built for velocity and choice. One that enables companies to build applications quickly and deploy them wherever they need to go, whether public, private, or hybrid environments. And it’s built on a growing, vibrant ecosystem of ecosystems.

In this talk, I’ll give you a look at the technologies driving this new level of speed and efficiency for application developers (such tech as containers, Docker, Kubernetes, OpenStack, and Cloud Foundry). And I’ll explain why many prominent members of the Fortune 500 are building their futures on this modern application architecture.

About Sam Ramji:
Sam Ramji is CEO of the Cloud Foundry Foundation. He has over 20 years of industry experience in enterprise software, product development, and open source strategy. Sam previously served as vice president of strategy of Apigee, one of the five fastest-growing software companies in the Deloitte Fast 500, and is a member of their board of advisors. He joined Apigee from Microsoft, where he was responsible for driving Microsoft’s worldwide open source strategy. He drove many of Microsoft’s contributions to open source and its shift to embrace open source technologies like PHP. He was a leader in BEA’s move into EAI/ESB as a founding member of the AquaLogic product team. Sam has built large-scale enterprise and web-scale applications, leading the Ofoto engineering team through its acquisition by Kodak. His other experience includes leading engineering teams to build large-scale applications on open source software, as well as hands-on development of client, client-server, and distributed applications on Unix, Windows, and Macintosh at prior companies. He is a member of the Institute for Generative Leadership. Sam holds a bachelor of science degree in cognitive science from the University of California at San Diego. His work has been covered in Wired and many other industry publications.

Watch more from OSCON 2015: https://goo.gl/vD6vda
Find out more about OSCON: http://oscon.com/open-source-2015
Don't miss an upload! Subscribe! http://goo.gl/szEauh
Stay Connected to O'Reilly Media by Email - http://goo.gl/YZSWbO

Follow O'Reilly Media:
http://plus.google.com/+oreillymedia
https://www.facebook.com/OReilly
https://twitter.com/OReillyMedia
Captions: 
	00:00:02,969 --> 00:00:09,070
good morning so I had my keynote written

00:00:06,939 --> 00:00:11,160
about two weeks ago but a funny thing

00:00:09,070 --> 00:00:13,889
happened on the way to the forum

00:00:11,160 --> 00:00:16,059
everybody's asking a few questions

00:00:13,889 --> 00:00:18,160
what's with all these new foundations

00:00:16,059 --> 00:00:21,159
how do these technologies work together

00:00:18,160 --> 00:00:22,300
so let's talk about that it's become

00:00:21,159 --> 00:00:23,859
commonplace to say that we're at the

00:00:22,300 --> 00:00:25,749
dawn of a new era right we have

00:00:23,859 --> 00:00:28,210
supercomputer in our pockets we use them

00:00:25,749 --> 00:00:30,310
to communicate via Twitter sometimes we

00:00:28,210 --> 00:00:32,200
even make phone calls with them

00:00:30,310 --> 00:00:33,640
we drive supercomputers down the highway

00:00:32,200 --> 00:00:36,760
unfortunately they can be hacked as

00:00:33,640 --> 00:00:38,380
we're finding out as devices get cheaper

00:00:36,760 --> 00:00:39,790
as screens get cheaper as compute as

00:00:38,380 --> 00:00:41,650
networking as storage gets cheaper and

00:00:39,790 --> 00:00:43,150
wireless access gets ubiquitous we're

00:00:41,650 --> 00:00:46,420
putting internet on all of the things

00:00:43,150 --> 00:00:47,650
not just some of the things so human

00:00:46,420 --> 00:00:49,330
behavior has changed we want information

00:00:47,650 --> 00:00:51,670
when we want it the way we want it and

00:00:49,330 --> 00:00:53,860
businesses are starting to shift to

00:00:51,670 --> 00:00:55,540
match the change in human behavior if I

00:00:53,860 --> 00:00:57,700
have their information now I want to do

00:00:55,540 --> 00:01:00,040
commerce with you now the stakes are

00:00:57,700 --> 00:01:01,030
high if you miss this you might end up

00:01:00,040 --> 00:01:04,780
with this result

00:01:01,030 --> 00:01:07,869
since 2050 52 percent of the fortune 500

00:01:04,780 --> 00:01:10,179
are no longer on the list that's a big

00:01:07,869 --> 00:01:11,409
deal right things are changing faster

00:01:10,179 --> 00:01:13,359
than they've ever changed before and

00:01:11,409 --> 00:01:13,719
it's just not our imagination if you

00:01:13,359 --> 00:01:16,210
follow

00:01:13,719 --> 00:01:18,249
Rita hunter McGrath a professor at the

00:01:16,210 --> 00:01:19,899
Columbia Business School she's offered a

00:01:18,249 --> 00:01:22,450
frame of reference this as we're at the

00:01:19,899 --> 00:01:23,530
end of competitive advantage it used to

00:01:22,450 --> 00:01:25,299
be that the gold standard for business

00:01:23,530 --> 00:01:27,759
strategy was to establish mini

00:01:25,299 --> 00:01:29,560
monopolies establish pricing power

00:01:27,759 --> 00:01:31,299
customer control and then exploit that

00:01:29,560 --> 00:01:33,939
for as long as possible to be able to

00:01:31,299 --> 00:01:35,289
generate your maximum profit that no

00:01:33,939 --> 00:01:38,409
longer works the companies that are

00:01:35,289 --> 00:01:40,829
falling off of the list can't keep up so

00:01:38,409 --> 00:01:42,909
continuous innovation is the new frame

00:01:40,829 --> 00:01:44,679
continuous innovation as a response by

00:01:42,909 --> 00:01:47,219
business that the market is changing

00:01:44,679 --> 00:01:49,060
fast and they need to move faster now

00:01:47,219 --> 00:01:51,999
we've seen this even in the

00:01:49,060 --> 00:01:56,920
not-for-profit space you may have

00:01:51,999 --> 00:01:58,209
noticed it's been a busy year so six

00:01:56,920 --> 00:02:01,959
months ago we started the Cloud Foundry

00:01:58,209 --> 00:02:03,189
foundation that's why I have a job about

00:02:01,959 --> 00:02:05,049
a month ago we started the open

00:02:03,189 --> 00:02:06,670
container initiative and just on Tuesday

00:02:05,049 --> 00:02:08,679
established the cloud native computing

00:02:06,670 --> 00:02:11,920
foundation so the first question is why

00:02:08,679 --> 00:02:14,250
are there so many foundations I think

00:02:11,920 --> 00:02:16,270
it's economics right open source is one

00:02:14,250 --> 00:02:18,070
popular projects are now you can

00:02:16,270 --> 00:02:20,350
I'm clay attractive right so this breeds

00:02:18,070 --> 00:02:21,970
competition and distrust as opposed to

00:02:20,350 --> 00:02:24,520
what we used to do which is share code

00:02:21,970 --> 00:02:26,350
improve it build it for reputation sake

00:02:24,520 --> 00:02:27,760
now there's a model where venture

00:02:26,350 --> 00:02:29,530
capitalists are able to see this

00:02:27,760 --> 00:02:31,840
open-source technology has really caught

00:02:29,530 --> 00:02:34,030
on it's growing fast so there's a simple

00:02:31,840 --> 00:02:35,830
model wrap a company around it gather a

00:02:34,030 --> 00:02:37,720
set of investors make sure you put money

00:02:35,830 --> 00:02:40,000
and hire all of the maintainer x' and

00:02:37,720 --> 00:02:41,320
sent everyone with stock options and try

00:02:40,000 --> 00:02:44,380
to become a unicorn right where's my

00:02:41,320 --> 00:02:46,390
billion dollar valuation turns out with

00:02:44,380 --> 00:02:48,760
all of that money you start to generate

00:02:46,390 --> 00:02:50,080
distrust so some of the old nature of

00:02:48,760 --> 00:02:51,940
the open source model starting to break

00:02:50,080 --> 00:02:53,620
down as these projects get bigger and

00:02:51,940 --> 00:02:56,230
more valuable I think that's where

00:02:53,620 --> 00:02:58,540
foundations come in move to multi vendor

00:02:56,230 --> 00:03:00,370
open source by creating a place to put

00:02:58,540 --> 00:03:02,800
this all in the Commons it enables these

00:03:00,370 --> 00:03:05,080
competing corporations to collaborate so

00:03:02,800 --> 00:03:07,780
a few specific examples so pivotal Cloud

00:03:05,080 --> 00:03:09,640
Foundry established in 2011 building

00:03:07,780 --> 00:03:13,480
systems for cloud app native

00:03:09,640 --> 00:03:15,370
applications was discovered by IBM they

00:03:13,480 --> 00:03:16,960
wanted to put in bluemix HP wanted to

00:03:15,370 --> 00:03:19,060
put in the Helion however there's

00:03:16,960 --> 00:03:21,459
tensions why would i contribute to this

00:03:19,060 --> 00:03:23,860
when i'm signing over the copyright to a

00:03:21,459 --> 00:03:25,510
competitor right the contributor License

00:03:23,860 --> 00:03:26,440
Agreement owned by a for-profit company

00:03:25,510 --> 00:03:28,360
that you're going to be competing with

00:03:26,440 --> 00:03:30,790
that's pretty hard that's single vendor

00:03:28,360 --> 00:03:32,800
open source so they came together last

00:03:30,790 --> 00:03:37,030
year said let's create a foundation

00:03:32,800 --> 00:03:38,350
around it so we're opening the

00:03:37,030 --> 00:03:40,240
development roadmap and we're

00:03:38,350 --> 00:03:42,700
standardizing through certification this

00:03:40,240 --> 00:03:44,020
is the purpose of that foundation right

00:03:42,700 --> 00:03:47,860
so you can find out more information

00:03:44,020 --> 00:03:49,360
here next example is docker

00:03:47,860 --> 00:03:52,030
as we all know Dockers taken over the

00:03:49,360 --> 00:03:54,280
world right amazing success breakout

00:03:52,030 --> 00:03:55,750
growth breakout utilization one of the

00:03:54,280 --> 00:03:58,060
side effects of success is there will be

00:03:55,750 --> 00:03:59,500
multiple opinions right and as you have

00:03:58,060 --> 00:04:01,570
more and more pull requests you can't

00:03:59,500 --> 00:04:04,000
respond to all of them so we end up with

00:04:01,570 --> 00:04:05,380
competition sometimes sometimes this

00:04:04,000 --> 00:04:07,120
competition is great for innovation

00:04:05,380 --> 00:04:09,700
sometimes it starts to get destructive

00:04:07,120 --> 00:04:11,830
we started seeing large companies asking

00:04:09,700 --> 00:04:13,630
themselves what should I use we're gonna

00:04:11,830 --> 00:04:15,130
do a nine month project to figure out

00:04:13,630 --> 00:04:18,430
which container technology we're going

00:04:15,130 --> 00:04:19,989
to use that doesn't sound fast right

00:04:18,430 --> 00:04:21,700
that doesn't deliver on anything that

00:04:19,989 --> 00:04:24,790
we're trying to build here so you take a

00:04:21,700 --> 00:04:26,860
foundation and create a project that

00:04:24,790 --> 00:04:28,700
allows the collaboration so docker and

00:04:26,860 --> 00:04:30,530
rocket have now met in the open

00:04:28,700 --> 00:04:31,790
initiative so what's that doing it's

00:04:30,530 --> 00:04:34,040
standardizing the file format

00:04:31,790 --> 00:04:36,380
it's standardizing the runtime so we

00:04:34,040 --> 00:04:38,840
take previously warring standards right

00:04:36,380 --> 00:04:40,640
docker file and app C create one common

00:04:38,840 --> 00:04:42,590
approach to file systems for containers

00:04:40,640 --> 00:04:45,800
you take Lib container and grow it up

00:04:42,590 --> 00:04:47,510
into run C this is shocking not only are

00:04:45,800 --> 00:04:49,580
all of the competitors work using this

00:04:47,510 --> 00:04:50,840
but Microsoft is now said that run C is

00:04:49,580 --> 00:04:52,760
going to be the standard interface for

00:04:50,840 --> 00:04:54,740
Windows containers and they're going to

00:04:52,760 --> 00:04:56,630
effectively implement Linux type

00:04:54,740 --> 00:04:58,970
features to be able to support the

00:04:56,630 --> 00:05:00,410
requirements of run C so all of this

00:04:58,970 --> 00:05:02,690
stuff is starting to come together in

00:05:00,410 --> 00:05:04,220
this neutral ground and it's going to

00:05:02,690 --> 00:05:06,140
make everything simpler for all of us we

00:05:04,220 --> 00:05:09,110
can share our innovation so for more

00:05:06,140 --> 00:05:12,770
information you can look here probably

00:05:09,110 --> 00:05:14,870
everybody knows this logo as well so

00:05:12,770 --> 00:05:16,940
kubernetes had incredible growth right

00:05:14,870 --> 00:05:18,740
doing container orchestration but it's

00:05:16,940 --> 00:05:20,360
confusing to understand what's happening

00:05:18,740 --> 00:05:22,990
I started looking like it was kubernetes

00:05:20,360 --> 00:05:24,860
vs all the container orchestration

00:05:22,990 --> 00:05:26,570
people are trying to make sense of that

00:05:24,860 --> 00:05:27,710
you think nine months is a long time to

00:05:26,570 --> 00:05:29,450
figure out which container you're going

00:05:27,710 --> 00:05:30,290
to use it's probably gonna take years

00:05:29,450 --> 00:05:31,580
for people to figure out what

00:05:30,290 --> 00:05:36,080
orchestration they're gonna use across a

00:05:31,580 --> 00:05:38,660
fortune 500 company so if we can start

00:05:36,080 --> 00:05:40,010
to bring it together and say well what

00:05:38,660 --> 00:05:41,480
if it was kubernetes and all the

00:05:40,010 --> 00:05:43,910
container orchestration created the

00:05:41,480 --> 00:05:46,220
cloud native computing foundation then

00:05:43,910 --> 00:05:48,380
we can work to harmonize kubernetes and

00:05:46,220 --> 00:05:50,450
Miso's we can reimagine schedulers and

00:05:48,380 --> 00:05:53,420
as plugins talk a little bit more about

00:05:50,450 --> 00:05:56,660
that later so food for thought from

00:05:53,420 --> 00:05:59,510
henrik Ingo he did a study about in 2010

00:05:56,660 --> 00:06:02,330
about five years ago fascinating study

00:05:59,510 --> 00:06:03,740
pointing to the same phenomenon those of

00:06:02,330 --> 00:06:05,210
you who know me know I'm not a theorist

00:06:03,740 --> 00:06:06,560
I'm an empiricist I like to measure

00:06:05,210 --> 00:06:08,690
what's out there and report on that and

00:06:06,560 --> 00:06:10,850
Henrik did a very nice job here he said

00:06:08,690 --> 00:06:14,330
there are nine projects Linux KDE Apache

00:06:10,850 --> 00:06:16,100
Eclipse Perl Mozilla Janome Drupal and

00:06:14,330 --> 00:06:17,810
canoe that stand out as significantly

00:06:16,100 --> 00:06:20,000
larger ten times larger than any of the

00:06:17,810 --> 00:06:22,520
others so all of these projects are

00:06:20,000 --> 00:06:24,890
governed by nonprofit foundations said

00:06:22,520 --> 00:06:26,300
no single vendor project is so far even

00:06:24,890 --> 00:06:27,590
been close to reaching their magnitude

00:06:26,300 --> 00:06:29,630
so there appears to be a glass ceiling

00:06:27,590 --> 00:06:31,910
limiting the growth of the large singer

00:06:29,630 --> 00:06:33,410
but single vendor projects I suspect

00:06:31,910 --> 00:06:34,940
that this has something to do with the

00:06:33,410 --> 00:06:37,430
same economics and the trends that we're

00:06:34,940 --> 00:06:38,990
seeing right now the second big question

00:06:37,430 --> 00:06:40,790
is how do all these technologies work

00:06:38,990 --> 00:06:42,780
together or maybe why do they all work

00:06:40,790 --> 00:06:44,160
together so any meeting

00:06:42,780 --> 00:06:45,960
technology has a movement around it

00:06:44,160 --> 00:06:48,960
right for Linux the movement was

00:06:45,960 --> 00:06:50,520
open-source we now live in an age of

00:06:48,960 --> 00:06:53,010
open source open source is definitively

00:06:50,520 --> 00:06:54,720
one right each of these projects has

00:06:53,010 --> 00:06:57,240
logos that are is well known to you as

00:06:54,720 --> 00:06:58,500
logos from companies 20 years ago it

00:06:57,240 --> 00:07:00,540
used to be that only large companies

00:06:58,500 --> 00:07:01,320
like Nike would have a internationally

00:07:00,540 --> 00:07:02,760
known logo

00:07:01,320 --> 00:07:06,270
everybody knows docker everybody knows

00:07:02,760 --> 00:07:07,740
Linux everybody knows OpenStack maybe

00:07:06,270 --> 00:07:10,380
more instantly we live in an age of

00:07:07,740 --> 00:07:11,790
open-source data centers so we can stack

00:07:10,380 --> 00:07:13,889
all these things together and we've got

00:07:11,790 --> 00:07:15,530
open source from the ground to the

00:07:13,889 --> 00:07:17,190
ceiling right from the computer

00:07:15,530 --> 00:07:19,260
infrastructure all the way up to

00:07:17,190 --> 00:07:21,210
programming frameworks so this is our

00:07:19,260 --> 00:07:22,650
opportunity it's in our best interest to

00:07:21,210 --> 00:07:24,300
harmonize all of these so if you're in

00:07:22,650 --> 00:07:26,610
the audience and you're a user you

00:07:24,300 --> 00:07:27,990
should ask each of these projects to do

00:07:26,610 --> 00:07:29,700
a better job of interoperating and

00:07:27,990 --> 00:07:31,919
creating a harmonious stack right it's

00:07:29,700 --> 00:07:34,440
our job to do that but if open source is

00:07:31,919 --> 00:07:36,210
one and what's the next movement right

00:07:34,440 --> 00:07:39,060
any meaningful technology has a movement

00:07:36,210 --> 00:07:41,610
around it so for Cloud Foundry the

00:07:39,060 --> 00:07:43,440
movement is continuous innovation for

00:07:41,610 --> 00:07:46,229
docker the movement is continuous

00:07:43,440 --> 00:07:48,360
innovation for kubernetes the movement

00:07:46,229 --> 00:07:51,450
is continuous innovation right for core

00:07:48,360 --> 00:07:53,340
OS from Essos now continuous innovation

00:07:51,450 --> 00:07:54,390
is interesting word it sounds a lot like

00:07:53,340 --> 00:07:56,010
what we deal with every day in

00:07:54,390 --> 00:07:57,330
technology we're building continuous

00:07:56,010 --> 00:07:59,580
integration we're building continuous

00:07:57,330 --> 00:08:01,260
deployment you'd be amazed at how many

00:07:59,580 --> 00:08:02,700
companies are using continuous

00:08:01,260 --> 00:08:04,590
integration because it's almost obvious

00:08:02,700 --> 00:08:05,729
now but when you ask them how long it

00:08:04,590 --> 00:08:09,120
takes you to deploy to production they

00:08:05,729 --> 00:08:10,350
say well that's when we talked to IT and

00:08:09,120 --> 00:08:12,330
so then you say well you don't actually

00:08:10,350 --> 00:08:13,919
have continuous deployment so when you

00:08:12,330 --> 00:08:16,380
have a wonderful project that you can go

00:08:13,919 --> 00:08:18,690
demo to or concept to demo in a month

00:08:16,380 --> 00:08:20,789
but it still takes you three months to

00:08:18,690 --> 00:08:22,470
get into production you're caught in a

00:08:20,789 --> 00:08:23,880
very particular anti-pattern this is

00:08:22,470 --> 00:08:27,380
something that Dave West is coined I

00:08:23,880 --> 00:08:27,380
think this term is quite powerful

00:08:28,930 --> 00:08:34,419
a lot of knowing laughter in the

00:08:32,500 --> 00:08:36,130
audience so you know this pain so we

00:08:34,419 --> 00:08:38,950
need to figure out collectively how to

00:08:36,130 --> 00:08:40,630
get out of this empirically again the

00:08:38,950 --> 00:08:44,110
solution is bringing dev and ops

00:08:40,630 --> 00:08:45,790
together right creating one unified

00:08:44,110 --> 00:08:48,610
environment one unified culture

00:08:45,790 --> 00:08:51,490
it looks like micro-services containers

00:08:48,610 --> 00:08:53,470
twelve factory applications it's a world

00:08:51,490 --> 00:08:55,029
where everything is ephemeral right we

00:08:53,470 --> 00:08:56,350
can blow up containers we can add

00:08:55,029 --> 00:08:58,600
containers we can grow and shrink

00:08:56,350 --> 00:09:00,730
clusters we're not particularly Precious

00:08:58,600 --> 00:09:03,040
about any of the particular workloads we

00:09:00,730 --> 00:09:04,899
know the workload exists on mass no one

00:09:03,040 --> 00:09:06,910
instance is going to destroy us that

00:09:04,899 --> 00:09:08,770
makes it scalable right it also is about

00:09:06,910 --> 00:09:11,500
agility or smaller pieces of code

00:09:08,770 --> 00:09:13,540
changing faster reduces our risk for any

00:09:11,500 --> 00:09:14,740
one change when you think about the

00:09:13,540 --> 00:09:17,140
state of the art from five years ago

00:09:14,740 --> 00:09:19,810
Zynga used to deploy to production 40

00:09:17,140 --> 00:09:22,080
times a day 40 times a day right that's

00:09:19,810 --> 00:09:25,899
like Ludacris speed they've gone plaid

00:09:22,080 --> 00:09:27,640
but as of as of last week I think Amazon

00:09:25,899 --> 00:09:31,270
said that they now deploy production on

00:09:27,640 --> 00:09:34,240
average every seven seconds right so

00:09:31,270 --> 00:09:35,890
it's a different world why do we do it

00:09:34,240 --> 00:09:37,480
we do it to run in the cloud we do it to

00:09:35,890 --> 00:09:38,980
support any client device because we're

00:09:37,480 --> 00:09:40,089
putting internet on all the things you

00:09:38,980 --> 00:09:42,940
don't know what your devices will be

00:09:40,089 --> 00:09:44,470
next week let alone next year you need

00:09:42,940 --> 00:09:46,000
to connect the legacy data and processes

00:09:44,470 --> 00:09:49,600
by API is one of the interesting things

00:09:46,000 --> 00:09:51,400
in this trend is if you feel like the

00:09:49,600 --> 00:09:52,990
whole thing is a it's all about building

00:09:51,400 --> 00:09:55,870
new things and you forget your legacy

00:09:52,990 --> 00:09:57,520
then you will join the 52% of the

00:09:55,870 --> 00:09:59,230
fortune 500 who aren't on the list

00:09:57,520 --> 00:10:01,600
turns out those legacy systems actually

00:09:59,230 --> 00:10:03,670
still make you money so like the

00:10:01,600 --> 00:10:05,529
Japanese did at Toyota in the 60s and

00:10:03,670 --> 00:10:06,760
50s right sighs and digital innovation

00:10:05,529 --> 00:10:09,310
means focusing on cycle time

00:10:06,760 --> 00:10:12,070
optimization don't build 50,000 bikes

00:10:09,310 --> 00:10:13,660
per day tell me the takt time end-to-end

00:10:12,070 --> 00:10:15,130
time for a single bike can you get one

00:10:13,660 --> 00:10:16,870
bike from end to end in 15 minutes

00:10:15,130 --> 00:10:18,550
that's what you want to do smaller teams

00:10:16,870 --> 00:10:20,920
and faster tools there's some

00:10:18,550 --> 00:10:22,690
observations here right if you need more

00:10:20,920 --> 00:10:24,880
than two pizzas to feed your entire team

00:10:22,690 --> 00:10:27,610
you're probably too big right is the

00:10:24,880 --> 00:10:29,110
silo getting in your way so going back

00:10:27,610 --> 00:10:31,329
to some observations from Martin Fowler

00:10:29,110 --> 00:10:33,100
who I can't believe that I'm standing on

00:10:31,329 --> 00:10:35,610
the same stage within roughly you know a

00:10:33,100 --> 00:10:38,050
half an hour of that's ridiculous

00:10:35,610 --> 00:10:40,150
Melvin Conway observes this and then

00:10:38,050 --> 00:10:42,520
Martin follows up by looking at this and

00:10:40,150 --> 00:10:43,720
saying well when you start

00:10:42,520 --> 00:10:45,010
building really big teams and you've got

00:10:43,720 --> 00:10:46,360
a UI team and you've got a server-side

00:10:45,010 --> 00:10:48,580
logic team and you've got a database

00:10:46,360 --> 00:10:51,340
team then you end up having effectively

00:10:48,580 --> 00:10:52,900
code politics you need to move fast it's

00:10:51,340 --> 00:10:55,780
too hard to coordinate so you just put

00:10:52,900 --> 00:10:57,490
logic in all of the places oh I couldn't

00:10:55,780 --> 00:10:58,900
push the production today I just but I

00:10:57,490 --> 00:11:02,070
do have access to the database so I

00:10:58,900 --> 00:11:02,070
fixed it with the stored procedure

00:11:02,460 --> 00:11:08,860
clearly many people haven't tried to

00:11:04,420 --> 00:11:10,450
debug stored procedures in production so

00:11:08,860 --> 00:11:12,970
how do all these things work together it

00:11:10,450 --> 00:11:14,380
comes back to solving this coherently

00:11:12,970 --> 00:11:16,600
right so we have this sort of sense of

00:11:14,380 --> 00:11:18,820
prescriptive versus assembled

00:11:16,600 --> 00:11:20,500
environments prescriptive environments

00:11:18,820 --> 00:11:22,060
are more for the fortune 500 where they

00:11:20,500 --> 00:11:23,650
don't have time to assemble these things

00:11:22,060 --> 00:11:25,090
and you need stability in the

00:11:23,650 --> 00:11:27,130
infrastructure to continuously innovate

00:11:25,090 --> 00:11:28,510
in the business on the other side we

00:11:27,130 --> 00:11:30,670
need to have soft boundaries so we can

00:11:28,510 --> 00:11:32,290
continue to explore what's the nature of

00:11:30,670 --> 00:11:34,510
the cloud right what are the things that

00:11:32,290 --> 00:11:36,550
we need to use what is the nature of the

00:11:34,510 --> 00:11:38,500
modular use components so there are a

00:11:36,550 --> 00:11:42,010
number of examples of prescriptive right

00:11:38,500 --> 00:11:45,100
tectonic from core OS OpenShift from Red

00:11:42,010 --> 00:11:46,210
Hat Cloud Foundry from many vendors but

00:11:45,100 --> 00:11:47,590
then I'm asked what's the difference

00:11:46,210 --> 00:11:49,660
between cloud foundry and kubernetes

00:11:47,590 --> 00:11:51,100
I say wow right it's like comparing

00:11:49,660 --> 00:11:53,950
apples to dinosaurs I don't know where

00:11:51,100 --> 00:11:55,930
to start you have to start by peeling

00:11:53,950 --> 00:11:57,730
back the onion saying oh well actually

00:11:55,930 --> 00:12:00,190
kubernetes and diego or both schedulers

00:11:57,730 --> 00:12:02,230
how could they work together right could

00:12:00,190 --> 00:12:05,350
Diego run on Mesa as an application

00:12:02,230 --> 00:12:07,030
workload scheduler with foundations and

00:12:05,350 --> 00:12:08,800
with a warm sense of how we can

00:12:07,030 --> 00:12:10,750
interoperate we can start to make the

00:12:08,800 --> 00:12:12,550
boundaries softer it's already changed

00:12:10,750 --> 00:12:15,460
the Cloud Foundry roadmap now that runs

00:12:12,550 --> 00:12:17,320
see is out we can stop building as much

00:12:15,460 --> 00:12:19,270
capability in Cloud Foundry specific

00:12:17,320 --> 00:12:21,400
containers and join the run see movement

00:12:19,270 --> 00:12:23,140
contribute some of our code and our

00:12:21,400 --> 00:12:25,150
advances around security and

00:12:23,140 --> 00:12:28,960
manageability into the Commons right we

00:12:25,150 --> 00:12:31,270
can share it all so that said what's

00:12:28,960 --> 00:12:32,830
happening was Cloud Foundry so for those

00:12:31,270 --> 00:12:33,520
of you who have seen it but don't know

00:12:32,830 --> 00:12:36,040
what it does

00:12:33,520 --> 00:12:37,720
two simple purposes and they will

00:12:36,040 --> 00:12:39,880
continuous deployment about cloud native

00:12:37,720 --> 00:12:41,800
apps at scale and run in multiple clouds

00:12:39,880 --> 00:12:43,300
so the inspiration of running in

00:12:41,800 --> 00:12:45,040
multiple clouds is to maybe make sure

00:12:43,300 --> 00:12:47,260
that we can continue to protect the

00:12:45,040 --> 00:12:49,480
freedom of users to move from cloud to

00:12:47,260 --> 00:12:51,610
cloud right now moving from cloud to

00:12:49,480 --> 00:12:52,990
cloud is difficult five years from now

00:12:51,610 --> 00:12:54,310
20 years from now when your code is in

00:12:52,990 --> 00:12:56,050
still was still in production or your

00:12:54,310 --> 00:12:57,310
cloud provider still going to be there

00:12:56,050 --> 00:12:59,410
well they still have that interest or

00:12:57,310 --> 00:13:01,360
will it have passed on I don't know but

00:12:59,410 --> 00:13:03,160
by then when we talk about legacy in

00:13:01,360 --> 00:13:05,140
fortune 500 everything we're building

00:13:03,160 --> 00:13:08,730
today is gonna be legacy this will be an

00:13:05,140 --> 00:13:08,730
issue that we're trying to solve upfront

00:13:08,850 --> 00:13:13,329
Clara foundry is running in a lot of

00:13:10,899 --> 00:13:16,060
different technologies right it's the

00:13:13,329 --> 00:13:19,720
infrastructure of pivotal IBM bluemix HP

00:13:16,060 --> 00:13:21,579
Helion public offering is from sa P and

00:13:19,720 --> 00:13:23,500
Hana CenturyLink Accenture a Verizon

00:13:21,579 --> 00:13:25,450
huawei active state it's very widely

00:13:23,500 --> 00:13:29,709
distributed it's also widely adopted but

00:13:25,450 --> 00:13:31,990
here's my favorite slide it's about

00:13:29,709 --> 00:13:34,779
rebalancing everything towards the users

00:13:31,990 --> 00:13:36,880
right right like Tron you have to fight

00:13:34,779 --> 00:13:39,399
for the users because otherwise the

00:13:36,880 --> 00:13:41,260
vendors will get you so we're

00:13:39,399 --> 00:13:43,060
rebalancing the roadmap towards user

00:13:41,260 --> 00:13:44,709
driven or we're rebalancing the system

00:13:43,060 --> 00:13:47,079
towards user driven roadmaps and control

00:13:44,709 --> 00:13:48,850
the upstream project and specific

00:13:47,079 --> 00:13:51,399
industries right in financial services

00:13:48,850 --> 00:13:55,360
industrial IOT telecommunications we're

00:13:51,399 --> 00:13:56,920
building specific capabilities we're

00:13:55,360 --> 00:13:58,420
learning a ton about moving a project

00:13:56,920 --> 00:13:59,950
from single bed or open source to multi

00:13:58,420 --> 00:14:02,380
vendor open source right explicit

00:13:59,950 --> 00:14:03,959
controls implicit controls explicit

00:14:02,380 --> 00:14:06,820
controls or who has access to the code

00:14:03,959 --> 00:14:08,350
implicit controls are boy do I really

00:14:06,820 --> 00:14:09,370
have standing to talk about that thing

00:14:08,350 --> 00:14:10,060
in the roadmap am I going to get

00:14:09,370 --> 00:14:12,640
listened to

00:14:10,060 --> 00:14:14,440
right transparency when you're doing all

00:14:12,640 --> 00:14:15,610
your development in one room you think

00:14:14,440 --> 00:14:16,839
you're being transparent but there's a

00:14:15,610 --> 00:14:20,050
world outside that needs to be

00:14:16,839 --> 00:14:21,640
communicated with so we're focusing

00:14:20,050 --> 00:14:22,990
going forward on certification to

00:14:21,640 --> 00:14:24,730
guarantee portability of apps across

00:14:22,990 --> 00:14:26,589
clouds because you need to be able to

00:14:24,730 --> 00:14:27,910
run your code everywhere we need to make

00:14:26,589 --> 00:14:30,100
it lasting and durable because people

00:14:27,910 --> 00:14:31,990
will use these for 20 years and we need

00:14:30,100 --> 00:14:34,839
to build the ecosystem of opportunity so

00:14:31,990 --> 00:14:36,490
I'm closing I'd say that we see a world

00:14:34,839 --> 00:14:38,200
of cloud computing that is ubiquitous

00:14:36,490 --> 00:14:40,870
and flexible so you can move your

00:14:38,200 --> 00:14:42,760
workloads portable and interoperable so

00:14:40,870 --> 00:14:44,680
the applications can land on land in new

00:14:42,760 --> 00:14:46,209
places in the future and something that

00:14:44,680 --> 00:14:47,770
is vibrant and growing at under that

00:14:46,209 --> 00:14:51,040
underlies a massive ecosystem of apps

00:14:47,770 --> 00:14:52,240
and developers I'll close on one final

00:14:51,040 --> 00:14:55,060
note and I'm over time when I do

00:14:52,240 --> 00:14:57,910
apologize for that sorry can we go back

00:14:55,060 --> 00:15:00,519
one slide but I think it's important for

00:14:57,910 --> 00:15:02,380
all of us to recognize that we see a

00:15:00,519 --> 00:15:04,510
human community here right we're not

00:15:02,380 --> 00:15:06,699
just faces we're not just names we're

00:15:04,510 --> 00:15:08,260
not just email addresses we see a human

00:15:06,699 --> 00:15:09,850
community that is pragmatic right it's

00:15:08,260 --> 00:15:12,370
focused on exchanging practice

00:15:09,850 --> 00:15:14,019
experience arguing about theory right

00:15:12,370 --> 00:15:16,389
that's diverse and inclusive of people

00:15:14,019 --> 00:15:18,730
across race gender orientation and

00:15:16,389 --> 00:15:20,259
lifestyle and finally that's respectful

00:15:18,730 --> 00:15:22,149
and committed to listening to thoughtful

00:15:20,259 --> 00:15:23,769
and honest perspectives what we've

00:15:22,149 --> 00:15:24,850
learned what we will leave is that there

00:15:23,769 --> 00:15:27,190
is something to be learned from the

00:15:24,850 --> 00:15:32,250
quietest voice in the room so with that

00:15:27,190 --> 00:15:32,250

YouTube URL: https://www.youtube.com/watch?v=7oCSFcUW-Qk


