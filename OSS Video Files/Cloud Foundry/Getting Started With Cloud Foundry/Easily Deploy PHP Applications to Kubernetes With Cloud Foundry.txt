Title: Easily Deploy PHP Applications to Kubernetes With Cloud Foundry
Publication date: 2020-12-15
Playlist: Getting Started With Cloud Foundry
Description: 
	Simplify the deployment of PHP applications to Kubernetes clusters by using Cloud Foundry. In this tutorial, learn how to deploy a Lumen application that also uses composer for dependency management. 

This tutorial assumes that you have already installed CF-for-K8s, the wrapper that provides the Cloud Foundry experience for your developers. 

CF-for-k8s is an open-source community-driven effort enabled by the Cloud Foundry Foundation. For more information, please visit cf-for-k8s.io.

All our tutorials on Medium can be found at https://medium.com/cloud-foundry-foundation.
Captions: 
	00:00:00,880 --> 00:00:06,000
hello everyone

00:00:03,439 --> 00:00:07,040
thanks for viewing this tutorial about

00:00:06,000 --> 00:00:10,880
how to deploy

00:00:07,040 --> 00:00:14,719
php apps using cloud foundry

00:00:10,880 --> 00:00:17,279
php is one of those languages that has

00:00:14,719 --> 00:00:19,840
many different frameworks and

00:00:17,279 --> 00:00:23,199
bootstrapping methods

00:00:19,840 --> 00:00:26,480
it also is one of those languages which

00:00:23,199 --> 00:00:29,519
has the most active

00:00:26,480 --> 00:00:32,239
and loyal communities

00:00:29,519 --> 00:00:33,440
in this particular video you will learn

00:00:32,239 --> 00:00:36,960
how to deploy

00:00:33,440 --> 00:00:40,079
an app written in lumen lumen is a

00:00:36,960 --> 00:00:43,600
lightweight php framework that

00:00:40,079 --> 00:00:45,200
makes use of composer for dependency

00:00:43,600 --> 00:00:47,520
management

00:00:45,200 --> 00:00:49,520
the goal therefore of this video is to

00:00:47,520 --> 00:00:50,480
highlight how to make use of cloud

00:00:49,520 --> 00:00:52,559
foundry

00:00:50,480 --> 00:00:54,000
to deploy an app that is first

00:00:52,559 --> 00:00:56,160
scaffolded using

00:00:54,000 --> 00:00:58,559
composer install and then later needs to

00:00:56,160 --> 00:01:01,120
be deployed

00:00:58,559 --> 00:01:02,879
let's get right on to the deploy steps

00:01:01,120 --> 00:01:06,400
first step obviously

00:01:02,879 --> 00:01:09,600
is to check out code from github

00:01:06,400 --> 00:01:11,760
now this particular repo is a

00:01:09,600 --> 00:01:13,439
sample lumen application like i

00:01:11,760 --> 00:01:16,479
mentioned

00:01:13,439 --> 00:01:18,159
next i'll cd into the directory just to

00:01:16,479 --> 00:01:21,520
confirm

00:01:18,159 --> 00:01:24,799
the deployment target that we will use

00:01:21,520 --> 00:01:27,119
is a

00:01:24,799 --> 00:01:28,560
kubernetes cluster running on google

00:01:27,119 --> 00:01:31,360
cloud

00:01:28,560 --> 00:01:34,159
onto which a cf for gates has already

00:01:31,360 --> 00:01:34,159
been installed

00:01:35,119 --> 00:01:42,000
now let's just try to cf push this code

00:01:38,159 --> 00:01:44,720
and that is freshly checked out

00:01:42,000 --> 00:01:46,880
i am doing this with zero expectations

00:01:44,720 --> 00:01:50,159
that it will work

00:01:46,880 --> 00:01:53,680
and as expected it does error out

00:01:50,159 --> 00:01:58,479
now let's examine the logs for a bit to

00:01:53,680 --> 00:01:58,479
uncover why this build failed

00:01:58,799 --> 00:02:05,280
now from the logs i understand that

00:02:02,640 --> 00:02:07,040
creating the containers was not a

00:02:05,280 --> 00:02:08,160
problem and so the build actually

00:02:07,040 --> 00:02:11,920
succeeds

00:02:08,160 --> 00:02:15,040
but the app is unable to start because

00:02:11,920 --> 00:02:18,720
it cannot locate the dock root and

00:02:15,040 --> 00:02:18,720
cannot find the start command

00:02:19,760 --> 00:02:25,440
how do we resolve this cloud foundry

00:02:22,720 --> 00:02:28,239
makes use of a tool known as build packs

00:02:25,440 --> 00:02:30,480
to convert application source code into

00:02:28,239 --> 00:02:31,760
an immutable artifact that can be

00:02:30,480 --> 00:02:34,319
deployed

00:02:31,760 --> 00:02:35,120
build packs use several phases such as

00:02:34,319 --> 00:02:38,160
detect

00:02:35,120 --> 00:02:41,080
build deploy etc and

00:02:38,160 --> 00:02:43,720
we need to make use of a file known as

00:02:41,080 --> 00:02:47,519
buildpack.gml

00:02:43,720 --> 00:02:50,480
buildback.eml is a text file

00:02:47,519 --> 00:02:52,640
that contains all the specific

00:02:50,480 --> 00:02:55,840
parameters that are required to start

00:02:52,640 --> 00:02:58,239
and run this particular php application

00:02:55,840 --> 00:02:59,519
and it takes on a simple declarative

00:02:58,239 --> 00:03:02,800
format

00:02:59,519 --> 00:03:04,000
the build packs the tool can generally

00:03:02,800 --> 00:03:06,879
only cover a finite

00:03:04,000 --> 00:03:07,599
number of configuration permutations and

00:03:06,879 --> 00:03:12,000
so

00:03:07,599 --> 00:03:15,040
the need for build pack dot yaml arises

00:03:12,000 --> 00:03:16,800
uh also too much rigidity can hurt you

00:03:15,040 --> 00:03:19,840
know extensibility of the build pack

00:03:16,800 --> 00:03:19,840
itself therefore

00:03:20,080 --> 00:03:23,519
build packs make use of this particular

00:03:22,400 --> 00:03:25,200
file

00:03:23,519 --> 00:03:27,920
in order to parameterize it and

00:03:25,200 --> 00:03:31,360
externalize a lot of the

00:03:27,920 --> 00:03:33,840
specifics that are required

00:03:31,360 --> 00:03:38,080
in this particular case we add the

00:03:33,840 --> 00:03:40,560
following lines to the buildback.yaml

00:03:38,080 --> 00:03:43,680
first we specify the language that is

00:03:40,560 --> 00:03:46,159
being used in this case obviously php

00:03:43,680 --> 00:03:47,760
next we specify the dockroot for the

00:03:46,159 --> 00:03:51,440
application

00:03:47,760 --> 00:03:55,680
finally we add the start command

00:03:51,440 --> 00:03:58,400
to the buildpack.yaml save the file

00:03:55,680 --> 00:04:01,840
and now push the app using the same cf

00:03:58,400 --> 00:04:01,840
push command

00:04:06,400 --> 00:04:10,400
this time the build pack completes the

00:04:09,120 --> 00:04:12,319
build successfully

00:04:10,400 --> 00:04:14,319
and because the start command is also

00:04:12,319 --> 00:04:16,799
available the app

00:04:14,319 --> 00:04:18,880
is started so this completes the

00:04:16,799 --> 00:04:21,680
successful deploy

00:04:18,880 --> 00:04:24,240
let's now open this route that is

00:04:21,680 --> 00:04:26,880
generated in a browser

00:04:24,240 --> 00:04:28,479
and confirm that the app is in fact

00:04:26,880 --> 00:04:31,840
running and is lying

00:04:28,479 --> 00:04:36,160
then this is

00:04:31,840 --> 00:04:39,199
the app now one thing to remember

00:04:36,160 --> 00:04:40,560
the buildback.yaml is different from the

00:04:39,199 --> 00:04:43,600
manifest

00:04:40,560 --> 00:04:46,320
file so there are cloud foundry

00:04:43,600 --> 00:04:47,120
tutorials that specify a manifest file

00:04:46,320 --> 00:04:50,320
as well

00:04:47,120 --> 00:04:52,240
and the manifest file is also a simple

00:04:50,320 --> 00:04:54,000
declarative format

00:04:52,240 --> 00:04:55,759
contained in a text file that contains

00:04:54,000 --> 00:04:57,360
certain parameters that are required for

00:04:55,759 --> 00:05:01,280
the app to start

00:04:57,360 --> 00:05:04,320
the build pack is specifically for

00:05:01,280 --> 00:05:06,000
the language and framework dependencies

00:05:04,320 --> 00:05:09,120
whereas the manifest is more of

00:05:06,000 --> 00:05:11,440
a cloud foundry platform thing so

00:05:09,120 --> 00:05:13,680
just a distinction that you need to keep

00:05:11,440 --> 00:05:16,160
in mind

00:05:13,680 --> 00:05:17,120
hopefully this tutorial was useful to

00:05:16,160 --> 00:05:19,840
you there are a

00:05:17,120 --> 00:05:20,479
lot more tutorials on our youtube

00:05:19,840 --> 00:05:24,160
channel

00:05:20,479 --> 00:05:26,080
so youtube.com c cloud foundry

00:05:24,160 --> 00:05:28,320
foundation is our channel

00:05:26,080 --> 00:05:30,560
do check it out all the information you

00:05:28,320 --> 00:05:34,720
need about cloud foundry is available

00:05:30,560 --> 00:05:35,120
at cloudfoundry.org we also have a slack

00:05:34,720 --> 00:05:37,360
group

00:05:35,120 --> 00:05:38,320
where the entire cloud foundry community

00:05:37,360 --> 00:05:41,520
hangs out

00:05:38,320 --> 00:05:42,160
so if you have any queries do hop over

00:05:41,520 --> 00:05:45,520
to the

00:05:42,160 --> 00:05:46,960
slack community and get your queries

00:05:45,520 --> 00:05:52,160
clarified

00:05:46,960 --> 00:05:52,160

YouTube URL: https://www.youtube.com/watch?v=jkq-Cr8Ap7M


