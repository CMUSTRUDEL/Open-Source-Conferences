Title: Deploy A Static Site To Kubernetes With Cloud Foundry
Publication date: 2020-12-15
Playlist: Getting Started With Cloud Foundry
Description: 
	Deploying static sites has never been easier, thanks to Cloud Foundry!

Cloud Foundry is a community-driven, open-source project aimed at bringing a PaaS experience to operate on your infrastructure that is running virtual machines or Kubernetes. It simplifies a lot of the complexity commonly associated with deploying web applications.

Learn more at cloudfoundry.org
Captions: 
	00:00:01,850 --> 00:00:06,000
[Music]

00:00:05,040 --> 00:00:07,520
hey folks

00:00:06,000 --> 00:00:10,080
so today i'm going to show you how to

00:00:07,520 --> 00:00:11,519
deploy a static site on cloud foundry

00:00:10,080 --> 00:00:13,120
um for the purpose of this tutorial i'm

00:00:11,519 --> 00:00:14,080
using god's b body processes that i'm

00:00:13,120 --> 00:00:17,119
going to show you

00:00:14,080 --> 00:00:19,279
would work for almost all um

00:00:17,119 --> 00:00:21,920
static style generators from hexo to

00:00:19,279 --> 00:00:24,000
hugo to jq etc so the first thing you'd

00:00:21,920 --> 00:00:27,039
want to do is log into cloud foundry

00:00:24,000 --> 00:00:28,880
so um cf login i'm going to be using any

00:00:27,039 --> 00:00:31,920
nines for this but you can use

00:00:28,880 --> 00:00:34,399
um any cloud foundry um commercial

00:00:31,920 --> 00:00:37,600
distribution available or the open

00:00:34,399 --> 00:00:37,600
source cloud foundry itself

00:00:38,320 --> 00:00:41,680
so after logging in i would actually

00:00:40,239 --> 00:00:43,520
select the space so

00:00:41,680 --> 00:00:45,200
i'm going to use in production because i

00:00:43,520 --> 00:00:47,120
mean i'm trying to push live

00:00:45,200 --> 00:00:49,200
so the next thing is to check if you

00:00:47,120 --> 00:00:50,960
would need the manifest so why

00:00:49,200 --> 00:00:52,800
manifest the web which is a yamu file

00:00:50,960 --> 00:00:54,399
that contains um

00:00:52,800 --> 00:00:56,000
all the instructions that you need cloud

00:00:54,399 --> 00:00:56,879
foundry to follow when deploying your

00:00:56,000 --> 00:00:58,480
application

00:00:56,879 --> 00:01:00,160
so i can show you an example of the one

00:00:58,480 --> 00:01:01,760
i used i used it because i had i didn't

00:01:00,160 --> 00:01:03,039
want to type a very long command to

00:01:01,760 --> 00:01:04,320
specify some things

00:01:03,039 --> 00:01:06,400
but if your application is a small

00:01:04,320 --> 00:01:07,840
application and you don't need so many

00:01:06,400 --> 00:01:09,119
processes to happen

00:01:07,840 --> 00:01:11,680
while your application has been deployed

00:01:09,119 --> 00:01:12,960
then you can just cf push push directly

00:01:11,680 --> 00:01:16,320
or use the command so

00:01:12,960 --> 00:01:17,759
on my manifest the yml file i specify

00:01:16,320 --> 00:01:19,840
the name of the site

00:01:17,759 --> 00:01:21,280
uh static site demo the memory the

00:01:19,840 --> 00:01:21,920
amount of memory i want to be allocated

00:01:21,280 --> 00:01:23,920
to

00:01:21,920 --> 00:01:26,240
start to decide then the path this is

00:01:23,920 --> 00:01:28,000
what the folder i want to be deployed by

00:01:26,240 --> 00:01:28,799
cloud foundry i mean you as you have in

00:01:28,000 --> 00:01:31,119
static sites

00:01:28,799 --> 00:01:32,000
when you build is a beaut folder a much

00:01:31,119 --> 00:01:33,920
smaller beautiful

00:01:32,000 --> 00:01:35,360
that you can use to deploy live and the

00:01:33,920 --> 00:01:36,960
boot pack i specified the

00:01:35,360 --> 00:01:38,400
start static file build pack there are

00:01:36,960 --> 00:01:41,520
other types of build pack like

00:01:38,400 --> 00:01:43,360
um node.js rubygo etc

00:01:41,520 --> 00:01:44,799
so the next thing is just cf push so

00:01:43,360 --> 00:01:46,720
when i do cf push

00:01:44,799 --> 00:01:48,000
cloudfoundry automatically gets all the

00:01:46,720 --> 00:01:49,600
information i've specified in my

00:01:48,000 --> 00:01:51,759
manifest the wireman file i use it to

00:01:49,600 --> 00:01:54,720
deploy my application but if i do not

00:01:51,759 --> 00:01:57,520
specify manifest the yma file it would

00:01:54,720 --> 00:02:00,560
automatically do things

00:01:57,520 --> 00:02:01,920
detects the language of the static file

00:02:00,560 --> 00:02:02,799
or the whatever application you are

00:02:01,920 --> 00:02:06,479
building and

00:02:02,799 --> 00:02:07,520
uses the default um settings for it so

00:02:06,479 --> 00:02:11,440
it's going to try and diploma

00:02:07,520 --> 00:02:11,440
application now takes a few seconds

00:02:12,000 --> 00:02:15,120
and boom application has um been

00:02:13,920 --> 00:02:15,760
deployed and has also started the

00:02:15,120 --> 00:02:17,599
application

00:02:15,760 --> 00:02:18,879
so now to access our application what we

00:02:17,599 --> 00:02:20,720
need to do is

00:02:18,879 --> 00:02:22,560
we need to space click on on the router

00:02:20,720 --> 00:02:24,080
generate the routes to erupt is a

00:02:22,560 --> 00:02:25,599
live link where we can see application

00:02:24,080 --> 00:02:26,560
deployed light over the internet so when

00:02:25,599 --> 00:02:29,360
we click on

00:02:26,560 --> 00:02:30,800
this it should show me my application

00:02:29,360 --> 00:02:34,560
live so everything works

00:02:30,800 --> 00:02:37,200
it should be um dark mode like um

00:02:34,560 --> 00:02:37,920
light mode so that's it that's how you

00:02:37,200 --> 00:02:41,360
can deploy

00:02:37,920 --> 00:02:51,040
a static site's website

00:02:41,360 --> 00:02:51,040

YouTube URL: https://www.youtube.com/watch?v=Npxr2Q5ecGk


