Title: Cloud Native Java
Publication date: 2017-06-22
Playlist: Cloud Foundry Summit Silicon Valley 2017
Description: 
	Cloud Native Java [B] - Josh Long, Pivotal  

“It is not necessary to change. Survival is not mandatory.” -W. Edwards Deming

Work takes time to flow through an organization and ultimately be deployed to production where it captures value. It’s critical to reduce time-to-production. Software - for many organizations and industries - is a competitive advantage.

Organizations break their larger software ambitions into smaller, independently deployable, feature -centric batches of work - microservices. In order to reduce the round-trip between stations of work, organizations collapse or consolidate as much of them as possible and automate the rest; developers and operations beget “devops,” cloud-based services and platforms (like Cloud Foundry) automate operations work and break down the need for ITIL tickets and change management boards.

But velocity, for velocity’s sake, is dangerous. Microservices invite architectural complexity that few are prepared to address. In this talk, we’ll look at how high performance organizations like Ticketmaster, Alibaba, and Netflix make short work of that complexity with Spring Boot and Spring Cloud.

Josh Long
Pivotal
Spring Developer Advocate
Josh (@starbuxman) is the Spring Developer Advocate at Pivotal. Josh is a Java Champion, author of 5 books (including O'Reilly's upcoming Cloud Native Java: Designing Resilient Systems with Spring Boot, Spring Cloud, and Cloud Foundry) and 3 best-selling video trainings (including Building Microservices with Spring Boot Livelessons with Spring Boot co-founder Phil Webb), and an open-source contributor (Spring Boot, Spring Integration, Spring Cloud, Activiti and Vaadin)
Captions: 
	00:00:00,060 --> 00:00:03,000
you're Richard thank you so much I

00:00:01,560 --> 00:00:04,710
appreciate that my friend good to see

00:00:03,000 --> 00:00:07,230
you as usual let's get a photo before we

00:00:04,710 --> 00:00:09,480
get going most important bit the most

00:00:07,230 --> 00:00:11,490
important thing I managed to do when I'm

00:00:09,480 --> 00:00:12,840
in a conference is to capture the fact

00:00:11,490 --> 00:00:14,219
that I was there because otherwise

00:00:12,840 --> 00:00:16,680
what's the point so you stand over there

00:00:14,219 --> 00:00:19,230
and then and then the rest of you when

00:00:16,680 --> 00:00:23,060
we say open source you all smile and say

00:00:19,230 --> 00:00:27,840
open source as well okay ready steady

00:00:23,060 --> 00:00:30,570
open source ah thank you money good

00:00:27,840 --> 00:00:38,340
stuff hot sauce well done why not thank

00:00:30,570 --> 00:00:39,840
you very much so let's see we have very

00:00:38,340 --> 00:00:41,430
little time and so much to cover I

00:00:39,840 --> 00:00:43,920
didn't realize until just a little while

00:00:41,430 --> 00:00:46,500
ago that this is a 30 minute talk and

00:00:43,920 --> 00:00:49,110
normally this talk is a good solid dense

00:00:46,500 --> 00:00:50,730
end-to-end wall-to-wall one hour so

00:00:49,110 --> 00:00:52,590
we're gonna go very quickly and we're

00:00:50,730 --> 00:00:53,640
gonna cover a lot of stuff but I want to

00:00:52,590 --> 00:00:55,140
remind you that you don't need to

00:00:53,640 --> 00:00:57,449
remember everything that we're gonna

00:00:55,140 --> 00:00:59,070
cover just note they repository note

00:00:57,449 --> 00:01:00,390
that github URL there for your own

00:00:59,070 --> 00:01:04,290
written forget reference identification

00:01:00,390 --> 00:01:05,970
for later keep that in mind if you have

00:01:04,290 --> 00:01:07,350
questions or comments or feedback cause

00:01:05,970 --> 00:01:09,150
you want to talk about what we're gonna

00:01:07,350 --> 00:01:10,920
talk about today and you have you know

00:01:09,150 --> 00:01:11,640
ideas whatever don't hesitate to find me

00:01:10,920 --> 00:01:13,619
on the Internet

00:01:11,640 --> 00:01:16,340
how many of you by show of hands are on

00:01:13,619 --> 00:01:19,979
Twitter I'm just curious twitter twitter

00:01:16,340 --> 00:01:21,720
the rest of you get on twitter it's a

00:01:19,979 --> 00:01:23,369
great place to be it's the new IRC if

00:01:21,720 --> 00:01:24,720
you're developer using open source and

00:01:23,369 --> 00:01:26,400
you owe it to yourself to engage with

00:01:24,720 --> 00:01:27,780
the developers that drive the the source

00:01:26,400 --> 00:01:29,250
that powers your business and we're all

00:01:27,780 --> 00:01:29,880
there on Twitter happy to answer

00:01:29,250 --> 00:01:35,130
questions

00:01:29,880 --> 00:01:39,390
what about email email e-mail in anybody

00:01:35,130 --> 00:01:41,670
email email no okay so that's what we

00:01:39,390 --> 00:01:43,140
had before slack right so find us there

00:01:41,670 --> 00:01:44,700
if you want find me there I'm happy to

00:01:43,140 --> 00:01:46,530
engage a little bit about me my name is

00:01:44,700 --> 00:01:48,630
Josh long I'm a spring developer

00:01:46,530 --> 00:01:50,159
advocate on the spring team I'm an open

00:01:48,630 --> 00:01:52,439
source contributor an engineer I have

00:01:50,159 --> 00:01:54,750
been for now going on almost eight years

00:01:52,439 --> 00:01:56,280
the number one top ranked most prolific

00:01:54,750 --> 00:02:01,079
most visible most widely acclaimed

00:01:56,280 --> 00:02:03,329
contributor of bugs of bugs but still

00:02:01,079 --> 00:02:05,700
number one number one right number one

00:02:03,329 --> 00:02:07,079
contributor for all team members for all

00:02:05,700 --> 00:02:08,940
the treatment projects on which I work

00:02:07,079 --> 00:02:10,649
more bugs per commit than any other

00:02:08,940 --> 00:02:11,890
contributor so that's that right there's

00:02:10,649 --> 00:02:13,360
that at least and

00:02:11,890 --> 00:02:15,010
I do my best engage with the community I

00:02:13,360 --> 00:02:16,450
speak to audiences to conferences to

00:02:15,010 --> 00:02:19,120
companies and businesses organizations

00:02:16,450 --> 00:02:21,190
and we talk about how to build better

00:02:19,120 --> 00:02:22,660
systems in terms of you know usually

00:02:21,190 --> 00:02:24,310
these days spring in the client fund the

00:02:22,660 --> 00:02:26,410
ecosystem and as part of that I read

00:02:24,310 --> 00:02:28,120
books and do training videos and so on

00:02:26,410 --> 00:02:29,860
so I just finished my second to the

00:02:28,120 --> 00:02:31,270
second installment of building micro

00:02:29,860 --> 00:02:32,650
services with spring boot live lessons

00:02:31,270 --> 00:02:34,660
with my friend the one the only the

00:02:32,650 --> 00:02:37,300
amazing the inimitable Phil Webb and I

00:02:34,660 --> 00:02:39,850
just finished writing a book called

00:02:37,300 --> 00:02:41,290
cloud native Java and that book for

00:02:39,850 --> 00:02:43,000
those of you are wondering for those of

00:02:41,290 --> 00:02:44,140
you wondering about that book and in

00:02:43,000 --> 00:02:49,560
particular for those of you wondering

00:02:44,140 --> 00:02:52,030
about the cover to that book that bird

00:02:49,560 --> 00:02:53,739
now anybody who knows anything knows

00:02:52,030 --> 00:02:56,310
that the animal on the Riley books is

00:02:53,739 --> 00:03:01,290
the most important part so that book

00:02:56,310 --> 00:03:05,590
that bird is a blue eared Kingfisher

00:03:01,290 --> 00:03:08,650
it's a bird that is indigenous or as we

00:03:05,590 --> 00:03:16,750
say in English native to the Indonesian

00:03:08,650 --> 00:03:21,340
Java Islands and birds fly often through

00:03:16,750 --> 00:03:23,350
the clouds so it's a bird that is native

00:03:21,340 --> 00:03:27,840
to Java that flies through the clouds

00:03:23,350 --> 00:03:27,840
it's a cloud native java bird

00:03:28,650 --> 00:03:35,200
thank you yes thank you

00:03:31,569 --> 00:03:37,540
a huge Kingfisher the cloud native Java

00:03:35,200 --> 00:03:39,670
bird very good and so I look at pendulum

00:03:37,540 --> 00:03:41,290
this is some amazing I work by my team

00:03:39,670 --> 00:03:45,310
member and friend asked him if no victim

00:03:41,290 --> 00:03:46,629
on Amara who is she has art in her heart

00:03:45,310 --> 00:03:48,579
and that's awesome so these pivotal

00:03:46,629 --> 00:03:50,590
logos are sort of as if via The Simpsons

00:03:48,579 --> 00:03:51,879
team drew or something it's great so I

00:03:50,590 --> 00:03:53,290
work at pivotal and we have a lot of

00:03:51,879 --> 00:03:55,810
great open-source software at pivotal we

00:03:53,290 --> 00:03:57,430
care very much about the open-source at

00:03:55,810 --> 00:03:59,590
pivotal but let's be very clear what

00:03:57,430 --> 00:04:02,500
motivates us which drives us the thing

00:03:59,590 --> 00:04:05,650
that causes me in particular to spring

00:04:02,500 --> 00:04:07,629
out of bed is that we care about

00:04:05,650 --> 00:04:10,359
delivering software and value to

00:04:07,629 --> 00:04:12,010
production faster and safer whenever

00:04:10,359 --> 00:04:13,030
possible we see the lot of organizations

00:04:12,010 --> 00:04:14,739
struggle with this they want to go

00:04:13,030 --> 00:04:16,239
faster but they struggle because they

00:04:14,739 --> 00:04:17,859
have these large existing monolithic

00:04:16,239 --> 00:04:19,750
applications these applications written

00:04:17,859 --> 00:04:21,370
in yesteryear at a time before the era

00:04:19,750 --> 00:04:23,199
of cloud computing and economics of

00:04:21,370 --> 00:04:25,330
cloud computing or so manifests and so

00:04:23,199 --> 00:04:27,009
imparied so they try and take these

00:04:25,330 --> 00:04:28,780
large applications and decompose them

00:04:27,009 --> 00:04:30,820
into smaller batches smaller batches

00:04:28,780 --> 00:04:33,010
that allow smaller teams to deliver

00:04:30,820 --> 00:04:34,720
value faster without having so much sort

00:04:33,010 --> 00:04:36,550
of urban sprawl without having to worry

00:04:34,720 --> 00:04:39,159
about the impact of changes to the code

00:04:36,550 --> 00:04:42,010
base you know propagating out to large

00:04:39,159 --> 00:04:44,979
amounts of code smaller batches of work

00:04:42,010 --> 00:04:46,840
that small teams can focus on did they

00:04:44,979 --> 00:04:47,830
can develop them test them deploy them

00:04:46,840 --> 00:04:50,800
in maximum production

00:04:47,830 --> 00:04:52,389
a small batch of work makes it easier

00:04:50,800 --> 00:04:54,430
for organizations to go faster we call

00:04:52,389 --> 00:04:57,340
these small batches of work micro

00:04:54,430 --> 00:04:59,470
service micro services give you the

00:04:57,340 --> 00:05:01,539
ability to describe small amounts of

00:04:59,470 --> 00:05:03,220
functionality and make them easy for

00:05:01,539 --> 00:05:05,919
small teams to work and operationalize

00:05:03,220 --> 00:05:07,300
and test and so on they give you the

00:05:05,919 --> 00:05:08,650
ability to go faster but when you move

00:05:07,300 --> 00:05:11,919
to this architecture when you move to

00:05:08,650 --> 00:05:14,289
micro services you run headlong into two

00:05:11,919 --> 00:05:16,800
big problems two big panes I call them

00:05:14,289 --> 00:05:19,830
the hemorrhoids of cloud computing

00:05:16,800 --> 00:05:22,730
do you know what a hemorrhoid is friends

00:05:19,830 --> 00:05:27,350
it's a real pain in the

00:05:22,730 --> 00:05:30,290
the cloud the first M roid is how

00:05:27,350 --> 00:05:32,780
quickly from zero to 60 can you stand up

00:05:30,290 --> 00:05:34,940
a production worthy service and all that

00:05:32,780 --> 00:05:35,900
that implies how quickly can you address

00:05:34,940 --> 00:05:39,170
heartbeat detection

00:05:35,900 --> 00:05:41,150
SSL security observability management

00:05:39,170 --> 00:05:42,680
you know infrastructure like your

00:05:41,150 --> 00:05:47,570
environment your operating system your

00:05:42,680 --> 00:05:49,280
RAM CPU servers themselves how quickly

00:05:47,570 --> 00:05:50,390
can do all of that for every single new

00:05:49,280 --> 00:05:51,890
service remember when you move to this

00:05:50,390 --> 00:05:53,300
approach you're gonna stand up a lot of

00:05:51,890 --> 00:05:55,250
new services so that becomes a

00:05:53,300 --> 00:05:58,820
prohibitive cost unless you can automate

00:05:55,250 --> 00:05:59,510
it down to zero or codify it that's the

00:05:58,820 --> 00:06:01,640
first problem

00:05:59,510 --> 00:06:03,860
and for this of course today you know we

00:06:01,640 --> 00:06:05,030
often talk about spring boot as a way to

00:06:03,860 --> 00:06:06,920
address these concerns in the

00:06:05,030 --> 00:06:08,210
application tier and then cloud Finder

00:06:06,920 --> 00:06:09,710
is a way to sort of address these

00:06:08,210 --> 00:06:11,810
concerns in the infrastructure and

00:06:09,710 --> 00:06:13,670
operations tier and they work sort of

00:06:11,810 --> 00:06:17,150
side-by-side they they serve each other

00:06:13,670 --> 00:06:19,850
one helping the other the second

00:06:17,150 --> 00:06:21,230
hemorrhoid is once you've done this once

00:06:19,850 --> 00:06:23,630
you've built a system with lots of small

00:06:21,230 --> 00:06:26,600
singly focused reusable independently

00:06:23,630 --> 00:06:27,980
deployable micro services you've got

00:06:26,600 --> 00:06:30,710
things that are talking to each other in

00:06:27,980 --> 00:06:33,530
a distributed system possibly over

00:06:30,710 --> 00:06:35,000
network partitions you've introduced the

00:06:33,530 --> 00:06:37,220
complexity of building a distributed

00:06:35,000 --> 00:06:39,680
distributed system and in so doing

00:06:37,220 --> 00:06:41,270
you've invited much more pain into your

00:06:39,680 --> 00:06:43,010
life and if that if you're not prepared

00:06:41,270 --> 00:06:46,730
to deal with that complexity then you're

00:06:43,010 --> 00:06:48,260
gonna fail so we need to get past all of

00:06:46,730 --> 00:06:50,450
these pains before we can embrace this

00:06:48,260 --> 00:06:52,160
architecture we know that most

00:06:50,450 --> 00:06:53,750
organizations not yours but most

00:06:52,160 --> 00:06:56,630
organizations and again I stress I know

00:06:53,750 --> 00:06:59,960
it's not yours most organizations have

00:06:56,630 --> 00:07:02,180
the dreaded wiki page a wiki page with

00:06:59,960 --> 00:07:04,540
all the things that you need to do on

00:07:02,180 --> 00:07:06,640
the 500 easy steps to production

00:07:04,540 --> 00:07:09,290
that's not your organization right

00:07:06,640 --> 00:07:11,120
you're continuously delivering value at

00:07:09,290 --> 00:07:12,620
the best amount I'm sure but if you

00:07:11,120 --> 00:07:15,020
aren't then you need to get past that

00:07:12,620 --> 00:07:16,460
that wiki page you need to reduce the

00:07:15,020 --> 00:07:18,200
cost of standing up a new service and

00:07:16,460 --> 00:07:19,970
seeing it result in production to almost

00:07:18,200 --> 00:07:20,780
nothing it should be immediate so that

00:07:19,970 --> 00:07:23,150
you can focus on the business

00:07:20,780 --> 00:07:24,860
differentiating functionality so we're

00:07:23,150 --> 00:07:26,660
going to talk about spring boot and

00:07:24,860 --> 00:07:28,070
spring and cloud foundry is the first so

00:07:26,660 --> 00:07:29,420
to address the first problem I'm going

00:07:28,070 --> 00:07:31,220
to talk about spring cloud to address

00:07:29,420 --> 00:07:33,530
the complexity and the second one now

00:07:31,220 --> 00:07:34,880
let's build a new application okay I'm

00:07:33,530 --> 00:07:36,380
going to build a new application here at

00:07:34,880 --> 00:07:38,750
start that's

00:07:36,380 --> 00:07:40,250
that I owe this is my second favorite

00:07:38,750 --> 00:07:42,950
place on the internet anybody who knows

00:07:40,250 --> 00:07:44,450
me knows that my first favorite place on

00:07:42,950 --> 00:07:46,910
the Internet is production

00:07:44,450 --> 00:07:49,040
I love production you should love

00:07:46,910 --> 00:07:50,810
production bring your kids bring your

00:07:49,040 --> 00:07:53,270
family it's the happiest place on earth

00:07:50,810 --> 00:07:54,620
it's better than Disneyland go early and

00:07:53,270 --> 00:07:56,360
go often the weather is amazing this

00:07:54,620 --> 00:07:57,530
time of year but if you're not already

00:07:56,360 --> 00:08:00,140
in production then you begin your

00:07:57,530 --> 00:08:01,720
journey here and start that spring that

00:08:00,140 --> 00:08:05,480
IO

00:08:01,720 --> 00:08:07,240
if you want for inspiration in the early

00:08:05,480 --> 00:08:14,060
morning before your cup of tea or coffee

00:08:07,240 --> 00:08:15,650
start that spring that IO if your

00:08:14,060 --> 00:08:21,290
children are restless and can't sleep

00:08:15,650 --> 00:08:23,300
start that spring that IO and if you

00:08:21,290 --> 00:08:29,570
suffer from indigestion after a long

00:08:23,300 --> 00:08:32,720
night of alcohol abuse in PHP start that

00:08:29,570 --> 00:08:33,979
spring that IO so we're gonna build a

00:08:32,720 --> 00:08:36,020
simple application I'm not gonna fit

00:08:33,979 --> 00:08:37,010
spend too long on the application itself

00:08:36,020 --> 00:08:38,720
but I want to design and build an

00:08:37,010 --> 00:08:40,340
application that we can use as something

00:08:38,720 --> 00:08:41,539
that we can sort of play with right so

00:08:40,340 --> 00:08:43,310
I'm going to build a service that

00:08:41,539 --> 00:08:44,270
manages entities of type reservation

00:08:43,310 --> 00:08:45,770
we're gonna call it the reservation

00:08:44,270 --> 00:08:48,200
service and we're going to use some

00:08:45,770 --> 00:08:49,250
spring boots and spring clouds support

00:08:48,200 --> 00:08:50,990
for building web applications we're

00:08:49,250 --> 00:08:52,190
gonna use the web support here we're

00:08:50,990 --> 00:08:53,330
gonna use the config client for

00:08:52,190 --> 00:08:54,770
centralized configuration will use

00:08:53,330 --> 00:08:56,600
Eureka for service registration and

00:08:54,770 --> 00:08:59,240
discovery we use Zipkin for distributed

00:08:56,600 --> 00:09:00,740
tracing we use the web the rest

00:08:59,240 --> 00:09:02,960
repository support to build a REST API

00:09:00,740 --> 00:09:05,780
we're going to build an application that

00:09:02,960 --> 00:09:07,040
talks to a database so we use JPA and of

00:09:05,780 --> 00:09:08,750
course the question comes up which

00:09:07,040 --> 00:09:11,300
database do we want to use so I'm going

00:09:08,750 --> 00:09:14,240
to use h2 now h2 is an in-memory

00:09:11,300 --> 00:09:16,130
embedded sequel database because it's in

00:09:14,240 --> 00:09:18,290
memory and embedded it's going to lose

00:09:16,130 --> 00:09:20,150
all of its data on every single restart

00:09:18,290 --> 00:09:22,040
so every single time we restart that

00:09:20,150 --> 00:09:24,170
process all the data will be gone in

00:09:22,040 --> 00:09:26,000
this way it's very similar to MongoDB it

00:09:24,170 --> 00:09:27,890
just loses the data all the time for no

00:09:26,000 --> 00:09:29,990
reason at all just loses all the data

00:09:27,890 --> 00:09:32,930
all the time right so there's a lot of

00:09:29,990 --> 00:09:34,490
similarities there we're gonna use also

00:09:32,930 --> 00:09:35,990
the actuator for observability and

00:09:34,490 --> 00:09:37,550
operational concerns and I think for now

00:09:35,990 --> 00:09:39,500
that ought to suit us so let's go ahead

00:09:37,550 --> 00:09:41,150
and hit generate and we'll open up this

00:09:39,500 --> 00:09:43,130
project in our IDE and it doesn't really

00:09:41,150 --> 00:09:44,030
all that much matter if we're honest it

00:09:43,130 --> 00:09:46,040
doesn't really all that much matter

00:09:44,030 --> 00:09:48,080
which ID we use right so I'm going to

00:09:46,040 --> 00:09:50,170
use IntelliJ but how many of you are

00:09:48,080 --> 00:09:52,910
using eclipse

00:09:50,170 --> 00:09:54,650
right on good stuff hot sauce works just

00:09:52,910 --> 00:09:57,260
fine what about knit beans what about

00:09:54,650 --> 00:09:58,790
NetBeans here right now I'm good stuff

00:09:57,260 --> 00:10:00,880
as well right rock on

00:09:58,790 --> 00:10:04,430
what about Emacs are you here sir

00:10:00,880 --> 00:10:07,430
where's the Emacs guy every conference I

00:10:04,430 --> 00:10:09,380
go to there's one human same object

00:10:07,430 --> 00:10:12,950
identity every every city continent and

00:10:09,380 --> 00:10:14,600
country it's the same guy I ask who uses

00:10:12,950 --> 00:10:18,410
Emacs and you raises a hand he says I do

00:10:14,600 --> 00:10:19,910
and then he leaves presumably to troll

00:10:18,410 --> 00:10:22,180
me in some other city continent and

00:10:19,910 --> 00:10:24,260
country anyway

00:10:22,180 --> 00:10:26,390
we're gonna open up this project in our

00:10:24,260 --> 00:10:28,250
IDE and I'm just gonna you know build a

00:10:26,390 --> 00:10:29,390
simple application I've I've already

00:10:28,250 --> 00:10:31,010
remembered I've just remembered that

00:10:29,390 --> 00:10:32,900
I've forgotten to include the Lombok

00:10:31,010 --> 00:10:35,029
annotation compile time processor so

00:10:32,900 --> 00:10:36,320
we'll do that first thing I will comment

00:10:35,029 --> 00:10:38,870
out some of the dependencies that we

00:10:36,320 --> 00:10:40,550
don't need just yet okay so here we are

00:10:38,870 --> 00:10:42,230
gonna go to Palm that XML this is our

00:10:40,550 --> 00:10:43,490
maven build can you see that font in the

00:10:42,230 --> 00:10:47,660
back my friends do I need to make that

00:10:43,490 --> 00:10:56,480
larger larger okay good stuff

00:10:47,660 --> 00:11:00,890
let's see alt F settings font okay yeah

00:10:56,480 --> 00:11:01,779
we are and it's gonna say go on more

00:11:00,890 --> 00:11:05,720
bigger

00:11:01,779 --> 00:11:07,850
okay very good can you see that sweet

00:11:05,720 --> 00:11:09,260
and nectar good so let's see we don't

00:11:07,850 --> 00:11:10,580
want the config client we don't Yurika

00:11:09,260 --> 00:11:12,410
we don't want that for now we'll leave

00:11:10,580 --> 00:11:14,150
those bits off we're gonna get rid of

00:11:12,410 --> 00:11:15,860
the we leave everything else I think as

00:11:14,150 --> 00:11:17,720
is and we're gonna bring in Lombok right

00:11:15,860 --> 00:11:19,820
this is the compile time annotation

00:11:17,720 --> 00:11:21,170
processor so there's that bring that

00:11:19,820 --> 00:11:22,670
into the class path and we're gonna

00:11:21,170 --> 00:11:24,320
build an application here that manages

00:11:22,670 --> 00:11:25,940
entities right so I'm going to call this

00:11:24,320 --> 00:11:27,230
entity a reservation it's just going to

00:11:25,940 --> 00:11:29,029
be any kind of reservation it's gonna be

00:11:27,230 --> 00:11:31,430
a hotel reservation it'll be a

00:11:29,029 --> 00:11:32,660
reservation at a restaurant it could be

00:11:31,430 --> 00:11:34,339
whatever you want we don't care I don't

00:11:32,660 --> 00:11:36,380
I don't want to linger too long so we're

00:11:34,339 --> 00:11:38,959
gonna have a field here private long id

00:11:36,380 --> 00:11:41,330
I'm gonna make this an ID at generated

00:11:38,959 --> 00:11:42,650
value right this is just an object that

00:11:41,330 --> 00:11:44,510
I'll have a value that'll be auto

00:11:42,650 --> 00:11:45,350
incrementing in the database and we're

00:11:44,510 --> 00:11:47,630
gonna have a field here called

00:11:45,350 --> 00:11:48,770
reservation name which will be the name

00:11:47,630 --> 00:11:50,540
of the reservation that we're gonna

00:11:48,770 --> 00:11:52,010
store in the database as well and that

00:11:50,540 --> 00:11:53,810
my friends is the essence of what we

00:11:52,010 --> 00:11:55,040
want but if I were using traditional job

00:11:53,810 --> 00:11:56,540
I would have to you know create some

00:11:55,040 --> 00:11:58,310
getters and setters and constructors and

00:11:56,540 --> 00:11:59,600
so on so instead I'll just use Lombok

00:11:58,310 --> 00:12:03,390
right now I'm using Lombok here to

00:11:59,600 --> 00:12:04,980
create the no arguments constructors and

00:12:03,390 --> 00:12:07,110
all argument constructor and so on and

00:12:04,980 --> 00:12:09,000
I'll create one more constructor just

00:12:07,110 --> 00:12:10,650
for my name here and what I wanna do is

00:12:09,000 --> 00:12:11,700
I want to save instances of this record

00:12:10,650 --> 00:12:13,890
in the database I'm gonna create a

00:12:11,700 --> 00:12:16,680
repository I'll say reservation

00:12:13,890 --> 00:12:18,570
repository extends JP a repository and

00:12:16,680 --> 00:12:19,770
it's gonna be an entity of type

00:12:18,570 --> 00:12:22,080
reservation that we'll manage

00:12:19,770 --> 00:12:23,520
whose primary keys or type of long so

00:12:22,080 --> 00:12:27,900
there's that now I'm gonna save some

00:12:23,520 --> 00:12:31,950
sample data into the database right so

00:12:27,900 --> 00:12:33,390
the sample data clr implements command

00:12:31,950 --> 00:12:36,630
line runner it's gonna be a component

00:12:33,390 --> 00:12:37,860
that implements command line run and

00:12:36,630 --> 00:12:39,900
when spring starts up it's gonna call

00:12:37,860 --> 00:12:41,340
this run method passing in the public

00:12:39,900 --> 00:12:43,380
static void main string arguments array

00:12:41,340 --> 00:12:44,700
and then here we'll just say that we

00:12:43,380 --> 00:12:49,680
want to inject the reservation

00:12:44,700 --> 00:12:51,300
repository okay and use that as the as a

00:12:49,680 --> 00:12:54,930
bean that we can use to instantiate some

00:12:51,300 --> 00:12:55,740
sample records so we'll say scream oh my

00:12:54,930 --> 00:13:00,810
name is Josh

00:12:55,740 --> 00:13:02,250
Oh Richard actually I'm not doing

00:13:00,810 --> 00:13:10,230
alphabetical order but I should have

00:13:02,250 --> 00:13:12,540
read it who else who else Oh James there

00:13:10,230 --> 00:13:15,810
we go that gets us to that's two names

00:13:12,540 --> 00:13:24,030
so that's that's six we need at least

00:13:15,810 --> 00:13:27,950
two more Abbey there we go I'm trying to

00:13:24,030 --> 00:13:27,950
think of names names are hard my friend

00:13:28,880 --> 00:13:34,220
who wanted to move my last victim miss

00:13:31,380 --> 00:13:36,060
what's your name how do you spell that

00:13:34,220 --> 00:13:37,950
very good thank you that's a nice

00:13:36,060 --> 00:13:39,780
symmetrical even number eight records

00:13:37,950 --> 00:13:40,980
I'm gonna say that for every name we

00:13:39,780 --> 00:13:43,010
have in there in the category there

00:13:40,980 --> 00:13:45,600
we're gonna write it out to the database

00:13:43,010 --> 00:13:46,920
so there we are and we're gonna say it

00:13:45,600 --> 00:13:48,570
reservation repository are just gonna

00:13:46,920 --> 00:13:52,610
confirm everything's worked as we expect

00:13:48,570 --> 00:13:56,040
I'm going to say for each for each

00:13:52,610 --> 00:13:57,660
system.out.print line and we'll print

00:13:56,040 --> 00:13:59,310
out the data as we see it so there we go

00:13:57,660 --> 00:14:01,020
those are our records we're gonna run

00:13:59,310 --> 00:14:02,790
the program and confirm that everything

00:14:01,020 --> 00:14:04,500
is working as we expect it to now I'm

00:14:02,790 --> 00:14:06,090
gonna have an application but I want to

00:14:04,500 --> 00:14:08,190
build a REST API so I could do this the

00:14:06,090 --> 00:14:10,260
hard way and build a rest controller but

00:14:08,190 --> 00:14:11,790
instead what I want to do is a instead I

00:14:10,260 --> 00:14:14,160
want to take this repository and just

00:14:11,790 --> 00:14:15,810
annotate it as a REST API we'll say a

00:14:14,160 --> 00:14:17,160
repository rest resource and then

00:14:15,810 --> 00:14:19,470
restart the application

00:14:17,160 --> 00:14:22,820
and we'll see that hopefully hopefully

00:14:19,470 --> 00:14:25,410
spin up so localhost:8080

00:14:22,820 --> 00:14:27,270
forward slash reservations there's our

00:14:25,410 --> 00:14:28,830
REST API hypermedia links you know this

00:14:27,270 --> 00:14:29,490
promotes a design pattern called

00:14:28,830 --> 00:14:31,560
hypermedia

00:14:29,490 --> 00:14:33,210
or how do s rather hypermedia as the

00:14:31,560 --> 00:14:34,440
engine of application state it's the

00:14:33,210 --> 00:14:35,520
idea that every rest resource has a

00:14:34,440 --> 00:14:37,140
different information in the response

00:14:35,520 --> 00:14:38,700
for the client to be able to further

00:14:37,140 --> 00:14:40,650
manipulate that resource without any

00:14:38,700 --> 00:14:42,360
upfront or a priori knowledge now these

00:14:40,650 --> 00:14:44,370
links are very useful they give us an

00:14:42,360 --> 00:14:45,690
idea what to expect from the service and

00:14:44,370 --> 00:14:47,700
we can do deep linking and we can do all

00:14:45,690 --> 00:14:47,970
that stuff this is a REST API but am I

00:14:47,700 --> 00:14:50,520
done

00:14:47,970 --> 00:14:51,930
right I can do put post-its lead all

00:14:50,520 --> 00:14:54,060
that stuff that's all there but can I

00:14:51,930 --> 00:14:55,740
actually deploy this to production I'd

00:14:54,060 --> 00:14:57,000
say probably not right one of the

00:14:55,740 --> 00:14:58,140
concerns that we care about when we

00:14:57,000 --> 00:15:00,390
build a cloud native system is

00:14:58,140 --> 00:15:01,650
observability how easily can we see what

00:15:00,390 --> 00:15:03,270
the system in the application is doing

00:15:01,650 --> 00:15:05,250
at the node level and at the system

00:15:03,270 --> 00:15:07,470
level and to address that here we're

00:15:05,250 --> 00:15:09,090
using the actuator now the actuator is a

00:15:07,470 --> 00:15:10,980
library that gives us the ability to see

00:15:09,090 --> 00:15:12,870
what is happening on a given node in

00:15:10,980 --> 00:15:15,360
order to applicator to apply it I need

00:15:12,870 --> 00:15:16,680
to disable security for a default sort

00:15:15,360 --> 00:15:18,420
of scenario here right so I'm going to

00:15:16,680 --> 00:15:21,210
say management of security that enabled

00:15:18,420 --> 00:15:24,180
equals false an actuator is not a new

00:15:21,210 --> 00:15:26,400
idea it's inspired by Google who in

00:15:24,180 --> 00:15:28,230
their Borgman monitoring paper described

00:15:26,400 --> 00:15:30,030
standardized endpoints that they stand

00:15:28,230 --> 00:15:31,740
up for every single API for every single

00:15:30,030 --> 00:15:33,390
service no matter what the nature of the

00:15:31,740 --> 00:15:34,890
service it's batch or machine learning

00:15:33,390 --> 00:15:36,300
artificial intelligence or web or

00:15:34,890 --> 00:15:37,920
whatever they have standardized

00:15:36,300 --> 00:15:39,750
endpoints that centralized monitoring

00:15:37,920 --> 00:15:41,360
infrastructure can then use to corral

00:15:39,750 --> 00:15:43,350
into a single pane of glass that

00:15:41,360 --> 00:15:44,820
ever-important dashboard experience

00:15:43,350 --> 00:15:46,770
right and we have to care about that as

00:15:44,820 --> 00:15:48,090
well we could use things like new relic

00:15:46,770 --> 00:15:50,430
and app dynamics and those of course are

00:15:48,090 --> 00:15:51,840
great choices they they work very nicely

00:15:50,430 --> 00:15:54,240
in client friendly but I want my

00:15:51,840 --> 00:15:55,890
application itself to be able to chime

00:15:54,240 --> 00:15:58,080
in to say something is wrong right and

00:15:55,890 --> 00:15:59,910
my application knows very well its own

00:15:58,080 --> 00:16:02,130
state it's the perfect thing to

00:15:59,910 --> 00:16:03,410
articulate that state so we can do that

00:16:02,130 --> 00:16:04,920
with the actuator we can say a

00:16:03,410 --> 00:16:07,830
localhost:8080

00:16:04,920 --> 00:16:09,360
forward slash metrics right and metrics

00:16:07,830 --> 00:16:11,250
shows me things like my heat my uptime

00:16:09,360 --> 00:16:13,230
my non heat you know it shows me the

00:16:11,250 --> 00:16:15,210
environment there's the environment dry

00:16:13,230 --> 00:16:16,890
document the health endpoint these are

00:16:15,210 --> 00:16:18,840
all different indicators that I can use

00:16:16,890 --> 00:16:20,100
that show me the status some application

00:16:18,840 --> 00:16:22,170
and if you deploy a spring good

00:16:20,100 --> 00:16:24,270
application to Cloud Foundry and to

00:16:22,170 --> 00:16:25,830
pivotal Cloud Foundry this information

00:16:24,270 --> 00:16:27,600
is fed into the apps manager dashboard

00:16:25,830 --> 00:16:30,000
so you get a single pane of glass and

00:16:27,600 --> 00:16:31,410
it's being driven in part by the

00:16:30,000 --> 00:16:33,420
platforms awareness of your applications

00:16:31,410 --> 00:16:35,630
as well as the applications awareness of

00:16:33,420 --> 00:16:38,880
itself that's very very useful now I

00:16:35,630 --> 00:16:40,650
have this and I want to build a change

00:16:38,880 --> 00:16:42,600
parts of the application you saw me

00:16:40,650 --> 00:16:44,040
change configuration in the application

00:16:42,600 --> 00:16:45,810
by changing these properties here I

00:16:44,040 --> 00:16:46,740
specified management dead security

00:16:45,810 --> 00:16:48,240
enabled equals false

00:16:46,740 --> 00:16:50,430
I can change other things as well but

00:16:48,240 --> 00:16:52,560
this property file is in the application

00:16:50,430 --> 00:16:54,450
itself I have to recompile the jar to

00:16:52,560 --> 00:16:56,340
see this property updated and that's not

00:16:54,450 --> 00:16:57,870
a very useful thing if you're building

00:16:56,340 --> 00:16:59,700
applications that you want to promote

00:16:57,870 --> 00:17:01,620
from one environment to another another

00:16:59,700 --> 00:17:03,750
option instead of keeping the values

00:17:01,620 --> 00:17:06,000
here inside the property value is to use

00:17:03,750 --> 00:17:09,480
twelve factor style configuration right

00:17:06,000 --> 00:17:12,150
in this in this example toe factor style

00:17:09,480 --> 00:17:15,709
configuration let's see maven minus key

00:17:12,150 --> 00:17:21,060
skip tests because Yolo clean install

00:17:15,709 --> 00:17:22,920
okay see target toe Factor star

00:17:21,060 --> 00:17:25,290
configuration would let me run my

00:17:22,920 --> 00:17:27,180
application and override configuration

00:17:25,290 --> 00:17:29,310
values as I do it so for example I can

00:17:27,180 --> 00:17:31,770
say server that port equals 80 10 minus

00:17:29,310 --> 00:17:33,630
jar and that property that I use there

00:17:31,770 --> 00:17:36,270
or serve it at port I could specify that

00:17:33,630 --> 00:17:38,280
here as well but I'm I'm coupling this

00:17:36,270 --> 00:17:40,350
value to the jar itself if I keep it

00:17:38,280 --> 00:17:42,690
here so I'm now overriding it on there

00:17:40,350 --> 00:17:47,100
running right on the port oh it's

00:17:42,690 --> 00:17:48,660
already run an 80 10 haha 80 11 okay

00:17:47,100 --> 00:17:50,100
there's already something on port 80 10

00:17:48,660 --> 00:17:51,900
there you go so I'm over running the

00:17:50,100 --> 00:17:55,230
default value and this is a good start

00:17:51,900 --> 00:17:56,520
but what if I want to centralize my

00:17:55,230 --> 00:17:58,140
configuration how do I do that

00:17:56,520 --> 00:17:59,550
right how do I avoid tediously copying

00:17:58,140 --> 00:18:01,380
pasting configuration values from one

00:17:59,550 --> 00:18:03,570
node to another one startup script to

00:18:01,380 --> 00:18:05,130
another what if I want us do auditing

00:18:03,570 --> 00:18:06,660
and journaling see who changed what and

00:18:05,130 --> 00:18:08,370
when and if necessary to roll that

00:18:06,660 --> 00:18:11,760
configuration back how do i how do I

00:18:08,370 --> 00:18:13,380
support that how do i how do I do

00:18:11,760 --> 00:18:15,270
security if I want to support encrypted

00:18:13,380 --> 00:18:17,010
values passwords things like that in my

00:18:15,270 --> 00:18:18,330
application code credentials locators

00:18:17,010 --> 00:18:21,300
that kind of stuff how do I do that

00:18:18,330 --> 00:18:23,490
right and then finally how do I do live

00:18:21,300 --> 00:18:25,170
reconfiguration of the values for these

00:18:23,490 --> 00:18:26,910
use cases what I've got is a good start

00:18:25,170 --> 00:18:28,710
but it's not really what we want is it

00:18:26,910 --> 00:18:30,540
it's a good start but it's not quite

00:18:28,710 --> 00:18:32,580
there so instead what I'm going to do is

00:18:30,540 --> 00:18:34,260
I'm going to stand up a REST API called

00:18:32,580 --> 00:18:35,970
the config service and you can go to

00:18:34,260 --> 00:18:38,190
start out spring the REO and generate

00:18:35,970 --> 00:18:41,130
your own config server or you can use

00:18:38,190 --> 00:18:42,660
preferably the backing service that

00:18:41,130 --> 00:18:44,220
pivotal Cloud Foundry provides you write

00:18:42,660 --> 00:18:46,390
the spring cloud services

00:18:44,220 --> 00:18:47,830
backing service on cloud fund and then

00:18:46,390 --> 00:18:49,330
you just say CF great service config

00:18:47,830 --> 00:18:50,710
service and bind it's your application

00:18:49,330 --> 00:18:52,990
but I've already got it running here in

00:18:50,710 --> 00:18:54,820
my local machine and it is pointing to a

00:18:52,990 --> 00:18:56,679
directory full of get managed

00:18:54,820 --> 00:18:58,570
configuration property files right so

00:18:56,679 --> 00:19:01,179
config reservation - service type

00:18:58,570 --> 00:19:03,190
properties and config application net

00:19:01,179 --> 00:19:05,169
properties so let's suppose that I am a

00:19:03,190 --> 00:19:07,120
micro service and I connect to the

00:19:05,169 --> 00:19:09,880
config service to draw my configuration

00:19:07,120 --> 00:19:12,309
let's suppose I identify myself as the

00:19:09,880 --> 00:19:13,960
reservation - service what would I see

00:19:12,309 --> 00:19:15,580
well here I would see that there are

00:19:13,960 --> 00:19:17,529
several keys and values server that port

00:19:15,580 --> 00:19:20,830
spring cloud stream you know bindings

00:19:17,529 --> 00:19:22,899
input bindings that group message etc if

00:19:20,830 --> 00:19:24,580
I change my micro service the micro

00:19:22,899 --> 00:19:26,200
service we just built and change it to

00:19:24,580 --> 00:19:28,809
point to this property file it should

00:19:26,200 --> 00:19:31,120
have access to this value the server

00:19:28,809 --> 00:19:32,710
that port and to this message message

00:19:31,120 --> 00:19:34,809
right so let's take advantage of that

00:19:32,710 --> 00:19:36,700
here let's make sure that in our build

00:19:34,809 --> 00:19:39,279
we have the spring cloud startup config

00:19:36,700 --> 00:19:42,399
client we're gonna need that right so

00:19:39,279 --> 00:19:42,970
let's add this here and for you know for

00:19:42,399 --> 00:19:44,830
posterity

00:19:42,970 --> 00:19:49,570
we'll bring in this last dependency as

00:19:44,830 --> 00:19:50,799
well so okay paste good now in order for

00:19:49,570 --> 00:19:52,840
this configuration to work it's gonna

00:19:50,799 --> 00:19:54,639
need a few things I'm gonna need to tell

00:19:52,840 --> 00:19:56,799
it its name I'm going to need to give my

00:19:54,639 --> 00:19:58,389
micro service a name reservation -

00:19:56,799 --> 00:20:02,669
service and then I'm gonna tell it where

00:19:58,389 --> 00:20:05,200
to find the config server HTTP localhost

00:20:02,669 --> 00:20:08,529
8888 now of course this is the default

00:20:05,200 --> 00:20:10,419
value this.value 8 here 8888 is the

00:20:08,529 --> 00:20:12,279
default value on your local machine so

00:20:10,419 --> 00:20:14,019
if you are like me and you don't really

00:20:12,279 --> 00:20:15,789
want to specify this each time on your

00:20:14,019 --> 00:20:17,620
local machine just comment it out it's

00:20:15,789 --> 00:20:19,450
fine it'll work in this case because of

00:20:17,620 --> 00:20:23,169
engineered coincidence I only show it to

00:20:19,450 --> 00:20:25,360
you because I'm a giver and I care but I

00:20:23,169 --> 00:20:28,149
may forget so just keep that in the back

00:20:25,360 --> 00:20:30,010
your noodle okay now there we go let's

00:20:28,149 --> 00:20:31,240
take advantage of that message right so

00:20:30,010 --> 00:20:35,440
we're gonna stay at rest controller

00:20:31,240 --> 00:20:37,720
class message rest controller and I'm

00:20:35,440 --> 00:20:40,750
gonna say private final string value and

00:20:37,720 --> 00:20:43,210
we'll add a constructor value there I'm

00:20:40,750 --> 00:20:44,679
gonna inject that key that message key

00:20:43,210 --> 00:20:46,120
that we had from the config server there

00:20:44,679 --> 00:20:48,519
and we're just going to create a rest

00:20:46,120 --> 00:20:51,639
endpoint that parrots the end the value

00:20:48,519 --> 00:20:53,860
there so public string read return this

00:20:51,639 --> 00:20:55,419
dot value and this is interesting I can

00:20:53,860 --> 00:20:56,429
imagine this being interesting but I can

00:20:55,419 --> 00:20:57,990
also imagine wanting to

00:20:56,429 --> 00:20:59,730
change this message later on so I'm

00:20:57,990 --> 00:21:01,799
going to say at refresh scope I'm gonna

00:20:59,730 --> 00:21:05,009
make the beam reconfigurable and now

00:21:01,799 --> 00:21:08,309
when I do this I can go to localhost 80

00:21:05,009 --> 00:21:09,720
or 8000 for such message or reservations

00:21:08,309 --> 00:21:11,940
there's that and there's the message

00:21:09,720 --> 00:21:13,740
helloworld now that's a good message but

00:21:11,940 --> 00:21:15,960
it's not great is it so I can imagine

00:21:13,740 --> 00:21:18,299
wanting to go to the config directory

00:21:15,960 --> 00:21:20,759
here full of my config files and change

00:21:18,299 --> 00:21:22,619
some of these different values now you

00:21:20,759 --> 00:21:24,419
can use any text editor you want but I'm

00:21:22,619 --> 00:21:27,240
gonna use Emacs because I'm not a savage

00:21:24,419 --> 00:21:28,860
I'm not so I'm gonna say reservation

00:21:27,240 --> 00:21:29,490
service type properties and I'll say

00:21:28,860 --> 00:21:34,499
hello

00:21:29,490 --> 00:21:36,149
CF summit 27 teen extra exclamation mark

00:21:34,499 --> 00:21:40,399
so as to reinforce my credentials and

00:21:36,149 --> 00:21:40,399
authenticity on reddit right so okay

00:21:41,299 --> 00:21:47,519
come on sorry thought I was in that

00:21:46,019 --> 00:21:54,269
other text editor so there we go get

00:21:47,519 --> 00:21:55,980
status get commit - a - M Yolo okay now

00:21:54,269 --> 00:21:57,659
if I go to the config server it's

00:21:55,980 --> 00:21:59,340
immediately aware of the changed text

00:21:57,659 --> 00:22:00,720
value here right here but my micro

00:21:59,340 --> 00:22:03,029
service doesn't know it doesn't know

00:22:00,720 --> 00:22:05,220
about the updated value so let's tell it

00:22:03,029 --> 00:22:07,499
to see the new value to reconfigure

00:22:05,220 --> 00:22:09,029
itself based on that change value by

00:22:07,499 --> 00:22:10,409
using another one of those actuator

00:22:09,029 --> 00:22:12,570
operational endpoints I'm going to say

00:22:10,409 --> 00:22:16,049
that we're gonna send an empty H to be

00:22:12,570 --> 00:22:18,119
post to the Refresh endpoint on my micro

00:22:16,049 --> 00:22:19,499
service right so minus D curly bracket

00:22:18,119 --> 00:22:20,639
curly bracket and what I'm gonna do is

00:22:19,499 --> 00:22:22,409
I'm gonna play the game that I've never

00:22:20,639 --> 00:22:29,970
won it's a game that I play every single

00:22:22,409 --> 00:22:31,619
time I'm gonna hit enter oh I'm gonna

00:22:29,970 --> 00:22:32,909
hit an enter and then as fast as my

00:22:31,619 --> 00:22:37,590
little fingers will let me I'm gonna hit

00:22:32,909 --> 00:22:41,330
alt tab and then ctrl R okay so one two

00:22:37,590 --> 00:22:44,460
three yeah instead of a gun it's faster

00:22:41,330 --> 00:22:45,749
it got there before I did and I try

00:22:44,460 --> 00:22:47,519
I've been at this for years I've never

00:22:45,749 --> 00:22:49,830
won so I've changed the configuration

00:22:47,519 --> 00:22:51,389
value in C - I didn't have to reload the

00:22:49,830 --> 00:22:53,039
service or anything like that I can now

00:22:51,389 --> 00:22:54,450
support feature flags which in turn

00:22:53,039 --> 00:22:56,669
lends itself to things like a bee

00:22:54,450 --> 00:22:57,929
testing and you know d-cup generally

00:22:56,669 --> 00:22:59,639
decoupling the deployment of software

00:22:57,929 --> 00:23:01,169
from the release of software right so

00:22:59,639 --> 00:23:02,999
there's that that's a nice feature and

00:23:01,169 --> 00:23:04,980
because I've got this centralized config

00:23:02,999 --> 00:23:06,389
server I can require to do security I

00:23:04,980 --> 00:23:07,889
can say that every link in the chain

00:23:06,389 --> 00:23:09,740
from the app to the config service and

00:23:07,889 --> 00:23:12,800
from the config service to the configure

00:23:09,740 --> 00:23:14,150
torie should be done over HTTP s and you

00:23:12,800 --> 00:23:15,590
know SSL and I can require

00:23:14,150 --> 00:23:17,150
authentication and all that stuff and

00:23:15,590 --> 00:23:18,140
all of this is pre-configured for you

00:23:17,150 --> 00:23:20,420
and done the right way if you're using

00:23:18,140 --> 00:23:22,520
the spring cloud services config server

00:23:20,420 --> 00:23:24,350
on pivotal cloud penury so there's one

00:23:22,520 --> 00:23:25,880
very useful thing the next thing I care

00:23:24,350 --> 00:23:27,679
about in a distributed system is making

00:23:25,880 --> 00:23:29,960
it easy for one service to find another

00:23:27,679 --> 00:23:31,610
and to work with another remember in a

00:23:29,960 --> 00:23:33,020
dynamic environment services are going

00:23:31,610 --> 00:23:35,330
to come and go based on the demand and

00:23:33,020 --> 00:23:36,890
the need at any given time so we need to

00:23:35,330 --> 00:23:38,570
make it as easy as possible for one

00:23:36,890 --> 00:23:40,070
service to talk to another and at the

00:23:38,570 --> 00:23:41,870
nav a cloud environment DNS isn't a

00:23:40,070 --> 00:23:43,400
great fit for several reasons first of

00:23:41,870 --> 00:23:45,559
all most cloud environments have a

00:23:43,400 --> 00:23:47,690
multihomed notion of DNS right you have

00:23:45,559 --> 00:23:50,300
the Public DNS versus the private DNS so

00:23:47,690 --> 00:23:51,710
that complicates code then you have the

00:23:50,300 --> 00:23:54,050
fact that Deena's clients these days

00:23:51,710 --> 00:23:55,460
aren't very smart they cache DNS so if

00:23:54,050 --> 00:23:57,260
you're using a DNS base load balancer

00:23:55,460 --> 00:23:59,630
it's gonna keep the first resolved IP

00:23:57,260 --> 00:24:01,220
address and then pin subsequent requests

00:23:59,630 --> 00:24:03,160
to that you can undo this setting

00:24:01,220 --> 00:24:05,330
somewhere but it is kind of tedious

00:24:03,160 --> 00:24:07,070
another thing is that DNS is kind of a

00:24:05,330 --> 00:24:09,140
simple protocol it doesn't give me the

00:24:07,070 --> 00:24:11,210
ability to ask questions it can tell me

00:24:09,140 --> 00:24:12,860
for example where a service lives but it

00:24:11,210 --> 00:24:15,710
can't tell me if that service is alive

00:24:12,860 --> 00:24:17,360
that's a problem right put another way

00:24:15,710 --> 00:24:18,890
imagine somebody coming to my home they

00:24:17,360 --> 00:24:20,870
know where I live but I may be out to

00:24:18,890 --> 00:24:22,340
the market you know I need to be able to

00:24:20,870 --> 00:24:23,270
find out if that service is there before

00:24:22,340 --> 00:24:25,010
I even make a call

00:24:23,270 --> 00:24:26,770
otherwise I'll sit there in a block

00:24:25,010 --> 00:24:28,700
waiting for a response I may never get

00:24:26,770 --> 00:24:30,860
that's the last thing that we want to do

00:24:28,700 --> 00:24:32,120
right hopefully you've all done the

00:24:30,860 --> 00:24:33,740
right thing you've all read internally

00:24:32,120 --> 00:24:35,270
as an applied Michael my guards amazing

00:24:33,740 --> 00:24:37,250
book release it you've done that right

00:24:35,270 --> 00:24:40,220
all of you keep it under your pillow

00:24:37,250 --> 00:24:41,780
right you've specified aggressive

00:24:40,220 --> 00:24:44,120
client-side timeouts you've restricted

00:24:41,780 --> 00:24:46,370
your opportunity for failure on the

00:24:44,120 --> 00:24:48,470
client invocation to a certain bounded

00:24:46,370 --> 00:24:50,150
window you've done that right and all

00:24:48,470 --> 00:24:52,880
your code everywhere

00:24:50,150 --> 00:24:55,130
any code that you have that uses

00:24:52,880 --> 00:24:57,380
java.net URL connection you've done that

00:24:55,130 --> 00:24:59,809
you've made sure to configure timeouts

00:24:57,380 --> 00:25:03,200
there pop quiz do you know what the

00:24:59,809 --> 00:25:05,410
default timeout for that is it's zero in

00:25:03,200 --> 00:25:10,309
perpetuity it's just gonna block forever

00:25:05,410 --> 00:25:11,390
waiting for heat death so I don't know

00:25:10,309 --> 00:25:13,100
about you but if I've got a hundred

00:25:11,390 --> 00:25:14,660
thread to able to handle responses in my

00:25:13,100 --> 00:25:17,059
web server and I've got a hundred one

00:25:14,660 --> 00:25:18,230
requests I'm gonna block and I don't

00:25:17,059 --> 00:25:19,370
want to be blocking right so it's much

00:25:18,230 --> 00:25:20,750
better to ask the question and then

00:25:19,370 --> 00:25:22,429
degrade gracefully if I get a bad answer

00:25:20,750 --> 00:25:23,170
so we need more we need something that

00:25:22,429 --> 00:25:25,000
gives us the ability

00:25:23,170 --> 00:25:27,160
talk about this the state of the system

00:25:25,000 --> 00:25:28,870
and this is a service registry I have a

00:25:27,160 --> 00:25:29,890
service registry running in the

00:25:28,870 --> 00:25:31,690
background here I've got it

00:25:29,890 --> 00:25:33,220
it's called Netflix Eureka and this is

00:25:31,690 --> 00:25:34,690
another one of those things where if

00:25:33,220 --> 00:25:36,520
you're using pivotal Cloud Foundry

00:25:34,690 --> 00:25:38,050
spring cloud services you can use the

00:25:36,520 --> 00:25:40,480
Eureka service broker that's

00:25:38,050 --> 00:25:42,430
pre-configured for you on Cloud Foundry

00:25:40,480 --> 00:25:43,840
or you can run the little local version

00:25:42,430 --> 00:25:45,700
here but this is not a production worthy

00:25:43,840 --> 00:25:47,440
version you can even see that Eureka is

00:25:45,700 --> 00:25:49,300
screaming bloody murder saying that this

00:25:47,440 --> 00:25:51,130
isn't a highly available setup it's

00:25:49,300 --> 00:25:53,830
saying don't do don't do this dum dum

00:25:51,130 --> 00:25:55,090
one instance isn't gonna fly right this

00:25:53,830 --> 00:25:56,650
is one of those things that I I need but

00:25:55,090 --> 00:25:58,180
I don't wanna manage myself so I have

00:25:56,650 --> 00:26:00,010
Eureka I couldn't use anything right

00:25:58,180 --> 00:26:01,240
spring cloud doesn't really care I can

00:26:00,010 --> 00:26:03,100
talk to all sorts of other different

00:26:01,240 --> 00:26:05,020
service registries through the discovery

00:26:03,100 --> 00:26:07,510
client abstraction and that makes it so

00:26:05,020 --> 00:26:09,280
I can write my code and with against one

00:26:07,510 --> 00:26:10,450
interface one API and not worry about

00:26:09,280 --> 00:26:13,150
changing it so I'm gonna use that

00:26:10,450 --> 00:26:14,650
discovery client abstraction here by

00:26:13,150 --> 00:26:16,450
using spring cloud starter Eureka and

00:26:14,650 --> 00:26:17,500
then I'll opt in to service registration

00:26:16,450 --> 00:26:19,780
and discovery I'll say at enable

00:26:17,500 --> 00:26:21,760
discovery client and I'll hit go and

00:26:19,780 --> 00:26:23,350
what that's going to do is it's going to

00:26:21,760 --> 00:26:24,940
raise its hand it's going to raise the

00:26:23,350 --> 00:26:26,740
hand of this service and it's gonna say

00:26:24,940 --> 00:26:31,660
I'm here if you need me find me at this

00:26:26,740 --> 00:26:35,380
host this IP this port etc good stuff so

00:26:31,660 --> 00:26:37,000
there we are now there's our service

00:26:35,380 --> 00:26:38,740
it's now available in the registry you

00:26:37,000 --> 00:26:39,970
can see that down here there's one

00:26:38,740 --> 00:26:42,460
service there's another thing you may

00:26:39,970 --> 00:26:47,770
have noticed very well done mouse overs

00:26:42,460 --> 00:26:51,370
that took time

00:26:47,770 --> 00:26:52,929
that took a year we have very very smart

00:26:51,370 --> 00:26:54,130
people on the spring team doctors pH

00:26:52,929 --> 00:26:57,010
cheese people in their previous lives

00:26:54,130 --> 00:26:58,300
worked in nuclear physics but it very it

00:26:57,010 --> 00:27:00,040
makes me very happy to imagine that

00:26:58,300 --> 00:27:01,300
someday somewhere there was a good hub

00:27:00,040 --> 00:27:04,059
usually that said we need a good mouse

00:27:01,300 --> 00:27:06,940
over and I think I think you'll agree

00:27:04,059 --> 00:27:09,220
they delivered still took a year though

00:27:06,940 --> 00:27:10,360
anyway so we've got a service now we

00:27:09,220 --> 00:27:11,770
need to build a client and we're gonna

00:27:10,360 --> 00:27:13,120
build a client that talks to that and

00:27:11,770 --> 00:27:14,320
it's gonna we're not gonna just build

00:27:13,120 --> 00:27:16,809
any kind of client we're gonna build a

00:27:14,320 --> 00:27:19,030
reservation - client and the reservation

00:27:16,809 --> 00:27:22,120
client will use the config client it'll

00:27:19,030 --> 00:27:23,410
use Eureka it'll use hystrix the circuit

00:27:22,120 --> 00:27:24,490
breaker I'll use fain for declarative

00:27:23,410 --> 00:27:26,620
rest client SIG's and use the rest

00:27:24,490 --> 00:27:29,890
repository support web support actuator

00:27:26,620 --> 00:27:32,140
for operational concerns and I think

00:27:29,890 --> 00:27:34,540
configure Iike hystrix famous

00:27:32,140 --> 00:27:36,160
repositories web actuator I say only

00:27:34,540 --> 00:27:38,890
Lombok of course Leinbach right and I

00:27:36,160 --> 00:27:40,840
think that ought to do config data -

00:27:38,890 --> 00:27:42,070
yeah let's do that so let's give me our

00:27:40,840 --> 00:27:43,960
client and we're not gonna build just

00:27:42,070 --> 00:27:45,760
any client we're gonna build a a edge

00:27:43,960 --> 00:27:47,920
service right when we talk about

00:27:45,760 --> 00:27:49,270
building services these days there's all

00:27:47,920 --> 00:27:50,980
sorts of different clients --is that

00:27:49,270 --> 00:27:52,500
will talk to our services all sorts of

00:27:50,980 --> 00:27:55,120
different clients that have different

00:27:52,500 --> 00:27:56,290
security requirements different - form

00:27:55,120 --> 00:27:57,940
factors different from you know

00:27:56,290 --> 00:27:59,470
bandwidth capabilities different

00:27:57,940 --> 00:28:01,540
everything and so we need to accommodate

00:27:59,470 --> 00:28:03,640
these different clients the clients are

00:28:01,540 --> 00:28:05,260
numerous today right if you if you're in

00:28:03,640 --> 00:28:07,450
the most boring of organizations you

00:28:05,260 --> 00:28:10,150
probably still have an html5 browser

00:28:07,450 --> 00:28:12,970
experience and iOS iPhone or iPad kind

00:28:10,150 --> 00:28:14,320
of experience or a Android experience

00:28:12,970 --> 00:28:16,000
for your for your client experience

00:28:14,320 --> 00:28:17,559
right your your apps and that's just the

00:28:16,000 --> 00:28:19,330
most boring and conservative sort of

00:28:17,559 --> 00:28:22,059
like experiences these days most

00:28:19,330 --> 00:28:24,280
organizations have far more if you go to

00:28:22,059 --> 00:28:25,900
Singapore the roads the very roads

00:28:24,280 --> 00:28:27,850
themselves have IP addresses they

00:28:25,900 --> 00:28:29,590
connect to a cloud and they use those in

00:28:27,850 --> 00:28:32,440
that information for data traffic data

00:28:29,590 --> 00:28:34,420
shaping traffic shaping right not not

00:28:32,440 --> 00:28:38,590
network traffic shaping I mean actual

00:28:34,420 --> 00:28:41,320
traffic shaping all right so they they

00:28:38,590 --> 00:28:42,910
they use the roads themselves that feeds

00:28:41,320 --> 00:28:44,380
to somebody's service same thing for

00:28:42,910 --> 00:28:45,940
organs there are people with prosthetic

00:28:44,380 --> 00:28:47,740
organs in their body that have IP

00:28:45,940 --> 00:28:49,570
addresses these things are clients to

00:28:47,740 --> 00:28:50,890
somebody else's service so we need to

00:28:49,570 --> 00:28:52,480
handle all these kinds of concerns

00:28:50,890 --> 00:28:54,160
rather than retrofitting every single

00:28:52,480 --> 00:28:56,290
micro service we can externalize those

00:28:54,160 --> 00:28:57,730
concerns into a separate client so I'm

00:28:56,290 --> 00:29:00,520
gonna create a reservation client we'll

00:28:57,730 --> 00:29:01,420
call the spring application we'll say

00:29:00,520 --> 00:29:04,600
spring applique

00:29:01,420 --> 00:29:05,890
name equals reservation - client and

00:29:04,600 --> 00:29:07,120
what we're gonna do is we're gonna build

00:29:05,890 --> 00:29:09,250
an application that talks to our

00:29:07,120 --> 00:29:11,890
downstream rest service right we could

00:29:09,250 --> 00:29:14,200
do it using Zul we could proxy requests

00:29:11,890 --> 00:29:16,030
back and forth using the micro proxy

00:29:14,200 --> 00:29:17,620
that would certainly give us one

00:29:16,030 --> 00:29:20,290
opportunity here so spring clouds

00:29:17,620 --> 00:29:21,580
started Zul right this is a micro proxy

00:29:20,290 --> 00:29:23,200
that was developed by Netflix that we

00:29:21,580 --> 00:29:25,480
make it very easy using your application

00:29:23,200 --> 00:29:27,640
you just have to say at enable Zul proxy

00:29:25,480 --> 00:29:30,160
that's certainly one option if I have an

00:29:27,640 --> 00:29:32,350
html5 browser a client and I want to and

00:29:30,160 --> 00:29:33,640
I want to you know proxy requests from

00:29:32,350 --> 00:29:35,230
the html5 browser client to the

00:29:33,640 --> 00:29:36,820
downstream services and I don't want to

00:29:35,230 --> 00:29:38,140
have to add access control headers to

00:29:36,820 --> 00:29:40,450
every single one of my down team

00:29:38,140 --> 00:29:42,160
services a micro proxy like this can be

00:29:40,450 --> 00:29:43,270
ideal right I'm gonna need to take

00:29:42,160 --> 00:29:45,070
advantage of the service registration

00:29:43,270 --> 00:29:48,130
and discovery of course so I'll restart

00:29:45,070 --> 00:29:49,480
this okay this is one option but I want

00:29:48,130 --> 00:29:50,920
you know more often than not I want to

00:29:49,480 --> 00:29:53,230
do more sophisticated things maybe I

00:29:50,920 --> 00:29:55,840
want to call the downstream the

00:29:53,230 --> 00:29:57,550
downstream service and get the names

00:29:55,840 --> 00:29:59,680
maybe I want to transform the downstream

00:29:57,550 --> 00:30:01,570
service or enrich it or adapt it or

00:29:59,680 --> 00:30:02,650
synthesize a new end point based on

00:30:01,570 --> 00:30:04,120
composites

00:30:02,650 --> 00:30:05,740
you know compositing data from different

00:30:04,120 --> 00:30:07,030
services so let's imagine I want to

00:30:05,740 --> 00:30:08,950
create an endpoint that returns just the

00:30:07,030 --> 00:30:10,900
names Josh and Richard and Ashley and

00:30:08,950 --> 00:30:12,820
Bridgette and James and James and Abby

00:30:10,900 --> 00:30:14,800
and Jen right let's say I want to do

00:30:12,820 --> 00:30:17,410
that instead of just returning the

00:30:14,800 --> 00:30:19,270
direct the data directly on you know

00:30:17,410 --> 00:30:20,950
transform so in this case I can create

00:30:19,270 --> 00:30:24,670
what's called an API adapter right so

00:30:20,950 --> 00:30:27,970
I'm gonna say API adapter rest

00:30:24,670 --> 00:30:29,170
controller right and I'm gonna say that

00:30:27,970 --> 00:30:31,360
this is just gonna be an endpoint that

00:30:29,170 --> 00:30:34,210
uses the downstream service and I I

00:30:31,360 --> 00:30:35,740
could use the Spring Framework rest

00:30:34,210 --> 00:30:38,440
template right I can use the Spring

00:30:35,740 --> 00:30:40,240
Framework rest template to to make the

00:30:38,440 --> 00:30:41,860
HTTP call that's a certainly a good idea

00:30:40,240 --> 00:30:42,850
but in this case that's a little verbose

00:30:41,860 --> 00:30:44,830
what I want to do is I want to make it

00:30:42,850 --> 00:30:46,600
easy for my client to talk to the

00:30:44,830 --> 00:30:48,700
downstream service without writing so

00:30:46,600 --> 00:30:51,340
much client code I'm going to create a

00:30:48,700 --> 00:30:54,960
client declaratively using something

00:30:51,340 --> 00:30:57,190
called Netflix fane right and Thane is

00:30:54,960 --> 00:30:58,570
aware of my downstream services it's

00:30:57,190 --> 00:31:00,430
aware of the service registry so I can

00:30:58,570 --> 00:31:01,780
just give you the service ID here that

00:31:00,430 --> 00:31:03,160
we saw register in the registry here

00:31:01,780 --> 00:31:05,800
right we can see that down here

00:31:03,160 --> 00:31:07,630
reservation - service it's aware of that

00:31:05,800 --> 00:31:09,850
registry so here we can create an

00:31:07,630 --> 00:31:11,950
endpoint that returns the hypermedia

00:31:09,850 --> 00:31:14,170
envelope object remember we talked about

00:31:11,950 --> 00:31:15,280
hypermedia here this is an envelope

00:31:14,170 --> 00:31:17,380
object call that reason

00:31:15,280 --> 00:31:18,789
it has a payload called the reservation

00:31:17,380 --> 00:31:22,120
and has links that describe that payload

00:31:18,789 --> 00:31:24,400
so I want to turn that I want to turn

00:31:22,120 --> 00:31:26,380
this out and tell this client call the

00:31:24,400 --> 00:31:27,640
endpoint at reservation - service and

00:31:26,380 --> 00:31:29,020
we'll talk about how it actually figures

00:31:27,640 --> 00:31:31,150
out which one to call in a second and

00:31:29,020 --> 00:31:33,159
then when you get the JSON back turn the

00:31:31,150 --> 00:31:35,169
JSON into a collection of reservation

00:31:33,159 --> 00:31:36,789
details right this is the reservation

00:31:35,169 --> 00:31:38,320
details and I'm going to say that we

00:31:36,789 --> 00:31:40,840
want to make an HTTP GET call so I'm

00:31:38,320 --> 00:31:45,220
gonna say request mapping method equals

00:31:40,840 --> 00:31:47,950
get value equals reservations okay so

00:31:45,220 --> 00:31:49,059
there's our our same client the reason

00:31:47,950 --> 00:31:50,620
we're using thane is because it makes

00:31:49,059 --> 00:31:53,140
the work of creating a client much

00:31:50,620 --> 00:31:55,960
simpler now of course in English Thane

00:31:53,140 --> 00:31:58,600
means to pretend or to act as right - to

00:31:55,960 --> 00:32:00,070
pretend to be and this is you know if

00:31:58,600 --> 00:32:01,630
you see an animal in the forest if you

00:32:00,070 --> 00:32:04,059
see an animal in the forest with its

00:32:01,630 --> 00:32:06,039
poor head cocked back and can see its

00:32:04,059 --> 00:32:08,049
poor little heart beating a beating to

00:32:06,039 --> 00:32:10,240
beat the band you know just it's just

00:32:08,049 --> 00:32:11,590
scared it's it's got its eyes closed but

00:32:10,240 --> 00:32:13,150
it's got one eye open it's hoping you'll

00:32:11,590 --> 00:32:15,010
pass it by and leave it alone it's

00:32:13,150 --> 00:32:16,990
pretending to be dead it's not actually

00:32:15,010 --> 00:32:18,820
dead it's feigning death so that you'll

00:32:16,990 --> 00:32:20,380
leave it alone this is the same thing

00:32:18,820 --> 00:32:22,299
this is very similar to the way

00:32:20,380 --> 00:32:24,610
websphere pretends to be useful it

00:32:22,299 --> 00:32:26,710
feigns utility it's it's not it's not

00:32:24,610 --> 00:32:28,690
it's it's dead it's trying to get you to

00:32:26,710 --> 00:32:30,400
leave it alone right it's scared so

00:32:28,690 --> 00:32:31,870
we're gonna use Thane here to create a

00:32:30,400 --> 00:32:33,909
client to call our downstream service

00:32:31,870 --> 00:32:34,990
and they're gonna create an API adapter

00:32:33,909 --> 00:32:38,650
endpoint we're gonna say public

00:32:34,990 --> 00:32:44,260
collection of string names and we're

00:32:38,650 --> 00:32:46,330
gonna return the names here by using our

00:32:44,260 --> 00:32:50,010
recently created reservation client

00:32:46,330 --> 00:32:52,630
write a reservation reader okay and go

00:32:50,010 --> 00:32:55,900
so we say a reservation reader dot read

00:32:52,630 --> 00:32:57,090
dot get content dot stream dot map and

00:32:55,900 --> 00:33:00,580
we're just gonna take the data and

00:32:57,090 --> 00:33:03,520
transform it into a collection of into a

00:33:00,580 --> 00:33:04,179
list right collect doors that two lists

00:33:03,520 --> 00:33:06,190
here we are

00:33:04,179 --> 00:33:07,630
there's our endpoint now what happens if

00:33:06,190 --> 00:33:09,640
we call the downstream service and it's

00:33:07,630 --> 00:33:11,440
not there right we need to have a

00:33:09,640 --> 00:33:13,929
fallback method right we don't want to

00:33:11,440 --> 00:33:14,919
assume that that service is always going

00:33:13,929 --> 00:33:17,080
to be there so I want to create a

00:33:14,919 --> 00:33:18,909
fallback method using a circuit breaker

00:33:17,080 --> 00:33:21,640
a circuit breaker gives us the ability

00:33:18,909 --> 00:33:24,880
to protect our downstream service right

00:33:21,640 --> 00:33:27,700
imagine that this code runs and then

00:33:24,880 --> 00:33:29,170
it's going to try and dispatch a call to

00:33:27,700 --> 00:33:30,670
the reservation - sir

00:33:29,170 --> 00:33:31,870
it's gonna try and pick that service by

00:33:30,670 --> 00:33:33,520
going to the registry using the

00:33:31,870 --> 00:33:35,500
discovery client abstraction it's going

00:33:33,520 --> 00:33:37,060
to find one of them it may find ten it

00:33:35,500 --> 00:33:38,410
has to now make a decision on which node

00:33:37,060 --> 00:33:40,480
to call it does this using something

00:33:38,410 --> 00:33:41,740
called client-side load balancing it's

00:33:40,480 --> 00:33:43,120
gonna pick an instance and it's gonna

00:33:41,740 --> 00:33:45,160
make the request to that service and

00:33:43,120 --> 00:33:46,530
that's gonna work in the happy path

00:33:45,160 --> 00:33:48,520
isn't it look at this localhost

00:33:46,530 --> 00:33:50,440
reservation names there's a happy path

00:33:48,520 --> 00:33:51,100
but what if there are no downstream

00:33:50,440 --> 00:33:52,660
services

00:33:51,100 --> 00:33:54,190
what if there's no service there to

00:33:52,660 --> 00:33:56,770
handle the requests what's gonna happen

00:33:54,190 --> 00:33:58,420
it's essentially the same as load

00:33:56,770 --> 00:33:59,560
balancing right we're gonna be dividing

00:33:58,420 --> 00:34:01,270
by zero basically we're gonna try and

00:33:59,560 --> 00:34:04,180
load balanced by zero and we all know

00:34:01,270 --> 00:34:07,510
what zero divided by zero is right what

00:34:04,180 --> 00:34:09,190
is zero divided by zero imagine that you

00:34:07,510 --> 00:34:11,410
have zero cookies and you split them

00:34:09,190 --> 00:34:13,929
evenly among zero friends how many

00:34:11,410 --> 00:34:16,390
cookies does each person get see it

00:34:13,929 --> 00:34:18,310
doesn't make sense and Cookie Monster is

00:34:16,390 --> 00:34:23,080
said that there are no cookies and you

00:34:18,310 --> 00:34:24,580
are said that you have no friends don't

00:34:23,080 --> 00:34:25,810
make Cookie Monster sad don't try and

00:34:24,580 --> 00:34:26,830
divide by zero my friends you need to

00:34:25,810 --> 00:34:28,419
build services that degrade gracefully

00:34:26,830 --> 00:34:30,370
in the face of service outages and

00:34:28,419 --> 00:34:31,990
topology changes that's one of the key

00:34:30,370 --> 00:34:34,060
aspects of a cloud native system so

00:34:31,990 --> 00:34:35,110
we've got now an application it's gonna

00:34:34,060 --> 00:34:38,950
do the right thing if I kill the

00:34:35,110 --> 00:34:40,870
downstream service now the weekend we

00:34:38,950 --> 00:34:42,550
can demonstrate that and we can end on

00:34:40,870 --> 00:34:43,960
time or we can go for another 5 minutes

00:34:42,550 --> 00:34:44,980
when does this thing go when does this

00:34:43,960 --> 00:34:47,380
thing finish what are we supposed to

00:34:44,980 --> 00:34:53,890
when's the next talk begin actually in

00:34:47,380 --> 00:34:57,070
10 minutes I intimate when do I end now

00:34:53,890 --> 00:34:58,120
when does the next talk begin 10 minutes

00:34:57,070 --> 00:35:01,210
ok we're gonna go for a few more minutes

00:34:58,120 --> 00:35:03,040
here um well it's a thing we got to go

00:35:01,210 --> 00:35:04,540
fast so we've built an application that

00:35:03,040 --> 00:35:05,770
is robust enough to do the right thing

00:35:04,540 --> 00:35:07,120
in the face of service outages and

00:35:05,770 --> 00:35:10,870
topology changes we can demonstrate that

00:35:07,120 --> 00:35:13,090
by killing this like that and if we make

00:35:10,870 --> 00:35:14,320
a call it just gives us the MT ArrayList

00:35:13,090 --> 00:35:15,940
right so that's protecting our

00:35:14,320 --> 00:35:17,260
downstream service if something should

00:35:15,940 --> 00:35:18,760
go wrong the last thing that we want to

00:35:17,260 --> 00:35:20,590
do if our downstream service isn't

00:35:18,760 --> 00:35:22,150
responding is to start hammering it with

00:35:20,590 --> 00:35:24,310
request that it can't handle right so

00:35:22,150 --> 00:35:26,320
that that circuit breaker protects it it

00:35:24,310 --> 00:35:27,430
gives us it gives us time to restart the

00:35:26,320 --> 00:35:29,410
service if you're using cloud foundry

00:35:27,430 --> 00:35:30,700
it'll start the service all day and all

00:35:29,410 --> 00:35:32,230
night if it falls down it'll pick it

00:35:30,700 --> 00:35:34,360
back up again you can sleep easily

00:35:32,230 --> 00:35:36,040
knowing that the platform is wearing the

00:35:34,360 --> 00:35:37,390
proverbial pager but it's our job to

00:35:36,040 --> 00:35:38,830
build systems that do the right thing in

00:35:37,390 --> 00:35:40,750
the case of service outages and topology

00:35:38,830 --> 00:35:42,670
changes now I've got an application here

00:35:40,750 --> 00:35:44,800
and that circuit breaker

00:35:42,670 --> 00:35:46,270
a connection from my client to the

00:35:44,800 --> 00:35:49,360
downstream service and I can use that

00:35:46,270 --> 00:35:51,640
status that it is keeping and monitor

00:35:49,360 --> 00:35:53,920
the downstream service as an optimist I

00:35:51,640 --> 00:35:55,090
know that all people will fail me all

00:35:53,920 --> 00:35:58,090
the time and I cannot trust anybody

00:35:55,090 --> 00:36:00,550
that's the optimistic perspective as an

00:35:58,090 --> 00:36:01,840
optimist I know that the pessimist says

00:36:00,550 --> 00:36:04,330
that there's nothing I can do about that

00:36:01,840 --> 00:36:05,620
I say there's absolutely something I can

00:36:04,330 --> 00:36:08,710
do that about that that circuit breaker

00:36:05,620 --> 00:36:10,270
is smart it doesn't just degrade into a

00:36:08,710 --> 00:36:12,520
fallback method it actually keeps state

00:36:10,270 --> 00:36:13,870
it says oh these except these

00:36:12,520 --> 00:36:15,550
invocations are failing I'm going to

00:36:13,870 --> 00:36:17,500
open the circuit breaker the state is

00:36:15,550 --> 00:36:19,750
open requests aren't being passed

00:36:17,500 --> 00:36:21,610
through and I can monitor the state of

00:36:19,750 --> 00:36:23,860
that circuit breaker as a proxy from

00:36:21,610 --> 00:36:27,130
monitoring that downstream service so if

00:36:23,860 --> 00:36:28,690
I go to a t10 hystrix that HTML this is

00:36:27,130 --> 00:36:31,030
a history dashboard another thing that

00:36:28,690 --> 00:36:33,100
you can pre configure and reuse on the

00:36:31,030 --> 00:36:34,990
on string on pivotal cloud fund in

00:36:33,100 --> 00:36:37,060
spring cloud services I can go to the

00:36:34,990 --> 00:36:38,140
circuit breaker here the node that has

00:36:37,060 --> 00:36:40,510
the circuit breaker and I can take that

00:36:38,140 --> 00:36:43,990
stream and I can paste it into this

00:36:40,510 --> 00:36:48,550
dashboard right like so now this circuit

00:36:43,990 --> 00:36:54,340
breaker stream goes on forever and ever

00:36:48,550 --> 00:36:57,160
and ever right it has no end it is

00:36:54,340 --> 00:37:02,200
infinite well there we go it is infinite

00:36:57,160 --> 00:37:03,960
come on browser do the right thing it

00:37:02,200 --> 00:37:06,250
goes on and on forever and ever and ever

00:37:03,960 --> 00:37:08,140
no matter what you do it'll just go on

00:37:06,250 --> 00:37:09,910
friend it goes on forever and ever it

00:37:08,140 --> 00:37:12,370
has no end it is infinite it is endless

00:37:09,910 --> 00:37:14,050
like the skies like the oceans like the

00:37:12,370 --> 00:37:16,570
stars and the bugs in your code just

00:37:14,050 --> 00:37:18,340
infinite right so whatever you do do not

00:37:16,570 --> 00:37:21,460
and I cannot underscore this enough do

00:37:18,340 --> 00:37:22,630
not curl that end point we're going to

00:37:21,460 --> 00:37:27,460
do is going to paste that endpoint into

00:37:22,630 --> 00:37:29,130
this dashboard and there we are we're

00:37:27,460 --> 00:37:31,630
going to make requests on the left

00:37:29,130 --> 00:37:33,100
localhost reservation names as we make

00:37:31,630 --> 00:37:34,960
requests on the left you can see the

00:37:33,100 --> 00:37:37,390
moving average trending ever upwards 14

00:37:34,960 --> 00:37:39,460
21 28 etcetera it's giving us an idea of

00:37:37,390 --> 00:37:40,690
what's happening as data throws flows

00:37:39,460 --> 00:37:42,850
through that circuit breaker it gives us

00:37:40,690 --> 00:37:43,840
not just node by node visibility but

00:37:42,850 --> 00:37:46,030
gives us an idea of the systemic

00:37:43,840 --> 00:37:48,160
behavior of our system itself right

00:37:46,030 --> 00:37:49,690
distributed tracing uncorrelated logging

00:37:48,160 --> 00:37:51,010
also support this and these are things

00:37:49,690 --> 00:37:52,600
that are built into the platform as well

00:37:51,010 --> 00:37:54,119
if you're using apps manager and spring

00:37:52,600 --> 00:37:55,859
cloud than the

00:37:54,119 --> 00:37:58,410
things just work you can go to the PCF

00:37:55,859 --> 00:37:59,849
metrics and see this detail right so

00:37:58,410 --> 00:38:02,069
we've talked about building a cloud

00:37:59,849 --> 00:38:03,660
native system a cognitive system is four

00:38:02,069 --> 00:38:04,289
different things it's agile it's easy to

00:38:03,660 --> 00:38:05,849
evolve over time

00:38:04,289 --> 00:38:08,690
it's robust in the face of service

00:38:05,849 --> 00:38:10,710
outages and topology changes it is

00:38:08,690 --> 00:38:12,269
observable both at the note at the

00:38:10,710 --> 00:38:15,690
individual node level and at the system

00:38:12,269 --> 00:38:17,309
level and finally finally it is elastic

00:38:15,690 --> 00:38:19,019
it takes advantage of the elasticity of

00:38:17,309 --> 00:38:21,390
a cloud application

00:38:19,019 --> 00:38:22,859
something like of course Cloud Foundry I

00:38:21,390 --> 00:38:24,660
want to thank you very much for your

00:38:22,859 --> 00:38:25,859
time today I wish we had more time I

00:38:24,660 --> 00:38:27,359
wish we had more time to talk about

00:38:25,859 --> 00:38:31,829
other things did you like what we saw

00:38:27,359 --> 00:38:35,640
here today a little bit I appreciate

00:38:31,829 --> 00:38:36,930
that I appreciate that I hope you liked

00:38:35,640 --> 00:38:38,339
it I certainly liked it I'm going the

00:38:36,930 --> 00:38:40,380
spring t-shirt and spring underwear of

00:38:38,339 --> 00:38:44,130
course I liked it but you don't have to

00:38:40,380 --> 00:38:45,450
take my name my word for it instead look

00:38:44,130 --> 00:38:46,920
at the other companies that are using

00:38:45,450 --> 00:38:48,450
these technologies is a small company

00:38:46,920 --> 00:38:50,369
just just down the street from here

00:38:48,450 --> 00:38:52,049
called Netflix that uses spring boot and

00:38:50,369 --> 00:38:53,670
spring cloud at production scale earn

00:38:52,049 --> 00:38:55,559
earnestly right they're using it in

00:38:53,670 --> 00:38:58,079
production at scale there's another

00:38:55,559 --> 00:39:00,569
company in in the East and the Far East

00:38:58,079 --> 00:39:02,549
well in the East Far East called China

00:39:00,569 --> 00:39:04,049
you know called Alibaba they're in China

00:39:02,549 --> 00:39:05,730
they're a small company that I believe

00:39:04,049 --> 00:39:06,900
one day is gonna be amazing they do

00:39:05,730 --> 00:39:08,519
right now they have the largest

00:39:06,900 --> 00:39:10,230
e-commerce catalog on the planet it's

00:39:08,519 --> 00:39:11,339
more than a billion items they're using

00:39:10,230 --> 00:39:13,019
spring boot and spring cladded

00:39:11,339 --> 00:39:14,970
production scale there's another company

00:39:13,019 --> 00:39:16,170
in China called Baidu they're a search

00:39:14,970 --> 00:39:17,910
engine the third largest search engine

00:39:16,170 --> 00:39:19,680
in the planet they are using Cloud

00:39:17,910 --> 00:39:21,509
Foundry spring boot and spring cloud at

00:39:19,680 --> 00:39:23,190
production scale as well there's another

00:39:21,509 --> 00:39:24,749
company even further in the Far East in

00:39:23,190 --> 00:39:26,309
Japan called rocket ENCOM they're an

00:39:24,749 --> 00:39:27,539
e-commerce engine they're using Cloud

00:39:26,309 --> 00:39:31,230
Foundry and spring booting spring cloud

00:39:27,539 --> 00:39:32,489
at production scale and Yahoo Japan is

00:39:31,230 --> 00:39:33,749
using cloud five minutes starting to use

00:39:32,489 --> 00:39:35,670
the spring boot as well so these are

00:39:33,749 --> 00:39:37,200
organizations that have the money the

00:39:35,670 --> 00:39:38,730
mindset their motivation and the need to

00:39:37,200 --> 00:39:40,019
solve these problems and they still

00:39:38,730 --> 00:39:41,970
choose to build on the pivotal stack

00:39:40,019 --> 00:39:43,289
because for them no matter what else

00:39:41,970 --> 00:39:45,359
they have on their plate what matters

00:39:43,289 --> 00:39:48,390
most to them is getting to production

00:39:45,359 --> 00:39:49,920
and that is all that we need to worry

00:39:48,390 --> 00:39:51,900
about thank you so much my friends thank

00:39:49,920 --> 00:39:56,650
you so much have a great day

00:39:51,900 --> 00:39:56,650

YouTube URL: https://www.youtube.com/watch?v=4srYv1ES7j8


