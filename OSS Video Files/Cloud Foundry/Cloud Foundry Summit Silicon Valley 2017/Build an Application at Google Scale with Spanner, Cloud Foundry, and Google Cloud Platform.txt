Title: Build an Application at Google Scale with Spanner, Cloud Foundry, and Google Cloud Platform
Publication date: 2017-06-22
Playlist: Cloud Foundry Summit Silicon Valley 2017
Description: 
	Build an Application at Google Scale with Spanner, Cloud Foundry, and Google Cloud Platform [I] - Jeff Johnson, Google    

Google runs on Spanner, the global scale database that allows our product teams to focus on building incredible products and our infrastructure teams to focus on delivering database that's consistent, highly-available (5 9's), and tolerant to network partitions. This innovation is now in your Cloud Foundry marketplace as Google Cloud Spanner through the GCP Service Broker. Join Google Engineers as they build a ticketing application on Cloud Foundry and see how simple it is push to data centers across the world and achieve Google scale without handling replication, sharding, network splits, or the rest of long tail of problems that comes with managing state across the planet.

Jeff Johnson
Jeff is a Software Engineer at Google who is giving developers super powers by integrating the tools that run Google with open source Cloud Foundry. He has worked closely with the excellent engineers at Pivotal on the stackdriver-tools BOSH release to integrate Google's Logging, Monitoring, Tracing, and Debugging with Cloud Foundry. Today he is working with Pivotal on bringing Kubernetes' container orchestration strengths to complement Cloud Foundry applications. Check out the Pivotal Cloud Foundry on Google Cloud Platform web series for a hint of what's to come.
Captions: 
	00:00:00,030 --> 00:00:05,339
so my name is Jeff Johnson for those of

00:00:03,750 --> 00:00:06,990
you who weren't just in this room I am a

00:00:05,339 --> 00:00:09,599
software engineer working on Cloud

00:00:06,990 --> 00:00:12,809
Foundry at Google you can find me at

00:00:09,599 --> 00:00:15,059
Jeff's tech tips on Twitter I joined

00:00:12,809 --> 00:00:16,500
Google about eight months ago and I've

00:00:15,059 --> 00:00:18,900
been working on Cloud Foundry full-time

00:00:16,500 --> 00:00:22,080
ever since but before I joined Google I

00:00:18,900 --> 00:00:23,640
of course had an interview and when you

00:00:22,080 --> 00:00:26,849
interview at a place like Google you

00:00:23,640 --> 00:00:28,740
read this book this becomes the thing

00:00:26,849 --> 00:00:30,119
you read from top to bottom and you do

00:00:28,740 --> 00:00:32,940
it so that you can learn you know how to

00:00:30,119 --> 00:00:38,820
draw these really fast and how to invert

00:00:32,940 --> 00:00:40,760
them and once you feel confident enough

00:00:38,820 --> 00:00:43,200
you say okay let's do it take me on site

00:00:40,760 --> 00:00:45,120
put me in front of a whiteboard and of

00:00:43,200 --> 00:00:47,300
course the first thing they do is they

00:00:45,120 --> 00:00:49,590
give you the 30 minute design question

00:00:47,300 --> 00:00:54,440
that's the design question that you can

00:00:49,590 --> 00:00:58,230
sort of prepare for now the one I got

00:00:54,440 --> 00:01:01,079
look like this I want to sell tickets to

00:00:58,230 --> 00:01:03,840
an event obviously that's not a question

00:01:01,079 --> 00:01:05,970
first off you're not really in a strong

00:01:03,840 --> 00:01:13,890
position though like okay sure I'll help

00:01:05,970 --> 00:01:15,330
you now these simple naive solutions

00:01:13,890 --> 00:01:17,630
what you start with start with something

00:01:15,330 --> 00:01:20,070
simple let's try to make it big

00:01:17,630 --> 00:01:23,759
the naive solution looks something like

00:01:20,070 --> 00:01:26,280
this ticket booths have been around

00:01:23,759 --> 00:01:28,259
since they've been tickets they're very

00:01:26,280 --> 00:01:29,100
reliable way to sell tickets and it

00:01:28,259 --> 00:01:32,159
works just fine

00:01:29,100 --> 00:01:34,350
I really did want the job so I didn't

00:01:32,159 --> 00:01:37,439
say the solution but let's think about

00:01:34,350 --> 00:01:41,250
it what does the ticket booth provide

00:01:37,439 --> 00:01:42,990
well a ticket booth is trustworthy when

00:01:41,250 --> 00:01:45,540
I say that I mean when I hand them money

00:01:42,990 --> 00:01:47,820
they hand me back a ticket I trust that

00:01:45,540 --> 00:01:50,579
that is my ticket they trust that is my

00:01:47,820 --> 00:01:52,560
money and I trust no one is gonna try to

00:01:50,579 --> 00:01:54,119
take my seat okay they haven't given

00:01:52,560 --> 00:01:55,439
this ticket to two people they have a

00:01:54,119 --> 00:02:00,000
physical stack of them that they're

00:01:55,439 --> 00:02:02,490
handing to me a ticket booth can support

00:02:00,000 --> 00:02:05,040
a huge event and when I say big let's

00:02:02,490 --> 00:02:08,879
say a hundred thousand seats I assume

00:02:05,040 --> 00:02:10,979
there's venues that big but a hundred

00:02:08,879 --> 00:02:12,750
thousand tickets is like it's just some

00:02:10,979 --> 00:02:13,150
space right you could build a little bit

00:02:12,750 --> 00:02:14,650
bigger

00:02:13,150 --> 00:02:17,519
and fit them it's it's not that bad just

00:02:14,650 --> 00:02:20,379
stack them one on top of the other one

00:02:17,519 --> 00:02:21,939
the problem with this answer and the

00:02:20,379 --> 00:02:23,920
reason why it's the naive solution

00:02:21,939 --> 00:02:26,200
though is it's not answering the full

00:02:23,920 --> 00:02:28,870
question okay we have a big event a

00:02:26,200 --> 00:02:30,760
hundred thousand tickets well we

00:02:28,870 --> 00:02:32,500
probably want to sell these globally so

00:02:30,760 --> 00:02:35,500
let's say it's the NSYNC reunion tour

00:02:32,500 --> 00:02:37,090
okay and we want to sell them in the US

00:02:35,500 --> 00:02:39,849
we want people in Japan to be able to

00:02:37,090 --> 00:02:42,400
buy them Europe everywhere this ticket

00:02:39,849 --> 00:02:44,680
booth is not gonna cut it you could say

00:02:42,400 --> 00:02:47,739
well just build one over there

00:02:44,680 --> 00:02:49,599
so we build another one in Japan to do

00:02:47,739 --> 00:02:51,609
that though you'd have to take that half

00:02:49,599 --> 00:02:54,069
of those tickets and you could put them

00:02:51,609 --> 00:02:55,329
over there in Japan but what that means

00:02:54,069 --> 00:02:57,519
is you're not going to be able to

00:02:55,329 --> 00:02:59,709
efficiently allocate these tickets so

00:02:57,519 --> 00:03:02,139
let's say it's a huge hit in Japan and

00:02:59,709 --> 00:03:04,799
up in Washington no one is really that

00:03:02,139 --> 00:03:07,599
interested you've got 50 thousand left

00:03:04,799 --> 00:03:09,069
but you could have easily sold those if

00:03:07,599 --> 00:03:11,319
they were just in the right location at

00:03:09,069 --> 00:03:16,269
the right time it's hard to make that

00:03:11,319 --> 00:03:17,739
decision it's not very efficient sorry

00:03:16,269 --> 00:03:20,560
because that reason it's not very fast

00:03:17,739 --> 00:03:22,299
if I walk up and I see 10,000 people in

00:03:20,560 --> 00:03:25,449
line I'm gone it's not gonna happen so

00:03:22,299 --> 00:03:27,780
alright real solution right not much

00:03:25,449 --> 00:03:30,730
time left these interviews are very fast

00:03:27,780 --> 00:03:32,590
the real solution the real naive

00:03:30,730 --> 00:03:36,909
solution is something we used to just

00:03:32,590 --> 00:03:38,530
call a web application or a website so

00:03:36,909 --> 00:03:42,069
when I started working on websites

00:03:38,530 --> 00:03:44,049
it was PHP and my sequel I was a single

00:03:42,069 --> 00:03:46,690
Linux box I installed all the pieces and

00:03:44,049 --> 00:03:48,510
I think my dad let me put the Box in his

00:03:46,690 --> 00:03:52,599
office so I could give free bandwidth

00:03:48,510 --> 00:03:56,079
sort of a closet and you know what that

00:03:52,599 --> 00:03:58,389
works great that works that's trust

00:03:56,079 --> 00:04:00,849
ready there's a single database there's

00:03:58,389 --> 00:04:03,129
a single source of the truth we can do

00:04:00,849 --> 00:04:04,239
transactions like probably to know about

00:04:03,129 --> 00:04:06,609
them at the time but you could do

00:04:04,239 --> 00:04:07,659
transactions which means okay no one is

00:04:06,609 --> 00:04:10,810
gonna grab that ticket while I'm

00:04:07,659 --> 00:04:12,609
grabbing it it's globally accessible

00:04:10,810 --> 00:04:14,409
because it's online I don't if you guys

00:04:12,609 --> 00:04:16,000
have been online but if you've been

00:04:14,409 --> 00:04:18,669
online you can get to any site it

00:04:16,000 --> 00:04:20,380
doesn't matter where it is it's

00:04:18,669 --> 00:04:23,200
efficient we're not gonna have that

00:04:20,380 --> 00:04:25,770
problem of well if I'm in Japan I can't

00:04:23,200 --> 00:04:28,050
pick that piece of paper up

00:04:25,770 --> 00:04:30,870
but it's not gonna support a big event a

00:04:28,050 --> 00:04:32,340
big event means we've got thousands of

00:04:30,870 --> 00:04:34,590
people around the world trying to buy

00:04:32,340 --> 00:04:36,150
these tickets a big event means I wrote

00:04:34,590 --> 00:04:39,840
a bot that's gonna try to buy these

00:04:36,150 --> 00:04:42,000
tickets and sell them on StubHub that's

00:04:39,840 --> 00:04:44,190
single machine that I have running in my

00:04:42,000 --> 00:04:45,960
dad's office is gonna fold it can't even

00:04:44,190 --> 00:04:51,240
queue people up all the TCP connections

00:04:45,960 --> 00:04:52,830
are gonna shut it down now we're at the

00:04:51,240 --> 00:04:55,289
Cloud Foundry summit so we got to talk

00:04:52,830 --> 00:04:56,849
about the cloud native solution this is

00:04:55,289 --> 00:05:01,889
the real solution that I wish I could

00:04:56,849 --> 00:05:04,409
have done a cloud native solution thinks

00:05:01,889 --> 00:05:06,810
about the web I'm sorry thinks about

00:05:04,409 --> 00:05:10,409
compute as a service it thinks about

00:05:06,810 --> 00:05:14,300
data as a service so in the perfect

00:05:10,409 --> 00:05:17,729
cloud native picture I say here's my app

00:05:14,300 --> 00:05:19,949
here's my way I sell tickets put it as

00:05:17,729 --> 00:05:22,889
close to people as you can put an

00:05:19,949 --> 00:05:26,069
instance in the US put some in Japan

00:05:22,889 --> 00:05:27,840
put some in Europe so we take the speed

00:05:26,069 --> 00:05:32,759
of light out of the equation or at least

00:05:27,840 --> 00:05:34,319
make it you know less significant that's

00:05:32,759 --> 00:05:37,349
pretty easy to do with Cloud Foundry and

00:05:34,319 --> 00:05:42,630
here's a sketch of how I've done it on

00:05:37,349 --> 00:05:44,069
my project so what I have is three

00:05:42,630 --> 00:05:46,949
completely separate Cloud Foundry

00:05:44,069 --> 00:05:49,409
instances those three completely

00:05:46,949 --> 00:05:52,650
separate app instances are hosted in

00:05:49,409 --> 00:05:54,419
different regions in the world what this

00:05:52,650 --> 00:05:57,419
allows me to do as a developer is say

00:05:54,419 --> 00:05:58,710
here's my code run it I won't quote

00:05:57,419 --> 00:06:01,469
haiku because I won't get it perfect but

00:05:58,710 --> 00:06:03,029
here it is I don't want to reinvent the

00:06:01,469 --> 00:06:08,250
wheel of how to deploy an application

00:06:03,029 --> 00:06:11,610
around the world in front of that I put

00:06:08,250 --> 00:06:15,090
a global load balancer the global load

00:06:11,610 --> 00:06:16,949
balancer is more of a term for a product

00:06:15,090 --> 00:06:19,620
than an actual load balancer when we say

00:06:16,949 --> 00:06:21,029
load balancer I don't mean an engine X

00:06:19,620 --> 00:06:23,250
Box or H a proxy

00:06:21,029 --> 00:06:26,849
it means the Google front ends at the

00:06:23,250 --> 00:06:28,770
edge of our Google Data Centers those

00:06:26,849 --> 00:06:30,870
are the same load balancers that are

00:06:28,770 --> 00:06:33,539
powering YouTube ads you know things

00:06:30,870 --> 00:06:36,719
that things that a few people are using

00:06:33,539 --> 00:06:39,530
per day what we can do in front of them

00:06:36,719 --> 00:06:42,990
is to stick a multicast IP

00:06:39,530 --> 00:06:45,720
multicast means we can respond to an

00:06:42,990 --> 00:06:48,870
address from many locations so I have

00:06:45,720 --> 00:06:50,910
this IP and for me up in Washington I

00:06:48,870 --> 00:06:54,090
dial it it puts me to a data center in

00:06:50,910 --> 00:06:58,080
Oregon across the world i dial it and it

00:06:54,090 --> 00:07:00,390
puts me to a data center in Japan once

00:06:58,080 --> 00:07:03,030
it gets into the Google Data Center it's

00:07:00,390 --> 00:07:05,250
on Google's private network the private

00:07:03,030 --> 00:07:08,070
network is in a lot of ways a second

00:07:05,250 --> 00:07:14,930
Internet but without capacity issues and

00:07:08,070 --> 00:07:14,930
without a little bit of the noise that

00:07:15,230 --> 00:07:20,250
my my Google assistant has just popped

00:07:18,600 --> 00:07:25,280
up by the way so I'm gonna try not to

00:07:20,250 --> 00:07:28,470
use the word goog Ali I guess so

00:07:25,280 --> 00:07:33,630
so that Google front-end doesn't doesn't

00:07:28,470 --> 00:07:35,160
just know about it doesn't just sorry

00:07:33,630 --> 00:07:37,290
the Google front-end can do a lot of

00:07:35,160 --> 00:07:38,190
fancy stuff with traffic so imagine

00:07:37,290 --> 00:07:38,790
you're writing an application like

00:07:38,190 --> 00:07:41,340
YouTube

00:07:38,790 --> 00:07:43,140
you're not gonna say all right this

00:07:41,340 --> 00:07:45,270
isn't you're in Japan okay well this

00:07:43,140 --> 00:07:46,410
data is over here in the US so I'm just

00:07:45,270 --> 00:07:47,790
gonna route that traffic because we're

00:07:46,410 --> 00:07:50,070
talking about Giga bytes 1 Giga bytes

00:07:47,790 --> 00:07:52,020
there's a lot smarter than that it can

00:07:50,070 --> 00:07:54,030
say I know where I am I know where this

00:07:52,020 --> 00:07:56,220
traffic is coming from and I have a pool

00:07:54,030 --> 00:07:58,170
of healthy nodes really close by that I

00:07:56,220 --> 00:07:59,850
can send your traffic to so it's gonna

00:07:58,170 --> 00:08:03,530
send the traffic to whatever's the

00:07:59,850 --> 00:08:03,530
lowest latency and whatever's healthy

00:08:04,730 --> 00:08:12,600
now all roads here point to this ominous

00:08:08,490 --> 00:08:13,980
question mark it wasn't it wasn't too

00:08:12,600 --> 00:08:16,080
challenging to get these three cloud

00:08:13,980 --> 00:08:17,520
foundries to play at least if you've

00:08:16,080 --> 00:08:21,330
deployed Cloud Foundry a few hundred

00:08:17,520 --> 00:08:23,340
times but once you have it not that bad

00:08:21,330 --> 00:08:31,200
right but where does that database come

00:08:23,340 --> 00:08:33,360
from the state is really what makes what

00:08:31,200 --> 00:08:35,460
makes the sale right a web application

00:08:33,360 --> 00:08:38,400
is great it's a great way to do things

00:08:35,460 --> 00:08:40,440
but at the end we're just moving data

00:08:38,400 --> 00:08:42,150
around right at the end all transactions

00:08:40,440 --> 00:08:45,890
are just data from here to here and

00:08:42,150 --> 00:08:45,890
that's what we're really interested in

00:08:46,130 --> 00:08:51,660
out of a database there's a few set of

00:08:49,500 --> 00:08:52,889
things that I need to deliver something

00:08:51,660 --> 00:08:54,869
that that

00:08:52,889 --> 00:08:58,559
the points of the ticket box but at a

00:08:54,869 --> 00:09:00,839
close Gary I need transactions I need to

00:08:58,559 --> 00:09:02,699
be able to definitively say when I got a

00:09:00,839 --> 00:09:03,089
ticket it's my ticket no one else could

00:09:02,699 --> 00:09:05,639
get it

00:09:03,089 --> 00:09:07,379
I need high availability and throughput

00:09:05,639 --> 00:09:09,989
for that initial surge of people coming

00:09:07,379 --> 00:09:12,410
in to buy tickets I need global access

00:09:09,989 --> 00:09:15,059
so I can reach the world with this and

00:09:12,410 --> 00:09:18,869
ideally I would like to scale my

00:09:15,059 --> 00:09:20,279
solution with the load we can scale our

00:09:18,869 --> 00:09:22,889
applications with Cloud Foundry pretty

00:09:20,279 --> 00:09:24,449
easily you just say yeah I want 16

00:09:22,889 --> 00:09:28,109
instances now and now I just need one

00:09:24,449 --> 00:09:31,139
instance ideally my database can do the

00:09:28,109 --> 00:09:33,209
same thing and I don't have to think

00:09:31,139 --> 00:09:34,619
about it too much now all of these

00:09:33,209 --> 00:09:36,329
classes of problems

00:09:34,619 --> 00:09:38,639
there's tons of solutions to them

00:09:36,329 --> 00:09:41,040
there's tons of ways to change your

00:09:38,639 --> 00:09:43,290
application to deal with them you know

00:09:41,040 --> 00:09:44,730
transactions for example you could stick

00:09:43,290 --> 00:09:46,410
your messages in a queue and have a

00:09:44,730 --> 00:09:48,929
central processing thing that pulls them

00:09:46,410 --> 00:09:51,809
out but in a lot of ways that just

00:09:48,929 --> 00:09:53,970
creating a new funnel somewhere else you

00:09:51,809 --> 00:09:56,579
can charge your data across the world

00:09:53,970 --> 00:09:58,079
and say okay these tickets in Europe are

00:09:56,579 --> 00:09:59,579
the ones we're gonna look at but we're

00:09:58,079 --> 00:10:01,259
starting to think about the same issues

00:09:59,579 --> 00:10:01,470
you have moving multiple ticket booths

00:10:01,259 --> 00:10:04,019
right

00:10:01,470 --> 00:10:06,749
you could have read-only nodes and write

00:10:04,019 --> 00:10:09,389
nodes but as soon as you do that your

00:10:06,749 --> 00:10:11,100
application is now it's really changed a

00:10:09,389 --> 00:10:13,079
bit it says I connect to a totally

00:10:11,100 --> 00:10:14,669
different machine to think about how to

00:10:13,079 --> 00:10:18,199
read this data and once I'm finally

00:10:14,669 --> 00:10:21,929
ready I go find this other special one I

00:10:18,199 --> 00:10:24,269
see these all as workarounds to the

00:10:21,929 --> 00:10:29,369
traditional relational database and

00:10:24,269 --> 00:10:31,439
there's endless ways to do it but we

00:10:29,369 --> 00:10:33,389
want cloud native right we want just a

00:10:31,439 --> 00:10:35,069
service give me a database it should be

00:10:33,389 --> 00:10:39,799
all over the world it should be magical

00:10:35,069 --> 00:10:39,799
right not possible of course it is

00:10:40,819 --> 00:10:47,009
spanner is the database service that

00:10:43,350 --> 00:10:51,509
powers AdWords photos and essentially

00:10:47,009 --> 00:10:55,319
Google there are some in-depth research

00:10:51,509 --> 00:10:56,879
papers that I cannot make it through but

00:10:55,319 --> 00:10:59,489
if you're interested in sort of how the

00:10:56,879 --> 00:11:01,769
time ticks underneath the hood how the

00:10:59,489 --> 00:11:03,629
Google Network sort of plays a role in

00:11:01,769 --> 00:11:06,310
all this and how that all fits together

00:11:03,629 --> 00:11:08,950
we've been publishing papers about that

00:11:06,310 --> 00:11:13,270
long before we've released a cloud

00:11:08,950 --> 00:11:15,630
product let's look at the cloud product

00:11:13,270 --> 00:11:18,790
though and what it can do for developers

00:11:15,630 --> 00:11:20,650
first it does the expected okay you have

00:11:18,790 --> 00:11:23,200
a sequel language for getting data out

00:11:20,650 --> 00:11:26,890
that's got joins the expected indices

00:11:23,200 --> 00:11:32,830
and you've also got acid transactions so

00:11:26,890 --> 00:11:34,060
you've got guaranteed transactions but

00:11:32,830 --> 00:11:36,340
what's awesome about that is with

00:11:34,060 --> 00:11:38,620
spanner you can get single-digit Layton

00:11:36,340 --> 00:11:42,790
sees up to five nines of availability

00:11:38,620 --> 00:11:45,760
and it's all backed by Google's SRE team

00:11:42,790 --> 00:11:48,580
so there's a lot of data based solutions

00:11:45,760 --> 00:11:52,600
out there an example is Etsy D which we

00:11:48,580 --> 00:11:55,050
use for some of our projects but once

00:11:52,600 --> 00:11:58,420
you have these databases use quorum to

00:11:55,050 --> 00:12:01,090
try to spread out things and do

00:11:58,420 --> 00:12:02,830
transactions and do committing but

00:12:01,090 --> 00:12:04,870
maintaining those things are incredibly

00:12:02,830 --> 00:12:06,310
hard there's a few talks here where

00:12:04,870 --> 00:12:07,660
Cloud Foundry is actually switching out

00:12:06,310 --> 00:12:10,570
of using these sort of distributed

00:12:07,660 --> 00:12:11,470
database systems purely for the reason a

00:12:10,570 --> 00:12:13,750
big part of the reason is because

00:12:11,470 --> 00:12:15,640
they're just so hard to manage we've got

00:12:13,750 --> 00:12:17,620
an entire team of sres doing that and

00:12:15,640 --> 00:12:21,550
they're also doing it for Adwords so

00:12:17,620 --> 00:12:24,130
they're paying attention under the hood

00:12:21,550 --> 00:12:26,560
spanner is doing a lot of the

00:12:24,130 --> 00:12:29,170
workarounds we talked about so it's

00:12:26,560 --> 00:12:31,089
doing charting it can do scaling just by

00:12:29,170 --> 00:12:32,710
flipping a knob it's doing replication

00:12:31,089 --> 00:12:34,990
but you don't worry about it

00:12:32,710 --> 00:12:38,410
you can't even it's not visible to you a

00:12:34,990 --> 00:12:40,930
lot of those aspects and what I think is

00:12:38,410 --> 00:12:44,589
the coolest part as you use it as an API

00:12:40,930 --> 00:12:46,450
so you look you just ask for spanner you

00:12:44,589 --> 00:12:48,730
don't have to say this is my spanner

00:12:46,450 --> 00:12:50,830
server this is the IP address that I

00:12:48,730 --> 00:12:52,510
talked to this specific spanner that's

00:12:50,830 --> 00:12:58,000
abstracted away it's not something you

00:12:52,510 --> 00:13:00,490
need to worry about I'm gonna dive into

00:12:58,000 --> 00:13:01,480
an example here but before I do I want

00:13:00,490 --> 00:13:04,230
to talk about just some of the

00:13:01,480 --> 00:13:07,270
transactional concepts that spanner has

00:13:04,230 --> 00:13:08,710
there's a single read that's exactly

00:13:07,270 --> 00:13:12,520
what you think it is just read a piece

00:13:08,710 --> 00:13:13,870
of data there's a read transaction now

00:13:12,520 --> 00:13:17,800
read transaction is we're gonna read

00:13:13,870 --> 00:13:19,330
many things at once the read transaction

00:13:17,800 --> 00:13:19,870
is not going to lock your database and

00:13:19,330 --> 00:13:22,630
free

00:13:19,870 --> 00:13:24,520
at a state in the sense of others can't

00:13:22,630 --> 00:13:27,460
write to it but it is going to be a

00:13:24,520 --> 00:13:30,400
snapshot in time where all your data is

00:13:27,460 --> 00:13:35,440
one way so in a infinitesimally small

00:13:30,400 --> 00:13:36,940
point in time this is the snapshot of my

00:13:35,440 --> 00:13:38,610
data you can do that in a transaction

00:13:36,940 --> 00:13:42,090
without any other performance effects

00:13:38,610 --> 00:13:44,710
the last bit is a readwrite transaction

00:13:42,090 --> 00:13:47,320
the readwrite transaction is those asset

00:13:44,710 --> 00:13:50,170
guarantees it does pessimistic locking

00:13:47,320 --> 00:13:53,080
who locking it's a mouthful I encourage

00:13:50,170 --> 00:13:55,930
you read the paper two-phase commits and

00:13:53,080 --> 00:13:57,580
it can potentially retry actions so if

00:13:55,930 --> 00:14:01,620
things have changed upstream that it's

00:13:57,580 --> 00:14:01,620
dependent on they can retry those things

00:14:01,980 --> 00:14:06,190
what I like about all this stuff is you

00:14:04,510 --> 00:14:07,720
don't have to understand it in depth to

00:14:06,190 --> 00:14:11,170
get moving with it you don't have to

00:14:07,720 --> 00:14:13,870
understand how true time works how all

00:14:11,170 --> 00:14:17,200
these how how we're in some ways

00:14:13,870 --> 00:14:18,550
cap but maybe not a but five nines of a

00:14:17,200 --> 00:14:19,810
you don't need to understand that you

00:14:18,550 --> 00:14:21,370
can get started with spanner right now

00:14:19,810 --> 00:14:23,800
so I'm going to show you an application

00:14:21,370 --> 00:14:25,930
that I whipped together to be my answer

00:14:23,800 --> 00:14:29,080
to that interview question that maybe

00:14:25,930 --> 00:14:30,250
didn't go as well at the time and I'm

00:14:29,080 --> 00:14:33,420
going to switch to my mic number two

00:14:30,250 --> 00:14:33,420
which is exciting

00:15:04,830 --> 00:15:07,340
yeah

00:15:15,670 --> 00:15:22,189
so this ticket application is very

00:15:17,930 --> 00:15:24,079
simple it's kind of a REST API but what

00:15:22,189 --> 00:15:26,209
it can do for me is it can tell me okay

00:15:24,079 --> 00:15:28,220
what events do you see what seats are

00:15:26,209 --> 00:15:32,209
available and we can sort of do a

00:15:28,220 --> 00:15:34,519
purchase so let's look at I just have

00:15:32,209 --> 00:15:36,999
some aliases here because the host names

00:15:34,519 --> 00:15:36,999
are a bit long

00:15:47,560 --> 00:15:52,630
just to show you there's nothing on my

00:15:49,210 --> 00:15:54,850
sleeve these are just curls to a app I

00:15:52,630 --> 00:15:56,560
have running and the app that I'm

00:15:54,850 --> 00:15:59,020
curling is my global load balancer so

00:15:56,560 --> 00:16:01,029
the way I have this deployed is I could

00:15:59,020 --> 00:16:02,800
hit a regional back-end if I front-end

00:16:01,029 --> 00:16:04,570
if I wanted to but I'm using Google's

00:16:02,800 --> 00:16:06,130
load balancer to say okay give me the

00:16:04,570 --> 00:16:08,440
closest one give me the fastest one

00:16:06,130 --> 00:16:09,100
what's available so when I show my

00:16:08,440 --> 00:16:13,080
tickets

00:16:09,100 --> 00:16:13,080
I can then show the seats available

00:16:36,590 --> 00:16:39,580
potentially

00:16:39,860 --> 00:16:43,680
rest its rest like okay so I have a list

00:16:43,080 --> 00:16:47,580
of seats

00:16:43,680 --> 00:16:50,070
now not all seats are equal some seats

00:16:47,580 --> 00:16:52,410
are like the ones you guys are in that

00:16:50,070 --> 00:16:54,240
could be reserved ahead of time a single

00:16:52,410 --> 00:16:56,400
seat no one can stand there but there's

00:16:54,240 --> 00:16:58,500
also sets of seats that are just kind of

00:16:56,400 --> 00:17:00,720
a pool of people sort of mashed around

00:16:58,500 --> 00:17:03,990
each other general admission is they

00:17:00,720 --> 00:17:06,089
call it they have their own sort of

00:17:03,990 --> 00:17:08,130
unique problems but we're able to deal

00:17:06,089 --> 00:17:10,640
with them much in the same way here so

00:17:08,130 --> 00:17:13,860
I'm gonna just go ahead and buy the

00:17:10,640 --> 00:17:16,760
general admission seat or sorry the

00:17:13,860 --> 00:17:16,760
reserved seat

00:17:26,230 --> 00:17:32,940
this is this is where it gets real demo

00:17:38,630 --> 00:17:44,530
I should be using my vin keys but not in

00:17:41,090 --> 00:17:44,530
front of this audience okay

00:17:49,769 --> 00:17:55,330
okay so I sent a post of course I got

00:17:52,419 --> 00:17:57,190
back a gooood cuz it's the cloud but

00:17:55,330 --> 00:18:01,649
trust me that is a successful purchase

00:17:57,190 --> 00:18:01,649
if I looked for it we could see that

00:18:03,389 --> 00:18:08,110
ideally that that no longer has any

00:18:06,340 --> 00:18:09,789
available for that specific ticket and

00:18:08,110 --> 00:18:12,669
if I try to purchase again it's not

00:18:09,789 --> 00:18:14,620
gonna work okay not that not that big of

00:18:12,669 --> 00:18:16,600
a surprise now where that gets

00:18:14,620 --> 00:18:18,220
interesting though is when we have

00:18:16,600 --> 00:18:20,679
thousands of people doing this at once

00:18:18,220 --> 00:18:22,720
so I'm gonna go ahead and spin up a few

00:18:20,679 --> 00:18:27,370
machines on gcpd to start purchasing

00:18:22,720 --> 00:18:33,250
tickets to my GA and we'll look at how

00:18:27,370 --> 00:18:36,179
that goes so let me do a watch just to

00:18:33,250 --> 00:18:36,179
see what seats are there

00:18:50,380 --> 00:18:55,570
so what this is doing is just launching

00:18:52,929 --> 00:18:56,380
up GCP preemptable instances with a

00:18:55,570 --> 00:18:58,660
single core

00:18:56,380 --> 00:19:00,340
so our preemptable instances mean it

00:18:58,660 --> 00:19:02,020
could get deleted at any time or sorry

00:19:00,340 --> 00:19:04,030
shut off at any time interrupted for

00:19:02,020 --> 00:19:06,549
other work but what it also means is

00:19:04,030 --> 00:19:08,260
they're significantly cheaper I won't

00:19:06,549 --> 00:19:09,549
say a percentage right now but all I

00:19:08,260 --> 00:19:12,400
care about is I've got a bunch of

00:19:09,549 --> 00:19:15,309
machines curling this API and sort of

00:19:12,400 --> 00:19:16,870
buying tickets as this spins up I want

00:19:15,309 --> 00:19:19,140
to take a look at what the code looks

00:19:16,870 --> 00:19:19,140
like

00:19:28,460 --> 00:19:34,759
so this is a simple go web app and I'm

00:19:31,820 --> 00:19:37,450
going to look at that seats method we

00:19:34,759 --> 00:19:37,450
are that seats

00:19:47,210 --> 00:19:52,970
so to talk to spanner I'm using the

00:19:49,550 --> 00:19:56,390
spanner SDK I'm providing it a sequel

00:19:52,970 --> 00:19:58,970
query nothing very fancy there and I'm

00:19:56,390 --> 00:20:00,680
pulling data out of it so this is just a

00:19:58,970 --> 00:20:03,620
single read that we talked about that

00:20:00,680 --> 00:20:07,190
sort of first class of transaction to

00:20:03,620 --> 00:20:08,600
date there is not a spanner ORM but I'm

00:20:07,190 --> 00:20:11,690
interested in one if anyone else is

00:20:08,600 --> 00:20:13,070
interested but this kind of simplifies

00:20:11,690 --> 00:20:14,600
that and just shows you what's going

00:20:13,070 --> 00:20:16,340
under what's really happening underneath

00:20:14,600 --> 00:20:20,030
the hood so I'm doing a select from

00:20:16,340 --> 00:20:22,220
spanner pulling the data out unpacking

00:20:20,030 --> 00:20:24,460
it and just constructing an object in a

00:20:22,220 --> 00:20:24,460
list

00:20:41,210 --> 00:20:47,160
here's where the transaction happens the

00:20:44,550 --> 00:20:49,800
way spanner does a transaction at least

00:20:47,160 --> 00:20:52,740
didn't go here is we start with a

00:20:49,800 --> 00:20:55,170
function we give it a function and say

00:20:52,740 --> 00:20:56,750
within this function execute this code

00:20:55,170 --> 00:20:58,620
in a single transaction

00:20:56,750 --> 00:21:01,200
what spinner is going to do is it's

00:20:58,620 --> 00:21:03,150
going to keep track of all the things

00:21:01,200 --> 00:21:04,980
that I'm reading that means all the

00:21:03,150 --> 00:21:07,290
things I'm making assumptions based on

00:21:04,980 --> 00:21:10,230
and all the things that I want to write

00:21:07,290 --> 00:21:12,510
based on that if things change while

00:21:10,230 --> 00:21:14,040
that's happening if people are able to

00:21:12,510 --> 00:21:16,200
update the things that I'm wondering

00:21:14,040 --> 00:21:22,290
about then it will try to replay that

00:21:16,200 --> 00:21:23,280
transaction so on this line here right

00:21:22,290 --> 00:21:25,050
under this because I think it'll become

00:21:23,280 --> 00:21:26,940
a legible one to do that on this line

00:21:25,050 --> 00:21:28,770
here I'm just reading a row just as I

00:21:26,940 --> 00:21:32,880
did and sort of that list but I'm doing

00:21:28,770 --> 00:21:34,290
it along on that transaction and the row

00:21:32,880 --> 00:21:39,900
I'm reading is just to see okay

00:21:34,290 --> 00:21:42,630
how many seats are available I unpack

00:21:39,900 --> 00:21:46,260
the requests unpacking variables know

00:21:42,630 --> 00:21:48,180
where M will be nice here and I make a

00:21:46,260 --> 00:21:50,220
decision if there's no seats available

00:21:48,180 --> 00:21:51,930
that's an error we're done we're not

00:21:50,220 --> 00:21:54,390
gonna try this transaction again it's

00:21:51,930 --> 00:21:59,460
over it was a failure that's fine not

00:21:54,390 --> 00:22:00,930
everybody can sit in one seat but then I

00:21:59,460 --> 00:22:03,570
make a write as part of that transaction

00:22:00,930 --> 00:22:05,190
and I'm making two rights the one right

00:22:03,570 --> 00:22:05,760
I'm making is to update that seats

00:22:05,190 --> 00:22:07,680
available

00:22:05,760 --> 00:22:10,020
so I'm decrementing it I'm removing one

00:22:07,680 --> 00:22:12,330
seat available for the single occupancy

00:22:10,020 --> 00:22:15,450
seats there was just one for GA there's

00:22:12,330 --> 00:22:17,160
a hundred thousand or something and I'm

00:22:15,450 --> 00:22:20,100
saying that one is gone that's there's

00:22:17,160 --> 00:22:21,870
one less spanners not using a decrement

00:22:20,100 --> 00:22:23,910
operator it's not pushing a message

00:22:21,870 --> 00:22:26,130
because a decrement operator doesn't

00:22:23,910 --> 00:22:27,690
really guarantee that it's going to the

00:22:26,130 --> 00:22:29,550
value that I expect it to be going to

00:22:27,690 --> 00:22:35,130
I'm literally just saying seats

00:22:29,550 --> 00:22:36,630
available minus one it's critical that

00:22:35,130 --> 00:22:39,390
this is wrapped in a transaction that

00:22:36,630 --> 00:22:41,400
says if this data changed then don't

00:22:39,390 --> 00:22:44,010
commit this this is dangerous to commit

00:22:41,400 --> 00:22:47,820
because if we had two of these machines

00:22:44,010 --> 00:22:49,050
going at once which we should have a 20

00:22:47,820 --> 00:22:50,910
or something hitting our Cloud Foundry

00:22:49,050 --> 00:22:52,380
if we had two of them doing at once then

00:22:50,910 --> 00:22:54,809
they would both commit the same value

00:22:52,380 --> 00:22:57,429
not acceptable here

00:22:54,809 --> 00:22:58,929
so all that mutation is wrapped and

00:22:57,429 --> 00:23:02,679
buffered in that single read right and

00:22:58,929 --> 00:23:04,929
committed and we know how it does based

00:23:02,679 --> 00:23:06,580
on the output of this so when it's done

00:23:04,929 --> 00:23:08,470
we're gonna have an error if it was

00:23:06,580 --> 00:23:10,750
unsuccessful or we're gonna go ahead and

00:23:08,470 --> 00:23:12,460
be able to use our purchase ID and we're

00:23:10,750 --> 00:23:15,159
gonna write an entry in a purchase table

00:23:12,460 --> 00:23:20,400
so this is sort of how we denote success

00:23:15,159 --> 00:23:20,400
for this so let's see how that's going

00:23:30,430 --> 00:23:35,600
[Laughter]

00:23:42,900 --> 00:23:47,430
so we can see that count here is

00:23:44,840 --> 00:23:49,020
lowering and it's just periodically

00:23:47,430 --> 00:23:50,490
refreshing and we're pooling it and

00:23:49,020 --> 00:23:52,890
that's getting pulled in from all over

00:23:50,490 --> 00:23:54,180
the world let's confirm that all over

00:23:52,890 --> 00:23:56,520
the world thing because that's kind of a

00:23:54,180 --> 00:23:59,750
bold claim so I'm going to hop into the

00:23:56,520 --> 00:23:59,750
GCP console

00:24:08,550 --> 00:24:12,080
we'll just look at that load balancer

00:24:22,250 --> 00:24:26,600
so now we're looking at that specific

00:24:25,039 --> 00:24:29,360
back-end service that's serving our load

00:24:26,600 --> 00:24:31,159
balancer we can see the volume of where

00:24:29,360 --> 00:24:33,500
our traffic is coming from and where the

00:24:31,159 --> 00:24:37,250
traffic is going to so on the left hand

00:24:33,500 --> 00:24:38,900
side here there's a lot to point it so

00:24:37,250 --> 00:24:41,120
right here we have our front end

00:24:38,900 --> 00:24:42,950
location that's where those GFE SR that

00:24:41,120 --> 00:24:44,210
traffic that's serving YouTube it's now

00:24:42,950 --> 00:24:46,909
serving our ticket sales and we're

00:24:44,210 --> 00:24:48,530
making a lot of money so we have more

00:24:46,909 --> 00:24:50,360
traffic here coming from Asia we have

00:24:48,530 --> 00:24:52,429
more of those machines spun up and you

00:24:50,360 --> 00:24:55,159
can see it's routed now directly to this

00:24:52,429 --> 00:24:56,630
Asia back end that I created so that's

00:24:55,159 --> 00:24:58,880
that one Cloud Foundry one of the cloud

00:24:56,630 --> 00:25:00,830
foundries in that list all the other

00:24:58,880 --> 00:25:03,169
traffic is able to route just directly

00:25:00,830 --> 00:25:05,390
to whatever's closest to it and this

00:25:03,169 --> 00:25:07,760
represents you know the the actual flow

00:25:05,390 --> 00:25:10,789
from the data entered to where it's

00:25:07,760 --> 00:25:13,340
getting processed at all I had to do for

00:25:10,789 --> 00:25:17,299
this was put a any cap sorry a multicast

00:25:13,340 --> 00:25:19,100
IP there's no real magic beyond that all

00:25:17,299 --> 00:25:22,039
we need to do is say ok this DNS record

00:25:19,100 --> 00:25:24,820
is this multicast IP and our GFE knows

00:25:22,039 --> 00:25:24,820
how to handle that

00:25:32,470 --> 00:25:38,540
so I showed you before that we the way

00:25:35,720 --> 00:25:40,250
we represent purchases is a little rough

00:25:38,540 --> 00:25:44,240
we are currently just giving you a

00:25:40,250 --> 00:25:45,980
purchase gooood but without doing much

00:25:44,240 --> 00:25:46,610
development you can start to look at

00:25:45,980 --> 00:25:49,010
that data

00:25:46,610 --> 00:25:52,190
so what spanner gives you in the cloud

00:25:49,010 --> 00:25:53,630
console there's a nice little query spot

00:25:52,190 --> 00:25:55,820
and way to look at your database so

00:25:53,630 --> 00:25:58,490
here's my spanner instance this spanner

00:25:55,820 --> 00:26:01,940
instance just has a single note so if I

00:25:58,490 --> 00:26:04,700
needed to scale it I could look at this

00:26:01,940 --> 00:26:06,530
information about you know how busy this

00:26:04,700 --> 00:26:08,720
information about how utilize that

00:26:06,530 --> 00:26:18,170
spanner notice and just change a box

00:26:08,720 --> 00:26:21,050
here what happens if we do just 10 there

00:26:18,170 --> 00:26:22,400
we go we just get 10 spanner nodes I'll

00:26:21,050 --> 00:26:26,810
need to shut that off because I think

00:26:22,400 --> 00:26:29,870
that costs money but I have my database

00:26:26,810 --> 00:26:32,900
here and I can do ticket view at the

00:26:29,870 --> 00:26:37,510
schema as you'd expect and I can also do

00:26:32,900 --> 00:26:37,510
queries so can look at the purchases

00:26:43,010 --> 00:26:46,010
purchase

00:26:47,170 --> 00:26:58,450
thank you it's nothing like writing

00:26:55,930 --> 00:27:00,280
sequel on stage okay that's a simple one

00:26:58,450 --> 00:27:01,720
no so you could store a lot more

00:27:00,280 --> 00:27:04,120
interesting information besides goods

00:27:01,720 --> 00:27:05,710
but what I've stored here is what event

00:27:04,120 --> 00:27:09,340
is it what seat is it and what was the

00:27:05,710 --> 00:27:10,690
purchase ID as I was building this one

00:27:09,340 --> 00:27:11,650
of the things that the first thing I

00:27:10,690 --> 00:27:14,080
reached for when I was thinking about

00:27:11,650 --> 00:27:16,240
IDs was well IDs ID that means Auto

00:27:14,080 --> 00:27:18,580
increment int that does really make

00:27:16,240 --> 00:27:20,410
sense there's really no need to do that

00:27:18,580 --> 00:27:22,660
with spanner and spanner doesn't have

00:27:20,410 --> 00:27:24,370
support for auto increment ain't if you

00:27:22,660 --> 00:27:27,780
wanted to you could implement it you

00:27:24,370 --> 00:27:30,400
could have a numbering service but that

00:27:27,780 --> 00:27:32,170
really as you think about it go well why

00:27:30,400 --> 00:27:33,160
do I want that I really just want that

00:27:32,170 --> 00:27:34,960
because that's what I'm used to doing

00:27:33,160 --> 00:27:35,710
things I'm used to having it not

00:27:34,960 --> 00:27:37,810
sequential order

00:27:35,710 --> 00:27:39,010
but sequence is really more about time

00:27:37,810 --> 00:27:40,060
when you're looking at data like this

00:27:39,010 --> 00:27:42,330
and you're looking at a database like

00:27:40,060 --> 00:27:42,330
this

00:27:49,690 --> 00:27:54,530
yeah I think we're almost done here so

00:27:53,510 --> 00:27:57,820
how can you get started today with

00:27:54,530 --> 00:28:00,470
spanner you can check out Google cloud

00:27:57,820 --> 00:28:02,240
the you can create a spanner instance

00:28:00,470 --> 00:28:04,280
through the GCP service broker so

00:28:02,240 --> 00:28:05,809
available in your favorite CF

00:28:04,280 --> 00:28:08,360
marketplace where service broker

00:28:05,809 --> 00:28:09,950
available and the thing I really

00:28:08,360 --> 00:28:12,530
recommend checking out and what I based

00:28:09,950 --> 00:28:14,299
a lot of the code for this talk on is

00:28:12,530 --> 00:28:16,760
the getting started with cloud spanner

00:28:14,299 --> 00:28:19,610
and go and that is just in the gcpd

00:28:16,760 --> 00:28:21,140
documentation an incredible incredible

00:28:19,610 --> 00:28:24,080
example and really gets you through a

00:28:21,140 --> 00:28:25,880
lot of the core concepts one thing I

00:28:24,080 --> 00:28:28,040
really want to talk about is a feature

00:28:25,880 --> 00:28:31,419
that is coming in 2017 of spanner and

00:28:28,040 --> 00:28:34,669
that is cross region replication so I

00:28:31,419 --> 00:28:36,320
showed you spanner and I said that you

00:28:34,669 --> 00:28:37,760
can access it anywhere which is true I

00:28:36,320 --> 00:28:41,030
did to my development when I was in a

00:28:37,760 --> 00:28:42,590
plane and I was able to hit it but for

00:28:41,030 --> 00:28:45,470
those real performance critical

00:28:42,590 --> 00:28:48,290
applications spanner will soon be able

00:28:45,470 --> 00:28:50,419
to do replication across GCP regions so

00:28:48,290 --> 00:28:52,940
it'll be even faster the nice thing is

00:28:50,419 --> 00:28:55,160
today you have the GCP Network that it's

00:28:52,940 --> 00:28:56,480
going to go over so you don't really see

00:28:55,160 --> 00:29:00,049
it quite as bad as you would in a lot of

00:28:56,480 --> 00:29:01,910
ways but soon this year we'll see it

00:29:00,049 --> 00:29:03,380
across region replication without any

00:29:01,910 --> 00:29:07,190
work on your end probably just tick a

00:29:03,380 --> 00:29:09,559
box so thank you all I'm happy to take

00:29:07,190 --> 00:29:12,300
any questions after and I'll be around

00:29:09,559 --> 00:29:17,260
tomorrow as well

00:29:12,300 --> 00:29:17,260

YouTube URL: https://www.youtube.com/watch?v=QM-3dO5BAUw


