Title: Open Service Broker API: Creating a Cross-Platform Standard
Publication date: 2017-06-21
Playlist: Cloud Foundry Summit Silicon Valley 2017
Description: 
	Open Service Broker API: Creating a Cross-Platform Standard - Shannon Coen, Pivotal & Doug Davis, IBM    
Experiments & Extensions    

Integral to Cloud Foundry's success has been the ability for app developers to choose from a marketplace of 3rd party services and easily integrate them with their applications. Exposing services to developers in this way requires the service provider to implement a few API endpoints known collectively as the Service Broker API.

This powerful yet simple model has not gone unnoticed by the broader Cloud Native community. As a result, the CF Foundation has joined forces with other key players in the community to create the new Open Service Broker API project to enhance the API and foster adoption by other platforms, including Kubernetes. This industry wide project will enable service providers to offer their services to multiple platform marketplaces with a single integration, making support for it more compelling to service providers and accelerating the diversity of services available to app developers and ultimately increasing the velocity of innovation.

This talk will introduce the new Open Service Broker API project, its mission, members, and future plans.

Doug Davis
STSM, IBM
Doug works in IBM's Open Source and Standards division. He's been working on Cloud related technologies for many years and has worked on many of the most popular OSS projects, including OpenStack, CloudFoundry, Docker and Kubernetes.

Shannon Coen
Pivotal Software, Inc.
Product Manager
San Francisco Bay Area
"Shannon Coen has been guiding core functionality in Cloud Foundry since joining VMWare in 2012. He stayed with the project when it moved to Pivotal, and served for three years as Product Manager with the Services team from 2013-2015, responsible for the v2 Service Broker API and Service Marketplace. Since 2015 he has served as Product Manager for the Cloud Foundry Routing team. Shannon chairs the Open Service Broker API PMC and is a member of the CF Foundation PMC Council."
Captions: 
	00:00:00,030 --> 00:00:04,170
thank you all for coming my name is

00:00:02,220 --> 00:00:06,390
Shannon Cohen I'm a product manager at

00:00:04,170 --> 00:00:09,420
pivotal working on Cloud Foundry and I'm

00:00:06,390 --> 00:00:12,150
joined today with by Doug Davis from IBM

00:00:09,420 --> 00:00:14,610
who's been working on kubernetes we also

00:00:12,150 --> 00:00:16,529
have some of the team with us here in

00:00:14,610 --> 00:00:20,029
the audience who has been contributing

00:00:16,529 --> 00:00:22,320
to the working group I'll describe now

00:00:20,029 --> 00:00:24,330
before I get to the meat of the

00:00:22,320 --> 00:00:27,330
presentation I'd like to start with a

00:00:24,330 --> 00:00:28,769
couple of foundational concepts some of

00:00:27,330 --> 00:00:31,199
this may be review and I appreciate your

00:00:28,769 --> 00:00:36,000
patience I'd like to start with

00:00:31,199 --> 00:00:37,739
motivations we we know that application

00:00:36,000 --> 00:00:40,050
development teams require services and

00:00:37,739 --> 00:00:43,379
these range from application

00:00:40,050 --> 00:00:45,570
dependencies to services services which

00:00:43,379 --> 00:00:48,390
enable the entire application

00:00:45,570 --> 00:00:51,449
development lifecycle we found that

00:00:48,390 --> 00:00:53,399
managed services enable application

00:00:51,449 --> 00:00:55,320
development teams to concentrate on

00:00:53,399 --> 00:00:57,180
their application code rather than

00:00:55,320 --> 00:01:00,750
operating these services which can be

00:00:57,180 --> 00:01:03,239
very costly we also know that

00:01:00,750 --> 00:01:05,970
self-service on demand marketplace

00:01:03,239 --> 00:01:08,640
services increased developer velocity

00:01:05,970 --> 00:01:12,510
and minimize time to deliver value to

00:01:08,640 --> 00:01:14,250
market as many of you aware cloud

00:01:12,510 --> 00:01:16,799
foundry has a marketplace of this kind

00:01:14,250 --> 00:01:19,580
each deployment of cloud foundry in fact

00:01:16,799 --> 00:01:22,110
has its own marketplace with admins

00:01:19,580 --> 00:01:27,200
adding services to the marketplace based

00:01:22,110 --> 00:01:30,960
on application developer demand admins

00:01:27,200 --> 00:01:34,070
have control of access to services and

00:01:30,960 --> 00:01:36,960
plans by organization and can optionally

00:01:34,070 --> 00:01:39,960
allow developers to bring their own

00:01:36,960 --> 00:01:42,150
services to the marketplace the

00:01:39,960 --> 00:01:45,329
marketplace provides a highly integrated

00:01:42,150 --> 00:01:49,500
self-service and on-demand application

00:01:45,329 --> 00:01:52,200
developer user experience and over the

00:01:49,500 --> 00:01:54,750
years a rich ecosystem of services

00:01:52,200 --> 00:01:59,759
compatible services has developed

00:01:54,750 --> 00:02:01,740
enabled by a simple well-documented API

00:01:59,759 --> 00:02:05,280
which the Philips facilitates

00:02:01,740 --> 00:02:11,459
integration between the marketplace and

00:02:05,280 --> 00:02:13,260
service providers the api we call the

00:02:11,459 --> 00:02:15,060
service broker API and

00:02:13,260 --> 00:02:18,989
this is familiar most of you i'll

00:02:15,060 --> 00:02:22,140
briefly summarize it here the components

00:02:18,989 --> 00:02:24,659
service providers implement a few API

00:02:22,140 --> 00:02:27,599
endpoints for which Cloud Foundry is the

00:02:24,659 --> 00:02:29,340
client and components that implement

00:02:27,599 --> 00:02:32,579
these endpoints we refer to as service

00:02:29,340 --> 00:02:34,670
brokers service brokers can be hosted

00:02:32,579 --> 00:02:38,849
anywhere the platform can reach them and

00:02:34,670 --> 00:02:41,099
provide a catalog of services plans and

00:02:38,849 --> 00:02:44,489
user facing metadata exposed in the

00:02:41,099 --> 00:02:47,659
Cloud Foundry marketplace the real value

00:02:44,489 --> 00:02:51,209
of the broker API though is in

00:02:47,659 --> 00:02:53,790
abstracting service specific lifecycle

00:02:51,209 --> 00:02:56,450
operations from the platform service

00:02:53,790 --> 00:03:00,769
brokers translate generic requests from

00:02:56,450 --> 00:03:03,629
platform to service specific ones for

00:03:00,769 --> 00:03:07,370
operations such as create update delete

00:03:03,629 --> 00:03:07,370
and generate credentials

00:03:14,120 --> 00:03:25,409
the platform also provides a service

00:03:20,040 --> 00:03:28,349
brokers can also offer many services and

00:03:25,409 --> 00:03:31,859
plans and many service brokers can be

00:03:28,349 --> 00:03:34,790
registered with the marketplace so that

00:03:31,859 --> 00:03:38,250
the catalog of services available to

00:03:34,790 --> 00:03:40,349
users of Cloud Foundry is the aggregate

00:03:38,250 --> 00:03:43,379
of all services offered by all brokers

00:03:40,349 --> 00:03:45,560
and the platform then provides a

00:03:43,379 --> 00:03:48,239
homogeneous user experience for

00:03:45,560 --> 00:03:51,510
application developers managing these

00:03:48,239 --> 00:03:53,730
services so this model has worked fairly

00:03:51,510 --> 00:03:57,419
well for quite a while but we still have

00:03:53,730 --> 00:03:59,370
some goals and those include increasing

00:03:57,419 --> 00:04:01,790
the choice of services offered to

00:03:59,370 --> 00:04:05,489
application developers in Cloud Foundry

00:04:01,790 --> 00:04:07,319
enhancing the API to offer new service

00:04:05,489 --> 00:04:10,650
use cases to application developers and

00:04:07,319 --> 00:04:12,840
increasing adoption of cloud foundry we

00:04:10,650 --> 00:04:14,280
have found however that reaching out to

00:04:12,840 --> 00:04:17,880
service providers one by one is

00:04:14,280 --> 00:04:20,690
labor-intensive and not surprisingly

00:04:17,880 --> 00:04:23,400
we've seen that the adoption of

00:04:20,690 --> 00:04:26,580
compatible services are the availability

00:04:23,400 --> 00:04:28,620
of compatible services has grown as the

00:04:26,580 --> 00:04:33,419
popular popularity of cloud foundry has

00:04:28,620 --> 00:04:36,240
grown so we've been thinking how can we

00:04:33,419 --> 00:04:41,250
make the investment in integration in

00:04:36,240 --> 00:04:43,169
this API even more compelling last year

00:04:41,250 --> 00:04:45,810
we heard that several open source

00:04:43,169 --> 00:04:49,669
communities were interested in adopting

00:04:45,810 --> 00:04:52,229
the service broker API to enable

00:04:49,669 --> 00:04:54,870
marketplaces that they were designing

00:04:52,229 --> 00:04:56,930
for their platforms we had discussions

00:04:54,870 --> 00:04:58,080
with representatives from kubernetes

00:04:56,930 --> 00:05:02,000
OpenShift

00:04:58,080 --> 00:05:05,099
bluemix and google about how we could

00:05:02,000 --> 00:05:07,620
enable them to adopt the service broker

00:05:05,099 --> 00:05:09,900
api for these marketplaces they were

00:05:07,620 --> 00:05:15,710
designing and how we could work together

00:05:09,900 --> 00:05:17,969
to enhance the API on an ongoing basis

00:05:15,710 --> 00:05:19,979
before I proceed and I'll address an

00:05:17,969 --> 00:05:22,770
obvious question

00:05:19,979 --> 00:05:25,889
many have view the Cloud Foundry

00:05:22,770 --> 00:05:30,509
services marketplace as a differentiator

00:05:25,889 --> 00:05:33,499
increasingly competitive market but we

00:05:30,509 --> 00:05:38,520
believe and some have asked why we would

00:05:33,499 --> 00:05:42,629
assist these platforms in enabling this

00:05:38,520 --> 00:05:45,719
feature well we believe that with more

00:05:42,629 --> 00:05:48,330
flat platforms supporting this broker

00:05:45,719 --> 00:05:51,180
API it becomes more compelling for

00:05:48,330 --> 00:05:53,330
service providers to invest in

00:05:51,180 --> 00:05:56,460
implementing the integration and

00:05:53,330 --> 00:06:02,699
ultimately we expect the ecosystem of

00:05:56,460 --> 00:06:05,460
compatible services to grow and enable

00:06:02,699 --> 00:06:08,009
what really is our goal is increasing

00:06:05,460 --> 00:06:12,439
developer velocity through increasing

00:06:08,009 --> 00:06:15,689
increasing choice of compatible services

00:06:12,439 --> 00:06:18,300
so with that in mind last year

00:06:15,689 --> 00:06:22,349
the cloud foundry Foundation created the

00:06:18,300 --> 00:06:24,990
open service broker API project managed

00:06:22,349 --> 00:06:30,360
by a cloud foundry foundation PMC

00:06:24,990 --> 00:06:33,270
project management committee and the API

00:06:30,360 --> 00:06:35,490
spec that members of the PMC are

00:06:33,270 --> 00:06:38,009
represented by Fujitsu Google IBM

00:06:35,490 --> 00:06:40,650
pivotal Red Hat and sa P representing

00:06:38,009 --> 00:06:46,319
cloud foundry and kubernetes and other

00:06:40,650 --> 00:06:49,589
platforms the API spec itself for the

00:06:46,319 --> 00:06:51,899
broker API has been moved from a Cloud

00:06:49,589 --> 00:06:55,529
Foundry repo to a new github

00:06:51,899 --> 00:06:57,990
organization for the project and goals

00:06:55,529 --> 00:07:00,089
for this working group include evolving

00:06:57,990 --> 00:07:03,629
the API into a cross-platform community

00:07:00,089 --> 00:07:05,909
specification and increasing adoption by

00:07:03,629 --> 00:07:09,719
platforms and service broke service

00:07:05,909 --> 00:07:11,310
providers to again ultimately increase

00:07:09,719 --> 00:07:15,750
choice available to application

00:07:11,310 --> 00:07:17,810
developers so since then the working

00:07:15,750 --> 00:07:21,389
group has been learning to work together

00:07:17,810 --> 00:07:23,159
some of us are new to creating standards

00:07:21,389 --> 00:07:24,839
but fortunately we have some members in

00:07:23,159 --> 00:07:28,039
our working group with a great amount of

00:07:24,839 --> 00:07:30,779
experience in this we shared our

00:07:28,039 --> 00:07:33,389
respective priorities and fortunately

00:07:30,779 --> 00:07:34,960
found that the top priorities for our

00:07:33,389 --> 00:07:38,350
respective platforms

00:07:34,960 --> 00:07:41,550
overlapped so there hasn't been a great

00:07:38,350 --> 00:07:45,180
deal of disagreement over priorities

00:07:41,550 --> 00:07:47,759
most of our work has been in gathering

00:07:45,180 --> 00:07:52,720
requirements in discussing use cases and

00:07:47,759 --> 00:07:54,699
design documents arriving at solutions

00:07:52,720 --> 00:07:57,669
that we agree on to meet these use cases

00:07:54,699 --> 00:08:00,940
and we're developing a release process

00:07:57,669 --> 00:08:06,130
that continues to require implementation

00:08:00,940 --> 00:08:08,770
of new features in a platform currently

00:08:06,130 --> 00:08:11,110
that's been a cloud foundry but

00:08:08,770 --> 00:08:14,830
increasingly that may be kubernetes also

00:08:11,110 --> 00:08:20,010
to validate the usability of API

00:08:14,830 --> 00:08:24,190
interactions I'd like to give you a

00:08:20,010 --> 00:08:28,270
quick look into the roadmap that four

00:08:24,190 --> 00:08:30,910
features that we have coming in upcoming

00:08:28,270 --> 00:08:32,260
versions of the spec the first thing we

00:08:30,910 --> 00:08:34,990
identified was that there are a few

00:08:32,260 --> 00:08:36,459
cloud foundry specific aspects to the

00:08:34,990 --> 00:08:40,419
API unfortunately there weren't that

00:08:36,459 --> 00:08:42,430
many in particular Cloud Foundry sends

00:08:40,419 --> 00:08:45,160
an organ space ID and the provision

00:08:42,430 --> 00:08:47,260
request and kubernetes and other

00:08:45,160 --> 00:08:50,050
platforms don't have a notion of those

00:08:47,260 --> 00:08:53,440
fields so we're introducing a new field

00:08:50,050 --> 00:08:57,330
that will allow platforms to send a

00:08:53,440 --> 00:09:00,459
profile of information to brokers and

00:08:57,330 --> 00:09:04,720
while we'll deprecated these current

00:09:00,459 --> 00:09:06,580
fields we won't remove them as our our

00:09:04,720 --> 00:09:08,560
Charter is to make additive changes only

00:09:06,580 --> 00:09:10,060
in the next major version of the spec

00:09:08,560 --> 00:09:14,230
whenever that may be those will be

00:09:10,060 --> 00:09:19,630
removed the biggest feature that we've

00:09:14,230 --> 00:09:24,820
been discussing recently is to meet the

00:09:19,630 --> 00:09:27,850
use case that app developers want a

00:09:24,820 --> 00:09:32,400
richer experience around management of

00:09:27,850 --> 00:09:36,430
service configuration options brokers

00:09:32,400 --> 00:09:38,020
currently may support an arbitrary

00:09:36,430 --> 00:09:40,150
number of configuration options but

00:09:38,020 --> 00:09:42,459
discovery of those is currently left out

00:09:40,150 --> 00:09:46,900
of band through documentation or

00:09:42,459 --> 00:09:47,930
otherwise we've been designing a schema

00:09:46,900 --> 00:09:50,300
based on the

00:09:47,930 --> 00:09:54,040
schema standard which would enable

00:09:50,300 --> 00:09:56,630
broker authors to declare supported

00:09:54,040 --> 00:09:57,920
configuration options and platforms

00:09:56,630 --> 00:10:00,470
would pass those through to platform

00:09:57,920 --> 00:10:03,649
user facing clients so that those

00:10:00,470 --> 00:10:06,170
clients could offer the much richer user

00:10:03,649 --> 00:10:10,190
facing interactions regarding these

00:10:06,170 --> 00:10:13,820
configuration options we've also

00:10:10,190 --> 00:10:16,700
identified that there are now valid use

00:10:13,820 --> 00:10:19,970
cases for adding some get end points for

00:10:16,700 --> 00:10:22,360
instance and binding to allow retrieval

00:10:19,970 --> 00:10:25,970
of these configuration options and

00:10:22,360 --> 00:10:28,390
credentials we imagine that these get

00:10:25,970 --> 00:10:32,390
end points could eventually be used for

00:10:28,390 --> 00:10:38,920
other aspects of instance and binding

00:10:32,390 --> 00:10:42,800
State we've also heard that the

00:10:38,920 --> 00:10:44,570
specified mechanism for authorization

00:10:42,800 --> 00:10:49,070
and authentication in broker

00:10:44,570 --> 00:10:50,930
interactions of basic auth is is both

00:10:49,070 --> 00:10:55,070
too prescriptive and undesirable in many

00:10:50,930 --> 00:11:00,560
environments we intend to relax that

00:10:55,070 --> 00:11:03,350
constraint as well as identify a few

00:11:00,560 --> 00:11:05,390
popular mechanisms that we might

00:11:03,350 --> 00:11:08,990
identify ways to facilitate in

00:11:05,390 --> 00:11:11,029
particular we found that while we don't

00:11:08,990 --> 00:11:14,540
necessarily need to add anything to the

00:11:11,029 --> 00:11:20,630
spec about where your oauth2 token

00:11:14,540 --> 00:11:24,709
server maybe we could standardize on the

00:11:20,630 --> 00:11:30,140
Scopes that brokers and token servers

00:11:24,709 --> 00:11:32,950
and and platforms use to authorize

00:11:30,140 --> 00:11:36,440
requests between platforms and brokers

00:11:32,950 --> 00:11:40,370
we've heard that broker authors would

00:11:36,440 --> 00:11:44,029
like to know the identity of the the

00:11:40,370 --> 00:11:47,990
originating end user and are thinking

00:11:44,029 --> 00:11:50,810
through how to facilitate that both for

00:11:47,990 --> 00:11:54,020
the purposes of authorization or billing

00:11:50,810 --> 00:11:57,079
but also to enable broker authors to

00:11:54,020 --> 00:11:59,800
make calls into the platform on a user's

00:11:57,079 --> 00:11:59,800
behalf

00:12:00,040 --> 00:12:05,930
many of many brokers are offering

00:12:03,589 --> 00:12:09,620
persistent data services though not all

00:12:05,930 --> 00:12:13,460
and we're thinking through how we can

00:12:09,620 --> 00:12:17,420
enable broker authors to execute backup

00:12:13,460 --> 00:12:19,700
and restore operations we have not yet

00:12:17,420 --> 00:12:22,190
decided yet whether those should be

00:12:19,700 --> 00:12:24,860
facilitated with first-class endpoints

00:12:22,190 --> 00:12:27,170
on the API or whether we might consider

00:12:24,860 --> 00:12:31,190
a more generic mechanism to allow

00:12:27,170 --> 00:12:36,170
brokers to declare arbitrary supported

00:12:31,190 --> 00:12:39,200
actions and finally we mean to extend

00:12:36,170 --> 00:12:43,130
the asynchronous support to bind and

00:12:39,200 --> 00:12:44,890
unbind as some broker authors are making

00:12:43,130 --> 00:12:49,040
calls for those operations to

00:12:44,890 --> 00:12:51,100
asynchronous back-end systems with that

00:12:49,040 --> 00:12:53,770
I'd like to invite Doug Davis from IBM

00:12:51,100 --> 00:12:58,370
to the stage to give us an update on

00:12:53,770 --> 00:13:01,970
kubernetes service catalog project which

00:12:58,370 --> 00:13:07,100
supports the service broker API thank

00:13:01,970 --> 00:13:09,110
you is volume okay all right all right

00:13:07,100 --> 00:13:11,959
thanks Janice said I'm Doug Davis from

00:13:09,110 --> 00:13:14,150
IBM I've been lucky enough to actually

00:13:11,959 --> 00:13:15,980
work on Cloud Foundry in the past then

00:13:14,150 --> 00:13:17,900
docker and now kubernetes so I'm really

00:13:15,980 --> 00:13:19,520
excited to be able to bring this aspect

00:13:17,900 --> 00:13:21,050
of Cloud Foundry to the communities

00:13:19,520 --> 00:13:23,480
community with along with other other

00:13:21,050 --> 00:13:25,520
people in the communities and community

00:13:23,480 --> 00:13:27,440
so that's all great now I know that this

00:13:25,520 --> 00:13:28,970
is a cloud founding audience so if

00:13:27,440 --> 00:13:30,950
you're familiar with kubernetes forgive

00:13:28,970 --> 00:13:32,150
me for really really oversimplifying it

00:13:30,950 --> 00:13:33,170
but I wanted at least give you a quick

00:13:32,150 --> 00:13:36,260
intro for those who don't know

00:13:33,170 --> 00:13:38,270
kubernetes what it's all about at a very

00:13:36,260 --> 00:13:41,330
basic core level you can think of

00:13:38,270 --> 00:13:43,940
kubernetes as basically a database with

00:13:41,330 --> 00:13:46,370
a REST API in front of it and that's

00:13:43,940 --> 00:13:51,430
basically it at its core ok so what

00:13:46,370 --> 00:13:53,600
you're gonna have is over here sorry I

00:13:51,430 --> 00:13:54,620
guess you can't see it I'm sorry so

00:13:53,600 --> 00:13:56,630
anyway what you're gonna have is the

00:13:54,620 --> 00:13:58,730
crew Brunei's client talking to an API

00:13:56,630 --> 00:14:00,230
server which talks to a database and

00:13:58,730 --> 00:14:01,730
that's basically its in terms of the

00:14:00,230 --> 00:14:03,050
core functionality of how the user

00:14:01,730 --> 00:14:05,480
interacts with the system it's an

00:14:03,050 --> 00:14:07,790
asynchronous model meaning you put

00:14:05,480 --> 00:14:09,529
things into the database and then the

00:14:07,790 --> 00:14:11,540
client basically gets returned back from

00:14:09,529 --> 00:14:13,760
most cases there are some Beck there are

00:14:11,540 --> 00:14:15,320
exceptions beyond that though what they

00:14:13,760 --> 00:14:17,089
have in the set of Watchers or

00:14:15,320 --> 00:14:18,800
controllers who monitor basically the

00:14:17,089 --> 00:14:21,110
database and look for changes in their

00:14:18,800 --> 00:14:23,540
and then act upon those changes so for

00:14:21,110 --> 00:14:25,760
the so for example if you ask for three

00:14:23,540 --> 00:14:27,850
instances of petition they don't like

00:14:25,760 --> 00:14:29,930
the text one it will bring up two more

00:14:27,850 --> 00:14:31,579
so that's very much the you know

00:14:29,930 --> 00:14:33,980
matching the desired state model that

00:14:31,579 --> 00:14:37,610
you see in cloud foundry as well but the

00:14:33,980 --> 00:14:38,930
important thing here is that the when

00:14:37,610 --> 00:14:41,000
you think about Corinna days versus

00:14:38,930 --> 00:14:42,410
Cloud Foundry kind of foundry tries to

00:14:41,000 --> 00:14:44,300
abstract these things away from the end

00:14:42,410 --> 00:14:45,500
user kubernetes tries to actually take

00:14:44,300 --> 00:14:48,470
the other approach and for the most part

00:14:45,500 --> 00:14:50,779
exposes the end user if they choose to -

00:14:48,470 --> 00:14:52,610
all the underlying system resources and

00:14:50,779 --> 00:14:53,810
that's a very different model and the

00:14:52,610 --> 00:14:55,040
reason is important because I'm going to

00:14:53,810 --> 00:14:56,570
start explaining some of the additional

00:14:55,040 --> 00:14:57,829
resources to you so you can start

00:14:56,570 --> 00:14:59,209
playing this in communities I didn't

00:14:57,829 --> 00:15:01,190
want you to be surprised by seeing these

00:14:59,209 --> 00:15:03,350
things that are there in cloud foundry

00:15:01,190 --> 00:15:05,839
but they're just hidden from you but in

00:15:03,350 --> 00:15:07,250
incriminates they will be exposed the

00:15:05,839 --> 00:15:08,240
other entry the other key points to keep

00:15:07,250 --> 00:15:10,970
in mind when thinking about cloud

00:15:08,240 --> 00:15:13,160
foundry versus docker is I'm sorry about

00:15:10,970 --> 00:15:15,820
foundry versus communities is kubernetes

00:15:13,160 --> 00:15:18,110
has a notion of pods while they do use

00:15:15,820 --> 00:15:19,670
containers they allow you to group

00:15:18,110 --> 00:15:21,589
containers together into what they call

00:15:19,670 --> 00:15:24,050
pods because they realize in many cases

00:15:21,589 --> 00:15:26,000
you want to have multiple containers

00:15:24,050 --> 00:15:28,670
sort of sitting side-by-side on the same

00:15:26,000 --> 00:15:30,500
host working together and that is sort

00:15:28,670 --> 00:15:33,110
of a small unit of deployment that they

00:15:30,500 --> 00:15:34,940
have so they keep in mind they have pods

00:15:33,110 --> 00:15:37,880
instead of containers and lastly in

00:15:34,940 --> 00:15:39,020
order to identify your application they

00:15:37,880 --> 00:15:40,880
actually don't have the notion of

00:15:39,020 --> 00:15:43,190
application with the hammer label so you

00:15:40,880 --> 00:15:45,260
can put onto pods so when you want to

00:15:43,190 --> 00:15:46,790
take an action on your quote application

00:15:45,260 --> 00:15:48,440
what you're really doing is saying go

00:15:46,790 --> 00:15:50,360
find all the pods out there with this

00:15:48,440 --> 00:15:52,279
particular label and take this action

00:15:50,360 --> 00:15:54,070
for me okay so that's important thing to

00:15:52,279 --> 00:15:56,540
know that the notion of app application

00:15:54,070 --> 00:15:59,360
really doesn't exist inside kubernetes

00:15:56,540 --> 00:16:02,900
for the most part all right so with that

00:15:59,360 --> 00:16:05,630
in mind let's keep going now so in order

00:16:02,900 --> 00:16:08,180
for kubernetes to support service broker

00:16:05,630 --> 00:16:11,600
we had to add some new resources to the

00:16:08,180 --> 00:16:13,940
data model now for writer reasons we

00:16:11,600 --> 00:16:15,949
decided not to extend the core criminals

00:16:13,940 --> 00:16:18,800
model itself it's actually an add-on

00:16:15,949 --> 00:16:20,540
feature partially because we weren't her

00:16:18,800 --> 00:16:22,520
percent sure we wanted to put on pull

00:16:20,540 --> 00:16:23,959
into the core yet but also they wanted

00:16:22,520 --> 00:16:24,560
to kind of use us as a guinea pig for

00:16:23,959 --> 00:16:25,880
some other than

00:16:24,560 --> 00:16:27,260
features that they're adding and I'll

00:16:25,880 --> 00:16:29,180
talk about that in terms of how they

00:16:27,260 --> 00:16:30,230
allow people to extend the model and so

00:16:29,180 --> 00:16:31,760
we got to be a guinea pig for some of

00:16:30,230 --> 00:16:33,700
those things but let's start talking

00:16:31,760 --> 00:16:35,630
about some of these core features and

00:16:33,700 --> 00:16:37,340
for most part these should be very

00:16:35,630 --> 00:16:38,630
similar to the ones you see inside Cloud

00:16:37,340 --> 00:16:40,400
Foundry it's just some of these may not

00:16:38,630 --> 00:16:42,260
be exposed as first-class citizens in

00:16:40,400 --> 00:16:44,540
cloud foundry but they are there so for

00:16:42,260 --> 00:16:46,220
example you can kurby Nettie's create a

00:16:44,540 --> 00:16:49,130
broker resource which is nothing more

00:16:46,220 --> 00:16:51,440
than the metadata about where the broker

00:16:49,130 --> 00:16:53,779
lives right it's URL user ID and

00:16:51,440 --> 00:16:55,850
password and then once this resource is

00:16:53,779 --> 00:16:58,310
created typically by an admin in the

00:16:55,850 --> 00:17:00,380
koreas model a controller will detect it

00:16:58,310 --> 00:17:02,540
and then under the covers go off and

00:17:00,380 --> 00:17:04,699
talk to the broker get the catalog and

00:17:02,540 --> 00:17:08,630
then populates the kubernetes resource

00:17:04,699 --> 00:17:10,339
model with that catalog right so once

00:17:08,630 --> 00:17:11,990
that catalog gets as the catalog gets

00:17:10,339 --> 00:17:14,449
created what you're going to see our

00:17:11,990 --> 00:17:16,010
service classes appear now service class

00:17:14,449 --> 00:17:17,959
is the same thing as they quote service

00:17:16,010 --> 00:17:19,370
other than the reason we had to use the

00:17:17,959 --> 00:17:21,199
word class on the end is because service

00:17:19,370 --> 00:17:22,459
itself was actually taken already by the

00:17:21,199 --> 00:17:24,230
communities model and we don't want

00:17:22,459 --> 00:17:27,380
confusion there but these are and

00:17:24,230 --> 00:17:29,510
created implicitly by the controller the

00:17:27,380 --> 00:17:31,280
end users don't create these and within

00:17:29,510 --> 00:17:32,540
the service class itself you'll have all

00:17:31,280 --> 00:17:34,280
the various plans that you guys should

00:17:32,540 --> 00:17:37,280
know about if you deal with services in

00:17:34,280 --> 00:17:39,020
cloud 4 and that Cloud Foundry so then

00:17:37,280 --> 00:17:41,420
we also have an instance object now this

00:17:39,020 --> 00:17:43,100
actually is created by an end user so

00:17:41,420 --> 00:17:45,800
when they want to provision an instance

00:17:43,100 --> 00:17:48,380
of say MongoDB they'll go off and create

00:17:45,800 --> 00:17:51,260
an instance object inside the kubernetes

00:17:48,380 --> 00:17:54,290
model and that has basically the

00:17:51,260 --> 00:17:56,660
metadata necessary for the controller to

00:17:54,290 --> 00:17:58,700
notice it go off and talk to this

00:17:56,660 --> 00:18:00,620
particular broker come back with

00:17:58,700 --> 00:18:02,030
whatever information the broker is going

00:18:00,620 --> 00:18:03,710
to return and stick it back in that

00:18:02,030 --> 00:18:05,330
object so this object is just sort of a

00:18:03,710 --> 00:18:07,490
metadata object more than anything else

00:18:05,330 --> 00:18:09,110
just it registers the existence of the

00:18:07,490 --> 00:18:11,030
instance itself from the users

00:18:09,110 --> 00:18:12,590
perspective that it wants it and then

00:18:11,030 --> 00:18:14,720
the information from the broker itself

00:18:12,590 --> 00:18:17,090
about what it actually got created and

00:18:14,720 --> 00:18:18,770
then finally we have the binding so much

00:18:17,090 --> 00:18:21,230
in the same way Cloud Foundry links

00:18:18,770 --> 00:18:23,260
applications to service instances that's

00:18:21,230 --> 00:18:27,650
what we have here inside of kubernetes

00:18:23,260 --> 00:18:30,290
the only major difference here is inside

00:18:27,650 --> 00:18:31,730
kubernetes the credentials are actually

00:18:30,290 --> 00:18:33,440
stored in a first-class object called

00:18:31,730 --> 00:18:34,230
secrets think of it as nothing more than

00:18:33,440 --> 00:18:38,760
a

00:18:34,230 --> 00:18:39,540
a key-value store but that is just it's

00:18:38,760 --> 00:18:41,160
just encrypted

00:18:39,540 --> 00:18:44,160
now inside kubernetes though you can

00:18:41,160 --> 00:18:46,559
take these secrets and bind them to your

00:18:44,160 --> 00:18:47,880
application or your pods in a variety of

00:18:46,559 --> 00:18:50,760
ways so for example you can take all the

00:18:47,880 --> 00:18:53,429
keys and have them appear as environment

00:18:50,760 --> 00:18:54,900
variables or you can have them appear as

00:18:53,429 --> 00:18:55,830
a volume mount that way

00:18:54,900 --> 00:18:57,750
you don't have to deal with these

00:18:55,830 --> 00:18:59,160
security potential problems around the

00:18:57,750 --> 00:19:01,080
environment variables but you can access

00:18:59,160 --> 00:19:02,700
them as a volume out there so there are

00:19:01,080 --> 00:19:03,900
some options there and we make use of

00:19:02,700 --> 00:19:06,840
those and I'll talk a little bit about

00:19:03,900 --> 00:19:09,630
that in a sec now everything I've talked

00:19:06,840 --> 00:19:11,610
about here so far has talked about

00:19:09,630 --> 00:19:13,830
extending the model sort of outside the

00:19:11,610 --> 00:19:15,299
core there is one feature that we did

00:19:13,830 --> 00:19:18,210
actually add to the core itself and

00:19:15,299 --> 00:19:20,880
that's called the pod preset now pod

00:19:18,210 --> 00:19:22,760
preset allows you to define a resource

00:19:20,880 --> 00:19:25,260
obviously called pop preset which says

00:19:22,760 --> 00:19:27,390
look for any new pod that's getting

00:19:25,260 --> 00:19:29,610
created in the system and based upon the

00:19:27,390 --> 00:19:32,429
labels you see on that pod do something

00:19:29,610 --> 00:19:34,770
to it in particular it allows you to add

00:19:32,429 --> 00:19:37,020
environment variables to the pod or it

00:19:34,770 --> 00:19:38,850
allows you to mount volumes in there and

00:19:37,020 --> 00:19:40,230
I say hopefully should be able to see

00:19:38,850 --> 00:19:42,179
this is going to be very important to us

00:19:40,230 --> 00:19:45,780
because as we need to inject credentials

00:19:42,179 --> 00:19:47,790
from the binding into the pods for an

00:19:45,780 --> 00:19:49,770
application we're gonna make use of this

00:19:47,790 --> 00:19:52,020
itself so while this resource was

00:19:49,770 --> 00:19:54,360
created because of the Service Catalog

00:19:52,020 --> 00:19:56,760
work we made a generic enough so it

00:19:54,360 --> 00:19:58,380
could be used by other application or

00:19:56,760 --> 00:20:04,380
other uses of kubernetes it's not a

00:19:58,380 --> 00:20:05,760
service catalog specific ok so let's

00:20:04,380 --> 00:20:08,610
talk a little bit more about bindings

00:20:05,760 --> 00:20:09,870
cuz I think this was sort of the the the

00:20:08,610 --> 00:20:11,910
piece of kubernetes that might be

00:20:09,870 --> 00:20:14,130
slightly different from from Cloud

00:20:11,910 --> 00:20:15,330
Foundry and on the top right hand corner

00:20:14,130 --> 00:20:16,919
of the screen you can actually see a

00:20:15,330 --> 00:20:19,380
sample yamo file that describes the

00:20:16,919 --> 00:20:20,669
binding but very much like the cloud

00:20:19,380 --> 00:20:23,100
foundry model the binding is just a

00:20:20,669 --> 00:20:26,490
linkage between an application and the

00:20:23,100 --> 00:20:28,380
the binding are the credentials itself

00:20:26,490 --> 00:20:31,620
so this bethere case what you're gonna

00:20:28,380 --> 00:20:33,780
see in red is a pointer to the instance

00:20:31,620 --> 00:20:35,669
itself so we're gonna reference it by

00:20:33,780 --> 00:20:37,080
name so previously we created that

00:20:35,669 --> 00:20:39,809
instance object we gave it a name in

00:20:37,080 --> 00:20:40,980
this case MongoDB 1 and then inside this

00:20:39,809 --> 00:20:43,830
binding object we're also going to

00:20:40,980 --> 00:20:45,360
create the pod preset template and this

00:20:43,830 --> 00:20:46,669
is going to get used to actually create

00:20:45,360 --> 00:20:48,470
a real pod preset

00:20:46,669 --> 00:20:50,149
for the crew Brady's core system and

00:20:48,470 --> 00:20:53,119
this pillar case I said okay

00:20:50,149 --> 00:20:55,970
find all pods that get created that have

00:20:53,119 --> 00:20:58,100
a label of app with a value of my app

00:20:55,970 --> 00:21:01,519
and so as new pods get create in the

00:20:58,100 --> 00:21:04,279
system they will get the secrets from

00:21:01,519 --> 00:21:07,429
that instance that we're bound to

00:21:04,279 --> 00:21:09,649
ejected into their pods as we go along

00:21:07,429 --> 00:21:12,049
now a lot of this stuff there and talk

00:21:09,649 --> 00:21:14,840
about here is kind of an alpha stage

00:21:12,049 --> 00:21:16,489
okay and so as of right now all of the

00:21:14,840 --> 00:21:18,320
secret information in other words all

00:21:16,489 --> 00:21:20,119
the keys will get added as separate

00:21:18,320 --> 00:21:22,399
environment variables automatically we

00:21:20,119 --> 00:21:24,289
are going to work on adding support for

00:21:22,399 --> 00:21:25,999
doing bind mounts and stuff like that

00:21:24,289 --> 00:21:27,649
it's just not quite there yet of each so

00:21:25,999 --> 00:21:29,029
if you decide to play with it but I did

00:21:27,649 --> 00:21:30,230
want to mention that at least the basics

00:21:29,029 --> 00:21:31,909
of it is there they all appear as

00:21:30,230 --> 00:21:34,009
environment variables but at the most

00:21:31,909 --> 00:21:35,179
part you should see that this is

00:21:34,009 --> 00:21:36,679
actually very similar to what you see in

00:21:35,179 --> 00:21:38,539
Cloud Foundry right you create an

00:21:36,679 --> 00:21:39,739
instance you create a binding things

00:21:38,539 --> 00:21:41,989
magically appear inside your application

00:21:39,739 --> 00:21:43,369
as environment variables or as a single

00:21:41,989 --> 00:21:45,320
environment variable in the confounded

00:21:43,369 --> 00:21:47,389
case here's a set of environment

00:21:45,320 --> 00:21:48,859
variables in the kubernetes case very

00:21:47,389 --> 00:21:50,720
similar concepts and that's one of the

00:21:48,859 --> 00:21:52,789
key things I think that's important in

00:21:50,720 --> 00:21:54,769
all this work is while the underlying

00:21:52,789 --> 00:21:57,230
implementation is slightly different

00:21:54,769 --> 00:21:59,269
from kubernetes versus Cloud Foundry the

00:21:57,230 --> 00:22:01,100
way the user sees it is very very

00:21:59,269 --> 00:22:02,690
similar and not different syntax in some

00:22:01,100 --> 00:22:03,830
cases but the concepts are the same I

00:22:02,690 --> 00:22:05,840
think that's a very important concept

00:22:03,830 --> 00:22:08,330
going forward here and it's that level

00:22:05,840 --> 00:22:09,950
of consistency and pseudo

00:22:08,330 --> 00:22:11,239
interoperability I think is gonna be

00:22:09,950 --> 00:22:12,350
very great for the users in terms of

00:22:11,239 --> 00:22:13,879
giving them choice in terms of what

00:22:12,350 --> 00:22:17,149
platform they want to use because they

00:22:13,879 --> 00:22:18,739
get some other experiences so one of the

00:22:17,149 --> 00:22:21,619
other things that we experienced here is

00:22:18,739 --> 00:22:24,320
because the model being Lea be added to

00:22:21,619 --> 00:22:25,850
wasn't part of the core we had to

00:22:24,320 --> 00:22:27,769
basically create our own little API

00:22:25,850 --> 00:22:30,139
server right that's a little HTTP

00:22:27,769 --> 00:22:32,869
front-end in front of a database now

00:22:30,139 --> 00:22:35,149
what we had to do those as I said

00:22:32,869 --> 00:22:36,590
created our little API server but that's

00:22:35,149 --> 00:22:37,850
a not a great user experience from the

00:22:36,590 --> 00:22:40,039
clients perspective if they have to talk

00:22:37,850 --> 00:22:42,049
to two different API server States just

00:22:40,039 --> 00:22:43,489
to get their job done so criminate has

00:22:42,049 --> 00:22:45,440
been working on this thing called API

00:22:43,489 --> 00:22:47,509
aggregator which basically is kind of

00:22:45,440 --> 00:22:50,210
like a proxy in front of multiple API

00:22:47,509 --> 00:22:51,649
servers and so in our case what we're

00:22:50,210 --> 00:22:54,379
going to do is tell people to install

00:22:51,649 --> 00:22:55,249
this as you know the normal API server

00:22:54,379 --> 00:22:57,470
on the left hand side of the picture

00:22:55,249 --> 00:22:59,100
there that's the core API server but

00:22:57,470 --> 00:23:00,419
then put in front of it an API

00:22:59,100 --> 00:23:03,390
creator which says okay if you see a

00:23:00,419 --> 00:23:05,940
request that talks about service catalog

00:23:03,390 --> 00:23:07,740
types of resources run it over to the

00:23:05,940 --> 00:23:09,870
serve broker API server which is running

00:23:07,740 --> 00:23:12,030
outside the core and get your job done

00:23:09,870 --> 00:23:14,370
now the API server for the service

00:23:12,030 --> 00:23:16,049
broker may still talk back to the core

00:23:14,370 --> 00:23:17,730
to the database over there to get its

00:23:16,049 --> 00:23:19,350
job done for example talking to secrets

00:23:17,730 --> 00:23:21,150
and stuff like that but from the

00:23:19,350 --> 00:23:23,070
end-user perspective they see a single

00:23:21,150 --> 00:23:25,470
end point and a single user experience

00:23:23,070 --> 00:23:27,809
and this was something that was

00:23:25,470 --> 00:23:29,280
relatively new so we took a lot of

00:23:27,809 --> 00:23:30,780
arrows and pulled out a lot of hair

00:23:29,280 --> 00:23:33,510
trying to get it all to work and the

00:23:30,780 --> 00:23:35,400
same thing for a Singapore brand new API

00:23:33,510 --> 00:23:36,600
server for those who are familiar with

00:23:35,400 --> 00:23:38,280
kubernetes some of the things in there

00:23:36,600 --> 00:23:40,590
are not necessarily easiest things in

00:23:38,280 --> 00:23:42,510
the world to deal with and we took a lot

00:23:40,590 --> 00:23:43,950
of hits trying to get all the stuff

00:23:42,510 --> 00:23:45,299
working and ironed out a lot of the bugs

00:23:43,950 --> 00:23:46,860
because we were really the first ones to

00:23:45,299 --> 00:23:48,419
use some of these things so that was

00:23:46,860 --> 00:23:49,770
actually good for the community at large

00:23:48,419 --> 00:23:51,630
because we helped enhance the

00:23:49,770 --> 00:23:52,909
documentation and the experience for

00:23:51,630 --> 00:23:56,070
using these things

00:23:52,909 --> 00:23:57,240
all right so for those of you not

00:23:56,070 --> 00:24:00,030
familiar with kubernetes there is a

00:23:57,240 --> 00:24:02,429
command line poop control and basically

00:24:00,030 --> 00:24:03,450
you act on resources as I said right so

00:24:02,429 --> 00:24:05,490
you could do a coop control create

00:24:03,450 --> 00:24:08,280
update delete and you pass in a yamo

00:24:05,490 --> 00:24:09,600
file describing the resource ok so

00:24:08,280 --> 00:24:12,240
here's some examples of it right there

00:24:09,600 --> 00:24:14,159
now we are planning on doing some

00:24:12,240 --> 00:24:16,049
plugins to the coop control command line

00:24:14,159 --> 00:24:17,669
to make the user experience a little

00:24:16,049 --> 00:24:19,440
more user friendly and that's what you

00:24:17,669 --> 00:24:21,150
see down at the bottom and those should

00:24:19,440 --> 00:24:22,440
look very familiar to you too

00:24:21,150 --> 00:24:24,150
when you look at the Cloud Foundry

00:24:22,440 --> 00:24:25,440
command line right so it's a very

00:24:24,150 --> 00:24:27,059
similar thing right you want to create

00:24:25,440 --> 00:24:28,230
an instance you give the service class

00:24:27,059 --> 00:24:30,510
name the plan name

00:24:28,230 --> 00:24:32,640
what kubernetes namespace you want it to

00:24:30,510 --> 00:24:34,650
be visible into and then the instance

00:24:32,640 --> 00:24:36,570
name so very similar top foundry and

00:24:34,650 --> 00:24:38,340
under the covers these will create the

00:24:36,570 --> 00:24:40,020
EML files appropriately and then call

00:24:38,340 --> 00:24:41,760
the basically the equivalent of the coop

00:24:40,020 --> 00:24:43,110
control create commands for you so we're

00:24:41,760 --> 00:24:45,059
trying to copy Cloud Foundry is

00:24:43,110 --> 00:24:46,860
wonderful user experience here on the

00:24:45,059 --> 00:24:49,710
kubernetes side so kudos to them and

00:24:46,860 --> 00:24:52,080
figure that they did a great job so in

00:24:49,710 --> 00:24:53,669
terms of status we have a special

00:24:52,080 --> 00:24:55,740
interest group and an incubator project

00:24:53,669 --> 00:24:57,929
both called Service Catalog we are

00:24:55,740 --> 00:25:01,500
planning on being fully serviceworker

00:24:57,929 --> 00:25:03,090
api compliant going forward we have IBM

00:25:01,500 --> 00:25:04,710
red headed Google are very involved

00:25:03,090 --> 00:25:06,929
obviously in both organizations so they

00:25:04,710 --> 00:25:08,790
get great synergy between the two and as

00:25:06,929 --> 00:25:10,830
I said a lot of stuff you have right now

00:25:08,790 --> 00:25:11,900
is an alpha form we are very very close

00:25:10,830 --> 00:25:13,310
to beta

00:25:11,900 --> 00:25:15,020
and that's very important from a

00:25:13,310 --> 00:25:17,180
kourounis percept perspective because

00:25:15,020 --> 00:25:19,340
for crouppen age perspective beta means

00:25:17,180 --> 00:25:21,440
from an end user you can assume that the

00:25:19,340 --> 00:25:22,880
API is will be stable going forward

00:25:21,440 --> 00:25:24,200
right so you can start playing with it

00:25:22,880 --> 00:25:26,060
and be assured that we're not going to

00:25:24,200 --> 00:25:27,710
break you going forward we may add new

00:25:26,060 --> 00:25:29,150
things but you're you should be

00:25:27,710 --> 00:25:30,770
backwards compatible and that's gonna be

00:25:29,150 --> 00:25:32,240
a huge milestone for us and I think

00:25:30,770 --> 00:25:33,920
we're less than about a week or two away

00:25:32,240 --> 00:25:35,210
from that so at that point I would feel

00:25:33,920 --> 00:25:36,500
comfortable telling people to really

00:25:35,210 --> 00:25:39,650
start playing with it and hammering it

00:25:36,500 --> 00:25:41,810
and let us know what you guys think and

00:25:39,650 --> 00:25:44,450
finally just some links for you guys to

00:25:41,810 --> 00:25:46,490
get involved the top set are for the

00:25:44,450 --> 00:25:49,940
open source broker API itself we have

00:25:46,490 --> 00:25:51,440
webpage github repo obviously the Cloud

00:25:49,940 --> 00:25:53,510
Foundry link there and then a link to

00:25:51,440 --> 00:25:57,830
the Service Catalog github repo for

00:25:53,510 --> 00:25:59,630
kubernetes and I believe that sits oh we

00:25:57,830 --> 00:26:01,910
have office hours tomorrow in the

00:25:59,630 --> 00:26:03,350
collaboration station from 1252 to 120

00:26:01,910 --> 00:26:06,050
Shanna and I will be there answering

00:26:03,350 --> 00:26:07,730
questions and we do have some funny

00:26:06,050 --> 00:26:10,070
stickers funny because they're

00:26:07,730 --> 00:26:13,550
incredibly small I've never seen seekers

00:26:10,070 --> 00:26:15,440
quite this small before but but that's

00:26:13,550 --> 00:26:16,940
it so max how much time they have oh we

00:26:15,440 --> 00:26:18,740
have a whole four minutes for questions

00:26:16,940 --> 00:26:21,500
we made it I was afraid to run out of

00:26:18,740 --> 00:26:26,510
time so Shan you wanna come up in case

00:26:21,500 --> 00:26:32,930
we have questions oh he needs a steel

00:26:26,510 --> 00:26:34,280
mine yeah okay cool bro that's not any

00:26:32,930 --> 00:26:37,130
questions from the audience

00:26:34,280 --> 00:26:43,220
ah so remember I mention your name and

00:26:37,130 --> 00:26:45,880
Association today yes Louis amedeo from

00:26:43,220 --> 00:26:49,250
ultimate offer so it's the intention for

00:26:45,880 --> 00:26:52,790
service brokers to be shareable between

00:26:49,250 --> 00:26:55,010
Claude foundry and kubernetes once they

00:26:52,790 --> 00:26:56,930
support the same API yeah by and large

00:26:55,010 --> 00:27:00,080
that's the goal the goal would be that a

00:26:56,930 --> 00:27:01,880
service provider who wants to offer a

00:27:00,080 --> 00:27:05,720
service in the marketplace of either

00:27:01,880 --> 00:27:08,240
platform would only need to write one

00:27:05,720 --> 00:27:11,480
implementation in support of the broker

00:27:08,240 --> 00:27:12,920
API endpoints and that broker should you

00:27:11,480 --> 00:27:16,250
should be able to register that broker

00:27:12,920 --> 00:27:16,730
with both platforms great Thank You

00:27:16,250 --> 00:27:18,200
vanetti

00:27:16,730 --> 00:27:19,700
yeah I would add is one of the biggest

00:27:18,200 --> 00:27:21,710
things aside from just the coolness

00:27:19,700 --> 00:27:24,080
factor of that is imagine

00:27:21,710 --> 00:27:25,669
then a user can then choose well maybe

00:27:24,080 --> 00:27:26,929
today I want my application deployed on

00:27:25,669 --> 00:27:29,059
Khan finally maybe tomorrow I want on

00:27:26,929 --> 00:27:30,320
kerbin a days or vice versa they should

00:27:29,059 --> 00:27:32,299
be able to get a similar user experience

00:27:30,320 --> 00:27:33,559
to reuse these services and that's a

00:27:32,299 --> 00:27:34,730
wonderful internal bility statement to

00:27:33,559 --> 00:27:39,950
me I think that's really good and cool

00:27:34,730 --> 00:27:43,279
going forward any other questions

00:27:39,950 --> 00:27:45,020
I guess we'll follow up to this does it

00:27:43,279 --> 00:27:47,510
mean that there will be one service

00:27:45,020 --> 00:27:49,730
instance that is shared between say my

00:27:47,510 --> 00:27:52,070
deployment on both or will I create two

00:27:49,730 --> 00:27:56,419
service instances that's a harder

00:27:52,070 --> 00:27:58,610
problem but I've heard that bluemix

00:27:56,419 --> 00:27:59,870
enables this to some extent yeah I was

00:27:58,610 --> 00:28:03,559
gonna say that basically implementation

00:27:59,870 --> 00:28:04,970
detail being IBM er as we know bluemix

00:28:03,559 --> 00:28:06,980
actually does support this today you

00:28:04,970 --> 00:28:08,630
can't create an in-service instance for

00:28:06,980 --> 00:28:10,760
say your Cloud Foundry stuff and get

00:28:08,630 --> 00:28:13,549
access to it from a docker container or

00:28:10,760 --> 00:28:14,570
kubernetes pods and stuff and so it is

00:28:13,549 --> 00:28:15,710
gonna be possible to do that kind of

00:28:14,570 --> 00:28:17,210
stuff but it's gonna be an implication

00:28:15,710 --> 00:28:21,169
detail of the platform that supports

00:28:17,210 --> 00:28:23,029
multiple things now you know pivotal

00:28:21,169 --> 00:28:24,169
supporting Cloud Foundry IBM just

00:28:23,029 --> 00:28:25,399
possibly supporting kubernetes where

00:28:24,169 --> 00:28:27,919
they could share instances between the

00:28:25,399 --> 00:28:29,090
two completely disjoint platforms that's

00:28:27,919 --> 00:28:30,710
gonna be much harder and probably not

00:28:29,090 --> 00:28:32,750
anytime in the future but within one

00:28:30,710 --> 00:28:37,330
platform I would expect you to yes okay

00:28:32,750 --> 00:28:37,330
cool any other questions

00:28:38,529 --> 00:28:46,360
Wow nice we're stopping you formula

00:28:42,169 --> 00:28:46,360

YouTube URL: https://www.youtube.com/watch?v=wNJ8jKUWGao


