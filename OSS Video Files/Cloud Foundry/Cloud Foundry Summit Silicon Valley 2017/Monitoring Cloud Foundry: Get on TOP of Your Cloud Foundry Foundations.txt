Title: Monitoring Cloud Foundry: Get on TOP of Your Cloud Foundry Foundations
Publication date: 2017-06-21
Playlist: Cloud Foundry Summit Silicon Valley 2017
Description: 
	Monitoring Cloud Foundry: Get on TOP of Your Cloud Foundry Foundations - Kurt Kellner, ECS Team    

Have you ever had to answer the question “what is happening on my foundation right now?” As a foundation operator, this is a common question. The open-source “top” plugin for the cf CLI can be a valuable tool in helping track down issues.

The “top” plugin is unlike most cf plugins which typically run using various command-line arguments, output information to the terminal and then exit. Instead, when you run “cf top” on the command-line, it will initialize a text-based interface that will allow user interaction with the screen. It works much like
the UNIX top command.

This talk will demonstrate the “top” plugin, walk through many of its features describing various use-cases where top saved valuable time in diagnosing problems. In addition to the functionality of top, a discussion of how this plugin was written and how it works under the covers. 

Kurt Kellner
Kurt Kellner has more than twenty years of software implementation experience, ranging from the simplest of utilities to enterprise-wide systems serving millions of customers. His current focus is delivering cloud-native solutions to his clients, and he is a Certified Practitioner of Pivotal Cloud Foundry. In his spare time, he combines his many interest in woodworking, microcontrollers, electronics to create kinetic art.
Captions: 
	00:00:00,060 --> 00:00:03,840
if you don't know me my name is matt

00:00:01,920 --> 00:00:06,540
cail ger one of the track leads for the

00:00:03,840 --> 00:00:08,610
experiments track as dr. max said and

00:00:06,540 --> 00:00:11,639
all the other professions in this in

00:00:08,610 --> 00:00:12,840
this room if there's something you do

00:00:11,639 --> 00:00:15,089
like about this track and you want more

00:00:12,840 --> 00:00:17,910
of let me know after there something you

00:00:15,089 --> 00:00:19,710
don't like let me know after this

00:00:17,910 --> 00:00:21,840
session is particularly near and dear to

00:00:19,710 --> 00:00:24,300
my heart the first first about five

00:00:21,840 --> 00:00:26,250
years I spent as a system in was writing

00:00:24,300 --> 00:00:28,470
monitoring tools which was a painful and

00:00:26,250 --> 00:00:30,090
thankless process which I'm sure that

00:00:28,470 --> 00:00:31,920
Kurt probably mostly agrees with it is

00:00:30,090 --> 00:00:33,450
thankless but we get to thank him by

00:00:31,920 --> 00:00:35,640
making him talk about it for half an

00:00:33,450 --> 00:00:39,270
hour on stage cool right

00:00:35,640 --> 00:00:41,969
thanks Kurt very good so what we're

00:00:39,270 --> 00:00:43,739
gonna be talking about is CF top and if

00:00:41,969 --> 00:00:46,140
you don't know what that is that's what

00:00:43,739 --> 00:00:49,250
well will show and it will demo along

00:00:46,140 --> 00:00:52,140
the way here so a little bit about me my

00:00:49,250 --> 00:00:54,690
cloud architect with ACS team which is

00:00:52,140 --> 00:00:57,120
now part of CGI I'm a cloud native

00:00:54,690 --> 00:01:00,270
developer and where a variety of hats

00:00:57,120 --> 00:01:02,520
but for at least the next 30 minutes the

00:01:00,270 --> 00:01:05,070
the most important one is that I am the

00:01:02,520 --> 00:01:10,229
author of CF top that we're gonna be

00:01:05,070 --> 00:01:13,189
talking about so the first part to

00:01:10,229 --> 00:01:16,860
understand is why I created it initially

00:01:13,189 --> 00:01:19,799
and the reason for this is that we were

00:01:16,860 --> 00:01:23,850
engaged with a client in a production

00:01:19,799 --> 00:01:26,009
support capacity to be able to look at a

00:01:23,850 --> 00:01:27,360
cloud foundry installation that was

00:01:26,009 --> 00:01:30,360
running production applications and

00:01:27,360 --> 00:01:33,390
provide feedback to the client about if

00:01:30,360 --> 00:01:34,530
things were optimized appropriately if

00:01:33,390 --> 00:01:35,670
any of the applications that were

00:01:34,530 --> 00:01:38,210
running on the platform we're having

00:01:35,670 --> 00:01:41,040
issues and what I quickly just

00:01:38,210 --> 00:01:44,070
discovered is that I was flying a bit

00:01:41,040 --> 00:01:48,270
blind which is to say that they had a

00:01:44,070 --> 00:01:51,659
syslog nozzle that was capturing log

00:01:48,270 --> 00:01:54,740
events from the firehose but they

00:01:51,659 --> 00:01:57,180
weren't actually capturing container or

00:01:54,740 --> 00:01:58,920
platform metrics at all the only thing

00:01:57,180 --> 00:02:00,869
that they were capturing is the

00:01:58,920 --> 00:02:02,340
application logs so standard out

00:02:00,869 --> 00:02:04,560
standard error and it was going to

00:02:02,340 --> 00:02:09,209
Splunk the other thing that they had

00:02:04,560 --> 00:02:12,270
installed was the jmx met the jmx bridge

00:02:09,209 --> 00:02:13,110
so they were using app dynamics to be

00:02:12,270 --> 00:02:15,660
able to

00:02:13,110 --> 00:02:17,880
query through jmx the stats and they

00:02:15,660 --> 00:02:20,100
were providing some somewhat rudimentary

00:02:17,880 --> 00:02:21,570
dashboarding so you could see some

00:02:20,100 --> 00:02:24,510
information about what was going on in

00:02:21,570 --> 00:02:28,640
the platform but it wasn't enough to

00:02:24,510 --> 00:02:30,870
answer some basic questions such as what

00:02:28,640 --> 00:02:34,920
application is taking the most traffic

00:02:30,870 --> 00:02:37,080
at this very moment how much CPU is this

00:02:34,920 --> 00:02:39,660
application consuming at this very

00:02:37,080 --> 00:02:43,650
moment and those were the things that I

00:02:39,660 --> 00:02:45,000
wanted to figure out and and know and so

00:02:43,650 --> 00:02:47,450
I kind of looked around to see is there

00:02:45,000 --> 00:02:48,750
anything that can provide me that with a

00:02:47,450 --> 00:02:52,020
low-friction

00:02:48,750 --> 00:02:54,480
for installation and usage which is to

00:02:52,020 --> 00:02:56,790
say that I didn't want to have something

00:02:54,480 --> 00:02:59,160
that you had to actually install on the

00:02:56,790 --> 00:03:00,780
platform the reason for that is that I'm

00:02:59,160 --> 00:03:02,790
dealing with a production platform and

00:03:00,780 --> 00:03:06,390
to be able to install yet another

00:03:02,790 --> 00:03:08,700
application in production can cause

00:03:06,390 --> 00:03:10,320
problems because you actually need to go

00:03:08,700 --> 00:03:13,500
through change control requests and

00:03:10,320 --> 00:03:16,170
figure out you know is this an allowable

00:03:13,500 --> 00:03:19,530
application to deploy and so forth so

00:03:16,170 --> 00:03:22,739
what I kind of realized is what I wanted

00:03:19,530 --> 00:03:23,880
is something as simple is the

00:03:22,739 --> 00:03:25,920
application that you probably all

00:03:23,880 --> 00:03:27,780
familiar with in the UNIX world which is

00:03:25,920 --> 00:03:29,880
the top command the UNIX top command if

00:03:27,780 --> 00:03:33,590
you run Unix top pretty much if you're

00:03:29,880 --> 00:03:36,989
on you know Linux or you know hp-ux ax

00:03:33,590 --> 00:03:38,880
you run top and you pretty much get what

00:03:36,989 --> 00:03:40,920
you would expect which is CPU

00:03:38,880 --> 00:03:42,750
utilization memory consumption and a

00:03:40,920 --> 00:03:44,940
bunch of other stats it's very simple

00:03:42,750 --> 00:03:46,440
and you know this is low barrier entry

00:03:44,940 --> 00:03:48,330
it's usually already there and if not

00:03:46,440 --> 00:03:51,420
easy to install so that's kind of what I

00:03:48,330 --> 00:03:54,420
was looking for in in some mechanism and

00:03:51,420 --> 00:03:59,220
since I didn't find it that's that's why

00:03:54,420 --> 00:04:01,860
I wrote CF top so what it is is a

00:03:59,220 --> 00:04:03,810
plug-in into the CF command-line so if

00:04:01,860 --> 00:04:05,400
you're not familiar with plugins CF of

00:04:03,810 --> 00:04:06,780
course is the main command-line tool

00:04:05,400 --> 00:04:09,209
that you would do like for instance see

00:04:06,780 --> 00:04:11,780
a push so all applications developers

00:04:09,209 --> 00:04:13,709
would be familiar with that and admins

00:04:11,780 --> 00:04:16,380
platform operators would be familiar

00:04:13,709 --> 00:04:19,189
with this as well so what pivotal or a

00:04:16,380 --> 00:04:22,889
cloud foundry has done is

00:04:19,189 --> 00:04:26,009
provide the ability to extend the set of

00:04:22,889 --> 00:04:27,780
commands that you can run such as you

00:04:26,009 --> 00:04:29,759
know you can do your CF push you can

00:04:27,780 --> 00:04:31,680
create orchid you can create spaces you

00:04:29,759 --> 00:04:35,699
can scale your application those are all

00:04:31,680 --> 00:04:37,889
built-in commands and you can write as a

00:04:35,699 --> 00:04:40,050
developer additional commands that

00:04:37,889 --> 00:04:42,150
augment the the CF command line with

00:04:40,050 --> 00:04:44,580
additional functionality and so in this

00:04:42,150 --> 00:04:47,669
particular case I wrote a plug-in called

00:04:44,580 --> 00:04:52,800
top that extends it with a new command

00:04:47,669 --> 00:04:54,479
called top and the way that you would go

00:04:52,800 --> 00:04:56,250
ahead and install that if you're not

00:04:54,479 --> 00:04:58,979
familiar plugins is going to that URL

00:04:56,250 --> 00:05:02,129
plugins Cloud Foundry org that actually

00:04:58,979 --> 00:05:04,440
goes to a website that provides you a

00:05:02,129 --> 00:05:07,680
list of all of the plugins that you can

00:05:04,440 --> 00:05:10,199
install so these are all Augmented

00:05:07,680 --> 00:05:11,400
things from the command line and the one

00:05:10,199 --> 00:05:14,400
that we're specifically talking about

00:05:11,400 --> 00:05:16,080
here is this CF top installation

00:05:14,400 --> 00:05:18,330
instructions are on all of these guys so

00:05:16,080 --> 00:05:21,509
literally it's just doing CF install

00:05:18,330 --> 00:05:23,940
plug-in and following that guy right

00:05:21,509 --> 00:05:28,379
there and you're good to go so what

00:05:23,940 --> 00:05:30,509
we're gonna do here is go through and

00:05:28,379 --> 00:05:32,639
demo what it actually does and we're

00:05:30,509 --> 00:05:35,159
going to talk through the various

00:05:32,639 --> 00:05:36,810
components here and what I encourage you

00:05:35,159 --> 00:05:38,909
to do is ask questions along the way I

00:05:36,810 --> 00:05:41,909
kind of intend this to be interactive

00:05:38,909 --> 00:05:45,389
otherwise I think uni or wolf get bored

00:05:41,909 --> 00:05:49,110
so in this particular case if I type in

00:05:45,389 --> 00:05:50,370
CF plugins and I probably need to stop

00:05:49,110 --> 00:05:57,150
this in order for you to see what I'm

00:05:50,370 --> 00:06:00,690
doing so if I do CF plugins what you can

00:05:57,150 --> 00:06:02,490
see is all the plugins that I have

00:06:00,690 --> 00:06:04,710
installed and specifically they the one

00:06:02,490 --> 00:06:08,339
we're looking at here is the top plug-in

00:06:04,710 --> 00:06:10,979
so I'm gonna run CF top and I'm already

00:06:08,339 --> 00:06:13,560
targeted I'm already logged in and what

00:06:10,979 --> 00:06:16,020
this is doing is this is providing me

00:06:13,560 --> 00:06:20,849
information about this particular

00:06:16,020 --> 00:06:21,719
foundation installation so what we're

00:06:20,849 --> 00:06:23,819
gonna do is we're going to walk through

00:06:21,719 --> 00:06:25,529
the the header that the components at

00:06:23,819 --> 00:06:27,029
the top and then start walking you

00:06:25,529 --> 00:06:30,810
through some of the the information

00:06:27,029 --> 00:06:32,490
that's down below so the information on

00:06:30,810 --> 00:06:34,500
the header here first

00:06:32,490 --> 00:06:39,120
item you see at the top left here is the

00:06:34,500 --> 00:06:40,500
event section on the events section what

00:06:39,120 --> 00:06:43,530
that's actually showing you is the

00:06:40,500 --> 00:06:51,449
number of events that are have been seen

00:06:43,530 --> 00:06:55,590
on the on the the traffic controller the

00:06:51,449 --> 00:06:57,270
the logger Gator the firehose is what

00:06:55,590 --> 00:06:59,639
you're really seeing there so in this

00:06:57,270 --> 00:07:01,560
particular case we got about 400 events

00:06:59,639 --> 00:07:05,310
a second going through the firehose and

00:07:01,560 --> 00:07:09,240
how it knows that is this initialized

00:07:05,310 --> 00:07:10,889
two nozzles against the firehose to be

00:07:09,240 --> 00:07:13,560
able to actually receive all of those

00:07:10,889 --> 00:07:15,960
events and to be able to report on them

00:07:13,560 --> 00:07:19,979
and display information against that

00:07:15,960 --> 00:07:22,440
information so this this guy here the

00:07:19,979 --> 00:07:25,770
events is counting how many events since

00:07:22,440 --> 00:07:27,930
see if top has been started that has

00:07:25,770 --> 00:07:29,940
been seen it's in this case since we've

00:07:27,930 --> 00:07:32,310
started it one minute 20 seconds ago

00:07:29,940 --> 00:07:36,180
we've seen 41,000 events on that

00:07:32,310 --> 00:07:39,930
firehose I'm gonna actually start this

00:07:36,180 --> 00:07:42,000
again the second thing I wanted to make

00:07:39,930 --> 00:07:45,000
note of here is this warmup period and

00:07:42,000 --> 00:07:48,840
this is a countdown of 60 seconds and

00:07:45,000 --> 00:07:51,030
what it's happening here is that see if

00:07:48,840 --> 00:07:52,860
top is intended to be as friendly as

00:07:51,030 --> 00:07:54,870
possible to the foundation in which it's

00:07:52,860 --> 00:07:57,270
monitoring so there's no polling going

00:07:54,870 --> 00:07:59,880
on to figure out hey what's going on in

00:07:57,270 --> 00:08:02,219
your platform this is literally just

00:07:59,880 --> 00:08:03,830
passively listening to the events that

00:08:02,219 --> 00:08:06,030
are happening on that firehose and

00:08:03,830 --> 00:08:07,830
aggregating a bunch of stats together

00:08:06,030 --> 00:08:12,419
and being able to display what is

00:08:07,830 --> 00:08:15,330
actually going on so in order for you to

00:08:12,419 --> 00:08:17,819
get an accurate picture of all of the

00:08:15,330 --> 00:08:19,889
information it takes about 60 seconds

00:08:17,819 --> 00:08:22,349
which is to say like container events as

00:08:19,889 --> 00:08:25,319
an example output there information per

00:08:22,349 --> 00:08:27,479
container once every 30 seconds there's

00:08:25,319 --> 00:08:29,430
information that happens on the Diego

00:08:27,479 --> 00:08:31,349
cells and those actually only come out

00:08:29,430 --> 00:08:34,229
once every 60 seconds which is the

00:08:31,349 --> 00:08:37,079
reason that we have a 60 second warmup

00:08:34,229 --> 00:08:38,940
period after that six sixty Seconds all

00:08:37,079 --> 00:08:41,550
of the information that you see here now

00:08:38,940 --> 00:08:44,130
should be an accurate picture of what an

00:08:41,550 --> 00:08:46,200
environment looks like so if we continue

00:08:44,130 --> 00:08:48,960
to to look at here

00:08:46,200 --> 00:08:50,490
the next section here outside of where

00:08:48,960 --> 00:08:54,800
we're targeted and who we're login us is

00:08:50,490 --> 00:08:58,380
the the stack in which the Diego cells

00:08:54,800 --> 00:09:00,480
that have been reported in belong so in

00:08:58,380 --> 00:09:04,140
this case we have three Diego cells that

00:09:00,480 --> 00:09:09,510
are have typed CF Linux FS two which is

00:09:04,140 --> 00:09:12,000
the default stack and information about

00:09:09,510 --> 00:09:14,610
this is aggregated information about all

00:09:12,000 --> 00:09:16,490
of those cells so we have CPU

00:09:14,610 --> 00:09:18,840
utilization this is the CPU utilization

00:09:16,490 --> 00:09:23,370
cumulatively across all three of those

00:09:18,840 --> 00:09:25,830
cells we have what the maximum CPU CPU

00:09:23,370 --> 00:09:27,120
is and the reason that that number might

00:09:25,830 --> 00:09:29,160
look a little strange isn't how do you

00:09:27,120 --> 00:09:30,930
get twelve hundred percent well so how

00:09:29,160 --> 00:09:32,160
that works is very similar if you're

00:09:30,930 --> 00:09:33,630
familiar with Linux and if you've ever

00:09:32,160 --> 00:09:35,520
done a top on Linux when you have a

00:09:33,630 --> 00:09:37,470
multi-threaded application you can

00:09:35,520 --> 00:09:41,460
actually have more than 100% CPU

00:09:37,470 --> 00:09:45,060
utilization similar here is what it's

00:09:41,460 --> 00:09:49,080
doing is determining how many CPUs are

00:09:45,060 --> 00:09:51,060
in each Diego cell and then times emails

00:09:49,080 --> 00:09:52,500
out by how many Diego cells you have and

00:09:51,060 --> 00:09:54,960
in this particular case we end up with

00:09:52,500 --> 00:09:57,420
1200 because each Diego cell has four

00:09:54,960 --> 00:10:00,210
CPUs so four times three we end up with

00:09:57,420 --> 00:10:02,640
1200 percent as a maximum if you maxed

00:10:00,210 --> 00:10:06,840
out all Diego cells in this particular

00:10:02,640 --> 00:10:09,840
stack we then have memory information

00:10:06,840 --> 00:10:12,870
about how much memory is used how much

00:10:09,840 --> 00:10:15,420
memory is available on these Diego cells

00:10:12,870 --> 00:10:18,690
how much of reserved reserved is when

00:10:15,420 --> 00:10:22,410
you push an application it has a quota

00:10:18,690 --> 00:10:25,170
and that quota basically decrements if

00:10:22,410 --> 00:10:27,480
you will how much is reserved within a

00:10:25,170 --> 00:10:28,560
Diego cell and then again in this

00:10:27,480 --> 00:10:30,690
particular case when the header

00:10:28,560 --> 00:10:33,240
information we're adding that altogether

00:10:30,690 --> 00:10:35,760
and determining how much is fully

00:10:33,240 --> 00:10:37,860
reserved within the three Diego cells we

00:10:35,760 --> 00:10:39,140
have here in this particular case we

00:10:37,860 --> 00:10:42,330
have a hundred and twenty nine

00:10:39,140 --> 00:10:45,960
applications deployed to these three

00:10:42,330 --> 00:10:48,510
Diego cells this is not containers

00:10:45,960 --> 00:10:51,360
that's what this 134 is which is to say

00:10:48,510 --> 00:10:53,070
that we have 129 unique applications as

00:10:51,360 --> 00:10:55,530
in like CF push the name of an

00:10:53,070 --> 00:10:57,840
application some of those applications

00:10:55,530 --> 00:10:58,860
have been scaled to more than one which

00:10:57,840 --> 00:11:02,070
is how we end up

00:10:58,860 --> 00:11:03,360
more containers which is typical you

00:11:02,070 --> 00:11:05,850
would never have more less containers

00:11:03,360 --> 00:11:08,040
than you do have applications which

00:11:05,850 --> 00:11:09,540
isn't actually quite true which is to

00:11:08,040 --> 00:11:12,270
say that you could have applications

00:11:09,540 --> 00:11:14,670
that are pushed to Cloud Foundry that

00:11:12,270 --> 00:11:16,590
aren't started so if you actually look

00:11:14,670 --> 00:11:20,220
at this and say oh for some reason if

00:11:16,590 --> 00:11:22,110
you had 129 applications but only 120

00:11:20,220 --> 00:11:23,910
containers as an example that's actually

00:11:22,110 --> 00:11:26,010
legal because maybe your some of your

00:11:23,910 --> 00:11:28,470
containers or some of your applications

00:11:26,010 --> 00:11:30,660
are stopped or that they're started but

00:11:28,470 --> 00:11:34,380
crashing so that's how those numbers can

00:11:30,660 --> 00:11:37,230
can play out there and disk is similar

00:11:34,380 --> 00:11:39,240
in memory of how much is used the

00:11:37,230 --> 00:11:42,060
maximum amount of disk space you have

00:11:39,240 --> 00:11:43,560
available and reserved the the next

00:11:42,060 --> 00:11:44,670
stack it will just list out all of the

00:11:43,560 --> 00:11:46,470
stacks that are available to you in this

00:11:44,670 --> 00:11:49,260
particular case this foundation that I'm

00:11:46,470 --> 00:11:52,770
looking at has a Windows cell in it as

00:11:49,260 --> 00:11:55,890
well so that's listed here this is also

00:11:52,770 --> 00:11:57,870
aware of isolation segments if you're

00:11:55,890 --> 00:12:00,090
familiar with those and if you have

00:11:57,870 --> 00:12:01,860
isolation segments those will be listed

00:12:00,090 --> 00:12:05,610
here as well so that way it groups

00:12:01,860 --> 00:12:07,890
together all of the Diego cells by stack

00:12:05,610 --> 00:12:09,860
by isolation segment because you could

00:12:07,890 --> 00:12:13,010
actually have an isolation segment a

00:12:09,860 --> 00:12:15,750
that actually has multiple stacks in it

00:12:13,010 --> 00:12:17,970
so all of that information is signed up

00:12:15,750 --> 00:12:21,930
broken down but aggregated by that

00:12:17,970 --> 00:12:24,150
particular type I'll go over the the

00:12:21,930 --> 00:12:25,770
pieces here on the alerts so hopefully

00:12:24,150 --> 00:12:27,510
if you're monitoring your platform you

00:12:25,770 --> 00:12:30,420
actually don't have any alerts or

00:12:27,510 --> 00:12:32,610
warnings but in this particular case I

00:12:30,420 --> 00:12:36,290
have an application that is not in the

00:12:32,610 --> 00:12:38,520
desired state I put to try to help

00:12:36,290 --> 00:12:41,400
people understand what this really meant

00:12:38,520 --> 00:12:45,120
is that this is the DCR is the desired

00:12:41,400 --> 00:12:46,800
container count and the RCR is the

00:12:45,120 --> 00:12:49,320
actual reporting container count which

00:12:46,800 --> 00:12:51,990
is to say that I wanted some number and

00:12:49,320 --> 00:12:54,270
the number that I've got is not does not

00:12:51,990 --> 00:12:57,720
match so in this particular case I have

00:12:54,270 --> 00:12:59,850
a crashing app in here and we'll look at

00:12:57,720 --> 00:13:01,980
that here in a second but that means

00:12:59,850 --> 00:13:04,320
that I wanted in this particular case I

00:13:01,980 --> 00:13:05,970
wanted one instance of this particular

00:13:04,320 --> 00:13:08,200
application but because it keeps

00:13:05,970 --> 00:13:10,300
crashing and is not able to start I

00:13:08,200 --> 00:13:11,440
got zero so it's morning you that's you

00:13:10,300 --> 00:13:14,290
have in this particular case one

00:13:11,440 --> 00:13:17,740
application that is not meeting what you

00:13:14,290 --> 00:13:20,230
want it to to run on and then the next

00:13:17,740 --> 00:13:22,120
thing is a warning because this is now

00:13:20,230 --> 00:13:26,500
part of Cloud Foundry self-healing is

00:13:22,120 --> 00:13:30,400
that I have 33 containers that have

00:13:26,500 --> 00:13:33,700
crashed in the last 24 hours three of

00:13:30,400 --> 00:13:35,770
them in the last hour so in this

00:13:33,700 --> 00:13:37,390
particular case this application as long

00:13:35,770 --> 00:13:40,740
as it's not also the application that's

00:13:37,390 --> 00:13:43,360
not in the desired state is running but

00:13:40,740 --> 00:13:44,890
but it keeps crashing so this may be an

00:13:43,360 --> 00:13:46,840
indication that there's something

00:13:44,890 --> 00:13:48,220
something going on actually it is an

00:13:46,840 --> 00:13:50,230
indication something's going wrong and

00:13:48,220 --> 00:13:52,240
you can actually look at the information

00:13:50,230 --> 00:13:55,380
that we'll look at in a sec to figure

00:13:52,240 --> 00:13:58,180
out why a application might be crashing

00:13:55,380 --> 00:14:00,010
so then actually let me take a pause

00:13:58,180 --> 00:14:03,640
there before I get into the the details

00:14:00,010 --> 00:14:08,800
the application lists down below do we

00:14:03,640 --> 00:14:10,270
have any questions at this point it

00:14:08,800 --> 00:14:12,460
looks like it says admin at the top if

00:14:10,270 --> 00:14:16,300
I'm not an admin on the foundation can I

00:14:12,460 --> 00:14:19,750
still use a tool yes so there's a couple

00:14:16,300 --> 00:14:21,820
of different parts to that question one

00:14:19,750 --> 00:14:24,130
is that I am actually logged in as admin

00:14:21,820 --> 00:14:28,510
so obviously I have full authority to do

00:14:24,130 --> 00:14:30,850
anything but CF top actually has two

00:14:28,510 --> 00:14:32,770
permissions that it needs one is the

00:14:30,850 --> 00:14:36,760
cloud controller admin and the other one

00:14:32,770 --> 00:14:39,700
is the firehose permission you can

00:14:36,760 --> 00:14:41,050
assign those permissions to any user so

00:14:39,700 --> 00:14:43,060
obviously you'd want to assign them to a

00:14:41,050 --> 00:14:44,620
user that is appropriate because

00:14:43,060 --> 00:14:46,690
obviously at that point they could see

00:14:44,620 --> 00:14:48,760
everything that's in the firehose which

00:14:46,690 --> 00:14:50,950
includes any application logging and if

00:14:48,760 --> 00:14:52,780
people are logging some sensitive

00:14:50,950 --> 00:14:55,110
information you know that could be bad

00:14:52,780 --> 00:14:57,130
if you just gave this out to everybody

00:14:55,110 --> 00:14:59,200
so those are the two permissions you

00:14:57,130 --> 00:15:01,000
need to run this in what I call

00:14:59,200 --> 00:15:03,760
privileged mode so the mode that you're

00:15:01,000 --> 00:15:05,560
seeing right now you can actually run

00:15:03,760 --> 00:15:07,270
this without those permissions meaning

00:15:05,560 --> 00:15:09,070
in a non privileged mode and if you were

00:15:07,270 --> 00:15:11,920
just in a developer that's it's not

00:15:09,070 --> 00:15:14,290
going to get those two permissions it

00:15:11,920 --> 00:15:16,360
runs in reduced functionality mode which

00:15:14,290 --> 00:15:18,490
is to say that you only have the ability

00:15:16,360 --> 00:15:19,990
to see obviously the applications

00:15:18,490 --> 00:15:20,700
meaning the orgs and spaces and the

00:15:19,990 --> 00:15:22,290
applications

00:15:20,700 --> 00:15:24,180
those organ spaces that you have

00:15:22,290 --> 00:15:27,030
permissions to see and the other thing

00:15:24,180 --> 00:15:29,760
is because I can't initialize a firehose

00:15:27,030 --> 00:15:30,690
connection to plow foundry because you

00:15:29,760 --> 00:15:33,690
don't have that permission

00:15:30,690 --> 00:15:36,090
it actually initializes an independent

00:15:33,690 --> 00:15:39,240
WebSocket for every application that you

00:15:36,090 --> 00:15:41,850
can see and I put a cap of it at 50

00:15:39,240 --> 00:15:44,790
which is to say that it will show you

00:15:41,850 --> 00:15:46,680
the first 50 which when I say first the

00:15:44,790 --> 00:15:48,150
oldest 50 applications that have been

00:15:46,680 --> 00:15:51,900
deployed to the platform that you have

00:15:48,150 --> 00:15:53,370
authority to to see so and then there's

00:15:51,900 --> 00:15:55,830
some other functionality that I can talk

00:15:53,370 --> 00:15:57,360
about later that you won't have the

00:15:55,830 --> 00:16:00,390
ability to see such as the header

00:15:57,360 --> 00:16:03,930
information will not obviously be able

00:16:00,390 --> 00:16:06,030
to show you all of the aggregated cells

00:16:03,930 --> 00:16:08,370
because you don't have the level of

00:16:06,030 --> 00:16:10,740
information as a regular developer to

00:16:08,370 --> 00:16:12,420
see that so it does work just works in

00:16:10,740 --> 00:16:15,240
reduced functionality mode as a

00:16:12,420 --> 00:16:20,370
developer any other questions at this

00:16:15,240 --> 00:16:22,560
point all right so let's go down then to

00:16:20,370 --> 00:16:24,690
the destruction down below which is a

00:16:22,560 --> 00:16:26,820
list of all of the applications and

00:16:24,690 --> 00:16:28,440
again since I'm logged in as admin this

00:16:26,820 --> 00:16:31,410
is all of the applications on the

00:16:28,440 --> 00:16:33,330
left-hand side here that are running on

00:16:31,410 --> 00:16:35,340
this platform so this should be a

00:16:33,330 --> 00:16:38,130
hundred and twenty nine applications

00:16:35,340 --> 00:16:41,610
actually 130 because of the the Windows

00:16:38,130 --> 00:16:43,260
guy as well and so what we're seeing is

00:16:41,610 --> 00:16:45,380
the application name and of course the

00:16:43,260 --> 00:16:48,510
Oregon space in which it's deployed to

00:16:45,380 --> 00:16:50,910
DCR was the desired container count this

00:16:48,510 --> 00:16:52,530
is how much it's scaled to so in other

00:16:50,910 --> 00:16:55,110
words if you've scaled your application

00:16:52,530 --> 00:16:56,790
to five instances DCR would be five

00:16:55,110 --> 00:17:00,210
meaning that's the desired that's how

00:16:56,790 --> 00:17:02,670
many you want RCR is how many are

00:17:00,210 --> 00:17:04,860
actually reporting in hopefully those

00:17:02,670 --> 00:17:06,180
two numbers match if they don't match

00:17:04,860 --> 00:17:08,250
that's generally why you would get the

00:17:06,180 --> 00:17:10,350
red alert banner is that saying that

00:17:08,250 --> 00:17:12,660
something is not working it couldn't

00:17:10,350 --> 00:17:14,910
start it or it crashed and it's

00:17:12,660 --> 00:17:18,540
currently in that state meaning that it

00:17:14,910 --> 00:17:20,910
hasn't recovered that container yet the

00:17:18,540 --> 00:17:23,970
next piece which is the default sort

00:17:20,910 --> 00:17:26,640
when you bring up CF top which is the

00:17:23,970 --> 00:17:32,160
CPU utilization so right now we're doing

00:17:26,640 --> 00:17:33,400
in a descending sort on CPU percent and

00:17:32,160 --> 00:17:37,810
so what this is

00:17:33,400 --> 00:17:42,640
is the percentage of CPU that's consumed

00:17:37,810 --> 00:17:45,130
by all instances of that application is

00:17:42,640 --> 00:17:47,440
it so again let's actually look at this

00:17:45,130 --> 00:17:50,740
so if my very top application here is

00:17:47,440 --> 00:17:52,720
the test app zero zero one if you look

00:17:50,740 --> 00:17:54,280
at this we got a DC r4 meaning we have

00:17:52,720 --> 00:17:56,050
four instances of that thing currently

00:17:54,280 --> 00:17:57,720
scaled we actually have four reporting

00:17:56,050 --> 00:18:00,190
in four containers reporting in

00:17:57,720 --> 00:18:04,480
aggregated together all four of those

00:18:00,190 --> 00:18:09,790
are consuming 1.7 percent of the CPU in

00:18:04,480 --> 00:18:14,350
the Diego cell or cells that are within

00:18:09,790 --> 00:18:17,080
the stack and isolation segment if you

00:18:14,350 --> 00:18:19,590
had it of where of where it's deployed

00:18:17,080 --> 00:18:23,560
so in this particular case it's a it's a

00:18:19,590 --> 00:18:27,400
linux default stack so it's actually the

00:18:23,560 --> 00:18:31,390
top guy so part of this 9.3 percent that

00:18:27,400 --> 00:18:33,250
we see at the top is part of that number

00:18:31,390 --> 00:18:36,960
is this one point eight four percent

00:18:33,250 --> 00:18:40,510
that this particular guy is consuming

00:18:36,960 --> 00:18:43,990
continuing on the right here the CR CR H

00:18:40,510 --> 00:18:46,060
is the crash count this is what this guy

00:18:43,990 --> 00:18:47,350
is reporting in it says that somewhere

00:18:46,060 --> 00:18:49,420
in this list we've got thirty four

00:18:47,350 --> 00:18:51,040
crashed containers and over the last 24

00:18:49,420 --> 00:18:53,110
hours but we can see that this

00:18:51,040 --> 00:18:54,880
particular application has not crashed

00:18:53,110 --> 00:18:58,120
at least not in the last 24 hours

00:18:54,880 --> 00:19:00,820
the next one is a memory used and again

00:18:58,120 --> 00:19:04,990
depends I mean this is how much memory

00:19:00,820 --> 00:19:06,880
is used in that that container so

00:19:04,990 --> 00:19:08,650
whatever it's using if it's Java or node

00:19:06,880 --> 00:19:11,620
or whatever that's just how much memory

00:19:08,650 --> 00:19:12,850
has consumed not necessarily obviously

00:19:11,620 --> 00:19:14,890
your quota

00:19:12,850 --> 00:19:18,070
same thing with disk is how much disk is

00:19:14,890 --> 00:19:21,280
used I'm actually using my right arrow

00:19:18,070 --> 00:19:23,170
here to go through additional fields

00:19:21,280 --> 00:19:24,880
that are available the next one is the

00:19:23,170 --> 00:19:27,310
response time of this particular

00:19:24,880 --> 00:19:29,560
application the reason that some of

00:19:27,310 --> 00:19:32,320
these have - - is that that number is

00:19:29,560 --> 00:19:34,210
the response time for that application

00:19:32,320 --> 00:19:37,750
at least one of the containers in that

00:19:34,210 --> 00:19:39,640
application in the last 60 seconds so if

00:19:37,750 --> 00:19:41,680
a - - means it's got no traffic in the

00:19:39,640 --> 00:19:43,810
last 60 seconds if I kind of keep going

00:19:41,680 --> 00:19:46,130
to the right here for a sec in this

00:19:43,810 --> 00:19:48,290
particular case

00:19:46,130 --> 00:19:51,860
hopping all the way over to the req /

00:19:48,290 --> 00:19:54,020
one that is the requests per one second

00:19:51,860 --> 00:19:57,140
which in this particular case I'm

00:19:54,020 --> 00:19:59,930
throwing a load test at this at 50

00:19:57,140 --> 00:20:02,150
requests a second so I've got a another

00:19:59,930 --> 00:20:04,430
another command prompt that's actually

00:20:02,150 --> 00:20:07,790
hitting this application with a get

00:20:04,430 --> 00:20:10,940
request 50 times a second just so I can

00:20:07,790 --> 00:20:14,330
put some traffic on here so those 50

00:20:10,940 --> 00:20:17,240
requests a second each each individual

00:20:14,330 --> 00:20:20,750
request is averaging at about 2.3

00:20:17,240 --> 00:20:22,670
milliseconds per per call so again this

00:20:20,750 --> 00:20:25,190
can be a useful tool if you're getting

00:20:22,670 --> 00:20:28,310
reports that hey I'm getting really slow

00:20:25,190 --> 00:20:30,260
response time nice thing to fire this up

00:20:28,310 --> 00:20:32,060
and take a look now in this particular

00:20:30,260 --> 00:20:34,970
case you might want to get a baseline

00:20:32,060 --> 00:20:36,890
just figuring out what what what is

00:20:34,970 --> 00:20:39,410
normal so in other words if you have an

00:20:36,890 --> 00:20:41,990
application that normally responds has a

00:20:39,410 --> 00:20:43,490
15-second response time is that good or

00:20:41,990 --> 00:20:45,260
bad well or not it depends whether

00:20:43,490 --> 00:20:46,940
that's kind of your normal baseline

00:20:45,260 --> 00:20:49,220
which is something I want to bring up

00:20:46,940 --> 00:20:53,350
real quickly is that this does not

00:20:49,220 --> 00:20:53,350
meaning see if top does not replace

00:20:53,530 --> 00:20:57,800
historic monitoring tools which is say

00:20:55,970 --> 00:21:01,850
if you're going to to Splunk or you're

00:20:57,800 --> 00:21:03,890
using a graph on ax or a number of other

00:21:01,850 --> 00:21:05,450
monitoring tools because all of those

00:21:03,890 --> 00:21:07,430
have history meaning that they're

00:21:05,450 --> 00:21:09,710
actually capturing all of the

00:21:07,430 --> 00:21:11,150
information from a platform and you can

00:21:09,710 --> 00:21:13,940
go back in time and actually look at

00:21:11,150 --> 00:21:15,260
what's going on CF top is not intended

00:21:13,940 --> 00:21:17,900
to do that which is to say that there's

00:21:15,260 --> 00:21:19,430
no history here meaning if I exit CF top

00:21:17,900 --> 00:21:21,170
and bring it back up all these stats go

00:21:19,430 --> 00:21:23,390
back to zero and it's from the time you

00:21:21,170 --> 00:21:25,190
start CF top with the exception of the

00:21:23,390 --> 00:21:27,890
crash count that's the only one that

00:21:25,190 --> 00:21:30,460
actually has history if you will in the

00:21:27,890 --> 00:21:30,460
last 24 hours

00:21:30,560 --> 00:21:35,480
going through this quickly here the

00:21:33,080 --> 00:21:37,070
slash 10 is the last 10 seconds how many

00:21:35,480 --> 00:21:39,110
requests have occurred last 10 seconds

00:21:37,070 --> 00:21:41,390
and slash 60 is how many have occurred

00:21:39,110 --> 00:21:42,650
the last 60 seconds this is the total

00:21:41,390 --> 00:21:45,410
request count again

00:21:42,650 --> 00:21:47,360
since CF top has started so since we've

00:21:45,410 --> 00:21:49,850
been running CF top now for 14 minutes

00:21:47,360 --> 00:21:52,700
we've gotten 42,000 calls on this

00:21:49,850 --> 00:21:58,090
particular application this then breaks

00:21:52,700 --> 00:21:59,890
it down by HTTP response code

00:21:58,090 --> 00:22:01,930
so in this particular case they've all

00:21:59,890 --> 00:22:04,630
been successful to XX meaning that it's

00:22:01,930 --> 00:22:07,480
returned 200 or somewhere in the 200

00:22:04,630 --> 00:22:09,280
range this again is a nice way to be

00:22:07,480 --> 00:22:11,170
able to determine if any other

00:22:09,280 --> 00:22:13,090
applications are exhibiting a problem

00:22:11,170 --> 00:22:16,060
because hopefully if your applications

00:22:13,090 --> 00:22:19,240
are behaving well you should not have

00:22:16,060 --> 00:22:22,510
any 500 errors but this can this is a

00:22:19,240 --> 00:22:26,500
way to to see quickly if any of your

00:22:22,510 --> 00:22:31,450
applications are producing 500 errors or

00:22:26,500 --> 00:22:36,070
404 or whatever the isolation segment

00:22:31,450 --> 00:22:36,790
that is assigned to this the - - means

00:22:36,070 --> 00:22:39,100
it's the default

00:22:36,790 --> 00:22:41,800
isolation segment often called a shared

00:22:39,100 --> 00:22:46,540
isolation segment and then going all the

00:22:41,800 --> 00:22:47,650
way to the right is the the stack so let

00:22:46,540 --> 00:22:51,240
me pause there for a second before we

00:22:47,650 --> 00:22:53,110
dive in any further any any questions

00:22:51,240 --> 00:22:56,320
we've got a mic that's coming around

00:22:53,110 --> 00:22:59,500
here what does the on the application

00:22:56,320 --> 00:23:03,070
what is the blue represent so the blue

00:22:59,500 --> 00:23:06,550
represents traffic that has occurred in

00:23:03,070 --> 00:23:08,320
the last 20 seconds I believe so

00:23:06,550 --> 00:23:11,230
basically its recent traffic and again

00:23:08,320 --> 00:23:14,320
the important part here is it is traffic

00:23:11,230 --> 00:23:17,890
that has gone through the go router and

00:23:14,320 --> 00:23:19,950
the reason I say that is that if you

00:23:17,890 --> 00:23:22,210
happen to have container to container

00:23:19,950 --> 00:23:23,710
communication meaning that maybe you're

00:23:22,210 --> 00:23:25,240
using a Eureka or something that

00:23:23,710 --> 00:23:28,720
actually is talking directly container

00:23:25,240 --> 00:23:30,880
container that traffic is not visible

00:23:28,720 --> 00:23:32,170
from the firehose perspective because it

00:23:30,880 --> 00:23:34,510
didn't go through the go router in which

00:23:32,170 --> 00:23:36,850
case it may look like you have an

00:23:34,510 --> 00:23:37,960
application that's taking CPU and it's

00:23:36,850 --> 00:23:41,530
not blue you know it's not blue there

00:23:37,960 --> 00:23:42,970
and this is not counting any any

00:23:41,530 --> 00:23:45,100
requests counts and you're like well

00:23:42,970 --> 00:23:47,620
what's it doing well it could very well

00:23:45,100 --> 00:23:48,670
be busy it just has not gone through the

00:23:47,620 --> 00:23:55,060
go router therefore it doesn't know

00:23:48,670 --> 00:23:58,000
about it do you have any kind of batch

00:23:55,060 --> 00:23:59,210
modes for this like an ESX top how you

00:23:58,000 --> 00:24:01,340
could do a batch

00:23:59,210 --> 00:24:05,870
for more analysis capturing words I do

00:24:01,340 --> 00:24:07,760
not not at this time but feel free this

00:24:05,870 --> 00:24:10,370
is all open source by the way

00:24:07,760 --> 00:24:12,110
so again if you just go out to to the

00:24:10,370 --> 00:24:14,240
plugins Cloud Foundry org you can

00:24:12,110 --> 00:24:16,340
install it and in that same section

00:24:14,240 --> 00:24:20,110
where you install and that web page

00:24:16,340 --> 00:24:23,630
there is a link to the github repository

00:24:20,110 --> 00:24:26,450
for this guy that would take you to the

00:24:23,630 --> 00:24:28,640
github repository 4cf top and then you

00:24:26,450 --> 00:24:30,470
could actually log a an issue for a

00:24:28,640 --> 00:24:32,539
feature request if you want to kind of

00:24:30,470 --> 00:24:34,490
explain your use case so I you know

00:24:32,539 --> 00:24:37,010
encourage any of you if you've used this

00:24:34,490 --> 00:24:40,190
before and it doesn't quite do what you

00:24:37,010 --> 00:24:42,470
wanted to do feel free to add some some

00:24:40,190 --> 00:24:47,149
feature requests and we can talk about

00:24:42,470 --> 00:24:49,010
that alright so the next thing we could

00:24:47,149 --> 00:24:51,529
do is actually delve deeper so remember

00:24:49,010 --> 00:24:53,990
I'm focusing on on this test app zero

00:24:51,529 --> 00:24:56,120
zero one remember there are four

00:24:53,990 --> 00:24:58,640
instances of this application meaning

00:24:56,120 --> 00:25:00,049
there are four containers if we drive

00:24:58,640 --> 00:25:01,520
into that one we get a little more

00:25:00,049 --> 00:25:04,340
detail about to that particular

00:25:01,520 --> 00:25:06,440
application so in this in this case we

00:25:04,340 --> 00:25:08,299
have the four and remember I was saying

00:25:06,440 --> 00:25:11,360
there was like one point some percent

00:25:08,299 --> 00:25:14,120
1.8 percent of CPU you can now see how

00:25:11,360 --> 00:25:17,690
that actually breaks down into each

00:25:14,120 --> 00:25:19,610
container as to how much CPU it's taking

00:25:17,690 --> 00:25:24,380
the other thing that this shows you

00:25:19,610 --> 00:25:27,380
which is possible to get through

00:25:24,380 --> 00:25:30,110
forensic analysis but sometimes

00:25:27,380 --> 00:25:32,809
challenging is what Diego cell is

00:25:30,110 --> 00:25:34,880
actually hosting this and the reason you

00:25:32,809 --> 00:25:36,080
might want to know that is well what

00:25:34,880 --> 00:25:38,299
other things that might be running on

00:25:36,080 --> 00:25:40,429
that Diego cell and we'll get into that

00:25:38,299 --> 00:25:42,740
here in just a second but that's what

00:25:40,429 --> 00:25:46,669
the the cell IP address is on the right

00:25:42,740 --> 00:25:49,429
is what Diego cell is actually running

00:25:46,669 --> 00:25:52,580
this particular application and if you

00:25:49,429 --> 00:25:56,149
recall we have three Diego cells that

00:25:52,580 --> 00:25:58,669
are in the CF Linux stack and so that's

00:25:56,149 --> 00:26:00,710
the reason you end up seeing two that

00:25:58,669 --> 00:26:02,539
are hosted on dot 66 because of course

00:26:00,710 --> 00:26:04,429
we have four instances but we only have

00:26:02,539 --> 00:26:08,270
three Diego cells so of course one of

00:26:04,429 --> 00:26:10,120
the Diego cells had f2 and then the

00:26:08,270 --> 00:26:12,020
information here is self-explanatory

00:26:10,120 --> 00:26:16,340
breakdown of each can

00:26:12,020 --> 00:26:20,330
how much memory and disk it's using the

00:26:16,340 --> 00:26:21,680
only thing to to note here is the and we

00:26:20,330 --> 00:26:24,110
kind of skipped over it on the other of

00:26:21,680 --> 00:26:25,850
the other page is the standard out and

00:26:24,110 --> 00:26:27,830
standard error these are how many

00:26:25,850 --> 00:26:30,260
obviously logging events have occurred

00:26:27,830 --> 00:26:33,020
from that container if I go back a

00:26:30,260 --> 00:26:37,430
screen that same information aggregated

00:26:33,020 --> 00:26:39,260
is on this screen standard out standard

00:26:37,430 --> 00:26:41,690
air it's just the aggregated where this

00:26:39,260 --> 00:26:45,020
is useful from a use case perspective is

00:26:41,690 --> 00:26:46,580
if you are dropping a lot of log

00:26:45,020 --> 00:26:50,600
messages you know like I don't know

00:26:46,580 --> 00:26:53,840
what's going on here it may be that an

00:26:50,600 --> 00:26:55,910
application went to an environment prog

00:26:53,840 --> 00:26:58,940
would be an environment that we were

00:26:55,910 --> 00:27:01,550
dealing with that had debug or worse yet

00:26:58,940 --> 00:27:04,250
trace level turned on usually by

00:27:01,550 --> 00:27:05,270
accident somebody checked in a log4j or

00:27:04,250 --> 00:27:07,640
some kind of configuration file

00:27:05,270 --> 00:27:10,250
accidentally and all of a sudden now

00:27:07,640 --> 00:27:13,640
production is logging lots and lots of

00:27:10,250 --> 00:27:15,260
output and so obviously if you're

00:27:13,640 --> 00:27:17,210
logging the stuff to Splunk if

00:27:15,260 --> 00:27:18,830
somebody's paying attention they could

00:27:17,210 --> 00:27:20,570
do a query and say oh wow there's a

00:27:18,830 --> 00:27:22,090
there's a lot of logging going on in

00:27:20,570 --> 00:27:24,140
this one particular application but

00:27:22,090 --> 00:27:25,940
somebody would either have to have a

00:27:24,140 --> 00:27:27,230
query that's running all the time and

00:27:25,940 --> 00:27:28,970
some kind of schedule or they'd have to

00:27:27,230 --> 00:27:31,270
kind of be paying attention or in this

00:27:28,970 --> 00:27:33,830
particular case it's really easy to

00:27:31,270 --> 00:27:36,950
identify the offending application say

00:27:33,830 --> 00:27:37,940
oops somebody messed up or maybe they

00:27:36,950 --> 00:27:40,370
didn't mess up but maybe you're actually

00:27:37,940 --> 00:27:41,750
doing a load test but again maybe it's a

00:27:40,370 --> 00:27:44,090
load test in the load test environments

00:27:41,750 --> 00:27:46,010
that somebody just you know forgot to

00:27:44,090 --> 00:27:48,710
turn off debug and that's affecting your

00:27:46,010 --> 00:27:50,510
actual your output for your load test so

00:27:48,710 --> 00:27:54,800
that may be an indicator that you want

00:27:50,510 --> 00:27:56,600
to do something so let's see what else

00:27:54,800 --> 00:27:59,030
we got here a lot of these things are

00:27:56,600 --> 00:28:01,640
self-explanatory we got the HTTP right

00:27:59,030 --> 00:28:03,800
here which is same as the prior screen

00:28:01,640 --> 00:28:06,200
is how many are occurring per second per

00:28:03,800 --> 00:28:09,440
10 seconds per 60 seconds the response

00:28:06,200 --> 00:28:12,800
time averages across that same thing so

00:28:09,440 --> 00:28:14,030
two point you know 1.8 milliseconds on

00:28:12,800 --> 00:28:15,290
the right side that's how many crashes

00:28:14,030 --> 00:28:17,270
that occurred in those time intervals

00:28:15,290 --> 00:28:21,890
and the bottom are the particular

00:28:17,270 --> 00:28:24,260
containers that are going on there

00:28:21,890 --> 00:28:25,880
so the next thing that we can actually

00:28:24,260 --> 00:28:28,940
look at is drive a little bit deeper and

00:28:25,880 --> 00:28:30,530
one is getting general information about

00:28:28,940 --> 00:28:32,960
this application so in this particular

00:28:30,530 --> 00:28:33,920
case the application has and sometimes

00:28:32,960 --> 00:28:36,650
it's useful to actually get the

00:28:33,920 --> 00:28:38,900
application ID it's gooey its organ

00:28:36,650 --> 00:28:40,429
space you would have already known in

00:28:38,900 --> 00:28:43,549
this case where the isolation this

00:28:40,429 --> 00:28:45,020
segment shared what Bill packet was

00:28:43,549 --> 00:28:48,170
built with in this case this thing was

00:28:45,020 --> 00:28:51,440
built with the deployed with the static

00:28:48,170 --> 00:28:53,600
bill pack and and when that when the

00:28:51,440 --> 00:28:56,390
deployment actually occurred and what

00:28:53,600 --> 00:28:59,720
it's actually reserved or quotas were

00:28:56,390 --> 00:29:03,500
was at the bottom here if this was a

00:28:59,720 --> 00:29:06,350
docker image the bill pack would be

00:29:03,500 --> 00:29:10,780
replaced with dr. docker information

00:29:06,350 --> 00:29:10,780
such as where the docker image came from

00:29:10,809 --> 00:29:15,919
the next thing is a view crash count in

00:29:14,840 --> 00:29:17,240
this particular case since this one

00:29:15,919 --> 00:29:20,929
hasn't crashed there's nothing there

00:29:17,240 --> 00:29:24,200
interesting to look at and then the next

00:29:20,929 --> 00:29:25,760
one is HTTP response code again this

00:29:24,200 --> 00:29:27,830
one's not particularly interesting

00:29:25,760 --> 00:29:30,470
because all of my requests here doing

00:29:27,830 --> 00:29:33,380
gets so actually let me pick a different

00:29:30,470 --> 00:29:35,799
application it might be mildly more

00:29:33,380 --> 00:29:39,500
interesting

00:29:35,799 --> 00:29:42,280
maybe the eureka guy so in this case

00:29:39,500 --> 00:29:44,510
this one's doing a Botha get in a-put

00:29:42,280 --> 00:29:47,120
fortunately they're all getting 200 as a

00:29:44,510 --> 00:29:49,040
response codes but again if you if your

00:29:47,120 --> 00:29:51,230
developer particularly and trying to

00:29:49,040 --> 00:29:53,750
figure out what is going on you can

00:29:51,230 --> 00:29:55,190
start drilling down and say if you

00:29:53,750 --> 00:29:57,530
looked at the summary screen it just

00:29:55,190 --> 00:29:58,640
said like 5 X X as an example so it's

00:29:57,530 --> 00:30:01,040
like alright well you know you're

00:29:58,640 --> 00:30:03,169
getting some kind of a 500 ish return

00:30:01,040 --> 00:30:06,740
code but you don't know specifically was

00:30:03,169 --> 00:30:09,770
it a 5 a 5 was it you know or even the

00:30:06,740 --> 00:30:11,000
400 you know Zi you can any f404 or 403

00:30:09,770 --> 00:30:13,309
so this one actually tells you

00:30:11,000 --> 00:30:14,929
specifically what the response code was

00:30:13,309 --> 00:30:18,549
how many times that response code has

00:30:14,929 --> 00:30:21,380
occurred so in this case we have 132 get

00:30:18,549 --> 00:30:24,740
methods calls over the response code of

00:30:21,380 --> 00:30:28,190
200 and when that last what last

00:30:24,740 --> 00:30:29,080
occurred and then the the last response

00:30:28,190 --> 00:30:35,110
time

00:30:29,080 --> 00:30:39,010
in milliseconds and then if we drive

00:30:35,110 --> 00:30:40,900
down to find our let's go this way our

00:30:39,010 --> 00:30:44,110
crash nap this is the one that keeps

00:30:40,900 --> 00:30:45,460
crashing so this one provides youth a

00:30:44,110 --> 00:30:47,230
little more information again all I'm

00:30:45,460 --> 00:30:49,900
doing is in the details of this

00:30:47,230 --> 00:30:51,730
application the very bottom is screen

00:30:49,900 --> 00:30:53,560
just from a helpful hint perspective

00:30:51,730 --> 00:30:55,840
these are not all of the commands at the

00:30:53,560 --> 00:30:58,030
very bottom so when you see X for exit D

00:30:55,840 --> 00:30:59,830
for display order or filter those are

00:30:58,030 --> 00:31:01,900
not all of the things you can do these

00:30:59,830 --> 00:31:02,980
are just sort of the quick tips saying

00:31:01,900 --> 00:31:06,580
yeah these are the most common things

00:31:02,980 --> 00:31:07,990
people do if you type H on any of these

00:31:06,580 --> 00:31:10,270
screens this gives you a laborious

00:31:07,990 --> 00:31:12,640
detail about every single field that's

00:31:10,270 --> 00:31:16,560
on here what it means how it's derived

00:31:12,640 --> 00:31:18,310
and then down below is all of the

00:31:16,560 --> 00:31:20,110
shortcuts and commands that you can

00:31:18,310 --> 00:31:21,430
actually type so I'd encourage you if

00:31:20,110 --> 00:31:23,260
you're going to use this go ahead and

00:31:21,430 --> 00:31:26,050
explore there's lots of hidden nuggets

00:31:23,260 --> 00:31:29,350
in there so going back then to the crash

00:31:26,050 --> 00:31:32,710
count this gives you when the last time

00:31:29,350 --> 00:31:37,150
this application crashed with the index

00:31:32,710 --> 00:31:38,230
is the the container index number so in

00:31:37,150 --> 00:31:39,970
this particular case I think this thing

00:31:38,230 --> 00:31:41,560
is only scaled to one meaning it only

00:31:39,970 --> 00:31:44,800
has indexes or L so the hence they're

00:31:41,560 --> 00:31:46,660
all 0 but you can actually see if the

00:31:44,800 --> 00:31:48,280
problem is in a particular container or

00:31:46,660 --> 00:31:50,290
if it's like moving around and then the

00:31:48,280 --> 00:31:52,960
other thing is the response or the

00:31:50,290 --> 00:31:55,720
return code from the application now in

00:31:52,960 --> 00:31:58,300
this case this particular application

00:31:55,720 --> 00:32:00,370
we're looking at is a app called

00:31:58,300 --> 00:32:03,280
misbehaving app that I'm specifically

00:32:00,370 --> 00:32:06,340
returning 66 out of this app hence why

00:32:03,280 --> 00:32:08,950
it's 66 realistically when you get

00:32:06,340 --> 00:32:10,330
crashed apps it's likely that it's

00:32:08,950 --> 00:32:14,320
returning you something else that you're

00:32:10,330 --> 00:32:15,610
not doing it and so I in the help if you

00:32:14,320 --> 00:32:17,020
type aid should help

00:32:15,610 --> 00:32:19,120
I provided a little bit of the

00:32:17,020 --> 00:32:22,540
information as to what response codes

00:32:19,120 --> 00:32:24,640
could mean and really the main guys at

00:32:22,540 --> 00:32:26,500
least from a Java perspective other

00:32:24,640 --> 00:32:29,230
obviously you know we talked about node

00:32:26,500 --> 00:32:31,030
and other build packs may be likely will

00:32:29,230 --> 00:32:35,020
be different but in the case of Java

00:32:31,030 --> 00:32:38,200
these three return codes so 137 143 to

00:32:35,020 --> 00:32:39,170
55 are the most common ones that you

00:32:38,200 --> 00:32:41,720
would get a

00:32:39,170 --> 00:32:43,850
out of memory case so if you're actually

00:32:41,720 --> 00:32:46,820
getting those back to here where let's

00:32:43,850 --> 00:32:49,610
say exited with status code ba one of

00:32:46,820 --> 00:32:50,930
those chances are your application is

00:32:49,610 --> 00:32:51,740
running out of memory meaning your quota

00:32:50,930 --> 00:32:53,360
is too small

00:32:51,740 --> 00:32:56,630
oh we got a memory leak or something

00:32:53,360 --> 00:32:58,550
that effect um I could probably go on

00:32:56,630 --> 00:33:01,250
and on but I think my time is actually

00:32:58,550 --> 00:33:04,850
getting close to an end as fast as that

00:33:01,250 --> 00:33:06,890
went so I did want to do a few minutes

00:33:04,850 --> 00:33:08,720
here if anybody has any questions and

00:33:06,890 --> 00:33:14,600
then if not I can actually kind of take

00:33:08,720 --> 00:33:16,690
it offline so if you want to do what

00:33:14,600 --> 00:33:19,880
else can I see besides applications ah

00:33:16,690 --> 00:33:22,460
good question you're right we there's so

00:33:19,880 --> 00:33:24,230
much more that we didn't see one of the

00:33:22,460 --> 00:33:26,330
other well a couple of things one is

00:33:24,230 --> 00:33:28,580
certainly as an operator if you're

00:33:26,330 --> 00:33:31,430
dealing with constant issues with

00:33:28,580 --> 00:33:34,460
getting low on quota space in your organ

00:33:31,430 --> 00:33:36,740
space and we're in space in general you

00:33:34,460 --> 00:33:38,810
can actually look at agra gated stats

00:33:36,740 --> 00:33:41,450
from an organ space perspective so in

00:33:38,810 --> 00:33:45,260
this particular case we can see that we

00:33:41,450 --> 00:33:48,170
have four orgs and at least in the top

00:33:45,260 --> 00:33:50,900
org here that we are dangerously low on

00:33:48,170 --> 00:33:53,150
our memory quota hence why it's red it's

00:33:50,900 --> 00:33:55,580
red when it gets to 90% it's yellow if

00:33:53,150 --> 00:33:58,300
it's at 80% or higher and then it's not

00:33:55,580 --> 00:34:00,590
colored specifically if it's below that

00:33:58,300 --> 00:34:02,540
and then again you can drive down so

00:34:00,590 --> 00:34:04,340
this is no us ECS org so if I press

00:34:02,540 --> 00:34:05,780
ENTER on there tell you the spaces and

00:34:04,340 --> 00:34:08,660
if there's any particular space quota

00:34:05,780 --> 00:34:10,370
and again colorization there the other

00:34:08,660 --> 00:34:12,800
thing that is extremely helpful from a

00:34:10,370 --> 00:34:14,870
debugging perspective is the cell list

00:34:12,800 --> 00:34:17,060
which again all of the information I'm

00:34:14,870 --> 00:34:18,679
showing you here is is available without

00:34:17,060 --> 00:34:20,780
CF top I mean the see if top is not

00:34:18,679 --> 00:34:22,550
doing anything special here it's just

00:34:20,780 --> 00:34:24,860
aggregating all the data that's already

00:34:22,550 --> 00:34:27,470
available to you in a nice humanly

00:34:24,860 --> 00:34:30,230
consumable format so you can do the

00:34:27,470 --> 00:34:32,510
forensics and figure this out as in in

00:34:30,230 --> 00:34:34,490
this case figuring out how many

00:34:32,510 --> 00:34:38,300
containers are currently running on the

00:34:34,490 --> 00:34:40,730
the cell number 66 with IP address dot

00:34:38,300 --> 00:34:43,730
66 but it's sure nice to actually look

00:34:40,730 --> 00:34:45,139
at here and say well there's 37 and how

00:34:43,730 --> 00:34:48,349
many CPUs it has

00:34:45,139 --> 00:34:49,879
and going back to debugging use case is

00:34:48,349 --> 00:34:52,399
that is there any cells that are

00:34:49,879 --> 00:34:53,599
overloaded and if so which one and of

00:34:52,399 --> 00:34:55,549
course the next question is all right I

00:34:53,599 --> 00:34:56,690
can see one of my cells is overloaded

00:34:55,549 --> 00:34:58,549
meaning overloaded from a CPU

00:34:56,690 --> 00:35:00,319
perspective is that you know say 400

00:34:58,549 --> 00:35:02,269
percent again we have four CPUs we go to

00:35:00,319 --> 00:35:04,490
400 percent you're like well okay but

00:35:02,269 --> 00:35:06,380
what's the offending application or what

00:35:04,490 --> 00:35:06,920
container would be the more accurate way

00:35:06,380 --> 00:35:08,119
to say that

00:35:06,920 --> 00:35:09,079
what's the offending a teener that's

00:35:08,119 --> 00:35:10,760
running on that thing that's causing

00:35:09,079 --> 00:35:13,700
that to happen well you can drill down

00:35:10,760 --> 00:35:15,349
so if I actually pick a particular cell

00:35:13,700 --> 00:35:17,779
you press Enter and this will show you

00:35:15,349 --> 00:35:20,569
now this is all of the application

00:35:17,779 --> 00:35:23,000
containers that are running on this

00:35:20,569 --> 00:35:25,130
particular cell and again it's defaulted

00:35:23,000 --> 00:35:26,359
by CP utilization so at the very top of

00:35:25,130 --> 00:35:28,490
that list would immediately show you

00:35:26,359 --> 00:35:30,559
what application is the offending

00:35:28,490 --> 00:35:37,910
application that's causing that cell to

00:35:30,559 --> 00:35:38,119
be highly consumed so second okay fair

00:35:37,910 --> 00:35:41,589
enough

00:35:38,119 --> 00:35:44,680
um so anybody got a one minute question

00:35:41,589 --> 00:35:44,680
go ahead

00:35:54,500 --> 00:35:59,880
carve-out multi-tenancy within different

00:35:57,000 --> 00:36:03,930
networking segments within there can you

00:35:59,880 --> 00:36:10,470
actually see the what diego sells our

00:36:03,930 --> 00:36:11,910
members of which thank you can you

00:36:10,470 --> 00:36:14,550
actually tell what yeah yeah you were in

00:36:11,910 --> 00:36:16,140
there too can you tell which diego cells

00:36:14,550 --> 00:36:17,400
are in which isolation segments from

00:36:16,140 --> 00:36:18,780
here because they were mentioning in the

00:36:17,400 --> 00:36:20,220
initial version of that they weren't

00:36:18,780 --> 00:36:22,440
able to do it so it's good to get like

00:36:20,220 --> 00:36:24,270
the IP address range the IP addresses

00:36:22,440 --> 00:36:27,990
for your diego sales and kind of go

00:36:24,270 --> 00:36:36,330
through that process of it yes yes you

00:36:27,990 --> 00:36:37,710
can thank you so the answer is yes at

00:36:36,330 --> 00:36:41,370
the moment because they have not

00:36:37,710 --> 00:36:43,440
segmented the the logger Gator to

00:36:41,370 --> 00:36:45,090
actually segment the traffic it's all on

00:36:43,440 --> 00:36:47,220
one which is they mentioned that in that

00:36:45,090 --> 00:36:49,620
talk because of that then the answer is

00:36:47,220 --> 00:36:51,330
yes this is an example of now a

00:36:49,620 --> 00:36:55,710
different lab different foundation that

00:36:51,330 --> 00:36:58,260
has to isolation segments spoke aids

00:36:55,710 --> 00:37:00,090
both be as well as still it's also got a

00:36:58,260 --> 00:37:02,490
windows guy and so that actually is

00:37:00,090 --> 00:37:04,560
providing you stats across that whole

00:37:02,490 --> 00:37:07,590
piece and so yeah that information is

00:37:04,560 --> 00:37:08,700
available and then there you can also

00:37:07,590 --> 00:37:10,500
actually see it when you're actually

00:37:08,700 --> 00:37:12,510
scrolling through this list as to what

00:37:10,500 --> 00:37:17,030
isolation segments each application is a

00:37:12,510 --> 00:37:22,249
member of so alright thanks everybody

00:37:17,030 --> 00:37:22,249

YouTube URL: https://www.youtube.com/watch?v=XDY64HKB7CI


