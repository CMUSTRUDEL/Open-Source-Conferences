Title: Accelerate your Digital Transformation
Publication date: 2017-06-22
Playlist: Cloud Foundry Summit Silicon Valley 2017
Description: 
	Accelerate your Digital Transformation [I] - Michael Dawson, IBM   

Digital transformation is more than a buzz phrase. Learn how companies are evolving to Cloud, systematically leveraging existing workloads on their current platforms for competitive advantage. This session explores the transition to Cloud using Node.js technologies and unlocking the power of your existing data sets and what you can expect from the Node.js Foundation and community moving forward. See how the ability to start on known and familiar platforms and environments and to maintain a bridge to data on these platforms using new technologies like Node.js can be one of the keys to success of the move to cloud native. 

Come learn about the work IBM is doing to ensure to that:
- Node.js is available across platforms and environments
- that key tools and capabilities are available (monitoring, post mortem investigation)
- you can leverage existing datasets in your cloud native applications using the IBM SDK for Node.js is based on the Node.js™ open source project. It provides a compatible solution for IBM Power™, Intel® and z Systems™ products that require Node.js functionality and package management.

Michael Dawson
IBM
Senior Software Developer
Ottawa, Ontario
Twitter Tweet
Michael Dawson is an active contributor to Node.js and a CTC member. He contributes to a broad range of community efforts including platform support, build infrastructure, N-API, LTS as well as tools to help the community achieve quality with speed (ex: ci jobs, benchmarking and code coverage reporting). Within IBM he leads the Node.js team driving IBM’s Node.js runtime deliveries and their contributions to Node.js and v8 within the Node and google communities. Past experience includes building IBM's Java runtime, building and operating client facing e-commerce applications, building PKI and symmetric based crypto solutions as well as a number of varied consulting engagements. In his spare time he uses Node.js to automate his home and life for fun.
Captions: 
	00:00:00,000 --> 00:00:03,270
and today I'm going to talk to you about

00:00:01,260 --> 00:00:05,549
accelerating your digital transformation

00:00:03,270 --> 00:00:12,599
if I can just get my mouse here working

00:00:05,549 --> 00:00:13,230
again before I get started little bit

00:00:12,599 --> 00:00:15,599
about myself

00:00:13,230 --> 00:00:17,490
I'm Michael Dawson work for IBM I lead

00:00:15,599 --> 00:00:18,420
the team with an IBM that's focused on

00:00:17,490 --> 00:00:20,699
nodejs

00:00:18,420 --> 00:00:25,430
and supporting both our internal

00:00:20,699 --> 00:00:25,430
projects that bundle nodejs as well

00:00:31,190 --> 00:00:34,520
dancing or adding features to node we're

00:00:33,140 --> 00:00:36,440
gonna do that out in the community and

00:00:34,520 --> 00:00:38,120
for that reason you'll see that you know

00:00:36,440 --> 00:00:40,250
I'm a contributor I'm a member of the

00:00:38,120 --> 00:00:41,930
CTC and TSC which are the boards that

00:00:40,250 --> 00:00:44,480
sort of steer the direction for nodejs

00:00:41,930 --> 00:00:45,680
overall as well as we're very active in

00:00:44,480 --> 00:00:47,540
a whole bunch of the working groups

00:00:45,680 --> 00:00:50,059
where a lot of the work on sort of

00:00:47,540 --> 00:00:52,160
focused topics like benchmarking long

00:00:50,059 --> 00:00:54,710
term support and so close so so forth

00:00:52,160 --> 00:00:56,600
take place our team has also done some

00:00:54,710 --> 00:01:00,080
interesting things like porting v8 if

00:00:56,600 --> 00:01:01,760
you know nodejs v8 is the core

00:01:00,080 --> 00:01:05,269
JavaScript engine that supports it and

00:01:01,760 --> 00:01:08,600
we've done work to port those to PowerPC

00:01:05,269 --> 00:01:10,100
and s/390 architectures and really it's

00:01:08,600 --> 00:01:11,050
much more than a regular port where you

00:01:10,100 --> 00:01:14,120
start ported over

00:01:11,050 --> 00:01:15,710
v8 includes a compiler so basically

00:01:14,120 --> 00:01:17,420
every week we have to keep up with all

00:01:15,710 --> 00:01:19,820
the changes that are being done in that

00:01:17,420 --> 00:01:22,510
just-in-time compiler to keep those

00:01:19,820 --> 00:01:22,510
ports going

00:01:33,330 --> 00:01:35,390
you

00:01:48,680 --> 00:01:53,340
that and getting it to cloud native

00:01:51,420 --> 00:01:55,470
deployments so for example in Cloud

00:01:53,340 --> 00:01:57,150
Foundry as part of that I'm going to

00:01:55,470 --> 00:01:58,350
touch on the locality of data because

00:01:57,150 --> 00:02:00,360
often you know if you have an existing

00:01:58,350 --> 00:02:01,800
data set or existing applications that's

00:02:00,360 --> 00:02:04,770
one of the things that's hard to just

00:02:01,800 --> 00:02:06,660
move out into the cloud once I've

00:02:04,770 --> 00:02:08,190
identified a number of those you know

00:02:06,660 --> 00:02:10,500
that the potential obstacles on that

00:02:08,190 --> 00:02:12,030
journey I'm then going to give you some

00:02:10,500 --> 00:02:14,100
insight into the work that we've been

00:02:12,030 --> 00:02:16,320
doing out in the nodejs community to try

00:02:14,100 --> 00:02:18,480
and sort of work around those or find

00:02:16,320 --> 00:02:21,270
solutions to the obstacles you might run

00:02:18,480 --> 00:02:25,140
into and finally I'll just end up with a

00:02:21,270 --> 00:02:26,820
summary and wrap up we've gone over so

00:02:25,140 --> 00:02:29,610
some common adoption parents you know we

00:02:26,820 --> 00:02:31,830
often see you know nodejs almost coming

00:02:29,610 --> 00:02:34,790
in through the back door you know a

00:02:31,830 --> 00:02:37,260
developer comes up with a nice solution

00:02:34,790 --> 00:02:38,820
not necessarily an official project but

00:02:37,260 --> 00:02:41,100
comes up with something that solves a

00:02:38,820 --> 00:02:42,810
problem for the business shows that it

00:02:41,100 --> 00:02:44,480
goes up the executive chain and it's

00:02:42,810 --> 00:02:46,739
like yeah we really want to do this and

00:02:44,480 --> 00:02:48,090
the decision is well okay we're not

00:02:46,739 --> 00:02:49,260
going to re-implement that and it

00:02:48,090 --> 00:02:51,120
actually ends up going into production

00:02:49,260 --> 00:02:53,550
so it kind of sneaks into the back door

00:02:51,120 --> 00:02:55,440
and that initial success then starts to

00:02:53,550 --> 00:02:58,470
more and more use of noches within the

00:02:55,440 --> 00:03:01,260
enterprise sort of the next level we see

00:02:58,470 --> 00:03:03,500
is that people use it as a first step

00:03:01,260 --> 00:03:06,330
internally so they use it to expose

00:03:03,500 --> 00:03:08,820
internal api's or sites for internal use

00:03:06,330 --> 00:03:13,410
as a good way to sort of become familiar

00:03:08,820 --> 00:03:14,640
with the technology and you know use it

00:03:13,410 --> 00:03:16,500
for the first time without having to

00:03:14,640 --> 00:03:19,320
worry too much about external exposure

00:03:16,500 --> 00:03:21,900
and then the next level is that people

00:03:19,320 --> 00:03:25,519
start then using it to expose datasets

00:03:21,900 --> 00:03:27,570
or existing system so provides services

00:03:25,519 --> 00:03:29,010
where they're wrapping something that

00:03:27,570 --> 00:03:30,870
already exists and sort of provide an

00:03:29,010 --> 00:03:32,400
external or new way to get at that data

00:03:30,870 --> 00:03:35,459
safe through mobile or something or

00:03:32,400 --> 00:03:36,989
something else of course if there's

00:03:35,459 --> 00:03:38,250
always greenfield development where

00:03:36,989 --> 00:03:41,100
people just start with a whole new idea

00:03:38,250 --> 00:03:42,450
or you're in a start-up that's obviously

00:03:41,100 --> 00:03:44,250
easier and that you don't have to deal

00:03:42,450 --> 00:03:47,250
with existing data and infrastructure

00:03:44,250 --> 00:03:49,470
and all that so most of the obstacles

00:03:47,250 --> 00:03:50,850
I'll be talking about are more likely in

00:03:49,470 --> 00:03:51,870
one of the three cases where you know

00:03:50,850 --> 00:03:53,910
you're starting with an existing

00:03:51,870 --> 00:03:55,590
enterprise you have systems and data and

00:03:53,910 --> 00:03:58,160
you want to continue to leverage those

00:03:55,590 --> 00:03:58,160
as you move forward

00:03:58,310 --> 00:04:02,430
vocality of data turns out to be an

00:04:00,540 --> 00:04:04,920
issue one of the you know one of the

00:04:02,430 --> 00:04:07,290
important issues because moving the data

00:04:04,920 --> 00:04:08,580
can be hard it may just be that you have

00:04:07,290 --> 00:04:10,500
you know it's sensitive it's

00:04:08,580 --> 00:04:12,840
confidential data you don't want to move

00:04:10,500 --> 00:04:14,520
it out into the cloud there may even be

00:04:12,840 --> 00:04:15,870
regulation that prevents you from doing

00:04:14,520 --> 00:04:18,180
that so if you work in the federal

00:04:15,870 --> 00:04:19,950
government or certain industries it may

00:04:18,180 --> 00:04:21,329
be that your data has to be located in a

00:04:19,950 --> 00:04:25,200
particular place and you can't easily

00:04:21,329 --> 00:04:27,300
move it you may even be using a legacy

00:04:25,200 --> 00:04:29,790
data store so you know even though the

00:04:27,300 --> 00:04:30,930
cloud and cloud foundry is fairly rich

00:04:29,790 --> 00:04:33,540
in terms of the different data bases

00:04:30,930 --> 00:04:35,010
that it supports maybe you know the the

00:04:33,540 --> 00:04:37,890
legacy database system they're using

00:04:35,010 --> 00:04:39,630
just isn't available there and finally

00:04:37,890 --> 00:04:42,570
it just takes effort so if you haven't

00:04:39,630 --> 00:04:44,280
have an established data store moving it

00:04:42,570 --> 00:04:46,070
somewhere else you know the effort to do

00:04:44,280 --> 00:04:48,900
that may just be a roadblock in itself

00:04:46,070 --> 00:04:50,400
the other thing is even if you if you

00:04:48,900 --> 00:04:53,070
know if you're in the situation you

00:04:50,400 --> 00:04:56,400
can't move your data then the locality

00:04:53,070 --> 00:04:58,830
of the data can affect performance so

00:04:56,400 --> 00:05:02,040
one of the things we did is we put

00:04:58,830 --> 00:05:03,330
together a sample application where

00:05:02,040 --> 00:05:05,400
we're using day-trader which is a

00:05:03,330 --> 00:05:08,750
benchmark that's often used to benchmark

00:05:05,400 --> 00:05:11,580
java systems and we add it to that

00:05:08,750 --> 00:05:15,300
benchmarking infrastructure some new

00:05:11,580 --> 00:05:17,160
nodejs layers to basically provide a new

00:05:15,300 --> 00:05:18,900
way to get at some of that data that's

00:05:17,160 --> 00:05:21,150
one of the common use cases we see you

00:05:18,900 --> 00:05:24,090
have a system of record and you want to

00:05:21,150 --> 00:05:26,820
provide a way to you know get input

00:05:24,090 --> 00:05:29,760
through twitter be able to show data in

00:05:26,820 --> 00:05:32,729
on mobile through some some moves

00:05:29,760 --> 00:05:34,740
through some new sites and so basically

00:05:32,729 --> 00:05:37,560
you know use use nodejs as a new way to

00:05:34,740 --> 00:05:39,330
view into that existing system and for

00:05:37,560 --> 00:05:41,460
this example you know we we did that

00:05:39,330 --> 00:05:44,370
both with running nodejs

00:05:41,460 --> 00:05:45,990
on an external ax 86 system so that you

00:05:44,370 --> 00:05:49,290
know basically you had two systems your

00:05:45,990 --> 00:05:51,900
legacy system and your your new no GS

00:05:49,290 --> 00:05:53,520
front-end and then we we ran it the

00:05:51,900 --> 00:05:56,340
other way where we actually ran nodejs

00:05:53,520 --> 00:05:57,630
on the legacy hardware as well and we

00:05:56,340 --> 00:05:59,220
measured the difference and you know we

00:05:57,630 --> 00:06:00,419
could see that you know in this case we

00:05:59,220 --> 00:06:02,130
saw two and a half times better

00:06:00,419 --> 00:06:05,000
throughput by having co-located your

00:06:02,130 --> 00:06:08,330
nodejs application and the data and the

00:06:05,000 --> 00:06:10,560
the response times were 60 60 % better

00:06:08,330 --> 00:06:12,980
and so really

00:06:10,560 --> 00:06:14,760
you know being able to run nodejs

00:06:12,980 --> 00:06:16,860
co-located with your data can actually

00:06:14,760 --> 00:06:18,330
have a significant impact on the

00:06:16,860 --> 00:06:23,190
performance and effectiveness of your

00:06:18,330 --> 00:06:24,270
overall application so having said that

00:06:23,190 --> 00:06:25,889
you know some of the potential

00:06:24,270 --> 00:06:27,870
roadblocks if you're starting on one of

00:06:25,889 --> 00:06:30,210
those initial three ways of adopting

00:06:27,870 --> 00:06:31,710
nodejs is you know if you have an

00:06:30,210 --> 00:06:32,880
existing environment and existing

00:06:31,710 --> 00:06:34,590
standard within your development

00:06:32,880 --> 00:06:36,780
organization if you have to change all

00:06:34,590 --> 00:06:39,419
of that to get started that's a barrier

00:06:36,780 --> 00:06:41,970
so it's important to be able to start to

00:06:39,419 --> 00:06:43,710
use node experiment build up experience

00:06:41,970 --> 00:06:45,120
with the tools you're already familiar

00:06:43,710 --> 00:06:47,070
with so if you're using a particular

00:06:45,120 --> 00:06:48,419
operating system you're using a

00:06:47,070 --> 00:06:49,470
particular set of hardware if you can

00:06:48,419 --> 00:06:50,880
start on that hardware and operating

00:06:49,470 --> 00:06:52,830
system that's going to help you get

00:06:50,880 --> 00:06:55,229
started in the journey even if your end

00:06:52,830 --> 00:06:59,520
goal is cloud deployment on you know a

00:06:55,229 --> 00:07:01,650
CF type deployment the next thing is you

00:06:59,520 --> 00:07:03,690
know for traditional applications we're

00:07:01,650 --> 00:07:05,070
familiar with using products and

00:07:03,690 --> 00:07:07,200
services that have a certain level of

00:07:05,070 --> 00:07:10,710
support so you want to make sure like in

00:07:07,200 --> 00:07:12,389
the case of nodejs that you have good

00:07:10,710 --> 00:07:13,830
confidence that the diversions you're

00:07:12,389 --> 00:07:14,970
using and we're gonna simply supported

00:07:13,830 --> 00:07:17,550
how long they're going to be supported

00:07:14,970 --> 00:07:19,710
for and that they're they're gonna be

00:07:17,550 --> 00:07:20,550
stable and I'll talk about you know some

00:07:19,710 --> 00:07:22,370
of the things we're doing just to

00:07:20,550 --> 00:07:24,630
provide that as well

00:07:22,370 --> 00:07:26,160
unfortunately things will go wrong so if

00:07:24,630 --> 00:07:28,050
you're have your applications in

00:07:26,160 --> 00:07:29,370
production you want to know that if

00:07:28,050 --> 00:07:32,419
things do go wrong you're going to have

00:07:29,370 --> 00:07:34,890
the tools to be able to investigate and

00:07:32,419 --> 00:07:36,479
resolve those problems so monitoring and

00:07:34,890 --> 00:07:38,010
problem investigation is important to

00:07:36,479 --> 00:07:40,530
have the infrastructure framework and

00:07:38,010 --> 00:07:42,840
tools that you need and then there's

00:07:40,530 --> 00:07:44,310
just sort of a certain just as important

00:07:42,840 --> 00:07:46,470
but more of a sort of baseline set of

00:07:44,310 --> 00:07:47,400
requirements where you know for doing a

00:07:46,470 --> 00:07:49,830
real application we need

00:07:47,400 --> 00:07:52,440
internationalization we need to know our

00:07:49,830 --> 00:07:54,389
applications to be secure we want to

00:07:52,440 --> 00:07:56,729
know that the the infrastructure we

00:07:54,389 --> 00:07:58,889
relying on is is apply quality and

00:07:56,729 --> 00:08:00,360
stable and finally we want it to be

00:07:58,889 --> 00:08:01,889
performant as well so that we maximize

00:08:00,360 --> 00:08:05,240
the use of the hardware and

00:08:01,889 --> 00:08:05,240
infrastructure that we're investing in

00:08:05,660 --> 00:08:09,360
so before I get into the things that

00:08:07,919 --> 00:08:11,190
we're acting actually you know working

00:08:09,360 --> 00:08:12,840
on in the community to address those

00:08:11,190 --> 00:08:14,720
issues just a little bit about IBM's

00:08:12,840 --> 00:08:17,039
involvement in the community itself

00:08:14,720 --> 00:08:19,560
we've been very active right from the

00:08:17,039 --> 00:08:21,730
beginning IBM was one of the platinum

00:08:19,560 --> 00:08:23,800
sponsors in terms of the

00:08:21,730 --> 00:08:26,290
the initial platinum sponsors for the

00:08:23,800 --> 00:08:28,270
foundation and we helped you know sort

00:08:26,290 --> 00:08:29,800
of pull that together we have nine

00:08:28,270 --> 00:08:31,720
collaborators so these are people who

00:08:29,800 --> 00:08:34,480
can like commit code review pull

00:08:31,720 --> 00:08:35,980
requests we have two CT CT SC members

00:08:34,480 --> 00:08:37,600
which I said are the Pete are the the

00:08:35,980 --> 00:08:39,700
boards that basically chart the

00:08:37,600 --> 00:08:41,710
direction for no resolve conflicts

00:08:39,700 --> 00:08:43,990
we're active in many of the working

00:08:41,710 --> 00:08:46,240
groups so if you or you know have an

00:08:43,990 --> 00:08:49,480
interest in things like benchmarking or

00:08:46,240 --> 00:08:50,530
api's or the build infrastructure you'll

00:08:49,480 --> 00:08:53,590
see that you know we're actively

00:08:50,530 --> 00:08:55,240
involved in there and you know these are

00:08:53,590 --> 00:08:56,320
the people in the faces so if you go to

00:08:55,240 --> 00:08:58,900
github you're interested getting

00:08:56,320 --> 00:09:01,270
involved and you see us it's a very open

00:08:58,900 --> 00:09:05,590
and friendly community so just say hi

00:09:01,270 --> 00:09:08,020
and get involved so the first thing that

00:09:05,590 --> 00:09:10,090
we focused on was the the environment we

00:09:08,020 --> 00:09:12,360
wanted people to have the choice of

00:09:10,090 --> 00:09:14,860
platforms when they came to use nodejs

00:09:12,360 --> 00:09:17,370
so we worked hard to make sure that you

00:09:14,860 --> 00:09:20,530
know our IBM platforms are supported so

00:09:17,370 --> 00:09:23,290
binaries for you know Linux on P Linux

00:09:20,530 --> 00:09:24,850
on Z as well as AI IX are now all

00:09:23,290 --> 00:09:28,990
available on the community download

00:09:24,850 --> 00:09:30,910
sites we shipped earlier you know as we

00:09:28,990 --> 00:09:31,660
worked on that we shipped the IBM SDK

00:09:30,910 --> 00:09:34,570
for nodejs

00:09:31,660 --> 00:09:38,380
since 2013 and all the way back to node

00:09:34,570 --> 00:09:40,180
zero ten and we're currently working on

00:09:38,380 --> 00:09:42,100
support even for z/os so if you have

00:09:40,180 --> 00:09:44,170
some data that's located on z/os and you

00:09:42,100 --> 00:09:45,430
want to leverage that there's already a

00:09:44,170 --> 00:09:46,780
tech preview and actually this is a

00:09:45,430 --> 00:09:48,400
little out of date we have a beta that's

00:09:46,780 --> 00:09:51,340
available now so if you want to try that

00:09:48,400 --> 00:09:52,810
out it's already there but more in

00:09:51,340 --> 00:09:54,280
general so you know this we of course

00:09:52,810 --> 00:09:56,230
focused on our platforms but we also

00:09:54,280 --> 00:09:58,420
have and are involved in just generally

00:09:56,230 --> 00:10:02,260
supporting the broad platform support

00:09:58,420 --> 00:10:04,120
that no GS has you know including things

00:10:02,260 --> 00:10:05,530
like even alpine you know some of our

00:10:04,120 --> 00:10:07,150
internal groups are saying hey we'd like

00:10:05,530 --> 00:10:08,650
to build it to play in smaller

00:10:07,150 --> 00:10:10,090
containers so that's something that we

00:10:08,650 --> 00:10:12,310
know we're looking to get involved in to

00:10:10,090 --> 00:10:14,110
help facilitate to make sure that you

00:10:12,310 --> 00:10:15,310
know when you want to get started you

00:10:14,110 --> 00:10:16,600
can just start with the existing

00:10:15,310 --> 00:10:19,500
environment and platforms that you're

00:10:16,600 --> 00:10:19,500
you're familiar with

00:10:19,520 --> 00:10:23,120
the next thing is you know if you if

00:10:21,380 --> 00:10:24,470
you've started development we want to

00:10:23,120 --> 00:10:26,320
make sure that you have deployment

00:10:24,470 --> 00:10:29,450
choice so you want to be able to deploy

00:10:26,320 --> 00:10:31,100
maybe you want to start locally and then

00:10:29,450 --> 00:10:34,010
be able to deploy to the cloud once

00:10:31,100 --> 00:10:35,570
you're ready for that so just a few

00:10:34,010 --> 00:10:37,100
things that you know we recommend on

00:10:35,570 --> 00:10:39,800
that front is that you know when you're

00:10:37,100 --> 00:10:42,709
developing to develop for deployment

00:10:39,800 --> 00:10:44,830
independence don't don't you know sort

00:10:42,709 --> 00:10:47,930
of tightly bundle in dependencies on

00:10:44,830 --> 00:10:51,260
local infrastructure or a particular

00:10:47,930 --> 00:10:53,450
logging mechanism plan to leverage the

00:10:51,260 --> 00:10:54,920
services that are available in the

00:10:53,450 --> 00:10:56,870
infrastructure for you so you know

00:10:54,920 --> 00:10:58,550
environments like Cloud Foundry give you

00:10:56,870 --> 00:11:01,250
ways to do logging they give you ways to

00:10:58,550 --> 00:11:02,959
do load balancing and scaling in and out

00:11:01,250 --> 00:11:04,310
so don't build those into your

00:11:02,959 --> 00:11:06,110
application make sure you plan to

00:11:04,310 --> 00:11:07,520
leverage whatever infrastructure in that

00:11:06,110 --> 00:11:09,410
way you know you can start internal if

00:11:07,520 --> 00:11:12,370
you want and then you can go externally

00:11:09,410 --> 00:11:14,839
later on twelve the twelve factor apps

00:11:12,370 --> 00:11:17,120
list twelve good ways and sort of

00:11:14,839 --> 00:11:19,339
guidance twelve things to follow if you

00:11:17,120 --> 00:11:21,770
want to sort of fall into that that that

00:11:19,339 --> 00:11:24,620
makes a pattern in terms of providing

00:11:21,770 --> 00:11:27,470
the the deployment choice you know as a

00:11:24,620 --> 00:11:29,810
company through bluemix we provide you

00:11:27,470 --> 00:11:31,850
know a Cloud Foundry opt deployment

00:11:29,810 --> 00:11:33,770
option that supports Cloud Foundry end

00:11:31,850 --> 00:11:35,779
and even kubernetes docker type

00:11:33,770 --> 00:11:37,870
deployments and you can get that in

00:11:35,779 --> 00:11:40,520
flavors which are you know public cloud

00:11:37,870 --> 00:11:42,079
cloud which is dedicated to yourself or

00:11:40,520 --> 00:11:43,850
even managed locally on your own

00:11:42,079 --> 00:11:46,550
hardware if you don't want to go out as

00:11:43,850 --> 00:11:49,100
well of course the service type type

00:11:46,550 --> 00:11:50,839
things and we're also working on some

00:11:49,100 --> 00:11:54,470
tools to make it a little bit easier to

00:11:50,839 --> 00:11:56,240
get deployment independence one of the

00:11:54,470 --> 00:11:58,550
things we recent were recently worked on

00:11:56,240 --> 00:12:00,680
were pattern generators which would

00:11:58,550 --> 00:12:01,910
basically give you the scaffolding for

00:12:00,680 --> 00:12:04,550
the application that you wanted to

00:12:01,910 --> 00:12:06,170
develop the throw so using the DX dev

00:12:04,550 --> 00:12:09,079
command line which is an extension of

00:12:06,170 --> 00:12:11,570
the cloud foundry command line you can

00:12:09,079 --> 00:12:13,279
basically select a pattern for the type

00:12:11,570 --> 00:12:15,980
of application you want to develop and

00:12:13,279 --> 00:12:17,209
then based on that pattern it asks you

00:12:15,980 --> 00:12:18,740
what kind of services do you want to

00:12:17,209 --> 00:12:21,290
plug in authentication do you want to

00:12:18,740 --> 00:12:23,570
plug in databases and it will generate

00:12:21,290 --> 00:12:24,740
you basically the scaffolding for the

00:12:23,570 --> 00:12:26,660
application that you can put in

00:12:24,740 --> 00:12:28,430
production and the nice thing about the

00:12:26,660 --> 00:12:29,600
way it generates that is it's generated

00:12:28,430 --> 00:12:31,459
so that you can take advantage of

00:12:29,600 --> 00:12:32,580
services locally run and you know test

00:12:31,459 --> 00:12:34,620
it locally in a darkroom

00:12:32,580 --> 00:12:36,839
or you can push it up to Cloud Foundry

00:12:34,620 --> 00:12:38,370
bluemix type installations if you're

00:12:36,839 --> 00:12:40,230
interested in that that's a link that

00:12:38,370 --> 00:12:44,339
there's a very good blog about the whole

00:12:40,230 --> 00:12:45,899
concept and how does get started the

00:12:44,339 --> 00:12:48,720
next thing the next obstacle I talked

00:12:45,899 --> 00:12:50,550
about was long-term support so you know

00:12:48,720 --> 00:12:51,899
if I have an application in production

00:12:50,550 --> 00:12:53,880
and I'm running on a particular version

00:12:51,899 --> 00:12:56,339
of node I want to know that I'm gonna

00:12:53,880 --> 00:12:57,990
have support for that version and not

00:12:56,339 --> 00:13:00,000
have to say update two months from now

00:12:57,990 --> 00:13:02,480
so one of the things we've worked hard

00:13:00,000 --> 00:13:05,550
in the community is on the long term

00:13:02,480 --> 00:13:07,980
support strategy when the foundation

00:13:05,550 --> 00:13:10,410
came together and I ojs and Jess came

00:13:07,980 --> 00:13:11,970
together there really wasn't a plan for

00:13:10,410 --> 00:13:14,160
you know how long are the binaries that

00:13:11,970 --> 00:13:16,380
we put out they're gonna be supported

00:13:14,160 --> 00:13:18,120
and have updates and we worked in the

00:13:16,380 --> 00:13:21,450
community to develop this one where

00:13:18,120 --> 00:13:23,399
basically there's a plan where every six

00:13:21,450 --> 00:13:25,320
months a current release is cut and

00:13:23,399 --> 00:13:28,230
every alternating current release

00:13:25,320 --> 00:13:30,750
becomes a long-term release so no date

00:13:28,230 --> 00:13:33,630
was just announced about a couple weeks

00:13:30,750 --> 00:13:35,670
ago as the next current six months six

00:13:33,630 --> 00:13:38,579
months from then roughly in October it's

00:13:35,670 --> 00:13:40,649
going to become the next LTS release and

00:13:38,579 --> 00:13:42,839
we've had you know two years ago we had

00:13:40,649 --> 00:13:45,149
no GS four in October

00:13:42,839 --> 00:13:46,950
no GS six the there you know one year

00:13:45,149 --> 00:13:50,149
ago in October and we're gonna have no

00:13:46,950 --> 00:13:52,260
GS eight in October and you get about

00:13:50,149 --> 00:13:53,910
thirty months of support there's a

00:13:52,260 --> 00:13:55,380
there's an initial 18 months of very

00:13:53,910 --> 00:13:57,240
active support where you get lots of

00:13:55,380 --> 00:13:59,940
changes and fixes and even some features

00:13:57,240 --> 00:14:02,070
going in followed by a shorter 12-month

00:13:59,940 --> 00:14:04,290
maintenance phase where it's really just

00:14:02,070 --> 00:14:06,630
critical security fixes and things that

00:14:04,290 --> 00:14:08,040
are that are really important but the

00:14:06,630 --> 00:14:10,200
key thing here of you know what we when

00:14:08,040 --> 00:14:11,730
we got involved are and and what I think

00:14:10,200 --> 00:14:13,440
we're proud of what's been achieved here

00:14:11,730 --> 00:14:15,810
is there's very regular and predictable

00:14:13,440 --> 00:14:18,839
releases every year you have a new LTS

00:14:15,810 --> 00:14:21,089
release that releases you know supported

00:14:18,839 --> 00:14:22,709
by 30 months and we now have a couple

00:14:21,089 --> 00:14:26,010
years of history of the releases coming

00:14:22,709 --> 00:14:28,230
out on that predictable and and sort of

00:14:26,010 --> 00:14:30,089
consistent pattern which is it which is

00:14:28,230 --> 00:14:34,709
as an enterprise this is something that

00:14:30,089 --> 00:14:36,180
I think most people are looking the next

00:14:34,709 --> 00:14:37,769
thing is you know if I have my I've got

00:14:36,180 --> 00:14:40,170
my long-term releases I have them in

00:14:37,769 --> 00:14:42,149
production when things go wrong I really

00:14:40,170 --> 00:14:44,279
want to know that I can actually dive in

00:14:42,149 --> 00:14:46,110
and figure out what's going on

00:14:44,279 --> 00:14:49,920
I was involved

00:14:46,110 --> 00:14:51,480
on our Java team for 10-12 years and you

00:14:49,920 --> 00:14:53,459
know we found there really three key

00:14:51,480 --> 00:14:55,740
tools that you needed to figure out a

00:14:53,459 --> 00:14:59,519
lot of the gnarly problems um the first

00:14:55,740 --> 00:15:02,820
one is is is like a first data capture

00:14:59,519 --> 00:15:04,890
easily consumable easy to create human

00:15:02,820 --> 00:15:06,450
readable that gives you a you know quite

00:15:04,890 --> 00:15:09,329
a lot of information about what's going

00:15:06,450 --> 00:15:11,100
on that you can quickly look at and

00:15:09,329 --> 00:15:12,570
figure out as you know often what's

00:15:11,100 --> 00:15:14,130
going on just with that that one piece

00:15:12,570 --> 00:15:17,130
of information if you're familiar with

00:15:14,130 --> 00:15:18,899
Java that's called a Java core and know

00:15:17,130 --> 00:15:20,610
didn't have an equivalent so our team

00:15:18,899 --> 00:15:22,019
got involved and we helped the community

00:15:20,610 --> 00:15:23,850
to develop Notre part which I'll show

00:15:22,019 --> 00:15:25,500
you a picture of which serves the same

00:15:23,850 --> 00:15:26,700
purpose you can easily generate and it

00:15:25,500 --> 00:15:28,079
gives you lots of information what's

00:15:26,700 --> 00:15:30,839
going on that's often enough to solve

00:15:28,079 --> 00:15:32,250
the problem the next piece is heap heap

00:15:30,839 --> 00:15:34,440
dump generation so we're still working

00:15:32,250 --> 00:15:35,880
in the community to make it easy to

00:15:34,440 --> 00:15:37,380
generate heap dumps it's something I'd

00:15:35,880 --> 00:15:41,190
like to see bundled right in with the

00:15:37,380 --> 00:15:43,410
core node runtime itself and then core

00:15:41,190 --> 00:15:44,850
inspection where if your your

00:15:43,410 --> 00:15:46,860
application fails in production you

00:15:44,850 --> 00:15:48,209
can't really stop and attach a debugger

00:15:46,860 --> 00:15:49,560
or that kind of stuff you want to

00:15:48,209 --> 00:15:51,329
basically just generate a core file

00:15:49,560 --> 00:15:53,699
which is an image of the memory of what

00:15:51,329 --> 00:15:55,380
was running at the time and then look be

00:15:53,699 --> 00:15:57,810
able to look at that and figure out what

00:15:55,380 --> 00:15:59,130
the problem was from that and I'll talk

00:15:57,810 --> 00:16:01,680
a bit more about that as well

00:15:59,130 --> 00:16:03,329
so just on node report you know

00:16:01,680 --> 00:16:05,519
basically it gives you a human readable

00:16:03,329 --> 00:16:07,230
summary of the state of your nodejs

00:16:05,519 --> 00:16:11,100
runtime in its application it gives you

00:16:07,230 --> 00:16:13,079
things a summary of the events versions

00:16:11,100 --> 00:16:14,610
of nodejs and even some of the modules

00:16:13,079 --> 00:16:16,800
that are running inside you get things

00:16:14,610 --> 00:16:19,470
like Java and native stack traces it

00:16:16,800 --> 00:16:20,850
tells you things like your OSU limit

00:16:19,470 --> 00:16:22,800
settings so if somebody is set your you

00:16:20,850 --> 00:16:24,360
limit to low for say the number of file

00:16:22,800 --> 00:16:25,890
handles and your application isn't being

00:16:24,360 --> 00:16:27,420
able to open new files well maybe that's

00:16:25,890 --> 00:16:29,550
a pretty good example of what's going on

00:16:27,420 --> 00:16:32,040
that's one in particular you know the

00:16:29,550 --> 00:16:33,120
limits we've seen a lot of times you

00:16:32,040 --> 00:16:35,100
look at those and you can immediately

00:16:33,120 --> 00:16:36,510
figure out what's going on if somebody

00:16:35,100 --> 00:16:39,120
just hasn't configured something right

00:16:36,510 --> 00:16:41,190
so no report is is something I'd

00:16:39,120 --> 00:16:42,990
recommend it's bundled into the IBM sdk

00:16:41,190 --> 00:16:46,440
for node.js which is what's available in

00:16:42,990 --> 00:16:48,480
in bluemix our cloud foundry our product

00:16:46,440 --> 00:16:50,339
that supports cloud foundry and we're

00:16:48,480 --> 00:16:51,240
working in the community to have a sort

00:16:50,339 --> 00:16:55,010
of a track where it's going to be

00:16:51,240 --> 00:16:55,010
bundled into the core runtimes

00:16:55,310 --> 00:16:59,580
in terms of heap generation there's a

00:16:57,720 --> 00:17:02,610
heap dump module written by VIN Nordhaus

00:16:59,580 --> 00:17:06,020
one of my co-workers that lets you

00:17:02,610 --> 00:17:08,370
generate a heap dump programmatically

00:17:06,020 --> 00:17:09,959
you can then open those core dumps in

00:17:08,370 --> 00:17:11,939
the chrome developer tools and it has

00:17:09,959 --> 00:17:14,370
some nice screens where you can actually

00:17:11,939 --> 00:17:16,140
tell the difference the GC state before

00:17:14,370 --> 00:17:17,579
you know if you have sorry if you have

00:17:16,140 --> 00:17:18,839
multiple heap dumps you can tell the

00:17:17,579 --> 00:17:20,250
difference between two of those heap

00:17:18,839 --> 00:17:22,439
dumps so if you take three of them in a

00:17:20,250 --> 00:17:23,760
row you can see a way to sack I'm

00:17:22,439 --> 00:17:25,439
getting more and more of these

00:17:23,760 --> 00:17:27,000
particular types of objects so that's

00:17:25,439 --> 00:17:29,340
probably that I'm leaking those kinds of

00:17:27,000 --> 00:17:30,929
objects there's still some challenges in

00:17:29,340 --> 00:17:32,910
that you know you need to modify your

00:17:30,929 --> 00:17:34,800
application to get those those dumps

00:17:32,910 --> 00:17:36,390
although a node report does give you an

00:17:34,800 --> 00:17:38,850
option to generate some of those on

00:17:36,390 --> 00:17:40,410
certain events like out an unhandled

00:17:38,850 --> 00:17:42,360
exception route of memory so there's a

00:17:40,410 --> 00:17:43,710
little bit of help there there generally

00:17:42,360 --> 00:17:45,809
it's slow to generate because if you

00:17:43,710 --> 00:17:47,100
have a very big you know if you're using

00:17:45,809 --> 00:17:48,720
a lot of memory it's gonna take a long

00:17:47,100 --> 00:17:51,000
time to generate a cord that captures

00:17:48,720 --> 00:17:52,350
all that and it's kind of limited

00:17:51,000 --> 00:17:53,760
content so we're still working on that

00:17:52,350 --> 00:17:55,740
front in the community in the

00:17:53,760 --> 00:17:58,410
post-mortem working group to try and you

00:17:55,740 --> 00:18:01,160
know improve to make it just easier to

00:17:58,410 --> 00:18:04,650
generate them consume them and so forth

00:18:01,160 --> 00:18:06,120
and finally core inspection so if you're

00:18:04,650 --> 00:18:07,590
really stuck and all you have is that

00:18:06,120 --> 00:18:10,920
core file there's been a few solutions

00:18:07,590 --> 00:18:12,900
over time so MDB was a basically a

00:18:10,920 --> 00:18:16,679
debugger available from joint who was

00:18:12,900 --> 00:18:18,300
one of the early Stewart's of node.js it

00:18:16,679 --> 00:18:19,830
had a few limitations and that you could

00:18:18,300 --> 00:18:21,240
only run it on smart OS so if you're

00:18:19,830 --> 00:18:22,710
running in production you'd have to take

00:18:21,240 --> 00:18:23,940
your core files from Linux move them

00:18:22,710 --> 00:18:26,940
over a different system do some

00:18:23,940 --> 00:18:29,490
inspection IBM had a product we called

00:18:26,940 --> 00:18:31,620
ID de which allowed you to do similar

00:18:29,490 --> 00:18:33,900
things basically take core files open

00:18:31,620 --> 00:18:36,600
them up both of them understood the

00:18:33,900 --> 00:18:37,920
structure of v8 and node structures so

00:18:36,600 --> 00:18:41,100
you could basically say it like print

00:18:37,920 --> 00:18:42,809
out this object giving you know a C

00:18:41,100 --> 00:18:44,130
pointer and it would interpret the whole

00:18:42,809 --> 00:18:46,340
structure and say like okay it's a

00:18:44,130 --> 00:18:49,320
string here's the contents of the string

00:18:46,340 --> 00:18:51,300
it could do things like find roots and

00:18:49,320 --> 00:18:53,280
all all sorts of very useful things with

00:18:51,300 --> 00:18:54,960
a tool that a tool can do if it has

00:18:53,280 --> 00:18:57,809
enough knowledge of what's going on

00:18:54,960 --> 00:19:00,270
unfortunately idd had some technology

00:18:57,809 --> 00:19:01,560
that we couldn't open source so we're

00:19:00,270 --> 00:19:04,140
currently working in the community to

00:19:01,560 --> 00:19:04,950
standardize on ll node which is an open

00:19:04,140 --> 00:19:07,290
source debugger

00:19:04,950 --> 00:19:09,090
well actually LOD B is the open source

00:19:07,290 --> 00:19:10,800
bugger and ll node is a plugin that goes

00:19:09,090 --> 00:19:13,710
on top of that so that you can get those

00:19:10,800 --> 00:19:15,810
same things in a solution that will be

00:19:13,710 --> 00:19:18,210
standard and open source for all no js'

00:19:15,810 --> 00:19:19,440
users the end goal really is that you

00:19:18,210 --> 00:19:22,710
know you'll be able to create your core

00:19:19,440 --> 00:19:25,320
dump on any platform use ll DB with LL

00:19:22,710 --> 00:19:26,940
node to read in those core files it'll

00:19:25,320 --> 00:19:30,720
have the understanding and it already

00:19:26,940 --> 00:19:32,250
reuses the metadata that's in nodejs in

00:19:30,720 --> 00:19:35,580
terms of the structures of v8 the

00:19:32,250 --> 00:19:36,840
structures of node and has command you

00:19:35,580 --> 00:19:38,760
know command-line options and the

00:19:36,840 --> 00:19:40,590
debugger to print those out but we'd

00:19:38,760 --> 00:19:41,610
also like to build in and we have you

00:19:40,590 --> 00:19:43,410
know have started working on a

00:19:41,610 --> 00:19:45,300
JavaScript API that would be layered on

00:19:43,410 --> 00:19:47,640
top of that so that people could even

00:19:45,300 --> 00:19:49,620
use JavaScript to write things that are

00:19:47,640 --> 00:19:51,480
going to introspect the the core files

00:19:49,620 --> 00:19:52,830
and we're hoping that will open up you

00:19:51,480 --> 00:19:57,090
know even more people getting involved

00:19:52,830 --> 00:19:59,100
in that that end of things as well of

00:19:57,090 --> 00:20:01,110
course we want to bring these tools that

00:19:59,100 --> 00:20:04,080
we're working on into the cloud so this

00:20:01,110 --> 00:20:07,200
is actually a picture of you know one of

00:20:04,080 --> 00:20:09,930
the the dashboards we can see or will be

00:20:07,200 --> 00:20:12,540
able to see zoom through bluemix and you

00:20:09,930 --> 00:20:16,590
know we want to easily make options to

00:20:12,540 --> 00:20:18,720
generate node reports display them save

00:20:16,590 --> 00:20:23,760
heap snapshots or generate course for

00:20:18,720 --> 00:20:25,530
your running applications monitoring is

00:20:23,760 --> 00:20:27,330
also important and and you'll see if you

00:20:25,530 --> 00:20:29,370
go out to the booths there's lots of

00:20:27,330 --> 00:20:30,750
companies that are developing products

00:20:29,370 --> 00:20:33,540
to monitor your applications and

00:20:30,750 --> 00:20:35,280
production so dynaTrace off-beat we do

00:20:33,540 --> 00:20:36,720
believe though that there should be some

00:20:35,280 --> 00:20:38,940
level of monitoring that you can get

00:20:36,720 --> 00:20:41,640
which is open source so if we've worked

00:20:38,940 --> 00:20:46,050
on an open source monitoring set of

00:20:41,640 --> 00:20:47,760
tools called app metrics it's out there

00:20:46,050 --> 00:20:49,830
in github you can go collect you can go

00:20:47,760 --> 00:20:52,140
you know download it use it it is

00:20:49,830 --> 00:20:54,300
packaged in again with the IBM SDK for

00:20:52,140 --> 00:20:57,690
no GS so you get it automatically if

00:20:54,300 --> 00:20:59,730
you're using bluemix and there's a few

00:20:57,690 --> 00:21:02,310
components like at metrics - that lets

00:20:59,730 --> 00:21:04,170
you generate a very nice dashboard using

00:21:02,310 --> 00:21:06,210
the data that comes out of at metrics or

00:21:04,170 --> 00:21:07,860
if you're familiar with Java that health

00:21:06,210 --> 00:21:10,350
center is a client that actually shows

00:21:07,860 --> 00:21:12,480
similar data for Java and you can use

00:21:10,350 --> 00:21:14,430
that same client to connect to both Java

00:21:12,480 --> 00:21:16,830
and nodejs instances to sort of

00:21:14,430 --> 00:21:19,360
visualize the data

00:21:16,830 --> 00:21:21,550
so at metrics itself as a data source

00:21:19,360 --> 00:21:24,190
it's an NPM module you install and then

00:21:21,550 --> 00:21:28,960
it generates data about what's going on

00:21:24,190 --> 00:21:31,390
you know your CPU usage your HTTP

00:21:28,960 --> 00:21:33,400
requests really all sorts of things that

00:21:31,390 --> 00:21:36,040
are going on within your application you

00:21:33,400 --> 00:21:38,340
can actually write your own consumers of

00:21:36,040 --> 00:21:40,810
that data so in JavaScript you could

00:21:38,340 --> 00:21:42,160
register for the events and then use

00:21:40,810 --> 00:21:44,500
those events to say well I'm going to

00:21:42,160 --> 00:21:45,700
keep track of the GC information well

00:21:44,500 --> 00:21:47,830
one of the things we put together is

00:21:45,700 --> 00:21:49,930
this app metrics - so simply through one

00:21:47,830 --> 00:21:51,910
line in your application you can

00:21:49,930 --> 00:21:53,740
basically add a dashboard that will show

00:21:51,910 --> 00:21:55,780
up on a particular port of your

00:21:53,740 --> 00:21:57,700
application you can just h-2b in to see

00:21:55,780 --> 00:22:00,100
what's going on so if you're interested

00:21:57,700 --> 00:22:03,550
on that you can just go to MPN and

00:22:00,100 --> 00:22:06,520
install that particular package and as I

00:22:03,550 --> 00:22:09,370
said app metrics is another client that

00:22:06,520 --> 00:22:11,350
that supports Java as well and so you

00:22:09,370 --> 00:22:13,900
can use that if you want to as a UI to

00:22:11,350 --> 00:22:16,300
connect to a running application and you

00:22:13,900 --> 00:22:18,550
know basically see a visualization of

00:22:16,300 --> 00:22:19,750
all the data that app metrics is going

00:22:18,550 --> 00:22:20,740
out there so that's something you know

00:22:19,750 --> 00:22:23,170
if you want something that's a little

00:22:20,740 --> 00:22:25,090
lighter weight or is open source in

00:22:23,170 --> 00:22:26,590
terms of getting into monitoring your

00:22:25,090 --> 00:22:31,180
applications you know that's a good

00:22:26,590 --> 00:22:33,340
place to start the other thing I touched

00:22:31,180 --> 00:22:34,540
on was you know as we put our apps in

00:22:33,340 --> 00:22:37,330
production we really want to have

00:22:34,540 --> 00:22:38,680
confidence in the runtimes and so the

00:22:37,330 --> 00:22:40,270
community has done a lot of work and

00:22:38,680 --> 00:22:41,770
we've involved and been involved in that

00:22:40,270 --> 00:22:44,620
in terms of making sure that the node.js

00:22:41,770 --> 00:22:46,150
runtimes themselves are stable and you

00:22:44,620 --> 00:22:48,610
can have a high level of confidence when

00:22:46,150 --> 00:22:49,990
you're using them um the first thing is

00:22:48,610 --> 00:22:51,370
that you'll notice there's a bunch of

00:22:49,990 --> 00:22:53,200
different release types there's nightly

00:22:51,370 --> 00:22:54,550
releases there's the current releases I

00:22:53,200 --> 00:22:57,940
mentioned and then there's the LTS

00:22:54,550 --> 00:23:00,100
releases and really the goal is that we

00:22:57,940 --> 00:23:01,810
we don't want to trade off quality for

00:23:00,100 --> 00:23:03,390
speed it's very important in the node.js

00:23:01,810 --> 00:23:06,340
community for us to be able to innovate

00:23:03,390 --> 00:23:08,590
change get things in but at the same

00:23:06,340 --> 00:23:10,270
time we need high quality runtime for

00:23:08,590 --> 00:23:11,650
people using the production and often

00:23:10,270 --> 00:23:14,890
people sort of talk about those as a

00:23:11,650 --> 00:23:16,510
trade-off we looked at as it more in

00:23:14,890 --> 00:23:18,100
terms of you know how do you maximize

00:23:16,510 --> 00:23:19,870
both of those at the same time

00:23:18,100 --> 00:23:21,370
so the different release types allow us

00:23:19,870 --> 00:23:22,780
to have you know nightly releases where

00:23:21,370 --> 00:23:24,990
you have you know write up-to-date

00:23:22,780 --> 00:23:27,820
latest latest changes that went in

00:23:24,990 --> 00:23:29,740
current which is updated very regularly

00:23:27,820 --> 00:23:30,130
so every once or two weeks you get a new

00:23:29,740 --> 00:23:32,530
release

00:23:30,130 --> 00:23:34,600
that has the features that are in master

00:23:32,530 --> 00:23:36,130
and if you want to sort of live on the

00:23:34,600 --> 00:23:38,380
bleeding edge you can work with that

00:23:36,130 --> 00:23:39,880
and then we have the LTS releases where

00:23:38,380 --> 00:23:43,960
those are the ones we recommend for

00:23:39,880 --> 00:23:45,250
production and as changes flow into the

00:23:43,960 --> 00:23:46,960
system you know that they're tested out

00:23:45,250 --> 00:23:48,790
and master people can try them out in

00:23:46,960 --> 00:23:50,230
the nightly then they you know once

00:23:48,790 --> 00:23:51,580
they've sort of proved themselves there

00:23:50,230 --> 00:23:53,230
for a few weeks they flow into the

00:23:51,580 --> 00:23:54,610
current release the people who are

00:23:53,230 --> 00:23:56,440
living more on the on the bleeding edge

00:23:54,610 --> 00:23:58,450
can try and validate those some people

00:23:56,440 --> 00:24:01,030
like to do that and then only after all

00:23:58,450 --> 00:24:02,500
that happens do we pull them back into

00:24:01,030 --> 00:24:04,360
the LTS releases and there's an

00:24:02,500 --> 00:24:06,370
additional level of scrutiny so that by

00:24:04,360 --> 00:24:07,990
the time changes get into LTS releases

00:24:06,370 --> 00:24:10,720
the chances that they're gonna regress

00:24:07,990 --> 00:24:12,190
things are much lower and will be you

00:24:10,720 --> 00:24:13,870
know we may not pull back the really

00:24:12,190 --> 00:24:15,820
high-risk type changes so by having the

00:24:13,870 --> 00:24:18,160
different release types you can keep you

00:24:15,820 --> 00:24:22,170
know good innovation while making sure

00:24:18,160 --> 00:24:24,460
you have you know solid release we have

00:24:22,170 --> 00:24:26,620
processes like the enhancement proposal

00:24:24,460 --> 00:24:28,600
process which lets us discuss and sort

00:24:26,620 --> 00:24:29,680
of come to agreement on larger changes

00:24:28,600 --> 00:24:31,930
so that if you're gonna have bigger

00:24:29,680 --> 00:24:33,880
things in there they're documented and

00:24:31,930 --> 00:24:35,980
you have more discussion there's a very

00:24:33,880 --> 00:24:38,740
strong push in the community on

00:24:35,980 --> 00:24:40,360
automation and testing so you know if

00:24:38,740 --> 00:24:42,220
you look at the functional test every

00:24:40,360 --> 00:24:44,860
change it goes in gets regression test

00:24:42,220 --> 00:24:46,060
against all the platforms it runs in

00:24:44,860 --> 00:24:48,520
about twenty minutes which is pretty

00:24:46,060 --> 00:24:50,890
good depending on the number of testing

00:24:48,520 --> 00:24:52,570
that gets done in addition to that

00:24:50,890 --> 00:24:54,670
testing we have canary in the gold one

00:24:52,570 --> 00:24:56,800
which runs functional testing on a

00:24:54,670 --> 00:24:59,800
number of modules that probably you're

00:24:56,800 --> 00:25:00,940
using so you know there's lots and lots

00:24:59,800 --> 00:25:02,530
of modules they out there for hundred

00:25:00,940 --> 00:25:04,960
thousand but we've chosen the small a

00:25:02,530 --> 00:25:06,550
small much smaller subset of the ones we

00:25:04,960 --> 00:25:08,920
know lots of people use and are really

00:25:06,550 --> 00:25:10,450
important and we run before every

00:25:08,920 --> 00:25:11,590
release goes out we'll run testing on

00:25:10,450 --> 00:25:14,020
those to make sure the new release

00:25:11,590 --> 00:25:15,310
hasn't broken those and we continue to

00:25:14,020 --> 00:25:16,930
work on this in terms of you know we're

00:25:15,310 --> 00:25:19,390
looking on building up stress testing

00:25:16,930 --> 00:25:21,970
and test based on development workflows

00:25:19,390 --> 00:25:23,500
to sort of continually raise the bar in

00:25:21,970 --> 00:25:26,800
terms of the quality that we can have

00:25:23,500 --> 00:25:29,440
out there we've also worked in the

00:25:26,800 --> 00:25:32,500
performance and benchmarking workgroup

00:25:29,440 --> 00:25:33,760
to get basically you know the Canaries

00:25:32,500 --> 00:25:35,260
to tell us are we regressed in

00:25:33,760 --> 00:25:37,750
performance so if you go to benchmarking

00:25:35,260 --> 00:25:40,540
nodejs Touareg you can see charts we run

00:25:37,750 --> 00:25:42,410
tests every day and those basically show

00:25:40,540 --> 00:25:45,020
the graph of how on

00:25:42,410 --> 00:25:46,760
some key key things that we believe are

00:25:45,020 --> 00:25:48,500
key metrics for nodejs

00:25:46,760 --> 00:25:51,320
that you know we're either going up

00:25:48,500 --> 00:25:53,480
hopefully or at least thing even and

00:25:51,320 --> 00:25:55,280
finally you know one of our focuses as a

00:25:53,480 --> 00:25:57,770
team that IBM is also to enable the

00:25:55,280 --> 00:25:59,390
community to do things more efficiently

00:25:57,770 --> 00:26:02,090
and you know for example we helped out

00:25:59,390 --> 00:26:03,170
with getting code coverage generated and

00:26:02,090 --> 00:26:05,720
published every night so there's

00:26:03,170 --> 00:26:07,640
coverage no J's org you can go there and

00:26:05,720 --> 00:26:09,170
see what the coverage is and that's

00:26:07,640 --> 00:26:11,090
actually been quite instrumental in

00:26:09,170 --> 00:26:13,310
terms of focusing people on what tests

00:26:11,090 --> 00:26:14,690
need to be added and sort of leveraging

00:26:13,310 --> 00:26:16,190
the large community of people who are

00:26:14,690 --> 00:26:18,110
interested in getting involved in

00:26:16,190 --> 00:26:20,120
helping out and you can see that you

00:26:18,110 --> 00:26:21,680
know the since we started that the

00:26:20,120 --> 00:26:23,240
overall code coverage went from

00:26:21,680 --> 00:26:26,990
something which is pretty respectable I

00:26:23,240 --> 00:26:30,710
think in the mid 80s to like 95 90 you

00:26:26,990 --> 00:26:33,130
know 93 95 if you're interested more in

00:26:30,710 --> 00:26:35,870
reading about the the overall approach

00:26:33,130 --> 00:26:38,480
you can find this quality with speed

00:26:35,870 --> 00:26:39,770
blog that myself and Myles borns from

00:26:38,480 --> 00:26:40,820
the community author to both the

00:26:39,770 --> 00:26:46,130
different things we're putting in place

00:26:40,820 --> 00:26:47,480
to achieve this sort of that balance the

00:26:46,130 --> 00:26:49,460
other thing that I've been personally

00:26:47,480 --> 00:26:52,580
involved in I think quite interesting is

00:26:49,460 --> 00:26:54,380
that native modules and having to

00:26:52,580 --> 00:26:55,670
recompile them for every version of node

00:26:54,380 --> 00:26:57,260
has been a bit of a challenge if you've

00:26:55,670 --> 00:26:59,000
written a native Molly knowledge you

00:26:57,260 --> 00:27:01,970
know that they're very today quite

00:26:59,000 --> 00:27:03,650
tightly bound to v8 v8 moves very

00:27:01,970 --> 00:27:06,530
quickly they only support each release

00:27:03,650 --> 00:27:08,060
for six weeks and so that basically

00:27:06,530 --> 00:27:10,070
means every time you upgrade you're

00:27:08,060 --> 00:27:12,020
gonna have to recompile your your

00:27:10,070 --> 00:27:14,870
modules don't always have want to have

00:27:12,020 --> 00:27:18,380
compilers in production so this makes

00:27:14,870 --> 00:27:20,420
things more difficult so any p.i is an

00:27:18,380 --> 00:27:22,460
interface that's going to be provided by

00:27:20,420 --> 00:27:25,610
node itself that wraps and how basically

00:27:22,460 --> 00:27:27,830
hides v8 behind the scenes and breaks

00:27:25,610 --> 00:27:30,560
the dependency so it's a new set of

00:27:27,830 --> 00:27:33,050
functions that you can use in developing

00:27:30,560 --> 00:27:34,610
native native modules that basically

00:27:33,050 --> 00:27:38,510
once you compile against one release

00:27:34,610 --> 00:27:40,190
it'll can continue to work without

00:27:38,510 --> 00:27:42,880
recompilation as you move up to new

00:27:40,190 --> 00:27:42,880
versions of No

00:27:44,379 --> 00:27:48,289
internationalization was something uh

00:27:46,309 --> 00:27:49,610
you know it's quite important to ibm's

00:27:48,289 --> 00:27:53,899
customers and i know lots of big

00:27:49,610 --> 00:27:55,940
companies so Stephen Loomis Ric Lu I see

00:27:53,899 --> 00:27:58,789
you lead with an IBM was instrumental in

00:27:55,940 --> 00:28:02,570
working in the community to get ICU

00:27:58,789 --> 00:28:04,519
bundled into nodejs and today the other

00:28:02,570 --> 00:28:06,529
thing we're working on is the internal

00:28:04,519 --> 00:28:07,789
messages today are just a string it

00:28:06,529 --> 00:28:12,169
makes it very difficult for us to

00:28:07,789 --> 00:28:14,360
upgrade those strings because if we find

00:28:12,169 --> 00:28:15,950
a typo or something we're reluctant

00:28:14,360 --> 00:28:17,210
because that's potentially a breaking

00:28:15,950 --> 00:28:18,470
change to an application if it's

00:28:17,210 --> 00:28:20,840
depending on the string type so we're

00:28:18,470 --> 00:28:23,029
going through and introducing codes for

00:28:20,840 --> 00:28:24,590
every string which will let us do things

00:28:23,029 --> 00:28:26,240
like easily more easily change the

00:28:24,590 --> 00:28:27,200
strings but also then opens up the

00:28:26,240 --> 00:28:28,850
opportunities for things like

00:28:27,200 --> 00:28:30,289
internationalization as well of those

00:28:28,850 --> 00:28:33,409
strings so that's that's another thing

00:28:30,289 --> 00:28:35,870
we're participating in in terms of

00:28:33,409 --> 00:28:38,120
security there's sort of two aspects

00:28:35,870 --> 00:28:41,720
there's things like features so bluemix

00:28:38,120 --> 00:28:43,610
needed a FIPS version of nodejs the

00:28:41,720 --> 00:28:45,019
community had done some work to enable

00:28:43,610 --> 00:28:47,000
an option where you could compile in

00:28:45,019 --> 00:28:48,679
that way and we helped out by making

00:28:47,000 --> 00:28:50,360
sure that like the full test suite would

00:28:48,679 --> 00:28:53,149
actually pass when you turned on Phipps

00:28:50,360 --> 00:28:54,470
and have it added to part of the nightly

00:28:53,149 --> 00:28:57,379
regression runs so that we know that

00:28:54,470 --> 00:28:59,570
it's going to stay consistently green so

00:28:57,379 --> 00:29:00,980
we have a job that runs all the time the

00:28:59,570 --> 00:29:03,679
other thing that's interesting that's

00:29:00,980 --> 00:29:07,429
going on is there was an agreement

00:29:03,679 --> 00:29:10,610
between the foundation to bring in a

00:29:07,429 --> 00:29:13,549
security vulnerability database in terms

00:29:10,610 --> 00:29:15,409
of you know modules and known

00:29:13,549 --> 00:29:17,509
vulnerabilities and so there's a

00:29:15,409 --> 00:29:19,370
security working group that Sam Roberts

00:29:17,509 --> 00:29:20,600
from our team is participating and kind

00:29:19,370 --> 00:29:22,100
of leading in terms of bringing that

00:29:20,600 --> 00:29:23,960
data in and leveraging it for the

00:29:22,100 --> 00:29:25,370
overall community in terms of knowing

00:29:23,960 --> 00:29:30,649
when there's vulnerabilities and some of

00:29:25,370 --> 00:29:31,940
the Packers that we'll be using as I

00:29:30,649 --> 00:29:34,340
mentioned benchmarking so there's a

00:29:31,940 --> 00:29:36,710
benchmarking nodejs Touareg so really

00:29:34,340 --> 00:29:39,169
you know the the approach there was to

00:29:36,710 --> 00:29:40,730
define the use cases identify and build

00:29:39,169 --> 00:29:42,740
benchmarks and run and capture of the

00:29:40,730 --> 00:29:45,379
results you can see the results that we

00:29:42,740 --> 00:29:46,909
run every night and it's still a work in

00:29:45,379 --> 00:29:48,379
progress in terms of you know we need to

00:29:46,909 --> 00:29:50,509
get more benchmarks and we need to run

00:29:48,379 --> 00:29:52,639
them those add those to the set of what

00:29:50,509 --> 00:29:53,710
we read we run every night in terms of

00:29:52,639 --> 00:29:58,860
building our

00:29:53,710 --> 00:30:01,600
safety net so just as a summary you know

00:29:58,860 --> 00:30:04,090
we're involved because no js' is a key

00:30:01,600 --> 00:30:06,010
runtime for polyglot deployments you

00:30:04,090 --> 00:30:07,630
know we think Java anode and swift are

00:30:06,010 --> 00:30:09,610
the three key ones we see in like cloud

00:30:07,630 --> 00:30:11,680
foundry and poly cloud deployments I

00:30:09,610 --> 00:30:13,600
touched a little bit on sort of the you

00:30:11,680 --> 00:30:16,750
know how people commonly get started on

00:30:13,600 --> 00:30:18,400
the journey to cloud native and some of

00:30:16,750 --> 00:30:21,550
the obstacles that might get in your way

00:30:18,400 --> 00:30:23,320
and then I went into the work that you

00:30:21,550 --> 00:30:25,600
know we're working with the community

00:30:23,320 --> 00:30:27,370
doing to work with the community to try

00:30:25,600 --> 00:30:30,100
and work around and provide solutions to

00:30:27,370 --> 00:30:32,800
those those problems and you know my

00:30:30,100 --> 00:30:34,300
last pitch will be it's a really open

00:30:32,800 --> 00:30:35,559
and welcoming community so if any of

00:30:34,300 --> 00:30:38,050
these things are interesting to you you

00:30:35,559 --> 00:30:40,300
know come meet us at github get involved

00:30:38,050 --> 00:30:47,740
and you know we'd love to see you there

00:30:40,300 --> 00:30:49,540
so thank you very much I think we have

00:30:47,740 --> 00:30:51,160
time for maybe one question if there's

00:30:49,540 --> 00:30:52,570
someone otherwise Michael's hanging

00:30:51,160 --> 00:30:58,470
around and would be happy to chat with

00:30:52,570 --> 00:30:58,470

YouTube URL: https://www.youtube.com/watch?v=vxQmd8JYcng


