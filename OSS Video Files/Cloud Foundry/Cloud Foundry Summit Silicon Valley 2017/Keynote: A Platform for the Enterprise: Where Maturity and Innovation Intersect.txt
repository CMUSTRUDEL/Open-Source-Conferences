Title: Keynote: A Platform for the Enterprise: Where Maturity and Innovation Intersect
Publication date: 2017-06-21
Playlist: Cloud Foundry Summit Silicon Valley 2017
Description: 
	Keynote: A Platform for the Enterprise: Where Maturity and Innovation Intersect - Chip Childers, CTO, Cloud Foundry Foundation    

Chip Childers
Cloud Foundry Foundation
Chief Technology Officer
Chip has spent more than 18 years in large-scale computing and open source software. In 2015, he became the co-founder of the Cloud Foundry Foundation as Technology Chief of Staff. He was the first VP of Apache Cloudstack, a platform he helped drive while leading Enterprise Cloud Services at SunGard and then as VP Product Strategy at Cumulogic. Prior to SunGard, he led the rebuild of mission-critical applications for organizations including IRS.gov, USMint.gov, Merrill Lynch and SEI Investments. Chip is an experienced speaker at events like OSCON, LinuxCon North America, LC Japan, LC EU, ApacheCon, Oâ€™Reilly Software Architecture Conference, and many more. In his free time, Chip loves trail hiking with his black lab, sailing catamarans and sunfish, and trying to keep up with his young daughter.
Captions: 
	00:00:00,050 --> 00:00:06,060
good morning how we doing everybody

00:00:03,870 --> 00:00:07,500
awake well those of you that are here

00:00:06,060 --> 00:00:10,349
right looks about 50 percent of the

00:00:07,500 --> 00:00:12,900
audience we had yesterday must been a

00:00:10,349 --> 00:00:16,590
lot of late nights alright well thanks

00:00:12,900 --> 00:00:21,470
for coming so I woke up this morning and

00:00:16,590 --> 00:00:23,550
I was inspired to change my entire talk

00:00:21,470 --> 00:00:25,760
largely because Buuren from sa p

00:00:23,550 --> 00:00:28,859
yesterday had such a wonderful I charted

00:00:25,760 --> 00:00:30,810
and lines that make up the the cloud

00:00:28,859 --> 00:00:33,050
platforms so should we pull that slide

00:00:30,810 --> 00:00:37,969
up and maybe walk through box by box

00:00:33,050 --> 00:00:37,969
yeah no I'm just kidding at that

00:00:38,070 --> 00:00:43,320
I joke but there's there's a lot of

00:00:40,140 --> 00:00:45,870
complexity in Cloud Foundry and so what

00:00:43,320 --> 00:00:48,360
I want to talk to you today about is the

00:00:45,870 --> 00:00:51,030
combination of the enterprise readiness

00:00:48,360 --> 00:00:53,100
of this open source project and the

00:00:51,030 --> 00:00:55,379
innovation that's happening both inside

00:00:53,100 --> 00:00:59,579
the project teams and around it in our

00:00:55,379 --> 00:01:01,859
ecosystem and our community now I love

00:00:59,579 --> 00:01:03,570
starting talks with this in a really

00:01:01,859 --> 00:01:05,729
simple slide right so those of you that

00:01:03,570 --> 00:01:08,430
are developers and hopefully about half

00:01:05,729 --> 00:01:10,470
of your developers you recognize this

00:01:08,430 --> 00:01:12,600
right sort of a moment of anticipation

00:01:10,470 --> 00:01:14,400
you write some code you're ready to go

00:01:12,600 --> 00:01:16,049
it's time to push it into the platform

00:01:14,400 --> 00:01:17,369
and you know it's gonna be ready for

00:01:16,049 --> 00:01:20,189
production at that point well assuming

00:01:17,369 --> 00:01:24,000
you don't have any bugs it's a moment

00:01:20,189 --> 00:01:26,729
for a developer where you get to be free

00:01:24,000 --> 00:01:29,130
to release the software quickly and on

00:01:26,729 --> 00:01:32,340
Steve from-from pivotal a while back

00:01:29,130 --> 00:01:34,350
wrote this awesome haiku here's my

00:01:32,340 --> 00:01:37,530
source code run it on the cloud for me I

00:01:34,350 --> 00:01:40,619
do not care how and there's a lot behind

00:01:37,530 --> 00:01:46,560
that promise so it's been some time

00:01:40,619 --> 00:01:49,649
digging in underneath it now I was in

00:01:46,560 --> 00:01:53,399
enterprise technology as a buyer for

00:01:49,649 --> 00:01:55,890
many many many years and there's one

00:01:53,399 --> 00:01:58,320
thing that I know that Enterprise ready

00:01:55,890 --> 00:02:03,060
means it means there's a sales guy with

00:01:58,320 --> 00:02:04,710
a quote who wants me to sign but I can

00:02:03,060 --> 00:02:06,509
and all the account executives in the

00:02:04,710 --> 00:02:07,890
room I'm not talking about you if you're

00:02:06,509 --> 00:02:09,360
you know talking about Cloud Foundry of

00:02:07,890 --> 00:02:10,709
course right this is enterprise already

00:02:09,360 --> 00:02:12,340
software so what is what does enterprise

00:02:10,709 --> 00:02:15,700
already mean

00:02:12,340 --> 00:02:17,980
the Cloud Foundry Lucas system it really

00:02:15,700 --> 00:02:19,060
boils down to four key attributes and

00:02:17,980 --> 00:02:22,860
these are the themes that we're going to

00:02:19,060 --> 00:02:25,239
talk about today the first is secure

00:02:22,860 --> 00:02:27,640
clap boundaries being used in some of

00:02:25,239 --> 00:02:31,299
the most highly secure IT environments

00:02:27,640 --> 00:02:33,610
globally second well integrated right

00:02:31,299 --> 00:02:35,709
because an application on its own is

00:02:33,610 --> 00:02:38,260
fairly useless you need great backing

00:02:35,709 --> 00:02:40,450
services you need integration into the

00:02:38,260 --> 00:02:42,189
quote unquote legacy IT systems and I

00:02:40,450 --> 00:02:43,750
hate that I hate that term

00:02:42,189 --> 00:02:45,250
what is legacy but the thing that you

00:02:43,750 --> 00:02:48,909
already pushed production yesterday

00:02:45,250 --> 00:02:51,579
right being well integrated a third

00:02:48,909 --> 00:02:54,159
scalable because we're not only being

00:02:51,579 --> 00:02:55,239
used heavily by large enterprises I mean

00:02:54,159 --> 00:02:57,639
you heard the numbers from Comcast

00:02:55,239 --> 00:02:59,859
yesterday we're being used by

00:02:57,639 --> 00:03:03,069
large-scale public cloud providers to

00:02:59,859 --> 00:03:05,170
offer as though it needs to scale and

00:03:03,069 --> 00:03:06,370
last but not least is that great

00:03:05,170 --> 00:03:07,870
developer experience that includes

00:03:06,370 --> 00:03:10,359
integration with IDs that includes

00:03:07,870 --> 00:03:12,519
integration with developer workflows so

00:03:10,359 --> 00:03:16,120
this is this is what Enterprise already

00:03:12,519 --> 00:03:17,919
means to cloud foundry ecosystem now I

00:03:16,120 --> 00:03:19,180
was a web developer but but if you

00:03:17,919 --> 00:03:21,970
imagine you're a user and you don't know

00:03:19,180 --> 00:03:23,530
much about how technology's built you

00:03:21,970 --> 00:03:25,959
know when you think about is this app

00:03:23,530 --> 00:03:27,519
that I'm using secure really it comes

00:03:25,959 --> 00:03:29,379
down to this simple little icon that

00:03:27,519 --> 00:03:30,340
shows up in your browser right you're

00:03:29,379 --> 00:03:32,079
like oh yeah sure

00:03:30,340 --> 00:03:33,669
they must be a secure app but we all

00:03:32,079 --> 00:03:36,010
know that there's a lot more behind that

00:03:33,669 --> 00:03:37,449
and if we dig into what cloud foundry is

00:03:36,010 --> 00:03:38,560
we've got this control plane with lots

00:03:37,449 --> 00:03:39,819
and lots of components and they're all

00:03:38,560 --> 00:03:41,560
talking to each other and there's lots

00:03:39,819 --> 00:03:43,090
of communication going on and we've got

00:03:41,560 --> 00:03:44,290
all the applications being deployed

00:03:43,090 --> 00:03:45,280
they're talking to the components

00:03:44,290 --> 00:03:46,569
underneath it they're talking to each

00:03:45,280 --> 00:03:49,359
other there's a lot of communication

00:03:46,569 --> 00:03:51,280
paths that have to be secured so our

00:03:49,359 --> 00:03:52,780
community's been doing two things so the

00:03:51,280 --> 00:03:54,609
first is that they've been going through

00:03:52,780 --> 00:03:56,859
each one of the components that make up

00:03:54,609 --> 00:03:58,480
our control plan and ensuring that the

00:03:56,859 --> 00:04:00,579
communications from each component

00:03:58,480 --> 00:04:03,069
whether it's one of our services like UA

00:04:00,579 --> 00:04:04,480
a to the cloud controller or whether

00:04:03,069 --> 00:04:07,090
it's the cloud controller to its

00:04:04,480 --> 00:04:09,000
database is secure so that we can be

00:04:07,090 --> 00:04:10,959
trusted to run in public environments

00:04:09,000 --> 00:04:12,669
the second thing that's been happening

00:04:10,959 --> 00:04:14,590
is a lot of innovation around how do you

00:04:12,669 --> 00:04:17,470
secure the applications themselves make

00:04:14,590 --> 00:04:18,669
it really easy for a developer just

00:04:17,470 --> 00:04:20,590
secure communication between the two

00:04:18,669 --> 00:04:22,810
micro-services so we've got a lot of

00:04:20,590 --> 00:04:24,550
great stuff happening there and we're

00:04:22,810 --> 00:04:25,120
about 90% of the way there in terms of

00:04:24,550 --> 00:04:26,860
the control

00:04:25,120 --> 00:04:29,919
at least that's the latest number that

00:04:26,860 --> 00:04:32,470
you a cow gave me so I think we're close

00:04:29,919 --> 00:04:35,110
to being completely encrypted in all our

00:04:32,470 --> 00:04:37,150
internal communications and we dig a

00:04:35,110 --> 00:04:40,630
little bit deeper into the platform we

00:04:37,150 --> 00:04:43,210
we go into a single Diego cell we run

00:04:40,630 --> 00:04:45,790
into garden this is the lowest level

00:04:43,210 --> 00:04:48,760
container abstraction inside our

00:04:45,790 --> 00:04:50,830
platform now I love our garden team

00:04:48,760 --> 00:04:52,419
because they've really made it their

00:04:50,830 --> 00:04:54,600
mission and it's lofty goal their

00:04:52,419 --> 00:04:57,100
mission is to be the most secure

00:04:54,600 --> 00:05:00,880
container run time for a multi-tenant

00:04:57,100 --> 00:05:03,729
application platform in the industry now

00:05:00,880 --> 00:05:06,550
it's a great goal and they've spent a

00:05:03,729 --> 00:05:09,190
lot of effort adopting run see this is a

00:05:06,550 --> 00:05:11,680
place where our collaboration with

00:05:09,190 --> 00:05:14,169
another open source ecosystem comes to

00:05:11,680 --> 00:05:14,919
bear run see is the project that came

00:05:14,169 --> 00:05:16,240
from docker

00:05:14,919 --> 00:05:19,600
was brought to the open container

00:05:16,240 --> 00:05:23,320
initiative and it along with the open

00:05:19,600 --> 00:05:25,360
container image format specification

00:05:23,320 --> 00:05:28,510
represent the building blocks for

00:05:25,360 --> 00:05:30,880
container based platforms and our garden

00:05:28,510 --> 00:05:32,350
teams focused on security so they've a

00:05:30,880 --> 00:05:35,200
course do you see groups or resource

00:05:32,350 --> 00:05:36,970
resource constraints but app armour user

00:05:35,200 --> 00:05:38,590
namespaces in at second are all enabled

00:05:36,970 --> 00:05:39,970
by default these are really important

00:05:38,590 --> 00:05:42,460
kernel features that allow us to have a

00:05:39,970 --> 00:05:45,669
robust isolation between the different

00:05:42,460 --> 00:05:46,960
containers running in the system so now

00:05:45,669 --> 00:05:48,570
I want to step back a little bit and

00:05:46,960 --> 00:05:50,950
talk about a project called cred hug

00:05:48,570 --> 00:05:52,870
some of you might have heard of credits

00:05:50,950 --> 00:05:55,900
an incubating project recently you know

00:05:52,870 --> 00:05:58,090
join the foundation cred hub is is

00:05:55,900 --> 00:05:59,139
solving a problem that emerges when

00:05:58,090 --> 00:06:01,270
you're dealing with these complex

00:05:59,139 --> 00:06:03,190
distributed systems and I think it

00:06:01,270 --> 00:06:04,120
solves it very elegantly it thinks about

00:06:03,190 --> 00:06:05,979
credentials

00:06:04,120 --> 00:06:07,979
bili with four pillars what are the

00:06:05,979 --> 00:06:10,120
things we need to do with any credential

00:06:07,979 --> 00:06:11,979
we need to be able to generate new ones

00:06:10,120 --> 00:06:13,479
we need to be able to of course encrypt

00:06:11,979 --> 00:06:15,250
it both for in transit as well as at

00:06:13,479 --> 00:06:17,680
rest we need to be able to persist it

00:06:15,250 --> 00:06:19,930
and we want to make rotation really easy

00:06:17,680 --> 00:06:23,080
and we want to expose that through

00:06:19,930 --> 00:06:25,599
policy and make it an option for admins

00:06:23,080 --> 00:06:27,220
to use the apps themselves twos and the

00:06:25,599 --> 00:06:29,349
infrastructure to use there's a really

00:06:27,220 --> 00:06:31,570
great example of the applications

00:06:29,349 --> 00:06:33,159
themselves are our Diego team has been

00:06:31,570 --> 00:06:35,050
integrating credit hub and with what

00:06:33,159 --> 00:06:37,330
they've done is they've said every

00:06:35,050 --> 00:06:38,380
application instance running on a Diego

00:06:37,330 --> 00:06:40,020
cell

00:06:38,380 --> 00:06:42,130
could potentially have its own unique

00:06:40,020 --> 00:06:43,900
certificate which would not only

00:06:42,130 --> 00:06:47,290
identify the instance or the container

00:06:43,900 --> 00:06:48,670
but also allow it to naturally secure

00:06:47,290 --> 00:06:50,680
its communication with all of the other

00:06:48,670 --> 00:06:56,500
app instances or micro other micro

00:06:50,680 --> 00:06:59,470
services that it might be using alright

00:06:56,500 --> 00:07:01,210
so in in the software industry we really

00:06:59,470 --> 00:07:03,370
know one thing about software quality

00:07:01,210 --> 00:07:06,760
and that's the number of bugs that any

00:07:03,370 --> 00:07:09,430
software has right that equations n plus

00:07:06,760 --> 00:07:15,970
1 where n equals the number of bugs you

00:07:09,430 --> 00:07:16,720
currently know about and of course some

00:07:15,970 --> 00:07:18,340
of those bugs are gonna be

00:07:16,720 --> 00:07:21,910
vulnerabilities this is just the reality

00:07:18,340 --> 00:07:24,460
of complex software software is

00:07:21,910 --> 00:07:26,680
difficult to build we do our best to

00:07:24,460 --> 00:07:28,030
have secure coding practices but open

00:07:26,680 --> 00:07:30,520
source software proprietary software

00:07:28,030 --> 00:07:32,320
there's a constant stream of new fixes

00:07:30,520 --> 00:07:35,140
that need to be rolled out into

00:07:32,320 --> 00:07:36,730
environments so imagine for a second you

00:07:35,140 --> 00:07:38,680
were going to go build a system just

00:07:36,730 --> 00:07:40,930
like a cloud founder yourself not by

00:07:38,680 --> 00:07:43,180
using Cloud Foundry but by building all

00:07:40,930 --> 00:07:44,680
of the pieces and parts necessary to

00:07:43,180 --> 00:07:46,900
create this level of a platform

00:07:44,680 --> 00:07:48,760
you'd probably start first by picking an

00:07:46,900 --> 00:07:50,110
operating system now they have a

00:07:48,760 --> 00:07:52,060
constant stream of vulnerabilities and

00:07:50,110 --> 00:07:53,740
I'd argue having done this at a managed

00:07:52,060 --> 00:07:56,320
service provider we still really haven't

00:07:53,740 --> 00:07:58,770
figured out as an IT industry how to

00:07:56,320 --> 00:08:02,080
effectively patch manage at scale

00:07:58,770 --> 00:08:02,830
diverse operating systems then these are

00:08:02,080 --> 00:08:04,570
building up a whole bunch more

00:08:02,830 --> 00:08:06,100
dependencies right databases message

00:08:04,570 --> 00:08:07,360
brokers you've got a programming

00:08:06,100 --> 00:08:09,130
language that your developers are using

00:08:07,360 --> 00:08:11,380
and the frameworks things like nodejs

00:08:09,130 --> 00:08:12,850
or the Spring Framework and last you've

00:08:11,380 --> 00:08:14,260
got the platform itself - whether that's

00:08:12,850 --> 00:08:15,850
a combination of open source software

00:08:14,260 --> 00:08:17,410
you've pulled together or whether it's a

00:08:15,850 --> 00:08:19,510
bunch of Python scripts that somehow

00:08:17,410 --> 00:08:22,360
deploy applications and manage them

00:08:19,510 --> 00:08:25,900
there's a lot of risk in a platform like

00:08:22,360 --> 00:08:28,090
this now what the Cloud Foundry open

00:08:25,900 --> 00:08:30,100
source community does for the entire

00:08:28,090 --> 00:08:32,530
ecosystem is bring a level of maturity

00:08:30,100 --> 00:08:33,310
that is really unparalleled in open

00:08:32,530 --> 00:08:36,669
source software

00:08:33,310 --> 00:08:38,800
we release an entire platform from a

00:08:36,669 --> 00:08:40,419
base operating system all the way up to

00:08:38,800 --> 00:08:42,550
the build PACs that support the custom

00:08:40,419 --> 00:08:44,260
apps that are being deployed this is

00:08:42,550 --> 00:08:46,090
incredibly important to our ecosystem

00:08:44,260 --> 00:08:48,820
all of the downstream distributions get

00:08:46,090 --> 00:08:51,010
the value of it and all of the direct

00:08:48,820 --> 00:08:52,170
open-source users get the same value and

00:08:51,010 --> 00:08:53,579
we do it at a high velocity

00:08:52,170 --> 00:08:55,860
to our coordinated releases are

00:08:53,579 --> 00:09:02,100
averaging over twice a month and they

00:08:55,860 --> 00:09:04,860
can be kicked out extremely rapidly has

00:09:02,100 --> 00:09:06,480
anybody here heard of Club that go yeah

00:09:04,860 --> 00:09:07,980
a few of you so we talked about it

00:09:06,480 --> 00:09:10,949
periodically at conferences they've

00:09:07,980 --> 00:09:13,829
they've given given talks I in one of

00:09:10,949 --> 00:09:15,959
our events in Berlin Claud Cove is a

00:09:13,829 --> 00:09:17,399
online service that was created by a

00:09:15,959 --> 00:09:21,779
group inside the US federal government

00:09:17,399 --> 00:09:24,839
called 18 F 18 F's entire job is to find

00:09:21,779 --> 00:09:26,459
ways to allow technology and some of the

00:09:24,839 --> 00:09:28,079
learnings we have around how you develop

00:09:26,459 --> 00:09:31,290
software more agile techniques DevOps

00:09:28,079 --> 00:09:32,880
practices how to how to support that

00:09:31,290 --> 00:09:34,949
learning and support the adoption of

00:09:32,880 --> 00:09:36,990
technology that's much more modern in

00:09:34,949 --> 00:09:39,660
all the government departments agencies

00:09:36,990 --> 00:09:41,970
bureaus whoever is interested and so

00:09:39,660 --> 00:09:43,649
they launched cloud gov it's a pure

00:09:41,970 --> 00:09:47,279
open-source implementation of Cloud

00:09:43,649 --> 00:09:49,470
Foundry including backing services but

00:09:47,279 --> 00:09:51,570
what's really cool about it is that in

00:09:49,470 --> 00:09:52,920
order to be effectively adopted across

00:09:51,570 --> 00:09:54,690
the federal government they had to get

00:09:52,920 --> 00:09:56,820
what's called a FedRAMP authorization

00:09:54,690 --> 00:09:58,709
now that may be a very boring

00:09:56,820 --> 00:10:00,120
bureaucratic bureaucratic term but if

00:09:58,709 --> 00:10:02,550
anybody here has done any government

00:10:00,120 --> 00:10:04,920
work you understand that that federer's

00:10:02,550 --> 00:10:07,199
ation is exceptionally hard to get in

00:10:04,920 --> 00:10:09,199
February of this year they received that

00:10:07,199 --> 00:10:12,180
authorization and became the first

00:10:09,199 --> 00:10:15,899
open-source service to get FedRAMP

00:10:12,180 --> 00:10:17,130
authorization now they did that and I

00:10:15,899 --> 00:10:20,339
look at that and say that's a sign of

00:10:17,130 --> 00:10:22,680
the open source upstream demonstrating

00:10:20,339 --> 00:10:24,810
the quality and its enterprise readiness

00:10:22,680 --> 00:10:26,699
number one but number two they did an

00:10:24,810 --> 00:10:28,500
extremely transparent way so if you're

00:10:26,699 --> 00:10:31,829
in a different industry financial

00:10:28,500 --> 00:10:33,600
services insurance manufacturing you

00:10:31,829 --> 00:10:36,410
have your own regulatory scheme that you

00:10:33,600 --> 00:10:38,670
need to worry about you can go find 18m

00:10:36,410 --> 00:10:40,560
public documents that talk about how

00:10:38,670 --> 00:10:42,959
they deployed Cloud Foundry how operated

00:10:40,560 --> 00:10:45,720
how those procedures and technologies

00:10:42,959 --> 00:10:48,199
map to their controls there's go take a

00:10:45,720 --> 00:10:50,240
look it's it's an amazing example of

00:10:48,199 --> 00:10:51,959
government's finding a way to be

00:10:50,240 --> 00:10:54,990
participants in the open source world

00:10:51,959 --> 00:10:58,350
but also build up the possibility of

00:10:54,990 --> 00:11:02,490
better citizen engagement all right so

00:10:58,350 --> 00:11:05,250
let's transition to scale now there are

00:11:02,490 --> 00:11:09,760
also mics over there

00:11:05,250 --> 00:11:11,050
250,000 application instances that's

00:11:09,760 --> 00:11:14,350
containers for those of you that want to

00:11:11,050 --> 00:11:17,070
hear that word late last year the Diego

00:11:14,350 --> 00:11:19,210
team reached the quarter million

00:11:17,070 --> 00:11:21,490
containers being deployed and managed by

00:11:19,210 --> 00:11:22,330
the Cloud Foundry platform but see

00:11:21,490 --> 00:11:25,960
here's the thing

00:11:22,330 --> 00:11:28,630
it wasn't a false test this was a

00:11:25,960 --> 00:11:30,760
realistic performance and scale test it

00:11:28,630 --> 00:11:32,770
included applications of varying sizes

00:11:30,760 --> 00:11:35,230
it also included applications that were

00:11:32,770 --> 00:11:39,370
purposefully designed to inject fault to

00:11:35,230 --> 00:11:40,630
shut themselves down that demonstrated

00:11:39,370 --> 00:11:43,120
that the system continued to keep its

00:11:40,630 --> 00:11:44,680
prompts of the apps stay alive it

00:11:43,120 --> 00:11:46,570
demonstrated that we could drive massive

00:11:44,680 --> 00:11:48,670
throughput through the system and it

00:11:46,570 --> 00:11:50,140
also gave us some opportunities for

00:11:48,670 --> 00:11:52,150
additional improvement now I'm gonna

00:11:50,140 --> 00:11:54,940
pick on one team mostly because they did

00:11:52,150 --> 00:11:57,700
really great work our routing tier is

00:11:54,940 --> 00:11:59,290
part of the data path as a user of an

00:11:57,700 --> 00:12:01,600
application when I make a request view

00:11:59,290 --> 00:12:02,770
my web browser it's gonna flow through

00:12:01,600 --> 00:12:05,260
the system the first thing it's going to

00:12:02,770 --> 00:12:07,390
hit is the routings here so obviously

00:12:05,260 --> 00:12:10,840
throughputs really important before they

00:12:07,390 --> 00:12:12,760
started their performance work the team

00:12:10,840 --> 00:12:15,520
pay attention to the 5 millisecond

00:12:12,760 --> 00:12:17,530
latency and throughput intersection the

00:12:15,520 --> 00:12:20,140
team measured and baseline at about a

00:12:17,530 --> 00:12:22,900
thousand requests per second as

00:12:20,140 --> 00:12:24,790
throughput for an instance they spent

00:12:22,900 --> 00:12:27,310
one release and managed to improve that

00:12:24,790 --> 00:12:29,590
all the way out to over three times the

00:12:27,310 --> 00:12:31,480
throughput now that's good and that's

00:12:29,590 --> 00:12:32,560
impressive and it was amazing work but

00:12:31,480 --> 00:12:35,110
here's what's more important every

00:12:32,560 --> 00:12:37,420
single release they rerun the test and

00:12:35,110 --> 00:12:39,550
look for continued incremental

00:12:37,420 --> 00:12:42,960
improvement to the scale now that is an

00:12:39,550 --> 00:12:45,940
incredibly mature open source project

00:12:42,960 --> 00:12:47,290
now I love this image so those of you

00:12:45,940 --> 00:12:50,020
that might work in the cloud foundry

00:12:47,290 --> 00:12:52,300
upstream you probably recognize it the

00:12:50,020 --> 00:12:54,790
the team was really looking forward to

00:12:52,300 --> 00:12:56,320
retiring the older DEA architecture they

00:12:54,790 --> 00:12:58,390
actually had a countdown timer of course

00:12:56,320 --> 00:13:00,250
this was a CF deployed application right

00:12:58,390 --> 00:13:02,140
and they had a countdown timer they

00:13:00,250 --> 00:13:03,610
count it down the minutes in seconds

00:13:02,140 --> 00:13:05,230
until we got to move the older

00:13:03,610 --> 00:13:06,850
architecture to the Attic so make no

00:13:05,230 --> 00:13:08,770
mistake the de A's are dead

00:13:06,850 --> 00:13:11,620
well they'll live on forever in

00:13:08,770 --> 00:13:13,030
read-only mode but the entire ecosystem

00:13:11,620 --> 00:13:15,630
has transitioned to the Diego

00:13:13,030 --> 00:13:15,630
architecture

00:13:17,430 --> 00:13:21,700
now let's talk about cloud platform

00:13:20,200 --> 00:13:25,110
certification you notice I've got here

00:13:21,700 --> 00:13:26,410
2016 up there because in December of

00:13:25,110 --> 00:13:28,540
00:13:26,410 --> 00:13:31,300
announced platform certification and we

00:13:28,540 --> 00:13:32,920
had a really lofty goal our goal was to

00:13:31,300 --> 00:13:34,930
find a way to help ensure that the

00:13:32,920 --> 00:13:36,520
downstream distributions and services

00:13:34,930 --> 00:13:39,280
based on cloud foundry we're going to

00:13:36,520 --> 00:13:41,260
provide consistency so that we could

00:13:39,280 --> 00:13:42,730
have application and skill portability

00:13:41,260 --> 00:13:44,590
across the distributions and throughout

00:13:42,730 --> 00:13:46,510
the ecosystem now it's a bit of a lofty

00:13:44,590 --> 00:13:48,340
goal we did not fully achieve it that

00:13:46,510 --> 00:13:51,100
year we did launch the program and it

00:13:48,340 --> 00:13:54,040
was successful but fast-forward to 2017

00:13:51,100 --> 00:13:56,050
and we've done a few things so first the

00:13:54,040 --> 00:13:57,430
2017 certification has eliminated the

00:13:56,050 --> 00:13:59,620
option for the older architecture where

00:13:57,430 --> 00:14:03,070
Diego only and the whole eke systems

00:13:59,620 --> 00:14:07,090
moved there too we've also decreased the

00:14:03,070 --> 00:14:09,970
age that a distribution that certified

00:14:07,090 --> 00:14:12,940
can use from something as old as a year

00:14:09,970 --> 00:14:14,290
back to less than six months so now

00:14:12,940 --> 00:14:18,100
we're moving the entire ecosystem

00:14:14,290 --> 00:14:19,630
together forward released by release the

00:14:18,100 --> 00:14:21,280
second thing we did though is we talked

00:14:19,630 --> 00:14:23,380
about application portability you know

00:14:21,280 --> 00:14:26,830
the area of differentiation that the

00:14:23,380 --> 00:14:27,940
distros have is in the services along

00:14:26,830 --> 00:14:29,230
with a bunch of other wonderful things

00:14:27,940 --> 00:14:30,910
but you know the core platform is the

00:14:29,230 --> 00:14:33,190
same it's really about the service

00:14:30,910 --> 00:14:35,710
capabilities so when we launched the

00:14:33,190 --> 00:14:38,470
open serviceworker API initiative that

00:14:35,710 --> 00:14:40,150
was designed to open up and free the

00:14:38,470 --> 00:14:42,340
services so that we could have a much

00:14:40,150 --> 00:14:44,410
more fluid service marketplace so their

00:14:42,340 --> 00:14:47,440
cloud provider a could offer their

00:14:44,410 --> 00:14:49,290
services to CF platforms that may or may

00:14:47,440 --> 00:14:51,490
not be running in their environment

00:14:49,290 --> 00:14:54,360
that's been successful and it's actually

00:14:51,490 --> 00:14:56,800
been successful across ecosystems and

00:14:54,360 --> 00:14:58,120
then of course as Abby mentioned we

00:14:56,800 --> 00:14:59,860
launched our Cloud Foundry certified

00:14:58,120 --> 00:15:01,870
developer program and that really was

00:14:59,860 --> 00:15:04,090
not possible without getting ecosystem

00:15:01,870 --> 00:15:06,190
consistency so we build off of this

00:15:04,090 --> 00:15:08,230
platform certification as a community

00:15:06,190 --> 00:15:10,660
and our training portfolio has grown

00:15:08,230 --> 00:15:13,120
dramatically we have been doing one day

00:15:10,660 --> 00:15:15,820
summit training classes since the the

00:15:13,120 --> 00:15:17,260
Foundation started and I want to thank

00:15:15,820 --> 00:15:18,400
all of the the partner companies who

00:15:17,260 --> 00:15:20,830
have actually delivered that training

00:15:18,400 --> 00:15:22,180
and have created it and and cloud credo

00:15:20,830 --> 00:15:23,910
and pivotal specifically for open

00:15:22,180 --> 00:15:26,320
sourcing some of those courses for us

00:15:23,910 --> 00:15:28,180
but we also watched the introduction of

00:15:26,320 --> 00:15:30,330
Cloud Foundry class the EDX platform a

00:15:28,180 --> 00:15:31,620
team wonderful team from Stark and Wayne

00:15:30,330 --> 00:15:33,720
worked really hard to get that done

00:15:31,620 --> 00:15:35,820
under a tight deadline we launched it

00:15:33,720 --> 00:15:38,250
and it's been a great success it's it's

00:15:35,820 --> 00:15:40,890
there in in the EDX platform right next

00:15:38,250 --> 00:15:43,680
to courses from MIT Stanford Harvard to

00:15:40,890 --> 00:15:44,880
great audience to have Cloud Foundry for

00:15:43,680 --> 00:15:46,170
developers now this is the much more

00:15:44,880 --> 00:15:47,790
intense class it's designed to be

00:15:46,170 --> 00:15:49,020
delivered really two ways one we're

00:15:47,790 --> 00:15:50,760
offering it in partnership with the

00:15:49,020 --> 00:15:53,340
Linux Foundation as a learning material

00:15:50,760 --> 00:15:54,930
but two we have over 13 and growing

00:15:53,340 --> 00:15:57,570
authorized training partners that are

00:15:54,930 --> 00:16:00,510
ready to deliver this material it's

00:15:57,570 --> 00:16:02,610
common it's multi vendor it works across

00:16:00,510 --> 00:16:05,040
the distributions and it's a great

00:16:02,610 --> 00:16:06,630
baseline for all of the the different

00:16:05,040 --> 00:16:09,030
vendors in our ecosystem to build off of

00:16:06,630 --> 00:16:11,250
and then of course live lappa not least

00:16:09,030 --> 00:16:14,640
the cloud foundry certified developers

00:16:11,250 --> 00:16:18,510
also eat is also useful across the

00:16:14,640 --> 00:16:20,970
entire ecosystem now I'm really happy to

00:16:18,510 --> 00:16:23,040
say that we had a soft launch that that

00:16:20,970 --> 00:16:25,080
program and we've already educated over

00:16:23,040 --> 00:16:26,610
5,000 developers in less than three

00:16:25,080 --> 00:16:30,200
months without doing a ton of marketing

00:16:26,610 --> 00:16:32,670
that's great but it's just the start

00:16:30,200 --> 00:16:35,700
okay so let's transition now I want to

00:16:32,670 --> 00:16:38,520
talk a little bit about innovation now

00:16:35,700 --> 00:16:41,400
innovation Cloud Foundry comes from a

00:16:38,520 --> 00:16:43,380
number of dition different sources we of

00:16:41,400 --> 00:16:45,680
course have the coronary community

00:16:43,380 --> 00:16:47,700
itself but we're deeply intertwined

00:16:45,680 --> 00:16:49,560
working with other open source

00:16:47,700 --> 00:16:50,730
ecosystems everything from the open

00:16:49,560 --> 00:16:52,980
container initiative with both their

00:16:50,730 --> 00:16:55,500
their image specification the Runcie

00:16:52,980 --> 00:16:57,930
library we've been actively working our

00:16:55,500 --> 00:17:00,480
Diego persistence project who's been

00:16:57,930 --> 00:17:02,850
finding ways to provide attached storage

00:17:00,480 --> 00:17:05,280
to the containers I've been working

00:17:02,850 --> 00:17:06,360
deeply with other platforms to think

00:17:05,280 --> 00:17:08,790
about what does it mean to do volume

00:17:06,360 --> 00:17:10,950
management in a container system open

00:17:08,790 --> 00:17:12,840
tracing tracings are very important CNCs

00:17:10,950 --> 00:17:14,070
project as well we can initiate Zipkin

00:17:12,840 --> 00:17:15,990
traces which is based in the open

00:17:14,070 --> 00:17:18,600
tracing API directly from a router all

00:17:15,990 --> 00:17:20,040
the way down through microservices CN CF

00:17:18,600 --> 00:17:21,690
container networking interface which I'm

00:17:20,040 --> 00:17:23,430
actually I'd like to make sure that

00:17:21,690 --> 00:17:24,630
everybody saw the announcement our

00:17:23,430 --> 00:17:28,020
container to container networking

00:17:24,630 --> 00:17:30,210
project reached its 100 milestone just a

00:17:28,020 --> 00:17:32,280
few days ago so if your distribution

00:17:30,210 --> 00:17:33,930
offers it give it a try if you're using

00:17:32,280 --> 00:17:36,180
the open source directly give it a try

00:17:33,930 --> 00:17:37,860
if your doesn't offer it feel free to

00:17:36,180 --> 00:17:39,750
ask them for it because it really is a

00:17:37,860 --> 00:17:41,830
great capability for the application

00:17:39,750 --> 00:17:44,679
developers

00:17:41,830 --> 00:17:46,240
Oh a be introduced that Microsoft has

00:17:44,679 --> 00:17:49,059
joined us I just want to spend a minute

00:17:46,240 --> 00:17:51,130
to talk about the Microsoft technology

00:17:49,059 --> 00:17:56,799
and how we think about it related to

00:17:51,130 --> 00:17:58,240
cloud foundry so in 2015 we spent a lot

00:17:56,799 --> 00:18:00,340
of time talking about how the the

00:17:58,240 --> 00:18:01,480
Microsoft technology stack and dotnet in

00:18:00,340 --> 00:18:02,890
particular but also the Windows

00:18:01,480 --> 00:18:04,960
operating system which is really

00:18:02,890 --> 00:18:08,470
important right if you sort of squint

00:18:04,960 --> 00:18:10,120
you see that there's there's roughly you

00:18:08,470 --> 00:18:12,610
know when enterprise software is being

00:18:10,120 --> 00:18:14,529
built a large percentage of it is Java

00:18:12,610 --> 00:18:16,690
and another large percentage of it net

00:18:14,529 --> 00:18:18,700
so the Microsoft technology stack is

00:18:16,690 --> 00:18:19,330
incredibly important to true enterprise

00:18:18,700 --> 00:18:21,250
adoption

00:18:19,330 --> 00:18:23,440
now there's the iron foundry project

00:18:21,250 --> 00:18:24,789
which was really the first effort and I

00:18:23,440 --> 00:18:27,039
think a few of those folks are here

00:18:24,789 --> 00:18:29,559
right years ago is the first effort to

00:18:27,039 --> 00:18:31,090
do dotnet services on the Windows

00:18:29,559 --> 00:18:33,010
operating system within the context of

00:18:31,090 --> 00:18:34,649
cloud foundry and we've evolved it we

00:18:33,010 --> 00:18:37,289
have production systems that are running

00:18:34,649 --> 00:18:40,590
the network loads on Microsoft Windows

00:18:37,289 --> 00:18:43,090
now when Microsoft released the dotnet

00:18:40,590 --> 00:18:45,610
language as open source software that

00:18:43,090 --> 00:18:47,409
also allowed us to then say great let's

00:18:45,610 --> 00:18:50,289
have a dotnet core build pack for the

00:18:47,409 --> 00:18:51,760
Linux platform and that's available and

00:18:50,289 --> 00:18:53,470
that's that's being provided in the

00:18:51,760 --> 00:18:57,940
upstream at the same level of parity as

00:18:53,470 --> 00:19:01,029
all of the others but we also this year

00:18:57,940 --> 00:19:03,279
have unlocked the power of Bosh for the

00:19:01,029 --> 00:19:04,750
Windows platform the Bosh windows

00:19:03,279 --> 00:19:06,669
project team has launched you know the

00:19:04,750 --> 00:19:08,620
initial release you could now get all

00:19:06,669 --> 00:19:11,799
the same operational value you get from

00:19:08,620 --> 00:19:14,590
managing Linux nodes Linux based

00:19:11,799 --> 00:19:16,809
distributed systems using Windows based

00:19:14,590 --> 00:19:18,970
distributed systems and last thing I'll

00:19:16,809 --> 00:19:20,019
point out on Microsoft was I think Corey

00:19:18,970 --> 00:19:23,260
mentioned this very briefly yesterday

00:19:20,019 --> 00:19:24,610
the the CF command-line tool and this is

00:19:23,260 --> 00:19:26,620
really neat to see if command-line tool

00:19:24,610 --> 00:19:28,960
is now installed by default in the azure

00:19:26,620 --> 00:19:31,600
cloud shell that makes it really easy

00:19:28,960 --> 00:19:33,639
for a developer using the azure platform

00:19:31,600 --> 00:19:36,580
to get access to a cloud foundry they

00:19:33,639 --> 00:19:37,779
can I think one click deploy CF and then

00:19:36,580 --> 00:19:42,100
the command lines already installed in

00:19:37,779 --> 00:19:43,539
the cloud shell makes it really easy so

00:19:42,100 --> 00:19:47,350
so let's go back to this whole CF push

00:19:43,539 --> 00:19:48,940
thing I have actually heard from plenty

00:19:47,350 --> 00:19:51,580
of end users and in particular

00:19:48,940 --> 00:19:52,990
developers we do actually have some

00:19:51,580 --> 00:19:54,970
improvement that we need to make to this

00:19:52,990 --> 00:19:58,179
and the

00:19:54,970 --> 00:19:59,740
Reuven is in the flow of a developer now

00:19:58,179 --> 00:20:00,880
for those of you that write code you

00:19:59,740 --> 00:20:02,950
know that there's there's a flow that

00:20:00,880 --> 00:20:04,539
you have local to your machine you know

00:20:02,950 --> 00:20:06,100
your local in your laptop you're doing a

00:20:04,539 --> 00:20:07,330
lot of tests and you know debugging and

00:20:06,100 --> 00:20:09,280
you're kind of you're looping you're

00:20:07,330 --> 00:20:11,320
looping and even though CF push is

00:20:09,280 --> 00:20:12,490
extremely easy and get you all the value

00:20:11,320 --> 00:20:15,159
of you you know knowing that it's gonna

00:20:12,490 --> 00:20:17,980
be bel operated that's the F push

00:20:15,159 --> 00:20:21,580
process he's a little bit slow for local

00:20:17,980 --> 00:20:24,789
development so Stephen Levine our build

00:20:21,580 --> 00:20:27,039
packs project manager product manager he

00:20:24,789 --> 00:20:28,360
created on his own time a really neat

00:20:27,039 --> 00:20:32,470
projects everybody should go check this

00:20:28,360 --> 00:20:34,419
out it's called CF local CF local uses

00:20:32,470 --> 00:20:37,570
the docker container engine local to a

00:20:34,419 --> 00:20:39,070
laptop and it lets you do a stage that

00:20:37,570 --> 00:20:40,960
means build a container using a Bill

00:20:39,070 --> 00:20:42,159
pack it lets you run that container

00:20:40,960 --> 00:20:44,590
local and a really interesting thing

00:20:42,159 --> 00:20:47,320
here is that you can bind local database

00:20:44,590 --> 00:20:48,669
services to that instance so it looks

00:20:47,320 --> 00:20:51,640
and feels like it's running in the

00:20:48,669 --> 00:20:53,230
larger CF platform or you can connect to

00:20:51,640 --> 00:20:55,120
a remote Cloud Foundry environment and

00:20:53,230 --> 00:20:57,250
proxy in the service instances that have

00:20:55,120 --> 00:20:59,140
been created for you you can also push

00:20:57,250 --> 00:21:00,400
and pull images so a lot of possibility

00:20:59,140 --> 00:21:03,850
here and I know he's got a really

00:21:00,400 --> 00:21:05,710
interesting set of potential futures for

00:21:03,850 --> 00:21:07,270
this project I encourage you to talk to

00:21:05,710 --> 00:21:09,010
him there's a there's an office hours

00:21:07,270 --> 00:21:10,990
that's dedicated to this particular

00:21:09,010 --> 00:21:12,870
project so take the time go go learn

00:21:10,990 --> 00:21:15,640
about it it's got a great future for us

00:21:12,870 --> 00:21:16,980
now completely orthogonal let's talk

00:21:15,640 --> 00:21:20,770
about something that is in containers

00:21:16,980 --> 00:21:21,909
there's a possibility possibility that

00:21:20,770 --> 00:21:24,039
unit kernels might be an interesting

00:21:21,909 --> 00:21:26,289
alternative deployment model in the

00:21:24,039 --> 00:21:29,020
future there was a project that was

00:21:26,289 --> 00:21:30,789
created at Dell EMC called unique it's

00:21:29,020 --> 00:21:33,640
an orchestration platform for unit

00:21:30,789 --> 00:21:34,630
kernel based systems and it's been

00:21:33,640 --> 00:21:36,159
proposed to join the Cloud Foundry

00:21:34,630 --> 00:21:38,289
foundation so pay attention to that

00:21:36,159 --> 00:21:40,720
engage in the conversation about whether

00:21:38,289 --> 00:21:43,240
it's a fit we're excited that it's at

00:21:40,720 --> 00:21:44,860
least that community which is already

00:21:43,240 --> 00:21:49,659
fairly diverse as expressed interested

00:21:44,860 --> 00:21:51,429
in joining us ok so I'm well over time

00:21:49,659 --> 00:21:54,669
the countdown clock is actually going up

00:21:51,429 --> 00:21:56,230
but that's ok this is a lot of really

00:21:54,669 --> 00:21:57,580
interesting stuff at least to me so I

00:21:56,230 --> 00:21:58,630
want to say happy birthday to Bosch can

00:21:57,580 --> 00:22:01,090
we take a few minutes to sing happy

00:21:58,630 --> 00:22:02,830
birthday no no don't really need to do

00:22:01,090 --> 00:22:05,980
that but Bosch is 5 years old

00:22:02,830 --> 00:22:07,690
five years old and it's undergone an

00:22:05,980 --> 00:22:08,380
enormous amount of change in particular

00:22:07,690 --> 00:22:10,090
over

00:22:08,380 --> 00:22:11,560
course of the last year it's gone

00:22:10,090 --> 00:22:13,690
through a set of changes that have been

00:22:11,560 --> 00:22:15,220
kind of term debasht to dotto now we

00:22:13,690 --> 00:22:16,660
haven't released at basha to dotto

00:22:15,220 --> 00:22:18,430
but they've been termed busted over

00:22:16,660 --> 00:22:20,710
because they've reduced the complexity

00:22:18,430 --> 00:22:22,870
of building bosch releases they've

00:22:20,710 --> 00:22:24,430
reduced the complexity of deploying and

00:22:22,870 --> 00:22:26,350
managing environments using the bosch

00:22:24,430 --> 00:22:28,930
platform so a lot of really great

00:22:26,350 --> 00:22:30,820
changes and that's why we believe the

00:22:28,930 --> 00:22:33,190
Kubo project which I be introduced

00:22:30,820 --> 00:22:34,630
yesterday is so interesting because it's

00:22:33,190 --> 00:22:37,090
another demonstration of a complex

00:22:34,630 --> 00:22:40,420
distributed system a platform focused on

00:22:37,090 --> 00:22:43,330
containers being managed by Bosh alright

00:22:40,420 --> 00:22:45,040
so so what deploys your platform that's

00:22:43,330 --> 00:22:46,350
a question you should ask well it turns

00:22:45,040 --> 00:22:50,710
out Bosh is the right answer for that

00:22:46,350 --> 00:22:52,240
but also Bosh is the multi-cloud story

00:22:50,710 --> 00:22:54,070
for Cloud Foundry make no mistake about

00:22:52,240 --> 00:22:56,380
it it's at the heart of it when we talk

00:22:54,070 --> 00:22:57,850
about multi cloud and all the cloud

00:22:56,380 --> 00:22:59,770
provider interfaces that are supported

00:22:57,850 --> 00:23:01,930
by the upstream it's a wide right we

00:22:59,770 --> 00:23:04,330
range from large-scale multi large-scale

00:23:01,930 --> 00:23:06,340
public clouds through to open stores

00:23:04,330 --> 00:23:08,260
platforms like OpenStack the the

00:23:06,340 --> 00:23:11,170
on-premise software coming out of VMware

00:23:08,260 --> 00:23:13,390
with photon and vSphere don't forget of

00:23:11,170 --> 00:23:14,860
course bluemix SoftLayer and then even

00:23:13,390 --> 00:23:17,410
bare metal provisioning systems like

00:23:14,860 --> 00:23:18,910
Rack HD that's a wide range of options

00:23:17,410 --> 00:23:20,950
supported by the upstream community and

00:23:18,910 --> 00:23:22,420
in addition there are further CPI's that

00:23:20,950 --> 00:23:23,740
are out there for for other cloud

00:23:22,420 --> 00:23:27,510
providers were trained the structure

00:23:23,740 --> 00:23:27,510
options out in the open source community

00:23:27,720 --> 00:23:35,530
but multi cloud isn't just about our CP

00:23:32,440 --> 00:23:38,770
is it's actually it's about how do you

00:23:35,530 --> 00:23:40,960
ensure that the capabilities of these

00:23:38,770 --> 00:23:42,580
different public clouds are exposed in a

00:23:40,960 --> 00:23:45,070
way that can be used by developers and

00:23:42,580 --> 00:23:46,390
used by the platform so there's two

00:23:45,070 --> 00:23:49,000
other areas that I'll highlight the

00:23:46,390 --> 00:23:51,610
first is that the UA a module with its

00:23:49,000 --> 00:23:54,430
identity providers has added both Google

00:23:51,610 --> 00:23:56,650
and Microsoft's identity providers

00:23:54,430 --> 00:23:59,140
that's kind of neat right so if you use

00:23:56,650 --> 00:24:02,290
Google Apps in your enterprise you can

00:23:59,140 --> 00:24:03,940
tie that into your cloud platform the

00:24:02,290 --> 00:24:05,380
other is the open service broker API and

00:24:03,940 --> 00:24:07,030
I've mentioned this three times this is

00:24:05,380 --> 00:24:11,970
the third time there's a reason for that

00:24:07,030 --> 00:24:14,820
this is an important project it allows

00:24:11,970 --> 00:24:19,330
Microsoft it allows Google it allows

00:24:14,820 --> 00:24:21,430
Fujitsu to describe their cloud services

00:24:19,330 --> 00:24:25,030
in a way that can be consumed

00:24:21,430 --> 00:24:27,730
by other platforms whether that's Cloud

00:24:25,030 --> 00:24:29,560
Foundry or whether that's kubernetes or

00:24:27,730 --> 00:24:31,300
whether that's any of the products that

00:24:29,560 --> 00:24:34,170
are building on top of kubernetes or any

00:24:31,300 --> 00:24:36,450
other platform it's extremely powerful

00:24:34,170 --> 00:24:38,620
nice and simple but extremely powerful

00:24:36,450 --> 00:24:40,960
and I have the pleasure actually

00:24:38,620 --> 00:24:43,090
announcing today that as of at some

00:24:40,960 --> 00:24:45,880
point really early this morning

00:24:43,090 --> 00:24:48,010
the the project team the cross ecosystem

00:24:45,880 --> 00:24:49,900
project team has their first release of

00:24:48,010 --> 00:24:51,760
the specification that's not

00:24:49,900 --> 00:24:55,380
intrinsically and directly tied to the

00:24:51,760 --> 00:24:58,180
cloud foundry platform release so huge

00:24:55,380 --> 00:25:00,370
hat tip to that group it's an amazing

00:24:58,180 --> 00:25:01,990
job and we're seeing it be adopted in

00:25:00,370 --> 00:25:03,940
the kubernetes community and it's

00:25:01,990 --> 00:25:08,170
wonderful it provides all kinds of

00:25:03,940 --> 00:25:10,000
flexibility for users so with that I'm

00:25:08,170 --> 00:25:11,140
done mostly talking to you and I'm

00:25:10,000 --> 00:25:12,520
actually want to introduce a few people

00:25:11,140 --> 00:25:13,960
up to the stage we're gonna we're gonna

00:25:12,520 --> 00:25:16,750
have a conversation for a few minutes

00:25:13,960 --> 00:25:19,120
here so I want to bring up first

00:25:16,750 --> 00:25:23,320
Frederick from TechCrunch who's going to

00:25:19,120 --> 00:25:24,880
help moderate a conversation areas all

00:25:23,320 --> 00:25:27,210
right Frederick and then we've got KY

00:25:24,880 --> 00:25:29,560
from Microsoft and Eric Johnson from

00:25:27,210 --> 00:25:34,280
Google Cloud

00:25:29,560 --> 00:25:34,280

YouTube URL: https://www.youtube.com/watch?v=dqFiCbYxkaE


