Title: Getting Started with Node.js on Cloud Foundry
Publication date: 2017-06-22
Playlist: Cloud Foundry Summit Silicon Valley 2017
Description: 
	Getting Started with Node.js on Cloud Foundry [B] - Joe Doyle & Patrick Mueller, NodeSource    

Node.js is the fastest growing runtime used in Cloud Foundry. If youâ€™re just getting started with building Node.js applications for Cloud Foundry, you may have a lot of questions about best practices for this runtime environment. How can you test an application locally? Should you push your package dependencies, or let the staging machine download them? Should you be pushing your Node.js applications as Docker containers? How do you deal with private packages? How do you debug your application?

This presentation will cover these questions and more, by building a new Node.js application designed to be run in Cloud Foundry. Existing Node.js developers will probably learn a trick or two as well!

Joe Doyle
NodeSource
Solutions Architect Manager
San Francisco Bay Area
Twitter Tweet  Websitehttps://nodesource.com
Joe Doyle is the Solutions Architect Manager at NodeSource. He has been working with Node.js and JavaScript for the last 5 years. Today much of his focus is on helping enterprise customers be successful with Node.js leveraging NodeSource products such as N|Solid and working to support the open-source Node.js community in general.

Patrick Mueller
NodeSource
Senior Node Engineer
Patrick Mueller is a Senior Node Engineer at NodeSource, and has been using Node.js as his primary development runtime since 2010. Patrick worked at IBM for 30 years, developing a variety of software platforms including IDEs, mobile runtimes and libraries, and server platforms including IBM Bluemix. He is the primary contributor of the popular "cfenv" Node.js package which provides complete environmental information about your Node.js applications running in Cloud Foundry. Patrick has previously presented at OSCON, GOTO Nights, Nodevember, Node Interactive, and other conferences.
Captions: 
	00:00:00,000 --> 00:00:03,510
Andriy and how are we gonna get started

00:00:01,500 --> 00:00:06,210
with node what are some best practices

00:00:03,510 --> 00:00:07,620
what are some of the ways node is kind

00:00:06,210 --> 00:00:10,200
of different than maybe what you're used

00:00:07,620 --> 00:00:13,950
to for other technology stacks inside of

00:00:10,200 --> 00:00:16,199
Cloud Foundry so first of all who am I

00:00:13,950 --> 00:00:18,449
so my name is Joe Doyle solutions

00:00:16,199 --> 00:00:20,250
architect manager at node source we are

00:00:18,449 --> 00:00:23,189
a gold member inside the node.js

00:00:20,250 --> 00:00:25,260
foundation I am a longtime node.js

00:00:23,189 --> 00:00:28,080
developer before there was a node

00:00:25,260 --> 00:00:29,369
foundation I'm also a co organizer for

00:00:28,080 --> 00:00:30,810
the SF node Meetup

00:00:29,369 --> 00:00:33,000
so if you live in the Bay Area and

00:00:30,810 --> 00:00:35,219
should node we meet the first Thursday

00:00:33,000 --> 00:00:37,020
of every month in addition I like to

00:00:35,219 --> 00:00:38,940
reach out where I can to help new

00:00:37,020 --> 00:00:41,129
developers kind of enter the node.js

00:00:38,940 --> 00:00:42,899
community so I'm a mentor at node school

00:00:41,129 --> 00:00:44,910
Oakland which is an opportunity for

00:00:42,899 --> 00:00:47,120
folks that are new to JavaScript new to

00:00:44,910 --> 00:00:50,010
node vixie come get you know one-on-one

00:00:47,120 --> 00:00:52,620
mentoring learning how to use the

00:00:50,010 --> 00:00:54,989
platform in addition one of the slides

00:00:52,620 --> 00:00:57,539
mark highlighted was that crazy large

00:00:54,989 --> 00:00:59,340
spike in node.js contributors I also

00:00:57,539 --> 00:01:02,010
helped out with something called node.js

00:00:59,340 --> 00:01:04,049
code and learn which is really a program

00:01:02,010 --> 00:01:05,760
meant to help first-time contributors to

00:01:04,049 --> 00:01:09,420
the node.js project make their first

00:01:05,760 --> 00:01:12,060
commit to the core also I'm a windows

00:01:09,420 --> 00:01:13,650
advocate using a Mac today but I started

00:01:12,060 --> 00:01:15,930
my node.js journey on Windows and have a

00:01:13,650 --> 00:01:18,210
very long windows background so I want

00:01:15,930 --> 00:01:20,009
to see Microsoft is involved in not only

00:01:18,210 --> 00:01:22,530
nodejs but also the Cloud Foundry

00:01:20,009 --> 00:01:24,600
foundation and you can pretty much find

00:01:22,530 --> 00:01:26,159
being everywhere as Joe Doyle 23 on the

00:01:24,600 --> 00:01:28,080
Internet unfortunately have a super

00:01:26,159 --> 00:01:30,420
common name ranging from Olympic

00:01:28,080 --> 00:01:32,909
swimmers to congressmen to professional

00:01:30,420 --> 00:01:36,720
photographers so the 23 unfortunately is

00:01:32,909 --> 00:01:37,799
very important so getting started you

00:01:36,720 --> 00:01:39,509
know we a lot of folks who raise their

00:01:37,799 --> 00:01:41,040
hand when they talked about who is using

00:01:39,509 --> 00:01:42,899
node and a lot of folks raise their hand

00:01:41,040 --> 00:01:45,720
saying who's using other technologies

00:01:42,899 --> 00:01:47,070
such as Java one of the things that you

00:01:45,720 --> 00:01:50,549
know Mark really kind of highlighted is

00:01:47,070 --> 00:01:52,409
node is pretty much everywhere now most

00:01:50,549 --> 00:01:54,869
fortune 500 companies have no js'

00:01:52,409 --> 00:01:58,320
running in production or have plans to

00:01:54,869 --> 00:02:00,119
do so very shortly and a lot of you know

00:01:58,320 --> 00:02:02,670
what we kind of talked about with he had

00:02:00,119 --> 00:02:04,920
better numbers but really a lot of

00:02:02,670 --> 00:02:07,619
companies are seeing developer

00:02:04,920 --> 00:02:09,750
satisfaction developer productivity be

00:02:07,619 --> 00:02:11,700
really a strong benefit to why they want

00:02:09,750 --> 00:02:13,380
to bring nodejs into their environment

00:02:11,700 --> 00:02:14,820
in the first place you know as

00:02:13,380 --> 00:02:17,040
a lot of that might be attributed to the

00:02:14,820 --> 00:02:18,690
rise in single page applications on the

00:02:17,040 --> 00:02:20,970
web frontend we're getting more and more

00:02:18,690 --> 00:02:22,890
JavaScript experience so now being able

00:02:20,970 --> 00:02:24,540
to leverage those same resources writing

00:02:22,890 --> 00:02:26,550
the same server-side application is

00:02:24,540 --> 00:02:28,200
turning out to be a huge benefit for

00:02:26,550 --> 00:02:29,700
companies as they move forward in

00:02:28,200 --> 00:02:32,430
adopting javascript in the front end and

00:02:29,700 --> 00:02:33,540
the back end in addition we kind of

00:02:32,430 --> 00:02:36,630
talked a little bit about the rise in

00:02:33,540 --> 00:02:38,820
service you know nodejs is really a

00:02:36,630 --> 00:02:41,070
high-throughput system while at the same

00:02:38,820 --> 00:02:42,900
time consuming far less resources than a

00:02:41,070 --> 00:02:45,030
lot of previous stacks that companies

00:02:42,900 --> 00:02:47,250
are used to so this really allows you to

00:02:45,030 --> 00:02:49,020
kind of operate node in a very different

00:02:47,250 --> 00:02:51,300
way than you would approach your Java

00:02:49,020 --> 00:02:53,280
or.net stacks because of that low

00:02:51,300 --> 00:02:55,500
resource utilization while getting up to

00:02:53,280 --> 00:02:57,540
a 20x performance increase for certain

00:02:55,500 --> 00:02:59,070
types of traffic finally as Mark

00:02:57,540 --> 00:03:02,100
mentioned you know nodejs

00:02:59,070 --> 00:03:06,090
is everywhere you eight million users

00:03:02,100 --> 00:03:10,320
worldwide and the NPM package ecosystem

00:03:06,090 --> 00:03:12,540
is over 410,000 packages and growing so

00:03:10,320 --> 00:03:14,670
it's really there's a huge community

00:03:12,540 --> 00:03:16,500
lots of resources and everyone's very

00:03:14,670 --> 00:03:20,220
highly engaged in making sure that no

00:03:16,500 --> 00:03:21,390
js' in general is successful so now we

00:03:20,220 --> 00:03:25,350
come to where we want to talk about

00:03:21,390 --> 00:03:27,480
today no js' on Cloud Foundry so one of

00:03:25,350 --> 00:03:29,820
the great benefits to node.js is that

00:03:27,480 --> 00:03:31,890
low resource utilization so when we

00:03:29,820 --> 00:03:34,740
start to look at matching up with Cloud

00:03:31,890 --> 00:03:37,200
Foundry that really starts to speak to

00:03:34,740 --> 00:03:38,760
some a node strong suits because we're

00:03:37,200 --> 00:03:40,800
using less resources than traditional

00:03:38,760 --> 00:03:42,900
stacks it's usually easier to kind of

00:03:40,800 --> 00:03:44,640
get more efficiency out of your already

00:03:42,900 --> 00:03:46,860
provisioned Cloud Foundry stack by

00:03:44,640 --> 00:03:48,570
leveraging microservices you know all

00:03:46,860 --> 00:03:50,730
your node instances are gonna take less

00:03:48,570 --> 00:03:52,680
memory less CPU so we can start to have

00:03:50,730 --> 00:03:54,360
more of these micro services all on the

00:03:52,680 --> 00:03:55,800
same hardware and that's something that

00:03:54,360 --> 00:03:57,600
we see time time again do as Mark

00:03:55,800 --> 00:03:59,940
mentioned you know we have quotes from

00:03:57,600 --> 00:04:01,680
like Netflix and Capital One a lot of

00:03:59,940 --> 00:04:03,630
these folks you know were started before

00:04:01,680 --> 00:04:06,300
nodejs became mainstream

00:04:03,630 --> 00:04:08,430
they had a Java base and now they're

00:04:06,300 --> 00:04:10,350
moving to node being able to get even

00:04:08,430 --> 00:04:13,400
faster throughput end up using less

00:04:10,350 --> 00:04:15,570
resources with physical hardware

00:04:13,400 --> 00:04:17,190
horizontally scaling your application is

00:04:15,570 --> 00:04:18,840
one of the great benefits of cloud

00:04:17,190 --> 00:04:21,330
foundry we can kind of scale up scale

00:04:18,840 --> 00:04:23,520
down as we see our load is increasing

00:04:21,330 --> 00:04:25,340
our demand is changing and that really

00:04:23,520 --> 00:04:27,440
speaks to the sweet spot of nodejs

00:04:25,340 --> 00:04:29,720
very start to very quick to start up

00:04:27,440 --> 00:04:31,460
very easy to design your applications in

00:04:29,720 --> 00:04:33,350
a way that is meant for horizontal

00:04:31,460 --> 00:04:34,699
scaling so as you're prototyping your

00:04:33,350 --> 00:04:36,380
app maybe you only need three instances

00:04:34,699 --> 00:04:38,840
but as you're getting ready to go to

00:04:36,380 --> 00:04:40,010
production you can scale up to 20 maybe

00:04:38,840 --> 00:04:41,210
you're a start-up and you just got hit

00:04:40,010 --> 00:04:43,550
on Hacker News and now you need to scale

00:04:41,210 --> 00:04:45,380
up to 100 Cloud Foundry makes that real

00:04:43,550 --> 00:04:48,770
easy and that kind of works in with the

00:04:45,380 --> 00:04:50,810
design principles of nodejs in addition

00:04:48,770 --> 00:04:52,760
nodejs has also kind of came around the

00:04:50,810 --> 00:04:55,460
same time folks started talking about 12

00:04:52,760 --> 00:04:56,780
factor application doing best practices

00:04:55,460 --> 00:04:59,240
around ways to easily manage

00:04:56,780 --> 00:05:01,100
configuration making sure that we're

00:04:59,240 --> 00:05:03,560
managing State in a way that scales

00:05:01,100 --> 00:05:06,680
appropriately as we're getting to large

00:05:03,560 --> 00:05:08,750
enterprise applications additionally as

00:05:06,680 --> 00:05:10,760
we talked about we are officially

00:05:08,750 --> 00:05:12,590
supported Bill pack inside a cloud

00:05:10,760 --> 00:05:14,900
foundry so no js' is a first-class

00:05:12,590 --> 00:05:17,660
citizen as you download the open source

00:05:14,900 --> 00:05:19,370
pivotal version of cloud foundry note is

00:05:17,660 --> 00:05:22,160
there and ready to go without you having

00:05:19,370 --> 00:05:23,210
to do a lot of extra work and an

00:05:22,160 --> 00:05:25,460
important thing that's that's kind of

00:05:23,210 --> 00:05:26,660
shifting inside of many of the the

00:05:25,460 --> 00:05:28,699
platforms that exist today for

00:05:26,660 --> 00:05:29,860
enterprise applications is note is

00:05:28,699 --> 00:05:32,030
really aligned well with

00:05:29,860 --> 00:05:34,120
containerization patterns that we're

00:05:32,030 --> 00:05:37,789
seeing range from docker to kubernetes

00:05:34,120 --> 00:05:39,260
running on the run c engine itself it

00:05:37,789 --> 00:05:41,360
really just kind of speaks to that

00:05:39,260 --> 00:05:42,889
community and in the docker world has

00:05:41,360 --> 00:05:48,650
already been very widely adopted as a

00:05:42,889 --> 00:05:50,479
very popular runtime in general so let's

00:05:48,650 --> 00:05:52,280
talk about the nodejs build pack that's

00:05:50,479 --> 00:05:54,470
really our our entry point into the

00:05:52,280 --> 00:05:55,940
cloud foundry environment for folks that

00:05:54,470 --> 00:05:58,430
are familiar with cloud foundry build

00:05:55,940 --> 00:06:00,200
packs are not really anything new you

00:05:58,430 --> 00:06:02,750
know we're if you're worked with Heroku

00:06:00,200 --> 00:06:06,020
the same kind of build pack concept

00:06:02,750 --> 00:06:07,550
fulls right through to cloud foundry and

00:06:06,020 --> 00:06:09,440
because we're a system build pack as we

00:06:07,550 --> 00:06:11,120
talked about this really helps to lower

00:06:09,440 --> 00:06:12,349
the the barrier to entry of trying to

00:06:11,120 --> 00:06:14,570
get started with nodejs

00:06:12,349 --> 00:06:16,450
on cloud foundry so as you may be

00:06:14,570 --> 00:06:18,349
bringing new applications on board

00:06:16,450 --> 00:06:20,389
really you just follow a lot of the same

00:06:18,349 --> 00:06:22,520
best practices that you're used to only

00:06:20,389 --> 00:06:25,220
now because we're running a node.js

00:06:22,520 --> 00:06:27,260
application we get the leverage cloud

00:06:25,220 --> 00:06:29,840
founders built-in capabilities to detect

00:06:27,260 --> 00:06:31,789
that we're running node so first and

00:06:29,840 --> 00:06:33,320
foremost traditionally with nodejs

00:06:31,789 --> 00:06:36,560
applications we have a special file

00:06:33,320 --> 00:06:38,300
called package.json this is our manifest

00:06:36,560 --> 00:06:40,639
for the application it

00:06:38,300 --> 00:06:42,500
helps tie in the nodejs dependencies

00:06:40,639 --> 00:06:45,169
that we are bringing in from the npm

00:06:42,500 --> 00:06:47,210
ecosystem as well as any private modules

00:06:45,169 --> 00:06:49,280
we might have developed ourselves and

00:06:47,210 --> 00:06:50,780
really kind of controls the structure of

00:06:49,280 --> 00:06:53,210
what are we bringing into our

00:06:50,780 --> 00:06:55,069
application when cloud foundry sees this

00:06:53,210 --> 00:06:56,840
package JSON it is going to

00:06:55,069 --> 00:06:58,879
automatically assume that you are

00:06:56,840 --> 00:07:00,259
running the node.js application and it

00:06:58,879 --> 00:07:03,110
will automatically then assume it should

00:07:00,259 --> 00:07:04,580
be using the node.js Bill pack this is

00:07:03,110 --> 00:07:06,110
great because this keeps our our

00:07:04,580 --> 00:07:08,120
deployment automated and simple just

00:07:06,110 --> 00:07:09,789
like we expect for any other language

00:07:08,120 --> 00:07:11,930
that we're running on Cloud Foundry

00:07:09,789 --> 00:07:14,240
there is a little thing we need to be

00:07:11,930 --> 00:07:16,639
aware of though is the the bill pack

00:07:14,240 --> 00:07:18,530
really walks us down to the version of

00:07:16,639 --> 00:07:20,900
node that were allowed to actually

00:07:18,530 --> 00:07:23,210
deploy with node actually has a

00:07:20,900 --> 00:07:25,460
relatively aggressive release schedule

00:07:23,210 --> 00:07:28,190
when it comes to point releases and

00:07:25,460 --> 00:07:30,289
minor releases that's tried to be we

00:07:28,190 --> 00:07:32,000
minify that when it comes to the LTS

00:07:30,289 --> 00:07:33,590
side of things but if you're a company

00:07:32,000 --> 00:07:34,789
looking to be aggressive on staying up

00:07:33,590 --> 00:07:37,490
to the the latest and greatest version

00:07:34,789 --> 00:07:40,250
of node you're bill pack kind of needs

00:07:37,490 --> 00:07:41,870
to match that so as an example as we can

00:07:40,250 --> 00:07:43,669
see well one of the versions of the bill

00:07:41,870 --> 00:07:45,919
pack that came that comes with the the

00:07:43,669 --> 00:07:48,259
local PCF dev that we'll kind of talk

00:07:45,919 --> 00:07:50,090
about and do a demo with is really

00:07:48,259 --> 00:07:53,060
lockdown to these specific versions of

00:07:50,090 --> 00:07:55,219
node and if you're someone who keeps up

00:07:53,060 --> 00:07:57,440
on node you realize that not all of

00:07:55,219 --> 00:07:59,719
those are the most up-to-date version so

00:07:57,440 --> 00:08:01,639
while it's great that we are built-in

00:07:59,719 --> 00:08:03,409
you also have to be a little mindful as

00:08:01,639 --> 00:08:04,699
to what version of node are you

00:08:03,409 --> 00:08:06,349
interested in running is it the latest

00:08:04,699 --> 00:08:08,150
version and then you have to make sure

00:08:06,349 --> 00:08:10,490
you you correlate that with your build

00:08:08,150 --> 00:08:12,440
pack version the great news is though

00:08:10,490 --> 00:08:14,360
the bill pack is open source and it is

00:08:12,440 --> 00:08:16,669
on github so it is inside the Cloud

00:08:14,360 --> 00:08:18,319
Foundry organization and they actually

00:08:16,669 --> 00:08:20,330
do a very good job of keeping that up to

00:08:18,319 --> 00:08:23,150
date the current version that was just

00:08:20,330 --> 00:08:25,190
released not too long ago actually does

00:08:23,150 --> 00:08:29,270
support node version 8 which is brand

00:08:25,190 --> 00:08:31,879
new inside the node community so when we

00:08:29,270 --> 00:08:33,709
use our default bill pack Cloud Foundry

00:08:31,879 --> 00:08:35,779
is going to make some assumption for us

00:08:33,709 --> 00:08:38,240
if we are not already providing these

00:08:35,779 --> 00:08:40,250
details to override this first and

00:08:38,240 --> 00:08:42,110
foremost if we are not telling Cloud

00:08:40,250 --> 00:08:44,720
Foundry a specific version of node to

00:08:42,110 --> 00:08:47,240
use it's going to pick a default version

00:08:44,720 --> 00:08:48,890
that is assigned via the bill pack in

00:08:47,240 --> 00:08:52,220
the version that we kind of highlighted

00:08:48,890 --> 00:08:54,230
that's 4.83 while that still is

00:08:52,220 --> 00:08:55,730
LTS version of node so it is safe to use

00:08:54,230 --> 00:08:58,759
in production you're gonna get security

00:08:55,730 --> 00:09:00,470
updates is ending its lifecycle inside

00:08:58,759 --> 00:09:02,029
the LTS version so it's starting to

00:09:00,470 --> 00:09:03,860
enter the maintenance mode and we're

00:09:02,029 --> 00:09:05,720
starting to get six months of only

00:09:03,860 --> 00:09:07,009
security fixes before that's gonna be

00:09:05,720 --> 00:09:10,550
deprecated and we're gonna recommend

00:09:07,009 --> 00:09:12,439
that you do not use node for branch in

00:09:10,550 --> 00:09:15,019
addition some of the defaults are a

00:09:12,439 --> 00:09:16,689
little opposite for what a traditional

00:09:15,019 --> 00:09:18,860
node.js application would require

00:09:16,689 --> 00:09:21,139
traditionally in node we don't need a

00:09:18,860 --> 00:09:23,269
lot of disk space and we don't need a

00:09:21,139 --> 00:09:25,819
lot of memory but the default so when

00:09:23,269 --> 00:09:27,800
you just push a node.js application up

00:09:25,819 --> 00:09:31,040
our is going to allocate 256 megabytes

00:09:27,800 --> 00:09:33,769
of memory and 512 megabytes of disk and

00:09:31,040 --> 00:09:35,269
we're also going to get one instance so

00:09:33,769 --> 00:09:38,000
really when it comes to starting to

00:09:35,269 --> 00:09:39,379
explore how nodes should be deployed we

00:09:38,000 --> 00:09:40,879
really want to kind of adjust that

00:09:39,379 --> 00:09:43,790
expectation

00:09:40,879 --> 00:09:46,850
you know the recommended nodejs line to

00:09:43,790 --> 00:09:49,579
use today is node 6 it's gonna have

00:09:46,850 --> 00:09:52,220
another 18 months of security and

00:09:49,579 --> 00:09:53,720
supports so that's really the safe one

00:09:52,220 --> 00:09:55,939
to kind of make sure your applications

00:09:53,720 --> 00:09:57,980
run on today but in addition we probably

00:09:55,939 --> 00:09:59,949
want to flip some of these settings a

00:09:57,980 --> 00:10:01,730
little bit so kind of an average

00:09:59,949 --> 00:10:03,649
recommendation that we have based on

00:10:01,730 --> 00:10:05,779
your your typical node.js application

00:10:03,649 --> 00:10:08,059
that we see are really you know give it

00:10:05,779 --> 00:10:10,160
half a gig of memory you know nodejs

00:10:08,059 --> 00:10:11,779
doesn't use a lot of memory it's kind of

00:10:10,160 --> 00:10:13,850
an anti-pattern if you end up having an

00:10:11,779 --> 00:10:15,889
application that's pushing all the way

00:10:13,850 --> 00:10:18,980
up to the one and a half gig heap limit

00:10:15,889 --> 00:10:21,410
for a node so really five and 512 Meg is

00:10:18,980 --> 00:10:23,500
is really kind of a common good good

00:10:21,410 --> 00:10:26,480
spot to start off with your applications

00:10:23,500 --> 00:10:28,879
128 megabytes of disk is also kind of a

00:10:26,480 --> 00:10:30,290
good recommendation again these are all

00:10:28,879 --> 00:10:31,819
things that need to be measured but

00:10:30,290 --> 00:10:33,350
these are kind of more along the lines

00:10:31,819 --> 00:10:36,050
of what we see for a typical node J

00:10:33,350 --> 00:10:37,730
nodejs application and its requirements

00:10:36,050 --> 00:10:41,300
when starting to deploy and run in

00:10:37,730 --> 00:10:45,949
production most importantly the biggest

00:10:41,300 --> 00:10:49,220
change from Java and.net is that nodejs

00:10:45,949 --> 00:10:51,350
does not use threads so instead of

00:10:49,220 --> 00:10:53,449
having lots of threads inside of our

00:10:51,350 --> 00:10:55,509
application and having that be the main

00:10:53,449 --> 00:10:58,759
way that we handle lots of traffic

00:10:55,509 --> 00:11:01,730
instead nodejs is actually executing

00:10:58,759 --> 00:11:04,309
your code single threaded now it's doing

00:11:01,730 --> 00:11:06,040
that asynchronously so we actually can

00:11:04,309 --> 00:11:08,380
still do a lot of traffic

00:11:06,040 --> 00:11:09,820
that single thread but because it still

00:11:08,380 --> 00:11:11,829
is a single thread we need to safeguard

00:11:09,820 --> 00:11:13,360
that thread and the way we do that with

00:11:11,829 --> 00:11:15,759
node is we scale out horizontally

00:11:13,360 --> 00:11:17,920
instead of running one instance of your

00:11:15,759 --> 00:11:20,800
application on a very large box and then

00:11:17,920 --> 00:11:22,720
you replicate that instead you run lots

00:11:20,800 --> 00:11:25,029
of instances of your nodejs application

00:11:22,720 --> 00:11:27,519
across however many boxes you like it

00:11:25,029 --> 00:11:29,470
can be several on the same box one on

00:11:27,519 --> 00:11:31,089
the very small box but then we scale

00:11:29,470 --> 00:11:33,069
that out horizontally and put a load

00:11:31,089 --> 00:11:35,199
balancer in front of that that way if a

00:11:33,069 --> 00:11:37,690
node.js application has one of the

00:11:35,199 --> 00:11:39,759
process die we still are load balanced

00:11:37,690 --> 00:11:40,779
across than many of them and for a lot

00:11:39,759 --> 00:11:43,089
of folks that's a very different

00:11:40,779 --> 00:11:46,120
paradigm shift when it comes to doing

00:11:43,089 --> 00:11:48,430
high-traffic sites coming from a more

00:11:46,120 --> 00:11:50,259
traditional stack like Java and.net and

00:11:48,430 --> 00:11:52,329
then starting to introduce nodejs

00:11:50,259 --> 00:11:53,620
into their application they often expect

00:11:52,329 --> 00:11:55,660
that they just need one instance on

00:11:53,620 --> 00:11:57,880
their their server with eight cores and

00:11:55,660 --> 00:12:00,370
24 gig of memory and yeah let's let's

00:11:57,880 --> 00:12:01,839
hit 10,000 concurrent connections but

00:12:00,370 --> 00:12:07,389
unfortunate that's not really the case

00:12:01,839 --> 00:12:09,130
of how node scales so some quick tips to

00:12:07,389 --> 00:12:10,899
get started most of your node.js

00:12:09,130 --> 00:12:12,819
applications are going to be listening

00:12:10,899 --> 00:12:17,319
on a port right we talked about the main

00:12:12,819 --> 00:12:19,089
use cases are for front end API mobile

00:12:17,319 --> 00:12:21,760
services things are gonna be handling

00:12:19,089 --> 00:12:23,440
traffic from the outside world and cloud

00:12:21,760 --> 00:12:25,269
font really kind of makes this easy for

00:12:23,440 --> 00:12:27,040
us because and often in node.js

00:12:25,269 --> 00:12:29,620
applications it's the best practice to

00:12:27,040 --> 00:12:31,690
accept the listening port for your

00:12:29,620 --> 00:12:34,089
application on the port environment

00:12:31,690 --> 00:12:35,920
variable and by maintaining that same

00:12:34,089 --> 00:12:38,050
best practice Cloud Foundry is gonna do

00:12:35,920 --> 00:12:39,550
the exact same thing for you so as you

00:12:38,050 --> 00:12:41,470
deploy your node.js application it's

00:12:39,550 --> 00:12:43,660
going to land somewhere inside your

00:12:41,470 --> 00:12:45,610
cloud liner cluster and it's going to

00:12:43,660 --> 00:12:47,170
just assign a port so that it can

00:12:45,610 --> 00:12:48,490
control that mapping and make it

00:12:47,170 --> 00:12:49,630
available to the outside world for you

00:12:48,490 --> 00:12:51,970
all the great automation at cloud

00:12:49,630 --> 00:12:53,860
foundry does so by continuing that best

00:12:51,970 --> 00:12:55,600
practice of using the port your server

00:12:53,860 --> 00:12:56,910
will automatically listen to the right

00:12:55,600 --> 00:12:59,350
port inside of cloud foundry

00:12:56,910 --> 00:13:01,290
automatically be mapped in just as you

00:12:59,350 --> 00:13:03,910
would expect for any other language

00:13:01,290 --> 00:13:06,579
another common question and this kind of

00:13:03,910 --> 00:13:08,290
is a deployment question new folks to

00:13:06,579 --> 00:13:10,149
note have all the time we have this

00:13:08,290 --> 00:13:11,949
folder called node underscore modules

00:13:10,149 --> 00:13:14,260
and this is really where we install all

00:13:11,949 --> 00:13:15,910
the modules for the project it's always

00:13:14,260 --> 00:13:18,399
local to the source code of your project

00:13:15,910 --> 00:13:19,190
and the question is always do i bundle

00:13:18,399 --> 00:13:21,350
that with my

00:13:19,190 --> 00:13:23,260
location to deploy it do I make it part

00:13:21,350 --> 00:13:26,300
of a deploy step to run my npm install

00:13:23,260 --> 00:13:27,860
what do i do how do i manage that and

00:13:26,300 --> 00:13:30,830
the great thing is because the bill pack

00:13:27,860 --> 00:13:32,210
is really written by nodejs experts you

00:13:30,830 --> 00:13:33,950
know Cloud Foundry has done a great job

00:13:32,210 --> 00:13:35,840
of really following nodejs best

00:13:33,950 --> 00:13:37,940
practices you don't need to worry about

00:13:35,840 --> 00:13:39,740
that Cloud Foundry bill pack will

00:13:37,940 --> 00:13:41,870
automatically do the npm install for you

00:13:39,740 --> 00:13:44,210
which means that if you have any native

00:13:41,870 --> 00:13:46,610
modules they're gonna be already set for

00:13:44,210 --> 00:13:48,380
the the linux version that's running

00:13:46,610 --> 00:13:50,000
inside of thought foundry everything is

00:13:48,380 --> 00:13:51,590
just gonna work and be automated for you

00:13:50,000 --> 00:13:53,000
so you don't need to worry about

00:13:51,590 --> 00:13:54,140
packaging those up you don't need to

00:13:53,000 --> 00:13:56,000
worry about operating system specific

00:13:54,140 --> 00:13:57,770
settings or anything along those lines

00:13:56,000 --> 00:13:59,300
the build pack will do all the right

00:13:57,770 --> 00:14:01,010
steps to make sure your nodejs

00:13:59,300 --> 00:14:01,900
applications is brought up into the

00:14:01,010 --> 00:14:04,820
cloud

00:14:01,900 --> 00:14:06,650
finally for folks that are you know

00:14:04,820 --> 00:14:08,120
experienced with Cloud Foundry you're

00:14:06,650 --> 00:14:09,800
probably familiar with these two

00:14:08,120 --> 00:14:13,070
environment variables we have V cap

00:14:09,800 --> 00:14:15,320
services and V cap application really

00:14:13,070 --> 00:14:16,610
these are you know the same in node as

00:14:15,320 --> 00:14:18,500
they are for any other language this is

00:14:16,610 --> 00:14:20,540
how Cloud Foundry is telling us about

00:14:18,500 --> 00:14:23,330
the environment that our application is

00:14:20,540 --> 00:14:25,130
spinning up in and really there's not

00:14:23,330 --> 00:14:26,600
much change you know node still needs to

00:14:25,130 --> 00:14:28,490
use those same things these are valuable

00:14:26,600 --> 00:14:30,410
information about the specific instance

00:14:28,490 --> 00:14:31,790
of the application what are the services

00:14:30,410 --> 00:14:34,250
that are being made available to me and

00:14:31,790 --> 00:14:35,390
how do I connect to them so it's still

00:14:34,250 --> 00:14:38,930
important to be able to leverage those

00:14:35,390 --> 00:14:40,640
as we go with know though we actually

00:14:38,930 --> 00:14:42,020
have a nice little helper right the

00:14:40,640 --> 00:14:44,630
great thing about the node.js community

00:14:42,020 --> 00:14:46,070
is that if there's a problem somebody

00:14:44,630 --> 00:14:48,080
has probably already made at least one

00:14:46,070 --> 00:14:50,900
package to help solve that problem for

00:14:48,080 --> 00:14:54,770
you one of my co-workers Patrick Mueller

00:14:50,900 --> 00:14:57,380
actually has a package called CFN on NPM

00:14:54,770 --> 00:15:00,110
and what it does is it reparse --is the

00:14:57,380 --> 00:15:02,150
vcap services and vcap application for

00:15:00,110 --> 00:15:04,040
you so that you have a nice and easy to

00:15:02,150 --> 00:15:05,930
use object that represents all the

00:15:04,040 --> 00:15:09,260
values being supplied to you from Cloud

00:15:05,930 --> 00:15:12,080
Foundry the best part of this is that as

00:15:09,260 --> 00:15:14,390
we saw on one of Mark slides most people

00:15:12,080 --> 00:15:15,950
aren't doing development by doing their

00:15:14,390 --> 00:15:17,750
code pushing the Cloud Foundry seeing

00:15:15,950 --> 00:15:19,190
how it works instead they want to run

00:15:17,750 --> 00:15:21,230
their application on their local machine

00:15:19,190 --> 00:15:23,150
quicker feedback loop write node runs

00:15:21,230 --> 00:15:25,520
great on your machine so one of the

00:15:23,150 --> 00:15:28,130
things that the CFM package does for us

00:15:25,520 --> 00:15:30,380
is to allow us to provide same defaults

00:15:28,130 --> 00:15:32,579
so that even though our applications is

00:15:30,380 --> 00:15:33,629
going to end up living in cloud foundry

00:15:32,579 --> 00:15:36,119
we're gonna need to know about these

00:15:33,629 --> 00:15:39,509
services the pro application specific

00:15:36,119 --> 00:15:41,369
details of our of our installation when

00:15:39,509 --> 00:15:43,230
we're running locally it's gonna provide

00:15:41,369 --> 00:15:45,329
same defaults so that we just don't blow

00:15:43,230 --> 00:15:47,369
up and meltdown going well we don't have

00:15:45,329 --> 00:15:49,199
a register we don't know what ports that

00:15:47,369 --> 00:15:51,720
way we still have that nice development

00:15:49,199 --> 00:15:53,549
cycle of being able to code locally on

00:15:51,720 --> 00:15:55,829
your machine fire up note on your local

00:15:53,549 --> 00:15:57,989
machine test it out the things look good

00:15:55,829 --> 00:16:03,600
commit push the CI and let the system

00:15:57,989 --> 00:16:05,339
flow so now we've kind of we're ready to

00:16:03,600 --> 00:16:07,559
go right what do we need to do we've got

00:16:05,339 --> 00:16:09,360
a node.js application we've figured out

00:16:07,559 --> 00:16:11,040
that we're gonna be on Cloud Foundry

00:16:09,360 --> 00:16:13,049
there are a few things that start to

00:16:11,040 --> 00:16:15,299
change a little bit from a default

00:16:13,049 --> 00:16:17,179
node.js application to one that we're

00:16:15,299 --> 00:16:19,619
trying to prepare for Cloud Foundry

00:16:17,179 --> 00:16:21,959
first and foremost this is a snippet

00:16:19,619 --> 00:16:23,549
inside of our package JSON as you

00:16:21,959 --> 00:16:25,649
mentioned this is the manifest that we

00:16:23,549 --> 00:16:28,230
have for our application all the

00:16:25,649 --> 00:16:30,839
dependencies for runtime as well as for

00:16:28,230 --> 00:16:32,220
development time and we have a special

00:16:30,839 --> 00:16:34,290
section right in the middle called

00:16:32,220 --> 00:16:36,899
engines and we see we have a sub value

00:16:34,290 --> 00:16:39,509
called node this is something that I

00:16:36,899 --> 00:16:42,299
believe started with Heroku back in the

00:16:39,509 --> 00:16:46,259
day and this allows your infrastructure

00:16:42,299 --> 00:16:48,480
to query the package.json and let your

00:16:46,259 --> 00:16:51,239
application tell its what the best

00:16:48,480 --> 00:16:53,549
version of node we should be running so

00:16:51,239 --> 00:16:55,709
this is the way that Cloud Foundry bill

00:16:53,549 --> 00:16:58,259
pack will do its best to respect that

00:16:55,709 --> 00:16:59,459
version request as we mentioned you know

00:16:58,259 --> 00:17:02,040
the build pack is limited to the

00:16:59,459 --> 00:17:04,529
versions that we have available but if

00:17:02,040 --> 00:17:07,010
you have one inside of this this format

00:17:04,529 --> 00:17:09,389
it will do its best to to respect that

00:17:07,010 --> 00:17:11,370
in addition we still get to also

00:17:09,389 --> 00:17:12,510
leverage some of the you know common

00:17:11,370 --> 00:17:14,429
things that were used to for Cloud

00:17:12,510 --> 00:17:16,949
Foundry so we still also will have a

00:17:14,429 --> 00:17:19,350
manifest Yama file that allows us to

00:17:16,949 --> 00:17:21,299
control how is our application going to

00:17:19,350 --> 00:17:23,309
be deployed what are the resources that

00:17:21,299 --> 00:17:26,220
we need how many instances do we need

00:17:23,309 --> 00:17:27,779
and so this is kind of a quick little

00:17:26,220 --> 00:17:29,190
snippet of it you know we can see we

00:17:27,779 --> 00:17:31,529
also have environment variables that we

00:17:29,190 --> 00:17:32,820
want to make sure we pass down into it's

00:17:31,529 --> 00:17:36,000
a Cloud Foundry that are available for

00:17:32,820 --> 00:17:37,649
our application again this is standard

00:17:36,000 --> 00:17:39,630
Cloud Foundry there's nothing really

00:17:37,649 --> 00:17:41,130
specific about it except for the idea we

00:17:39,630 --> 00:17:42,840
want to make sure that we're using the

00:17:41,130 --> 00:17:44,250
right memory and disk utilization as

00:17:42,840 --> 00:17:45,690
well as we have more than one

00:17:44,250 --> 00:17:49,440
instance in case our application runs

00:17:45,690 --> 00:17:51,690
into problems so real quick we'll jump

00:17:49,440 --> 00:17:55,230
in and do a real quick push just to

00:17:51,690 --> 00:18:02,730
highlight how simple this is if we can

00:17:55,230 --> 00:18:10,560
actually get there so I have a simple

00:18:02,730 --> 00:18:11,850
node.js application and someday as we

00:18:10,560 --> 00:18:14,280
mentioned we are going to figure out how

00:18:11,850 --> 00:18:16,560
to do projectors in an easy way and it's

00:18:14,280 --> 00:18:18,690
gonna be magical so I have a really

00:18:16,560 --> 00:18:20,520
simple node.js application already set

00:18:18,690 --> 00:18:22,410
up basically it's using all the settings

00:18:20,520 --> 00:18:25,130
that we we just showed inside of our

00:18:22,410 --> 00:18:32,070
environment so the great thing about

00:18:25,130 --> 00:18:33,720
Cloud Foundry CF push and away we go so

00:18:32,070 --> 00:18:36,450
as we can see you know CF push is

00:18:33,720 --> 00:18:37,260
loading up it's doing all the work it

00:18:36,450 --> 00:18:38,670
needs to do to package up our

00:18:37,260 --> 00:18:41,040
application send it into Cloud Foundry

00:18:38,670 --> 00:18:42,540
and then from here we can see it's doing

00:18:41,040 --> 00:18:44,520
a check for our bill PACs

00:18:42,540 --> 00:18:46,170
I have already manually updated to the

00:18:44,520 --> 00:18:51,330
the latest bill PAC so that I can

00:18:46,170 --> 00:18:53,810
support 6.10 and it appears to be done

00:18:51,330 --> 00:18:53,810
loading it again

00:18:57,930 --> 00:19:01,620
so our bill succeeded as you can see

00:19:00,090 --> 00:19:03,510
here in the middle was kind of a whole

00:19:01,620 --> 00:19:04,920
bunch of lines and they kind of have

00:19:03,510 --> 00:19:05,970
node modules in it that's actually

00:19:04,920 --> 00:19:08,220
called finally going ahead and

00:19:05,970 --> 00:19:11,220
installing our our modules for us to

00:19:08,220 --> 00:19:14,340
make sure that everything is included in

00:19:11,220 --> 00:19:15,690
our production dependencies is there and

00:19:14,340 --> 00:19:18,000
sure enough we see we've got our three

00:19:15,690 --> 00:19:22,860
applications running so if we jump back

00:19:18,000 --> 00:19:24,210
over to our UI we can see we have our CF

00:19:22,860 --> 00:19:26,160
demo app running we've got three

00:19:24,210 --> 00:19:28,230
instances and sure enough everything has

00:19:26,160 --> 00:19:32,790
been respected about our our manifest

00:19:28,230 --> 00:19:40,050
yamo if we go through and take a look at

00:19:32,790 --> 00:19:41,910
one of our routes we can actually see we

00:19:40,050 --> 00:19:43,500
are running Cloud Foundry not only that

00:19:41,910 --> 00:19:46,020
but I added a fun little trick we have

00:19:43,500 --> 00:19:48,120
the host as Escada foundry reports it to

00:19:46,020 --> 00:19:50,760
us and so I said we had we should have

00:19:48,120 --> 00:19:53,100
three instances of that so if I go ahead

00:19:50,760 --> 00:19:55,470
and refresh you'll notice that good of

00:19:53,100 --> 00:19:57,180
our host is changing so not only did

00:19:55,470 --> 00:19:58,950
cloud foundry deploy our application for

00:19:57,180 --> 00:20:00,780
us it's also automatically well

00:19:58,950 --> 00:20:06,540
balancing which is exactly what we want

00:20:00,780 --> 00:20:08,220
for a node.js application so there's

00:20:06,540 --> 00:20:09,870
another alternative that's starting to

00:20:08,220 --> 00:20:12,150
become more popular in the cloud foundry

00:20:09,870 --> 00:20:13,680
ecosystem and something that exists

00:20:12,150 --> 00:20:15,990
today but not quite as first-class

00:20:13,680 --> 00:20:17,610
citizen we're hearing more about it you

00:20:15,990 --> 00:20:19,740
know when we talk about garden with

00:20:17,610 --> 00:20:22,800
Runcie and being able to take advantage

00:20:19,740 --> 00:20:24,750
of docker containers and bring those

00:20:22,800 --> 00:20:27,660
images into cloud foundry and and run

00:20:24,750 --> 00:20:30,390
that way so some of the benefits that we

00:20:27,660 --> 00:20:32,820
get everything is bundled together right

00:20:30,390 --> 00:20:34,560
it's kind of one blob that represents

00:20:32,820 --> 00:20:37,500
your application it can be pushed around

00:20:34,560 --> 00:20:39,270
anywhere it needs to be we can choose

00:20:37,500 --> 00:20:42,120
the version of node we want regardless

00:20:39,270 --> 00:20:44,790
of whatever build pack we have installed

00:20:42,120 --> 00:20:47,310
onto the system it's also then portable

00:20:44,790 --> 00:20:49,800
across systems we can run this container

00:20:47,310 --> 00:20:51,630
inside of a foundry we can run it inside

00:20:49,800 --> 00:20:53,610
of kubernetes I can run it on my local

00:20:51,630 --> 00:20:56,880
Mac with docker for Windows or doctor

00:20:53,610 --> 00:20:58,410
for Mac it's all kind of there for us

00:20:56,880 --> 00:21:00,480
making it really simple to have that

00:20:58,410 --> 00:21:03,300
build artifact kind of locked in place

00:21:00,480 --> 00:21:05,450
easy to test anywhere we also are able

00:21:03,300 --> 00:21:07,410
to then leverage the large ecosystem of

00:21:05,450 --> 00:21:07,890
pre-existing docker containers that

00:21:07,410 --> 00:21:10,290
exist

00:21:07,890 --> 00:21:11,380
much like nodejs where if there's a

00:21:10,290 --> 00:21:13,900
problem there's probably

00:21:11,380 --> 00:21:15,820
in package that solves it if there is a

00:21:13,900 --> 00:21:17,740
piece of software out there that has

00:21:15,820 --> 00:21:19,360
terrible configuration settings and you

00:21:17,740 --> 00:21:19,809
need to read for blog posts to figure

00:21:19,360 --> 00:21:21,429
that out

00:21:19,809 --> 00:21:23,919
there's probably a docker image that

00:21:21,429 --> 00:21:28,270
already is set up and lets you do that

00:21:23,919 --> 00:21:30,820
software without any headache at all so

00:21:28,270 --> 00:21:33,789
the best part is a new versions of Cloud

00:21:30,820 --> 00:21:36,400
Foundry this is already built in it's

00:21:33,789 --> 00:21:37,620
just not turned on as a lot a lot of was

00:21:36,400 --> 00:21:40,539
talked about in some of the keynotes

00:21:37,620 --> 00:21:41,289
security is a really important aspect of

00:21:40,539 --> 00:21:45,159
Cloud Foundry

00:21:41,289 --> 00:21:46,750
and while docker is in use and a lot of

00:21:45,159 --> 00:21:49,360
production environments there are often

00:21:46,750 --> 00:21:51,909
a lot of questions around how secure is

00:21:49,360 --> 00:21:52,659
docker what are the edge cases we need

00:21:51,909 --> 00:21:54,400
to worry about

00:21:52,659 --> 00:21:56,760
so Cloud Foundry is taking a responsible

00:21:54,400 --> 00:21:59,169
approach to make sure that as this new

00:21:56,760 --> 00:22:01,179
you know derivative of running

00:21:59,169 --> 00:22:02,890
containers inside of Cloud Foundry that

00:22:01,179 --> 00:22:05,890
everything is secure everything is done

00:22:02,890 --> 00:22:07,240
correctly so all we need to do is if

00:22:05,890 --> 00:22:08,860
you're an administrator inside of your

00:22:07,240 --> 00:22:10,740
your environment you can enable the

00:22:08,860 --> 00:22:13,659
feature flag for diego underscore docker

00:22:10,740 --> 00:22:17,230
and then step three is prophet right now

00:22:13,659 --> 00:22:20,250
we can use docker unfortunately there

00:22:17,230 --> 00:22:23,440
are some things we need to be aware of

00:22:20,250 --> 00:22:25,360
first and foremost these docker images

00:22:23,440 --> 00:22:28,000
are not pre baked and build packs

00:22:25,360 --> 00:22:28,740
they're not already sitting on a system

00:22:28,000 --> 00:22:31,059
somewhere

00:22:28,740 --> 00:22:32,530
basically your cloud foundry environment

00:22:31,059 --> 00:22:35,140
needs to go and get those images to

00:22:32,530 --> 00:22:36,820
bring them in to be able to run them and

00:22:35,140 --> 00:22:39,370
there are some caveats around that that

00:22:36,820 --> 00:22:40,900
can make things difficult so first and

00:22:39,370 --> 00:22:43,419
foremost it needs to be an accessible

00:22:40,900 --> 00:22:45,669
registry and it has to have a valid SSL

00:22:43,419 --> 00:22:48,400
surgeon certificate so the good news is

00:22:45,669 --> 00:22:51,280
docker hub is the main central

00:22:48,400 --> 00:22:52,600
repository for doctor images but that

00:22:51,280 --> 00:22:54,880
also assumes that you are allowing

00:22:52,600 --> 00:22:56,710
internet access from your Cloud Foundry

00:22:54,880 --> 00:22:59,230
environments and based on our experience

00:22:56,710 --> 00:23:01,600
that note source that is not always the

00:22:59,230 --> 00:23:05,200
common case so that's kind of a little

00:23:01,600 --> 00:23:07,179
roadblock but dr. allows you to host

00:23:05,200 --> 00:23:09,610
your own repository inside your own

00:23:07,179 --> 00:23:10,809
firewall inside your environments the

00:23:09,610 --> 00:23:13,450
problem then is you need to make sure

00:23:10,809 --> 00:23:16,419
you have a valid SSL certificate as far

00:23:13,450 --> 00:23:18,760
as your cluster considers so that means

00:23:16,419 --> 00:23:20,530
you need to run some form of PKI inside

00:23:18,760 --> 00:23:22,299
being able to manage those certificates

00:23:20,530 --> 00:23:24,350
and already have a way to trust a

00:23:22,299 --> 00:23:27,289
certificate that you generate and

00:23:24,350 --> 00:23:29,059
now again these are these are

00:23:27,289 --> 00:23:30,919
difficulties only because docker is

00:23:29,059 --> 00:23:32,570
trying to figure out security these are

00:23:30,919 --> 00:23:34,070
best practices that Cloud Foundry is

00:23:32,570 --> 00:23:34,490
following so they are doing the right

00:23:34,070 --> 00:23:36,370
thing

00:23:34,490 --> 00:23:38,510
it just it's kind of hard to make docker

00:23:36,370 --> 00:23:41,630
catch up all the time but they're doing

00:23:38,510 --> 00:23:42,980
a good job of getting there and finally

00:23:41,630 --> 00:23:44,299
as we mentioned you know this feature

00:23:42,980 --> 00:23:46,730
flag needs to be turned on by an

00:23:44,299 --> 00:23:48,470
administrator also from our experience

00:23:46,730 --> 00:23:51,500
the folks that are building the

00:23:48,470 --> 00:23:53,570
applications never have this right to

00:23:51,500 --> 00:23:55,250
turn how this permission the

00:23:53,570 --> 00:23:57,440
administration of the cluster and then

00:23:55,250 --> 00:23:59,030
the ability to push applications are

00:23:57,440 --> 00:24:01,820
usually very well controlled well

00:23:59,030 --> 00:24:02,750
separated roles of responsibilities so

00:24:01,820 --> 00:24:04,669
it be something you would need to work

00:24:02,750 --> 00:24:08,210
with your own operations folks to be

00:24:04,669 --> 00:24:10,010
able to test this out the fun thing is

00:24:08,210 --> 00:24:13,760
we still do an almost identical

00:24:10,010 --> 00:24:15,500
deployment we can still do CF push with

00:24:13,760 --> 00:24:17,750
our application the only difference is

00:24:15,500 --> 00:24:21,049
we have a new flag - - docker image

00:24:17,750 --> 00:24:23,559
which allows us to specify what image is

00:24:21,049 --> 00:24:26,570
going to be used for our application

00:24:23,559 --> 00:24:29,000
this can be any doctor image that exists

00:24:26,570 --> 00:24:30,679
it can be your own nodejs application

00:24:29,000 --> 00:24:32,990
that you've just created and bundled up

00:24:30,679 --> 00:24:34,340
it can be any sort of project that

00:24:32,990 --> 00:24:36,980
exists out there maybe you want to use

00:24:34,340 --> 00:24:38,960
Redis maybe you have a some form of my

00:24:36,980 --> 00:24:41,870
sequel or graphics magic packaged up in

00:24:38,960 --> 00:24:43,580
an image really doesn't matter the most

00:24:41,870 --> 00:24:45,530
exciting part of this is that the

00:24:43,580 --> 00:24:48,200
manifest at yamo is going to be

00:24:45,530 --> 00:24:51,020
respected if you run the CF push in a

00:24:48,200 --> 00:24:53,000
directory with the manifest for your

00:24:51,020 --> 00:24:54,770
application so even though we kind of

00:24:53,000 --> 00:24:57,620
have changed where the source comes from

00:24:54,770 --> 00:24:59,600
we still are able to leverage the same

00:24:57,620 --> 00:25:01,159
kind of infrastructure tooling around

00:24:59,600 --> 00:25:03,470
how do we describe the resource

00:25:01,159 --> 00:25:07,490
utilization how many instances do we

00:25:03,470 --> 00:25:09,320
need for each application and of course

00:25:07,490 --> 00:25:13,400
we can go take a look at that and see

00:25:09,320 --> 00:25:15,850
what it looks like as soon as screen

00:25:13,400 --> 00:25:15,850
catches up

00:25:48,090 --> 00:25:51,380
[Laughter]

00:25:51,559 --> 00:26:01,549
we'll try the quicker over those two

00:25:53,759 --> 00:26:01,549
suggestions okay

00:26:05,399 --> 00:26:11,279
so as we can see try and make this more

00:26:07,979 --> 00:26:13,079
visible we get to use our same CF push

00:26:11,279 --> 00:26:16,589
command I gave it a little bit different

00:26:13,079 --> 00:26:18,809
name but this is a prebuilt command this

00:26:16,589 --> 00:26:21,149
image is actually live and available so

00:26:18,809 --> 00:26:23,789
if you go to doctor hub notes or /tf

00:26:21,149 --> 00:26:25,049
demo you can actually play with play

00:26:23,789 --> 00:26:25,940
with this image itself it's not very

00:26:25,049 --> 00:26:28,349
exciting

00:26:25,940 --> 00:26:30,539
but we go through we see a very similar

00:26:28,349 --> 00:26:32,940
process cloud founder is going through

00:26:30,539 --> 00:26:35,849
allocating our application making sure

00:26:32,940 --> 00:26:39,179
that if there's a previous version we're

00:26:35,849 --> 00:26:41,519
overriding that as needed and we go

00:26:39,179 --> 00:26:43,169
through I've already kind of cheated for

00:26:41,519 --> 00:26:44,429
you know make sure the demo gods don't

00:26:43,169 --> 00:26:46,649
frown on me and the image is already

00:26:44,429 --> 00:26:48,359
inside of my my cloud foundry

00:26:46,649 --> 00:26:50,429
environment so as we see right away

00:26:48,359 --> 00:26:55,559
we're spinning up our three instances

00:26:50,429 --> 00:27:03,119
just as our yamo manifest requested if

00:26:55,559 --> 00:27:05,069
we jump back to here we can see we can

00:27:03,119 --> 00:27:07,679
see our our CF demo docker instance

00:27:05,069 --> 00:27:11,969
isn't is now running we have our three

00:27:07,679 --> 00:27:14,609
instances and if we go to our routes we

00:27:11,969 --> 00:27:17,999
see our happy bender just as we expect

00:27:14,609 --> 00:27:19,409
and again we refresh we're already been

00:27:17,999 --> 00:27:20,579
automatically getting our load balancing

00:27:19,409 --> 00:27:24,329
and away we go

00:27:20,579 --> 00:27:26,459
so this portion isn't necessarily no js'

00:27:24,329 --> 00:27:29,219
specific but what you end up finding

00:27:26,459 --> 00:27:31,169
inside of the node.js community is as

00:27:29,219 --> 00:27:33,690
Mark mentioned docker and

00:27:31,169 --> 00:27:35,699
containerization is really a paradigm

00:27:33,690 --> 00:27:38,009
that fits well with nodejs and how

00:27:35,699 --> 00:27:40,109
nodejs applications are designed to be

00:27:38,009 --> 00:27:42,299
stateless and make it easy to scale

00:27:40,109 --> 00:27:44,129
horizontally so containers are just kind

00:27:42,299 --> 00:27:46,109
of one of those ways that that helps

00:27:44,129 --> 00:27:52,549
assist that which is why we really we

00:27:46,109 --> 00:27:52,549
mention it so jumping back

00:28:10,309 --> 00:28:15,049
so that's what we have for today so

00:28:11,779 --> 00:28:25,279
thank you very much we have time for

00:28:15,049 --> 00:28:27,980
questions how to push a container I was

00:28:25,279 --> 00:28:29,390
wondering if it's when you're running an

00:28:27,980 --> 00:28:31,970
application container it's kind of a

00:28:29,390 --> 00:28:33,830
long-running process if you will so is

00:28:31,970 --> 00:28:35,600
it possible to control from Cloud

00:28:33,830 --> 00:28:38,240
Foundry or from launch from an

00:28:35,600 --> 00:28:39,590
application a container they said you

00:28:38,240 --> 00:28:41,390
have an application running already in

00:28:39,590 --> 00:28:42,700
profond ring and from there you want

00:28:41,390 --> 00:28:45,950
your launcher container kind of a

00:28:42,700 --> 00:28:48,559
interfacing with the container so I

00:28:45,950 --> 00:28:51,020
haven't I'm burning Cloud Foundry myself

00:28:48,559 --> 00:28:52,549
as we go through and there's not a lot

00:28:51,020 --> 00:28:54,799
of information about some of the

00:28:52,549 --> 00:28:56,169
specifics around some of the running

00:28:54,799 --> 00:28:58,279
docker images inside of cloud foundry

00:28:56,169 --> 00:29:01,039
that's something that is expanding and

00:28:58,279 --> 00:29:02,360
growing inside the Coe system and there

00:29:01,039 --> 00:29:30,049
may be someone in the room that might

00:29:02,360 --> 00:29:31,760
have a better answer for sure I actually

00:29:30,049 --> 00:29:35,179
don't have any off the top of my head

00:29:31,760 --> 00:29:38,870
I'm sure Google will probably be a

00:29:35,179 --> 00:29:40,610
better suggestion it is it is a common

00:29:38,870 --> 00:29:43,309
practice to - maybe not necessary file

00:29:40,610 --> 00:29:46,100
every every step but the majority of the

00:29:43,309 --> 00:29:47,600
12 steps around the way configuration is

00:29:46,100 --> 00:29:49,399
broken out environment burials and all

00:29:47,600 --> 00:29:50,899
those types of things so I don't have a

00:29:49,399 --> 00:29:53,179
great answer for a specific example but

00:29:50,899 --> 00:29:56,210
I'm sure we could Google one and find a

00:29:53,179 --> 00:29:57,610
very good example okay thank you very

00:29:56,210 --> 00:30:02,449
much Joe all right thank you

00:29:57,610 --> 00:30:02,449

YouTube URL: https://www.youtube.com/watch?v=TxFOb-zyna4


