Title: Architecture and Performance of Royal Bank of Canada’s Online Banking Application
Publication date: 2017-06-22
Playlist: Cloud Foundry Summit Silicon Valley 2017
Description: 
	Architecture and Performance of Royal Bank of Canada’s Online Banking Application on Cloud Foundry Platform [I] - Surya V Duggirala, IBM & Milorad Stefanovic, Royal Bank of Canada    

As more and more Banking applications are being deployed on Cloud Foundry cloud platform, it is essential to understand their performance characteristics. In this session, we will discuss the architectural and performance characteristics of customer facing retail Online Banking application of Royal Bank of Canada on Cloud Foundry Platform. This session covers some of the specific performance challenges encountered and a prescriptive guidance to resolve them which will be applicable for many other Banking applications. This session also discusses other RBC applications in production on Cloud Foundry.

Milorad Stefanovic
Senior Director, Digital Business Channels, Royal Bank of Canada

Surya V Duggirala
IBM
STSM, IBM Watson and Cloud Platform Architecture & Performance Engineering
Greater Minneapolis-St. Paul Area
Surya Duggirala is IBM STSM responsible for Architecture and Performance of IBM Bluemix Cloud Platform. He directs a globally distributed team responsible for Bluemix performance engineering. He also leads Cloud Architecture Solution Engineering performance workgroup focused on various industry domain architectures. His special interests include designing microservices applications using scripting and cognitive technologies targeted for cloud. As a Global Technical Ambassador (GTA), he works with many customers, partners and ISVs across the world on cloud, application integration, performance and architecture.
Captions: 
	00:00:00,030 --> 00:00:06,390
okay good afternoon my name is Surya the

00:00:02,970 --> 00:00:10,920
gorilla I'm an STS M with the IBM's

00:00:06,390 --> 00:00:15,570
cloud division and with me I have metal

00:00:10,920 --> 00:00:18,630
rod from RBC Royal Bank of Canada today

00:00:15,570 --> 00:00:20,220
we're going to talk about cloud foundry

00:00:18,630 --> 00:00:24,800
in action in banking and financial

00:00:20,220 --> 00:00:27,330
sectors RBC is at the forefront of

00:00:24,800 --> 00:00:30,599
exploiting cloud foundry in their

00:00:27,330 --> 00:00:35,250
digital transformation today Miller rod

00:00:30,599 --> 00:00:37,829
and I are going to talk about how this

00:00:35,250 --> 00:00:40,379
whole cloud foundry journey at Royal

00:00:37,829 --> 00:00:43,850
Bank of Canada started and what all the

00:00:40,379 --> 00:00:46,680
applications that they're we're using

00:00:43,850 --> 00:00:48,840
deploying on cloud foundry and in fact

00:00:46,680 --> 00:00:50,899
Royal Bank of Canada has 40 applications

00:00:48,840 --> 00:00:54,690
in production right now on cloud foundry

00:00:50,899 --> 00:00:58,500
both in retail online banking as well as

00:00:54,690 --> 00:01:02,370
the commercial banking so we're going to

00:00:58,500 --> 00:01:06,540
just talk if you are some of you are an

00:01:02,370 --> 00:01:08,070
account holder of our Bank of Canada if

00:01:06,540 --> 00:01:11,430
you are looking at your account summary

00:01:08,070 --> 00:01:14,250
or paying the bill payer or anything you

00:01:11,430 --> 00:01:15,750
are in fact using Cloud Foundry right

00:01:14,250 --> 00:01:19,470
now

00:01:15,750 --> 00:01:22,020
in fact we have rolled out to six to

00:01:19,470 --> 00:01:25,200
seven millions of the retail banking

00:01:22,020 --> 00:01:30,360
customers so it is a very highly

00:01:25,200 --> 00:01:32,100
scalable platform and you know how we

00:01:30,360 --> 00:01:34,470
started this whole journey actually this

00:01:32,100 --> 00:01:36,740
RBC's Cloud Foundry journey started in

00:01:34,470 --> 00:01:43,860
back in 2015

00:01:36,740 --> 00:01:46,040
so from 2015 now as of last week you

00:01:43,860 --> 00:01:51,299
know we have around 42 applications also

00:01:46,040 --> 00:01:56,280
in production so I'll just talk about

00:01:51,299 --> 00:01:58,439
the you know RBC itself some of you may

00:01:56,280 --> 00:02:03,000
not be familiar but this is Royal Bank

00:01:58,439 --> 00:02:05,880
of Canada is a global Bank RBC is number

00:02:03,000 --> 00:02:08,679
one in Canada but also it has full

00:02:05,880 --> 00:02:13,659
global footprint in

00:02:08,679 --> 00:02:20,950
it has around 80,000 employees and also

00:02:13,659 --> 00:02:23,799
you have operations in 42 countries from

00:02:20,950 --> 00:02:25,930
RBC's strategic point of view right you

00:02:23,799 --> 00:02:29,290
know it like any other major Bank RBC

00:02:25,930 --> 00:02:31,060
has multiple lines of business you can

00:02:29,290 --> 00:02:34,090
see that you have personal commercial

00:02:31,060 --> 00:02:36,819
banking wealth management insurance

00:02:34,090 --> 00:02:41,609
investor and Treasury services all of

00:02:36,819 --> 00:02:43,870
these lines of business have multiple

00:02:41,609 --> 00:02:46,659
applications enterprise applications

00:02:43,870 --> 00:02:50,739
that we are looking at you know getting

00:02:46,659 --> 00:02:53,500
to the digital transformation and today

00:02:50,739 --> 00:02:56,319
we're going to talk about mainly the the

00:02:53,500 --> 00:02:58,810
personal and commercial banking so those

00:02:56,319 --> 00:03:02,109
are the lines of businesses that these

00:02:58,810 --> 00:03:05,099
40 applications belong and we have a

00:03:02,109 --> 00:03:08,709
technology and operations tno strategic

00:03:05,099 --> 00:03:14,769
branch which will be overseeing the

00:03:08,709 --> 00:03:18,010
digital transformation across RBC so the

00:03:14,769 --> 00:03:20,139
main reason why we are actually talking

00:03:18,010 --> 00:03:22,419
only about the personal and commercial

00:03:20,139 --> 00:03:24,669
banking right right now is because

00:03:22,419 --> 00:03:27,639
that's in the footprint and that's the

00:03:24,669 --> 00:03:30,760
number one leg of this whole alow B's

00:03:27,639 --> 00:03:32,049
and then the wealth management and other

00:03:30,760 --> 00:03:38,019
lines of business are actually following

00:03:32,049 --> 00:03:40,889
through so when we talk about RBC's

00:03:38,019 --> 00:03:44,709
business financial services portfolio

00:03:40,889 --> 00:03:47,260
one of the key pillars of that is the

00:03:44,709 --> 00:03:52,090
commercial banking and I would like to

00:03:47,260 --> 00:03:54,040
have Mel Arad from RBC talked mainly

00:03:52,090 --> 00:03:55,959
about what is the strategy in the

00:03:54,040 --> 00:03:58,389
commercial banking and how the business

00:03:55,959 --> 00:04:00,849
financial services digital portfolio is

00:03:58,389 --> 00:04:02,620
actually adopting the Cloud Foundry here

00:04:00,849 --> 00:04:04,120
similar right Thank You Surya and I'm

00:04:02,620 --> 00:04:06,099
I'm really sorry for her for missing the

00:04:04,120 --> 00:04:08,440
first portion of our presentation here

00:04:06,099 --> 00:04:10,720
today so story I pointed out my name is

00:04:08,440 --> 00:04:12,790
Miller Estefan which I keep in with RBC

00:04:10,720 --> 00:04:14,829
for for some time and prior to that

00:04:12,790 --> 00:04:16,959
actually I lived here in California for

00:04:14,829 --> 00:04:18,279
for about a year so it's always always

00:04:16,959 --> 00:04:20,600
good to be back

00:04:18,279 --> 00:04:24,150
so very briefly

00:04:20,600 --> 00:04:26,670
obviously as we pointed out is the

00:04:24,150 --> 00:04:28,560
largest Canadian Canadian bank you may

00:04:26,670 --> 00:04:31,020
or may not be familiar with RBC

00:04:28,560 --> 00:04:33,210
in case you you actually here wealth

00:04:31,020 --> 00:04:35,520
management products here in the US you

00:04:33,210 --> 00:04:37,500
may be working with our u.s. wealth

00:04:35,520 --> 00:04:38,790
management business and we recently have

00:04:37,500 --> 00:04:42,870
acquired another business here in

00:04:38,790 --> 00:04:46,290
California as well city national so what

00:04:42,870 --> 00:04:48,150
I'm going to talk about yeah no problem

00:04:46,290 --> 00:04:50,430
what I'm going to talk about here today

00:04:48,150 --> 00:04:52,620
is our business banking business banking

00:04:50,430 --> 00:04:54,510
platform on the business banking

00:04:52,620 --> 00:04:56,550
platform we serve a broad range of

00:04:54,510 --> 00:04:58,620
clients from small business clients all

00:04:56,550 --> 00:05:00,330
the way up to the largest business

00:04:58,620 --> 00:05:01,500
clients in commercial current clients in

00:05:00,330 --> 00:05:04,020
Canada

00:05:01,500 --> 00:05:06,360
the group that I'm responsible for the

00:05:04,020 --> 00:05:09,090
time management lead is is focused on

00:05:06,360 --> 00:05:11,360
digital business banking so online and

00:05:09,090 --> 00:05:13,770
mobile for our business business clients

00:05:11,360 --> 00:05:16,230
what's interesting to know about RBC is

00:05:13,770 --> 00:05:18,180
that like all other banks it has been

00:05:16,230 --> 00:05:19,800
around for a while and in case of RBC

00:05:18,180 --> 00:05:22,140
the number is 150 years so around

00:05:19,800 --> 00:05:24,840
hundred fifty years of course there is a

00:05:22,140 --> 00:05:27,510
long history of technology legacy

00:05:24,840 --> 00:05:30,300
technology that that we have in our in

00:05:27,510 --> 00:05:33,180
our stack and the group that I the time

00:05:30,300 --> 00:05:36,180
manage is not no exception to that what

00:05:33,180 --> 00:05:38,340
what you're seeing there is our current

00:05:36,180 --> 00:05:39,720
technology stack in terms of digital

00:05:38,340 --> 00:05:42,660
business channels which is the bloke

00:05:39,720 --> 00:05:46,440
that I mentioned and online banking they

00:05:42,660 --> 00:05:48,660
all sit on on on a set of all their

00:05:46,440 --> 00:05:51,090
legacy legacy systems in the back so

00:05:48,660 --> 00:05:53,700
what we have done in the in the last

00:05:51,090 --> 00:05:56,390
year or so is we have had significant

00:05:53,700 --> 00:05:59,550
push and progress in terms of digitizing

00:05:56,390 --> 00:06:01,650
everything that we do from from the full

00:05:59,550 --> 00:06:04,370
adoption of edge of methodology in terms

00:06:01,650 --> 00:06:07,320
of delivery all the way down to using

00:06:04,370 --> 00:06:11,430
cloud platform for everything new data

00:06:07,320 --> 00:06:13,470
that we are developing and and so far

00:06:11,430 --> 00:06:15,270
the the journey has been very very

00:06:13,470 --> 00:06:17,730
positive I'll talk more about that later

00:06:15,270 --> 00:06:21,180
in terms of the the clients that we

00:06:17,730 --> 00:06:24,270
serve we serve more than 600,000 small

00:06:21,180 --> 00:06:27,030
business clients we have around 60,000

00:06:24,270 --> 00:06:28,590
large commercial clients and of course

00:06:27,030 --> 00:06:31,380
with with commercial clients we have a

00:06:28,590 --> 00:06:31,800
large number of users within those those

00:06:31,380 --> 00:06:33,810
business

00:06:31,800 --> 00:06:37,110
is to the tune of around hundred eight

00:06:33,810 --> 00:06:39,569
thousand users in the in business

00:06:37,110 --> 00:06:42,419
banking as you know payments play a pay

00:06:39,569 --> 00:06:43,740
play an important part and the payments

00:06:42,419 --> 00:06:45,090
when we talk about payments we talk

00:06:43,740 --> 00:06:47,610
about business-to-business payments

00:06:45,090 --> 00:06:51,030
large corporate payments which are more

00:06:47,610 --> 00:06:52,860
than our kind of Starbucks shopping for

00:06:51,030 --> 00:06:56,090
coffee we're talking about millions of

00:06:52,860 --> 00:06:58,740
dollars that are that are being moved so

00:06:56,090 --> 00:07:01,710
why that's important the critical

00:06:58,740 --> 00:07:04,169
importance of this is that we cannot

00:07:01,710 --> 00:07:06,240
afford for our assistants to be down or

00:07:04,169 --> 00:07:08,990
for those insertion transactions not to

00:07:06,240 --> 00:07:11,759
be completed in a timely and and

00:07:08,990 --> 00:07:13,020
reliable resilient a resilient manner

00:07:11,759 --> 00:07:15,750
which is something that we have taken

00:07:13,020 --> 00:07:17,190
into account as well yeah we also

00:07:15,750 --> 00:07:19,830
provide the number of value added

00:07:17,190 --> 00:07:22,620
services to our third business clients

00:07:19,830 --> 00:07:24,360
and and that's where innovation comes

00:07:22,620 --> 00:07:25,710
that comes in so in addition to

00:07:24,360 --> 00:07:27,599
innovation that we drive within the

00:07:25,710 --> 00:07:31,469
organization it is important for us to

00:07:27,599 --> 00:07:33,780
be able to work closely with with

00:07:31,469 --> 00:07:36,330
external partners and to partner up with

00:07:33,780 --> 00:07:38,550
the FinTech companies as well and that's

00:07:36,330 --> 00:07:40,800
that's another important component of

00:07:38,550 --> 00:07:42,930
that puzzle that I mentioned earlier in

00:07:40,800 --> 00:07:46,469
terms of agility cloud infrastructure

00:07:42,930 --> 00:07:52,490
and and the ability to integrate through

00:07:46,469 --> 00:07:52,490
api's should be good too next slide

00:07:57,570 --> 00:08:03,340
okay so I think I may have actually

00:08:01,480 --> 00:08:06,300
covered some of these points here what

00:08:03,340 --> 00:08:08,260
is important to highlight is that

00:08:06,300 --> 00:08:11,050
everything new that we have been

00:08:08,260 --> 00:08:14,199
developing over the last year or so has

00:08:11,050 --> 00:08:16,750
been done as cloud native cloud native

00:08:14,199 --> 00:08:19,210
micro micro applications micro services

00:08:16,750 --> 00:08:22,630
and we also are on in the journey of

00:08:19,210 --> 00:08:24,940
taking our existing legacy monolithic

00:08:22,630 --> 00:08:27,610
applications and porting them or moving

00:08:24,940 --> 00:08:29,350
them to the cloud a cloud platform we

00:08:27,610 --> 00:08:32,050
are doing that both is lift and shift

00:08:29,350 --> 00:08:33,460
but in in cases where it makes sense we

00:08:32,050 --> 00:08:36,190
are actually making those applications

00:08:33,460 --> 00:08:38,169
much more modular and making them closer

00:08:36,190 --> 00:08:46,510
to the cloud native type of type of

00:08:38,169 --> 00:08:55,600
design okay so maybe a server can cover

00:08:46,510 --> 00:08:57,640
this part okay you can hear me now so

00:08:55,600 --> 00:09:00,370
the main thing when we have segregated

00:08:57,640 --> 00:09:03,190
all these applications as I said around

00:09:00,370 --> 00:09:04,990
30 to 40 applications they all under

00:09:03,190 --> 00:09:07,570
like retail online banking portfolio

00:09:04,990 --> 00:09:10,150
risk management rewards mobile and you

00:09:07,570 --> 00:09:14,550
know all these different categories all

00:09:10,150 --> 00:09:18,040
of these have we started with one POC

00:09:14,550 --> 00:09:21,990
the the POC is about the online retail

00:09:18,040 --> 00:09:24,670
banking so if I were an RBC customer and

00:09:21,990 --> 00:09:26,680
trying to check my you know second

00:09:24,670 --> 00:09:29,880
summary or trying to pay the bills right

00:09:26,680 --> 00:09:33,850
as I mentioned so what we were trying

00:09:29,880 --> 00:09:37,089
initially we were focusing more on the

00:09:33,850 --> 00:09:39,130
UI and security and the services because

00:09:37,089 --> 00:09:41,140
all these applications are currently

00:09:39,130 --> 00:09:44,320
deployed in mainframe and using the

00:09:41,140 --> 00:09:46,750
existing middleware so we want to take

00:09:44,320 --> 00:09:49,260
one small piece of that and then see

00:09:46,750 --> 00:09:53,620
whether cloud foundry can actually scale

00:09:49,260 --> 00:09:57,820
to to the levels that we expect and the

00:09:53,620 --> 00:10:00,160
ask was okay can we showcase 400 to 500

00:09:57,820 --> 00:10:01,610
transactions per second with sub-second

00:10:00,160 --> 00:10:05,150
response time

00:10:01,610 --> 00:10:07,400
when we run this on Cloud Foundry RBC

00:10:05,150 --> 00:10:10,490
has both you know bluemix cloud foundry

00:10:07,400 --> 00:10:13,610
local as well as dedicated the way they

00:10:10,490 --> 00:10:15,940
are using that is they have for high

00:10:13,610 --> 00:10:19,040
availability they have two data centers

00:10:15,940 --> 00:10:21,830
from a bluemix cloud foundry local point

00:10:19,040 --> 00:10:25,010
of view for a they're both active active

00:10:21,830 --> 00:10:27,170
and they get the data back from the

00:10:25,010 --> 00:10:30,500
mainframe so that's a typical pattern

00:10:27,170 --> 00:10:33,500
for most of the banking and applications

00:10:30,500 --> 00:10:38,480
so what we did we have redesigned the

00:10:33,500 --> 00:10:41,000
front-end with angularjs and we have you

00:10:38,480 --> 00:10:43,070
know we have been using the the trust

00:10:41,000 --> 00:10:45,740
association receptor plug-in for

00:10:43,070 --> 00:10:47,870
security for authentication we have

00:10:45,740 --> 00:10:50,510
actually used that we have customized

00:10:47,870 --> 00:10:52,720
that tii module and then we have used

00:10:50,510 --> 00:10:56,120
for security and we have used both

00:10:52,720 --> 00:10:59,000
mutual SSL you know authentications

00:10:56,120 --> 00:11:01,250
there right and also we have these

00:10:59,000 --> 00:11:04,070
services because the way we access the

00:11:01,250 --> 00:11:06,650
service from the backend is through a

00:11:04,070 --> 00:11:09,950
data power in between and that's the

00:11:06,650 --> 00:11:12,950
that's the whole topology so the

00:11:09,950 --> 00:11:15,950
simulation of that we started with two

00:11:12,950 --> 00:11:18,050
java applications one application is

00:11:15,950 --> 00:11:19,550
simulating the orchestration layer the

00:11:18,050 --> 00:11:21,740
second one is the stub layer which is

00:11:19,550 --> 00:11:25,040
simulating the backend interaction from

00:11:21,740 --> 00:11:27,200
the mainframe so those are the two main

00:11:25,040 --> 00:11:30,830
pillars that we have actually deployed

00:11:27,200 --> 00:11:34,520
in cloud foundry and the goal of this

00:11:30,830 --> 00:11:37,940
whole initial POC was to make sure that

00:11:34,520 --> 00:11:40,750
you know we can scale and also we can

00:11:37,940 --> 00:11:43,580
use the auto scale features are also to

00:11:40,750 --> 00:11:46,610
you know seamlessly scale and you know

00:11:43,580 --> 00:11:48,830
expand and shrink and also we wanted to

00:11:46,610 --> 00:11:51,740
demonstrate whether cloud foundry can

00:11:48,830 --> 00:11:54,620
handle this massive load with stability

00:11:51,740 --> 00:11:57,650
at this peak load running for like 24

00:11:54,620 --> 00:12:01,550
hours right so those are initial asks

00:11:57,650 --> 00:12:03,440
when we started this POC and of course

00:12:01,550 --> 00:12:05,240
you know we have

00:12:03,440 --> 00:12:07,610
come across initially when we started

00:12:05,240 --> 00:12:10,040
this whole thing we were at 12

00:12:07,610 --> 00:12:12,110
transactions per second with 90 seconds

00:12:10,040 --> 00:12:13,550
response time so we were thinking this

00:12:12,110 --> 00:12:15,050
weather cloud phone is ready for the

00:12:13,550 --> 00:12:19,160
primetime for you know this kind of

00:12:15,050 --> 00:12:22,520
banking applications and then we started

00:12:19,160 --> 00:12:24,380
working through and we have some of the

00:12:22,520 --> 00:12:27,470
issues that will be applicable for

00:12:24,380 --> 00:12:30,890
everybody right when you go from an

00:12:27,470 --> 00:12:34,220
on-premise middleware solution to cloud

00:12:30,890 --> 00:12:35,900
foundry you have to look into your

00:12:34,220 --> 00:12:37,610
application whether some of these things

00:12:35,900 --> 00:12:40,370
are ready for instance you have session

00:12:37,610 --> 00:12:42,880
of affinity if you're using the session

00:12:40,370 --> 00:12:45,800
affinity if you start using auto scaling

00:12:42,880 --> 00:12:47,510
then you view provision of course our

00:12:45,800 --> 00:12:49,810
dose scale service you know based on the

00:12:47,510 --> 00:12:51,830
traffic based on the policy you specify

00:12:49,810 --> 00:12:54,500
you can have multiple instances

00:12:51,830 --> 00:12:57,320
provisioned but if you have session

00:12:54,500 --> 00:12:59,780
affinity there then the traffic won't be

00:12:57,320 --> 00:13:01,040
directed to the other instances so it

00:12:59,780 --> 00:13:03,590
will stick to the first instance so

00:13:01,040 --> 00:13:05,120
those are some of the things that you

00:13:03,590 --> 00:13:07,570
know you need to look into when you move

00:13:05,120 --> 00:13:11,480
your applications to cloud and then

00:13:07,570 --> 00:13:14,450
other thing that we have come across was

00:13:11,480 --> 00:13:17,450
the when you're running your java or

00:13:14,450 --> 00:13:20,210
node applications from within the

00:13:17,450 --> 00:13:22,760
runtime then what will happen is the

00:13:20,210 --> 00:13:26,630
autonomic threading algorithms that

00:13:22,760 --> 00:13:30,260
these strong times will use they may not

00:13:26,630 --> 00:13:32,540
be working they may not be agile when

00:13:30,260 --> 00:13:35,300
you are having the backend service

00:13:32,540 --> 00:13:37,540
latency that is when you're accessing

00:13:35,300 --> 00:13:41,750
the mainframes if the service latency is

00:13:37,540 --> 00:13:44,960
really high then it may not really work

00:13:41,750 --> 00:13:46,970
so those are some of the main things

00:13:44,960 --> 00:13:50,690
that you know we have identified and we

00:13:46,970 --> 00:13:53,060
have looked at the alternatives to to

00:13:50,690 --> 00:13:56,300
fix those things and that's how we could

00:13:53,060 --> 00:13:59,960
get from you know like 12 transactions

00:13:56,300 --> 00:14:02,180
per second to not only beat our goal of

00:13:59,960 --> 00:14:04,430
400 to like we have gone up to 900

00:14:02,180 --> 00:14:08,570
transactions so just to put some context

00:14:04,430 --> 00:14:12,440
that we are talking about almost 80

00:14:08,570 --> 00:14:14,330
million transactions per day these are

00:14:12,440 --> 00:14:15,390
all the financial transactions they are

00:14:14,330 --> 00:14:17,190
heavy

00:14:15,390 --> 00:14:19,680
in terms of you have to bring lot of

00:14:17,190 --> 00:14:21,900
data from the mainframes and then you

00:14:19,680 --> 00:14:24,420
have to render that back on to the Greve

00:14:21,900 --> 00:14:27,120
with angularjs and also you have a lot

00:14:24,420 --> 00:14:29,670
of computations in between so these are

00:14:27,120 --> 00:14:31,070
CPU intensive transactions that we are

00:14:29,670 --> 00:14:36,360
talking about with 80 million

00:14:31,070 --> 00:14:39,830
transactions per day so some of the main

00:14:36,360 --> 00:14:44,130
benefits that we got out of this cloud

00:14:39,830 --> 00:14:46,770
journey with RBC or you know you can see

00:14:44,130 --> 00:14:49,020
that the return on investment and the

00:14:46,770 --> 00:14:52,680
client experience that we have and then

00:14:49,020 --> 00:14:54,840
the digital banking channels that we we

00:14:52,680 --> 00:14:57,000
have actually reduced the risk and cost

00:14:54,840 --> 00:15:00,530
for instance previously it used to take

00:14:57,000 --> 00:15:03,630
almost in here for us to release a

00:15:00,530 --> 00:15:06,270
second version of an app or so that from

00:15:03,630 --> 00:15:08,370
an ear to almost it has come down to

00:15:06,270 --> 00:15:10,980
like hours we can actually release the

00:15:08,370 --> 00:15:15,950
new functionality in terms of whether

00:15:10,980 --> 00:15:18,000
the front end or any other channels and

00:15:15,950 --> 00:15:22,020
also the quality and the production

00:15:18,000 --> 00:15:23,670
resiliency so I'd like to give it a

00:15:22,020 --> 00:15:26,220
mullah rod to talk a little bit about

00:15:23,670 --> 00:15:28,410
you know what we have gained you know in

00:15:26,220 --> 00:15:31,200
this journey in terms of the production

00:15:28,410 --> 00:15:33,750
resiliency and stuff sounds good thank

00:15:31,200 --> 00:15:35,370
you Thank You Surya so as I mentioned

00:15:33,750 --> 00:15:38,070
earlier this is really very much part of

00:15:35,370 --> 00:15:40,380
our digital journey going from an

00:15:38,070 --> 00:15:42,000
old-school banking institution to a

00:15:40,380 --> 00:15:43,650
digital enabled relationship bank and

00:15:42,000 --> 00:15:45,680
what you can see here is some of the key

00:15:43,650 --> 00:15:48,210
key benefits that we have seen so far

00:15:45,680 --> 00:15:50,370
the the benefits that we're looking at

00:15:48,210 --> 00:15:52,440
here are result of the agile delivery

00:15:50,370 --> 00:15:54,330
model that that we're following today

00:15:52,440 --> 00:15:56,790
and we here within digital business

00:15:54,330 --> 00:15:59,400
banking we have ten persistent agile

00:15:56,790 --> 00:16:01,650
agile teams they're also result of the

00:15:59,400 --> 00:16:02,880
DevOps processes and tools that we have

00:16:01,650 --> 00:16:06,930
adopted within a within our portfolio

00:16:02,880 --> 00:16:08,820
and the the cloud cloud platform data

00:16:06,930 --> 00:16:11,430
that we are using what you're seeing

00:16:08,820 --> 00:16:13,200
here is the improvement in production

00:16:11,430 --> 00:16:15,990
resiliency and I mentioned earlier how

00:16:13,200 --> 00:16:17,490
critical production resiliency is for

00:16:15,990 --> 00:16:19,980
for business banking we want to make

00:16:17,490 --> 00:16:21,720
sure that our application is always

00:16:19,980 --> 00:16:24,570
available for our clients and that there

00:16:21,720 --> 00:16:28,080
is no no issues in terms of the payments

00:16:24,570 --> 00:16:29,070
that we're processing we have seen more

00:16:28,080 --> 00:16:30,930
than 90 percent

00:16:29,070 --> 00:16:32,520
provement in terms of production

00:16:30,930 --> 00:16:34,110
incidents so he'll reduce the number of

00:16:32,520 --> 00:16:36,900
production incidents by more than 90

00:16:34,110 --> 00:16:39,960
percent over a short period of time of

00:16:36,900 --> 00:16:41,250
about just like the more than a year we

00:16:39,960 --> 00:16:42,570
also during that time he's seen

00:16:41,250 --> 00:16:46,770
significant improvement in terms of

00:16:42,570 --> 00:16:48,450
quality so because we measure quality of

00:16:46,770 --> 00:16:51,480
course in terms of defect arrival rate

00:16:48,450 --> 00:16:54,060
and the the quality has has improved by

00:16:51,480 --> 00:16:56,010
more than forty percent in some cases

00:16:54,060 --> 00:17:01,040
for our maintenance activities by ninety

00:16:56,010 --> 00:17:03,690
percent what you can see here as well is

00:17:01,040 --> 00:17:06,829
the the portion of the the maintenance

00:17:03,690 --> 00:17:09,060
and and new design and development

00:17:06,829 --> 00:17:17,940
projects are or actual things that we

00:17:09,060 --> 00:17:19,829
have in our portfolio so as just to

00:17:17,940 --> 00:17:22,530
provide a summary maybe maybe of

00:17:19,829 --> 00:17:24,709
everything that we have said so far we

00:17:22,530 --> 00:17:26,550
had a very positive experience so far

00:17:24,709 --> 00:17:28,800
developing everything new in our

00:17:26,550 --> 00:17:31,770
portfolio using using cloud native micro

00:17:28,800 --> 00:17:33,270
services based based architecture and we

00:17:31,770 --> 00:17:37,710
are very very much aggressively pushing

00:17:33,270 --> 00:17:40,170
in terms of modernizing and and cloud

00:17:37,710 --> 00:17:42,840
enabling our legacy applications as well

00:17:40,170 --> 00:17:45,930
at this point we have a portfolio of

00:17:42,840 --> 00:17:48,630
close to 10 micro applications that are

00:17:45,930 --> 00:17:51,330
used by all of our business business

00:17:48,630 --> 00:17:52,950
banking clients and with our release

00:17:51,330 --> 00:17:55,170
schedule based on a monthly

00:17:52,950 --> 00:17:56,970
implementations we expect that number to

00:17:55,170 --> 00:18:01,170
double in the coming coming coming

00:17:56,970 --> 00:18:04,440
months so basically from our B C's Cloud

00:18:01,170 --> 00:18:06,890
Foundry journey using bluemix is has

00:18:04,440 --> 00:18:09,120
been exceptionally positive in terms of

00:18:06,890 --> 00:18:11,190
basically there are two types of

00:18:09,120 --> 00:18:13,410
applications one is the lift and shift

00:18:11,190 --> 00:18:15,900
because they have a lot of investment

00:18:13,410 --> 00:18:18,720
that did you know invest in the

00:18:15,900 --> 00:18:20,460
middleware like maybe websphere or any

00:18:18,720 --> 00:18:23,250
other message broker all these

00:18:20,460 --> 00:18:25,140
applications without any changes to the

00:18:23,250 --> 00:18:27,000
applications they want to just deploy

00:18:25,140 --> 00:18:29,010
them and bring them onto cloud using

00:18:27,000 --> 00:18:30,780
Cloud Foundry they were very successful

00:18:29,010 --> 00:18:33,930
in that and of course we had some

00:18:30,780 --> 00:18:36,090
migration tools that we had to use for

00:18:33,930 --> 00:18:38,820
you know verifying that you know you

00:18:36,090 --> 00:18:41,280
have any other capabilities that you had

00:18:38,820 --> 00:18:43,200
on on-premise that are not there so

00:18:41,280 --> 00:18:45,480
you filter out so that it will be easy

00:18:43,200 --> 00:18:47,790
for the second type of applications or

00:18:45,480 --> 00:18:49,920
the pure cloud native and micro services

00:18:47,790 --> 00:18:51,120
the one that online banking retail

00:18:49,920 --> 00:18:53,370
application that I was talking about

00:18:51,120 --> 00:18:56,760
which is which is rolled out to six

00:18:53,370 --> 00:18:59,700
million retail customers that is a cloud

00:18:56,760 --> 00:19:03,270
native micro services application it has

00:18:59,700 --> 00:19:05,780
been written from ground up and of

00:19:03,270 --> 00:19:08,880
course it has used some existing

00:19:05,780 --> 00:19:12,690
security modules and you know things but

00:19:08,880 --> 00:19:15,870
the application is a cloud net so it has

00:19:12,690 --> 00:19:19,290
been a mix of both

00:19:15,870 --> 00:19:24,180
so the third important point that Cloud

00:19:19,290 --> 00:19:28,410
Foundry usage by RBC Royal Bank of

00:19:24,180 --> 00:19:31,380
Canada is the operations and monitoring

00:19:28,410 --> 00:19:33,900
and you know how you can diagnose any

00:19:31,380 --> 00:19:38,490
problems that you may have in production

00:19:33,900 --> 00:19:41,940
as well as during the development so we

00:19:38,490 --> 00:19:44,430
have another session around two to

00:19:41,940 --> 00:19:48,540
thirty to twenty five that talks about

00:19:44,430 --> 00:19:50,280
the monitoring and diagnostics tools

00:19:48,540 --> 00:19:55,440
that are available in Cloud Foundry and

00:19:50,280 --> 00:19:57,780
how RBC is using you know those tools to

00:19:55,440 --> 00:20:00,630
monitor and diagnose any performance

00:19:57,780 --> 00:20:04,440
issues that we have encountered in the

00:20:00,630 --> 00:20:07,860
production as well as DevOps so with

00:20:04,440 --> 00:20:10,520
with that I can open up for any

00:20:07,860 --> 00:20:10,520
questions

00:20:24,400 --> 00:20:29,060
okay so the question is okay do we see

00:20:27,470 --> 00:20:31,070
any kind of performance what is the

00:20:29,060 --> 00:20:32,780
performance characterization differences

00:20:31,070 --> 00:20:34,610
between an on premise same application

00:20:32,780 --> 00:20:36,560
running an on premise versus the same

00:20:34,610 --> 00:20:39,530
application ported and migrating in

00:20:36,560 --> 00:20:43,790
Cloud Foundry we saw a similar

00:20:39,530 --> 00:20:45,920
performance except we found if the

00:20:43,790 --> 00:20:48,770
backend service latency like when you

00:20:45,920 --> 00:20:50,630
are talking to the mainframe and if the

00:20:48,770 --> 00:20:52,490
backend service latency is actually much

00:20:50,630 --> 00:20:55,100
higher because of any reason it may be a

00:20:52,490 --> 00:20:58,250
network or anything then you may have to

00:20:55,100 --> 00:21:00,920
tween tweak and tune the runtimes

00:20:58,250 --> 00:21:03,260
because certain algorithms in the

00:21:00,920 --> 00:21:06,800
liberty or you know the the middleware

00:21:03,260 --> 00:21:08,600
runtimes they may not be agile enough if

00:21:06,800 --> 00:21:10,970
the backend service latency is much

00:21:08,600 --> 00:21:13,250
higher typically mainframe latency is

00:21:10,970 --> 00:21:16,960
anywhere from 100 to 200 milliseconds

00:21:13,250 --> 00:21:22,120
that's what we expect we simulated 2000

00:21:16,960 --> 00:21:25,450
that's when we saw really the the

00:21:22,120 --> 00:21:28,070
autonomic algorithm doesn't really

00:21:25,450 --> 00:21:29,870
adjust the thread pool size for the

00:21:28,070 --> 00:21:32,930
traffic so then the performance will

00:21:29,870 --> 00:21:34,550
come down but if that is the case you

00:21:32,930 --> 00:21:37,100
have two options either you adjust that

00:21:34,550 --> 00:21:39,740
latency or if you can't do anything in

00:21:37,100 --> 00:21:41,840
that then you have to override that

00:21:39,740 --> 00:21:44,180
autonomic algorithm with a manual you

00:21:41,840 --> 00:21:47,500
can specify the manual scheduler and

00:21:44,180 --> 00:21:47,500
then tune it that way

00:21:53,820 --> 00:21:58,059
okay so these legacy applications on

00:21:56,200 --> 00:22:01,360
Cloud Foundry we are running them on

00:21:58,059 --> 00:22:03,039
Cloud Foundry both yes websphere

00:22:01,360 --> 00:22:06,039
application let's say you have a web

00:22:03,039 --> 00:22:08,399
sphere full traditional WebSphere

00:22:06,039 --> 00:22:11,080
application like Java EE application and

00:22:08,399 --> 00:22:14,200
you are trying to actually run that on

00:22:11,080 --> 00:22:15,730
Cloud Foundry in Cloud Foundry you have

00:22:14,200 --> 00:22:19,450
Liberty application so you don't have

00:22:15,730 --> 00:22:22,899
the full traditional wasps so you have

00:22:19,450 --> 00:22:24,580
as smaller smaller footprint Liberty so

00:22:22,899 --> 00:22:28,440
as long as your application runs on

00:22:24,580 --> 00:22:28,440
Liberty it will run on cloud funding

00:22:40,830 --> 00:22:47,470
okay so the question is okay where these

00:22:44,909 --> 00:22:49,510
clients are residing and where the

00:22:47,470 --> 00:22:52,090
actual data center the cloud phone is

00:22:49,510 --> 00:22:52,720
running the the data center is in

00:22:52,090 --> 00:22:55,980
Markham

00:22:52,720 --> 00:22:58,779
that's because real in RBC's on

00:22:55,980 --> 00:23:01,690
on-premises and it is exactly the same

00:22:58,779 --> 00:23:03,549
like where our on-premise you know

00:23:01,690 --> 00:23:05,919
servers used to be there right so it's

00:23:03,549 --> 00:23:14,380
exactly the same as far as the data

00:23:05,919 --> 00:23:17,769
center is concerned for n customers yes

00:23:14,380 --> 00:23:20,559
yes we have both RBC has both bluemix

00:23:17,769 --> 00:23:24,010
local which is in production and also

00:23:20,559 --> 00:23:27,820
RBC has bluemix dedicated which they are

00:23:24,010 --> 00:23:29,980
using for development and testing so

00:23:27,820 --> 00:23:32,350
they have both bluemix the dedicated as

00:23:29,980 --> 00:23:34,990
well as bluemix local for security

00:23:32,350 --> 00:23:37,510
reasons you know they want to keep this

00:23:34,990 --> 00:23:39,309
on the local there's the production you

00:23:37,510 --> 00:23:42,240
can actually you know developers can

00:23:39,309 --> 00:23:45,610
record their things on and test it on

00:23:42,240 --> 00:23:47,950
the markham computer center there's MCC

00:23:45,610 --> 00:23:51,059
and they can actually push it to for

00:23:47,950 --> 00:23:51,059
production on to the local

00:23:56,230 --> 00:24:03,050
okay so yes we did on both local as well

00:24:00,200 --> 00:24:05,000
as dedicated because the architecture of

00:24:03,050 --> 00:24:07,250
cloud for bluemix platform is exactly

00:24:05,000 --> 00:24:10,580
the same so you will see exactly the

00:24:07,250 --> 00:24:13,850
same performance on both only difference

00:24:10,580 --> 00:24:17,000
you may see is because if you are having

00:24:13,850 --> 00:24:19,700
multiple tenants like sharing the

00:24:17,000 --> 00:24:22,670
environment let's say you have dedicated

00:24:19,700 --> 00:24:25,310
with like so many users that are running

00:24:22,670 --> 00:24:27,590
then you may see a slight little bit

00:24:25,310 --> 00:24:29,510
difference in performance otherwise you

00:24:27,590 --> 00:24:35,150
will see exactly the same performance on

00:24:29,510 --> 00:24:37,280
both local and dedicated yeah so the

00:24:35,150 --> 00:24:39,530
network latency is the latency between

00:24:37,280 --> 00:24:41,750
the runtime on the back-end services

00:24:39,530 --> 00:24:45,730
right as long as you have we have a

00:24:41,750 --> 00:24:48,290
dedicated line between these two so

00:24:45,730 --> 00:24:53,420
because you have the dedicated line the

00:24:48,290 --> 00:24:56,570
latency effects are taken care of yeah

00:24:53,420 --> 00:24:59,420
of course yeah again the end of the day

00:24:56,570 --> 00:25:02,360
you know if you have your runtime in

00:24:59,420 --> 00:25:04,550
Dallas and your database is in Toronto

00:25:02,360 --> 00:25:07,490
for instance obviously you will have the

00:25:04,550 --> 00:25:10,400
network latency as long as you know you

00:25:07,490 --> 00:25:12,950
have you know like the dedicated line

00:25:10,400 --> 00:25:15,590
with maybe you know 10 miles 20 miles 30

00:25:12,950 --> 00:25:27,860
miles the performance won't be that much

00:25:15,590 --> 00:25:31,550
impacted on the latency sorry okay shall

00:25:27,860 --> 00:25:34,400
we use in a certain window or you can do

00:25:31,550 --> 00:25:36,890
any time push application we have some

00:25:34,400 --> 00:25:40,640
controls because this is production

00:25:36,890 --> 00:25:42,530
right so we have all developers cannot

00:25:40,640 --> 00:25:44,960
just push it so we have we have to

00:25:42,530 --> 00:25:47,000
promote and we have a process to promote

00:25:44,960 --> 00:25:49,340
that and we don't have any window as

00:25:47,000 --> 00:25:51,110
long as we follow the process anytime

00:25:49,340 --> 00:25:54,380
you can actually push the promote the

00:25:51,110 --> 00:25:56,800
application from development test to

00:25:54,380 --> 00:25:56,800
production

00:25:59,260 --> 00:26:21,600
yeah okay

00:26:17,740 --> 00:26:25,330
online OLAP like online processing

00:26:21,600 --> 00:26:27,100
versus the bad kind of applications can

00:26:25,330 --> 00:26:28,990
you use both kinds of applications

00:26:27,100 --> 00:26:47,380
deploy them in bluemix cloud foundry

00:26:28,990 --> 00:26:49,470
that's your question right yes yeah so

00:26:47,380 --> 00:26:52,179
the question if I understand right that

00:26:49,470 --> 00:26:54,160
this is a common thing if you are trying

00:26:52,179 --> 00:26:56,640
to access and bring large sets of data

00:26:54,160 --> 00:26:58,840
result sets from back-end database

00:26:56,640 --> 00:27:00,790
bluemix you can use some caching

00:26:58,840 --> 00:27:04,900
services to cache so that you can reduce

00:27:00,790 --> 00:27:07,780
the round-trip costs so bluemix can

00:27:04,900 --> 00:27:09,580
handle that caching you know you can

00:27:07,780 --> 00:27:12,400
attach your application to a caching

00:27:09,580 --> 00:27:13,990
service maybe you know radius or

00:27:12,400 --> 00:27:18,070
something right so that you can reduce

00:27:13,990 --> 00:27:20,140
the latency of going back to the data

00:27:18,070 --> 00:27:22,540
service multiple times that's one thing

00:27:20,140 --> 00:27:25,059
we can do and then the second if you're

00:27:22,540 --> 00:27:26,320
talking about batching the applications

00:27:25,059 --> 00:27:29,410
yes you can do let's say you have a

00:27:26,320 --> 00:27:32,559
Cloudant in the backend as a data

00:27:29,410 --> 00:27:35,140
service and if you want to just have

00:27:32,559 --> 00:27:37,540
some kind of you know like you because

00:27:35,140 --> 00:27:40,360
skaaland is like an HTTP based if you're

00:27:37,540 --> 00:27:42,790
pushing each time when you go and post

00:27:40,360 --> 00:27:44,650
or get or anything is an HTTP call so

00:27:42,790 --> 00:27:46,390
you can batch those things together and

00:27:44,650 --> 00:27:49,240
then you actually you can push at one

00:27:46,390 --> 00:27:51,549
time yes bluemix has those features to

00:27:49,240 --> 00:27:53,169
do I apologize I I'm gonna have to run

00:27:51,549 --> 00:27:54,640
to pick up our because make a call so

00:27:53,169 --> 00:27:56,840
thank you thank you very much right

00:27:54,640 --> 00:28:01,259
thank you

00:27:56,840 --> 00:28:01,259

YouTube URL: https://www.youtube.com/watch?v=0F7y_gHU-Jk


