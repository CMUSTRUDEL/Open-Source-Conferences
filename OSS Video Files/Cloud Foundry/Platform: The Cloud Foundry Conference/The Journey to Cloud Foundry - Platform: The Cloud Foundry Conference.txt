Title: The Journey to Cloud Foundry - Platform: The Cloud Foundry Conference
Publication date: 2013-11-22
Playlist: Platform: The Cloud Foundry Conference
Description: 
	The Journey to Cloud Foundry at ZJU Software Engineering Lab (Lightning Talk)
Yiqun Ding, Researcher, Industrial Technology Research Institute of Zhejiang University
Platform: The Cloud Foundry Conference (http://www.platformcf.com) September 8-9, 2013
Captions: 
	00:00:00,870 --> 00:00:03,979
[Music]

00:00:05,899 --> 00:00:11,880
today I'm going to show you our journey

00:00:08,880 --> 00:00:15,570
to Cloud Foundry at our university is

00:00:11,880 --> 00:00:18,210
called JJ University I have a map here

00:00:15,570 --> 00:00:20,640
so I guess mostly most of you don't know

00:00:18,210 --> 00:00:23,279
where it is so it's in the eastern part

00:00:20,640 --> 00:00:27,090
of China there are nine professors and

00:00:23,279 --> 00:00:29,039
over 100 students in our search tab we

00:00:27,090 --> 00:00:32,309
started working on Cloud Foundry like

00:00:29,039 --> 00:00:35,130
two years ago in the beginning we did a

00:00:32,309 --> 00:00:36,930
survey of most of the open source

00:00:35,130 --> 00:00:40,950
projects that are related to cloud

00:00:36,930 --> 00:00:43,070
computing and in the eyes they are we we

00:00:40,950 --> 00:00:46,230
looked into open source projects such as

00:00:43,070 --> 00:00:50,100
eucalyptus convert OpenStack and class

00:00:46,230 --> 00:00:52,230
that and we chose kostik because of its

00:00:50,100 --> 00:00:54,449
rich functionality because there is a

00:00:52,230 --> 00:00:57,899
nice user interface and it looked more

00:00:54,449 --> 00:01:00,930
stable to us so we chose Cal stack and

00:00:57,899 --> 00:01:03,120
on the path there we looked into cloud

00:01:00,930 --> 00:01:05,460
foundry and an open - who at that

00:01:03,120 --> 00:01:08,610
time had a much more active user group

00:01:05,460 --> 00:01:10,950
and it had better documentation we

00:01:08,610 --> 00:01:13,350
waited for like two months for open ship

00:01:10,950 --> 00:01:16,320
to finish the installation document but

00:01:13,350 --> 00:01:19,259
they didn't so so so it shows Cal

00:01:16,320 --> 00:01:22,500
foundry over ownership we we have been

00:01:19,259 --> 00:01:25,229
doing this so since since then we never

00:01:22,500 --> 00:01:26,330
looked back we just go with trav trav

00:01:25,229 --> 00:01:29,280
foundry

00:01:26,330 --> 00:01:31,680
since then we have been extending and

00:01:29,280 --> 00:01:34,860
improving how foundry in various in

00:01:31,680 --> 00:01:37,439
various ways firstly we built the CPI

00:01:34,860 --> 00:01:39,840
for clouds that we we chose cloud stack

00:01:37,439 --> 00:01:42,119
and the country is our search platform

00:01:39,840 --> 00:01:44,189
but it it takes very long time to deploy

00:01:42,119 --> 00:01:46,799
to deploy cloud foundry on clouds there

00:01:44,189 --> 00:01:49,380
even with the help of Jeff so to save

00:01:46,799 --> 00:01:52,890
time we built the CPI

00:01:49,380 --> 00:01:56,159
now is a Bosch and it has text API we

00:01:52,890 --> 00:01:59,369
can deploy deploy cloud foundry in in

00:01:56,159 --> 00:02:02,219
like three hours so we don't have to

00:01:59,369 --> 00:02:03,780
wait for days or even weeks out out tell

00:02:02,219 --> 00:02:06,390
you more about how we build the CPI

00:02:03,780 --> 00:02:09,300
later the second is thing that we built

00:02:06,390 --> 00:02:11,810
is the nest cluster the net server the

00:02:09,300 --> 00:02:13,390
net server in California version one is

00:02:11,810 --> 00:02:15,280
the well

00:02:13,390 --> 00:02:17,800
single point of failure so we developed

00:02:15,280 --> 00:02:21,390
we developed the next cluster our next

00:02:17,800 --> 00:02:24,790
cluster is based on the NASA NASA server

00:02:21,390 --> 00:02:26,890
version 0.5 the nest server version is

00:02:24,790 --> 00:02:31,570
0.5 already has the clustering

00:02:26,890 --> 00:02:34,000
capability but but the kinds the clients

00:02:31,570 --> 00:02:36,070
need to know that there are multiple and

00:02:34,000 --> 00:02:38,920
that servers so we need to modify the

00:02:36,070 --> 00:02:40,630
nest client so so we don't want to do

00:02:38,920 --> 00:02:43,840
that there is there are a lot of them as

00:02:40,630 --> 00:02:47,020
clients client client over the different

00:02:43,840 --> 00:02:49,180
components of California so we put we

00:02:47,020 --> 00:02:53,410
set up an actually a proxy in front of

00:02:49,180 --> 00:02:55,840
the nests servers version 0.5 so now the

00:02:53,410 --> 00:02:57,970
United collects clients only talk to the

00:02:55,840 --> 00:03:00,100
h8 proxy so if they don't they don't

00:02:57,970 --> 00:03:02,620
they don't have to know about how many

00:03:00,100 --> 00:03:05,290
how many in that service there are in

00:03:02,620 --> 00:03:08,290
the cluster and with the help of will be

00:03:05,290 --> 00:03:10,420
help of HIV proxy we can add more nets

00:03:08,290 --> 00:03:12,160
over to the next cluster and on the fine

00:03:10,420 --> 00:03:14,410
we don't have to reboot anything we

00:03:12,160 --> 00:03:16,030
added more services to californee

00:03:14,410 --> 00:03:18,160
now we have a Hadoop editor service

00:03:16,030 --> 00:03:20,560
jasper reporting just reporting the

00:03:18,160 --> 00:03:22,660
service and maybe the service and the

00:03:20,560 --> 00:03:25,360
cassandra the service you know we added

00:03:22,660 --> 00:03:26,890
all those based on the extensible

00:03:25,360 --> 00:03:29,530
architecture of california it is

00:03:26,890 --> 00:03:32,110
relatively easy to add a middleware and

00:03:29,530 --> 00:03:34,660
the service the tricky one here is

00:03:32,110 --> 00:03:37,209
hadoop at the service because we because

00:03:34,660 --> 00:03:38,410
we made the hadoop service 8 on demand

00:03:37,209 --> 00:03:40,450
service

00:03:38,410 --> 00:03:43,510
it usually takes many virtual machines

00:03:40,450 --> 00:03:45,519
to to set up a Hadoop cluster so if

00:03:43,510 --> 00:03:46,959
you're not running any data analysis

00:03:45,519 --> 00:03:49,000
tasks in me want to destroy those

00:03:46,959 --> 00:03:51,370
virtual machines and reuse those

00:03:49,000 --> 00:03:53,049
resources for some other purposes also

00:03:51,370 --> 00:03:55,690
based on the amount of data you want the

00:03:53,049 --> 00:03:57,190
process you sometimes want a big hundred

00:03:55,690 --> 00:04:00,610
cast and sometimes you want a small

00:03:57,190 --> 00:04:03,580
cluster so we we made a release of

00:04:00,610 --> 00:04:05,850
hadoop so we sparsh and hadoop release

00:04:03,580 --> 00:04:08,380
we can and dynamically

00:04:05,850 --> 00:04:13,989
deploy and ant apply a hi to the class

00:04:08,380 --> 00:04:15,730
identify of any size we want also about

00:04:13,989 --> 00:04:17,829
the Cassandra service we are trying to

00:04:15,730 --> 00:04:19,450
improve in it is now so currently the

00:04:17,829 --> 00:04:21,040
Cassandra service we have is just like

00:04:19,450 --> 00:04:23,530
any other service we have in cloud

00:04:21,040 --> 00:04:25,480
foundry version one that is it is only a

00:04:23,530 --> 00:04:28,710
single node it's not it's not

00:04:25,480 --> 00:04:31,270
classroom what we are trying to do is to

00:04:28,710 --> 00:04:34,030
improve the casino service so that we

00:04:31,270 --> 00:04:35,920
can just the skill just the skill skill

00:04:34,030 --> 00:04:38,530
the Cassandra service as we can do with

00:04:35,920 --> 00:04:41,020
applications so it's very easy to skim

00:04:38,530 --> 00:04:43,480
in an application in Coventry just move

00:04:41,020 --> 00:04:45,640
the slide but it's not possible with

00:04:43,480 --> 00:04:48,070
with services so what we are trying to

00:04:45,640 --> 00:04:50,500
do is that we are making Cassandra a

00:04:48,070 --> 00:04:56,050
release so with the help of Bosh we can

00:04:50,500 --> 00:04:57,370
scale a Cassandra very easily this and

00:04:56,050 --> 00:04:59,470
this and another thing we are doing now

00:04:57,370 --> 00:05:02,350
we're trying to make sure that the

00:04:59,470 --> 00:05:04,660
Cassandra other well that Cloud Foundry

00:05:02,350 --> 00:05:06,490
is ready for production it's not that

00:05:04,660 --> 00:05:08,440
it's not it's just we have to make sure

00:05:06,490 --> 00:05:10,330
so we did all kinds of testing a

00:05:08,440 --> 00:05:12,550
functional testing stress testing and

00:05:10,330 --> 00:05:14,470
destructive testing as a result of those

00:05:12,550 --> 00:05:16,450
testing we found that the performance of

00:05:14,470 --> 00:05:19,120
the rutile in version 1 of Cloud Foundry

00:05:16,450 --> 00:05:21,280
is not very satisfactory so we replaced

00:05:19,120 --> 00:05:24,040
that with the culture and another thing

00:05:21,280 --> 00:05:25,810
that we are doing now is that we are

00:05:24,040 --> 00:05:28,150
trying to make the deployment process of

00:05:25,810 --> 00:05:30,970
California aware of the underlying

00:05:28,150 --> 00:05:34,240
topology I right now currently when we

00:05:30,970 --> 00:05:36,070
deploy our foundry with with Bosch the

00:05:34,240 --> 00:05:38,770
boss does not make use of the underlying

00:05:36,070 --> 00:05:42,100
topology so it is possible that that

00:05:38,770 --> 00:05:45,460
Bosch will deploy all the Reuters or all

00:05:42,100 --> 00:05:47,020
the TAS in one single host and if there

00:05:45,460 --> 00:05:49,420
is a problem with the host we may lose

00:05:47,020 --> 00:05:52,270
all the room tests or all of the yeas so

00:05:49,420 --> 00:05:54,460
what we are in order to deal with this

00:05:52,270 --> 00:05:57,010
problem what we are trying to do now is

00:05:54,460 --> 00:05:58,450
only menu so we are manually moving

00:05:57,010 --> 00:06:01,180
around those virtual machines so that

00:05:58,450 --> 00:06:04,210
the Brutus and the DIA is don't results

00:06:01,180 --> 00:06:06,460
don't end up in the same host we also

00:06:04,210 --> 00:06:09,820
trying to improve that so that we this

00:06:06,460 --> 00:06:12,730
can be automatic this is the this figure

00:06:09,820 --> 00:06:16,000
shows the main main major components of

00:06:12,730 --> 00:06:18,820
the class that's across the exit yeah to

00:06:16,000 --> 00:06:20,710
deploy a cloud foundry on cause death

00:06:18,820 --> 00:06:22,270
the boss will first call the CPI to

00:06:20,710 --> 00:06:24,670
create the virtual machines and set up

00:06:22,270 --> 00:06:26,830
the storage and network configuration

00:06:24,670 --> 00:06:29,140
then the boss will forward those calls

00:06:26,830 --> 00:06:31,330
to the default for here is a library

00:06:29,140 --> 00:06:33,220
that tries to provide a unified

00:06:31,330 --> 00:06:37,420
interface to mark your infrastructure

00:06:33,220 --> 00:06:39,460
platforms therefore we'll call the

00:06:37,420 --> 00:06:41,290
the API has provided a bi cloud stack

00:06:39,460 --> 00:06:44,250
and cos tag is the one that's actually

00:06:41,290 --> 00:06:47,140
in managing those virtual resources so

00:06:44,250 --> 00:06:50,680
to implement to build the CPI for Klaus

00:06:47,140 --> 00:06:52,540
dead we did these we we implemented a

00:06:50,680 --> 00:06:56,590
ten processes that's and that's

00:06:52,540 --> 00:06:59,950
specified by the CPI CPI CPI interface

00:06:56,590 --> 00:07:04,150
also we added a 7-7 api's to fall

00:06:59,950 --> 00:07:07,330
because fog is not designed to build CPI

00:07:04,150 --> 00:07:09,130
is so it it cannot use the advanced the

00:07:07,330 --> 00:07:12,850
network feature provided by cloud stack

00:07:09,130 --> 00:07:16,120
and we happen to need those we happen to

00:07:12,850 --> 00:07:19,060
need those features to to configure the

00:07:16,120 --> 00:07:21,910
network for virtual machines in total

00:07:19,060 --> 00:07:24,520
the the the CPI is responsible for

00:07:21,910 --> 00:07:31,600
configuring over 200 options of cloud

00:07:24,520 --> 00:07:33,190
stack it's a stem cell stem cell is the

00:07:31,600 --> 00:07:36,100
virtual machine template that a boss

00:07:33,190 --> 00:07:40,630
used to create a to deploy a Cloud

00:07:36,100 --> 00:07:43,390
Foundry it takes six stages to build a a

00:07:40,630 --> 00:07:47,080
stem cell and these stay six stages can

00:07:43,390 --> 00:07:49,240
be further divided into 28 steps to make

00:07:47,080 --> 00:07:51,850
these stem cell compatible with this

00:07:49,240 --> 00:07:56,350
cloud stack we modify the three of those

00:07:51,850 --> 00:07:59,020
stages and yet and this snide shows some

00:07:56,350 --> 00:08:00,970
other details of what we modify the end

00:07:59,020 --> 00:08:04,150
of three stages it's about setting up

00:08:00,970 --> 00:08:05,800
the security network and the storage of

00:08:04,150 --> 00:08:11,410
virtual machines in a way that's very

00:08:05,800 --> 00:08:13,240
specific to to open to crown step and

00:08:11,410 --> 00:08:15,550
here are some screenshots and the first

00:08:13,240 --> 00:08:17,080
figure ops very small the field the

00:08:15,550 --> 00:08:19,480
first figure shows all the virtual

00:08:17,080 --> 00:08:21,330
machines that that make up Cloud Foundry

00:08:19,480 --> 00:08:24,550
that's already the point on cloud stack

00:08:21,330 --> 00:08:26,500
this figure shows the shows the eight

00:08:24,550 --> 00:08:29,710
virtual machines that make up the boss

00:08:26,500 --> 00:08:33,670
cluster itself and these these virtual

00:08:29,710 --> 00:08:36,070
machines not deployed by micro Bosch and

00:08:33,670 --> 00:08:37,330
this this shows the information about

00:08:36,070 --> 00:08:42,040
the micro Bosch we have made

00:08:37,330 --> 00:08:43,810
specifically for cloud stack and this is

00:08:42,040 --> 00:08:45,700
the administration user interface of

00:08:43,810 --> 00:08:47,650
cloud stack and here we can see all the

00:08:45,700 --> 00:08:50,160
virtual machine that has been created by

00:08:47,650 --> 00:08:54,029
part during the process

00:08:50,160 --> 00:08:56,699
in cloud foundry and this image shows

00:08:54,029 --> 00:08:58,680
that the dashboard works we have

00:08:56,699 --> 00:09:01,589
uploaded the source code of the Nasdaq

00:08:58,680 --> 00:09:05,339
CPI to github so if you're interested

00:09:01,589 --> 00:09:08,480
interested please help us test it that's

00:09:05,339 --> 00:09:08,480
all thank you

00:09:09,330 --> 00:09:21,919

YouTube URL: https://www.youtube.com/watch?v=vteprOF01NI


