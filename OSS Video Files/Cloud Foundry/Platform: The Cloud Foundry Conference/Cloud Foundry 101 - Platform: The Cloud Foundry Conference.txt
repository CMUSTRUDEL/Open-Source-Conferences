Title: Cloud Foundry 101 - Platform: The Cloud Foundry Conference
Publication date: 2013-11-22
Playlist: Platform: The Cloud Foundry Conference
Description: 
	Cloud Foundry 101
Matthew Kocher, Director of Engineering, Cloud Foundry at Pivotal
Platform: The Cloud Foundry Conference (https://www.cloudfoundry.org/community/summits/) September 8-9, 2013
Captions: 
	00:00:00,870 --> 00:00:03,979
[Music]

00:00:06,560 --> 00:00:10,559
everybody hi I'm Matthew Koch riding the

00:00:09,240 --> 00:00:11,849
director of engineering for Cloud

00:00:10,559 --> 00:00:14,219
Foundry so I've run all the various

00:00:11,849 --> 00:00:15,420
Cloud Foundry engineering teams we work

00:00:14,219 --> 00:00:17,699
out of the pivotal office in San

00:00:15,420 --> 00:00:19,500
Francisco today I just wanted to give

00:00:17,699 --> 00:00:21,150
you an introduction to Cloud Foundry

00:00:19,500 --> 00:00:21,930
really a technical introduction of how

00:00:21,150 --> 00:00:23,939
it works

00:00:21,930 --> 00:00:25,590
so as an end-user Cloud Foundry is

00:00:23,939 --> 00:00:27,689
pretty magical but behind the scenes it

00:00:25,590 --> 00:00:29,910
has to do a lot to actually make your

00:00:27,689 --> 00:00:32,009
apps appear without any sort of without

00:00:29,910 --> 00:00:33,450
to do all that hard lifting for people

00:00:32,009 --> 00:00:34,920
so I wanted to give you a little insight

00:00:33,450 --> 00:00:36,120
into how that works so that when we talk

00:00:34,920 --> 00:00:37,770
about Cloud Foundry we talk about

00:00:36,120 --> 00:00:39,180
improvements we talk about different

00:00:37,770 --> 00:00:41,129
components you sort of know what's going

00:00:39,180 --> 00:00:42,660
on after that I'll give you a little

00:00:41,129 --> 00:00:44,850
preview of what's coming up for Cloud

00:00:42,660 --> 00:00:45,960
Foundry the first sort of main component

00:00:44,850 --> 00:00:47,640
of Cloud Foundry is the runtime

00:00:45,960 --> 00:00:50,100
component the runtime component is

00:00:47,640 --> 00:00:52,530
what's responsible for keeping instances

00:00:50,100 --> 00:00:54,199
of your applications running and scaling

00:00:52,530 --> 00:00:56,910
them scaling them up scaling them down

00:00:54,199 --> 00:00:58,530
serving HTTP traffic the other

00:00:56,910 --> 00:01:00,120
components we have are the the Boche

00:00:58,530 --> 00:01:02,160
component which is the deployment and

00:01:00,120 --> 00:01:04,350
configuration layer and the services

00:01:02,160 --> 00:01:05,909
layer those are sort of separate the run

00:01:04,350 --> 00:01:07,860
timers really core it's really about

00:01:05,909 --> 00:01:09,659
applications and application developers

00:01:07,860 --> 00:01:13,470
it's the experience that really matters

00:01:09,659 --> 00:01:14,729
the most sort of when you get started

00:01:13,470 --> 00:01:15,810
with Cloud Foundry you sort of have

00:01:14,729 --> 00:01:17,790
these developers they're out in the

00:01:15,810 --> 00:01:19,259
world on the internet and they have

00:01:17,790 --> 00:01:21,990
their computers and the first thing they

00:01:19,259 --> 00:01:23,909
do is they go and install the CF gem the

00:01:21,990 --> 00:01:26,580
CF gem is the command-line interface for

00:01:23,909 --> 00:01:29,189
Cloud Foundry and it's how you push an

00:01:26,580 --> 00:01:30,960
app to it the CF that the command-line

00:01:29,189 --> 00:01:32,400
interface isn't terribly useful by

00:01:30,960 --> 00:01:34,799
itself what you actually need is an

00:01:32,400 --> 00:01:37,200
installation of Cloud Foundry so the

00:01:34,799 --> 00:01:40,140
first component that we add is the cloud

00:01:37,200 --> 00:01:41,820
controller the cloud controller is sort

00:01:40,140 --> 00:01:44,970
of the central brain of cloud foundry

00:01:41,820 --> 00:01:48,270
that keeps track of what the desired

00:01:44,970 --> 00:01:50,220
state of the world is so it actually

00:01:48,270 --> 00:01:52,290
keeps track of all your application code

00:01:50,220 --> 00:01:54,899
your application versions how many

00:01:52,290 --> 00:01:57,360
instances you want of an app running and

00:01:54,899 --> 00:01:59,310
it's responsible for upgrading

00:01:57,360 --> 00:02:01,560
applications when you push new code to

00:01:59,310 --> 00:02:04,229
it that Cloud Controller is a Sinatra

00:02:01,560 --> 00:02:06,060
app it's written in Ruby and it's

00:02:04,229 --> 00:02:08,610
horizontally scalable it has a

00:02:06,060 --> 00:02:10,619
relational database back-end it'll talk

00:02:08,610 --> 00:02:12,640
to my sequel or Postgres and the only

00:02:10,619 --> 00:02:14,410
other thing it needs is a blob store so

00:02:12,640 --> 00:02:16,420
actually store files to go along with

00:02:14,410 --> 00:02:18,760
that once it has that you've got a cloud

00:02:16,420 --> 00:02:21,610
controller we normally deploy this at

00:02:18,760 --> 00:02:24,760
API that run up the rodeo or whatever

00:02:21,610 --> 00:02:26,230
domain you're using and you're sort of

00:02:24,760 --> 00:02:29,410
you're set to go you can start pushing

00:02:26,230 --> 00:02:30,550
your apps so you take the CF gem and the

00:02:29,410 --> 00:02:32,470
first thing you actually need to do is

00:02:30,550 --> 00:02:34,750
log in that's a component that I don't

00:02:32,470 --> 00:02:37,090
have picture here which is the UI a the

00:02:34,750 --> 00:02:39,010
UI a is a Java spring based component

00:02:37,090 --> 00:02:40,690
uses spring security to actually do all

00:02:39,010 --> 00:02:42,459
of the OAuth security that you sort of

00:02:40,690 --> 00:02:44,440
expect from any sort of platform of this

00:02:42,459 --> 00:02:45,940
level you take that token you give it to

00:02:44,440 --> 00:02:47,380
the cloud controller and you say create

00:02:45,940 --> 00:02:49,209
an application the cloud controller

00:02:47,380 --> 00:02:51,640
creates the application and then we're

00:02:49,209 --> 00:02:54,190
ready to start pushing the app it's a

00:02:51,640 --> 00:02:55,630
push the app the CF gem will actually

00:02:54,190 --> 00:02:57,430
tell the cloud controller here are all

00:02:55,630 --> 00:02:58,630
the files that make up this application

00:02:57,430 --> 00:03:01,150
that are in the directory that you're

00:02:58,630 --> 00:03:03,040
pushing or in the war file that you're

00:03:01,150 --> 00:03:04,630
pushing up to the cloud controller the

00:03:03,040 --> 00:03:06,640
Cloud Controller will then it'll

00:03:04,630 --> 00:03:08,860
actually take the check sums of all

00:03:06,640 --> 00:03:10,360
those files and will say I have these

00:03:08,860 --> 00:03:12,400
files I don't have these files

00:03:10,360 --> 00:03:14,260
send me the difference this way you end

00:03:12,400 --> 00:03:16,000
up with you don't end up sending your

00:03:14,260 --> 00:03:18,850
entire application up to Cloud Foundry

00:03:16,000 --> 00:03:21,549
every time you just send up the Delta to

00:03:18,850 --> 00:03:25,180
cloud controller a clog controller then

00:03:21,549 --> 00:03:26,920
stores those in the blob store and once

00:03:25,180 --> 00:03:29,140
it once it has received all the files

00:03:26,920 --> 00:03:31,090
we're ready to start actually get going

00:03:29,140 --> 00:03:33,130
and start deploying your app the

00:03:31,090 --> 00:03:35,320
challenge we have here is that as a

00:03:33,130 --> 00:03:37,090
developer you tend to only package the

00:03:35,320 --> 00:03:38,980
code that you need to run your

00:03:37,090 --> 00:03:41,140
application your business logic in the

00:03:38,980 --> 00:03:42,730
application you don't package all the

00:03:41,140 --> 00:03:44,980
libraries that you need to run your code

00:03:42,730 --> 00:03:46,570
in your source system you don't package

00:03:44,980 --> 00:03:49,329
a runtime for the system and so what we

00:03:46,570 --> 00:03:50,860
need to actually do is take your source

00:03:49,329 --> 00:03:53,560
bits and transform them into something

00:03:50,860 --> 00:03:55,630
that we can run on Cloud Foundry we call

00:03:53,560 --> 00:03:57,340
this process staging and we currently do

00:03:55,630 --> 00:04:00,910
it on a component that's called the DEA

00:03:57,340 --> 00:04:03,700
the DEA is sort of our multi-purpose

00:04:00,910 --> 00:04:06,700
component that runs client code so it

00:04:03,700 --> 00:04:09,670
runs untrusted code for us so we use it

00:04:06,700 --> 00:04:12,730
to run applications but we also use it

00:04:09,670 --> 00:04:14,980
for a process we call staging staging is

00:04:12,730 --> 00:04:17,470
where we take your code and we run a

00:04:14,980 --> 00:04:19,239
build pack on it and what that build

00:04:17,470 --> 00:04:21,700
pack will do is look at your code and if

00:04:19,239 --> 00:04:23,470
it's a ruby app it'll look and see it'll

00:04:21,700 --> 00:04:26,439
download a copy of bundler it'll install

00:04:23,470 --> 00:04:28,930
all the ruby gems it'll download

00:04:26,439 --> 00:04:31,330
Ruby interpreter and we'll put that all

00:04:28,930 --> 00:04:32,139
in the directory if it's a Java app it

00:04:31,330 --> 00:04:34,360
won't do any of that

00:04:32,139 --> 00:04:37,090
it'll take it'll take your code your jar

00:04:34,360 --> 00:04:38,710
and then it'll download a JRE and

00:04:37,090 --> 00:04:40,029
package that up with it it'll also

00:04:38,710 --> 00:04:42,189
package some auto-configuration

00:04:40,029 --> 00:04:43,779
libraries so that you don't have to know

00:04:42,189 --> 00:04:46,330
how to connect to various services in

00:04:43,779 --> 00:04:48,819
Cloud Foundry by the end of this staging

00:04:46,330 --> 00:04:52,360
process what we end up with is a tarball

00:04:48,819 --> 00:04:54,490
that we can untie any any da in the

00:04:52,360 --> 00:04:57,069
system we can call the start script on

00:04:54,490 --> 00:04:58,960
that tarball and it'll start serving

00:04:57,069 --> 00:05:01,180
your application and running at this

00:04:58,960 --> 00:05:03,639
point we don't care what framework is

00:05:01,180 --> 00:05:05,860
your your application is all we care is

00:05:03,639 --> 00:05:07,330
that we can scale it we can move it

00:05:05,860 --> 00:05:08,889
around we can do anything you want with

00:05:07,330 --> 00:05:10,779
it and we don't have to worry what kind

00:05:08,889 --> 00:05:12,580
of what does what runtime dependencies

00:05:10,779 --> 00:05:15,310
does your application have because we

00:05:12,580 --> 00:05:19,150
packaged this all up into the droplet we

00:05:15,310 --> 00:05:20,740
take that droplet and the first thing we

00:05:19,150 --> 00:05:22,750
do is start uploading that droplet back

00:05:20,740 --> 00:05:24,159
to the cloud controller most

00:05:22,750 --> 00:05:25,719
applications you're gonna want to have

00:05:24,159 --> 00:05:27,639
more than one instance running in fact

00:05:25,719 --> 00:05:28,749
we recommend strongly against having one

00:05:27,639 --> 00:05:30,370
instance running because then it

00:05:28,749 --> 00:05:32,050
involves downtime whenever we need to

00:05:30,370 --> 00:05:34,210
move it so you're gonna have three or

00:05:32,050 --> 00:05:36,969
four eight instances of an application

00:05:34,210 --> 00:05:38,620
running the DEA starts uploading your

00:05:36,969 --> 00:05:41,409
droplet back to the cloud controller and

00:05:38,620 --> 00:05:43,089
at the same time it starts starts one

00:05:41,409 --> 00:05:45,279
copy of your app right there on the same

00:05:43,089 --> 00:05:47,860
DEA as soon as the rest of your

00:05:45,279 --> 00:05:49,180
application is uploaded we will look for

00:05:47,860 --> 00:05:51,399
more DEA s that we can run your

00:05:49,180 --> 00:05:53,080
application on it'll pick four it'll try

00:05:51,399 --> 00:05:55,240
and actually pick four that are not the

00:05:53,080 --> 00:05:57,789
same DEA so that your app is running on

00:05:55,240 --> 00:05:59,159
four different different instances at

00:05:57,789 --> 00:06:01,649
the same time so that we have

00:05:59,159 --> 00:06:03,759
reliability in case of instance failure

00:06:01,649 --> 00:06:05,199
and it'll send a message over the

00:06:03,759 --> 00:06:07,899
message bus and say start up this

00:06:05,199 --> 00:06:10,240
application here here's the URL here are

00:06:07,899 --> 00:06:13,050
the URLs I want to be accessible

00:06:10,240 --> 00:06:14,199
I want to access the app app so if it's

00:06:13,050 --> 00:06:16,629
hello

00:06:14,199 --> 00:06:18,430
if it's hello dot Cloud Foundry com

00:06:16,629 --> 00:06:22,210
it'll map that and they'll send that

00:06:18,430 --> 00:06:24,520
down to the DEA the the DEA will then

00:06:22,210 --> 00:06:27,039
start up the app and it'll start running

00:06:24,520 --> 00:06:28,990
it and this is great except that when

00:06:27,039 --> 00:06:31,330
the app is running on the DEA it's not

00:06:28,990 --> 00:06:32,710
terribly useful what we need is we need

00:06:31,330 --> 00:06:34,120
another component to make it actually

00:06:32,710 --> 00:06:36,279
useful we need to actually be able to

00:06:34,120 --> 00:06:37,690
route to this app so for that we'll need

00:06:36,279 --> 00:06:37,960
the last sort of component that we're

00:06:37,690 --> 00:06:39,789
going to

00:06:37,960 --> 00:06:41,919
have we have end-users for our

00:06:39,789 --> 00:06:43,240
application and they've got their web

00:06:41,919 --> 00:06:46,210
browser but they can't actually hit it

00:06:43,240 --> 00:06:48,160
and what they need is a router the

00:06:46,210 --> 00:06:50,289
router process is what's responsible for

00:06:48,160 --> 00:06:52,960
all incoming traffic into Cloud Foundry

00:06:50,289 --> 00:06:55,300
it's currently written in go and it's an

00:06:52,960 --> 00:06:57,250
HTTP it's basically an HTTP proxy layer

00:06:55,300 --> 00:06:59,199
the benefit of our router path is that

00:06:57,250 --> 00:07:01,210
it's extremely dynamically configurable

00:06:59,199 --> 00:07:03,190
the router listens on the message bus

00:07:01,210 --> 00:07:05,020
and as soon as it hears an advertisement

00:07:03,190 --> 00:07:07,419
for an application it updates its

00:07:05,020 --> 00:07:09,639
routing table and it knows how to

00:07:07,419 --> 00:07:11,020
forward application application traffic

00:07:09,639 --> 00:07:14,979
to instances that are running that

00:07:11,020 --> 00:07:16,960
application it'll listen on port 80 and

00:07:14,979 --> 00:07:19,139
it'll take application and look at the

00:07:16,960 --> 00:07:21,490
host header and it'll route it to any

00:07:19,139 --> 00:07:24,490
application in the system the router

00:07:21,490 --> 00:07:26,110
doesn't have any state on disk it simply

00:07:24,490 --> 00:07:27,880
when it starts up doesn't start

00:07:26,110 --> 00:07:29,199
answering requests until it's had long

00:07:27,880 --> 00:07:31,750
enough to over here where all the

00:07:29,199 --> 00:07:34,210
applications are in the system and be

00:07:31,750 --> 00:07:35,500
able to route things so the DA will

00:07:34,210 --> 00:07:37,930
start telling it you'll see we got an

00:07:35,500 --> 00:07:39,789
arrow to the router I'm running hello

00:07:37,930 --> 00:07:41,560
world it's over here on this port and

00:07:39,789 --> 00:07:42,639
you can get to it the router will then

00:07:41,560 --> 00:07:45,099
forward the traffic to the right

00:07:42,639 --> 00:07:47,110
instance on the DEA that DEA is running

00:07:45,099 --> 00:07:49,120
any number of warden containers and it

00:07:47,110 --> 00:07:51,159
assigns a given port for that word and

00:07:49,120 --> 00:07:54,310
for each application and the router

00:07:51,159 --> 00:07:56,830
knows which port to send it to so this

00:07:54,310 --> 00:07:59,440
is sort of the basics of pushing an app

00:07:56,830 --> 00:08:01,389
to Cod foundry it's a very high-level

00:07:59,440 --> 00:08:03,460
overview but you sort of get the main

00:08:01,389 --> 00:08:04,870
components that you actually need to run

00:08:03,460 --> 00:08:06,699
a cloud phone run a cloud foundry

00:08:04,870 --> 00:08:08,770
instance and be able to push apps to it

00:08:06,699 --> 00:08:11,500
you need a router you need a DA and you

00:08:08,770 --> 00:08:13,539
need a Cloud Controller there's one more

00:08:11,500 --> 00:08:15,130
component that you actually need in the

00:08:13,539 --> 00:08:17,560
long run to keep your Cloud Foundry

00:08:15,130 --> 00:08:22,259
installation healthy and that's the

00:08:17,560 --> 00:08:24,460
Health Manager the health manager is a

00:08:22,259 --> 00:08:26,560
component that talks to a Cloud

00:08:24,460 --> 00:08:28,780
Controller and says what do you actually

00:08:26,560 --> 00:08:31,050
want to be happening and then it listens

00:08:28,780 --> 00:08:33,399
on the message bus and tries to

00:08:31,050 --> 00:08:35,020
ascertain what's actually happening out

00:08:33,399 --> 00:08:37,390
there in the world because as we know

00:08:35,020 --> 00:08:39,130
working with computers they're fallible

00:08:37,390 --> 00:08:40,810
they tend to crash it could just be a

00:08:39,130 --> 00:08:43,180
power failure it could just be a

00:08:40,810 --> 00:08:44,980
software bug but things don't always go

00:08:43,180 --> 00:08:46,540
right we can't count that our code is

00:08:44,980 --> 00:08:48,940
going to get get the system into a

00:08:46,540 --> 00:08:51,200
consistent state every time we need a

00:08:48,940 --> 00:08:53,000
way to recover without having to have

00:08:51,200 --> 00:08:55,910
someone wake up and realize what's

00:08:53,000 --> 00:08:57,350
happened and fix the problem so the

00:08:55,910 --> 00:08:59,350
health manager listens on the message

00:08:57,350 --> 00:09:02,180
bus it talks to the car controller and

00:08:59,350 --> 00:09:04,700
it say that you have a da that crashes

00:09:02,180 --> 00:09:06,650
you would ask for forces of instances of

00:09:04,700 --> 00:09:08,900
an application it notices there only

00:09:06,650 --> 00:09:10,730
three running the Health Manager then

00:09:08,900 --> 00:09:13,130
sends a request over to the COG

00:09:10,730 --> 00:09:15,440
controller says it seems like you wanted

00:09:13,130 --> 00:09:16,280
four looks like there only three you

00:09:15,440 --> 00:09:18,710
should check it out

00:09:16,280 --> 00:09:20,240
the health manager or the clog

00:09:18,710 --> 00:09:22,640
controller will then actually double

00:09:20,240 --> 00:09:23,690
check the health managers work and start

00:09:22,640 --> 00:09:26,360
up the fourth instance of that

00:09:23,690 --> 00:09:29,510
application health manager also has all

00:09:26,360 --> 00:09:31,220
sorts of other edge cases if a DEA has

00:09:29,510 --> 00:09:33,050
you know been unplugged for an hour and

00:09:31,220 --> 00:09:35,120
you've upgraded your application during

00:09:33,050 --> 00:09:38,270
that window somebody plugs the DEA back

00:09:35,120 --> 00:09:39,800
in or it brings the instance back up it

00:09:38,270 --> 00:09:41,720
may be running an old version of the

00:09:39,800 --> 00:09:43,130
same application so you may get up to

00:09:41,720 --> 00:09:44,360
the right instance count but they may be

00:09:43,130 --> 00:09:46,250
running different versions of your

00:09:44,360 --> 00:09:49,100
application code elf manager has to

00:09:46,250 --> 00:09:51,920
notice that and kill the old versions to

00:09:49,100 --> 00:09:53,810
start the new versions these are all

00:09:51,920 --> 00:09:56,720
sort of the goal of the health manager

00:09:53,810 --> 00:09:58,280
is to eventually bring the system to

00:09:56,720 --> 00:10:01,940
look exactly like the cloud controller

00:09:58,280 --> 00:10:03,740
says it does so that's it really for

00:10:01,940 --> 00:10:06,590
what a Cloud Foundry installation looks

00:10:03,740 --> 00:10:08,090
like for the runtime there are all sorts

00:10:06,590 --> 00:10:09,650
of other components that sort of go into

00:10:08,090 --> 00:10:11,750
this there's that we haven't really

00:10:09,650 --> 00:10:14,270
talked about the UI a there's a log

00:10:11,750 --> 00:10:15,980
aggregation but these are the core sort

00:10:14,270 --> 00:10:17,330
of pieces that you need to understand

00:10:15,980 --> 00:10:19,370
when you're pushing it out so when you

00:10:17,330 --> 00:10:21,230
push an app and you see it going you see

00:10:19,370 --> 00:10:23,600
it start compiling and grabbing your

00:10:21,230 --> 00:10:24,920
assets and then you see it uploading you

00:10:23,600 --> 00:10:27,020
see it starting and then you start

00:10:24,920 --> 00:10:29,650
mapping URLs all of those things happen

00:10:27,020 --> 00:10:29,650
in these four components

00:10:30,179 --> 00:10:34,779
the the question that now arises is how

00:10:33,069 --> 00:10:37,329
do you get these all set up and what we

00:10:34,779 --> 00:10:40,899
have for that is a tool called Bosh Bosh

00:10:37,329 --> 00:10:44,319
is it's a low-level tool it's complex

00:10:40,899 --> 00:10:46,269
but it's extremely powerful the point of

00:10:44,319 --> 00:10:49,049
the goal of Bosh is to allow you to

00:10:46,269 --> 00:10:51,669
describe an entire cluster and

00:10:49,049 --> 00:10:53,859
declaratively say give me this cluster

00:10:51,669 --> 00:10:55,480
and then say I want to change this one

00:10:53,859 --> 00:10:57,819
thing in the cluster so if you have

00:10:55,480 --> 00:10:59,619
these four you know 20 different virtual

00:10:57,819 --> 00:11:02,259
machines spun up configured differently

00:10:59,619 --> 00:11:03,879
if you say I want one more of one kind

00:11:02,259 --> 00:11:05,980
of virtual machine it can launch that

00:11:03,879 --> 00:11:08,259
one virtual machine configure it put it

00:11:05,980 --> 00:11:11,350
into the pool if you say you want 50

00:11:08,259 --> 00:11:13,299
more it can launch 50 more it will every

00:11:11,350 --> 00:11:15,639
time it does it deploy it'll see what's

00:11:13,299 --> 00:11:17,589
actually out there what you asked for do

00:11:15,639 --> 00:11:21,189
a delta and make the world what you

00:11:17,589 --> 00:11:23,709
asked for it's extremely powerful it's

00:11:21,189 --> 00:11:25,499
also in infrastructure agnostic so it

00:11:23,709 --> 00:11:28,569
will work across Amazon vSphere

00:11:25,499 --> 00:11:30,309
OpenStack and there are other

00:11:28,569 --> 00:11:32,160
infrastructures that are always in the

00:11:30,309 --> 00:11:34,569
works being developed by various

00:11:32,160 --> 00:11:36,220
stakeholders who are interested in DML

00:11:34,569 --> 00:11:39,999
deploy Cloud Foundry easily on their

00:11:36,220 --> 00:11:41,499
infrastructure the third major component

00:11:39,999 --> 00:11:42,610
is Cloud Foundry services we're gonna

00:11:41,499 --> 00:11:44,470
have a whole talk on Cloud Foundry

00:11:42,610 --> 00:11:48,160
services so I don't want to talk about

00:11:44,470 --> 00:11:49,839
them too much but Cloud Foundry services

00:11:48,160 --> 00:11:53,079
are what let you take this state with a

00:11:49,839 --> 00:11:55,720
runtime layer and add state to it so

00:11:53,079 --> 00:11:57,309
it's great to be able to push an app but

00:11:55,720 --> 00:11:59,379
it doesn't work too well until you have

00:11:57,309 --> 00:12:01,149
some sort of stateful layer behind it

00:11:59,379 --> 00:12:02,679
whether usually that's a relational

00:12:01,149 --> 00:12:05,079
database but it could be something like

00:12:02,679 --> 00:12:07,660
Redis it could be I could be

00:12:05,079 --> 00:12:09,399
Cassandra could be any one of these that

00:12:07,660 --> 00:12:11,499
you want to bind your application and

00:12:09,399 --> 00:12:14,649
Cloud Foundry services are the way that

00:12:11,499 --> 00:12:16,839
you can enable that and can connect

00:12:14,649 --> 00:12:19,419
applications to those persistent data

00:12:16,839 --> 00:12:24,069
stores and be able to provision them

00:12:19,419 --> 00:12:25,929
extremely easily I want to talk one more

00:12:24,069 --> 00:12:27,429
sort of point I wanted to make of cloud

00:12:25,929 --> 00:12:29,739
boundaries we tend to talk about

00:12:27,429 --> 00:12:33,160
applications as sort of the unit of

00:12:29,739 --> 00:12:34,839
deployment and when the in the Cloud

00:12:33,160 --> 00:12:36,850
Foundry context we think of applications

00:12:34,839 --> 00:12:38,949
as one code base a lot of times in

00:12:36,850 --> 00:12:40,899
larger environments applications are

00:12:38,949 --> 00:12:43,139
many code bases what we want to see

00:12:40,899 --> 00:12:44,970
people do is put large applications

00:12:43,139 --> 00:12:47,160
into lots of small applications and then

00:12:44,970 --> 00:12:50,009
push them and have them communicate over

00:12:47,160 --> 00:12:53,069
an HDTV over the router so you may be

00:12:50,009 --> 00:12:54,720
building some massive system and but you

00:12:53,069 --> 00:12:56,609
may actually to build that one system

00:12:54,720 --> 00:12:58,889
you may push four or five ten different

00:12:56,609 --> 00:13:01,799
Cloud Foundry apps and have them talk to

00:12:58,889 --> 00:13:03,329
each other over HTTP we do this for our

00:13:01,799 --> 00:13:05,429
own internal systems when we need to

00:13:03,329 --> 00:13:08,549
talk about users we go talk to the user

00:13:05,429 --> 00:13:10,739
system to get the users we saw this I

00:13:08,549 --> 00:13:12,509
think with cloud credo when they publish

00:13:10,739 --> 00:13:14,579
their book blog post on Red Nose Day

00:13:12,509 --> 00:13:16,109
they had all sorts of applications that

00:13:14,579 --> 00:13:18,269
were deployed on Cloud Foundry that made

00:13:16,109 --> 00:13:20,879
up the suite of applications that people

00:13:18,269 --> 00:13:22,139
talk to a lot of small independent parts

00:13:20,879 --> 00:13:25,259
that you could easily upgrade you can

00:13:22,139 --> 00:13:27,299
easily wrap your head around and they're

00:13:25,259 --> 00:13:30,269
all easily scalable because they're all

00:13:27,299 --> 00:13:33,149
written with an HTTP with HTTP to access

00:13:30,269 --> 00:13:35,489
them with a back-end we can scale and we

00:13:33,149 --> 00:13:37,889
know how to scale or and a runtime tier

00:13:35,489 --> 00:13:40,379
that we know how to scale I wanted to

00:13:37,889 --> 00:13:42,649
spend a little time talking about how

00:13:40,379 --> 00:13:46,769
Cloud Foundry is developed Cloud Foundry

00:13:42,649 --> 00:13:48,269
is currently Kotov is developed in very

00:13:46,769 --> 00:13:52,019
tight collaboration with pivotal labs

00:13:48,269 --> 00:13:54,089
pivotal labs was the name perhaps the

00:13:52,019 --> 00:13:56,970
namesake for the larger go pivotal or

00:13:54,089 --> 00:13:59,459
organization that is sprung up here and

00:13:56,970 --> 00:14:02,879
so we really do agile software

00:13:59,459 --> 00:14:05,160
development we we have a team of about

00:14:02,879 --> 00:14:08,129
45 developers that are located in San

00:14:05,160 --> 00:14:11,160
Francisco and we do test-driven

00:14:08,129 --> 00:14:12,869
development we we pair all the time and

00:14:11,160 --> 00:14:15,839
we break up into small teams each team

00:14:12,869 --> 00:14:19,589
has a product manager who manages the

00:14:15,839 --> 00:14:22,230
backlog for the team and we do all of

00:14:19,589 --> 00:14:24,839
our work open source on github so as you

00:14:22,230 --> 00:14:26,369
we have public access into those tracker

00:14:24,839 --> 00:14:27,959
backlogs you can actually see what's

00:14:26,369 --> 00:14:29,549
happening you can see that flow you can

00:14:27,959 --> 00:14:32,399
see those commits that are going into

00:14:29,549 --> 00:14:34,079
the stories being worked on by the team

00:14:32,399 --> 00:14:36,179
being pushed up to github and then being

00:14:34,079 --> 00:14:38,039
deployed we then intend to email out to

00:14:36,179 --> 00:14:40,679
the cloud funder mailing list when we've

00:14:38,039 --> 00:14:41,639
actually deployed new features to run

00:14:40,679 --> 00:14:44,579
the pivotal Daioh

00:14:41,639 --> 00:14:47,699
so it's extremely transparent and it's

00:14:44,579 --> 00:14:49,709
it's extremely productive we try and get

00:14:47,699 --> 00:14:52,230
things out start to finish very quickly

00:14:49,709 --> 00:14:54,230
we try and deploy as quickly as we can

00:14:52,230 --> 00:14:56,520
and as regularly as we

00:14:54,230 --> 00:14:59,250
one sort of challenge this has is that

00:14:56,520 --> 00:15:01,140
our process doesn't tend to mean that

00:14:59,250 --> 00:15:02,940
we're on the mailing list all day

00:15:01,140 --> 00:15:06,180
we're generally heads down we're pairing

00:15:02,940 --> 00:15:08,280
with somebody we're pairing with another

00:15:06,180 --> 00:15:11,010
developer and working on Cloud Foundry

00:15:08,280 --> 00:15:13,230
the Cloud Foundry codebase so we

00:15:11,010 --> 00:15:14,790
actually have taken people out of the

00:15:13,230 --> 00:15:17,820
mix of the pairing and actually have

00:15:14,790 --> 00:15:19,860
them on github responding to people

00:15:17,820 --> 00:15:22,110
interacting with the community making

00:15:19,860 --> 00:15:23,850
sure that we're being responsive to

00:15:22,110 --> 00:15:25,590
everybody who's working on Cloud Foundry

00:15:23,850 --> 00:15:28,320
and we're really committed to making

00:15:25,590 --> 00:15:28,740
that a better experience as things go

00:15:28,320 --> 00:15:31,710
forward

00:15:28,740 --> 00:15:33,240
I wanted to next talk about what's in

00:15:31,710 --> 00:15:34,620
the pipeline for Cloud Foundry this is

00:15:33,240 --> 00:15:37,020
probably the most exciting part for me

00:15:34,620 --> 00:15:39,630
we spent a lot of the last six months

00:15:37,020 --> 00:15:42,570
really refactoring the code base really

00:15:39,630 --> 00:15:46,110
getting v2 out there deployed burnt in

00:15:42,570 --> 00:15:48,450
load tested and running on Amazon and

00:15:46,110 --> 00:15:50,010
we're now really hitting our stride and

00:15:48,450 --> 00:15:51,450
sort of pushing out new features pushing

00:15:50,010 --> 00:15:53,220
out big changes and we're really excited

00:15:51,450 --> 00:15:55,020
about it so some of these have been

00:15:53,220 --> 00:15:58,590
announced and some of them haven't so

00:15:55,020 --> 00:16:02,700
this is exciting the first one we pushed

00:15:58,590 --> 00:16:04,380
out on this Friday at 6:00 p.m. which is

00:16:02,700 --> 00:16:09,030
the great time in the news cycle if you

00:16:04,380 --> 00:16:10,650
want to announce the project we

00:16:09,030 --> 00:16:12,570
encountered a few difficulties actually

00:16:10,650 --> 00:16:14,400
getting it open-source but we are

00:16:12,570 --> 00:16:17,490
working on a new CLI for Cloud Foundry

00:16:14,400 --> 00:16:20,490
so when I talked about the CF gem we are

00:16:17,490 --> 00:16:23,730
working on a additional CLI that's

00:16:20,490 --> 00:16:25,200
written in go one of the strong pieces

00:16:23,730 --> 00:16:26,520
of feedback we've gotten from a lot of

00:16:25,200 --> 00:16:28,170
people who use Cloud Foundry there

00:16:26,520 --> 00:16:30,330
aren't Ruby developers is that they

00:16:28,170 --> 00:16:32,700
don't understand how to use ruby gems I

00:16:30,330 --> 00:16:34,290
think this is entirely fair because as a

00:16:32,700 --> 00:16:36,830
ruby developer I don't understand how to

00:16:34,290 --> 00:16:36,830
use maven

00:16:39,280 --> 00:16:43,490
[Laughter]

00:16:44,149 --> 00:16:49,049
but well we we don't want to make people

00:16:47,519 --> 00:16:51,689
go through the hassle of trying to

00:16:49,049 --> 00:16:54,749
deploy Ruby or downloading a large sort

00:16:51,689 --> 00:16:57,299
of omnibus installed version of the CF

00:16:54,749 --> 00:16:59,160
gem and we were looking at seriously

00:16:57,299 --> 00:17:01,079
improving the experience using the gem

00:16:59,160 --> 00:17:02,519
and when we sat down to do that we sort

00:17:01,079 --> 00:17:04,620
of looked at the future of cloud foundry

00:17:02,519 --> 00:17:06,089
and said the best way to do this is to

00:17:04,620 --> 00:17:08,429
start from scratch and write it and go

00:17:06,089 --> 00:17:09,990
one of the benefits of go is that you

00:17:08,429 --> 00:17:11,459
produce a single statically linked

00:17:09,990 --> 00:17:13,860
binary that you can take with you and

00:17:11,459 --> 00:17:15,539
put on any machine well of the given

00:17:13,860 --> 00:17:17,730
operating system so there's one Linux

00:17:15,539 --> 00:17:19,199
binary there's one Mac binary and

00:17:17,730 --> 00:17:20,880
there's one windows binary they come

00:17:19,199 --> 00:17:24,120
from the same codebase and they don't

00:17:20,880 --> 00:17:26,039
have any dependencies this is now open

00:17:24,120 --> 00:17:29,190
source on github it's still really rough

00:17:26,039 --> 00:17:30,840
but you can get it you you can download

00:17:29,190 --> 00:17:33,029
it and check it out and play with it and

00:17:30,840 --> 00:17:36,720
it's it's fun to play with and you'll be

00:17:33,029 --> 00:17:38,370
hearing more about it in the future the

00:17:36,720 --> 00:17:42,809
next thing that we the teams are working

00:17:38,370 --> 00:17:45,029
on right now is a new services API we've

00:17:42,809 --> 00:17:46,470
talked to one of the things we found

00:17:45,029 --> 00:17:48,539
with cloud foundry is a lot of people

00:17:46,470 --> 00:17:50,909
are talking about writing services we're

00:17:48,539 --> 00:17:52,980
writing services for all sorts of

00:17:50,909 --> 00:17:54,570
internal things within pivotal and we

00:17:52,980 --> 00:17:56,730
talked to people external and they're

00:17:54,570 --> 00:17:59,510
really interested in integrating with

00:17:56,730 --> 00:18:02,309
legacy systems or integrating with their

00:17:59,510 --> 00:18:04,500
expensive relational databases any sorts

00:18:02,309 --> 00:18:07,190
of sort of persistence layer that you

00:18:04,500 --> 00:18:09,570
may want or even higher level services

00:18:07,190 --> 00:18:11,159
there there's all sorts of movement in

00:18:09,570 --> 00:18:13,799
the space and the feedback we got was

00:18:11,159 --> 00:18:16,320
that it's really hard to write service

00:18:13,799 --> 00:18:20,220
gateway and you had to use our Ruby code

00:18:16,320 --> 00:18:21,600
and we found that well we were we're

00:18:20,220 --> 00:18:23,159
happy with Ruby code we don't want

00:18:21,600 --> 00:18:26,010
everybody to have to write things in

00:18:23,159 --> 00:18:28,110
Ruby so we really were taking what we I

00:18:26,010 --> 00:18:30,419
forget if we're calling it v2 or v3 it

00:18:28,110 --> 00:18:31,950
depends on how you count and we're also

00:18:30,419 --> 00:18:33,779
changing the name to a service broker

00:18:31,950 --> 00:18:35,490
one of the things that was confusing to

00:18:33,779 --> 00:18:37,380
people was that service gateways

00:18:35,490 --> 00:18:38,669
aren't actually proxying traffic to

00:18:37,380 --> 00:18:41,399
services they're really brokering

00:18:38,669 --> 00:18:43,529
connections to a service so as we go

00:18:41,399 --> 00:18:45,480
forward expect to hear about how to

00:18:43,529 --> 00:18:46,860
write service brokers and see a lot of

00:18:45,480 --> 00:18:47,380
information about how to write your own

00:18:46,860 --> 00:18:50,890
service

00:18:47,380 --> 00:18:55,840
broker and having that API be nice and

00:18:50,890 --> 00:18:57,940
simple and easy and usable another piece

00:18:55,840 --> 00:18:59,770
of work that's coming up is eliminating

00:18:57,940 --> 00:19:01,750
single points of failure over the last

00:18:59,770 --> 00:19:03,480
three months we've done three I guess

00:19:01,750 --> 00:19:05,590
six months we've done a lot of work

00:19:03,480 --> 00:19:08,080
classifying failure modes and making

00:19:05,590 --> 00:19:09,850
failure modes better you can see this in

00:19:08,080 --> 00:19:12,100
the router where if the router loses its

00:19:09,850 --> 00:19:13,420
connection to the message bus it stops

00:19:12,100 --> 00:19:15,130
assuming that all of the apps have

00:19:13,420 --> 00:19:16,630
disappeared and it just assumes that the

00:19:15,130 --> 00:19:18,640
world is exactly how it was when it

00:19:16,630 --> 00:19:21,790
stopped hearing about things this sort

00:19:18,640 --> 00:19:23,980
of helps us recover in the face of an

00:19:21,790 --> 00:19:27,910
unreliable message bus we've done the

00:19:23,980 --> 00:19:29,380
same thing with DJs and clown

00:19:27,910 --> 00:19:31,510
controllers so that they're resilient to

00:19:29,380 --> 00:19:33,100
failures and come back up properly but

00:19:31,510 --> 00:19:34,810
we really want to start doing in the

00:19:33,100 --> 00:19:36,220
next few months as attacked me attack

00:19:34,810 --> 00:19:37,030
attacking the single points of failure

00:19:36,220 --> 00:19:38,800
head-on

00:19:37,030 --> 00:19:41,710
and saying why do we only have one

00:19:38,800 --> 00:19:43,300
health manager why do we have an app why

00:19:41,710 --> 00:19:45,550
do we have a message bus that only has

00:19:43,300 --> 00:19:46,930
one node and getting away from that and

00:19:45,550 --> 00:19:48,580
saying you can lose any node in the

00:19:46,930 --> 00:19:52,540
system and the system should still just

00:19:48,580 --> 00:19:58,540
work the first salvo on this front is

00:19:52,540 --> 00:20:00,100
the new health manager the health

00:19:58,540 --> 00:20:02,050
manager currently is a single point of

00:20:00,100 --> 00:20:04,870
failure there's only one if it goes away

00:20:02,050 --> 00:20:08,410
your system stops healing we wanted to

00:20:04,870 --> 00:20:09,760
we we knew we wanted to fix that and we

00:20:08,410 --> 00:20:11,380
looked at the Health Manager codebase

00:20:09,760 --> 00:20:14,140
and we know we wanted it to be better

00:20:11,380 --> 00:20:16,420
and so we spent we spent the last

00:20:14,140 --> 00:20:18,040
probably three weeks really

00:20:16,420 --> 00:20:20,350
characterizing what the health manager

00:20:18,040 --> 00:20:22,360
does writing integration tests around it

00:20:20,350 --> 00:20:24,160
that actually simulate the scenarios I

00:20:22,360 --> 00:20:25,600
was talking about and making sure we

00:20:24,160 --> 00:20:26,980
know that we can recover from each one

00:20:25,600 --> 00:20:28,840
of those start scenarios with our given

00:20:26,980 --> 00:20:31,420
health manager and now what we're gonna

00:20:28,840 --> 00:20:33,010
start doing and I think they started

00:20:31,420 --> 00:20:36,370
writing some lines of code on Friday to

00:20:33,010 --> 00:20:37,900
prototype it out but I don't I haven't

00:20:36,370 --> 00:20:40,000
actually seen it yet we're gonna

00:20:37,900 --> 00:20:43,140
actually start on a fresh health manager

00:20:40,000 --> 00:20:45,970
starting from scratch and written in go

00:20:43,140 --> 00:20:49,150
the goals the goals of this are to make

00:20:45,970 --> 00:20:51,810
it a clean code base make it easily

00:20:49,150 --> 00:20:53,830
easily easy to grok what it's doing and

00:20:51,810 --> 00:20:55,420
also to make it so that it's

00:20:53,830 --> 00:20:57,460
horizontally scalable you can have as

00:20:55,420 --> 00:20:59,520
many health managers as you want they'll

00:20:57,460 --> 00:21:01,890
deal with some sort of master elec

00:20:59,520 --> 00:21:03,450
so you don't have so that you only have

00:21:01,890 --> 00:21:04,770
one that's actually sending commands to

00:21:03,450 --> 00:21:06,420
the cloud controller so that when you

00:21:04,770 --> 00:21:09,150
lose one instance you don't start up and

00:21:06,420 --> 00:21:14,220
new copies of the app but we're really

00:21:09,150 --> 00:21:15,900
excited to see how this goes so that's

00:21:14,220 --> 00:21:18,210
all I have prepared and I'm excited I

00:21:15,900 --> 00:21:23,550
have a few minutes left over so I get to

00:21:18,210 --> 00:21:26,040
tell you a story the story I wanted to

00:21:23,550 --> 00:21:28,470
tell you about was our outage about I

00:21:26,040 --> 00:21:32,370
think it was two actually three weekends

00:21:28,470 --> 00:21:34,140
ago now Amazon had a fairly large outage

00:21:32,370 --> 00:21:36,030
that took down parts of Instagram and

00:21:34,140 --> 00:21:38,640
other online services and it took down a

00:21:36,030 --> 00:21:40,530
large portion of cloud phone run dot

00:21:38,640 --> 00:21:44,210
pivotal dot IO which is our hosted

00:21:40,530 --> 00:21:46,590
version of cloud foundry we got a page

00:21:44,210 --> 00:21:48,770
email went out looks like Amazon's

00:21:46,590 --> 00:21:51,660
having issues things are things are bad

00:21:48,770 --> 00:21:53,190
everybody responded got in the got in

00:21:51,660 --> 00:21:56,190
our Google hangout that we use for

00:21:53,190 --> 00:21:57,720
production support sort of started

00:21:56,190 --> 00:21:59,970
investigating and it was all sort of the

00:21:57,720 --> 00:22:02,670
things that Amazon is known for Amazon

00:21:59,970 --> 00:22:05,190
publishes on a status update of we're

00:22:02,670 --> 00:22:08,460
experiencing some instance failures on

00:22:05,190 --> 00:22:10,110
in one availability zone and you're like

00:22:08,460 --> 00:22:11,370
well but that may be what you think

00:22:10,110 --> 00:22:12,390
you're experiencing but we don't

00:22:11,370 --> 00:22:16,560
actually we think it's a little bit

00:22:12,390 --> 00:22:18,180
worse we have lost our nap box which is

00:22:16,560 --> 00:22:20,280
one of our known single points of

00:22:18,180 --> 00:22:22,440
failure Xin Cloud Foundry and we've lost

00:22:20,280 --> 00:22:25,920
some other instances that aren't single

00:22:22,440 --> 00:22:29,100
points of failure and we spent probably

00:22:25,920 --> 00:22:30,570
about 20 minutes half an hour assessing

00:22:29,100 --> 00:22:32,910
the situation trying to figure out

00:22:30,570 --> 00:22:36,240
exactly what had happened seeing what

00:22:32,910 --> 00:22:38,730
our options were and then we actually

00:22:36,240 --> 00:22:40,800
decided that when Amazon was refusing to

00:22:38,730 --> 00:22:43,080
reboot our not instance what we should

00:22:40,800 --> 00:22:44,610
do is use Bosch to deploy a new copy of

00:22:43,080 --> 00:22:47,160
Cloud Foundry to a different

00:22:44,610 --> 00:22:48,780
availability zone and bring up every app

00:22:47,160 --> 00:22:50,940
users application in the other

00:22:48,780 --> 00:22:52,410
availability zone the first time

00:22:50,940 --> 00:22:55,020
somebody suggested this I thought they

00:22:52,410 --> 00:22:59,130
were crazy our Cloud Foundry deployment

00:22:55,020 --> 00:23:01,350
is probably 7dv Amazon Amazon then it

00:22:59,130 --> 00:23:02,880
changes on a daily basis depending on

00:23:01,350 --> 00:23:04,560
you know what components are out there

00:23:02,880 --> 00:23:09,090
how many instances we've scaled up to

00:23:04,560 --> 00:23:10,830
and so what we started doing was editing

00:23:09,090 --> 00:23:12,130
our boss manifests changing the

00:23:10,830 --> 00:23:15,610
availability zone

00:23:12,130 --> 00:23:17,710
changing the IP addresses and about 20

00:23:15,610 --> 00:23:19,570
minutes later had we actually had two

00:23:17,710 --> 00:23:21,150
people working on that editing it in

00:23:19,570 --> 00:23:24,880
parallel so they could both see it

00:23:21,150 --> 00:23:27,580
started we hit Bosch deploy and watched

00:23:24,880 --> 00:23:29,350
it watched Bosch spin up 70 in new

00:23:27,580 --> 00:23:32,620
instances in the new availability zone

00:23:29,350 --> 00:23:34,420
and we watched the application start

00:23:32,620 --> 00:23:35,020
coming back on our new instance of quad

00:23:34,420 --> 00:23:37,840
foundry

00:23:35,020 --> 00:23:40,570
all it needed was access to s3 the

00:23:37,840 --> 00:23:42,730
blobstore and access to the my sequel

00:23:40,570 --> 00:23:45,430
instance which was replicated and still

00:23:42,730 --> 00:23:47,680
had access to as these instances came up

00:23:45,430 --> 00:23:48,820
they started running the applications

00:23:47,680 --> 00:23:53,260
that we had had in the other

00:23:48,820 --> 00:23:55,140
availability zone and after probably 40

00:23:53,260 --> 00:23:57,960
minutes of watching Bosch do its thing

00:23:55,140 --> 00:24:00,520
watching Amazon give us the instances as

00:23:57,960 --> 00:24:02,200
quickly as it could which actually was

00:24:00,520 --> 00:24:05,590
surprisingly fast for an Amazon outage

00:24:02,200 --> 00:24:06,910
we got we had an entirely new copy of

00:24:05,590 --> 00:24:09,160
Cloud Foundry deployed in another

00:24:06,910 --> 00:24:11,530
availability zone and we could cut

00:24:09,160 --> 00:24:13,870
traffic over to it and so an hour and a

00:24:11,530 --> 00:24:15,910
half later we had completely redeployed

00:24:13,870 --> 00:24:19,000
our production system cut traffic away

00:24:15,910 --> 00:24:20,680
entirely from the old system that was in

00:24:19,000 --> 00:24:22,930
some degraded State that we didn't

00:24:20,680 --> 00:24:24,340
actually know what it was and have all

00:24:22,930 --> 00:24:26,410
the applications start being brought

00:24:24,340 --> 00:24:28,300
back by the Health Manager this was

00:24:26,410 --> 00:24:30,480
really exciting to watch because it was

00:24:28,300 --> 00:24:34,000
allows us to see the power of Bosch and

00:24:30,480 --> 00:24:35,620
really see what you can do when you

00:24:34,000 --> 00:24:37,870
actually have all of your servers

00:24:35,620 --> 00:24:40,150
managed under one tool you don't have a

00:24:37,870 --> 00:24:41,740
single snowflake server of the lot and

00:24:40,150 --> 00:24:44,380
you have all of your applications

00:24:41,740 --> 00:24:45,790
deployed to Cloud Foundry so they're all

00:24:44,380 --> 00:24:48,940
sitting in the blob store they're all

00:24:45,790 --> 00:24:50,740
attached to their database services that

00:24:48,940 --> 00:24:53,410
are managed and redundant and you can

00:24:50,740 --> 00:24:54,880
see it all just come back up and work so

00:24:53,410 --> 00:24:56,410
it was really an exciting time for us

00:24:54,880 --> 00:24:58,990
and it really allowed us to sort of

00:24:56,410 --> 00:25:00,520
showcase what Bosch can do when you're

00:24:58,990 --> 00:25:02,740
managing Cloud Foundry and what

00:25:00,520 --> 00:25:03,790
application developers can expect when

00:25:02,740 --> 00:25:05,050
they've deployed the Cloud Foundry

00:25:03,790 --> 00:25:06,520
because none of the application

00:25:05,050 --> 00:25:07,180
developers had to respond to any

00:25:06,520 --> 00:25:09,280
incidents

00:25:07,180 --> 00:25:11,170
yeah applique as soon as we were able to

00:25:09,280 --> 00:25:12,880
get instances relaunched and Amazon the

00:25:11,170 --> 00:25:15,270
applications came right back up then or

00:25:12,880 --> 00:25:18,130
rebalance so there's really exciting

00:25:15,270 --> 00:25:19,360
that's all I have prepared today so I

00:25:18,130 --> 00:25:21,580
want to thank everybody for coming this

00:25:19,360 --> 00:25:22,169
is an amazing turnout I'll be around the

00:25:21,580 --> 00:25:24,389
rest of the

00:25:22,169 --> 00:25:26,700
fritzsche so if you have any questions

00:25:24,389 --> 00:25:28,499
about 500 feel free to pull me aside and

00:25:26,700 --> 00:25:30,310
chat always happy to talk about this

00:25:28,499 --> 00:25:33,380
kind of stuff so thank you very much

00:25:30,310 --> 00:25:33,380
[Applause]

00:25:37,670 --> 00:25:44,170

YouTube URL: https://www.youtube.com/watch?v=nOuxMHJIKFU


