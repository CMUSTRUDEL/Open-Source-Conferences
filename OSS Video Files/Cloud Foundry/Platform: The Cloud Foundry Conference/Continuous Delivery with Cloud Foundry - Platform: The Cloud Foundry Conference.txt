Title: Continuous Delivery with Cloud Foundry - Platform: The Cloud Foundry Conference
Publication date: 2013-11-22
Playlist: Platform: The Cloud Foundry Conference
Description: 
	Continuous Delivery with Cloud Foundry
Andrew Crump, CTO, CloudCredo
Platform: The Cloud Foundry Conference (http://www.platformcf.com) September 8-9, 2013
Captions: 
	00:00:00,870 --> 00:00:03,979
[Music]

00:00:06,710 --> 00:00:11,160
this isn't pretty pretty exciting at the

00:00:09,540 --> 00:00:13,940
interview today I want to talk about

00:00:11,160 --> 00:00:16,320
continuous delivery with cloud foundry

00:00:13,940 --> 00:00:18,180
and you might be you might be wondering

00:00:16,320 --> 00:00:19,350
what did I mean by that so I think what

00:00:18,180 --> 00:00:21,240
I really want to say is that you've got

00:00:19,350 --> 00:00:23,039
I think a lot of people are familiar

00:00:21,240 --> 00:00:24,869
with the concepts behind continuous

00:00:23,039 --> 00:00:26,699
delivery but I want to really want to

00:00:24,869 --> 00:00:28,680
talk about today is how you can apply

00:00:26,699 --> 00:00:30,330
those concepts and particularly how

00:00:28,680 --> 00:00:32,690
cloud foundry is really really good fit

00:00:30,330 --> 00:00:36,380
for building your deployment pipelines

00:00:32,690 --> 00:00:38,489
and for really getting yourself started

00:00:36,380 --> 00:00:39,809
what else I want to say is I want to

00:00:38,489 --> 00:00:41,640
talk about some of the anti patterns

00:00:39,809 --> 00:00:44,550
that you need to be aware of when you're

00:00:41,640 --> 00:00:45,539
working with continuous delivery and

00:00:44,550 --> 00:00:46,920
Cloud Foundry some of the things you

00:00:45,539 --> 00:00:48,860
want to watch out for that might mean

00:00:46,920 --> 00:00:52,710
that you cause you're in some trouble

00:00:48,860 --> 00:00:54,059
and I also want to talk about how can

00:00:52,710 --> 00:00:55,500
you actually apply the same principles

00:00:54,059 --> 00:00:57,660
the same practices that you apply to

00:00:55,500 --> 00:01:03,059
your application code also apply those

00:00:57,660 --> 00:01:04,979
to your infrastructure code so I'm

00:01:03,059 --> 00:01:07,560
founder at a company called cloud credo

00:01:04,979 --> 00:01:09,510
based in London and what we do is we

00:01:07,560 --> 00:01:12,030
build and we manage cloud foundry

00:01:09,510 --> 00:01:14,610
answers for our customers we also do

00:01:12,030 --> 00:01:16,500
customizations for them as well and we

00:01:14,610 --> 00:01:18,119
were founded last year and we've seen

00:01:16,500 --> 00:01:19,590
massive uptake particularly this year

00:01:18,119 --> 00:01:22,200
and people getting very excited about

00:01:19,590 --> 00:01:26,040
the promise of pairs in particular of

00:01:22,200 --> 00:01:29,150
our cloud foundry I'm not all in the the

00:01:26,040 --> 00:01:31,910
sales pitch there but we're also hiring

00:01:29,150 --> 00:01:33,560
so this is the deployment pipeline and

00:01:31,910 --> 00:01:35,210
this is really the core concept that

00:01:33,560 --> 00:01:37,550
you've got behind continuous delivery

00:01:35,210 --> 00:01:39,020
okay and what this says is that we want

00:01:37,550 --> 00:01:40,340
our developers to be working in a way

00:01:39,020 --> 00:01:43,130
where they're making small discreet

00:01:40,340 --> 00:01:44,750
changes and those changes are going from

00:01:43,130 --> 00:01:46,220
they're going through a series of gates

00:01:44,750 --> 00:01:49,130
and they're being assessed as to whether

00:01:46,220 --> 00:01:50,540
or not our code is in a working state so

00:01:49,130 --> 00:01:52,820
we start off at one end right then we've

00:01:50,540 --> 00:01:55,160
got some tests that run very very

00:01:52,820 --> 00:01:57,140
quickly so we commit our code we make a

00:01:55,160 --> 00:01:59,180
very small change and our test runs

00:01:57,140 --> 00:02:00,230
maybe some unit tests and we know

00:01:59,180 --> 00:02:02,330
straight away whether or not we've

00:02:00,230 --> 00:02:04,010
broken the bill and we go all the way

00:02:02,330 --> 00:02:05,330
through down getting more and more

00:02:04,010 --> 00:02:07,730
rigorous in the terms of the tests that

00:02:05,330 --> 00:02:09,440
we apply so for example we might run

00:02:07,730 --> 00:02:11,480
some integration tests we might stand up

00:02:09,440 --> 00:02:13,520
some nodes run some integration tests

00:02:11,480 --> 00:02:15,110
and see whether or not our code is

00:02:13,520 --> 00:02:16,520
working so we're moving from tips that

00:02:15,110 --> 00:02:17,990
are very quick to run all the way down

00:02:16,520 --> 00:02:20,000
through getting increasingly more

00:02:17,990 --> 00:02:21,920
rigorous until we know that we've got

00:02:20,000 --> 00:02:23,120
something that we can deploy to our

00:02:21,920 --> 00:02:25,280
customer we've got some level of

00:02:23,120 --> 00:02:26,870
confidence that it's going to work so

00:02:25,280 --> 00:02:28,190
that's really the kind of core concept

00:02:26,870 --> 00:02:29,870
behind continuous delivery is the

00:02:28,190 --> 00:02:31,010
deployment pipeline but why are we doing

00:02:29,870 --> 00:02:32,270
this right cuz obviously this sounds

00:02:31,010 --> 00:02:34,160
like it's going to be a lot of fun right

00:02:32,270 --> 00:02:35,540
it sounds like it's gonna be lots of

00:02:34,160 --> 00:02:37,489
exciting things for engineers to do

00:02:35,540 --> 00:02:38,360
automation and you know all engineers

00:02:37,489 --> 00:02:39,890
love that stuff

00:02:38,360 --> 00:02:41,060
but why are we actually doing it what's

00:02:39,890 --> 00:02:43,430
the rationale for doing it well I think

00:02:41,060 --> 00:02:45,290
if you've been like if you've been awake

00:02:43,430 --> 00:02:46,730
during the last the last couple of talks

00:02:45,290 --> 00:02:49,100
you probably know the answer already and

00:02:46,730 --> 00:02:52,820
that answer is it's about feedback okay

00:02:49,100 --> 00:02:54,080
it's about very quickly being able to go

00:02:52,820 --> 00:02:55,730
from physician we would make a small

00:02:54,080 --> 00:02:57,410
discreet change we go through that

00:02:55,730 --> 00:03:00,290
pipeline and straightaway we get some

00:02:57,410 --> 00:03:01,850
feedback from the customer and the

00:03:00,290 --> 00:03:03,380
reason that we want to do that is

00:03:01,850 --> 00:03:05,330
because otherwise if we're waiting a

00:03:03,380 --> 00:03:06,739
long period of time if we don't have all

00:03:05,330 --> 00:03:08,690
this automation in place to allow us to

00:03:06,739 --> 00:03:10,010
release our software quickly we're going

00:03:08,690 --> 00:03:11,300
to have a problem and that's going to be

00:03:10,010 --> 00:03:12,590
that we're going to be batching up these

00:03:11,300 --> 00:03:15,019
changes we're going to be deploying a

00:03:12,590 --> 00:03:17,480
bunch of changes in one go and really

00:03:15,019 --> 00:03:19,190
where we're missing opportunity to to

00:03:17,480 --> 00:03:21,370
have fast cycle time where we can

00:03:19,190 --> 00:03:23,239
actually get feedback from our customers

00:03:21,370 --> 00:03:25,220
otherwise we could be spending lots of

00:03:23,239 --> 00:03:26,900
time building the wrong thing so that's

00:03:25,220 --> 00:03:28,790
really the the core reason that we want

00:03:26,900 --> 00:03:30,380
to be doing this stuff and from the

00:03:28,790 --> 00:03:31,760
customers perspective right all that

00:03:30,380 --> 00:03:33,470
automation I could have a wonderful

00:03:31,760 --> 00:03:36,620
pipeline with lots and lots of automated

00:03:33,470 --> 00:03:38,420
tests but really like unless the

00:03:36,620 --> 00:03:40,010
customer's given me some feedback that's

00:03:38,420 --> 00:03:40,830
really all for naught there's no reason

00:03:40,010 --> 00:03:42,849
for having it then

00:03:40,830 --> 00:03:44,230
I mean from the customers perspective

00:03:42,849 --> 00:03:46,209
all they really care about at the end of

00:03:44,230 --> 00:03:47,980
the day is the working service right so

00:03:46,209 --> 00:03:49,510
if I'm doing lots of software

00:03:47,980 --> 00:03:51,340
development I'm paying for some fairly

00:03:49,510 --> 00:03:52,569
expensive software developers right then

00:03:51,340 --> 00:03:53,830
we haven't figured out a way to get rid

00:03:52,569 --> 00:03:57,220
of those people yet unfortunately

00:03:53,830 --> 00:03:58,390
so I also we've got the deployment

00:03:57,220 --> 00:04:00,190
concerns we've got to worry about how

00:03:58,390 --> 00:04:02,500
we're going to deploy our software how

00:04:00,190 --> 00:04:04,330
are we going to stand up our software

00:04:02,500 --> 00:04:06,220
you know instantiation knows we're going

00:04:04,330 --> 00:04:08,200
to deploy it all over the place that's

00:04:06,220 --> 00:04:09,610
that's like hard stuff to do

00:04:08,200 --> 00:04:10,780
and if we could avoid having to worry

00:04:09,610 --> 00:04:12,540
about some of that stuff that would be a

00:04:10,780 --> 00:04:16,000
wonderful world we live in

00:04:12,540 --> 00:04:17,709
so where does cloud foundry come in so I

00:04:16,000 --> 00:04:19,540
guess you could say like I've just said

00:04:17,709 --> 00:04:21,010
we want to remove complexity we want to

00:04:19,540 --> 00:04:22,440
remove having to worry about these

00:04:21,010 --> 00:04:24,970
additional things but then we've got

00:04:22,440 --> 00:04:26,410
Cloud Foundry Clara is a fairly complex

00:04:24,970 --> 00:04:28,120
beast right this will fear a number of

00:04:26,410 --> 00:04:30,100
moving parts so you might say we're

00:04:28,120 --> 00:04:30,970
actually adding complexity but there's a

00:04:30,100 --> 00:04:32,560
reason that we're doing this and the

00:04:30,970 --> 00:04:34,510
reason we're doing it is as we said

00:04:32,560 --> 00:04:35,710
earlier as well it's a very direct

00:04:34,510 --> 00:04:38,560
mapping it's a very clear relationship

00:04:35,710 --> 00:04:40,540
between what somebody somebody who's an

00:04:38,560 --> 00:04:42,550
application developer wants to do which

00:04:40,540 --> 00:04:44,080
is I want to deploy my code and actually

00:04:42,550 --> 00:04:46,479
how I do that right it's a very very

00:04:44,080 --> 00:04:48,370
clear relationship I'm not having a

00:04:46,479 --> 00:04:50,770
situation where you know I've written my

00:04:48,370 --> 00:04:53,620
code I'm very you know happy about I

00:04:50,770 --> 00:04:55,300
want to share it with some customers but

00:04:53,620 --> 00:04:56,169
I've got you know now I've got to sit

00:04:55,300 --> 00:04:58,000
down I've got to figure out how I'm

00:04:56,169 --> 00:04:59,380
gonna small in some instances I've got

00:04:58,000 --> 00:05:01,000
to maybe lend some kind of configuration

00:04:59,380 --> 00:05:02,320
management tool like share for puppets

00:05:01,000 --> 00:05:04,060
you know I've gotta learn how to write

00:05:02,320 --> 00:05:05,229
puppet manifests or chef club books and

00:05:04,060 --> 00:05:06,940
then maybe I've got to learn about

00:05:05,229 --> 00:05:10,060
Capistrano and hang a deploy

00:05:06,940 --> 00:05:11,440
magnification as well so ideally as a

00:05:10,060 --> 00:05:12,970
developer all I really want to do is

00:05:11,440 --> 00:05:14,620
just pick up my vacation and deploy it

00:05:12,970 --> 00:05:16,419
it'd be fantastic if I was in a

00:05:14,620 --> 00:05:17,919
situation where I was you know had a

00:05:16,419 --> 00:05:19,360
nice breath of skill and we're all

00:05:17,919 --> 00:05:21,820
supposed to be generalists these days as

00:05:19,360 --> 00:05:23,350
well but the problem with that is I

00:05:21,820 --> 00:05:25,180
really just want to deploy my

00:05:23,350 --> 00:05:26,350
application right I don't want to spend

00:05:25,180 --> 00:05:27,729
all this additional effort and this is

00:05:26,350 --> 00:05:30,070
really where cloud foundry comes in

00:05:27,729 --> 00:05:31,750
Claire hundred matches might develop a

00:05:30,070 --> 00:05:32,560
mental model of I just wanted to point

00:05:31,750 --> 00:05:35,080
application

00:05:32,560 --> 00:05:37,630
I just want to bind a service to that

00:05:35,080 --> 00:05:39,310
application and get going I don't want

00:05:37,630 --> 00:05:41,200
to have to worry about firewall rules I

00:05:39,310 --> 00:05:46,120
don't have to worry about like doing a

00:05:41,200 --> 00:05:47,470
load balancer all of that stuff and the

00:05:46,120 --> 00:05:49,990
really big benefit is this consistent

00:05:47,470 --> 00:05:51,520
interface for deployment so if you think

00:05:49,990 --> 00:05:53,979
about a lot of organizations right

00:05:51,520 --> 00:05:54,410
you'll have a fair amount of rework so

00:05:53,979 --> 00:05:56,360
you'll have

00:05:54,410 --> 00:05:57,680
different teams will say we need to

00:05:56,360 --> 00:05:59,240
deploy an application and they'll each

00:05:57,680 --> 00:06:00,650
independently come up with their own way

00:05:59,240 --> 00:06:02,750
of doing that they'll each write their

00:06:00,650 --> 00:06:06,080
own scripting and you've got a fair

00:06:02,750 --> 00:06:07,490
amount of duplication and waste with

00:06:06,080 --> 00:06:08,750
Cloud Foundry you've got this consistent

00:06:07,490 --> 00:06:10,010
interface the whole way through right so

00:06:08,750 --> 00:06:11,390
all of your teams are using a shared

00:06:10,010 --> 00:06:13,550
platform and they're using the same

00:06:11,390 --> 00:06:14,900
command line to deploy those their

00:06:13,550 --> 00:06:16,820
applications right so across the

00:06:14,900 --> 00:06:19,250
applications across the teams it's the

00:06:16,820 --> 00:06:20,720
same command line but more than that

00:06:19,250 --> 00:06:22,970
it's also the same command line across

00:06:20,720 --> 00:06:24,860
different stacks so if I'm a developer

00:06:22,970 --> 00:06:25,850
and I'm just getting started to say Ruby

00:06:24,860 --> 00:06:27,290
maybe I've done a lot of Java

00:06:25,850 --> 00:06:28,820
development in the past I don't know how

00:06:27,290 --> 00:06:30,680
to deploy a Ruby application but I can

00:06:28,820 --> 00:06:33,590
get hacking and like writes and Ruby

00:06:30,680 --> 00:06:35,060
code I don't necessarily want only have

00:06:33,590 --> 00:06:37,520
to learn all the ins and outs about how

00:06:35,060 --> 00:06:38,840
to deploy a Ruby application in order

00:06:37,520 --> 00:06:41,120
they get going what I want to be able to

00:06:38,840 --> 00:06:42,620
do is just simply run see if push

00:06:41,120 --> 00:06:44,450
exactly the same as if I was deploying

00:06:42,620 --> 00:06:45,860
any other application and I can get it

00:06:44,450 --> 00:06:47,960
out there on the platform straightaway

00:06:45,860 --> 00:06:49,550
and somebody can look at it this is

00:06:47,960 --> 00:06:51,860
really the key thing is this consistent

00:06:49,550 --> 00:06:53,180
interface and and if you think about

00:06:51,860 --> 00:06:55,490
when you're trying to actually plug this

00:06:53,180 --> 00:06:56,840
into a deployment pipeline now a lot of

00:06:55,490 --> 00:06:58,700
those concerns going away right from the

00:06:56,840 --> 00:06:59,240
perspective is my CI server so Jenkins

00:06:58,700 --> 00:07:01,490
or something

00:06:59,240 --> 00:07:03,260
I'm just continually calling the same

00:07:01,490 --> 00:07:05,930
command line right I'm just calling it's

00:07:03,260 --> 00:07:07,640
very very simple to compose these

00:07:05,930 --> 00:07:08,810
pipelines because it's just so

00:07:07,640 --> 00:07:10,550
straightforward it's just the same

00:07:08,810 --> 00:07:12,940
command every time so I want to talk now

00:07:10,550 --> 00:07:15,170
about avoiding making breaking changes

00:07:12,940 --> 00:07:16,640
and so I think this is like a really

00:07:15,170 --> 00:07:19,760
really cool principle that you need to

00:07:16,640 --> 00:07:21,170
take away and it's really about ensuring

00:07:19,760 --> 00:07:23,570
that your software is always something

00:07:21,170 --> 00:07:25,340
that's in a releasable State and so what

00:07:23,570 --> 00:07:27,050
I mean by that is quite often you get

00:07:25,340 --> 00:07:28,280
teams and they and somebody says I

00:07:27,050 --> 00:07:30,140
really want to make this large-scale

00:07:28,280 --> 00:07:31,220
change but you know stuff is going to be

00:07:30,140 --> 00:07:33,080
broken for awhile I won't be able to

00:07:31,220 --> 00:07:34,400
release the software and and that's not

00:07:33,080 --> 00:07:35,960
a position we want to be in right what

00:07:34,400 --> 00:07:37,670
we want to be able to do is always say

00:07:35,960 --> 00:07:39,500
is our software something that we can

00:07:37,670 --> 00:07:40,790
release and we want to ideally always be

00:07:39,500 --> 00:07:42,890
out of releases so if a customer says

00:07:40,790 --> 00:07:46,750
hey you know I want this to be live now

00:07:42,890 --> 00:07:48,530
I want to be useful now we can deploy it

00:07:46,750 --> 00:07:50,690
so I want to tell you about a project

00:07:48,530 --> 00:07:52,510
that was involved with where we were

00:07:50,690 --> 00:07:54,680
trying to apply some of these practices

00:07:52,510 --> 00:07:56,570
and so basically we've been reading like

00:07:54,680 --> 00:07:58,430
the Lean Startup book we played around

00:07:56,570 --> 00:08:00,890
quite a bit with our foundry in the past

00:07:58,430 --> 00:08:02,150
and we were kind of we were you know

00:08:00,890 --> 00:08:05,090
drinking the kool-aid and we were like

00:08:02,150 --> 00:08:06,380
yes we want to give this as time so we'd

00:08:05,090 --> 00:08:07,590
had a chat with the customer and we knew

00:08:06,380 --> 00:08:08,790
what we would

00:08:07,590 --> 00:08:11,070
trying to build we knew the sort of the

00:08:08,790 --> 00:08:12,180
basics and what we wanted to do is

00:08:11,070 --> 00:08:13,620
wanted to start on day one of the

00:08:12,180 --> 00:08:15,180
project and actually deliver some value

00:08:13,620 --> 00:08:17,070
to the customer right we want to be able

00:08:15,180 --> 00:08:19,050
to deploy the application very very

00:08:17,070 --> 00:08:20,370
minimal example to get started with and

00:08:19,050 --> 00:08:22,230
then hopefully receive some feedback

00:08:20,370 --> 00:08:23,760
from the customer as well so this was

00:08:22,230 --> 00:08:25,740
the general concept is we want to have

00:08:23,760 --> 00:08:27,480
this very fast cycle time we want to be

00:08:25,740 --> 00:08:28,890
able to deploy the application get some

00:08:27,480 --> 00:08:30,300
feedback and iterate from there

00:08:28,890 --> 00:08:31,380
hopefully moving closer and closer

00:08:30,300 --> 00:08:35,730
towards something that the customer

00:08:31,380 --> 00:08:37,950
wants so we did that we give it away for

00:08:35,730 --> 00:08:39,570
the first day we write some code and

00:08:37,950 --> 00:08:41,400
then we decided to use Cloud Foundry

00:08:39,570 --> 00:08:43,020
comm for that which is the existing

00:08:41,400 --> 00:08:44,040
hosted service because it means we

00:08:43,020 --> 00:08:45,270
didn't have to worry about all those

00:08:44,040 --> 00:08:47,250
deployment concerns I was talking about

00:08:45,270 --> 00:08:49,500
before so that was awesome

00:08:47,250 --> 00:08:51,360
and then we did we pushed it in the

00:08:49,500 --> 00:08:54,900
afternoon and then we sent an email with

00:08:51,360 --> 00:08:56,850
the URL to to our client and the client

00:08:54,900 --> 00:08:58,380
came back we were sort of patting

00:08:56,850 --> 00:09:00,480
ourselves on the back at the stage and

00:08:58,380 --> 00:09:03,300
the client came back and said it's it's

00:09:00,480 --> 00:09:05,580
rubbish they said like your website like

00:09:03,300 --> 00:09:07,020
you're using the wrong theme and your

00:09:05,580 --> 00:09:08,040
forum field validation you're like

00:09:07,020 --> 00:09:10,290
you're missing validation on these

00:09:08,040 --> 00:09:12,570
fields here and we were kind of we're a

00:09:10,290 --> 00:09:13,980
bit depressed about that actually but

00:09:12,570 --> 00:09:15,990
the point is not that I'm a bad web

00:09:13,980 --> 00:09:18,030
developer which is probably true the

00:09:15,990 --> 00:09:19,380
point is actually that we were able to

00:09:18,030 --> 00:09:20,660
get that fast feedback straight away

00:09:19,380 --> 00:09:22,620
right we didn't spend lots of time

00:09:20,660 --> 00:09:24,480
trying to decide what our favorite

00:09:22,620 --> 00:09:26,100
config management talling was trying to

00:09:24,480 --> 00:09:28,050
decide how we were going to bring up on

00:09:26,100 --> 00:09:29,550
what infrastructure etc we got started

00:09:28,050 --> 00:09:31,350
straightaway by building an application

00:09:29,550 --> 00:09:33,810
and putting out there in front of the

00:09:31,350 --> 00:09:35,190
customer and getting some feedback and I

00:09:33,810 --> 00:09:37,470
think that that's the kind of key

00:09:35,190 --> 00:09:38,910
takeaways is that the ability to get

00:09:37,470 --> 00:09:40,260
their feedback straightaway and to be

00:09:38,910 --> 00:09:41,490
able to iterate closer and closer to

00:09:40,260 --> 00:09:43,020
what the customer wants is really the

00:09:41,490 --> 00:09:44,130
key benefit but we didn't stop there it

00:09:43,020 --> 00:09:46,350
wasn't just a case of getting started

00:09:44,130 --> 00:09:48,000
quickly what we also wanted to do is we

00:09:46,350 --> 00:09:50,990
wanted to then decompose the application

00:09:48,000 --> 00:09:53,220
to intercept services so we talked about

00:09:50,990 --> 00:09:55,050
earlier about having these monolithic

00:09:53,220 --> 00:09:56,340
applications and and this is really

00:09:55,050 --> 00:09:58,710
where we we had one monolithic

00:09:56,340 --> 00:10:00,150
application we wanted it to be a

00:09:58,710 --> 00:10:02,580
situation where we could actually split

00:10:00,150 --> 00:10:03,780
that out and we could have multiple

00:10:02,580 --> 00:10:06,930
separate services that were loosely

00:10:03,780 --> 00:10:08,250
coupled talking to each other so this is

00:10:06,930 --> 00:10:11,550
the approach we wanted to go to and so

00:10:08,250 --> 00:10:13,320
we did this and it was final and then we

00:10:11,550 --> 00:10:15,990
were running on version 1 of cloud

00:10:13,320 --> 00:10:18,870
foundry at this time and we decided what

00:10:15,990 --> 00:10:20,280
we wanted to run it on our own 10 when I

00:10:18,870 --> 00:10:21,360
say our own 10 it's not our intent

00:10:20,280 --> 00:10:24,390
anywhere these days

00:10:21,360 --> 00:10:25,829
this was on ec2 and Neri ceased and we

00:10:24,390 --> 00:10:27,269
wanted to make some customizations to

00:10:25,829 --> 00:10:29,100
the version of Cloud Foundry that that

00:10:27,269 --> 00:10:30,810
sorry of ruby that was was there so he

00:10:29,100 --> 00:10:33,029
took the the bosch release for Cloud

00:10:30,810 --> 00:10:34,260
Foundry and we made some changes to the

00:10:33,029 --> 00:10:36,089
versions of the software that were there

00:10:34,260 --> 00:10:37,649
these days that's a much less invasive

00:10:36,089 --> 00:10:40,529
process but that's that's all we had to

00:10:37,649 --> 00:10:41,970
do at that stage so we did that and then

00:10:40,529 --> 00:10:43,829
this particular application had some

00:10:41,970 --> 00:10:47,459
really quite stringent requirements for

00:10:43,829 --> 00:10:49,320
availability and it was actually going

00:10:47,459 --> 00:10:52,350
to be appearing on like a live network

00:10:49,320 --> 00:10:54,149
UK TV event spending about seven hour

00:10:52,350 --> 00:10:55,740
period so it was pretty important that

00:10:54,149 --> 00:10:57,690
the the service was available during

00:10:55,740 --> 00:10:59,399
their period so what we did is we

00:10:57,690 --> 00:11:01,019
decided to run it we've had multiple

00:10:59,399 --> 00:11:03,720
instances of Tower foundry we'd have

00:11:01,019 --> 00:11:05,459
some in US East as I described some

00:11:03,720 --> 00:11:09,060
other stuff running in URIs West and and

00:11:05,459 --> 00:11:11,040
Ireland and also in Docklands and London

00:11:09,060 --> 00:11:13,350
on the vSphere provider there so we're

00:11:11,040 --> 00:11:14,579
spending you know different ec2 regions

00:11:13,350 --> 00:11:17,010
we've got different virtualization

00:11:14,579 --> 00:11:18,390
technologies and player as well and

00:11:17,010 --> 00:11:20,399
we've we've been able to do that you

00:11:18,390 --> 00:11:23,339
know I say relatively straightforwardly

00:11:20,399 --> 00:11:24,690
right and so to give you a feeling about

00:11:23,339 --> 00:11:26,100
what the application actually grew to

00:11:24,690 --> 00:11:27,870
this is this is what the application had

00:11:26,100 --> 00:11:30,240
to deliver so we were doing 600,000

00:11:27,870 --> 00:11:32,459
transactions in seven hours we had to

00:11:30,240 --> 00:11:34,110
build for 500 user journeys every second

00:11:32,459 --> 00:11:35,790
and that's not you know request that's

00:11:34,110 --> 00:11:38,339
user journey so this is reasonably

00:11:35,790 --> 00:11:39,449
significant stuff and in addition to

00:11:38,339 --> 00:11:41,910
people actually hitting the website

00:11:39,449 --> 00:11:43,500
directly we also have 10,000 call center

00:11:41,910 --> 00:11:45,839
operators so essentially there are

00:11:43,500 --> 00:11:46,920
people watching the TV they're going to

00:11:45,839 --> 00:11:48,209
be on the phone to the call center

00:11:46,920 --> 00:11:49,350
operators and there's going to be a heap

00:11:48,209 --> 00:11:51,510
of traffic coming in through those call

00:11:49,350 --> 00:11:54,089
center operators as well so that's

00:11:51,510 --> 00:11:55,680
that's what we were building and it

00:11:54,089 --> 00:11:57,899
worked and that was fantastic and I

00:11:55,680 --> 00:11:59,130
think enjou in large part to Cloud

00:11:57,899 --> 00:12:01,050
Foundry and the reason for that is

00:11:59,130 --> 00:12:04,260
because if you think back to the start

00:12:01,050 --> 00:12:05,790
there we started off with as I say a web

00:12:04,260 --> 00:12:08,220
app of perhaps questionable quality on

00:12:05,790 --> 00:12:09,449
the first day and we we scaled that all

00:12:08,220 --> 00:12:11,250
the way through to something that

00:12:09,449 --> 00:12:13,410
actually had to deliver to those numbers

00:12:11,250 --> 00:12:15,000
and had to work on the night and it

00:12:13,410 --> 00:12:16,320
worked for us and the really fantastic

00:12:15,000 --> 00:12:18,360
thing about Cloud Foundry in the

00:12:16,320 --> 00:12:20,970
substance is all the time we have this

00:12:18,360 --> 00:12:22,199
consistent interface to deploy to so if

00:12:20,970 --> 00:12:23,699
you think about it we're making really

00:12:22,199 --> 00:12:24,930
large-scale refactoring really

00:12:23,699 --> 00:12:26,880
large-scale changes to our

00:12:24,930 --> 00:12:28,649
infrastructure but the interface that's

00:12:26,880 --> 00:12:31,500
presented by the pairs is the same

00:12:28,649 --> 00:12:33,930
throughout their process so jenkins are

00:12:31,500 --> 00:12:35,430
still going okay I want to do a CF push

00:12:33,930 --> 00:12:37,259
it's calling out through the

00:12:35,430 --> 00:12:39,509
the CLI I wrap around the the cloud

00:12:37,259 --> 00:12:41,009
foundry CLI all the time and that

00:12:39,509 --> 00:12:42,449
interface isn't changing we can we're

00:12:41,009 --> 00:12:43,620
keeping that interface the same and

00:12:42,449 --> 00:12:45,360
we're not breaking the bill there's

00:12:43,620 --> 00:12:46,829
never a point where we've said oh we

00:12:45,360 --> 00:12:47,879
need to stop now and go away and think

00:12:46,829 --> 00:12:49,440
about doing things in a different way

00:12:47,879 --> 00:12:51,930
right we're just continually delivering

00:12:49,440 --> 00:12:53,189
small incremental changes and that's

00:12:51,930 --> 00:12:54,240
really the power there is there's having

00:12:53,189 --> 00:12:55,889
that heartbeat having that regular

00:12:54,240 --> 00:12:57,839
ability to just push out small changes

00:12:55,889 --> 00:12:58,920
see the effect of those changes show

00:12:57,839 --> 00:13:02,160
them you know get feedback from the

00:12:58,920 --> 00:13:03,389
customer as we scaled up and I think we

00:13:02,160 --> 00:13:06,930
would have struggle to do that I think

00:13:03,389 --> 00:13:09,689
with another solution so production like

00:13:06,930 --> 00:13:11,730
environment so this one's a really

00:13:09,689 --> 00:13:13,050
interesting situation and a lot of

00:13:11,730 --> 00:13:16,170
people get themselves into where you've

00:13:13,050 --> 00:13:17,970
got an application and maybe you need to

00:13:16,170 --> 00:13:19,410
rebuild that application as you move

00:13:17,970 --> 00:13:20,579
between different stages so you might

00:13:19,410 --> 00:13:22,620
have an environment which is your

00:13:20,579 --> 00:13:23,790
development environment you might have a

00:13:22,620 --> 00:13:26,040
staging environment in a production

00:13:23,790 --> 00:13:28,050
environment for example and sometimes

00:13:26,040 --> 00:13:29,519
people find that they need to rebuild

00:13:28,050 --> 00:13:31,110
their application as they move between

00:13:29,519 --> 00:13:32,850
those environments and typically that's

00:13:31,110 --> 00:13:36,269
a really bad smell that says oh dear

00:13:32,850 --> 00:13:37,470
actually I've got some something in

00:13:36,269 --> 00:13:39,000
bitter than my application I've got some

00:13:37,470 --> 00:13:42,240
application logic or something there

00:13:39,000 --> 00:13:44,339
which is making it very difficult for me

00:13:42,240 --> 00:13:45,509
to have confidence that as I deploy it

00:13:44,339 --> 00:13:48,269
between different environments it's

00:13:45,509 --> 00:13:49,350
actually going to work right so what it

00:13:48,269 --> 00:13:51,269
actually means is that we might deploy

00:13:49,350 --> 00:13:52,649
to production I'm deploying the code for

00:13:51,269 --> 00:13:54,870
the very first time in production we

00:13:52,649 --> 00:13:56,490
don't want to be doing that right

00:13:54,870 --> 00:13:59,339
what we want to be able to do is we want

00:13:56,490 --> 00:14:00,480
to be able to very easily build new

00:13:59,339 --> 00:14:04,259
environments and we want to be able to

00:14:00,480 --> 00:14:05,279
decouple those environments we want to

00:14:04,259 --> 00:14:06,720
be able to decouple those environments

00:14:05,279 --> 00:14:08,250
from being something that's very

00:14:06,720 --> 00:14:11,519
expensive to bring up okay so we don't

00:14:08,250 --> 00:14:13,439
want a situation where like typically in

00:14:11,519 --> 00:14:14,819
organizations you've got nobody quite

00:14:13,439 --> 00:14:16,620
remembers how to build a new environment

00:14:14,819 --> 00:14:17,790
maybe there's some manual steps involved

00:14:16,620 --> 00:14:19,110
you want to skip around all that stuff

00:14:17,790 --> 00:14:20,399
and you want to say with Cloud Foundry I

00:14:19,110 --> 00:14:21,779
can very easily provision a new

00:14:20,399 --> 00:14:23,730
environment by using the built-in

00:14:21,779 --> 00:14:25,290
primitives in cloud foundry to create

00:14:23,730 --> 00:14:26,370
new organizations or spaces right so

00:14:25,290 --> 00:14:27,930
that's really really true you know it's

00:14:26,370 --> 00:14:30,240
all running on the same platform and

00:14:27,930 --> 00:14:32,069
it's a great way to get going

00:14:30,240 --> 00:14:33,930
likewise I want to be able to scale as

00:14:32,069 --> 00:14:35,040
well so I want to be able to have some

00:14:33,930 --> 00:14:37,019
environments that are perhaps running at

00:14:35,040 --> 00:14:39,240
a smaller scale and I want to be able to

00:14:37,019 --> 00:14:41,059
have my larger environments perhaps a

00:14:39,240 --> 00:14:43,439
pre-production environment etc scaling

00:14:41,059 --> 00:14:44,819
and essentially willpower finally that's

00:14:43,439 --> 00:14:45,830
just a case of changing an integer

00:14:44,819 --> 00:14:47,510
somewhere

00:14:45,830 --> 00:14:50,660
in a manifest file right that's that's

00:14:47,510 --> 00:14:51,470
that's as easy as it gets this stuff you

00:14:50,660 --> 00:14:52,580
don't want to be doing all this stuff

00:14:51,470 --> 00:14:54,490
manually from the command line you

00:14:52,580 --> 00:14:57,110
really do want to be doing this stuff

00:14:54,490 --> 00:14:59,390
through code so so if you're working

00:14:57,110 --> 00:15:00,590
with the the CF CLI you do want to be

00:14:59,390 --> 00:15:02,270
driving all this stuff through code you

00:15:00,590 --> 00:15:04,190
need to be able to say you know through

00:15:02,270 --> 00:15:05,480
the source code history I can go back

00:15:04,190 --> 00:15:06,620
and I can reason about the changes that

00:15:05,480 --> 00:15:09,020
have been made to my deployment

00:15:06,620 --> 00:15:10,220
scripting but the point is once it's all

00:15:09,020 --> 00:15:12,470
in code right once it's all going

00:15:10,220 --> 00:15:15,080
through my my deployment pipeline I know

00:15:12,470 --> 00:15:15,860
that I can do this repeatedly I can if I

00:15:15,080 --> 00:15:17,210
think there's an issue with my

00:15:15,860 --> 00:15:20,600
environment I can shoot it I can build

00:15:17,210 --> 00:15:22,460
another one this is a really interesting

00:15:20,600 --> 00:15:24,950
pattern which is about low testing

00:15:22,460 --> 00:15:26,600
within your pipeline so a lot of teams

00:15:24,950 --> 00:15:28,460
you get teams that are otherwise very

00:15:26,600 --> 00:15:30,020
very agile right and these teams may

00:15:28,460 --> 00:15:31,700
have like cards on the wall and be very

00:15:30,020 --> 00:15:32,690
much into how they can deliver as

00:15:31,700 --> 00:15:35,960
quickly for the customer and get

00:15:32,690 --> 00:15:37,370
feedback but typically these teams a lot

00:15:35,960 --> 00:15:38,750
of people will still go we're gonna have

00:15:37,370 --> 00:15:40,580
a load testing window right we're gonna

00:15:38,750 --> 00:15:42,800
have like three weeks where we do some

00:15:40,580 --> 00:15:44,120
load testing and we're gonna sit down

00:15:42,800 --> 00:15:45,320
and figure out how to write our load

00:15:44,120 --> 00:15:46,880
testing scripts again and we're gonna

00:15:45,320 --> 00:15:49,010
try and remember how we scale our

00:15:46,880 --> 00:15:50,900
platforms and create new platforms and

00:15:49,010 --> 00:15:53,450
you know it's always a bit of a

00:15:50,900 --> 00:15:54,890
difficult situation and what what I'm

00:15:53,450 --> 00:15:56,900
really advocating it's data and what we

00:15:54,890 --> 00:15:58,460
did is is we actually said let's treat

00:15:56,900 --> 00:16:00,770
blow testing is something that's part of

00:15:58,460 --> 00:16:02,090
our our pipeline let's say that it's

00:16:00,770 --> 00:16:03,830
actually just another gate that we need

00:16:02,090 --> 00:16:06,170
to go through right we need to say if

00:16:03,830 --> 00:16:07,190
our software is fit for purpose it's

00:16:06,170 --> 00:16:09,350
going to perform at the levels that we

00:16:07,190 --> 00:16:11,330
want it to perform at and that means

00:16:09,350 --> 00:16:12,590
that let's say that we're actually doing

00:16:11,330 --> 00:16:15,830
that we're assessing whether or not our

00:16:12,590 --> 00:16:17,690
software performs under the load that we

00:16:15,830 --> 00:16:19,520
expected to perform under as we make

00:16:17,690 --> 00:16:21,560
every change that means that we're not

00:16:19,520 --> 00:16:22,850
in a situation where we've made like two

00:16:21,560 --> 00:16:24,710
months worth of changes and we're

00:16:22,850 --> 00:16:25,970
deploying it and now we've got to try

00:16:24,710 --> 00:16:27,590
and work out which of those changes is

00:16:25,970 --> 00:16:30,320
caused the regression where we don't

00:16:27,590 --> 00:16:32,180
scale anymore right so I think having it

00:16:30,320 --> 00:16:33,590
as part of the pipeline is is definitely

00:16:32,180 --> 00:16:35,150
the way you want to go and we're Cloud

00:16:33,590 --> 00:16:36,760
Foundry helps you here is the ease with

00:16:35,150 --> 00:16:38,780
which you can scale up and scale down

00:16:36,760 --> 00:16:40,700
means that it's not a situation where

00:16:38,780 --> 00:16:42,170
you have to say oh it's so expensive you

00:16:40,700 --> 00:16:43,820
know it's not cost-effective for me to

00:16:42,170 --> 00:16:45,770
do this you know two production volumes

00:16:43,820 --> 00:16:47,810
now I can do that because I'm able to

00:16:45,770 --> 00:16:49,490
scale it up briefly perform the load

00:16:47,810 --> 00:16:51,410
testing and then tear it down again and

00:16:49,490 --> 00:16:52,580
and I think that's that's really the

00:16:51,410 --> 00:16:54,170
mindset that you want to be in you want

00:16:52,580 --> 00:16:55,940
to be able to say yes I can do this

00:16:54,170 --> 00:16:58,070
stuff it's cost-effective for me to do

00:16:55,940 --> 00:16:58,640
it and the scaling that's built in to

00:16:58,070 --> 00:17:02,630
clarify

00:16:58,640 --> 00:17:05,990
let's me do this stuff externalizing

00:17:02,630 --> 00:17:07,250
configuration so this one there's

00:17:05,990 --> 00:17:08,240
perhaps I was actually trying to talk

00:17:07,250 --> 00:17:10,670
about this one earlier and got slightly

00:17:08,240 --> 00:17:12,910
confused in my slide order but what

00:17:10,670 --> 00:17:15,440
we're talking about here is you've got

00:17:12,910 --> 00:17:18,350
what you want to be able to do is not

00:17:15,440 --> 00:17:19,850
have the configuration and embedded

00:17:18,350 --> 00:17:21,170
within the application right so as I was

00:17:19,850 --> 00:17:22,970
saying earlier you don't have a

00:17:21,170 --> 00:17:24,200
situation where you're changing the

00:17:22,970 --> 00:17:25,850
artifact as you move it between

00:17:24,200 --> 00:17:27,829
environments what you want to have is a

00:17:25,850 --> 00:17:30,080
situation where you've got a nice clean

00:17:27,829 --> 00:17:32,780
separation between the code and the

00:17:30,080 --> 00:17:34,730
configuration and there's a website

00:17:32,780 --> 00:17:36,770
called twelve factor dotnet which is

00:17:34,730 --> 00:17:37,880
comes from the Heroku team which are

00:17:36,770 --> 00:17:39,920
differently if you haven't looked at

00:17:37,880 --> 00:17:41,450
please look at because it really talks

00:17:39,920 --> 00:17:43,280
about this it talks about having a

00:17:41,450 --> 00:17:45,470
strict separation between your config

00:17:43,280 --> 00:17:46,640
and your code and that really means all

00:17:45,470 --> 00:17:48,590
the stuff about Cloud Foundry where

00:17:46,640 --> 00:17:50,030
you're able to bind services and you'll

00:17:48,590 --> 00:17:51,590
you know your application comes up and

00:17:50,030 --> 00:17:53,900
consumes those services it doesn't have

00:17:51,590 --> 00:17:56,480
a hard-coded you know database server IP

00:17:53,900 --> 00:17:57,590
and port is just consuming a service and

00:17:56,480 --> 00:17:58,670
that's the way a developer thinks about

00:17:57,590 --> 00:18:00,350
it right I don't want to think about all

00:17:58,670 --> 00:18:01,520
the infrastructure I don't have to think

00:18:00,350 --> 00:18:02,690
about this bit of code is running on

00:18:01,520 --> 00:18:04,430
this node and this other bit of code

00:18:02,690 --> 00:18:05,990
running on this other node I just really

00:18:04,430 --> 00:18:08,320
want to be thinking about binding

00:18:05,990 --> 00:18:10,610
services and I want to be just consuming

00:18:08,320 --> 00:18:13,960
you know my settings without it being

00:18:10,610 --> 00:18:16,970
hard-coded into the application so

00:18:13,960 --> 00:18:18,140
reproducible environments so now we've

00:18:16,970 --> 00:18:20,090
got a situation where we're moving the

00:18:18,140 --> 00:18:21,530
same code between our environments but

00:18:20,090 --> 00:18:22,610
how come usually have confidence that

00:18:21,530 --> 00:18:25,850
our environments themselves are

00:18:22,610 --> 00:18:27,380
reproducible and Cloud Foundry is great

00:18:25,850 --> 00:18:29,480
great for this and obviously we've got

00:18:27,380 --> 00:18:30,920
one option which is the the pairs itself

00:18:29,480 --> 00:18:32,570
so we can host multiple environments on

00:18:30,920 --> 00:18:33,680
the same pairs and we can have a high

00:18:32,570 --> 00:18:35,000
level of confidence that it's going to

00:18:33,680 --> 00:18:37,160
be running the same software obviously

00:18:35,000 --> 00:18:38,750
but then we've then got Bosh and the

00:18:37,160 --> 00:18:40,270
fantastic thing about Bosh is that we've

00:18:38,750 --> 00:18:43,760
got our deployment manifest where we can

00:18:40,270 --> 00:18:45,590
reproducibly build environments so I can

00:18:43,760 --> 00:18:49,010
take you know an existing deployment

00:18:45,590 --> 00:18:52,880
manifest I can use there to bring up a

00:18:49,010 --> 00:18:54,680
new environment and if I need to I can I

00:18:52,880 --> 00:18:56,000
can make changes or customizations to

00:18:54,680 --> 00:18:57,560
that but the point is it's all in source

00:18:56,000 --> 00:18:59,300
control so if I have any doubt about the

00:18:57,560 --> 00:19:00,560
environment I just shoot the environment

00:18:59,300 --> 00:19:03,289
and I bring up another one with Bosh

00:19:00,560 --> 00:19:04,610
employee and it's that straightforward

00:19:03,289 --> 00:19:07,100
something that Bosch gets right as a

00:19:04,610 --> 00:19:08,539
pattern is artifact repositories and I

00:19:07,100 --> 00:19:09,710
think probably a lot of people are doing

00:19:08,539 --> 00:19:10,850
this already but this is really

00:19:09,710 --> 00:19:12,049
something that you probably wanna be

00:19:10,850 --> 00:19:14,450
applying to your application code as

00:19:12,049 --> 00:19:15,919
well so this is a situation where I've

00:19:14,450 --> 00:19:18,409
got an application but the application

00:19:15,919 --> 00:19:20,299
has some dependencies on some kind of

00:19:18,409 --> 00:19:22,370
external resource so for example I might

00:19:20,299 --> 00:19:24,649
have dependency on a library or a binary

00:19:22,370 --> 00:19:25,880
that sits outside of my network and so

00:19:24,649 --> 00:19:27,409
if I'm building my software or I'm

00:19:25,880 --> 00:19:30,169
deploying my software there's a

00:19:27,409 --> 00:19:31,730
situation where potentially that that

00:19:30,169 --> 00:19:33,470
resource has disappeared and suddenly I

00:19:31,730 --> 00:19:35,360
can no longer rebuild the service that

00:19:33,470 --> 00:19:36,679
my customer depends on right so what

00:19:35,360 --> 00:19:39,110
I've got to do is ensure that I've

00:19:36,679 --> 00:19:40,279
actually vend in the Ruby term really

00:19:39,110 --> 00:19:41,870
community callers and vendor in your

00:19:40,279 --> 00:19:44,630
dependencies what I want to be able to

00:19:41,870 --> 00:19:46,190
do is to ensure that that all those

00:19:44,630 --> 00:19:48,139
binaries everything I need to rebuild

00:19:46,190 --> 00:19:50,029
the service starting from you know the

00:19:48,139 --> 00:19:52,340
code all the way up is all in my

00:19:50,029 --> 00:19:53,600
artifact repository and so for Java I

00:19:52,340 --> 00:19:55,519
would do something like nexus for this

00:19:53,600 --> 00:19:57,860
if I was doing Ruby stuff I'd have a Jim

00:19:55,519 --> 00:20:00,889
proxy of some type and in the same way

00:19:57,860 --> 00:20:02,419
if I'm doing Bosh stuff if I'm building

00:20:00,889 --> 00:20:03,919
cloud foundries Bosh has got the

00:20:02,419 --> 00:20:05,360
blobstore built in and that's really all

00:20:03,919 --> 00:20:07,250
the blobstore is it's a it's an s3

00:20:05,360 --> 00:20:08,990
bucket with a bunch of binaries in it

00:20:07,250 --> 00:20:10,190
and that just ensures that you have that

00:20:08,990 --> 00:20:12,200
ability you have that ability to

00:20:10,190 --> 00:20:13,880
reproduce the environment because if you

00:20:12,200 --> 00:20:15,559
don't have that that insurance policy

00:20:13,880 --> 00:20:16,399
you know that on that really important

00:20:15,559 --> 00:20:17,720
day when you need to build a new

00:20:16,399 --> 00:20:19,340
environment or you know you need to

00:20:17,720 --> 00:20:23,000
deploy something it's going to go

00:20:19,340 --> 00:20:24,350
disappear Bluegreen deployments I'm not

00:20:23,000 --> 00:20:26,299
going to talk too much about this except

00:20:24,350 --> 00:20:29,299
to say this is a pattern that the Cloud

00:20:26,299 --> 00:20:30,320
Foundry makes extremely easy to do both

00:20:29,299 --> 00:20:32,690
through the ability to deploy

00:20:30,320 --> 00:20:34,519
application so easily and also for the

00:20:32,690 --> 00:20:36,139
ability to change the mapping at the

00:20:34,519 --> 00:20:38,659
front so easily so you can control where

00:20:36,139 --> 00:20:40,789
the traffic goes to yeah I won't talk

00:20:38,659 --> 00:20:43,850
too much about that but feel free to to

00:20:40,789 --> 00:20:45,260
read up on it so things to watch out for

00:20:43,850 --> 00:20:46,850
we've talked about how Cloud Foundry is

00:20:45,260 --> 00:20:48,230
a really good fit for this stuff let's

00:20:46,850 --> 00:20:50,779
look at a couple of situations where we

00:20:48,230 --> 00:20:52,039
need to be a little bit more careful so

00:20:50,779 --> 00:20:54,260
one of these is menu and application

00:20:52,039 --> 00:20:56,299
changes so this is really showing how

00:20:54,260 --> 00:20:58,909
it's a double-edged sword right it's so

00:20:56,299 --> 00:21:00,080
easy for me to deploy new code that's

00:20:58,909 --> 00:21:02,090
fantastic from a developer's perspective

00:21:00,080 --> 00:21:03,590
but I really need to ensure that any

00:21:02,090 --> 00:21:05,059
changes that I make are going through

00:21:03,590 --> 00:21:06,740
that same deployment pipeline that I

00:21:05,059 --> 00:21:09,230
talked about earlier if I'm making

00:21:06,740 --> 00:21:10,850
changes that are manual if I'm actually

00:21:09,230 --> 00:21:12,020
deploying new code pushing out new code

00:21:10,850 --> 00:21:13,190
without it going through all of those

00:21:12,020 --> 00:21:15,090
series of gates that we talked about

00:21:13,190 --> 00:21:16,200
earlier I'm going

00:21:15,090 --> 00:21:18,480
have trouble because now I can't

00:21:16,200 --> 00:21:19,920
reproduce my service again right I had

00:21:18,480 --> 00:21:22,290
Bob who went on there and pushed some

00:21:19,920 --> 00:21:23,790
code or maybe he opened a tunnel - you

00:21:22,290 --> 00:21:25,470
know our service that we depend on and

00:21:23,790 --> 00:21:27,510
issued some update Simmons for something

00:21:25,470 --> 00:21:29,550
now suddenly I can't reproduce the state

00:21:27,510 --> 00:21:31,230
of that service so it's really important

00:21:29,550 --> 00:21:32,550
that any changes I made are in source

00:21:31,230 --> 00:21:34,800
control so they can be reasoned about

00:21:32,550 --> 00:21:36,090
they can be looked at and I can diff

00:21:34,800 --> 00:21:40,850
them I can understand what's happening

00:21:36,090 --> 00:21:42,870
over time this one's about branching so

00:21:40,850 --> 00:21:45,120
just humble one of the authors of the

00:21:42,870 --> 00:21:46,910
continuous delivery book which you will

00:21:45,120 --> 00:21:50,190
need to read by the way for heaven is

00:21:46,910 --> 00:21:51,540
really against long lived branches okay

00:21:50,190 --> 00:21:54,330
and this is quite a controversial one

00:21:51,540 --> 00:21:56,790
but essentially what we're saying is if

00:21:54,330 --> 00:21:59,190
I'm if I'm using get it's so easy for me

00:21:56,790 --> 00:22:00,600
to create branches with get that I can

00:21:59,190 --> 00:22:01,800
you know I can create branches all over

00:22:00,600 --> 00:22:03,600
the place and I can have a long-lived

00:22:01,800 --> 00:22:05,730
piece of development that maybe runs

00:22:03,600 --> 00:22:08,070
over you know three or four days five

00:22:05,730 --> 00:22:09,510
days or something and I'm kind of happy

00:22:08,070 --> 00:22:11,190
I'm running in my own little world and

00:22:09,510 --> 00:22:13,410
I'm able to run tests and feel like I'm

00:22:11,190 --> 00:22:14,730
actually okay but all the while while

00:22:13,410 --> 00:22:16,170
I'm doing this there's new changes that

00:22:14,730 --> 00:22:18,540
are dropping in to the mainline that I'm

00:22:16,170 --> 00:22:19,890
not getting right I'm not actually able

00:22:18,540 --> 00:22:21,300
to say with any certainty when the

00:22:19,890 --> 00:22:23,160
customer says yeah that looks great it's

00:22:21,300 --> 00:22:24,660
let's push it I go oh well I've just

00:22:23,160 --> 00:22:26,490
gotta merge it all back in and you know

00:22:24,660 --> 00:22:28,560
I'm gonna have two days of marriage hell

00:22:26,490 --> 00:22:30,060
or something in the same way with flour

00:22:28,560 --> 00:22:31,680
foundry because it's so easy for me to

00:22:30,060 --> 00:22:32,820
create separate deployments right that's

00:22:31,680 --> 00:22:34,920
so easy for me to provision new

00:22:32,820 --> 00:22:36,360
applications there's a risk there that a

00:22:34,920 --> 00:22:38,220
developer goes oh well cool I'll just

00:22:36,360 --> 00:22:40,020
spin this up I'll take that code that's

00:22:38,220 --> 00:22:41,550
on my own branch and I'll deploy it

00:22:40,020 --> 00:22:43,650
somewhere and really you want to be

00:22:41,550 --> 00:22:45,090
encouraging as much as possible all of

00:22:43,650 --> 00:22:46,380
the stuff to go down the main line so

00:22:45,090 --> 00:22:48,270
that you're able to say with certainty

00:22:46,380 --> 00:22:49,830
year so I've integrated that code the

00:22:48,270 --> 00:22:53,520
actual main trunk of what I'm working on

00:22:49,830 --> 00:22:54,900
is in a releasable state so we've talked

00:22:53,520 --> 00:22:56,100
about application code quite a bit I

00:22:54,900 --> 00:22:57,600
want to talk a little bit about how we

00:22:56,100 --> 00:23:01,020
can apply now the same principles we

00:22:57,600 --> 00:23:02,820
talked about to infrastructure code so

00:23:01,020 --> 00:23:04,590
this is your service right at the top

00:23:02,820 --> 00:23:06,360
we've got our application code in the

00:23:04,590 --> 00:23:07,890
middle we've got our infrastructure code

00:23:06,360 --> 00:23:10,110
and at the bottom we've got our base RS

00:23:07,890 --> 00:23:13,140
so in cloud foundry jargon the bottom

00:23:10,110 --> 00:23:14,370
one is our is a boss stem cell right

00:23:13,140 --> 00:23:15,840
we've got a script that builds our stem

00:23:14,370 --> 00:23:17,220
cell in the middle we've got our

00:23:15,840 --> 00:23:19,050
infrastructure code in this case that's

00:23:17,220 --> 00:23:20,460
the Cloud Foundry pairs and at the top

00:23:19,050 --> 00:23:22,440
we've got our application code which are

00:23:20,460 --> 00:23:23,820
still our application code but the key

00:23:22,440 --> 00:23:25,200
point here is that each of these things

00:23:23,820 --> 00:23:27,810
actually has dependencies on the other

00:23:25,200 --> 00:23:28,770
right so if I change the script that

00:23:27,810 --> 00:23:30,630
builds the stem cell

00:23:28,770 --> 00:23:31,860
well suddenly I need to revalidate that

00:23:30,630 --> 00:23:33,210
all of the levels that said above that

00:23:31,860 --> 00:23:34,940
are actually you can still going to work

00:23:33,210 --> 00:23:37,140
right because I don't know otherwise

00:23:34,940 --> 00:23:38,760
likewise if I change some of the code in

00:23:37,140 --> 00:23:40,860
my boss release that defines my Cloud

00:23:38,760 --> 00:23:42,150
Foundry I also need to ensure that the

00:23:40,860 --> 00:23:43,470
application is still going to function

00:23:42,150 --> 00:23:44,760
correctly so these are these

00:23:43,470 --> 00:23:47,220
interrelationships that are very much

00:23:44,760 --> 00:23:49,050
like if you have separate libraries or

00:23:47,220 --> 00:23:50,520
you know a normal software project I

00:23:49,050 --> 00:23:51,900
need to actually kick off a build and

00:23:50,520 --> 00:23:56,309
ensure that I'm building as these

00:23:51,900 --> 00:23:57,720
dependencies are updated if we got a

00:23:56,309 --> 00:23:58,980
little bit further and we say ok how can

00:23:57,720 --> 00:24:01,110
I apply these the sphere that my

00:23:58,980 --> 00:24:02,220
infrastructure code well one of the

00:24:01,110 --> 00:24:04,020
things I can do very easily we talked

00:24:02,220 --> 00:24:05,190
about having tests that run right at the

00:24:04,020 --> 00:24:06,929
start of our pipeline that are very

00:24:05,190 --> 00:24:08,309
quick to run one of the things I can do

00:24:06,929 --> 00:24:09,990
is I can do some validation of my Bosch

00:24:08,309 --> 00:24:12,059
manifests for example so I can say is

00:24:09,990 --> 00:24:13,290
that a valid Jemil file you know is it

00:24:12,059 --> 00:24:14,940
well-formed Gemmell or does it just

00:24:13,290 --> 00:24:17,550
break as soon as I try and pass it

00:24:14,940 --> 00:24:19,710
likewise I can look and I can do some

00:24:17,550 --> 00:24:21,540
semantic validation of the data that's

00:24:19,710 --> 00:24:23,130
in that manifest and I can say for those

00:24:21,540 --> 00:24:25,950
IP addresses and for those IP address

00:24:23,130 --> 00:24:27,480
ranges do they actually go together does

00:24:25,950 --> 00:24:28,440
it make sense is that IP address and

00:24:27,480 --> 00:24:32,520
valid for the range that's been

00:24:28,440 --> 00:24:33,840
specified once I've done that and

00:24:32,520 --> 00:24:35,070
obviously really what I want to do is as

00:24:33,840 --> 00:24:36,270
soon as I commit a new version of the

00:24:35,070 --> 00:24:38,670
manifest I also want to kick off a

00:24:36,270 --> 00:24:40,380
deployment I want to prove that that man

00:24:38,670 --> 00:24:42,690
if it's actually results in a working

00:24:40,380 --> 00:24:44,400
service but then I also want to think

00:24:42,690 --> 00:24:46,500
about changes to my boss releases

00:24:44,400 --> 00:24:48,150
themselves right so I want to say if I

00:24:46,500 --> 00:24:49,230
change the release code I want to

00:24:48,150 --> 00:24:50,850
automate the upload of that to the

00:24:49,230 --> 00:24:52,230
director I want to kick off a deployment

00:24:50,850 --> 00:24:53,970
I want to say yes I can see how that

00:24:52,230 --> 00:24:55,380
works and there's no reason you can't

00:24:53,970 --> 00:24:57,270
automate all of the stuff right all of

00:24:55,380 --> 00:24:58,800
this stuff is just simply available

00:24:57,270 --> 00:25:00,780
through a command line that's that's

00:24:58,800 --> 00:25:03,510
very high-level or you know it's all

00:25:00,780 --> 00:25:05,070
relative but it's very high level and so

00:25:03,510 --> 00:25:06,720
it's very easy for you to drive this

00:25:05,070 --> 00:25:10,320
stuff through Jenkins and automate the

00:25:06,720 --> 00:25:11,400
whole thing going for extra credit one

00:25:10,320 --> 00:25:12,570
of the things that we can do is we can

00:25:11,400 --> 00:25:16,440
automate the updates from upstream

00:25:12,570 --> 00:25:18,630
releases as well so for example if we

00:25:16,440 --> 00:25:20,490
have changes to the Cloud Foundry

00:25:18,630 --> 00:25:21,840
release that these guys are busy you

00:25:20,490 --> 00:25:24,570
know hacking your way on and it never

00:25:21,840 --> 00:25:26,010
breaks right it's always okay we want to

00:25:24,570 --> 00:25:27,360
actually ensure that we know whether or

00:25:26,010 --> 00:25:29,160
not all of the stuff that runs on top of

00:25:27,360 --> 00:25:30,390
there is going to work correctly so if

00:25:29,160 --> 00:25:31,470
there's some updates to the to the

00:25:30,390 --> 00:25:33,000
versions of the software that have been

00:25:31,470 --> 00:25:34,620
used any of that kind of stuff we want

00:25:33,000 --> 00:25:36,300
to know does our platform still work

00:25:34,620 --> 00:25:37,220
does the to the applications that run on

00:25:36,300 --> 00:25:39,050
their platform still

00:25:37,220 --> 00:25:40,490
and again this is just a simple case of

00:25:39,050 --> 00:25:41,920
expressing those dependencies in a way

00:25:40,490 --> 00:25:43,910
that allows it ought to be built

00:25:41,920 --> 00:25:46,010
likewise if there are some binaries that

00:25:43,910 --> 00:25:48,380
are embedded in our releases maybe these

00:25:46,010 --> 00:25:49,670
are quite awful and emboss releases you

00:25:48,380 --> 00:25:51,500
you don't necessarily use our es

00:25:49,670 --> 00:25:53,000
packages so in that case you're wearing

00:25:51,500 --> 00:25:56,600
the burden of actually coping with

00:25:53,000 --> 00:25:58,010
changes between binary versions so we

00:25:56,600 --> 00:25:59,270
want to know when a new version of Redis

00:25:58,010 --> 00:26:00,530
is available that fixes that like

00:25:59,270 --> 00:26:04,100
critical security effects that we need

00:26:00,530 --> 00:26:06,470
effects so you can automate that stuff

00:26:04,100 --> 00:26:07,790
as well right it's just effort it's all

00:26:06,470 --> 00:26:09,590
just effort but the point is the more

00:26:07,790 --> 00:26:10,910
you automate the more confidence you can

00:26:09,590 --> 00:26:14,720
have that your service is going to work

00:26:10,910 --> 00:26:17,090
properly so key takeaways I want you to

00:26:14,720 --> 00:26:18,560
come away with today Claire found it

00:26:17,090 --> 00:26:21,770
really does make building continuous

00:26:18,560 --> 00:26:23,300
delivery pipeline so much easier we we

00:26:21,770 --> 00:26:24,980
found it helped us massively just in

00:26:23,300 --> 00:26:26,660
terms of the ease and the the level of

00:26:24,980 --> 00:26:27,590
abstraction is really well-suited to the

00:26:26,660 --> 00:26:30,110
way that you want to think about the

00:26:27,590 --> 00:26:31,520
problem as a developer Claire pfann who

00:26:30,110 --> 00:26:34,760
makes it really easy for you to do the

00:26:31,520 --> 00:26:37,090
right thing so just by naturally kind of

00:26:34,760 --> 00:26:38,660
depends we talked about likely

00:26:37,090 --> 00:26:40,280
externalizing the environment

00:26:38,660 --> 00:26:41,780
configuration is just something that is

00:26:40,280 --> 00:26:43,160
the defaulting Cloud Foundry so you

00:26:41,780 --> 00:26:45,020
don't kind of fall into these traps

00:26:43,160 --> 00:26:47,120
Cloud Foundry is just naturally a good

00:26:45,020 --> 00:26:48,380
fit for continuous delivery and then I

00:26:47,120 --> 00:26:49,550
think the really key one is that that

00:26:48,380 --> 00:26:51,530
pears abstraction having that

00:26:49,550 --> 00:26:53,540
abstraction in place allowed us to grow

00:26:51,530 --> 00:26:54,980
from a very small scale all the way up

00:26:53,540 --> 00:26:56,750
for very large scale so we started off

00:26:54,980 --> 00:26:58,640
with that very you know slightly dodgy

00:26:56,750 --> 00:27:00,200
app at the beginning we built it right

00:26:58,640 --> 00:27:01,970
up to a real production system that was

00:27:00,200 --> 00:27:04,040
handing some significant volume and we

00:27:01,970 --> 00:27:05,480
did that all the time just talking to

00:27:04,040 --> 00:27:06,650
the same abstraction Jenkins were still

00:27:05,480 --> 00:27:08,510
talking through to the same restriction

00:27:06,650 --> 00:27:11,840
and we had a steely happy we weren't

00:27:08,510 --> 00:27:12,590
breaking all the time yeah so I think it

00:27:11,840 --> 00:27:14,540
would have been difficult to do that

00:27:12,590 --> 00:27:15,770
with another solution so that's

00:27:14,540 --> 00:27:18,440
everything for me thank you very much

00:27:15,770 --> 00:27:20,050
for listening and drop me a line if you

00:27:18,440 --> 00:27:23,230
have any thoughts thank you

00:27:20,050 --> 00:27:26,329
[Applause]

00:27:23,230 --> 00:27:26,329
[Music]

00:27:28,990 --> 00:27:35,279

YouTube URL: https://www.youtube.com/watch?v=gjr-nGbWq48


