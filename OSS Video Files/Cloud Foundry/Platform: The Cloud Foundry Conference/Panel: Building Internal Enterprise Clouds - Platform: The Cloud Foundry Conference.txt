Title: Panel: Building Internal Enterprise Clouds - Platform: The Cloud Foundry Conference
Publication date: 2013-11-22
Playlist: Platform: The Cloud Foundry Conference
Description: 
	Panel: Building Internal Enterprise Clouds
Chetan Gadgil, GE Software & Analytics 
Dave McCrory, Warner Music Group 
Catherine Spence, Intel
Platform: The Cloud Foundry Conference (http://www.platformcf.com) September 8-9, 2013
Captions: 
	00:00:00,870 --> 00:00:03,979
[Music]

00:00:06,350 --> 00:00:11,059
Tom James waters I leave the product

00:00:08,670 --> 00:00:13,110
team at pivotal around Cloud Foundry I

00:00:11,059 --> 00:00:14,549
spend my pleasure to work on the project

00:00:13,110 --> 00:00:16,949
for about three and a half years now so

00:00:14,549 --> 00:00:19,529
it's been fun and what I wanted to do

00:00:16,949 --> 00:00:22,320
was to get some folks who are building

00:00:19,529 --> 00:00:24,170
internal clock boundaries on a stage and

00:00:22,320 --> 00:00:26,250
talk a little bit about the dynamics of

00:00:24,170 --> 00:00:27,869
you know it's one thing to be a service

00:00:26,250 --> 00:00:30,929
provider and building a public service

00:00:27,869 --> 00:00:32,070
that is consumed in a generic way but

00:00:30,929 --> 00:00:33,540
it's very different when you're building

00:00:32,070 --> 00:00:35,730
for an internal business customer who

00:00:33,540 --> 00:00:37,170
has a different kind of leverage a

00:00:35,730 --> 00:00:39,480
different set of demands different

00:00:37,170 --> 00:00:41,040
timetables and two people that are

00:00:39,480 --> 00:00:42,570
building an internal Cloud Foundry you

00:00:41,040 --> 00:00:45,450
heard a great keynote yesterday from

00:00:42,570 --> 00:00:47,570
Jonathan from Warner Music so Dave is

00:00:45,450 --> 00:00:50,579
the SVP of engineering at Warner Music

00:00:47,570 --> 00:00:52,649
and then Katherine is an IT architect at

00:00:50,579 --> 00:00:53,879
Intel which is also building an internal

00:00:52,649 --> 00:00:55,440
Cloud Foundry and I thought we'd get

00:00:53,879 --> 00:00:57,390
together have a little fireside chat for

00:00:55,440 --> 00:00:58,739
20-30 minutes and learn what it's like

00:00:57,390 --> 00:01:02,579
to build an internal cloud and how to be

00:00:58,739 --> 00:01:04,739
successful doing it so Katherine maybe

00:01:02,579 --> 00:01:06,600
you want to kick off tell us a little

00:01:04,739 --> 00:01:08,369
bit about when you got this idea of

00:01:06,600 --> 00:01:10,140
maybe we should build a path where that

00:01:08,369 --> 00:01:11,640
came from

00:01:10,140 --> 00:01:15,180
and maybe the problem you were trying to

00:01:11,640 --> 00:01:17,729
solve okay sure okay so yeah an

00:01:15,180 --> 00:01:20,009
enterprise architect and we've been

00:01:17,729 --> 00:01:24,810
working with Cloud Foundry for about two

00:01:20,009 --> 00:01:28,320
years now and we have a big we call it

00:01:24,810 --> 00:01:30,960
our open cloud program which is you know

00:01:28,320 --> 00:01:34,229
basically can we build a cloud out of

00:01:30,960 --> 00:01:35,759
open source components and starting with

00:01:34,229 --> 00:01:37,650
infrastructure as a service so we've

00:01:35,759 --> 00:01:40,049
done a lot of you know OpenStack work

00:01:37,650 --> 00:01:42,840
with infrastructure as a service and we

00:01:40,049 --> 00:01:44,700
were looking to extend the value of our

00:01:42,840 --> 00:01:48,420
infrastructure as a service with

00:01:44,700 --> 00:01:51,119
platform as a service so that was really

00:01:48,420 --> 00:01:54,780
the motivator we saw that it was taking

00:01:51,119 --> 00:01:56,700
roughly you know over a month to deploy

00:01:54,780 --> 00:02:00,240
applications into production and there

00:01:56,700 --> 00:02:02,579
was just a huge opportunity to increase

00:02:00,240 --> 00:02:06,230
agility and get applications landed a

00:02:02,579 --> 00:02:08,870
lot faster for our developers

00:02:06,230 --> 00:02:10,820
idea of production and a that's right so

00:02:08,870 --> 00:02:13,010
that's our mantra it stills our mantra

00:02:10,820 --> 00:02:14,960
make it possible to land an application

00:02:13,010 --> 00:02:17,990
in less than a day and so that includes

00:02:14,960 --> 00:02:19,550
a technical piece of actually you know

00:02:17,990 --> 00:02:21,110
physically landing the application but

00:02:19,550 --> 00:02:22,190
there's also a whole governance piece in

00:02:21,110 --> 00:02:27,890
there as well which is an interesting

00:02:22,190 --> 00:02:30,080
challenge yeah hi welcome to ease also

00:02:27,890 --> 00:02:31,580
building internal Cloud Foundry and a

00:02:30,080 --> 00:02:33,680
whole whole series of other platform

00:02:31,580 --> 00:02:38,050
services for GE what a great so I've

00:02:33,680 --> 00:02:38,050
never added live live capacity update

00:02:38,320 --> 00:02:46,910
wash wash deploy paneling no downtime at

00:02:44,060 --> 00:02:49,940
all so that's a great in show Catherine

00:02:46,910 --> 00:02:51,380
net so Dave maybe you can talk a little

00:02:49,940 --> 00:02:52,790
bit about what it was like to join an

00:02:51,380 --> 00:02:54,680
organization that you decided to build a

00:02:52,790 --> 00:02:55,700
platform of service and what were some

00:02:54,680 --> 00:02:56,840
of the conversations that you have

00:02:55,700 --> 00:02:58,550
internally like how do you how do you

00:02:56,840 --> 00:03:00,020
how do you talk to a business user what

00:02:58,550 --> 00:03:02,150
this is going to do for them how do you

00:03:00,020 --> 00:03:05,030
start to express this internally how do

00:03:02,150 --> 00:03:08,030
you how do you sell this well I think

00:03:05,030 --> 00:03:10,370
what what was so compelling was the idea

00:03:08,030 --> 00:03:13,400
that we were going to start from scratch

00:03:10,370 --> 00:03:15,680
so we weren't going to drag all of the

00:03:13,400 --> 00:03:18,140
legacy applications and everything else

00:03:15,680 --> 00:03:23,239
onto something that was going to be net

00:03:18,140 --> 00:03:25,580
new we instead chose to address the

00:03:23,239 --> 00:03:27,860
business with what are your problems

00:03:25,580 --> 00:03:31,700
what would you like what can we do for

00:03:27,860 --> 00:03:34,010
you and start at that point and then

00:03:31,700 --> 00:03:35,959
figure out what data we needed to drag

00:03:34,010 --> 00:03:39,350
over from the legacy environment in

00:03:35,959 --> 00:03:41,690
order to fulfill fulfill those business

00:03:39,350 --> 00:03:43,970
requirements start focus has been much

00:03:41,690 --> 00:03:46,370
more on these are the awesome things

00:03:43,970 --> 00:03:50,150
that the new IT can offer you by

00:03:46,370 --> 00:03:53,630
leveraging cloud foundry and we can do

00:03:50,150 --> 00:03:56,600
that very rapidly much faster than what

00:03:53,630 --> 00:03:58,459
a traditional IT org of any type could

00:03:56,600 --> 00:04:01,940
really do and these are customized

00:03:58,459 --> 00:04:06,230
applications we're able to meet a lot of

00:04:01,940 --> 00:04:08,750
business requirements that normally you

00:04:06,230 --> 00:04:10,640
would have to ask an advanced vastly far

00:04:08,750 --> 00:04:11,900
in advance well how large of a system do

00:04:10,640 --> 00:04:14,840
you need how many users do you

00:04:11,900 --> 00:04:16,160
anticipate how much data do you think

00:04:14,840 --> 00:04:18,590
you're going to generate what are the

00:04:16,160 --> 00:04:20,900
all of those things that

00:04:18,590 --> 00:04:22,640
for a business user if they have no idea

00:04:20,900 --> 00:04:24,620
what they don't know how much data

00:04:22,640 --> 00:04:26,150
they're gonna generate and generally

00:04:24,620 --> 00:04:28,880
they can't give you an accurate estimate

00:04:26,150 --> 00:04:31,730
of how many users are actually going to

00:04:28,880 --> 00:04:34,820
use it when you have a company that has

00:04:31,730 --> 00:04:37,850
you know 50 locations around the world

00:04:34,820 --> 00:04:41,450
with offices that vary in size from five

00:04:37,850 --> 00:04:43,850
to hundreds so a predefined architecture

00:04:41,450 --> 00:04:45,110
and scalability model it takes a lot of

00:04:43,850 --> 00:04:46,550
the burden off the business user from

00:04:45,110 --> 00:04:48,350
having even think about that that's

00:04:46,550 --> 00:04:51,500
right so they're not filling out an IT

00:04:48,350 --> 00:04:54,020
provisioning form of I want ATMs and for

00:04:51,500 --> 00:04:57,230
JBoss you know and that's right it's at

00:04:54,020 --> 00:04:59,330
one Cisco connection yes absolutely

00:04:57,230 --> 00:05:00,230
that's that's pretty compelling so it's

00:04:59,330 --> 00:05:01,340
a cheater maybe you can introduce

00:05:00,230 --> 00:05:03,710
yourself briefly

00:05:01,340 --> 00:05:07,400
hi my name is Jayden gargle I have

00:05:03,710 --> 00:05:09,110
worked for gee-gees of the center of

00:05:07,400 --> 00:05:11,810
excellence that was set up in San Ramon

00:05:09,110 --> 00:05:13,700
a couple of years ago as a part of our

00:05:11,810 --> 00:05:16,940
charter we are actually supporting all G

00:05:13,700 --> 00:05:19,220
businesses to build new generations of

00:05:16,940 --> 00:05:23,090
their products so that includes G

00:05:19,220 --> 00:05:25,280
aviation G healthcare oil and gas and so

00:05:23,090 --> 00:05:27,350
on and we are actually looking at new

00:05:25,280 --> 00:05:29,600
business models to deliver to the

00:05:27,350 --> 00:05:33,110
customers so that's why the cloud has

00:05:29,600 --> 00:05:35,660
become very relevant to us you have a

00:05:33,110 --> 00:05:38,030
really a really big challenge in terms

00:05:35,660 --> 00:05:39,440
of you build for how many GE internal

00:05:38,030 --> 00:05:41,240
business units I mean at the charts that

00:05:39,440 --> 00:05:43,550
you guys put up or just a mind-blowing

00:05:41,240 --> 00:05:44,570
the that the challenge of building

00:05:43,550 --> 00:05:48,170
something to satisfy all those

00:05:44,570 --> 00:05:51,140
requirements yeah so some of the things

00:05:48,170 --> 00:05:53,150
that we struggle with our G has pretty

00:05:51,140 --> 00:05:56,990
much every version of every product out

00:05:53,150 --> 00:05:59,630
there in its ID and some of the things

00:05:56,990 --> 00:06:02,390
that we need to do are to hit the ground

00:05:59,630 --> 00:06:04,190
running in the sense that we have to not

00:06:02,390 --> 00:06:06,860
just support the new generations of the

00:06:04,190 --> 00:06:08,990
applications but also look at what's

00:06:06,860 --> 00:06:10,310
already there and do it in a in a

00:06:08,990 --> 00:06:12,260
seamless fashion so existing

00:06:10,310 --> 00:06:14,180
applications should continue to run and

00:06:12,260 --> 00:06:15,830
the newer ones should be built on the

00:06:14,180 --> 00:06:19,790
newer architecture but interoperate with

00:06:15,830 --> 00:06:21,140
the older applications and as new teams

00:06:19,790 --> 00:06:23,060
are getting formed to build this

00:06:21,140 --> 00:06:24,590
applications especially efforts like the

00:06:23,060 --> 00:06:26,510
Center of Excellence where we are

00:06:24,590 --> 00:06:29,300
consolidating a lot of the development

00:06:26,510 --> 00:06:31,610
work in a single organization so agility

00:06:29,300 --> 00:06:32,150
and simplicity has become very important

00:06:31,610 --> 00:06:34,130
so

00:06:32,150 --> 00:06:35,930
as in for saying predefined models right

00:06:34,130 --> 00:06:37,430
there are there's no reason why every

00:06:35,930 --> 00:06:39,020
application needs to have a different

00:06:37,430 --> 00:06:41,630
architecture and a different deployment

00:06:39,020 --> 00:06:43,820
model now we can actually simplify by

00:06:41,630 --> 00:06:45,920
standardizing some of the application

00:06:43,820 --> 00:06:48,140
patterns that we already know exists and

00:06:45,920 --> 00:06:50,500
have them integrate with network

00:06:48,140 --> 00:06:53,300
patterns and deployment patterns that

00:06:50,500 --> 00:06:55,820
are required across different businesses

00:06:53,300 --> 00:06:57,530
so in the case of G actually we have to

00:06:55,820 --> 00:06:59,690
look at from a regulatory aspect also

00:06:57,530 --> 00:07:01,750
like in certain businesses PCI

00:06:59,690 --> 00:07:04,580
compliance is important in certain cases

00:07:01,750 --> 00:07:06,140
HIPAA compliance is important so in we

00:07:04,580 --> 00:07:07,610
have we actually building it in such a

00:07:06,140 --> 00:07:09,290
way that these we are creating this

00:07:07,610 --> 00:07:11,030
cookie cutter approaches and Cloud

00:07:09,290 --> 00:07:13,700
Foundry is perfect for that for us

00:07:11,030 --> 00:07:15,440
that's fantastic so you know one thing

00:07:13,700 --> 00:07:17,210
that Katherine did that I think is

00:07:15,440 --> 00:07:18,410
really interesting and angel will

00:07:17,210 --> 00:07:20,810
mention it and Krista talked about

00:07:18,410 --> 00:07:23,800
before is you hold internal hackathons

00:07:20,810 --> 00:07:26,990
so Cornelia is you coordinator here

00:07:23,800 --> 00:07:29,570
Cornelia is awesome and she's gonna be

00:07:26,990 --> 00:07:32,060
at a hackathon with Katherine up in the

00:07:29,570 --> 00:07:33,680
city on cloud foundry today but you even

00:07:32,060 --> 00:07:34,730
did this internally and this is what IBM

00:07:33,680 --> 00:07:36,650
talked about like when you're trying to

00:07:34,730 --> 00:07:38,180
get internal customers to use a new

00:07:36,650 --> 00:07:39,530
platform you you held a hackathon and

00:07:38,180 --> 00:07:41,720
invited people to come in you want to

00:07:39,530 --> 00:07:43,760
talk about that a little bit absolutely

00:07:41,720 --> 00:07:45,140
so you know it doesn't really matter if

00:07:43,760 --> 00:07:46,880
you're using infrastructure as a service

00:07:45,140 --> 00:07:48,950
or platform as a service there's a need

00:07:46,880 --> 00:07:50,990
for applications to be written to be

00:07:48,950 --> 00:07:53,300
cloud aware right to really take full

00:07:50,990 --> 00:07:55,040
advantage of the cloud and so we found

00:07:53,300 --> 00:07:57,380
that we had a skills gap within Intel

00:07:55,040 --> 00:07:59,210
and we wanted to teach our developers

00:07:57,380 --> 00:08:01,240
how to create applications that run well

00:07:59,210 --> 00:08:04,130
in the cloud of course I had an ulterior

00:08:01,240 --> 00:08:06,200
evil motive that I wanted to introduce

00:08:04,130 --> 00:08:08,780
them to platform as a service so we are

00:08:06,200 --> 00:08:11,210
holding a series of one-day hackathons

00:08:08,780 --> 00:08:13,000
where we bring developers in we let them

00:08:11,210 --> 00:08:15,410
work on any application that they want

00:08:13,000 --> 00:08:17,780
which is very immersive for them and

00:08:15,410 --> 00:08:19,340
they have to actually host it on

00:08:17,780 --> 00:08:21,470
platform as a service in our enterprise

00:08:19,340 --> 00:08:23,540
private cloud it's been highly

00:08:21,470 --> 00:08:25,550
successful it energy energizes the

00:08:23,540 --> 00:08:27,320
developers and my evil plan is working

00:08:25,550 --> 00:08:28,550
because it's generating a lot of demand

00:08:27,320 --> 00:08:31,430
for the platform as-a-service

00:08:28,550 --> 00:08:32,960
yeah we hear about this is a very common

00:08:31,430 --> 00:08:35,360
adoption model of getting platform of

00:08:32,960 --> 00:08:37,070
service going internally james bear over

00:08:35,360 --> 00:08:38,510
here has been working with a large bank

00:08:37,070 --> 00:08:40,130
and we heard from them the other day

00:08:38,510 --> 00:08:41,600
like our cluster is full like

00:08:40,130 --> 00:08:43,220
essentially they had open it up to folks

00:08:41,600 --> 00:08:43,919
and they suddenly needed more capacity

00:08:43,220 --> 00:08:45,569
and I think

00:08:43,919 --> 00:08:48,329
that's a very innovative way of trying

00:08:45,569 --> 00:08:49,739
to communicate value to business a line

00:08:48,329 --> 00:08:51,209
of business people because you say hey

00:08:49,739 --> 00:08:54,149
your developers are already here using

00:08:51,209 --> 00:08:55,589
this service is already going now one

00:08:54,149 --> 00:08:57,449
question then is how constrained do you

00:08:55,589 --> 00:08:59,279
think the model should be so Dave

00:08:57,449 --> 00:09:00,869
Jonathan was here yesterday said no

00:08:59,279 --> 00:09:01,439
relational databases on our platform

00:09:00,869 --> 00:09:03,329
as-a-service

00:09:01,439 --> 00:09:04,829
how do you guys think about constraining

00:09:03,329 --> 00:09:08,609
your data model and that the trade-offs

00:09:04,829 --> 00:09:10,759
of maybe the friendliness of a familiar

00:09:08,609 --> 00:09:14,669
model versus a new more scalable model

00:09:10,759 --> 00:09:17,369
well I think it's more of deciding what

00:09:14,669 --> 00:09:20,489
your actual business needs are we we

00:09:17,369 --> 00:09:23,939
shied away from going with a traditional

00:09:20,489 --> 00:09:26,220
relational database out from the start

00:09:23,939 --> 00:09:29,069
because we had other we had other needs

00:09:26,220 --> 00:09:33,989
that we were trying to meet the the idea

00:09:29,069 --> 00:09:36,299
of trying to replicate a database around

00:09:33,989 --> 00:09:38,939
the world effectively we already had

00:09:36,299 --> 00:09:41,579
with with a very very expensive Oracle

00:09:38,939 --> 00:09:42,779
solution and we decided we didn't want

00:09:41,579 --> 00:09:45,809
to do that again

00:09:42,779 --> 00:09:48,600
and so we stepped back and looked and

00:09:45,809 --> 00:09:52,919
said does our platform need that today

00:09:48,600 --> 00:09:56,299
and it didn't it doesn't we have not

00:09:52,919 --> 00:09:58,799
found a need so far for strict

00:09:56,299 --> 00:10:01,319
transactionality doesn't mean we won't

00:09:58,799 --> 00:10:03,419
in the future we have a couple of things

00:10:01,319 --> 00:10:05,610
coming up that may that may push a

00:10:03,419 --> 00:10:07,499
demand and we will end up doing it at

00:10:05,610 --> 00:10:10,350
that point something we've learned is

00:10:07,499 --> 00:10:12,629
not to introduce a a bunch of features

00:10:10,350 --> 00:10:14,549
and capabilities just to have them there

00:10:12,629 --> 00:10:16,799
needs to be some ultimate business

00:10:14,549 --> 00:10:18,809
driving need that makes you want to turn

00:10:16,799 --> 00:10:21,059
on a service or use a service it's not

00:10:18,809 --> 00:10:23,720
just because it's neither cool there

00:10:21,059 --> 00:10:27,089
needs to be a purpose and that includes

00:10:23,720 --> 00:10:28,499
at least from a technical view we

00:10:27,089 --> 00:10:31,110
haven't been doing caching in our

00:10:28,499 --> 00:10:32,879
architecture at all anywhere and I've

00:10:31,110 --> 00:10:34,829
had engineers go why don't you guys

00:10:32,879 --> 00:10:36,689
caching all of this it's because we

00:10:34,829 --> 00:10:39,299
haven't needed to so we've chosen to not

00:10:36,689 --> 00:10:46,019
introduce that extra complexity without

00:10:39,299 --> 00:10:48,660
purpose makes a lot of sense there's

00:10:46,019 --> 00:10:50,279
there's a database in there to store

00:10:48,660 --> 00:10:52,709
like you know I assume you have a big

00:10:50,279 --> 00:10:53,999
catalog of all of the recorded music and

00:10:52,709 --> 00:10:55,679
so there is a database there it's just

00:10:53,999 --> 00:10:56,209
that you're advocating you don't nobody

00:10:55,679 --> 00:10:57,800
has direct

00:10:56,209 --> 00:10:59,990
access to its fruit service layer right

00:10:57,800 --> 00:11:02,839
is that or is there really no database

00:10:59,990 --> 00:11:06,230
there there's there's there's more of a

00:11:02,839 --> 00:11:07,999
no sequel sipping of an on acid so we

00:11:06,230 --> 00:11:10,699
actually use Cassandra is our primary

00:11:07,999 --> 00:11:13,569
storage and we don't store currently the

00:11:10,699 --> 00:11:16,160
music catalog in the net new system

00:11:13,569 --> 00:11:18,230
mainly because we don't need to yet

00:11:16,160 --> 00:11:21,350
that's a system that we've had around

00:11:18,230 --> 00:11:23,569
for a very long time I think it has it's

00:11:21,350 --> 00:11:26,929
over a petabyte I mean it's very large

00:11:23,569 --> 00:11:29,149
this is non compressed music so you can

00:11:26,929 --> 00:11:30,860
imagine it gets pretty big that's not

00:11:29,149 --> 00:11:33,170
part of the system yet we haven't had a

00:11:30,860 --> 00:11:35,779
need from the business to make that part

00:11:33,170 --> 00:11:37,249
of the platform we'll probably look at

00:11:35,779 --> 00:11:41,119
that but my guess is we won't look at

00:11:37,249 --> 00:11:42,410
that for a couple of years so Gina maybe

00:11:41,119 --> 00:11:43,939
you want to talk a little bit about how

00:11:42,410 --> 00:11:46,459
you went through selecting a back-end

00:11:43,939 --> 00:11:48,319
model for I know that you guys aren't

00:11:46,459 --> 00:11:50,389
completely done and it's not complete

00:11:48,319 --> 00:11:51,470
but maybe think about how do you how do

00:11:50,389 --> 00:11:53,720
you think of your back-end data

00:11:51,470 --> 00:11:56,869
structure model for a platform yeah so

00:11:53,720 --> 00:11:58,730
we actually looking at different classes

00:11:56,869 --> 00:12:00,499
of applications and in certain classes

00:11:58,730 --> 00:12:03,559
of applications the data is highly

00:12:00,499 --> 00:12:05,540
distributed like in the case of aviation

00:12:03,559 --> 00:12:08,869
one of the first problems that we had to

00:12:05,540 --> 00:12:11,990
solve was optimizing the performance of

00:12:08,869 --> 00:12:13,449
jet engines and predicting failures so

00:12:11,990 --> 00:12:15,499
the reason why that is important is that

00:12:13,449 --> 00:12:17,990
whenever there is a failure of a jet

00:12:15,499 --> 00:12:21,049
engine we get penalized by the airline

00:12:17,990 --> 00:12:22,790
of the airplane manufacturer and if you

00:12:21,049 --> 00:12:24,679
are able to predict that problem

00:12:22,790 --> 00:12:27,319
beforehand and we save a lot of money on

00:12:24,679 --> 00:12:29,119
that so the problem there is that each

00:12:27,319 --> 00:12:32,389
of these jet engines today they produce

00:12:29,119 --> 00:12:34,249
a lot of data there are about 150 to 200

00:12:32,389 --> 00:12:36,350
sensors on an average on an average jet

00:12:34,249 --> 00:12:38,600
engine and every flight generates about

00:12:36,350 --> 00:12:41,439
between half a terabyte to one terabyte

00:12:38,600 --> 00:12:44,480
of data and there is a GE jet aeroplane

00:12:41,439 --> 00:12:47,179
engine actually taking taking off every

00:12:44,480 --> 00:12:49,189
two seconds in the world somewhere so

00:12:47,179 --> 00:12:51,949
the data is highly distributed there is

00:12:49,189 --> 00:12:53,629
no way we can continuously aggregate and

00:12:51,949 --> 00:12:56,360
collect all the data in a central place

00:12:53,629 --> 00:12:57,829
and process it so for us there are

00:12:56,360 --> 00:13:00,079
different patterns that we have to now

00:12:57,829 --> 00:13:03,230
come up with like how can we move the

00:13:00,079 --> 00:13:04,549
processing closer to the actual data but

00:13:03,230 --> 00:13:06,649
at the same time this has to integrate

00:13:04,549 --> 00:13:09,560
with existing systems because just being

00:13:06,649 --> 00:13:11,690
able to predict the failure of a jeddak

00:13:09,560 --> 00:13:13,670
is not that valuable or not valuable

00:13:11,690 --> 00:13:15,260
enough we should be able to use that

00:13:13,670 --> 00:13:18,980
information to integrate with the

00:13:15,260 --> 00:13:20,930
airline operators other operational

00:13:18,980 --> 00:13:22,760
systems like say workflow management and

00:13:20,930 --> 00:13:24,230
figure out when is the best time to

00:13:22,760 --> 00:13:26,150
schedule the maintenance of an aircraft

00:13:24,230 --> 00:13:28,490
bring it down and have a substitute

00:13:26,150 --> 00:13:31,100
coming in and so on so this is just one

00:13:28,490 --> 00:13:33,740
example of one industry one application

00:13:31,100 --> 00:13:35,750
in one industry G has so many different

00:13:33,740 --> 00:13:37,670
other applications like in the pipeline

00:13:35,750 --> 00:13:39,560
industry actually we do collect data and

00:13:37,670 --> 00:13:41,930
centralize it so the patterns that we

00:13:39,560 --> 00:13:44,600
had to come up with for our applications

00:13:41,930 --> 00:13:46,279
actually tend to do a lot with the

00:13:44,600 --> 00:13:48,529
specifics of that industry and largely

00:13:46,279 --> 00:13:51,320
driven also significantly driven by the

00:13:48,529 --> 00:13:54,170
regulations in that industry so for us

00:13:51,320 --> 00:13:56,480
private clouds are probably the first

00:13:54,170 --> 00:13:59,300
use case public clouds would be

00:13:56,480 --> 00:14:00,860
obviously useful and they are going to

00:13:59,300 --> 00:14:02,870
be on the roadmap and they are on the

00:14:00,860 --> 00:14:04,910
roadmap but I think so for our customers

00:14:02,870 --> 00:14:06,980
the private clouds are the first things

00:14:04,910 --> 00:14:09,110
that we had to focus on but at the same

00:14:06,980 --> 00:14:11,420
time as as I talked about like we are

00:14:09,110 --> 00:14:12,830
looking at integrating different systems

00:14:11,420 --> 00:14:14,360
of the customers and so many of these

00:14:12,830 --> 00:14:17,380
systems are not just on their premises

00:14:14,360 --> 00:14:21,190
they are actually b2b systems so now

00:14:17,380 --> 00:14:23,540
figuring out patterns to kind of look at

00:14:21,190 --> 00:14:26,089
providing enterprise to enterprise

00:14:23,540 --> 00:14:28,550
connectivity the data of models can be

00:14:26,089 --> 00:14:31,760
different from different applications so

00:14:28,550 --> 00:14:33,500
we are looking at big data for cases

00:14:31,760 --> 00:14:35,330
where that is relevant and there is a

00:14:33,500 --> 00:14:36,800
significant portion of our application

00:14:35,330 --> 00:14:38,420
which is still transactional still

00:14:36,800 --> 00:14:40,640
relational and we have to be able to

00:14:38,420 --> 00:14:43,280
support all of that I would say roughly

00:14:40,640 --> 00:14:45,380
about 70% of our new applications are

00:14:43,280 --> 00:14:47,180
based on simplified data structures and

00:14:45,380 --> 00:14:48,380
data models which means we are using no

00:14:47,180 --> 00:14:50,510
sequel increasingly in those

00:14:48,380 --> 00:14:52,700
applications what thirty to thirty five

00:14:50,510 --> 00:14:54,320
percent are still relational and we have

00:14:52,700 --> 00:14:56,990
the support those we cannot ignore those

00:14:54,320 --> 00:14:59,120
types of models that essentially have

00:14:56,990 --> 00:15:00,290
some diversity there so Kathryn I

00:14:59,120 --> 00:15:03,020
believe you're building out internally

00:15:00,290 --> 00:15:05,930
an OpenStack and Dave you've used some

00:15:03,020 --> 00:15:07,279
hosted capacity and cheating if is it

00:15:05,930 --> 00:15:09,920
okay to say that you've used the Amazon

00:15:07,279 --> 00:15:11,390
and some yeah so we have OpenStack we

00:15:09,920 --> 00:15:15,080
have Amazon yeah

00:15:11,390 --> 00:15:16,940
but largely we have a first focusing on

00:15:15,080 --> 00:15:18,200
Amazon for the cloud part so maybe a

00:15:16,940 --> 00:15:19,640
question I would ask is how does cloud

00:15:18,200 --> 00:15:21,680
found his ability to run or almost any

00:15:19,640 --> 00:15:22,499
cloud that you want change how you think

00:15:21,680 --> 00:15:24,299
about capaz

00:15:22,499 --> 00:15:28,529
the planning data center planning and

00:15:24,299 --> 00:15:31,079
you know having access to resources you

00:15:28,529 --> 00:15:32,459
know I can say that we you know is one

00:15:31,079 --> 00:15:34,769
of the reasons that we went with Cloud

00:15:32,459 --> 00:15:37,379
Foundry was a driver for us we wanted to

00:15:34,769 --> 00:15:38,759
be infrastructure agnostic and we wanted

00:15:37,379 --> 00:15:40,109
to have the ability to spin up in

00:15:38,759 --> 00:15:42,119
multiple clouds we envision a future

00:15:40,109 --> 00:15:45,089
where there's you know hybrid cloud

00:15:42,119 --> 00:15:46,769
models that's the norm right and and we

00:15:45,089 --> 00:15:48,089
do need platform as-a-service to run in

00:15:46,769 --> 00:15:49,679
multiple we have multiple cloud so the

00:15:48,089 --> 00:15:51,899
cloud is not just one thing right it's

00:15:49,679 --> 00:15:53,339
different Network environments and you

00:15:51,899 --> 00:15:57,839
know to have that flexibility that was

00:15:53,339 --> 00:15:59,699
really important for us yeah that I can

00:15:57,839 --> 00:16:01,829
add to that actually for us Cloud

00:15:59,699 --> 00:16:03,599
Foundry was simple not just because of

00:16:01,829 --> 00:16:06,089
the models it enables but also because

00:16:03,599 --> 00:16:08,789
how easy it was for us to set up so as a

00:16:06,089 --> 00:16:10,499
data point when we started installing

00:16:08,789 --> 00:16:12,029
Cloud Foundry internally for internal

00:16:10,499 --> 00:16:14,189
use it just took like two or three days

00:16:12,029 --> 00:16:15,929
for us to get it completely set up our

00:16:14,189 --> 00:16:18,269
development team was already starting to

00:16:15,929 --> 00:16:20,009
use it initially we thought it might

00:16:18,269 --> 00:16:21,689
take a little while for like three or

00:16:20,009 --> 00:16:23,489
four weeks for the team to kind of get

00:16:21,689 --> 00:16:25,709
familiar with it it was just a matter of

00:16:23,489 --> 00:16:27,449
a week or so and the team was productive

00:16:25,709 --> 00:16:29,399
pretty much from like the second week

00:16:27,449 --> 00:16:31,559
onwards so that was amazing for us and

00:16:29,399 --> 00:16:34,109
to me that's truly agile because lot of

00:16:31,559 --> 00:16:36,119
the time we say agile you or use it as a

00:16:34,109 --> 00:16:37,349
gel as just an objective but agile is

00:16:36,119 --> 00:16:40,859
useless unless you have the agile

00:16:37,349 --> 00:16:44,399
outcome associated with it yeah and for

00:16:40,859 --> 00:16:46,399
us it was much more of a decision to not

00:16:44,399 --> 00:16:48,239
be not be tied to a single

00:16:46,399 --> 00:16:51,269
infrastructure or infrastructure

00:16:48,239 --> 00:16:54,599
provider we wanted the flexibility to

00:16:51,269 --> 00:16:56,759
based on our needs be able to move our

00:16:54,599 --> 00:16:59,549
applications or build new applications

00:16:56,759 --> 00:17:01,799
on different clouds based on what they

00:16:59,549 --> 00:17:03,839
were able to offer us but for us to not

00:17:01,799 --> 00:17:06,449
be permanently stuck in that cloud by

00:17:03,839 --> 00:17:09,179
tying ourselves to all of the resources

00:17:06,449 --> 00:17:11,789
in the way that our system was deployed

00:17:09,179 --> 00:17:14,869
and built all locked into that specific

00:17:11,789 --> 00:17:17,610
cloud so for us it was pretty obvious

00:17:14,869 --> 00:17:19,259
didn't have there weren't a lot of

00:17:17,610 --> 00:17:20,279
places especially when we started

00:17:19,259 --> 00:17:22,860
building it where you get that

00:17:20,279 --> 00:17:24,299
flexibility outside of Cloud Foundry but

00:17:22,860 --> 00:17:25,949
I mean one thing that you mentioned to

00:17:24,299 --> 00:17:27,269
me Dave is that more service providers

00:17:25,949 --> 00:17:30,010
could do a better job of fully

00:17:27,269 --> 00:17:32,650
supporting the Cloud Foundry CPI

00:17:30,010 --> 00:17:34,360
I know Amazon we works fairly well and

00:17:32,650 --> 00:17:35,650
you know I would just make this as a

00:17:34,360 --> 00:17:36,670
note to service providers out there Dave

00:17:35,650 --> 00:17:38,380
maybe you want to talk about not

00:17:36,670 --> 00:17:40,150
everyone supports full automation yet

00:17:38,380 --> 00:17:42,940
right well that's been one of our

00:17:40,150 --> 00:17:46,330
struggles in moving from v1 to v2 has

00:17:42,940 --> 00:17:50,500
been getting service providers to

00:17:46,330 --> 00:17:52,900
support the Bosch CPI and really we

00:17:50,500 --> 00:17:55,750
found only a few thus far that have full

00:17:52,900 --> 00:17:59,440
CPI support there many that are weeks

00:17:55,750 --> 00:18:01,330
away but it's been a struggle for us we

00:17:59,440 --> 00:18:04,330
need more service providers offering

00:18:01,330 --> 00:18:06,190
that CPI support so that we have more

00:18:04,330 --> 00:18:08,770
options because we have quite a few

00:18:06,190 --> 00:18:11,200
environments when you do continuous

00:18:08,770 --> 00:18:13,630
integration and deployment as Jonathan

00:18:11,200 --> 00:18:14,860
mentioned yesterday that means you have

00:18:13,630 --> 00:18:16,660
development environments you have

00:18:14,860 --> 00:18:19,720
staging environments you have testing

00:18:16,660 --> 00:18:21,970
environments you have production those

00:18:19,720 --> 00:18:23,920
don't all have to sit in one single

00:18:21,970 --> 00:18:25,720
instance of cloud foundry generally they

00:18:23,920 --> 00:18:29,350
don't and generally you're trying to do

00:18:25,720 --> 00:18:32,440
that as as efficiently as possible and

00:18:29,350 --> 00:18:34,600
so having more choices ends up being

00:18:32,440 --> 00:18:36,340
better at least for everyone that's

00:18:34,600 --> 00:18:39,280
using cloud foundry in a similar way to

00:18:36,340 --> 00:18:41,680
two-week yeah we I think it's it's it's

00:18:39,280 --> 00:18:43,810
part of the dark secretive cloud is that

00:18:41,680 --> 00:18:45,910
there's not every service provider out

00:18:43,810 --> 00:18:49,720
there actually has a robust API they can

00:18:45,910 --> 00:18:52,150
withstand a Bosch deploy and even some

00:18:49,720 --> 00:18:52,960
OpenStack environments not properly

00:18:52,150 --> 00:18:55,600
tuned

00:18:52,960 --> 00:18:57,490
today fall over when you know Bosch is

00:18:55,600 --> 00:18:58,780
at full flight and so that's something I

00:18:57,490 --> 00:19:00,310
just wanted to raise general awareness

00:18:58,780 --> 00:19:02,290
out there infrastructure service portal

00:19:00,310 --> 00:19:04,180
is that a very demanding user of your

00:19:02,290 --> 00:19:07,930
API called Cloud Foundry is coming and

00:19:04,180 --> 00:19:09,820
you should be ready for it so we want

00:19:07,930 --> 00:19:10,930
like API is at every layer because you

00:19:09,820 --> 00:19:12,700
know that's really where the value comes

00:19:10,930 --> 00:19:14,740
in terms of really being able to highly

00:19:12,700 --> 00:19:17,290
automate and the whole area around

00:19:14,740 --> 00:19:19,120
service orchestration is probably you

00:19:17,290 --> 00:19:20,230
know I hope that everyone in here is

00:19:19,120 --> 00:19:22,000
really thinking about service

00:19:20,230 --> 00:19:24,040
orchestration creating an automated

00:19:22,000 --> 00:19:28,360
catalog so that we can automate how we

00:19:24,040 --> 00:19:29,830
get to your services yeah so maybe one

00:19:28,360 --> 00:19:32,170
other one other topic I wanted to get

00:19:29,830 --> 00:19:35,350
hit a hit on quickly is programming

00:19:32,170 --> 00:19:37,360
models and runtime support so you know

00:19:35,350 --> 00:19:39,040
Cloud Foundry in one sense can allow you

00:19:37,360 --> 00:19:40,030
to do almost anything you want but at

00:19:39,040 --> 00:19:41,900
the same time when you're trying to

00:19:40,030 --> 00:19:43,760
build a software factory internally for

00:19:41,900 --> 00:19:45,380
internal cloud you might not want to

00:19:43,760 --> 00:19:46,580
support every everything under the Sun

00:19:45,380 --> 00:19:48,950
you guys want to speak a little bit

00:19:46,580 --> 00:19:51,920
about the how you enable a a polyglot

00:19:48,950 --> 00:19:54,500
access or if you're more opinionated at

00:19:51,920 --> 00:19:58,970
least from our perspective we are we're

00:19:54,500 --> 00:20:02,090
more opinionated we give we give it at

00:19:58,970 --> 00:20:04,460
different levels our developers a few

00:20:02,090 --> 00:20:06,470
choices but not every choice they can

00:20:04,460 --> 00:20:09,140
possibly think of and and what drives

00:20:06,470 --> 00:20:11,240
that is more of we decide collectively

00:20:09,140 --> 00:20:14,090
does it make sense to add a new language

00:20:11,240 --> 00:20:17,030
that that we're going to provide as a

00:20:14,090 --> 00:20:20,540
platform to all of the development teams

00:20:17,030 --> 00:20:24,230
so we have we have Java and Python and

00:20:20,540 --> 00:20:26,540
we also have rails and nodejs and and

00:20:24,230 --> 00:20:28,550
those were decisions that we made based

00:20:26,540 --> 00:20:31,340
on a justification of what we need this

00:20:28,550 --> 00:20:33,230
language to do this that the magic comes

00:20:31,340 --> 00:20:36,200
in maintainability you have to be able

00:20:33,230 --> 00:20:39,350
to have several people on your team or

00:20:36,200 --> 00:20:41,900
teams that can look at or understand or

00:20:39,350 --> 00:20:43,820
figure out what the code is doing and in

00:20:41,900 --> 00:20:45,500
some cases their time constraints to

00:20:43,820 --> 00:20:46,970
that because you have a bug to fix or

00:20:45,500 --> 00:20:49,040
you have something you need to maintain

00:20:46,970 --> 00:20:51,260
or you have a feature to add so if you

00:20:49,040 --> 00:20:54,290
have one guy that's your Python guy and

00:20:51,260 --> 00:20:57,020
he leaves if your if your team's not

00:20:54,290 --> 00:20:58,880
that large somebody one the team has to

00:20:57,020 --> 00:21:00,590
be able to go and unravel or understand

00:20:58,880 --> 00:21:04,640
it pretty quickly if you're gonna

00:21:00,590 --> 00:21:06,140
address address that problem sometimes

00:21:04,640 --> 00:21:09,740
people don't think about that you end up

00:21:06,140 --> 00:21:11,480
you end up and we almost did the Wild

00:21:09,740 --> 00:21:13,190
West where you everyone wanted to write

00:21:11,480 --> 00:21:15,620
in something different and you just

00:21:13,190 --> 00:21:19,700
can't maintain seventeen languages if

00:21:15,620 --> 00:21:21,230
you have a smaller team trying to to

00:21:19,700 --> 00:21:25,010
manage all of these different parts and

00:21:21,230 --> 00:21:26,960
pieces well I can say for us that we are

00:21:25,010 --> 00:21:28,490
definitely struggling with that because

00:21:26,960 --> 00:21:30,170
if our development teams can't pick what

00:21:28,490 --> 00:21:32,720
they want and you know they're looking

00:21:30,170 --> 00:21:34,160
for agility and you know trying to

00:21:32,720 --> 00:21:35,540
respond to new business models and

00:21:34,160 --> 00:21:38,240
trying to move as quickly as they can

00:21:35,540 --> 00:21:40,670
so for us it has really been a struggle

00:21:38,240 --> 00:21:42,110
- can we standardize and and what should

00:21:40,670 --> 00:21:44,480
we be enforcing there it's a big

00:21:42,110 --> 00:21:46,670
discussion right now for us right now I

00:21:44,480 --> 00:21:49,220
guess you know one thing we love the

00:21:46,670 --> 00:21:51,230
build packs right because you know this

00:21:49,220 --> 00:21:52,910
really gives us a whole nother you know

00:21:51,230 --> 00:21:53,159
tool in the tool belt to try to be able

00:21:52,910 --> 00:21:54,749
to

00:21:53,159 --> 00:21:56,460
respond to the needs that we have right

00:21:54,749 --> 00:21:58,019
now but you know we have this whole

00:21:56,460 --> 00:22:00,210
other program going on we're calling it

00:21:58,019 --> 00:22:02,759
end to end developer experience because

00:22:00,210 --> 00:22:03,929
we think that the custom applications

00:22:02,759 --> 00:22:06,059
are the things that are going to be more

00:22:03,929 --> 00:22:07,499
differentiating for the business and so

00:22:06,059 --> 00:22:09,330
they're going to you know we would like

00:22:07,499 --> 00:22:11,159
to see more of kind of the standardized

00:22:09,330 --> 00:22:12,869
things push to more of a SAS solution

00:22:11,159 --> 00:22:16,019
and us spending more things on the

00:22:12,869 --> 00:22:17,519
custom part of it and as we look at that

00:22:16,019 --> 00:22:18,869
end-to-end developer experience and how

00:22:17,519 --> 00:22:21,419
we pull all of this guidance together

00:22:18,869 --> 00:22:23,700
you know angel mentioned mobile apps

00:22:21,419 --> 00:22:26,820
that's a huge focus for us as well

00:22:23,700 --> 00:22:29,279
and then you know drivers around having

00:22:26,820 --> 00:22:30,899
services web services integrating

00:22:29,279 --> 00:22:32,039
security into your app these are things

00:22:30,899 --> 00:22:33,389
that we're talking about and we're

00:22:32,039 --> 00:22:34,979
trying to make it easier we're hitting

00:22:33,389 --> 00:22:36,779
our developers with all of this guidance

00:22:34,979 --> 00:22:38,369
from all these different angles and how

00:22:36,779 --> 00:22:40,499
do we tie that all together and make it

00:22:38,369 --> 00:22:43,739
more standardized and easy for them to

00:22:40,499 --> 00:22:45,119
consume all of that guidance so you know

00:22:43,739 --> 00:22:46,830
it is you know but I can tell you right

00:22:45,119 --> 00:22:49,499
now we're struggling with that all right

00:22:46,830 --> 00:22:51,419
are you building ap is that supports a

00:22:49,499 --> 00:22:53,399
mobile in addition to just like offering

00:22:51,419 --> 00:22:55,859
a generic pass layer which is a great

00:22:53,399 --> 00:22:58,590
start maybe good to hear from folks how

00:22:55,859 --> 00:23:00,389
house API augmentation and proprietary

00:22:58,590 --> 00:23:01,830
internal business API is go along with

00:23:00,389 --> 00:23:03,739
the platform I think that's that's

00:23:01,830 --> 00:23:05,970
something we'll see a lot of maybe

00:23:03,739 --> 00:23:09,570
that's something that we are doing

00:23:05,970 --> 00:23:12,629
actually we started looking at all the

00:23:09,570 --> 00:23:14,070
existing applications across G and also

00:23:12,629 --> 00:23:15,450
some of the newer ones that we are

00:23:14,070 --> 00:23:18,359
needed for the business models that we

00:23:15,450 --> 00:23:19,679
want to support and I think over a

00:23:18,359 --> 00:23:21,869
period of time we realize that it's

00:23:19,679 --> 00:23:24,690
futile to kind of try to fix every app

00:23:21,869 --> 00:23:26,220
that's legacy but at the same time it's

00:23:24,690 --> 00:23:28,019
also important for us to standardize on

00:23:26,220 --> 00:23:30,090
something at least for the future apps

00:23:28,019 --> 00:23:31,979
so we in fact started building our own

00:23:30,090 --> 00:23:33,359
platform and our own platform not in the

00:23:31,979 --> 00:23:35,399
same sense that we are not building our

00:23:33,359 --> 00:23:37,139
own Tomcat but we are actually building

00:23:35,399 --> 00:23:38,940
something much higher level which we are

00:23:37,139 --> 00:23:41,239
building something called predicts which

00:23:38,940 --> 00:23:44,220
is a platform for building predictive

00:23:41,239 --> 00:23:46,080
asset optimization applications so the

00:23:44,220 --> 00:23:49,229
API is that James was referring to for

00:23:46,080 --> 00:23:50,940
us essentially of referring to certain

00:23:49,229 --> 00:23:53,099
types of patterns that we see all across

00:23:50,940 --> 00:23:55,049
different industries how can we take

00:23:53,099 --> 00:23:56,789
different assets and in the sense when I

00:23:55,049 --> 00:23:59,460
say assets it's things like jet engines

00:23:56,789 --> 00:24:02,009
or turbines and stuff like that how can

00:23:59,460 --> 00:24:03,749
we take this these assets and optimize

00:24:02,009 --> 00:24:05,320
them further how can we integrate them

00:24:03,749 --> 00:24:07,360
with each other how can we look at

00:24:05,320 --> 00:24:08,890
in a combined way because you don't we

00:24:07,360 --> 00:24:10,300
cannot look at this just a turbine in

00:24:08,890 --> 00:24:11,830
isolation you have to look at its

00:24:10,300 --> 00:24:13,750
relationships with all the other assets

00:24:11,830 --> 00:24:16,930
in the ecosystem especially for large

00:24:13,750 --> 00:24:21,190
customers and building API is that allow

00:24:16,930 --> 00:24:24,370
us to regenerate data analyze the data

00:24:21,190 --> 00:24:27,730
produce results produce reports and in

00:24:24,370 --> 00:24:29,290
fact make it a child in the from an

00:24:27,730 --> 00:24:31,090
end-to-end perspective like how do you

00:24:29,290 --> 00:24:33,270
get from development all the way to

00:24:31,090 --> 00:24:36,760
production in the shortest possible time

00:24:33,270 --> 00:24:39,550
as well as the least amount of effort so

00:24:36,760 --> 00:24:42,880
for us actually there are two things

00:24:39,550 --> 00:24:45,220
that we want to be very careful about

00:24:42,880 --> 00:24:48,340
one is we want to make sure that the APS

00:24:45,220 --> 00:24:50,950
that we are building are not reinventing

00:24:48,340 --> 00:24:53,620
the wheel in that sense so leveraging

00:24:50,950 --> 00:24:55,570
existing best of the breed technologies

00:24:53,620 --> 00:24:58,750
like the spring framework from pivotal

00:24:55,570 --> 00:25:00,490
and even from the application server

00:24:58,750 --> 00:25:03,160
spaces we are actually looking at two or

00:25:00,490 --> 00:25:04,840
three options no more than that some of

00:25:03,160 --> 00:25:07,180
the things on the UI side we are also

00:25:04,840 --> 00:25:08,620
standardizing our libraries as well as

00:25:07,180 --> 00:25:10,720
the development frameworks like angular

00:25:08,620 --> 00:25:13,510
JS the Play Framework is something that

00:25:10,720 --> 00:25:16,420
we use as a standard toolkit there are

00:25:13,510 --> 00:25:18,280
certain businesses especially businesses

00:25:16,420 --> 00:25:20,590
like healthcare who have been

00:25:18,280 --> 00:25:22,300
traditionally more focused on dotnet

00:25:20,590 --> 00:25:25,260
technologies that's not going to go away

00:25:22,300 --> 00:25:27,550
so there is an awareness in our

00:25:25,260 --> 00:25:29,770
organization that we need to support and

00:25:27,550 --> 00:25:32,380
a heterogeneous environment where we do

00:25:29,770 --> 00:25:35,020
have cases where special needs are

00:25:32,380 --> 00:25:38,860
addressed and not just the people are

00:25:35,020 --> 00:25:40,000
not left on their own so it's great to

00:25:38,860 --> 00:25:41,290
hear you guys have all started with

00:25:40,000 --> 00:25:43,090
Cloud Foundry you've got it you've got

00:25:41,290 --> 00:25:44,140
it going what are some things the

00:25:43,090 --> 00:25:45,010
community could do better what are

00:25:44,140 --> 00:25:47,260
things that we could do better

00:25:45,010 --> 00:25:49,210
architectural II what should be keeping

00:25:47,260 --> 00:25:54,430
us up at night and decided to satisfy

00:25:49,210 --> 00:25:57,430
your needs so for us actually we do

00:25:54,430 --> 00:25:59,410
desire the the ability for Cloud Foundry

00:25:57,430 --> 00:26:01,330
to look across different kinds of

00:25:59,410 --> 00:26:04,720
operating environments and one of the

00:26:01,330 --> 00:26:07,120
first things that we came across was for

00:26:04,720 --> 00:26:11,620
especially Windows type of applications

00:26:07,120 --> 00:26:12,940
it's lacking today and there is a reason

00:26:11,620 --> 00:26:15,070
for why it is important for us because

00:26:12,940 --> 00:26:17,170
believe it or not G has its own database

00:26:15,070 --> 00:26:18,220
it's called historian is a time series

00:26:17,170 --> 00:26:19,870
database it's

00:26:18,220 --> 00:26:22,299
pretty successful product on its own and

00:26:19,870 --> 00:26:24,429
that runs only on Windows so now if you

00:26:22,299 --> 00:26:27,280
want to sell that to a customer and

00:26:24,429 --> 00:26:31,210
customers do have a need for that in

00:26:27,280 --> 00:26:33,090
that case we do need the support for as

00:26:31,210 --> 00:26:34,570
for Windows I mean especially

00:26:33,090 --> 00:26:36,940
environments where some of our

00:26:34,570 --> 00:26:38,350
application stacks are on Java but

00:26:36,940 --> 00:26:39,730
certain things are running on Windows

00:26:38,350 --> 00:26:41,770
which means we have to be able to

00:26:39,730 --> 00:26:44,080
orchestrate a complex set of things from

00:26:41,770 --> 00:26:45,490
a network from compute as well as from

00:26:44,080 --> 00:26:47,559
the operating system perspective where

00:26:45,490 --> 00:26:49,960
everything is not just one particular

00:26:47,559 --> 00:26:52,870
type of a thing so that's one important

00:26:49,960 --> 00:26:55,120
thing for us second thing is being able

00:26:52,870 --> 00:26:57,419
to support different kinds of underlying

00:26:55,120 --> 00:26:59,320
stats so obviously OpenStack

00:26:57,419 --> 00:27:01,720
infrastructure service tax I'm talking

00:26:59,320 --> 00:27:03,429
about OpenStack is already supported but

00:27:01,720 --> 00:27:05,470
as here is something that is also very

00:27:03,429 --> 00:27:08,679
commonly used especially in the

00:27:05,470 --> 00:27:09,760
healthcare business so if that can be

00:27:08,679 --> 00:27:11,200
supported it'll be create and I

00:27:09,760 --> 00:27:12,880
understand that it's actually going to

00:27:11,200 --> 00:27:15,730
be a collaboration between the IAS

00:27:12,880 --> 00:27:17,169
providers as well as actually I was on

00:27:15,730 --> 00:27:18,580
the phone with Patrick Chan azan who

00:27:17,169 --> 00:27:19,809
used to work on Cloud Foundry who's now

00:27:18,580 --> 00:27:21,460
at Azure and I

00:27:19,809 --> 00:27:22,690
I asked Microsoft very nicely to

00:27:21,460 --> 00:27:26,080
participate in the open-source community

00:27:22,690 --> 00:27:27,549
and to help support our I as a CPI layer

00:27:26,080 --> 00:27:29,049
so does anyone have any great

00:27:27,549 --> 00:27:34,450
connections with Microsoft where we can

00:27:29,049 --> 00:27:35,980
kick off Chris is serious I mean I I

00:27:34,450 --> 00:27:38,590
take it very seriously of trying to get

00:27:35,980 --> 00:27:39,880
people involved so it said this actually

00:27:38,590 --> 00:27:42,700
pretty good queue up Jarrod you're gonna

00:27:39,880 --> 00:27:44,500
give a talk Jared from tier 3 is gonna

00:27:42,700 --> 00:27:47,110
give a talk of you know what he's doing

00:27:44,500 --> 00:27:49,870
over the next six months to make Cloud

00:27:47,110 --> 00:27:51,070
Foundry in Windows first-class to make

00:27:49,870 --> 00:27:52,360
this support first grass that's been

00:27:51,070 --> 00:27:53,530
there for a while with iron foundry but

00:27:52,360 --> 00:27:55,270
we're gonna be incorporating it more and

00:27:53,530 --> 00:28:02,080
more into the mainline so I think you'll

00:27:55,270 --> 00:28:03,730
get some help there this is a Jawad from

00:28:02,080 --> 00:28:06,120
our crew which is the other dotnet

00:28:03,730 --> 00:28:06,120
company

00:28:09,110 --> 00:28:15,389
okay there's a little tension on a.net

00:28:11,369 --> 00:28:17,129
and community so there's been two

00:28:15,389 --> 00:28:18,450
providers and I think the important

00:28:17,129 --> 00:28:20,490
thing is we're gonna get it all into the

00:28:18,450 --> 00:28:21,659
open source mainline and we can all work

00:28:20,490 --> 00:28:26,100
it on as a community from there I'm

00:28:21,659 --> 00:28:27,240
looking forward to that stuff this is

00:28:26,100 --> 00:28:29,970
why we ask these questions on stage

00:28:27,240 --> 00:28:33,600
right on the record catherine any any

00:28:29,970 --> 00:28:39,299
feedback well one of my biggest issues

00:28:33,600 --> 00:28:40,980
right now is end-to-end identity for you

00:28:39,299 --> 00:28:43,019
know we have this big program called

00:28:40,980 --> 00:28:44,730
five star apps and you know our CIO

00:28:43,019 --> 00:28:45,990
talks about this very publicly and

00:28:44,730 --> 00:28:47,490
basically we're trying to take all of

00:28:45,990 --> 00:28:48,749
our enterprise applications and make

00:28:47,490 --> 00:28:51,330
sure that they run across a whole

00:28:48,749 --> 00:28:54,509
variety of browsers across operating

00:28:51,330 --> 00:28:56,519
systems and across devices and and the

00:28:54,509 --> 00:28:58,860
the security challenge that that

00:28:56,519 --> 00:29:01,470
presents is is really interesting

00:28:58,860 --> 00:29:03,269
because a lot of those devices are BYO

00:29:01,470 --> 00:29:04,679
so they're not even Enterprise devices

00:29:03,269 --> 00:29:06,210
and to be able to federate with

00:29:04,679 --> 00:29:08,639
enterprise identity and really make it

00:29:06,210 --> 00:29:10,259
work end to end and be and a lot of

00:29:08,639 --> 00:29:12,059
these applications and by the way I want

00:29:10,259 --> 00:29:16,169
all of these applications to land on top

00:29:12,059 --> 00:29:17,700
of path right but the the back end is

00:29:16,169 --> 00:29:19,889
going to be systems that are existing

00:29:17,700 --> 00:29:22,019
and they're going to be landed in the

00:29:19,889 --> 00:29:24,809
internal environment and so we want to

00:29:22,019 --> 00:29:27,389
expose that through a services gateway

00:29:24,809 --> 00:29:29,220
and make that consumable by the apps

00:29:27,389 --> 00:29:30,779
that are on pads which will land on a

00:29:29,220 --> 00:29:35,490
network segment that sits outside of

00:29:30,779 --> 00:29:38,100
Intel either on the DMZ or even you know

00:29:35,490 --> 00:29:39,720
what we call our exclave environment and

00:29:38,100 --> 00:29:41,639
so when you think about the security

00:29:39,720 --> 00:29:43,230
challenge of end-to-end through all of

00:29:41,639 --> 00:29:45,269
those devices and being able to

00:29:43,230 --> 00:29:49,049
authenticate that's um a big challenge

00:29:45,269 --> 00:29:53,249
for us right now so I think generally

00:29:49,049 --> 00:29:55,440
it's more of now that cloud foundries

00:29:53,249 --> 00:29:59,129
moving closer and closer to being

00:29:55,440 --> 00:30:00,990
something that not only providers would

00:29:59,129 --> 00:30:03,269
would want to run but more of something

00:30:00,990 --> 00:30:06,090
that enterprises really want to run

00:30:03,269 --> 00:30:09,330
there are a lot of enterprise e features

00:30:06,090 --> 00:30:11,789
that could go in to to what Cloud

00:30:09,330 --> 00:30:15,539
Foundry is I think moving more of an eye

00:30:11,789 --> 00:30:19,889
to focus on what would enterprises need

00:30:15,539 --> 00:30:20,519
which there's a very long list of once

00:30:19,889 --> 00:30:22,440
in

00:30:20,519 --> 00:30:24,679
means a nice-to-have sport for the

00:30:22,440 --> 00:30:27,749
enterprise that could be anything from

00:30:24,679 --> 00:30:30,979
from something like identity like you

00:30:27,749 --> 00:30:33,989
were mentioning there's auditing there's

00:30:30,979 --> 00:30:36,659
integration with other systems there's

00:30:33,989 --> 00:30:40,499
logging there's migration capability

00:30:36,659 --> 00:30:43,529
that the list is pretty big of what an

00:30:40,499 --> 00:30:45,599
enterprise needs to be able to to really

00:30:43,529 --> 00:30:49,049
drop Cloud Foundry in and take full

00:30:45,599 --> 00:30:50,369
advantage of it got it got it all right

00:30:49,049 --> 00:30:52,109
well hey this was really interesting

00:30:50,369 --> 00:30:53,879
conversation and I didn't want to go to

00:30:52,109 --> 00:30:55,409
too deep or have you real reveal too

00:30:53,879 --> 00:30:56,909
many architectural secrets of what you

00:30:55,409 --> 00:30:58,289
guys are up to but I just wanted to give

00:30:56,909 --> 00:30:59,969
people a little bit of a flavour what's

00:30:58,289 --> 00:31:01,739
it like to build a path internally and

00:30:59,969 --> 00:31:03,570
to get businesses using it so congrats

00:31:01,739 --> 00:31:04,889
on your progress so far and hopefully

00:31:03,570 --> 00:31:07,159
we'll see you guys back in six months

00:31:04,889 --> 00:31:10,609
get a progress update and see we can do

00:31:07,159 --> 00:31:10,609
yeah yeah thanks

00:31:15,710 --> 00:31:23,210

YouTube URL: https://www.youtube.com/watch?v=410t0wGKbPs


