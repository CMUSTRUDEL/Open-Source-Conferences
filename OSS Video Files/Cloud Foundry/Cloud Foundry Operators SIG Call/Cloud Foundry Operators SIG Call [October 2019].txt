Title: Cloud Foundry Operators SIG Call [October 2019]
Publication date: 2019-11-05
Playlist: Cloud Foundry Operators SIG Call
Description: 
	
Captions: 
	00:00:01,159 --> 00:00:08,250
yeah hello everyone

00:00:03,859 --> 00:00:10,349
discotek I'm from is AP I'm part of

00:00:08,250 --> 00:00:15,599
landscape of patience and monitoring

00:00:10,349 --> 00:00:19,529
team so we have one topic today to

00:00:15,599 --> 00:00:21,960
discuss about reusing experimental

00:00:19,529 --> 00:00:26,580
features of safe deployment which is

00:00:21,960 --> 00:00:32,009
from psyched and his p.m. of release

00:00:26,580 --> 00:00:34,350
integration gene so what you saw just

00:00:32,009 --> 00:00:36,600
before that just one thing here so this

00:00:34,350 --> 00:00:39,629
call will be recorded and it will be

00:00:36,600 --> 00:00:42,540
uploaded to YouTube cloud phone this

00:00:39,629 --> 00:00:44,879
official channel so please be aware of

00:00:42,540 --> 00:00:46,800
that in case if I sharing some internal

00:00:44,879 --> 00:00:51,780
information I just want to let you know

00:00:46,800 --> 00:00:52,739
that it will be available publicly over

00:00:51,780 --> 00:00:55,289
to you son

00:00:52,739 --> 00:00:57,960
cool thank you Karthik and thanks for

00:00:55,289 --> 00:01:00,570
having me here as Karthik mentioned just

00:00:57,960 --> 00:01:02,969
cook intro I'm sorry I live in San

00:01:00,570 --> 00:01:05,129
Francisco I work for pivotal and I

00:01:02,969 --> 00:01:07,290
manage one of the products I manage a

00:01:05,129 --> 00:01:10,350
sea of deployment part of release

00:01:07,290 --> 00:01:13,290
integration program so I think Karthik

00:01:10,350 --> 00:01:17,820
mentioned I actually wanted to pull the

00:01:13,290 --> 00:01:21,270
room who's actually using experimental

00:01:17,820 --> 00:01:23,130
features in your production today so

00:01:21,270 --> 00:01:25,860
what I main experimental features it's

00:01:23,130 --> 00:01:29,670
the UNCF deployment there is a folder

00:01:25,860 --> 00:01:32,970
called operations slash experimental and

00:01:29,670 --> 00:01:34,380
these are the features that are

00:01:32,970 --> 00:01:37,170
considered experimental or not

00:01:34,380 --> 00:01:39,390
production but I'm curious to hear if

00:01:37,170 --> 00:01:41,100
any of the operators are using them and

00:01:39,390 --> 00:01:48,659
if you're using them what is the flavor

00:01:41,100 --> 00:01:51,930
of that so I'll go I saw a Toby brown

00:01:48,659 --> 00:01:53,570
anyone at Stansted Stefan anyone can

00:01:51,930 --> 00:01:59,610
jump in any time

00:01:53,570 --> 00:02:02,060
okay hi Stefan maybe some sorts from our

00:01:59,610 --> 00:02:05,490
side so usually we do not use

00:02:02,060 --> 00:02:09,350
experimental feature us because when we

00:02:05,490 --> 00:02:11,150
let's say taxi of the deployment and you

00:02:09,350 --> 00:02:13,640
we usually do that with the intention to

00:02:11,150 --> 00:02:15,550
ship it to our life systems and here we

00:02:13,640 --> 00:02:20,540
have the clear policy not to ship any

00:02:15,550 --> 00:02:23,720
non GA features so that's why we usually

00:02:20,540 --> 00:02:25,310
don't take those files if I remember

00:02:23,720 --> 00:02:27,470
correctly there might be situations

00:02:25,310 --> 00:02:31,550
where we used some of the experimental

00:02:27,470 --> 00:02:34,300
ops on dev landscapes just to evaluate a

00:02:31,550 --> 00:02:38,120
upcoming feature so that we are prepared

00:02:34,300 --> 00:02:39,710
because that will go live or GA sooner

00:02:38,120 --> 00:02:41,240
or later just to get a little bit

00:02:39,710 --> 00:02:45,200
experience with that and then see what's

00:02:41,240 --> 00:02:50,510
coming up in the future but normally if

00:02:45,200 --> 00:02:53,570
we do not use yeah those features may be

00:02:50,510 --> 00:02:56,120
to watch death onset mature sorry if

00:02:53,570 --> 00:02:58,280
you're let's say also looking for that

00:02:56,120 --> 00:03:00,380
type of feedback but we even like

00:02:58,280 --> 00:03:02,690
consciously disable certain

00:03:00,380 --> 00:03:05,510
functionality which is g8 but which

00:03:02,690 --> 00:03:07,760
we've kind of decided based on certain

00:03:05,510 --> 00:03:09,560
criteria to not make available in our

00:03:07,760 --> 00:03:11,480
life landscapes like for example

00:03:09,560 --> 00:03:14,150
container to container networking was

00:03:11,480 --> 00:03:16,040
was one of these where in scale testing

00:03:14,150 --> 00:03:19,250
we actually found out that we could not

00:03:16,040 --> 00:03:21,680
roll it out to - all - to our biggest

00:03:19,250 --> 00:03:25,459
landscapes because it would not scale -

00:03:21,680 --> 00:03:30,140
to the sizes there that's that's good to

00:03:25,459 --> 00:03:33,080
know and then I guess we've we've even

00:03:30,140 --> 00:03:36,290
run in situations where like we decided

00:03:33,080 --> 00:03:38,720
to disable something and then my CF

00:03:36,290 --> 00:03:41,090
deployment update we were kind of forced

00:03:38,720 --> 00:03:42,890
to enable stuff and try and see if you

00:03:41,090 --> 00:03:44,959
can still kind of hide it from from our

00:03:42,890 --> 00:03:46,820
end users not not sure Stefan do you

00:03:44,959 --> 00:03:48,709
have the concrete example one example

00:03:46,820 --> 00:03:51,500
that we are currently let's say fighting

00:03:48,709 --> 00:03:54,830
with is route integrity so I think it's

00:03:51,500 --> 00:03:56,959
now standard in CF deployment and here

00:03:54,830 --> 00:03:58,970
we had switched it off in the past

00:03:56,959 --> 00:04:00,740
yeah not use the experimental

00:03:58,970 --> 00:04:02,990
observation no as it is merged in we

00:04:00,740 --> 00:04:06,709
have written some additional ops files

00:04:02,990 --> 00:04:08,090
to revert those changes here it's not so

00:04:06,709 --> 00:04:10,520
much that we don't like the feature but

00:04:08,090 --> 00:04:12,920
it's more that we had also issues in the

00:04:10,520 --> 00:04:14,810
scale landscapes and so I think there

00:04:12,920 --> 00:04:16,880
were some some doubts about whether they

00:04:14,810 --> 00:04:20,989
are memory leaks and some just spending

00:04:16,880 --> 00:04:22,880
and we also observed I think a higher C

00:04:20,989 --> 00:04:24,920
of push failure rate do you

00:04:22,880 --> 00:04:27,830
updates and that something we wanted to

00:04:24,920 --> 00:04:30,020
investigate first and understand that it

00:04:27,830 --> 00:04:32,660
was not doing updates but during CA

00:04:30,020 --> 00:04:35,030
rotation right that's a test we run

00:04:32,660 --> 00:04:39,080
usually because we had years some issues

00:04:35,030 --> 00:04:41,020
in the past and that's why we run a see

00:04:39,080 --> 00:04:43,280
a rotation tests that involves a lot of

00:04:41,020 --> 00:04:45,680
redeployments and we don't have it

00:04:43,280 --> 00:04:48,220
completely error-free but we observe a

00:04:45,680 --> 00:04:51,320
certain number of errors and have said

00:04:48,220 --> 00:04:55,910
number of arises certain thresholds and

00:04:51,320 --> 00:04:57,440
we say let's let's check deeper and so

00:04:55,910 --> 00:04:59,150
we put it on the backlog but we didn't

00:04:57,440 --> 00:05:02,570
find the time yet to do look into that

00:04:59,150 --> 00:05:04,940
so eventually we will enable how to

00:05:02,570 --> 00:05:08,000
integrity but at the moment we did some

00:05:04,940 --> 00:05:11,390
extra efforts to let's say switch it off

00:05:08,000 --> 00:05:16,010
so we took the old experimental ops file

00:05:11,390 --> 00:05:20,870
I guess inverse it and applied it

00:05:16,010 --> 00:05:25,160
something like that cool that's good to

00:05:20,870 --> 00:05:31,010
know so well the reason I'm pulling that

00:05:25,160 --> 00:05:32,540
is because before I go into that

00:05:31,010 --> 00:05:34,580
statement now I guess another question I

00:05:32,540 --> 00:05:37,160
have is are there any certain

00:05:34,580 --> 00:05:40,250
expectations with experimental that

00:05:37,160 --> 00:05:44,270
needs to be true for you to actually say

00:05:40,250 --> 00:05:47,600
use it maybe in production or that's

00:05:44,270 --> 00:05:49,190
like the fact that's an experimental you

00:05:47,600 --> 00:05:52,090
would never want to use in production no

00:05:49,190 --> 00:05:54,770
matter what what are the what are the

00:05:52,090 --> 00:05:57,050
decision-making criteria you have when

00:05:54,770 --> 00:05:59,540
it comes to those sort of things I mean

00:05:57,050 --> 00:06:02,420
what else because decision criteria is

00:05:59,540 --> 00:06:05,090
if we ship it to production it means we

00:06:02,420 --> 00:06:06,920
have to have support for that so opening

00:06:05,090 --> 00:06:08,900
box et cetera must be a valid thing and

00:06:06,920 --> 00:06:10,940
there must be a a high chance to get it

00:06:08,900 --> 00:06:14,240
fixed because if we roll it out and say

00:06:10,940 --> 00:06:16,550
that's in feature that we have in our

00:06:14,240 --> 00:06:18,620
production landscapes and customers of

00:06:16,550 --> 00:06:20,690
our landscapes expect that it's working

00:06:18,620 --> 00:06:25,220
and for experimental features where

00:06:20,690 --> 00:06:27,080
that's not the case or not necessarily

00:06:25,220 --> 00:06:28,940
the case and maybe it gets withdrawn

00:06:27,080 --> 00:06:31,700
because they experimented and work well

00:06:28,940 --> 00:06:33,530
so then withdrawing a feature from a

00:06:31,700 --> 00:06:35,600
productive landscape usually

00:06:33,530 --> 00:06:39,110
leads to a lot of crying that's why we

00:06:35,600 --> 00:06:40,700
don't do that we have an internal

00:06:39,110 --> 00:06:42,710
landscape which is actually the biggest

00:06:40,700 --> 00:06:44,330
one the cannery landscapes at something

00:06:42,710 --> 00:06:45,920
where we could if something is really

00:06:44,330 --> 00:06:49,150
interesting and we really want to try it

00:06:45,920 --> 00:06:52,670
out under let's say new production

00:06:49,150 --> 00:06:54,620
environments and we would have with some

00:06:52,670 --> 00:06:55,880
some extra effort let's say we

00:06:54,620 --> 00:06:57,890
introduced a feature of like an hour

00:06:55,880 --> 00:06:59,870
configuration to enable this

00:06:57,890 --> 00:07:02,720
experimental of style and then we could

00:06:59,870 --> 00:07:05,270
say we enable it in our cannery

00:07:02,720 --> 00:07:07,430
landscape but don't ship it to Z let's

00:07:05,270 --> 00:07:09,110
say real customer-facing landscapes this

00:07:07,430 --> 00:07:13,340
internal cannery landscapes we call it

00:07:09,110 --> 00:07:14,840
like this it is from we have to consider

00:07:13,340 --> 00:07:16,210
it as a productive landscaped course

00:07:14,840 --> 00:07:19,610
it's a landscape

00:07:16,210 --> 00:07:21,169
where all the other s AP teams are

00:07:19,610 --> 00:07:23,419
actually developing on it

00:07:21,169 --> 00:07:29,990
that one goes down or has a severe

00:07:23,419 --> 00:07:31,280
problem we get a lot of it just so I

00:07:29,990 --> 00:07:33,620
understand what is it canary

00:07:31,280 --> 00:07:38,030
I know Canaries in Co deployment is it a

00:07:33,620 --> 00:07:42,080
canary environment as in you knew is

00:07:38,030 --> 00:07:43,220
that okay so we have here we first test

00:07:42,080 --> 00:07:45,290
something in Devlin's capes that's

00:07:43,220 --> 00:07:47,540
completely deaf internal then we have a

00:07:45,290 --> 00:07:49,280
staging environment where we qualify

00:07:47,540 --> 00:07:51,710
something and take a release decision

00:07:49,280 --> 00:07:54,050
and then we hold it out on this internal

00:07:51,710 --> 00:07:56,270
we call it canary landscape one week

00:07:54,050 --> 00:07:57,979
before we update the life landscapes but

00:07:56,270 --> 00:08:00,080
at that point in time we already assume

00:07:57,979 --> 00:08:02,210
everything is working and it's a

00:08:00,080 --> 00:08:05,650
landscape where let's say we check that

00:08:02,210 --> 00:08:10,040
the update also survives under load

00:08:05,650 --> 00:08:11,720
where where all our internal consumers

00:08:10,040 --> 00:08:14,210
are doing their development work so

00:08:11,720 --> 00:08:16,940
everybody riding Cloud Foundry ups is

00:08:14,210 --> 00:08:18,979
usually using that landscape to which

00:08:16,940 --> 00:08:21,350
one is run development processes yeah

00:08:18,979 --> 00:08:24,440
exactly so how is that different than

00:08:21,350 --> 00:08:27,410
staging just curious and it's staging is

00:08:24,440 --> 00:08:30,470
a very small landscape and we just use

00:08:27,410 --> 00:08:32,120
it to run tests so a test cycle but it

00:08:30,470 --> 00:08:34,310
has no production loaders nobody is

00:08:32,120 --> 00:08:36,620
developed nearly nobody is developing on

00:08:34,310 --> 00:08:40,580
this landscape while the cannery

00:08:36,620 --> 00:08:42,650
landscape is from other sa P teams it's

00:08:40,580 --> 00:08:46,950
a productive landscape it has to be up

00:08:42,650 --> 00:08:49,740
24/7 and we have let's say ops pros

00:08:46,950 --> 00:08:51,720
seized and bug tracking and monitoring

00:08:49,740 --> 00:08:54,480
in place so it's very close to

00:08:51,720 --> 00:08:57,300
production clone I guess yeah very close

00:08:54,480 --> 00:08:59,310
so awesome thank you instant container

00:08:57,300 --> 00:09:02,340
networking we have enabled as a beta

00:08:59,310 --> 00:09:04,470
feature on the canary landscape but we

00:09:02,340 --> 00:09:06,450
haven't hold it out to life it was just

00:09:04,470 --> 00:09:09,840
that some people can get some experience

00:09:06,450 --> 00:09:11,070
and we also see if the feature works but

00:09:09,840 --> 00:09:12,990
there's no real load will contain our

00:09:11,070 --> 00:09:16,560
networking because you have to apply for

00:09:12,990 --> 00:09:18,650
it and then we enable the FC developers

00:09:16,560 --> 00:09:22,230
the Scopes to create policies and

00:09:18,650 --> 00:09:23,940
otherwise it's switched off I was just

00:09:22,230 --> 00:09:26,910
about to say what would played in favor

00:09:23,940 --> 00:09:29,160
of kind of even doing a beta for that

00:09:26,910 --> 00:09:31,410
feature was that you can selectively

00:09:29,160 --> 00:09:33,540
enable it for a subset of your users

00:09:31,410 --> 00:09:36,420
mm-hmm otherwise I guess we wouldn't

00:09:33,540 --> 00:09:38,940
even have gone for doing a date are

00:09:36,420 --> 00:09:40,560
there because like if you make it

00:09:38,940 --> 00:09:42,540
available and there's still people that

00:09:40,560 --> 00:09:45,150
come back to us saying but look here in

00:09:42,540 --> 00:09:47,580
public cloud foundry documentation I see

00:09:45,150 --> 00:09:50,160
that internal domain why can't I use it

00:09:47,580 --> 00:09:52,200
but if you just give it out and don't

00:09:50,160 --> 00:09:53,640
tell anybody and the experiences people

00:09:52,200 --> 00:09:55,470
will use it in their productive

00:09:53,640 --> 00:09:58,140
applications or escalate if they don't

00:09:55,470 --> 00:10:00,540
find that feature being enabled in in

00:09:58,140 --> 00:10:02,250
school yeah I think I totally understand

00:10:00,540 --> 00:10:04,410
that part of it I think you want to be

00:10:02,250 --> 00:10:07,680
have a clear boundaries to make sure

00:10:04,410 --> 00:10:12,440
people know how to use features awesome

00:10:07,680 --> 00:10:15,270
I think anyone else using outside of

00:10:12,440 --> 00:10:18,870
Stefan and anyone else using

00:10:15,270 --> 00:10:22,320
experimental features on this call seven

00:10:18,870 --> 00:10:24,750
people yeah so I can I can jump in and

00:10:22,320 --> 00:10:27,870
provide a bit of context um I'm Toby I'm

00:10:24,750 --> 00:10:30,180
from comfo ek powers we run our foundry

00:10:27,870 --> 00:10:34,580
on behalf of some govern the province

00:10:30,180 --> 00:10:37,440
the UK government and we do use some

00:10:34,580 --> 00:10:40,800
experimental bob's files or have in the

00:10:37,440 --> 00:10:44,430
past and by the introduction or in user

00:10:40,800 --> 00:10:45,780
testing um while in the cases in the

00:10:44,430 --> 00:10:51,240
past where we've looked at the

00:10:45,780 --> 00:10:54,690
experimental observing to look at how

00:10:51,240 --> 00:10:56,340
far along the road map or how like if

00:10:54,690 --> 00:10:58,620
they're in experimental but what kind of

00:10:56,340 --> 00:10:59,660
experimental they are so for instance

00:10:58,620 --> 00:11:03,010
the reason

00:10:59,660 --> 00:11:05,020
syslog ops files or in experimental

00:11:03,010 --> 00:11:07,940
syslog for that ops holes are in

00:11:05,020 --> 00:11:09,500
experimental but it's a feature that's

00:11:07,940 --> 00:11:15,230
going to go into mainline so it's worth

00:11:09,500 --> 00:11:19,010
us testing out is a good example of one

00:11:15,230 --> 00:11:22,430
and we would look at in this fashion

00:11:19,010 --> 00:11:24,590
again Intel networking was one that we

00:11:22,430 --> 00:11:28,700
adopted a bit earlier than was

00:11:24,590 --> 00:11:30,110
introduced fully the third example I

00:11:28,700 --> 00:11:32,270
think is metrics tool

00:11:30,110 --> 00:11:33,650
we haven't enabled it fully in

00:11:32,270 --> 00:11:38,150
production but what we did do is we

00:11:33,650 --> 00:11:40,820
spend and twelve weeks also last quarter

00:11:38,150 --> 00:11:43,190
and doing user testing on the kind of

00:11:40,820 --> 00:11:45,860
metrics that it gave us and whether our

00:11:43,190 --> 00:11:48,800
users would be interested in those

00:11:45,860 --> 00:11:51,080
application metrics when you see users

00:11:48,800 --> 00:11:55,160
just so is a Dilla purse or actual

00:11:51,080 --> 00:11:59,750
clients we use your applications and yes

00:11:55,160 --> 00:12:02,870
so when I say users I mean developers

00:11:59,750 --> 00:12:07,970
developing applications and services

00:12:02,870 --> 00:12:09,260
that run on our platform rather than got

00:12:07,970 --> 00:12:11,180
it

00:12:09,260 --> 00:12:12,950
testing on the user's awesome that's

00:12:11,180 --> 00:12:16,310
that's good to know

00:12:12,950 --> 00:12:18,920
so I guess are there any certain

00:12:16,310 --> 00:12:21,170
expectations like you wish they were or

00:12:18,920 --> 00:12:24,470
or anything that you wish were true with

00:12:21,170 --> 00:12:26,090
experimental features in general well

00:12:24,470 --> 00:12:28,370
when you go through this process of

00:12:26,090 --> 00:12:31,550
investigating this isn't making the

00:12:28,370 --> 00:12:34,550
decisions whether you want to jump on

00:12:31,550 --> 00:12:37,040
the bandwagon right now till it becomes

00:12:34,550 --> 00:12:39,380
before it becomes GA or wait till you

00:12:37,040 --> 00:12:41,150
know it become a CA like what what would

00:12:39,380 --> 00:12:47,000
you felt like what would you feel like

00:12:41,150 --> 00:12:48,530
needs to be true yeah right now

00:12:47,000 --> 00:12:50,480
experimental does feel like a bit of a

00:12:48,530 --> 00:12:54,470
grab bag it's like the thing is you can

00:12:50,480 --> 00:12:56,630
do things we will do in the future and

00:12:54,470 --> 00:12:59,600
things you probably shouldn't do but

00:12:56,630 --> 00:13:01,250
we're playing here anyway and having

00:12:59,600 --> 00:13:02,860
additional clarification around which

00:13:01,250 --> 00:13:06,170
one of those is would be really helpful

00:13:02,860 --> 00:13:07,550
and would probably as people have

00:13:06,170 --> 00:13:08,990
already said increase the adoption of

00:13:07,550 --> 00:13:09,860
some of the things which are currently

00:13:08,990 --> 00:13:13,430
monitors expect

00:13:09,860 --> 00:13:17,620
and we try and keep this close to the

00:13:13,430 --> 00:13:19,820
tip of CF deployment as possible and

00:13:17,620 --> 00:13:23,649
also add some of the experimental

00:13:19,820 --> 00:13:27,620
features but you know if they were like

00:13:23,649 --> 00:13:30,769
edge but not experimental then we might

00:13:27,620 --> 00:13:32,899
be a little bit more interested in

00:13:30,769 --> 00:13:35,149
looking at those features looking at

00:13:32,899 --> 00:13:39,800
those operation can when you leave me an

00:13:35,149 --> 00:13:44,810
edge what does that mean yeah I guess

00:13:39,800 --> 00:13:46,640
the distinction between like when you're

00:13:44,810 --> 00:13:49,160
looking at a Linux tissue vision right

00:13:46,640 --> 00:13:51,140
you'll have like a just stable which is

00:13:49,160 --> 00:13:54,500
what I kind of used after point as I

00:13:51,140 --> 00:13:57,380
think if you're one if you're one point

00:13:54,500 --> 00:13:58,640
behind safe deployment or two points

00:13:57,380 --> 00:14:01,190
behind centers whether you're probably

00:13:58,640 --> 00:14:03,529
stable make sure a tip you're kind of

00:14:01,190 --> 00:14:06,019
like liking the latest version you'll

00:14:03,529 --> 00:14:10,610
run into issues probably but mostly be

00:14:06,019 --> 00:14:14,170
fine and then if you're running ten plus

00:14:10,610 --> 00:14:16,480
some obstacles then you're you're like I

00:14:14,170 --> 00:14:24,020
guess I would say that's a jewel like

00:14:16,480 --> 00:14:27,700
dev release interesting I think that the

00:14:24,020 --> 00:14:32,750
the admit a good point around clarity on

00:14:27,700 --> 00:14:36,620
which are which experimental features

00:14:32,750 --> 00:14:39,320
are planning to go GA versus which don't

00:14:36,620 --> 00:14:43,279
I think we have heard that feedback in

00:14:39,320 --> 00:14:45,500
the past so which allows not only for

00:14:43,279 --> 00:14:49,399
external teams of internal teams to test

00:14:45,500 --> 00:14:51,649
those features to harden them that

00:14:49,399 --> 00:14:54,079
security or that's load with a scale and

00:14:51,649 --> 00:14:58,339
so on and so forth so that's that's good

00:14:54,079 --> 00:15:02,540
to see to be true with you as well I

00:14:58,339 --> 00:15:06,769
think the reason I'm pulling this

00:15:02,540 --> 00:15:10,310
question is the we are having some

00:15:06,769 --> 00:15:13,519
challenges maintaining the number of ops

00:15:10,310 --> 00:15:16,070
files in the in CF deployment especially

00:15:13,519 --> 00:15:19,370
the experimental features and as we

00:15:16,070 --> 00:15:21,890
mentioned it's a pretty grab bag of

00:15:19,370 --> 00:15:23,240
things before I go any further anyone

00:15:21,890 --> 00:15:25,880
else wanna

00:15:23,240 --> 00:15:32,120
then Jillian's app have feedback for me

00:15:25,880 --> 00:15:34,580
on experimental before I so I guess if

00:15:32,120 --> 00:15:37,520
I'm not mistaken most of the people are

00:15:34,580 --> 00:15:41,330
from sapa so okay awesome it's just a

00:15:37,520 --> 00:15:43,130
sweet bedcovers that's great so yeah as

00:15:41,330 --> 00:15:44,570
I mentioning we were having some

00:15:43,130 --> 00:15:47,870
challenges especially with the

00:15:44,570 --> 00:15:50,420
experimental features once they're added

00:15:47,870 --> 00:15:54,050
they stay there forever so there's no

00:15:50,420 --> 00:15:57,230
accountability on these things so what

00:15:54,050 --> 00:16:02,720
we're planning to introduce is a process

00:15:57,230 --> 00:16:05,720
where we want to enforce a lifetime or

00:16:02,720 --> 00:16:09,440
shelf life for expand experimental

00:16:05,720 --> 00:16:12,830
features and and have a clear path to

00:16:09,440 --> 00:16:14,600
that after that shelf time so there's an

00:16:12,830 --> 00:16:16,820
expiry date to these things so let's

00:16:14,600 --> 00:16:18,980
assume it's just an example doesn't have

00:16:16,820 --> 00:16:21,770
to be this specific time period say

00:16:18,980 --> 00:16:25,070
after six weeks the experimental feature

00:16:21,770 --> 00:16:29,240
has three paths after it got introduced

00:16:25,070 --> 00:16:31,760
say it either gets promoted to GA so it

00:16:29,240 --> 00:16:34,850
becomes part of the manifest it becomes

00:16:31,760 --> 00:16:37,279
the second option is the feature becomes

00:16:34,850 --> 00:16:39,320
an optional feature so that means it

00:16:37,279 --> 00:16:42,200
gets promoted to the operations folder

00:16:39,320 --> 00:16:44,899
so you have an opportunity to add on

00:16:42,200 --> 00:16:46,310
that feature the third is the

00:16:44,899 --> 00:16:49,070
experimental feature gets removed

00:16:46,310 --> 00:16:51,170
because you experimented with it you

00:16:49,070 --> 00:16:52,670
found that it does not add any value or

00:16:51,170 --> 00:16:55,490
doesn't work the way it needs to

00:16:52,670 --> 00:17:00,050
you just purge it so this will allow us

00:16:55,490 --> 00:17:03,260
to maintain a nice clean set of

00:17:00,050 --> 00:17:07,220
experimental features and validate them

00:17:03,260 --> 00:17:10,670
if necessary and have a path to GA right

00:17:07,220 --> 00:17:12,709
now we have a very ad hoc way of testing

00:17:10,670 --> 00:17:16,839
these experimental features in relation

00:17:12,709 --> 00:17:19,459
to patient so and again it's a lot of

00:17:16,839 --> 00:17:21,050
current drag on our site to maintain

00:17:19,459 --> 00:17:22,550
these things because someone comes and

00:17:21,050 --> 00:17:24,410
asked hey I'm having this problem with

00:17:22,550 --> 00:17:26,179
experimental I have we have no idea what

00:17:24,410 --> 00:17:28,309
that means because it's been like a two

00:17:26,179 --> 00:17:30,800
years that experimental state feature

00:17:28,309 --> 00:17:32,059
stayed in that folder so within six

00:17:30,800 --> 00:17:34,070
weeks is a good time because we'll have

00:17:32,059 --> 00:17:36,050
a fresh context every all the team

00:17:34,070 --> 00:17:37,220
members will know what it is including

00:17:36,050 --> 00:17:40,900
the component team

00:17:37,220 --> 00:17:45,530
so I'm gonna pause there and see if that

00:17:40,900 --> 00:17:48,650
makes sense to you all and if if it does

00:17:45,530 --> 00:17:53,470
how does that impact you in terms of

00:17:48,650 --> 00:17:55,460
your process yeah

00:17:53,470 --> 00:17:57,530
Toby probably applies to you more than

00:17:55,460 --> 00:17:59,200
anyone else here some curious to hear

00:17:57,530 --> 00:18:04,730
your thoughts on it because you do use

00:17:59,200 --> 00:18:08,660
some experimental yeah I having some

00:18:04,730 --> 00:18:11,870
some clearer cadence around when when

00:18:08,660 --> 00:18:17,090
next and also is are they can be shelved

00:18:11,870 --> 00:18:20,960
or promoted would be would be really

00:18:17,090 --> 00:18:24,830
useful and I also understand the support

00:18:20,960 --> 00:18:26,720
button and love having lots of lots of

00:18:24,830 --> 00:18:30,830
ops files around and also it's fairly

00:18:26,720 --> 00:18:32,660
low fairly low overhead for an

00:18:30,830 --> 00:18:34,670
individual operators say oh well this

00:18:32,660 --> 00:18:37,660
whole file is an experimental that I

00:18:34,670 --> 00:18:41,720
want to anyway I'll just put it in my

00:18:37,660 --> 00:18:43,730
deployment replay like that's that is

00:18:41,720 --> 00:18:47,090
definitely a valid expectation that one

00:18:43,730 --> 00:18:50,570
can have fun ha Priya hmm what I would

00:18:47,090 --> 00:18:53,390
what I would answer that is right now if

00:18:50,570 --> 00:18:56,750
there's the readme in experimental hobs

00:18:53,390 --> 00:18:58,720
files and there's also the release notes

00:18:56,750 --> 00:19:03,890
which kind of talk a little bit about

00:18:58,720 --> 00:19:07,340
the a little bit about what the closed

00:19:03,890 --> 00:19:09,320
file is for but some of them some of the

00:19:07,340 --> 00:19:13,370
operations files need a little bit more

00:19:09,320 --> 00:19:15,140
background and it would be really good

00:19:13,370 --> 00:19:16,850
in someone's fault if there was some

00:19:15,140 --> 00:19:19,070
documentation in slightly off so on

00:19:16,850 --> 00:19:23,000
maybe even just a comment saying this is

00:19:19,070 --> 00:19:26,360
why is this um which would fit a little

00:19:23,000 --> 00:19:29,570
bit better than than the little table in

00:19:26,360 --> 00:19:31,940
the readme and then also like if you're

00:19:29,570 --> 00:19:35,090
trying to avoid the burden of having law

00:19:31,940 --> 00:19:36,770
of ops files the to the relevant CF team

00:19:35,090 --> 00:19:40,280
or other team and how it's getting

00:19:36,770 --> 00:19:41,270
constable then if you have questions so

00:19:40,280 --> 00:19:44,150
just the last one I think there was

00:19:41,270 --> 00:19:47,630
background noise I mean having the team

00:19:44,150 --> 00:19:50,180
information who owns that because maybe

00:19:47,630 --> 00:19:51,080
a slack channel would help yeah is that

00:19:50,180 --> 00:19:54,919
what I heard okay

00:19:51,080 --> 00:19:57,649
yeah yeah exactly and but otherwise your

00:19:54,919 --> 00:20:00,350
your suggestion all your proposal makes

00:19:57,649 --> 00:20:04,059
absolute sense and and we definitely add

00:20:00,350 --> 00:20:04,059
a lot of clarity to the process

00:20:04,879 --> 00:20:10,190
yeah and anyone else from SAP in in case

00:20:08,330 --> 00:20:13,129
if you want to do use experimental

00:20:10,190 --> 00:20:20,059
features in the future is that process

00:20:13,129 --> 00:20:22,489
make sense here I would say yes maybe

00:20:20,059 --> 00:20:27,679
six weeks would for us be a bit

00:20:22,489 --> 00:20:31,580
challenging but okay if that was just an

00:20:27,679 --> 00:20:35,809
examples and otherwise it makes sense to

00:20:31,580 --> 00:20:38,299
have a expiry period for stuffs that

00:20:35,809 --> 00:20:40,309
won't make it into the standard

00:20:38,299 --> 00:20:43,220
operation files or GA makes sense

00:20:40,309 --> 00:20:45,259
otherwise yeah you end up in a big heap

00:20:43,220 --> 00:20:47,299
of experimental observation nobody takes

00:20:45,259 --> 00:20:50,299
care anymore so that I can understand

00:20:47,299 --> 00:20:52,549
that very very that's great I think you

00:20:50,299 --> 00:20:54,440
asked a very interesting question in

00:20:52,549 --> 00:20:57,109
terms of timeline

00:20:54,440 --> 00:20:59,600
can I pry on that why is six weeks

00:20:57,109 --> 00:21:01,549
though six weeks is just example I threw

00:20:59,600 --> 00:21:04,539
it under I'm curious to hear why you

00:21:01,549 --> 00:21:07,129
believe six weeks isn't challenging

00:21:04,539 --> 00:21:10,190
there's some hidden context I would love

00:21:07,129 --> 00:21:12,529
to know yeah

00:21:10,190 --> 00:21:14,629
as always we are also just the team with

00:21:12,529 --> 00:21:17,389
limited capacity and we have a backlog

00:21:14,629 --> 00:21:19,820
which is usually full and if an

00:21:17,389 --> 00:21:21,440
experimental feature just comes along we

00:21:19,820 --> 00:21:24,769
would need to squeeze it somehow in a

00:21:21,440 --> 00:21:26,899
normal development work which yeah it's

00:21:24,769 --> 00:21:30,080
about let's say very simple boring

00:21:26,899 --> 00:21:32,749
topics like see a rotation or I don't

00:21:30,080 --> 00:21:34,940
know new metrics or investigate certain

00:21:32,749 --> 00:21:36,859
instabilities or bugs that we have seen

00:21:34,940 --> 00:21:40,039
in detail and it's up most of the

00:21:36,859 --> 00:21:41,720
capacities or then six weeks means for

00:21:40,039 --> 00:21:43,789
us with sprints and that's probably

00:21:41,720 --> 00:21:45,919
unrealistic to squeeze and an evaluation

00:21:43,789 --> 00:21:47,330
and the pocs that make some sense so it

00:21:45,919 --> 00:21:47,960
means we have to have at least a pair

00:21:47,330 --> 00:21:50,989
for a week

00:21:47,960 --> 00:21:54,049
sitting on such a feature to to to

00:21:50,989 --> 00:21:57,289
evaluate it in a meaningful sense that's

00:21:54,049 --> 00:22:02,240
why I it also depends on the feature if

00:21:57,289 --> 00:22:03,559
it's simple then there's no no much

00:22:02,240 --> 00:22:05,030
problem with it but if it's something

00:22:03,559 --> 00:22:06,830
bigger

00:22:05,030 --> 00:22:09,520
I take always this Haute integrity as an

00:22:06,830 --> 00:22:12,200
example so that one keeps us busy for

00:22:09,520 --> 00:22:14,900
quite some time I would say especially

00:22:12,200 --> 00:22:16,490
testing a tunnel or maybe it really

00:22:14,900 --> 00:22:18,230
depends on the feature and maybe the

00:22:16,490 --> 00:22:24,140
scene that provides the experimental

00:22:18,230 --> 00:22:25,730
feature maybe they could propose and how

00:22:24,140 --> 00:22:28,789
much stuff is in sight in this feature

00:22:25,730 --> 00:22:30,530
if you choose to have here generic yeah

00:22:28,789 --> 00:22:33,799
I think there's that's definitely a good

00:22:30,530 --> 00:22:37,330
point actually and because it is feature

00:22:33,799 --> 00:22:40,419
by feature right one feature could mean

00:22:37,330 --> 00:22:42,799
having to provision you know I as

00:22:40,419 --> 00:22:45,470
resources to just have it working you

00:22:42,799 --> 00:22:47,120
know like maybe I just know like three

00:22:45,470 --> 00:22:49,370
blob stores and so on and so forth and

00:22:47,120 --> 00:22:51,799
some feature could just be like hey this

00:22:49,370 --> 00:22:53,299
new field gets added to something

00:22:51,799 --> 00:22:56,450
whereas like theirs could be a drastic

00:22:53,299 --> 00:23:00,309
change and trying to turn on a feature

00:22:56,450 --> 00:23:02,770
may require a lot of work so yeah

00:23:00,309 --> 00:23:05,929
interesting

00:23:02,770 --> 00:23:09,440
Toby case in New York situation what

00:23:05,929 --> 00:23:13,130
would be ideal timeline be if we had to

00:23:09,440 --> 00:23:15,049
say hey this during this time they will

00:23:13,130 --> 00:23:17,419
have the you know shelf life will be it

00:23:15,049 --> 00:23:22,460
will go to shelf for experimental

00:23:17,419 --> 00:23:24,980
feature yeah so I agree with Stefan in

00:23:22,460 --> 00:23:28,880
that six weeks force on features would

00:23:24,980 --> 00:23:31,039
definitely be not enough time so we

00:23:28,880 --> 00:23:35,630
don't have the official string cadence

00:23:31,039 --> 00:23:37,820
and but we you know that six weeks

00:23:35,630 --> 00:23:40,190
roughly represents half a call which we

00:23:37,820 --> 00:23:43,820
would like to have already prioritized

00:23:40,190 --> 00:23:47,120
some of the work in there um and so for

00:23:43,820 --> 00:23:48,890
larger features unless we prioritize it

00:23:47,120 --> 00:23:53,679
it's it would be hard for us to even

00:23:48,890 --> 00:23:57,230
evaluate for small features though like

00:23:53,679 --> 00:24:00,049
six weeks is definitely like ample time

00:23:57,230 --> 00:24:03,350
to have shipped it to one environment

00:24:00,049 --> 00:24:05,299
for us and and evaluated it but for

00:24:03,350 --> 00:24:07,880
larger features it's a bit more

00:24:05,299 --> 00:24:08,929
challenging and especially all other

00:24:07,880 --> 00:24:11,809
things that have been happening with

00:24:08,929 --> 00:24:14,059
routing recently like in order for us to

00:24:11,809 --> 00:24:18,440
kick the tires on it we require at least

00:24:14,059 --> 00:24:20,780
a week in order to work out you know

00:24:18,440 --> 00:24:22,670
what not just how it works their

00:24:20,780 --> 00:24:26,260
attitude but how it works in production

00:24:22,670 --> 00:24:29,000
and a tangential example is we recently

00:24:26,260 --> 00:24:30,560
ran not me personally but with

00:24:29,000 --> 00:24:32,710
colleagues women team and a spike on

00:24:30,560 --> 00:24:37,730
Sousa

00:24:32,710 --> 00:24:39,830
SEF and in order to fully take tires on

00:24:37,730 --> 00:24:42,470
that and we did leave still a lot of

00:24:39,830 --> 00:24:45,620
ground uncovered it took a pair and a

00:24:42,470 --> 00:24:50,750
half an entire week to fully not fully

00:24:45,620 --> 00:24:52,550
but to feel like we had a solid outcome

00:24:50,750 --> 00:24:58,640
and some good feedback and knowledge

00:24:52,550 --> 00:25:01,670
from yeah even even something as simple

00:24:58,640 --> 00:25:03,470
as as so I'm in the process to if I were

00:25:01,670 --> 00:25:09,620
paying if we can enable keeper lives

00:25:03,470 --> 00:25:11,990
which on on the go which is one

00:25:09,620 --> 00:25:15,710
parameter change but it does have

00:25:11,990 --> 00:25:18,110
significant consequences for things

00:25:15,710 --> 00:25:22,010
running on the platform at scale and so

00:25:18,110 --> 00:25:23,780
like it's also hard to predict how much

00:25:22,010 --> 00:25:26,810
time you're gonna need to allocate to an

00:25:23,780 --> 00:25:29,900
individual feature because in theory it

00:25:26,810 --> 00:25:32,500
is simple in practice you know you've

00:25:29,900 --> 00:25:35,000
got users who have built applications

00:25:32,500 --> 00:25:37,880
predicated on that weird thing that

00:25:35,000 --> 00:25:42,230
you're changing so so it's quite hard

00:25:37,880 --> 00:25:44,990
and the other thing I'd like to

00:25:42,230 --> 00:25:49,100
highlight is that the readme for the ops

00:25:44,990 --> 00:25:53,480
holes is extremely useful in that it has

00:25:49,100 --> 00:25:56,120
deprecation and why and so having some

00:25:53,480 --> 00:25:58,790
sort of discrete set of change logs

00:25:56,120 --> 00:26:01,910
either with the CF deployment release

00:25:58,790 --> 00:26:05,690
cadence or set enough to like the

00:26:01,910 --> 00:26:07,940
operations file life cycle cadence would

00:26:05,690 --> 00:26:10,160
be really useful if you're looking for a

00:26:07,940 --> 00:26:11,630
feature and their Wars are deprecated or

00:26:10,160 --> 00:26:15,350
an ops father went through an entire

00:26:11,630 --> 00:26:18,140
cycle and was def Kade for reason having

00:26:15,350 --> 00:26:22,130
that context in an accessible place I I

00:26:18,140 --> 00:26:24,980
don't have to do get log - yes I'm gonna

00:26:22,130 --> 00:26:25,810
find out exactly reason why would be

00:26:24,980 --> 00:26:29,150
really valuable

00:26:25,810 --> 00:26:32,690
sorry if I'm just giving you no no no

00:26:29,150 --> 00:26:34,790
this is all good yeah I think

00:26:32,690 --> 00:26:37,970
I think that makes sense to me I'm

00:26:34,790 --> 00:26:41,180
thinking maybe we have a minimum time

00:26:37,970 --> 00:26:43,940
right for features like okay no I'm just

00:26:41,180 --> 00:26:45,140
six weeks is just I'm saying as for name

00:26:43,940 --> 00:26:48,440
sake we may come up with a different

00:26:45,140 --> 00:26:52,790
number but like minimum X weeks and then

00:26:48,440 --> 00:26:55,250
the feature team can propose you know

00:26:52,790 --> 00:26:58,550
additional time based on the how complex

00:26:55,250 --> 00:27:00,620
is a feature so so there's no max

00:26:58,550 --> 00:27:02,180
basically so they may say we want to run

00:27:00,620 --> 00:27:03,920
this for a year because it will take us

00:27:02,180 --> 00:27:06,260
that much time to get feedback because

00:27:03,920 --> 00:27:09,230
it takes about three months for teams to

00:27:06,260 --> 00:27:12,890
actually turn this on and you know and

00:27:09,230 --> 00:27:14,180
we need more data three-quarters of data

00:27:12,890 --> 00:27:17,870
to actually understand if this is

00:27:14,180 --> 00:27:21,020
actually doing what it needs to do so so

00:27:17,870 --> 00:27:23,480
that way you know you we can still do

00:27:21,020 --> 00:27:27,140
this feature by feature based on the

00:27:23,480 --> 00:27:31,670
complexity but and not not put operators

00:27:27,140 --> 00:27:34,610
at what I call force operators to be

00:27:31,670 --> 00:27:36,530
able to like unwind or wind-up based on

00:27:34,610 --> 00:27:38,450
the timeline so so I think that's

00:27:36,530 --> 00:27:43,880
probably is a good compromise I have a

00:27:38,450 --> 00:27:46,490
minimum and then no max so that what I

00:27:43,880 --> 00:27:49,750
mean minimum means like it needs to be

00:27:46,490 --> 00:27:52,970
at least out for X weeks not below that

00:27:49,750 --> 00:27:56,480
and then they can add additional time

00:27:52,970 --> 00:27:56,900
teams in a traditional time that sounds

00:27:56,480 --> 00:27:59,420
good

00:27:56,900 --> 00:28:02,060
we do a similar thing with like

00:27:59,420 --> 00:28:04,550
documentation like this page has to be

00:28:02,060 --> 00:28:06,230
reviewed by and live you can arbitrarily

00:28:04,550 --> 00:28:08,210
extend it if it's still relevant on

00:28:06,230 --> 00:28:14,000
there are no changes or if you still

00:28:08,210 --> 00:28:17,900
want people to evaluate it awesome cool

00:28:14,000 --> 00:28:20,450
so that's all I had for that part of it

00:28:17,900 --> 00:28:26,090
I do have one small item that I wanted

00:28:20,450 --> 00:28:28,880
to poll I think I wanted to have a

00:28:26,090 --> 00:28:30,860
deeper understanding of great experience

00:28:28,880 --> 00:28:35,360
I think I had an opportunity to talk to

00:28:30,860 --> 00:28:40,930
staff and during summit but I wanted to

00:28:35,360 --> 00:28:44,180
so I have this ongoing sort of feedback

00:28:40,930 --> 00:28:47,120
maybe on a southern cadence released

00:28:44,180 --> 00:28:50,690
cadence so I said CF deployment

00:28:47,120 --> 00:28:53,300
has been released may you know let's say

00:28:50,690 --> 00:28:56,720
a major release then I send out a poll

00:28:53,300 --> 00:28:58,190
to the teams and then they can send sub

00:28:56,720 --> 00:28:59,870
made feedback saying hey what are the

00:28:58,190 --> 00:29:02,090
challenges you face what you liked about

00:28:59,870 --> 00:29:06,440
it what you did not like about it often

00:29:02,090 --> 00:29:08,660
times I the the the the feedback is only

00:29:06,440 --> 00:29:10,610
when I actually go and reach out so I

00:29:08,660 --> 00:29:12,920
want to see if I can set up a process

00:29:10,610 --> 00:29:14,780
that I think I talked to so and I bought

00:29:12,920 --> 00:29:16,940
this but somebody happened and

00:29:14,780 --> 00:29:19,040
everything else was I was traveling but

00:29:16,940 --> 00:29:21,590
I want to get back to like having more a

00:29:19,040 --> 00:29:23,710
feedback at setting cadence so I'm

00:29:21,590 --> 00:29:28,010
thinking maybe at every major release or

00:29:23,710 --> 00:29:30,200
certain timelines I can ask just kind of

00:29:28,010 --> 00:29:31,460
pull the team and I was how's it going

00:29:30,200 --> 00:29:36,020
were they at least some challenges you

00:29:31,460 --> 00:29:39,650
had you know with upgrade and now it

00:29:36,020 --> 00:29:42,230
gives me the goal for me they understand

00:29:39,650 --> 00:29:44,630
the good the bad and the ugly with

00:29:42,230 --> 00:29:48,230
upgrading collar foundry and I can use

00:29:44,630 --> 00:29:50,750
that data to shape on how we do upgrades

00:29:48,230 --> 00:29:53,780
and also share that with different cloud

00:29:50,750 --> 00:29:58,040
foundry teams so I'm I'm thinking of

00:29:53,780 --> 00:30:00,830
sending out a survey you know why slack

00:29:58,040 --> 00:30:02,840
channel but I'm curious to hear first of

00:30:00,830 --> 00:30:09,460
all what do you guys like the idea the

00:30:02,840 --> 00:30:09,460
second is if so what's the best medium I

00:30:11,320 --> 00:30:16,160
would yeah I would definitely fill out a

00:30:13,700 --> 00:30:18,650
survey on behalf of my team and probably

00:30:16,160 --> 00:30:22,310
circulate with my team as well all the

00:30:18,650 --> 00:30:24,980
team of which I'm the member and if you

00:30:22,310 --> 00:30:27,530
do send out survey please add a little

00:30:24,980 --> 00:30:29,570
bit of free text yeah we can provide

00:30:27,530 --> 00:30:31,760
like a qualitative context because

00:30:29,570 --> 00:30:34,580
everyone has a slightly different weird

00:30:31,760 --> 00:30:37,450
line and different ways that their

00:30:34,580 --> 00:30:42,640
developers contrary to their to the

00:30:37,450 --> 00:30:45,200
release of interest yep yeah one percent

00:30:42,640 --> 00:30:52,190
any service I send out it's never gonna

00:30:45,200 --> 00:30:55,040
be binary right we're humans so they say

00:30:52,190 --> 00:30:57,960
be you guys yes like that idea you want

00:30:55,040 --> 00:31:03,210
to participate I'm hoping

00:30:57,960 --> 00:31:07,060
yeah I'm wondering what you regard as a

00:31:03,210 --> 00:31:09,580
let's say update problem I mean I have I

00:31:07,060 --> 00:31:12,010
classified into two two regions the

00:31:09,580 --> 00:31:13,930
first one is that we as a let's say

00:31:12,010 --> 00:31:17,440
development team might have some

00:31:13,930 --> 00:31:21,240
problems or some more work to integrate

00:31:17,440 --> 00:31:23,620
a new CF release into let's say our

00:31:21,240 --> 00:31:24,790
pipelines and send the update was

00:31:23,620 --> 00:31:26,710
rolling without problems

00:31:24,790 --> 00:31:28,690
that usually happens when there's a new

00:31:26,710 --> 00:31:31,270
major release for CF deployments because

00:31:28,690 --> 00:31:33,100
we have maybe to adopt some ops files or

00:31:31,270 --> 00:31:35,800
vas files etcetera that's all fine

00:31:33,100 --> 00:31:37,950
that's all no big problem those changes

00:31:35,800 --> 00:31:40,120
are usually very well described in these

00:31:37,950 --> 00:31:44,620
pre-announcement doc files which I

00:31:40,120 --> 00:31:46,750
really appreciate and so that's it's a

00:31:44,620 --> 00:31:48,550
one bucket and the second one is let's

00:31:46,750 --> 00:31:51,070
say there are real problems when it

00:31:48,550 --> 00:31:54,430
comes to updating now the landscapes and

00:31:51,070 --> 00:31:57,700
we see some issues so just recently you

00:31:54,430 --> 00:31:59,740
know just now we are experiencing a

00:31:57,700 --> 00:32:02,110
problem between Cloud Controller and

00:31:59,740 --> 00:32:03,430
Lokesh we just yeah communicated a

00:32:02,110 --> 00:32:05,170
little bit of slack and and open the

00:32:03,430 --> 00:32:08,800
back on that and are still investigating

00:32:05,170 --> 00:32:11,740
and these are the real heart problems

00:32:08,800 --> 00:32:13,780
because that might even mean for us that

00:32:11,740 --> 00:32:16,420
we stopped no shipping to live

00:32:13,780 --> 00:32:18,340
landscapes and that brings us in a

00:32:16,420 --> 00:32:21,280
situation where we are not able anymore

00:32:18,340 --> 00:32:23,800
to update CF which is an issue if the

00:32:21,280 --> 00:32:27,130
next CBE kicks in because it breaks the

00:32:23,800 --> 00:32:29,230
neck and right that's a situation we we

00:32:27,130 --> 00:32:31,600
try to avoid so to conveying this

00:32:29,230 --> 00:32:33,850
feedback I mean usually we open

00:32:31,600 --> 00:32:35,500
immediately a buck on that problem so

00:32:33,850 --> 00:32:39,430
the feedback already comes but maybe

00:32:35,500 --> 00:32:42,220
collect things that separate this yeah I

00:32:39,430 --> 00:32:43,900
think the I'm looking mostly that's a

00:32:42,220 --> 00:32:46,390
great point I think the feedback I

00:32:43,900 --> 00:32:49,000
appreciate you opening up issues to you

00:32:46,390 --> 00:32:51,130
but oftentimes those issues are a team

00:32:49,000 --> 00:32:54,970
specific so they go to a certain team I

00:32:51,130 --> 00:32:57,100
don't have that visibility so but I

00:32:54,970 --> 00:32:59,440
think mostly what I'm looking at is

00:32:57,100 --> 00:33:01,720
patterns right so you may have a very

00:32:59,440 --> 00:33:04,510
specific issue it's a long time period

00:33:01,720 --> 00:33:08,170
but like trying to see hey the last six

00:33:04,510 --> 00:33:10,240
months you saw each team had this very

00:33:08,170 --> 00:33:12,820
simple issue where

00:33:10,240 --> 00:33:14,860
or an issue that actually every team

00:33:12,820 --> 00:33:16,690
exhibited and then their operators had

00:33:14,860 --> 00:33:19,180
to fix those things I'm trying to think

00:33:16,690 --> 00:33:20,920
about an example it could be high

00:33:19,180 --> 00:33:24,150
availability right like say push

00:33:20,920 --> 00:33:27,340
availability every team that is shipping

00:33:24,150 --> 00:33:28,780
is has push available the issue so that

00:33:27,340 --> 00:33:30,520
is something that we could think about

00:33:28,780 --> 00:33:32,860
okay we're seeing this consistently

00:33:30,520 --> 00:33:34,990
across all upgrades in the last six

00:33:32,860 --> 00:33:37,810
months what can we do to help these

00:33:34,990 --> 00:33:41,470
teams think about those things influence

00:33:37,810 --> 00:33:43,660
them to start paying attention to that

00:33:41,470 --> 00:33:45,010
we can enforce it obviously because

00:33:43,660 --> 00:33:46,750
these are all the teams that it's all

00:33:45,010 --> 00:33:49,090
collaboration but whether it is it's a

00:33:46,750 --> 00:33:52,060
data point and pattern that we can

00:33:49,090 --> 00:33:54,550
actually use to talk I have a

00:33:52,060 --> 00:33:55,930
composition so yeah I appreciate that

00:33:54,550 --> 00:33:58,630
you opening an issue but it's just more

00:33:55,930 --> 00:34:00,160
around like a like a certain cadence

00:33:58,630 --> 00:34:01,960
what is that date what would the world

00:34:00,160 --> 00:34:05,980
look like if I had to collect it the

00:34:01,960 --> 00:34:07,960
next six months yeah no problem with

00:34:05,980 --> 00:34:09,820
that and what I would appreciate if you

00:34:07,960 --> 00:34:12,990
could also include let's say the

00:34:09,820 --> 00:34:16,330
operators of the pivotal web services

00:34:12,990 --> 00:34:17,800
into this feedback because actually for

00:34:16,330 --> 00:34:20,230
the current back I would expect that you

00:34:17,800 --> 00:34:22,210
have said that one was reported more

00:34:20,230 --> 00:34:24,280
often because it's a very clear update

00:34:22,210 --> 00:34:26,500
problem so if the landscape is a bit

00:34:24,280 --> 00:34:31,840
bigger you can hardly avoid that I would

00:34:26,500 --> 00:34:33,550
say yeah I wonder yeah I'm surprised

00:34:31,840 --> 00:34:36,370
that there are no other yeah

00:34:33,550 --> 00:34:38,860
boxer open maybe you have other channels

00:34:36,370 --> 00:34:41,080
I think so

00:34:38,860 --> 00:34:43,120
feedback is such a hard thing if there's

00:34:41,080 --> 00:34:47,080
enterprise applications in general right

00:34:43,120 --> 00:34:49,000
because tea companies like you said like

00:34:47,080 --> 00:34:52,419
there were really only a few company in

00:34:49,000 --> 00:34:55,510
firms organizations that try to keep up

00:34:52,419 --> 00:34:57,100
with latest versions right like you do

00:34:55,510 --> 00:34:58,900
you and Toby mention like they try to

00:34:57,100 --> 00:35:00,880
ice close as possible but not everybody

00:34:58,900 --> 00:35:03,820
like we get feedback someone says like

00:35:00,880 --> 00:35:05,470
hey I'm trying to upgrade to 2.3 and I'm

00:35:03,820 --> 00:35:09,130
having a third issue I'm like what are

00:35:05,470 --> 00:35:10,870
you talking about we had at 13 so but

00:35:09,130 --> 00:35:12,970
yeah so I think there are there are

00:35:10,870 --> 00:35:16,030
people out there so though that kind of

00:35:12,970 --> 00:35:18,580
feedback is very hard to make actionable

00:35:16,030 --> 00:35:21,640
but if you said hey I'm at 13 I'm trying

00:35:18,580 --> 00:35:23,740
to upgrade if you know I'm on Lebanon we

00:35:21,640 --> 00:35:25,330
could turn up with you 12 you're

00:35:23,740 --> 00:35:27,640
major behind but it's still not a bad

00:35:25,330 --> 00:35:29,099
feedback because the context is still or

00:35:27,640 --> 00:35:32,530
kind of fresh

00:35:29,099 --> 00:35:35,950
but yeah so so sometimes some feedback

00:35:32,530 --> 00:35:37,690
is useless because it's it's not does

00:35:35,950 --> 00:35:42,609
not fit into the the wall that we are in

00:35:37,690 --> 00:35:46,210
today in there you know yeah yeah make

00:35:42,609 --> 00:35:48,849
sense so such severe update problems I

00:35:46,210 --> 00:35:51,820
guess they say also somehow stick into

00:35:48,849 --> 00:35:54,040
our minds and if survey would come I am

00:35:51,820 --> 00:35:57,430
pretty sure I would be able to remember

00:35:54,040 --> 00:35:59,170
it and put it in yeah cool and as always

00:35:57,430 --> 00:36:02,109
you all can reach out to me in person

00:35:59,170 --> 00:36:05,440
too doesn't have to be just one way like

00:36:02,109 --> 00:36:09,550
I think you have my niece lack a handle

00:36:05,440 --> 00:36:14,250
on class boundaries and sing so him see

00:36:09,550 --> 00:36:16,660
yeah it is at how do you even get that

00:36:14,250 --> 00:36:18,720
yeah it's like I think my full name in

00:36:16,660 --> 00:36:21,730
there so I should be able to get that

00:36:18,720 --> 00:36:23,890
cool that's all I had and I really

00:36:21,730 --> 00:36:28,900
appreciate I was taking some time to

00:36:23,890 --> 00:36:30,849
talk to me today Karthik back to you if

00:36:28,900 --> 00:36:34,270
you're right I yeah clothesline

00:36:30,849 --> 00:36:34,720
alright thank you so thank you to

00:36:34,270 --> 00:36:37,780
everyone

00:36:34,720 --> 00:36:40,450
we all had a very nice discussion so

00:36:37,780 --> 00:36:43,270
this last month in India it was a

00:36:40,450 --> 00:36:45,790
festival season and I was on vacation so

00:36:43,270 --> 00:36:48,099
that's why I was not able to reach much

00:36:45,790 --> 00:36:49,750
people to get some more topics I thank

00:36:48,099 --> 00:36:52,599
you very much foresight to jump in and

00:36:49,750 --> 00:36:55,119
add the topic for this month Cour so

00:36:52,599 --> 00:36:57,400
hopefully in the coming monthly call we

00:36:55,119 --> 00:37:01,859
just try to get some very nice topics to

00:36:57,400 --> 00:37:07,510
discuss so there's all for my side

00:37:01,859 --> 00:37:10,770
anybody wanna shout something wrong all

00:37:07,510 --> 00:37:13,990
right thank you everyone have a good day

00:37:10,770 --> 00:37:17,369
thanks thank you bye bye

00:37:13,990 --> 00:37:17,369

YouTube URL: https://www.youtube.com/watch?v=CY-ok2E70ko


