Title: Broadening the Base: Increasing Options for Deploying Cloud Foundry - Troy Topnik, SUSE
Publication date: 2017-10-18
Playlist: Cloud Foundry Summit Europe 2017
Description: 
	Gold Sponsor Lightning Talk: Broadening the Base: Increasing Options for Deploying Cloud Foundry - Troy Topnik, SUSE

The Cloud Foundry community has relied on a single Linux distribution since its inception. SUSE is building a new Cloud Foundry distribution and working with the Foundation to bring SUSE-based stemcells and stacks to the community. Learn about the new directions explored in this distribution, and how increasing the deployment options available for Cloud Foundry could broaden its user base and adoption.

About Troy Topnik
Troy is a Senior Product Manager responsible for SUSE Cloud Application Platform. He began working with Cloud Foundry shortly after its open source debut in 2011, and has been a technical writer, instructor, and product manager with the ActiveState and HPE Helion Stackato teams.
Captions: 
	00:00:00,030 --> 00:00:05,100
okay I'm Troy talk Nick you may me you

00:00:03,300 --> 00:00:06,600
may remember me from such products as

00:00:05,100 --> 00:00:09,840
active state staccato

00:00:06,600 --> 00:00:11,730
Hylian staccato but I'm here to talk

00:00:09,840 --> 00:00:15,179
about Sousa cloud application platform

00:00:11,730 --> 00:00:17,640
now and more importantly Sousa Cloud

00:00:15,179 --> 00:00:19,980
Foundry and I want to tie on to some of

00:00:17,640 --> 00:00:22,109
dr. Max's comments about making a

00:00:19,980 --> 00:00:23,970
thousand flowers grow because we're

00:00:22,109 --> 00:00:25,769
gonna show our renewed commitment to

00:00:23,970 --> 00:00:30,720
making innovation happen upstream in

00:00:25,769 --> 00:00:32,660
Cloud Foundry so if you may have heard

00:00:30,720 --> 00:00:35,730
Souza's building a Cloud Foundry

00:00:32,660 --> 00:00:37,440
distribution and one of the things that

00:00:35,730 --> 00:00:42,899
should be pretty obvious from Sousa

00:00:37,440 --> 00:00:44,969
being a linux vendor that that we can't

00:00:42,899 --> 00:00:47,850
really build that on someone else's OS

00:00:44,969 --> 00:00:51,960
so we are in fact going to build it on

00:00:47,850 --> 00:00:54,510
Susan Linux and we have a factory first

00:00:51,960 --> 00:00:57,449
model in our development of suzhou linux

00:00:54,510 --> 00:01:00,090
that means we have an open source

00:00:57,449 --> 00:01:03,600
distribution called openSUSE opens is a

00:01:00,090 --> 00:01:07,350
tumbleweed feeds into both suzhou linux

00:01:03,600 --> 00:01:09,060
enterprise and openSUSE leap and so our

00:01:07,350 --> 00:01:11,189
upstream work is going to happen and is

00:01:09,060 --> 00:01:14,070
happening we've got a pair working on

00:01:11,189 --> 00:01:16,259
this now getting stem cells and stacks

00:01:14,070 --> 00:01:18,630
committed upstream so that anyone can

00:01:16,259 --> 00:01:20,939
can use this so our upstream work you

00:01:18,630 --> 00:01:24,600
will see arriving will be built on

00:01:20,939 --> 00:01:26,850
openSUSE and our productized work will

00:01:24,600 --> 00:01:29,340
we'll be shipping on susan linux

00:01:26,850 --> 00:01:31,530
enterprise same code there's a certain

00:01:29,340 --> 00:01:33,119
process by which we can we can support

00:01:31,530 --> 00:01:36,509
the SUSE Linux Enterprise much more

00:01:33,119 --> 00:01:39,799
deeply so let's talk about where that

00:01:36,509 --> 00:01:42,270
actually goes in a cloud foundry

00:01:39,799 --> 00:01:44,549
implementation you run all the cloud

00:01:42,270 --> 00:01:47,369
foundry roles on stem cells on boss stem

00:01:44,549 --> 00:01:50,399
cells and for as long as I can remember

00:01:47,369 --> 00:01:52,770
well it forever yeah cloud foundry is

00:01:50,399 --> 00:01:55,409
always run on who've been to initially

00:01:52,770 --> 00:02:00,780
on lucid and then on trusty starting at

00:01:55,409 --> 00:02:02,909
around 2014 but now you can you can

00:02:00,780 --> 00:02:07,890
starting very very soon you'll be able

00:02:02,909 --> 00:02:08,610
to use openSUSE 42.3 Bosch stem cells to

00:02:07,890 --> 00:02:11,130
run

00:02:08,610 --> 00:02:12,540
cambree so that's the base layer that is

00:02:11,130 --> 00:02:15,210
the layer that runs the Cloud Foundry

00:02:12,540 --> 00:02:16,980
rules but there's also another place

00:02:15,210 --> 00:02:19,470
where the operating system is important

00:02:16,980 --> 00:02:20,670
and we make a change there too or we

00:02:19,470 --> 00:02:24,900
make we don't make a change we make an

00:02:20,670 --> 00:02:28,350
addition the concept of stacks in Cloud

00:02:24,900 --> 00:02:30,090
Foundry is extremely powerful it comes

00:02:28,350 --> 00:02:33,510
from a notion that was also around in

00:02:30,090 --> 00:02:35,430
Heroku and it's kind of a shame that

00:02:33,510 --> 00:02:37,680
that we haven't seen this used more we

00:02:35,430 --> 00:02:39,110
saw it used a little bit in windows

00:02:37,680 --> 00:02:41,820
native de A's

00:02:39,110 --> 00:02:44,520
but this is a place where it's the

00:02:41,820 --> 00:02:48,239
openSUSE shows up as well so very

00:02:44,520 --> 00:02:51,360
conveniently the build pack design makes

00:02:48,239 --> 00:02:53,730
it easy for us to use the same build

00:02:51,360 --> 00:02:55,020
pack to work on multiple stacks this is

00:02:53,730 --> 00:02:57,780
something that is different from how it

00:02:55,020 --> 00:03:01,680
was in the Windows da in the window

00:02:57,780 --> 00:03:03,090
stack but we've found a way to and it

00:03:01,680 --> 00:03:06,540
was a way that was baked into Cloud

00:03:03,090 --> 00:03:08,820
Foundry so that a single build pack if

00:03:06,540 --> 00:03:11,040
it's packaged with the binaries for both

00:03:08,820 --> 00:03:14,459
stacks it can work equally well on both

00:03:11,040 --> 00:03:15,870
so you just have to build binaries and

00:03:14,459 --> 00:03:17,640
you have to build a lot of binaries

00:03:15,870 --> 00:03:19,380
because there are a lot of build packs

00:03:17,640 --> 00:03:23,820
and each of those build packs has a

00:03:19,380 --> 00:03:25,709
number of language versions in it so

00:03:23,820 --> 00:03:29,820
we're gonna build all those binaries

00:03:25,709 --> 00:03:32,280
souza can do this because we've got a

00:03:29,820 --> 00:03:34,110
lot of practice building packages we

00:03:32,280 --> 00:03:35,970
build a lot of them we've got a lot of

00:03:34,110 --> 00:03:38,100
different versions of SUSE Linux

00:03:35,970 --> 00:03:41,250
Enterprise and we have to be able to

00:03:38,100 --> 00:03:43,830
produce certifiable builds from exactly

00:03:41,250 --> 00:03:46,049
the right sources over very very very

00:03:43,830 --> 00:03:48,810
many versions of different packages and

00:03:46,049 --> 00:03:52,890
very very many versions of souza linux

00:03:48,810 --> 00:03:55,110
and our open build system actually

00:03:52,890 --> 00:03:57,120
packages in more than just the RPM

00:03:55,110 --> 00:03:59,070
formats that we traditionally use so we

00:03:57,120 --> 00:04:00,900
can also produce Debian packages we can

00:03:59,070 --> 00:04:03,299
also produce tar balls we can produce a

00:04:00,900 --> 00:04:05,070
lot of things for a lot of different

00:04:03,299 --> 00:04:07,079
platforms and this is another thing

00:04:05,070 --> 00:04:08,880
that's very interesting we can start

00:04:07,079 --> 00:04:12,840
using stacks and we can start using our

00:04:08,880 --> 00:04:14,340
build system to expand the the choices

00:04:12,840 --> 00:04:15,870
in platforms that people have their

00:04:14,340 --> 00:04:18,930
choices and architectures that people

00:04:15,870 --> 00:04:21,000
have so we're going to be building lots

00:04:18,930 --> 00:04:24,639
of binaries for

00:04:21,000 --> 00:04:26,980
for our own distribution anyway I'd like

00:04:24,639 --> 00:04:29,110
to offer that we would be able to help

00:04:26,980 --> 00:04:30,910
upstream with taking some of this load

00:04:29,110 --> 00:04:33,190
which I know is quite significant off

00:04:30,910 --> 00:04:35,080
the build pack team or helping and use

00:04:33,190 --> 00:04:38,830
our expertise in building these packages

00:04:35,080 --> 00:04:42,360
for for building all the binary so that

00:04:38,830 --> 00:04:42,360
are required for all of the build packs

00:04:42,840 --> 00:04:49,060
another choice in what we have done and

00:04:46,540 --> 00:04:50,919
as a sort of less expected choice for

00:04:49,060 --> 00:04:55,080
some people is that we've chosen to

00:04:50,919 --> 00:04:57,400
deploy cloud foundry on kubernetes we

00:04:55,080 --> 00:04:59,740
are big fans of communities we think

00:04:57,400 --> 00:05:01,389
it's an excellent scheduler we've done

00:04:59,740 --> 00:05:03,760
this before some of us came from a team

00:05:01,389 --> 00:05:07,090
at HPE and we made a containerized

00:05:03,760 --> 00:05:08,530
version of cloud foundry there so we've

00:05:07,090 --> 00:05:10,380
essentially done this twice now and

00:05:08,530 --> 00:05:15,100
we're getting pretty good at running

00:05:10,380 --> 00:05:16,600
cloud foundry on kubernetes so to that

00:05:15,100 --> 00:05:19,449
end we're going to be releasing a

00:05:16,600 --> 00:05:21,430
product built on a containerized cloud

00:05:19,449 --> 00:05:22,750
fabric distribution called SCF we're

00:05:21,430 --> 00:05:25,990
aiming for this to be a certified

00:05:22,750 --> 00:05:28,479
distribution and it's gonna be built

00:05:25,990 --> 00:05:31,060
from upstream Bosch releases so we do

00:05:28,479 --> 00:05:35,260
use Bosch we use it to build the

00:05:31,060 --> 00:05:35,950
distribution Bosch releases built on

00:05:35,260 --> 00:05:38,700
souza

00:05:35,950 --> 00:05:42,520
Linux Enterprise which run on kubernetes

00:05:38,700 --> 00:05:43,870
kaz platform is is our implementation of

00:05:42,520 --> 00:05:45,370
kubernetes but you can run on others

00:05:43,870 --> 00:05:47,860
there's no engineering reason why it

00:05:45,370 --> 00:05:49,830
doesn't we've demonstrated that a few

00:05:47,860 --> 00:05:51,940
different places and we're using helm

00:05:49,830 --> 00:05:54,099
kubernetes helm for the lifecycle

00:05:51,940 --> 00:05:56,950
management this is for the deployment of

00:05:54,099 --> 00:06:01,240
Susan cloud foundry and for the upgrade

00:05:56,950 --> 00:06:04,599
and maintenance of it as well and just

00:06:01,240 --> 00:06:06,490
to sort of conclude the history of this

00:06:04,599 --> 00:06:09,130
type of innovation is has not been

00:06:06,490 --> 00:06:11,050
always very smooth so I started out at

00:06:09,130 --> 00:06:13,840
active State staccato and we had a very

00:06:11,050 --> 00:06:17,860
early fork from the open source the open

00:06:13,840 --> 00:06:20,320
source project in 20 2011 and we did a

00:06:17,860 --> 00:06:22,599
lot of really interesting work there but

00:06:20,320 --> 00:06:24,490
because it was not a completely open

00:06:22,599 --> 00:06:27,099
process and because there was a lot of

00:06:24,490 --> 00:06:28,580
stuff that was held back we were founded

00:06:27,099 --> 00:06:30,710
very

00:06:28,580 --> 00:06:32,960
to donate that work back upstream to get

00:06:30,710 --> 00:06:35,449
that stuff those innovations which we

00:06:32,960 --> 00:06:36,919
were all very proud of it just didn't

00:06:35,449 --> 00:06:38,960
mesh with the other upstream work that

00:06:36,919 --> 00:06:41,330
was happening at the time with HPE

00:06:38,960 --> 00:06:44,479
Helion staccato there was certainly a

00:06:41,330 --> 00:06:47,360
will to move closer to upstream we had a

00:06:44,479 --> 00:06:48,770
certified CF distributions we open

00:06:47,360 --> 00:06:51,379
sources several projects that were

00:06:48,770 --> 00:06:54,169
associated with that but again not

00:06:51,379 --> 00:06:55,759
everything was available upstream to the

00:06:54,169 --> 00:06:57,860
upstream contributors in a way that they

00:06:55,759 --> 00:06:59,689
could actually make those innovations

00:06:57,860 --> 00:07:02,210
bring those innovations in that that

00:06:59,689 --> 00:07:05,270
could be shared by everyone with Sousa

00:07:02,210 --> 00:07:05,930
we have a mandate to work in the open

00:07:05,270 --> 00:07:09,620
all the time

00:07:05,930 --> 00:07:12,259
so with SCF Sousa Cloud Foundry Stratos

00:07:09,620 --> 00:07:14,930
UI the CF Universal Service broker and

00:07:12,259 --> 00:07:17,419
Fissel we would like to get all of this

00:07:14,930 --> 00:07:18,800
stuff as upstream as we can either

00:07:17,419 --> 00:07:22,699
through the extensions project or

00:07:18,800 --> 00:07:25,039
directly upstream and I can say that

00:07:22,699 --> 00:07:27,500
Sousa has a surprising commitment to

00:07:25,039 --> 00:07:30,710
open source because when we when a

00:07:27,500 --> 00:07:32,569
number of us joined in in March we had a

00:07:30,710 --> 00:07:33,919
great concern that we wanted to see a

00:07:32,569 --> 00:07:36,199
lot of our innovations going upstream

00:07:33,919 --> 00:07:37,729
and we approached I can't remember if it

00:07:36,199 --> 00:07:41,509
was the president of engineering or the

00:07:37,729 --> 00:07:44,300
CEO and we said if we have a good reason

00:07:41,509 --> 00:07:46,279
for something to be open-source can we

00:07:44,300 --> 00:07:50,330
make sure it's open sourced and we were

00:07:46,279 --> 00:07:52,550
told very plainly unless you have a very

00:07:50,330 --> 00:07:55,279
good reason for something not to be open

00:07:52,550 --> 00:07:59,389
sourced it's going to be open source so

00:07:55,279 --> 00:08:02,779
with that I'd like to reiterate dr.

00:07:59,389 --> 00:08:04,339
Max's statement that we should make a

00:08:02,779 --> 00:08:07,900
thousand flowers go and please help us

00:08:04,339 --> 00:08:07,900
innovate on this this platform

00:08:09,690 --> 00:08:13,749

YouTube URL: https://www.youtube.com/watch?v=iVn-l3huUmU


