Title: An IoT App's Journey to the Cloud: From localhost to PCF Dev and Pivotal Cloud Foundry - Beibei Yang
Publication date: 2017-10-18
Playlist: Cloud Foundry Summit Europe 2017
Description: 
	An IoT App's Journey to the Cloud: From localhost to PCF Dev and Pivotal Cloud Foundry - Beibei Yang, Dell EMC

Modern factories have implemented a multitude of IoT devices generating streaming data with different formats and capacity. We will explore how to aggregate streaming data from these devices to feed into dashboard apps and how to migrate these apps from localhost to PCF Dev and finally Pivotal Cloud Foundry. We will discuss some of the challenges we ran into and how to address them.

About Beibei Yang
Beibei Yang is a senior advisor from the Converged Platforms and Solutions at Dell EMC that supports cloud and big data solutions. With Ph.D. in Computer Science and 9 years in IT industry, her experience spans Software Engineering, Data Science, Machine Learning and Cloud. Beibei has spoken at conferences in both academia and industry and she holds multiple patents.
Captions: 
	00:00:00,060 --> 00:00:06,120
so today we're gonna talk about the IOT

00:00:02,760 --> 00:00:09,540
app I'm going to show you how an IOT app

00:00:06,120 --> 00:00:12,719
finds its way to the cloud basically

00:00:09,540 --> 00:00:15,630
we'll show how the same app runs at

00:00:12,719 --> 00:00:18,300
localhost then we move it to PCF dev

00:00:15,630 --> 00:00:21,390
then family the folklore pivotal Cloud

00:00:18,300 --> 00:00:24,180
Foundry we show some differences for

00:00:21,390 --> 00:00:25,740
each of these stages and we also

00:00:24,180 --> 00:00:28,289
highlight some the problem we write into

00:00:25,740 --> 00:00:32,040
as we move Moodle up to the cloud

00:00:28,289 --> 00:00:36,239
basically all right so we've seen lots

00:00:32,040 --> 00:00:38,969
of hype around IOT so in the given study

00:00:36,239 --> 00:00:42,329
as you've seen on the bottom screen in

00:00:38,969 --> 00:00:45,719
this year IDC and garden shows that

00:00:42,329 --> 00:00:49,800
there being over a hundred million

00:00:45,719 --> 00:00:52,289
dollars in spending on relativity then

00:00:49,800 --> 00:00:55,140
they're basically over a building

00:00:52,289 --> 00:00:58,379
connected things just this year but

00:00:55,140 --> 00:01:03,059
these number will greatly increase so by

00:00:58,379 --> 00:01:05,129
the end of a year 2021 we will have over

00:01:03,059 --> 00:01:08,850
one point four trillion dollars spending

00:01:05,129 --> 00:01:11,790
on IOT as well as over twenty building

00:01:08,850 --> 00:01:14,390
connected things and of course that

00:01:11,790 --> 00:01:19,470
posted a lot of food challenges as

00:01:14,390 --> 00:01:22,860
opportunities all right so here we have

00:01:19,470 --> 00:01:25,320
a we basically we work with our partners

00:01:22,860 --> 00:01:28,229
and set up some labs and this is the

00:01:25,320 --> 00:01:30,750
architecture the lab we we built for

00:01:28,229 --> 00:01:33,420
also the lab environment behind the app

00:01:30,750 --> 00:01:35,520
I'm gonna show you so on the bottom we

00:01:33,420 --> 00:01:37,530
see that there are three labs but we are

00:01:35,520 --> 00:01:39,659
adding more labs as well each lab is

00:01:37,530 --> 00:01:43,189
focusing on differences in AI also the

00:01:39,659 --> 00:01:46,310
first one demo app on the bottom left

00:01:43,189 --> 00:01:50,490
that's this one so that's the four

00:01:46,310 --> 00:01:52,350
appendant device and the second one we

00:01:50,490 --> 00:01:55,229
call lab one room so that's four

00:01:52,350 --> 00:01:57,960
basically don't detections so you think

00:01:55,229 --> 00:02:00,540
of a surveillance at scenario where

00:01:57,960 --> 00:02:03,869
there's a drone flying trying to pray

00:02:00,540 --> 00:02:06,420
information and we use AI to detect that

00:02:03,869 --> 00:02:09,000
so that's that's the plan and the third

00:02:06,420 --> 00:02:11,790
one that's the highlighting the chemical

00:02:09,000 --> 00:02:13,410
pollution scenario we also added adding

00:02:11,790 --> 00:02:15,140
several other labs

00:02:13,410 --> 00:02:18,510
which is which now showing the

00:02:15,140 --> 00:02:21,980
architecture on the top in the middle

00:02:18,510 --> 00:02:24,560
section that's the center of our

00:02:21,980 --> 00:02:27,480
environment so we have a data center and

00:02:24,560 --> 00:02:31,530
it's built on top of Hotel IOT gateway

00:02:27,480 --> 00:02:32,250
and we also have the our power edge

00:02:31,530 --> 00:02:35,580
server

00:02:32,250 --> 00:02:37,320
creating arrays so such hardware's that

00:02:35,580 --> 00:02:41,000
have in such a way that all these the

00:02:37,320 --> 00:02:44,490
lab you know each lab has like over a

00:02:41,000 --> 00:02:46,320
dozen sensors so each sensor is emitting

00:02:44,490 --> 00:02:48,210
a district whole a cycle

00:02:46,320 --> 00:02:50,640
so all these lab all these data

00:02:48,210 --> 00:02:53,730
collected from these labs using the

00:02:50,640 --> 00:02:56,370
standard MQTT protocol as well as other

00:02:53,730 --> 00:03:00,150
protocol to fit into this hardware

00:02:56,370 --> 00:03:02,940
environment we also set up virtual in

00:03:00,150 --> 00:03:06,150
virtually on top so that's on top of the

00:03:02,940 --> 00:03:07,890
virtual layer we have a Hadoop for in

00:03:06,150 --> 00:03:11,760
batch processing including some of the

00:03:07,890 --> 00:03:13,650
Hadoop ecosystem tools we also have you

00:03:11,760 --> 00:03:16,860
know you see the nest cameras you know

00:03:13,650 --> 00:03:20,220
you could see the video feed coming in

00:03:16,860 --> 00:03:23,280
and also same video fields also ingested

00:03:20,220 --> 00:03:25,620
into offshore store we also have a

00:03:23,280 --> 00:03:27,360
MongoDB so that's the heart of this demo

00:03:25,620 --> 00:03:30,330
I'm going to show later for the data

00:03:27,360 --> 00:03:32,640
store part then on top of that we have a

00:03:30,330 --> 00:03:34,260
to destination showing in the picture so

00:03:32,640 --> 00:03:36,810
on the Left that's the UM home

00:03:34,260 --> 00:03:39,120
environment in the native hybrid cloud

00:03:36,810 --> 00:03:41,550
that's a solution we built for our

00:03:39,120 --> 00:03:44,100
customers for in employment management

00:03:41,550 --> 00:03:47,310
in the in cloud native environment on

00:03:44,100 --> 00:03:49,650
the top right that's the public service

00:03:47,310 --> 00:03:53,550
the empirical function pillow web

00:03:49,650 --> 00:03:55,830
services then on the top left we also

00:03:53,550 --> 00:03:58,530
support some of the public cloud

00:03:55,830 --> 00:04:01,290
services in depending on the use case we

00:03:58,530 --> 00:04:04,650
build so we use the Microsoft Azure for

00:04:01,290 --> 00:04:08,130
the POC and so one of the in one of the

00:04:04,650 --> 00:04:10,860
demo we bill is to in build a in

00:04:08,130 --> 00:04:13,410
basically customer 360 profile you know

00:04:10,860 --> 00:04:15,600
with the license detection so when

00:04:13,410 --> 00:04:17,520
imagining a bank you know scenario when

00:04:15,600 --> 00:04:19,500
the customer was into a parking lot and

00:04:17,520 --> 00:04:21,930
the such video feeds pick up by the

00:04:19,500 --> 00:04:24,180
surveillance camera and they analyze the

00:04:21,930 --> 00:04:27,000
the basically the license plate and that

00:04:24,180 --> 00:04:29,810
license place associate with the bank

00:04:27,000 --> 00:04:33,060
customer then we could quickly and

00:04:29,810 --> 00:04:34,980
recognize the high-profile customer then

00:04:33,060 --> 00:04:37,050
you know by the time he was into the

00:04:34,980 --> 00:04:40,170
door we will show them the different

00:04:37,050 --> 00:04:43,860
promotion depending on his history with

00:04:40,170 --> 00:04:46,560
a bank so that's the basically the

00:04:43,860 --> 00:04:49,580
environment all right so our to start so

00:04:46,560 --> 00:04:52,680
our data scientist I'll create this app

00:04:49,580 --> 00:04:55,290
originally it's running on our

00:04:52,680 --> 00:04:56,910
environment and it uses a shiny R which

00:04:55,290 --> 00:04:59,820
is a very popular visualization

00:04:56,910 --> 00:05:03,120
dashboard in our environment in such

00:04:59,820 --> 00:05:06,810
dashboards running basically on his

00:05:03,120 --> 00:05:10,620
laptop then eventually he pushed he made

00:05:06,810 --> 00:05:13,170
this app in the running on shiny web as

00:05:10,620 --> 00:05:15,600
well as the I mean also the near the

00:05:13,170 --> 00:05:18,030
edge but still it's a monolithic

00:05:15,600 --> 00:05:20,370
architecture the their services there

00:05:18,030 --> 00:05:23,310
you know basically just some CSV file he

00:05:20,370 --> 00:05:25,650
he put in to analyze the data he he did

00:05:23,310 --> 00:05:28,169
he's changing later into MongoDB but

00:05:25,650 --> 00:05:31,560
still you know it it has a lot of the

00:05:28,169 --> 00:05:34,290
issues as a monolithic application

00:05:31,560 --> 00:05:39,030
architecture like it slow to load and

00:05:34,290 --> 00:05:41,040
also difficult to manage so originally

00:05:39,030 --> 00:05:43,140
our plan was to use the customize our

00:05:41,040 --> 00:05:45,570
build path to push this app to pillow

00:05:43,140 --> 00:05:49,080
Cloud Foundry and there are many RPO

00:05:45,570 --> 00:05:52,290
packs you could find github we use this

00:05:49,080 --> 00:05:55,110
this show on the screen and you can go

00:05:52,290 --> 00:05:57,030
to this link to check it out but I'll

00:05:55,110 --> 00:06:00,419
show some problem as was the benefits or

00:05:57,030 --> 00:06:04,080
using customized build pack in the next

00:06:00,419 --> 00:06:06,900
slide so first of all some of these are

00:06:04,080 --> 00:06:09,960
some of the benefits in using customized

00:06:06,900 --> 00:06:12,419
RPO path in not necessarily just are but

00:06:09,960 --> 00:06:15,450
in general the customized build path in

00:06:12,419 --> 00:06:18,060
they are basically they they design for

00:06:15,450 --> 00:06:21,419
container so you could easily in move

00:06:18,060 --> 00:06:25,020
apps to to the car foundry foundry

00:06:21,419 --> 00:06:26,580
environment it's a friendly to our users

00:06:25,020 --> 00:06:29,220
so you know a lot of what they design

00:06:26,580 --> 00:06:31,620
this a half of the data scientist uses

00:06:29,220 --> 00:06:35,070
are for programming and you know they

00:06:31,620 --> 00:06:37,740
have analytic so it's very friendly to

00:06:35,070 --> 00:06:39,240
them they don't need to talk to the

00:06:37,740 --> 00:06:40,289
developers they could just figure out

00:06:39,240 --> 00:06:42,210
how to push

00:06:40,289 --> 00:06:45,509
the app too colorful change ourselves

00:06:42,210 --> 00:06:48,149
and finally you know for the bill packs

00:06:45,509 --> 00:06:50,819
they think they design like the big

00:06:48,149 --> 00:06:53,039
lightshow previously it's the design for

00:06:50,819 --> 00:06:55,710
container not just for Cloud Foundry but

00:06:53,039 --> 00:06:58,110
also for Hiroko so the apps chance that

00:06:55,710 --> 00:07:01,169
the data size apps who run in both

00:06:58,110 --> 00:07:03,119
environments but that being is that

00:07:01,169 --> 00:07:05,550
there are a lot of four challenges using

00:07:03,119 --> 00:07:08,279
customized RBO path as well so first of

00:07:05,550 --> 00:07:11,460
all there are a lot of full version

00:07:08,279 --> 00:07:14,639
compatibility issues so certain certain

00:07:11,460 --> 00:07:17,759
libraries don't work together and it's

00:07:14,639 --> 00:07:18,649
difficult to figure out for for the end

00:07:17,759 --> 00:07:22,229
user

00:07:18,649 --> 00:07:24,389
until they push the apps to to the cloud

00:07:22,229 --> 00:07:26,669
then there will be a lot of lots of

00:07:24,389 --> 00:07:29,009
difficulties to move move that and

00:07:26,669 --> 00:07:31,319
change the version compatibility you

00:07:29,009 --> 00:07:33,719
know different versions it's just a

00:07:31,319 --> 00:07:35,759
headache a second law that's a evil a

00:07:33,719 --> 00:07:38,610
bigger one you know the extent the

00:07:35,759 --> 00:07:41,629
staging time so by default I think the

00:07:38,610 --> 00:07:44,789
cloud foundry staging is only 15 minutes

00:07:41,629 --> 00:07:47,339
but when you use a bill pass like a

00:07:44,789 --> 00:07:49,349
customized RB okay you know the

00:07:47,339 --> 00:07:53,610
installation of the base our package

00:07:49,349 --> 00:07:56,189
installation of how the our dependency

00:07:53,610 --> 00:07:57,959
libraries how including in the staging

00:07:56,189 --> 00:08:01,680
time so chances that most of the time

00:07:57,959 --> 00:08:04,050
you will exceed this staging time try

00:08:01,680 --> 00:08:08,189
show 15 minutes you of course you could

00:08:04,050 --> 00:08:10,830
do the ESPO in the CF for staging time

00:08:08,189 --> 00:08:12,899
hours as a wow it's a staff time out but

00:08:10,830 --> 00:08:17,039
just a pain they have to remember doing

00:08:12,899 --> 00:08:19,860
that and third one will result in a very

00:08:17,039 --> 00:08:22,259
bulky app you know because when even a

00:08:19,860 --> 00:08:24,629
simple or - pool app you will have to

00:08:22,259 --> 00:08:26,729
install the our package as well as out

00:08:24,629 --> 00:08:29,639
the dependency libraries even you only

00:08:26,729 --> 00:08:30,990
use like a few lines from a dependency

00:08:29,639 --> 00:08:32,550
library you still have to install the

00:08:30,990 --> 00:08:35,490
whole thing and some of the dependency

00:08:32,550 --> 00:08:37,380
library is a pre-baked so a lot of times

00:08:35,490 --> 00:08:39,750
that we found out when after we finish

00:08:37,380 --> 00:08:43,970
our staging the app the drop layers like

00:08:39,750 --> 00:08:48,029
over one gig so it's just like pokey

00:08:43,970 --> 00:08:50,370
then lastly for certain technologies

00:08:48,029 --> 00:08:54,040
doesn't come it doesn't work with

00:08:50,370 --> 00:08:56,940
Congress so one example is the the JDK

00:08:54,040 --> 00:09:00,790
sokar foundering it doesn't support

00:08:56,940 --> 00:09:04,620
OpenJDK period you could work with them

00:09:00,790 --> 00:09:07,209
JRE ways California but JDK is no-go

00:09:04,620 --> 00:09:10,149
second law we found another problem is

00:09:07,209 --> 00:09:12,449
that with is the open MP which is a open

00:09:10,149 --> 00:09:15,759
source massive parallel processing

00:09:12,449 --> 00:09:18,190
paradigm that developer could use to run

00:09:15,759 --> 00:09:20,589
processes parallel way but I think it

00:09:18,190 --> 00:09:23,500
because the Cloud Foundry natively you

00:09:20,589 --> 00:09:26,230
could use the CF scale to you paralyze

00:09:23,500 --> 00:09:29,410
your apps so they probably because of

00:09:26,230 --> 00:09:32,769
that country disabled open MP so if you

00:09:29,410 --> 00:09:35,380
yell are apps using uses local MP as

00:09:32,769 --> 00:09:39,130
well as the the libraries even the

00:09:35,380 --> 00:09:42,250
dependency of your libraries uses open

00:09:39,130 --> 00:09:44,199
MP you will get error when you do the CF

00:09:42,250 --> 00:09:46,779
push is saying something like open out

00:09:44,199 --> 00:09:51,069
here the container doesn't work with the

00:09:46,779 --> 00:09:53,980
open MP and we show that some of these

00:09:51,069 --> 00:09:57,910
library you know that basically uses

00:09:53,980 --> 00:09:59,980
either the JDK as well as the open MP

00:09:57,910 --> 00:10:02,350
technologies and you can see some of

00:09:59,980 --> 00:10:05,829
them are very popular are libraries like

00:10:02,350 --> 00:10:08,310
this are Java on the top mallet is a

00:10:05,829 --> 00:10:10,810
very popular machine learning libraries

00:10:08,310 --> 00:10:13,709
then our so basically that's the

00:10:10,810 --> 00:10:18,639
go-to library if you want to access

00:10:13,709 --> 00:10:20,829
MongoDB which they are yeah on the

00:10:18,639 --> 00:10:23,949
bottom Mac health chain that's also a

00:10:20,829 --> 00:10:25,899
very popular library for the building

00:10:23,949 --> 00:10:27,790
and Markov chain via for machine

00:10:25,899 --> 00:10:29,410
learning so basically you know because

00:10:27,790 --> 00:10:31,839
of these reason we decided we're not

00:10:29,410 --> 00:10:35,680
gonna do the customize our build path

00:10:31,839 --> 00:10:38,439
and it's not at the production level ok

00:10:35,680 --> 00:10:41,199
so another direction is a key you know

00:10:38,439 --> 00:10:43,870
stick with the facial CI build path in

00:10:41,199 --> 00:10:46,120
this example app I'm gonna show it uses

00:10:43,870 --> 00:10:47,980
the Python build path and they worse

00:10:46,120 --> 00:10:51,220
ways to Python to you could change it to

00:10:47,980 --> 00:10:54,100
Python 3 easily it also you know Iran

00:10:51,220 --> 00:10:56,230
who runs the localhost as a starting

00:10:54,100 --> 00:10:59,529
point then testing in PC app death

00:10:56,230 --> 00:11:04,050
the finally push it to the UMP one PCF

00:10:59,529 --> 00:11:04,050
ow public the painful web services

00:11:04,079 --> 00:11:07,779
alright so the in the first scenario

00:11:06,689 --> 00:11:10,480
running

00:11:07,779 --> 00:11:14,499
localhost you can see down the table and

00:11:10,480 --> 00:11:16,959
we use the language Python - so you can

00:11:14,499 --> 00:11:17,829
also you do anaconda Python to either

00:11:16,959 --> 00:11:20,170
ones fine

00:11:17,829 --> 00:11:22,899
if you if you want to change to pythons

00:11:20,170 --> 00:11:26,740
where you have to create a runtime text

00:11:22,899 --> 00:11:29,079
in your app directory then put pointed

00:11:26,740 --> 00:11:31,720
it to Python 3 so that the bill had

00:11:29,079 --> 00:11:35,220
knows which version Python to use then

00:11:31,720 --> 00:11:38,290
secondly you could do the iniquitous rig

00:11:35,220 --> 00:11:41,319
requirement style text to explicitly

00:11:38,290 --> 00:11:42,850
list which libraries as well as the

00:11:41,319 --> 00:11:45,670
version you want and this is a highly

00:11:42,850 --> 00:11:49,839
recommended as as long as your app is

00:11:45,670 --> 00:11:52,209
handy by what over one person then the

00:11:49,839 --> 00:11:54,550
you know there's no end point logging

00:11:52,209 --> 00:11:58,809
then dependency you know basically we

00:11:54,550 --> 00:12:02,290
use the Anaconda virtual environment you

00:11:58,809 --> 00:12:05,189
could also use the just a virtue and for

00:12:02,290 --> 00:12:08,170
you know the version controls was the

00:12:05,189 --> 00:12:10,990
different different virtual environment

00:12:08,170 --> 00:12:13,809
for Python and they also use the local

00:12:10,990 --> 00:12:17,170
Redis service for some of the caching so

00:12:13,809 --> 00:12:20,980
you don't keep curing the mango DB

00:12:17,170 --> 00:12:23,730
database then the star command i used

00:12:20,980 --> 00:12:26,800
the poke head it's a very popular Python

00:12:23,730 --> 00:12:29,829
visualization library it could run

00:12:26,800 --> 00:12:33,279
suppose as you know just like statements

00:12:29,829 --> 00:12:36,939
temples produce images how you could run

00:12:33,279 --> 00:12:40,410
it in entirely as a bouquet server then

00:12:36,939 --> 00:12:45,009
finally the app URL is the localhost

00:12:40,410 --> 00:12:47,620
then second in the PCF dev we switch to

00:12:45,009 --> 00:12:49,660
the Python bill path and you could see

00:12:47,620 --> 00:12:51,699
that you know Python building Doha will

00:12:49,660 --> 00:12:53,050
handle out of dependency like libraries

00:12:51,699 --> 00:12:58,480
as long as you define the requirements

00:12:53,050 --> 00:13:01,089
our text file it's very easy to to do

00:12:58,480 --> 00:13:03,429
the C approach for the end point you

00:13:01,089 --> 00:13:07,269
know you you'll do the typical and CF

00:13:03,429 --> 00:13:09,429
login to the local PCF dev instance then

00:13:07,269 --> 00:13:12,279
when you when you do the dependency you

00:13:09,429 --> 00:13:14,019
have to create a service so first of all

00:13:12,279 --> 00:13:17,800
you gotta make sure the Redis service is

00:13:14,019 --> 00:13:20,300
included if you just go with the default

00:13:17,800 --> 00:13:23,060
PCF dev chances out this

00:13:20,300 --> 00:13:25,910
he Redis is included in your in your

00:13:23,060 --> 00:13:28,550
instance so you could just do a CF Chris

00:13:25,910 --> 00:13:31,430
service providers to to create this the

00:13:28,550 --> 00:13:37,160
service instant we have a iot under

00:13:31,430 --> 00:13:39,260
school Redis that's this part then the

00:13:37,160 --> 00:13:41,840
difference one difference is in the proc

00:13:39,260 --> 00:13:45,470
file you you have defined proc file for

00:13:41,840 --> 00:13:49,220
PCF deaf as well as the PCF this is the

00:13:45,470 --> 00:13:51,830
foul you basically you list the starting

00:13:49,220 --> 00:13:55,520
command so that y'all when y'all app

00:13:51,830 --> 00:14:00,920
gets push PCF opposite of that knows

00:13:55,520 --> 00:14:02,870
which which commands you run so in this

00:14:00,920 --> 00:14:05,120
proc file we think the way you spoke

00:14:02,870 --> 00:14:08,750
here we just use this poke a command to

00:14:05,120 --> 00:14:11,000
start the server and you can see that

00:14:08,750 --> 00:14:14,750
there's some difference so you know in

00:14:11,000 --> 00:14:17,540
the localhost scenario you give put a 0

00:14:14,750 --> 00:14:20,450
a 0 and this part you could change it to

00:14:17,540 --> 00:14:23,740
easiest you could keep it is 0 is 0 or

00:14:20,450 --> 00:14:27,170
you could just use the dollar put then

00:14:23,740 --> 00:14:29,990
this one allow WebSocket outreaching

00:14:27,170 --> 00:14:32,720
this is a important part so I pointed to

00:14:29,990 --> 00:14:35,540
the final you are out this app Sakana

00:14:32,720 --> 00:14:38,390
ROM you could do you know technically

00:14:35,540 --> 00:14:41,270
you could switch this to just awoke are

00:14:38,390 --> 00:14:44,840
just a star but that will oppose the

00:14:41,270 --> 00:14:48,230
security leak well so when you run a web

00:14:44,840 --> 00:14:50,750
app whenever you want to update data and

00:14:48,230 --> 00:14:54,410
after your application you will use the

00:14:50,750 --> 00:14:56,720
web socket to update that then if we if

00:14:54,410 --> 00:15:00,650
you'd allow web socket connection from

00:14:56,720 --> 00:15:02,450
any URL then your application web host

00:15:00,650 --> 00:15:03,050
to basically the denial of service

00:15:02,450 --> 00:15:06,080
attack

00:15:03,050 --> 00:15:08,900
so I because of this reason I highly

00:15:06,080 --> 00:15:12,500
recommend you to explicitly list the URL

00:15:08,900 --> 00:15:15,860
in the web socket or region URL for your

00:15:12,500 --> 00:15:18,920
app then the address list like whatever

00:15:15,860 --> 00:15:22,970
address them yo are y'all act to to run

00:15:18,920 --> 00:15:26,150
out to listen so I gave 0 0 0 0 so that

00:15:22,970 --> 00:15:29,270
means any address this container runs

00:15:26,150 --> 00:15:32,020
well we will use that I here for for the

00:15:29,270 --> 00:15:34,760
listening request

00:15:32,020 --> 00:15:36,620
yeah so that's a pretty much it for the

00:15:34,760 --> 00:15:38,870
for the second one then the third one's

00:15:36,620 --> 00:15:41,660
the pivotal web service the major

00:15:38,870 --> 00:15:45,370
difference here is the port you could

00:15:41,660 --> 00:15:47,450
see that I used this port over here some

00:15:45,370 --> 00:15:50,840
four four four three

00:15:47,450 --> 00:15:54,230
that's because Hilda web servers change

00:15:50,840 --> 00:15:56,990
the default web socket port which is the

00:15:54,230 --> 00:15:59,380
443 they change it to four four four

00:15:56,990 --> 00:16:02,780
three so if you don't explicitly list

00:15:59,380 --> 00:16:04,250
for four for three ports then your app

00:16:02,780 --> 00:16:08,390
won't basically won't work it won't

00:16:04,250 --> 00:16:11,000
update their hands accessor another part

00:16:08,390 --> 00:16:14,390
another difference is that for pill the

00:16:11,000 --> 00:16:17,390
web service it uses a the Redis Clow as

00:16:14,390 --> 00:16:21,770
the plan name for Redis so you have to

00:16:17,390 --> 00:16:24,200
change from P writers to read this cloud

00:16:21,770 --> 00:16:26,030
you have to also provide a plan detail

00:16:24,200 --> 00:16:31,400
so in this case though I'd go with the

00:16:26,030 --> 00:16:33,020
freight here 30 megabytes yes so those

00:16:31,400 --> 00:16:34,640
are the basically the two major

00:16:33,020 --> 00:16:38,540
difference another thing is that because

00:16:34,640 --> 00:16:40,550
I listed the WebSocket to for 443 you

00:16:38,540 --> 00:16:45,110
have to you have to access the app at

00:16:40,550 --> 00:16:49,190
4:43 as well alright so wait that's that

00:16:45,110 --> 00:16:53,780
I'm gonna show you a demo hello sorry I

00:16:49,190 --> 00:16:57,050
have to stand a little taller yes so

00:16:53,780 --> 00:16:59,660
here I I have for my app here Alyssa

00:16:57,050 --> 00:17:02,420
this is the director directory Oh for my

00:16:59,660 --> 00:17:03,800
app iloko foot for app one you see it

00:17:02,420 --> 00:17:05,990
the screen well by the way from

00:17:03,800 --> 00:17:08,570
especially from back ok great

00:17:05,990 --> 00:17:14,120
yes so first of all I'm gonna go with

00:17:08,570 --> 00:17:16,370
this command so I want to show you the

00:17:14,120 --> 00:17:19,700
one thing before I start the server so

00:17:16,370 --> 00:17:22,040
you have to give give this environment

00:17:19,700 --> 00:17:24,230
variable it basically just set up some

00:17:22,040 --> 00:17:26,330
system environment variables so this is

00:17:24,230 --> 00:17:29,450
the Windows version

00:17:26,330 --> 00:17:32,420
I put the Imperial here and the Lena's

00:17:29,450 --> 00:17:34,700
version is as port so you have to you

00:17:32,420 --> 00:17:37,610
know set these the variable up to they

00:17:34,700 --> 00:17:41,870
tell the app which MongoDB instance to

00:17:37,610 --> 00:17:43,880
connect yes so then inside your

00:17:41,870 --> 00:17:45,050
application you access these variables

00:17:43,880 --> 00:17:48,200
names too

00:17:45,050 --> 00:17:53,150
to get the data so that's the localhost

00:17:48,200 --> 00:17:55,990
scenario all right so I'm gonna execute

00:17:53,150 --> 00:17:55,990
this command

00:18:01,830 --> 00:18:11,909
so now you see this app is running on

00:18:05,009 --> 00:18:16,320
localhost then here let me go to the

00:18:11,909 --> 00:18:18,509
demo gateway and you see these other

00:18:16,320 --> 00:18:20,879
devices are available in a demo room and

00:18:18,509 --> 00:18:24,629
you can also go to this nuts to see

00:18:20,879 --> 00:18:29,129
what's really there so so this is the

00:18:24,629 --> 00:18:33,629
demo room so let's see for example I go

00:18:29,129 --> 00:18:39,299
to this so this is another app we built

00:18:33,629 --> 00:18:41,909
for just under the edge style then so

00:18:39,299 --> 00:18:45,029
that we know we could allow the latency

00:18:41,909 --> 00:18:47,609
so let's say if I go to the polite it's

00:18:45,029 --> 00:18:51,440
factory polite so in the video you can

00:18:47,609 --> 00:18:51,440
see it's right here right now it's off

00:18:51,859 --> 00:19:01,859
now let's say if I go to the same

00:18:55,009 --> 00:19:05,239
palette in my app locally then I choose

00:19:01,859 --> 00:19:11,539
control base I'm gonna increase the same

00:19:05,239 --> 00:19:11,539
70 minutes okay

00:19:12,860 --> 00:19:18,679
so right now he sees a zero because it's

00:19:15,470 --> 00:19:21,260
off you can also see here this is the

00:19:18,679 --> 00:19:26,690
app on the edge side that let's say I

00:19:21,260 --> 00:19:28,610
change it to green see there's some

00:19:26,690 --> 00:19:31,549
latency but you see the polite prints on

00:19:28,610 --> 00:19:34,580
screen right now all right I'll give it

00:19:31,549 --> 00:19:42,740
a few seconds so that my app could pick

00:19:34,580 --> 00:19:44,630
it up so the in this app I updated every

00:19:42,740 --> 00:19:47,570
15 seconds there's a little they didn't

00:19:44,630 --> 00:19:50,809
see I I intentionally did a 15 seconds

00:19:47,570 --> 00:19:52,549
so we don't update the app you know

00:19:50,809 --> 00:19:54,529
access the database too frequently

00:19:52,549 --> 00:19:56,960
imagine you know imagine that this apps

00:19:54,529 --> 00:19:58,610
gonna stay in the cloud and you away

00:19:56,960 --> 00:20:01,309
from the edge so there will be uh some

00:19:58,610 --> 00:20:03,519
latency issues we don't want to - but we

00:20:01,309 --> 00:20:05,960
don't want it to update too frequently

00:20:03,519 --> 00:20:08,990
but you see that after a few seconds I

00:20:05,960 --> 00:20:11,149
pick up the you know control basis now

00:20:08,990 --> 00:20:15,289
have four and this is the same number

00:20:11,149 --> 00:20:21,789
here color number four now let's go

00:20:15,289 --> 00:20:25,279
change it to red see now it becomes red

00:20:21,789 --> 00:20:27,889
and after a few seconds this Apple will

00:20:25,279 --> 00:20:31,130
pick up as well the red color is by the

00:20:27,889 --> 00:20:34,490
way it's one so the number would change

00:20:31,130 --> 00:20:36,740
it to one after a few seconds and this

00:20:34,490 --> 00:20:39,289
is the book hey library you know I use

00:20:36,740 --> 00:20:41,929
for visualization so it includes the

00:20:39,289 --> 00:20:45,260
other functionality of poke hey and for

00:20:41,929 --> 00:20:55,429
example I could do the wheel zoom like a

00:20:45,260 --> 00:20:57,019
penny then let's say for I'm if I'm fine

00:20:55,429 --> 00:21:00,980
you know where this and I could just

00:20:57,019 --> 00:21:04,010
save it so that it says into a static

00:21:00,980 --> 00:21:09,799
image like vo later I'll share with my

00:21:04,010 --> 00:21:11,960
colleagues yes so basically you see this

00:21:09,799 --> 00:21:15,070
the app is now picked up alright so

00:21:11,960 --> 00:21:15,070
that's the that's localhost

00:21:16,100 --> 00:21:25,070
now let's take a look at the what's the

00:21:19,430 --> 00:21:27,080
what for the PC app that we just don't

00:21:25,070 --> 00:21:29,840
play a video because it takes a long

00:21:27,080 --> 00:21:33,530
time to start the PC of the VirtualBox

00:21:29,840 --> 00:21:37,250
image so first of all you you see this I

00:21:33,530 --> 00:21:40,880
target the local PC adapt logging as the

00:21:37,250 --> 00:21:46,370
user pass to the default organ space

00:21:40,880 --> 00:21:50,480
then I go to the CF marketplace so you

00:21:46,370 --> 00:21:52,880
see right now we have the P Redis on the

00:21:50,480 --> 00:21:58,010
bottom of the list in the marketplace so

00:21:52,880 --> 00:22:01,400
I create a service he read us like how I

00:21:58,010 --> 00:22:04,640
owed he under school Redis so you see

00:22:01,400 --> 00:22:07,730
now the service gets crazy then I go to

00:22:04,640 --> 00:22:10,460
in my app directory I have a requirement

00:22:07,730 --> 00:22:13,160
stuff tests list the dependencies I have

00:22:10,460 --> 00:22:16,460
manifest that llamo as well as the app

00:22:13,160 --> 00:22:18,530
directory and this is the content of the

00:22:16,460 --> 00:22:21,890
manifest yamo of course I hate them

00:22:18,530 --> 00:22:23,900
login credentials and as such but once

00:22:21,890 --> 00:22:27,230
you replace them with the real

00:22:23,900 --> 00:22:29,420
credential then you could do the CA push

00:22:27,230 --> 00:22:31,820
this is the proc file so as I mentioned

00:22:29,420 --> 00:22:33,920
you you could you could do it on this

00:22:31,820 --> 00:22:37,130
you could do the dollar port and this is

00:22:33,920 --> 00:22:39,110
the host web socket and there's the

00:22:37,130 --> 00:22:44,990
address the apps gonna listen for

00:22:39,110 --> 00:22:46,370
requests so after this is our down we we

00:22:44,990 --> 00:22:53,300
could take a look at a requirement out

00:22:46,370 --> 00:22:55,910
test then do the CI push so

00:22:53,300 --> 00:22:58,700
finally we do just do a simple we see a

00:22:55,910 --> 00:23:03,130
push because we have the manifest all

00:22:58,700 --> 00:23:05,510
right so we work how a IOT apt one then

00:23:03,130 --> 00:23:07,640
it was you know basically create a

00:23:05,510 --> 00:23:10,240
container run through the entire you

00:23:07,640 --> 00:23:13,490
know building the app and push Nia

00:23:10,240 --> 00:23:14,840
now the stages to basically install all

00:23:13,490 --> 00:23:17,860
the dependencies are listed in the

00:23:14,840 --> 00:23:17,860
requirement star text

00:23:28,440 --> 00:23:33,150
yes this part also install all the like

00:23:31,050 --> 00:23:36,030
depend dependency library of my

00:23:33,150 --> 00:23:43,890
dependency libraries then eventually a

00:23:36,030 --> 00:23:46,080
upload droplet now my app is running in

00:23:43,890 --> 00:23:49,380
the cloud so I could go through my web

00:23:46,080 --> 00:23:54,050
GUI to login as admin I mean and check

00:23:49,380 --> 00:23:54,050
my app status as well as running the app

00:24:14,070 --> 00:24:17,940
yeah so this is the same app I'm not

00:24:16,440 --> 00:24:20,430
gonna show the rest now just take them

00:24:17,940 --> 00:24:23,460
time so finally I'm gonna show how we

00:24:20,430 --> 00:24:26,400
run the how we push the app to peel that

00:24:23,460 --> 00:24:29,250
web service so I'm in my app - so this

00:24:26,400 --> 00:24:31,950
is a fancier app so I used I took the

00:24:29,250 --> 00:24:34,820
original app one now I add some CSS

00:24:31,950 --> 00:24:38,880
style as well as well as the Java square

00:24:34,820 --> 00:24:43,170
libraries then I let's take a look at

00:24:38,880 --> 00:24:45,210
the manifest so this is the manifest for

00:24:43,170 --> 00:24:50,690
app - it's very similar to what you

00:24:45,210 --> 00:24:50,690
think previously for PC app dev scenario

00:24:50,930 --> 00:24:55,320
so okay so they invite the right tree I

00:24:53,550 --> 00:25:00,330
first thought first of all I make sure

00:24:55,320 --> 00:25:02,850
I'm targeting the right instance so you

00:25:00,330 --> 00:25:05,850
see I'm telling him the pill toe web

00:25:02,850 --> 00:25:08,220
service endpoint now that's the

00:25:05,850 --> 00:25:11,730
basically do a simple C approach because

00:25:08,220 --> 00:25:13,380
I already update my manifest make sure

00:25:11,730 --> 00:25:18,450
it works as well as the requirements

00:25:13,380 --> 00:25:21,180
that text so let's do a CF push okay see

00:25:18,450 --> 00:25:25,640
now we have creating a this a coyote up

00:25:21,180 --> 00:25:29,070
to perform for three that's the name

00:25:25,640 --> 00:25:34,550
but the final obstacle on rung I owed he

00:25:29,070 --> 00:25:34,550
act 2000 apps that IO at this URL

00:25:38,770 --> 00:25:43,990
you see this is very similar to PCR

00:25:41,230 --> 00:25:50,620
dubbing as in terms of for pushing the

00:25:43,990 --> 00:25:52,480
app little differences that you see the

00:25:50,620 --> 00:25:55,780
the bill Pallister basically accessing

00:25:52,480 --> 00:25:59,980
the some temporary directory for getting

00:25:55,780 --> 00:26:03,040
some of the base packages so now that

00:25:59,980 --> 00:26:07,360
stood in the requirement stacks there's

00:26:03,040 --> 00:26:10,240
a dependency library you see installs a

00:26:07,360 --> 00:26:13,600
lot more libraries because a lot of them

00:26:10,240 --> 00:26:17,430
define as dependency for my dependency

00:26:13,600 --> 00:26:17,430
library so it goes to other iterations

00:26:37,230 --> 00:26:41,029
in now it's uploading droplet

00:26:56,580 --> 00:27:02,160
it's not starting the app and finally

00:26:59,850 --> 00:27:04,560
it's running so I could do the CF apps

00:27:02,160 --> 00:27:07,140
make sure it's listening so you see that

00:27:04,560 --> 00:27:11,790
now this app is started and you could go

00:27:07,140 --> 00:27:13,800
to this URL I mentioned earlier make

00:27:11,790 --> 00:27:18,720
sure to add a photo for 3por number and

00:27:13,800 --> 00:27:21,330
it's a HTTP so now it's the app - with

00:27:18,720 --> 00:27:23,880
some style and you could go to for

00:27:21,330 --> 00:27:26,940
example let's say your demo lab I'm

00:27:23,880 --> 00:27:27,780
gonna go to the motor and change it to

00:27:26,940 --> 00:27:32,760
mean

00:27:27,780 --> 00:27:36,270
check the RPM so right now you see this

00:27:32,760 --> 00:27:40,740
though the motor rpm so it's fun with

00:27:36,270 --> 00:27:45,260
zero now it's a 500 yep so let's go to

00:27:40,740 --> 00:27:45,260
the same one that's the dist motor

00:27:51,750 --> 00:27:58,860
then demo room motor so he see it's

00:27:55,800 --> 00:28:01,890
running and I say right now it's 500 I'm

00:27:58,860 --> 00:28:04,190
changing to 250 and let's see what

00:28:01,890 --> 00:28:04,190
happens

00:28:11,370 --> 00:28:18,270
so we see now is the space gradually

00:28:14,490 --> 00:28:20,690
will decrease right so that's pretty

00:28:18,270 --> 00:28:20,690
much it

00:28:26,180 --> 00:28:34,130
this is a customer 360 app I mentioned

00:28:30,170 --> 00:28:36,800
earlier so I'm gonna not gonna show the

00:28:34,130 --> 00:28:38,840
detail but basically we mimic this

00:28:36,800 --> 00:28:40,640
scenario as the customer walking into

00:28:38,840 --> 00:28:42,500
the bank and then Amelie such

00:28:40,640 --> 00:28:44,900
information like license plate is picked

00:28:42,500 --> 00:28:48,140
up by the bank to highlight who he is

00:28:44,900 --> 00:28:49,790
and also what what he's spending habits

00:28:48,140 --> 00:28:52,340
oh so we they could do the target

00:28:49,790 --> 00:28:56,090
marketing all right so here's some of

00:28:52,340 --> 00:28:58,390
the next steps at my company so first of

00:28:56,090 --> 00:29:01,130
all where is 10 IOT use cases we also

00:28:58,390 --> 00:29:03,050
creating deep learning use case that you

00:29:01,130 --> 00:29:06,080
know we are one thing we work is the

00:29:03,050 --> 00:29:09,770
greatest GPU as a service for pillow

00:29:06,080 --> 00:29:12,860
cloud foundry then we also work working

00:29:09,770 --> 00:29:15,170
out the edge computes they come back you

00:29:12,860 --> 00:29:18,200
know at tomorrow I think my colleague

00:29:15,170 --> 00:29:21,110
Barton George has a Jack function so he

00:29:18,200 --> 00:29:22,970
you will learn what we have done and

00:29:21,110 --> 00:29:25,490
what we what's planning on the Rome app

00:29:22,970 --> 00:29:27,410
and then finally of course we kind of

00:29:25,490 --> 00:29:29,600
design the next-gen I owe his solution

00:29:27,410 --> 00:29:33,110
in fact yesterday Michael Tao announced

00:29:29,600 --> 00:29:34,760
that at Dow you know we will spend 1

00:29:33,110 --> 00:29:40,160
billion dollars for the next three years

00:29:34,760 --> 00:29:42,310
just for IOT investment alright and yeah

00:29:40,160 --> 00:29:45,020
you can come talk to me and after the

00:29:42,310 --> 00:29:48,680
session I don't think we have time for

00:29:45,020 --> 00:29:50,710
for FAQ but make sure to talk to me when

00:29:48,680 --> 00:29:54,759
you have any questions thank you

00:29:50,710 --> 00:29:54,759

YouTube URL: https://www.youtube.com/watch?v=UL6S340toNA


