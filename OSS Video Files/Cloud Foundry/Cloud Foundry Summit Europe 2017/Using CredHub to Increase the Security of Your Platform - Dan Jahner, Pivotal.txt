Title: Using CredHub to Increase the Security of Your Platform - Dan Jahner, Pivotal
Publication date: 2017-10-18
Playlist: Cloud Foundry Summit Europe 2017
Description: 
	Using CredHub to Increase the Security of Your Platform - Dan Jahner, Pivotal

CredHub is a Cloud Foundry incubator product focused on credential management. It aims to centralize and secure credential generation, storage, lifecycle management and access control in Cloud Foundry. 

In this session, Dan will demonstrate how to implement CredHub in an environment and describe the resulting change in security posture after making these changes. He will also review work in progress and future goals of the product.

About Dan Jahner
Dan is a Senior Product Manager at Pivotal where he currently manages CredHub, an open source Cloud Foundry Foundation product focused on credential management. He has a passion for increasing security without negatively affecting user experience.
Captions: 
	00:00:00,000 --> 00:00:08,130
all right good morning everyone I think

00:00:03,810 --> 00:00:09,960
we can get started just as an intro my

00:00:08,130 --> 00:00:12,509
name is Danny honor I'm a product

00:00:09,960 --> 00:00:16,190
manager at pivotal and today I'm gonna

00:00:12,509 --> 00:00:19,020
be talking about cred hub which is a

00:00:16,190 --> 00:00:22,260
product that my team and I created last

00:00:19,020 --> 00:00:23,580
year so a quick review of what we're

00:00:22,260 --> 00:00:26,430
gonna be going over in the next 30

00:00:23,580 --> 00:00:28,560
minutes we'll start with the basics of

00:00:26,430 --> 00:00:31,800
why we created this product what

00:00:28,560 --> 00:00:34,739
problems it solves and how it does that

00:00:31,800 --> 00:00:35,820
and then I have a quick mention of where

00:00:34,739 --> 00:00:38,730
we're going in the future

00:00:35,820 --> 00:00:41,460
what we see in our roadmap and then we

00:00:38,730 --> 00:00:45,030
can wrap up with any questions if we

00:00:41,460 --> 00:00:49,289
have time alright so let's start with

00:00:45,030 --> 00:00:51,300
the basic why create credit I think the

00:00:49,289 --> 00:00:54,199
primary motivation this may be obvious

00:00:51,300 --> 00:00:57,300
for some of you and the audience but is

00:00:54,199 --> 00:01:01,050
the the simple fact that leaking a

00:00:57,300 --> 00:01:03,660
credential can be catastrophic just

00:01:01,050 --> 00:01:07,290
grabbing a few headlines recently from

00:01:03,660 --> 00:01:11,760
the news we see here there are varying

00:01:07,290 --> 00:01:13,799
ways in which this can hit it can be bad

00:01:11,760 --> 00:01:17,430
passwords it can be committing them to

00:01:13,799 --> 00:01:18,869
github repos people fishing them and

00:01:17,430 --> 00:01:21,270
getting access to them there are all

00:01:18,869 --> 00:01:25,590
sorts of ways at which people can get

00:01:21,270 --> 00:01:28,380
access to your credentials now tying

00:01:25,590 --> 00:01:30,509
that back to cloud foundry as I'm sure a

00:01:28,380 --> 00:01:33,360
lot of the operators in the audience

00:01:30,509 --> 00:01:37,259
know cloud foundry has a lot of

00:01:33,360 --> 00:01:41,159
credentials which introduces a lot of

00:01:37,259 --> 00:01:44,220
risk along with it this is a partial

00:01:41,159 --> 00:01:48,060
dump of the credentials needed for a cf2

00:01:44,220 --> 00:01:49,710
employment I cut it off short because I

00:01:48,060 --> 00:01:54,829
didn't want to make the text any smaller

00:01:49,710 --> 00:01:57,390
or go into multiple slides so given the

00:01:54,829 --> 00:01:59,790
amount of risk involved with having all

00:01:57,390 --> 00:02:02,159
of those credentials I think it's pretty

00:01:59,790 --> 00:02:07,099
plain to see that manually managing

00:02:02,159 --> 00:02:10,110
those is hard it's a complex problem so

00:02:07,099 --> 00:02:14,110
that leaves us with a really bad choice

00:02:10,110 --> 00:02:16,520
which is we can either

00:02:14,110 --> 00:02:19,700
dedicate the time and the expertise to

00:02:16,520 --> 00:02:23,000
managing that or we can maybe cut some

00:02:19,700 --> 00:02:26,180
corners and say that we don't have

00:02:23,000 --> 00:02:29,200
capacity or expertise and end up with a

00:02:26,180 --> 00:02:31,160
not so secure platform configuration

00:02:29,200 --> 00:02:35,270
obviously we don't like that choice

00:02:31,160 --> 00:02:37,670
right we our focus in build incredibly

00:02:35,270 --> 00:02:41,120
bring automation to credential

00:02:37,670 --> 00:02:46,670
management so that in Cloud Foundry it's

00:02:41,120 --> 00:02:48,380
easy to configure a secure platform all

00:02:46,670 --> 00:02:51,770
right so the next question we get to is

00:02:48,380 --> 00:02:53,930
what is cred hub so one of the the

00:02:51,770 --> 00:02:56,750
defining product goals that we have is

00:02:53,930 --> 00:03:00,230
we want this to be the central point of

00:02:56,750 --> 00:03:02,840
control for credential generation

00:03:00,230 --> 00:03:05,540
storage rotation and access control and

00:03:02,840 --> 00:03:07,700
Cloud Foundry that's a really dense

00:03:05,540 --> 00:03:11,270
sentence so let me just jump into a few

00:03:07,700 --> 00:03:13,190
of those points we think a central point

00:03:11,270 --> 00:03:16,070
of control is really important because

00:03:13,190 --> 00:03:18,770
we don't want to duplicate this effort

00:03:16,070 --> 00:03:21,620
across all the various components it

00:03:18,770 --> 00:03:24,290
also provides good consistency

00:03:21,620 --> 00:03:26,360
throughout the platform pulling this

00:03:24,290 --> 00:03:29,410
into a single component we don't have to

00:03:26,360 --> 00:03:33,350
re-implement that that logic and it also

00:03:29,410 --> 00:03:37,010
reduces the audit scope if for example

00:03:33,350 --> 00:03:39,170
your CTO comes to you and says we're

00:03:37,010 --> 00:03:41,060
doing this standard the security

00:03:39,170 --> 00:03:42,740
standard make sure that all of the

00:03:41,060 --> 00:03:45,440
encryption algorithms used throughout

00:03:42,740 --> 00:03:47,840
the platform meet this standard it's a

00:03:45,440 --> 00:03:51,890
hard problem when you have 20

00:03:47,840 --> 00:03:54,080
implementations of crypto as far as

00:03:51,890 --> 00:03:55,970
generation goes we want to reduce the

00:03:54,080 --> 00:03:59,870
burden of manually generating these

00:03:55,970 --> 00:04:03,740
things just as an ease of automation for

00:03:59,870 --> 00:04:06,260
operators we also want to get into the

00:04:03,740 --> 00:04:09,170
weeds on our side and implement some

00:04:06,260 --> 00:04:12,530
good defaults so you don't have to worry

00:04:09,170 --> 00:04:15,470
about things like secure random number

00:04:12,530 --> 00:04:18,109
generation algorithms or certificate

00:04:15,470 --> 00:04:19,910
signing hash algorithms or anything like

00:04:18,109 --> 00:04:21,710
that

00:04:19,910 --> 00:04:24,440
storage here alludes to the fact that we

00:04:21,710 --> 00:04:25,670
need to encrypt any data that's

00:04:24,440 --> 00:04:28,280
sensitive before we

00:04:25,670 --> 00:04:30,820
store it as I've said a couple times

00:04:28,280 --> 00:04:36,170
already cryptography is a hard problem

00:04:30,820 --> 00:04:38,780
we have a staff cryptographer who if at

00:04:36,170 --> 00:04:41,600
any point we think cryptography is easy

00:04:38,780 --> 00:04:45,710
we go talk to him and he sets us

00:04:41,600 --> 00:04:47,630
straight so that's great and again

00:04:45,710 --> 00:04:51,650
reducing the burden of reimplemented

00:04:47,630 --> 00:04:53,630
ness in each component rotation

00:04:51,650 --> 00:04:56,360
obviously is a really core component of

00:04:53,630 --> 00:04:58,360
managing credentials securely rotating

00:04:56,360 --> 00:05:02,990
all the credentials in Clapp foundry is

00:04:58,360 --> 00:05:05,030
a huge pain it's a painful process so

00:05:02,990 --> 00:05:07,630
again going back to focusing on

00:05:05,030 --> 00:05:10,520
automation to solve these problems

00:05:07,630 --> 00:05:11,300
our goal at a certain point and we're

00:05:10,520 --> 00:05:14,210
not there yet

00:05:11,300 --> 00:05:15,320
but our goal is to make this so that we

00:05:14,210 --> 00:05:19,660
can do this transparently and

00:05:15,320 --> 00:05:23,410
automatically logging is a really basic

00:05:19,660 --> 00:05:26,060
essential part of a secure environment

00:05:23,410 --> 00:05:27,740
especially if you're you're going for a

00:05:26,060 --> 00:05:30,650
standard compliance you need to make

00:05:27,740 --> 00:05:33,440
sure that for example anytime you have

00:05:30,650 --> 00:05:36,800
access or modify data you have a log of

00:05:33,440 --> 00:05:39,440
that event and that can go to the extent

00:05:36,800 --> 00:05:41,440
of saying if you can't log it you

00:05:39,440 --> 00:05:43,970
shouldn't be able to access it like

00:05:41,440 --> 00:05:45,800
sacrificing availability for logging is

00:05:43,970 --> 00:05:49,310
certainly a thing depending on how

00:05:45,800 --> 00:05:51,740
secure your environment is all right and

00:05:49,310 --> 00:05:52,700
of course access control so because

00:05:51,740 --> 00:05:54,440
we're dealing with something like

00:05:52,700 --> 00:05:58,130
credentials we need to have sufficiently

00:05:54,440 --> 00:06:00,350
granular access controls so that for

00:05:58,130 --> 00:06:05,540
example credentials for application a

00:06:00,350 --> 00:06:06,830
cannot be read by application B all

00:06:05,540 --> 00:06:09,320
right so the final point that I want to

00:06:06,830 --> 00:06:12,430
make is our intention here is to solve

00:06:09,320 --> 00:06:15,950
this these specific concerns

00:06:12,430 --> 00:06:18,080
specifically for Cloud Foundry so we

00:06:15,950 --> 00:06:21,500
don't necessarily have an intention to

00:06:18,080 --> 00:06:24,320
make this the new generic credential

00:06:21,500 --> 00:06:27,260
management service we're really looking

00:06:24,320 --> 00:06:29,720
at this from the lens of saying what

00:06:27,260 --> 00:06:32,450
problems exist in Cloud Foundry and how

00:06:29,720 --> 00:06:34,010
can we solve those problems so it's a

00:06:32,450 --> 00:06:37,490
little bit of a different view on how

00:06:34,010 --> 00:06:40,350
we're how we're developing these things

00:06:37,490 --> 00:06:44,520
all right so I've covered the the why

00:06:40,350 --> 00:06:46,200
and sort of what it is so here comes the

00:06:44,520 --> 00:06:49,280
dangerous part where I try to do some

00:06:46,200 --> 00:06:52,940
live demos and hope everything works out

00:06:49,280 --> 00:06:57,030
to set the stage I'll go through and

00:06:52,940 --> 00:06:58,740
deploy a concourse deployment throughout

00:06:57,030 --> 00:07:00,510
that I'll show you how you set up your

00:06:58,740 --> 00:07:02,880
director so that you can use credit hub

00:07:00,510 --> 00:07:05,480
how that transforms the way that

00:07:02,880 --> 00:07:08,670
manifests look and how they're processed

00:07:05,480 --> 00:07:11,790
and then after that I'll go through and

00:07:08,670 --> 00:07:15,270
update the concourse deployments so that

00:07:11,790 --> 00:07:19,590
it can also pull credentials directly

00:07:15,270 --> 00:07:22,010
from credit let me switch over quickly

00:07:19,590 --> 00:07:22,010
here

00:07:28,080 --> 00:07:32,580
all right can you all see that good

00:07:32,129 --> 00:07:36,680
enough

00:07:32,580 --> 00:07:38,340
great all right so let's start from the

00:07:36,680 --> 00:07:40,949
director itself

00:07:38,340 --> 00:07:42,810
so this is already deployed but I just

00:07:40,949 --> 00:07:44,280
want to quickly show what you do to your

00:07:42,810 --> 00:07:47,610
director when you do your boss unit

00:07:44,280 --> 00:07:50,189
deploy or your boss create and to allow

00:07:47,610 --> 00:07:52,289
it to leverage credd hug so it's really

00:07:50,189 --> 00:07:55,560
basic configuration you just include the

00:07:52,289 --> 00:07:58,050
credibly release once you've got that

00:07:55,560 --> 00:08:01,530
release there's some basic configuration

00:07:58,050 --> 00:08:03,810
for the job really straightforward stuff

00:08:01,530 --> 00:08:07,020
like how do you authenticate with cred

00:08:03,810 --> 00:08:12,030
hub where do you store the data that's

00:08:07,020 --> 00:08:16,919
generated and then last how do you

00:08:12,030 --> 00:08:19,169
secure that data and then once we've

00:08:16,919 --> 00:08:22,229
included that there's a simple change to

00:08:19,169 --> 00:08:24,569
the director configuration so we just

00:08:22,229 --> 00:08:28,560
have to enable what they're calling the

00:08:24,569 --> 00:08:33,870
config server integration and then point

00:08:28,560 --> 00:08:35,190
it at cred hub to use that all right so

00:08:33,870 --> 00:08:38,190
I've already deployed my director

00:08:35,190 --> 00:08:41,640
because that takes forever so now we're

00:08:38,190 --> 00:08:44,880
gonna jump forward a little bit and take

00:08:41,640 --> 00:08:49,050
a look at a current state deployment if

00:08:44,880 --> 00:08:50,820
you weren't using credit all right so if

00:08:49,050 --> 00:08:52,920
I scroll down a little bit a few things

00:08:50,820 --> 00:08:55,019
pop out at me right we've got all these

00:08:52,920 --> 00:08:58,800
credentials in plain text which may not

00:08:55,019 --> 00:09:00,269
be a very surprising to many of you

00:08:58,800 --> 00:09:05,240
because this is just sort of how it

00:09:00,269 --> 00:09:07,260
works if we look here we've got

00:09:05,240 --> 00:09:10,170
authentication details for concourse

00:09:07,260 --> 00:09:12,360
we've got a TLS private key there which

00:09:10,170 --> 00:09:16,260
is great and then we've got database

00:09:12,360 --> 00:09:19,890
credentials as well so to drive through

00:09:16,260 --> 00:09:22,829
drive home some of these concerns of why

00:09:19,890 --> 00:09:26,519
this is problematic the fact that these

00:09:22,829 --> 00:09:28,949
exist in plain text means this manifests

00:09:26,519 --> 00:09:32,459
itself sort of elevates its own security

00:09:28,949 --> 00:09:35,850
level to the same level as the contained

00:09:32,459 --> 00:09:37,980
credentials so you can't just grab this

00:09:35,850 --> 00:09:40,800
manifest committed to get in

00:09:37,980 --> 00:09:44,640
a hey colleague can you update this

00:09:40,800 --> 00:09:46,440
redeploy this change this because the

00:09:44,640 --> 00:09:48,510
fact that it contains credentials means

00:09:46,440 --> 00:09:51,450
you have to control it

00:09:48,510 --> 00:09:53,820
another problem with that is you sort of

00:09:51,450 --> 00:09:58,590
lose control of these credentials right

00:09:53,820 --> 00:10:01,500
like the this password could exist in

00:09:58,590 --> 00:10:03,240
many areas you're sharing this sort of

00:10:01,500 --> 00:10:05,130
offline because you can't check it in

00:10:03,240 --> 00:10:07,560
the source control so who knows who has

00:10:05,130 --> 00:10:12,060
access to this credential it's hard to

00:10:07,560 --> 00:10:14,670
tell from the the certificate standpoint

00:10:12,060 --> 00:10:17,400
and immediate concern that jumps out to

00:10:14,670 --> 00:10:20,040
me if I'm an operator is I don't like

00:10:17,400 --> 00:10:22,830
generating certificates I like managing

00:10:20,040 --> 00:10:25,770
certificates or a CAS or any of that

00:10:22,830 --> 00:10:27,840
junk so from a generation perspective

00:10:25,770 --> 00:10:31,590
this is painful

00:10:27,840 --> 00:10:36,810
right um and then finally if I jump out

00:10:31,590 --> 00:10:39,180
of this and take a look at a really

00:10:36,810 --> 00:10:40,830
helpful Bosch command here because I've

00:10:39,180 --> 00:10:44,700
already deployed this if I do Bosch

00:10:40,830 --> 00:10:47,100
manifest and just to reiterate any any

00:10:44,700 --> 00:10:50,090
of your operators can do this

00:10:47,100 --> 00:10:52,740
look there are my passwords again so

00:10:50,090 --> 00:10:55,500
they also like the implication of that

00:10:52,740 --> 00:10:57,870
is Bosch because it needs to be able to

00:10:55,500 --> 00:11:00,590
resurrect these VMs needs the full state

00:10:57,870 --> 00:11:02,400
of the world so that means in this case

00:11:00,590 --> 00:11:06,930
storing the credentials in their

00:11:02,400 --> 00:11:09,000
database as well alright so let's look

00:11:06,930 --> 00:11:10,980
at future state right so we don't like

00:11:09,000 --> 00:11:12,690
any of that stuff that I just talked

00:11:10,980 --> 00:11:16,110
about what does this look like in a

00:11:12,690 --> 00:11:18,690
credible so I can jump back down to my

00:11:16,110 --> 00:11:21,510
configs and there's some simple changes

00:11:18,690 --> 00:11:22,980
here so instead of actually including

00:11:21,510 --> 00:11:27,930
the credential we just include a

00:11:22,980 --> 00:11:31,380
placeholder which says essentially when

00:11:27,930 --> 00:11:35,190
you need this credential Bosch contact

00:11:31,380 --> 00:11:36,720
credit up and ask for it by this name we

00:11:35,190 --> 00:11:39,450
see that that's replaced for each of

00:11:36,720 --> 00:11:41,850
these so one of the immediate benefits

00:11:39,450 --> 00:11:45,240
that jumps out is you can check this

00:11:41,850 --> 00:11:47,310
into a public github repo in fact that's

00:11:45,240 --> 00:11:49,649
exactly what we're doing with CF

00:11:47,310 --> 00:11:54,360
deployment which is this

00:11:49,649 --> 00:11:55,800
massive CF deployment manifest and we

00:11:54,360 --> 00:11:59,819
can collaborate really well on that

00:11:55,800 --> 00:12:01,139
because there are no credentials and

00:11:59,819 --> 00:12:03,600
then the other thing that I'll point out

00:12:01,139 --> 00:12:06,600
here is these certificates that are

00:12:03,600 --> 00:12:11,819
referenced are actually not pre-existing

00:12:06,600 --> 00:12:14,209
so if we scroll up to this variable

00:12:11,819 --> 00:12:17,610
section essentially what this is is a

00:12:14,209 --> 00:12:19,949
spec that says how you want these

00:12:17,610 --> 00:12:23,670
credentials to be generated when the

00:12:19,949 --> 00:12:27,420
deployment happens so some things are

00:12:23,670 --> 00:12:28,740
super basic like password I don't care

00:12:27,420 --> 00:12:31,559
what the value is just give me a

00:12:28,740 --> 00:12:34,439
password and put it in but then we can

00:12:31,559 --> 00:12:37,139
also do some more structured and more

00:12:34,439 --> 00:12:40,860
advanced stuff like setting up sort of

00:12:37,139 --> 00:12:43,769
like a pseudo PKI for this deployment so

00:12:40,860 --> 00:12:47,100
in this case I'm generating a CA

00:12:43,769 --> 00:12:49,559
certificate here and then right below it

00:12:47,100 --> 00:12:53,399
I'm generating a certificate which is

00:12:49,559 --> 00:12:56,040
signed by that CA so it's really really

00:12:53,399 --> 00:12:57,449
simple stuff also again I'll say really

00:12:56,040 --> 00:13:01,110
powerful if you're lucky on CF

00:12:57,449 --> 00:13:03,809
deployment how they've got dozens of

00:13:01,110 --> 00:13:05,670
certificates and instead of doing this

00:13:03,809 --> 00:13:09,089
out-of-band you can you can just do it

00:13:05,670 --> 00:13:13,459
in your manifest alright so let me

00:13:09,089 --> 00:13:17,089
quickly deploy this and it should be

00:13:13,459 --> 00:13:17,089
very quick I promise

00:13:26,520 --> 00:13:34,110
all right I didn't lie so that it looks

00:13:32,130 --> 00:13:37,320
like a no op but it did actually do

00:13:34,110 --> 00:13:39,000
something so if we go back to our

00:13:37,320 --> 00:13:41,460
favorite command here for stealing

00:13:39,000 --> 00:13:44,400
credentials from a boss deployment and

00:13:41,460 --> 00:13:47,490
look at the Bosch manifest we'll see

00:13:44,400 --> 00:13:49,890
here that we no longer have these

00:13:47,490 --> 00:13:51,900
credentials in the manifest because

00:13:49,890 --> 00:13:55,680
Bosch now doesn't need to store them

00:13:51,900 --> 00:13:57,060
because it knows it has this contract

00:13:55,680 --> 00:13:58,740
with credit hub that says whenever I

00:13:57,060 --> 00:14:00,270
need them all asks for them so I don't

00:13:58,740 --> 00:14:04,100
need to actually store the credentials I

00:14:00,270 --> 00:14:04,100
can just store the reference to them

00:14:05,540 --> 00:14:11,340
yeah so that's the the sort of

00:14:08,550 --> 00:14:15,360
before-and-after of how you just do this

00:14:11,340 --> 00:14:18,000
with any old Bosch deployment so let me

00:14:15,360 --> 00:14:19,830
move on to the next one or actually

00:14:18,000 --> 00:14:25,760
before we do that let me just jump back

00:14:19,830 --> 00:14:28,170
to the presentation quickly all right so

00:14:25,760 --> 00:14:30,150
these are the the problems that we

00:14:28,170 --> 00:14:32,640
identified manifests must be controlled

00:14:30,150 --> 00:14:37,740
we saw how that could change generation

00:14:32,640 --> 00:14:41,130
is much simpler also its Bosch is no

00:14:37,740 --> 00:14:45,000
longer storing these and I didn't really

00:14:41,130 --> 00:14:48,390
touch on rotation but it's it's sort of

00:14:45,000 --> 00:14:49,980
a subtle variation here because the fact

00:14:48,390 --> 00:14:51,090
that we're storing a reference to a

00:14:49,980 --> 00:14:54,060
credential instead of the actual

00:14:51,090 --> 00:14:55,950
credential value itself means you can

00:14:54,060 --> 00:14:57,600
actually rotate those underlying values

00:14:55,950 --> 00:15:02,010
without changing the structure of the

00:14:57,600 --> 00:15:03,630
manifest so it's pretty simple to to

00:15:02,010 --> 00:15:06,090
rotate something because you just

00:15:03,630 --> 00:15:08,730
redeploy the exact same manifest same

00:15:06,090 --> 00:15:12,780
references just rotating the underlying

00:15:08,730 --> 00:15:17,970
value and then of course we reintroduce

00:15:12,780 --> 00:15:20,280
logging and control as well in the

00:15:17,970 --> 00:15:24,030
credible occation because it all goes

00:15:20,280 --> 00:15:27,540
through that we we have that control all

00:15:24,030 --> 00:15:31,530
right so let's move on to the next quick

00:15:27,540 --> 00:15:33,180
demo here which is a more recent update

00:15:31,530 --> 00:15:37,890
here in integration that we've done with

00:15:33,180 --> 00:15:39,550
concourse for pipelines so I'm gonna go

00:15:37,890 --> 00:15:43,779
through and quickly

00:15:39,550 --> 00:15:50,470
deploy this and this will be a real

00:15:43,779 --> 00:15:53,220
deployments all start it and then switch

00:15:50,470 --> 00:15:53,220
to another window

00:16:01,699 --> 00:16:10,220
actually do they do yes all right great

00:16:05,929 --> 00:16:12,199
so if we jump down the one update that

00:16:10,220 --> 00:16:14,629
we need to do here you're gonna see a

00:16:12,199 --> 00:16:16,089
lot of analogs between this and the way

00:16:14,629 --> 00:16:18,199
that we do this integration with Bosh

00:16:16,089 --> 00:16:21,169
but the one to update that we need to do

00:16:18,199 --> 00:16:22,819
here with Concours is tell it to use

00:16:21,169 --> 00:16:25,609
credit up and tell it where credit

00:16:22,819 --> 00:16:28,359
exists and how to authenticate to it so

00:16:25,609 --> 00:16:37,850
I've made that update here in this

00:16:28,359 --> 00:16:41,299
manifest and then a very quick second

00:16:37,850 --> 00:16:44,600
that will update and to be connectional

00:16:41,299 --> 00:16:47,839
let me just move on to the pipeline's

00:16:44,600 --> 00:16:50,600
here all right so we're gonna do another

00:16:47,839 --> 00:16:53,569
before and after this time with concours

00:16:50,600 --> 00:16:56,929
pipelines so if we open up this concours

00:16:53,569 --> 00:16:59,449
pipeline manifest we'll see again same

00:16:56,929 --> 00:16:59,959
problems and this should be pretty

00:16:59,449 --> 00:17:03,470
familiar

00:16:59,959 --> 00:17:07,429
we've got credentials that exist got SSH

00:17:03,470 --> 00:17:11,299
private keys some AWS credentials the

00:17:07,429 --> 00:17:14,630
worst of all so obviously you're not

00:17:11,299 --> 00:17:18,319
going to want to check this into your

00:17:14,630 --> 00:17:21,079
public it hub repo and if you do I can

00:17:18,319 --> 00:17:25,569
guarantee somebody will spin up a lot of

00:17:21,079 --> 00:17:28,429
machines in very quick order alright so

00:17:25,569 --> 00:17:32,419
looks like our deployment succeeded here

00:17:28,429 --> 00:17:36,490
which is always a good sign let me set

00:17:32,419 --> 00:17:36,490
this pipeline

00:17:41,070 --> 00:17:43,130
Oh

00:17:43,680 --> 00:17:46,520
got a flag

00:17:49,920 --> 00:17:54,570
all right so I set that one of the

00:17:52,470 --> 00:17:56,790
things that jumps out me it out at me of

00:17:54,570 --> 00:17:59,220
course is the fact that in the diff it's

00:17:56,790 --> 00:18:01,680
showing all my credentials again which

00:17:59,220 --> 00:18:05,160
is not a good sign but that's how it

00:18:01,680 --> 00:18:07,710
exists in the manifest so that's life so

00:18:05,160 --> 00:18:10,830
we've got the pipeline here it looks

00:18:07,710 --> 00:18:13,860
good but let's look at how we can update

00:18:10,830 --> 00:18:18,830
this so that we don't have to do the

00:18:13,860 --> 00:18:18,830
same credential problem with Concours

00:18:19,070 --> 00:18:25,890
all right so I'm open opening this this

00:18:22,560 --> 00:18:28,560
is after I've a updated this to use the

00:18:25,890 --> 00:18:31,830
credit int aggression we'll see a really

00:18:28,560 --> 00:18:34,410
similar syntax we implemented this

00:18:31,830 --> 00:18:39,660
around the same time so it's a pretty

00:18:34,410 --> 00:18:44,940
similar experience I can reference here

00:18:39,660 --> 00:18:46,650
these client credentials and the private

00:18:44,940 --> 00:18:49,140
keys are gone and the AWS credentials

00:18:46,650 --> 00:18:51,690
are gone so all of this is gone we can

00:18:49,140 --> 00:18:54,600
check this into github which is the

00:18:51,690 --> 00:18:58,410
favorite thing to do with manifests all

00:18:54,600 --> 00:19:01,230
right so let's go through and very

00:18:58,410 --> 00:19:08,550
quickly before we set that let me show

00:19:01,230 --> 00:19:11,370
you the analog in Concours to the Bosch

00:19:08,550 --> 00:19:14,880
manifest command that we did in in Bosch

00:19:11,370 --> 00:19:19,050
so I look at this because this is set I

00:19:14,880 --> 00:19:21,120
can get pipeline and here any operator

00:19:19,050 --> 00:19:24,210
that has access to concourse can see all

00:19:21,120 --> 00:19:27,950
my credentials again we don't like that

00:19:24,210 --> 00:19:30,950
so let's go through and set this updated

00:19:27,950 --> 00:19:30,950
manifest

00:19:32,190 --> 00:19:36,090
all right so a good sign already we got

00:19:34,890 --> 00:19:39,690
rid of these credentials we're only

00:19:36,090 --> 00:19:41,640
seeing references so that's great now

00:19:39,690 --> 00:19:46,250
that we've set this let me start that to

00:19:41,640 --> 00:19:50,940
see that it works and let me rerun that

00:19:46,250 --> 00:19:54,120
get pipeline command all right so again

00:19:50,940 --> 00:19:56,970
here get pipeline will not show the

00:19:54,120 --> 00:19:59,940
actual credentials because concourse no

00:19:56,970 --> 00:20:04,050
longer store those in its database which

00:19:59,940 --> 00:20:07,200
is awesome and it's really

00:20:04,050 --> 00:20:11,340
straightforward to see there all right

00:20:07,200 --> 00:20:16,530
so the last thing here is hopefully this

00:20:11,340 --> 00:20:19,370
will go green but we don't have to wait

00:20:16,530 --> 00:20:23,400
for that well you can trust me right I

00:20:19,370 --> 00:20:29,300
promise that it works all right so let's

00:20:23,400 --> 00:20:29,300
switch back to one last use case

00:20:32,390 --> 00:20:38,250
all right so quickly before we move on

00:20:35,360 --> 00:20:40,950
problems are much the same in concourse

00:20:38,250 --> 00:20:42,270
as they are with Bosh the one thing

00:20:40,950 --> 00:20:45,090
that's different here is we don't call

00:20:42,270 --> 00:20:47,910
out generation as a problem because for

00:20:45,090 --> 00:20:51,600
the most part the credentials that exist

00:20:47,910 --> 00:20:54,600
in concourse pipelines are things from

00:20:51,600 --> 00:20:57,750
external systems so things like AWS

00:20:54,600 --> 00:20:59,940
credentials which wouldn't necessarily

00:20:57,750 --> 00:21:04,290
be generated all in the same way that

00:20:59,940 --> 00:21:07,530
Bosch credential can all right so this

00:21:04,290 --> 00:21:09,690
leads us to the last use case that I'm

00:21:07,530 --> 00:21:11,820
going to cover today so this jumps up

00:21:09,690 --> 00:21:15,150
from the infrastructure layer of using

00:21:11,820 --> 00:21:18,240
Bosh and Concours to the platform itself

00:21:15,150 --> 00:21:20,210
so the interaction here is a little bit

00:21:18,240 --> 00:21:23,220
more complex and it's not necessarily

00:21:20,210 --> 00:21:24,600
evident if I would do a demo of this so

00:21:23,220 --> 00:21:28,350
I'm just going to go through a few

00:21:24,600 --> 00:21:29,970
slides of the overall architecture of

00:21:28,350 --> 00:21:33,420
how this works and some of the

00:21:29,970 --> 00:21:37,500
interactions and how they've changed so

00:21:33,420 --> 00:21:40,980
this focuses on the use case of service

00:21:37,500 --> 00:21:43,110
binding credentials so we we've received

00:21:40,980 --> 00:21:45,480
feedback from a number of users that

00:21:43,110 --> 00:21:48,630
they have concerns about

00:21:45,480 --> 00:21:51,620
few different areas of this workflow the

00:21:48,630 --> 00:21:54,360
primary one is the way in which

00:21:51,620 --> 00:21:58,280
credentials are transited between

00:21:54,360 --> 00:22:01,820
various components of the platform and

00:21:58,280 --> 00:22:08,330
if we jump to the current state diagram

00:22:01,820 --> 00:22:10,290
we can see that here so operator or

00:22:08,330 --> 00:22:13,559
actually in this case say an app

00:22:10,290 --> 00:22:16,460
developer initiates the the bind request

00:22:13,559 --> 00:22:18,750
and that goes to the service broker

00:22:16,460 --> 00:22:21,419
which will go through and provision the

00:22:18,750 --> 00:22:24,150
service and generate credentials so that

00:22:21,419 --> 00:22:26,040
the application can access it once it

00:22:24,150 --> 00:22:28,140
does that it passes it back to copy

00:22:26,040 --> 00:22:31,470
which stores a copy of the credential in

00:22:28,140 --> 00:22:33,840
its database and then sends that over to

00:22:31,470 --> 00:22:37,679
Diego which needs to put it into the

00:22:33,840 --> 00:22:40,940
applications environment if we look at

00:22:37,679 --> 00:22:44,250
this with a skeptical eye we we see that

00:22:40,940 --> 00:22:46,860
the credential doesn't isn't strictly

00:22:44,250 --> 00:22:49,980
required and capi or Diego to make this

00:22:46,860 --> 00:22:50,910
happen right it's needed by the service

00:22:49,980 --> 00:22:52,620
broker and it's needed by the

00:22:50,910 --> 00:22:56,429
application but it shouldn't necessarily

00:22:52,620 --> 00:22:58,080
be needed by others so this is the

00:22:56,429 --> 00:23:01,169
alternative workflow that we've

00:22:58,080 --> 00:23:03,600
envisioned for credible sis to delivery

00:23:01,169 --> 00:23:07,169
of service credentials it's much the

00:23:03,600 --> 00:23:09,120
same the the main difference here is

00:23:07,169 --> 00:23:11,490
with the interactions of how the service

00:23:09,120 --> 00:23:15,240
broker sends back the credential and

00:23:11,490 --> 00:23:17,309
then how the application consumes it so

00:23:15,240 --> 00:23:19,440
I'll focus in on two different

00:23:17,309 --> 00:23:24,000
interactions ago the first one here

00:23:19,440 --> 00:23:27,870
shows the the provisioning of the

00:23:24,000 --> 00:23:30,059
credential so the service broker when it

00:23:27,870 --> 00:23:31,740
generates that credential instead of

00:23:30,059 --> 00:23:35,790
sending it back through the platform

00:23:31,740 --> 00:23:37,830
it sets the credential incredib and when

00:23:35,790 --> 00:23:40,460
it does that it can provision access

00:23:37,830 --> 00:23:47,330
control for the application for which

00:23:40,460 --> 00:23:50,280
it's performing the bind so we we get a

00:23:47,330 --> 00:23:53,580
more strict and explicit access control

00:23:50,280 --> 00:23:55,260
when we do it that way and then also

00:23:53,580 --> 00:23:57,179
once it's done with this instead of

00:23:55,260 --> 00:23:58,980
passing back the actual credential value

00:23:57,179 --> 00:24:01,530
to the platform it just

00:23:58,980 --> 00:24:05,549
returns a reference again to the

00:24:01,530 --> 00:24:07,140
credential so it sort of removed some of

00:24:05,549 --> 00:24:09,690
those concerns about storing the

00:24:07,140 --> 00:24:11,820
credential and the database because it's

00:24:09,690 --> 00:24:16,100
just a reference now it's not a big deal

00:24:11,820 --> 00:24:18,450
to store it in a in the CC DB database

00:24:16,100 --> 00:24:21,000
all right so then the the second

00:24:18,450 --> 00:24:23,549
interaction is how we consume that

00:24:21,000 --> 00:24:24,750
credential by the application so we have

00:24:23,549 --> 00:24:27,510
two different options with this

00:24:24,750 --> 00:24:29,250
interaction depending on whether or not

00:24:27,510 --> 00:24:30,990
you're concerned about the idea of

00:24:29,250 --> 00:24:34,049
having these in the Applications

00:24:30,990 --> 00:24:36,330
environment we we've done some research

00:24:34,049 --> 00:24:37,500
and it seems sort of split some people

00:24:36,330 --> 00:24:39,809
care some people don't

00:24:37,500 --> 00:24:44,850
so we we have the ability to do it

00:24:39,809 --> 00:24:46,740
either way so this interaction shows if

00:24:44,850 --> 00:24:48,740
you don't care about those credentials

00:24:46,740 --> 00:24:53,690
being in the application environment so

00:24:48,740 --> 00:24:57,470
the structure here is that we have this

00:24:53,690 --> 00:25:00,480
we have this component called the long

00:24:57,470 --> 00:25:02,429
excuse me we have this component called

00:25:00,480 --> 00:25:05,730
the launcher which exists in the

00:25:02,429 --> 00:25:07,440
applications container and it

00:25:05,730 --> 00:25:10,620
essentially like when the application

00:25:07,440 --> 00:25:13,890
starts it creates some context and puts

00:25:10,620 --> 00:25:18,000
that into the container so we've updated

00:25:13,890 --> 00:25:19,860
this so that it will actually reach out

00:25:18,000 --> 00:25:22,169
to credit hub but as the application

00:25:19,860 --> 00:25:24,510
starts to get those service binding

00:25:22,169 --> 00:25:28,110
credentials that it needs and then it

00:25:24,510 --> 00:25:29,700
puts those into the environment so some

00:25:28,110 --> 00:25:34,640
of the benefits that we get there are

00:25:29,700 --> 00:25:37,500
the fact that the launcher uses a

00:25:34,640 --> 00:25:40,140
mutually authenticated connection to

00:25:37,500 --> 00:25:42,750
credit hub to request these and it also

00:25:40,140 --> 00:25:46,260
does it with the identity of the

00:25:42,750 --> 00:25:48,360
application itself so we have that

00:25:46,260 --> 00:25:52,470
strict access control of who can get

00:25:48,360 --> 00:25:55,710
access to these credentials and then

00:25:52,470 --> 00:25:57,150
this is the other option right so if you

00:25:55,710 --> 00:25:59,210
are concerned about these credentials

00:25:57,150 --> 00:26:01,980
being in the applications environment

00:25:59,210 --> 00:26:04,799
instead of using the launcher to

00:26:01,980 --> 00:26:08,880
transparently enable this process you

00:26:04,799 --> 00:26:10,290
can actually just say we we accept the

00:26:08,880 --> 00:26:11,850
responsibility of updating our

00:26:10,290 --> 00:26:13,679
applications

00:26:11,850 --> 00:26:15,989
so they actually reach out and get the

00:26:13,679 --> 00:26:17,549
credentials directly so in that case

00:26:15,989 --> 00:26:20,369
it's not stored in the application

00:26:17,549 --> 00:26:21,840
environment the application just reaches

00:26:20,369 --> 00:26:26,190
out to cred up directly to get its

00:26:21,840 --> 00:26:28,220
credentials and we we've done some work

00:26:26,190 --> 00:26:32,159
specifically with the spring cloud

00:26:28,220 --> 00:26:34,230
services connector team so that if

00:26:32,159 --> 00:26:36,600
you're using spring as an application

00:26:34,230 --> 00:26:39,889
framework you can actually do this

00:26:36,600 --> 00:26:42,749
pretty transparently and automatically

00:26:39,889 --> 00:26:45,450
all right so that finishes the use cases

00:26:42,749 --> 00:26:49,109
I'm going to quickly touch on here it

00:26:45,450 --> 00:26:52,769
looks like we have a bit of time on the

00:26:49,109 --> 00:26:58,129
sort of next step wish list of what what

00:26:52,769 --> 00:27:01,019
we're looking at for next use cases

00:26:58,129 --> 00:27:03,739
all right so primary item at the top

00:27:01,019 --> 00:27:07,739
here of course is rotation I think

00:27:03,739 --> 00:27:09,600
that's a concern of most everyone that

00:27:07,739 --> 00:27:13,139
is concerned about the security of the

00:27:09,600 --> 00:27:17,129
platform it's a really high value thing

00:27:13,139 --> 00:27:19,320
it's also very complex so it it likely

00:27:17,129 --> 00:27:23,730
will take awhile but we are going to

00:27:19,320 --> 00:27:25,769
dedicate time and resources to enabling

00:27:23,730 --> 00:27:28,769
this in an automated way now that we've

00:27:25,769 --> 00:27:33,570
got some of the the groundwork of

00:27:28,769 --> 00:27:35,850
integrations rolled out and then after

00:27:33,570 --> 00:27:38,549
that we were gonna explore some

00:27:35,850 --> 00:27:40,980
additional application credential

00:27:38,549 --> 00:27:43,710
management workflows so that's going to

00:27:40,980 --> 00:27:47,119
be very similar to the service binding

00:27:43,710 --> 00:27:50,549
credentials except expanded to more

00:27:47,119 --> 00:27:52,409
generic use cases of anything that an

00:27:50,549 --> 00:27:55,769
application needs to store securely

00:27:52,409 --> 00:27:57,629
could be stored incredible

00:27:55,769 --> 00:27:59,220
and then some additional things about

00:27:57,629 --> 00:28:01,230
pluggable encryption provider interface

00:27:59,220 --> 00:28:04,559
is giving more choice around what you

00:28:01,230 --> 00:28:09,769
use to encrypt your data encryption as a

00:28:04,559 --> 00:28:15,029
service and pluggable credential types

00:28:09,769 --> 00:28:17,999
all right so wrapping up here final ask

00:28:15,029 --> 00:28:21,149
for everyone in the audience if these

00:28:17,999 --> 00:28:23,999
use cases are compelling to you it would

00:28:21,149 --> 00:28:24,900
be great if you could get involved that

00:28:23,999 --> 00:28:28,520
would mean providing

00:28:24,900 --> 00:28:30,960
feedback either to me directly or

00:28:28,520 --> 00:28:33,060
jumping on the Cloud Foundry slack in

00:28:30,960 --> 00:28:36,030
the credit hub channel you can provide

00:28:33,060 --> 00:28:40,080
some feedback to us also check out our

00:28:36,030 --> 00:28:44,220
repos submit any issues or pull requests

00:28:40,080 --> 00:28:46,650
if you're generous and I'll be around

00:28:44,220 --> 00:28:50,440
the comforts so let me know if you have

00:28:46,650 --> 00:28:54,110
any questions Thanks

00:28:50,440 --> 00:28:58,290
[Applause]

00:28:54,110 --> 00:29:02,100
alright I think we have 10 minutes for

00:28:58,290 --> 00:29:06,080
questions does anyone have any questions

00:29:02,100 --> 00:29:08,460
oh that's a great question

00:29:06,080 --> 00:29:13,140
that is certainly the most pressing

00:29:08,460 --> 00:29:16,280
thing for us to look at let's see I've

00:29:13,140 --> 00:29:16,280
got two mirror

00:29:19,800 --> 00:29:37,710
so much success all of our releases are

00:29:23,130 --> 00:29:41,670
compiled any other questions yes so

00:29:37,710 --> 00:29:45,240
we've done an internal audit I've been

00:29:41,670 --> 00:29:46,890
told that we can't we've done let me

00:29:45,240 --> 00:29:51,480
rephrase we've done an audit with an

00:29:46,890 --> 00:29:53,340
external penetration tester as these

00:29:51,480 --> 00:29:56,520
things go it's sort of sensitive to

00:29:53,340 --> 00:30:01,410
share results of pen tests but I can say

00:29:56,520 --> 00:30:13,740
that there weren't any major issues it

00:30:01,410 --> 00:30:16,080
is yes I would say it's an open source

00:30:13,740 --> 00:30:23,940
project so if you want to do pen tests

00:30:16,080 --> 00:30:27,570
that would be awesome I yeah I I don't

00:30:23,940 --> 00:30:29,820
know deeply the politics of or the legal

00:30:27,570 --> 00:30:34,460
implications of sharing pen test results

00:30:29,820 --> 00:30:37,460
but they they exist at least in the u.s.

00:30:34,460 --> 00:30:37,460
yes

00:30:41,890 --> 00:30:47,200
yeah so the way that we've structured

00:30:44,840 --> 00:30:51,230
the application is that we have this

00:30:47,200 --> 00:30:53,900
interface for encryption providers and

00:30:51,230 --> 00:30:56,840
the ones that we support right now are

00:30:53,900 --> 00:31:00,770
an internal AAS based encryption

00:30:56,840 --> 00:31:05,510
provider as well as a client for a luna

00:31:00,770 --> 00:31:08,690
HSM module we plan to make that more

00:31:05,510 --> 00:31:11,950
generic and pluggable so that if you

00:31:08,690 --> 00:31:15,020
have any other encryption provider like

00:31:11,950 --> 00:31:18,530
any of the various I as key management

00:31:15,020 --> 00:31:21,740
systems or at Alice HSM or something

00:31:18,530 --> 00:31:24,650
else you you would be able to create an

00:31:21,740 --> 00:31:27,260
interface for that specifically vault I

00:31:24,650 --> 00:31:30,590
am not sure how that fits because it's

00:31:27,260 --> 00:31:32,179
more of like all-in-one solution but

00:31:30,590 --> 00:31:33,650
it's something certainly once we have

00:31:32,179 --> 00:31:43,419
the interface we can explore it seeing

00:31:33,650 --> 00:31:43,419
if that works all right yes

00:32:04,560 --> 00:32:13,210
yeah yeah you can so let me jump back to

00:32:11,080 --> 00:32:20,140
this so there are two different ways

00:32:13,210 --> 00:32:24,490
that we can do that so variables is the

00:32:20,140 --> 00:32:26,710
command so the the structure of Bosch in

00:32:24,490 --> 00:32:29,830
how it starts credential references is

00:32:26,710 --> 00:32:32,260
it has this concept of variables so it

00:32:29,830 --> 00:32:33,820
has a list of all the credentials that

00:32:32,260 --> 00:32:36,940
it's referencing for a deployment and

00:32:33,820 --> 00:32:38,530
then it also has a strong tie to the

00:32:36,940 --> 00:32:42,550
version of the credential that it's

00:32:38,530 --> 00:32:44,590
using and this is useful where if like

00:32:42,550 --> 00:32:47,170
for example you're rotating credential

00:32:44,590 --> 00:32:49,450
but you haven't initiated the deployment

00:32:47,170 --> 00:32:52,420
it doesn't actually leak the change in

00:32:49,450 --> 00:32:55,570
value into your environment without you

00:32:52,420 --> 00:32:58,660
actually initiating an action so this is

00:32:55,570 --> 00:33:02,320
one way to track it also incredibie cuz

00:32:58,660 --> 00:33:05,140
we have this strict logging requirement

00:33:02,320 --> 00:33:06,400
you could also query just based on

00:33:05,140 --> 00:33:11,340
change date and you can see all the

00:33:06,400 --> 00:33:11,340
credentials that were changed as well

00:33:13,530 --> 00:33:19,570
right yeah yeah so that would certainly

00:33:16,870 --> 00:33:29,610
be restricted who would be able to see

00:33:19,570 --> 00:33:29,610
what what has changed yeah yes

00:33:54,259 --> 00:34:24,839
correct right I think I see what you

00:34:22,200 --> 00:34:29,040
mean so you're saying because we have

00:34:24,839 --> 00:34:30,990
strict control on namespacing you

00:34:29,040 --> 00:34:34,319
wouldn't be able to rotate a credential

00:34:30,990 --> 00:34:36,809
so it sort of depends it's an

00:34:34,319 --> 00:34:39,389
operational struggle for sure but you

00:34:36,809 --> 00:34:41,970
could if you granted access to all the

00:34:39,389 --> 00:34:45,809
credentials for a deployment have the

00:34:41,970 --> 00:34:48,569
client that you're concourse worker is

00:34:45,809 --> 00:34:51,450
using also be able to access and rotate

00:34:48,569 --> 00:34:52,950
those things so they exist in sort of

00:34:51,450 --> 00:34:54,599
separate namespaces right there are

00:34:52,950 --> 00:34:56,010
credentials that exist just for the

00:34:54,599 --> 00:34:58,920
purpose of concourse pipelines and

00:34:56,010 --> 00:35:02,069
credentials for deployments and if you

00:34:58,920 --> 00:35:05,010
would grant access to the concourse

00:35:02,069 --> 00:35:06,690
worker to your deployment credentials

00:35:05,010 --> 00:35:12,720
you you would be able to rotate them

00:35:06,690 --> 00:35:18,119
through like a symlink or something like

00:35:12,720 --> 00:35:20,430
that not yet but yeah we had we haven't

00:35:18,119 --> 00:35:22,380
explored like I said a rotation deeply

00:35:20,430 --> 00:35:26,010
yet but once we do I'm sure we're gonna

00:35:22,380 --> 00:35:32,400
get into a lot of those gotchas and

00:35:26,010 --> 00:35:37,250
apply fixes for that pain any other

00:35:32,400 --> 00:35:37,250
questions yes

00:35:43,700 --> 00:35:46,599
yeah

00:35:46,979 --> 00:35:54,190
yes so as far as production readiness

00:35:50,289 --> 00:35:57,309
goes the most mature of the use cases is

00:35:54,190 --> 00:36:01,359
the Bosch deployment case we've been

00:35:57,309 --> 00:36:03,460
using an improv or maybe like six months

00:36:01,359 --> 00:36:05,049
it's been quite a while and we

00:36:03,460 --> 00:36:09,819
introduced it at pivotal in our

00:36:05,049 --> 00:36:12,309
commercial products two versions ago so

00:36:09,819 --> 00:36:13,630
that would have been actually that would

00:36:12,309 --> 00:36:15,130
have been six months ago so we've

00:36:13,630 --> 00:36:18,220
probably been using it in production for

00:36:15,130 --> 00:36:21,099
like eight months yeah the concourse

00:36:18,220 --> 00:36:22,479
integration uses similar structure so

00:36:21,099 --> 00:36:26,200
we're confident and saying that that

00:36:22,479 --> 00:36:29,769
will work they recently released the

00:36:26,200 --> 00:36:32,920
integration in a major version in 3.5 so

00:36:29,769 --> 00:36:36,519
I think that might be the latest version

00:36:32,920 --> 00:36:38,289
that they have as far as the other

00:36:36,519 --> 00:36:40,390
things it's always hard to say with

00:36:38,289 --> 00:36:43,420
roadmaps when when things are going to

00:36:40,390 --> 00:36:46,589
come but we'll focus and do is as much

00:36:43,420 --> 00:36:46,589
as we can as best we can

00:36:52,900 --> 00:36:58,950
any other questions alright that's it

00:36:57,220 --> 00:37:03,560
thanks so much for coming

00:36:58,950 --> 00:37:03,560

YouTube URL: https://www.youtube.com/watch?v=UHqKLEEZH3s


