Title: Embracing OCI and CNI Open Container Standards Between Garden & Friends -
Publication date: 2017-10-18
Playlist: Cloud Foundry Summit Europe 2017
Description: 
	Embracing OCI and CNI Open Container Standards Between Garden & Friends - George Lestaris & Gabriel Rosenhouse, Pivotal, & Konstantinos Karampogias, Swisscom

Cloud Foundry supports a rich ecosystem of plugins and extension points at various levels of the stack. This modularity enables rapid development and deployment of new features. Garden-runC, the Linux container engine used by Cloud Foundry, adopted this kind of modular philosophy by introducing new exciting forms of extensibility in its core.

In this talk, members of three core engineering teams (Garden, GrootFS, and Container Networking) will introduce the APIs that enable pluggable filesystems and networking stacks, including support for the industry-standard Open Container Initiative (OCI) image format and the Container Networking Interface (CNI) specification. With these extension points, Cloud Foundry users and operators gain access to a rapidly-growing ecosystem of 3rd party features which can enable new use cases for the platform.

About Konstantinos Karampogias
Konstantinos has been working at Swisscom for the past two years as Software Engineer. He is currently a member of the Cloud Foundry Garden team in London, and before that he had a CF Dojo with the Container Networking team in Santa Monica.

About George Lestaris
George Lestaris is the product manager of the Cloud Foundry GrootFS team, working at Pivotal in London. GrootFS is building tools to manage the container image lifecycle for Garden, CF's container engine. Before Pivotal, George spent some time with web programming, high throughput computing and cloud computing research. He has given talks before in CHEP 2013, PyCon UK 2015, CF Summit NA 2016, ContainerCamp LDN 2016 and Open Source Summit Japan 2017.

About Gabriel Rosenhouse
Gabe is a software engineer at the Pivotal office in Santa Monica, California. He has been working on Cloud Foundry for 3 years with a focus on networking and security. He co-presented on the Container Networking project at CF Summit North America last year. In past lives, Gabe wrote software for low-cost 3D-printers and high-speed fluorescence microscopes.
Captions: 
	00:00:00,030 --> 00:00:05,609
hello thanks for coming to our talk

00:00:02,780 --> 00:00:08,309
about embracing container standards in

00:00:05,609 --> 00:00:12,090
Cloud Foundry this is joint talk of

00:00:08,309 --> 00:00:14,280
three open source cloud foundry teams my

00:00:12,090 --> 00:00:16,199
name is Joe Cedeno Scarab oh yes I'm

00:00:14,280 --> 00:00:18,900
worrying for Swisscom and I'm remote

00:00:16,199 --> 00:00:19,619
member of cloud of garden team located

00:00:18,900 --> 00:00:23,550
in London

00:00:19,619 --> 00:00:25,920
here with me hi I'm George the Third's

00:00:23,550 --> 00:00:28,410
and a product manager for pivotal I work

00:00:25,920 --> 00:00:29,210
for the garden root file system team or

00:00:28,410 --> 00:00:32,460
gruta Fez

00:00:29,210 --> 00:00:34,620
hi I'm Gabriel Rosenhaus I'm engineer

00:00:32,460 --> 00:00:36,329
pivotal I work on a rowing team

00:00:34,620 --> 00:00:41,250
previously the container networking team

00:00:36,329 --> 00:00:43,410
and I'm a senior maintainer ok we will

00:00:41,250 --> 00:00:44,969
start with a short introduction how

00:00:43,410 --> 00:00:47,399
containers are being used in cloud

00:00:44,969 --> 00:00:50,160
foundry we are going then to speak about

00:00:47,399 --> 00:00:52,350
the situation before standards what were

00:00:50,160 --> 00:00:54,750
the pain points then we are going to

00:00:52,350 --> 00:00:57,539
discuss we are going team by team and

00:00:54,750 --> 00:01:00,359
discuss with Thunder is team adopted and

00:00:57,539 --> 00:01:02,100
how the team changed and finally we are

00:01:00,359 --> 00:01:06,360
going to conclude with what we have

00:01:02,100 --> 00:01:09,840
gained and a nap in platform level so

00:01:06,360 --> 00:01:11,880
from users to containers user processor

00:01:09,840 --> 00:01:14,580
on inside and containers in cloud father

00:01:11,880 --> 00:01:17,729
the process under hood is the following

00:01:14,580 --> 00:01:20,040
when a user does a CF push the CLI talks

00:01:17,729 --> 00:01:22,350
to the cloud controller which in turn

00:01:20,040 --> 00:01:25,110
ask from the vehicle brain to schedule a

00:01:22,350 --> 00:01:27,630
long run process the ergo brain is

00:01:25,110 --> 00:01:31,110
spitting a cell inside the cluster and

00:01:27,630 --> 00:01:33,270
place this request locally in a cell

00:01:31,110 --> 00:01:35,729
there is another vehicle component which

00:01:33,270 --> 00:01:37,860
is called rep and picks up this request

00:01:35,729 --> 00:01:40,710
and instructs

00:01:37,860 --> 00:01:44,579
Garden to create a container which final

00:01:40,710 --> 00:01:46,110
is going to host the user process in

00:01:44,579 --> 00:01:47,729
high level in order to create a

00:01:46,110 --> 00:01:50,790
container we need a couple of stuff

00:01:47,729 --> 00:01:53,159
first we need a nice related container

00:01:50,790 --> 00:01:55,229
file system we then need a kind of

00:01:53,159 --> 00:01:58,259
configuration file that is called

00:01:55,229 --> 00:02:01,680
runtime spec in container terminology

00:01:58,259 --> 00:02:03,659
then we are going to invoke a runtime

00:02:01,680 --> 00:02:06,869
engine we will take these two and we

00:02:03,659 --> 00:02:08,670
will create the container environment it

00:02:06,869 --> 00:02:10,149
should make sure also the networking

00:02:08,670 --> 00:02:12,310
part is there the connective

00:02:10,149 --> 00:02:17,260
is that and finally we are going to

00:02:12,310 --> 00:02:22,090
start with the user process in the past

00:02:17,260 --> 00:02:24,640
after 2012 before 2015 containers start

00:02:22,090 --> 00:02:27,760
being adopted heavily almost all

00:02:24,640 --> 00:02:30,370
companies across all industries start

00:02:27,760 --> 00:02:32,859
experimenting with containers the reason

00:02:30,370 --> 00:02:36,519
was because there have a huge benefit in

00:02:32,859 --> 00:02:37,689
both developers and operators they have

00:02:36,519 --> 00:02:41,260
great performance

00:02:37,689 --> 00:02:43,540
they are very portable they have optimal

00:02:41,260 --> 00:02:47,620
resource management and many many other

00:02:43,540 --> 00:02:49,799
advantages dogged allowed people to

00:02:47,620 --> 00:02:52,659
start experimenting with this all

00:02:49,799 --> 00:02:55,030
technology and I'm saying old because

00:02:52,659 --> 00:02:58,840
container technology was more or less

00:02:55,030 --> 00:03:03,010
clear since 2008 it is an isolated

00:02:58,840 --> 00:03:06,459
process that runs using some general

00:03:03,010 --> 00:03:08,980
features like namespace cgroups another

00:03:06,459 --> 00:03:12,459
security improvement like app abilities

00:03:08,980 --> 00:03:14,230
and second so the displacement was from

00:03:12,459 --> 00:03:16,269
the one side they were very strong

00:03:14,230 --> 00:03:18,370
incentive to put as fast as possible

00:03:16,269 --> 00:03:21,099
containers production and from the other

00:03:18,370 --> 00:03:24,819
side it was clear how to create the

00:03:21,099 --> 00:03:26,409
containers but the problematic party was

00:03:24,819 --> 00:03:28,599
the soldier that spin up the container

00:03:26,409 --> 00:03:30,669
they were not main implementation out

00:03:28,599 --> 00:03:33,609
there and the implementation were not

00:03:30,669 --> 00:03:34,989
open were not standardized so it's

00:03:33,609 --> 00:03:36,849
commonly that we wanted to adapt

00:03:34,989 --> 00:03:39,310
containers had a couple of solution

00:03:36,849 --> 00:03:42,819
either to write from scratch assad

00:03:39,310 --> 00:03:44,470
software but with high cost or to use a

00:03:42,819 --> 00:03:47,190
non-standard implementation and

00:03:44,470 --> 00:03:49,329
basically to opt in for a vendor locking

00:03:47,190 --> 00:03:51,639
that was one of the reason why

00:03:49,329 --> 00:03:55,389
containers did not go faster in

00:03:51,639 --> 00:03:58,150
production systems cloud foundry of

00:03:55,389 --> 00:04:00,190
course big the first solution a steaming

00:03:58,150 --> 00:04:03,310
load on will spin up called garden that

00:04:00,190 --> 00:04:06,310
maintains a component that was called

00:04:03,310 --> 00:04:08,650
Berggren garden linux from the one side

00:04:06,310 --> 00:04:10,479
garden lineage implements the garden api

00:04:08,650 --> 00:04:12,879
that speaks to the rest of the cloud

00:04:10,479 --> 00:04:13,269
foundry component and from the other

00:04:12,879 --> 00:04:15,250
side

00:04:13,269 --> 00:04:17,519
implements all the functions that are

00:04:15,250 --> 00:04:20,919
required in order to spin up a container

00:04:17,519 --> 00:04:24,030
this component was large because it has

00:04:20,919 --> 00:04:27,060
a lot of functionality built in runtime

00:04:24,030 --> 00:04:29,280
network in file system and it was very

00:04:27,060 --> 00:04:30,840
complicated because it was interacting

00:04:29,280 --> 00:04:34,190
with each admin and this has been always

00:04:30,840 --> 00:04:37,200
a tricky part in sovereigns in ink

00:04:34,190 --> 00:04:40,410
so without standards we were very busy

00:04:37,200 --> 00:04:42,930
maintaining this component we were very

00:04:40,410 --> 00:04:44,700
busy in two parts in this component when

00:04:42,930 --> 00:04:47,090
there was a security vulnerability it

00:04:44,700 --> 00:04:51,360
had to be passed instantly and without

00:04:47,090 --> 00:04:53,520
no external help on top other tasks like

00:04:51,360 --> 00:04:56,220
porting the windows were hard because

00:04:53,520 --> 00:04:58,020
you could not actually use the code from

00:04:56,220 --> 00:04:59,310
engineering perspective inside the team

00:04:58,020 --> 00:05:03,510
there was not a lot of room for

00:04:59,310 --> 00:05:05,340
innovation and creative work of course

00:05:03,510 --> 00:05:06,960
this problem was not only cloud fatheri

00:05:05,340 --> 00:05:08,820
but many other companies were facing

00:05:06,960 --> 00:05:11,190
exactly the exact same problem

00:05:08,820 --> 00:05:14,250
that's why open container initiative was

00:05:11,190 --> 00:05:16,530
funding OCI the mission is to

00:05:14,250 --> 00:05:19,710
standardize the container technology and

00:05:16,530 --> 00:05:23,280
make it not vendor specific it was

00:05:19,710 --> 00:05:25,940
founded in June 2015 by docker and 40

00:05:23,280 --> 00:05:29,610
others members it's a Linux Foundation

00:05:25,940 --> 00:05:32,280
collaborate project it started with a

00:05:29,610 --> 00:05:35,040
runtime specification while runtime is

00:05:32,280 --> 00:05:37,140
the defines the lifecycle of a container

00:05:35,040 --> 00:05:40,320
how you start with the Ladykiller

00:05:37,140 --> 00:05:43,590
container and the environment namespaces

00:05:40,320 --> 00:05:47,900
volumes that work after two years in

00:05:43,590 --> 00:05:51,330
June it came to the first stable version

00:05:47,900 --> 00:05:53,820
Lansing is one other is the reference of

00:05:51,330 --> 00:05:57,510
lamentation of the runtime specification

00:05:53,820 --> 00:05:59,550
that also donated by dr. shear is also

00:05:57,510 --> 00:06:04,200
the github repository if you would like

00:05:59,550 --> 00:06:07,050
to get some more information so garden

00:06:04,200 --> 00:06:09,750
team have saw the benefit of using this

00:06:07,050 --> 00:06:11,240
OCI standard and was one of the early

00:06:09,750 --> 00:06:14,910
adopters

00:06:11,240 --> 00:06:16,950
there she takes to change from garden

00:06:14,910 --> 00:06:19,590
Linux we renamed the component garden

00:06:16,950 --> 00:06:22,200
run see and we delegate a large part of

00:06:19,590 --> 00:06:24,750
the component to this external reference

00:06:22,200 --> 00:06:27,419
implementation so the component became

00:06:24,750 --> 00:06:30,390
smaller and more flexible one part was

00:06:27,419 --> 00:06:33,090
related to support the OCI and in

00:06:30,390 --> 00:06:34,820
general it was great because support

00:06:33,090 --> 00:06:36,980
from the community came so

00:06:34,820 --> 00:06:41,120
had a vulnerability or anything else it

00:06:36,980 --> 00:06:44,030
was people working on that all over the

00:06:41,120 --> 00:06:46,390
world this has been no driving

00:06:44,030 --> 00:06:57,920
production for a year maybe more and

00:06:46,390 --> 00:07:00,910
with that I'm giving the floor yeah hey

00:06:57,920 --> 00:07:04,940
how's the sound okay sounds okay so

00:07:00,910 --> 00:07:07,310
garden and CNI so as a Cloud Foundry

00:07:04,940 --> 00:07:08,360
operator if you were here for the

00:07:07,310 --> 00:07:10,430
previous talk you might have heard about

00:07:08,360 --> 00:07:13,100
the container networking project the

00:07:10,430 --> 00:07:14,660
this the country operator wants to have

00:07:13,100 --> 00:07:16,850
their containers attached to existing

00:07:14,660 --> 00:07:18,200
networks they'd like to have fine-grain

00:07:16,850 --> 00:07:20,480
network policies between those

00:07:18,200 --> 00:07:22,040
containers maybe from containers to

00:07:20,480 --> 00:07:23,480
other things they might want to utilize

00:07:22,040 --> 00:07:25,640
advanced features of their

00:07:23,480 --> 00:07:29,540
software-defined network if they're they

00:07:25,640 --> 00:07:31,460
have something like NSX tea and and as

00:07:29,540 --> 00:07:33,110
an engineer working on cloud foundry and

00:07:31,460 --> 00:07:34,910
as like a member of the teams that are

00:07:33,110 --> 00:07:37,040
working on this we want to avoid

00:07:34,910 --> 00:07:38,990
reinventing the wheel we want to enable

00:07:37,040 --> 00:07:40,040
vendors of with their fancy technology

00:07:38,990 --> 00:07:41,270
to add that stuff to cloud foundry

00:07:40,040 --> 00:07:42,980
without us having to do a whole lot of

00:07:41,270 --> 00:07:45,800
work and we would like to build our

00:07:42,980 --> 00:07:48,350
software around open standards and

00:07:45,800 --> 00:07:50,330
that's sort of the motivation for making

00:07:48,350 --> 00:07:52,610
use of this CNI project so this was

00:07:50,330 --> 00:07:54,110
originally developed by core OS it's

00:07:52,610 --> 00:07:55,790
part of the rocket project when they

00:07:54,110 --> 00:07:57,680
were first starting it but it's now part

00:07:55,790 --> 00:07:59,840
of the cloud native computing foundation

00:07:57,680 --> 00:08:01,190
there's a small but growing community a

00:07:59,840 --> 00:08:04,850
lot of contributors from different

00:08:01,190 --> 00:08:06,650
organizations pivotal coalesce Red Hat

00:08:04,850 --> 00:08:10,820
tigereye weave works are all maintained

00:08:06,650 --> 00:08:12,650
errs and the idea behind it is that it's

00:08:10,820 --> 00:08:14,900
the simplest possible interface between

00:08:12,650 --> 00:08:18,830
a container run time like garden and a

00:08:14,900 --> 00:08:21,050
network implementation in practice

00:08:18,830 --> 00:08:23,810
this means that the run time has some

00:08:21,050 --> 00:08:25,100
configuration that it is provided to it

00:08:23,810 --> 00:08:29,210
and Cloud Foundry that configuration

00:08:25,100 --> 00:08:31,970
would come from Bosh or Diego and that

00:08:29,210 --> 00:08:33,080
config then gets transformed into a

00:08:31,970 --> 00:08:35,030
certain representation that is

00:08:33,080 --> 00:08:36,620
understood by the network plug-in and

00:08:35,030 --> 00:08:37,940
the network plugin then goes and does

00:08:36,620 --> 00:08:40,280
the hard work of actually setting up the

00:08:37,940 --> 00:08:42,380
network and it's that that first arrow

00:08:40,280 --> 00:08:45,140
that sort of curves down that's the cni

00:08:42,380 --> 00:08:47,420
boundary and one thing that's common in

00:08:45,140 --> 00:08:47,970
CNRI plugins well ok before I get there

00:08:47,420 --> 00:08:49,980
the

00:08:47,970 --> 00:08:51,209
actual thing looks like this you might

00:08:49,980 --> 00:08:53,040
have some environment variables that get

00:08:51,209 --> 00:08:54,300
set that tell the plug-in about which

00:08:53,040 --> 00:08:56,129
container it is and where the network

00:08:54,300 --> 00:08:58,259
namespace is and then there's more

00:08:56,129 --> 00:08:59,790
config that can be passed in over JSON

00:08:58,259 --> 00:09:03,569
and standard in so it's a very sort of

00:08:59,790 --> 00:09:05,430
simple UNIX C format then you can chain

00:09:03,569 --> 00:09:07,439
these plugins together so a common thing

00:09:05,430 --> 00:09:08,850
is the sort of high level configures

00:09:07,439 --> 00:09:11,189
passed to the first network plug-in

00:09:08,850 --> 00:09:13,019
which then delegates to a second network

00:09:11,189 --> 00:09:15,959
plug-in that might be doing IP address

00:09:13,019 --> 00:09:17,279
management or other things and so the

00:09:15,959 --> 00:09:19,889
same Paramus maybe some new network

00:09:17,279 --> 00:09:21,600
config it's passed in and that that IP

00:09:19,889 --> 00:09:23,490
address management plug-in maybe goes

00:09:21,600 --> 00:09:25,410
off and talks about database talks DHCP

00:09:23,490 --> 00:09:27,959
looks on a file on disk figures out what

00:09:25,410 --> 00:09:29,310
IP address to use and returns that to

00:09:27,959 --> 00:09:31,350
the main network plug-in which is doing

00:09:29,310 --> 00:09:32,759
the work of setting up network devices

00:09:31,350 --> 00:09:36,389
and routing rules and all those sorts of

00:09:32,759 --> 00:09:40,170
things the core repo is here it

00:09:36,389 --> 00:09:41,910
specifies the API boundary for what

00:09:40,170 --> 00:09:44,279
runtimes should do what plugins should

00:09:41,910 --> 00:09:46,439
do has some conventions for more

00:09:44,279 --> 00:09:48,360
optional advanced features and there's a

00:09:46,439 --> 00:09:51,600
go language library that makes it easy

00:09:48,360 --> 00:09:53,970
to implement C&I plugin and to write a

00:09:51,600 --> 00:09:56,189
runtime that consumes that there's also

00:09:53,970 --> 00:09:57,870
a separate repo we recently split this

00:09:56,189 --> 00:09:59,579
out into a separate repo which has a

00:09:57,870 --> 00:10:02,490
bunch of reference implementations of

00:09:59,579 --> 00:10:04,860
network plugins things for interface

00:10:02,490 --> 00:10:06,779
creation for IP address management for

00:10:04,860 --> 00:10:08,069
sort of tuning and like meta topic

00:10:06,779 --> 00:10:10,620
things there's a new port mapping

00:10:08,069 --> 00:10:13,050
plug-in that's pretty cool and there's a

00:10:10,620 --> 00:10:15,209
sample if you want to build your own in

00:10:13,050 --> 00:10:16,500
addition there's this big ecosystem out

00:10:15,209 --> 00:10:18,360
there now it's not just the reference

00:10:16,500 --> 00:10:21,839
implementations that we've built into

00:10:18,360 --> 00:10:23,100
our own into our own repo but cloud

00:10:21,839 --> 00:10:25,470
foundry and kubernetes and others are

00:10:23,100 --> 00:10:26,879
using C and I as container runtimes and

00:10:25,470 --> 00:10:30,059
then on the other side of the API

00:10:26,879 --> 00:10:32,509
boundary you've got plugins some open

00:10:30,059 --> 00:10:34,529
source some proprietary that tie into

00:10:32,509 --> 00:10:37,319
various Software Defined Networking

00:10:34,529 --> 00:10:38,720
systems and this is really like where

00:10:37,319 --> 00:10:41,879
the power of the whole thing comes from

00:10:38,720 --> 00:10:44,100
within cloud foundry we've gotten to as

00:10:41,879 --> 00:10:45,870
a result of this work reduce the size of

00:10:44,100 --> 00:10:48,120
garden again we got to remove a bunch of

00:10:45,870 --> 00:10:50,220
functionality from garden Linux where it

00:10:48,120 --> 00:10:51,839
was setting up networks itself and now

00:10:50,220 --> 00:10:54,209
there's this sort of thin layer that

00:10:51,839 --> 00:10:55,980
just calls out to see and I and then the

00:10:54,209 --> 00:10:58,139
cni plugin can go and do the hard work

00:10:55,980 --> 00:11:00,329
and this what this lets us do is to swap

00:10:58,139 --> 00:11:01,730
in various network plugins what we

00:11:00,329 --> 00:11:02,720
pictured here is silk if you are

00:11:01,730 --> 00:11:04,820
previous talk you might have heard about

00:11:02,720 --> 00:11:07,790
that it's sort of the batteries included

00:11:04,820 --> 00:11:08,990
core CNI plug-in it's designed for Cloud

00:11:07,790 --> 00:11:10,760
Foundry it's designed to be easy to

00:11:08,990 --> 00:11:13,370
operate it's designed to work with Bosch

00:11:10,760 --> 00:11:17,329
and it does those things well as a very

00:11:13,370 --> 00:11:18,860
simple plug-in within Cloud Foundry as a

00:11:17,329 --> 00:11:20,990
whole you actually have this whole stack

00:11:18,860 --> 00:11:21,920
of plug-in sort of delegating to each

00:11:20,990 --> 00:11:25,130
other and call them through API

00:11:21,920 --> 00:11:27,440
boundaries you know Diego is calling the

00:11:25,130 --> 00:11:29,240
garden API garden run si has its own

00:11:27,440 --> 00:11:31,250
little API in order to call this garden

00:11:29,240 --> 00:11:34,370
external network or component which then

00:11:31,250 --> 00:11:35,470
exposes the CA CNI API and then in red

00:11:34,370 --> 00:11:37,880
on the right you've got all these

00:11:35,470 --> 00:11:39,889
swappable CMI plugins that you could

00:11:37,880 --> 00:11:41,570
tear out these and if you wanted to you

00:11:39,889 --> 00:11:43,910
could put in your own network plug-in

00:11:41,570 --> 00:11:46,130
there and this is the path towards

00:11:43,910 --> 00:11:48,199
integrating third-party network

00:11:46,130 --> 00:11:50,420
solutions into cloud foundry if you if

00:11:48,199 --> 00:11:52,850
you're interested in that you can learn

00:11:50,420 --> 00:11:54,589
a lot more read our Doc's there's a link

00:11:52,850 --> 00:11:56,600
there at the bottom but the basic idea

00:11:54,589 --> 00:11:58,339
is you make a Bosch release for your C&I

00:11:56,600 --> 00:12:00,350
plugin and then you update your

00:11:58,339 --> 00:12:02,540
deployment manifest to set some

00:12:00,350 --> 00:12:05,389
properties and now cloud foundry will

00:12:02,540 --> 00:12:07,279
deploy with your networking plugin and

00:12:05,389 --> 00:12:09,709
this is how we're going to be

00:12:07,279 --> 00:12:10,850
integrating other other plugins to the

00:12:09,709 --> 00:12:15,620
cloud foundry which I'll talk about in a

00:12:10,850 --> 00:12:17,660
second for the wider CI community we're

00:12:15,620 --> 00:12:19,160
going to be or sort of polishing up

00:12:17,660 --> 00:12:21,380
support for ipv6 right now it's mostly

00:12:19,160 --> 00:12:24,680
done we're talking about adding a new

00:12:21,380 --> 00:12:26,420
verb to the standard we're talking about

00:12:24,680 --> 00:12:27,889
adding a performance test suite so that

00:12:26,420 --> 00:12:29,750
we can know that plugins are sort of

00:12:27,889 --> 00:12:30,709
doing the right thing and then we're

00:12:29,750 --> 00:12:34,220
gonna be doing some release management

00:12:30,709 --> 00:12:36,350
improvements in Cloud Foundry there's

00:12:34,220 --> 00:12:38,540
going to be more CNI Bosch releases

00:12:36,350 --> 00:12:40,720
coming out calico I think is working on

00:12:38,540 --> 00:12:44,240
one VMware is working on one for NSX

00:12:40,720 --> 00:12:46,990
this is kind of exciting so that's the

00:12:44,240 --> 00:12:46,990
end of the scene I stuff

00:12:48,310 --> 00:12:59,810
all right so the last bit is to talk

00:12:52,490 --> 00:13:02,980
about OCI images and in garden so to

00:12:59,810 --> 00:13:05,570
start with definition was in OCI image

00:13:02,980 --> 00:13:08,480
Constantinus introduced OCI the open

00:13:05,570 --> 00:13:10,610
container initiative before the OCI

00:13:08,480 --> 00:13:13,970
image this came a bit later it came

00:13:10,610 --> 00:13:17,060
around the end of 2015 and it

00:13:13,970 --> 00:13:18,620
essentially is describing the container

00:13:17,060 --> 00:13:24,620
image format it standardized in the

00:13:18,620 --> 00:13:26,840
container image format during the time

00:13:24,620 --> 00:13:28,730
that all CMS's became a thing

00:13:26,840 --> 00:13:30,860
there were already two main standards

00:13:28,730 --> 00:13:34,010
you are probably familiar with the

00:13:30,860 --> 00:13:35,330
docker image format standard which has

00:13:34,010 --> 00:13:36,680
been around for a while and it's very

00:13:35,330 --> 00:13:39,550
popular there are millions of documents

00:13:36,680 --> 00:13:45,920
out there and there is also the ab c--

00:13:39,550 --> 00:13:48,320
standard coming from korres on the other

00:13:45,920 --> 00:13:50,270
hand the Oceania math standard is not

00:13:48,320 --> 00:13:52,130
defining distribution because with

00:13:50,270 --> 00:13:54,230
docker you get the image format that you

00:13:52,130 --> 00:13:56,500
also get a distribution mechanism OCI

00:13:54,230 --> 00:13:59,750
does not have this as part of its scope

00:13:56,500 --> 00:14:02,000
so we're only talking about how an image

00:13:59,750 --> 00:14:04,580
looks like and now how you download an

00:14:02,000 --> 00:14:06,860
image in particular the image is

00:14:04,580 --> 00:14:09,620
composed of layers just like a docker

00:14:06,860 --> 00:14:11,330
image and the layers themselves are

00:14:09,620 --> 00:14:14,930
fully compatible with docker image

00:14:11,330 --> 00:14:19,360
layers the metadata are fairly different

00:14:14,930 --> 00:14:22,490
but there is a very well-defined process

00:14:19,360 --> 00:14:25,340
to convert a docker image to an Austria

00:14:22,490 --> 00:14:27,320
image and also to convert an Austria

00:14:25,340 --> 00:14:29,540
image into an aussie i runtime bundle

00:14:27,320 --> 00:14:31,610
which essentially means that you can get

00:14:29,540 --> 00:14:35,510
an RCA image and create a container out

00:14:31,610 --> 00:14:39,200
of it to say a few more things about

00:14:35,510 --> 00:14:40,850
layers essentially an image layer is the

00:14:39,200 --> 00:14:43,340
set of files directories you can think

00:14:40,850 --> 00:14:45,590
of it as IDs and then you're applying

00:14:43,340 --> 00:14:49,040
all these disks on top of each other to

00:14:45,590 --> 00:14:51,290
get an image if you are familiar with

00:14:49,040 --> 00:14:53,840
the docker file this is a reverse

00:14:51,290 --> 00:14:55,850
blocker file in which the the first line

00:14:53,840 --> 00:14:58,880
is at the at the bottom so you start

00:14:55,850 --> 00:15:00,360
from base limits as you may call it in

00:14:58,880 --> 00:15:02,999
this case is 5 and 3.5

00:15:00,360 --> 00:15:05,100
and when you when you say from your

00:15:02,999 --> 00:15:07,290
essentially pulling the layers of this

00:15:05,100 --> 00:15:08,910
base image into your container image

00:15:07,290 --> 00:15:10,889
that you're about to create and then the

00:15:08,910 --> 00:15:12,959
next line is that in your code is adding

00:15:10,889 --> 00:15:15,269
the contents of the current directory to

00:15:12,959 --> 00:15:17,220
slice my app this will create another

00:15:15,269 --> 00:15:19,529
layer which will contain all these files

00:15:17,220 --> 00:15:22,049
and directories that compose your

00:15:19,529 --> 00:15:23,910
codebase and the last line which is

00:15:22,049 --> 00:15:26,209
people install people said dependency

00:15:23,910 --> 00:15:27,959
management tool for Python and

00:15:26,209 --> 00:15:29,759
essentially will install our the

00:15:27,959 --> 00:15:32,189
dependencies of your in this case Python

00:15:29,759 --> 00:15:33,689
application which again will go into

00:15:32,189 --> 00:15:35,309
different layers so all the files and

00:15:33,689 --> 00:15:36,720
directories people will download and

00:15:35,309 --> 00:15:38,549
install will go into a separate layer

00:15:36,720 --> 00:15:43,110
that will be applied on top of your

00:15:38,549 --> 00:15:45,720
existing layers in terms of metadata we

00:15:43,110 --> 00:15:47,040
have a few JSON files so this is a the

00:15:45,720 --> 00:15:51,449
first one this is the index notation

00:15:47,040 --> 00:15:53,339
which defines an image and you can have

00:15:51,449 --> 00:15:56,429
one or more manifest you can see this is

00:15:53,339 --> 00:15:59,730
actually an array and the manifest is

00:15:56,429 --> 00:16:01,709
essentially another JSON file but every

00:15:59,730 --> 00:16:05,399
file in OCI image is defined by a

00:16:01,709 --> 00:16:08,579
content address shared to five 600

00:16:05,399 --> 00:16:10,949
address so then you have the manifest

00:16:08,579 --> 00:16:13,529
which points to a configuration file

00:16:10,949 --> 00:16:15,329
another jason and it points to a set of

00:16:13,529 --> 00:16:17,999
layers again we have an array here with

00:16:15,329 --> 00:16:21,749
a set of layers which are essentially

00:16:17,999 --> 00:16:24,959
turbo's the configuration has its own

00:16:21,749 --> 00:16:27,149
the data so it essentially tells the

00:16:24,959 --> 00:16:29,669
runtime but this is a the architecture

00:16:27,149 --> 00:16:31,319
so you can only run it in 1864 and some

00:16:29,669 --> 00:16:33,209
metadata like the environment variables

00:16:31,319 --> 00:16:36,019
in the command to run when you actually

00:16:33,209 --> 00:16:40,199
run the contain your base in this image

00:16:36,019 --> 00:16:42,749
so we would like to reduce garden runs

00:16:40,199 --> 00:16:44,519
even further and also use a CI which is

00:16:42,749 --> 00:16:47,389
why grid Affairs became a thing

00:16:44,519 --> 00:16:50,429
so it's an image plugin for garden and

00:16:47,389 --> 00:16:52,980
it makes garden even smaller because it

00:16:50,429 --> 00:16:57,259
removes the previously built in file

00:16:52,980 --> 00:17:01,799
system that garden was carrying around

00:16:57,259 --> 00:17:05,610
so grid FS yeah just to say a few more

00:17:01,799 --> 00:17:07,260
things and why we did this work so the

00:17:05,610 --> 00:17:09,839
previously built-in components called

00:17:07,260 --> 00:17:11,610
garden said you may have heard of it it

00:17:09,839 --> 00:17:13,270
has been largely an implementation

00:17:11,610 --> 00:17:14,740
detail of garden runs

00:17:13,270 --> 00:17:17,320
the problem with garden said is that

00:17:14,740 --> 00:17:19,180
this cloud base is now about three years

00:17:17,320 --> 00:17:20,830
old and it would be really hard to

00:17:19,180 --> 00:17:22,990
reflect the rates to add OCI image

00:17:20,830 --> 00:17:24,940
support the awesome and support in other

00:17:22,990 --> 00:17:27,220
hand is very beneficial for us because

00:17:24,940 --> 00:17:29,530
it unlocks a lot of features you may

00:17:27,220 --> 00:17:31,630
have heard of osteoid buildings and also

00:17:29,530 --> 00:17:34,480
treating all different container

00:17:31,630 --> 00:17:37,360
workloads the same way the ones that are

00:17:34,480 --> 00:17:39,700
built back base CF stacks and the ones

00:17:37,360 --> 00:17:42,280
that are docker based is very beneficial

00:17:39,700 --> 00:17:44,140
because we can do various optimizations

00:17:42,280 --> 00:17:45,510
in how we handle containers in class

00:17:44,140 --> 00:17:49,090
Factory

00:17:45,510 --> 00:17:50,920
so what is grid of us it's not a file

00:17:49,090 --> 00:17:53,860
system even though its name suggests

00:17:50,920 --> 00:17:55,450
that it is we like to call it a

00:17:53,860 --> 00:17:56,680
container image management tool which is

00:17:55,450 --> 00:18:01,030
not really a term you will find

00:17:56,680 --> 00:18:03,520
elsewhere and it's basically a tool that

00:18:01,030 --> 00:18:05,080
deals with the file system isolation of

00:18:03,520 --> 00:18:08,920
containers so it's container gets its

00:18:05,080 --> 00:18:10,930
own isolated file system it deals with

00:18:08,920 --> 00:18:11,980
cussing container images so you don't

00:18:10,930 --> 00:18:14,710
have to download the same image twice

00:18:11,980 --> 00:18:16,180
and it also deals with these quarters

00:18:14,710 --> 00:18:18,520
because cloud foundry has this

00:18:16,180 --> 00:18:20,920
peculiarity that it cannot really use

00:18:18,520 --> 00:18:22,990
user disk quotas because all the

00:18:20,920 --> 00:18:25,120
containers are using the same week up

00:18:22,990 --> 00:18:28,750
user so it has to use directory based

00:18:25,120 --> 00:18:32,650
Cultus for its container and this is

00:18:28,750 --> 00:18:34,300
hard this is very hard so we had a

00:18:32,650 --> 00:18:36,630
future ations we started using butter

00:18:34,300 --> 00:18:40,030
fast which I didn't work very well for

00:18:36,630 --> 00:18:43,330
the calendar scale what we ended up with

00:18:40,030 --> 00:18:45,630
is our current implementation of XFS for

00:18:43,330 --> 00:18:48,160
these quotas which has a very mature

00:18:45,630 --> 00:18:50,440
implementation of directory-based quotas

00:18:48,160 --> 00:18:52,900
they call it project quotas and we also

00:18:50,440 --> 00:18:57,130
use overlay for layers and forecasting

00:18:52,900 --> 00:18:59,500
these layers in terms of adoption in

00:18:57,130 --> 00:19:01,930
rollout we have been running with the

00:18:59,500 --> 00:19:05,440
Feist in PWS the pivotal web services

00:19:01,930 --> 00:19:08,410
since April this year I believe and it

00:19:05,440 --> 00:19:11,350
is shipped with PCF 1.12 so we are now

00:19:08,410 --> 00:19:13,470
looking into making it GA in the open

00:19:11,350 --> 00:19:16,060
source world there is an experimental

00:19:13,470 --> 00:19:19,150
file for CF deployment and there is also

00:19:16,060 --> 00:19:20,860
an experimental flag for Diego release

00:19:19,150 --> 00:19:22,540
generation manifest generation scripts

00:19:20,860 --> 00:19:25,510
so if you would like to make it a

00:19:22,540 --> 00:19:28,000
default if you have any concerns about a

00:19:25,510 --> 00:19:30,010
opting grid Affairs in your installation

00:19:28,000 --> 00:19:32,680
please come talk to me tomorrow and the

00:19:30,010 --> 00:19:35,470
crew defies office hours and with that

00:19:32,680 --> 00:19:41,590
I'm gonna give you to gape who's going

00:19:35,470 --> 00:19:44,350
to talk about the future all right so

00:19:41,590 --> 00:19:46,630
with all these standards it's pretty

00:19:44,350 --> 00:19:48,280
great we get a much smaller garden and

00:19:46,630 --> 00:19:51,370
we get a much more extensible Cloud

00:19:48,280 --> 00:19:53,980
Foundry using a CI runtime we can run

00:19:51,370 --> 00:19:56,200
containers on run C on Linux Wednesday

00:19:53,980 --> 00:19:58,330
on Windows maybe clear containers maybe

00:19:56,200 --> 00:19:59,890
other container runners in the future

00:19:58,330 --> 00:20:02,500
because we're complying with that

00:19:59,890 --> 00:20:04,360
standard because we have CNI support in

00:20:02,500 --> 00:20:05,710
there we can use all these various and

00:20:04,360 --> 00:20:07,150
networking plugins to plug into the

00:20:05,710 --> 00:20:09,670
various software-defined networking

00:20:07,150 --> 00:20:11,830
solutions cloud networking solutions and

00:20:09,670 --> 00:20:14,470
whatnot and because we have this o CI

00:20:11,830 --> 00:20:16,830
image thing going we can support all

00:20:14,470 --> 00:20:19,420
these various types of image images

00:20:16,830 --> 00:20:21,820
legacy droplets for Cloud Foundry docker

00:20:19,420 --> 00:20:24,370
images OCI images next-generation build

00:20:21,820 --> 00:20:26,740
packs all sorts of other cool stuff and

00:20:24,370 --> 00:20:28,420
this is this is the story of like moving

00:20:26,740 --> 00:20:30,670
towards standards and making it so we

00:20:28,420 --> 00:20:33,070
have less code to support and that's

00:20:30,670 --> 00:20:35,140
really great so this this encourages

00:20:33,070 --> 00:20:37,870
innovation it's cross-platform support

00:20:35,140 --> 00:20:39,130
as much easier portability is better and

00:20:37,870 --> 00:20:41,080
less the vendor lock-in so these are all

00:20:39,130 --> 00:20:44,230
great things for an open-source project

00:20:41,080 --> 00:20:48,030
and with that thank you and we'll take

00:20:44,230 --> 00:20:48,030
some questions if you have any

00:20:50,100 --> 00:20:54,180
[Applause]

00:20:58,670 --> 00:21:01,799
[Music]

00:21:11,370 --> 00:21:16,470
I didn't even actually mention in tool

00:21:14,220 --> 00:21:19,440
there are many tools for instance one of

00:21:16,470 --> 00:21:21,090
them is Capel that you could use what I

00:21:19,440 --> 00:21:23,250
try to say well try to convey is that

00:21:21,090 --> 00:21:25,470
there is a defined process and there's a

00:21:23,250 --> 00:21:27,120
standard process of doing so so the

00:21:25,470 --> 00:21:28,799
implementation you can find many

00:21:27,120 --> 00:21:30,269
implementations Capo is the one I would

00:21:28,799 --> 00:21:33,570
suggest because that's what we use to

00:21:30,269 --> 00:21:37,980
convert docker to OCI but yeah they're

00:21:33,570 --> 00:21:45,380
more than that anything else other

00:21:37,980 --> 00:21:45,380
questions cool thanks for your time

00:21:46,890 --> 00:21:50,009

YouTube URL: https://www.youtube.com/watch?v=T4OJwoQCpt4


