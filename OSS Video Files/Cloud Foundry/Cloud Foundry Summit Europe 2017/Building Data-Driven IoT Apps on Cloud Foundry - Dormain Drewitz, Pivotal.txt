Title: Building Data-Driven IoT Apps on Cloud Foundry - Dormain Drewitz, Pivotal
Publication date: 2017-10-18
Playlist: Cloud Foundry Summit Europe 2017
Description: 
	Building Data-Driven IoT Apps on Cloud Foundry - Dormain Drewitz, Pivotal

On the other end of every connected device is an application. Actually, many applications. But what about the data? One of the most pressing challenges in the Internet of Things is the flood of streaming data. How do we build applications that can make use of that data? What do we need to change about how we process and analyze that data?

Whoa, whoa, whoa - hang on a minute. Is this about Cloud Foundry or data? It couldn't possibly be both.

Or could it?

Believe it or not, Cloud Foundry has a valuable role to play in supporting *data-driven* IoT applications. In this talk, Dormain Drewitz will provide a model for building IoT applications and illustrate how Cloud Foundry fits in. When combined with Cloud Foundry, projects like Spring Cloud Stream are changing the game for IoT apps.

About Dormain Drewitz
Dormain leads Product Marketing for Pivotal Platform Ecosystem, including GemFire, Pivotal's Cloud Foundry Services offerings, and ISV offerings for Pivotal Cloud Foundry. She has published extensively on cloud computing topics for ten years, demystifying the changing requirements of the infrastructure software stack. She’s presented at the Gartner Application Architecture, Development, and Integration Summit; Cloud Foundry Summit Silicon Valley; MuleSoft CONNECT; and more. Previously, she was Director of Product Marketing for Pivotal’s Mobile offerings and Big Data Suite. She was Director of Platform Marketing at Riverbed Technology, covering a breadth of application performance solutions. Prior to Riverbed, she spent over 5 years as a technology investment analyst, closely following enterprise infrastructure software companies and industry trends. Dormain holds a B. A. in History from the University of California at Los Angeles.
Captions: 
	00:00:00,030 --> 00:00:05,520
hello everyone.welcome I mean are you

00:00:02,669 --> 00:00:08,220
talking about a really nice big meaty

00:00:05,520 --> 00:00:09,780
topic which you could actually spend an

00:00:08,220 --> 00:00:10,860
entire two day conference like this

00:00:09,780 --> 00:00:13,830
unpacking

00:00:10,860 --> 00:00:15,900
so I started pulling this together

00:00:13,830 --> 00:00:17,850
thinking like oh yeah I can totally do

00:00:15,900 --> 00:00:20,660
like a 30 minute talk about data-driven

00:00:17,850 --> 00:00:25,380
IOT apps on cloud foundry totes and

00:00:20,660 --> 00:00:28,640
which is California and for totally and

00:00:25,380 --> 00:00:32,910
as I started pulling together i rapidly

00:00:28,640 --> 00:00:38,070
arrived at like 50 slides for for 30

00:00:32,910 --> 00:00:39,210
minutes so we cut some down by the way

00:00:38,070 --> 00:00:41,579
my name is doorman Dreiwitz

00:00:39,210 --> 00:00:43,260
I work at pivotal you can find me on the

00:00:41,579 --> 00:00:44,730
Twitter's my handle was there but now

00:00:43,260 --> 00:00:46,980
it's gone

00:00:44,730 --> 00:00:48,480
so the agenda what we're gonna walk

00:00:46,980 --> 00:00:50,430
through talk a little bit about

00:00:48,480 --> 00:00:53,430
event-driven architectures because I

00:00:50,430 --> 00:00:56,010
think that that's kind of relevant for

00:00:53,430 --> 00:00:57,059
IOT things but there's a good compare

00:00:56,010 --> 00:00:58,340
and contrast I think that needs to

00:00:57,059 --> 00:01:00,359
happen because it's not that

00:00:58,340 --> 00:01:03,629
request/response architectures aren't

00:01:00,359 --> 00:01:06,530
still useful we'll talk a little bit

00:01:03,629 --> 00:01:08,070
about streaming data integration and

00:01:06,530 --> 00:01:11,520
specifically highlighting a

00:01:08,070 --> 00:01:13,920
micro-services approach so I'm sure a

00:01:11,520 --> 00:01:15,630
lot of folks here I'm not gonna upset

00:01:13,920 --> 00:01:17,759
anyone's shoulder injuries and ask the

00:01:15,630 --> 00:01:20,280
question I'm gonna sort of assume

00:01:17,759 --> 00:01:22,409
everyone here is kind of into the

00:01:20,280 --> 00:01:25,259
concepts of microservices and why

00:01:22,409 --> 00:01:26,729
they're a good idea and useful of course

00:01:25,259 --> 00:01:28,799
that there are challenges and trade-offs

00:01:26,729 --> 00:01:30,240
and work that go into them I'm not gonna

00:01:28,799 --> 00:01:31,710
rehash all that there's lots of great

00:01:30,240 --> 00:01:35,369
talks here that that go into that in

00:01:31,710 --> 00:01:37,140
better detail then where's the cash it's

00:01:35,369 --> 00:01:40,320
a little bit of a play on words like

00:01:37,140 --> 00:01:42,119
where's the catch talk a little bit

00:01:40,320 --> 00:01:43,979
about more integration because there's

00:01:42,119 --> 00:01:46,530
like other types of integration that are

00:01:43,979 --> 00:01:49,320
super relevant here and then I've got a

00:01:46,530 --> 00:01:51,270
few resources some things that are not

00:01:49,320 --> 00:01:55,740
in scope for this talk because I

00:01:51,270 --> 00:01:59,040
couldn't sprawl infinitely things like

00:01:55,740 --> 00:02:02,430
security monitoring for example there's

00:01:59,040 --> 00:02:04,469
actually I was just learning recently GE

00:02:02,430 --> 00:02:06,990
apparently is using the the UA a

00:02:04,469 --> 00:02:09,649
capability in cloud foundry for their

00:02:06,990 --> 00:02:12,030
device authentication super interesting

00:02:09,649 --> 00:02:14,280
couldn't fit it into this one so I have

00:02:12,030 --> 00:02:17,400
to sort of just point you to

00:02:14,280 --> 00:02:18,810
finding that particular resource and

00:02:17,400 --> 00:02:22,260
there's other obviously important

00:02:18,810 --> 00:02:24,359
security topics monitoring also always

00:02:22,260 --> 00:02:28,519
important again I'm not really gonna go

00:02:24,359 --> 00:02:32,129
there so just to kind of get started so

00:02:28,519 --> 00:02:35,489
the the backdrop of this is really like

00:02:32,129 --> 00:02:40,680
I think Cloud Foundry is a really useful

00:02:35,489 --> 00:02:43,680
platform for building IOT apps there's

00:02:40,680 --> 00:02:45,750
also this sort of emergence of the

00:02:43,680 --> 00:02:50,180
notion of an IOT platform and a lot of

00:02:45,750 --> 00:02:53,159
IOT solutions so I I came across this

00:02:50,180 --> 00:02:56,310
projection forecast I'm not sure exactly

00:02:53,159 --> 00:02:59,090
what the word Gartner uses but they sort

00:02:56,310 --> 00:03:02,280
of said ok you know in within 5 years

00:02:59,090 --> 00:03:05,340
70% of the software capabilities

00:03:02,280 --> 00:03:08,150
required for an IT solution are gonna be

00:03:05,340 --> 00:03:12,120
just part of standard cloud stacks and

00:03:08,150 --> 00:03:13,919
and that's up from less than 20% today

00:03:12,120 --> 00:03:15,840
so basically in the next five years

00:03:13,919 --> 00:03:17,609
we're gonna see this huge shift where a

00:03:15,840 --> 00:03:19,949
lot of IOT capabilities are just gonna

00:03:17,609 --> 00:03:21,930
get baked into more horizontal

00:03:19,949 --> 00:03:25,260
general-purpose cloud platforms

00:03:21,930 --> 00:03:28,229
I think Cloud Foundry stands to benefit

00:03:25,260 --> 00:03:29,760
from some of that and already you

00:03:28,229 --> 00:03:31,260
support some of these things today so I

00:03:29,760 --> 00:03:34,530
guess what we're maybe talking about is

00:03:31,260 --> 00:03:36,239
that that less than 20% slice there's

00:03:34,530 --> 00:03:39,870
also a corresponding prediction which is

00:03:36,239 --> 00:03:41,220
about pure-play IOT solutions certain

00:03:39,870 --> 00:03:43,829
percentage of those going away within

00:03:41,220 --> 00:03:45,599
the same five year period so let's talk

00:03:43,829 --> 00:03:47,190
a little bit about event-driven

00:03:45,599 --> 00:03:48,989
architectures this is something that

00:03:47,190 --> 00:03:50,329
I've been kind of trying to wrap my own

00:03:48,989 --> 00:03:52,340
head around as opposed to

00:03:50,329 --> 00:03:56,639
request/response architectures

00:03:52,340 --> 00:03:59,189
definitely important for IOT and the way

00:03:56,639 --> 00:04:01,409
that I kind of rationalized this to

00:03:59,189 --> 00:04:04,169
myself was to think about it in terms of

00:04:01,409 --> 00:04:07,560
you know connected devices are really

00:04:04,169 --> 00:04:11,009
like reality TV celebrities they're like

00:04:07,560 --> 00:04:12,569
popping up like crazy and so I you know

00:04:11,009 --> 00:04:16,169
I don't think Gartner does predictions

00:04:12,569 --> 00:04:18,389
on or IDC or forced or not to like play

00:04:16,169 --> 00:04:21,359
favorites with anyone predictions on you

00:04:18,389 --> 00:04:23,639
know what how many reality TV celebs are

00:04:21,359 --> 00:04:24,810
going to exist in five years they'd like

00:04:23,639 --> 00:04:26,940
to do that with the number of kin

00:04:24,810 --> 00:04:28,380
two devices but it's essentially like

00:04:26,940 --> 00:04:30,120
the same thing and they're very there's

00:04:28,380 --> 00:04:34,080
all these events that are like happening

00:04:30,120 --> 00:04:35,280
to them right so Macy the teen mom I

00:04:34,080 --> 00:04:38,160
don't know

00:04:35,280 --> 00:04:39,300
does anyone here watch teen moms Oh see

00:04:38,160 --> 00:04:42,600
those shoulder injuries

00:04:39,300 --> 00:04:46,980
they're kicking in so she's back with

00:04:42,600 --> 00:04:49,919
Ryan oh my gosh that just happened to

00:04:46,980 --> 00:04:51,180
her apparently I care I don't know but

00:04:49,919 --> 00:04:54,540
nonetheless there's all these events

00:04:51,180 --> 00:04:58,169
that are happening out there too these

00:04:54,540 --> 00:05:01,800
things just like all these reality TV

00:04:58,169 --> 00:05:02,970
people and and and we sort of find out

00:05:01,800 --> 00:05:04,620
about them I think it's kind of

00:05:02,970 --> 00:05:06,840
interesting that there's a lot of

00:05:04,620 --> 00:05:08,639
different Cadence's in which we sort of

00:05:06,840 --> 00:05:12,389
find out and that like different levels

00:05:08,639 --> 00:05:15,479
of details so you know I might see

00:05:12,389 --> 00:05:17,430
something come across Twitter you know I

00:05:15,479 --> 00:05:20,610
like daily it's like oh no come on

00:05:17,430 --> 00:05:22,020
really it's like hourly but but there's

00:05:20,610 --> 00:05:24,210
a really tiny snippet so I might just

00:05:22,020 --> 00:05:26,130
get the headline of like you know Macy's

00:05:24,210 --> 00:05:29,400
is back with Ryan I don't know who these

00:05:26,130 --> 00:05:31,380
people are and then on a weekly basis

00:05:29,400 --> 00:05:33,780
you know we might be going through the

00:05:31,380 --> 00:05:36,180
shopping cart line and at least in the

00:05:33,780 --> 00:05:38,130
u.s. there's all the the sort of

00:05:36,180 --> 00:05:41,580
celebrity magazines are right there on

00:05:38,130 --> 00:05:43,140
the the checkout counter and you know

00:05:41,580 --> 00:05:44,400
you have a little bit more time to leave

00:05:43,140 --> 00:05:47,220
the headline and then maybe like the

00:05:44,400 --> 00:05:48,870
little blurb below it absorb a little

00:05:47,220 --> 00:05:51,030
bit more information about what's

00:05:48,870 --> 00:05:53,010
happening and then there's maybe

00:05:51,030 --> 00:05:54,720
annually when I'm sitting at the

00:05:53,010 --> 00:05:56,639
doctor's office or the dentist office

00:05:54,720 --> 00:06:00,030
which I go to the dentist twice a year

00:05:56,639 --> 00:06:01,590
thank you very much you know then I'm

00:06:00,030 --> 00:06:03,180
actually maybe sitting there waiting and

00:06:01,590 --> 00:06:06,389
I might flip through and read actual

00:06:03,180 --> 00:06:08,070
paragraphs in you know in the u.s. we

00:06:06,389 --> 00:06:11,490
have People magazine I was like I've got

00:06:08,070 --> 00:06:14,340
a tailor this for like a European

00:06:11,490 --> 00:06:18,389
audience but it's really hard to do

00:06:14,340 --> 00:06:21,900
research on foreign language magazines

00:06:18,389 --> 00:06:24,270
and reality TV stars so I ended up just

00:06:21,900 --> 00:06:26,820
defaulting to the UK because I speak

00:06:24,270 --> 00:06:28,710
English so okay magazine is apparently

00:06:26,820 --> 00:06:33,750
like the equivalent of People magazine

00:06:28,710 --> 00:06:36,659
in the UK so another way I think of

00:06:33,750 --> 00:06:38,430
thinking about this is okay maybe this

00:06:36,659 --> 00:06:42,030
is a better more accessible example

00:06:38,430 --> 00:06:43,650
is your like a soccer team right when

00:06:42,030 --> 00:06:47,400
they play a game that's just happening

00:06:43,650 --> 00:06:50,520
right and we tuned into it when it's

00:06:47,400 --> 00:06:52,230
happening but then there's like oh maybe

00:06:50,520 --> 00:06:54,360
I want to choose something and it's

00:06:52,230 --> 00:06:57,150
really about me and what I want to watch

00:06:54,360 --> 00:06:59,310
that's a little bit more of the

00:06:57,150 --> 00:07:00,750
experience where okay you're on say

00:06:59,310 --> 00:07:03,600
Netflix and you're picking what you're

00:07:00,750 --> 00:07:04,470
gonna watch that day so I think this is

00:07:03,600 --> 00:07:07,770
interesting because I think actually

00:07:04,470 --> 00:07:09,930
both of these scenarios are important

00:07:07,770 --> 00:07:12,480
and relevant when dealing with connected

00:07:09,930 --> 00:07:14,340
devices the devices are out there and

00:07:12,480 --> 00:07:16,920
events are happening and there's gonna

00:07:14,340 --> 00:07:20,640
be just you know a stream where you can

00:07:16,920 --> 00:07:22,710
just tune in at any point of what's

00:07:20,640 --> 00:07:24,240
happening to these devices and that's

00:07:22,710 --> 00:07:26,040
useful for certain things but there's

00:07:24,240 --> 00:07:28,320
also gonna be a mode where it's like now

00:07:26,040 --> 00:07:29,400
I care about it now I want to find out

00:07:28,320 --> 00:07:31,710
what's going on

00:07:29,400 --> 00:07:33,780
or I want to you know interact with this

00:07:31,710 --> 00:07:36,030
device and that's where a request

00:07:33,780 --> 00:07:36,750
response model is going to be really

00:07:36,030 --> 00:07:40,890
important

00:07:36,750 --> 00:07:43,740
so anyways one of them one situation is

00:07:40,890 --> 00:07:45,090
about them and one situation is kind of

00:07:43,740 --> 00:07:46,470
about you is another way to think about

00:07:45,090 --> 00:07:48,600
it but we don't have to go too far with

00:07:46,470 --> 00:07:50,430
this analogy because it will start to

00:07:48,600 --> 00:07:52,590
break down all good analogies break down

00:07:50,430 --> 00:07:57,030
at some point it's just a fact of life

00:07:52,590 --> 00:07:58,530
so instead I've decided to take my like

00:07:57,030 --> 00:08:00,990
lightweight super high-level

00:07:58,530 --> 00:08:03,090
architecture as the Internet of Macy

00:08:00,990 --> 00:08:05,640
in honor of the fact that you know stuff

00:08:03,090 --> 00:08:07,470
is just happening to Macy maybe without

00:08:05,640 --> 00:08:09,870
her control either I don't know it's

00:08:07,470 --> 00:08:12,840
tough to be a team these days um

00:08:09,870 --> 00:08:15,210
and so this is sort of the the backdrop

00:08:12,840 --> 00:08:18,150
of our event-driven architecture which

00:08:15,210 --> 00:08:20,490
is then feeding into applications so

00:08:18,150 --> 00:08:21,930
let's kind of think through and walk

00:08:20,490 --> 00:08:25,320
through some elements of the the

00:08:21,930 --> 00:08:27,240
Internet of Macy and we'll start with

00:08:25,320 --> 00:08:29,460
this kind of big chunk in the middle and

00:08:27,240 --> 00:08:33,140
because this is where a lot of the data

00:08:29,460 --> 00:08:35,940
integration happens now I'll pause T oh

00:08:33,140 --> 00:08:38,100
and I was just having a conversation

00:08:35,940 --> 00:08:40,320
with my colleague Duncan about this and

00:08:38,100 --> 00:08:41,880
what I felt like I really should

00:08:40,320 --> 00:08:43,890
acknowledge a lot of a bit like

00:08:41,880 --> 00:08:46,230
processing of data is actually moving

00:08:43,890 --> 00:08:48,180
further and further towards the edge and

00:08:46,230 --> 00:08:50,970
so back here we have those IOT gateways

00:08:48,180 --> 00:08:52,260
and edge platforms and so to some degree

00:08:50,970 --> 00:08:55,470
there's a whole interest

00:08:52,260 --> 00:08:57,660
seeing thread to pull on around how

00:08:55,470 --> 00:09:00,090
you're doing the processing and and some

00:08:57,660 --> 00:09:03,180
of that data integration closer to the

00:09:00,090 --> 00:09:04,650
devices closer to may see really we're

00:09:03,180 --> 00:09:08,150
gonna be talking about once it kind of

00:09:04,650 --> 00:09:11,730
hits a more central cloud platform

00:09:08,150 --> 00:09:15,630
so there's taking a micro services

00:09:11,730 --> 00:09:17,720
approach to a streaming data integration

00:09:15,630 --> 00:09:22,130
pipeline

00:09:17,720 --> 00:09:25,290
this is really part of just a broader

00:09:22,130 --> 00:09:27,420
picture that's coming together for a lot

00:09:25,290 --> 00:09:30,120
of organizations around just digital

00:09:27,420 --> 00:09:32,880
business and so that's the umbrella this

00:09:30,120 --> 00:09:36,480
is not unique to IOT is my point here

00:09:32,880 --> 00:09:39,090
but the the benefits that you can

00:09:36,480 --> 00:09:43,290
extract from this with continuous data

00:09:39,090 --> 00:09:46,530
integration and event-driven processing

00:09:43,290 --> 00:09:48,210
you know they they do apply to IOT they

00:09:46,530 --> 00:09:49,830
also apply to some other things that's

00:09:48,210 --> 00:09:50,970
kind of the main point of this slide but

00:09:49,830 --> 00:09:53,220
you've got that lower latency

00:09:50,970 --> 00:09:54,990
decision-making you want to be able to

00:09:53,220 --> 00:09:57,180
incorporate multiple data sources so not

00:09:54,990 --> 00:09:58,950
just what's happening to Macy but you

00:09:57,180 --> 00:10:00,360
might want to you know get weather data

00:09:58,950 --> 00:10:01,800
because that might be affecting what

00:10:00,360 --> 00:10:05,130
Macy is wearing that day because that's

00:10:01,800 --> 00:10:06,960
going to end up on Twitter and then you

00:10:05,130 --> 00:10:08,760
also need to continuously train those

00:10:06,960 --> 00:10:10,500
models so that's something to factor in

00:10:08,760 --> 00:10:11,970
where it's like maybe that's not

00:10:10,500 --> 00:10:14,250
actually happening on a streaming

00:10:11,970 --> 00:10:17,400
cadence that's happening on a batch

00:10:14,250 --> 00:10:19,830
cadence right sort of like the the depth

00:10:17,400 --> 00:10:21,150
of information you might want to be

00:10:19,830 --> 00:10:23,870
getting at a different time that might

00:10:21,150 --> 00:10:26,430
have implications so and then there's

00:10:23,870 --> 00:10:30,270
another interesting idea we're really

00:10:26,430 --> 00:10:33,030
being able to do this well is sort of a

00:10:30,270 --> 00:10:34,800
prerequisite for serverless and function

00:10:33,030 --> 00:10:36,300
as a service regardless of the use case

00:10:34,800 --> 00:10:40,700
whether it's the Internet of Maisie or

00:10:36,300 --> 00:10:43,290
not just being able to have a grasp of

00:10:40,700 --> 00:10:45,980
you know what a building an efficient

00:10:43,290 --> 00:10:49,290
event-driven architecture and how a

00:10:45,980 --> 00:10:51,270
moving towards a micro service model for

00:10:49,290 --> 00:10:52,530
that is going to really set you up to

00:10:51,270 --> 00:10:55,290
then start to take advantage of

00:10:52,530 --> 00:10:59,520
serverless and function as a service so

00:10:55,290 --> 00:11:01,460
one of the tools I wanted to introduce

00:10:59,520 --> 00:11:05,699
for folks if they haven't heard about it

00:11:01,460 --> 00:11:08,369
for this and which runs on cloud foundry

00:11:05,699 --> 00:11:14,459
is spring cloud dataflow so this is a

00:11:08,369 --> 00:11:16,439
micro services based data pipeline tool

00:11:14,459 --> 00:11:19,739
you can orchestrate both streaming and

00:11:16,439 --> 00:11:22,139
batch Cadence's of data processing and

00:11:19,739 --> 00:11:22,949
it being part of this sort of spring

00:11:22,139 --> 00:11:25,859
family

00:11:22,949 --> 00:11:29,910
it actually makes use of each of these

00:11:25,859 --> 00:11:32,399
stages as spring boot applications right

00:11:29,910 --> 00:11:33,809
so each one of those steps in the

00:11:32,399 --> 00:11:35,220
process you know I'm going to ingest

00:11:33,809 --> 00:11:36,689
data from here I'm gonna interest data

00:11:35,220 --> 00:11:39,299
from all these different sources because

00:11:36,689 --> 00:11:41,040
it's not just about Macy it's about you

00:11:39,299 --> 00:11:43,109
know all these other things that might

00:11:41,040 --> 00:11:46,410
be relevant to understanding what's

00:11:43,109 --> 00:11:47,910
going on with Macy's world but then I'm

00:11:46,410 --> 00:11:50,209
gonna have to parse and filter and

00:11:47,910 --> 00:11:53,369
enrich that data each one of those

00:11:50,209 --> 00:11:56,100
processing steps again an individual

00:11:53,369 --> 00:11:57,829
service perhaps a spring boot service if

00:11:56,100 --> 00:12:00,359
you're using spring cloud dataflow and

00:11:57,829 --> 00:12:02,519
you get a number of developer benefits

00:12:00,359 --> 00:12:05,069
from this when you start to lay that

00:12:02,519 --> 00:12:08,009
though that pipeline of spring boot apps

00:12:05,069 --> 00:12:10,919
on top of Cloud Foundry so you're now

00:12:08,009 --> 00:12:13,199
getting that that unified model for

00:12:10,919 --> 00:12:16,949
handling both my my streaming and my

00:12:13,199 --> 00:12:19,799
batch processing that I have to do as

00:12:16,949 --> 00:12:21,329
well as you know all the benefits of

00:12:19,799 --> 00:12:25,019
being able to continuously integrate

00:12:21,329 --> 00:12:26,910
continuously deploy those individual

00:12:25,019 --> 00:12:31,019
application right so you're you're

00:12:26,910 --> 00:12:33,419
decoupling that entire pipeline so and

00:12:31,019 --> 00:12:35,999
then some operator benefits that your if

00:12:33,419 --> 00:12:37,980
you're familiar with Cloud Foundry this

00:12:35,999 --> 00:12:39,480
is just like any other application

00:12:37,980 --> 00:12:40,919
running on Cloud Foundry that you now

00:12:39,480 --> 00:12:45,499
get the benefit of but you're actually

00:12:40,919 --> 00:12:48,299
supporting this this data pipeline and

00:12:45,499 --> 00:12:50,189
it's a messaging driven pipeline you can

00:12:48,299 --> 00:12:53,999
actually bind these different services

00:12:50,189 --> 00:12:56,699
using a number of different messaging

00:12:53,999 --> 00:12:59,519
based services or event log services so

00:12:56,699 --> 00:13:03,379
whether it's Kafka or RabbitMQ or solace

00:12:59,519 --> 00:13:06,059
or some other messaging architecture

00:13:03,379 --> 00:13:09,239
because that's gonna be really important

00:13:06,059 --> 00:13:11,339
as you need to support this as an event

00:13:09,239 --> 00:13:14,579
stream as opposed to a request response

00:13:11,339 --> 00:13:17,180
mode so an example this was a customer

00:13:14,579 --> 00:13:21,320
who presented a little while ago

00:13:17,180 --> 00:13:25,040
CoreLogic in the u.s. they are a major

00:13:21,320 --> 00:13:27,620
player in the the mortgage industry but

00:13:25,040 --> 00:13:29,990
kind of a lot behind the scenes so they

00:13:27,620 --> 00:13:32,029
were processing a lot of data and they

00:13:29,990 --> 00:13:34,520
they started using spring cloud data

00:13:32,029 --> 00:13:36,500
flow and what they described it as is

00:13:34,520 --> 00:13:38,720
building this on-demand data man of

00:13:36,500 --> 00:13:41,750
manufacturing in this case it wasn't for

00:13:38,720 --> 00:13:44,930
a connected device but the model the

00:13:41,750 --> 00:13:47,690
architecture is totally applicable to a

00:13:44,930 --> 00:13:49,790
stream of events coming in from you know

00:13:47,690 --> 00:13:52,520
the Macy's of the world connected

00:13:49,790 --> 00:13:54,260
devices as opposed to just people

00:13:52,520 --> 00:13:56,870
applying for mortgages or something and

00:13:54,260 --> 00:13:58,940
those kinds of events off of a web-based

00:13:56,870 --> 00:14:01,400
application now of course the difference

00:13:58,940 --> 00:14:04,880
is you know there's going to be that

00:14:01,400 --> 00:14:07,790
edge tear gateways and and edge

00:14:04,880 --> 00:14:10,790
platforms between those connected

00:14:07,790 --> 00:14:13,670
devices the Macy's and the and the

00:14:10,790 --> 00:14:15,620
pipeline that you see here now the other

00:14:13,670 --> 00:14:17,089
thing I wanted to highlight is that that

00:14:15,620 --> 00:14:19,370
place where you know we're gonna

00:14:17,089 --> 00:14:21,260
actually send some of this data down you

00:14:19,370 --> 00:14:23,120
can tap these different streams at

00:14:21,260 --> 00:14:24,740
different points maybe after you've

00:14:23,120 --> 00:14:30,410
enriched that data that becomes a good

00:14:24,740 --> 00:14:32,779
point to store it persist it into a data

00:14:30,410 --> 00:14:37,160
warehouse so that you can then run those

00:14:32,779 --> 00:14:40,670
deeper long you know time line analytics

00:14:37,160 --> 00:14:43,700
against it as you train those models

00:14:40,670 --> 00:14:46,220
having a way to push that output

00:14:43,700 --> 00:14:49,220
whatever the freshest model is back in

00:14:46,220 --> 00:14:51,080
front of the the pipeline of data so

00:14:49,220 --> 00:14:53,570
you're constantly scoring against an

00:14:51,080 --> 00:14:57,500
updated model that's really useful in

00:14:53,570 --> 00:15:00,140
terms of the the need to continuously

00:14:57,500 --> 00:15:03,920
train models for doing whatever if it's

00:15:00,140 --> 00:15:07,160
predictive maintenance for a connected

00:15:03,920 --> 00:15:09,230
device you want to have the the freshest

00:15:07,160 --> 00:15:11,290
models and that one other thing to point

00:15:09,230 --> 00:15:18,620
out here is that variety of data sources

00:15:11,290 --> 00:15:21,230
things like data coming in from a you

00:15:18,620 --> 00:15:23,600
know a support tool right and that might

00:15:21,230 --> 00:15:25,940
even be like a hosted support tool SAS

00:15:23,600 --> 00:15:28,190
based and that's that's where all of

00:15:25,940 --> 00:15:29,400
your data from customers reporting

00:15:28,190 --> 00:15:31,410
incidents is kind of

00:15:29,400 --> 00:15:33,150
and you want to be able to marry that

00:15:31,410 --> 00:15:35,040
somewhere do analytic so that you can

00:15:33,150 --> 00:15:37,530
understand perhaps where you can start

00:15:35,040 --> 00:15:40,200
to predict where support incidents that

00:15:37,530 --> 00:15:42,570
are coming from so that's that's an

00:15:40,200 --> 00:15:45,030
important step that's in many ways

00:15:42,570 --> 00:15:47,220
happening is like an offline process to

00:15:45,030 --> 00:15:48,720
the rest of the stream and so having a

00:15:47,220 --> 00:15:51,150
way to integrate the two I think is

00:15:48,720 --> 00:15:53,790
really useful now I promised a little

00:15:51,150 --> 00:15:57,450
bit of kind of hinting at where this

00:15:53,790 --> 00:16:02,220
then takes you for functions as a

00:15:57,450 --> 00:16:04,740
service and server less and this is this

00:16:02,220 --> 00:16:07,380
is the diagram from a recent post by

00:16:04,740 --> 00:16:10,230
Kenny Bustani as one of our spring

00:16:07,380 --> 00:16:13,140
developer advocates and here he sort of

00:16:10,230 --> 00:16:16,350
he lays out this concept of the service

00:16:13,140 --> 00:16:18,090
core where you have a long-running

00:16:16,350 --> 00:16:20,880
service and here in this case it's a

00:16:18,090 --> 00:16:23,790
spring boot app and then there are short

00:16:20,880 --> 00:16:26,940
running processes that in this case he's

00:16:23,790 --> 00:16:29,310
using Amazon's lamda service to then

00:16:26,940 --> 00:16:31,260
fire off those different processes in

00:16:29,310 --> 00:16:32,790
this case one of them is a you know a

00:16:31,260 --> 00:16:34,620
state machine function another one is a

00:16:32,790 --> 00:16:37,410
can't remember that the name of the

00:16:34,620 --> 00:16:41,100
other one but there's a metrics function

00:16:37,410 --> 00:16:45,240
and so you can imagine laying that on

00:16:41,100 --> 00:16:46,920
top of one of these stream spring cloud

00:16:45,240 --> 00:16:49,410
data flow processes I think that that

00:16:46,920 --> 00:16:53,580
could start to get really interesting

00:16:49,410 --> 00:16:56,850
the other thing is I'm gonna blink on it

00:16:53,580 --> 00:16:58,590
oh the he's promised at the end of this

00:16:56,850 --> 00:17:02,460
by the way the the blog post has some

00:16:58,590 --> 00:17:04,020
great pointers to sample code and sample

00:17:02,460 --> 00:17:07,110
demo app that you can play around with

00:17:04,020 --> 00:17:08,430
he's he's hinted at the next stage of

00:17:07,110 --> 00:17:10,260
this is actually going to be running all

00:17:08,430 --> 00:17:11,520
this on Cloud Foundry so that's one

00:17:10,260 --> 00:17:13,260
reason why I bring it up here to this

00:17:11,520 --> 00:17:17,160
audience says I really think this is a

00:17:13,260 --> 00:17:19,770
watch this space kind of place that is

00:17:17,160 --> 00:17:22,230
very relevant to building these IOT apps

00:17:19,770 --> 00:17:24,120
I think it's a little early there's not

00:17:22,230 --> 00:17:25,620
a ton there but if you're super

00:17:24,120 --> 00:17:28,920
interested in this I would watch this

00:17:25,620 --> 00:17:32,130
space so now let's dive a little bit

00:17:28,920 --> 00:17:35,070
into kind of where we've sort of done

00:17:32,130 --> 00:17:36,840
that stream processing some amount of

00:17:35,070 --> 00:17:39,120
batch processing to train those models

00:17:36,840 --> 00:17:41,160
but now it's gonna it's gonna surface up

00:17:39,120 --> 00:17:42,410
in an app because if the end of the day

00:17:41,160 --> 00:17:44,690
there's often a

00:17:42,410 --> 00:17:46,460
on the other side of this connected

00:17:44,690 --> 00:17:48,110
device and there they're using an app

00:17:46,460 --> 00:17:50,660
increasingly it's some kind of mobile

00:17:48,110 --> 00:17:53,210
app or even for technicians in the field

00:17:50,660 --> 00:17:55,100
for an industrial IOT situation they're

00:17:53,210 --> 00:17:58,430
working off of a tablet device and

00:17:55,100 --> 00:18:02,090
what-have-you so there's gonna be an app

00:17:58,430 --> 00:18:05,390
at the other side of it we that app

00:18:02,090 --> 00:18:07,370
again to kind of come back to we're all

00:18:05,390 --> 00:18:09,440
on the same page here for micro services

00:18:07,370 --> 00:18:11,360
I'm not going to rehash all that let's

00:18:09,440 --> 00:18:13,910
assume that we are building that

00:18:11,360 --> 00:18:17,270
application in a micro services

00:18:13,910 --> 00:18:19,550
architecture as well what's the what's

00:18:17,270 --> 00:18:21,410
the role of a cache in supporting that

00:18:19,550 --> 00:18:23,960
so this is I'm going to basically give

00:18:21,410 --> 00:18:25,970
you an abridged version of the top

00:18:23,960 --> 00:18:28,490
Cornelia Davis and I did at the Cloud

00:18:25,970 --> 00:18:30,560
Foundry summit in June so that's all

00:18:28,490 --> 00:18:34,010
recorded I've got the link as one of the

00:18:30,560 --> 00:18:35,600
resources but when you think from the

00:18:34,010 --> 00:18:39,800
your coming in it now from the app

00:18:35,600 --> 00:18:42,340
perspective having a bunch of micro

00:18:39,800 --> 00:18:44,450
services talking to the same database

00:18:42,340 --> 00:18:46,370
especially if that database is also

00:18:44,450 --> 00:18:49,100
supposed to be supporting a legacy

00:18:46,370 --> 00:18:51,050
monolith is definitely an anti-pattern

00:18:49,100 --> 00:18:53,930
you're not getting a lot of the benefits

00:18:51,050 --> 00:18:56,150
of micro services that you would hope

00:18:53,930 --> 00:18:59,210
for when you're so you're essentially

00:18:56,150 --> 00:19:01,280
still tied at the database level so you

00:18:59,210 --> 00:19:03,290
know your your ability to iterate is

00:19:01,280 --> 00:19:05,780
constricted your note that's no longer

00:19:03,290 --> 00:19:08,030
something you can do independently your

00:19:05,780 --> 00:19:09,440
tech stack is sort of pre decided for

00:19:08,030 --> 00:19:11,270
you because you've got the same shared

00:19:09,440 --> 00:19:13,010
database and of course you're going to

00:19:11,270 --> 00:19:16,250
have some performance and scaling

00:19:13,010 --> 00:19:18,410
challenges if you want to continue to

00:19:16,250 --> 00:19:20,480
grow that new service that's supporting

00:19:18,410 --> 00:19:21,560
you know whatever other the other end of

00:19:20,480 --> 00:19:24,530
that IOT user

00:19:21,560 --> 00:19:26,270
so this is where Cornelius introduced

00:19:24,530 --> 00:19:30,440
this the at least from my perspective

00:19:26,270 --> 00:19:32,660
she's introduced it the data API and so

00:19:30,440 --> 00:19:35,990
this kind of being this isolation layer

00:19:32,660 --> 00:19:37,970
between perhaps a legacy database some

00:19:35,990 --> 00:19:39,560
kind of shared database that exists that

00:19:37,970 --> 00:19:42,140
you have useful information you're

00:19:39,560 --> 00:19:44,300
trying to get from and your emerging

00:19:42,140 --> 00:19:46,190
microservices architecture and this

00:19:44,300 --> 00:19:49,550
providing this as she describes it a

00:19:46,190 --> 00:19:52,220
surface area to implement that that

00:19:49,550 --> 00:19:54,500
access control and perform a lot of

00:19:52,220 --> 00:19:55,970
different functions it's in order to be

00:19:54,500 --> 00:19:59,570
able to support those micro services

00:19:55,970 --> 00:20:03,500
better now okay how does this this data

00:19:59,570 --> 00:20:05,270
API later layer help resolve those

00:20:03,500 --> 00:20:07,340
performance challenges resilience

00:20:05,270 --> 00:20:09,980
challenges the ability to choose your

00:20:07,340 --> 00:20:11,840
own stack and and even some other

00:20:09,980 --> 00:20:13,250
changes that come up a lot when you're

00:20:11,840 --> 00:20:16,970
trying to iterate independently like

00:20:13,250 --> 00:20:19,490
your your schema versioning this is

00:20:16,970 --> 00:20:23,060
where a cash associated with that that

00:20:19,490 --> 00:20:25,970
data API becomes interesting so this

00:20:23,060 --> 00:20:27,620
notion of every micro-service needs a

00:20:25,970 --> 00:20:29,210
cache right that's kind of a bold

00:20:27,620 --> 00:20:31,040
statement right whenever you put every

00:20:29,210 --> 00:20:35,840
in front of something things get serious

00:20:31,040 --> 00:20:38,690
so if you look at some of the

00:20:35,840 --> 00:20:42,830
architectures proposed and introduced

00:20:38,690 --> 00:20:44,510
and sort of exposed by Netflix again the

00:20:42,830 --> 00:20:47,090
URL there is from a talk from scott

00:20:44,510 --> 00:20:48,890
mansfield where he articulates the cache

00:20:47,090 --> 00:20:51,500
as this hidden micro service that's

00:20:48,890 --> 00:20:55,160
really supporting this massive highly

00:20:51,500 --> 00:20:56,510
resilient micro services application

00:20:55,160 --> 00:20:59,060
right the the architecture that they

00:20:56,510 --> 00:21:01,340
have at netflix and this slide

00:20:59,060 --> 00:21:03,560
screenshot is is from adrienne Cockroft

00:21:01,340 --> 00:21:06,020
during his time at Battery Ventures and

00:21:03,560 --> 00:21:08,750
if you look into it you see how every

00:21:06,020 --> 00:21:13,130
piece has this cache to support each

00:21:08,750 --> 00:21:15,140
service so again this is the abridged

00:21:13,130 --> 00:21:17,510
version but essentially we've we've

00:21:15,140 --> 00:21:19,640
addressed performance you can with this

00:21:17,510 --> 00:21:23,450
caching layer associated with the data

00:21:19,640 --> 00:21:25,220
API address performance issues by by

00:21:23,450 --> 00:21:27,020
using an in-memory technology at that

00:21:25,220 --> 00:21:30,170
point especially if you can have a

00:21:27,020 --> 00:21:33,910
horizontally scalable clustered in

00:21:30,170 --> 00:21:35,900
memory technology so that you know

00:21:33,910 --> 00:21:38,750
performance isn't just hindered to

00:21:35,900 --> 00:21:41,150
obviously a single node resilience it's

00:21:38,750 --> 00:21:44,270
providing this bulkhead for the rest of

00:21:41,150 --> 00:21:48,190
the application you can you can start to

00:21:44,270 --> 00:21:52,760
use different as you kind of now writing

00:21:48,190 --> 00:21:55,220
data through to a different database you

00:21:52,760 --> 00:21:57,950
can select an appropriate database for

00:21:55,220 --> 00:22:00,470
that workload so if it's if it's a no

00:21:57,950 --> 00:22:01,850
sequel database versus that the legacy

00:22:00,470 --> 00:22:03,770
one which is kind of it's on the side

00:22:01,850 --> 00:22:06,370
kind of looming as like the Deathstar

00:22:03,770 --> 00:22:08,870
that's kind of fading in the corner here

00:22:06,370 --> 00:22:09,680
which is most likely a relational

00:22:08,870 --> 00:22:11,480
database

00:22:09,680 --> 00:22:15,800
great for a lot of use cases not always

00:22:11,480 --> 00:22:18,770
for everything and that's that's also

00:22:15,800 --> 00:22:20,840
another post by Kenny Bustani talking

00:22:18,770 --> 00:22:22,460
about the strangler pattern which I

00:22:20,840 --> 00:22:24,080
highly recommend for for making those

00:22:22,460 --> 00:22:25,430
kinds of transitions and then of course

00:22:24,080 --> 00:22:27,050
schema versioning is another really

00:22:25,430 --> 00:22:29,510
interesting thing you can do here where

00:22:27,050 --> 00:22:31,820
two versions of that data API you can

00:22:29,510 --> 00:22:33,890
now start to make those changes in a

00:22:31,820 --> 00:22:35,330
more graceful way without having to

00:22:33,890 --> 00:22:40,400
disrupt all the applications that might

00:22:35,330 --> 00:22:43,760
be using it okay so the last area I want

00:22:40,400 --> 00:22:45,350
to touch on is that okay we've talked

00:22:43,760 --> 00:22:49,910
about some of the at least the

00:22:45,350 --> 00:22:52,760
cloud-based components of this data

00:22:49,910 --> 00:22:55,220
pipeline and doing that in a way that's

00:22:52,760 --> 00:22:56,500
you know making use of a micro services

00:22:55,220 --> 00:22:59,300
architecture getting all those benefits

00:22:56,500 --> 00:23:02,840
the data caching layer but if you zoom

00:22:59,300 --> 00:23:05,030
out there's also all these other

00:23:02,840 --> 00:23:07,790
applications in the mix that we have to

00:23:05,030 --> 00:23:09,710
think about integration with and I kind

00:23:07,790 --> 00:23:10,820
of alluded to this when I was going

00:23:09,710 --> 00:23:11,900
through the spring cloud data flow

00:23:10,820 --> 00:23:15,460
section where you know you might be

00:23:11,900 --> 00:23:19,640
wanting to pull in from some kind of

00:23:15,460 --> 00:23:22,580
your support desk tool so if we zoom out

00:23:19,640 --> 00:23:24,920
we do have the things right and we have

00:23:22,580 --> 00:23:27,500
the IOT apps right which was this is the

00:23:24,920 --> 00:23:29,660
new stuff that has to get built to

00:23:27,500 --> 00:23:33,380
support you know that technician in the

00:23:29,660 --> 00:23:35,180
field that's now equipped to do more

00:23:33,380 --> 00:23:38,450
predictive maintenance as opposed to

00:23:35,180 --> 00:23:40,700
just preventative maintenance and but

00:23:38,450 --> 00:23:42,980
you also have business systems on both

00:23:40,700 --> 00:23:44,660
sides of that that are going to need to

00:23:42,980 --> 00:23:46,520
integrate with a lot of the data

00:23:44,660 --> 00:23:48,620
pipelining work that you've done in the

00:23:46,520 --> 00:23:51,410
middle so how do you do that

00:23:48,620 --> 00:23:53,570
so one thing to consider here is that

00:23:51,410 --> 00:23:55,820
you have different types of integration

00:23:53,570 --> 00:24:00,230
that you're going to be supporting and

00:23:55,820 --> 00:24:02,330
so you know not just these connected

00:24:00,230 --> 00:24:04,220
device data streams you've gotta have

00:24:02,330 --> 00:24:06,020
two app integration you've got different

00:24:04,220 --> 00:24:08,750
cloud services right so when you don't

00:24:06,020 --> 00:24:10,340
you don't control all of the apps so

00:24:08,750 --> 00:24:13,970
it's really nice to sometimes think that

00:24:10,340 --> 00:24:16,520
well I can build a spring integration

00:24:13,970 --> 00:24:17,720
app for that and build everything I want

00:24:16,520 --> 00:24:19,010
there but you know maybe there needs to

00:24:17,720 --> 00:24:22,370
be something deployed in that sass

00:24:19,010 --> 00:24:24,230
vendor how can you do that

00:24:22,370 --> 00:24:26,630
and then of course you've got mobile app

00:24:24,230 --> 00:24:28,400
integration on the the sort of IOT app

00:24:26,630 --> 00:24:30,560
facing side which has some unique

00:24:28,400 --> 00:24:33,020
requirements in terms of certainly the

00:24:30,560 --> 00:24:35,510
network latency and a lot of those

00:24:33,020 --> 00:24:37,220
functions in terms of the limited

00:24:35,510 --> 00:24:39,350
bandwidth in the limited you know number

00:24:37,220 --> 00:24:40,850
of calls that your you want to be having

00:24:39,350 --> 00:24:42,320
that mobile app client make to the

00:24:40,850 --> 00:24:44,510
back-end service and then you also have

00:24:42,320 --> 00:24:46,310
different types of developers so again

00:24:44,510 --> 00:24:49,760
it's nice to sort of maybe think like

00:24:46,310 --> 00:24:51,710
okay our Java developers they can they

00:24:49,760 --> 00:24:53,120
can build all of this but as this starts

00:24:51,710 --> 00:24:55,070
to grow and touch more parts of the

00:24:53,120 --> 00:24:57,250
organization there are teams of

00:24:55,070 --> 00:25:00,350
integration specialists who are

00:24:57,250 --> 00:25:01,820
basically sitting in control of the the

00:25:00,350 --> 00:25:03,560
integrations with some of those business

00:25:01,820 --> 00:25:04,970
systems and so you want to be able to

00:25:03,560 --> 00:25:08,120
engage with them too and show them that

00:25:04,970 --> 00:25:11,240
they're supported on this journey if you

00:25:08,120 --> 00:25:12,920
will and so you you have some different

00:25:11,240 --> 00:25:15,550
users to think about and you have some

00:25:12,920 --> 00:25:17,840
different application integration types

00:25:15,550 --> 00:25:19,370
okay so let's let's bring it all

00:25:17,840 --> 00:25:21,560
together we're coming into the

00:25:19,370 --> 00:25:24,140
homestretch here and now I've kind of

00:25:21,560 --> 00:25:28,100
cleaned up my still very high level

00:25:24,140 --> 00:25:30,580
diagram and you know the the ability to

00:25:28,100 --> 00:25:33,530
bring in data from your other sources

00:25:30,580 --> 00:25:35,870
including some of those kind of standard

00:25:33,530 --> 00:25:38,120
cloud services I think that's where the

00:25:35,870 --> 00:25:41,270
the iPads integration piece becomes

00:25:38,120 --> 00:25:42,740
really useful your standard data ingest

00:25:41,270 --> 00:25:44,600
which is definitely part of the spring

00:25:42,740 --> 00:25:46,490
cloud dataflow piece of the solution and

00:25:44,600 --> 00:25:49,370
then again being able to have your API

00:25:46,490 --> 00:25:53,060
gateway to sort of mask a lot of this

00:25:49,370 --> 00:25:54,860
complexity for all the other apps that

00:25:53,060 --> 00:25:57,670
may be wanting to build that's making

00:25:54,860 --> 00:25:59,840
use of whatever's going on with Masie

00:25:57,670 --> 00:26:00,830
because I mean let's face it everyone

00:25:59,840 --> 00:26:03,260
wants to know what's happening about

00:26:00,830 --> 00:26:05,420
Macy at this point and again you might

00:26:03,260 --> 00:26:07,640
still have another like side of the

00:26:05,420 --> 00:26:11,410
ipad's equation to go back out to some

00:26:07,640 --> 00:26:14,420
of these external ear on services and

00:26:11,410 --> 00:26:16,250
okay ignore the little gear wheel I

00:26:14,420 --> 00:26:17,360
totally forgot to delete that I was I

00:26:16,250 --> 00:26:18,760
can't remember where I was gonna put

00:26:17,360 --> 00:26:24,050
that but just ignore it

00:26:18,760 --> 00:26:27,260
so the blue the blue box sort of is the

00:26:24,050 --> 00:26:29,120
rough lines around a lot of the stuff in

00:26:27,260 --> 00:26:30,920
this blue box can run on Cloud Foundry

00:26:29,120 --> 00:26:33,440
right and by the way we've definitely

00:26:30,920 --> 00:26:35,419
dropped the edge gateway platform well

00:26:33,440 --> 00:26:38,269
from from this side

00:26:35,419 --> 00:26:40,879
and so but but that's a big area in that

00:26:38,269 --> 00:26:43,249
blue box that you can build on Cloud

00:26:40,879 --> 00:26:44,839
Foundry that brings a lot of utility and

00:26:43,249 --> 00:26:47,989
value and by the way a ton of those

00:26:44,839 --> 00:26:50,089
pieces are making use of you know

00:26:47,989 --> 00:26:51,950
micro-services architecture helping

00:26:50,089 --> 00:26:54,109
bring those benefits other ones might be

00:26:51,950 --> 00:27:00,019
kind of coming in more with a service

00:26:54,109 --> 00:27:01,309
broker or mostly a service broker to to

00:27:00,019 --> 00:27:03,649
sort of add some of these other pieces

00:27:01,309 --> 00:27:05,389
of functionality now it doesn't mean

00:27:03,649 --> 00:27:08,479
that the piece is below the blue box

00:27:05,389 --> 00:27:10,820
can't run on it or don't in certain

00:27:08,479 --> 00:27:13,339
scenarios today so when I start to

00:27:10,820 --> 00:27:16,339
overlay some of the available pieces on

00:27:13,339 --> 00:27:17,899
this then you again I kind of decided to

00:27:16,339 --> 00:27:20,359
blur the lines because there are some

00:27:17,899 --> 00:27:24,589
pieces below the previous blue box line

00:27:20,359 --> 00:27:27,159
that are relevant here but certainly

00:27:24,589 --> 00:27:29,749
again I work at pivotal I work with our

00:27:27,159 --> 00:27:32,239
RSV partners and our internal developers

00:27:29,749 --> 00:27:34,820
who build services for pivotal Cloud

00:27:32,239 --> 00:27:36,559
Foundry so a lot of these are also

00:27:34,820 --> 00:27:39,859
relevant to just general Cloud Foundry

00:27:36,559 --> 00:27:42,859
I'm just bringing in personal experience

00:27:39,859 --> 00:27:45,349
from from the pivotal side here I pass

00:27:42,859 --> 00:27:47,320
vendors like mule soft and Dell boomy

00:27:45,349 --> 00:27:49,459
are available to solve that piece

00:27:47,320 --> 00:27:52,039
highlighting spring cloud dataflow and

00:27:49,459 --> 00:27:55,339
spring boot for those data pipelines

00:27:52,039 --> 00:27:57,679
both streaming and batch a range of

00:27:55,339 --> 00:27:59,959
caching solutions I always give a

00:27:57,679 --> 00:28:02,059
special shout-out to pivotal cloud cache

00:27:59,959 --> 00:28:04,669
which is based on the Apache geode

00:28:02,059 --> 00:28:06,259
in-memory data grid technology which is

00:28:04,669 --> 00:28:09,469
particularly powerful from a from a

00:28:06,259 --> 00:28:12,049
horizontal scaling perspective and then

00:28:09,469 --> 00:28:14,479
again mule soft but also Apogee from

00:28:12,049 --> 00:28:16,309
that API gateway layer there's a number

00:28:14,479 --> 00:28:19,039
of integrations that those vendors have

00:28:16,309 --> 00:28:22,009
built with pivotal Cloud Foundry to be

00:28:19,039 --> 00:28:24,259
able to support that piece then I call

00:28:22,009 --> 00:28:26,659
out you know Kafka for the event log

00:28:24,259 --> 00:28:28,729
piece because I think that there's a lot

00:28:26,659 --> 00:28:30,609
of utility in the event log in this

00:28:28,729 --> 00:28:32,359
scenario where you're trying to you have

00:28:30,609 --> 00:28:35,899
potentially lots of different

00:28:32,359 --> 00:28:38,119
subscribers to this data you can as I

00:28:35,899 --> 00:28:40,549
mentioned use RabbitMQ and solace for

00:28:38,119 --> 00:28:43,399
the the messaging infrastructure that

00:28:40,549 --> 00:28:44,809
supports spring cloud dataflow and I do

00:28:43,399 --> 00:28:45,979
think that they might be particularly

00:28:44,809 --> 00:28:47,290
relevant particularly when you start

00:28:45,979 --> 00:28:50,740
you're reaching out more

00:28:47,290 --> 00:28:52,960
those edge pieces because of some of the

00:28:50,740 --> 00:28:54,580
the protocol requirements there and so

00:28:52,960 --> 00:28:56,020
message brokers have a piece in there so

00:28:54,580 --> 00:28:58,120
I've kind of illustrate with this like

00:28:56,020 --> 00:28:59,590
slash mark because you can kind of use

00:28:58,120 --> 00:29:00,910
it over here but I really think there's

00:28:59,590 --> 00:29:03,160
actually a role for both of these

00:29:00,910 --> 00:29:05,290
they're slightly different

00:29:03,160 --> 00:29:06,670
and then for data warehousing of course

00:29:05,290 --> 00:29:08,380
we have pivotal greenplum

00:29:06,670 --> 00:29:11,950
which is based on the open source

00:29:08,380 --> 00:29:13,660
greenplum database you can also use

00:29:11,950 --> 00:29:16,120
Cassandra for some of these types of

00:29:13,660 --> 00:29:18,820
things green Palomas sequel base so

00:29:16,120 --> 00:29:21,130
there's a lot of sequel based machine

00:29:18,820 --> 00:29:23,800
learning that you can run in parallel on

00:29:21,130 --> 00:29:26,770
on green plum which is great for for

00:29:23,800 --> 00:29:31,090
turning out models for more predictive

00:29:26,770 --> 00:29:32,890
whatever's with your Macy's and then to

00:29:31,090 --> 00:29:34,420
kind of pull it back and bring in

00:29:32,890 --> 00:29:35,800
another sort of example from a customer

00:29:34,420 --> 00:29:38,800
this one was from Cardinal Health

00:29:35,800 --> 00:29:43,270
something they actually presented about

00:29:38,800 --> 00:29:45,790
a year ago at the us-based Cloud Foundry

00:29:43,270 --> 00:29:49,120
summit and so here they were building a

00:29:45,790 --> 00:29:52,210
personal sort of a personal healthcare

00:29:49,120 --> 00:29:54,310
IOT solution and so again you can see

00:29:52,210 --> 00:29:56,710
how there's a number of these components

00:29:54,310 --> 00:29:58,600
have have fit into their architecture

00:29:56,710 --> 00:30:00,160
there's some additional pieces they have

00:29:58,600 --> 00:30:01,690
the the drawing kind of oriented a

00:30:00,160 --> 00:30:04,000
slightly different way than me but

00:30:01,690 --> 00:30:05,710
that's like that's what happens get ten

00:30:04,000 --> 00:30:09,250
people to draw an architecture you're

00:30:05,710 --> 00:30:10,780
gonna get 20 different versions so

00:30:09,250 --> 00:30:11,860
anyways just to sort of illustrate that

00:30:10,780 --> 00:30:14,320
there are folks that are kind of

00:30:11,860 --> 00:30:16,860
building along these lines I promised a

00:30:14,320 --> 00:30:20,860
bunch of resources so there's the two

00:30:16,860 --> 00:30:24,130
posts from Kenny Bustani both of which

00:30:20,860 --> 00:30:26,580
point to sample code and demo that you

00:30:24,130 --> 00:30:29,380
can play around with yourself one around

00:30:26,580 --> 00:30:32,980
the Strangler pattern and one around the

00:30:29,380 --> 00:30:35,920
services core for how to then integrate

00:30:32,980 --> 00:30:39,640
like functions as a service using Amazon

00:30:35,920 --> 00:30:43,990
lambda a whole book that Cornelia is

00:30:39,640 --> 00:30:45,550
writing on cloud native patterns and so

00:30:43,990 --> 00:30:46,720
the first several chapters are available

00:30:45,550 --> 00:30:47,770
today if you find her here at the

00:30:46,720 --> 00:30:51,430
conference you might be able to get a

00:30:47,770 --> 00:30:54,190
discount code on the whole book that

00:30:51,430 --> 00:30:56,860
talk by Scott Mansfield on Netflix and

00:30:54,190 --> 00:30:58,660
the caching the caching service the

00:30:56,860 --> 00:31:00,530
hidden service which I realized like

00:30:58,660 --> 00:31:02,540
hidden service weeks makes way more

00:31:00,530 --> 00:31:05,480
since then Secret Service because that's

00:31:02,540 --> 00:31:07,520
something else and then Jim Schindler

00:31:05,480 --> 00:31:09,620
from Cardinal Health his talk I've got

00:31:07,520 --> 00:31:12,260
links to the the slides there and a

00:31:09,620 --> 00:31:14,090
couple other ones a webinar we did a

00:31:12,260 --> 00:31:16,580
little while ago on the continuous data

00:31:14,090 --> 00:31:18,800
integration and the talk that we did

00:31:16,580 --> 00:31:22,790
accordingly and I did at the last summit

00:31:18,800 --> 00:31:24,440
so I'll post these but there's just one

00:31:22,790 --> 00:31:26,750
more thing I want to give you guys and

00:31:24,440 --> 00:31:28,670
that's a discount code to spring one

00:31:26,750 --> 00:31:31,280
platform if you want to come all the way

00:31:28,670 --> 00:31:33,950
to San Francisco in December I'll be

00:31:31,280 --> 00:31:36,320
there I look forward to meeting and

00:31:33,950 --> 00:31:38,990
talking with you so with that I know I

00:31:36,320 --> 00:31:40,640
kind of just went a minute over but I

00:31:38,990 --> 00:31:42,050
think we just did 34 slides in 30

00:31:40,640 --> 00:31:44,320
minutes so give yourself a round of

00:31:42,050 --> 00:31:44,320
applause

00:31:47,909 --> 00:31:59,279
so enjoy the beer o'clock or the keine

00:31:52,499 --> 00:32:00,929
bia for fear experience upstairs I'll be

00:31:59,279 --> 00:32:03,660
here for a little bit to answer any

00:32:00,929 --> 00:32:07,650
questions thank you

00:32:03,660 --> 00:32:07,650

YouTube URL: https://www.youtube.com/watch?v=rqPeQAqkvpk


