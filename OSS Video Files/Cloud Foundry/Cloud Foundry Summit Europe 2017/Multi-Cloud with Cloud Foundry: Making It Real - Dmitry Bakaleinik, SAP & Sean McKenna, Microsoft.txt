Title: Multi-Cloud with Cloud Foundry: Making It Real - Dmitry Bakaleinik, SAP & Sean McKenna, Microsoft
Publication date: 2017-10-18
Playlist: Cloud Foundry Summit Europe 2017
Description: 
	Multi-Cloud with Cloud Foundry: Making It Real - Dmitry Bakaleinik, SAP & Sean McKenna, Microsoft

In this session jointly presented by Microsoft and SAP, Sean and Dmitry will share their experiences and lessons learned from working on adding SAP Cloud Platform as a fully-managed public cloud offering on Microsoft Azure. We’ll present SAP’s multi-cloud strategy and Cloud Foundry’s role herein, how the team implemented it on Azure and the challenges encountered along the way. We’ll wrap up by providing an outlook on the next steps and plans for the future.

About Sean McKenna
Sean is a member of the Microsoft Azure Compute group and is responsible Cloud Foundry on Azure. He works closely with partners like Pivotal, GE, and SAP to make CF-based platforms sing on the Azure cloud. He regularly speaks at major Microsoft conferences including //build and Ignite, and smaller events like the CF Meetup in Seattle.

About Dmitry Bakaleinik
Cloud Engineer, SAP
Captions: 
	00:00:00,000 --> 00:00:03,870
um so what are you gonna get out of this

00:00:02,280 --> 00:00:06,150
session so we're gonna cover a little

00:00:03,870 --> 00:00:10,559
bit of sort of learnings from standing

00:00:06,150 --> 00:00:12,660
up sa P cloud platform on Azure and and

00:00:10,559 --> 00:00:14,460
using that as a case study for for multi

00:00:12,660 --> 00:00:15,750
cloud but before we get into that I'm

00:00:14,460 --> 00:00:17,310
just going to give sort of a brief

00:00:15,750 --> 00:00:18,660
overview of what Cloud Foundry and has

00:00:17,310 --> 00:00:21,180
your means and kind of what this the

00:00:18,660 --> 00:00:22,289
scope of it is and then talk a little

00:00:21,180 --> 00:00:24,689
bit about sort of how you can get

00:00:22,289 --> 00:00:28,619
involved and participate in this journey

00:00:24,689 --> 00:00:31,679
that we're on so what is Cloud Foundry

00:00:28,619 --> 00:00:33,510
on Azure so this question comes up a lot

00:00:31,679 --> 00:00:34,860
because there's apparently still a lot

00:00:33,510 --> 00:00:37,590
of people that believe that Azure is

00:00:34,860 --> 00:00:39,239
sort of just the Windows cloud you know

00:00:37,590 --> 00:00:40,290
it's only for doing building net

00:00:39,239 --> 00:00:42,899
applications with visual studio

00:00:40,290 --> 00:00:44,789
targeting Windows to run on Azure and

00:00:42,899 --> 00:00:46,559
some people go like Cloud Foundry that

00:00:44,789 --> 00:00:50,010
doesn't seem like it would align very

00:00:46,559 --> 00:00:51,809
well asher has changed

00:00:50,010 --> 00:00:52,920
Microsoft has changed significantly in

00:00:51,809 --> 00:00:55,649
Azure has been sort of at the bleeding

00:00:52,920 --> 00:00:58,500
edge of that we've actually been working

00:00:55,649 --> 00:01:00,420
with the Cloud Foundry community with a

00:00:58,500 --> 00:01:03,899
number of partners for about three years

00:01:00,420 --> 00:01:06,299
now to bring Cloud Foundry to asher in a

00:01:03,899 --> 00:01:08,549
number of different forms so we have the

00:01:06,299 --> 00:01:11,100
fully open source version that you can

00:01:08,549 --> 00:01:13,350
run on top of the azure infrastructure

00:01:11,100 --> 00:01:15,390
you can deploy the pivotal Cloud Foundry

00:01:13,350 --> 00:01:16,710
and a sort of single tenant version

00:01:15,390 --> 00:01:18,960
inside of your house your subscription

00:01:16,710 --> 00:01:20,220
from the azure marketplace or as we'll

00:01:18,960 --> 00:01:21,990
be talking about today you can use the

00:01:20,220 --> 00:01:26,460
fully hosted multi tenant

00:01:21,990 --> 00:01:27,810
service from si P and as a result of all

00:01:26,460 --> 00:01:30,060
that work that we've been doing and the

00:01:27,810 --> 00:01:31,290
partnerships that we've been working on

00:01:30,060 --> 00:01:33,479
we actually announced at the Cloud

00:01:31,290 --> 00:01:34,740
Foundry summit in Silicon Valley in June

00:01:33,479 --> 00:01:36,360
that Microsoft had joined the Cloud

00:01:34,740 --> 00:01:38,579
Foundry foundation so really putting a

00:01:36,360 --> 00:01:41,670
bow on the all the work that we've done

00:01:38,579 --> 00:01:43,829
with Cloud Foundry and the reason for it

00:01:41,670 --> 00:01:45,869
is ultimately that we want has you to be

00:01:43,829 --> 00:01:47,729
the most open cloud and so we want to

00:01:45,869 --> 00:01:50,159
make sure that you know any operating

00:01:47,729 --> 00:01:52,350
system you want to target any framework

00:01:50,159 --> 00:01:53,640
or tool chain you want to use any

00:01:52,350 --> 00:01:55,680
platform you want to use including

00:01:53,640 --> 00:01:58,530
things like Cloud Foundry that you get

00:01:55,680 --> 00:02:00,360
really a best-in-class experience on top

00:01:58,530 --> 00:02:05,729
of Ajman so that's why we really put a

00:02:00,360 --> 00:02:07,350
lot of resources into that work so with

00:02:05,729 --> 00:02:09,629
that I'm going to call him Dimitri to

00:02:07,350 --> 00:02:11,459
talk a little bit about what sa P thinks

00:02:09,629 --> 00:02:13,640
about in terms of multi cloud and give a

00:02:11,459 --> 00:02:13,640
little

00:02:16,069 --> 00:02:26,159
okay so as you know the cloud

00:02:20,569 --> 00:02:28,230
okay okay as you know the cloud

00:02:26,159 --> 00:02:30,900
computing today is an often possible

00:02:28,230 --> 00:02:33,510
direction for running software and as

00:02:30,900 --> 00:02:35,870
its usage grows the idea of multi cloud

00:02:33,510 --> 00:02:38,459
is gaining more doctrine and spread

00:02:35,870 --> 00:02:40,549
people asking me if I could explain a

00:02:38,459 --> 00:02:43,650
little bit what is the mention of

00:02:40,549 --> 00:02:48,090
multicart and white would be important

00:02:43,650 --> 00:02:51,989
to them so because multi-cloud have a

00:02:48,090 --> 00:02:56,760
very broad definition and its response

00:02:51,989 --> 00:02:59,159
to different topics of cloud

00:02:56,760 --> 00:03:01,079
architecture and response to modern

00:02:59,159 --> 00:03:04,889
businesses and developer needs it's

00:03:01,079 --> 00:03:07,049
better to explain it within examples for

00:03:04,889 --> 00:03:09,389
enterprise a multi cloud that could be a

00:03:07,049 --> 00:03:13,379
strategy that allows an enterprise to

00:03:09,389 --> 00:03:16,530
run their software very best fit by

00:03:13,379 --> 00:03:19,769
using several cloud providers as one

00:03:16,530 --> 00:03:21,599
single solution its allows to enterprise

00:03:19,769 --> 00:03:27,440
to meet a specific application

00:03:21,599 --> 00:03:32,449
requirements or a specific workload by

00:03:27,440 --> 00:03:41,099
consuming multiple cloud providers and

00:03:32,449 --> 00:03:44,699
vial just as long as the each provider

00:03:41,099 --> 00:03:45,930
can fulfill enterprise specific needs at

00:03:44,699 --> 00:03:49,620
a given time

00:03:45,930 --> 00:03:52,099
another example IT specialist may find a

00:03:49,620 --> 00:03:55,859
multi cloud as a solution for reducing

00:03:52,099 --> 00:04:01,319
the risk of a downtime or widespread

00:03:55,859 --> 00:04:02,129
data was caused by localized component

00:04:01,319 --> 00:04:05,879
the favor

00:04:02,129 --> 00:04:10,409
and of course and surely the developers

00:04:05,879 --> 00:04:12,840
make a use multi cloud as an enabler to

00:04:10,409 --> 00:04:15,509
consume unique innovation technologies

00:04:12,840 --> 00:04:20,430
from a different cloud providers to

00:04:15,509 --> 00:04:23,190
build great apps so let's do a very

00:04:20,430 --> 00:04:25,110
brief overview of the acp cloud platform

00:04:23,190 --> 00:04:27,960
to understand what are all

00:04:25,110 --> 00:04:30,659
of multi cloud and the cloud foundry for

00:04:27,960 --> 00:04:33,360
sa P as a Pequod fat form is an

00:04:30,659 --> 00:04:36,030
enterprise platform as a service that

00:04:33,360 --> 00:04:38,879
offers you the flexibility to use the

00:04:36,030 --> 00:04:40,909
leading cloud providers so value may

00:04:38,879 --> 00:04:43,860
select infrastructure powered by Amazon

00:04:40,909 --> 00:04:48,030
which is available in general

00:04:43,860 --> 00:04:50,340
availability you can also select a

00:04:48,030 --> 00:04:53,610
Google cloud platform in the Microsoft

00:04:50,340 --> 00:04:57,210
Azure as an additional infrastructure

00:04:53,610 --> 00:05:00,360
and thus a cloud providers available as

00:04:57,210 --> 00:05:03,300
a public beta regardless of which cloud

00:05:00,360 --> 00:05:05,969
providers you choose all multi cloud

00:05:03,300 --> 00:05:08,669
application deployments can be centrally

00:05:05,969 --> 00:05:13,349
managed in the operated in one single

00:05:08,669 --> 00:05:16,469
unified cockpit use of adoption is very

00:05:13,349 --> 00:05:19,219
important to us so s IP takes care of

00:05:16,469 --> 00:05:22,110
the complexity of managing and operating

00:05:19,219 --> 00:05:25,229
the underlying infrastructure accounts

00:05:22,110 --> 00:05:28,139
so you can quickly move the applications

00:05:25,229 --> 00:05:31,169
to the infrastructure that best meets

00:05:28,139 --> 00:05:33,539
your requirements with a limited effort

00:05:31,169 --> 00:05:35,839
if for some reason the application

00:05:33,539 --> 00:05:38,759
needed to go to another infrastructure

00:05:35,839 --> 00:05:41,150
you can easily deploy your application

00:05:38,759 --> 00:05:49,800
to its AP class and host and another P

00:05:41,150 --> 00:05:52,620
infrastructure and to recover for sa P

00:05:49,800 --> 00:05:54,449
equal foundry a plays a central role in

00:05:52,620 --> 00:05:57,210
a platform as a service strategy

00:05:54,449 --> 00:05:59,969
offering the Cloud Foundry environment

00:05:57,210 --> 00:06:02,099
helps grow as a peak load platform

00:05:59,969 --> 00:06:04,889
commitment to open standards and open

00:06:02,099 --> 00:06:07,110
source technologies and provides more

00:06:04,889 --> 00:06:10,740
option to developers to utilize the

00:06:07,110 --> 00:06:13,770
richness of our platform so cloud

00:06:10,740 --> 00:06:15,900
foundry allows sa P and s AP customer to

00:06:13,770 --> 00:06:18,539
use popular programming language but

00:06:15,900 --> 00:06:21,419
also to deploy applications on top of

00:06:18,539 --> 00:06:26,099
papua as platform hence no vendor

00:06:21,419 --> 00:06:29,479
lock-in ok thanks and now some we talk

00:06:26,099 --> 00:06:32,219
about a quandary on Asia

00:06:29,479 --> 00:06:37,689
alright thanks to me tree hey it's me

00:06:32,219 --> 00:06:40,149
I'm back so I talked a little bit about

00:06:37,689 --> 00:06:43,179
sort of conceptually a little bit deeper

00:06:40,149 --> 00:06:45,729
although not not too much deeper for

00:06:43,179 --> 00:06:48,659
those who are familiar with Cloud

00:06:45,729 --> 00:06:52,509
Foundry this picture will be fairly

00:06:48,659 --> 00:06:54,279
familiar to you if you're new just to

00:06:52,509 --> 00:06:56,289
give you kind of a sense of how it works

00:06:54,279 --> 00:06:58,059
we've got the base as your

00:06:56,289 --> 00:07:03,699
infrastructure kind of at the at the

00:06:58,059 --> 00:07:05,289
bottom layer that is deployed using the

00:07:03,699 --> 00:07:07,899
the cloud provider interface plug-in

00:07:05,289 --> 00:07:09,699
that we provide so the azure CPI for

00:07:07,899 --> 00:07:11,259
Bosch once you have that Cloud Foundry

00:07:09,699 --> 00:07:13,599
environment deployed then you're

00:07:11,259 --> 00:07:15,219
deploying your applications on to Cloud

00:07:13,599 --> 00:07:16,569
Foundry and you don't actually don't

00:07:15,219 --> 00:07:18,579
really need to worry about the fact that

00:07:16,569 --> 00:07:20,110
you're running on on Azure you're just

00:07:18,579 --> 00:07:21,550
using classify McQueen Cloud Foundry and

00:07:20,110 --> 00:07:25,629
that's sort of where this whole sort of

00:07:21,550 --> 00:07:27,429
multi cloud abstraction comes in that's

00:07:25,629 --> 00:07:29,019
to sort of run your your stateless

00:07:27,429 --> 00:07:30,999
applications if you want to take

00:07:29,019 --> 00:07:33,879
advantage of some of the azure backing

00:07:30,999 --> 00:07:36,399
services for for storing some of your

00:07:33,879 --> 00:07:37,899
state's that's where the the service

00:07:36,399 --> 00:07:39,610
broker API comes in and we'll talk a

00:07:37,899 --> 00:07:41,439
little bit more about that in a bit but

00:07:39,610 --> 00:07:43,989
we've built the Iser service broker API

00:07:41,439 --> 00:07:45,789
as a way to connect out to Azure

00:07:43,989 --> 00:07:48,279
platform services so some of our more

00:07:45,789 --> 00:07:52,329
popular services like as your sequel

00:07:48,279 --> 00:07:54,779
Azure cosmos DB storage and our recently

00:07:52,329 --> 00:08:02,489
announced my sequel and Postgres

00:07:54,779 --> 00:08:05,169
databases as a service that transition

00:08:02,489 --> 00:08:06,639
so the session is entitled making it

00:08:05,169 --> 00:08:08,409
real so I think to make it real we have

00:08:06,639 --> 00:08:11,829
to get out of PowerPoint just for free

00:08:08,409 --> 00:08:16,360
brief second and I want to just kind of

00:08:11,829 --> 00:08:18,129
give a sense of how this looks in

00:08:16,360 --> 00:08:20,469
practice so I mentioned the cloud

00:08:18,129 --> 00:08:23,579
provider interface that we that we build

00:08:20,469 --> 00:08:26,679
this is developed by Microsoft full-time

00:08:23,579 --> 00:08:29,499
engineers we do it fully in in the open

00:08:26,679 --> 00:08:31,659
on github so this is the project that

00:08:29,499 --> 00:08:33,180
we've been working on for again roughly

00:08:31,659 --> 00:08:37,269
the last two and a half or three years

00:08:33,180 --> 00:08:38,649
have done as you can see 27 releases and

00:08:37,269 --> 00:08:40,930
continuing to add more functionality

00:08:38,649 --> 00:08:43,079
integrate with new features that come

00:08:40,930 --> 00:08:45,639
out in Azure so as we announced our

00:08:43,079 --> 00:08:47,889
managed disks offering for example we

00:08:45,639 --> 00:08:49,480
added support for that in the CPI we

00:08:47,889 --> 00:08:50,829
really recently integrated it with the

00:08:49,480 --> 00:08:51,310
add your application gateway which is

00:08:50,829 --> 00:08:53,350
our layers

00:08:51,310 --> 00:08:56,550
load balancer and so if you go in here

00:08:53,350 --> 00:08:58,750
if you wanted to deploy Cloud Foundry

00:08:56,550 --> 00:09:01,590
sort of the fully open source version

00:08:58,750 --> 00:09:05,529
you could start from here jump over into

00:09:01,590 --> 00:09:07,270
the Bosch documentation to setup your as

00:09:05,529 --> 00:09:11,950
your environment and actually the

00:09:07,270 --> 00:09:15,010
easiest way to get this bootstrap is if

00:09:11,950 --> 00:09:17,380
you go here into the azure QuickStart

00:09:15,010 --> 00:09:20,410
templates in in github linked there from

00:09:17,380 --> 00:09:22,180
from the box documentation this actually

00:09:20,410 --> 00:09:24,339
provides the azure resource manager

00:09:22,180 --> 00:09:26,470
template that's required to stand up the

00:09:24,339 --> 00:09:29,760
the jump box VM all the virtual network

00:09:26,470 --> 00:09:32,770
and and storage resources that you need

00:09:29,760 --> 00:09:33,940
to be able to deploy your Cloud Foundry

00:09:32,770 --> 00:09:37,360
environment and the nice thing is you

00:09:33,940 --> 00:09:40,000
can go right from here to the azure

00:09:37,360 --> 00:09:43,270
portal and basically fill in just the

00:09:40,000 --> 00:09:49,000
necessary properties to stand up that

00:09:43,270 --> 00:09:52,779
environment so this makes it pretty easy

00:09:49,000 --> 00:09:55,240
to to get an initial Cloud Foundry

00:09:52,779 --> 00:09:57,280
environment set up on as you'll see you

00:09:55,240 --> 00:10:01,360
fill in some of the details you need

00:09:57,280 --> 00:10:02,710
here and you'll notice that there is an

00:10:01,360 --> 00:10:04,360
option to this will set up initially

00:10:02,710 --> 00:10:06,130
just sort of a jump box on a virtual

00:10:04,360 --> 00:10:07,300
network in azure that you can use as

00:10:06,130 --> 00:10:08,800
your sort of your entry point to your

00:10:07,300 --> 00:10:11,350
Cloud Foundry environment and you can

00:10:08,800 --> 00:10:14,320
actually set it up to also deploy the

00:10:11,350 --> 00:10:17,290
Box director so to get you up and

00:10:14,320 --> 00:10:22,110
running and once you do that you will

00:10:17,290 --> 00:10:25,780
get a vm that looks like this where

00:10:22,110 --> 00:10:28,300
you'll get a set of resources and

00:10:25,780 --> 00:10:31,300
scripts and Bausch manifests you can

00:10:28,300 --> 00:10:34,950
actually use to deploy five boundaries

00:10:31,300 --> 00:10:37,240
so like under manifests there are

00:10:34,950 --> 00:10:40,089
options for deploying this single VM

00:10:37,240 --> 00:10:42,610
multiple VMs this makes it relatively

00:10:40,089 --> 00:10:44,770
easy to get started with running the

00:10:42,610 --> 00:10:47,560
fully open source cloud foundry on Azure

00:10:44,770 --> 00:10:51,130
now that being said there's still a

00:10:47,560 --> 00:10:57,220
certain amount of work here to bootstrap

00:10:51,130 --> 00:11:00,070
this environment and so that's where

00:10:57,220 --> 00:11:03,220
using something like the SA P cloud

00:11:00,070 --> 00:11:04,370
platform comes in to allow you to get

00:11:03,220 --> 00:11:06,889
started even easy

00:11:04,370 --> 00:11:08,930
with a fully hosted service so I'll turn

00:11:06,889 --> 00:11:10,699
it back over to Dimitri to talk a little

00:11:08,930 --> 00:11:12,459
bit about the technical details of the

00:11:10,699 --> 00:11:15,350
cloud platform

00:11:12,459 --> 00:11:18,199
please don't worry if you find this

00:11:15,350 --> 00:11:21,009
picture slightly complicated I'm not

00:11:18,199 --> 00:11:25,100
going to talk about Cloud Foundry

00:11:21,009 --> 00:11:27,170
architecture about God foundry

00:11:25,100 --> 00:11:28,759
architecture about all the services and

00:11:27,170 --> 00:11:32,389
all the components you can see they're

00:11:28,759 --> 00:11:34,699
actually my stories about how we made

00:11:32,389 --> 00:11:37,309
the multi-cloud to become a reality for

00:11:34,699 --> 00:11:41,089
ACP cloud platform on a case of

00:11:37,309 --> 00:11:43,279
Microsoft Asia so in the beginning if we

00:11:41,089 --> 00:11:46,970
just started with blueprint like that

00:11:43,279 --> 00:11:48,410
and then after a few months we have

00:11:46,970 --> 00:11:50,300
finished with a successful integration

00:11:48,410 --> 00:11:52,610
of Microsoft Azure

00:11:50,300 --> 00:11:57,019
into infrastructure providers family

00:11:52,610 --> 00:11:59,930
available and is a Pequod's forum so

00:11:57,019 --> 00:12:02,629
first of all I want to share the general

00:11:59,930 --> 00:12:05,360
impression from our work with Microsoft

00:12:02,629 --> 00:12:08,269
Asia when we started our exploration of

00:12:05,360 --> 00:12:11,120
Asia capabilities we discovered Asia as

00:12:08,269 --> 00:12:13,610
a stable in major eyes where what

00:12:11,120 --> 00:12:16,850
features and functionality required for

00:12:13,610 --> 00:12:20,179
our platform we already there from day

00:12:16,850 --> 00:12:23,300
one for example things like white

00:12:20,179 --> 00:12:26,240
offering of the VM and the harvest types

00:12:23,300 --> 00:12:28,970
and series for us it was important

00:12:26,240 --> 00:12:31,879
because every component that you can see

00:12:28,970 --> 00:12:35,059
there is a consumes a specific amount of

00:12:31,879 --> 00:12:37,370
resources hence our role is to find the

00:12:35,059 --> 00:12:39,980
optimal match between the component

00:12:37,370 --> 00:12:42,980
needs in the provider ties resources and

00:12:39,980 --> 00:12:46,040
of course we have found a ready to use

00:12:42,980 --> 00:12:49,730
the terraform in the boss CPI for agile

00:12:46,040 --> 00:12:52,279
such readiness allows us to do a rapid

00:12:49,730 --> 00:12:55,579
delivery of sa Pequod's platform and

00:12:52,279 --> 00:12:58,579
it's a it's a big cloud foundry on top

00:12:55,579 --> 00:13:01,819
of Microsoft agile you can find that

00:12:58,579 --> 00:13:04,189
quad foundry on the diagram is one of

00:13:01,819 --> 00:13:06,110
the pillars in the overall is a big

00:13:04,189 --> 00:13:09,019
cloud platform architecture it's

00:13:06,110 --> 00:13:13,129
consisting of multiple components

00:13:09,019 --> 00:13:15,439
communicating with each other I want to

00:13:13,129 --> 00:13:18,220
put your attention that in order to run

00:13:15,439 --> 00:13:20,380
it on top of Asia we have collected

00:13:18,220 --> 00:13:23,950
to all the requirements needed for the

00:13:20,380 --> 00:13:27,670
quad foundry environment and also for

00:13:23,950 --> 00:13:30,130
all the ACP services and then found the

00:13:27,670 --> 00:13:34,330
relevant counterparts provided by a

00:13:30,130 --> 00:13:37,090
angel for us it is fundamental to

00:13:34,330 --> 00:13:40,000
consume all these resources using the

00:13:37,090 --> 00:13:42,430
terraform and Bosch CPI's my colleagues

00:13:40,000 --> 00:13:44,680
work closely with say Microsoft team to

00:13:42,430 --> 00:13:46,780
enhance both CPI and to address

00:13:44,680 --> 00:13:49,950
essential functionality needed for a

00:13:46,780 --> 00:13:53,590
Pequod's platform on Microsoft Asia and

00:13:49,950 --> 00:13:57,130
also last but not least in the Big Data

00:13:53,590 --> 00:13:59,350
area that you can see there we are

00:13:57,130 --> 00:14:01,330
working together with Microsoft to

00:13:59,350 --> 00:14:08,770
certify Hana machines for general

00:14:01,330 --> 00:14:11,440
availability so I think it's a good

00:14:08,770 --> 00:14:15,310
moment to show a small demo of a big

00:14:11,440 --> 00:14:19,060
cloud platform a you can scan this a QR

00:14:15,310 --> 00:14:25,000
code to go into the our quad platter

00:14:19,060 --> 00:14:27,270
cockpit and actually let's say go into

00:14:25,000 --> 00:14:27,270
it

00:14:30,730 --> 00:14:41,260
so actually this in our cockpit because

00:14:35,770 --> 00:14:46,120
our demo is a limited in time we have a

00:14:41,260 --> 00:14:48,040
very strict time limit so I will skip

00:14:46,120 --> 00:14:51,340
the registration process for you and

00:14:48,040 --> 00:14:55,300
they will go directly to the detail so

00:14:51,340 --> 00:14:57,820
after the registration you can get into

00:14:55,300 --> 00:15:05,620
this dead board where you are the

00:14:57,820 --> 00:15:07,390
developer can can use Cloud Foundry

00:15:05,620 --> 00:15:10,210
environment for deployment your

00:15:07,390 --> 00:15:13,720
applications and for example you can see

00:15:10,210 --> 00:15:17,980
that we are providing several cloud

00:15:13,720 --> 00:15:21,190
providers in a different regions and for

00:15:17,980 --> 00:15:25,720
this demo especially I created a project

00:15:21,190 --> 00:15:30,250
demo project on top of Microsoft edge on

00:15:25,720 --> 00:15:33,790
using the other infrastructures so after

00:15:30,250 --> 00:15:38,290
I created my account and created the

00:15:33,790 --> 00:15:41,770
project you can get into the account

00:15:38,290 --> 00:15:44,950
overview of where you can find all the

00:15:41,770 --> 00:15:47,650
relevant information like what is name

00:15:44,950 --> 00:15:50,320
of the organization which I quoted in

00:15:47,650 --> 00:15:54,520
which services you have the API endpoint

00:15:50,320 --> 00:15:57,070
and if you if you go deeper into the

00:15:54,520 --> 00:15:59,890
menus you can reach the marketplace

00:15:57,070 --> 00:16:01,810
where you can find the common back-end

00:15:59,890 --> 00:16:04,570
range where services that we are

00:16:01,810 --> 00:16:08,020
providing and other services like the

00:16:04,570 --> 00:16:10,450
application box the Hana trial under

00:16:08,020 --> 00:16:14,680
common back in the web service I mean as

00:16:10,450 --> 00:16:19,870
a portable signal the rabbitmq ready sip

00:16:14,680 --> 00:16:22,270
and other databases so for example my

00:16:19,870 --> 00:16:25,480
application consumes the Postgres

00:16:22,270 --> 00:16:26,950
database so I created an instance of the

00:16:25,480 --> 00:16:31,540
database and deployed the application

00:16:26,950 --> 00:16:34,690
and also after did the deployment I did

00:16:31,540 --> 00:16:38,800
a binding of the progress service to my

00:16:34,690 --> 00:16:40,440
application so for example after you do

00:16:38,800 --> 00:16:43,009
the binding using

00:16:40,440 --> 00:16:45,870
they're bored you can also go to the

00:16:43,009 --> 00:16:48,949
database of service specifically their

00:16:45,870 --> 00:16:53,250
boards for example if I'm clicking here

00:16:48,949 --> 00:16:56,550
you can see that all the details of the

00:16:53,250 --> 00:16:58,620
properties the application log and your

00:16:56,550 --> 00:17:01,110
if you are familiar with the terminal

00:16:58,620 --> 00:17:03,449
and you prefer to operate with Cloud

00:17:01,110 --> 00:17:08,159
Foundry using the court found receiver

00:17:03,449 --> 00:17:14,459
so for example you can a target it

00:17:08,159 --> 00:17:19,860
environment at a parent point and for

00:17:14,459 --> 00:17:25,500
example you can get the application and

00:17:19,860 --> 00:17:28,130
I can see the services so for example if

00:17:25,500 --> 00:17:28,130
I open the application

00:17:34,590 --> 00:17:44,879
so it's a just a very small application

00:17:38,879 --> 00:17:49,669
that he showed they demonstrate the

00:17:44,879 --> 00:17:49,669
basic functionality of a typical patent

00:18:00,500 --> 00:18:09,919
so let's see what happened under the

00:18:03,770 --> 00:18:12,500
hood how was this done on the a job so

00:18:09,919 --> 00:18:14,299
briefly on this side you can see how we

00:18:12,500 --> 00:18:16,940
are doing of a deployment of the cloud

00:18:14,299 --> 00:18:19,490
foundry environment in other services on

00:18:16,940 --> 00:18:22,039
top of different cloud providers you may

00:18:19,490 --> 00:18:25,250
find in our toolbox we are using the

00:18:22,039 --> 00:18:28,070
tools like a tariff or min Bush and also

00:18:25,250 --> 00:18:30,980
we are using the Concours for continuous

00:18:28,070 --> 00:18:33,530
integration the center row here is the

00:18:30,980 --> 00:18:35,929
belong store infrastructure as a code is

00:18:33,530 --> 00:18:38,539
a method to define infrastructure

00:18:35,929 --> 00:18:41,539
components and all the requirements in

00:18:38,539 --> 00:18:43,820
form of code it could be a Porsche

00:18:41,539 --> 00:18:46,490
manifest or terraform script for example

00:18:43,820 --> 00:18:49,370
so when developer changing the code of

00:18:46,490 --> 00:18:51,770
some component and committed to the

00:18:49,370 --> 00:18:53,780
repository then the Concours may trigger

00:18:51,770 --> 00:18:55,909
a boss deployment with a specific

00:18:53,780 --> 00:18:58,580
manifest to do a component update

00:18:55,909 --> 00:19:01,760
because not all code providers made the

00:18:58,580 --> 00:19:03,679
same hand the challenging is to support

00:19:01,760 --> 00:19:05,179
all the diversity of quality

00:19:03,679 --> 00:19:10,429
acknowledges and the difference between

00:19:05,179 --> 00:19:12,860
boss CPI's dialects so when we deploy

00:19:10,429 --> 00:19:15,289
our foundry environment we are managing

00:19:12,860 --> 00:19:17,030
all those differences to provide the

00:19:15,289 --> 00:19:18,980
same quad foundry experience for

00:19:17,030 --> 00:19:24,590
customers regardless of hosted

00:19:18,980 --> 00:19:26,600
infrastructure so my story would not be

00:19:24,590 --> 00:19:29,960
complete without talking about multi

00:19:26,600 --> 00:19:32,030
cloud challenge on Asia so as a support

00:19:29,960 --> 00:19:34,130
of different Bosphorus API dialects it's

00:19:32,030 --> 00:19:36,950
a general challenge I would like to talk

00:19:34,130 --> 00:19:40,760
about other kind of challenge both of

00:19:36,950 --> 00:19:44,299
the same level where the capabilities of

00:19:40,760 --> 00:19:46,640
cloud providers are mostly similar often

00:19:44,299 --> 00:19:50,809
they are organizing with the resources

00:19:46,640 --> 00:19:53,450
and differently in order to provide to

00:19:50,809 --> 00:19:55,270
those capabilities so actually the great

00:19:53,450 --> 00:19:57,799
example of how different cloud providers

00:19:55,270 --> 00:19:59,750
accomplish the same goals with a

00:19:57,799 --> 00:20:03,230
different design is availability

00:19:59,750 --> 00:20:05,539
concepts most of cloud providers use I

00:20:03,230 --> 00:20:07,760
use a sign showing availability by

00:20:05,539 --> 00:20:10,669
spreading multiple instances of the same

00:20:07,760 --> 00:20:13,210
VM row across availability zones in

00:20:10,669 --> 00:20:18,789
other words each zone is a

00:20:13,210 --> 00:20:21,729
the distant fault domain for example if

00:20:18,789 --> 00:20:26,469
I have a web service and they would like

00:20:21,729 --> 00:20:29,049
to have a high availability so I'm a to

00:20:26,469 --> 00:20:32,950
the poor at least one instance at each

00:20:29,049 --> 00:20:33,549
zone and I have to do it manually on

00:20:32,950 --> 00:20:35,830
nature

00:20:33,549 --> 00:20:38,259
in contrast or other cloud providers

00:20:35,830 --> 00:20:40,960
users can place multiple instances of

00:20:38,259 --> 00:20:43,389
the same VM role in availability set and

00:20:40,960 --> 00:20:45,429
allows the agent platform to

00:20:43,389 --> 00:20:49,029
automatically spread them across four

00:20:45,429 --> 00:20:52,229
domains they say Pequod's fathom

00:20:49,029 --> 00:20:57,759
abstract these differences away from you

00:20:52,229 --> 00:21:00,999
okay so when we started our exploratory

00:20:57,759 --> 00:21:04,029
of asier capabilities we have a concern

00:21:00,999 --> 00:21:06,399
about ease of operation of multiple

00:21:04,029 --> 00:21:09,190
storage account and about the overall

00:21:06,399 --> 00:21:12,009
disk performance using classic storage

00:21:09,190 --> 00:21:14,409
accounts but everything changed with the

00:21:12,009 --> 00:21:16,830
manage this feature it is which is

00:21:14,409 --> 00:21:20,440
remove the performance limit boundaries

00:21:16,830 --> 00:21:22,179
so our concerns will dissipate after the

00:21:20,440 --> 00:21:24,789
general availability of the mini disk

00:21:22,179 --> 00:21:28,749
and the following update of the boss CPI

00:21:24,789 --> 00:21:32,289
that support this feature and if I'm

00:21:28,749 --> 00:21:34,839
talking about boss CPI enhancement it's

00:21:32,289 --> 00:21:38,529
a good idea to show of how the blood

00:21:34,839 --> 00:21:40,539
supply evolves over the time please put

00:21:38,529 --> 00:21:42,759
attention that most of the major updates

00:21:40,539 --> 00:21:45,639
will deliver it in a short period of

00:21:42,759 --> 00:21:48,129
time for half year a new edge of

00:21:45,639 --> 00:21:51,309
functionality supports lended into both

00:21:48,129 --> 00:21:53,259
CPI like manage this feature multiple

00:21:51,309 --> 00:21:56,799
users group support ability to create

00:21:53,259 --> 00:21:59,739
application gateway and all other

00:21:56,799 --> 00:22:02,559
overall improvements it offers developer

00:21:59,739 --> 00:22:06,879
experience like better diagnostics and

00:22:02,559 --> 00:22:09,909
already try budget so I think it was a

00:22:06,879 --> 00:22:14,369
very fantastic work and I think it's a

00:22:09,909 --> 00:22:17,099
perfect end to my story so thank you and

00:22:14,369 --> 00:22:20,289
now Sean we talked about

00:22:17,099 --> 00:22:22,950
epicotyl and the native facial

00:22:20,289 --> 00:22:22,950
integrations

00:22:26,050 --> 00:22:29,230
[Music]

00:22:31,010 --> 00:22:37,280
just like a performance test for a

00:22:33,360 --> 00:22:37,280
MacBook HDMI connectivity

00:22:47,380 --> 00:22:51,460
okay so Demetri talked a little bit

00:22:49,539 --> 00:22:54,669
about some of the the challenges that we

00:22:51,460 --> 00:22:56,679
work through together to align SAV cloud

00:22:54,669 --> 00:22:59,320
platforms multi-cloud architecture with

00:22:56,679 --> 00:23:01,539
some of the specific design decisions

00:22:59,320 --> 00:23:03,460
that we've made in azure and how the

00:23:01,539 --> 00:23:05,260
cloud platform ultimately abstracts most

00:23:03,460 --> 00:23:06,490
of those things away from you so you

00:23:05,260 --> 00:23:08,590
don't have to worry about those sort of

00:23:06,490 --> 00:23:11,169
peculiarities of different cloud

00:23:08,590 --> 00:23:13,360
providers but then there are a number of

00:23:11,169 --> 00:23:15,190
cases where you actually want to take

00:23:13,360 --> 00:23:16,809
advantage of some some native

00:23:15,190 --> 00:23:18,520
capabilities and you want to have

00:23:16,809 --> 00:23:19,780
awareness of the cloud provider that

00:23:18,520 --> 00:23:21,610
you're running on so you can actually

00:23:19,780 --> 00:23:24,580
use some of the differentiated

00:23:21,610 --> 00:23:27,190
capabilities and so there's a couple of

00:23:24,580 --> 00:23:31,090
those that are of interest when it comes

00:23:27,190 --> 00:23:32,919
to to Azure the first is briefly

00:23:31,090 --> 00:23:34,360
mentioned before the service broker

00:23:32,919 --> 00:23:35,620
concept is something that you know I

00:23:34,360 --> 00:23:37,720
think everybody in the cloud foundry

00:23:35,620 --> 00:23:40,360
community is very excited about in fact

00:23:37,720 --> 00:23:42,309
is is growing now beyond flat foundry

00:23:40,360 --> 00:23:45,010
into kubernetes through the Service

00:23:42,309 --> 00:23:47,260
Catalog work and so in Azure we've built

00:23:45,010 --> 00:23:49,270
the azure service broker that provides

00:23:47,260 --> 00:23:50,940
access to some of our most popular

00:23:49,270 --> 00:23:54,039
backing services as I mentioned before

00:23:50,940 --> 00:23:56,140
and so you can deploy that in any cloud

00:23:54,039 --> 00:23:57,520
foundry environment including the cloud

00:23:56,140 --> 00:23:59,980
platform and use that as a way to

00:23:57,520 --> 00:24:01,929
connect your applications you're sort of

00:23:59,980 --> 00:24:05,049
cloud native 12 factor apps running in

00:24:01,929 --> 00:24:06,610
the cloud platform to stateful backing

00:24:05,049 --> 00:24:08,320
services that are running in this case

00:24:06,610 --> 00:24:10,030
in Azure and I'll show an example of

00:24:08,320 --> 00:24:12,520
that in a second

00:24:10,030 --> 00:24:16,720
the other is Active Directory so

00:24:12,520 --> 00:24:18,970
Microsoft has a huge amount of assets in

00:24:16,720 --> 00:24:22,510
the identity space with Active Directory

00:24:18,970 --> 00:24:24,909
on Prem as well as our hosted version in

00:24:22,510 --> 00:24:27,880
Azure Azure Active Directory and so

00:24:24,909 --> 00:24:30,010
we've done work as part of that sort of

00:24:27,880 --> 00:24:32,559
ongoing work with with cloud foundry to

00:24:30,010 --> 00:24:34,600
make the azure active directory service

00:24:32,559 --> 00:24:36,610
integrated with cloud foundry which

00:24:34,600 --> 00:24:37,809
means that you can have your if you have

00:24:36,610 --> 00:24:39,760
your identity your corporate identity

00:24:37,809 --> 00:24:42,610
already managed in an Active Directory

00:24:39,760 --> 00:24:45,610
and potentially federated into a B you

00:24:42,610 --> 00:24:46,960
can use that as your identity into your

00:24:45,610 --> 00:24:48,460
cloud foundry environment as well so you

00:24:46,960 --> 00:24:51,280
don't have to create entirely new

00:24:48,460 --> 00:24:53,559
developer and operator identities for

00:24:51,280 --> 00:24:56,370
managing your Cloud Foundry environment

00:24:53,559 --> 00:24:58,900
you can use that with the cloud platform

00:24:56,370 --> 00:25:00,370
as well and so that's that's quite

00:24:58,900 --> 00:25:01,549
powerful because you can then do a

00:25:00,370 --> 00:25:04,549
single sign-on

00:25:01,549 --> 00:25:07,249
into all the different products that ad

00:25:04,549 --> 00:25:13,669
supports including office 365 for

00:25:07,249 --> 00:25:17,149
example okay so let me jump back out of

00:25:13,669 --> 00:25:19,909
here again and do a quick demo of the

00:25:17,149 --> 00:25:22,039
address service broker so again I'll

00:25:19,909 --> 00:25:24,350
start in in github because again this is

00:25:22,039 --> 00:25:26,269
a similar to the CPI is a project that's

00:25:24,350 --> 00:25:29,330
built by Microsoft full-time engineers

00:25:26,269 --> 00:25:30,440
with contributions to the community we

00:25:29,330 --> 00:25:32,749
do it all out in the open

00:25:30,440 --> 00:25:34,460
in github and so you can take a look

00:25:32,749 --> 00:25:37,039
here in this github project and see the

00:25:34,460 --> 00:25:39,830
services that we support today so I

00:25:37,039 --> 00:25:41,659
think there's like nine services that we

00:25:39,830 --> 00:25:45,440
provide there and we're continuing to

00:25:41,659 --> 00:25:47,389
add more all the time and so what I'm

00:25:45,440 --> 00:25:49,429
gonna do is take advantage of this

00:25:47,389 --> 00:25:51,830
service broker to actually deploy a

00:25:49,429 --> 00:25:55,279
backing service in Azure that I can then

00:25:51,830 --> 00:25:57,409
connect up to a an app that's running in

00:25:55,279 --> 00:26:00,470
the SUV cloud platform so I'll do this

00:25:57,409 --> 00:26:04,159
actually through the azure cloud shell

00:26:00,470 --> 00:26:08,299
which is our in browser CLI experience

00:26:04,159 --> 00:26:10,730
so this is gives you a fully a full bash

00:26:08,299 --> 00:26:13,100
shell actually running inside the

00:26:10,730 --> 00:26:15,379
browser and I mentioned you know we've

00:26:13,100 --> 00:26:17,090
done a number of things to to integrate

00:26:15,379 --> 00:26:19,460
Azure with with foundry and one of them

00:26:17,090 --> 00:26:22,220
is we've actually pre-installed the CF

00:26:19,460 --> 00:26:24,259
CLI in the cloud shell so anybody that

00:26:22,220 --> 00:26:26,359
has an azure account can use this for

00:26:24,259 --> 00:26:28,070
free so if you're ever sort of on the go

00:26:26,359 --> 00:26:28,940
and need to access your cloud founder

00:26:28,070 --> 00:26:30,440
environment whether it's running an

00:26:28,940 --> 00:26:32,600
azure running somewhere else if you just

00:26:30,440 --> 00:26:36,830
need access to the CF CLI in the browser

00:26:32,600 --> 00:26:38,989
you can you can use this and so what

00:26:36,830 --> 00:26:42,230
I'll do is I'm basically I've already

00:26:38,989 --> 00:26:47,929
logged into my cloud platform

00:26:42,230 --> 00:26:50,840
environment you see here that I'm logged

00:26:47,929 --> 00:26:53,239
in with my corporate identity so that's

00:26:50,840 --> 00:26:54,919
taking advantage of that Active

00:26:53,239 --> 00:26:58,580
Directory Integration

00:26:54,919 --> 00:27:01,879
and I've already deployed the azure

00:26:58,580 --> 00:27:03,529
service broker which just gets deployed

00:27:01,879 --> 00:27:06,169
as a cloud foundry application so you

00:27:03,529 --> 00:27:07,460
can take that that project that's

00:27:06,169 --> 00:27:10,970
available in github and deploy it as a

00:27:07,460 --> 00:27:13,940
as a CF app into any CF environment and

00:27:10,970 --> 00:27:15,410
as a result if I do CF Marketplace I can

00:27:13,940 --> 00:27:16,880
see all of the

00:27:15,410 --> 00:27:19,730
as you're backing services that are

00:27:16,880 --> 00:27:21,080
available to deploy here alongside some

00:27:19,730 --> 00:27:24,260
of the ones that are provided natively

00:27:21,080 --> 00:27:27,080
by the cloud platform so here's you know

00:27:24,260 --> 00:27:28,960
cosmos DB and vent hubs and my sequel

00:27:27,080 --> 00:27:35,410
and so on and so what I'm going to do

00:27:28,960 --> 00:27:35,410
I've got a simple node.js application

00:27:35,470 --> 00:27:41,360
that relies on a Redis cache and so the

00:27:39,920 --> 00:27:42,710
beauty of the service broker is just

00:27:41,360 --> 00:27:44,510
kind of just as a developer you say I

00:27:42,710 --> 00:27:45,770
just want to have a Redis cash from

00:27:44,510 --> 00:27:47,780
somewhere I don't really care where it's

00:27:45,770 --> 00:27:50,510
coming from in this case I'll use the

00:27:47,780 --> 00:27:54,110
one that's available in Azure and I so I

00:27:50,510 --> 00:27:56,570
can just do CF create service give it

00:27:54,110 --> 00:27:58,730
the name of the service better as your

00:27:56,570 --> 00:28:06,800
Redis cash I'll call it you have summit

00:27:58,730 --> 00:28:11,000
demo whoops that miss here out the plan

00:28:06,800 --> 00:28:15,230
name so I use the basic plan try to save

00:28:11,000 --> 00:28:16,460
a few francs and so what that's what

00:28:15,230 --> 00:28:19,610
that's going to do is actually talk

00:28:16,460 --> 00:28:20,180
through the service broker app to start

00:28:19,610 --> 00:28:22,610
deploying

00:28:20,180 --> 00:28:25,460
a redish cash in Azure that I could then

00:28:22,610 --> 00:28:27,680
bind to my application that's going to

00:28:25,460 --> 00:28:29,420
take a few minutes that we don't have so

00:28:27,680 --> 00:28:31,340
I'll use one that we created that I

00:28:29,420 --> 00:28:35,870
created earlier which you can see

00:28:31,340 --> 00:28:38,210
specified here in the manifest the CF

00:28:35,870 --> 00:28:42,260
Redis demo service so if I just go ahead

00:28:38,210 --> 00:28:44,060
and push this application so I'm pushing

00:28:42,260 --> 00:28:46,490
this app into the cloud platform so it's

00:28:44,060 --> 00:28:50,330
running in the fully hosted environment

00:28:46,490 --> 00:28:53,300
provided by s ap but then it's binding

00:28:50,330 --> 00:28:55,940
to this Redis cache service that I've

00:28:53,300 --> 00:28:59,420
deployed into my as your subscription

00:28:55,940 --> 00:29:02,030
and once that's completed I will have a

00:28:59,420 --> 00:29:07,240
my node.js application that can talk to

00:29:02,030 --> 00:29:07,240
that that Redis cash behind the scenes

00:29:10,630 --> 00:29:14,750
there you go it's all up and running so

00:29:13,190 --> 00:29:24,470
if I go ahead and grab this end point

00:29:14,750 --> 00:29:27,290
here and drop that into a new tab see

00:29:24,470 --> 00:29:30,800
this app I'm available for consultation

00:29:27,290 --> 00:29:31,910
on web design after the talk if if

00:29:30,800 --> 00:29:35,480
anybody needs help

00:29:31,910 --> 00:29:40,280
so we'll just say ACF summit let's the

00:29:35,480 --> 00:29:42,140
SPE platform rocks submit that and

00:29:40,280 --> 00:29:45,080
that's going to get stored as a key

00:29:42,140 --> 00:29:48,080
value pair in that Redis cache behind

00:29:45,080 --> 00:29:57,320
the scenes and as you might expect I can

00:29:48,080 --> 00:29:59,060
pull it back platform as about again

00:29:57,320 --> 00:30:00,500
pulling it out of that of that Redis

00:29:59,060 --> 00:30:02,120
cache so that allows me to take

00:30:00,500 --> 00:30:05,150
advantage of some of those native Azure

00:30:02,120 --> 00:30:09,430
services in conjunction with the cloud

00:30:05,150 --> 00:30:09,430
platform managed by s AP

00:30:15,510 --> 00:30:23,650
okay so let's start to wrap up so Cloud

00:30:20,830 --> 00:30:25,180
Foundry on on Azure is again something

00:30:23,650 --> 00:30:26,920
we've been working on for multiple years

00:30:25,180 --> 00:30:29,110
we've got multiple different ways that

00:30:26,920 --> 00:30:31,900
you can interact with it we think the

00:30:29,110 --> 00:30:33,850
cloud platform from s AP provides a

00:30:31,900 --> 00:30:35,230
great way for for customers who are

00:30:33,850 --> 00:30:38,440
looking to either integrate with their

00:30:35,230 --> 00:30:41,170
existing safety assets or have that sort

00:30:38,440 --> 00:30:42,340
of fully hosted fully managed service

00:30:41,170 --> 00:30:44,890
where you don't even have to deal with

00:30:42,340 --> 00:30:48,280
you know setting up your box director

00:30:44,890 --> 00:30:50,860
and that sort of thing we've worked

00:30:48,280 --> 00:30:53,500
really closely with s ap over the last

00:30:50,860 --> 00:30:55,180
year so to get the cloud platform up and

00:30:53,500 --> 00:30:57,250
up and running on on Azure and it's been

00:30:55,180 --> 00:30:59,170
a really great partnership as Dimitri

00:30:57,250 --> 00:31:01,180
alluded to we've had really quick

00:30:59,170 --> 00:31:05,010
iteration cycles between the two

00:31:01,180 --> 00:31:07,180
companies and it's you know we're really

00:31:05,010 --> 00:31:08,800
you know aware of and then sort of

00:31:07,180 --> 00:31:10,830
invested in this multi cloud notion we

00:31:08,800 --> 00:31:13,270
hear this from a lot of customers and so

00:31:10,830 --> 00:31:14,590
you know it's not it's not something

00:31:13,270 --> 00:31:16,270
that we fear to go and have these

00:31:14,590 --> 00:31:19,030
conversations about how we can enable

00:31:16,270 --> 00:31:22,210
multi cloud sort of environments like

00:31:19,030 --> 00:31:24,220
the cloud platform and as a result you

00:31:22,210 --> 00:31:26,680
know enabled cloud platform is the first

00:31:24,220 --> 00:31:29,110
multi tenant hosted Cloud Foundry

00:31:26,680 --> 00:31:31,780
offering in Azure so that's pretty

00:31:29,110 --> 00:31:33,160
exciting a bunch of resources here

00:31:31,780 --> 00:31:35,830
including some of the things that we've

00:31:33,160 --> 00:31:40,600
pointed to through through the session

00:31:35,830 --> 00:31:43,570
so go ahead and check those out and with

00:31:40,600 --> 00:31:47,550
that I think we'll open it up for a few

00:31:43,570 --> 00:31:47,550
minutes of questions thanks very much

00:31:52,259 --> 00:31:56,399
this is one in the back first yeah

00:31:57,360 --> 00:32:03,460
pardon me the resources sure you should

00:32:02,259 --> 00:32:08,159
be able to get this deck afterwards as

00:32:03,460 --> 00:32:08,159
well but here you go yes sir

00:32:32,070 --> 00:33:13,990
upgrade of the within and I think it's

00:33:12,669 --> 00:33:16,419
typically like within a couple weeks

00:33:13,990 --> 00:33:19,559
right typically within a couple weeks of

00:33:16,419 --> 00:33:19,559
like sort of an open-source version

00:33:43,700 --> 00:34:14,960
the backup and restore yes

00:34:13,070 --> 00:34:17,149
so that was the thing I showed initially

00:34:14,960 --> 00:34:19,669
is basically you go that the as your CPI

00:34:17,149 --> 00:34:22,909
github page or actually the Bosch

00:34:19,669 --> 00:34:24,260
documentation and that gives you the I

00:34:22,909 --> 00:34:26,899
think one of these links will have it

00:34:24,260 --> 00:34:29,990
the instructions for deploying basically

00:34:26,899 --> 00:34:32,450
a box director so you can use as your

00:34:29,990 --> 00:34:34,220
resource manager template and just spin

00:34:32,450 --> 00:34:36,290
up the azure virtual network and a

00:34:34,220 --> 00:34:39,200
couple of virtual machines and storage

00:34:36,290 --> 00:34:41,419
account about dozen resources that get

00:34:39,200 --> 00:34:48,350
created but then yeah you can deploy

00:34:41,419 --> 00:34:49,490
open source cloud foundry yeah correct

00:34:48,350 --> 00:34:50,720
yeah if you run it if you want to run

00:34:49,490 --> 00:34:53,570
open source co-founder you're running

00:34:50,720 --> 00:34:55,399
that on directly on Azure is resources

00:34:53,570 --> 00:35:04,400
that are part of your account your

00:34:55,399 --> 00:35:06,980
subscription so Cloud Foundry is not

00:35:04,400 --> 00:35:10,010
built on VM scale sets as your VM scale

00:35:06,980 --> 00:35:12,320
sets because Bosch operates in terms of

00:35:10,010 --> 00:35:13,670
single VMs we actually we did a whole

00:35:12,320 --> 00:35:16,130
investigation about whether we could

00:35:13,670 --> 00:35:19,580
enable that but it just doesn't work

00:35:16,130 --> 00:35:22,460
well with the Bosh API but in general

00:35:19,580 --> 00:35:25,190
yeah the you get the capabilities of you

00:35:22,460 --> 00:35:27,290
know the core Azure I as in terms of you

00:35:25,190 --> 00:35:28,940
can choose different VM SKUs and you can

00:35:27,290 --> 00:35:35,180
set them up for you know shutting down

00:35:28,940 --> 00:35:39,710
and all that kind of stuff through Bosh

00:35:35,180 --> 00:35:41,360
deployments basically it's yeah yeah

00:35:39,710 --> 00:35:44,360
that is it's one of the drawbacks

00:35:41,360 --> 00:35:45,950
frankly is if we don't have I mean Cloud

00:35:44,360 --> 00:35:48,580
Foundry in general doesn't have an auto

00:35:45,950 --> 00:35:52,370
scaling infrastructure auto scaling

00:35:48,580 --> 00:35:53,510
notion which is again I think you know

00:35:52,370 --> 00:35:55,970
part of the value of using something

00:35:53,510 --> 00:35:56,280
like SCP is that it's just sort of Auto

00:35:55,970 --> 00:36:05,850
scale

00:35:56,280 --> 00:36:07,560
for you yeah okay yeah so thanks

00:36:05,850 --> 00:36:08,880
everybody for coming if you have any

00:36:07,560 --> 00:36:10,830
questions about cloud fair and azure

00:36:08,880 --> 00:36:12,930
I'll be at the Microsoft booth most of

00:36:10,830 --> 00:36:14,850
the time over the next couple days and

00:36:12,930 --> 00:36:17,790
as Dimitri mentioned he'll be over at

00:36:14,850 --> 00:36:21,659
the ASAP booth so thanks

00:36:17,790 --> 00:36:21,659

YouTube URL: https://www.youtube.com/watch?v=H2xWk8dMXh0


