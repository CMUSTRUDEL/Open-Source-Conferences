Title: Advanced Vulnerability Management in Cloud Foundry - Molly Crowther & Stephen Levine, Pivotal
Publication date: 2017-10-18
Playlist: Cloud Foundry Summit Europe 2017
Description: 
	Advanced Vulnerability Management in Cloud Foundry - Molly Crowther & Stephen Levine, Pivotal

Forbes Insights reported in 2016 that 44% of all data breaches are caused by known software vulnerabilities. The Security Triage and Automation team is helping to secure Cloud Foundry by building the next level of automated vulnerability management tools and processes that allow Enterprise customers to patch against vulnerabilities early and often. This session will cover the CF security philosophy, background of security management for Cloud Foundry, and a demo of how the team has automated the process from data ingestion through to publicized fix information. Molly and Stephen will talk about how their unique team is changing how OSS projects secure against known vulnerabilities.

About Molly Crowther
Molly Crowther is a Senior Technical Program Manager for Cloud Foundry at Pivotal. She works primarily with the Security Triage team to determine the impact of vulnerabilities reported for Cloud Foundry. She also works with the CF Foundation to improve security processes. This is her first time speaking at CF Summit.

About Stephen Levine
Stephen Levine is a Pivotal CF Product Manager on Buildpacks team. He’s been known to leave unsuspecting coworkers’ keyboards set to Dvorak.
Captions: 
	00:00:00,000 --> 00:00:09,210
hello we are here to talk about advanced

00:00:06,210 --> 00:00:11,910
vulnerability management Foundry sorry

00:00:09,210 --> 00:00:13,769
thank you for coming I'm Molly Crowther

00:00:11,910 --> 00:00:16,680
I'm a technical program manager at

00:00:13,769 --> 00:00:20,520
pivotal I also am a member of the Cloud

00:00:16,680 --> 00:00:22,590
Foundry foundation security team I'm

00:00:20,520 --> 00:00:24,689
Stephan Levine I'm a software engineer

00:00:22,590 --> 00:00:27,570
and I do product management work also

00:00:24,689 --> 00:00:34,050
and I'm the CF bill PACs Project Lead

00:00:27,570 --> 00:00:36,510
for Pitt oh cool so what we're gonna

00:00:34,050 --> 00:00:40,500
talk about a little bit today is Cloud

00:00:36,510 --> 00:00:42,270
Foundry as a secure platform the kind of

00:00:40,500 --> 00:00:46,110
inherent nature of Cloud Foundry that

00:00:42,270 --> 00:00:49,079
makes it secure some vulnerability

00:00:46,110 --> 00:00:50,460
management process before and after this

00:00:49,079 --> 00:00:54,239
thing called Davos that we're gonna talk

00:00:50,460 --> 00:00:56,640
about a sample Davos workflow and

00:00:54,239 --> 00:00:59,039
hopefully a call to action for all of

00:00:56,640 --> 00:01:02,730
you for how you can help make this a

00:00:59,039 --> 00:01:05,189
better tool I just wanted to give a

00:01:02,730 --> 00:01:07,200
quick team kudos to everybody who's

00:01:05,189 --> 00:01:10,500
worked on the triage and automation

00:01:07,200 --> 00:01:12,810
security team so far we have a very big

00:01:10,500 --> 00:01:14,250
group of people who have kind of moved

00:01:12,810 --> 00:01:18,720
in and out of the team and have helped

00:01:14,250 --> 00:01:23,549
us along that was us at a team outing

00:01:18,720 --> 00:01:26,070
kayaking in New York City so just before

00:01:23,549 --> 00:01:27,960
we get too far this thing called Davos

00:01:26,070 --> 00:01:29,790
that we're talking about today it's not

00:01:27,960 --> 00:01:32,700
just the guy from Game of Thrones and

00:01:29,790 --> 00:01:34,590
it's not just a town in Switzerland

00:01:32,700 --> 00:01:37,229
it's a vulnerability management tool

00:01:34,590 --> 00:01:39,659
that we've been building internally that

00:01:37,229 --> 00:01:46,320
we want to start to share with the

00:01:39,659 --> 00:01:47,790
foundation so we originally came up with

00:01:46,320 --> 00:01:50,399
the name Davos and then we're like what

00:01:47,790 --> 00:01:52,020
is this thing actually so it's also

00:01:50,399 --> 00:01:55,200
known as the dependency and

00:01:52,020 --> 00:01:57,829
vulnerability Overlord system Davos for

00:01:55,200 --> 00:02:00,979
short it was built by the pivotal

00:01:57,829 --> 00:02:03,780
security automation team over the past

00:02:00,979 --> 00:02:07,229
10 months or so we got started at the

00:02:03,780 --> 00:02:09,090
beginning of this year in a nutshell it

00:02:07,229 --> 00:02:09,979
collects and stores data about

00:02:09,090 --> 00:02:12,319
vulnerability

00:02:09,979 --> 00:02:15,500
and integrates with tracker to alert

00:02:12,319 --> 00:02:19,280
both open source and commercial teams

00:02:15,500 --> 00:02:21,050
from pivotal about vulnerabilities and

00:02:19,280 --> 00:02:22,910
to collect information back from them

00:02:21,050 --> 00:02:26,090
about whether or not they're vulnerable

00:02:22,910 --> 00:02:28,970
to that particular issue and what

00:02:26,090 --> 00:02:31,250
versions they've fixed that issue in and

00:02:28,970 --> 00:02:32,690
released we're talking about this today

00:02:31,250 --> 00:02:33,739
because we think this is kind of a new

00:02:32,690 --> 00:02:36,970
thing

00:02:33,739 --> 00:02:39,230
we haven't heard a lot about security

00:02:36,970 --> 00:02:42,260
management and vulnerability management

00:02:39,230 --> 00:02:45,110
specifically integrating with agile

00:02:42,260 --> 00:02:48,709
workflow and that's what we think is

00:02:45,110 --> 00:02:53,150
cool and we're gonna talk about it so

00:02:48,709 --> 00:02:56,329
why did we decide to invest in building

00:02:53,150 --> 00:02:59,390
Davos just to give a little bit of

00:02:56,329 --> 00:03:02,180
background heartbleed which was

00:02:59,390 --> 00:03:06,349
disclosed in 2014 this was actually

00:03:02,180 --> 00:03:10,790
before I joined pivotal it was a

00:03:06,349 --> 00:03:13,880
vulnerability and open SSL that affected

00:03:10,790 --> 00:03:16,280
most commercial traffic on the Internet

00:03:13,880 --> 00:03:18,609
some of our stem cells were affected but

00:03:16,280 --> 00:03:21,530
not all of them were and it was also

00:03:18,609 --> 00:03:25,880
kind of the first major public

00:03:21,530 --> 00:03:28,819
vulnerability that happened after cloud

00:03:25,880 --> 00:03:31,549
foundry came about but before the

00:03:28,819 --> 00:03:33,139
foundation or even pivotal really had a

00:03:31,549 --> 00:03:37,190
process in place for disclosing

00:03:33,139 --> 00:03:41,799
vulnerabilities and then the next thing

00:03:37,190 --> 00:03:45,170
was a dirty cow which happened last year

00:03:41,799 --> 00:03:47,090
it was so bad that linus torvalds

00:03:45,170 --> 00:03:49,459
actually patched it himself

00:03:47,090 --> 00:03:51,200
he said that he had tried to fix it 11

00:03:49,459 --> 00:03:54,109
years prior but just wasn't able to do

00:03:51,200 --> 00:03:56,510
it it was one of the first sea bees to

00:03:54,109 --> 00:04:01,190
get a live patch from canonical all of

00:03:56,510 --> 00:04:05,180
our stem cells were affected and we were

00:04:01,190 --> 00:04:09,410
able to release new patched stem cells a

00:04:05,180 --> 00:04:12,260
day after this went public so it was

00:04:09,410 --> 00:04:15,709
kind of proof of concept of Cloud

00:04:12,260 --> 00:04:19,639
Foundry as a platform that's able to

00:04:15,709 --> 00:04:22,580
patch Linux very quickly and also

00:04:19,639 --> 00:04:24,919
this one was unique in that when it was

00:04:22,580 --> 00:04:28,400
disclosed publicly it was done with a

00:04:24,919 --> 00:04:31,669
website with logos they had a wiki setup

00:04:28,400 --> 00:04:32,990
they had t-shirts printed and we kind of

00:04:31,669 --> 00:04:34,819
figured that this sort of thing was

00:04:32,990 --> 00:04:36,979
going to happen more and more often that

00:04:34,819 --> 00:04:40,520
we get very very public vulnerabilities

00:04:36,979 --> 00:04:43,729
that basically go viral to a wider

00:04:40,520 --> 00:04:46,639
community more quickly than you could

00:04:43,729 --> 00:04:48,439
imagine because previously you think of

00:04:46,639 --> 00:04:49,099
oh you know there's a vulnerability in

00:04:48,439 --> 00:04:51,020
Linux

00:04:49,099 --> 00:04:53,330
like who's actually gonna care about

00:04:51,020 --> 00:04:56,900
this but this was you know picked up by

00:04:53,330 --> 00:04:59,900
the news I'm assuming people ordered

00:04:56,900 --> 00:05:01,550
t-shirts so this was just something that

00:04:59,900 --> 00:05:04,150
we knew that in the future we were gonna

00:05:01,550 --> 00:05:04,150
have to worry about

00:05:05,389 --> 00:05:10,939
so we're quickly going to talk about a

00:05:07,969 --> 00:05:14,689
bunch of security notices which we also

00:05:10,939 --> 00:05:17,319
refer to as USNS they basically are

00:05:14,689 --> 00:05:20,210
notices that are put out by canonical

00:05:17,319 --> 00:05:24,080
about the abunch of distribution of

00:05:20,210 --> 00:05:30,589
Linux and a u.s.n usually contains one

00:05:24,080 --> 00:05:34,370
or more CVEs so because the Boche stem

00:05:30,589 --> 00:05:39,319
cells and the root FS relies so heavily

00:05:34,370 --> 00:05:44,169
on Ubuntu it's easy for us to patch a

00:05:39,319 --> 00:05:47,860
lot of things quickly by what we call

00:05:44,169 --> 00:05:50,270
basically patching for a particular USN

00:05:47,860 --> 00:05:53,469
so this is what the process looks like

00:05:50,270 --> 00:05:57,110
in theory somebody in the open-source

00:05:53,469 --> 00:06:00,379
patches their package that gets put into

00:05:57,110 --> 00:06:03,800
Linux canonical updates a bunch you with

00:06:00,379 --> 00:06:06,259
a new version of the package we as

00:06:03,800 --> 00:06:09,620
quickly as possible if it's a high

00:06:06,259 --> 00:06:13,729
severity USN we patch the root FS and we

00:06:09,620 --> 00:06:16,339
patch the stem cell we make some sort of

00:06:13,729 --> 00:06:19,189
public notification on Cloud Foundry org

00:06:16,339 --> 00:06:21,000
slash security to let everyone know that

00:06:19,189 --> 00:06:22,830
these new

00:06:21,000 --> 00:06:25,980
and stem cells are available and that

00:06:22,830 --> 00:06:28,620
they should pick them up and then in a

00:06:25,980 --> 00:06:31,650
kind of commercial context the pivotal

00:06:28,620 --> 00:06:34,470
runtime patches with the root of s in

00:06:31,650 --> 00:06:38,040
the stem cell our other services patch

00:06:34,470 --> 00:06:41,460
as well and then we make our own pivotal

00:06:38,040 --> 00:06:44,100
focus public notification that these

00:06:41,460 --> 00:06:47,270
versions are available for customers to

00:06:44,100 --> 00:06:50,900
pick up one thing to note with this is

00:06:47,270 --> 00:06:54,330
we kind of go through this process on a

00:06:50,900 --> 00:06:56,840
relatively regular monthly cadence to

00:06:54,330 --> 00:07:00,030
pick up all kind of low and medium

00:06:56,840 --> 00:07:04,910
severity us ends that are released by

00:07:00,030 --> 00:07:08,760
canonical but this process has to run

00:07:04,910 --> 00:07:11,070
with relatively little notice and much

00:07:08,760 --> 00:07:15,660
more click quickly when they release a

00:07:11,070 --> 00:07:19,560
high severity USM and you know hopefully

00:07:15,660 --> 00:07:20,010
our customers know upgrade so what's the

00:07:19,560 --> 00:07:22,230
problem

00:07:20,010 --> 00:07:24,330
like why couldn't we just run this and

00:07:22,230 --> 00:07:29,850
and get really really good at at doing

00:07:24,330 --> 00:07:33,690
this in a repeatable way one thing is

00:07:29,850 --> 00:07:36,300
that as I said at high USNS need to be

00:07:33,690 --> 00:07:38,760
patched faster and as you can see from

00:07:36,300 --> 00:07:44,790
this graph that I made this is just

00:07:38,760 --> 00:07:46,260
showing the number of high us ends all

00:07:44,790 --> 00:07:49,169
time that have been released on a

00:07:46,260 --> 00:07:52,340
particular day of the month they tend to

00:07:49,169 --> 00:07:55,650
be very variable we can't ever expect

00:07:52,340 --> 00:07:57,630
you know any particular day a high USM

00:07:55,650 --> 00:08:00,930
could come out we've definitely had

00:07:57,630 --> 00:08:02,729
complaints from product teams like why

00:08:00,930 --> 00:08:04,320
can't this happen more regularly and

00:08:02,729 --> 00:08:07,200
it's like this is completely out of our

00:08:04,320 --> 00:08:10,169
control it's somewhat random and just it

00:08:07,200 --> 00:08:12,600
happens when it happens so you know

00:08:10,169 --> 00:08:14,490
we've had several situations where we

00:08:12,600 --> 00:08:15,780
start patching for a high USN and we're

00:08:14,490 --> 00:08:17,490
in the middle of the process and another

00:08:15,780 --> 00:08:19,530
one comes out and everybody has to throw

00:08:17,490 --> 00:08:21,620
away all the work they did and start

00:08:19,530 --> 00:08:21,620
over

00:08:22,550 --> 00:08:28,340
the other problem that we've seen is

00:08:25,470 --> 00:08:31,080
that public notification is really hard

00:08:28,340 --> 00:08:34,380
I've obviously personally received a lot

00:08:31,080 --> 00:08:37,620
of feedback about why is this notice up

00:08:34,380 --> 00:08:40,200
why is that notice not up where is it

00:08:37,620 --> 00:08:42,360
it's been a long time what's going on I

00:08:40,200 --> 00:08:46,290
see the pivotal notices up but the open

00:08:42,360 --> 00:08:47,940
source one isn't basically like runs the

00:08:46,290 --> 00:08:50,030
gamut anything you could think of to

00:08:47,940 --> 00:08:53,040
complain about public notification

00:08:50,030 --> 00:08:56,370
people complain about it the other thing

00:08:53,040 --> 00:08:59,520
is that we don't have enough resources

00:08:56,370 --> 00:09:02,910
to put out a public notice for every

00:08:59,520 --> 00:09:04,380
single CVE or USN that comes out there

00:09:02,910 --> 00:09:06,210
are a lot of things that don't affect us

00:09:04,380 --> 00:09:08,700
that we don't notify people about

00:09:06,210 --> 00:09:10,560
because if we just did that like that

00:09:08,700 --> 00:09:16,290
would literally take up an entire team's

00:09:10,560 --> 00:09:17,940
complete time so that's also a problem

00:09:16,290 --> 00:09:20,640
that that isn't completely solved just

00:09:17,940 --> 00:09:25,980
by having having somebody responsible

00:09:20,640 --> 00:09:27,390
for for putting out public notices one

00:09:25,980 --> 00:09:28,830
last thing that throws a wrench and

00:09:27,390 --> 00:09:31,590
everything I like to go on vacation

00:09:28,830 --> 00:09:33,780
sometimes USNS come out while I'm on

00:09:31,590 --> 00:09:36,840
vacation this has happened plenty of

00:09:33,780 --> 00:09:39,540
times or you know other reasons to be

00:09:36,840 --> 00:09:41,400
out of the office like volunteering and

00:09:39,540 --> 00:09:42,960
Crissy Field which we've done I think in

00:09:41,400 --> 00:09:46,680
high USN actually came out that day

00:09:42,960 --> 00:09:48,480
while we were picking weeds I also have

00:09:46,680 --> 00:09:51,650
a really cute dog who sometimes like

00:09:48,480 --> 00:09:54,600
wants me to not work on the weekends so

00:09:51,650 --> 00:09:58,590
there are human problems in this in this

00:09:54,600 --> 00:10:02,250
process also so kind of went through

00:09:58,590 --> 00:10:05,940
what it Fioretti looks like to patch the

00:10:02,250 --> 00:10:08,640
stem cell for us ends to give you an

00:10:05,940 --> 00:10:13,080
idea of kind of what it really looks

00:10:08,640 --> 00:10:16,680
like we'll get this is the the bunch of

00:10:13,080 --> 00:10:19,170
security notices RSS feed this was

00:10:16,680 --> 00:10:21,870
basically pre Davos what we were doing a

00:10:19,170 --> 00:10:24,560
few months ago you get the feed

00:10:21,870 --> 00:10:28,560
we did have some automation built by the

00:10:24,560 --> 00:10:31,740
build PACs team that would feed that RSS

00:10:28,560 --> 00:10:34,380
into github issues we actually have a

00:10:31,740 --> 00:10:34,610
private pivotal repo and a private open

00:10:34,380 --> 00:10:37,100
store

00:10:34,610 --> 00:10:40,760
repo that both would get the

00:10:37,100 --> 00:10:44,120
notifications from canonical I would

00:10:40,760 --> 00:10:46,220
look at them I would look at the a

00:10:44,120 --> 00:10:50,480
buncha website to figure out what the

00:10:46,220 --> 00:10:52,300
severity of the of the USN is there's a

00:10:50,480 --> 00:10:56,029
little bit of calculation in that

00:10:52,300 --> 00:10:57,980
because aus n contains many sea bees

00:10:56,029 --> 00:11:00,140
you have to look through all of the sea

00:10:57,980 --> 00:11:02,600
V's and whatever one has the highest

00:11:00,140 --> 00:11:05,480
severity we just assigned the USN that's

00:11:02,600 --> 00:11:08,990
severity so I was I was in charge of

00:11:05,480 --> 00:11:12,529
doing that I would go on slack

00:11:08,990 --> 00:11:16,220
I would poke all of the teams that

00:11:12,529 --> 00:11:18,140
needed to update either you know hey

00:11:16,220 --> 00:11:19,730
Demetri we have a high us n can you

00:11:18,140 --> 00:11:22,130
please start patching he would usually

00:11:19,730 --> 00:11:24,500
say I already knew about it it's already

00:11:22,130 --> 00:11:27,649
started but you got to do it just in

00:11:24,500 --> 00:11:29,810
case and then try to coordinate over you

00:11:27,649 --> 00:11:34,040
know dozens of teams who have to patch

00:11:29,810 --> 00:11:36,050
the commercial distribution after they

00:11:34,040 --> 00:11:37,610
hopefully received the notification and

00:11:36,050 --> 00:11:41,329
maybe if they're in London they received

00:11:37,610 --> 00:11:44,000
it the next day that happens a lot then

00:11:41,329 --> 00:11:46,070
they would go to github take a look at

00:11:44,000 --> 00:11:49,190
that issue make sure it really affected

00:11:46,070 --> 00:11:50,990
them go into their tracker make some

00:11:49,190 --> 00:11:54,829
stories that I didn't have a lot of

00:11:50,990 --> 00:11:56,449
visibility into and hopefully get done

00:11:54,829 --> 00:11:59,570
with the patching work and eventually

00:11:56,449 --> 00:12:02,779
report back and github what versions of

00:11:59,570 --> 00:12:05,839
the product actually fixed while this is

00:12:02,779 --> 00:12:07,339
going on I would be waiting for the new

00:12:05,839 --> 00:12:10,370
stencil and the root of s to come out

00:12:07,339 --> 00:12:12,620
I'd be waiting for teams to finish their

00:12:10,370 --> 00:12:15,980
stories and I also would spend a lot of

00:12:12,620 --> 00:12:17,990
time basically hand rolling every

00:12:15,980 --> 00:12:22,519
security notice that has to go up on

00:12:17,990 --> 00:12:25,670
Cloud Foundry org or pivotal do it's a

00:12:22,519 --> 00:12:27,110
lot of work in Google Docs contacting

00:12:25,670 --> 00:12:30,800
marketing teams putting stuff in

00:12:27,110 --> 00:12:33,529
WordPress etc etc so that also takes a

00:12:30,800 --> 00:12:35,329
decent amount of time and then you know

00:12:33,529 --> 00:12:39,500
putting the notices up on Cloud Foundry

00:12:35,329 --> 00:12:41,180
at work for everybody to consume so you

00:12:39,500 --> 00:12:45,860
know after I had been working on this

00:12:41,180 --> 00:12:47,209
for about six months or so I started to

00:12:45,860 --> 00:12:49,970
think that maybe there

00:12:47,209 --> 00:12:51,889
could be a better way that didn't

00:12:49,970 --> 00:12:55,069
require all this manual work and all of

00:12:51,889 --> 00:13:00,709
this kind of cross team inter team

00:12:55,069 --> 00:13:02,869
communication so kind of we imagined

00:13:00,709 --> 00:13:05,170
what would this look like if we had some

00:13:02,869 --> 00:13:09,069
system that was doing all this for us

00:13:05,170 --> 00:13:11,990
you know potentially even all the way to

00:13:09,069 --> 00:13:14,929
putting things up out for the public to

00:13:11,990 --> 00:13:16,429
see so that's kind of where Davos came

00:13:14,929 --> 00:13:20,449
from and that's what we're gonna be

00:13:16,429 --> 00:13:23,149
talking about and Steven is gonna go

00:13:20,449 --> 00:13:25,249
through what the workflow looks like for

00:13:23,149 --> 00:13:28,759
actually patching the route FS and how

00:13:25,249 --> 00:13:30,379
they do that so I'm gonna rewind a

00:13:28,759 --> 00:13:33,439
little bit and talk about this process

00:13:30,379 --> 00:13:35,059
from the beginning so well you know Mali

00:13:33,439 --> 00:13:36,199
is hard at work with the organizational

00:13:35,059 --> 00:13:37,939
response to these kinds of

00:13:36,199 --> 00:13:40,129
vulnerabilities the engineering teams

00:13:37,939 --> 00:13:42,129
are hard at work or hopefully not

00:13:40,129 --> 00:13:44,300
because it's automated

00:13:42,129 --> 00:13:46,339
you know responding with patched

00:13:44,300 --> 00:13:48,050
versions of the route FS and stem cells

00:13:46,339 --> 00:13:51,050
so I'm going to talk about the route FS

00:13:48,050 --> 00:13:55,160
first that's the sort of underlying you

00:13:51,050 --> 00:13:57,019
know userland files and things that you

00:13:55,160 --> 00:13:59,509
can think of it like a base image the

00:13:57,019 --> 00:14:02,779
Cloud Foundry uses for application

00:13:59,509 --> 00:14:05,149
containers so the rue des fast pass

00:14:02,779 --> 00:14:06,829
process packed process is basically all

00:14:05,149 --> 00:14:09,230
automated there's a pipeline that looks

00:14:06,829 --> 00:14:11,839
at the feed of us ends and when it finds

00:14:09,230 --> 00:14:14,360
a new one it starts building a new route

00:14:11,839 --> 00:14:16,069
FS for Cloud Foundry it goes through a

00:14:14,360 --> 00:14:18,799
bunch of steps you know validating

00:14:16,069 --> 00:14:20,990
dependencies and you know repackaging

00:14:18,799 --> 00:14:22,399
things so we have a route FS for even

00:14:20,990 --> 00:14:24,619
works on docker or the works on Cloud

00:14:22,399 --> 00:14:27,379
Foundry all these different places and

00:14:24,619 --> 00:14:29,059
it takes about two hours before from

00:14:27,379 --> 00:14:30,350
when a USN hits to when our pipeline is

00:14:29,059 --> 00:14:31,819
finished with it and a Cloud Foundry

00:14:30,350 --> 00:14:33,559
operator can deploy it into cloud

00:14:31,819 --> 00:14:35,480
foundry it's very quick it's only one

00:14:33,559 --> 00:14:39,980
manual step where I just say okay looks

00:14:35,480 --> 00:14:41,379
good goes through it's awesome it's

00:14:39,980 --> 00:14:43,999
really important that this is fast

00:14:41,379 --> 00:14:47,809
because a big advantage of Cloud Foundry

00:14:43,999 --> 00:14:50,540
is that operators can take a new route

00:14:47,809 --> 00:14:53,540
FS and upgrade it on their platform and

00:14:50,540 --> 00:14:55,279
every single app was the operating

00:14:53,540 --> 00:14:56,000
system level dependencies for all those

00:14:55,279 --> 00:14:58,820
apps

00:14:56,000 --> 00:15:00,980
are suddenly up to date and it happens

00:14:58,820 --> 00:15:02,240
live and in production and very quickly

00:15:00,980 --> 00:15:04,070
and it's you know sort of a major

00:15:02,240 --> 00:15:05,990
advantage of Cloud Foundry over things

00:15:04,070 --> 00:15:07,100
that use mutable container layers where

00:15:05,990 --> 00:15:08,960
you have to rebuild each one from

00:15:07,100 --> 00:15:11,180
scratch to update the operating system

00:15:08,960 --> 00:15:15,170
level dependencies so the fact that

00:15:11,180 --> 00:15:18,020
that's fast is really helpful now not

00:15:15,170 --> 00:15:20,240
every one of these USNS is really

00:15:18,020 --> 00:15:23,030
relevant this this particular

00:15:20,240 --> 00:15:24,680
vulnerability and the eject which is you

00:15:23,030 --> 00:15:26,840
know for CD drives that application

00:15:24,680 --> 00:15:28,310
containers don't really have maybe it

00:15:26,840 --> 00:15:30,500
could cause someone some problems but

00:15:28,310 --> 00:15:32,510
for the most part it's not terribly

00:15:30,500 --> 00:15:34,130
important to patch that in a calamity

00:15:32,510 --> 00:15:38,390
application container in less than you

00:15:34,130 --> 00:15:41,270
know 48 hours so you know the real the

00:15:38,390 --> 00:15:42,980
real challenge here is how do we get

00:15:41,270 --> 00:15:45,410
people to pick up the new route FS and

00:15:42,980 --> 00:15:46,730
teams and and people that depend on it

00:15:45,410 --> 00:15:48,050
you know when it comes out and how do

00:15:46,730 --> 00:15:50,030
they know that yes they really need to

00:15:48,050 --> 00:15:52,250
update it immediately at least that's

00:15:50,030 --> 00:15:53,660
the remaining challenge and I'll talk

00:15:52,250 --> 00:15:55,730
about the stem cells a little bit too I

00:15:53,660 --> 00:15:59,720
it's a different team from what I deal

00:15:55,730 --> 00:16:02,089
with but just quickly the stem cells

00:15:59,720 --> 00:16:04,580
stem cell patch process is similar they

00:16:02,089 --> 00:16:07,280
use you know a pipeline that automates

00:16:04,580 --> 00:16:09,860
parts of it but the I know high

00:16:07,280 --> 00:16:11,600
colonelcy bees are really common and

00:16:09,860 --> 00:16:13,940
those don't affect the route FS because

00:16:11,600 --> 00:16:17,570
there's no kernel to deal with but they

00:16:13,940 --> 00:16:20,270
affect the stem cells and they result in

00:16:17,570 --> 00:16:21,220
a lot of stem cell rebuilds that have to

00:16:20,270 --> 00:16:23,270
happen very quickly

00:16:21,220 --> 00:16:25,310
you know stem cells need to work on a

00:16:23,270 --> 00:16:27,290
whole bunch of different platforms and

00:16:25,310 --> 00:16:29,839
you have to build them on VMs which is

00:16:27,290 --> 00:16:34,310
slower so you have to build a lot of

00:16:29,839 --> 00:16:35,390
things and on slower systems and you

00:16:34,310 --> 00:16:36,560
know a bunch of things the box team

00:16:35,390 --> 00:16:40,430
knows about that I don't deal with too

00:16:36,560 --> 00:16:42,530
much but I'm sure it's very exciting so

00:16:40,430 --> 00:16:44,000
how do cloud foundry vendors teams and

00:16:42,530 --> 00:16:46,040
operators know when to patch the root of

00:16:44,000 --> 00:16:48,290
s and stem cells is the real question

00:16:46,040 --> 00:16:50,390
for us ends and more generally how do

00:16:48,290 --> 00:16:51,740
they know when to patch anything but if

00:16:50,390 --> 00:16:53,630
there's a security vulnerability that

00:16:51,740 --> 00:16:57,860
affected it and you know it could affect

00:16:53,630 --> 00:17:01,130
their users so I'm gonna talk so next

00:16:57,860 --> 00:17:03,380
I'm going to talk about Davos the system

00:17:01,130 --> 00:17:05,420
Molly brought up that's responsible for

00:17:03,380 --> 00:17:10,220
sort of solving that you could almost

00:17:05,420 --> 00:17:12,800
say it's a last mile problem so there's

00:17:10,220 --> 00:17:15,020
a high level overview Davos takes

00:17:12,800 --> 00:17:16,790
sources of data like us ends and new

00:17:15,020 --> 00:17:21,320
versions of like really security

00:17:16,790 --> 00:17:23,240
critical dependencies and also notices

00:17:21,320 --> 00:17:24,530
that we create where we realize oh you

00:17:23,240 --> 00:17:27,340
know this Cloud Foundry thing is

00:17:24,530 --> 00:17:30,560
uniquely vulnerable for some reason or

00:17:27,340 --> 00:17:32,860
it collates all that data into this sort

00:17:30,560 --> 00:17:36,320
of source of truth this is black box

00:17:32,860 --> 00:17:39,310
white box key I guess and it delivers

00:17:36,320 --> 00:17:45,200
those notices to Cloud Foundry team

00:17:39,310 --> 00:17:48,250
pivotal tracker backlogs then it kicks

00:17:45,200 --> 00:17:50,930
up data for how they responded to those

00:17:48,250 --> 00:17:54,560
notices from the stories after they

00:17:50,930 --> 00:17:56,510
deliver them keeps those stored in the

00:17:54,560 --> 00:17:58,070
source of truth along with the notices

00:17:56,510 --> 00:18:00,080
and also keeps track of the

00:17:58,070 --> 00:18:01,670
relationships between products so that

00:18:00,080 --> 00:18:04,940
it can create more notice as if hey

00:18:01,670 --> 00:18:06,710
someone depended on this and it was

00:18:04,940 --> 00:18:08,330
fixed in another Cloud Foundry product

00:18:06,710 --> 00:18:10,400
and now they need to pick up that Cloud

00:18:08,330 --> 00:18:12,110
Foundry product afterwards it's sort of

00:18:10,400 --> 00:18:13,790
smart about making sure that people get

00:18:12,110 --> 00:18:17,990
just the information they need when it's

00:18:13,790 --> 00:18:21,410
actionable so I'm going to turn over to

00:18:17,990 --> 00:18:22,970
Molly after that after this for some

00:18:21,410 --> 00:18:25,120
more information about what's coming

00:18:22,970 --> 00:18:25,120
next

00:18:26,830 --> 00:18:37,070
so we've done a lot of work on Davos and

00:18:34,340 --> 00:18:40,340
it's mostly been in a pivotal context

00:18:37,070 --> 00:18:42,740
but it also does affect open source

00:18:40,340 --> 00:18:47,420
teams so open source teams are already

00:18:42,740 --> 00:18:49,220
receiving notifications for especially

00:18:47,420 --> 00:18:52,100
what Steven mentioned with new versions

00:18:49,220 --> 00:18:54,590
of golang engine X a couple other

00:18:52,100 --> 00:18:56,630
libraries that people depend on and

00:18:54,590 --> 00:18:59,660
they're able to communicate out more

00:18:56,630 --> 00:19:05,390
quickly when their team has fixed

00:18:59,660 --> 00:19:07,610
something so what we want to do next is

00:19:05,390 --> 00:19:09,830
make Davos a little bit more

00:19:07,610 --> 00:19:11,270
generalizable to the full community so

00:19:09,830 --> 00:19:14,360
the full ecosystem can really

00:19:11,270 --> 00:19:17,840
benefit from it we've been talking about

00:19:14,360 --> 00:19:21,470
potentially bringing it for incubation

00:19:17,840 --> 00:19:23,470
in the foundation which we need to we

00:19:21,470 --> 00:19:26,900
need to do more follow up on basically

00:19:23,470 --> 00:19:29,660
we also want to make it possible for

00:19:26,900 --> 00:19:32,920
other foundation members to be able to

00:19:29,660 --> 00:19:35,990
deploy it I can imagine a world where

00:19:32,920 --> 00:19:38,660
other members of the foundation deploy

00:19:35,990 --> 00:19:42,020
Davos they're able to run a script to

00:19:38,660 --> 00:19:44,570
basically import all old information

00:19:42,020 --> 00:19:47,570
about Ubuntu security notices and have

00:19:44,570 --> 00:19:50,090
access to all of the open source data

00:19:47,570 --> 00:19:52,370
that's currently in Davos that we'd love

00:19:50,090 --> 00:19:57,260
to share with our partners in the

00:19:52,370 --> 00:20:01,790
foundation other suggestions and

00:19:57,260 --> 00:20:04,750
feedback are definitely welcome you can

00:20:01,790 --> 00:20:06,890
reach me at em crowd are pivotal do

00:20:04,750 --> 00:20:11,810
actually em crowd there at Cloud Foundry

00:20:06,890 --> 00:20:16,760
org as well or same handle in the open

00:20:11,810 --> 00:20:19,340
source slack and that's about it

00:20:16,760 --> 00:20:21,850
we'd love to take questions and thank

00:20:19,340 --> 00:20:21,850
you all for coming

00:20:21,980 --> 00:20:28,029
[Applause]

00:20:38,440 --> 00:20:42,560
so it sounds like the question is what

00:20:40,850 --> 00:20:51,100
about third-party dependencies like

00:20:42,560 --> 00:20:53,360
other third-party dependencies so mm-hmm

00:20:51,100 --> 00:20:55,580
yeah so one of the other things that

00:20:53,360 --> 00:20:58,610
we're doing that we didn't really get to

00:20:55,580 --> 00:21:01,960
too much in the talk is that pivotal is

00:20:58,610 --> 00:21:04,220
actually scanning a lot of open source

00:21:01,960 --> 00:21:07,790
basically open source Bosch releases

00:21:04,220 --> 00:21:10,460
using Blackduck which is a CVE and

00:21:07,790 --> 00:21:12,980
dependency scanning tool and those are

00:21:10,460 --> 00:21:15,770
actually already also feeding into davos

00:21:12,980 --> 00:21:17,890
via their api so a lot of the open

00:21:15,770 --> 00:21:20,930
source teams are already receiving

00:21:17,890 --> 00:21:23,210
basically black duck notification saying

00:21:20,930 --> 00:21:25,610
like you have this old version of ruby

00:21:23,210 --> 00:21:26,600
it has the CBE in it this is the

00:21:25,610 --> 00:21:28,910
severity

00:21:26,600 --> 00:21:31,820
please patch and then it will take

00:21:28,910 --> 00:21:34,910
information back about whether or not

00:21:31,820 --> 00:21:37,310
they like we're actually affected by it

00:21:34,910 --> 00:21:39,980
because black duck can have a decent

00:21:37,310 --> 00:21:42,590
number of false positives because of its

00:21:39,980 --> 00:21:44,630
kind of fuzzy fuzzy logic the other

00:21:42,590 --> 00:21:47,750
thing that we've enabled is a workflow

00:21:44,630 --> 00:21:50,360
to allow teams to say that they are not

00:21:47,750 --> 00:21:50,810
planning on patching something in

00:21:50,360 --> 00:21:53,840
particular

00:21:50,810 --> 00:21:56,240
either because like the version of the

00:21:53,840 --> 00:22:00,500
Bosh release we're scanning is going end

00:21:56,240 --> 00:22:03,380
of life or the CBE is in something that

00:22:00,500 --> 00:22:07,610
isn't really exposed in customer systems

00:22:03,380 --> 00:22:09,020
and like it's only for testing or just

00:22:07,610 --> 00:22:12,460
something that for some reason they

00:22:09,020 --> 00:22:16,190
can't patch so we're we're both hitting

00:22:12,460 --> 00:22:18,410
the front of the process where you know

00:22:16,190 --> 00:22:20,210
a bun - and people are releasing new

00:22:18,410 --> 00:22:21,650
versions and we're also hitting the

00:22:20,210 --> 00:22:23,050
other end of the process we're like

00:22:21,650 --> 00:22:29,540
what's in the code that we've already

00:22:23,050 --> 00:22:31,640
shipped and also to add to that we also

00:22:29,540 --> 00:22:33,740
have functionality in Davos that reports

00:22:31,640 --> 00:22:35,180
on new versions of really security

00:22:33,740 --> 00:22:36,500
critical dependencies so if they're

00:22:35,180 --> 00:22:38,600
things that have owner abilities in them

00:22:36,500 --> 00:22:39,710
often then will often just tell teams

00:22:38,600 --> 00:22:40,640
and there's a new version at all because

00:22:39,710 --> 00:22:42,710
they should always keep them up-to-date

00:22:40,640 --> 00:22:44,600
so that helps with that type of you know

00:22:42,710 --> 00:22:46,010
open source library that it's security

00:22:44,600 --> 00:22:48,460
critical kind of those kind of

00:22:46,010 --> 00:22:48,460
situations

00:22:50,560 --> 00:22:58,720
any other questions concerns complaints

00:23:00,190 --> 00:23:09,390
okay thank you

00:23:04,470 --> 00:23:09,390

YouTube URL: https://www.youtube.com/watch?v=o9WAxa4abfI


