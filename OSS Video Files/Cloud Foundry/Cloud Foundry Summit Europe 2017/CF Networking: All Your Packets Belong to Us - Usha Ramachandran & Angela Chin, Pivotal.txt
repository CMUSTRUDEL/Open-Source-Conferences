Title: CF Networking: All Your Packets Belong to Us - Usha Ramachandran & Angela Chin, Pivotal
Publication date: 2017-10-18
Playlist: Cloud Foundry Summit Europe 2017
Description: 
	CF Networking: All Your Packets Belong to Us - Usha Ramachandran & Angela Chin, Pivotal

Is your network admin losing sleep over whitelisting your entire deployment? Worried about public routes to your backend apps? Can’t tell which application is hammering your production database? 

Worry no more! Cloud Foundry has a brand new container networking stack, that enables application level policies and direct container-to-container communication. Join us for an overview of the new feature set and the use cases it solves. See it how it works through a demonstration and learn about where we plan to go next.

About Angela Chin
Angela Chin, software engineer at Pivotal, currently works on the CF-Container-Networking team. Previously, Angela was a member of the CF-Infrastructure team, which is in charge of BOSH-Bootloader.

About Usha Ramachandran
Usha Ramachandran is a Product Manager at Pivotal and the the Product Lead for CF Networking. She has over 15 years of networking experience, having worked at Cisco, Alcatel and Ericsson. She has worn several hats throughout her career including software engineer, technical marketing engineer and product manager. A seasoned conference speaker, she has spoken at Cisco Live! and VMworld over multiple years and at CF Summit in 2016.
Captions: 
	00:00:00,000 --> 00:00:05,690
hi everyone it's 2:45 so we'll get

00:00:04,230 --> 00:00:09,510
started

00:00:05,690 --> 00:00:11,160
you're here to hear updates from the CS

00:00:09,510 --> 00:00:13,320
networking team it's a project update

00:00:11,160 --> 00:00:15,089
we'll be talking over the next half an

00:00:13,320 --> 00:00:17,039
hour about what we've been doing and

00:00:15,089 --> 00:00:19,380
what are some of the new changes that

00:00:17,039 --> 00:00:23,130
you can expect from us going forward I'm

00:00:19,380 --> 00:00:25,529
Usha Ramachandran I am the staff product

00:00:23,130 --> 00:00:28,619
manager at pivotal and I'm the PM

00:00:25,529 --> 00:00:31,320
responsible for SES networking I'm

00:00:28,619 --> 00:00:32,669
joined here by Angela she's an engineer

00:00:31,320 --> 00:00:36,000
and on our team and the current anchor

00:00:32,669 --> 00:00:37,950
for the project so none of this would

00:00:36,000 --> 00:00:40,320
have been possible without our team

00:00:37,950 --> 00:00:42,480
members this is just our current team

00:00:40,320 --> 00:00:44,460
but we've had many people who've

00:00:42,480 --> 00:00:47,219
contributed to this project some of whom

00:00:44,460 --> 00:00:50,520
are here today certainly exciting to

00:00:47,219 --> 00:00:52,440
share what all we've done so far what we

00:00:50,520 --> 00:00:55,230
have on the agenda today is basically

00:00:52,440 --> 00:00:57,570
just do a very quick recap none of this

00:00:55,230 --> 00:00:59,850
should be totally new to anyone around

00:00:57,570 --> 00:01:01,109
the networking challenges that we have

00:00:59,850 --> 00:01:04,199
today with cloud foundry

00:01:01,109 --> 00:01:06,780
and then how we've solved those with CF

00:01:04,199 --> 00:01:08,820
networking and then we'll do a deep dive

00:01:06,780 --> 00:01:10,979
into how things actually work under the

00:01:08,820 --> 00:01:13,500
hood and then a demo and then we'll talk

00:01:10,979 --> 00:01:16,070
about you know upcoming features and and

00:01:13,500 --> 00:01:18,509
what it looks like in the in the future

00:01:16,070 --> 00:01:21,450
if we don't if we don't have time to get

00:01:18,509 --> 00:01:24,210
to questions in the session please feel

00:01:21,450 --> 00:01:27,600
free to stop by after the session or we

00:01:24,210 --> 00:01:30,630
have office hours tomorrow at 11:55 as

00:01:27,600 --> 00:01:33,530
well so let's start with the networking

00:01:30,630 --> 00:01:36,420
challenges that we set out to solve for

00:01:33,530 --> 00:01:38,640
so if you look at the legacy Cloud

00:01:36,420 --> 00:01:41,750
Foundry networking model it basically

00:01:38,640 --> 00:01:44,310
uses a host host mode networking where

00:01:41,750 --> 00:01:47,399
every single container basically just

00:01:44,310 --> 00:01:49,649
uses your cells IP address and traffic

00:01:47,399 --> 00:01:51,600
going out from an application is

00:01:49,649 --> 00:01:54,390
basically knotted out so what this means

00:01:51,600 --> 00:01:56,159
is that your traffic really you lose all

00:01:54,390 --> 00:01:58,799
your app identity as you go out in

00:01:56,159 --> 00:02:01,890
addition there's no direct communication

00:01:58,799 --> 00:02:04,020
between any containers it always has to

00:02:01,890 --> 00:02:06,060
go through the load balancer and the

00:02:04,020 --> 00:02:08,310
router so this means that if you have

00:02:06,060 --> 00:02:10,500
private micro-services you still need a

00:02:08,310 --> 00:02:12,319
public route and so this may be a

00:02:10,500 --> 00:02:15,019
security hazard for

00:02:12,319 --> 00:02:18,889
environments in addition you can't

00:02:15,019 --> 00:02:20,540
really apply policy at a P which is your

00:02:18,889 --> 00:02:21,920
destination because you you don't

00:02:20,540 --> 00:02:24,319
actually know where your traffic came

00:02:21,920 --> 00:02:26,540
from it's just it just appears as it it

00:02:24,319 --> 00:02:28,489
came from the router so those were like

00:02:26,540 --> 00:02:30,439
some of the challenges that we saw and

00:02:28,489 --> 00:02:33,200
that's why we started working on CF

00:02:30,439 --> 00:02:34,939
networking our idealized stage was

00:02:33,200 --> 00:02:37,730
basically to have direct connectivity

00:02:34,939 --> 00:02:39,859
between containers where you didn't have

00:02:37,730 --> 00:02:43,010
to go out through the core router and

00:02:39,859 --> 00:02:45,349
come back in making the traffic part

00:02:43,010 --> 00:02:48,230
more more effective and also have

00:02:45,349 --> 00:02:51,019
policies that are basically app to app

00:02:48,230 --> 00:02:53,569
policies so not have application

00:02:51,019 --> 00:02:55,609
security group like policies where you

00:02:53,569 --> 00:02:58,189
have like an entire or göran entire

00:02:55,609 --> 00:03:01,040
space basically being able to access

00:02:58,189 --> 00:03:03,829
things based on IP so that's kind of the

00:03:01,040 --> 00:03:05,689
vision of where we want it to be you

00:03:03,829 --> 00:03:09,349
know let's have apps talking directly to

00:03:05,689 --> 00:03:13,400
each other in a policy driven way so

00:03:09,349 --> 00:03:15,949
that was maybe a year or so maybe a

00:03:13,400 --> 00:03:18,349
little more than that since since we

00:03:15,949 --> 00:03:21,109
started working on this so today we

00:03:18,349 --> 00:03:24,290
basically have CS networking wander oh

00:03:21,109 --> 00:03:26,299
it's been out since about June and there

00:03:24,290 --> 00:03:29,120
were a few things that we we delivered

00:03:26,299 --> 00:03:32,449
on which is firstly every container now

00:03:29,120 --> 00:03:35,900
has an IP address so there's direct c2c

00:03:32,449 --> 00:03:38,209
connectivity and we used the container

00:03:35,900 --> 00:03:40,189
networking interface which is a standard

00:03:38,209 --> 00:03:43,939
and I'll talk more about it in the next

00:03:40,189 --> 00:03:46,099
slide to implement this mostly so that

00:03:43,939 --> 00:03:48,319
we could allow third parties to come in

00:03:46,099 --> 00:03:52,519
and and plug in like an a more

00:03:48,319 --> 00:03:54,889
sophisticated Sdn vendor for example for

00:03:52,519 --> 00:03:57,259
our batteries included solution we

00:03:54,889 --> 00:04:00,169
developed our own CNI plugin called silk

00:03:57,259 --> 00:04:02,959
we started off using flannel silk is

00:04:00,169 --> 00:04:05,509
very similar to flannel but it uses my

00:04:02,959 --> 00:04:09,199
sequel or a sequel based database as its

00:04:05,509 --> 00:04:10,849
back back in the other core feature that

00:04:09,199 --> 00:04:13,819
we wanted to deliver us to move away

00:04:10,849 --> 00:04:16,729
from like IP based policy to have app to

00:04:13,819 --> 00:04:19,519
app policy so as an app developer or as

00:04:16,729 --> 00:04:21,049
a network admin I can go in and say hey

00:04:19,519 --> 00:04:25,219
I want this app to talk to this other

00:04:21,049 --> 00:04:25,790
app and it should apply dynamically as

00:04:25,219 --> 00:04:29,180
well

00:04:25,790 --> 00:04:31,330
as be completely driven by application

00:04:29,180 --> 00:04:35,150
intent and not be like ip-based

00:04:31,330 --> 00:04:38,660
so you now have the ability to configure

00:04:35,150 --> 00:04:41,660
either through a CLI or an API a policy

00:04:38,660 --> 00:04:43,610
and it's completely self-service so you

00:04:41,660 --> 00:04:45,980
can either have a network admin who does

00:04:43,610 --> 00:04:48,110
this or you can grant safe space

00:04:45,980 --> 00:04:50,960
developers the ability to configure

00:04:48,110 --> 00:04:53,060
their own policies and we'd love to hear

00:04:50,960 --> 00:04:55,730
if there's one model that works better

00:04:53,060 --> 00:04:58,070
for you or the other there are some

00:04:55,730 --> 00:04:59,870
things that we didn't change but but

00:04:58,070 --> 00:05:01,430
these are things that we would look

00:04:59,870 --> 00:05:03,530
forward to changing in the future which

00:05:01,430 --> 00:05:06,890
is how can we make application security

00:05:03,530 --> 00:05:10,010
groups better we also didn't change the

00:05:06,890 --> 00:05:12,530
traffic path through the gore outer or

00:05:10,010 --> 00:05:15,740
the traffic path going out so both of

00:05:12,530 --> 00:05:17,510
those traffic paths still use NAT and

00:05:15,740 --> 00:05:19,460
those are the some those are things also

00:05:17,510 --> 00:05:21,710
that we are looking at to see how we

00:05:19,460 --> 00:05:24,920
could improve those traffic paths as

00:05:21,710 --> 00:05:28,460
well so I'm going to spend just a minute

00:05:24,920 --> 00:05:30,920
talking about CNI and why we adopted CNI

00:05:28,460 --> 00:05:35,000
so CNI is is an industry standard that

00:05:30,920 --> 00:05:37,040
lets any container runtime delegate it's

00:05:35,000 --> 00:05:39,860
networking responsibility to a CNI

00:05:37,040 --> 00:05:43,760
plugin so it defines us a standardized

00:05:39,860 --> 00:05:46,850
interface and so by adopting CNI you now

00:05:43,760 --> 00:05:50,000
have the ability to run any networking

00:05:46,850 --> 00:05:52,010
stack that you want on cloud foundry so

00:05:50,000 --> 00:05:54,260
you don't you're no longer bound by okra

00:05:52,010 --> 00:05:57,680
foundry only offers this type of

00:05:54,260 --> 00:06:03,470
networking so so that's basically why we

00:05:57,680 --> 00:06:06,620
chose CNI for our batteries included CNI

00:06:03,470 --> 00:06:10,220
plug-in we went with a very simple model

00:06:06,620 --> 00:06:13,100
we use a VX land-based overlay network

00:06:10,220 --> 00:06:16,100
that gives every single container an IP

00:06:13,100 --> 00:06:18,410
address on it and the way it works is

00:06:16,100 --> 00:06:21,620
that there's a whole big range it

00:06:18,410 --> 00:06:25,600
defaults to a slash 16 every cell gets a

00:06:21,620 --> 00:06:29,660
slash 24 so that's about 250 containers

00:06:25,600 --> 00:06:34,700
250 cells you can tweak that around if

00:06:29,660 --> 00:06:37,160
you want more or less scale the the idea

00:06:34,700 --> 00:06:38,720
here is that all your container to

00:06:37,160 --> 00:06:40,970
container communication is on

00:06:38,720 --> 00:06:42,830
overlay and all your container to

00:06:40,970 --> 00:06:45,080
external communication is on the

00:06:42,830 --> 00:06:47,720
underlay so there's there's actually no

00:06:45,080 --> 00:06:54,980
like mixing of traffic between these two

00:06:47,720 --> 00:06:57,110
layers in terms of policy we made a

00:06:54,980 --> 00:07:01,160
conscious choice to actually define

00:06:57,110 --> 00:07:03,530
policy at the a player so as a user you

00:07:01,160 --> 00:07:05,870
would go in and say I want app one to

00:07:03,530 --> 00:07:08,120
talk to app to and once you configure

00:07:05,870 --> 00:07:09,530
that that policy is applied and they're

00:07:08,120 --> 00:07:11,930
able to talk to each other on the

00:07:09,530 --> 00:07:14,890
overlay so Angela will be doing a demo

00:07:11,930 --> 00:07:17,330
showing you how this actually works as

00:07:14,890 --> 00:07:19,340
your apps like move around as they're

00:07:17,330 --> 00:07:21,800
like brought up brought down the policy

00:07:19,340 --> 00:07:23,480
is applied automatically so this is the

00:07:21,800 --> 00:07:26,120
advantage of not having like an IP based

00:07:23,480 --> 00:07:28,820
policy because your IP addresses are

00:07:26,120 --> 00:07:32,780
going to be ephemeral so that's the

00:07:28,820 --> 00:07:36,169
policy aspect of what we've built that's

00:07:32,780 --> 00:07:38,300
the policy config we recently got into

00:07:36,169 --> 00:07:44,000
this means CF CLI so that's really

00:07:38,300 --> 00:07:46,880
exciting to us we before in September we

00:07:44,000 --> 00:07:49,580
you had to download an CF CLI plugin and

00:07:46,880 --> 00:07:51,950
then use the networking commands now you

00:07:49,580 --> 00:07:53,570
can just you know go to the CFC Li and

00:07:51,950 --> 00:07:55,850
these are the commands they're very

00:07:53,570 --> 00:08:00,169
simple I just want to call out a couple

00:07:55,850 --> 00:08:03,710
of things one is that you can use TCP as

00:08:00,169 --> 00:08:07,130
well as UDP so if you have UDP use cases

00:08:03,710 --> 00:08:09,710
you can now you know enable those with

00:08:07,130 --> 00:08:12,350
container networking the other important

00:08:09,710 --> 00:08:14,450
thing is you can use any port that you

00:08:12,350 --> 00:08:17,000
want you can use multiple ports as well

00:08:14,450 --> 00:08:19,880
and the policy will enable you to

00:08:17,000 --> 00:08:23,060
configure multiple ports within a single

00:08:19,880 --> 00:08:24,560
policy so it just opens up the doors to

00:08:23,060 --> 00:08:26,419
having many different types of

00:08:24,560 --> 00:08:29,780
applications that can run on Cloud

00:08:26,419 --> 00:08:32,750
Foundry so let's talk about some use

00:08:29,780 --> 00:08:35,240
cases like why would you use this there

00:08:32,750 --> 00:08:37,909
are two key use cases we see the first

00:08:35,240 --> 00:08:40,219
one is just building more secure micro

00:08:37,909 --> 00:08:41,990
services so if you have some micro

00:08:40,219 --> 00:08:45,050
services that don't you know you don't

00:08:41,990 --> 00:08:46,700
want to expose to a public route you

00:08:45,050 --> 00:08:49,100
want to enable direct east/west

00:08:46,700 --> 00:08:52,600
communication for maybe improving

00:08:49,100 --> 00:08:52,600
latency improving performance

00:08:52,610 --> 00:08:57,980
and also the ability to configure

00:08:54,880 --> 00:09:00,110
fine-grained app policies gives you a

00:08:57,980 --> 00:09:02,240
lot more control over which Microsoft

00:09:00,110 --> 00:09:04,610
micro Service is talking to which other

00:09:02,240 --> 00:09:06,740
micro service so it's it's not like

00:09:04,610 --> 00:09:09,260
abroad like he allow anything to talk to

00:09:06,740 --> 00:09:11,240
anything but it's really I want my front

00:09:09,260 --> 00:09:12,640
end to talk to my building and nothing

00:09:11,240 --> 00:09:16,970
else can talk to it

00:09:12,640 --> 00:09:20,660
the second big use case we see is for

00:09:16,970 --> 00:09:22,940
apps like akka or like hazel caste or

00:09:20,660 --> 00:09:25,190
some other applications that need more

00:09:22,940 --> 00:09:27,649
of a clustering mode where you need to

00:09:25,190 --> 00:09:30,800
know every other instance that's you

00:09:27,649 --> 00:09:33,130
know part of your app so that's another

00:09:30,800 --> 00:09:36,500
use case that you can leverage with

00:09:33,130 --> 00:09:38,750
today's solution of container networking

00:09:36,500 --> 00:09:40,850
where you have to bring your own service

00:09:38,750 --> 00:09:42,860
discovery these use cases are a little

00:09:40,850 --> 00:09:45,079
bit more cumbersome but we are working

00:09:42,860 --> 00:09:48,140
on new enhancements that should make

00:09:45,079 --> 00:09:50,420
that pretty easy as well and again here

00:09:48,140 --> 00:09:54,470
the ability to communicate over TCP or

00:09:50,420 --> 00:09:56,390
UDP really helps you out so I'm going to

00:09:54,470 --> 00:09:59,930
shift gears a little this is a project

00:09:56,390 --> 00:10:01,370
updated it's not specific to the the CNI

00:09:59,930 --> 00:10:03,890
implementation or the new container

00:10:01,370 --> 00:10:06,380
networking stack but we did make a lot

00:10:03,890 --> 00:10:09,199
of enhancements in how traffic is logged

00:10:06,380 --> 00:10:11,060
on Cloud Foundry so one thing we kept

00:10:09,199 --> 00:10:14,019
hearing was that I have no idea what

00:10:11,060 --> 00:10:18,649
happens to my denied packets so we added

00:10:14,019 --> 00:10:21,410
the ability to log denies we basically

00:10:18,649 --> 00:10:24,769
allow you to enable global logging and

00:10:21,410 --> 00:10:27,380
so you can get a full view of whatever's

00:10:24,769 --> 00:10:30,440
going on in Cloud Foundry with respect

00:10:27,380 --> 00:10:33,920
to traffic the other enhancement we made

00:10:30,440 --> 00:10:37,459
was around just adding the app space

00:10:33,920 --> 00:10:39,860
organ formation to these traffic logs I

00:10:37,459 --> 00:10:42,769
don't know how many of you actually look

00:10:39,860 --> 00:10:47,589
at traffic logs to be able to debug

00:10:42,769 --> 00:10:52,070
problems in a foundry not so many okay

00:10:47,589 --> 00:10:54,620
so so we brought from operators that not

00:10:52,070 --> 00:10:56,120
having your app information and the logs

00:10:54,620 --> 00:10:58,970
make makes it really difficult to

00:10:56,120 --> 00:11:01,720
actually you know be able to take a log

00:10:58,970 --> 00:11:04,190
and trace it back to which app actually

00:11:01,720 --> 00:11:05,630
sent out that traffic so with this

00:11:04,190 --> 00:11:10,730
feature we hope that it'll become a

00:11:05,630 --> 00:11:12,770
easier so we're gonna now shift into

00:11:10,730 --> 00:11:15,730
looking at how this all works

00:11:12,770 --> 00:11:18,500
I mean I'm gonna hand it over to Angela

00:11:15,730 --> 00:11:20,480
awesome so now we've seen all the

00:11:18,500 --> 00:11:21,830
features of container networking and you

00:11:20,480 --> 00:11:25,730
might be wondering how does it actually

00:11:21,830 --> 00:11:27,980
work under the hood so here we have lots

00:11:25,730 --> 00:11:30,380
of boxes this is an architecture

00:11:27,980 --> 00:11:35,390
overview of the control plane with CF

00:11:30,380 --> 00:11:37,670
networking so the colors are significant

00:11:35,390 --> 00:11:39,590
in this case everything that's blue was

00:11:37,670 --> 00:11:42,110
a control plane component of Cloud

00:11:39,590 --> 00:11:44,300
Foundry prior to the introduction of

00:11:42,110 --> 00:11:46,970
container networking the components in

00:11:44,300 --> 00:11:50,180
green our new core components of Cloud

00:11:46,970 --> 00:11:52,880
Foundry and the components in red are

00:11:50,180 --> 00:11:54,770
new swappable components in Cloud

00:11:52,880 --> 00:11:58,150
Foundry and so the distinction between

00:11:54,770 --> 00:12:00,320
the red and the green is mainly that

00:11:58,150 --> 00:12:03,020
third-party vendors who might want to

00:12:00,320 --> 00:12:04,640
bring their own C&I plugin solution will

00:12:03,020 --> 00:12:07,040
need to integrate with the green

00:12:04,640 --> 00:12:09,620
components they can ignore everything in

00:12:07,040 --> 00:12:13,100
the red so if you wanted to bring let's

00:12:09,620 --> 00:12:14,980
say calico or nsx to the platform you

00:12:13,100 --> 00:12:19,070
would need to integrate with the green

00:12:14,980 --> 00:12:22,070
but not the red so now let's actually

00:12:19,070 --> 00:12:24,260
dive into this so the workflow now and

00:12:22,070 --> 00:12:26,300
the control plane is one off when an

00:12:24,260 --> 00:12:27,650
active pushes an app the apps

00:12:26,300 --> 00:12:29,950
information gets sent to Cloud

00:12:27,650 --> 00:12:32,870
Controller which passes it down to Diego

00:12:29,950 --> 00:12:34,280
Diego then decides where to schedule the

00:12:32,870 --> 00:12:36,530
application and sends that information

00:12:34,280 --> 00:12:39,260
along to the graph for the given Diego

00:12:36,530 --> 00:12:41,510
cell the rep then calls Garden run see

00:12:39,260 --> 00:12:43,090
using the Garden API in order to create

00:12:41,510 --> 00:12:46,640
the container that the app will run on

00:12:43,090 --> 00:12:49,670
when the container is being created

00:12:46,640 --> 00:12:51,380
Garner NC will call out to our new

00:12:49,670 --> 00:12:53,270
current component the guardian external

00:12:51,380 --> 00:12:55,340
networker via the Guardian external

00:12:53,270 --> 00:12:56,750
Network or API and so the garden

00:12:55,340 --> 00:12:59,900
external networker is doing a couple

00:12:56,750 --> 00:13:02,300
things it's doing port mappings from the

00:12:59,900 --> 00:13:04,940
Diego cell to the application for it's

00:13:02,300 --> 00:13:06,830
also doing some mounting of file systems

00:13:04,940 --> 00:13:09,350
but most importantly it's taking the

00:13:06,830 --> 00:13:13,070
information passed to it from garden and

00:13:09,350 --> 00:13:16,610
is transforming it into information that

00:13:13,070 --> 00:13:19,150
abides by the CNI API so this is how

00:13:16,610 --> 00:13:22,130
we're able to have swappable component

00:13:19,150 --> 00:13:25,430
so the external networker will call out

00:13:22,130 --> 00:13:28,250
using the cni api to our CF wrappers C

00:13:25,430 --> 00:13:31,550
and I plug in C if wrapper C and I plug

00:13:28,250 --> 00:13:33,770
in just two things first it sets up

00:13:31,550 --> 00:13:36,280
legacy rules so it takes care of

00:13:33,770 --> 00:13:39,320
everything relating to Dina Epps NAT and

00:13:36,280 --> 00:13:42,020
application security groups and then it

00:13:39,320 --> 00:13:45,260
also calls out silk C and I which is

00:13:42,020 --> 00:13:48,170
what is actually setting up the

00:13:45,260 --> 00:13:50,900
containers unique IP so how does silk C

00:13:48,170 --> 00:13:53,930
and I know what unique IP to allocate to

00:13:50,900 --> 00:13:55,910
a given container that's creating well

00:13:53,930 --> 00:13:57,800
silk C and I calls out to the silk

00:13:55,910 --> 00:14:00,290
daemon which is a process running on the

00:13:57,800 --> 00:14:02,780
Diego cell and the silk daemon will call

00:14:00,290 --> 00:14:05,120
out to a controller the controller will

00:14:02,780 --> 00:14:07,850
let it know what

00:14:05,120 --> 00:14:08,180
The Cider arrange the cell has and from

00:14:07,850 --> 00:14:11,510
it

00:14:08,180 --> 00:14:15,220
silk C and I to determine what IP it can

00:14:11,510 --> 00:14:17,690
give the container and set that up now

00:14:15,220 --> 00:14:21,290
when you actually want to configure

00:14:17,690 --> 00:14:24,380
policies the active can call out to

00:14:21,290 --> 00:14:27,830
create a policy either via the CLI or

00:14:24,380 --> 00:14:29,870
API this policy information gets stored

00:14:27,830 --> 00:14:33,920
in the network policy server which is

00:14:29,870 --> 00:14:35,720
another new core component the policies

00:14:33,920 --> 00:14:38,750
are actually written on the Diego cell

00:14:35,720 --> 00:14:40,220
via the policy agent so the policy agent

00:14:38,750 --> 00:14:42,320
currently pulls out to the network

00:14:40,220 --> 00:14:44,750
policy server in order to find out all

00:14:42,320 --> 00:14:47,390
the policies are applicable to apps on

00:14:44,750 --> 00:14:49,040
the cell and it knows what apps are on

00:14:47,390 --> 00:14:51,700
the cell because it receives that

00:14:49,040 --> 00:14:54,080
information from the cni wrapper plug in

00:14:51,700 --> 00:14:55,820
the policy agent will then take that

00:14:54,080 --> 00:14:58,100
information and write the relevant rules

00:14:55,820 --> 00:15:01,370
in order to allow traffic between apps

00:14:58,100 --> 00:15:03,650
the policies have been created for so

00:15:01,370 --> 00:15:06,590
that's the control play but how do

00:15:03,650 --> 00:15:09,020
packets actually flow when I have a Bay

00:15:06,590 --> 00:15:11,390
and a P and I couldn't figure out a

00:15:09,020 --> 00:15:13,100
policy how are we actually applying that

00:15:11,390 --> 00:15:18,110
policy how are we making sure that the

00:15:13,100 --> 00:15:19,700
traffic is flowing from a beta P well we

00:15:18,110 --> 00:15:22,910
can look at this case here or we have

00:15:19,700 --> 00:15:25,120
two apps in this case on different Diego

00:15:22,910 --> 00:15:29,870
cells but it could be on the same one

00:15:25,120 --> 00:15:31,820
and we have app a sending out a packet

00:15:29,870 --> 00:15:34,160
to application B

00:15:31,820 --> 00:15:38,180
this packet has the source IP and the

00:15:34,160 --> 00:15:40,580
destination IP as the container IPS so

00:15:38,180 --> 00:15:43,400
the ones that were uniquely allocated to

00:15:40,580 --> 00:15:46,040
each container then the packet gets

00:15:43,400 --> 00:15:49,130
encapsulated before leaving the Diego

00:15:46,040 --> 00:15:50,360
cell and it gets encapsulated in a

00:15:49,130 --> 00:15:51,860
packet that has the source and

00:15:50,360 --> 00:15:57,260
destination as the source and

00:15:51,860 --> 00:16:00,350
destination IP s of the Diego cells the

00:15:57,260 --> 00:16:04,250
app a and app B live on when the

00:16:00,350 --> 00:16:09,370
underlay when this packet is arrives on

00:16:04,250 --> 00:16:13,310
the Diego cell of the destination

00:16:09,370 --> 00:16:15,650
container we then check whether or not

00:16:13,310 --> 00:16:18,710
this packet should be allowed and we do

00:16:15,650 --> 00:16:21,860
so using VX land GDP headers and we

00:16:18,710 --> 00:16:23,480
assign tags in each of them in order to

00:16:21,860 --> 00:16:25,370
know whether or not it's allowed so

00:16:23,480 --> 00:16:27,910
we're using IP tables rules that are set

00:16:25,370 --> 00:16:31,310
up by the vehicle and policy agent

00:16:27,910 --> 00:16:34,070
assuming it is allowed we will pass it

00:16:31,310 --> 00:16:35,960
on to application B by D encapsulating

00:16:34,070 --> 00:16:39,080
it and letting it take its normal flow

00:16:35,960 --> 00:16:43,700
if it was not allowed the packet would

00:16:39,080 --> 00:16:45,500
then be dropped or denied so with that

00:16:43,700 --> 00:16:48,110
we're going to do a quick demo of how

00:16:45,500 --> 00:16:52,330
you can use container networking with

00:16:48,110 --> 00:17:02,360
Eureka so let's see if I can set this up

00:16:52,330 --> 00:17:04,699
so in this case we have two apps that

00:17:02,360 --> 00:17:07,400
are currently deployed we have a

00:17:04,699 --> 00:17:09,199
homeowner and a visitor the important

00:17:07,400 --> 00:17:12,620
thing to note here is that the homeowner

00:17:09,199 --> 00:17:14,930
app has no external routes so it's only

00:17:12,620 --> 00:17:16,600
reachable via the container network you

00:17:14,930 --> 00:17:20,750
can't reach it from the public Internet

00:17:16,600 --> 00:17:26,089
and the visitor the visitor however does

00:17:20,750 --> 00:17:31,580
have a public URL if we look at CF

00:17:26,089 --> 00:17:36,790
network policies we see currently but no

00:17:31,580 --> 00:17:41,570
policies are configured which means that

00:17:36,790 --> 00:17:45,350
when we look right here and we refresh

00:17:41,570 --> 00:17:45,950
we see that on the visitor page no one's

00:17:45,350 --> 00:17:50,410
home

00:17:45,950 --> 00:17:58,640
because there's no policy configured so

00:17:50,410 --> 00:18:01,040
now if we add a policy a network policy

00:17:58,640 --> 00:18:03,590
from the visitor so the visitor is a

00:18:01,040 --> 00:18:08,570
source and the destination app is the

00:18:03,590 --> 00:18:10,250
homeowner over a protocol of TCP and a

00:18:08,570 --> 00:18:20,170
port of 80 80 which is the default

00:18:10,250 --> 00:18:20,170
application for then we should see that

00:18:20,620 --> 00:18:25,700
we can now enter a visitor's name

00:18:23,170 --> 00:18:29,000
because we've allowed access from one to

00:18:25,700 --> 00:18:30,950
the other so if I say Angela you get

00:18:29,000 --> 00:18:31,610
some nonsense that really doesn't mean

00:18:30,950 --> 00:18:34,070
anything

00:18:31,610 --> 00:18:38,180
but we demonstrated here the basic

00:18:34,070 --> 00:18:42,260
functionality that a source app can talk

00:18:38,180 --> 00:18:45,020
to a destination app that's not publicly

00:18:42,260 --> 00:18:48,290
routable and it's using container

00:18:45,020 --> 00:18:50,330
networking and this is integrated with

00:18:48,290 --> 00:18:53,630
or this is done with our service

00:18:50,330 --> 00:18:55,970
discovery method of using eureka in case

00:18:53,630 --> 00:18:58,370
you were wondering how it knew what IP

00:18:55,970 --> 00:19:00,700
is to hit so let's just underlying

00:18:58,370 --> 00:19:00,700
implementation

00:19:04,870 --> 00:19:13,660
oh my god and with that I'll pass it

00:19:09,970 --> 00:19:15,930
back over to shaaa but I don't know

00:19:13,660 --> 00:19:15,930
where I am

00:19:18,630 --> 00:19:24,730
Thank You Angela

00:19:21,040 --> 00:19:27,850
so I was so that demo basically showed

00:19:24,730 --> 00:19:32,710
us how container networking works today

00:19:27,850 --> 00:19:35,980
and it was deployed on PWS where we have

00:19:32,710 --> 00:19:39,100
a service registry that's been deployed

00:19:35,980 --> 00:19:41,940
that's been bound to this app and so all

00:19:39,100 --> 00:19:44,350
the apps basically register with eureka

00:19:41,940 --> 00:19:46,300
so what I'm gonna be talking about next

00:19:44,350 --> 00:19:49,210
is basically what are some of the

00:19:46,300 --> 00:19:51,910
upcoming features and you know how are

00:19:49,210 --> 00:19:53,920
we gonna enhance container networking if

00:19:51,910 --> 00:19:56,020
there's something that you'd like to see

00:19:53,920 --> 00:19:57,190
her that you don't see we'd love to hear

00:19:56,020 --> 00:19:59,500
about it

00:19:57,190 --> 00:20:02,620
see whether we can prioritize these

00:19:59,500 --> 00:20:04,150
things so before I get into what we're

00:20:02,620 --> 00:20:07,150
building next I'm going to talk a little

00:20:04,150 --> 00:20:08,950
bit about the timeline how many of you

00:20:07,150 --> 00:20:13,570
here I'm hearing about CF networking for

00:20:08,950 --> 00:20:16,210
the first time great no one okay good so

00:20:13,570 --> 00:20:17,500
then you must know that we have been you

00:20:16,210 --> 00:20:20,500
know working on this project for a while

00:20:17,500 --> 00:20:22,900
we released our first version in

00:20:20,500 --> 00:20:24,880
November of 2016 we were called net man

00:20:22,900 --> 00:20:28,360
release at that point and we used

00:20:24,880 --> 00:20:30,220
flannel as our overlay Network and as

00:20:28,360 --> 00:20:34,080
Angela mentioned we use group based

00:20:30,220 --> 00:20:36,850
policy for enforcement we deployed two

00:20:34,080 --> 00:20:41,290
pivotal web services and also went beta

00:20:36,850 --> 00:20:43,450
with PCF in version 1.10 of PCF and we

00:20:41,290 --> 00:20:45,280
we found that there were like some

00:20:43,450 --> 00:20:47,470
operational challenges that we faced

00:20:45,280 --> 00:20:51,429
when we were using flannel and so that

00:20:47,470 --> 00:20:52,960
led to us actually implementing silk and

00:20:51,429 --> 00:20:54,520
we also thought that oh we don't like

00:20:52,960 --> 00:20:56,470
the name net man release so let's just

00:20:54,520 --> 00:20:59,140
rename ourselves to CF networking

00:20:56,470 --> 00:21:02,830
release so we're now CF networking

00:20:59,140 --> 00:21:07,420
release in May of this year and we we

00:21:02,830 --> 00:21:11,380
actually go GA in June with the one auto

00:21:07,420 --> 00:21:14,770
and we also made it the default stack

00:21:11,380 --> 00:21:16,330
for PCF 111 it could still be disabled

00:21:14,770 --> 00:21:18,790
though if you wanted to go back to your

00:21:16,330 --> 00:21:22,390
host networking more

00:21:18,790 --> 00:21:24,160
so fast forward to September we are now

00:21:22,390 --> 00:21:26,800
out of incubation so that was a big

00:21:24,160 --> 00:21:29,760
milestone for us we are now part of the

00:21:26,800 --> 00:21:33,040
core active projects and we're also

00:21:29,760 --> 00:21:38,590
shipping we're still GA where we're now

00:21:33,040 --> 00:21:40,570
the only option on PCF 1.12 so starting

00:21:38,590 --> 00:21:43,210
from almost nothing a year ago we are

00:21:40,570 --> 00:21:46,030
now pretty much ready for everyone to

00:21:43,210 --> 00:21:48,640
use so what are we going to be working

00:21:46,030 --> 00:21:51,040
on next some of you may have seen a

00:21:48,640 --> 00:21:53,470
future proposal from us that was sent

00:21:51,040 --> 00:21:55,510
out a few weeks ago and we're working

00:21:53,470 --> 00:21:59,520
now on an initiative for actually

00:21:55,510 --> 00:22:03,250
providing platform service discovery and

00:21:59,520 --> 00:22:06,010
what does this mean so in the demo that

00:22:03,250 --> 00:22:08,020
we just showed you we saw that the

00:22:06,010 --> 00:22:10,750
visitor could find the homeowner just

00:22:08,020 --> 00:22:12,690
because it had this external Eureka

00:22:10,750 --> 00:22:15,700
server that it could use for a lookup

00:22:12,690 --> 00:22:17,740
but without this this external server

00:22:15,700 --> 00:22:21,040
applications have no way of actually

00:22:17,740 --> 00:22:23,710
knowing where their destinations are and

00:22:21,040 --> 00:22:25,870
how to reach them and there are two

00:22:23,710 --> 00:22:28,570
different use cases with with slightly

00:22:25,870 --> 00:22:31,450
different requirements one of them is

00:22:28,570 --> 00:22:33,400
the micro services use case which is

00:22:31,450 --> 00:22:36,100
basically what we saw which is that I

00:22:33,400 --> 00:22:39,940
have a source app connect me to you know

00:22:36,100 --> 00:22:42,580
any instance of your destination app I

00:22:39,940 --> 00:22:44,590
don't care you should do load balancing

00:22:42,580 --> 00:22:46,570
for me and maybe have you know do some

00:22:44,590 --> 00:22:48,520
more advanced features for you the

00:22:46,570 --> 00:22:50,410
second is clustering app so clustering

00:22:48,520 --> 00:22:52,840
apps usually need to know every instance

00:22:50,410 --> 00:22:55,120
and need to connect to specific

00:22:52,840 --> 00:22:57,340
instances so that's basically the

00:22:55,120 --> 00:22:58,420
requirements the two different types of

00:22:57,340 --> 00:23:02,680
requirements that we're trying to

00:22:58,420 --> 00:23:04,780
fulfill with our current feature so what

00:23:02,680 --> 00:23:06,310
does this look like and we are looking

00:23:04,780 --> 00:23:08,530
for feedback on this so if you have

00:23:06,310 --> 00:23:11,590
feedback please let us know this feature

00:23:08,530 --> 00:23:14,200
is still under development so our short

00:23:11,590 --> 00:23:16,480
term goals are basically to give every

00:23:14,200 --> 00:23:18,580
single app in Cloud Foundry what's known

00:23:16,480 --> 00:23:21,250
as an infrastructure name this

00:23:18,580 --> 00:23:25,780
infrastructure name is currently the app

00:23:21,250 --> 00:23:27,730
gooood dot some internal domain so in

00:23:25,780 --> 00:23:31,120
the example here it's like the building

00:23:27,730 --> 00:23:32,350
app code dot C F internal just

00:23:31,120 --> 00:23:34,480
we're not trying to make this

00:23:32,350 --> 00:23:36,340
configurable every app will just get

00:23:34,480 --> 00:23:38,950
this name and then you can look up your

00:23:36,340 --> 00:23:41,230
app using that name in addition every

00:23:38,950 --> 00:23:43,800
instance of the app is also going to get

00:23:41,230 --> 00:23:49,240
a name so you would have like a zero dot

00:23:43,800 --> 00:23:51,550
building going billing dot TLD right so

00:23:49,240 --> 00:23:53,680
that's a short-term goal but what we've

00:23:51,550 --> 00:23:56,470
heard from users is really that they

00:23:53,680 --> 00:23:58,630
would like to expose the concept of a

00:23:56,470 --> 00:24:00,580
service similar to how external routes

00:23:58,630 --> 00:24:03,790
work where you can register multiple

00:24:00,580 --> 00:24:05,800
apps with the same external route and so

00:24:03,790 --> 00:24:07,929
that way you can do things like blue

00:24:05,800 --> 00:24:09,730
green deploys or deploy different

00:24:07,929 --> 00:24:11,140
versions of your app and then have you

00:24:09,730 --> 00:24:13,420
know load balance across those different

00:24:11,140 --> 00:24:15,520
versions so that's like the next phase

00:24:13,420 --> 00:24:20,170
of what we're building we're going to

00:24:15,520 --> 00:24:22,450
give developers the ability to configure

00:24:20,170 --> 00:24:24,280
an internal route for their apps very

00:24:22,450 --> 00:24:26,800
similar to how you would configure an

00:24:24,280 --> 00:24:28,600
external route for your app right and

00:24:26,800 --> 00:24:32,559
then that route is only visible to

00:24:28,600 --> 00:24:36,130
internal applications longer term we are

00:24:32,559 --> 00:24:38,290
looking at integrating with Sto so this

00:24:36,130 --> 00:24:40,900
the CF networking team the routing team

00:24:38,290 --> 00:24:43,960
as well as Diego and Cathy we've all

00:24:40,900 --> 00:24:48,250
been looking at how we can integrate SEO

00:24:43,960 --> 00:24:50,590
into car foundry and so our one of our

00:24:48,250 --> 00:24:54,040
goals is to actually have our service

00:24:50,590 --> 00:24:56,770
discovery mechanism feed into is TOS

00:24:54,040 --> 00:25:00,429
pilot how many of you here are have

00:24:56,770 --> 00:25:02,980
heard of ISTE oh ok quite a few of you

00:25:00,429 --> 00:25:07,420
so for those of you who haven't heard of

00:25:02,980 --> 00:25:11,500
it it's you is a new service mesh open

00:25:07,420 --> 00:25:12,880
source solution that has a lot of people

00:25:11,500 --> 00:25:16,600
that are working on it

00:25:12,880 --> 00:25:20,010
including Google IBM and pivotal is also

00:25:16,600 --> 00:25:22,510
starting to invest in it a little more

00:25:20,010 --> 00:25:24,390
so that's kind of the polyglot service

00:25:22,510 --> 00:25:26,950
discovery piece that we're building

00:25:24,390 --> 00:25:30,280
gonna take a slight diversion here and

00:25:26,950 --> 00:25:33,280
talk about third-party integrations this

00:25:30,280 --> 00:25:35,320
slide is specific to an integration

00:25:33,280 --> 00:25:38,950
between pivotal Cloud Foundry and NS xt

00:25:35,320 --> 00:25:41,350
but the idea here is that you could

00:25:38,950 --> 00:25:44,450
actually have any third party come in

00:25:41,350 --> 00:25:46,310
and hook into Cloud Foundry and the bed

00:25:44,450 --> 00:25:48,590
efforts that you get from that are

00:25:46,310 --> 00:25:52,700
basically that you have native container

00:25:48,590 --> 00:25:55,970
networking on an existing Sdn solution

00:25:52,700 --> 00:25:58,040
you also have a common operating model

00:25:55,970 --> 00:26:00,980
for all your traditional apps and your

00:25:58,040 --> 00:26:03,020
cloud native apps and you you don't have

00:26:00,980 --> 00:26:06,650
to like redo you know any of your

00:26:03,020 --> 00:26:08,990
processes or things like that so NSX T

00:26:06,650 --> 00:26:10,760
is one integration that's underway there

00:26:08,990 --> 00:26:13,040
are other integrations possible as well

00:26:10,760 --> 00:26:16,760
of course so things like Cisco ECI

00:26:13,040 --> 00:26:18,980
things like calico there's you know

00:26:16,760 --> 00:26:23,030
anyone who has a CNI plug-in should be

00:26:18,980 --> 00:26:28,070
able to using our hooks for CNI come in

00:26:23,030 --> 00:26:30,620
and integrate with Cloud Foundry so I'm

00:26:28,070 --> 00:26:34,190
gonna conclude with just link to a few

00:26:30,620 --> 00:26:37,880
resources our github page is Cloud

00:26:34,190 --> 00:26:39,890
Foundry CF networking release we have a

00:26:37,880 --> 00:26:42,470
whole bunch of examples on our github

00:26:39,890 --> 00:26:44,210
page and as we start adding the polyglot

00:26:42,470 --> 00:26:47,200
service discovery will be you know

00:26:44,210 --> 00:26:50,750
adding some more examples to those pages

00:26:47,200 --> 00:26:55,480
and then you can always reach us on C F

00:26:50,750 --> 00:26:58,250
networking slack we're very friendly and

00:26:55,480 --> 00:27:01,130
we'll you know welcome any input that

00:26:58,250 --> 00:27:02,210
you have and then a couple of blogs just

00:27:01,130 --> 00:27:08,440
for you to understand a little more

00:27:02,210 --> 00:27:08,440
about the feature that's all we had

00:27:08,850 --> 00:27:13,540
[Music]

00:27:11,660 --> 00:27:15,350
[Applause]

00:27:13,540 --> 00:27:20,150
I'm not sure if you have time for

00:27:15,350 --> 00:27:21,740
questions do I think we aside for one

00:27:20,150 --> 00:27:24,200
question a couple questions if anyone

00:27:21,740 --> 00:27:33,820
has any if anyone has a question feel

00:27:24,200 --> 00:27:37,250
free to ask us so you discussed

00:27:33,820 --> 00:27:40,570
connectivity between the apps and the

00:27:37,250 --> 00:27:42,980
instances is there any any thought about

00:27:40,570 --> 00:27:46,070
connecting to a specific instance from

00:27:42,980 --> 00:27:47,630
the public route so I mean let's say you

00:27:46,070 --> 00:27:50,000
want to develop something you connect to

00:27:47,630 --> 00:27:52,970
a public route and then you want to

00:27:50,000 --> 00:27:54,860
reconnect to the same instance not to

00:27:52,970 --> 00:27:57,200
share the state or for efficiency

00:27:54,860 --> 00:27:59,240
reasons would it be any kind of

00:27:57,200 --> 00:28:00,890
mechanism that you can discover which

00:27:59,240 --> 00:28:04,720
instance you connected to and as you can

00:28:00,890 --> 00:28:04,720
connect straight back to that instance

00:28:05,590 --> 00:28:12,500
so you can do okay you can do surgical

00:28:10,040 --> 00:28:15,050
routing with the core router today so

00:28:12,500 --> 00:28:17,450
that there is a feature that you can use

00:28:15,050 --> 00:28:22,850
to you know continue to connect us to

00:28:17,450 --> 00:28:25,360
the same instance okay any other

00:28:22,850 --> 00:28:25,360
questions

00:28:32,910 --> 00:28:40,660
Testarossa work for cross space and

00:28:36,930 --> 00:28:43,300
communication and since my applications

00:28:40,660 --> 00:28:46,240
don't have unique names how does it work

00:28:43,300 --> 00:28:48,940
them yeah that's a great question and

00:28:46,240 --> 00:28:51,160
one of the things about our policy is

00:28:48,940 --> 00:28:53,920
that it works across spaces orgs

00:28:51,160 --> 00:28:57,670
anything so you configure it based on

00:28:53,920 --> 00:29:00,220
the act name on the CLI right so the CLI

00:28:57,670 --> 00:29:02,110
today is only for the targeted space

00:29:00,220 --> 00:29:04,180
that you're in but we are looking at

00:29:02,110 --> 00:29:07,330
ways to enhance that to also enable you

00:29:04,180 --> 00:29:09,610
to configure cross space policies using

00:29:07,330 --> 00:29:13,030
the API even today you can configure

00:29:09,610 --> 00:29:15,070
across spaces and orgs because you just

00:29:13,030 --> 00:29:19,480
give the API or add to it and that's

00:29:15,070 --> 00:29:23,350
unique across everything other plans for

00:29:19,480 --> 00:29:26,530
using also the manifest some how to do

00:29:23,350 --> 00:29:29,350
this kind of configuration yes we do

00:29:26,530 --> 00:29:32,710
have plans to support some sort of

00:29:29,350 --> 00:29:36,220
decorative policy config we're looking

00:29:32,710 --> 00:29:39,670
at it in as not just as simply adding it

00:29:36,220 --> 00:29:42,250
to the app manifest but perhaps a more

00:29:39,670 --> 00:29:44,740
generic like policy across many micro

00:29:42,250 --> 00:29:46,300
services so it's still too early like

00:29:44,740 --> 00:29:48,130
it's something that's on our radar and

00:29:46,300 --> 00:29:51,100
we've we've got had a lot of people ask

00:29:48,130 --> 00:29:59,070
us for that support it is something that

00:29:51,100 --> 00:29:59,070
will be upcoming any other questions

00:29:59,700 --> 00:30:05,980
great thank you all for attending

00:30:03,060 --> 00:30:05,980

YouTube URL: https://www.youtube.com/watch?v=lskNPk1c2xM


