Title: CF for K8s [March 2020]
Publication date: 2020-03-20
Playlist: Cloud Foundry for Kubernetes Monthly SIG
Description: 
	
Captions: 
	00:00:00,030 --> 00:00:06,359
oh yeah right haha sorry for that still

00:00:03,990 --> 00:00:09,929
figuring out my home office setup oh

00:00:06,359 --> 00:00:12,920
yeah no no problem glad to hear you're

00:00:09,929 --> 00:00:12,920
staying safe

00:00:15,139 --> 00:00:21,960
cool yeah so if I don't know if you all

00:00:19,140 --> 00:00:26,099
saw but I did post a document to the CF

00:00:21,960 --> 00:00:28,260
dev mailing list describing really sort

00:00:26,099 --> 00:00:30,420
of a new standard for the CF community

00:00:28,260 --> 00:00:35,610
should say an evolving standard for the

00:00:30,420 --> 00:00:39,660
CF community to instrument around the

00:00:35,610 --> 00:00:42,780
Prometheus exposition format there's

00:00:39,660 --> 00:00:46,469
kind of a history here that's even in CF

00:00:42,780 --> 00:00:50,520
deployment really over the last year or

00:00:46,469 --> 00:00:53,430
so we have built some exporters in

00:00:50,520 --> 00:00:55,460
logger Gator and even though most people

00:00:53,430 --> 00:00:58,199
consume metrics through the firehose

00:00:55,460 --> 00:01:01,199
there's now a system and CF deployment

00:00:58,199 --> 00:01:04,290
to expose all the component metrics via

00:01:01,199 --> 00:01:06,170
Prometheus and we have a couple of

00:01:04,290 --> 00:01:10,380
different reference architectures to

00:01:06,170 --> 00:01:14,189
consume those metrics by telegraph or

00:01:10,380 --> 00:01:16,439
Prometheus over ncf deployment but

00:01:14,189 --> 00:01:19,590
really the important thing for both

00:01:16,439 --> 00:01:22,159
operators and components and CF for

00:01:19,590 --> 00:01:24,869
kate's is that we do not plan to bring

00:01:22,159 --> 00:01:28,680
the logger Gator system for metric

00:01:24,869 --> 00:01:31,710
transport and we are working with the CF

00:01:28,680 --> 00:01:35,310
for Cates teams to help them instrument

00:01:31,710 --> 00:01:38,159
their workloads than Prometheus and want

00:01:35,310 --> 00:01:40,950
to really enable teams to understand how

00:01:38,159 --> 00:01:43,979
to do that what that means and what the

00:01:40,950 --> 00:01:46,229
implications are so I think this is a

00:01:43,979 --> 00:01:48,649
good forum to start start that

00:01:46,229 --> 00:01:48,649
discussion

00:01:53,969 --> 00:01:57,880
and I remember you had mentioned to me

00:01:56,170 --> 00:02:00,369
that some of the existing components

00:01:57,880 --> 00:02:03,310
like CF and UAA they might be fairly

00:02:00,369 --> 00:02:05,020
easily positioned to move to that

00:02:03,310 --> 00:02:07,149
convention for metrics because they've

00:02:05,020 --> 00:02:09,599
already been using things like stats D

00:02:07,149 --> 00:02:13,780
and at least in the short term there's

00:02:09,599 --> 00:02:16,030
some easy translators that would adapt

00:02:13,780 --> 00:02:18,310
that protocol to these Prometheus

00:02:16,030 --> 00:02:22,000
patterns yeah that's those are good

00:02:18,310 --> 00:02:27,810
examples UAA and stats the UAA and Kathy

00:02:22,000 --> 00:02:31,420
both use the stats D format and the the

00:02:27,810 --> 00:02:33,700
term in in the Prometheus project for

00:02:31,420 --> 00:02:36,910
converting metrics is called an exporter

00:02:33,700 --> 00:02:40,000
so there's a popular stats the exporter

00:02:36,910 --> 00:02:43,060
which will live in your pod and listen

00:02:40,000 --> 00:02:46,120
on the UDP port for stats D and then

00:02:43,060 --> 00:02:48,760
convert those stats D metrics into the

00:02:46,120 --> 00:02:52,000
Prometheus format for those that don't

00:02:48,760 --> 00:02:55,900
know for me there is a big there is a

00:02:52,000 --> 00:02:57,519
big mental shift here for consuming

00:02:55,900 --> 00:03:00,730
metrics which is that we are

00:02:57,519 --> 00:03:04,900
transitioning from a push model to a

00:03:00,730 --> 00:03:07,209
pull model so the development of

00:03:04,900 --> 00:03:11,319
something like a nozzle is is definitely

00:03:07,209 --> 00:03:14,410
different and like I said we we've we've

00:03:11,319 --> 00:03:16,480
started to see that challenge in CF

00:03:14,410 --> 00:03:18,489
deployment it's it's it's pretty hard to

00:03:16,480 --> 00:03:22,450
get people to talk Rock switching from

00:03:18,489 --> 00:03:25,540
push to a pull and CF deployment it's a

00:03:22,450 --> 00:03:29,109
little bit easier in kubernetes because

00:03:25,540 --> 00:03:31,870
all of the endpoints are defined in pods

00:03:29,109 --> 00:03:33,720
which live in the kubernetes api so

00:03:31,870 --> 00:03:36,700
service discovery is a little bit easier

00:03:33,720 --> 00:03:40,720
leveraging the kubernetes api but it

00:03:36,700 --> 00:03:43,810
still does put the onus on the pull

00:03:40,720 --> 00:03:46,569
mechanism to retrieve the metrics and

00:03:43,810 --> 00:03:49,989
and to help with that we are looking at

00:03:46,569 --> 00:03:54,579
including a Prometheus server in CF for

00:03:49,989 --> 00:03:57,639
gates it is popular for vendors to

00:03:54,579 --> 00:04:00,790
extend based on top of the Prometheus

00:03:57,639 --> 00:04:03,969
server so you know vendors will be able

00:04:00,790 --> 00:04:06,700
to bring rich dashboarding tools alerts

00:04:03,969 --> 00:04:07,959
or Federation strategies on top of

00:04:06,700 --> 00:04:11,500
Prometheus

00:04:07,959 --> 00:04:14,440
so like I said things will look a little

00:04:11,500 --> 00:04:18,130
bit different and CF for kids in terms

00:04:14,440 --> 00:04:20,470
of metrics the kind of two key

00:04:18,130 --> 00:04:22,479
differences being you know that pull

00:04:20,470 --> 00:04:24,580
based and then also having this

00:04:22,479 --> 00:04:27,940
Prometheus server as a bit of a cache of

00:04:24,580 --> 00:04:29,500
metrics not unsimilar to log catchment

00:04:27,940 --> 00:04:32,530
we kind of experimented with these

00:04:29,500 --> 00:04:34,120
things in log cache and like I said we

00:04:32,530 --> 00:04:36,820
started to roll out these these

00:04:34,120 --> 00:04:38,979
standards and CF deployment but we've

00:04:36,820 --> 00:04:42,669
done it alongside also supporting the

00:04:38,979 --> 00:04:46,210
logger Gator system and in cf4 kate's

00:04:42,669 --> 00:04:48,520
where we're going to not bring a logger

00:04:46,210 --> 00:04:52,960
Gator system and nozzle ecosystem and

00:04:48,520 --> 00:05:04,600
instead use pull as the as the canonical

00:04:52,960 --> 00:05:06,850
system for metrics candidly a lot of our

00:05:04,600 --> 00:05:08,979
knowledge is pretty theoretical you know

00:05:06,850 --> 00:05:12,250
we've been reading best practices we

00:05:08,979 --> 00:05:13,780
know sort of like how to do this we're

00:05:12,250 --> 00:05:16,450
working with Cappy to kind of get a

00:05:13,780 --> 00:05:19,180
first team through the process of what's

00:05:16,450 --> 00:05:22,599
it look like to do what should be an

00:05:19,180 --> 00:05:25,990
easy exposition like I said stats D has

00:05:22,599 --> 00:05:28,389
a popular exporter we know you know

00:05:25,990 --> 00:05:31,930
Kathy has metrics that operators are

00:05:28,389 --> 00:05:34,630
interested in additionally it's not

00:05:31,930 --> 00:05:37,720
uncommon there's there's probably around

00:05:34,630 --> 00:05:40,979
150 exporters and and like there's

00:05:37,720 --> 00:05:44,139
exporters for my sequel and Postgres so

00:05:40,979 --> 00:05:47,289
like in the case of Cappy we may also

00:05:44,139 --> 00:05:50,020
help to export metrics from the backing

00:05:47,289 --> 00:05:53,590
database as well but it's something that

00:05:50,020 --> 00:05:56,800
our our team wants to really work as an

00:05:53,590 --> 00:05:59,699
enablement team around these are these

00:05:56,800 --> 00:06:02,860
are bits that end up living in

00:05:59,699 --> 00:06:05,620
components source code so you know

00:06:02,860 --> 00:06:08,410
you're either using us an existing

00:06:05,620 --> 00:06:10,210
workload like Cappy or UAA and bringing

00:06:08,410 --> 00:06:12,280
an exporter to put in your pod to live

00:06:10,210 --> 00:06:15,430
next to your container that's running

00:06:12,280 --> 00:06:17,890
your existing workload or you may be

00:06:15,430 --> 00:06:20,830
developing something more ground up like

00:06:17,890 --> 00:06:21,370
kpac for example where instrumented

00:06:20,830 --> 00:06:23,470
native

00:06:21,370 --> 00:06:24,430
within the workload is perhaps a better

00:06:23,470 --> 00:06:28,540
option

00:06:24,430 --> 00:06:32,290
so we want to help enable those teams to

00:06:28,540 --> 00:06:33,880
do that and the document is really

00:06:32,290 --> 00:06:37,479
designed to start to get that feedback

00:06:33,880 --> 00:06:41,889
going get that discussion going and help

00:06:37,479 --> 00:06:44,550
people with that journey so for example

00:06:41,889 --> 00:06:50,020
the kepi team will they have to maintain

00:06:44,550 --> 00:06:53,860
both log radiator code and this new

00:06:50,020 --> 00:06:57,010
prometheus approach they shouldn't have

00:06:53,860 --> 00:07:00,130
to they their workload should be the

00:06:57,010 --> 00:07:02,260
same between Bosch and kate's their

00:07:00,130 --> 00:07:04,150
workload will continue to instrument in

00:07:02,260 --> 00:07:08,979
stats D I'm expecting unless they decide

00:07:04,150 --> 00:07:11,620
to make a change and the you know I

00:07:08,979 --> 00:07:13,450
think they will serve the scope of work

00:07:11,620 --> 00:07:17,650
for them is to include a little bit of

00:07:13,450 --> 00:07:20,860
extra yeah Mille to say hey we need

00:07:17,650 --> 00:07:24,010
another container running in our pod

00:07:20,860 --> 00:07:26,979
which is this stats the exporter they

00:07:24,010 --> 00:07:28,360
may have a little bit of like versioning

00:07:26,979 --> 00:07:30,280
and stuff to make sure that they like

00:07:28,360 --> 00:07:32,590
stay up with that exporter from its from

00:07:30,280 --> 00:07:36,100
the Prometheus project and in that case

00:07:32,590 --> 00:07:39,340
in particular I will say like exporters

00:07:36,100 --> 00:07:42,039
do get they get to be a little bit more

00:07:39,340 --> 00:07:45,610
community driven so we may find at times

00:07:42,039 --> 00:07:47,650
that if you have for example something

00:07:45,610 --> 00:07:49,900
like a Postgres export or my sequel

00:07:47,650 --> 00:07:52,050
exporter that may not come from the

00:07:49,900 --> 00:07:54,910
Prometheus project and may come from a

00:07:52,050 --> 00:07:57,340
more obscure source so there may be

00:07:54,910 --> 00:07:59,950
times when the exposition itself does

00:07:57,340 --> 00:08:02,050
require teams to think about owning a

00:07:59,950 --> 00:08:04,960
little bit of code there but again

00:08:02,050 --> 00:08:07,810
that's that's where we can help we want

00:08:04,960 --> 00:08:10,539
to we do want to kind of think of it

00:08:07,810 --> 00:08:12,490
more as enablement than we haven't in

00:08:10,539 --> 00:08:14,440
the past of just saying hey give us

00:08:12,490 --> 00:08:17,590
these gr PC envelopes and we'll take it

00:08:14,440 --> 00:08:19,360
from there it is a little bit more on

00:08:17,590 --> 00:08:21,400
the team to think about what format of

00:08:19,360 --> 00:08:23,830
metrics are they using and how do they

00:08:21,400 --> 00:08:25,690
convert that to Prometheus or should

00:08:23,830 --> 00:08:29,500
they consider instrumented natively in

00:08:25,690 --> 00:08:32,829
Prometheus so like I said well we'll be

00:08:29,500 --> 00:08:34,700
there to help with that enablement but

00:08:32,829 --> 00:08:37,460
it's a pretty rich

00:08:34,700 --> 00:08:40,100
so if you're already instrumented in

00:08:37,460 --> 00:08:42,710
some way chances are there's tooling to

00:08:40,100 --> 00:08:46,550
help you get to previous make sense

00:08:42,710 --> 00:08:48,890
Thanks on a on a much smaller scale I

00:08:46,550 --> 00:08:51,710
think we've recently done a similar

00:08:48,890 --> 00:08:55,310
thing for for Bosch itself like our

00:08:51,710 --> 00:08:57,110
internal Bosch team has been trying to

00:08:55,310 --> 00:09:00,410
get as many metrics as we can out of

00:08:57,110 --> 00:09:04,400
Bosch putting a telegraph exporter on

00:09:00,410 --> 00:09:08,270
the side and just trying to funnel it

00:09:04,400 --> 00:09:11,030
all through a single thing I think they

00:09:08,270 --> 00:09:16,060
haven't switched to full based metrics

00:09:11,030 --> 00:09:18,530
yet we are still using push model um but

00:09:16,060 --> 00:09:20,420
this is certainly an option like once

00:09:18,530 --> 00:09:24,530
you have this generic stack up and

00:09:20,420 --> 00:09:30,020
running yep you can just switch to like

00:09:24,530 --> 00:09:31,370
pull based and then have all all the

00:09:30,020 --> 00:09:34,010
goodness of like the individual teams

00:09:31,370 --> 00:09:36,700
being able to decide now X for this

00:09:34,010 --> 00:09:40,670
metric as well now I do this

00:09:36,700 --> 00:09:43,580
yeah I think we've seen similar usage of

00:09:40,670 --> 00:09:46,780
Telegraph on pivotal container service

00:09:43,580 --> 00:09:50,330
we use Telegraph to convert pull to push

00:09:46,780 --> 00:09:54,920
like I said a lot of partner is V

00:09:50,330 --> 00:09:57,680
partners are and really a lot of sort of

00:09:54,920 --> 00:09:59,950
enterprise network setups are not

00:09:57,680 --> 00:10:03,380
necessarily easy to implement a pull

00:09:59,950 --> 00:10:07,400
from outside the subnet so having push

00:10:03,380 --> 00:10:10,790
is still a really valuable integration

00:10:07,400 --> 00:10:14,480
point and Telegraph is a great open

00:10:10,790 --> 00:10:16,580
source agent and tool to take the pull

00:10:14,480 --> 00:10:19,700
metrics convert it to a push it has a

00:10:16,580 --> 00:10:22,700
pretty rich plug-in system so we've also

00:10:19,700 --> 00:10:25,190
found Telegraph to be a great agent to

00:10:22,700 --> 00:10:27,310
include alongside a pull mechanism as

00:10:25,190 --> 00:10:27,310
well

00:10:31,630 --> 00:10:37,280
I'm regarding the the document you've

00:10:34,880 --> 00:10:40,780
said with the community I haven't seen

00:10:37,280 --> 00:10:44,870
too much interaction with it so far like

00:10:40,780 --> 00:10:47,450
I don't see like comments on the

00:10:44,870 --> 00:10:49,930
documents or discussions happening is

00:10:47,450 --> 00:10:53,080
this due to the fact that like within

00:10:49,930 --> 00:10:56,270
VMware everything is perfectly aligned

00:10:53,080 --> 00:10:58,810
is it due to like people not caring

00:10:56,270 --> 00:11:02,930
about also the ability and striving with

00:10:58,810 --> 00:11:06,710
much more fundamental issues like what's

00:11:02,930 --> 00:11:08,510
your what's your feeling why why there's

00:11:06,710 --> 00:11:10,460
little feedback coming in or did you

00:11:08,510 --> 00:11:13,280
even receive feedback on on other

00:11:10,460 --> 00:11:16,550
channels yeah my my god is a little bit

00:11:13,280 --> 00:11:18,530
more the latter when we have have talked

00:11:16,550 --> 00:11:23,060
to teams they they understand the

00:11:18,530 --> 00:11:26,060
importance of metrics and the you know

00:11:23,060 --> 00:11:28,130
day to need that said most of the teams

00:11:26,060 --> 00:11:29,480
are concentrating on day one

00:11:28,130 --> 00:11:33,050
functionality that they're still

00:11:29,480 --> 00:11:36,800
implementing so we're feeling a little

00:11:33,050 --> 00:11:38,330
bit like we're you know helping helping

00:11:36,800 --> 00:11:42,350
them anticipate in need they haven't

00:11:38,330 --> 00:11:45,800
actually encountered yet so I feel like

00:11:42,350 --> 00:11:48,620
it's a little bit of a concern that

00:11:45,800 --> 00:11:54,170
teams are kind of used to having taken

00:11:48,620 --> 00:11:58,070
care of for them so hoping to get some

00:11:54,170 --> 00:12:02,030
some more interaction but like you said

00:11:58,070 --> 00:12:05,690
I think a lot of teams are it's not top

00:12:02,030 --> 00:12:08,960
of mind for them so we're starting to

00:12:05,690 --> 00:12:11,240
set up some calls and and you know spend

00:12:08,960 --> 00:12:13,700
some time with them I mean the kpac team

00:12:11,240 --> 00:12:15,320
is a good team they have been really

00:12:13,700 --> 00:12:16,610
thought about metrics at all yet even

00:12:15,320 --> 00:12:19,960
though they're they're pretty far along

00:12:16,610 --> 00:12:23,180
and they're in there day one concerns so

00:12:19,960 --> 00:12:27,440
it's something that I think we'll see

00:12:23,180 --> 00:12:30,160
more detailed and nuanced interaction

00:12:27,440 --> 00:12:30,160
over time

00:12:36,810 --> 00:12:41,740
agreed I mean I think this is a team

00:12:39,670 --> 00:12:43,089
probably hasn't chimed in with cubes he

00:12:41,740 --> 00:12:45,850
have questions yet because we haven't

00:12:43,089 --> 00:12:47,800
started digging in yet and once we once

00:12:45,850 --> 00:12:53,620
we start trying this out and we'll have

00:12:47,800 --> 00:12:55,089
more questions yeah CCF is maybe in a

00:12:53,620 --> 00:12:57,940
little bit of a middle ground where you

00:12:55,089 --> 00:12:59,770
all have vlogger gator included like I

00:12:57,940 --> 00:13:04,480
said logger reader has over time

00:12:59,770 --> 00:13:05,830
included exporters so that metrics that

00:13:04,480 --> 00:13:07,690
are instrumented through a logger Gator

00:13:05,830 --> 00:13:10,360
envelope can be also exposed through a

00:13:07,690 --> 00:13:12,540
prometheus endpoint I haven't thought

00:13:10,360 --> 00:13:16,270
too much about what it would take to

00:13:12,540 --> 00:13:18,700
kind of get that route going but it

00:13:16,270 --> 00:13:22,839
should be a possible transition there as

00:13:18,700 --> 00:13:25,110
well yeah I think that's what what glad

00:13:22,839 --> 00:13:27,400
and I are thinking about right now what

00:13:25,110 --> 00:13:41,110
we'll reach out if we need some help

00:13:27,400 --> 00:13:45,400
with that I think um I think this whole

00:13:41,110 --> 00:13:51,550
metrics topic also came up in the

00:13:45,400 --> 00:13:55,120
context of like how would the metrics

00:13:51,550 --> 00:13:58,330
API for consumers change how would

00:13:55,120 --> 00:13:59,830
individual metrics change and so on so

00:13:58,330 --> 00:14:01,570
there might be several projects for

00:13:59,830 --> 00:14:04,390
example the auto like application

00:14:01,570 --> 00:14:06,100
autoscaler project currently relying on

00:14:04,390 --> 00:14:14,110
certain metrics being provided with

00:14:06,100 --> 00:14:16,150
certain meaning Heiser vestra so what

00:14:14,110 --> 00:14:18,490
would this mean for projects like this

00:14:16,150 --> 00:14:20,589
are you intending to keep all the

00:14:18,490 --> 00:14:25,870
existing metrics with the existing names

00:14:20,589 --> 00:14:28,360
and existing like interpretations of

00:14:25,870 --> 00:14:32,050
them or is something about that supposed

00:14:28,360 --> 00:14:35,709
to be changing what's the plan yeah

00:14:32,050 --> 00:14:37,779
that's a great question I'm not as sure

00:14:35,709 --> 00:14:40,330
these are the types of details that will

00:14:37,779 --> 00:14:42,600
probably surface as we get into working

00:14:40,330 --> 00:14:46,240
with exporters and see what happens to

00:14:42,600 --> 00:14:48,190
serve the namespace scope and that is

00:14:46,240 --> 00:14:52,930
definitely something that we

00:14:48,190 --> 00:14:54,670
see we don't love this reality but the

00:14:52,930 --> 00:14:57,040
reality is that becomes an important

00:14:54,670 --> 00:14:58,870
aspect of the metrics contract is

00:14:57,040 --> 00:15:02,950
actually trying to maintain the exact

00:14:58,870 --> 00:15:05,230
format of the name so that getting into

00:15:02,950 --> 00:15:07,660
that level of detail is something that I

00:15:05,230 --> 00:15:14,140
expect we'll probably find some

00:15:07,660 --> 00:15:17,350
challenges around there is the 4-hour CF

00:15:14,140 --> 00:15:21,990
for Kate's work and sort of the CLI

00:15:17,350 --> 00:15:25,720
experienced we are matching the existing

00:15:21,990 --> 00:15:27,640
Cappy stats endpoint so that provides

00:15:25,720 --> 00:15:31,960
what are usually referred to as the

00:15:27,640 --> 00:15:37,450
container metrics in CF and it uses the

00:15:31,960 --> 00:15:40,540
log cache API formats and we have a new

00:15:37,450 --> 00:15:42,880
component that is a for Kate's only

00:15:40,540 --> 00:15:48,280
component called the metric proxy and

00:15:42,880 --> 00:15:51,790
the metric proxy takes requests from the

00:15:48,280 --> 00:15:53,590
stats endpoint essentially it then goes

00:15:51,790 --> 00:15:55,990
and scrapes the cubelet for those

00:15:53,590 --> 00:15:58,960
metrics converts them to the log cache

00:15:55,990 --> 00:16:01,270
format and kind of acts as a translation

00:15:58,960 --> 00:16:03,910
layer so the container metrics

00:16:01,270 --> 00:16:07,410
themselves are going to continue to

00:16:03,910 --> 00:16:10,180
match the existing stats API and that

00:16:07,410 --> 00:16:15,550
that probably covers some cases for

00:16:10,180 --> 00:16:16,740
autoscaler but also probably not all I

00:16:15,550 --> 00:16:20,320
know autoscaler

00:16:16,740 --> 00:16:22,270
is sort of a piece of functionality

00:16:20,320 --> 00:16:25,200
where each vendor kind of does it a

00:16:22,270 --> 00:16:28,900
little bit different and that will maybe

00:16:25,200 --> 00:16:30,910
continue to be the case kubernetes has

00:16:28,900 --> 00:16:35,350
some auto scaling tools and things that

00:16:30,910 --> 00:16:37,740
we can leverage heaven I saw that note

00:16:35,350 --> 00:16:39,880
in the in the agenda so I've been

00:16:37,740 --> 00:16:43,030
researching that a little bit just in

00:16:39,880 --> 00:16:45,430
preparation for this call but I haven't

00:16:43,030 --> 00:16:47,980
thought through too much sort of exactly

00:16:45,430 --> 00:16:51,880
how we want to bring that to the

00:16:47,980 --> 00:16:53,970
community like I said there's it

00:16:51,880 --> 00:16:56,830
probably gets into some vendor specific

00:16:53,970 --> 00:16:59,920
implementations around how we how we do

00:16:56,830 --> 00:17:02,260
that but the

00:16:59,920 --> 00:17:05,310
container metrics is something we're

00:17:02,260 --> 00:17:12,670
going to keep the existing api's on and

00:17:05,310 --> 00:17:16,540
match them as as the log cache API and

00:17:12,670 --> 00:17:20,470
would that loCash api be the expected

00:17:16,540 --> 00:17:23,620
end point for some autoscaler peat and

00:17:20,470 --> 00:17:26,170
open source event a specific one to get

00:17:23,620 --> 00:17:28,030
the metrics one or would it be expected

00:17:26,170 --> 00:17:30,730
that you go directly to the kubernetes

00:17:28,030 --> 00:17:33,970
api or would it be expected that you

00:17:30,730 --> 00:17:36,700
maybe rely on a promiscuous being there

00:17:33,970 --> 00:17:38,710
and being available in basically every

00:17:36,700 --> 00:17:40,590
distribution and you could also go to

00:17:38,710 --> 00:17:43,440
that promiscuous

00:17:40,590 --> 00:17:46,840
yeah that's a good question I think that

00:17:43,440 --> 00:17:50,590
a basic autoscaler

00:17:46,840 --> 00:17:52,840
could use that existing law cache API

00:17:50,590 --> 00:17:56,610
really the stat endpoint I think is the

00:17:52,840 --> 00:18:00,040
is the endpoint that a community

00:17:56,610 --> 00:18:03,670
autoscaler would be likely to use and

00:18:00,040 --> 00:18:05,170
that because we match the API I don't

00:18:03,670 --> 00:18:07,660
see any reason why that couldn't be

00:18:05,170 --> 00:18:13,150
brought over as sort of a lift and shift

00:18:07,660 --> 00:18:14,860
component I think if you wanted to if

00:18:13,150 --> 00:18:19,060
vendors want to do an implementation

00:18:14,860 --> 00:18:21,580
that provides auto scaling on metrics

00:18:19,060 --> 00:18:23,970
outside of container metrics component

00:18:21,580 --> 00:18:27,130
metrics or custom map metrics that we

00:18:23,970 --> 00:18:30,360
probably will take the more kubernetes

00:18:27,130 --> 00:18:34,570
native or out and you know extend the

00:18:30,360 --> 00:18:36,730
horizontal pod autoscaler and the

00:18:34,570 --> 00:18:38,860
existence of either Prometheus server or

00:18:36,730 --> 00:18:41,770
there's a component called the metric

00:18:38,860 --> 00:18:44,020
server as well and the kubernetes

00:18:41,770 --> 00:18:45,640
ecosystem like I said haven't thought

00:18:44,020 --> 00:18:48,700
through too much of what that might look

00:18:45,640 --> 00:18:52,260
like but that would be kind of the

00:18:48,700 --> 00:18:52,260
approach I would expect

00:18:59,010 --> 00:19:04,240
so in the old CAF world up offer that

00:19:02,080 --> 00:19:07,960
was I think this upcoming project a

00:19:04,240 --> 00:19:11,380
metric store that's out for for CFO

00:19:07,960 --> 00:19:14,770
gates right that is out for CF for gates

00:19:11,380 --> 00:19:19,200
the metric store does interrupt with

00:19:14,770 --> 00:19:21,910
prompt QL so our feeling is that a

00:19:19,200 --> 00:19:24,780
Prometheus server gives sort of the

00:19:21,910 --> 00:19:28,000
equivalent functionality for

00:19:24,780 --> 00:19:29,860
dashboarding and alerting and has a

00:19:28,000 --> 00:19:33,220
little bit of additional functionality

00:19:29,860 --> 00:19:36,460
around Federation so that's kind of our

00:19:33,220 --> 00:19:38,440
approach in the open source we are

00:19:36,460 --> 00:19:40,390
leveraging some of that work on the

00:19:38,440 --> 00:19:44,950
metric store for some of our commercial

00:19:40,390 --> 00:19:47,830
products but in the open source we think

00:19:44,950 --> 00:19:51,040
that CN CF project Prometheus is

00:19:47,830 --> 00:20:15,460
probably the expected open source route

00:19:51,040 --> 00:20:18,880
to take and so I I haven't really looked

00:20:15,460 --> 00:20:20,860
into see if cait's recently but Adam

00:20:18,880 --> 00:20:23,920
about what you said sounded like you're

00:20:20,860 --> 00:20:25,930
in in like the early stages of coming up

00:20:23,920 --> 00:20:28,630
with with that architecture and so it's

00:20:25,930 --> 00:20:32,470
not like that people could already touch

00:20:28,630 --> 00:20:35,380
some of that when they take on CF on on

00:20:32,470 --> 00:20:39,910
cool notice when we are in the early

00:20:35,380 --> 00:20:42,580
stages we are near complete we're in the

00:20:39,910 --> 00:20:46,120
early stages of the component metrics

00:20:42,580 --> 00:20:49,300
into the Prometheus server and you know

00:20:46,120 --> 00:20:51,850
that dock is is put out there to really

00:20:49,300 --> 00:20:55,810
start that enable man with the with each

00:20:51,850 --> 00:20:58,750
of the teams we are near complete and

00:20:55,810 --> 00:21:01,900
integrated on that metric proxy

00:20:58,750 --> 00:21:04,150
component so that the existing stats

00:21:01,900 --> 00:21:07,810
endpoint replicates those container

00:21:04,150 --> 00:21:09,040
metrics and are accurate to what is from

00:21:07,810 --> 00:21:10,900
the cubelet

00:21:09,040 --> 00:21:13,600
so I think in the next couple weeks

00:21:10,900 --> 00:21:18,220
we'll see that get integrated into CF or

00:21:13,600 --> 00:21:20,320
gates so kind of two different pieces

00:21:18,220 --> 00:21:22,570
that we're looking at and CF for kids

00:21:20,320 --> 00:21:27,870
one is almost done and then one is kind

00:21:22,570 --> 00:21:27,870
of just getting started okay cool

00:21:37,620 --> 00:21:53,110
so any more questions to Adam while we

00:21:40,600 --> 00:21:56,560
have him here it's not thank you very

00:21:53,110 --> 00:22:01,180
much Adam for summarizing what's up with

00:21:56,560 --> 00:22:02,530
metrics yeah thanks Adam look forward to

00:22:01,180 --> 00:22:05,110
putting the screws to the component

00:22:02,530 --> 00:22:07,270
teams and getting them to to get on

00:22:05,110 --> 00:22:09,520
board and to try this out glad we're

00:22:07,270 --> 00:22:13,810
gonna work with Cappy to kind of pilot

00:22:09,520 --> 00:22:17,050
out this pathway and that essentially

00:22:13,810 --> 00:22:18,940
means we have a situation that we didn't

00:22:17,050 --> 00:22:22,510
have before which is like the meeting is

00:22:18,940 --> 00:22:24,520
not coming to an end but we could still

00:22:22,510 --> 00:22:28,870
in fact look at the voting and pick a

00:22:24,520 --> 00:22:31,690
second of it as it looks like now we

00:22:28,870 --> 00:22:36,480
have all of your future gaps between CFO

00:22:31,690 --> 00:22:41,940
Bosch and CFO gates 1.0 heavily voted by

00:22:36,480 --> 00:22:41,940
the former Bosch folks from s AP I guess

00:22:43,260 --> 00:22:53,410
yeah that's a suggestion from me

00:22:47,530 --> 00:22:55,450
initially because I was actually not

00:22:53,410 --> 00:22:57,760
able to provide an answer to this when

00:22:55,450 --> 00:23:03,880
when people were asking me this like hey

00:22:57,760 --> 00:23:06,810
once a 1.0 of CFO gates is released what

00:23:03,880 --> 00:23:10,240
are the gaps that we certainly know that

00:23:06,810 --> 00:23:13,420
will be there and like we accepted for a

00:23:10,240 --> 00:23:17,890
1.0 version we have a list for these

00:23:13,420 --> 00:23:19,660
things does every project have a list of

00:23:17,890 --> 00:23:22,510
these things I don't know like I'm

00:23:19,660 --> 00:23:26,050
feeling there should be like a central

00:23:22,510 --> 00:23:30,250
place or we said like one point door

00:23:26,050 --> 00:23:32,860
will by no means fulfill these kind of

00:23:30,250 --> 00:23:41,530
features or things that CFO Bosch does

00:23:32,860 --> 00:23:45,170
or did is that the kind of milestone VM

00:23:41,530 --> 00:23:49,030
we're planning for at the end of 2020

00:23:45,170 --> 00:23:51,230
though in the partners and customers

00:23:49,030 --> 00:23:53,960
webinars that were kind of two dates one

00:23:51,230 --> 00:23:57,520
was end of April for having CF push

00:23:53,960 --> 00:24:00,290
experience one was end of 2020 that was

00:23:57,520 --> 00:24:03,700
CF a Bosch feature parity I'm presuming

00:24:00,290 --> 00:24:03,700
it's it's the latter

00:24:05,150 --> 00:24:12,260
I guess the timeline question is more

00:24:07,910 --> 00:24:16,160
something for for a sigh Eric and the VM

00:24:12,260 --> 00:24:18,140
er folks I just heard a 1.0 being

00:24:16,160 --> 00:24:22,610
referenced like in the previous meetings

00:24:18,140 --> 00:24:24,440
at some point um so I guess whatever we

00:24:22,610 --> 00:24:27,980
want to declare at whatever point in

00:24:24,440 --> 00:24:30,890
time at one point oh like what would be

00:24:27,980 --> 00:24:34,990
the gap but like timeline is also a very

00:24:30,890 --> 00:24:34,990
fair question concerning the same thing

00:24:39,580 --> 00:24:43,870
yeah I I mean I think you know

00:24:44,700 --> 00:24:53,460
there's definitely we have some leeway

00:24:49,440 --> 00:24:55,560
in deciding what we want a 1.0 to mean

00:24:53,460 --> 00:24:57,570
for CF frigates I don't think that'll be

00:24:55,560 --> 00:25:00,360
full feature feature parity with Bosch

00:24:57,570 --> 00:25:02,130
and that that honestly will be distinct

00:25:00,360 --> 00:25:04,710
from whatever a commercial distribution

00:25:02,130 --> 00:25:05,820
VMware is providing on top of that so

00:25:04,710 --> 00:25:07,710
those aren't necessarily coupled

00:25:05,820 --> 00:25:09,030
together because that's personal

00:25:07,710 --> 00:25:12,030
distribution versus the open source

00:25:09,030 --> 00:25:13,920
project so I don't think you know as

00:25:12,030 --> 00:25:15,420
we've been getting CF rickets just to

00:25:13,920 --> 00:25:17,400
come together and to get the basic

00:25:15,420 --> 00:25:19,080
experience working that's really been

00:25:17,400 --> 00:25:21,120
the priority and thinking about in more

00:25:19,080 --> 00:25:23,490
detail about what what might be in or

00:25:21,120 --> 00:25:25,890
out for a 1.0 of that hasn't been on the

00:25:23,490 --> 00:25:27,600
horizon as much now that that's coming

00:25:25,890 --> 00:25:31,130
together I think that's going to be a

00:25:27,600 --> 00:25:33,390
more important set of milestones to

00:25:31,130 --> 00:25:35,640
consolidate and broadcast to the

00:25:33,390 --> 00:25:36,900
community and honestly to discuss with

00:25:35,640 --> 00:25:42,660
all of you about like what we think that

00:25:36,900 --> 00:25:44,100
that would mean this will bring up the

00:25:42,660 --> 00:25:46,200
fact that we have to reconsider

00:25:44,100 --> 00:25:50,450
certification right because we're going

00:25:46,200 --> 00:25:53,430
to have a couple of ways to deliver this

00:25:50,450 --> 00:25:56,970
at least this you know even up to the

00:25:53,430 --> 00:25:59,640
end of this year with cube CF and CF 4k

00:25:56,970 --> 00:26:01,710
8 is one going to be a certified

00:25:59,640 --> 00:26:04,500
distribution or both going to be a

00:26:01,710 --> 00:26:07,070
certified distribution and so what will

00:26:04,500 --> 00:26:08,630
be the criteria for

00:26:07,070 --> 00:26:10,850
feature completeness like the whole

00:26:08,630 --> 00:26:13,669
whole purpose behind CF certification is

00:26:10,850 --> 00:26:15,649
that you know if you push things to 1 CF

00:26:13,669 --> 00:26:17,179
it's going to behave the same way as if

00:26:15,649 --> 00:26:22,190
you push it to another so it there's the

00:26:17,179 --> 00:26:24,559
vendor independence there do we have to

00:26:22,190 --> 00:26:26,179
start looking at how we define I mean

00:26:24,559 --> 00:26:29,360
this is I know I brought this up before

00:26:26,179 --> 00:26:32,990
but should we should we look at test

00:26:29,360 --> 00:26:35,330
based criteria for certification as

00:26:32,990 --> 00:26:37,899
opposed to code based certificate

00:26:35,330 --> 00:26:40,399
criteria for certification

00:26:37,899 --> 00:26:42,289
sorry that's a massive diversion from

00:26:40,399 --> 00:26:46,610
our topic here but I thought it's

00:26:42,289 --> 00:26:49,519
related yeah I mean I think that that

00:26:46,610 --> 00:26:52,070
that would make sense in terms of

00:26:49,519 --> 00:26:53,960
adhering more closely to actual

00:26:52,070 --> 00:26:56,360
behavioral specifications and not the

00:26:53,960 --> 00:26:57,649
implementation of the system and you

00:26:56,360 --> 00:27:01,009
know I think for many years we've been

00:26:57,649 --> 00:27:03,740
in a position where we effectively had

00:27:01,009 --> 00:27:04,879
only that one implementation of CF and

00:27:03,740 --> 00:27:08,149
so it's been easy to couple them

00:27:04,879 --> 00:27:10,250
together that said that's that would

00:27:08,149 --> 00:27:13,789
require a lot of work I want to make

00:27:10,250 --> 00:27:15,830
that transition tons of work I totally

00:27:13,789 --> 00:27:16,789
recognize that I think that's why we

00:27:15,830 --> 00:27:19,250
haven't done it so far

00:27:16,789 --> 00:27:21,470
yeah I think that's why certification

00:27:19,250 --> 00:27:24,220
has been chipped this code because we

00:27:21,470 --> 00:27:27,399
haven't got enough coverage to really

00:27:24,220 --> 00:27:29,809
define the certification like as

00:27:27,399 --> 00:27:31,730
explicitly as just shipping you know you

00:27:29,809 --> 00:27:36,009
know what I mean yeah but I think we we

00:27:31,730 --> 00:27:38,419
will have to do that Chris at some point

00:27:36,009 --> 00:27:41,059
start building the certification around

00:27:38,419 --> 00:27:43,840
acceptance testing of some kind or

00:27:41,059 --> 00:27:47,539
automated test you know the test Suites

00:27:43,840 --> 00:27:49,789
you know we just have to mentally carve

00:27:47,539 --> 00:27:51,379
out a chunk of work for us to to do that

00:27:49,789 --> 00:27:54,169
we've got a lot of this stuff there and

00:27:51,379 --> 00:27:57,429
there are smoke tests that have come in

00:27:54,169 --> 00:28:00,700
just on the cab call the last cab call

00:27:57,429 --> 00:28:05,080
you know we saw Rijkswaterstaat and

00:28:00,700 --> 00:28:09,860
t-mobile have their own Suites of of

00:28:05,080 --> 00:28:11,210
smoke tests and and system tests and it

00:28:09,860 --> 00:28:14,360
would be nice if we could consolidate

00:28:11,210 --> 00:28:17,620
those efforts into one test framework

00:28:14,360 --> 00:28:17,620
that that is

00:28:17,809 --> 00:28:23,359
the the one true test dream work yeah

00:28:21,649 --> 00:28:25,639
and I think we've had that backstop in

00:28:23,359 --> 00:28:26,960
cats for many years as well but they

00:28:25,639 --> 00:28:29,119
they have been that behaved real

00:28:26,960 --> 00:28:31,009
specification that we've tried to adhere

00:28:29,119 --> 00:28:32,090
to as a community but maybe that makes

00:28:31,009 --> 00:28:34,279
them to start there in terms of

00:28:32,090 --> 00:28:37,729
formalizing those notions of the

00:28:34,279 --> 00:28:40,429
especially the developer facing behavior

00:28:37,729 --> 00:28:42,619
or the platform yeah and and but there

00:28:40,429 --> 00:28:44,749
but we have to be a little more I think

00:28:42,619 --> 00:28:47,359
and this is speaking secondhand because

00:28:44,749 --> 00:28:50,059
I don't deal with cats a lot glad you

00:28:47,359 --> 00:28:51,710
could jump in but we felt that there

00:28:50,059 --> 00:28:56,049
isn't quite enough coverage there too

00:28:51,710 --> 00:29:00,519
and they're they're a little bit loose

00:28:56,049 --> 00:29:03,669
and they we've added additional tests

00:29:00,519 --> 00:29:06,859
for our own verification of cube CF and

00:29:03,669 --> 00:29:10,039
I think it's time to put them all into

00:29:06,859 --> 00:29:15,889
one place where we can agree on what the

00:29:10,039 --> 00:29:18,830
desired behavior is I honestly think

00:29:15,889 --> 00:29:21,440
that the agreeing part might be the

00:29:18,830 --> 00:29:23,269
hardest work here to do I'm not sure how

00:29:21,440 --> 00:29:26,899
much experience you all have with the

00:29:23,269 --> 00:29:30,320
world of OpenStack we're like once upon

00:29:26,899 --> 00:29:33,499
a time they started the efforts to hey

00:29:30,320 --> 00:29:35,899
let's build a test suite to like put

00:29:33,499 --> 00:29:39,649
behavior based tests in there and define

00:29:35,899 --> 00:29:41,779
what OpenStack certified means and to

00:29:39,649 --> 00:29:44,119
cut a long story short in the end like

00:29:41,779 --> 00:29:46,580
almost nothing was in there because

00:29:44,119 --> 00:29:49,009
people could not agree on what it means

00:29:46,580 --> 00:29:51,019
to be an open stack distribution and the

00:29:49,009 --> 00:29:54,139
only tests in there we're ridiculously

00:29:51,019 --> 00:29:57,139
are covering only like very little

00:29:54,139 --> 00:30:01,460
things of the API like hey create a VM

00:29:57,139 --> 00:30:07,269
ah delete the VM right maybe attach to

00:30:01,460 --> 00:30:11,299
disk that's it so like this is a real

00:30:07,269 --> 00:30:13,969
danger here and like potentially that

00:30:11,299 --> 00:30:18,320
that seems like a whole like different

00:30:13,969 --> 00:30:20,659
discussion going on which is what I

00:30:18,320 --> 00:30:23,839
should have in a different place with

00:30:20,659 --> 00:30:25,429
much more reasonable people I think we

00:30:23,839 --> 00:30:29,259
just kind of trust each other not to be

00:30:25,429 --> 00:30:31,080
idiots about it I I'm pretty sure

00:30:29,259 --> 00:30:35,159
everyone I've talked to you guys

00:30:31,080 --> 00:30:36,539
as a pretty a pretty consistent idea so

00:30:35,159 --> 00:30:39,899
I may be maybe I'm just being optimistic

00:30:36,539 --> 00:30:41,250
but I think we won't have the same

00:30:39,899 --> 00:30:44,370
problem because we at least do have cats

00:30:41,250 --> 00:30:46,769
as a starting place I know we've got

00:30:44,370 --> 00:30:51,539
Cube CF stuff like the brain what we

00:30:46,769 --> 00:30:53,220
call the brains tests and and this it's

00:30:51,539 --> 00:30:55,019
I can't I can't even remember which is

00:30:53,220 --> 00:30:59,429
which is ours and which is community

00:30:55,019 --> 00:31:00,779
sits as well sorry Vlad is taking off so

00:30:59,429 --> 00:31:03,690
we want people to help me out here or

00:31:00,779 --> 00:31:05,909
there's Cappy tests or something then

00:31:03,690 --> 00:31:07,470
yeah so we I mean we should definitely

00:31:05,909 --> 00:31:10,169
start with the things that we already

00:31:07,470 --> 00:31:13,049
agree on like that are already existing

00:31:10,169 --> 00:31:15,360
and and see if we can make up a

00:31:13,049 --> 00:31:17,760
certification criteria out of that and

00:31:15,360 --> 00:31:19,830
then and then and then fix that so

00:31:17,760 --> 00:31:21,570
rather than starting a brand new project

00:31:19,830 --> 00:31:23,010
because I mean some things are gonna

00:31:21,570 --> 00:31:25,830
change right we're gonna hit some things

00:31:23,010 --> 00:31:28,139
as we move to more kubernetes idiomatic

00:31:25,830 --> 00:31:29,700
there are going to be some behaviors of

00:31:28,139 --> 00:31:31,260
the of the Bosch based system which we

00:31:29,700 --> 00:31:34,889
intentionally want to leave behind I

00:31:31,260 --> 00:31:36,870
totally get it and that's I think we

00:31:34,889 --> 00:31:40,169
would we'd all want to move on the same

00:31:36,870 --> 00:31:41,549
things and yeah we'll have arguments

00:31:40,169 --> 00:31:43,070
about it I'm sure but I don't think it's

00:31:41,549 --> 00:31:45,870
going to be crazy

00:31:43,070 --> 00:31:47,370
so I mean kubernetes has done something

00:31:45,870 --> 00:31:49,409
similar in terms of having conformance

00:31:47,370 --> 00:31:53,519
tests and that seems like it's been

00:31:49,409 --> 00:31:57,419
fairly broadly useful across the breadth

00:31:53,519 --> 00:31:59,460
of kubernetes distributions marco do you

00:31:57,419 --> 00:32:01,470
have a sense give any context on that or

00:31:59,460 --> 00:32:04,130
like how it compares to the kind of

00:32:01,470 --> 00:32:07,740
failed effort on the OpenStack side um

00:32:04,130 --> 00:32:09,750
no I know this suite exists I know that

00:32:07,740 --> 00:32:11,460
the s AP Gardener project for example is

00:32:09,750 --> 00:32:14,159
a certified kinetise project

00:32:11,460 --> 00:32:16,350
I'm not for like how useful it actually

00:32:14,159 --> 00:32:18,480
is for people to like switch between

00:32:16,350 --> 00:32:24,120
communities distributions or whatever so

00:32:18,480 --> 00:32:30,000
I'm not I'm not sure I think

00:32:24,120 --> 00:32:32,730
the flipside some of the like kubernetes

00:32:30,000 --> 00:32:35,550
capabilities the VMware has been baking

00:32:32,730 --> 00:32:36,960
into vSphere 7s what part of what

00:32:35,550 --> 00:32:38,940
they're calling Project Pacific they've

00:32:36,960 --> 00:32:41,640
failed some of those conformance testing

00:32:38,940 --> 00:32:43,020
I think relating to volume attachments

00:32:41,640 --> 00:32:45,840
or something so there's got to be some

00:32:43,020 --> 00:32:52,290
meat there if there's something to fail

00:32:45,840 --> 00:32:54,030
I think the project Pacific is sort of

00:32:52,290 --> 00:32:55,800
known failures because it doesn't use

00:32:54,030 --> 00:32:59,070
the cubelet it uses a different

00:32:55,800 --> 00:33:02,130
component but I think it's generally

00:32:59,070 --> 00:33:04,920
been I know I'm pivotal container

00:33:02,130 --> 00:33:06,810
service we've found it useful bar

00:33:04,920 --> 00:33:08,430
although admittedly we kind of like do

00:33:06,810 --> 00:33:10,020
it at the last minute to be like how are

00:33:08,430 --> 00:33:16,680
you passing the conformance test before

00:33:10,020 --> 00:33:19,950
we release it but it is it it is also

00:33:16,680 --> 00:33:23,640
kind of just to get the stamp let's say

00:33:19,950 --> 00:33:25,560
we're conformant I don't I've never

00:33:23,640 --> 00:33:27,450
heard of like specific functionality we

00:33:25,560 --> 00:33:31,260
missed or caught through the conformance

00:33:27,450 --> 00:33:33,780
test same same with Sousa cast cat's

00:33:31,260 --> 00:33:35,840
platform it's it's something we hope we

00:33:33,780 --> 00:33:38,640
go through to get the certification

00:33:35,840 --> 00:33:43,800
never seems to catch anything catch us

00:33:38,640 --> 00:33:47,310
out but what that might mean it's we're

00:33:43,800 --> 00:33:50,430
just lucky or it might mean that it

00:33:47,310 --> 00:33:55,340
doesn't cover quite enough I say my my I

00:33:50,430 --> 00:33:57,840
have very few distribution related

00:33:55,340 --> 00:33:59,010
problems going from one kubernetes to

00:33:57,840 --> 00:34:02,100
the other because we test on several

00:33:59,010 --> 00:34:07,450
different communities platforms so maybe

00:34:02,100 --> 00:34:10,450
it is doing its job on the

00:34:07,450 --> 00:34:12,609
just takes part of Marco asked who how

00:34:10,450 --> 00:34:15,849
would we we will be document this will

00:34:12,609 --> 00:34:19,409
this be owned by CFO case or each team

00:34:15,849 --> 00:34:22,060
will have it in terms of the differences

00:34:19,409 --> 00:34:24,339
the the we talked about this within the

00:34:22,060 --> 00:34:25,960
team so goals were thinking of using

00:34:24,339 --> 00:34:29,099
either known issues or some

00:34:25,960 --> 00:34:32,349
documentation to highlight the changes

00:34:29,099 --> 00:34:35,740
differences actually - between between

00:34:32,349 --> 00:34:37,629
the bar old and the case well ideally if

00:34:35,740 --> 00:34:39,460
we get to have it in civil case it's

00:34:37,629 --> 00:34:41,859
because that's where you know most of

00:34:39,460 --> 00:34:43,950
our users will go won't look for then

00:34:41,859 --> 00:34:46,690
individually going and looking for okay

00:34:43,950 --> 00:34:48,940
so we but yeah so that that's the first

00:34:46,690 --> 00:34:57,700
hypothesis where we want to store that

00:34:48,940 --> 00:35:01,240
in c4k documentation somewhere and the

00:34:57,700 --> 00:35:04,119
expectation would be that like starting

00:35:01,240 --> 00:35:07,270
I don't know now people start adding

00:35:04,119 --> 00:35:10,450
their things in this in this place or

00:35:07,270 --> 00:35:13,089
what would be your expectation in when a

00:35:10,450 --> 00:35:17,020
better documentation for these gaps for

00:35:13,089 --> 00:35:21,569
these known gaps would happen I think it

00:35:17,020 --> 00:35:26,619
would be the latter I think we're still

00:35:21,569 --> 00:35:27,910
we're still working on building right so

00:35:26,619 --> 00:35:29,650
we're still integrating with components

00:35:27,910 --> 00:35:34,030
it's a little bit earlier but I

00:35:29,650 --> 00:35:35,650
anticipate you know you know if you like

00:35:34,030 --> 00:35:40,050
a month maybe two we'll start actually

00:35:35,650 --> 00:35:48,910
documenting it as I answer your question

00:35:40,050 --> 00:35:52,619
yeah drop in five minutes I just wanted

00:35:48,910 --> 00:35:54,339
to add that I'm hoping to demo tomorrow

00:35:52,619 --> 00:35:57,220
see if Akkad's

00:35:54,339 --> 00:35:59,770
cap call which is I believe tomorrow

00:35:57,220 --> 00:36:00,099
right yes that's right thank you very

00:35:59,770 --> 00:36:03,790
much

00:36:00,099 --> 00:36:07,630
I was gonna yeah we're very close to the

00:36:03,790 --> 00:36:11,980
CF push with bill packs so let's the PR

00:36:07,630 --> 00:36:14,470
is almost close to done from Cappy so

00:36:11,980 --> 00:36:18,420
yeah so looking forward to that for

00:36:14,470 --> 00:36:21,240
tomorrow whoo yeah excellent

00:36:18,420 --> 00:36:25,470
yeah reminder everyone

00:36:21,240 --> 00:36:27,780
there's a cab call tomorrow trying to

00:36:25,470 --> 00:36:29,990
remember the time 8 a.m. Pacific I

00:36:27,780 --> 00:36:29,990
believe

00:36:30,960 --> 00:36:36,150
which I guess is still different for the

00:36:32,940 --> 00:36:41,490
folks from Europe idiom Eastern 4:00

00:36:36,150 --> 00:36:46,680
p.m. Central European Time I think 8

00:36:41,490 --> 00:36:54,240
a.m. Pacific yeah I put all the times in

00:36:46,680 --> 00:36:56,040
the reminder to see if DEP and and yes I

00:36:54,240 --> 00:36:58,589
you're the only dog and pony show

00:36:56,040 --> 00:37:06,440
tomorrow okay sounds good

00:36:58,589 --> 00:37:06,440
thanks okay come on in come on in

00:37:07,390 --> 00:37:14,450
so any last-minute questions to the

00:37:12,080 --> 00:37:16,870
current topic before I also need sir to

00:37:14,450 --> 00:37:16,870
drop off

00:37:17,510 --> 00:37:22,310
so I guess we can keep it a little bit

00:37:20,300 --> 00:37:26,270
shorter today but I think we've managed

00:37:22,310 --> 00:37:29,840
to to cover two topics so I guess call

00:37:26,270 --> 00:37:32,150
to to this round to submit new topics to

00:37:29,840 --> 00:37:38,390
to actually talk about because there I

00:37:32,150 --> 00:37:42,560
guess back to to for now so feel free to

00:37:38,390 --> 00:37:45,880
add your own choices to the poll and see

00:37:42,560 --> 00:37:45,880
them getting a poll that hopefully

00:37:45,900 --> 00:37:53,300
so with that if there's no last-minute

00:37:49,320 --> 00:37:53,300
topics thank you very much everybody and

00:37:53,690 --> 00:37:58,980
talk to you next time or tomorrow in in

00:37:57,270 --> 00:38:01,609
the Capcom

00:37:58,980 --> 00:38:01,609

YouTube URL: https://www.youtube.com/watch?v=WKIDPjXdkuQ


