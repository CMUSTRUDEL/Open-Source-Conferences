Title: cf-for-k8s SIG (Aug 2020)
Publication date: 2020-08-06
Playlist: Cloud Foundry for Kubernetes Monthly SIG
Description: 
	
Captions: 
	00:04:23,680 --> 00:04:28,080
okay hey

00:04:24,320 --> 00:04:43,840
can anybody hear me hey mario

00:04:28,080 --> 00:04:43,840
hi mario

00:05:44,400 --> 00:05:48,400
hey everyone is anyone saying or

00:05:46,960 --> 00:05:52,160
anything or

00:05:48,400 --> 00:05:55,120
are my speakers you sound great to me

00:05:52,160 --> 00:05:55,120
okay i can hear you too

00:06:00,479 --> 00:06:07,440
it's just a quiet crowd no parent yet

00:06:04,479 --> 00:06:07,440
oh there's bear of course

00:06:27,600 --> 00:06:38,880
hi there hello bird

00:06:36,000 --> 00:06:38,880
hey all right

00:06:42,800 --> 00:06:49,039
hi so let's see

00:06:46,000 --> 00:06:52,080
we have flavio on we have mario on

00:06:49,039 --> 00:06:54,319
and we have rawhid on

00:06:52,080 --> 00:06:56,160
so our speakers for today are on the

00:06:54,319 --> 00:06:58,639
call already but i guess we'll

00:06:56,160 --> 00:07:03,840
give it another minute or two um for

00:06:58,639 --> 00:07:03,840
people to drop in

00:07:14,639 --> 00:07:21,039
so i guess while we are waiting so um

00:07:18,000 --> 00:07:24,240
today flavio will uh talk about

00:07:21,039 --> 00:07:25,520
our back profiles for kubernetes um that

00:07:24,240 --> 00:07:27,840
are cf-like

00:07:25,520 --> 00:07:31,840
and then we have uh mario and rohit on

00:07:27,840 --> 00:07:31,840
to talk about uh quark secret

00:07:36,080 --> 00:07:39,680
probably we'll wait another minute and

00:07:38,560 --> 00:07:42,960
then

00:07:39,680 --> 00:07:45,280
i guess get started recording is already

00:07:42,960 --> 00:07:45,280
triggered

00:08:35,279 --> 00:08:39,120
hey four hour four minutes into the

00:08:37,599 --> 00:08:41,839
meeting so i guess

00:08:39,120 --> 00:08:42,399
uh welcome again everybody to this

00:08:41,839 --> 00:08:44,880
week's

00:08:42,399 --> 00:08:45,519
um special interest group called cloud

00:08:44,880 --> 00:08:48,959
foundry on

00:08:45,519 --> 00:08:52,000
kubernetes um today we have

00:08:48,959 --> 00:08:52,399
three presenters so flavio uh castelli

00:08:52,000 --> 00:08:55,680
from

00:08:52,399 --> 00:08:58,320
souza is going to talk about um cf like

00:08:55,680 --> 00:09:01,519
our bug profiles for kubernetes and then

00:08:58,320 --> 00:09:03,920
we have mario romano and rohit on

00:09:01,519 --> 00:09:05,120
also from souza to talk about cork

00:09:03,920 --> 00:09:07,360
secrets

00:09:05,120 --> 00:09:08,800
i'm not sure if you folks have any

00:09:07,360 --> 00:09:12,000
discussion around who

00:09:08,800 --> 00:09:15,519
would start but leave it up to you

00:09:12,000 --> 00:09:18,480
to unmute and take us to

00:09:15,519 --> 00:09:18,480
these two topics

00:09:20,959 --> 00:09:25,600
well i think we we can start right if

00:09:23,920 --> 00:09:28,560
love you is not

00:09:25,600 --> 00:09:30,320
i think our presentation is not too long

00:09:28,560 --> 00:09:34,480
so

00:09:30,320 --> 00:09:34,480
yeah right no worries you get more time

00:09:34,839 --> 00:09:50,800
thanks

00:09:37,200 --> 00:09:55,120
so let me try to share my screen

00:09:50,800 --> 00:09:55,120
okay i hope you can see this

00:09:56,800 --> 00:10:01,360
well okay um so we are from project

00:10:00,800 --> 00:10:05,200
quarks

00:10:01,360 --> 00:10:08,399
and we are here to talk about the quarks

00:10:05,200 --> 00:10:10,480
secret operator and quarks is

00:10:08,399 --> 00:10:12,800
the idea behind this was to to build a

00:10:10,480 --> 00:10:15,519
set of operators

00:10:12,800 --> 00:10:15,920
that are working together to manage qcf

00:10:15,519 --> 00:10:18,160
and

00:10:15,920 --> 00:10:20,640
are useful to the cloud foundry

00:10:18,160 --> 00:10:23,760
community

00:10:20,640 --> 00:10:24,880
so each of the individual operators has

00:10:23,760 --> 00:10:30,800
a cad

00:10:24,880 --> 00:10:30,800
which is some kind of a big cid

00:10:30,839 --> 00:10:38,480
um

00:10:33,040 --> 00:10:42,800
strangely this hasn't updated the text

00:10:38,480 --> 00:10:46,480
so we have actually a few of them now

00:10:42,800 --> 00:10:49,760
um and

00:10:46,480 --> 00:10:51,760
um quark shop i think is one of the most

00:10:49,760 --> 00:10:53,920
interesting ones which is about

00:10:51,760 --> 00:10:55,360
making kubernetes jobs reusable and

00:10:53,920 --> 00:10:58,880
storing the output

00:10:55,360 --> 00:11:02,079
also triggering on certain changes

00:10:58,880 --> 00:11:04,160
and some interesting features um

00:11:02,079 --> 00:11:05,440
and then there's quark secret which is

00:11:04,160 --> 00:11:06,079
what we are going to talk about and i

00:11:05,440 --> 00:11:10,560
think this is

00:11:06,079 --> 00:11:12,800
the smallest one of the operators and um

00:11:10,560 --> 00:11:14,800
it's used to generate secrets in cluster

00:11:12,800 --> 00:11:18,079
we also have quark stateful set which

00:11:14,800 --> 00:11:20,320
isn't quite standalone yet it's uh

00:11:18,079 --> 00:11:21,600
but you could run it as a binary outside

00:11:20,320 --> 00:11:24,720
of the cluster

00:11:21,600 --> 00:11:26,959
or that your own docker image um

00:11:24,720 --> 00:11:28,320
and we have the quarks operator which is

00:11:26,959 --> 00:11:31,200
basically taking the

00:11:28,320 --> 00:11:32,320
bosch manifests of the old cf deployment

00:11:31,200 --> 00:11:36,160
and turning that into

00:11:32,320 --> 00:11:40,480
a kubernetes-sized cloud foundry

00:11:36,160 --> 00:11:42,800
um so quark secret um is the one big cid

00:11:40,480 --> 00:11:44,720
and you can choose what type of secret

00:11:42,800 --> 00:11:46,480
form you want to generate

00:11:44,720 --> 00:11:50,160
in the cluster there are passwords

00:11:46,480 --> 00:11:54,160
certificates ssh keys asr key rsa keys

00:11:50,160 --> 00:11:57,680
http basic of configuration right

00:11:54,160 --> 00:12:00,240
and um

00:11:57,680 --> 00:12:01,680
then it will just you will create the

00:12:00,240 --> 00:12:03,519
the customer resource

00:12:01,680 --> 00:12:04,880
belonging to the custom resource

00:12:03,519 --> 00:12:07,600
definition that will

00:12:04,880 --> 00:12:08,560
create a secret in the cluster with that

00:12:07,600 --> 00:12:11,680
content

00:12:08,560 --> 00:12:13,680
and um there's a manual override so if

00:12:11,680 --> 00:12:17,440
the secret already exists

00:12:13,680 --> 00:12:20,560
it won't overwrite it so we use that to

00:12:17,440 --> 00:12:22,000
supply default values in qcf right when

00:12:20,560 --> 00:12:23,839
you

00:12:22,000 --> 00:12:26,480
after deployment manifest with all those

00:12:23,839 --> 00:12:28,720
values you can create them manually

00:12:26,480 --> 00:12:30,160
or if you don't create them quark secret

00:12:28,720 --> 00:12:33,360
will generate them

00:12:30,160 --> 00:12:35,120
for you uh we can also add labels to the

00:12:33,360 --> 00:12:37,600
generated secrets and i think

00:12:35,120 --> 00:12:38,399
annotations which might be useful we

00:12:37,600 --> 00:12:40,720
have a

00:12:38,399 --> 00:12:42,720
special rotation config which you can

00:12:40,720 --> 00:12:45,200
create which will then

00:12:42,720 --> 00:12:46,480
look into the config and take the secret

00:12:45,200 --> 00:12:50,079
which is there

00:12:46,480 --> 00:12:50,079
and rotate that

00:12:50,800 --> 00:12:55,279
we have also featured copy secrets into

00:12:53,200 --> 00:12:59,279
some into other namespaces

00:12:55,279 --> 00:13:01,760
uh which needs some improvement uh we

00:12:59,279 --> 00:13:02,320
can sign certificates either with a

00:13:01,760 --> 00:13:04,079
local

00:13:02,320 --> 00:13:06,720
certificate which you have to provide in

00:13:04,079 --> 00:13:09,839
another secret or with the cluster ca

00:13:06,720 --> 00:13:12,399
which is very useful um

00:13:09,839 --> 00:13:14,880
and finally the operator is built in a

00:13:12,399 --> 00:13:18,839
way that you can start it multiple times

00:13:14,880 --> 00:13:21,760
and each of those can watch multiple

00:13:18,839 --> 00:13:25,600
namespaces

00:13:21,760 --> 00:13:27,600
historically we moved into a standalone

00:13:25,600 --> 00:13:30,160
repo like two months ago

00:13:27,600 --> 00:13:31,440
so this was part of the big quarks

00:13:30,160 --> 00:13:33,120
operator before

00:13:31,440 --> 00:13:35,360
but the code is basically being worked

00:13:33,120 --> 00:13:39,040
on for two years and here's the ul

00:13:35,360 --> 00:13:42,320
if you want um we use

00:13:39,040 --> 00:13:44,720
home as the main front end for users

00:13:42,320 --> 00:13:45,760
so hence for you um you can find us on

00:13:44,720 --> 00:13:48,160
hemhup

00:13:45,760 --> 00:13:49,279
and for example if you add the repo you

00:13:48,160 --> 00:13:51,760
can search it

00:13:49,279 --> 00:13:53,360
you can show the readme for quark secret

00:13:51,760 --> 00:13:56,320
uh here you can

00:13:53,360 --> 00:13:58,160
uh you can drop the versions and devil

00:13:56,320 --> 00:14:01,760
from the search line

00:13:58,160 --> 00:14:02,560
um to see everything and you can just

00:14:01,760 --> 00:14:05,920
install it

00:14:02,560 --> 00:14:07,680
um as a release named cusick

00:14:05,920 --> 00:14:09,040
again you can specify the version or

00:14:07,680 --> 00:14:11,519
just leave it off for the latest

00:14:09,040 --> 00:14:13,760
released one

00:14:11,519 --> 00:14:15,440
and um one thing i wanted to talk about

00:14:13,760 --> 00:14:17,360
because i feel like this comes up a lot

00:14:15,440 --> 00:14:19,440
is crds

00:14:17,360 --> 00:14:20,560
what we currently do when you deploy

00:14:19,440 --> 00:14:23,360
harm is that we

00:14:20,560 --> 00:14:24,480
um apply the customer resources from

00:14:23,360 --> 00:14:26,480
code

00:14:24,480 --> 00:14:28,240
so that's mainly because we had problems

00:14:26,480 --> 00:14:30,079
back then with time2

00:14:28,240 --> 00:14:32,720
and it reduced the amount of scripting

00:14:30,079 --> 00:14:35,920
we needed so we actually have code to

00:14:32,720 --> 00:14:39,120
apply the custom resource definition

00:14:35,920 --> 00:14:39,440
um which is a difficult resource because

00:14:39,120 --> 00:14:42,800
it's

00:14:39,440 --> 00:14:42,800
cluster-wide right so

00:14:43,600 --> 00:14:47,440
you can basically only have one of those

00:14:46,320 --> 00:14:49,600
um

00:14:47,440 --> 00:14:51,600
the fields and types um which most

00:14:49,600 --> 00:14:52,240
people care about like what can the city

00:14:51,600 --> 00:14:55,120
do

00:14:52,240 --> 00:14:56,320
are not actually part of that yaml they

00:14:55,120 --> 00:14:59,199
are part of the type

00:14:56,320 --> 00:15:00,079
your operator registers they i mean if

00:14:59,199 --> 00:15:02,639
you have

00:15:00,079 --> 00:15:03,600
a tight json schema all the fields and

00:15:02,639 --> 00:15:06,160
types

00:15:03,600 --> 00:15:08,399
might be in the cid yammer but it's

00:15:06,160 --> 00:15:10,000
mainly used to define different versions

00:15:08,399 --> 00:15:11,040
how to migrate from one version to

00:15:10,000 --> 00:15:13,839
another

00:15:11,040 --> 00:15:16,240
on some some options and the name of the

00:15:13,839 --> 00:15:16,240
cd

00:15:16,560 --> 00:15:23,199
so um what we what we

00:15:19,760 --> 00:15:27,040
have with hands three is the approach to

00:15:23,199 --> 00:15:27,600
use the cds folder to specify the cds

00:15:27,040 --> 00:15:30,560
and this

00:15:27,600 --> 00:15:32,800
guarantees that the ordering is correct

00:15:30,560 --> 00:15:34,639
like cds are installed first and custom

00:15:32,800 --> 00:15:36,880
resources are installed after

00:15:34,639 --> 00:15:37,759
you can skip this with the skip crds

00:15:36,880 --> 00:15:40,399
flag

00:15:37,759 --> 00:15:41,199
but there is no templating done for your

00:15:40,399 --> 00:15:44,880
cds

00:15:41,199 --> 00:15:44,880
because they want a stable api

00:15:45,440 --> 00:15:48,560
in the cluster before they apply the

00:15:47,040 --> 00:15:50,320
custom resources

00:15:48,560 --> 00:15:52,639
there's also no donation because that

00:15:50,320 --> 00:15:56,399
would be cascading so it would delete

00:15:52,639 --> 00:15:58,560
all your custom resources and it would

00:15:56,399 --> 00:16:00,560
delete all the objects which are owned

00:15:58,560 --> 00:16:02,560
by those custom resources

00:16:00,560 --> 00:16:04,959
however this approach supports updates

00:16:02,560 --> 00:16:07,360
so if you have a new cid

00:16:04,959 --> 00:16:08,079
which has a new version of that cid in

00:16:07,360 --> 00:16:11,759
it it

00:16:08,079 --> 00:16:13,519
would be added to the cid in cluster

00:16:11,759 --> 00:16:15,839
the other approach i talked about is

00:16:13,519 --> 00:16:16,320
wire operator which we do from code

00:16:15,839 --> 00:16:18,560
right

00:16:16,320 --> 00:16:20,079
you can control it by an environment

00:16:18,560 --> 00:16:22,880
flag or command line flag

00:16:20,079 --> 00:16:24,079
and it also supports updates but updates

00:16:22,880 --> 00:16:26,720
but it requires

00:16:24,079 --> 00:16:27,279
special permissions in cluster to work

00:16:26,720 --> 00:16:28,880
like the

00:16:27,279 --> 00:16:31,600
operator that you're running needs to

00:16:28,880 --> 00:16:34,720
have um permissions to create cids

00:16:31,600 --> 00:16:38,000
and of course since this is in code you

00:16:34,720 --> 00:16:41,199
could make this more intelligent if you

00:16:38,000 --> 00:16:42,000
if you have to um and what we currently

00:16:41,199 --> 00:16:45,120
have

00:16:42,000 --> 00:16:48,160
um also have besides

00:16:45,120 --> 00:16:48,959
the apply from code is the template

00:16:48,160 --> 00:16:50,800
folder

00:16:48,959 --> 00:16:52,639
so this is like the old approach which i

00:16:50,800 --> 00:16:55,440
think is time to compatible

00:16:52,639 --> 00:16:56,000
where you have the cd in the template

00:16:55,440 --> 00:16:57,600
folder

00:16:56,000 --> 00:17:00,480
and you have some templating around it

00:16:57,600 --> 00:17:03,440
for example if apply cd is false

00:17:00,480 --> 00:17:04,640
then that template will be rendered so

00:17:03,440 --> 00:17:07,439
that results in

00:17:04,640 --> 00:17:08,640
arbitrary ordering i think um so this

00:17:07,439 --> 00:17:12,160
might not be optimal

00:17:08,640 --> 00:17:13,600
it will also error out if the cid is

00:17:12,160 --> 00:17:16,640
existing

00:17:13,600 --> 00:17:18,000
so it because ham can't create an object

00:17:16,640 --> 00:17:20,640
that's already there

00:17:18,000 --> 00:17:23,039
and it also can't update update existing

00:17:20,640 --> 00:17:25,360
objects

00:17:23,039 --> 00:17:26,160
um yeah so these are the possibilities i

00:17:25,360 --> 00:17:29,200
see for

00:17:26,160 --> 00:17:29,840
updating cds with that little x cross i

00:17:29,200 --> 00:17:32,160
want to give

00:17:29,840 --> 00:17:33,919
them to rohit so you can do the actual

00:17:32,160 --> 00:17:37,840
demo

00:17:33,919 --> 00:17:40,240
uh thanks mario i'll

00:17:37,840 --> 00:17:41,280
okay you need to stop sharing so that i

00:17:40,240 --> 00:17:44,400
can share my screen

00:17:41,280 --> 00:17:44,400
i click it i click it

00:17:44,840 --> 00:17:47,840
okay

00:17:52,080 --> 00:17:59,039
okay i hope my screen is visible

00:17:56,000 --> 00:18:01,919
okay so i've already installed

00:17:59,039 --> 00:18:03,039
the operators the first one here is cf

00:18:01,919 --> 00:18:04,720
operator

00:18:03,039 --> 00:18:07,440
and then the quarks drop and then the

00:18:04,720 --> 00:18:10,320
quark secret

00:18:07,440 --> 00:18:12,320
now i'll be showing all the features of

00:18:10,320 --> 00:18:14,559
quark secret

00:18:12,320 --> 00:18:15,679
and how to use the quark secret

00:18:14,559 --> 00:18:18,320
controller you can also

00:18:15,679 --> 00:18:19,760
uh install quark secret controller

00:18:18,320 --> 00:18:23,039
individually there's no need of

00:18:19,760 --> 00:18:24,640
other operators so right now i'm in the

00:18:23,039 --> 00:18:26,960
examples folder

00:18:24,640 --> 00:18:29,360
and the first feature is generating the

00:18:26,960 --> 00:18:34,880
basic username and password

00:18:29,360 --> 00:18:34,880
auth see how it looks

00:18:35,200 --> 00:18:40,000
so here we have two things uh two

00:18:37,280 --> 00:18:42,960
resources the first one is

00:18:40,000 --> 00:18:45,039
generating password and username with a

00:18:42,960 --> 00:18:48,160
predefined username

00:18:45,039 --> 00:18:48,160
here we specify that

00:18:48,600 --> 00:18:52,799
request.basicauth.username as myuser

00:18:50,720 --> 00:18:54,240
which is predefined so it only generates

00:18:52,799 --> 00:18:57,280
the password

00:18:54,240 --> 00:18:59,440
in the second example uh we didn't

00:18:57,280 --> 00:19:02,480
specify any predefined values so

00:18:59,440 --> 00:19:03,600
it will generate both password and

00:19:02,480 --> 00:19:06,080
username

00:19:03,600 --> 00:19:08,840
so the type should be basic auth and it

00:19:06,080 --> 00:19:11,360
would have two fields username and

00:19:08,840 --> 00:19:15,200
password

00:19:11,360 --> 00:19:15,200
let's try to create this

00:19:22,840 --> 00:19:25,840
okay

00:19:26,240 --> 00:19:30,400
okay now you see there are two secrets

00:19:29,039 --> 00:19:33,360
being created

00:19:30,400 --> 00:19:36,160
the first one is gen secret basic which

00:19:33,360 --> 00:19:38,480
has password and username both generated

00:19:36,160 --> 00:19:40,160
and the second one is gen secret basic

00:19:38,480 --> 00:19:41,760
with user

00:19:40,160 --> 00:19:44,000
which has only the password being

00:19:41,760 --> 00:19:45,840
generated

00:19:44,000 --> 00:19:47,679
one thing i forgot to mention is you can

00:19:45,840 --> 00:19:50,840
you should specify the secret name

00:19:47,679 --> 00:19:53,280
in which the generated stuff needs to be

00:19:50,840 --> 00:19:55,440
there

00:19:53,280 --> 00:19:56,640
the next example would be generating

00:19:55,440 --> 00:19:59,919
certificates

00:19:56,640 --> 00:20:01,600
it's similar so

00:19:59,919 --> 00:20:02,880
you just need to give the parameters

00:20:01,600 --> 00:20:03,919
that are required for the certificate

00:20:02,880 --> 00:20:05,919
generation

00:20:03,919 --> 00:20:07,039
alternative names common name is your

00:20:05,919 --> 00:20:09,280
signup type

00:20:07,039 --> 00:20:12,159
and then the secret name in which it

00:20:09,280 --> 00:20:12,159
should be generated

00:20:16,720 --> 00:20:20,320
so you see there's a secret being

00:20:18,480 --> 00:20:23,760
generated in secret

00:20:20,320 --> 00:20:26,480
and it has the generated stuff

00:20:23,760 --> 00:20:28,960
okay so the next feature would be

00:20:26,480 --> 00:20:32,240
rotating a secret that is

00:20:28,960 --> 00:20:34,000
regenerating a particular secret

00:20:32,240 --> 00:20:35,440
right now we only support password

00:20:34,000 --> 00:20:38,640
rotation

00:20:35,440 --> 00:20:39,440
uh i think there's a pr being put by

00:20:38,640 --> 00:20:41,440
mario

00:20:39,440 --> 00:20:43,520
which supports rotation of certificates

00:20:41,440 --> 00:20:46,840
too

00:20:43,520 --> 00:20:49,840
so for that first we need to create the

00:20:46,840 --> 00:20:49,840
password

00:20:50,480 --> 00:20:55,679
a very simple thing you just say the

00:20:52,640 --> 00:20:55,679
type is password

00:20:57,520 --> 00:21:01,120
and you have gen secret one being

00:20:59,120 --> 00:21:04,480
created which has the password

00:21:01,120 --> 00:21:08,080
generated let's now

00:21:04,480 --> 00:21:10,880
try to create a deployment which uses

00:21:08,080 --> 00:21:12,320
this particular password so that when we

00:21:10,880 --> 00:21:17,840
rotate this particular password the

00:21:12,320 --> 00:21:17,840
deployment also gets updated

00:21:22,240 --> 00:21:28,320
so here you can see it's using the gen

00:21:25,679 --> 00:21:28,320
secret one

00:21:28,840 --> 00:21:31,840
deployment

00:21:37,760 --> 00:21:42,960
so it's being deployed now let's see how

00:21:40,559 --> 00:21:45,760
rotation works

00:21:42,960 --> 00:21:46,559
so you need to define a config map uh

00:21:45,760 --> 00:21:49,600
and in which

00:21:46,559 --> 00:21:51,840
you need to give the list of

00:21:49,600 --> 00:21:52,720
all the quark secrets that you need to

00:21:51,840 --> 00:21:54,720
rotate

00:21:52,720 --> 00:21:56,080
uh in this case we are rotating generate

00:21:54,720 --> 00:22:00,000
password

00:21:56,080 --> 00:22:04,559
that is generate secret one and

00:22:00,000 --> 00:22:07,360
when i create it it should get rotated

00:22:04,559 --> 00:22:10,840
let's first see what's the data in this

00:22:07,360 --> 00:22:13,840
it starts with one d0

00:22:10,840 --> 00:22:13,840
okay

00:22:15,200 --> 00:22:20,080
it has changed xdp and this is also

00:22:18,559 --> 00:22:20,880
being updated if you can see on the

00:22:20,080 --> 00:22:27,039
right side

00:22:20,880 --> 00:22:31,120
the deployment

00:22:27,039 --> 00:22:34,559
uh yep that's it i guess uh

00:22:31,120 --> 00:22:35,440
i'll give back to mario i just wanted to

00:22:34,559 --> 00:22:37,919
say that rohit

00:22:35,440 --> 00:22:38,799
on the right hand side was was showing a

00:22:37,919 --> 00:22:41,520
different feature

00:22:38,799 --> 00:22:43,120
that we have in one of the operators

00:22:41,520 --> 00:22:46,320
which is

00:22:43,120 --> 00:22:49,840
marking your deployments so that if

00:22:46,320 --> 00:22:52,799
anything they reference changes um

00:22:49,840 --> 00:22:54,640
they get restarted so maybe could you

00:22:52,799 --> 00:22:54,960
show the annotation that's required for

00:22:54,640 --> 00:22:58,480
that

00:22:54,960 --> 00:22:59,039
right right so the secrets and config

00:22:58,480 --> 00:23:01,120
max

00:22:59,039 --> 00:23:02,400
should have the annotation restart on

00:23:01,120 --> 00:23:04,880
update

00:23:02,400 --> 00:23:07,039
so only when secrets or config max which

00:23:04,880 --> 00:23:10,000
have this particular annotation

00:23:07,039 --> 00:23:12,080
and when these these particular secrets

00:23:10,000 --> 00:23:14,080
or config mags are rotated

00:23:12,080 --> 00:23:15,360
then the referenced deployments or

00:23:14,080 --> 00:23:19,600
stateful sets get

00:23:15,360 --> 00:23:21,039
updated and that's a difficult operator

00:23:19,600 --> 00:23:23,520
right

00:23:21,039 --> 00:23:25,600
yeah that's a feature of the operator

00:23:23,520 --> 00:23:28,640
and not the feature of secret

00:23:25,600 --> 00:23:32,320
got it that would have been actually my

00:23:28,640 --> 00:23:34,960
my question like the

00:23:32,320 --> 00:23:36,400
desired behavior for secrets rotation is

00:23:34,960 --> 00:23:37,440
actually to restart everything that

00:23:36,400 --> 00:23:39,679
depends on it

00:23:37,440 --> 00:23:39,679
right

00:23:41,200 --> 00:23:45,200
yep right so

00:23:45,679 --> 00:23:50,320
if the secrets that are being generated

00:23:48,400 --> 00:23:51,520
have this particular annotation and you

00:23:50,320 --> 00:23:53,440
can specify

00:23:51,520 --> 00:23:56,559
what annotations the generated secrets

00:23:53,440 --> 00:23:56,559
can have using the

00:23:58,320 --> 00:24:02,880
field so in the spec you have a

00:24:01,679 --> 00:24:04,799
particular field called secret

00:24:02,880 --> 00:24:06,480
annotations and you specify the list of

00:24:04,799 --> 00:24:09,919
annotations that the

00:24:06,480 --> 00:24:12,240
generated secret should have uh and then

00:24:09,919 --> 00:24:14,400
the generated secret would have this

00:24:12,240 --> 00:24:16,720
have those particular annotations

00:24:14,400 --> 00:24:20,159
and if these generated secrets are used

00:24:16,720 --> 00:24:22,320
anywhere then they get updated

00:24:20,159 --> 00:24:23,520
i'm not sure if this should be the

00:24:22,320 --> 00:24:26,720
default for everything

00:24:23,520 --> 00:24:28,880
i think kubernetes will notice if you

00:24:26,720 --> 00:24:32,240
mount a secret as a volume

00:24:28,880 --> 00:24:33,919
and then eventually restart the pot

00:24:32,240 --> 00:24:35,520
or something but there's no guarantee

00:24:33,919 --> 00:24:37,440
when this is going to happen

00:24:35,520 --> 00:24:39,919
there's something about this in the docs

00:24:37,440 --> 00:24:41,760
so in some use cases you might want to

00:24:39,919 --> 00:24:44,000
control this in others you might not

00:24:41,760 --> 00:24:44,000
care

00:24:50,640 --> 00:24:54,480
and then with when you get around to

00:24:52,240 --> 00:24:58,720
doing certificate rotation

00:24:54,480 --> 00:24:58,720
that'll be a multi-step kind of thing

00:24:58,840 --> 00:25:02,880
right

00:25:00,000 --> 00:25:03,279
other certificate rotation yeah i i

00:25:02,880 --> 00:25:07,760
think

00:25:03,279 --> 00:25:10,320
um that was mainly a bug um

00:25:07,760 --> 00:25:12,159
but yeah it's it's multi-step because we

00:25:10,320 --> 00:25:13,440
create the key first and then we wait

00:25:12,159 --> 00:25:15,039
for it to be

00:25:13,440 --> 00:25:16,720
approved right there's this auto

00:25:15,039 --> 00:25:18,880
approval um

00:25:16,720 --> 00:25:20,159
then finally all this is collected and

00:25:18,880 --> 00:25:23,279
put into the

00:25:20,159 --> 00:25:25,919
um secret we have which is

00:25:23,279 --> 00:25:26,960
like a combination of the different

00:25:25,919 --> 00:25:29,840
secrets which

00:25:26,960 --> 00:25:31,520
were there before right we combine those

00:25:29,840 --> 00:25:35,760
outputs into one secret

00:25:31,520 --> 00:25:38,880
and that's the final step so

00:25:35,760 --> 00:25:42,880
right i mean usually you would generate

00:25:38,880 --> 00:25:43,279
um a new certificate roll that out so

00:25:42,880 --> 00:25:44,720
that

00:25:43,279 --> 00:25:47,520
it's also valid so that you have

00:25:44,720 --> 00:25:50,559
multiple certificates valid right

00:25:47,520 --> 00:25:51,600
and then um and then you would have

00:25:50,559 --> 00:25:54,640
another step

00:25:51,600 --> 00:25:57,840
to remove the old one

00:25:54,640 --> 00:25:59,679
yeah that's um not supported by the

00:25:57,840 --> 00:26:02,400
quark secret control at the moment i

00:25:59,679 --> 00:26:02,400
wonder if that

00:26:04,559 --> 00:26:09,039
is out of scope or if that's something

00:26:06,799 --> 00:26:11,840
we would have to do

00:26:09,039 --> 00:26:15,279
um to be really i mean to make this

00:26:11,840 --> 00:26:15,279
reliable right like you said

00:26:15,679 --> 00:26:20,880
i think many many of the

00:26:19,039 --> 00:26:23,520
certificate applications that i'm aware

00:26:20,880 --> 00:26:25,600
of require that kind of

00:26:23,520 --> 00:26:27,120
measured roll out because there are many

00:26:25,600 --> 00:26:29,679
components that update at different

00:26:27,120 --> 00:26:34,320
times and so

00:26:29,679 --> 00:26:34,320
it needs to be synchronized at certain

00:26:36,840 --> 00:26:39,840
phases

00:26:40,159 --> 00:26:46,000
yep um definitely um can we make sure

00:26:43,440 --> 00:26:53,279
that's captured

00:26:46,000 --> 00:26:57,120
that as a feature request yui

00:26:53,279 --> 00:27:00,400
uh sure

00:26:57,120 --> 00:27:00,400
like here or like

00:27:00,559 --> 00:27:03,600
it's more of a mental note for myself

00:27:02,080 --> 00:27:04,240
that yeah that's quite an issue with

00:27:03,600 --> 00:27:07,520
that

00:27:04,240 --> 00:27:08,000
yeah um yeah docker config json i mean

00:27:07,520 --> 00:27:10,400
this

00:27:08,000 --> 00:27:13,200
third rotation is still uh nobody has

00:27:10,400 --> 00:27:16,320
been using it apparently so

00:27:13,200 --> 00:27:17,120
great to see some ideas there um docker

00:27:16,320 --> 00:27:20,399
config

00:27:17,120 --> 00:27:21,279
secrets are also pull requests we are

00:27:20,399 --> 00:27:23,919
working on

00:27:21,279 --> 00:27:25,840
because you have to have a private

00:27:23,919 --> 00:27:27,120
docker registry in kubernetes you need a

00:27:25,840 --> 00:27:30,559
special kind of secret

00:27:27,120 --> 00:27:33,200
and we want to generate that too um

00:27:30,559 --> 00:27:34,000
there we do have the secret copying

00:27:33,200 --> 00:27:36,399
feature where you

00:27:34,000 --> 00:27:37,760
can generate a secret and copy it into

00:27:36,399 --> 00:27:39,360
another namespace so

00:27:37,760 --> 00:27:41,279
something in another namespace can use

00:27:39,360 --> 00:27:43,039
it i think we have a

00:27:41,279 --> 00:27:45,200
bit of a design back there that's also

00:27:43,039 --> 00:27:47,600
an open issue

00:27:45,200 --> 00:27:49,440
where we want to improve the robustness

00:27:47,600 --> 00:27:51,600
of the deployment

00:27:49,440 --> 00:27:53,279
where you you're sure to get the secret

00:27:51,600 --> 00:27:56,320
with the right values and you

00:27:53,279 --> 00:27:58,399
don't run into invalid secrets

00:27:56,320 --> 00:28:00,159
um and on the other end you don't want

00:27:58,399 --> 00:28:01,200
to overwrite arbitrary secrets in the

00:28:00,159 --> 00:28:04,799
target namespace

00:28:01,200 --> 00:28:08,000
right that's the conflict and here the

00:28:04,799 --> 00:28:09,600
the last item is the um samware releases

00:28:08,000 --> 00:28:11,039
we do have releases now but they are

00:28:09,600 --> 00:28:14,080
very much focused

00:28:11,039 --> 00:28:15,840
around ci so it's it's not really

00:28:14,080 --> 00:28:17,279
uh like a real release so if anybody

00:28:15,840 --> 00:28:21,600
would need that we

00:28:17,279 --> 00:28:21,600
uh yeah that would be an open issue

00:28:21,760 --> 00:28:30,000
yeah um thanks um here are some urls so

00:28:26,480 --> 00:28:32,399
m hub and dark side

00:28:30,000 --> 00:28:34,080
i'm done with that you know if you have

00:28:32,399 --> 00:28:36,480
any questions otherwise i would hand off

00:28:34,080 --> 00:28:36,480
the vlog

00:28:38,240 --> 00:28:42,640
so i would actually have a follow-up

00:28:40,640 --> 00:28:45,279
question i believe i also asked it

00:28:42,640 --> 00:28:47,279
up front in the chat and i'm not sure

00:28:45,279 --> 00:28:49,360
people here on this call can can answer

00:28:47,279 --> 00:28:52,399
but i understood that quark secrets

00:28:49,360 --> 00:28:57,760
is now also being used in

00:28:52,399 --> 00:29:00,960
um cf4 case um so being integrated there

00:28:57,760 --> 00:29:03,200
like how how is it

00:29:00,960 --> 00:29:05,440
generally used there like it's the plan

00:29:03,200 --> 00:29:08,640
to kind of use it for pretty much

00:29:05,440 --> 00:29:11,919
any secrets and then probably to to ue's

00:29:08,640 --> 00:29:13,840
point um also according to my

00:29:11,919 --> 00:29:14,559
recollection there's often this two or

00:29:13,840 --> 00:29:17,760
three step

00:29:14,559 --> 00:29:18,159
process like um how is that actually

00:29:17,760 --> 00:29:26,720
done

00:29:18,159 --> 00:29:29,760
um in in cfo kids

00:29:26,720 --> 00:29:31,440
i don't know if we have folks on the

00:29:29,760 --> 00:29:33,840
call who can answer that question at the

00:29:31,440 --> 00:29:33,840
moment

00:29:34,480 --> 00:29:41,840
okay no worries

00:29:42,399 --> 00:29:46,880
okay if there's no additional question i

00:29:45,440 --> 00:29:55,840
think we can indeed

00:29:46,880 --> 00:29:55,840
hand it over to flavio

00:30:05,840 --> 00:30:10,159
and you are still unmuteful are you just

00:30:07,840 --> 00:30:10,159
in case

00:30:20,000 --> 00:30:28,240
okay sorry got confused by zoom ui okay

00:30:24,480 --> 00:30:30,559
sorry about that all right so um

00:30:28,240 --> 00:30:31,279
hi everybody i'm flabby castelli i'm

00:30:30,559 --> 00:30:35,120
from

00:30:31,279 --> 00:30:38,960
souza where i work on kubernetes

00:30:35,120 --> 00:30:41,840
and i'm here today to talk about this

00:30:38,960 --> 00:30:44,080
organization controller the the goal of

00:30:41,840 --> 00:30:44,080
this

00:30:44,159 --> 00:30:47,600
controller is to help with with the case

00:30:46,799 --> 00:30:49,679
where

00:30:47,600 --> 00:30:51,039
you have a single kubernetes cluster and

00:30:49,679 --> 00:30:52,880
you want to share that with

00:30:51,039 --> 00:30:55,039
with different tenants that could be

00:30:52,880 --> 00:30:58,240
members of the same company or could

00:30:55,039 --> 00:31:01,200
even be tenants from from

00:30:58,240 --> 00:31:02,720
other companies the long story short is

00:31:01,200 --> 00:31:05,279
that you can actually

00:31:02,720 --> 00:31:07,679
partition a kubernetes cluster so that

00:31:05,279 --> 00:31:08,880
multiple tenants get their own dedicated

00:31:07,679 --> 00:31:11,760
space

00:31:08,880 --> 00:31:13,840
you can do that by using features that

00:31:11,760 --> 00:31:16,320
are built into kubernetes or you can

00:31:13,840 --> 00:31:19,279
bring in some extra

00:31:16,320 --> 00:31:20,559
features from the kubernetes ecosystem

00:31:19,279 --> 00:31:23,120
and by leveraging

00:31:20,559 --> 00:31:24,080
uh built-in features or external

00:31:23,120 --> 00:31:27,279
projects

00:31:24,080 --> 00:31:28,640
you can get to a pretty good level of

00:31:27,279 --> 00:31:30,399
isolation

00:31:28,640 --> 00:31:32,960
this is not going to be comparable to

00:31:30,399 --> 00:31:34,240
running uh dedicated clusters like one

00:31:32,960 --> 00:31:36,559
per tenant

00:31:34,240 --> 00:31:38,640
but you can get to to a pretty good

00:31:36,559 --> 00:31:41,840
isolation level

00:31:38,640 --> 00:31:42,880
so um the features that are built into

00:31:41,840 --> 00:31:45,039
kubernetes

00:31:42,880 --> 00:31:47,360
uh i guess everybody here knows about

00:31:45,039 --> 00:31:50,080
them so the kubernetes namespace is

00:31:47,360 --> 00:31:51,120
is what we're going to use to to create

00:31:50,080 --> 00:31:53,200
a dedicated

00:31:51,120 --> 00:31:54,559
space for for the tenants to to run

00:31:53,200 --> 00:31:56,320
their workloads

00:31:54,559 --> 00:31:57,760
we are going to leverage kubernetes our

00:31:56,320 --> 00:32:00,399
back policies to

00:31:57,760 --> 00:32:00,799
to determine what a user can or cannot

00:32:00,399 --> 00:32:03,039
do

00:32:00,799 --> 00:32:05,600
instead of recovering this cluster we

00:32:03,039 --> 00:32:08,240
can use network policies to do isolation

00:32:05,600 --> 00:32:09,760
we can use resource quota to put limits

00:32:08,240 --> 00:32:11,600
on the resources

00:32:09,760 --> 00:32:13,200
and finally we can use bot security

00:32:11,600 --> 00:32:16,240
policies to just

00:32:13,200 --> 00:32:18,320
tie it make everything more secure on on

00:32:16,240 --> 00:32:22,640
the low level side of things

00:32:18,320 --> 00:32:24,640
but still with these

00:32:22,640 --> 00:32:25,919
with this features provided by

00:32:24,640 --> 00:32:27,039
kubernetes there are still some

00:32:25,919 --> 00:32:29,279
challenges

00:32:27,039 --> 00:32:30,799
which is you have to find a way to map

00:32:29,279 --> 00:32:33,360
the organization

00:32:30,799 --> 00:32:35,200
uh of your company into into the

00:32:33,360 --> 00:32:37,679
kubernetes cluster

00:32:35,200 --> 00:32:38,720
you also want to define all these uh

00:32:37,679 --> 00:32:40,240
policies through

00:32:38,720 --> 00:32:42,080
you're defining the policies through

00:32:40,240 --> 00:32:43,519
these built-in features but you want to

00:32:42,080 --> 00:32:45,600
have them defined

00:32:43,519 --> 00:32:47,679
in a central place and then from this

00:32:45,600 --> 00:32:49,840
central place to have them applied

00:32:47,679 --> 00:32:51,200
to the users of the different name

00:32:49,840 --> 00:32:53,120
species

00:32:51,200 --> 00:32:54,960
and of course you want to have as much

00:32:53,120 --> 00:32:56,799
as automation as possible

00:32:54,960 --> 00:32:58,399
in order to avoid repetition and avoid

00:32:56,799 --> 00:33:00,960
introducing mistakes

00:32:58,399 --> 00:33:02,880
and you also probably want to leave the

00:33:00,960 --> 00:33:04,559
tenants some sort of freedom so that

00:33:02,880 --> 00:33:05,760
they can manage themselves without

00:33:04,559 --> 00:33:07,919
bothering the

00:33:05,760 --> 00:33:09,679
administrators of this large kubernetes

00:33:07,919 --> 00:33:12,960
cluster

00:33:09,679 --> 00:33:15,840
so um the organization operator is part

00:33:12,960 --> 00:33:18,559
of a solution to to these challenges

00:33:15,840 --> 00:33:19,440
so it's uh basically copying what cloud

00:33:18,559 --> 00:33:22,399
foundry does

00:33:19,440 --> 00:33:24,399
so it introduces two custom resources

00:33:22,399 --> 00:33:26,320
one is called organization which is used

00:33:24,399 --> 00:33:28,880
to identify the different tenants

00:33:26,320 --> 00:33:31,600
and the other one is called space which

00:33:28,880 --> 00:33:34,320
is what identifies the areas that

00:33:31,600 --> 00:33:36,080
uh the teams of organization can can

00:33:34,320 --> 00:33:39,039
interact with these are their

00:33:36,080 --> 00:33:41,039
their own private sandboxes which are

00:33:39,039 --> 00:33:43,279
baked inside of kubernetes by an actual

00:33:41,039 --> 00:33:45,600
kubernetes namespace

00:33:43,279 --> 00:33:47,039
the goal is to define the policies into

00:33:45,600 --> 00:33:48,000
a central location as i was saying

00:33:47,039 --> 00:33:49,679
before

00:33:48,000 --> 00:33:51,840
and then find a way to map these

00:33:49,679 --> 00:33:54,399
policies to all these kubernetes

00:33:51,840 --> 00:33:56,960
namespaces the way to do the mapping

00:33:54,399 --> 00:33:58,480
is done by leveraging a label selector

00:33:56,960 --> 00:34:00,880
so the namespace

00:33:58,480 --> 00:34:03,120
will have a series of labels that are

00:34:00,880 --> 00:34:05,760
used to figure out which policies have

00:34:03,120 --> 00:34:07,360
to be applied to this namespace

00:34:05,760 --> 00:34:09,679
in order to make everything work in a

00:34:07,360 --> 00:34:11,760
secure fashion we don't want to

00:34:09,679 --> 00:34:14,159
let the users the ability to create

00:34:11,760 --> 00:34:15,119
namespaces or to edit existing ones

00:34:14,159 --> 00:34:18,079
because that

00:34:15,119 --> 00:34:20,639
that way they could play around too much

00:34:18,079 --> 00:34:22,480
with the labels and then either escape

00:34:20,639 --> 00:34:26,079
from policies or just

00:34:22,480 --> 00:34:29,839
do not add them so this is

00:34:26,079 --> 00:34:31,520
a short overview of the relation between

00:34:29,839 --> 00:34:34,000
the different

00:34:31,520 --> 00:34:36,079
custom resources so as you can see the

00:34:34,000 --> 00:34:38,320
organization has a name it has a list of

00:34:36,079 --> 00:34:40,800
administrators editors and viewers

00:34:38,320 --> 00:34:43,119
and these can be either groups provided

00:34:40,800 --> 00:34:46,480
by the external identity provider

00:34:43,119 --> 00:34:47,520
or they could be users and depending on

00:34:46,480 --> 00:34:48,960
the role they have

00:34:47,520 --> 00:34:51,760
they of course have different kind of

00:34:48,960 --> 00:34:53,679
privileges then at the organization

00:34:51,760 --> 00:34:56,560
level this is where we define

00:34:53,679 --> 00:34:57,599
the series of of labels that have to be

00:34:56,560 --> 00:34:59,440
applied

00:34:57,599 --> 00:35:01,599
to the namespaces that belongs to the

00:34:59,440 --> 00:35:02,320
organization so this is where we set the

00:35:01,599 --> 00:35:04,079
baseline

00:35:02,320 --> 00:35:06,400
of the policies that we want to enforce

00:35:04,079 --> 00:35:09,440
at the namespace level

00:35:06,400 --> 00:35:09,920
and then uh each organization has one or

00:35:09,440 --> 00:35:13,599
more

00:35:09,920 --> 00:35:15,440
spaces which can have their own extra

00:35:13,599 --> 00:35:16,400
set of administrators editors and

00:35:15,440 --> 00:35:19,520
viewers

00:35:16,400 --> 00:35:21,359
to give some flexibility to the end user

00:35:19,520 --> 00:35:23,839
and then each space has its own

00:35:21,359 --> 00:35:25,599
namespace which has a name that is

00:35:23,839 --> 00:35:28,000
calculated starting from

00:35:25,599 --> 00:35:28,800
from the space itself and it has this

00:35:28,000 --> 00:35:31,520
list of

00:35:28,800 --> 00:35:33,520
inherited labels these labels are are

00:35:31,520 --> 00:35:35,200
calculated starting from what is defined

00:35:33,520 --> 00:35:37,119
inside of organization

00:35:35,200 --> 00:35:39,599
and what is also defined inside the

00:35:37,119 --> 00:35:42,720
space extra config

00:35:39,599 --> 00:35:45,119
custom resource resource where through

00:35:42,720 --> 00:35:47,280
the extra labels attribute we can define

00:35:45,119 --> 00:35:49,119
some extra policies that we want to

00:35:47,280 --> 00:35:50,160
apply to a certain namespace or we want

00:35:49,119 --> 00:35:54,160
to override

00:35:50,160 --> 00:35:57,359
to a certain namespace look a bit deeper

00:35:54,160 --> 00:35:59,280
so the organization object is

00:35:57,359 --> 00:36:00,640
created only by the admins of the

00:35:59,280 --> 00:36:03,359
cluster

00:36:00,640 --> 00:36:05,599
uh it's a cluster-wide resource every

00:36:03,359 --> 00:36:07,920
time you create a new organization

00:36:05,599 --> 00:36:09,440
the controller will create a namespace

00:36:07,920 --> 00:36:11,920
for better organization

00:36:09,440 --> 00:36:13,359
where the scope objects are going to be

00:36:11,920 --> 00:36:16,320
created

00:36:13,359 --> 00:36:17,599
and as soon as this namespace is created

00:36:16,320 --> 00:36:20,400
the controller will

00:36:17,599 --> 00:36:22,400
create some rbac policies to to define

00:36:20,400 --> 00:36:26,880
what can be done inside of this

00:36:22,400 --> 00:36:29,119
space inside of this namespace

00:36:26,880 --> 00:36:30,800
the same thing happens when you define a

00:36:29,119 --> 00:36:34,000
space object so

00:36:30,800 --> 00:36:36,000
the members of organization now they are

00:36:34,000 --> 00:36:37,920
granted the ability to create space

00:36:36,000 --> 00:36:40,240
objects inside of the namespace

00:36:37,920 --> 00:36:42,640
the kubernetes namespace that has been

00:36:40,240 --> 00:36:46,000
created by the organization controller

00:36:42,640 --> 00:36:48,800
and here they can do what is

00:36:46,000 --> 00:36:51,040
ruled out by the the rbac policies that

00:36:48,800 --> 00:36:54,400
are automatically enforced by

00:36:51,040 --> 00:36:55,839
by the operator the

00:36:54,400 --> 00:36:58,480
interesting thing to point out is that

00:36:55,839 --> 00:37:01,040
these edit admin and view roles they are

00:36:58,480 --> 00:37:01,680
basically built around some cluster

00:37:01,040 --> 00:37:04,480
roles

00:37:01,680 --> 00:37:05,119
that are defined by kubernetes which are

00:37:04,480 --> 00:37:07,680
pretty

00:37:05,119 --> 00:37:08,960
uh flexible and they are basically

00:37:07,680 --> 00:37:12,079
allowing us to

00:37:08,960 --> 00:37:13,760
to have some good security basic

00:37:12,079 --> 00:37:15,760
in there without having to define new

00:37:13,760 --> 00:37:18,000
roles

00:37:15,760 --> 00:37:19,119
uh last but not least the space extra

00:37:18,000 --> 00:37:22,000
conflict this is

00:37:19,119 --> 00:37:23,440
as i was saying used to define extra

00:37:22,000 --> 00:37:25,200
labels that can be added

00:37:23,440 --> 00:37:27,119
to an organization and this is what

00:37:25,200 --> 00:37:31,119
allows um

00:37:27,119 --> 00:37:33,040
an admin of a of a cluster to say

00:37:31,119 --> 00:37:35,200
instead of these space that belongs to

00:37:33,040 --> 00:37:36,960
to this organization i want for example

00:37:35,200 --> 00:37:37,839
to have less isolation in terms of

00:37:36,960 --> 00:37:40,480
network

00:37:37,839 --> 00:37:41,839
or i want to put more constraints in

00:37:40,480 --> 00:37:44,960
terms of quotas

00:37:41,839 --> 00:37:48,240
and and so on and so forth

00:37:44,960 --> 00:37:50,640
so at this point uh as a cluster admin

00:37:48,240 --> 00:37:52,000
you can go ahead define uh different

00:37:50,640 --> 00:37:53,599
organizations

00:37:52,000 --> 00:37:56,000
once the organizations are defined the

00:37:53,599 --> 00:37:59,440
tenants can create the spaces in this

00:37:56,000 --> 00:38:00,400
self-service way and every time a space

00:37:59,440 --> 00:38:02,640
is created

00:38:00,400 --> 00:38:04,240
then we create a namespace for that

00:38:02,640 --> 00:38:04,720
there is still something that has to be

00:38:04,240 --> 00:38:07,680
done

00:38:04,720 --> 00:38:09,040
which is uh as a cluster administrator

00:38:07,680 --> 00:38:12,400
i'm writing the policies

00:38:09,040 --> 00:38:13,839
in a central location and i'm i want

00:38:12,400 --> 00:38:15,280
these policies to be applied to the

00:38:13,839 --> 00:38:18,480
namespace by using

00:38:15,280 --> 00:38:21,280
a node select label selector

00:38:18,480 --> 00:38:22,000
so this is not done by the organization

00:38:21,280 --> 00:38:23,760
controller

00:38:22,000 --> 00:38:25,200
but this is something where another

00:38:23,760 --> 00:38:27,520
operator can

00:38:25,200 --> 00:38:29,040
can help us and this is the namespace

00:38:27,520 --> 00:38:30,640
config operator

00:38:29,040 --> 00:38:32,800
that as you can see here in the second

00:38:30,640 --> 00:38:36,079
example on the on the right

00:38:32,800 --> 00:38:39,359
you can define namespace config

00:38:36,079 --> 00:38:41,119
objects and these ones like this one

00:38:39,359 --> 00:38:43,280
for example is going to create a

00:38:41,119 --> 00:38:46,160
resource quarter policy

00:38:43,280 --> 00:38:47,680
inside of all the namespaces that are

00:38:46,160 --> 00:38:49,599
matching this label

00:38:47,680 --> 00:38:52,240
so all the namespace with uh with the

00:38:49,599 --> 00:38:54,960
label with key size and value small

00:38:52,240 --> 00:38:57,119
are going to have the namespace config

00:38:54,960 --> 00:38:58,960
operator create this resource quota that

00:38:57,119 --> 00:38:59,760
puts limits on the amount of cpus and

00:38:58,960 --> 00:39:02,560
memories

00:38:59,760 --> 00:39:04,160
and you can do that for for any kind of

00:39:02,560 --> 00:39:06,160
stuff you want so in this case it's a

00:39:04,160 --> 00:39:10,160
resource quarter but you can create

00:39:06,160 --> 00:39:10,160
any kind of namespace resource

00:39:10,720 --> 00:39:14,000
so that's basically it uh it's uh it's

00:39:13,280 --> 00:39:17,280
pretty a lot

00:39:14,000 --> 00:39:17,839
so there is a poc uh on github in this

00:39:17,280 --> 00:39:19,920
url

00:39:17,839 --> 00:39:21,599
and inside of the github repo there is

00:39:19,920 --> 00:39:24,240
also a link to this

00:39:21,599 --> 00:39:25,280
google document that provides a more

00:39:24,240 --> 00:39:29,359
in-depth view

00:39:25,280 --> 00:39:32,079
about uh the wall operator

00:39:29,359 --> 00:39:32,079
and that's it

00:39:33,680 --> 00:39:37,440
okay any questions to florio

00:39:38,480 --> 00:39:42,000
that's sort of an open question should

00:39:41,119 --> 00:39:44,079
should irene be

00:39:42,000 --> 00:39:45,040
using this to segregate uh user

00:39:44,079 --> 00:39:49,839
applications

00:39:45,040 --> 00:39:53,200
into uh cf orgs and spaces

00:39:49,839 --> 00:39:55,760
or or orgs uh into name spaces that are

00:39:53,200 --> 00:39:58,480
organized like the cf orgs and spaces on

00:39:55,760 --> 00:40:00,480
the cf cluster

00:39:58,480 --> 00:40:02,000
because right now it doesn't i think

00:40:00,480 --> 00:40:03,359
it's important that the iranian team

00:40:02,000 --> 00:40:06,480
know this is here

00:40:03,359 --> 00:40:06,480
if they want to start

00:40:06,800 --> 00:40:10,160
segregating the applications which are

00:40:08,880 --> 00:40:14,000
which is in the plan

00:40:10,160 --> 00:40:17,760
so i'm gonna make sure demetrius

00:40:14,000 --> 00:40:17,760
and that and that team knows about this

00:40:18,800 --> 00:40:23,359
yeah i don't think anyone from the irony

00:40:21,440 --> 00:40:26,960
group is on the call today

00:40:23,359 --> 00:40:30,319
um so probably worth sharing sharing the

00:40:26,960 --> 00:40:33,359
recording from here and you can

00:40:30,319 --> 00:40:34,400
also reach out separately but i think i

00:40:33,359 --> 00:40:37,359
recall

00:40:34,400 --> 00:40:38,160
um when the cafe team was investigating

00:40:37,359 --> 00:40:41,040
like what are

00:40:38,160 --> 00:40:42,480
what are some possible mappings that

00:40:41,040 --> 00:40:46,079
that people desire

00:40:42,480 --> 00:40:49,359
like different isolation um

00:40:46,079 --> 00:40:51,680
things they they they put out a a dock

00:40:49,359 --> 00:40:53,280
trying to describe different scenarios

00:40:51,680 --> 00:40:56,960
and some of them are like

00:40:53,280 --> 00:40:58,720
okay are you trying to stripe across

00:40:56,960 --> 00:41:00,640
multiple clusters

00:40:58,720 --> 00:41:03,359
a single app across multiple clusters

00:41:00,640 --> 00:41:06,800
and then what does that mean

00:41:03,359 --> 00:41:08,880
are you trying to map uh

00:41:06,800 --> 00:41:10,560
and and then therefore like okay this

00:41:08,880 --> 00:41:12,160
name space in this cluster and this name

00:41:10,560 --> 00:41:14,640
space in this other cluster

00:41:12,160 --> 00:41:15,599
but you're trying to like spread your

00:41:14,640 --> 00:41:18,000
app across

00:41:15,599 --> 00:41:20,800
both of those those clusters and how

00:41:18,000 --> 00:41:22,400
might you represent that in uh

00:41:20,800 --> 00:41:24,640
in cloud foundry as as one of the

00:41:22,400 --> 00:41:27,440
scenarios

00:41:24,640 --> 00:41:28,160
they described a few other uh scenarios

00:41:27,440 --> 00:41:30,560
of like

00:41:28,160 --> 00:41:32,880
okay is this what you're trying to do um

00:41:30,560 --> 00:41:35,599
in terms of isolation

00:41:32,880 --> 00:41:37,119
um and it it's more like you know the

00:41:35,599 --> 00:41:38,640
the thought exercise of trying to

00:41:37,119 --> 00:41:41,839
understand what are the different

00:41:38,640 --> 00:41:42,560
isolation desires people have rather

00:41:41,839 --> 00:41:46,400
than

00:41:42,560 --> 00:41:46,400
the implementation side of it

00:41:47,119 --> 00:41:50,640
i mean part of the genesis of this i

00:41:48,640 --> 00:41:52,400
think flavio and i had a conversation a

00:41:50,640 --> 00:41:53,920
long time ago about wouldn't it be great

00:41:52,400 --> 00:41:56,000
if kubernetes had these simple

00:41:53,920 --> 00:41:58,160
structures like orgs and spaces

00:41:56,000 --> 00:41:59,760
uh with which admins could readily get

00:41:58,160 --> 00:42:01,599
their head around how to partition a

00:41:59,760 --> 00:42:04,160
kubernetes cluster for users

00:42:01,599 --> 00:42:05,280
so this is totally borrowed from cloud

00:42:04,160 --> 00:42:07,359
foundry and then just developed

00:42:05,280 --> 00:42:09,839
independently but at the same time

00:42:07,359 --> 00:42:10,720
as we try and figure out i demoed irene

00:42:09,839 --> 00:42:12,560
for

00:42:10,720 --> 00:42:14,319
somebody a while ago and they just

00:42:12,560 --> 00:42:15,920
assumed like okay and obviously these

00:42:14,319 --> 00:42:17,599
are all going into separate name spaces

00:42:15,920 --> 00:42:17,920
based on and i'm like no it's actually

00:42:17,599 --> 00:42:19,599
all

00:42:17,920 --> 00:42:21,680
in this one name space and they were not

00:42:19,599 --> 00:42:24,000
very happy with that design

00:42:21,680 --> 00:42:25,680
so they wanted uh to be using the

00:42:24,000 --> 00:42:28,400
kubernetes structures

00:42:25,680 --> 00:42:29,680
uh as uh for segregation because that's

00:42:28,400 --> 00:42:32,160
that's what they understood

00:42:29,680 --> 00:42:33,920
so actually uh cloud foundry was the uh

00:42:32,160 --> 00:42:35,680
odd concept and they just naturally

00:42:33,920 --> 00:42:37,280
assumed that because of our organs

00:42:35,680 --> 00:42:39,040
oregon space structure that we were

00:42:37,280 --> 00:42:40,880
using name spaces so

00:42:39,040 --> 00:42:42,640
i really think it would be good if they

00:42:40,880 --> 00:42:45,200
uh they could adopt this

00:42:42,640 --> 00:42:46,000
or or at least explore it and see if it

00:42:45,200 --> 00:42:48,960
it could be

00:42:46,000 --> 00:42:50,400
used rather than implement it again

00:42:48,960 --> 00:42:51,040
independently like like the same way

00:42:50,400 --> 00:42:54,400
secrets

00:42:51,040 --> 00:42:58,240
it became a very handy thing for

00:42:54,400 --> 00:42:59,760
for cf4k8s to use um quark secrets so i

00:42:58,240 --> 00:43:02,240
think

00:42:59,760 --> 00:43:03,680
this might be more interesting to the

00:43:02,240 --> 00:43:06,079
cappy team

00:43:03,680 --> 00:43:08,160
right i think if you think about it when

00:43:06,079 --> 00:43:09,839
you create orgs and spaces

00:43:08,160 --> 00:43:11,760
uh you'd want the cloud controller to

00:43:09,839 --> 00:43:14,640
create those objects in cube

00:43:11,760 --> 00:43:15,359
and then with irene you you you'd hope

00:43:14,640 --> 00:43:18,880
to just

00:43:15,359 --> 00:43:21,440
be able to tell irene just put my app in

00:43:18,880 --> 00:43:21,440
this space

00:43:22,800 --> 00:43:27,839
i know they have some sort of the

00:43:26,000 --> 00:43:29,119
the campy and irony team they have some

00:43:27,839 --> 00:43:32,240
sync up meetings

00:43:29,119 --> 00:43:34,640
um kind of on a cadence

00:43:32,240 --> 00:43:35,839
where they they talk about concerns that

00:43:34,640 --> 00:43:38,880
that crossover

00:43:35,839 --> 00:43:42,160
and definitely the topic of further

00:43:38,880 --> 00:43:44,800
segmentation um is

00:43:42,160 --> 00:43:46,079
is as as you say troy like a lot of

00:43:44,800 --> 00:43:49,280
people want it

00:43:46,079 --> 00:43:51,680
um and it's more a case of how how

00:43:49,280 --> 00:43:53,680
what what is that model and when are

00:43:51,680 --> 00:43:55,520
people gonna work on it

00:43:53,680 --> 00:43:57,520
yeah there's another use case though

00:43:55,520 --> 00:43:59,040
that this was this was mainly driven by

00:43:57,520 --> 00:44:00,160
before i even thought about irene was

00:43:59,040 --> 00:44:04,079
that

00:44:00,160 --> 00:44:06,160
you could give a cloud foundry uaa user

00:44:04,079 --> 00:44:08,400
uh similar permissions on the kubernetes

00:44:06,160 --> 00:44:09,520
cluster to for example deploy helm

00:44:08,400 --> 00:44:12,480
charts for services

00:44:09,520 --> 00:44:13,520
that aren't in a broker so or or

00:44:12,480 --> 00:44:16,560
something you know

00:44:13,520 --> 00:44:18,640
basically to give

00:44:16,560 --> 00:44:21,119
regular developers or a certain class of

00:44:18,640 --> 00:44:21,119
developers

00:44:21,200 --> 00:44:24,880
access to the kubernetes api that is

00:44:23,280 --> 00:44:27,520
similar to their access

00:44:24,880 --> 00:44:28,880
uh or the same as their access uh to the

00:44:27,520 --> 00:44:33,119
cf api

00:44:28,880 --> 00:44:33,119
with with similarly scoped uh

00:44:34,839 --> 00:44:37,839
constraints

00:44:38,480 --> 00:44:43,280
jeremy's on on the call any thoughts

00:44:40,800 --> 00:44:43,280
jeremy

00:44:44,319 --> 00:44:50,319
uh not not directly

00:44:47,520 --> 00:44:51,920
actually i think um figuring out how to

00:44:50,319 --> 00:44:55,440
transform like

00:44:51,920 --> 00:44:57,200
that concept of identity which is maybe

00:44:55,440 --> 00:45:00,160
owned by the uaa or is maybe being

00:44:57,200 --> 00:45:04,079
proxied in from an external source

00:45:00,160 --> 00:45:06,560
you know is probably like a

00:45:04,079 --> 00:45:07,359
broader concern right like it i think it

00:45:06,560 --> 00:45:10,880
probably does

00:45:07,359 --> 00:45:10,880
go a little closer to cappy like

00:45:11,119 --> 00:45:14,560
it just depends on what component of

00:45:12,960 --> 00:45:16,079
cloud foundry is responsible for doing

00:45:14,560 --> 00:45:16,960
those transforms or if we want them to

00:45:16,079 --> 00:45:20,560
be

00:45:16,960 --> 00:45:21,839
that to be distributed across across the

00:45:20,560 --> 00:45:24,800
system

00:45:21,839 --> 00:45:26,560
as somebody who doesn't actually

00:45:24,800 --> 00:45:27,040
interact with most of cloud foundry and

00:45:26,560 --> 00:45:28,640
i'm only

00:45:27,040 --> 00:45:31,040
kind of at the edge of bringing identity

00:45:28,640 --> 00:45:32,960
in and out i don't know

00:45:31,040 --> 00:45:36,000
who who is most interested in doing

00:45:32,960 --> 00:45:36,000
those identity transforms

00:45:42,240 --> 00:45:46,319
so maybe one more question to you to

00:45:44,480 --> 00:45:46,960
flower video as i also saw some

00:45:46,319 --> 00:45:50,400
reference

00:45:46,960 --> 00:45:54,000
to like other crds um like from their

00:45:50,400 --> 00:45:55,119
type um they seem to have been created

00:45:54,000 --> 00:45:57,440
by red hat

00:45:55,119 --> 00:45:58,160
is there like a broader conversation in

00:45:57,440 --> 00:46:00,319
the broader

00:45:58,160 --> 00:46:02,079
kubernetes community around that like

00:46:00,319 --> 00:46:04,800
the multi-tenant

00:46:02,079 --> 00:46:06,400
special interest group there or did you

00:46:04,800 --> 00:46:09,680
like build that specifically

00:46:06,400 --> 00:46:13,599
for a cloud foundry use case

00:46:09,680 --> 00:46:14,960
so um the reddit operator is

00:46:13,599 --> 00:46:17,359
interesting because it's not part of

00:46:14,960 --> 00:46:19,680
ansible sorry of open shift

00:46:17,359 --> 00:46:22,400
is something that comes from a community

00:46:19,680 --> 00:46:25,599
of best practices around reddit so

00:46:22,400 --> 00:46:27,359
it's um it's done by some reddit

00:46:25,599 --> 00:46:28,560
employee but it's not part events of

00:46:27,359 --> 00:46:32,400
openshift

00:46:28,560 --> 00:46:34,240
um it's um so the

00:46:32,400 --> 00:46:36,160
the main goal of organization

00:46:34,240 --> 00:46:38,480
organization operator is to create this

00:46:36,160 --> 00:46:40,480
uh comp set of having organization

00:46:38,480 --> 00:46:42,000
spaces which is something that is not

00:46:40,480 --> 00:46:44,800
done by any project that

00:46:42,000 --> 00:46:46,720
is inside of a multi-tenancy special

00:46:44,800 --> 00:46:49,760
interest group of kubernetes

00:46:46,720 --> 00:46:52,079
um i was also thinking about

00:46:49,760 --> 00:46:53,760
leveraging the hierarchical namespace

00:46:52,079 --> 00:46:56,240
controller

00:46:53,760 --> 00:46:58,160
instead of using which is a project in

00:46:56,240 --> 00:46:58,800
incubation instead of a multi-tenancy

00:46:58,160 --> 00:47:02,000
group

00:46:58,800 --> 00:47:02,560
instead of using the name space config

00:47:02,000 --> 00:47:05,440
or

00:47:02,560 --> 00:47:07,119
operator the main reason why i started

00:47:05,440 --> 00:47:08,400
with uh with the namespace config

00:47:07,119 --> 00:47:11,280
operator is because

00:47:08,400 --> 00:47:12,000
i personally like the approach of of

00:47:11,280 --> 00:47:15,040
using

00:47:12,000 --> 00:47:19,040
labels to associate uh policies

00:47:15,040 --> 00:47:20,240
to the namespaces i i i like this this

00:47:19,040 --> 00:47:22,319
concept while with

00:47:20,240 --> 00:47:23,760
uh hierarchical namespace controller you

00:47:22,319 --> 00:47:26,160
would have to create

00:47:23,760 --> 00:47:27,839
the policies inside the top level

00:47:26,160 --> 00:47:29,520
namespace and then create

00:47:27,839 --> 00:47:32,400
children of that namespace in order to

00:47:29,520 --> 00:47:36,000
have this policies propagated

00:47:32,400 --> 00:47:38,000
also i thought that the article

00:47:36,000 --> 00:47:40,000
namespace um

00:47:38,000 --> 00:47:42,559
has too much freedom because you can do

00:47:40,000 --> 00:47:45,599
this infinite nesting of namespaces

00:47:42,559 --> 00:47:46,079
which can be somehow confusing uh while

00:47:45,599 --> 00:47:49,280
here

00:47:46,079 --> 00:47:52,160
with this design right it's just a

00:47:49,280 --> 00:47:53,520
one space one namespace nothing more

00:47:52,160 --> 00:47:56,480
nothing less so

00:47:53,520 --> 00:47:56,480
more straightforward

00:48:01,520 --> 00:48:07,280
and probably another one so so like you

00:48:04,160 --> 00:48:10,160
you have been listing

00:48:07,280 --> 00:48:12,240
kubernetes means to to kind of isolate

00:48:10,160 --> 00:48:12,800
workloads from each other the thing that

00:48:12,240 --> 00:48:16,240
that i

00:48:12,800 --> 00:48:16,960
always feel is kind of most of the time

00:48:16,240 --> 00:48:20,160
missing is

00:48:16,960 --> 00:48:22,960
is something like network bandwidth

00:48:20,160 --> 00:48:25,280
like it's not totally related to to your

00:48:22,960 --> 00:48:28,160
presentation but i i keep wondering if

00:48:25,280 --> 00:48:30,559
like somebody is working on on that

00:48:28,160 --> 00:48:32,720
topic or if

00:48:30,559 --> 00:48:34,720
or to put it the other way around i

00:48:32,720 --> 00:48:35,680
think that is also something where we

00:48:34,720 --> 00:48:37,760
don't have

00:48:35,680 --> 00:48:40,000
such a good answer in the bosch based

00:48:37,760 --> 00:48:43,040
cloud foundry world right so

00:48:40,000 --> 00:48:46,160
like if your cf application gets

00:48:43,040 --> 00:48:48,160
too much traffic and that eats away

00:48:46,160 --> 00:48:49,839
like network bandwidth from other apps

00:48:48,160 --> 00:48:53,440
running on the same

00:48:49,839 --> 00:48:55,119
diego vm or like if you create massive

00:48:53,440 --> 00:48:57,119
amounts of egress then there's

00:48:55,119 --> 00:48:58,720
relatively little that we have in place

00:48:57,119 --> 00:49:01,680
in cloud foundry today

00:48:58,720 --> 00:49:03,599
and i keep wondering if like maybe

00:49:01,680 --> 00:49:05,280
somebody in the kubernetes community is

00:49:03,599 --> 00:49:06,559
working on a better isolation there

00:49:05,280 --> 00:49:08,559
because that's for me

00:49:06,559 --> 00:49:11,599
like the area where there's very little

00:49:08,559 --> 00:49:14,640
um being done at the moment

00:49:11,599 --> 00:49:18,000
uh i'm not aware of of

00:49:14,640 --> 00:49:20,480
any work in this area um

00:49:18,000 --> 00:49:21,200
it would be something to experiment we

00:49:20,480 --> 00:49:24,000
could

00:49:21,200 --> 00:49:24,800
we could leverage uh c groups maybe for

00:49:24,000 --> 00:49:26,480
that

00:49:24,800 --> 00:49:29,200
but then we would have to build some

00:49:26,480 --> 00:49:31,440
abstractions into kubernetes to

00:49:29,200 --> 00:49:32,800
to gather the metrics and build them up

00:49:31,440 --> 00:49:35,680
at the name space level

00:49:32,800 --> 00:49:38,400
for example i don't know if service mesh

00:49:35,680 --> 00:49:41,119
can provide some solution to that but

00:49:38,400 --> 00:49:44,079
i don't know i guess if you should be

00:49:41,119 --> 00:49:45,599
able to do this to some extent at least

00:49:44,079 --> 00:49:47,599
i don't know i haven't looked in the

00:49:45,599 --> 00:49:50,880
details but

00:49:47,599 --> 00:49:53,920
at least uh if we use it anyway in

00:49:50,880 --> 00:49:56,960
inside uh cf4k8 probably it

00:49:53,920 --> 00:50:01,440
should be able to to at least

00:49:56,960 --> 00:50:03,760
um solve the noisy neighbor problem for

00:50:01,440 --> 00:50:05,760
cf apps it won't like solve every

00:50:03,760 --> 00:50:09,760
problem for

00:50:05,760 --> 00:50:09,760
um for every app but

00:50:09,920 --> 00:50:15,440
for the cf case i think that should be

00:50:13,040 --> 00:50:15,440
doable

00:50:20,319 --> 00:50:29,280
okay any other questions to flavio

00:50:27,119 --> 00:50:30,160
doesn't seem to be the case so i guess

00:50:29,280 --> 00:50:33,520
last

00:50:30,160 --> 00:50:36,160
topic for today is vacation time

00:50:33,520 --> 00:50:38,079
great at least i'll be out of office in

00:50:36,160 --> 00:50:41,040
like two weeks from now and i guess

00:50:38,079 --> 00:50:42,400
first question will be how how this is

00:50:41,040 --> 00:50:44,400
the general attendance

00:50:42,400 --> 00:50:45,520
in two weeks because we we would

00:50:44,400 --> 00:50:48,319
actually

00:50:45,520 --> 00:50:50,559
um have a topic so benjamin fuller i

00:50:48,319 --> 00:50:53,520
believe from from vmware

00:50:50,559 --> 00:50:54,640
suggested to to talk about logging on

00:50:53,520 --> 00:50:58,880
the platform

00:50:54,640 --> 00:51:02,000
and also how how it ties into logging

00:50:58,880 --> 00:51:03,200
in in the cloud foundry on vms based

00:51:02,000 --> 00:51:06,400
world so

00:51:03,200 --> 00:51:08,000
i think we we definitely have oh and we

00:51:06,400 --> 00:51:11,119
have ben on the call as well i

00:51:08,000 --> 00:51:13,359
just realized hey um so

00:51:11,119 --> 00:51:14,240
so i think i i would say if there's

00:51:13,359 --> 00:51:16,800
enough people

00:51:14,240 --> 00:51:17,280
in in this call that we could just go

00:51:16,800 --> 00:51:19,920
ahead

00:51:17,280 --> 00:51:21,599
in two weeks then i guess i would go

00:51:19,920 --> 00:51:23,680
ahead separately and find

00:51:21,599 --> 00:51:25,359
like at least a moderator or you can

00:51:23,680 --> 00:51:27,680
kind of arrange that but

00:51:25,359 --> 00:51:29,119
um i just want to make sure that we

00:51:27,680 --> 00:51:30,800
don't like invite ben

00:51:29,119 --> 00:51:34,240
in two weeks and then pretty much

00:51:30,800 --> 00:51:34,240
everybody is out of office so

00:51:34,559 --> 00:51:39,599
just some quick indication from from

00:51:37,040 --> 00:51:42,160
people here on on this call

00:51:39,599 --> 00:51:43,040
yeah i'm very curious about the european

00:51:42,160 --> 00:51:46,000
attendance

00:51:43,040 --> 00:51:46,000
in a couple of weeks

00:51:46,160 --> 00:51:50,000
i understand all sorts of august

00:51:48,079 --> 00:51:54,720
vacations are happening

00:51:50,000 --> 00:51:54,720
yeah exactly i'll be around

00:51:57,200 --> 00:52:02,880
well i mean if like general tendency is

00:52:00,079 --> 00:52:05,200
to to keep the call we anyhow

00:52:02,880 --> 00:52:07,520
do recordings right so people who are

00:52:05,200 --> 00:52:09,280
out of office in two weeks can

00:52:07,520 --> 00:52:10,800
take a look at the recording afterwards

00:52:09,280 --> 00:52:14,480
so i guess we'll

00:52:10,800 --> 00:52:18,960
stick to it to that slot and i'll uh

00:52:14,480 --> 00:52:22,319
try and arrange a moderator separately

00:52:18,960 --> 00:52:24,559
are there any folks from sap

00:52:22,319 --> 00:52:26,079
parent that that you feel would be

00:52:24,559 --> 00:52:28,960
particularly interested in

00:52:26,079 --> 00:52:28,960
in the topic

00:52:29,280 --> 00:52:34,559
oh i think we definitely have a couple

00:52:32,960 --> 00:52:36,319
of people that are interested but i

00:52:34,559 --> 00:52:38,640
would need to to actually ping them

00:52:36,319 --> 00:52:39,440
separately on on the topic but also

00:52:38,640 --> 00:52:42,720
philip is

00:52:39,440 --> 00:52:45,839
in the call so um i

00:52:42,720 --> 00:52:47,760
i think we'll kind of arrange something

00:52:45,839 --> 00:52:49,280
and find somebody who's who's actually

00:52:47,760 --> 00:52:52,079
in the office

00:52:49,280 --> 00:52:52,720
so i i will be there in next uh in two

00:52:52,079 --> 00:52:54,400
weeks

00:52:52,720 --> 00:52:55,839
awesome done yeah it's already

00:52:54,400 --> 00:52:58,720
terrifying good

00:52:55,839 --> 00:53:00,079
yeah okay then we keep the slot in in

00:52:58,720 --> 00:53:03,119
two weeks and then

00:53:00,079 --> 00:53:04,320
take it from there and you're you're up

00:53:03,119 --> 00:53:05,680
for that

00:53:04,320 --> 00:53:08,960
[Music]

00:53:05,680 --> 00:53:11,599
awesome good um so then

00:53:08,960 --> 00:53:12,400
unless there's any last minute topics

00:53:11,599 --> 00:53:14,400
that's it for

00:53:12,400 --> 00:53:15,760
for this time thanks everybody for

00:53:14,400 --> 00:53:18,319
attending and then

00:53:15,760 --> 00:53:19,599
um see you in four weeks from now but

00:53:18,319 --> 00:53:22,800
like the others

00:53:19,599 --> 00:53:23,680
probably meet even earlier thanks

00:53:22,800 --> 00:53:27,440
everybody

00:53:23,680 --> 00:53:43,839
take care vacation thanks bye

00:53:27,440 --> 00:53:43,839

YouTube URL: https://www.youtube.com/watch?v=Ooki33HiThA


