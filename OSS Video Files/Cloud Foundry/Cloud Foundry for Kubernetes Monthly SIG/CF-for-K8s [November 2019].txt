Title: CF-for-K8s [November 2019]
Publication date: 2019-11-12
Playlist: Cloud Foundry for Kubernetes Monthly SIG
Description: 
	
Captions: 
	00:00:08,740 --> 00:00:25,340
people don't object oh it's already on

00:00:20,119 --> 00:00:28,790
okay so hi everybody welcome to the

00:00:25,340 --> 00:00:31,759
first cloud foundry on kubernetes call

00:00:28,790 --> 00:00:33,950
after all continents have agreed on

00:00:31,759 --> 00:00:37,340
being on winter time I think the last

00:00:33,950 --> 00:00:39,350
one unfortunately he got a little bit

00:00:37,340 --> 00:00:43,190
railed by the fact that the Europeans

00:00:39,350 --> 00:00:48,710
wanted to join an hour later than the

00:00:43,190 --> 00:00:50,960
folks in in the US so I think now is

00:00:48,710 --> 00:00:53,660
actually the time where what we

00:00:50,960 --> 00:00:56,510
discussed in in the initial call where

00:00:53,660 --> 00:00:59,420
we wanted to see what the common

00:00:56,510 --> 00:01:03,400
interest of group is in terms of topics

00:00:59,420 --> 00:01:06,800
and as preparation for for this call I

00:01:03,400 --> 00:01:12,050
put in the topic suggestions that we had

00:01:06,800 --> 00:01:17,180
so far into a slack poll and I think

00:01:12,050 --> 00:01:21,830
cake also added another another topic in

00:01:17,180 --> 00:01:22,700
there so I think going by the by the

00:01:21,830 --> 00:01:25,220
woods

00:01:22,700 --> 00:01:28,400
it looks like meanwhile we have a mature

00:01:25,220 --> 00:01:31,310
but he wrote for relevant for cloud

00:01:28,400 --> 00:01:36,440
foundry on kubernetes with eight people

00:01:31,310 --> 00:01:38,540
voting for that and then I think we even

00:01:36,440 --> 00:01:41,570
have a tie with like the dual approach

00:01:38,540 --> 00:01:45,740
of discussing both face cloud foundry

00:01:41,570 --> 00:01:47,870
and container based cloud foundry and if

00:01:45,740 --> 00:01:54,140
and how old this should go in parallel

00:01:47,870 --> 00:01:58,010
so I guess as we have a tie-in in those

00:01:54,140 --> 00:02:02,070
any any preference which topic to to

00:01:58,010 --> 00:02:04,170
start with I'm kind of

00:02:02,070 --> 00:02:08,070
to suggest the relevant topic but if

00:02:04,170 --> 00:02:08,960
there's other it's very talk for this

00:02:08,070 --> 00:02:11,459
meeting

00:02:08,960 --> 00:02:13,500
well there actually is if you have to

00:02:11,459 --> 00:02:17,880
select channel open it's also linked in

00:02:13,500 --> 00:02:23,209
the select channel title so there we

00:02:17,880 --> 00:02:30,920
have like the aha I'll Drive it and um

00:02:23,209 --> 00:02:30,920
James Marco oh yeah thanks man

00:02:31,550 --> 00:02:39,270
you're it so any any preference for like

00:02:36,140 --> 00:02:41,760
in between those two topics in terms of

00:02:39,270 --> 00:02:45,950
starting with one of those I put the

00:02:41,760 --> 00:02:49,350
time I voted for Ellen thanks Shannon

00:02:45,950 --> 00:02:53,190
good then deal I'm not going to argue

00:02:49,350 --> 00:02:56,580
with that let's start with R Elland for

00:02:53,190 --> 00:03:05,360
cloud foundry on kubernetes any initial

00:02:56,580 --> 00:03:09,480
thoughts actually suggested it I thought

00:03:05,360 --> 00:03:12,390
canary Frank lad you go ahead to mention

00:03:09,480 --> 00:03:14,970
that I paint side this I think it was

00:03:12,390 --> 00:03:19,140
last week but I think he might be on

00:03:14,970 --> 00:03:21,030
vacation or out of office so waiting for

00:03:19,140 --> 00:03:24,299
him to get back to start a conversation

00:03:21,030 --> 00:03:27,750
around the pipeline's that we currently

00:03:24,299 --> 00:03:33,510
have for kids yes we have built quite a

00:03:27,750 --> 00:03:37,110
lot around that and yeah I think there's

00:03:33,510 --> 00:03:42,000
just a few things missing to have an

00:03:37,110 --> 00:03:46,829
entire flow that reacts on changes for

00:03:42,000 --> 00:03:51,209
stem cells releases and gets you a

00:03:46,829 --> 00:03:56,070
result saying hey this cube CF passes

00:03:51,209 --> 00:03:59,310
cats you know I wanted to present that

00:03:56,070 --> 00:04:06,570
to him and to others interested and see

00:03:59,310 --> 00:04:10,139
where we can go from there that sounds

00:04:06,570 --> 00:04:12,900
good so those are things that are still

00:04:10,139 --> 00:04:15,150
taking inputs as like Bosch releases and

00:04:12,900 --> 00:04:16,290
Bosch deployment manifests and running

00:04:15,150 --> 00:04:22,890
those through the CF operate

00:04:16,290 --> 00:04:27,830
jewel chain yes but it doesn't have to

00:04:22,890 --> 00:04:30,480
be that way forever we're adding the

00:04:27,830 --> 00:04:34,770
entanglement feature and corks links

00:04:30,480 --> 00:04:37,800
that'll allow you to mix in cube native

00:04:34,770 --> 00:04:44,700
things like home charts together with

00:04:37,800 --> 00:04:47,750
your Bosch stuff and oh I wanted to say

00:04:44,700 --> 00:04:55,830
one more thing I forgot but yeah that's

00:04:47,750 --> 00:04:59,070
that's the plan so at this point how is

00:04:55,830 --> 00:05:02,430
is I really consumed in that that

00:04:59,070 --> 00:05:04,830
overall tool chain is it like still the

00:05:02,430 --> 00:05:07,220
the irony Bosch release or is it like

00:05:04,830 --> 00:05:10,560
the kubernetes native stuff

00:05:07,220 --> 00:05:14,190
there's only tears for anything but the

00:05:10,560 --> 00:05:16,260
Bosch stuff like jewels you had it in

00:05:14,190 --> 00:05:18,330
the backlog of the R&D team right to

00:05:16,260 --> 00:05:22,159
look at it again

00:05:18,330 --> 00:05:22,159
- like use the hump chart

00:05:23,100 --> 00:05:29,350
sorry I think I'm being slow I had what

00:05:26,380 --> 00:05:32,470
what's exactly in the backlog like to

00:05:29,350 --> 00:05:34,450
look again at like how how would the

00:05:32,470 --> 00:05:36,430
irony help child integrate with the CF

00:05:34,450 --> 00:05:40,120
operator instead of using the Bosch

00:05:36,430 --> 00:05:41,950
release oh I see I yes we did I think we

00:05:40,120 --> 00:05:44,800
already did actually have an initial

00:05:41,950 --> 00:05:49,030
spike on that and we hit a few problems

00:05:44,800 --> 00:05:50,530
I think we surfaced with with you and

00:05:49,030 --> 00:05:53,230
the things that we would need in order

00:05:50,530 --> 00:05:54,760
to be able to do that I don't know if we

00:05:53,230 --> 00:05:58,750
have a follow-on story to look back back

00:05:54,760 --> 00:06:02,560
at it could be we could yes after

00:05:58,750 --> 00:06:07,450
talking with Alexander it sounds like

00:06:02,560 --> 00:06:08,860
the these entanglements will help there

00:06:07,450 --> 00:06:16,030
in Prior you actually caught in the

00:06:08,860 --> 00:06:18,610
Midtown comments and I think ireenie is

00:06:16,030 --> 00:06:26,650
the first piece that we can actually

00:06:18,610 --> 00:06:28,150
replace easily that's good that's good

00:06:26,650 --> 00:06:32,500
that's that that's I'm really good and I

00:06:28,150 --> 00:06:35,830
mean it want one thing that I think is

00:06:32,500 --> 00:06:38,650
very clear is that between what we have

00:06:35,830 --> 00:06:43,360
now and the CF operator I will take the

00:06:38,650 --> 00:06:46,690
safe operator very very keenly so I'm

00:06:43,360 --> 00:06:48,100
I'm keen for that to happen whether or

00:06:46,690 --> 00:06:50,140
not there's some simpler thing as well

00:06:48,100 --> 00:06:55,960
that's another conversation by I'd love

00:06:50,140 --> 00:06:59,560
to get there I mean you see what we have

00:06:55,960 --> 00:07:00,940
now what do you have now so so yeah this

00:06:59,560 --> 00:07:02,740
is this is one thing I want to say I

00:07:00,940 --> 00:07:05,320
don't know I mean this is kind of a not

00:07:02,740 --> 00:07:08,410
for nothing but kind of underlines the

00:07:05,320 --> 00:07:12,310
importance I think I mean to me anyway I

00:07:08,410 --> 00:07:13,990
sent a 1.0 it really is one point I we

00:07:12,310 --> 00:07:17,350
met out today in the a and that that's

00:07:13,990 --> 00:07:18,880
really good but you know there's there's

00:07:17,350 --> 00:07:20,980
a line in there that's you know says

00:07:18,880 --> 00:07:22,480
this is bringing Cloud Foundry

00:07:20,980 --> 00:07:25,110
kubernetes bah-bah-bah

00:07:22,480 --> 00:07:27,550
easy and then I literally found myself

00:07:25,110 --> 00:07:29,250
apologizing for the fact that when

00:07:27,550 --> 00:07:32,290
people go to the repo it's going to suck

00:07:29,250 --> 00:07:34,360
and that it's not ideal I and the reason

00:07:32,290 --> 00:07:36,190
it sucks even though it's won't we know

00:07:34,360 --> 00:07:36,520
is it's not I think we can solve or

00:07:36,190 --> 00:07:39,370
should

00:07:36,520 --> 00:07:41,139
I think in the arena team but it is

00:07:39,370 --> 00:07:42,460
people's first contact with arena right

00:07:41,139 --> 00:07:45,009
they're gonna try and install it and

00:07:42,460 --> 00:07:45,729
it's not gonna look very keep native at

00:07:45,009 --> 00:07:47,770
all

00:07:45,729 --> 00:07:48,940
and it's not going to be much fun and

00:07:47,770 --> 00:07:51,400
they're going to have problems cuz we

00:07:48,940 --> 00:07:54,940
have problems and as we try to roll that

00:07:51,400 --> 00:07:56,650
out so I mean it isn't the arena team's

00:07:54,940 --> 00:07:58,659
first priority because it isn't

00:07:56,650 --> 00:08:00,940
something we should be solving but if

00:07:58,659 --> 00:08:05,560
I'm honest I think it is the biggest

00:08:00,940 --> 00:08:08,379
priority for arena success so I'm I

00:08:05,560 --> 00:08:10,110
guess I I mean there's there's no action

00:08:08,379 --> 00:08:16,000
that other than I really think that

00:08:10,110 --> 00:08:17,620
getting to their side the ideal that we

00:08:16,000 --> 00:08:19,659
want to get to I think we all know what

00:08:17,620 --> 00:08:21,880
that looks like but I think right now

00:08:19,659 --> 00:08:24,400
it'd be really good if we could kind of

00:08:21,880 --> 00:08:25,870
get get something that's an MVP that

00:08:24,400 --> 00:08:28,090
someone else island and can start making

00:08:25,870 --> 00:08:30,759
better because right now we just have

00:08:28,090 --> 00:08:32,289
this crappy SES based thing because we

00:08:30,759 --> 00:08:35,409
needed something to let people consumer

00:08:32,289 --> 00:08:40,680
really and a car lie it sucks

00:08:35,409 --> 00:08:43,060
please help so I know we've got

00:08:40,680 --> 00:08:46,560
representatives from the networking

00:08:43,060 --> 00:08:46,560
program here that's one of the other

00:08:46,740 --> 00:08:52,570
core component teams that's contributing

00:08:50,050 --> 00:08:54,790
and that is I think maybe the farthest

00:08:52,570 --> 00:08:57,760
along in terms of deviating from Bosh

00:08:54,790 --> 00:09:00,310
package artifacts so might be

00:08:57,760 --> 00:09:02,680
interesting to hear from either you Gabe

00:09:00,310 --> 00:09:05,290
or a taco or Shannon about your

00:09:02,680 --> 00:09:07,060
perspective as another contributing team

00:09:05,290 --> 00:09:10,089
that religious integration would be

00:09:07,060 --> 00:09:12,279
helping to integrate okay thank you

00:09:10,089 --> 00:09:13,300
it would be great to have some release

00:09:12,279 --> 00:09:18,550
integration I don't know what else to

00:09:13,300 --> 00:09:19,990
say yeah I think like that if you look

00:09:18,550 --> 00:09:24,060
at the code we have right now it's um

00:09:19,990 --> 00:09:26,860
it's not bossy at all it's just and so

00:09:24,060 --> 00:09:29,970
we'd love to start building out an

00:09:26,860 --> 00:09:37,029
integrated release of Cloud Foundry that

00:09:29,970 --> 00:09:38,980
continues in that pattern that kind of

00:09:37,029 --> 00:09:40,990
reminds me I mean we have some of my

00:09:38,980 --> 00:09:42,940
other hat obviously is with the garden

00:09:40,990 --> 00:09:44,800
team in garden is gonna try and start

00:09:42,940 --> 00:09:46,630
taking on the work of I really neither

00:09:44,800 --> 00:09:50,230
pod security policies and that kind of

00:09:46,630 --> 00:09:52,150
stuff from Irene II and we have

00:09:50,230 --> 00:09:54,010
the exact same problem even though I'm

00:09:52,150 --> 00:09:55,900
the real EPM I've no idea how to tell

00:09:54,010 --> 00:09:58,680
the garden team how to integrate that

00:09:55,900 --> 00:10:00,940
stuff with it really right now and yeah

00:09:58,680 --> 00:10:02,830
you know it's all Yamahas it be

00:10:00,940 --> 00:10:06,100
absolutely ludicrous which is that as a

00:10:02,830 --> 00:10:08,170
boss release it will be Nobi Nobi comic

00:10:06,100 --> 00:10:13,600
but I don't have to know the better way

00:10:08,170 --> 00:10:16,840
right now yeah is it okay the talent

00:10:13,600 --> 00:10:25,500
that we have for December so you could

00:10:16,840 --> 00:10:25,500
integrate that with quarks links maybe

00:10:27,840 --> 00:10:33,400
maybe I mean December's laurels I guess

00:10:30,720 --> 00:10:37,510
you couldn't start hacking on it once we

00:10:33,400 --> 00:10:40,990
hit the feature in maybe one to two

00:10:37,510 --> 00:10:43,300
Sprint's away you don't actually need it

00:10:40,990 --> 00:10:47,650
to be 1.0 to start hacking on it and

00:10:43,300 --> 00:10:49,720
then all you do is yamas right right

00:10:47,650 --> 00:10:53,470
working on a home chart and integrating

00:10:49,720 --> 00:10:55,030
with with the other sound possible that

00:10:53,470 --> 00:10:56,560
would at least possibly fit it's what

00:10:55,030 --> 00:10:59,170
we're shipping is just Yammer files I

00:10:56,560 --> 00:11:00,580
guess we don't really care about the

00:10:59,170 --> 00:11:04,480
fact that there's actually some Bosh

00:11:00,580 --> 00:11:07,690
going on yeah like I say I mean the cube

00:11:04,480 --> 00:11:10,780
CF repo right right now has a llamo

00:11:07,690 --> 00:11:14,140
that's a CF deployment but you didn't

00:11:10,780 --> 00:11:28,630
rip away at that until did right nothing

00:11:14,140 --> 00:11:30,400
left right yeah so I'm hearing that we

00:11:28,630 --> 00:11:34,090
all want to release integration but we

00:11:30,400 --> 00:11:36,640
don't have anybody who is currently

00:11:34,090 --> 00:11:38,980
responsible for or probably willing to

00:11:36,640 --> 00:11:43,450
adopt the responsibility of release

00:11:38,980 --> 00:11:45,940
integration for CF on communities but it

00:11:43,450 --> 00:11:50,050
has been discussed when we had a with

00:11:45,940 --> 00:11:52,570
him abital we had a big meeting for the

00:11:50,050 --> 00:11:55,390
folks who contribute to the application

00:11:52,570 --> 00:11:58,150
service and release integration was

00:11:55,390 --> 00:12:01,470
there so they're aware of the need I

00:11:58,150 --> 00:12:04,110
think it's just a matter of

00:12:01,470 --> 00:12:06,730
prioritization to

00:12:04,110 --> 00:12:11,140
when we talk about release integration

00:12:06,730 --> 00:12:13,330
we really mean having pipelines that

00:12:11,140 --> 00:12:14,980
build all the Cloud Foundry components

00:12:13,330 --> 00:12:18,250
that integrate the club hundred

00:12:14,980 --> 00:12:19,930
components and try to pass cats right

00:12:18,250 --> 00:12:23,830
that's the release integration team

00:12:19,930 --> 00:12:27,130
currently does with CF deployment that

00:12:23,830 --> 00:12:28,990
brings me to one question we will there

00:12:27,130 --> 00:12:30,970
be a relation between CF deployment and

00:12:28,990 --> 00:12:33,310
the upcoming releases of preparation for

00:12:30,970 --> 00:12:36,280
kubernetes somehow so we see the same

00:12:33,310 --> 00:12:39,490
version of the UA a with the same CBE's

00:12:36,280 --> 00:12:43,420
etc or with that oil diverge metric way

00:12:39,490 --> 00:12:45,580
if I could answer that so first I wanted

00:12:43,420 --> 00:12:49,420
to say that what we're currently doing

00:12:45,580 --> 00:12:52,840
for kube CF is exactly that we have two

00:12:49,420 --> 00:12:57,370
sets of pipelines one we call pre

00:12:52,840 --> 00:13:00,730
publish that one is used to gate PRS it

00:12:57,370 --> 00:13:03,160
runs one set of cats

00:13:00,730 --> 00:13:07,720
sorry not cats yet just smoke tests

00:13:03,160 --> 00:13:11,830
right now on all the PR that you're that

00:13:07,720 --> 00:13:13,720
you're building it you know to see if

00:13:11,830 --> 00:13:16,870
it's green or not and then we have a

00:13:13,720 --> 00:13:20,370
post published pipeline that one can

00:13:16,870 --> 00:13:23,610
actually run a matrix of tests that

00:13:20,370 --> 00:13:28,200
involves multiple cube versions and

00:13:23,610 --> 00:13:32,290
multiple feature sets so say you have

00:13:28,200 --> 00:13:34,780
cube 113 114 and 115 and you want to

00:13:32,290 --> 00:13:38,230
test with Diego and with Irene e it

00:13:34,780 --> 00:13:40,990
should run that entire matrix of of

00:13:38,230 --> 00:13:45,160
tests so that's what we're currently

00:13:40,990 --> 00:13:48,040
working on for pipelines and to answer

00:13:45,160 --> 00:13:51,490
the question about CF deployment cube CF

00:13:48,040 --> 00:13:55,990
is now tied to a particular CF

00:13:51,490 --> 00:14:00,460
deployment right now it's 8.0 but we are

00:13:55,990 --> 00:14:05,190
just bumping in this print to 12 12.1 I

00:14:00,460 --> 00:14:08,490
think okay thank you

00:14:05,190 --> 00:14:10,259
I think what is probably the the least

00:14:08,490 --> 00:14:12,959
clear is like how will release

00:14:10,259 --> 00:14:15,540
integration look like for the non boshy

00:14:12,959 --> 00:14:16,649
will like it's like you can now cut out

00:14:15,540 --> 00:14:19,019
of the legs

00:14:16,649 --> 00:14:22,079
if operators starting with with ireenie

00:14:19,019 --> 00:14:25,199
and but like how are we going to manage

00:14:22,079 --> 00:14:26,610
like a handful of thumb charts or

00:14:25,199 --> 00:14:29,250
whatever we are going to use I think

00:14:26,610 --> 00:14:33,860
that's the thing that we should yeah

00:14:29,250 --> 00:14:37,110
start thinking about if operator time

00:14:33,860 --> 00:14:40,620
I'm hoping that we can use these feature

00:14:37,110 --> 00:14:45,180
flags what we call feature flags in the

00:14:40,620 --> 00:14:50,129
helm chart you have the main home chart

00:14:45,180 --> 00:14:52,800
that's the cube CF and then our spiked

00:14:50,129 --> 00:14:56,310
with Nats was using nads as a sub chart

00:14:52,800 --> 00:14:58,889
of that and then you have a flag in your

00:14:56,310 --> 00:15:00,480
values llamo saying okay which type of

00:14:58,889 --> 00:15:05,870
net do you want you want the boss based

00:15:00,480 --> 00:15:08,339
one or do you want the native one so

00:15:05,870 --> 00:15:11,699
once you have the feature flag you can

00:15:08,339 --> 00:15:16,290
also put that in the test matrix so then

00:15:11,699 --> 00:15:18,199
you can test with with the Boche nuts or

00:15:16,290 --> 00:15:21,269
with the cube nuts

00:15:18,199 --> 00:15:24,709
and then you can also template using

00:15:21,269 --> 00:15:27,000
that feature to control whether you

00:15:24,709 --> 00:15:33,949
activate the ops file that removes nuts

00:15:27,000 --> 00:15:33,949
and you know use the harm chart instead

00:15:34,310 --> 00:15:42,180
so I think the mechanisms are there to

00:15:37,529 --> 00:15:44,689
allows to one at a time replace each

00:15:42,180 --> 00:15:56,069
instance group with a native

00:15:44,689 --> 00:15:58,110
counterparts yeah so I think I think the

00:15:56,069 --> 00:16:03,120
missing pieces in my head anyway two

00:15:58,110 --> 00:16:06,209
things one is to have have a repo I can

00:16:03,120 --> 00:16:07,800
point people at so so in it really

00:16:06,209 --> 00:16:09,540
release documentation instead of us

00:16:07,800 --> 00:16:11,910
telling people how to deploy a CF what I

00:16:09,540 --> 00:16:14,850
really want one to be able to do is

00:16:11,910 --> 00:16:16,559
point them to a place with instructions

00:16:14,850 --> 00:16:18,870
for deploying CF if you see what I mean

00:16:16,559 --> 00:16:21,060
assessing that thing

00:16:18,870 --> 00:16:23,100
good automatically have the latest stuff

00:16:21,060 --> 00:16:24,930
I published and one thing I think we're

00:16:23,100 --> 00:16:26,850
slightly missing is in their kind of

00:16:24,930 --> 00:16:29,160
Bosch world it's like Bosch IO we like

00:16:26,850 --> 00:16:30,630
publish the latest release and Relling

00:16:29,160 --> 00:16:32,850
can just pull that down if you see what

00:16:30,630 --> 00:16:34,740
I mean and we need some sort of similar

00:16:32,850 --> 00:16:37,650
kind of control point or whatever like

00:16:34,740 --> 00:16:40,740
some way of coordinating so God and can

00:16:37,650 --> 00:16:42,660
ship the latest security there yeah

00:16:40,740 --> 00:16:44,400
moles and they get consumed and

00:16:42,660 --> 00:16:46,320
networking can do the labels networking

00:16:44,400 --> 00:16:48,690
on my leg pointing as that's one thing I

00:16:46,320 --> 00:16:50,760
think we're missing the other thing is I

00:16:48,690 --> 00:16:52,260
totally see where you're going and I

00:16:50,760 --> 00:16:55,910
think it's a good directions like start

00:16:52,260 --> 00:16:59,760
with its overall thing and the flavors

00:16:55,910 --> 00:17:03,600
to configure different things out and

00:16:59,760 --> 00:17:07,110
stuff I would also say I think we do

00:17:03,600 --> 00:17:08,429
need so that there's like a conceptual

00:17:07,110 --> 00:17:10,559
overhead so this whole Cloud Foundry

00:17:08,429 --> 00:17:12,660
beast if you see what I mean and that's

00:17:10,559 --> 00:17:15,120
fine if you want the whole consentual

00:17:12,660 --> 00:17:17,610
overhead but I think we do need a

00:17:15,120 --> 00:17:18,929
minimal CF which might well use the same

00:17:17,610 --> 00:17:21,900
stuff like maybe it just uses the

00:17:18,929 --> 00:17:24,689
operator and a more minimal operator but

00:17:21,900 --> 00:17:28,860
I think having a minimal CF let's just

00:17:24,689 --> 00:17:29,820
five things early is kind of important

00:17:28,860 --> 00:17:32,040
like I think you can you're saying to

00:17:29,820 --> 00:17:33,360
someone hey just pick up this this Cloud

00:17:32,040 --> 00:17:34,950
Foundry thing I mean I've had this

00:17:33,360 --> 00:17:36,240
conversation you say pick up this crab

00:17:34,950 --> 00:17:38,820
sound you think I know it's just this

00:17:36,240 --> 00:17:40,500
it's like 30 containers and I don't know

00:17:38,820 --> 00:17:43,710
how to operate it and then you say have

00:17:40,500 --> 00:17:46,679
you seen miss do at all but it doesn't

00:17:43,710 --> 00:17:48,540
matter thank you it's and by anyway so

00:17:46,679 --> 00:17:50,160
those to me are the two caption from

00:17:48,540 --> 00:17:52,590
what I think what I think they're

00:17:50,160 --> 00:17:57,390
describing which is like 80% of the way

00:17:52,590 --> 00:18:01,590
there but that's the 2010 I ever sorry

00:17:57,390 --> 00:18:05,100
for the first item that you mentioned we

00:18:01,590 --> 00:18:07,350
move to github issues for the cubes here

00:18:05,100 --> 00:18:09,450
free for repo so you could hope if you

00:18:07,350 --> 00:18:12,540
could please open an issue there and we

00:18:09,450 --> 00:18:13,820
can start chatting there and we'll make

00:18:12,540 --> 00:18:17,550
it happen

00:18:13,820 --> 00:18:20,460
I'm curious I know that there are people

00:18:17,550 --> 00:18:21,900
from the release integration team here

00:18:20,460 --> 00:18:23,520
to really listen but I am curious to

00:18:21,900 --> 00:18:25,050
like maybe surface some requirements

00:18:23,520 --> 00:18:26,910
from the folks who are here about what

00:18:25,050 --> 00:18:30,420
we would want one question I have for

00:18:26,910 --> 00:18:31,980
people is Bosh IO will we ship in terms

00:18:30,420 --> 00:18:32,600
of box releases a source code

00:18:31,980 --> 00:18:34,490
effectively

00:18:32,600 --> 00:18:37,130
to the hood but the sort of standard way

00:18:34,490 --> 00:18:38,480
of deploying or shipping artifacts in

00:18:37,130 --> 00:18:41,720
the good news world is container images

00:18:38,480 --> 00:18:43,340
I'm curious of folks have preferences or

00:18:41,720 --> 00:18:45,260
thoughts about whether component teams

00:18:43,340 --> 00:18:49,910
ought to be shipping one or the other or

00:18:45,260 --> 00:18:52,130
both oh this this brings us onto another

00:18:49,910 --> 00:18:57,380
thing actually I'd like to create some

00:18:52,130 --> 00:19:00,740
controversy please so there there's this

00:18:57,380 --> 00:19:03,830
obvious problem that we have that we

00:19:00,740 --> 00:19:05,120
don't have enough requirements from real

00:19:03,830 --> 00:19:07,610
developers telling us how things should

00:19:05,120 --> 00:19:09,800
work right and that often causes

00:19:07,610 --> 00:19:11,270
problems like that the thing with cs4

00:19:09,800 --> 00:19:14,420
honest is it

00:19:11,270 --> 00:19:17,030
it has focused on CTO requirements not

00:19:14,420 --> 00:19:19,180
developer requirements and that's the

00:19:17,030 --> 00:19:22,370
special problem right

00:19:19,180 --> 00:19:25,940
it should worry the crap out of us that

00:19:22,370 --> 00:19:27,920
the first answer when you ask how most

00:19:25,940 --> 00:19:32,000
cloud foundry teams should ship things

00:19:27,920 --> 00:19:33,760
isn't cf the vast majority comments

00:19:32,000 --> 00:19:36,350
rights all of them take away my sequel

00:19:33,760 --> 00:19:38,930
on twelve facts are apps and if they're

00:19:36,350 --> 00:19:42,260
not that should be the fact that they

00:19:38,930 --> 00:19:43,910
don't want to use CF and we're not like

00:19:42,260 --> 00:19:46,060
we should we should be actually why

00:19:43,910 --> 00:19:49,220
isn't the answer CFL already after that

00:19:46,060 --> 00:19:52,390
add to CF so we could self host

00:19:49,220 --> 00:19:56,750
everything there isn't the very core bit

00:19:52,390 --> 00:20:01,010
and and if if if the feedback is no way

00:19:56,750 --> 00:20:08,900
cuz CF sucks I want to ask why a number

00:20:01,010 --> 00:20:10,490
of times and then fix it when you so to

00:20:08,900 --> 00:20:12,350
not that down just to add like one

00:20:10,490 --> 00:20:14,330
bullet point to that so in my opinion

00:20:12,350 --> 00:20:18,140
the answer to today's question is and

00:20:14,330 --> 00:20:20,540
Capac and some llamo and i should be

00:20:18,140 --> 00:20:22,910
able to see if push everything i was

00:20:20,540 --> 00:20:24,800
just about to ask like when you say UCF

00:20:22,910 --> 00:20:27,770
you essentially mean used cloud foundry

00:20:24,800 --> 00:20:30,950
staging and get a container image out of

00:20:27,770 --> 00:20:34,400
that process might be packing

00:20:30,950 --> 00:20:35,750
I would think every component other than

00:20:34,400 --> 00:20:37,160
maybe Kathy or though Kathy probably

00:20:35,750 --> 00:20:39,880
should be able to just sell top of

00:20:37,160 --> 00:20:44,420
summary nice EOD and earrings

00:20:39,880 --> 00:20:45,560
probably should be CF possible I mean

00:20:44,420 --> 00:20:47,150
yeah we probably have to either

00:20:45,560 --> 00:20:50,930
each or two I maybe have to have a

00:20:47,150 --> 00:20:53,120
feature that if you bind service cube

00:20:50,930 --> 00:20:55,940
config or cube or service account or

00:20:53,120 --> 00:20:57,830
whatever you get the ability to actually

00:20:55,940 --> 00:20:59,780
hit the kubernetes api right now we can

00:20:57,830 --> 00:21:02,060
just give you the coop config as an

00:20:59,780 --> 00:21:04,370
environment variable if you bind service

00:21:02,060 --> 00:21:06,050
cuba nettings right and because a few of

00:21:04,370 --> 00:21:08,600
our things gonna need to keep an exit

00:21:06,050 --> 00:21:10,760
like networking but other than that i

00:21:08,600 --> 00:21:11,150
don't I mean they're all twelve factor

00:21:10,760 --> 00:21:15,020
apps

00:21:11,150 --> 00:21:16,460
why wouldn't they all go through CF but

00:21:15,020 --> 00:21:18,350
don't we have that cyclic dependency

00:21:16,460 --> 00:21:22,190
there like like because what would you

00:21:18,350 --> 00:21:26,630
sounds say jewel sounds like a runtime

00:21:22,190 --> 00:21:29,420
dependency of some sort have in mind

00:21:26,630 --> 00:21:31,040
rather was to say let's use Capek as

00:21:29,420 --> 00:21:33,620
kind of a standalone thing running

00:21:31,040 --> 00:21:36,020
somewhere - at least in the first step

00:21:33,620 --> 00:21:37,490
generally container images and then

00:21:36,020 --> 00:21:40,630
obviously it's a different question on

00:21:37,490 --> 00:21:43,190
how those are assembled during runtime I

00:21:40,630 --> 00:21:45,920
mean I think it's a bootstrapping

00:21:43,190 --> 00:21:48,440
problem clearly but like I agree with

00:21:45,920 --> 00:21:51,020
Jules that the majority of stuff in CF

00:21:48,440 --> 00:21:53,660
should be actually like possible as a 12

00:21:51,020 --> 00:21:56,690
factor app so it might be worth looking

00:21:53,660 --> 00:21:59,060
at how we could like do a minimal

00:21:56,690 --> 00:22:01,790
bootstrap and from that point forward

00:21:59,060 --> 00:22:04,040
nobody should care about writing you

00:22:01,790 --> 00:22:06,680
moles about kubernetes deployments right

00:22:04,040 --> 00:22:08,060
but just get them quite quite likely

00:22:06,680 --> 00:22:09,470
they can't use all the features right

00:22:08,060 --> 00:22:10,820
you can't use container networking or

00:22:09,470 --> 00:22:13,190
whatever right because containers out

00:22:10,820 --> 00:22:17,210
there like the minimal set you would

00:22:13,190 --> 00:22:19,430
think and coming back to Gabe's initial

00:22:17,210 --> 00:22:24,620
question that means we'd rather ship

00:22:19,430 --> 00:22:27,920
code then actual docker images and then

00:22:24,620 --> 00:22:31,700
have the platform take care of it did I

00:22:27,920 --> 00:22:34,850
interpret that correctly if if we don't

00:22:31,700 --> 00:22:40,400
think that is correct then that tells us

00:22:34,850 --> 00:22:43,340
something about CF and there's probably

00:22:40,400 --> 00:22:45,110
a missing feature right then or to spin

00:22:43,340 --> 00:22:46,940
it maybe more positively I understand

00:22:45,110 --> 00:22:49,820
that obviously that colleagues from

00:22:46,940 --> 00:22:51,830
Sousa want to use s less as their base

00:22:49,820 --> 00:22:53,750
container image and there's others that

00:22:51,830 --> 00:22:58,250
probably want to use sentiments

00:22:53,750 --> 00:22:59,570
right I'd say most of the CF stuff would

00:22:58,250 --> 00:23:04,100
probably also work on this

00:22:59,570 --> 00:23:06,470
jealous yeah and and and I would hope

00:23:04,100 --> 00:23:08,300
the capac solves this use case and if it

00:23:06,470 --> 00:23:11,240
doesn't we should be figuring out how it

00:23:08,300 --> 00:23:15,260
does yeah I mean we a pivotal have a

00:23:11,240 --> 00:23:17,930
similar concern around ensuring that we

00:23:15,260 --> 00:23:20,570
can ship container images that we can

00:23:17,930 --> 00:23:22,880
support with our licensing and so rights

00:23:20,570 --> 00:23:26,780
likely that that would be different in

00:23:22,880 --> 00:23:31,130
some ways from a doctor image that's

00:23:26,780 --> 00:23:35,120
produced in the community the question

00:23:31,130 --> 00:23:36,830
here but there's if you just installed a

00:23:35,120 --> 00:23:38,870
bare-bones see of deployment there's no

00:23:36,830 --> 00:23:45,320
component that you can't take out and

00:23:38,870 --> 00:23:49,370
have the CFC alive still work you can

00:23:45,320 --> 00:23:53,480
take out routing logging controller or

00:23:49,370 --> 00:24:01,910
UA which are just these are all the

00:23:53,480 --> 00:24:05,210
pieces you need I mean right now

00:24:01,910 --> 00:24:08,180
Rini is just the cool thing right and I

00:24:05,210 --> 00:24:09,590
would think for example like networking

00:24:08,180 --> 00:24:11,200
the stuff that never seemed were

00:24:09,590 --> 00:24:12,890
producing isn't in a really right now

00:24:11,200 --> 00:24:15,170
another thing they're going to remove

00:24:12,890 --> 00:24:16,610
everything from irini so I don't see why

00:24:15,170 --> 00:24:21,290
they couldn't see it push what they're

00:24:16,610 --> 00:24:23,120
producing true sample similarly I mean

00:24:21,290 --> 00:24:26,150
you AAA and I would think they could I

00:24:23,120 --> 00:24:28,460
don't mean maybe it's in line with the

00:24:26,150 --> 00:24:29,990
bootstrapping notion there's like you

00:24:28,460 --> 00:24:32,900
know after you maybe go from single user

00:24:29,990 --> 00:24:35,740
mode to more I'll user mode yeah exactly

00:24:32,900 --> 00:24:38,540
that exactly that it's like maybe a core

00:24:35,740 --> 00:24:40,100
certain features that we can use and a

00:24:38,540 --> 00:24:42,560
lot of them will break and maybe we do

00:24:40,100 --> 00:24:43,100
need to add some stuff to make this

00:24:42,560 --> 00:24:47,210
possible

00:24:43,100 --> 00:24:50,000
it just seems it just seems like super

00:24:47,210 --> 00:24:52,880
and healthy like given we have a lack of

00:24:50,000 --> 00:24:55,460
good feedback from developers and we

00:24:52,880 --> 00:24:57,980
have a load of developers like what

00:24:55,460 --> 00:25:00,080
better way to get empathy for people's

00:24:57,980 --> 00:25:01,910
problems using CS and what they would

00:25:00,080 --> 00:25:04,730
want to change in human if these

00:25:01,910 --> 00:25:06,740
negative CS then to you know

00:25:04,730 --> 00:25:11,230
so yeah it's probably bit of extra

00:25:06,740 --> 00:25:11,230
effort to do it but it seems like I

00:25:12,140 --> 00:25:19,190
how I wanna rainy but I kind of not

00:25:14,030 --> 00:25:22,690
agree is that on called fangy components

00:25:19,190 --> 00:25:26,180
we can push a bit more on developers and

00:25:22,690 --> 00:25:29,660
have more limitations for developers

00:25:26,180 --> 00:25:32,660
then we should ask from the community

00:25:29,660 --> 00:25:35,780
from the users and users yes like we can

00:25:32,660 --> 00:25:39,680
ask people please have different I say

00:25:35,780 --> 00:25:45,350
health greatness endpoint and lightness

00:25:39,680 --> 00:25:48,320
endpoint right since we can say I things

00:25:45,350 --> 00:25:50,870
like this then I think from the cloud

00:25:48,320 --> 00:25:54,230
for the community from co-founder

00:25:50,870 --> 00:25:56,660
component also we don't need to make

00:25:54,230 --> 00:25:59,330
people push the source code will push

00:25:56,660 --> 00:26:03,710
docker images so we can require selves

00:25:59,330 --> 00:26:06,800
and docker images level and if we just

00:26:03,710 --> 00:26:10,670
get some tiny part from Marines its get

00:26:06,800 --> 00:26:13,490
scheduling that might be helpful and I

00:26:10,670 --> 00:26:21,560
sure how is it how important it is from

00:26:13,490 --> 00:26:24,890
the area nearby clock but yeah I I am

00:26:21,560 --> 00:26:27,350
busy on this concern said for me it

00:26:24,890 --> 00:26:29,720
feels that we need something like a

00:26:27,350 --> 00:26:32,000
father plus plus to deploy call for the

00:26:29,720 --> 00:26:35,060
components and then we'll have to

00:26:32,000 --> 00:26:37,790
migrate and usual is like from this

00:26:35,060 --> 00:26:41,120
irony and current way to a stateful sets

00:26:37,790 --> 00:26:44,660
and some by the way why we deploy

00:26:41,120 --> 00:26:46,760
applications because I don't think they

00:26:44,660 --> 00:26:49,520
will be one-to-one mapping from the

00:26:46,760 --> 00:26:55,000
application so we are love to see a push

00:26:49,520 --> 00:26:57,560
right now and how components for the

00:26:55,000 --> 00:27:00,670
applications at Utica badges should be

00:26:57,560 --> 00:27:02,870
deployed you need more things for

00:27:00,670 --> 00:27:06,350
composite of local artists at least

00:27:02,870 --> 00:27:09,380
right now you probably need to specify

00:27:06,350 --> 00:27:13,370
that we can policy already and we

00:27:09,380 --> 00:27:15,320
shouldn't wait for irony or to all call

00:27:13,370 --> 00:27:18,960
for the components to be worried enough

00:27:15,320 --> 00:27:22,440
to ready enough

00:27:18,960 --> 00:27:25,230
before we same it's good enough for

00:27:22,440 --> 00:27:30,270
developers we you might go with some

00:27:25,230 --> 00:27:32,460
other way and then at some point your

00:27:30,270 --> 00:27:36,180
dream might come true that we'll do see

00:27:32,460 --> 00:27:40,260
a full component at fill navel

00:27:36,180 --> 00:27:44,970
throughout in ever since but we do far

00:27:40,260 --> 00:27:46,980
away from Sur and maybe maybe it's the

00:27:44,970 --> 00:27:48,900
way Cephas first bootstraps me but like

00:27:46,980 --> 00:27:51,180
this minute like c99 compiled like a

00:27:48,900 --> 00:27:53,940
minimal see that actually compiles with

00:27:51,180 --> 00:27:56,070
right maybe there's just like a CF CLI

00:27:53,940 --> 00:27:58,680
it's just like a bash script you say CF

00:27:56,070 --> 00:28:00,240
way only has two CF push but it takes

00:27:58,680 --> 00:28:02,700
the same input so usually would do and

00:28:00,240 --> 00:28:04,560
you use it the same way but it does it

00:28:02,700 --> 00:28:07,160
directly against arena or whatever I

00:28:04,560 --> 00:28:09,360
don't know what like you know whatever

00:28:07,160 --> 00:28:10,410
again this is why I really would because

00:28:09,360 --> 00:28:11,700
like you're writing like I don't think

00:28:10,410 --> 00:28:13,560
this is really really bad luck right I

00:28:11,700 --> 00:28:14,820
think this is in some other teams back

00:28:13,560 --> 00:28:17,400
while getting there's a team that needs

00:28:14,820 --> 00:28:20,400
to figure this out I think someone

00:28:17,400 --> 00:28:25,020
should figure out some some some path

00:28:20,400 --> 00:28:30,090
that lets us all try and dog food the CF

00:28:25,020 --> 00:28:32,760
thing and it probably looks like K pack

00:28:30,090 --> 00:28:35,580
and one or two other things the

00:28:32,760 --> 00:28:43,190
developers have to produce and some way

00:28:35,580 --> 00:28:43,190
of shipping those images source images a

00:28:45,770 --> 00:28:52,380
single user mode copies could be could

00:28:49,410 --> 00:28:55,860
be able to actually like take CF push

00:28:52,380 --> 00:28:57,990
for you a a and a multi user copy that

00:28:55,860 --> 00:29:01,530
and like this is the other one like

00:28:57,990 --> 00:29:03,570
right I mean maybe single user mode like

00:29:01,530 --> 00:29:05,040
maybe it's the interface to arre me

00:29:03,570 --> 00:29:06,630
which I think the problem should be in

00:29:05,040 --> 00:29:09,270
this another topic I've been at the

00:29:06,630 --> 00:29:13,860
interface between CC and arena was just

00:29:09,270 --> 00:29:15,090
a CID CC was creating then and CC just

00:29:13,860 --> 00:29:16,800
added like you AAA and all the nice

00:29:15,090 --> 00:29:19,500
stuff and all the other things around it

00:29:16,800 --> 00:29:21,480
then then the minimal

00:29:19,500 --> 00:29:24,080
CC if you see what I mean would just

00:29:21,480 --> 00:29:24,080
create a CID

00:29:33,060 --> 00:29:39,190
right just be the and you just create a

00:29:35,680 --> 00:29:52,600
really apps EOD with a reference to

00:29:39,190 --> 00:29:54,490
k-pax design image yeah I mean I think

00:29:52,600 --> 00:29:59,980
this seemed like attractive goals in

00:29:54,490 --> 00:30:01,960
terms of effectively dogfooding CF more

00:29:59,980 --> 00:30:05,260
for CF component development and

00:30:01,960 --> 00:30:06,730
deployment I do think we want to balance

00:30:05,260 --> 00:30:13,480
those against getting the system working

00:30:06,730 --> 00:30:15,460
and having it be stable yes you know you

00:30:13,480 --> 00:30:17,490
know if we have a self hosting platform

00:30:15,460 --> 00:30:21,070
that doesn't work very well then

00:30:17,490 --> 00:30:23,770
completely and yes yeah I I agree I

00:30:21,070 --> 00:30:26,560
think I think knowing where we want to

00:30:23,770 --> 00:30:28,990
go where we want to go we just figure

00:30:26,560 --> 00:30:31,930
out what's the minimal steps that's not

00:30:28,990 --> 00:30:35,070
taking us away from that which probably

00:30:31,930 --> 00:30:39,340
looks a lot like kpac and you know

00:30:35,070 --> 00:30:40,450
something pretty minimal about it but

00:30:39,340 --> 00:30:45,100
like properties or whatever

00:30:40,450 --> 00:30:48,730
I know Zack has been interested in

00:30:45,100 --> 00:30:50,980
promoting this line of dogfooding and

00:30:48,730 --> 00:30:54,670
reasoning on the component vendors as

00:30:50,980 --> 00:30:56,410
well so the I think I might have

00:30:54,670 --> 00:30:57,670
mentioned last time that the campi team

00:30:56,410 --> 00:31:00,250
has been doing a couple different tracks

00:30:57,670 --> 00:31:02,070
of work around both container izing

00:31:00,250 --> 00:31:05,590
Cloud Control or more directly and

00:31:02,070 --> 00:31:08,500
starting to produce a help chart for

00:31:05,590 --> 00:31:10,450
that at least in API mode so one they're

00:31:08,500 --> 00:31:14,110
also interested in integrating that into

00:31:10,450 --> 00:31:17,740
a larger CF distribution for their own

00:31:14,110 --> 00:31:19,540
CI integration but then there they've

00:31:17,740 --> 00:31:22,300
been interested in building that with

00:31:19,540 --> 00:31:24,250
cloud native build packs the sticking

00:31:22,300 --> 00:31:25,930
point for them is that there's no I

00:31:24,250 --> 00:31:28,000
don't think there's an officially

00:31:25,930 --> 00:31:30,010
supported or integrated Ruby cloud

00:31:28,000 --> 00:31:33,820
native built back yet

00:31:30,010 --> 00:31:36,400
that's somewhere on the CNB roadmap and

00:31:33,820 --> 00:31:38,740
I think there's like some early version

00:31:36,400 --> 00:31:40,929
of it but it like if you look at the

00:31:38,740 --> 00:31:42,910
builders that come with kpac it's not

00:31:40,929 --> 00:31:46,230
listed in that set yeah some think it's

00:31:42,910 --> 00:31:46,230
completely ready yet

00:31:47,290 --> 00:31:52,120
I mean along those lines type

00:31:48,640 --> 00:31:54,040
controllers also they have done some

00:31:52,120 --> 00:31:56,830
exploratory work see you integrate with

00:31:54,040 --> 00:31:58,179
KPAC itself to run staging tasks not

00:31:56,830 --> 00:32:02,200
that that would be required at this

00:31:58,179 --> 00:32:03,429
level for the kind of dogfooding that

00:32:02,200 --> 00:32:07,030
we're talking about for component

00:32:03,429 --> 00:32:08,380
development but it's at least on their

00:32:07,030 --> 00:32:10,120
radar and they're kind of figuring out

00:32:08,380 --> 00:32:11,620
where those seams are and you know that

00:32:10,120 --> 00:32:15,790
could start dragging in the k-pax

00:32:11,620 --> 00:32:29,620
resources as well as the core of that

00:32:15,790 --> 00:32:32,320
staging tasks infrastructure hey any

00:32:29,620 --> 00:32:34,870
more thoughts on that um maybe question

00:32:32,320 --> 00:32:38,950
two to gaben and Shannon like how how

00:32:34,870 --> 00:32:41,170
would things work with like it's still

00:32:38,950 --> 00:32:42,970
there in in that whole context would

00:32:41,170 --> 00:32:45,460
that be something that anyhow needs to

00:32:42,970 --> 00:32:48,490
be in the cluster already or is that

00:32:45,460 --> 00:32:53,770
like would that be compatible with Bill

00:32:48,490 --> 00:32:56,170
I guess not I don't have any

00:32:53,770 --> 00:32:59,650
pre-existing strong opinions about that

00:32:56,170 --> 00:33:01,210
I really like this idea of dogfooding I

00:32:59,650 --> 00:33:04,740
think if we ship source code it helps us

00:33:01,210 --> 00:33:07,660
all with a number of needs and so

00:33:04,740 --> 00:33:09,670
perhaps there's this is design pressure

00:33:07,660 --> 00:33:14,550
on whatever we're building here to be

00:33:09,670 --> 00:33:17,380
able to consume and deploy from source

00:33:14,550 --> 00:33:22,620
third-party dependencies like SDO for

00:33:17,380 --> 00:33:22,620
example it's an interesting thought

00:33:25,620 --> 00:33:31,809
which could run on kubernetes you don't

00:33:28,960 --> 00:33:34,330
want to make it dependent on CF right

00:33:31,809 --> 00:33:37,150
because what we really want is more

00:33:34,330 --> 00:33:39,670
communities and we want to keep the user

00:33:37,150 --> 00:33:41,710
experience from Cloud Foundry so I

00:33:39,670 --> 00:33:43,929
understand the dogfooding part because

00:33:41,710 --> 00:33:46,059
it puts a lot of pressure but they think

00:33:43,929 --> 00:33:50,000
the priority should be to run on one

00:33:46,059 --> 00:33:55,070
kubernetes and not to run on top foundry

00:33:50,000 --> 00:33:56,540
I feel like we're not saying that it's

00:33:55,070 --> 00:33:58,220
gonna require the whole Cloud Foundry

00:33:56,540 --> 00:34:00,320
there I think we're talking about using

00:33:58,220 --> 00:34:04,280
some of the core components that Cloud

00:34:00,320 --> 00:34:05,480
Foundry uses as a way of like deploying

00:34:04,280 --> 00:34:08,240
some of these essential system

00:34:05,480 --> 00:34:09,710
components right so like if you wanted

00:34:08,240 --> 00:34:12,250
to build your container image up some

00:34:09,710 --> 00:34:15,140
other way then you wouldn't need kpac

00:34:12,250 --> 00:34:17,180
right and and if it's the case that

00:34:15,140 --> 00:34:20,480
adding Cloud Foundry

00:34:17,180 --> 00:34:22,220
to occlude minetti's is too heavy way

00:34:20,480 --> 00:34:25,730
away to people to install all the other

00:34:22,220 --> 00:34:27,350
stuff that tells us something about CF

00:34:25,730 --> 00:34:29,180
being too heavy weight for people right

00:34:27,350 --> 00:34:31,400
if we wouldn't use it to deploy our

00:34:29,180 --> 00:34:34,430
stuff why would anyone else not have

00:34:31,400 --> 00:34:36,050
that problem right if I mean everyone

00:34:34,430 --> 00:34:37,250
else has the same problem of one thing

00:34:36,050 --> 00:34:38,930
in three key vanities makes it but not

00:34:37,250 --> 00:34:40,310
wanting to build a thing there's too

00:34:38,930 --> 00:34:45,050
tightly integrated to Cloud Foundry

00:34:40,310 --> 00:34:46,670
right we have to make Cloud Foundry in

00:34:45,050 --> 00:34:48,620
the same way that helmet or anything

00:34:46,670 --> 00:34:50,510
like that something that people are

00:34:48,620 --> 00:34:51,860
willing to install an sto and everything

00:34:50,510 --> 00:34:53,180
like that something that's lightweight

00:34:51,860 --> 00:34:55,610
enough that people and installed it on

00:34:53,180 --> 00:34:57,140
their clusters and that they're happy to

00:34:55,610 --> 00:34:59,330
use as an option to the post though I

00:34:57,140 --> 00:35:02,630
think and and and to the extent that it

00:34:59,330 --> 00:35:04,820
isn't I mean it means to be well but

00:35:02,630 --> 00:35:06,650
tend to for example I don't think

00:35:04,820 --> 00:35:08,840
anybody is happy to install it on their

00:35:06,650 --> 00:35:11,450
clothes that's why they do hand three

00:35:08,840 --> 00:35:14,300
right and it's nice and that

00:35:11,450 --> 00:35:15,950
that'sthat's that's why right now we're

00:35:14,300 --> 00:35:22,340
like home to and we need the design

00:35:15,950 --> 00:35:26,630
pressures to be like healthy I think do

00:35:22,340 --> 00:35:30,310
we have some um I know that I've heard

00:35:26,630 --> 00:35:34,340
anecdotes of Cloud Foundry being

00:35:30,310 --> 00:35:38,480
difficult to install because it requires

00:35:34,340 --> 00:35:42,650
Bosch knowledge and you need a really

00:35:38,480 --> 00:35:46,730
really large amount of vm's but if you

00:35:42,650 --> 00:35:49,540
have a couple of helm installs even now

00:35:46,730 --> 00:35:49,540
if it says CF

00:35:49,750 --> 00:35:57,280
how do you know that that's too heavy

00:35:53,320 --> 00:35:59,320
weight or that it's insufficient I'm

00:35:57,280 --> 00:36:00,910
really glad you asked because it gives

00:35:59,320 --> 00:36:01,510
me the opportunity to be really

00:36:00,910 --> 00:36:05,050
tongue-in-cheek

00:36:01,510 --> 00:36:06,730
I know by us consuming it

00:36:05,050 --> 00:36:08,890
anything's too heavy weight for us it's

00:36:06,730 --> 00:36:11,320
too heavy weight for everyone and it's

00:36:08,890 --> 00:36:13,780
not it's not I know that consuming it

00:36:11,320 --> 00:36:15,460
from a developer standpoint is can be

00:36:13,780 --> 00:36:18,280
quite tough especially if you want to

00:36:15,460 --> 00:36:19,750
switch stuff out and especially for SCF

00:36:18,280 --> 00:36:25,030
because it's going through the whole bar

00:36:19,750 --> 00:36:31,300
thing but as a day zero experience for a

00:36:25,030 --> 00:36:33,490
customer it's really easy really easy

00:36:31,300 --> 00:36:40,480
it's like to Helmand stalls and you got

00:36:33,490 --> 00:36:42,760
a CF 15 minutes later all right sorry I

00:36:40,480 --> 00:36:46,840
also wonder I mean if you're saying it's

00:36:42,760 --> 00:36:48,400
from the developer experience isn't it

00:36:46,840 --> 00:36:50,500
true that any of the operations level

00:36:48,400 --> 00:36:52,540
stuff is just too much and that's what

00:36:50,500 --> 00:36:56,980
makes cloud foundry great when somebody

00:36:52,540 --> 00:37:00,520
else has set it up already so I'm not

00:36:56,980 --> 00:37:02,740
sure what level of panacea we're trying

00:37:00,520 --> 00:37:04,810
right now you understand what you're

00:37:02,740 --> 00:37:08,490
saying jewels on the kpac model and such

00:37:04,810 --> 00:37:10,960
and good to explore that but I'm

00:37:08,490 --> 00:37:12,910
thinking that there's a little bit of a

00:37:10,960 --> 00:37:14,740
perception that oh look it's it's a

00:37:12,910 --> 00:37:18,190
slightly easier now is still going to be

00:37:14,740 --> 00:37:20,140
too much for some developers yeah it

00:37:18,190 --> 00:37:22,420
doesn't have to be perfect but I'd say

00:37:20,140 --> 00:37:25,270
it needs to pass and the dog free test

00:37:22,420 --> 00:37:27,520
that's all right I'm not saying these

00:37:25,270 --> 00:37:31,990
bees using the world but I'm saying if

00:37:27,520 --> 00:37:32,380
we are willing to use it then it's too

00:37:31,990 --> 00:37:35,980
heavy

00:37:32,380 --> 00:37:38,050
right if it's if it's if it's if it's

00:37:35,980 --> 00:37:41,339
you know heavy but we're willing to use

00:37:38,050 --> 00:37:41,339
it cool

00:37:46,510 --> 00:37:52,920
there might be applications of parts of

00:37:49,630 --> 00:37:55,830
god foundry where this is totally

00:37:52,920 --> 00:38:00,400
beneficial to go through the whole

00:37:55,830 --> 00:38:02,890
components we have in CF but I wouldn't

00:38:00,400 --> 00:38:05,470
want to force any teams not so cute

00:38:02,890 --> 00:38:08,200
native goat ahem shot in here done I

00:38:05,470 --> 00:38:10,300
think I think that's a really I think

00:38:08,200 --> 00:38:12,460
it's a really good example right I think

00:38:10,300 --> 00:38:15,040
what you're saying is completely valid

00:38:12,460 --> 00:38:16,690
and is identifying a requirement and

00:38:15,040 --> 00:38:19,390
that requirement is a lot of teams in

00:38:16,690 --> 00:38:22,770
order to UCS will require that there's a

00:38:19,390 --> 00:38:25,300
way to deploy their stuff without CF so

00:38:22,770 --> 00:38:27,640
given that we use in kpac we should make

00:38:25,300 --> 00:38:29,920
sure that it's possible for people to

00:38:27,640 --> 00:38:32,260
just directly deploy their things simply

00:38:29,920 --> 00:38:34,150
without goes to the CF stuff because

00:38:32,260 --> 00:38:35,530
that what you're saying is a requirement

00:38:34,150 --> 00:38:37,960
and a lot of our teams a lot of our

00:38:35,530 --> 00:38:39,460
developers will like the networking team

00:38:37,960 --> 00:38:41,560
I think should be producing something

00:38:39,460 --> 00:38:43,570
and garden cerny is going to try and

00:38:41,560 --> 00:38:46,930
produce something that can be usefully

00:38:43,570 --> 00:38:48,340
used outside CF right people should be

00:38:46,930 --> 00:38:51,040
asked just adopts our pods security

00:38:48,340 --> 00:38:54,640
policies if they want to if the thing we

00:38:51,040 --> 00:38:56,860
produce can only point with CF we won't

00:38:54,640 --> 00:38:59,890
be able to do that goal therefore we're

00:38:56,860 --> 00:39:03,820
going to get a requirement that it's

00:38:59,890 --> 00:39:06,280
easy to go from this stuff without the

00:39:03,820 --> 00:39:09,250
whole CF I think it's a it's actually

00:39:06,280 --> 00:39:12,700
you know an exception the presa rule I

00:39:09,250 --> 00:39:15,970
mean and I mean if we would need to

00:39:12,700 --> 00:39:18,520
force CF component developers to use CF

00:39:15,970 --> 00:39:19,240
instead of doing the kubernetes way then

00:39:18,520 --> 00:39:22,090
we have a problem

00:39:19,240 --> 00:39:24,610
yes and why should anybody elves want to

00:39:22,090 --> 00:39:27,430
use CF instead of yes when it is native

00:39:24,610 --> 00:39:30,130
yes and I'll go further I'll go further

00:39:27,430 --> 00:39:32,800
I bet we do have that problem I bet we

00:39:30,130 --> 00:39:34,510
do have that problem and I want to fix

00:39:32,800 --> 00:39:37,060
that problem but the only way we'll

00:39:34,510 --> 00:39:41,140
figure out where those problems are I

00:39:37,060 --> 00:39:52,840
think is by feeding them like we need

00:39:41,140 --> 00:39:59,869
the embassy right now I feel like I need

00:39:52,840 --> 00:40:05,210
to think about it more I think deploying

00:39:59,869 --> 00:40:08,960
çf components on cf is not a hundred

00:40:05,210 --> 00:40:12,529
percent the same thing as the value

00:40:08,960 --> 00:40:17,539
proposition where we we're proposing to

00:40:12,529 --> 00:40:20,720
our customers I mean probably the case

00:40:17,539 --> 00:40:22,970
in fact I mean no it's not only probably

00:40:20,720 --> 00:40:24,950
the case right it is the case that we

00:40:22,970 --> 00:40:29,740
will also need a unified CF and a way to

00:40:24,950 --> 00:40:31,940
deploy old I would hope that days today

00:40:29,740 --> 00:40:33,680
developers just use CF to deploy new

00:40:31,940 --> 00:40:36,859
versions and have that developed

00:40:33,680 --> 00:40:39,019
productivity and again in the same way

00:40:36,859 --> 00:40:40,430
that we will have a requirement that as

00:40:39,019 --> 00:40:42,559
well as doing that we're gonna wanna

00:40:40,430 --> 00:40:44,289
package up the whole thing and be able

00:40:42,559 --> 00:40:47,450
to install in places as a hound chart

00:40:44,289 --> 00:40:48,920
every CF uses no intimacy app users will

00:40:47,450 --> 00:40:49,970
have the same requirement and we're

00:40:48,920 --> 00:40:51,769
gonna need to solve that requirement

00:40:49,970 --> 00:40:54,140
from the Maya I think one of the

00:40:51,769 --> 00:40:56,329
problems CF has is that it doesn't have

00:40:54,140 --> 00:40:58,609
a good answer to that story of how do i

00:40:56,329 --> 00:41:00,680
package up all my CF Micra service i got

00:40:58,609 --> 00:41:03,499
this it was really fast to develop them

00:41:00,680 --> 00:41:06,829
and it was low barrier my time to first

00:41:03,499 --> 00:41:08,390
win was really low but how do i package

00:41:06,829 --> 00:41:10,130
the it all up in a way that makes sense

00:41:08,390 --> 00:41:12,200
and put it in the Hound chart we don't

00:41:10,130 --> 00:41:14,749
have a good answer to that today but we

00:41:12,200 --> 00:41:16,309
should and the answer might well be that

00:41:14,749 --> 00:41:18,529
I can take a set of these things week a

00:41:16,309 --> 00:41:20,799
pack and whatever and easily convert it

00:41:18,529 --> 00:41:25,279
into a thing that your generic operator

00:41:20,799 --> 00:41:29,239
can then install and run I'm not sure I

00:41:25,279 --> 00:41:38,470
agree there Julian I understand empathy

00:41:29,239 --> 00:41:41,599
being software that can be CF pushed

00:41:38,470 --> 00:41:47,550
back to going somewhere there's

00:41:41,599 --> 00:41:51,530
sentiments that that I heard here yes

00:41:47,550 --> 00:41:55,920
if we're developing CF to enable

00:41:51,530 --> 00:41:58,800
enterprise software developers to push

00:41:55,920 --> 00:41:59,190
helm charts to kubernetes or missing the

00:41:58,800 --> 00:42:02,040
point

00:41:59,190 --> 00:42:05,670
oh yeah sorry I'm not saying that's what

00:42:02,040 --> 00:42:10,080
CS is for I'm saying if it's if it's not

00:42:05,670 --> 00:42:12,960
possible to take the thing if there

00:42:10,080 --> 00:42:16,320
isn't an easy way to involve your thing

00:42:12,960 --> 00:42:18,720
right you used CS but now you want to

00:42:16,320 --> 00:42:20,310
take that thing that you produced and

00:42:18,720 --> 00:42:24,840
packaged it up so another person can

00:42:20,310 --> 00:42:26,700
consume it that seems like a problem I I

00:42:24,840 --> 00:42:28,080
mean I think it's a common problem I

00:42:26,700 --> 00:42:30,120
think one of the reasons people really

00:42:28,080 --> 00:42:35,540
like docker and helm and all these

00:42:30,120 --> 00:42:35,540
things is because as well as it being

00:42:36,080 --> 00:42:39,120
consumable by them they can give it

00:42:37,890 --> 00:42:40,350
someone else they can listen on their

00:42:39,120 --> 00:42:43,020
class when it'll work the same way I

00:42:40,350 --> 00:42:50,940
know I haven't seen this problem I'm

00:42:43,020 --> 00:42:53,070
aware that the users of CF produce

00:42:50,940 --> 00:42:57,840
source code and an application manifest

00:42:53,070 --> 00:43:00,030
and it works absolutely does as long as

00:42:57,840 --> 00:43:01,560
you've got one of them there's something

00:43:00,030 --> 00:43:03,180
you've got one application that it

00:43:01,560 --> 00:43:06,920
doesn't work if you'd spread across like

00:43:03,180 --> 00:43:14,400
a multiple repos for example I want to

00:43:06,920 --> 00:43:16,710
ask one more question I know that it's

00:43:14,400 --> 00:43:21,840
important for each project to be able to

00:43:16,710 --> 00:43:24,120
stand on its own not because there might

00:43:21,840 --> 00:43:26,030
be third parties that are interested in

00:43:24,120 --> 00:43:30,890
consuming them but because I think

00:43:26,030 --> 00:43:35,190
should have clearer API contract and

00:43:30,890 --> 00:43:40,670
yeah loosely coupled architecture I do

00:43:35,190 --> 00:43:44,640
remember the latest in food I think

00:43:40,670 --> 00:43:47,160
because I remember thinking that having

00:43:44,640 --> 00:43:51,510
a contract between the car controller

00:43:47,160 --> 00:43:56,370
and yeah good idea but it didn't take

00:43:51,510 --> 00:43:59,370
off and and I think it also required a

00:43:56,370 --> 00:44:05,100
lot of resources to you know to maintain

00:43:59,370 --> 00:44:08,370
the project so yeah I think if you know

00:44:05,100 --> 00:44:11,550
if you have all the pieces that are good

00:44:08,370 --> 00:44:13,140
and you also integrate them very well no

00:44:11,550 --> 00:44:15,150
one will care about the individuals

00:44:13,140 --> 00:44:19,590
anymore there they will always want the

00:44:15,150 --> 00:44:21,690
entire thing the whole cake like if I if

00:44:19,590 --> 00:44:24,810
we have a really good logging solution

00:44:21,690 --> 00:44:30,480
and we have a really good scheduling

00:44:24,810 --> 00:44:34,980
system and we have a good thing it will

00:44:30,480 --> 00:44:40,140
always take the whole pie I'm not sure

00:44:34,980 --> 00:44:43,680
that's I mean that doesn't that wasn't

00:44:40,140 --> 00:44:45,690
the case for takoyaki Bernanke's my

00:44:43,680 --> 00:44:47,250
daugher was all about batteries included

00:44:45,690 --> 00:44:57,690
but tons of people swap the batteries

00:44:47,250 --> 00:45:00,720
your tow Cuban is just about the

00:44:57,690 --> 00:45:04,260
container mechanism I will say the

00:45:00,720 --> 00:45:06,300
finger so I think about lattice lattice

00:45:04,260 --> 00:45:06,870
didn't work I think we took the wrong

00:45:06,300 --> 00:45:09,870
message

00:45:06,870 --> 00:45:12,870
from that I'm honest I think lattice was

00:45:09,870 --> 00:45:14,520
multi-touch phones before the iPhone and

00:45:12,870 --> 00:45:18,030
and we had a multi-touch phone they

00:45:14,520 --> 00:45:19,820
didn't work and we took the message that

00:45:18,030 --> 00:45:23,220
there's no value in multi-touch funds

00:45:19,820 --> 00:45:28,200
and the actual answer was a lot such

00:45:23,220 --> 00:45:31,920
phonesat and we hadn't done it right the

00:45:28,200 --> 00:45:33,410
the the the fact that lattice fails

00:45:31,920 --> 00:45:36,060
doesn't mean that it's not a good idea

00:45:33,410 --> 00:45:40,260
to of course I have all components be

00:45:36,060 --> 00:45:42,540
independent conceivable it means that

00:45:40,260 --> 00:45:45,030
that component didn't take off and that

00:45:42,540 --> 00:45:47,730
was a that was a yeah piece of knowledge

00:45:45,030 --> 00:45:49,590
that we I didn't mean the architecture

00:45:47,730 --> 00:45:53,400
part I think the architecture we should

00:45:49,590 --> 00:45:56,610
keep that I just meant you know trying

00:45:53,400 --> 00:45:59,370
to market the component right right as a

00:45:56,610 --> 00:46:02,150
reusable project you know things like

00:45:59,370 --> 00:46:04,339
that right I think

00:46:02,150 --> 00:46:07,549
the components should be reusable on

00:46:04,339 --> 00:46:12,619
their own but right I feel like we

00:46:07,549 --> 00:46:14,869
shouldn't expect or make it or consider

00:46:12,619 --> 00:46:17,809
it a failure if you know third parties

00:46:14,869 --> 00:46:22,940
don't adopt them oh yeah yes completely

00:46:17,809 --> 00:46:24,559
IIIi mean yeah I think we should make it

00:46:22,940 --> 00:46:27,289
possible that some of these will take

00:46:24,559 --> 00:46:28,759
off but not all looking will I'd not

00:46:27,289 --> 00:46:33,019
want to look at their own ecosystem

00:46:28,759 --> 00:46:35,180
around them but you know you lose every

00:46:33,019 --> 00:46:37,279
game you don't play I guess maybe the

00:46:35,180 --> 00:46:39,410
matter of priorities and I would suggest

00:46:37,279 --> 00:46:41,359
that anybody in developing a component

00:46:39,410 --> 00:46:43,369
which contributes to Cloud Foundry as a

00:46:41,359 --> 00:46:45,470
whole should be prioritizing the

00:46:43,369 --> 00:46:52,160
outcomes the Cloud Foundry delivers yes

00:46:45,470 --> 00:46:55,930
over any hope or ideas that the

00:46:52,160 --> 00:47:00,529
component could be used on its own so

00:46:55,930 --> 00:47:04,029
they should prioritize it I agree as far

00:47:00,529 --> 00:47:06,769
as that they should prioritize it one

00:47:04,029 --> 00:47:08,749
strengths and weakness of the way we

00:47:06,769 --> 00:47:10,400
build software is if we don't

00:47:08,749 --> 00:47:12,319
intentionally do something we are very

00:47:10,400 --> 00:47:14,150
good at not doing it you see what I mean

00:47:12,319 --> 00:47:15,440
and the whole the whole process is based

00:47:14,150 --> 00:47:17,359
around not doing anything you didn't

00:47:15,440 --> 00:47:20,359
intensity so that the only way we'll

00:47:17,359 --> 00:47:22,369
ever spend any efforts on even being

00:47:20,359 --> 00:47:23,509
possible that any of these things will

00:47:22,369 --> 00:47:25,999
be independent consumable is

00:47:23,509 --> 00:47:29,450
intentionally which is how it should

00:47:25,999 --> 00:47:31,670
think right but it also means that if we

00:47:29,450 --> 00:47:35,720
don't do that we won't do that what I

00:47:31,670 --> 00:47:38,599
would say is it is it's not the main

00:47:35,720 --> 00:47:40,569
goal of any project but I think every

00:47:38,599 --> 00:47:45,849
project should be spending some effort

00:47:40,569 --> 00:47:45,849
not all laughter that's a matter on

00:47:45,920 --> 00:47:49,910
[Music]

00:47:47,890 --> 00:47:51,619
there being the possibility of an

00:47:49,910 --> 00:47:54,289
ecosystem around I think because

00:47:51,619 --> 00:47:57,710
otherwise they all get replaced and then

00:47:54,289 --> 00:48:03,049
we play catch-up and that seemed it's

00:47:57,710 --> 00:48:05,089
just strategically sits just with 10%

00:48:03,049 --> 00:48:07,519
more efforts there's a very good chance

00:48:05,089 --> 00:48:08,960
of a very good return I think it's worth

00:48:07,519 --> 00:48:11,390
more in those tights and a few projects

00:48:08,960 --> 00:48:13,549
I I see it like from the networking

00:48:11,390 --> 00:48:15,170
standpoint what we're doing is barely

00:48:13,549 --> 00:48:15,859
developing and anything new we're just

00:48:15,170 --> 00:48:17,029
integrating

00:48:15,859 --> 00:48:18,769
existing stuff like we're gonna

00:48:17,029 --> 00:48:21,619
integrate this existing open sources the

00:48:18,769 --> 00:48:23,239
other thing into this existing ireenie

00:48:21,619 --> 00:48:24,829
thing and just try to a stirring it

00:48:23,239 --> 00:48:26,630
together so it works and expose as many

00:48:24,829 --> 00:48:29,630
servers much features as we can in a

00:48:26,630 --> 00:48:31,789
reasonable way and so I don't see that

00:48:29,630 --> 00:48:35,299
integration itself as being a whole lot

00:48:31,789 --> 00:48:37,940
of value on its own um I see us working

00:48:35,299 --> 00:48:41,440
in service of this larger goal of the

00:48:37,940 --> 00:48:45,529
whole thing being useful as a nexus

00:48:41,440 --> 00:48:49,099
imagine Jules is referring to components

00:48:45,529 --> 00:48:51,499
that may have been purpose-built for or

00:48:49,099 --> 00:48:54,289
maybe in the future purpose-built for CF

00:48:51,499 --> 00:48:56,420
and and them having potential life of

00:48:54,289 --> 00:49:00,869
their own like

00:48:56,420 --> 00:49:02,279
right right you a a it's a big example I

00:49:00,869 --> 00:49:03,719
think kpac are doing the exact right

00:49:02,279 --> 00:49:06,809
thing right the fact that bill packs

00:49:03,719 --> 00:49:09,869
were only consumable inside before you

00:49:06,809 --> 00:49:12,029
know it was the right thing for CF but

00:49:09,869 --> 00:49:13,859
had bill packets earlier spend more time

00:49:12,029 --> 00:49:15,719
making that something that could have

00:49:13,859 --> 00:49:19,019
had its own thing around them I think

00:49:15,719 --> 00:49:22,380
that would have been valuable never King

00:49:19,019 --> 00:49:25,349
III don't know yeah I don't have enough

00:49:22,380 --> 00:49:26,819
context really comment I would I would

00:49:25,349 --> 00:49:30,359
say with a little tongue achievement

00:49:26,819 --> 00:49:33,960
that much there I don't know what came

00:49:30,359 --> 00:49:35,969
into means other than an interface on

00:49:33,960 --> 00:49:40,049
top of sto that makes us very slightly

00:49:35,969 --> 00:49:42,210
easier to configure you know you know

00:49:40,049 --> 00:49:43,769
then using instead of kid any money

00:49:42,210 --> 00:49:46,140
right all right then now an infection

00:49:43,769 --> 00:49:48,869
about it I think that we could

00:49:46,140 --> 00:49:50,039
underestimate the value of a high level

00:49:48,869 --> 00:49:52,140
API to some of these things that

00:49:50,039 --> 00:49:53,309
simplify stuff but I don't know that

00:49:52,140 --> 00:49:55,349
much about the networking stuff so I

00:49:53,309 --> 00:49:59,670
don't really know but it feels to me

00:49:55,349 --> 00:50:00,989
like those plausible value in something

00:49:59,670 --> 00:50:02,219
that makes it easy to configure the

00:50:00,989 --> 00:50:04,200
networking stuff because the networking

00:50:02,219 --> 00:50:07,559
is that it's real hard if you haven't

00:50:04,200 --> 00:50:09,900
been close to it for a while we could

00:50:07,559 --> 00:50:14,460
have a public API that allows you to

00:50:09,900 --> 00:50:18,960
associate routes with applications we've

00:50:14,460 --> 00:50:20,489
got well I mean I would say if we split

00:50:18,960 --> 00:50:21,900
that up right like I would like to be

00:50:20,489 --> 00:50:24,450
able to consume a public API that lets

00:50:21,900 --> 00:50:26,940
me associate routes with apps and

00:50:24,450 --> 00:50:28,469
services without necessarily needing the

00:50:26,940 --> 00:50:30,779
whole rest of CF and I think there would

00:50:28,469 --> 00:50:32,400
be quite a good use case least to me

00:50:30,779 --> 00:50:35,249
right I think there's lots of people

00:50:32,400 --> 00:50:37,140
with their own stuff deployed the stuff

00:50:35,249 --> 00:50:40,650
that they're happy with that would like

00:50:37,140 --> 00:50:42,059
this nice easy API that does the stuff

00:50:40,650 --> 00:50:43,259
they're networking that so that makes it

00:50:42,059 --> 00:50:47,910
easy to do contain a networking

00:50:43,259 --> 00:50:50,009
configures the network I feel like I

00:50:47,910 --> 00:50:52,220
join this conversation about halfway

00:50:50,009 --> 00:50:54,650
through and I'm kind of

00:50:52,220 --> 00:50:58,069
wondering about the goal of the

00:50:54,650 --> 00:50:59,750
conversation at the moment it's it's

00:50:58,069 --> 00:51:05,329
been rambling about a few different

00:50:59,750 --> 00:51:11,420
things we we have drifted we started out

00:51:05,329 --> 00:51:13,430
on release integration we all want ICF

00:51:11,420 --> 00:51:17,180
we don't want to know how to deploy CF

00:51:13,430 --> 00:51:22,849
on kubernetes okay and my takeaways here

00:51:17,180 --> 00:51:27,980
are it sounds like Vlad is working on

00:51:22,849 --> 00:51:31,550
something called CF q where q CF and

00:51:27,980 --> 00:51:35,060
they have pipelines and I would expect

00:51:31,550 --> 00:51:37,130
that anybody who from pivotal or

00:51:35,060 --> 00:51:41,000
otherwise wants to contribute to our

00:51:37,130 --> 00:51:43,040
dream of having some one place and one

00:51:41,000 --> 00:51:46,550
artifact of way of easy way of deploying

00:51:43,040 --> 00:51:48,890
CFM kubernetes might contribute to

00:51:46,550 --> 00:51:53,990
collaborate with or learn from what glad

00:51:48,890 --> 00:51:56,720
is doing those are all designed to

00:51:53,990 --> 00:52:01,520
integrate with I mean those feet into CF

00:51:56,720 --> 00:52:03,050
operator right and so I mean as we're

00:52:01,520 --> 00:52:06,859
talking about like the heavy witness of

00:52:03,050 --> 00:52:08,210
the system if that's potentially part of

00:52:06,859 --> 00:52:13,089
the concern is like well how much

00:52:08,210 --> 00:52:16,310
additional machinery is there that is

00:52:13,089 --> 00:52:19,400
required to run what we think of as CF

00:52:16,310 --> 00:52:21,260
is this package solution so I guess one

00:52:19,400 --> 00:52:23,150
question that I that was coming to mind

00:52:21,260 --> 00:52:24,310
to me as we're talking about like okay

00:52:23,150 --> 00:52:27,410
how are we going to interleave

00:52:24,310 --> 00:52:28,880
lower-level kubernetes resources like

00:52:27,410 --> 00:52:30,500
let's say we get to the point where we

00:52:28,880 --> 00:52:32,720
end up actually just having a collection

00:52:30,500 --> 00:52:37,670
of helm charts like we've cut out all of

00:52:32,720 --> 00:52:39,920
the Bosh pieces of that and we have help

00:52:37,670 --> 00:52:42,440
charts that are deploying lower-level

00:52:39,920 --> 00:52:46,970
kubernetes resources whether they're you

00:52:42,440 --> 00:52:49,250
know deployments or CR DS or su virtual

00:52:46,970 --> 00:52:52,010
services or whatever but none of the

00:52:49,250 --> 00:52:53,599
custom things that CF operator is

00:52:52,010 --> 00:52:55,069
managing you know either the boss

00:52:53,599 --> 00:52:57,770
deployment or some of the extended

00:52:55,069 --> 00:53:00,020
resources that it defines as lower level

00:52:57,770 --> 00:53:01,550
targets like at that point with the

00:53:00,020 --> 00:53:04,630
dependence on CF operator just go away

00:53:01,550 --> 00:53:04,630
would all be client-side

00:53:05,600 --> 00:53:15,890
I think you still need an operator for

00:53:12,710 --> 00:53:18,170
lifecycle management so when some

00:53:15,890 --> 00:53:23,810
component changes you want to restart

00:53:18,170 --> 00:53:25,970
other components and well I think also

00:53:23,810 --> 00:53:30,320
the installation the initial deployment

00:53:25,970 --> 00:53:32,330
is complicated enough so that you don't

00:53:30,320 --> 00:53:35,690
want to do it with the with the hand

00:53:32,330 --> 00:53:37,960
shots because of the dependencies and my

00:53:35,690 --> 00:53:40,420
figuration and all of it

00:53:37,960 --> 00:53:44,000
yeah we could probably say that with

00:53:40,420 --> 00:53:47,450
some experience I mean you know we're

00:53:44,000 --> 00:53:49,640
talking a lot about this is all the work

00:53:47,450 --> 00:53:51,320
that that Bosh had done over time and

00:53:49,640 --> 00:53:53,570
now we're just trying to figure out hey

00:53:51,320 --> 00:53:55,130
what does kubernetes actually subsume

00:53:53,570 --> 00:53:57,620
and what does it not because it doesn't

00:53:55,130 --> 00:53:58,730
do everything or it's learning to do new

00:53:57,620 --> 00:54:01,040
things

00:53:58,730 --> 00:54:05,060
so it is a moving target at the same

00:54:01,040 --> 00:54:07,670
time and that's kind of what we're we're

00:54:05,060 --> 00:54:11,510
kind of covering it how much of that

00:54:07,670 --> 00:54:14,060
dependency ordering is is due to the

00:54:11,510 --> 00:54:16,180
Bosch chrome around the components

00:54:14,060 --> 00:54:18,920
themselves versus the inherent

00:54:16,180 --> 00:54:23,900
dependencies of the like the essential

00:54:18,920 --> 00:54:28,580
features of the components yes I think

00:54:23,900 --> 00:54:30,680
like many of the things sorry I think

00:54:28,580 --> 00:54:32,660
like many of the things that we

00:54:30,680 --> 00:54:36,500
currently see in the bottle asus in CF

00:54:32,660 --> 00:54:38,180
deployment out the air because of

00:54:36,500 --> 00:54:40,640
historic reasons right

00:54:38,180 --> 00:54:43,160
our boss gave you an interface to do

00:54:40,640 --> 00:54:45,320
certain things in a certain way it has

00:54:43,160 --> 00:54:48,440
like certain lifecycle hooks people tend

00:54:45,320 --> 00:54:51,260
to put stuff in there you have a way to

00:54:48,440 --> 00:54:54,500
like block until something happens so

00:54:51,260 --> 00:54:58,520
you do it you have a way to have an

00:54:54,500 --> 00:55:00,890
enforced ordering in the update like

00:54:58,520 --> 00:55:03,140
during an update in your manifest so you

00:55:00,890 --> 00:55:04,220
do it you have a way to switch it on

00:55:03,140 --> 00:55:06,320
serial true

00:55:04,220 --> 00:55:08,930
right to say like hey I want to have

00:55:06,320 --> 00:55:12,050
these things updated in serial don't do

00:55:08,930 --> 00:55:13,700
whatever in parallel so you do it like

00:55:12,050 --> 00:55:17,570
kubernetes doesn't expose many of these

00:55:13,700 --> 00:55:19,400
switches um only an open operator right

00:55:17,570 --> 00:55:21,049
whiny

00:55:19,400 --> 00:55:24,319
how many of the sweet teas the good

00:55:21,049 --> 00:55:26,390
ideas yeah exactly like suppose we took

00:55:24,319 --> 00:55:27,980
the mindset of kubernetes native

00:55:26,390 --> 00:55:29,720
developer who says we're not going to

00:55:27,980 --> 00:55:32,210
put an explicit dependency ordering

00:55:29,720 --> 00:55:34,339
instead we're going to expose a status

00:55:32,210 --> 00:55:36,230
on our resource that indicates whether

00:55:34,339 --> 00:55:38,450
we're healthy or not and if not the

00:55:36,230 --> 00:55:40,039
reason why we're not healthy and then we

00:55:38,450 --> 00:55:41,680
can just deploy everything at once and

00:55:40,039 --> 00:55:43,970
wait for it to all become healthy as

00:55:41,680 --> 00:55:45,319
sort of components come up and resolve

00:55:43,970 --> 00:55:48,230
themselves like if we threw away all

00:55:45,319 --> 00:55:49,700
that legacy garbage wouldn't we end up

00:55:48,230 --> 00:55:56,930
with a simpler and easier to deploy

00:55:49,700 --> 00:55:59,240
system yeah I mean this is exactly what

00:55:56,930 --> 00:56:01,579
I was getting I wasn't advocating for

00:55:59,240 --> 00:56:04,190
hey we need to now find a way to build

00:56:01,579 --> 00:56:07,069
lots of custom code to replicate this

00:56:04,190 --> 00:56:11,720
exact functionality um my opinion is

00:56:07,069 --> 00:56:14,390
exactly be the opposite it's it's really

00:56:11,720 --> 00:56:18,230
that I think we can't throw away like

00:56:14,390 --> 00:56:20,599
most of this stuff to some extent I

00:56:18,230 --> 00:56:22,819
think like all of those scripts are

00:56:20,599 --> 00:56:24,859
there like for a reason right people

00:56:22,819 --> 00:56:27,829
figured out a way how to operate their

00:56:24,859 --> 00:56:30,589
component in like one situation or

00:56:27,829 --> 00:56:33,019
another okay something needs to be done

00:56:30,589 --> 00:56:35,049
before you shutdown stuff okay there is

00:56:33,019 --> 00:56:36,859
a drain script let me put stuff in there

00:56:35,049 --> 00:56:40,160
obviously you would do things

00:56:36,859 --> 00:56:43,549
differently when you're creating a

00:56:40,160 --> 00:56:45,829
kubernetes native application and that

00:56:43,549 --> 00:56:47,599
makes perfect sense right I don't want

00:56:45,829 --> 00:56:50,029
to like advocate for hey and it's all

00:56:47,599 --> 00:56:52,009
build now custom go code to replicate

00:56:50,029 --> 00:56:55,369
whatever the boss directory used to do

00:56:52,009 --> 00:56:58,009
during an update that's like the exact

00:56:55,369 --> 00:57:00,980
exact opposite of what I would like to

00:56:58,009 --> 00:57:04,069
achieve I think like one thing that I

00:57:00,980 --> 00:57:07,249
would add to that like all these

00:57:04,069 --> 00:57:09,859
runtimes features of Bosch are very

00:57:07,249 --> 00:57:13,039
useful and they have dictated the design

00:57:09,859 --> 00:57:18,369
of components but I think one main

00:57:13,039 --> 00:57:20,900
aspect of Bosch that we don't have a

00:57:18,369 --> 00:57:23,569
counterpart even now

00:57:20,900 --> 00:57:26,960
with the operator is the release

00:57:23,569 --> 00:57:29,119
integration piece exactly what we're

00:57:26,960 --> 00:57:33,950
talking about which is CF deployment it

00:57:29,119 --> 00:57:35,299
gives you this way to bring out all the

00:57:33,950 --> 00:57:36,019
software and make sure that it works

00:57:35,299 --> 00:57:40,549
every time

00:57:36,019 --> 00:57:43,819
and as I said I haven't seen yet so if

00:57:40,549 --> 00:57:46,759
anyone knows please let me know of a

00:57:43,819 --> 00:57:50,029
system on kubernetes that's as complex

00:57:46,759 --> 00:57:51,799
as Cloud Foundry being deployed with any

00:57:50,029 --> 00:57:56,859
mechanism whether it's helm charts or

00:57:51,799 --> 00:57:59,210
whatever I haven't seen one project

00:57:56,859 --> 00:58:01,240
containing so much software being

00:57:59,210 --> 00:58:04,009
deployed with one helm install and

00:58:01,240 --> 00:58:11,170
having a day zero and the day one and at

00:58:04,009 --> 00:58:11,170
the end and secret rotation and you know

00:58:11,680 --> 00:58:17,660
configuration and cascading updates to

00:58:15,650 --> 00:58:19,819
get the system up to date and so on I

00:58:17,660 --> 00:58:25,150
don't think there's anything out there

00:58:19,819 --> 00:58:27,650
that does that I actually hate to like

00:58:25,150 --> 00:58:30,259
stop the discussion at at this point but

00:58:27,650 --> 00:58:33,230
looking at the time I think like people

00:58:30,259 --> 00:58:35,960
might need in for the next meeting but

00:58:33,230 --> 00:58:38,059
like I think at this point and I believe

00:58:35,960 --> 00:58:41,480
we had a similar point for the folks

00:58:38,059 --> 00:58:44,170
that were in kind of discussing I think

00:58:41,480 --> 00:58:47,450
at that point there was this like

00:58:44,170 --> 00:58:50,569
different views on the topic where I

00:58:47,450 --> 00:58:52,880
believe like we don't have kind of

00:58:50,569 --> 00:58:55,460
enough common context to basically say

00:58:52,880 --> 00:58:57,349
how to take that part forward so how to

00:58:55,460 --> 00:58:59,930
take like those individual hand charts

00:58:57,349 --> 00:59:01,369
and it's and what's needed to kind of

00:58:59,930 --> 00:59:04,069
get them together to something that

00:59:01,369 --> 00:59:07,460
looks like see if deployment today and

00:59:04,069 --> 00:59:10,339
if if and how that that is required to

00:59:07,460 --> 00:59:12,079
kind of integrate offices so maybe

00:59:10,339 --> 00:59:14,660
that's then kind of the starting point

00:59:12,079 --> 00:59:17,960
for for the next discussion is as I

00:59:14,660 --> 00:59:20,089
believe that is like closely related to

00:59:17,960 --> 00:59:23,599
to the rel in topic that we actually

00:59:20,089 --> 00:59:26,420
started with to you this point so we

00:59:23,599 --> 00:59:28,670
might consider taking that as a starting

00:59:26,420 --> 00:59:31,039
point for for the next moon

00:59:28,670 --> 00:59:33,559
having said that thank you very much

00:59:31,039 --> 00:59:35,660
also to an anonymous author I'm kind of

00:59:33,559 --> 00:59:39,410
assuming that his sworn are taking notes

00:59:35,660 --> 00:59:41,390
there but I was like glancing at at the

00:59:39,410 --> 00:59:44,150
Google Doc and it actually accrued

00:59:41,390 --> 00:59:46,099
accurately reflects the discussion here

00:59:44,150 --> 00:59:47,420
it's kind of hard to follow the

00:59:46,099 --> 00:59:49,960
discussion and take notes at the same

00:59:47,420 --> 00:59:52,970
time I think I was mostly me there oh

00:59:49,960 --> 00:59:55,930
thanks so you were actually able to

00:59:52,970 --> 01:00:02,539
follow the discussion contribute and

00:59:55,930 --> 01:00:04,700
some of it yeah okay then thanks

01:00:02,539 --> 01:00:07,809
everybody I'll set up the poll for for

01:00:04,700 --> 01:00:11,079
the next time and kind of add that topic

01:00:07,809 --> 01:00:11,079

YouTube URL: https://www.youtube.com/watch?v=qhx021U0B1Q


