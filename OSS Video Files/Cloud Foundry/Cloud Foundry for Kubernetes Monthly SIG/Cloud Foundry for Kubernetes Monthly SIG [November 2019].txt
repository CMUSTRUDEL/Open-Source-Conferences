Title: Cloud Foundry for Kubernetes Monthly SIG [November 2019]
Publication date: 2019-11-27
Playlist: Cloud Foundry for Kubernetes Monthly SIG
Description: 
	
Captions: 
	00:00:09,299 --> 00:00:21,150
I spent a mint chemical just a couple of

00:00:19,949 --> 00:00:26,309
minutes away from home

00:00:21,150 --> 00:00:29,450
awesome a bit related irrelevant yeah

00:00:26,309 --> 00:00:35,579
just just an update

00:00:29,450 --> 00:00:37,710
all right cool thanks um should we so

00:00:35,579 --> 00:00:41,430
basically we have two options now we can

00:00:37,710 --> 00:00:45,030
either if Shannon knows if and what

00:00:41,430 --> 00:00:48,300
happened at inception for the railing

00:00:45,030 --> 00:00:50,730
team we could talk about this or switch

00:00:48,300 --> 00:00:54,739
to like the next topic within the next

00:00:50,730 --> 00:00:58,739
most votes which was CRD all the things

00:00:54,739 --> 00:01:01,410
proposed by Jules who also isn't here

00:00:58,739 --> 00:01:05,790
but a few of the Iranian people are here

00:01:01,410 --> 00:01:08,180
so potentially um they want to talk

00:01:05,790 --> 00:01:08,180
about it

00:01:13,100 --> 00:01:22,390
so Shannon okay yeah I was about to ask

00:01:17,960 --> 00:01:25,340
Shannon do you have any idea if an

00:01:22,390 --> 00:01:28,100
inception in the Relin team happened and

00:01:25,340 --> 00:01:31,340
if so what happened there regarding

00:01:28,100 --> 00:01:34,729
resident 4cf encase hi Marco

00:01:31,340 --> 00:01:39,500
no I think the plan has been that the

00:01:34,729 --> 00:01:44,750
that inception would happen after this

00:01:39,500 --> 00:01:48,320
week my oh I see Mike was that that the

00:01:44,750 --> 00:01:58,759
relic team would start exploring see if

00:01:48,320 --> 00:02:00,320
on Kate's next week okay thanks okay

00:01:58,759 --> 00:02:02,450
next I haven't turns out into

00:02:00,320 --> 00:02:05,500
Thanksgiving week yeah I haven't heard

00:02:02,450 --> 00:02:08,630
about a inception meeting scheduled yet

00:02:05,500 --> 00:02:14,300
I think a bunch of us would like to

00:02:08,630 --> 00:02:19,100
attend my expectation is that we'll hear

00:02:14,300 --> 00:02:20,150
about it when when is scheduled all

00:02:19,100 --> 00:02:24,050
right that makes sense

00:02:20,150 --> 00:02:27,830
thanks for the update so I'll just leave

00:02:24,050 --> 00:02:32,140
it like this in the notes that inception

00:02:27,830 --> 00:02:32,140
is happening sometime after Thanksgiving

00:02:32,230 --> 00:02:41,000
all right okay then I guess question

00:02:37,730 --> 00:02:43,489
goes to the people joining us from the

00:02:41,000 --> 00:02:47,750
arena team who probably know more about

00:02:43,489 --> 00:02:51,170
the CRD all the things topic miss this

00:02:47,750 --> 00:02:53,590
something y'all want to talk about Jules

00:02:51,170 --> 00:02:58,620
Alexander

00:02:53,590 --> 00:03:02,020
hi so I think the question here is like

00:02:58,620 --> 00:03:05,760
should we do everything CRD based or not

00:03:02,020 --> 00:03:10,060
like should the clock controller or copy

00:03:05,760 --> 00:03:13,090
create CR DS and rainy is acting as a

00:03:10,060 --> 00:03:16,540
controller based on the CR DS to deploy

00:03:13,090 --> 00:03:19,510
applications and if we should go that

00:03:16,540 --> 00:03:28,930
way or not like pros cons I think that

00:03:19,510 --> 00:03:31,569
should be the discussion that area and

00:03:28,930 --> 00:03:36,040
my assumption is while you brought it up

00:03:31,569 --> 00:03:40,060
you already do have some opinions and or

00:03:36,040 --> 00:03:43,780
spikes around this whole thing well so

00:03:40,060 --> 00:03:48,940
we we sometimes do like heck days on a

00:03:43,780 --> 00:03:53,290
rainy and myself and argv Hecht a little

00:03:48,940 --> 00:03:57,010
bit on it to create a yeah like your

00:03:53,290 --> 00:04:00,810
Eenie based on CID thing it definitely

00:03:57,010 --> 00:04:05,670
works but I think there are like also

00:04:00,810 --> 00:04:14,920
downsides using series as well as like

00:04:05,670 --> 00:04:17,410
yeah things on the plus side so to share

00:04:14,920 --> 00:04:19,239
the other things I'm thinking at that

00:04:17,410 --> 00:04:22,830
point you don't even have a database

00:04:19,239 --> 00:04:29,350
right and you see are the workspaces

00:04:22,830 --> 00:04:34,830
services everything is that is that

00:04:29,350 --> 00:04:38,289
really true because I mean I don't know

00:04:34,830 --> 00:04:40,240
standing what you're saying I'm curious

00:04:38,289 --> 00:04:41,830
I'm just asking questions cuz I know

00:04:40,240 --> 00:04:45,250
that there there could be a gradient

00:04:41,830 --> 00:04:47,680
right where you just see Rd the app but

00:04:45,250 --> 00:04:51,160
the topic is C or D all the things so

00:04:47,680 --> 00:04:52,120
that's why I'm well exactly look so so

00:04:51,160 --> 00:04:56,139
to me

00:04:52,120 --> 00:04:58,570
C or B in database are not orthogonal to

00:04:56,139 --> 00:05:02,110
each other what I mean by that is the

00:04:58,570 --> 00:05:04,060
CIE running on communities has you know

00:05:02,110 --> 00:05:05,529
usually an SCV or something like

00:05:04,060 --> 00:05:08,139
database like

00:05:05,529 --> 00:05:10,929
to the back end and I'm not sure whom of

00:05:08,139 --> 00:05:15,809
you looked into this in more detail but

00:05:10,929 --> 00:05:19,899
for example I saw that was it Roger

00:05:15,809 --> 00:05:21,759
someone just created a mini kubernetes

00:05:19,899 --> 00:05:23,079
version where they even swapped out the

00:05:21,759 --> 00:05:26,679
build and xev

00:05:23,079 --> 00:05:29,979
and replaced it with a my sequel units

00:05:26,679 --> 00:05:36,699
that's k3 aspire answer and I think it's

00:05:29,979 --> 00:05:40,059
you can see Co light well yeah okay so

00:05:36,699 --> 00:05:47,979
so it's I think I saw it in that context

00:05:40,059 --> 00:05:49,899
so I'm curious whether this C or D all

00:05:47,979 --> 00:05:54,279
the things means no database statement

00:05:49,899 --> 00:05:56,589
actually holds my expectation is that if

00:05:54,279 --> 00:05:59,859
a statement was made no database it it's

00:05:56,589 --> 00:06:01,539
referring to the the platform system

00:05:59,859 --> 00:06:04,869
components not needing their own

00:06:01,539 --> 00:06:08,889
database but leveraging the kate's API

00:06:04,869 --> 00:06:12,189
for state and whatever data store is

00:06:08,889 --> 00:06:15,159
backing the kate's API represents a

00:06:12,189 --> 00:06:16,809
database in a way but the statement is

00:06:15,159 --> 00:06:19,869
that cloud controller doesn't have its

00:06:16,809 --> 00:06:23,860
own database as distinct from the kate's

00:06:19,869 --> 00:06:26,949
API datastore exactly okay so we would

00:06:23,860 --> 00:06:28,360
like instead of having a database in for

00:06:26,949 --> 00:06:30,819
color controller like a separate one

00:06:28,360 --> 00:06:34,539
just would go away and we would just

00:06:30,819 --> 00:06:37,169
need to store everything in the database

00:06:34,539 --> 00:06:37,169
from kubernetes

00:06:41,030 --> 00:06:47,060
chattering Jules because that that now

00:06:43,610 --> 00:06:48,560
makes sense to me like I think I would I

00:06:47,060 --> 00:06:51,530
would rephrase this a little bit in

00:06:48,560 --> 00:06:54,620
saying not like each microscope is true

00:06:51,530 --> 00:06:56,840
that happen the database dependency but

00:06:54,620 --> 00:06:58,970
that's affected away from the true scope

00:06:56,840 --> 00:07:01,610
for the commitment that make sense I

00:06:58,970 --> 00:07:04,100
might not go so far as to say should not

00:07:01,610 --> 00:07:05,350
have but it's possible they don't need

00:07:04,100 --> 00:07:09,200
it

00:07:05,350 --> 00:07:15,410
fair so how was it you know what a

00:07:09,200 --> 00:07:18,920
carrion is with the sea at ease what was

00:07:15,410 --> 00:07:22,610
the question how was your experience

00:07:18,920 --> 00:07:24,020
with using nam kubernetes resources as a

00:07:22,610 --> 00:07:29,780
database replacement

00:07:24,020 --> 00:07:31,670
I think premiering and creating objects

00:07:29,780 --> 00:07:38,180
is quite different there all right

00:07:31,670 --> 00:07:42,290
I wasn't thinking about it from from

00:07:38,180 --> 00:07:43,310
like let's replace a big database I was

00:07:42,290 --> 00:07:45,200
thinking

00:07:43,310 --> 00:07:49,340
higher level like you don't want to have

00:07:45,200 --> 00:07:51,800
two sources of truth right when you

00:07:49,340 --> 00:07:53,900
create a route in using the controller

00:07:51,800 --> 00:07:56,330
you store that information somewhere in

00:07:53,900 --> 00:07:59,270
the database if you then use this tea or

00:07:56,330 --> 00:08:01,310
something else to create a route in the

00:07:59,270 --> 00:08:02,930
kubernetes world you've duplicated that

00:08:01,310 --> 00:08:06,410
information and you always need to keep

00:08:02,930 --> 00:08:09,920
them in sync but you don't really need

00:08:06,410 --> 00:08:15,170
to do that you can in theory you could

00:08:09,920 --> 00:08:18,040
replace the sorry not replace remove the

00:08:15,170 --> 00:08:23,960
data stores by the controller and just

00:08:18,040 --> 00:08:28,410
do the end and state right directly to

00:08:23,960 --> 00:08:32,400
the kate's API yeah yeah

00:08:28,410 --> 00:08:34,380
but that yeah I think it would be a big

00:08:32,400 --> 00:08:38,130
refactor to change all these system

00:08:34,380 --> 00:08:42,900
components to to be kubernetes native

00:08:38,130 --> 00:08:44,960
effectively but it's a it's possible

00:08:42,900 --> 00:08:44,960
you

00:08:45,160 --> 00:08:53,710
so I think the main point were the irony

00:08:50,340 --> 00:08:57,760
hacked a project like started out that

00:08:53,710 --> 00:09:00,130
was the cloud controller started writing

00:08:57,760 --> 00:09:03,070
CR DS which got picked up by airing it

00:09:00,130 --> 00:09:06,160
and afterwards correct exactly like so

00:09:03,070 --> 00:09:10,990
all we did and we were able to finish it

00:09:06,160 --> 00:09:14,770
in one day but what we did is we just

00:09:10,990 --> 00:09:19,000
kept the cloud controller code and it

00:09:14,770 --> 00:09:20,830
just created CR DS we just took the

00:09:19,000 --> 00:09:24,010
Jason and just created us here D with

00:09:20,830 --> 00:09:29,320
with a application Jason and we created

00:09:24,010 --> 00:09:31,750
this Rini controller there was just like

00:09:29,320 --> 00:09:34,330
listening to it and like yeah watching

00:09:31,750 --> 00:09:38,020
them and whenever there was popping up

00:09:34,330 --> 00:09:41,860
something we just read it and created

00:09:38,020 --> 00:09:44,980
the app on kubernetes alright so the

00:09:41,860 --> 00:09:48,340
main work was basically on the arena

00:09:44,980 --> 00:09:50,800
side we didn't have to do much on the

00:09:48,340 --> 00:09:55,330
cloud controller side it was just like a

00:09:50,800 --> 00:09:57,370
post to create a C or D on kubernetes we

00:09:55,330 --> 00:09:59,350
didn't like I went down the way to

00:09:57,370 --> 00:10:02,050
replace databases or anything

00:09:59,350 --> 00:10:03,820
we still got information from the clock

00:10:02,050 --> 00:10:10,120
control the database from the clock

00:10:03,820 --> 00:10:12,220
controller and just create see our DS at

00:10:10,120 --> 00:10:14,230
that point you could even replace the

00:10:12,220 --> 00:10:17,050
CSC alive with cube control

00:10:14,230 --> 00:10:23,710
we wouldn't wouldn't be as nice but you

00:10:17,050 --> 00:10:27,370
could do it right you could hear I mean

00:10:23,710 --> 00:10:28,810
you still you still need like the

00:10:27,370 --> 00:10:32,170
blobstore and everything right you need

00:10:28,810 --> 00:10:35,020
the information where the applications

00:10:32,170 --> 00:10:37,920
sources are stored and everything to do

00:10:35,020 --> 00:10:44,790
the staging and know if there's kpac

00:10:37,920 --> 00:10:49,770
yeah whatever

00:10:44,790 --> 00:10:54,750
to say is what I see with CI Jesus that

00:10:49,770 --> 00:10:59,810
it's very hard to create them and it's

00:10:54,750 --> 00:11:03,540
slow to carry them everything's a

00:10:59,810 --> 00:11:07,380
synchronous you don't have any locks

00:11:03,540 --> 00:11:10,110
unless you implement them yourselves so

00:11:07,380 --> 00:11:12,270
I think this is quite a challenge to

00:11:10,110 --> 00:11:13,010
make something which is stable and

00:11:12,270 --> 00:11:18,450
robust

00:11:13,010 --> 00:11:20,520
I know I I see how how some objects

00:11:18,450 --> 00:11:22,950
belong to the resource right some

00:11:20,520 --> 00:11:27,690
objects belonging to the in the cluster

00:11:22,950 --> 00:11:30,750
with their counterparts but I think

00:11:27,690 --> 00:11:33,230
there is value in even in duplicating

00:11:30,750 --> 00:11:38,780
data and syncing when you're ready I

00:11:33,230 --> 00:11:44,910
have I have a couple thoughts firstly

00:11:38,780 --> 00:11:49,110
yes I feel I feel like this kind of like

00:11:44,910 --> 00:11:51,120
a emperor's you know the Empress got no

00:11:49,110 --> 00:11:52,590
clothes think about see all these so

00:11:51,120 --> 00:12:02,100
they're definitely terrible and no one's

00:11:52,590 --> 00:12:03,540
allowed to point out but I mean we the

00:12:02,100 --> 00:12:05,220
ship has sailed

00:12:03,540 --> 00:12:06,960
if you see what I mean like the whole

00:12:05,220 --> 00:12:09,810
architecture is based on cles anyway

00:12:06,960 --> 00:12:14,340
right like under the covers it's all

00:12:09,810 --> 00:12:16,320
that stuff anyway and there are

00:12:14,340 --> 00:12:19,650
advantages to them as well as

00:12:16,320 --> 00:12:22,110
disadvantages you know there is

00:12:19,650 --> 00:12:25,140
completely true right like they're SED

00:12:22,110 --> 00:12:27,600
isn't very scalable yet there's some

00:12:25,140 --> 00:12:30,750
slowdowns as soon as you do anything

00:12:27,600 --> 00:12:32,220
async which you eventually do you have

00:12:30,750 --> 00:12:37,550
to worry about the entirety of

00:12:32,220 --> 00:12:40,770
distributed systems to make it work but

00:12:37,550 --> 00:12:44,400
pretty much all the services are going

00:12:40,770 --> 00:12:46,920
to be using operators we're probably

00:12:44,400 --> 00:12:50,910
going to start using k- at some point to

00:12:46,920 --> 00:12:52,550
do stuff all the kpac build pipeline

00:12:50,910 --> 00:12:56,220
stuff which is what stage is going to do

00:12:52,550 --> 00:12:58,800
is based on it all the networking

00:12:56,220 --> 00:13:02,430
the new networking stuff is a based on

00:12:58,800 --> 00:13:05,010
SEO which sorts the IDs and B is also

00:13:02,430 --> 00:13:08,640
based on CIA's like they've added

00:13:05,010 --> 00:13:13,830
networking Co DS and metal controller so

00:13:08,640 --> 00:13:15,720
it's kind of like you know it's there

00:13:13,830 --> 00:13:21,230
isn't a universe where we're not

00:13:15,720 --> 00:13:23,910
managing a ton of C IDs so you know

00:13:21,230 --> 00:13:25,200
what's one more when you've already kind

00:13:23,910 --> 00:13:26,640
of paying the cost of it

00:13:25,200 --> 00:13:34,340
I mean return you get that kind of

00:13:26,640 --> 00:13:39,090
consistency across the staff about

00:13:34,340 --> 00:13:42,000
shared ease right now the OPI make sure

00:13:39,090 --> 00:13:45,300
that you know there's a cloud foundry

00:13:42,000 --> 00:13:50,340
and there's a scheduler yeah if we go

00:13:45,300 --> 00:13:53,100
the fear deer out you're kind of giving

00:13:50,340 --> 00:14:02,180
up independence should we talk about

00:13:53,100 --> 00:14:06,570
that so what it's worth if yeah so so I

00:14:02,180 --> 00:14:08,580
I so I think the reality is the

00:14:06,570 --> 00:14:11,730
kubernetes is table stakes if you see

00:14:08,580 --> 00:14:14,970
what I mean it's in particular table

00:14:11,730 --> 00:14:25,350
states with OPI right like like what

00:14:14,970 --> 00:14:26,970
like so and this deadline is it's a YAG

00:14:25,350 --> 00:14:30,780
meeting if you see what I mean right

00:14:26,970 --> 00:14:33,660
like it's like right now the reality is

00:14:30,780 --> 00:14:37,920
berries of connect right like that's

00:14:33,660 --> 00:14:40,710
that's the word weigh-in and we could

00:14:37,920 --> 00:14:42,570
try and abstract that away and the

00:14:40,710 --> 00:14:44,460
initial kind of thought okay I was too

00:14:42,570 --> 00:14:48,030
abstract that way but the more I think

00:14:44,460 --> 00:14:50,430
about it the more after my do we want to

00:14:48,030 --> 00:14:52,140
abstract away the kubernetes or do we

00:14:50,430 --> 00:14:54,810
want to abstract away being sad

00:14:52,140 --> 00:14:56,700
kubernetes resources that get created if

00:14:54,810 --> 00:14:58,110
you see what I mean I guess it can ativ

00:14:56,700 --> 00:15:00,960
is it Kiba

00:14:58,110 --> 00:15:03,750
is it deployment and that seems worth

00:15:00,960 --> 00:15:07,070
abstracting I have seen before those of

00:15:03,750 --> 00:15:09,660
kubernetes I'm not thinking about it

00:15:07,070 --> 00:15:11,970
necessarily from a technical

00:15:09,660 --> 00:15:14,130
perspective or I think the technical

00:15:11,970 --> 00:15:17,460
perspective is very important too but

00:15:14,130 --> 00:15:20,220
from a product or project standpoint if

00:15:17,460 --> 00:15:24,630
if someone has like maybe some data

00:15:20,220 --> 00:15:28,440
point on whether we expect the entire

00:15:24,630 --> 00:15:29,820
planet to be kubernetes because you

00:15:28,440 --> 00:15:35,760
would talk about hundreds of communities

00:15:29,820 --> 00:15:49,020
100% right does that make sense what I'm

00:15:35,760 --> 00:15:50,970
asking it does I mean what what is so so

00:15:49,020 --> 00:15:52,530
you would tie it to communities only in

00:15:50,970 --> 00:15:55,620
the sense that it was previously tied to

00:15:52,530 --> 00:15:57,480
Diego if you see what I mean it would

00:15:55,620 --> 00:15:59,520
always be possible just like when it was

00:15:57,480 --> 00:16:01,290
previously tied to the a go for us to

00:15:59,520 --> 00:16:03,960
introduce any schedule including X's

00:16:01,290 --> 00:16:05,930
because code is code right we can always

00:16:03,960 --> 00:16:09,330
change it and the question is whether

00:16:05,930 --> 00:16:12,390
with whether we need to do that effort

00:16:09,330 --> 00:16:14,700
now I maintain that abstraction now if

00:16:12,390 --> 00:16:16,410
you see what I mean or if we just need

00:16:14,700 --> 00:16:21,510
to not block ourselves introducing

00:16:16,410 --> 00:16:24,390
abstraction the future and and I mean

00:16:21,510 --> 00:16:26,010
like I said I mean it's the if you ain't

00:16:24,390 --> 00:16:28,080
gonna neither think in my head right

00:16:26,010 --> 00:16:29,490
like it's we don't need to architects

00:16:28,080 --> 00:16:32,940
for that right now we just need to keep

00:16:29,490 --> 00:16:36,690
the code non sucky so say if if and when

00:16:32,940 --> 00:16:39,330
we all wake up from our dream in realize

00:16:36,690 --> 00:16:42,330
that kubernetes is awful and something

00:16:39,330 --> 00:16:44,790
else is very cool thing we can introduce

00:16:42,330 --> 00:16:47,340
a new back-end right like as long as

00:16:44,790 --> 00:16:50,040
long as the code like isn't completely

00:16:47,340 --> 00:16:51,480
coupled that should be fine by the end

00:16:50,040 --> 00:16:52,200
of the weeds gonna introduce the

00:16:51,480 --> 00:16:55,350
abstraction

00:16:52,200 --> 00:16:57,330
like straightaway hey Jose I'm

00:16:55,350 --> 00:17:00,990
interpreting that the the question not

00:16:57,330 --> 00:17:10,400
as which scheduler at Cloud Foundry is

00:17:00,990 --> 00:17:14,330
using but the the the safe fear that by

00:17:10,400 --> 00:17:18,560
refactoring all the system components to

00:17:14,330 --> 00:17:22,350
interact with a weather data store by a

00:17:18,560 --> 00:17:23,020
particular API the kubernetes api that

00:17:22,350 --> 00:17:24,459
we're

00:17:23,020 --> 00:17:28,209
Cloud Foundry to a particular

00:17:24,459 --> 00:17:31,900
infrastructure mhm and it means that

00:17:28,209 --> 00:17:36,550
Cloud Foundry couldn't be as easily

00:17:31,900 --> 00:17:40,200
operated on VMs or bare metal or some

00:17:36,550 --> 00:17:47,280
other no destination infrastructure is

00:17:40,200 --> 00:17:50,200
did I interpret that correctly but yes

00:17:47,280 --> 00:17:54,430
you're trying if we shared the all the

00:17:50,200 --> 00:17:57,820
things then we would only be available

00:17:54,430 --> 00:17:59,890
where kubernetes is a selective analysis

00:17:57,820 --> 00:18:03,930
isn't available that we want to be

00:17:59,890 --> 00:18:07,930
available exactly that was my question

00:18:03,930 --> 00:18:09,820
that was exactly my question I mean I

00:18:07,930 --> 00:18:14,350
can't think of a place keeping at ease

00:18:09,820 --> 00:18:23,260
isn't available we would I mean I mean

00:18:14,350 --> 00:18:25,540
in all fairness like how fancy is going

00:18:23,260 --> 00:18:33,760
to run somewhere along crazy fare if I

00:18:25,540 --> 00:18:36,040
talk to to them so the reason I was I

00:18:33,760 --> 00:18:39,220
wanted to know if there's a is there a

00:18:36,040 --> 00:18:47,850
product people for something around when

00:18:39,220 --> 00:18:54,460
you talk to people they usually have a

00:18:47,850 --> 00:18:57,040
different perspective because we look

00:18:54,460 --> 00:19:05,140
Eddie needs all the time and we feel

00:18:57,040 --> 00:19:07,180
like it's everywhere right well I mean

00:19:05,140 --> 00:19:09,250
as far as I know there's no member of

00:19:07,180 --> 00:19:12,640
the foundation that doesn't have a

00:19:09,250 --> 00:19:13,960
keeping at these offerings right and as

00:19:12,640 --> 00:19:16,300
far as I know there's no member the

00:19:13,960 --> 00:19:19,960
foundation that doesn't have a

00:19:16,300 --> 00:19:21,610
kubernetes offering that runs everywhere

00:19:19,960 --> 00:19:23,530
they run their cloud foundry offering I

00:19:21,610 --> 00:19:26,100
could be wrong about that but I think

00:19:23,530 --> 00:19:26,100
that's depends

00:19:26,680 --> 00:19:33,650
or what it's worth as a product person

00:19:30,100 --> 00:19:39,110
from pivotal pivotal is investing

00:19:33,650 --> 00:19:43,790
heavily in in participating with the CF

00:19:39,110 --> 00:19:46,880
f to move cloud foundry to run on

00:19:43,790 --> 00:19:53,000
kubernetes in response to feedback from

00:19:46,880 --> 00:19:55,490
our commercial customers who have given

00:19:53,000 --> 00:20:00,950
us feedback over the last year or two

00:19:55,490 --> 00:20:04,850
that they are concerned that cloud

00:20:00,950 --> 00:20:09,820
foundry if it doesn't run on kubernetes

00:20:04,850 --> 00:20:19,630
I may be falling behind in its relevance

00:20:09,820 --> 00:20:22,070
right now this feedback may be based on

00:20:19,630 --> 00:20:27,880
fear uncertainty and doubt that our

00:20:22,070 --> 00:20:31,280
customers themselves have that they are

00:20:27,880 --> 00:20:35,170
attracted to a new shiny thing that is

00:20:31,280 --> 00:20:38,870
kubernetes dr. dr. dr.

00:20:35,170 --> 00:20:46,030
me that as a name

00:20:38,870 --> 00:20:53,210
I think better Memphis Memphis Memphis

00:20:46,030 --> 00:20:56,200
it's real and it seems that kubernetes

00:20:53,210 --> 00:20:57,470
is becoming ubiquitous infrastructure

00:20:56,200 --> 00:21:00,530
yeah

00:20:57,470 --> 00:21:05,950
as much as it concerns me it feels like

00:21:00,530 --> 00:21:08,630
we're refactoring a very functional

00:21:05,950 --> 00:21:11,930
yapper platform that delivers real

00:21:08,630 --> 00:21:15,140
business outcomes and rewriting it for

00:21:11,930 --> 00:21:19,340
an immature scheduler and it comes with

00:21:15,140 --> 00:21:23,660
a great deal of risk yeah it feels like

00:21:19,340 --> 00:21:26,500
we're we're it's inevitable that these

00:21:23,660 --> 00:21:31,210
are all right we have to solve because

00:21:26,500 --> 00:21:33,710
this is where the market is going yes I

00:21:31,210 --> 00:21:35,810
for what it's worth you you could be

00:21:33,710 --> 00:21:39,680
speaking straight out of my brain like I

00:21:35,810 --> 00:21:45,050
yeah I said the exact same concerns

00:21:39,680 --> 00:21:47,630
and many of the same instincts yeah a

00:21:45,050 --> 00:21:54,560
lot of kubernetes strikes me as horribly

00:21:47,630 --> 00:21:57,140
overcomplicated and pretty pretty

00:21:54,560 --> 00:21:58,430
crazily heavy and very hard to abstract

00:21:57,140 --> 00:22:02,260
your way out of which is the biggest

00:21:58,430 --> 00:22:05,000
concern like it's then it's

00:22:02,260 --> 00:22:07,340
idiomatically necessary to couple

00:22:05,000 --> 00:22:10,760
yourself to it if you see what I mean

00:22:07,340 --> 00:22:14,230
unlike unlike most things kubernetes

00:22:10,760 --> 00:22:17,870
seems to value a lack of abstraction

00:22:14,230 --> 00:22:20,270
it's like Ruby anti-patterns as a

00:22:17,870 --> 00:22:22,310
service if anything you shouldn't do

00:22:20,270 --> 00:22:24,170
with already on Rails is what you should

00:22:22,310 --> 00:22:29,660
do in keeping Etsy like exposure a data

00:22:24,170 --> 00:22:31,820
model as your API that scale and but

00:22:29,660 --> 00:22:36,530
it's exactly what you said Shannon right

00:22:31,820 --> 00:22:39,260
like did this is where people are and I

00:22:36,530 --> 00:22:45,230
think I think there's huge value we can

00:22:39,260 --> 00:22:47,090
often simplifying it but I think we have

00:22:45,230 --> 00:22:51,380
to you know meet people where they are

00:22:47,090 --> 00:22:53,500
and if you see what I mean yeah hundred

00:22:51,380 --> 00:22:53,500
percent

00:22:56,060 --> 00:23:01,700
I think different conversation though is

00:22:59,000 --> 00:23:05,210
like would we at a certain point in time

00:23:01,700 --> 00:23:07,010
kind of let the kubernetes api kind of

00:23:05,210 --> 00:23:09,980
shine through the Cloud Foundry user

00:23:07,010 --> 00:23:12,050
experience and I think I've written that

00:23:09,980 --> 00:23:14,630
in one of the documents initially I

00:23:12,050 --> 00:23:17,420
thought this would be a good idea

00:23:14,630 --> 00:23:20,510
I guess I'm not so sure anymore about

00:23:17,420 --> 00:23:22,220
that I'm so glad you said that because

00:23:20,510 --> 00:23:26,150
like I feel like this is my opportunity

00:23:22,220 --> 00:23:28,190
for therapy and like I've won Miss Davis

00:23:26,150 --> 00:23:30,620
out loud right like because I go back

00:23:28,190 --> 00:23:32,540
and forth constantly about about exactly

00:23:30,620 --> 00:23:35,420
that question and I convinced myself

00:23:32,540 --> 00:23:37,820
they're exposing Cuba next API to people

00:23:35,420 --> 00:23:39,950
is crazy

00:23:37,820 --> 00:23:44,380
and then I convinced myself that you

00:23:39,950 --> 00:23:48,710
know that's all people seem to want and

00:23:44,380 --> 00:23:50,720
you know are we are we creating value by

00:23:48,710 --> 00:23:55,250
hiding it or are we removing value I I

00:23:50,720 --> 00:23:57,620
really I don't know but it feels to me

00:23:55,250 --> 00:23:59,450
like if you if you list what

00:23:57,620 --> 00:24:02,840
differentiates Cloud Foundry versus

00:23:59,450 --> 00:24:04,970
other approaches the top thing to me is

00:24:02,840 --> 00:24:07,340
that it hides the communities API so I

00:24:04,970 --> 00:24:12,290
kind of kind of want to believe that

00:24:07,340 --> 00:24:15,050
that's good I think we should hide the

00:24:12,290 --> 00:24:17,360
kubernetes api with a background check

00:24:15,050 --> 00:24:24,520
and a three-day cooling-off period for

00:24:17,360 --> 00:24:27,440
anything excellent I mean I mean that

00:24:24,520 --> 00:24:28,610
what it's worth like so I when I go back

00:24:27,440 --> 00:24:30,860
and forth the thing that keeps bringing

00:24:28,610 --> 00:24:34,730
me back to you it's a good idea to hide

00:24:30,860 --> 00:24:37,490
it is what I'm hacking on my own could

00:24:34,730 --> 00:24:39,230
deal if that most bad time I use stuff

00:24:37,490 --> 00:24:43,610
like plate right like I use stuff like

00:24:39,230 --> 00:24:45,440
that and glitches is not better if you

00:24:43,610 --> 00:24:49,340
let me start messing with you vignetting

00:24:45,440 --> 00:24:51,710
right like it you know I do think that

00:24:49,340 --> 00:24:53,240
there is a high level and low key

00:24:51,710 --> 00:24:56,000
luckily actually like I was using rocky

00:24:53,240 --> 00:24:57,710
the other day it's so much easier to

00:24:56,000 --> 00:25:00,260
stand up a quick graphic you labr and

00:24:57,710 --> 00:25:01,580
Haraki then spinning up the kubernetes

00:25:00,260 --> 00:25:04,190
cluster right you couldn't leave a space

00:25:01,580 --> 00:25:05,930
it's like one kick deploy to Heroku and

00:25:04,190 --> 00:25:08,300
it's deployed with the database attached

00:25:05,930 --> 00:25:09,500
and that is a lot easier than applying a

00:25:08,300 --> 00:25:14,390
ham chart and

00:25:09,500 --> 00:25:15,590
notes and stuff do you think there's a

00:25:14,390 --> 00:25:17,690
lot of value in that kind of like

00:25:15,590 --> 00:25:20,270
high-level interface on top of stuff and

00:25:17,690 --> 00:25:22,970
if you look at like cloud run or what

00:25:20,270 --> 00:25:27,770
most people are doing if a higher level

00:25:22,970 --> 00:25:31,040
interface even if it's a big guy I have

00:25:27,770 --> 00:25:32,990
the same feedback that this is the topic

00:25:31,040 --> 00:25:37,810
that keeps me up at night

00:25:32,990 --> 00:25:41,750
whether to just expose the sto API or

00:25:37,810 --> 00:25:46,670
abstract it with something CF idiomatic

00:25:41,750 --> 00:25:49,550
like great map wrap all right and I I

00:25:46,670 --> 00:25:53,170
have if it feels at this point like I've

00:25:49,550 --> 00:25:57,770
been chasing api's for my entire career

00:25:53,170 --> 00:25:59,420
I if something exists that is fully

00:25:57,770 --> 00:26:02,120
functional and solves all of the

00:25:59,420 --> 00:26:08,590
customers problems I just rather give

00:26:02,120 --> 00:26:13,490
them that but I continually ask our

00:26:08,590 --> 00:26:17,420
customers whether they'd be willing to

00:26:13,490 --> 00:26:21,350
have their armies of development teams

00:26:17,420 --> 00:26:26,060
ramped up on a complex kubernetes native

00:26:21,350 --> 00:26:29,810
API or whether they'd like to give them

00:26:26,060 --> 00:26:32,930
a more limited scope of functionality

00:26:29,810 --> 00:26:35,660
which was easy to use and they

00:26:32,930 --> 00:26:38,300
invariably choose the letter right

00:26:35,660 --> 00:26:41,500
variably tell us that we're doing the

00:26:38,300 --> 00:26:44,270
right thing by giving them an

00:26:41,500 --> 00:26:47,360
abstraction which is easy to use and

00:26:44,270 --> 00:26:51,260
maybe not as fully functional and that

00:26:47,360 --> 00:26:53,480
as we identify those top use cases which

00:26:51,260 --> 00:26:57,260
we know are already fulfilled by an

00:26:53,480 --> 00:27:04,130
underlying technology to plumb that user

00:26:57,260 --> 00:27:09,470
experience through also I've been

00:27:04,130 --> 00:27:13,580
developing an opinion based on repeated

00:27:09,470 --> 00:27:18,490
signal that it may be valuable to have

00:27:13,580 --> 00:27:21,680
an expert mode if you will mmm for

00:27:18,490 --> 00:27:26,120
initially for a privileged user like a

00:27:21,680 --> 00:27:30,580
form engineer or security stakeholder

00:27:26,120 --> 00:27:35,420
who can interface with lower-level api's

00:27:30,580 --> 00:27:39,650
but over time if we could solve access

00:27:35,420 --> 00:27:42,980
control for resources kubernetes native

00:27:39,650 --> 00:27:46,280
resources then we could expose this to

00:27:42,980 --> 00:27:48,800
more users you know for the time being

00:27:46,280 --> 00:27:51,080
our abstraction solves access controlled

00:27:48,800 --> 00:27:54,230
for us because hootenannies itself

00:27:51,080 --> 00:27:56,240
hasn't solved this problem we have

00:27:54,230 --> 00:27:59,240
customers who are writing their own

00:27:56,240 --> 00:28:03,320
access control systems so that they can

00:27:59,240 --> 00:28:05,990
expose the sto API or other kubernetes

00:28:03,320 --> 00:28:10,010
native resources to the developers for

00:28:05,990 --> 00:28:13,360
this reason great so this is this is our

00:28:10,010 --> 00:28:16,330
thinking at Sousa as well right now and

00:28:13,360 --> 00:28:19,790
we we're trying to figure out how to

00:28:16,330 --> 00:28:21,530
make similar roles to what we have in

00:28:19,790 --> 00:28:24,350
Cloud Foundry that are applicable to the

00:28:21,530 --> 00:28:28,550
kubernetes api as in much more there's a

00:28:24,350 --> 00:28:32,810
not super user people who have ability

00:28:28,550 --> 00:28:35,150
to deploy applications to a particular

00:28:32,810 --> 00:28:38,060
namespace and only that namespace you

00:28:35,150 --> 00:28:40,190
have you know better checks then then

00:28:38,060 --> 00:28:42,740
what people typically construct with

00:28:40,190 --> 00:28:47,630
with their kubernetes are back and then

00:28:42,740 --> 00:28:50,630
authenticated with UAE as well that it's

00:28:47,630 --> 00:28:54,170
it's not a easy match because you know

00:28:50,630 --> 00:28:56,180
the primped is the permission model is

00:28:54,170 --> 00:29:00,260
very different but I think we could

00:28:56,180 --> 00:29:03,680
construct sort of non super user but

00:29:00,260 --> 00:29:06,520
access to the API user types for

00:29:03,680 --> 00:29:10,130
kubernetes that could be backed by UA a

00:29:06,520 --> 00:29:12,830
so that you AAA could do like an NGO I

00:29:10,130 --> 00:29:15,050
didn't see auth for great communities

00:29:12,830 --> 00:29:18,740
are bagging soft role based access

00:29:15,050 --> 00:29:20,750
control for for CR DS I think it would

00:29:18,740 --> 00:29:24,080
be really powerful if we did it in a

00:29:20,750 --> 00:29:25,760
generic way that any of the system

00:29:24,080 --> 00:29:28,400
component authors your contributors can

00:29:25,760 --> 00:29:30,980
leverage and I think we need to look at

00:29:28,400 --> 00:29:32,570
rant what Rancher is doing and and not

00:29:30,980 --> 00:29:35,419
do that because they've done it in a

00:29:32,570 --> 00:29:37,549
very specific way

00:29:35,419 --> 00:29:38,779
if we sort of define something that's

00:29:37,549 --> 00:29:43,700
usable for the whole kubernetes

00:29:38,779 --> 00:29:50,299
community that's that's a way that CF

00:29:43,700 --> 00:29:54,679
s-- mindset can help cuban at ease and I

00:29:50,299 --> 00:29:56,690
think so I think that brings us a little

00:29:54,679 --> 00:30:00,409
bit back to that Zod discussion right

00:29:56,690 --> 00:30:02,149
now that expert mode and knowing I think

00:30:00,409 --> 00:30:04,009
where we want to go like it's not there

00:30:02,149 --> 00:30:05,839
yet but where do we want to go and how

00:30:04,009 --> 00:30:07,159
do we give people an expert mode in the

00:30:05,839 --> 00:30:11,359
meantime which I think what Shannon's

00:30:07,159 --> 00:30:13,820
driving at is why I'm kind of motivated

00:30:11,359 --> 00:30:16,549
towards the CID thing they're like I

00:30:13,820 --> 00:30:18,649
think we still want Cappy on top because

00:30:16,549 --> 00:30:20,359
of because it gives us Roberts accent

00:30:18,649 --> 00:30:22,969
role because it gives us the thoughts or

00:30:20,359 --> 00:30:24,709
API because it gives us the you know I

00:30:22,969 --> 00:30:28,099
don't want to give people expert mode

00:30:24,709 --> 00:30:30,649
right now and maybe not ever but I think

00:30:28,099 --> 00:30:33,529
starting to put in those CR DS one it's

00:30:30,649 --> 00:30:35,389
the expert mode - it lets people start

00:30:33,529 --> 00:30:37,309
experimenting right notes less people

00:30:35,389 --> 00:30:39,709
start building higher level things on

00:30:37,309 --> 00:30:42,289
top of stuff so I think that's tough

00:30:39,709 --> 00:30:44,570
right now it's yes and a POS K down to

00:30:42,289 --> 00:30:46,179
be happy and and 50 layers where I see

00:30:44,570 --> 00:30:48,799
are these were a lot more kind of

00:30:46,179 --> 00:30:52,129
because of global variables and Ruby on

00:30:48,799 --> 00:30:53,869
Rails you know as a service they do have

00:30:52,129 --> 00:30:58,879
that advantage of being super kind of

00:30:53,869 --> 00:31:00,440
experimental and extensible and that

00:30:58,879 --> 00:31:03,139
that's why I think those two things

00:31:00,440 --> 00:31:06,559
where if we can start pushing see IDs

00:31:03,139 --> 00:31:09,169
out one underneath copy and one maybe in

00:31:06,559 --> 00:31:13,489
the boundary between copy and re me I

00:31:09,169 --> 00:31:14,989
think that would be and I think it would

00:31:13,489 --> 00:31:19,099
be a good answer for the people who do

00:31:14,989 --> 00:31:22,459
want that experiment so the I remember

00:31:19,099 --> 00:31:24,829
there was like manual for posh how you

00:31:22,459 --> 00:31:29,450
could get into the PostgreSQL database

00:31:24,829 --> 00:31:31,159
to delete locks and I would just wanted

00:31:29,450 --> 00:31:32,929
to say what would I see with the

00:31:31,159 --> 00:31:37,279
operator is that you wouldn't need that

00:31:32,929 --> 00:31:39,379
manual all our CID suggests there and we

00:31:37,279 --> 00:31:43,849
actually think we documented which one

00:31:39,379 --> 00:31:46,190
is safe to edit because the operators on

00:31:43,849 --> 00:31:48,889
the kubernetes operators they have this

00:31:46,190 --> 00:31:49,230
the humans right they have this expert

00:31:48,889 --> 00:31:51,809
mode

00:31:49,230 --> 00:31:53,850
ready and you can't be sure they don't

00:31:51,809 --> 00:31:55,710
go in there and they change stuff which

00:31:53,850 --> 00:31:57,690
you don't expect them to change and

00:31:55,710 --> 00:32:00,450
people actually doing this on the CF

00:31:57,690 --> 00:32:06,080
operator some of this is very useful on

00:32:00,450 --> 00:32:11,040
some it's unexpected right and so yeah

00:32:06,080 --> 00:32:13,320
they're well you have to document what

00:32:11,040 --> 00:32:16,710
is safe and what the expectations are

00:32:13,320 --> 00:32:19,260
like if I change that will that get

00:32:16,710 --> 00:32:25,770
redeployed will that change that

00:32:19,260 --> 00:32:28,559
resource yeah I'll say out loud I think

00:32:25,770 --> 00:32:32,549
operators are operators scare the crap

00:32:28,559 --> 00:32:34,080
on me you know it was just like it's the

00:32:32,549 --> 00:32:37,470
opposite of declarative it's like

00:32:34,080 --> 00:32:40,410
imperative logic completely custom to

00:32:37,470 --> 00:32:44,059
reach thing but when it blows up halfway

00:32:40,410 --> 00:32:46,950
I no idea why anyone supposed to do I

00:32:44,059 --> 00:32:49,190
get into a bad state in your operator I

00:32:46,950 --> 00:32:53,790
have no idea what's supposed to happen

00:32:49,190 --> 00:32:56,130
and it's it helps me to think of the

00:32:53,790 --> 00:32:57,990
whole thing as an event-driven boss it's

00:32:56,130 --> 00:32:59,940
not so different than been using

00:32:57,990 --> 00:33:03,500
RabbitMQ right you sent events out there

00:32:59,940 --> 00:33:05,850
and you get stuff back and you these

00:33:03,500 --> 00:33:09,059
operators sitting on that bus and they

00:33:05,850 --> 00:33:10,799
do something and often you it's really

00:33:09,059 --> 00:33:12,630
hard to see what the state machine is

00:33:10,799 --> 00:33:16,860
going to do yeah exactly

00:33:12,630 --> 00:33:19,980
it's you it's inspiring to read the

00:33:16,860 --> 00:33:23,250
systems problems every problem in your

00:33:19,980 --> 00:33:26,010
system which anyone whose world really

00:33:23,250 --> 00:33:27,960
don't want to do that like but at the

00:33:26,010 --> 00:33:30,270
same time you've got union operators and

00:33:27,960 --> 00:33:32,669
they can use keeps it here to look at

00:33:30,270 --> 00:33:36,510
everything and change everything which

00:33:32,669 --> 00:33:38,309
really is brings a certain chaos element

00:33:36,510 --> 00:33:41,309
in there right right because they think

00:33:38,309 --> 00:33:46,530
they can yeah yes looks inviting the

00:33:41,309 --> 00:33:49,080
operator yeah yeah so this a real thing

00:33:46,530 --> 00:33:50,549
that happens I mean our people like even

00:33:49,080 --> 00:33:51,990
if you're not using CF if you're not

00:33:50,549 --> 00:33:54,059
using K native right you're just

00:33:51,990 --> 00:33:56,580
building your stuff with plain Kade's

00:33:54,059 --> 00:34:00,990
is this a thing that people use cubes

00:33:56,580 --> 00:34:02,550
ETL to modify their parts which actually

00:34:00,990 --> 00:34:04,740
maintained by I

00:34:02,550 --> 00:34:07,710
a deployment or a stateful set and then

00:34:04,740 --> 00:34:11,010
are like surprised at what happens is

00:34:07,710 --> 00:34:12,929
this a thing because my feeling is that

00:34:11,010 --> 00:34:16,350
it's not right I think at some point

00:34:12,929 --> 00:34:17,970
people know their API they know their

00:34:16,350 --> 00:34:20,370
interface and of course like there is

00:34:17,970 --> 00:34:22,140
stuff happening in between and like you

00:34:20,370 --> 00:34:24,240
can look at it if you're interested in

00:34:22,140 --> 00:34:27,060
it you can you can understand it if you

00:34:24,240 --> 00:34:28,590
want to but like mod making

00:34:27,060 --> 00:34:31,790
modifications to it and then saying like

00:34:28,590 --> 00:34:35,340
whoops I didn't know it's like modifying

00:34:31,790 --> 00:34:38,160
it's in a bit service and then saying

00:34:35,340 --> 00:34:39,450
like oh I didn't know I I wasn't allowed

00:34:38,160 --> 00:34:42,230
to change it I'm sorry

00:34:39,450 --> 00:34:45,660
well I mean we don't give people right

00:34:42,230 --> 00:34:48,480
we should we should you can also protect

00:34:45,660 --> 00:34:50,370
against that using validation hooks and

00:34:48,480 --> 00:34:54,720
like for the process EF operator we

00:34:50,370 --> 00:34:59,490
should do that too so not allow people

00:34:54,720 --> 00:35:06,690
to alter things that you know my lead to

00:34:59,490 --> 00:35:09,390
inconsistent state yeah yeah just yeah

00:35:06,690 --> 00:35:12,300
anyway this is just like the populace in

00:35:09,390 --> 00:35:13,770
the back of my head like and like that

00:35:12,300 --> 00:35:16,500
feels all very well in the Golden Path

00:35:13,770 --> 00:35:18,320
that you know yeah ACB cluster fails

00:35:16,500 --> 00:35:21,810
quorum only trying to get it back in

00:35:18,320 --> 00:35:24,330
back in flight and any validation hook

00:35:21,810 --> 00:35:27,000
doesn't let you touch anything in that

00:35:24,330 --> 00:35:30,000
in in there and now I'm debugging the

00:35:27,000 --> 00:35:34,770
code of the operator did get it back

00:35:30,000 --> 00:35:36,060
like well anyway that's that's all like

00:35:34,770 --> 00:35:38,880
I don't think there's anything to do

00:35:36,060 --> 00:35:41,250
with CF this time testing that's it

00:35:38,880 --> 00:35:44,340
completely completely orthogonal

00:35:41,250 --> 00:35:46,020
different thing about the overuse of

00:35:44,340 --> 00:35:47,760
operators I think I want to write like a

00:35:46,020 --> 00:35:51,090
paper like operate this considered

00:35:47,760 --> 00:35:53,100
harmful I give you either like to use a

00:35:51,090 --> 00:35:54,840
staple set I figure out how to use it

00:35:53,100 --> 00:35:59,550
table set unless you're like one of five

00:35:54,840 --> 00:36:01,560
people yeah anyway I feel that's a

00:35:59,550 --> 00:36:07,119
complete perversion divergence of where

00:36:01,560 --> 00:36:10,809
we actually are like I think two CS like

00:36:07,119 --> 00:36:16,839
the real question is is there a value in

00:36:10,809 --> 00:36:20,589
having a CID based API one underneath

00:36:16,839 --> 00:36:21,999
Cappy and maybe one between Cappy and

00:36:20,589 --> 00:36:23,920
Erie me like maybe they're the same

00:36:21,999 --> 00:36:27,369
maybe they're not I don't know but is

00:36:23,920 --> 00:36:30,730
there a value to trying to create C IDs

00:36:27,369 --> 00:36:35,920
for those which users could use if they

00:36:30,730 --> 00:36:41,019
wanted to or go directly to it that via

00:36:35,920 --> 00:36:44,140
the API you know I think there is there

00:36:41,019 --> 00:36:46,329
is volume it um so like in just I mean

00:36:44,140 --> 00:36:48,849
you already had the value proposition in

00:36:46,329 --> 00:36:50,440
your question right people can use this

00:36:48,849 --> 00:36:53,440
as an MDI

00:36:50,440 --> 00:36:56,170
and use the CF CLI or they can decide to

00:36:53,440 --> 00:36:58,869
like just use cube CT I'll apply to do

00:36:56,170 --> 00:37:01,720
their thing and and use I don't know

00:36:58,869 --> 00:37:03,819
their favorite get ups operator to write

00:37:01,720 --> 00:37:08,200
those CRD is not in Iraq with this year

00:37:03,819 --> 00:37:12,220
but the CLI so like this very thing

00:37:08,200 --> 00:37:15,670
specifically is alone like worth looking

00:37:12,220 --> 00:37:18,489
at series at least to me right wean copy

00:37:15,670 --> 00:37:20,559
and every just to say like hey this is

00:37:18,489 --> 00:37:24,220
optional right you can use our

00:37:20,559 --> 00:37:27,249
handcrafted CLI limiting the API surface

00:37:24,220 --> 00:37:29,680
and and do and do a thing with it or

00:37:27,249 --> 00:37:32,769
like if you want to yum all around all

00:37:29,680 --> 00:37:33,339
day for you my guest just like right at

00:37:32,769 --> 00:37:43,670
yourself

00:37:33,339 --> 00:37:47,210
let's go first

00:37:43,670 --> 00:37:48,800
I think the question is maybe not

00:37:47,210 --> 00:37:52,640
whether it's valuable but what the

00:37:48,800 --> 00:37:54,050
priority is versus other things I can't

00:37:52,640 --> 00:37:55,520
I think it's really high priority if I'm

00:37:54,050 --> 00:37:57,590
honest like I think it's one of those

00:37:55,520 --> 00:38:03,300
things

00:37:57,590 --> 00:38:04,510
takes your makes other good things

00:38:03,300 --> 00:38:08,150
[Music]

00:38:04,510 --> 00:38:09,440
possible but I can I can imagine that

00:38:08,150 --> 00:38:23,180
the people have different opinions on

00:38:09,440 --> 00:38:27,220
that other opinions on the whole topic

00:38:23,180 --> 00:38:29,570
of series between copy and a rainy night

00:38:27,220 --> 00:38:31,940
do people think that's a bad idea

00:38:29,570 --> 00:38:37,820
yeah that it's low priority but a good

00:38:31,940 --> 00:38:41,300
idea maybe not so much on the aspect of

00:38:37,820 --> 00:38:43,400
good idea or bad idea but what I've seen

00:38:41,300 --> 00:38:47,180
in the kubernetes community is

00:38:43,400 --> 00:38:49,430
definitely this thinking around like can

00:38:47,180 --> 00:38:52,820
we strip things down to make them useful

00:38:49,430 --> 00:38:55,430
also standalone yes like you see that in

00:38:52,820 --> 00:38:58,040
K native versus SCADA and like what

00:38:55,430 --> 00:39:00,380
Microsoft is doing with like some of the

00:38:58,040 --> 00:39:06,890
aspects that K native is discovering and

00:39:00,380 --> 00:39:09,020
I'm not sure that a synergy between be

00:39:06,890 --> 00:39:12,740
like falling in that category as well

00:39:09,020 --> 00:39:15,790
yeah I think I think let's see like the

00:39:12,740 --> 00:39:19,400
CRV would make both erie me and Cathy

00:39:15,790 --> 00:39:22,700
independently so in a way I mean the

00:39:19,400 --> 00:39:26,000
Cathy was something that was just here's

00:39:22,700 --> 00:39:28,940
your nice easy to use API it's your hero

00:39:26,000 --> 00:39:30,470
clue you know here's a hurricane and for

00:39:28,940 --> 00:39:32,060
your kubernetes right you can stand this

00:39:30,470 --> 00:39:34,240
up and it's gonna give you a simplified

00:39:32,060 --> 00:39:36,890
workflow on top of your cuba Nettie's

00:39:34,240 --> 00:39:39,920
and it spits out these you know

00:39:36,890 --> 00:39:42,710
high-level CR DS which you can map on to

00:39:39,920 --> 00:39:44,600
the back end however you like right and

00:39:42,710 --> 00:39:48,410
you could ship that just with one

00:39:44,600 --> 00:39:49,820
standard implementation of that CRV on

00:39:48,410 --> 00:39:52,460
the other hand it would make him really

00:39:49,820 --> 00:39:54,260
kind of repeatedly useful in there it

00:39:52,460 --> 00:39:55,880
really just becomes like a top level

00:39:54,260 --> 00:39:59,970
thing

00:39:55,880 --> 00:40:01,920
yeah an axially essentially that can

00:39:59,970 --> 00:40:04,829
spit out a native feeder

00:40:01,920 --> 00:40:06,119
whatever you like from CFR definitions

00:40:04,829 --> 00:40:09,480
if you see what I mean

00:40:06,119 --> 00:40:12,329
I think I think the immunity wants to

00:40:09,480 --> 00:40:13,980
delete ourselves in general anyway can't

00:40:12,329 --> 00:40:15,540
be as small as possible so maybe

00:40:13,980 --> 00:40:19,500
eventually that just becomes part of

00:40:15,540 --> 00:40:21,059
that top level copy thing by a few I

00:40:19,500 --> 00:40:24,990
would still be that kind of a value in

00:40:21,059 --> 00:40:26,640
there being a CRV up there a it kind of

00:40:24,990 --> 00:40:28,890
dude couples you from exactly you won't

00:40:26,640 --> 00:40:32,760
you spits out at the back end so as a

00:40:28,890 --> 00:40:34,500
user I've got my hiraku workflow if I

00:40:32,760 --> 00:40:37,680
want to put that on top of kind of like

00:40:34,500 --> 00:40:39,420
K native put on topic a native if I want

00:40:37,680 --> 00:40:40,890
to put that on top of low level

00:40:39,420 --> 00:40:41,640
deployments I'd put on top alone than

00:40:40,890 --> 00:40:43,349
our deployment

00:40:41,640 --> 00:40:51,930
I want to customize it some other way I

00:40:43,349 --> 00:40:55,290
can do that and kind of you know in it

00:40:51,930 --> 00:40:57,300
was what we were saying a little bit

00:40:55,290 --> 00:40:59,220
earlier and I don't think it makes sense

00:40:57,300 --> 00:41:01,829
to decouple ourselves from kubernetes

00:40:59,220 --> 00:41:03,240
excuse me a stable States but I do think

00:41:01,829 --> 00:41:05,520
there's some value in decoupling

00:41:03,240 --> 00:41:08,040
ourselves from what particularly animals

00:41:05,520 --> 00:41:12,290
and your crazy including at ease because

00:41:08,040 --> 00:41:14,520
there is still quite a lot of you know

00:41:12,290 --> 00:41:17,180
potential innovation wanna be able to

00:41:14,520 --> 00:41:17,180
take advantage of

00:41:35,520 --> 00:41:37,580
you

00:41:44,160 --> 00:41:46,220
you

00:41:49,130 --> 00:41:56,490
all right so where are we on the CR D

00:41:52,290 --> 00:41:59,810
all the things stuff what I understood

00:41:56,490 --> 00:42:05,070
from so what I was hearing from Jules is

00:41:59,810 --> 00:42:07,800
that he thinks it is and or should be a

00:42:05,070 --> 00:42:10,130
high priority to get at least to a C or

00:42:07,800 --> 00:42:12,180
D between copy and a ring and

00:42:10,130 --> 00:42:19,080
potentially an additional C or D for

00:42:12,180 --> 00:42:22,800
copy itself like what what does this

00:42:19,080 --> 00:42:26,130
mean for for like I don't know the the

00:42:22,800 --> 00:42:29,550
stuff that teams - like Jules does it

00:42:26,130 --> 00:42:31,550
change anything for a rainy for you like

00:42:29,550 --> 00:42:38,580
is this something you will be looking at

00:42:31,550 --> 00:42:41,550
soon soonish um my my feeling is without

00:42:38,580 --> 00:42:44,040
like work done and copy whatever you

00:42:41,550 --> 00:42:46,410
will be doing in a rainy won't won't

00:42:44,040 --> 00:42:50,070
help budget rent copy doesn't start

00:42:46,410 --> 00:42:51,990
writing series you can still do that

00:42:50,070 --> 00:42:54,150
whole approach with like pulling the cup

00:42:51,990 --> 00:42:55,470
and roll a database and then creating

00:42:54,150 --> 00:42:58,980
them but I don't think that's the thing

00:42:55,470 --> 00:43:01,619
you want to be using so this is one of

00:42:58,980 --> 00:43:07,680
this mean we can see a rescue Chiara is

00:43:01,619 --> 00:43:09,240
happy but I'll be honest it seems high

00:43:07,680 --> 00:43:12,869
priority as long as it's someone else's

00:43:09,240 --> 00:43:14,520
high priority and I don't know if it's

00:43:12,869 --> 00:43:18,230
our highest priority if our highest

00:43:14,520 --> 00:43:21,540
priority is still probably v3 be honest

00:43:18,230 --> 00:43:24,600
and say I think people do need to be

00:43:21,540 --> 00:43:30,869
three API to work between the two more

00:43:24,600 --> 00:43:34,109
than then you'd see all these cases yeah

00:43:30,869 --> 00:43:37,260
I don't know I I do feel like it would

00:43:34,109 --> 00:43:40,310
be an important and useful thing and I'm

00:43:37,260 --> 00:43:40,310
not gonna you know

00:43:41,260 --> 00:43:45,040
not gonna say it's actually the most

00:43:43,600 --> 00:43:46,450
important thing on my back hug so I can

00:43:45,040 --> 00:43:54,510
imagine it's not the most pointed than

00:43:46,450 --> 00:43:57,369
anyone's back on I think everybody I

00:43:54,510 --> 00:44:02,710
know of generally agrees it would be

00:43:57,369 --> 00:44:05,050
valuable I'm not aware of the relative

00:44:02,710 --> 00:44:07,480
priority but if somebody is passionate

00:44:05,050 --> 00:44:10,570
about it and wants to work on it

00:44:07,480 --> 00:44:12,570
I expect the contribution will be

00:44:10,570 --> 00:44:16,090
welcomed

00:44:12,570 --> 00:44:17,680
it does seem fair to say that no one in

00:44:16,090 --> 00:44:19,180
this fake which I'm going to take these

00:44:17,680 --> 00:44:24,460
in the ropes and stiff is pushing back

00:44:19,180 --> 00:44:26,200
against the idea so maybe that's an

00:44:24,460 --> 00:44:27,520
interesting data point if you see what I

00:44:26,200 --> 00:44:30,340
mean they were all kind of like to come

00:44:27,520 --> 00:44:32,500
ther E and if we could prioritize it we

00:44:30,340 --> 00:44:35,290
don't just like the idea of it happening

00:44:32,500 --> 00:44:39,760
so maybe maybe given some of this

00:44:35,290 --> 00:44:42,520
started with a half a project the puns

00:44:39,760 --> 00:44:44,619
of people are kind of motivated and when

00:44:42,520 --> 00:44:47,050
it dries that further you see what I

00:44:44,619 --> 00:44:50,920
mean I think like you know there is a

00:44:47,050 --> 00:44:53,320
clue so it can be done and maybe maybe

00:44:50,920 --> 00:44:54,850
about something similar that keeps a

00:44:53,320 --> 00:44:55,990
lung maybe there's someone interests

00:44:54,850 --> 00:44:57,490
they didn't have to try and push it

00:44:55,990 --> 00:45:00,030
forward when it becomes something we

00:44:57,490 --> 00:45:00,030
want to adopt

00:45:01,990 --> 00:45:09,540
it'd be a rewrite of the car controller

00:45:04,810 --> 00:45:12,160
angle yeah that might be tougher and

00:45:09,540 --> 00:45:14,170
more than that's impossible but that

00:45:12,160 --> 00:45:16,020
might be tougher I do feel like a cloud

00:45:14,170 --> 00:45:20,440
Patrol it's probably the one bit of

00:45:16,020 --> 00:45:22,900
cloud foundry and go isn't you know not

00:45:20,440 --> 00:45:25,180
a great language for reviews and if if

00:45:22,900 --> 00:45:28,060
you've ever and I know you have if

00:45:25,180 --> 00:45:31,540
you've ever worked with the kubernetes

00:45:28,060 --> 00:45:34,630
go clients you probably know what I mean

00:45:31,540 --> 00:45:37,180
go is not a language there is written

00:45:34,630 --> 00:45:39,460
for doing that stuff and it I mean and

00:45:37,180 --> 00:45:41,260
that's wild crazy so one of the main

00:45:39,460 --> 00:45:42,970
reasons they're so painful to learn that

00:45:41,260 --> 00:45:43,990
writing an incredible amount of

00:45:42,970 --> 00:45:53,650
boilerplate there would have been one

00:45:43,990 --> 00:45:56,230
line for you if you declare the EPI

00:45:53,650 --> 00:45:59,609
using something like swagger I've

00:45:56,230 --> 00:46:02,849
written so many pens and go that I mean

00:45:59,609 --> 00:46:14,440
boilerplate is kind of taking care of

00:46:02,849 --> 00:46:16,540
generating but anyway I feel like I feel

00:46:14,440 --> 00:46:17,710
like that would be a v5 you know it'll

00:46:16,540 --> 00:46:21,339
be a long time before we had the

00:46:17,710 --> 00:46:23,050
matching api's and be a whole lot of

00:46:21,339 --> 00:46:25,300
migration I mean I was thinking copy

00:46:23,050 --> 00:46:31,510
we're doing but it feels like you know

00:46:25,300 --> 00:46:34,030
first the reason I mention it is because

00:46:31,510 --> 00:46:35,890
I actually think hacking on something

00:46:34,030 --> 00:46:39,089
like that would be easier than hacking

00:46:35,890 --> 00:46:45,940
on the on the clock controller to get to

00:46:39,089 --> 00:46:48,280
from an API to see our DS so I think yep

00:46:45,940 --> 00:46:51,280
I was I was about to say I think there

00:46:48,280 --> 00:46:53,740
was a project like a few I'm not sure

00:46:51,280 --> 00:46:56,440
like when it exactly happened but I

00:46:53,740 --> 00:46:59,859
think it they took like a few weeks

00:46:56,440 --> 00:47:04,420
actually to try to rewrite cloud

00:46:59,859 --> 00:47:08,020
controller in golang this this happened

00:47:04,420 --> 00:47:10,119
a while back so maybe maybe Shannon or

00:47:08,020 --> 00:47:13,950
jewels or like other people remember

00:47:10,119 --> 00:47:15,670
more of it but I think like the whole

00:47:13,950 --> 00:47:19,240
like what came out

00:47:15,670 --> 00:47:21,250
it was it doesn't seem like at this

00:47:19,240 --> 00:47:25,359
point in time with a reasonable effort

00:47:21,250 --> 00:47:26,619
you can and should be doing it and and

00:47:25,359 --> 00:47:28,720
this is not with like five minutes

00:47:26,619 --> 00:47:30,549
looking into it but with actual time

00:47:28,720 --> 00:47:34,809
being spent on it before coming to that

00:47:30,549 --> 00:47:36,730
opinion I remember it I really I think

00:47:34,809 --> 00:47:38,349
it's a different thing like I think

00:47:36,730 --> 00:47:41,470
that's like one thing is should you

00:47:38,349 --> 00:47:43,750
rewrite the crowd control lingo but

00:47:41,470 --> 00:47:45,420
that's one side the other is to see are

00:47:43,750 --> 00:47:48,280
these and and and the series is just

00:47:45,420 --> 00:47:51,849
where we currently have this sync loop

00:47:48,280 --> 00:47:56,230
that goes in pings arena for each thing

00:47:51,849 --> 00:48:00,130
is expecting we can just create a CID

00:47:56,230 --> 00:48:04,150
free thing we're expecting a like so

00:48:00,130 --> 00:48:06,010
although the kubernetes go climb looks

00:48:04,150 --> 00:48:07,510
incredibly scary and terrible it's

00:48:06,010 --> 00:48:11,109
actually a perfectly reasonable REST API

00:48:07,510 --> 00:48:15,970
and for kubernetes which is I mean just

00:48:11,109 --> 00:48:18,549
case of posting and the same Jason

00:48:15,970 --> 00:48:23,740
that's in the ammo file on up to create

00:48:18,549 --> 00:48:26,589
the CID and it's it's it's not I know

00:48:23,740 --> 00:48:29,619
Zach or any page of it and we did a

00:48:26,589 --> 00:48:33,510
spike on it in hand thing it's not very

00:48:29,619 --> 00:48:37,619
difficult to have copy creates the IDs

00:48:33,510 --> 00:48:40,839
for this is very similar to how we

00:48:37,619 --> 00:48:43,329
migrated from DEA s to Diego

00:48:40,839 --> 00:48:45,579
we had external synchronization

00:48:43,329 --> 00:48:48,790
mechanisms that were eventually absorbed

00:48:45,579 --> 00:48:50,819
into cloud controller in fact about like

00:48:48,790 --> 00:48:54,490
currently we have external

00:48:50,819 --> 00:48:56,680
synchronization mechanisms and yes and

00:48:54,490 --> 00:49:00,549
what we're really talking about is

00:48:56,680 --> 00:49:01,990
moving them into cloud controller yes

00:49:00,549 --> 00:49:05,290
yes right now

00:49:01,990 --> 00:49:07,470
you hit me Renee over HTTP which goes

00:49:05,290 --> 00:49:10,210
and creates loads of Cuban SEC IDs

00:49:07,470 --> 00:49:13,450
instead of that cloud controller crates

00:49:10,210 --> 00:49:15,130
the top-level CID and then arena is like

00:49:13,450 --> 00:49:19,000
does asynch lead to create all the other

00:49:15,130 --> 00:49:22,930
you know deployments and services and

00:49:19,000 --> 00:49:26,500
whatnot but yeah it it is really just a

00:49:22,930 --> 00:49:28,370
case of motion that in and he's if there

00:49:26,500 --> 00:49:30,840
isn't

00:49:28,370 --> 00:49:34,920
he's a massively difficult to create a

00:49:30,840 --> 00:49:36,750
CID and from Ruby it's really just and

00:49:34,920 --> 00:49:39,660
wouldn't require rewriting our

00:49:36,750 --> 00:49:42,840
controller it's just no no you really

00:49:39,660 --> 00:49:44,400
know and even if it did the better

00:49:42,840 --> 00:49:46,020
option frankly would be to just have

00:49:44,400 --> 00:49:48,060
like a go process tweaks and the cloud

00:49:46,020 --> 00:49:52,500
controller database to do that sync loop

00:49:48,060 --> 00:49:54,300
if you really wanted to do Ingo you just

00:49:52,500 --> 00:50:03,750
do that it's like a separate job so if

00:49:54,300 --> 00:50:06,510
we had to do that for what it's worth

00:50:03,750 --> 00:50:09,240
Marco I do remember several efforts to

00:50:06,510 --> 00:50:12,420
rewrite the cloud controller and go I

00:50:09,240 --> 00:50:15,780
think I wasn't on those teams but I

00:50:12,420 --> 00:50:17,940
recall that teams were spun up and

00:50:15,780 --> 00:50:22,260
worked on it for a couple of months at a

00:50:17,940 --> 00:50:26,640
time and gave up I don't know why I

00:50:22,260 --> 00:50:28,470
assume it can be done I don't believe

00:50:26,640 --> 00:50:29,720
that's impossible it just hasn't been

00:50:28,470 --> 00:50:33,420
done yet

00:50:29,720 --> 00:50:35,990
yeah I'm sure it can be done

00:50:33,420 --> 00:50:40,170
I think I'm not too sure the values

00:50:35,990 --> 00:50:42,690
people think I mean it's not like this

00:50:40,170 --> 00:50:45,510
is just enough where is it right I mean

00:50:42,690 --> 00:50:47,550
leaving is a pretty good cloud like just

00:50:45,510 --> 00:50:49,920
I mean look like look at look at the

00:50:47,550 --> 00:50:51,720
Cuban fu stuff like there's just so much

00:50:49,920 --> 00:50:53,970
code generation that it has to do

00:50:51,720 --> 00:50:57,150
because it doesn't have like generics

00:50:53,970 --> 00:51:00,720
and when you like a database API is so

00:50:57,150 --> 00:51:06,750
like also generated and you can totally

00:51:00,720 --> 00:51:08,580
doing how you doing though but it's not

00:51:06,750 --> 00:51:12,810
like fast started plan is important for

00:51:08,580 --> 00:51:15,890
a Web API release immediately musical

00:51:12,810 --> 00:51:15,890
language writing Web API

00:51:18,680 --> 00:51:20,740
you

00:51:28,100 --> 00:51:32,010
I'll go further if I was going to

00:51:30,150 --> 00:51:36,000
rewrite I'd rewrite it in JavaScript

00:51:32,010 --> 00:51:39,120
quite honestly nice I'm waiting for that

00:51:36,000 --> 00:51:40,790
too and get a repository in Cloud

00:51:39,120 --> 00:51:46,230
Foundry incubator at some point in time

00:51:40,790 --> 00:51:49,620
all right I think we are on the top four

00:51:46,230 --> 00:51:52,140
of our our leading so I'm not sure if we

00:51:49,620 --> 00:51:54,570
really get to some closure for this

00:51:52,140 --> 00:51:56,690
point but I am feeling that we had a

00:51:54,570 --> 00:51:59,910
good conversation on the holes here the

00:51:56,690 --> 00:52:02,510
stuff now it's just up to you Jules

00:51:59,910 --> 00:52:07,550
to prioritize all the stuff and then

00:52:02,510 --> 00:52:07,550
we're looking forward to things awesome

00:52:08,120 --> 00:52:13,130
no just kidding obviously

00:52:10,340 --> 00:52:15,720
it's up to us to make up our minds and

00:52:13,130 --> 00:52:17,400
strategies accordingly check under your

00:52:15,720 --> 00:52:19,830
Christmas tree and we'll find out if

00:52:17,400 --> 00:52:26,070
you've been naughty or nice but I think

00:52:19,830 --> 00:52:29,940
it might be bad knees we'll see we'll

00:52:26,070 --> 00:52:33,860
see we'll see all right awesome so

00:52:29,940 --> 00:52:38,250
everybody have a great week or two and

00:52:33,860 --> 00:52:41,510
see you same place in two week from now

00:52:38,250 --> 00:52:41,510

YouTube URL: https://www.youtube.com/watch?v=uTN5Um9sz64


