Title: Cloud Foundry for Kubernetes SIG [May 2021]
Publication date: 2021-05-04
Playlist: Cloud Foundry for Kubernetes Monthly SIG
Description: 
	
Captions: 
	00:03:45,440 --> 00:03:50,239
thank you

00:03:46,959 --> 00:04:01,840
hello hi ben hi how are you

00:03:50,239 --> 00:04:01,840
good thank you

00:05:08,560 --> 00:05:11,840
hi folks

00:05:14,160 --> 00:05:20,560
good morning hello hey

00:05:17,680 --> 00:05:20,560
everyone morning

00:05:20,800 --> 00:05:25,840
yes okay good evening to baron hello

00:05:31,759 --> 00:05:34,960
is that a chalkboard behind you

00:05:36,080 --> 00:05:41,440
yes my kids oh okay so i'm showing the

00:05:39,759 --> 00:05:42,560
office we make it so sometimes you can

00:05:41,440 --> 00:05:43,120
see weird things they're learning

00:05:42,560 --> 00:05:53,840
english

00:05:43,120 --> 00:05:53,840
actually oh nice

00:05:57,919 --> 00:06:02,479
so while while people are joining i'm

00:06:00,240 --> 00:06:05,520
actually trying to

00:06:02,479 --> 00:06:06,080
recall where we ended last time in terms

00:06:05,520 --> 00:06:08,880
of going

00:06:06,080 --> 00:06:09,680
through the comments i think anyways in

00:06:08,880 --> 00:06:11,759
between

00:06:09,680 --> 00:06:13,600
people added additional feedback but

00:06:11,759 --> 00:06:16,639
maybe it would be good to

00:06:13,600 --> 00:06:18,880
kind of start where we where we ended

00:06:16,639 --> 00:06:22,080
last time

00:06:18,880 --> 00:06:25,919
and not entirely sure um

00:06:22,080 --> 00:06:28,400
i think we talked about the crd

00:06:25,919 --> 00:06:28,400
topic

00:06:29,680 --> 00:06:37,759
we didn't

00:06:34,960 --> 00:06:38,639
i'm trying to remember as well looking

00:06:37,759 --> 00:06:39,980
at some of the

00:06:38,639 --> 00:06:42,000
the notes um

00:06:39,980 --> 00:06:44,000
[Music]

00:06:42,000 --> 00:06:48,000
from the session two weeks ago two down

00:06:44,000 --> 00:06:49,840
at the bottom of the dock

00:06:48,000 --> 00:06:51,680
see you made a comment referring back to

00:06:49,840 --> 00:06:54,319
the april 21st

00:06:51,680 --> 00:07:03,840
session not sure if that means that we

00:06:54,319 --> 00:07:03,840
that probably means we talked about it

00:07:04,240 --> 00:07:08,880
that was on guillaume's question around

00:07:07,360 --> 00:07:12,880
the kubernetes api

00:07:08,880 --> 00:07:17,360
and if or if not it should be surfaced

00:07:12,880 --> 00:07:20,479
to developers

00:07:17,360 --> 00:07:20,479
hey chris hey simon

00:07:22,400 --> 00:07:25,440
hey hello

00:07:29,120 --> 00:07:45,840
let's wait one or two more minutes

00:08:07,440 --> 00:08:11,120
so i'm thinking eric probably this is

00:08:09,520 --> 00:08:12,960
where we

00:08:11,120 --> 00:08:14,479
stopped and then this is probably where

00:08:12,960 --> 00:08:17,520
we should

00:08:14,479 --> 00:08:18,319
continue what do you think yeah that

00:08:17,520 --> 00:08:20,879
sounds good

00:08:18,319 --> 00:08:21,520
or oh go ahead kim yes maybe there was

00:08:20,879 --> 00:08:25,199
um

00:08:21,520 --> 00:08:27,120
a spread end of page two

00:08:25,199 --> 00:08:29,120
i think you're beginning of page three i

00:08:27,120 --> 00:08:30,440
believe

00:08:29,120 --> 00:08:32,399
yeah um

00:08:30,440 --> 00:08:35,120
[Music]

00:08:32,399 --> 00:08:36,240
uh yeah should should prepare to yes in

00:08:35,120 --> 00:08:39,039
this should prepare to

00:08:36,240 --> 00:08:40,120
highlight end of page two there what the

00:08:39,039 --> 00:08:41,760
thread about

00:08:40,120 --> 00:08:44,800
[Music]

00:08:41,760 --> 00:08:47,839
yes what to surface for api developers

00:08:44,800 --> 00:08:50,399
for for application developers in terms

00:08:47,839 --> 00:08:50,399
of um

00:08:51,040 --> 00:08:54,480
if they are in the in the personnel

00:08:53,760 --> 00:08:57,600
where

00:08:54,480 --> 00:08:59,360
they are actually also using kubernetes

00:08:57,600 --> 00:09:02,480
cpi

00:08:59,360 --> 00:09:06,000
and whether

00:09:02,480 --> 00:09:08,000
the treadmill if a cabinet should aim to

00:09:06,000 --> 00:09:10,560
become a template engine

00:09:08,000 --> 00:09:10,560
into which

00:09:11,040 --> 00:09:15,600
the pass is creating objects and the

00:09:13,680 --> 00:09:17,839
users resources and the user as

00:09:15,600 --> 00:09:20,720
visibility into these resources

00:09:17,839 --> 00:09:22,640
can see them and what kind of backward

00:09:20,720 --> 00:09:24,800
compatibility contract is provided

00:09:22,640 --> 00:09:28,880
should they see

00:09:24,800 --> 00:09:33,920
bots services secrets and so forth

00:09:28,880 --> 00:09:33,920
or should be restricted to more

00:09:34,240 --> 00:09:38,160
long-term contracts such as

00:09:36,440 --> 00:09:41,600
discoverability

00:09:38,160 --> 00:09:44,399
maybe observability

00:09:41,600 --> 00:09:46,160
and not that much on the actual

00:09:44,399 --> 00:09:51,839
kubernetes resources

00:09:46,160 --> 00:09:51,839
backing the managed apps

00:09:55,920 --> 00:09:59,920
but yes yes very sorry i didn't have

00:09:58,160 --> 00:10:03,600
time to see your comment from

00:09:59,920 --> 00:10:06,160
this today and today so it might be uh

00:10:03,600 --> 00:10:06,160
duplicate

00:10:07,120 --> 00:10:10,320
let's maybe resume there looking at the

00:10:09,120 --> 00:10:12,079
time um

00:10:10,320 --> 00:10:14,560
i know that at least jens will join a

00:10:12,079 --> 00:10:18,399
little bit later but probably

00:10:14,560 --> 00:10:21,600
should get started so i'm not sure eric

00:10:18,399 --> 00:10:24,240
do you want to like summarize

00:10:21,600 --> 00:10:24,959
the comments that you put in recently

00:10:24,240 --> 00:10:28,240
yeah i

00:10:24,959 --> 00:10:29,360
uh i think i um i think a lot of the

00:10:28,240 --> 00:10:33,200
commentary

00:10:29,360 --> 00:10:36,480
on that section had happened before

00:10:33,200 --> 00:10:39,040
the call two weeks ago and so i

00:10:36,480 --> 00:10:40,399
um i did want to sum up some of what we

00:10:39,040 --> 00:10:43,360
had discussed

00:10:40,399 --> 00:10:43,920
on the call on the thread and then i

00:10:43,360 --> 00:10:45,600
didn't

00:10:43,920 --> 00:10:48,399
recall if we talked about this but i

00:10:45,600 --> 00:10:51,680
think one one hypothesis that we have

00:10:48,399 --> 00:10:54,160
is that if there's a relatively direct

00:10:51,680 --> 00:10:57,279
correspondence between a cf space

00:10:54,160 --> 00:10:59,839
and a namespace in a particular cluster

00:10:57,279 --> 00:11:01,040
maybe let alone some of the discussions

00:10:59,839 --> 00:11:02,959
about spreading

00:11:01,040 --> 00:11:05,200
workloads in a space across multiple

00:11:02,959 --> 00:11:06,880
clusters but if there's that kind of

00:11:05,200 --> 00:11:08,800
direct correspondence that might make

00:11:06,880 --> 00:11:11,279
defining um

00:11:08,800 --> 00:11:13,040
policies via case our back that allow

00:11:11,279 --> 00:11:15,760
that kind of restriction easier

00:11:13,040 --> 00:11:18,000
than having to um do something more

00:11:15,760 --> 00:11:20,720
nuanced in terms of policy around object

00:11:18,000 --> 00:11:23,760
metadata with like copa and gatekeeper

00:11:20,720 --> 00:11:26,640
you know if if if it had to look at some

00:11:23,760 --> 00:11:28,079
label or annotation on the resources

00:11:26,640 --> 00:11:29,440
that said like actually this is in the

00:11:28,079 --> 00:11:31,040
cf space so

00:11:29,440 --> 00:11:32,720
allow this set of users access to it but

00:11:31,040 --> 00:11:36,160
not the set of users that seems

00:11:32,720 --> 00:11:40,079
like pretty brittle um but if that

00:11:36,160 --> 00:11:43,519
is a simpler expression in terms of

00:11:40,079 --> 00:11:46,480
okay you know this there's this um

00:11:43,519 --> 00:11:47,440
uh rule or cluster rule or something um

00:11:46,480 --> 00:11:49,680
defined in

00:11:47,440 --> 00:11:51,680
in the cluster that effectively

00:11:49,680 --> 00:11:52,800
corresponds to the space permissions

00:11:51,680 --> 00:11:54,639
then that seems a lot more

00:11:52,800 --> 00:11:56,480
straightforward and and easier to manage

00:11:54,639 --> 00:11:58,240
within the cluster itself

00:11:56,480 --> 00:11:59,519
and that's like the implementation

00:11:58,240 --> 00:12:00,880
perspective right this is not

00:11:59,519 --> 00:12:04,079
necessarily saying

00:12:00,880 --> 00:12:06,320
cf developers get exposed to kubernetes

00:12:04,079 --> 00:12:08,560
or something like that this is just

00:12:06,320 --> 00:12:11,680
right yeah

00:12:08,560 --> 00:12:14,560
you know i think i think maybe um

00:12:11,680 --> 00:12:16,079
uh moving into some of the higher level

00:12:14,560 --> 00:12:19,279
concerns that we've had

00:12:16,079 --> 00:12:19,600
um i think that like what we've built

00:12:19,279 --> 00:12:23,839
with

00:12:19,600 --> 00:12:28,079
cf has been has been this uh

00:12:23,839 --> 00:12:31,600
really fantastic um

00:12:28,079 --> 00:12:35,600
and extremely reliable system

00:12:31,600 --> 00:12:35,600
at providing this um

00:12:35,760 --> 00:12:40,399
end-to-end hosting environment for

00:12:38,560 --> 00:12:42,079
application workloads

00:12:40,399 --> 00:12:43,920
and the developer workflows around them

00:12:42,079 --> 00:12:45,440
but like

00:12:43,920 --> 00:12:47,040
uh you know time and time again we see

00:12:45,440 --> 00:12:48,800
these expressions that

00:12:47,040 --> 00:12:50,800
uh there's kind of you know it's it's

00:12:48,800 --> 00:12:52,800
all or nothing there's no way

00:12:50,800 --> 00:12:54,000
to pick and choose pieces of that

00:12:52,800 --> 00:12:58,160
functionality

00:12:54,000 --> 00:12:59,839
or to um uh make that a more permeable

00:12:58,160 --> 00:13:02,639
barrier when it's appropriate even if

00:12:59,839 --> 00:13:05,360
that's not appropriate for most users

00:13:02,639 --> 00:13:06,480
and you know i think the the details of

00:13:05,360 --> 00:13:10,320
that are the thing that we

00:13:06,480 --> 00:13:12,480
do need to work out but um

00:13:10,320 --> 00:13:13,839
you know hearing examples of like oh i

00:13:12,480 --> 00:13:17,440
you know

00:13:13,839 --> 00:13:20,720
sure if it back when it was

00:13:17,440 --> 00:13:24,720
cf or vms there's a you know

00:13:20,720 --> 00:13:26,639
an easier trade-off to understand and to

00:13:24,720 --> 00:13:29,680
manage but now that we have these

00:13:26,639 --> 00:13:32,839
more intermediate representations of

00:13:29,680 --> 00:13:35,440
uh application workloads as kubernetes

00:13:32,839 --> 00:13:37,200
resources um

00:13:35,440 --> 00:13:38,560
i think we've all been feeling a lot

00:13:37,200 --> 00:13:40,639
more pressure to be able to say like

00:13:38,560 --> 00:13:42,160
yeah you know i'd love a cf expression

00:13:40,639 --> 00:13:44,560
of this workload in terms of

00:13:42,160 --> 00:13:46,639
kubernetes constructs but you know i

00:13:44,560 --> 00:13:50,000
might need to break outside of that box

00:13:46,639 --> 00:13:51,600
a little bit you know maybe i need to

00:13:50,000 --> 00:13:53,600
be able to have a different system for

00:13:51,600 --> 00:13:55,040
generating container images that's

00:13:53,600 --> 00:13:57,600
easier

00:13:55,040 --> 00:13:58,959
and that fits in more naturally or maybe

00:13:57,600 --> 00:14:00,800
i want to take a look at the workload

00:13:58,959 --> 00:14:02,000
definition that cf produced in terms of

00:14:00,800 --> 00:14:04,240
kubernetes resources

00:14:02,000 --> 00:14:06,720
but hey what if i just want to grab that

00:14:04,240 --> 00:14:08,800
and try tweaking it even outside of cf

00:14:06,720 --> 00:14:11,040
or what if i need to to detach that

00:14:08,800 --> 00:14:13,279
thing and manage it outside of cf

00:14:11,040 --> 00:14:15,279
so again like these are things that if

00:14:13,279 --> 00:14:16,800
they do violate that developer

00:14:15,279 --> 00:14:18,880
encapsulation

00:14:16,800 --> 00:14:20,240
but if the alternative is to say like

00:14:18,880 --> 00:14:23,279
well you know again

00:14:20,240 --> 00:14:24,639
it's all or nothing um for cf then i

00:14:23,279 --> 00:14:26,320
think more and more we find ourselves on

00:14:24,639 --> 00:14:28,240
the losing end of that battle

00:14:26,320 --> 00:14:31,839
um when we think it actually is the

00:14:28,240 --> 00:14:31,839
right choice for a lot of users

00:14:38,800 --> 00:14:42,320
so i think maybe getting back to like

00:14:40,480 --> 00:14:43,839
well what you know

00:14:42,320 --> 00:14:45,519
we still feel that tension around like

00:14:43,839 --> 00:14:46,959
we think that we know what's what's

00:14:45,519 --> 00:14:48,399
going to actually be most productive for

00:14:46,959 --> 00:14:49,600
a lot of organizations and a lot of

00:14:48,399 --> 00:14:53,519
developers

00:14:49,600 --> 00:14:54,959
um how do we make it more flexible for

00:14:53,519 --> 00:14:57,839
platform operators which i think

00:14:54,959 --> 00:15:03,120
includes a lot of ourselves

00:14:57,839 --> 00:15:05,279
to allow more nuanced access policy

00:15:03,120 --> 00:15:07,199
around these resources that allows us to

00:15:05,279 --> 00:15:07,440
save you know most of the time yeah it

00:15:07,199 --> 00:15:10,720
is

00:15:07,440 --> 00:15:13,040
it is locked down to the point where

00:15:10,720 --> 00:15:15,120
um developers are going to only see the

00:15:13,040 --> 00:15:19,360
high level abstractions that they need

00:15:15,120 --> 00:15:21,040
to to do their jobs efficiently

00:15:19,360 --> 00:15:22,639
and the rest of the system can get out

00:15:21,040 --> 00:15:24,480
of the way and enable them

00:15:22,639 --> 00:15:25,600
but when they do need to to break

00:15:24,480 --> 00:15:27,360
through to those lower levels of

00:15:25,600 --> 00:15:29,360
abstraction or to understand

00:15:27,360 --> 00:15:30,480
something that's going on or even to

00:15:29,360 --> 00:15:34,240
interact with

00:15:30,480 --> 00:15:35,680
um uh other workloads in a kubernetes

00:15:34,240 --> 00:15:36,320
environment because that's not going

00:15:35,680 --> 00:15:37,519
away

00:15:36,320 --> 00:15:38,880
you know what what are the most

00:15:37,519 --> 00:15:40,639
important things that we need to enable

00:15:38,880 --> 00:15:44,079
or how do we grant them the access to do

00:15:40,639 --> 00:15:44,880
those things in a limited way a band

00:15:44,079 --> 00:15:48,000
would you mind

00:15:44,880 --> 00:15:51,199
crawling up just a little bit um

00:15:48,000 --> 00:15:54,480
respect to the proposals i've made

00:15:51,199 --> 00:15:57,920
in terms of those those attractions that

00:15:54,480 --> 00:16:02,959
can be um yeah again a bit more i

00:15:57,920 --> 00:16:05,920
think oh it's in your comments you mean

00:16:02,959 --> 00:16:05,920
yes yeah

00:16:07,440 --> 00:16:10,560
use a um strategy to try and make them

00:16:09,440 --> 00:16:12,800
visible

00:16:10,560 --> 00:16:14,800
i think that's your top most comment for

00:16:12,800 --> 00:16:17,120
that section

00:16:14,800 --> 00:16:18,639
yeah um a little down here that there

00:16:17,120 --> 00:16:21,890
was a one two three

00:16:18,639 --> 00:16:23,279
numbered so that we can reason about

00:16:21,890 --> 00:16:25,759
[Music]

00:16:23,279 --> 00:16:25,759
what's that

00:16:26,800 --> 00:16:36,079
is it this one one two down

00:16:31,360 --> 00:16:38,079
oh there we go yes service discovery uh

00:16:36,079 --> 00:16:40,880
kubernetes levels and annotation

00:16:38,079 --> 00:16:42,240
to um to discover ingress networks and

00:16:40,880 --> 00:16:42,510
points

00:16:42,240 --> 00:16:45,639
um

00:16:42,510 --> 00:16:45,639
[Music]

00:16:46,160 --> 00:16:53,680
yeah that was the marketplace

00:16:49,440 --> 00:16:56,079
aspect so that

00:16:53,680 --> 00:16:56,079
we can't

00:16:58,160 --> 00:17:03,400
over here yeah

00:17:01,519 --> 00:17:06,559
after this broker

00:17:03,400 --> 00:17:06,559
[Music]

00:17:07,760 --> 00:17:11,520
yes to look to look up third party

00:17:10,240 --> 00:17:14,880
workloads

00:17:11,520 --> 00:17:16,880
so there would still be a still be a

00:17:14,880 --> 00:17:19,679
service broker but

00:17:16,880 --> 00:17:20,799
can use maybe labels and annotations to

00:17:19,679 --> 00:17:24,000
uh

00:17:20,799 --> 00:17:24,880
so that an app in cloud foundry can look

00:17:24,000 --> 00:17:29,679
up existing

00:17:24,880 --> 00:17:32,720
uh services in the same cluster

00:17:29,679 --> 00:17:35,200
so discovering both sides i was thinking

00:17:32,720 --> 00:17:36,720
that maybe discovery would be one

00:17:35,200 --> 00:17:39,600
specific element we could

00:17:36,720 --> 00:17:40,799
that could have some value for

00:17:39,600 --> 00:17:44,080
developers

00:17:40,799 --> 00:17:46,400
to get more more details

00:17:44,080 --> 00:17:47,120
and to integrate better with kubernetes

00:17:46,400 --> 00:17:49,200
uh

00:17:47,120 --> 00:17:51,520
i'm not reporting it very nice today

00:17:49,200 --> 00:17:51,520
sorry

00:17:53,039 --> 00:17:59,120
yeah so i think for the for the

00:17:56,160 --> 00:18:00,880
service broker i've seen like a couple

00:17:59,120 --> 00:18:03,039
of implementations that that actually

00:18:00,880 --> 00:18:06,160
already do that i'm not sure that

00:18:03,039 --> 00:18:10,080
like having the service broker api

00:18:06,160 --> 00:18:12,240
in place kind of enables you to do

00:18:10,080 --> 00:18:13,919
these types of lookups behind the scenes

00:18:12,240 --> 00:18:16,720
somehow right whereas

00:18:13,919 --> 00:18:18,000
i would say your example 1.1 here

00:18:16,720 --> 00:18:21,039
definitely is something

00:18:18,000 --> 00:18:25,440
where like if we say

00:18:21,039 --> 00:18:27,360
um like we have specific labels and

00:18:25,440 --> 00:18:28,080
annotations on the kubernetes side then

00:18:27,360 --> 00:18:31,120
it's almost

00:18:28,080 --> 00:18:34,720
as if we would define a certain api that

00:18:31,120 --> 00:18:36,480
kind of is guaranteed to to exist and

00:18:34,720 --> 00:18:43,840
continue to exist even

00:18:36,480 --> 00:18:43,840
if updates are happening

00:18:44,960 --> 00:18:52,320
yeah i i think the the idea of having a

00:18:48,400 --> 00:18:52,320
um more

00:18:52,960 --> 00:19:00,480
regular uh and potentially stable

00:18:56,000 --> 00:19:02,960
um set of identifiers

00:19:00,480 --> 00:19:04,640
for the the workload as represented on

00:19:02,960 --> 00:19:06,320
the kubernetes infrastructure so that it

00:19:04,640 --> 00:19:08,840
could better interoperate

00:19:06,320 --> 00:19:10,080
with the kind of selector-based

00:19:08,840 --> 00:19:11,760
philosophy

00:19:10,080 --> 00:19:13,840
within the cluster like that that

00:19:11,760 --> 00:19:17,840
definitely makes a lot of sense to me

00:19:13,840 --> 00:19:22,320
uh in terms of uh enabling

00:19:17,840 --> 00:19:24,160
some of the um interaction patterns

00:19:22,320 --> 00:19:25,440
that i think we'd want to see in

00:19:24,160 --> 00:19:27,840
kubernetes i mean

00:19:25,440 --> 00:19:29,280
maybe it's good even to tie that back to

00:19:27,840 --> 00:19:33,200
um

00:19:29,280 --> 00:19:36,480
uh some specifics like i could envision

00:19:33,200 --> 00:19:38,240
um maybe that's even uh number two in

00:19:36,480 --> 00:19:41,120
your list

00:19:38,240 --> 00:19:42,400
being able to say like uh what if uh

00:19:41,120 --> 00:19:43,840
what if you wanted to just run the

00:19:42,400 --> 00:19:45,600
workload

00:19:43,840 --> 00:19:47,200
on the cluster using the cf app

00:19:45,600 --> 00:19:51,679
abstractions

00:19:47,200 --> 00:19:53,440
um but you wanted to use your existing

00:19:51,679 --> 00:19:55,600
uh ingress controller

00:19:53,440 --> 00:19:56,799
to route traffic to it like you didn't

00:19:55,600 --> 00:19:58,960
want to deal with

00:19:56,799 --> 00:20:01,280
uh whatever the cf system was going to

00:19:58,960 --> 00:20:04,480
bundle in and cf routing

00:20:01,280 --> 00:20:04,880
um what what kind of metadata would we

00:20:04,480 --> 00:20:08,640
need

00:20:04,880 --> 00:20:12,000
to ensure that cf could provide

00:20:08,640 --> 00:20:13,760
on uh those workload units

00:20:12,000 --> 00:20:15,120
so that they could be connected

00:20:13,760 --> 00:20:17,039
adequately to

00:20:15,120 --> 00:20:18,799
whether that's a case service or a kids

00:20:17,039 --> 00:20:20,640
ingress object or

00:20:18,799 --> 00:20:21,840
you know the the kate's gateway apis are

00:20:20,640 --> 00:20:25,039
kind of gelling and

00:20:21,840 --> 00:20:28,799
coming into place so um

00:20:25,039 --> 00:20:31,679
i think i think that that one um

00:20:28,799 --> 00:20:32,720
i feel like that has come up in in a few

00:20:31,679 --> 00:20:35,120
different

00:20:32,720 --> 00:20:36,720
venues already as one of these

00:20:35,120 --> 00:20:40,400
decouplings that we could

00:20:36,720 --> 00:20:44,000
be arranging with the system we're fully

00:20:40,400 --> 00:20:44,000
integrated on top of kubernetes

00:20:47,520 --> 00:20:54,159
great thanks maybe number three was to

00:20:51,600 --> 00:20:55,919
to relate back to heroku and twelfth

00:20:54,159 --> 00:20:59,120
father apps

00:20:55,919 --> 00:21:00,840
which was meant to have no persistence

00:20:59,120 --> 00:21:03,039
and to have a backing service sending

00:21:00,840 --> 00:21:04,640
persistence i'm wondering whether now

00:21:03,039 --> 00:21:08,000
there is

00:21:04,640 --> 00:21:10,000
use cases such as there is a machine

00:21:08,000 --> 00:21:13,200
learning process running somewhere

00:21:10,000 --> 00:21:14,960
which creates

00:21:13,200 --> 00:21:16,960
creates models that needs to be consumed

00:21:14,960 --> 00:21:20,320
by front-ends

00:21:16,960 --> 00:21:21,120
and those front-ends are suited to to be

00:21:20,320 --> 00:21:24,480
running

00:21:21,120 --> 00:21:26,480
within cloud foundry but the backing

00:21:24,480 --> 00:21:29,280
service

00:21:26,480 --> 00:21:30,240
such as s3 or streaming or database is

00:21:29,280 --> 00:21:32,559
um

00:21:30,240 --> 00:21:34,080
is a bit heavy weight and they would

00:21:32,559 --> 00:21:37,520
just want to map

00:21:34,080 --> 00:21:41,120
maybe a read-only persistent volume

00:21:37,520 --> 00:21:44,159
um so this is the extension

00:21:41,120 --> 00:21:46,240
of the the current volume bounds open

00:21:44,159 --> 00:21:50,320
size broker volume balance

00:21:46,240 --> 00:21:50,320
binding and that

00:21:50,480 --> 00:21:55,760
that could maybe enable some of those

00:21:53,120 --> 00:21:55,760
use cases

00:21:57,600 --> 00:22:02,400
oh yeah so sugiyam you're saying um like

00:22:00,720 --> 00:22:05,520
right now we have the kind of the

00:22:02,400 --> 00:22:09,679
uh read write um file system

00:22:05,520 --> 00:22:11,200
volume service um in ncf today with you

00:22:09,679 --> 00:22:14,480
know kind of nfs

00:22:11,200 --> 00:22:17,360
semantics around it and and

00:22:14,480 --> 00:22:19,200
you're bringing up the idea of instead

00:22:17,360 --> 00:22:20,400
exposing like a read-only file system

00:22:19,200 --> 00:22:23,440
interface

00:22:20,400 --> 00:22:26,640
um to some workloads to

00:22:23,440 --> 00:22:27,679
um like allow them to interact with a

00:22:26,640 --> 00:22:30,880
set of data

00:22:27,679 --> 00:22:34,159
more efficiently than kind of doing that

00:22:30,880 --> 00:22:34,159
directly over network calls

00:22:34,640 --> 00:22:38,320
yes potentially to be able to

00:22:38,559 --> 00:22:42,640
to reuse a persistent volume which is

00:22:41,200 --> 00:22:43,919
written by some other processes some

00:22:42,640 --> 00:22:46,480
other workloads

00:22:43,919 --> 00:22:47,440
and yeah maybe it's it gets tricky

00:22:46,480 --> 00:22:50,320
because of uh

00:22:47,440 --> 00:22:51,200
placement and all the subtle details

00:22:50,320 --> 00:22:53,679
that uh seems

00:22:51,200 --> 00:22:55,039
easy at first but it's complex so i'm

00:22:53,679 --> 00:22:57,520
not sure about this one

00:22:55,039 --> 00:22:59,919
uh yeah no i think i think that's that's

00:22:57,520 --> 00:23:02,240
that is really interesting

00:22:59,919 --> 00:23:02,240
um

00:23:04,799 --> 00:23:08,000
and did you say that like have you seen

00:23:07,039 --> 00:23:09,679
that pattern

00:23:08,000 --> 00:23:12,400
be of interest for was it machine

00:23:09,679 --> 00:23:12,400
learning workloads

00:23:12,720 --> 00:23:16,640
yes i recall in sap um an sap talk we

00:23:16,240 --> 00:23:20,400
had

00:23:16,640 --> 00:23:22,159
on on terraform where the sap folks they

00:23:20,400 --> 00:23:23,919
were i think they were using kubernetes

00:23:22,159 --> 00:23:25,919
for getting their machine learning

00:23:23,919 --> 00:23:28,480
models being built and they were

00:23:25,919 --> 00:23:29,280
they were needing uh things like keep

00:23:28,480 --> 00:23:32,400
flow

00:23:29,280 --> 00:23:34,320
and gpus and low level controls to be

00:23:32,400 --> 00:23:35,600
able to learn to to make those machine

00:23:34,320 --> 00:23:38,320
learnings models

00:23:35,600 --> 00:23:40,480
created but the consumption part and the

00:23:38,320 --> 00:23:42,640
api exposition they didn't need the

00:23:40,480 --> 00:23:44,240
the full complexity of kubernetes so

00:23:42,640 --> 00:23:48,400
just getting those files

00:23:44,240 --> 00:23:51,200
um and and to look to load them in a

00:23:48,400 --> 00:23:52,559
python library and serve it help them

00:23:51,200 --> 00:23:55,200
using um

00:23:52,559 --> 00:23:57,840
a rest api would just be sufficient and

00:23:55,200 --> 00:24:00,240
so maybe the boundary would be

00:23:57,840 --> 00:24:00,880
yes this volume service which makes a

00:24:00,240 --> 00:24:03,120
clean

00:24:00,880 --> 00:24:04,400
a somewhat clean interface could be a

00:24:03,120 --> 00:24:06,159
clean interface

00:24:04,400 --> 00:24:09,200
at first sight might be more complex

00:24:06,159 --> 00:24:09,200
than i think but um

00:24:10,480 --> 00:24:14,799
right so that could even be a new type

00:24:12,559 --> 00:24:15,520
of volume service that's relatively easy

00:24:14,799 --> 00:24:18,320
to implement

00:24:15,520 --> 00:24:20,480
on top of gates but still fits within

00:24:18,320 --> 00:24:20,480
the

00:24:21,279 --> 00:24:26,640
parameters of the kind of existing

00:24:24,240 --> 00:24:30,480
volume service

00:24:26,640 --> 00:24:31,960
definition and by volume service you

00:24:30,480 --> 00:24:33,120
mean the um

00:24:31,960 --> 00:24:36,000
[Music]

00:24:33,120 --> 00:24:37,200
a cloud foundry service broker with

00:24:36,000 --> 00:24:41,360
volume bindings

00:24:37,200 --> 00:24:44,320
or do you mean the kubernetes

00:24:41,360 --> 00:24:44,960
persistent volume providers um i i was

00:24:44,320 --> 00:24:47,840
thinking

00:24:44,960 --> 00:24:48,480
of the cloud foundry abstraction that we

00:24:47,840 --> 00:24:50,960
have today

00:24:48,480 --> 00:24:52,400
around you know having having that kind

00:24:50,960 --> 00:24:55,760
of logically bound

00:24:52,400 --> 00:24:58,480
to um an app workload um

00:24:55,760 --> 00:25:02,240
i expect underneath and the yeah the

00:24:58,480 --> 00:25:02,240
broker would um

00:25:03,760 --> 00:25:10,559
uh end up interacting with

00:25:06,799 --> 00:25:12,880
the kubernetes resources fairly directly

00:25:10,559 --> 00:25:14,000
um i suppose that would that would have

00:25:12,880 --> 00:25:15,919
to flow through whatever

00:25:14,000 --> 00:25:17,520
is defining the actual workload to make

00:25:15,919 --> 00:25:21,200
sure that the appropriate

00:25:17,520 --> 00:25:24,799
um uh volumes are associated

00:25:21,200 --> 00:25:28,240
to like um

00:25:24,799 --> 00:25:31,279
you know the deployment and that's pod

00:25:28,240 --> 00:25:32,480
uh spec template or um

00:25:31,279 --> 00:25:35,279
you know whatever else is going to be

00:25:32,480 --> 00:25:35,279
backing that workload

00:25:36,799 --> 00:25:40,400
i guess were you looking for the volume

00:25:38,880 --> 00:25:44,720
services stuff

00:25:40,400 --> 00:25:47,919
yeah i was i was kind of i had some

00:25:44,720 --> 00:25:50,799
memory around a kubernetes based

00:25:47,919 --> 00:25:52,960
persistency service but probably that's

00:25:50,799 --> 00:25:56,080
somewhere over in the incubator or

00:25:52,960 --> 00:25:58,320
in the cloud foundation unity repository

00:25:56,080 --> 00:26:00,240
isn't an entire issue i i guess the

00:25:58,320 --> 00:26:00,559
other remark that i wanted to make is

00:26:00,240 --> 00:26:03,200
like

00:26:00,559 --> 00:26:05,520
topics like volume services but then

00:26:03,200 --> 00:26:08,720
also maybe some some newer additions

00:26:05,520 --> 00:26:09,840
to to the functionality of cloud foundry

00:26:08,720 --> 00:26:13,679
like

00:26:09,840 --> 00:26:14,640
labels and and so on they always make me

00:26:13,679 --> 00:26:17,760
wonder if

00:26:14,640 --> 00:26:18,720
like we would would have chosen like to

00:26:17,760 --> 00:26:21,440
actually implement

00:26:18,720 --> 00:26:23,279
that type of functionality inside cloud

00:26:21,440 --> 00:26:25,440
foundry or if

00:26:23,279 --> 00:26:27,279
cloud foundry would be running on top of

00:26:25,440 --> 00:26:28,159
kubernetes we would have just said no

00:26:27,279 --> 00:26:30,080
this is

00:26:28,159 --> 00:26:31,840
kind of outside the scope of what we

00:26:30,080 --> 00:26:34,240
built cloud foundry for

00:26:31,840 --> 00:26:36,840
so previously obviously you have to kind

00:26:34,240 --> 00:26:39,039
of compete a little bit with kubernetes

00:26:36,840 --> 00:26:41,120
itself now

00:26:39,039 --> 00:26:43,200
to your example with like machine

00:26:41,120 --> 00:26:44,720
learning workloads i would still say

00:26:43,200 --> 00:26:46,720
that

00:26:44,720 --> 00:26:48,960
at least if you would kind of one to one

00:26:46,720 --> 00:26:52,640
implement today's cloud foundry model

00:26:48,960 --> 00:26:54,480
of like deriving cpu cycles from

00:26:52,640 --> 00:26:55,919
the ram that you associate to an

00:26:54,480 --> 00:26:58,960
application

00:26:55,919 --> 00:26:59,760
i think that's somewhat geared to less

00:26:58,960 --> 00:27:01,919
cpu

00:26:59,760 --> 00:27:03,279
intensive applications and more io bound

00:27:01,919 --> 00:27:06,720
applications and then

00:27:03,279 --> 00:27:07,679
obviously the question is do you enhance

00:27:06,720 --> 00:27:10,400
that model to

00:27:07,679 --> 00:27:11,760
do you make it more generic to allow

00:27:10,400 --> 00:27:14,400
also cpu

00:27:11,760 --> 00:27:16,559
heavy workloads to to actually run quote

00:27:14,400 --> 00:27:17,600
unquote inside cloud foundry or would

00:27:16,559 --> 00:27:19,919
you then

00:27:17,600 --> 00:27:20,880
rather say no this is something that

00:27:19,919 --> 00:27:22,799
should kind of run

00:27:20,880 --> 00:27:25,600
next to cloud foundry and if you have

00:27:22,799 --> 00:27:28,159
them for example a rest api this would

00:27:25,600 --> 00:27:30,080
still be a service that you could deploy

00:27:28,159 --> 00:27:30,640
inside a cloud foundry on kubernetes and

00:27:30,080 --> 00:27:32,240
that could

00:27:30,640 --> 00:27:35,120
interact with those machine learning

00:27:32,240 --> 00:27:38,399
models just running side by side

00:27:35,120 --> 00:27:40,159
so just just a thought but obviously we

00:27:38,399 --> 00:27:41,440
also have folks using persistency

00:27:40,159 --> 00:27:48,960
services so

00:27:41,440 --> 00:27:52,880
there's also the compatibility angle

00:27:48,960 --> 00:27:56,559
yeah maybe it relates to the 80 20

00:27:52,880 --> 00:27:59,679
the 80 should be made easy

00:27:56,559 --> 00:28:02,960
and the 20 percent be made possible

00:27:59,679 --> 00:28:05,679
and make possible could be you

00:28:02,960 --> 00:28:07,200
get access to the full kubernetes api

00:28:05,679 --> 00:28:07,520
with all the complexity because you need

00:28:07,200 --> 00:28:10,720
it

00:28:07,520 --> 00:28:12,880
so you can afford to ramp up

00:28:10,720 --> 00:28:14,640
but the 20 the 80 percent that don't

00:28:12,880 --> 00:28:16,880
need that

00:28:14,640 --> 00:28:18,320
um they don't need to be exposed to this

00:28:16,880 --> 00:28:21,200
complexity and they can

00:28:18,320 --> 00:28:23,840
keep the productive uh clitonry

00:28:21,200 --> 00:28:23,840
attractions

00:28:24,799 --> 00:28:27,919
so i was trying to to find what could be

00:28:27,200 --> 00:28:31,360
contract

00:28:27,919 --> 00:28:33,760
to enable stable contracting time such

00:28:31,360 --> 00:28:37,039
as discoverability

00:28:33,760 --> 00:28:39,760
routing maybe kind of persistence

00:28:37,039 --> 00:28:41,600
that allow both personas to to work

00:28:39,760 --> 00:28:44,720
together

00:28:41,600 --> 00:28:46,880
without disclosing the four

00:28:44,720 --> 00:28:48,399
details of platform reader that needs to

00:28:46,880 --> 00:28:50,640
evolve again

00:28:48,399 --> 00:28:52,080
if we expose pods and the internal

00:28:50,640 --> 00:28:54,240
details

00:28:52,080 --> 00:28:56,720
this will change in potentially in every

00:28:54,240 --> 00:28:59,840
release so

00:28:56,720 --> 00:29:02,720
we we will break uh people that

00:28:59,840 --> 00:29:03,279
that have access to those details that

00:29:02,720 --> 00:29:06,080
they

00:29:03,279 --> 00:29:06,080
will break their work

00:29:07,440 --> 00:29:10,799
i i think what you are saying is what we

00:29:09,679 --> 00:29:13,840
have defined here

00:29:10,799 --> 00:29:16,159
is rather like implementation apis

00:29:13,840 --> 00:29:18,000
and i think you're asking about like

00:29:16,159 --> 00:29:20,799
additional

00:29:18,000 --> 00:29:21,520
apis that allow you to access kind of

00:29:20,799 --> 00:29:24,840
underlying

00:29:21,520 --> 00:29:27,279
kubernetes implementation details so to

00:29:24,840 --> 00:29:29,120
speak um

00:29:27,279 --> 00:29:31,360
to to be able to to more directly

00:29:29,120 --> 00:29:34,159
interact with these

00:29:31,360 --> 00:29:37,039
that's a good good point i think um i'm

00:29:34,159 --> 00:29:38,720
not sure who was it but somebody

00:29:37,039 --> 00:29:40,080
kind of asked about like what is the

00:29:38,720 --> 00:29:42,000
cloud foundry api

00:29:40,080 --> 00:29:44,159
anyways right that was one of the

00:29:42,000 --> 00:29:46,559
comments that came in recently

00:29:44,159 --> 00:29:48,720
um and that was more referring to like

00:29:46,559 --> 00:29:49,919
the existing cloud foundry api but i

00:29:48,720 --> 00:29:52,640
think then

00:29:49,919 --> 00:29:54,559
on top of that if we say there is

00:29:52,640 --> 00:29:57,200
options for people using cloud foundry

00:29:54,559 --> 00:30:00,399
to see through some of the abstraction

00:29:57,200 --> 00:30:03,760
um yeah those those apis

00:30:00,399 --> 00:30:05,679
will also need to be defined

00:30:03,760 --> 00:30:07,679
yes for example the the apis we are

00:30:05,679 --> 00:30:09,440
talking about is

00:30:07,679 --> 00:30:11,279
the environment variables that

00:30:09,440 --> 00:30:14,799
applications are exposed to

00:30:11,279 --> 00:30:14,799
the dns discovery

00:30:15,120 --> 00:30:23,360
that allows to to use dns endpoint

00:30:19,120 --> 00:30:26,000
to discover and to root in the

00:30:23,360 --> 00:30:26,480
internal network control plane so that

00:30:26,000 --> 00:30:29,120
that's

00:30:26,480 --> 00:30:32,000
that's and uh yeah that's the two main

00:30:29,120 --> 00:30:34,080
apis and know about

00:30:32,000 --> 00:30:35,120
platform during time apis for

00:30:34,080 --> 00:30:37,120
applications

00:30:35,120 --> 00:30:39,679
and then obviously the buildbacks to

00:30:37,120 --> 00:30:43,120
some extent buildbacks have their own

00:30:39,679 --> 00:30:45,200
contract as well and yeah maybe the idea

00:30:43,120 --> 00:30:46,559
is to extend extend a bit this contract

00:30:45,200 --> 00:30:50,640
to

00:30:46,559 --> 00:30:52,720
to cover the part of kubernetes

00:30:50,640 --> 00:30:53,919
that needs to interact with in a stable

00:30:52,720 --> 00:30:57,600
way without

00:30:53,919 --> 00:30:57,600
without disclosing too much details

00:30:58,320 --> 00:31:06,720
yeah thanks makes sense

00:31:04,399 --> 00:31:06,720
okay

00:31:08,559 --> 00:31:12,559
so i think i think kiran from the irony

00:31:10,880 --> 00:31:15,519
team had asked about like

00:31:12,559 --> 00:31:17,600
is is the you know is that even

00:31:15,519 --> 00:31:18,240
developer api surface area documented

00:31:17,600 --> 00:31:21,039
anywhere

00:31:18,240 --> 00:31:22,880
and i think we've we've collectively

00:31:21,039 --> 00:31:26,080
realized over the many years that

00:31:22,880 --> 00:31:27,440
you know it isn't other than just being

00:31:26,080 --> 00:31:30,640
you know the behavior of the current

00:31:27,440 --> 00:31:30,640
system for the most part

00:31:30,840 --> 00:31:33,840
github.com

00:31:34,399 --> 00:31:37,919
well it is on docs.kratfundray.com the

00:31:36,880 --> 00:31:41,039
variables and

00:31:37,919 --> 00:31:42,960
our networking that they are documented

00:31:41,039 --> 00:31:44,840
i mean yeah there's documentation for

00:31:42,960 --> 00:31:48,320
say the cloud controller api

00:31:44,840 --> 00:31:50,640
um but i i think a lot of the

00:31:48,320 --> 00:31:52,480
intent um it's it's certainly not all

00:31:50,640 --> 00:31:55,760
consolidated in one place and

00:31:52,480 --> 00:31:59,279
some many of the behavioral nuances or

00:31:55,760 --> 00:32:01,360
um those uh interfaces inside of

00:31:59,279 --> 00:32:02,640
the uh the build or the runtime

00:32:01,360 --> 00:32:05,919
environment are not

00:32:02,640 --> 00:32:05,919
very explicitly documented

00:32:10,880 --> 00:32:14,080
there's certainly no place that's just a

00:32:12,159 --> 00:32:15,440
pure spec that says

00:32:14,080 --> 00:32:18,159
here's what here's what all the

00:32:15,440 --> 00:32:18,159
interfaces are

00:32:23,279 --> 00:32:29,279
you're talking about like diigo

00:32:26,320 --> 00:32:31,200
interfaces uh to extend the system or

00:32:29,279 --> 00:32:32,960
are you talking about um

00:32:31,200 --> 00:32:36,159
the endowment variables that are surface

00:32:32,960 --> 00:32:42,880
to applications at runtime

00:32:36,159 --> 00:32:45,840
um yeah the the latter the uh what um

00:32:42,880 --> 00:32:47,600
you know what what's the totality of the

00:32:45,840 --> 00:32:50,480
not just environment variable but

00:32:47,600 --> 00:32:50,880
um you know even file system interface

00:32:50,480 --> 00:32:52,720
yeah

00:32:50,880 --> 00:32:54,840
again you're igm some of that is is

00:32:52,720 --> 00:32:56,480
documented in terms of the environment

00:32:54,840 --> 00:32:59,279
variables

00:32:56,480 --> 00:32:59,760
also very subtle things like how does

00:32:59,279 --> 00:33:04,000
cell

00:32:59,760 --> 00:33:06,799
draining work if you update like uh

00:33:04,000 --> 00:33:08,080
cloud foundry itself like what happens

00:33:06,799 --> 00:33:10,880
first what happens next

00:33:08,080 --> 00:33:13,039
i mean also that is specified somewhere

00:33:10,880 --> 00:33:16,559
in the documentation but not

00:33:13,039 --> 00:33:19,600
like in a very testable way so to speak

00:33:16,559 --> 00:33:22,399
i'm not sure if there's any good

00:33:19,600 --> 00:33:23,279
yeah and i think there there isn't a

00:33:22,399 --> 00:33:26,720
necessarily

00:33:23,279 --> 00:33:27,279
a specification that says like well this

00:33:26,720 --> 00:33:28,720
is the

00:33:27,279 --> 00:33:30,640
behavior that we would want from the

00:33:28,720 --> 00:33:32,080
system regardless of of how it's

00:33:30,640 --> 00:33:34,960
implemented

00:33:32,080 --> 00:33:34,960
in terms of the

00:33:36,960 --> 00:33:40,799
life cycle expectations under normal

00:33:38,799 --> 00:33:43,840
operation for

00:33:40,799 --> 00:33:44,799
um uh for workloads when the system is

00:33:43,840 --> 00:33:46,480
being updated

00:33:44,799 --> 00:33:48,080
that may be specified somewhere else

00:33:46,480 --> 00:33:48,799
even in terms of describing the behavior

00:33:48,080 --> 00:33:50,000
but

00:33:48,799 --> 00:33:53,039
i don't think that you know there's

00:33:50,000 --> 00:33:55,200
certainly no like

00:33:53,039 --> 00:33:57,600
certification or compliance statement

00:33:55,200 --> 00:34:01,200
around saying your cf system

00:33:57,600 --> 00:34:06,240
should or must do x when

00:34:01,200 --> 00:34:09,360
it's updating worker nodes

00:34:06,240 --> 00:34:09,360
okay thanks

00:34:09,679 --> 00:34:16,079
then the next one is also on the

00:34:12,399 --> 00:34:16,079
kubernetes api

00:34:16,159 --> 00:34:20,079
i think that's asking the inverse

00:34:18,639 --> 00:34:23,040
question right like how do you

00:34:20,079 --> 00:34:24,000
prevent kubernetes from shining through

00:34:23,040 --> 00:34:27,359
for the people that

00:34:24,000 --> 00:34:27,359
don't want to see it right

00:34:30,000 --> 00:34:35,440
yes okay and and

00:34:33,040 --> 00:34:36,639
i think your your comment referred to

00:34:35,440 --> 00:34:39,119
the

00:34:36,639 --> 00:34:40,720
to the name space example where i made a

00:34:39,119 --> 00:34:44,960
remark that like

00:34:40,720 --> 00:34:47,760
at least this particular uh example of

00:34:44,960 --> 00:34:49,359
like hierarchical name spaces if they

00:34:47,760 --> 00:34:52,720
are

00:34:49,359 --> 00:34:53,839
becoming any reality in kubernetes this

00:34:52,720 --> 00:34:55,760
is more

00:34:53,839 --> 00:34:57,599
like an implementation detail it's not

00:34:55,760 --> 00:34:59,839
so much something that

00:34:57,599 --> 00:35:03,839
would be visible one to one to people

00:34:59,839 --> 00:35:03,839
using the system itself

00:35:07,280 --> 00:35:14,640
and then like the

00:35:11,200 --> 00:35:17,920
kind of duality of the

00:35:14,640 --> 00:35:20,800
role of developers using acf on

00:35:17,920 --> 00:35:23,920
kubernetes like the existing ones

00:35:20,800 --> 00:35:25,680
that are probably happy with

00:35:23,920 --> 00:35:27,280
what what exists today and don't want to

00:35:25,680 --> 00:35:28,000
have additional abstraction and then the

00:35:27,280 --> 00:35:30,320
people

00:35:28,000 --> 00:35:32,160
that i think also eric was referring to

00:35:30,320 --> 00:35:33,680
um looking at the topic from a

00:35:32,160 --> 00:35:35,680
kubernetes background and

00:35:33,680 --> 00:35:37,440
like wanting to have those those

00:35:35,680 --> 00:35:39,520
interactions between

00:35:37,440 --> 00:35:40,880
cloud foundry based workloads and and

00:35:39,520 --> 00:35:44,880
other workloads

00:35:40,880 --> 00:35:47,119
and how to kind of strike the balance to

00:35:44,880 --> 00:35:49,440
actually be attractive for both both

00:35:47,119 --> 00:35:49,440
groups

00:35:54,640 --> 00:36:02,079
okay or to

00:35:58,000 --> 00:36:04,720
your comment around 38 okay so i think

00:36:02,079 --> 00:36:07,839
we've covered this one then but by the

00:36:04,720 --> 00:36:10,880
way the the article that eric has

00:36:07,839 --> 00:36:13,599
pasted here in the comments is also

00:36:10,880 --> 00:36:14,160
very worthwhile reit i think as he

00:36:13,599 --> 00:36:17,520
points out

00:36:14,160 --> 00:36:20,480
i would recommend batting having to um

00:36:17,520 --> 00:36:21,920
uh well i think having to to bat through

00:36:20,480 --> 00:36:25,359
several layers of

00:36:21,920 --> 00:36:26,640
cookie information and popovers um is

00:36:25,359 --> 00:36:28,960
is probably worth it to get to the

00:36:26,640 --> 00:36:28,960
content

00:36:29,440 --> 00:36:40,880
as annoying and initially uh deterring

00:36:32,560 --> 00:36:44,079
it maybe

00:36:40,880 --> 00:36:47,200
okay then the next one is on the

00:36:44,079 --> 00:36:50,480
yeah copy v3 entities

00:36:47,200 --> 00:36:54,240
as crds um

00:36:50,480 --> 00:36:56,800
and i made a comment and um giuseppe is

00:36:54,240 --> 00:36:59,839
on the call as well that at least i i

00:36:56,800 --> 00:37:02,960
know that the irini team is working on

00:36:59,839 --> 00:37:04,480
like wrapping their entities into into

00:37:02,960 --> 00:37:06,160
cld so it's not

00:37:04,480 --> 00:37:08,560
like directly the cloud controller

00:37:06,160 --> 00:37:11,040
entities but

00:37:08,560 --> 00:37:14,560
kind of the thing that's gets generated

00:37:11,040 --> 00:37:14,560
from the cloud controller entities

00:37:15,520 --> 00:37:20,800
i'm sure is there like any findings from

00:37:19,599 --> 00:37:23,280
that effort or

00:37:20,800 --> 00:37:24,560
feedback that yeah i mean we we started

00:37:23,280 --> 00:37:25,520
pretty much trying to replicate the

00:37:24,560 --> 00:37:28,800
diego api

00:37:25,520 --> 00:37:31,920
as much as we could and then we

00:37:28,800 --> 00:37:33,599
kind of had to replace some of the

00:37:31,920 --> 00:37:35,119
features of that api to be a bit more

00:37:33,599 --> 00:37:36,800
clear and it is native for example

00:37:35,119 --> 00:37:39,599
getting rid of all the callback-based

00:37:36,800 --> 00:37:42,000
workflows replace them with

00:37:39,599 --> 00:37:43,680
uh things that look a lot more a little

00:37:42,000 --> 00:37:44,320
bit more like events or things that can

00:37:43,680 --> 00:37:47,680
be just

00:37:44,320 --> 00:37:49,440
you know watched in the spirit of like

00:37:47,680 --> 00:37:51,839
the way kubernetes things are done other

00:37:49,440 --> 00:37:51,839
than that

00:37:52,240 --> 00:37:59,920
that is pretty much it and this would be

00:37:56,480 --> 00:38:02,560
um the workloads orchestration api

00:37:59,920 --> 00:38:03,040
like in that list of apis that we would

00:38:02,560 --> 00:38:06,720
have to

00:38:03,040 --> 00:38:10,000
solidify like as like

00:38:06,720 --> 00:38:11,520
you know um interfaces

00:38:10,000 --> 00:38:13,200
that can be implemented by different

00:38:11,520 --> 00:38:15,359
backends i think the

00:38:13,200 --> 00:38:16,960
the arena one would be could be a

00:38:15,359 --> 00:38:19,839
starting point for

00:38:16,960 --> 00:38:21,359
for that api uh given this opportunity

00:38:19,839 --> 00:38:22,800
it's an opportunity given we are

00:38:21,359 --> 00:38:25,599
changing

00:38:22,800 --> 00:38:27,280
uh we are basically rewriting the

00:38:25,599 --> 00:38:28,720
reading api right we're porting it from

00:38:27,280 --> 00:38:31,440
rest to

00:38:28,720 --> 00:38:33,119
to lrps to sorry to crds it is an

00:38:31,440 --> 00:38:33,920
opportunity if there is any if we want

00:38:33,119 --> 00:38:36,960
to

00:38:33,920 --> 00:38:39,680
change stuff to to do it because

00:38:36,960 --> 00:38:40,480
it's while that api is still in beta is

00:38:39,680 --> 00:38:42,160
still

00:38:40,480 --> 00:38:44,160
completely experimental and hasn't been

00:38:42,160 --> 00:38:47,280
released uh

00:38:44,160 --> 00:38:48,880
so like uh we should try to work from

00:38:47,280 --> 00:38:52,000
from the two ends of

00:38:48,880 --> 00:38:53,599
of the interface to see which one like

00:38:52,000 --> 00:38:55,520
what what makes us happy as a good

00:38:53,599 --> 00:38:58,640
interface that we can then

00:38:55,520 --> 00:39:03,839
uh stabilize and it really could be an

00:38:58,640 --> 00:39:05,839
implementation of that

00:39:03,839 --> 00:39:08,240
and that would then mean that both the

00:39:05,839 --> 00:39:09,839
cloud controller would generate the crds

00:39:08,240 --> 00:39:12,960
that then irony

00:39:09,839 --> 00:39:15,520
defines and consumes as well as

00:39:12,960 --> 00:39:17,200
there could be others kind of generating

00:39:15,520 --> 00:39:19,359
the same

00:39:17,200 --> 00:39:21,040
custom resources via completely

00:39:19,359 --> 00:39:24,160
different means right

00:39:21,040 --> 00:39:26,480
eventually yeah the idea would be

00:39:24,160 --> 00:39:27,839
yeah yeah at that point erin that's

00:39:26,480 --> 00:39:29,440
already the case like they really have

00:39:27,839 --> 00:39:29,920
any has an api that can be consumed by

00:39:29,440 --> 00:39:33,119
any

00:39:29,920 --> 00:39:34,800
anyone although in in practice it's only

00:39:33,119 --> 00:39:37,680
cc consuming it

00:39:34,800 --> 00:39:38,560
but maybe it could be it could be a case

00:39:37,680 --> 00:39:40,640
of

00:39:38,560 --> 00:39:44,079
really not being the only thing that cc

00:39:40,640 --> 00:39:46,560
can consume if we decide that the api is

00:39:44,079 --> 00:39:47,680
stable and standard and we document it

00:39:46,560 --> 00:39:49,680
etc

00:39:47,680 --> 00:39:51,359
then there's an opportunity for other

00:39:49,680 --> 00:39:53,280
players to come in and say

00:39:51,359 --> 00:39:55,040
i we want i don't know to schedule

00:39:53,280 --> 00:39:56,880
workloads somewhere else or in

00:39:55,040 --> 00:39:59,119
a different way you can just implement

00:39:56,880 --> 00:40:02,480
the api whatever it is

00:39:59,119 --> 00:40:07,359
and same for all the other six five

00:40:02,480 --> 00:40:10,400
remaining things listed there

00:40:07,359 --> 00:40:14,079
and just maybe towards the suggestion

00:40:10,400 --> 00:40:17,760
i was making i understand that the irani

00:40:14,079 --> 00:40:17,760
api is more for

00:40:17,839 --> 00:40:23,359
contributors that would swap in

00:40:21,440 --> 00:40:25,119
potentially cloud controller they are

00:40:23,359 --> 00:40:27,839
not designed to be

00:40:25,119 --> 00:40:28,400
surfaced to close under operators of two

00:40:27,839 --> 00:40:31,680
platforms

00:40:28,400 --> 00:40:32,640
developers are definitely not supposed

00:40:31,680 --> 00:40:34,640
to be surfaced

00:40:32,640 --> 00:40:36,800
to users because it's it's quite low

00:40:34,640 --> 00:40:39,280
level right it's

00:40:36,800 --> 00:40:39,920
like just like the diego api i think at

00:40:39,280 --> 00:40:42,160
the moment

00:40:39,920 --> 00:40:44,720
if you really want you can try to hit

00:40:42,160 --> 00:40:48,319
lego directly but you have to

00:40:44,720 --> 00:40:50,400
uh pass in uh your requests would have

00:40:48,319 --> 00:40:52,640
would not it would not be very ergonomic

00:40:50,400 --> 00:40:54,000
right you would already need a built

00:40:52,640 --> 00:40:55,119
image and you wouldn't need to know a

00:40:54,000 --> 00:40:57,280
bunch of things

00:40:55,119 --> 00:40:58,800
you need to know how many processes you

00:40:57,280 --> 00:41:01,119
want and

00:40:58,800 --> 00:41:02,880
uh that's all work that the cc does for

00:41:01,119 --> 00:41:04,400
you when you make a cc request which is

00:41:02,880 --> 00:41:04,880
the request that is supposed to be made

00:41:04,400 --> 00:41:09,040
by a

00:41:04,880 --> 00:41:09,440
human so yeah definitely not designed

00:41:09,040 --> 00:41:12,160
for

00:41:09,440 --> 00:41:12,960
human consumption i'd say and and so

00:41:12,160 --> 00:41:16,079
maybe to

00:41:12,960 --> 00:41:18,319
um the challenge is that we do need

00:41:16,079 --> 00:41:22,079
all the features set that cc does and

00:41:18,319 --> 00:41:25,359
maintains well we do need to maintain

00:41:22,079 --> 00:41:29,200
the safe cli and the cloud foundry

00:41:25,359 --> 00:41:30,319
experience to because the population

00:41:29,200 --> 00:41:33,920
associated are

00:41:30,319 --> 00:41:36,640
happy with that at the same time we need

00:41:33,920 --> 00:41:38,400
kubernetes users to be using native

00:41:36,640 --> 00:41:41,760
custom resource

00:41:38,400 --> 00:41:44,319
with the same level of of abstraction

00:41:41,760 --> 00:41:46,240
yeah yeah yeah yeah so those would be

00:41:44,319 --> 00:41:50,319
crds defined by ecc

00:41:46,240 --> 00:41:53,040
or whatever component we decide

00:41:50,319 --> 00:41:54,640
should would replace is here so so cc

00:41:53,040 --> 00:41:57,200
has concepts like an app

00:41:54,640 --> 00:41:58,000
a manifest i don't know roots whatever

00:41:57,200 --> 00:42:00,960
like

00:41:58,000 --> 00:42:03,280
irini has cons concepts that are one

00:42:00,960 --> 00:42:06,960
layer below

00:42:03,280 --> 00:42:09,359
so yeah like

00:42:06,960 --> 00:42:10,079
translating the copy api to crds is i

00:42:09,359 --> 00:42:12,640
think is a

00:42:10,079 --> 00:42:13,760
separate effort from from the irini one

00:42:12,640 --> 00:42:16,640
although of course

00:42:13,760 --> 00:42:17,520
having a ring crds i think it's going to

00:42:16,640 --> 00:42:19,440
make things

00:42:17,520 --> 00:42:21,440
easier because given we are switching

00:42:19,440 --> 00:42:22,240
from an imperative to a declarative way

00:42:21,440 --> 00:42:24,160
of working

00:42:22,240 --> 00:42:26,240
having declarative end to end is much

00:42:24,160 --> 00:42:28,560
easier when you have to at some point

00:42:26,240 --> 00:42:29,520
turn imperative into the declarative or

00:42:28,560 --> 00:42:31,839
the other way around

00:42:29,520 --> 00:42:33,520
that's when like uh it becomes a little

00:42:31,839 --> 00:42:34,960
bit more annoying which is what irini

00:42:33,520 --> 00:42:37,119
has been doing

00:42:34,960 --> 00:42:38,960
so far like we translated these the

00:42:37,119 --> 00:42:41,119
cloud foundry imperative requests

00:42:38,960 --> 00:42:42,160
to declarative requests kubernetes and

00:42:41,119 --> 00:42:44,880
that's been a source of

00:42:42,160 --> 00:42:46,240
bit of a mismatch right so going

00:42:44,880 --> 00:42:47,119
declarative end to end i think is going

00:42:46,240 --> 00:42:49,760
to make things

00:42:47,119 --> 00:42:49,760
a lot easier

00:42:51,040 --> 00:42:56,839
and we see many community efforts

00:42:54,480 --> 00:42:58,800
that dynamically generate those customer

00:42:56,839 --> 00:43:01,520
resources so from the

00:42:58,800 --> 00:43:02,079
cross plane kubernetes community we see

00:43:01,520 --> 00:43:04,960
many

00:43:02,079 --> 00:43:06,960
cloud providers such as aws gcp azure

00:43:04,960 --> 00:43:07,359
that automatically generate the csds

00:43:06,960 --> 00:43:09,680
from

00:43:07,359 --> 00:43:10,960
their open apis for example they have

00:43:09,680 --> 00:43:14,400
open api for the

00:43:10,960 --> 00:43:17,839
rest api which cc doesn't have

00:43:14,400 --> 00:43:17,839
htc has its own format

00:43:18,640 --> 00:43:22,720
basically they take what exists and they

00:43:20,240 --> 00:43:25,280
wrap it as crds

00:43:22,720 --> 00:43:26,720
and so i was thinking is there a cheap

00:43:25,280 --> 00:43:30,319
way to do that for

00:43:26,720 --> 00:43:33,599
ccpi um maybe one avenue

00:43:30,319 --> 00:43:34,480
could be maybe as a poc maybe just to

00:43:33,599 --> 00:43:36,960
get um

00:43:34,480 --> 00:43:38,720
feedback from community uh the terraform

00:43:36,960 --> 00:43:40,960
provider for cloud foundry is just doing

00:43:38,720 --> 00:43:44,480
that it's wrapping cc api

00:43:40,960 --> 00:43:48,480
uh into a direct declarative way

00:43:44,480 --> 00:43:50,640
um if you recall there is uh

00:43:48,480 --> 00:43:52,560
if you know if you go to documentation

00:43:50,640 --> 00:43:57,440
you um you have documentation

00:43:52,560 --> 00:43:59,760
on top right and you can browse to it

00:43:57,440 --> 00:43:59,760
about

00:44:00,720 --> 00:44:05,119
yes on top right here you have the html

00:44:03,200 --> 00:44:09,440
but yes

00:44:05,119 --> 00:44:10,640
definition of the provider and then you

00:44:09,440 --> 00:44:13,200
basically you have cloud foundry

00:44:10,640 --> 00:44:16,079
application platform service instance

00:44:13,200 --> 00:44:17,440
uh service binding so that's for

00:44:16,079 --> 00:44:21,599
application developers

00:44:17,440 --> 00:44:25,920
and and we have arkspace buildbacks

00:44:21,599 --> 00:44:29,280
so the full um isolation segments

00:44:25,920 --> 00:44:32,319
private domains uh quotas and all that

00:44:29,280 --> 00:44:35,599
so all of this is already maintained

00:44:32,319 --> 00:44:37,599
by the community and there is a thought

00:44:35,599 --> 00:44:39,839
in the cross-plane community to take

00:44:37,599 --> 00:44:42,880
to take a terraform provider and to

00:44:39,839 --> 00:44:45,440
automatically generate a crd out of that

00:44:42,880 --> 00:44:47,440
um so maybe that could be that was the

00:44:45,440 --> 00:44:51,040
suggestion i was making could be a

00:44:47,440 --> 00:44:54,160
way to in a cheap way

00:44:51,040 --> 00:44:57,200
to generate crds that exactly match

00:44:54,160 --> 00:45:00,720
um cc api

00:44:57,200 --> 00:45:01,440
without much effort it still relies on

00:45:00,720 --> 00:45:03,599
the

00:45:01,440 --> 00:45:04,640
platform provider cloud foundry to be

00:45:03,599 --> 00:45:07,200
maintained

00:45:04,640 --> 00:45:08,319
and i think there is plenty for to

00:45:07,200 --> 00:45:12,000
migrate from v2

00:45:08,319 --> 00:45:14,880
to pv2 to capital 3. um

00:45:12,000 --> 00:45:16,640
but yeah just wanted to point out this

00:45:14,880 --> 00:45:19,680
alternative

00:45:16,640 --> 00:45:22,880
yeah i guess it's it's a bit of a

00:45:19,680 --> 00:45:24,480
dangerous game to play given

00:45:22,880 --> 00:45:26,720
uh i think it's the same for terraform

00:45:24,480 --> 00:45:30,319
like there is some state that

00:45:26,720 --> 00:45:33,920
terraform has or crds have right crds

00:45:30,319 --> 00:45:35,680
are saved into a cd right and then

00:45:33,920 --> 00:45:38,000
so you create a crd you create a

00:45:35,680 --> 00:45:39,680
resource which is stored into a cd and

00:45:38,000 --> 00:45:41,760
then there is a watcher that picks it up

00:45:39,680 --> 00:45:44,160
and then makes a rest request to copy

00:45:41,760 --> 00:45:46,160
which puts it in its own postgres

00:45:44,160 --> 00:45:47,599
so you have you constantly have two

00:45:46,160 --> 00:45:48,400
pieces of state that need to be

00:45:47,599 --> 00:45:52,319
constantly

00:45:48,400 --> 00:45:53,920
synchronized so it can work but

00:45:52,319 --> 00:45:56,160
uh there's always the risk that those

00:45:53,920 --> 00:45:59,839
two uh get out of sync

00:45:56,160 --> 00:46:01,359
versus deciding that the source of truth

00:45:59,839 --> 00:46:02,960
is the crds

00:46:01,359 --> 00:46:05,200
and then you can have a rest api in

00:46:02,960 --> 00:46:06,480
front of the crds to manipulate the cds

00:46:05,200 --> 00:46:08,079
because that's what kubernetes has as

00:46:06,480 --> 00:46:11,200
well right like

00:46:08,079 --> 00:46:13,040
i don't know if it can be called rest

00:46:11,200 --> 00:46:14,720
but effectively it's an http api

00:46:13,040 --> 00:46:17,280
the one you use to create the cds et

00:46:14,720 --> 00:46:20,480
cetera and watch them but

00:46:17,280 --> 00:46:23,119
i think the other way around given

00:46:20,480 --> 00:46:24,000
like if you keep the the old database

00:46:23,119 --> 00:46:26,400
then you have

00:46:24,000 --> 00:46:27,200
state in front of procedure calls in

00:46:26,400 --> 00:46:30,640
front of

00:46:27,200 --> 00:46:32,720
state while you can get rid of one of

00:46:30,640 --> 00:46:34,240
the two states if you use the crds as

00:46:32,720 --> 00:46:36,000
the source of truth

00:46:34,240 --> 00:46:37,839
of course it's a much more expensive

00:46:36,000 --> 00:46:41,119
change so i i see a point about

00:46:37,839 --> 00:46:42,319
this being very cheap versus like

00:46:41,119 --> 00:46:44,000
because getting rid of the whole

00:46:42,319 --> 00:46:44,640
database and cloud control et cetera

00:46:44,000 --> 00:46:47,680
would be

00:46:44,640 --> 00:46:50,880
quite expensive like yeah

00:46:47,680 --> 00:46:53,440
akin to our rewrite pretty much and just

00:46:50,880 --> 00:46:55,200
just to add on that like we um we do

00:46:53,440 --> 00:46:57,200
this in a couple places already where we

00:46:55,200 --> 00:46:59,760
have that two sources of state

00:46:57,200 --> 00:47:01,839
like one of them being routes where

00:46:59,760 --> 00:47:03,839
because we have it in the database and

00:47:01,839 --> 00:47:05,200
in kubernetes scd we have to have

00:47:03,839 --> 00:47:08,240
syncers on both sides

00:47:05,200 --> 00:47:10,640
that like ends up being pretty expensive

00:47:08,240 --> 00:47:12,800
and like kind of takes away from like

00:47:10,640 --> 00:47:14,079
the kubernetes native aspect since we

00:47:12,800 --> 00:47:16,160
have this thing

00:47:14,079 --> 00:47:17,520
like looking at ccdb and just clobbering

00:47:16,160 --> 00:47:19,359
everything in kubernetes

00:47:17,520 --> 00:47:25,839
whenever it sees a discrepancy it gets a

00:47:19,359 --> 00:47:25,839
little wonky there

00:47:26,800 --> 00:47:32,000
i understand and i wonder tim that's

00:47:30,000 --> 00:47:35,200
that's the case for the existing like

00:47:32,000 --> 00:47:38,160
um route support in um

00:47:35,200 --> 00:47:40,319
like cf for kate's today yeah yeah

00:47:38,160 --> 00:47:43,359
because um

00:47:40,319 --> 00:47:44,960
uh like we did like at the start a lot

00:47:43,359 --> 00:47:46,720
of these issues were like theoretical

00:47:44,960 --> 00:47:48,400
and then we did actually see um

00:47:46,720 --> 00:47:49,760
discrepancies where

00:47:48,400 --> 00:47:51,760
people would make imperative changes

00:47:49,760 --> 00:47:53,440
through the cf apis and

00:47:51,760 --> 00:47:55,520
they wouldn't be reflected in the route

00:47:53,440 --> 00:47:58,559
on kubernetes because of just like

00:47:55,520 --> 00:48:01,280
network hiccups or weird ordering things

00:47:58,559 --> 00:48:03,440
so we had to develop a a sinker on the

00:48:01,280 --> 00:48:06,480
cloud controller side to

00:48:03,440 --> 00:48:07,599
just on a loop like classic like diego

00:48:06,480 --> 00:48:09,920
style push data

00:48:07,599 --> 00:48:12,720
and clobber everything in kubernetes to

00:48:09,920 --> 00:48:12,720
reconcile that

00:48:16,960 --> 00:48:20,319
yeah that effectively becomes a

00:48:19,200 --> 00:48:24,400
controller right

00:48:20,319 --> 00:48:27,440
which is constantly checking if

00:48:24,400 --> 00:48:30,000
the reality matches at cd and the other

00:48:27,440 --> 00:48:30,000
way around

00:48:30,720 --> 00:48:34,640
yeah then you have two right you have

00:48:32,400 --> 00:48:36,880
one in the back one on the front it's a

00:48:34,640 --> 00:48:36,880
mess

00:48:38,720 --> 00:48:42,240
yeah and i imagine we'd have to do

00:48:41,200 --> 00:48:45,359
something like that for

00:48:42,240 --> 00:48:49,119
every resource so like for routes alone

00:48:45,359 --> 00:48:52,079
that ended up being pretty expensive but

00:48:49,119 --> 00:48:53,440
to do everything especially ones that um

00:48:52,079 --> 00:48:55,680
like routes were nice because they were

00:48:53,440 --> 00:48:58,880
isolated in a single table

00:48:55,680 --> 00:48:59,920
but for a lot of other api resources on

00:48:58,880 --> 00:49:02,000
cloud controller

00:48:59,920 --> 00:49:03,040
it's stuff that's split across tables in

00:49:02,000 --> 00:49:05,760
the database

00:49:03,040 --> 00:49:07,599
and then like syncing that gets i know

00:49:05,760 --> 00:49:08,079
this is implementation-y that gets even

00:49:07,599 --> 00:49:10,800
more

00:49:08,079 --> 00:49:10,800
difficult though

00:49:13,440 --> 00:49:17,920
yes and maybe it's interesting to raise

00:49:15,359 --> 00:49:20,400
the fact that

00:49:17,920 --> 00:49:22,400
cod controller maintains a kind of

00:49:20,400 --> 00:49:24,559
transactional consistency

00:49:22,400 --> 00:49:25,680
to the imperative request that it

00:49:24,559 --> 00:49:29,280
receives

00:49:25,680 --> 00:49:30,960
and splitting that into

00:49:29,280 --> 00:49:32,400
independent resources sometimes there is

00:49:30,960 --> 00:49:36,000
relationships

00:49:32,400 --> 00:49:38,800
between those resources

00:49:36,000 --> 00:49:40,319
and so getting that into a degradative

00:49:38,800 --> 00:49:43,359
way

00:49:40,319 --> 00:49:46,480
where there is um only

00:49:43,359 --> 00:49:47,440
the open api input validation which is

00:49:46,480 --> 00:49:50,319
possible

00:49:47,440 --> 00:49:50,880
but the more consistency check is always

00:49:50,319 --> 00:49:55,359
as

00:49:50,880 --> 00:49:57,680
asynchronous and i think it makes

00:49:55,359 --> 00:49:58,400
it makes it challenging to keep it

00:49:57,680 --> 00:50:01,680
simple

00:49:58,400 --> 00:50:03,200
uh i think then it needs to to be very

00:50:01,680 --> 00:50:08,079
fine grain

00:50:03,200 --> 00:50:10,559
for each resource to ensure um

00:50:08,079 --> 00:50:12,240
integrator and the integrity referential

00:50:10,559 --> 00:50:12,880
integrity review others and stuff like

00:50:12,240 --> 00:50:15,280
that

00:50:12,880 --> 00:50:17,760
which comes with the complexity that we

00:50:15,280 --> 00:50:20,730
see in kubernetes

00:50:17,760 --> 00:50:23,680
so maybe wrapping yeah getting

00:50:20,730 --> 00:50:28,559
[Music]

00:50:23,680 --> 00:50:31,760
a fully native cloud foundry native crds

00:50:28,559 --> 00:50:35,440
with etcd being the only source of truth

00:50:31,760 --> 00:50:37,359
and getting rid of cloud controller

00:50:35,440 --> 00:50:39,440
input validation logic

00:50:37,359 --> 00:50:43,440
would be a as well i think quite

00:50:39,440 --> 00:50:43,440
challenging in terms of user experience

00:50:49,760 --> 00:50:53,280
the referential integrity is actually a

00:50:51,680 --> 00:50:56,160
good point i'm not sure if

00:50:53,280 --> 00:50:58,240
let's say the cognitive community has

00:50:56,160 --> 00:50:59,920
developed strategies to to kind of

00:50:58,240 --> 00:51:03,200
achieve that or

00:50:59,920 --> 00:51:07,119
like it's just accepted that things

00:51:03,200 --> 00:51:09,839
are not like transactionally safe so to

00:51:07,119 --> 00:51:09,839
speak

00:51:10,960 --> 00:51:15,440
yeah in general i think it's just you

00:51:13,920 --> 00:51:17,440
design differently because it's not a

00:51:15,440 --> 00:51:19,680
relational data store so like you can't

00:51:17,440 --> 00:51:22,960
just have different resources

00:51:19,680 --> 00:51:26,160
with relationships that you know will be

00:51:22,960 --> 00:51:27,599
kept consistent just like you would in a

00:51:26,160 --> 00:51:29,839
on the other hand it's not as

00:51:27,599 --> 00:51:31,280
bi-dimensional it's not as restrictive

00:51:29,839 --> 00:51:32,880
in terms of what you can put in one

00:51:31,280 --> 00:51:35,920
table or in one

00:51:32,880 --> 00:51:37,760
type right so usually things that change

00:51:35,920 --> 00:51:39,359
together you put them in one resource

00:51:37,760 --> 00:51:40,880
definition

00:51:39,359 --> 00:51:43,040
uh hopefully you can do that like it's

00:51:40,880 --> 00:51:44,880
not always so easy

00:51:43,040 --> 00:51:46,400
and then there is this concept of a re

00:51:44,880 --> 00:51:49,119
of an ownership

00:51:46,400 --> 00:51:50,720
like a resource can own another thing so

00:51:49,119 --> 00:51:51,599
that they can be deleted together and

00:51:50,720 --> 00:51:53,520
stuff like that

00:51:51,599 --> 00:51:55,280
or they can be notified when things

00:51:53,520 --> 00:51:57,200
change but that's pretty much it so you

00:51:55,280 --> 00:51:58,160
have to think you're going from postgres

00:51:57,200 --> 00:52:00,160
to

00:51:58,160 --> 00:52:02,480
maybe i don't know or even more

00:52:00,160 --> 00:52:02,480
than that

00:52:02,960 --> 00:52:07,200
you design around the lack of guarantees

00:52:04,880 --> 00:52:08,800
i guess because you can do atomic

00:52:07,200 --> 00:52:12,079
changes there is a way to

00:52:08,800 --> 00:52:13,680
patch objects and so that you can you

00:52:12,079 --> 00:52:16,079
can make a request and you know that

00:52:13,680 --> 00:52:17,920
if the resource you're changing has

00:52:16,079 --> 00:52:20,720
changed while you were trying to change

00:52:17,920 --> 00:52:22,800
it then the request will fail

00:52:20,720 --> 00:52:24,079
so you do have some atomicity but like

00:52:22,800 --> 00:52:25,599
you don't have

00:52:24,079 --> 00:52:27,520
the tool set that you have on a

00:52:25,599 --> 00:52:30,240
relational database

00:52:27,520 --> 00:52:30,240
not even close

00:52:30,559 --> 00:52:33,920
yeah i i wonder if it's worthwhile

00:52:33,040 --> 00:52:36,960
identifying

00:52:33,920 --> 00:52:40,079
maybe what the um

00:52:36,960 --> 00:52:42,720
biggest sources of concern are there

00:52:40,079 --> 00:52:45,119
that might even be informative in terms

00:52:42,720 --> 00:52:45,119
of like

00:52:45,440 --> 00:52:48,480
the system design we would want around

00:52:47,040 --> 00:52:51,200
that or or

00:52:48,480 --> 00:52:52,960
running a smaller scope spike than you

00:52:51,200 --> 00:52:54,000
know trying to do that for all of cc i

00:52:52,960 --> 00:52:57,359
don't know if we'd

00:52:54,000 --> 00:53:00,400
if uh timber just a or

00:52:57,359 --> 00:53:01,839
anyone else um who's been digging into

00:53:00,400 --> 00:53:03,440
some of those details over the past year

00:53:01,839 --> 00:53:04,720
or so has anything off the top of their

00:53:03,440 --> 00:53:07,040
heads

00:53:04,720 --> 00:53:09,119
but if not that could be something to

00:53:07,040 --> 00:53:11,280
pursue outside of this

00:53:09,119 --> 00:53:13,760
yeah i mean the irini data model is very

00:53:11,280 --> 00:53:15,680
very very simple so we didn't really see

00:53:13,760 --> 00:53:17,119
the problem yeah like a cc has a big

00:53:15,680 --> 00:53:19,119
database i don't know

00:53:17,119 --> 00:53:21,359
it's probably where there's the problems

00:53:19,119 --> 00:53:24,640
with the rise

00:53:21,359 --> 00:53:25,440
yeah i um we we have a lot of like

00:53:24,640 --> 00:53:28,000
theoretical

00:53:25,440 --> 00:53:28,480
thoughts on it i i believe in our back

00:53:28,000 --> 00:53:31,200
club

00:53:28,480 --> 00:53:32,480
we have we have a spike to actually like

00:53:31,200 --> 00:53:34,160
try and implement something that looks

00:53:32,480 --> 00:53:35,920
like the v3 apps controller

00:53:34,160 --> 00:53:38,240
that that does involve some

00:53:35,920 --> 00:53:39,760
relationships across resources and see

00:53:38,240 --> 00:53:43,200
what that might look like but we haven't

00:53:39,760 --> 00:53:46,079
worked on it yet

00:53:43,200 --> 00:53:47,440
yeah it makes sense also it may be

00:53:46,079 --> 00:53:49,280
interesting to ask like

00:53:47,440 --> 00:53:50,800
you know would it be okay even to relax

00:53:49,280 --> 00:53:52,079
some of those that though that

00:53:50,800 --> 00:53:53,839
you know they could be dangling or

00:53:52,079 --> 00:53:55,359
eventually consistent and but what would

00:53:53,839 --> 00:53:58,559
we do about that

00:53:55,359 --> 00:53:59,839
maybe to um i think there's at this

00:53:58,559 --> 00:54:01,680
point a lot of precedent from the

00:53:59,839 --> 00:54:02,400
kubernetes community itself in terms of

00:54:01,680 --> 00:54:04,559
like

00:54:02,400 --> 00:54:05,520
you have all these resources that aren't

00:54:04,559 --> 00:54:08,960
um

00:54:05,520 --> 00:54:10,800
actually coherent uh what is what what

00:54:08,960 --> 00:54:13,599
does the system do or what end users do

00:54:10,800 --> 00:54:13,599
to reconcile that

00:54:20,240 --> 00:54:25,599
maybe looking at the time let's try and

00:54:23,200 --> 00:54:30,000
see if we can

00:54:25,599 --> 00:54:38,000
talk on the remaining two comments um

00:54:30,000 --> 00:54:42,480
you had one around what is it

00:54:38,000 --> 00:54:42,960
oh changing like via the cloud foundry

00:54:42,480 --> 00:54:44,559
api

00:54:42,960 --> 00:54:46,000
as well as the kubernetes api

00:54:44,559 --> 00:54:53,839
simultaneously

00:54:46,000 --> 00:54:53,839
was that like the main point here um

00:54:56,640 --> 00:55:00,400
yes i think it it's all it's uh it's

00:54:58,799 --> 00:55:04,000
kind of we already covered that

00:55:00,400 --> 00:55:04,480
um i think it's duplicate and the fact

00:55:04,000 --> 00:55:08,640
that

00:55:04,480 --> 00:55:10,640
if we give developers access to the

00:55:08,640 --> 00:55:13,280
inside the engine and they can make some

00:55:10,640 --> 00:55:15,920
mutations

00:55:13,280 --> 00:55:16,799
then the transformatory automation is

00:55:15,920 --> 00:55:22,000
broke

00:55:16,799 --> 00:55:25,040
so it's about giving stable apis

00:55:22,000 --> 00:55:35,839
without too much access that we cannot

00:55:25,040 --> 00:55:35,839
guarantee backward compatibility okay

00:55:39,359 --> 00:55:42,480
there was another comment by pierre

00:55:41,359 --> 00:55:46,240
talking about

00:55:42,480 --> 00:55:48,720
overlapped with things like k native

00:55:46,240 --> 00:55:49,359
i was kind of making making a comment

00:55:48,720 --> 00:55:52,720
around

00:55:49,359 --> 00:55:54,640
like k native might obviously be one

00:55:52,720 --> 00:55:57,280
kind of alternative implementation for

00:55:54,640 --> 00:56:00,000
workload orchestration right so

00:55:57,280 --> 00:56:02,160
that was essentially one thought why we

00:56:00,000 --> 00:56:05,440
said that workload orchestration

00:56:02,160 --> 00:56:06,240
light is an api that could be

00:56:05,440 --> 00:56:08,799
implemented

00:56:06,240 --> 00:56:10,880
differently um maybe not even

00:56:08,799 --> 00:56:13,680
necessarily in terms of

00:56:10,880 --> 00:56:15,599
the containerized workload but yeah i

00:56:13,680 --> 00:56:19,280
guess sk native is

00:56:15,599 --> 00:56:22,160
kind of very close to

00:56:19,280 --> 00:56:26,000
like being a good alternative

00:56:22,160 --> 00:56:26,000
implementation for this particular

00:56:26,799 --> 00:56:30,000
yeah i didn't quite understand pierre's

00:56:28,480 --> 00:56:31,200
comment about build packs because

00:56:30,000 --> 00:56:33,599
i mean at least in the current

00:56:31,200 --> 00:56:35,839
incarnation of of k native it's

00:56:33,599 --> 00:56:37,920
effectively absolved itself of any of

00:56:35,839 --> 00:56:39,599
that that's right yeah the domain piece

00:56:37,920 --> 00:56:41,520
is outright

00:56:39,599 --> 00:56:43,119
yeah it's just like you got an image

00:56:41,520 --> 00:56:47,760
somewhere congratulations

00:56:43,119 --> 00:56:47,760
we'll help you run it right

00:56:50,960 --> 00:56:58,240
okay and then we have comments from

00:56:54,480 --> 00:57:01,839
jizeka um i

00:56:58,240 --> 00:57:05,280
was yeah mostly about

00:57:01,839 --> 00:57:06,799
the scope of the workload orchestration

00:57:05,280 --> 00:57:11,200
api

00:57:06,799 --> 00:57:13,920
regarding multi-cluster so

00:57:11,200 --> 00:57:14,559
just thinking about how this would look

00:57:13,920 --> 00:57:19,119
like

00:57:14,559 --> 00:57:21,839
uh we've talked about um

00:57:19,119 --> 00:57:23,119
basically um leveraging isolation

00:57:21,839 --> 00:57:26,000
segments to

00:57:23,119 --> 00:57:28,240
to achieve multi-cluster and i think at

00:57:26,000 --> 00:57:30,000
the moment the diego api takes care of

00:57:28,240 --> 00:57:33,200
it so you just tell diego

00:57:30,000 --> 00:57:35,040
here's an lp put it in this segmentation

00:57:33,200 --> 00:57:37,040
this is the segmentation segment tag or

00:57:35,040 --> 00:57:40,160
something and diego takes care of

00:57:37,040 --> 00:57:42,240
keeping a distinction between segments

00:57:40,160 --> 00:57:44,160
so we could do that in arena but given

00:57:42,240 --> 00:57:47,280
the api is declarative

00:57:44,160 --> 00:57:51,680
and we still need i think we will still

00:57:47,280 --> 00:57:53,680
need resources for each process running

00:57:51,680 --> 00:57:56,400
then we would have to duplicate like

00:57:53,680 --> 00:57:59,599
every process would that would need

00:57:56,400 --> 00:58:00,079
uh a resource on the on the control

00:57:59,599 --> 00:58:02,640
plane

00:58:00,079 --> 00:58:03,920
and a resource on the actual affected uh

00:58:02,640 --> 00:58:06,720
on the actual like on this

00:58:03,920 --> 00:58:08,160
on the cluster that is that we want to

00:58:06,720 --> 00:58:11,680
deploy to

00:58:08,160 --> 00:58:14,559
uh and that felt a little bit too much

00:58:11,680 --> 00:58:16,640
compared to maybe teaching the cloud

00:58:14,559 --> 00:58:19,280
controller upstream

00:58:16,640 --> 00:58:21,040
to tell like okay which cluster should

00:58:19,280 --> 00:58:23,119
this does this belong to and just create

00:58:21,040 --> 00:58:26,960
a resource there

00:58:23,119 --> 00:58:28,160
which means yes the cloud controller

00:58:26,960 --> 00:58:29,839
stats

00:58:28,160 --> 00:58:31,599
needs to keep track of which cluster

00:58:29,839 --> 00:58:32,319
belongs to each isolation isolation

00:58:31,599 --> 00:58:35,280
segment

00:58:32,319 --> 00:58:36,559
instead of 100 delegating to diego but

00:58:35,280 --> 00:58:40,799
it saves us a little bit

00:58:36,559 --> 00:58:43,200
of this like a bit of i don't know

00:58:40,799 --> 00:58:43,920
boilerplate almost like extra stuff that

00:58:43,200 --> 00:58:47,040
just

00:58:43,920 --> 00:58:49,599
is just needed but not necessarily or

00:58:47,040 --> 00:58:51,359
alternate because alternatively

00:58:49,599 --> 00:58:53,520
we put ourselves in this situation i

00:58:51,359 --> 00:58:57,280
don't even know if it's

00:58:53,520 --> 00:58:59,119
doable but like we could also think of

00:58:57,280 --> 00:59:00,799
just creating resources only on the

00:58:59,119 --> 00:59:02,160
control plane

00:59:00,799 --> 00:59:05,040
and then you have a controller on the

00:59:02,160 --> 00:59:08,400
control plane that needs to watch

00:59:05,040 --> 00:59:09,200
both the resources on on on the same

00:59:08,400 --> 00:59:12,240
cluster

00:59:09,200 --> 00:59:13,599
but also it needs to watch this the

00:59:12,240 --> 00:59:15,760
deployment of stage 4 sets that it

00:59:13,599 --> 00:59:17,839
creates on the remote cluster

00:59:15,760 --> 00:59:19,280
and i don't know how that will work i'm

00:59:17,839 --> 00:59:21,040
pretty sure it can work

00:59:19,280 --> 00:59:22,640
but like it's two different clusters

00:59:21,040 --> 00:59:24,160
with two different authentications

00:59:22,640 --> 00:59:26,559
i've never seen a controller that is

00:59:24,160 --> 00:59:31,200
able to watch resources on two

00:59:26,559 --> 00:59:33,520
um on two clusters at the same time

00:59:31,200 --> 00:59:35,839
and also so i don't know if that is

00:59:33,520 --> 00:59:38,960
possible and also

00:59:35,839 --> 00:59:40,240
uh i don't know if you can do this with

00:59:38,960 --> 00:59:42,480
two separate controllers

00:59:40,240 --> 00:59:44,160
i think you need you maybe you can

00:59:42,480 --> 00:59:45,280
actually i don't know but like it would

00:59:44,160 --> 00:59:49,440
be a bit weird

00:59:45,280 --> 00:59:52,319
so that's why i think like if we could

00:59:49,440 --> 00:59:54,480
uh do this up up like up front it would

00:59:52,319 --> 00:59:58,000
make things a little bit simpler

00:59:54,480 --> 00:59:59,920
given how kubernetes works even even if

00:59:58,000 --> 01:00:01,280
it's a bit different than what diego

00:59:59,920 --> 01:00:04,960
does at the moment

01:00:01,280 --> 01:00:05,599
so i don't know maybe we can find a way

01:00:04,960 --> 01:00:10,559
i don't know

01:00:05,599 --> 01:00:10,559
yeah i think that's that's oh go ahead

01:00:11,200 --> 01:00:14,640
yeah actually i was about to to to say

01:00:14,240 --> 01:00:17,200
that

01:00:14,640 --> 01:00:18,319
like the the other implementation would

01:00:17,200 --> 01:00:21,760
have the

01:00:18,319 --> 01:00:23,599
the elegance of not requiring irene to

01:00:21,760 --> 01:00:24,240
be deployed in each and every workload

01:00:23,599 --> 01:00:26,000
cluster

01:00:24,240 --> 01:00:27,920
kind of being deployed centrally but

01:00:26,000 --> 01:00:29,760
obviously you're right like the

01:00:27,920 --> 01:00:31,280
implementation of that would be way more

01:00:29,760 --> 01:00:34,160
complex than

01:00:31,280 --> 01:00:36,160
just kind of having that run in one

01:00:34,160 --> 01:00:37,040
cluster watching one crd and kind of

01:00:36,160 --> 01:00:39,760
generating

01:00:37,040 --> 01:00:41,599
a bunch of others in in the same class

01:00:39,760 --> 01:00:42,559
yeah i think it's very it's kind of

01:00:41,599 --> 01:00:44,960
idiomatic

01:00:42,559 --> 01:00:46,319
for kubernetes controllers to just watch

01:00:44,960 --> 01:00:49,119
stuff in their own

01:00:46,319 --> 01:00:50,640
um in their own cluster and even in

01:00:49,119 --> 01:00:52,319
their own namespace like

01:00:50,640 --> 01:00:54,400
just by leveraging this convention for

01:00:52,319 --> 01:00:56,079
example irini

01:00:54,400 --> 01:00:58,480
doesn't need to care too much about name

01:00:56,079 --> 01:01:00,160
spaces etc you just deploy arena

01:00:58,480 --> 01:01:01,359
and it just watches you tell it which

01:01:00,160 --> 01:01:03,119
namespace to watch it just watches that

01:01:01,359 --> 01:01:05,040
namespace and that's it

01:01:03,119 --> 01:01:06,160
uh so yeah things will get a lot more

01:01:05,040 --> 01:01:07,839
complicated if

01:01:06,160 --> 01:01:09,520
we have all these layers of irq where

01:01:07,839 --> 01:01:11,280
you have multiple clusters with multiple

01:01:09,520 --> 01:01:14,319
namespaces

01:01:11,280 --> 01:01:14,319
and it kind of explodes

01:01:14,880 --> 01:01:20,640
yeah one thing i was just gone okay

01:01:18,160 --> 01:01:22,160
yeah oh well i was just thinking like

01:01:20,640 --> 01:01:23,760
this is maybe kind of interesting to

01:01:22,160 --> 01:01:25,760
intersect with our the discussion we

01:01:23,760 --> 01:01:29,200
just had about representing the

01:01:25,760 --> 01:01:31,200
higher level cf resources also as crds

01:01:29,200 --> 01:01:33,680
i mean would we still end up in a

01:01:31,200 --> 01:01:36,880
pattern where we need some sort of

01:01:33,680 --> 01:01:40,640
like we we've now entered um

01:01:36,880 --> 01:01:43,599
the uh kubernetes form

01:01:40,640 --> 01:01:45,200
land of resources and so the probably

01:01:43,599 --> 01:01:46,720
the path of least resistance in terms of

01:01:45,200 --> 01:01:48,319
implementation would be we have some

01:01:46,720 --> 01:01:51,280
sort of controller that

01:01:48,319 --> 01:01:52,559
understands what we think of as uh the

01:01:51,280 --> 01:01:54,799
cc entities today

01:01:52,559 --> 01:01:55,920
like you know apps or processes or

01:01:54,799 --> 01:01:59,440
whatever

01:01:55,920 --> 01:02:03,280
um with the uh associated set

01:01:59,440 --> 01:02:05,200
of um either context or

01:02:03,280 --> 01:02:06,720
explicit selectors on them that kind of

01:02:05,200 --> 01:02:08,240
give hints about where they should

01:02:06,720 --> 01:02:10,000
actually be realized you know if we're

01:02:08,240 --> 01:02:13,119
talking about a multi-cluster

01:02:10,000 --> 01:02:13,760
topology and then do we still have some

01:02:13,119 --> 01:02:15,520
sort of

01:02:13,760 --> 01:02:17,440
controller that is acting on those

01:02:15,520 --> 01:02:20,079
resources and

01:02:17,440 --> 01:02:20,960
maybe it's driving those irini or

01:02:20,079 --> 01:02:24,319
irony-like

01:02:20,960 --> 01:02:29,280
crds in you know either the same cluster

01:02:24,319 --> 01:02:29,280
or uh other clusters simultaneously

01:02:29,440 --> 01:02:33,520
yeah so yeah the problem i just

01:02:31,200 --> 01:02:35,680
described

01:02:33,520 --> 01:02:37,119
i mean i'm thinking of we're bypassing

01:02:35,680 --> 01:02:38,559
it because i'm looking at it

01:02:37,119 --> 01:02:41,119
just from the arena perspective but it

01:02:38,559 --> 01:02:44,079
would actually be bubbled up

01:02:41,119 --> 01:02:45,359
to whoever creates the arena resources

01:02:44,079 --> 01:02:47,520
at that point so like

01:02:45,359 --> 01:02:48,799
for example i push an app this results

01:02:47,520 --> 01:02:51,599
in one app

01:02:48,799 --> 01:02:52,480
resource which maybe is associated to n

01:02:51,599 --> 01:02:56,240
lrp

01:02:52,480 --> 01:02:58,480
resource resources but if you want these

01:02:56,240 --> 01:03:00,079
lrps to be on a specific cluster

01:02:58,480 --> 01:03:01,599
then you have to create these lrps on

01:03:00,079 --> 01:03:03,760
that cluster and then you need to from

01:03:01,599 --> 01:03:07,039
the control plane you need to watch them

01:03:03,760 --> 01:03:11,039
because again you you need this double

01:03:07,039 --> 01:03:13,200
uh like you need to watch in both

01:03:11,039 --> 01:03:15,039
directions like when the lrps change you

01:03:13,200 --> 01:03:17,039
need to reconcile them

01:03:15,039 --> 01:03:18,240
when the app changes you you also need

01:03:17,039 --> 01:03:22,240
to reconcile the

01:03:18,240 --> 01:03:26,160
associated lrp's uh so

01:03:22,240 --> 01:03:28,640
actually we probably can't get away from

01:03:26,160 --> 01:03:29,599
this and this is because see like

01:03:28,640 --> 01:03:32,559
humanities is

01:03:29,599 --> 01:03:35,039
and was never supposed to be used like

01:03:32,559 --> 01:03:37,119
this like with many clusters

01:03:35,039 --> 01:03:38,400
like at the same time right controllers

01:03:37,119 --> 01:03:40,720
are just designed the scope of our

01:03:38,400 --> 01:03:43,760
controller is always a cluster

01:03:40,720 --> 01:03:44,880
so maybe there's no running away from

01:03:43,760 --> 01:03:47,119
that

01:03:44,880 --> 01:03:48,240
right yeah we've seen some experiments

01:03:47,119 --> 01:03:51,119
of uh

01:03:48,240 --> 01:03:52,480
people basically replicating the

01:03:51,119 --> 01:03:54,640
controller runtime

01:03:52,480 --> 01:03:56,839
which is a framework that is used to

01:03:54,640 --> 01:03:59,839
create controllers

01:03:56,839 --> 01:04:01,039
um for multi cluster so just to kind of

01:03:59,839 --> 01:04:02,720
you use it like a normal controller

01:04:01,039 --> 01:04:04,240
runtime but it's multi-cluster

01:04:02,720 --> 01:04:06,079
i've seen like a little open source

01:04:04,240 --> 01:04:08,240
project built by someone

01:04:06,079 --> 01:04:09,920
it's kind of abandoned but it could be

01:04:08,240 --> 01:04:12,640
an interesting and interesting

01:04:09,920 --> 01:04:12,960
proof of concept because in the end all

01:04:12,640 --> 01:04:15,119
this

01:04:12,960 --> 01:04:16,079
watching is not magic it's just http

01:04:15,119 --> 01:04:18,880
calls

01:04:16,079 --> 01:04:19,920
that i've left open so that the server

01:04:18,880 --> 01:04:23,760
can send

01:04:19,920 --> 01:04:25,119
events back so it's not impossible

01:04:23,760 --> 01:04:26,640
technically

01:04:25,119 --> 01:04:28,640
like it might need that we need to

01:04:26,640 --> 01:04:31,359
rebuild some of those core components

01:04:28,640 --> 01:04:32,160
that people just tend to just reuse

01:04:31,359 --> 01:04:37,039
because they're

01:04:32,160 --> 01:04:37,039
it's a framework but

01:04:37,359 --> 01:04:41,440
it's definitely not impossible

01:04:39,200 --> 01:04:43,680
technically because http is http

01:04:41,440 --> 01:04:44,480
they should be able to work in cluster

01:04:43,680 --> 01:04:46,480
just like

01:04:44,480 --> 01:04:48,799
across clusters there's no reason they

01:04:46,480 --> 01:04:48,799
shouldn't

01:04:49,520 --> 01:04:53,280
interesting i think the one i have seen

01:04:52,000 --> 01:04:57,200
was not this but

01:04:53,280 --> 01:05:00,720
it could be another yeah

01:04:57,200 --> 01:05:04,000
so crossplane is defining crds uh

01:05:00,720 --> 01:05:05,920
with a kind of a composition mechanism

01:05:04,000 --> 01:05:07,599
and uh in this project they have an

01:05:05,920 --> 01:05:10,480
agent

01:05:07,599 --> 01:05:13,520
so that one command one client

01:05:10,480 --> 01:05:18,000
kubernetes clusters

01:05:13,520 --> 01:05:20,400
is is able to define

01:05:18,000 --> 01:05:22,480
custom resource locally that gets

01:05:20,400 --> 01:05:23,359
basically uh execute on the central

01:05:22,480 --> 01:05:24,720
cluster

01:05:23,359 --> 01:05:26,720
and the way it works is that they have

01:05:24,720 --> 01:05:30,000
an agent on the client

01:05:26,720 --> 01:05:33,520
um kubernetes clusters

01:05:30,000 --> 01:05:37,920
that calls home to the central cluster

01:05:33,520 --> 01:05:41,039
fetch all crds to execute them locally

01:05:37,920 --> 01:05:45,039
about to to get their definition

01:05:41,039 --> 01:05:48,839
and then when a user execute

01:05:45,039 --> 01:05:52,000
asks for resource on the client cluster

01:05:48,839 --> 01:05:54,079
um it creates a resource remotely in the

01:05:52,000 --> 01:05:55,359
central cluster and gets the response

01:05:54,079 --> 01:05:59,920
back

01:05:55,359 --> 01:06:03,520
so maybe a similar pattern

01:05:59,920 --> 01:06:08,400
could work in the sense that maybe

01:06:03,520 --> 01:06:08,400
irini could be defining

01:06:09,119 --> 01:06:13,039
resources that gets replicated on two

01:06:11,760 --> 01:06:18,960
different cluster kind of

01:06:13,039 --> 01:06:21,200
messaging if you wish

01:06:18,960 --> 01:06:22,400
there is a design dock on this page that

01:06:21,200 --> 01:06:24,470
details a little

01:06:22,400 --> 01:06:27,039
a little more uh how that gets um

01:06:24,470 --> 01:06:30,480
[Music]

01:06:27,039 --> 01:06:33,039
this one i am talking about it's a bit

01:06:30,480 --> 01:06:34,799
abandoned but it looks pretty much

01:06:33,039 --> 01:06:37,760
exactly like the runtime controller

01:06:34,799 --> 01:06:39,280
again it's doable it's just there's a

01:06:37,760 --> 01:06:40,400
risk we have to reinvent the wheel on

01:06:39,280 --> 01:06:44,799
things that are a bit tricky

01:06:40,400 --> 01:06:49,680
like caches like uh

01:06:44,799 --> 01:06:51,680
stuff like that but yeah

01:06:49,680 --> 01:06:53,119
doing this thing cc i think would still

01:06:51,680 --> 01:06:55,210
save us from one

01:06:53,119 --> 01:06:56,319
resource creation so

01:06:55,210 --> 01:06:59,599
[Music]

01:06:56,319 --> 01:07:02,079
per process so that's not bad

01:06:59,599 --> 01:07:02,720
so basically otherwise every pro every

01:07:02,079 --> 01:07:06,000
lrp

01:07:02,720 --> 01:07:06,319
on every cluster would have an it would

01:07:06,000 --> 01:07:09,280
have

01:07:06,319 --> 01:07:10,480
a correspondent lrp on the control plane

01:07:09,280 --> 01:07:11,760
cluster

01:07:10,480 --> 01:07:14,000
so there will be a bit of a profit

01:07:11,760 --> 01:07:15,440
proliferation but yeah the

01:07:14,000 --> 01:07:16,640
the multi-cluster probe the problem

01:07:15,440 --> 01:07:19,280
we're having control is across the

01:07:16,640 --> 01:07:20,960
boundaries of a cluster i think we can't

01:07:19,280 --> 01:07:22,799
we'll have to face only one way or the

01:07:20,960 --> 01:07:24,880
other

01:07:22,799 --> 01:07:26,400
i guess i have to cut the conversation a

01:07:24,880 --> 01:07:29,440
little bit short because we

01:07:26,400 --> 01:07:31,359
are already slightly over time um

01:07:29,440 --> 01:07:34,000
i would say thank you very much for for

01:07:31,359 --> 01:07:37,039
feedback and the discussion for now

01:07:34,000 --> 01:07:39,440
um we'll

01:07:37,039 --> 01:07:41,119
take another pass i guess on the

01:07:39,440 --> 01:07:44,000
comments that are in there

01:07:41,119 --> 01:07:44,720
and then take it from there yeah and i i

01:07:44,000 --> 01:07:46,880
think i would

01:07:44,720 --> 01:07:48,400
um i'd really encourage everyone to

01:07:46,880 --> 01:07:52,000
think about like you know we've

01:07:48,400 --> 01:07:55,200
kind of we've been identifying this um

01:07:52,000 --> 01:07:59,039
um perspective on what we think uh

01:07:55,200 --> 01:08:02,319
cfon keats uh can be realized as

01:07:59,039 --> 01:08:04,400
and so i'd really like people to

01:08:02,319 --> 01:08:05,760
provide input on you know where they

01:08:04,400 --> 01:08:07,760
think um

01:08:05,760 --> 01:08:09,280
you know whether that's a continuation

01:08:07,760 --> 01:08:10,079
of cfr gates or whether we need some

01:08:09,280 --> 01:08:13,039
more

01:08:10,079 --> 01:08:14,240
um dramatic changes there like where

01:08:13,039 --> 01:08:15,920
where you would actually

01:08:14,240 --> 01:08:17,440
see yourselves being able to put some of

01:08:15,920 --> 01:08:18,159
this into you so what blockers you would

01:08:17,440 --> 01:08:19,520
have

01:08:18,159 --> 01:08:21,359
in order to actually start using a

01:08:19,520 --> 01:08:22,640
system like this um you know because

01:08:21,359 --> 01:08:23,440
we've had that with cf for kids right

01:08:22,640 --> 01:08:25,759
now

01:08:23,440 --> 01:08:27,440
and um you know we've we have a few

01:08:25,759 --> 01:08:29,359
examples of people using it

01:08:27,440 --> 01:08:30,880
um but a lot of people have been holding

01:08:29,359 --> 01:08:32,480
back for various reasons and you know we

01:08:30,880 --> 01:08:32,960
want to get past some of those barriers

01:08:32,480 --> 01:08:35,120
and

01:08:32,960 --> 01:08:36,480
and get everyone aligned on on a common

01:08:35,120 --> 01:08:38,719
picture here so

01:08:36,480 --> 01:08:40,080
uh i think getting getting a clear

01:08:38,719 --> 01:08:43,040
picture of

01:08:40,080 --> 01:08:43,839
um some of those uh requirements and

01:08:43,040 --> 01:08:45,759
goals

01:08:43,839 --> 01:08:47,679
that we would all have in mind or things

01:08:45,759 --> 01:08:49,199
that we have feedback you know maybe

01:08:47,679 --> 01:08:50,880
from other people who aren't in these

01:08:49,199 --> 01:08:52,400
sessions but that we view as important

01:08:50,880 --> 01:08:54,000
stakeholders in the community

01:08:52,400 --> 01:08:55,839
um that'd be really beneficial as we

01:08:54,000 --> 01:08:57,120
start talking more about some of the

01:08:55,839 --> 01:09:00,719
details of how we're actually going to

01:08:57,120 --> 01:09:00,719
implement this and carry it forward

01:09:02,239 --> 01:09:07,839
okay thanks eric so then thank you very

01:09:05,520 --> 01:09:21,839
much everybody

01:09:07,839 --> 01:09:21,839
see you next time

01:09:43,359 --> 01:09:45,440

YouTube URL: https://www.youtube.com/watch?v=MnNntS4UEss


