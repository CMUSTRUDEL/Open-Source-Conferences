Title: Cloud Foundry for Kubernetes SIG [April 2021]
Publication date: 2021-04-22
Playlist: Cloud Foundry for Kubernetes Monthly SIG
Description: 
	
Captions: 
	00:01:32,479 --> 00:01:37,920
hi

00:01:34,079 --> 00:01:42,880
hello good morning my good afternoon

00:01:37,920 --> 00:01:42,880
thanks for joining hi

00:01:46,960 --> 00:01:49,439
hi tim

00:01:52,840 --> 00:01:55,840
hello

00:03:02,840 --> 00:03:05,840
hey

00:03:06,319 --> 00:03:09,599
hence hey eric

00:03:12,000 --> 00:03:33,040
hey hey

00:03:18,159 --> 00:03:36,239
hey john

00:03:33,040 --> 00:03:39,760
i guess we'll wait at least two three

00:03:36,239 --> 00:03:39,760
more minutes for people to join

00:03:39,920 --> 00:03:47,840
probably we'll have a larger round today

00:03:42,959 --> 00:03:47,840
i guess

00:04:12,840 --> 00:04:15,840
um

00:04:22,320 --> 00:04:29,840
people joining everybody

00:04:31,440 --> 00:04:43,840
i just mentioned we'll wait one or two

00:04:34,160 --> 00:04:43,840
more minutes

00:04:49,919 --> 00:04:53,840
dan jones sends his regards uh he can't

00:04:52,320 --> 00:04:56,320
make it as he's on transit

00:04:53,840 --> 00:04:57,360
but i see he just left a few comments

00:04:56,320 --> 00:05:00,400
and

00:04:57,360 --> 00:05:00,400
so much yeah

00:05:07,199 --> 00:05:10,080
jim thank you for your thoughtful

00:05:08,639 --> 00:05:11,440
comments on the doc i haven't had a

00:05:10,080 --> 00:05:12,639
chance to reply there but i

00:05:11,440 --> 00:05:14,639
think that gives us a lot of good

00:05:12,639 --> 00:05:25,840
discussion fodder for today

00:05:14,639 --> 00:05:25,840
great thank you

00:05:31,039 --> 00:05:39,840
so let's wait one more minute and then

00:05:33,120 --> 00:05:39,840
probably leave that started

00:06:04,840 --> 00:06:07,840
so

00:06:08,400 --> 00:06:12,000
okay why don't we get started so welcome

00:06:11,199 --> 00:06:15,520
everybody

00:06:12,000 --> 00:06:16,560
uh once again to this week's special

00:06:15,520 --> 00:06:19,600
interest call

00:06:16,560 --> 00:06:22,639
cloud foundry on kubernetes as

00:06:19,600 --> 00:06:26,240
announced and probably seen by

00:06:22,639 --> 00:06:29,440
all people dialing in on the

00:06:26,240 --> 00:06:32,960
topic for today would be to go over the

00:06:29,440 --> 00:06:35,759
vision for cf on kubernetes document

00:06:32,960 --> 00:06:39,520
and hopefully have an interesting

00:06:35,759 --> 00:06:39,520
discussion and conversation about it

00:06:41,600 --> 00:06:44,800
share my browser

00:06:45,440 --> 00:06:49,840
we can see it

00:06:50,800 --> 00:06:56,479
tell me if that worked i've already seen

00:06:54,479 --> 00:07:00,000
the document

00:06:56,479 --> 00:07:00,000
yeah i can see it okay

00:07:01,120 --> 00:07:07,360
so um i'm kind of

00:07:04,880 --> 00:07:08,880
assuming everybody has has gone through

00:07:07,360 --> 00:07:12,319
the document and

00:07:08,880 --> 00:07:16,400
i guess suggestion would be to kind of

00:07:12,319 --> 00:07:19,199
go over the areas where we have open

00:07:16,400 --> 00:07:21,120
comments and then kind of see see how

00:07:19,199 --> 00:07:22,240
much time remains and if there's like

00:07:21,120 --> 00:07:25,039
additional

00:07:22,240 --> 00:07:26,080
feedback questions um aspects that we

00:07:25,039 --> 00:07:30,080
actually should

00:07:26,080 --> 00:07:32,880
uh should incorporate that sound good

00:07:30,080 --> 00:07:32,880
for everybody

00:07:33,759 --> 00:07:40,880
if so let's see um

00:07:37,360 --> 00:07:43,039
yeah eric already mentioned it uh daniel

00:07:40,880 --> 00:07:44,080
can't make it today but started leaving

00:07:43,039 --> 00:07:46,000
documents right

00:07:44,080 --> 00:07:48,319
right before the meeting so let's let's

00:07:46,000 --> 00:07:52,400
see what what he had there

00:07:48,319 --> 00:07:54,479
um so he's commenting on

00:07:52,400 --> 00:07:56,639
the topic of convenient developer

00:07:54,479 --> 00:08:00,080
outcomes that cloud foundry

00:07:56,639 --> 00:08:04,080
today delivers by a bosch

00:08:00,080 --> 00:08:05,520
um he's basically saying does that mean

00:08:04,080 --> 00:08:09,199
that we

00:08:05,520 --> 00:08:12,390
try to d scope or could out of scope the

00:08:09,199 --> 00:08:15,280
bosch like operator experience

00:08:12,390 --> 00:08:18,000
[Music]

00:08:15,280 --> 00:08:19,680
um created its own operators after

00:08:18,000 --> 00:08:22,000
hitting the limitations of helm

00:08:19,680 --> 00:08:24,000
[Music]

00:08:22,000 --> 00:08:26,080
and he says this coping this would make

00:08:24,000 --> 00:08:28,160
things significantly simpler but at the

00:08:26,080 --> 00:08:30,560
cost of the reason why many folks like

00:08:28,160 --> 00:08:30,560
cf

00:08:31,039 --> 00:08:35,039
so so i guess if i recall the

00:08:33,039 --> 00:08:37,200
conversations that we had created in the

00:08:35,039 --> 00:08:39,839
document we basically said that

00:08:37,200 --> 00:08:41,200
kind of in order to bring over people

00:08:39,839 --> 00:08:44,240
from where they are today

00:08:41,200 --> 00:08:46,800
which is like on the one hand

00:08:44,240 --> 00:08:48,000
bosch managed cloud foundry and then on

00:08:46,800 --> 00:08:51,440
the other hand probably

00:08:48,000 --> 00:08:53,440
a kubernetes focused ecosystem

00:08:51,440 --> 00:08:55,920
if we talk about like the first group

00:08:53,440 --> 00:08:58,480
the people using cf today

00:08:55,920 --> 00:08:59,760
then one goal that we have is to kind of

00:08:58,480 --> 00:09:03,360
make that move

00:08:59,760 --> 00:09:05,760
um very smooth and i think

00:09:03,360 --> 00:09:07,279
you also kind of commented on the part

00:09:05,760 --> 00:09:11,040
of the documentary

00:09:07,279 --> 00:09:14,000
kind of um talk about talk about that

00:09:11,040 --> 00:09:15,200
on the other hand i believe we said we

00:09:14,000 --> 00:09:18,320
we don't

00:09:15,200 --> 00:09:21,360
like making that move

00:09:18,320 --> 00:09:22,240
as smooth or we we don't see making that

00:09:21,360 --> 00:09:25,440
move as

00:09:22,240 --> 00:09:26,320
smooth for the operator a kind of hard

00:09:25,440 --> 00:09:30,480
prerequisite

00:09:26,320 --> 00:09:33,519
so in other words we basically felt that

00:09:30,480 --> 00:09:34,720
probably also the fact that pretty much

00:09:33,519 --> 00:09:36,720
cloud foundry

00:09:34,720 --> 00:09:38,399
is kind of the only open source

00:09:36,720 --> 00:09:40,000
community using bosch

00:09:38,399 --> 00:09:42,560
also provided kind of a high entry

00:09:40,000 --> 00:09:44,720
barrier for people who

00:09:42,560 --> 00:09:46,399
kind of primarily wanted to see what

00:09:44,720 --> 00:09:48,240
cloud foundry is like but the first

00:09:46,399 --> 00:09:49,680
thing that they had to do is actually

00:09:48,240 --> 00:09:51,680
like

00:09:49,680 --> 00:09:54,640
look into boston and learn how bosch

00:09:51,680 --> 00:09:58,160
works in order to kind of set up systems

00:09:54,640 --> 00:10:00,640
so so i i guess what we what we said for

00:09:58,160 --> 00:10:03,120
moving cloud foundry on kubernetes is

00:10:00,640 --> 00:10:06,959
that we actually

00:10:03,120 --> 00:10:09,440
um wanted to more lean towards kind of

00:10:06,959 --> 00:10:11,279
doing things to kubernetes way

00:10:09,440 --> 00:10:14,079
kind of acknowledging that there is no

00:10:11,279 --> 00:10:15,440
real one kubernetes way of doing things

00:10:14,079 --> 00:10:17,440
probably

00:10:15,440 --> 00:10:19,279
except for cube cuddle apply a bunch of

00:10:17,440 --> 00:10:21,680
yaml files right so

00:10:19,279 --> 00:10:23,200
but yeah i think that that was the

00:10:21,680 --> 00:10:26,240
reason why we basically

00:10:23,200 --> 00:10:29,440
said kind of moving over

00:10:26,240 --> 00:10:33,600
existing developers using cloud foundry

00:10:29,440 --> 00:10:37,120
is like one of the key goals but kind of

00:10:33,600 --> 00:10:38,959
retaining the same operator experience

00:10:37,120 --> 00:10:39,760
than what people had with bosch probably

00:10:38,959 --> 00:10:43,279
isn't

00:10:39,760 --> 00:10:45,200
on i guess i think when

00:10:43,279 --> 00:10:46,320
one other thing that we were we were

00:10:45,200 --> 00:10:48,240
keeping in mind

00:10:46,320 --> 00:10:50,880
uh you know we were we're talking a lot

00:10:48,240 --> 00:10:54,160
later down in this document about

00:10:50,880 --> 00:10:55,200
um you know even with cf for kids we

00:10:54,160 --> 00:10:58,399
were making

00:10:55,200 --> 00:11:00,720
a lot of decisions about um the kind of

00:10:58,399 --> 00:11:03,360
subsystems to bundle into that

00:11:00,720 --> 00:11:05,120
um and uh you know as as we've been

00:11:03,360 --> 00:11:08,240
discussing like what what makes sense

00:11:05,120 --> 00:11:10,399
to set up cf on capes

00:11:08,240 --> 00:11:11,760
for continued success and evolution with

00:11:10,399 --> 00:11:14,000
the cloud native community and

00:11:11,760 --> 00:11:15,680
recognizing that a lot of those

00:11:14,000 --> 00:11:17,200
interfaces to the subsystems

00:11:15,680 --> 00:11:19,360
need to be more defined so that the

00:11:17,200 --> 00:11:22,640
subsystems underneath can change

00:11:19,360 --> 00:11:24,160
like we're um we we'd like the stall to

00:11:22,640 --> 00:11:25,839
be in a situation where from the

00:11:24,160 --> 00:11:28,240
operational perspective

00:11:25,839 --> 00:11:29,839
um that's maybe as aligned then with the

00:11:28,240 --> 00:11:31,680
kubernetes community

00:11:29,839 --> 00:11:33,200
as possible and has that low barrier to

00:11:31,680 --> 00:11:34,480
entry because it's going to have to

00:11:33,200 --> 00:11:36,640
interrupt interoperate

00:11:34,480 --> 00:11:37,680
with you know those other components

00:11:36,640 --> 00:11:41,120
that are coming together

00:11:37,680 --> 00:11:43,200
to provide a more cohesive system

00:11:41,120 --> 00:11:44,399
and so you know i think with with both

00:11:43,200 --> 00:11:47,680
quarks and then with

00:11:44,399 --> 00:11:48,079
uh the carvel mk14s tooling uh we've

00:11:47,680 --> 00:11:50,880
been

00:11:48,079 --> 00:11:52,000
trying to impose a bit more uniformity

00:11:50,880 --> 00:11:55,040
on

00:11:52,000 --> 00:11:57,839
um on that operator experience

00:11:55,040 --> 00:11:59,680
to get a complete system deployed and i

00:11:57,839 --> 00:12:02,639
think we're expecting to have to

00:11:59,680 --> 00:12:05,200
move back from that probably at the the

00:12:02,639 --> 00:12:09,200
detriment of that operator experience

00:12:05,200 --> 00:12:11,120
but in order to

00:12:09,200 --> 00:12:12,399
preserve more of that conformity to the

00:12:11,120 --> 00:12:15,040
kubernetes community

00:12:12,399 --> 00:12:16,000
and which hopefully leads to greater

00:12:15,040 --> 00:12:18,720
adoption

00:12:16,000 --> 00:12:20,000
and greater interoperation with other

00:12:18,720 --> 00:12:25,760
pieces of the system that would be

00:12:20,000 --> 00:12:27,760
deployed to kubernetes

00:12:25,760 --> 00:12:29,279
and you know to baron's point maybe that

00:12:27,760 --> 00:12:32,240
ends up meaning that the

00:12:29,279 --> 00:12:33,680
the um the core of that the pieces that

00:12:32,240 --> 00:12:34,720
are that we're still generating in the

00:12:33,680 --> 00:12:38,079
community

00:12:34,720 --> 00:12:39,040
um uh have to be something that's

00:12:38,079 --> 00:12:42,720
available to

00:12:39,040 --> 00:12:44,480
you know keep cuddle apply um or

00:12:42,720 --> 00:12:46,800
you know something pretty lightweight on

00:12:44,480 --> 00:12:48,720
top of that

00:12:46,800 --> 00:12:51,279
but then at the same time probably like

00:12:48,720 --> 00:12:52,560
don't give like all the configuration

00:12:51,279 --> 00:12:55,120
options that

00:12:52,560 --> 00:12:56,000
people otherwise would get from like a

00:12:55,120 --> 00:12:58,000
full-fledged

00:12:56,000 --> 00:12:59,920
bosch managed system like with all the

00:12:58,000 --> 00:13:01,920
properties like

00:12:59,920 --> 00:13:03,839
all the convenience also of like not

00:13:01,920 --> 00:13:05,600
having to maintain

00:13:03,839 --> 00:13:07,360
i don't know configuration values in

00:13:05,600 --> 00:13:10,560
different places and

00:13:07,360 --> 00:13:14,160
getting other values concatenated from

00:13:10,560 --> 00:13:16,320
whatever stuff um so so probably like

00:13:14,160 --> 00:13:17,519
there's a certain trade-off and i i i

00:13:16,320 --> 00:13:20,880
guess we felt

00:13:17,519 --> 00:13:23,040
like giving people in

00:13:20,880 --> 00:13:25,360
or with with the kubernetes background

00:13:23,040 --> 00:13:27,920
specifically kind of an easier

00:13:25,360 --> 00:13:30,240
way to try things out and see what cloud

00:13:27,920 --> 00:13:32,800
foundry is like

00:13:30,240 --> 00:13:34,079
probably is is like the better way of

00:13:32,800 --> 00:13:35,920
kind of

00:13:34,079 --> 00:13:39,839
seeing if you can attract more people

00:13:35,920 --> 00:13:39,839
from a non-cloud foundry community

00:13:40,480 --> 00:13:43,519
yeah i guess the the other thing that

00:13:41,839 --> 00:13:44,959
that i've um

00:13:43,519 --> 00:13:46,720
i think we talked about before and that

00:13:44,959 --> 00:13:50,079
we could keep in mind is that

00:13:46,720 --> 00:13:51,279
kind of the the less opinionated we keep

00:13:50,079 --> 00:13:55,440
the core assets

00:13:51,279 --> 00:13:58,079
the more room there is to um

00:13:55,440 --> 00:13:59,600
uh do more sophisticated orchestration

00:13:58,079 --> 00:14:01,680
of those as part of say a more complete

00:13:59,600 --> 00:14:03,760
distribution

00:14:01,680 --> 00:14:04,720
and so that that's also where i think

00:14:03,760 --> 00:14:08,000
we're

00:14:04,720 --> 00:14:09,120
uh we see some over opinionation from

00:14:08,000 --> 00:14:13,279
the past

00:14:09,120 --> 00:14:14,560
about um forcing everyone to use the

00:14:13,279 --> 00:14:19,120
carvel tool chain

00:14:14,560 --> 00:14:19,120
or um uh

00:14:19,600 --> 00:14:22,639
having to integrate deeply with the

00:14:20,880 --> 00:14:25,839
quarkx tool chain and kind of conform to

00:14:22,639 --> 00:14:25,839
that set of resources as well

00:14:26,880 --> 00:14:30,000
again you know this is also where you

00:14:28,320 --> 00:14:32,399
know this is just the the things that

00:14:30,000 --> 00:14:33,760
primarily baron and i um have been

00:14:32,399 --> 00:14:35,680
thinking about and recognizing

00:14:33,760 --> 00:14:39,040
and uh we we definitely want to hear the

00:14:35,680 --> 00:14:39,040
perspective from all of you as well

00:14:42,079 --> 00:14:44,399
including

00:14:51,920 --> 00:14:58,000
so any additional thoughts and feedback

00:14:54,240 --> 00:15:03,760
to to this point

00:14:58,000 --> 00:15:03,760
um maybe we can just answer that um

00:15:05,320 --> 00:15:09,920
[Music]

00:15:06,800 --> 00:15:13,680
maybe the daniel's comment was

00:15:09,920 --> 00:15:16,959
associated to the developer experience

00:15:13,680 --> 00:15:19,839
line and it's more operator experience

00:15:16,959 --> 00:15:20,480
maybe we can link to either the notes at

00:15:19,839 --> 00:15:24,880
the end

00:15:20,480 --> 00:15:24,880
with eric's feedback on cover

00:15:25,199 --> 00:15:29,920
and eric when you say that the operator

00:15:28,000 --> 00:15:32,800
experience would move back outside of

00:15:29,920 --> 00:15:35,600
caval would that be custom resources

00:15:32,800 --> 00:15:35,600
would that remain

00:15:39,040 --> 00:15:44,720
can you share a bit uh what directions

00:15:41,600 --> 00:15:46,959
the team is envisioning

00:15:44,720 --> 00:15:48,240
um so i i think that we don't have

00:15:46,959 --> 00:15:50,240
anything definitive

00:15:48,240 --> 00:15:51,440
uh other than maybe biasing towards the

00:15:50,240 --> 00:15:54,959
simplest

00:15:51,440 --> 00:15:56,160
um a collection of resources that would

00:15:54,959 --> 00:15:57,519
make sense

00:15:56,160 --> 00:15:59,680
you know some of that might even look

00:15:57,519 --> 00:16:03,279
like

00:15:59,680 --> 00:16:06,000
maybe the

00:16:03,279 --> 00:16:07,680
reference implementation or distribution

00:16:06,000 --> 00:16:09,839
of a complete system

00:16:07,680 --> 00:16:11,839
is is somewhat simpler than we have with

00:16:09,839 --> 00:16:13,920
cf for kids today

00:16:11,839 --> 00:16:16,079
um you know so right now for example

00:16:13,920 --> 00:16:18,000
that's bundling in istio which is

00:16:16,079 --> 00:16:19,519
itself enormously complicated and

00:16:18,000 --> 00:16:21,360
requires a lot of

00:16:19,519 --> 00:16:22,560
coordination and mechanics to upgrade

00:16:21,360 --> 00:16:26,079
correctly

00:16:22,560 --> 00:16:26,800
and uh you know we might say well maybe

00:16:26,079 --> 00:16:28,880
it makes sense

00:16:26,800 --> 00:16:30,000
not to try to tackle that level of

00:16:28,880 --> 00:16:32,480
complexity

00:16:30,000 --> 00:16:33,839
in the reference implementation and if

00:16:32,480 --> 00:16:37,040
we just need something that's

00:16:33,839 --> 00:16:38,800
um demonstrating ingress routing

00:16:37,040 --> 00:16:40,639
you know we could achieve that with one

00:16:38,800 --> 00:16:43,920
of the simpler ingress controllers

00:16:40,639 --> 00:16:46,320
like contour or nginx um

00:16:43,920 --> 00:16:48,880
and so that correspondingly would be a

00:16:46,320 --> 00:16:50,720
much less complicated system to deploy

00:16:48,880 --> 00:16:52,720
so it might not even need the power of

00:16:50,720 --> 00:16:54,000
things that we've had with carvel we

00:16:52,720 --> 00:16:55,120
might be able to get away with saying

00:16:54,000 --> 00:16:58,079
okay it's just

00:16:55,120 --> 00:16:59,839
you know this is just a bare kubernetes

00:16:58,079 --> 00:17:00,480
deployment or demon set for that part of

00:16:59,839 --> 00:17:03,680
the system

00:17:00,480 --> 00:17:04,959
and so just throw it out there if you

00:17:03,680 --> 00:17:07,760
need any more complicated

00:17:04,959 --> 00:17:09,919
like if you if you need drop in um

00:17:07,760 --> 00:17:11,760
default coordination of that resources

00:17:09,919 --> 00:17:13,439
actually cap deploy works pretty well it

00:17:11,760 --> 00:17:16,559
gives you a little bit more control than

00:17:13,439 --> 00:17:17,679
cubecut will apply um but

00:17:16,559 --> 00:17:20,480
it's not going gonna need anything more

00:17:17,679 --> 00:17:23,760
than that and then if um if there's

00:17:20,480 --> 00:17:26,400
uh you know a more

00:17:23,760 --> 00:17:27,600
uh complicated distribution that needs

00:17:26,400 --> 00:17:30,640
to incorporate

00:17:27,600 --> 00:17:32,799
um a more complicated system then it

00:17:30,640 --> 00:17:36,480
might have to in order to

00:17:32,799 --> 00:17:38,559
um uh retain the same

00:17:36,480 --> 00:17:40,400
power that we've had bosh might have to

00:17:38,559 --> 00:17:41,360
adopt a more complicated deployment tool

00:17:40,400 --> 00:17:42,960
chain

00:17:41,360 --> 00:17:44,480
on top of that but you know that would

00:17:42,960 --> 00:17:46,080
be

00:17:44,480 --> 00:17:49,200
the responsibility of the person

00:17:46,080 --> 00:17:52,320
building that distribution

00:17:49,200 --> 00:17:52,320
person or organization

00:17:52,480 --> 00:17:55,919
great okay thanks a lot

00:17:56,080 --> 00:18:01,600
hey then i guess

00:17:59,440 --> 00:18:04,160
let's move to the next one do you want

00:18:01,600 --> 00:18:07,280
to talk about that

00:18:04,160 --> 00:18:10,720
uh yes i was just suggesting awarding uh

00:18:07,280 --> 00:18:13,200
refinement to um the migration

00:18:10,720 --> 00:18:14,400
to me the migrate the migration of

00:18:13,200 --> 00:18:17,919
existing workload

00:18:14,400 --> 00:18:18,799
on the cloud foundry and vms aims to be

00:18:17,919 --> 00:18:20,799
transparent

00:18:18,799 --> 00:18:22,000
for application developers when their

00:18:20,799 --> 00:18:24,799
environment gets

00:18:22,000 --> 00:18:26,960
migrated over to kubernetes they should

00:18:24,799 --> 00:18:29,039
not have to make a new push

00:18:26,960 --> 00:18:30,880
to the application and to import the

00:18:29,039 --> 00:18:33,440
marketplace services

00:18:30,880 --> 00:18:36,000
so i was just suggesting to reward this

00:18:33,440 --> 00:18:39,039
in terms of goal

00:18:36,000 --> 00:18:43,200
so that the promise of a managed service

00:18:39,039 --> 00:18:45,679
gets gets delivered

00:18:43,200 --> 00:18:46,559
so so how would you imagine that that

00:18:45,679 --> 00:18:48,960
like

00:18:46,559 --> 00:18:51,760
migration to to them work if you say

00:18:48,960 --> 00:18:54,080
like it doesn't require a new push

00:18:51,760 --> 00:18:55,280
that sounds like kind of in place

00:18:54,080 --> 00:18:58,480
migration

00:18:55,280 --> 00:19:00,320
is that what you envision uh yes similar

00:18:58,480 --> 00:19:01,840
to testimonies from the

00:19:00,320 --> 00:19:04,160
cloud foundry community for example

00:19:01,840 --> 00:19:07,200
swisscom are shared

00:19:04,160 --> 00:19:08,320
and i think there has been occasions i

00:19:07,200 --> 00:19:12,240
think from

00:19:08,320 --> 00:19:12,960
pws as well when there is infrastructure

00:19:12,240 --> 00:19:16,160
change

00:19:12,960 --> 00:19:19,440
um from going from from example from

00:19:16,160 --> 00:19:20,559
openstack to vsphere or maybe pws going

00:19:19,440 --> 00:19:24,000
from

00:19:20,559 --> 00:19:29,520
aws to gcp maybe if i get it right

00:19:24,000 --> 00:19:29,520
i'm not sure and then uh never moved off

00:19:30,000 --> 00:19:34,320
okay so maybe wrong example uh i think

00:19:32,880 --> 00:19:36,480
there are some more examples of

00:19:34,320 --> 00:19:38,480
infrastructure change into which the

00:19:36,480 --> 00:19:40,880
application developers

00:19:38,480 --> 00:19:42,320
collaboration were very limited they

00:19:40,880 --> 00:19:43,600
were just noticed there might be a

00:19:42,320 --> 00:19:46,640
downtime

00:19:43,600 --> 00:19:47,840
or just your application the control the

00:19:46,640 --> 00:19:50,960
cloud foundry api

00:19:47,840 --> 00:19:51,760
might go read only for half a day so you

00:19:50,960 --> 00:19:55,520
won't be able

00:19:51,760 --> 00:19:57,919
to do pushes by during half a day

00:19:55,520 --> 00:20:00,480
but after this maintenance period um

00:19:57,919 --> 00:20:02,640
your workload would be migrated

00:20:00,480 --> 00:20:05,600
and uh and you don't have any actions to

00:20:02,640 --> 00:20:10,320
take so to me that would be the goal

00:20:05,600 --> 00:20:13,280
of one promise to

00:20:10,320 --> 00:20:13,840
to preserve and to deliver to existing

00:20:13,280 --> 00:20:17,679
users

00:20:13,840 --> 00:20:17,679
is that they don't need to do new

00:20:18,840 --> 00:20:23,200
approaches

00:20:20,000 --> 00:20:25,600
yeah i'm i i definitely hear

00:20:23,200 --> 00:20:26,559
the the value that we've had in that

00:20:25,600 --> 00:20:30,240
statement

00:20:26,559 --> 00:20:31,840
for preserving the continuity of uh of

00:20:30,240 --> 00:20:33,679
existing cf environments

00:20:31,840 --> 00:20:35,679
and you know i we have definitely been

00:20:33,679 --> 00:20:37,039
able to do that in the past in a lot of

00:20:35,679 --> 00:20:39,280
cases

00:20:37,039 --> 00:20:40,080
my concern is that it's it is a very

00:20:39,280 --> 00:20:44,000
high bar

00:20:40,080 --> 00:20:45,840
especially given the complexity of the

00:20:44,000 --> 00:20:48,720
change in infrastructure that we're

00:20:45,840 --> 00:20:52,400
discussing here and

00:20:48,720 --> 00:20:54,880
so i i wouldn't um i feel like

00:20:52,400 --> 00:20:56,559
we we've got an opportunity but we don't

00:20:54,880 --> 00:21:00,000
have an unlimited amount of time

00:20:56,559 --> 00:21:03,520
to keep um keep moving this forward

00:21:00,000 --> 00:21:07,360
and so i wouldn't want um

00:21:03,520 --> 00:21:09,600
us to be losing a good outcome

00:21:07,360 --> 00:21:11,120
that maybe requires a little bit more

00:21:09,600 --> 00:21:12,559
manual intervention even from

00:21:11,120 --> 00:21:15,600
development teams

00:21:12,559 --> 00:21:17,600
at the expense or like uh in order to

00:21:15,600 --> 00:21:20,880
try to aim for that perfect outcome

00:21:17,600 --> 00:21:23,440
of total transparency so i and

00:21:20,880 --> 00:21:25,039
i i do think that um there's a certain

00:21:23,440 --> 00:21:27,919
amount of incrementality

00:21:25,039 --> 00:21:28,840
that that we could aim for here as well

00:21:27,919 --> 00:21:31,600
um

00:21:28,840 --> 00:21:33,039
where you know maybe early on as we've

00:21:31,600 --> 00:21:36,480
even had today like there's

00:21:33,039 --> 00:21:39,679
you know right now there's not uh a

00:21:36,480 --> 00:21:41,039
uh seamless transition from say fcf

00:21:39,679 --> 00:21:44,000
deployment environment

00:21:41,039 --> 00:21:45,280
to cf for kids um where you at least

00:21:44,000 --> 00:21:46,720
would need to re-push the app to a

00:21:45,280 --> 00:21:48,159
different environment but

00:21:46,720 --> 00:21:49,919
you know in a lot of cases it would it

00:21:48,159 --> 00:21:52,960
would remain compatible

00:21:49,919 --> 00:21:53,520
um i would expect that in a lot of cases

00:21:52,960 --> 00:21:56,320
that's

00:21:53,520 --> 00:21:56,960
that's going to be good enough um as

00:21:56,320 --> 00:22:00,559
long as

00:21:56,960 --> 00:22:03,600
there's you know um as long as

00:22:00,559 --> 00:22:04,240
the operator of the target cf on gates

00:22:03,600 --> 00:22:07,280
environment

00:22:04,240 --> 00:22:10,880
can make enough assurances about the

00:22:07,280 --> 00:22:13,120
suitability of

00:22:10,880 --> 00:22:14,880
the app to run in that new environment

00:22:13,120 --> 00:22:18,000
um

00:22:14,880 --> 00:22:20,320
so uh i think maybe it's worth

00:22:18,000 --> 00:22:22,320
discussing that like mentioning that

00:22:20,320 --> 00:22:24,159
sequence of outcomes or that progression

00:22:22,320 --> 00:22:28,159
towards an ideal state

00:22:24,159 --> 00:22:30,720
um but i i i don't want us to

00:22:28,159 --> 00:22:31,760
you know get into a mindset where like

00:22:30,720 --> 00:22:34,640
okay we're focused

00:22:31,760 --> 00:22:37,360
only on this you know totally

00:22:34,640 --> 00:22:40,000
transparent migration for app developers

00:22:37,360 --> 00:22:41,760
and you know maybe it's going to take us

00:22:40,000 --> 00:22:42,320
two years to do that but we don't really

00:22:41,760 --> 00:22:45,679
have

00:22:42,320 --> 00:22:46,880
like there's there aren't useful states

00:22:45,679 --> 00:22:49,120
in the middle

00:22:46,880 --> 00:22:50,880
that could still you know get us 80 or

00:22:49,120 --> 00:22:52,080
90 of the way there

00:22:50,880 --> 00:22:54,559
in terms of convenience of the

00:22:52,080 --> 00:22:56,159
transition and you know if instead we

00:22:54,559 --> 00:22:58,000
say like let's more deliberately move

00:22:56,159 --> 00:22:58,640
through those stages maybe that pushes

00:22:58,000 --> 00:23:01,039
out that

00:22:58,640 --> 00:23:02,880
like totally transparent migration by i

00:23:01,039 --> 00:23:04,799
don't know six months or something

00:23:02,880 --> 00:23:06,240
but we might discover that it's actually

00:23:04,799 --> 00:23:09,840
good enough and we've got a really good

00:23:06,240 --> 00:23:11,600
outcome in the year

00:23:09,840 --> 00:23:13,200
and if i recall the migration that we

00:23:11,600 --> 00:23:15,440
experienced at the range

00:23:13,200 --> 00:23:17,280
for a period of time we asked our

00:23:15,440 --> 00:23:19,600
developers please push

00:23:17,280 --> 00:23:20,720
new apps on the new infrastructure and

00:23:19,600 --> 00:23:23,440
please

00:23:20,720 --> 00:23:23,760
tell us uh if you see regressions so

00:23:23,440 --> 00:23:25,440
this

00:23:23,760 --> 00:23:27,440
this part of time whether it's actually

00:23:25,440 --> 00:23:29,200
not a migration is still useful so yeah

00:23:27,440 --> 00:23:32,240
i do share your point

00:23:29,200 --> 00:23:34,320
um and maybe um uh is it worth

00:23:32,240 --> 00:23:36,720
uh that would be useful for me to to

00:23:34,320 --> 00:23:39,440
share what are the

00:23:36,720 --> 00:23:40,720
um the remaining work to be able to

00:23:39,440 --> 00:23:44,480
import an existing

00:23:40,720 --> 00:23:47,679
cloud controller database into um

00:23:44,480 --> 00:23:49,440
into cfr kits and what would be

00:23:47,679 --> 00:23:51,840
remaining work preventing from doing

00:23:49,440 --> 00:23:55,520
this um this transparent migration

00:23:51,840 --> 00:23:56,880
so that the new newbie like me can

00:23:55,520 --> 00:23:58,559
understand

00:23:56,880 --> 00:24:01,679
why it's so much effort or what's

00:23:58,559 --> 00:24:01,679
remaining left

00:24:03,360 --> 00:24:07,840
yeah yeah definitely that that sounds

00:24:04,720 --> 00:24:11,039
really valuable oh go ahead

00:24:07,840 --> 00:24:14,960
i i i guess like

00:24:11,039 --> 00:24:17,919
one thing is and probably like we at sap

00:24:14,960 --> 00:24:18,400
are a bit special because like it was

00:24:17,919 --> 00:24:19,919
kind of

00:24:18,400 --> 00:24:22,000
clear pretty early on that we wouldn't

00:24:19,919 --> 00:24:23,679
be able to just take one cloud foundry

00:24:22,000 --> 00:24:26,559
system that we run today

00:24:23,679 --> 00:24:29,120
like massive massive multi-tenant system

00:24:26,559 --> 00:24:31,520
and kind of transfer that into one

00:24:29,120 --> 00:24:33,039
cloud foundry running on one kubernetes

00:24:31,520 --> 00:24:36,000
cluster so i guess we've

00:24:33,039 --> 00:24:36,320
kind of leaned more towards this there

00:24:36,000 --> 00:24:38,640
is

00:24:36,320 --> 00:24:40,559
specific teams working with that system

00:24:38,640 --> 00:24:42,480
that kind of decide on their own pace

00:24:40,559 --> 00:24:43,360
how to move and we don't move them all

00:24:42,480 --> 00:24:46,480
into

00:24:43,360 --> 00:24:46,880
like the same targets kubernetes cluster

00:24:46,480 --> 00:24:48,880
but

00:24:46,880 --> 00:24:50,559
like everybody gets gets an own cluster

00:24:48,880 --> 00:24:53,279
so i think that's

00:24:50,559 --> 00:24:56,000
i'm not sure how how special or how

00:24:53,279 --> 00:24:58,720
common that that scenario actually is

00:24:56,000 --> 00:25:00,880
um the other thing though that i've been

00:24:58,720 --> 00:25:03,840
kind of bringing up um also

00:25:00,880 --> 00:25:05,600
um seeing uh georgie and daniel here in

00:25:03,840 --> 00:25:08,480
in the call is like

00:25:05,600 --> 00:25:08,880
can there be intermediate states even in

00:25:08,480 --> 00:25:11,279
like

00:25:08,880 --> 00:25:13,440
today's bosch managed world right like

00:25:11,279 --> 00:25:16,240
can there be

00:25:13,440 --> 00:25:17,919
an irene back and similar to how we

00:25:16,240 --> 00:25:20,880
switch from dea

00:25:17,919 --> 00:25:22,400
going to to diego right like do you need

00:25:20,880 --> 00:25:24,799
to go the full mile of

00:25:22,400 --> 00:25:27,600
also taking the cloud foundry control

00:25:24,799 --> 00:25:29,520
plane and putting that on kubernetes or

00:25:27,600 --> 00:25:30,960
do we have a subset of people that

00:25:29,520 --> 00:25:34,080
already find value

00:25:30,960 --> 00:25:34,960
in just getting the app that eventually

00:25:34,080 --> 00:25:36,960
like is

00:25:34,960 --> 00:25:40,000
pushed towards the cloud foundry control

00:25:36,960 --> 00:25:43,039
plane ending up on a kubernetes cluster

00:25:40,000 --> 00:25:45,440
um i guess as as

00:25:43,039 --> 00:25:47,440
often times like in in reality it's more

00:25:45,440 --> 00:25:49,760
complicated than just saying let's

00:25:47,440 --> 00:25:51,039
do the same thing again but that was

00:25:49,760 --> 00:25:53,679
like at least one

00:25:51,039 --> 00:25:54,240
one thought and then i think the other

00:25:53,679 --> 00:25:56,480
um

00:25:54,240 --> 00:25:57,360
discussion that we had kind of looking

00:25:56,480 --> 00:26:00,080
at

00:25:57,360 --> 00:26:02,159
kind of what would it take to take an

00:26:00,080 --> 00:26:06,080
existing workload and move that over

00:26:02,159 --> 00:26:08,480
to cf for hates in particular was that

00:26:06,080 --> 00:26:09,200
like the jump from today's build packs

00:26:08,480 --> 00:26:12,320
to

00:26:09,200 --> 00:26:14,559
the cloud native build pics is like um

00:26:12,320 --> 00:26:16,480
more disruptive than one would hope so

00:26:14,559 --> 00:26:18,080
there was also always this conversation

00:26:16,480 --> 00:26:20,880
around like

00:26:18,080 --> 00:26:23,120
can we retain the existing build pack in

00:26:20,880 --> 00:26:25,039
the cf for kate's world or can we bring

00:26:23,120 --> 00:26:26,799
the cloud native build packs to the

00:26:25,039 --> 00:26:30,000
bosch managed cf world

00:26:26,799 --> 00:26:32,960
so that people could like over time

00:26:30,000 --> 00:26:34,159
adapt their workloads to then kind of

00:26:32,960 --> 00:26:36,720
have an easier move

00:26:34,159 --> 00:26:38,880
in in the actual migration from like

00:26:36,720 --> 00:26:40,960
bosch managed uh

00:26:38,880 --> 00:26:42,559
um cloud foundry to kubernetes

00:26:40,960 --> 00:26:45,360
management so not to

00:26:42,559 --> 00:26:46,159
like have have to having to do all those

00:26:45,360 --> 00:26:50,240
steps

00:26:46,159 --> 00:26:50,240
like at the very point of migration

00:26:50,840 --> 00:26:55,360
ultimately

00:26:52,880 --> 00:26:55,919
and i wonder whether isolation segment

00:26:55,360 --> 00:26:58,880
um

00:26:55,919 --> 00:27:01,279
could be a way to um uh to sequence

00:26:58,880 --> 00:27:03,840
migration of a multitenant cluster

00:27:01,279 --> 00:27:05,600
yeah that was my my proposal as well

00:27:03,840 --> 00:27:07,360
right so because isolation segments

00:27:05,600 --> 00:27:08,400
provide you that means of basically

00:27:07,360 --> 00:27:10,960
saying

00:27:08,400 --> 00:27:12,080
a like i have a separate compartment

00:27:10,960 --> 00:27:15,279
that runs my

00:27:12,080 --> 00:27:17,520
apps and then b also has quite a fitting

00:27:15,279 --> 00:27:18,480
notion of like how you have the cli

00:27:17,520 --> 00:27:21,760
commands for

00:27:18,480 --> 00:27:23,760
kind of switching organizations

00:27:21,760 --> 00:27:25,600
um switching the defaults of

00:27:23,760 --> 00:27:27,440
organizations or even having like an

00:27:25,600 --> 00:27:30,399
organization that is

00:27:27,440 --> 00:27:31,840
simultaneously able to push to like

00:27:30,399 --> 00:27:34,960
isolation segment a and

00:27:31,840 --> 00:27:36,399
isolation segment b based on like how

00:27:34,960 --> 00:27:38,799
you push your application

00:27:36,399 --> 00:27:40,240
so so that was like my my thought as

00:27:38,799 --> 00:27:43,520
well

00:27:40,240 --> 00:27:45,600
leaning on on today's isolation segment

00:27:43,520 --> 00:27:49,200
metaphor

00:27:45,600 --> 00:27:52,799
yeah i was um and also oh go ahead

00:27:49,200 --> 00:27:54,559
yeah no sorry i was wondering whether

00:27:52,799 --> 00:27:56,080
those conversations and ideas

00:27:54,559 --> 00:27:58,080
are recorded somewhere that we can just

00:27:56,080 --> 00:28:00,159
link so that

00:27:58,080 --> 00:28:01,520
it can be consulted and read by the

00:28:00,159 --> 00:28:05,600
community without

00:28:01,520 --> 00:28:05,600
maybe making this vision too large

00:28:05,679 --> 00:28:10,080
just thinking if like some of the

00:28:07,600 --> 00:28:10,640
documents that we had earlier on contain

00:28:10,080 --> 00:28:14,320
that or

00:28:10,640 --> 00:28:17,440
not um i guess i'll have to do some

00:28:14,320 --> 00:28:18,559
some digging to to see if that's kind of

00:28:17,440 --> 00:28:20,720
captured somewhere

00:28:18,559 --> 00:28:22,320
um yeah i thought that's not one of the

00:28:20,720 --> 00:28:25,600
documents you had

00:28:22,320 --> 00:28:26,559
um produced baron was discussing

00:28:25,600 --> 00:28:30,240
isolation segments

00:28:26,559 --> 00:28:32,559
right yeah yeah yeah yeah yeah

00:28:30,240 --> 00:28:33,840
i'll i'll find that out and kind of uh

00:28:32,559 --> 00:28:37,039
reference that

00:28:33,840 --> 00:28:38,320
yeah yeah and i

00:28:37,039 --> 00:28:40,320
i think one one thing that i was

00:28:38,320 --> 00:28:43,760
thinking about is like you know in

00:28:40,320 --> 00:28:45,200
in the actual like let's say that um uh

00:28:43,760 --> 00:28:47,840
we wanted to try using isolation

00:28:45,200 --> 00:28:50,880
segments as a mechanism to

00:28:47,840 --> 00:28:52,720
um introduce that uh choice between back

00:28:50,880 --> 00:28:56,240
ends with the goal of migrating

00:28:52,720 --> 00:28:59,120
existing apps to it um

00:28:56,240 --> 00:29:00,880
i wonder if there might need to be a

00:28:59,120 --> 00:29:02,000
little more flexibility in terms of the

00:29:00,880 --> 00:29:04,960
mapping of a cf

00:29:02,000 --> 00:29:05,840
space to an isolation segment introduced

00:29:04,960 --> 00:29:08,640
because

00:29:05,840 --> 00:29:10,399
um right now it's uh each space can have

00:29:08,640 --> 00:29:11,440
only one isolation segment and that is

00:29:10,399 --> 00:29:14,720
mutable

00:29:11,440 --> 00:29:18,080
but there is then kind of a um

00:29:14,720 --> 00:29:20,640
an irreversible transition from

00:29:18,080 --> 00:29:22,480
uh the existing or previous isolation

00:29:20,640 --> 00:29:24,640
segment to the newly assigned one like

00:29:22,480 --> 00:29:26,960
when you restart or re-push an app

00:29:24,640 --> 00:29:28,880
it'll land on that new segment but it's

00:29:26,960 --> 00:29:30,960
kind of outside of the control

00:29:28,880 --> 00:29:32,240
of the space developer working in that

00:29:30,960 --> 00:29:35,760
space

00:29:32,240 --> 00:29:37,200
um so again for apps that are all

00:29:35,760 --> 00:29:39,200
running on diego with the same build

00:29:37,200 --> 00:29:41,760
packs that didn't seem like

00:29:39,200 --> 00:29:43,760
such an unreasonable workflow because it

00:29:41,760 --> 00:29:45,600
should just be flopping over to new

00:29:43,760 --> 00:29:47,279
underlying infrastructure but it's all

00:29:45,600 --> 00:29:48,640
the same flavor

00:29:47,279 --> 00:29:51,279
whereas if there's something that's a

00:29:48,640 --> 00:29:53,520
riskier transition

00:29:51,279 --> 00:29:54,799
it might be appropriate to provide a

00:29:53,520 --> 00:29:56,399
little bit more control like if

00:29:54,799 --> 00:29:57,200
something goes wrong quickly switch back

00:29:56,399 --> 00:29:59,200
to the

00:29:57,200 --> 00:30:00,799
the previous back end and then figure

00:29:59,200 --> 00:30:02,320
out what went wrong

00:30:00,799 --> 00:30:06,559
and that that's kind of what we did with

00:30:02,320 --> 00:30:06,559
the special built diego flag

00:30:06,960 --> 00:30:13,120
when we um

00:30:10,799 --> 00:30:14,159
uh did the deity diego transition is

00:30:13,120 --> 00:30:15,679
that that would allow

00:30:14,159 --> 00:30:18,240
kind of that that two-way switching

00:30:15,679 --> 00:30:21,919
between the dea back end and diego

00:30:18,240 --> 00:30:23,279
so i think that that would be my only

00:30:21,919 --> 00:30:26,080
high level

00:30:23,279 --> 00:30:27,840
uh snag in the workflow around using

00:30:26,080 --> 00:30:32,799
isolation segments to extend

00:30:27,840 --> 00:30:32,799
to um a kubernetes backed

00:30:34,840 --> 00:30:37,840
runtime

00:30:42,399 --> 00:30:45,440
great thanks so much yeah but again that

00:30:44,640 --> 00:30:46,880
you know that that's kind of

00:30:45,440 --> 00:30:49,600
presupposing that we'd

00:30:46,880 --> 00:30:51,200
be able to do all of that you know still

00:30:49,600 --> 00:30:53,440
with keeping the same

00:30:51,200 --> 00:30:55,360
not just controller code base but you

00:30:53,440 --> 00:30:59,600
know single instance of cloud controller

00:30:55,360 --> 00:31:04,480
and carving out those um

00:30:59,600 --> 00:31:08,240
uh switching pathways inside of it

00:31:04,480 --> 00:31:08,240
and maybe the rooting part um

00:31:09,679 --> 00:31:12,720
yeah right making making sure that okay

00:31:11,840 --> 00:31:15,279
also

00:31:12,720 --> 00:31:16,720
there's a route attached to this uh make

00:31:15,279 --> 00:31:19,840
sure the traffic is gonna

00:31:16,720 --> 00:31:23,600
keep going to the right app instances

00:31:19,840 --> 00:31:25,840
on the same virtual host domain

00:31:23,600 --> 00:31:27,200
because yes i understand the go router

00:31:25,840 --> 00:31:30,960
had the ability to route

00:31:27,200 --> 00:31:33,679
shared domains and isolation segments

00:31:30,960 --> 00:31:35,360
private domains and so this might

00:31:33,679 --> 00:31:38,880
conflict with the

00:31:35,360 --> 00:31:41,200
safe rocket uh routing part which

00:31:38,880 --> 00:31:43,200
i guess by by default requires ownership

00:31:41,200 --> 00:31:45,840
on the domain until the balance of the

00:31:43,200 --> 00:31:48,960
is balancer directly attack at the

00:31:45,840 --> 00:31:48,960
kubernetes cluster

00:31:49,760 --> 00:31:53,919
yeah ironically this might be a final

00:31:52,559 --> 00:31:55,440
hurrah for the

00:31:53,919 --> 00:31:57,039
concept of route services in the go

00:31:55,440 --> 00:31:58,840
router that might have enough

00:31:57,039 --> 00:32:02,399
flexibility to

00:31:58,840 --> 00:32:05,519
um chain the

00:32:02,399 --> 00:32:07,679
chain you know reverse proxies together

00:32:05,519 --> 00:32:09,200
across environments for that transition

00:32:07,679 --> 00:32:12,000
but

00:32:09,200 --> 00:32:15,840
it's something that is definitely worth

00:32:12,000 --> 00:32:15,840
thinking about and exploring

00:32:15,919 --> 00:32:23,919
and to get back on the cnd um

00:32:20,080 --> 00:32:26,000
i i had a look at the the cats for cf4

00:32:23,919 --> 00:32:29,039
kids

00:32:26,000 --> 00:32:31,919
is that the reason why the services

00:32:29,039 --> 00:32:32,960
um part of the cuts is disabled the fact

00:32:31,919 --> 00:32:34,960
that

00:32:32,960 --> 00:32:36,159
uh if if i get it correctly on the ci on

00:32:34,960 --> 00:32:38,240
the cfr ci

00:32:36,159 --> 00:32:39,600
the cuts the service part is not enabled

00:32:38,240 --> 00:32:43,039
is that because the

00:32:39,600 --> 00:32:45,279
pickup services are running differently

00:32:43,039 --> 00:32:47,279
um basically my question is would the

00:32:45,279 --> 00:32:52,080
vcap services binding

00:32:47,279 --> 00:32:55,120
be preserved as i understand the cnb

00:32:52,080 --> 00:32:57,840
uh is not using the cap services

00:32:55,120 --> 00:32:57,840
am i right

00:33:02,159 --> 00:33:05,840
i think i recall something in that in

00:33:04,320 --> 00:33:08,640
that direction as well

00:33:05,840 --> 00:33:08,640
that like

00:33:09,039 --> 00:33:14,720
some of the cnbs don't provide like yeah

00:33:12,880 --> 00:33:16,799
they they don't kind of listen to

00:33:14,720 --> 00:33:17,919
whatever services are bound to an app

00:33:16,799 --> 00:33:19,600
and like

00:33:17,919 --> 00:33:21,120
things like pulling in the database

00:33:19,600 --> 00:33:24,640
driver if you

00:33:21,120 --> 00:33:28,559
bound the database service is probably

00:33:24,640 --> 00:33:30,399
something that works differently in cmds

00:33:28,559 --> 00:33:32,640
yeah i'm i'm not sure why that's

00:33:30,399 --> 00:33:34,559
disabled that uh i don't know if anyone

00:33:32,640 --> 00:33:36,960
who's been working more closely on on

00:33:34,559 --> 00:33:40,320
cfrcates who happens to be here

00:33:36,960 --> 00:33:43,039
um would know like the vcap services

00:33:40,320 --> 00:33:45,279
you know that that's still flowing um

00:33:43,039 --> 00:33:49,039
certainly to the runtime environment

00:33:45,279 --> 00:33:50,720
and so if there's any service um

00:33:49,039 --> 00:33:52,399
uh or if there's any dependency

00:33:50,720 --> 00:33:55,600
interactions in the app

00:33:52,399 --> 00:33:57,760
that just resolve at runtime using vcap

00:33:55,600 --> 00:33:59,600
services that should all work fine

00:33:57,760 --> 00:34:01,440
uh there's a i think you know there's

00:33:59,600 --> 00:34:04,399
there's been some discussion of this and

00:34:01,440 --> 00:34:05,279
in uh i think comments on cfr gates on

00:34:04,399 --> 00:34:08,480
the repo

00:34:05,279 --> 00:34:11,520
um but uh there's a

00:34:08,480 --> 00:34:14,720
subtler class of integrations that

00:34:11,520 --> 00:34:16,240
do happen at staging time um to pull in

00:34:14,720 --> 00:34:18,399
other dependencies

00:34:16,240 --> 00:34:20,720
and so those those are still not

00:34:18,399 --> 00:34:24,720
currently supported because of that

00:34:20,720 --> 00:34:29,679
um uh mismatch of information flow

00:34:24,720 --> 00:34:29,679
uh with with kpac into the cnbs

00:34:30,320 --> 00:34:37,040
so i don't know if any of the

00:34:33,359 --> 00:34:37,839
cats in the services area test any of

00:34:37,040 --> 00:34:41,280
that

00:34:37,839 --> 00:34:41,280
functionality deliberately

00:34:44,720 --> 00:34:50,159
but i mean my uh i would think maybe

00:34:48,480 --> 00:34:52,879
it's a combination of like

00:34:50,159 --> 00:34:53,919
it's not that nothing in there works but

00:34:52,879 --> 00:34:57,839
there might be

00:34:53,919 --> 00:34:59,760
some um coincidental issues

00:34:57,839 --> 00:35:01,280
with even some of the test assets i know

00:34:59,760 --> 00:35:04,400
for a while we had a

00:35:01,280 --> 00:35:06,240
uh we had that ruby apps

00:35:04,400 --> 00:35:07,920
uh wouldn't run at all or wouldn't run

00:35:06,240 --> 00:35:08,960
great and that was still a lot of the

00:35:07,920 --> 00:35:12,400
test fixtures

00:35:08,960 --> 00:35:14,320
in the cats um so i think that we turned

00:35:12,400 --> 00:35:15,920
a bunch of stuff off at that point

00:35:14,320 --> 00:35:18,240
um and we just might not have turned it

00:35:15,920 --> 00:35:20,880
back on

00:35:18,240 --> 00:35:23,040
and like as far as i understood it was a

00:35:20,880 --> 00:35:23,680
conscious decision from the pacato team

00:35:23,040 --> 00:35:25,680
to not

00:35:23,680 --> 00:35:26,800
include something like the jdbc

00:35:25,680 --> 00:35:30,240
buildback

00:35:26,800 --> 00:35:32,400
part into the pacquiao java build pack

00:35:30,240 --> 00:35:34,240
so it's not going to come back

00:35:32,400 --> 00:35:35,839
unless you do it like we did it because

00:35:34,240 --> 00:35:37,920
we had an application that needed the

00:35:35,839 --> 00:35:41,040
functionality and it was rather easy

00:35:37,920 --> 00:35:44,160
to provide a customized java

00:35:41,040 --> 00:35:47,440
cloud native build pack uh indeed

00:35:44,160 --> 00:35:49,200
included the functionality again but

00:35:47,440 --> 00:35:51,440
that was a conscious decision not to do

00:35:49,200 --> 00:35:51,440
that

00:35:52,400 --> 00:35:56,240
to the best like the auto reconfigure or

00:35:54,640 --> 00:35:58,000
something

00:35:56,240 --> 00:36:00,160
i forget exactly which module that it

00:35:58,000 --> 00:36:00,160
was

00:36:00,240 --> 00:36:03,520
i don't recall which which build pack

00:36:02,160 --> 00:36:05,680
part that was but like

00:36:03,520 --> 00:36:07,040
the conscious decision was based on it's

00:36:05,680 --> 00:36:10,000
a bad idea

00:36:07,040 --> 00:36:11,599
to have a build pack include a jar file

00:36:10,000 --> 00:36:13,839
into your classpath

00:36:11,599 --> 00:36:16,000
that is that not based on it it's guests

00:36:13,839 --> 00:36:18,480
like which is the right driver

00:36:16,000 --> 00:36:20,240
um like you do know the backhand

00:36:18,480 --> 00:36:21,520
database but you have no idea of the

00:36:20,240 --> 00:36:23,280
version that's running there

00:36:21,520 --> 00:36:25,440
or if there could be any conflicts with

00:36:23,280 --> 00:36:28,000
yours so they said

00:36:25,440 --> 00:36:30,560
when we asked actually they said that

00:36:28,000 --> 00:36:32,880
when it was introduced it was a bad idea

00:36:30,560 --> 00:36:34,800
now they they just didn't copy over that

00:36:32,880 --> 00:36:36,880
bad idea to the packado

00:36:34,800 --> 00:36:41,839
ecosystem so i think that's not going to

00:36:36,880 --> 00:36:43,920
come back

00:36:41,839 --> 00:36:46,079
would that make sense to deprecate part

00:36:43,920 --> 00:36:50,320
of the java buildback

00:36:46,079 --> 00:36:54,079
uh even though in the cf-4 vms and

00:36:50,320 --> 00:36:57,280
and so that all ought to restrict

00:36:54,079 --> 00:37:00,400
the scope of cats to not cover this area

00:36:57,280 --> 00:37:01,599
and still get most of the other build

00:37:00,400 --> 00:37:09,839
packs features

00:37:01,599 --> 00:37:09,839
being tested with cats

00:37:12,560 --> 00:37:18,800
yeah i'm not sure if that is

00:37:16,880 --> 00:37:20,480
if that's deliberately tested as

00:37:18,800 --> 00:37:22,240
behavior in cats it might be in java

00:37:20,480 --> 00:37:25,760
build back tests

00:37:22,240 --> 00:37:27,359
um yeah i don't know at this point about

00:37:25,760 --> 00:37:30,400
the value of altering the

00:37:27,359 --> 00:37:31,839
you know the cf v2 java built back to

00:37:30,400 --> 00:37:33,520
deprecate that behavior maybe it would

00:37:31,839 --> 00:37:36,240
make sense just to deprecate it but

00:37:33,520 --> 00:37:36,720
if ever effectively never to remove it

00:37:36,240 --> 00:37:39,920
but

00:37:36,720 --> 00:37:41,520
to make it clear that people should um

00:37:39,920 --> 00:37:43,040
not rely on that behavior maybe give

00:37:41,520 --> 00:37:44,320
them a way to turn it off

00:37:43,040 --> 00:37:46,160
so that they could verify they're not

00:37:44,320 --> 00:37:49,760
relying on it

00:37:46,160 --> 00:37:50,240
a warning okay running at staging time

00:37:49,760 --> 00:37:51,920
yeah

00:37:50,240 --> 00:37:53,520
hey there it looks like you're asking us

00:37:51,920 --> 00:37:54,800
to dynamically inject your database

00:37:53,520 --> 00:37:58,240
driver at build time

00:37:54,800 --> 00:37:58,240
uh would you like to stop doing that

00:37:59,839 --> 00:38:09,040
clippy comes back

00:38:05,040 --> 00:38:12,640
okay um so i believe that has

00:38:09,040 --> 00:38:14,880
covered the workload migration topic

00:38:12,640 --> 00:38:16,079
uh on on on that one actually i think we

00:38:14,880 --> 00:38:18,720
had an earlier

00:38:16,079 --> 00:38:19,839
uh sit call where we discussed about

00:38:18,720 --> 00:38:22,000
like

00:38:19,839 --> 00:38:22,880
picking individual assets from cloud

00:38:22,000 --> 00:38:25,599
controller

00:38:22,880 --> 00:38:27,839
and i think i also recall that both

00:38:25,599 --> 00:38:30,400
souza and vmware had some

00:38:27,839 --> 00:38:31,280
open source projects that like helped

00:38:30,400 --> 00:38:34,400
with

00:38:31,280 --> 00:38:36,720
kind of pulling part of the information

00:38:34,400 --> 00:38:38,720
the thing that i also recall is that

00:38:36,720 --> 00:38:41,680
service bindings and especially

00:38:38,720 --> 00:38:43,119
kind of kind of applying service

00:38:41,680 --> 00:38:45,839
bindings again

00:38:43,119 --> 00:38:47,119
in the target system didn't have an api

00:38:45,839 --> 00:38:50,079
right so

00:38:47,119 --> 00:38:52,160
um even though you might be obviously

00:38:50,079 --> 00:38:53,920
able to retrieve the binding information

00:38:52,160 --> 00:38:54,800
from the cloud controller database you

00:38:53,920 --> 00:38:56,960
don't

00:38:54,800 --> 00:38:58,240
have an api to get that into a new cloud

00:38:56,960 --> 00:39:00,880
foundry system

00:38:58,240 --> 00:39:03,040
obviously you could kind of write to the

00:39:00,880 --> 00:39:06,320
cloud controller database yourself but

00:39:03,040 --> 00:39:10,079
um um this might be overly

00:39:06,320 --> 00:39:12,240
overly complex um so so i i recall that

00:39:10,079 --> 00:39:15,440
that being a challenge

00:39:12,240 --> 00:39:16,880
yeah that's that's as much as i recall

00:39:15,440 --> 00:39:18,480
from from that conversation but that's

00:39:16,880 --> 00:39:20,560
more the scenario of like

00:39:18,480 --> 00:39:22,000
taking a subset of the information cloud

00:39:20,560 --> 00:39:23,599
controller and

00:39:22,000 --> 00:39:29,839
spinning up a new system with that

00:39:23,599 --> 00:39:29,839
subset of information

00:39:30,880 --> 00:39:34,560
yeah i i do recall you're talking about

00:39:33,520 --> 00:39:37,359
just taking all that

00:39:34,560 --> 00:39:39,839
that uh system of record state that's in

00:39:37,359 --> 00:39:41,680
cctv and transferring it over to another

00:39:39,839 --> 00:39:44,240
environment

00:39:41,680 --> 00:39:45,280
yeah there's um i think it's it might

00:39:44,240 --> 00:39:48,400
still be in

00:39:45,280 --> 00:39:50,560
some of the um uh

00:39:48,400 --> 00:39:52,160
like pivotal labs or whatever we're

00:39:50,560 --> 00:39:54,720
calling it now

00:39:52,160 --> 00:39:56,320
um organization we've had a project

00:39:54,720 --> 00:39:59,680
called cf management that has done

00:39:56,320 --> 00:40:00,320
some of that um probably i can find the

00:39:59,680 --> 00:40:02,480
link again

00:40:00,320 --> 00:40:05,119
i think i also put that somewhere in the

00:40:02,480 --> 00:40:06,800
community i'm thinking about i wonder if

00:40:05,119 --> 00:40:08,240
maybe maybe there's all kinds of reasons

00:40:06,800 --> 00:40:10,560
why this wouldn't work but

00:40:08,240 --> 00:40:11,440
i wonder if it would work to have like a

00:40:10,560 --> 00:40:14,000
um

00:40:11,440 --> 00:40:15,920
proxy broker in the target environment

00:40:14,000 --> 00:40:20,240
they could go through the

00:40:15,920 --> 00:40:24,240
um service broker api to re-establish

00:40:20,240 --> 00:40:28,880
service instances and bindings for apps

00:40:24,240 --> 00:40:32,720
it might still need to be driven by

00:40:28,880 --> 00:40:35,280
requests coming from the cc apis

00:40:32,720 --> 00:40:36,560
like those the services endpoints but i

00:40:35,280 --> 00:40:38,319
wonder if that could say

00:40:36,560 --> 00:40:40,240
i know where to get that let me go over

00:40:38,319 --> 00:40:44,319
to my source

00:40:40,240 --> 00:40:44,319
cf installation and copy the data over

00:40:44,800 --> 00:40:48,960
but i understand the service binding

00:40:46,400 --> 00:40:52,079
that are indeed recorded into ccdb

00:40:48,960 --> 00:40:52,960
so just not surfaced in safe api for

00:40:52,079 --> 00:40:57,520
right to use

00:40:52,960 --> 00:40:59,359
clients to replicate them so maybe uh

00:40:57,520 --> 00:41:00,880
if there is value in adding this use

00:40:59,359 --> 00:41:03,680
case into cc api

00:41:00,880 --> 00:41:05,520
maybe with restricted permission because

00:41:03,680 --> 00:41:09,119
there is security issues in

00:41:05,520 --> 00:41:12,960
exposing service binding because the

00:41:09,119 --> 00:41:14,560
cc api it's only in latest version that

00:41:12,960 --> 00:41:17,119
the service binding get

00:41:14,560 --> 00:41:19,359
have getting points up to now they were

00:41:17,119 --> 00:41:21,200
only disclosed at post

00:41:19,359 --> 00:41:22,720
that service binding provisioning so

00:41:21,200 --> 00:41:25,839
it's just too late

00:41:22,720 --> 00:41:25,839
to fetch them afterwards

00:41:33,359 --> 00:41:37,920
yeah i think i think that's an

00:41:34,400 --> 00:41:37,920
interesting idea that's worth exploring

00:41:40,079 --> 00:41:45,839
okay then let's maybe uh move on to

00:41:43,280 --> 00:41:48,000
to the next comment actually like this

00:41:45,839 --> 00:41:52,079
one here is based i think on

00:41:48,000 --> 00:41:54,720
a text suggestion that yugioh made

00:41:52,079 --> 00:41:55,359
indeed like when we wrote the document i

00:41:54,720 --> 00:41:58,000
think we

00:41:55,359 --> 00:42:00,000
consciously didn't kind of mention cube

00:41:58,000 --> 00:42:03,280
cf or cfocates as

00:42:00,000 --> 00:42:05,920
like the existing projects but rather

00:42:03,280 --> 00:42:07,040
like kept that agnostic and set a cloud

00:42:05,920 --> 00:42:10,160
foundry

00:42:07,040 --> 00:42:11,760
on kubernetes right to like not

00:42:10,160 --> 00:42:14,720
prescribe

00:42:11,760 --> 00:42:16,000
like one being the the kind of basis for

00:42:14,720 --> 00:42:19,200
the effort and the other one

00:42:16,000 --> 00:42:20,960
not or kind of suggesting

00:42:19,200 --> 00:42:22,560
kind of that there's a migration path

00:42:20,960 --> 00:42:24,560
from one um

00:42:22,560 --> 00:42:27,119
to to that target picture but not from

00:42:24,560 --> 00:42:28,079
the other um that that's why i think we

00:42:27,119 --> 00:42:31,440
kind of try to

00:42:28,079 --> 00:42:35,359
to choose like a non-existing

00:42:31,440 --> 00:42:37,839
term instead of referencing the existing

00:42:35,359 --> 00:42:37,839
projects

00:42:40,720 --> 00:42:47,599
okay then

00:42:44,880 --> 00:42:48,000
integrate with projects and technologies

00:42:47,599 --> 00:42:50,400
from

00:42:48,000 --> 00:42:52,000
kubernetes and other cloud native

00:42:50,400 --> 00:42:54,720
ecosystems

00:42:52,000 --> 00:42:56,960
and daniel is asking if like the

00:42:54,720 --> 00:43:00,640
examples that we make are

00:42:56,960 --> 00:43:03,119
illustrative examples or examples of

00:43:00,640 --> 00:43:06,720
decisions that have been taken

00:43:03,119 --> 00:43:10,400
um i believe it's it's the former uh

00:43:06,720 --> 00:43:13,599
where we basically say let's introduce

00:43:10,400 --> 00:43:17,440
like an api for

00:43:13,599 --> 00:43:19,680
probably this this kind of relates to

00:43:17,440 --> 00:43:21,200
to this kind of example picture here

00:43:19,680 --> 00:43:22,880
let's introduce for like the key

00:43:21,200 --> 00:43:24,000
components that make up cloud foundry

00:43:22,880 --> 00:43:27,440
and api

00:43:24,000 --> 00:43:29,920
definition and then provide like an

00:43:27,440 --> 00:43:32,319
a community implementation and that

00:43:29,920 --> 00:43:32,640
might or might not be istio for ingress

00:43:32,319 --> 00:43:36,800
and

00:43:32,640 --> 00:43:41,520
and um service mesh technologies

00:43:36,800 --> 00:43:44,319
but kind of have that as an api that

00:43:41,520 --> 00:43:45,599
allows people to actually swap out um

00:43:44,319 --> 00:43:47,760
the actual implementation

00:43:45,599 --> 00:43:49,599
i think eric you also mentioned that

00:43:47,760 --> 00:43:50,400
maybe for the community implementation

00:43:49,599 --> 00:43:54,079
of ingress

00:43:50,400 --> 00:43:56,319
indeed is still is too heavy weight

00:43:54,079 --> 00:43:56,319
right

00:43:58,160 --> 00:44:01,680
yeah i i'd agree that that's the former

00:43:59,920 --> 00:44:02,560
in that comment that we're illustrating

00:44:01,680 --> 00:44:06,720
things that

00:44:02,560 --> 00:44:09,119
are yeah we've we've already um

00:44:06,720 --> 00:44:10,880
demonstrated a capability to integrate

00:44:09,119 --> 00:44:13,520
but this wouldn't be

00:44:10,880 --> 00:44:15,839
um the final option or indeed the only

00:44:13,520 --> 00:44:15,839
option

00:44:18,240 --> 00:44:23,839
okay again your comments

00:44:24,400 --> 00:44:28,319
um yes that was a discussion about uh

00:44:27,119 --> 00:44:31,440
replacing

00:44:28,319 --> 00:44:34,800
a capi concept with a

00:44:31,440 --> 00:44:37,359
kubernetes api concept

00:44:34,800 --> 00:44:38,800
one was the notion of organ space being

00:44:37,359 --> 00:44:40,990
replaced by um

00:44:38,800 --> 00:44:42,640
name spaces and

00:44:40,990 --> 00:44:47,839
[Music]

00:44:42,640 --> 00:44:49,520
yeah the question was is there a way to

00:44:47,839 --> 00:44:51,119
still protect the cloud foundry

00:44:49,520 --> 00:44:55,440
application developers

00:44:51,119 --> 00:44:58,319
from having to ramp up on the kubernetes

00:44:55,440 --> 00:45:00,480
ecosystem complexity

00:44:58,319 --> 00:45:02,480
if we compare number of pages of manual

00:45:00,480 --> 00:45:04,480
from cloud foundry and kubernetes

00:45:02,480 --> 00:45:06,960
kubernetes very large because of all the

00:45:04,480 --> 00:45:09,599
other objects

00:45:06,960 --> 00:45:10,000
maybe i see maybe one possibility into

00:45:09,599 --> 00:45:13,839
which

00:45:10,000 --> 00:45:17,680
the the

00:45:13,839 --> 00:45:21,200
kubernetes api machinery for doing uh

00:45:17,680 --> 00:45:24,400
cred create read update and delete

00:45:21,200 --> 00:45:25,520
would be extracted from um from the rest

00:45:24,400 --> 00:45:29,200
of kubernetes

00:45:25,520 --> 00:45:32,800
in a way that um the default

00:45:29,200 --> 00:45:36,000
api version for kubernetes object

00:45:32,800 --> 00:45:38,560
such as pods deployments services

00:45:36,000 --> 00:45:40,880
uh would not be a prerequisite to using

00:45:38,560 --> 00:45:44,880
the api machinery

00:45:40,880 --> 00:45:48,240
so users could just use kubectl

00:45:44,880 --> 00:45:49,599
and a subtract of um of kubernetes api

00:45:48,240 --> 00:45:52,000
machinery for

00:45:49,599 --> 00:45:53,680
interacting with the custom resources

00:45:52,000 --> 00:45:57,599
but without

00:45:53,680 --> 00:46:00,960
being asked to be trained

00:45:57,599 --> 00:46:04,960
on the rest of the concept so

00:46:00,960 --> 00:46:06,720
this has maybe some impact on

00:46:04,960 --> 00:46:09,440
the user experience in terms of the

00:46:06,720 --> 00:46:13,040
tools both the cli and the

00:46:09,440 --> 00:46:15,680
web the web uis that would not

00:46:13,040 --> 00:46:17,119
make the assumption that the default api

00:46:15,680 --> 00:46:18,319
versions for built-in kubernetes

00:46:17,119 --> 00:46:21,359
subjects

00:46:18,319 --> 00:46:23,119
are available to application developers

00:46:21,359 --> 00:46:25,680
and as well that the documentation from

00:46:23,119 --> 00:46:28,560
kubernetes be split into two parts

00:46:25,680 --> 00:46:30,400
a bit similar that in in the way that

00:46:28,560 --> 00:46:32,720
the cloud foundry community

00:46:30,400 --> 00:46:34,800
had split the documentation in different

00:46:32,720 --> 00:46:36,000
repos so that they can be repeat catch

00:46:34,800 --> 00:46:39,599
down stream

00:46:36,000 --> 00:46:43,040
uh independently one or the other

00:46:39,599 --> 00:46:45,440
if there is existing kubernetes

00:46:43,040 --> 00:46:46,560
community efforts to split the api

00:46:45,440 --> 00:46:49,839
machinery

00:46:46,560 --> 00:46:51,920
uh from the actual um

00:46:49,839 --> 00:46:53,359
default api version default api

00:46:51,920 --> 00:46:56,480
namespace

00:46:53,359 --> 00:46:58,240
then that might be a way that cloud

00:46:56,480 --> 00:47:02,160
foundry application developers could use

00:46:58,240 --> 00:47:02,160
this api machinery without being

00:47:02,319 --> 00:47:06,640
asked to train to get the full cloud

00:47:04,800 --> 00:47:08,079
foundry training as a full kubernetes

00:47:06,640 --> 00:47:11,200
training sorry

00:47:08,079 --> 00:47:14,079
otherwise i i don't see how the promise

00:47:11,200 --> 00:47:15,280
of cloud foundry to keep things simple

00:47:14,079 --> 00:47:17,599
uh could be delivered

00:47:15,280 --> 00:47:18,560
uh if we ask um uh application

00:47:17,599 --> 00:47:21,680
developers to get

00:47:18,560 --> 00:47:24,720
a kubernetes account and

00:47:21,680 --> 00:47:25,680
to still be surfaced with um um the

00:47:24,720 --> 00:47:29,599
default

00:47:25,680 --> 00:47:32,720
uh api versions and api namespace from

00:47:29,599 --> 00:47:34,480
from kubernetes yeah yeah

00:47:32,720 --> 00:47:36,160
i think that's that's a great point

00:47:34,480 --> 00:47:38,000
about you know

00:47:36,160 --> 00:47:39,200
having this fundamental tension between

00:47:38,000 --> 00:47:42,559
you know we've had a

00:47:39,200 --> 00:47:44,400
convenient but opinionated interface

00:47:42,559 --> 00:47:45,680
especially for application developers

00:47:44,400 --> 00:47:48,880
that

00:47:45,680 --> 00:47:52,079
has really simplified um

00:47:48,880 --> 00:47:54,400
their their workflows um but that they

00:47:52,079 --> 00:47:57,760
sometimes feel constrained by

00:47:54,400 --> 00:47:59,359
and i i also think that in in almost all

00:47:57,760 --> 00:48:02,880
of those cases

00:47:59,359 --> 00:48:05,599
um just exposing everyone to

00:48:02,880 --> 00:48:07,680
those raw primitives from kubernetes

00:48:05,599 --> 00:48:09,359
from you know its core resources is

00:48:07,680 --> 00:48:12,400
is not going to be the most productive

00:48:09,359 --> 00:48:15,920
option for people most of the time

00:48:12,400 --> 00:48:17,839
i think that um we

00:48:15,920 --> 00:48:19,760
in as we're thinking about the evolution

00:48:17,839 --> 00:48:21,440
of cf towards kubernetes

00:48:19,760 --> 00:48:22,960
we might just be able to arrange that

00:48:21,440 --> 00:48:26,000
more conveniently with

00:48:22,960 --> 00:48:28,319
some of the you know maybe even just the

00:48:26,000 --> 00:48:30,800
role-based access control rules that can

00:48:28,319 --> 00:48:34,400
apply to the api resources

00:48:30,800 --> 00:48:36,480
and maybe maybe some amount of

00:48:34,400 --> 00:48:38,400
system-wide coordination beyond that

00:48:36,480 --> 00:48:39,839
potentially with something like opa

00:48:38,400 --> 00:48:41,520
and gatekeeper if there's if there's

00:48:39,839 --> 00:48:46,160
things that aren't easily expressed

00:48:41,520 --> 00:48:49,200
just as rules about roles based on types

00:48:46,160 --> 00:48:50,960
and operations within a namespace

00:48:49,200 --> 00:48:52,240
because there i think you could get that

00:48:50,960 --> 00:48:54,880
it sounded like okay you

00:48:52,240 --> 00:48:56,480
you want an experience where the cloud

00:48:54,880 --> 00:48:58,960
foundry developer

00:48:56,480 --> 00:49:00,160
effectively their scope of interactions

00:48:58,960 --> 00:49:03,119
is manipulating

00:49:00,160 --> 00:49:05,200
a set of the crds that map on to the

00:49:03,119 --> 00:49:08,400
resources that you would expect them to

00:49:05,200 --> 00:49:11,440
have access to you in a cf space so

00:49:08,400 --> 00:49:13,520
builds apps processes routes

00:49:11,440 --> 00:49:15,520
service instances service bindings

00:49:13,520 --> 00:49:17,280
things like that

00:49:15,520 --> 00:49:19,839
i think you could probably arrange that

00:49:17,280 --> 00:49:23,359
just by having suitable representation

00:49:19,839 --> 00:49:25,040
of those resources um at the same level

00:49:23,359 --> 00:49:26,880
of abstraction and then not giving them

00:49:25,040 --> 00:49:29,280
permission to anything else even in that

00:49:26,880 --> 00:49:31,599
namespace

00:49:29,280 --> 00:49:33,280
at the same time i don't as an execution

00:49:31,599 --> 00:49:36,720
developer when i

00:49:33,280 --> 00:49:40,000
use portal and i ask for completion

00:49:36,720 --> 00:49:40,880
uh to cut all get i don't want to get

00:49:40,000 --> 00:49:44,160
parts

00:49:40,880 --> 00:49:45,440
deployments and all the the built-in

00:49:44,160 --> 00:49:48,240
objects in the name

00:49:45,440 --> 00:49:49,920
in the built-in um core resources

00:49:48,240 --> 00:49:52,160
because and then i'm polluted

00:49:49,920 --> 00:49:52,960
um i just want the cloud foundry

00:49:52,160 --> 00:49:55,599
namespace

00:49:52,960 --> 00:49:55,599
apis

00:49:56,640 --> 00:49:59,359
yeah sure i mean

00:50:01,920 --> 00:50:05,599
i mean yeah that that that's a you know

00:50:04,240 --> 00:50:08,720
that's a good point about

00:50:05,599 --> 00:50:11,760
um insulating uh developers

00:50:08,720 --> 00:50:13,520
from from that level of detail um

00:50:11,760 --> 00:50:15,520
you know i think on the flip side there

00:50:13,520 --> 00:50:17,599
there are potentially cases where

00:50:15,520 --> 00:50:18,800
developers would get a better

00:50:17,599 --> 00:50:20,559
understanding

00:50:18,800 --> 00:50:22,480
of the platform and what's happening

00:50:20,559 --> 00:50:24,720
underneath it especially if they have

00:50:22,480 --> 00:50:26,800
like if that's just going so far down as

00:50:24,720 --> 00:50:27,839
kubernetes and the familiarity of those

00:50:26,800 --> 00:50:29,359
concepts

00:50:27,839 --> 00:50:31,359
so if they got to maybe look but not

00:50:29,359 --> 00:50:32,640
touch at the details below their

00:50:31,359 --> 00:50:34,160
applications then they might say like

00:50:32,640 --> 00:50:36,000
okay actually i see that the system is

00:50:34,160 --> 00:50:37,839
doing the right thing i'm gonna

00:50:36,000 --> 00:50:39,280
yeah have some amount of trust in it

00:50:37,839 --> 00:50:41,839
even if i i can't manipulate those

00:50:39,280 --> 00:50:41,839
things myself

00:50:46,720 --> 00:50:51,280
i i like jesus as sorry as like

00:50:49,680 --> 00:50:55,440
supporting like more

00:50:51,280 --> 00:50:57,520
cases of developers like like if we like

00:50:55,440 --> 00:50:59,520
implement a cf api experience people

00:50:57,520 --> 00:51:01,680
used to that can continue using like

00:50:59,520 --> 00:51:02,880
cfcli and clients they're used to they

00:51:01,680 --> 00:51:04,880
like don't have to touch

00:51:02,880 --> 00:51:06,319
or like maybe even not be given access

00:51:04,880 --> 00:51:08,559
to keep cuddle

00:51:06,319 --> 00:51:10,240
but like ones that should have access or

00:51:08,559 --> 00:51:12,960
need access to keep cut over now like

00:51:10,240 --> 00:51:12,960
enabling them

00:51:20,400 --> 00:51:22,960
actually yeah

00:51:26,240 --> 00:51:29,440
the question comes with a would would

00:51:28,400 --> 00:51:32,880
cfcli

00:51:29,440 --> 00:51:36,400
and uh and appear eventually be

00:51:32,880 --> 00:51:39,760
deprecated in favor of cattle

00:51:36,400 --> 00:51:41,680
how would that always be

00:51:39,760 --> 00:51:43,040
two different ux and would the community

00:51:41,680 --> 00:51:45,200
be able to maintain those two different

00:51:43,040 --> 00:51:48,240
ux

00:51:45,200 --> 00:51:51,440
in double we know the cfcli

00:51:48,240 --> 00:51:52,000
is costly uh to maintain and to reach

00:51:51,440 --> 00:51:53,760
this uh

00:51:52,000 --> 00:51:55,119
simplified rate it's costly because

00:51:53,760 --> 00:51:58,559
every new feature

00:51:55,119 --> 00:52:01,599
needs uh development um

00:51:58,559 --> 00:52:02,160
and so is it realistic to to keep those

00:52:01,599 --> 00:52:05,040
twos

00:52:02,160 --> 00:52:06,319
i think that would be ideal for existing

00:52:05,040 --> 00:52:10,319
users to not be

00:52:06,319 --> 00:52:10,319
exposed to uh to good couple

00:52:10,400 --> 00:52:13,520
but what risk least realistic in terms

00:52:12,480 --> 00:52:15,440
of budget

00:52:13,520 --> 00:52:18,640
for the community can spend to to

00:52:15,440 --> 00:52:20,960
maintain those two ux

00:52:18,640 --> 00:52:22,160
yeah i mean that that's a that's a

00:52:20,960 --> 00:52:24,079
definitely a good point

00:52:22,160 --> 00:52:25,520
um you know maybe one thing to consider

00:52:24,079 --> 00:52:29,200
is that

00:52:25,520 --> 00:52:31,200
um you know we're we as a community and

00:52:29,200 --> 00:52:34,400
certainly we as vmware are still putting

00:52:31,200 --> 00:52:36,400
resources into cloud controller as it is

00:52:34,400 --> 00:52:39,040
today and the cli

00:52:36,400 --> 00:52:41,119
and so and and we expect that to still

00:52:39,040 --> 00:52:45,040
be around and working for years

00:52:41,119 --> 00:52:46,960
um and so um

00:52:45,040 --> 00:52:48,480
that might be work that we have to do

00:52:46,960 --> 00:52:50,400
anyway to preserve that

00:52:48,480 --> 00:52:51,599
and so it you know if we're now just

00:52:50,400 --> 00:52:55,520
talking about

00:52:51,599 --> 00:52:58,720
having another distribution that's um

00:52:55,520 --> 00:53:01,760
uh routing those to a different back end

00:52:58,720 --> 00:53:03,520
um maybe with uh you know we might need

00:53:01,760 --> 00:53:05,599
some additional effort to support

00:53:03,520 --> 00:53:07,119
variations on that and have that come

00:53:05,599 --> 00:53:08,240
through the api or be accessible in the

00:53:07,119 --> 00:53:09,359
cli but

00:53:08,240 --> 00:53:11,200
you know maybe that's an order of

00:53:09,359 --> 00:53:13,040
magnitude less work than having a

00:53:11,200 --> 00:53:15,839
totally separate implementation of those

00:53:13,040 --> 00:53:15,839
things

00:53:18,720 --> 00:53:23,920
so the the document

00:53:22,079 --> 00:53:25,119
was suggesting replacing organ space

00:53:23,920 --> 00:53:29,040
with our namespaces

00:53:25,119 --> 00:53:31,119
of kubernetes namespaces

00:53:29,040 --> 00:53:33,280
you are mentioning this is an example of

00:53:31,119 --> 00:53:33,920
things that uh just an example and maybe

00:53:33,280 --> 00:53:37,280
not

00:53:33,920 --> 00:53:40,160
a target but actually when when you

00:53:37,280 --> 00:53:41,280
explained your feedback my thought was i

00:53:40,160 --> 00:53:45,599
i brought up that

00:53:41,280 --> 00:53:47,599
example to say like today we have a very

00:53:45,599 --> 00:53:48,800
cloud foundry specific way to deal with

00:53:47,599 --> 00:53:52,400
the topic which is

00:53:48,800 --> 00:53:54,079
ski of orcs and spaces

00:53:52,400 --> 00:53:56,000
when i suggested the example i did not

00:53:54,079 --> 00:53:57,920
think about like exposing then

00:53:56,000 --> 00:54:00,240
hierarchical namespaces to the developer

00:53:57,920 --> 00:54:02,880
but my thinking was rather to say

00:54:00,240 --> 00:54:04,319
like in future if we are on kubernetes

00:54:02,880 --> 00:54:06,720
at some point in time hierarchical

00:54:04,319 --> 00:54:09,359
namespaces will be a thing and then

00:54:06,720 --> 00:54:10,160
like we should make use of them in like

00:54:09,359 --> 00:54:12,400
the underlying

00:54:10,160 --> 00:54:13,280
implementation so so that was more the

00:54:12,400 --> 00:54:16,960
reason why

00:54:13,280 --> 00:54:20,319
i put up this this example here

00:54:16,960 --> 00:54:22,319
less to say this is urgently something

00:54:20,319 --> 00:54:23,440
that we need to expose to cloud foundry

00:54:22,319 --> 00:54:25,839
developers

00:54:23,440 --> 00:54:25,839
actually

00:54:28,480 --> 00:54:33,280
and and so when i hear uh eric you're

00:54:30,880 --> 00:54:36,880
saying that uh capian

00:54:33,280 --> 00:54:40,319
fcli aims to be maintained

00:54:36,880 --> 00:54:41,359
at least by vmware over time uh and in a

00:54:40,319 --> 00:54:44,720
different

00:54:41,359 --> 00:54:45,520
um parallel distribution for kubernetes

00:54:44,720 --> 00:54:48,559
and might be

00:54:45,520 --> 00:54:50,559
other concepts targeted to uh to

00:54:48,559 --> 00:54:52,480
kubernetes developers that might have

00:54:50,559 --> 00:54:55,760
different concept at what's in uh

00:54:52,480 --> 00:54:59,119
in cscli and and capi

00:54:55,760 --> 00:55:00,960
do i get this right well

00:54:59,119 --> 00:55:03,760
uh i think one thing we've also talked

00:55:00,960 --> 00:55:05,839
about is um

00:55:03,760 --> 00:55:07,119
with the with the kind of modularity

00:55:05,839 --> 00:55:08,960
that we have in mind

00:55:07,119 --> 00:55:12,799
here and that we've we've talked about

00:55:08,960 --> 00:55:12,799
um later in this document

00:55:13,280 --> 00:55:19,760
i think we're you know maybe

00:55:16,400 --> 00:55:20,960
stepping back one one piece um

00:55:19,760 --> 00:55:22,640
with a lot of the work that we've done

00:55:20,960 --> 00:55:23,520
with edwina we've been really trying to

00:55:22,640 --> 00:55:26,640
replicate

00:55:23,520 --> 00:55:30,799
with a high degree of fidelity um

00:55:26,640 --> 00:55:34,880
the the current uh domain model

00:55:30,799 --> 00:55:37,599
and features of especially that

00:55:34,880 --> 00:55:39,760
app pushing and managing experience down

00:55:37,599 --> 00:55:40,960
even into the container environment

00:55:39,760 --> 00:55:42,960
and there's definitely been cases of

00:55:40,960 --> 00:55:44,720
that they've been really hard

00:55:42,960 --> 00:55:46,640
like the example that i always come back

00:55:44,720 --> 00:55:50,240
to is instance indices

00:55:46,640 --> 00:55:51,119
where um that really forced irene very

00:55:50,240 --> 00:55:53,760
early on

00:55:51,119 --> 00:55:55,359
to work with stateful sets because they

00:55:53,760 --> 00:55:58,880
coincidentally had the same

00:55:55,359 --> 00:56:01,280
type of indexing but then even exposing

00:55:58,880 --> 00:56:03,040
that as the an environment variable into

00:56:01,280 --> 00:56:06,720
the application

00:56:03,040 --> 00:56:08,240
runtime container has required some work

00:56:06,720 --> 00:56:09,839
to do

00:56:08,240 --> 00:56:11,440
and then anyone coming from the

00:56:09,839 --> 00:56:11,760
kubernetes community looking that is

00:56:11,440 --> 00:56:13,440
like

00:56:11,760 --> 00:56:14,880
that's really weird you're running a

00:56:13,440 --> 00:56:17,680
stateless app

00:56:14,880 --> 00:56:18,480
as something that is explicitly designed

00:56:17,680 --> 00:56:20,400
to manage

00:56:18,480 --> 00:56:22,480
uh stateful workload with a lot more

00:56:20,400 --> 00:56:25,599
control

00:56:22,480 --> 00:56:25,839
and so i i think even the the irini team

00:56:25,599 --> 00:56:28,799
has

00:56:25,839 --> 00:56:30,240
started thinking about this a little bit

00:56:28,799 --> 00:56:32,480
and there's been some discussion on

00:56:30,240 --> 00:56:33,839
on some of the irini and cf for kate's

00:56:32,480 --> 00:56:35,520
issues it's like

00:56:33,839 --> 00:56:38,079
what would it actually be like to back

00:56:35,520 --> 00:56:39,760
these things with a deployment instead

00:56:38,079 --> 00:56:41,760
uh that definitely seems like a much

00:56:39,760 --> 00:56:44,720
more natural

00:56:41,760 --> 00:56:45,200
correspondence of a cf application into

00:56:44,720 --> 00:56:48,400
the

00:56:45,200 --> 00:56:50,720
set of core kubernetes resources um

00:56:48,400 --> 00:56:52,720
but i think that we see some obvious

00:56:50,720 --> 00:56:54,720
then incompatibilities

00:56:52,720 --> 00:56:55,760
with how that would be expressed through

00:56:54,720 --> 00:56:58,079
the cf api

00:56:55,760 --> 00:56:59,520
and then through the cli so maybe as

00:56:58,079 --> 00:57:01,200
part of that it's worth considering like

00:56:59,520 --> 00:57:02,240
what if anything actually needs to

00:57:01,200 --> 00:57:05,680
change

00:57:02,240 --> 00:57:07,839
in the cf-api interface

00:57:05,680 --> 00:57:09,040
uh if they're going to be say arbitrary

00:57:07,839 --> 00:57:12,319
identifiers

00:57:09,040 --> 00:57:16,240
for individual instances coming back

00:57:12,319 --> 00:57:18,079
or and then correspondingly what would

00:57:16,240 --> 00:57:20,480
need to change in the cfcli

00:57:18,079 --> 00:57:22,720
to display and then refer to those

00:57:20,480 --> 00:57:25,119
arbitrary identifiers

00:57:22,720 --> 00:57:26,960
instead of the sequentially indexed ones

00:57:25,119 --> 00:57:28,319
that we have today

00:57:26,960 --> 00:57:30,799
and so again that's where i could see

00:57:28,319 --> 00:57:31,119
like you know there aren't actually i

00:57:30,799 --> 00:57:34,799
think

00:57:31,119 --> 00:57:36,720
that many places where that specific

00:57:34,799 --> 00:57:38,240
instance identifier comes through the

00:57:36,720 --> 00:57:39,680
api or the cli

00:57:38,240 --> 00:57:41,359
so maybe it's actually not a huge amount

00:57:39,680 --> 00:57:43,520
of work to do that

00:57:41,359 --> 00:57:45,760
um through that interface and then

00:57:43,520 --> 00:57:48,400
through the cli code basin interface

00:57:45,760 --> 00:57:49,040
but aren't there are there even spring

00:57:48,400 --> 00:57:51,119
libraries

00:57:49,040 --> 00:57:53,040
actually referring and using that that

00:57:51,119 --> 00:57:54,079
thing i thought there was something in

00:57:53,040 --> 00:57:56,480
like spring cloud

00:57:54,079 --> 00:57:58,240
something so this might influence a

00:57:56,480 --> 00:58:02,000
larger ecosystem

00:57:58,240 --> 00:58:04,799
i mean it might still be under control

00:58:02,000 --> 00:58:06,079
with spring being uh like managed by

00:58:04,799 --> 00:58:09,200
vmware but

00:58:06,079 --> 00:58:10,880
this it seems to escape just the the

00:58:09,200 --> 00:58:14,960
cfcli

00:58:10,880 --> 00:58:16,880
and and cloud controller domain

00:58:14,960 --> 00:58:18,559
yeah absolutely i think that that's the

00:58:16,880 --> 00:58:18,960
other maybe the other part of that is

00:58:18,559 --> 00:58:21,040
that

00:58:18,960 --> 00:58:22,720
we would definitely at least for the the

00:58:21,040 --> 00:58:25,359
immediate future want that to be an

00:58:22,720 --> 00:58:28,400
opt-in behavior instead of a default one

00:58:25,359 --> 00:58:31,119
um uh certainly for existing apps

00:58:28,400 --> 00:58:31,680
uh for compatibility and so also what

00:58:31,119 --> 00:58:33,440
would

00:58:31,680 --> 00:58:35,119
what would the kind of control on that

00:58:33,440 --> 00:58:36,799
look like if if you're an app developer

00:58:35,119 --> 00:58:39,040
saying like all right i'm ready

00:58:36,799 --> 00:58:41,119
i want to try out this deployment thing

00:58:39,040 --> 00:58:41,680
give me some some arbitrary strings as

00:58:41,119 --> 00:58:44,480
ids

00:58:41,680 --> 00:58:45,599
instead of numbers how would they flip

00:58:44,480 --> 00:58:46,240
into that you know would it be an

00:58:45,599 --> 00:58:48,960
annotation

00:58:46,240 --> 00:58:50,240
would we have more deliberate api field

00:58:48,960 --> 00:58:53,040
on an application

00:58:50,240 --> 00:58:54,880
or a process that puts it into that mode

00:58:53,040 --> 00:58:56,319
um where maybe again it's just ignored

00:58:54,880 --> 00:58:57,599
on diego do it goes like i don't know

00:58:56,319 --> 00:59:00,799
what this is

00:58:57,599 --> 00:59:02,400
um but on the kubernetes back end or

00:59:00,799 --> 00:59:04,000
and with irini it would say great let me

00:59:02,400 --> 00:59:07,200
try running this as a deployment and

00:59:04,000 --> 00:59:07,200
reporting that information back

00:59:08,559 --> 00:59:11,599
but yeah very good point john yeah i

00:59:10,720 --> 00:59:13,520
recall some

00:59:11,599 --> 00:59:15,200
like a ruby adapter that also looks at

00:59:13,520 --> 00:59:16,640
that instance index and decides whether

00:59:15,200 --> 00:59:19,839
or not to run migrations

00:59:16,640 --> 00:59:19,839
sorry go ahead

00:59:19,920 --> 00:59:25,680
yeah i was wondering whether value to

00:59:23,359 --> 00:59:26,400
select this opt-in might come from new

00:59:25,680 --> 00:59:30,640
features

00:59:26,400 --> 00:59:33,280
that the deployment based

00:59:30,640 --> 00:59:34,319
feature flag would enable such as more

00:59:33,280 --> 00:59:35,590
more sophisticated

00:59:34,319 --> 00:59:37,839
sophisticated

00:59:35,590 --> 00:59:42,160
[Music]

00:59:37,839 --> 00:59:45,200
either running update

00:59:42,160 --> 00:59:47,680
policies or maybe

00:59:45,200 --> 00:59:48,960
things like placement or stuff like that

00:59:47,680 --> 00:59:50,720
so if there is a trade-off

00:59:48,960 --> 00:59:52,240
a value being bring by this feature

00:59:50,720 --> 00:59:54,319
maybe there would be incentive

00:59:52,240 --> 00:59:56,079
for developers to use it and it's not

00:59:54,319 --> 00:59:58,319
seen as a

00:59:56,079 --> 01:00:01,839
promise break a breaking change but more

00:59:58,319 --> 01:00:01,839
new feature

01:00:03,280 --> 01:00:07,200
yeah definitely that's a great point if

01:00:04,799 --> 01:00:08,640
there's any um any carrots or incentives

01:00:07,200 --> 01:00:09,280
that we could identify to get people to

01:00:08,640 --> 01:00:10,480
try it out

01:00:09,280 --> 01:00:15,839
it's definitely been a problem in the

01:00:10,480 --> 01:00:15,839
past too

01:00:17,280 --> 01:00:21,760
um i know we've just got a few minutes

01:00:19,359 --> 01:00:25,200
left we'll certainly continue discussion

01:00:21,760 --> 01:00:28,319
uh on the document asynchronously and

01:00:25,200 --> 01:00:30,079
then in this forum again in two weeks

01:00:28,319 --> 01:00:31,359
but maybe in the last couple of minutes

01:00:30,079 --> 01:00:33,599
if anyone had something they wanted to

01:00:31,359 --> 01:00:42,880
really urgently discuss

01:00:33,599 --> 01:00:46,880
please bring it up

01:00:42,880 --> 01:00:50,079
yeah if not then as eric suggested let's

01:00:46,880 --> 01:00:52,799
continue discussions um in in

01:00:50,079 --> 01:00:53,920
the next call in two weeks from now i

01:00:52,799 --> 01:00:57,599
think there's

01:00:53,920 --> 01:01:00,799
still quite quite a few things that

01:00:57,599 --> 01:01:01,599
have received feedback so far um and

01:01:00,799 --> 01:01:03,680
then

01:01:01,599 --> 01:01:04,880
as as we've seen daniel has just started

01:01:03,680 --> 01:01:06,559
commenting so

01:01:04,880 --> 01:01:07,920
probably we'll collect a little bit more

01:01:06,559 --> 01:01:11,520
over time and then

01:01:07,920 --> 01:01:14,720
talk again in in two weeks

01:01:11,520 --> 01:01:15,680
thanks for now everybody and talk to you

01:01:14,720 --> 01:01:18,880
soon

01:01:15,680 --> 01:01:25,839
yeah thanks everyone thank you very much

01:01:18,880 --> 01:01:25,839

YouTube URL: https://www.youtube.com/watch?v=nADb1CcOJ88


