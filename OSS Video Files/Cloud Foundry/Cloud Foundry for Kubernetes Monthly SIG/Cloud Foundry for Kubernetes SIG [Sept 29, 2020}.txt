Title: Cloud Foundry for Kubernetes SIG [Sept 29, 2020}
Publication date: 2020-09-29
Playlist: Cloud Foundry for Kubernetes Monthly SIG
Description: 
	
Captions: 
	00:01:12,479 --> 00:01:27,840
tech honey

00:01:36,720 --> 00:01:41,840
you are muted and we are being recorded

00:02:05,280 --> 00:02:09,840
hello jan yeah

00:02:16,000 --> 00:02:19,120
but we are still being recorded already

00:02:18,319 --> 00:02:22,720
is that

00:02:19,120 --> 00:02:25,599
by intent i think it's set up that way

00:02:22,720 --> 00:02:28,640
to prevent that we actually

00:02:25,599 --> 00:02:33,120
like miss to hit the record button okay

00:02:28,640 --> 00:02:37,519
so is that edited afterwards no

00:02:33,120 --> 00:02:39,519
okay by joining this meeting you consent

00:02:37,519 --> 00:02:41,760
to being recorded right from the first

00:02:39,519 --> 00:02:43,120
time

00:02:41,760 --> 00:02:46,640
just have to make sure we don't say any

00:02:43,120 --> 00:02:46,640
rude words or anything libelous

00:02:48,840 --> 00:02:51,840
exactly

00:02:52,000 --> 00:03:04,000
good afternoon hi

00:02:56,080 --> 00:03:06,640
hi dips

00:03:04,000 --> 00:03:06,640
good morning

00:03:07,040 --> 00:03:11,360
hello hello

00:03:14,640 --> 00:03:18,480
and we already have andrew on as our

00:03:16,720 --> 00:03:20,239
first speaker but i guess we'll

00:03:18,480 --> 00:03:22,000
wait for a couple of more minutes for

00:03:20,239 --> 00:03:22,640
people to drop it and blood is also

00:03:22,000 --> 00:03:26,159
there

00:03:22,640 --> 00:03:28,480
cool so all speakers present

00:03:26,159 --> 00:03:28,480
nice

00:03:31,440 --> 00:03:35,360
yeah as i said let's maybe wait another

00:03:33,200 --> 00:03:47,840
minute or two and then

00:03:35,360 --> 00:03:47,840
it sounds good

00:04:20,479 --> 00:04:23,359
good morning good evening

00:04:25,040 --> 00:04:43,840
it's roy that's right

00:04:44,240 --> 00:04:57,840
so while people are dropping in or we'll

00:04:46,800 --> 00:04:57,840
wait another minute and then get started

00:05:55,440 --> 00:06:02,319
okay then for

00:05:59,280 --> 00:06:03,440
past start of the meeting uh welcome

00:06:02,319 --> 00:06:06,400
everybody to

00:06:03,440 --> 00:06:07,759
this week's special interest group call

00:06:06,400 --> 00:06:11,360
for cloud foundry and

00:06:07,759 --> 00:06:14,160
kubernetes this time we actually have

00:06:11,360 --> 00:06:15,520
two topics and therefore speakers we

00:06:14,160 --> 00:06:18,639
have

00:06:15,520 --> 00:06:20,479
andrew talking about the

00:06:18,639 --> 00:06:22,240
topic of image ownership and then we

00:06:20,479 --> 00:06:26,639
have flood

00:06:22,240 --> 00:06:29,520
giving us an update on cube cf 2.5

00:06:26,639 --> 00:06:31,039
um loosely discussed is that like both

00:06:29,520 --> 00:06:34,240
topics should take around

00:06:31,039 --> 00:06:35,919
half an hour so i guess we're going to

00:06:34,240 --> 00:06:40,319
get started with

00:06:35,919 --> 00:06:44,080
andrew cool thank you very much

00:06:40,319 --> 00:06:46,960
i'm andrew whitrock i'm on the

00:06:44,080 --> 00:06:48,479
release integration team under the

00:06:46,960 --> 00:06:51,520
vmware pivotal

00:06:48,479 --> 00:06:54,560
uh organization and

00:06:51,520 --> 00:06:58,240
um i'm one of the engineers that is

00:06:54,560 --> 00:07:00,080
sort of taking charge on this initiative

00:06:58,240 --> 00:07:01,919
which is trying to figure out the

00:07:00,080 --> 00:07:03,120
question of like image ownership

00:07:01,919 --> 00:07:06,000
provenance

00:07:03,120 --> 00:07:07,120
and how can we like build the image uh

00:07:06,000 --> 00:07:10,160
images for the platform

00:07:07,120 --> 00:07:13,120
so the general problem space is

00:07:10,160 --> 00:07:14,000
we have see for kate's as a product

00:07:13,120 --> 00:07:17,280
platform

00:07:14,000 --> 00:07:19,520
and the contract is we bring in

00:07:17,280 --> 00:07:21,199
what amounts to kubernetes yaml from a

00:07:19,520 --> 00:07:24,800
bunch of different sources

00:07:21,199 --> 00:07:27,520
and those sources might be teams

00:07:24,800 --> 00:07:28,639
at uh pivotal might be teams at sap or

00:07:27,520 --> 00:07:31,440
souza or

00:07:28,639 --> 00:07:33,039
community at large or they could be just

00:07:31,440 --> 00:07:35,759
additional

00:07:33,039 --> 00:07:37,360
components that come in through various

00:07:35,759 --> 00:07:40,639
projects that are useful and are

00:07:37,360 --> 00:07:43,280
kubernetes standards so

00:07:40,639 --> 00:07:44,960
we have this aggregation of all these

00:07:43,280 --> 00:07:45,840
kubernetes enamel templates that have

00:07:44,960 --> 00:07:48,879
references to

00:07:45,840 --> 00:07:50,960
images in them and that's all great

00:07:48,879 --> 00:07:52,479
because that is sort of a contract of

00:07:50,960 --> 00:07:53,840
here is the source code that i'm going

00:07:52,479 --> 00:07:57,599
to run or rather

00:07:53,840 --> 00:08:00,319
the compiled code from the projects

00:07:57,599 --> 00:08:01,599
but unfortunately that only gets us as

00:08:00,319 --> 00:08:04,960
far as running it

00:08:01,599 --> 00:08:07,919
because we have what is

00:08:04,960 --> 00:08:09,840
a collection of oci compliant images

00:08:07,919 --> 00:08:11,440
that you can run on the platform

00:08:09,840 --> 00:08:13,199
but we don't know much more about them

00:08:11,440 --> 00:08:13,840
other than any metadata that's already

00:08:13,199 --> 00:08:17,199
on

00:08:13,840 --> 00:08:19,680
the images so concerns like

00:08:17,199 --> 00:08:21,680
uh where did it come from what are the

00:08:19,680 --> 00:08:24,240
base images that were used for this

00:08:21,680 --> 00:08:25,440
what kinds of dependencies are in there

00:08:24,240 --> 00:08:28,000
who built it

00:08:25,440 --> 00:08:28,960
uh how would one go about building these

00:08:28,000 --> 00:08:31,520
images

00:08:28,960 --> 00:08:33,760
aren't really baked in so that's kind of

00:08:31,520 --> 00:08:36,880
the problem space that i'm approaching

00:08:33,760 --> 00:08:40,000
with my image ownership work which is

00:08:36,880 --> 00:08:43,839
given see it for kate's pulling in

00:08:40,000 --> 00:08:47,360
all of these different pieces can i go

00:08:43,839 --> 00:08:49,760
explore out find the images and find out

00:08:47,360 --> 00:08:52,480
how to build them

00:08:49,760 --> 00:08:54,560
so pursuant to that i created up a

00:08:52,480 --> 00:08:57,760
little proposal document that

00:08:54,560 --> 00:09:00,800
has just kind of been circulated closely

00:08:57,760 --> 00:09:02,720
around uh some concerned parties

00:09:00,800 --> 00:09:04,640
but i'm trying to get you know

00:09:02,720 --> 00:09:05,680
increasingly available to people so i'll

00:09:04,640 --> 00:09:08,720
be sending

00:09:05,680 --> 00:09:10,399
that a link out to that to the cf for

00:09:08,720 --> 00:09:12,880
kate's community

00:09:10,399 --> 00:09:13,760
pretty soon to gather some feedback to

00:09:12,880 --> 00:09:15,440
make sure

00:09:13,760 --> 00:09:17,440
that we have all the voices heard of

00:09:15,440 --> 00:09:19,279
people that have

00:09:17,440 --> 00:09:20,959
opinions to contribute because really

00:09:19,279 --> 00:09:21,519
this is going to be a sort of community

00:09:20,959 --> 00:09:24,399
effort

00:09:21,519 --> 00:09:25,120
to make sure that everyone feels

00:09:24,399 --> 00:09:26,720
comfortable

00:09:25,120 --> 00:09:28,240
about the solution and that we can find

00:09:26,720 --> 00:09:31,920
something that works

00:09:28,240 --> 00:09:35,040
fairly well in all situations so

00:09:31,920 --> 00:09:35,600
i can briefly sort of share that on my

00:09:35,040 --> 00:09:38,640
screen

00:09:35,600 --> 00:09:40,959
and then show a little bit of

00:09:38,640 --> 00:09:42,240
what that might look like in a rough

00:09:40,959 --> 00:09:45,279
sort of spike

00:09:42,240 --> 00:09:45,839
that i put together so let me go ahead

00:09:45,279 --> 00:09:50,880
and

00:09:45,839 --> 00:09:51,839
put up the proposal and i can just sort

00:09:50,880 --> 00:09:56,320
of

00:09:51,839 --> 00:09:58,720
walk through some of this um so

00:09:56,320 --> 00:10:00,160
the overview here as i said is we're

00:09:58,720 --> 00:10:02,959
trying to prove the prominence of

00:10:00,160 --> 00:10:04,720
all these build artifacts and the

00:10:02,959 --> 00:10:07,519
primary problem

00:10:04,720 --> 00:10:08,399
uh from the platform concern is we want

00:10:07,519 --> 00:10:12,399
to make sure that

00:10:08,399 --> 00:10:14,320
if a cve or some sort of issue

00:10:12,399 --> 00:10:15,519
with the underlying base images comes

00:10:14,320 --> 00:10:17,760
into the platform

00:10:15,519 --> 00:10:18,560
that we're able to respond quickly and

00:10:17,760 --> 00:10:21,440
issue new

00:10:18,560 --> 00:10:24,320
images for the platform this is

00:10:21,440 --> 00:10:27,839
primarily concerned with that os level

00:10:24,320 --> 00:10:31,120
dependency the

00:10:27,839 --> 00:10:32,399
direct dependency of any of the the cf

00:10:31,120 --> 00:10:34,560
project teams

00:10:32,399 --> 00:10:35,680
products would be more appropriately

00:10:34,560 --> 00:10:38,079
handled by them

00:10:35,680 --> 00:10:38,880
and so communications between all of

00:10:38,079 --> 00:10:41,440
those groups

00:10:38,880 --> 00:10:42,079
uh would be where we would go and then

00:10:41,440 --> 00:10:45,200
issue new

00:10:42,079 --> 00:10:48,399
images from there so

00:10:45,200 --> 00:10:50,160
the kind of top level here is that

00:10:48,399 --> 00:10:52,720
i'm trying to set down some standards

00:10:50,160 --> 00:10:55,120
for like an image specification

00:10:52,720 --> 00:10:56,160
and then best practices when you're

00:10:55,120 --> 00:10:58,399
using

00:10:56,160 --> 00:10:59,680
either of our preferred tools for

00:10:58,399 --> 00:11:02,240
building these images

00:10:59,680 --> 00:11:03,360
those being images built through a

00:11:02,240 --> 00:11:06,560
docker file

00:11:03,360 --> 00:11:07,440
or hopefully increasingly images built

00:11:06,560 --> 00:11:10,480
through the

00:11:07,440 --> 00:11:12,560
cnbs the cloud native build packs

00:11:10,480 --> 00:11:14,480
for those of you that are less familiar

00:11:12,560 --> 00:11:16,720
with that you can use

00:11:14,480 --> 00:11:18,720
a tool called pack with these cloud

00:11:16,720 --> 00:11:21,839
native build packs that are created

00:11:18,720 --> 00:11:24,320
by heroku the

00:11:21,839 --> 00:11:26,720
cloud foundry foundation members and

00:11:24,320 --> 00:11:29,600
pretty very much anyone could build

00:11:26,720 --> 00:11:30,079
a cnb if they wanted to but they're the

00:11:29,600 --> 00:11:32,880
same

00:11:30,079 --> 00:11:34,079
idea of a build pack just rebuilt in a

00:11:32,880 --> 00:11:35,839
new oci

00:11:34,079 --> 00:11:38,079
compliant way where it detects

00:11:35,839 --> 00:11:40,880
everything and builds it for you

00:11:38,079 --> 00:11:42,399
so there those are two main paths that

00:11:40,880 --> 00:11:45,839
we want to

00:11:42,399 --> 00:11:47,600
be concerned with so if we move on a

00:11:45,839 --> 00:11:48,560
little bit there's sort of a chronology

00:11:47,600 --> 00:11:50,160
roadmap and

00:11:48,560 --> 00:11:51,920
i apologize this is small let me

00:11:50,160 --> 00:11:54,399
increase the size

00:11:51,920 --> 00:11:56,720
just notice that uh here's sort of a

00:11:54,399 --> 00:11:59,120
chronology roadmap of

00:11:56,720 --> 00:12:00,959
where i want to go with this so if

00:11:59,120 --> 00:12:02,800
you're thinking about how you can

00:12:00,959 --> 00:12:04,240
offer your feedback this is kind of

00:12:02,800 --> 00:12:07,360
where i'm thinking

00:12:04,240 --> 00:12:07,360
the various steps will go

00:12:07,760 --> 00:12:12,639
the first bit is we kind of need to set

00:12:10,560 --> 00:12:15,040
down an image specification

00:12:12,639 --> 00:12:16,880
to sort of make sure that everyone's

00:12:15,040 --> 00:12:20,079
aligned so that we can build

00:12:16,880 --> 00:12:24,160
something around that that lets us

00:12:20,079 --> 00:12:27,200
in a programmatic way build images

00:12:24,160 --> 00:12:29,360
uh after that we have to have something

00:12:27,200 --> 00:12:31,440
around source discovery because as i

00:12:29,360 --> 00:12:34,720
mentioned the contract is

00:12:31,440 --> 00:12:37,360
between ciprocates and these

00:12:34,720 --> 00:12:38,000
kubernetes yaml releases or templates

00:12:37,360 --> 00:12:40,639
that

00:12:38,000 --> 00:12:42,320
build kubernetes yml and then between

00:12:40,639 --> 00:12:44,720
that and the images

00:12:42,320 --> 00:12:46,720
so we need a way to actually discover

00:12:44,720 --> 00:12:49,839
where all of the source code lives if we

00:12:46,720 --> 00:12:52,959
want to rebuild these images

00:12:49,839 --> 00:12:54,560
after that which are more the once we've

00:12:52,959 --> 00:12:57,279
got the ground work down

00:12:54,560 --> 00:12:58,160
uh the thought is more around the build

00:12:57,279 --> 00:13:00,320
process

00:12:58,160 --> 00:13:02,480
and integration so making it

00:13:00,320 --> 00:13:05,440
standardized and really easy for

00:13:02,480 --> 00:13:08,000
anyone really to build these images for

00:13:05,440 --> 00:13:10,160
themselves if you wanted to

00:13:08,000 --> 00:13:11,440
move the base image to something else

00:13:10,160 --> 00:13:14,399
that is still within

00:13:11,440 --> 00:13:16,000
sort of the realm of supported stuff

00:13:14,399 --> 00:13:16,480
pretty similar but maybe customized to

00:13:16,000 --> 00:13:19,680
your needs

00:13:16,480 --> 00:13:20,160
you would be able to do so so that's

00:13:19,680 --> 00:13:23,279
kind of

00:13:20,160 --> 00:13:24,320
where we're thinking about so if i kind

00:13:23,279 --> 00:13:27,680
of move down here

00:13:24,320 --> 00:13:29,360
uh this is rough english language

00:13:27,680 --> 00:13:31,200
throughout most of this proposal to just

00:13:29,360 --> 00:13:33,760
sort of like not get

00:13:31,200 --> 00:13:35,680
too much into the implementation details

00:13:33,760 --> 00:13:38,079
which can be fleshed out but

00:13:35,680 --> 00:13:38,720
we have sort of an image specification

00:13:38,079 --> 00:13:42,160
so

00:13:38,720 --> 00:13:43,279
your docker-based images at a very least

00:13:42,160 --> 00:13:45,680
we kind of

00:13:43,279 --> 00:13:47,519
need to have the oci image spec

00:13:45,680 --> 00:13:48,399
annotations so your standard source and

00:13:47,519 --> 00:13:50,000
revision

00:13:48,399 --> 00:13:51,839
that are becoming a lot more popular

00:13:50,000 --> 00:13:56,160
across uh basically

00:13:51,839 --> 00:13:58,720
everywhere that uses combined images

00:13:56,160 --> 00:13:59,600
dockerfile should have parameterized

00:13:58,720 --> 00:14:01,040
arguments

00:13:59,600 --> 00:14:03,040
like build time arguments and they

00:14:01,040 --> 00:14:06,240
should have sensible defaults

00:14:03,040 --> 00:14:08,800
uh the base image should be

00:14:06,240 --> 00:14:09,600
parameterized and then we should have an

00:14:08,800 --> 00:14:12,560
annotation

00:14:09,600 --> 00:14:13,040
that says that it was used for you know

00:14:12,560 --> 00:14:16,720
this

00:14:13,040 --> 00:14:20,560
image was used for uh building this

00:14:16,720 --> 00:14:22,480
and then additionally i'd like to have a

00:14:20,560 --> 00:14:24,480
component annotation label just to say

00:14:22,480 --> 00:14:27,600
like hey this is for this component so

00:14:24,480 --> 00:14:30,720
we can associate them a bit more

00:14:27,600 --> 00:14:32,720
on the pack side of the house the

00:14:30,720 --> 00:14:34,720
sort of minimums becomes a lot easier

00:14:32,720 --> 00:14:36,639
but the minimums are kind of

00:14:34,720 --> 00:14:38,480
use the quad foundry or potato build

00:14:36,639 --> 00:14:42,320
packs as a base at least for

00:14:38,480 --> 00:14:44,320
the safe for kate's as a

00:14:42,320 --> 00:14:45,920
baseline product you would be free to

00:14:44,320 --> 00:14:49,040
extend that if you wanted to

00:14:45,920 --> 00:14:52,160
but for the platform that the

00:14:49,040 --> 00:14:54,720
safer kate's project produces um

00:14:52,160 --> 00:14:56,320
that would be the idea and also ensure

00:14:54,720 --> 00:14:57,760
there's source and revision annotations

00:14:56,320 --> 00:15:00,800
present so that we can

00:14:57,760 --> 00:15:03,519
go explore the source

00:15:00,800 --> 00:15:04,399
so with all that said uh there are kind

00:15:03,519 --> 00:15:08,240
of

00:15:04,399 --> 00:15:08,800
two main uh pieces of specifying some of

00:15:08,240 --> 00:15:12,160
this

00:15:08,800 --> 00:15:15,120
that i kind of want to cover

00:15:12,160 --> 00:15:15,519
which would be source discovery proposal

00:15:15,120 --> 00:15:18,480
a

00:15:15,519 --> 00:15:20,320
and source discovery proposal b which

00:15:18,480 --> 00:15:21,199
the main thrust of those without reading

00:15:20,320 --> 00:15:24,399
all of this

00:15:21,199 --> 00:15:27,040
text is that we can either

00:15:24,399 --> 00:15:29,279
put a whole bunch of this metadata in

00:15:27,040 --> 00:15:32,320
sort of a manifest type file

00:15:29,279 --> 00:15:36,000
that lives inside of the

00:15:32,320 --> 00:15:39,360
the release repositories which would

00:15:36,000 --> 00:15:40,959
be where all this kubernetes yaml lives

00:15:39,360 --> 00:15:42,720
so you would have all the ammo that

00:15:40,959 --> 00:15:43,600
reference references the images and then

00:15:42,720 --> 00:15:46,079
you would have

00:15:43,600 --> 00:15:47,440
a file that basically says like here's

00:15:46,079 --> 00:15:49,199
all the metadata you need

00:15:47,440 --> 00:15:51,440
to build all of these images that are

00:15:49,199 --> 00:15:55,040
present

00:15:51,440 --> 00:15:58,399
the sort of proposal b

00:15:55,040 --> 00:16:01,920
uh actually sort of moves

00:15:58,399 --> 00:16:05,040
some of that information over onto

00:16:01,920 --> 00:16:06,880
the actual images themselves so you

00:16:05,040 --> 00:16:09,279
would have a minimal

00:16:06,880 --> 00:16:11,839
sort of manifest of the images that said

00:16:09,279 --> 00:16:13,680
basically here are the images

00:16:11,839 --> 00:16:16,720
and they were built with this method and

00:16:13,680 --> 00:16:18,240
you can basically find the source here

00:16:16,720 --> 00:16:20,240
but then all of the build arguments

00:16:18,240 --> 00:16:22,480
would be baked into the image itself

00:16:20,240 --> 00:16:23,440
so you would sort of follow the chain

00:16:22,480 --> 00:16:27,360
from cf

00:16:23,440 --> 00:16:29,600
for kate's to the individual project

00:16:27,360 --> 00:16:31,040
to a file that said here's the images

00:16:29,600 --> 00:16:33,519
and it would fan out and you'd

00:16:31,040 --> 00:16:36,240
go to those image references to inspect

00:16:33,519 --> 00:16:38,560
them to see how they were built so

00:16:36,240 --> 00:16:39,920
either either way could potentially work

00:16:38,560 --> 00:16:42,160
and there's probably also

00:16:39,920 --> 00:16:43,839
other potentials that i'd love to hear

00:16:42,160 --> 00:16:46,639
about from people

00:16:43,839 --> 00:16:49,040
but the the main thrust is i would like

00:16:46,639 --> 00:16:53,040
to be able to just follow the chain

00:16:49,040 --> 00:16:54,880
to the image reference and along the way

00:16:53,040 --> 00:16:58,320
collect all the information i need

00:16:54,880 --> 00:16:59,759
to rebuild that image i apologize for

00:16:58,320 --> 00:17:01,519
that loud noise that maybe everyone

00:16:59,759 --> 00:17:04,319
heard

00:17:01,519 --> 00:17:05,679
so the rest of this is sort of uh

00:17:04,319 --> 00:17:08,400
getting into

00:17:05,679 --> 00:17:10,160
the build process uh integration and

00:17:08,400 --> 00:17:12,400
then a few exemplars

00:17:10,160 --> 00:17:13,439
which are just sort of um little

00:17:12,400 --> 00:17:15,520
examples

00:17:13,439 --> 00:17:16,720
of like here you would see a docker file

00:17:15,520 --> 00:17:19,280
and you have

00:17:16,720 --> 00:17:22,079
some args you have the sensible defaults

00:17:19,280 --> 00:17:25,839
and then you have some labels

00:17:22,079 --> 00:17:28,079
here the secondary proposal

00:17:25,839 --> 00:17:29,200
the pros will be would be you'd have a

00:17:28,079 --> 00:17:32,880
json blob

00:17:29,200 --> 00:17:33,520
that gets written and it on to a docker

00:17:32,880 --> 00:17:36,320
label

00:17:33,520 --> 00:17:37,360
so that looks a little messy in the

00:17:36,320 --> 00:17:39,600
docker file

00:17:37,360 --> 00:17:42,240
but is pretty parsable especially

00:17:39,600 --> 00:17:44,080
programmatically

00:17:42,240 --> 00:17:45,679
i kind of define some of the terms here

00:17:44,080 --> 00:17:47,679
just running through

00:17:45,679 --> 00:17:48,720
when you get your hands on this document

00:17:47,679 --> 00:17:50,960
for more uh

00:17:48,720 --> 00:17:52,799
detailed consideration this is just kind

00:17:50,960 --> 00:17:54,799
of how everything looks

00:17:52,799 --> 00:17:56,559
i went into some of the considerations

00:17:54,799 --> 00:17:59,600
and build requirements

00:17:56,559 --> 00:18:01,840
so that's the main thrust this document

00:17:59,600 --> 00:18:03,840
like i said i'll be trying to get it out

00:18:01,840 --> 00:18:06,400
to anyone that wants to see it that's

00:18:03,840 --> 00:18:10,320
involved in the space

00:18:06,400 --> 00:18:12,559
hopefully within the next couple days

00:18:10,320 --> 00:18:13,840
so that we can get some open discussion

00:18:12,559 --> 00:18:14,480
and i'm going to link it back to the

00:18:13,840 --> 00:18:18,000
github

00:18:14,480 --> 00:18:18,000
to make sure we have some visibility

00:18:18,559 --> 00:18:23,280
so in practice it might be better to

00:18:21,840 --> 00:18:26,720
actually look at

00:18:23,280 --> 00:18:27,600
kind of where i'm approaching the safer

00:18:26,720 --> 00:18:30,160
case repo

00:18:27,600 --> 00:18:32,240
and kind of how that relates and how

00:18:30,160 --> 00:18:35,760
i've explored this problem

00:18:32,240 --> 00:18:39,440
so basically uh i

00:18:35,760 --> 00:18:40,480
forked everything in uh super gates more

00:18:39,440 --> 00:18:43,120
or less

00:18:40,480 --> 00:18:44,160
so this is basically cfrcats with an

00:18:43,120 --> 00:18:47,760
additional

00:18:44,160 --> 00:18:51,600
um component packages uh directory here

00:18:47,760 --> 00:18:53,919
but it's otherwise pretty much the same

00:18:51,600 --> 00:18:55,600
so i just wanted to make a single repo

00:18:53,919 --> 00:18:58,880
so that i could explore some of this

00:18:55,600 --> 00:19:00,480
and sort of get a demo-able thing i

00:18:58,880 --> 00:19:02,160
don't have any of the uh

00:19:00,480 --> 00:19:03,520
the machinery around automatically

00:19:02,160 --> 00:19:06,400
building any of these

00:19:03,520 --> 00:19:07,840
yet but i just kind of um submoduled

00:19:06,400 --> 00:19:10,880
everything into this

00:19:07,840 --> 00:19:12,480
component packages directory and kind of

00:19:10,880 --> 00:19:15,840
illustrates some of the problem

00:19:12,480 --> 00:19:18,400
that hopefully people can understand

00:19:15,840 --> 00:19:19,039
the journey of how i got here so if we

00:19:18,400 --> 00:19:22,320
take

00:19:19,039 --> 00:19:23,200
cappy kate's release cappycat's release

00:19:22,320 --> 00:19:25,120
is

00:19:23,200 --> 00:19:26,960
like i said it's a full project it's a

00:19:25,120 --> 00:19:30,080
thing that says

00:19:26,960 --> 00:19:31,840
hey i have all of these pieces you can

00:19:30,080 --> 00:19:34,880
drop this onto a kubernetes cluster with

00:19:31,840 --> 00:19:37,760
cf4kates and you will get

00:19:34,880 --> 00:19:38,880
all the bits that they the teams behind

00:19:37,760 --> 00:19:41,280
it have been working on

00:19:38,880 --> 00:19:42,720
to make the product work and so if you

00:19:41,280 --> 00:19:44,160
look at this

00:19:42,720 --> 00:19:46,080
uh there's a bunch of good stuff in here

00:19:44,160 --> 00:19:49,120
but i

00:19:46,080 --> 00:19:49,919
don't have like just directly here's all

00:19:49,120 --> 00:19:52,240
the images

00:19:49,919 --> 00:19:53,919
there's i created this file myself so

00:19:52,240 --> 00:19:56,880
this didn't actually exist before

00:19:53,919 --> 00:19:58,960
but so i had like to look in here

00:19:56,880 --> 00:20:02,400
there's like a docker file

00:19:58,960 --> 00:20:02,400
um i could

00:20:03,200 --> 00:20:09,600
go into here and

00:20:06,400 --> 00:20:10,559
like you know i could like do a tree to

00:20:09,600 --> 00:20:13,760
try to find doc

00:20:10,559 --> 00:20:14,320
files like grab for docker like all this

00:20:13,760 --> 00:20:16,880
stuff

00:20:14,320 --> 00:20:18,400
and i can like try to find them and that

00:20:16,880 --> 00:20:20,520
might give me some confidence that i

00:20:18,400 --> 00:20:21,760
found some things but it's not really

00:20:20,520 --> 00:20:23,760
[Music]

00:20:21,760 --> 00:20:25,200
going to help me that much and i also

00:20:23,760 --> 00:20:26,799
just don't know where they are

00:20:25,200 --> 00:20:28,240
so if you've ever done like a docker

00:20:26,799 --> 00:20:31,120
build um

00:20:28,240 --> 00:20:32,400
generally the defaults are like your cd

00:20:31,120 --> 00:20:34,320
into the directory and that's your

00:20:32,400 --> 00:20:37,039
context and you assume there's a

00:20:34,320 --> 00:20:37,679
file there called docker file at the

00:20:37,039 --> 00:20:40,159
root

00:20:37,679 --> 00:20:41,600
but that may not be the case right it

00:20:40,159 --> 00:20:43,440
might be named foo

00:20:41,600 --> 00:20:44,720
it might be in a completely different

00:20:43,440 --> 00:20:45,679
project it might be in different

00:20:44,720 --> 00:20:47,120
directory

00:20:45,679 --> 00:20:50,720
the context might be the root of the

00:20:47,120 --> 00:20:53,280
repo but the doctor files in here

00:20:50,720 --> 00:20:54,640
so they're kind of scattered so here's

00:20:53,280 --> 00:20:57,600
one

00:20:54,640 --> 00:20:59,360
there's source and then cf api

00:20:57,600 --> 00:21:00,960
controllers and then there's the docker

00:20:59,360 --> 00:21:02,720
file here

00:21:00,960 --> 00:21:04,720
so already there's a couple things that

00:21:02,720 --> 00:21:07,280
i'm i'm

00:21:04,720 --> 00:21:09,679
you know okay thinking about where where

00:21:07,280 --> 00:21:12,159
are these docker files

00:21:09,679 --> 00:21:14,080
and i've noticed that there's also some

00:21:12,159 --> 00:21:17,280
other images

00:21:14,080 --> 00:21:20,640
in here so if we

00:21:17,280 --> 00:21:25,120
do something like

00:21:20,640 --> 00:21:26,960
this uh you'll see there's like

00:21:25,120 --> 00:21:28,559
different there's several different

00:21:26,960 --> 00:21:30,080
images here there's not just like the

00:21:28,559 --> 00:21:32,640
three docker files

00:21:30,080 --> 00:21:33,600
so it's i'm having to like track down

00:21:32,640 --> 00:21:36,000
these different

00:21:33,600 --> 00:21:37,600
um docker files or images if they're

00:21:36,000 --> 00:21:39,760
built with something else

00:21:37,600 --> 00:21:41,039
uh so you can see without going into too

00:21:39,760 --> 00:21:43,039
much detail like

00:21:41,039 --> 00:21:44,799
here are some of the problems with just

00:21:43,039 --> 00:21:47,039
trying to find the docker file i don't

00:21:44,799 --> 00:21:50,159
want anything else

00:21:47,039 --> 00:21:51,840
so um i

00:21:50,159 --> 00:21:53,760
started tracking down all of the images

00:21:51,840 --> 00:21:57,840
and cataloging them

00:21:53,760 --> 00:22:00,720
and so here is kind of the rough

00:21:57,840 --> 00:22:01,120
super rough example uh that i did by

00:22:00,720 --> 00:22:04,080
just

00:22:01,120 --> 00:22:04,960
exploring what a first pass that this

00:22:04,080 --> 00:22:07,600
images

00:22:04,960 --> 00:22:09,120
manifest would look like just say like

00:22:07,600 --> 00:22:12,159
here's the project

00:22:09,120 --> 00:22:15,280
here's where you find it then

00:22:12,159 --> 00:22:16,480
here is a an array of images and so you

00:22:15,280 --> 00:22:17,919
have something like here's the name

00:22:16,480 --> 00:22:20,159
which is the ref

00:22:17,919 --> 00:22:22,080
not fully qualified just the the name

00:22:20,159 --> 00:22:25,200
that it's usually referred to

00:22:22,080 --> 00:22:25,679
as what type of build it's going to be

00:22:25,200 --> 00:22:28,720
then

00:22:25,679 --> 00:22:30,880
like where do i find the source

00:22:28,720 --> 00:22:32,240
so that can be in the case of cloud

00:22:30,880 --> 00:22:35,679
controller

00:22:32,240 --> 00:22:38,880
it's actually not in this repo it's

00:22:35,679 --> 00:22:41,200
uh in a separate repo and

00:22:38,880 --> 00:22:42,720
it's not submoduled in so i need to know

00:22:41,200 --> 00:22:44,559
where that remote source is

00:22:42,720 --> 00:22:46,400
because it's not tied another way other

00:22:44,559 --> 00:22:47,520
than you might be able to inspect the

00:22:46,400 --> 00:22:50,559
image and find

00:22:47,520 --> 00:22:54,080
that on there um so then there's

00:22:50,559 --> 00:22:54,799
the sort of uh local cell so both of

00:22:54,080 --> 00:22:57,280
these are

00:22:54,799 --> 00:22:57,919
pack generated um but this would be the

00:22:57,280 --> 00:23:01,520
local

00:22:57,919 --> 00:23:04,559
source is in source cf api controllers

00:23:01,520 --> 00:23:06,159
uh make it easy this one i just kind of

00:23:04,559 --> 00:23:09,679
put a comment here which is

00:23:06,159 --> 00:23:12,320
it's a cloud native build pack image so

00:23:09,679 --> 00:23:12,799
uh we would probably be using those more

00:23:12,320 --> 00:23:15,440
from

00:23:12,799 --> 00:23:17,120
the cnb team rather than rebuilding them

00:23:15,440 --> 00:23:20,960
but that could be up

00:23:17,120 --> 00:23:23,760
for debate uh there's like

00:23:20,960 --> 00:23:24,960
cappy which is a dockerfile local anyway

00:23:23,760 --> 00:23:26,960
i don't need to get

00:23:24,960 --> 00:23:29,360
too far into the weeds on most of this

00:23:26,960 --> 00:23:31,039
but i wanted to kind of point out that

00:23:29,360 --> 00:23:33,760
as i walked through these i was looking

00:23:31,039 --> 00:23:34,720
at like me doing my due diligence just

00:23:33,760 --> 00:23:36,799
trying to

00:23:34,720 --> 00:23:38,240
reason about it from the point of view

00:23:36,799 --> 00:23:42,320
of not asking

00:23:38,240 --> 00:23:44,480
the team and just digging on my own

00:23:42,320 --> 00:23:46,480
and so for things like these two i see

00:23:44,480 --> 00:23:49,600
the image

00:23:46,480 --> 00:23:50,799
i don't know where the source is like i

00:23:49,600 --> 00:23:53,120
can't even raise a bit

00:23:50,799 --> 00:23:54,880
about where it is i looked at the images

00:23:53,120 --> 00:23:58,240
and they don't have it annotated either

00:23:54,880 --> 00:24:00,400
so uh i would be

00:23:58,240 --> 00:24:02,159
unable to actually build these images at

00:24:00,400 --> 00:24:04,640
this point in time

00:24:02,159 --> 00:24:05,679
which is a little bit of an um an issue

00:24:04,640 --> 00:24:08,799
when you're trying to say

00:24:05,679 --> 00:24:11,520
hey uh i know this is built on

00:24:08,799 --> 00:24:12,080
you know ubuntu whatever and there's a

00:24:11,520 --> 00:24:14,080
cv

00:24:12,080 --> 00:24:15,600
i want to push out new images

00:24:14,080 --> 00:24:18,799
immediately

00:24:15,600 --> 00:24:19,520
so uh trying to tighten that loop so

00:24:18,799 --> 00:24:23,200
that

00:24:19,520 --> 00:24:26,320
we can uh avoid

00:24:23,200 --> 00:24:27,919
bothering some of the leaf nodes about

00:24:26,320 --> 00:24:30,400
concerns that are really more core to

00:24:27,919 --> 00:24:32,960
the platform

00:24:30,400 --> 00:24:34,559
so hopefully that kind of gives you an

00:24:32,960 --> 00:24:37,200
idea of where i'm going here it's

00:24:34,559 --> 00:24:38,000
by no means complete uh there might be

00:24:37,200 --> 00:24:40,000
things like

00:24:38,000 --> 00:24:41,279
uh build time arcs that you would want

00:24:40,000 --> 00:24:44,880
to include

00:24:41,279 --> 00:24:47,520
because uh people might be changing

00:24:44,880 --> 00:24:48,240
something like the base image or some of

00:24:47,520 --> 00:24:51,760
the images

00:24:48,240 --> 00:24:55,520
uh you'll see um have

00:24:51,760 --> 00:24:57,279
like a uh the git sha

00:24:55,520 --> 00:24:58,640
that is wrapped in the conditional

00:24:57,279 --> 00:24:59,679
statement to like fail if you don't have

00:24:58,640 --> 00:25:02,240
the get sha

00:24:59,679 --> 00:25:03,360
which is always nice but uh things

00:25:02,240 --> 00:25:04,080
things that you kind of want to think

00:25:03,360 --> 00:25:06,640
about

00:25:04,080 --> 00:25:07,919
um are these additional build orgs and

00:25:06,640 --> 00:25:12,080
that could apply to both

00:25:07,919 --> 00:25:14,159
cat pack and docker files

00:25:12,080 --> 00:25:15,520
so that's additional metadata that might

00:25:14,159 --> 00:25:19,200
go in here or it might go

00:25:15,520 --> 00:25:22,559
on the image uh through the

00:25:19,200 --> 00:25:27,520
the dockerfile labels

00:25:22,559 --> 00:25:30,720
um so let's see if i can pull up

00:25:27,520 --> 00:25:32,320
yeah um here's just some of the image

00:25:30,720 --> 00:25:35,360
parameterization

00:25:32,320 --> 00:25:38,559
arguments all that stuff uh

00:25:35,360 --> 00:25:42,960
so without going

00:25:38,559 --> 00:25:44,720
more into that um i kind of want to make

00:25:42,960 --> 00:25:46,799
sure that with my time

00:25:44,720 --> 00:25:48,240
i leave it open for people to ask some

00:25:46,799 --> 00:25:51,279
questions this isn't

00:25:48,240 --> 00:25:53,679
just uh let me talk at you this is also

00:25:51,279 --> 00:25:56,720
another first pass at offering

00:25:53,679 --> 00:25:58,720
uh some thoughts to direct where i go

00:25:56,720 --> 00:26:01,600
from here

00:25:58,720 --> 00:26:10,960
so anyone that wants to ask a question

00:26:01,600 --> 00:26:13,200
go ahead now

00:26:10,960 --> 00:26:14,720
have any context because i'm really out

00:26:13,200 --> 00:26:15,440
of the loop and not actively working on

00:26:14,720 --> 00:26:17,360
this

00:26:15,440 --> 00:26:19,200
are some of these things discoverable

00:26:17,360 --> 00:26:21,760
through the ci folder

00:26:19,200 --> 00:26:22,559
is there a big uber concourse pipeline

00:26:21,760 --> 00:26:24,000
that's

00:26:22,559 --> 00:26:27,279
building all of these things and you

00:26:24,000 --> 00:26:27,279
could piece it together from there

00:26:27,440 --> 00:26:31,120
currently no uh the the current flow and

00:26:29,840 --> 00:26:33,600
i guess this is

00:26:31,120 --> 00:26:35,279
information that i probably should have

00:26:33,600 --> 00:26:38,799
gone over a little bit beforehand

00:26:35,279 --> 00:26:42,640
the current way these images are built

00:26:38,799 --> 00:26:45,919
is that the individual cf project teams

00:26:42,640 --> 00:26:46,720
and additional projects that are built

00:26:45,919 --> 00:26:48,640
by

00:26:46,720 --> 00:26:49,919
various other teams and community

00:26:48,640 --> 00:26:52,320
members

00:26:49,919 --> 00:26:55,279
they build these images and they publish

00:26:52,320 --> 00:26:58,000
them and then we pull them in

00:26:55,279 --> 00:26:58,720
and at that point they're pretty much

00:26:58,000 --> 00:27:01,760
used

00:26:58,720 --> 00:27:04,080
directly in cfricate's

00:27:01,760 --> 00:27:06,320
and there's there's a couple images that

00:27:04,080 --> 00:27:09,279
we pull in ourselves but we're mostly

00:27:06,320 --> 00:27:11,679
just allowing them to flow in through

00:27:09,279 --> 00:27:14,880
those project themes

00:27:11,679 --> 00:27:17,039
and this is

00:27:14,880 --> 00:27:18,880
fairly workable most of the time but

00:27:17,039 --> 00:27:21,279
like i said

00:27:18,880 --> 00:27:23,360
we would like to be able to have a

00:27:21,279 --> 00:27:27,039
little bit tighter control

00:27:23,360 --> 00:27:28,559
over what images actually contain

00:27:27,039 --> 00:27:30,640
and have that confidence and be able to

00:27:28,559 --> 00:27:32,720
pass that confidence on to

00:27:30,640 --> 00:27:34,880
the community that says here all these

00:27:32,720 --> 00:27:37,039
dependencies if you're concerned

00:27:34,880 --> 00:27:38,159
like here's here's all the information

00:27:37,039 --> 00:27:41,120
and part of the

00:27:38,159 --> 00:27:41,760
way we're doing that is the newly open

00:27:41,120 --> 00:27:45,440
source tool

00:27:41,760 --> 00:27:47,440
dependency labeler so we're trying to

00:27:45,440 --> 00:27:48,640
put all that information on the image

00:27:47,440 --> 00:27:48,880
and one of the things we need for that

00:27:48,640 --> 00:27:50,559
is

00:27:48,880 --> 00:27:53,200
the actual source we need to point to

00:27:50,559 --> 00:27:55,679
the source because it actually scans

00:27:53,200 --> 00:27:57,120
not only the base image for the run but

00:27:55,679 --> 00:28:00,320
it also scans the

00:27:57,120 --> 00:28:01,279
source code for any any like package

00:28:00,320 --> 00:28:03,919
managers

00:28:01,279 --> 00:28:05,840
uh dependency managers to actually apply

00:28:03,919 --> 00:28:08,880
all those labels

00:28:05,840 --> 00:28:11,279
um so yeah that that's kind of the flow

00:28:08,880 --> 00:28:11,919
is that we're just taking them at the

00:28:11,279 --> 00:28:15,120
moment

00:28:11,919 --> 00:28:16,880
so there's no big giant pipeline to be

00:28:15,120 --> 00:28:19,760
able to reason about this

00:28:16,880 --> 00:28:20,799
that would have to kind of be built from

00:28:19,760 --> 00:28:22,799
the information

00:28:20,799 --> 00:28:24,720
i'm gathering here because the idea is

00:28:22,799 --> 00:28:26,880
that i should be able to take c

00:28:24,720 --> 00:28:29,679
for gates i should be able to dive into

00:28:26,880 --> 00:28:32,720
the the projects that are represented

00:28:29,679 --> 00:28:34,159
in this vendor yaml which if i haven't

00:28:32,720 --> 00:28:37,120
covered vendor email but it's

00:28:34,159 --> 00:28:38,399
it's essentially a dependency management

00:28:37,120 --> 00:28:41,520
tool for

00:28:38,399 --> 00:28:43,039
uh kind of like get sub modules but a

00:28:41,520 --> 00:28:46,720
little bit more flexible no

00:28:43,039 --> 00:28:48,000
less get sub modules

00:28:46,720 --> 00:28:49,760
so that brings in the product so i

00:28:48,000 --> 00:28:52,480
should be able to dive into

00:28:49,760 --> 00:28:53,279
any of this information and then track

00:28:52,480 --> 00:28:56,640
down

00:28:53,279 --> 00:28:59,440
the images uh from those projects

00:28:56,640 --> 00:29:00,559
and then build them um so in an ideal

00:28:59,440 --> 00:29:02,159
world

00:29:00,559 --> 00:29:03,760
uh release integration would be

00:29:02,159 --> 00:29:06,000
rebuilding all of the images

00:29:03,760 --> 00:29:06,960
by following that chain rather than just

00:29:06,000 --> 00:29:09,200
having

00:29:06,960 --> 00:29:10,960
uh arcane knowledge that this is where

00:29:09,200 --> 00:29:13,520
everything is and just having a

00:29:10,960 --> 00:29:15,679
pipeline that has has all this built

00:29:13,520 --> 00:29:17,760
into it it should be more discoverable

00:29:15,679 --> 00:29:19,360
a little more programmatic so that

00:29:17,760 --> 00:29:21,760
everything is treated the same rather

00:29:19,360 --> 00:29:24,640
than having sort of bespoke

00:29:21,760 --> 00:29:24,640
builds for each one

00:29:25,200 --> 00:29:29,200
super valuable for uh regulated

00:29:28,080 --> 00:29:30,640
industries and governments and

00:29:29,200 --> 00:29:32,480
militaries and things like that being

00:29:30,640 --> 00:29:34,080
able to trace everything the provenance

00:29:32,480 --> 00:29:35,120
of everything that uh is part of the

00:29:34,080 --> 00:29:38,559
platform

00:29:35,120 --> 00:29:40,720
yep that is the hope

00:29:38,559 --> 00:29:42,080
i'm just wondering if uh oh go ahead

00:29:40,720 --> 00:29:45,440
glad

00:29:42,080 --> 00:29:46,640
yeah thanks uh will we be able to build

00:29:45,440 --> 00:29:49,440
the docker files

00:29:46,640 --> 00:29:50,080
without extra tooling like uh docker

00:29:49,440 --> 00:29:55,520
build

00:29:50,080 --> 00:29:59,120
or using just um you know regular

00:29:55,520 --> 00:30:01,679
image building tools uh

00:29:59,120 --> 00:30:02,880
the idea would be at least the docker

00:30:01,679 --> 00:30:05,279
based

00:30:02,880 --> 00:30:06,080
images you would be able to build uh

00:30:05,279 --> 00:30:08,480
just

00:30:06,080 --> 00:30:09,200
with your plain docker build you might

00:30:08,480 --> 00:30:11,200
have to do

00:30:09,200 --> 00:30:12,240
a little bit more work to parse out some

00:30:11,200 --> 00:30:15,039
of the labels

00:30:12,240 --> 00:30:15,440
that might contain some of that metadata

00:30:15,039 --> 00:30:16,880
uh

00:30:15,440 --> 00:30:18,799
which you know might be a json

00:30:16,880 --> 00:30:20,559
stringified blob

00:30:18,799 --> 00:30:22,559
or you might have to do some parsing of

00:30:20,559 --> 00:30:25,440
a yaml on the manifest

00:30:22,559 --> 00:30:26,559
but for the docker specific builds i

00:30:25,440 --> 00:30:28,399
don't

00:30:26,559 --> 00:30:29,840
intend that you would need anything

00:30:28,399 --> 00:30:32,080
additional

00:30:29,840 --> 00:30:33,520
for the pack based images because

00:30:32,080 --> 00:30:36,720
they're built

00:30:33,520 --> 00:30:39,520
via the pack cli and

00:30:36,720 --> 00:30:40,480
cnbs cloud native build packs you would

00:30:39,520 --> 00:30:43,760
need that tool

00:30:40,480 --> 00:30:46,080
uh to build them uh but

00:30:43,760 --> 00:30:46,960
cool that's yeah i meant you can get it

00:30:46,080 --> 00:30:49,919
docker impact

00:30:46,960 --> 00:30:50,720
yeah sorry yeah i meant docker and pack

00:30:49,919 --> 00:30:54,080
yeah these two

00:30:50,720 --> 00:30:57,120
these two tools yeah um

00:30:54,080 --> 00:30:58,880
if you want that the dependency label

00:30:57,120 --> 00:31:00,880
information if you were to rebuild the

00:30:58,880 --> 00:31:03,440
image yourself you would also need to

00:31:00,880 --> 00:31:04,320
get depth lab and follow that process

00:31:03,440 --> 00:31:06,480
but

00:31:04,320 --> 00:31:07,840
at that point it's also open source you

00:31:06,480 --> 00:31:09,519
can grab it

00:31:07,840 --> 00:31:11,279
and that would depend on whether you

00:31:09,519 --> 00:31:12,880
want to add that

00:31:11,279 --> 00:31:14,320
information to the image that you build

00:31:12,880 --> 00:31:15,679
yourself

00:31:14,320 --> 00:31:18,399
it should be included with the one that

00:31:15,679 --> 00:31:20,559
ships with the platform but

00:31:18,399 --> 00:31:21,840
if you go about building your own image

00:31:20,559 --> 00:31:23,919
then

00:31:21,840 --> 00:31:26,320
that would also be something you would

00:31:23,919 --> 00:31:26,320
consider

00:31:28,880 --> 00:31:36,080
well do you know if relent will

00:31:31,760 --> 00:31:36,080
standardize on a particular base image

00:31:37,039 --> 00:31:41,120
probably not on one single base image

00:31:39,679 --> 00:31:44,399
but within

00:31:41,120 --> 00:31:47,840
a family of base images yes

00:31:44,399 --> 00:31:49,279
the the general thrust right now is to

00:31:47,840 --> 00:31:52,480
use the

00:31:49,279 --> 00:31:53,840
cloud foundry images base images for

00:31:52,480 --> 00:31:57,600
build and run

00:31:53,840 --> 00:32:00,720
for uh basically across the board

00:31:57,600 --> 00:32:02,720
they're provided by the pocato build

00:32:00,720 --> 00:32:05,760
packs team

00:32:02,720 --> 00:32:07,760
and they seem to be a pretty solid

00:32:05,760 --> 00:32:09,919
option especially given that they are

00:32:07,760 --> 00:32:12,640
producing the cmds

00:32:09,919 --> 00:32:14,159
cmd images so if we can standardize

00:32:12,640 --> 00:32:16,640
across what they produce

00:32:14,159 --> 00:32:17,440
then at least we have a a single point

00:32:16,640 --> 00:32:20,799
where

00:32:17,440 --> 00:32:22,960
the sort of os base considerations come

00:32:20,799 --> 00:32:22,960
from

00:32:25,440 --> 00:32:28,720
but if it's parameterized you'd be able

00:32:27,120 --> 00:32:31,519
to see like submit or

00:32:28,720 --> 00:32:34,320
submit your own image just to be clear

00:32:31,519 --> 00:32:34,320
if you want to rebuild

00:32:34,720 --> 00:32:38,640
just to make sure i understood that

00:32:35,840 --> 00:32:41,919
correctly um yes

00:32:38,640 --> 00:32:44,080
did you say that the the intention is

00:32:41,919 --> 00:32:44,640
for most components to use the same base

00:32:44,080 --> 00:32:46,799
images

00:32:44,640 --> 00:32:48,559
as uh are used in the cloud native build

00:32:46,799 --> 00:32:49,840
packs so basically the same images that

00:32:48,559 --> 00:32:53,840
apps will be

00:32:49,840 --> 00:32:56,720
based off of uh they produce specific

00:32:53,840 --> 00:32:57,600
base images that are used for like

00:32:56,720 --> 00:33:01,600
docker file

00:32:57,600 --> 00:33:05,039
style so they are probably

00:33:01,600 --> 00:33:07,120
relatively similar in what they provide

00:33:05,039 --> 00:33:08,880
but i don't think they're identical i

00:33:07,120 --> 00:33:12,960
would need to go inspect

00:33:08,880 --> 00:33:14,960
them but there are different uh cnb

00:33:12,960 --> 00:33:16,480
build and run images for the different

00:33:14,960 --> 00:33:18,960
builders and then there's

00:33:16,480 --> 00:33:20,240
the images that are meant to be used as

00:33:18,960 --> 00:33:22,880
just a base for

00:33:20,240 --> 00:33:22,880
build or run

00:33:23,760 --> 00:33:30,559
and i think they're very similar except

00:33:27,360 --> 00:33:30,559
for the detection stuff

00:33:30,720 --> 00:33:34,960
okay um this uh problem you're trying to

00:33:33,679 --> 00:33:37,200
solve that sounds

00:33:34,960 --> 00:33:38,080
like a more general problem which is not

00:33:37,200 --> 00:33:41,279
like a problem

00:33:38,080 --> 00:33:44,880
for cloud foundry only

00:33:41,279 --> 00:33:46,240
so one might ask if there is already a

00:33:44,880 --> 00:33:50,159
solution to this out there

00:33:46,240 --> 00:33:54,559
which is maybe used by developed by some

00:33:50,159 --> 00:33:58,080
other vendor have you looked at

00:33:54,559 --> 00:34:00,640
that uh i haven't done an exhaustive

00:33:58,080 --> 00:34:02,240
search i didn't see anything come up

00:34:00,640 --> 00:34:05,519
immediately there were

00:34:02,240 --> 00:34:08,560
various tools that sort of had little

00:34:05,519 --> 00:34:09,280
pieces of it but nothing that was sort

00:34:08,560 --> 00:34:12,399
of a

00:34:09,280 --> 00:34:15,520
this is exactly what we need um because

00:34:12,399 --> 00:34:17,440
most most projects

00:34:15,520 --> 00:34:18,720
don't have exactly the same concerns

00:34:17,440 --> 00:34:21,119
that we have

00:34:18,720 --> 00:34:22,079
because they're it's it's usually

00:34:21,119 --> 00:34:23,359
smaller pieces

00:34:22,079 --> 00:34:25,200
where they have yeah here's a little set

00:34:23,359 --> 00:34:25,760
of yaml of course here's an image it's

00:34:25,200 --> 00:34:28,000
cool

00:34:25,760 --> 00:34:29,919
whereas we're treating it as here's a

00:34:28,000 --> 00:34:30,960
like fan out project that contains a

00:34:29,919 --> 00:34:34,000
bunch of stuff

00:34:30,960 --> 00:34:36,079
that then feeds in fans into

00:34:34,000 --> 00:34:37,040
a bunch of other projects just like that

00:34:36,079 --> 00:34:40,399
into cf

00:34:37,040 --> 00:34:43,200
gates so if you do find something

00:34:40,399 --> 00:34:44,560
if you know of something then i would be

00:34:43,200 --> 00:34:46,800
happy to look at it

00:34:44,560 --> 00:34:48,800
but i haven't seen anything yet now

00:34:46,800 --> 00:34:50,960
unfortunately i don't know of

00:34:48,800 --> 00:34:51,839
something like that it would be awesome

00:34:50,960 --> 00:34:53,599
to just pull

00:34:51,839 --> 00:34:55,119
any image from docker hub and there's

00:34:53,599 --> 00:34:58,480
build instructions

00:34:55,119 --> 00:35:01,520
like how can you fix a vulnerability and

00:34:58,480 --> 00:35:04,640
rebuild the image your own yeah

00:35:01,520 --> 00:35:08,160
uh unfortunately i haven't seen

00:35:04,640 --> 00:35:08,160
too much on that okay

00:35:08,720 --> 00:35:12,720
um this is actually has something like

00:35:10,960 --> 00:35:15,920
that uh

00:35:12,720 --> 00:35:17,680
that's the the open build service um and

00:35:15,920 --> 00:35:19,520
i imagine

00:35:17,680 --> 00:35:21,839
red hat probably has similar you can

00:35:19,520 --> 00:35:25,200
understand why an os company

00:35:21,839 --> 00:35:27,200
would have designed such a thing um

00:35:25,200 --> 00:35:29,119
because you know we're we're supporting

00:35:27,200 --> 00:35:32,480
things for

00:35:29,119 --> 00:35:34,400
decades but it's more

00:35:32,480 --> 00:35:36,800
package oriented than it has been

00:35:34,400 --> 00:35:38,960
container oriented in the past

00:35:36,800 --> 00:35:40,480
so we do build some of the stuff things

00:35:38,960 --> 00:35:43,839
like build packs and such

00:35:40,480 --> 00:35:46,960
in obs but not

00:35:43,839 --> 00:35:50,560
not everything uh

00:35:46,960 --> 00:35:52,960
but uh i i'm not sure it's the

00:35:50,560 --> 00:35:54,079
it is it is an open project uh as

00:35:52,960 --> 00:35:56,400
everything is but

00:35:54,079 --> 00:35:58,960
i'm not sure it's the best fit because

00:35:56,400 --> 00:36:01,200
it's rather heavy weight with all of the

00:35:58,960 --> 00:36:03,119
legacy stuff that it comes with but it

00:36:01,200 --> 00:36:06,240
does

00:36:03,119 --> 00:36:06,240
it does solve the problem

00:36:06,720 --> 00:36:10,880
uh that it solves the problem of

00:36:08,800 --> 00:36:13,280
rebuilding with the base images

00:36:10,880 --> 00:36:14,880
if i'm hearing it correctly it it solves

00:36:13,280 --> 00:36:19,599
the entire

00:36:14,880 --> 00:36:21,200
traceability you know i i mean

00:36:19,599 --> 00:36:22,880
think about the problem you're solving

00:36:21,200 --> 00:36:26,160
yes this is an os vendor

00:36:22,880 --> 00:36:29,520
who passes all of the common criteria

00:36:26,160 --> 00:36:30,880
certification so and knows exactly what

00:36:29,520 --> 00:36:32,560
the bits so if you want to rebuild the

00:36:30,880 --> 00:36:36,000
same bits ten years later

00:36:32,560 --> 00:36:39,280
they can do that only though in an rpm

00:36:36,000 --> 00:36:40,640
package based system somewhat in some of

00:36:39,280 --> 00:36:43,200
the container stuff and we've been

00:36:40,640 --> 00:36:47,280
trying to improve that but

00:36:43,200 --> 00:36:49,760
um so it's it's not an

00:36:47,280 --> 00:36:51,119
exact match um for all of these things

00:36:49,760 --> 00:36:54,320
but it does

00:36:51,119 --> 00:36:57,440
cache large chunks of the world good

00:36:54,320 --> 00:36:59,359
good to know um i i'm always happy to

00:36:57,440 --> 00:37:01,839
hear about some of these tools

00:36:59,359 --> 00:37:02,720
i think that is definitely part of it i

00:37:01,839 --> 00:37:05,520
also just

00:37:02,720 --> 00:37:06,640
the the source discovery inside the

00:37:05,520 --> 00:37:08,400
template projects is

00:37:06,640 --> 00:37:09,680
another piece that may or may not be

00:37:08,400 --> 00:37:13,280
necessary but i think

00:37:09,680 --> 00:37:14,240
is definitely helpful to solve the other

00:37:13,280 --> 00:37:16,000
way dependency

00:37:14,240 --> 00:37:17,359
so you have the images that maybe have

00:37:16,000 --> 00:37:18,320
all this information you can rebuild

00:37:17,359 --> 00:37:20,720
them

00:37:18,320 --> 00:37:21,359
but they don't it doesn't tie from the

00:37:20,720 --> 00:37:24,560
yaml

00:37:21,359 --> 00:37:25,520
directly and back so i don't know if

00:37:24,560 --> 00:37:28,800
that's useful

00:37:25,520 --> 00:37:29,920
or not in the larger scheme but that's

00:37:28,800 --> 00:37:32,960
kind of

00:37:29,920 --> 00:37:35,760
the flow of information i had so thank

00:37:32,960 --> 00:37:35,760
you for mentioning that

00:37:38,400 --> 00:37:42,720
i hate to to cut the discussion short

00:37:40,800 --> 00:37:45,119
but uh i i guess we

00:37:42,720 --> 00:37:47,520
need to give lud some some time to to

00:37:45,119 --> 00:37:50,640
present the other topic for today

00:37:47,520 --> 00:37:51,520
um sorry for that andrew but uh thank

00:37:50,640 --> 00:37:53,920
you very much for

00:37:51,520 --> 00:37:55,760
for presenting i i guess people can can

00:37:53,920 --> 00:37:58,400
reach reach out to you on slack

00:37:55,760 --> 00:38:00,560
or via comments in in the document that

00:37:58,400 --> 00:38:03,040
you're about to send out so i think

00:38:00,560 --> 00:38:04,640
yeah i'll send it out um you can find me

00:38:03,040 --> 00:38:06,720
in the cloud foundry slack

00:38:04,640 --> 00:38:10,960
uh and see for case and other channels

00:38:06,720 --> 00:38:14,320
i'm at bird rock like b-i-r-d-r-o-c-k

00:38:10,960 --> 00:38:18,240
uh so yeah feel free to ping me okay

00:38:14,320 --> 00:38:23,200
thank you thank you over very much

00:38:18,240 --> 00:38:25,520
for qcf 2.5

00:38:23,200 --> 00:38:25,520
thanks

00:38:27,280 --> 00:38:30,640
i have just a couple of slides

00:38:31,200 --> 00:38:36,240
um yeah hey everyone just wanted to give

00:38:34,880 --> 00:38:40,240
a quick update on

00:38:36,240 --> 00:38:44,400
cube cf uh we have 2.5

00:38:40,240 --> 00:38:46,560
out of the 2.5 series

00:38:44,400 --> 00:38:48,480
i'm going to discuss what's new on the

00:38:46,560 --> 00:38:50,800
diego side of things and what's new on

00:38:48,480 --> 00:38:53,440
the irene side of things and then

00:38:50,800 --> 00:38:55,040
open it up for for discussion if uh if

00:38:53,440 --> 00:38:58,800
there are questions

00:38:55,040 --> 00:39:02,480
so on the diego side um we are basing

00:38:58,800 --> 00:39:05,040
the release on cf deployment 13.17.

00:39:02,480 --> 00:39:06,480
i'm not sure if we went uh beyond that

00:39:05,040 --> 00:39:09,680
uh for cvs and

00:39:06,480 --> 00:39:10,800
and things like that but uh the last a

00:39:09,680 --> 00:39:13,119
check

00:39:10,800 --> 00:39:14,720
it was based on that version we have

00:39:13,119 --> 00:39:18,079
multi-cluster support

00:39:14,720 --> 00:39:21,040
if you need uh to go beyond one

00:39:18,079 --> 00:39:24,640
kubernetes cluster for either

00:39:21,040 --> 00:39:28,320
isolation or size

00:39:24,640 --> 00:39:31,040
uh there are scripts that help you

00:39:28,320 --> 00:39:32,560
help you deploy either multiple

00:39:31,040 --> 00:39:36,079
isolation segments

00:39:32,560 --> 00:39:39,119
or multiple

00:39:36,079 --> 00:39:40,880
kind of diego cells on multiple clusters

00:39:39,119 --> 00:39:42,640
and connect them to the same control

00:39:40,880 --> 00:39:44,240
plane

00:39:42,640 --> 00:39:46,880
we have container to container

00:39:44,240 --> 00:39:50,079
networking working

00:39:46,880 --> 00:39:53,359
on kubernetes with diego

00:39:50,079 --> 00:39:55,119
just the original cloud foundry feature

00:39:53,359 --> 00:39:56,960
for containers to container networking

00:39:55,119 --> 00:40:01,280
with the cell controller

00:39:56,960 --> 00:40:04,319
and application dns working there

00:40:01,280 --> 00:40:06,720
and we have some improvement in

00:40:04,319 --> 00:40:08,480
our mechanisms to deploy diego cells for

00:40:06,720 --> 00:40:11,440
scheduling

00:40:08,480 --> 00:40:14,319
we have support for tolerations for easy

00:40:11,440 --> 00:40:17,760
configuration of tolerations you could

00:40:14,319 --> 00:40:20,480
um you could configure those with 2.4 in

00:40:17,760 --> 00:40:23,599
previous releases as well but it wasn't

00:40:20,480 --> 00:40:27,200
easy this makes it easier

00:40:23,599 --> 00:40:30,000
we also by default

00:40:27,200 --> 00:40:31,119
assign local storage to diego cells from

00:40:30,000 --> 00:40:33,200
the nodes

00:40:31,119 --> 00:40:34,800
so you can imagine that if you're

00:40:33,200 --> 00:40:38,319
deploying diego

00:40:34,800 --> 00:40:41,760
with cube cf on a kubernetes cluster

00:40:38,319 --> 00:40:44,319
we um we recommend

00:40:41,760 --> 00:40:45,440
that you run one diego cell per node so

00:40:44,319 --> 00:40:48,560
you tie

00:40:45,440 --> 00:40:52,079
one cell to one kubernetes node

00:40:48,560 --> 00:40:55,839
through um through tolerations and

00:40:52,079 --> 00:40:56,800
obtains and then you're essentially

00:40:55,839 --> 00:40:59,839
using that

00:40:56,800 --> 00:41:03,599
whole node to run uh cloud foundry apps

00:40:59,839 --> 00:41:04,240
and you're sharing the storage of that

00:41:03,599 --> 00:41:06,880
node with

00:41:04,240 --> 00:41:07,359
uh with the diego cell and that leads to

00:41:06,880 --> 00:41:10,319
better

00:41:07,359 --> 00:41:13,359
performance more stability for

00:41:10,319 --> 00:41:16,240
applications and so on

00:41:13,359 --> 00:41:17,359
so that's uh mainly for mainly it for

00:41:16,240 --> 00:41:20,319
diego

00:41:17,359 --> 00:41:21,359
and then for irene we're focusing we

00:41:20,319 --> 00:41:24,800
focused on

00:41:21,359 --> 00:41:28,960
delivering cats so having a baseline

00:41:24,800 --> 00:41:32,160
where cats are green with irony

00:41:28,960 --> 00:41:33,200
the 2.5 release so we're almost there

00:41:32,160 --> 00:41:36,960
with cats

00:41:33,200 --> 00:41:37,920
the the next release uh of cube cf will

00:41:36,960 --> 00:41:41,200
have

00:41:37,920 --> 00:41:42,800
uh a particular uh set of cats that are

00:41:41,200 --> 00:41:45,920
green that we define as the

00:41:42,800 --> 00:41:48,880
as the baseline there are two or three

00:41:45,920 --> 00:41:49,440
uh failing cats at the moment and

00:41:48,880 --> 00:41:51,440
they're

00:41:49,440 --> 00:41:53,920
intermittent if i understand correctly

00:41:51,440 --> 00:41:53,920
based on

00:41:54,240 --> 00:42:03,680
the problem there is log output

00:41:57,280 --> 00:42:06,560
some assertions being made on log output

00:42:03,680 --> 00:42:08,480
this is based on irene 1.8 it's the

00:42:06,560 --> 00:42:11,839
penultimate release i think

00:42:08,480 --> 00:42:14,720
1.9 was released a few days ago

00:42:11,839 --> 00:42:14,720
about a week ago

00:42:15,119 --> 00:42:19,839
we don't have sub charts for either

00:42:17,119 --> 00:42:22,880
irini or irene x components now

00:42:19,839 --> 00:42:23,839
so we used to also release irini as a

00:42:22,880 --> 00:42:28,240
standalone

00:42:23,839 --> 00:42:30,480
home chart as well as irony x components

00:42:28,240 --> 00:42:33,040
we couldn't find other consumers of

00:42:30,480 --> 00:42:36,400
those helm charts so we decided to

00:42:33,040 --> 00:42:39,280
let the templates live inside of cube cf

00:42:36,400 --> 00:42:40,079
just so we have a an easier time

00:42:39,280 --> 00:42:43,599
managing

00:42:40,079 --> 00:42:46,480
all of it and we also

00:42:43,599 --> 00:42:47,599
enabled uh we've we have all of these

00:42:46,480 --> 00:42:51,200
irini x

00:42:47,599 --> 00:42:52,240
features enabled uh ssh uh persistent

00:42:51,200 --> 00:42:55,440
support

00:42:52,240 --> 00:42:58,240
logging without fluent d and uh

00:42:55,440 --> 00:42:59,440
app dns which is a new irene x component

00:42:58,240 --> 00:43:02,960
that we've added

00:42:59,440 --> 00:43:06,000
that allows um applications

00:43:02,960 --> 00:43:09,280
deployed by irini to have access

00:43:06,000 --> 00:43:12,880
to the internal

00:43:09,280 --> 00:43:15,920
application dns for bosch components

00:43:12,880 --> 00:43:17,760
so that ireniac irini apps can talk to

00:43:15,920 --> 00:43:22,319
things like credithub

00:43:17,760 --> 00:43:22,319
or or internal uaa

00:43:25,440 --> 00:43:30,400
host names for example so uh there's

00:43:28,560 --> 00:43:33,599
also a table here if you're interested

00:43:30,400 --> 00:43:35,760
on which uh cast suites are enabled and

00:43:33,599 --> 00:43:38,560
which are still disabled

00:43:35,760 --> 00:43:39,440
and yeah once we have this green

00:43:38,560 --> 00:43:41,920
baseline

00:43:39,440 --> 00:43:43,680
for for cats will continue improving on

00:43:41,920 --> 00:43:48,640
it and adding more of these

00:43:43,680 --> 00:43:48,640
as as cube cf releases pop up

00:43:48,960 --> 00:43:55,839
and yeah i think that's it for my update

00:43:53,280 --> 00:43:55,839
any questions

00:44:00,319 --> 00:44:09,839
thanks flat that was quick any questions

00:44:02,800 --> 00:44:09,839
too blood

00:44:10,800 --> 00:44:17,680
no questions great progress fun

00:44:14,720 --> 00:44:17,680
thank you thank you

00:44:20,839 --> 00:44:25,680
okay seems to be no additional questions

00:44:24,400 --> 00:44:28,319
so

00:44:25,680 --> 00:44:30,880
probably that means we could have some

00:44:28,319 --> 00:44:34,560
more discussion on andrew's topic

00:44:30,880 --> 00:44:34,560
now that i've cut him short

00:44:35,280 --> 00:44:38,800
uh sure anything you want

00:44:40,160 --> 00:44:43,599
and i'd like i said i'd be happy to hear

00:44:41,839 --> 00:44:44,960
about anything anyone else knows about

00:44:43,599 --> 00:44:46,800
because my

00:44:44,960 --> 00:44:48,400
well i did search around it was not

00:44:46,800 --> 00:44:50,400
exhaustive um

00:44:48,400 --> 00:44:53,359
i just didn't find anything that really

00:44:50,400 --> 00:44:53,359
directly fit the bill

00:44:54,800 --> 00:44:59,440
i think while you were presenting i i

00:44:56,800 --> 00:45:00,880
was trying to to kind of recollect

00:44:59,440 --> 00:45:02,560
the things that you want to achieve with

00:45:00,880 --> 00:45:04,240
your approach and i think there's

00:45:02,560 --> 00:45:06,880
like a couple of things that you want to

00:45:04,240 --> 00:45:10,160
do here like discoverability

00:45:06,880 --> 00:45:12,079
rebuild ability etc etc so

00:45:10,160 --> 00:45:13,760
um i'm also not sure that there's a

00:45:12,079 --> 00:45:15,920
solution for for all of these

00:45:13,760 --> 00:45:16,880
out there in the open source but i i

00:45:15,920 --> 00:45:20,079
wanted to

00:45:16,880 --> 00:45:21,920
give it some more thought before like

00:45:20,079 --> 00:45:23,760
saying that there is something or there

00:45:21,920 --> 00:45:27,520
isn't something absolutely

00:45:23,760 --> 00:45:29,040
um and part of the present idea is also

00:45:27,520 --> 00:45:32,800
to

00:45:29,040 --> 00:45:34,240
put some of the or locate the data where

00:45:32,800 --> 00:45:36,160
it really belongs

00:45:34,240 --> 00:45:38,480
right uh release integration shouldn't

00:45:36,160 --> 00:45:39,920
be trained to maintain a knowledge base

00:45:38,480 --> 00:45:41,599
of how every single image in the

00:45:39,920 --> 00:45:44,079
platform is built

00:45:41,599 --> 00:45:45,200
so we need to sort of put that image

00:45:44,079 --> 00:45:47,119
information

00:45:45,200 --> 00:45:48,560
either directly on the images or in the

00:45:47,119 --> 00:45:50,560
projects that bring them in

00:45:48,560 --> 00:45:52,640
so that was some of the impetus to have

00:45:50,560 --> 00:45:53,920
sort of like a manifest file that lives

00:45:52,640 --> 00:45:57,520
in the project

00:45:53,920 --> 00:45:59,520
so that the people that are building

00:45:57,520 --> 00:46:01,119
these images originally

00:45:59,520 --> 00:46:02,560
actually sort of maintain the like

00:46:01,119 --> 00:46:04,240
here's the instruction set the

00:46:02,560 --> 00:46:05,440
programmatic instruction set on how to

00:46:04,240 --> 00:46:07,920
build the images

00:46:05,440 --> 00:46:10,000
rather than trying to have one team

00:46:07,920 --> 00:46:13,520
maintain all that because that could uh

00:46:10,000 --> 00:46:16,000
easily create a little bit of drift

00:46:13,520 --> 00:46:17,680
right if the shape of those changes

00:46:16,000 --> 00:46:20,400
different arguments come in

00:46:17,680 --> 00:46:21,200
uh the directory structure changes stuff

00:46:20,400 --> 00:46:22,800
like that

00:46:21,200 --> 00:46:24,319
that could introduce a lot of drift

00:46:22,800 --> 00:46:26,319
whereas if you have a

00:46:24,319 --> 00:46:28,400
there's a file named this at the root of

00:46:26,319 --> 00:46:30,400
the project that you're bringing in

00:46:28,400 --> 00:46:32,240
and you can just trace all of those

00:46:30,400 --> 00:46:34,079
trees then

00:46:32,240 --> 00:46:35,760
it could probably solve a lot of

00:46:34,079 --> 00:46:39,520
headache

00:46:35,760 --> 00:46:39,520
so that's kind of my thinking on that

00:46:41,440 --> 00:46:46,800
but yeah questions comments concerns

00:46:47,760 --> 00:46:50,960
that might take some thinking that's

00:46:49,440 --> 00:46:55,040
perfectly reasonable if you

00:46:50,960 --> 00:46:56,800
all want to just sit on i don't expect

00:46:55,040 --> 00:46:59,280
that inspiration will necessarily strike

00:46:56,800 --> 00:46:59,280
immediately

00:47:01,359 --> 00:47:04,640
okay if there are no further questions

00:47:03,760 --> 00:47:08,400
to andrew

00:47:04,640 --> 00:47:12,240
and um also no further questions to

00:47:08,400 --> 00:47:15,040
to vlad um i think maybe last

00:47:12,240 --> 00:47:16,000
kind of organizational topic beyond like

00:47:15,040 --> 00:47:19,599
voting for

00:47:16,000 --> 00:47:22,800
topics for for this meeting um i also

00:47:19,599 --> 00:47:25,200
um set up a voting for

00:47:22,800 --> 00:47:27,599
the question of like should we keep the

00:47:25,200 --> 00:47:28,400
the meeting frequency every two weeks or

00:47:27,599 --> 00:47:30,559
should we

00:47:28,400 --> 00:47:32,400
kind of change something regarding the

00:47:30,559 --> 00:47:35,359
meeting frequency

00:47:32,400 --> 00:47:35,680
last time i checked i think pretty much

00:47:35,359 --> 00:47:38,000
all

00:47:35,680 --> 00:47:39,119
people were in favor of keeping the

00:47:38,000 --> 00:47:42,720
meeting frequency as

00:47:39,119 --> 00:47:43,760
is which i guess given that our topic

00:47:42,720 --> 00:47:46,400
list is now

00:47:43,760 --> 00:47:49,520
empty with these two presentations i

00:47:46,400 --> 00:47:52,559
definitely rely on people to

00:47:49,520 --> 00:47:55,200
either submit like requests

00:47:52,559 --> 00:47:56,160
for for topics to be presented or even

00:47:55,200 --> 00:47:58,480
more ideal

00:47:56,160 --> 00:48:00,880
teams that are stepping up to

00:47:58,480 --> 00:48:03,040
proactively suggest topics that they are

00:48:00,880 --> 00:48:06,240
willing to present

00:48:03,040 --> 00:48:09,520
um so having said that um

00:48:06,240 --> 00:48:11,040
please follow up and put put topics into

00:48:09,520 --> 00:48:14,319
the world that i'm i'm going to

00:48:11,040 --> 00:48:18,559
to put on on slack

00:48:14,319 --> 00:48:20,480
and um questions with around any

00:48:18,559 --> 00:48:22,240
last minute topics anything that you

00:48:20,480 --> 00:48:24,720
want to discuss

00:48:22,240 --> 00:48:24,720
announce

00:48:26,960 --> 00:48:30,880
because if not then i think we can give

00:48:29,280 --> 00:48:34,000
everybody 15 minutes back

00:48:30,880 --> 00:48:36,800
um to prepare for the next

00:48:34,000 --> 00:48:39,280
meetings or the evening depending on

00:48:36,800 --> 00:48:39,280
where you are

00:48:39,839 --> 00:48:43,680
okay thanks everybody and talk to you

00:48:42,400 --> 00:48:49,839
next time

00:48:43,680 --> 00:48:49,839

YouTube URL: https://www.youtube.com/watch?v=uVXhOjkeuYk


