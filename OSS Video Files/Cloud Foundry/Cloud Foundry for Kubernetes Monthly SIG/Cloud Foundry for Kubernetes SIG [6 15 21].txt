Title: Cloud Foundry for Kubernetes SIG [6 15 21]
Publication date: 2021-06-15
Playlist: Cloud Foundry for Kubernetes Monthly SIG
Description: 
	
Captions: 
	00:02:37,280 --> 00:02:39,840
hi folks

00:02:40,400 --> 00:02:45,040
good morning good morning

00:02:45,840 --> 00:02:51,840
it's hard for me to figure out the times

00:02:47,599 --> 00:02:51,840
after i wake up

00:02:54,560 --> 00:03:05,840
i guess as always we should give people

00:02:56,879 --> 00:03:05,840
a couple of minutes

00:03:32,000 --> 00:03:35,120
hello everybody

00:03:35,200 --> 00:03:40,000
hi hi why is it daniel that you always

00:03:39,599 --> 00:03:43,120
have

00:03:40,000 --> 00:03:47,519
like the most exciting

00:03:43,120 --> 00:03:50,080
virtual as well as real backgrounds

00:03:47,519 --> 00:03:51,280
it's uh reasonably warm in the uk and we

00:03:50,080 --> 00:03:54,080
have to make the most of that it doesn't

00:03:51,280 --> 00:03:54,080
happen very often

00:03:54,720 --> 00:03:59,439
greenhouses over there nice what are you

00:03:58,159 --> 00:04:01,760
growing

00:03:59,439 --> 00:04:03,200
uh we got ah i don't know what you can

00:04:01,760 --> 00:04:06,159
see we've got some cucumbers

00:04:03,200 --> 00:04:07,680
uh we've got a red currant no a

00:04:06,159 --> 00:04:10,080
blackcurrant plant with

00:04:07,680 --> 00:04:11,040
about four blackcurrants on it some

00:04:10,080 --> 00:04:14,799
raspberries

00:04:11,040 --> 00:04:15,120
tomatoes basil and some chili peppers

00:04:14,799 --> 00:04:18,560
that

00:04:15,120 --> 00:04:18,560
are just about starting to fruit

00:04:25,520 --> 00:04:29,120
i just mentioned let's let's maybe wait

00:04:27,280 --> 00:04:30,240
another minute or two or before we get

00:04:29,120 --> 00:04:43,840
started for people

00:04:30,240 --> 00:04:43,840
to join in

00:04:49,280 --> 00:04:52,639
yeah i'll be here for the first half of

00:04:51,280 --> 00:04:55,919
the meeting but

00:04:52,639 --> 00:04:59,120
i have to draw for something else uh

00:04:55,919 --> 00:05:01,280
30 minutes in just as a heads up then

00:04:59,120 --> 00:05:02,960
probably i'd suggest to kind of switch

00:05:01,280 --> 00:05:06,479
the the order of topics

00:05:02,960 --> 00:05:09,039
um i'm not sure how zoom actually works

00:05:06,479 --> 00:05:11,039
i i pasted the two topics into the chat

00:05:09,039 --> 00:05:14,160
but i'm not sure if people can see them

00:05:11,039 --> 00:05:14,160
if they join later

00:05:15,360 --> 00:05:21,600
then i'll just replace a couple of more

00:05:19,280 --> 00:05:21,600
times

00:05:22,560 --> 00:05:26,080
so we basically have rum who's who's

00:05:25,039 --> 00:05:29,199
interested in

00:05:26,080 --> 00:05:31,759
incident management in cfo cates uh with

00:05:29,199 --> 00:05:36,080
a couple of detailed questions and then

00:05:31,759 --> 00:05:38,080
it's kieron and angela talking about

00:05:36,080 --> 00:05:39,120
cloud foundry custom resources and that

00:05:38,080 --> 00:05:41,840
as i said uh

00:05:39,120 --> 00:05:42,880
probably we should just switch the order

00:05:41,840 --> 00:05:46,160
to make sure that

00:05:42,880 --> 00:05:48,800
angela can ideally follow kind of most

00:05:46,160 --> 00:05:53,840
of the conversation around the topic

00:05:48,800 --> 00:05:53,840
where she's mentioned

00:05:55,039 --> 00:05:58,960
yeah that sounds great if i if that all

00:05:58,080 --> 00:06:02,800
works

00:05:58,960 --> 00:06:02,800
for folks to switch the ordering

00:06:05,120 --> 00:06:08,319
okay then i guess let's let's just do

00:06:07,280 --> 00:06:11,600
that uh welcome

00:06:08,319 --> 00:06:13,680
everybody officially to this week's

00:06:11,600 --> 00:06:15,520
uh special interest group called cloud

00:06:13,680 --> 00:06:18,720
foundry on kubernetes

00:06:15,520 --> 00:06:19,520
um as mentioned two two topics on the

00:06:18,720 --> 00:06:22,240
agenda

00:06:19,520 --> 00:06:22,720
cf custom resources which we will start

00:06:22,240 --> 00:06:25,759
with

00:06:22,720 --> 00:06:29,680
because angela needs to jump to

00:06:25,759 --> 00:06:31,360
to another call at in 30 minutes from

00:06:29,680 --> 00:06:33,680
from now and then

00:06:31,360 --> 00:06:35,680
we have ram who is interested in

00:06:33,680 --> 00:06:36,880
incident management in cf for kate's

00:06:35,680 --> 00:06:39,759
world

00:06:36,880 --> 00:06:41,840
so with that uh i guess i would just

00:06:39,759 --> 00:06:42,479
right away hand it over to kieron and

00:06:41,840 --> 00:06:46,160
angela

00:06:42,479 --> 00:06:49,680
to talk about their topic

00:06:46,160 --> 00:06:51,680
yeah cool thanks fran um

00:06:49,680 --> 00:06:53,680
i know it's been i think about a month

00:06:51,680 --> 00:06:56,880
since the last cf on

00:06:53,680 --> 00:06:58,960
kate's sig meeting um i know in the last

00:06:56,880 --> 00:06:59,759
conversation we had a lot of discussion

00:06:58,960 --> 00:07:02,319
about

00:06:59,759 --> 00:07:04,240
starting to dive into like what a

00:07:02,319 --> 00:07:04,880
possible technical architecture could

00:07:04,240 --> 00:07:07,520
look like

00:07:04,880 --> 00:07:09,120
to actually support like the cf on

00:07:07,520 --> 00:07:12,639
kate's vision statement that's been

00:07:09,120 --> 00:07:15,680
circulated around in the community

00:07:12,639 --> 00:07:17,120
and so i think you know

00:07:15,680 --> 00:07:18,880
since then there's been a little bit of

00:07:17,120 --> 00:07:21,919
asynchronous communication

00:07:18,880 --> 00:07:23,440
and thinking about you know not only the

00:07:21,919 --> 00:07:26,639
high level architecture but was that

00:07:23,440 --> 00:07:29,599
user experience like as well

00:07:26,639 --> 00:07:30,400
and so i actually wanted to tag along

00:07:29,599 --> 00:07:33,599
with the

00:07:30,400 --> 00:07:37,360
um topic you suggested of

00:07:33,599 --> 00:07:38,160
karen shared out a document about sort

00:07:37,360 --> 00:07:41,199
of thinking

00:07:38,160 --> 00:07:43,440
of like how do those

00:07:41,199 --> 00:07:44,400
cloud foundry custom resources actually

00:07:43,440 --> 00:07:46,160
look like

00:07:44,400 --> 00:07:48,160
and like what does that interaction

00:07:46,160 --> 00:07:50,080
model um

00:07:48,160 --> 00:07:52,240
look like as well and so maybe we can

00:07:50,080 --> 00:07:54,479
start by like

00:07:52,240 --> 00:07:56,240
going into that document a little bit

00:07:54,479 --> 00:07:57,280
getting like a high level presentation

00:07:56,240 --> 00:07:59,680
there and then

00:07:57,280 --> 00:08:00,400
hearing folks like general reactions or

00:07:59,680 --> 00:08:03,599
thoughts

00:08:00,400 --> 00:08:04,479
um because i think like maybe taking a

00:08:03,599 --> 00:08:06,560
step back again

00:08:04,479 --> 00:08:08,479
because there's a lot of new folks here

00:08:06,560 --> 00:08:09,919
um you know when thinking about the

00:08:08,479 --> 00:08:12,960
technical architecture

00:08:09,919 --> 00:08:14,319
for like where we might want to take cf

00:08:12,960 --> 00:08:15,919
on kate's i think we've really been

00:08:14,319 --> 00:08:18,960
thinking about having

00:08:15,919 --> 00:08:22,479
you know really more fully integrating

00:08:18,960 --> 00:08:25,840
with kubernetes um and

00:08:22,479 --> 00:08:26,080
treating custom resources as the source

00:08:25,840 --> 00:08:29,280
of

00:08:26,080 --> 00:08:32,000
truth and like integration point um

00:08:29,280 --> 00:08:33,440
for them being able to you know have

00:08:32,000 --> 00:08:36,399
workloads running

00:08:33,440 --> 00:08:37,919
um so like having you know the cfa

00:08:36,399 --> 00:08:40,719
having like a cf api

00:08:37,919 --> 00:08:41,919
server that actually instead of you know

00:08:40,719 --> 00:08:43,919
driving objects

00:08:41,919 --> 00:08:46,080
in a relational database is creating

00:08:43,919 --> 00:08:48,560
custom resources

00:08:46,080 --> 00:08:50,320
on a kubernetes cluster but then you

00:08:48,560 --> 00:08:52,160
could create different controllers

00:08:50,320 --> 00:08:55,440
to like actually implement different

00:08:52,160 --> 00:08:57,279
outcomes against um

00:08:55,440 --> 00:08:59,440
i don't know if anyone else has anything

00:08:57,279 --> 00:09:01,680
to add from you know the conversation we

00:08:59,440 --> 00:09:05,279
had in the last meeting

00:09:01,680 --> 00:09:09,839
or any questions about like sort of that

00:09:05,279 --> 00:09:09,839
high level architecture

00:09:13,760 --> 00:09:18,240
i don't see anyone unmuting so

00:09:20,080 --> 00:09:24,160
cool so i just wanted to provide like a

00:09:22,560 --> 00:09:25,839
brief amount of context to what we

00:09:24,160 --> 00:09:29,519
talked about last time

00:09:25,839 --> 00:09:33,360
um and maybe from there we can

00:09:29,519 --> 00:09:36,720
go over into the dock that um

00:09:33,360 --> 00:09:39,760
kieran wrote up and you can talk a

00:09:36,720 --> 00:09:39,760
little bit more about that

00:09:43,839 --> 00:09:47,279
okay so i'm having some technical

00:09:46,480 --> 00:09:49,120
difficulties

00:09:47,279 --> 00:09:50,640
today my internet's just been down for

00:09:49,120 --> 00:09:53,120
about an hour which means i don't have

00:09:50,640 --> 00:09:54,320
the dock either but anyway

00:09:53,120 --> 00:09:57,120
so we'll try and think about what i

00:09:54,320 --> 00:10:00,240
wrote a couple of weeks ago

00:09:57,120 --> 00:10:04,720
would it be helpful to share the like

00:10:00,240 --> 00:10:04,720
someone share the doc on their screen

00:10:07,839 --> 00:10:14,560
so you would just be squinting yeah

00:10:11,600 --> 00:10:16,839
um yeah so i created that dark a couple

00:10:14,560 --> 00:10:20,399
of weeks ago after the

00:10:16,839 --> 00:10:24,640
um after the meeting where um

00:10:20,399 --> 00:10:28,880
we saw the ideas about the cf um

00:10:24,640 --> 00:10:31,279
civili shim which was creating the

00:10:28,880 --> 00:10:32,720
uh and the any suggestions for some cids

00:10:31,279 --> 00:10:36,240
that that would do

00:10:32,720 --> 00:10:36,720
um so that was that was driven through

00:10:36,240 --> 00:10:39,440
the

00:10:36,720 --> 00:10:40,160
cf cli and how that goes how that needs

00:10:39,440 --> 00:10:43,120
to

00:10:40,160 --> 00:10:44,880
interact with cf so i was trying to

00:10:43,120 --> 00:10:47,200
consider

00:10:44,880 --> 00:10:48,160
another use case which i think we talked

00:10:47,200 --> 00:10:51,360
about maybe in the

00:10:48,160 --> 00:10:52,079
cf kate's vision document so if we're

00:10:51,360 --> 00:10:56,160
doing

00:10:52,079 --> 00:10:58,240
cf on kubernetes um my assumption was

00:10:56,160 --> 00:11:00,240
this is a great opportunity to allow

00:10:58,240 --> 00:11:03,200
people

00:11:00,240 --> 00:11:04,320
operators and developers to do a kate's

00:11:03,200 --> 00:11:07,360
native way for

00:11:04,320 --> 00:11:09,040
deploying their apps and that should

00:11:07,360 --> 00:11:13,600
feel just as easy as doing a

00:11:09,040 --> 00:11:15,360
cf push so by that i mean

00:11:13,600 --> 00:11:17,120
you should be able to create a custom

00:11:15,360 --> 00:11:18,880
resource

00:11:17,120 --> 00:11:20,399
that's got the information that you

00:11:18,880 --> 00:11:23,440
would have in your

00:11:20,399 --> 00:11:24,959
app manifest and anything you'd pass on

00:11:23,440 --> 00:11:28,160
the command line

00:11:24,959 --> 00:11:29,920
um keep couple apply that

00:11:28,160 --> 00:11:32,800
and then that should just be processed

00:11:29,920 --> 00:11:34,720
like as if you just done a cf push

00:11:32,800 --> 00:11:36,800
leave it there things will happen and

00:11:34,720 --> 00:11:40,320
eventually an app will

00:11:36,800 --> 00:11:41,440
be running in the end of it um

00:11:40,320 --> 00:11:44,000
yeah and i was wondering how you could

00:11:41,440 --> 00:11:46,640
do that based on the

00:11:44,000 --> 00:11:49,200
the objects the crs that were suggested

00:11:46,640 --> 00:11:50,959
for the cf shim

00:11:49,200 --> 00:11:53,360
um and i was just looking at the amount

00:11:50,959 --> 00:11:56,959
of interaction that was maybe maybe

00:11:53,360 --> 00:11:58,959
um implicit in that design

00:11:56,959 --> 00:12:00,240
so i think we started off by creating an

00:11:58,959 --> 00:12:03,279
app manifest

00:12:00,240 --> 00:12:04,720
what the shim did um

00:12:03,279 --> 00:12:06,880
which contains the details for the

00:12:04,720 --> 00:12:10,000
manifest um

00:12:06,880 --> 00:12:12,560
oh yeah i can see this a little bit

00:12:10,000 --> 00:12:13,680
uh we need to get the source code in

00:12:12,560 --> 00:12:15,680
there somewhere

00:12:13,680 --> 00:12:17,519
so i mean that's a tricky bit i think in

00:12:15,680 --> 00:12:19,519
terms of

00:12:17,519 --> 00:12:20,800
kate's native way of doing things maybe

00:12:19,519 --> 00:12:24,000
we have to just point it to a

00:12:20,800 --> 00:12:28,079
repository but we can just assume that

00:12:24,000 --> 00:12:32,399
happens somehow i think um

00:12:28,079 --> 00:12:35,040
i suppose my problem was uh i want

00:12:32,399 --> 00:12:36,959
i want that code to turn into a running

00:12:35,040 --> 00:12:40,320
application without doing anything

00:12:36,959 --> 00:12:42,000
um i don't want to create a kpack

00:12:40,320 --> 00:12:43,760
resource

00:12:42,000 --> 00:12:45,760
watch the status of that wait for that

00:12:43,760 --> 00:12:48,480
to be finished and then

00:12:45,760 --> 00:12:50,000
assign that to my object that i've

00:12:48,480 --> 00:12:51,279
created or another one that's been

00:12:50,000 --> 00:12:53,519
created

00:12:51,279 --> 00:12:55,440
um i don't want it to be a multi-step

00:12:53,519 --> 00:12:57,040
process it just should be a declarative

00:12:55,440 --> 00:12:59,839
thing where i can

00:12:57,040 --> 00:13:01,360
specify my app bang bang bang things

00:12:59,839 --> 00:13:04,639
happen

00:13:01,360 --> 00:13:05,600
um yes there's some comments on here and

00:13:04,639 --> 00:13:07,519
i realized the whole

00:13:05,600 --> 00:13:09,440
structure isn't as simple as just being

00:13:07,519 --> 00:13:12,560
able to create one

00:13:09,440 --> 00:13:15,200
one cr perhaps definitely

00:13:12,560 --> 00:13:15,839
you might end up with very many

00:13:15,200 --> 00:13:19,200
different

00:13:15,839 --> 00:13:20,639
uh versions of your app code linked to

00:13:19,200 --> 00:13:22,079
your app

00:13:20,639 --> 00:13:23,760
so i can see how that could be a

00:13:22,079 --> 00:13:27,200
different cr

00:13:23,760 --> 00:13:31,200
but i'd quite like to say if you just

00:13:27,200 --> 00:13:34,320
point to one version of your code in one

00:13:31,200 --> 00:13:37,360
one cr your main app manifest if that

00:13:34,320 --> 00:13:40,639
could trigger the generation of a new

00:13:37,360 --> 00:13:40,959
build object um and then automatically

00:13:40,639 --> 00:13:42,240
link

00:13:40,959 --> 00:13:45,360
things together saying this is my

00:13:42,240 --> 00:13:47,279
current build and then it goes on and

00:13:45,360 --> 00:13:48,800
all the other crs get processed by the

00:13:47,279 --> 00:13:51,199
controllers to create the app i think

00:13:48,800 --> 00:13:53,519
that would be a good thing

00:13:51,199 --> 00:13:53,519
um

00:13:55,680 --> 00:14:00,000
yeah so if you if you have this model

00:13:58,720 --> 00:14:02,800
that sort of

00:14:00,000 --> 00:14:03,279
kate's native driven then i'd say if

00:14:02,800 --> 00:14:06,720
you've got

00:14:03,279 --> 00:14:07,360
the um cf shim how could you utilize

00:14:06,720 --> 00:14:10,320
that

00:14:07,360 --> 00:14:12,000
um how could you utilize that simple

00:14:10,320 --> 00:14:13,279
model with the cf shim

00:14:12,000 --> 00:14:14,720
so the shim does a whole load of

00:14:13,279 --> 00:14:16,720
different steps doesn't it goes and

00:14:14,720 --> 00:14:18,560
creates the thing it uploads code it

00:14:16,720 --> 00:14:20,160
goes and says create a build it waits

00:14:18,560 --> 00:14:24,399
for the build to be ready

00:14:20,160 --> 00:14:28,959
it links things together um

00:14:24,399 --> 00:14:31,519
so i think i'm hoping with statuses on

00:14:28,959 --> 00:14:33,199
that single object you can

00:14:31,519 --> 00:14:36,720
represent all those sort of state

00:14:33,199 --> 00:14:36,720
transitions in that process

00:14:37,839 --> 00:14:41,760
and so hopefully you can very you can

00:14:39,600 --> 00:14:44,079
simplify the

00:14:41,760 --> 00:14:46,399
suggested design of the shim cr objects

00:14:44,079 --> 00:14:46,399
as well

00:14:46,639 --> 00:14:49,440
that was the hope

00:14:53,920 --> 00:14:58,000
yeah i think like maybe to me like one

00:14:56,160 --> 00:14:59,600
of the most interesting things is like

00:14:58,000 --> 00:15:01,600
towards the bottom of like calling out

00:14:59,600 --> 00:15:04,079
like having a single like

00:15:01,600 --> 00:15:05,279
desired app like custom resource or just

00:15:04,079 --> 00:15:07,760
having that like

00:15:05,279 --> 00:15:09,519
one custom resource of like if you're

00:15:07,760 --> 00:15:12,000
just interacting directly

00:15:09,519 --> 00:15:14,160
via like coupe control versus like an

00:15:12,000 --> 00:15:17,360
api server or something else like

00:15:14,160 --> 00:15:19,279
having having that single object

00:15:17,360 --> 00:15:20,959
to be modifying rather than having to

00:15:19,279 --> 00:15:22,560
think about all of the different like

00:15:20,959 --> 00:15:25,040
relationships between

00:15:22,560 --> 00:15:25,600
all of the different like maybe like

00:15:25,040 --> 00:15:29,120
child

00:15:25,600 --> 00:15:32,399
like resources like build or package

00:15:29,120 --> 00:15:34,320
or app um and i think that like it is

00:15:32,399 --> 00:15:37,360
really appealing to just have like

00:15:34,320 --> 00:15:39,440
sort of that single entry point that

00:15:37,360 --> 00:15:43,759
like either gets created via like

00:15:39,440 --> 00:15:47,040
an api shim or you could apply directly

00:15:43,759 --> 00:15:49,600
via like coop control in the cli

00:15:47,040 --> 00:15:50,560
um because you do sort of get you get

00:15:49,600 --> 00:15:52,639
the mapping then

00:15:50,560 --> 00:15:54,160
of like how do all of these resources

00:15:52,639 --> 00:15:55,920
interact with each other like you can

00:15:54,160 --> 00:15:57,440
have like owner references on all the

00:15:55,920 --> 00:16:00,560
child resources

00:15:57,440 --> 00:16:03,680
and like you can check the status of

00:16:00,560 --> 00:16:04,399
the desired like i guess in this case

00:16:03,680 --> 00:16:06,240
like what

00:16:04,399 --> 00:16:08,240
like what's called here like the desired

00:16:06,240 --> 00:16:12,079
app like cr to see like

00:16:08,240 --> 00:16:15,120
okay did everything actually eventually

00:16:12,079 --> 00:16:19,120
like get created or like

00:16:15,120 --> 00:16:19,120
did something fail along the way

00:16:19,680 --> 00:16:23,680
yeah and hopefully like in a production

00:16:21,279 --> 00:16:26,000
system you could just have a

00:16:23,680 --> 00:16:27,120
yamls for all your desired apps and your

00:16:26,000 --> 00:16:28,720
system and then

00:16:27,120 --> 00:16:37,839
apply the whole lot and wait for it all

00:16:28,720 --> 00:16:37,839
to come up um

00:16:38,000 --> 00:16:42,160
i think it's it's it's just uh things

00:16:40,560 --> 00:16:45,519
that are hard to do with crs

00:16:42,160 --> 00:16:47,120
are like

00:16:45,519 --> 00:16:49,120
if you have to do polling or you have to

00:16:47,120 --> 00:16:50,320
go and watch something wait for status

00:16:49,120 --> 00:16:53,279
change

00:16:50,320 --> 00:16:53,279
it's quite painful

00:16:53,839 --> 00:16:58,320
you end up writing your own sort of

00:16:56,720 --> 00:17:00,639
controller and go or something if you

00:16:58,320 --> 00:17:02,480
want to do that easily

00:17:00,639 --> 00:17:04,160
we even saw that using ruby code to do

00:17:02,480 --> 00:17:06,400
things like that

00:17:04,160 --> 00:17:07,919
isn't great so yeah to keep the thing as

00:17:06,400 --> 00:17:08,799
simple as possible and sort of use the

00:17:07,919 --> 00:17:10,400
patterns like

00:17:08,799 --> 00:17:12,000
if you're creating a stateful set or

00:17:10,400 --> 00:17:15,039
something and now

00:17:12,000 --> 00:17:17,360
kate's that goes and creates some

00:17:15,039 --> 00:17:18,880
uh pods or something underneath it you

00:17:17,360 --> 00:17:20,319
never see them you can just look at the

00:17:18,880 --> 00:17:22,240
status on the stateful set and know

00:17:20,319 --> 00:17:25,600
what's going on

00:17:22,240 --> 00:17:27,839
um try and hide the complexity i think

00:17:25,600 --> 00:17:27,839
um

00:17:29,039 --> 00:17:34,240
yeah like i'm uh i'm like totally on

00:17:31,600 --> 00:17:36,799
board with hiding the complexity for

00:17:34,240 --> 00:17:37,520
for like cube cuddle like driven users

00:17:36,799 --> 00:17:39,600
for it

00:17:37,520 --> 00:17:41,520
um but for the shim itself i think a lot

00:17:39,600 --> 00:17:43,440
of that is like necessary complexity

00:17:41,520 --> 00:17:46,799
because we're trying to like take a

00:17:43,440 --> 00:17:48,320
an existing like restful api that

00:17:46,799 --> 00:17:50,400
is already designed and we already have

00:17:48,320 --> 00:17:51,600
clients expecting to use it in certain

00:17:50,400 --> 00:17:53,120
ways

00:17:51,600 --> 00:17:54,880
and those clients expect to be able to

00:17:53,120 --> 00:17:57,520
like pluck out an individual build

00:17:54,880 --> 00:17:58,080
one of many builds for a single app or

00:17:57,520 --> 00:18:01,360
like

00:17:58,080 --> 00:18:04,799
an individual droplet or whatever and

00:18:01,360 --> 00:18:08,480
um for to power those in points

00:18:04,799 --> 00:18:10,320
i think like some of that cr complexity

00:18:08,480 --> 00:18:11,760
is actually pretty necessary there

00:18:10,320 --> 00:18:14,160
we're actually doing like spikes right

00:18:11,760 --> 00:18:16,880
now to like

00:18:14,160 --> 00:18:17,760
really like drive out these dcr designs

00:18:16,880 --> 00:18:20,799
a little bit better

00:18:17,760 --> 00:18:22,160
um but um

00:18:20,799 --> 00:18:24,240
like one way i like to think of the

00:18:22,160 --> 00:18:26,799
intermediate crs or those are both

00:18:24,240 --> 00:18:27,280
like basically just to be managed by

00:18:26,799 --> 00:18:29,039
machine

00:18:27,280 --> 00:18:30,960
like level users and like i'd never

00:18:29,039 --> 00:18:31,760
expect a human to want to like keep

00:18:30,960 --> 00:18:34,320
cuddle apply

00:18:31,760 --> 00:18:36,160
a build like on their own like they

00:18:34,320 --> 00:18:37,520
would apply like the desired app like

00:18:36,160 --> 00:18:40,240
like you proposed

00:18:37,520 --> 00:18:41,919
um but those things do provide like

00:18:40,240 --> 00:18:42,960
extension points for us to be able to

00:18:41,919 --> 00:18:44,720
like swap out like

00:18:42,960 --> 00:18:46,160
the staging implementation or the

00:18:44,720 --> 00:18:49,600
runtime implementation

00:18:46,160 --> 00:18:50,960
while still like allowing us to like

00:18:49,600 --> 00:18:53,360
power this thing that looks like the

00:18:50,960 --> 00:18:56,480
cloud controller but

00:18:53,360 --> 00:18:56,799
is using those instead of a database i

00:18:56,480 --> 00:18:59,600
think

00:18:56,799 --> 00:19:00,480
um for for the relationships that are

00:18:59,600 --> 00:19:02,960
like

00:19:00,480 --> 00:19:04,880
definitely mini to mini like it it gets

00:19:02,960 --> 00:19:07,280
a lot harder

00:19:04,880 --> 00:19:08,480
to to be able to like collapse that into

00:19:07,280 --> 00:19:11,840
individual crs

00:19:08,480 --> 00:19:11,840
in my opinion

00:19:14,320 --> 00:19:19,679
what's um what's an example of one of

00:19:16,160 --> 00:19:19,679
the many-to-many relationships there

00:19:20,799 --> 00:19:26,480
um on the on the dock i i'll link this

00:19:24,880 --> 00:19:30,720
mirror

00:19:26,480 --> 00:19:33,360
here um but like basically every

00:19:30,720 --> 00:19:34,000
every child resource under an app is

00:19:33,360 --> 00:19:36,080
like

00:19:34,000 --> 00:19:37,280
pretty pretty complicated so an app has

00:19:36,080 --> 00:19:40,240
many packages

00:19:37,280 --> 00:19:40,960
those can all be like like the cli can

00:19:40,240 --> 00:19:42,880
like

00:19:40,960 --> 00:19:44,799
coordinate staging of multiple packages

00:19:42,880 --> 00:19:46,640
at the same time it can like

00:19:44,799 --> 00:19:48,080
you'll have multiple builds in flight at

00:19:46,640 --> 00:19:50,240
any given time

00:19:48,080 --> 00:19:52,720
it it makes it difficult when you have

00:19:50,240 --> 00:19:55,760
like many things that could be

00:19:52,720 --> 00:19:57,440
like in flux to to collapse that as

00:19:55,760 --> 00:19:59,440
saying like the app is a single build

00:19:57,440 --> 00:20:02,400
and it's then it's ready

00:19:59,440 --> 00:20:03,760
and um like if we were like doing this

00:20:02,400 --> 00:20:05,600
from scratch

00:20:03,760 --> 00:20:06,960
like it would definitely simplify it to

00:20:05,600 --> 00:20:09,919
just like take that

00:20:06,960 --> 00:20:10,720
away and say you can only have a single

00:20:09,919 --> 00:20:13,520
build in flight

00:20:10,720 --> 00:20:14,480
like very much like the like v2 style of

00:20:13,520 --> 00:20:16,720
cf

00:20:14,480 --> 00:20:17,600
but since we're targeting like being

00:20:16,720 --> 00:20:21,200
able to support

00:20:17,600 --> 00:20:24,240
v3 um v3 clients of cf

00:20:21,200 --> 00:20:26,480
like we kind of have to

00:20:24,240 --> 00:20:27,440
have to think about it more more in

00:20:26,480 --> 00:20:35,679
terms of

00:20:27,440 --> 00:20:39,039
what what can they do right now

00:20:35,679 --> 00:20:39,039
okay i mean it's yeah

00:20:40,480 --> 00:20:43,600
the thing i was just trying to say was

00:20:41,760 --> 00:20:47,039
like just hoping not to

00:20:43,600 --> 00:20:48,080
have the user creating any of those um

00:20:47,039 --> 00:20:51,840
of

00:20:48,080 --> 00:20:54,400
those objects tracking all that stuff um

00:20:51,840 --> 00:20:54,880
which sounds like what you're saying as

00:20:54,400 --> 00:20:57,919
well

00:20:54,880 --> 00:20:59,919
with it yeah yeah i definitely don't

00:20:57,919 --> 00:21:02,159
want a user to have to like

00:20:59,919 --> 00:21:03,840
keep cuddle apply a individual build or

00:21:02,159 --> 00:21:04,640
something i think i think like the

00:21:03,840 --> 00:21:06,480
desired app

00:21:04,640 --> 00:21:07,760
that you propose in this dock is like

00:21:06,480 --> 00:21:11,200
definitely

00:21:07,760 --> 00:21:12,000
like like how you uh said it's like a

00:21:11,200 --> 00:21:13,919
stateful set

00:21:12,000 --> 00:21:16,240
that ends up managing replica sets and

00:21:13,919 --> 00:21:18,799
pods but the user doesn't apply those

00:21:16,240 --> 00:21:20,000
like i very much think that it could

00:21:18,799 --> 00:21:24,320
work like that and that would be

00:21:20,000 --> 00:21:24,320
that would be good okay yeah cool

00:21:27,679 --> 00:21:31,520
i think the other thing is like you

00:21:28,960 --> 00:21:33,280
think but if you're targeting something

00:21:31,520 --> 00:21:34,640
like k-native the back end which has

00:21:33,280 --> 00:21:36,080
quite a simple interface

00:21:34,640 --> 00:21:37,679
it's you sort of think where's the

00:21:36,080 --> 00:21:39,120
complexity coming from on the front end

00:21:37,679 --> 00:21:40,799
that's just gonna

00:21:39,120 --> 00:21:42,480
fan out and then go back in again to

00:21:40,799 --> 00:21:45,840
something

00:21:42,480 --> 00:21:45,840
quite simple

00:21:46,240 --> 00:21:53,679
i mean what i'm hearing maybe as like

00:21:49,600 --> 00:21:56,159
i mean like is it does sound like

00:21:53,679 --> 00:21:58,159
there is like synergy and like agreement

00:21:56,159 --> 00:22:01,039
of like you know you don't want

00:21:58,159 --> 00:22:01,440
users or individuals applying like you

00:22:01,039 --> 00:22:03,679
know

00:22:01,440 --> 00:22:05,679
individual builds or individual apps or

00:22:03,679 --> 00:22:07,679
things like that but maybe

00:22:05,679 --> 00:22:09,120
maybe there's almost like you know a

00:22:07,679 --> 00:22:11,760
continuation of like

00:22:09,120 --> 00:22:12,320
the doc like karen that you wrote up of

00:22:11,760 --> 00:22:14,400
like

00:22:12,320 --> 00:22:16,320
being a little bit more explicit of like

00:22:14,400 --> 00:22:19,440
okay like how does this

00:22:16,320 --> 00:22:22,240
like if we have a desired app

00:22:19,440 --> 00:22:24,320
like custom resource and that's what the

00:22:22,240 --> 00:22:27,440
user is interfacing with

00:22:24,320 --> 00:22:29,360
like what's going on in terms of like

00:22:27,440 --> 00:22:32,240
you know all of like what is that

00:22:29,360 --> 00:22:33,919
desired app actually that generating

00:22:32,240 --> 00:22:35,600
and like sort of like to your point of

00:22:33,919 --> 00:22:37,120
like noting that it's like you can get a

00:22:35,600 --> 00:22:39,120
lot of information off of the status

00:22:37,120 --> 00:22:40,080
field like calling out like yeah what is

00:22:39,120 --> 00:22:42,159
that relationship

00:22:40,080 --> 00:22:43,919
of like what resources are being driven

00:22:42,159 --> 00:22:45,760
out and like what

00:22:43,919 --> 00:22:47,679
what is it owning and like what's being

00:22:45,760 --> 00:22:49,440
updated um

00:22:47,679 --> 00:22:51,360
because i think like fleshing out what

00:22:49,440 --> 00:22:54,159
that desired app

00:22:51,360 --> 00:22:55,600
cr would look like might make it like i

00:22:54,159 --> 00:23:00,320
think would bring clarity

00:22:55,600 --> 00:23:02,159
to like um to like these discussions

00:23:00,320 --> 00:23:04,400
of being like okay like this is the

00:23:02,159 --> 00:23:08,000
expectation of

00:23:04,400 --> 00:23:10,400
how of like the user shouldn't be

00:23:08,000 --> 00:23:12,559
interacting with any of these resources

00:23:10,400 --> 00:23:14,240
but should be interacting with this one

00:23:12,559 --> 00:23:17,520
and then also like meanwhile

00:23:14,240 --> 00:23:20,880
if you compare it to like having like

00:23:17,520 --> 00:23:22,240
you know a new api shim like the api

00:23:20,880 --> 00:23:24,080
might be interacting with some of these

00:23:22,240 --> 00:23:24,880
child resources for things like get

00:23:24,080 --> 00:23:28,320
endpoints

00:23:24,880 --> 00:23:28,960
or so on but what does the push workflow

00:23:28,320 --> 00:23:30,799
look like

00:23:28,960 --> 00:23:32,240
can we make sure that it looks similar

00:23:30,799 --> 00:23:35,280
to like

00:23:32,240 --> 00:23:36,880
also creating a desired app so that a

00:23:35,280 --> 00:23:39,280
user could in the future then

00:23:36,880 --> 00:23:40,480
if they wanted to bypass like the cli or

00:23:39,280 --> 00:23:42,400
the api

00:23:40,480 --> 00:23:46,159
and be interacting with that like

00:23:42,400 --> 00:23:46,159
desired app resource directly

00:23:49,760 --> 00:23:53,279
yeah exactly sounds good yeah

00:23:58,640 --> 00:24:03,120
i mean we have a lot of people oh go for

00:24:01,679 --> 00:24:04,960
it

00:24:03,120 --> 00:24:07,120
i i was just about to say kieran

00:24:04,960 --> 00:24:09,919
mentioned k native and

00:24:07,120 --> 00:24:10,799
like i haven't looked at k native for

00:24:09,919 --> 00:24:14,480
ages but

00:24:10,799 --> 00:24:17,679
like when i recall how it how it started

00:24:14,480 --> 00:24:19,200
wasn't it like a very similar model to

00:24:17,679 --> 00:24:22,159
what what i think kieron was was

00:24:19,200 --> 00:24:23,520
proposing like the top-level entity that

00:24:22,159 --> 00:24:26,799
then essentially drove

00:24:23,520 --> 00:24:29,840
many of those sub objects ultimately

00:24:26,799 --> 00:24:33,360
so i i guess my actual question is

00:24:29,840 --> 00:24:36,400
how close or how far away from

00:24:33,360 --> 00:24:39,600
the way k native works today is is what

00:24:36,400 --> 00:24:39,600
we are currently discussing

00:24:39,919 --> 00:24:42,559
it doesn't build things for you does it

00:24:41,360 --> 00:24:45,360
so that's that's the extra bit of

00:24:42,559 --> 00:24:47,600
complexity we're dealing with

00:24:45,360 --> 00:24:50,080
that's why i said when it started right

00:24:47,600 --> 00:24:51,760
because back then it used to build also

00:24:50,080 --> 00:24:53,520
things for you when when it still had

00:24:51,760 --> 00:24:56,640
canadian built as

00:24:53,520 --> 00:24:59,520
like an integrated thing all right yeah

00:24:56,640 --> 00:25:02,240
it has evolved yeah sorry i didn't i'm

00:24:59,520 --> 00:25:04,000
not the expert on it but um

00:25:02,240 --> 00:25:05,679
i mean it does i mean you ask for a

00:25:04,000 --> 00:25:07,840
service and you get a service with all

00:25:05,679 --> 00:25:09,760
this networking as well doesn't it well

00:25:07,840 --> 00:25:11,600
whereas we're looking at pluggable

00:25:09,760 --> 00:25:14,720
networking and things like that so we'll

00:25:11,600 --> 00:25:16,960
we'll have additional options

00:25:14,720 --> 00:25:16,960
um

00:25:19,360 --> 00:25:21,919
yeah okay

00:25:24,960 --> 00:25:28,880
sorry angela oh no you're good i was

00:25:28,080 --> 00:25:31,679
just gonna say

00:25:28,880 --> 00:25:33,440
i think we have a decent number of folks

00:25:31,679 --> 00:25:34,880
on this call so like

00:25:33,440 --> 00:25:36,960
i know there's been like a little bit

00:25:34,880 --> 00:25:38,400
back and forth and maybe

00:25:36,960 --> 00:25:40,000
like you know talking about something

00:25:38,400 --> 00:25:41,520
not you know if you haven't like read

00:25:40,000 --> 00:25:42,000
the doc or like looked at the mirror

00:25:41,520 --> 00:25:43,919
board it's

00:25:42,000 --> 00:25:45,840
like maybe a little bit more difficult

00:25:43,919 --> 00:25:48,320
to engage like

00:25:45,840 --> 00:25:49,679
with like the material and like what

00:25:48,320 --> 00:25:52,640
we're talking about right now

00:25:49,679 --> 00:25:53,360
but i'd be curious um just to like check

00:25:52,640 --> 00:25:55,120
on like

00:25:53,360 --> 00:25:56,559
you know if anybody else like had any

00:25:55,120 --> 00:25:58,000
other thoughts about like what we've

00:25:56,559 --> 00:26:00,480
been discussing so far

00:25:58,000 --> 00:26:03,120
on like you know either the overall

00:26:00,480 --> 00:26:06,159
vision or like you know talking about

00:26:03,120 --> 00:26:07,039
um you know a desired app like custom

00:26:06,159 --> 00:26:11,039
resource

00:26:07,039 --> 00:26:11,679
as like you know that single way of like

00:26:11,039 --> 00:26:14,799
both

00:26:11,679 --> 00:26:17,279
driving the creation of apps from like

00:26:14,799 --> 00:26:25,840
an api perspective but also from like a

00:26:17,279 --> 00:26:25,840
kubernetes native perspective as well

00:26:34,320 --> 00:26:39,120
oh bye i'm coming into this cold having

00:26:36,960 --> 00:26:40,480
not attended for a very long time and i

00:26:39,120 --> 00:26:41,919
came to the meeting just to try and get

00:26:40,480 --> 00:26:43,200
a general sense of where things are at

00:26:41,919 --> 00:26:44,799
and what people are working on

00:26:43,200 --> 00:26:46,480
so if this ends up being a completely

00:26:44,799 --> 00:26:48,559
new question and uh

00:26:46,480 --> 00:26:50,960
derailing things tell me to shut up and

00:26:48,559 --> 00:26:54,480
go back on mute and i'll happily oblige

00:26:50,960 --> 00:26:57,520
um so we're talking about defining

00:26:54,480 --> 00:27:01,600
apps as uh custom resources

00:26:57,520 --> 00:27:02,080
um how does the provision of code work

00:27:01,600 --> 00:27:05,279
there

00:27:02,080 --> 00:27:08,159
you know it's you can provide a custom

00:27:05,279 --> 00:27:09,840
resource but where do the bits come in

00:27:08,159 --> 00:27:11,279
again if this is like taking everyone

00:27:09,840 --> 00:27:12,880
back square one you've got more

00:27:11,279 --> 00:27:20,240
important things to discuss tell me to

00:27:12,880 --> 00:27:22,159
go away and do my homework

00:27:20,240 --> 00:27:23,919
when you say bits are you referring to

00:27:22,159 --> 00:27:25,039
the application source code that gets

00:27:23,919 --> 00:27:28,240
bundled up

00:27:25,039 --> 00:27:29,520
and deployed uh so the idea there was

00:27:28,240 --> 00:27:32,720
we'd still be using

00:27:29,520 --> 00:27:34,960
something like kpec and

00:27:32,720 --> 00:27:36,640
having that source code live somewhere

00:27:34,960 --> 00:27:38,000
that then gets built into an oci

00:27:36,640 --> 00:27:40,080
compliant image

00:27:38,000 --> 00:27:41,760
uh by like kpac or whatever and then the

00:27:40,080 --> 00:27:43,039
output of that being the image that gets

00:27:41,760 --> 00:27:46,000
attached to

00:27:43,039 --> 00:27:46,480
the object um so it would probably come

00:27:46,000 --> 00:27:49,760
in

00:27:46,480 --> 00:27:50,960
uh updated on the app desired app uh and

00:27:49,760 --> 00:27:52,080
then that gets filtered down to the

00:27:50,960 --> 00:27:54,320
child objects but

00:27:52,080 --> 00:27:55,679
yeah we're still using uh some sort of

00:27:54,320 --> 00:27:58,000
uh

00:27:55,679 --> 00:28:00,480
one or more build tools that lives

00:27:58,000 --> 00:28:02,480
inside of the kubernetes cluster

00:28:00,480 --> 00:28:04,240
with an eye towards trying to make it as

00:28:02,480 --> 00:28:06,799
compatible as possible with

00:28:04,240 --> 00:28:08,159
whatever offerings are there recognizing

00:28:06,799 --> 00:28:09,840
that

00:28:08,159 --> 00:28:11,360
you can't do that for everything but you

00:28:09,840 --> 00:28:12,880
know whatever we can use we'd like to

00:28:11,360 --> 00:28:14,640
use

00:28:12,880 --> 00:28:17,039
does that kind of answer the question

00:28:14,640 --> 00:28:17,039
yeah pretty

00:28:17,120 --> 00:28:20,240
one one thing i want to point out though

00:28:18,799 --> 00:28:22,240
is for the shim

00:28:20,240 --> 00:28:24,799
it's more clear how that works because

00:28:22,240 --> 00:28:26,320
the the cli would be pushing source code

00:28:24,799 --> 00:28:28,159
in its traditional flow and then that

00:28:26,320 --> 00:28:30,080
would convert it into an image that that

00:28:28,159 --> 00:28:32,159
kpak would use as a source

00:28:30,080 --> 00:28:34,399
for the desired app where you just keep

00:28:32,159 --> 00:28:36,000
cuddle apply a cr it's it's less clear

00:28:34,399 --> 00:28:37,279
where that source code comes from and i

00:28:36,000 --> 00:28:38,399
think that's what karen was

00:28:37,279 --> 00:28:40,559
talking about like maybe you have to

00:28:38,399 --> 00:28:41,200
give it a git repo or maybe you have to

00:28:40,559 --> 00:28:44,880
pre-build

00:28:41,200 --> 00:28:47,440
that that source image or provide a blob

00:28:44,880 --> 00:28:49,039
or something that that one i think is is

00:28:47,440 --> 00:28:51,360
fuzzier about what that workflow would

00:28:49,039 --> 00:28:51,360
look like

00:28:52,000 --> 00:28:57,200
yeah and if you're using git then it it

00:28:54,880 --> 00:28:59,120
opens other doors doesn't it like

00:28:57,200 --> 00:29:00,640
do you do you watch that git repo for

00:28:59,120 --> 00:29:02,399
changes and things like that and

00:29:00,640 --> 00:29:04,159
automatically build things automatically

00:29:02,399 --> 00:29:05,440
update or not um

00:29:04,159 --> 00:29:07,520
oh yeah and i think you kind of get into

00:29:05,440 --> 00:29:10,080
a spiraling

00:29:07,520 --> 00:29:11,039
uh you end up taking on the

00:29:10,080 --> 00:29:14,240
responsibilities of

00:29:11,039 --> 00:29:17,120
cicd pipeline at that point um

00:29:14,240 --> 00:29:17,679
which is kind of uh out of scope of the

00:29:17,120 --> 00:29:19,440
current

00:29:17,679 --> 00:29:22,240
uh implementation of cloud foundry and

00:29:19,440 --> 00:29:25,919
the user experience i do wonder whether

00:29:22,240 --> 00:29:27,600
um massive sort of leap away from how

00:29:25,919 --> 00:29:28,480
things currently work but whether there

00:29:27,600 --> 00:29:31,440
is a

00:29:28,480 --> 00:29:32,240
need for something like a ci cd pipeline

00:29:31,440 --> 00:29:35,279
build pack

00:29:32,240 --> 00:29:37,679
that you tell cloud foundry about where

00:29:35,279 --> 00:29:38,320
your app happens to live and what ci cd

00:29:37,679 --> 00:29:41,360
system

00:29:38,320 --> 00:29:42,799
you use um and

00:29:41,360 --> 00:29:44,559
there is a pipeline spawned and

00:29:42,799 --> 00:29:46,480
generated and set on whatever

00:29:44,559 --> 00:29:48,000
ci cd server that you have so then

00:29:46,480 --> 00:29:50,320
you've got that continuous

00:29:48,000 --> 00:29:51,760
pushing of things into cloud foundry

00:29:50,320 --> 00:29:53,520
because otherwise you've got that

00:29:51,760 --> 00:29:56,080
the the issue of with an imperative cf

00:29:53,520 --> 00:29:58,320
push even if that's uh you know

00:29:56,080 --> 00:29:59,679
affected via a cue cuddle apply it's a

00:29:58,320 --> 00:30:03,360
point in time right

00:29:59,679 --> 00:30:06,399
and that's kind of counter to

00:30:03,360 --> 00:30:07,600
uh the modern github's way of doing

00:30:06,399 --> 00:30:09,200
things and always it's

00:30:07,600 --> 00:30:09,700
been a kind of missing part of the

00:30:09,200 --> 00:30:12,779
picture

00:30:09,700 --> 00:30:12,779
[Music]

00:30:15,440 --> 00:30:19,600
yeah it'll probably become more clear

00:30:17,600 --> 00:30:21,840
over time what direction we want to go

00:30:19,600 --> 00:30:22,640
i would point out that capec already

00:30:21,840 --> 00:30:24,399
supports

00:30:22,640 --> 00:30:26,159
some of the stuff out of the box you can

00:30:24,399 --> 00:30:28,720
point it at a git repo

00:30:26,159 --> 00:30:30,480
um so theoretically speaking there's at

00:30:28,720 --> 00:30:31,120
least some prior art for doing things

00:30:30,480 --> 00:30:33,200
like that

00:30:31,120 --> 00:30:35,360
but yeah it's uh something where we

00:30:33,200 --> 00:30:38,159
gotta be careful because we don't wanna

00:30:35,360 --> 00:30:51,279
bite off too much before we're ready to

00:30:38,159 --> 00:30:52,480
support that guess my other feedback

00:30:51,279 --> 00:30:55,039
would have been

00:30:52,480 --> 00:30:55,840
like the the names that we give to to

00:30:55,039 --> 00:30:58,960
that entity

00:30:55,840 --> 00:31:01,039
like desired application or application

00:30:58,960 --> 00:31:05,279
manifest etc etc

00:31:01,039 --> 00:31:07,360
that at least to me kind of sounds like

00:31:05,279 --> 00:31:09,279
kind of the old implementation is

00:31:07,360 --> 00:31:10,159
shining through right so so i'm i'm kind

00:31:09,279 --> 00:31:13,440
of wondering

00:31:10,159 --> 00:31:15,760
why isn't that an application right

00:31:13,440 --> 00:31:16,559
like if that is the thing that an end

00:31:15,760 --> 00:31:19,200
user would

00:31:16,559 --> 00:31:20,960
want to create then i guess an end user

00:31:19,200 --> 00:31:22,960
would want to create an application

00:31:20,960 --> 00:31:25,679
at least kind of cloud foundry

00:31:22,960 --> 00:31:29,600
terminology

00:31:25,679 --> 00:31:30,799
but that's just naming right though

00:31:29,600 --> 00:31:32,640
yeah i think we'll definitely want to

00:31:30,799 --> 00:31:34,760
get the names right uh

00:31:32,640 --> 00:31:36,880
so that we don't leak through like old

00:31:34,760 --> 00:31:40,320
abstractions or

00:31:36,880 --> 00:31:43,279
um or just default to you know

00:31:40,320 --> 00:31:44,399
this is what we ported over from like

00:31:43,279 --> 00:31:46,880
cloud foundry

00:31:44,399 --> 00:31:47,919
like as is but the names don't quite

00:31:46,880 --> 00:31:50,960
match up to like

00:31:47,919 --> 00:31:50,960
expectations now

00:31:51,279 --> 00:31:55,440
um i need to drop for my other call but

00:31:54,000 --> 00:31:57,279
this has been a really great discussion

00:31:55,440 --> 00:32:00,880
thank you for switching the ordering

00:31:57,279 --> 00:32:04,159
um and maybe like next steps wise

00:32:00,880 --> 00:32:07,440
i know we have like um the next

00:32:04,159 --> 00:32:10,000
meeting in a couple of weeks um but

00:32:07,440 --> 00:32:12,559
i think like we've started to you know

00:32:10,000 --> 00:32:13,840
one thing might be looking at like

00:32:12,559 --> 00:32:15,519
a little bit more about like this

00:32:13,840 --> 00:32:17,120
desired app or app or however you want

00:32:15,519 --> 00:32:17,679
to call it like the front and face and

00:32:17,120 --> 00:32:19,679
like

00:32:17,679 --> 00:32:21,919
think about like how does this actually

00:32:19,679 --> 00:32:24,799
interact and like drive

00:32:21,919 --> 00:32:26,159
um some of these like other cf custom

00:32:24,799 --> 00:32:29,279
resources

00:32:26,159 --> 00:32:30,880
um so that we can you know share that

00:32:29,279 --> 00:32:31,519
out asynchronously and talk about that

00:32:30,880 --> 00:32:34,480
as a group

00:32:31,519 --> 00:32:34,480
in the next cig

00:32:34,880 --> 00:32:43,360
yep cool thanks folks

00:32:38,559 --> 00:32:46,799
thanks angelo

00:32:43,360 --> 00:32:49,279
so topic-wise i'm not sure if like

00:32:46,799 --> 00:32:49,840
we we have concluded on on this one or

00:32:49,279 --> 00:32:52,480
if there's

00:32:49,840 --> 00:32:54,240
like additional inputs for for this one

00:32:52,480 --> 00:32:56,320
and at the same time i

00:32:54,240 --> 00:32:57,279
cannot really completely judge how much

00:32:56,320 --> 00:33:01,519
time will take

00:32:57,279 --> 00:33:01,519
for for rams topic um

00:33:02,240 --> 00:33:05,519
so any any thoughts should we conclude

00:33:04,720 --> 00:33:09,440
for now on

00:33:05,519 --> 00:33:12,480
on the first topic on the crd

00:33:09,440 --> 00:33:15,200
or is there any additional aspects we

00:33:12,480 --> 00:33:15,200
should cover now

00:33:19,840 --> 00:33:24,399
i think we're good okay cool then i

00:33:23,200 --> 00:33:28,159
guess over to

00:33:24,399 --> 00:33:29,840
ram to ask his question directly and

00:33:28,159 --> 00:33:31,440
kind of give us a little bit more more

00:33:29,840 --> 00:33:33,600
context on

00:33:31,440 --> 00:33:35,200
where where the question is is coming

00:33:33,600 --> 00:33:38,559
from

00:33:35,200 --> 00:33:42,240
thanks ben um

00:33:38,559 --> 00:33:45,440
so the reason i

00:33:42,240 --> 00:33:49,360
uh put that question up there was

00:33:45,440 --> 00:33:52,720
uh because a lot of the

00:33:49,360 --> 00:33:54,720
sort of advocacy and the

00:33:52,720 --> 00:33:58,399
tutorials and the educational stuff that

00:33:54,720 --> 00:33:58,399
we've been putting out this far has

00:33:59,039 --> 00:34:04,000
typically been with regards to um

00:34:02,320 --> 00:34:05,760
here's how you deploy your java app

00:34:04,000 --> 00:34:08,879
place how you deploy a

00:34:05,760 --> 00:34:11,839
javascript app and you know if you are

00:34:08,879 --> 00:34:13,359
like real hipster here's how you do like

00:34:11,839 --> 00:34:16,639
react and prisma

00:34:13,359 --> 00:34:19,679
and whatever right so a lot of it has

00:34:16,639 --> 00:34:22,480
been focused on that

00:34:19,679 --> 00:34:22,879
developer experience and not an awful

00:34:22,480 --> 00:34:26,879
lot

00:34:22,879 --> 00:34:30,480
on the platform operations or

00:34:26,879 --> 00:34:34,399
some sort of like day two um

00:34:30,480 --> 00:34:36,639
stuff with regards to cf for kids and so

00:34:34,399 --> 00:34:38,079
we've been having to field a lot of

00:34:36,639 --> 00:34:41,599
questions in terms of

00:34:38,079 --> 00:34:43,679
how do i set up monitoring for my

00:34:41,599 --> 00:34:45,520
uh apps that are running in cf4k it's

00:34:43,679 --> 00:34:49,359
how do we set up

00:34:45,520 --> 00:34:52,480
like to give a very specific example

00:34:49,359 --> 00:34:55,440
um how do i set up like an elk

00:34:52,480 --> 00:34:57,599
uh stack equivalent for uh cf for kids

00:34:55,440 --> 00:35:00,960
and things like that so

00:34:57,599 --> 00:35:02,320
we've sort of been um getting a nudge

00:35:00,960 --> 00:35:04,340
towards the ops

00:35:02,320 --> 00:35:06,320
side of things a lot and

00:35:04,340 --> 00:35:09,520
[Music]

00:35:06,320 --> 00:35:11,280
i thought i could start with the folks

00:35:09,520 --> 00:35:13,920
who typically gather on this call in

00:35:11,280 --> 00:35:13,920
getting some

00:35:14,400 --> 00:35:17,920
wisdom some stories from you know the

00:35:17,119 --> 00:35:20,480
trenches

00:35:17,920 --> 00:35:22,400
what have you or um just in terms of

00:35:20,480 --> 00:35:25,119
high level design about

00:35:22,400 --> 00:35:25,599
um you know here's how we are thinking

00:35:25,119 --> 00:35:28,320
of

00:35:25,599 --> 00:35:30,640
incident management when it ah when it

00:35:28,320 --> 00:35:31,839
comes to cf for kids here's how it's

00:35:30,640 --> 00:35:34,720
been in the past

00:35:31,839 --> 00:35:35,760
here some refinements that we um imagine

00:35:34,720 --> 00:35:38,240
would be good

00:35:35,760 --> 00:35:39,359
um here's how it is with like vanilla

00:35:38,240 --> 00:35:42,320
kubernetes and so

00:35:39,359 --> 00:35:42,720
with cf um here are some of the changes

00:35:42,320 --> 00:35:45,280
that

00:35:42,720 --> 00:35:48,640
we thought might be useful so um

00:35:45,280 --> 00:35:51,760
anything with regards to like

00:35:48,640 --> 00:35:54,079
reading and managing logs um

00:35:51,760 --> 00:35:57,200
setting up alerts doing like prometheus

00:35:54,079 --> 00:36:00,560
grafana dashboards all of that

00:35:57,200 --> 00:36:13,839
i think is is useful information for me

00:36:00,560 --> 00:36:13,839
at this point

00:36:14,160 --> 00:36:26,560
that's run so any real world experiences

00:36:19,119 --> 00:36:28,400
while people are looking into cfo gates

00:36:26,560 --> 00:36:29,599
i can jump in here a little bit with our

00:36:28,400 --> 00:36:33,680
experience

00:36:29,599 --> 00:36:35,200
um so we built some custom dashboards

00:36:33,680 --> 00:36:37,680
and deployed prometheus

00:36:35,200 --> 00:36:39,200
operator and have grafana working with

00:36:37,680 --> 00:36:42,720
alerting and stuff like that

00:36:39,200 --> 00:36:45,920
we use it mainly to monitor the cf stack

00:36:42,720 --> 00:36:46,640
like latency and and uh the processing

00:36:45,920 --> 00:36:50,640
of

00:36:46,640 --> 00:36:50,640
uh istio how fast it can

00:36:51,359 --> 00:36:54,079
reconcile i guess whenever it's

00:36:52,880 --> 00:36:55,520
processing changes and it helps us

00:36:54,079 --> 00:36:58,240
decide when we need to scale up

00:36:55,520 --> 00:36:59,599
cfrks as we've been growing over 100

00:36:58,240 --> 00:37:02,720
apps now

00:36:59,599 --> 00:37:04,000
um so we've really liked the ability to

00:37:02,720 --> 00:37:06,400
scrape our apps

00:37:04,000 --> 00:37:08,320
you have the annotation support built in

00:37:06,400 --> 00:37:09,680
so it's pretty easy to add

00:37:08,320 --> 00:37:11,520
metrics to any of the apps that we

00:37:09,680 --> 00:37:12,800
deploy and you have a lot of metrics

00:37:11,520 --> 00:37:13,520
already available on a lot of the cf

00:37:12,800 --> 00:37:16,480
components

00:37:13,520 --> 00:37:18,400
so that's been great where we're seeing

00:37:16,480 --> 00:37:19,280
it lacking is in the log aggregation

00:37:18,400 --> 00:37:21,760
side of

00:37:19,280 --> 00:37:23,040
the cf system components we'd like to

00:37:21,760 --> 00:37:24,720
see something that

00:37:23,040 --> 00:37:26,560
could aggregate those logs we have

00:37:24,720 --> 00:37:28,880
something similar like on bosch with

00:37:26,560 --> 00:37:30,000
logger gator and we can ship those to

00:37:28,880 --> 00:37:31,839
elasticsearch and

00:37:30,000 --> 00:37:33,920
get those logs and have a learning based

00:37:31,839 --> 00:37:34,880
on those logs but since we have multiple

00:37:33,920 --> 00:37:37,200
replicas of

00:37:34,880 --> 00:37:39,200
the cf components now it gets difficult

00:37:37,200 --> 00:37:40,560
to understand errors when they happen

00:37:39,200 --> 00:37:41,040
because we have to be checking a lot of

00:37:40,560 --> 00:37:43,040
different

00:37:41,040 --> 00:37:44,720
pods and then containers inside those

00:37:43,040 --> 00:37:46,720
pods as well

00:37:44,720 --> 00:37:48,400
so that's kind of where we've had and

00:37:46,720 --> 00:37:50,320
especially as you guys talked about

00:37:48,400 --> 00:37:52,320
moving more to custom resources

00:37:50,320 --> 00:37:53,920
understanding like the latency of when

00:37:52,320 --> 00:37:55,200
those are getting processed or where

00:37:53,920 --> 00:38:05,839
things are going wrong i think is going

00:37:55,200 --> 00:38:05,839
to be really important

00:38:08,079 --> 00:38:12,800
yeah so so regarding locks processing so

00:38:11,760 --> 00:38:16,079
so it sounds like

00:38:12,800 --> 00:38:19,040
you're indeed like looking into

00:38:16,079 --> 00:38:21,599
the the kubernetes locks directly to to

00:38:19,040 --> 00:38:24,400
kind of get an understanding of

00:38:21,599 --> 00:38:25,760
where the system is right so as opposed

00:38:24,400 --> 00:38:27,760
to i don't know

00:38:25,760 --> 00:38:30,560
having a demon set that kind of collects

00:38:27,760 --> 00:38:32,400
all the locks and streams them out to

00:38:30,560 --> 00:38:34,560
kind of a completely separate system

00:38:32,400 --> 00:38:34,560
like

00:38:35,520 --> 00:38:39,040
lobster kibana et cetera et cetera stack

00:38:38,240 --> 00:38:42,000
or to

00:38:39,040 --> 00:38:43,839
to kind of analyze the logs there right

00:38:42,000 --> 00:38:45,680
and since if for case deploys

00:38:43,839 --> 00:38:48,000
fluentd already it would be great if we

00:38:45,680 --> 00:38:50,880
had some ability to customize it and

00:38:48,000 --> 00:38:50,880
ship those out to

00:38:58,839 --> 00:39:01,839
elasticsearch

00:39:05,119 --> 00:39:08,480
i think like right now you push and if

00:39:07,280 --> 00:39:10,960
you get an error from

00:39:08,480 --> 00:39:12,560
cf push you're kind of lost at where to

00:39:10,960 --> 00:39:14,240
look next and then if you have

00:39:12,560 --> 00:39:16,240
scale it becomes really difficult to

00:39:14,240 --> 00:39:17,839
find out why that error occurred

00:39:16,240 --> 00:39:19,280
especially if it just says some generic

00:39:17,839 --> 00:39:20,480
error message like package failed to

00:39:19,280 --> 00:39:21,839
upload or

00:39:20,480 --> 00:39:29,839
something like that which i've seen

00:39:21,839 --> 00:39:29,839
quite a bit in the slack

00:39:32,079 --> 00:39:37,920
yeah i guess like when when it comes to

00:39:35,440 --> 00:39:39,520
when it comes to to scale at least in

00:39:37,920 --> 00:39:41,760
the bosch based world

00:39:39,520 --> 00:39:43,839
i think as as you mentioned our approach

00:39:41,760 --> 00:39:46,880
always has been like

00:39:43,839 --> 00:39:49,040
extract everything to

00:39:46,880 --> 00:39:51,200
other more specialized systems and kind

00:39:49,040 --> 00:39:54,720
of to do the heavy lifting there

00:39:51,200 --> 00:39:58,720
that's i guess also why we

00:39:54,720 --> 00:39:59,760
like at scale have been facing and

00:39:58,720 --> 00:40:02,240
continue to face

00:39:59,760 --> 00:40:03,839
issues with like logregator as kind of a

00:40:02,240 --> 00:40:06,480
built-in

00:40:03,839 --> 00:40:07,599
aggregation system in kind of classical

00:40:06,480 --> 00:40:10,800
foundry

00:40:07,599 --> 00:40:11,680
and i guess from from our experience we

00:40:10,800 --> 00:40:15,200
would have

00:40:11,680 --> 00:40:16,720
loved to to kind of just take all the

00:40:15,200 --> 00:40:19,119
locks and do as little

00:40:16,720 --> 00:40:21,119
log processing in cloud foundry itself

00:40:19,119 --> 00:40:23,599
as possible and kind of

00:40:21,119 --> 00:40:24,720
allow external systems to to do all the

00:40:23,599 --> 00:40:26,640
heavy lifting

00:40:24,720 --> 00:40:30,079
but that's at least as i said our

00:40:26,640 --> 00:40:32,480
experience from from a wash-based board

00:40:30,079 --> 00:40:34,079
yeah we have a bosch base deployment as

00:40:32,480 --> 00:40:36,400
well that's fairly large and

00:40:34,079 --> 00:40:37,119
we collect all the from logger creator

00:40:36,400 --> 00:40:38,960
and ship it off

00:40:37,119 --> 00:40:40,560
to log stash as well and that's where we

00:40:38,960 --> 00:40:41,280
do most of the heavy lifting is in log

00:40:40,560 --> 00:40:43,200
stash

00:40:41,280 --> 00:40:44,319
i think something similar using fluentd

00:40:43,200 --> 00:40:46,720
on kubernetes

00:40:44,319 --> 00:40:48,400
and operators can choose where to ship

00:40:46,720 --> 00:40:50,079
their logs using fluid d since there's a

00:40:48,400 --> 00:40:53,839
ton of plugins for that already

00:40:50,079 --> 00:40:53,839
i think that would be a great first step

00:41:04,960 --> 00:41:08,560
and i guess to to rum's initial question

00:41:07,680 --> 00:41:11,760
i i believe

00:41:08,560 --> 00:41:14,400
like in in reality the kind of

00:41:11,760 --> 00:41:15,680
operational experience with cfo kate's

00:41:14,400 --> 00:41:17,920
deployments

00:41:15,680 --> 00:41:18,960
compared to to bosch managed deployments

00:41:17,920 --> 00:41:22,000
is just

00:41:18,960 --> 00:41:26,079
very very small still unless

00:41:22,000 --> 00:41:26,079
somebody says no no no like there's

00:41:26,240 --> 00:41:30,880
quite large deployments but yeah at the

00:41:28,800 --> 00:41:34,079
moment

00:41:30,880 --> 00:41:37,119
i would say experience is small

00:41:34,079 --> 00:41:48,480
compared to what we know from like bosch

00:41:37,119 --> 00:41:50,800
managed cf

00:41:48,480 --> 00:41:53,680
and probably also if i look into the

00:41:50,800 --> 00:41:56,720
kubernetes space

00:41:53,680 --> 00:41:57,920
i'm not sure if like okay yeah on on the

00:41:56,720 --> 00:42:01,040
metric sides

00:41:57,920 --> 00:42:02,319
uh maybe but on on the logging site i

00:42:01,040 --> 00:42:04,400
don't see

00:42:02,319 --> 00:42:06,240
kind of a complete standardization but i

00:42:04,400 --> 00:42:10,880
see just a bunch of

00:42:06,240 --> 00:42:10,880
solutions that people use there

00:42:10,960 --> 00:42:15,359
on on the metric side of the house i

00:42:12,720 --> 00:42:19,040
guess prometheus is kind of what

00:42:15,359 --> 00:42:19,040
most people choose but yeah

00:42:27,200 --> 00:42:30,240
so not sure anybody else has some some

00:42:29,280 --> 00:42:33,599
additional

00:42:30,240 --> 00:42:33,599
answers for forum

00:42:35,839 --> 00:42:39,760
i guess another aspect you had around

00:42:37,440 --> 00:42:42,240
was like

00:42:39,760 --> 00:42:44,079
comparing that to vanilla kubernetes and

00:42:42,240 --> 00:42:48,000
what people are doing there for for

00:42:44,079 --> 00:42:50,960
locks and metrics right yeah i mean

00:42:48,000 --> 00:42:51,760
generally speaking i just wanted to find

00:42:50,960 --> 00:42:55,040
out if

00:42:51,760 --> 00:42:58,560
from a platform design perspective

00:42:55,040 --> 00:43:00,880
if we are taking any steps

00:42:58,560 --> 00:43:02,880
in the design of cfr games or if you're

00:43:00,880 --> 00:43:04,160
taking anything into consideration with

00:43:02,880 --> 00:43:07,040
repairs2

00:43:04,160 --> 00:43:08,160
um let's do you know log management this

00:43:07,040 --> 00:43:11,280
way let's do

00:43:08,160 --> 00:43:13,520
uh metrics this way and it's to

00:43:11,280 --> 00:43:14,880
alerts this way or are we just leaving

00:43:13,520 --> 00:43:18,400
it to um

00:43:14,880 --> 00:43:20,560
you know here's standard sort of

00:43:18,400 --> 00:43:21,520
api formats and let folks just hook

00:43:20,560 --> 00:43:26,960
their tools in

00:43:21,520 --> 00:43:26,960
and grab the stuff that they

00:43:39,200 --> 00:43:42,240
i guess no definitive answer from this

00:43:41,680 --> 00:43:44,720
round

00:43:42,240 --> 00:43:44,720
it seems

00:43:50,720 --> 00:43:56,079
okay so

00:43:54,000 --> 00:43:57,119
yeah i'm not sure any any additional

00:43:56,079 --> 00:43:59,280
aspects to

00:43:57,119 --> 00:44:00,720
the set of questions that the drum raced

00:43:59,280 --> 00:44:02,640
or

00:44:00,720 --> 00:44:03,839
we need to leave it with with what we

00:44:02,640 --> 00:44:09,839
what we've

00:44:03,839 --> 00:44:09,839
mentioned so far

00:44:11,119 --> 00:44:17,920
yes it's probably the latter

00:44:14,480 --> 00:44:20,400
interpreting the silence so yeah any

00:44:17,920 --> 00:44:22,640
any additional topics that we should

00:44:20,400 --> 00:44:23,920
cover in like the remaining 15 minutes

00:44:22,640 --> 00:44:27,440
any

00:44:23,920 --> 00:44:30,000
things that people want to

00:44:27,440 --> 00:44:30,000
discuss

00:44:33,200 --> 00:44:38,240
the only thing i'm going to mention is

00:44:34,720 --> 00:44:42,240
with our sort of exploratory spike work

00:44:38,240 --> 00:44:45,760
we have moved that to a publicly visible

00:44:42,240 --> 00:44:48,400
github repository so

00:44:45,760 --> 00:44:51,280
we we'd love for people to take a look

00:44:48,400 --> 00:44:52,960
at it and like comment uh but it's also

00:44:51,280 --> 00:44:54,560
particularly named as an explorations

00:44:52,960 --> 00:44:57,040
repo so

00:44:54,560 --> 00:44:58,400
uh don't get too scared if you see

00:44:57,040 --> 00:45:01,119
something that looks

00:44:58,400 --> 00:45:02,400
like sub-optimal or whatever uh that's

00:45:01,119 --> 00:45:04,720
the purpose of it is we're

00:45:02,400 --> 00:45:06,880
we're just trying to uh sort of get some

00:45:04,720 --> 00:45:10,240
stuff down and start exploring it

00:45:06,880 --> 00:45:11,920
so everything's malleable um

00:45:10,240 --> 00:45:13,760
but you know it's also available for

00:45:11,920 --> 00:45:15,599
everyone to take a look at

00:45:13,760 --> 00:45:17,200
so that's just what i wanted to point

00:45:15,599 --> 00:45:19,119
out before anyone gets too scared about

00:45:17,200 --> 00:45:20,720
things

00:45:19,119 --> 00:45:22,560
tim has has put the link to the

00:45:20,720 --> 00:45:25,599
repository in into the chat

00:45:22,560 --> 00:45:27,280
so it's under the cloud foundry

00:45:25,599 --> 00:45:29,599
organization so

00:45:27,280 --> 00:45:31,119
people should be able to find it for

00:45:29,599 --> 00:45:32,800
those of us not following the projects

00:45:31,119 --> 00:45:35,920
as close as perhaps we should

00:45:32,800 --> 00:45:38,560
um are things still

00:45:35,920 --> 00:45:40,079
very much in an exploratory kind of uh

00:45:38,560 --> 00:45:43,440
finding our way in spiking

00:45:40,079 --> 00:45:46,400
sort of phase and have any vendors

00:45:43,440 --> 00:45:47,920
committed to commercializing

00:45:46,400 --> 00:45:50,480
a case-based distribution of cloud

00:45:47,920 --> 00:45:50,480
foundry yep

00:45:52,240 --> 00:45:55,599
we're pretty much doing the sort of

00:45:54,560 --> 00:45:59,599
exploration

00:45:55,599 --> 00:46:01,040
phase right now i am probably not the

00:45:59,599 --> 00:46:02,800
right person to talk about any

00:46:01,040 --> 00:46:05,280
commercialization of this stuff

00:46:02,800 --> 00:46:06,960
since i try to focus my efforts on a lot

00:46:05,280 --> 00:46:09,680
of the open source space

00:46:06,960 --> 00:46:10,480
and making sure that's in good shape uh

00:46:09,680 --> 00:46:13,119
but

00:46:10,480 --> 00:46:14,000
at this point basically we want to see

00:46:13,119 --> 00:46:16,800
what that world

00:46:14,000 --> 00:46:17,680
looks like so because we've been

00:46:16,800 --> 00:46:20,720
focusing on

00:46:17,680 --> 00:46:23,520
cf for kate's and like working as a

00:46:20,720 --> 00:46:24,079
like a cloud foundry on kubernetes and

00:46:23,520 --> 00:46:27,440
we get it

00:46:24,079 --> 00:46:29,359
in relatively stable uh shape

00:46:27,440 --> 00:46:30,640
we are now able to devote a little bit

00:46:29,359 --> 00:46:34,000
more attention to

00:46:30,640 --> 00:46:36,000
thinking like okay so going forward what

00:46:34,000 --> 00:46:37,680
might the world look like if we decided

00:46:36,000 --> 00:46:38,640
to sort of change some of these things

00:46:37,680 --> 00:46:41,520
up

00:46:38,640 --> 00:46:42,480
and uh you know sort of don't get

00:46:41,520 --> 00:46:47,040
stagnant

00:46:42,480 --> 00:46:47,040
keep exploring if that makes sense

00:46:48,240 --> 00:46:52,160
tim do you have any uh any thoughts you

00:46:49,760 --> 00:46:52,160
want to offer

00:46:53,200 --> 00:46:56,880
no that um well you just said resonates

00:46:56,400 --> 00:47:10,880
with me

00:46:56,880 --> 00:47:15,839
nothing to add any last

00:47:10,880 --> 00:47:15,839
last minute topics questions

00:47:18,079 --> 00:47:22,559
if not i guess we can close a little bit

00:47:21,839 --> 00:47:24,960
earlier

00:47:22,559 --> 00:47:27,280
thank you very much for now and i'll

00:47:24,960 --> 00:47:28,319
send out the call for next time and i

00:47:27,280 --> 00:47:31,520
believe angela

00:47:28,319 --> 00:47:35,359
already made an offer to to kind of

00:47:31,520 --> 00:47:38,319
uh follow up on the progress of the

00:47:35,359 --> 00:47:40,160
investigation next time so we'll check

00:47:38,319 --> 00:47:42,559
it from there

00:47:40,160 --> 00:47:44,640
thanks everybody and have a great day

00:47:42,559 --> 00:47:53,839
cool thanks very much everybody

00:47:44,640 --> 00:47:53,839
bye thanks bye

00:47:56,640 --> 00:47:58,720

YouTube URL: https://www.youtube.com/watch?v=3_h9c9Xy8yM


