Title: Deploying Cloud Foundry Services to OpenStack with the Apache Brooklyn Service Broker
Publication date: 2017-05-16
Playlist: Cloud Foundry Day at OpenStack Summit 2017
Description: 
	The Open Service Broker API provides a means of adding new services to your Cloud Foundry application, but usually that means creating a new service broker for each additional service. In this talk, we demonstrate the Brooklyn service broker, which utilizes the open source application blueprinting and management platform Apache Brooklyn to deploy a multitude of services on OpenStack with a single service broker.In this talk, Robert Moss will give examples of services from a range of NoSQL and an
Captions: 
	00:00:04,390 --> 00:00:12,589
hey good seal I'm going to be talking

00:00:09,800 --> 00:00:15,080
about deploying Cloud Foundry services

00:00:12,589 --> 00:00:18,769
to OpenStack using the Apache Brooklyn

00:00:15,080 --> 00:00:24,920
service broker my name's Robert Moss I

00:00:18,769 --> 00:00:28,369
work for cloud soft so why use Apache

00:00:24,920 --> 00:00:31,939
Brooklyn to do this well Apache Brooklyn

00:00:28,369 --> 00:00:34,880
allows you to model deploy and manage

00:00:31,939 --> 00:00:37,250
services and it does this using a blue

00:00:34,880 --> 00:00:40,820
printing mechanism so you can

00:00:37,250 --> 00:00:44,830
declaratively specify what your service

00:00:40,820 --> 00:00:48,200
should look like you can compose

00:00:44,830 --> 00:00:51,170
blueprints either using supported

00:00:48,200 --> 00:00:54,140
components that are part of the Brooklyn

00:00:51,170 --> 00:00:58,430
ecosystem already or indeed write your

00:00:54,140 --> 00:01:04,640
own Brooklyn automatically configures

00:00:58,430 --> 00:01:07,640
the components and wires them up so if

00:01:04,640 --> 00:01:09,859
it's a service that has multiple

00:01:07,640 --> 00:01:12,229
machines they need wiring up it will

00:01:09,859 --> 00:01:15,130
take care of that for you it will also

00:01:12,229 --> 00:01:19,310
monitor key metrics about the service

00:01:15,130 --> 00:01:21,799
and perform policy based management so

00:01:19,310 --> 00:01:24,619
you can have confidence that while the

00:01:21,799 --> 00:01:25,429
service is running it's going to be

00:01:24,619 --> 00:01:28,249
taken care of

00:01:25,429 --> 00:01:33,140
rather than just deploy and forget about

00:01:28,249 --> 00:01:34,999
the service so the way that we bring

00:01:33,140 --> 00:01:37,399
these services into cloud foundry is

00:01:34,999 --> 00:01:41,539
with the Apache Brooklyn service broker

00:01:37,399 --> 00:01:44,420
and that allows us to create and deploy

00:01:41,539 --> 00:01:47,210
brooklyn manage services using the same

00:01:44,420 --> 00:01:50,329
blueprints there are stored in

00:01:47,210 --> 00:01:53,749
Brooklyn's catalog but slightly

00:01:50,329 --> 00:01:58,450
augmented with a syntax that the service

00:01:53,749 --> 00:02:03,280
broker understands so one of the key

00:01:58,450 --> 00:02:09,590
abstractions in Brooklyn is a location

00:02:03,280 --> 00:02:11,230
this is the way that Brooklyn ions out

00:02:09,590 --> 00:02:14,440
many of the differences between

00:02:11,230 --> 00:02:18,930
different clouds

00:02:14,440 --> 00:02:21,700
usually these different cloud locations

00:02:18,930 --> 00:02:25,020
the provisioning tasks will be carried

00:02:21,700 --> 00:02:29,980
out by Apache J clouds behind the scenes

00:02:25,020 --> 00:02:35,080
you can configure up the locations to

00:02:29,980 --> 00:02:37,690
include a wide range of configuration

00:02:35,080 --> 00:02:44,170
properties such as images and machine

00:02:37,690 --> 00:02:46,630
specs so this is what setting up a

00:02:44,170 --> 00:02:51,550
location looks like it's very simple

00:02:46,630 --> 00:02:54,940
Yama this is in fact a Brooklyn bomb

00:02:51,550 --> 00:02:57,880
file which is just the Brooklyn object

00:02:54,940 --> 00:03:00,430
model it describes items that should go

00:02:57,880 --> 00:03:05,860
into Brooklyn's catalog so in this case

00:03:00,430 --> 00:03:07,840
we've got an open stack location so you

00:03:05,860 --> 00:03:12,940
can see from the item type that it's a

00:03:07,840 --> 00:03:15,460
location the driver that it's using is a

00:03:12,940 --> 00:03:19,840
Jay clouds driver for OpenStack Nova and

00:03:15,460 --> 00:03:23,230
it's it's got three basic configuration

00:03:19,840 --> 00:03:25,540
properties they're an endpoint identity

00:03:23,230 --> 00:03:29,020
using the tenant and username for

00:03:25,540 --> 00:03:30,610
OpenStack and a credential and then some

00:03:29,020 --> 00:03:35,530
further configuration that you might

00:03:30,610 --> 00:03:37,180
want to include for this location so

00:03:35,530 --> 00:03:40,120
some of these additional configurations

00:03:37,180 --> 00:03:43,540
could be the image ID that you might

00:03:40,120 --> 00:03:47,260
want to deploy the software using the

00:03:43,540 --> 00:03:52,090
hardware types so that's the flavors you

00:03:47,260 --> 00:03:55,030
might want to set the users that will be

00:03:52,090 --> 00:03:58,600
used to login to the to the image any

00:03:55,030 --> 00:04:01,570
floating IPs and then some further

00:03:58,600 --> 00:04:04,510
templating options such as any networks

00:04:01,570 --> 00:04:08,230
that you might have configured floating

00:04:04,510 --> 00:04:13,989
IP pools and security groups or key

00:04:08,230 --> 00:04:16,030
pairs so once you've got the the bomb

00:04:13,989 --> 00:04:18,220
file and you want to add it to Brooklyn

00:04:16,030 --> 00:04:22,240
it's just a simple be our catalog add

00:04:18,220 --> 00:04:24,729
and then the name of the file so that

00:04:22,240 --> 00:04:27,460
gets that gets your location into

00:04:24,729 --> 00:04:28,729
briefing so you can now use that as the

00:04:27,460 --> 00:04:30,770
deployment location

00:04:28,729 --> 00:04:32,779
for any of your blueprints that you

00:04:30,770 --> 00:04:37,150
might want to model your service using

00:04:32,779 --> 00:04:39,979
so how do we go about modeling a service

00:04:37,150 --> 00:04:45,379
well it's very similar to setting up the

00:04:39,979 --> 00:04:47,870
location again it's a catalog item this

00:04:45,379 --> 00:04:51,169
is a very special catalog item because

00:04:47,870 --> 00:04:56,509
it contains a section called broker dot

00:04:51,169 --> 00:04:59,719
config and that means that the service

00:04:56,509 --> 00:05:03,379
broker will be able to read part of this

00:04:59,719 --> 00:05:06,710
blueprint and formulate its catalog

00:05:03,379 --> 00:05:11,899
items so that the plans of the service

00:05:06,710 --> 00:05:14,149
that might be required so much of the

00:05:11,899 --> 00:05:16,309
metadata here is picked up by the

00:05:14,149 --> 00:05:19,960
service broker and it creates the

00:05:16,309 --> 00:05:24,979
catalog according to the Cloud Foundry

00:05:19,960 --> 00:05:30,399
service broker API soon to be the open

00:05:24,979 --> 00:05:36,830
service broker API and the way that

00:05:30,399 --> 00:05:40,909
plans work in these blueprints is the

00:05:36,830 --> 00:05:42,560
plan config section defines how you

00:05:40,909 --> 00:05:44,839
would like the service to be configured

00:05:42,560 --> 00:05:48,080
differently for the different plans that

00:05:44,839 --> 00:05:52,879
you might set up so we'll take a look at

00:05:48,080 --> 00:05:55,279
that in a minute so I mentioned that

00:05:52,879 --> 00:05:59,149
there are some supported components in

00:05:55,279 --> 00:06:03,469
the in the Brooklyn ecosystem that you

00:05:59,149 --> 00:06:08,330
might want to fill out that that

00:06:03,469 --> 00:06:10,099
services block at the bottom so if

00:06:08,330 --> 00:06:12,139
you're if you're looking for a kind of

00:06:10,099 --> 00:06:14,930
search type service you you might use a

00:06:12,139 --> 00:06:16,729
patchy soiler or elastic search if you

00:06:14,930 --> 00:06:20,930
need a relational database

00:06:16,729 --> 00:06:25,370
Mariya DB mysql Postgres or if you're

00:06:20,930 --> 00:06:29,800
doing messaging perhaps apache cupid or

00:06:25,370 --> 00:06:34,849
a patch Kafka ActiveMQ or rabbitmq

00:06:29,800 --> 00:06:37,339
there's various no sequel solutions

00:06:34,849 --> 00:06:40,490
available as well such as Apache

00:06:37,339 --> 00:06:41,980
Cassandra patchy couchdb Redis react

00:06:40,490 --> 00:06:46,300
Couchbase not

00:06:41,980 --> 00:06:48,460
DB and others as well I've got patchy

00:06:46,300 --> 00:06:52,210
storm Apaches zookeeper and bind listed

00:06:48,460 --> 00:06:56,170
there as well a blueprint stock cloud

00:06:52,210 --> 00:07:02,230
software we've got 60 plus blueprints

00:06:56,170 --> 00:07:06,370
and it can be used so if we're going to

00:07:02,230 --> 00:07:10,530
compose a blueprint from the supported

00:07:06,370 --> 00:07:16,510
components then we just need to set the

00:07:10,530 --> 00:07:19,420
service type to the namespace and type

00:07:16,510 --> 00:07:23,230
that's included in me in the component

00:07:19,420 --> 00:07:26,500
and then fill out that broke a config

00:07:23,230 --> 00:07:28,630
plans section with the particular config

00:07:26,500 --> 00:07:31,480
that you want for the plan so in this

00:07:28,630 --> 00:07:32,980
case we've got a clustered service and

00:07:31,480 --> 00:07:36,760
we want to set the initial size of the

00:07:32,980 --> 00:07:39,850
cluster to three and that's done with

00:07:36,760 --> 00:07:43,980
the conflict key they're clustered our

00:07:39,850 --> 00:07:53,170
initial size so you can see this is a

00:07:43,980 --> 00:07:56,220
MongoDB replica set service or you can

00:07:53,170 --> 00:07:59,080
compose your own blueprints as well so

00:07:56,220 --> 00:08:01,180
there's a particular component code of

00:07:59,080 --> 00:08:03,960
vanilla software process where it's

00:08:01,180 --> 00:08:07,750
config keys allow you to specify the

00:08:03,960 --> 00:08:10,750
launch commands or the check running or

00:08:07,750 --> 00:08:13,360
stop commands that will be used while

00:08:10,750 --> 00:08:17,310
the services running and these are

00:08:13,360 --> 00:08:19,870
simply bash commands we've also got

00:08:17,310 --> 00:08:22,770
sensors and effectors that are key

00:08:19,870 --> 00:08:25,570
abstractions within Brooklyn as well and

00:08:22,770 --> 00:08:28,450
that allows you to monitor what's going

00:08:25,570 --> 00:08:32,260
on in the service and again these are

00:08:28,450 --> 00:08:34,870
set up typically using SSH commands so

00:08:32,260 --> 00:08:38,740
the sensors will be continually running

00:08:34,870 --> 00:08:41,320
the SSH command to to watch what's going

00:08:38,740 --> 00:08:45,360
on in the service or the effector might

00:08:41,320 --> 00:08:49,980
run a command to change it in some way

00:08:45,360 --> 00:08:49,980
so once we're ready to deploy

00:08:51,420 --> 00:08:58,560
we need to first import the catalog into

00:08:55,230 --> 00:09:02,370
Cloud Foundry and the way that this is

00:08:58,560 --> 00:09:05,970
done is the apache brooklyn service

00:09:02,370 --> 00:09:08,730
broker queries brooklyn for for

00:09:05,970 --> 00:09:12,930
Brooklyn's catalog and then it creates

00:09:08,730 --> 00:09:15,380
its own catalog based on those it uses

00:09:12,930 --> 00:09:20,610
only the catalog items that have that

00:09:15,380 --> 00:09:23,269
broker top metadata field in it and this

00:09:20,610 --> 00:09:26,100
is done every time a service broker

00:09:23,269 --> 00:09:32,010
create service broker command is issued

00:09:26,100 --> 00:09:33,959
or update service broker the service

00:09:32,010 --> 00:09:36,959
broker itself can be configured with a

00:09:33,959 --> 00:09:40,260
default as our default deployment

00:09:36,959 --> 00:09:45,899
location such as the location that we

00:09:40,260 --> 00:09:47,850
created earlier using OpenStack and this

00:09:45,899 --> 00:09:50,070
is very simply done by setting an

00:09:47,850 --> 00:09:52,680
environment variable but if you wanted

00:09:50,070 --> 00:09:55,050
to have individual plans that deploy to

00:09:52,680 --> 00:09:57,600
different target locations you could

00:09:55,050 --> 00:10:02,610
also specify that within the plan

00:09:57,600 --> 00:10:06,170
metadata so these Cloud Foundry commands

00:10:02,610 --> 00:10:08,870
should be fairly familiar to most people

00:10:06,170 --> 00:10:13,260
once you've created the service broker

00:10:08,870 --> 00:10:15,560
you can have a look at the access of all

00:10:13,260 --> 00:10:20,760
of the plans that have been imported and

00:10:15,560 --> 00:10:24,890
enable those particular services to the

00:10:20,760 --> 00:10:28,350
marketplaces of the different organ

00:10:24,890 --> 00:10:31,589
within Cloud Foundry so once we're ready

00:10:28,350 --> 00:10:33,779
to create a service we issue the create

00:10:31,589 --> 00:10:36,779
service command using this standard

00:10:33,779 --> 00:10:41,130
syntax CF create service with the

00:10:36,779 --> 00:10:44,430
service name plan and instance name and

00:10:41,130 --> 00:10:47,850
when this happens the broker looks up

00:10:44,430 --> 00:10:51,269
the relevant catalog item and it reads

00:10:47,850 --> 00:10:56,699
that broker dot config section to get

00:10:51,269 --> 00:11:00,959
the plan details it then generates a new

00:10:56,699 --> 00:11:05,529
blueprint bit specifically configured

00:11:00,959 --> 00:11:10,250
with the config section from that

00:11:05,529 --> 00:11:13,279
from from that plan and and fills in the

00:11:10,250 --> 00:11:16,250
location this generated blueprint is

00:11:13,279 --> 00:11:20,329
then sent to Brooklyn for it to deploy

00:11:16,250 --> 00:11:24,100
to the location specified the state of

00:11:20,329 --> 00:11:27,410
the broker is stored in Brooklyn in a

00:11:24,100 --> 00:11:29,389
particular entity called the repository

00:11:27,410 --> 00:11:31,129
we'll talk a little bit about entities

00:11:29,389 --> 00:11:33,470
in a moment

00:11:31,129 --> 00:11:37,430
this simply stores the mapping between

00:11:33,470 --> 00:11:41,959
the the Cloud Foundry ID and the

00:11:37,430 --> 00:11:44,779
Brooklyn ID so that the broker can query

00:11:41,959 --> 00:11:47,920
the state of the particular running

00:11:44,779 --> 00:11:53,810
service at any point during a

00:11:47,920 --> 00:11:56,930
synchronous provisioning or update once

00:11:53,810 --> 00:11:59,540
the service has been created we can do a

00:11:56,930 --> 00:12:03,110
CF bind service to bind it to the

00:11:59,540 --> 00:12:05,480
application and then restage to ensure

00:12:03,110 --> 00:12:09,079
that the environment variables are

00:12:05,480 --> 00:12:13,970
updated with the credentials that are

00:12:09,079 --> 00:12:17,420
passed back from the broker so to

00:12:13,970 --> 00:12:21,769
reiterate the broker queries Brooklyn

00:12:17,420 --> 00:12:25,579
during bind to get all of the sensors

00:12:21,769 --> 00:12:27,620
that are that are monitoring the service

00:12:25,579 --> 00:12:31,279
at that particular time and it sends a

00:12:27,620 --> 00:12:35,149
snapshot of those sensors within a

00:12:31,279 --> 00:12:39,769
credentials block and that sends it back

00:12:35,149 --> 00:12:44,120
to the to Cloud Foundry to populate the

00:12:39,769 --> 00:12:48,139
recap services variable you can specify

00:12:44,120 --> 00:12:51,740
within the broker dot config section if

00:12:48,139 --> 00:12:54,649
you like a white list or a black list to

00:12:51,740 --> 00:12:58,009
make sure that certain sensors are not

00:12:54,649 --> 00:13:00,189
sent back in the credentials object as

00:12:58,009 --> 00:13:00,189
well

00:13:02,110 --> 00:13:08,020
so onto management after all this is one

00:13:05,950 --> 00:13:08,740
of the key reasons for using Apache

00:13:08,020 --> 00:13:14,680
Brooklyn

00:13:08,740 --> 00:13:20,350
I just want to explain a couple of key

00:13:14,680 --> 00:13:23,410
abstractions the main abstraction that

00:13:20,350 --> 00:13:25,960
we use is called an entity which just

00:13:23,410 --> 00:13:28,320
represents a particular resource under

00:13:25,960 --> 00:13:31,620
management whether that's a particular

00:13:28,320 --> 00:13:34,420
virtual machine or a software process

00:13:31,620 --> 00:13:37,080
these are arranged in a hierarchical

00:13:34,420 --> 00:13:42,280
fashion and they have events and

00:13:37,080 --> 00:13:43,720
operations with processing logic they

00:13:42,280 --> 00:13:47,710
also have a lifecycle

00:13:43,720 --> 00:13:51,420
such as start/stop and these are tracked

00:13:47,710 --> 00:13:55,000
with tasks and that allows operators to

00:13:51,420 --> 00:13:59,320
to look inside the service and and see

00:13:55,000 --> 00:14:06,270
how it's been processing up to this

00:13:59,320 --> 00:14:09,910
point so I mentioned sensors earlier

00:14:06,270 --> 00:14:13,240
sensors monitor the state of a service

00:14:09,910 --> 00:14:15,940
and these are typically done with SSH

00:14:13,240 --> 00:14:18,100
commands defined in the blueprint as we

00:14:15,940 --> 00:14:20,980
saw earlier and they can run

00:14:18,100 --> 00:14:23,560
periodically or indeed just once and

00:14:20,980 --> 00:14:26,530
they're often used to expose endpoints

00:14:23,560 --> 00:14:31,150
or credentials of the service as well as

00:14:26,530 --> 00:14:35,200
any of our key matrix effectors they

00:14:31,150 --> 00:14:39,820
change the state of the service so again

00:14:35,200 --> 00:14:42,880
using an SSH command that is defined in

00:14:39,820 --> 00:14:46,570
the blueprint it will run whenever it's

00:14:42,880 --> 00:14:49,510
triggered and these could be used for

00:14:46,570 --> 00:14:52,870
instance to scale out clustered services

00:14:49,510 --> 00:14:57,250
by adding nodes or change the service in

00:14:52,870 --> 00:15:00,460
some way and policies so policy based

00:14:57,250 --> 00:15:03,370
management allows you to combine the

00:15:00,460 --> 00:15:06,910
power of the sensors and effectors to

00:15:03,370 --> 00:15:09,850
act automatically so you could for

00:15:06,910 --> 00:15:13,470
instance monitor for failure within the

00:15:09,850 --> 00:15:15,340
application and then affect recovery or

00:15:13,470 --> 00:15:18,430
you might want to

00:15:15,340 --> 00:15:24,490
monitor for usage and then auto-scale

00:15:18,430 --> 00:15:25,870
the service so let's take a closer look

00:15:24,490 --> 00:15:29,890
at the autoscaler

00:15:25,870 --> 00:15:33,130
policy this increases or decreases the

00:15:29,890 --> 00:15:37,300
size of a resizable entity such as a

00:15:33,130 --> 00:15:41,590
cluster and it does this based on an

00:15:37,300 --> 00:15:45,730
aggregate sense of value the current

00:15:41,590 --> 00:15:49,510
size of the entity is monitored to check

00:15:45,730 --> 00:15:53,340
if it's between an upper bound and a

00:15:49,510 --> 00:15:57,010
lower bound and if it goes out with this

00:15:53,340 --> 00:16:01,840
the effector will automatically be

00:15:57,010 --> 00:16:04,030
triggered to to correct this so again

00:16:01,840 --> 00:16:07,540
this is just simple yeah Mille that's

00:16:04,030 --> 00:16:10,410
put into the blueprint using a brooklyn

00:16:07,540 --> 00:16:15,130
policies section and it's configured

00:16:10,410 --> 00:16:22,080
with a metric such as the sensor name

00:16:15,130 --> 00:16:22,080
and given those high or low water marks

00:16:23,550 --> 00:16:32,800
so if you want to as an operator look

00:16:30,250 --> 00:16:37,690
deeper into the service you might want

00:16:32,800 --> 00:16:40,600
to use the BR command line tool and to

00:16:37,690 --> 00:16:43,030
do this you might want to list all of

00:16:40,600 --> 00:16:46,270
the services that Brooklyn's managing at

00:16:43,030 --> 00:16:49,930
that time with B our app will look

00:16:46,270 --> 00:16:52,930
closely at it by specifying its name or

00:16:49,930 --> 00:16:59,410
any of the entity's sensors or a

00:16:52,930 --> 00:17:04,209
particular entity as well as all of this

00:16:59,410 --> 00:17:06,370
cloud soft provides a UI around all of

00:17:04,209 --> 00:17:09,100
these components which we call cloud

00:17:06,370 --> 00:17:14,500
soft service broker this allows

00:17:09,100 --> 00:17:19,480
operators to add services without using

00:17:14,500 --> 00:17:21,550
the command line so a nice UI there for

00:17:19,480 --> 00:17:25,690
those that are not so comfortable with

00:17:21,550 --> 00:17:28,600
the CLI but it does more than just that

00:17:25,690 --> 00:17:31,809
it also talks to Cloud Foundry

00:17:28,600 --> 00:17:34,630
to sort of give a richer user experience

00:17:31,809 --> 00:17:38,169
so after adding services you can then

00:17:34,630 --> 00:17:40,090
control the visibility using the UI or

00:17:38,169 --> 00:17:45,850
display the sensor values that are

00:17:40,090 --> 00:17:50,980
coming in for that service and you can

00:17:45,850 --> 00:17:53,500
also use it to add services that would

00:17:50,980 --> 00:17:57,070
use a particular blueprint for

00:17:53,500 --> 00:18:00,010
connecting to pre-existing databases so

00:17:57,070 --> 00:18:03,159
this is a particular blueprint that we

00:18:00,010 --> 00:18:07,419
created and on the UI it will fill in

00:18:03,159 --> 00:18:10,240
the configuration of of that blueprint

00:18:07,419 --> 00:18:13,150
using the user input to allow them to

00:18:10,240 --> 00:18:17,620
connect to a pre-existing database so

00:18:13,150 --> 00:18:19,330
typically in Cloud Foundry people have

00:18:17,620 --> 00:18:25,419
been using user provided services for

00:18:19,330 --> 00:18:28,679
this task but that means that the the

00:18:25,419 --> 00:18:32,070
user has to get the credentials from

00:18:28,679 --> 00:18:39,309
operations rather than getting a new

00:18:32,070 --> 00:18:43,900
user on demand and this is not so good

00:18:39,309 --> 00:18:46,809
if if you've got compliance to to do so

00:18:43,900 --> 00:18:49,270
if you want to have a blueprint that

00:18:46,809 --> 00:18:51,760
will connect to that pre-existing

00:18:49,270 --> 00:18:54,280
database and also happen in a

00:18:51,760 --> 00:18:59,559
self-service way then this blueprints

00:18:54,280 --> 00:19:04,210
pretty good for that so just to

00:18:59,559 --> 00:19:08,110
reiterate Brooklyn can easily deploy

00:19:04,210 --> 00:19:11,919
services to OpenStack and modeled using

00:19:08,110 --> 00:19:15,059
the blueprint syntax apache brooklyn

00:19:11,919 --> 00:19:18,250
service broker makes it simple to add

00:19:15,059 --> 00:19:21,520
services to Cloud Foundry again modeled

00:19:18,250 --> 00:19:25,059
using an Augmented form of the blueprint

00:19:21,520 --> 00:19:27,429
and apache brooklyn can autonomically

00:19:25,059 --> 00:19:33,429
manage these services so what I mean by

00:19:27,429 --> 00:19:35,650
that is kind of self-healing a kind of

00:19:33,429 --> 00:19:38,919
automation that uses the sensors and

00:19:35,650 --> 00:19:42,669
effectors combined using policies

00:19:38,919 --> 00:19:45,549
and the clouds off service broker wraps

00:19:42,669 --> 00:19:48,009
all of this together to provide Cloud

00:19:45,549 --> 00:19:52,239
Foundry operators with a simple

00:19:48,009 --> 00:19:58,570
interface and we provide enterprise

00:19:52,239 --> 00:20:01,779
support for that too so that's the

00:19:58,570 --> 00:20:03,940
that's all folks I've got the link here

00:20:01,779 --> 00:20:07,179
if you're interested in the the service

00:20:03,940 --> 00:20:17,619
broker but other than that happy to take

00:20:07,179 --> 00:20:21,609
questions so this will see whether you

00:20:17,619 --> 00:20:25,359
were paying attention to Jeff's talk or

00:20:21,609 --> 00:20:27,879
not though joking aside um I really like

00:20:25,359 --> 00:20:30,220
what those guys are doing with fissile &

00:20:27,879 --> 00:20:32,649
furnace and creating what you might call

00:20:30,220 --> 00:20:34,269
a cloud native Cloud Foundry I Cloud

00:20:32,649 --> 00:20:37,389
Foundry running on kubernetes which is

00:20:34,269 --> 00:20:39,220
entirely legit in my view although I

00:20:37,389 --> 00:20:42,700
nearly got thrown out of a cloud foundry

00:20:39,220 --> 00:20:44,830
pivotal meeting in in China for saying

00:20:42,700 --> 00:20:48,460
that she months ago but anyway that's by

00:20:44,830 --> 00:20:49,779
the by but in that scenario one of the

00:20:48,460 --> 00:20:51,730
things that Jeff did talk about right at

00:20:49,779 --> 00:20:54,159
the end was the challenge of handling

00:20:51,730 --> 00:20:55,450
the ecosystem of services so in other

00:20:54,159 --> 00:20:58,029
words the services that you're talking

00:20:55,450 --> 00:21:00,609
about here now obviously I work for

00:20:58,029 --> 00:21:02,859
Klaus off so I have some knowledge of

00:21:00,609 --> 00:21:06,609
what you're talking about but would it

00:21:02,859 --> 00:21:09,749
make sense to use the service broker to

00:21:06,609 --> 00:21:13,690
then deploy services onto kubernetes

00:21:09,749 --> 00:21:15,909
itself okay I say location in other

00:21:13,690 --> 00:21:18,820
words yes I think so

00:21:15,909 --> 00:21:21,309
We certainly have a location that we've

00:21:18,820 --> 00:21:24,700
been working on in cloud soft for

00:21:21,309 --> 00:21:27,159
deploying to kubernetes and and I think

00:21:24,700 --> 00:21:29,799
that that could also you you know you

00:21:27,159 --> 00:21:32,799
could for instance have your kubernetes

00:21:29,799 --> 00:21:36,070
running in OpenStack and then configure

00:21:32,799 --> 00:21:41,080
the the location to target that and

00:21:36,070 --> 00:21:43,560
deploy services there as well I don't

00:21:41,080 --> 00:21:45,640
think that's the Romans that will live

00:21:43,560 --> 00:21:49,650
they'll probably call security at that

00:21:45,640 --> 00:21:49,650
point Thanks

00:22:00,060 --> 00:22:06,300
I'm a newbie clock boundary so forgive

00:22:02,850 --> 00:22:09,660
forgive me the question is not very the

00:22:06,300 --> 00:22:11,790
resting em I reckon that this will be

00:22:09,660 --> 00:22:14,190
brokered will eventually align to the

00:22:11,790 --> 00:22:16,590
open service broker a pia yeah that's

00:22:14,190 --> 00:22:21,210
right yeah yeah so the the open service

00:22:16,590 --> 00:22:25,080
broker API is currently developing the

00:22:21,210 --> 00:22:28,710
first spec to be released but they're

00:22:25,080 --> 00:22:32,420
basing it off the current Cloud Foundry

00:22:28,710 --> 00:22:34,920
spec so it's it's just a an incremental

00:22:32,420 --> 00:22:40,400
release when it when it comes out such

00:22:34,920 --> 00:22:40,400
it should align very simply thank you

00:22:45,160 --> 00:22:47,880
okay

00:22:48,590 --> 00:22:51,340

YouTube URL: https://www.youtube.com/watch?v=U3-eCahVpb0


