Title: Saving Human Lives with the IoT - Dat Tran, Pivotal
Publication date: 2016-09-30
Playlist: Cloud Foundry Summit Europe 2016
Description: 
	Saving Human Lives with the IoT - Dat Tran, Pivotal

Nearly 1.2 million people die in road crashes each year (WHO - 2015) with additional millions becoming injured or disabled. One big part of this problem is worst road traffic conditions and unless action is taken, road traffic injuries are predicted to become the fifth leading cause of death by 2030. Moreover, although road traffic injuries have been a major cause of mortality for many years, most traffic accidents are both predictable and preventable. In this talk, we want to demonstrate a scalable IoT platform that uses weather data and data from other cars to warn drivers of dangerous conditions. We will show how CF can help to save human lives and the architecture behind this. Additionally, we will also explain the data science that is involved.

About Dat Tran
Dat Tran is a Data Scientist at Pivotal Labs where he mainly focuses on helping clients to understand their data and accordingly how it can be used to add value. To do so, he employs a wide range of machine learning algorithms, statistics and open-source tools to solve his clientsâ€™ problems. Previously, he was a member of the advanced analytics team at Accenture where he also accompanied various clients across different industries during their journey to become a data-driven enterprise. Dat has a background in Operations Research and Econometrics and received his MSc in Economics from Humboldt University of Berlin.
Captions: 
	00:00:00,030 --> 00:00:06,000
all right so start welcome to my

00:00:03,780 --> 00:00:07,919
visitation so today I would like to talk

00:00:06,000 --> 00:00:10,559
about how we help one of the largest

00:00:07,919 --> 00:00:12,870
German automotive company to build a

00:00:10,559 --> 00:00:15,630
scalable cloud native architecture so

00:00:12,870 --> 00:00:17,910
with the help of cloud foundry and of

00:00:15,630 --> 00:00:22,830
course with the talisay is how it

00:00:17,910 --> 00:00:25,619
actually saved human lives for this let

00:00:22,830 --> 00:00:28,349
me introduce myself first so my name is

00:00:25,619 --> 00:00:31,320
Darren and I'm a senior leader signed as

00:00:28,349 --> 00:00:35,100
at pivotal labs I'm based in the Berlin

00:00:31,320 --> 00:00:37,800
office and my job is actually to help

00:00:35,100 --> 00:00:39,989
clients making full use of the data and

00:00:37,800 --> 00:00:45,629
out if you would like to connect to me

00:00:39,989 --> 00:00:47,489
so this is my twitter handler let me

00:00:45,629 --> 00:00:49,320
start my presentation first with some

00:00:47,489 --> 00:00:52,469
facts that you may all know

00:00:49,320 --> 00:00:55,739
may you that you may or may not know so

00:00:52,469 --> 00:00:57,930
just you know that actually 1.2 million

00:00:55,739 --> 00:01:00,210
people have died in road crashes each

00:00:57,930 --> 00:01:03,359
year with many people becoming more

00:01:00,210 --> 00:01:05,729
injured disabled and basically road

00:01:03,359 --> 00:01:08,310
traffic crashes are actually a leading

00:01:05,729 --> 00:01:11,280
course for death globally for young

00:01:08,310 --> 00:01:14,430
people and this is even before suicide

00:01:11,280 --> 00:01:15,659
and even the HIV and of course if you

00:01:14,430 --> 00:01:18,000
compare it to other means of

00:01:15,659 --> 00:01:20,670
transportation for example like a travel

00:01:18,000 --> 00:01:26,490
or trains it is actually the most

00:01:20,670 --> 00:01:28,140
dangerous one amongst them so what is

00:01:26,490 --> 00:01:31,380
the problem actually it was so many

00:01:28,140 --> 00:01:33,479
people still died in cars well one of

00:01:31,380 --> 00:01:35,340
the major part of this problem is

00:01:33,479 --> 00:01:38,100
actually as you can see on this slide

00:01:35,340 --> 00:01:39,930
red so worse road traffic conditions for

00:01:38,100 --> 00:01:41,670
example like class for us of course

00:01:39,930 --> 00:01:44,430
there are other conditions for example

00:01:41,670 --> 00:01:46,430
after a huge rain right the streets

00:01:44,430 --> 00:01:49,770
getting wet and some thank this

00:01:46,430 --> 00:01:52,530
nevertheless in all those cases people

00:01:49,770 --> 00:01:54,840
still tend to try very fast for example

00:01:52,530 --> 00:01:57,509
I know myself when I drive in a car so I

00:01:54,840 --> 00:02:00,060
was an Oktoberfest this week and was

00:01:57,509 --> 00:02:01,680
driving like very fast and despite the

00:02:00,060 --> 00:02:04,500
fact that sometimes weather was not so

00:02:01,680 --> 00:02:07,910
good and and basically one of the reason

00:02:04,500 --> 00:02:12,660
is there aren't very good smart warning

00:02:07,910 --> 00:02:13,340
systems so from what we've seen however

00:02:12,660 --> 00:02:14,860
nose

00:02:13,340 --> 00:02:17,810
traffic conditions are actually

00:02:14,860 --> 00:02:19,910
predictable somehow and preventable so

00:02:17,810 --> 00:02:22,940
for example we could use like weather

00:02:19,910 --> 00:02:26,120
data or data from other cars to warn

00:02:22,940 --> 00:02:29,180
drivers for example some I took the car

00:02:26,120 --> 00:02:30,709
from my for my dad he has a BMW and the

00:02:29,180 --> 00:02:32,540
cool thing is they have this head-up

00:02:30,709 --> 00:02:34,730
display I really really like it so you

00:02:32,540 --> 00:02:36,349
could just like integrate a system in

00:02:34,730 --> 00:02:38,629
this and then integrated into the

00:02:36,349 --> 00:02:40,940
head-up display and our goal was

00:02:38,629 --> 00:02:43,459
therefore actually to help this client

00:02:40,940 --> 00:02:46,269
to see if it's possible to predict road

00:02:43,459 --> 00:02:50,440
conditions basically in in in Germany

00:02:46,269 --> 00:02:50,440
based on weather data

00:02:50,680 --> 00:02:58,090
so yeah in this talk I actually on the

00:02:56,049 --> 00:03:00,640
one hand folk want to focus on the

00:02:58,090 --> 00:03:03,489
technology side that we use to solve a

00:03:00,640 --> 00:03:06,909
client's problem but from this slide I

00:03:03,489 --> 00:03:09,700
mean I know it's a very marketing

00:03:06,909 --> 00:03:12,579
sentences sentences but in this light

00:03:09,700 --> 00:03:15,519
apart from the right technology the

00:03:12,579 --> 00:03:19,659
process that how to build a server is

00:03:15,519 --> 00:03:22,030
also a key component during during our

00:03:19,659 --> 00:03:24,310
project and we actually believe that you

00:03:22,030 --> 00:03:28,359
actually need both component for a

00:03:24,310 --> 00:03:30,370
successful project and therefore I will

00:03:28,359 --> 00:03:31,959
also shortly talk about the process and

00:03:30,370 --> 00:03:36,760
also about the data science in both

00:03:31,959 --> 00:03:41,980
during this project so let's first start

00:03:36,760 --> 00:03:43,959
with their technology part when we

00:03:41,980 --> 00:03:46,870
started with this engagement the client

00:03:43,959 --> 00:03:49,000
actually came to us and said hey I want

00:03:46,870 --> 00:03:50,470
you to solve our problem but well you

00:03:49,000 --> 00:03:53,290
know we don't have the technology

00:03:50,470 --> 00:03:56,680
foundation for this and possibly a

00:03:53,290 --> 00:03:58,510
possible for low money and please I need

00:03:56,680 --> 00:04:00,129
it in 10 weeks because I have a board

00:03:58,510 --> 00:04:02,560
meeting I need to show it to someone you

00:04:00,129 --> 00:04:04,449
know and I guess some of you probably

00:04:02,560 --> 00:04:07,540
would know it if you for example from a

00:04:04,449 --> 00:04:10,750
consultancy business so we were actually

00:04:07,540 --> 00:04:12,940
faced with a very I don't know situation

00:04:10,750 --> 00:04:15,400
where we had no computing power no

00:04:12,940 --> 00:04:17,590
software so basically nothing where you

00:04:15,400 --> 00:04:19,930
can work on for some people that would

00:04:17,590 --> 00:04:22,180
probably be scary because like oh you

00:04:19,930 --> 00:04:24,849
don't have anything but we were like yes

00:04:22,180 --> 00:04:26,919
finally it's a super situation where we

00:04:24,849 --> 00:04:28,990
can actually build something on scratch

00:04:26,919 --> 00:04:30,760
and we can use anything that we want

00:04:28,990 --> 00:04:33,699
right so you can use the right

00:04:30,760 --> 00:04:36,639
technology for the right problem and as

00:04:33,699 --> 00:04:40,590
you can guess we were using the cloud so

00:04:36,639 --> 00:04:43,450
this cloth thing to build everything and

00:04:40,590 --> 00:04:46,360
yeah

00:04:43,450 --> 00:04:49,020
so basically this is how our

00:04:46,360 --> 00:04:52,300
architecture looks like for this project

00:04:49,020 --> 00:04:55,630
as you can see this is the very famous

00:04:52,300 --> 00:04:59,110
Lemuria architecture what we did here is

00:04:55,630 --> 00:05:02,740
we were streaming data with spring Steve

00:04:59,110 --> 00:05:05,080
from cars and also weather data to two

00:05:02,740 --> 00:05:07,840
layers so one goes to the batched layer

00:05:05,080 --> 00:05:10,300
the other one goes to the retime layer

00:05:07,840 --> 00:05:13,480
and everything is of course we did

00:05:10,300 --> 00:05:15,640
everything on AWS what we did here was

00:05:13,480 --> 00:05:17,680
we on the best player who is streaming

00:05:15,640 --> 00:05:19,630
we were streaming the data in a

00:05:17,680 --> 00:05:22,090
structured form so basically the data

00:05:19,630 --> 00:05:25,030
wasn't structured it wasn't a very weird

00:05:22,090 --> 00:05:27,880
former we structured this former through

00:05:25,030 --> 00:05:29,920
Spring City then we stored it on s3 and

00:05:27,880 --> 00:05:33,490
then from s3 what we did there is we

00:05:29,920 --> 00:05:35,910
spin up a spark we spend on an EMR

00:05:33,490 --> 00:05:38,530
cluster with spark basically to

00:05:35,910 --> 00:05:40,600
pre-process the features to reduce the

00:05:38,530 --> 00:05:42,790
dimension of the data and then what we

00:05:40,600 --> 00:05:46,810
did afterwards is we're spinning up a

00:05:42,790 --> 00:05:49,780
GPU cluster on Amazon and then using a

00:05:46,810 --> 00:05:51,820
deep learning network to Train this

00:05:49,780 --> 00:05:55,690
model afterwards what we did there we

00:05:51,820 --> 00:05:57,760
stored this model on Redis read as is as

00:05:55,690 --> 00:05:59,530
you know an emery cache layer what we

00:05:57,760 --> 00:06:02,560
did there we store the model there we

00:05:59,530 --> 00:06:05,170
use the other stream basically and

00:06:02,560 --> 00:06:07,960
tapped it onto Aretas queue and then

00:06:05,170 --> 00:06:10,180
this model was basically doing just

00:06:07,960 --> 00:06:12,340
prediction with one of the services that

00:06:10,180 --> 00:06:16,300
we created so the product of epi and

00:06:12,340 --> 00:06:18,940
after the words we enrich this and

00:06:16,300 --> 00:06:21,370
probably with more data like chibi STR

00:06:18,940 --> 00:06:23,650
data from the car and at the end of the

00:06:21,370 --> 00:06:27,389
day what we did for this project is we

00:06:23,650 --> 00:06:31,770
plotted this on a on a dashboard

00:06:27,389 --> 00:06:34,020
so as I said we're using Springsteen and

00:06:31,770 --> 00:06:36,750
the reason why we are using Springs T is

00:06:34,020 --> 00:06:39,000
because of the domain-specific language

00:06:36,750 --> 00:06:41,909
so it was really really easy to use this

00:06:39,000 --> 00:06:44,639
for this engagement and also one of the

00:06:41,909 --> 00:06:47,969
main extra main reason is actually the

00:06:44,639 --> 00:06:50,189
shells crew so as a data scientist we're

00:06:47,969 --> 00:06:52,020
not very good at Java or some some of

00:06:50,189 --> 00:06:55,939
the other programming languages so we're

00:06:52,020 --> 00:06:58,830
using a lot of Python and and shell and

00:06:55,939 --> 00:07:02,460
basically in spring it was really really

00:06:58,830 --> 00:07:04,800
easy to to integrated it and of course

00:07:02,460 --> 00:07:06,629
it also had a very easy connection to s3

00:07:04,800 --> 00:07:09,330
which helped us pretty a lot to store

00:07:06,629 --> 00:07:11,610
the data and of course you have all the

00:07:09,330 --> 00:07:15,330
other advantages right so it's really

00:07:11,610 --> 00:07:16,919
easy to scale and in the future we

00:07:15,330 --> 00:07:19,259
probably wouldn't use previously anymore

00:07:16,919 --> 00:07:21,240
because probably we would use spring

00:07:19,259 --> 00:07:23,819
cloud dataflow that at this time when we

00:07:21,240 --> 00:07:25,860
when we start with this project actually

00:07:23,819 --> 00:07:29,750
is from Cloud dataflow was still too

00:07:25,860 --> 00:07:29,750
immature for this kind of a use case

00:07:30,300 --> 00:07:36,480
so in the bachelors asset we start the

00:07:33,600 --> 00:07:38,720
data in s3 and then and then afterwards

00:07:36,480 --> 00:07:40,860
we spin out in the EMR cluster

00:07:38,720 --> 00:07:47,280
specifically in this case we were using

00:07:40,860 --> 00:07:50,700
PI spark because we loved Python in a

00:07:47,280 --> 00:07:52,520
data science area and afterwards what we

00:07:50,700 --> 00:07:55,770
did there is as I said we spin up the

00:07:52,520 --> 00:07:57,930
Buick cluster here we actually we are

00:07:55,770 --> 00:08:01,500
using Charis Charis villages which is

00:07:57,930 --> 00:08:05,030
basically a Python abstraction layer on

00:08:01,500 --> 00:08:08,100
top of Theano and tender flow and then

00:08:05,030 --> 00:08:10,350
also in the in the unalaq's block you

00:08:08,100 --> 00:08:12,930
can see that we were using Luigi which

00:08:10,350 --> 00:08:17,150
is actually a project by Spotify to

00:08:12,930 --> 00:08:17,150
create analytical pipelines

00:08:17,730 --> 00:08:22,800
so in the real-time layer as we said

00:08:21,240 --> 00:08:25,830
we're using Redis for storing and

00:08:22,800 --> 00:08:27,540
caching the model and basically what

00:08:25,830 --> 00:08:30,270
would happen with already described

00:08:27,540 --> 00:08:32,790
before is the data which we got from

00:08:30,270 --> 00:08:34,770
strings D is queued into Redis and then

00:08:32,790 --> 00:08:36,660
we created a couple of micro services

00:08:34,770 --> 00:08:38,880
so like the predictive api which

00:08:36,660 --> 00:08:42,630
basically constantly just just give

00:08:38,880 --> 00:08:44,910
probably from the queue and then

00:08:42,630 --> 00:08:47,220
afterwards which is outputting it to

00:08:44,910 --> 00:08:50,070
JSON file enriches the data and then at

00:08:47,220 --> 00:08:55,140
the end creating a dashboard on top of

00:08:50,070 --> 00:08:57,060
this and everything basically ran on

00:08:55,140 --> 00:08:59,310
Cloud Foundry so pivotal cloud for me

00:08:57,060 --> 00:09:01,800
and the main advantage in this case for

00:08:59,310 --> 00:09:04,980
us was that we we had different blow

00:09:01,800 --> 00:09:07,500
packs especially as a data scientist as

00:09:04,980 --> 00:09:09,750
I said we mainly use Python but for

00:09:07,500 --> 00:09:12,660
example for for the other words like the

00:09:09,750 --> 00:09:15,180
dashboard basically our sovereign

00:09:12,660 --> 00:09:18,900
juniors from from our team basically use

00:09:15,180 --> 00:09:20,760
JavaScript and Ruby to to do this and so

00:09:18,900 --> 00:09:22,560
basically the teams could focus on what

00:09:20,760 --> 00:09:24,840
they good at and of course the other

00:09:22,560 --> 00:09:26,490
advantages what you have with was with

00:09:24,840 --> 00:09:28,530
Cloud Foundry is of course right so

00:09:26,490 --> 00:09:31,050
could you could easily scale at

00:09:28,530 --> 00:09:34,850
different instances have load balancing

00:09:31,050 --> 00:09:34,850
and all the stuff so yeah

00:09:36,269 --> 00:09:40,949
the next important part I want to talk

00:09:38,699 --> 00:09:44,009
about is actually the data science part

00:09:40,949 --> 00:09:47,639
which was also a core of this project

00:09:44,009 --> 00:09:50,220
and the main goal was to mention again

00:09:47,639 --> 00:09:54,269
it was to protect road conditions based

00:09:50,220 --> 00:09:56,190
on weather data however you know what

00:09:54,269 --> 00:09:59,449
deep learning and machine learning and

00:09:56,190 --> 00:09:59,449
all the stuff is or like

00:10:00,510 --> 00:10:07,529
okay so I mean I would give it a short

00:10:05,760 --> 00:10:13,320
introduction into deep learning because

00:10:07,529 --> 00:10:14,850
I think it's a huge buzzword nowadays so

00:10:13,320 --> 00:10:17,459
Ezra set up poems to predict road

00:10:14,850 --> 00:10:19,350
conditions with weather dater and this

00:10:17,459 --> 00:10:21,510
can be quite complex especially if you

00:10:19,350 --> 00:10:23,430
think about the data that you have right

00:10:21,510 --> 00:10:26,220
the input data because the dimension is

00:10:23,430 --> 00:10:29,639
huge it's a three dimension data like

00:10:26,220 --> 00:10:31,380
you have value in each time step right

00:10:29,639 --> 00:10:33,260
so the time is also important and also

00:10:31,380 --> 00:10:34,380
the location because we're looking at

00:10:33,260 --> 00:10:37,260
rose-red

00:10:34,380 --> 00:10:39,540
we then Germany and to solve such a

00:10:37,260 --> 00:10:42,930
problem actually deep learning is very

00:10:39,540 --> 00:10:44,850
good at doing this and basically what is

00:10:42,930 --> 00:10:48,089
what is deep learning so deep learning

00:10:44,850 --> 00:10:50,550
is actually a sub class of machine

00:10:48,089 --> 00:10:54,079
learning techniques which actually uses

00:10:50,550 --> 00:10:56,880
algorithm that mimics the human brain um

00:10:54,079 --> 00:10:58,709
Ezra said it's everywhere now in the

00:10:56,880 --> 00:11:02,040
press so everyone is talking about this

00:10:58,709 --> 00:11:03,839
I think every startup that you're doing

00:11:02,040 --> 00:11:05,790
right now every startup that's just

00:11:03,839 --> 00:11:08,519
started it hasn't a I or machine

00:11:05,790 --> 00:11:13,230
learning or de or neural networks in the

00:11:08,519 --> 00:11:15,810
name is not going to succeed and on this

00:11:13,230 --> 00:11:18,779
slide what we're actually doing is we're

00:11:15,810 --> 00:11:20,399
predicting the moods of babies so it's a

00:11:18,779 --> 00:11:24,029
multi-class problem so you have three

00:11:20,399 --> 00:11:27,000
classes which is positive neutral and

00:11:24,029 --> 00:11:30,589
negative and here in this case the the

00:11:27,000 --> 00:11:34,170
input feature is images of babies and

00:11:30,589 --> 00:11:37,139
what it does is okay we're in inserting

00:11:34,170 --> 00:11:39,149
it in the input layer and then basically

00:11:37,139 --> 00:11:42,660
the network learns the etches the

00:11:39,149 --> 00:11:44,550
contours of the of the faces and then

00:11:42,660 --> 00:11:46,500
also the facial expression

00:11:44,550 --> 00:11:49,230
so it comes binds them together in the

00:11:46,500 --> 00:11:51,240
hidden layer and the reason why this is

00:11:49,230 --> 00:11:53,430
called deep learning is because it has

00:11:51,240 --> 00:11:55,110
many hidden layers so if you're just

00:11:53,430 --> 00:11:56,790
talking about one layer so if you have

00:11:55,110 --> 00:11:58,199
one hidden layer it's just a neural

00:11:56,790 --> 00:12:00,209
network but if you're talking about deep

00:11:58,199 --> 00:12:04,560
learning it means that you have more

00:12:00,209 --> 00:12:07,230
than one layer and specifically for our

00:12:04,560 --> 00:12:10,079
program we don't we all we have more

00:12:07,230 --> 00:12:12,120
than two layers of course because if you

00:12:10,079 --> 00:12:13,150
have two layers you want goes to leave

00:12:12,120 --> 00:12:15,010
in two layers and

00:12:13,150 --> 00:12:17,380
learn less of the complexity that you

00:12:15,010 --> 00:12:19,030
get from it and also concerning all

00:12:17,380 --> 00:12:20,710
problem we don't have a multi-class

00:12:19,030 --> 00:12:23,080
problem but everything that we did was

00:12:20,710 --> 00:12:25,000
kind of a binary classroom so at the end

00:12:23,080 --> 00:12:28,210
of the day in the input layer for

00:12:25,000 --> 00:12:31,270
example you either have wet or not wet

00:12:28,210 --> 00:12:36,130
or slippery or not slippery as a target

00:12:31,270 --> 00:12:38,380
variable concerning neural networks

00:12:36,130 --> 00:12:40,870
actually there are many type of networks

00:12:38,380 --> 00:12:43,120
but generally we can summarize it into

00:12:40,870 --> 00:12:45,540
two types of networks so you have

00:12:43,120 --> 00:12:49,060
feed-forward networks or you could have

00:12:45,540 --> 00:12:51,700
recurrent neural networks in this case a

00:12:49,060 --> 00:12:54,010
fetal network is basically as we always

00:12:51,700 --> 00:12:55,870
saw before so you're you're actually

00:12:54,010 --> 00:12:58,750
inputting data into the input layer

00:12:55,870 --> 00:13:00,820
right and then the the input layer it

00:12:58,750 --> 00:13:03,730
goes one direction so it can only go one

00:13:00,820 --> 00:13:06,820
direction and basically this neural

00:13:03,730 --> 00:13:08,680
network is very very optimal for solving

00:13:06,820 --> 00:13:10,510
functional mapping problems so

00:13:08,680 --> 00:13:12,550
functional mapping problems actually you

00:13:10,510 --> 00:13:16,240
can approximate any function that you

00:13:12,550 --> 00:13:18,250
like to and typical architectures that

00:13:16,240 --> 00:13:21,330
we already example saw before is like

00:13:18,250 --> 00:13:24,250
it's called a multi-layer perceptron or

00:13:21,330 --> 00:13:26,200
CNN's I think some of you might heard of

00:13:24,250 --> 00:13:29,740
CNS right so convolutional neural

00:13:26,200 --> 00:13:31,930
networks for example Google is there was

00:13:29,740 --> 00:13:33,880
a contest from Google that were using

00:13:31,930 --> 00:13:37,240
this kind of networks and it really

00:13:33,880 --> 00:13:39,640
performed quite well and basically the

00:13:37,240 --> 00:13:42,940
fitfully neural network is used in many

00:13:39,640 --> 00:13:45,040
many applications whereas in the other

00:13:42,940 --> 00:13:47,440
side we have the recurrent neural

00:13:45,040 --> 00:13:49,780
network so the main difference between a

00:13:47,440 --> 00:13:51,010
recurrent neural network and a fitful

00:13:49,780 --> 00:13:54,190
and that work feed-forward neural

00:13:51,010 --> 00:13:57,790
network is that you have feet feedback

00:13:54,190 --> 00:13:59,590
loop included so so on the other so for

00:13:57,790 --> 00:14:01,690
the feed-forward neural network you can

00:13:59,590 --> 00:14:03,400
only go one direction for the record or

00:14:01,690 --> 00:14:05,200
network you can actually basic jump

00:14:03,400 --> 00:14:07,510
between two directions right so you can

00:14:05,200 --> 00:14:09,550
go the past or in the future so the

00:14:07,510 --> 00:14:12,010
network is learning in terms of the

00:14:09,550 --> 00:14:14,320
whole time series structure and that's

00:14:12,010 --> 00:14:17,640
why it's very good to basically model

00:14:14,320 --> 00:14:19,780
temporal dynamics temporal behaviors and

00:14:17,640 --> 00:14:23,380
also for this kind of network you have

00:14:19,780 --> 00:14:27,160
many variations so for example you have

00:14:23,380 --> 00:14:31,120
LCM so a long short term memory you have

00:14:27,160 --> 00:14:33,220
gyros so gated recurrent units and then

00:14:31,120 --> 00:14:36,519
you also have be directional recurrent

00:14:33,220 --> 00:14:38,860
neural networks in fabrication concern

00:14:36,519 --> 00:14:41,620
application it's very successful and

00:14:38,860 --> 00:14:44,199
it's very it's mostly used in

00:14:41,620 --> 00:14:47,589
handwriting and speech recognition I

00:14:44,199 --> 00:14:49,149
think some of you are a lot of you have

00:14:47,589 --> 00:14:50,620
like smart apps and there are many

00:14:49,149 --> 00:14:53,829
applications that basically use

00:14:50,620 --> 00:14:58,620
recurrent network to give the smart as

00:14:53,829 --> 00:15:01,449
for this kind of application in terms of

00:14:58,620 --> 00:15:03,939
recurrent networks there also many ways

00:15:01,449 --> 00:15:06,519
actually to construct the network right

00:15:03,939 --> 00:15:09,850
so for example you have one-to-one

00:15:06,519 --> 00:15:11,949
one-to-many many-to-one in this talk I

00:15:09,850 --> 00:15:14,290
will not go through deep into all of

00:15:11,949 --> 00:15:18,279
them so if you want to know more you

00:15:14,290 --> 00:15:21,550
just can google this this blog post here

00:15:18,279 --> 00:15:24,160
by entry capaci he's he's doing his PhD

00:15:21,550 --> 00:15:27,579
in Stanford and of course I will also

00:15:24,160 --> 00:15:31,329
provide the presentation afterwards so

00:15:27,579 --> 00:15:34,630
we can look it up and in our case

00:15:31,329 --> 00:15:37,899
actually the many-to-one is the most

00:15:34,630 --> 00:15:39,370
appropriate one so basically as you

00:15:37,899 --> 00:15:40,930
already aware we are dealing with

00:15:39,370 --> 00:15:43,269
weather later right so where the data

00:15:40,930 --> 00:15:46,959
has this time series component so you

00:15:43,269 --> 00:15:49,930
have a sequences of values over time and

00:15:46,959 --> 00:15:52,630
for each time step and the output at the

00:15:49,930 --> 00:15:54,370
end of the day what we had was either a

00:15:52,630 --> 00:15:56,769
wet or not where I said we're in

00:15:54,370 --> 00:15:58,630
Australia so it was a 1 a 0 decision

00:15:56,769 --> 00:16:02,769
right so it was a binary classification

00:15:58,630 --> 00:16:05,290
and basically this is this is resembles

00:16:02,769 --> 00:16:07,000
actually a very famous time machine

00:16:05,290 --> 00:16:09,980
learning problem which is called the

00:16:07,000 --> 00:16:14,240
some problem

00:16:09,980 --> 00:16:17,930
so what are our key learnings from from

00:16:14,240 --> 00:16:21,020
from this project as a receptor for the

00:16:17,930 --> 00:16:25,040
road conditions in Germany and in terms

00:16:21,020 --> 00:16:26,570
of whether it rains or it snows you know

00:16:25,040 --> 00:16:28,730
that in Germany it doesn't rain all the

00:16:26,570 --> 00:16:30,260
time right or it doesn't snow all the

00:16:28,730 --> 00:16:33,110
time so we're not like in London or

00:16:30,260 --> 00:16:33,530
somewhere else where we have 70% of your

00:16:33,110 --> 00:16:36,500
time

00:16:33,530 --> 00:16:38,750
this is raining so one of the problems

00:16:36,500 --> 00:16:41,390
that we faced we had actually a very

00:16:38,750 --> 00:16:44,360
over balanced problem so over balance

00:16:41,390 --> 00:16:46,100
problem means that 80% of the time it

00:16:44,360 --> 00:16:47,810
didn't rain at all and you only have

00:16:46,100 --> 00:16:51,110
like Trevor sent all the time with rain

00:16:47,810 --> 00:16:53,750
and in terms of this this is actually a

00:16:51,110 --> 00:16:56,390
very difficult problem for machine

00:16:53,750 --> 00:16:58,820
learning model right - to learn just in

00:16:56,390 --> 00:17:01,160
this kind of situation but of course in

00:16:58,820 --> 00:17:02,840
this case where we use for example

00:17:01,160 --> 00:17:05,000
different innovation metrics so for

00:17:02,840 --> 00:17:08,500
example instead of accuracy we're using

00:17:05,000 --> 00:17:11,750
precision recall or we use different

00:17:08,500 --> 00:17:13,370
machine learning techniques actually -

00:17:11,750 --> 00:17:15,740
for example either increase the

00:17:13,370 --> 00:17:20,870
unbalanced class right to make it in a

00:17:15,740 --> 00:17:23,000
balanced and and yeah and also Ezra has

00:17:20,870 --> 00:17:25,940
said there many variants for for

00:17:23,000 --> 00:17:29,720
recurrent neural networks like STL STM

00:17:25,940 --> 00:17:31,970
or GI use and for our case we actually

00:17:29,720 --> 00:17:34,490
decided to go with similar ends because

00:17:31,970 --> 00:17:37,790
they gave us the better performance in -

00:17:34,490 --> 00:17:41,360
in terms of evaluation and also

00:17:37,790 --> 00:17:42,620
computational complexity Marvel also

00:17:41,360 --> 00:17:44,750
when we started with this project

00:17:42,620 --> 00:17:49,100
actually we thought like oh the dataset

00:17:44,750 --> 00:17:51,860
is still quite nice so we can use CPU so

00:17:49,100 --> 00:17:54,530
we thought like ok that that's still

00:17:51,860 --> 00:17:57,800
possible but then after our first one we

00:17:54,530 --> 00:18:00,050
were like that takes hours so not a

00:17:57,800 --> 00:18:02,390
good idea so what it did is ok let's

00:18:00,050 --> 00:18:05,390
switch to GPU and that was a really good

00:18:02,390 --> 00:18:10,660
decision so it was 10 times faster with

00:18:05,390 --> 00:18:14,480
GPUs a good good idea for this and also

00:18:10,660 --> 00:18:17,480
on this project especially in neural

00:18:14,480 --> 00:18:19,910
networks you basically waste a lot of

00:18:17,480 --> 00:18:22,310
time basically just to find the optimal

00:18:19,910 --> 00:18:25,220
Network so there's actually no no

00:18:22,310 --> 00:18:26,360
the Meg foundation behind us to find the

00:18:25,220 --> 00:18:28,280
option Monroe Network

00:18:26,360 --> 00:18:30,080
it's basically our tread so you need to

00:18:28,280 --> 00:18:33,770
experiment a lot so for example you need

00:18:30,080 --> 00:18:35,270
to experiment of a pox the activation

00:18:33,770 --> 00:18:37,760
function that you're going to use the

00:18:35,270 --> 00:18:40,250
number of hidden layers and how you

00:18:37,760 --> 00:18:44,150
actually construct the the network of

00:18:40,250 --> 00:18:46,190
course I mean in in in many university

00:18:44,150 --> 00:18:48,590
projects you already have like pre trade

00:18:46,190 --> 00:18:50,420
networks that you can use that's what we

00:18:48,590 --> 00:18:52,460
already did as well but then also of

00:18:50,420 --> 00:18:54,200
course we need to experiment a lot

00:18:52,460 --> 00:18:58,190
actually to fit this network to our

00:18:54,200 --> 00:19:00,890
product problem and also one of the key

00:18:58,190 --> 00:19:02,450
points was that we actually need a lot

00:19:00,890 --> 00:19:04,970
of data actually to train the network

00:19:02,450 --> 00:19:07,610
sometimes we didn't have much enough

00:19:04,970 --> 00:19:09,620
data so for that us so that the network

00:19:07,610 --> 00:19:12,170
can converge because basically what the

00:19:09,620 --> 00:19:15,830
neural network does its optimizing

00:19:12,170 --> 00:19:18,740
weights within a cone etwork red and

00:19:15,830 --> 00:19:22,160
then certain looks for the optimal

00:19:18,740 --> 00:19:25,060
global minimum and in some cases it

00:19:22,160 --> 00:19:25,060
didn't converge at all

00:19:25,080 --> 00:19:32,380
so as I said apart from the right

00:19:28,510 --> 00:19:37,240
technology the right process also played

00:19:32,380 --> 00:19:39,760
a critical point in this project yes I

00:19:37,240 --> 00:19:42,520
think some I think every one of us who

00:19:39,760 --> 00:19:46,390
are already attended the keynote talk

00:19:42,520 --> 00:19:51,010
today with Michael no no no Angela's

00:19:46,390 --> 00:19:53,290
nota and and rot me so he actually

00:19:51,010 --> 00:19:56,590
pointed out some of the practices that

00:19:53,290 --> 00:19:57,880
we have so for example paragraph so it

00:19:56,590 --> 00:20:01,930
could actually do a lot of programming

00:19:57,880 --> 00:20:04,510
which means you have two people pairing

00:20:01,930 --> 00:20:06,520
solving one problem and also we have

00:20:04,510 --> 00:20:08,610
test room development which ensures

00:20:06,520 --> 00:20:12,250
basically that our code is always

00:20:08,610 --> 00:20:14,110
production ready in this talk actually I

00:20:12,250 --> 00:20:19,980
will not go through all of them into

00:20:14,110 --> 00:20:24,190
more detail but only on API first so

00:20:19,980 --> 00:20:27,250
yeah so what is actually API first this

00:20:24,190 --> 00:20:29,860
is actually an image that I took from me

00:20:27,250 --> 00:20:31,600
Chris Brown's new post so what is hard

00:20:29,860 --> 00:20:33,910
core data science in practice so he

00:20:31,600 --> 00:20:35,760
published it last week so it was really

00:20:33,910 --> 00:20:38,920
good that he did last week for me

00:20:35,760 --> 00:20:42,090
basically what it is is API first is

00:20:38,920 --> 00:20:46,210
actually thinking to ensure that you

00:20:42,090 --> 00:20:47,710
think about how to interact between data

00:20:46,210 --> 00:20:50,290
science parts so the data and science

00:20:47,710 --> 00:20:53,200
model and to the sovereign engineers so

00:20:50,290 --> 00:20:55,530
how do you basically make it production

00:20:53,200 --> 00:20:58,360
ready right because I don't know if you

00:20:55,530 --> 00:21:00,310
see it in your companies right so may

00:20:58,360 --> 00:21:02,260
you might start data science initiatives

00:21:00,310 --> 00:21:04,210
you you hire might hire data science a

00:21:02,260 --> 00:21:06,490
data science team and start a data

00:21:04,210 --> 00:21:08,800
science team but at the end of the day

00:21:06,490 --> 00:21:10,960
sometimes it's just going nowhere

00:21:08,800 --> 00:21:13,330
because they're doing a lot of R&D right

00:21:10,960 --> 00:21:14,860
because mostly the scientists don't have

00:21:13,330 --> 00:21:16,750
a software engineering background so

00:21:14,860 --> 00:21:18,880
it's really hard for them and basically

00:21:16,750 --> 00:21:22,090
what we're doing or we're trying to do

00:21:18,880 --> 00:21:23,920
is okay let's pair a data size with a

00:21:22,090 --> 00:21:26,170
solar engineer right to think very early

00:21:23,920 --> 00:21:28,930
how you could basically put this into

00:21:26,170 --> 00:21:30,370
production and our core is at the end of

00:21:28,930 --> 00:21:32,320
the day if you look at the box between

00:21:30,370 --> 00:21:34,660
the data science part and the

00:21:32,320 --> 00:21:37,600
engineering part is basically to create

00:21:34,660 --> 00:21:38,380
an API which offers a very clean

00:21:37,600 --> 00:21:40,690
contract

00:21:38,380 --> 00:21:43,510
to the self engineers and other other

00:21:40,690 --> 00:21:47,530
people I would say to interact with the

00:21:43,510 --> 00:21:49,510
model right yeah here are actually

00:21:47,530 --> 00:21:53,650
additional links if you want to know

00:21:49,510 --> 00:21:54,940
more about yeah API first idea so this

00:21:53,650 --> 00:21:57,850
is one of the blog posts that was

00:21:54,940 --> 00:22:00,820
written by me and Mike illegally sure it

00:21:57,850 --> 00:22:04,030
was actually released two months ago so

00:22:00,820 --> 00:22:06,010
I was ahead of me clear spot blog post

00:22:04,030 --> 00:22:07,780
but the blog post from maker was also

00:22:06,010 --> 00:22:09,040
pretty good so it's a very good read I

00:22:07,780 --> 00:22:12,520
would definitely check it out and he's

00:22:09,040 --> 00:22:14,500
he's talking into other areas more

00:22:12,520 --> 00:22:16,690
detail than me because I was giving an

00:22:14,500 --> 00:22:19,300
example and he was using it more from a

00:22:16,690 --> 00:22:24,490
very team team ish point talking about

00:22:19,300 --> 00:22:28,060
this also from if you attended today's

00:22:24,490 --> 00:22:30,280
talk a keynote with dr. Molter he

00:22:28,060 --> 00:22:33,880
actually also mentioned that Italians

00:22:30,280 --> 00:22:37,060
they had this very old waterfall culture

00:22:33,880 --> 00:22:40,150
and actually they had to create this

00:22:37,060 --> 00:22:42,370
like their own digital garage right and

00:22:40,150 --> 00:22:44,470
sent people there instead of having them

00:22:42,370 --> 00:22:46,870
within the company to make sure that

00:22:44,470 --> 00:22:49,330
they don't get influenced by the line

00:22:46,870 --> 00:22:51,850
managers and this basically was the case

00:22:49,330 --> 00:22:54,130
for our project as well so when we

00:22:51,850 --> 00:22:56,530
actually started with project actually

00:22:54,130 --> 00:22:59,050
so our client told us that when they

00:22:56,530 --> 00:23:00,880
sign the contract their procurement so

00:22:59,050 --> 00:23:03,460
that procurement department and legal

00:23:00,880 --> 00:23:05,140
team asked hey guys are you really

00:23:03,460 --> 00:23:07,690
really sure you want to work with him

00:23:05,140 --> 00:23:09,460
because it's a stem contract you have to

00:23:07,690 --> 00:23:12,220
come to the Berlin you have to go to the

00:23:09,460 --> 00:23:14,230
authors and you have to work with them

00:23:12,220 --> 00:23:15,690
right that there was there was a

00:23:14,230 --> 00:23:18,160
complete shock for them because usually

00:23:15,690 --> 00:23:20,860
when you were when you're a big company

00:23:18,160 --> 00:23:23,140
right you're just hiring your suppliers

00:23:20,860 --> 00:23:24,970
and they say hey I pay you this kind of

00:23:23,140 --> 00:23:27,430
money so you have to solve my problem

00:23:24,970 --> 00:23:30,400
come to my place because this is this is

00:23:27,430 --> 00:23:32,590
how it is usually right and what we did

00:23:30,400 --> 00:23:34,900
is they came to us and basically at the

00:23:32,590 --> 00:23:37,330
end of the day they basically built it

00:23:34,900 --> 00:23:40,600
together with us so that was a complete

00:23:37,330 --> 00:23:42,760
new experience for them and another

00:23:40,600 --> 00:23:45,430
important point that was also mentioned

00:23:42,760 --> 00:23:47,890
today at Allianz is usually the release

00:23:45,430 --> 00:23:50,900
cycle it can took months or even years

00:23:47,890 --> 00:23:52,850
and what we did actually

00:23:50,900 --> 00:23:57,740
we managed it to pull it off within

00:23:52,850 --> 00:24:00,050
seven weeks so the the the the release

00:23:57,740 --> 00:24:01,250
cycle was much shorter and basically at

00:24:00,050 --> 00:24:03,800
the end of the day they could give

00:24:01,250 --> 00:24:07,540
feedback and they could actually test it

00:24:03,800 --> 00:24:10,910
right and another important point was

00:24:07,540 --> 00:24:15,410
basically what also was mentioned today

00:24:10,910 --> 00:24:18,470
this monolith waterfall approach which

00:24:15,410 --> 00:24:21,470
is very still in many German companies

00:24:18,470 --> 00:24:23,840
and for our projects of course what we

00:24:21,470 --> 00:24:25,970
did is we separated it into different

00:24:23,840 --> 00:24:28,490
micro services so and there was a good

00:24:25,970 --> 00:24:30,380
decision because the data science team

00:24:28,490 --> 00:24:33,920
could actually focus on what they're

00:24:30,380 --> 00:24:37,520
good at because we're not good at Java a

00:24:33,920 --> 00:24:40,340
crank code or in Scala or something some

00:24:37,520 --> 00:24:43,100
of us might do this but for this short

00:24:40,340 --> 00:24:44,810
time of a certain amount of time it was

00:24:43,100 --> 00:24:46,430
really hard right and the some engineers

00:24:44,810 --> 00:24:49,940
they're very good at creating dashboards

00:24:46,430 --> 00:24:51,920
in JavaScript and Ruby and all the other

00:24:49,940 --> 00:24:53,930
languages they use for this right so

00:24:51,920 --> 00:24:56,120
everyone could focus on what they're

00:24:53,930 --> 00:24:57,740
doing red instead of like hey you have

00:24:56,120 --> 00:24:59,870
to learn this and within certain time

00:24:57,740 --> 00:25:02,060
amount and it's not even very good code

00:24:59,870 --> 00:25:05,240
were they doing that afterwards and then

00:25:02,060 --> 00:25:07,460
the the final the best advantage was we

00:25:05,240 --> 00:25:10,590
could actually develop and also deploy

00:25:07,460 --> 00:25:15,960
it independently at the end of the day

00:25:10,590 --> 00:25:19,799
so what are key takeaways from from from

00:25:15,960 --> 00:25:22,499
from this project so Eric our takeaway

00:25:19,799 --> 00:25:24,509
is using API first thinking so premium

00:25:22,499 --> 00:25:27,029
models as fast as possible into

00:25:24,509 --> 00:25:30,419
production because clients can test it

00:25:27,029 --> 00:25:32,940
so your client it's not even what we

00:25:30,419 --> 00:25:35,159
understand from from a consultancy a

00:25:32,940 --> 00:25:36,749
business right because your client could

00:25:35,159 --> 00:25:38,460
be also an internal client right the

00:25:36,749 --> 00:25:42,629
other departments or something like this

00:25:38,460 --> 00:25:44,580
so release it get feedback right so we

00:25:42,629 --> 00:25:46,559
have a very user centric approach the

00:25:44,580 --> 00:25:49,799
user is in the center of our our

00:25:46,559 --> 00:25:51,570
application you will get very fast

00:25:49,799 --> 00:25:55,769
return investment from this because you

00:25:51,570 --> 00:25:58,169
always deploy early and of course for

00:25:55,769 --> 00:26:01,980
this project we use cloth foundry which

00:25:58,169 --> 00:26:05,730
basically enables us to reliably expose

00:26:01,980 --> 00:26:07,830
the models as an API and which which is

00:26:05,730 --> 00:26:11,850
one of the main advantages when you try

00:26:07,830 --> 00:26:13,679
to to create a smart apps right and of

00:26:11,850 --> 00:26:16,259
course the main advantage was already

00:26:13,679 --> 00:26:18,419
told that whatever set is basically

00:26:16,259 --> 00:26:21,240
teams could focus on what they good at

00:26:18,419 --> 00:26:23,100
right so you you don't actually force

00:26:21,240 --> 00:26:27,809
someone to to do something else that

00:26:23,100 --> 00:26:29,789
that he doesn't want to so yeah so this

00:26:27,809 --> 00:26:32,690
was my presentation thank you for coming

00:26:29,789 --> 00:26:32,690
and I'm open to questions

00:26:33,440 --> 00:26:37,859
[Applause]

00:26:41,800 --> 00:27:03,700
no questions Partin yeah so it so

00:27:01,210 --> 00:27:07,990
basically I cannot go too much into

00:27:03,700 --> 00:27:12,929
detail but it's Cod data and weather

00:27:07,990 --> 00:27:12,929
later so the details are confidential

00:27:18,200 --> 00:27:22,220
cool thanks

00:27:23,490 --> 00:27:26,680

YouTube URL: https://www.youtube.com/watch?v=z7AmakqpgdQ


