Title: Snakes in a Buildpack: Deploying Data Science in Cloud Foundry - Ian Huston & James Wen, Pivotal
Publication date: 2016-09-30
Playlist: Cloud Foundry Summit Europe 2016
Description: 
	Snakes in a Buildpack: Deploying Data Science in Cloud Foundry - Ian Huston & James Wen, Pivotal

The Cloud Foundry Buildpacks team set out on a journey in February to go where no official buildpack has gone before: Data Science. Working with those most elusive creatures, data scientists, we toiled in the deepest darkest crevices of our stacks and buildpacks to find a way to easily support the PyData ecosystem. We discovered a package manager called Conda and migrated it to the buildpacks’ zoo, where it now lives in glorious captivity.

Join us as we share our story with you! From idea inception to experiment after experiment after experiment after… you get the idea. We’ll share our initial working hypothesis and subsequent surprising discoveries, dive into the innards of buildpacks and stacks and detail what it was like working with the Pivotal Data Science team as our first customer. Finally, we’ll `cf push` a python data science app with no vendored dependencies!

About Ian Huston
Ian Huston is a Senior Data Scientist at Pivotal Labs. Before joining Pivotal, Ian used Python to create and destroy baby universes inside numerical simulations of the inflationary phase of cosmology.

About James Wen
James Wen is the Team Lead (Anchor) of the Cloud Foundry Buildpacks team at Pivotal in New York City. He currently maintains and works on the Cloud Foundry system buildpacks, buildpack tooling, stacks, and the extensive automation behind it all. In his free time, James serves as a core maintainer and contributor to Bundler and also loves to rock climb, whether on plastic or real rock.
Captions: 
	00:00:00,000 --> 00:00:05,220
I mean Houston representing the snakes

00:00:02,909 --> 00:00:08,490
in the boat back talk this talk is going

00:00:05,220 --> 00:00:09,929
to be about how we added condo support

00:00:08,490 --> 00:00:12,030
for the Python go back and it's gonna be

00:00:09,929 --> 00:00:14,429
focusing on the storyline in the process

00:00:12,030 --> 00:00:17,609
behind how we solve the concrete problem

00:00:14,429 --> 00:00:20,580
by adding a new feature to CS cool yeah

00:00:17,609 --> 00:00:22,619
so I have a problem I'm a data scientist

00:00:20,580 --> 00:00:25,289
at pivotal labs so I you know work with

00:00:22,619 --> 00:00:27,210
our clients to build applications that

00:00:25,289 --> 00:00:28,800
use machine learning and predictive

00:00:27,210 --> 00:00:30,960
analytics tools and I use a lot of

00:00:28,800 --> 00:00:33,559
Python so I was using a lot of the rich

00:00:30,960 --> 00:00:36,210
ecosystem of Python packages and

00:00:33,559 --> 00:00:38,070
including you know open CV so I could

00:00:36,210 --> 00:00:40,800
learn tensorflow this kind of thing and

00:00:38,070 --> 00:00:43,079
I want to deploy my application and I

00:00:40,800 --> 00:00:44,579
want to use Cloud Foundry one problem is

00:00:43,079 --> 00:00:46,739
that a lot of these packages have

00:00:44,579 --> 00:00:48,000
significant dependencies C and Fortran

00:00:46,739 --> 00:00:51,270
dependencies so building them from

00:00:48,000 --> 00:00:53,460
source and which is what the official

00:00:51,270 --> 00:00:54,510
build pack was doing can take hours it's

00:00:53,460 --> 00:00:56,610
you know the sort of thing that my

00:00:54,510 --> 00:00:58,079
macbook takes a whole day to do so it's

00:00:56,610 --> 00:01:02,670
hard to do that in the time that you get

00:00:58,079 --> 00:01:04,260
staging an app and so you know I need a

00:01:02,670 --> 00:01:07,140
solution for this problem I need to be

00:01:04,260 --> 00:01:10,229
able to deploy these these apps so why

00:01:07,140 --> 00:01:12,060
would you want to do this well you know

00:01:10,229 --> 00:01:13,740
one of the really important things for

00:01:12,060 --> 00:01:15,869
me as a data scientist is that you know

00:01:13,740 --> 00:01:17,490
my models my predictive analytics

00:01:15,869 --> 00:01:19,140
doesn't just end up in a PowerPoint

00:01:17,490 --> 00:01:21,360
somewhere it doesn't just end up you

00:01:19,140 --> 00:01:23,400
know as a report and is actually part of

00:01:21,360 --> 00:01:24,840
a product so we need to deploy these

00:01:23,400 --> 00:01:26,549
models in order for them to be able to

00:01:24,840 --> 00:01:28,710
generate business value I think that's

00:01:26,549 --> 00:01:31,350
the most important thing so were there

00:01:28,710 --> 00:01:35,340
like no solutions are all available or

00:01:31,350 --> 00:01:37,530
what yeah like I built a little solution

00:01:35,340 --> 00:01:39,030
and but it was you know I've made a

00:01:37,530 --> 00:01:40,409
community build pack I learned what a

00:01:39,030 --> 00:01:43,200
build pack is and you have these three

00:01:40,409 --> 00:01:45,540
script files that you have to do and so

00:01:43,200 --> 00:01:48,180
I made one and it uses Conda which is

00:01:45,540 --> 00:01:49,710
this binary package manager for pythons

00:01:48,180 --> 00:01:50,759
that gets around this problem of having

00:01:49,710 --> 00:01:52,829
to build all these things from source

00:01:50,759 --> 00:01:54,720
and using you know complicated C and

00:01:52,829 --> 00:01:56,969
Fortran dependencies and having to use

00:01:54,720 --> 00:01:59,670
you know have that tool chain available

00:01:56,969 --> 00:02:01,829
and so using Conda which was made by a

00:01:59,670 --> 00:02:03,719
company called continuum I was able to

00:02:01,829 --> 00:02:05,700
build this build pack and it worked like

00:02:03,719 --> 00:02:08,489
it worked for my few use cases it was

00:02:05,700 --> 00:02:10,050
great unfortunately it wasn't very you

00:02:08,489 --> 00:02:13,410
know well built I wrote it for one thing

00:02:10,050 --> 00:02:15,240
and and it didn't have many tests

00:02:13,410 --> 00:02:17,790
didn't really have a pipeline to build

00:02:15,240 --> 00:02:19,200
it and I basically didn't have enough

00:02:17,790 --> 00:02:20,700
not time to maintain it like I have a

00:02:19,200 --> 00:02:22,650
full-time job so this is not you know

00:02:20,700 --> 00:02:24,510
something I could do as part of that you

00:02:22,650 --> 00:02:26,730
didn't want to like spend extra time on

00:02:24,510 --> 00:02:28,770
writing free software for everybody here

00:02:26,730 --> 00:02:30,510
like I did and I released it to the

00:02:28,770 --> 00:02:32,550
community but now I didn't have the time

00:02:30,510 --> 00:02:34,980
and but there were a few other things

00:02:32,550 --> 00:02:36,090
that we could have used and you know

00:02:34,980 --> 00:02:38,640
there's a Heroku buildpack

00:02:36,090 --> 00:02:40,290
one by Kenneth's wreaths yeah you know

00:02:38,640 --> 00:02:42,720
sort of famous peyten contributor and

00:02:40,290 --> 00:02:43,980
that hasn't been maintained in a while

00:02:42,720 --> 00:02:45,210
and it didn't work first time around

00:02:43,980 --> 00:02:47,760
with his life and it was very like

00:02:45,210 --> 00:02:49,350
Heroku specific stuff in there and so we

00:02:47,760 --> 00:02:51,150
just couldn't use that continuum

00:02:49,350 --> 00:02:54,600
released their own one a few years ago

00:02:51,150 --> 00:02:55,800
but again hasn't had many updates at the

00:02:54,600 --> 00:02:58,860
Pythian communities actually moved on a

00:02:55,800 --> 00:03:00,360
little bit and you know from the conduct

00:02:58,860 --> 00:03:02,850
aim out of a time in the Python

00:03:00,360 --> 00:03:04,470
community when like guido van rossum he

00:03:02,850 --> 00:03:07,320
was the the sort of benevolent dictator

00:03:04,470 --> 00:03:09,960
for life for python told the Pythons

00:03:07,320 --> 00:03:11,820
scientific community that they couldn't

00:03:09,960 --> 00:03:14,700
solve the problems they were having with

00:03:11,820 --> 00:03:17,100
all these dependencies Fortran C in pip

00:03:14,700 --> 00:03:18,990
and pi PI which is the standard way to

00:03:17,100 --> 00:03:21,209
install packages and he said go off and

00:03:18,990 --> 00:03:23,100
build your own thing now pip has caught

00:03:21,209 --> 00:03:24,750
up a little bit with some binary package

00:03:23,100 --> 00:03:26,910
management but it doesn't deal with

00:03:24,750 --> 00:03:29,640
anything that's not Python so you can't

00:03:26,910 --> 00:03:31,350
install something else like open CV and

00:03:29,640 --> 00:03:33,300
add the Python bindings so there's a

00:03:31,350 --> 00:03:35,490
good talk by Jake van der plastic goes

00:03:33,300 --> 00:03:37,380
through all of that so you know the

00:03:35,490 --> 00:03:39,480
other thing that you know people talked

00:03:37,380 --> 00:03:40,770
about it was darker Oh a darker that's

00:03:39,480 --> 00:03:42,030
the hot new tech right now all right so

00:03:40,770 --> 00:03:45,150
why don't we just push up a docker

00:03:42,030 --> 00:03:47,340
container yeah and we could have done

00:03:45,150 --> 00:03:49,320
that and it you know that gives you

00:03:47,340 --> 00:03:51,420
control but it also gives you a lot more

00:03:49,320 --> 00:03:53,010
responsibility so I think you know the

00:03:51,420 --> 00:03:54,750
way I kind of think about it is I'm a

00:03:53,010 --> 00:03:56,700
data scientist I don't want to have to

00:03:54,750 --> 00:03:57,570
worry about operating system their stuff

00:03:56,700 --> 00:04:00,900
I don't want to have to worry about

00:03:57,570 --> 00:04:03,840
heartbleed and OpenSSH library versions

00:04:00,900 --> 00:04:06,150
and so you know Bill pack lets me focus

00:04:03,840 --> 00:04:08,160
on the bits I want to do yeah cool so

00:04:06,150 --> 00:04:09,690
yeah a lot of people have said that it's

00:04:08,160 --> 00:04:11,700
very easy to bring in your own

00:04:09,690 --> 00:04:14,580
dependencies for doctor container to get

00:04:11,700 --> 00:04:16,739
like a baseline app working but it's a

00:04:14,580 --> 00:04:18,600
lot more difficult to secure and keep

00:04:16,739 --> 00:04:19,859
updating those dependencies and if

00:04:18,600 --> 00:04:22,169
you're gonna you know push a data

00:04:19,859 --> 00:04:24,120
science app or run experiment in a

00:04:22,169 --> 00:04:25,220
production manner you are gonna want

00:04:24,120 --> 00:04:27,680
that security and those

00:04:25,220 --> 00:04:28,520
updates so that's where you might want

00:04:27,680 --> 00:04:29,840
to use a pill pack

00:04:28,520 --> 00:04:31,900
if you're more interested in like the

00:04:29,840 --> 00:04:34,480
Bill pack where's container kind of

00:04:31,900 --> 00:04:37,850
differences for staging and pushing

00:04:34,480 --> 00:04:39,410
James Myers and Jen spinning from HP

00:04:37,850 --> 00:04:41,930
here giving a very in-depth talk on this

00:04:39,410 --> 00:04:43,280
tomorrow so check that out cool so James

00:04:41,930 --> 00:04:45,770
you work on the build packs team right

00:04:43,280 --> 00:04:47,330
and you were the bill packs team was

00:04:45,770 --> 00:04:49,370
kind enough to sort of help me out with

00:04:47,330 --> 00:04:51,230
this what did you have to do what did

00:04:49,370 --> 00:04:55,520
you sort of start working on yeah sure

00:04:51,230 --> 00:04:57,680
so a pivotal we when we deal with kind

00:04:55,520 --> 00:04:59,090
of an unknown future or just unknowns in

00:04:57,680 --> 00:05:01,610
general will have these things called

00:04:59,090 --> 00:05:04,310
investigations or charters for kind of

00:05:01,610 --> 00:05:05,660
exploring this new thing and gaining

00:05:04,310 --> 00:05:08,120
knowledge on it so we did a few

00:05:05,660 --> 00:05:10,940
experiments first experiment was just to

00:05:08,120 --> 00:05:14,000
use mini Conda in the ECF Python bill

00:05:10,940 --> 00:05:17,240
pack and that was basically just in the

00:05:14,000 --> 00:05:20,840
compiled script running the install for

00:05:17,240 --> 00:05:22,760
mini Conda and basically seeing how that

00:05:20,840 --> 00:05:24,620
worked like what changes were needed and

00:05:22,760 --> 00:05:26,090
what this drove out in terms of

00:05:24,620 --> 00:05:29,330
knowledge for us was differences between

00:05:26,090 --> 00:05:31,220
mini Conda Conda and anaconda which is

00:05:29,330 --> 00:05:33,980
actually very confusing

00:05:31,220 --> 00:05:35,090
it all seems to sing Ababa very exactly

00:05:33,980 --> 00:05:37,910
but they're actually very different

00:05:35,090 --> 00:05:39,620
Conda is the actual package manager so I

00:05:37,910 --> 00:05:43,160
kissed equivalent and Ruby would be like

00:05:39,620 --> 00:05:46,669
bundler or Ruby gems specifically Java

00:05:43,160 --> 00:05:48,440
maybe maven mini Conda is the package

00:05:46,669 --> 00:05:51,080
manager itself and all the things you

00:05:48,440 --> 00:05:53,660
need to actually run it so for the

00:05:51,080 --> 00:05:56,440
bundler example it would be Ruby and

00:05:53,660 --> 00:05:59,450
whatever gems that bundler depends on

00:05:56,440 --> 00:06:02,300
all packaged together and then anaconda

00:05:59,450 --> 00:06:03,620
is meaning Conda so the package manager

00:06:02,300 --> 00:06:06,200
everything you need to install it and

00:06:03,620 --> 00:06:09,290
this whole large slew of data science

00:06:06,200 --> 00:06:10,850
packages that comes with it so that's

00:06:09,290 --> 00:06:12,979
what we gained from that experiment and

00:06:10,850 --> 00:06:15,650
then the next permant we try was to

00:06:12,979 --> 00:06:19,100
actually add all the low-level

00:06:15,650 --> 00:06:21,440
dependencies like Fortran its various C

00:06:19,100 --> 00:06:24,050
libraries like C bindings to the root of

00:06:21,440 --> 00:06:27,890
s like the root file system that all

00:06:24,050 --> 00:06:30,740
containers run on and this turned out to

00:06:27,890 --> 00:06:32,090
be a bad idea because what we found out

00:06:30,740 --> 00:06:34,129
was that these are very large

00:06:32,090 --> 00:06:35,629
dependencies and it was

00:06:34,129 --> 00:06:37,039
bad idea because if we added the third

00:06:35,629 --> 00:06:39,169
root of s we'd be adding it to

00:06:37,039 --> 00:06:42,349
everybody's apps so even if you don't

00:06:39,169 --> 00:06:43,580
want it the even if you're not using the

00:06:42,349 --> 00:06:45,649
Python built back you would have these

00:06:43,580 --> 00:06:48,409
on your root filesystem for every

00:06:45,649 --> 00:06:51,139
container hmm and then the last thing we

00:06:48,409 --> 00:06:54,050
tried was to vendor anaconda itself into

00:06:51,139 --> 00:06:55,819
like the entire distribution into the

00:06:54,050 --> 00:06:58,179
Python pill pack like the cash bill pack

00:06:55,819 --> 00:07:01,459
version and this didn't work out because

00:06:58,179 --> 00:07:03,259
anaconda is very very large like the

00:07:01,459 --> 00:07:04,909
sheer amount of data science packages

00:07:03,259 --> 00:07:08,389
that it comes with is very very large

00:07:04,909 --> 00:07:10,669
and this would call if we pursued this

00:07:08,389 --> 00:07:12,229
solution anyone using the Python Bill

00:07:10,669 --> 00:07:14,629
pack even if you've no interest in doing

00:07:12,229 --> 00:07:18,469
any kind of data science would have

00:07:14,629 --> 00:07:20,059
these dependencies built-in so what do

00:07:18,469 --> 00:07:23,089
we do for a solution we decided to just

00:07:20,059 --> 00:07:26,179
port over Ian's very well-written

00:07:23,089 --> 00:07:28,669
actually kind of Bill pack into the

00:07:26,179 --> 00:07:31,669
Python Bill pack as a kind of separate

00:07:28,669 --> 00:07:33,319
code path so this way users who are

00:07:31,669 --> 00:07:35,300
interested in getting add edit their

00:07:33,319 --> 00:07:37,429
data science packages will have those

00:07:35,300 --> 00:07:39,169
packages and their dependencies you know

00:07:37,429 --> 00:07:40,849
in their app containers and those who

00:07:39,169 --> 00:07:42,409
are not interested and having those

00:07:40,849 --> 00:07:43,969
dependencies are not gonna have that

00:07:42,409 --> 00:07:46,819
extra file size though there's extra

00:07:43,969 --> 00:07:49,369
overhead to deal with that's great so I

00:07:46,819 --> 00:07:51,679
know like you know you use the code that

00:07:49,369 --> 00:07:53,269
I've been using before but there's a few

00:07:51,679 --> 00:07:54,679
things you have to do to it like a few

00:07:53,269 --> 00:07:56,029
sort of fixes you have to make like what

00:07:54,679 --> 00:07:58,039
what did you have to do to make it a bit

00:07:56,029 --> 00:08:00,769
more stable a bit more maintaining yes

00:07:58,039 --> 00:08:02,719
so once we got the basic action basic

00:08:00,769 --> 00:08:05,509
khandha support into the Bill pack we

00:08:02,719 --> 00:08:08,539
kind of released it and we used it and

00:08:05,509 --> 00:08:10,249
we had some users use it and we got some

00:08:08,539 --> 00:08:12,769
valuable feedback and implemented these

00:08:10,249 --> 00:08:14,629
fixes so for example Minicon de was

00:08:12,769 --> 00:08:17,300
always installing Python 3 even if you

00:08:14,629 --> 00:08:20,329
tried to specify Python 2 as the version

00:08:17,300 --> 00:08:22,490
you wanted we fixed that the mini Condor

00:08:20,329 --> 00:08:24,319
has a progress bar which actually

00:08:22,490 --> 00:08:26,509
interacts with CF staging logs in an

00:08:24,319 --> 00:08:28,339
interesting way and that if your

00:08:26,509 --> 00:08:30,709
progress bar like continually ticks and

00:08:28,339 --> 00:08:33,259
updates like it's the terminal it'll

00:08:30,709 --> 00:08:35,839
result in like massive massive logs like

00:08:33,259 --> 00:08:37,729
what you see there is just 1% and like

00:08:35,839 --> 00:08:39,169
the progress that much output was

00:08:37,729 --> 00:08:41,149
actually overloading Doppler and we were

00:08:39,169 --> 00:08:43,880
like losing messages so we decided to

00:08:41,149 --> 00:08:45,350
just suppress that output for staging I

00:08:43,880 --> 00:08:47,089
mean you really just care that like the

00:08:45,350 --> 00:08:47,779
end product is that you know all your

00:08:47,089 --> 00:08:50,839
dependencies

00:08:47,779 --> 00:08:54,170
get downloaded the other thing we fixed

00:08:50,839 --> 00:08:55,699
was that the mini Conda if you push your

00:08:54,170 --> 00:08:57,709
app installed all these dependencies

00:08:55,699 --> 00:08:59,240
then you push strap again it would read

00:08:57,709 --> 00:09:01,850
download those dependencies because it

00:08:59,240 --> 00:09:03,620
wasn't using the app cache so we got it

00:09:01,850 --> 00:09:05,660
to actually you know put your packages

00:09:03,620 --> 00:09:08,809
into the app cache so that on V push

00:09:05,660 --> 00:09:11,089
you're not be downloading them and then

00:09:08,809 --> 00:09:13,490
the last thing was a mini Conda was

00:09:11,089 --> 00:09:16,519
actually breaking our Python bill pack

00:09:13,490 --> 00:09:18,709
builds because Ian's bill pack was

00:09:16,519 --> 00:09:20,779
pulling the latest version of Conda you

00:09:18,709 --> 00:09:23,019
know which were like a quick solution is

00:09:20,779 --> 00:09:26,269
you know maybe what you want but for

00:09:23,019 --> 00:09:28,370
reproducibility we wanted to actually

00:09:26,269 --> 00:09:30,709
lock it to a version because every time

00:09:28,370 --> 00:09:32,600
a new version of Conda was coming out or

00:09:30,709 --> 00:09:34,490
mini Conda it was breaking our bills

00:09:32,600 --> 00:09:36,079
because they would probably step in some

00:09:34,490 --> 00:09:38,899
tiny little feature that would break our

00:09:36,079 --> 00:09:41,779
sample apps and then build that was

00:09:38,899 --> 00:09:43,309
green the day before is now red so we

00:09:41,779 --> 00:09:47,629
locked it to the latest version at the

00:09:43,309 --> 00:09:49,220
time and yeah so you know we can

00:09:47,629 --> 00:09:50,660
actually do quite a lot of this it's

00:09:49,220 --> 00:09:53,779
great that your team was able to help

00:09:50,660 --> 00:09:56,180
ash we can we've started using this with

00:09:53,779 --> 00:09:57,740
with clients in project so we've started

00:09:56,180 --> 00:10:00,529
doing using it in a variety of different

00:09:57,740 --> 00:10:02,389
scenarios and using machine learning and

00:10:00,529 --> 00:10:04,189
predictive analytics a few of these are

00:10:02,389 --> 00:10:06,079
you know production scenarios with our

00:10:04,189 --> 00:10:07,910
clients you know one for a delivery

00:10:06,079 --> 00:10:10,040
company that's predicting the time to

00:10:07,910 --> 00:10:12,139
delivery and so that someone can get

00:10:10,040 --> 00:10:14,839
updated as their package is arriving and

00:10:12,139 --> 00:10:16,910
working with a car maker in Europe to

00:10:14,839 --> 00:10:18,800
improve their supply chains they're able

00:10:16,910 --> 00:10:21,319
to predict what parts they need to order

00:10:18,800 --> 00:10:23,389
from their suppliers in order to reduce

00:10:21,319 --> 00:10:25,910
the the cost and the time needed for

00:10:23,389 --> 00:10:27,139
those supplies to reach them and then

00:10:25,910 --> 00:10:28,610
we're actually working with another car

00:10:27,139 --> 00:10:31,009
maker to deliver warnings to drivers

00:10:28,610 --> 00:10:32,929
when they have you know bad weather on

00:10:31,009 --> 00:10:34,100
the roads and my colleague dot is going

00:10:32,929 --> 00:10:35,629
to talk about that in the next session

00:10:34,100 --> 00:10:39,350
about how you know this Internet of

00:10:35,629 --> 00:10:41,929
Things is enabling people to save lives

00:10:39,350 --> 00:10:46,040
effectively on the road using the new

00:10:41,929 --> 00:10:47,689
Python built pack so I think you had a

00:10:46,040 --> 00:10:50,569
scenario as well where you manage to get

00:10:47,689 --> 00:10:52,220
some usefulness out of this so actually

00:10:50,569 --> 00:10:54,199
got to use it in my personal life as

00:10:52,220 --> 00:10:56,339
it's kind of from a hobbyist perspective

00:10:54,199 --> 00:10:57,920
so right now I'm taking this

00:10:56,339 --> 00:11:00,959
I'm doing a masters at Georgia Tech

00:10:57,920 --> 00:11:03,329
using the OMS CS program and I'm taking

00:11:00,959 --> 00:11:04,740
a machine learning class and for one of

00:11:03,329 --> 00:11:06,689
our homework assignments we had a I

00:11:04,740 --> 00:11:10,980
think was apply five supervised learning

00:11:06,689 --> 00:11:13,379
models two to two data sets and so the

00:11:10,980 --> 00:11:16,860
total ten experiments and then for those

00:11:13,379 --> 00:11:18,600
experiments being a millennial I wanted

00:11:16,860 --> 00:11:20,910
to watch Netflix while doing those

00:11:18,600 --> 00:11:23,809
experiments and doing those experiments

00:11:20,910 --> 00:11:27,300
on my macbook pro ch like four years old

00:11:23,809 --> 00:11:28,499
kind of thing ki now I basically while

00:11:27,300 --> 00:11:30,059
running the experiments couldn't do

00:11:28,499 --> 00:11:31,790
anything else on my laptop couldn't he's

00:11:30,059 --> 00:11:35,790
chrome couldn't couldn't do anything

00:11:31,790 --> 00:11:38,399
couldn't pull the video players so how

00:11:35,790 --> 00:11:40,589
do I multitask and watch Netflix while

00:11:38,399 --> 00:11:43,309
doing my homework and the solution was

00:11:40,589 --> 00:11:47,309
PETA is pivotal Web Services which is

00:11:43,309 --> 00:11:49,949
pivotal I hosted instance of Cloud

00:11:47,309 --> 00:11:51,959
Foundry so with Pete ups I could just

00:11:49,949 --> 00:11:55,800
grab my experiments in like a pretty

00:11:51,959 --> 00:11:58,050
minimalistic flask app push it up to P

00:11:55,800 --> 00:11:59,279
dubs let P dubs do all the work of like

00:11:58,050 --> 00:12:01,889
downloading the dependencies and

00:11:59,279 --> 00:12:04,439
actually running the experiment and on

00:12:01,889 --> 00:12:06,600
my own computer I you know had the

00:12:04,439 --> 00:12:08,670
appropriate memory to watch the entire

00:12:06,600 --> 00:12:11,610
first season Oh stranger things which I

00:12:08,670 --> 00:12:14,370
highly recommend is very good and then

00:12:11,610 --> 00:12:16,649
yeah so I did my homework and multitask

00:12:14,370 --> 00:12:18,689
watch Netflix and I was happy all

00:12:16,649 --> 00:12:20,569
because of the Honda in the Python go

00:12:18,689 --> 00:12:23,550
pack so that sounds very useful and

00:12:20,569 --> 00:12:27,509
we're gonna have a quick look at what it

00:12:23,550 --> 00:12:28,679
looks like and yeah let's do it mo so

00:12:27,509 --> 00:12:32,249
you're down we're just gonna walk you

00:12:28,679 --> 00:12:34,819
through what the the app it is so didn't

00:12:32,249 --> 00:12:36,870
want to chance the conference Wi-Fi and

00:12:34,819 --> 00:12:39,209
did you want to talk us through this a

00:12:36,870 --> 00:12:41,040
little bit so we start off you know we

00:12:39,209 --> 00:12:43,949
have a little app and I can actually go

00:12:41,040 --> 00:12:45,959
and have a look at the this is the

00:12:43,949 --> 00:12:47,819
environment Yama file that you give to

00:12:45,959 --> 00:12:49,439
your app and it basically is the list of

00:12:47,819 --> 00:12:51,720
Python dependencies so this is what

00:12:49,439 --> 00:12:54,149
Condor uses to understand what it has to

00:12:51,720 --> 00:12:56,220
install yeah so if we take a look at

00:12:54,149 --> 00:12:59,009
this what are the few of the packages

00:12:56,220 --> 00:13:00,779
that you would say before the con con in

00:12:59,009 --> 00:13:02,610
the Python build pack where it wouldn't

00:13:00,779 --> 00:13:04,500
really be possible yeah so I think the

00:13:02,610 --> 00:13:06,870
main ones here are pandas which is like

00:13:04,500 --> 00:13:08,399
a sort of data frame analysis tool and

00:13:06,870 --> 00:13:09,540
scikit-learn which is kind of the

00:13:08,399 --> 00:13:11,730
standard

00:13:09,540 --> 00:13:13,259
Python machine learning library and so

00:13:11,730 --> 00:13:14,699
those were kind of like big problems

00:13:13,259 --> 00:13:18,660
these are kind of from the PI data space

00:13:14,699 --> 00:13:20,430
like that and so yeah so if you if you

00:13:18,660 --> 00:13:22,170
have this environment Yama file the

00:13:20,430 --> 00:13:24,120
build Pak automatically detects that

00:13:22,170 --> 00:13:25,649
right yeah exactly yeah so the regularly

00:13:24,120 --> 00:13:29,850
the Python build back would use like a

00:13:25,649 --> 00:13:31,440
requirements that txt to indicate that

00:13:29,850 --> 00:13:34,290
you want a Python app it would go down

00:13:31,440 --> 00:13:36,600
like the PIP installation code path or

00:13:34,290 --> 00:13:38,850
route but the environment diamo is

00:13:36,600 --> 00:13:40,259
completely separate one yeah and you can

00:13:38,850 --> 00:13:42,240
kind of see here like we just pushed

00:13:40,259 --> 00:13:45,120
this really simple app it's just a flask

00:13:42,240 --> 00:13:48,089
app and you can see I think it's here it

00:13:45,120 --> 00:13:53,220
suddenly uses the uses the Conda build

00:13:48,089 --> 00:13:54,839
pack ruch code path in the build pack so

00:13:53,220 --> 00:13:57,540
it installs the Python vironment

00:13:54,839 --> 00:14:01,560
installs mini Conda you know it installs

00:13:57,540 --> 00:14:03,029
a few different things yeah so a few of

00:14:01,560 --> 00:14:04,769
the interesting things you'll see here

00:14:03,029 --> 00:14:06,420
that you know after we've installed

00:14:04,769 --> 00:14:09,350
these packages that'll clean up the the

00:14:06,420 --> 00:14:12,389
original tarballs and if one of the

00:14:09,350 --> 00:14:14,519
dependencies is or is it yes this one

00:14:12,389 --> 00:14:15,779
are things like 120 megabytes yeah and

00:14:14,519 --> 00:14:18,660
if we go further down that mean is a

00:14:15,779 --> 00:14:20,220
fortran one right like live Lib G of

00:14:18,660 --> 00:14:22,110
Fortran is there so that's something

00:14:20,220 --> 00:14:24,000
that you wouldn't want you know Fortran

00:14:22,110 --> 00:14:26,730
on everybody's root filesystem that's

00:14:24,000 --> 00:14:29,010
not really necessary unless you're a

00:14:26,730 --> 00:14:30,839
data scientist obviously yeah okay so

00:14:29,010 --> 00:14:33,750
you know this works in the usual way it

00:14:30,839 --> 00:14:38,100
just looks like part of your normal CF

00:14:33,750 --> 00:14:40,560
system and we can go have a look at what

00:14:38,100 --> 00:14:41,670
the app does so this app that I'm

00:14:40,560 --> 00:14:44,279
pushing is just a really simple

00:14:41,670 --> 00:14:45,839
sentiment analysis app it's a model

00:14:44,279 --> 00:14:48,420
that's pre-trained somewhere else on a

00:14:45,839 --> 00:14:49,889
large corpus of text and and you're

00:14:48,420 --> 00:14:52,290
trying to determine whether something is

00:14:49,889 --> 00:14:54,089
a positive sort of sentiment a negative

00:14:52,290 --> 00:14:56,310
sentiment or maybe somewhere in the

00:14:54,089 --> 00:14:58,110
middle some neutral sentiment and now

00:14:56,310 --> 00:15:00,569
we've got it running it's up in p dub

00:14:58,110 --> 00:15:02,189
it's running it'll take you send it some

00:15:00,569 --> 00:15:03,660
sent some words and it will tell you the

00:15:02,189 --> 00:15:05,279
sentiment of those words and we've gone

00:15:03,660 --> 00:15:07,139
from having a you know a machine

00:15:05,279 --> 00:15:09,029
learning system that was developed and

00:15:07,139 --> 00:15:10,860
created on someone's laptop maybe it was

00:15:09,029 --> 00:15:13,079
trained somewhere else on a sort of a

00:15:10,860 --> 00:15:15,410
big data system and we're now deploying

00:15:13,079 --> 00:15:17,370
it in exactly the same environment and

00:15:15,410 --> 00:15:18,779
Untied foundry so we're able to

00:15:17,370 --> 00:15:21,089
reproduce that environment using that

00:15:18,779 --> 00:15:22,830
environment tamil file and deploy it

00:15:21,089 --> 00:15:24,570
really simply so

00:15:22,830 --> 00:15:26,400
you know if you can't see the sentence

00:15:24,570 --> 00:15:29,160
is the first one is this app is awesome

00:15:26,400 --> 00:15:31,320
and then the tired hopefully that's good

00:15:29,160 --> 00:15:33,270
sentiment sir middle one is today is

00:15:31,320 --> 00:15:35,550
Tuesday and last one is I am so mad and

00:15:33,270 --> 00:15:39,240
angry and if we send this data to the

00:15:35,550 --> 00:15:42,180
server or we get back is the sentiment

00:15:39,240 --> 00:15:44,700
so higher numbers are higher sentiment

00:15:42,180 --> 00:15:48,480
better in more friendly sentiment and

00:15:44,700 --> 00:15:50,940
you know the top one gets like 82% sort

00:15:48,480 --> 00:15:52,740
of high sentiment as expected the middle

00:15:50,940 --> 00:15:54,690
one is kind of neutral about forty point

00:15:52,740 --> 00:15:57,060
four six and the bottom one is yeah

00:15:54,690 --> 00:15:58,980
pretty negative 0.14 and we can see like

00:15:57,060 --> 00:16:01,500
you know this is a really simple service

00:15:58,980 --> 00:16:03,240
but we can you know change the day to be

00:16:01,500 --> 00:16:05,160
sendin here I were saying this app is

00:16:03,240 --> 00:16:06,630
awful when it's in the cloud and the

00:16:05,160 --> 00:16:08,310
sentiment goes down to like point one

00:16:06,630 --> 00:16:09,690
eight so you know this is a live service

00:16:08,310 --> 00:16:11,460
and you could just start sending it data

00:16:09,690 --> 00:16:13,500
and it's responding and we've been able

00:16:11,460 --> 00:16:15,540
to do that really simply without having

00:16:13,500 --> 00:16:24,270
to worry about all the other underlying

00:16:15,540 --> 00:16:28,830
structures okay need to get back to

00:16:24,270 --> 00:16:31,130
crimson half so the what we can talk

00:16:28,830 --> 00:16:33,570
about next is the kind of what's going

00:16:31,130 --> 00:16:35,040
what's in the future for Conda and the

00:16:33,570 --> 00:16:37,790
Python built pack because you know

00:16:35,040 --> 00:16:41,100
features definitely not completely

00:16:37,790 --> 00:16:42,600
configured really be complete yeah they

00:16:41,100 --> 00:16:46,110
can I guess I don't know why I said that

00:16:42,600 --> 00:16:47,340
um okay so the first thing is to run

00:16:46,110 --> 00:16:51,120
this functionality and air-gapped

00:16:47,340 --> 00:16:52,740
environment so a lot of corporations you

00:16:51,120 --> 00:16:54,860
know run their sea of installations in

00:16:52,740 --> 00:16:58,290
completely airtight environments no

00:16:54,860 --> 00:17:00,690
calling to the outside network so right

00:16:58,290 --> 00:17:02,430
now the conduct can't do that and or

00:17:00,690 --> 00:17:03,090
condon the Python built I can't do it

00:17:02,430 --> 00:17:05,160
either

00:17:03,090 --> 00:17:06,810
because Kondo doesn't support been

00:17:05,160 --> 00:17:09,120
during of packages in the same way that

00:17:06,810 --> 00:17:12,150
say bundler for Ruby can just run bundle

00:17:09,120 --> 00:17:14,940
package and this is it's a hard problem

00:17:12,150 --> 00:17:18,709
for them to solve because these really

00:17:14,940 --> 00:17:21,720
low-level big dependencies like Fortran

00:17:18,709 --> 00:17:24,660
C libraries C bindings is very difficult

00:17:21,720 --> 00:17:28,230
to both package that in with the Python

00:17:24,660 --> 00:17:30,450
packages on top and install them in a

00:17:28,230 --> 00:17:32,870
way that like you know all the pods are

00:17:30,450 --> 00:17:34,550
corrects all the bindings are correct

00:17:32,870 --> 00:17:36,890
all of that stuff so I think they are

00:17:34,550 --> 00:17:38,780
working on it but it is definitely a

00:17:36,890 --> 00:17:40,070
tough problem to solve so I've been able

00:17:38,780 --> 00:17:41,300
to support it in the bill pack and tell

00:17:40,070 --> 00:17:42,860
you know they support that I think there

00:17:41,300 --> 00:17:45,800
is a way of basically running your own

00:17:42,860 --> 00:17:47,390
local repo so if you run a repo on a

00:17:45,800 --> 00:17:50,320
different server you could actually get

00:17:47,390 --> 00:17:52,910
the packages from there but yeah that's

00:17:50,320 --> 00:17:56,330
out of the scope of just the pack itself

00:17:52,910 --> 00:17:59,270
so the thing that is related to Sven

00:17:56,330 --> 00:18:02,210
during manaconda so that for the cash

00:17:59,270 --> 00:18:04,130
the cash bill pack you wouldn't have to

00:18:02,210 --> 00:18:06,679
download mini Conda during staging you

00:18:04,130 --> 00:18:08,090
know everybody has many Conda inside so

00:18:06,679 --> 00:18:09,830
we have worked for that in our backlog

00:18:08,090 --> 00:18:11,780
but it's not super high priority because

00:18:09,830 --> 00:18:13,400
one of the biggest reasons that people

00:18:11,780 --> 00:18:15,800
use the cash pool pack is for the

00:18:13,400 --> 00:18:17,540
firewalled air-gapped environment since

00:18:15,800 --> 00:18:20,929
we can't support that yet you know it's

00:18:17,540 --> 00:18:23,510
not super high priority something that

00:18:20,929 --> 00:18:25,880
is a little higher priority is reducing

00:18:23,510 --> 00:18:27,710
the size of the end droplet what we were

00:18:25,880 --> 00:18:29,929
seeing with our sample apps that use

00:18:27,710 --> 00:18:31,490
mini Conda and the Python Belle pack or

00:18:29,929 --> 00:18:34,550
that we were getting some ridiculous

00:18:31,490 --> 00:18:36,140
disc sizes for the end droplet so we

00:18:34,550 --> 00:18:38,059
would be you know pushing the sample app

00:18:36,140 --> 00:18:40,790
it would fail for some reason look at

00:18:38,059 --> 00:18:42,800
this aging logs they would say I forgot

00:18:40,790 --> 00:18:43,820
what the CF exact message is but it's

00:18:42,800 --> 00:18:46,820
basically like you know you run out of

00:18:43,820 --> 00:18:48,290
disk space for your droplet so we

00:18:46,820 --> 00:18:50,630
realized that this is because you have

00:18:48,290 --> 00:18:53,960
all these large dependencies now on your

00:18:50,630 --> 00:18:56,750
droplet and maybe maybe there's a way to

00:18:53,960 --> 00:18:58,940
you know not have all the dependencies

00:18:56,750 --> 00:19:01,370
on the end droplet like only the ones

00:18:58,940 --> 00:19:03,650
you need I don't know enough about mini

00:19:01,370 --> 00:19:05,420
Conda to be able to say that with

00:19:03,650 --> 00:19:07,250
confidence so yeah we were doing

00:19:05,420 --> 00:19:10,640
investigation to find out if we could

00:19:07,250 --> 00:19:14,570
reduce the size of the end droplet and

00:19:10,640 --> 00:19:18,260
the last thing is just your feedback for

00:19:14,570 --> 00:19:21,320
that fixes page most of the fixes were

00:19:18,260 --> 00:19:24,830
implemented as responses to customers

00:19:21,320 --> 00:19:26,090
saying or users saying you know I don't

00:19:24,830 --> 00:19:27,860
think this is right or like this

00:19:26,090 --> 00:19:30,470
probably needs a fix or this is a better

00:19:27,860 --> 00:19:31,790
user experience like just for example

00:19:30,470 --> 00:19:34,130
when we were pushing the sample app we

00:19:31,790 --> 00:19:37,429
noticed that it doesn't print out a

00:19:34,130 --> 00:19:38,750
clean list of all the condo packages

00:19:37,429 --> 00:19:40,429
that you just installed so you know

00:19:38,750 --> 00:19:43,600
that's something that we're gonna want

00:19:40,429 --> 00:19:45,200
to fix so it's you y'all using the

00:19:43,600 --> 00:19:46,160
functionality and giving us feedback

00:19:45,200 --> 00:19:47,960
that'll

00:19:46,160 --> 00:19:50,480
drive out more stuff where can people

00:19:47,960 --> 00:19:53,830
get it like where is it oh it's already

00:19:50,480 --> 00:19:57,140
available in the official CF pill pack

00:19:53,830 --> 00:19:58,670
dope at one five six so you know since

00:19:57,140 --> 00:20:00,470
all of you keep your Cloud Foundry

00:19:58,670 --> 00:20:01,700
installations super up-to-date and all

00:20:00,470 --> 00:20:04,490
your bull packs up to date you should

00:20:01,700 --> 00:20:06,260
already have this functionality great so

00:20:04,490 --> 00:20:08,390
and you talked a little bit about there

00:20:06,260 --> 00:20:09,920
about how people can submit bug fixes

00:20:08,390 --> 00:20:11,690
but what if you want to submit something

00:20:09,920 --> 00:20:13,580
else like it you know I was a pivotal

00:20:11,690 --> 00:20:14,810
employer I am a pivotal employer so I

00:20:13,580 --> 00:20:16,430
was able to just go to the build backs

00:20:14,810 --> 00:20:18,320
team and say can you help me with this

00:20:16,430 --> 00:20:21,320
how do someone who's not a pivotal get

00:20:18,320 --> 00:20:23,630
something like this get involved yeah so

00:20:21,320 --> 00:20:25,480
the answer is I joined pivotal as an

00:20:23,630 --> 00:20:28,700
employee and talked to the right people

00:20:25,480 --> 00:20:30,320
okay there another way a big no-no so

00:20:28,700 --> 00:20:33,320
yeah this is an open source way to do it

00:20:30,320 --> 00:20:35,090
so for the Cloud Foundry ecosystem we

00:20:33,320 --> 00:20:36,860
have this TF dev mailing list you know

00:20:35,090 --> 00:20:38,990
it's a very active a lot of discussion

00:20:36,860 --> 00:20:41,150
on it a lot of features come out from

00:20:38,990 --> 00:20:43,360
someone saying hey I have this you know

00:20:41,150 --> 00:20:47,330
use case or like I have this problem and

00:20:43,360 --> 00:20:48,740
how do I fix it and maybe the

00:20:47,330 --> 00:20:50,840
functionality is not there yet so then

00:20:48,740 --> 00:20:52,970
the discussion opens up on what that

00:20:50,840 --> 00:20:57,940
functionality should be you know details

00:20:52,970 --> 00:21:00,170
of it in a more real-time communication

00:20:57,940 --> 00:21:02,960
format we have the open source cloud

00:21:00,170 --> 00:21:04,940
foundry slack which has channels for

00:21:02,960 --> 00:21:06,890
pretty much every cloud foundry team and

00:21:04,940 --> 00:21:11,030
various topics like bill packs is on

00:21:06,890 --> 00:21:12,290
there is like hashtagged o packs so you

00:21:11,030 --> 00:21:13,520
can definitely open up the discussion on

00:21:12,290 --> 00:21:15,740
there as well and get more real-time

00:21:13,520 --> 00:21:18,620
feedback and a lot more people jumping

00:21:15,740 --> 00:21:22,330
in you can also do the CF dojo program

00:21:18,620 --> 00:21:25,850
which is a six-week program where you

00:21:22,330 --> 00:21:29,720
basically gain skills to contribute to

00:21:25,850 --> 00:21:32,480
Cloud Foundry full-time you I think you

00:21:29,720 --> 00:21:34,820
would still need to be at a company that

00:21:32,480 --> 00:21:37,160
really puts full-time developers on

00:21:34,820 --> 00:21:39,440
Cloud Foundry so for example just

00:21:37,160 --> 00:21:42,260
because you have gone through a dojo

00:21:39,440 --> 00:21:44,650
program you can't just expect to submit

00:21:42,260 --> 00:21:46,820
PRS off the bat wouldn't like no no

00:21:44,650 --> 00:21:48,620
preceding discussion and then expect

00:21:46,820 --> 00:21:51,260
those to get merged in like you'll

00:21:48,620 --> 00:21:53,720
notice that open PRS opening a PR isn't

00:21:51,260 --> 00:21:56,490
on here because if you just open a PR

00:21:53,720 --> 00:21:58,010
for this massive new feature

00:21:56,490 --> 00:22:00,960
that has not been discussed at all yet

00:21:58,010 --> 00:22:03,120
odds are that implementation is not

00:22:00,960 --> 00:22:06,030
going to be accepted it is a good way

00:22:03,120 --> 00:22:07,260
that like open up discussion but we

00:22:06,030 --> 00:22:09,450
would rather have you maybe open up

00:22:07,260 --> 00:22:11,250
discussion first instead of spending all

00:22:09,450 --> 00:22:12,780
this time implementing your PR and then

00:22:11,250 --> 00:22:17,250
being sad that it doesn't get merged in

00:22:12,780 --> 00:22:20,160
exactly as it's cool and there's also

00:22:17,250 --> 00:22:22,230
the feature narrative so this is kind of

00:22:20,160 --> 00:22:25,290
a more formal way to get your feature

00:22:22,230 --> 00:22:28,350
into CF for like the end process part

00:22:25,290 --> 00:22:31,260
where you are writing about your very

00:22:28,350 --> 00:22:33,750
concrete use cases and opening up the

00:22:31,260 --> 00:22:36,540
discussion on how to maybe fix these

00:22:33,750 --> 00:22:37,500
problems like the actual what the future

00:22:36,540 --> 00:22:39,270
would look like how it would get

00:22:37,500 --> 00:22:41,580
implemented so now you might start

00:22:39,270 --> 00:22:45,270
talking about you know changes to the CC

00:22:41,580 --> 00:22:47,309
API changes to the bill packs and etc

00:22:45,270 --> 00:22:50,790
but the most important thing here is

00:22:47,309 --> 00:22:53,250
concrete use cases so if Ian had just

00:22:50,790 --> 00:22:55,440
came to us and was like yeah I really

00:22:53,250 --> 00:22:58,020
want to use data science in the Python

00:22:55,440 --> 00:23:00,780
go pack we wouldn't have been able to

00:22:58,020 --> 00:23:03,059
really go anywhere with that without

00:23:00,780 --> 00:23:04,500
like driving out more specific concrete

00:23:03,059 --> 00:23:07,309
use cases like the ones he was talking

00:23:04,500 --> 00:23:10,800
about with the like the transportation

00:23:07,309 --> 00:23:13,290
companies so concrete use cases are ones

00:23:10,800 --> 00:23:15,510
that people can empathize with and that

00:23:13,290 --> 00:23:16,920
other developers and other companies

00:23:15,510 --> 00:23:19,020
look at and be like okay we have

00:23:16,920 --> 00:23:20,010
something kind of similar to that and

00:23:19,020 --> 00:23:21,120
then they're gonna jump in the

00:23:20,010 --> 00:23:23,070
discussion and talk about their use

00:23:21,120 --> 00:23:26,160
cases and it's gonna be a lot more

00:23:23,070 --> 00:23:27,929
productive great well thanks James and

00:23:26,160 --> 00:23:30,510
your team for helping me out with that

00:23:27,929 --> 00:23:32,640
and thanks everyone for listening to our

00:23:30,510 --> 00:23:34,770
talk you can find a code for the build

00:23:32,640 --> 00:23:37,679
pack up on the type foundry github and

00:23:34,770 --> 00:23:39,000
and come ask us questions now we'll take

00:23:37,679 --> 00:23:41,220
questions here but also on Twitter I

00:23:39,000 --> 00:23:43,350
think as well so yeah that's my github

00:23:41,220 --> 00:23:43,880
and put her hand on cool so thanks

00:23:43,350 --> 00:23:47,240
everyone

00:23:43,880 --> 00:23:47,240
any questions

00:23:47,500 --> 00:24:09,440
about the Python bill PAC or

00:23:50,270 --> 00:24:10,730
contributing Cloud Foundry in general so

00:24:09,440 --> 00:24:12,110
when you say external dependencies are

00:24:10,730 --> 00:24:31,550
you talking about like the lower level

00:24:12,110 --> 00:24:33,860
bindings are like the packages so the

00:24:31,550 --> 00:24:35,570
way that we do a lot of our testing for

00:24:33,860 --> 00:24:37,820
the Bill packs is through like

00:24:35,570 --> 00:24:41,360
high-level integration tests and sample

00:24:37,820 --> 00:24:44,030
apps so for example for the kind of

00:24:41,360 --> 00:24:47,210
build back we had three or four very

00:24:44,030 --> 00:24:50,810
explicit mini Khanda like Python apps

00:24:47,210 --> 00:24:52,880
that use mini khandha and so we test we

00:24:50,810 --> 00:24:54,620
the pushing of the those apps and

00:24:52,880 --> 00:24:55,910
asserting certain behavior on it we have

00:24:54,620 --> 00:24:58,250
like a testing framework called machete

00:24:55,910 --> 00:25:02,210
that just wraps around stuff like the

00:24:58,250 --> 00:25:03,980
logs hating the requests and etc in

00:25:02,210 --> 00:25:06,950
terms of like the actual dependencies

00:25:03,980 --> 00:25:09,920
were pulling in like say like Lib G

00:25:06,950 --> 00:25:11,900
Fortran we have to we don't test that

00:25:09,920 --> 00:25:14,270
because that's outside of our scope we

00:25:11,900 --> 00:25:17,090
trust that the live Fortran maintainer

00:25:14,270 --> 00:25:19,370
czar testing their code and furthermore

00:25:17,090 --> 00:25:22,340
it's not like these things are being

00:25:19,370 --> 00:25:24,530
pulled in for every CF user like if a CF

00:25:22,340 --> 00:25:27,710
user is saying I don't want this package

00:25:24,530 --> 00:25:31,340
that uses live Fortran they have to kind

00:25:27,710 --> 00:25:31,700
of understand that maintenance aspect as

00:25:31,340 --> 00:25:33,770
well

00:25:31,700 --> 00:25:36,080
so it's fair to say as well that they

00:25:33,770 --> 00:25:37,850
conda package manager has a whole suite

00:25:36,080 --> 00:25:40,280
of tests as well so kind of we're

00:25:37,850 --> 00:25:42,830
trusting that level and then yeah you

00:25:40,280 --> 00:25:44,870
can't because it's the user can specify

00:25:42,830 --> 00:25:47,090
any package to bring in there's no way

00:25:44,870 --> 00:25:48,980
we can check all of those things so yeah

00:25:47,090 --> 00:25:50,510
interesting stuff interesting tidbit

00:25:48,980 --> 00:25:53,210
about that actually it's like even

00:25:50,510 --> 00:25:55,029
though continuum is kind of the company

00:25:53,210 --> 00:25:58,070
that backs

00:25:55,029 --> 00:25:59,629
mini Conda and Conda in a way Conda

00:25:58,070 --> 00:26:03,289
itself the package manager is fully open

00:25:59,629 --> 00:26:04,639
source and anaconda is almost like fully

00:26:03,289 --> 00:26:07,190
open source like most of the packages

00:26:04,639 --> 00:26:10,340
are open source continuum just really

00:26:07,190 --> 00:26:12,590
maintains the Anaconda distribution so

00:26:10,340 --> 00:26:14,330
they're the ones who ensure that when

00:26:12,590 --> 00:26:16,009
you're installing anaconda you're

00:26:14,330 --> 00:26:17,869
getting this suite of specific data

00:26:16,009 --> 00:26:19,759
packages and they're the latest updates

00:26:17,869 --> 00:26:21,049
and all those other things but you can

00:26:19,759 --> 00:26:23,899
check out the kind of package manager

00:26:21,049 --> 00:26:26,350
code yourself so yeah any other

00:26:23,899 --> 00:26:26,350
questions

00:26:26,470 --> 00:26:30,820
nope okay thanks for your time so

00:26:28,549 --> 00:26:30,820
everyone

00:26:31,630 --> 00:26:35,389

YouTube URL: https://www.youtube.com/watch?v=1PBEQAyehuk


