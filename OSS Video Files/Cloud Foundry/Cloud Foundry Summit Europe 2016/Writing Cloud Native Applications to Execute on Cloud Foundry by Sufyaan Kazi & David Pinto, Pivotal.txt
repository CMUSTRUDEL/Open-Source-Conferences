Title: Writing Cloud Native Applications to Execute on Cloud Foundry by Sufyaan Kazi & David Pinto, Pivotal
Publication date: 2016-09-30
Playlist: Cloud Foundry Summit Europe 2016
Description: 
	Writing Cloud Native Applications to Execute on Cloud Foundry - Sufyaan Kazi & David Pinto, Pivotal

In this tutorial, Sufyaan Kazi and David Pinto will walk attendees through the architecture of a Stock Trading application which has been built as 5 distinct Spring Boot Microservices. They will also give attendees a walk through of how to deploy these Microservices to Cloud Foundry to create a highly available resilient application and how to utilise features such as binding apps to a database, using a Configuration Server to store config external to an application, using Service Discovery to avoid hard-coding application urls.

The tutorial is hands on and attendees are invited to take part and try the classes or just follow the instructors.

About Sufyaan Kazi
Sufyaan leads the Pre-Sales team for Pivotal in UK and Ireland. He has previously worked as a code monkey, an architect and peacekeeper at IBM and Accenture, Wily Technologies as well as other consultancies in the APM and ECM spaces. He is a keen promoter of Pivotal Cloud Foundry and passionate about PaaS.

About David Pinto
David is a Principal Platform Architect in Pivotal UK & Ireland, prior to this he worked at Oracle and Sun Microsystems. David is passionate about Spring and how it can be used to write better applications for Cloud Foundry. David was one of the founder members of the London Cloud Native Meetup group and has successfully delivered many workshops on building Springs apps for the Cloud.
Captions: 
	00:00:00,380 --> 00:00:05,879
okay so I'm surfing Kazi I work with

00:00:03,360 --> 00:00:10,500
pivotal as there's David here based in

00:00:05,879 --> 00:00:16,049
London today's session how many of you

00:00:10,500 --> 00:00:21,060
have used spring boot before excellent

00:00:16,049 --> 00:00:22,590
session over so the session as I said it

00:00:21,060 --> 00:00:25,710
was going to be a two-hour walk through

00:00:22,590 --> 00:00:28,980
of building a fairly complex application

00:00:25,710 --> 00:00:30,510
composed of many micro services given

00:00:28,980 --> 00:00:32,969
that we've got 30 minutes we're gonna

00:00:30,510 --> 00:00:35,160
run it as I sort of hey we'll give you

00:00:32,969 --> 00:00:37,890
links to the to the workshop afterwards

00:00:35,160 --> 00:00:39,570
you can do that in your own time we're

00:00:37,890 --> 00:00:43,079
gonna start off with a quick intro of

00:00:39,570 --> 00:00:45,360
what is spring boot you're not going to

00:00:43,079 --> 00:00:47,309
go to the labs now but if you were you

00:00:45,360 --> 00:00:49,559
would follow this URL and there's a set

00:00:47,309 --> 00:00:52,789
of some basic primitive getting started

00:00:49,559 --> 00:00:55,860
to spring boot labs they walk for you

00:00:52,789 --> 00:00:58,379
building your first application changing

00:00:55,860 --> 00:00:59,670
the configuration of application so I

00:00:58,379 --> 00:01:02,969
could run on different app servers

00:00:59,670 --> 00:01:04,199
deploying it to cloud foundry writing

00:01:02,969 --> 00:01:05,729
you on error handlers it's fairly

00:01:04,199 --> 00:01:07,740
comprehensive it's about a half day's

00:01:05,729 --> 00:01:09,479
worth of content so follow that in your

00:01:07,740 --> 00:01:11,970
own time I'm going to pretend I'm

00:01:09,479 --> 00:01:13,080
running this lab I hope most of you will

00:01:11,970 --> 00:01:17,400
probably know the web server I'm about

00:01:13,080 --> 00:01:21,110
to go to which is spring initializer

00:01:17,400 --> 00:01:24,439
which is not on this URL it's on my Fox

00:01:21,110 --> 00:01:28,439
this is why David who makes me look good

00:01:24,439 --> 00:01:29,939
there you go so if you never use spring

00:01:28,439 --> 00:01:33,810
initializer before what does how does

00:01:29,939 --> 00:01:36,720
Josh describe this it's is happy place

00:01:33,810 --> 00:01:38,250
happy place yeah this is a great place

00:01:36,720 --> 00:01:41,100
you can go to just to start off it's a

00:01:38,250 --> 00:01:43,140
bit like a little wizard for giving you

00:01:41,100 --> 00:01:45,600
application I'd say hey I'd like a nice

00:01:43,140 --> 00:01:47,670
simple spring wheat app using Gradle I'm

00:01:45,600 --> 00:01:49,710
gonna just accept the defaults for my

00:01:47,670 --> 00:01:51,299
package and my application name and I

00:01:49,710 --> 00:01:52,770
want to use a certain dependency so I

00:01:51,299 --> 00:01:53,880
could just type in a dependency here and

00:01:52,770 --> 00:01:55,649
say I want to use it I'm gonna create a

00:01:53,880 --> 00:01:58,140
spring web app I want to create a very

00:01:55,649 --> 00:02:01,649
basic web app which exposes a restful

00:01:58,140 --> 00:02:04,770
endpoint I click on web I click generate

00:02:01,649 --> 00:02:08,280
project and that little fancy animation

00:02:04,770 --> 00:02:12,629
means I've got to zip somewhere Firefox

00:02:08,280 --> 00:02:13,790
sticks it in downloads I think ok oh ok

00:02:12,629 --> 00:02:20,180
even better

00:02:13,790 --> 00:02:25,150
now if it's got to find STS okay so I'm

00:02:20,180 --> 00:02:25,150
gonna import that into spring tall sweet

00:02:25,909 --> 00:02:32,079
I chose Gradle so where are we over here

00:02:33,129 --> 00:02:50,049
yeah so yeah dipinto downloads demo - we

00:02:45,500 --> 00:02:50,049
have a bit of luck this should work so

00:02:54,400 --> 00:02:58,099
for those of you have done something

00:02:56,599 --> 00:02:59,599
boot it does get a bit more advanced

00:02:58,099 --> 00:03:01,609
than this don't worry we're just gonna

00:02:59,599 --> 00:03:06,549
watch my application downloads and loads

00:03:01,609 --> 00:03:09,049
of libraries so just out of curiosity

00:03:06,549 --> 00:03:10,549
people who are using spring boots you're

00:03:09,049 --> 00:03:13,430
using spring web spring data

00:03:10,549 --> 00:03:16,670
how many probably using very complicated

00:03:13,430 --> 00:03:19,669
spring apps and you define complicated

00:03:16,670 --> 00:03:25,819
as yourself I've got people staring at

00:03:19,669 --> 00:03:28,849
me who's using spring cloud how many

00:03:25,819 --> 00:03:35,049
people are using deploying spring apps

00:03:28,849 --> 00:03:35,049
to Cloud Foundry okay cool we didn't

00:03:35,680 --> 00:03:42,129
okay so it's obviously I go here we go

00:03:39,440 --> 00:03:42,129
it's King elf

00:03:47,050 --> 00:03:50,540
this is just downloading a bunch of

00:03:48,950 --> 00:03:52,190
libraries which is needed I'm just going

00:03:50,540 --> 00:03:55,490
to say hey except I would like to import

00:03:52,190 --> 00:04:00,800
this project gives me an N player

00:03:55,490 --> 00:04:03,110
placate empty application over here in a

00:04:00,800 --> 00:04:06,920
minute I guess it will it's it's

00:04:03,110 --> 00:04:19,670
downloading stuff hasn't appeared as yet

00:04:06,920 --> 00:04:30,220
it's ok ok so that's not the one demo to

00:04:19,670 --> 00:04:30,220
you I guess there we go right

00:04:31,639 --> 00:04:37,409
so here's my amazingly complicated

00:04:35,069 --> 00:04:38,759
application I know just bring boot up

00:04:37,409 --> 00:04:40,680
because it's got an annotation in the

00:04:38,759 --> 00:04:44,580
beginning saying hey I must bring boot

00:04:40,680 --> 00:04:47,759
app I'd like to make this a simple app

00:04:44,580 --> 00:04:49,229
which exposes a vestal end point I'm

00:04:47,759 --> 00:04:54,449
just going to create a new class here

00:04:49,229 --> 00:04:58,550
just to make life a bit easy for me to

00:04:54,449 --> 00:05:03,029
call it my controller if I could spell

00:04:58,550 --> 00:05:05,189
and spring group makes life easy for me

00:05:03,029 --> 00:05:06,300
I used to work for a company they've got

00:05:05,189 --> 00:05:08,669
three letters in their name

00:05:06,300 --> 00:05:11,490
some people say Dirk it stands for I've

00:05:08,669 --> 00:05:15,599
been married and in those days we never

00:05:11,490 --> 00:05:17,069
had spring or or any kind of climb

00:05:15,599 --> 00:05:19,080
clever stuff we used to do a lot of big

00:05:17,069 --> 00:05:20,580
heavy mono lifts so the idea that I

00:05:19,080 --> 00:05:21,960
could come along and just say hey I'd

00:05:20,580 --> 00:05:22,889
like to create an app and just write an

00:05:21,960 --> 00:05:26,159
annotation the beginning was really

00:05:22,889 --> 00:05:27,449
revolution for me it's not completing

00:05:26,159 --> 00:05:29,069
because I guess it hasn't got a sly

00:05:27,449 --> 00:05:34,469
breeze and we live here we go master

00:05:29,069 --> 00:05:38,789
controller zoom it in okay yeah sorry I

00:05:34,469 --> 00:05:42,629
forget that you guys want us right yeah

00:05:38,789 --> 00:05:45,120
right so all of you have created a new

00:05:42,629 --> 00:05:47,009
class and I've added a simple annotation

00:05:45,120 --> 00:05:48,629
at the beginning and this is gonna be a

00:05:47,009 --> 00:05:50,039
little hint for spring boot when it's

00:05:48,629 --> 00:05:51,629
running might have to say this is a

00:05:50,039 --> 00:05:54,360
class which is going to expose de

00:05:51,629 --> 00:05:55,740
Mestral end points and I'm going to

00:05:54,360 --> 00:05:59,689
create the best method in the world

00:05:55,740 --> 00:06:02,339
something that just says hello world

00:05:59,689 --> 00:06:05,399
that's about the sort of level of my

00:06:02,339 --> 00:06:08,399
knowledge I can get to and I'm gonna say

00:06:05,399 --> 00:06:10,169
return hello and I'd like to execute

00:06:08,399 --> 00:06:13,770
this method every time someone hits my

00:06:10,169 --> 00:06:15,199
web app at a specific URL let's make a

00:06:13,770 --> 00:06:17,219
string

00:06:15,199 --> 00:06:22,830
we're just checking how many people were

00:06:17,219 --> 00:06:27,180
awake so against Bing boot mix is really

00:06:22,830 --> 00:06:32,699
easy for me I could just say map this to

00:06:27,180 --> 00:06:33,960
the path hello okay now in the old days

00:06:32,699 --> 00:06:35,370
we like to work with that big company

00:06:33,960 --> 00:06:37,469
this would have taken me a couple about

00:06:35,370 --> 00:06:40,060
half a day of configuring and kind of

00:06:37,469 --> 00:06:42,970
playing around of XML files and

00:06:40,060 --> 00:06:45,190
opening up the web web XML and putting

00:06:42,970 --> 00:06:48,310
Porton are things and stuff but now in

00:06:45,190 --> 00:06:56,350
theory I should just be able to hit run

00:06:48,310 --> 00:06:59,170
as spring boot app that's gonna run the

00:06:56,350 --> 00:07:03,820
last configuration I believe just this

00:06:59,170 --> 00:07:06,730
one and it's running the another

00:07:03,820 --> 00:07:12,130
application so you click on the demo -

00:07:06,730 --> 00:07:22,420
yeah yeah sorry let's close that don't

00:07:12,130 --> 00:07:24,040
want I guess spring boot application so

00:07:22,420 --> 00:07:27,010
for those who've never used spring boot

00:07:24,040 --> 00:07:28,570
before spring bootie has looked at the

00:07:27,010 --> 00:07:30,610
configuration of my application it's

00:07:28,570 --> 00:07:33,130
realized that it's got a spring web

00:07:30,610 --> 00:07:35,260
dependency so to automatically enable

00:07:33,130 --> 00:07:37,810
Tomcat for me as a container was run

00:07:35,260 --> 00:07:42,220
time for my application it started it up

00:07:37,810 --> 00:07:45,760
on a default port of 8080 if I now just

00:07:42,220 --> 00:07:46,900
went to localhost 8080 I don't think

00:07:45,760 --> 00:07:53,590
you've got enough windows open could you

00:07:46,900 --> 00:07:55,360
open in a few more David yeah I didn't

00:07:53,590 --> 00:07:59,320
map anything stood out specific URL what

00:07:55,360 --> 00:08:01,060
I did was I mapped it to hello they

00:07:59,320 --> 00:08:04,540
should say hello

00:08:01,060 --> 00:08:06,790
cool awesome thank you very much yeah

00:08:04,540 --> 00:08:07,510
I'm available all three days of summer

00:08:06,790 --> 00:08:10,000
yeah

00:08:07,510 --> 00:08:21,340
now let's get back to something more

00:08:10,000 --> 00:08:23,800
important which was there we go now the

00:08:21,340 --> 00:08:25,540
the labs that are in this URL are four

00:08:23,800 --> 00:08:27,640
more so far more sophisticated they walk

00:08:25,540 --> 00:08:29,710
through things like actuator they walk

00:08:27,640 --> 00:08:31,240
through changing to use jet instead of

00:08:29,710 --> 00:08:33,940
Tomcat they walk through putting your

00:08:31,240 --> 00:08:36,130
own air handlers putting metrics fairly

00:08:33,940 --> 00:08:37,330
comprehensive bunch of stuff if you

00:08:36,130 --> 00:08:39,730
don't think that's enough you could go

00:08:37,330 --> 00:08:41,770
to spring des io / guides as loads more

00:08:39,730 --> 00:08:44,650
guides and doing consuming data from

00:08:41,770 --> 00:08:45,850
Facebook Twitter etc really useful and

00:08:44,650 --> 00:08:50,220
these slide decks will be made available

00:08:45,850 --> 00:08:52,300
so you can grab the URL after that now

00:08:50,220 --> 00:08:53,740
we chose spring boot because we just

00:08:52,300 --> 00:08:56,110
think it makes life really easy

00:08:53,740 --> 00:08:58,209
it kind of made the the speed of

00:08:56,110 --> 00:08:59,950
building up a bit of an application is

00:08:58,209 --> 00:09:02,470
just really quicker it's really quick

00:08:59,950 --> 00:09:04,390
it's great for building microservices as

00:09:02,470 --> 00:09:06,279
you use swingby to build several other

00:09:04,390 --> 00:09:07,540
micro services you're gonna reach some

00:09:06,279 --> 00:09:08,620
of the problems that people have had

00:09:07,540 --> 00:09:10,690
when they gunned down is for you to wear

00:09:08,620 --> 00:09:11,950
hey now there's this loads of complexity

00:09:10,690 --> 00:09:13,480
where one micro service talks to another

00:09:11,950 --> 00:09:15,580
micro service to talk to another micro

00:09:13,480 --> 00:09:17,370
service I need some way of kind of

00:09:15,580 --> 00:09:21,070
mitigating if one micro service was down

00:09:17,370 --> 00:09:24,520
discovering other micro services I need

00:09:21,070 --> 00:09:26,380
patterns to help us can overcome some of

00:09:24,520 --> 00:09:29,410
these issues specifically storing

00:09:26,380 --> 00:09:31,270
configuration load balancing monitoring

00:09:29,410 --> 00:09:33,070
etc and so the purpose of today's talk

00:09:31,270 --> 00:09:34,690
greenie was if we were doing a hantum

00:09:33,070 --> 00:09:36,550
session which to get you guys to build

00:09:34,690 --> 00:09:37,779
some of this we're gonna just rush

00:09:36,550 --> 00:09:40,000
through and show you a pre-built

00:09:37,779 --> 00:09:43,050
application and give you some links to

00:09:40,000 --> 00:09:44,890
where you can find out more about this

00:09:43,050 --> 00:09:47,440
so what am I talking about

00:09:44,890 --> 00:09:50,410
consider this application made up of

00:09:47,440 --> 00:09:52,480
three micro services you've got a web

00:09:50,410 --> 00:09:54,820
front-end you've got some back to sort

00:09:52,480 --> 00:09:56,670
of backends in two different domains one

00:09:54,820 --> 00:09:59,079
for customer data one for stores data

00:09:56,670 --> 00:10:01,180
there's clearly some sort of

00:09:59,079 --> 00:10:02,350
dependencies they're loosely coupled to

00:10:01,180 --> 00:10:04,000
each other but they have it they need to

00:10:02,350 --> 00:10:05,550
know about each of our service to

00:10:04,000 --> 00:10:09,459
provide a functionality that they

00:10:05,550 --> 00:10:11,500
exhibit how does customers know where

00:10:09,459 --> 00:10:12,640
stores is running how does the web

00:10:11,500 --> 00:10:14,560
front-end know where customers and

00:10:12,640 --> 00:10:16,990
stores is running what happens if stores

00:10:14,560 --> 00:10:20,110
goes down does the whole application die

00:10:16,990 --> 00:10:23,800
that's not a good practice now if we can

00:10:20,110 --> 00:10:25,300
have some other supporting technology

00:10:23,800 --> 00:10:27,760
like some sort of service discovery

00:10:25,300 --> 00:10:29,800
component alongside this they could say

00:10:27,760 --> 00:10:31,000
hey every time a micro service comes up

00:10:29,800 --> 00:10:32,200
with register with me and I'll make a

00:10:31,000 --> 00:10:34,779
note of where you're running what you

00:10:32,200 --> 00:10:37,120
your URL is then other clients could

00:10:34,779 --> 00:10:38,350
then consume that at one time we could

00:10:37,120 --> 00:10:40,600
have a configuration server that

00:10:38,350 --> 00:10:42,760
separate to this that stores vital

00:10:40,600 --> 00:10:44,260
information needed at one time that it

00:10:42,760 --> 00:10:47,529
isn't hard-coded in the application

00:10:44,260 --> 00:10:49,060
makes life a lot simpler what we're

00:10:47,529 --> 00:10:51,279
going to talk about today is how some of

00:10:49,060 --> 00:10:53,709
these components which you know if you

00:10:51,279 --> 00:10:55,089
for the follow Netflix OSS and somebody

00:10:53,709 --> 00:10:56,740
design patterns you might you might be

00:10:55,089 --> 00:11:00,040
familiar of this how some of these

00:10:56,740 --> 00:11:02,529
technologies packed in to pivot ins

00:11:00,040 --> 00:11:04,360
implementation of Cloud Foundry so we

00:11:02,529 --> 00:11:06,220
have a component called spring cloud

00:11:04,360 --> 00:11:07,510
services suite which is an add-on for

00:11:06,220 --> 00:11:09,600
our enterprise version of

00:11:07,510 --> 00:11:11,860
boundary it gives you a lot of these

00:11:09,600 --> 00:11:12,910
features out-of-the-box and makes it

00:11:11,860 --> 00:11:15,940
really easy for you to build your

00:11:12,910 --> 00:11:19,420
applications using those capabilities

00:11:15,940 --> 00:11:21,040
and to show this we've got an

00:11:19,420 --> 00:11:22,840
application called spring grit trader

00:11:21,040 --> 00:11:25,390
written by my colleague David Pinto and

00:11:22,840 --> 00:11:27,310
he's gonna walk you through some of the

00:11:25,390 --> 00:11:28,810
architecture and show you some of the

00:11:27,310 --> 00:11:30,670
benefits and show you how he's

00:11:28,810 --> 00:11:40,030
implemented and may take an advantage of

00:11:30,670 --> 00:11:41,350
these features thank you so the good

00:11:40,030 --> 00:11:43,810
news is I'm not gonna write any code

00:11:41,350 --> 00:11:46,570
because I did that before and I'm just

00:11:43,810 --> 00:11:48,370
going to show you how easy or hard or

00:11:46,570 --> 00:11:51,220
difficult it is to implement some of

00:11:48,370 --> 00:11:56,440
these patterns that help you live in a

00:11:51,220 --> 00:11:58,870
cloud native world so the first one is

00:11:56,440 --> 00:12:01,930
configuration server or configuration

00:11:58,870 --> 00:12:03,790
management when you've got tens hundreds

00:12:01,930 --> 00:12:07,420
thousands of micro services you might

00:12:03,790 --> 00:12:09,490
want to share some properties for the

00:12:07,420 --> 00:12:11,260
instance running they're running in

00:12:09,490 --> 00:12:14,860
Cloud Foundry there could be multiple

00:12:11,260 --> 00:12:17,260
instances with different properties for

00:12:14,860 --> 00:12:19,600
different purposes so what is the best

00:12:17,260 --> 00:12:22,690
way or what is one way of dealing with

00:12:19,600 --> 00:12:24,370
configuration you want that those

00:12:22,690 --> 00:12:26,320
properties to be auditable so when

00:12:24,370 --> 00:12:27,910
someone changes that you know that that

00:12:26,320 --> 00:12:29,560
change was made and you want to

00:12:27,910 --> 00:12:32,980
propagate that change to all of your

00:12:29,560 --> 00:12:35,350
instances within public I'll founder

00:12:32,980 --> 00:12:38,550
we've got a ring cloud config server

00:12:35,350 --> 00:12:40,900
that connects to a git repository to

00:12:38,550 --> 00:12:43,570
grab all of the properties that you need

00:12:40,900 --> 00:12:44,920
for your applications and then each

00:12:43,570 --> 00:12:47,410
application goes to this configuration

00:12:44,920 --> 00:12:51,100
server to pick the properties that it

00:12:47,410 --> 00:12:56,290
needs to in order to run how do we set

00:12:51,100 --> 00:12:59,290
this up well it's really complicated if

00:12:56,290 --> 00:13:02,980
I find the right window there we go let

00:12:59,290 --> 00:13:05,860
me just pick one of my services like

00:13:02,980 --> 00:13:10,150
they use a service upland because it

00:13:05,860 --> 00:13:12,460
deals with users and I go to my build or

00:13:10,150 --> 00:13:18,820
Gradle file or my pom file and I just

00:13:12,460 --> 00:13:20,970
select one dependency which is there we

00:13:18,820 --> 00:13:20,970
go

00:13:23,230 --> 00:13:29,899
so by adding this dependency

00:13:25,940 --> 00:13:31,670
it tells spring boots to go and grab the

00:13:29,899 --> 00:13:35,769
properties from this configuration

00:13:31,670 --> 00:13:38,329
server by default we'll go to a specific

00:13:35,769 --> 00:13:40,100
local host and port number but if you're

00:13:38,329 --> 00:13:42,170
running path co-founder you will pick up

00:13:40,100 --> 00:13:44,870
where this service is running

00:13:42,170 --> 00:13:46,790
automatically for you so that's it no

00:13:44,870 --> 00:13:47,300
more to do to get the configuration

00:13:46,790 --> 00:13:51,130
management

00:13:47,300 --> 00:13:51,130
apart from setting your own properties

00:13:58,420 --> 00:14:03,230
next one is service discovery if you

00:14:00,920 --> 00:14:06,110
call tens hundreds thousands of micro

00:14:03,230 --> 00:14:08,660
services running in the cloud they can

00:14:06,110 --> 00:14:11,420
move about they can be in one place

00:14:08,660 --> 00:14:13,940
today and they can move to another place

00:14:11,420 --> 00:14:15,260
tomorrow how do you figure out whether

00:14:13,940 --> 00:14:18,740
they're running at runtime

00:14:15,260 --> 00:14:20,810
well one technique to do this and that's

00:14:18,740 --> 00:14:23,300
what Netflix uses is for each

00:14:20,810 --> 00:14:25,430
application to register itself and say

00:14:23,300 --> 00:14:27,680
this is my name and this is where I live

00:14:25,430 --> 00:14:31,130
so that other applications can go to

00:14:27,680 --> 00:14:32,529
this yellow pages and and ask for

00:14:31,130 --> 00:14:36,410
particular services it's like a

00:14:32,529 --> 00:14:41,390
directory again this is very difficult

00:14:36,410 --> 00:14:45,470
to implement in spring boots I'm sure

00:14:41,390 --> 00:14:48,500
I've got one open here soft show you how

00:14:45,470 --> 00:14:51,350
to build a spring boot application with

00:14:48,500 --> 00:14:54,019
this annotation to add the service

00:14:51,350 --> 00:14:56,959
discovery capability all you need is

00:14:54,019 --> 00:14:58,790
this other annotation this means that

00:14:56,959 --> 00:15:01,040
the application will register itself and

00:14:58,790 --> 00:15:03,339
gives you the capability to look for

00:15:01,040 --> 00:15:05,949
other services that you've got access to

00:15:03,339 --> 00:15:08,990
again no other configuration needed in

00:15:05,949 --> 00:15:11,810
pinnacle foundry where the service

00:15:08,990 --> 00:15:14,649
registry is living is plumbed into your

00:15:11,810 --> 00:15:14,649
application automatically

00:15:22,550 --> 00:15:27,540
the next one is if you're dependent on

00:15:25,019 --> 00:15:29,910
other micro services when you call them

00:15:27,540 --> 00:15:32,880
you don't want to fail if those micro

00:15:29,910 --> 00:15:35,579
services aren't there there is one rule

00:15:32,880 --> 00:15:38,850
in the cloud world which is think bad

00:15:35,579 --> 00:15:41,670
things do happen things fail hardware

00:15:38,850 --> 00:15:42,300
goes away memory goes away applications

00:15:41,670 --> 00:15:44,880
go away

00:15:42,300 --> 00:15:47,160
so how from your application can you

00:15:44,880 --> 00:15:49,850
ensure that you stay alive even though

00:15:47,160 --> 00:15:53,240
other applications they depend on fail

00:15:49,850 --> 00:15:55,860
the circuit breaker pattern is is how to

00:15:53,240 --> 00:16:00,589
sustain failure how to be tolerant to

00:15:55,860 --> 00:16:02,730
failures you've got a primary path where

00:16:00,589 --> 00:16:04,199
that's your dependent service that

00:16:02,730 --> 00:16:07,470
you're calling all the time if that

00:16:04,199 --> 00:16:10,139
dependent service goes down this circuit

00:16:07,470 --> 00:16:11,550
will open and will stop contacting that

00:16:10,139 --> 00:16:14,880
primary service and will go to a

00:16:11,550 --> 00:16:16,529
fallback service or a method or you can

00:16:14,880 --> 00:16:19,949
just deal with that problem right there

00:16:16,529 --> 00:16:21,959
and then over time the circuit will try

00:16:19,949 --> 00:16:24,630
to close again and go to that primary

00:16:21,959 --> 00:16:27,089
service and you will try it to see if

00:16:24,630 --> 00:16:28,769
it's come back to life and if it is you

00:16:27,089 --> 00:16:33,540
will open up the floodgates and will

00:16:28,769 --> 00:16:35,790
start contacting it again how do we do

00:16:33,540 --> 00:16:39,990
this in the code well it's extremely

00:16:35,790 --> 00:16:42,720
difficult as you can imagine all we need

00:16:39,990 --> 00:16:44,940
to do is annotate a method with

00:16:42,720 --> 00:16:48,060
hysterics commands and you give it a

00:16:44,940 --> 00:16:50,399
fallback method you can have as many

00:16:48,060 --> 00:16:53,190
fullback methods as you want and you can

00:16:50,399 --> 00:16:54,930
cascade down so you don't just have to

00:16:53,190 --> 00:16:56,940
have a primary in the secondary service

00:16:54,930 --> 00:17:00,709
you can have a third fourth and fifth

00:16:56,940 --> 00:17:00,709
service if you're that paranoid

00:17:03,840 --> 00:17:06,770
yeah

00:17:08,459 --> 00:17:13,170
mr. co-founder gives you visibility on

00:17:11,130 --> 00:17:15,120
what is happening with your circuit

00:17:13,170 --> 00:17:16,410
breakers you can have as many as you

00:17:15,120 --> 00:17:19,020
want in your application and they'll

00:17:16,410 --> 00:17:21,030
show up in a nice little dashboard say

00:17:19,020 --> 00:17:23,069
how many calls you're getting a second

00:17:21,030 --> 00:17:29,070
whether the circuit is open or closed

00:17:23,069 --> 00:17:34,800
and and what the the platform is doing

00:17:29,070 --> 00:17:37,260
for you so the next thing that is really

00:17:34,800 --> 00:17:39,360
important in clouds in micro-services

00:17:37,260 --> 00:17:44,000
world in the cognitive world is how to

00:17:39,360 --> 00:17:47,580
trace a request for a user request

00:17:44,000 --> 00:17:49,110
throughout your micro-services this is

00:17:47,580 --> 00:17:51,840
good to find out where the latency is

00:17:49,110 --> 00:17:54,240
within that call but also to figure out

00:17:51,840 --> 00:17:58,350
where the problem where the problem may

00:17:54,240 --> 00:18:00,440
exist spring cloud gives you this

00:17:58,350 --> 00:18:03,690
flexibility it gives you the stability

00:18:00,440 --> 00:18:05,070
with spring cloud sleuth and it injects

00:18:03,690 --> 00:18:07,620
traceability through all of those

00:18:05,070 --> 00:18:10,170
requests and it gives you an ID that

00:18:07,620 --> 00:18:15,300
follows that request across all of your

00:18:10,170 --> 00:18:21,600
micro services again as you can imagine

00:18:15,300 --> 00:18:24,600
this is super complicated to do and if I

00:18:21,600 --> 00:18:30,240
show you the build or Gradle again this

00:18:24,600 --> 00:18:33,660
is another dependency which is this one

00:18:30,240 --> 00:18:35,340
spring cloud sleuth and spring boots

00:18:33,660 --> 00:18:36,390
will take care of everything that he

00:18:35,340 --> 00:18:38,580
needs to do to give you that

00:18:36,390 --> 00:18:39,810
traceability across multiple

00:18:38,580 --> 00:18:42,000
applications that are developed by

00:18:39,810 --> 00:18:44,670
different teams and you get that

00:18:42,000 --> 00:18:45,929
traceability in a nice little UI which I

00:18:44,670 --> 00:18:48,900
don't have running a year to show you

00:18:45,929 --> 00:18:52,610
but you can trace your calls your user

00:18:48,900 --> 00:18:52,610
requests from application to application

00:18:53,420 --> 00:18:56,690
how we doing

00:19:03,190 --> 00:19:08,860
so Zipkin is the UI that shows you that

00:19:06,970 --> 00:19:10,720
traceability going from one micro

00:19:08,860 --> 00:19:13,020
service to the other of your user

00:19:10,720 --> 00:19:16,210
request gives you a nice little

00:19:13,020 --> 00:19:17,770
traceability how long that request is

00:19:16,210 --> 00:19:19,630
spending in each application as well

00:19:17,770 --> 00:19:22,240
which is very important when you're

00:19:19,630 --> 00:19:29,950
trying to performance test your your

00:19:22,240 --> 00:19:30,910
overall system so to summarize what have

00:19:29,950 --> 00:19:32,920
we shown you over here

00:19:30,910 --> 00:19:34,720
well hey you need a platform to run your

00:19:32,920 --> 00:19:39,850
micro services and to link them all

00:19:34,720 --> 00:19:41,970
together you need a framework that

00:19:39,850 --> 00:19:45,310
allows you the velocity of development

00:19:41,970 --> 00:19:46,870
to spin up these micro services test

00:19:45,310 --> 00:19:49,630
them give them to your users and get the

00:19:46,870 --> 00:19:52,360
feedback sprint cloud gives you the

00:19:49,630 --> 00:19:54,790
framework to fix some of the challenges

00:19:52,360 --> 00:19:56,110
you see in the cloud world whether

00:19:54,790 --> 00:19:58,030
that's configuration management or

00:19:56,110 --> 00:20:00,420
service discovery and then you need

00:19:58,030 --> 00:20:03,490
peripheral foundry to run all of these

00:20:00,420 --> 00:20:04,930
applications micro services for you and

00:20:03,490 --> 00:20:05,800
you will benefit from the day to

00:20:04,930 --> 00:20:11,440
operations

00:20:05,800 --> 00:20:18,520
itself feeling and so on it isn't github

00:20:11,440 --> 00:20:20,050
and there was a link over there these

00:20:18,520 --> 00:20:21,640
slides will be made available so you can

00:20:20,050 --> 00:20:28,480
just click on the link and it will take

00:20:21,640 --> 00:20:30,640
you to this page where you can find out

00:20:28,480 --> 00:20:32,830
more about the micro the spring boot

00:20:30,640 --> 00:20:35,620
trader application which is a set of

00:20:32,830 --> 00:20:38,770
four micro services very soon you will

00:20:35,620 --> 00:20:41,100
be five and it uses all of these cloud

00:20:38,770 --> 00:20:45,430
capabilities to register themselves

00:20:41,100 --> 00:20:47,740
discover themselves all the

00:20:45,430 --> 00:20:49,840
configuration is shared amongst all of

00:20:47,740 --> 00:20:54,990
the micro services so they all have the

00:20:49,840 --> 00:20:54,990
same properties okay

00:21:04,280 --> 00:21:09,210
we are how's your obligatory mentioned

00:21:07,350 --> 00:21:11,100
dimensions and we are hiring a pivotal

00:21:09,210 --> 00:21:13,650
when it was interested in working at

00:21:11,100 --> 00:21:15,090
natus there's a guy in our physical

00:21:13,650 --> 00:21:32,760
heavy kang will be very pleased to see

00:21:15,090 --> 00:21:38,760
this slide any questions yes don't worry

00:21:32,760 --> 00:21:43,290
it's fine yes that's a good question how

00:21:38,760 --> 00:21:45,570
do you protect your sensitive data in

00:21:43,290 --> 00:21:46,710
the get repository and there's a couple

00:21:45,570 --> 00:21:48,360
of different levels that you can go to

00:21:46,710 --> 00:21:51,030
one is protect your get repository

00:21:48,360 --> 00:21:53,670
itself so it's not public especially in

00:21:51,030 --> 00:21:56,430
github comm the other one is you can

00:21:53,670 --> 00:21:58,140
encrypt properties so when you put into

00:21:56,430 --> 00:22:00,540
your git repository that password is

00:21:58,140 --> 00:22:03,870
already encrypted and only the conflict

00:22:00,540 --> 00:22:09,230
server will be able to decrypt it does

00:22:03,870 --> 00:22:09,230
that answer your question changes to

00:22:10,670 --> 00:22:16,680
make the changes it's absolutely fine

00:22:14,060 --> 00:22:18,660
you can make the changes in the in your

00:22:16,680 --> 00:22:23,210
github repository and you can tell your

00:22:18,660 --> 00:22:23,210
applications to refresh their properties

00:22:27,340 --> 00:22:31,960
you can so the question is do you need

00:22:30,260 --> 00:22:34,520
to have different repositories for

00:22:31,960 --> 00:22:37,340
production development testing the

00:22:34,520 --> 00:22:42,170
different environments there's different

00:22:37,340 --> 00:22:43,550
ways of dealing with that git provides

00:22:42,170 --> 00:22:47,780
you with a lot of capabilities in terms

00:22:43,550 --> 00:22:50,240
of branches different commits different

00:22:47,780 --> 00:22:52,220
so on and you can make use of that from

00:22:50,240 --> 00:22:53,570
the configuration server so you can

00:22:52,220 --> 00:22:55,490
point your configuration server to the

00:22:53,570 --> 00:22:57,320
production branch or to the development

00:22:55,490 --> 00:23:00,110
branch you can also use different

00:22:57,320 --> 00:23:02,000
repositories if you if you want it's

00:23:00,110 --> 00:23:03,980
really down to the structure of your

00:23:02,000 --> 00:23:06,250
organization on the best way to deal

00:23:03,980 --> 00:23:06,250
with that

00:23:14,550 --> 00:23:21,780
so the question is if if you want to use

00:23:18,460 --> 00:23:24,490
other registry services like console is

00:23:21,780 --> 00:23:28,360
there a way to do that

00:23:24,490 --> 00:23:30,490
spring clouds gives you that capability

00:23:28,360 --> 00:23:32,520
but you need to deploy your own console

00:23:30,490 --> 00:23:35,290
cluster in order to provide that

00:23:32,520 --> 00:23:37,600
infrastructure as part of PepsiCo

00:23:35,290 --> 00:23:43,530
foundry currently we're using Eureka as

00:23:37,600 --> 00:23:43,530
the service implementation

00:23:53,039 --> 00:24:03,460
the questions are getting trickier by

00:23:55,240 --> 00:24:06,279
that I do have an answer for that so the

00:24:03,460 --> 00:24:08,769
question is it's great using spring to

00:24:06,279 --> 00:24:10,779
use all of these patterns what about if

00:24:08,769 --> 00:24:16,629
you're using other languages like go or

00:24:10,779 --> 00:24:19,779
Python or these funky languages there

00:24:16,629 --> 00:24:22,779
are libraries for these languages to

00:24:19,779 --> 00:24:25,090
work with the spring cloud patterns they

00:24:22,779 --> 00:24:29,409
are emerging so there's already one for

00:24:25,090 --> 00:24:32,200
go one for Python I believe and there'll

00:24:29,409 --> 00:24:33,940
be more coming along the lines I'm sure

00:24:32,200 --> 00:24:36,309
that dotnet if you're that way inclined

00:24:33,940 --> 00:24:39,490
they've got a project called steel-toe

00:24:36,309 --> 00:24:40,929
which is to kind of capture the spring

00:24:39,490 --> 00:24:58,360
boot in spring cloud functionality

00:24:40,929 --> 00:25:00,340
within the dotnet environments so that

00:24:58,360 --> 00:25:02,619
the question is the sleuth that

00:25:00,340 --> 00:25:04,179
traceability capability have any

00:25:02,619 --> 00:25:10,690
performance impact on their running

00:25:04,179 --> 00:25:12,519
application oh that's the tricky one it

00:25:10,690 --> 00:25:14,080
will have some impact obviously by its

00:25:12,519 --> 00:25:18,519
minimal minimal because it's done

00:25:14,080 --> 00:25:21,309
asynchronously on the calls most of it

00:25:18,519 --> 00:25:23,799
is an async really on the calls if

00:25:21,309 --> 00:25:27,610
you're just logging that the correlation

00:25:23,799 --> 00:25:30,100
ID to the logs the the performance

00:25:27,610 --> 00:25:34,210
penalty is minimal if you're actually

00:25:30,100 --> 00:25:36,639
streaming those calls for the for the

00:25:34,210 --> 00:25:38,590
traces into Zipkin for example that's

00:25:36,639 --> 00:25:41,289
done asynchronously either through a bus

00:25:38,590 --> 00:25:44,200
or through HTTP requests so it shouldn't

00:25:41,289 --> 00:25:51,580
have much of an impact on the latency of

00:25:44,200 --> 00:25:52,899
the application thank you very much we

00:25:51,580 --> 00:25:54,519
are going to be at a pivotal booth if

00:25:52,899 --> 00:25:56,919
you've got any more questions I think

00:25:54,519 --> 00:25:58,779
we're there for him half won today

00:25:56,919 --> 00:26:00,129
but if we don't find us two other

00:25:58,779 --> 00:26:02,040
pivotal colleagues around who can answer

00:26:00,129 --> 00:26:05,549
your questions thank you

00:26:02,040 --> 00:26:05,549

YouTube URL: https://www.youtube.com/watch?v=xja3Gf-T-bk


