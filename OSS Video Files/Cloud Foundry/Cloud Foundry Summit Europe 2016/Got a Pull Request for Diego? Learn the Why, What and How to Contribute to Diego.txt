Title: Got a Pull Request for Diego? Learn the Why, What and How to Contribute to Diego
Publication date: 2016-09-30
Playlist: Cloud Foundry Summit Europe 2016
Description: 
	Got a Pull Request for Diego? Learn the Why, What and How to Contribute to Diego - Jen Spinney, HPE & Luan Santos, Pivotal

So you’ve found a bug in Diego, and you’re excited to make a contribution to the project. Great! Now how do you get your fix accepted into the Diego codebase? 

This talk will walk through the process of implementing a small change, writing and running the tests, and following the Diego team’s best practices for Golang development. It will cover common reasons for pull requests to be rejected and peel back the curtains on how the Diego team handles code contributions from developers outside the core team. 

We will use the Diego project as a concrete example, but many of the steps discussed will apply to the other Cloud Foundry projects as well.

About Luan Santos
Luan Santos is a Pivotal developer and core contributor to the Cloud Foundry platform. He is a member of the Diego team, located in San Francisco, CA. He also spoke at the CF Summit 2015 in Santa Clara, CA about the Cloud Foundry API.

About Jen Spinney
Jen Spinney is a software engineer at HP Enterprise, where she works as a core contributor on the CF Diego team. Prior to HPE, she worked at Microsoft on the OData team where she developed a passion for open source and cross-company software development. She pairs remotely from the HPE office in Seattle, WA.
Captions: 
	00:00:01,530 --> 00:00:06,240
so the with this talk we hope that you

00:00:04,560 --> 00:00:09,630
can get a good understanding of how the

00:00:06,240 --> 00:00:12,750
contribution workflow works on the Diego

00:00:09,630 --> 00:00:16,560
team and as well as other cloud foundry

00:00:12,750 --> 00:00:19,199
projects and how does the engineering

00:00:16,560 --> 00:00:21,570
team engage with the community to deal

00:00:19,199 --> 00:00:24,269
with issues and take pro requests and

00:00:21,570 --> 00:00:27,420
that kind of thing we also hope that you

00:00:24,269 --> 00:00:29,279
get encouraged to get involved and start

00:00:27,420 --> 00:00:31,199
contributing to either Digg or any other

00:00:29,279 --> 00:00:34,050
co-founder project if you are not doing

00:00:31,199 --> 00:00:35,880
that already and we'll do that by giving

00:00:34,050 --> 00:00:39,270
you a general overview of how that

00:00:35,880 --> 00:00:41,969
process works with some background and

00:00:39,270 --> 00:00:45,270
we'll show a walkthrough of how a simple

00:00:41,969 --> 00:00:48,390
contribution makes its way through an

00:00:45,270 --> 00:00:50,930
issue than becoming a pro request and

00:00:48,390 --> 00:00:54,149
then finally getting merged into Diego

00:00:50,930 --> 00:00:59,489
and lastly we'll give you just some

00:00:54,149 --> 00:01:01,340
quick tips about how to go about sending

00:00:59,489 --> 00:01:03,629
us a contribution then getting that

00:01:01,340 --> 00:01:07,080
accepted and preventing it from getting

00:01:03,629 --> 00:01:09,210
protected basically so some background

00:01:07,080 --> 00:01:12,060
for a quest if you're not familiar is a

00:01:09,210 --> 00:01:15,330
term on github that signifies a request

00:01:12,060 --> 00:01:17,280
your merge a merge changes onto a

00:01:15,330 --> 00:01:19,140
project so that's a great way to

00:01:17,280 --> 00:01:22,520
collaborate because it allows you it's

00:01:19,140 --> 00:01:25,070
basically a conversation started it has

00:01:22,520 --> 00:01:28,320
you can comment and have multiple people

00:01:25,070 --> 00:01:32,579
basically reviewed the same change set

00:01:28,320 --> 00:01:36,420
together and Diego is first and foremost

00:01:32,579 --> 00:01:38,990
a a team on cloud foundry that's part of

00:01:36,420 --> 00:01:41,220
the bigger cloud foundry project and

00:01:38,990 --> 00:01:44,430
it's a team that maintains the Diego

00:01:41,220 --> 00:01:45,149
project which is the container scheduler

00:01:44,430 --> 00:01:46,560
and works traitor

00:01:45,149 --> 00:01:48,210
within cloud foundry the full

00:01:46,560 --> 00:01:52,020
description of Diego is kind of outside

00:01:48,210 --> 00:01:54,149
the scope of this talk but the team is

00:01:52,020 --> 00:01:56,790
composed of four and a half bears like

00:01:54,149 --> 00:01:59,399
we like to to say which means that nine

00:01:56,790 --> 00:02:03,329
engineers and then one product managers

00:01:59,399 --> 00:02:05,040
one product metric and these engineers

00:02:03,329 --> 00:02:07,439
are from a variety of companies so like

00:02:05,040 --> 00:02:10,950
I said I'm from pivotal gen here is from

00:02:07,439 --> 00:02:12,769
HPE we have a few engineers from IBM on

00:02:10,950 --> 00:02:15,769
a team and we've had

00:02:12,769 --> 00:02:18,890
folks from sa PG and other companies

00:02:15,769 --> 00:02:21,980
before on a team as well so it's a very

00:02:18,890 --> 00:02:24,799
diverse in that way those developers

00:02:21,980 --> 00:02:29,120
work full-time on the project and are

00:02:24,799 --> 00:02:31,159
responsible for not only putting the

00:02:29,120 --> 00:02:33,950
project forward and developing the

00:02:31,159 --> 00:02:35,620
features that project has to work on but

00:02:33,950 --> 00:02:39,260
also engaging with the community and

00:02:35,620 --> 00:02:41,000
dealing with issues and PRS the team

00:02:39,260 --> 00:02:42,530
rotates fairly frequently like I said I

00:02:41,000 --> 00:02:45,230
was on the daga team I'm no longer on

00:02:42,530 --> 00:02:48,849
the team so we rotate within Cloud

00:02:45,230 --> 00:02:51,439
Foundry every every few months and

00:02:48,849 --> 00:02:56,989
sometimes a little longer than that but

00:02:51,439 --> 00:03:00,049
yeah so to get involved and should get

00:02:56,989 --> 00:03:01,939
in contact with the team we have a few

00:03:00,049 --> 00:03:03,439
things you can do you can open a github

00:03:01,939 --> 00:03:05,930
issue if you already have a bug report

00:03:03,439 --> 00:03:08,629
and you know the steps to reproduce it

00:03:05,930 --> 00:03:11,599
or you just have some suggestion that is

00:03:08,629 --> 00:03:13,159
a little more consolidated then you you

00:03:11,599 --> 00:03:16,699
just want to propose that just a

00:03:13,159 --> 00:03:19,250
specific project of Diego or Cloud

00:03:16,699 --> 00:03:20,989
Foundry or if you just want to have a

00:03:19,250 --> 00:03:24,409
conversation or you have a question

00:03:20,989 --> 00:03:26,449
about how to knock to get started you

00:03:24,409 --> 00:03:30,139
can join us on our slack channel on the

00:03:26,449 --> 00:03:33,500
cloud foundry does like com each day we

00:03:30,139 --> 00:03:35,750
have a designed interrupt pair what that

00:03:33,500 --> 00:03:38,659
means is in the morning we'll assign one

00:03:35,750 --> 00:03:40,849
of the pair's to be responsible for

00:03:38,659 --> 00:03:43,220
looking in slack so on the top of our

00:03:40,849 --> 00:03:46,790
slack channel on the subject line there

00:03:43,220 --> 00:03:50,090
will be a couple of names listed those

00:03:46,790 --> 00:03:51,680
are the people responsible for answering

00:03:50,090 --> 00:03:54,949
to the community on slack so you can

00:03:51,680 --> 00:03:58,489
come by and and ask any question you

00:03:54,949 --> 00:04:00,859
might have and lastly if you have some

00:03:58,489 --> 00:04:02,659
longer conversation that needs more eyes

00:04:00,859 --> 00:04:05,930
maybe it's not with the only one team

00:04:02,659 --> 00:04:07,310
one larger larger Cloud Foundry

00:04:05,930 --> 00:04:09,949
discussion you can use this you have

00:04:07,310 --> 00:04:12,799
that mailing list as well to get started

00:04:09,949 --> 00:04:15,530
with that communication so let's get to

00:04:12,799 --> 00:04:18,590
it the walkthrough so Jan will play a

00:04:15,530 --> 00:04:20,000
developer that's not on the on the core

00:04:18,590 --> 00:04:23,080
team of Diego so she does not have

00:04:20,000 --> 00:04:25,550
commit rights and she noticed an

00:04:23,080 --> 00:04:26,300
opportunity to improve one of the code

00:04:25,550 --> 00:04:28,639
bases

00:04:26,300 --> 00:04:31,430
and she wants to contribute with that

00:04:28,639 --> 00:04:33,319
change and I will play a developer on

00:04:31,430 --> 00:04:35,569
the core team that will assist her with

00:04:33,319 --> 00:04:36,919
that contribution and I will be

00:04:35,569 --> 00:04:38,930
responsible for community for a day so

00:04:36,919 --> 00:04:42,409
the same way we have an interrupt fair

00:04:38,930 --> 00:04:45,710
we also assign one pair to deal with

00:04:42,409 --> 00:04:47,990
community and what that means is we will

00:04:45,710 --> 00:04:52,039
look at issues and pour quests and

00:04:47,990 --> 00:04:53,780
interactions from the community for the

00:04:52,039 --> 00:04:55,759
beginning of the day to just be

00:04:53,780 --> 00:04:58,550
responsive to the community and make

00:04:55,759 --> 00:05:03,139
sure that those contributions are making

00:04:58,550 --> 00:05:05,210
their way through efficiently so like

00:05:03,139 --> 00:05:07,159
like LaJuan said I'm a outside

00:05:05,210 --> 00:05:08,659
contributor I'm poking around a little

00:05:07,159 --> 00:05:10,940
bit Diego I'm trying to understand the

00:05:08,659 --> 00:05:13,310
code a little bit better I'm taking a

00:05:10,940 --> 00:05:15,080
look at in this case the executors code

00:05:13,310 --> 00:05:16,669
base we have lots of separate code bases

00:05:15,080 --> 00:05:18,800
inside Diego and we'll talk about that

00:05:16,669 --> 00:05:20,270
in a little bit but I'm poking around

00:05:18,800 --> 00:05:21,860
I'm taking a look trying to get a little

00:05:20,270 --> 00:05:25,099
bit involved and I notice there's one

00:05:21,860 --> 00:05:27,169
opportunity for a bit of a refactor and

00:05:25,099 --> 00:05:28,969
so before I want to dive in and actually

00:05:27,169 --> 00:05:30,680
start working on it and submit the pull

00:05:28,969 --> 00:05:32,509
requests and stuff I want to first just

00:05:30,680 --> 00:05:33,919
verify with the team that they agree

00:05:32,509 --> 00:05:36,889
that this is an appropriate refactor

00:05:33,919 --> 00:05:38,210
this can save you a lot of time because

00:05:36,889 --> 00:05:40,099
if you go through and run all the tests

00:05:38,210 --> 00:05:41,840
do all the work to make the PR and then

00:05:40,099 --> 00:05:43,490
submit the PR and then later it turns

00:05:41,840 --> 00:05:45,289
out like the Diego team doesn't really

00:05:43,490 --> 00:05:47,360
agree with the direction or it conflicts

00:05:45,289 --> 00:05:49,610
with other work in progress or something

00:05:47,360 --> 00:05:51,770
that's a lot of wasted effort on your

00:05:49,610 --> 00:05:54,409
part and it's just a lot of frustration

00:05:51,770 --> 00:05:56,090
for everyone involved so in this case I

00:05:54,409 --> 00:05:58,069
take a look I notice an opportunity for

00:05:56,090 --> 00:06:00,590
improvement I created an issue and I say

00:05:58,069 --> 00:06:05,960
like hey I noticed this is it okay if I

00:06:00,590 --> 00:06:09,409
actually go ahead and fix it alright so

00:06:05,960 --> 00:06:12,020
Jen then sends the issue and I as the

00:06:09,409 --> 00:06:13,819
pair responsible for that community

00:06:12,020 --> 00:06:16,639
interaction on that day will notice that

00:06:13,819 --> 00:06:19,150
a story will get created so we have we

00:06:16,639 --> 00:06:22,090
have a thing called git bot that will

00:06:19,150 --> 00:06:24,740
look at our github repos and create

00:06:22,090 --> 00:06:27,680
stories on our pivotal tracker so that

00:06:24,740 --> 00:06:29,750
we have more visibility into the state

00:06:27,680 --> 00:06:31,159
of that and what's going on there so

00:06:29,750 --> 00:06:33,139
sorry we'll get trade in the community

00:06:31,159 --> 00:06:37,339
backlog and then we'll all look at it

00:06:33,139 --> 00:06:39,560
and and respond as quickly as possible

00:06:37,339 --> 00:06:40,040
so in this case I'm just telling Jan

00:06:39,560 --> 00:06:43,640
that

00:06:40,040 --> 00:06:45,800
I I agree with the change in I'm just

00:06:43,640 --> 00:06:50,030
giving her the thumbs up to go ahead and

00:06:45,800 --> 00:06:52,670
do it so just a quick note about how our

00:06:50,030 --> 00:06:54,620
repos are structured in Diego we have

00:06:52,670 --> 00:06:56,540
one repo called Diego release this is

00:06:54,620 --> 00:06:58,940
kind of the parent repository of all of

00:06:56,540 --> 00:07:01,340
our other micro services this serves as

00:06:58,940 --> 00:07:03,560
our Bosh release it's also a go path

00:07:01,340 --> 00:07:06,740
it's or the parent of all of our other

00:07:03,560 --> 00:07:08,870
micro services each one of our other sub

00:07:06,740 --> 00:07:11,960
components is all a sub module inside of

00:07:08,870 --> 00:07:13,460
the Diego release repo so all of our go

00:07:11,960 --> 00:07:15,500
code is generally in one of these sub

00:07:13,460 --> 00:07:16,880
modules so most of the time you're not

00:07:15,500 --> 00:07:18,770
going to be submitting submitting pull

00:07:16,880 --> 00:07:20,180
requests to Diego release directly

00:07:18,770 --> 00:07:22,550
you're going to be submitting a pull

00:07:20,180 --> 00:07:24,620
request to one of these sub modules and

00:07:22,550 --> 00:07:26,240
then later once the pull request gets

00:07:24,620 --> 00:07:28,340
accepted someone from the Diego team

00:07:26,240 --> 00:07:30,440
will go ahead and make a commit to Diego

00:07:28,340 --> 00:07:33,920
release to bump the sub module meaning

00:07:30,440 --> 00:07:36,710
update the SHA of that sub module to

00:07:33,920 --> 00:07:37,970
match what you just submitted so in

00:07:36,710 --> 00:07:40,250
general you're not going to be needing

00:07:37,970 --> 00:07:41,780
to make PRS to Diego release unless

00:07:40,250 --> 00:07:43,700
you're doing something related to the

00:07:41,780 --> 00:07:45,050
Bosh release itself so that means if

00:07:43,700 --> 00:07:46,790
you're changing the way the manifests

00:07:45,050 --> 00:07:48,230
are generated or the way the jobs are

00:07:46,790 --> 00:07:50,270
deployed then there's gonna be stuff in

00:07:48,230 --> 00:07:52,040
da release but if you're changing go

00:07:50,270 --> 00:07:56,690
code that's not going to be in Diego

00:07:52,040 --> 00:07:59,900
release itself so we're gonna be playing

00:07:56,690 --> 00:08:00,920
some videos as these go but the details

00:07:59,900 --> 00:08:02,180
of what we're running here like you

00:08:00,920 --> 00:08:06,110
don't have to jot down exactly what's

00:08:02,180 --> 00:08:08,000
being run here all the instructions here

00:08:06,110 --> 00:08:11,030
are in this document right here this is

00:08:08,000 --> 00:08:12,530
the contribution document where we list

00:08:11,030 --> 00:08:13,970
out the exact steps you need to do to

00:08:12,530 --> 00:08:15,770
set up your environment stuff like that

00:08:13,970 --> 00:08:17,330
so what we're gonna do now is I'm just

00:08:15,770 --> 00:08:19,160
gonna set up my environment I got the

00:08:17,330 --> 00:08:21,260
okay from luan to go ahead and make this

00:08:19,160 --> 00:08:23,120
fix but I have a brand new MacBook I've

00:08:21,260 --> 00:08:25,460
never worked on Diego before I need to

00:08:23,120 --> 00:08:27,200
actually go and set up Bosch light and

00:08:25,460 --> 00:08:29,720
configure my environment so I can work

00:08:27,200 --> 00:08:32,060
on Diego so the very first thing we're

00:08:29,720 --> 00:08:33,650
gonna do is setup Bosch light some of

00:08:32,060 --> 00:08:35,240
you might be familiar with Bosch it's

00:08:33,650 --> 00:08:37,310
like the orchestration tool that we use

00:08:35,240 --> 00:08:38,990
in Cloud Foundry Bosch lets us deployed

00:08:37,310 --> 00:08:42,560
in multiple different guises so you can

00:08:38,990 --> 00:08:44,510
deploy to AWS and Google cloud and all

00:08:42,560 --> 00:08:46,880
these things you can also deploy to a

00:08:44,510 --> 00:08:48,380
local VM called Bosch light and that's

00:08:46,880 --> 00:08:50,510
what we do for all of our testing so we

00:08:48,380 --> 00:08:52,790
have a real live cloud foundry and a

00:08:50,510 --> 00:08:55,400
real Diego it's just running

00:08:52,790 --> 00:08:57,860
within individual containers in a VM on

00:08:55,400 --> 00:09:00,350
your local machine so we use this for

00:08:57,860 --> 00:09:03,200
running our basic acceptance test and

00:09:00,350 --> 00:09:04,520
stuff like that so here I'm just

00:09:03,200 --> 00:09:06,410
we're just cloning the Bosch light

00:09:04,520 --> 00:09:10,640
repository and running vagrant up to get

00:09:06,410 --> 00:09:12,470
our local Bosch light up and running um

00:09:10,640 --> 00:09:15,170
next thing we do is we need to actually

00:09:12,470 --> 00:09:18,020
pull down CF release so Diego release

00:09:15,170 --> 00:09:19,730
depends on Cloud Foundry CF release is a

00:09:18,020 --> 00:09:21,560
repo that's pretty similar to Diego

00:09:19,730 --> 00:09:23,840
release and that it's made up of lots of

00:09:21,560 --> 00:09:25,340
sub modules so CF release has even more

00:09:23,840 --> 00:09:27,350
sub modules than we do so there's a lot

00:09:25,340 --> 00:09:30,980
to bring down so when you bring it down

00:09:27,350 --> 00:09:32,630
there's gonna be like a script in there

00:09:30,980 --> 00:09:35,150
called scripts update you can run this

00:09:32,630 --> 00:09:36,440
basically just as a git pull and updates

00:09:35,150 --> 00:09:39,290
all the sub modules and initially

00:09:36,440 --> 00:09:42,350
initializes all the sub modules once you

00:09:39,290 --> 00:09:44,030
actually have the CF code then we're

00:09:42,350 --> 00:09:46,400
gonna actually do a Bosch create release

00:09:44,030 --> 00:09:49,430
and a Bosch upload release to get that

00:09:46,400 --> 00:09:54,500
code all set up on the Bosch lightbox

00:09:49,430 --> 00:09:56,930
itself so you can see here we've sped up

00:09:54,500 --> 00:10:00,050
a bit the process this actually doesn't

00:09:56,930 --> 00:10:01,010
take quite so fast you'll you'll find

00:10:00,050 --> 00:10:05,120
that out when you try to do it yourself

00:10:01,010 --> 00:10:07,130
but it should be pretty simple to do it

00:10:05,120 --> 00:10:10,760
just can take a little bit I'm just

00:10:07,130 --> 00:10:12,740
going to skip the rest of it for now so

00:10:10,760 --> 00:10:15,500
the next step is to actually get Diego

00:10:12,740 --> 00:10:16,910
release so like I said Diego depends on

00:10:15,500 --> 00:10:19,400
CF being there as well but we also

00:10:16,910 --> 00:10:20,780
obviously need the Diego release code as

00:10:19,400 --> 00:10:22,190
well so now we're going to pull down

00:10:20,780 --> 00:10:24,020
Diego release we're gonna do the same

00:10:22,190 --> 00:10:26,300
thing where we're gonna clone it and

00:10:24,020 --> 00:10:28,220
pull down all the sub modules do a bosch

00:10:26,300 --> 00:10:31,040
create release and a Bosch upload

00:10:28,220 --> 00:10:32,330
release again all these instructions are

00:10:31,040 --> 00:10:38,750
laid out in the contributing

00:10:32,330 --> 00:10:40,280
documentation next step is to actually

00:10:38,750 --> 00:10:42,710
deploy the releases that we just

00:10:40,280 --> 00:10:44,750
uploaded to Bosch light so what we've

00:10:42,710 --> 00:10:46,940
just done is we have now some tarballs

00:10:44,750 --> 00:10:48,740
that contain the source code for CF

00:10:46,940 --> 00:10:49,910
release and the source code for Diego

00:10:48,740 --> 00:10:51,680
release but nothing's actually been

00:10:49,910 --> 00:10:53,480
deployed to our Bosch light yet they're

00:10:51,680 --> 00:10:56,390
just tar balls that are sitting waiting

00:10:53,480 --> 00:10:58,250
for us to use them on our Bosch light so

00:10:56,390 --> 00:11:00,560
now we're going to generate the manifest

00:10:58,250 --> 00:11:02,300
and that's the deployment manifest for

00:11:00,560 --> 00:11:04,190
CF release that's the thing that

00:11:02,300 --> 00:11:05,480
describes how this Cloud Foundry is

00:11:04,190 --> 00:11:06,470
supposed to be configured and what

00:11:05,480 --> 00:11:08,870
properties it has

00:11:06,470 --> 00:11:11,900
what VM sizes it needs and stuff like

00:11:08,870 --> 00:11:15,080
that and the CF release repo and the

00:11:11,900 --> 00:11:17,990
Diego release repo both have scripts you

00:11:15,080 --> 00:11:19,520
can use to generate a Bosch manifests

00:11:17,990 --> 00:11:20,990
it's specific for Bosch light so you

00:11:19,520 --> 00:11:23,480
don't need to tweak anything yourself

00:11:20,990 --> 00:11:25,160
it's already configured to be sized

00:11:23,480 --> 00:11:26,960
correctly and have the right properties

00:11:25,160 --> 00:11:29,270
for Bosch light so we run the scripts

00:11:26,960 --> 00:11:31,580
generate Bosch light death manifest and

00:11:29,270 --> 00:11:33,770
then we actually do a Bosch deploy and

00:11:31,580 --> 00:11:35,390
we get CF running on our Bosch light and

00:11:33,770 --> 00:11:39,080
then we're going to do the same thing

00:11:35,390 --> 00:11:41,990
with Diego Diego actually requires not

00:11:39,080 --> 00:11:45,080
only CF release and Diego release but it

00:11:41,990 --> 00:11:46,940
also requires either guard and Linux

00:11:45,080 --> 00:11:48,820
release or garden run C those are the

00:11:46,940 --> 00:11:52,840
two options that we have right now for

00:11:48,820 --> 00:11:56,390
running for the actual container runtime

00:11:52,840 --> 00:11:58,520
and there's a root of s release and

00:11:56,390 --> 00:11:59,360
either at CD release or sequel release

00:11:58,520 --> 00:12:00,650
there are a bunch of different

00:11:59,360 --> 00:12:03,020
components that all come together when

00:12:00,650 --> 00:12:04,640
you deploy Diego and in one of the

00:12:03,020 --> 00:12:08,360
previous steps we also had to download

00:12:04,640 --> 00:12:13,490
and those tarballs and then put those on

00:12:08,360 --> 00:12:15,680
to our Bosch light as well okay so our

00:12:13,490 --> 00:12:17,390
Bosch light is all up and running we can

00:12:15,680 --> 00:12:18,950
also verify that we don't we didn't do

00:12:17,390 --> 00:12:20,450
it in this case but we could verify that

00:12:18,950 --> 00:12:22,970
the Bosch light is working correctly by

00:12:20,450 --> 00:12:24,740
just doing a simple CF push and making

00:12:22,970 --> 00:12:27,530
sure that it's actually using Diego and

00:12:24,740 --> 00:12:30,050
just do some basic verification we also

00:12:27,530 --> 00:12:31,280
have a big suite of unit tests so what

00:12:30,050 --> 00:12:33,080
we're doing right now is we're just

00:12:31,280 --> 00:12:34,310
before I even start coding I want to

00:12:33,080 --> 00:12:35,800
make sure that my environment is clean

00:12:34,310 --> 00:12:38,090
and that everything is working right so

00:12:35,800 --> 00:12:40,040
I'm running our unit tests right now our

00:12:38,090 --> 00:12:41,900
unit tests run directly on your host

00:12:40,040 --> 00:12:43,820
machine on your development machine so

00:12:41,900 --> 00:12:45,140
in this case it's a Mac and so it's

00:12:43,820 --> 00:12:47,240
actually running directly on my Mac

00:12:45,140 --> 00:12:49,880
usually the unit tests are pretty well

00:12:47,240 --> 00:12:57,080
isolated and they're they run pretty

00:12:49,880 --> 00:13:00,980
quickly we also have another test test

00:12:57,080 --> 00:13:04,160
suite called an ego an ego runs a bit

00:13:00,980 --> 00:13:07,190
more integration type tests these tests

00:13:04,160 --> 00:13:08,810
that when we have multiple of our micro

00:13:07,190 --> 00:13:10,040
services all deployed and running

00:13:08,810 --> 00:13:11,900
together that they can talk to each

00:13:10,040 --> 00:13:13,730
other it's not a full bosch deployment

00:13:11,900 --> 00:13:16,730
so it's not really a real diego or real

00:13:13,730 --> 00:13:18,140
CF it's just testing that if we have

00:13:16,730 --> 00:13:19,670
like this component running and this

00:13:18,140 --> 00:13:20,329
component running they should be able to

00:13:19,670 --> 00:13:21,889
still talk to

00:13:20,329 --> 00:13:23,449
each other even if that's not deployed

00:13:21,889 --> 00:13:26,540
on Bosch and we do some basic

00:13:23,449 --> 00:13:29,720
verification there we run these in a

00:13:26,540 --> 00:13:32,149
container on concourse some of you may

00:13:29,720 --> 00:13:35,179
be familiar with concourse as a CI

00:13:32,149 --> 00:13:37,730
continuous integration tool we use

00:13:35,179 --> 00:13:39,559
concourse in this case as just a

00:13:37,730 --> 00:13:42,139
convenient way to run a containerized

00:13:39,559 --> 00:13:44,149
job locally we can run it either locally

00:13:42,139 --> 00:13:48,949
or we can run it on our actual

00:13:44,149 --> 00:13:50,480
development our like group CI pipeline

00:13:48,949 --> 00:13:53,239
so if I don't want to wait for it to run

00:13:50,480 --> 00:13:54,949
on my machine I can run it on like in

00:13:53,239 --> 00:13:56,989
our case we can run it on our AWS

00:13:54,949 --> 00:13:58,220
deployed concourse but for an outside

00:13:56,989 --> 00:13:59,540
contributor you're gonna have a local

00:13:58,220 --> 00:14:01,910
concourse most likely that you're going

00:13:59,540 --> 00:14:03,170
to run this against and the steps for

00:14:01,910 --> 00:14:06,259
setting up concourse are again and that

00:14:03,170 --> 00:14:08,299
documentation with everything else it's

00:14:06,259 --> 00:14:09,860
also a vagrant box so you just you bring

00:14:08,299 --> 00:14:10,910
down concourse light and do vagrant up

00:14:09,860 --> 00:14:14,350
and then you have a locally running

00:14:10,910 --> 00:14:14,350
concourse and you can run these tests

00:14:14,589 --> 00:14:20,360
now on to our third suite of tests that

00:14:18,319 --> 00:14:22,489
are run on your local environment these

00:14:20,360 --> 00:14:25,639
are the acceptance tests also called

00:14:22,489 --> 00:14:27,949
cats these are what we need Bosch light

00:14:25,639 --> 00:14:30,230
for so these are going to be actually

00:14:27,949 --> 00:14:31,879
verifying CF is working correctly from

00:14:30,230 --> 00:14:34,639
sort of an end-user perspective these

00:14:31,879 --> 00:14:36,970
tests actually use the CF CLI directly

00:14:34,639 --> 00:14:40,579
and make sure that the basic scenarios

00:14:36,970 --> 00:14:42,110
are all working in to end so this is why

00:14:40,579 --> 00:14:45,049
we needed to deploy Bosch light in the

00:14:42,110 --> 00:14:46,549
first place and so again we want to make

00:14:45,049 --> 00:14:47,989
sure that everything is working with

00:14:46,549 --> 00:14:49,429
these acceptance tests locally before I

00:14:47,989 --> 00:14:51,049
actually start doing development because

00:14:49,429 --> 00:14:52,459
if I start doing development and then

00:14:51,049 --> 00:14:54,259
things are broken then I'm like I don't

00:14:52,459 --> 00:14:55,970
know if I messed it up or if it was

00:14:54,259 --> 00:14:56,989
messed up to begin with so we just wanna

00:14:55,970 --> 00:14:58,309
make sure I have a good clean

00:14:56,989 --> 00:15:02,839
environment especially the first time I

00:14:58,309 --> 00:15:06,230
start doing development for Diego so now

00:15:02,839 --> 00:15:07,879
my repo my local environment seems fine

00:15:06,230 --> 00:15:10,309
all the tests pass everything seems good

00:15:07,879 --> 00:15:12,079
so I'm ready to fork the repository so

00:15:10,309 --> 00:15:13,639
in github some of you might be familiar

00:15:12,079 --> 00:15:15,410
with this already but when you fork

00:15:13,639 --> 00:15:17,929
something it means you're making a copy

00:15:15,410 --> 00:15:19,549
of it under your local username so this

00:15:17,929 --> 00:15:21,139
is going to create a copy of the

00:15:19,549 --> 00:15:23,149
executor the executor is one of our sub

00:15:21,139 --> 00:15:24,739
modules it's going to create a copy of

00:15:23,149 --> 00:15:26,689
the executor and it's gonna put it under

00:15:24,739 --> 00:15:28,549
the gen Spinney user so it's gonna be

00:15:26,689 --> 00:15:31,449
just like the repo that exists in Cloud

00:15:28,549 --> 00:15:33,570
Foundry but is going to be under my name

00:15:31,449 --> 00:15:35,430
now that I have

00:15:33,570 --> 00:15:38,910
know that I check that out and I do a

00:15:35,430 --> 00:15:40,440
git pull from my from my version of the

00:15:38,910 --> 00:15:42,600
repo I'm gonna first start off by

00:15:40,440 --> 00:15:45,449
running a test I'm gonna see that it's a

00:15:42,600 --> 00:15:47,579
failing test to make sure that I'm

00:15:45,449 --> 00:15:48,990
actually writing a test that is actually

00:15:47,579 --> 00:15:50,730
testing what I want to implement and I'm

00:15:48,990 --> 00:15:53,430
not just accidentally after the fact

00:15:50,730 --> 00:15:55,380
writing a trivial e passing test and

00:15:53,430 --> 00:15:58,680
then I'm gonna actually code up the fix

00:15:55,380 --> 00:16:01,319
and then once I'm satisfied that my code

00:15:58,680 --> 00:16:03,180
makes the test I wrote pass I'm gonna

00:16:01,319 --> 00:16:04,829
run all those tests again so those three

00:16:03,180 --> 00:16:07,319
test suites that I just showed you the

00:16:04,829 --> 00:16:08,550
unit tests an ego and the acceptance

00:16:07,319 --> 00:16:10,649
test I'm gonna run all those make sure

00:16:08,550 --> 00:16:13,620
everything is green and once that's all

00:16:10,649 --> 00:16:16,620
done then I'm ready to start to open the

00:16:13,620 --> 00:16:20,639
actual PR so when I go and I do a push

00:16:16,620 --> 00:16:23,220
to my branch on my forked repo so gents

00:16:20,639 --> 00:16:24,810
Vinnie slash executor when I push to a

00:16:23,220 --> 00:16:26,430
branch there and I go to github I'm

00:16:24,810 --> 00:16:28,139
gonna see this little thing pop-up that

00:16:26,430 --> 00:16:32,160
says do you want to do a compare and

00:16:28,139 --> 00:16:34,319
pull request and so I click on that and

00:16:32,160 --> 00:16:36,089
then there's a opportunity for me to

00:16:34,319 --> 00:16:37,500
write a little bit of a description here

00:16:36,089 --> 00:16:40,079
I'm gonna reference the issue that I

00:16:37,500 --> 00:16:43,110
made at the beginning so I'm gonna just

00:16:40,079 --> 00:16:44,760
say like as I said in this issue I want

00:16:43,110 --> 00:16:45,810
to do this little refactor that makes it

00:16:44,760 --> 00:16:48,420
so everything's kind of linked together

00:16:45,810 --> 00:16:50,220
and if it's not Lew on the next day if

00:16:48,420 --> 00:16:52,199
it's some other person from the Diego

00:16:50,220 --> 00:16:53,399
team they can follow the track of work

00:16:52,199 --> 00:16:55,829
and they can go back to the issue and

00:16:53,399 --> 00:17:01,920
say okay they had this discussion and it

00:16:55,829 --> 00:17:03,899
just keeps everything well linked so

00:17:01,920 --> 00:17:05,390
there's some things to keep in mind when

00:17:03,899 --> 00:17:09,780
you're sending a pro request

00:17:05,390 --> 00:17:11,760
specifically about testing we wanna we

00:17:09,780 --> 00:17:14,540
we want to make sure that we are

00:17:11,760 --> 00:17:16,380
covering edge cases and error cases so

00:17:14,540 --> 00:17:18,720
when you're when you're writing your

00:17:16,380 --> 00:17:20,640
your test cases add your happy path but

00:17:18,720 --> 00:17:23,339
also think about what could go wrong in

00:17:20,640 --> 00:17:27,329
there and if that's not present will

00:17:23,339 --> 00:17:29,130
likely send send APR back say hey can

00:17:27,329 --> 00:17:32,669
you please add a little more test

00:17:29,130 --> 00:17:34,380
coverage around these scenarios so can

00:17:32,669 --> 00:17:37,290
just be proactive about that that helps

00:17:34,380 --> 00:17:41,010
a lot the team make sure we're getting a

00:17:37,290 --> 00:17:42,780
good contribution and also make sure you

00:17:41,010 --> 00:17:44,070
run out of tests before you submit for

00:17:42,780 --> 00:17:45,870
requests Jen said that we're probably

00:17:44,070 --> 00:17:47,470
gonna say that again before the end of

00:17:45,870 --> 00:17:49,059
the stock

00:17:47,470 --> 00:17:51,010
it's also very important that the test

00:17:49,059 --> 00:17:53,230
baskets if the tests are read when we

00:17:51,010 --> 00:17:57,429
get to for quest will likely not

00:17:53,230 --> 00:18:00,490
mortgage it that said I'm again the

00:17:57,429 --> 00:18:02,620
community pair and I noticed that Jen

00:18:00,490 --> 00:18:06,460
has sent her poor quest like she had

00:18:02,620 --> 00:18:08,799
promised so I look at the first thing we

00:18:06,460 --> 00:18:10,779
generally do is through the github UI

00:18:08,799 --> 00:18:13,059
itself we'll look at the the files

00:18:10,779 --> 00:18:14,770
change follow changes just to have a

00:18:13,059 --> 00:18:17,110
quick glance of what was changed if

00:18:14,770 --> 00:18:20,320
there's any like obvious things we can

00:18:17,110 --> 00:18:24,100
we can recommend to be fixed in this

00:18:20,320 --> 00:18:26,710
case the Brooke last gen sent had one

00:18:24,100 --> 00:18:30,100
style difference that the Diego team

00:18:26,710 --> 00:18:32,799
does that she didn't necessarily follow

00:18:30,100 --> 00:18:36,190
the particular example here is the order

00:18:32,799 --> 00:18:37,690
of the arguments is not what we what we

00:18:36,190 --> 00:18:39,429
generally do because we generally have a

00:18:37,690 --> 00:18:41,409
logger as the first argument just to

00:18:39,429 --> 00:18:43,450
have a standard since that's kind of all

00:18:41,409 --> 00:18:45,309
the methods we call so I just send that

00:18:43,450 --> 00:18:46,899
feedback to her and instead of just

00:18:45,309 --> 00:18:48,309
fixing that I send the feedback so that

00:18:46,899 --> 00:18:49,419
next time that she sends a contribution

00:18:48,309 --> 00:18:50,890
she'll know and not make the same

00:18:49,419 --> 00:18:54,490
mistake again

00:18:50,890 --> 00:18:57,549
and then after I give some feedback on

00:18:54,490 --> 00:18:59,679
on the lines I sent one message saying

00:18:57,549 --> 00:19:00,419
hey guy I wrote some feedback to your

00:18:59,679 --> 00:19:03,279
change

00:19:00,419 --> 00:19:05,760
it looks good otherwise it's good to

00:19:03,279 --> 00:19:08,860
merge is if you could just fix that and

00:19:05,760 --> 00:19:15,610
send update the PR then we can just

00:19:08,860 --> 00:19:17,649
merge that in so I see his comment it's

00:19:15,610 --> 00:19:19,690
an easy enough enough fix to do I just

00:19:17,649 --> 00:19:22,000
reorder the arguments in that function

00:19:19,690 --> 00:19:24,250
after I do that I'm gonna do a git

00:19:22,000 --> 00:19:26,049
rebase I'm gonna do this so that I can

00:19:24,250 --> 00:19:27,640
squash my two commits because I don't

00:19:26,049 --> 00:19:30,130
want to submit this as two separate

00:19:27,640 --> 00:19:32,470
commits but also because I want to see

00:19:30,130 --> 00:19:34,480
if there are other changes that have

00:19:32,470 --> 00:19:36,130
gone in since I did this I want a rebase

00:19:34,480 --> 00:19:38,140
against origin/master

00:19:36,130 --> 00:19:40,210
like against the Cloud Foundry version

00:19:38,140 --> 00:19:41,470
of the executor in case you know while

00:19:40,210 --> 00:19:43,510
we had this back-and-forth there might

00:19:41,470 --> 00:19:46,000
have been a couple days that went went

00:19:43,510 --> 00:19:47,980
by and maybe someone else committed and

00:19:46,000 --> 00:19:49,510
so I want to make sure that I'm rebased

00:19:47,980 --> 00:19:51,909
on top of the latest version of

00:19:49,510 --> 00:19:54,970
origin/master so that my PR can go in

00:19:51,909 --> 00:19:56,559
cleanly then once that's all done and

00:19:54,970 --> 00:19:58,510
rebased and i have a single commit i'm

00:19:56,559 --> 00:19:59,650
going to do a force push to my branch

00:19:58,510 --> 00:20:02,590
and this

00:19:59,650 --> 00:20:04,180
gonna automatically update the PR once I

00:20:02,590 --> 00:20:06,610
do the force push I'm gonna go back to

00:20:04,180 --> 00:20:09,640
github and I'm gonna update the PR and

00:20:06,610 --> 00:20:14,350
say hey guys I updated it with your

00:20:09,640 --> 00:20:16,240
feedback can you take a look again well

00:20:14,350 --> 00:20:19,060
and then finally when I get the updated

00:20:16,240 --> 00:20:20,920
Pro request I will look at it again just

00:20:19,060 --> 00:20:25,630
make sure that the changes make sense

00:20:20,920 --> 00:20:28,450
and if they do we'll pull the we'll pull

00:20:25,630 --> 00:20:31,870
the code down locally so that we can run

00:20:28,450 --> 00:20:33,460
the tests if there is any like less

00:20:31,870 --> 00:20:35,650
minute things that we noticed like a

00:20:33,460 --> 00:20:37,930
typo for example in this case I

00:20:35,650 --> 00:20:40,180
mentioned there that there was a small

00:20:37,930 --> 00:20:44,230
typo so I just fixed that so we'll we'll

00:20:40,180 --> 00:20:45,730
do like small fixes like this one in the

00:20:44,230 --> 00:20:47,290
last minute but what we're on our test

00:20:45,730 --> 00:20:50,140
make sure it's all good and then we'll

00:20:47,290 --> 00:20:52,890
merge it when we push the merge github

00:20:50,140 --> 00:20:54,880
will automatically update the story the

00:20:52,890 --> 00:20:56,830
the poor quest so Jen gets a

00:20:54,880 --> 00:21:00,100
notification it will also update our

00:20:56,830 --> 00:21:02,230
trackers story just signified that this

00:21:00,100 --> 00:21:04,780
is all merged and get to go so that our

00:21:02,230 --> 00:21:09,910
product manager knows and should take a

00:21:04,780 --> 00:21:12,130
look at it and accept the story yeah and

00:21:09,910 --> 00:21:16,000
then that's at that point contribution

00:21:12,130 --> 00:21:17,740
is merged in dissolved it all done so we

00:21:16,000 --> 00:21:19,450
just want to cover some common rejection

00:21:17,740 --> 00:21:21,460
reasons or not not really rejection but

00:21:19,450 --> 00:21:22,660
reasons that we might come back to you

00:21:21,460 --> 00:21:25,630
and say oh we're not ready to merge this

00:21:22,660 --> 00:21:27,550
yet so if you don't have adequate test

00:21:25,630 --> 00:21:30,220
coverage so remember we want happy path

00:21:27,550 --> 00:21:31,750
test but also edge cases and depending

00:21:30,220 --> 00:21:33,790
on the scope of the work that might mean

00:21:31,750 --> 00:21:35,710
unit tests or that might mean an ego

00:21:33,790 --> 00:21:37,390
test or acceptance test will probably

00:21:35,710 --> 00:21:39,520
like be working with you through that

00:21:37,390 --> 00:21:40,990
like if it's a big enough feature that

00:21:39,520 --> 00:21:42,850
you might need one of those well point

00:21:40,990 --> 00:21:44,680
it out to you but in general you want to

00:21:42,850 --> 00:21:47,590
be thinking like am I having you know am

00:21:44,680 --> 00:21:50,710
i testing every edge case and my is my

00:21:47,590 --> 00:21:52,480
code fully tested another reason we

00:21:50,710 --> 00:21:53,980
might come back to you or just flat-out

00:21:52,480 --> 00:21:55,600
say we're not taking the pull request is

00:21:53,980 --> 00:21:58,090
if it conflicts with work that is

00:21:55,600 --> 00:21:59,620
already in progress this is more if you

00:21:58,090 --> 00:22:01,690
don't talk to us before you do it if you

00:21:59,620 --> 00:22:03,610
just submit the PR so if it's

00:22:01,690 --> 00:22:04,870
conflicting with our roadmap meaning

00:22:03,610 --> 00:22:06,190
someone else is already working on

00:22:04,870 --> 00:22:07,780
something similar or it's just something

00:22:06,190 --> 00:22:09,820
that we don't think is the right

00:22:07,780 --> 00:22:10,940
direction for how we envision the code

00:22:09,820 --> 00:22:14,180
going

00:22:10,940 --> 00:22:16,100
so just a reminder to talk to us first

00:22:14,180 --> 00:22:17,390
another reason we could come back to you

00:22:16,100 --> 00:22:20,450
and say we're not ready to merge it is

00:22:17,390 --> 00:22:23,870
if the code is not read based against

00:22:20,450 --> 00:22:26,000
master meaning it won't merge cleanly so

00:22:23,870 --> 00:22:27,410
this is a little bit unfortunate that

00:22:26,000 --> 00:22:28,490
sometimes polar requests can take a

00:22:27,410 --> 00:22:29,830
couple days to go through because

00:22:28,490 --> 00:22:32,840
there's a little bit of back and forth

00:22:29,830 --> 00:22:35,660
and in that time you know if it's taking

00:22:32,840 --> 00:22:38,000
a while other people come in and

00:22:35,660 --> 00:22:39,530
actually make commits on you know in the

00:22:38,000 --> 00:22:41,990
middle and so you have to go back and

00:22:39,530 --> 00:22:44,750
rebase and make sure your branch emerges

00:22:41,990 --> 00:22:47,020
and cleanly another reason is untidy

00:22:44,750 --> 00:22:49,340
commits so if there's been a bunch of

00:22:47,020 --> 00:22:51,230
back and forth and a lot of iterations

00:22:49,340 --> 00:22:53,810
you know you might have commit stacking

00:22:51,230 --> 00:22:54,860
up in general for most cases you'll

00:22:53,810 --> 00:22:56,120
probably want to have just a single

00:22:54,860 --> 00:22:58,460
commit so you want to squash your

00:22:56,120 --> 00:23:01,400
commits so it looks clean and the get

00:22:58,460 --> 00:23:03,530
history once we actually merge it the

00:23:01,400 --> 00:23:05,840
other issue would be not running the

00:23:03,530 --> 00:23:08,120
tests and so you have some failing tests

00:23:05,840 --> 00:23:09,740
and then we catch that and we come back

00:23:08,120 --> 00:23:14,150
to you and it lengthens the whole

00:23:09,740 --> 00:23:15,530
process so lastly if you want to get

00:23:14,150 --> 00:23:18,440
involved but you don't have like a

00:23:15,530 --> 00:23:19,940
specific feature you're like dying to do

00:23:18,440 --> 00:23:22,400
or you don't find a bug or something

00:23:19,940 --> 00:23:24,650
like that like you're welcome to come to

00:23:22,400 --> 00:23:26,960
our slack Channel and say like hey you

00:23:24,650 --> 00:23:29,960
know my name is blah blah blah I'm like

00:23:26,960 --> 00:23:31,100
interested to get my feet wet with Diego

00:23:29,960 --> 00:23:35,030
but I don't know where to start do you

00:23:31,100 --> 00:23:36,860
guys have some bug I could work on is

00:23:35,030 --> 00:23:38,240
there something I could do and we'll

00:23:36,860 --> 00:23:41,360
work with you we'll try to find

00:23:38,240 --> 00:23:42,380
something our tracker is public so you

00:23:41,360 --> 00:23:45,290
can look at what we're working on right

00:23:42,380 --> 00:23:46,460
now but I wouldn't go and just pull

00:23:45,290 --> 00:23:48,560
something off of tracker and assume that

00:23:46,460 --> 00:23:50,240
you can work on it for the most part we

00:23:48,560 --> 00:23:51,680
assume that the tracker the stuff in

00:23:50,240 --> 00:23:53,300
tracker is stuff that we're going to get

00:23:51,680 --> 00:23:54,860
to if you see something in tracker you

00:23:53,300 --> 00:23:56,270
want to work on you can message us and

00:23:54,860 --> 00:23:58,280
say like oh I really want to do this and

00:23:56,270 --> 00:24:00,110
then we can talk about that but in

00:23:58,280 --> 00:24:02,090
general like the tracker we assume that

00:24:00,110 --> 00:24:03,650
people the core committers are gonna be

00:24:02,090 --> 00:24:05,690
pulling things off the tracker backlog

00:24:03,650 --> 00:24:07,130
so just the main point is just talk to

00:24:05,690 --> 00:24:08,390
us if you don't know what you want to

00:24:07,130 --> 00:24:09,770
work on or even if you don't know what

00:24:08,390 --> 00:24:11,450
you want to work on we're gonna

00:24:09,770 --> 00:24:13,070
recommend talking to us first and then

00:24:11,450 --> 00:24:18,500
kind of a conversation before you invest

00:24:13,070 --> 00:24:21,880
a bunch of work and energy so with all

00:24:18,500 --> 00:24:21,880
that is there any questions

00:24:29,340 --> 00:24:43,450
so the question was about lisent like

00:24:31,960 --> 00:24:44,710
contribution license like that's a great

00:24:43,450 --> 00:24:46,480
question I don't know if we have some

00:24:44,710 --> 00:24:48,669
automated software or anything that goes

00:24:46,480 --> 00:24:51,059
through and checks for so the question

00:24:48,669 --> 00:24:51,059
was about

00:25:02,070 --> 00:25:06,759
sojust and the contribution I have to

00:25:04,299 --> 00:25:08,619
sign a CLA that's actually an automated

00:25:06,759 --> 00:25:10,179
process but that's for the individuals

00:25:08,619 --> 00:25:13,409
it doesn't necessarily solve the problem

00:25:10,179 --> 00:25:18,730
of someone sending contribution that is

00:25:13,409 --> 00:25:20,559
copied from somewhere else yeah but we

00:25:18,730 --> 00:25:26,230
have a we have an automated process for

00:25:20,559 --> 00:25:30,850
signing clas which that that's basically

00:25:26,230 --> 00:25:33,369
we have automated yeah so it's tricky um

00:25:30,850 --> 00:25:34,899
you know it's tricky but yeah that is a

00:25:33,369 --> 00:25:36,970
there is a point that we didn't mention

00:25:34,899 --> 00:25:38,830
here which is that if you try to submit

00:25:36,970 --> 00:25:40,570
a PR and you haven't signed the CLA

00:25:38,830 --> 00:25:42,580
there's an automated bot that's going to

00:25:40,570 --> 00:25:43,929
come back and say you know you need to

00:25:42,580 --> 00:25:45,309
go inside the CLA but it isn't really

00:25:43,929 --> 00:25:47,080
solved the problem with people going and

00:25:45,309 --> 00:25:50,649
like stealing code from places they

00:25:47,080 --> 00:25:53,889
shouldn't be stealing it and yeah yeah

00:25:50,649 --> 00:25:54,759
people don't think about it yeah I think

00:25:53,889 --> 00:25:56,919
it's kind of a problem for any

00:25:54,759 --> 00:25:58,409
open-source project is you know you kind

00:25:56,919 --> 00:26:01,710
of are trusting the people that are

00:25:58,409 --> 00:26:08,999
bringing the code in to be doing it like

00:26:01,710 --> 00:26:08,999
appropriately any more questions

00:26:16,110 --> 00:26:22,059
that's a good question and you should

00:26:18,429 --> 00:26:25,049
stay for her talk after this because the

00:26:22,059 --> 00:26:30,880
digger team actually has three times now

00:26:25,049 --> 00:26:35,409
so generally available from what the

00:26:30,880 --> 00:26:40,960
it's 9:00 on US East Coast until six on

00:26:35,409 --> 00:26:45,280
West Coast or yeah so there is a good 12

00:26:40,960 --> 00:26:53,950
hours there but yeah it's there there's

00:26:45,280 --> 00:26:54,240
some availability issue there any more

00:26:53,950 --> 00:26:56,970
questions

00:26:54,240 --> 00:27:01,650
[Music]

00:26:56,970 --> 00:27:01,650
cool thank you everyone

00:27:02,040 --> 00:27:05,460

YouTube URL: https://www.youtube.com/watch?v=rDGtVL6VqVI


