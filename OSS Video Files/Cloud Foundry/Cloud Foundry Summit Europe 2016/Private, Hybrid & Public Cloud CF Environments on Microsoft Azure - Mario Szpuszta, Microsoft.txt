Title: Private, Hybrid & Public Cloud CF Environments on Microsoft Azure - Mario Szpuszta, Microsoft
Publication date: 2016-09-30
Playlist: Cloud Foundry Summit Europe 2016
Description: 
	Private, Hybrid & Public Cloud CF Environments on Microsoft Azure - Mario Szpuszta, Microsoft

Microsoft Azure is a public cloud platform available across 38 regions world-wide. Microsoft has worked on an official CPI to enable CloudFoundry on Azure with the Open Source Community and Pivotal. This CPI is available for about a year, now! In this presentation, Gil and Mario will go beyond the basics and will focus on running Private, Hybrid and Globally Distributed CF Clusters in Microsoft Azure and Azure Stack. They will show you how-to get them implemented and how you can re-use your assets across the public cloud (Azure) and the private Cloud (Azure Stack). They'll discuss how failover can happen across multiple environments and what the caveats are by deploying CF Clusters and apps across those environments.

About Mario Szpuszta
Mario works as a Software Development Engineer in the Developer Experiences team (DX) at Microsoft Corp. HQ. He works with global software vendor partners on architecting, designing and coding reference solutions. Mario is a part of Microsoft for more than 14 years and his focus areas include cloud computing, Containers and PaaS Platforms, as well as identity & claims-based security and .NET. Mario is Co-Author of â€œAdvanced .NET Remoting 2nd Edition" and "Pro ASP.NET in C#" by APress.
Captions: 
	00:00:00,030 --> 00:00:05,190
so welcome everyone to this first

00:00:03,389 --> 00:00:07,710
session of the lunch my name is Mario's

00:00:05,190 --> 00:00:11,099
pasta I'm working as a principals of the

00:00:07,710 --> 00:00:14,219
development engineer out of unit that is

00:00:11,099 --> 00:00:17,220
called developer experiences as part of

00:00:14,219 --> 00:00:19,680
Microsoft Corp I'm actually based in

00:00:17,220 --> 00:00:22,439
Europe based in Austria in Vienna you

00:00:19,680 --> 00:00:24,960
might realize that when I'm having some

00:00:22,439 --> 00:00:28,859
strange parts and pieces in my

00:00:24,960 --> 00:00:30,929
expressions got my managers it's in

00:00:28,859 --> 00:00:33,660
Redmond and we are part of the what we

00:00:30,929 --> 00:00:35,370
call globalized v-team iswi stands for

00:00:33,660 --> 00:00:36,719
independent software vendor so we are

00:00:35,370 --> 00:00:40,440
working with independent software

00:00:36,719 --> 00:00:42,890
vendors on integrating their

00:00:40,440 --> 00:00:46,469
technologies and platforms with our

00:00:42,890 --> 00:00:49,079
technologies and platforms and our main

00:00:46,469 --> 00:00:52,020
focus area guess what is a sure and

00:00:49,079 --> 00:00:54,020
cloud and today I would like to talk

00:00:52,020 --> 00:00:57,090
about the efforts that we have done

00:00:54,020 --> 00:00:59,100
together with cloud foundry from an

00:00:57,090 --> 00:01:02,309
open-source perspective as well as on

00:00:59,100 --> 00:01:05,489
the commercial side with pivotal with

00:01:02,309 --> 00:01:07,650
running cloud foundry or measured and as

00:01:05,489 --> 00:01:09,750
well talk a little bit about some more

00:01:07,650 --> 00:01:12,119
complex architectures that we have

00:01:09,750 --> 00:01:15,600
implemented with some of our globalized

00:01:12,119 --> 00:01:18,869
V partners so I just curious who has

00:01:15,600 --> 00:01:21,780
used a sure before who knows about ok so

00:01:18,869 --> 00:01:27,229
that's maybe six seven eight nine ten

00:01:21,780 --> 00:01:30,630
ish or so so who knows about answer then

00:01:27,229 --> 00:01:32,610
so quite a few people yeah so azure is

00:01:30,630 --> 00:01:34,650
microsoft's public cloud platform for

00:01:32,610 --> 00:01:37,530
those of you who don't know it we have

00:01:34,650 --> 00:01:40,860
deployed it across more than 30 regions

00:01:37,530 --> 00:01:43,890
on the world a region is usually a mega

00:01:40,860 --> 00:01:47,369
datacenter that covers approximately 100

00:01:43,890 --> 00:01:50,579
to 120 thousand physical machines where

00:01:47,369 --> 00:01:53,899
we run workloads of all types reaching

00:01:50,579 --> 00:01:56,570
from typical infrastructure-as-a-service

00:01:53,899 --> 00:01:59,729
workloads up to higher level paths

00:01:56,570 --> 00:02:02,009
workloads such as machine learning big

00:01:59,729 --> 00:02:02,460
data workloads with Hadoop and things

00:02:02,009 --> 00:02:05,490
like that

00:02:02,460 --> 00:02:08,190
so that's kind of the quick what is a

00:02:05,490 --> 00:02:10,379
sure in a nutshell and Cloud Foundry is

00:02:08,190 --> 00:02:13,200
one of the workloads that we are very

00:02:10,379 --> 00:02:15,360
proud of to have on Azure

00:02:13,200 --> 00:02:18,420
so with regards to that specific session

00:02:15,360 --> 00:02:19,200
I'm not giving an azure basic stalk or

00:02:18,420 --> 00:02:23,310
something like that

00:02:19,200 --> 00:02:25,140
I would like to dig into aspect that we

00:02:23,310 --> 00:02:27,390
have experienced with running Cloud

00:02:25,140 --> 00:02:29,910
Foundry I'm a sure so these are the main

00:02:27,390 --> 00:02:32,099
key takeaways we'll talk about where we

00:02:29,910 --> 00:02:34,050
are right now I'll show you how you can

00:02:32,099 --> 00:02:37,769
get a Cloud Foundry running on Asia

00:02:34,050 --> 00:02:40,319
using Bosh then we'll talk about private

00:02:37,769 --> 00:02:43,019
cloud and hybrid cloud deployments that

00:02:40,319 --> 00:02:46,110
is the middle piece of the section well

00:02:43,019 --> 00:02:49,380
you'll learn about our vision in terms

00:02:46,110 --> 00:02:50,940
of providing a j''r in private clouds so

00:02:49,380 --> 00:02:53,430
in your own data center at the end of

00:02:50,940 --> 00:02:56,099
the day and also where we are with Cloud

00:02:53,430 --> 00:02:58,739
Foundry from from that regard and

00:02:56,099 --> 00:03:01,049
finally we'll talk about globally

00:02:58,739 --> 00:03:02,549
distributed architectures as we have

00:03:01,049 --> 00:03:04,799
experienced them with some of our

00:03:02,549 --> 00:03:07,110
globalized V partners the reason why

00:03:04,799 --> 00:03:09,630
I've that I've put that into the game is

00:03:07,110 --> 00:03:12,209
because those global deployments are

00:03:09,630 --> 00:03:14,940
usually multi-region deployments and you

00:03:12,209 --> 00:03:17,609
can look as a region as either a

00:03:14,940 --> 00:03:21,420
deployment in one of our other public

00:03:17,609 --> 00:03:24,299
cloud vendors is it pivotal or AWS or

00:03:21,420 --> 00:03:26,760
whatsoever or it also could be your own

00:03:24,299 --> 00:03:28,530
private cloud and that is the reason why

00:03:26,760 --> 00:03:31,440
I put that into the mix of the

00:03:28,530 --> 00:03:35,010
presentation so Cloud Foundry on Azure

00:03:31,440 --> 00:03:38,370
where we are today so today we have

00:03:35,010 --> 00:03:41,370
released a CPI implementation for Bosch

00:03:38,370 --> 00:03:43,920
that helps you to spin up the Cloud

00:03:41,370 --> 00:03:46,290
Foundry cluster on Azure and it helps

00:03:43,920 --> 00:03:49,049
Bosch to do some or perform some

00:03:46,290 --> 00:03:51,389
automated management operations against

00:03:49,049 --> 00:03:53,730
a Cloud Foundry cluster that has been

00:03:51,389 --> 00:03:56,819
deployed that way that CPI

00:03:53,730 --> 00:03:58,709
implementation is all open source so we

00:03:56,819 --> 00:04:00,720
are actually developing it as part of

00:03:58,709 --> 00:04:02,880
the cloud foundry incubator project so

00:04:00,720 --> 00:04:04,920
we are doing pull requests into that

00:04:02,880 --> 00:04:09,090
there github repository if you want so

00:04:04,920 --> 00:04:10,980
and that CPI is under like active

00:04:09,090 --> 00:04:13,410
development in terms of it's getting

00:04:10,980 --> 00:04:16,320
improved on on a weekly and monthly

00:04:13,410 --> 00:04:18,840
basis so for example we have heard about

00:04:16,320 --> 00:04:21,329
Diego this morning in the keynote we

00:04:18,840 --> 00:04:25,620
have that in our CPI implementation

00:04:21,329 --> 00:04:27,100
already for example so that is one part

00:04:25,620 --> 00:04:30,430
of the story

00:04:27,100 --> 00:04:33,250
the borscht CPI obviously works against

00:04:30,430 --> 00:04:34,000
the azure management api's the azure

00:04:33,250 --> 00:04:37,840
management

00:04:34,000 --> 00:04:39,910
api's are just a set of rest based HTTP

00:04:37,840 --> 00:04:41,860
based services that to allow you to run

00:04:39,910 --> 00:04:44,500
management operations against your own

00:04:41,860 --> 00:04:49,240
Azure account or rename that as your

00:04:44,500 --> 00:04:52,480
subscription and those management api's

00:04:49,240 --> 00:04:54,880
allow you to perform template based

00:04:52,480 --> 00:04:57,300
deployments with the technology that we

00:04:54,880 --> 00:04:59,920
call as your resource manager templates

00:04:57,300 --> 00:05:03,090
so the second piece that we have built

00:04:59,920 --> 00:05:06,850
for running cloud foundry on Azure is

00:05:03,090 --> 00:05:08,920
guess what a set of arm templates that

00:05:06,850 --> 00:05:11,650
allow you to spin up Cloud Foundry

00:05:08,920 --> 00:05:13,750
cluster easily inertia so those

00:05:11,650 --> 00:05:17,980
templates essentially are spinning up

00:05:13,750 --> 00:05:20,920
the DEF box and the Posche director

00:05:17,980 --> 00:05:24,460
instance and then from there you just

00:05:20,920 --> 00:05:26,890
dial into or SSH into the def box and

00:05:24,460 --> 00:05:29,620
then perform your actual Cloud Foundry

00:05:26,890 --> 00:05:34,480
cluster deployment using Bosh and the

00:05:29,620 --> 00:05:37,870
Bosh CPI that that we have built so

00:05:34,480 --> 00:05:40,120
let's have a look at that so let's go to

00:05:37,870 --> 00:05:42,730
my other desktop so what you see here is

00:05:40,120 --> 00:05:45,220
the azure management portal it's an

00:05:42,730 --> 00:05:48,400
html5 based portal I'm just running it

00:05:45,220 --> 00:05:52,360
in some sort of terminal management tool

00:05:48,400 --> 00:05:54,640
that I'm using for my own stuff so in

00:05:52,360 --> 00:05:58,060
reality that's just a hosted browser so

00:05:54,640 --> 00:06:00,280
don't get confused by that I just use

00:05:58,060 --> 00:06:02,950
that because I don't want to confuse my

00:06:00,280 --> 00:06:04,900
management stuff with things that I'm

00:06:02,950 --> 00:06:07,870
looking up in the internet so that's the

00:06:04,900 --> 00:06:10,300
only reason why I'm working like that so

00:06:07,870 --> 00:06:11,920
essentially one of the important things

00:06:10,300 --> 00:06:14,110
that you need to understand when you

00:06:11,920 --> 00:06:16,510
start with Azure nowadays is the concept

00:06:14,110 --> 00:06:18,760
of a resource group a resource group is

00:06:16,510 --> 00:06:21,370
a logical grouping of resources that do

00:06:18,760 --> 00:06:25,360
belong together and then on a resource

00:06:21,370 --> 00:06:28,900
group you can issue things like like

00:06:25,360 --> 00:06:32,380
permissions for users do role based

00:06:28,900 --> 00:06:34,510
access controls and perform joint

00:06:32,380 --> 00:06:37,060
operations on all the resources that are

00:06:34,510 --> 00:06:40,120
in such a resource group so what I have

00:06:37,060 --> 00:06:42,639
here in that resource group

00:06:40,120 --> 00:06:44,949
or in the list of resource groups of our

00:06:42,639 --> 00:06:46,990
teams as your subscription so that has a

00:06:44,949 --> 00:06:49,900
lot of resources we are doing prototypes

00:06:46,990 --> 00:06:51,729
and PCs with our globalized V partners

00:06:49,900 --> 00:06:55,540
inside of that subscription I have a

00:06:51,729 --> 00:06:57,790
bunch of them running here so CF simple

00:06:55,540 --> 00:07:00,970
here is a resource group I have deployed

00:06:57,790 --> 00:07:02,740
a Cloud Foundry cluster in Azure and

00:07:00,970 --> 00:07:04,630
what you see here is a bunch of cluster

00:07:02,740 --> 00:07:06,190
notes those are essentially the workers

00:07:04,630 --> 00:07:09,300
where the actual applications are

00:07:06,190 --> 00:07:12,880
running and then you have things like

00:07:09,300 --> 00:07:15,610
network interfaces public IP addresses

00:07:12,880 --> 00:07:17,800
and so on and so forth so that is

00:07:15,610 --> 00:07:19,960
essentially like a running Cloud Foundry

00:07:17,800 --> 00:07:23,139
cluster but the question is how do you

00:07:19,960 --> 00:07:25,560
get there right and the answer is to be

00:07:23,139 --> 00:07:29,110
found on a public github repository

00:07:25,560 --> 00:07:32,350
under Cloud Foundry incubator Bosh CPI

00:07:29,110 --> 00:07:34,479
release so that is where we have

00:07:32,350 --> 00:07:37,240
published all the arm templates we're

00:07:34,479 --> 00:07:40,510
also the Bosh CPI implementation is

00:07:37,240 --> 00:07:46,470
available on as open source and that has

00:07:40,510 --> 00:07:49,389
a pretty detailed guidance on how the

00:07:46,470 --> 00:07:53,260
deployment works and what you need to do

00:07:49,389 --> 00:07:55,150
actually so the first thing that you

00:07:53,260 --> 00:07:56,770
need of course is an azure account or an

00:07:55,150 --> 00:07:59,050
azure subscription so you need to have a

00:07:56,770 --> 00:08:01,360
sure and your own ash attendant to be

00:07:59,050 --> 00:08:01,810
able to do that it explains how that

00:08:01,360 --> 00:08:03,820
works

00:08:01,810 --> 00:08:07,120
but then it becomes a little bit more

00:08:03,820 --> 00:08:10,570
interesting because then it talks

00:08:07,120 --> 00:08:12,250
already kind of very a sure style

00:08:10,570 --> 00:08:15,039
language you need to create a service

00:08:12,250 --> 00:08:19,680
principle so who could think about what

00:08:15,039 --> 00:08:24,479
the service principle is so it's

00:08:19,680 --> 00:08:27,820
essentially an identity in a directory

00:08:24,479 --> 00:08:29,560
that you can give permissions to execute

00:08:27,820 --> 00:08:32,589
operations against your ashes

00:08:29,560 --> 00:08:34,900
subscription so essentially it's a

00:08:32,589 --> 00:08:37,900
service user that you need to add to

00:08:34,900 --> 00:08:39,520
your subscriptions directory where you

00:08:37,900 --> 00:08:42,279
manage all the user accounts and

00:08:39,520 --> 00:08:44,320
everything that is backed by service

00:08:42,279 --> 00:08:46,180
that is more in the platform as a

00:08:44,320 --> 00:08:48,430
service

00:08:46,180 --> 00:08:50,740
kind of category from Asia which is

00:08:48,430 --> 00:08:53,110
called as your Active Directory so when

00:08:50,740 --> 00:08:55,330
you create a new Asha subscription what

00:08:53,110 --> 00:08:57,700
you get is an azure active directory and

00:08:55,330 --> 00:09:00,280
the actual Azure subscription into which

00:08:57,700 --> 00:09:03,700
you deploy your infrastructure or

00:09:00,280 --> 00:09:07,180
platform services and in that directory

00:09:03,700 --> 00:09:10,660
since bosh CPI in case of a sure acts as

00:09:07,180 --> 00:09:13,600
a service which deploys virtual machines

00:09:10,660 --> 00:09:15,340
on behalf of us as the owners of the

00:09:13,600 --> 00:09:17,410
subscription it needs to have an

00:09:15,340 --> 00:09:19,390
identity for that and that is what you

00:09:17,410 --> 00:09:23,080
need to first create before you can

00:09:19,390 --> 00:09:28,060
start with that so there is actually a

00:09:23,080 --> 00:09:31,170
pretty detailed guidance here for how to

00:09:28,060 --> 00:09:33,880
do that but essentially what you need is

00:09:31,170 --> 00:09:37,030
what you need is the azure

00:09:33,880 --> 00:09:40,330
cross-platform CLI on on your machine

00:09:37,030 --> 00:09:44,170
the azure cross-platform CLI is a note

00:09:40,330 --> 00:09:48,100
is based command line interface which

00:09:44,170 --> 00:09:48,670
works on Linux Mac and Windows so I have

00:09:48,100 --> 00:09:52,570
whoops

00:09:48,670 --> 00:09:55,390
clear clear answer I have that installed

00:09:52,570 --> 00:09:59,410
here and then it has all sorts of

00:09:55,390 --> 00:10:02,410
commands like Azure ad SP create - -

00:09:59,410 --> 00:10:05,140
help so that essentially is the command

00:10:02,410 --> 00:10:08,050
that creates the service principle and

00:10:05,140 --> 00:10:11,200
then that service principle gets an IDE

00:10:08,050 --> 00:10:13,060
and the secret for signing in and this

00:10:11,200 --> 00:10:15,460
is something that you would need to fill

00:10:13,060 --> 00:10:18,610
in as a parameter into the template and

00:10:15,460 --> 00:10:22,450
Posche uses that principle to create the

00:10:18,610 --> 00:10:24,760
VMS and delete the VMS or to upgrades of

00:10:22,450 --> 00:10:27,730
VMs or whatever it takes to manage the

00:10:24,760 --> 00:10:30,790
Cloud Foundry cluster so after you have

00:10:27,730 --> 00:10:35,020
done that you actually can just clone

00:10:30,790 --> 00:10:37,930
that repository here or in which we have

00:10:35,020 --> 00:10:41,140
the templates as they are developed and

00:10:37,930 --> 00:10:44,350
as they are released if you want to get

00:10:41,140 --> 00:10:48,190
more kind of like frequent updates then

00:10:44,350 --> 00:10:52,150
you can look at let me open up a new tab

00:10:48,190 --> 00:10:54,220
here as your QuickStart templates so

00:10:52,150 --> 00:10:56,920
there is another github repository where

00:10:54,220 --> 00:10:59,390
we publish like QuickStart templates

00:10:56,920 --> 00:11:01,580
which kind of are more

00:10:59,390 --> 00:11:05,270
nice templates for trying out things

00:11:01,580 --> 00:11:07,070
quickly so where you do need to do less

00:11:05,270 --> 00:11:08,870
configuration at the end of the day so

00:11:07,070 --> 00:11:11,120
when you go with the plain templates

00:11:08,870 --> 00:11:13,700
from Bosch CPI you need to think about

00:11:11,120 --> 00:11:14,990
things like a IP address ranges and

00:11:13,700 --> 00:11:18,950
things like that that you need to

00:11:14,990 --> 00:11:20,810
configure in the template for forearm on

00:11:18,950 --> 00:11:22,490
the QuickStart template that's all

00:11:20,810 --> 00:11:24,020
pre-configured so you don't need to

00:11:22,490 --> 00:11:25,790
think about those things and just can

00:11:24,020 --> 00:11:31,690
try it out quickly that's the idea

00:11:25,790 --> 00:11:35,450
and in there we have a Bosch setup

00:11:31,690 --> 00:11:38,120
repository where we have pre-built as

00:11:35,450 --> 00:11:41,510
your resource manager templates and I

00:11:38,120 --> 00:11:44,240
have them actually open here in one of

00:11:41,510 --> 00:11:47,300
those visual studio code instances

00:11:44,240 --> 00:11:50,390
Porsche setup so that is actually the

00:11:47,300 --> 00:11:55,700
right one so this is an azure arm

00:11:50,390 --> 00:11:58,100
template for deploying Bosch CPI and the

00:11:55,700 --> 00:11:59,840
Bosch director into Azure and then from

00:11:58,100 --> 00:12:02,840
there I show you how how you continue

00:11:59,840 --> 00:12:04,970
now so this is the template essentially

00:12:02,840 --> 00:12:08,000
the template has a set of parameters

00:12:04,970 --> 00:12:11,180
where you can specify things like VN

00:12:08,000 --> 00:12:13,100
name prefixes so like the main VMs like

00:12:11,180 --> 00:12:15,500
the test box and the Bosch director get

00:12:13,100 --> 00:12:17,480
the prefix your DNS name will get the

00:12:15,500 --> 00:12:19,550
prefix and things like that those are

00:12:17,480 --> 00:12:21,620
things that are more customizable when

00:12:19,550 --> 00:12:25,000
you take the actual officially released

00:12:21,620 --> 00:12:30,020
ones from the cloud foundry incubator

00:12:25,000 --> 00:12:32,480
then SSH keys for SS aging into the Deaf

00:12:30,020 --> 00:12:36,830
box and things like that and then you

00:12:32,480 --> 00:12:39,440
have a bunch of variables and then it

00:12:36,830 --> 00:12:43,280
starts with resources like network

00:12:39,440 --> 00:12:48,310
security groups that define the firewall

00:12:43,280 --> 00:12:51,500
rules for Azure and then things like

00:12:48,310 --> 00:12:54,920
virtual virtual machines virtual

00:12:51,500 --> 00:12:57,920
networks so of course all that gets into

00:12:54,920 --> 00:13:00,760
a virtual network into which all VMs are

00:12:57,920 --> 00:13:04,220
deployed and so on and so forth and then

00:13:00,760 --> 00:13:06,530
machines and finally the first virtual

00:13:04,220 --> 00:13:09,500
machine that you get is a def box

00:13:06,530 --> 00:13:11,600
essentially so this is the the template

00:13:09,500 --> 00:13:13,730
for a virtual machine it gets the

00:13:11,600 --> 00:13:16,670
default name

00:13:13,730 --> 00:13:18,860
then in the top there is a variable back

00:13:16,670 --> 00:13:20,660
you can specify the VM sizes there you

00:13:18,860 --> 00:13:22,640
to specify the instance types which

00:13:20,660 --> 00:13:25,670
defines how many cores how many memory

00:13:22,640 --> 00:13:28,550
and so on and so forth you get and

00:13:25,670 --> 00:13:30,800
essentially what you do is you take that

00:13:28,550 --> 00:13:32,570
template you don't even need to look at

00:13:30,800 --> 00:13:35,000
that template what you actually need to

00:13:32,570 --> 00:13:37,130
look at is the second file the azure

00:13:35,000 --> 00:13:42,500
deploy parameters file where you can

00:13:37,130 --> 00:13:46,430
fill in your stuff and this data here

00:13:42,500 --> 00:13:49,220
that is from the service principle that

00:13:46,430 --> 00:13:51,650
we created before the tenant ID is the

00:13:49,220 --> 00:13:55,100
ID of the azure active directory the

00:13:51,650 --> 00:13:56,900
client ID is the ID of the service

00:13:55,100 --> 00:13:58,880
principle that we created and then the

00:13:56,900 --> 00:14:01,550
client secret is the password that you

00:13:58,880 --> 00:14:03,320
specified for that one and that is all

00:14:01,550 --> 00:14:05,240
documented in there and once you have

00:14:03,320 --> 00:14:07,580
filled out the template I have filled

00:14:05,240 --> 00:14:10,010
out one year under debug taught Azure

00:14:07,580 --> 00:14:11,660
deployed or parameters dot Jason I'm not

00:14:10,010 --> 00:14:13,940
going to open that up because it

00:14:11,660 --> 00:14:17,180
discloses my subscription IDs and the

00:14:13,940 --> 00:14:19,880
secrets and some things you actually can

00:14:17,180 --> 00:14:22,940
pass them in through shell parameters as

00:14:19,880 --> 00:14:25,220
well if you prefer that but if you have

00:14:22,940 --> 00:14:27,350
that large number of parameters that

00:14:25,220 --> 00:14:29,150
becomes a little bit more of scripting

00:14:27,350 --> 00:14:35,030
effort essentially and what you do then

00:14:29,150 --> 00:14:40,540
is you essentially go there and say

00:14:35,030 --> 00:14:43,940
asher group create marius a PCF summit

00:14:40,540 --> 00:14:47,470
life so that's the resource group it

00:14:43,940 --> 00:14:50,690
gets a default location north europe

00:14:47,470 --> 00:14:54,200
enter and then you create a deployment

00:14:50,690 --> 00:14:58,090
based on that based on that template

00:14:54,200 --> 00:15:02,870
with the appropriate parameters file so

00:14:58,090 --> 00:15:06,050
out thanks let's go to quiet hours here

00:15:02,870 --> 00:15:11,290
so and then you say as your group

00:15:06,050 --> 00:15:14,270
deployment create and then you give it

00:15:11,290 --> 00:15:20,480
the resource group that we just created

00:15:14,270 --> 00:15:24,910
maria SCP CF summit life template file a

00:15:20,480 --> 00:15:26,700
sure deploy tour chasing parameters file

00:15:24,910 --> 00:15:31,050
file and

00:15:26,700 --> 00:15:32,460
EPOC don't azor azor deploy the

00:15:31,050 --> 00:15:35,850
parameters and then it gets the

00:15:32,460 --> 00:15:39,840
deployment name ZF summit deployment 0 1

00:15:35,850 --> 00:15:44,520
enter and that starts the deployment of

00:15:39,840 --> 00:15:46,770
the of the def box and the posh director

00:15:44,520 --> 00:15:49,920
actually for the posh director there is

00:15:46,770 --> 00:15:51,990
a parameter so it deploys multiple

00:15:49,920 --> 00:15:53,820
resources in parallel for the posh

00:15:51,990 --> 00:15:55,770
director there is a parameter in the

00:15:53,820 --> 00:15:58,860
template that says how to deploy wash

00:15:55,770 --> 00:16:00,750
that is disabled by default so from a

00:15:58,860 --> 00:16:02,960
learning experience that is what I would

00:16:00,750 --> 00:16:06,480
suggest to do from a production

00:16:02,960 --> 00:16:09,570
experience I would kind of automate the

00:16:06,480 --> 00:16:11,310
entire flow and then just go to bed and

00:16:09,570 --> 00:16:14,400
them the next day or morning you'll have

00:16:11,310 --> 00:16:14,910
your ZF cluster running auto for a

00:16:14,400 --> 00:16:19,080
coffee

00:16:14,910 --> 00:16:22,230
so that runs then after you have done

00:16:19,080 --> 00:16:25,650
what you can do is SSH into the death

00:16:22,230 --> 00:16:28,440
box so this is what I have done here so

00:16:25,650 --> 00:16:32,790
that is my death box CF simple so that

00:16:28,440 --> 00:16:35,130
is just my existing my existing

00:16:32,790 --> 00:16:37,140
deployment and by default we have

00:16:35,130 --> 00:16:41,100
configured the arm templates in a way

00:16:37,140 --> 00:16:44,520
that they are working on Ubuntu LTS 1404

00:16:41,100 --> 00:16:47,220
so that is what we have here and when

00:16:44,520 --> 00:16:48,900
you when that deployment that I just

00:16:47,220 --> 00:16:52,740
started is complete that what you get

00:16:48,900 --> 00:16:56,220
essentially is a directory with a deploy

00:16:52,740 --> 00:16:59,520
Bosch shell script so that is then if

00:16:56,220 --> 00:17:02,550
you selected auto deploy push you don't

00:16:59,520 --> 00:17:05,190
need to excute that if you have disabled

00:17:02,550 --> 00:17:08,400
or to deploy posh what you need to do is

00:17:05,190 --> 00:17:11,100
like run that script so that is what I

00:17:08,400 --> 00:17:13,020
did here and that deploys your posh

00:17:11,100 --> 00:17:17,339
director using Bosch

00:17:13,020 --> 00:17:19,440
so that runs then for a while since it's

00:17:17,339 --> 00:17:22,650
downloading stem cells and the likes

00:17:19,440 --> 00:17:25,050
from Central CF repositories and puts

00:17:22,650 --> 00:17:28,110
them into Azure storage from where it

00:17:25,050 --> 00:17:31,470
can then deploy virtual machines after

00:17:28,110 --> 00:17:34,260
you have done that what you can do is

00:17:31,470 --> 00:17:37,140
deploy Bosh so for that there is a

00:17:34,260 --> 00:17:39,270
second script so let's go back to the

00:17:37,140 --> 00:17:40,590
active window which is called deploy

00:17:39,270 --> 00:17:43,710
cloud foundry

00:17:40,590 --> 00:17:48,840
and then before you do that what you

00:17:43,710 --> 00:17:53,220
would need to do is look at look at a

00:17:48,840 --> 00:17:56,460
Bosch yamo file which would define the

00:17:53,220 --> 00:17:58,950
cluster setup for cloud foundry so what

00:17:56,460 --> 00:18:02,490
we do with the QuickStart samples is we

00:17:58,950 --> 00:18:04,649
like look at the azure arm template and

00:18:02,490 --> 00:18:07,919
the parameters that have been passed

00:18:04,649 --> 00:18:11,070
into that and we generate a ba Shyama

00:18:07,919 --> 00:18:14,309
file that matches the parameters that

00:18:11,070 --> 00:18:17,610
you specified in the in the original arm

00:18:14,309 --> 00:18:19,950
template so and we have then two

00:18:17,610 --> 00:18:22,799
manifests that we generate for the

00:18:19,950 --> 00:18:25,470
QuickStart one which works with a single

00:18:22,799 --> 00:18:28,139
worker CF note and the other one which

00:18:25,470 --> 00:18:31,379
works with multi-record CF not so

00:18:28,139 --> 00:18:34,889
multiple VM CF that's a standard portion

00:18:31,379 --> 00:18:37,200
o file at the end of the day where

00:18:34,889 --> 00:18:40,889
everything including the director UUID

00:18:37,200 --> 00:18:44,399
and everything is like prefilled if you

00:18:40,889 --> 00:18:46,379
want so the IP address ranges those are

00:18:44,399 --> 00:18:48,509
those which have been defined in the arm

00:18:46,379 --> 00:18:50,070
template so when you take the native

00:18:48,509 --> 00:18:52,019
templates from the Cloud Foundry

00:18:50,070 --> 00:18:53,730
incubator projects these are additional

00:18:52,019 --> 00:18:56,669
parameters that you would need to take

00:18:53,730 --> 00:18:58,919
care of well and after you have that

00:18:56,669 --> 00:19:01,559
deploy push running you have your CF

00:18:58,919 --> 00:19:04,830
cluster running in Azure and you can

00:19:01,559 --> 00:19:08,809
start managing it with the CFCA line and

00:19:04,830 --> 00:19:08,809
that runs then in a single adder region

00:19:09,200 --> 00:19:15,980
so if there are questions I would like

00:19:12,539 --> 00:19:20,820
to defer them to the end of the session

00:19:15,980 --> 00:19:24,690
since since the time is fairly tight and

00:19:20,820 --> 00:19:27,720
we have still two more sections to go so

00:19:24,690 --> 00:19:29,879
next one a sure oh and cloud foundry in

00:19:27,720 --> 00:19:31,470
a private cloud so what you have seen

00:19:29,879 --> 00:19:35,220
now is Asscher in the public cloud

00:19:31,470 --> 00:19:36,990
that's across those 30 plus regions in

00:19:35,220 --> 00:19:39,690
Europe for example it's Amsterdam and

00:19:36,990 --> 00:19:42,119
and Ireland where we have those mega

00:19:39,690 --> 00:19:44,009
data centers but what if you want to run

00:19:42,119 --> 00:19:46,139
that in your own data center with the

00:19:44,009 --> 00:19:49,169
same templates with the same management

00:19:46,139 --> 00:19:50,970
principles and that is something where

00:19:49,169 --> 00:19:52,950
we made some some rather big

00:19:50,970 --> 00:19:54,150
announcements earlier this year and also

00:19:52,950 --> 00:19:58,200
yesterday at

00:19:54,150 --> 00:20:01,020
ignite which is a sure stack so when you

00:19:58,200 --> 00:20:03,419
look at cloud platforms in general that

00:20:01,020 --> 00:20:05,340
provides you infrastructure as a service

00:20:03,419 --> 00:20:07,200
platform as a service and software as a

00:20:05,340 --> 00:20:10,230
service the high level architecture

00:20:07,200 --> 00:20:12,600
always looks kind of like that very

00:20:10,230 --> 00:20:15,090
simplified of course right so you have

00:20:12,600 --> 00:20:18,659
some management tools and portals you

00:20:15,090 --> 00:20:21,179
have application deployment model like

00:20:18,659 --> 00:20:23,909
as a resource manager in case of a sure

00:20:21,179 --> 00:20:25,740
you have the foundation and you have a

00:20:23,909 --> 00:20:29,549
fabric controller which manages

00:20:25,740 --> 00:20:31,590
everything now we have that in the

00:20:29,549 --> 00:20:34,620
public cloud and what we are doing with

00:20:31,590 --> 00:20:37,020
Azure stack is porting that back to

00:20:34,620 --> 00:20:40,679
enable you to run it in your own data

00:20:37,020 --> 00:20:42,899
centers but not just the infrastructure

00:20:40,679 --> 00:20:45,480
but also the services that are running

00:20:42,899 --> 00:20:50,850
on top of that infrastructure so it's

00:20:45,480 --> 00:20:53,429
not that we just give you the like the

00:20:50,850 --> 00:20:56,730
the Azure environment that would kind of

00:20:53,429 --> 00:20:59,100
be similar like OpenStack in your own

00:20:56,730 --> 00:21:01,529
data centers what we give you is Asscher

00:20:59,100 --> 00:21:05,610
in your own data centers not with all

00:21:01,529 --> 00:21:08,309
services yet but our plan is to have as

00:21:05,610 --> 00:21:10,409
much parity as we can have so that we

00:21:08,309 --> 00:21:13,529
can give customers and partners as many

00:21:10,409 --> 00:21:16,529
options as as possible

00:21:13,529 --> 00:21:19,110
the management experience the scripting

00:21:16,529 --> 00:21:22,169
experience the management API are the

00:21:19,110 --> 00:21:26,220
same for both Azure stack is currently

00:21:22,169 --> 00:21:28,950
in a public preview actually its preview

00:21:26,220 --> 00:21:30,440
to that we technical preview to that we

00:21:28,950 --> 00:21:34,529
currently have available and we are

00:21:30,440 --> 00:21:38,610
planning to launch it around mid 2017

00:21:34,529 --> 00:21:41,730
so now that said this is like high level

00:21:38,610 --> 00:21:44,549
view of paths and IAS services in Azure

00:21:41,730 --> 00:21:47,070
just to give you an expression this is

00:21:44,549 --> 00:21:49,140
the beginning of a journey so azure

00:21:47,070 --> 00:21:51,990
stack when it will ship will not have

00:21:49,140 --> 00:21:55,830
all the paths and IAS services available

00:21:51,990 --> 00:21:58,440
just those where we get most feedback

00:21:55,830 --> 00:22:00,299
from our customer base that we should

00:21:58,440 --> 00:22:02,010
prioritize those services at the end of

00:22:00,299 --> 00:22:04,470
the day virtual machines virtual

00:22:02,010 --> 00:22:06,720
networking and and all that stuff that

00:22:04,470 --> 00:22:09,049
is needed for Cloud Foundry will be

00:22:06,720 --> 00:22:09,049
there

00:22:09,180 --> 00:22:15,780
so what does it mean for Cloud Foundry

00:22:13,200 --> 00:22:19,170
on a sure so essentially what we have

00:22:15,780 --> 00:22:22,170
seen are those arm templates so these

00:22:19,170 --> 00:22:24,960
templates to deploy portion to Bosch

00:22:22,170 --> 00:22:26,880
director in Azure public cloud what we

00:22:24,960 --> 00:22:29,160
are currently working on since Asher

00:22:26,880 --> 00:22:32,910
stack has a bunch of limitations with

00:22:29,160 --> 00:22:35,610
regards to those api api's arm api isn't

00:22:32,910 --> 00:22:38,190
with that also the template functions

00:22:35,610 --> 00:22:41,670
that it supports today we are back

00:22:38,190 --> 00:22:44,250
porting the arm templates that we have

00:22:41,670 --> 00:22:46,770
for cloud foundry available today as

00:22:44,250 --> 00:22:49,950
part of the cloud foundry incubator make

00:22:46,770 --> 00:22:52,080
sure that we only use the API surface

00:22:49,950 --> 00:22:54,360
that is available in Azure stack and

00:22:52,080 --> 00:22:56,580
then we'll as soon as we have that done

00:22:54,360 --> 00:22:59,730
we'll publish it on our github

00:22:56,580 --> 00:23:02,430
repository with the QuickStart samples

00:22:59,730 --> 00:23:05,790
as well as the Cloud Foundry incubator

00:23:02,430 --> 00:23:07,890
as well and then deploying Cloud Foundry

00:23:05,790 --> 00:23:10,470
on a private cloud either stack

00:23:07,890 --> 00:23:12,660
environment would be exactly the same

00:23:10,470 --> 00:23:15,720
what I just explained because the boss

00:23:12,660 --> 00:23:17,880
CPI that goes against arm API switch are

00:23:15,720 --> 00:23:20,670
pretty common for both platforms so we

00:23:17,880 --> 00:23:22,620
don't have a lot to do there but on the

00:23:20,670 --> 00:23:24,930
template side of the house we used a lot

00:23:22,620 --> 00:23:27,990
of convenient functions that make it

00:23:24,930 --> 00:23:30,720
easier to offer the templates which are

00:23:27,990 --> 00:23:32,670
not yet there on the azure stack so

00:23:30,720 --> 00:23:35,790
there are some examples on the deck of

00:23:32,670 --> 00:23:37,380
that as soon as that is available you'll

00:23:35,790 --> 00:23:39,480
find it on our public github

00:23:37,380 --> 00:23:43,230
repositories and that is kind of our

00:23:39,480 --> 00:23:46,710
private cloud story when it comes to

00:23:43,230 --> 00:23:49,110
Cloud Foundry but I would like to expand

00:23:46,710 --> 00:23:51,180
that story by looking at two real-world

00:23:49,110 --> 00:23:53,880
deployments that we have implemented

00:23:51,180 --> 00:23:58,020
with partners which are cross cloud

00:23:53,880 --> 00:24:00,150
cross region deployments and then put

00:23:58,020 --> 00:24:02,790
that back into the context of hybrid as

00:24:00,150 --> 00:24:05,040
well because hybrid deployments and

00:24:02,790 --> 00:24:06,480
private cloud does not necessarily mean

00:24:05,040 --> 00:24:08,580
that you have as you're running in your

00:24:06,480 --> 00:24:10,740
data center and we know that and we want

00:24:08,580 --> 00:24:13,770
to enable all sorts of hybrid scenarios

00:24:10,740 --> 00:24:15,600
not just the one where you have a stack

00:24:13,770 --> 00:24:18,420
running in your own data center actually

00:24:15,600 --> 00:24:20,520
we assume that it will take a while till

00:24:18,420 --> 00:24:21,090
we have customers running Azure stack so

00:24:20,520 --> 00:24:22,740
the reality

00:24:21,090 --> 00:24:25,290
we'll be that most of them won't have a

00:24:22,740 --> 00:24:27,990
stack anyways in their data center so we

00:24:25,290 --> 00:24:30,990
are looking at at those scenarios

00:24:27,990 --> 00:24:33,390
actually even more as we talk as we are

00:24:30,990 --> 00:24:35,730
talking about today so and I think

00:24:33,390 --> 00:24:37,830
globally distributed environments are a

00:24:35,730 --> 00:24:40,800
very good example of that because they

00:24:37,830 --> 00:24:43,650
put you from an architectural point to

00:24:40,800 --> 00:24:45,960
an edge that will for sure enable you to

00:24:43,650 --> 00:24:47,550
implement the same thing with the public

00:24:45,960 --> 00:24:50,430
private cloud setup because that's gonna

00:24:47,550 --> 00:24:51,630
be a little bit more easy or easier at

00:24:50,430 --> 00:24:54,530
the end of the day and that is the

00:24:51,630 --> 00:24:57,890
reason why I added that section so now

00:24:54,530 --> 00:24:59,970
when you run globally distributed

00:24:57,890 --> 00:25:02,280
environments and in our case we were

00:24:59,970 --> 00:25:03,750
working with free globalised three

00:25:02,280 --> 00:25:06,360
partners over the careers of the past

00:25:03,750 --> 00:25:08,490
eight months to implement different

00:25:06,360 --> 00:25:12,300
types of distributed Cloud Foundry

00:25:08,490 --> 00:25:17,130
deployments on Azure all three of them

00:25:12,300 --> 00:25:20,160
were pretty large enterprises and when

00:25:17,130 --> 00:25:21,750
you look at a distributed cluster there

00:25:20,160 --> 00:25:24,180
are different ways how you can achieve

00:25:21,750 --> 00:25:26,370
things and depending on what

00:25:24,180 --> 00:25:28,890
requirements you have especially in

00:25:26,370 --> 00:25:31,800
terms of recovery point objectives and

00:25:28,890 --> 00:25:36,300
recovery time objectives you might want

00:25:31,800 --> 00:25:38,760
to take certain compromises or not but

00:25:36,300 --> 00:25:41,700
then live with an increased level of

00:25:38,760 --> 00:25:44,280
complexity so that is always the

00:25:41,700 --> 00:25:46,410
conversation that I would suggest anyone

00:25:44,280 --> 00:25:48,930
should have before you jump into

00:25:46,410 --> 00:25:51,750
something like what I'm presenting here

00:25:48,930 --> 00:25:53,400
right now because if I would stand here

00:25:51,750 --> 00:25:56,220
and say are things are getting easier

00:25:53,400 --> 00:26:00,540
with that I would be wrong right I mean

00:25:56,220 --> 00:26:03,630
we know this will increase complexity so

00:26:00,540 --> 00:26:06,660
essentially the options that I have seen

00:26:03,630 --> 00:26:08,040
are two main options one is a little bit

00:26:06,660 --> 00:26:10,170
easier the other one is a little bit

00:26:08,040 --> 00:26:12,510
more complex the first one that I've

00:26:10,170 --> 00:26:15,180
came across is like running two separate

00:26:12,510 --> 00:26:17,820
individual Cloud Foundry clusters across

00:26:15,180 --> 00:26:20,940
to Azure regions or an azure region and

00:26:17,820 --> 00:26:23,160
another cloud provider there that is

00:26:20,940 --> 00:26:25,290
easy because you manage those CF

00:26:23,160 --> 00:26:27,540
environments pretty individual from each

00:26:25,290 --> 00:26:30,360
other you don't need to really connect

00:26:27,540 --> 00:26:33,120
the networks or not for the sake of the

00:26:30,360 --> 00:26:34,980
Cloud Foundry cluster at least and from

00:26:33,120 --> 00:26:37,740
that perspective that's easy to do that

00:26:34,980 --> 00:26:39,330
works well for cloud native applications

00:26:37,740 --> 00:26:42,000
which are stateless which are

00:26:39,330 --> 00:26:44,160
outsourcing state to some third party

00:26:42,000 --> 00:26:47,730
services but if you run everything

00:26:44,160 --> 00:26:50,510
inside the cluster then that deployment

00:26:47,730 --> 00:26:52,770
topology might not be appropriate or

00:26:50,510 --> 00:26:54,630
fulfill your requirements so the other

00:26:52,770 --> 00:26:57,960
option is the hot one which is running a

00:26:54,630 --> 00:26:59,549
single CF cluster across two regions and

00:26:57,960 --> 00:27:02,730
we are going to look at both of them

00:26:59,549 --> 00:27:05,309
from the azure perspective so here I

00:27:02,730 --> 00:27:06,990
have put together a little sketch of

00:27:05,309 --> 00:27:08,700
what we have worked have been working

00:27:06,990 --> 00:27:12,049
with one of those globalize which that's

00:27:08,700 --> 00:27:14,040
the separate CF cluster deployment

00:27:12,049 --> 00:27:16,770
essentially in green you see an azure

00:27:14,040 --> 00:27:18,809
region inside of the azure region in the

00:27:16,770 --> 00:27:22,200
customer subscription we deploy the V

00:27:18,809 --> 00:27:23,940
net so the V net essentially groups all

00:27:22,200 --> 00:27:28,740
the machines inside of the region

00:27:23,940 --> 00:27:32,460
together so that is one part of the

00:27:28,740 --> 00:27:35,010
story then there is the other region and

00:27:32,460 --> 00:27:37,380
in the other region you again have the

00:27:35,010 --> 00:27:43,380
Cloud Foundry cluster running individual

00:27:37,380 --> 00:27:45,570
on its own so for the cluster what we

00:27:43,380 --> 00:27:48,030
have here is we have different groups of

00:27:45,570 --> 00:27:50,790
virtual machines which we group together

00:27:48,030 --> 00:27:52,650
in what we call as your availability set

00:27:50,790 --> 00:27:55,140
an availability set in Azure is a

00:27:52,650 --> 00:27:58,980
concept that allows you to group

00:27:55,140 --> 00:28:02,669
machines together which must not fail or

00:27:58,980 --> 00:28:04,710
be down at the same time like because of

00:28:02,669 --> 00:28:07,860
a failure or an update or whatsoever

00:28:04,710 --> 00:28:10,260
with that the azure trial the azure

00:28:07,860 --> 00:28:12,900
fabric controller makes sure that those

00:28:10,260 --> 00:28:15,059
machines are deployed across different

00:28:12,900 --> 00:28:17,130
fault domains in Azure a fault domain is

00:28:15,059 --> 00:28:19,679
depending on how the data center is

00:28:17,130 --> 00:28:21,690
deployed if it's a rack deployed data

00:28:19,679 --> 00:28:23,760
center the full domain is a rack because

00:28:21,690 --> 00:28:25,500
the rack has a top of rack router which

00:28:23,760 --> 00:28:27,929
connects all machines of the rack to the

00:28:25,500 --> 00:28:29,750
rest of the data center that's a little

00:28:27,929 --> 00:28:32,940
bit simplified but essentially that's

00:28:29,750 --> 00:28:35,850
that explains the concept so if you put

00:28:32,940 --> 00:28:37,679
VMs in an availability set in Azure the

00:28:35,850 --> 00:28:39,330
fabric controller makes sure that the

00:28:37,679 --> 00:28:41,250
machines do not get deployed on the

00:28:39,330 --> 00:28:44,040
virtual machines to not get deployed on

00:28:41,250 --> 00:28:47,340
on the same rack so we have that here

00:28:44,040 --> 00:28:48,720
for a reverse proxy which that customer

00:28:47,340 --> 00:28:50,549
needed for certain orphan

00:28:48,720 --> 00:28:52,919
education scenarios so essentially they

00:28:50,549 --> 00:28:54,720
pulled authentication out of Cloud

00:28:52,919 --> 00:28:57,419
Foundry into their own infrastructure

00:28:54,720 --> 00:29:00,450
and then we have an availability set for

00:28:57,419 --> 00:29:03,720
the Cloud Foundry cluster resources and

00:29:00,450 --> 00:29:07,080
finally for some other external storage

00:29:03,720 --> 00:29:09,809
resources like my sequel now what they

00:29:07,080 --> 00:29:11,669
did then is they had a cross region

00:29:09,809 --> 00:29:13,650
connectivity but not for the sake of

00:29:11,669 --> 00:29:16,429
Cloud Foundry but more for the sake of

00:29:13,650 --> 00:29:20,730
syncing the my sequel cluster underneath

00:29:16,429 --> 00:29:22,789
and the game fire cluster underneath

00:29:20,730 --> 00:29:27,960
which did run outside of Cloud Foundry

00:29:22,789 --> 00:29:29,549
in in this case so and then the final

00:29:27,960 --> 00:29:32,400
thing that you need to do is put a

00:29:29,549 --> 00:29:34,770
global traffic manager on top so that's

00:29:32,400 --> 00:29:39,240
the azure traffic manager which is a DNS

00:29:34,770 --> 00:29:41,700
based routing routing which can route

00:29:39,240 --> 00:29:44,880
traffic to one or the other region based

00:29:41,700 --> 00:29:48,539
on load balancing probes health checks

00:29:44,880 --> 00:29:51,150
and the lights so that is one kind of

00:29:48,539 --> 00:29:53,159
deployment that would go pretty much of

00:29:51,150 --> 00:29:55,260
what we have seen before like you deploy

00:29:53,159 --> 00:29:56,640
the individual clusters like we have

00:29:55,260 --> 00:29:58,559
done it before and then you're pretty

00:29:56,640 --> 00:30:01,530
much done and then you set up the cross

00:29:58,559 --> 00:30:05,190
region v-net the other one is exactly

00:30:01,530 --> 00:30:07,710
the same except that we again have to

00:30:05,190 --> 00:30:10,169
run certain resources outside of Cloud

00:30:07,710 --> 00:30:12,840
Foundry and I'm getting back to that but

00:30:10,169 --> 00:30:15,900
we had one single Cloud Foundry cluster

00:30:12,840 --> 00:30:18,510
running across regions and in that case

00:30:15,900 --> 00:30:20,510
what you see in red are the resources

00:30:18,510 --> 00:30:23,520
that are used by Cloud Foundry

00:30:20,510 --> 00:30:26,250
themselves to itself to manage its

00:30:23,520 --> 00:30:28,080
configuration for example Cloud Foundry

00:30:26,250 --> 00:30:31,710
has the concept of a configuration

00:30:28,080 --> 00:30:35,580
database called ccdb or a user accounts

00:30:31,710 --> 00:30:38,039
database called UA ADB and those are by

00:30:35,580 --> 00:30:41,130
default if you take the default llamÃ³

00:30:38,039 --> 00:30:43,890
file they are stored as part of nodes

00:30:41,130 --> 00:30:46,200
inside of the Cloud Foundry cluster if

00:30:43,890 --> 00:30:48,840
you want to operate a single cluster

00:30:46,200 --> 00:30:51,120
across region that doesn't work because

00:30:48,840 --> 00:30:53,159
Cloud Foundry does not give you a lot of

00:30:51,120 --> 00:30:55,169
control in terms of how to structure

00:30:53,159 --> 00:30:57,750
those databases in terms of how they run

00:30:55,169 --> 00:30:59,940
inside of the cluster but for across

00:30:57,750 --> 00:31:01,409
region deployment you need that control

00:30:59,940 --> 00:31:02,370
because you want to replicate them

00:31:01,409 --> 00:31:05,100
depending on the

00:31:02,370 --> 00:31:08,100
po1 RTO that you need to fulfill so we

00:31:05,100 --> 00:31:10,770
had to pull them out run them as cross

00:31:08,100 --> 00:31:13,020
reaching clusters in separate virtual

00:31:10,770 --> 00:31:15,030
machines or use third party pass

00:31:13,020 --> 00:31:17,780
services like clear DP which is my

00:31:15,030 --> 00:31:22,170
sequel as a service on Azure and

00:31:17,780 --> 00:31:23,970
outsource the configuration to those to

00:31:22,170 --> 00:31:26,640
those services rather than running them

00:31:23,970 --> 00:31:29,160
inside of the CF cluster the other thing

00:31:26,640 --> 00:31:31,110
that we had to do is like modify the the

00:31:29,160 --> 00:31:34,490
Boshy amo file for the Cloud Foundry

00:31:31,110 --> 00:31:37,470
cluster to make sure to have different

00:31:34,490 --> 00:31:39,990
cluster resources for the different

00:31:37,470 --> 00:31:43,230
zones so let me show you what I mean by

00:31:39,990 --> 00:31:46,890
that so now that is actually the next

00:31:43,230 --> 00:31:52,100
demo already so I'm picking that up from

00:31:46,890 --> 00:31:56,130
so now when I look at visual studio code

00:31:52,100 --> 00:31:58,200
here on the left hand side I have a

00:31:56,130 --> 00:32:00,750
llamo file for a cross reaching Cloud

00:31:58,200 --> 00:32:02,790
Foundry cluster on the right hand side I

00:32:00,750 --> 00:32:07,980
have the ordinary cluster so let's

00:32:02,790 --> 00:32:10,170
search for ccdb so in that case that is

00:32:07,980 --> 00:32:12,600
the configuration that how it looks like

00:32:10,170 --> 00:32:17,490
when ccdb runs inside of the Cloud

00:32:12,600 --> 00:32:19,440
Foundry cluster so there must be so DB

00:32:17,490 --> 00:32:21,360
scheme so it's using Postgres and it's

00:32:19,440 --> 00:32:26,040
running directly inside of the cluster

00:32:21,360 --> 00:32:29,010
so here CC DB here what we see is an

00:32:26,040 --> 00:32:31,500
external IP address or an IP address in

00:32:29,010 --> 00:32:33,990
across region V net that has the

00:32:31,500 --> 00:32:37,110
external my sequel cluster running so

00:32:33,990 --> 00:32:40,110
that is the easy part the trickier part

00:32:37,110 --> 00:32:44,690
is the NFS server that Cloud Foundry

00:32:40,110 --> 00:32:47,600
uses for the storage aspects because

00:32:44,690 --> 00:32:50,429
here on the right hand side it just

00:32:47,600 --> 00:32:52,920
deploys an NFS server inside of the

00:32:50,429 --> 00:32:55,530
cluster whereas on the left-hand side we

00:32:52,920 --> 00:32:59,790
had to specify an external or NFS

00:32:55,530 --> 00:33:02,370
cluster with its IP address now that's

00:32:59,790 --> 00:33:04,860
easy right but you have to run NFS cross

00:33:02,370 --> 00:33:07,470
region so that is what you need to do

00:33:04,860 --> 00:33:09,720
things like running NFS nodes in one

00:33:07,470 --> 00:33:11,730
side and on the other connecting them

00:33:09,720 --> 00:33:14,640
with the RPD and things like that

00:33:11,730 --> 00:33:16,169
and currently I have all of that work in

00:33:14,640 --> 00:33:20,190
progress on my

00:33:16,169 --> 00:33:24,559
get up repository MSG cool as your

00:33:20,190 --> 00:33:24,559
QuickStart templates but not this one

00:33:25,279 --> 00:33:39,289
so we're um

00:33:31,679 --> 00:33:43,950
pashya Bosch cross wash CF cross region

00:33:39,289 --> 00:33:46,289
where I actually have scripts for the

00:33:43,950 --> 00:33:49,679
foundation that are automatically

00:33:46,289 --> 00:33:51,690
deploying things like a Mario typically

00:33:49,679 --> 00:33:55,470
era cluster across two regions so that

00:33:51,690 --> 00:33:57,299
is here the chump box install Maria DB

00:33:55,470 --> 00:33:58,710
cluster and everything so you can have a

00:33:57,299 --> 00:34:01,379
look at that probably you are more

00:33:58,710 --> 00:34:03,330
experienced impassionate I am but this

00:34:01,379 --> 00:34:06,330
is what we are currently working on and

00:34:03,330 --> 00:34:08,879
open sourcing as well to enable these

00:34:06,330 --> 00:34:11,399
kind of deployments right so that is one

00:34:08,879 --> 00:34:13,980
part of course but the other part of

00:34:11,399 --> 00:34:16,169
such an architecture is one side could

00:34:13,980 --> 00:34:17,339
sit in another cloud provider and when

00:34:16,169 --> 00:34:20,399
you think of the really large

00:34:17,339 --> 00:34:24,089
enterprises they most often want to

00:34:20,399 --> 00:34:25,950
follow a multi cloud vendor strategy so

00:34:24,089 --> 00:34:27,720
they would like to have for example one

00:34:25,950 --> 00:34:29,339
thing running in Azure and the other one

00:34:27,720 --> 00:34:35,399
running in their own data center or an

00:34:29,339 --> 00:34:37,109
AWS and unfortunately time is a little

00:34:35,399 --> 00:34:40,290
bit tight so I won't be able to show

00:34:37,109 --> 00:34:42,750
that anymore but I can actually and I

00:34:40,290 --> 00:34:45,629
will blog about it so you can read read

00:34:42,750 --> 00:34:48,750
about it after the the conference so my

00:34:45,629 --> 00:34:50,909
blog is blog dot M is equal comm you'll

00:34:48,750 --> 00:34:53,809
find it there today or tomorrow let's

00:34:50,909 --> 00:35:00,030
say tomorrow what I have configured here

00:34:53,809 --> 00:35:03,059
in my Asscher subscription is a so when

00:35:00,030 --> 00:35:05,430
you look at this year so the deployment

00:35:03,059 --> 00:35:07,650
is one part the DNS based routing is

00:35:05,430 --> 00:35:11,640
another one so what I have configured

00:35:07,650 --> 00:35:16,859
here in my subscription under CF region

00:35:11,640 --> 00:35:20,099
foundations is a Traffic Manager just to

00:35:16,859 --> 00:35:24,150
showcase the hybrid aspect a Traffic

00:35:20,099 --> 00:35:27,720
Manager policy that indeed includes both

00:35:24,150 --> 00:35:29,580
when I look at the endpoints a pivotal

00:35:27,720 --> 00:35:34,980
based deployment with

00:35:29,580 --> 00:35:38,180
runs in pivotal zone cloud versus an

00:35:34,980 --> 00:35:41,250
azure base deployment which runs in

00:35:38,180 --> 00:35:43,860
Azure in the CF cluster the iron i've

00:35:41,250 --> 00:35:47,880
actually deployed and that one gives me

00:35:43,860 --> 00:35:50,640
a single end point for both of those

00:35:47,880 --> 00:35:53,370
deployments yeah I don't wanna submit

00:35:50,640 --> 00:35:57,180
anything so let's copy that that's the

00:35:53,370 --> 00:35:59,430
Apple Nasher what I plan to do in the

00:35:57,180 --> 00:36:01,710
session is like stop the Apple natural

00:35:59,430 --> 00:36:03,660
and then after two or three minutes we

00:36:01,710 --> 00:36:06,600
would fall back to pivotal and that is a

00:36:03,660 --> 00:36:10,560
very good example where you have cross

00:36:06,600 --> 00:36:13,950
cloud provider high availability with

00:36:10,560 --> 00:36:16,530
actually two different Cloud Foundry

00:36:13,950 --> 00:36:19,050
clusters running between Azure and the

00:36:16,530 --> 00:36:22,620
different cloud I promise you I'll have

00:36:19,050 --> 00:36:25,380
that block out before September 30th and

00:36:22,620 --> 00:36:27,570
then you can read about it and we start

00:36:25,380 --> 00:36:29,790
actually I think I I should stop now

00:36:27,570 --> 00:36:31,930
right I'm talking too much thank you so

00:36:29,790 --> 00:36:36,660
much I hope that was interesting

00:36:31,930 --> 00:36:36,660

YouTube URL: https://www.youtube.com/watch?v=D_FwnOJjZtk


