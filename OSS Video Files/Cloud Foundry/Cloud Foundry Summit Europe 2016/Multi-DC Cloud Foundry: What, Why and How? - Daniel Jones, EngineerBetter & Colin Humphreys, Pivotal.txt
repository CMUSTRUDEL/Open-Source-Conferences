Title: Multi-DC Cloud Foundry: What, Why and How? - Daniel Jones, EngineerBetter & Colin Humphreys, Pivotal
Publication date: 2016-09-30
Playlist: Cloud Foundry Summit Europe 2016
Description: 
	Multi-DC Cloud Foundry: What, Why and How? - Daniel Jones, EngineerBetter & Colin Humphreys, Pivotal

What are the fundamental choices that need to be made when running Cloud Foundry in more than one data centre, and what tools can help operators deal with the compromises that CAP theorem enforces? In this talk Colin Humphreys details the deployment models of Cloud Foundry, and explains that whilst it’s possible to keep apps running and available in a multi-data centre deployment, operators face a compromise of increased operational overhead if they want to be able to continue changing the state of their PaaS in the event of an outage. Daniel Jones then shows some of the open source tooling that helps manage the operational complexity required by those wishing to operate a highly-available multi-data centre Cloud Foundry installation.

About Colin Humphreys
As CTO for Cloud at Pivotal, Colin Humphreys is responsible for the company’s big picture strategy and roadmap for our cloud platform offerings. Colin joins Pivotal from its acquisition of CloudCredo, where Colin was co-founder and CEO. Colin led the installation of the first SLA-driven production Cloud Foundry deployment, delivers tooling to the Cloud Foundry community, and is a regular conference speaker on PaaS-related topics. He also organises the London PaaS User Group, and is passionate about “Infrastructure as Code”, “Continuous Delivery”, “Devops”, and “Agile Testing”. Colin has spent the last 15 years sitting on the fence between development and operations, delivering solutions for eBay, Volkswagen, Paypal, Cineworld, and others.

About Daniel Jones
Daniel Jones is CTO of UK Cloud Foundry consultancy EngineerBetter. He has recently been operating and supporting multiple production CF instances at a global wealth management enterprise, and helping an IoT tech startup build their platform atop CF. Daniel was a member of the Pivotal CF London Services team, and also worked with Europe's leading CF consultancy CloudCredo. Daniel has spoken at CF Summit Santa Clara 2016, CF Summit Berlin 2015 and the London PaaS User Group, as well as numerous video games industry conferences. He once even stormed the stage at a music festival to interrupt the performing act and challenge their questionable off-stage conduct!
Captions: 
	00:00:00,030 --> 00:00:07,049
hello everyone welcome thank you all

00:00:03,689 --> 00:00:09,660
very much for coming this talk is about

00:00:07,049 --> 00:00:11,550
multi data center Cloud Foundry if

00:00:09,660 --> 00:00:13,679
you're in the wrong room

00:00:11,550 --> 00:00:15,920
leave now because I'm gonna lock the

00:00:13,679 --> 00:00:18,029
doors who won't let you out after now

00:00:15,920 --> 00:00:20,520
thank you very much again for coming

00:00:18,029 --> 00:00:23,130
quick introductions

00:00:20,520 --> 00:00:25,650
my name is Khalid Humphries I'm CTO for

00:00:23,130 --> 00:00:28,470
cloud pivotal all that and you've

00:00:25,650 --> 00:00:29,939
introduced himself hello i'm daniel

00:00:28,470 --> 00:00:32,510
Jones CTO of engineer better

00:00:29,939 --> 00:00:35,640
we're a UK cloud foundry consultancy

00:00:32,510 --> 00:00:38,219
this is the maximum CTO quota per stage

00:00:35,640 --> 00:00:42,059
with her to get more CTO than this we

00:00:38,219 --> 00:00:47,550
explode right we're gonna get started

00:00:42,059 --> 00:00:50,039
with a story so I'm gonna tell a story

00:00:47,550 --> 00:00:55,530
I'm gonna wander round just being

00:00:50,039 --> 00:00:57,239
recorded or it is simply give up me so I

00:00:55,530 --> 00:01:00,780
gotta get started with a story the story

00:00:57,239 --> 00:01:05,309
about my my using so way way back back

00:01:00,780 --> 00:01:08,250
in time for my younger days I got

00:01:05,309 --> 00:01:12,390
involved with a big technology project

00:01:08,250 --> 00:01:14,220
for the UK's largest cinema chain now I

00:01:12,390 --> 00:01:20,850
like a bit of audience interaction here

00:01:14,220 --> 00:01:22,320
so who's been to a cinema most of you

00:01:20,850 --> 00:01:24,000
and the rest of you can't be bothered to

00:01:22,320 --> 00:01:26,070
put your hands up but that's okay now I

00:01:24,000 --> 00:01:28,860
know who's involved in who is him so I

00:01:26,070 --> 00:01:32,490
was helping out the UK's largest cinema

00:01:28,860 --> 00:01:35,729
chain with their requirements and their

00:01:32,490 --> 00:01:42,720
technology so what used to happen back

00:01:35,729 --> 00:01:45,840
in the day is that people used to go to

00:01:42,720 --> 00:01:49,340
the cinema and they would buy tickets

00:01:45,840 --> 00:01:51,780
there and then they would watch a film

00:01:49,340 --> 00:01:53,430
now I know nowadays we have Netflix and

00:01:51,780 --> 00:01:55,979
no one goes to the cinema anymore but

00:01:53,430 --> 00:01:59,040
this used to happen this was a thing so

00:01:55,979 --> 00:02:00,630
people would go to the cinema they'll

00:01:59,040 --> 00:02:03,030
buy ticket that ticket would be for a

00:02:00,630 --> 00:02:05,159
seat they would sit in that seat and

00:02:03,030 --> 00:02:07,710
then they would watch a film we all okay

00:02:05,159 --> 00:02:11,340
with this this is too technical

00:02:07,710 --> 00:02:13,740
good ok ok so they get see now what

00:02:11,340 --> 00:02:17,220
happened was the cinemas they had a

00:02:13,740 --> 00:02:21,000
database and that database would store

00:02:17,220 --> 00:02:22,380
the times the films that were on there

00:02:21,000 --> 00:02:25,770
which seats had been booked for which

00:02:22,380 --> 00:02:27,330
people all that kind of thing but the

00:02:25,770 --> 00:02:30,270
cinema chains noticed that there was

00:02:27,330 --> 00:02:34,100
this thing called the Internet what they

00:02:30,270 --> 00:02:37,230
wanted to do was allow people to book

00:02:34,100 --> 00:02:37,920
cinema seats online wouldn't that be

00:02:37,230 --> 00:02:40,920
amazing

00:02:37,920 --> 00:02:42,450
go online and pick Asilomar see so we

00:02:40,920 --> 00:02:44,130
can become part of the cool new world

00:02:42,450 --> 00:02:45,600
here we're gonna have nuclear powered

00:02:44,130 --> 00:02:46,950
houses it's gonna be amazing

00:02:45,600 --> 00:02:51,000
we're gonna be able to books Itamar

00:02:46,950 --> 00:02:54,030
seats online so I was part of the

00:02:51,000 --> 00:02:57,000
project to do that so we've installed

00:02:54,030 --> 00:02:58,459
some web service and we built them

00:02:57,000 --> 00:03:01,920
amazing website and it was fantastic

00:02:58,459 --> 00:03:04,820
what we did was we connected the cinemas

00:03:01,920 --> 00:03:07,200
to the Internet we connected them with

00:03:04,820 --> 00:03:09,570
ADSL which I'm going to depict as a

00:03:07,200 --> 00:03:13,950
piece of string because that's about how

00:03:09,570 --> 00:03:16,230
reliable it was so this was great and

00:03:13,950 --> 00:03:17,610
everything is going along but ADSL as

00:03:16,230 --> 00:03:19,530
you know isn't the most reliable

00:03:17,610 --> 00:03:22,799
connection so this would happen quite

00:03:19,530 --> 00:03:24,600
often and the cinemas would get

00:03:22,799 --> 00:03:28,430
disconnected and then you couldn't buy

00:03:24,600 --> 00:03:32,390
seats online and then I got shouted at

00:03:28,430 --> 00:03:35,400
thank you very much to PHP CEO for his

00:03:32,390 --> 00:03:36,720
avatar here so I got shouted at by the

00:03:35,400 --> 00:03:41,160
people with all the money and this was

00:03:36,720 --> 00:03:42,330
bad so we had this problem in which you

00:03:41,160 --> 00:03:43,620
could go to the cinema and buy seats and

00:03:42,330 --> 00:03:46,410
that will carry on working but online

00:03:43,620 --> 00:03:49,590
would stop working so you know I was

00:03:46,410 --> 00:03:52,590
young and I knew everything so I thought

00:03:49,590 --> 00:03:57,060
I can fix this I'm super clever so what

00:03:52,590 --> 00:04:01,230
I did was I per a second database near

00:03:57,060 --> 00:04:04,140
the web servers and this was awesome so

00:04:01,230 --> 00:04:06,600
we added the second database we now have

00:04:04,140 --> 00:04:08,730
high availability isn't this amazing I'm

00:04:06,600 --> 00:04:11,250
sure you will train to do this we had 0

00:04:08,730 --> 00:04:12,840
single points of failure something I'm

00:04:11,250 --> 00:04:14,880
sure you'll hear a lot about this was

00:04:12,840 --> 00:04:19,139
truly amazing nothing could break it

00:04:14,880 --> 00:04:21,380
not even a thermonuclear war that's a

00:04:19,139 --> 00:04:23,670
reference to some of you

00:04:21,380 --> 00:04:26,040
so this is great and everything's

00:04:23,670 --> 00:04:26,880
amazing and then obviously you know the

00:04:26,040 --> 00:04:30,180
thing that I wanted to have happen

00:04:26,880 --> 00:04:33,830
happened so our string our ADSL that

00:04:30,180 --> 00:04:37,170
would get cut so now we have a solution

00:04:33,830 --> 00:04:40,530
to look like this and everything is

00:04:37,170 --> 00:04:42,780
great this is so so amazing people can

00:04:40,530 --> 00:04:44,660
still book seats they can go to the

00:04:42,780 --> 00:04:47,220
cinema and buy a ticket and get a seat

00:04:44,660 --> 00:04:49,470
they can go online they can buy ticket

00:04:47,220 --> 00:04:52,920
and they can get a seat the world is

00:04:49,470 --> 00:04:54,600
fantastic however this didn't really

00:04:52,920 --> 00:04:58,640
work out quite as I planned

00:04:54,600 --> 00:04:58,640
could anyone guess what happened here

00:04:59,840 --> 00:05:05,610
it's exactly as you thought yes so what

00:05:03,360 --> 00:05:08,220
happened was I I look at optimistically

00:05:05,610 --> 00:05:11,520
and I think what happened was I doubled

00:05:08,220 --> 00:05:15,120
the profits about cinema a for a short

00:05:11,520 --> 00:05:17,280
period of time I increased the density

00:05:15,120 --> 00:05:20,010
of the seating is another way of looking

00:05:17,280 --> 00:05:21,450
at this yes I did well for a short

00:05:20,010 --> 00:05:23,820
period of time we did sell two tickets

00:05:21,450 --> 00:05:27,000
for every single seat in a certain

00:05:23,820 --> 00:05:30,270
cinema and guess what happened yes I got

00:05:27,000 --> 00:05:32,640
shouted at again so I had to learn very

00:05:30,270 --> 00:05:36,240
quickly I have to learn something called

00:05:32,640 --> 00:05:39,930
cat theorem so who has heard of cat

00:05:36,240 --> 00:05:42,330
theorem okay here's all the same people

00:05:39,930 --> 00:05:43,470
that went to the cinema before okay

00:05:42,330 --> 00:05:45,060
you're still engaged you're still

00:05:43,470 --> 00:05:47,640
listening that's good so I learnt this

00:05:45,060 --> 00:05:49,280
lesson very quickly so what we're really

00:05:47,640 --> 00:05:51,720
saying here is you can choose

00:05:49,280 --> 00:05:53,640
consistency which we had initially when

00:05:51,720 --> 00:05:56,220
we had the outage we snapped the buyer

00:05:53,640 --> 00:05:58,700
you know we couldn't buy seats in one of

00:05:56,220 --> 00:06:01,290
the two sites or we can have

00:05:58,700 --> 00:06:02,820
availability where we can carry on

00:06:01,290 --> 00:06:06,450
buying seats but we're gonna sell them

00:06:02,820 --> 00:06:09,570
twice we cannot choose both it is not

00:06:06,450 --> 00:06:11,130
possible to choose better so that's what

00:06:09,570 --> 00:06:12,630
cap theorem really says it's more

00:06:11,130 --> 00:06:15,540
complex than that I wanted to distill it

00:06:12,630 --> 00:06:17,790
down to that for you so when you have

00:06:15,540 --> 00:06:20,400
this network partition as we call it

00:06:17,790 --> 00:06:22,950
when you chop the string is our lovely

00:06:20,400 --> 00:06:25,200
ADSL you create a partition and you can

00:06:22,950 --> 00:06:27,090
choose between availability and

00:06:25,200 --> 00:06:30,120
consistency so when people ask you about

00:06:27,090 --> 00:06:31,740
cap theorem are you a wizard of computer

00:06:30,120 --> 00:06:33,210
science do you understand cafeteria and

00:06:31,740 --> 00:06:34,060
well now you do because that's got

00:06:33,210 --> 00:06:35,860
something to do with

00:06:34,060 --> 00:06:40,990
selling two minutes any Marcis and being

00:06:35,860 --> 00:06:44,320
shouted at so a lot of you are now

00:06:40,990 --> 00:06:46,840
thinking why is Colin waffling on about

00:06:44,320 --> 00:06:50,260
cinemas because we all know that cap

00:06:46,840 --> 00:06:53,740
theorem only applies to stateful systems

00:06:50,260 --> 00:06:56,200
and Cloud Foundry is a stateless system

00:06:53,740 --> 00:07:00,960
so why are you going on about cinema C's

00:06:56,200 --> 00:07:05,020
allow me to explain Cloud Foundry runs

00:07:00,960 --> 00:07:07,000
stateless apps but is a stateful system

00:07:05,020 --> 00:07:09,460
that seems to be the part a lot of

00:07:07,000 --> 00:07:12,460
people are missing out on okay

00:07:09,460 --> 00:07:16,479
it has state Cloud Foundry has a

00:07:12,460 --> 00:07:17,350
database behind it if you think about

00:07:16,479 --> 00:07:19,510
what you're doing when you take the

00:07:17,350 --> 00:07:21,280
Cloud Foundry CF push an app Cloud

00:07:19,510 --> 00:07:23,080
Foundry now has some state it knows you

00:07:21,280 --> 00:07:25,540
want to run your app and it has your app

00:07:23,080 --> 00:07:26,830
code it compiles that into a droplet and

00:07:25,540 --> 00:07:28,900
that's some state and when you scale it

00:07:26,830 --> 00:07:30,880
up you're saying - Clara foundry run 10

00:07:28,900 --> 00:07:33,430
of this app and that is a declaration of

00:07:30,880 --> 00:07:37,470
state that you want to run 10 so it has

00:07:33,430 --> 00:07:40,110
state and thus cat theorem applies

00:07:37,470 --> 00:07:42,910
examples of state within Cloud Foundry

00:07:40,110 --> 00:07:46,860
the crab cloud controller database that

00:07:42,910 --> 00:07:51,220
has the state of what you want to run

00:07:46,860 --> 00:07:54,850
your GUI adb knows about your users the

00:07:51,220 --> 00:07:59,860
blob store has your sauce your droplets

00:07:54,850 --> 00:08:02,140
your build packs this is all state so we

00:07:59,860 --> 00:08:07,889
have the state management problem even

00:08:02,140 --> 00:08:10,360
the routing table is state which

00:08:07,889 --> 00:08:13,990
application instances are running which

00:08:10,360 --> 00:08:18,639
codes that we can route to them and when

00:08:13,990 --> 00:08:21,760
you have state you have problems so what

00:08:18,639 --> 00:08:27,669
can we do about this what does cap mean

00:08:21,760 --> 00:08:29,440
for Cloud Foundry well the reason you're

00:08:27,669 --> 00:08:31,389
here today the thing I hope we can help

00:08:29,440 --> 00:08:32,890
you with is if you understand cap

00:08:31,389 --> 00:08:35,200
theorem and you understand Cloud Foundry

00:08:32,890 --> 00:08:36,459
of Stateville and cap theorem applies we

00:08:35,200 --> 00:08:38,770
can understand the constraints that

00:08:36,459 --> 00:08:40,270
we're operating under and then we can

00:08:38,770 --> 00:08:44,140
make some choices so we can feel

00:08:40,270 --> 00:08:46,930
empowered by this knowledge so I think

00:08:44,140 --> 00:08:49,200
you have three options

00:08:46,930 --> 00:08:52,570
with Cloud Foundry about how you deploy

00:08:49,200 --> 00:08:54,339
to multiple data centers and I'm going

00:08:52,570 --> 00:08:57,160
to run through these options very

00:08:54,339 --> 00:09:01,690
briefly before Dan throws me off the

00:08:57,160 --> 00:09:06,790
stage so the first option you have is

00:09:01,690 --> 00:09:07,839
this option no partition tolerance so

00:09:06,790 --> 00:09:11,620
what you're saying here is you have

00:09:07,839 --> 00:09:14,170
Cloud Foundry deployed don't have it in

00:09:11,620 --> 00:09:15,640
a second site you just deploy it to one

00:09:14,170 --> 00:09:18,940
site perhaps multiple availability zones

00:09:15,640 --> 00:09:22,180
but single site what you get here is

00:09:18,940 --> 00:09:23,170
Cloud Foundry and it's great and if your

00:09:22,180 --> 00:09:25,560
site goes offline

00:09:23,170 --> 00:09:28,420
you've lost foundry but for most people

00:09:25,560 --> 00:09:31,480
this is the simplest way of doing it and

00:09:28,420 --> 00:09:34,270
I gave a lightning talk on Monday night

00:09:31,480 --> 00:09:36,190
about how if you're preparing to go

00:09:34,270 --> 00:09:38,740
multi site because of the possibility of

00:09:36,190 --> 00:09:40,600
a thermonuclear war you may be over

00:09:38,740 --> 00:09:43,510
engineering it hasn't been that many

00:09:40,600 --> 00:09:46,149
thermonuclear wars so for most people

00:09:43,510 --> 00:09:49,420
and most availability requirements just

00:09:46,149 --> 00:09:54,130
running Cloud Foundry single site will

00:09:49,420 --> 00:09:55,900
be the simplest easiest way to do it but

00:09:54,130 --> 00:09:59,470
some people do have higher availability

00:09:55,900 --> 00:10:02,500
requirements so if you do this single

00:09:59,470 --> 00:10:04,959
site you don't have a second site if

00:10:02,500 --> 00:10:08,110
this site gets off line you get shared

00:10:04,959 --> 00:10:11,860
to that so what do we do about that so

00:10:08,110 --> 00:10:13,810
your second option is to do this now

00:10:11,860 --> 00:10:16,930
this diagram may not make much sense

00:10:13,810 --> 00:10:19,870
I now realize that what I'm depicting

00:10:16,930 --> 00:10:21,310
here is that in your first site you have

00:10:19,870 --> 00:10:23,440
the whole of Cloud Foundry so you know

00:10:21,310 --> 00:10:26,110
at all of the components and in the

00:10:23,440 --> 00:10:28,089
second site represented by a small

00:10:26,110 --> 00:10:30,730
rabbit juggling gears and wearing

00:10:28,089 --> 00:10:34,180
goggles that's just the runtime

00:10:30,730 --> 00:10:35,740
components so if you took just the

00:10:34,180 --> 00:10:38,050
runtime components over to one side and

00:10:35,740 --> 00:10:40,470
then had the management plane on the

00:10:38,050 --> 00:10:45,160
first side everything that's stateful

00:10:40,470 --> 00:10:47,440
what we're doing is you're saying if the

00:10:45,160 --> 00:10:48,910
left-hand side goes offline the

00:10:47,440 --> 00:10:51,579
right-hand side the runtime for your

00:10:48,910 --> 00:10:53,680
apps will just carry on at altitude

00:10:51,579 --> 00:10:55,209
running all your applications you can't

00:10:53,680 --> 00:10:57,040
push in your apps you can't scale things

00:10:55,209 --> 00:10:58,720
up scale things down it just carries on

00:10:57,040 --> 00:10:59,930
as it was so we linked those two

00:10:58,720 --> 00:11:01,790
together

00:10:59,930 --> 00:11:04,790
all your control plane sits on the left

00:11:01,790 --> 00:11:07,760
hand side you're running abscesses on

00:11:04,790 --> 00:11:11,540
both sides and what this gives you is

00:11:07,760 --> 00:11:13,880
consistency because if your primary site

00:11:11,540 --> 00:11:17,060
goes offline you can't make any changes

00:11:13,880 --> 00:11:18,110
to your tool running applications so

00:11:17,060 --> 00:11:19,730
you've got pushing your apps you can't

00:11:18,110 --> 00:11:22,100
scale them up scale them down but your

00:11:19,730 --> 00:11:23,810
apps carry on running so you've lost the

00:11:22,100 --> 00:11:26,000
availability of your control plane or

00:11:23,810 --> 00:11:28,090
your apps carry on running if your

00:11:26,000 --> 00:11:30,380
secondary site the rabbit goes offline

00:11:28,090 --> 00:11:31,880
everything's fine because you can still

00:11:30,380 --> 00:11:33,320
make changes on this side and when the

00:11:31,880 --> 00:11:37,760
rabbit comes back online it will

00:11:33,320 --> 00:11:39,500
converge so this looks a little like the

00:11:37,760 --> 00:11:42,140
isolation zones that were spoken about

00:11:39,500 --> 00:11:44,360
early on today maybe this is an advanced

00:11:42,140 --> 00:11:46,670
feature later feature of an isolation

00:11:44,360 --> 00:11:51,490
segments sorry I actually call them so

00:11:46,670 --> 00:11:53,990
as I say if we cut this we still have a

00:11:51,490 --> 00:11:56,330
good situation but we lose the ability

00:11:53,990 --> 00:11:58,190
potentially if one site goes offline to

00:11:56,330 --> 00:11:59,630
push new apps so I'd recommend for a lot

00:11:58,190 --> 00:12:01,250
of you this is a good way of doing multi

00:11:59,630 --> 00:12:03,950
cycle our boundary because you have that

00:12:01,250 --> 00:12:05,600
consistency you don't have to worry

00:12:03,950 --> 00:12:07,280
about the applications being an

00:12:05,600 --> 00:12:10,540
inconsistent versions across the

00:12:07,280 --> 00:12:13,400
multiple cloud boundaries but as I said

00:12:10,540 --> 00:12:16,370
we can't push near applications so we're

00:12:13,400 --> 00:12:19,040
going to get shallow to that same as

00:12:16,370 --> 00:12:24,220
usual so the third option that you have

00:12:19,040 --> 00:12:28,970
is to just run multiple cloud boundaries

00:12:24,220 --> 00:12:30,440
now we see this a lot so you run two

00:12:28,970 --> 00:12:32,660
completely separate cloud boundaries in

00:12:30,440 --> 00:12:34,640
different regions you push your apps to

00:12:32,660 --> 00:12:39,580
both of them and this looks like the

00:12:34,640 --> 00:12:42,260
dream but the problem is then management

00:12:39,580 --> 00:12:43,940
you can push different versions of your

00:12:42,260 --> 00:12:45,980
apps to both of them if you're pushing a

00:12:43,940 --> 00:12:47,510
new version of your app what happens if

00:12:45,980 --> 00:12:50,030
one of them is offline when you push it

00:12:47,510 --> 00:12:51,920
and then comes back online later with an

00:12:50,030 --> 00:12:54,100
older version of your app what happens

00:12:51,920 --> 00:12:56,450
if your users existing one not the other

00:12:54,100 --> 00:12:58,700
all these kind of things you have a big

00:12:56,450 --> 00:13:01,420
issue around consistency how do you keep

00:12:58,700 --> 00:13:05,210
multiple Cloud Foundry use consistent

00:13:01,420 --> 00:13:07,550
very challenging so you push this out

00:13:05,210 --> 00:13:08,840
and I've done this and I've had a cloud

00:13:07,550 --> 00:13:10,130
foundry that was unavailable while we're

00:13:08,840 --> 00:13:12,170
pushing out the app and then it kind of

00:13:10,130 --> 00:13:12,529
self-healed shortly afterwards and then

00:13:12,170 --> 00:13:14,870
you have to

00:13:12,529 --> 00:13:17,509
versions of the app running in different

00:13:14,870 --> 00:13:18,920
places so one-third of your users across

00:13:17,509 --> 00:13:21,170
three cloud boundaries are getting a

00:13:18,920 --> 00:13:22,959
wrong version of the app and then we

00:13:21,170 --> 00:13:26,060
know what happens we get shouted out and

00:13:22,959 --> 00:13:27,709
this problem just multiplies itself but

00:13:26,060 --> 00:13:29,449
you go for let's have lots of cloud

00:13:27,709 --> 00:13:31,160
foundries let's maximize availability

00:13:29,449 --> 00:13:31,699
that's a four cloud language is going to

00:13:31,160 --> 00:13:33,470
be great

00:13:31,699 --> 00:13:35,600
let's have ten cloud boundaries well

00:13:33,470 --> 00:13:37,550
what happens when we start to go really

00:13:35,600 --> 00:13:39,079
big well we get shouted out a lot by

00:13:37,550 --> 00:13:43,189
lots of people because it's gone really

00:13:39,079 --> 00:13:44,749
really big okay big problems and I have

00:13:43,189 --> 00:13:48,949
to say everything that I'm saying now

00:13:44,749 --> 00:13:50,300
all these problems also exist for the

00:13:48,949 --> 00:13:52,819
data behind your Cloud Foundry

00:13:50,300 --> 00:13:54,709
applications please be aware this is not

00:13:52,819 --> 00:13:57,499
just the Cloud Foundry for your stateful

00:13:54,709 --> 00:14:00,170
services behind Cloud Foundry all these

00:13:57,499 --> 00:14:04,249
problems exist and when they go wrong

00:14:00,170 --> 00:14:07,160
you're going to get shouted at again so

00:14:04,249 --> 00:14:09,620
there's a lot of shouting going on so

00:14:07,160 --> 00:14:14,180
the question is if we are going to run

00:14:09,620 --> 00:14:19,329
multi-site Cloud Foundry how can we make

00:14:14,180 --> 00:14:23,269
it more manageable how could we make a

00:14:19,329 --> 00:14:26,600
Cloud Foundry a p-type in there how

00:14:23,269 --> 00:14:28,459
could we make available Cloud Foundry ap

00:14:26,600 --> 00:14:31,129
available a partition tolerant Cloud

00:14:28,459 --> 00:14:34,240
Foundry more manageable how do we keep

00:14:31,129 --> 00:14:37,579
some notion of consistency across

00:14:34,240 --> 00:14:39,170
multiple cloud boundaries and this is

00:14:37,579 --> 00:14:42,819
where things get really difficult so I'm

00:14:39,170 --> 00:14:42,819
going to hand over to Dan

00:14:43,370 --> 00:14:50,790
Thank You Polly try this button I'll go

00:14:47,910 --> 00:14:52,770
through the handheld mic so the funny

00:14:50,790 --> 00:14:54,450
part of this presentation is now over

00:14:52,770 --> 00:14:55,710
there will be no more jokes that we know

00:14:54,450 --> 00:14:58,620
more levity we're going to talk about

00:14:55,710 --> 00:15:02,940
technology and CLI tools so you may want

00:14:58,620 --> 00:15:04,490
to leave at this point so I'm gonna take

00:15:02,940 --> 00:15:07,110
you through a couple of tools that

00:15:04,490 --> 00:15:09,210
either we've written or other people of

00:15:07,110 --> 00:15:11,460
countries the ecosystem that make this

00:15:09,210 --> 00:15:14,190
more manageable because it's problem

00:15:11,460 --> 00:15:15,900
that lots of people seem to have against

00:15:14,190 --> 00:15:18,510
Collins advice lots of people want to

00:15:15,900 --> 00:15:21,090
run multiple cloud foundries so the

00:15:18,510 --> 00:15:22,800
first tool was one that we created to

00:15:21,090 --> 00:15:24,750
help some friends of ours who were

00:15:22,800 --> 00:15:26,760
running multiple cloud foundries and

00:15:24,750 --> 00:15:29,370
this is tool called CF Plex it's

00:15:26,760 --> 00:15:31,410
basically a shim for the CF CLI that

00:15:29,370 --> 00:15:34,020
allows you to run one command against

00:15:31,410 --> 00:15:35,790
named groups of cloud foundries so maybe

00:15:34,020 --> 00:15:39,690
you've got your prod set of cloud

00:15:35,790 --> 00:15:42,390
boundaries this will just run that one

00:15:39,690 --> 00:15:43,800
command against each one if it fails it

00:15:42,390 --> 00:15:45,810
tells you that it's failed doesn't do

00:15:43,800 --> 00:15:48,840
anything clever doesn't try to achieve

00:15:45,810 --> 00:15:51,030
some kind of convergent state but if you

00:15:48,840 --> 00:15:52,740
are operating multiple cloud boundaries

00:15:51,030 --> 00:15:55,380
and you're typing commands in by hand

00:15:52,740 --> 00:15:57,090
and then changing your target typing the

00:15:55,380 --> 00:15:59,160
same commands in by hand and then

00:15:57,090 --> 00:16:01,470
changing your target and type in the

00:15:59,160 --> 00:16:03,840
same commands in my hand at least this

00:16:01,470 --> 00:16:06,780
will reduce the number of errors that

00:16:03,840 --> 00:16:08,040
you make or if you make an error it's

00:16:06,780 --> 00:16:10,980
going to apply it to all of your plan

00:16:08,040 --> 00:16:15,240
foundries at once it does everything the

00:16:10,980 --> 00:16:17,820
CFC eye does it's works with plugins it

00:16:15,240 --> 00:16:20,820
isolates EF home so all the behavior

00:16:17,820 --> 00:16:22,380
that you normally expect is there and it

00:16:20,820 --> 00:16:28,200
works in an interactive or a batch mode

00:16:22,380 --> 00:16:31,380
so you can either specify you add api's

00:16:28,200 --> 00:16:33,570
to it so you can add a list of things

00:16:31,380 --> 00:16:36,360
list of different cloud controllers to

00:16:33,570 --> 00:16:38,670
hit and then run a command which is

00:16:36,360 --> 00:16:42,000
handy when you're maybe doing ops type

00:16:38,670 --> 00:16:43,830
of stuff there is also a and you can

00:16:42,000 --> 00:16:45,810
name those groups as well so this is the

00:16:43,830 --> 00:16:48,360
non group version but you could do add a

00:16:45,810 --> 00:16:51,920
P I and then say like a prod and then

00:16:48,360 --> 00:16:55,870
one of the cloud controller URLs

00:16:51,920 --> 00:16:57,850
there's also batch mode which

00:16:55,870 --> 00:16:59,950
perhaps is a bit of an anti-pattern but

00:16:57,850 --> 00:17:01,720
if you need to do this kind of thing in

00:16:59,950 --> 00:17:03,640
your CI jobs and you're not using

00:17:01,720 --> 00:17:06,220
something cool like concourse this will

00:17:03,640 --> 00:17:07,750
help in that you can specify all the

00:17:06,220 --> 00:17:09,040
Cloud Foundry you want to hit and the

00:17:07,750 --> 00:17:10,900
usernames and passwords as an

00:17:09,040 --> 00:17:12,510
environment variable so you just set it

00:17:10,900 --> 00:17:15,069
off and running so it's not interactive

00:17:12,510 --> 00:17:17,530
it's worth me pointing out and the last

00:17:15,069 --> 00:17:18,790
one it will do login interactively so

00:17:17,530 --> 00:17:19,720
you have to be there to type in your

00:17:18,790 --> 00:17:21,339
username and password

00:17:19,720 --> 00:17:22,930
we don't do anything clever with

00:17:21,339 --> 00:17:25,329
credentials management because that

00:17:22,930 --> 00:17:27,250
would be hard work right so this version

00:17:25,329 --> 00:17:31,420
you can specify an environment variable

00:17:27,250 --> 00:17:33,220
to do that and it will run off and do

00:17:31,420 --> 00:17:34,390
whatever you tell it to do against all

00:17:33,220 --> 00:17:37,059
of the Cloud Foundry so you've specified

00:17:34,390 --> 00:17:39,429
in your advice the separators are really

00:17:37,059 --> 00:17:41,110
weird if you've ever tried guessing

00:17:39,429 --> 00:17:43,090
which symbols people are going to use in

00:17:41,110 --> 00:17:44,890
their passwords and not those are the

00:17:43,090 --> 00:17:47,170
ones that seemed least likely and

00:17:44,890 --> 00:17:50,350
weren't going to screw up a sh but

00:17:47,170 --> 00:17:51,760
that's that's at all for performing the

00:17:50,350 --> 00:17:53,620
same operation against multiple Cloud

00:17:51,760 --> 00:17:56,620
Foundry there's more of a help helper

00:17:53,620 --> 00:17:59,290
for hots people to make their lives

00:17:56,620 --> 00:18:03,550
easier to reduce the likelihood of typos

00:17:59,290 --> 00:18:06,460
and mistakes and that sort of thing the

00:18:03,550 --> 00:18:08,620
next approach is specific to apps so

00:18:06,460 --> 00:18:11,040
concourse is lovely if you're not using

00:18:08,620 --> 00:18:13,179
a concourse from your CI you should be

00:18:11,040 --> 00:18:16,120
if you're doing Cloud Foundry you are

00:18:13,179 --> 00:18:19,300
probably already using it the thing is

00:18:16,120 --> 00:18:22,240
it's got a cloud foundry resource so you

00:18:19,300 --> 00:18:25,270
can use it to push apps and really if

00:18:22,240 --> 00:18:27,220
you've got a value stream that involves

00:18:25,270 --> 00:18:29,080
applications being on some Cloud Foundry

00:18:27,220 --> 00:18:30,550
somewhere you should be mapping that out

00:18:29,080 --> 00:18:33,610
in concourse there should be little

00:18:30,550 --> 00:18:35,260
boxes on a UI somewhere that say we're

00:18:33,610 --> 00:18:39,250
going to push this app to that cloud

00:18:35,260 --> 00:18:41,080
foundry but Apps is all it does so this

00:18:39,250 --> 00:18:42,640
is great for making sure that apps get

00:18:41,080 --> 00:18:43,750
there and I highly recommend you use it

00:18:42,640 --> 00:18:45,790
but it's not the whole story what

00:18:43,750 --> 00:18:47,500
happens about user provided services

00:18:45,790 --> 00:18:50,140
what happens if you've got a new version

00:18:47,500 --> 00:18:53,500
of your app and you've got a version of

00:18:50,140 --> 00:18:55,090
code in git and you need to make sure

00:18:53,500 --> 00:18:57,309
that when that version gets pushed a

00:18:55,090 --> 00:18:59,320
user provider surface is available how

00:18:57,309 --> 00:19:01,660
do you keep those in lockstep at the

00:18:59,320 --> 00:19:03,670
moment there's nothing in concourse that

00:19:01,660 --> 00:19:08,830
does that other than if you script it

00:19:03,670 --> 00:19:09,610
yourself also you end up with one

00:19:08,830 --> 00:19:11,140
resource

00:19:09,610 --> 00:19:14,080
clown foundry that you're hitting so if

00:19:11,140 --> 00:19:15,430
you've got ten cloud foundries then

00:19:14,080 --> 00:19:17,020
you're gonna have ten boxes and there's

00:19:15,430 --> 00:19:20,680
gonna be lots of copying and pasting in

00:19:17,020 --> 00:19:24,700
your concourse yeah no files so the next

00:19:20,680 --> 00:19:27,190
thing I wrote or something that are

00:19:24,700 --> 00:19:30,220
hacking on the last cloud foundry summit

00:19:27,190 --> 00:19:32,020
and if you ever talk to Colin about

00:19:30,220 --> 00:19:34,360
contributing something to cloud foundry

00:19:32,020 --> 00:19:36,010
ecosystem there are only two answers if

00:19:34,360 --> 00:19:37,930
you say I've got this great idea for a

00:19:36,010 --> 00:19:40,510
bit of software what do you think the

00:19:37,930 --> 00:19:42,340
answer is either cloud credo already did

00:19:40,510 --> 00:19:43,750
it for a customer and they can't tell

00:19:42,340 --> 00:19:45,760
you about it because it's proprietary or

00:19:43,750 --> 00:19:46,060
pivotal are working on it so don't

00:19:45,760 --> 00:19:49,720
bother

00:19:46,060 --> 00:19:51,330
so I ignore that if you say that every

00:19:49,720 --> 00:19:53,860
time

00:19:51,330 --> 00:19:56,230
so I I was hacking on something called

00:19:53,860 --> 00:19:58,210
the converger and the idea is to have

00:19:56,230 --> 00:20:00,160
this is a java application that is a bit

00:19:58,210 --> 00:20:04,060
like Bosch but the Cloud Foundry right

00:20:00,160 --> 00:20:06,540
so you specify a declaration of how you

00:20:04,060 --> 00:20:09,610
want your Cloud Foundry to look in llamó

00:20:06,540 --> 00:20:11,770
you specified or do you want the spaces

00:20:09,610 --> 00:20:15,340
you want the user provided services the

00:20:11,770 --> 00:20:17,470
services the users the user roles and it

00:20:15,340 --> 00:20:22,270
will go away and make several cloud

00:20:17,470 --> 00:20:24,010
boundaries all look identical but it

00:20:22,270 --> 00:20:26,140
doesn't do apps and that's on purpose

00:20:24,010 --> 00:20:28,900
right because my personal belief is that

00:20:26,140 --> 00:20:32,050
apps should be done through CI this is

00:20:28,900 --> 00:20:34,600
for the set up around these apps however

00:20:32,050 --> 00:20:38,080
I did have one idea and that was making

00:20:34,600 --> 00:20:40,180
a concourse resource so you could have

00:20:38,080 --> 00:20:43,570
concourse pushing apps to Cloud Foundry

00:20:40,180 --> 00:20:45,400
and then we could make together because

00:20:43,570 --> 00:20:46,840
it's open source in its community we

00:20:45,400 --> 00:20:49,780
could all work together to make the

00:20:46,840 --> 00:20:51,730
converger a concourse resource so you

00:20:49,780 --> 00:20:53,920
can say and make sure that this space

00:20:51,730 --> 00:20:56,650
looks like this and it has these user

00:20:53,920 --> 00:21:00,370
private services with it so this is an

00:20:56,650 --> 00:21:05,380
example of the kind of gamal snippet

00:21:00,370 --> 00:21:07,270
that you would configure it with or some

00:21:05,380 --> 00:21:09,070
friends of mine that I worked with when

00:21:07,270 --> 00:21:10,780
we originally first had this idea we're

00:21:09,070 --> 00:21:13,330
using a software-defined network so

00:21:10,780 --> 00:21:15,280
we've already thought ahead of being

00:21:13,330 --> 00:21:18,010
able to define security groups and then

00:21:15,280 --> 00:21:21,050
have a plug-in architecture so you could

00:21:18,010 --> 00:21:25,070
have something that would run against

00:21:21,050 --> 00:21:26,810
I shouldn't name to guess the ends but

00:21:25,070 --> 00:21:31,930
run against your Sdn and create firewall

00:21:26,810 --> 00:21:34,660
rules as well as an effort saver and

00:21:31,930 --> 00:21:37,730
originally the the use case was to

00:21:34,660 --> 00:21:39,560
converge an org at a time so you'd have

00:21:37,730 --> 00:21:42,800
one org and make it look exactly like

00:21:39,560 --> 00:21:45,590
this the example at the bottom about

00:21:42,800 --> 00:21:47,450
having a REST API where you specify the

00:21:45,590 --> 00:21:49,760
group of clown founders you're after and

00:21:47,450 --> 00:21:51,800
then an org and then a space would allow

00:21:49,760 --> 00:21:54,350
you to integrate this is part of your CI

00:21:51,800 --> 00:21:56,600
pipeline so set up my space make sure my

00:21:54,350 --> 00:21:59,270
space in exactly the state I expect when

00:21:56,600 --> 00:22:01,700
I push this out you could also then use

00:21:59,270 --> 00:22:03,050
it for setting up test environments as

00:22:01,700 --> 00:22:04,340
well so if you're a cloud foundry

00:22:03,050 --> 00:22:06,020
developer if you want to focus at

00:22:04,340 --> 00:22:08,270
pivotal will end up standing up Cloud

00:22:06,020 --> 00:22:11,120
Foundry 15 times a day to test things

00:22:08,270 --> 00:22:12,830
against it will be quicker and more

00:22:11,120 --> 00:22:15,860
declarative than bash scripting the set

00:22:12,830 --> 00:22:18,740
up of a load of spaces so the converger

00:22:15,860 --> 00:22:21,220
is a work in progress everything you see

00:22:18,740 --> 00:22:23,570
there does work I believe at the moment

00:22:21,220 --> 00:22:25,310
but it doesn't do apps and that's on

00:22:23,570 --> 00:22:28,700
purpose so we still don't have a

00:22:25,310 --> 00:22:31,720
complete halt the next of all is that my

00:22:28,700 --> 00:22:34,430
way of somebody leaning on the thing I

00:22:31,720 --> 00:22:38,120
can stop if you want me to you know just

00:22:34,430 --> 00:22:40,460
say um the next tool has the best logo

00:22:38,120 --> 00:22:44,390
therefore it wins the competition so

00:22:40,460 --> 00:22:48,620
deployed that tool it's not mine

00:22:44,390 --> 00:22:52,810
I can't take credit for it deploys an

00:22:48,620 --> 00:22:57,290
app too many clan foundry instances and

00:22:52,810 --> 00:23:00,380
will cope with things like rollback but

00:22:57,290 --> 00:23:02,180
again it's only doing apps it's got a

00:23:00,380 --> 00:23:04,970
plug-in architecture and I believe the

00:23:02,180 --> 00:23:07,160
people that made it have got some really

00:23:04,970 --> 00:23:10,060
cool plugins I'm not sure how many of

00:23:07,160 --> 00:23:12,770
those are open-source but in terms of

00:23:10,060 --> 00:23:14,870
deploying apps across multiple cloud

00:23:12,770 --> 00:23:15,980
boundaries and coping with the failures

00:23:14,870 --> 00:23:18,380
that might happen what happens is ones

00:23:15,980 --> 00:23:22,640
down then deploy that tool is the tool

00:23:18,380 --> 00:23:25,700
that will manage that best for you the

00:23:22,640 --> 00:23:27,740
next tool also has a logo unlike mine I

00:23:25,700 --> 00:23:29,930
don't think it's a good actor one I'm

00:23:27,740 --> 00:23:32,090
afraid to say but pushed a crowd there

00:23:29,930 --> 00:23:33,460
was a really interesting talk given at

00:23:32,090 --> 00:23:36,520
San Clara about this

00:23:33,460 --> 00:23:37,900
and I can't work out whether I really

00:23:36,520 --> 00:23:38,590
like this or whether I think is a bit of

00:23:37,900 --> 00:23:40,540
an anti-pattern

00:23:38,590 --> 00:23:42,850
but if you're deploying large Mike

00:23:40,540 --> 00:23:44,050
service architectures then this might be

00:23:42,850 --> 00:23:47,410
of interest to you

00:23:44,050 --> 00:23:49,090
so you can describe your entire

00:23:47,410 --> 00:23:51,850
architecture and all the apps that make

00:23:49,090 --> 00:23:54,130
it up and deploy those all as one go so

00:23:51,850 --> 00:23:57,640
a declarative format for hallmark

00:23:54,130 --> 00:24:01,600
service architectures there's a lot of

00:23:57,640 --> 00:24:04,600
JavaScript sin and Jason in it so that

00:24:01,600 --> 00:24:07,960
might not be to everyone's tastes the

00:24:04,600 --> 00:24:10,420
thing that kind of have queries about is

00:24:07,960 --> 00:24:11,680
that we went to Mike services

00:24:10,420 --> 00:24:14,500
architecture so we could deploy things

00:24:11,680 --> 00:24:17,170
on their own cadence it's a wall define

00:24:14,500 --> 00:24:18,370
boundaries bounded context and so we

00:24:17,170 --> 00:24:19,930
wouldn't have to worry about pushing

00:24:18,370 --> 00:24:22,210
them all at the same time so is it

00:24:19,930 --> 00:24:24,160
actually an anti-pattern to describe

00:24:22,210 --> 00:24:26,410
your micro service architecture all in

00:24:24,160 --> 00:24:27,730
one go and say probably this whole lot

00:24:26,410 --> 00:24:28,240
of things these versions are work

00:24:27,730 --> 00:24:30,820
together

00:24:28,240 --> 00:24:32,380
and if that is an anti-pattern why do we

00:24:30,820 --> 00:24:33,850
think it's an okay thing to do when we

00:24:32,380 --> 00:24:35,830
deploy stuff with Bosch because it's the

00:24:33,850 --> 00:24:38,200
same kind of principle right with many

00:24:35,830 --> 00:24:42,460
components of the the same system

00:24:38,200 --> 00:24:44,380
working together so there are no tools

00:24:42,460 --> 00:24:46,840
currently in existence that solve all

00:24:44,380 --> 00:24:49,360
the problems of having multiple cloud

00:24:46,840 --> 00:24:51,220
foundries running together it's a hard

00:24:49,360 --> 00:24:53,830
thing you will have to worry about the

00:24:51,220 --> 00:24:55,300
consistency problem CF flex will make it

00:24:53,830 --> 00:24:58,480
easier if you're going to do stuff by

00:24:55,300 --> 00:25:00,670
hand concours you should be using to

00:24:58,480 --> 00:25:03,160
push your apps into Cloud Foundry the

00:25:00,670 --> 00:25:05,140
converger isn't finished yet but can do

00:25:03,160 --> 00:25:08,110
a hell of a lot of stuff and has all the

00:25:05,140 --> 00:25:09,700
qualities of Bosch in terms of being a

00:25:08,110 --> 00:25:11,530
declarative format and making the world

00:25:09,700 --> 00:25:14,710
like you want it to be in an idempotent

00:25:11,530 --> 00:25:16,930
fashion deployed axle great for rolling

00:25:14,710 --> 00:25:18,340
forwards deploying apps across multiple

00:25:16,930 --> 00:25:20,080
cloud foundries and coping with their

00:25:18,340 --> 00:25:21,820
errors and push the cloud if you've got

00:25:20,080 --> 00:25:25,480
a complicated Micra service architecture

00:25:21,820 --> 00:25:27,580
then this could be the tool for you and

00:25:25,480 --> 00:25:30,100
that's a wrap up of tools that may help

00:25:27,580 --> 00:25:32,440
you if you decide to go down the mini

00:25:30,100 --> 00:25:35,850
Cloud Foundry route and with that I

00:25:32,440 --> 00:25:35,850
think we are done

00:25:41,980 --> 00:25:57,230
does anyone have any questions not

00:25:55,880 --> 00:25:58,880
really other than I didn't think of it

00:25:57,230 --> 00:26:01,730
but now you mention it

00:25:58,880 --> 00:26:04,100
that's how exhausting my research was so

00:26:01,730 --> 00:26:05,960
yes a spinnaker was the question was why

00:26:04,100 --> 00:26:08,570
didn't you mention spinnaker how do you

00:26:05,960 --> 00:26:18,590
use spinnaker yeah and has it been

00:26:08,570 --> 00:26:21,200
successful for you so and that's

00:26:18,590 --> 00:26:22,640
spinnaker predominately for deploying

00:26:21,200 --> 00:26:28,460
apps does it do any of the configuration

00:26:22,640 --> 00:26:30,049
of the class boundaries awesome cool so

00:26:28,460 --> 00:26:35,210
they go recommendation for you check out

00:26:30,049 --> 00:26:41,510
spinnaker any other questions mr.

00:26:35,210 --> 00:26:43,490
Matthews see if flex doesn't

00:26:41,510 --> 00:26:45,140
sequentially so that when stuff goes

00:26:43,490 --> 00:26:46,520
wrong it felt straight away and you know

00:26:45,140 --> 00:26:50,780
about it rather than trying to do

00:26:46,520 --> 00:27:00,020
anything too clever any questions about

00:26:50,780 --> 00:27:03,220
cinemas scenario two will be separated

00:27:00,020 --> 00:27:03,220
out one time please

00:27:04,170 --> 00:27:08,500
so the question was my second scenario

00:27:06,850 --> 00:27:10,330
which is the consistent scenario where

00:27:08,500 --> 00:27:12,730
we separated out the runtime from the

00:27:10,330 --> 00:27:15,010
complete lab boundary components with

00:27:12,730 --> 00:27:16,840
which what infrastructure do you need to

00:27:15,010 --> 00:27:19,690
do that we're exploring that at the

00:27:16,840 --> 00:27:21,520
moment so there's a proposal for

00:27:19,690 --> 00:27:24,280
isolation zones and that's kind of an

00:27:21,520 --> 00:27:26,020
evolution of elastic clusters so we're

00:27:24,280 --> 00:27:29,520
looking potentially I think you

00:27:26,020 --> 00:27:33,910
definitely need bare minimum rooters and

00:27:29,520 --> 00:27:35,670
cells and we probably actually need the

00:27:33,910 --> 00:27:38,020
feature we need really is around the

00:27:35,670 --> 00:27:40,780
container networking inside of cloud

00:27:38,020 --> 00:27:43,630
foundry at the moment your rooters will

00:27:40,780 --> 00:27:45,040
by default prune their roots if they

00:27:43,630 --> 00:27:47,710
archive detached from the management

00:27:45,040 --> 00:27:49,540
plane after 120 seconds so what would

00:27:47,710 --> 00:27:51,940
kind of sit there everything being fine

00:27:49,540 --> 00:27:54,460
for two minutes and then you'd have no

00:27:51,940 --> 00:27:55,870
absolute so we're looking at how we can

00:27:54,460 --> 00:27:57,280
deal with that in a consistent fashion

00:27:55,870 --> 00:27:58,780
because unfortunately the rooters have

00:27:57,280 --> 00:28:00,910
state as I mentioned and that makes

00:27:58,780 --> 00:28:03,780
things a little tricky but we're getting

00:28:00,910 --> 00:28:07,809
there it's kind of it's it's in progress

00:28:03,780 --> 00:28:10,150
any more questions for those of us that

00:28:07,809 --> 00:28:11,830
weren't around at the talk about

00:28:10,150 --> 00:28:14,309
isolation segments earlier when's it

00:28:11,830 --> 00:28:14,309
gonna be ready

00:28:14,960 --> 00:28:20,810
so you know where for pivotal they were

00:28:17,690 --> 00:28:23,090
an agile company I don't know you know

00:28:20,810 --> 00:28:25,190
we definitely predict timings we just

00:28:23,090 --> 00:28:26,360
don't give commitment so I could I can

00:28:25,190 --> 00:28:31,580
look in the back looks for you in the

00:28:26,360 --> 00:28:33,680
back when it's going down the back so

00:28:31,580 --> 00:28:35,450
Yuri turn the lights out earlier on and

00:28:33,680 --> 00:28:37,070
then disappeared I think when you

00:28:35,450 --> 00:28:39,470
started answer asking that question

00:28:37,070 --> 00:28:40,550
I personally honest answers I don't know

00:28:39,470 --> 00:28:41,750
I could look in the back box and we can

00:28:40,550 --> 00:28:42,860
give you a prediction based upon our

00:28:41,750 --> 00:28:45,350
velocity so I can get back to you on

00:28:42,860 --> 00:28:46,610
that but I just don't actually know it's

00:28:45,350 --> 00:28:48,080
company in proposal stage at the moment

00:28:46,610 --> 00:28:50,540
so you probably don't have an accurate

00:28:48,080 --> 00:28:52,430
prediction right now I think you could

00:28:50,540 --> 00:28:53,960
experiment with this yourself if you

00:28:52,430 --> 00:29:00,770
wanted to we just wouldn't support it

00:28:53,960 --> 00:29:03,580
right now any more questions thank you

00:29:00,770 --> 00:29:03,580
all very much for coming

00:29:05,070 --> 00:29:07,960

YouTube URL: https://www.youtube.com/watch?v=t61r8THmtsc


