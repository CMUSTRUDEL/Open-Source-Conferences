Title: OCI in CF: For Buildpacks, Security and Interoperability
Publication date: 2016-09-30
Playlist: Cloud Foundry Summit Europe 2016
Description: 
	OCI in CF: For Buildpacks, Security and Interoperability - Julz Friedman, IBM & Will Pragnell, Pivotal

The CF buildpacks workflow allows app developers to focus on the business logic of their code rather than the operational concerns of the OS that runs their code. At the same time, CF operators need confidence that all the code running in their org has been patched for the latest vulnerabilities. However, the current workflow does not currently support dynamically linked compiled languages well. This makes it very difficult to support apps written in C, haskell, et.al.; and also leaves us with a large difficult-to-protect surface area in our rootfs. We explore a solution to this problem using the new OCI container image specification, and demonstrate how this could result in a more flexible, more secure platform that supports better interoperability with the rest of the container ecosystem. For example, what if you could download your droplet and run it on any OCI container manager?
Captions: 
	00:00:00,060 --> 00:00:06,060
without further ado I'm Jules this is

00:00:03,480 --> 00:00:07,560
will Gareth the responsible one and

00:00:06,060 --> 00:00:11,719
we're going to talk about okay and Bill

00:00:07,560 --> 00:00:14,880
Beck's okay thanks

00:00:11,719 --> 00:00:16,680
let's start with a problem I don't know

00:00:14,880 --> 00:00:20,640
how many of you have tried to do this

00:00:16,680 --> 00:00:23,310
but trying to write a build pack for a

00:00:20,640 --> 00:00:26,070
natively compiled language particularly

00:00:23,310 --> 00:00:27,840
one that does dynamic linking is a bit

00:00:26,070 --> 00:00:32,570
of a pain if you haven't tried it I dare

00:00:27,840 --> 00:00:36,840
you go and go and have a go it's not fun

00:00:32,570 --> 00:00:39,750
an example Haskell so Haskell's integer

00:00:36,840 --> 00:00:42,149
type is arbitrary precision that means

00:00:39,750 --> 00:00:44,670
you need Lib GMP installed in the

00:00:42,149 --> 00:00:45,960
compilation container and then the

00:00:44,670 --> 00:00:47,910
binary that you get is dynamically

00:00:45,960 --> 00:00:52,140
linked to that and so that you need Lib

00:00:47,910 --> 00:00:54,960
GMP and your runtime container and well

00:00:52,140 --> 00:00:59,430
Lib Jim he isn't in the root of s so

00:00:54,960 --> 00:01:00,930
it's not much fun kind of sucks you can

00:00:59,430 --> 00:01:03,149
do it and people have done it and they

00:01:00,930 --> 00:01:05,519
might say oh it's not so bad so you

00:01:03,149 --> 00:01:07,020
could pull down this library and move it

00:01:05,519 --> 00:01:10,310
into the right place and set some

00:01:07,020 --> 00:01:13,170
variables in yada yada yada yada yada

00:01:10,310 --> 00:01:16,680
it's really a pain and what's worse is

00:01:13,170 --> 00:01:16,939
it's really really slow so that's no

00:01:16,680 --> 00:01:21,450
good

00:01:16,939 --> 00:01:27,180
wouldn't it be nice jusers suggested

00:01:21,450 --> 00:01:28,560
title wouldn't it be nice if you just

00:01:27,180 --> 00:01:29,820
wanted a simple bill pack you didn't

00:01:28,560 --> 00:01:30,990
have constraints about like network

00:01:29,820 --> 00:01:32,340
access or that I mean there are good

00:01:30,990 --> 00:01:34,259
reasons why you might not want to do

00:01:32,340 --> 00:01:36,720
this but wouldn't it be nice if you

00:01:34,259 --> 00:01:40,470
could just do this install the compiler

00:01:36,720 --> 00:01:41,640
compile the thing happy there are

00:01:40,470 --> 00:01:43,320
reasons that this doesn't work today so

00:01:41,640 --> 00:01:46,799
for one thing apt-get needs to be run as

00:01:43,320 --> 00:01:48,180
root we have on privileged containers

00:01:46,799 --> 00:01:51,030
now we could start doing that we don't

00:01:48,180 --> 00:01:52,229
today that's not such a problem but that

00:01:51,030 --> 00:01:54,000
leads to another problem which is that

00:01:52,229 --> 00:01:55,500
once you're running is root and you're

00:01:54,000 --> 00:01:57,570
running things like app get you could be

00:01:55,500 --> 00:02:00,930
putting things anywhere on the

00:01:57,570 --> 00:02:02,850
filesystem and those things your app

00:02:00,930 --> 00:02:04,049
might depend on at runtime they're not

00:02:02,850 --> 00:02:05,549
going to make it into the droplet the

00:02:04,049 --> 00:02:08,759
droplet today is just tired up from this

00:02:05,549 --> 00:02:11,240
one particular directory and so that's

00:02:08,759 --> 00:02:12,470
not going to work so you really need to

00:02:11,240 --> 00:02:15,080
instead of taking a droplet you need to

00:02:12,470 --> 00:02:18,200
have a delta of the whole fire system so

00:02:15,080 --> 00:02:21,830
that's one problem let's talk about a

00:02:18,200 --> 00:02:24,080
separate problem what if you want to

00:02:21,830 --> 00:02:25,310
move your app having staged it to a

00:02:24,080 --> 00:02:28,040
different Cloud Foundry without

00:02:25,310 --> 00:02:29,900
restaging or what if you want to move it

00:02:28,040 --> 00:02:32,720
to another platform or another

00:02:29,900 --> 00:02:36,650
Orchestrator or maybe you just want to

00:02:32,720 --> 00:02:38,060
run it on your local machine that's a

00:02:36,650 --> 00:02:39,170
bit tricky to do at the moment why do

00:02:38,060 --> 00:02:41,090
you want to do this there are a bunch of

00:02:39,170 --> 00:02:42,260
reasons maybe you just have some weird

00:02:41,090 --> 00:02:44,270
requirements about where you run your

00:02:42,260 --> 00:02:45,290
workloads maybe you just want to debug

00:02:44,270 --> 00:02:47,930
something locally but the most

00:02:45,290 --> 00:02:51,500
compelling for me is actually this idea

00:02:47,930 --> 00:02:53,150
of running identical bits across your

00:02:51,500 --> 00:02:55,790
file foundries across different

00:02:53,150 --> 00:02:57,950
platforms maybe you've just got multiple

00:02:55,790 --> 00:02:59,360
cloud foundries for availability maybe

00:02:57,950 --> 00:03:00,470
you're doing some sort of workflow where

00:02:59,360 --> 00:03:01,970
you'll push into a staging environment

00:03:00,470 --> 00:03:03,740
and you're validating you're running

00:03:01,970 --> 00:03:06,140
some scaling tests or load tests and

00:03:03,740 --> 00:03:08,660
then you want to move that thing on to

00:03:06,140 --> 00:03:10,250
your production Cloud Foundry and you

00:03:08,660 --> 00:03:12,110
don't really want to restage it because

00:03:10,250 --> 00:03:14,840
any of this this question did staging

00:03:12,110 --> 00:03:16,340
produce identical output in both places

00:03:14,840 --> 00:03:19,940
and the answer the moment is play

00:03:16,340 --> 00:03:21,170
probably it's not great if you really

00:03:19,940 --> 00:03:23,810
continuous delivery but there's this big

00:03:21,170 --> 00:03:25,340
thing about testing the same artifacts

00:03:23,810 --> 00:03:29,270
all the way through not rebuilding and

00:03:25,340 --> 00:03:31,880
moving around if you answer the capi

00:03:29,270 --> 00:03:32,660
talk yesterday about the v3 API you

00:03:31,880 --> 00:03:34,490
might be thinking well what about

00:03:32,660 --> 00:03:35,900
droplets we're gonna get droplet

00:03:34,490 --> 00:03:37,190
download and drop the upload and that

00:03:35,900 --> 00:03:40,700
will kind of solve this and that's true

00:03:37,190 --> 00:03:42,710
it does kind of solve this but it only

00:03:40,700 --> 00:03:45,410
solves it for Cloud Foundry it doesn't

00:03:42,710 --> 00:03:47,660
solve it for other platforms these tar

00:03:45,410 --> 00:03:49,130
balls are kind of much for standard this

00:03:47,660 --> 00:03:52,280
just this arbitrary tar ball sort of

00:03:49,130 --> 00:03:53,450
stuff that you can run if I want to pull

00:03:52,280 --> 00:03:55,010
it down and run it on my local machine

00:03:53,450 --> 00:03:56,510
I've got a ton tar it and figure it out

00:03:55,010 --> 00:03:58,190
and I probably don't wanna do that I

00:03:56,510 --> 00:03:59,560
probably just want to run a container

00:03:58,190 --> 00:04:01,850
something like that

00:03:59,560 --> 00:04:04,490
and finally there's not really an

00:04:01,850 --> 00:04:06,320
ecosystem or tooling around these

00:04:04,490 --> 00:04:08,660
toggles these droplets if you want to do

00:04:06,320 --> 00:04:10,190
things like vulnerability scanning you

00:04:08,660 --> 00:04:12,560
want to archive them in some registry

00:04:10,190 --> 00:04:13,790
you kind of a little bit out you know on

00:04:12,560 --> 00:04:17,359
your own there's not there's not a good

00:04:13,790 --> 00:04:20,510
ecosystem of tooling to do that so some

00:04:17,359 --> 00:04:23,630
more goals how can this be better

00:04:20,510 --> 00:04:24,240
well what if we exported compiled OCI

00:04:23,630 --> 00:04:27,050
images

00:04:24,240 --> 00:04:29,759
staging should probably take a quick

00:04:27,050 --> 00:04:33,389
diversion and talk about what OCR images

00:04:29,759 --> 00:04:37,229
are the OCI open container initiative it

00:04:33,389 --> 00:04:38,819
was started year-and-a-half ago by

00:04:37,229 --> 00:04:42,810
docker and core OS and folks like that

00:04:38,819 --> 00:04:45,150
and they along with the runtime spec

00:04:42,810 --> 00:04:47,940
from which we get run see there's an

00:04:45,150 --> 00:04:50,030
image specification which is very

00:04:47,940 --> 00:04:51,960
similar at the moment to docker images

00:04:50,030 --> 00:04:54,780
so you can sort of think of this as a

00:04:51,960 --> 00:04:56,430
docker image but the OCI parts important

00:04:54,780 --> 00:04:58,590
it's an open standard something we can

00:04:56,430 --> 00:05:00,210
all collaborate on something that's

00:04:58,590 --> 00:05:01,919
going to be good for interoperability

00:05:00,210 --> 00:05:04,380
between cloud foundry other platforms

00:05:01,919 --> 00:05:07,530
everything else and you know you get

00:05:04,380 --> 00:05:09,539
tooling and an ecosystem around that so

00:05:07,530 --> 00:05:11,639
if we could export these things and then

00:05:09,539 --> 00:05:13,500
we can import them again we've solved

00:05:11,639 --> 00:05:15,240
our identical bits problem you can move

00:05:13,500 --> 00:05:16,289
them around easily and you get all that

00:05:15,240 --> 00:05:19,500
tooling and stuff that I was talking

00:05:16,289 --> 00:05:21,120
about and then there's a lovely bonus we

00:05:19,500 --> 00:05:22,319
kind of think that by doing this we can

00:05:21,120 --> 00:05:24,240
make it all faster so when you're

00:05:22,319 --> 00:05:25,560
staging and you're scaling or you're

00:05:24,240 --> 00:05:27,349
doing a rolling deployments anything

00:05:25,560 --> 00:05:30,990
like that it's gonna be a bit quicker

00:05:27,349 --> 00:05:32,190
that'd be pretty cool so I'm gonna hand

00:05:30,990 --> 00:05:33,960
over to Jules and he's gonna tell you a

00:05:32,190 --> 00:05:40,199
bit about how this would work and what

00:05:33,960 --> 00:05:43,259
it would look like this is an app this

00:05:40,199 --> 00:05:47,729
is a cartoonists impression of me when

00:05:43,259 --> 00:05:51,030
we came up with this idea so how do we

00:05:47,729 --> 00:05:55,949
actually make this work how do we

00:05:51,030 --> 00:05:57,810
actually make this work basically what

00:05:55,949 --> 00:05:59,699
it comes down to is two things it's

00:05:57,810 --> 00:06:01,560
layered file systems which I'll talk

00:05:59,699 --> 00:06:04,919
about and it's a shippable image

00:06:01,560 --> 00:06:07,159
standard which I'll talk about but first

00:06:04,919 --> 00:06:10,620
we need to talk about how it works today

00:06:07,159 --> 00:06:11,669
so today you might be familiar with the

00:06:10,620 --> 00:06:15,030
current flow

00:06:11,669 --> 00:06:18,240
you've got your code you push it and

00:06:15,030 --> 00:06:22,169
this is the part we call staging you

00:06:18,240 --> 00:06:24,539
then run a bill pack that converts your

00:06:22,169 --> 00:06:26,280
codes or something that can run we store

00:06:24,539 --> 00:06:28,620
that as an object called the droplet and

00:06:26,280 --> 00:06:31,770
we run it so if we look into that

00:06:28,620 --> 00:06:33,419
staging process this is where the Bill

00:06:31,770 --> 00:06:34,860
pack happens everyone's familiar with

00:06:33,419 --> 00:06:37,740
the bill pack and actually the bill pack

00:06:34,860 --> 00:06:38,100
is pretty great and the bill pack bit is

00:06:37,740 --> 00:06:39,690
all

00:06:38,100 --> 00:06:41,730
right we've got this huge library of

00:06:39,690 --> 00:06:44,870
different ways of converting your code

00:06:41,730 --> 00:06:47,100
into a running thing with much more

00:06:44,870 --> 00:06:48,990
complexity and support and all these

00:06:47,100 --> 00:06:50,400
things you can do with the Bill pack the

00:06:48,990 --> 00:06:52,400
problem is actually not the Bill pack

00:06:50,400 --> 00:06:56,220
bit the problem is this bit at the end

00:06:52,400 --> 00:06:58,680
where we droplet eyes it and what

00:06:56,220 --> 00:07:00,800
droplet icing it actually means is we

00:06:58,680 --> 00:07:03,360
tar up a directory called slash app

00:07:00,800 --> 00:07:06,330
which probably made more sense before

00:07:03,360 --> 00:07:09,540
we'd heard of containers right and

00:07:06,330 --> 00:07:12,930
container images but less so now so we

00:07:09,540 --> 00:07:15,600
do this task tap target up you move out

00:07:12,930 --> 00:07:18,000
and then we have a tar file and what we

00:07:15,600 --> 00:07:20,550
do then is at runtime we take whatever

00:07:18,000 --> 00:07:21,630
the current route file system is it's

00:07:20,550 --> 00:07:23,340
just pretty great because it means we

00:07:21,630 --> 00:07:27,690
can patch it and keep it up to date and

00:07:23,340 --> 00:07:34,350
then we just copy that tar file back in

00:07:27,690 --> 00:07:36,210
and we extract it and then we run your

00:07:34,350 --> 00:07:38,730
app right through inside that Run

00:07:36,210 --> 00:07:41,070
directory it's okay and it works and it

00:07:38,730 --> 00:07:42,870
does mean that we can patch the root

00:07:41,070 --> 00:07:45,180
filesystem independently from the app

00:07:42,870 --> 00:07:47,310
but now we've got a tar file we have to

00:07:45,180 --> 00:07:48,720
copy the tar file around and we have all

00:07:47,310 --> 00:07:50,850
the problems and restrictions we had

00:07:48,720 --> 00:07:56,520
earlier you have to work around this

00:07:50,850 --> 00:07:58,560
system so what could we do instead well

00:07:56,520 --> 00:08:04,560
we could first describe hoppers all over

00:07:58,560 --> 00:08:06,150
again like this we could describe the

00:08:04,560 --> 00:08:08,220
fact that droplets are just tar files

00:08:06,150 --> 00:08:09,720
there's no metadata you extract them

00:08:08,220 --> 00:08:11,700
again and again and again in Cloud

00:08:09,720 --> 00:08:13,140
Foundry which is actually why sometimes

00:08:11,700 --> 00:08:15,300
takes quite a long time when you start

00:08:13,140 --> 00:08:17,760
your app because we have to start the

00:08:15,300 --> 00:08:20,060
container and then copy all the bits in

00:08:17,760 --> 00:08:23,460
and then antara and then start things up

00:08:20,060 --> 00:08:25,050
and therefore you get this one directory

00:08:23,460 --> 00:08:28,140
at the end what would be better is

00:08:25,050 --> 00:08:29,520
layered images which maybe people are

00:08:28,140 --> 00:08:32,930
familiar with you might have used them

00:08:29,520 --> 00:08:36,990
in such little known systems as docker

00:08:32,930 --> 00:08:39,030
they've proved quite popular they use a

00:08:36,990 --> 00:08:41,550
layered file system so they use whole

00:08:39,030 --> 00:08:44,700
file system layers but disks on top of

00:08:41,550 --> 00:08:46,440
each one to make that efficient and what

00:08:44,700 --> 00:08:49,800
you have when you have the combined diff

00:08:46,440 --> 00:08:51,110
is an image with an ID that can be

00:08:49,800 --> 00:08:53,510
stored in a registry move

00:08:51,110 --> 00:08:55,550
around and what's even better now is we

00:08:53,510 --> 00:08:57,680
have open standards for how to describe

00:08:55,550 --> 00:09:00,380
those images and open formats for those

00:08:57,680 --> 00:09:03,260
images and registries so that you can

00:09:00,380 --> 00:09:06,470
pull them down and share them that looks

00:09:03,260 --> 00:09:08,089
like this you've got an image you could

00:09:06,470 --> 00:09:09,680
have a base a let's say this is just an

00:09:08,089 --> 00:09:11,959
empty layer that starts off the image

00:09:09,680 --> 00:09:13,610
let us say we have a bun - this is like

00:09:11,959 --> 00:09:16,459
a big layer with all the bits for a bun

00:09:13,610 --> 00:09:18,230
- you then might have go so you've got

00:09:16,459 --> 00:09:21,380
just the bits that you would add onto

00:09:18,230 --> 00:09:24,470
and a bunt to put go on top so if I run

00:09:21,380 --> 00:09:24,980
apt-get go inside a bun - just those

00:09:24,470 --> 00:09:26,720
diffs

00:09:24,980 --> 00:09:29,089
over a base of buns who gets stored in

00:09:26,720 --> 00:09:33,110
that layer and then I might have my app

00:09:29,089 --> 00:09:37,940
which is a layer on top so then when you

00:09:33,110 --> 00:09:39,950
want your app you actually have the same

00:09:37,940 --> 00:09:41,660
requirements you still need to go you

00:09:39,950 --> 00:09:45,620
still need a bun - you still need a base

00:09:41,660 --> 00:09:47,779
layer but now you want your app to be

00:09:45,620 --> 00:09:53,450
put on top of that so you still want to

00:09:47,779 --> 00:09:54,950
just save the doubters but you can share

00:09:53,450 --> 00:09:56,149
those layers which makes that really

00:09:54,950 --> 00:09:59,060
official you don't actually have to copy

00:09:56,149 --> 00:10:00,410
around this whole massive tar file we're

00:09:59,060 --> 00:10:03,380
just copying around the bits that are

00:10:00,410 --> 00:10:06,350
different and caching all the shared

00:10:03,380 --> 00:10:09,440
bits so if we think about that in terms

00:10:06,350 --> 00:10:12,740
of the staging process what we could do

00:10:09,440 --> 00:10:14,779
is we take your code we run the build

00:10:12,740 --> 00:10:19,640
pack and instead of tearing up a

00:10:14,779 --> 00:10:23,390
directory we just exported image so what

00:10:19,640 --> 00:10:24,860
we do is we just take the deltas that's

00:10:23,390 --> 00:10:27,380
really what would have been the contents

00:10:24,860 --> 00:10:31,820
of the tar file and we store them as an

00:10:27,380 --> 00:10:39,250
extra image on top of the others at the

00:10:31,820 --> 00:10:42,230
end all right so you've now got an image

00:10:39,250 --> 00:10:44,990
how do we actually run that well now all

00:10:42,230 --> 00:10:46,930
we do to run the image is we ask our

00:10:44,990 --> 00:10:49,190
foundry hey please run this image

00:10:46,930 --> 00:10:51,769
because actually we already have support

00:10:49,190 --> 00:10:53,690
for running docker images in cloud

00:10:51,769 --> 00:10:56,570
foundry and those images are basically

00:10:53,690 --> 00:10:59,120
the same format right now so we know how

00:10:56,570 --> 00:11:02,270
to do that so actually all we have to do

00:10:59,120 --> 00:11:03,750
is make staging explore that OCI image

00:11:02,270 --> 00:11:06,330
and we have all the rest of

00:11:03,750 --> 00:11:07,440
Machinery because right now in Cloud

00:11:06,330 --> 00:11:09,690
Foundry you have two different

00:11:07,440 --> 00:11:12,150
mechanisms for anything's you've got

00:11:09,690 --> 00:11:15,150
running an OC eye image and you've got

00:11:12,150 --> 00:11:16,710
running a droplet based app but actually

00:11:15,150 --> 00:11:26,580
if you think about it all we have to do

00:11:16,710 --> 00:11:29,220
is get rid of that one and now you've

00:11:26,580 --> 00:11:32,460
got two ways two very good ways of

00:11:29,220 --> 00:11:35,220
converting your code into an image you

00:11:32,460 --> 00:11:37,920
can use a docker file has a lot of

00:11:35,220 --> 00:11:41,430
restrictions doesn't have a big library

00:11:37,920 --> 00:11:42,720
of things that bill packs have etc but

00:11:41,430 --> 00:11:43,980
it's a really nice way of doing it we

00:11:42,720 --> 00:11:46,620
can't patch your roots festival you

00:11:43,980 --> 00:11:50,570
afterwards if you go down that path but

00:11:46,620 --> 00:11:54,600
it works right that's a valid approach

00:11:50,570 --> 00:11:58,020
alternatively you can use CF push and

00:11:54,600 --> 00:11:59,940
you can push your code we will stage it

00:11:58,020 --> 00:12:04,110
we will run the bill pack against it and

00:11:59,940 --> 00:12:07,770
we'll still produce a no CI image in a

00:12:04,110 --> 00:12:10,110
registry which you can now run any way

00:12:07,770 --> 00:12:12,150
you'd like in this cloud foundry in

00:12:10,110 --> 00:12:14,510
another cloud foundry in a different

00:12:12,150 --> 00:12:17,940
Orchestrator entirely if you'd like in

00:12:14,510 --> 00:12:22,710
either way you've got an image and you

00:12:17,940 --> 00:12:24,540
run it so there's no tarring you've got

00:12:22,710 --> 00:12:26,670
oti images all the way through the stack

00:12:24,540 --> 00:12:28,560
simplifies everything as well as being

00:12:26,670 --> 00:12:30,450
faster and we can get rid of all these

00:12:28,560 --> 00:12:32,610
restrictions that we used to have about

00:12:30,450 --> 00:12:34,710
it being a single directory and about

00:12:32,610 --> 00:12:37,560
you not being able to manage what Rufus

00:12:34,710 --> 00:12:39,980
you have anything it's just pretty cool

00:12:37,560 --> 00:12:44,070
actually

00:12:39,980 --> 00:12:46,440
son in case there's a doctor Nick in the

00:12:44,070 --> 00:12:50,040
front row about to predict a problem are

00:12:46,440 --> 00:12:51,810
there any problems with this I think you

00:12:50,040 --> 00:12:54,320
should write down your problem and then

00:12:51,810 --> 00:12:57,459
see if we've covered it

00:12:54,320 --> 00:12:57,459
[Music]

00:12:57,740 --> 00:13:02,339
that never never ask a witness if you

00:13:00,570 --> 00:13:05,399
don't know what the answer will be I'm

00:13:02,339 --> 00:13:07,589
worried now so the first problem I

00:13:05,399 --> 00:13:11,160
suspect people will ask is what about

00:13:07,589 --> 00:13:12,540
Patrick the second problem I think

00:13:11,160 --> 00:13:14,820
people might ask is what about existing

00:13:12,540 --> 00:13:17,639
bill packs that might be working in the

00:13:14,820 --> 00:13:19,680
current way and the third thing is

00:13:17,639 --> 00:13:21,959
probably what about patching with maybe

00:13:19,680 --> 00:13:24,480
more exclamation marks let's talk about

00:13:21,959 --> 00:13:25,889
patching so that's a real big thing and

00:13:24,480 --> 00:13:27,570
that's why we always talk about we need

00:13:25,889 --> 00:13:31,019
the bill PACs flow because of patching

00:13:27,570 --> 00:13:32,610
the resurface this is why you have a

00:13:31,019 --> 00:13:35,339
problem with patching it's because if

00:13:32,610 --> 00:13:39,720
you bake this all into one image then

00:13:35,339 --> 00:13:41,579
when you have a CVE a security flaw in

00:13:39,720 --> 00:13:42,000
one of the layers you've now got a

00:13:41,579 --> 00:13:44,690
problem

00:13:42,000 --> 00:13:47,250
you now have to restage all your layers

00:13:44,690 --> 00:13:48,510
which is a big problem and now you don't

00:13:47,250 --> 00:13:51,600
have immutability and what you're going

00:13:48,510 --> 00:13:53,820
to do and the way that bill pat based

00:13:51,600 --> 00:13:56,100
apps solve this is really just by

00:13:53,820 --> 00:13:57,000
ignoring it right what they do is they

00:13:56,100 --> 00:14:00,870
say I'll be fine

00:13:57,000 --> 00:14:02,399
and they take a tar file and they just

00:14:00,870 --> 00:14:05,550
change the root surface underneath it

00:14:02,399 --> 00:14:08,250
and put the tar file back actually we

00:14:05,550 --> 00:14:10,829
can do that so all you need to do is say

00:14:08,250 --> 00:14:12,870
this one's got a problem in it we need

00:14:10,829 --> 00:14:16,199
to patch it well okay

00:14:12,870 --> 00:14:18,269
so that image had an ID you create the

00:14:16,199 --> 00:14:19,709
IDs by combining the layer IDs together

00:14:18,269 --> 00:14:22,800
that's how these ideas get crated so

00:14:19,709 --> 00:14:26,339
everything's immutable we could create

00:14:22,800 --> 00:14:30,810
another and we'll just patch that layer

00:14:26,339 --> 00:14:33,180
here we regenerate that and we move the

00:14:30,810 --> 00:14:34,890
layer back on top if you actually think

00:14:33,180 --> 00:14:37,790
about it that's literally just untiring

00:14:34,890 --> 00:14:43,290
right that's I'm touring in like a

00:14:37,790 --> 00:14:44,850
format right just mats it we just

00:14:43,290 --> 00:14:46,529
created a new image right we haven't

00:14:44,850 --> 00:14:49,380
actually done anything magic all we've

00:14:46,529 --> 00:14:52,290
actually done is created a new image and

00:14:49,380 --> 00:14:54,569
shared the layers so if you think about

00:14:52,290 --> 00:14:57,540
when you create an app normally your new

00:14:54,569 --> 00:14:59,339
go line app all you've actually done is

00:14:57,540 --> 00:15:01,139
said well this shares all the layers

00:14:59,339 --> 00:15:03,560
with this one and I've got a new layer

00:15:01,139 --> 00:15:03,560
on top

00:15:05,020 --> 00:15:15,770
yeah why not

00:15:06,700 --> 00:15:17,450
it's just the rebase right yeah so this

00:15:15,770 --> 00:15:20,210
actually actually all this is actually

00:15:17,450 --> 00:15:21,140
doing is empowering right if you

00:15:20,210 --> 00:15:23,480
actually think about what we've actually

00:15:21,140 --> 00:15:25,220
done is taken that top on and reapplied

00:15:23,480 --> 00:15:27,010
it right and then we've just used a

00:15:25,220 --> 00:15:29,390
layered file systems do it instead of

00:15:27,010 --> 00:15:33,530
untiring every time but it's the same

00:15:29,390 --> 00:15:35,570
exact operation that we've done and now

00:15:33,530 --> 00:15:38,510
you've got a new image um what's nice

00:15:35,570 --> 00:15:40,640
now is instead of relying on Bosh to

00:15:38,510 --> 00:15:42,440
push out the new route FS to all of your

00:15:40,640 --> 00:15:45,800
cells then it's a sort of side effect

00:15:42,440 --> 00:15:48,410
all the droplets will get re extracted

00:15:45,800 --> 00:15:50,480
to these new route surfaces as the

00:15:48,410 --> 00:15:52,870
containers come back up you can now

00:15:50,480 --> 00:15:56,930
manage this in the platform so now

00:15:52,870 --> 00:15:59,840
you've got a new ID corresponding to

00:15:56,930 --> 00:16:02,540
this image and we can actually just use

00:15:59,840 --> 00:16:03,650
the AVO to roll that image out and we

00:16:02,540 --> 00:16:06,740
can roll out properly

00:16:03,650 --> 00:16:07,940
know which versions are running where is

00:16:06,740 --> 00:16:09,860
your staging environment running a

00:16:07,940 --> 00:16:12,200
different version then your production

00:16:09,860 --> 00:16:14,420
environment etc if you want to lock it

00:16:12,200 --> 00:16:16,400
to a particular version that wasn't

00:16:14,420 --> 00:16:18,020
patched and run that locally you know

00:16:16,400 --> 00:16:20,060
how to do that it's got an ID and it's

00:16:18,020 --> 00:16:21,950
immutable so you can debug the problem

00:16:20,060 --> 00:16:25,640
that only happens in one version or we

00:16:21,950 --> 00:16:27,320
roll back the reads fast for example and

00:16:25,640 --> 00:16:28,970
that you just run as a container right

00:16:27,320 --> 00:16:30,680
that's just the container it's just a no

00:16:28,970 --> 00:16:33,230
CI image you can use a standard

00:16:30,680 --> 00:16:36,170
container ecosystem use two tools to run

00:16:33,230 --> 00:16:37,940
it it's just the just an image with a

00:16:36,170 --> 00:16:41,180
little bit of magic because we can

00:16:37,940 --> 00:16:42,680
rebase these images what would that mean

00:16:41,180 --> 00:16:44,570
it would mean that writing build packs

00:16:42,680 --> 00:16:46,790
could potentially be as easy as writing

00:16:44,570 --> 00:16:48,380
docker files which is really nice

00:16:46,790 --> 00:16:50,600
because actually Dokka files aren't even

00:16:48,380 --> 00:16:53,240
that easy to write a lot of the time

00:16:50,600 --> 00:16:55,730
these these aren't great and they have a

00:16:53,240 --> 00:16:57,440
bill PACs have a lot of advantages but

00:16:55,730 --> 00:16:58,610
at the moment as soon as you get to one

00:16:57,440 --> 00:17:00,860
of these situations where you're

00:16:58,610 --> 00:17:03,320
restricted by bill packs people go

00:17:00,860 --> 00:17:05,090
around the platform and what they do is

00:17:03,320 --> 00:17:08,120
they actually just go create a docker

00:17:05,090 --> 00:17:09,860
file create an immutable image that they

00:17:08,120 --> 00:17:12,080
run once with an app get and then use

00:17:09,860 --> 00:17:14,600
the platform to push it and now we can't

00:17:12,080 --> 00:17:16,460
patch it we can't deal with it it's not

00:17:14,600 --> 00:17:18,080
all the benefits of the build platform

00:17:16,460 --> 00:17:21,320
right it's gone out of the system

00:17:18,080 --> 00:17:23,000
because we made it hard so give him that

00:17:21,320 --> 00:17:24,590
people are already doing this we can

00:17:23,000 --> 00:17:26,630
make it something that we can actually

00:17:24,590 --> 00:17:29,600
help them do and keep them within the

00:17:26,630 --> 00:17:32,320
system and that way we produce those

00:17:29,600 --> 00:17:34,790
damages and we run that OCI images and

00:17:32,320 --> 00:17:39,130
things are faster and they're simpler

00:17:34,790 --> 00:17:44,810
and there may be a bit better as well

00:17:39,130 --> 00:17:46,010
she deserves a gift we've left lots of

00:17:44,810 --> 00:17:48,500
times for question because I think I'd

00:17:46,010 --> 00:17:55,430
be lots of questions because dr. Nick is

00:17:48,500 --> 00:17:57,020
here I should say that so we have like a

00:17:55,430 --> 00:17:58,880
document that describes us in a lot more

00:17:57,020 --> 00:18:00,740
detail this is quite my level so there

00:17:58,880 --> 00:18:03,250
are some things that we're not diving

00:18:00,740 --> 00:18:05,870
into in the slides about how this works

00:18:03,250 --> 00:18:12,400
that we're very happy to go into this

00:18:05,870 --> 00:18:12,400
not enough time here but captures later

00:18:39,280 --> 00:18:47,630
right so we can relax some of the

00:18:44,390 --> 00:18:49,100
restrictions like /ab existing bill

00:18:47,630 --> 00:18:50,420
packs might be relying on some of those

00:18:49,100 --> 00:18:52,460
restrictions so for example they might

00:18:50,420 --> 00:18:54,560
during staging write to some file that

00:18:52,460 --> 00:18:56,450
they expect won't survive into the

00:18:54,560 --> 00:18:58,970
running image and there's nothing

00:18:56,450 --> 00:19:00,620
fundamental about this that requires so

00:18:58,970 --> 00:19:02,660
what you can do is when you save that

00:19:00,620 --> 00:19:15,070
Delta layer you can just save the stuff

00:19:02,660 --> 00:19:19,520
in right right exactly like in practice

00:19:15,070 --> 00:19:21,470
the bill PACs team can actually opt into

00:19:19,520 --> 00:19:23,090
some of this stuff and take advantage of

00:19:21,470 --> 00:19:24,890
it and people who want to write their

00:19:23,090 --> 00:19:27,470
own bill pack say a Haskell bill pack

00:19:24,890 --> 00:19:29,220
can opt in for some of this stuff at the

00:19:27,470 --> 00:19:30,390
moment if you're right if you've got

00:19:29,220 --> 00:19:31,950
Hostel app what you end up doing is

00:19:30,390 --> 00:19:34,740
writing a docker phone and not writing a

00:19:31,950 --> 00:19:37,710
bill pack which is awful and so this way

00:19:34,740 --> 00:19:40,799
we can say you can opt in and what you

00:19:37,710 --> 00:19:42,780
can do is you can say what route FS you

00:19:40,799 --> 00:19:45,030
would like your staging to run in so it

00:19:42,780 --> 00:19:47,490
doesn't have to be the standard one that

00:19:45,030 --> 00:19:49,230
way you can use a minimal route surface

00:19:47,490 --> 00:19:50,400
you don't have all the packages that we

00:19:49,230 --> 00:19:52,710
have to maintain in the current routes

00:19:50,400 --> 00:19:54,150
of s in case anyone needs them so you

00:19:52,710 --> 00:19:55,740
have a small minimal package it's

00:19:54,150 --> 00:19:57,570
actually better from a school interview

00:19:55,740 --> 00:19:58,500
and easier to manage and you can put

00:19:57,570 --> 00:20:01,260
whatever you like in that

00:19:58,500 --> 00:20:03,570
and then you opt in while you're doing

00:20:01,260 --> 00:20:05,580
that to saying actually we're going to

00:20:03,570 --> 00:20:06,900
run staging in the new way which means

00:20:05,580 --> 00:20:11,510
we're going to save the whole thing so

00:20:06,900 --> 00:20:11,510
you have to be willing to deal with that

00:20:26,900 --> 00:20:34,080
yeah

00:20:29,090 --> 00:20:36,480
yeah this is right no is it's a total

00:20:34,080 --> 00:20:39,690
topic and it's a totally valid topic

00:20:36,480 --> 00:20:43,110
I've maybe said similar things and had

00:20:39,690 --> 00:20:45,179
similar ideas I decided we should raise

00:20:43,110 --> 00:20:50,909
the temperature the water one degree

00:20:45,179 --> 00:20:53,030
before then draining the ocean but yes

00:20:50,909 --> 00:20:55,950
you totally could I think Bosch has

00:20:53,030 --> 00:20:58,159
amazing ideas in it but some of the

00:20:55,950 --> 00:21:01,830
pieces of Bosch were clearly designed

00:20:58,159 --> 00:21:04,289
before we'd seen containers like images

00:21:01,830 --> 00:21:12,000
and that's the same about this I really

00:21:04,289 --> 00:21:13,740
was right so is it's I think a lot of

00:21:12,000 --> 00:21:17,010
these had the fundamental exact correct

00:21:13,740 --> 00:21:19,230
ideas but then other new things have

00:21:17,010 --> 00:21:22,020
happened to the side and we can actually

00:21:19,230 --> 00:21:25,140
pull some of those ideas back in and

00:21:22,020 --> 00:21:27,299
make quite big advances so one area

00:21:25,140 --> 00:21:29,669
where it was sort of designed before

00:21:27,299 --> 00:21:32,789
containers and still has lots of

00:21:29,669 --> 00:21:34,470
advantages over shippable containers but

00:21:32,789 --> 00:21:36,990
now it's suffering for some of the

00:21:34,470 --> 00:21:39,840
restrictions and you can kind of combine

00:21:36,990 --> 00:21:43,049
them and get both is this and I think

00:21:39,840 --> 00:21:45,720
another is it is a bit like whenever you

00:21:43,049 --> 00:21:47,580
first trained someone with Bosch you'll

00:21:45,720 --> 00:21:49,559
find the writer package where they do an

00:21:47,580 --> 00:21:51,960
app get in it and then get super

00:21:49,559 --> 00:21:53,489
confused when the stem cell rolls and

00:21:51,960 --> 00:21:56,070
their thing is lost and nothing works

00:21:53,489 --> 00:21:57,090
any longer right and there's actually no

00:21:56,070 --> 00:22:00,409
reason for that having everything

00:21:57,090 --> 00:22:04,080
involve recap packages happens primarily

00:22:00,409 --> 00:22:06,330
because we didn't have containers right

00:22:04,080 --> 00:22:08,999
so that's how you container things is

00:22:06,330 --> 00:22:11,190
you compiled the package right made an

00:22:08,999 --> 00:22:13,499
immutable thing and then extracted it in

00:22:11,190 --> 00:22:15,929
a known directory structure and replaced

00:22:13,499 --> 00:22:19,830
it right that's there that was

00:22:15,929 --> 00:22:21,659
containers early if we actually use

00:22:19,830 --> 00:22:25,200
containers in that we could probably

00:22:21,659 --> 00:22:44,519
make big advantage big advances see our

00:22:25,200 --> 00:22:47,129
talk at CF Summit 2070 right right right

00:22:44,519 --> 00:22:49,080
there can be some big caching advantages

00:22:47,129 --> 00:23:15,929
just just on its own to some of this

00:22:49,080 --> 00:23:19,919
stuff so that basically there's two

00:23:15,929 --> 00:23:22,320
answers to this so first answer is Diego

00:23:19,919 --> 00:23:23,999
right so we actually know within Diego

00:23:22,320 --> 00:23:25,590
how to roll things out which we do all

00:23:23,999 --> 00:23:30,179
the time right that's how you push your

00:23:25,590 --> 00:23:33,539
new code out right a staged artifact is

00:23:30,179 --> 00:23:34,919
a packaged hash in see atoms right so we

00:23:33,539 --> 00:23:36,779
already really kind of do this with the

00:23:34,919 --> 00:23:38,820
droplet right when your app changes when

00:23:36,779 --> 00:23:40,710
you've restage a new droplet we roll the

00:23:38,820 --> 00:23:43,889
new droplet out that's really the same

00:23:40,710 --> 00:23:46,109
process the second question is how you

00:23:43,889 --> 00:23:48,929
create the new app to create the new

00:23:46,109 --> 00:23:51,029
image and it's basically just get right

00:23:48,929 --> 00:23:54,779
it's a rebase right like an image is a

00:23:51,029 --> 00:23:56,120
set of layers with a hash where the ID

00:23:54,779 --> 00:23:58,340
of the whole

00:23:56,120 --> 00:24:01,220
is calculated by compassion the

00:23:58,340 --> 00:24:03,460
combination of all the IDS so you keep

00:24:01,220 --> 00:24:07,070
having a unique ID all we're doing is

00:24:03,460 --> 00:24:09,440
doing a rebase in hip terms and you can

00:24:07,070 --> 00:24:11,270
find people who've done proof of concept

00:24:09,440 --> 00:24:13,190
tools that do rebase is with existing

00:24:11,270 --> 00:24:15,800
docker images if you want to rebase a

00:24:13,190 --> 00:24:17,720
docker image those exist they're

00:24:15,800 --> 00:24:21,500
currently kind of hacky but they there

00:24:17,720 --> 00:24:23,960
are lots of them as dr. nick says

00:24:21,500 --> 00:24:25,940
there's only like a relatively small

00:24:23,960 --> 00:24:27,530
number of bill packs in practice and

00:24:25,940 --> 00:24:30,020
they already go to a huge amount of

00:24:27,530 --> 00:24:31,340
trouble to work around this stuff in

00:24:30,020 --> 00:24:33,530
their current model if you see what I

00:24:31,340 --> 00:24:36,110
mean to make this stuff work so this

00:24:33,530 --> 00:24:38,090
isn't a huge burden for them to watch

00:24:36,110 --> 00:24:39,560
out for they're the minor edge cases if

00:24:38,090 --> 00:24:41,060
you rebase right there are some minor

00:24:39,560 --> 00:24:42,890
edge cases if you rebase right like if

00:24:41,060 --> 00:24:44,600
two layers have done the same thing then

00:24:42,890 --> 00:24:47,270
a rebase can have a conflict right

00:24:44,600 --> 00:24:49,070
that's the problem but actually most of

00:24:47,270 --> 00:24:50,810
the time in actual practice I don't

00:24:49,070 --> 00:24:59,240
think you hit that very often and it's

00:24:50,810 --> 00:25:00,740
pretty clear when you have I think one

00:24:59,240 --> 00:25:02,780
of the other nice things about it is it

00:25:00,740 --> 00:25:04,910
it takes a lot of the magic out of the

00:25:02,780 --> 00:25:06,620
platform potentially because instead of

00:25:04,910 --> 00:25:08,630
having this sort of push process it's

00:25:06,620 --> 00:25:10,580
really quite opaque with ov3 is making

00:25:08,630 --> 00:25:12,830
some of that better you now have a

00:25:10,580 --> 00:25:14,840
staging process that produces an image

00:25:12,830 --> 00:25:16,820
and a running process that could use

00:25:14,840 --> 00:25:18,140
that image and actually you can use any

00:25:16,820 --> 00:25:19,580
tooling to create this image these

00:25:18,140 --> 00:25:21,200
images potentially and you have this

00:25:19,580 --> 00:25:23,390
thing that's shippable and

00:25:21,200 --> 00:25:25,190
understandable in itself which is a lot

00:25:23,390 --> 00:25:28,340
less magic and kind of exists outside

00:25:25,190 --> 00:25:31,160
the platform as a shared thing that gets

00:25:28,340 --> 00:25:32,690
worked on by the platform which I think

00:25:31,160 --> 00:25:34,600
will have a lot of advantages over time

00:25:32,690 --> 00:25:38,650
for like how we can make things more

00:25:34,600 --> 00:25:38,650
understandable and simple

00:25:47,929 --> 00:25:51,379
how do you see that working because

00:25:49,820 --> 00:25:54,139
presumably at the moment it will be a

00:25:51,379 --> 00:25:56,809
new boss deploying a new barrel dragons

00:25:54,139 --> 00:26:01,490
would that workflow change or would you

00:25:56,809 --> 00:26:03,559
see different interface of how people I

00:26:01,490 --> 00:26:04,789
feel there be a mic so that said the

00:26:03,559 --> 00:26:05,960
bill paxton would use a slightly

00:26:04,789 --> 00:26:07,429
different interface because it wouldn't

00:26:05,960 --> 00:26:09,710
be a Bosch deploy anymore in the bill

00:26:07,429 --> 00:26:10,850
paxton right we probably could make it a

00:26:09,710 --> 00:26:12,230
Bosch deploy whether you could like

00:26:10,850 --> 00:26:14,119
automate it so they're like when the new

00:26:12,230 --> 00:26:16,220
stem cell rolls out and we do that with

00:26:14,119 --> 00:26:17,749
admin bill packs right like when the bad

00:26:16,220 --> 00:26:23,240
move or fax you do a boss release and

00:26:17,749 --> 00:26:25,759
it's sort of updates them in this right

00:26:23,240 --> 00:26:27,379
so it's actually if you think about it's

00:26:25,759 --> 00:26:29,059
very close to having Bill packs actually

00:26:27,379 --> 00:26:30,919
so admin bill packs are really they used

00:26:29,059 --> 00:26:33,350
to be just deployed on the cell with

00:26:30,919 --> 00:26:35,749
Bosch we just bashed deploy them and

00:26:33,350 --> 00:26:37,429
they sit next to the containers but then

00:26:35,749 --> 00:26:39,350
we wanted people to be able to have an

00:26:37,429 --> 00:26:41,509
API for changing what admin bill packs

00:26:39,350 --> 00:26:43,940
were they're dynamically so we added an

00:26:41,509 --> 00:26:46,309
API for doing that and then we just tell

00:26:43,940 --> 00:26:48,950
the cells right I'm here and the bill

00:26:46,309 --> 00:26:51,440
packs you have with the staging request

00:26:48,950 --> 00:26:54,139
and they download them it's really the

00:26:51,440 --> 00:26:56,929
same thing we add a new admin API that

00:26:54,139 --> 00:26:58,999
said CF update bill pack and then give

00:26:56,929 --> 00:27:00,710
it the new base image for that bill pack

00:26:58,999 --> 00:27:01,600
and anything that's running on that we

00:27:00,710 --> 00:27:03,559
just rebase

00:27:01,600 --> 00:27:06,110
inside there's just an in-memory

00:27:03,559 --> 00:27:08,389
operation and now it's got a new hash

00:27:06,110 --> 00:27:10,279
and it rolls out so there's some

00:27:08,389 --> 00:27:11,450
machinery that you have to build around

00:27:10,279 --> 00:27:17,379
that but there's quite a lot of

00:27:11,450 --> 00:27:17,379
advantages to it Nick

00:27:21,710 --> 00:27:27,659
yeah so you don't have to write we could

00:27:25,679 --> 00:27:29,010
be using some external thing but I think

00:27:27,659 --> 00:27:31,380
it makes a lot of sense to have an

00:27:29,010 --> 00:27:33,510
integrated registry right so droplets we

00:27:31,380 --> 00:27:35,639
have an integrated blob store this is

00:27:33,510 --> 00:27:38,789
really kind of an extension of that

00:27:35,639 --> 00:27:40,830
writing especially with at the moment if

00:27:38,789 --> 00:27:42,480
you think about the docker flow there is

00:27:40,830 --> 00:27:44,100
kind of a there's a big weakness that we

00:27:42,480 --> 00:27:46,289
haven't figured out quite how to solve

00:27:44,100 --> 00:27:48,779
in the docker flow which is if you push

00:27:46,289 --> 00:27:50,789
the dock wrap at stage in time and you

00:27:48,779 --> 00:27:54,090
give us the privileges to pull that up

00:27:50,789 --> 00:27:56,370
at stage in time at running time is not

00:27:54,090 --> 00:27:57,480
clear how how long we should hold on to

00:27:56,370 --> 00:27:59,039
that username and password because it

00:27:57,480 --> 00:28:01,679
doesn't fit into the Cloud Foundry you a

00:27:59,039 --> 00:28:03,809
model right what you really want is the

00:28:01,679 --> 00:28:06,659
permissions on that image in that

00:28:03,809 --> 00:28:08,940
registry to be CF permissions to be

00:28:06,659 --> 00:28:10,559
organ space permissions so then when if

00:28:08,940 --> 00:28:13,889
you push your app anyone in your space

00:28:10,559 --> 00:28:16,740
can run and download the staged OCI

00:28:13,889 --> 00:28:18,480
image from the app etc so that's why I

00:28:16,740 --> 00:28:20,070
would see it being part of the platform

00:28:18,480 --> 00:28:28,200
properly in Suede's with you AAA

00:28:20,070 --> 00:28:29,750
and with this rebasing concept oh that

00:28:28,200 --> 00:28:44,669
could have been either there was a

00:28:29,750 --> 00:28:45,720
concurrency issue right to be on this

00:28:44,669 --> 00:28:47,909
thing about go along is you don't

00:28:45,720 --> 00:28:49,559
actually need the container like the go

00:28:47,909 --> 00:28:51,240
long is a terrible example because in

00:28:49,559 --> 00:28:53,880
practice it's a static binary so just

00:28:51,240 --> 00:28:55,649
run it I go Lang is like why we should

00:28:53,880 --> 00:28:58,830
never invented containers just ship

00:28:55,649 --> 00:29:01,130
going around imagine I said Ruby makes a

00:28:58,830 --> 00:29:01,130
lot more sense

00:29:02,800 --> 00:29:05,970
[Music]

00:29:30,930 --> 00:29:37,360
yeah I mean so once we're using images

00:29:34,990 --> 00:29:38,710
throughout we actually have a lot of

00:29:37,360 --> 00:29:41,200
options for doing this sort of thing

00:29:38,710 --> 00:29:42,790
right actually once we're just taking OC

00:29:41,200 --> 00:29:44,110
homages and running an OC homage and

00:29:42,790 --> 00:29:46,390
they're two separates that's rather me

00:29:44,110 --> 00:29:48,820
integrated if you want to go and run a

00:29:46,390 --> 00:29:50,410
separate CI thing that's doing it

00:29:48,820 --> 00:29:52,660
differently that would integrate into

00:29:50,410 --> 00:29:55,630
the system in a very clean kind of

00:29:52,660 --> 00:29:56,830
obvious way so it opens up more of that

00:29:55,630 --> 00:29:59,620
stuff we've kind of got this kind of

00:29:56,830 --> 00:30:03,160
very fixed model right now

00:29:59,620 --> 00:30:05,440
and I would see the first step as we

00:30:03,160 --> 00:30:08,320
kind of open up that we we implement the

00:30:05,440 --> 00:30:09,790
existing model on top of this flow but

00:30:08,320 --> 00:30:12,330
that then maybe opens up some

00:30:09,790 --> 00:30:12,330
possibilities

00:30:24,730 --> 00:30:27,730
right

00:30:40,559 --> 00:30:44,770
so they're all the things the bill

00:30:43,480 --> 00:30:47,500
packed so if you think about Bill pack

00:30:44,770 --> 00:30:49,630
what it does is it runs detect first to

00:30:47,500 --> 00:30:51,940
see if it should run but then the main

00:30:49,630 --> 00:30:53,950
things are one it compiles your source

00:30:51,940 --> 00:30:56,800
code into something that can run and two

00:30:53,950 --> 00:30:58,420
is it it writes out some metadata which

00:30:56,800 --> 00:31:00,910
describes how to run it I what start

00:30:58,420 --> 00:31:03,820
command should be run basically right

00:31:00,910 --> 00:31:06,010
and all those things can be described in

00:31:03,820 --> 00:31:07,540
an image spec so when I say all we do is

00:31:06,010 --> 00:31:09,040
we take the layer diff and now we've

00:31:07,540 --> 00:31:12,130
created an image that's not quite true

00:31:09,040 --> 00:31:14,470
we take the diff and that's how you

00:31:12,130 --> 00:31:17,530
create the root file system part of the

00:31:14,470 --> 00:31:19,330
image the method beta we take we get by

00:31:17,530 --> 00:31:20,950
running bin detects bin release rather

00:31:19,330 --> 00:31:23,800
right so we just used a bill pack spec

00:31:20,950 --> 00:31:26,740
to say what's the start command and we

00:31:23,800 --> 00:31:28,030
put that in the image and now you can do

00:31:26,740 --> 00:31:30,160
some interesting things down this line

00:31:28,030 --> 00:31:31,620
right so what you could do one path and

00:31:30,160 --> 00:31:34,960
you see quite a lot in the docker

00:31:31,620 --> 00:31:36,550
ecosystem is inside the registry inside

00:31:34,960 --> 00:31:38,830
the github repository that have a docker

00:31:36,550 --> 00:31:40,630
file which is the dock file to run their

00:31:38,830 --> 00:31:42,610
app there's nothing that stops you

00:31:40,630 --> 00:31:44,679
having a build pack file right which

00:31:42,610 --> 00:31:46,210
says what you should what Bill pack you

00:31:44,679 --> 00:31:48,190
should run to run this app and maybe

00:31:46,210 --> 00:31:50,470
even lock subversion you could lock the

00:31:48,190 --> 00:31:52,600
exact bill pack to run your app with and

00:31:50,470 --> 00:31:54,250
the platform could detect that do the

00:31:52,600 --> 00:31:55,630
station for you and run it for example

00:31:54,250 --> 00:31:58,150
there's some interesting things you

00:31:55,630 --> 00:31:59,950
could do along those lines and then that

00:31:58,150 --> 00:32:01,750
build pack file could say what start

00:31:59,950 --> 00:32:03,640
command they wanted for example so

00:32:01,750 --> 00:32:05,770
there's some there's some options that

00:32:03,640 --> 00:32:07,480
kind of open up some of this is very

00:32:05,770 --> 00:32:08,830
blurry there's like yeah you could kind

00:32:07,480 --> 00:32:11,280
of do some interesting things down that

00:32:08,830 --> 00:32:11,280
path but

00:32:15,740 --> 00:32:20,580
right that's so that's we were still

00:32:18,570 --> 00:32:26,700
running staging and stages producing a

00:32:20,580 --> 00:32:28,950
no CI image time as we said I had a

00:32:26,700 --> 00:32:29,940
feeling we would run out of time with

00:32:28,950 --> 00:32:32,340
some questions left

00:32:29,940 --> 00:32:34,529
catches like we'd like loved to talk

00:32:32,340 --> 00:32:35,970
about this and this is very that we blur

00:32:34,529 --> 00:32:38,100
in a lot of detail so if you have input

00:32:35,970 --> 00:32:41,250
and edges we've not considered and

00:32:38,100 --> 00:32:42,720
definitely talk to us disclaimer no

00:32:41,250 --> 00:32:44,150
commitment this happens wouldn't it be

00:32:42,720 --> 00:32:46,590
nice

00:32:44,150 --> 00:32:48,990
[Music]

00:32:46,590 --> 00:32:48,990

YouTube URL: https://www.youtube.com/watch?v=DSTT0przx4g


