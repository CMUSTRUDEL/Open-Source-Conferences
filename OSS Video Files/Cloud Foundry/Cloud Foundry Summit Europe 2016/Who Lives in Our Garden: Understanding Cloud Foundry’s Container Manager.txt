Title: Who Lives in Our Garden: Understanding Cloud Foundry’s Container Manager
Publication date: 2016-09-30
Playlist: Cloud Foundry Summit Europe 2016
Description: 
	Who Lives in Our Garden: Understanding Cloud Foundry’s Container Manager - Maksim Zhylinski & Alexander Lomov, Altoros

Container technology has been a hot topic for years. With all its benefits and advantages, containers are often not well understood. The Garden container manager is a major component of Cloud Foundry and Diego, which it has already outgrown the boundaries of Cloud Foundry. Today, it is being used in a number independent projects. This talk is going to answer your most frequently asked questions about Garden, including: What is the difference between Docker and Garden? How secure Garden is? What do I need to know about security of Cloud Foundry containers? How to work with them? How can I use and benefit from Garden in my project? What are the best practices? How about the typical traps?

About Alexander Lomov
Alexander Lomov is a Cloud Foundry Engineer at Altoros. With extensive experience in Ruby, Go, and Python, he was involved in development of several BOSH CPIs and a number of other Cloud Foundry-related projects. A fan of the open source movement, Alexander has contributed to BOSH, Admin UI, Fog, etc.

About Maksim Zhylinski
Maksim Zhylinski is a Cloud Foundry Engineer at Altoros. He is an expert in cloud computing, networking, and Cloud Foundry BOSH, having worked on multiple BOSH CPIs, releases, and service brokers. Maksim has 6+ years of experience in all things Ruby, JavaScript, and Go, as well as extensive skills in server and client-side Web application development. He is an active member of Ruby and Go communities and a frequent contributor to open-source projects. Recent speaking experience: "Containers: What's Under the Hood," Cloud Foundry Meetup in Minsk
Captions: 
	00:00:00,000 --> 00:00:06,359
hello everyone I'm happy and proud to be

00:00:03,570 --> 00:00:12,960
here today thank you for coming

00:00:06,359 --> 00:00:16,910
my name is Maksim Zielinski and I work

00:00:12,960 --> 00:00:20,220
as an engineer in Alturas so and my talk

00:00:16,910 --> 00:00:22,260
called who lives in our garden and it's

00:00:20,220 --> 00:00:26,660
about containers and precisely

00:00:22,260 --> 00:00:26,660
it's about containers in Cloud Foundry

00:00:26,900 --> 00:00:33,059
what actually containers are well

00:00:30,240 --> 00:00:36,390
container is a combination of operating

00:00:33,059 --> 00:00:39,120
system primitives that allows separate

00:00:36,390 --> 00:00:42,450
out set of processes and make them

00:00:39,120 --> 00:00:49,079
pretend like they are in all operating

00:00:42,450 --> 00:00:51,660
system continues offer high level

00:00:49,079 --> 00:00:54,930
isolation with many applications running

00:00:51,660 --> 00:00:57,660
under the host operating system all of

00:00:54,930 --> 00:01:00,809
them sharing certain operating system

00:00:57,660 --> 00:01:05,580
libraries and always colonel

00:01:00,809 --> 00:01:10,580
so basically containers is just

00:01:05,580 --> 00:01:10,580
processes in in your operating system

00:01:10,729 --> 00:01:19,740
well and since they are don't have to

00:01:15,060 --> 00:01:21,900
load up operating system and provide

00:01:19,740 --> 00:01:25,020
almost no overhead you can create

00:01:21,900 --> 00:01:28,229
containers in a split second rather than

00:01:25,020 --> 00:01:30,150
minutes for virtual machines that makes

00:01:28,229 --> 00:01:33,060
containers perfect technology for

00:01:30,150 --> 00:01:38,390
different use cases like platform as a

00:01:33,060 --> 00:01:42,240
Service Cloud Foundry let's talk about

00:01:38,390 --> 00:01:46,079
history of containers implementation in

00:01:42,240 --> 00:01:49,710
called foundry containers was first

00:01:46,079 --> 00:01:54,470
class citizens from the very beginning

00:01:49,710 --> 00:01:58,439
of called foundry existence so in 2011

00:01:54,470 --> 00:02:00,869
first implementation of container

00:01:58,439 --> 00:02:06,810
manager was introduced in and its name

00:02:00,869 --> 00:02:12,870
was born it was written mostly in Ruby

00:02:06,810 --> 00:02:13,780
with the beats of C code in order in

00:02:12,870 --> 00:02:16,240
order to provide

00:02:13,780 --> 00:02:21,190
process isolation from host operating

00:02:16,240 --> 00:02:24,819
system and from other processes was used

00:02:21,190 --> 00:02:28,780
Linux namespaces feature it's a it's a

00:02:24,819 --> 00:02:31,360
configure cgroups for resource limiting

00:02:28,780 --> 00:02:41,170
and management it's also a kernel

00:02:31,360 --> 00:02:47,850
feature and pivot root system call to to

00:02:41,170 --> 00:02:52,870
filesystem isolation so that that habit

00:02:47,850 --> 00:02:55,739
was designed it was quite monolithic

00:02:52,870 --> 00:02:59,560
worden server which was providing

00:02:55,739 --> 00:03:04,810
service to worden faience da droplet

00:02:59,560 --> 00:03:08,319
execution agents talking to to warden by

00:03:04,810 --> 00:03:09,850
pratt above based protocol was coupled

00:03:08,319 --> 00:03:11,980
in a single application with the

00:03:09,850 --> 00:03:19,540
container manager which was responsible

00:03:11,980 --> 00:03:23,380
for container lifecycle routines so in

00:03:19,540 --> 00:03:25,660
in about 2014 brand new Cloud Foundry

00:03:23,380 --> 00:03:27,459
runtime was introduced called Diego

00:03:25,660 --> 00:03:33,040
instead of Google

00:03:27,459 --> 00:03:35,739
good old da it has a lot of cool

00:03:33,040 --> 00:03:38,769
features like smart orchestration and so

00:03:35,739 --> 00:03:40,900
on but I will not go into details as as

00:03:38,769 --> 00:03:45,549
far as my topic is about containers not

00:03:40,900 --> 00:03:48,040
not not the whole runtime and yeah as a

00:03:45,549 --> 00:03:53,709
part of new GA grunt I'm new container

00:03:48,040 --> 00:03:55,799
manager was introduced warden I mean

00:03:53,709 --> 00:04:00,060
garden sorry

00:03:55,799 --> 00:04:01,500
so what has changed garden was

00:04:00,060 --> 00:04:04,959
[Music]

00:04:01,500 --> 00:04:07,989
reimplemented in go programming language

00:04:04,959 --> 00:04:08,730
as as many other components of cloud

00:04:07,989 --> 00:04:11,680
foundry

00:04:08,730 --> 00:04:19,030
well basically garden stands for go

00:04:11,680 --> 00:04:21,789
warden but what most important garden

00:04:19,030 --> 00:04:25,780
was designed in a modular way what does

00:04:21,789 --> 00:04:30,900
it mean up story

00:04:25,780 --> 00:04:35,890
yeah okay here's a garden architecture

00:04:30,900 --> 00:04:38,260
steel garden clients which now is Diego

00:04:35,890 --> 00:04:41,790
cells talk to a garland server by

00:04:38,260 --> 00:04:47,020
prodigal it still prada both based but

00:04:41,790 --> 00:04:53,470
also garden provides HTTP restful api

00:04:47,020 --> 00:04:56,440
for like debugging purposes but in order

00:04:53,470 --> 00:04:59,380
to provide flexibility garden was

00:04:56,440 --> 00:05:02,620
decoupled from garden server was the

00:04:59,380 --> 00:05:05,590
kaput from container manager which now

00:05:02,620 --> 00:05:15,150
lives in separate component called

00:05:05,590 --> 00:05:17,910
back-end so garden provides unified

00:05:15,150 --> 00:05:21,480
contracts that does not depend on

00:05:17,910 --> 00:05:24,550
underlined containers implementation

00:05:21,480 --> 00:05:28,390
okay what begins are available today

00:05:24,550 --> 00:05:30,100
it's a garden Linux at the moment

00:05:28,390 --> 00:05:33,419
default Linux container back-end for

00:05:30,100 --> 00:05:36,100
cloud foundry and for graph for garden

00:05:33,419 --> 00:05:40,360
greenhouse it's a Windows container

00:05:36,100 --> 00:05:47,770
back-end and one more Linux began called

00:05:40,360 --> 00:05:51,669
Guardian garden looks back-end well it's

00:05:47,770 --> 00:05:54,940
just a successor of Wardens container

00:05:51,669 --> 00:05:57,370
and implementation it used same features

00:05:54,940 --> 00:05:59,220
to provide processes region like Linux

00:05:57,370 --> 00:06:03,640
namespaces cgroups

00:05:59,220 --> 00:06:05,620
layer it file system and so on but there

00:06:03,640 --> 00:06:09,690
is a killer feature was added to garden

00:06:05,620 --> 00:06:14,950
Linux back-end in addition to default

00:06:09,690 --> 00:06:16,560
native build pack lifecycle is a ability

00:06:14,950 --> 00:06:21,160
to run docker containers

00:06:16,560 --> 00:06:26,169
well how does it work first of all was

00:06:21,160 --> 00:06:29,500
dig a bit how our garden works garden as

00:06:26,169 --> 00:06:33,130
well as well as warden was uses layered

00:06:29,500 --> 00:06:36,070
file systems during the default build

00:06:33,130 --> 00:06:39,289
part lifecycle continue manager takes

00:06:36,070 --> 00:06:42,249
root of s basically Linux root

00:06:39,289 --> 00:06:45,439
filesystem and mounts in together with

00:06:42,249 --> 00:06:51,349
another layer with application beats

00:06:45,439 --> 00:06:56,389
using a ufs by default its flavored file

00:06:51,349 --> 00:06:58,849
system or optionally overlay FS to

00:06:56,389 --> 00:07:03,219
create a single single file system

00:06:58,849 --> 00:07:09,680
single mount point to to pivot route to

00:07:03,219 --> 00:07:11,689
okay and about docker images the

00:07:09,680 --> 00:07:15,259
carriages themselves consists out of

00:07:11,689 --> 00:07:19,069
layers each containing different

00:07:15,259 --> 00:07:22,879
supplied on top of previous layer well

00:07:19,069 --> 00:07:27,469
probably many of you have seen dagger

00:07:22,879 --> 00:07:29,629
dagger files you've seen from for

00:07:27,469 --> 00:07:34,069
example from boon to latest from window

00:07:29,629 --> 00:07:36,919
14 point oh four and a couple of

00:07:34,069 --> 00:07:41,379
comments to to install some software so

00:07:36,919 --> 00:07:46,610
we these commands creates new layers

00:07:41,379 --> 00:07:52,009
okay so in order to run docker image

00:07:46,610 --> 00:07:54,349
Garen just mount docker images image

00:07:52,009 --> 00:07:56,919
layers instead of built in root of s

00:07:54,349 --> 00:08:00,529
keeping the rest pretty much the same

00:07:56,919 --> 00:08:04,809
garden uses sly berries from Tucker

00:08:00,529 --> 00:08:07,149
actually the curves also implemented in

00:08:04,809 --> 00:08:11,569
programming language so it's quite easy

00:08:07,149 --> 00:08:15,050
so contents of continued exactly match

00:08:11,569 --> 00:08:22,009
the contains of the Association duck

00:08:15,050 --> 00:08:25,490
your image there are caveats of running

00:08:22,009 --> 00:08:29,839
docker images in cloud foundry you can

00:08:25,490 --> 00:08:36,949
use only dock your registry api of

00:08:29,839 --> 00:08:40,550
version two which is fine i think it it

00:08:36,949 --> 00:08:42,289
doesn't support private repos you can

00:08:40,550 --> 00:08:49,630
provide credentials you can use only

00:08:42,289 --> 00:08:49,630
public ones and the

00:08:50,130 --> 00:09:02,380
so Diego doesn't cash pulled pulled our

00:08:56,500 --> 00:09:05,170
images so you need access to to duck

00:09:02,380 --> 00:09:07,889
duck your registry every time you for

00:09:05,170 --> 00:09:12,269
example scale scale up your application

00:09:07,889 --> 00:09:17,260
for each new instance it has to pull the

00:09:12,269 --> 00:09:21,790
gear image so if for example docker

00:09:17,260 --> 00:09:26,620
registry is unavailable you can get into

00:09:21,790 --> 00:09:31,449
trouble so I took these three points

00:09:26,620 --> 00:09:37,180
from puritans documentation actually but

00:09:31,449 --> 00:09:41,100
I have to argue about point two and

00:09:37,180 --> 00:09:45,100
point three because well there is a

00:09:41,100 --> 00:09:48,160
project in cloud foundry incubator which

00:09:45,100 --> 00:09:51,579
calls Diego dr. Kashi release

00:09:48,160 --> 00:09:54,130
it's a Bosch release and what actually

00:09:51,579 --> 00:09:56,949
it does it it caches Thakur images

00:09:54,130 --> 00:10:04,120
pulled from from docker hub for example

00:09:56,949 --> 00:10:09,639
and well yo if you use these release

00:10:04,120 --> 00:10:12,190
yeah you know no longer rely on the crap

00:10:09,639 --> 00:10:17,470
availability for example and you can

00:10:12,190 --> 00:10:19,300
provide credentials for your private

00:10:17,470 --> 00:10:22,300
repos

00:10:19,300 --> 00:10:25,600
well downside is that first of all is

00:10:22,300 --> 00:10:30,639
still in incubator so it might be not

00:10:25,600 --> 00:10:35,889
really production ready and it it it's

00:10:30,639 --> 00:10:41,260
not supported by cloud foundry CLA CLI

00:10:35,889 --> 00:10:43,779
actually but actually we we deployed

00:10:41,260 --> 00:10:47,579
this release for one of our customers

00:10:43,779 --> 00:10:47,579
and well he was happy

00:10:49,589 --> 00:10:56,040
but it's what we do making our customers

00:10:53,769 --> 00:10:56,040
happy

00:10:57,389 --> 00:11:05,470
so alright and well Linux is most

00:11:02,319 --> 00:11:08,860
popular operating operating system to

00:11:05,470 --> 00:11:11,980
deploy applications to still is not

00:11:08,860 --> 00:11:15,399
their only one and dotnet applications

00:11:11,980 --> 00:11:18,339
are widely spreading especially in

00:11:15,399 --> 00:11:21,819
enterprise area and it's mandatory to

00:11:18,339 --> 00:11:27,850
support them in modern platform as a

00:11:21,819 --> 00:11:35,879
service so there is a one more back-end

00:11:27,850 --> 00:11:40,720
for garden that actually manages

00:11:35,879 --> 00:11:45,129
containers in a Windows so the trick is

00:11:40,720 --> 00:11:50,050
that Windows does not support containers

00:11:45,129 --> 00:11:52,509
as linux does so but Cloud Foundry

00:11:50,050 --> 00:11:58,600
runtime team managed to deal with it

00:11:52,509 --> 00:12:03,490
with couple of tricks so you know that

00:11:58,600 --> 00:12:09,329
you to create sort of containers in

00:12:03,490 --> 00:12:16,059
Windows following features I used for

00:12:09,329 --> 00:12:20,410
file system isolation they create user

00:12:16,059 --> 00:12:25,750
for for every container to to use

00:12:20,410 --> 00:12:29,500
default Windows ACLs for for file access

00:12:25,750 --> 00:12:35,879
and so on ok for disk usage limiting

00:12:29,500 --> 00:12:39,629
they use NTFS quotas for CPU and memory

00:12:35,879 --> 00:12:47,199
limiting there is a Windows job objects

00:12:39,629 --> 00:12:49,720
and for network isolation application

00:12:47,199 --> 00:12:56,139
length lunched inside a container bind

00:12:49,720 --> 00:13:00,699
directly to external IP of the VM okay

00:12:56,139 --> 00:13:02,269
and the last back-end available is

00:13:00,699 --> 00:13:05,120
called Guardian

00:13:02,269 --> 00:13:09,829
why need for another one Linux container

00:13:05,120 --> 00:13:11,589
back-end yeah well there are plenty of

00:13:09,829 --> 00:13:17,750
containers implementation nowadays

00:13:11,589 --> 00:13:21,560
famous known docker Alex C that has been

00:13:17,750 --> 00:13:23,180
for a years already contain your

00:13:21,560 --> 00:13:27,380
implementation from Google

00:13:23,180 --> 00:13:27,910
let me contain that for you or something

00:13:27,380 --> 00:13:32,050
like that

00:13:27,910 --> 00:13:38,019
openvz of course garden and many more

00:13:32,050 --> 00:13:38,019
which are not compatible with each other

00:13:38,230 --> 00:13:47,570
so in 2015 open containers initiative

00:13:43,100 --> 00:13:50,570
appeared to create industry standards

00:13:47,570 --> 00:13:53,449
around continues to build open portable

00:13:50,570 --> 00:13:59,560
platform cloud and Hardware independent

00:13:53,449 --> 00:14:03,339
containers and runtime format so the OCI

00:13:59,560 --> 00:14:07,089
currently provides two specifications

00:14:03,339 --> 00:14:10,100
the container image specification and

00:14:07,089 --> 00:14:13,220
containing runtime specification but

00:14:10,100 --> 00:14:17,750
actually image this specification

00:14:13,220 --> 00:14:20,569
describes how images should be created

00:14:17,750 --> 00:14:23,180
and stored and runtime specification

00:14:20,569 --> 00:14:30,230
specifies how to how to run these images

00:14:23,180 --> 00:14:39,829
actually so it's a list of companies

00:14:30,230 --> 00:14:44,750
that in OCI and well most of containers

00:14:39,829 --> 00:14:50,110
world players are here I think and it's

00:14:44,750 --> 00:14:54,589
huge so I kind of believe in in OCI and

00:14:50,110 --> 00:14:57,110
well I was looking for internet just a

00:14:54,589 --> 00:14:59,329
couple days ago and saw this tweet

00:14:57,110 --> 00:15:03,319
[Music]

00:14:59,329 --> 00:15:08,779
Kelsey Hightower from kubernetes wrote

00:15:03,319 --> 00:15:13,040
that they had a support of OCI

00:15:08,779 --> 00:15:18,200
containers so it looks good

00:15:13,040 --> 00:15:22,640
back to Clefairy Gardens already supers

00:15:18,200 --> 00:15:25,940
OCI containers for a while actually we

00:15:22,640 --> 00:15:29,860
are its guardian back-end also called

00:15:25,940 --> 00:15:33,290
Runcie back and it's not yet default run

00:15:29,860 --> 00:15:39,560
backend for a cloud foundry and the

00:15:33,290 --> 00:15:46,250
current version is 0.9 but from from the

00:15:39,560 --> 00:15:51,880
mailing list version 1.0 is just about

00:15:46,250 --> 00:15:54,530
to come and a guardian will become

00:15:51,880 --> 00:16:02,290
default default default began for

00:15:54,530 --> 00:16:11,320
containers okay I have a bit of

00:16:02,290 --> 00:16:15,050
practical practical slides here about

00:16:11,320 --> 00:16:17,540
debugging tips so for those of you who

00:16:15,050 --> 00:16:20,830
are having troubles with the with your

00:16:17,540 --> 00:16:26,240
applications in Quad foam containers

00:16:20,830 --> 00:16:27,740
sometimes well logs aren't enough for

00:16:26,240 --> 00:16:30,140
example your application doesn't work

00:16:27,740 --> 00:16:35,270
and you can't figure out figure it out

00:16:30,140 --> 00:16:41,950
why maybe some file is missing or a file

00:16:35,270 --> 00:16:46,730
permissions Ronco and so and you want to

00:16:41,950 --> 00:16:48,620
to go in to continue and I check it out

00:16:46,730 --> 00:16:51,100
what happens to see your processes and

00:16:48,620 --> 00:16:54,740
so on

00:16:51,100 --> 00:16:58,700
with new diagram time as an garden and

00:16:54,740 --> 00:17:05,930
there is a CF SSH command that actually

00:16:58,700 --> 00:17:12,800
brings you to you to inside of container

00:17:05,930 --> 00:17:14,930
and it looks like this actually I see we

00:17:12,800 --> 00:17:20,050
have a bit of time and probably I'll

00:17:14,930 --> 00:17:20,050
show you some live live demo

00:17:22,799 --> 00:17:28,929
okay here I have two applications one of

00:17:26,949 --> 00:17:33,600
them oh sorry

00:17:28,929 --> 00:17:33,600
I see you don't

00:17:40,330 --> 00:17:44,470
now you do and I don't

00:17:49,150 --> 00:18:01,730
okay much better okay

00:17:57,890 --> 00:18:05,660
here I have two applications one is

00:18:01,730 --> 00:18:08,780
deployed to da using old world in

00:18:05,660 --> 00:18:13,160
container manager and one deployed to

00:18:08,780 --> 00:18:15,470
Diego cell with a garden in these

00:18:13,160 --> 00:18:22,850
deployment I have both of them of them

00:18:15,470 --> 00:18:31,010
deployed so for example hmm okay I want

00:18:22,850 --> 00:18:33,970
to to go into war zone application I'll

00:18:31,010 --> 00:18:33,970
try to do this

00:18:36,040 --> 00:18:45,559
it doesn't work because Morgan does not

00:18:40,309 --> 00:18:48,260
support this feature so it's other any

00:18:45,559 --> 00:19:02,559
people who was trying to do such things

00:18:48,260 --> 00:19:02,559
to do the black containers okay what so

00:19:05,300 --> 00:19:17,360
I'll show you the way how it was before

00:19:08,670 --> 00:19:17,360
garden okay I add CF trace here and a

00:19:19,850 --> 00:19:32,610
lot lots of information here okay here I

00:19:24,240 --> 00:19:43,700
see IP address off of actually BM m now

00:19:32,610 --> 00:19:43,700
I now I look at Bosch PM's list

00:19:49,390 --> 00:19:55,260
okay I can see it's rather Z 1/1

00:19:59,800 --> 00:20:06,610
I can ssa to it I have to be actually

00:20:04,110 --> 00:20:11,200
operator of my Cloud Foundry deployment

00:20:06,610 --> 00:20:15,960
to do this okay I'm here

00:20:11,200 --> 00:20:20,430
what next what next I know that

00:20:15,960 --> 00:20:24,090
container sleeping where we kept data

00:20:20,430 --> 00:20:28,360
warden tipples

00:20:24,090 --> 00:20:31,060
okay I have I have 607 containers here

00:20:28,360 --> 00:20:46,450
which one is mine I don't know how to

00:20:31,060 --> 00:20:47,830
figure it out usually I just go to sorry

00:20:46,450 --> 00:20:54,910
CDU yeah

00:20:47,830 --> 00:20:59,200
go to first and then try to run shell

00:20:54,910 --> 00:21:00,790
okay I'm inside of come to here okay no

00:20:59,200 --> 00:21:03,630
that's not mine

00:21:00,790 --> 00:21:10,900
it's job application

00:21:03,630 --> 00:21:29,850
yeah that's how it was actually okay but

00:21:10,900 --> 00:21:31,180
now I can just do CF SSH yes I did and

00:21:29,850 --> 00:21:34,450
that's it

00:21:31,180 --> 00:21:38,440
I'm inside of container without any DS

00:21:34,450 --> 00:21:42,150
borsch crazy stuff and I don't have to

00:21:38,440 --> 00:21:49,890
to have access to borscht and so on

00:21:42,150 --> 00:21:49,890
all right but just lines

00:22:00,900 --> 00:22:07,440
okay um for those of you who want to

00:22:04,290 --> 00:22:09,920
divide contain your manager itself not

00:22:07,440 --> 00:22:13,370
application inside of container I

00:22:09,920 --> 00:22:17,240
recommend to take a look at these two

00:22:13,370 --> 00:22:21,240
you'd basically seoi for garden you can

00:22:17,240 --> 00:22:26,550
create and delete containers shell into

00:22:21,240 --> 00:22:31,490
it and many other things that the DIA

00:22:26,550 --> 00:22:36,720
does for example if you have a single

00:22:31,490 --> 00:22:40,679
Diego cell and garden doesn't work you

00:22:36,720 --> 00:22:45,929
can just use this tool to connect to and

00:22:40,679 --> 00:22:49,530
debug it so alright a couple of words

00:22:45,929 --> 00:22:52,380
about containers security so how secure

00:22:49,530 --> 00:22:56,120
contain yourself well if we are talking

00:22:52,380 --> 00:22:59,640
about Linux based containers provided by

00:22:56,120 --> 00:23:02,880
garden Linux and Guardian begins well

00:22:59,640 --> 00:23:06,360
they are based on namespaces and cgroups

00:23:02,880 --> 00:23:09,660
core Linux kernel features that have

00:23:06,360 --> 00:23:12,540
been around for years already and used

00:23:09,660 --> 00:23:16,410
as a basis for many popular projects

00:23:12,540 --> 00:23:23,040
like doctor and yeah lots of them so I

00:23:16,410 --> 00:23:25,080
believe that you you can trust Scott for

00:23:23,040 --> 00:23:28,559
containers as much as you can trust

00:23:25,080 --> 00:23:33,750
clinks kernel self well of course as far

00:23:28,559 --> 00:23:36,300
as garden is just a software and there

00:23:33,750 --> 00:23:40,170
are bugs and there are security issues

00:23:36,300 --> 00:23:45,390
but and I've seen couple of them but not

00:23:40,170 --> 00:23:55,650
too much actually another point about

00:23:45,390 --> 00:24:00,330
security is this diagram I mean each

00:23:55,650 --> 00:24:06,540
container in in Cloud Foundry in garden

00:24:00,330 --> 00:24:12,780
actually uses its own subnet with

00:24:06,540 --> 00:24:17,520
interfaces access limited by firewall

00:24:12,780 --> 00:24:25,430
well it's a benefit from point of view

00:24:17,520 --> 00:24:28,110
of security but also it makes hard to

00:24:25,430 --> 00:24:31,970
interconnect containers between each

00:24:28,110 --> 00:24:34,970
other but it doesn't really feeds to

00:24:31,970 --> 00:24:34,970
platform-as-a-service

00:24:36,410 --> 00:24:43,920
ideology so for example in doctor you

00:24:40,320 --> 00:24:47,370
have a single subnet for your containers

00:24:43,920 --> 00:24:54,090
and you can create links between them in

00:24:47,370 --> 00:24:58,470
garden you can't so what's the garden

00:24:54,090 --> 00:25:02,150
users projects that use garden now well

00:24:58,470 --> 00:25:07,170
obviously is Cloud Foundry itself and

00:25:02,150 --> 00:25:09,360
it's conquer CI it's continuous

00:25:07,170 --> 00:25:12,890
integration and continuous the delivery

00:25:09,360 --> 00:25:18,060
tool with more modern approach built by

00:25:12,890 --> 00:25:20,360
actually the same team I mean called

00:25:18,060 --> 00:25:23,550
foundry community

00:25:20,360 --> 00:25:29,750
it supports pipelining and it's called

00:25:23,550 --> 00:25:35,400
if I recommend to try it's actually also

00:25:29,750 --> 00:25:37,800
borscht light but why it is it's

00:25:35,400 --> 00:25:43,130
actually both deploying in a single

00:25:37,800 --> 00:25:47,130
single VM it uses garden containers as

00:25:43,130 --> 00:25:49,770
as it's like infrastructure to create

00:25:47,130 --> 00:25:56,100
jobs instead of creating VMs it creates

00:25:49,770 --> 00:26:02,010
jobs inside of garden containers and I

00:25:56,100 --> 00:26:04,770
don't know you can use garden in your in

00:26:02,010 --> 00:26:08,580
your project for example it not so hard

00:26:04,770 --> 00:26:19,060
I tried to just compile and run garden

00:26:08,580 --> 00:26:23,160
and it took me about half of an hour so

00:26:19,060 --> 00:26:28,030
if it fits your needs you can try it

00:26:23,160 --> 00:26:30,950
this is from my side thank you maybe you

00:26:28,030 --> 00:26:35,160
have any questions

00:26:30,950 --> 00:26:35,160

YouTube URL: https://www.youtube.com/watch?v=SR5FrZtBZ4I


