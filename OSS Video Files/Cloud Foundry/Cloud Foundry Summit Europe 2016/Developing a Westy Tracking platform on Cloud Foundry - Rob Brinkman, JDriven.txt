Title: Developing a Westy Tracking platform on Cloud Foundry - Rob Brinkman, JDriven
Publication date: 2016-09-30
Playlist: Cloud Foundry Summit Europe 2016
Description: 
	Developing a Westy Tracking platform on Cloud Foundry - Rob Brinkman, JDriven

Experiencing Europe while traveling with our Volkswagen Camper (Westy) is one of the items on top of my bucket list. It would be great to offer friends and family the possibility to track our adventure in real-time and build up a history of the route we took and the places we visited. For that purpose I develop a real-time tracking platform using Vert.x, Redis and AngularJS and I equipped the Westy with an online GPS Tracker and deployed it to CloudFloundry. The realized platform uses Vert.x to handle events published by the tracker(s), stores the history in Redis and visualizes the real-time location and history an a map using AngularJS. This session will give insight in the modern (reactive) architecture style of the application and a hands on introduction to Vert.x., Redis and AngularJS deployed on Cloud Foundry.

About Rob Brinkman
Rob is a founding member of JDriven and within JDriven primarily responsible for the development of his colleagues and the organization. Based on his passion for technology and extensive experience as a developer and architect he takes every opportunity to dive into the code.
Captions: 
	00:00:00,030 --> 00:00:06,150
thank you for attending this is G agenda

00:00:04,230 --> 00:00:08,760
for today I'd like to know a little

00:00:06,150 --> 00:00:10,469
about you so I can play around with with

00:00:08,760 --> 00:00:14,849
I what I have to tell and what I won't

00:00:10,469 --> 00:00:17,550
tell because the time tell you a little

00:00:14,849 --> 00:00:19,020
about me about my company and then we'll

00:00:17,550 --> 00:00:22,500
dive into the cash which is about

00:00:19,020 --> 00:00:25,830
building a tracking platform which

00:00:22,500 --> 00:00:33,690
vertex angular Redis and deploying it on

00:00:25,830 --> 00:00:35,610
Cloud Foundry eventually a little bit

00:00:33,690 --> 00:00:37,350
about you who's here from a developer

00:00:35,610 --> 00:00:43,410
perspective in developing apps at the

00:00:37,350 --> 00:00:46,079
moment who's familiar with vertex our

00:00:43,410 --> 00:00:53,180
cool let's take away for most of you

00:00:46,079 --> 00:00:55,710
than today with Redis angular please

00:00:53,180 --> 00:00:58,710
I'll explain a little then most of the

00:00:55,710 --> 00:01:00,059
times each end that goes up and I don't

00:00:58,710 --> 00:01:03,120
have to explain it and that stretched me

00:01:00,059 --> 00:01:05,960
some time who's here from an Operations

00:01:03,120 --> 00:01:11,610
perspective who is managing cost hungry

00:01:05,960 --> 00:01:15,270
sort of your my arrows I'm not able to

00:01:11,610 --> 00:01:18,450
do it all right thank you a little bit

00:01:15,270 --> 00:01:20,100
about me during the keynote I mentioned

00:01:18,450 --> 00:01:23,100
I saw that everybody was talking about

00:01:20,100 --> 00:01:27,030
their kids so I put in this slide these

00:01:23,100 --> 00:01:29,610
are my two guys the van behind them is

00:01:27,030 --> 00:01:31,860
my third kid they think they own it and

00:01:29,610 --> 00:01:33,840
they say they own it but if the van goes

00:01:31,860 --> 00:01:36,000
for maintenance I have to pay the bills

00:01:33,840 --> 00:01:39,150
so we're not there yet

00:01:36,000 --> 00:01:43,619
but well it's cool it's nice van it's

00:01:39,150 --> 00:01:51,780
really something issued yeah it gets

00:01:43,619 --> 00:01:53,250
sort of fun let's keep I'm the founder

00:01:51,780 --> 00:01:55,350
and Managing Partner of Jade resin so

00:01:53,250 --> 00:01:57,960
that's my day job that's also the reason

00:01:55,350 --> 00:02:00,329
that the van exists because I was

00:01:57,960 --> 00:02:02,399
working 24 hours a day because working

00:02:00,329 --> 00:02:04,560
is fun for me but spending time with the

00:02:02,399 --> 00:02:06,090
kids is also fun so we bought them and

00:02:04,560 --> 00:02:09,959
now we're going out for weekends with

00:02:06,090 --> 00:02:13,379
van and that's also I love the solar

00:02:09,959 --> 00:02:16,319
surf create all kinds of things

00:02:13,379 --> 00:02:18,390
when I'm not at work around when I can

00:02:16,319 --> 00:02:21,659
I'm able to combine it I just on Twitter

00:02:18,390 --> 00:02:23,189
please follow me you can ask me some

00:02:21,659 --> 00:02:24,750
questions afterwards the social no

00:02:23,189 --> 00:02:28,049
problem would reach out to me on Twitter

00:02:24,750 --> 00:02:29,849
if you have additional questions so my

00:02:28,049 --> 00:02:32,670
company small consulting firm in the

00:02:29,849 --> 00:02:34,439
Netherlands we are about three people

00:02:32,670 --> 00:02:36,780
big now we're doing enterprise

00:02:34,439 --> 00:02:37,980
development for large customers and

00:02:36,780 --> 00:02:41,060
helping them to create beautiful

00:02:37,980 --> 00:02:43,670
software we do that in all aspects of

00:02:41,060 --> 00:02:47,159
enterprise development so architecture

00:02:43,670 --> 00:02:48,209
software development but also a

00:02:47,159 --> 00:02:50,459
continuous integration continuous

00:02:48,209 --> 00:02:52,590
deployment and we're trying to do that

00:02:50,459 --> 00:02:54,150
together with our customers and get the

00:02:52,590 --> 00:02:58,849
customer and it's organization on higher

00:02:54,150 --> 00:03:02,609
level and general can also adjust okay

00:02:58,849 --> 00:03:05,069
if you were in early you already saw the

00:03:02,609 --> 00:03:07,530
website life but this is what we're

00:03:05,069 --> 00:03:09,599
going to build today a web application

00:03:07,530 --> 00:03:12,150
which makes it possible for me to track

00:03:09,599 --> 00:03:13,980
where my Venice or make it possible for

00:03:12,150 --> 00:03:18,030
other people to track my defense because

00:03:13,980 --> 00:03:21,389
most of the time I'm inside now that we

00:03:18,030 --> 00:03:25,169
managed to build that I told you that

00:03:21,389 --> 00:03:27,930
when I'm away with my then I'm not

00:03:25,169 --> 00:03:30,690
willing to work I'm not wanting to try

00:03:27,930 --> 00:03:32,159
to get something with a Raspberry Pi or

00:03:30,690 --> 00:03:34,519
something I did not create a tracking

00:03:32,159 --> 00:03:37,470
device myself I bought something online

00:03:34,519 --> 00:03:42,180
this tracker is about 20 dollars you can

00:03:37,470 --> 00:03:46,049
buy it on Alibaba or which whichever

00:03:42,180 --> 00:03:46,680
side you want to use it has GPS tracking

00:03:46,049 --> 00:03:48,269
in it

00:03:46,680 --> 00:03:50,400
and you can put a sim card in it and

00:03:48,269 --> 00:03:53,430
then you can send text messages but you

00:03:50,400 --> 00:03:55,139
can also configure it to send data to an

00:03:53,430 --> 00:03:57,239
IP address and port and that's where

00:03:55,139 --> 00:04:00,780
we're going to use today it also has

00:03:57,239 --> 00:04:02,459
some additional features with the which

00:04:00,780 --> 00:04:04,760
they tend to describe as security

00:04:02,459 --> 00:04:09,030
features like blocking your engine

00:04:04,760 --> 00:04:10,590
building an alarm on it but and that's

00:04:09,030 --> 00:04:12,329
basically the next slide if I tell you

00:04:10,590 --> 00:04:14,939
about specification you don't want to

00:04:12,329 --> 00:04:17,340
use this professional this is nice for a

00:04:14,939 --> 00:04:19,500
be nice to track something but don't use

00:04:17,340 --> 00:04:23,820
the security card because it's not

00:04:19,500 --> 00:04:26,010
secure and actually the website is so is

00:04:23,820 --> 00:04:27,449
the part on the right a combination of

00:04:26,010 --> 00:04:29,580
data

00:04:27,449 --> 00:04:32,550
flowing through system and showing up on

00:04:29,580 --> 00:04:34,949
real time on the website this slide is

00:04:32,550 --> 00:04:38,580
not to explain you the protocol in depth

00:04:34,949 --> 00:04:41,400
but I added this slide because at the

00:04:38,580 --> 00:04:44,819
time most integrations you built between

00:04:41,400 --> 00:04:47,580
systems are using JSON XML over HTTP

00:04:44,819 --> 00:04:51,210
maybe some messaging maybe some soap if

00:04:47,580 --> 00:04:53,099
you're lucky but this is something

00:04:51,210 --> 00:04:54,870
different what you have here is just a

00:04:53,099 --> 00:04:57,120
plain stupid connection on sending bits

00:04:54,870 --> 00:05:01,379
and bytes over it and you have to reply

00:04:57,120 --> 00:05:03,509
back so basically what the tracker does

00:05:01,379 --> 00:05:04,259
it makes it TCP connection as soon as

00:05:03,509 --> 00:05:07,020
it's to life

00:05:04,259 --> 00:05:09,360
it sends login package NX expects some

00:05:07,020 --> 00:05:11,099
bits and bytes back in the right order

00:05:09,360 --> 00:05:14,099
with the right checks on which you have

00:05:11,099 --> 00:05:16,710
to calculate yourself and then it starts

00:05:14,099 --> 00:05:19,199
sending location details on a frequency

00:05:16,710 --> 00:05:20,639
you can configure and you have to

00:05:19,199 --> 00:05:22,169
acknowledge the fact that you have

00:05:20,639 --> 00:05:26,430
received it so it's pretty low level

00:05:22,169 --> 00:05:30,360
it's pretty efficient and it's pretty

00:05:26,430 --> 00:05:32,550
badly documented if you had some more

00:05:30,360 --> 00:05:35,009
time today I would have asked you what

00:05:32,550 --> 00:05:37,050
the mistake in the formula is here but

00:05:35,009 --> 00:05:39,509
this actually from the documentation and

00:05:37,050 --> 00:05:44,759
it's not going to work so what we had to

00:05:39,509 --> 00:05:48,960
do we implemented it from the

00:05:44,759 --> 00:05:50,550
specification but actually we we stored

00:05:48,960 --> 00:05:52,409
lots of packets from the tracker itself

00:05:50,550 --> 00:05:56,069
and we reverse-engineer the protocol

00:05:52,409 --> 00:05:57,960
afterwards so each fact we received we

00:05:56,069 --> 00:06:02,009
put through a unit test and we see if we

00:05:57,960 --> 00:06:05,189
understand what's in it building the

00:06:02,009 --> 00:06:07,050
application use Cloud Foundry to deploy

00:06:05,189 --> 00:06:12,120
it for section radish for the backends

00:06:07,050 --> 00:06:15,810
and angular in the fronton there are

00:06:12,120 --> 00:06:17,250
some people familiar with vertex I guess

00:06:15,810 --> 00:06:21,270
I have enough batteries so that's not an

00:06:17,250 --> 00:06:22,319
issue today there are something for text

00:06:21,270 --> 00:06:25,650
but I would like to give a short

00:06:22,319 --> 00:06:27,419
introduction it's a lightweight high

00:06:25,650 --> 00:06:29,460
performance application framework well

00:06:27,419 --> 00:06:32,200
everybody says that

00:06:29,460 --> 00:06:36,430
so that's not

00:06:32,200 --> 00:06:38,260
that exciting but lightweight most of

00:06:36,430 --> 00:06:40,420
the times for my company one we develop

00:06:38,260 --> 00:06:43,980
on Cloud Foundry we develop using spring

00:06:40,420 --> 00:06:47,260
wood and I love spring wood actually

00:06:43,980 --> 00:06:48,640
we're rebuilding this same case using

00:06:47,260 --> 00:06:52,120
spring boot at the moment to compare the

00:06:48,640 --> 00:06:55,480
two that's okay

00:06:52,120 --> 00:06:57,040
but vertex is more lightweight than

00:06:55,480 --> 00:06:59,200
spring boot wise protects more

00:06:57,040 --> 00:07:01,540
lightweight because it doesn't do that

00:06:59,200 --> 00:07:05,170
much for you you just have a runtime

00:07:01,540 --> 00:07:07,870
environment and pretty simple api's to

00:07:05,170 --> 00:07:09,250
play with cool thing about fir trees

00:07:07,870 --> 00:07:11,680
that you can write your pieces of

00:07:09,250 --> 00:07:14,800
program in different languages I will

00:07:11,680 --> 00:07:16,290
use Java through my slides in a formal

00:07:14,800 --> 00:07:19,360
version I use groovy that had one

00:07:16,290 --> 00:07:20,590
benefit because the code examples fit on

00:07:19,360 --> 00:07:23,110
my slides

00:07:20,590 --> 00:07:25,240
Jonathas a little more verbose but it's

00:07:23,110 --> 00:07:27,370
fine to have your type system the origin

00:07:25,240 --> 00:07:31,560
but you could you sort of languages you

00:07:27,370 --> 00:07:31,560
could use JavaScript and all kinds of

00:07:31,710 --> 00:07:38,560
it's simple what I was saying it's just

00:07:35,290 --> 00:07:41,350
a way of writing code using the API

00:07:38,560 --> 00:07:43,090
first offer you the API are asynchronous

00:07:41,350 --> 00:07:45,220
everything is asynchronous and that

00:07:43,090 --> 00:07:50,710
makes it possible for you to create

00:07:45,220 --> 00:07:52,660
really scalable lightweight abs which in

00:07:50,710 --> 00:07:54,820
fact very well suit the fact that we

00:07:52,660 --> 00:07:56,530
have to connect several sockets from GPS

00:07:54,820 --> 00:07:58,200
trackers you don't want to manage the

00:07:56,530 --> 00:08:02,740
stage yourself the concurrency ortho

00:07:58,200 --> 00:08:05,200
verdict is very good at that and it's

00:08:02,740 --> 00:08:07,960
whoa I've worked with vertex from

00:08:05,200 --> 00:08:08,890
version one first in one was really an

00:08:07,960 --> 00:08:10,960
abstraction above

00:08:08,890 --> 00:08:14,050
nettie I don't know if somebody's

00:08:10,960 --> 00:08:18,600
familiar with natty it's a pretty

00:08:14,050 --> 00:08:21,430
powerful library to do fancy i/o in Java

00:08:18,600 --> 00:08:23,020
and it was very low level and basically

00:08:21,430 --> 00:08:25,180
if you wanted to create a web server or

00:08:23,020 --> 00:08:27,550
web application using vertex you have to

00:08:25,180 --> 00:08:29,620
parse the HTTP request yourself set

00:08:27,550 --> 00:08:32,979
write hi - and get the right response

00:08:29,620 --> 00:08:34,960
back well that's not anymore it's now

00:08:32,979 --> 00:08:37,750
very powerful you have features to use

00:08:34,960 --> 00:08:41,770
templating to use routes in HTTP so you

00:08:37,750 --> 00:08:43,889
can create very nice applications use

00:08:41,770 --> 00:08:46,559
inverters

00:08:43,889 --> 00:08:48,540
from this picture I know at the time to

00:08:46,559 --> 00:08:50,040
go into this in that but the most

00:08:48,540 --> 00:08:52,470
important things to remember are

00:08:50,040 --> 00:08:54,600
verticals because basically verticals

00:08:52,470 --> 00:08:58,170
are the parts of a replication we write

00:08:54,600 --> 00:09:00,600
our logic in there are simple components

00:08:58,170 --> 00:09:03,449
that receives messages send messages

00:09:00,600 --> 00:09:07,769
communicate using the a singers ap API

00:09:03,449 --> 00:09:10,019
with other systems or receive data from

00:09:07,769 --> 00:09:10,799
one system and the verticals it

00:09:10,019 --> 00:09:12,569
themselves

00:09:10,799 --> 00:09:14,939
interact with each other using the event

00:09:12,569 --> 00:09:17,369
bus so levels publish and subscribe

00:09:14,939 --> 00:09:19,379
messages to each other or beneath

00:09:17,369 --> 00:09:21,059
numbers the cool thing about the

00:09:19,379 --> 00:09:24,329
vertical is that's vertex current issue

00:09:21,059 --> 00:09:27,600
that there's only one thread in the

00:09:24,329 --> 00:09:29,220
event loop that handles the logic in

00:09:27,600 --> 00:09:30,839
your vertical so all your handlers your

00:09:29,220 --> 00:09:33,419
world just there you'll see an example

00:09:30,839 --> 00:09:35,999
later on everything in your vertical is

00:09:33,419 --> 00:09:37,739
handled by one thread and that's pretty

00:09:35,999 --> 00:09:39,809
powerful because you don't have to

00:09:37,739 --> 00:09:41,759
juggle around which state and you can

00:09:39,809 --> 00:09:48,989
just trust it that the state you build

00:09:41,759 --> 00:09:50,639
up is only accessed once at a time but

00:09:48,989 --> 00:09:52,589
the world isn't asynchronous we still

00:09:50,639 --> 00:09:54,809
have things that are synchronous and

00:09:52,589 --> 00:09:56,399
that's we're working for it calls to

00:09:54,809 --> 00:09:57,839
come in what you do then is you will

00:09:56,399 --> 00:09:59,639
send a message over you vendors to

00:09:57,839 --> 00:10:01,589
another vertical that uses the classical

00:09:59,639 --> 00:10:03,480
thread pool and will communicate with

00:10:01,589 --> 00:10:07,709
your legacy database or all kinds of

00:10:03,480 --> 00:10:09,329
what are synchronous stuff one thing to

00:10:07,709 --> 00:10:11,189
remember first will complain if you

00:10:09,329 --> 00:10:13,379
don't remember is that you should not

00:10:11,189 --> 00:10:15,470
block the event loop so don't do

00:10:13,379 --> 00:10:17,669
anything in your vertical that doesn't

00:10:15,470 --> 00:10:19,049
that it's not a singleness

00:10:17,669 --> 00:10:23,119
don't use it try to sleep there or

00:10:19,049 --> 00:10:23,119
something else use the scheduling API

00:10:23,690 --> 00:10:30,300
verticals now I mentioned most of it

00:10:28,110 --> 00:10:35,100
this is a basic protocol to create what

00:10:30,300 --> 00:10:36,360
sure it's just extending in a class I

00:10:35,100 --> 00:10:38,910
have to start method in which I

00:10:36,360 --> 00:10:41,010
implement my logic and what you'll see

00:10:38,910 --> 00:10:43,350
that we're doing there is registering

00:10:41,010 --> 00:10:47,120
handlers for messages on the event bus

00:10:43,350 --> 00:10:49,350
or as we do here creating an HTTP server

00:10:47,120 --> 00:10:54,510
sending something back if the response

00:10:49,350 --> 00:10:58,350
comes in and make it listen we'll go

00:10:54,510 --> 00:11:01,529
into some verticals in more detail the

00:10:58,350 --> 00:11:04,769
event bus the way to communicate between

00:11:01,529 --> 00:11:07,320
the parts of your application you can do

00:11:04,769 --> 00:11:09,990
that using publish/subscribe so I'll

00:11:07,320 --> 00:11:12,269
publish something you're interested you

00:11:09,990 --> 00:11:16,140
will receive it and do something with it

00:11:12,269 --> 00:11:18,480
I can use send and receive which looks

00:11:16,140 --> 00:11:22,529
like a bit like a publish/subscribe but

00:11:18,480 --> 00:11:25,740
is to do point-to-point communication so

00:11:22,529 --> 00:11:28,529
I'll address you all but one of you will

00:11:25,740 --> 00:11:30,149
pick my sentence for my mess yourself do

00:11:28,529 --> 00:11:32,070
something with it and when I will

00:11:30,149 --> 00:11:33,270
address you all again somebody else will

00:11:32,070 --> 00:11:37,380
pick it up so I can use it to

00:11:33,270 --> 00:11:39,480
round-robin my load and I can reply on

00:11:37,380 --> 00:11:45,450
it so you can tell me something back I

00:11:39,480 --> 00:11:47,490
can use that something that really helps

00:11:45,450 --> 00:11:49,440
making reactive apps with a web

00:11:47,490 --> 00:11:52,860
interface is that the fact that you can

00:11:49,440 --> 00:11:55,680
bridge event bus to the client side so

00:11:52,860 --> 00:11:57,000
you can make the application angry

00:11:55,680 --> 00:11:59,640
application your archives in the browser

00:11:57,000 --> 00:12:02,370
part of the messages sort of going on in

00:11:59,640 --> 00:12:04,560
your system so for instance if a

00:12:02,370 --> 00:12:06,120
location event comes in I'll publish it

00:12:04,560 --> 00:12:09,630
and I'll received in my web interface

00:12:06,120 --> 00:12:13,170
and I can show it on the on the map more

00:12:09,630 --> 00:12:15,990
on that in the examples this is some

00:12:13,170 --> 00:12:18,390
simple code which illustrates how to use

00:12:15,990 --> 00:12:20,779
the event bus wanting to know is that

00:12:18,390 --> 00:12:23,790
and to remember is that the event bus

00:12:20,779 --> 00:12:25,310
isn't doing anything with guarantees so

00:12:23,790 --> 00:12:28,230
the fact that your message is received

00:12:25,310 --> 00:12:30,779
is not something you can't count on you

00:12:28,230 --> 00:12:32,820
have to keep in mind so don't build your

00:12:30,779 --> 00:12:35,580
next banking back

00:12:32,820 --> 00:12:39,930
on vertex unless you manage that

00:12:35,580 --> 00:12:44,550
yourself this is the architecture we're

00:12:39,930 --> 00:12:47,010
going to build and basically we have two

00:12:44,550 --> 00:12:49,700
sensor in our van it talks to a vertical

00:12:47,010 --> 00:12:51,990
that accepted social connections and

00:12:49,700 --> 00:12:53,910
publishes events with location details

00:12:51,990 --> 00:12:56,820
in it so it translates the bits and

00:12:53,910 --> 00:12:59,790
bytes to Jason will store it using a

00:12:56,820 --> 00:13:03,540
vertical persistence and Redis will

00:12:59,790 --> 00:13:04,950
enrich it which I'll scope for today but

00:13:03,540 --> 00:13:09,060
it's going to slides if you download

00:13:04,950 --> 00:13:11,400
slides and will also publish the

00:13:09,060 --> 00:13:14,450
enriched location to the web further

00:13:11,400 --> 00:13:18,750
cool which you'll pass it on to

00:13:14,450 --> 00:13:21,030
everybody who's looking and the cool

00:13:18,750 --> 00:13:22,770
thing to remember here is that the error

00:13:21,030 --> 00:13:24,930
the direction of the arrows is very

00:13:22,770 --> 00:13:27,410
natural and in fact comes in it flows

00:13:24,930 --> 00:13:30,240
through our system and pops up enriched

00:13:27,410 --> 00:13:31,980
you know web browser so we're not doing

00:13:30,240 --> 00:13:33,450
things here like storing everything in

00:13:31,980 --> 00:13:35,700
the database and getting it out when we

00:13:33,450 --> 00:13:44,040
need it know if a location updates come

00:13:35,700 --> 00:13:47,280
comes in will show it those are two

00:13:44,040 --> 00:13:50,550
three here cause we're going to deep

00:13:47,280 --> 00:13:54,440
dive this is the first one this is the

00:13:50,550 --> 00:13:57,660
one that's talking with the trackers and

00:13:54,440 --> 00:14:00,750
this is very simple it's even simpler

00:13:57,660 --> 00:14:04,020
than the web example is so before what

00:14:00,750 --> 00:14:06,510
it does is create a server on a court in

00:14:04,020 --> 00:14:08,910
house and it reduces to connect handler

00:14:06,510 --> 00:14:12,000
which gets triggered when a device

00:14:08,910 --> 00:14:14,400
connects and when a device connects the

00:14:12,000 --> 00:14:17,040
anther is executed we'll grab the socket

00:14:14,400 --> 00:14:21,060
ID so we have something to identified by

00:14:17,040 --> 00:14:23,070
by and we register a connection Handler

00:14:21,060 --> 00:14:25,440
and what happens is each time packages

00:14:23,070 --> 00:14:29,850
arrive the connection handler is

00:14:25,440 --> 00:14:32,010
triggered and basically what we do we

00:14:29,850 --> 00:14:34,200
create a message body from the roll bits

00:14:32,010 --> 00:14:38,610
and bytes so behind that job function is

00:14:34,200 --> 00:14:41,310
something that translates the the table

00:14:38,610 --> 00:14:45,080
you saw before into readable JSON with

00:14:41,310 --> 00:14:47,550
let's shoot longitude speed GPS

00:14:45,080 --> 00:14:50,960
statistics like the amount of satellites

00:14:47,550 --> 00:14:53,820
and it publishes it on the eventbus

00:14:50,960 --> 00:14:55,980
and basically on that address is

00:14:53,820 --> 00:14:59,339
listening it's another confident

00:14:55,980 --> 00:15:04,890
listening witch who will handle and I

00:14:59,339 --> 00:15:06,540
should this is very simple vertical we'd

00:15:04,890 --> 00:15:09,990
like to store the location details so

00:15:06,540 --> 00:15:11,580
it's not a goal by itself to just show

00:15:09,990 --> 00:15:15,210
the location on a map that we want to

00:15:11,580 --> 00:15:18,360
store all location details in Redis at

00:15:15,210 --> 00:15:20,370
this time I was familiar with rest

00:15:18,360 --> 00:15:22,920
before I created it and from here else

00:15:20,370 --> 00:15:26,040
was just a key value thingy and

00:15:22,920 --> 00:15:30,390
something used for a cache that performs

00:15:26,040 --> 00:15:32,339
pretty well but I didn't dive deeper

00:15:30,390 --> 00:15:36,450
into it until now but it's pretty

00:15:32,339 --> 00:15:39,480
powerful for such pairs because it

00:15:36,450 --> 00:15:41,100
supports transactions publish and

00:15:39,480 --> 00:15:43,620
subscribe and also time to live so you

00:15:41,100 --> 00:15:47,460
can expire your data when you store it

00:15:43,620 --> 00:15:49,350
and read it we'll arrange it for you you

00:15:47,460 --> 00:15:50,880
can add clients to read as a

00:15:49,350 --> 00:15:53,550
communicative derives from virtually any

00:15:50,880 --> 00:15:55,710
language the clients libraries are very

00:15:53,550 --> 00:15:58,260
lightweight and vertex has a client

00:15:55,710 --> 00:16:00,450
built-in and the cool thing is that when

00:15:58,260 --> 00:16:03,650
you look at that Redis basically it's a

00:16:00,450 --> 00:16:07,080
key value store but the value can have

00:16:03,650 --> 00:16:10,140
different forms so you can source

00:16:07,080 --> 00:16:13,620
trainers value income for the hashmap

00:16:10,140 --> 00:16:16,230
in Java and this is pretty powerful for

00:16:13,620 --> 00:16:17,940
us because what we can do we can we send

00:16:16,230 --> 00:16:20,760
messages through our system that contain

00:16:17,940 --> 00:16:23,730
Jason and we can put Jason to a string

00:16:20,760 --> 00:16:27,450
and store it in Redis the reason why we

00:16:23,730 --> 00:16:29,310
use Jason is that if you are going

00:16:27,450 --> 00:16:31,770
polyglot in using different languages

00:16:29,310 --> 00:16:34,050
when your first application Jason is

00:16:31,770 --> 00:16:35,850
pretty easy format to Marshall Marshall

00:16:34,050 --> 00:16:39,870
in each language so that's why we're

00:16:35,850 --> 00:16:42,270
using Jason also do we have lists think

00:16:39,870 --> 00:16:44,930
of ordinary list you just append to the

00:16:42,270 --> 00:16:48,540
list we have sets each item is unique

00:16:44,930 --> 00:16:50,250
and we have a very very powerful variant

00:16:48,540 --> 00:16:52,230
of Saturn it's a sorted set and the cool

00:16:50,250 --> 00:16:54,010
thing of a sorted status besides the

00:16:52,230 --> 00:16:57,670
fact that you just

00:16:54,010 --> 00:16:59,800
who then more data in setlist unique you

00:16:57,670 --> 00:17:03,340
can add a score and in our case we're

00:16:59,800 --> 00:17:06,520
using the timestamp of the moment we

00:17:03,340 --> 00:17:09,730
received a coordinate as the score and

00:17:06,520 --> 00:17:12,699
that gives us the power to grab the last

00:17:09,730 --> 00:17:13,540
element or grab all locations within a

00:17:12,699 --> 00:17:18,520
certain time frame

00:17:13,540 --> 00:17:20,650
just from a create value store now we're

00:17:18,520 --> 00:17:22,300
using those messages what we were going

00:17:20,650 --> 00:17:25,240
to do is we're going to story and rich

00:17:22,300 --> 00:17:29,350
location details start a location in

00:17:25,240 --> 00:17:31,480
Jason we're going to grab the body we

00:17:29,350 --> 00:17:34,260
want to receive that so at rich moment

00:17:31,480 --> 00:17:37,090
did we receive the message we want to

00:17:34,260 --> 00:17:39,220
grab the device ID and basically what we

00:17:37,090 --> 00:17:42,700
do is we create a key in the form of

00:17:39,220 --> 00:17:45,730
tracker device ID location receives that

00:17:42,700 --> 00:17:49,480
so that's the key in our Redis store and

00:17:45,730 --> 00:17:53,680
we store each location update in a

00:17:49,480 --> 00:17:56,380
sorted set and we do that by specifying

00:17:53,680 --> 00:17:58,540
the key specifying the score received at

00:17:56,380 --> 00:18:03,100
and putting the old Jason message in

00:17:58,540 --> 00:18:07,540
there and that makes it possible for us

00:18:03,100 --> 00:18:10,720
to reach retrieve the most recent

00:18:07,540 --> 00:18:13,290
location or the most recent ten

00:18:10,720 --> 00:18:16,390
locations if we modify the last Cheryl

00:18:13,290 --> 00:18:22,930
to ten but it also makes it possible for

00:18:16,390 --> 00:18:24,850
us to request the data by score so for

00:18:22,930 --> 00:18:28,840
instance request all coordinates within

00:18:24,850 --> 00:18:31,390
an hour and the C and the nice thing of

00:18:28,840 --> 00:18:33,460
this is that it

00:18:31,390 --> 00:18:36,130
it's blazingly fast because reddish

00:18:33,460 --> 00:18:39,370
optimizes the fed the way you wrote your

00:18:36,130 --> 00:18:42,070
data for reading so you have instant

00:18:39,370 --> 00:18:44,830
response if you want to request it and

00:18:42,070 --> 00:18:47,290
it skills out very very good so if you

00:18:44,830 --> 00:18:49,410
have thousands of strikers that's not an

00:18:47,290 --> 00:18:49,410
issue

00:18:49,930 --> 00:18:58,760
angular there were some people that not

00:18:55,220 --> 00:19:01,160
that familiar with angular I'm not going

00:18:58,760 --> 00:19:03,350
to give you a deep dive right now but

00:19:01,160 --> 00:19:05,060
what we basically did here and here's a

00:19:03,350 --> 00:19:07,340
framework to build rich JavaScript

00:19:05,060 --> 00:19:09,440
applications in it has some patterns in

00:19:07,340 --> 00:19:11,060
it that are very familiar for for

00:19:09,440 --> 00:19:14,300
instance Java developers so that helps

00:19:11,060 --> 00:19:16,760
to write great software it does some

00:19:14,300 --> 00:19:18,710
very neat things with binding your data

00:19:16,760 --> 00:19:20,660
you have in your application with the

00:19:18,710 --> 00:19:23,360
data that you're showing to your users

00:19:20,660 --> 00:19:24,950
and that's very powerful when we're

00:19:23,360 --> 00:19:29,360
going to use that here to show the data

00:19:24,950 --> 00:19:33,260
in real time but first we need a web

00:19:29,360 --> 00:19:36,170
server we have to push or make it a

00:19:33,260 --> 00:19:41,840
label for our users to request all that

00:19:36,170 --> 00:19:45,290
resources so that's also a vertical in

00:19:41,840 --> 00:19:47,630
vertex what we do here is we in start

00:19:45,290 --> 00:19:51,110
method we create a router the router we

00:19:47,630 --> 00:19:54,320
can use to specify on which path the

00:19:51,110 --> 00:19:55,880
resources should be available and we add

00:19:54,320 --> 00:19:58,010
a static handler instead again there's

00:19:55,880 --> 00:20:00,380
just something that's your static files

00:19:58,010 --> 00:20:02,180
that's why it's called set handler from

00:20:00,380 --> 00:20:06,020
a certain path from your file system or

00:20:02,180 --> 00:20:07,460
a class spot to the browser so basically

00:20:06,020 --> 00:20:09,470
what it says here is well we have a

00:20:07,460 --> 00:20:10,070
folder called web routes and everything

00:20:09,470 --> 00:20:13,220
that's in there

00:20:10,070 --> 00:20:16,640
my index.html my JavaScript files my CSS

00:20:13,220 --> 00:20:20,620
files just sure if it out that's fine we

00:20:16,640 --> 00:20:23,270
had one other thing that are those were

00:20:20,620 --> 00:20:25,280
four lines of code and they're the most

00:20:23,270 --> 00:20:27,080
powerful lines of code in this

00:20:25,280 --> 00:20:30,890
presentation because what they do is

00:20:27,080 --> 00:20:35,930
they allow you to distribute the event

00:20:30,890 --> 00:20:38,210
bus to the client-side so basically I

00:20:35,930 --> 00:20:40,430
can you judge the library and connect to

00:20:38,210 --> 00:20:43,610
the slash event bus spot and I will

00:20:40,430 --> 00:20:47,270
receive all messages on the client side

00:20:43,610 --> 00:20:51,980
also so my location updates and all the

00:20:47,270 --> 00:20:53,930
details the reason we use permitted

00:20:51,980 --> 00:20:56,570
options is somebody willing to explain

00:20:53,930 --> 00:21:03,680
me why I put it in there

00:20:56,570 --> 00:21:05,650
why would you want to do that suppose I

00:21:03,680 --> 00:21:09,380
have to enter it myself

00:21:05,650 --> 00:21:11,690
now now what you don't want every event

00:21:09,380 --> 00:21:14,270
from the client to the server and from

00:21:11,690 --> 00:21:15,950
the server back because internally that

00:21:14,270 --> 00:21:18,290
the communication will read as also

00:21:15,950 --> 00:21:20,900
works with events so what I don't want

00:21:18,290 --> 00:21:23,570
is to sent a comment from JavaScript to

00:21:20,900 --> 00:21:26,860
clear my Redis database so you can see

00:21:23,570 --> 00:21:29,750
this as kind of a firewall II thing I

00:21:26,860 --> 00:21:32,060
define a regular expressions and only

00:21:29,750 --> 00:21:34,400
addresses that start with web are

00:21:32,060 --> 00:21:36,980
allowed to come into my system or

00:21:34,400 --> 00:21:43,190
allowed to come from a server to the

00:21:36,980 --> 00:21:45,100
client just prevent some issues and

00:21:43,190 --> 00:21:48,020
finally we have to start listening

00:21:45,100 --> 00:21:50,660
that's what we do and this is all all

00:21:48,020 --> 00:21:53,450
the code we need to create a web server

00:21:50,660 --> 00:21:56,930
which search for static files which

00:21:53,450 --> 00:22:00,830
create an event bus bridge which allows

00:21:56,930 --> 00:22:04,690
us to show the details on a little piece

00:22:00,830 --> 00:22:04,690
of the angular code I'd like to show you

00:22:05,050 --> 00:22:13,730
not to understand every letter of it but

00:22:10,250 --> 00:22:16,700
basically the concept is the same as all

00:22:13,730 --> 00:22:19,070
verticals we saw this is JavaScript code

00:22:16,700 --> 00:22:22,100
this is somewhere in one of my angler

00:22:19,070 --> 00:22:25,400
controllers and what I doing here so I

00:22:22,100 --> 00:22:31,550
have an event this surfers that's an

00:22:25,400 --> 00:22:33,980
annualized service and I just say well I

00:22:31,550 --> 00:22:36,350
want to listen to web device that

00:22:33,980 --> 00:22:38,690
location each time an event comes in

00:22:36,350 --> 00:22:43,250
with that address I'll store it on the

00:22:38,690 --> 00:22:44,810
scalp in an ash map in JavaScript for

00:22:43,250 --> 00:22:46,280
the device editions basically what I'm

00:22:44,810 --> 00:22:49,280
doing is I'm storing the last location

00:22:46,280 --> 00:22:51,710
of my verticals and the cool thing is

00:22:49,280 --> 00:22:53,660
that if I listen to the right events and

00:22:51,710 --> 00:22:57,820
I've built up the states from the

00:22:53,660 --> 00:23:00,500
client-side I'm able to ask dynamically

00:22:57,820 --> 00:23:03,860
generated graphs to the right data and

00:23:00,500 --> 00:23:07,340
they will if my speed differs that's the

00:23:03,860 --> 00:23:09,110
actual speed per device it will adjust

00:23:07,340 --> 00:23:11,289
the graph because that's what angular

00:23:09,110 --> 00:23:13,299
does with

00:23:11,289 --> 00:23:15,399
and it's also working for the map so if

00:23:13,299 --> 00:23:16,990
you had you're trying to do something

00:23:15,399 --> 00:23:19,090
with maps I have a look at leaflet

00:23:16,990 --> 00:23:21,730
leaflets very powerful and gives you an

00:23:19,090 --> 00:23:23,230
abstraction on top of things like Open

00:23:21,730 --> 00:23:25,059
Street Map and Google Maps could also

00:23:23,230 --> 00:23:29,080
give you the option to write your logic

00:23:25,059 --> 00:23:32,259
not bound to for instance Google and

00:23:29,080 --> 00:23:34,690
what you're doing here is the trick pad

00:23:32,259 --> 00:23:37,899
is also an angular variable on the scope

00:23:34,690 --> 00:23:40,480
which contains all paths that form the

00:23:37,899 --> 00:23:43,649
trip that you see on the map there and

00:23:40,480 --> 00:23:47,320
if I add another part to it to my trip

00:23:43,649 --> 00:23:49,389
it will show up in real time on the map

00:23:47,320 --> 00:23:54,909
so you will see the fan moving you'll

00:23:49,389 --> 00:23:57,909
also see the trip for deployment

00:23:54,909 --> 00:24:01,899
initially we developed this Justices

00:23:57,909 --> 00:24:05,049
demo not with Cloud Foundry in mind so

00:24:01,899 --> 00:24:07,269
the cool thing was how much time do we

00:24:05,049 --> 00:24:11,799
need how much effort do we need to make

00:24:07,269 --> 00:24:15,389
shown on Cloud Foundry we deployed it on

00:24:11,799 --> 00:24:18,809
a pizza web surf sesh publicly-available

00:24:15,389 --> 00:24:21,490
afraid of Cloud Foundry and basically

00:24:18,809 --> 00:24:24,370
there are two applications the platform

00:24:21,490 --> 00:24:26,919
the website you were looking at and the

00:24:24,370 --> 00:24:29,230
part analyzed data and a receiver and

00:24:26,919 --> 00:24:32,049
the receiver is the key component that

00:24:29,230 --> 00:24:35,759
communicates with the trackers and we

00:24:32,049 --> 00:24:39,070
use one service that we share between

00:24:35,759 --> 00:24:43,049
both apps I'll tell you a little bit

00:24:39,070 --> 00:24:43,049
more about why we do that

00:24:44,840 --> 00:24:50,760
the first thing I was really just liked

00:24:48,810 --> 00:24:52,650
about this conference because I wanted

00:24:50,760 --> 00:24:54,600
to see how many people are using cloud

00:24:52,650 --> 00:24:56,460
foundry I'm really surprised happily

00:24:54,600 --> 00:24:58,920
surprised about the power of the

00:24:56,460 --> 00:25:02,190
community behind cloud foundry so I

00:24:58,920 --> 00:25:05,330
didn't realize that I needed disappear

00:25:02,190 --> 00:25:05,330
outing at that moment

00:25:05,510 --> 00:25:12,470
so one of the gadget tips will help me

00:25:08,400 --> 00:25:16,820
out I had some better access to TCP

00:25:12,470 --> 00:25:20,420
routing on run a bit flow the tile

00:25:16,820 --> 00:25:23,100
basically the way I use TCP routing here

00:25:20,420 --> 00:25:25,410
are those three comments if you have to

00:25:23,100 --> 00:25:29,690
do manually not in your manifest but I'm

00:25:25,410 --> 00:25:32,580
creating a random route on a random port

00:25:29,690 --> 00:25:34,620
and now request the router ID well I

00:25:32,580 --> 00:25:38,010
need that route TCP route because my

00:25:34,620 --> 00:25:42,210
tracker only talks TCP so I'm not able

00:25:38,010 --> 00:25:48,270
to put that over the normal routing and

00:25:42,210 --> 00:25:50,310
that's also why basically you have to

00:25:48,270 --> 00:25:55,530
look at this remember the port we were

00:25:50,310 --> 00:25:57,930
going to play with that later on because

00:25:55,530 --> 00:26:01,470
I have my application was configured

00:25:57,930 --> 00:26:03,690
just to run on its own what I'm doing

00:26:01,470 --> 00:26:05,520
here is grabbing the application

00:26:03,690 --> 00:26:07,230
configuration from the environment so I

00:26:05,520 --> 00:26:09,990
have to grab a port for each application

00:26:07,230 --> 00:26:14,340
that's what I'm doing here and I have to

00:26:09,990 --> 00:26:16,830
request all surface configuration and

00:26:14,340 --> 00:26:19,800
use that to find out where my relatives

00:26:16,830 --> 00:26:23,730
what's its credentials or things like

00:26:19,800 --> 00:26:25,650
that and one thing I didn't notice first

00:26:23,730 --> 00:26:27,900
because the WebSocket implementation in

00:26:25,650 --> 00:26:29,460
vertex falls back to long pool is that

00:26:27,900 --> 00:26:32,280
so concerned support which is pretty

00:26:29,460 --> 00:26:37,800
powerful but it didn't saw that it

00:26:32,280 --> 00:26:42,000
didn't work at least at PBS you have to

00:26:37,800 --> 00:26:44,100
use PWS you have to use port 4 4 4 3 for

00:26:42,000 --> 00:26:47,910
your WebSockets if you just use the

00:26:44,100 --> 00:26:51,990
HTTPS or HTTP HTTP for it won't work so

00:26:47,910 --> 00:26:55,350
that's something to realize and this was

00:26:51,990 --> 00:26:56,220
the initial application and then we had

00:26:55,350 --> 00:26:58,500
to use a TCP

00:26:56,220 --> 00:27:00,870
and HTTP URL to the same application and

00:26:58,500 --> 00:27:03,840
that's not possible at the moment so

00:27:00,870 --> 00:27:08,370
what we did is we split up the

00:27:03,840 --> 00:27:10,379
application we wrote the receiver which

00:27:08,370 --> 00:27:13,860
has the TCP route so all traffic comes

00:27:10,379 --> 00:27:17,070
in over TCP and we separate the platform

00:27:13,860 --> 00:27:19,740
which handles the HTTP request that led

00:27:17,070 --> 00:27:21,480
to another problem and that's that the

00:27:19,740 --> 00:27:23,759
receiver in the Platt platform

00:27:21,480 --> 00:27:26,610
application can communicate between each

00:27:23,759 --> 00:27:29,639
other and one of the feature gratis is

00:27:26,610 --> 00:27:31,110
very powerful is that in you can store

00:27:29,639 --> 00:27:34,500
data anytime we treat that you can also

00:27:31,110 --> 00:27:36,149
create channels in Redis use that for

00:27:34,500 --> 00:27:38,460
publishing subscribing so basically what

00:27:36,149 --> 00:27:42,090
we do here is cheat a little and use

00:27:38,460 --> 00:27:46,700
Redis as bridge to publish my location

00:27:42,090 --> 00:27:51,059
updates and receive it in the platform

00:27:46,700 --> 00:27:53,669
some last remark I really enjoyed the

00:27:51,059 --> 00:27:56,909
experience I was familiar with Cloud

00:27:53,669 --> 00:27:59,159
Foundry for several years but always

00:27:56,909 --> 00:28:01,110
used spring boots the chance to do

00:27:59,159 --> 00:28:03,090
something with vertex on it was for me

00:28:01,110 --> 00:28:04,769
in a chance to get to know the platform

00:28:03,090 --> 00:28:09,090
better and do some things manually

00:28:04,769 --> 00:28:11,549
let's bring booth does for you the

00:28:09,090 --> 00:28:13,649
operation guys are my heroes because I

00:28:11,549 --> 00:28:15,539
try to install it myself

00:28:13,649 --> 00:28:17,960
because I needed TCP rising and Redis

00:28:15,539 --> 00:28:23,039
and I didn't manage to do that

00:28:17,960 --> 00:28:27,570
in three four long nights so that's not

00:28:23,039 --> 00:28:30,629
happening but I didn't need lots of

00:28:27,570 --> 00:28:32,700
changes to migrate the existing app what

00:28:30,629 --> 00:28:34,350
you'll notice that you want you develop

00:28:32,700 --> 00:28:37,080
an app for Cloud Foundry please have a

00:28:34,350 --> 00:28:38,700
look at the platform you're actually

00:28:37,080 --> 00:28:41,190
using because each cloud foundry

00:28:38,700 --> 00:28:43,860
installation has different options I

00:28:41,190 --> 00:28:45,629
have to use Redis to communicate but if

00:28:43,860 --> 00:28:47,100
you have the full power and you could

00:28:45,629 --> 00:28:49,289
run sir you could do something with

00:28:47,100 --> 00:28:51,289
security groups and configuration you

00:28:49,289 --> 00:28:53,669
can allow the applications to talk

00:28:51,289 --> 00:28:57,870
directly and use the clustering of the

00:28:53,669 --> 00:28:59,730
event bus so please look at which

00:28:57,870 --> 00:29:02,820
platform you're developing for and

00:28:59,730 --> 00:29:07,049
dispiriting is very very powerful really

00:29:02,820 --> 00:29:09,299
helps in the IOT space in the talk I so

00:29:07,049 --> 00:29:09,880
before you see it also as just opening

00:29:09,299 --> 00:29:12,580
up

00:29:09,880 --> 00:29:19,120
or to use MQTT directly on crowd foundry

00:29:12,580 --> 00:29:21,880
which is a fun talk by it so thanks for

00:29:19,120 --> 00:29:24,100
your time if you have any questions and

00:29:21,880 --> 00:29:29,080
we have any time we have some time left

00:29:24,100 --> 00:29:38,080
I don't know please ask them please ask

00:29:29,080 --> 00:29:39,790
them don't be afraid I just finished the

00:29:38,080 --> 00:29:41,110
trip last weekend I went through a dumb

00:29:39,790 --> 00:29:44,290
work and I was very glad that I'm not

00:29:41,110 --> 00:29:47,800
here with the van because it took some

00:29:44,290 --> 00:29:51,670
time by by my own car in the vanishing

00:29:47,800 --> 00:29:54,130
going to speed up more than 80 km/h now

00:29:51,670 --> 00:29:56,230
so thanks for your time if you're

00:29:54,130 --> 00:29:57,850
willing to have a chat or some

00:29:56,230 --> 00:30:00,610
additional questions reach out to me on

00:29:57,850 --> 00:30:02,700
Twitter or talk to me later on on the

00:30:00,610 --> 00:30:07,349
conference thank you very much

00:30:02,700 --> 00:30:07,349

YouTube URL: https://www.youtube.com/watch?v=LpGgjCj2Jrw


