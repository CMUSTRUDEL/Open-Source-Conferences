Title: User Account and Authorization Server at SAP - Martijn de Boer & Mathias Essenpreis, SAP
Publication date: 2016-09-30
Playlist: Cloud Foundry Summit Europe 2016
Description: 
	User Account and Authorization Server at SAP - Martijn de Boer & Mathias Essenpreis, SAP

Cloud Foundry's User Account and Authorization (UAA) server is a great tool that offers many possibilities and usage options. In this session we will deep dive on how we at SAP leveraged the features of the UAA. In particular we will show how we and our enterprise customers manage platform as well as business users including an enforced a 2-Factor Authentication. Furthermore we strive on our development model and demonstrate how developers can easily integrate authentication and authorization checks into their application. Last but not least we also share our planned UAA contributions which we want to fine-tune with you.

About Martijn De Boer
Martijn de Boer is Product Owner for the Security & Crypto topics in SAP HANA XS Advanced and SAP AS ABAP. | He is working on integration of CF UAA in business applications.

About Mathias Essenpreis
Mathias Essenpreis is the head of the platform security department inside SAP. His team is providing elementary security functions to the SAP HANA Cloud Platform based on Cloud Foundry. Previously he worked 10+ years as a software developer for SAP NetWeaver security functions. He is co-author of the book "Single Sign-on mit SAP" and a regular speaker at SAP Teched conferences.
Captions: 
	00:00:00,030 --> 00:00:06,720
so good afternoon five minutes fast sour

00:00:02,970 --> 00:00:08,820
let's get started my session I'm going

00:00:06,720 --> 00:00:11,849
to talk about user account an

00:00:08,820 --> 00:00:15,120
authorization server and the experiences

00:00:11,849 --> 00:00:18,119
we made that SCP my name is Martin

00:00:15,120 --> 00:00:23,519
Lieber I'm working as a product owner in

00:00:18,119 --> 00:00:26,849
a secure encrypted topic for s AP little

00:00:23,519 --> 00:00:29,519
bit closer we have been working as a

00:00:26,849 --> 00:00:32,340
platform security team for many years

00:00:29,519 --> 00:00:35,010
and since one and a half years we are

00:00:32,340 --> 00:00:39,170
looking into the top a QA a and how can

00:00:35,010 --> 00:00:39,170
we make it usable for applications

00:00:39,379 --> 00:00:46,440
so let me shortly introduce s AP so s AP

00:00:44,100 --> 00:00:49,070
has helped hundreds of thousands of

00:00:46,440 --> 00:00:53,219
businesses to take advantage of

00:00:49,070 --> 00:00:56,460
technology we started in the 1970s

00:00:53,219 --> 00:01:00,149
starting with r1 evolving over r2 are

00:00:56,460 --> 00:01:04,500
free to the cloud business and one of

00:01:00,149 --> 00:01:08,010
the pieces of cloud business is HCP

00:01:04,500 --> 00:01:16,259
cloud foundry which is using cloud

00:01:08,010 --> 00:01:18,960
foundry as a baseline CP means 76% of

00:01:16,259 --> 00:01:22,310
the wall transaction with Venu every day

00:01:18,960 --> 00:01:25,500
is passing through an SI p system and

00:01:22,310 --> 00:01:28,979
while we have a very solid rock inside

00:01:25,500 --> 00:01:32,640
on-premise deployments also cloud

00:01:28,979 --> 00:01:36,000
customers are getting very relevant for

00:01:32,640 --> 00:01:41,460
SI piece and 2015 me roughly made two

00:01:36,000 --> 00:01:44,460
billion revenge in the cloud so what I'm

00:01:41,460 --> 00:01:47,189
going to talk about today I have three

00:01:44,460 --> 00:01:49,950
topics for you first of all for those

00:01:47,189 --> 00:01:52,860
who don't know the details of given

00:01:49,950 --> 00:01:55,110
introduced introduction about cloud

00:01:52,860 --> 00:01:59,369
foundry user account and authorization

00:01:55,110 --> 00:02:02,100
server then talk about how can you make

00:01:59,369 --> 00:02:05,280
it useful for applications so what

00:02:02,100 --> 00:02:09,270
mechanisms do we have to integrate UA

00:02:05,280 --> 00:02:11,459
into business applications and at the

00:02:09,270 --> 00:02:13,040
firt topic or to explain what we have

00:02:11,459 --> 00:02:16,670
done at ACP

00:02:13,040 --> 00:02:23,360
to simplify integration and make using

00:02:16,670 --> 00:02:24,049
the UA a really easy so let's start with

00:02:23,360 --> 00:02:27,560
UA

00:02:24,049 --> 00:02:30,739
what is the UA the UA a is within Cloud

00:02:27,560 --> 00:02:35,629
Foundry the central place where users

00:02:30,739 --> 00:02:38,840
and authorizations are managed so that

00:02:35,629 --> 00:02:41,150
means if a user for instance locks into

00:02:38,840 --> 00:02:44,390
the platform using the CF lock in

00:02:41,150 --> 00:02:47,269
command what's happening is its users

00:02:44,390 --> 00:02:50,060
prompted for credentials usually using

00:02:47,269 --> 00:02:54,109
password and then these credentials

00:02:50,060 --> 00:02:57,200
set are sent to the UA a the UA validate

00:02:54,109 --> 00:03:00,609
will issue a token which then can be

00:02:57,200 --> 00:03:06,230
used to call different Cloud Foundry

00:03:00,609 --> 00:03:09,620
components the UA is very strong when it

00:03:06,230 --> 00:03:11,840
comes to rest api's so there are lots of

00:03:09,620 --> 00:03:15,379
API as for managing the different

00:03:11,840 --> 00:03:18,849
entities known inside the UA a it is

00:03:15,379 --> 00:03:24,620
rather restricted when it comes to user

00:03:18,849 --> 00:03:27,980
user API so the UA a it has a P it has

00:03:24,620 --> 00:03:30,699
an admin UI for logging in but otherwise

00:03:27,980 --> 00:03:34,669
it doesn't really have a rich set of

00:03:30,699 --> 00:03:36,769
admin your eyes one of the aspects that

00:03:34,669 --> 00:03:39,139
makes it very interesting for

00:03:36,769 --> 00:03:41,810
application development is the support

00:03:39,139 --> 00:03:44,480
of multi-tenancy so usually you don't

00:03:41,810 --> 00:03:48,440
see it a lot as using as being used in

00:03:44,480 --> 00:03:50,540
Cloud Foundry itself but the UA a has

00:03:48,440 --> 00:03:56,299
support for multi-tenancy and also I'm

00:03:50,540 --> 00:03:58,790
going to explain what that means so

00:03:56,299 --> 00:04:02,750
let's start at authentication the UA a

00:03:58,790 --> 00:04:06,650
has different kind of mechanisms for

00:04:02,750 --> 00:04:10,069
authentication so the first thing it has

00:04:06,650 --> 00:04:13,430
is an internal user store that means

00:04:10,069 --> 00:04:15,709
using this in turn on a user store you

00:04:13,430 --> 00:04:20,060
can authenticate with password against

00:04:15,709 --> 00:04:22,849
that store and the users in that users

00:04:20,060 --> 00:04:26,479
store can be grouped hierarchically to

00:04:22,849 --> 00:04:30,270
assign authorizations to that user

00:04:26,479 --> 00:04:32,750
as a management API there is a skin API

00:04:30,270 --> 00:04:36,030
which is an internet standard for

00:04:32,750 --> 00:04:40,080
managing users in groups and that's also

00:04:36,030 --> 00:04:42,479
supported by the UAE but the UAE is also

00:04:40,080 --> 00:04:45,360
pretty good when it comes to integration

00:04:42,479 --> 00:04:48,300
in common enterprise standards for

00:04:45,360 --> 00:04:51,180
instance there's the support of LDAP so

00:04:48,300 --> 00:04:53,630
LDAP is a common protocol for instance

00:04:51,180 --> 00:04:55,889
supported by Microsoft Active Directory

00:04:53,630 --> 00:04:59,070
so if you have Microsoft Active

00:04:55,889 --> 00:05:02,220
Directory you can authenticate your

00:04:59,070 --> 00:05:06,740
users using username password against

00:05:02,220 --> 00:05:10,430
Active Directory you can do a mapping of

00:05:06,740 --> 00:05:14,009
LDAP groups to the ua8 groups again and

00:05:10,430 --> 00:05:19,409
as manage API management API would

00:05:14,009 --> 00:05:23,000
directly use the LDAP protocol so when

00:05:19,409 --> 00:05:26,490
when it comes to enterprise requirements

00:05:23,000 --> 00:05:28,199
the uaa sometimes has some challenges

00:05:26,490 --> 00:05:30,389
for you so for instance when

00:05:28,199 --> 00:05:34,370
authenticating with the internal UAA

00:05:30,389 --> 00:05:38,460
users you can put the password policy

00:05:34,370 --> 00:05:42,210
but the UAA for instance has no first

00:05:38,460 --> 00:05:45,780
change of a password to assume you have

00:05:42,210 --> 00:05:49,289
a password policy that requires to

00:05:45,780 --> 00:05:52,070
change password every 30 days then after

00:05:49,289 --> 00:05:56,099
30 days the users will get locked and

00:05:52,070 --> 00:05:59,479
the user need to get the the email

00:05:56,099 --> 00:06:02,250
password reset flow to get going again

00:05:59,479 --> 00:06:06,630
another protocol that supported by the

00:06:02,250 --> 00:06:10,080
UAA is sasame - protocol also very well

00:06:06,630 --> 00:06:12,060
known in the enterprise environment with

00:06:10,080 --> 00:06:14,430
the psalm of 2 protocol if you hit the

00:06:12,060 --> 00:06:16,229
UAA you can select a link I want to look

00:06:14,430 --> 00:06:18,479
on with my favorite sama identity

00:06:16,229 --> 00:06:21,120
provider then the browser would get

00:06:18,479 --> 00:06:25,289
redirected to the sama identity provider

00:06:21,120 --> 00:06:29,780
and then authenticate using the methods

00:06:25,289 --> 00:06:29,780
supported by the sama identity provider

00:06:30,289 --> 00:06:39,840
similar so with authorization so if your

00:06:36,270 --> 00:06:43,470
sama identity provider has a mechanism

00:06:39,840 --> 00:06:45,510
of grouping users then you can also map

00:06:43,470 --> 00:06:51,479
these some on user groups to your ua8

00:06:45,510 --> 00:06:53,880
groups last protocol that's supported

00:06:51,479 --> 00:06:57,150
for authentication by the UAE is of

00:06:53,880 --> 00:07:03,630
mighty connect protocol this is feature

00:06:57,150 --> 00:07:07,110
wise very similar to sam'l - but rather

00:07:03,630 --> 00:07:15,030
adopted in the cloud world iCloud

00:07:07,110 --> 00:07:17,070
identity providers what does it mean

00:07:15,030 --> 00:07:20,700
when you have enterprise requirements

00:07:17,070 --> 00:07:23,280
like strong authentication so the UA

00:07:20,700 --> 00:07:26,340
itself it doesn't have something like

00:07:23,280 --> 00:07:29,010
pluggable authentication that means if

00:07:26,340 --> 00:07:33,180
you have requirement to support a

00:07:29,010 --> 00:07:35,340
certain kind of authentication then you

00:07:33,180 --> 00:07:37,949
need to delegate it to one of these

00:07:35,340 --> 00:07:40,710
standard mechanisms supported by the UA

00:07:37,949 --> 00:07:42,330
a so in our environment we have the

00:07:40,710 --> 00:07:46,289
requirement for strong authentication

00:07:42,330 --> 00:07:49,139
and luckily we have a psalm of your

00:07:46,289 --> 00:07:53,190
identity provider that supports a strong

00:07:49,139 --> 00:07:55,770
authentication and so what we do is any

00:07:53,190 --> 00:07:59,539
kind of authentication needs to be

00:07:55,770 --> 00:08:02,940
delegated to that some identity provider

00:07:59,539 --> 00:08:05,910
for web applications this is rather easy

00:08:02,940 --> 00:08:08,460
because it's just redirect my Asama

00:08:05,910 --> 00:08:10,370
identity provider however when it comes

00:08:08,460 --> 00:08:14,430
to integration with the command line

00:08:10,370 --> 00:08:19,260
option then you need to go through CF

00:08:14,430 --> 00:08:21,740
login - SSO this will write a URL to the

00:08:19,260 --> 00:08:24,260
UA a where you can then authenticate and

00:08:21,740 --> 00:08:26,280
if this is configured to support

00:08:24,260 --> 00:08:29,310
authentication using your samel -

00:08:26,280 --> 00:08:31,430
identity provider sam'l to identify des

00:08:29,310 --> 00:08:34,500
can prompt two-factor authentication

00:08:31,430 --> 00:08:36,510
then you get a passcode which copy into

00:08:34,500 --> 00:08:40,789
your command line and are then

00:08:36,510 --> 00:08:40,789
authenticated to us Cloud Foundry

00:08:43,250 --> 00:08:52,589
so multi-tenancy so in application

00:08:49,529 --> 00:08:56,430
development multi-tenancy frequently is

00:08:52,589 --> 00:08:59,490
a very important feature if you want to

00:08:56,430 --> 00:09:01,560
share a certain set of resources so

00:08:59,490 --> 00:09:07,949
assuming you have back-end services

00:09:01,560 --> 00:09:10,889
which are tenant aware then you can make

00:09:07,949 --> 00:09:17,490
use of you can share these resources

00:09:10,889 --> 00:09:22,019
across multiple tenants so the UAE it

00:09:17,490 --> 00:09:27,029
has a concept of identity zones and an

00:09:22,019 --> 00:09:29,880
identity zone is something that has own

00:09:27,029 --> 00:09:34,290
users owner or clients or groups on

00:09:29,880 --> 00:09:39,180
identity providers and it is addressed

00:09:34,290 --> 00:09:42,690
using zone dot login dot your CF domain

00:09:39,180 --> 00:09:46,949
so that means if I now have a have an

00:09:42,690 --> 00:09:49,920
application and assume I have two

00:09:46,949 --> 00:09:52,589
customers on that application if I then

00:09:49,920 --> 00:09:55,890
make sure that one customer gets

00:09:52,589 --> 00:09:58,860
redirected to the UA a with customer 1

00:09:55,890 --> 00:10:03,180
dot login dot whatsoever and the other

00:09:58,860 --> 00:10:06,930
customer gets customer 2 dot login etc

00:10:03,180 --> 00:10:10,350
then I'm making use of the multi tenant

00:10:06,930 --> 00:10:13,560
features of the UA a I get a JSON web

00:10:10,350 --> 00:10:15,390
token issued for instance and this

00:10:13,560 --> 00:10:18,329
contains the information about my

00:10:15,390 --> 00:10:22,290
identity zone and then the backend

00:10:18,329 --> 00:10:25,800
application can make use of that and

00:10:22,290 --> 00:10:29,240
separate for instance to see two

00:10:25,800 --> 00:10:29,240
separate database tables

00:10:31,820 --> 00:10:39,950
so now explained what about what

00:10:35,990 --> 00:10:41,900
functionalities offered by the UAE how

00:10:39,950 --> 00:10:46,640
do we integrate that into an application

00:10:41,900 --> 00:10:49,370
and for application integration there

00:10:46,640 --> 00:10:53,480
are essentially two protocols that are

00:10:49,370 --> 00:10:57,410
supported by the UAE the first protocol

00:10:53,480 --> 00:11:01,610
is using the OAuth protocol and JSON web

00:10:57,410 --> 00:11:09,080
tokens and the second protocol is using

00:11:01,610 --> 00:11:11,810
sama 2 so let's look at all out and how

00:11:09,080 --> 00:11:14,930
to use that for integration into web

00:11:11,810 --> 00:11:19,670
application so with our two I have

00:11:14,930 --> 00:11:22,850
different entities so if a resource

00:11:19,670 --> 00:11:24,920
owner this is the one who's owning

00:11:22,850 --> 00:11:29,990
access to a certain set of resources

00:11:24,920 --> 00:11:32,270
usually it's a user and then I have an

00:11:29,990 --> 00:11:35,030
OAuth client usually this is my

00:11:32,270 --> 00:11:38,960
application that does something on

00:11:35,030 --> 00:11:41,540
behalf of a user then I have an

00:11:38,960 --> 00:11:44,330
authorization server the authorization

00:11:41,540 --> 00:11:47,120
server is a component that authenticates

00:11:44,330 --> 00:11:51,800
the user and which has the capability

00:11:47,120 --> 00:11:54,560
also to issue a token which is then sent

00:11:51,800 --> 00:11:58,820
for authentication to the resource

00:11:54,560 --> 00:12:02,600
server so from a user perspective how

00:11:58,820 --> 00:12:05,570
does it look of user and that's my

00:12:02,600 --> 00:12:09,760
resource owner and this user is now

00:12:05,570 --> 00:12:15,410
going to accept to access an application

00:12:09,760 --> 00:12:18,410
this application is then redirecting the

00:12:15,410 --> 00:12:21,500
user to the authorization server which

00:12:18,410 --> 00:12:27,410
is the UA a the authorization server

00:12:21,500 --> 00:12:33,430
it's the certain checks and it will

00:12:27,410 --> 00:12:37,070
authenticate the user and also in alt

00:12:33,430 --> 00:12:39,860
there's a term of a scope the scope is a

00:12:37,070 --> 00:12:43,850
permission for a user to access one or

00:12:39,860 --> 00:12:45,350
more resources so assuming everything

00:12:43,850 --> 00:12:50,090
went wine went

00:12:45,350 --> 00:12:53,690
fine then the UAE is redirecting the

00:12:50,090 --> 00:12:56,390
browser to the application and the

00:12:53,690 --> 00:12:57,800
application will now take the client ID

00:12:56,390 --> 00:13:00,760
and client secret

00:12:57,800 --> 00:13:05,420
it has registered as an OAuth client

00:13:00,760 --> 00:13:10,100
will talk to the UAE and the UAE is

00:13:05,420 --> 00:13:12,170
going to issue an access token now the

00:13:10,100 --> 00:13:16,960
application received this access token

00:13:12,170 --> 00:13:21,800
and this access token can then be used

00:13:16,960 --> 00:13:26,180
to access back-end services and sending

00:13:21,800 --> 00:13:28,640
this access token as an HTTP header so

00:13:26,180 --> 00:13:30,830
in our world this is usually an odious

00:13:28,640 --> 00:13:38,860
or a java application could also be

00:13:30,830 --> 00:13:44,090
other kind of applications okay

00:13:38,860 --> 00:13:46,610
the other option of integrating is by

00:13:44,090 --> 00:13:50,930
using the sum of two protocols so what

00:13:46,610 --> 00:13:53,330
has recently be added to the UAE is the

00:13:50,930 --> 00:13:58,490
capability to act as an identity

00:13:53,330 --> 00:14:02,750
provider and when acting as an identity

00:13:58,490 --> 00:14:06,770
provider user would access application

00:14:02,750 --> 00:14:09,440
it would get redirected using the sama

00:14:06,770 --> 00:14:12,590
service provider protocols to the UAE

00:14:09,440 --> 00:14:14,660
the UAE would authenticate the user

00:14:12,590 --> 00:14:17,750
issue Asama

00:14:14,660 --> 00:14:21,830
assertion and the samel assertion would

00:14:17,750 --> 00:14:24,500
then be sent back to the application and

00:14:21,830 --> 00:14:26,630
the application validates the samel

00:14:24,500 --> 00:14:29,510
assertion assuming everything is fine

00:14:26,630 --> 00:14:31,370
authenticates the user so essentially

00:14:29,510 --> 00:14:32,840
these are the two protocols that are

00:14:31,370 --> 00:14:35,840
supported by UAE

00:14:32,840 --> 00:14:40,120
so either taking the oauth protocols or

00:14:35,840 --> 00:14:40,120
taking the sum of two protocols

00:14:46,060 --> 00:14:54,580
so what do we do to simplify integration

00:14:50,770 --> 00:14:57,610
and they're on our side we have some

00:14:54,580 --> 00:15:01,990
boundary conditions and boundary

00:14:57,610 --> 00:15:06,580
conditions is we cannot give developers

00:15:01,990 --> 00:15:11,850
any kind of more or less restricted

00:15:06,580 --> 00:15:11,850
access to the UAA so that means our

00:15:13,110 --> 00:15:18,960
developers should be should have the

00:15:15,430 --> 00:15:22,600
permission to create all out clients but

00:15:18,960 --> 00:15:25,560
when it comes to access to the UAA you

00:15:22,600 --> 00:15:28,210
need to be very careful not to give

00:15:25,560 --> 00:15:30,820
developers to matter too much person

00:15:28,210 --> 00:15:33,070
permissions so if you grant them the

00:15:30,820 --> 00:15:36,670
permission for instance to create or out

00:15:33,070 --> 00:15:39,040
clients then they also could great an

00:15:36,670 --> 00:15:41,470
alt client having the admin permission

00:15:39,040 --> 00:15:45,760
which you probably don't want to do and

00:15:41,470 --> 00:15:47,890
therefore we need to be very restrictive

00:15:45,760 --> 00:15:53,020
on the permissions we're giving to

00:15:47,890 --> 00:15:56,230
developers another point is we're using

00:15:53,020 --> 00:16:00,300
or r2 for micro services so that means

00:15:56,230 --> 00:16:03,550
we rely on these JSON web tokens and

00:16:00,300 --> 00:16:06,160
inside our applications or back-end

00:16:03,550 --> 00:16:12,070
applications we do an offline validation

00:16:06,160 --> 00:16:15,400
of the JSON web token yeah another point

00:16:12,070 --> 00:16:18,040
is we need to have very simple

00:16:15,400 --> 00:16:20,110
application integration so it should not

00:16:18,040 --> 00:16:24,000
be that every application needs to

00:16:20,110 --> 00:16:26,890
invent this or out protocols themselves

00:16:24,000 --> 00:16:34,270
instead there should be a component for

00:16:26,890 --> 00:16:37,690
doing that then from s AP history for

00:16:34,270 --> 00:16:39,570
long times we had the approach that an

00:16:37,690 --> 00:16:41,950
application should declare the

00:16:39,570 --> 00:16:43,840
permissions it's going to check so it

00:16:41,950 --> 00:16:48,970
should not be buried somewhere inside

00:16:43,840 --> 00:16:51,940
the coding experience is make it make a

00:16:48,970 --> 00:16:54,330
declaration that gets much easier to

00:16:51,940 --> 00:16:54,330
handle

00:16:55,160 --> 00:17:02,460
so how do we do that

00:16:58,670 --> 00:17:05,160
our approach is to come up with a

00:17:02,460 --> 00:17:08,280
service broker so we have a service

00:17:05,160 --> 00:17:14,070
broker for integrating applications with

00:17:08,280 --> 00:17:16,590
the UAE and the second piece is we have

00:17:14,070 --> 00:17:18,600
an application router as a standard or

00:17:16,590 --> 00:17:24,240
out client which will recommend to all

00:17:18,600 --> 00:17:27,380
of our applications so what does the

00:17:24,240 --> 00:17:30,750
service broker do essentially

00:17:27,380 --> 00:17:33,480
applications need to define their

00:17:30,750 --> 00:17:35,640
artifacts so they need to define what

00:17:33,480 --> 00:17:38,250
are the scopes were using for functional

00:17:35,640 --> 00:17:40,640
authorization checks what are the

00:17:38,250 --> 00:17:44,640
attributes were using for instance based

00:17:40,640 --> 00:17:47,610
authorizations and then this is what

00:17:44,640 --> 00:17:50,790
needs to be passed to the service broker

00:17:47,610 --> 00:17:53,550
and the mechanism we are using for that

00:17:50,790 --> 00:17:57,360
is to use the service broker parameters

00:17:53,550 --> 00:17:59,850
so it means or applications they

00:17:57,360 --> 00:18:01,740
generate a service instance and then

00:17:59,850 --> 00:18:05,460
they pass a so-called exit security

00:18:01,740 --> 00:18:09,840
Jason which contains information about

00:18:05,460 --> 00:18:12,480
scopes attributes etc so the service

00:18:09,840 --> 00:18:15,990
broker will generate in or out client

00:18:12,480 --> 00:18:18,720
and the service broker will take control

00:18:15,990 --> 00:18:22,140
and governance about the scopes that

00:18:18,720 --> 00:18:25,050
this application is able to request so

00:18:22,140 --> 00:18:27,630
therefore for instance if an application

00:18:25,050 --> 00:18:30,480
comes and says we would like to have the

00:18:27,630 --> 00:18:32,510
UA admin scope no chance we won't do

00:18:30,480 --> 00:18:32,510
that

00:18:34,250 --> 00:18:40,590
so does it look from development

00:18:36,990 --> 00:18:43,200
perspective assuming of my developer and

00:18:40,590 --> 00:18:46,860
this developer wants to develop an

00:18:43,200 --> 00:18:49,500
events application and she says ok I

00:18:46,860 --> 00:18:52,650
want to have something like an event

00:18:49,500 --> 00:18:57,570
reader I want to have an event manager

00:18:52,650 --> 00:19:00,360
and so he defines the role templates in

00:18:57,570 --> 00:19:03,030
this exit security Jason you will define

00:19:00,360 --> 00:19:06,180
I need to have a scope to read events

00:19:03,030 --> 00:19:07,990
and have scoped comment events similar

00:19:06,180 --> 00:19:10,510
event manager gets

00:19:07,990 --> 00:19:14,110
these events additionally the event

00:19:10,510 --> 00:19:18,190
manager gets a scope for managing an

00:19:14,110 --> 00:19:22,600
events and because the event manager

00:19:18,190 --> 00:19:24,100
that one needs to be able to

00:19:22,600 --> 00:19:27,400
differentiate between different

00:19:24,100 --> 00:19:30,910
countries therefore will define an

00:19:27,400 --> 00:19:35,230
attribute country then we can define an

00:19:30,910 --> 00:19:36,940
roll event reader which is similar to

00:19:35,230 --> 00:19:39,760
the road template because it doesn't

00:19:36,940 --> 00:19:43,600
have any attributes and for the event

00:19:39,760 --> 00:19:46,380
manager I have an event manager D for

00:19:43,600 --> 00:19:49,140
Germany which has a country attribute EE

00:19:46,380 --> 00:19:55,420
similar we have an event meant for us

00:19:49,140 --> 00:19:57,640
with a country value us so this is what

00:19:55,420 --> 00:20:00,240
applications need to pass to our service

00:19:57,640 --> 00:20:03,910
broker and service broker takes care of

00:20:00,240 --> 00:20:07,780
creating the orde clients managing all

00:20:03,910 --> 00:20:15,929
these of these role templates for

00:20:07,780 --> 00:20:19,110
instance to the samel group the other

00:20:15,929 --> 00:20:26,230
component which we provide applications

00:20:19,110 --> 00:20:28,420
is a application router so application

00:20:26,230 --> 00:20:33,130
router probably could also be implement

00:20:28,420 --> 00:20:36,130
that using the routing services but we

00:20:33,130 --> 00:20:38,590
didn't have a closer look into that yet

00:20:36,130 --> 00:20:42,640
so essentially what the application

00:20:38,590 --> 00:20:48,700
router does is this is the component

00:20:42,640 --> 00:20:51,370
that X's ro out client so that means it

00:20:48,700 --> 00:20:52,150
very well integrates with our service

00:20:51,370 --> 00:20:56,080
broker

00:20:52,150 --> 00:20:58,480
taking the service binding taking the

00:20:56,080 --> 00:21:02,860
the data from the credentials of the

00:20:58,480 --> 00:21:05,020
service binding and then it requests its

00:21:02,860 --> 00:21:08,170
application router the application

00:21:05,020 --> 00:21:10,240
router will check as this user have been

00:21:08,170 --> 00:21:13,870
authenticated if it has not been

00:21:10,240 --> 00:21:19,530
authenticated it will sent the user to

00:21:13,870 --> 00:21:19,530
the to the UA a for authentication and

00:21:21,170 --> 00:21:25,610
to enforce authentication what the

00:21:24,530 --> 00:21:30,110
application router

00:21:25,610 --> 00:21:33,440
additionally does is it will act as a

00:21:30,110 --> 00:21:38,000
reverse proxy sending the request to our

00:21:33,440 --> 00:21:39,920
resource servers and we have put some

00:21:38,000 --> 00:21:44,120
additional security functionalities

00:21:39,920 --> 00:21:48,680
inside the application router one is CSF

00:21:44,120 --> 00:21:51,560
protection so requests that comes from

00:21:48,680 --> 00:21:54,050
the browser needs to have a certain HTTP

00:21:51,560 --> 00:22:00,770
header set otherwise it will not pass

00:21:54,050 --> 00:22:05,900
the application router and also what we

00:22:00,770 --> 00:22:09,110
do is our intention is that this JSON

00:22:05,900 --> 00:22:13,330
web token never leaves application

00:22:09,110 --> 00:22:16,160
router or resource servers so it means

00:22:13,330 --> 00:22:19,400
the user agent here is going to

00:22:16,160 --> 00:22:25,400
establish a security session but it will

00:22:19,400 --> 00:22:27,710
not pass the drama passed the tokens to

00:22:25,400 --> 00:22:29,950
the application router itself or to the

00:22:27,710 --> 00:22:29,950
browser

00:22:33,159 --> 00:22:41,029
good advance topics

00:22:37,159 --> 00:22:43,580
so these JSON web tokens

00:22:41,029 --> 00:22:47,509
they're nice but sometimes you get to

00:22:43,580 --> 00:22:50,090
the limits one of the limit is if an

00:22:47,509 --> 00:22:55,279
application is using a lot of functional

00:22:50,090 --> 00:22:59,840
authorizations then this job token will

00:22:55,279 --> 00:23:02,090
grow in size and we have experience in

00:22:59,840 --> 00:23:05,960
our cloud foundry environment is that

00:23:02,090 --> 00:23:12,139
there's a limit of 8 kilobyte so as soon

00:23:05,960 --> 00:23:15,200
as you beyond that limits the job token

00:23:12,139 --> 00:23:18,860
is being blocked by the CF router I mean

00:23:15,200 --> 00:23:21,080
you can work around that but still at

00:23:18,860 --> 00:23:30,139
some point in time you will get beyond

00:23:21,080 --> 00:23:33,889
that size and therefore what we are

00:23:30,139 --> 00:23:35,240
looking into currently is two ways so if

00:23:33,889 --> 00:23:38,869
you have one

00:23:35,240 --> 00:23:42,019
one application calling another micro

00:23:38,869 --> 00:23:45,529
service then what you'll see as a

00:23:42,019 --> 00:23:47,929
requirement is either this service

00:23:45,529 --> 00:23:50,389
requires a different set of scopes I

00:23:47,929 --> 00:23:53,090
don't want to forward my tokens so I

00:23:50,389 --> 00:23:55,970
need you have the functionality to to

00:23:53,090 --> 00:24:00,980
request new tokens and for that there is

00:23:55,970 --> 00:24:03,950
a it's called the non-standard or out of

00:24:00,980 --> 00:24:07,759
relation code supported by you AAA which

00:24:03,950 --> 00:24:10,129
allows you doing so thing is sometimes

00:24:07,759 --> 00:24:13,009
you have applications that need to do

00:24:10,129 --> 00:24:15,980
something in the background they somehow

00:24:13,009 --> 00:24:20,450
Scouse holding activities for instance

00:24:15,980 --> 00:24:24,590
and for that you need to have a

00:24:20,450 --> 00:24:27,830
technically user and what we're using

00:24:24,590 --> 00:24:30,289
for that is the OAuth client can either

00:24:27,830 --> 00:24:32,869
do something on behalf of the user this

00:24:30,289 --> 00:24:35,029
is how you usually know it but also

00:24:32,869 --> 00:24:37,730
there's a thing called client credential

00:24:35,029 --> 00:24:42,110
flow where the OAuth client can act on

00:24:37,730 --> 00:24:43,970
on its own behalf so and so this is what

00:24:42,110 --> 00:24:46,720
we're using for technical user

00:24:43,970 --> 00:24:46,720
communication

00:24:46,910 --> 00:24:52,860
so we started with you a a one and a

00:24:50,340 --> 00:24:55,590
half years ago so first looking into

00:24:52,860 --> 00:24:58,910
trying to understand it having the

00:24:55,590 --> 00:25:03,390
feeling we find something new every day

00:24:58,910 --> 00:25:06,180
and the meantime we we start

00:25:03,390 --> 00:25:10,050
contributing back so what we already did

00:25:06,180 --> 00:25:13,350
is contribute an attribute API

00:25:10,050 --> 00:25:15,810
forgetting attributes into the ua8 and

00:25:13,350 --> 00:25:18,780
their contributions about vulnerable

00:25:15,810 --> 00:25:24,390
library versions we're currently working

00:25:18,780 --> 00:25:26,090
on is is autumn a bearer flow this is if

00:25:24,390 --> 00:25:28,950
you have server-to-server communication

00:25:26,090 --> 00:25:35,070
and you need to authenticate the user

00:25:28,950 --> 00:25:39,030
with sam'l assertion without using a

00:25:35,070 --> 00:25:43,530
browser and in the SP area this is a

00:25:39,030 --> 00:25:47,820
very popular flow then performance

00:25:43,530 --> 00:25:50,820
improvements so at some places you AAA

00:25:47,820 --> 00:25:54,120
is making a lot of sequel communication

00:25:50,820 --> 00:25:55,620
which needs to be improved and so

00:25:54,120 --> 00:25:58,440
working also on that one

00:25:55,620 --> 00:26:01,440
and what we have as corporate

00:25:58,440 --> 00:26:04,170
requirement is we need to support a

00:26:01,440 --> 00:26:13,020
password change dialog this is also

00:26:04,170 --> 00:26:16,680
something contribute back to UAE coming

00:26:13,020 --> 00:26:18,900
to the summary so what we found is UA

00:26:16,680 --> 00:26:22,130
can also be used for authentication

00:26:18,900 --> 00:26:24,980
authorization of business applications

00:26:22,130 --> 00:26:27,810
especially when making use of the

00:26:24,980 --> 00:26:32,670
identity zone multi-tenancy features of

00:26:27,810 --> 00:26:34,830
the UA a authentication authorization if

00:26:32,670 --> 00:26:39,720
you know the boundary conditions this is

00:26:34,830 --> 00:26:41,970
all included inside the UA a but to make

00:26:39,720 --> 00:26:43,830
it really usable for application

00:26:41,970 --> 00:26:48,060
integration you need to have a service

00:26:43,830 --> 00:26:52,610
broker otherwise it's very difficult to

00:26:48,060 --> 00:26:52,610
maintain all the entities inside the UAE

00:26:53,060 --> 00:26:58,810
if that I would like to thank you and

00:26:55,370 --> 00:26:58,810
open up for questions

00:27:04,150 --> 00:27:24,020
yeah no this is the topic pluggable

00:27:20,450 --> 00:27:26,270
authentication which is not available so

00:27:24,020 --> 00:27:29,510
we have done that to authenticate

00:27:26,270 --> 00:27:34,780
against our Hana database it is possible

00:27:29,510 --> 00:27:39,140
but you really need to dig into that

00:27:34,780 --> 00:27:42,050
yeah so the question the question was is

00:27:39,140 --> 00:27:45,230
it possible to plug in a different user

00:27:42,050 --> 00:27:49,280
store and the standard fuses stores of

00:27:45,230 --> 00:27:52,520
Zama to open IV Connect etc this is all

00:27:49,280 --> 00:27:58,030
supported but there's no API for

00:27:52,520 --> 00:27:58,030
plugging in another custom data store

00:28:00,570 --> 00:28:03,680
my questions

00:28:19,350 --> 00:28:23,240
it's a how many application

00:28:43,299 --> 00:28:47,249
already actually something

00:29:18,510 --> 00:29:26,010
yeah in here - coughs retching so

00:29:23,170 --> 00:29:26,010
it's a creepy on

00:29:29,310 --> 00:29:39,970
so question is so in the UAE for default

00:29:37,030 --> 00:29:45,280
there is not a qualification so it means

00:29:39,970 --> 00:29:53,970
the only way of doing that is provider

00:29:45,280 --> 00:29:53,970
then yes choice song too many too

00:29:55,860 --> 00:30:08,840
which supports this toothpaste

00:29:58,490 --> 00:30:11,840
automations a password and the trick is

00:30:08,840 --> 00:30:11,840
me

00:30:13,870 --> 00:30:21,950
if you want to do it for the

00:30:17,450 --> 00:30:26,610
a family has

00:30:21,950 --> 00:30:32,840
see if - sshole which will then create

00:30:26,610 --> 00:30:32,840
your own gravy and

00:30:36,850 --> 00:30:39,990
[Music]

00:30:40,870 --> 00:30:43,650
more questions

00:30:45,950 --> 00:30:48,520
okay

00:30:49,430 --> 00:30:52,539
[Music]

00:30:54,800 --> 00:30:56,950

YouTube URL: https://www.youtube.com/watch?v=kztbRiHztyc


