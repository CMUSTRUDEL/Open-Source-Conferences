Title: Warner Music Group - Extending Cloud Foundry UAA (Cloud Foundry Summit 2014)
Publication date: 2014-07-30
Playlist: Cloud Foundry Summit 2014
Description: 
	Technical track breakout session presented by Brian McClain, Lead of Infrastructure Engineering, Warner Music Group.

Serving a global audience of enterprise users requires a global architecture of enterprise-grade software. This talk will cover the changes to UAA that WMG has made, as well as give an overview of our infrastructure architecture, specifically how we serve requests to a globally distributed user base and manage deployments amongst multiple data centers.
Captions: 
	00:00:00,030 --> 00:00:12,920
I actually have a few different things

00:00:11,099 --> 00:00:16,020
I'm going to be talking about today

00:00:12,920 --> 00:00:18,480
actually quote Andrew cliche for quoting

00:00:16,020 --> 00:00:20,869
someone else someone once said when you

00:00:18,480 --> 00:00:22,859
give a talk make one point make it well

00:00:20,869 --> 00:00:27,449
apparently he does not subscribe that

00:00:22,859 --> 00:00:29,939
school thought now they do I so to

00:00:27,449 --> 00:00:32,669
introduce myself I know there's a lot of

00:00:29,939 --> 00:00:34,230
familiar faces in this crowd but my name

00:00:32,669 --> 00:00:36,149
is Brian MacLean I lead up the

00:00:34,230 --> 00:00:38,700
infrastructure and engineering team at

00:00:36,149 --> 00:00:41,340
Warner Music Group you can find me on

00:00:38,700 --> 00:00:44,579
Twitter for random technology related

00:00:41,340 --> 00:00:50,250
stuff and awful jokes at Brian and

00:00:44,579 --> 00:00:52,140
MacLean and for those not familiar with

00:00:50,250 --> 00:00:53,430
Warner Music Group or have at least

00:00:52,140 --> 00:00:57,960
heard the name but not really familiar

00:00:53,430 --> 00:00:59,489
with what we do i ashamed lee pulled

00:00:57,960 --> 00:01:03,379
this from our about page on our website

00:00:59,489 --> 00:01:05,850
but in short we not only serve the

00:01:03,379 --> 00:01:08,520
consumer side of the music industry the

00:01:05,850 --> 00:01:10,619
delivery of physical and digital music

00:01:08,520 --> 00:01:13,350
but as well as the artist side as well

00:01:10,619 --> 00:01:14,790
so everything from finding and signing

00:01:13,350 --> 00:01:18,509
talent to helping them get their music

00:01:14,790 --> 00:01:21,960
out there and licensed and copyrighted a

00:01:18,509 --> 00:01:24,600
couple honorary mentions Jonathan Murray

00:01:21,960 --> 00:01:28,829
our CTO he gave an excellent talk I

00:01:24,600 --> 00:01:30,900
thought last year at a platform and we

00:01:28,829 --> 00:01:34,770
have Michael Michael Eady's over here

00:01:30,900 --> 00:01:36,150
who's our VP of engineering we actually

00:01:34,770 --> 00:01:39,840
also have Allen who's on our

00:01:36,150 --> 00:01:44,369
infrastructure team as well so Moore is

00:01:39,840 --> 00:01:47,430
in full force here so to give myself a

00:01:44,369 --> 00:01:49,159
little bit of street cred and just let

00:01:47,430 --> 00:01:51,180
you guys know why I'm up here talking

00:01:49,159 --> 00:01:54,180
I've been involved with Cloud Foundry

00:01:51,180 --> 00:01:57,299
since 2011 I actually looked herself it

00:01:54,180 --> 00:01:59,189
was vmworld 2011 or Dave McCrory and

00:01:57,299 --> 00:02:01,710
Derrick Collison sat on stage and gave a

00:01:59,189 --> 00:02:04,049
demo of pushing an application to Cloud

00:02:01,710 --> 00:02:06,630
Foundry I've been involved with Bosh

00:02:04,049 --> 00:02:07,350
since 2012 the one-year anniversary of

00:02:06,630 --> 00:02:10,860
Cloud Foundry

00:02:07,350 --> 00:02:12,750
and I've been at wmg for two years now

00:02:10,860 --> 00:02:14,580
just shy of two years

00:02:12,750 --> 00:02:20,550
and since the inception of our

00:02:14,580 --> 00:02:22,140
organization we're here because like I

00:02:20,550 --> 00:02:24,750
expect a lot of people here

00:02:22,140 --> 00:02:26,940
I'm from a globally distributed to

00:02:24,750 --> 00:02:29,940
enterprise you know we're not serving

00:02:26,940 --> 00:02:32,130
our customers strictly out of you know

00:02:29,940 --> 00:02:36,300
one city or one state or even one

00:02:32,130 --> 00:02:37,800
timezone but all over the world and I

00:02:36,300 --> 00:02:40,020
think probably the biggest piece of

00:02:37,800 --> 00:02:42,180
street cred we get is a hundred percent

00:02:40,020 --> 00:02:45,209
of our development is on top of cloud

00:02:42,180 --> 00:02:47,880
foundry we don't put out a app or a

00:02:45,209 --> 00:02:50,550
service it's not running out on cloud

00:02:47,880 --> 00:02:53,790
foundry today and we've been really

00:02:50,550 --> 00:02:56,100
really really busy and we finally want

00:02:53,790 --> 00:02:58,830
to get out and start sharing like what

00:02:56,100 --> 00:03:01,020
we've been doing so the first thing I

00:02:58,830 --> 00:03:04,560
wanted to talk about was some of the

00:03:01,020 --> 00:03:07,430
work that we had done with the UAA if

00:03:04,560 --> 00:03:12,270
you're not very familiar with the UAE or

00:03:07,430 --> 00:03:14,760
what it does for cloud foundry I believe

00:03:12,270 --> 00:03:15,870
the acronym it's actually escaping right

00:03:14,760 --> 00:03:19,670
now it's user authentication and

00:03:15,870 --> 00:03:23,340
authorization I believe but everything

00:03:19,670 --> 00:03:25,799
regarding users and their roles within

00:03:23,340 --> 00:03:28,470
cloud foundry but it also provides a

00:03:25,799 --> 00:03:31,620
Roth interface for applications running

00:03:28,470 --> 00:03:36,140
on top Cloud Foundry so we actually run

00:03:31,620 --> 00:03:39,030
two UAA's in our architecture the

00:03:36,140 --> 00:03:41,850
standard vanilla UI a that comes out of

00:03:39,030 --> 00:03:43,500
the box and that serves up everything on

00:03:41,850 --> 00:03:46,200
the cloud foundry side all our organs

00:03:43,500 --> 00:03:48,660
and spaces and we actually run a second

00:03:46,200 --> 00:03:50,670
UA a as a cloud foundry application and

00:03:48,660 --> 00:03:54,299
this is where we had done all of our

00:03:50,670 --> 00:03:57,360
modifications this does our Olaf

00:03:54,299 --> 00:04:01,950
authentication this does our user

00:03:57,360 --> 00:04:07,500
authorization and we'll dig into some of

00:04:01,950 --> 00:04:09,090
the some of these specifics so the first

00:04:07,500 --> 00:04:11,220
thing that we had done and I believe at

00:04:09,090 --> 00:04:13,739
this point this is actually an option

00:04:11,220 --> 00:04:17,910
out of the box or maybe not out of the

00:04:13,739 --> 00:04:20,669
box that will work but when we started

00:04:17,910 --> 00:04:23,930
doing this about two years ago we

00:04:20,669 --> 00:04:25,970
integrated UA with Active Directory

00:04:23,930 --> 00:04:30,190
coming from a tradition

00:04:25,970 --> 00:04:32,540
all Microsoft based enterprise everyone

00:04:30,190 --> 00:04:34,250
logged in through every application that

00:04:32,540 --> 00:04:35,960
was integrated with Active Directory and

00:04:34,250 --> 00:04:38,450
they still expected this to be the case

00:04:35,960 --> 00:04:40,430
they didn't want another username and

00:04:38,450 --> 00:04:42,980
password to remember and if we were

00:04:40,430 --> 00:04:46,040
going to come and you know and upset our

00:04:42,980 --> 00:04:48,740
own industry and our own employees with

00:04:46,040 --> 00:04:53,210
rewriting our entire stack of running

00:04:48,740 --> 00:04:58,370
our business we wanted to make it a very

00:04:53,210 --> 00:05:01,840
pleasant situation for him the other

00:04:58,370 --> 00:05:04,880
thing that we had done was we actually

00:05:01,840 --> 00:05:11,060
removed the integration with post Christ

00:05:04,880 --> 00:05:12,560
and we went with Cassandra the biggest

00:05:11,060 --> 00:05:14,990
reason for this was we were simply

00:05:12,560 --> 00:05:17,060
already on Cassandra our back-end

00:05:14,990 --> 00:05:19,040
services right and read data from

00:05:17,060 --> 00:05:21,200
Cassandra we are already running it

00:05:19,040 --> 00:05:24,169
tuning it we'd spend a lot of time

00:05:21,200 --> 00:05:27,860
learning it and it seemed like a

00:05:24,169 --> 00:05:30,040
no-brainer for us we have our kind of

00:05:27,860 --> 00:05:33,770
core Cassandra cluster that serves our

00:05:30,040 --> 00:05:36,470
kind of basic needs of authentication

00:05:33,770 --> 00:05:38,540
and authorization that's globally

00:05:36,470 --> 00:05:42,710
distributed along with our other

00:05:38,540 --> 00:05:44,450
Cassandra datacenters and you know it

00:05:42,710 --> 00:05:47,479
allows us to be running multiple

00:05:44,450 --> 00:05:49,760
instances of UAA without kind of running

00:05:47,479 --> 00:05:52,100
into some of the issues of well if you

00:05:49,760 --> 00:05:55,040
start your authentication request on one

00:05:52,100 --> 00:05:57,320
UA and for some reason that next request

00:05:55,040 --> 00:06:00,020
goes to the next doesn't really like

00:05:57,320 --> 00:06:01,729
that so this was this was a big one for

00:06:00,020 --> 00:06:06,200
us

00:06:01,729 --> 00:06:11,270
we also decomposes a little bit and this

00:06:06,200 --> 00:06:14,720
was a kind of a selfish process for us

00:06:11,270 --> 00:06:16,700
simply because we wanted this to look

00:06:14,720 --> 00:06:22,310
like a lot of the applications that we

00:06:16,700 --> 00:06:27,020
have in our stack at the time like a lot

00:06:22,310 --> 00:06:28,100
of people are doing I I'm assuming you

00:06:27,020 --> 00:06:31,640
know we have our separation between

00:06:28,100 --> 00:06:34,700
front-end and back-end back in being

00:06:31,640 --> 00:06:37,460
more the the data layer and

00:06:34,700 --> 00:06:41,180
simply serving up the front end and we

00:06:37,460 --> 00:06:43,580
wanted you a to do the same so they're

00:06:41,180 --> 00:06:45,560
more or less essentially the same

00:06:43,580 --> 00:06:47,660
however the front end is simply just

00:06:45,560 --> 00:06:51,020
passing along requests to the back end

00:06:47,660 --> 00:06:52,940
but this allows us to as we did with our

00:06:51,020 --> 00:06:54,620
other services keeps that network

00:06:52,940 --> 00:06:58,370
separation between our public facing

00:06:54,620 --> 00:07:03,470
applications and our internal data

00:06:58,370 --> 00:07:04,880
facing services so the next point I want

00:07:03,470 --> 00:07:07,970
to talk to and this is probably also

00:07:04,880 --> 00:07:09,050
I'll spend a lot more of my talk simply

00:07:07,970 --> 00:07:11,990
because this is where I was more

00:07:09,050 --> 00:07:15,920
involved was in our multi data center

00:07:11,990 --> 00:07:17,660
architecture so I'm actually really

00:07:15,920 --> 00:07:19,370
excited to show this slide because it's

00:07:17,660 --> 00:07:23,230
the first time we've shown this to

00:07:19,370 --> 00:07:25,310
anyone besides you know ourselves

00:07:23,230 --> 00:07:27,770
I'm not going to dig through every

00:07:25,310 --> 00:07:30,290
single layer of this I'm sure people are

00:07:27,770 --> 00:07:32,860
familiar with how some of these

00:07:30,290 --> 00:07:35,540
technologies work how rabbit and how

00:07:32,860 --> 00:07:38,900
elasticsearch and other technologies

00:07:35,540 --> 00:07:40,780
like that work a little hit on a couple

00:07:38,900 --> 00:07:42,950
but one thing I want to point out is

00:07:40,780 --> 00:07:44,720
what I've highlighted in blue are

00:07:42,950 --> 00:07:49,880
actually individual cloud foundry

00:07:44,720 --> 00:07:52,310
deployments not pieces of a cluster for

00:07:49,880 --> 00:07:54,620
cloud foundry at cloud foundry but full

00:07:52,310 --> 00:07:58,100
cloud foundries per each one of those

00:07:54,620 --> 00:08:00,560
individual boxes and there was a lot of

00:07:58,100 --> 00:08:02,360
reasons for this a lot of reasons that I

00:08:00,560 --> 00:08:05,960
could probably give an entire talk on

00:08:02,360 --> 00:08:08,510
just that form and this was kind of one

00:08:05,960 --> 00:08:11,260
of the initial things that you know made

00:08:08,510 --> 00:08:15,200
me really look at Warner music as a

00:08:11,260 --> 00:08:16,420
company that was exciting to work for so

00:08:15,200 --> 00:08:20,380
this kind of demonstrates how we've

00:08:16,420 --> 00:08:23,540
decomposed the front of the backend and

00:08:20,380 --> 00:08:25,010
all of our data services are not

00:08:23,540 --> 00:08:27,350
surprisingly running on that service

00:08:25,010 --> 00:08:28,790
there but we actually run multiple front

00:08:27,350 --> 00:08:31,130
and Club hundreds as well because we

00:08:28,790 --> 00:08:32,990
want to expose different applications to

00:08:31,130 --> 00:08:36,080
different customers some of them public

00:08:32,990 --> 00:08:38,990
facing some of them only internal to one

00:08:36,080 --> 00:08:41,419
subdivision of Warner Music and doing

00:08:38,990 --> 00:08:42,770
this really simplifies that process you

00:08:41,419 --> 00:08:47,330
know we don't have a lot of logic in a

00:08:42,770 --> 00:08:48,110
in the load balancer on top of this but

00:08:47,330 --> 00:08:50,630
rather we just

00:08:48,110 --> 00:08:53,959
and police say you know only a lot of

00:08:50,630 --> 00:08:58,399
traffic to this cluster you know if it's

00:08:53,959 --> 00:08:59,839
coming from an internal IP one thing I

00:08:58,399 --> 00:09:02,630
will be hitting on is a data persistence

00:08:59,839 --> 00:09:04,630
layer as well as I mentioned this we've

00:09:02,630 --> 00:09:07,130
made a big bet on cassandra for this

00:09:04,630 --> 00:09:08,630
we're looking at couple other

00:09:07,130 --> 00:09:11,060
technologies to help fill this out for

00:09:08,630 --> 00:09:15,829
some of the things that maybe Cassandra

00:09:11,060 --> 00:09:20,480
is the best choice for it but yes we can

00:09:15,829 --> 00:09:23,260
actually just dive right into that so

00:09:20,480 --> 00:09:26,269
the reason for this architecture is

00:09:23,260 --> 00:09:28,630
obviously downtimes bad and we want to

00:09:26,269 --> 00:09:31,490
avoid it just like everyone else does

00:09:28,630 --> 00:09:33,950
the nice thing about this though is how

00:09:31,490 --> 00:09:35,750
how this has been architected and for

00:09:33,950 --> 00:09:39,140
those who did come from James Bears talk

00:09:35,750 --> 00:09:40,579
you mentioned cloud Credo and their blog

00:09:39,140 --> 00:09:43,640
posts on how they architected their

00:09:40,579 --> 00:09:45,680
infrastructure for comic relief and when

00:09:43,640 --> 00:09:47,360
I first read that post I kind of had to

00:09:45,680 --> 00:09:49,370
laugh to myself because we were building

00:09:47,360 --> 00:09:52,610
this house at the same time they were

00:09:49,370 --> 00:09:56,600
building it out so I guess great great

00:09:52,610 --> 00:09:58,579
minds think alike but these these each

00:09:56,600 --> 00:10:01,880
of these data centers in the case of a

00:09:58,579 --> 00:10:04,670
network partition can run completely

00:10:01,880 --> 00:10:06,440
independent of each other we have our

00:10:04,670 --> 00:10:11,269
data replicating to each of the

00:10:06,440 --> 00:10:12,589
Cassandra nodes and each data center so

00:10:11,269 --> 00:10:16,339
we at least have one copy of that data

00:10:12,589 --> 00:10:19,279
in every single data center and we've

00:10:16,339 --> 00:10:22,670
seen this where maybe the network goes

00:10:19,279 --> 00:10:24,680
down for one reason or another and we

00:10:22,670 --> 00:10:28,550
can quickly kind of either automatically

00:10:24,680 --> 00:10:30,649
from the global load balancer or even

00:10:28,550 --> 00:10:35,360
within the data center and say well okay

00:10:30,649 --> 00:10:37,240
let's let's not try to dolly around well

00:10:35,360 --> 00:10:39,589
while we're trying to get this backup

00:10:37,240 --> 00:10:41,449
let's just send all our requests to the

00:10:39,589 --> 00:10:43,459
data center that's running correctly and

00:10:41,449 --> 00:10:47,269
it it will catch up when everything's

00:10:43,459 --> 00:10:52,010
back up and running so for those who

00:10:47,269 --> 00:10:55,730
haven't used Cassandra a lot it has

00:10:52,010 --> 00:10:58,220
multi data center as a core concept when

00:10:55,730 --> 00:10:59,170
you look at the partitioning schemes you

00:10:58,220 --> 00:11:03,790
could say Indra

00:10:59,170 --> 00:11:07,689
and so the discovery schemes a lot more

00:11:03,790 --> 00:11:11,319
specific to how the actual

00:11:07,689 --> 00:11:13,809
infrastructure is architected whether

00:11:11,319 --> 00:11:17,129
that's rack based data center based

00:11:13,809 --> 00:11:20,619
there's even some AWS and you see two

00:11:17,129 --> 00:11:22,689
specific partition errs and what they

00:11:20,619 --> 00:11:26,350
were for to snitches but kind of in the

00:11:22,689 --> 00:11:28,569
discovery model for Cassandra as I

00:11:26,350 --> 00:11:32,529
mentioned we keep our reads local but

00:11:28,569 --> 00:11:33,970
our writes global fully realizing that

00:11:32,529 --> 00:11:36,929
you know we're fighting the cap theorem

00:11:33,970 --> 00:11:40,029
at that point we trade off the

00:11:36,929 --> 00:11:44,350
availability or the we check out the

00:11:40,029 --> 00:11:45,699
consistency for the availability you

00:11:44,350 --> 00:11:48,730
know we're not at least at this point

00:11:45,699 --> 00:11:52,899
dealing with data that needs to be 100%

00:11:48,730 --> 00:11:54,309
up to date nanosecond is updated but

00:11:52,899 --> 00:12:00,040
we've seen that Cassandra kind of serves

00:11:54,309 --> 00:12:04,660
this in a way that's good enough one of

00:12:00,040 --> 00:12:07,179
the big lessons we've learned is you

00:12:04,660 --> 00:12:09,429
cannot really run once you're getting

00:12:07,179 --> 00:12:11,970
into the terabytes for bigger size of

00:12:09,429 --> 00:12:17,009
data one single Cassandra cluster with

00:12:11,970 --> 00:12:20,829
30 40 50 applications all hitting it and

00:12:17,009 --> 00:12:24,549
expect everything to be sunshine and

00:12:20,829 --> 00:12:26,470
roses I'm actually dealing with the

00:12:24,549 --> 00:12:30,459
issue of this right now

00:12:26,470 --> 00:12:34,779
so what we're moving to is many

00:12:30,459 --> 00:12:36,819
Cassandra clusters not hundreds but you

00:12:34,779 --> 00:12:40,239
know we're moving to a one Cassandra

00:12:36,819 --> 00:12:41,350
cluster per application stream that

00:12:40,239 --> 00:12:46,059
application stream may have multiple

00:12:41,350 --> 00:12:49,029
services within it but just kind of

00:12:46,059 --> 00:12:51,639
partitioning that load in the data we've

00:12:49,029 --> 00:12:58,480
seen is gonna save you a lot of headache

00:12:51,639 --> 00:13:00,899
and save you a lot of sleep so back to

00:12:58,480 --> 00:13:02,980
kind of why we're all here for this week

00:13:00,899 --> 00:13:04,779
on the cloud foundry front we've

00:13:02,980 --> 00:13:09,240
actually recently completed our

00:13:04,779 --> 00:13:11,700
migration from Cloud Foundry v1 to v2 v2

00:13:09,240 --> 00:13:13,980
was extremely early in its development

00:13:11,700 --> 00:13:16,800
cycle when when we started this two

00:13:13,980 --> 00:13:19,440
years ago and while we were extremely

00:13:16,800 --> 00:13:21,360
excited for what was coming out of it

00:13:19,440 --> 00:13:24,990
we needed to get to production so we

00:13:21,360 --> 00:13:26,640
went to prod on b1 and that drove a lot

00:13:24,990 --> 00:13:30,240
of the architectural decisions that we

00:13:26,640 --> 00:13:32,399
made on that craft I showed you James

00:13:30,240 --> 00:13:35,910
pointed out that while it's not on the

00:13:32,399 --> 00:13:36,860
immediate roadmap multi datacenter

00:13:35,910 --> 00:13:41,670
multi-zone

00:13:36,860 --> 00:13:43,890
concepts in cloud foundry are still

00:13:41,670 --> 00:13:47,160
being thought about there's bigger

00:13:43,890 --> 00:13:49,320
problems to tackle as he mentioned but

00:13:47,160 --> 00:13:53,339
this is why you know you can architect

00:13:49,320 --> 00:13:55,290
around that the nice thing for those who

00:13:53,339 --> 00:13:58,080
maybe haven't done this yet and you know

00:13:55,290 --> 00:14:01,950
are on b1 it was not a painful process

00:13:58,080 --> 00:14:04,790
to do you know there's already little to

00:14:01,950 --> 00:14:08,070
no coding specific to Cloud Foundry

00:14:04,790 --> 00:14:09,810
depending on your framework and if there

00:14:08,070 --> 00:14:12,360
is it's generally limited to pulling in

00:14:09,810 --> 00:14:15,990
things and how are you pulling services

00:14:12,360 --> 00:14:18,240
and ports to listen on and for us

00:14:15,990 --> 00:14:20,190
actually removed a bit of complexity

00:14:18,240 --> 00:14:23,279
specifically around logging we had a

00:14:20,190 --> 00:14:25,320
solution that was based on zero on cue

00:14:23,279 --> 00:14:28,829
with delivered log stash to

00:14:25,320 --> 00:14:30,959
elasticsearch and then we kind of looked

00:14:28,829 --> 00:14:33,570
through that in Cabana using logger

00:14:30,959 --> 00:14:38,130
Gator and we can just forward straight

00:14:33,570 --> 00:14:39,720
to log stash and of course because we're

00:14:38,130 --> 00:14:47,820
not absolutely insane of course we

00:14:39,720 --> 00:14:49,709
manage this by Bosh now so diving a bit

00:14:47,820 --> 00:14:52,220
deeper into the services versus

00:14:49,709 --> 00:14:56,430
application layer

00:14:52,220 --> 00:14:58,950
apps and services get separated on

00:14:56,430 --> 00:15:02,790
different Cloud Foundry clusters and

00:14:58,950 --> 00:15:04,529
these are actual network separations as

00:15:02,790 --> 00:15:07,380
I mentioned from even just the security

00:15:04,529 --> 00:15:13,910
side alone talking to our security guys

00:15:07,380 --> 00:15:17,910
is let them sleep at night as well and

00:15:13,910 --> 00:15:20,459
we run multiple app and multiple service

00:15:17,910 --> 00:15:22,830
layered cloud Connery's and as I

00:15:20,459 --> 00:15:27,030
mentioned what does what this lets us do

00:15:22,830 --> 00:15:31,350
is spin these up based on different

00:15:27,030 --> 00:15:35,190
needs whether that's public versus

00:15:31,350 --> 00:15:37,860
private versus internal versus hosted by

00:15:35,190 --> 00:15:41,280
us but for our customers or any other

00:15:37,860 --> 00:15:44,040
scenario you can think going with this

00:15:41,280 --> 00:15:45,240
concept from day one it gives us the

00:15:44,040 --> 00:15:47,820
flexibility that we needed without

00:15:45,240 --> 00:15:50,420
putting a lot of that logic at the at

00:15:47,820 --> 00:15:52,800
the load balancer and the writing layer

00:15:50,420 --> 00:15:54,900
so the next thing I want to talk about

00:15:52,800 --> 00:15:57,990
to kind of go in a much different

00:15:54,900 --> 00:16:02,840
direction is something that we've been

00:15:57,990 --> 00:16:06,180
building out for quite some time now and

00:16:02,840 --> 00:16:09,510
while delivering Cloud Foundry really

00:16:06,180 --> 00:16:13,950
did obviously help our developers become

00:16:09,510 --> 00:16:16,530
much more productive and you know just

00:16:13,950 --> 00:16:18,510
seeing them be able to increase their

00:16:16,530 --> 00:16:22,320
velocity of how quickly they're turning

00:16:18,510 --> 00:16:24,000
out these services and applications what

00:16:22,320 --> 00:16:26,250
we want to do is give them even a bit

00:16:24,000 --> 00:16:28,470
more power and give non-developers a bit

00:16:26,250 --> 00:16:35,210
more power as well so this is where we

00:16:28,470 --> 00:16:37,490
developed concept or cloud console so

00:16:35,210 --> 00:16:40,380
where this really hits in is on

00:16:37,490 --> 00:16:42,540
newcomers to cloud foundry so every time

00:16:40,380 --> 00:16:44,190
we were onboarding a new developer

00:16:42,540 --> 00:16:46,200
obviously there's a bit of learning

00:16:44,190 --> 00:16:48,780
curve there I don't think the cloud

00:16:46,200 --> 00:16:51,750
foundry CLI is the most complex thing

00:16:48,780 --> 00:16:56,100
you'll ever learn specifically after

00:16:51,750 --> 00:16:58,710
learning Bosh but now did they get Bosh

00:16:56,100 --> 00:17:05,400
but I don't think any was gonna do that

00:16:58,710 --> 00:17:08,370
deny that it was still just a one albeit

00:17:05,400 --> 00:17:10,920
small barrier to getting developers up

00:17:08,370 --> 00:17:15,720
and running a cloud foundry

00:17:10,920 --> 00:17:18,420
so we asked well to get these guys on to

00:17:15,720 --> 00:17:20,970
get non developers looking at some more

00:17:18,420 --> 00:17:23,760
business face metrics you know was there

00:17:20,970 --> 00:17:25,890
a way we could kind of put a interface

00:17:23,760 --> 00:17:28,110
on top of this that didn't require them

00:17:25,890 --> 00:17:30,810
to you know at the time that we started

00:17:28,110 --> 00:17:33,210
looking at this install Ruby and VMC but

00:17:30,810 --> 00:17:36,020
even now install a binary and learn the

00:17:33,210 --> 00:17:38,000
syntax and login

00:17:36,020 --> 00:17:43,080
you know kind of go the route of

00:17:38,000 --> 00:17:47,430
figuring out you know the past just

00:17:43,080 --> 00:17:50,940
docks and training so that's where we

00:17:47,430 --> 00:17:53,400
did the old cloud console and whoever's

00:17:50,940 --> 00:17:56,310
gonna break the Wi-Fi and now it's the

00:17:53,400 --> 00:18:00,000
time to do it because I'm going to try a

00:17:56,310 --> 00:18:04,320
demo so what we have running here is our

00:18:00,000 --> 00:18:06,390
actual cloud console environment and

00:18:04,320 --> 00:18:08,130
I've actually seen this a couple times

00:18:06,390 --> 00:18:12,570
obviously pivotal provides their own run

00:18:08,130 --> 00:18:15,060
to the luau which is focused on kind of

00:18:12,570 --> 00:18:19,830
providing cloud boundaries as a paid

00:18:15,060 --> 00:18:22,290
service at least in my opinion and I've

00:18:19,830 --> 00:18:24,840
seen a couple people present similar

00:18:22,290 --> 00:18:27,000
concepts to this and where we were

00:18:24,840 --> 00:18:29,940
really aiming with this is a tool that

00:18:27,000 --> 00:18:33,150
that expanded not only developers been

00:18:29,940 --> 00:18:35,490
on developers as well so while we have

00:18:33,150 --> 00:18:38,930
the power to do everything like manage

00:18:35,490 --> 00:18:41,280
orgs and spaces manage applications

00:18:38,930 --> 00:18:43,580
we've already seen the side effect and

00:18:41,280 --> 00:18:45,450
this was kind of an unexpected one where

00:18:43,580 --> 00:18:47,580
people have never used cloud foundry

00:18:45,450 --> 00:18:51,270
before we're diving in and and using

00:18:47,580 --> 00:18:52,650
this as a reference so to just kind of

00:18:51,270 --> 00:18:55,470
dive into this a little bit and show you

00:18:52,650 --> 00:18:58,680
guys what it's about I have my

00:18:55,470 --> 00:19:00,150
organization here with a whopping water

00:18:58,680 --> 00:19:02,160
application that went straight to prod

00:19:00,150 --> 00:19:06,120
because no test code anymore

00:19:02,160 --> 00:19:08,040
right and you'll see a lot of familiar

00:19:06,120 --> 00:19:11,730
concepts with people have done these

00:19:08,040 --> 00:19:13,520
these consoles before you can dig into

00:19:11,730 --> 00:19:19,710
the actual applications running here

00:19:13,520 --> 00:19:21,540
start stop you can manage services and

00:19:19,710 --> 00:19:22,890
environment variables so what I got

00:19:21,540 --> 00:19:24,570
running here is a very simple

00:19:22,890 --> 00:19:26,370
application this is actually the

00:19:24,570 --> 00:19:29,480
application I use every time we spin up

00:19:26,370 --> 00:19:31,770
a new cloud foundry just kind of test

00:19:29,480 --> 00:19:34,860
this is Ruby for example we have a

00:19:31,770 --> 00:19:38,960
couple others and Java and node and go

00:19:34,860 --> 00:19:44,240
now but all we're simply doing is

00:19:38,960 --> 00:19:47,000
dumping out environment variables so

00:19:44,240 --> 00:19:49,230
what we'll do here

00:19:47,000 --> 00:19:58,830
let's leave a little message for the

00:19:49,230 --> 00:20:02,340
next person who uses this and I think

00:19:58,830 --> 00:20:13,549
there was a service it's already about

00:20:02,340 --> 00:20:15,780
okay cool so you know for those who do

00:20:13,549 --> 00:20:18,630
working Cloud Foundry we had to give it

00:20:15,780 --> 00:20:23,220
a quick restart and obviously you know

00:20:18,630 --> 00:20:25,650
we'll see that's right here so obviously

00:20:23,220 --> 00:20:29,490
a super super super high-level look at

00:20:25,650 --> 00:20:32,820
the console but this is something we're

00:20:29,490 --> 00:20:34,860
hoping to continue to build out and make

00:20:32,820 --> 00:20:37,370
this kind of the initial place that

00:20:34,860 --> 00:20:47,040
developers can go within more music and

00:20:37,370 --> 00:20:48,840
and begin to development that was the

00:20:47,040 --> 00:20:50,970
exact question I told it was gonna be

00:20:48,840 --> 00:20:52,980
the very first question so we're in

00:20:50,970 --> 00:20:55,290
talks to do that internally obviously

00:20:52,980 --> 00:20:58,020
one of the first points I made was were

00:20:55,290 --> 00:21:01,200
an enterprise that's changing how we do

00:20:58,020 --> 00:21:02,700
a lot of stuff one of that is convincing

00:21:01,200 --> 00:21:05,059
them that open source is not the worst

00:21:02,700 --> 00:21:05,059
thing in the world

00:21:07,280 --> 00:21:18,660
exactly exactly no and so we're

00:21:16,410 --> 00:21:20,549
definitely pushing myself Michael

00:21:18,660 --> 00:21:23,000
Jonathan or CTO you know we're all

00:21:20,549 --> 00:21:27,140
pushing the the proper people to do so

00:21:23,000 --> 00:21:30,510
obviously we gotta appease those who

00:21:27,140 --> 00:21:33,540
need appeasing but you know we're making

00:21:30,510 --> 00:21:36,360
a strong case and I think coming out to

00:21:33,540 --> 00:21:38,880
see if someone and telling them that it

00:21:36,360 --> 00:21:41,370
was very first question as I called is

00:21:38,880 --> 00:21:49,110
it's gonna be a good push in the right

00:21:41,370 --> 00:21:50,880
direction so I actually went through

00:21:49,110 --> 00:21:51,929
this a little bit quick since I know we

00:21:50,880 --> 00:21:55,530
started a little bit late and we have

00:21:51,929 --> 00:21:58,720
another talk after me but I can dive

00:21:55,530 --> 00:22:05,330
into some questions if anyone has any

00:21:58,720 --> 00:22:08,600
yeah so right now it so the question was

00:22:05,330 --> 00:22:10,280
was are you a integration only for

00:22:08,600 --> 00:22:13,370
Warner Music Group and other enterprises

00:22:10,280 --> 00:22:17,270
can bet on Cloud Foundry the goals of

00:22:13,370 --> 00:22:20,920
the foundation are to make the project

00:22:17,270 --> 00:22:25,580
the platform of choice for application

00:22:20,920 --> 00:22:27,110
delivery and change the world we really

00:22:25,580 --> 00:22:29,660
think Cloud Foundry belongs to the

00:22:27,110 --> 00:22:31,640
industry and over time we think you know

00:22:29,660 --> 00:22:33,410
many many companies more than the 32

00:22:31,640 --> 00:22:36,799
that have been announced today will get

00:22:33,410 --> 00:22:39,049
involved and help I will say our ad guys

00:22:36,799 --> 00:22:41,120
kind of got a little bit scared when we

00:22:39,049 --> 00:22:45,290
asked if you know that was a good idea

00:22:41,120 --> 00:22:47,450
or not but you know we're also looking

00:22:45,290 --> 00:22:50,570
at maybe there's a better solution to

00:22:47,450 --> 00:23:00,620
doing that maybe multiple authentication

00:22:50,570 --> 00:23:02,690
providers not currently as I mentioned

00:23:00,620 --> 00:23:05,450
the solution was kind of specific to the

00:23:02,690 --> 00:23:07,760
need at the time but you know we even

00:23:05,450 --> 00:23:10,669
look at you know what's our solution

00:23:07,760 --> 00:23:12,040
around if we wanted to have Facebook

00:23:10,669 --> 00:23:19,580
authentication or Twitter authentication

00:23:12,040 --> 00:23:21,169
I my personal two senses we simply find

00:23:19,580 --> 00:23:23,690
a way to do multiple authentication

00:23:21,169 --> 00:23:27,429
providers and not try to toss everything

00:23:23,690 --> 00:23:27,429
into into ad

00:23:31,519 --> 00:23:39,380
it was it was discussed but as we were

00:23:37,340 --> 00:23:41,659
serving the WMT employees and we were

00:23:39,380 --> 00:23:44,179
getting a lot from you a it kind of

00:23:41,659 --> 00:23:46,880
seemed at the time at least not the best

00:23:44,179 --> 00:23:51,549
fit exactly that may be a possible

00:23:46,880 --> 00:23:51,549
solution yep

00:23:54,010 --> 00:24:01,789
no way

00:23:56,049 --> 00:24:03,889
no no so so it was actually not that

00:24:01,789 --> 00:24:06,409
hard and that's that's one of the points

00:24:03,889 --> 00:24:08,690
I wanted to make was I know it's been

00:24:06,409 --> 00:24:11,059
kind of hammered on for the past couple

00:24:08,690 --> 00:24:13,940
days but the fact that everything in

00:24:11,059 --> 00:24:16,730
Connery's is open-source we toss that

00:24:13,940 --> 00:24:19,460
some guys that had really strong java

00:24:16,730 --> 00:24:20,750
and kiss hander experience and i don't

00:24:19,460 --> 00:24:22,370
know the exact number of days of

00:24:20,750 --> 00:24:26,289
turnaround but I think that's kind of

00:24:22,370 --> 00:24:26,289
point is as measured in days not months

00:24:26,500 --> 00:24:36,169
yep we're in talks on the UA front as

00:24:34,460 --> 00:24:40,399
well it's actually talking to these guys

00:24:36,169 --> 00:24:42,320
right before the talk yeah so and then

00:24:40,399 --> 00:24:46,340
again the grayness solid is this was

00:24:42,320 --> 00:24:48,799
tested on CFP one but that's why we went

00:24:46,340 --> 00:24:51,010
with fully independent cloud founders

00:24:48,799 --> 00:24:54,950
these aren't talking across datacenters

00:24:51,010 --> 00:24:57,490
and for the exact same reasons is we

00:24:54,950 --> 00:24:57,490
tried it

00:24:58,149 --> 00:25:05,360
so it's actually using the UA that ships

00:25:02,750 --> 00:25:09,760
with the on the Cloud Foundry front is

00:25:05,360 --> 00:25:12,370
using the UA that ships with with CF

00:25:09,760 --> 00:25:14,899
where all our Cassandra and ad

00:25:12,370 --> 00:25:21,260
integration is actually the second UA

00:25:14,899 --> 00:25:25,130
that we run so well exactly so and the

00:25:21,260 --> 00:25:26,779
other thing are kind of I don't even

00:25:25,130 --> 00:25:29,059
call it a 10% project but as we good

00:25:26,779 --> 00:25:31,159
time is we have been working on tooling

00:25:29,059 --> 00:25:33,409
around kind of managing multi data

00:25:31,159 --> 00:25:35,750
center application deployments the way I

00:25:33,409 --> 00:25:38,660
like to describe it was the application

00:25:35,750 --> 00:25:43,299
answer to Walsh

00:25:38,660 --> 00:25:47,730
if anything else

00:25:43,299 --> 00:25:51,280
no okay what thank you thank you

00:25:47,730 --> 00:25:54,420
[Applause]

00:25:51,280 --> 00:25:54,420

YouTube URL: https://www.youtube.com/watch?v=eQhRl9GYGpQ


