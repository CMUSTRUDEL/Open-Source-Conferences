Title: Stark & Wayne - In Pursuit of Complete Visibility within Cloud Foundry (Cloud Foundry Summit 2014)
Publication date: 2014-07-30
Playlist: Cloud Foundry Summit 2014
Description: 
	Technical track breakout session presented by Wayne E Seguin, Stark & Wayne.

When working with Cloud Foundry, AppFirst's unique data collection provides unparalleled visibility over traditional tools. This full stack visibility spans the entire PaaS and respective services.

In this talk, Wayne E. Seguin of Stark & Wayne will discuss how his team found and utilized AppFirst for PaaS to gain unprecedented visibility. Through years of experience working with PaaS operations, they combined lessons learned in operations workflows yielding a deep understanding of both the space and needs. This year we will roll out an integration enabling Cloud Foundry operators to have full scale visibility across all resources.
Captions: 
	00:00:00,930 --> 00:00:04,220
[Music]

00:00:08,690 --> 00:00:13,920
okay hello my name is Wayne cygwin I am

00:00:11,670 --> 00:00:17,100
work at Stark and Wayne under the alyssa

00:00:13,920 --> 00:00:19,199
lustrous leader dr. Nick Williams who

00:00:17,100 --> 00:00:21,420
many of you have probably either met

00:00:19,199 --> 00:00:23,010
interacted with or at least read some

00:00:21,420 --> 00:00:25,289
stuff that has flown and flown from his

00:00:23,010 --> 00:00:27,269
fingers first real quick and

00:00:25,289 --> 00:00:29,010
announcement we put something up for the

00:00:27,269 --> 00:00:31,019
conference it'll actually remain up

00:00:29,010 --> 00:00:31,859
after the conference it's try CF dark

00:00:31,019 --> 00:00:33,660
and wane.com

00:00:31,859 --> 00:00:36,809
it allows you to try out Cloud Foundry

00:00:33,660 --> 00:00:39,210
on ec2 by just entering an AWS ID and

00:00:36,809 --> 00:00:41,790
key and your email address it goes ahead

00:00:39,210 --> 00:00:43,800
and stands up a large VM with Cloud

00:00:41,790 --> 00:00:45,780
Foundry running on it it then emails you

00:00:43,800 --> 00:00:49,050
the details of it deletes your

00:00:45,780 --> 00:00:50,610
credentials and you can then go play

00:00:49,050 --> 00:00:52,680
kick the players on Cloud Foundry in

00:00:50,610 --> 00:00:54,629
case this is just similar to standing up

00:00:52,680 --> 00:00:57,980
Bosch light on your laptop except it's

00:00:54,629 --> 00:01:01,170
on ec2 so please give it a try

00:00:57,980 --> 00:01:03,690
okay so with without further ado we'll

00:01:01,170 --> 00:01:07,799
get started oh and another thing

00:01:03,690 --> 00:01:09,560
now that the conference is over our

00:01:07,799 --> 00:01:17,729
leader dr. Nick Williams is currently

00:01:09,560 --> 00:01:20,400
flying back from Australia the timing is

00:01:17,729 --> 00:01:22,140
not necessarily so good but it's fun

00:01:20,400 --> 00:01:23,070
stuff so Stark and Wayne wait a minute

00:01:22,140 --> 00:01:27,330
what the heck is that

00:01:23,070 --> 00:01:29,100
well quite frankly we're a consultancy

00:01:27,330 --> 00:01:30,090
focused on doing absolutely anything and

00:01:29,100 --> 00:01:33,450
everything to earn your money

00:01:30,090 --> 00:01:35,460
we know we're a consultancy in our

00:01:33,450 --> 00:01:38,340
primary focus is professional services

00:01:35,460 --> 00:01:40,320
and training for everything surrounding

00:01:38,340 --> 00:01:41,909
the Cloud Foundry as you've heard over

00:01:40,320 --> 00:01:44,520
and over again at this conferences from

00:01:41,909 --> 00:01:47,130
ecosystem which basically boils down to

00:01:44,520 --> 00:01:48,869
Bosch cloud foundry services

00:01:47,130 --> 00:01:51,149
infrastructure as a service things like

00:01:48,869 --> 00:01:54,570
OpenStack and vSphere and such things

00:01:51,149 --> 00:01:56,880
and basically we are here to help you

00:01:54,570 --> 00:01:58,619
ease your journey and let make you look

00:01:56,880 --> 00:02:01,320
very successful to the rest of your

00:01:58,619 --> 00:02:03,360
company and your clients in operating

00:02:01,320 --> 00:02:06,380
your own paths for internal purposes

00:02:03,360 --> 00:02:09,140
external purposes we also help you learn

00:02:06,380 --> 00:02:12,900
how to migrate your applications and

00:02:09,140 --> 00:02:13,800
interface and with legacy systems really

00:02:12,900 --> 00:02:17,490
whatever is necessary

00:02:13,800 --> 00:02:21,800
around these core concepts so now on to

00:02:17,490 --> 00:02:26,430
the talk so this talk is about being

00:02:21,800 --> 00:02:28,650
trying to find a level of visibility for

00:02:26,430 --> 00:02:31,620
our enterprise customers surrounding

00:02:28,650 --> 00:02:33,810
Bosch and Cloud Foundry the open source

00:02:31,620 --> 00:02:36,840
world we have a lot of tools that we can

00:02:33,810 --> 00:02:39,360
rely on and kind of piecemeal together a

00:02:36,840 --> 00:02:40,710
lot of stuff around monitoring alerting

00:02:39,360 --> 00:02:42,960
and notifications and all those other

00:02:40,710 --> 00:02:45,030
stuff however when it comes to doing

00:02:42,960 --> 00:02:47,610
enterprise there's a whole other set of

00:02:45,030 --> 00:02:50,220
requirements and so we're trying to

00:02:47,610 --> 00:02:54,240
figure out a good story to help our

00:02:50,220 --> 00:02:56,310
customers with answering their needs and

00:02:54,240 --> 00:02:58,260
so I'm gonna go through a list of the

00:02:56,310 --> 00:02:59,430
needs in the following slides and kind

00:02:58,260 --> 00:03:01,980
of where we're at and what we're

00:02:59,430 --> 00:03:05,670
thinking at the moment and what our

00:03:01,980 --> 00:03:08,370
plans are for the near-term future so

00:03:05,670 --> 00:03:10,790
what is the goal exactly the goal simply

00:03:08,370 --> 00:03:12,720
stated is enterprise operations

00:03:10,790 --> 00:03:16,260
monitoring well what the hell does that

00:03:12,720 --> 00:03:18,510
mean right it means these following

00:03:16,260 --> 00:03:23,100
requirements that are usually associated

00:03:18,510 --> 00:03:25,730
with enterprises we have basically the

00:03:23,100 --> 00:03:28,980
need for a complete operational overview

00:03:25,730 --> 00:03:30,420
across systems correlation so we're not

00:03:28,980 --> 00:03:32,610
just talking about monitoring Cloud

00:03:30,420 --> 00:03:34,410
Foundry we need visibility into all the

00:03:32,610 --> 00:03:36,990
auxiliaries services and the

00:03:34,410 --> 00:03:38,820
infrastructure surrounding the Cloud

00:03:36,990 --> 00:03:40,470
Foundry and other things not just

00:03:38,820 --> 00:03:42,570
monitoring Cloud Foundry monitoring

00:03:40,470 --> 00:03:44,310
Bosher those things so we need something

00:03:42,570 --> 00:03:46,740
that can kind of do it all and another

00:03:44,310 --> 00:03:48,540
big thing is root cause analysis when

00:03:46,740 --> 00:03:50,190
things fail you need to find out why and

00:03:48,540 --> 00:03:55,290
make sure it doesn't happen again that's

00:03:50,190 --> 00:03:58,530
a really big item historical auditing so

00:03:55,290 --> 00:04:00,690
there's kind of a two prong thing you

00:03:58,530 --> 00:04:03,240
need the ability to reflect on the

00:04:00,690 --> 00:04:05,550
systems as they're running for the

00:04:03,240 --> 00:04:08,850
purposes of capacity planning as well as

00:04:05,550 --> 00:04:10,770
for several we've been involved with the

00:04:08,850 --> 00:04:14,790
billing systems accuracy and

00:04:10,770 --> 00:04:17,190
verification and validation so this

00:04:14,790 --> 00:04:19,680
could be from the point of hey AWS is

00:04:17,190 --> 00:04:22,229
charging us a ginormous bill are they

00:04:19,680 --> 00:04:25,350
actually charging us what they should be

00:04:22,229 --> 00:04:27,479
so this is for reflecting on answering

00:04:25,350 --> 00:04:27,750
those questions as well as hey we're

00:04:27,479 --> 00:04:29,730
charge

00:04:27,750 --> 00:04:31,860
you're customers for utilizations you

00:04:29,730 --> 00:04:34,200
know are we being accurate in what we're

00:04:31,860 --> 00:04:36,060
charging them or are we charging them

00:04:34,200 --> 00:04:37,980
enough like are we missing things right

00:04:36,060 --> 00:04:40,860
so these are kind of questions that you

00:04:37,980 --> 00:04:44,880
really want to answer when it comes to

00:04:40,860 --> 00:04:48,480
these and finally not finally Enterprise

00:04:44,880 --> 00:04:51,420
requirements so forensics whenever

00:04:48,480 --> 00:04:53,310
something in the system fails yes it's

00:04:51,420 --> 00:04:55,410
absolutely wonderful there's two levels

00:04:53,310 --> 00:04:57,720
or four levels of high availability in

00:04:55,410 --> 00:05:00,090
between kala foundry and Bosch each has

00:04:57,720 --> 00:05:01,590
two levels and you get the resurrector

00:05:00,090 --> 00:05:03,750
is emboss that bringing things back

00:05:01,590 --> 00:05:05,820
that's wonderful that's just absolutely

00:05:03,750 --> 00:05:07,470
wonderful however why did it fail in the

00:05:05,820 --> 00:05:09,360
first place why did that VM go away in

00:05:07,470 --> 00:05:12,210
the first place we kind of need the

00:05:09,360 --> 00:05:14,460
ability to look back into the past into

00:05:12,210 --> 00:05:16,110
the history after the VM is no longer

00:05:14,460 --> 00:05:17,610
our systems no longer exists they're a

00:05:16,110 --> 00:05:19,890
they're not coming back we need the

00:05:17,610 --> 00:05:22,530
ability to actually go back and say what

00:05:19,890 --> 00:05:25,140
happened right let's find the root cause

00:05:22,530 --> 00:05:27,330
of what happened do some forensics work

00:05:25,140 --> 00:05:30,990
you know but we need the ability to do

00:05:27,330 --> 00:05:33,090
this away from the systems and again

00:05:30,990 --> 00:05:36,260
they're not there anymore so especially

00:05:33,090 --> 00:05:41,419
with like easy-to they're just liable to

00:05:36,260 --> 00:05:43,740
know they're gone it's your story so

00:05:41,419 --> 00:05:48,300
security yeah this one's always fun

00:05:43,740 --> 00:05:51,960
security is all about well who did and

00:05:48,300 --> 00:05:54,270
what and when where how the why is kind

00:05:51,960 --> 00:05:57,870
of interesting that's basically the root

00:05:54,270 --> 00:06:01,080
cause analysis and there's a lot of

00:05:57,870 --> 00:06:02,820
auxilary stuff around security as well

00:06:01,080 --> 00:06:04,610
as a fraud detection like if you're

00:06:02,820 --> 00:06:07,140
running a public pass and you have like

00:06:04,610 --> 00:06:09,750
people doing nefarious things on your

00:06:07,140 --> 00:06:11,750
systems actually detecting who they are

00:06:09,750 --> 00:06:13,740
what the heck they're doing right and

00:06:11,750 --> 00:06:18,150
reacting to these things is kind of

00:06:13,740 --> 00:06:19,800
important the Y is more for if you've

00:06:18,150 --> 00:06:21,780
been breached or anything else like that

00:06:19,800 --> 00:06:23,400
trying to figure out like why that was

00:06:21,780 --> 00:06:27,419
allowed or why that happened and how you

00:06:23,400 --> 00:06:30,080
can close those gaps later on so in

00:06:27,419 --> 00:06:32,790
order to provide the or meet these

00:06:30,080 --> 00:06:37,260
enterprise features we need to collect a

00:06:32,790 --> 00:06:38,610
certain very large set of data so

00:06:37,260 --> 00:06:41,340
there's a standard stuff that you would

00:06:38,610 --> 00:06:44,520
expect to collect system metrics such as

00:06:41,340 --> 00:06:47,870
your CPU RAM disk Network you know what

00:06:44,520 --> 00:06:50,610
everybody that does monitoring collects

00:06:47,870 --> 00:06:52,530
similarly the same kind of stuff but at

00:06:50,610 --> 00:06:54,720
process level you want to basically be

00:06:52,530 --> 00:06:55,770
able to know CPU and RAM well that

00:06:54,720 --> 00:06:58,530
that's great from an Operations

00:06:55,770 --> 00:07:00,660
standpoint files and socket read writes

00:06:58,530 --> 00:07:02,990
the transactions per section for all of

00:07:00,660 --> 00:07:06,150
these those are also very important

00:07:02,990 --> 00:07:07,800
knowing what threads are running and

00:07:06,150 --> 00:07:10,199
what the Hector threads within processes

00:07:07,800 --> 00:07:12,930
are doing can also really be helpful

00:07:10,199 --> 00:07:15,080
with operations we live in a virtual

00:07:12,930 --> 00:07:17,850
world right especially with like ec2 and

00:07:15,080 --> 00:07:20,250
Google compute engine well how much are

00:07:17,850 --> 00:07:22,110
there hypervisors and systems stealing

00:07:20,250 --> 00:07:24,630
from the VMS that you're paying to be

00:07:22,110 --> 00:07:27,120
online right we it would be really great

00:07:24,630 --> 00:07:30,090
to actually know how much time CPU time

00:07:27,120 --> 00:07:32,580
and stuff is stolen from you especially

00:07:30,090 --> 00:07:34,979
is with the stolen time it's especially

00:07:32,580 --> 00:07:37,050
important as people like to over commit

00:07:34,979 --> 00:07:39,240
and then bring those over commit ratios

00:07:37,050 --> 00:07:41,400
up so that they can make more money at

00:07:39,240 --> 00:07:44,039
your expense so this is how you detect

00:07:41,400 --> 00:07:50,070
if they're actually doing that that'd be

00:07:44,039 --> 00:07:51,690
great to know logs data collection let's

00:07:50,070 --> 00:07:53,610
see here where I'm pulling so these

00:07:51,690 --> 00:07:56,270
things are interesting so a lot of

00:07:53,610 --> 00:07:59,880
metrics like NR PE that is the Nagios

00:07:56,270 --> 00:08:01,320
checks right so every you know minute or

00:07:59,880 --> 00:08:03,180
five minutes or whatever you're holding

00:08:01,320 --> 00:08:05,490
intervals happens to be you want to

00:08:03,180 --> 00:08:07,650
check your your database using database

00:08:05,490 --> 00:08:11,190
check basically I think like Nagi Nagi

00:08:07,650 --> 00:08:13,110
else has like over three while crouching

00:08:11,190 --> 00:08:15,180
on four thousand different like scripts

00:08:13,110 --> 00:08:19,380
in their open repository they have

00:08:15,180 --> 00:08:20,639
online of amazing resource and basically

00:08:19,380 --> 00:08:23,190
you could also write your own custom

00:08:20,639 --> 00:08:25,200
they have these the NR PE is a very well

00:08:23,190 --> 00:08:26,099
defined interface and you can add your

00:08:25,200 --> 00:08:28,800
own we want to be able to collect these

00:08:26,099 --> 00:08:31,080
things similarly in the Java world we

00:08:28,800 --> 00:08:32,849
have JMX we really want like for all of

00:08:31,080 --> 00:08:34,620
our especially in the enterprise we have

00:08:32,849 --> 00:08:37,320
a lot of different Java applications out

00:08:34,620 --> 00:08:40,620
there and we would need to be able to

00:08:37,320 --> 00:08:42,419
collect the gmx statistics as well a lot

00:08:40,620 --> 00:08:45,839
of enterprises also run a lot of

00:08:42,419 --> 00:08:47,339
services on dotnet framework this is

00:08:45,839 --> 00:08:51,780
where windows performance counters come

00:08:47,339 --> 00:08:53,430
in so really for the enterprises that

00:08:51,780 --> 00:08:54,779
we've been talking to and dealing with

00:08:53,430 --> 00:08:56,970
they don't have

00:08:54,779 --> 00:08:58,680
just oh we only deploy a Linux nananana

00:08:56,970 --> 00:09:00,810
they have just tons of systems they have

00:08:58,680 --> 00:09:02,850
Windows systems they have like legacy

00:09:00,810 --> 00:09:05,249
some of them even have mainframe systems

00:09:02,850 --> 00:09:07,560
but I'm not even going there today but

00:09:05,249 --> 00:09:09,600
they have a just very big polyglot of

00:09:07,560 --> 00:09:11,129
different languages as well as Linux and

00:09:09,600 --> 00:09:13,139
Windows systems that they need to

00:09:11,129 --> 00:09:15,389
monitor for all these things that we're

00:09:13,139 --> 00:09:18,139
looking at another thing a great thing

00:09:15,389 --> 00:09:20,610
that would be able to collect is

00:09:18,139 --> 00:09:22,019
application-specific mets metrics and

00:09:20,610 --> 00:09:25,199
this is the kind of things that like

00:09:22,019 --> 00:09:26,399
Etsy stats D excels and collecting I'd

00:09:25,199 --> 00:09:28,860
really like to be able to pull that

00:09:26,399 --> 00:09:31,259
namespace type data out from our

00:09:28,860 --> 00:09:33,059
applications and then feed that back for

00:09:31,259 --> 00:09:35,790
maybe improving the applications

00:09:33,059 --> 00:09:40,529
themselves or even seeing ok how our

00:09:35,790 --> 00:09:42,449
application is doing or even oh so

00:09:40,529 --> 00:09:44,939
secondarily the two that I almost got

00:09:42,449 --> 00:09:46,889
ahead of myself is the ingestion of APM

00:09:44,939 --> 00:09:48,689
summaries APM is the application

00:09:46,889 --> 00:09:50,879
performance monitoring things like New

00:09:48,689 --> 00:09:52,620
Relic it'd be great to be able to also

00:09:50,879 --> 00:09:54,059
pull those in and just correlate those

00:09:52,620 --> 00:09:57,509
right around alongside of all of our

00:09:54,059 --> 00:10:00,029
systems data on business metrics the

00:09:57,509 --> 00:10:03,809
KPIs key performance indicators for

00:10:00,029 --> 00:10:04,980
business a lot of times the operations

00:10:03,809 --> 00:10:07,579
of the systems and the load on the

00:10:04,980 --> 00:10:09,839
systems directly correlate with very key

00:10:07,579 --> 00:10:11,100
performance indicators in the business

00:10:09,839 --> 00:10:13,019
metrics it would be great for us to be

00:10:11,100 --> 00:10:16,139
able to bring those into the system as

00:10:13,019 --> 00:10:20,009
well and display them right alongside or

00:10:16,139 --> 00:10:23,339
correlate them right alongside physical

00:10:20,009 --> 00:10:25,050
devices so Cloud Foundry bosh

00:10:23,339 --> 00:10:26,610
everything's like deploying on

00:10:25,050 --> 00:10:28,290
infrastructure for providers which

00:10:26,610 --> 00:10:30,600
basically give us virtual machines and

00:10:28,290 --> 00:10:32,639
all this stuff we also have physical

00:10:30,600 --> 00:10:34,800
hardware underneath that including the

00:10:32,639 --> 00:10:38,910
networking which is switches routers the

00:10:34,800 --> 00:10:40,379
San Network compute servers so the

00:10:38,910 --> 00:10:42,059
servers themselves that are running the

00:10:40,379 --> 00:10:44,339
compute nodes and the control nodes and

00:10:42,059 --> 00:10:47,069
everything else we want to collect the

00:10:44,339 --> 00:10:49,110
IPMI metrics off of those as well be

00:10:47,069 --> 00:10:50,610
great to pull them in to help zone in

00:10:49,110 --> 00:10:53,399
for root cause analysis on what the

00:10:50,610 --> 00:10:56,610
heck's going wrong at that level am I

00:10:53,399 --> 00:10:58,290
asking too much yet what else do we we

00:10:56,610 --> 00:11:01,559
like we would like basically the ability

00:10:58,290 --> 00:11:03,029
to suck in third-party data api's for

00:11:01,559 --> 00:11:05,850
example if we're running part of our

00:11:03,029 --> 00:11:07,779
operations on ec2 well what's relevant

00:11:05,850 --> 00:11:10,029
there cloud watch they have their own

00:11:07,779 --> 00:11:12,069
view of the world and how its operating

00:11:10,029 --> 00:11:13,600
it'd be great to pull those in and

00:11:12,069 --> 00:11:18,009
correlate those with the rest of the

00:11:13,600 --> 00:11:19,180
data that our systems are having so yeah

00:11:18,009 --> 00:11:23,470
that's that's that's a hell of a lot of

00:11:19,180 --> 00:11:25,959
data we want to collect in order to get

00:11:23,470 --> 00:11:29,470
great visibility and react on that and

00:11:25,959 --> 00:11:31,540
improve our business so we want to take

00:11:29,470 --> 00:11:32,529
all this data and then summarize it and

00:11:31,540 --> 00:11:34,689
what are the requirements for

00:11:32,529 --> 00:11:36,160
summarizing all this data well we want

00:11:34,689 --> 00:11:37,720
to basically create operational

00:11:36,160 --> 00:11:40,209
dashboards at least from our perspective

00:11:37,720 --> 00:11:41,709
surrounding Cloud Foundry we want to

00:11:40,209 --> 00:11:44,139
basically map out have a dashboard

00:11:41,709 --> 00:11:45,370
dedicated to Bosch itself the overall

00:11:44,139 --> 00:11:48,519
health we want to be able to drill down

00:11:45,370 --> 00:11:49,809
and say each Bosch subsystem we want to

00:11:48,519 --> 00:11:51,519
be able to check and see how that how

00:11:49,809 --> 00:11:53,589
healthy it is and if there's anything

00:11:51,519 --> 00:11:56,019
that needs our attention before we have

00:11:53,589 --> 00:11:57,730
to actually pay attention same exact

00:11:56,019 --> 00:12:00,279
story for the Cloud Foundry subsystems

00:11:57,730 --> 00:12:03,220
for example we want to keep especially

00:12:00,279 --> 00:12:04,449
close eye on the DEA or a pool right we

00:12:03,220 --> 00:12:07,059
want to basically see when we're getting

00:12:04,449 --> 00:12:08,680
towards capacity and we do have some

00:12:07,059 --> 00:12:13,480
interesting things in the works like the

00:12:08,680 --> 00:12:16,779
autoscaler that you know showed us but

00:12:13,480 --> 00:12:19,360
it'd be great if it was fed with really

00:12:16,779 --> 00:12:21,129
good information as well so we basically

00:12:19,360 --> 00:12:23,050
want to have dashboards to show all of

00:12:21,129 --> 00:12:27,149
these various subsystems like the router

00:12:23,050 --> 00:12:30,069
the message bus the cloud controller etc

00:12:27,149 --> 00:12:31,990
in addition it'd be great if for those

00:12:30,069 --> 00:12:33,189
of us running our not only running our

00:12:31,990 --> 00:12:34,509
clouds but it's for our internal

00:12:33,189 --> 00:12:36,100
customers where we control the

00:12:34,509 --> 00:12:37,389
application code and everything else

00:12:36,100 --> 00:12:40,329
like that it'd be great to be able to

00:12:37,389 --> 00:12:42,970
admit the application metrics that I was

00:12:40,329 --> 00:12:46,360
mentioning before such that we can pull

00:12:42,970 --> 00:12:49,180
up application specific dashboards as

00:12:46,360 --> 00:12:51,850
well and just like a same story for the

00:12:49,180 --> 00:12:53,730
business key performance indicators the

00:12:51,850 --> 00:12:56,949
dashboards for those as well

00:12:53,730 --> 00:13:00,550
again a huge list of wonts this is ID

00:12:56,949 --> 00:13:04,959
ideal scenario for what we want to get

00:13:00,550 --> 00:13:06,850
to so also because it's never enough

00:13:04,959 --> 00:13:08,429
just to have static dashboards there's a

00:13:06,850 --> 00:13:10,839
lot of things that you would want to

00:13:08,429 --> 00:13:14,170
export some of this data for for

00:13:10,839 --> 00:13:16,360
introspection and reaction we may want

00:13:14,170 --> 00:13:19,389
to basically have other third-party

00:13:16,360 --> 00:13:21,430
dashboards and stuff like that we may

00:13:19,389 --> 00:13:23,200
also want to do some analysis

00:13:21,430 --> 00:13:24,820
or hell automation like the autoscaler

00:13:23,200 --> 00:13:26,589
we may want to feed some of this

00:13:24,820 --> 00:13:29,080
information back into systems like the

00:13:26,589 --> 00:13:31,529
autoscaler to actually allow it to

00:13:29,080 --> 00:13:34,450
perform better and make good decisions

00:13:31,529 --> 00:13:36,040
and again like the fraud example earlier

00:13:34,450 --> 00:13:38,320
today a lot of this data that's

00:13:36,040 --> 00:13:40,570
collected maybe goes back into the fraud

00:13:38,320 --> 00:13:43,600
detection algorithms right that would be

00:13:40,570 --> 00:13:46,270
good for feeding that some experience

00:13:43,600 --> 00:13:48,220
based requirements as well the ability

00:13:46,270 --> 00:13:50,500
to detect an alert on like for example

00:13:48,220 --> 00:13:52,810
zombie container processes this is a

00:13:50,500 --> 00:13:55,450
real issue when it comes to running

00:13:52,810 --> 00:13:57,700
Cloud Foundry you're sometimes the

00:13:55,450 --> 00:14:00,130
werden containers for the application

00:13:57,700 --> 00:14:03,399
processes running in the DEA pools just

00:14:00,130 --> 00:14:04,930
zombie themselves and kind of block up

00:14:03,399 --> 00:14:07,959
resources and it's just not a good

00:14:04,930 --> 00:14:10,750
situation being able to detect that and

00:14:07,959 --> 00:14:12,490
either destroy the VM so that another

00:14:10,750 --> 00:14:15,430
one gets in its place and rebalance or

00:14:12,490 --> 00:14:18,250
whatever mitigate that issue up front

00:14:15,430 --> 00:14:20,260
when when it first happens versus you

00:14:18,250 --> 00:14:20,950
know post forensics with the logs that

00:14:20,260 --> 00:14:23,709
would be wonderful

00:14:20,950 --> 00:14:25,480
a couple years back amazon decided that

00:14:23,709 --> 00:14:27,459
they would I'm not sure wasn't a

00:14:25,480 --> 00:14:29,230
conscious decision but they decided they

00:14:27,459 --> 00:14:31,360
would remount everybody's file systems

00:14:29,230 --> 00:14:34,810
read-only they had a big huge disk

00:14:31,360 --> 00:14:37,750
networking issue and that caused a

00:14:34,810 --> 00:14:39,279
number of hours of downtime for a lot of

00:14:37,750 --> 00:14:41,200
people while they've tried to figure out

00:14:39,279 --> 00:14:43,540
what the hell happened eventually they

00:14:41,200 --> 00:14:44,860
figured out oh well the file system was

00:14:43,540 --> 00:14:46,300
remounted read-only we now have to go

00:14:44,860 --> 00:14:47,860
reboot everything wouldn't it have been

00:14:46,300 --> 00:14:49,660
great if they just saw it an alert and

00:14:47,860 --> 00:14:51,190
that said this happened so they know oh

00:14:49,660 --> 00:14:53,290
we just got to go reboot everything and

00:14:51,190 --> 00:14:56,170
we're talking about you know minutes

00:14:53,290 --> 00:14:58,540
versus hours of downtime similarly

00:14:56,170 --> 00:15:00,700
there's like file systems might get

00:14:58,540 --> 00:15:02,320
mounted in place of another that was

00:15:00,700 --> 00:15:03,970
supposed to be there this does happen

00:15:02,320 --> 00:15:07,029
can't happen it'd be great to detect

00:15:03,970 --> 00:15:09,420
those types of scenarios as well so

00:15:07,029 --> 00:15:11,430
those are all my like wishlist for

00:15:09,420 --> 00:15:14,100
things that we've discussed with

00:15:11,430 --> 00:15:16,420
enterprise clients and stuff like that

00:15:14,100 --> 00:15:18,670
well there's also integration

00:15:16,420 --> 00:15:20,070
requirements so that's great but we

00:15:18,670 --> 00:15:22,450
could take this to the next level

00:15:20,070 --> 00:15:25,029
specifically we're looking for

00:15:22,450 --> 00:15:27,130
primitives that allow us to identify and

00:15:25,029 --> 00:15:28,959
link all the different Bosch subsystems

00:15:27,130 --> 00:15:30,970
with the VMS they're running on the

00:15:28,959 --> 00:15:33,010
cloud foundry subsystems with the VMS

00:15:30,970 --> 00:15:33,889
they're running on and the applications

00:15:33,010 --> 00:15:36,980
running in da

00:15:33,889 --> 00:15:38,959
processes so that's that's great we

00:15:36,980 --> 00:15:42,199
basically want our cake and want to eat

00:15:38,959 --> 00:15:44,569
it so we want full visibility for the

00:15:42,199 --> 00:15:46,730
Bosch subsystems the services the Cloud

00:15:44,569 --> 00:15:48,470
Foundry subsystems applications and our

00:15:46,730 --> 00:15:50,269
legacy systems so in others across

00:15:48,470 --> 00:15:52,369
everything that's what we're looking for

00:15:50,269 --> 00:15:55,309
to summarize what that entire list of

00:15:52,369 --> 00:16:00,769
stuff we just want o to be able to do

00:15:55,309 --> 00:16:03,889
this both SAS and on Prem right talk

00:16:00,769 --> 00:16:05,540
about winding everything why do we want

00:16:03,889 --> 00:16:08,329
all this stuff well we basically want to

00:16:05,540 --> 00:16:10,160
minimize our capital expenses max sorry

00:16:08,329 --> 00:16:12,109
minimize our operational expenses and

00:16:10,160 --> 00:16:14,179
those are usually done through likened

00:16:12,109 --> 00:16:17,199
out consolidation of systems as well as

00:16:14,179 --> 00:16:19,100
faster reaction time and operations and

00:16:17,199 --> 00:16:21,499
quite frankly being able to have a

00:16:19,100 --> 00:16:23,660
smaller leaner operations team so that's

00:16:21,499 --> 00:16:25,489
kind of what our goals are so that's

00:16:23,660 --> 00:16:27,889
that's a lot of goals and so the

00:16:25,489 --> 00:16:29,389
approach that we're gonna take for the

00:16:27,889 --> 00:16:33,049
next while and I think this is going to

00:16:29,389 --> 00:16:36,410
pan out very well for us is we're gonna

00:16:33,049 --> 00:16:38,269
partner with a vendor and we have done

00:16:36,410 --> 00:16:39,679
looked at a lot of different vendors in

00:16:38,269 --> 00:16:43,549
the monitoring space they all bring a

00:16:39,679 --> 00:16:45,199
lot of great things to the table with

00:16:43,549 --> 00:16:47,660
the one we're gonna partner with to try

00:16:45,199 --> 00:16:49,910
to give us all of this the one that

00:16:47,660 --> 00:16:51,499
actually has all the capacity to collect

00:16:49,910 --> 00:16:53,600
all of the data that we were looking to

00:16:51,499 --> 00:16:57,499
collect and exposes it back out again is

00:16:53,600 --> 00:16:59,509
at first and we've been in talks with

00:16:57,499 --> 00:17:01,939
them and basically they either fulfill

00:16:59,509 --> 00:17:04,939
those requirements for collection today

00:17:01,939 --> 00:17:06,769
or they have them well the collection

00:17:04,939 --> 00:17:08,539
requirements they fulfill today the

00:17:06,769 --> 00:17:11,539
integration ones that I had on a few

00:17:08,539 --> 00:17:12,919
slides back there near-term roadmap will

00:17:11,539 --> 00:17:14,889
give us the primitives we need to

00:17:12,919 --> 00:17:18,439
actually build what I was talking about

00:17:14,889 --> 00:17:19,929
previously so that that'll be really

00:17:18,439 --> 00:17:22,429
sweet ones that comes to fruition and

00:17:19,929 --> 00:17:23,750
well is this will basically allow us to

00:17:22,429 --> 00:17:25,909
deliver exactly what we're setting out

00:17:23,750 --> 00:17:29,240
to do what I was outlining enterprise

00:17:25,909 --> 00:17:32,690
operations monitoring brief about the

00:17:29,240 --> 00:17:34,070
roadmap first we're gonna do the boss

00:17:32,690 --> 00:17:36,019
integration we're currently working with

00:17:34,070 --> 00:17:38,120
a pivotal web services team and at first

00:17:36,019 --> 00:17:39,980
and the Boche integration layer once

00:17:38,120 --> 00:17:41,870
it's on the VMS we now have all the

00:17:39,980 --> 00:17:44,059
system metrics that we're talking about

00:17:41,870 --> 00:17:45,559
and then from there we're gonna move

00:17:44,059 --> 00:17:47,630
that up to the next and we're gonna try

00:17:45,559 --> 00:17:49,040
it like alerting stuff for like we're

00:17:47,630 --> 00:17:50,780
for zombie containers and the file

00:17:49,040 --> 00:17:52,970
system remounts and stuff like that

00:17:50,780 --> 00:17:55,160
network saturation da pool saturation

00:17:52,970 --> 00:17:56,420
basically get a good set of alerts so

00:17:55,160 --> 00:18:00,800
that we could be very proactive about

00:17:56,420 --> 00:18:02,900
our monitoring and then the phase three

00:18:00,800 --> 00:18:04,520
of this basically we're looking at okay

00:18:02,900 --> 00:18:07,130
what's next what's the next thing we can

00:18:04,520 --> 00:18:08,750
do basically we want to auto detect that

00:18:07,130 --> 00:18:11,330
hey this is Bosh this is Cloud Foundry

00:18:08,750 --> 00:18:13,400
here the subsystems and I want to do it

00:18:11,330 --> 00:18:14,900
for all the VMS that are running each

00:18:13,400 --> 00:18:17,060
subsystem I want you to collect the

00:18:14,900 --> 00:18:19,280
corresponding metrics or logs for that

00:18:17,060 --> 00:18:21,470
subsystem and I also want you to go

00:18:19,280 --> 00:18:23,540
ahead and set up operational dashboards

00:18:21,470 --> 00:18:25,880
for each subsystem so give me a

00:18:23,540 --> 00:18:27,710
dashboard for all of my DA's give me a

00:18:25,880 --> 00:18:30,770
dashboard for my message buses and the

00:18:27,710 --> 00:18:33,140
routers and so forth and then the final

00:18:30,770 --> 00:18:35,090
phase is like the icing on the cake if

00:18:33,140 --> 00:18:38,450
we can actually get there and I think we

00:18:35,090 --> 00:18:40,820
can is great now let's zoom in on the

00:18:38,450 --> 00:18:44,360
DEA pools in for our customers

00:18:40,820 --> 00:18:47,900
applications let's actually get a view

00:18:44,360 --> 00:18:50,300
of their applications all the processes

00:18:47,900 --> 00:18:52,190
aggregated the health and logs for the

00:18:50,300 --> 00:18:56,000
each application they have deployed

00:18:52,190 --> 00:18:59,120
across all the DEA s because this would

00:18:56,000 --> 00:19:00,850
be a wonderful value add for those of us

00:18:59,120 --> 00:19:03,410
running Cloud Foundry to offer to our

00:19:00,850 --> 00:19:06,770
end users or customers so that they can

00:19:03,410 --> 00:19:09,200
go in right in the console have health

00:19:06,770 --> 00:19:12,980
view of across all of the system of

00:19:09,200 --> 00:19:13,280
their application as well as logs right

00:19:12,980 --> 00:19:16,010
there

00:19:13,280 --> 00:19:18,530
next to it so that would be great by the

00:19:16,010 --> 00:19:22,490
way we are hiring specifically we are

00:19:18,530 --> 00:19:25,970
hiring clients so please see us yeah

00:19:22,490 --> 00:19:30,140
there's a twist on that one huh so still

00:19:25,970 --> 00:19:31,820
we're hiring clients tristar try cfstr

00:19:30,140 --> 00:19:33,860
can we calm just to remind you that and

00:19:31,820 --> 00:19:36,200
if you have any questions email me there

00:19:33,860 --> 00:19:38,060
I think I'm more than out of time or see

00:19:36,200 --> 00:19:39,110
me afterwards out in the hallway more

00:19:38,060 --> 00:19:41,410
than happy to talk to you guys about

00:19:39,110 --> 00:19:44,240
this stuff so thank you

00:19:41,410 --> 00:19:47,529
[Applause]

00:19:44,240 --> 00:19:47,529

YouTube URL: https://www.youtube.com/watch?v=kKXAEExEFkI


