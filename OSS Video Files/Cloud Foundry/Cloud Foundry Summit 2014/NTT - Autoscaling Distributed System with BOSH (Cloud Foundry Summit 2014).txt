Title: NTT - Autoscaling Distributed System with BOSH (Cloud Foundry Summit 2014)
Publication date: 2014-07-24
Playlist: Cloud Foundry Summit 2014
Description: 
	Technical track breakout session presented by Yudai Iwasaki, Lead Engineer, Software Innovation Center, NTT.

BOSH AutoScaler is an extension for BOSH to automatically scale-in/out your deployments according to your preferred rules. You can optimize the resource consumption of your deployments with BOSH AutoScaler by dynamically changing the number of virtual machines. This talk will cover how to get started with BOSH AutoScaler to auto-scale your Cloud Foundry deployments.
Captions: 
	00:00:00,930 --> 00:00:04,220
[Music]

00:00:07,570 --> 00:00:16,279
[Music]

00:00:10,720 --> 00:00:19,159
and I knew that was a key from NTP today

00:00:16,279 --> 00:00:22,519
and I'd like to introduce the boss of

00:00:19,159 --> 00:00:24,589
scalar which enables you to of my

00:00:22,519 --> 00:00:30,109
arrival cost of you've come under his

00:00:24,589 --> 00:00:34,190
deployments first let me tell you a bit

00:00:30,109 --> 00:00:38,660
more about myself as I just said my name

00:00:34,190 --> 00:00:41,960
is Judah yo Socky and I'm working at MPD

00:00:38,660 --> 00:00:44,679
under research engineers my current

00:00:41,960 --> 00:00:48,140
primary job is developing valving past

00:00:44,679 --> 00:00:52,719
which is a public commercial car service

00:00:48,140 --> 00:00:55,370
launched last year by MTV Communications

00:00:52,719 --> 00:01:00,859
Italian path is of course filled with

00:00:55,370 --> 00:01:06,140
hungry I've been working in Cloud

00:01:00,859 --> 00:01:09,500
Foundry is his 2012 and sample my truth

00:01:06,140 --> 00:01:12,110
I developed so far published open source

00:01:09,500 --> 00:01:15,680
software so you may know me as a

00:01:12,110 --> 00:01:21,260
developer it's emotional most classic

00:01:15,680 --> 00:01:25,340
CDI well when we want to today's agenda

00:01:21,260 --> 00:01:27,700
the story of my talk is very simple as

00:01:25,340 --> 00:01:31,820
showing the program fast and then

00:01:27,700 --> 00:01:37,090
present how you can suit the program

00:01:31,820 --> 00:01:40,130
with possible skill so the program is

00:01:37,090 --> 00:01:45,160
the 50 more obvious cloud foundry

00:01:40,130 --> 00:01:49,280
deployment is not fixed this block is

00:01:45,160 --> 00:01:52,900
discussed shows typical system load for

00:01:49,280 --> 00:01:57,230
week you have daily things and also

00:01:52,900 --> 00:02:01,460
weekly things in this graph of course

00:01:57,230 --> 00:02:06,080
actual load will be a system at all

00:02:01,460 --> 00:02:14,030
and forever you probably have also

00:02:06,080 --> 00:02:17,450
monthly really Peaks if you you know a

00:02:14,030 --> 00:02:21,400
variety of yourself and application or

00:02:17,450 --> 00:02:25,690
you're 12 finally the system or movie

00:02:21,400 --> 00:02:29,600
will be limited to some extent however

00:02:25,690 --> 00:02:32,930
admission for private clubs money thing

00:02:29,600 --> 00:02:37,390
these piece is a very important point to

00:02:32,930 --> 00:02:37,390
optimize around the cost of battery

00:02:39,319 --> 00:02:45,750
so if you keep your confounded

00:02:42,900 --> 00:02:52,670
deployment with resources that can cover

00:02:45,750 --> 00:02:52,670
all things it it probably was too much

00:02:52,790 --> 00:02:59,459
magic that you have internal

00:02:56,189 --> 00:03:07,069
applications on your calendar that are

00:02:59,459 --> 00:03:10,200
you storing some resources they consume

00:03:07,069 --> 00:03:13,859
if they are not used at night

00:03:10,200 --> 00:03:18,030
the other was you have either DL at

00:03:13,859 --> 00:03:24,379
night these resources should be released

00:03:18,030 --> 00:03:24,379
at night for a load such as processing

00:03:24,769 --> 00:03:32,280
or possibly if you were using a public

00:03:28,980 --> 00:03:37,049
area service like a computer or another

00:03:32,280 --> 00:03:44,129
ec2 releasing resources releasing

00:03:37,049 --> 00:03:47,639
Resources directory reduces the cost so

00:03:44,129 --> 00:03:51,930
the idea is very simple and easy to

00:03:47,639 --> 00:03:55,470
understand the problem here is how you

00:03:51,930 --> 00:03:58,530
can dynamically scale up and scale it

00:03:55,470 --> 00:04:02,970
from under a deployment according to

00:03:58,530 --> 00:04:05,970
real system consumption in fact it's

00:04:02,970 --> 00:04:11,430
hard to winter the cloud foundry at all

00:04:05,970 --> 00:04:14,760
time and manually change manually change

00:04:11,430 --> 00:04:19,199
the element size normal to such a boring

00:04:14,760 --> 00:04:23,959
task for 24/7 so we need to automate

00:04:19,199 --> 00:04:23,959
this important task to reduce the costs

00:04:24,169 --> 00:04:31,320
solution I'd like to introduce today if

00:04:27,090 --> 00:04:34,500
the most autoscale suppose is the post

00:04:31,320 --> 00:04:39,360
autoscaler hex kill your country instead

00:04:34,500 --> 00:04:42,320
of doing it with the post autoscaler

00:04:39,360 --> 00:04:47,420
you can reduce the random cost you

00:04:42,320 --> 00:04:51,770
system design with no discovery but the

00:04:47,420 --> 00:04:56,720
most of scalar is with extension for

00:04:51,770 --> 00:05:00,620
posh positives as a default a buddy

00:04:56,720 --> 00:05:03,170
system to form a boundary so if you are

00:05:00,620 --> 00:05:06,770
using a suitable to our foundry to your

00:05:03,170 --> 00:05:09,440
club most of the scalar is the best way

00:05:06,770 --> 00:05:12,670
to provide auto scaling capability to

00:05:09,440 --> 00:05:12,670
the foundry

00:05:12,730 --> 00:05:21,410
you can define auto scaling policy in

00:05:16,010 --> 00:05:25,880
your deployment manifest you can fund

00:05:21,410 --> 00:05:30,380
the program such as still LDS when the

00:05:25,880 --> 00:05:34,070
average CPU load the eight is higher

00:05:30,380 --> 00:05:37,610
than one since this Auto scan what's

00:05:34,070 --> 00:05:43,460
this catechins Australia so you can also

00:05:37,610 --> 00:05:49,100
scale not only a father but also have a

00:05:43,460 --> 00:05:50,510
life possible to Sierra is designed to

00:05:49,100 --> 00:05:53,960
be a platter

00:05:50,510 --> 00:05:57,200
so you can add the plug-in for specific

00:05:53,960 --> 00:06:00,910
release using my default is also Sierra

00:05:57,200 --> 00:06:04,460
has probably found a so you can also use

00:06:00,910 --> 00:06:11,260
the information retrieved from the Cloud

00:06:04,460 --> 00:06:11,260
Foundry here the number of instances

00:06:12,640 --> 00:06:23,510
so overall the first auto scale

00:06:17,200 --> 00:06:26,210
architecture this is an image of the

00:06:23,510 --> 00:06:29,120
post autoscaler architecture the next

00:06:26,210 --> 00:06:33,830
angle in the bottom is a Porsche Auto

00:06:29,120 --> 00:06:36,970
scale and its components so suppose auto

00:06:33,830 --> 00:06:39,450
sphere I have two main parts one

00:06:36,970 --> 00:06:44,330
consisting of vodka

00:06:39,450 --> 00:06:44,330
the other consisting of the skilled

00:06:44,360 --> 00:06:53,630
collectors are proponents for receiving

00:06:47,970 --> 00:07:00,870
information from input sources with a

00:06:53,630 --> 00:07:03,600
data ocean not skilled hunters not

00:07:00,870 --> 00:07:07,130
support obtains

00:07:03,600 --> 00:07:11,070
how to beat message from that server

00:07:07,130 --> 00:07:18,270
these messages include basic metrics

00:07:11,070 --> 00:07:22,040
like CPU and memory usage with feed from

00:07:18,270 --> 00:07:28,610
the plumbing you can also use the silver

00:07:22,040 --> 00:07:34,380
platter with me respirator you can use

00:07:28,610 --> 00:07:43,380
various paws metrics which you can

00:07:34,380 --> 00:07:46,830
retrieve the component of the suppose

00:07:43,380 --> 00:07:51,150
scalar opponent aggregated metrics from

00:07:46,830 --> 00:07:53,400
collective much generated against

00:07:51,150 --> 00:07:59,370
policies you defined in the program

00:07:53,400 --> 00:08:03,000
percent if the state of a deployment but

00:07:59,370 --> 00:08:07,700
to satisfy the policy this component

00:08:03,000 --> 00:08:11,570
will deploy updated mattress with

00:08:07,700 --> 00:08:14,640
changes different sides

00:08:11,570 --> 00:08:17,790
well these components are not so

00:08:14,640 --> 00:08:20,010
important for users so let's look at how

00:08:17,790 --> 00:08:25,440
you can define scaling losses in the

00:08:20,010 --> 00:08:28,470
global context our three characters are

00:08:25,440 --> 00:08:29,650
too small Isaac's disease there are some

00:08:28,470 --> 00:08:33,430
proposed before the clock

00:08:29,650 --> 00:08:35,710
Egorov gerado to define policy you can

00:08:33,430 --> 00:08:38,589
simply kill fiction to view a

00:08:35,710 --> 00:08:41,260
development manifest this section will

00:08:38,589 --> 00:08:44,920
be loaded automatically by the possible

00:08:41,260 --> 00:08:48,790
scale you can define the limit of the

00:08:44,920 --> 00:08:56,350
number of instances and how many if not

00:08:48,790 --> 00:09:02,430
in staff it will be added and you can

00:08:56,350 --> 00:09:02,430
also define conditioned to trigger scary

00:09:02,760 --> 00:09:11,500
you can use various function classes for

00:09:06,400 --> 00:09:13,870
defining flexible choices for people how

00:09:11,500 --> 00:09:17,680
to read messages you can use these

00:09:13,870 --> 00:09:21,220
classes listed on slide for example you

00:09:17,680 --> 00:09:23,920
can define a commission like if 80% of

00:09:21,220 --> 00:09:31,180
memory reviews or average for the last

00:09:23,920 --> 00:09:35,110
300 seconds with these classes with the

00:09:31,180 --> 00:09:38,070
transformer club see if algebra class is

00:09:35,110 --> 00:09:41,500
available you can define conditions

00:09:38,070 --> 00:09:45,300
using various first metrics we have

00:09:41,500 --> 00:09:46,980
discussed some example what metrics are

00:09:45,300 --> 00:09:50,500
listed here

00:09:46,980 --> 00:09:53,950
so with these condition classes you can

00:09:50,500 --> 00:09:56,860
define very flexible scaling policies

00:09:53,950 --> 00:10:00,760
have you like and what was important is

00:09:56,860 --> 00:10:03,790
you can apply your policies defined with

00:10:00,760 --> 00:10:06,570
these kosice by simply deploying we were

00:10:03,790 --> 00:10:10,660
the preeminent mudfest

00:10:06,570 --> 00:10:13,029
to your post deployment so what do you

00:10:10,660 --> 00:10:15,130
need to do is write all C's in your

00:10:13,029 --> 00:10:20,800
manifest file and they broke into a

00:10:15,130 --> 00:10:22,959
future the Bush autoscaler

00:10:20,800 --> 00:10:24,570
even had a web UI which shows that

00:10:22,959 --> 00:10:28,680
details

00:10:24,570 --> 00:10:32,220
policies and actual kappa textures

00:10:28,680 --> 00:10:37,380
memories at the wall this web UI is

00:10:32,220 --> 00:10:40,950
automatically started this review is

00:10:37,380 --> 00:10:43,350
that won't matter when you launch the

00:10:40,950 --> 00:10:50,190
course of the scale so let's look at

00:10:43,350 --> 00:10:52,830
some screenshots this menu shows your

00:10:50,190 --> 00:10:55,470
deployment and defined politics on there

00:10:52,830 --> 00:10:58,470
you can come from from this fields that

00:10:55,470 --> 00:11:01,200
your policies are loaded correctly into

00:10:58,470 --> 00:11:03,930
your portion of the scale you can see

00:11:01,200 --> 00:11:07,020
what Commission you can also see what

00:11:03,930 --> 00:11:14,370
conditions are defined and which are

00:11:07,020 --> 00:11:17,750
satisfied at a moment you can also check

00:11:14,370 --> 00:11:22,860
what information is retrieved from wash

00:11:17,750 --> 00:11:26,250
foundry in this event view from this

00:11:22,860 --> 00:11:30,600
year you can confirm that you are flexed

00:11:26,250 --> 00:11:33,930
as a working directory and metrics to

00:11:30,600 --> 00:11:38,180
our directory you can also check what

00:11:33,930 --> 00:11:38,180
kind of pass metrics are available

00:11:42,310 --> 00:11:49,870
and you can also come from the scaling

00:11:46,720 --> 00:11:51,970
lot of the wave UI you can see when auto

00:11:49,870 --> 00:11:55,379
scaling what to regard for tea smoke

00:11:51,970 --> 00:11:57,610
view by using this web UI you can

00:11:55,379 --> 00:12:02,470
appraise a autoscaler

00:11:57,610 --> 00:12:04,920
value in tweed more effectively without

00:12:02,470 --> 00:12:04,920
fail

00:12:10,660 --> 00:12:18,590
finally let's see how to get started

00:12:13,640 --> 00:12:21,370
with what autoscaler there is nothing

00:12:18,590 --> 00:12:25,910
difficult to start the boss autoscale

00:12:21,370 --> 00:12:27,920
what you need to do is just log in

00:12:25,910 --> 00:12:30,500
repository from github

00:12:27,920 --> 00:12:33,770
and it is a configuration file according

00:12:30,500 --> 00:12:37,520
to your environment and then a larger

00:12:33,770 --> 00:12:39,860
process the configuration file of

00:12:37,520 --> 00:12:43,100
support autoscaler is quite as simple as

00:12:39,860 --> 00:12:46,160
you see what do you need to change is

00:12:43,100 --> 00:12:51,580
only their first names and traditions of

00:12:46,160 --> 00:12:51,580
not server manager there is the solution

00:12:54,040 --> 00:13:00,860
when you want to activate the Cloud

00:12:57,140 --> 00:13:04,120
Foundry 20 you need to configure your

00:13:00,860 --> 00:13:11,120
advantage deployment to send metallicity

00:13:04,120 --> 00:13:13,850
autoscale this is also a breeze the new

00:13:11,120 --> 00:13:17,450
political component and send psdb

00:13:13,850 --> 00:13:20,600
metrics to your autoscaler the manifest

00:13:17,450 --> 00:13:24,920
file would look like this so you need to

00:13:20,600 --> 00:13:28,360
add only seven lines to activate this a

00:13:24,920 --> 00:13:28,360
project so it's

00:13:34,420 --> 00:13:44,470
can you specify to obg STP yes yes you

00:13:40,390 --> 00:13:50,250
can create another Bullock stuff for

00:13:44,470 --> 00:13:50,250
people before it so

00:14:05,959 --> 00:14:21,959
special position it's up Tory you can

00:14:14,670 --> 00:14:28,519
define a system with these classes so it

00:14:21,959 --> 00:14:37,319
too small but in this example you can

00:14:28,519 --> 00:15:03,860
define facial so if the cpu average is

00:14:37,319 --> 00:15:03,860
higher than 80% for 300 it's yes

00:15:09,320 --> 00:15:23,459
so so once your sort of skill like

00:15:18,870 --> 00:15:26,730
launched please define skilling cluesive

00:15:23,459 --> 00:15:29,990
in your deployment 160 and at the point

00:15:26,730 --> 00:15:35,700
saying you have nothing to do after that

00:15:29,990 --> 00:15:38,690
it's really easy to start an easy-to-use

00:15:35,700 --> 00:15:42,089
mobile scanner

00:15:38,690 --> 00:15:45,060
so in summary with a motion autoscaler

00:15:42,089 --> 00:15:49,589
you can optimize a random cost of your

00:15:45,060 --> 00:15:51,899
co-founder it's easy to start and you

00:15:49,589 --> 00:15:55,290
can go to scare you at the foundry with

00:15:51,899 --> 00:15:59,399
very inflexible policies so please try

00:15:55,290 --> 00:16:02,029
the bottom scale and let's say precious

00:15:59,399 --> 00:16:02,029
resources

00:16:02,470 --> 00:16:09,820
[Applause]

00:16:07,760 --> 00:16:09,820

YouTube URL: https://www.youtube.com/watch?v=nNINnxPZhjs


