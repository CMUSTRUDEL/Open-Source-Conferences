Title: Cisco - Cloud = Application Enablement and Innovation â‰  IaaS (Cloud Foundry Summit 2014)
Publication date: 2014-07-03
Playlist: Cloud Foundry Summit 2014
Description: 
	Keynote presented by Ken Owens, CTO, Cloud Services at Cisco.

Infrastructure as a service (IaaS) is a very small part of the overall cloud adaption requirements needed to enable business agility, growth, and transformation. This is an area that service providers and Telcos have been trying to optimize with traditional BSS, OSS, and provisioning systems over the last several years. The overall market for cloud in these providers is very small and not growing quickly due to their lack of development and application enablement in the physical and virtual layers. These layers are becoming commodity and not easy to differentiate business capabilities on without adding tremendous cost from enterprise software and advance services. Even with this added cost, enterprises are failing to transform because basic IaaS is a very small part of their business needs. This is not to say that IaaS does not matter. Where IaaS matters is their efficiency and platform capability that enables businesses to innovate and develop seamlessly. Consider the power to your home and office. Typically you do not worry about the quality and performance of that power. You do not call up the power company and ask for the power plants specs and performance characteristics. It's a utility and you use it. For the most part, it is reliable and available. The importance in building a cloud application enablement platform is to have a utility model mindset and ensure the platform is efficient, scalable, and 100% interoperability across other cloud solutions including PaaS and SaaS. There is too much focus on IaaS which is just a very small and commodity platform. For application enablement and development, it is critical to have an open scalable platform. This aspect is not "magic" as many cloud service provider and Telcos try to have you believe. Remember, they do not get it and are still trying to just get the basic hardware, software operating with their traditional OSS and BSS. The industry has settled on open source platforms and the leaders here are Cloud Foundry and Openshift, but the platform characteristics are what's important to understand. The industry has settled on Application Platform as a Service (aPaaS) and Integration Platform as a Service (iPaaS). aPaaS represents the cloud services that offer development and deployment environments for application services. These services must be interoperable across cloud service provider boundaries. This is accomplished through open common development libraries. iPaaS is represented by a suite of services that enable development, execution, governance, workflow integration, and policy controls. This presentation will dive into the integration specification of IaaS Platforms with PaaS Platforms by discussing the architecture of: Multi-tenant Services; HA service architecture that is interoperable across multiple cloud solutions; Middleware Stack including message bus; Data Storage and Access; Data Analytics; Deployment Management (multi-vendor); Asynchronous processing capabilities; Flexible Security framework ie integration into SecSDLC; Data Protection; SOA Support; and a Common Management Architecture (console, log, metering, monitoring, performance).
Captions: 
	00:00:00,930 --> 00:00:04,220
[Music]

00:00:07,570 --> 00:00:11,990
[Music]

00:00:09,370 --> 00:00:14,009
[Applause]

00:00:11,990 --> 00:00:15,929
so good morning everyone I'm here to

00:00:14,009 --> 00:00:20,189
just kind of spend a few minutes talking

00:00:15,929 --> 00:00:21,390
about how cloud is evolving from sort of

00:00:20,189 --> 00:00:23,970
this infrastructure as a service model

00:00:21,390 --> 00:00:25,740
to being really a platform that you can

00:00:23,970 --> 00:00:27,810
enable applications and innovation I

00:00:25,740 --> 00:00:29,760
have a couple of use cases that I'll go

00:00:27,810 --> 00:00:31,380
through and so I want to kind of start

00:00:29,760 --> 00:00:33,180
off with why I'm saying that you know

00:00:31,380 --> 00:00:35,700
cloud doesn't equal infrastructures or

00:00:33,180 --> 00:00:38,850
service anymore right it's it's complex

00:00:35,700 --> 00:00:40,920
in the way you look at building services

00:00:38,850 --> 00:00:42,989
today and it's way too hard in in my

00:00:40,920 --> 00:00:45,950
opinion and in most people's opinion to

00:00:42,989 --> 00:00:48,510
try to build services that can be

00:00:45,950 --> 00:00:49,890
assembled in a certain way on one

00:00:48,510 --> 00:00:52,170
solution but then when you move to an

00:00:49,890 --> 00:00:53,940
internal solution or another solution

00:00:52,170 --> 00:00:55,920
it's very difficult to put those

00:00:53,940 --> 00:00:57,600
services together again and so I kind of

00:00:55,920 --> 00:00:59,430
think about this is like a bunch of Lego

00:00:57,600 --> 00:01:01,020
blocks you would just throw into you

00:00:59,430 --> 00:01:02,760
know like my I have kids and I have this

00:01:01,020 --> 00:01:04,949
huge room that's just full of like a big

00:01:02,760 --> 00:01:06,060
mound of Lego blocks and they go in and

00:01:04,949 --> 00:01:08,490
they go off and they stop building

00:01:06,060 --> 00:01:10,650
things and it never really looks exactly

00:01:08,490 --> 00:01:12,600
right like what say hey dad you

00:01:10,650 --> 00:01:14,220
understand what this is and I'm like you

00:01:12,600 --> 00:01:15,840
have to help me here it doesn't really

00:01:14,220 --> 00:01:19,020
look like anything but a bunch of Lego

00:01:15,840 --> 00:01:20,610
blocks and so you know it there's way

00:01:19,020 --> 00:01:22,729
too much complexity the other thing that

00:01:20,610 --> 00:01:25,229
is you know there's this whole idea of

00:01:22,729 --> 00:01:26,700
commodity infrastructure and I don't

00:01:25,229 --> 00:01:28,860
know about you but I really don't want

00:01:26,700 --> 00:01:32,009
to be using an infrastructure that is

00:01:28,860 --> 00:01:33,750
super cheap and and fragile right I need

00:01:32,009 --> 00:01:36,600
an infrastructure that I can rely on and

00:01:33,750 --> 00:01:39,900
it is stable and then you know the last

00:01:36,600 --> 00:01:42,030
thing is no one really gets value

00:01:39,900 --> 00:01:44,670
abouting infrastructure services right

00:01:42,030 --> 00:01:47,070
you're not you don't make money in a

00:01:44,670 --> 00:01:48,119
business selling infrastructure if that

00:01:47,070 --> 00:01:50,670
that's not usually your core business

00:01:48,119 --> 00:01:53,100
unless you're a provider and so it

00:01:50,670 --> 00:01:54,659
allows you know a big part of what you

00:01:53,100 --> 00:01:56,070
know businesses are doing is trying to

00:01:54,659 --> 00:01:58,950
focus more and how do they bring

00:01:56,070 --> 00:02:00,509
value-added services and less on and my

00:01:58,950 --> 00:02:02,630
view is to spend a lot less time

00:02:00,509 --> 00:02:06,329
thinking about the infrastructure piece

00:02:02,630 --> 00:02:08,340
and so you know bottom line I'm saying

00:02:06,329 --> 00:02:10,170
is why compromise right why why would

00:02:08,340 --> 00:02:12,300
you want to like build something that

00:02:10,170 --> 00:02:13,620
like seriously would you fly doesn't

00:02:12,300 --> 00:02:15,300
even look like a plane and

00:02:13,620 --> 00:02:17,010
it's not going to take off a lamb

00:02:15,300 --> 00:02:18,630
because it only has like a couple wills

00:02:17,010 --> 00:02:20,340
in the front so the back would kind of

00:02:18,630 --> 00:02:22,050
drag the whole time right and so it's

00:02:20,340 --> 00:02:24,239
would you want to fly in something that

00:02:22,050 --> 00:02:26,280
looked like that and and the issue here

00:02:24,239 --> 00:02:28,200
is you know how do you scale something

00:02:26,280 --> 00:02:29,730
that is a bunch of little components and

00:02:28,200 --> 00:02:32,700
voting blocks that you kind of

00:02:29,730 --> 00:02:34,260
hodgepodge together and it's just the

00:02:32,700 --> 00:02:36,150
biggest issue that doesn't scale and it

00:02:34,260 --> 00:02:37,860
doesn't allow you to move your workloads

00:02:36,150 --> 00:02:40,800
and move your services across different

00:02:37,860 --> 00:02:42,989
environment the other thing is is

00:02:40,800 --> 00:02:44,940
reliability is still critical right if

00:02:42,989 --> 00:02:46,620
you think it of some of the use cases

00:02:44,940 --> 00:02:48,989
that you're using and developing and

00:02:46,620 --> 00:02:50,760
today you know no one says we don't care

00:02:48,989 --> 00:02:52,260
about reliability just put a bunch of

00:02:50,760 --> 00:02:54,810
crap out there and hopefully it'll work

00:02:52,260 --> 00:02:57,299
right and so it's really important that

00:02:54,810 --> 00:02:58,830
as you're looking at building services

00:02:57,299 --> 00:03:01,980
that your building services that can be

00:02:58,830 --> 00:03:03,569
used reliably and of course you know the

00:03:01,980 --> 00:03:04,920
next big thing is securely right you

00:03:03,569 --> 00:03:08,010
want to have an infrastructure that can

00:03:04,920 --> 00:03:09,480
be built securely and you're not gonna

00:03:08,010 --> 00:03:11,940
want to get into a system like this

00:03:09,480 --> 00:03:13,200
plane here and fly somewhere because you

00:03:11,940 --> 00:03:14,610
can play not gonna make it off the

00:03:13,200 --> 00:03:16,680
ground to begin with right and so why

00:03:14,610 --> 00:03:18,959
would you want to risk your life to be

00:03:16,680 --> 00:03:20,780
on something that just doesn't doesn't

00:03:18,959 --> 00:03:24,980
scale it doesn't work it isn't reliable

00:03:20,780 --> 00:03:27,810
and so what is a platform for enabling

00:03:24,980 --> 00:03:30,569
agility and and building services right

00:03:27,810 --> 00:03:33,420
and so it's kind of touched with having

00:03:30,569 --> 00:03:34,950
a baseline of capabilities and

00:03:33,420 --> 00:03:38,040
components that you can build upon and

00:03:34,950 --> 00:03:39,660
so a few years ago as my kids got older

00:03:38,040 --> 00:03:41,250
they started buying these big Lego kits

00:03:39,660 --> 00:03:43,200
and it's you know it has all the

00:03:41,250 --> 00:03:44,970
different components of what you want to

00:03:43,200 --> 00:03:46,980
build in it has a instructions on how to

00:03:44,970 --> 00:03:49,620
build the plane and it actually looks

00:03:46,980 --> 00:03:51,750
like a plane when it's done and so there

00:03:49,620 --> 00:03:53,670
is some you do lose some flexibility

00:03:51,750 --> 00:03:56,040
because you can't just go put any part

00:03:53,670 --> 00:03:57,900
in any place or in order to how you have

00:03:56,040 --> 00:03:59,400
to put the parts together there's

00:03:57,900 --> 00:04:01,500
certain constraints you have to put on

00:03:59,400 --> 00:04:03,090
your system that you're building but in

00:04:01,500 --> 00:04:04,950
the end you can get something that looks

00:04:03,090 --> 00:04:06,389
what you like you what you'd expect it

00:04:04,950 --> 00:04:10,380
to look like and it's something that is

00:04:06,389 --> 00:04:12,180
easy to use and you know the analogy I'm

00:04:10,380 --> 00:04:13,590
using here is that it's not you know

00:04:12,180 --> 00:04:16,440
there's been too much of this an

00:04:13,590 --> 00:04:18,000
application equals a VM template and it

00:04:16,440 --> 00:04:20,280
just doesn't right it doesn't equal a

00:04:18,000 --> 00:04:22,140
blueprint it doesn't equal a set of

00:04:20,280 --> 00:04:24,390
definitions that make up an application

00:04:22,140 --> 00:04:27,990
right an application is a set of

00:04:24,390 --> 00:04:32,110
services that run cohesively together

00:04:27,990 --> 00:04:34,060
and also there's a lot of talk about

00:04:32,110 --> 00:04:35,770
configuration management tools and

00:04:34,060 --> 00:04:39,270
putting a bunch of like scripting

00:04:35,770 --> 00:04:41,770
together and building a bunch of complex

00:04:39,270 --> 00:04:44,050
workflows to build these services

00:04:41,770 --> 00:04:45,460
together and that's just very complex

00:04:44,050 --> 00:04:48,160
and very brittle if you have to change

00:04:45,460 --> 00:04:49,870
one service you now have to go looking

00:04:48,160 --> 00:04:51,340
test all these different components that

00:04:49,870 --> 00:04:54,910
had nothing to do with that service you

00:04:51,340 --> 00:04:57,340
were just changing so in order to fully

00:04:54,910 --> 00:04:58,900
think about what a cloud is going to be

00:04:57,340 --> 00:05:01,300
doing is in this acceleration of clouds

00:04:58,900 --> 00:05:03,849
is you know first of all let's take a

00:05:01,300 --> 00:05:06,099
step back and say there are a couple of

00:05:03,849 --> 00:05:08,259
like basic rules to consider right the

00:05:06,099 --> 00:05:09,910
first one is yes service only two

00:05:08,259 --> 00:05:11,650
architectures and api's are not new

00:05:09,910 --> 00:05:13,660
right they've been around for a long

00:05:11,650 --> 00:05:16,000
time the concepts and the architectures

00:05:13,660 --> 00:05:17,650
are not new but there's an art to really

00:05:16,000 --> 00:05:19,720
putting them together in a loosely

00:05:17,650 --> 00:05:22,750
coupled distributed system in a way that

00:05:19,720 --> 00:05:25,690
allows you to scale and and flexibly

00:05:22,750 --> 00:05:27,430
move those workloads around the other

00:05:25,690 --> 00:05:28,930
thing is it's really about the data at

00:05:27,430 --> 00:05:30,639
the end of the day right the data is

00:05:28,930 --> 00:05:32,860
what everyone is trying to produce what

00:05:30,639 --> 00:05:34,419
everyone's trying to analyze it's about

00:05:32,860 --> 00:05:36,190
how you virtualize that data and it's

00:05:34,419 --> 00:05:38,020
about how you can move that data from

00:05:36,190 --> 00:05:39,460
one environment to the other environment

00:05:38,020 --> 00:05:41,020
and so as you're building out

00:05:39,460 --> 00:05:43,570
applications as you guys already know

00:05:41,020 --> 00:05:45,010
it's a very complex architecture that's

00:05:43,570 --> 00:05:47,169
multi-tiered of structured and

00:05:45,010 --> 00:05:49,930
unstructured data but it has to scale

00:05:47,169 --> 00:05:53,050
across a large array of different types

00:05:49,930 --> 00:05:55,120
of use cases it's in order to really

00:05:53,050 --> 00:05:57,220
build this enablement you sort of need

00:05:55,120 --> 00:06:00,370
data centers and cloud providers to

00:05:57,220 --> 00:06:03,220
function together as a platform offering

00:06:00,370 --> 00:06:04,240
that enables deployables services and in

00:06:03,220 --> 00:06:06,789
a composite

00:06:04,240 --> 00:06:09,220
composable way and in a loosely coupled

00:06:06,789 --> 00:06:11,409
way but also a distributed way and so

00:06:09,220 --> 00:06:13,330
you're looking for sort of a whole set

00:06:11,409 --> 00:06:16,060
of services and capabilities across

00:06:13,330 --> 00:06:19,960
multiple environments internal data

00:06:16,060 --> 00:06:22,300
centers colocation type of facilities

00:06:19,960 --> 00:06:24,270
and you know telcos and top of ice you

00:06:22,300 --> 00:06:26,440
want sort of this platform that is is

00:06:24,270 --> 00:06:29,349
fungible and flexible across all of

00:06:26,440 --> 00:06:31,720
these different environments the other

00:06:29,349 --> 00:06:33,789
thing that is important is is open

00:06:31,720 --> 00:06:35,349
source right you want to be building

00:06:33,789 --> 00:06:36,849
your applications and open source

00:06:35,349 --> 00:06:39,340
because that's where frankly innovation

00:06:36,849 --> 00:06:41,180
happens the quickest that's we have a

00:06:39,340 --> 00:06:42,289
community to support you

00:06:41,180 --> 00:06:44,389
and now we're kind of entering this

00:06:42,289 --> 00:06:46,100
fourth generation of tools and services

00:06:44,389 --> 00:06:48,560
that really are tackling issues like

00:06:46,100 --> 00:06:50,539
scalability and performance and being a

00:06:48,560 --> 00:06:52,360
value with the right diagnostics that

00:06:50,539 --> 00:06:54,470
you can actually automate health

00:06:52,360 --> 00:06:58,430
correction actions as things are

00:06:54,470 --> 00:07:00,620
happening and then I'm so like tired of

00:06:58,430 --> 00:07:02,570
hearing about DevOps and shadow IT it's

00:07:00,620 --> 00:07:05,030
not like a shadow movement right this is

00:07:02,570 --> 00:07:06,830
just the way the world is today and

00:07:05,030 --> 00:07:08,870
going forward all right everyone is

00:07:06,830 --> 00:07:10,310
going to be developing integrating and

00:07:08,870 --> 00:07:12,259
deploying in a continuous integration

00:07:10,310 --> 00:07:13,940
manner from this point on there's

00:07:12,259 --> 00:07:16,759
there's no reason to kind of hide and

00:07:13,940 --> 00:07:18,080
say hey DevOps is like this super-secret

00:07:16,759 --> 00:07:20,770
movement right this is just the way

00:07:18,080 --> 00:07:24,050
developers work as you guys already know

00:07:20,770 --> 00:07:26,479
and so to get into a couple of use cases

00:07:24,050 --> 00:07:28,130
at Cisco first I want to kind of help

00:07:26,479 --> 00:07:30,650
you understand some of the guiding

00:07:28,130 --> 00:07:33,110
principles that that I developed as a

00:07:30,650 --> 00:07:34,970
using at Cisco today and so the first

00:07:33,110 --> 00:07:36,680
one is is pretty easy right well doing

00:07:34,970 --> 00:07:37,910
everything on an open platform and open

00:07:36,680 --> 00:07:39,410
standards and we're contributing

00:07:37,910 --> 00:07:42,590
everything we write back to the

00:07:39,410 --> 00:07:44,900
community all of the services that we

00:07:42,590 --> 00:07:46,669
develop are being written as building

00:07:44,900 --> 00:07:48,500
blocks and all the layers of the service

00:07:46,669 --> 00:07:50,780
from the very bottom to the very top

00:07:48,500 --> 00:07:52,909
services everything that we're

00:07:50,780 --> 00:07:55,669
developing is available as a service to

00:07:52,909 --> 00:07:57,409
either an API or a UI and then

00:07:55,669 --> 00:08:01,460
everything we do can be deployed on a

00:07:57,409 --> 00:08:03,979
single deployment model and it's a CIC D

00:08:01,460 --> 00:08:05,870
framework across any data center and I

00:08:03,979 --> 00:08:08,409
mean any data center not a Cisco

00:08:05,870 --> 00:08:11,180
days--and or any data centers globally

00:08:08,409 --> 00:08:12,889
and so the first business is the

00:08:11,180 --> 00:08:14,330
collaboration business and the

00:08:12,889 --> 00:08:16,639
collaboration business is doing all of

00:08:14,330 --> 00:08:17,990
their development on OpenStack and how

00:08:16,639 --> 00:08:21,440
foundry today and we're working on

00:08:17,990 --> 00:08:23,210
openshift right now and so all about

00:08:21,440 --> 00:08:24,830
collaboration development is being done

00:08:23,210 --> 00:08:27,590
for the last six to nine months has been

00:08:24,830 --> 00:08:29,780
on an open-source platform the model

00:08:27,590 --> 00:08:31,719
that they're running down is all of

00:08:29,780 --> 00:08:33,860
their applications are independent or

00:08:31,719 --> 00:08:35,750
they can be integrated together

00:08:33,860 --> 00:08:39,140
seamlessly so it's loosely coupled and

00:08:35,750 --> 00:08:41,599
they're all containerized the the reason

00:08:39,140 --> 00:08:42,890
that we selected Cloud Foundry is is

00:08:41,599 --> 00:08:45,529
pretty obvious right but were able to

00:08:42,890 --> 00:08:48,410
abstract that deployment models would be

00:08:45,529 --> 00:08:50,779
both independent and integrated so it's

00:08:48,410 --> 00:08:52,700
very loosely coupled we have great

00:08:50,779 --> 00:08:54,529
health checking capabilities so we're

00:08:52,700 --> 00:08:55,040
doing a lot of application routing and

00:08:54,529 --> 00:08:56,720
connecting

00:08:55,040 --> 00:08:58,430
some of my network components and

00:08:56,720 --> 00:09:00,230
capabilities underneath the covers and

00:08:58,430 --> 00:09:02,660
looking at the monitoring of what's

00:09:00,230 --> 00:09:04,639
happening at the application layer and

00:09:02,660 --> 00:09:07,490
making decisions and enforcing changes

00:09:04,639 --> 00:09:09,259
in policy across the network there's

00:09:07,490 --> 00:09:11,240
also a great partner ecosystem as you've

00:09:09,259 --> 00:09:13,339
seen over the last couple days here and

00:09:11,240 --> 00:09:15,019
so we're taking advantage of a lot of

00:09:13,339 --> 00:09:17,329
the partners and working very closely

00:09:15,019 --> 00:09:18,800
with a lot of partners and then there's

00:09:17,329 --> 00:09:20,300
a lot of flexibility right the biggest

00:09:18,800 --> 00:09:23,240
thing we love about cloud foundry is the

00:09:20,300 --> 00:09:25,490
ability to just test something give it a

00:09:23,240 --> 00:09:28,069
try throw it out there look at how it

00:09:25,490 --> 00:09:29,870
performs look at some of the tooling and

00:09:28,069 --> 00:09:31,819
some of the mounting that comes back and

00:09:29,870 --> 00:09:35,060
if it fells we pivot to another another

00:09:31,819 --> 00:09:37,490
solution very quickly and then with Bosh

00:09:35,060 --> 00:09:38,870
one of the issues we found with Bosh is

00:09:37,490 --> 00:09:40,310
that it doesn't work across all

00:09:38,870 --> 00:09:41,990
providers the same size something will

00:09:40,310 --> 00:09:44,690
trying to help and contribute to and

00:09:41,990 --> 00:09:46,910
it's you know to us Cloud Foundry is

00:09:44,690 --> 00:09:48,800
just kind of another app framework and

00:09:46,910 --> 00:09:51,290
so we're trying to build our apps in a

00:09:48,800 --> 00:09:53,269
way that look at at the platform layer

00:09:51,290 --> 00:09:58,310
it's just another framework for

00:09:53,269 --> 00:09:59,630
applications the other example and this

00:09:58,310 --> 00:10:01,639
would be a little bit more more

00:09:59,630 --> 00:10:06,170
technical so I apologize if it's too

00:10:01,639 --> 00:10:08,209
technical so but in application centric

00:10:06,170 --> 00:10:10,550
infrastructure we're building a lot of

00:10:08,209 --> 00:10:13,220
application policies and group policies

00:10:10,550 --> 00:10:15,829
that are taking you know some of the

00:10:13,220 --> 00:10:18,980
open-source components in the

00:10:15,829 --> 00:10:22,490
environments and also existing network

00:10:18,980 --> 00:10:24,980
infrastructure components and other non

00:10:22,490 --> 00:10:27,319
Cisco Network components and we'll bring

00:10:24,980 --> 00:10:29,420
all of that into a single application

00:10:27,319 --> 00:10:31,850
framework and writing group policies

00:10:29,420 --> 00:10:35,329
against that framework and this runs on

00:10:31,850 --> 00:10:36,620
an open eye OpenStack cloud today and

00:10:35,329 --> 00:10:38,959
then what we're doing with that there's

00:10:36,620 --> 00:10:41,300
a couple of examples here one is looking

00:10:38,959 --> 00:10:44,120
at you know verifying the domain in real

00:10:41,300 --> 00:10:45,860
time and so if you think about like it's

00:10:44,120 --> 00:10:48,050
just a general network centric single

00:10:45,860 --> 00:10:49,220
network domain if you have a rules

00:10:48,050 --> 00:10:52,610
engine which we've written in Cloud

00:10:49,220 --> 00:10:54,319
Foundry and you're looking at two

00:10:52,610 --> 00:10:57,769
different network elements and you

00:10:54,319 --> 00:11:00,259
create a domain policy for how what ACL

00:10:57,769 --> 00:11:02,540
rules you want to allow for this traffic

00:11:00,259 --> 00:11:06,589
to come into your network what were able

00:11:02,540 --> 00:11:08,840
to do is sort of create a policy around

00:11:06,589 --> 00:11:11,150
that interface or somebody

00:11:08,840 --> 00:11:13,280
inserts a rule in a local network

00:11:11,150 --> 00:11:15,560
element so it's my either through an API

00:11:13,280 --> 00:11:17,960
or through a login command changes a

00:11:15,560 --> 00:11:19,340
rule and that violates the policy were

00:11:17,960 --> 00:11:21,920
able to basically do consistency

00:11:19,340 --> 00:11:24,520
checking and our framework and say okay

00:11:21,920 --> 00:11:26,930
that rule needs to be changed back and

00:11:24,520 --> 00:11:29,630
we look at the precedents now so that

00:11:26,930 --> 00:11:31,820
rule has a different policy than what

00:11:29,630 --> 00:11:33,380
we've allowed for and so we could say

00:11:31,820 --> 00:11:34,490
with this rules engine that we've

00:11:33,380 --> 00:11:36,170
developed we're looking at how do we

00:11:34,490 --> 00:11:38,600
self repair this we don't want to alert

00:11:36,170 --> 00:11:40,520
somebody that hey this rule just changed

00:11:38,600 --> 00:11:43,460
and that's like bad thing we want to try

00:11:40,520 --> 00:11:45,800
to self correct that and so we've been

00:11:43,460 --> 00:11:48,440
using some existing DevOps tools and

00:11:45,800 --> 00:11:51,140
some of some of the tools for a policy

00:11:48,440 --> 00:11:53,840
engine there from the web do auto

00:11:51,140 --> 00:11:55,040
community and we've demonstrated this if

00:11:53,840 --> 00:11:56,720
you look on YouTube there's a couple of

00:11:55,040 --> 00:11:59,840
videos that demonstrate this exact use

00:11:56,720 --> 00:12:02,240
case and then if you take that kind of

00:11:59,840 --> 00:12:04,640
to the next step and you look at you

00:12:02,240 --> 00:12:06,410
know multiple network elements and rules

00:12:04,640 --> 00:12:08,000
across multiple network elements and

00:12:06,410 --> 00:12:12,170
trying to reconcile those rules in real

00:12:08,000 --> 00:12:13,910
time there's a group policy that we want

00:12:12,170 --> 00:12:16,040
to go off and kind of validate and

00:12:13,910 --> 00:12:18,170
detect where there's misconfigurations

00:12:16,040 --> 00:12:19,840
across your network and so you're able

00:12:18,170 --> 00:12:22,160
to sort of create that rule

00:12:19,840 --> 00:12:23,300
automatically go off and correct any

00:12:22,160 --> 00:12:26,680
errors that are found in that

00:12:23,300 --> 00:12:26,680

YouTube URL: https://www.youtube.com/watch?v=_4X90Zly72I


