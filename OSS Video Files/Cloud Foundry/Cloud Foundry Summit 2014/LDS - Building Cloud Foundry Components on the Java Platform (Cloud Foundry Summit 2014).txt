Title: LDS - Building Cloud Foundry Components on the Java Platform (Cloud Foundry Summit 2014)
Publication date: 2014-07-04
Playlist: Cloud Foundry Summit 2014
Description: 
	Mike Heath, Principal Software Engineer, LDS Church

Our organization, like many enterprises, has invested heavily in the Java platform. We have been able to leverage this investment our in Cloud Foundry deployment. We will be sharing our experiences using Java to build Cloud Foundry components such as service brokers, how we use BOSH to deploy our Java code, and how we can easily integrate with existing Cloud Foundry components such as NATS and collector.
Captions: 
	00:00:00,000 --> 00:00:12,960
I don't know how I got stuck following

00:00:10,920 --> 00:00:16,199
UNC because that was awesome I am really

00:00:12,960 --> 00:00:23,699
really looking forward to to Diego there

00:00:16,199 --> 00:00:25,590
we go okay so I've got a disclaimer my

00:00:23,699 --> 00:00:27,109
disclaimer doesn't come from our lawyers

00:00:25,590 --> 00:00:29,699
that comes from our PR department

00:00:27,109 --> 00:00:31,980
everything I say is my own opinion it's

00:00:29,699 --> 00:00:34,980
not necessarily the opinions or views of

00:00:31,980 --> 00:00:37,079
my employer the LDS Church so I love

00:00:34,980 --> 00:00:38,489
coming to conferences like this and

00:00:37,079 --> 00:00:41,160
telling people that I work for the LDS

00:00:38,489 --> 00:00:43,290
Church because a lot of them give me a

00:00:41,160 --> 00:00:44,969
really strange reaction they think that

00:00:43,290 --> 00:00:46,110
I work for some white chapel sitting on

00:00:44,969 --> 00:00:48,510
a corner somewhere and that's not the

00:00:46,110 --> 00:00:49,829
case at all the LDS Church is a global

00:00:48,510 --> 00:00:52,680
church we've got about 16 million

00:00:49,829 --> 00:00:55,320
members worldwide about 84,000

00:00:52,680 --> 00:00:57,859
missionaries we have a huge humanitarian

00:00:55,320 --> 00:01:00,600
effort and we also own and operate three

00:00:57,859 --> 00:01:02,460
universities the biggest of which is

00:01:00,600 --> 00:01:08,520
Brigham Young University with more than

00:01:02,460 --> 00:01:11,360
32,000 students in in Provo Utah all

00:01:08,520 --> 00:01:14,540
right so let's talk about Cloud Foundry

00:01:11,360 --> 00:01:17,189
so we have been running Cloud Foundry

00:01:14,540 --> 00:01:20,130
for about a year we have it deployed on

00:01:17,189 --> 00:01:21,930
on vSphere running in our own data

00:01:20,130 --> 00:01:24,299
center on the campus of Brigham Young

00:01:21,930 --> 00:01:25,909
University and we've had it deployed in

00:01:24,299 --> 00:01:28,850
production for about a year now and

00:01:25,909 --> 00:01:32,900
we've been really excited about that

00:01:28,850 --> 00:01:35,759
after we deployed it into production

00:01:32,900 --> 00:01:38,130
we didn't really let everybody come in

00:01:35,759 --> 00:01:40,710
and just start using it for a variety of

00:01:38,130 --> 00:01:42,180
reasons probably the biggest of which is

00:01:40,710 --> 00:01:44,520
we had to learn how to actually operate

00:01:42,180 --> 00:01:47,460
Cloud Foundry figure out what happens if

00:01:44,520 --> 00:01:49,590
for were to go down and you know just

00:01:47,460 --> 00:01:52,530
learn what we needed to do to fit Cloud

00:01:49,590 --> 00:01:53,790
Foundry into our organization so we

00:01:52,530 --> 00:01:55,350
invited a few teams within our

00:01:53,790 --> 00:01:57,000
organization to deploy their apps onto

00:01:55,350 --> 00:01:59,100
Cloud Foundry you worked very closely

00:01:57,000 --> 00:02:00,659
with them and over those eight months we

00:01:59,100 --> 00:02:01,920
really evolved our Cloud Foundry quite a

00:02:00,659 --> 00:02:03,600
bit to make it really fit well with what

00:02:01,920 --> 00:02:06,299
we're doing I understand what our

00:02:03,600 --> 00:02:07,710
developers needs are and to build on

00:02:06,299 --> 00:02:10,580
something that really works well for our

00:02:07,710 --> 00:02:10,580
organization

00:02:10,910 --> 00:02:16,740
and then this past February we had a big

00:02:14,160 --> 00:02:19,860
launch event where we invited all the

00:02:16,740 --> 00:02:21,660
developers within our IT organization to

00:02:19,860 --> 00:02:23,970
come and learn about Cloud Foundry and

00:02:21,660 --> 00:02:25,860
to open it up to all of them and back in

00:02:23,970 --> 00:02:26,940
February we thought we were doing really

00:02:25,860 --> 00:02:29,100
awesome with Cloud Foundry we had

00:02:26,940 --> 00:02:31,110
somewhere between 40 and 50 applications

00:02:29,100 --> 00:02:33,210
deployed on Cloud Foundry and we thought

00:02:31,110 --> 00:02:34,680
that was a lot and we were really

00:02:33,210 --> 00:02:36,900
excited about that but it's in the past

00:02:34,680 --> 00:02:38,670
four months there's a whole bunch of new

00:02:36,900 --> 00:02:42,810
developers have onboard around the Cloud

00:02:38,670 --> 00:02:45,480
Foundry and started using it we're now

00:02:42,810 --> 00:02:46,920
hosting more than 200 applications and

00:02:45,480 --> 00:02:49,230
that's really exciting but it's also

00:02:46,920 --> 00:02:51,180
really nerve-racking at the same time

00:02:49,230 --> 00:02:53,670
because a lot of stress trying to keep

00:02:51,180 --> 00:02:58,200
that many applications up now to be fair

00:02:53,670 --> 00:02:59,820
out of those 200 applications maybe a

00:02:58,200 --> 00:03:01,770
dozen of them are actually production

00:02:59,820 --> 00:03:05,400
applications but we've got a lot of

00:03:01,770 --> 00:03:06,660
development work going on and I expect

00:03:05,400 --> 00:03:10,500
that number of production applications

00:03:06,660 --> 00:03:12,209
to increase very quickly and we liked

00:03:10,500 --> 00:03:14,010
our founders so much in our organization

00:03:12,209 --> 00:03:16,230
that we have actually made our strategic

00:03:14,010 --> 00:03:20,790
platform for deploying custom-built

00:03:16,230 --> 00:03:24,000
applications a little bit about our team

00:03:20,790 --> 00:03:26,370
we're two-and-a-half developers I say a

00:03:24,000 --> 00:03:27,750
half developer because my manager spends

00:03:26,370 --> 00:03:31,160
about half of his time doing management

00:03:27,750 --> 00:03:33,090
and HR stuff and the other half

00:03:31,160 --> 00:03:34,890
developing I think you'd rather develop

00:03:33,090 --> 00:03:36,209
full-time but somehow he drew the short

00:03:34,890 --> 00:03:38,790
straw and ended up having to do some

00:03:36,209 --> 00:03:40,290
management and then we've got three

00:03:38,790 --> 00:03:41,580
Operations personnel that help us out

00:03:40,290 --> 00:03:43,530
with Cloud Foundry but they don't do

00:03:41,580 --> 00:03:44,730
Cloud Foundry full-time they just help

00:03:43,530 --> 00:03:48,390
us out with it and then we've also got

00:03:44,730 --> 00:03:50,760
an intern and we have a huge passion for

00:03:48,390 --> 00:03:52,920
efficiency in fact the whole reason for

00:03:50,760 --> 00:03:55,260
our team existing is to make it easier

00:03:52,920 --> 00:03:57,720
for developers to deploy their

00:03:55,260 --> 00:03:59,100
applications and that's really why we

00:03:57,720 --> 00:04:01,590
picked cloud founders because cloud

00:03:59,100 --> 00:04:02,910
foundry solves all of our problems it

00:04:01,590 --> 00:04:04,650
makes it absolutely trivial for a

00:04:02,910 --> 00:04:08,940
developer to take their application and

00:04:04,650 --> 00:04:10,440
deploy it all right so I want to talk a

00:04:08,940 --> 00:04:13,579
little bit about some of the value that

00:04:10,440 --> 00:04:16,079
we get out of college foundry and when

00:04:13,579 --> 00:04:17,609
talking more about the operators of

00:04:16,079 --> 00:04:19,440
cloud foundry I think our users of cloud

00:04:17,609 --> 00:04:21,299
foundry I think a lot of you understand

00:04:19,440 --> 00:04:22,919
that really well what kind of value you

00:04:21,299 --> 00:04:24,480
can get out of it you know it's easy to

00:04:22,919 --> 00:04:26,880
pull an application

00:04:24,480 --> 00:04:28,920
the reliability and the scalability but

00:04:26,880 --> 00:04:31,320
for me as an operator the self-service

00:04:28,920 --> 00:04:33,510
part of Cloud Foundry is huge if a

00:04:31,320 --> 00:04:35,340
developer can go out build an

00:04:33,510 --> 00:04:37,200
application deploy it to cloud foundry

00:04:35,340 --> 00:04:39,480
bind all the services that they need to

00:04:37,200 --> 00:04:41,040
be able to go out and troubleshoot their

00:04:39,480 --> 00:04:43,380
application without having to engage my

00:04:41,040 --> 00:04:44,490
team that's a huge win for the

00:04:43,380 --> 00:04:45,930
developers because they're being

00:04:44,490 --> 00:04:47,190
productive and it's a huge win for me

00:04:45,930 --> 00:04:48,990
because I don't have people coming to my

00:04:47,190 --> 00:04:50,340
desk and bugging me and trying to get

00:04:48,990 --> 00:04:53,160
their application figured out so it

00:04:50,340 --> 00:04:54,720
gives me more time to enhance Cloud

00:04:53,160 --> 00:04:57,090
Foundry to work on Cloud Foundry and

00:04:54,720 --> 00:04:59,550
make it a better experience for our

00:04:57,090 --> 00:05:00,830
developers I think one of the other

00:04:59,550 --> 00:05:03,770
really big values that we get out of

00:05:00,830 --> 00:05:06,180
cloud foundry is that it's customizable

00:05:03,770 --> 00:05:08,820
its customizable a lot of different

00:05:06,180 --> 00:05:11,040
levels for when the service brokers make

00:05:08,820 --> 00:05:12,570
it really easy for us to integrate with

00:05:11,040 --> 00:05:18,570
the systems that already exist within

00:05:12,570 --> 00:05:20,250
our IT organization and by using the

00:05:18,570 --> 00:05:22,320
service brokers we can actually extend

00:05:20,250 --> 00:05:24,660
again a self-service model to other

00:05:22,320 --> 00:05:26,700
teams within our group right so if we've

00:05:24,660 --> 00:05:28,710
got somebody else managing Oracle

00:05:26,700 --> 00:05:30,150
databases for example we can build a

00:05:28,710 --> 00:05:32,610
service broker that integrates Cloud

00:05:30,150 --> 00:05:35,580
Foundry with Oracle and now the DBA has

00:05:32,610 --> 00:05:36,990
more time to spend actually being an

00:05:35,580 --> 00:05:40,110
administrator of the database rather

00:05:36,990 --> 00:05:42,030
than just setting things up and you know

00:05:40,110 --> 00:05:44,520
trying to to keep the developers happy

00:05:42,030 --> 00:05:46,160
by configuring their databases so we

00:05:44,520 --> 00:05:48,720
were able to automate a lot of that I

00:05:46,160 --> 00:05:50,700
think another level where co-founder is

00:05:48,720 --> 00:05:52,950
very customizable is is in its

00:05:50,700 --> 00:05:54,930
architecture everything's you know

00:05:52,950 --> 00:05:56,790
fairly loosely coupled so we can

00:05:54,930 --> 00:05:57,780
actually inject our own components into

00:05:56,790 --> 00:05:59,850
a running Cloud Foundry without

00:05:57,780 --> 00:06:02,130
modifying Cloud Foundry so if we need to

00:05:59,850 --> 00:06:03,330
know when an application starts up we

00:06:02,130 --> 00:06:05,160
can do that without touching the Cloud

00:06:03,330 --> 00:06:07,380
Foundry code or if we need to know in an

00:06:05,160 --> 00:06:09,690
application crashes that's really easy

00:06:07,380 --> 00:06:11,070
to pick that up and and and to

00:06:09,690 --> 00:06:13,980
communicate with the whole Cloud Foundry

00:06:11,070 --> 00:06:15,720
system but probably the best way that

00:06:13,980 --> 00:06:18,360
co-founder is customizable is the fact

00:06:15,720 --> 00:06:19,650
that it's open source right in fact I

00:06:18,360 --> 00:06:21,930
don't think it would be possible to

00:06:19,650 --> 00:06:23,730
deploy something as complicated as a

00:06:21,930 --> 00:06:25,470
platform as a service if it weren't open

00:06:23,730 --> 00:06:27,780
source there's just too many moving

00:06:25,470 --> 00:06:28,950
parts every organization is just a

00:06:27,780 --> 00:06:30,420
little bit different so if you don't

00:06:28,950 --> 00:06:31,470
have that visibility to be able to get

00:06:30,420 --> 00:06:33,900
in the code and figure out what's going

00:06:31,470 --> 00:06:35,280
on I think it'd be a nightmare to try

00:06:33,900 --> 00:06:37,050
and deploy something as big as Cloud

00:06:35,280 --> 00:06:38,070
Foundry without having access to the

00:06:37,050 --> 00:06:39,960
source code

00:06:38,070 --> 00:06:41,310
it also gives us a lot of freedom to to

00:06:39,960 --> 00:06:43,140
be able to go in and tweak things to

00:06:41,310 --> 00:06:44,910
make it work the way we want it to work

00:06:43,140 --> 00:06:46,920
or if we find bugs or want to make

00:06:44,910 --> 00:06:48,420
enhancements we can do that and working

00:06:46,920 --> 00:06:51,150
with pivitol has been awesome we've

00:06:48,420 --> 00:06:52,460
contributed dozens of pull requests and

00:06:51,150 --> 00:06:57,840
it's really been a pleasure to work with

00:06:52,460 --> 00:06:59,880
the tuff foundry community all right so

00:06:57,840 --> 00:07:01,200
let me talk a little bit about some of

00:06:59,880 --> 00:07:04,430
the custom components that we've been

00:07:01,200 --> 00:07:07,050
able to build within our organization a

00:07:04,430 --> 00:07:08,850
long time ago cloud foundry had this

00:07:07,050 --> 00:07:11,640
concept of being able to remote debug

00:07:08,850 --> 00:07:13,560
into a deployed application or to open a

00:07:11,640 --> 00:07:15,000
console port into that application so if

00:07:13,560 --> 00:07:17,160
you have like a rails application you

00:07:15,000 --> 00:07:18,420
could use the rails console and go in

00:07:17,160 --> 00:07:21,450
and kind of play with your application

00:07:18,420 --> 00:07:23,520
it was running in cloud foundry for us

00:07:21,450 --> 00:07:25,920
using Java applications who use JMX for

00:07:23,520 --> 00:07:28,020
that but it was really hard to secure

00:07:25,920 --> 00:07:29,820
that and so rightfully so pivotal pulled

00:07:28,020 --> 00:07:31,470
that out I think we got a little bit

00:07:29,820 --> 00:07:33,390
frustrated with that when we did but in

00:07:31,470 --> 00:07:33,990
the end it didn't matter because it's

00:07:33,390 --> 00:07:36,060
open source

00:07:33,990 --> 00:07:37,920
we took that feature we put it back into

00:07:36,060 --> 00:07:39,750
our code base and we deployed it and

00:07:37,920 --> 00:07:41,400
then sitting in front of that to secure

00:07:39,750 --> 00:07:43,560
it we built a tunnel mechanism that

00:07:41,400 --> 00:07:45,030
authenticates the user so that they can

00:07:43,560 --> 00:07:48,720
actually tunnel in to do a remote debug

00:07:45,030 --> 00:07:50,550
or or JMX or or whatever and it really

00:07:48,720 --> 00:07:52,830
gives our developers a lot of visibility

00:07:50,550 --> 00:07:55,100
as to what's going on outside of Cloud

00:07:52,830 --> 00:07:59,570
Foundry inside of that black box that's

00:07:55,100 --> 00:07:59,570
you've got a lot of value out of that

00:07:59,870 --> 00:08:04,410
one of the other things that we built is

00:08:01,950 --> 00:08:05,910
a custom HTTP proxy because we want some

00:08:04,410 --> 00:08:07,440
of our applications on Cloud Foundry to

00:08:05,910 --> 00:08:09,150
be able to access the public Internet

00:08:07,440 --> 00:08:12,780
but we don't want all of them to have

00:08:09,150 --> 00:08:15,180
access we've also integrated with our

00:08:12,780 --> 00:08:17,940
enterprise monitoring and alerting so

00:08:15,180 --> 00:08:19,830
for example if an application crashes we

00:08:17,940 --> 00:08:21,150
can issue an alert to our alert system

00:08:19,830 --> 00:08:22,950
and if the developer actually cares

00:08:21,150 --> 00:08:25,260
about that application crashing they can

00:08:22,950 --> 00:08:28,800
get a text message or an email or

00:08:25,260 --> 00:08:31,050
whatever it might be and then we built a

00:08:28,800 --> 00:08:34,349
really nice integration between logger

00:08:31,050 --> 00:08:36,840
Gator and Splunk so instead of just

00:08:34,349 --> 00:08:39,539
taking logger Gator and using syslog to

00:08:36,840 --> 00:08:40,800
plug it straight into Splunk we built a

00:08:39,539 --> 00:08:43,110
component that sits between them that

00:08:40,800 --> 00:08:44,520
takes those syslog messages and force

00:08:43,110 --> 00:08:46,320
them to Splunk but when it does that it

00:08:44,520 --> 00:08:47,910
associated a lot of the metadata that

00:08:46,320 --> 00:08:49,440
comes with your application with all

00:08:47,910 --> 00:08:51,810
those logging events going in this Blanc

00:08:49,440 --> 00:08:54,450
Source Blanc users can go into Splunk

00:08:51,810 --> 00:08:56,610
hey I want to find out all the logging

00:08:54,450 --> 00:08:59,010
messages for my particular space or my

00:08:56,610 --> 00:09:01,020
particular org or just my app by the

00:08:59,010 --> 00:09:03,480
applications name rather than the

00:09:01,020 --> 00:09:05,790
applications good or be able to search

00:09:03,480 --> 00:09:07,440
based off of routes that might be bound

00:09:05,790 --> 00:09:09,570
to the application that sort of thing so

00:09:07,440 --> 00:09:10,980
I really wish I had more time to

00:09:09,570 --> 00:09:12,270
demonstrate this we just barely push

00:09:10,980 --> 00:09:14,070
this out to production a couple weeks

00:09:12,270 --> 00:09:17,700
ago and it's a really really awesome

00:09:14,070 --> 00:09:19,920
feature are you've also built about a

00:09:17,700 --> 00:09:22,050
dozen service brokers this is just a few

00:09:19,920 --> 00:09:24,690
of them that I'll go over quickly we

00:09:22,050 --> 00:09:26,510
integrate with app dynamics we have a

00:09:24,690 --> 00:09:30,270
bunch of internal web services that we

00:09:26,510 --> 00:09:33,810
enable our developers to to bind to with

00:09:30,270 --> 00:09:35,520
a foundry as services being a great with

00:09:33,810 --> 00:09:37,320
HP service manager for enterprise

00:09:35,520 --> 00:09:40,110
configuration management we have

00:09:37,320 --> 00:09:42,420
identity LDAP MarkLogic Oracle single

00:09:40,110 --> 00:09:44,100
sign-on and Splunk and we've got a few

00:09:42,420 --> 00:09:47,850
other service brokers but these are the

00:09:44,100 --> 00:09:50,850
most significant ones and we built all

00:09:47,850 --> 00:09:53,720
of our service brokers and all of these

00:09:50,850 --> 00:09:55,710
custom components using Java and spring

00:09:53,720 --> 00:09:57,240
now we've talked to a lot of people

00:09:55,710 --> 00:09:58,800
about this like why in the world are

00:09:57,240 --> 00:10:01,680
using Java you could be using something

00:09:58,800 --> 00:10:03,270
really cool and sexy like like go or

00:10:01,680 --> 00:10:06,120
cloud founders already written Ruby why

00:10:03,270 --> 00:10:08,940
aren't you using that and there's a

00:10:06,120 --> 00:10:10,440
couple of good reasons for that just

00:10:08,940 --> 00:10:11,820
like most enterprise IT shops were a

00:10:10,440 --> 00:10:13,890
Java shop we have a lot of Java

00:10:11,820 --> 00:10:15,300
developers we already have a lot of

00:10:13,890 --> 00:10:18,360
infrastructure for supporting job

00:10:15,300 --> 00:10:21,089
engineers and a lot of tooling around

00:10:18,360 --> 00:10:25,740
Java and so that weighed heavily in our

00:10:21,089 --> 00:10:27,450
decision making but also Java works with

00:10:25,740 --> 00:10:29,130
our existing systems we know that if

00:10:27,450 --> 00:10:31,170
we're going to integrate with a system

00:10:29,130 --> 00:10:32,400
like Oracle or marklogic that we can do

00:10:31,170 --> 00:10:35,610
that with Java and we can do that fairly

00:10:32,400 --> 00:10:37,230
easily so we already have teams within

00:10:35,610 --> 00:10:39,690
our organization the support job as a

00:10:37,230 --> 00:10:41,900
platform and I think the third reason is

00:10:39,690 --> 00:10:44,490
that Spring boot makes deploying

00:10:41,900 --> 00:10:47,310
applicant our applications incredibly

00:10:44,490 --> 00:10:50,160
trivial I'm with all of our components

00:10:47,310 --> 00:10:51,330
we're using spring boot you know in the

00:10:50,160 --> 00:10:53,490
past traditionally when you think about

00:10:51,330 --> 00:10:54,959
deploying a java application do you

00:10:53,490 --> 00:10:58,290
think well first I got to go set up my

00:10:54,959 --> 00:11:00,180
web container whether it's a JBoss or a

00:10:58,290 --> 00:11:01,620
WebLogic or Tomcat and I've got to build

00:11:00,180 --> 00:11:03,690
my application and deploy it to that

00:11:01,620 --> 00:11:05,250
container springboard gets rid of all of

00:11:03,690 --> 00:11:07,440
that I just take my

00:11:05,250 --> 00:11:09,120
application package it up with boot and

00:11:07,440 --> 00:11:12,030
I can run it and it makes it incredibly

00:11:09,120 --> 00:11:16,620
trivial incredibly simple now to deploy

00:11:12,030 --> 00:11:18,120
our java applications now one of the big

00:11:16,620 --> 00:11:19,770
problems that we had in choosing java is

00:11:18,120 --> 00:11:21,960
that we didn't have any libraries to

00:11:19,770 --> 00:11:23,370
communicate with the existing Cloud

00:11:21,960 --> 00:11:27,060
Foundry system so we had to build a

00:11:23,370 --> 00:11:29,250
bunch of them so about two and a half

00:11:27,060 --> 00:11:31,410
years ago I got the you guys from the

00:11:29,250 --> 00:11:32,430
cloud foundry on a stick way back in the

00:11:31,410 --> 00:11:34,440
day that'll probably date you in the

00:11:32,430 --> 00:11:35,790
Cloud Foundry community right this cloud

00:11:34,440 --> 00:11:37,380
foundry on a stick and I really want to

00:11:35,790 --> 00:11:39,540
push the foundry in order organization

00:11:37,380 --> 00:11:40,710
so I started to reverse-engineer it and

00:11:39,540 --> 00:11:41,970
I knew that if I could understand what

00:11:40,710 --> 00:11:43,470
Nats was doing I could understand how

00:11:41,970 --> 00:11:46,080
cloud foundry worked and one thing led

00:11:43,470 --> 00:11:48,210
to another and I built an ass client in

00:11:46,080 --> 00:11:51,210
Java it's been out there for about two

00:11:48,210 --> 00:11:52,590
years it's really mature now as I got

00:11:51,210 --> 00:11:54,530
into playing around with Nats and

00:11:52,590 --> 00:11:56,100
figuring out how cloud foundry works I

00:11:54,530 --> 00:11:57,990
realized that there was a lot of

00:11:56,100 --> 00:11:59,340
duplication and on a lot of complexity

00:11:57,990 --> 00:12:00,990
with how the different components

00:11:59,340 --> 00:12:02,700
communicate with each other so we built

00:12:00,990 --> 00:12:04,920
a really thin

00:12:02,700 --> 00:12:06,780
Nats cloud foundry abstraction that

00:12:04,920 --> 00:12:09,450
makes us really in it makes it easy for

00:12:06,780 --> 00:12:11,900
us to interact with with Nats and with

00:12:09,450 --> 00:12:15,120
the different cloud foundry components

00:12:11,900 --> 00:12:17,030
and we also have support so cloud

00:12:15,120 --> 00:12:19,940
foundry right now this will change

00:12:17,030 --> 00:12:21,960
sometime in the future who knows when

00:12:19,940 --> 00:12:24,240
right now Clara fender has its own

00:12:21,960 --> 00:12:25,589
monitoring system I use it with these

00:12:24,240 --> 00:12:27,960
rest endpoints to each cloud foundry

00:12:25,589 --> 00:12:30,330
component publishes called healthy and

00:12:27,960 --> 00:12:31,860
VAR c and then cloud foundry components

00:12:30,330 --> 00:12:33,480
can discover each other using the Nats

00:12:31,860 --> 00:12:35,820
message bus we tie into all of that all

00:12:33,480 --> 00:12:38,510
of our components they look like any

00:12:35,820 --> 00:12:40,830
other planet component running on Java

00:12:38,510 --> 00:12:44,790
it also support logger Gator so we can

00:12:40,830 --> 00:12:46,680
log on behalf of applications we support

00:12:44,790 --> 00:12:48,270
service brokers a API of course and then

00:12:46,680 --> 00:12:50,430
we build a few utilities to make a nice

00:12:48,270 --> 00:12:51,600
work with Bosh because all of these

00:12:50,430 --> 00:12:54,750
components that we've built we deploy

00:12:51,600 --> 00:12:57,120
with Bosh and of course all of these

00:12:54,750 --> 00:12:58,320
components are our open source they're

00:12:57,120 --> 00:13:01,080
out on github and the Cloud Foundry

00:12:58,320 --> 00:13:03,420
community project these are the project

00:13:01,080 --> 00:13:06,290
names if you're interested in building

00:13:03,420 --> 00:13:08,310
Java components for Cloud Foundry I

00:13:06,290 --> 00:13:14,640
highly encourage you to go and check it

00:13:08,310 --> 00:13:17,010
out alright I'm a developer I really

00:13:14,640 --> 00:13:19,000
don't like slides I think code

00:13:17,010 --> 00:13:22,240
communicates things a lot better

00:13:19,000 --> 00:13:23,830
that then slides if you're technical if

00:13:22,240 --> 00:13:25,780
you're not a technical person right now

00:13:23,830 --> 00:13:27,040
it's probably a good chance to check

00:13:25,780 --> 00:13:30,330
your email or something because we're

00:13:27,040 --> 00:13:30,330
gonna get really technical really fast

00:13:32,580 --> 00:13:39,040
so well I built here is I'm pretty sure

00:13:35,980 --> 00:13:42,010
that this is the world's simplest Cloud

00:13:39,040 --> 00:13:43,660
Foundry service broker and if anybody

00:13:42,010 --> 00:13:46,450
knows of one simpler I'd love to see

00:13:43,660 --> 00:13:49,330
I've seen a ton of co-founder service

00:13:46,450 --> 00:13:50,710
brokers and I think this is the simplest

00:13:49,330 --> 00:13:52,630
now granted it doesn't actually do

00:13:50,710 --> 00:13:57,370
anything but it's it's it's a good demo

00:13:52,630 --> 00:13:59,350
it's a good demo so right here at the

00:13:57,370 --> 00:14:01,600
top you'll see I've got these

00:13:59,350 --> 00:14:05,860
annotations and these are provided by

00:14:01,600 --> 00:14:07,450
spring and spring boot and you know back

00:14:05,860 --> 00:14:09,100
in the day when you're building spring

00:14:07,450 --> 00:14:11,020
applications you start out with these

00:14:09,100 --> 00:14:14,800
reams and reams of XML configuration

00:14:11,020 --> 00:14:17,470
files and for some reason we thought

00:14:14,800 --> 00:14:20,050
that was cool but I I think we've

00:14:17,470 --> 00:14:22,300
finally gotten over that and now this is

00:14:20,050 --> 00:14:25,360
all I need to do to to configure spring

00:14:22,300 --> 00:14:26,650
and it doesn't just set up spring and

00:14:25,360 --> 00:14:28,120
set up some basic defaults for spring

00:14:26,650 --> 00:14:29,770
but it'll actually embed a web container

00:14:28,120 --> 00:14:32,740
into my application so now I can build a

00:14:29,770 --> 00:14:36,670
web application all with these three

00:14:32,740 --> 00:14:38,800
annotations now I also want this service

00:14:36,670 --> 00:14:40,870
broker to act like any other Cloud

00:14:38,800 --> 00:14:43,360
Foundry component I want it to be able

00:14:40,870 --> 00:14:45,360
to be monitored by collector or whatever

00:14:43,360 --> 00:14:47,140
you might be using to monitor the the

00:14:45,360 --> 00:14:49,660
components running in your cloud foundry

00:14:47,140 --> 00:14:51,339
deploy so I add this annotation right

00:14:49,660 --> 00:14:54,610
here that says hey I'm a service broker

00:14:51,339 --> 00:14:56,290
and this depends on being able to

00:14:54,610 --> 00:14:57,940
connect to Nats so I can configure a

00:14:56,290 --> 00:15:00,250
gnat's connection and that's all I have

00:14:57,940 --> 00:15:02,170
to do now my application will

00:15:00,250 --> 00:15:04,570
automatically start publishing Varzi and

00:15:02,170 --> 00:15:06,640
helps the information over Cloud Foundry

00:15:04,570 --> 00:15:11,290
so that's very simple very

00:15:06,640 --> 00:15:15,160
straightforward but I also want to say

00:15:11,290 --> 00:15:17,650
hey my my job application here's a

00:15:15,160 --> 00:15:18,790
service broker now you have to

00:15:17,650 --> 00:15:20,200
understand when you're building a

00:15:18,790 --> 00:15:22,600
service broker cloud founder it has to

00:15:20,200 --> 00:15:23,890
do basically five things the first thing

00:15:22,600 --> 00:15:26,020
it needs to be able to do is tell the

00:15:23,890 --> 00:15:28,450
clock controller hey these are all the

00:15:26,020 --> 00:15:30,430
services that I broker and here's all

00:15:28,450 --> 00:15:32,400
the plans and configuration for those

00:15:30,430 --> 00:15:34,170
services

00:15:32,400 --> 00:15:36,140
so in order to enable that all I have to

00:15:34,170 --> 00:15:38,460
do is put this annotation on this class

00:15:36,140 --> 00:15:39,839
give us some credentials that the cloud

00:15:38,460 --> 00:15:43,350
controller will use to connect to this

00:15:39,839 --> 00:15:46,800
broker and it's a perfectly valid

00:15:43,350 --> 00:15:50,450
service broker right now with just this

00:15:46,800 --> 00:15:52,710
one Java class if I were to run this

00:15:50,450 --> 00:15:53,970
it's a valid service broker the cloud

00:15:52,710 --> 00:15:55,410
controller would connect to it and tell

00:15:53,970 --> 00:15:57,570
the cloud controller hey I do a whole

00:15:55,410 --> 00:15:59,160
lot of nothing but it is in and of

00:15:57,570 --> 00:16:01,710
itself a valid service broker so let's

00:15:59,160 --> 00:16:02,970
go and look at what it takes to to do a

00:16:01,710 --> 00:16:04,230
service broker so like I said there's

00:16:02,970 --> 00:16:06,089
five things to a service broker right

00:16:04,230 --> 00:16:07,500
there's one publishing all your services

00:16:06,089 --> 00:16:09,000
and plans to the cloud controller and

00:16:07,500 --> 00:16:11,220
then there's provisioning and

00:16:09,000 --> 00:16:13,830
de-provisioning of services so if I'm

00:16:11,220 --> 00:16:16,080
using the CF command-line client when I

00:16:13,830 --> 00:16:17,970
do a CF create service eventually that's

00:16:16,080 --> 00:16:19,980
going to result in a provision call to

00:16:17,970 --> 00:16:21,510
the service broker likewise if I do a

00:16:19,980 --> 00:16:26,550
delete service it's going to result in a

00:16:21,510 --> 00:16:27,600
D provision so here are my actual

00:16:26,550 --> 00:16:30,000
service broker

00:16:27,600 --> 00:16:32,880
well I'm sorry let me take a step back

00:16:30,000 --> 00:16:36,570
so I've got a service broker right here

00:16:32,880 --> 00:16:38,010
and I need to filled the cloud

00:16:36,570 --> 00:16:39,600
controller some information about it and

00:16:38,010 --> 00:16:42,630
I do that very declaratively just with

00:16:39,600 --> 00:16:43,950
these annotations so I give it a name

00:16:42,630 --> 00:16:45,990
this is the name that's going to be

00:16:43,950 --> 00:16:47,760
presented to the user and likewise this

00:16:45,990 --> 00:16:51,240
is the description that's going to be

00:16:47,760 --> 00:16:52,920
presented to the user and then I can

00:16:51,240 --> 00:16:55,350
list out as many service plans as I want

00:16:52,920 --> 00:16:57,720
and that's all I have to do I don't have

00:16:55,350 --> 00:16:59,279
to worry about the rest API itself I can

00:16:57,720 --> 00:17:01,620
separate declaratively go in and say hey

00:16:59,279 --> 00:17:03,660
there's a service broker if I want to

00:17:01,620 --> 00:17:05,550
add tags or metadata or those kinds of

00:17:03,660 --> 00:17:09,780
things that I can do all that with with

00:17:05,550 --> 00:17:11,699
with the annotations so now when a user

00:17:09,780 --> 00:17:13,949
says hey go create me a Service Cloud

00:17:11,699 --> 00:17:16,079
Foundry eventual it's going to result in

00:17:13,949 --> 00:17:18,510
a provision called the to the service

00:17:16,079 --> 00:17:20,160
broker and with our library all I have

00:17:18,510 --> 00:17:22,770
to do is annotate a method with

00:17:20,160 --> 00:17:24,420
provision and this method is eventually

00:17:22,770 --> 00:17:26,339
what will get called when a service gets

00:17:24,420 --> 00:17:27,689
created now like I said this service

00:17:26,339 --> 00:17:29,160
broker doesn't actually do anything a

00:17:27,689 --> 00:17:31,559
lot something out of the console and

00:17:29,160 --> 00:17:34,440
that's it so if you were to build a real

00:17:31,559 --> 00:17:36,120
service what we're hoping that this

00:17:34,440 --> 00:17:38,280
framework would allow you to do is to be

00:17:36,120 --> 00:17:39,540
able to go in and focus on your business

00:17:38,280 --> 00:17:40,650
logic for building a service for

00:17:39,540 --> 00:17:41,820
actually going out and provisioning

00:17:40,650 --> 00:17:45,270
something and not worrying about the

00:17:41,820 --> 00:17:46,440
rest API and I think we've done a pretty

00:17:45,270 --> 00:17:48,450
good job at I think it's

00:17:46,440 --> 00:17:50,129
as simple as we can get it and that's

00:17:48,450 --> 00:17:51,659
what we can do here if I need a

00:17:50,129 --> 00:17:55,019
permission to service I just do it

00:17:51,659 --> 00:17:56,490
likewise for deleting a service and then

00:17:55,019 --> 00:17:58,080
for binding a service is slightly more

00:17:56,490 --> 00:18:00,169
complicated because really what happens

00:17:58,080 --> 00:18:03,179
when you bind a service in Cloud Foundry

00:18:00,169 --> 00:18:05,070
you're saying hey I need to get

00:18:03,179 --> 00:18:07,279
credentials to access this provision

00:18:05,070 --> 00:18:09,389
service and give them to my application

00:18:07,279 --> 00:18:13,190
so when you bind you actually they have

00:18:09,389 --> 00:18:15,629
to go on and and create some credentials

00:18:13,190 --> 00:18:17,759
to pass off to the application but this

00:18:15,629 --> 00:18:19,649
is all the code that you have to do and

00:18:17,759 --> 00:18:22,159
you know likewise for unbind so it's

00:18:19,649 --> 00:18:22,159
really really simple

00:18:24,169 --> 00:18:27,600
all right the source code for this

00:18:26,309 --> 00:18:29,429
really simple service broker it's out on

00:18:27,600 --> 00:18:35,240
github here's the URL for it if you want

00:18:29,429 --> 00:18:38,009
to go check it out so in the future so

00:18:35,240 --> 00:18:40,289
you saw from from UNC stock just now

00:18:38,009 --> 00:18:42,090
cloud foundry is evolving very quickly

00:18:40,289 --> 00:18:43,950
and one of the things that they're

00:18:42,090 --> 00:18:48,090
really moving towards is this thing

00:18:43,950 --> 00:18:49,529
called SCD at first I wasn't very

00:18:48,090 --> 00:18:51,210
excited about Etsy D but now that I've

00:18:49,529 --> 00:18:54,240
gotten played with hcd hcd is awesome

00:18:51,210 --> 00:18:55,350
it's incredibly powerful and so I wanted

00:18:54,240 --> 00:18:56,460
to be able to integrate with it and I

00:18:55,350 --> 00:18:57,960
went and looked at a whole bunch of Java

00:18:56,460 --> 00:18:59,879
clients now if there's somebody in this

00:18:57,960 --> 00:19:02,220
room that's written and @cd Java client

00:18:59,879 --> 00:19:06,120
I'm sorry but all the ones that I saw

00:19:02,220 --> 00:19:07,470
out there they all stink so like I did

00:19:06,120 --> 00:19:10,049
with Nats I went and wrote my own client

00:19:07,470 --> 00:19:12,029
and I guess really powerful client it's

00:19:10,049 --> 00:19:13,679
really able to leverage a lot of the the

00:19:12,029 --> 00:19:15,870
powerful functionality that you can do

00:19:13,679 --> 00:19:17,240
with that CD so beta quality right now

00:19:15,870 --> 00:19:20,539
it needs a little bit more testing but

00:19:17,240 --> 00:19:23,539
we'll be pushing that out pretty quick

00:19:20,539 --> 00:19:26,009
and then it's Cloud Foundry evolves like

00:19:23,539 --> 00:19:28,529
as we saw Diego it's going to change a

00:19:26,009 --> 00:19:29,820
lot with how Cloud Foundry works that's

00:19:28,529 --> 00:19:32,340
what I think that we want to stay on top

00:19:29,820 --> 00:19:33,360
of and really be able to follow and and

00:19:32,340 --> 00:19:36,889
make sure that everything that we're

00:19:33,360 --> 00:19:38,789
building works well with Cloud Foundry

00:19:36,889 --> 00:19:39,960
and we'd really like to build a

00:19:38,789 --> 00:19:42,360
community around this I think there are

00:19:39,960 --> 00:19:43,860
a lot of other enterprises similar to

00:19:42,360 --> 00:19:47,100
ours that are Java shops that would like

00:19:43,860 --> 00:19:48,870
to extend Cloud Foundry and make it work

00:19:47,100 --> 00:19:50,789
and if you'd like to get involved and

00:19:48,870 --> 00:19:53,490
help us with what we're doing here's my

00:19:50,789 --> 00:19:54,659
contact information I'm going to be here

00:19:53,490 --> 00:19:57,269
until tomorrow so if you want to come

00:19:54,659 --> 00:19:58,340
and talk to me directly that would be

00:19:57,269 --> 00:19:59,990
great but

00:19:58,340 --> 00:20:01,670
thank you for your time really

00:19:59,990 --> 00:20:02,700
appreciate this opportunity to show it

00:20:01,670 --> 00:20:06,070
we're doing a compound

00:20:02,700 --> 00:20:09,359
[Applause]

00:20:06,070 --> 00:20:09,359

YouTube URL: https://www.youtube.com/watch?v=AcpdO_AfEH0


