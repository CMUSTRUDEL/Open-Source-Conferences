Title: SAS - The Fantastic Voyage to PaaS - Are we there yet? (Cloud Foundry Summit 2014)
Publication date: 2014-07-03
Playlist: Cloud Foundry Summit 2014
Description: 
	Presenter: Casey Hadden, Software Developer and Architect, SAS

SAS is a software vendor with 35+ years of industry history (and 35+ years of software decisions). From mainframes, Unix workstations, and client-server to web applications, big data, and cloud; one constant has been the changing computing environment. Throughout these eras, SAS software and the SAS business has adapted to each change in order to deliver valuable analytics to our customers.

With cloud environments firmly ensconced and PaaS gaining traction every day, how does SAS rework its software and business again to compete and thrive in this environment? How can SAS help to fill in the 'Analytics' portion of an enterprise PaaS strategy?
Captions: 
	00:00:00,930 --> 00:00:04,220
[Music]

00:00:07,970 --> 00:00:13,110
all right so I'm a software developer in

00:00:10,920 --> 00:00:14,969
the technology office at sass in North

00:00:13,110 --> 00:00:17,369
Carolina today we're gonna walk through

00:00:14,969 --> 00:00:19,439
the sass case study take a look at how

00:00:17,369 --> 00:00:21,390
we're exploring the use of cloud foundry

00:00:19,439 --> 00:00:23,519
to develop and deliver software for our

00:00:21,390 --> 00:00:25,710
customers as I was going through I kept

00:00:23,519 --> 00:00:28,410
going back to my days as a chemistry

00:00:25,710 --> 00:00:30,689
minor and kept ting about a lab so we're

00:00:28,410 --> 00:00:32,309
gonna start with a baseline talk about

00:00:30,689 --> 00:00:34,920
our purpose why cloud foundry is of

00:00:32,309 --> 00:00:36,600
interest to a company like sass look at

00:00:34,920 --> 00:00:38,790
the actual investigation what we did

00:00:36,600 --> 00:00:40,350
what we learned from that and take a

00:00:38,790 --> 00:00:44,219
peek at what might be next after that

00:00:40,350 --> 00:00:47,010
process is complete I to have a legal

00:00:44,219 --> 00:00:49,320
slide here it might be a drinking game

00:00:47,010 --> 00:00:53,550
I'm on East Coast time so it's afternoon

00:00:49,320 --> 00:00:55,379
it's perfectly fine so don't get mad if

00:00:53,550 --> 00:00:57,210
we don't do what I say we might do let's

00:00:55,379 --> 00:00:59,850
take a start off looking at sass sass is

00:00:57,210 --> 00:01:01,890
an independent software vendor we sell

00:00:59,850 --> 00:01:03,840
our software to customers they take that

00:01:01,890 --> 00:01:06,810
they deploy that on premise in their own

00:01:03,840 --> 00:01:08,100
IT environments there's a mix of

00:01:06,810 --> 00:01:10,680
physical and virtual environments that

00:01:08,100 --> 00:01:12,960
we see there and sass itself has a

00:01:10,680 --> 00:01:15,689
growing hosting and software as a

00:01:12,960 --> 00:01:17,549
service part of the organization overall

00:01:15,689 --> 00:01:19,380
we got somewhere around seventy thousand

00:01:17,549 --> 00:01:21,150
customers and about 150 products

00:01:19,380 --> 00:01:24,390
depending on who's counting what on what

00:01:21,150 --> 00:01:27,360
day of the week so our interest is not

00:01:24,390 --> 00:01:30,090
just about new development of stuff on

00:01:27,360 --> 00:01:31,770
cloud foundry but also about moving

00:01:30,090 --> 00:01:35,520
those current products and sweets into

00:01:31,770 --> 00:01:37,110
that environment some of those products

00:01:35,520 --> 00:01:39,619
have been around for a long time

00:01:37,110 --> 00:01:43,020
SAS the company is about 38 years old

00:01:39,619 --> 00:01:44,909
but the software actually started as a

00:01:43,020 --> 00:01:47,369
research project in NC State and was

00:01:44,909 --> 00:01:49,079
developed on punch cards even before

00:01:47,369 --> 00:01:51,030
that the company was created in those

00:01:49,079 --> 00:01:51,990
first systems if I stack the cards on

00:01:51,030 --> 00:01:53,430
the stage here next to me they'd be

00:01:51,990 --> 00:01:55,649
about 40 feet high I don't know quite

00:01:53,430 --> 00:01:57,570
how high the ceiling is but they'd be up

00:01:55,649 --> 00:02:00,540
there pretty good you can see some of

00:01:57,570 --> 00:02:02,070
that history in SAS the programming

00:02:00,540 --> 00:02:06,149
language with things like our card

00:02:02,070 --> 00:02:07,680
statement that was an indicator that the

00:02:06,149 --> 00:02:09,270
next set of punch cards that came

00:02:07,680 --> 00:02:11,099
through the system contained data for

00:02:09,270 --> 00:02:13,030
the program to operate on not actually

00:02:11,099 --> 00:02:14,350
part of the instructions itself so

00:02:13,030 --> 00:02:15,550
you could kind of think maybe this is

00:02:14,350 --> 00:02:17,800
one of the first places where SAS

00:02:15,550 --> 00:02:20,340
entangled itself with the platform it

00:02:17,800 --> 00:02:23,910
was running on top of eventually new

00:02:20,340 --> 00:02:28,540
systems arise punch cards go extinct and

00:02:23,910 --> 00:02:31,330
SAS has an opportunity to relook at how

00:02:28,540 --> 00:02:33,459
to do that data and so we can redefine

00:02:31,330 --> 00:02:35,830
how we read data in and we come up with

00:02:33,459 --> 00:02:37,300
something that's a true innovation we

00:02:35,830 --> 00:02:39,640
come up with the data line statement it

00:02:37,300 --> 00:02:41,739
has you know no relationship to that

00:02:39,640 --> 00:02:46,690
card statement at all right it looks way

00:02:41,739 --> 00:02:48,130
way different and so it's that spirit of

00:02:46,690 --> 00:02:50,620
radical innovation and disruption that

00:02:48,130 --> 00:02:53,860
we and I am bringing to our

00:02:50,620 --> 00:02:55,269
investigation of Cloud Foundry but in

00:02:53,860 --> 00:02:56,860
all seriousness SAS has been around a

00:02:55,269 --> 00:02:58,239
long time there's a lot of change that

00:02:56,860 --> 00:03:00,519
has happened in the industry over that

00:02:58,239 --> 00:03:02,319
time and that changes driven SAS to

00:03:00,519 --> 00:03:05,260
redefine itself its architecture and

00:03:02,319 --> 00:03:07,030
platforms as necessary so we started

00:03:05,260 --> 00:03:11,380
with IBM assembler and pl-1 running on

00:03:07,030 --> 00:03:14,230
mainframes eventually UNIX workstations

00:03:11,380 --> 00:03:16,120
and PCs come along and SAS rewrote the

00:03:14,230 --> 00:03:18,250
analytics engine that underlies all of

00:03:16,120 --> 00:03:20,019
its value into C and we have two major

00:03:18,250 --> 00:03:22,440
code bases with the same stuff going

00:03:20,019 --> 00:03:24,880
along for some period of time here

00:03:22,440 --> 00:03:26,530
that's he got back ported to the

00:03:24,880 --> 00:03:28,690
mainframe at some point the IBM

00:03:26,530 --> 00:03:30,820
assembler was retired and we created the

00:03:28,690 --> 00:03:32,709
multi vendor architecture MBA where

00:03:30,820 --> 00:03:34,209
there's this one set of code capable of

00:03:32,709 --> 00:03:37,269
running across many different kinds of

00:03:34,209 --> 00:03:40,060
operating system platforms client-server

00:03:37,269 --> 00:03:42,040
models come along and SAS invests and

00:03:40,060 --> 00:03:43,570
investigates in into the java language

00:03:42,040 --> 00:03:45,970
rights for the cross-platform

00:03:43,570 --> 00:03:49,630
capabilities a continuation of our

00:03:45,970 --> 00:03:51,370
desire for portability web applications

00:03:49,630 --> 00:03:53,440
in the need for less of a client

00:03:51,370 --> 00:03:54,850
footprint and so SAS crates middle tier

00:03:53,440 --> 00:03:57,150
and web applications for all these

00:03:54,850 --> 00:03:59,680
products that has had most recently

00:03:57,150 --> 00:04:01,870
we've had larger product bundles we try

00:03:59,680 --> 00:04:04,150
to deploy into more complex customer IT

00:04:01,870 --> 00:04:05,680
environments has driven a need for

00:04:04,150 --> 00:04:08,140
common components to handle these

00:04:05,680 --> 00:04:09,609
requirements and then a need for us to

00:04:08,140 --> 00:04:12,220
be able to all those common components

00:04:09,609 --> 00:04:13,810
to evolve independently of the solutions

00:04:12,220 --> 00:04:15,000
that are using them and so we've

00:04:13,810 --> 00:04:17,049
introduced some service architecture

00:04:15,000 --> 00:04:20,019
service-oriented architectural concepts

00:04:17,049 --> 00:04:23,680
to the system it leaves us today with

00:04:20,019 --> 00:04:24,849
this basic picture of a SAS solution so

00:04:23,680 --> 00:04:26,110
for an investigation of Cloud Foundry

00:04:24,849 --> 00:04:26,650
we're gonna look at three of the tiers

00:04:26,110 --> 00:04:29,669
here the web

00:04:26,650 --> 00:04:32,759
year the services tear and our data tear

00:04:29,669 --> 00:04:34,690
I'm sorry the compute tear rather

00:04:32,759 --> 00:04:36,340
weapons services two-year process

00:04:34,690 --> 00:04:37,120
they're running on the JVM mostly it's

00:04:36,340 --> 00:04:38,830
Java code

00:04:37,120 --> 00:04:40,419
we've got standard kind of library

00:04:38,830 --> 00:04:41,889
dependencies spring and related projects

00:04:40,419 --> 00:04:45,130
and they're running on TC server which

00:04:41,889 --> 00:04:46,389
is a tomcat version of things we've got

00:04:45,130 --> 00:04:47,830
this set of common infrastructure

00:04:46,389 --> 00:04:51,250
services it's all the stuff you'd expect

00:04:47,830 --> 00:04:53,770
to behave the same across the system

00:04:51,250 --> 00:04:56,889
across those product Suites security

00:04:53,770 --> 00:04:58,780
configuration licensing controls those

00:04:56,889 --> 00:05:01,660
kind of things and our solutions and

00:04:58,780 --> 00:05:03,550
applications they deploy alongside those

00:05:01,660 --> 00:05:05,199
other pieces they're going to build

00:05:03,550 --> 00:05:06,970
their own domain services and then build

00:05:05,199 --> 00:05:08,770
user interfaces both on top of their

00:05:06,970 --> 00:05:11,860
domain and on top of our common

00:05:08,770 --> 00:05:14,080
infrastructure bits all of that sitting

00:05:11,860 --> 00:05:16,150
on top of the core of the SAS analytics

00:05:14,080 --> 00:05:17,889
value chain which is the compute tier

00:05:16,150 --> 00:05:21,760
and our analytics servers those are

00:05:17,889 --> 00:05:24,340
written mostly in C and C++ so for our

00:05:21,760 --> 00:05:26,830
investigation of table foundry we've got

00:05:24,340 --> 00:05:28,810
to both port our applications there and

00:05:26,830 --> 00:05:30,880
make these analytic pieces readily

00:05:28,810 --> 00:05:33,610
available to them once they're running

00:05:30,880 --> 00:05:35,410
in that environment so with that

00:05:33,610 --> 00:05:38,500
background let's talk about what drove

00:05:35,410 --> 00:05:40,289
SAS to look at Cloud Foundry my group

00:05:38,500 --> 00:05:42,940
the technology office we try to tie

00:05:40,289 --> 00:05:44,440
business drivers and quality attributes

00:05:42,940 --> 00:05:47,020
of the software we want access to the

00:05:44,440 --> 00:05:48,430
work of the R&D organization stuff can

00:05:47,020 --> 00:05:49,870
start off as you're chasing this shiny

00:05:48,430 --> 00:05:52,440
technical object but it needs to feed

00:05:49,870 --> 00:05:54,539
back in to the business at some point

00:05:52,440 --> 00:05:56,349
Cloud Foundry has some obvious ones

00:05:54,539 --> 00:05:57,870
clouds right there in the name most

00:05:56,349 --> 00:06:01,780
vendors do they have some sort of cloud

00:05:57,870 --> 00:06:03,580
story and Cloud Foundry supports a lot

00:06:01,780 --> 00:06:05,860
of the quality attributes we want the

00:06:03,580 --> 00:06:07,300
scalability availability reliability

00:06:05,860 --> 00:06:08,820
those kind of things they're all the

00:06:07,300 --> 00:06:10,870
things we want our applications to do

00:06:08,820 --> 00:06:11,860
there's one a little bit Mazin beneath

00:06:10,870 --> 00:06:13,659
the service or at least is beneath the

00:06:11,860 --> 00:06:15,940
surface a little bit to me and that's a

00:06:13,659 --> 00:06:17,830
need for developers to have a good

00:06:15,940 --> 00:06:21,220
developer experience enable developers

00:06:17,830 --> 00:06:23,710
to write code with SAS SAS started as a

00:06:21,220 --> 00:06:26,169
programming language many years ago

00:06:23,710 --> 00:06:28,330
right and for a long time that was the

00:06:26,169 --> 00:06:30,729
interface to SAS and to those analytics

00:06:28,330 --> 00:06:32,620
was people writing SAS code we've

00:06:30,729 --> 00:06:35,289
evolved over time and have modern user

00:06:32,620 --> 00:06:36,729
interfaces but the core of that value is

00:06:35,289 --> 00:06:38,650
still in the language and still in those

00:06:36,729 --> 00:06:39,760
back in analytics servers most of our

00:06:38,650 --> 00:06:43,240
solutions and applications

00:06:39,760 --> 00:06:46,660
on top they're generating SAS code and

00:06:43,240 --> 00:06:49,150
sending it to that back-end for SAS

00:06:46,660 --> 00:06:52,360
today developers are a force multiplier

00:06:49,150 --> 00:06:53,530
for our software it's great they were

00:06:52,360 --> 00:06:55,750
able to ship these modern user

00:06:53,530 --> 00:06:58,510
interfaces and have users get access to

00:06:55,750 --> 00:07:00,640
results without having to write code but

00:06:58,510 --> 00:07:01,900
it can truly show value when we get

00:07:00,640 --> 00:07:03,670
embedded in other parts of the

00:07:01,900 --> 00:07:05,800
organization and there's no SAS user

00:07:03,670 --> 00:07:07,360
interface insight where the processes

00:07:05,800 --> 00:07:10,240
are coming through our systems as well

00:07:07,360 --> 00:07:12,040
in the past people have extended SAS

00:07:10,240 --> 00:07:15,610
solutions by writing SAS code and we

00:07:12,040 --> 00:07:18,670
still want that today but more and more

00:07:15,610 --> 00:07:20,700
we're seeing a need for access to these

00:07:18,670 --> 00:07:23,050
analytic services from other platforms

00:07:20,700 --> 00:07:26,290
and that's part of what baha'i is behind

00:07:23,050 --> 00:07:28,090
the drive for api's and for our

00:07:26,290 --> 00:07:29,710
analytics part of what's behind the

00:07:28,090 --> 00:07:33,220
investigation of development platforms

00:07:29,710 --> 00:07:35,860
like Cloud Foundry one other thing we're

00:07:33,220 --> 00:07:37,780
interested in is this notion of

00:07:35,860 --> 00:07:41,080
architectural hoisting that a rising

00:07:37,780 --> 00:07:42,940
tide of common architecture and common

00:07:41,080 --> 00:07:44,860
components can lift all boats right

00:07:42,940 --> 00:07:46,780
bring all of our solutions up to a

00:07:44,860 --> 00:07:48,580
common level on the water we do that

00:07:46,780 --> 00:07:50,290
today with some things we have have a

00:07:48,580 --> 00:07:53,440
log on application that's a single point

00:07:50,290 --> 00:07:55,330
for customers to plug in their single

00:07:53,440 --> 00:07:57,190
sign-on providers there's a single way

00:07:55,330 --> 00:07:59,230
for web applications Athene themselves

00:07:57,190 --> 00:08:01,240
there's a single library for people to

00:07:59,230 --> 00:08:03,850
get connections to our analytics servers

00:08:01,240 --> 00:08:06,010
and Cloud Foundry has some of those same

00:08:03,850 --> 00:08:07,870
capabilities if I push the app there I

00:08:06,010 --> 00:08:09,970
can scale it with Cloud Foundry if I

00:08:07,870 --> 00:08:11,110
push an app there the Health Manager

00:08:09,970 --> 00:08:12,790
it's going to watch that and make sure

00:08:11,110 --> 00:08:15,940
it's reliable and available like I want

00:08:12,790 --> 00:08:17,230
it to be maybe the most important part

00:08:15,940 --> 00:08:18,670
of the architectural hoisting we have at

00:08:17,230 --> 00:08:21,070
SAS is what I talked about earlier that

00:08:18,670 --> 00:08:22,810
multi vendor architecture it's been the

00:08:21,070 --> 00:08:24,910
core of SAS to success for a long time

00:08:22,810 --> 00:08:26,950
this ability to easily move our

00:08:24,910 --> 00:08:28,990
analytics engine across whatever

00:08:26,950 --> 00:08:31,660
operating systems the customers were

00:08:28,990 --> 00:08:32,740
interested in but we're seeing that

00:08:31,660 --> 00:08:34,120
story started to change a little bit

00:08:32,740 --> 00:08:35,680
there still are as an operating system

00:08:34,120 --> 00:08:37,479
of choice but more and more we're

00:08:35,680 --> 00:08:40,470
getting questions from customers about

00:08:37,479 --> 00:08:42,970
infrastructure as a service a choice and

00:08:40,470 --> 00:08:44,320
that's one place where Cloud Foundry and

00:08:42,970 --> 00:08:46,360
related projects like Bosch can

00:08:44,320 --> 00:08:50,520
dramatically waste our applications up

00:08:46,360 --> 00:08:50,520
because they have a lot of value there

00:08:50,930 --> 00:08:55,760
sass and my group that's technology

00:08:53,360 --> 00:08:58,070
office also has to consider our internal

00:08:55,760 --> 00:09:00,020
developer community there's about 2000

00:08:58,070 --> 00:09:01,910
of them or so and SAS has a pretty low

00:09:00,020 --> 00:09:03,770
ton of turnover rate so many of them

00:09:01,910 --> 00:09:06,440
have been here for a long time 20 plus

00:09:03,770 --> 00:09:08,270
years of the 38 SAS has been around they

00:09:06,440 --> 00:09:10,790
are the people who have been through the

00:09:08,270 --> 00:09:13,610
process before they've made those

00:09:10,790 --> 00:09:15,440
changes and so they know the effort it

00:09:13,610 --> 00:09:17,540
takes to take on new architectural

00:09:15,440 --> 00:09:20,240
styles and they can be sometimes leery

00:09:17,540 --> 00:09:21,680
of that it helps us and the technology

00:09:20,240 --> 00:09:24,200
office to be able to compare old and new

00:09:21,680 --> 00:09:26,420
and show how it's not quite as different

00:09:24,200 --> 00:09:27,830
as they might think so one thing we did

00:09:26,420 --> 00:09:29,630
when we started looking at Cloud Foundry

00:09:27,830 --> 00:09:32,500
was to look at the standard Cloud

00:09:29,630 --> 00:09:35,690
Foundry architecture piece picture and

00:09:32,500 --> 00:09:37,160
overlay current bits of the SAS platform

00:09:35,690 --> 00:09:39,020
on top of and see how well it kind of

00:09:37,160 --> 00:09:41,390
matches up there's lots of commonality

00:09:39,020 --> 00:09:43,130
SAS has it's logon application Cloud

00:09:41,390 --> 00:09:44,959
Foundry has the UA a component Cloud

00:09:43,130 --> 00:09:47,450
Foundry has his DEA pool for running

00:09:44,959 --> 00:09:49,010
applications and build PACs and such SAS

00:09:47,450 --> 00:09:52,550
has been managing its own TC server

00:09:49,010 --> 00:09:54,920
instances so with that we can kind of

00:09:52,550 --> 00:09:58,400
shift the conversation change the

00:09:54,920 --> 00:10:00,830
vernacular song and not have to create

00:09:58,400 --> 00:10:02,930
it out of whole cloth for our developer

00:10:00,830 --> 00:10:04,130
community with that baseline and purpose

00:10:02,930 --> 00:10:06,560
let's talk about what we actually did

00:10:04,130 --> 00:10:07,850
what projects we undertook we've been

00:10:06,560 --> 00:10:09,680
aware of Cloud Foundry for a while kind

00:10:07,850 --> 00:10:11,600
of watching and seeing what happened we

00:10:09,680 --> 00:10:13,100
actually started heavily investigating

00:10:11,600 --> 00:10:15,740
it more in January this year it's gone

00:10:13,100 --> 00:10:18,110
in fits and starts but if we go back to

00:10:15,740 --> 00:10:19,550
our architecture picture we actually

00:10:18,110 --> 00:10:21,100
chose to do first is to take a look at a

00:10:19,550 --> 00:10:23,420
product suite called visual analytics

00:10:21,100 --> 00:10:25,279
visual analytics is a set of products

00:10:23,420 --> 00:10:28,160
that's core to the BI the business

00:10:25,279 --> 00:10:30,890
intelligence part of SAS it deals with

00:10:28,160 --> 00:10:32,529
data visualization and reporting those

00:10:30,890 --> 00:10:36,410
kind of things

00:10:32,529 --> 00:10:39,320
VA is important because it's ships with

00:10:36,410 --> 00:10:41,720
a lot of other products so if VA is not

00:10:39,320 --> 00:10:42,950
running on Cloud Foundry those other

00:10:41,720 --> 00:10:45,950
products are not going to be able to run

00:10:42,950 --> 00:10:47,779
there either for this project we chose

00:10:45,950 --> 00:10:50,360
to concentrate just on moving those Java

00:10:47,779 --> 00:10:51,560
middle to your pieces over we they're

00:10:50,360 --> 00:10:53,750
going to be readily supported with a

00:10:51,560 --> 00:10:55,610
java build pack they use bits like

00:10:53,750 --> 00:10:56,750
spring that are well-known and supported

00:10:55,610 --> 00:10:59,980
so we're going to be able to find ample

00:10:56,750 --> 00:11:02,260
information and examples of what to do

00:10:59,980 --> 00:11:04,430
we still have to connect back to those

00:11:02,260 --> 00:11:06,260
analytics servers we still

00:11:04,430 --> 00:11:07,250
to connect back to the data sources so

00:11:06,260 --> 00:11:08,720
we're going to use the user provided

00:11:07,250 --> 00:11:11,060
service as part of this specific project

00:11:08,720 --> 00:11:12,860
so we can really focus fix the variables

00:11:11,060 --> 00:11:14,089
of what's going on and once we get

00:11:12,860 --> 00:11:16,339
another get this going we can always

00:11:14,089 --> 00:11:17,990
come back and and try something

00:11:16,339 --> 00:11:19,399
different part of the reason for that is

00:11:17,990 --> 00:11:21,020
that this takes about eight web

00:11:19,399 --> 00:11:22,760
applications to move right there's a lot

00:11:21,020 --> 00:11:25,010
of common infrastructure pieces plus the

00:11:22,760 --> 00:11:28,190
VA services plus those bi VA UI

00:11:25,010 --> 00:11:31,640
components most of the changes we found

00:11:28,190 --> 00:11:33,980
were related to our ownership of our TC

00:11:31,640 --> 00:11:35,870
server instances we created those guys

00:11:33,980 --> 00:11:38,839
we manage them we control them we

00:11:35,870 --> 00:11:40,880
configure them and so we could do things

00:11:38,839 --> 00:11:42,350
in there that because we're there by

00:11:40,880 --> 00:11:44,660
ourselves just like if you're living by

00:11:42,350 --> 00:11:46,850
yourself versus living with roommates or

00:11:44,660 --> 00:11:48,980
in somebody else's house so we found

00:11:46,850 --> 00:11:50,660
things like we had to take library

00:11:48,980 --> 00:11:52,130
dependencies that had moved up into the

00:11:50,660 --> 00:11:54,560
server Lib directory and move them back

00:11:52,130 --> 00:11:56,209
into our application we'd had J&I

00:11:54,560 --> 00:11:58,130
resources that we'd had on the server

00:11:56,209 --> 00:12:00,500
tree and we had to move that

00:11:58,130 --> 00:12:02,209
configuration back into our app we had

00:12:00,500 --> 00:12:04,550
some assumptions in our code there are

00:12:02,209 --> 00:12:05,450
places where he felt like our we assumed

00:12:04,550 --> 00:12:07,220
that there was going to be a servlet

00:12:05,450 --> 00:12:08,360
context path always available Cloud

00:12:07,220 --> 00:12:10,130
Foundry comes out-of-the-box it looks

00:12:08,360 --> 00:12:12,980
for so it has subdomains it's ready to

00:12:10,130 --> 00:12:14,660
account for those kind of things so a

00:12:12,980 --> 00:12:16,580
lot of it's about pulling inward making

00:12:14,660 --> 00:12:18,860
those applications more self-reliant

00:12:16,580 --> 00:12:21,260
making them fit better to that 12 factor

00:12:18,860 --> 00:12:22,850
model that's out there we did see other

00:12:21,260 --> 00:12:25,400
benefits besides just the cloud found

00:12:22,850 --> 00:12:27,500
ruins a lot of our applications are

00:12:25,400 --> 00:12:29,390
running on shared TC server instances

00:12:27,500 --> 00:12:31,940
today so we see some contention around

00:12:29,390 --> 00:12:33,680
things like transaction logs when those

00:12:31,940 --> 00:12:37,070
spread out across the isolated

00:12:33,680 --> 00:12:40,459
containers and Worden instances that

00:12:37,070 --> 00:12:42,740
contention goes away overall it took one

00:12:40,459 --> 00:12:44,120
person couple of weeks to do it once

00:12:42,740 --> 00:12:45,500
they got through a first couple of

00:12:44,120 --> 00:12:47,839
applications there's a lot of repetition

00:12:45,500 --> 00:12:50,810
there move these jars changes config and

00:12:47,839 --> 00:12:52,310
so on I think it can help inform our

00:12:50,810 --> 00:12:54,410
architecture even if we don't solely

00:12:52,310 --> 00:12:56,300
target Cloud Foundry in the future we

00:12:54,410 --> 00:12:58,130
still want a lot of these architectural

00:12:56,300 --> 00:13:00,170
qualities that were getting out of these

00:12:58,130 --> 00:13:01,820
changes but now we have something

00:13:00,170 --> 00:13:03,770
concrete we can kind of look at and do

00:13:01,820 --> 00:13:07,910
pros and cons of and consider moving

00:13:03,770 --> 00:13:10,070
forward so after visual analytics we

00:13:07,910 --> 00:13:12,110
wanted you to port another application

00:13:10,070 --> 00:13:13,220
developed by another group and see how

00:13:12,110 --> 00:13:16,040
that worked

00:13:13,220 --> 00:13:18,320
we chose SAS studio success 2d is an

00:13:16,040 --> 00:13:19,610
application that is a web based

00:13:18,320 --> 00:13:21,440
for the SAS programming language

00:13:19,610 --> 00:13:22,940
environment most of the time to this

00:13:21,440 --> 00:13:24,770
point it's been a rich client desktop

00:13:22,940 --> 00:13:27,080
application it's a little bit different

00:13:24,770 --> 00:13:29,840
from our typical solutions it can fit

00:13:27,080 --> 00:13:31,100
into that bigger picture before and then

00:13:29,840 --> 00:13:32,810
those customer IT environments but we

00:13:31,100 --> 00:13:34,370
also have a way to scale it down so that

00:13:32,810 --> 00:13:35,660
we can ship a small VM to a customer

00:13:34,370 --> 00:13:37,850
they can run it just there as a single

00:13:35,660 --> 00:13:40,220
user on their desktop it's got the same

00:13:37,850 --> 00:13:41,750
kind of components but there's fewer of

00:13:40,220 --> 00:13:44,000
them on a scale down so we have a

00:13:41,750 --> 00:13:46,340
smaller collapsed architecture which

00:13:44,000 --> 00:13:48,560
means now we can focus on Cloud Foundry

00:13:46,340 --> 00:13:50,510
integration and specifically creating a

00:13:48,560 --> 00:13:53,630
service broker instead of using user

00:13:50,510 --> 00:13:55,490
provided services for our stuff there's

00:13:53,630 --> 00:13:58,730
only one web application here the

00:13:55,490 --> 00:13:59,960
services and UI are co-located there but

00:13:58,730 --> 00:14:04,100
we're making the same types of changes

00:13:59,960 --> 00:14:05,570
with jars and config files as before the

00:14:04,100 --> 00:14:07,430
new bit is us writing that service

00:14:05,570 --> 00:14:09,080
broker for what is our SAS workspace

00:14:07,430 --> 00:14:10,460
server so the workspace server is the

00:14:09,080 --> 00:14:13,160
main way that as you're typing the code

00:14:10,460 --> 00:14:14,390
into that SAS studio instance it's

00:14:13,160 --> 00:14:15,830
submitting that back to the backend

00:14:14,390 --> 00:14:17,900
server to run and we call that the SAS

00:14:15,830 --> 00:14:21,170
workspace server where a job in spring

00:14:17,900 --> 00:14:22,550
shop we use the skeleton project that

00:14:21,170 --> 00:14:24,080
Steve Greenberg created and blogged

00:14:22,550 --> 00:14:26,000
about to do that and it led us again

00:14:24,080 --> 00:14:27,650
focus in on what are the requirements

00:14:26,000 --> 00:14:29,360
for a service broker creating a service

00:14:27,650 --> 00:14:31,460
instance binding those service instances

00:14:29,360 --> 00:14:33,860
listing service instances and not having

00:14:31,460 --> 00:14:36,320
to get so involved in the form of what

00:14:33,860 --> 00:14:39,890
restful method and end points and so on

00:14:36,320 --> 00:14:41,720
they were there took one person about a

00:14:39,890 --> 00:14:45,440
week to do that and pivot was able to

00:14:41,720 --> 00:14:47,600
use that to demo at sgf our user group

00:14:45,440 --> 00:14:49,100
conference SAS Global Forum so now they

00:14:47,600 --> 00:14:50,660
were down into the specifics a little

00:14:49,100 --> 00:14:52,400
bit I want to zoom out and talk about

00:14:50,660 --> 00:14:55,430
some of the larger takeaway SAS has from

00:14:52,400 --> 00:14:57,500
this the software has a lot of stuff

00:14:55,430 --> 00:14:58,970
right there's probably some places if

00:14:57,500 --> 00:15:00,560
you had a map of it where we'd see this

00:14:58,970 --> 00:15:03,380
ancient screed here be dragons you're

00:15:00,560 --> 00:15:04,550
afraid to kind of touch a little bit but

00:15:03,380 --> 00:15:05,840
some of the newer stuff was getting

00:15:04,550 --> 00:15:08,270
those same points we're finding that

00:15:05,840 --> 00:15:10,130
applications were getting too big taking

00:15:08,270 --> 00:15:11,690
too long was startup we're having to

00:15:10,130 --> 00:15:13,370
change memory settings to tune them just

00:15:11,690 --> 00:15:15,140
so right they were all telling us

00:15:13,370 --> 00:15:16,310
something we didn't always want to

00:15:15,140 --> 00:15:18,380
listen we didn't have to listen because

00:15:16,310 --> 00:15:20,150
we own more of the stack but the Cloud

00:15:18,380 --> 00:15:22,280
Foundry product forced us to listen or

00:15:20,150 --> 00:15:23,570
we're gonna lose benefits related to

00:15:22,280 --> 00:15:24,980
deployment Cloud Foundry we're got the

00:15:23,570 --> 00:15:27,260
customized Cloud Foundry we're gonna

00:15:24,980 --> 00:15:28,820
have to we weren't going to get the

00:15:27,260 --> 00:15:29,960
benefit of the auto scaling stuff is

00:15:28,820 --> 00:15:31,560
just coming out or we're gonna have to

00:15:29,960 --> 00:15:33,750
fork the Java build pack to control

00:15:31,560 --> 00:15:34,740
heuristics more closely and I don't want

00:15:33,750 --> 00:15:36,330
have to do that because I'm already

00:15:34,740 --> 00:15:38,880
doing that when I control TC server

00:15:36,330 --> 00:15:40,529
fully so I want to fit better into the

00:15:38,880 --> 00:15:43,980
platform than have to conform the

00:15:40,529 --> 00:15:46,620
platform around me the work we did

00:15:43,980 --> 00:15:48,810
hoisting helped out right as we said the

00:15:46,620 --> 00:15:50,550
process just fell in place we're able to

00:15:48,810 --> 00:15:54,089
redefine re implement that single

00:15:50,550 --> 00:15:56,010
interface and just use spring to inject

00:15:54,089 --> 00:15:57,690
the different version of that you spring

00:15:56,010 --> 00:15:59,850
beam definition profiles to easily

00:15:57,690 --> 00:16:01,920
switch out those and be able to have

00:15:59,850 --> 00:16:03,480
them side-by-side and just target the

00:16:01,920 --> 00:16:05,250
right thing with active profile what

00:16:03,480 --> 00:16:07,980
we're gonna find I think is that given

00:16:05,250 --> 00:16:10,500
drivers and quality attributes that push

00:16:07,980 --> 00:16:11,880
you towards something like boundary it

00:16:10,500 --> 00:16:14,460
could be an enforcer for the kind of

00:16:11,880 --> 00:16:17,130
behavior we want right it encourages

00:16:14,460 --> 00:16:18,839
those behaviors and applications that

00:16:17,130 --> 00:16:20,790
are deployed there they have the kind of

00:16:18,839 --> 00:16:23,010
qualities that make them readily

00:16:20,790 --> 00:16:24,690
deployable elsewhere as well we want

00:16:23,010 --> 00:16:26,370
things to be smaller and more focused

00:16:24,690 --> 00:16:28,589
they need to start quickly they need to

00:16:26,370 --> 00:16:29,760
be robust and non fragile right we want

00:16:28,589 --> 00:16:32,100
them to be self-sufficient

00:16:29,760 --> 00:16:34,110
to do their own system interrogation and

00:16:32,100 --> 00:16:36,600
initialization starting up and setting

00:16:34,110 --> 00:16:38,630
themselves up Cloud Foundry rewards that

00:16:36,600 --> 00:16:41,160
behavior that makes it a win for us

00:16:38,630 --> 00:16:43,020
using it it makes it a win for

00:16:41,160 --> 00:16:43,980
developers developing on that makes it a

00:16:43,020 --> 00:16:46,640
win for our customers ultimately

00:16:43,980 --> 00:16:49,020
deploying on it and I showed this slide

00:16:46,640 --> 00:16:50,010
internally getting feedback and some I

00:16:49,020 --> 00:16:53,070
said it wasn't much of an enforced

00:16:50,010 --> 00:16:55,170
occurs only one gun on the ship right

00:16:53,070 --> 00:16:56,700
and so I think that you're missing the

00:16:55,170 --> 00:16:59,460
guided cruise missiles that are beneath

00:16:56,700 --> 00:17:02,790
the deck probably and maybe that's an

00:16:59,460 --> 00:17:04,260
apt analogy that CF push and Bosh

00:17:02,790 --> 00:17:05,670
deploying these things look very simple

00:17:04,260 --> 00:17:08,189
but there's a lot of heavy armament

00:17:05,670 --> 00:17:12,600
they're making that stuff work in cloud

00:17:08,189 --> 00:17:15,120
foundry today so there's the projects

00:17:12,600 --> 00:17:16,640
we've done alright it's just a taste but

00:17:15,120 --> 00:17:19,110
where's it leaves to go next the

00:17:16,640 --> 00:17:20,640
near-term we're still in the

00:17:19,110 --> 00:17:22,110
investigation phase of this we ported

00:17:20,640 --> 00:17:23,910
those major applications we've seen what

00:17:22,110 --> 00:17:26,610
that takes we've got to learn how to

00:17:23,910 --> 00:17:27,630
apply those lessons across the rest of

00:17:26,610 --> 00:17:29,880
the product suite

00:17:27,630 --> 00:17:32,970
there's socialization that has to occur

00:17:29,880 --> 00:17:34,560
within SAS this these concepts are new

00:17:32,970 --> 00:17:36,300
to a lot of our developers and so we've

00:17:34,560 --> 00:17:38,280
got to get that across and we do that in

00:17:36,300 --> 00:17:40,200
the large by putting it in the trial

00:17:38,280 --> 00:17:42,660
ring on our enterprise technology radar

00:17:40,200 --> 00:17:44,100
and that can drive then some small

00:17:42,660 --> 00:17:44,510
discussions and lunch and learns and

00:17:44,100 --> 00:17:47,440
those kind of

00:17:44,510 --> 00:17:49,340
things for people from that information

00:17:47,440 --> 00:17:51,230
ultimately SAS has got to make a

00:17:49,340 --> 00:17:52,790
decision about what is it just ask what

00:17:51,230 --> 00:17:55,190
is Cloud Foundry is it going to be

00:17:52,790 --> 00:17:56,810
another platform that we support is it

00:17:55,190 --> 00:17:58,490
going to be the preferred platform for

00:17:56,810 --> 00:18:00,020
some of our stuff or is going to be the

00:17:58,490 --> 00:18:01,940
platform kind of like we heard last

00:18:00,020 --> 00:18:05,660
night some of those foundation panel

00:18:01,940 --> 00:18:07,040
discussions a lot of that puzzle for us

00:18:05,660 --> 00:18:09,560
is about making those analytics

00:18:07,040 --> 00:18:11,720
available inside Cloud Foundry and how

00:18:09,560 --> 00:18:14,000
readily we can get them deployed in this

00:18:11,720 --> 00:18:15,380
kind of environment so if we have

00:18:14,000 --> 00:18:17,930
positive decisions there's several

00:18:15,380 --> 00:18:19,340
natural jumping off points for SAS we

00:18:17,930 --> 00:18:21,140
have a cloud story it's called SAS cloud

00:18:19,340 --> 00:18:22,970
analytics we want to be able to sell

00:18:21,140 --> 00:18:25,250
that on our cloud software as a service

00:18:22,970 --> 00:18:26,420
to the customer we also want to be able

00:18:25,250 --> 00:18:28,100
to sell that as a private analytics

00:18:26,420 --> 00:18:29,540
customer comes and gets it deploys it on

00:18:28,100 --> 00:18:31,100
their infrastructure deploys on some

00:18:29,540 --> 00:18:33,470
public infrastructure they purchased

00:18:31,100 --> 00:18:35,240
we've tried some of that work it's not

00:18:33,470 --> 00:18:37,850
the most trivial thing to do to move it

00:18:35,240 --> 00:18:40,130
across everything like that so can Cloud

00:18:37,850 --> 00:18:44,690
Foundry emboss enable those deliveries

00:18:40,130 --> 00:18:46,130
in a more succinct and easy manner once

00:18:44,690 --> 00:18:47,900
it's running we talked about we want to

00:18:46,130 --> 00:18:51,290
enable developers to really extend the

00:18:47,900 --> 00:18:52,220
value of SAS drive up the value of the

00:18:51,290 --> 00:18:54,260
software in the return on the investment

00:18:52,220 --> 00:18:55,760
for the customer so what analytical

00:18:54,260 --> 00:18:57,080
services can we make available and

00:18:55,760 --> 00:18:58,850
somewhere like the services marketplace

00:18:57,080 --> 00:19:01,850
all right forecasting the ability to get

00:18:58,850 --> 00:19:03,500
the next five values or maybe just

00:19:01,850 --> 00:19:04,970
access to our workspace server so you

00:19:03,500 --> 00:19:06,800
can build your whole own Analects flow

00:19:04,970 --> 00:19:08,780
around the data you have access to any

00:19:06,800 --> 00:19:10,670
of the network analysis or model

00:19:08,780 --> 00:19:12,380
optimization stuff that's there right

00:19:10,670 --> 00:19:14,720
whatever we have what do we want to make

00:19:12,380 --> 00:19:16,430
available and finally I can get us on

00:19:14,720 --> 00:19:17,300
that panel found a foundational panel

00:19:16,430 --> 00:19:19,310
stuff

00:19:17,300 --> 00:19:21,350
can we take whole SAS products and just

00:19:19,310 --> 00:19:23,030
ship them as deployable units into cloud

00:19:21,350 --> 00:19:24,800
foundry write something like SAS

00:19:23,030 --> 00:19:26,810
customer intelligence have it show up as

00:19:24,800 --> 00:19:28,880
a tile in the dashboard of pivotal CF

00:19:26,810 --> 00:19:30,770
enter your prompt information just like

00:19:28,880 --> 00:19:32,870
you would for the elastic runtime click

00:19:30,770 --> 00:19:34,160
go all those virtual machines all those

00:19:32,870 --> 00:19:36,140
services all those apertures they're

00:19:34,160 --> 00:19:37,460
running for the customer and they can

00:19:36,140 --> 00:19:40,670
manage them just like they do all their

00:19:37,460 --> 00:19:42,710
other enterprise applications so that's

00:19:40,670 --> 00:19:44,540
the SAS case study I think there's a lot

00:19:42,710 --> 00:19:45,710
of opportunity there for SAS I hope

00:19:44,540 --> 00:19:46,820
maybe we're able to come back next year

00:19:45,710 --> 00:19:48,680
and talk about how we turn some of those

00:19:46,820 --> 00:19:50,660
might dues into what we actually did do

00:19:48,680 --> 00:19:52,180
but thanks for your time I hope you

00:19:50,660 --> 00:19:52,650
enjoy the rest of the conference

00:19:52,180 --> 00:19:55,660
[Music]

00:19:52,650 --> 00:19:58,939
[Applause]

00:19:55,660 --> 00:19:58,939

YouTube URL: https://www.youtube.com/watch?v=JMuJeyR-nQQ


