Title: IBM & Rackspace - Cloud Foundry and OpenStack (Cloud Foundry Summit 2014)
Publication date: 2014-07-29
Playlist: Cloud Foundry Summit 2014
Description: 
	Business track breakout session presented by Jason Anderson, Cloud Architect, IBM Cloud Labs; Egle Sigler, Principal Architect, Rackspace; Animesh Singh, Lead Architect and Strategist, IBM.
Captions: 
	00:00:00,930 --> 00:00:04,220
[Music]

00:00:08,450 --> 00:00:13,259
hello everyone

00:00:10,610 --> 00:00:15,929
thanks for joining my name is Annie

00:00:13,259 --> 00:00:18,630
mache and this is my colleague Jason

00:00:15,929 --> 00:00:21,660
Anderson we are part of IBM cloud team

00:00:18,630 --> 00:00:24,420
and we also have with us Atlas signal

00:00:21,660 --> 00:00:26,970
from Rackspace which is considered one

00:00:24,420 --> 00:00:30,359
of the cofounders of OpenStack along

00:00:26,970 --> 00:00:33,149
with NASA now today we are going to take

00:00:30,359 --> 00:00:35,280
you through a marriage and no prizes for

00:00:33,149 --> 00:00:39,329
guessing who are the two partners in

00:00:35,280 --> 00:00:42,450
this marriage OpenStack and cloud for

00:00:39,329 --> 00:00:46,410
Murray now what's the goal of this

00:00:42,450 --> 00:00:49,020
marriage we want this family to grow in

00:00:46,410 --> 00:00:52,469
other words we want to deploy lots and

00:00:49,020 --> 00:00:55,289
lots of applications now before I pass

00:00:52,469 --> 00:00:57,780
on to a Glee to introduce open tack to

00:00:55,289 --> 00:01:00,210
us I would like to know how many people

00:00:57,780 --> 00:01:06,090
here have either used or deployed

00:01:00,210 --> 00:01:07,830
OpenStack there's roughly around 25 30 %

00:01:06,090 --> 00:01:11,310
of the room how many people have

00:01:07,830 --> 00:01:13,799
actually heard about OpenStack great

00:01:11,310 --> 00:01:15,900
that's the reason you're here with that

00:01:13,799 --> 00:01:17,900
let me pass on to Ackley who is going to

00:01:15,900 --> 00:01:21,509
introduce OpenStack to us

00:01:17,900 --> 00:01:23,970
Thank You Animesh so it sounds like most

00:01:21,509 --> 00:01:26,970
of you have either heard or used

00:01:23,970 --> 00:01:28,799
OpenStack before which is good because

00:01:26,970 --> 00:01:30,600
if you haven't heard that means you have

00:01:28,799 --> 00:01:31,170
missed out on some great keynotes this

00:01:30,600 --> 00:01:36,200
morning

00:01:31,170 --> 00:01:39,990
so what is OpenStack OpenStack is really

00:01:36,200 --> 00:01:40,470
two things one is a very huge and

00:01:39,990 --> 00:01:44,729
thriving

00:01:40,470 --> 00:01:50,970
open-source community and also a very

00:01:44,729 --> 00:01:53,070
large open source cloud platform and you

00:01:50,970 --> 00:01:55,560
can think of it as infrastructure as a

00:01:53,070 --> 00:02:00,540
service for managing your compute

00:01:55,560 --> 00:02:03,240
storage and networking as anguishes

00:02:00,540 --> 00:02:06,810
mentioned OpenStack was founded by

00:02:03,240 --> 00:02:09,119
Rackspace and NASA in 2010 since then it

00:02:06,810 --> 00:02:11,610
has exploded into a huge global

00:02:09,119 --> 00:02:13,500
community and you can attend a doesn't

00:02:11,610 --> 00:02:16,110
matter where you live there's

00:02:13,500 --> 00:02:18,630
a mihrab group if there isn't you should

00:02:16,110 --> 00:02:22,020
start one so what is this OpenStack

00:02:18,630 --> 00:02:25,200
community since it was open-source it

00:02:22,020 --> 00:02:28,200
had it had over two thousand developers

00:02:25,200 --> 00:02:30,780
making close to 80 thousand commits I

00:02:28,200 --> 00:02:33,060
think Cloud Foundry is probably an even

00:02:30,780 --> 00:02:37,860
faster track when it comes to community

00:02:33,060 --> 00:02:40,230
adoption and number of commits OpenStack

00:02:37,860 --> 00:02:42,810
very much like cloud foundry is actually

00:02:40,230 --> 00:02:45,090
a collection of a lot of integrated

00:02:42,810 --> 00:02:49,680
projects I think right now there are 12

00:02:45,090 --> 00:02:53,400
or more official OpenStack projects and

00:02:49,680 --> 00:02:56,730
probably more being proposed every day

00:02:53,400 --> 00:02:58,980
I will not go over every single one of

00:02:56,730 --> 00:03:02,280
them since this is just a very brief

00:02:58,980 --> 00:03:06,930
intro I will go over the main ones the

00:03:02,280 --> 00:03:09,420
compute networking and storage OpenStack

00:03:06,930 --> 00:03:13,560
compute or Nova and if you use OpenStack

00:03:09,420 --> 00:03:16,110
you'll hear all of these code names all

00:03:13,560 --> 00:03:18,420
the time so learning OpenStack means

00:03:16,110 --> 00:03:21,390
also learning a whole new vocabulary so

00:03:18,420 --> 00:03:23,880
OpenStack compute or Nova is the brains

00:03:21,390 --> 00:03:26,820
of OpenStack is the controller it can be

00:03:23,880 --> 00:03:29,010
configured for high availability fault

00:03:26,820 --> 00:03:32,250
tolerance this is where your virtual

00:03:29,010 --> 00:03:35,130
machines get created now what do we do

00:03:32,250 --> 00:03:36,780
if you have virtual machines just having

00:03:35,130 --> 00:03:39,239
them is not enough you also need some

00:03:36,780 --> 00:03:42,450
networking so for that we are using

00:03:39,239 --> 00:03:43,799
Neutron or OpenStack networking Neutron

00:03:42,450 --> 00:03:45,810
is really your software-defined

00:03:43,799 --> 00:03:48,810
networking it's one of the more complex

00:03:45,810 --> 00:03:51,450
and powerful OpenStack systems and with

00:03:48,810 --> 00:03:54,870
it you can create and manage network

00:03:51,450 --> 00:03:59,070
subnets routers load balancers gateways

00:03:54,870 --> 00:04:01,830
floating IPs and more great so we have

00:03:59,070 --> 00:04:05,880
VMs we have networking what else do we

00:04:01,830 --> 00:04:09,690
need storage OpenStack has a few storage

00:04:05,880 --> 00:04:12,959
solutions where you were going to use

00:04:09,690 --> 00:04:15,239
cinder and you can think of cinder as

00:04:12,959 --> 00:04:18,299
attached storage it is great for

00:04:15,239 --> 00:04:20,849
performance sensitive scenarios you and

00:04:18,299 --> 00:04:26,350
you can do snapshots and all of that

00:04:20,849 --> 00:04:28,900
other great stuff OpenStack provides all

00:04:26,350 --> 00:04:31,900
functionality through api's and

00:04:28,900 --> 00:04:33,490
command-line clients if you're a user or

00:04:31,900 --> 00:04:36,400
administrator you probably don't want to

00:04:33,490 --> 00:04:37,990
be making API calls or even using the

00:04:36,400 --> 00:04:40,930
command line clients if you just want to

00:04:37,990 --> 00:04:42,970
do some quick tasks lucky for us

00:04:40,930 --> 00:04:46,330
OpenStack has a great dashboard it's

00:04:42,970 --> 00:04:48,430
called horizon and you can have multiple

00:04:46,330 --> 00:04:49,930
users with different permissions set up

00:04:48,430 --> 00:04:53,340
and whether your user or administrator

00:04:49,930 --> 00:04:56,440
you can perform different tasks for

00:04:53,340 --> 00:05:00,400
managing your nova instances which are

00:04:56,440 --> 00:05:04,720
VMs your networks through be a neutron

00:05:00,400 --> 00:05:07,950
or any of the multiple other OpenStack

00:05:04,720 --> 00:05:11,440
projects so as I mentioned before

00:05:07,950 --> 00:05:13,810
OpenStack has really it's just a

00:05:11,440 --> 00:05:15,730
collection of a lot of open source

00:05:13,810 --> 00:05:19,390
projects that are extremely well

00:05:15,730 --> 00:05:22,500
integrated if you think if if you have a

00:05:19,390 --> 00:05:24,670
need for something like databases or

00:05:22,500 --> 00:05:27,580
metrics or something else there are

00:05:24,670 --> 00:05:29,980
projects for all of those so if there

00:05:27,580 --> 00:05:32,290
isn't one you can propose a blueprint

00:05:29,980 --> 00:05:34,750
and hopefully see it in the next

00:05:32,290 --> 00:05:40,510
OpenStack release with that I'm going to

00:05:34,750 --> 00:05:42,340
head over back to Animesh thanks eglee

00:05:40,510 --> 00:05:46,300
well that's a great introduction to

00:05:42,340 --> 00:05:48,130
OpenStack as actly described Rackspace

00:05:46,300 --> 00:05:50,110
has contributed so much to the success

00:05:48,130 --> 00:05:52,960
of OpenStack foundation and similarly

00:05:50,110 --> 00:05:55,150
along with Rackspace IBM has been also

00:05:52,960 --> 00:05:58,290
committed to the success of OpenStack

00:05:55,150 --> 00:06:00,640
Foundation in the beginning of last year

00:05:58,290 --> 00:06:03,510
IBM announced that all our cloud

00:06:00,640 --> 00:06:06,070
products would be based off OpenStack

00:06:03,510 --> 00:06:09,280
iBM is one of the top three contributors

00:06:06,070 --> 00:06:12,550
in the OpenStack codebase and swirled

00:06:09,280 --> 00:06:14,530
IBM we have around 380 IBM errs who are

00:06:12,550 --> 00:06:19,390
actually working on OpenStack in

00:06:14,530 --> 00:06:21,610
different capacities so OpenStack is

00:06:19,390 --> 00:06:23,650
great and we need an equally strong

00:06:21,610 --> 00:06:26,770
technology in the platform as a service

00:06:23,650 --> 00:06:29,010
space so we started investigating and

00:06:26,770 --> 00:06:32,650
found cloud foundry to be a great fit

00:06:29,010 --> 00:06:35,500
why for exactly three reasons number one

00:06:32,650 --> 00:06:38,800
it's 100% open source like OpenStack

00:06:35,500 --> 00:06:40,630
which means no vendor lock is you can

00:06:38,800 --> 00:06:42,610
build tools and technologies

00:06:40,630 --> 00:06:46,420
around Cloud Foundry and easily pour

00:06:42,610 --> 00:06:48,030
them across number two it fits in the

00:06:46,420 --> 00:06:49,920
true paradigm and definition of

00:06:48,030 --> 00:06:52,000
platform-as-a-service

00:06:49,920 --> 00:06:53,830
developers go to Cloud Foundry with

00:06:52,000 --> 00:06:56,110
their code and it's smart enough to

00:06:53,830 --> 00:06:58,390
detect their runtimes you tell what

00:06:56,110 --> 00:07:02,200
services you need it will provision and

00:06:58,390 --> 00:07:04,750
bind them together and last but not the

00:07:02,200 --> 00:07:08,530
least it has a very strong and vibrant

00:07:04,750 --> 00:07:10,630
community more than 700 thousand lines

00:07:08,530 --> 00:07:13,000
of code have been written and more than

00:07:10,630 --> 00:07:14,920
1200 active developers have contributed

00:07:13,000 --> 00:07:18,040
code to the cloud for any community code

00:07:14,920 --> 00:07:19,930
base as you can see both IBM and

00:07:18,040 --> 00:07:22,960
Rackspace are platinum founding sponsors

00:07:19,930 --> 00:07:25,780
of the Cloud Foundry community within

00:07:22,960 --> 00:07:28,120
IBM we have around 40 to IBM s who are

00:07:25,780 --> 00:07:29,740
authorized to contribute code to cloud

00:07:28,120 --> 00:07:31,680
for Murray and we have contributed to

00:07:29,740 --> 00:07:35,650
many components like elastic runtimes

00:07:31,680 --> 00:07:37,540
epics Eclipse integration acceptor we

00:07:35,650 --> 00:07:39,340
have also open sourced many components

00:07:37,540 --> 00:07:43,420
for example WebSphere Liberty Java build

00:07:39,340 --> 00:07:50,020
pack or Agnon UI performance acceptance

00:07:43,420 --> 00:07:51,640
tests etc and on top of this we have

00:07:50,020 --> 00:07:54,970
built our platform as a service offering

00:07:51,640 --> 00:07:57,700
called IBM bluemix leveraging the cloud

00:07:54,970 --> 00:07:59,880
foundry codebase it allows developers to

00:07:57,700 --> 00:08:02,110
rapidly build manage and deploy apps

00:07:59,880 --> 00:08:06,400
while tapping into a growing ecosystem

00:08:02,110 --> 00:08:08,560
of services not only from IBM but from

00:08:06,400 --> 00:08:12,520
third-party service providers as well as

00:08:08,560 --> 00:08:15,160
from the open source community we have

00:08:12,520 --> 00:08:17,230
also integrated full DevOps lifecycle

00:08:15,160 --> 00:08:20,170
around it with eclipse and browser-based

00:08:17,230 --> 00:08:22,630
tools it's currently in open beta and

00:08:20,170 --> 00:08:27,970
you can actually go ahead and try it at

00:08:22,630 --> 00:08:31,030
bluemix.net so we have both OpenStack

00:08:27,970 --> 00:08:32,919
and Cloud Foundry identified now what

00:08:31,030 --> 00:08:36,219
brings them together how do they

00:08:32,919 --> 00:08:39,849
integrate in this case the integration

00:08:36,219 --> 00:08:41,979
is provided by Bosh what's Bosh it's a

00:08:39,849 --> 00:08:44,710
release deployment and lifecycle

00:08:41,979 --> 00:08:46,720
management tool for Cloud Foundry and it

00:08:44,710 --> 00:08:49,089
has cloud provider interfaces to deploy

00:08:46,720 --> 00:08:52,390
called foundry to different is providers

00:08:49,089 --> 00:08:54,610
like AWS OpenStack

00:08:52,390 --> 00:08:56,920
VMware and very recently

00:08:54,610 --> 00:08:58,930
compute engine no cloud for me also has

00:08:56,920 --> 00:09:01,000
certain requirements which need to be

00:08:58,930 --> 00:09:03,160
satisfied by the infrastructure as a

00:09:01,000 --> 00:09:06,190
service provider and in this case by

00:09:03,160 --> 00:09:07,570
OpenStack it needs support for starting

00:09:06,190 --> 00:09:10,090
a floating IPS for intervene

00:09:07,570 --> 00:09:12,340
communication it needs support for

00:09:10,090 --> 00:09:15,490
persistent disks so that application and

00:09:12,340 --> 00:09:17,470
runtime files could be stored custom VM

00:09:15,490 --> 00:09:18,970
configuration sizes need to be created

00:09:17,470 --> 00:09:21,160
for different components of Cloud

00:09:18,970 --> 00:09:24,940
Foundry like router cloud controller

00:09:21,160 --> 00:09:26,380
application nodes etc and there are

00:09:24,940 --> 00:09:28,000
specialized security groups which are

00:09:26,380 --> 00:09:30,970
needed to isolate management and

00:09:28,000 --> 00:09:33,010
application traffic OpenStack satisfies

00:09:30,970 --> 00:09:35,950
all of these requirements now let's take

00:09:33,010 --> 00:09:38,860
a brief over overview of how Bosh

00:09:35,950 --> 00:09:40,390
deploys Cloud Foundry so Bosh takes a

00:09:38,860 --> 00:09:42,730
release which is a collection of

00:09:40,390 --> 00:09:45,730
software packages for example post a

00:09:42,730 --> 00:09:48,790
sequel my sequel runtimes like Java and

00:09:45,730 --> 00:09:51,250
Ruby and then there are stem cells or

00:09:48,790 --> 00:09:53,460
base OS images files which Bosh converts

00:09:51,250 --> 00:09:56,170
into different VMs of Cloud Foundry

00:09:53,460 --> 00:09:58,960
trying all this together is the

00:09:56,170 --> 00:10:00,370
deployment manifest which not only has

00:09:58,960 --> 00:10:02,350
information about the release and the

00:10:00,370 --> 00:10:04,000
stem cells but also about the

00:10:02,350 --> 00:10:04,960
infrastructure is serviced where it is

00:10:04,000 --> 00:10:08,320
running what are the network

00:10:04,960 --> 00:10:11,470
characteristics etc Bosh takes all these

00:10:08,320 --> 00:10:16,450
together and deploys it in form of VMs

00:10:11,470 --> 00:10:18,160
on the infrastructure as a service so

00:10:16,450 --> 00:10:21,070
great we have both Cloud Foundry and

00:10:18,160 --> 00:10:24,340
OpenStack identified we know that they

00:10:21,070 --> 00:10:27,520
can integrate together but the install

00:10:24,340 --> 00:10:29,470
process itself can be complicated there

00:10:27,520 --> 00:10:31,690
are some manual steps involved and you

00:10:29,470 --> 00:10:36,190
need domain experts in OpenStack cloud

00:10:31,690 --> 00:10:41,020
foundry Bosh to actually automate all

00:10:36,190 --> 00:10:42,820
that and not only that in our experience

00:10:41,020 --> 00:10:44,770
it used to take us anywhere between days

00:10:42,820 --> 00:10:46,390
to weeks to actually get an OpenStack

00:10:44,770 --> 00:10:49,750
and Cloud Foundry environment up and

00:10:46,390 --> 00:10:52,840
running and to end now we discussed that

00:10:49,750 --> 00:10:56,350
both OpenStack and cloud foundry have a

00:10:52,840 --> 00:10:58,450
very vibrant ecosystem and community now

00:10:56,350 --> 00:11:00,430
let's see some of the examples how we

00:10:58,450 --> 00:11:03,010
can leverage into the power of this

00:11:00,430 --> 00:11:05,620
community and the technology is being

00:11:03,010 --> 00:11:08,500
built into it to actually go from a bare

00:11:05,620 --> 00:11:14,740
metal hardware to a running crowd for

00:11:08,500 --> 00:11:16,780
which is ready to push apps for the

00:11:14,740 --> 00:11:18,400
first example let's see how we can

00:11:16,780 --> 00:11:21,420
actually automate the installation of

00:11:18,400 --> 00:11:24,730
OpenStack itself within 45 minutes flat

00:11:21,420 --> 00:11:27,190
well as I mentioned OpenStack has a very

00:11:24,730 --> 00:11:29,500
strong and vibrant community and tools

00:11:27,190 --> 00:11:31,560
like chef have been written an open

00:11:29,500 --> 00:11:34,840
source which can be leveraged for this

00:11:31,560 --> 00:11:37,660
for those new to chef chef is the cloud

00:11:34,840 --> 00:11:39,430
infrastructure automation framework that

00:11:37,660 --> 00:11:43,690
relies on Ruby based cookbooks and

00:11:39,430 --> 00:11:46,420
recipes you need to tell chef where your

00:11:43,690 --> 00:11:48,400
hardware is the network information and

00:11:46,420 --> 00:11:51,670
repositories where the files are stored

00:11:48,400 --> 00:11:53,560
which need to be installed and it will

00:11:51,670 --> 00:11:55,690
go ahead and configure the controller

00:11:53,560 --> 00:11:57,820
and the compute nodes for you it will

00:11:55,690 --> 00:12:00,790
also configure the complex OpenStack

00:11:57,820 --> 00:12:04,840
Network and also set up blog as well as

00:12:00,790 --> 00:12:06,520
file based storage for you now let's

00:12:04,840 --> 00:12:09,430
take a look at our second example

00:12:06,520 --> 00:12:11,050
so OpenStack is up and running we need

00:12:09,430 --> 00:12:13,840
to discover a lot of this information

00:12:11,050 --> 00:12:15,220
from OpenStack why it is needed as I

00:12:13,840 --> 00:12:18,010
said to prepare for Cloud Foundry

00:12:15,220 --> 00:12:19,840
deployment we need to collect all this

00:12:18,010 --> 00:12:22,060
information in terms of where OpenStack

00:12:19,840 --> 00:12:25,300
is running what are the network settings

00:12:22,060 --> 00:12:28,270
etc for this we can actually leverage

00:12:25,300 --> 00:12:30,670
the open source for Ruby cloud services

00:12:28,270 --> 00:12:33,970
library which can allow us to discover a

00:12:30,670 --> 00:12:36,760
lot of this information now what hole

00:12:33,970 --> 00:12:39,790
can we discover we can discover a lot of

00:12:36,760 --> 00:12:42,730
things like security credentials custom

00:12:39,790 --> 00:12:45,850
configuration sizes Network related

00:12:42,730 --> 00:12:48,250
information like Network subnets network

00:12:45,850 --> 00:12:50,620
security rules and typical things like

00:12:48,250 --> 00:12:53,110
IP addresses of your DNS DHCP gateways

00:12:50,620 --> 00:12:55,330
acceptor so great way to collect that

00:12:53,110 --> 00:12:58,030
information in an automated fashion not

00:12:55,330 --> 00:13:00,730
only this we can also leverage the same

00:12:58,030 --> 00:13:02,260
for gem to actually create a lot of

00:13:00,730 --> 00:13:05,320
cloud for new requirements which are

00:13:02,260 --> 00:13:06,970
needed from OpenStack as I mentioned 12

00:13:05,320 --> 00:13:08,800
only requires support for static of

00:13:06,970 --> 00:13:11,200
floating IDs except Network

00:13:08,800 --> 00:13:14,140
configurations which could be done using

00:13:11,200 --> 00:13:16,570
the same fog library so for example you

00:13:14,140 --> 00:13:19,150
can create security credentials you can

00:13:16,570 --> 00:13:20,470
create custom VM configurations for

00:13:19,150 --> 00:13:22,329
different components of Cloud Foundry

00:13:20,470 --> 00:13:25,509
for routers

00:13:22,329 --> 00:13:28,959
Rollers application nodes etc you can

00:13:25,509 --> 00:13:31,230
create network security rules so after

00:13:28,959 --> 00:13:34,989
you have completed this discovery and

00:13:31,230 --> 00:13:36,730
setup using form you will just need a

00:13:34,989 --> 00:13:39,160
couple of fields actually to deploy code

00:13:36,730 --> 00:13:42,519
for it for example you'll need to tell

00:13:39,160 --> 00:13:46,779
how many application nodes I want what's

00:13:42,519 --> 00:13:51,970
the domain name of my application so

00:13:46,779 --> 00:13:53,499
that's great automation here finally

00:13:51,970 --> 00:13:56,049
let's take a look at our third example

00:13:53,499 --> 00:13:58,889
where we can actually automate a lot of

00:13:56,049 --> 00:14:01,929
the Boche deployment process itself

00:13:58,889 --> 00:14:03,309
now before Bosh actually deploys cloud

00:14:01,929 --> 00:14:06,489
for me there are a couple of steps which

00:14:03,309 --> 00:14:08,350
need to be performed for example the

00:14:06,489 --> 00:14:10,839
base OS images or the stem cells they

00:14:08,350 --> 00:14:12,489
need to be modified or created and we

00:14:10,839 --> 00:14:14,470
can actually leverage the community for

00:14:12,489 --> 00:14:17,739
a lot of Ruby based scripts which exists

00:14:14,470 --> 00:14:19,509
for this also we need to generate this

00:14:17,739 --> 00:14:22,569
cloud for any deployment manifest file

00:14:19,509 --> 00:14:24,399
as I said those deployment manifest

00:14:22,569 --> 00:14:26,079
files could be complicated and run into

00:14:24,399 --> 00:14:29,949
thousands of lines if we can automate

00:14:26,079 --> 00:14:31,809
that piece that is a huge gain we can

00:14:29,949 --> 00:14:33,040
actually leverage Ruby ERP templating

00:14:31,809 --> 00:14:34,989
mechanism and there are other

00:14:33,040 --> 00:14:36,759
technologies as well to actually

00:14:34,989 --> 00:14:41,110
automate that California deployment

00:14:36,759 --> 00:14:42,579
manifest generation and finally a large

00:14:41,110 --> 00:14:45,970
part of the boss deployment process

00:14:42,579 --> 00:14:51,009
itself in terms of uploading a stem-cell

00:14:45,970 --> 00:14:53,019
file deploying micro Bosh Bosh uploading

00:14:51,009 --> 00:14:55,629
the Cloud Foundry core services and

00:14:53,019 --> 00:14:57,759
runtime releases as well as finally the

00:14:55,629 --> 00:15:03,999
point Cloud Foundry could be automated

00:14:57,759 --> 00:15:07,360
and leveraged so what we just discussed

00:15:03,999 --> 00:15:10,179
is that tapping into this powerful open

00:15:07,360 --> 00:15:12,639
source community we can automate this

00:15:10,179 --> 00:15:15,129
whole end-to-end deployment of cloud for

00:15:12,639 --> 00:15:17,439
me and OpenStack together and get

00:15:15,129 --> 00:15:20,139
repeated and consistent deployments in

00:15:17,439 --> 00:15:24,399
under three hours by leveraging tools

00:15:20,139 --> 00:15:26,259
like chef for Bosch Ruby and others this

00:15:24,399 --> 00:15:29,350
is a huge gain in automation which could

00:15:26,259 --> 00:15:30,490
ever have and you can also combine them

00:15:29,350 --> 00:15:32,470
in different permutations and

00:15:30,490 --> 00:15:34,389
combinations for example you could

00:15:32,470 --> 00:15:36,310
deploy both OpenStack and cloud form you

00:15:34,389 --> 00:15:38,170
together in one go

00:15:36,310 --> 00:15:43,840
or you could deploy cloud foundry on

00:15:38,170 --> 00:15:47,110
existing OpenStack environments so great

00:15:43,840 --> 00:15:49,690
we identified both OpenStack as well as

00:15:47,110 --> 00:15:52,420
Cloud Foundry how do they integrate how

00:15:49,690 --> 00:15:55,570
can we automate that integration so the

00:15:52,420 --> 00:15:58,540
marriage is complete right but what was

00:15:55,570 --> 00:16:00,880
the goal of this marriage to deploy lots

00:15:58,540 --> 00:16:04,300
and lots of applications in other words

00:16:00,880 --> 00:16:06,340
to scale with this I will pass on to my

00:16:04,300 --> 00:16:08,500
colleague Jason Aniston to actually

00:16:06,340 --> 00:16:19,780
describe how we can scale cloud foundry

00:16:08,500 --> 00:16:22,750
and OpenStack together of deploying lots

00:16:19,780 --> 00:16:26,860
and lots of applications so what we do

00:16:22,750 --> 00:16:29,440
is partnership this cloud fan don't we

00:16:26,860 --> 00:16:32,260
stack partnership so why do we need to

00:16:29,440 --> 00:16:34,630
scale first of all so number one Cloud

00:16:32,260 --> 00:16:36,280
Foundry as a technology and as a

00:16:34,630 --> 00:16:38,020
community has been drawing year-to-year

00:16:36,280 --> 00:16:40,330
all you have to do is look at the

00:16:38,020 --> 00:16:42,280
conference turnout from this year to the

00:16:40,330 --> 00:16:45,400
prior year you can see the community is

00:16:42,280 --> 00:16:48,550
growing and not only that but Cloud

00:16:45,400 --> 00:16:50,740
Foundry really is matched for these born

00:16:48,550 --> 00:16:52,839
on the web type of applications that

00:16:50,740 --> 00:16:55,210
have social and mobile components which

00:16:52,839 --> 00:16:57,430
have really peaky bursty network usage

00:16:55,210 --> 00:16:58,810
so what we need to do is have an

00:16:57,430 --> 00:17:01,000
infrastructure that can handle that

00:16:58,810 --> 00:17:03,460
usage pattern and we also need the

00:17:01,000 --> 00:17:06,250
underlying infrastructure OpenStack to

00:17:03,460 --> 00:17:08,560
be able to scale in turn so bottom line

00:17:06,250 --> 00:17:12,310
is we need Cloud Foundry and OpenStack

00:17:08,560 --> 00:17:13,930
to scale so what's the first thing you

00:17:12,310 --> 00:17:15,910
do when you start planning your family

00:17:13,930 --> 00:17:19,420
and you want to grow well you need to

00:17:15,910 --> 00:17:22,839
put a budget so here you have our sizing

00:17:19,420 --> 00:17:25,089
that we did chill Cloud Foundry on our

00:17:22,839 --> 00:17:27,160
OpenStack and Cloud Foundry environment

00:17:25,089 --> 00:17:28,930
you can see here the configuration of

00:17:27,160 --> 00:17:31,180
Cloud Foundry and how many das we

00:17:28,930 --> 00:17:32,830
decided we needed and this is really for

00:17:31,180 --> 00:17:34,480
a our first attempt at a large

00:17:32,830 --> 00:17:37,150
environment of a thousand small

00:17:34,480 --> 00:17:39,820
applications so we came up at the bottom

00:17:37,150 --> 00:17:41,440
here with the required resources that

00:17:39,820 --> 00:17:44,290
we'd need to put this environment into

00:17:41,440 --> 00:17:46,210
place so we have our sizing and we

00:17:44,290 --> 00:17:49,030
started going along and deploying Cloud

00:17:46,210 --> 00:17:49,330
Foundry deploying OpenStack and we ran

00:17:49,030 --> 00:17:51,669
into

00:17:49,330 --> 00:17:56,440
you a number of configurations that we

00:17:51,669 --> 00:18:00,039
had to do and clawed back so let's first

00:17:56,440 --> 00:18:03,750
take a look at the OpenStack side so

00:18:00,039 --> 00:18:06,909
first is any you need a good internal

00:18:03,750 --> 00:18:08,919
management for communicating between the

00:18:06,909 --> 00:18:11,110
different components and so this

00:18:08,919 --> 00:18:16,450
internal communication has to be

00:18:11,110 --> 00:18:18,640
configured the bus the so let's look

00:18:16,450 --> 00:18:21,429
again now at the second point which is

00:18:18,640 --> 00:18:23,350
optimal performance in order to do that

00:18:21,429 --> 00:18:26,830
we tell OpenStack to use a particular

00:18:23,350 --> 00:18:29,940
scheduler that ensures distributed VMs

00:18:26,830 --> 00:18:32,350
for Cloud Foundry to use and then lastly

00:18:29,940 --> 00:18:34,330
eglee mention that OpenStack one of its

00:18:32,350 --> 00:18:36,669
great points is that it's componentized

00:18:34,330 --> 00:18:38,789
and you can scale each of the components

00:18:36,669 --> 00:18:42,429
individually and you can customize it

00:18:38,789 --> 00:18:43,809
workload as I mentioned OpenStack is

00:18:42,429 --> 00:18:45,220
open-source there's a lot of other

00:18:43,809 --> 00:18:47,080
technologies we can leverage in the

00:18:45,220 --> 00:18:48,880
open-source community like nginx and

00:18:47,080 --> 00:18:50,289
we've put together our team here an

00:18:48,880 --> 00:18:52,779
architecture that we presented at the

00:18:50,289 --> 00:18:54,190
OpenStack summit of how to stand up an

00:18:52,779 --> 00:18:56,350
OpenStack environment that's highly

00:18:54,190 --> 00:18:58,870
scalable and works specifically for our

00:18:56,350 --> 00:19:00,370
workload of Cloud Foundry and we have a

00:18:58,870 --> 00:19:02,710
link in the back of the presentation

00:19:00,370 --> 00:19:07,840
where you can go and look at that H a

00:19:02,710 --> 00:19:09,730
configuration great so we've looked at

00:19:07,840 --> 00:19:11,679
how to scale OpenStack on the Cloud

00:19:09,730 --> 00:19:13,630
Foundry skyed what do we have to scale

00:19:11,679 --> 00:19:16,659
or be aware of when we're scaling up the

00:19:13,630 --> 00:19:17,860
Cloud Foundry environment so first when

00:19:16,659 --> 00:19:20,500
you again need to look at internal

00:19:17,860 --> 00:19:22,000
communication so all of these default

00:19:20,500 --> 00:19:23,740
config files are meant for small

00:19:22,000 --> 00:19:25,360
environments so you stand them up you

00:19:23,740 --> 00:19:26,950
test them out but we're starting to look

00:19:25,360 --> 00:19:28,889
at scale you have to go in and change

00:19:26,950 --> 00:19:31,029
these parameters to ensure that

00:19:28,889 --> 00:19:34,330
communication for the internal system

00:19:31,029 --> 00:19:35,620
works correctly again you want to make

00:19:34,330 --> 00:19:38,590
sure that your users of Cloud Foundry

00:19:35,620 --> 00:19:40,120
have a great user experience and one way

00:19:38,590 --> 00:19:42,580
to guarantee that is to guarantee

00:19:40,120 --> 00:19:44,950
network bandwidth for particular parts

00:19:42,580 --> 00:19:46,809
of Cloud Foundry so what we found if you

00:19:44,950 --> 00:19:48,159
create separate networks for us for

00:19:46,809 --> 00:19:50,230
instance your services and your cloud

00:19:48,159 --> 00:19:53,500
forum foundry core components you can

00:19:50,230 --> 00:19:55,210
guarantee network bandwidth network

00:19:53,500 --> 00:19:56,649
bandwidth for each of those sets of

00:19:55,210 --> 00:19:59,139
components which helps with the user

00:19:56,649 --> 00:19:59,710
experience and then finally Cloud

00:19:59,139 --> 00:20:02,020
Foundry

00:19:59,710 --> 00:20:03,040
as an open technology already has a

00:20:02,020 --> 00:20:05,410
great are

00:20:03,040 --> 00:20:07,390
Oh texture for high-availability each of

00:20:05,410 --> 00:20:09,610
the individual components are meant to

00:20:07,390 --> 00:20:12,010
be scaled out and so we don't have to do

00:20:09,610 --> 00:20:14,140
any extra work here besides size the

00:20:12,010 --> 00:20:16,060
size the environments for a particular

00:20:14,140 --> 00:20:17,620
workload we want to have high memory

00:20:16,060 --> 00:20:19,720
applications we want to make sure our

00:20:17,620 --> 00:20:23,230
das are sized accordingly

00:20:19,720 --> 00:20:25,470
for instance great so now we know Cloud

00:20:23,230 --> 00:20:27,940
Foundry said how to scale it OpenStack

00:20:25,470 --> 00:20:30,280
site how to scale it we put all these

00:20:27,940 --> 00:20:31,660
together with the automation that Animus

00:20:30,280 --> 00:20:35,710
was talking about and we have a working

00:20:31,660 --> 00:20:37,510
system so with this presentation

00:20:35,710 --> 00:20:40,300
whatever really cover the three main

00:20:37,510 --> 00:20:42,460
takeaways so one Cloud Foundry and

00:20:40,300 --> 00:20:44,800
OpenStack is in a hundred percent open

00:20:42,460 --> 00:20:47,080
solution so that means no vendor lock-in

00:20:44,800 --> 00:20:50,710
plus the communities are growing and

00:20:47,080 --> 00:20:52,660
they have large industry support next we

00:20:50,710 --> 00:20:57,280
can further leverage that open community

00:20:52,660 --> 00:20:59,620
in order to put together a essentially

00:20:57,280 --> 00:21:01,780
an automated framework so if we can use

00:20:59,620 --> 00:21:03,220
fog we can use Bosh all these

00:21:01,780 --> 00:21:06,240
technologies to automate this process

00:21:03,220 --> 00:21:09,160
and make it easier and then lastly

00:21:06,240 --> 00:21:12,280
OpenStack meets all the I's requirements

00:21:09,160 --> 00:21:13,780
for Cloud Foundry and not only that but

00:21:12,280 --> 00:21:15,400
Cloud Foundry and OpenStack can scale

00:21:13,780 --> 00:21:17,310
together which provides a great

00:21:15,400 --> 00:21:20,580
environment and user experience as a

00:21:17,310 --> 00:21:23,860
company or as a user base starts to grow

00:21:20,580 --> 00:21:26,170
so the bottom line is that Cloud Foundry

00:21:23,860 --> 00:21:29,620
and OpenStack is indeed a match made in

00:21:26,170 --> 00:21:32,920
heaven but wait we'd like to grow the

00:21:29,620 --> 00:21:35,530
family even more so we're co-hosting

00:21:32,920 --> 00:21:37,630
some Silicon Valley meetups so one for

00:21:35,530 --> 00:21:38,920
Cloud Foundry one for bluemix that we'd

00:21:37,630 --> 00:21:41,020
love to have you if you're in the Bay

00:21:38,920 --> 00:21:43,540
Area so there's a links there if you

00:21:41,020 --> 00:21:46,050
want to sign up we'll be there and hope

00:21:43,540 --> 00:21:46,050
to see you as well

00:21:50,960 --> 00:21:54,919
all righty with that we'd like to ask if

00:21:53,190 --> 00:22:01,289
there's any questions in the audience

00:21:54,919 --> 00:22:03,059
yes yeah so actually it may be so that

00:22:01,289 --> 00:22:05,039
that's actually a fairly recent

00:22:03,059 --> 00:22:07,650
development where they have ability for

00:22:05,039 --> 00:22:10,020
co-locating and setting that up I know

00:22:07,650 --> 00:22:11,789
people are saying is it Bosch when it

00:22:10,020 --> 00:22:22,500
goes to request VMS and starts turning

00:22:11,789 --> 00:22:24,809
those identities so perhaps we can write

00:22:22,500 --> 00:22:27,750
so as Bosch doesn't take advantage of

00:22:24,809 --> 00:22:29,730
scheduler hints at that level is also a

00:22:27,750 --> 00:22:32,490
problem so I know that's that's kind of

00:22:29,730 --> 00:22:34,860
been addressed but because essentially

00:22:32,490 --> 00:22:36,720
Bosch puts the VM out there or Cloud

00:22:34,860 --> 00:22:38,789
Foundry stands up all or open sex ends

00:22:36,720 --> 00:22:40,919
up these VMs and then Bosch turns those

00:22:38,789 --> 00:22:43,230
VMs into something so Bosch needs to be

00:22:40,919 --> 00:22:44,460
aware that these two VMs are located on

00:22:43,230 --> 00:22:46,650
different hosts and therefore I can

00:22:44,460 --> 00:22:50,130
safely put to cloud controllers and

00:22:46,650 --> 00:22:51,299
therefore the H a is maintained so

00:22:50,130 --> 00:22:52,559
that's something I mean we can talk

00:22:51,299 --> 00:22:54,600
offline a little more about that too

00:22:52,559 --> 00:22:56,610
right so we're using vanilla we haven't

00:22:54,600 --> 00:22:58,260
changed any of the scheduler and we we

00:22:56,610 --> 00:23:00,720
have this problem of the affinity at

00:22:58,260 --> 00:23:02,610
this point so we're looking to try to

00:23:00,720 --> 00:23:03,480
fix that in some of our next attempts at

00:23:02,610 --> 00:23:05,880
environments yes

00:23:03,480 --> 00:23:07,799
so great thanks all for joining and you

00:23:05,880 --> 00:23:09,990
can find the slides here

00:23:07,799 --> 00:23:11,909
they're already posted and if you need

00:23:09,990 --> 00:23:14,280
more technical details about this we

00:23:11,909 --> 00:23:15,960
have our talk from the OpenStack summit

00:23:14,280 --> 00:23:17,860
which goes into a lot more technical

00:23:15,960 --> 00:23:21,150
details around this

00:23:17,860 --> 00:23:21,150

YouTube URL: https://www.youtube.com/watch?v=RlMSaLSuMqQ


