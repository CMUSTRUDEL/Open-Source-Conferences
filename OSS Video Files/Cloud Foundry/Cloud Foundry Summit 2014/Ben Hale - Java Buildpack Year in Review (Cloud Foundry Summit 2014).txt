Title: Ben Hale - Java Buildpack Year in Review (Cloud Foundry Summit 2014)
Publication date: 2014-07-03
Playlist: Cloud Foundry Summit 2014
Description: 
	Ben Hale, Java Experience Lead, Cloud Foundry at Pivotal.

At the last Cloud Foundry conference, the Java Buildpack was introduced as the easiest way to run Java applications in the cloud. Since then the buildpack has only gotten better. Contributions from both Pivotal and the open source community have greatly enhanced the Cloud Foundry Java application experience. This talk explores the new application types that can be run and the new services we can integrate with. It also touches on HTTP session replication across instances and finally will touch on the packaged and offline buildpacks.
Captions: 
	00:00:00,000 --> 00:00:16,289
I am as as we said been Heil I am a

00:00:12,090 --> 00:00:19,859
pivotal employee one of the few Cloud

00:00:16,289 --> 00:00:21,539
Foundry developers that doesn't actually

00:00:19,859 --> 00:00:25,830
live here in San Francisco I live over

00:00:21,539 --> 00:00:27,750
in the UK so if it's already after

00:00:25,830 --> 00:00:29,750
lunchtime for the East Coast it must be

00:00:27,750 --> 00:00:34,860
about bedtime as far as I'm concerned

00:00:29,750 --> 00:00:36,180
and so as was said last year I talked a

00:00:34,860 --> 00:00:39,420
little bit about the Java build path

00:00:36,180 --> 00:00:41,430
because so many developers working

00:00:39,420 --> 00:00:44,510
against Cloud Foundry are developing

00:00:41,430 --> 00:00:46,770
Java applications we take a very very

00:00:44,510 --> 00:00:49,800
strong interest in that particular

00:00:46,770 --> 00:00:51,510
experience and last year we introduced

00:00:49,800 --> 00:00:52,890
the Java build pack and some of the new

00:00:51,510 --> 00:00:55,410
features things that it could do and

00:00:52,890 --> 00:00:57,899
this year I wanted to do sort of a year

00:00:55,410 --> 00:01:00,510
in review discuss where we have been

00:00:57,899 --> 00:01:02,579
what we've been doing since I last spoke

00:01:00,510 --> 00:01:04,860
to you in truth it isn't a year in

00:01:02,579 --> 00:01:07,260
review it's actually nine months so keep

00:01:04,860 --> 00:01:10,530
that in mind as we take a look just some

00:01:07,260 --> 00:01:12,960
statistics about it 420 commits since

00:01:10,530 --> 00:01:14,430
the last conference and that works out

00:01:12,960 --> 00:01:18,060
to about a commit and a half a day

00:01:14,430 --> 00:01:19,770
including weekends and holidays so we're

00:01:18,060 --> 00:01:22,650
we're we're sort of you know very

00:01:19,770 --> 00:01:25,200
steadily making changes as we go those

00:01:22,650 --> 00:01:28,080
changes sort of all fall into a couple

00:01:25,200 --> 00:01:30,360
of couple of buckets updating existing

00:01:28,080 --> 00:01:33,060
functionality expanding this list of

00:01:30,360 --> 00:01:34,680
supported platforms one of the things

00:01:33,060 --> 00:01:36,900
that I'm really really proud of is how

00:01:34,680 --> 00:01:40,110
much change we've had that's been driven

00:01:36,900 --> 00:01:42,360
by the community itself I come from a

00:01:40,110 --> 00:01:44,640
very long open-source background I

00:01:42,360 --> 00:01:48,180
started as a core committer on spring

00:01:44,640 --> 00:01:49,649
back in 2006 probably so for me you know

00:01:48,180 --> 00:01:51,840
the more that the community gets

00:01:49,649 --> 00:01:54,090
involved and tells me what they want to

00:01:51,840 --> 00:01:56,610
have what they want me to make them the

00:01:54,090 --> 00:02:00,829
better I think I'm doing at my job we've

00:01:56,610 --> 00:02:03,659
dated 228 different dependency versions

00:02:00,829 --> 00:02:05,670
most people yeah okay it's a dependency

00:02:03,659 --> 00:02:07,680
version that doesn't really mean a whole

00:02:05,670 --> 00:02:10,349
lot to most developers but for Cloud

00:02:07,680 --> 00:02:12,209
Foundry developers or specifically for

00:02:10,349 --> 00:02:13,580
people who run applications on Cloud

00:02:12,209 --> 00:02:15,470
Foundry Java applications are

00:02:13,580 --> 00:02:19,040
Foundry this is actually a really really

00:02:15,470 --> 00:02:21,290
big deal because one of the key design

00:02:19,040 --> 00:02:24,350
points of the Java build pack is this

00:02:21,290 --> 00:02:26,360
idea that things are secure by default

00:02:24,350 --> 00:02:28,130
right we're really really aggressive

00:02:26,360 --> 00:02:30,440
about making sure you've got the latest

00:02:28,130 --> 00:02:32,090
patched versions of the JRE that you've

00:02:30,440 --> 00:02:34,460
got the latest patched versions of

00:02:32,090 --> 00:02:37,040
Tomcat if you choose to use that right

00:02:34,460 --> 00:02:39,230
and so the fact that every single Monday

00:02:37,040 --> 00:02:41,270
at 2 o'clock in the afternoon I closed

00:02:39,230 --> 00:02:42,710
all the other work that I do and I start

00:02:41,270 --> 00:02:45,050
going through a list of every single

00:02:42,710 --> 00:02:48,520
dependency that the Java build pack uses

00:02:45,050 --> 00:02:50,900
and I look for what's new right find out

00:02:48,520 --> 00:02:52,700
you know maybe there's a new version of

00:02:50,900 --> 00:02:53,959
the app dynamics agent if you're if

00:02:52,700 --> 00:02:56,030
you're a user that makes sure that gets

00:02:53,959 --> 00:02:59,570
uploaded so it's available to you

00:02:56,030 --> 00:03:02,270
maybe Oracle has decided to release both

00:02:59,570 --> 00:03:03,860
another Java 8 and another Java 7 on the

00:03:02,270 --> 00:03:05,750
same day and I have to build them for 5

00:03:03,860 --> 00:03:08,510
platforms in each build takes 4 hours to

00:03:05,750 --> 00:03:10,580
do and well it's horrible horrible but I

00:03:08,510 --> 00:03:12,620
do that for you guys right we want to

00:03:10,580 --> 00:03:14,900
make sure that every single week every

00:03:12,620 --> 00:03:18,970
single day you have the safest possible

00:03:14,900 --> 00:03:21,769
environment to run your applications in

00:03:18,970 --> 00:03:24,560
we've also added support for a bunch of

00:03:21,769 --> 00:03:26,810
new OSS sento 6 I know there are a lot

00:03:24,560 --> 00:03:28,670
of CentOS users out there a lot of

00:03:26,810 --> 00:03:31,820
enterprise especially who consider

00:03:28,670 --> 00:03:33,440
CentOS support to be a deal breaker so

00:03:31,820 --> 00:03:37,400
we support that with the bill pack also

00:03:33,440 --> 00:03:40,430
trusty to hear so we are ready for the

00:03:37,400 --> 00:03:42,170
great migration of to a modern operating

00:03:40,430 --> 00:03:44,570
system inside of cloud founder's default

00:03:42,170 --> 00:03:46,640
behavior Mavericks is mostly for me but

00:03:44,570 --> 00:03:47,930
this goes into our sorry this is in

00:03:46,640 --> 00:03:49,940
addition to the lucid links

00:03:47,930 --> 00:03:52,430
mountain-lion and precise support that

00:03:49,940 --> 00:03:54,620
we've always had so you know a pretty

00:03:52,430 --> 00:03:56,660
broad selection of operating systems

00:03:54,620 --> 00:03:58,190
that the build pack will run on when you

00:03:56,660 --> 00:04:00,430
choose what stem cell you want to use

00:03:58,190 --> 00:04:02,510
we've done a lot of work in Auto

00:04:00,430 --> 00:04:04,130
reconfiguration as well Auto

00:04:02,510 --> 00:04:06,980
reconfiguration was great it was a great

00:04:04,130 --> 00:04:09,560
demo last year much to my surprise

00:04:06,980 --> 00:04:12,110
actually a lot of customers are asking

00:04:09,560 --> 00:04:14,150
to use Auto reconfiguration in sort of

00:04:12,110 --> 00:04:16,190
production circumstances rather than

00:04:14,150 --> 00:04:18,500
demo circumstances which is what I would

00:04:16,190 --> 00:04:20,150
have guessed for and so we took the

00:04:18,500 --> 00:04:22,610
opportunity to sort of reexamine how

00:04:20,150 --> 00:04:24,500
exactly we do Auto reconfiguration for

00:04:22,610 --> 00:04:26,780
for Java applications especially spring

00:04:24,500 --> 00:04:27,330
applications how we can make it a bit

00:04:26,780 --> 00:04:29,430
more rope

00:04:27,330 --> 00:04:33,090
most importantly how we can expand the

00:04:29,430 --> 00:04:34,379
support of Auto reconfiguration so if

00:04:33,090 --> 00:04:36,960
you're a Gradle user you're probably

00:04:34,379 --> 00:04:38,699
familiar with the disc style application

00:04:36,960 --> 00:04:41,669
we can now do Auto reconfiguration on

00:04:38,699 --> 00:04:43,740
those one of the big ones that really

00:04:41,669 --> 00:04:46,229
took me a long time to get to grips with

00:04:43,740 --> 00:04:48,539
is support for servlet 3 applications if

00:04:46,229 --> 00:04:51,000
you're developing those as well if

00:04:48,539 --> 00:04:53,009
you're a fan of spring boot and if

00:04:51,000 --> 00:04:55,139
you're not you absolutely should be if

00:04:53,009 --> 00:04:56,909
your spring developer anything that

00:04:55,139 --> 00:04:58,680
makes developing micro services easier

00:04:56,909 --> 00:05:00,360
is gonna be a really really big deal

00:04:58,680 --> 00:05:03,659
so spring boot applications we're

00:05:00,360 --> 00:05:05,219
waiting on a11 over Lise I noticed this

00:05:03,659 --> 00:05:06,599
morning with the binaries for one one oh

00:05:05,219 --> 00:05:07,800
we're actually up I'm not sure if that's

00:05:06,599 --> 00:05:10,110
been officially announced so I may be

00:05:07,800 --> 00:05:11,280
letting the cat out of the bag but as

00:05:10,110 --> 00:05:13,469
soon as I can get back to a computer

00:05:11,280 --> 00:05:16,020
we'll have support for Auto

00:05:13,469 --> 00:05:21,300
reconfiguration for those applications

00:05:16,020 --> 00:05:24,779
as well we also did a lot of work in the

00:05:21,300 --> 00:05:27,060
area of how you extend the Java build

00:05:24,779 --> 00:05:29,539
pack the Java bill pack from day one has

00:05:27,060 --> 00:05:32,159
always been designed with very

00:05:29,539 --> 00:05:34,379
well-defined well documented extension

00:05:32,159 --> 00:05:36,090
points so if I haven't done something

00:05:34,379 --> 00:05:38,190
that you want the Java build pack to do

00:05:36,090 --> 00:05:40,319
you should be able to very very easily

00:05:38,190 --> 00:05:41,669
write it yourself hopefully you'll

00:05:40,319 --> 00:05:43,710
contribute it back again you know this

00:05:41,669 --> 00:05:47,339
is a community and I love those kinds of

00:05:43,710 --> 00:05:50,069
contributions it was the major feature

00:05:47,339 --> 00:05:51,719
in version 2 of the build pack and the

00:05:50,069 --> 00:05:53,940
reason we had to go to version 2 is

00:05:51,719 --> 00:05:55,949
because it was compatibility breaking

00:05:53,940 --> 00:05:57,750
it's not something that we took

00:05:55,949 --> 00:05:59,400
particularly lightly to break that

00:05:57,750 --> 00:06:01,860
compatibility but we're really really

00:05:59,400 --> 00:06:05,099
happy with the result because it gave us

00:06:01,860 --> 00:06:06,539
a form of sandboxing so now components

00:06:05,099 --> 00:06:07,889
inside of the Java build pack can't

00:06:06,539 --> 00:06:09,509
interfere with one another unless

00:06:07,889 --> 00:06:11,370
they're really really trying hard it's

00:06:09,509 --> 00:06:13,169
not foolproof but it's gonna keep honest

00:06:11,370 --> 00:06:15,419
people honest we've got nice application

00:06:13,169 --> 00:06:17,099
and droplet abstraction so now you don't

00:06:15,419 --> 00:06:18,870
have to worry about you know making sure

00:06:17,099 --> 00:06:20,279
files get to the right place inside of

00:06:18,870 --> 00:06:23,669
your application or inside of your

00:06:20,279 --> 00:06:26,039
droplet how you add arguments to say

00:06:23,669 --> 00:06:29,490
Java ops or something inside of the

00:06:26,039 --> 00:06:31,199
droplet as it's run and in practice we

00:06:29,490 --> 00:06:32,969
had a nice little thing I'll talk a

00:06:31,199 --> 00:06:34,860
little bit about it on the next slide we

00:06:32,969 --> 00:06:38,069
have a fork of the build pack that I'm

00:06:34,860 --> 00:06:40,860
quite happy about where they had

00:06:38,069 --> 00:06:43,710
implemented a new container for Jay

00:06:40,860 --> 00:06:45,360
boss right before we made this change

00:06:43,710 --> 00:06:48,780
and then we went in and took a look at

00:06:45,360 --> 00:06:50,009
what would have happened if we had made

00:06:48,780 --> 00:06:50,909
this change or when we did make this

00:06:50,009 --> 00:06:53,400
change we found out that it actually

00:06:50,909 --> 00:06:55,229
reduced the amount of code in that fork

00:06:53,400 --> 00:06:58,560
that custom code that was different than

00:06:55,229 --> 00:06:59,939
jut the Java build pack by 50% both on

00:06:58,560 --> 00:07:05,610
the production side but more importantly

00:06:59,939 --> 00:07:06,900
on the test side as well as I said

00:07:05,610 --> 00:07:08,939
before one of the things I'm really

00:07:06,900 --> 00:07:10,590
really proud of is all of our community

00:07:08,939 --> 00:07:12,750
contributions this is just sort of a

00:07:10,590 --> 00:07:15,479
couple of highlights support for HTTP

00:07:12,750 --> 00:07:17,129
and HTTPS proxy so I know a number of

00:07:15,479 --> 00:07:18,750
you run an enterprises where you've got

00:07:17,129 --> 00:07:21,319
proxy two internet connections and how

00:07:18,750 --> 00:07:23,699
we support something like that

00:07:21,319 --> 00:07:26,279
improved tomcat container logging this

00:07:23,699 --> 00:07:28,229
was actually a very long and drawn-out I

00:07:26,279 --> 00:07:31,199
don't think I've ever had a github issue

00:07:28,229 --> 00:07:33,419
that was as long as this particular one

00:07:31,199 --> 00:07:35,789
is Guillaume and Mike and myself all

00:07:33,419 --> 00:07:37,529
sort of hashed out what logging should

00:07:35,789 --> 00:07:39,840
look like from the tomcat container

00:07:37,529 --> 00:07:41,370
inside of cloud foundry how we we hook

00:07:39,840 --> 00:07:43,319
that into log or Gator and make it

00:07:41,370 --> 00:07:45,360
easily identifiable and then as I said

00:07:43,319 --> 00:07:47,069
before we had a great contribution

00:07:45,360 --> 00:07:50,310
that's now in the Cloud Foundry

00:07:47,069 --> 00:07:54,060
community organization of a JBoss build

00:07:50,310 --> 00:07:56,400
pack form so we do have the ability to

00:07:54,060 --> 00:07:58,759
run applications in jboss as well if

00:07:56,400 --> 00:08:00,930
that's something you're interested in

00:07:58,759 --> 00:08:02,969
but there are two more features that I

00:08:00,930 --> 00:08:05,969
want to discuss in a bit greater detail

00:08:02,969 --> 00:08:08,219
and as I am the token technical keynote

00:08:05,969 --> 00:08:10,560
here today I want to do some live coding

00:08:08,219 --> 00:08:13,919
with you guys and the first is around

00:08:10,560 --> 00:08:16,620
session replication as we go into the

00:08:13,919 --> 00:08:18,990
cloud most people I think most

00:08:16,620 --> 00:08:20,460
developers realize that you've got to

00:08:18,990 --> 00:08:22,979
move more or less to a stateless

00:08:20,460 --> 00:08:25,110
architecture right if you want CF scale

00:08:22,979 --> 00:08:27,569
to work properly you can't be sharing a

00:08:25,110 --> 00:08:29,400
huge amount of data between different

00:08:27,569 --> 00:08:30,990
instances or if you are sharing that

00:08:29,400 --> 00:08:32,550
data has got to be pushed way way down

00:08:30,990 --> 00:08:34,620
into the data T or something that was

00:08:32,550 --> 00:08:37,860
programmed to be massively concurrent

00:08:34,620 --> 00:08:40,250
massively scalable from the start but we

00:08:37,860 --> 00:08:43,229
also find that there is a need for some

00:08:40,250 --> 00:08:45,029
session replication and so basically

00:08:43,229 --> 00:08:47,190
what that means is when an HTTP session

00:08:45,029 --> 00:08:48,899
is created we need to be able to keep it

00:08:47,190 --> 00:08:50,399
around and if for example an instance

00:08:48,899 --> 00:08:52,920
goes down because you're doing some sort

00:08:50,399 --> 00:08:54,690
of rolling upgrade or you have to

00:08:52,920 --> 00:08:56,460
restart your application you want some

00:08:54,690 --> 00:08:58,710
you want someone's session to come back

00:08:56,460 --> 00:09:00,270
we do need some sort of support so the

00:08:58,710 --> 00:09:02,850
job of Bill pack does actually now

00:09:00,270 --> 00:09:08,550
support replication of HTTP sessions

00:09:02,850 --> 00:09:10,800
into a Redis back-end the code itself is

00:09:08,550 --> 00:09:12,360
aslv to license which means that you

00:09:10,800 --> 00:09:14,580
guys can use it outside of cloud foundry

00:09:12,360 --> 00:09:16,830
if you want to and isn't particularly

00:09:14,580 --> 00:09:19,170
tied to Cloud Foundry but one of the

00:09:16,830 --> 00:09:21,330
really nice things is we have zero touch

00:09:19,170 --> 00:09:23,550
configuration if you have a Redis

00:09:21,330 --> 00:09:25,470
service bound and that Redis service has

00:09:23,550 --> 00:09:27,210
session replication somewhere in its

00:09:25,470 --> 00:09:29,730
name we're gonna say oh you must mean

00:09:27,210 --> 00:09:32,820
that you want to do HTTP session

00:09:29,730 --> 00:09:35,070
replication to it so we can take a look

00:09:32,820 --> 00:09:43,110
at some some demonstrations of that

00:09:35,070 --> 00:09:44,910
actually working so I have an

00:09:43,110 --> 00:09:48,660
application actually running right now

00:09:44,910 --> 00:09:49,890
and that application I apologize for how

00:09:48,660 --> 00:09:51,750
small this is gonna be I really have to

00:09:49,890 --> 00:09:54,390
find a better tool for this allows us

00:09:51,750 --> 00:09:56,490
basically to send a piece of data it's

00:09:54,390 --> 00:09:58,590
going to store that particular data into

00:09:56,490 --> 00:10:00,000
a session and so in this case we're just

00:09:58,590 --> 00:10:03,690
going to send a string that says hello

00:10:00,000 --> 00:10:10,320
world if I go ahead and grab the cookie

00:10:03,690 --> 00:10:12,690
string from it put it in here we should

00:10:10,320 --> 00:10:17,550
see that particular day to come back but

00:10:12,690 --> 00:10:20,040
if we restart that application now what

00:10:17,550 --> 00:10:22,230
we expect to see is by default Tomcat

00:10:20,040 --> 00:10:25,050
doesn't store its sessions any prate

00:10:22,230 --> 00:10:26,730
anyplace particularly useful it's stored

00:10:25,050 --> 00:10:28,110
mostly in memory and there are certain

00:10:26,730 --> 00:10:29,820
circumstances where it might actually be

00:10:28,110 --> 00:10:32,070
written out to the file system

00:10:29,820 --> 00:10:33,930
but in general it's not gonna be

00:10:32,070 --> 00:10:38,839
persistent and so when this comes back

00:10:33,930 --> 00:10:41,160
up why we're waiting a little while yeah

00:10:38,839 --> 00:10:43,080
we'll see that when I run at this time

00:10:41,160 --> 00:10:45,360
we get a blank response so that's not

00:10:43,080 --> 00:10:48,000
great right if your application you need

00:10:45,360 --> 00:10:49,770
to scale up a new number of instances or

00:10:48,000 --> 00:10:53,160
something like that all that data going

00:10:49,770 --> 00:10:54,990
away isn't great so now we'll go ahead

00:10:53,160 --> 00:10:57,480
and bind that service a Redis service

00:10:54,990 --> 00:11:01,290
that I have behind the scenes and we'll

00:10:57,480 --> 00:11:03,390
go ahead and restage this if any of you

00:11:01,290 --> 00:11:06,180
guys remember last year if you were

00:11:03,390 --> 00:11:08,250
there I'd like to do my demos against

00:11:06,180 --> 00:11:10,620
run pivotal IO

00:11:08,250 --> 00:11:13,620
I find it makes me very sensitive to how

00:11:10,620 --> 00:11:16,080
it performs and last year

00:11:13,620 --> 00:11:18,690
it was having a bad day the day of the

00:11:16,080 --> 00:11:20,550
conference actually and I was very very

00:11:18,690 --> 00:11:22,530
worried in the end it all held out but

00:11:20,550 --> 00:11:24,420
I'm happy to say that these died these

00:11:22,530 --> 00:11:26,940
days it's incredibly stable and we have

00:11:24,420 --> 00:11:30,840
almost no trouble with it and hopefully

00:11:26,940 --> 00:11:34,320
this will go quite smoothly here so the

00:11:30,840 --> 00:11:35,670
the application as soon as we get a stop

00:11:34,320 --> 00:11:37,890
here

00:11:35,670 --> 00:11:41,340
what we what behind-the-scenes actually

00:11:37,890 --> 00:11:42,780
happens is when we build the Tomcat

00:11:41,340 --> 00:11:44,640
instance it's going to run inside of

00:11:42,780 --> 00:11:48,060
your application we use something called

00:11:44,640 --> 00:11:50,550
a tomcat persistent manager and we have

00:11:48,060 --> 00:11:52,620
a Redis based store and it replicates

00:11:50,550 --> 00:11:54,810
sessions synchronously back to that

00:11:52,620 --> 00:11:57,150
back-end and it turns out I mean I

00:11:54,810 --> 00:12:00,360
certainly am NOT a fan of session

00:11:57,150 --> 00:12:02,250
replication personally and did this only

00:12:00,360 --> 00:12:03,810
because I was asked to but it turns out

00:12:02,250 --> 00:12:04,260
that the performance isn't absolutely

00:12:03,810 --> 00:12:06,690
horrible

00:12:04,260 --> 00:12:08,550
obviously it's contingent on network and

00:12:06,690 --> 00:12:10,110
any number of other things the size of

00:12:08,550 --> 00:12:12,090
the data that you're actually persisting

00:12:10,110 --> 00:12:14,610
but we see that it's something like you

00:12:12,090 --> 00:12:16,680
know we're using Redis to go here the

00:12:14,610 --> 00:12:19,800
Redis labs product so it's you know sort

00:12:16,680 --> 00:12:22,230
of all in s3 but we find that it's it's

00:12:19,800 --> 00:12:23,490
you know tens of milliseconds kind of

00:12:22,230 --> 00:12:26,190
delay so it's not the end of the world

00:12:23,490 --> 00:12:29,160
to do something like this so we'll go

00:12:26,190 --> 00:12:35,220
ahead and persist data in again grab a

00:12:29,160 --> 00:12:37,380
new session and if we run it we see the

00:12:35,220 --> 00:12:40,410
data is there and if we restart our

00:12:37,380 --> 00:12:47,660
application we should see that the data

00:12:40,410 --> 00:12:47,660
comes back up once again let's hope so

00:12:50,120 --> 00:12:54,879
maybe

00:12:52,720 --> 00:12:57,879
it was actually surprisingly difficult

00:12:54,879 --> 00:13:01,839
to create a demo that would show this

00:12:57,879 --> 00:13:04,540
because table boundaries sticky sessions

00:13:01,839 --> 00:13:05,860
are so darn good trying to get to

00:13:04,540 --> 00:13:07,360
another instance that doesn't actually

00:13:05,860 --> 00:13:09,220
have the session already stored inside

00:13:07,360 --> 00:13:11,410
of it was was really difficult and so

00:13:09,220 --> 00:13:12,970
there we go we see the data itself so it

00:13:11,410 --> 00:13:15,399
survived a restart of the Tomcat

00:13:12,970 --> 00:13:16,660
container and you guys have access to

00:13:15,399 --> 00:13:19,329
that whether you're providing your own

00:13:16,660 --> 00:13:24,069
Redis service or if you're using one of

00:13:19,329 --> 00:13:25,779
the ones packaged out of the box so the

00:13:24,069 --> 00:13:28,480
next thing I want to talk about is build

00:13:25,779 --> 00:13:30,339
pack packaging this has long been

00:13:28,480 --> 00:13:33,550
something that was contentious for me

00:13:30,339 --> 00:13:35,560
not a huge fan of it when it started

00:13:33,550 --> 00:13:37,420
when the work started when the requests

00:13:35,560 --> 00:13:40,509
came in but I've grown to actually love

00:13:37,420 --> 00:13:41,860
it quite a bit and it's all contingent

00:13:40,509 --> 00:13:45,639
on the fact that we now have this

00:13:41,860 --> 00:13:47,379
command called CF create build pack has

00:13:45,639 --> 00:13:48,910
a bunch of different names depending on

00:13:47,379 --> 00:13:50,500
you know sort of when you learned about

00:13:48,910 --> 00:13:52,360
it a lot of people call these things

00:13:50,500 --> 00:13:54,160
admin build packs things like that I

00:13:52,360 --> 00:13:55,660
prefer to think of them as build packs

00:13:54,160 --> 00:13:58,269
in in the only way they really should

00:13:55,660 --> 00:14:00,910
exist and this allows you to take a zip

00:13:58,269 --> 00:14:03,160
file basically just some discreet bundle

00:14:00,910 --> 00:14:05,589
and upload it into cloud foundry and

00:14:03,160 --> 00:14:07,720
that gives a name to this bundle doesn't

00:14:05,589 --> 00:14:09,040
have to be stored in and get or in any

00:14:07,720 --> 00:14:10,930
other version control system although I

00:14:09,040 --> 00:14:12,699
highly recommend you do that

00:14:10,930 --> 00:14:15,519
but it allows you then to create it

00:14:12,699 --> 00:14:16,870
version it update it and every

00:14:15,519 --> 00:14:19,769
application that uses this particular

00:14:16,870 --> 00:14:22,569
build pack then has access to it and

00:14:19,769 --> 00:14:24,129
inside of the Java build pack it led us

00:14:22,569 --> 00:14:26,379
into this idea that there are actually

00:14:24,129 --> 00:14:28,360
three different styles of using a build

00:14:26,379 --> 00:14:30,699
pack the one that I was originally most

00:14:28,360 --> 00:14:32,829
a fan of is this online mode where I

00:14:30,699 --> 00:14:34,329
would refer to as ez mode and this is

00:14:32,829 --> 00:14:36,610
what the job of Bill pack does out of

00:14:34,329 --> 00:14:38,379
the box it goes and says ok what's the

00:14:36,610 --> 00:14:40,389
latest version of Java let me go get

00:14:38,379 --> 00:14:44,170
that and it goes and gets it and it

00:14:40,389 --> 00:14:46,870
drops it onto your into the droplet and

00:14:44,170 --> 00:14:49,720
used for your application but it turns

00:14:46,870 --> 00:14:51,730
out that that's not necessarily possible

00:14:49,720 --> 00:14:54,370
in a lot of cases especially inside of

00:14:51,730 --> 00:14:55,899
enterprises going to the Internet is a

00:14:54,370 --> 00:14:57,519
no-no right

00:14:55,899 --> 00:15:00,189
certainly on any sort of production

00:14:57,519 --> 00:15:02,439
system they need to really control you

00:15:00,189 --> 00:15:04,360
know sort of external access and things

00:15:02,439 --> 00:15:05,699
like that and so there's this hybrid

00:15:04,360 --> 00:15:07,739
mode that sits in the middle

00:15:05,699 --> 00:15:10,829
this hybrid mode is basically an online

00:15:07,739 --> 00:15:13,259
mode except rather than going to our

00:15:10,829 --> 00:15:15,239
repository for dependencies you create

00:15:13,259 --> 00:15:16,799
your own repository for dependencies and

00:15:15,239 --> 00:15:18,480
we've done a lot of work and worked with

00:15:16,799 --> 00:15:22,799
a number of customers on how to get this

00:15:18,480 --> 00:15:25,470
done but the big the big data the big

00:15:22,799 --> 00:15:26,879
upside of this is then that we now have

00:15:25,470 --> 00:15:28,679
a one-liner script that allows you to

00:15:26,879 --> 00:15:30,209
replicate our entire repository locally

00:15:28,679 --> 00:15:32,040
on your machine you can decide how you

00:15:30,209 --> 00:15:34,889
want to expose it as far as static files

00:15:32,040 --> 00:15:36,859
and things like that and then use the

00:15:34,889 --> 00:15:39,600
build pack pointing at that instead of

00:15:36,859 --> 00:15:41,369
download dot run dot pivotal dot IO and

00:15:39,600 --> 00:15:42,720
the final one and the one we're going to

00:15:41,369 --> 00:15:45,619
discuss a little bit today is this

00:15:42,720 --> 00:15:48,119
offline mode or self-contained mode and

00:15:45,619 --> 00:15:48,720
the offline mode is exactly what it

00:15:48,119 --> 00:15:51,929
sounds like

00:15:48,720 --> 00:15:53,790
the build pack never goes to any network

00:15:51,929 --> 00:15:55,859
connection at all and we do this

00:15:53,790 --> 00:15:59,429
basically by faking a cache filling a

00:15:55,859 --> 00:16:01,350
cache as part of the build so in the

00:15:59,429 --> 00:16:02,819
online mode we're always going to a

00:16:01,350 --> 00:16:04,799
network trying to find the latest

00:16:02,819 --> 00:16:06,149
version of a dependency depending

00:16:04,799 --> 00:16:08,040
obviously on how you've configured it

00:16:06,149 --> 00:16:10,679
requires network access the offline mode

00:16:08,040 --> 00:16:13,199
no active network access required at all

00:16:10,679 --> 00:16:15,869
which is a huge benefit for a lot of

00:16:13,199 --> 00:16:18,660
people but it does then put the onus for

00:16:15,869 --> 00:16:20,220
updating and keeping secure on you the

00:16:18,660 --> 00:16:23,939
user right the person who's maintaining

00:16:20,220 --> 00:16:27,059
the build pack so let's take a look at

00:16:23,939 --> 00:16:31,350
an example of that so the build pack

00:16:27,059 --> 00:16:34,470
itself would Java build pack here oops

00:16:31,350 --> 00:16:37,230
has basically rake inside of it which is

00:16:34,470 --> 00:16:39,600
a build system and we can run a command

00:16:37,230 --> 00:16:42,269
and say we want to package this and we

00:16:39,600 --> 00:16:44,009
want to package it for offline usage and

00:16:42,269 --> 00:16:45,480
when we do that it then basically takes

00:16:44,009 --> 00:16:47,309
a look at the build pack takes a look at

00:16:45,480 --> 00:16:50,819
all the configuration you've set in the

00:16:47,309 --> 00:16:53,189
build pack and says ok if I was going to

00:16:50,819 --> 00:16:54,689
run inside of a droplet today what would

00:16:53,189 --> 00:16:55,739
I go and download but it does it for

00:16:54,689 --> 00:16:57,839
everything not for a particular

00:16:55,739 --> 00:16:59,819
application which means it needs to go

00:16:57,839 --> 00:17:02,279
get all of the possible things if you

00:16:59,819 --> 00:17:03,539
might one day one new relat new relic is

00:17:02,279 --> 00:17:06,299
gonna go get that or if you might want

00:17:03,539 --> 00:17:07,559
app dynam it's gonna go and get that one

00:17:06,299 --> 00:17:09,089
of the more interesting things as it

00:17:07,559 --> 00:17:10,679
goes and gets five different versions of

00:17:09,089 --> 00:17:12,870
the JRE not knowing exactly which

00:17:10,679 --> 00:17:16,439
operating system but all this stuff gets

00:17:12,870 --> 00:17:18,000
downloaded based on today right and it

00:17:16,439 --> 00:17:18,950
gives you a nice little zip file at the

00:17:18,000 --> 00:17:22,520
other end that you

00:17:18,950 --> 00:17:26,480
go ahead and upload to your to your

00:17:22,520 --> 00:17:28,490
Cloud Foundry instance and use and this

00:17:26,480 --> 00:17:30,080
will finish in another couple of seconds

00:17:28,490 --> 00:17:33,620
but since I'm running a little bit low

00:17:30,080 --> 00:17:36,020
on time I'll go ahead and create a build

00:17:33,620 --> 00:17:45,350
pack here using one that I have cached

00:17:36,020 --> 00:17:47,030
earlier and so an offline bill pack runs

00:17:45,350 --> 00:17:47,990
you I think today in the order of about

00:17:47,030 --> 00:17:49,760
200 Meg's

00:17:47,990 --> 00:17:52,190
once it's all filled up if you want to

00:17:49,760 --> 00:17:53,630
prune that it's easy to change inside of

00:17:52,190 --> 00:17:54,860
the bill pack packaging mechanism and

00:17:53,630 --> 00:17:56,120
say you know I don't want this thing I

00:17:54,860 --> 00:17:57,880
don't want this thing I'm not gonna run

00:17:56,120 --> 00:18:00,050
app dynamics I'm not gonna run New Relic

00:17:57,880 --> 00:18:06,850
something like that all that stuff can

00:18:00,050 --> 00:18:06,850
go away so now if I type build packs I

00:18:07,540 --> 00:18:17,870
see that there is my test build pack

00:18:10,400 --> 00:18:20,360
here and so if I see I push that push an

00:18:17,870 --> 00:18:23,510
application there the giveaway the way

00:18:20,360 --> 00:18:25,130
you know that an offline built pack is

00:18:23,510 --> 00:18:26,810
being used it's a it will tell you that

00:18:25,130 --> 00:18:29,150
it was packaged as an offline build pack

00:18:26,810 --> 00:18:30,940
nowadays but also that it never actually

00:18:29,150 --> 00:18:32,990
goes and looks on the network for things

00:18:30,940 --> 00:18:34,790
we've decided to become a bit more

00:18:32,990 --> 00:18:37,220
descriptive about telling you when we've

00:18:34,790 --> 00:18:39,110
used a cached artifact rather than going

00:18:37,220 --> 00:18:40,940
out to the Internet so it's a little bit

00:18:39,110 --> 00:18:43,400
clearer so we see that this is in fact

00:18:40,940 --> 00:18:45,290
an offline build pack and we see every

00:18:43,400 --> 00:18:48,620
single dependency whether it's the JRE

00:18:45,290 --> 00:18:50,750
or its Tomcat somewhere in here

00:18:48,620 --> 00:18:52,250
Tomcat here we go all of those things

00:18:50,750 --> 00:18:53,810
are found in the cache and so that's how

00:18:52,250 --> 00:18:56,680
an offline build pack works is by

00:18:53,810 --> 00:18:59,390
basically pre-populating a cache before

00:18:56,680 --> 00:19:02,510
your application actually uses this

00:18:59,390 --> 00:19:03,860
particular build pack if we had done an

00:19:02,510 --> 00:19:04,970
online build packet would have shown

00:19:03,860 --> 00:19:06,710
they were taken you know a couple of

00:19:04,970 --> 00:19:09,620
seconds to go download each one of those

00:19:06,710 --> 00:19:13,460
things instead so packaging is there as

00:19:09,620 --> 00:19:15,590
well if you choose to use it certainly I

00:19:13,460 --> 00:19:17,150
have come around on this and I think the

00:19:15,590 --> 00:19:18,500
packaging build packs and certainly the

00:19:17,150 --> 00:19:20,960
create build pack update they'll pack

00:19:18,500 --> 00:19:23,260
commands are really really useful and I

00:19:20,960 --> 00:19:29,450
highly encourage everybody to use them

00:19:23,260 --> 00:19:31,040
so as I have mere seconds left the stuff

00:19:29,450 --> 00:19:32,900
we discussed today just a little bit

00:19:31,040 --> 00:19:34,460
there's all sorts of stuff that is

00:19:32,900 --> 00:19:36,800
happened in the Java build Packer last

00:19:34,460 --> 00:19:38,510
year I'm happy to have been a part of

00:19:36,800 --> 00:19:40,460
that and I'm happy to be a part of it

00:19:38,510 --> 00:19:42,650
you know for the for the foreseeable

00:19:40,460 --> 00:19:45,290
future I love it when you guys in the

00:19:42,650 --> 00:19:47,450
community tell me what you want right a

00:19:45,290 --> 00:19:48,830
community contribution means a lot of

00:19:47,450 --> 00:19:50,480
different things to a lot of different

00:19:48,830 --> 00:19:53,020
people certainly to a lot of different

00:19:50,480 --> 00:19:55,790
organizations in this room but for me I

00:19:53,020 --> 00:19:57,380
love issues right even more than I like

00:19:55,790 --> 00:19:59,660
pull requests although I'll happily take

00:19:57,380 --> 00:20:02,570
them from you as well I like you telling

00:19:59,660 --> 00:20:05,030
me what I should build and I'm happy to

00:20:02,570 --> 00:20:06,420
build it for you if you want it okay

00:20:05,030 --> 00:20:06,610
thank you very much everyone

00:20:06,420 --> 00:20:07,920
[Music]

00:20:06,610 --> 00:20:14,729
[Applause]

00:20:07,920 --> 00:20:14,729

YouTube URL: https://www.youtube.com/watch?v=hy_huSXghI8


