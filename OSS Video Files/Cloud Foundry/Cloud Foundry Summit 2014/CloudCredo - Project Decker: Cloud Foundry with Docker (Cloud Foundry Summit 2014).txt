Title: CloudCredo - Project Decker: Cloud Foundry with Docker (Cloud Foundry Summit 2014)
Publication date: 2014-07-28
Playlist: Cloud Foundry Summit 2014
Description: 
	Technical track breakout session presented by Colin Humphreys, CEO of CloudCredo.

Docker creates portable, self-sufficient containers that will deploy applications to run virtually anywhere. Learn how this will be integrated with Cloud Foundry to make deploying applications to your CF PaaS even easier.
Captions: 
	00:00:00,930 --> 00:00:04,220
[Music]

00:00:07,970 --> 00:00:11,330
let's get started

00:00:11,960 --> 00:00:23,820
thank you Miss this is a really boring

00:00:22,230 --> 00:00:25,050
talk so I thought I would wear a

00:00:23,820 --> 00:00:28,519
squirrel t-shirt to keep you all

00:00:25,050 --> 00:00:31,650
interested for the duration of the talk

00:00:28,519 --> 00:00:34,829
that's not true this is a very exciting

00:00:31,650 --> 00:00:38,430
talk because I have not one not two but

00:00:34,829 --> 00:00:40,500
three live demos for you today I know

00:00:38,430 --> 00:00:41,989
what you're thinking I know what you're

00:00:40,500 --> 00:00:45,059
thinking you're thinking that's crazy

00:00:41,989 --> 00:00:48,180
how could you possibly do three live

00:00:45,059 --> 00:00:49,680
demos well let's see what happens

00:00:48,180 --> 00:00:51,000
everyone please stay off the internet

00:00:49,680 --> 00:00:54,989
it's my internet for the next half an

00:00:51,000 --> 00:00:58,969
hour so Decker

00:00:54,989 --> 00:01:03,920
there was a OpenStack summit recently

00:00:58,969 --> 00:01:07,680
and there was a thought leader

00:01:03,920 --> 00:01:10,680
conversation online during which an

00:01:07,680 --> 00:01:15,290
openstack thought leader described

00:01:10,680 --> 00:01:16,920
Decker as a small project from some si

00:01:15,290 --> 00:01:18,689
so I thought this was quite interesting

00:01:16,920 --> 00:01:21,930
thank you for the publicity to that

00:01:18,689 --> 00:01:25,740
person but let's break this down let's

00:01:21,930 --> 00:01:28,619
have a look at this so who is some si

00:01:25,740 --> 00:01:32,009
well I'm very proud to tell you I'm

00:01:28,619 --> 00:01:34,770
Colin Humphries I'm the CEO of cloud

00:01:32,009 --> 00:01:37,290
credo I want to say thank you very much

00:01:34,770 --> 00:01:39,479
to all of our clients and ecosystem

00:01:37,290 --> 00:01:41,250
members that have mentioned us today

00:01:39,479 --> 00:01:43,680
we're working with a lot of people in

00:01:41,250 --> 00:01:45,329
the ecosystem and it's been fantastic to

00:01:43,680 --> 00:01:48,810
hear about their success stories that

00:01:45,329 --> 00:01:50,729
we've helped them with so what about

00:01:48,810 --> 00:01:54,229
cloud credo and what what have I been

00:01:50,729 --> 00:01:56,850
working on so I'm very happy to tell you

00:01:54,229 --> 00:02:00,299
I delivered the first ever production

00:01:56,850 --> 00:02:03,630
Cloud Foundry which was about two years

00:02:00,299 --> 00:02:06,600
ago running some applications for an

00:02:03,630 --> 00:02:08,220
insurance company in London and that's

00:02:06,600 --> 00:02:10,379
still running to this day and it's had

00:02:08,220 --> 00:02:12,300
no down time which is amazing because it

00:02:10,379 --> 00:02:16,560
was an GB one and some

00:02:12,300 --> 00:02:21,270
ponents were a little interesting very

00:02:16,560 --> 00:02:23,310
proud to say I believe please anyone

00:02:21,270 --> 00:02:25,800
contradict me on this I've run the

00:02:23,310 --> 00:02:27,690
largest production cloud foundry which

00:02:25,800 --> 00:02:31,680
was approximately 600 virtual machines

00:02:27,690 --> 00:02:33,450
spread across four clouds there's a blog

00:02:31,680 --> 00:02:37,260
post I wrote on this it's on cloud

00:02:33,450 --> 00:02:40,860
foundry dorg this was a system for a UK

00:02:37,260 --> 00:02:43,410
charity this took approximately 700,000

00:02:40,860 --> 00:02:49,020
transactions over the course of six

00:02:43,410 --> 00:02:52,710
hours and as you can see 105 million

00:02:49,020 --> 00:02:57,020
dollars on the project so that was a

00:02:52,710 --> 00:02:57,020
tremendous success with cloud foundry

00:02:58,160 --> 00:03:03,690
I'm also on the Cloud Foundry advisory

00:03:00,600 --> 00:03:06,420
board and we've joined the foundation at

00:03:03,690 --> 00:03:08,640
the Silver level so really excited about

00:03:06,420 --> 00:03:13,350
that so that gives you some background

00:03:08,640 --> 00:03:20,370
on some si let's have a little look at

00:03:13,350 --> 00:03:22,860
the small project so why have I built

00:03:20,370 --> 00:03:26,730
where we built Dekker

00:03:22,860 --> 00:03:28,590
well my purpose motive the thing that I

00:03:26,730 --> 00:03:32,730
want to do that gets me out of bed in

00:03:28,590 --> 00:03:35,840
the morning is fast feedback I want to

00:03:32,730 --> 00:03:41,550
enable fast feedback of business ideas I

00:03:35,840 --> 00:03:44,310
think if we can test out ideas and find

00:03:41,550 --> 00:03:47,340
out very quickly if they're good ideas

00:03:44,310 --> 00:03:50,370
or bad ideas we can learn quickly and

00:03:47,340 --> 00:03:53,910
the faster we learn the more successful

00:03:50,370 --> 00:03:55,650
we will be and as a business if you want

00:03:53,910 --> 00:03:57,840
to be successful and beat your

00:03:55,650 --> 00:04:01,830
competitors you need to be able to learn

00:03:57,840 --> 00:04:03,480
faster than they do and this is what I'm

00:04:01,830 --> 00:04:10,019
trying to enable and this is the key

00:04:03,480 --> 00:04:16,810
idea of books like Lean Startup and four

00:04:10,019 --> 00:04:20,330
steps to the Epiphany so

00:04:16,810 --> 00:04:22,360
if we have an idea as you can see here

00:04:20,330 --> 00:04:24,080
at the bottom left

00:04:22,360 --> 00:04:28,070
apologies my slides are being slightly

00:04:24,080 --> 00:04:30,470
cut here we've got an idea we need to

00:04:28,070 --> 00:04:33,140
learn how do we get to the learn box at

00:04:30,470 --> 00:04:34,760
the top right well traditionally we go

00:04:33,140 --> 00:04:38,330
through all these hoops and this is a

00:04:34,760 --> 00:04:42,560
value chain for people delivering an

00:04:38,330 --> 00:04:44,870
application so we have an idea we need

00:04:42,560 --> 00:04:46,880
to do some infrastructure stuff by our

00:04:44,870 --> 00:04:48,560
data center we buy some metal then we do

00:04:46,880 --> 00:04:52,910
some platform level stuff configure the

00:04:48,560 --> 00:04:55,970
OS app server DB server we write some

00:04:52,910 --> 00:04:57,920
software deploy the software and then we

00:04:55,970 --> 00:05:02,300
learn so I was unfortunate enough to

00:04:57,920 --> 00:05:05,270
work on a project a few years ago where

00:05:02,300 --> 00:05:07,820
we had a fantastic Gantt chart that

00:05:05,270 --> 00:05:11,210
mapped out this process from my dear to

00:05:07,820 --> 00:05:16,040
learning in a 15-minute granularity over

00:05:11,210 --> 00:05:18,970
the course of three years so some poor

00:05:16,040 --> 00:05:22,390
businessperson they had an idea saying

00:05:18,970 --> 00:05:25,280
we actually wanted to bring it was a

00:05:22,390 --> 00:05:27,110
website to test out selling an insurance

00:05:25,280 --> 00:05:29,030
product and they wanted to test out

00:05:27,110 --> 00:05:31,340
whether or not this was a good idea to

00:05:29,030 --> 00:05:33,230
sell this insurance product and the

00:05:31,340 --> 00:05:36,530
Fantastic Four project managers and

00:05:33,230 --> 00:05:38,660
technical architects came back with this

00:05:36,530 --> 00:05:39,890
Gantt chart and said okay we'll do that

00:05:38,660 --> 00:05:41,180
for you no problem at all we'll do these

00:05:39,890 --> 00:05:42,620
things we bought some land for a

00:05:41,180 --> 00:05:44,390
datacenter in those kind of things and

00:05:42,620 --> 00:05:46,550
it was going to be a three-year feedback

00:05:44,390 --> 00:05:49,280
cycle what can you learn if it takes you

00:05:46,550 --> 00:05:52,370
three years to find out if your business

00:05:49,280 --> 00:05:56,780
idea is a good idea well not a lot is

00:05:52,370 --> 00:05:59,930
the answer to that so if you look at

00:05:56,780 --> 00:06:01,460
this and you think about this you look

00:05:59,930 --> 00:06:02,960
at the things we were doing it's

00:06:01,460 --> 00:06:04,940
actually quite closely resembles the

00:06:02,960 --> 00:06:06,650
cloud stack because we've got some

00:06:04,940 --> 00:06:11,600
infrastructure stuff some platform stuff

00:06:06,650 --> 00:06:13,580
some software stuff so again apologies

00:06:11,600 --> 00:06:15,530
but you can see this is the standard the

00:06:13,580 --> 00:06:16,850
cloud stacks that we've got software as

00:06:15,530 --> 00:06:18,890
a service platform as a service

00:06:16,850 --> 00:06:24,590
infrastructure as a service and quite

00:06:18,890 --> 00:06:26,960
often businesses will go to AWS fire up

00:06:24,590 --> 00:06:29,120
some infrastructure they'll then use the

00:06:26,960 --> 00:06:31,310
infrastructure to provide a platform

00:06:29,120 --> 00:06:35,210
they'll then deploy their applications

00:06:31,310 --> 00:06:36,860
to that platform and they'll end up with

00:06:35,210 --> 00:06:40,610
with some software the users can consume

00:06:36,860 --> 00:06:43,610
and this can take a long time so what I

00:06:40,610 --> 00:06:45,860
want to change this I want to say if

00:06:43,610 --> 00:06:47,210
you're going to build something you're

00:06:45,860 --> 00:06:49,729
gonna build a service and make it come

00:06:47,210 --> 00:06:52,220
to life what you should do is break that

00:06:49,729 --> 00:06:53,990
service down into small components and

00:06:52,220 --> 00:06:56,090
you should deliver them at a higher

00:06:53,990 --> 00:07:01,669
level as possible in the stack

00:06:56,090 --> 00:07:05,300
so if software exists that can meet your

00:07:01,669 --> 00:07:10,190
users needs then use it so something

00:07:05,300 --> 00:07:12,830
like mapping being example use Google

00:07:10,190 --> 00:07:14,960
Maps don't reinvent your mapping service

00:07:12,830 --> 00:07:19,400
so I'm gonna be I believe the only

00:07:14,960 --> 00:07:23,180
person at this summit to say do not use

00:07:19,400 --> 00:07:25,910
Cloud Foundry if software as a service

00:07:23,180 --> 00:07:27,620
exists to meet your needs it's going to

00:07:25,910 --> 00:07:29,419
be faster than writing an app and

00:07:27,620 --> 00:07:31,190
putting it into Cloud Foundry so if you

00:07:29,419 --> 00:07:32,860
can avoid doing that and get faster

00:07:31,190 --> 00:07:36,770
feedback using software as a service

00:07:32,860 --> 00:07:38,900
then use software as a service if you

00:07:36,770 --> 00:07:44,169
need to innovate and you need to create

00:07:38,900 --> 00:07:47,539
something new then okay create an app

00:07:44,169 --> 00:07:49,190
push it into platform as a service this

00:07:47,539 --> 00:07:52,400
will then run the app this creates

00:07:49,190 --> 00:07:54,200
software as a service and your users can

00:07:52,400 --> 00:07:56,330
then consume that but don't go down to

00:07:54,200 --> 00:07:58,610
infrastructure don't go down to AWS

00:07:56,330 --> 00:08:00,380
don't go down to you know data center

00:07:58,610 --> 00:08:01,940
know kind of things because you're

00:08:00,380 --> 00:08:06,830
wasting your time you're delaying your

00:08:01,940 --> 00:08:08,900
feedback so if you're going to deploy

00:08:06,830 --> 00:08:12,020
your applications to platform as a

00:08:08,900 --> 00:08:16,630
service as we know we're here at UCF

00:08:12,020 --> 00:08:18,650
summit you're gonna use Cloud Foundry so

00:08:16,630 --> 00:08:21,349
I'm going to be the only person here

00:08:18,650 --> 00:08:23,510
doing a very straightforward demo of CF

00:08:21,349 --> 00:08:26,570
just to illustrate the concepts if you

00:08:23,510 --> 00:08:31,340
haven't UCF what are you doing here but

00:08:26,570 --> 00:08:33,919
let's give this quick go so I'm

00:08:31,340 --> 00:08:35,120
connected to a cloud foundry here you

00:08:33,919 --> 00:08:38,390
can see I've got a space called Decca

00:08:35,120 --> 00:08:40,010
and the system domain you can see the

00:08:38,390 --> 00:08:41,790
domain there is an elastic IP from

00:08:40,010 --> 00:08:47,610
Amazon so in this though

00:08:41,790 --> 00:08:54,300
actuary I have a very straightforward

00:08:47,610 --> 00:08:55,970
Ruby application ikat that you can see

00:08:54,300 --> 00:09:00,300
this is a fantastic Ruby application

00:08:55,970 --> 00:09:08,490
doing some cloud credo marketing so if I

00:09:00,300 --> 00:09:09,900
CF push CF test it's going to take my

00:09:08,490 --> 00:09:12,540
application it's gonna think about

00:09:09,900 --> 00:09:16,340
connecting to AWS ask you ask me some

00:09:12,540 --> 00:09:16,340
questions first accept the defaults

00:09:26,070 --> 00:09:33,899
so as you know this is now taking my

00:09:29,040 --> 00:09:37,009
Ruby application it's pushing it into

00:09:33,899 --> 00:09:39,540
Cloud Foundry power foundry is then

00:09:37,009 --> 00:09:41,310
learning the detect in the bill packs

00:09:39,540 --> 00:09:43,079
against this to work out which build

00:09:41,310 --> 00:09:45,600
packs it run it's as you can see

00:09:43,079 --> 00:09:48,540
detected Ruby

00:09:45,600 --> 00:09:50,220
it's then fetching down the gems staging

00:09:48,540 --> 00:09:53,819
the entire thing and then it's going to

00:09:50,220 --> 00:09:55,380
run it for us so during this time I

00:09:53,819 --> 00:09:57,540
think I should be sacrificing an animal

00:09:55,380 --> 00:09:59,899
of some kind to the demo gods it appears

00:09:57,540 --> 00:09:59,899
to be working

00:10:08,720 --> 00:10:16,079
come on come on come on we'll get there

00:10:11,399 --> 00:10:21,630
in the end so when this is ready we will

00:10:16,079 --> 00:10:28,519
have a hopefully a running Ruby Sinatra

00:10:21,630 --> 00:10:28,519
application array so then we can

00:10:36,630 --> 00:10:39,630
okay

00:10:45,720 --> 00:10:50,459
Hey so Cloud Foundry isn't it amazing

00:10:48,720 --> 00:10:51,870
and I think whilst that's very very

00:10:50,459 --> 00:10:54,839
straightforward and you may have seen

00:10:51,870 --> 00:10:57,509
that before that's a fantastic user

00:10:54,839 --> 00:11:01,290
journey I just pushed my app and I've

00:10:57,509 --> 00:11:05,009
got something running what happens when

00:11:01,290 --> 00:11:07,370
I can't just push my app into Cloud

00:11:05,009 --> 00:11:12,660
Foundry what happens next

00:11:07,370 --> 00:11:18,170
so traditionally I take some VMs I fire

00:11:12,660 --> 00:11:20,759
up this VMs I wire them together with a

00:11:18,170 --> 00:11:23,220
storage and networking and I sought out

00:11:20,759 --> 00:11:24,180
DNS and I do load balancing I do a whole

00:11:23,220 --> 00:11:26,129
ton of work

00:11:24,180 --> 00:11:27,839
I then obviously with my PMS I have to

00:11:26,129 --> 00:11:29,759
use chef or puppet to orchestrate them

00:11:27,839 --> 00:11:31,529
and I've worked with clients where

00:11:29,759 --> 00:11:32,459
they've been having the system and yes

00:11:31,529 --> 00:11:35,009
they're using infrastructure as the

00:11:32,459 --> 00:11:36,660
service they're using AWS but they have

00:11:35,009 --> 00:11:38,220
a three month lag to get things out the

00:11:36,660 --> 00:11:40,980
door because you've got a right chef and

00:11:38,220 --> 00:11:42,449
do various things with infrastructure so

00:11:40,980 --> 00:11:44,670
we've still got this long feedback delay

00:11:42,449 --> 00:11:49,110
and that's the opposite of what I wanted

00:11:44,670 --> 00:11:52,230
I wanted things to be done quick so this

00:11:49,110 --> 00:11:54,899
is a problem as I see it and I think

00:11:52,230 --> 00:11:58,139
this problem is being addressed by

00:11:54,899 --> 00:12:00,809
solutions such as docker so you see from

00:11:58,139 --> 00:12:07,189
the quote here am i per application will

00:12:00,809 --> 00:12:12,180
stop being a thing because docker so

00:12:07,189 --> 00:12:14,819
second demo quick docker demo so I've

00:12:12,180 --> 00:12:19,470
got a vagrant VM here with docker

00:12:14,819 --> 00:12:28,079
running on it I'm in a directory with a

00:12:19,470 --> 00:12:34,740
docker file if I cap the docker file you

00:12:28,079 --> 00:12:37,800
can see I'm using a CentOS base box I'm

00:12:34,740 --> 00:12:40,860
installing an RPM if you're install that

00:12:37,800 --> 00:12:44,009
rpm please have yourself there's a link

00:12:40,860 --> 00:12:47,399
there too it's being hosted on s3 I'm

00:12:44,009 --> 00:12:52,730
exposing port 80 and then I'm starting

00:12:47,399 --> 00:12:57,600
the daemon that the RPM has installed so

00:12:52,730 --> 00:12:59,970
this would be challenging at best inside

00:12:57,600 --> 00:13:03,180
of cloud foundry with the build pack

00:12:59,970 --> 00:13:10,460
but with docker this is straightforward

00:13:03,180 --> 00:13:13,830
simple commands so if I if I build this

00:13:10,460 --> 00:13:16,830
so build clever server you saw how fast

00:13:13,830 --> 00:13:23,000
that was to build this container and if

00:13:16,830 --> 00:13:25,470
I run this with that command docker run

00:13:23,000 --> 00:13:33,170
my containers now running and again you

00:13:25,470 --> 00:13:37,440
saw just how fast this was so my co

00:13:33,170 --> 00:13:42,750
localhost you see a game some amazing

00:13:37,440 --> 00:13:45,630
fantastic cloud credo marketing but you

00:13:42,750 --> 00:13:48,570
saw just how fast that was to get this

00:13:45,630 --> 00:13:53,820
up and running but there's a problem

00:13:48,570 --> 00:13:56,610
here what happens when I want to push

00:13:53,820 --> 00:13:58,170
this out and run this in a distributed

00:13:56,610 --> 00:14:00,270
system what happens when I want to

00:13:58,170 --> 00:14:03,000
deploy that docker container this was on

00:14:00,270 --> 00:14:06,540
a vagrant VM on my local machine so what

00:14:03,000 --> 00:14:08,970
happens when I want to scale this to a

00:14:06,540 --> 00:14:13,020
thousand containers what happens when I

00:14:08,970 --> 00:14:14,970
want to load balanced across multiple

00:14:13,020 --> 00:14:16,860
containers when I want to bind in my

00:14:14,970 --> 00:14:18,780
data services where I won't use

00:14:16,860 --> 00:14:20,340
administration to say these users here

00:14:18,780 --> 00:14:21,390
can look after these containers and

00:14:20,340 --> 00:14:23,580
these eaters here can look after these

00:14:21,390 --> 00:14:27,450
containers what happens when I want to

00:14:23,580 --> 00:14:30,710
deploy to some infrastructure on AWS and

00:14:27,450 --> 00:14:34,830
some to my local cloud and some to

00:14:30,710 --> 00:14:36,270
Rackspace or HP cloud so there's a lot

00:14:34,830 --> 00:14:38,070
of questions there and the more astute

00:14:36,270 --> 00:14:43,710
amongst you were noticed I am listing

00:14:38,070 --> 00:14:46,800
the features of cloud foundry so what

00:14:43,710 --> 00:14:49,590
I'm saying is I want that CF push

00:14:46,800 --> 00:14:53,100
journey that I demoed earlier on I want

00:14:49,590 --> 00:14:58,590
that journey for docker I want see a

00:14:53,100 --> 00:15:03,540
push for docker when the same speed so I

00:14:58,590 --> 00:15:05,250
thought I love Cloud Foundry and I love

00:15:03,540 --> 00:15:09,200
docker and I'm going to stick the two

00:15:05,250 --> 00:15:14,390
together and get the value of both and

00:15:09,200 --> 00:15:14,390
thus the idea for Decca was Bor

00:15:14,750 --> 00:15:20,430
so as you all know there's a few

00:15:18,990 --> 00:15:23,370
projects doing interesting things around

00:15:20,430 --> 00:15:25,500
the cloud foundry and docker space so

00:15:23,370 --> 00:15:27,120
you saw birdies taught yesterday which

00:15:25,500 --> 00:15:28,890
was great around using boss with docker

00:15:27,120 --> 00:15:30,810
so my approach is slightly different

00:15:28,890 --> 00:15:33,000
I've seen this as you've just seen from

00:15:30,810 --> 00:15:35,730
what I'm talking about from the outside

00:15:33,000 --> 00:15:38,430
in from the top down I'm saying I want

00:15:35,730 --> 00:15:40,710
docker to be as consumable as possible

00:15:38,430 --> 00:15:43,350
I want this CF push journey so I as a

00:15:40,710 --> 00:15:51,770
user want to just say there's my

00:15:43,350 --> 00:15:51,770
container make it run make it scale so

00:15:52,100 --> 00:16:04,200
third demo we're doing well so far see

00:15:58,680 --> 00:16:06,150
if this is any faster yeah well this is

00:16:04,200 --> 00:16:06,750
happening dogs do a squirrel dance oh it

00:16:06,150 --> 00:16:10,770
was fast

00:16:06,750 --> 00:16:12,360
okay so we've got our space you can see

00:16:10,770 --> 00:16:14,130
the application we pushed earlier on

00:16:12,360 --> 00:16:19,740
which we see a test this now in that

00:16:14,130 --> 00:16:25,620
space in this directory we have a docker

00:16:19,740 --> 00:16:27,240
file I can't the doctor file you can see

00:16:25,620 --> 00:16:29,100
it's the same doctor file as before we

00:16:27,240 --> 00:16:31,920
just run this in a vagrant VM we've got

00:16:29,100 --> 00:16:35,540
this docker file but you want to run it

00:16:31,920 --> 00:16:35,540
in the cloud so let's give it a go

00:16:44,040 --> 00:16:49,610
so I'm giving Cloud Foundry a hint

00:16:46,820 --> 00:16:53,390
saying we want to use the deck a stack

00:16:49,610 --> 00:16:53,390
same defaults as before

00:17:01,970 --> 00:17:06,009
and now we are uploading the docker file

00:17:06,819 --> 00:17:11,480
Cloud Foundry is using the layers and

00:17:10,339 --> 00:17:12,860
it's like the dock if I had been pushed

00:17:11,480 --> 00:17:14,509
to his Cloud Foundry before so it's nice

00:17:12,860 --> 00:17:26,589
and quick so you saw how fast that was

00:17:14,509 --> 00:17:26,589
to start it let's curl this like a type

00:17:32,410 --> 00:17:40,510
arrey and we've got our amazing cloud

00:17:36,490 --> 00:17:42,760
credo marketing so you've seen how easy

00:17:40,510 --> 00:17:44,830
that was to just push a container into

00:17:42,760 --> 00:17:53,460
the cloud and in case you think it's the

00:17:44,830 --> 00:17:53,460
same app will now do CF stop don't test

00:18:03,790 --> 00:18:12,680
so that stopped a container so it really

00:18:07,790 --> 00:18:20,330
is that easy to push containers into a

00:18:12,680 --> 00:18:24,260
Cloud Foundry so I think this is how

00:18:20,330 --> 00:18:26,450
things used to look our users could use

00:18:24,260 --> 00:18:27,680
software our apps could go into powers

00:18:26,450 --> 00:18:30,110
and cloud package was great and giving

00:18:27,680 --> 00:18:32,900
us that journey but VMs when we had to

00:18:30,110 --> 00:18:35,450
drop down to vm's it was slow and I want

00:18:32,900 --> 00:18:39,050
things to look like this I want to bring

00:18:35,450 --> 00:18:40,850
in a new layer between platform as a

00:18:39,050 --> 00:18:42,370
service and infrastructure as a service

00:18:40,850 --> 00:18:45,230
because I think there is value in

00:18:42,370 --> 00:18:46,820
containers as a service I think

00:18:45,230 --> 00:18:49,460
sometimes we will need to drop down to

00:18:46,820 --> 00:18:51,200
VMs but only when we need to have a

00:18:49,460 --> 00:18:52,640
custom kernel or do something that

00:18:51,200 --> 00:18:54,650
changes the kernel because with

00:18:52,640 --> 00:18:57,530
containers as a service our contract is

00:18:54,650 --> 00:19:01,640
with the kernel so we have these units

00:18:57,530 --> 00:19:03,170
of currency apps containers VMs that are

00:19:01,640 --> 00:19:08,480
being pushed into the cloud and we're

00:19:03,170 --> 00:19:14,900
asking the cloud to run them for us so

00:19:08,480 --> 00:19:19,490
let's look at the road map and look at

00:19:14,900 --> 00:19:22,310
where Dec is going so this is fairly

00:19:19,490 --> 00:19:24,890
obvious we've just pushed a docker file

00:19:22,310 --> 00:19:27,680
I want to be able to push an image of a

00:19:24,890 --> 00:19:31,850
container so it will be more more bytes

00:19:27,680 --> 00:19:36,380
but he'll be more deterministic so I

00:19:31,850 --> 00:19:39,050
think this is a good step forward I've

00:19:36,380 --> 00:19:42,320
run from Cloud Foundry non-http rooting

00:19:39,050 --> 00:19:44,930
and this was actually on yeah this is

00:19:42,320 --> 00:19:50,570
actually on James bear's list of things

00:19:44,930 --> 00:19:51,860
today so again we can we could reuse H a

00:19:50,570 --> 00:19:53,120
proxy we could do a manner of things

00:19:51,860 --> 00:19:54,650
here this isn't gonna be too tricky I

00:19:53,120 --> 00:19:57,730
think and then we can also add multiple

00:19:54,650 --> 00:20:02,060
ports per container

00:19:57,730 --> 00:20:05,720
the big challenge persistent state what

00:20:02,060 --> 00:20:08,180
do we do with the containers when they

00:20:05,720 --> 00:20:09,680
persist some state locally so at the

00:20:08,180 --> 00:20:12,320
moment these containers inside of cloud

00:20:09,680 --> 00:20:14,240
foundry are ephemeral if you scale up

00:20:12,320 --> 00:20:16,850
scale down if you stop the app and

00:20:14,240 --> 00:20:19,100
restart the app the data will be lost

00:20:16,850 --> 00:20:21,380
I think this is very challenging and I

00:20:19,100 --> 00:20:23,150
think there isn't one answer to this I

00:20:21,380 --> 00:20:24,590
think consistency and availability in

00:20:23,150 --> 00:20:26,180
those kind of challenges and distributed

00:20:24,590 --> 00:20:29,090
systems I mean this is a very difficult

00:20:26,180 --> 00:20:30,920
thing to deal with but I think we need

00:20:29,090 --> 00:20:34,640
to at least have a look at it and make

00:20:30,920 --> 00:20:39,440
some progress in this direction this I

00:20:34,640 --> 00:20:41,390
think is awesome so imagine we were back

00:20:39,440 --> 00:20:45,400
at the start so we had our Ruby

00:20:41,390 --> 00:20:49,100
application just there in a directory

00:20:45,400 --> 00:20:50,630
and you want to see some local fast

00:20:49,100 --> 00:20:52,850
feedback to see how it went inside the

00:20:50,630 --> 00:20:56,540
Cloud Foundry well if we type Dekker

00:20:52,850 --> 00:20:59,390
bill dot it can use the build pack the

00:20:56,540 --> 00:21:04,580
Ruby build pack and build us a docker

00:20:59,390 --> 00:21:06,950
container we can run locally so you can

00:21:04,580 --> 00:21:08,390
then just do docker run for that

00:21:06,950 --> 00:21:10,220
container and you have what is

00:21:08,390 --> 00:21:11,960
essentially a single instance Cloud

00:21:10,220 --> 00:21:17,600
Foundry running on your local machine

00:21:11,960 --> 00:21:18,740
with zero overhead so I was working on

00:21:17,600 --> 00:21:20,450
this on the plane on the way over here

00:21:18,740 --> 00:21:21,740
unfortunately I haven't finished it yet

00:21:20,450 --> 00:21:23,360
otherwise it would have been for demos

00:21:21,740 --> 00:21:25,640
in half an hour and that would have been

00:21:23,360 --> 00:21:27,380
a new world record but this is really

00:21:25,640 --> 00:21:29,200
close and I think this huge value in

00:21:27,380 --> 00:21:31,130
this for the developer feedback cycle

00:21:29,200 --> 00:21:33,050
because you can just rebuild and rebuild

00:21:31,130 --> 00:21:34,550
and rebuild you're using the build pack

00:21:33,050 --> 00:21:38,060
Cloud Foundry is going to use you're

00:21:34,550 --> 00:21:39,560
using the looter 64 root filesystem so

00:21:38,060 --> 00:21:40,640
you've got something that looks exactly

00:21:39,560 --> 00:21:42,380
the same it's a thing that's going to

00:21:40,640 --> 00:21:43,640
run inside a plow foundry but it's on

00:21:42,380 --> 00:21:49,520
your local machine you have a much

00:21:43,640 --> 00:21:51,290
faster feedback cycle I want remote

00:21:49,520 --> 00:21:53,420
container orchestration this currently

00:21:51,290 --> 00:21:55,610
runs on a custom DEA inside of cloud

00:21:53,420 --> 00:21:56,300
foundry why can't that DEA just be a

00:21:55,610 --> 00:21:58,490
process

00:21:56,300 --> 00:22:00,770
why can't you push containers to elastic

00:21:58,490 --> 00:22:04,760
Beanstalk to Google compute we're going

00:22:00,770 --> 00:22:05,840
to orchestrate things remotely so

00:22:04,760 --> 00:22:14,360
there's no reason why this can't happen

00:22:05,840 --> 00:22:16,280
this is where we get quite dreamy why

00:22:14,360 --> 00:22:17,900
just push containers if you need to work

00:22:16,280 --> 00:22:19,940
with virtual machines why can't we push

00:22:17,900 --> 00:22:21,410
machine images into cloud foundry and

00:22:19,940 --> 00:22:26,120
say orchestrate this for me

00:22:21,410 --> 00:22:29,600
you saw the Diego demo today where it

00:22:26,120 --> 00:22:30,710
has the game and it means the it can

00:22:29,600 --> 00:22:33,049
schedule the

00:22:30,710 --> 00:22:34,730
the droplets to run across different

00:22:33,049 --> 00:22:36,500
execution agents why can't they be

00:22:34,730 --> 00:22:42,350
clouds and why can't we shed your VMs to

00:22:36,500 --> 00:22:44,390
run across execution agents see you

00:22:42,350 --> 00:22:46,220
could have OpenStack VMware AWS and

00:22:44,390 --> 00:22:47,899
depending upon price or performance at

00:22:46,220 --> 00:22:52,450
the time it could schedule them

00:22:47,899 --> 00:22:52,450
dynamically for you so CF push VM image

00:22:53,620 --> 00:23:01,850
so I think the future for Cloud Foundry

00:22:56,510 --> 00:23:04,130
actually looks a little like this it's

00:23:01,850 --> 00:23:06,289
not just about apps apps of one unit of

00:23:04,130 --> 00:23:09,470
currency but you think of Cloud Foundry

00:23:06,289 --> 00:23:13,549
as an intelligent shed EULA an

00:23:09,470 --> 00:23:15,950
Orchestrator why can't we show you all

00:23:13,549 --> 00:23:18,200
different units of currency you've just

00:23:15,950 --> 00:23:20,270
seen containers we could have VMs as

00:23:18,200 --> 00:23:22,640
well and we can back-end to things that

00:23:20,270 --> 00:23:23,390
aren't actually traditionally part of

00:23:22,640 --> 00:23:25,039
Cloud Foundry

00:23:23,390 --> 00:23:26,510
we've got Cloud Foundry de A's in there

00:23:25,039 --> 00:23:29,090
for our apps but Claire found you could

00:23:26,510 --> 00:23:31,070
share it on to Heroku it can shade your

00:23:29,090 --> 00:23:33,169
containers into decker but to orchard to

00:23:31,070 --> 00:23:34,789
Google compute it could share your VMs

00:23:33,169 --> 00:23:36,590
on your local OpenStack deployment and

00:23:34,789 --> 00:23:39,020
then when that runs out of space you

00:23:36,590 --> 00:23:40,460
could go out to AWS the amazing cloud

00:23:39,020 --> 00:23:46,340
burst dream we've all been waiting for

00:23:40,460 --> 00:23:51,770
it for many years so I'm not sure this

00:23:46,340 --> 00:23:53,090
is an ideal it's just an idea but I

00:23:51,770 --> 00:23:54,740
think this is where Cloud Foundry could

00:23:53,090 --> 00:24:00,320
go and it's a different paradigm to

00:23:54,740 --> 00:24:03,770
thinking about Cloud Foundry so I

00:24:00,320 --> 00:24:08,990
started this talk with the quote this is

00:24:03,770 --> 00:24:11,750
a small project from some si and cloud

00:24:08,990 --> 00:24:14,720
credo are a small company only 20 of us

00:24:11,750 --> 00:24:16,070
we're doing our best but I don't think

00:24:14,720 --> 00:24:17,960
this is a small project I think this is

00:24:16,070 --> 00:24:21,559
a really big project and a really big

00:24:17,960 --> 00:24:24,770
vision and we need the e the ecosystem

00:24:21,559 --> 00:24:28,220
of cloud foundry to help us deliver on

00:24:24,770 --> 00:24:29,929
this so my challenge to you is that I

00:24:28,220 --> 00:24:31,460
want to collaborate with you I want to

00:24:29,929 --> 00:24:32,720
work with you you've probably heard the

00:24:31,460 --> 00:24:35,179
cloud credo name a few times today

00:24:32,720 --> 00:24:38,679
please get in contact with us we want to

00:24:35,179 --> 00:24:38,679
work with you to make this happen

00:24:39,250 --> 00:24:46,250
so these are my contact details please

00:24:44,210 --> 00:24:53,990
feel free to get in contact we want to

00:24:46,250 --> 00:25:06,080
work with you any questions yeah thank

00:24:53,990 --> 00:25:09,530
you so Cloud Foundry is always so the

00:25:06,080 --> 00:25:11,840
question was I was pushing the container

00:25:09,530 --> 00:25:14,300
with - - stack Dekker

00:25:11,840 --> 00:25:16,190
so stacks have existed for a long time

00:25:14,300 --> 00:25:18,140
inside of Cloud Foundry but by default

00:25:16,190 --> 00:25:20,830
you only have one stack you have the

00:25:18,140 --> 00:25:23,540
loot is 64 stack so that's what's used

00:25:20,830 --> 00:25:25,010
so it has existed it is a concept but

00:25:23,540 --> 00:25:26,570
it's not used very frequently because

00:25:25,010 --> 00:25:28,900
most of the stuff all the bill packs

00:25:26,570 --> 00:25:32,470
that you know all use the Lucid 64 stack

00:25:28,900 --> 00:25:34,700
so right now if we're adding a stack for

00:25:32,470 --> 00:25:36,710
dotnet I'm not sure house is going to be

00:25:34,700 --> 00:25:39,590
reflective when Diego comes online but

00:25:36,710 --> 00:25:41,600
you'd have to use a.net stack so I'm

00:25:39,590 --> 00:25:44,450
using a Decker stack which means I'm

00:25:41,600 --> 00:25:46,430
dropping out not using worden I'm using

00:25:44,450 --> 00:25:48,830
docker instead and I'm giving the

00:25:46,430 --> 00:25:51,920
decline a hint to say take this and push

00:25:48,830 --> 00:26:01,490
it into that stack any more questions

00:25:51,920 --> 00:26:04,610
yes why am i using the it's a very good

00:26:01,490 --> 00:26:06,470
question why am i using the Ruby CLI

00:26:04,610 --> 00:26:10,160
rather than the go seer light because

00:26:06,470 --> 00:26:12,530
the the the code at the moment is

00:26:10,160 --> 00:26:14,930
against a release that's not compatible

00:26:12,530 --> 00:26:17,120
with the go see Elijah there's some

00:26:14,930 --> 00:26:21,050
routing issues with the code this is

00:26:17,120 --> 00:26:23,870
working against so yes I do very much

00:26:21,050 --> 00:26:25,160
love the go CLI it's brilliant but this

00:26:23,870 --> 00:26:29,230
current setup has an issue were to go

00:26:25,160 --> 00:26:29,230
CLI any more questions yep

00:26:46,520 --> 00:26:51,630
okay so the question is why if I use a -

00:26:49,650 --> 00:26:53,760
- tech option rather than using a bill

00:26:51,630 --> 00:26:56,790
pack option your client will have the

00:26:53,760 --> 00:26:58,350
stack option so all the clients I'm

00:26:56,790 --> 00:26:59,640
aware of the go client Reba client

00:26:58,350 --> 00:27:02,850
definitely had to stack option you just

00:26:59,640 --> 00:27:04,440
don't see it used very often so I think

00:27:02,850 --> 00:27:05,640
this implementation changed in any of

00:27:04,440 --> 00:27:07,380
the pivotal people in the room can

00:27:05,640 --> 00:27:10,170
correct me on this I think it maybe was

00:27:07,380 --> 00:27:12,780
- their stack and then it became - s I

00:27:10,170 --> 00:27:15,000
think it may have changed with them team

00:27:12,780 --> 00:27:16,290
version 5 of version 6 but to the best

00:27:15,000 --> 00:27:25,800
of my knowledge all the cloud foundry

00:27:16,290 --> 00:27:28,410
clients have the stack option yeah so

00:27:25,800 --> 00:27:31,080
this implementation very much relies

00:27:28,410 --> 00:27:32,700
upon the stack being there you have to

00:27:31,080 --> 00:27:35,250
give it this hint to make this work

00:27:32,700 --> 00:27:37,050
because it is it the implementation is a

00:27:35,250 --> 00:27:39,270
separate stack so if you try to do it

00:27:37,050 --> 00:27:41,430
with a bill pack and it tried to use the

00:27:39,270 --> 00:27:44,640
loo 264 stack it would then try and

00:27:41,430 --> 00:27:46,350
stage and run inside of loot is 64 which

00:27:44,640 --> 00:27:49,230
would then use worden and then we have

00:27:46,350 --> 00:28:01,500
some some challenges around making Ward

00:27:49,230 --> 00:28:04,130
and we're with docker okay thank you hey

00:28:01,500 --> 00:28:04,130
questions yes

00:28:10,110 --> 00:28:13,540
I'm sorry I couldn't quite hear that I

00:28:12,400 --> 00:28:34,060
played the drum so many years and I've

00:28:13,540 --> 00:28:37,810
lost my hearing completely okay so the

00:28:34,060 --> 00:28:40,270
question is if we used Dekker rather

00:28:37,810 --> 00:28:42,670
than bush light would we be using far

00:28:40,270 --> 00:28:44,800
less memory is that kind of correct okay

00:28:42,670 --> 00:28:48,430
so that's very very much

00:28:44,800 --> 00:28:50,320
my my my hope the functionality to run

00:28:48,430 --> 00:28:53,490
on a local machine is not currently

00:28:50,320 --> 00:28:56,170
implemented this was pushing out to AWS

00:28:53,490 --> 00:28:57,550
but that deck of build command I showed

00:28:56,170 --> 00:28:59,680
well we want to build a container and

00:28:57,550 --> 00:29:02,770
run it locally that should mean that it

00:28:59,680 --> 00:29:05,920
runs in a fraction of the RAM of Bosh

00:29:02,770 --> 00:29:08,080
lying so my laptop here my amazing Linux

00:29:05,920 --> 00:29:10,660
laptop whoever said it's bad

00:29:08,080 --> 00:29:12,160
my amazing Linux laptop only has six gig

00:29:10,660 --> 00:29:13,930
of ram and I can't run a full Bosh like

00:29:12,160 --> 00:29:15,190
the cloud foundry so I'm being

00:29:13,930 --> 00:29:17,320
completely selfish here from a user

00:29:15,190 --> 00:29:18,970
perspective if this is running inside a

00:29:17,320 --> 00:29:21,550
container on my local machine is going

00:29:18,970 --> 00:29:24,370
to use a tiny amount of RAM and be a

00:29:21,550 --> 00:29:25,810
much faster feedback cycle so I'm sorry

00:29:24,370 --> 00:29:27,820
I'm taking up all of Elizabeth's time I

00:29:25,810 --> 00:29:30,150
do apologize and this address any more

00:29:27,820 --> 00:29:30,150
questions

00:29:32,130 --> 00:29:35,289
[Applause]

00:29:36,860 --> 00:29:39,770
thank you very much

00:29:38,160 --> 00:29:43,059
[Applause]

00:29:39,770 --> 00:29:43,059

YouTube URL: https://www.youtube.com/watch?v=IP0fpP_Nl4I


