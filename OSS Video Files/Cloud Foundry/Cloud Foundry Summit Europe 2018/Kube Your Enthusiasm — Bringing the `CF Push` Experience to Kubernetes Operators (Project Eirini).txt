Title: Kube Your Enthusiasm — Bringing the `CF Push` Experience to Kubernetes Operators (Project Eirini)
Publication date: 2018-10-11
Playlist: Cloud Foundry Summit Europe 2018
Description: 
	Kube Your Enthusiasm — Bringing the `CF Push` Experience to Kubernetes Operators (Project Eirini) - Julz Friedman & Julian Skupnjak, IBM

Is container scheduling commoditised yet?

The Eirini project (now an “official” incubator project in the Runtime PMC) is bringing pluggable container scheduling to the Cloud Foundry Application Runtime. In other words: the `cf push` developer experience we all love, with your choice of container orchestrator - including Kubernetes - under the covers. 

This session will introduce the Eirini project, talk through the reasons behind it, and tell you what it means for your developers (not much) and your operators (for many of them, quite a lot!). 

We’re also going to demo getting up and running with Eirini on Kubernetes using a single Helm chart. This way you - and your Kubernetes-loving friends and colleagues! - can try out the `cf push` developer experience, going from code to first-class Deployments, Pods and Services in your existing Kubernetes cluster, all in a single command!

https://cfseu18.sched.com/event/FRy8/kube-your-enthusiasm-bringing-the-cf-push-experience-to-kubernetes-operators-project-eirini-julz-friedman-julian-skupnjak-ibm
Captions: 
	00:00:00,030 --> 00:00:09,030
welcome to intro to irony this

00:00:05,270 --> 00:00:13,200
I'm deeply aware that it's this talk the

00:00:09,030 --> 00:00:15,570
next talk and then beer this is worth it

00:00:13,200 --> 00:00:20,160
I promise this is our intro to really

00:00:15,570 --> 00:00:22,020
talk if you haven't heard of irony which

00:00:20,160 --> 00:00:23,880
I'm now realizing might well be

00:00:22,020 --> 00:00:25,920
pronounced irony

00:00:23,880 --> 00:00:31,279
are there any Greek people in the

00:00:25,920 --> 00:00:35,630
audience it's even your ireenie Irie me

00:00:31,279 --> 00:00:35,630
neither is the answer for that question

00:00:37,770 --> 00:00:42,110
we're gonna we're gonna get started so

00:00:39,480 --> 00:00:45,329
this is also quite intro to it it really

00:00:42,110 --> 00:00:52,579
clickers never work on stage there is no

00:00:45,329 --> 00:00:55,649
clicker well watch that

00:00:52,579 --> 00:00:59,870
so I am dr. Jules I'm an IBM a--

00:00:55,649 --> 00:01:02,550
i'm a proud Aranea oh sorry

00:00:59,870 --> 00:01:07,470
don't worry kubernetes is more stable

00:01:02,550 --> 00:01:10,799
than keynote this is hey Jules my

00:01:07,470 --> 00:01:13,100
colleague and we are going to tell you

00:01:10,799 --> 00:01:17,159
about irony this talk is in three parts

00:01:13,100 --> 00:01:21,060
the first part is why we have done such

00:01:17,159 --> 00:01:24,270
a thing as irony the second part is how

00:01:21,060 --> 00:01:27,360
we did such a thing as ireenie and the

00:01:24,270 --> 00:01:30,689
third part is a demo of the thing that

00:01:27,360 --> 00:01:32,880
we did called irony or this is my

00:01:30,689 --> 00:01:38,579
favorite slides in the words of the

00:01:32,880 --> 00:01:42,119
Buddha there is suffering there is a

00:01:38,579 --> 00:01:45,360
path to end suffering and this is a demo

00:01:42,119 --> 00:01:47,990
of the path to end suffering so if that

00:01:45,360 --> 00:01:52,130
doesn't set us up I don't know what does

00:01:47,990 --> 00:01:56,430
let's talk about why we're doing this

00:01:52,130 --> 00:01:58,950
okay so for the last few summits there

00:01:56,430 --> 00:02:02,820
has been a big scary elephant in the

00:01:58,950 --> 00:02:07,860
room and this elephant has a name it's

00:02:02,820 --> 00:02:09,000
kubernetes and what we did we give it a

00:02:07,860 --> 00:02:13,710
less scary name right

00:02:09,000 --> 00:02:18,780
see FCR and we put it next to see if

00:02:13,710 --> 00:02:20,910
they are but renaming things doesn't

00:02:18,780 --> 00:02:26,070
really solve our problems right it's

00:02:20,910 --> 00:02:28,080
still cloud foundry and kubernetes click

00:02:26,070 --> 00:02:32,340
ok I think I have to switch to this

00:02:28,080 --> 00:02:36,330
click ah there we go and people start

00:02:32,340 --> 00:02:38,400
asking questions is it kubernetes versus

00:02:36,330 --> 00:02:41,190
cloth laundry is it kubernetes and cloud

00:02:38,400 --> 00:02:43,290
foundry or is it kubernetes or cloud

00:02:41,190 --> 00:02:46,380
foundry and that's all valid questions

00:02:43,290 --> 00:02:48,480
right but we before we get to these

00:02:46,380 --> 00:02:53,040
questions let's first talk about what

00:02:48,480 --> 00:02:58,470
cloud foundry and what kubernetes is so

00:02:53,040 --> 00:03:01,500
clock foundry is two things it is a CF

00:02:58,470 --> 00:03:03,240
push my app CF find my service and of

00:03:01,500 --> 00:03:07,380
course it's the container Orchestrator

00:03:03,240 --> 00:03:09,630
Diego and garden so that the thing that

00:03:07,380 --> 00:03:12,570
runs all this stuff in the cloud there

00:03:09,630 --> 00:03:14,760
how and the CF push is the developer

00:03:12,570 --> 00:03:17,850
experience and you can also see this

00:03:14,760 --> 00:03:21,180
from another perspective which is the

00:03:17,850 --> 00:03:24,870
from our own perspective and the CF push

00:03:21,180 --> 00:03:26,640
here is the developer role and they're

00:03:24,870 --> 00:03:29,220
all the backend stuff like the container

00:03:26,640 --> 00:03:31,230
Orchestrator Diego and garden this is

00:03:29,220 --> 00:03:34,350
the operator role so we have here a

00:03:31,230 --> 00:03:38,640
clear separation of concerns but what we

00:03:34,350 --> 00:03:41,520
really want and what I really love is

00:03:38,640 --> 00:03:44,280
DCF push experience and I'm try it at a

00:03:41,520 --> 00:03:46,410
lot of people here love to see spost

00:03:44,280 --> 00:03:49,380
experience that cloud firmly provides us

00:03:46,410 --> 00:03:52,860
I mean the container operator is great

00:03:49,380 --> 00:03:54,930
and I mean Jules is fascinated by garden

00:03:52,860 --> 00:03:57,570
and all the low level stuff containers

00:03:54,930 --> 00:04:01,950
but what we really love is the CF

00:03:57,570 --> 00:04:04,980
portion that's what we want so what is

00:04:01,950 --> 00:04:07,080
kubernetes Karina's is deployment

00:04:04,980 --> 00:04:09,600
stateful says replica sets no it's pod

00:04:07,080 --> 00:04:10,110
stains annotation daemon sets I could do

00:04:09,600 --> 00:04:14,610
it forever

00:04:10,110 --> 00:04:17,280
and looking at this from a role

00:04:14,610 --> 00:04:19,470
perspective ah yeah a little bit

00:04:17,280 --> 00:04:21,780
overlapping right so somebody who

00:04:19,470 --> 00:04:25,200
deploys an app could be a developer or

00:04:21,780 --> 00:04:27,210
maybe operator there's some tools like

00:04:25,200 --> 00:04:28,919
package manager like helm

00:04:27,210 --> 00:04:33,150
just for developers to make it easier

00:04:28,919 --> 00:04:35,759
but still it's not clear and still with

00:04:33,150 --> 00:04:38,430
all these options kubernetes is a

00:04:35,759 --> 00:04:41,430
powerful and a great scheduler and it

00:04:38,430 --> 00:04:44,430
gives the operators the flexibility they

00:04:41,430 --> 00:04:49,770
need and that's where kubernetes has

00:04:44,430 --> 00:04:52,320
place but for the developers it's maybe

00:04:49,770 --> 00:04:54,180
a little bit too complex right and as

00:04:52,320 --> 00:04:57,110
the founders already of kubernetes said

00:04:54,180 --> 00:05:00,060
it is a platform platform which means

00:04:57,110 --> 00:05:01,830
that kubernetes is a platform to build

00:05:00,060 --> 00:05:05,330
platforms and it's not a platform by

00:05:01,830 --> 00:05:09,440
itself so it's never intended to be this

00:05:05,330 --> 00:05:13,110
developer experience like love for me

00:05:09,440 --> 00:05:15,690
so we have them side by side we have the

00:05:13,110 --> 00:05:17,669
developers of cloud foundry and we have

00:05:15,690 --> 00:05:19,680
the operators of the foundry the left

00:05:17,669 --> 00:05:21,389
side and we have communities on the

00:05:19,680 --> 00:05:23,490
other side with their operators and

00:05:21,389 --> 00:05:27,660
developers but what we would really

00:05:23,490 --> 00:05:31,949
would like to have is this we would like

00:05:27,660 --> 00:05:35,580
to have this developer experience from

00:05:31,949 --> 00:05:37,650
Cloud Foundry and make the operators

00:05:35,580 --> 00:05:40,979
happy with kubernetes and all the

00:05:37,650 --> 00:05:44,659
flexibility and power that it has and a

00:05:40,979 --> 00:05:47,370
few people already suggested some

00:05:44,659 --> 00:05:49,110
solutions to this and the first option

00:05:47,370 --> 00:05:51,150
that I want to talk about this one that

00:05:49,110 --> 00:05:56,550
already talked that we already mentioned

00:05:51,150 --> 00:05:57,840
it's putting it side by side so it's

00:05:56,550 --> 00:05:59,400
putting a side by side

00:05:57,840 --> 00:06:01,289
yeah we have the full power of 12

00:05:59,400 --> 00:06:02,760
foundry we have this CF push experience

00:06:01,289 --> 00:06:03,300
and yeah we have the full power of

00:06:02,760 --> 00:06:06,510
kubernetes

00:06:03,300 --> 00:06:09,360
but there's still some downsides with

00:06:06,510 --> 00:06:11,580
this he has two sets of nodes you have

00:06:09,360 --> 00:06:13,919
two schedulers to monitor you have two

00:06:11,580 --> 00:06:18,440
different ops models and you have two

00:06:13,919 --> 00:06:18,440
communities it's a lot of effort so

00:06:18,979 --> 00:06:29,430
option two is puff to the rescue so what

00:06:23,070 --> 00:06:32,310
is that it is using blush and deploy

00:06:29,430 --> 00:06:35,960
cloud foundry to coop so using a

00:06:32,310 --> 00:06:38,990
kubernetes CPI and while deploying

00:06:35,960 --> 00:06:40,750
containerized CF and put it on top of

00:06:38,990 --> 00:06:43,330
kubernetes and this

00:06:40,750 --> 00:06:45,100
of density so you only have one set of

00:06:43,330 --> 00:06:48,580
notes with us which is the coordinators

00:06:45,100 --> 00:06:52,840
notes and it is great but it still has

00:06:48,580 --> 00:06:54,880
some doubt sighs so you deploy a complex

00:06:52,840 --> 00:06:58,480
thing on top of another complex thing

00:06:54,880 --> 00:07:01,030
and either this you have apps nor CF has

00:06:58,480 --> 00:07:04,230
really any benefits of the coop

00:07:01,030 --> 00:07:09,430
scheduler which is a great scheduler ed

00:07:04,230 --> 00:07:12,340
and now you have two problems you had n

00:07:09,430 --> 00:07:15,610
plus M complex things but now you have

00:07:12,340 --> 00:07:19,000
nth time and called complex things for

00:07:15,610 --> 00:07:20,890
example let's say CPU limits so if a

00:07:19,000 --> 00:07:24,300
container runs out of memory is it's the

00:07:20,890 --> 00:07:24,300
inner container or the outer container

00:07:24,480 --> 00:07:30,460
now let's go to option three

00:07:27,270 --> 00:07:33,790
containerized cloud foundry this is a

00:07:30,460 --> 00:07:36,550
bad option I guess it is converting

00:07:33,790 --> 00:07:41,169
partially this upfront before we deploy

00:07:36,550 --> 00:07:42,910
and now we can use kubernetes native

00:07:41,169 --> 00:07:44,919
ways to deploy 12-pound which is awesome

00:07:42,910 --> 00:07:47,950
like helm it makes it really easy and

00:07:44,919 --> 00:07:50,410
now we have a real benefit and by the

00:07:47,950 --> 00:07:52,660
way this is now available on IBM cloud

00:07:50,410 --> 00:07:55,570
it's called Coventry Enterprise Edition

00:07:52,660 --> 00:07:59,380
so make sure to check it out yeah but

00:07:55,570 --> 00:08:02,590
now let's I still have to say there also

00:07:59,380 --> 00:08:04,780
some downsides to this we still have

00:08:02,590 --> 00:08:07,060
that complex thing in another complex we

00:08:04,780 --> 00:08:09,340
have this Diego scheduler inside the

00:08:07,060 --> 00:08:11,380
kubernetes scheduler which is scheduling

00:08:09,340 --> 00:08:13,750
containers into containers we have

00:08:11,380 --> 00:08:20,560
nested containers it's weird we have

00:08:13,750 --> 00:08:23,200
still this end time and problems so we

00:08:20,560 --> 00:08:26,260
looked at three options but each of

00:08:23,200 --> 00:08:28,990
those option doesn't really be it isn't

00:08:26,260 --> 00:08:30,580
really a good option so what's the

00:08:28,990 --> 00:08:33,640
solution to this and this is something

00:08:30,580 --> 00:08:35,169
that juice will tell you cool so I get

00:08:33,640 --> 00:08:38,500
to look smart by telling you the

00:08:35,169 --> 00:08:40,089
solution so let's talk about the

00:08:38,500 --> 00:08:41,560
solution and talk about the solution we

00:08:40,089 --> 00:08:42,250
want to talk about the goals what we're

00:08:41,560 --> 00:08:44,950
trying to achieve

00:08:42,250 --> 00:08:47,800
so to summarize again we want to keep

00:08:44,950 --> 00:08:51,820
that CF push experience that lets you

00:08:47,800 --> 00:08:54,040
focus on your code bind services

00:08:51,820 --> 00:08:54,460
push stateless code and don't worry

00:08:54,040 --> 00:08:56,710
about

00:08:54,460 --> 00:08:58,870
the other stuff but we don't want to

00:08:56,710 --> 00:09:01,390
make people learn and manage a new

00:08:58,870 --> 00:09:02,940
scheduler to do that we want them to be

00:09:01,390 --> 00:09:06,220
able to reuse the existing knowledge

00:09:02,940 --> 00:09:07,840
with a consistent experience and yeah

00:09:06,220 --> 00:09:12,070
we'd like to have one community and

00:09:07,840 --> 00:09:15,390
bring these together I've spent a lot of

00:09:12,070 --> 00:09:17,800
time talking to container people and I

00:09:15,390 --> 00:09:19,630
try and tell them about how great it is

00:09:17,800 --> 00:09:22,180
to just be able to see if push and not

00:09:19,630 --> 00:09:24,220
worry about things and then I have to

00:09:22,180 --> 00:09:26,500
explain to them that they're gonna have

00:09:24,220 --> 00:09:28,630
to learn Diego and then they're going to

00:09:26,500 --> 00:09:32,820
have to learn Bosch and you can see the

00:09:28,630 --> 00:09:36,190
enthusiasm drain away as you start to

00:09:32,820 --> 00:09:38,440
describe that and that's fair these are

00:09:36,190 --> 00:09:41,170
great technologies but asking anybody's

00:09:38,440 --> 00:09:44,050
to learn a whole different technology to

00:09:41,170 --> 00:09:48,190
use your stuff is a big ask even when

00:09:44,050 --> 00:09:49,180
your stuff is great which it is so what

00:09:48,190 --> 00:09:52,120
do we do about it

00:09:49,180 --> 00:09:54,070
cf is a developer experience so

00:09:52,120 --> 00:09:56,830
developer experience that I love and I

00:09:54,070 --> 00:09:58,060
want to use but Kubb is the scheduler

00:09:56,830 --> 00:10:00,490
that's got increasing amounts of

00:09:58,060 --> 00:10:02,560
mindshare and that a lot of operators

00:10:00,490 --> 00:10:05,470
already offer and already have skills in

00:10:02,560 --> 00:10:08,110
so let's use kubernetes as the Cloud

00:10:05,470 --> 00:10:10,630
Foundry scheduler and that way our

00:10:08,110 --> 00:10:14,470
developers are happy our operates are

00:10:10,630 --> 00:10:16,620
happy everyone is happy let's all be

00:10:14,470 --> 00:10:16,620
happy

00:10:18,760 --> 00:10:26,230
I knew if I paused long enough so this

00:10:24,820 --> 00:10:29,110
is Project serenely this is what this is

00:10:26,230 --> 00:10:31,690
this is OPI the orchestrator provider

00:10:29,110 --> 00:10:33,250
interface and were obviously riffing on

00:10:31,690 --> 00:10:35,800
this Bosh idea of a cloud provider

00:10:33,250 --> 00:10:36,760
interface which is how Bosh is able to

00:10:35,800 --> 00:10:38,980
run on all these different

00:10:36,760 --> 00:10:42,699
infrastructures as a service it's the

00:10:38,980 --> 00:10:43,690
same idea bad the container layer we're

00:10:42,699 --> 00:10:45,910
only going to implement it for

00:10:43,690 --> 00:10:47,350
kubernetes for now but actually being

00:10:45,910 --> 00:10:49,720
decoupled from that kubernetes

00:10:47,350 --> 00:10:51,730
abstraction it just seems like a good

00:10:49,720 --> 00:10:53,920
idea so we have this Orchestrator

00:10:51,730 --> 00:10:54,160
provider interface what does that look

00:10:53,920 --> 00:10:57,190
like

00:10:54,160 --> 00:11:00,910
here is a I call these complexity

00:10:57,190 --> 00:11:02,290
diagrams boxes you're not supposed to

00:11:00,910 --> 00:11:03,519
read the boxes you're just supposed to

00:11:02,290 --> 00:11:08,670
be able to kind of squint and see

00:11:03,519 --> 00:11:11,560
there's lots of them how do we how do we

00:11:08,670 --> 00:11:14,880
kuba nesaf i this how do we are-- nior

00:11:11,560 --> 00:11:18,579
ireenie or neither of the two if i this

00:11:14,880 --> 00:11:24,730
we do that as you can see is much more

00:11:18,579 --> 00:11:27,910
simple by squinting the big blue thing

00:11:24,730 --> 00:11:29,529
is kubernetes small pink thing is a

00:11:27,910 --> 00:11:32,079
little mapping layer which is called

00:11:29,529 --> 00:11:35,019
arena and in the original diego

00:11:32,079 --> 00:11:37,510
architecture we have a sync loop that

00:11:35,019 --> 00:11:40,240
converges things in the Kyle controller

00:11:37,510 --> 00:11:42,880
database your apps with things in the

00:11:40,240 --> 00:11:45,339
Diego database your containers your LR

00:11:42,880 --> 00:11:47,529
PS the same thing happens with the Rini

00:11:45,339 --> 00:11:50,230
we take the states in the cloud

00:11:47,529 --> 00:11:51,130
controller your apps and we sync them

00:11:50,230 --> 00:11:53,889
into kubernetes

00:11:51,130 --> 00:11:59,079
into deployments stateful sets and

00:11:53,889 --> 00:12:04,000
services so let's dive into that you do

00:11:59,079 --> 00:12:05,829
a CF push as this chart demonstrates it

00:12:04,000 --> 00:12:09,190
goes through a Rini it becomes

00:12:05,829 --> 00:12:12,040
kubernetes objects specifically if you

00:12:09,190 --> 00:12:15,160
know about CF you know that CF thinks in

00:12:12,040 --> 00:12:16,779
terms of droplets and root file systems

00:12:15,160 --> 00:12:19,269
whereas kubernetes thinks in terms of

00:12:16,779 --> 00:12:21,490
images well we didn't want to do was

00:12:19,269 --> 00:12:22,089
build something that was mapping to

00:12:21,490 --> 00:12:24,940
kubernetes

00:12:22,089 --> 00:12:26,589
but was mapping to non native kubernetes

00:12:24,940 --> 00:12:28,269
objects we wanted to make sure that the

00:12:26,589 --> 00:12:30,670
things that end up in kubernetes

00:12:28,269 --> 00:12:31,940
are as native and normal as possible so

00:12:30,670 --> 00:12:34,310
all your regular workflow

00:12:31,940 --> 00:12:36,500
and knowledge works if you're an

00:12:34,310 --> 00:12:40,370
operator of them so we convert the

00:12:36,500 --> 00:12:42,980
droplets into a docker image before we

00:12:40,370 --> 00:12:44,630
send it to kubernetes with a custom

00:12:42,980 --> 00:12:47,540
registry that puts the droplet on top of

00:12:44,630 --> 00:12:50,870
the route FS it looks like this if you

00:12:47,540 --> 00:12:52,670
think of a app container there's the top

00:12:50,870 --> 00:12:54,920
layer which is my app in Diego that's a

00:12:52,670 --> 00:13:00,470
tar file that we untile onto a route FS

00:12:54,920 --> 00:13:02,840
container in including eTI's instead we

00:13:00,470 --> 00:13:05,060
just create on the fly this OC I M is

00:13:02,840 --> 00:13:07,700
describing the same thing so we then

00:13:05,060 --> 00:13:10,490
have a URL for that objects that

00:13:07,700 --> 00:13:12,380
collection of layers that describes what

00:13:10,490 --> 00:13:14,660
we would like kubernetes to do which is

00:13:12,380 --> 00:13:16,070
the droplets and the routes FS that

00:13:14,660 --> 00:13:18,290
means all the Cloud Controller stuff

00:13:16,070 --> 00:13:20,210
about droplets stays exactly the same

00:13:18,290 --> 00:13:24,620
you can still rollback droplet versions

00:13:20,210 --> 00:13:27,410
you still go automated patching so the

00:13:24,620 --> 00:13:28,910
registry is now in bit service it's just

00:13:27,410 --> 00:13:32,510
a custom registry it sits on top of the

00:13:28,910 --> 00:13:35,150
blob store that's how we map droplets

00:13:32,510 --> 00:13:37,040
the images natively we also map apps to

00:13:35,150 --> 00:13:39,410
stateful sets or deployments that

00:13:37,040 --> 00:13:42,530
currently stateful sets just to maintain

00:13:39,410 --> 00:13:43,910
parity of the instance index fields but

00:13:42,530 --> 00:13:47,060
hopefully they'll move to deployments

00:13:43,910 --> 00:13:49,160
when we deprecate instance index and we

00:13:47,060 --> 00:13:51,560
also map all your routes into services

00:13:49,160 --> 00:13:53,030
and go routes of stuff so everything in

00:13:51,560 --> 00:13:55,100
the cloud controller stays the same and

00:13:53,030 --> 00:13:58,820
it's just a convergence loop into

00:13:55,100 --> 00:14:01,880
totally native kubernetes objects there

00:13:58,820 --> 00:14:04,520
is one other thing this is our stating

00:14:01,880 --> 00:14:06,290
component so we can do staging without

00:14:04,520 --> 00:14:08,210
needing Diego we run the same build

00:14:06,290 --> 00:14:10,160
packs code in a kubernetes job

00:14:08,210 --> 00:14:13,400
we obviously call it stage and eTI's

00:14:10,160 --> 00:14:14,930
that's how to spell stage and eTI's and

00:14:13,400 --> 00:14:16,910
it's just a cube job that converts your

00:14:14,930 --> 00:14:19,250
stuff and it just supplies droplets it

00:14:16,910 --> 00:14:21,290
doesn't upload images because we want to

00:14:19,250 --> 00:14:24,190
keep the ability to keep stuff patched

00:14:21,290 --> 00:14:26,420
and to rollback droplet versions so

00:14:24,190 --> 00:14:28,910
brief aside why didn't we do this before

00:14:26,420 --> 00:14:30,290
and if it's such a good idea why are we

00:14:28,910 --> 00:14:32,450
only doing it now

00:14:30,290 --> 00:14:34,460
we had genuinely I think very good

00:14:32,450 --> 00:14:36,560
reasons for hesitating to do this for a

00:14:34,460 --> 00:14:39,620
while the main one was it wasn't time

00:14:36,560 --> 00:14:42,020
there was a lot of movement in the

00:14:39,620 --> 00:14:44,480
scheduler market and spending lots of

00:14:42,020 --> 00:14:45,769
efforts moving us to a scheduler at that

00:14:44,480 --> 00:14:49,100
time didn't deliver a

00:14:45,769 --> 00:14:51,980
of value to any particular user who

00:14:49,100 --> 00:14:54,170
cared right then why do people care now

00:14:51,980 --> 00:14:56,209
I think because scheduling is now a

00:14:54,170 --> 00:14:57,860
commodity and the fact that it's a

00:14:56,209 --> 00:15:01,519
commodity mean this is there's a huge

00:14:57,860 --> 00:15:03,799
market of tools and services mindshare

00:15:01,519 --> 00:15:06,439
and tutorials and skills around running

00:15:03,799 --> 00:15:08,749
it and therefore giving people the

00:15:06,439 --> 00:15:11,929
option of using those makes a lot of

00:15:08,749 --> 00:15:14,089
sense it means you can delegate all of

00:15:11,929 --> 00:15:16,459
your kubernetes operators stuff to a

00:15:14,089 --> 00:15:18,799
coop as a service and just run the CF

00:15:16,459 --> 00:15:21,829
bits while still getting all the

00:15:18,799 --> 00:15:23,959
benefits of CF push think about the

00:15:21,829 --> 00:15:26,029
Haiku you can't do a CF summit talk

00:15:23,959 --> 00:15:29,299
without mentioning the Haiku is actually

00:15:26,029 --> 00:15:32,389
a rule there's a haiku about the rule I

00:15:29,299 --> 00:15:34,519
suspect here is my code running on the

00:15:32,389 --> 00:15:36,319
cloud for me I don't care how the great

00:15:34,519 --> 00:15:39,049
thing about that the CF promise has

00:15:36,319 --> 00:15:41,779
always been you just care about CF push

00:15:39,049 --> 00:15:44,149
we will care about the how and you will

00:15:41,779 --> 00:15:47,209
not have to change how you work as that

00:15:44,149 --> 00:15:49,160
how changes as new things like sto come

00:15:47,209 --> 00:15:51,290
along they will get imported into the

00:15:49,160 --> 00:15:53,149
platform without you changing stuff as

00:15:51,290 --> 00:15:54,889
new things like kubernetes come along

00:15:53,149 --> 00:15:58,040
they will be important for platform

00:15:54,889 --> 00:16:01,220
without you changing stuff I think

00:15:58,040 --> 00:16:04,579
that's pretty cool so what change really

00:16:01,220 --> 00:16:06,410
is it's time it's time now see if pushes

00:16:04,579 --> 00:16:10,069
always the thing that we cared about

00:16:06,410 --> 00:16:13,059
and now the kubernetes is a commodity we

00:16:10,069 --> 00:16:15,439
can make everyone happy and so we should

00:16:13,059 --> 00:16:18,350
let's have a demo of the end of

00:16:15,439 --> 00:16:21,769
suffering as a hell of a set up for a

00:16:18,350 --> 00:16:26,179
demo let's watch it happen okay let's

00:16:21,769 --> 00:16:29,179
get to the cool stuff a demo before we

00:16:26,179 --> 00:16:31,100
start with the demo actually I just want

00:16:29,179 --> 00:16:34,549
to talk a little bit about the

00:16:31,100 --> 00:16:37,639
environment to set up so on IBM cloud I

00:16:34,549 --> 00:16:40,339
provisioned a Q&A discloser using the

00:16:37,639 --> 00:16:42,290
IBM Combinator service and on top of

00:16:40,339 --> 00:16:46,220
that I deployed the content container

00:16:42,290 --> 00:16:49,579
ICF including ireenie and you will see

00:16:46,220 --> 00:16:50,869
mat terminal and it's basically split up

00:16:49,579 --> 00:16:52,610
in two panes

00:16:50,869 --> 00:16:55,369
so it they will before but the left pane

00:16:52,610 --> 00:16:57,799
would be the Cloud Foundry part so I

00:16:55,369 --> 00:16:59,510
will perform all these CFC Li commands

00:16:57,799 --> 00:17:01,460
and the right

00:16:59,510 --> 00:17:04,400
we'll be the kubernetes part and I will

00:17:01,460 --> 00:17:09,380
perform the coop CTL commands on that

00:17:04,400 --> 00:17:10,940
side and this is really the the left

00:17:09,380 --> 00:17:13,880
side is really the developer role and

00:17:10,940 --> 00:17:16,940
the right side is the operator role and

00:17:13,880 --> 00:17:20,930
we have a perfect balance between the

00:17:16,940 --> 00:17:26,180
developers and operates ok so let's get

00:17:20,930 --> 00:17:29,480
to the demo ok I hope that everybody can

00:17:26,180 --> 00:17:33,020
read my terminal I think that is the

00:17:29,480 --> 00:17:37,630
perfect size I hope it's the perfect

00:17:33,020 --> 00:17:42,080
size so has that left side Cloud Foundry

00:17:37,630 --> 00:17:45,020
on the Left papa pain I did a watch on

00:17:42,080 --> 00:17:47,030
two CF apps and I already deployed a app

00:17:45,020 --> 00:17:51,740
which is called hello summit so hello

00:17:47,030 --> 00:17:55,400
and on the right side there is the coop

00:17:51,740 --> 00:17:57,650
object of the of this app it has the

00:17:55,400 --> 00:18:01,190
name is basically the gyd of the lab and

00:17:57,650 --> 00:18:04,040
it's running but we will push an app

00:18:01,190 --> 00:18:08,410
immediately another one so that you can

00:18:04,040 --> 00:18:11,590
see what what how Irina verbs and how

00:18:08,410 --> 00:18:16,970
things appear on coop and how on CFANS

00:18:11,590 --> 00:18:20,930
yeah let's first take a look at the see

00:18:16,970 --> 00:18:25,370
container SDF deployment so let's make

00:18:20,930 --> 00:18:27,890
this a bigger screen for now I hope this

00:18:25,370 --> 00:18:28,130
will switch to a nice of you yeah there

00:18:27,890 --> 00:18:33,440
we go

00:18:28,130 --> 00:18:34,640
so here's whole Cloud Foundry as you

00:18:33,440 --> 00:18:36,290
used to

00:18:34,640 --> 00:18:39,050
there are all the components but with

00:18:36,290 --> 00:18:41,540
one difference there is no Diego

00:18:39,050 --> 00:18:45,740
included here right so you don't see any

00:18:41,540 --> 00:18:49,190
Diego component but what you see is the

00:18:45,740 --> 00:18:51,770
arena component which will do all the

00:18:49,190 --> 00:18:56,330
work for Cloud Foundry to schedule the

00:18:51,770 --> 00:18:58,460
apps on top of kubernetes and here we

00:18:56,330 --> 00:19:00,650
have the arena namespace this is the

00:18:58,460 --> 00:19:06,260
namespace with all the apps are ending

00:19:00,650 --> 00:19:11,510
up great so let's start let's push an

00:19:06,260 --> 00:19:12,850
app and let's call this for now CF push

00:19:11,510 --> 00:19:16,840
an app

00:19:12,850 --> 00:19:20,919
now let's see what happens so you see

00:19:16,840 --> 00:19:23,919
the basic Cloud Foundry output but what

00:19:20,919 --> 00:19:27,370
you won't see now is the staging logs

00:19:23,919 --> 00:19:30,519
because they currently are not streamed

00:19:27,370 --> 00:19:32,710
to the CFC Li but you see here that

00:19:30,519 --> 00:19:35,230
there is a pot which is doing the

00:19:32,710 --> 00:19:38,769
staging on kubernetes side and what we

00:19:35,230 --> 00:19:43,809
could do is we could simply show the

00:19:38,769 --> 00:19:46,629
logs of that staging job and you should

00:19:43,809 --> 00:19:51,100
see the exact output of the staging that

00:19:46,629 --> 00:19:54,600
you usually see on the CF push so let's

00:19:51,100 --> 00:19:58,720
just wait till it stages the app and

00:19:54,600 --> 00:20:01,240
then we'll see that one of one instances

00:19:58,720 --> 00:20:03,820
on the cloud foundry site will run so

00:20:01,240 --> 00:20:06,159
the staging job is done the app is

00:20:03,820 --> 00:20:08,710
already scheduled it just needs to get

00:20:06,159 --> 00:20:11,169
ready so this takes a second or

00:20:08,710 --> 00:20:11,769
something maybe two maybe three but

00:20:11,169 --> 00:20:14,980
there we go

00:20:11,769 --> 00:20:21,669
it runs we haven't running app you see

00:20:14,980 --> 00:20:23,830
here an app it has an URL and we would

00:20:21,669 --> 00:20:28,379
curl it in a second but let's first

00:20:23,830 --> 00:20:33,220
perform some basic CF CLI commands like

00:20:28,379 --> 00:20:35,980
let's see if stop it see if stop an app

00:20:33,220 --> 00:20:38,049
let's see what happens so you already

00:20:35,980 --> 00:20:42,549
see that on Combinator site so on the

00:20:38,049 --> 00:20:46,149
right side it just terminated app but CF

00:20:42,549 --> 00:20:49,120
apps still say the app is there and it's

00:20:46,149 --> 00:20:51,879
just zero of one instances running so

00:20:49,120 --> 00:20:57,159
let's bring the app back up again CF

00:20:51,879 --> 00:20:59,769
start and add there we go and now you

00:20:57,159 --> 00:21:03,850
will see in the upper right pane on the

00:20:59,769 --> 00:21:08,350
kubernetes side how the pot comes up

00:21:03,850 --> 00:21:11,950
again so there we go awesome right

00:21:08,350 --> 00:21:14,259
that's great so it's just waiting till

00:21:11,950 --> 00:21:18,039
the app tab is ready it's ready and we

00:21:14,259 --> 00:21:23,590
already see the instances also coming

00:21:18,039 --> 00:21:25,960
back up one of one instances and what we

00:21:23,590 --> 00:21:26,559
of course also can do is restarting app

00:21:25,960 --> 00:21:28,149
which is

00:21:26,559 --> 00:21:31,809
nothing else ten stubbing I have been

00:21:28,149 --> 00:21:38,279
starting an app and now I would like to

00:21:31,809 --> 00:21:38,279
scale enough let's say three instances

00:21:40,139 --> 00:21:48,249
so arena is deploying stateful sets and

00:21:44,610 --> 00:21:50,649
the last digit here and in the name is

00:21:48,249 --> 00:21:54,749
actually the instance number so now you

00:21:50,649 --> 00:21:57,659
see that it will first schedule the

00:21:54,749 --> 00:22:00,970
first and then the second and the third

00:21:57,659 --> 00:22:01,450
instance of that app and when everything

00:22:00,970 --> 00:22:03,159
is ready

00:22:01,450 --> 00:22:05,830
you also see that three of three

00:22:03,159 --> 00:22:09,519
instances are running which is awesome

00:22:05,830 --> 00:22:15,009
they now let's scale it back down to one

00:22:09,519 --> 00:22:19,029
instance this also works fine so we'll

00:22:15,009 --> 00:22:23,159
see that terminates again and also the

00:22:19,029 --> 00:22:26,470
instance count is updated on the CF apps

00:22:23,159 --> 00:22:29,019
cool so now let's let's curl the app

00:22:26,470 --> 00:22:33,879
actually that's that's one interesting

00:22:29,019 --> 00:22:38,649
part of the whole demo right so I want

00:22:33,879 --> 00:22:43,269
to curl an app and there we go hello CF

00:22:38,649 --> 00:22:45,220
from kubernetes and we also have this

00:22:43,269 --> 00:22:47,379
our ADO's integration which is basically

00:22:45,220 --> 00:22:52,389
local gator on top of coop and now you

00:22:47,379 --> 00:22:56,409
also can use CF tail and app to shortly

00:22:52,389 --> 00:22:59,409
looks nice so I have an output I was

00:22:56,409 --> 00:23:02,860
curled when I curl the app so let's curl

00:22:59,409 --> 00:23:07,090
again and then let's see what tailing in

00:23:02,860 --> 00:23:11,470
abscess and you see that the curl was

00:23:07,090 --> 00:23:15,009
locked awesome so I think that's enough

00:23:11,470 --> 00:23:18,460
for the demo if you go to Cloud Foundry

00:23:15,009 --> 00:23:22,269
incubator slash Lee Rainie release there

00:23:18,460 --> 00:23:24,399
is enough documentation on how you can

00:23:22,269 --> 00:23:26,080
set it up yourself and play around it's

00:23:24,399 --> 00:23:30,340
really easy it's just to helm installs

00:23:26,080 --> 00:23:30,940
so make sure to check it out it's not a

00:23:30,340 --> 00:23:35,080
big deal

00:23:30,940 --> 00:23:38,159
and have fun with a dreary dharini so

00:23:35,080 --> 00:23:38,159
back to the slides

00:23:39,700 --> 00:23:50,810
awesome that's pretty cool right all

00:23:49,580 --> 00:23:56,090
right and for the thrilling conclusion

00:23:50,810 --> 00:23:59,120
the edges now match the middle so all

00:23:56,090 --> 00:24:00,680
comes together so the summary CF is the

00:23:59,120 --> 00:24:03,530
dev experience that I love and I think a

00:24:00,680 --> 00:24:05,060
lot of us love I think if you've paid

00:24:03,530 --> 00:24:06,920
around with kubernetes for a while you

00:24:05,060 --> 00:24:09,380
realize is just an awesome piece of

00:24:06,920 --> 00:24:11,900
software but if you watch the ease of

00:24:09,380 --> 00:24:15,710
doing that CF push and CF scale and CF

00:24:11,900 --> 00:24:17,630
tail I think you understand why we're

00:24:15,710 --> 00:24:20,150
excited about the ability about being

00:24:17,630 --> 00:24:24,680
able to bring this CF push experience to

00:24:20,150 --> 00:24:27,050
kubernetes people where are we with this

00:24:24,680 --> 00:24:28,910
this is now an official CF incubator

00:24:27,050 --> 00:24:31,130
project since the last summits which is

00:24:28,910 --> 00:24:33,320
really awesome we currently have two

00:24:31,130 --> 00:24:37,670
pairs working on it

00:24:33,320 --> 00:24:38,930
two from sa p2 from IBM that was because

00:24:37,670 --> 00:24:41,660
we wanted to go really fast to begin

00:24:38,930 --> 00:24:44,690
with and less pairs goes faster to start

00:24:41,660 --> 00:24:46,040
with we're hoping to scale that up soon

00:24:44,690 --> 00:24:48,020
and actually get more people working on

00:24:46,040 --> 00:24:50,930
this we're now ready to start doing that

00:24:48,020 --> 00:24:52,130
this month s surpassing most of the cats

00:24:50,930 --> 00:24:54,290
are passing which is the Cloud Foundry

00:24:52,130 --> 00:24:56,060
acceptance tests most of cool cats

00:24:54,290 --> 00:24:57,770
there's a very small number that we're

00:24:56,060 --> 00:24:59,210
just finishing up it looks larger than

00:24:57,770 --> 00:25:03,010
it is because there's one or two fixes

00:24:59,210 --> 00:25:06,890
that fix about 15 things tends to happen

00:25:03,010 --> 00:25:08,440
you can install on a GCP or IBM cloud

00:25:06,890 --> 00:25:10,580
you've probably installed on most other

00:25:08,440 --> 00:25:12,950
kubernetes Azure services it's just

00:25:10,580 --> 00:25:15,620
loads of the two that we've tested and

00:25:12,950 --> 00:25:17,570
it's just two home charts no Diego and

00:25:15,620 --> 00:25:19,160
no Bosch to try it out and kick the

00:25:17,570 --> 00:25:21,260
tires it's still lots of reasons you

00:25:19,160 --> 00:25:23,480
might want to use the egg or Bosch but

00:25:21,260 --> 00:25:24,950
if you have a Cuban eTI's or a Cuban s

00:25:23,480 --> 00:25:28,400
is a service and you want to try this

00:25:24,950 --> 00:25:31,010
out it is just to helm installs to do

00:25:28,400 --> 00:25:34,370
that we are all around the conference

00:25:31,010 --> 00:25:37,130
and super excited to talk to people if

00:25:34,370 --> 00:25:40,280
you have any questions or we also have a

00:25:37,130 --> 00:25:42,530
whole three and a half minutes for any

00:25:40,280 --> 00:25:44,930
question that you have before I go to

00:25:42,530 --> 00:25:46,400
questions this is not all of our work

00:25:44,930 --> 00:25:49,520
these are the other people on the team

00:25:46,400 --> 00:25:52,070
these are this is me and hey Jules are

00:25:49,520 --> 00:25:55,190
there at the front Stefan who leaked all

00:25:52,070 --> 00:25:58,370
Gong cough Maria Kiev Simon Moser and

00:25:55,190 --> 00:26:02,140
Andrew Edgar that are making this happen

00:25:58,370 --> 00:26:02,140
so with that if there are any questions

00:26:23,470 --> 00:26:28,779
so the current model is this just an

00:26:26,320 --> 00:26:30,580
ireenie namespace which you don't have

00:26:28,779 --> 00:26:33,159
permissions on which is kind of similar

00:26:30,580 --> 00:26:35,710
to the Bosch model where there's like an

00:26:33,159 --> 00:26:36,909
operator for your Cloud Foundry if you

00:26:35,710 --> 00:26:39,399
see what I mean

00:26:36,909 --> 00:26:42,100
it would one of the nice things about

00:26:39,399 --> 00:26:44,260
this approach is that obviously would

00:26:42,100 --> 00:26:46,539
scale quite nicely to saying well this

00:26:44,260 --> 00:26:50,500
operator just operates these apps in

00:26:46,539 --> 00:26:54,269
this space for example so we could put

00:26:50,500 --> 00:26:58,120
different role based access controls on

00:26:54,269 --> 00:26:59,679
particular apps or particular spaces one

00:26:58,120 --> 00:27:01,630
of the things we hope to look at after

00:26:59,679 --> 00:27:03,370
we hit the first milestone so the first

00:27:01,630 --> 00:27:05,320
milestone is all the cats passing and

00:27:03,370 --> 00:27:07,240
ready for people to use with the core

00:27:05,320 --> 00:27:09,610
functionality we're then going to start

00:27:07,240 --> 00:27:11,559
looking at other features of CF to move

00:27:09,610 --> 00:27:12,820
over and one of the features we've heard

00:27:11,559 --> 00:27:17,440
a lot of interest in its isolation

00:27:12,820 --> 00:27:20,049
segments so with this approach we could

00:27:17,440 --> 00:27:21,820
either implement isolation segments by

00:27:20,049 --> 00:27:25,600
having different namespaces in the warm

00:27:21,820 --> 00:27:27,519
kubernetes or actually each organization

00:27:25,600 --> 00:27:29,980
could have a different kubernetes that

00:27:27,519 --> 00:27:32,740
it syncs to which really label each org

00:27:29,980 --> 00:27:33,940
from your CF control plane to have a

00:27:32,740 --> 00:27:36,690
completely different kubernetes

00:27:33,940 --> 00:27:36,690
potentially

00:27:50,999 --> 00:27:58,600
yeah I think to begin with we want to do

00:27:55,179 --> 00:28:02,769
parity for they're sort of the the model

00:27:58,600 --> 00:28:04,659
for the apps although I hope that by by

00:28:02,769 --> 00:28:06,039
doing something like this this will

00:28:04,659 --> 00:28:07,899
start to bring the two communities

00:28:06,039 --> 00:28:11,529
together so we can change some of the CF

00:28:07,899 --> 00:28:13,480
abstractions for both schedulers if you

00:28:11,529 --> 00:28:14,889
see what I mean so we'll have people

00:28:13,480 --> 00:28:16,149
from that community getting more

00:28:14,889 --> 00:28:18,369
involved with this giving us feedback

00:28:16,149 --> 00:28:21,059
and a virtuous cycle of both of them

00:28:18,369 --> 00:28:23,740
changing I also hope that over time

00:28:21,059 --> 00:28:26,679
various of the other components will

00:28:23,740 --> 00:28:29,230
start to become more integrated with

00:28:26,679 --> 00:28:30,519
kubernetes so you already see that

00:28:29,230 --> 00:28:34,450
happening with things like the go

00:28:30,519 --> 00:28:37,240
Reuters move to sto hopefully more and

00:28:34,450 --> 00:28:40,090
more things will start doing that kind

00:28:37,240 --> 00:28:41,940
of stuff you could imagine I don't think

00:28:40,090 --> 00:28:44,710
this will happen soon you could imagine

00:28:41,940 --> 00:28:46,450
let's say cloud controller decides it'll

00:28:44,710 --> 00:28:49,720
be nice if operators didn't have to use

00:28:46,450 --> 00:28:51,399
a database let's allow CRTs to be used

00:28:49,720 --> 00:28:52,929
as a backing store for the cloud

00:28:51,399 --> 00:28:55,179
controller database or you can imagine

00:28:52,929 --> 00:28:57,519
all sorts of things like that that could

00:28:55,179 --> 00:29:00,940
evolve over time but for now what we

00:28:57,519 --> 00:29:02,499
want to do is just have the most native

00:29:00,940 --> 00:29:05,799
operator experience for the apps that

00:29:02,499 --> 00:29:08,999
are pushed with the same exact CF push

00:29:05,799 --> 00:29:08,999
experience for the developers

00:29:33,780 --> 00:29:38,980
so it depends where the limit is so some

00:29:37,510 --> 00:29:40,840
limits are enforced in the cloud

00:29:38,980 --> 00:29:43,540
controller as part of the orgs and

00:29:40,840 --> 00:29:46,150
spaces and quotas model that exists up

00:29:43,540 --> 00:29:48,520
there and those would state those are

00:29:46,150 --> 00:29:51,250
part of that kind of you know rapid

00:29:48,520 --> 00:29:53,590
application 12 factor thing around Cloud

00:29:51,250 --> 00:29:55,960
Foundry there are other things that are

00:29:53,590 --> 00:29:58,750
limitations of the platform that might

00:29:55,960 --> 00:30:00,070
change so one thing I'm quite excited

00:29:58,750 --> 00:30:03,730
about one thing I really like the idea

00:30:00,070 --> 00:30:06,340
of using there's this idea in the cube

00:30:03,730 --> 00:30:08,890
ecosystem of virtual couplets so

00:30:06,340 --> 00:30:11,800
serverless containers so the idea is

00:30:08,890 --> 00:30:14,400
there are no nodes as contains are

00:30:11,800 --> 00:30:17,410
pushed into your kubernetes cluster

00:30:14,400 --> 00:30:19,630
there's a node in there that pretends

00:30:17,410 --> 00:30:21,430
like it's any size behind the scenes

00:30:19,630 --> 00:30:23,950
that provider is doing everything to

00:30:21,430 --> 00:30:25,900
make that work but it means that you

00:30:23,950 --> 00:30:28,390
don't have to set up n knows in advance

00:30:25,900 --> 00:30:30,340
at all you can just see if push and have

00:30:28,390 --> 00:30:33,400
it scale up and down and someone else

00:30:30,340 --> 00:30:35,020
manages that someone else deals with all

00:30:33,400 --> 00:30:37,120
the complexity of making that happen and

00:30:35,020 --> 00:30:39,190
you just do your CF push and pay for as

00:30:37,120 --> 00:30:42,550
much as many containers as that takes

00:30:39,190 --> 00:30:44,560
and so I think use cases like that come

00:30:42,550 --> 00:30:46,600
out of using this commodity technology

00:30:44,560 --> 00:30:50,310
now that that commodities available as a

00:30:46,600 --> 00:30:52,960
service it enables you to do things like

00:30:50,310 --> 00:30:54,220
not pay for whole environment resources

00:30:52,960 --> 00:30:59,170
because they're available as a service

00:30:54,220 --> 00:31:01,500
so it depends which where that resource

00:30:59,170 --> 00:31:01,500
limit is

00:31:06,710 --> 00:31:14,600
should be yeah you need to go to yeah

00:31:10,070 --> 00:31:16,309
developed brands for now yes yes yes the

00:31:14,600 --> 00:31:18,649
helm instruction here because it's not

00:31:16,309 --> 00:31:21,619
obviously we are developing this for CF

00:31:18,649 --> 00:31:24,230
summit let's just admit it we wanted to

00:31:21,619 --> 00:31:27,830
have this ready for CF summit and we do

00:31:24,230 --> 00:31:30,289
when we merge it so yeah at the moment

00:31:27,830 --> 00:31:32,210
looking the develop branch or pingers on

00:31:30,289 --> 00:31:34,580
slack we're in I really dev on Cloud

00:31:32,210 --> 00:31:37,249
Foundry slack and we will very happily

00:31:34,580 --> 00:31:39,590
hold anyone's hand getting started with

00:31:37,249 --> 00:31:40,879
the Hound stuff we really want people to

00:31:39,590 --> 00:31:42,769
kick the tires and start giving us

00:31:40,879 --> 00:31:44,149
feedback about what does and doesn't

00:31:42,769 --> 00:31:46,190
work and what doesn't doesn't make sense

00:31:44,149 --> 00:31:48,460
when you when you use this for real

00:31:46,190 --> 00:31:48,460
stuff

00:31:50,679 --> 00:31:55,789
this is flashing times up and I didn't

00:31:53,210 --> 00:31:57,590
see any hands in the last six seconds so

00:31:55,789 --> 00:31:59,859
thank you very much have a great rest of

00:31:57,590 --> 00:31:59,859
the conference

00:32:01,380 --> 00:32:03,440

YouTube URL: https://www.youtube.com/watch?v=dvLCT19I4QY


