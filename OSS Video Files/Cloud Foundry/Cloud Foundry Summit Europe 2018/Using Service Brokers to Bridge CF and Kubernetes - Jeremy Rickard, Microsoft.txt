Title: Using Service Brokers to Bridge CF and Kubernetes - Jeremy Rickard, Microsoft
Publication date: 2018-10-11
Playlist: Cloud Foundry Summit Europe 2018
Description: 
	Using Service Brokers to Bridge CF and Kubernetes - Jeremy Rickard, Microsoft

One of the great things in Cloud Foundry is the ability to bind your application to external services using service brokers! If you are moving to containerized deployments, you may be considering Kubernetes as your container orchestrator of choice. Will you lose that great benefit if you are moving to Kubernetes? The answer is no! Service Catalog brings the same capabilities to Kubernetes for your containerized applications. In this talk, Jeremy will introduce Service Catalog and talk about how it was influenced by the user experience in Cloud Foundry. He will then show how you can use Service Catalog to deliver your containerized applications to Kubernetes and provide some guidance on best practices for working with both platforms.

https://cfseu18.sched.com/event/FRyO/services-api-project-update-matt-mcneeney-pivotal-nikolay-maslarski-sap
Captions: 
	00:00:00,030 --> 00:00:04,500
okay um can everybody hear me might come

00:00:01,890 --> 00:00:05,640
through okay perfect okay so let's go

00:00:04,500 --> 00:00:08,099
ahead and get started so we can get done

00:00:05,640 --> 00:00:10,620
I'm the last talk before you guys have

00:00:08,099 --> 00:00:12,870
beer and it's it's gonna be a good talk

00:00:10,620 --> 00:00:15,269
so let's go so we're gonna talk today

00:00:12,870 --> 00:00:17,190
about using service brokers with

00:00:15,269 --> 00:00:20,100
kubernetes so we've heard a lot today

00:00:17,190 --> 00:00:22,109
about combining crew readies and called

00:00:20,100 --> 00:00:23,699
foundry in different ways how they can

00:00:22,109 --> 00:00:27,689
be compatible how they could be

00:00:23,699 --> 00:00:29,609
cooperative this is a way that we've

00:00:27,689 --> 00:00:31,800
taken a piece of cloud foundry and

00:00:29,609 --> 00:00:33,930
brought it to kubernetes and given you a

00:00:31,800 --> 00:00:39,149
little bit of that experience so first

00:00:33,930 --> 00:00:41,250
off I'm Jeremy I work at Microsoft Azure

00:00:39,149 --> 00:00:42,989
and I work on the open service broker

00:00:41,250 --> 00:00:44,940
Frasier which is our implement or one of

00:00:42,989 --> 00:00:46,980
our implementations of the OSP API for

00:00:44,940 --> 00:00:48,960
doing things with adjure cloud services

00:00:46,980 --> 00:00:50,910
I also work on Service Catalog which is

00:00:48,960 --> 00:00:52,649
the implementation of the OSP API from a

00:00:50,910 --> 00:00:54,449
platform perspective for kubernetes I

00:00:52,649 --> 00:00:55,739
also work on a bunch of other things in

00:00:54,449 --> 00:00:58,109
the space like virtual cubelet that was

00:00:55,739 --> 00:01:00,270
mentioned in the last talk you can find

00:00:58,109 --> 00:01:01,800
me on github in twitter here if you want

00:01:00,270 --> 00:01:03,390
to talk about anything that I talked

00:01:01,800 --> 00:01:04,530
about today or any other Azure related

00:01:03,390 --> 00:01:08,310
things feel free to reach out to me at

00:01:04,530 --> 00:01:09,330
my record Microsoft Ebell so again we've

00:01:08,310 --> 00:01:11,729
heard a lot today

00:01:09,330 --> 00:01:14,189
and it's I think this is a good way to

00:01:11,729 --> 00:01:16,860
cap things off about how cloud foundry

00:01:14,189 --> 00:01:18,630
and kubernetes can be cooperative I

00:01:16,860 --> 00:01:21,450
think the things that are happening with

00:01:18,630 --> 00:01:23,159
the containerization and inari are super

00:01:21,450 --> 00:01:25,619
cool and I'm super excited to go home

00:01:23,159 --> 00:01:27,570
and play with that myself because I used

00:01:25,619 --> 00:01:29,310
to use cloud foundry quite a bit and I

00:01:27,570 --> 00:01:32,880
like the developer experience a lot and

00:01:29,310 --> 00:01:34,170
that's really missing in kubernetes when

00:01:32,880 --> 00:01:36,450
you think about what kubernetes really

00:01:34,170 --> 00:01:38,130
is kubernetes is an extensible platform

00:01:36,450 --> 00:01:40,020
so I think somebody mentioned one of the

00:01:38,130 --> 00:01:41,729
previous talks that Joe bata called it a

00:01:40,020 --> 00:01:44,820
platform for platforms or a platform

00:01:41,729 --> 00:01:46,229
platform and really that's what it is we

00:01:44,820 --> 00:01:47,790
treat kubernetes as a thing that people

00:01:46,229 --> 00:01:49,649
like to just deploy things directly to

00:01:47,790 --> 00:01:51,119
but it's it's pretty low-level it

00:01:49,649 --> 00:01:53,310
doesn't have the same experience that

00:01:51,119 --> 00:01:56,219
you get with cloud foundry or are there

00:01:53,310 --> 00:01:57,630
PA's like solutions but what it is is

00:01:56,219 --> 00:01:59,579
something that's very extensible and you

00:01:57,630 --> 00:02:00,390
can see that with some of the things

00:01:59,579 --> 00:02:00,990
we're gonna talk about today with

00:02:00,390 --> 00:02:02,549
Service Catalog

00:02:00,990 --> 00:02:04,590
other things that are coming down with

00:02:02,549 --> 00:02:06,780
CR DS or mentioned in the last talks as

00:02:04,590 --> 00:02:08,129
well but it's for running containerized

00:02:06,780 --> 00:02:10,440
workload so it's pretty specific about

00:02:08,129 --> 00:02:12,420
that but because it's extensible you can

00:02:10,440 --> 00:02:14,010
use it to do quite a bit of other things

00:02:12,420 --> 00:02:15,420
and the last point

00:02:14,010 --> 00:02:17,730
is that it's declarative so all the

00:02:15,420 --> 00:02:21,659
configuration you you use with it is

00:02:17,730 --> 00:02:22,950
defined in a really standard way it

00:02:21,659 --> 00:02:24,720
looks something like this you have

00:02:22,950 --> 00:02:25,920
different types of resources so here we

00:02:24,720 --> 00:02:29,189
have a pod and that's kind of like the

00:02:25,920 --> 00:02:31,530
basic unit of a deployment or scale to

00:02:29,189 --> 00:02:33,030
kubernetes inside of that you've got a

00:02:31,530 --> 00:02:34,620
spec and that's really the desired state

00:02:33,030 --> 00:02:36,540
so you say that you want to run a

00:02:34,620 --> 00:02:38,280
container called nginx and you're gonna

00:02:36,540 --> 00:02:40,470
use an image from docker hub called

00:02:38,280 --> 00:02:43,349
nginx and you want to have it expose a

00:02:40,470 --> 00:02:45,689
certain port 80 and when you use this

00:02:43,349 --> 00:02:47,790
thing and tell kubernetes that you want

00:02:45,689 --> 00:02:49,470
to deploy this pot what ends up

00:02:47,790 --> 00:02:51,780
happening is it takes the desired state

00:02:49,470 --> 00:02:53,670
and it makes the actual state happen and

00:02:51,780 --> 00:02:55,170
then it reconciles those two things so

00:02:53,670 --> 00:02:57,389
if you make changes to the desired state

00:02:55,170 --> 00:02:59,280
over time it updates the actual state if

00:02:57,389 --> 00:03:00,690
things in the actual state happened over

00:02:59,280 --> 00:03:01,950
time it reports that back to the

00:03:00,690 --> 00:03:04,709
resource so you can see the spec in

00:03:01,950 --> 00:03:05,430
status of both of those things that

00:03:04,709 --> 00:03:07,709
means when you're going to deploy

00:03:05,430 --> 00:03:09,450
something to kubernetes if you're gonna

00:03:07,709 --> 00:03:10,769
try to if we want to abstract away and

00:03:09,450 --> 00:03:12,720
look at what that CF push the experience

00:03:10,769 --> 00:03:14,730
looks like you build a container then

00:03:12,720 --> 00:03:16,859
you write some llamo or JSON that goes

00:03:14,730 --> 00:03:19,169
along with that and then you post to the

00:03:16,859 --> 00:03:20,669
API and say deploy this thing and then

00:03:19,169 --> 00:03:22,590
it's responsible for making that happen

00:03:20,669 --> 00:03:24,269
it does you know run this container I

00:03:22,590 --> 00:03:25,470
want to replicas of it it's going to go

00:03:24,269 --> 00:03:27,720
on these two nodes wherever they're

00:03:25,470 --> 00:03:30,449
gonna go and that makes a lot of sense

00:03:27,720 --> 00:03:31,620
for the single single point I want to

00:03:30,449 --> 00:03:33,510
run this specific little application

00:03:31,620 --> 00:03:35,489
when you get to a bigger more

00:03:33,510 --> 00:03:38,730
complicated environment or deployment

00:03:35,489 --> 00:03:41,250
scenario like this there's a little more

00:03:38,730 --> 00:03:42,780
questions here so I've got these four

00:03:41,250 --> 00:03:45,060
services the online store the customer

00:03:42,780 --> 00:03:46,349
service the inventory service and the

00:03:45,060 --> 00:03:47,879
order service those things are

00:03:46,349 --> 00:03:49,980
containerized applications running on my

00:03:47,879 --> 00:03:52,079
kubernetes environment the email

00:03:49,980 --> 00:03:54,480
services some external thing and then my

00:03:52,079 --> 00:03:55,970
sequel neo4j and MongoDB could be run on

00:03:54,480 --> 00:03:58,949
the cluster that could be run externally

00:03:55,970 --> 00:04:00,659
but using that spec and Status model how

00:03:58,949 --> 00:04:02,400
do you define what those things look

00:04:00,659 --> 00:04:04,260
like and then how do you connect those

00:04:02,400 --> 00:04:05,639
things to your application kubernetes

00:04:04,260 --> 00:04:08,099
doesn't have something that necessarily

00:04:05,639 --> 00:04:10,609
gives you the ability to say provision

00:04:08,099 --> 00:04:12,769
me and my sequel out-of-the-box

00:04:10,609 --> 00:04:15,299
so really how do you handle that and

00:04:12,769 --> 00:04:17,849
once you have them provisioned how do

00:04:15,299 --> 00:04:18,870
you connect them to your applications so

00:04:17,849 --> 00:04:19,889
we'll talk about how you connect into

00:04:18,870 --> 00:04:21,740
your applications first because it's

00:04:19,889 --> 00:04:24,030
going to kind of set some groundwork so

00:04:21,740 --> 00:04:25,590
most things when you're talking about

00:04:24,030 --> 00:04:27,420
deploying applications to kubernetes

00:04:25,590 --> 00:04:28,470
you're going to think of it you know

00:04:27,420 --> 00:04:29,880
as something like a 12 factor

00:04:28,470 --> 00:04:31,710
application where you're going to pass

00:04:29,880 --> 00:04:33,270
configuration either via environment

00:04:31,710 --> 00:04:35,070
variables or maybe by reading a

00:04:33,270 --> 00:04:37,740
configuration file that's mounted from

00:04:35,070 --> 00:04:38,640
the file system like a config map or

00:04:37,740 --> 00:04:41,160
something like that it's one of the

00:04:38,640 --> 00:04:42,750
resource types it's available but the

00:04:41,160 --> 00:04:44,100
most common way I think like my

00:04:42,750 --> 00:04:45,360
preferred way is to use environment

00:04:44,100 --> 00:04:46,320
variables so here's an example right

00:04:45,360 --> 00:04:47,730
we're gonna have this order service

00:04:46,320 --> 00:04:50,490
that's going to talk to MongoDB and

00:04:47,730 --> 00:04:51,840
inside of the spec for that we say that

00:04:50,490 --> 00:04:54,060
we want to populate an environment

00:04:51,840 --> 00:04:56,190
variable called MongoDB URI and we're

00:04:54,060 --> 00:04:58,440
gonna give it some URI right that's it's

00:04:56,190 --> 00:05:00,480
gonna just be a value this really easy

00:04:58,440 --> 00:05:03,390
to put that into your llamo file you can

00:05:00,480 --> 00:05:06,090
declare that in the the scheduler and

00:05:03,390 --> 00:05:07,710
queries make that happen for you but

00:05:06,090 --> 00:05:09,210
that's hard you know it's not the

00:05:07,710 --> 00:05:12,180
greatest thing your hard-coding that Val

00:05:09,210 --> 00:05:14,010
you probably want to take advantage of

00:05:12,180 --> 00:05:16,380
something else so another thing you can

00:05:14,010 --> 00:05:17,610
do is reference a secret so this is

00:05:16,380 --> 00:05:18,870
taking a little bit more of a

00:05:17,610 --> 00:05:20,610
declarative approach and saying that

00:05:18,870 --> 00:05:21,930
I've got some secret defined and the

00:05:20,610 --> 00:05:24,720
secret is kind of like the way you would

00:05:21,930 --> 00:05:27,930
store sensitive information versus a

00:05:24,720 --> 00:05:29,100
config map on the cluster and you say

00:05:27,930 --> 00:05:31,230
that I want to reference a certain key

00:05:29,100 --> 00:05:33,060
from that secret and populate that into

00:05:31,230 --> 00:05:34,350
that environment variable so this is a

00:05:33,060 --> 00:05:36,420
good way you can update the secret s

00:05:34,350 --> 00:05:39,450
thing as time goes on you can restart

00:05:36,420 --> 00:05:41,400
your application sort of you know any

00:05:39,450 --> 00:05:42,810
kind of automation around that you want

00:05:41,400 --> 00:05:43,920
and then you know the value is just

00:05:42,810 --> 00:05:45,530
going to get populated into your

00:05:43,920 --> 00:05:48,150
container and that works pretty nicely

00:05:45,530 --> 00:05:51,720
but again you're still populating that

00:05:48,150 --> 00:05:53,760
secret somehow or editing that llamó

00:05:51,720 --> 00:05:55,410
file to add the value of somehow it

00:05:53,760 --> 00:05:58,500
would be better if there was a way for

00:05:55,410 --> 00:06:01,800
us to do something more like bind in the

00:05:58,500 --> 00:06:03,930
CF world it'd be really great if we

00:06:01,800 --> 00:06:06,080
could do something like CF create

00:06:03,930 --> 00:06:08,580
service and then CF find service

00:06:06,080 --> 00:06:11,550
directly to the kubernetes api and not

00:06:08,580 --> 00:06:13,890
have to worry about do i need to go use

00:06:11,550 --> 00:06:15,960
terraform or as your resource manager to

00:06:13,890 --> 00:06:18,270
spin up some external resource or some

00:06:15,960 --> 00:06:20,040
custom CRD that only works for amazon

00:06:18,270 --> 00:06:22,140
and not for everything else on my

00:06:20,040 --> 00:06:24,150
cluster it'd be great to have that

00:06:22,140 --> 00:06:25,980
experience and just have that talk to an

00:06:24,150 --> 00:06:27,480
existing broker that we already use from

00:06:25,980 --> 00:06:29,430
Cloud Foundry so if we're gonna maybe

00:06:27,480 --> 00:06:31,080
deploy some applications using Cloud

00:06:29,430 --> 00:06:33,240
Foundry the cool container I stuff on

00:06:31,080 --> 00:06:35,010
kubernetes but also have some kubernetes

00:06:33,240 --> 00:06:36,390
native applications it'd be great to be

00:06:35,010 --> 00:06:38,140
able to reuse those brokers between

00:06:36,390 --> 00:06:39,880
those

00:06:38,140 --> 00:06:42,370
and that's really what service catalog

00:06:39,880 --> 00:06:44,890
is striving to do and service catalog

00:06:42,370 --> 00:06:47,260
kind of harks back to this concept of

00:06:44,890 --> 00:06:49,000
extensibility so kubernetes provides you

00:06:47,260 --> 00:06:50,560
the foundation and it provides you a

00:06:49,000 --> 00:06:52,300
couple of ways of doing an extensibility

00:06:50,560 --> 00:06:54,250
in the case of service catalog we've

00:06:52,300 --> 00:06:56,320
built an aggregated API so you have a

00:06:54,250 --> 00:06:58,360
second API server that runs in parallel

00:06:56,320 --> 00:07:00,310
to your regular API server and then it

00:06:58,360 --> 00:07:01,690
creates a bunch of new resources so

00:07:00,310 --> 00:07:05,710
we've we've talked about a couple of

00:07:01,690 --> 00:07:07,960
resources so far like pod or secret it

00:07:05,710 --> 00:07:10,750
introduces a few new things really map

00:07:07,960 --> 00:07:12,670
closely to the OSB api and those would

00:07:10,750 --> 00:07:15,220
be the cluster service broker so that's

00:07:12,670 --> 00:07:17,650
the model of what a service broker looks

00:07:15,220 --> 00:07:19,750
like and then that gives you a couple of

00:07:17,650 --> 00:07:20,920
additional things called the service

00:07:19,750 --> 00:07:23,050
class and the service plan and you can

00:07:20,920 --> 00:07:24,610
think of those directly from what your

00:07:23,050 --> 00:07:26,950
experience with CF brokers would be like

00:07:24,610 --> 00:07:28,720
and then again using the service class

00:07:26,950 --> 00:07:30,430
and the plan you can make service

00:07:28,720 --> 00:07:33,580
instances and that's what's gonna do the

00:07:30,430 --> 00:07:35,380
provision operation to the broker once

00:07:33,580 --> 00:07:38,010
an instance is provisioned you can bind

00:07:35,380 --> 00:07:41,800
to that thing using a service binding

00:07:38,010 --> 00:07:44,560
resource once you've had Service Catalog

00:07:41,800 --> 00:07:45,970
to your cluster it now knows about

00:07:44,560 --> 00:07:48,310
service brokers and it knows how to talk

00:07:45,970 --> 00:07:49,720
to service workers using the OSB API so

00:07:48,310 --> 00:07:52,510
you can define what a broker looks like

00:07:49,720 --> 00:07:53,710
like this so you make a definition of

00:07:52,510 --> 00:07:55,660
what that broker looks like you give a

00:07:53,710 --> 00:07:57,460
URL any of the authentication

00:07:55,660 --> 00:07:59,980
information is necessary to talk to it

00:07:57,460 --> 00:08:02,380
and then kubernetes knows that it needs

00:07:59,980 --> 00:08:04,420
to reconcile that desired state with an

00:08:02,380 --> 00:08:06,430
actual state so it'll go and talk to

00:08:04,420 --> 00:08:09,670
that broker and list all the services

00:08:06,430 --> 00:08:12,550
and classes in plans and make those

00:08:09,670 --> 00:08:14,020
available into your cluster so just like

00:08:12,550 --> 00:08:15,760
that picture that I showed earlier we

00:08:14,020 --> 00:08:17,260
had desired stay in actual state and

00:08:15,760 --> 00:08:19,240
there's a reconciliation thing happen in

00:08:17,260 --> 00:08:21,100
the middle that's what's happening part

00:08:19,240 --> 00:08:22,120
of the Service Catalog implementation is

00:08:21,100 --> 00:08:24,430
a controller that knows how to operate

00:08:22,120 --> 00:08:27,040
on those things and it reconciles the

00:08:24,430 --> 00:08:29,350
state of your desired content or your

00:08:27,040 --> 00:08:31,720
desired configuration with reality and

00:08:29,350 --> 00:08:33,700
that means listing the classes and plans

00:08:31,720 --> 00:08:35,740
when you register a broker but it also

00:08:33,700 --> 00:08:36,910
means invoking the provision API and the

00:08:35,740 --> 00:08:39,490
bind API when you're doing those

00:08:36,910 --> 00:08:42,430
operations correspond to those resources

00:08:39,490 --> 00:08:44,140
in kubernetes so with all that in mind

00:08:42,430 --> 00:08:46,090
you can say I want to provision an

00:08:44,140 --> 00:08:49,060
instance of Cosmos TV which is an azure

00:08:46,090 --> 00:08:50,530
service or my sequel and you define that

00:08:49,060 --> 00:08:51,640
in the same way you define everything

00:08:50,530 --> 00:08:53,830
else you do in kubernetes

00:08:51,640 --> 00:08:55,690
you define a yamo file if it has

00:08:53,830 --> 00:08:57,580
whatever provisioning parameters are

00:08:55,690 --> 00:08:59,680
necessary you reference the account or

00:08:57,580 --> 00:09:01,300
the class and then plan and then you

00:08:59,680 --> 00:09:03,490
post that to kubernetes and the API

00:09:01,300 --> 00:09:05,650
server says I've got a new thing

00:09:03,490 --> 00:09:07,420
controller is watching that controller

00:09:05,650 --> 00:09:08,860
makes it happen and eventually you have

00:09:07,420 --> 00:09:11,230
a service instance available via

00:09:08,860 --> 00:09:13,750
kubernetes you can then bind to that and

00:09:11,230 --> 00:09:16,870
the output of the binding is a secret so

00:09:13,750 --> 00:09:18,160
if we go back to that pod definition one

00:09:16,870 --> 00:09:20,080
of the ways you could pass environment

00:09:18,160 --> 00:09:22,150
like the things to your application was

00:09:20,080 --> 00:09:23,470
to use a secret and that's exactly what

00:09:22,150 --> 00:09:27,640
happens when you create a binding in

00:09:23,470 --> 00:09:28,690
Service Catalog so this was kind of cool

00:09:27,640 --> 00:09:30,640
we've added this experience to

00:09:28,690 --> 00:09:33,040
kubernetes but one of the downsides to

00:09:30,640 --> 00:09:34,480
this I think and some of us have agreed

00:09:33,040 --> 00:09:37,930
is that the experience isn't the

00:09:34,480 --> 00:09:39,340
greatest using the CF tool to provision

00:09:37,930 --> 00:09:41,290
services and bind to them is pretty nice

00:09:39,340 --> 00:09:44,820
and from a developer standpoint it's

00:09:41,290 --> 00:09:47,200
really great doing this is not so great

00:09:44,820 --> 00:09:49,240
this is just kind of a funny slide right

00:09:47,200 --> 00:09:51,430
so in the kubernetes world you write so

00:09:49,240 --> 00:09:52,720
much Hamill you might use something like

00:09:51,430 --> 00:09:54,760
helm that's been mentioned a couple of

00:09:52,720 --> 00:09:57,460
times but you're still ready yamo files

00:09:54,760 --> 00:09:58,870
in the end and the experience on top of

00:09:57,460 --> 00:10:00,100
that is not great and everybody talks

00:09:58,870 --> 00:10:03,010
about how the experience on kubernetes

00:10:00,100 --> 00:10:04,810
isn't the best and it could be better so

00:10:03,010 --> 00:10:07,180
we thought about how could we make the

00:10:04,810 --> 00:10:09,700
Service Catalog experience better and we

00:10:07,180 --> 00:10:12,040
built a CLI that's domain driven to do

00:10:09,700 --> 00:10:13,630
these sort of things for you it's

00:10:12,040 --> 00:10:16,300
heavily heavily influenced by the

00:10:13,630 --> 00:10:17,950
experience you get with CF so as an

00:10:16,300 --> 00:10:20,590
example if you want to provision a

00:10:17,950 --> 00:10:22,390
service we can do things like SV cat

00:10:20,590 --> 00:10:24,070
provision service instance and then give

00:10:22,390 --> 00:10:25,360
it the class in the plan and then

00:10:24,070 --> 00:10:27,340
whatever parameters are necessary

00:10:25,360 --> 00:10:29,440
running this command in the end

00:10:27,340 --> 00:10:30,760
generates the exact same API objects

00:10:29,440 --> 00:10:33,400
that you would get if you did that yeah

00:10:30,760 --> 00:10:35,350
Mille definition but it's giving you a

00:10:33,400 --> 00:10:36,400
better experience to do that you can do

00:10:35,350 --> 00:10:38,740
operations like

00:10:36,400 --> 00:10:40,690
register broker and provision services

00:10:38,740 --> 00:10:44,230
and bind services update services and

00:10:40,690 --> 00:10:47,020
then all the corresponding removes along

00:10:44,230 --> 00:10:48,910
with that so we're at this point now

00:10:47,020 --> 00:10:50,710
where we've got something for kubernetes

00:10:48,910 --> 00:10:52,480
that interacts with service brokers and

00:10:50,710 --> 00:10:54,130
gives you that that cool experience of

00:10:52,480 --> 00:10:56,890
not having to worry about external

00:10:54,130 --> 00:10:58,870
tooling to provision stuff or you know

00:10:56,890 --> 00:11:01,420
leveraging existing brokers that maybe

00:10:58,870 --> 00:11:02,980
do stuff in house it's not migrated to

00:11:01,420 --> 00:11:05,870
cloud 400 or kubernetes

00:11:02,980 --> 00:11:08,120
but the experience there gets a little

00:11:05,870 --> 00:11:10,520
bit murky after that it's a little bit

00:11:08,120 --> 00:11:12,380
tricky so kubernetes obviously has a

00:11:10,520 --> 00:11:14,810
different way of doing things then Cloud

00:11:12,380 --> 00:11:16,520
Foundry does and some of those things

00:11:14,810 --> 00:11:19,370
bleed through when you look at how you

00:11:16,520 --> 00:11:21,590
actually use these things in the end so

00:11:19,370 --> 00:11:23,510
I mentioned that a binding will create a

00:11:21,590 --> 00:11:25,820
secret for you and that secret ends up

00:11:23,510 --> 00:11:27,350
looking something like this you know

00:11:25,820 --> 00:11:28,730
it's got whatever fields come back from

00:11:27,350 --> 00:11:31,730
the binding response from the broker

00:11:28,730 --> 00:11:34,220
dumped directly basically into a secret

00:11:31,730 --> 00:11:37,070
and there is no V cap services concept

00:11:34,220 --> 00:11:38,660
so you're really responsible for mapping

00:11:37,070 --> 00:11:41,120
these things directly into your

00:11:38,660 --> 00:11:43,670
application by yourself so that

00:11:41,120 --> 00:11:44,990
experience not so great there are some

00:11:43,670 --> 00:11:46,430
things you can do service catalog has a

00:11:44,990 --> 00:11:48,710
couple of extra features that allow you

00:11:46,430 --> 00:11:50,060
to do transformations on these things so

00:11:48,710 --> 00:11:51,410
if you have a couple of different

00:11:50,060 --> 00:11:52,670
services and the corrections don't look

00:11:51,410 --> 00:11:53,900
exactly the same you can apply

00:11:52,670 --> 00:11:55,640
transformations to them so that they

00:11:53,900 --> 00:11:57,740
look similar say if you're running my

00:11:55,640 --> 00:12:00,050
sequel locally from a broker and then my

00:11:57,740 --> 00:12:02,240
sequel from Amazon you can make the

00:12:00,050 --> 00:12:03,110
credentials look more similar you still

00:12:02,240 --> 00:12:05,660
don't get that V cap services

00:12:03,110 --> 00:12:08,930
experienced though so it's not exactly

00:12:05,660 --> 00:12:11,690
the same and then another concept in

00:12:08,930 --> 00:12:14,420
kubernetes that didn't make it directly

00:12:11,690 --> 00:12:15,980
into how the broker or the catalog was

00:12:14,420 --> 00:12:18,320
implemented is how to deal with

00:12:15,980 --> 00:12:20,060
namespaces correctly so if you look

00:12:18,320 --> 00:12:22,040
through those slides before I mentioned

00:12:20,060 --> 00:12:24,080
some of the new resources were a cluster

00:12:22,040 --> 00:12:26,060
service broker and cluster service class

00:12:24,080 --> 00:12:28,070
and cluster service plan those things

00:12:26,060 --> 00:12:29,990
originally were created at the cluster

00:12:28,070 --> 00:12:31,310
level which meant everybody had access

00:12:29,990 --> 00:12:33,220
to them and there wasn't really a way to

00:12:31,310 --> 00:12:36,430
apply role based access control to them

00:12:33,220 --> 00:12:39,440
it's kind of a bummer so you you may

00:12:36,430 --> 00:12:41,360
include in the cloud foundry world UCF

00:12:39,440 --> 00:12:43,520
enable service to give certain organs or

00:12:41,360 --> 00:12:45,080
spaces access to certain classes and

00:12:43,520 --> 00:12:46,610
plans you couldn't necessarily do that

00:12:45,080 --> 00:12:48,200
in kubernetes because of the way that

00:12:46,610 --> 00:12:50,600
our back works and the way that these

00:12:48,200 --> 00:12:52,370
resources were created so we did add a

00:12:50,600 --> 00:12:54,260
second set of resources that were

00:12:52,370 --> 00:12:55,250
namespace scoped and using some

00:12:54,260 --> 00:12:57,560
additional things we'll talk about in

00:12:55,250 --> 00:12:59,240
the next slide you're able to get that

00:12:57,560 --> 00:13:00,470
same kind of experience but it does

00:12:59,240 --> 00:13:02,720
complicate things a little bit because

00:13:00,470 --> 00:13:04,490
now you have to kind of equal set of

00:13:02,720 --> 00:13:06,590
resources that are really just different

00:13:04,490 --> 00:13:08,810
on how they're they're packaged right

00:13:06,590 --> 00:13:12,260
one is that the cluster level one is at

00:13:08,810 --> 00:13:14,270
the namespace level so you can get that

00:13:12,260 --> 00:13:15,530
CF enable service access like experience

00:13:14,270 --> 00:13:16,280
if you're using namespace broker

00:13:15,530 --> 00:13:17,300
resources

00:13:16,280 --> 00:13:18,980
I've included the links to the

00:13:17,300 --> 00:13:21,080
documentation here and then another

00:13:18,980 --> 00:13:24,170
feature that we allow you to do is to

00:13:21,080 --> 00:13:25,610
use catalogs restrictions one of the

00:13:24,170 --> 00:13:26,720
concepts in kubernetes is something

00:13:25,610 --> 00:13:29,060
called a label selector so when you're

00:13:26,720 --> 00:13:31,910
when you're trying to target a service

00:13:29,060 --> 00:13:33,860
to some pods or you want to list things

00:13:31,910 --> 00:13:36,050
in a certain way you can do filters

00:13:33,860 --> 00:13:38,180
really think of them like I have a label

00:13:36,050 --> 00:13:39,740
this is the value only show me the

00:13:38,180 --> 00:13:41,240
things that look like that so we added

00:13:39,740 --> 00:13:42,890
that concept to service catalog as well

00:13:41,240 --> 00:13:45,470
so you can do things like say give me

00:13:42,890 --> 00:13:47,390
only the basic plans or give me only the

00:13:45,470 --> 00:13:49,790
free plans and it will list those things

00:13:47,390 --> 00:13:51,950
back as a filtered subset and then

00:13:49,790 --> 00:13:53,750
combining the namespace broker resources

00:13:51,950 --> 00:13:55,250
and those catalog restrictions you're

00:13:53,750 --> 00:13:59,450
able to get that same kind of

00:13:55,250 --> 00:14:02,330
functionality but there are also some

00:13:59,450 --> 00:14:04,520
kubernetes only features so one of the

00:14:02,330 --> 00:14:06,680
things that we've kicked around a little

00:14:04,520 --> 00:14:10,340
bit is the the difficulty in using

00:14:06,680 --> 00:14:12,980
different brokers you know the EMA the

00:14:10,340 --> 00:14:15,860
the azure broker for instance requires a

00:14:12,980 --> 00:14:17,630
resource group and a location for every

00:14:15,860 --> 00:14:19,460
request it's kind of annoying to have to

00:14:17,630 --> 00:14:22,070
provide those things the structure of

00:14:19,460 --> 00:14:23,450
requests aren't all the same so if I'm

00:14:22,070 --> 00:14:24,980
going to use one broker and then

00:14:23,450 --> 00:14:27,380
possibly switch to another broker on

00:14:24,980 --> 00:14:28,760
another cloud it's not transparent to me

00:14:27,380 --> 00:14:30,350
as a developer I have to know things

00:14:28,760 --> 00:14:33,140
about what the structure of those

00:14:30,350 --> 00:14:34,670
requests look like so to address that we

00:14:33,140 --> 00:14:36,140
are adding a new feature to Service

00:14:34,670 --> 00:14:37,970
Catalog that allows you to define

00:14:36,140 --> 00:14:40,010
defaults so you can take a class or a

00:14:37,970 --> 00:14:42,920
plan and you can essentially fork it and

00:14:40,010 --> 00:14:45,020
say that using this thing as a template

00:14:42,920 --> 00:14:47,090
I want to define some default parameters

00:14:45,020 --> 00:14:48,530
so in this case instead of having to

00:14:47,090 --> 00:14:49,970
provide a resource group I know that

00:14:48,530 --> 00:14:53,030
this is always going to go into my

00:14:49,970 --> 00:14:54,770
resource group in Azure and then when

00:14:53,030 --> 00:14:57,200
the broker sees that you want to make a

00:14:54,770 --> 00:14:58,610
service instance using this class it's

00:14:57,200 --> 00:15:00,050
gonna resolve it down to whatever the

00:14:58,610 --> 00:15:01,490
original thing from the broker was and

00:15:00,050 --> 00:15:03,050
populate those things so that when the

00:15:01,490 --> 00:15:06,470
request goes to the broker it's fully

00:15:03,050 --> 00:15:09,140
fledged so user experience that deviates

00:15:06,470 --> 00:15:12,530
you know some from the Cloud Foundry

00:15:09,140 --> 00:15:15,980
experience but it's giving you that same

00:15:12,530 --> 00:15:17,330
kind of behavior and feel so we've

00:15:15,980 --> 00:15:19,190
talked about it a little bit I think the

00:15:17,330 --> 00:15:22,010
best way to hammer at home is to really

00:15:19,190 --> 00:15:23,570
do a couple of demonstrations this will

00:15:22,010 --> 00:15:25,100
all be available on github I have not

00:15:23,570 --> 00:15:27,770
pushed yet because I was just finishing

00:15:25,100 --> 00:15:29,180
it yesterday but it will work locally

00:15:27,770 --> 00:15:29,750
and it will also work using Azure

00:15:29,180 --> 00:15:32,210
resources

00:15:29,750 --> 00:15:33,950
if you want to use agile resources you

00:15:32,210 --> 00:15:35,120
locally you can use mini cube and you

00:15:33,950 --> 00:15:37,430
can use something called mini broker

00:15:35,120 --> 00:15:38,660
that will deploy helm temp I'm sorry how

00:15:37,430 --> 00:15:41,090
much charge on to your cluster for you

00:15:38,660 --> 00:15:42,920
automatically it's pretty cool okay so

00:15:41,090 --> 00:15:46,820
I'm gonna jump over from the PowerPoint

00:15:42,920 --> 00:15:50,000
presentation and use some demo now okay

00:15:46,820 --> 00:15:51,590
let's minimize this so I have a cluster

00:15:50,000 --> 00:15:53,420
already built and this is just a

00:15:51,590 --> 00:15:57,140
kubernetes cluster it's got some nodes

00:15:53,420 --> 00:16:05,290
oh you got to change the screen sorry

00:15:57,140 --> 00:16:08,420
thank you dog there we go how's that

00:16:05,290 --> 00:16:09,740
great okay so I've got a three node

00:16:08,420 --> 00:16:11,600
cluster here it's pretty basic

00:16:09,740 --> 00:16:15,560
it does have service catalog running

00:16:11,600 --> 00:16:21,170
already uh let's go do coop CTL get pods

00:16:15,560 --> 00:16:23,120
- and catalog it's got the API server

00:16:21,170 --> 00:16:24,260
which is going to provide that footprint

00:16:23,120 --> 00:16:25,640
for you to talk to and then the

00:16:24,260 --> 00:16:27,350
controller manager which I mentioned

00:16:25,640 --> 00:16:30,110
does that reconciliation between things

00:16:27,350 --> 00:16:33,020
and I also have a broker registered

00:16:30,110 --> 00:16:40,400
already so I do ask to be cut get

00:16:33,020 --> 00:16:41,930
brokers oops all namespaces so we tried

00:16:40,400 --> 00:16:43,460
to make this tool work pretty closely to

00:16:41,930 --> 00:16:46,070
how coop CTL works like the experience

00:16:43,460 --> 00:16:47,960
is not exactly the same we tried to meld

00:16:46,070 --> 00:16:50,120
with CF and the coop CTL command looks

00:16:47,960 --> 00:16:52,010
like so using all namespaces there as an

00:16:50,120 --> 00:16:53,660
example that comes from coop CTL this

00:16:52,010 --> 00:16:56,270
actually will work as a coop CTL plugin

00:16:53,660 --> 00:16:59,060
so if you if you feel like typing extra

00:16:56,270 --> 00:17:00,890
characters you can do coop CTL plugin SP

00:16:59,060 --> 00:17:02,600
cat get Rooker's you can use the tool

00:17:00,890 --> 00:17:05,750
directly like this so in this case I

00:17:02,600 --> 00:17:07,790
have a broker running and registered

00:17:05,750 --> 00:17:11,510
already called owes BA and it's in the

00:17:07,790 --> 00:17:13,339
CF summit demo namespace by default this

00:17:11,510 --> 00:17:14,839
this coop detail session is using the

00:17:13,339 --> 00:17:19,579
default namespace so if I do something

00:17:14,839 --> 00:17:20,839
like SV cat get plans I shouldn't get

00:17:19,579 --> 00:17:22,699
anything back because I don't have any

00:17:20,839 --> 00:17:27,650
but if I do the same thing this week at

00:17:22,699 --> 00:17:30,160
get classes or plans in the CF summit

00:17:27,650 --> 00:17:30,160
namespace

00:17:32,210 --> 00:17:35,690
I can see all the things that come back

00:17:33,770 --> 00:17:37,280
there it's quite a few and this is cool

00:17:35,690 --> 00:17:39,740
because like I can do I can define our

00:17:37,280 --> 00:17:42,320
back policies directly on that namespace

00:17:39,740 --> 00:17:43,910
to say that I'm not allowed to provision

00:17:42,320 --> 00:17:46,310
anything in this namespace but my

00:17:43,910 --> 00:17:47,900
coworker is or I'm late I'm allowed to

00:17:46,310 --> 00:17:49,840
view them but not actually do anything

00:17:47,900 --> 00:17:52,190
with them from a provisioning standpoint

00:17:49,840 --> 00:17:54,290
so you can do really fine-grained

00:17:52,190 --> 00:17:56,120
control over that and if you try to

00:17:54,290 --> 00:17:58,490
reference something in another namespace

00:17:56,120 --> 00:18:00,590
it will fail because you won't have

00:17:58,490 --> 00:18:02,480
access to it so showing you you don't

00:18:00,590 --> 00:18:13,190
see it there but if I run this command

00:18:02,480 --> 00:18:19,990
to provision probably ok we'll just type

00:18:13,190 --> 00:18:25,540
it ok so here we go SV cat provision

00:18:19,990 --> 00:18:32,690
house most - and the class is a sure

00:18:25,540 --> 00:18:36,290
cosmos DB account and the plan is

00:18:32,690 --> 00:18:41,630
a capped so we'll just verify that real

00:18:36,290 --> 00:18:44,330
quick by scrolling up here as your

00:18:41,630 --> 00:18:50,620
cosmos DB account is the name of

00:18:44,330 --> 00:18:50,620
the class make sure you type that right

00:18:55,030 --> 00:19:00,080
cool so if I run this command it's gonna

00:18:58,460 --> 00:19:02,030
say that it sent the request obviously

00:19:00,080 --> 00:19:03,920
it made all the API objects to do that

00:19:02,030 --> 00:19:11,330
but if I do as we can't get instances

00:19:03,920 --> 00:19:13,340
now if I type it as you see it

00:19:11,330 --> 00:19:16,100
references the non-existent service

00:19:13,340 --> 00:19:17,720
class so it failed to provision and I

00:19:16,100 --> 00:19:19,100
have prove it I've prohibited anybody

00:19:17,720 --> 00:19:20,780
using the default namespace you can see

00:19:19,100 --> 00:19:22,610
default right here from provisioning

00:19:20,780 --> 00:19:25,610
anything using that broker because it's

00:19:22,610 --> 00:19:27,080
not exposed into this this namespace so

00:19:25,610 --> 00:19:32,150
I'll just delete that so it's gone from

00:19:27,080 --> 00:19:34,030
the list and that really just removes it

00:19:32,150 --> 00:19:36,530
from the catalogue and from the cluster

00:19:34,030 --> 00:19:38,600
okay now I can actually register that

00:19:36,530 --> 00:19:40,550
thing and I can also register another

00:19:38,600 --> 00:19:50,960
broker so we'll just install mini broker

00:19:40,550 --> 00:19:53,120
really quickly this will use helm to do

00:19:50,960 --> 00:19:54,710
an installation of the broker and it'll

00:19:53,120 --> 00:19:56,510
create things like the service broker

00:19:54,710 --> 00:19:57,710
resource and the secrets associated with

00:19:56,510 --> 00:19:59,690
that and you little spit everything out

00:19:57,710 --> 00:20:01,790
for you so service account pod a cluster

00:19:59,690 --> 00:20:07,850
service broker and if I do SV cat get

00:20:01,790 --> 00:20:09,200
brokers all namespaces cool there's one

00:20:07,850 --> 00:20:10,310
right there it's not so it hasn't been

00:20:09,200 --> 00:20:12,410
picked up yet but it'll get there in a

00:20:10,310 --> 00:20:14,210
second we can do the same thing in rent

00:20:12,410 --> 00:20:15,890
and register owes BOE a second time and

00:20:14,210 --> 00:20:17,210
because these things are constrained in

00:20:15,890 --> 00:20:18,860
the namespaces you can register the

00:20:17,210 --> 00:20:21,860
broker any number of times without

00:20:18,860 --> 00:20:23,180
having to run it again so you can just

00:20:21,860 --> 00:20:26,290
create a secret I think I already did

00:20:23,180 --> 00:20:26,290
but we'll just run this anyway

00:20:31,070 --> 00:20:43,020
cool so we have a secret there now and

00:20:33,420 --> 00:20:45,380
if we run this register command and if I

00:20:43,020 --> 00:20:45,380
look now

00:20:56,290 --> 00:21:08,570
my cluster just died cool there goes its

00:21:05,630 --> 00:21:10,130
back it's coming so the O's but default

00:21:08,570 --> 00:21:11,090
broker is gonna be registered in that

00:21:10,130 --> 00:21:13,520
default namespace

00:21:11,090 --> 00:21:21,670
it hasn't been picked up yet let's see

00:21:13,520 --> 00:21:26,810
if we can watch that okay I can kick it

00:21:21,670 --> 00:21:29,720
do tl get pod session catalog there's a

00:21:26,810 --> 00:21:39,110
bug in in my cluster right now so if I

00:21:29,720 --> 00:21:40,160
just kill this this will restart the

00:21:39,110 --> 00:21:41,570
controller manager and it'll actually

00:21:40,160 --> 00:21:46,280
just go pick up all that information

00:21:41,570 --> 00:21:53,120
again so it's running again if I do SV

00:21:46,280 --> 00:21:55,670
cat get broker's cool there already now

00:21:53,120 --> 00:21:59,780
so that that got picked up and it works

00:21:55,670 --> 00:22:04,040
now if I do s we can't get instances we

00:21:59,780 --> 00:22:05,990
don't have any in this namespace but we

00:22:04,040 --> 00:22:07,880
do have one in that CF summit demo

00:22:05,990 --> 00:22:09,920
namespace already so just like you would

00:22:07,880 --> 00:22:13,280
create the broker you can use SV cat to

00:22:09,920 --> 00:22:15,800
do that you can also use in a yamo file

00:22:13,280 --> 00:22:16,130
to do that and we can run that really

00:22:15,800 --> 00:22:17,810
quickly

00:22:16,130 --> 00:22:19,280
we'll just actually use coops details so

00:22:17,810 --> 00:22:24,700
you can see what that looks like comes

00:22:19,280 --> 00:22:27,920
to Teal'c create - F I was cosmos TPE

00:22:24,700 --> 00:22:31,210
and we'll put it in the namespace that

00:22:27,920 --> 00:22:31,210
we'll put in default namespace

00:22:38,780 --> 00:22:42,810
cool so it's provisioning now it's made

00:22:41,010 --> 00:22:44,400
that request to the broker and the

00:22:42,810 --> 00:22:47,580
broker is asynchronously gonna go do

00:22:44,400 --> 00:22:48,990
that if I run this command it'll take

00:22:47,580 --> 00:22:50,280
like five minutes for that to happen

00:22:48,990 --> 00:22:55,830
but eventually it'll be ready and it'll

00:22:50,280 --> 00:22:58,080
look exactly like the other one cool so

00:22:55,830 --> 00:23:00,630
let's let's see what it looks like to

00:22:58,080 --> 00:23:04,530
use that now so I could run the SV come

00:23:00,630 --> 00:23:06,510
at s peek at bind command this window is

00:23:04,530 --> 00:23:08,160
pretty small but I can run the bind

00:23:06,510 --> 00:23:09,480
command and I can pass any kind of

00:23:08,160 --> 00:23:11,460
parameters that I want I just reference

00:23:09,480 --> 00:23:12,900
the instance there's just a few ways to

00:23:11,460 --> 00:23:14,070
do that and you can customize a lot of

00:23:12,900 --> 00:23:16,050
things like what secret it's gonna end

00:23:14,070 --> 00:23:19,500
up in but the simplest thing to do is

00:23:16,050 --> 00:23:20,850
just do SV cat buying service and you

00:23:19,500 --> 00:23:22,170
end up with a secret you don't have to

00:23:20,850 --> 00:23:23,880
have the application deployed already to

00:23:22,170 --> 00:23:26,100
do that because it's a little bit of a

00:23:23,880 --> 00:23:27,690
disconnected process so you can do those

00:23:26,100 --> 00:23:29,580
at the same time if you want and that's

00:23:27,690 --> 00:23:31,440
what we usually do with helm so a lot of

00:23:29,580 --> 00:23:33,960
the examples we have and when I use

00:23:31,440 --> 00:23:35,010
Service Catalog myself I usually package

00:23:33,960 --> 00:23:36,180
these things in to helm charts because

00:23:35,010 --> 00:23:37,590
it makes it easier for me to deploy my

00:23:36,180 --> 00:23:39,330
application and then say also go

00:23:37,590 --> 00:23:40,890
provision me the service also bind to

00:23:39,330 --> 00:23:43,110
the service and then you can do

00:23:40,890 --> 00:23:44,670
different permit or Prem or permutations

00:23:43,110 --> 00:23:47,700
of that right so you can say I already

00:23:44,670 --> 00:23:49,620
have an existing cosmos DB instance but

00:23:47,700 --> 00:23:51,630
I want to be able to provision my

00:23:49,620 --> 00:23:53,040
service and have it bind to that and

00:23:51,630 --> 00:23:56,580
we'll show you that really quickly right

00:23:53,040 --> 00:23:58,710
now so I have a helmet art that wraps up

00:23:56,580 --> 00:24:01,050
the spring music Cloud Foundry sample

00:23:58,710 --> 00:24:03,300
application and it runs really well on

00:24:01,050 --> 00:24:05,430
kubernetes I just containerized it made

00:24:03,300 --> 00:24:06,930
a docker image pushed it to my registry

00:24:05,430 --> 00:24:08,130
and then I wrote a helmet art to take

00:24:06,930 --> 00:24:13,370
care of that and that looks a little bit

00:24:08,130 --> 00:24:17,190
like this so let's look at spring music

00:24:13,370 --> 00:24:18,630
templates it's got a binding it's got a

00:24:17,190 --> 00:24:20,580
deployment and the deployment is really

00:24:18,630 --> 00:24:21,870
that unit of scale so it's going to

00:24:20,580 --> 00:24:24,090
define what the template looks like for

00:24:21,870 --> 00:24:26,070
the pod and how many replicas I want the

00:24:24,090 --> 00:24:28,800
ingress is kind of like the route that

00:24:26,070 --> 00:24:30,960
we'll get to that service and the

00:24:28,800 --> 00:24:32,220
service itself is how you collect all

00:24:30,960 --> 00:24:33,690
the nodes so if you say you want five

00:24:32,220 --> 00:24:35,850
instances of the spring music

00:24:33,690 --> 00:24:39,090
application it'll get collected together

00:24:35,850 --> 00:24:39,960
via that service the binding looks very

00:24:39,090 --> 00:24:42,510
very similar

00:24:39,960 --> 00:24:44,280
just just templated to to the ml that we

00:24:42,510 --> 00:24:46,080
saw for creating a service instance or

00:24:44,280 --> 00:24:47,980
for a broker inside of it you're gonna

00:24:46,080 --> 00:24:50,060
reference the

00:24:47,980 --> 00:24:52,370
the class you want to use like the

00:24:50,060 --> 00:24:54,320
instance ref so the name that thing so

00:24:52,370 --> 00:24:55,790
cosmos DB probably will be the name we

00:24:54,320 --> 00:24:58,310
use and then what secret you want to

00:24:55,790 --> 00:25:02,200
populate so now we can just run that

00:24:58,310 --> 00:25:02,200
command and see what happens

00:25:06,370 --> 00:25:09,610
right here

00:25:13,250 --> 00:25:23,919
Oh forgot to delete it hold on one

00:25:21,650 --> 00:25:23,919
second

00:25:24,580 --> 00:25:31,970
cool now we're in it so we just did a

00:25:30,380 --> 00:25:33,679
whole bunch of things because those

00:25:31,970 --> 00:25:35,450
yellow files had to find things like the

00:25:33,679 --> 00:25:37,610
service the secret that's associated

00:25:35,450 --> 00:25:40,010
with that binding the binding itself and

00:25:37,610 --> 00:25:42,320
the deployment and the pods if we scroll

00:25:40,010 --> 00:25:44,000
up we can see those things here is the

00:25:42,320 --> 00:25:45,409
pod that got created here is the binding

00:25:44,000 --> 00:25:50,090
that got created here is the deployment

00:25:45,409 --> 00:25:51,710
here is the service and there's the

00:25:50,090 --> 00:25:53,900
binding so we can look at those things

00:25:51,710 --> 00:25:58,840
now so if I do SP cat I'm sorry just

00:25:53,900 --> 00:25:58,840
coop CTL coop CTL get secrets

00:26:05,559 --> 00:26:12,820
hasn't happened yet let's take a look at

00:26:08,210 --> 00:26:12,820
the binding so SV cat get bindings Oh

00:26:13,870 --> 00:26:24,350
wrong namespace that's my problem

00:26:17,799 --> 00:26:26,419
CF summit demo so there is the spring

00:26:24,350 --> 00:26:29,289
music spring music cosmos DB secret and

00:26:26,419 --> 00:26:31,010
then if we look at what that looks like

00:26:29,289 --> 00:26:40,309
see ya

00:26:31,010 --> 00:26:44,029
okay get secret - n CF summit demo and

00:26:40,309 --> 00:26:51,080
we say we want to look at the Y mo let's

00:26:44,029 --> 00:26:53,779
shrink this down so I got back a big old

00:26:51,080 --> 00:26:55,610
Y Amal the secret has a few things in it

00:26:53,779 --> 00:26:58,669
it's got a connection string it's got a

00:26:55,610 --> 00:26:59,990
host a port a password URI a user name

00:26:58,669 --> 00:27:02,630
they're just the things that our broker

00:26:59,990 --> 00:27:04,100
returns and you see them here as just

00:27:02,630 --> 00:27:05,630
base64-encoded you can obviously

00:27:04,100 --> 00:27:08,029
configure kubernetes to do more crazy

00:27:05,630 --> 00:27:10,370
things like encrypt them but the default

00:27:08,029 --> 00:27:11,510
is just to basics T for encode them if

00:27:10,370 --> 00:27:12,799
we look at what the deployment looks

00:27:11,510 --> 00:27:14,390
like though that's that's gonna be where

00:27:12,799 --> 00:27:16,850
the interesting thing that match maps

00:27:14,390 --> 00:27:23,270
this secret up to that application so

00:27:16,850 --> 00:27:25,690
they can do okay get deployments some

00:27:23,270 --> 00:27:25,690
demo

00:27:28,890 --> 00:27:32,789
there's our deployment and we want to

00:27:30,809 --> 00:27:39,260
look at what that looks like so let's do

00:27:32,789 --> 00:27:39,260
a que describe deployment

00:27:47,030 --> 00:27:50,180
okay we can see inside of that thing

00:27:48,830 --> 00:27:53,600
that it has an environment variable

00:27:50,180 --> 00:27:56,270
called cosmos DB URI and that's set to

00:27:53,600 --> 00:27:58,430
the connection string field or key in

00:27:56,270 --> 00:28:00,950
the secret spring music spring music

00:27:58,430 --> 00:28:02,330
cosmos DB secret so that secret got

00:28:00,950 --> 00:28:05,480
created because I did the binding

00:28:02,330 --> 00:28:07,700
request once service catalogue got the

00:28:05,480 --> 00:28:09,200
binding response from the broker it

00:28:07,700 --> 00:28:10,430
created that secret and then this

00:28:09,200 --> 00:28:11,930
container was able to start up

00:28:10,430 --> 00:28:14,420
successfully because the secret existed

00:28:11,930 --> 00:28:15,860
and it populated that URI and if we look

00:28:14,420 --> 00:28:25,510
at the logs of this thing we'd get the

00:28:15,860 --> 00:28:25,510
pods can we do Kellogg's chef

00:28:32,540 --> 00:28:35,660
you know this is just like the current

00:28:34,010 --> 00:28:36,770
the exact same thing you would see if

00:28:35,660 --> 00:28:39,500
you were tailing the logs if it was

00:28:36,770 --> 00:28:41,560
running in Cloud Foundry and if we

00:28:39,500 --> 00:28:47,510
scroll up a little bit we should see

00:28:41,560 --> 00:28:51,230
that it's using that that URL so this is

00:28:47,510 --> 00:28:54,250
the decoded view of that thing and I can

00:28:51,230 --> 00:28:54,250
port forward to it now

00:29:19,460 --> 00:29:23,480
okay port forwarding to it now if I go

00:29:21,200 --> 00:29:25,630
to the browser it's open browser window

00:29:23,480 --> 00:29:25,630
up

00:29:31,070 --> 00:29:34,560
hey it's spring music and it's got all

00:29:33,150 --> 00:29:36,600
the data loaded in it and it's coming

00:29:34,560 --> 00:29:38,610
from that cosmos TV that was provisioned

00:29:36,600 --> 00:29:40,290
in the cloud and the experience there

00:29:38,610 --> 00:29:42,930
was so much better than having to go

00:29:40,290 --> 00:29:44,280
externally and define something or use

00:29:42,930 --> 00:29:45,660
the azure a resource manager to make

00:29:44,280 --> 00:29:47,070
these things or click into the portal

00:29:45,660 --> 00:29:49,680
and have to manually copy those things

00:29:47,070 --> 00:29:50,940
over it's giving you that that similar

00:29:49,680 --> 00:29:53,430
experience but not quite the same

00:29:50,940 --> 00:29:55,530
experience adapted to kubernetes and I

00:29:53,430 --> 00:30:00,060
think this works out well in that hybrid

00:29:55,530 --> 00:30:02,070
future that we're kind of seeing now we

00:30:00,060 --> 00:30:05,130
maybe you're running some of your your

00:30:02,070 --> 00:30:06,540
applications in the containerize cf

00:30:05,130 --> 00:30:08,190
maybe you're running some of them on

00:30:06,540 --> 00:30:10,440
kubernetes but you're getting the same

00:30:08,190 --> 00:30:11,940
broker experience from both of those so

00:30:10,440 --> 00:30:13,950
times up now and if anybody has any

00:30:11,940 --> 00:30:15,900
questions we can I can ask I'll send

00:30:13,950 --> 00:30:21,430
down here and you can talk to me or go

00:30:15,900 --> 00:30:25,770
enjoy the the Welcome Reception Thanks

00:30:21,430 --> 00:30:25,900
[Applause]

00:30:25,770 --> 00:30:29,890
you

00:30:25,900 --> 00:30:29,890

YouTube URL: https://www.youtube.com/watch?v=LIXYpXnMIac


