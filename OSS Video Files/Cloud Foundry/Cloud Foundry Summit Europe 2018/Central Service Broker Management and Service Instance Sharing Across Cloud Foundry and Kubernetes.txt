Title: Central Service Broker Management and Service Instance Sharing Across Cloud Foundry and Kubernetes
Publication date: 2018-10-10
Playlist: Cloud Foundry Summit Europe 2018
Description: 
	Central Service Broker Management and Service Instance Sharing Across Cloud Foundry and Kubernetes - Florian MuÌˆller, SAP SE

The Open Service Broker API sets the standard for how a single instance of Cloud Foundry, Kubernetes, and other platforms create services instances and bind those instances to applications. But managing which services are available across multiple instances of those platforms is a challenge when there are hundreds of potential services that need to be managed across thousands of platform instances.

Another challenge is managing service instances across those platforms. There are several use cases where a service instance created within one platform must also be accessible within another platform. For example, a database instance created initially by a Cloud Foundry application must be accessible by a Kubernetes application.

In this talk we present the Service Manager, a central component to manage service brokers and service instances across many platforms and different types of platforms. The OSB API enables this component to work without any platform changes and support for the native platform tools.

https://cfseu18.sched.com/event/FRyh/central-service-broker-management-and-service-instance-sharing-across-cloud-foundry-and-kubernetes-florian-muller-sap-se
Captions: 
	00:00:00,110 --> 00:00:04,920
okay we'll slowly start because I've

00:00:03,120 --> 00:00:08,820
probably more content than I have time

00:00:04,920 --> 00:00:12,019
for my name is Florian Mueller I'm a

00:00:08,820 --> 00:00:14,700
technical eat at the SA P cloud platform

00:00:12,019 --> 00:00:16,619
you've seen probably most of what I'm a

00:00:14,700 --> 00:00:18,660
lot a big portion of what I'm showing

00:00:16,619 --> 00:00:21,090
here already in the keynote I will go

00:00:18,660 --> 00:00:22,650
into some more details and you're

00:00:21,090 --> 00:00:26,160
probably all here to see the demo

00:00:22,650 --> 00:00:29,250
actually broking well let's see if I if

00:00:26,160 --> 00:00:31,969
you can come to this to this agenda

00:00:29,250 --> 00:00:35,340
point talking about the agenda

00:00:31,969 --> 00:00:37,260
introductions what I'm doing here I'm

00:00:35,340 --> 00:00:38,940
talking about the the many services many

00:00:37,260 --> 00:00:40,379
platforms problem problem that are

00:00:38,940 --> 00:00:42,270
already mentioned in there in the

00:00:40,379 --> 00:00:44,070
keynote then I talked a little bit about

00:00:42,270 --> 00:00:47,370
the service manager a bit more in detail

00:00:44,070 --> 00:00:51,120
then I talked in the keynote I will

00:00:47,370 --> 00:00:54,449
explain how we do instant sharing across

00:00:51,120 --> 00:00:57,510
platforms something I just mentioned in

00:00:54,449 --> 00:00:59,789
the keynote but every I talked about I

00:00:57,510 --> 00:01:02,730
go a little bit more into details of the

00:00:59,789 --> 00:01:05,369
peri project and then I will talk about

00:01:02,730 --> 00:01:07,619
some of the peri peri enhancement that

00:01:05,369 --> 00:01:10,710
we are doing for sa p so i talked about

00:01:07,619 --> 00:01:12,270
plugin stuff and i will explain a few of

00:01:10,710 --> 00:01:16,770
the plugins that we are building for a

00:01:12,270 --> 00:01:21,180
say pete to get an idea what this is all

00:01:16,770 --> 00:01:25,830
about very quick wrap up how the service

00:01:21,180 --> 00:01:31,020
broker brooks usually we have an admin

00:01:25,830 --> 00:01:32,430
or developer actually talking to the

00:01:31,020 --> 00:01:35,810
cloud control of the Service Catalog

00:01:32,430 --> 00:01:38,939
based on which platform BL talking about

00:01:35,810 --> 00:01:40,799
talking to the making a request to the

00:01:38,939 --> 00:01:43,140
service broker to for example create a

00:01:40,799 --> 00:01:44,759
new instance or point in instance or

00:01:43,140 --> 00:01:47,820
something like that the service protocol

00:01:44,759 --> 00:01:49,770
and somehow do stuff with the service to

00:01:47,820 --> 00:01:52,560
create for example an instance returns

00:01:49,770 --> 00:01:55,890
the credentials back to the platform and

00:01:52,560 --> 00:01:58,619
the platform will presents this

00:01:55,890 --> 00:02:00,090
financial central the application for

00:01:58,619 --> 00:02:02,100
the rest of the talk I'm not really

00:02:00,090 --> 00:02:04,649
interested in the application in the

00:02:02,100 --> 00:02:07,020
service part I'm only focusing on this

00:02:04,649 --> 00:02:09,829
Cloud Controller / Service Catalog and

00:02:07,020 --> 00:02:09,829
the service program

00:02:10,060 --> 00:02:17,650
yes so one platform on service broke not

00:02:14,349 --> 00:02:19,390
a big deal a platform multiple service

00:02:17,650 --> 00:02:21,519
broke as well if you're talking about

00:02:19,390 --> 00:02:23,200
full service brokers it's not a problem

00:02:21,519 --> 00:02:26,019
if you're talking about a hundreds

00:02:23,200 --> 00:02:27,670
hundreds of service brokers like we will

00:02:26,019 --> 00:02:30,250
eventually end up with the SAP cloud

00:02:27,670 --> 00:02:35,049
platform and this gets more of a problem

00:02:30,250 --> 00:02:37,659
if you had more platforms to that then

00:02:35,049 --> 00:02:40,620
it's at some point gets ugly and our

00:02:37,659 --> 00:02:42,939
solution to that is a service manager

00:02:40,620 --> 00:02:44,439
basically we are registering all the

00:02:42,939 --> 00:02:46,900
service brokers not directly at the

00:02:44,439 --> 00:02:48,790
platforms anymore but instead we are

00:02:46,900 --> 00:02:52,930
registering them at the service manager

00:02:48,790 --> 00:02:55,180
directly we are also registering the

00:02:52,930 --> 00:02:58,239
platforms at the service manager so this

00:02:55,180 --> 00:03:02,700
gives us a few advantages first of all

00:02:58,239 --> 00:03:05,409
of a new platform joins the environment

00:03:02,700 --> 00:03:07,269
and is registered as a service manager

00:03:05,409 --> 00:03:09,219
the service manager can figure out which

00:03:07,269 --> 00:03:12,609
of the brokers should actually actually

00:03:09,219 --> 00:03:15,010
be registered at the platform itself we

00:03:12,609 --> 00:03:17,590
can apply policies to it we can filter

00:03:15,010 --> 00:03:20,440
the catalog for example for a kubernetes

00:03:17,590 --> 00:03:22,569
class that we can somehow decide that

00:03:20,440 --> 00:03:24,819
some services shouldn't be visible some

00:03:22,569 --> 00:03:26,979
plan shouldn't be visible we can

00:03:24,819 --> 00:03:29,199
actually add add stuff to it we can add

00:03:26,979 --> 00:03:32,379
new plans and services but I'm going to

00:03:29,199 --> 00:03:34,750
into this and a little bit later we can

00:03:32,379 --> 00:03:37,449
apply other policies for example we can

00:03:34,750 --> 00:03:39,069
do simple quota checks so whenever

00:03:37,449 --> 00:03:42,849
platform wants to create a new instance

00:03:39,069 --> 00:03:44,949
the service manager knows how many

00:03:42,849 --> 00:03:48,849
instances are already existing for a

00:03:44,949 --> 00:03:51,009
certain customer and then can do a quota

00:03:48,849 --> 00:03:53,769
check and say well you have to quote our

00:03:51,009 --> 00:03:55,750
five instances you're trying to create

00:03:53,769 --> 00:03:58,810
your sixth one I'm not doing this or the

00:03:55,750 --> 00:04:01,090
Brock of all not even asked to to create

00:03:58,810 --> 00:04:03,669
a new instance so we can do a lot of

00:04:01,090 --> 00:04:05,709
stuff here and this policy thing is

00:04:03,669 --> 00:04:08,139
really important for us so we can

00:04:05,709 --> 00:04:12,909
actually have some SP specific illogic

00:04:08,139 --> 00:04:14,349
in the whole flow but I going to talk

00:04:12,909 --> 00:04:17,709
about the architecture bit later and

00:04:14,349 --> 00:04:20,680
then we can go into the details the

00:04:17,709 --> 00:04:22,250
other thing that just this gives us is

00:04:20,680 --> 00:04:25,210
instant sharing now

00:04:22,250 --> 00:04:27,890
we have a few typical use cases one is

00:04:25,210 --> 00:04:29,810
you have a database created for a Cloud

00:04:27,890 --> 00:04:31,850
Foundry application and you now want to

00:04:29,810 --> 00:04:34,340
reuse this in your kubernetes cluster

00:04:31,850 --> 00:04:36,710
for an application the communities

00:04:34,340 --> 00:04:38,090
closer now I already hear people

00:04:36,710 --> 00:04:40,700
screaming saying you're doing it wrong

00:04:38,090 --> 00:04:42,290
right so this looks like you have two

00:04:40,700 --> 00:04:44,480
micro services and each micro server

00:04:42,290 --> 00:04:45,170
should have its own database yes yes

00:04:44,480 --> 00:04:47,390
that's true

00:04:45,170 --> 00:04:49,100
but there are some scenarios they really

00:04:47,390 --> 00:04:51,920
want to share the same database because

00:04:49,100 --> 00:04:53,780
the data and the database is is huge and

00:04:51,920 --> 00:04:56,330
you don't want to transfer data back and

00:04:53,780 --> 00:04:57,950
forth the database or the backend system

00:04:56,330 --> 00:04:59,990
might be expensive and you don't want to

00:04:57,950 --> 00:05:02,570
have two of them and so on so there are

00:04:59,990 --> 00:05:05,270
their use cases for that the other

00:05:02,570 --> 00:05:08,570
typical use case is you have a message

00:05:05,270 --> 00:05:11,230
queue and in both ends now need an

00:05:08,570 --> 00:05:16,340
instance of this message queue and well

00:05:11,230 --> 00:05:18,740
this instant sharing across the

00:05:16,340 --> 00:05:23,360
platform's gives us the ability to

00:05:18,740 --> 00:05:25,010
actually establish this connection in so

00:05:23,360 --> 00:05:27,020
sharing is already possible without a

00:05:25,010 --> 00:05:28,940
service manager what it's it's pretty

00:05:27,020 --> 00:05:31,729
easy you create a service key and then

00:05:28,940 --> 00:05:34,580
you somehow transfer the key to the

00:05:31,729 --> 00:05:36,680
other platform and then the other

00:05:34,580 --> 00:05:40,640
application can use it but you basically

00:05:36,680 --> 00:05:42,380
lose control of all of this like for

00:05:40,640 --> 00:05:45,580
example if you delete in the instance do

00:05:42,380 --> 00:05:48,410
you know who else is using it no because

00:05:45,580 --> 00:05:52,220
it's a manual process so this this is

00:05:48,410 --> 00:05:53,570
not something that scales so instant

00:05:52,220 --> 00:05:55,370
sharing with the service manager groups

00:05:53,570 --> 00:05:57,710
will be a little bit different so all

00:05:55,370 --> 00:05:59,479
requests go through the service Metro

00:05:57,710 --> 00:06:01,550
all open service broker at Wrestle I

00:05:59,479 --> 00:06:02,960
should mention that it's the open

00:06:01,550 --> 00:06:06,229
service broker request we are not

00:06:02,960 --> 00:06:08,419
proxying any traffic between the

00:06:06,229 --> 00:06:10,550
application and the service that's not

00:06:08,419 --> 00:06:12,290
our business right it's only the open

00:06:10,550 --> 00:06:16,250
service broker calls that go through the

00:06:12,290 --> 00:06:17,810
service manager this makes it possible

00:06:16,250 --> 00:06:20,300
that the service may attract all the

00:06:17,810 --> 00:06:24,740
instances so the the service maitre has

00:06:20,300 --> 00:06:27,020
at always a complete list of all

00:06:24,740 --> 00:06:31,370
instances of all platforms for all

00:06:27,020 --> 00:06:33,410
services so what we are now doing to

00:06:31,370 --> 00:06:35,110
enable instant sharing is we adding a

00:06:33,410 --> 00:06:39,020
reference plan

00:06:35,110 --> 00:06:42,260
to each service in the catalogue that

00:06:39,020 --> 00:06:45,260
should be shareable betweens when we

00:06:42,260 --> 00:06:46,940
register broker and there are services

00:06:45,260 --> 00:06:49,729
that should be shareable the service

00:06:46,940 --> 00:06:51,260
manager will add to the catalog another

00:06:49,729 --> 00:06:52,940
plan for each of us that should be

00:06:51,260 --> 00:06:56,240
shareable that we call the reference

00:06:52,940 --> 00:06:59,330
plan and this will then show up at the

00:06:56,240 --> 00:07:01,729
platform so let's say for an AIDS

00:06:59,330 --> 00:07:03,380
cluster it looks like this and it's a

00:07:01,729 --> 00:07:07,280
plan that doesn't really exist in the

00:07:03,380 --> 00:07:10,729
broker it's a virtual plan basically so

00:07:07,280 --> 00:07:14,389
when when we create a new instance with

00:07:10,729 --> 00:07:20,330
this reference plan we need the original

00:07:14,389 --> 00:07:23,740
instance of this of the the original ID

00:07:20,330 --> 00:07:26,750
of the instance that we want to share

00:07:23,740 --> 00:07:29,300
then the request goes to the service

00:07:26,750 --> 00:07:31,760
manager the service manager identifies

00:07:29,300 --> 00:07:35,080
this as a reference plan we throw the

00:07:31,760 --> 00:07:40,220
mapping between the two instances and

00:07:35,080 --> 00:07:42,740
return success so the broker is actually

00:07:40,220 --> 00:07:44,930
not involved in this whole thing it's a

00:07:42,740 --> 00:07:46,880
mapping that happens within the service

00:07:44,930 --> 00:07:48,860
manager and the nice thing about this is

00:07:46,880 --> 00:07:50,990
that the brokers don't need any special

00:07:48,860 --> 00:07:55,639
support for instance sharing across

00:07:50,990 --> 00:07:58,550
those it just works with any broker in

00:07:55,639 --> 00:08:01,210
fact we are well although we don't have

00:07:58,550 --> 00:08:04,639
to talk to the broker

00:08:01,210 --> 00:08:07,520
we add s IP do that so we will do that

00:08:04,639 --> 00:08:10,580
because it's not not implemented yet we

00:08:07,520 --> 00:08:13,070
will we will tell the broker that there

00:08:10,580 --> 00:08:15,320
is a new customer for this instance and

00:08:13,070 --> 00:08:20,690
how this works I will I will explain in

00:08:15,320 --> 00:08:22,190
a minute now in the in the target

00:08:20,690 --> 00:08:24,680
platform there's now a new instance

00:08:22,190 --> 00:08:26,690
created with this reference plan and for

00:08:24,680 --> 00:08:28,639
the platform for the cloud controller

00:08:26,690 --> 00:08:33,050
the Service Catalog this just looks like

00:08:28,639 --> 00:08:34,909
an instance so we can create a binding

00:08:33,050 --> 00:08:38,719
get credentials for this Enzo and

00:08:34,909 --> 00:08:44,209
everything works out so there are some

00:08:38,719 --> 00:08:47,780
some challenges with instant sharing who

00:08:44,209 --> 00:08:49,130
can share which instance bear so here

00:08:47,780 --> 00:08:51,050
again we need some poles

00:08:49,130 --> 00:08:54,050
and that everything is a service manager

00:08:51,050 --> 00:08:55,759
as well to check those policies and

00:08:54,050 --> 00:08:59,449
these are probably policies that are

00:08:55,759 --> 00:09:02,300
very very specific to the cloud provider

00:08:59,449 --> 00:09:04,279
all right so it probably looks something

00:09:02,300 --> 00:09:06,170
completely different for our IBM than it

00:09:04,279 --> 00:09:07,670
looks for its ap because of the domain

00:09:06,170 --> 00:09:10,459
model and how customers are modeled and

00:09:07,670 --> 00:09:16,459
how permissions are work are different

00:09:10,459 --> 00:09:18,769
so there's no one fits all solution the

00:09:16,459 --> 00:09:23,389
second challenge is who actually owned

00:09:18,769 --> 00:09:26,300
the instance if I share the instance are

00:09:23,389 --> 00:09:28,040
now both the share instance and the

00:09:26,300 --> 00:09:31,850
original instance are now owners of

00:09:28,040 --> 00:09:35,029
officers who can make updates to the

00:09:31,850 --> 00:09:39,680
services what so again this is the thing

00:09:35,029 --> 00:09:43,699
for for policies and very specific if

00:09:39,680 --> 00:09:45,920
there is an owner of an instance Kineton

00:09:43,699 --> 00:09:49,220
sphere the ownership that's really

00:09:45,920 --> 00:09:50,389
interesting what should happen well

00:09:49,220 --> 00:09:52,040
that's actually the next thing what

00:09:50,389 --> 00:09:54,860
should actually happen if I delete in an

00:09:52,040 --> 00:09:57,889
instance all right so if I delete the

00:09:54,860 --> 00:10:00,019
original one eye and the delete go

00:09:57,889 --> 00:10:02,269
through I actually break all the the

00:10:00,019 --> 00:10:04,040
shared instances that's something I

00:10:02,269 --> 00:10:07,430
probably don't want but maybe in some

00:10:04,040 --> 00:10:11,810
case I actually want that behavior if I

00:10:07,430 --> 00:10:13,610
delete a reference instance well the

00:10:11,810 --> 00:10:16,220
reference instance goes away but does it

00:10:13,610 --> 00:10:20,720
mean I also want to delete the the whole

00:10:16,220 --> 00:10:23,149
instance what if I want to actually

00:10:20,720 --> 00:10:24,769
delete want to get rid of the the

00:10:23,149 --> 00:10:26,899
platform that originally created the

00:10:24,769 --> 00:10:28,850
instance right so I want to get rid of a

00:10:26,899 --> 00:10:31,970
the kubernetes cluster that created the

00:10:28,850 --> 00:10:33,740
instance and well the others that have

00:10:31,970 --> 00:10:38,050
shared this instance still need access

00:10:33,740 --> 00:10:38,050
to it so this all instant sharing across

00:10:38,589 --> 00:10:45,920
across platforms is actually pretty

00:10:41,420 --> 00:10:47,810
difficult and the whole policy thing

00:10:45,920 --> 00:10:50,480
within or the whole plugin mechanism

00:10:47,810 --> 00:10:54,439
that hold the policies in the service

00:10:50,480 --> 00:10:58,060
manager can cancel that or we can at

00:10:54,439 --> 00:10:58,060
least implement the policy that we need

00:10:58,149 --> 00:11:02,950
coming to the peri plea project that are

00:11:01,939 --> 00:11:06,550
also mentioned in

00:11:02,950 --> 00:11:09,300
and the keynote it's an open service

00:11:06,550 --> 00:11:11,860
manager implementation by ASAP basically

00:11:09,300 --> 00:11:14,320
implementing what I've just talked about

00:11:11,860 --> 00:11:16,540
we started in February this year to do

00:11:14,320 --> 00:11:19,260
that it's written in go

00:11:16,540 --> 00:11:22,000
it runs on Cloud Foundry in kubernetes

00:11:19,260 --> 00:11:24,070
we had a CPA currently running it on

00:11:22,000 --> 00:11:26,470
Cloud Foundry but in the long run we

00:11:24,070 --> 00:11:29,649
will move it to kubernetes probably it

00:11:26,470 --> 00:11:32,709
consists of four main components the

00:11:29,649 --> 00:11:34,600
service manager itself the service

00:11:32,709 --> 00:11:36,430
broker proxy for Cloud Foundry and one

00:11:34,600 --> 00:11:40,779
for kubernetes and I will explain those

00:11:36,430 --> 00:11:43,899
in a second and a command line tool it's

00:11:40,779 --> 00:11:46,540
not really surprising app we have

00:11:43,899 --> 00:11:49,209
bi-weekly calls with interested parties

00:11:46,540 --> 00:11:53,320
so if anybody's interested in this in

00:11:49,209 --> 00:11:54,790
this project can just dial in and listen

00:11:53,320 --> 00:11:57,399
about but what's happened what's the

00:11:54,790 --> 00:12:00,250
current status it's what ideas scenarios

00:11:57,399 --> 00:12:02,220
whatever we talk and of course the

00:12:00,250 --> 00:12:05,709
source code is is on github and you can

00:12:02,220 --> 00:12:09,940
can take it and use it as I mentioned in

00:12:05,709 --> 00:12:12,060
in the keynote it's working as it is so

00:12:09,940 --> 00:12:16,329
you can take it install it and it works

00:12:12,060 --> 00:12:20,040
it has no plugins so it will not do any

00:12:16,329 --> 00:12:22,510
checks so it will let everything through

00:12:20,040 --> 00:12:24,010
which is which is good for testing but

00:12:22,510 --> 00:12:27,490
probably not something you want in

00:12:24,010 --> 00:12:30,820
production so the high-level

00:12:27,490 --> 00:12:32,589
architecture of the people project looks

00:12:30,820 --> 00:12:34,120
like this we have the service manager in

00:12:32,589 --> 00:12:36,910
the middle we have service broker that

00:12:34,120 --> 00:12:39,430
we can register here we have a command

00:12:36,910 --> 00:12:42,130
line tool that talks to the service

00:12:39,430 --> 00:12:45,070
manager API the service nature API has

00:12:42,130 --> 00:12:48,130
basically two big blocks one is more

00:12:45,070 --> 00:12:51,459
admitted administrative like registering

00:12:48,130 --> 00:12:53,890
brokers in platforms and the other one

00:12:51,459 --> 00:12:56,610
is and I mentioned this mentioned this

00:12:53,890 --> 00:13:01,420
here is you can actually use it to

00:12:56,610 --> 00:13:03,310
create instances bindings both service

00:13:01,420 --> 00:13:06,279
keys I should say so actually the

00:13:03,310 --> 00:13:08,050
service manager is itself a platform so

00:13:06,279 --> 00:13:13,480
you actually don't need a platform down

00:13:08,050 --> 00:13:15,970
here to talk to brokers we use it and we

00:13:13,480 --> 00:13:20,319
will use it in in some use cases where

00:13:15,970 --> 00:13:21,639
we have like a customer account but this

00:13:20,319 --> 00:13:23,769
customer account has no platform

00:13:21,639 --> 00:13:25,509
attached to it but still we can create

00:13:23,769 --> 00:13:27,909
instances like a database or something

00:13:25,509 --> 00:13:30,879
like that and in the later step the

00:13:27,909 --> 00:13:32,529
customer can add Cloud Foundry Okuma

00:13:30,879 --> 00:13:36,939
kubernetes and wherever and then reuse

00:13:32,529 --> 00:13:39,759
it I will I will talk about this bit in

00:13:36,939 --> 00:13:43,720
a moment but let me start doing this

00:13:39,759 --> 00:13:46,149
stuff for Cloud Foundry in for companies

00:13:43,720 --> 00:13:48,970
that we have what we call a broker proxy

00:13:46,149 --> 00:13:51,759
those two guys greenboxes that live in

00:13:48,970 --> 00:13:54,609
kubernetes and cloud foundry

00:13:51,759 --> 00:13:55,899
so whenever a broker has registered at

00:13:54,609 --> 00:13:58,359
the service manager has this

00:13:55,899 --> 00:14:00,489
registration will hit the proko proxy

00:13:58,359 --> 00:14:02,889
the broker proxy will then use the

00:14:00,489 --> 00:14:04,629
native API of the platform's all the

00:14:02,889 --> 00:14:07,059
Cloud Controller Service Catalog to

00:14:04,629 --> 00:14:08,639
register itself in the name of the

00:14:07,059 --> 00:14:11,199
broker

00:14:08,639 --> 00:14:12,759
so whenever the cloud control of the

00:14:11,199 --> 00:14:14,289
Service Catalog wants to talk to the

00:14:12,759 --> 00:14:15,999
broker it actually talks to the broker

00:14:14,289 --> 00:14:18,249
proxy which then for what the requester

00:14:15,999 --> 00:14:21,729
service manager which does its policy

00:14:18,249 --> 00:14:26,529
thing and then forward the request to

00:14:21,729 --> 00:14:28,779
the actual broker this works for for

00:14:26,529 --> 00:14:30,849
californian and kubernetes we have

00:14:28,779 --> 00:14:33,339
implemented that but there can be also

00:14:30,849 --> 00:14:36,789
other platforms right so this is just

00:14:33,339 --> 00:14:39,819
the open service broke API plus a few

00:14:36,789 --> 00:14:42,789
additional calls so it's it's relatively

00:14:39,819 --> 00:14:45,819
easy to to implement this for other

00:14:42,789 --> 00:14:49,089
platforms as well and in fact it s ap we

00:14:45,819 --> 00:14:51,220
have two proprietary platforms where we

00:14:49,089 --> 00:14:55,779
for one of those we will probably do

00:14:51,220 --> 00:14:58,349
this so this this is completely open and

00:14:55,779 --> 00:15:03,189
you can you can have platforms for

00:14:58,349 --> 00:15:07,720
whatever you like another way of getting

00:15:03,189 --> 00:15:10,539
instances is this we have some

00:15:07,720 --> 00:15:14,109
application that do not run in a

00:15:10,539 --> 00:15:14,829
platform for example on a plain VM or

00:15:14,109 --> 00:15:17,199
somewhere else

00:15:14,829 --> 00:15:20,019
and they also should be able to consume

00:15:17,199 --> 00:15:23,379
services so that's what the service

00:15:20,019 --> 00:15:25,539
manager API is for so the application

00:15:23,379 --> 00:15:27,879
will just ask the service manager give

00:15:25,539 --> 00:15:29,420
me your catalogue of services then well

00:15:27,879 --> 00:15:32,090
create me an instance create

00:15:29,420 --> 00:15:34,910
mr. ski and so on the difference between

00:15:32,090 --> 00:15:37,490
this API in the open server broker API

00:15:34,910 --> 00:15:40,640
down here is that when you create an

00:15:37,490 --> 00:15:42,740
instance through this path then the

00:15:40,640 --> 00:15:44,900
control of the Service Catalog are in

00:15:42,740 --> 00:15:47,150
charge of the instance so the whole

00:15:44,900 --> 00:15:50,360
lifecycle of the instance is in the hand

00:15:47,150 --> 00:15:53,720
of the platform's this means things like

00:15:50,360 --> 00:15:57,020
orphan mitigation or something the

00:15:53,720 --> 00:15:59,990
platform's are responsible for if you

00:15:57,020 --> 00:16:01,730
choose this way then the service manager

00:15:59,990 --> 00:16:04,670
is a platform and the service manager is

00:16:01,730 --> 00:16:06,830
responsible for the lifecycle of the

00:16:04,670 --> 00:16:09,080
instance so if something goes wrong an

00:16:06,830 --> 00:16:10,790
orphan mitigation has to take place then

00:16:09,080 --> 00:16:12,380
the service manager will do that the

00:16:10,790 --> 00:16:15,890
application don't need to know about

00:16:12,380 --> 00:16:20,900
this this is the more easy path to while

00:16:15,890 --> 00:16:22,910
getting an instance getting a binding it

00:16:20,900 --> 00:16:24,890
also helps us if this goes away for some

00:16:22,910 --> 00:16:28,340
reason because well probably don't

00:16:24,890 --> 00:16:29,810
control this we still have the instance

00:16:28,340 --> 00:16:32,570
this year so if you have a service that

00:16:29,810 --> 00:16:36,020
cost you 20,000 euro a month and your

00:16:32,570 --> 00:16:37,820
application dies we still in the service

00:16:36,020 --> 00:16:40,040
manner can make sure that we can get rid

00:16:37,820 --> 00:16:43,390
of this this instance so that it doesn't

00:16:40,040 --> 00:16:43,390
don't cost you any money anymore

00:16:44,590 --> 00:16:50,590
okay so I talked about the server broker

00:16:47,870 --> 00:16:53,530
proxies and well there are of course

00:16:50,590 --> 00:16:55,900
alternatives of implementing this but

00:16:53,530 --> 00:17:00,590
for a CP this was the right choice

00:16:55,900 --> 00:17:02,480
because of the following assumptions we

00:17:00,590 --> 00:17:04,700
don't want to play to change any

00:17:02,480 --> 00:17:06,170
platform so we don't want to change any

00:17:04,700 --> 00:17:09,380
Cloud Foundry code you know and it

00:17:06,170 --> 00:17:11,000
change any service catalog code it

00:17:09,380 --> 00:17:13,970
should just work with what's available

00:17:11,000 --> 00:17:14,570
today right so we don't want to touch

00:17:13,970 --> 00:17:16,900
anything

00:17:14,570 --> 00:17:20,480
it should also broke if somebody brings

00:17:16,900 --> 00:17:22,280
its own kubernetes cluster right from

00:17:20,480 --> 00:17:23,870
somewhere else we want to make sure that

00:17:22,280 --> 00:17:25,280
it works with that as well we do we

00:17:23,870 --> 00:17:30,770
don't want an SI p kubernetes cluster

00:17:25,280 --> 00:17:32,270
that is modified to support that the

00:17:30,770 --> 00:17:34,190
second assumption is it should be

00:17:32,270 --> 00:17:38,270
transparent for the application brokers

00:17:34,190 --> 00:17:40,340
so nothing should change so when we

00:17:38,270 --> 00:17:43,130
introduce the service manager into the

00:17:40,340 --> 00:17:45,850
mix the application shouldn't know

00:17:43,130 --> 00:17:49,100
just right neither all application or

00:17:45,850 --> 00:17:53,930
new application it's the same thing the

00:17:49,100 --> 00:17:56,060
native platform tools working nothing

00:17:53,930 --> 00:17:59,330
has to nothing has to change the same is

00:17:56,060 --> 00:18:01,610
true for the brokers we have tons of

00:17:59,330 --> 00:18:03,740
brokers so we don't want to touch them

00:18:01,610 --> 00:18:06,140
all so this should work without any

00:18:03,740 --> 00:18:07,730
change of the brokers this is not a

00:18:06,140 --> 00:18:10,520
hundred percent true

00:18:07,730 --> 00:18:12,890
we have brokers that are tailored to

00:18:10,520 --> 00:18:14,240
Cloud Foundry and those of course have

00:18:12,890 --> 00:18:16,100
to be changed but those have to be

00:18:14,240 --> 00:18:18,830
changed anyway to work in the

00:18:16,100 --> 00:18:24,530
communities roles so whatever change is

00:18:18,830 --> 00:18:27,260
necessary has to be done anyway the

00:18:24,530 --> 00:18:29,080
second or the third thing that is that

00:18:27,260 --> 00:18:31,760
the service manager is platform agnostic

00:18:29,080 --> 00:18:34,940
so what does it mean let let me jump to

00:18:31,760 --> 00:18:37,580
this to this slide again so the service

00:18:34,940 --> 00:18:41,420
man should speaks is open service broker

00:18:37,580 --> 00:18:43,280
API plus plus thing the service manager

00:18:41,420 --> 00:18:46,550
itself has no idea about cloud foundry

00:18:43,280 --> 00:18:48,440
or kubernetes right so if you add

00:18:46,550 --> 00:18:52,220
another platform it still works because

00:18:48,440 --> 00:18:54,590
of the service manager just throws an

00:18:52,220 --> 00:18:58,330
API that is well defined but it doesn't

00:18:54,590 --> 00:18:58,330
know what Cloud Foundry a kubernetes is

00:18:59,380 --> 00:19:08,270
and connected to this is that we cannot

00:19:05,270 --> 00:19:10,220
call back into the platform's so when we

00:19:08,270 --> 00:19:11,690
don't know what the what the platform is

00:19:10,220 --> 00:19:15,320
that we are talking about we cannot make

00:19:11,690 --> 00:19:19,640
any calls back into the platform because

00:19:15,320 --> 00:19:21,440
we don't know the API so they are of

00:19:19,640 --> 00:19:24,530
course alternative ways of implementing

00:19:21,440 --> 00:19:26,600
service brokers it's possible to embed

00:19:24,530 --> 00:19:28,820
those into the service manager just

00:19:26,600 --> 00:19:30,890
assume that you move this boxes right

00:19:28,820 --> 00:19:32,360
into the service manager and on the

00:19:30,890 --> 00:19:34,040
cloud control of the Service Catalog

00:19:32,360 --> 00:19:37,730
will directly talk to the service

00:19:34,040 --> 00:19:39,740
manager which means that to register

00:19:37,730 --> 00:19:42,410
broke of all you still need to call this

00:19:39,740 --> 00:19:43,940
API of the platform which in turn means

00:19:42,410 --> 00:19:45,860
that you need the credentials to

00:19:43,940 --> 00:19:47,900
actually do that which also means that

00:19:45,860 --> 00:19:49,940
the service manager then have to have

00:19:47,900 --> 00:19:52,550
all the credentials of all platforms

00:19:49,940 --> 00:19:55,190
that are connected which opens another

00:19:52,550 --> 00:19:56,690
whole problem space that we want don't

00:19:55,190 --> 00:20:01,300
want to go into

00:19:56,690 --> 00:20:01,300
so this solution looked better for us

00:20:03,730 --> 00:20:09,350
the second option is well I explained

00:20:07,610 --> 00:20:11,360
already that we can that the service

00:20:09,350 --> 00:20:13,040
manager itself is a platform so we can

00:20:11,360 --> 00:20:15,980
create instances and service keys right

00:20:13,040 --> 00:20:17,870
in here and theoretically we could the

00:20:15,980 --> 00:20:20,570
service manager then could push the

00:20:17,870 --> 00:20:22,820
credentials into the platforms however

00:20:20,570 --> 00:20:27,260
that looks like the problem with that is

00:20:22,820 --> 00:20:29,000
it's not the same as implicating an

00:20:27,260 --> 00:20:33,830
instance from the platform itself so it

00:20:29,000 --> 00:20:35,870
needs adoption of the well however this

00:20:33,830 --> 00:20:38,330
is transferred to the to the application

00:20:35,870 --> 00:20:43,420
so the application would not find for

00:20:38,330 --> 00:20:45,800
example the credentials in a in

00:20:43,420 --> 00:20:48,050
environment variable anymore right it's

00:20:45,800 --> 00:20:49,700
it would be different right it's not a

00:20:48,050 --> 00:20:53,240
bad thing that it's different but it

00:20:49,700 --> 00:20:57,380
would be different and that would break

00:20:53,240 --> 00:20:58,820
well probably most applications and we

00:20:57,380 --> 00:21:00,620
cannot really afford breaking all

00:20:58,820 --> 00:21:03,890
applications running on ASAP called

00:21:00,620 --> 00:21:05,630
platform so although this this would be

00:21:03,890 --> 00:21:13,520
an alternative it's not an alternative

00:21:05,630 --> 00:21:15,920
files ok plugins I already mentioned

00:21:13,520 --> 00:21:19,040
that quite a lot every cloud setup is

00:21:15,920 --> 00:21:21,800
different so all the policies I talked

00:21:19,040 --> 00:21:26,810
about a really different per clock

00:21:21,800 --> 00:21:28,430
provider so we cannot really put them

00:21:26,810 --> 00:21:29,870
into the open source project as well

00:21:28,430 --> 00:21:32,390
here's a template and you just fill out

00:21:29,870 --> 00:21:34,820
this template it works it's not it's not

00:21:32,390 --> 00:21:38,300
going to work that way so what we have

00:21:34,820 --> 00:21:41,300
is a plugins so plugins are compile-time

00:21:38,300 --> 00:21:43,870
plugins basically you have to provide go

00:21:41,300 --> 00:21:46,880
code and implement a certain interface a

00:21:43,870 --> 00:21:49,280
plug-in is really mighty it can read

00:21:46,880 --> 00:21:51,430
manipulate in vitro service requests and

00:21:49,280 --> 00:21:54,110
responses so every question response

00:21:51,430 --> 00:21:57,110
goes through a plug-in and a plugin can

00:21:54,110 --> 00:21:59,210
look at it it can change and request and

00:21:57,110 --> 00:22:00,710
response before it hands over the

00:21:59,210 --> 00:22:03,020
request of the response to the next

00:22:00,710 --> 00:22:06,530
plug-in in the chain and it can also

00:22:03,020 --> 00:22:08,320
stop the processing entirely so quota

00:22:06,530 --> 00:22:10,190
management is one of the things right so

00:22:08,320 --> 00:22:12,139
one of the plugins

00:22:10,190 --> 00:22:13,789
finds out while you are over quota it

00:22:12,139 --> 00:22:15,549
can stop the request to create a new

00:22:13,789 --> 00:22:20,110
instance and send back an error message

00:22:15,549 --> 00:22:20,110
so plugins are very very powerful

00:22:20,860 --> 00:22:29,179
plugins can also call micro services we

00:22:25,190 --> 00:22:32,960
have this case where we have a compiled

00:22:29,179 --> 00:22:34,940
plugin that just is a thin layer that

00:22:32,960 --> 00:22:39,259
calls a micro server something else this

00:22:34,940 --> 00:22:42,139
gives us different life cycles of the

00:22:39,259 --> 00:22:47,090
service manager and while the logic that

00:22:42,139 --> 00:22:49,009
presents the the policies it can be

00:22:47,090 --> 00:22:51,470
handled by different teams and so on so

00:22:49,009 --> 00:22:53,929
this so we have we have both options you

00:22:51,470 --> 00:22:56,389
can tightly plugged in into the service

00:22:53,929 --> 00:22:57,940
manager itself or I can you can move off

00:22:56,389 --> 00:23:01,190
this code for micro service both have

00:22:57,940 --> 00:23:04,309
advantages and disadvantages but this

00:23:01,190 --> 00:23:07,730
makes plugins very flexible to give you

00:23:04,309 --> 00:23:09,620
an example of the plugin that that we

00:23:07,730 --> 00:23:13,029
are building it s ap some of them are

00:23:09,620 --> 00:23:14,990
already existing some we are working on

00:23:13,029 --> 00:23:17,779
authorization is one of those so if you

00:23:14,990 --> 00:23:20,210
take the the open source implementation

00:23:17,779 --> 00:23:22,669
you will get authentication through

00:23:20,210 --> 00:23:25,460
OAuth that's implemented but it's not

00:23:22,669 --> 00:23:27,980
there if you want authorization you have

00:23:25,460 --> 00:23:30,649
to build your own plugin to find out if

00:23:27,980 --> 00:23:32,990
this person that makes the request is

00:23:30,649 --> 00:23:34,789
actually allowed to do this and this is

00:23:32,990 --> 00:23:37,669
again very specific to the cloud

00:23:34,789 --> 00:23:41,179
foreigner so what we do in the s AP

00:23:37,669 --> 00:23:43,159
domain model and the permissions there

00:23:41,179 --> 00:23:46,250
is probably not transferable to any

00:23:43,159 --> 00:23:50,450
other color vendor so that's that's why

00:23:46,250 --> 00:23:51,889
we're doing this context enrichment

00:23:50,450 --> 00:23:56,840
that's that's actually an interesting

00:23:51,889 --> 00:23:59,659
one when you create a new instance a

00:23:56,840 --> 00:24:02,029
platform sense as part of the request

00:23:59,659 --> 00:24:06,139
the context object and the context

00:24:02,029 --> 00:24:08,960
object for Cloud Foundry looks like this

00:24:06,139 --> 00:24:12,049
so say it's platform Cloud Foundry

00:24:08,960 --> 00:24:13,970
here's your org and just base great for

00:24:12,049 --> 00:24:16,009
kubernetes it looks like this platform

00:24:13,970 --> 00:24:19,369
is kubernetes and you get a class ID in

00:24:16,009 --> 00:24:21,889
a namespace in the end brokers have to

00:24:19,369 --> 00:24:23,570
translate that to a customer

00:24:21,889 --> 00:24:25,580
so now

00:24:23,570 --> 00:24:27,259
if we do it like that then the

00:24:25,580 --> 00:24:29,179
broadcaster check out this is a call

00:24:27,259 --> 00:24:30,769
coming from Cloud Foundry as someone

00:24:29,179 --> 00:24:33,259
have to turn the organization idea into

00:24:30,769 --> 00:24:35,720
a customer idea this is Claude at the

00:24:33,259 --> 00:24:38,690
kubernetes call I have to turn in turn

00:24:35,720 --> 00:24:41,330
the cost idea into a customer ID if we

00:24:38,690 --> 00:24:43,309
add a third a fourth platform then you

00:24:41,330 --> 00:24:46,639
have to add to this to all the brokers

00:24:43,309 --> 00:24:49,249
again to make this transformation so

00:24:46,639 --> 00:24:52,519
what we do instead is we have a plugin

00:24:49,249 --> 00:24:55,159
that enriches this context and then the

00:24:52,519 --> 00:24:57,440
rich context looks like this

00:24:55,159 --> 00:25:00,379
the platform is changed it changed from

00:24:57,440 --> 00:25:03,229
confirming kubernetes to ASAP call

00:25:00,379 --> 00:25:05,570
platform we still have the origin so if

00:25:03,229 --> 00:25:07,299
a broker really wants to know where this

00:25:05,570 --> 00:25:11,029
request is coming from this is not lost

00:25:07,299 --> 00:25:17,269
but we are translating the ork ID and

00:25:11,029 --> 00:25:19,580
the cluster ID to a customer ID at sa B

00:25:17,269 --> 00:25:20,899
so at sa P we have basically two IDs one

00:25:19,580 --> 00:25:22,909
of the global account ID and they were

00:25:20,899 --> 00:25:25,909
the one with the sub-account ID so

00:25:22,909 --> 00:25:27,919
brokers at sa P just have to look at the

00:25:25,909 --> 00:25:31,129
sub-account ID to find out to the

00:25:27,919 --> 00:25:33,049
customer actually s so if yet at some

00:25:31,129 --> 00:25:35,479
point another platform and yet just

00:25:33,049 --> 00:25:37,279
another platform brokers don't have to

00:25:35,479 --> 00:25:39,349
change because they can rely on the fact

00:25:37,279 --> 00:25:45,139
that there is a sub-account ID atic that

00:25:39,349 --> 00:25:49,309
they can use also various ap specific of

00:25:45,139 --> 00:25:50,899
course the broker and service visibility

00:25:49,309 --> 00:25:53,090
and entitlement management already

00:25:50,899 --> 00:25:55,669
talked about so not all brokers should

00:25:53,090 --> 00:25:57,679
be registered at all places not all

00:25:55,669 --> 00:26:02,739
services not all plan should be visible

00:25:57,679 --> 00:26:05,570
to all clusters or organizations if

00:26:02,739 --> 00:26:07,489
customers buy a service then this of

00:26:05,570 --> 00:26:10,460
course has to be propagated down to the

00:26:07,489 --> 00:26:12,139
platforms we want this to happen almost

00:26:10,460 --> 00:26:14,090
in real time right so if you buy

00:26:12,139 --> 00:26:18,349
something you want to use it a second

00:26:14,090 --> 00:26:23,090
later so things like that we implemented

00:26:18,349 --> 00:26:26,389
as a plugin as well platform specific

00:26:23,090 --> 00:26:28,369
brokers so always ap brokers now have to

00:26:26,389 --> 00:26:31,940
provide the information for which

00:26:28,369 --> 00:26:35,299
platform they are built so we can

00:26:31,940 --> 00:26:37,430
actually filled out where we actually

00:26:35,299 --> 00:26:40,280
have to register broker so if

00:26:37,430 --> 00:26:42,710
Branka tells us I only really work with

00:26:40,280 --> 00:26:49,520
kubernetes and it's not registered at a

00:26:42,710 --> 00:26:51,410
Cloud Foundry foundation yep let's leave

00:26:49,520 --> 00:26:53,480
it like that so simple quota check I

00:26:51,410 --> 00:26:58,309
already talked about that so if a

00:26:53,480 --> 00:26:59,990
customer has four instances and while

00:26:58,309 --> 00:27:02,200
you want to create a fifth one while

00:26:59,990 --> 00:27:05,420
this plugin will stop it

00:27:02,200 --> 00:27:08,240
network management this is a topic that

00:27:05,420 --> 00:27:11,000
probably needs another talk or don't

00:27:08,240 --> 00:27:16,460
want to go into details but we have

00:27:11,000 --> 00:27:17,840
services that are not reachable from the

00:27:16,460 --> 00:27:20,660
internet so they are not publicly

00:27:17,840 --> 00:27:23,559
available there at the time of binding

00:27:20,660 --> 00:27:26,690
we have to create a tunnel between the

00:27:23,559 --> 00:27:28,429
application and the service and the

00:27:26,690 --> 00:27:31,070
service manager is actually the guy in

00:27:28,429 --> 00:27:33,260
the middle who knows both ends and well

00:27:31,070 --> 00:27:35,000
with a plug game we can actually create

00:27:33,260 --> 00:27:37,670
this tunnel however that looks like and

00:27:35,000 --> 00:27:40,730
it might be different based on what the

00:27:37,670 --> 00:27:46,550
swirls on what the target is but as I

00:27:40,730 --> 00:27:52,040
said this is this is a new talk and then

00:27:46,550 --> 00:27:53,660
we have the instant sharing part yeah so

00:27:52,040 --> 00:27:54,950
I already talked about this a whole

00:27:53,660 --> 00:27:58,520
problem for the instance chains of the

00:27:54,950 --> 00:28:01,640
policies that we have to implement there

00:27:58,520 --> 00:28:04,720
have to be somehow mapped into code and

00:28:01,640 --> 00:28:12,350
that's what this insertion plugin is for

00:28:04,720 --> 00:28:21,140
so I think I'm out of time the next step

00:28:12,350 --> 00:28:24,440
would be the demo for do that Wow SP

00:28:21,140 --> 00:28:25,910
hires but you probably know that before

00:28:24,440 --> 00:28:27,860
I do a demo are there any quick

00:28:25,910 --> 00:28:32,300
questions or probably we have to leave

00:28:27,860 --> 00:28:37,990
the room anyway so I can do the demo any

00:28:32,300 --> 00:28:37,990
questions there's one

00:28:39,020 --> 00:28:57,810
yeah yeah yeah yes of course

00:28:56,040 --> 00:28:59,760
so actually if you if you look at the

00:28:57,810 --> 00:29:01,770
content enrichment thing this is

00:28:59,760 --> 00:29:05,130
actually pretty thin right so it's just

00:29:01,770 --> 00:29:07,610
add stuff to to an object that flows

00:29:05,130 --> 00:29:10,680
through the service Metro so that's easy

00:29:07,610 --> 00:29:13,650
but other things are yeah needs some

00:29:10,680 --> 00:29:16,530
more needs some more work but it is ap

00:29:13,650 --> 00:29:18,360
we are not forking the project so we had

00:29:16,530 --> 00:29:19,830
we are just building plugins for that so

00:29:18,360 --> 00:29:22,500
we're using actually the code that's on

00:29:19,830 --> 00:29:28,830
github and justin Richard with with a

00:29:22,500 --> 00:29:30,900
plugin that we need but the plug-in

00:29:28,830 --> 00:29:33,170
framework itself is really powerful you

00:29:30,900 --> 00:29:36,120
can you can do a lot of stuff with it

00:29:33,170 --> 00:29:41,640
you can basically manipulate everything

00:29:36,120 --> 00:29:45,000
you like you're implementing an

00:29:41,640 --> 00:29:47,280
interface a go interface and register

00:29:45,000 --> 00:29:50,840
you of your implementation internally

00:29:47,280 --> 00:29:50,840
and then you will get all the traffic

00:29:56,360 --> 00:30:01,650
yes it's it's yeah we was supporting

00:29:59,070 --> 00:30:03,120
both so whatever you like we are

00:30:01,650 --> 00:30:04,800
currently hosting it in Cloud Foundry

00:30:03,120 --> 00:30:07,260
but we'll move it to kubernetes at some

00:30:04,800 --> 00:30:11,100
point that in there and the open source

00:30:07,260 --> 00:30:13,140
project you will see you can find

00:30:11,100 --> 00:30:15,210
manuals how to do this in Queenie's or

00:30:13,140 --> 00:30:21,620
Cloud Foundry so we will make sure that

00:30:15,210 --> 00:30:21,620
it also runs in in kubernetes yep yep

00:30:22,840 --> 00:30:28,530
oh yeah

00:30:38,170 --> 00:30:46,330
at this point yes so we are only doing

00:30:41,500 --> 00:30:49,900
doing this but with generic actions that

00:30:46,330 --> 00:30:52,510
are in the works for some time in the

00:30:49,900 --> 00:30:54,250
open service broker API we will of

00:30:52,510 --> 00:31:00,400
course provide whatever the broker

00:30:54,250 --> 00:31:05,490
provides so yeah we just tunnel it

00:31:00,400 --> 00:31:05,490
through and yeah we can do more

00:31:11,180 --> 00:31:17,100
yeah well then if you if I go back to

00:31:14,640 --> 00:31:19,770
this so this this API here can do a lot

00:31:17,100 --> 00:31:21,960
of things that the broker cannot do

00:31:19,770 --> 00:31:23,910
for example listing all instances or

00:31:21,960 --> 00:31:26,040
something like that these are management

00:31:23,910 --> 00:31:28,050
capabilities that we add that we can do

00:31:26,040 --> 00:31:29,640
through the service Metro if you're

00:31:28,050 --> 00:31:32,010
talking about things like more

00:31:29,640 --> 00:31:34,470
triggering it back up for example that's

00:31:32,010 --> 00:31:36,240
not in the scope of the service manager

00:31:34,470 --> 00:31:39,480
but if the broker would at some point

00:31:36,240 --> 00:31:41,310
provide this as a generic extension then

00:31:39,480 --> 00:31:53,310
it's of course available through the

00:31:41,310 --> 00:31:55,350
service manager itself as well know that

00:31:53,310 --> 00:31:57,690
the basic service manager or not but

00:31:55,350 --> 00:31:59,340
mine can write a plug-in right so you

00:31:57,690 --> 00:32:00,960
see everything that go through the

00:31:59,340 --> 00:32:03,870
service manager right your pork into

00:32:00,960 --> 00:32:05,340
together metrics whatever you need so

00:32:03,870 --> 00:32:07,890
that's that's what the plugins are for

00:32:05,340 --> 00:32:10,770
so it's been matrix is another thing

00:32:07,890 --> 00:32:14,610
that where every company needs something

00:32:10,770 --> 00:32:17,070
different so there's not one one

00:32:14,610 --> 00:32:19,380
implementation that works for all there

00:32:17,070 --> 00:32:20,820
might be at some point an example for

00:32:19,380 --> 00:32:24,210
that how to do this and there that you

00:32:20,820 --> 00:32:27,360
can tweak but yeah we see this as a

00:32:24,210 --> 00:32:30,260
plug-in not at the core functionality of

00:32:27,360 --> 00:32:30,260
the service manager

00:32:39,669 --> 00:32:45,160
not at this point so we will be in the

00:32:43,419 --> 00:32:50,260
process of rolling it out internally

00:32:45,160 --> 00:32:53,559
right now it will be live a q1 next year

00:32:50,260 --> 00:32:57,870
so we are migrating the first data

00:32:53,559 --> 00:32:57,870
centers to use this in January

00:33:09,930 --> 00:33:14,300
can you can you speak up a bit I can

00:33:11,760 --> 00:33:14,300
barely hear you

00:33:27,250 --> 00:33:36,520
so you're talking about with the service

00:33:29,620 --> 00:33:38,380
broken with the service lifts so yeah

00:33:36,520 --> 00:33:40,540
all the services that are available in

00:33:38,380 --> 00:33:42,340
the cloud in California today will then

00:33:40,540 --> 00:33:50,590
be also available in kubernetes through

00:33:42,340 --> 00:33:53,820
this through this mean difference in

00:33:50,590 --> 00:33:57,370
what you mean this this box over here

00:33:53,820 --> 00:33:59,140
yeah so I think we have announced that

00:33:57,370 --> 00:34:01,570
we will have an Abba platform for the

00:33:59,140 --> 00:34:03,429
cloud as well or it's already there this

00:34:01,570 --> 00:34:05,140
will at some point will be also able to

00:34:03,429 --> 00:34:12,850
consume all the services that were

00:34:05,140 --> 00:34:15,639
providing to Cloud Foundry ok I think we

00:34:12,850 --> 00:34:18,040
we are out of time unfortunately no demo

00:34:15,639 --> 00:34:20,350
I can demo in the hallway if you ingest

00:34:18,040 --> 00:34:26,199
it but yeah sorry

00:34:20,350 --> 00:34:26,199

YouTube URL: https://www.youtube.com/watch?v=SGfwVPx-kmE


