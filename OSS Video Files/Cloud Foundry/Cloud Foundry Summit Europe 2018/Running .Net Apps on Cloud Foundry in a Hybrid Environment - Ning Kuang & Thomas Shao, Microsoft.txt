Title: Running .Net Apps on Cloud Foundry in a Hybrid Environment - Ning Kuang & Thomas Shao, Microsoft
Publication date: 2018-10-10
Playlist: Cloud Foundry Summit Europe 2018
Description: 
	Running .Net Apps on Cloud Foundry in a Hybrid Environment - Ning Kuang & Thomas Shao, Microsoft

.Net is getting the first-class seats on Cloud Foundry. In this section, we will walk through how a .net application is built, deployed and managed, in a hybrid environment, with the .net ecosystem on CF. We will deploy an ASP.net web service, utilizing CI/CD tool, Open Service Broker, Monitoring and logging tool, and more. You will experience how .net is seamlessly integrated with the Cloud Foundry dev environment across on-prem and cloud platforms, and understand the newest progress with .Net. support on CF.

https://cfseu18.sched.com/event/FRyd/running-net-apps-on-cloud-foundry-in-a-hybrid-environment-ning-kuang-thomas-shao-microsoft
Captions: 
	00:00:04,640 --> 00:00:09,540
okay

00:00:05,819 --> 00:00:13,230
so let's get started my name is Nina

00:00:09,540 --> 00:00:15,590
Quang I'm the program manager for cloud

00:00:13,230 --> 00:00:18,240
foundry run young agile engineering team

00:00:15,590 --> 00:00:21,180
and my name is Thomas I'm the

00:00:18,240 --> 00:00:24,660
engineering manager from Enterprise open

00:00:21,180 --> 00:00:26,880
source team from Microsoft so today we

00:00:24,660 --> 00:00:29,460
are going to go through the process to

00:00:26,880 --> 00:00:32,809
running applications on the hybrid

00:00:29,460 --> 00:00:38,760
environment with Azure and address stack

00:00:32,809 --> 00:00:41,010
mainly on don''t applications so I'll go

00:00:38,760 --> 00:00:45,980
through the the background and the

00:00:41,010 --> 00:00:45,980
concept and Thomas later will demo the

00:00:47,000 --> 00:00:58,579
integrated CI CD process on Azure and

00:00:50,489 --> 00:01:01,710
address stack okay so ten years ago

00:00:58,579 --> 00:01:06,000
that's when Asher just started being

00:01:01,710 --> 00:01:10,710
build and at that time majority of our

00:01:06,000 --> 00:01:16,409
customers software are running on the

00:01:10,710 --> 00:01:18,000
physical servers it's amazing how the in

00:01:16,409 --> 00:01:21,119
the past ten years the technology

00:01:18,000 --> 00:01:22,950
evolves now a lot of our customer

00:01:21,119 --> 00:01:24,900
already running their application in a

00:01:22,950 --> 00:01:30,020
cloud and they release in the much

00:01:24,900 --> 00:01:34,079
faster rate in days and weeks however

00:01:30,020 --> 00:01:37,409
still the public cloud is not the only

00:01:34,079 --> 00:01:39,869
destination for the cloud and as

00:01:37,409 --> 00:01:42,899
actually as a matter of fact on base our

00:01:39,869 --> 00:01:46,020
survey majority like 90 percent of our

00:01:42,899 --> 00:01:49,979
customer still think they need a hybrid

00:01:46,020 --> 00:01:53,720
cloud as the earth strategy so when I

00:01:49,979 --> 00:01:56,640
look at based on our early customer

00:01:53,720 --> 00:02:00,090
interaction we identify these three

00:01:56,640 --> 00:02:02,250
snails as the basic hybrid scenarios the

00:02:00,090 --> 00:02:05,040
first one is the edge and disconnected

00:02:02,250 --> 00:02:08,190
solution this is when you don't have the

00:02:05,040 --> 00:02:11,190
stable connection to the internet you

00:02:08,190 --> 00:02:13,320
need to run a workload Prem and

00:02:11,190 --> 00:02:14,850
and then prepare the data before you

00:02:13,320 --> 00:02:17,970
connect to the internet

00:02:14,850 --> 00:02:21,300
the second is cloud application to meet

00:02:17,970 --> 00:02:25,380
various regulation this is when you need

00:02:21,300 --> 00:02:29,460
an application that runs across the

00:02:25,380 --> 00:02:32,330
globe and interval regions while some

00:02:29,460 --> 00:02:35,310
regions due to the data sovereignty

00:02:32,330 --> 00:02:37,680
requirement regulations cannot run in

00:02:35,310 --> 00:02:41,310
public they have to run on Prem

00:02:37,680 --> 00:02:44,670
the third is the cloud application model

00:02:41,310 --> 00:02:47,190
and program promise this is for actually

00:02:44,670 --> 00:02:49,830
quite typical a lot of customer who want

00:02:47,190 --> 00:02:52,650
the modernization of the applications

00:02:49,830 --> 00:02:55,440
they take care take advantage of micro

00:02:52,650 --> 00:02:58,440
service framework containers however

00:02:55,440 --> 00:03:02,550
they want to stay on premise and so you

00:02:58,440 --> 00:03:07,710
need a private data centers deal so to

00:03:02,550 --> 00:03:10,050
solve the solve the hybrid solution

00:03:07,710 --> 00:03:11,760
there are different ways and a very

00:03:10,050 --> 00:03:14,190
typical way is customer have their

00:03:11,760 --> 00:03:17,070
private data center and then they choose

00:03:14,190 --> 00:03:19,310
one of the public cloud and then they

00:03:17,070 --> 00:03:24,000
need to ramp up and manage two clouds

00:03:19,310 --> 00:03:28,140
for Microsoft when either stack is

00:03:24,000 --> 00:03:31,459
designed what we want to approach this

00:03:28,140 --> 00:03:34,320
is we want to create a consistent cloud

00:03:31,459 --> 00:03:38,209
basically we want to duplicate the

00:03:34,320 --> 00:03:42,360
majority of the azure cloud services

00:03:38,209 --> 00:03:45,540
on-premise so basically as a stack is an

00:03:42,360 --> 00:03:48,090
extension of azure or a duplication of

00:03:45,540 --> 00:03:51,390
Asia and just in the private could have

00:03:48,090 --> 00:03:55,320
center and then the the basic principles

00:03:51,390 --> 00:03:58,650
is consistency so the goal is the

00:03:55,320 --> 00:04:02,100
developers and the operators they are

00:03:58,650 --> 00:04:04,739
experience will be the same and majority

00:04:02,100 --> 00:04:07,500
of the services for example sequel

00:04:04,739 --> 00:04:10,680
services blob storage services monitored

00:04:07,500 --> 00:04:14,160
services will be based on Azure and

00:04:10,680 --> 00:04:16,109
on-premise and the third they can be

00:04:14,160 --> 00:04:18,090
worked together you can run your

00:04:16,109 --> 00:04:20,720
application on one cloud and still

00:04:18,090 --> 00:04:24,330
access the resources on the other cloud

00:04:20,720 --> 00:04:27,460
use proper connectivities

00:04:24,330 --> 00:04:33,520
have how many people have been heard of

00:04:27,460 --> 00:04:36,340
agile stack cool so majority of you as

00:04:33,520 --> 00:04:38,710
your stack is already g8 and the pivot

00:04:36,340 --> 00:04:41,710
or Cloud Foundry cross-boundary running

00:04:38,710 --> 00:04:45,610
on GA is also g8 and pivot or Cloud

00:04:41,710 --> 00:04:48,520
Foundry is agile stack is g8 five months

00:04:45,610 --> 00:04:52,330
ago it may so you are welcome to try

00:04:48,520 --> 00:04:55,840
that especially with the the Hybris

00:04:52,330 --> 00:04:58,569
narrow combined with Cloud Foundry

00:04:55,840 --> 00:05:00,729
running on Azure and the azure stack you

00:04:58,569 --> 00:05:03,430
have a consistent path system which is

00:05:00,729 --> 00:05:07,110
the CRO foundry the multi cloud solution

00:05:03,430 --> 00:05:09,370
running on a consistent hybrid cloud

00:05:07,110 --> 00:05:11,259
basically if you want to run claw

00:05:09,370 --> 00:05:14,620
foundry you need to utilize the cloud

00:05:11,259 --> 00:05:17,530
providers to to to deploy the deployed

00:05:14,620 --> 00:05:20,190
wabash and country you can use the same

00:05:17,530 --> 00:05:23,949
tool we have at your resources manager

00:05:20,190 --> 00:05:27,190
also called arm and the scripting the

00:05:23,949 --> 00:05:32,169
SDK and the scripting to utilize the

00:05:27,190 --> 00:05:35,830
resources and for dev of tools we have

00:05:32,169 --> 00:05:38,020
agile pipeline which you must hear the

00:05:35,830 --> 00:05:41,319
visual studio team service is it's just

00:05:38,020 --> 00:05:44,229
renamed the azure devops services and

00:05:41,319 --> 00:05:46,960
Azure pipeline is one part of it which

00:05:44,229 --> 00:05:49,659
is originally the VST s build and

00:05:46,960 --> 00:05:52,389
release service and you can also use

00:05:49,659 --> 00:05:59,229
open service CI CD tools like concourse

00:05:52,389 --> 00:06:02,529
Jenkins to take a closer look here is a

00:05:59,229 --> 00:06:04,599
diagram outline the interface between

00:06:02,529 --> 00:06:07,449
the con funghi and the underlying cloud

00:06:04,599 --> 00:06:10,229
providers and a star with Bosch which

00:06:07,449 --> 00:06:13,840
will create the infrastructure and

00:06:10,229 --> 00:06:16,090
usually you need to use Azure you use

00:06:13,840 --> 00:06:18,669
tera foam or use the UM template to

00:06:16,090 --> 00:06:20,919
build to create Bosh and here you use

00:06:18,669 --> 00:06:24,039
exactly the same form to view that on

00:06:20,919 --> 00:06:27,310
Azure stack and then Barcia talked

00:06:24,039 --> 00:06:32,020
through a show CPI and the CPI talked to

00:06:27,310 --> 00:06:37,580
the on API and and with the underlying

00:06:32,020 --> 00:06:39,980
cloud providers for with the same CPI

00:06:37,580 --> 00:06:43,130
you can talk to both Asia and agile

00:06:39,980 --> 00:06:46,550
stack and also with agile stack II have

00:06:43,130 --> 00:06:50,330
the similar concept of HEA you use

00:06:46,550 --> 00:06:51,980
availability set you can skill are using

00:06:50,330 --> 00:06:53,840
the local services on the edge of stack

00:06:51,980 --> 00:06:56,960
for example you can use Azure stack

00:06:53,840 --> 00:06:59,510
block storage to replace the CC plop

00:06:56,960 --> 00:07:05,600
store and you can use the the my sequel

00:06:59,510 --> 00:07:08,210
service for for the the ccdb to the

00:07:05,600 --> 00:07:11,480
authentication is a little bit tricky if

00:07:08,210 --> 00:07:15,340
you want to use just the private cloud

00:07:11,480 --> 00:07:18,410
you can use the a treaty virtual

00:07:15,340 --> 00:07:20,990
Federation service ad FS this is

00:07:18,410 --> 00:07:25,370
supported on Azure stack with Ralph on

00:07:20,990 --> 00:07:28,460
g2 if you want to integrate it you want

00:07:25,370 --> 00:07:31,520
to access Asia while your on-prem is as

00:07:28,460 --> 00:07:34,310
your stack you can use a ad which is the

00:07:31,520 --> 00:07:36,710
azure active directory service both are

00:07:34,310 --> 00:07:41,210
supported with the cloud foundry and

00:07:36,710 --> 00:07:44,480
pivotal foundry so this is the operators

00:07:41,210 --> 00:07:47,690
experience basically the same as Asia on

00:07:44,480 --> 00:07:50,420
with developers usually developer only

00:07:47,690 --> 00:07:52,370
use the CFC oh I interface with Cal

00:07:50,420 --> 00:07:55,280
foundry with their applications however

00:07:52,370 --> 00:07:58,970
if you want to access the services on

00:07:55,280 --> 00:08:03,590
the cloud provider for example the data

00:07:58,970 --> 00:08:06,530
services or shares you need to write

00:08:03,590 --> 00:08:09,200
code to be consistent with that cloud

00:08:06,530 --> 00:08:11,570
provider and here between Asia and

00:08:09,200 --> 00:08:13,070
Asia's back you can use the same cloud

00:08:11,570 --> 00:08:16,310
foundry tools for example you can use

00:08:13,070 --> 00:08:19,910
open source for open service broker for

00:08:16,310 --> 00:08:22,730
Asia we call ospa that works across

00:08:19,910 --> 00:08:26,590
country kubernetes and open ship that

00:08:22,730 --> 00:08:30,230
means you can use that for pas and PKS

00:08:26,590 --> 00:08:32,990
and then the service will connect to

00:08:30,230 --> 00:08:36,920
services and Azure you can do that from

00:08:32,990 --> 00:08:39,500
Azure stack or you can utilize the ospa

00:08:36,920 --> 00:08:42,830
to connect your service as your stack -

00:08:39,500 --> 00:08:45,290
so both are ok and then you don't need

00:08:42,830 --> 00:08:48,350
to change your code if you want to

00:08:45,290 --> 00:08:50,990
connect to a file share or the file

00:08:48,350 --> 00:08:51,470
services you can use the SMP Walland

00:08:50,990 --> 00:08:53,870
service

00:08:51,470 --> 00:08:59,780
and this also work across between Asia

00:08:53,870 --> 00:09:03,650
and Asia stack so before we go through

00:08:59,780 --> 00:09:05,780
the demo there are two scenarios that

00:09:03,650 --> 00:09:08,450
it's the implementation of the user

00:09:05,780 --> 00:09:11,270
cases we just mentioned one is the

00:09:08,450 --> 00:09:15,260
hybrid CI CDs narrow this is what Thomas

00:09:11,270 --> 00:09:18,110
will demo and the goal is I'll have one

00:09:15,260 --> 00:09:20,840
pipeline and one single source code and

00:09:18,110 --> 00:09:24,770
then you can run this application on

00:09:20,840 --> 00:09:27,560
Asia and Azure stack so you can first

00:09:24,770 --> 00:09:31,130
two tests on on-premise and then push to

00:09:27,560 --> 00:09:33,470
the to the public cloud or you can

00:09:31,130 --> 00:09:38,320
choose on public cloud first and test

00:09:33,470 --> 00:09:44,000
that and then push to the the on-premise

00:09:38,320 --> 00:09:46,850
for both those is supported the second

00:09:44,000 --> 00:09:50,570
scenario is also common actually today

00:09:46,850 --> 00:09:52,700
some of our PCF agile customer is

00:09:50,570 --> 00:09:55,670
already implemented is the geo

00:09:52,700 --> 00:10:02,570
distribute is narrow where you can use a

00:09:55,670 --> 00:10:04,460
a global traffic manager that well

00:10:02,570 --> 00:10:07,850
routed to your application to different

00:10:04,460 --> 00:10:10,070
locations so before you can route that

00:10:07,850 --> 00:10:13,850
to different regions in a public cloud

00:10:10,070 --> 00:10:17,630
now always agile stack support you can

00:10:13,850 --> 00:10:21,140
rotate you either on-premise platform or

00:10:17,630 --> 00:10:23,210
the public cloud and then for the

00:10:21,140 --> 00:10:25,040
developers things you use the same

00:10:23,210 --> 00:10:28,000
application you don't need to change the

00:10:25,040 --> 00:10:35,300
code when you push to on-prem and the

00:10:28,000 --> 00:10:39,410
public cloud on this hybrid solution

00:10:35,300 --> 00:10:42,380
works across the different languages

00:10:39,410 --> 00:10:45,050
total language independent but we do

00:10:42,380 --> 00:10:49,520
want to use Donna to showcase this

00:10:45,050 --> 00:10:51,740
process for two reasons the first donut

00:10:49,520 --> 00:10:54,410
have a great ecosystem working with

00:10:51,740 --> 00:10:57,020
Azure and now is the agile stack support

00:10:54,410 --> 00:11:00,890
you use the same you can use the same

00:10:57,020 --> 00:11:04,460
done at SDK for your program working

00:11:00,890 --> 00:11:08,600
across as your SDK and

00:11:04,460 --> 00:11:10,220
the second thanks to the the partnership

00:11:08,600 --> 00:11:14,420
between the community pivot-hole

00:11:10,220 --> 00:11:16,250
and the Microsoft don''t is now getting

00:11:14,420 --> 00:11:18,140
the first-class seat on Cloud Foundry

00:11:16,250 --> 00:11:21,980
and with a lot of a great feature

00:11:18,140 --> 00:11:24,740
released so as a background there are

00:11:21,980 --> 00:11:27,200
two implementations of done it the first

00:11:24,740 --> 00:11:30,530
way is Donna core this is the

00:11:27,200 --> 00:11:35,300
open-source club cross platform that

00:11:30,530 --> 00:11:37,760
works on Linux Windows and Mac for peace

00:11:35,300 --> 00:11:41,120
for con funghi it runs on the Linux

00:11:37,760 --> 00:11:44,690
stack so the underlying it used core

00:11:41,120 --> 00:11:47,240
dynacord pack and utilize the same

00:11:44,690 --> 00:11:50,060
runtime with other Linux based

00:11:47,240 --> 00:11:51,770
applications like Java and go so

00:11:50,060 --> 00:11:53,930
basically the experience are the same

00:11:51,770 --> 00:11:56,810
Donna core is the same experience with

00:11:53,930 --> 00:12:00,980
other languages the second one is the

00:11:56,810 --> 00:12:03,860
legacy Burnett framework that is more

00:12:00,980 --> 00:12:06,140
matured and if you have existing apps

00:12:03,860 --> 00:12:10,820
you can continue to use that it's

00:12:06,140 --> 00:12:13,280
continued to be supported and updated it

00:12:10,820 --> 00:12:15,650
does require Windows stack so it

00:12:13,280 --> 00:12:20,210
required addition work for example Bosh

00:12:15,650 --> 00:12:23,510
is updated to be able to deploy Windows

00:12:20,210 --> 00:12:25,850
as themself or cloud foundry and then

00:12:23,510 --> 00:12:28,370
for the co-founder runtime is also

00:12:25,850 --> 00:12:30,770
extended to be able to create a Windows

00:12:28,370 --> 00:12:34,570
container on the windows themselves and

00:12:30,770 --> 00:12:37,670
hosted on a framework applications

00:12:34,570 --> 00:12:40,130
besides additional donor and windows

00:12:37,670 --> 00:12:43,550
specific features is also supported so

00:12:40,130 --> 00:12:46,190
the Donna framework developers will feel

00:12:43,550 --> 00:12:50,990
at home for example something you get

00:12:46,190 --> 00:12:58,010
familiar with the user based registry or

00:12:50,990 --> 00:13:01,400
SDP to your container and and also the

00:12:58,010 --> 00:13:04,630
event a Maalox is forward to to syslog

00:13:01,400 --> 00:13:07,310
so you can use those familiar same

00:13:04,630 --> 00:13:13,700
features on that on the Donna

00:13:07,310 --> 00:13:15,950
application running on Chrome 4G despite

00:13:13,700 --> 00:13:17,570
the underlying differences is really a

00:13:15,950 --> 00:13:18,700
lot of hard work to make the windows

00:13:17,570 --> 00:13:21,830
contain a word

00:13:18,700 --> 00:13:24,530
what is presented to the developers are

00:13:21,830 --> 00:13:27,700
the consistent experience so you can see

00:13:24,530 --> 00:13:30,890
here this lists the majority of the

00:13:27,700 --> 00:13:33,740
experience for the developers the

00:13:30,890 --> 00:13:36,320
logging a lot you can through you can

00:13:33,740 --> 00:13:38,990
still leverage log regulator and you can

00:13:36,320 --> 00:13:42,560
still use an insulator segment for the

00:13:38,990 --> 00:13:44,600
security and you can still SSH to the

00:13:42,560 --> 00:13:50,330
container whether it's the Linux or

00:13:44,600 --> 00:13:52,610
Windows container and both can utilize

00:13:50,330 --> 00:13:56,360
open service broker and SME want answer

00:13:52,610 --> 00:13:59,840
vez to access the services and the file

00:13:56,360 --> 00:14:01,700
and a storage and you can all and the

00:13:59,840 --> 00:14:03,980
same with a steel toe for a micro

00:14:01,700 --> 00:14:07,820
service framework and support both the

00:14:03,980 --> 00:14:12,940
net and donek framework so it's it's a

00:14:07,820 --> 00:14:12,940
great platform for Donette developers

00:14:13,270 --> 00:14:20,270
before you write the implement the

00:14:17,720 --> 00:14:23,510
hybrid application there several area

00:14:20,270 --> 00:14:25,970
you need to consider the first is the

00:14:23,510 --> 00:14:28,040
platform capability so what's your

00:14:25,970 --> 00:14:31,220
requirement for the latency and the

00:14:28,040 --> 00:14:33,740
scalability the second is a placement

00:14:31,220 --> 00:14:36,110
limitation are they some application is

00:14:33,740 --> 00:14:40,250
required for a certain stay on the

00:14:36,110 --> 00:14:42,320
certain region some are very flexible

00:14:40,250 --> 00:14:45,410
they can be both on public or private

00:14:42,320 --> 00:14:48,380
private cloud so you need to arrange

00:14:45,410 --> 00:14:52,040
that and the third is data storage and

00:14:48,380 --> 00:14:56,150
processing we should use star data can

00:14:52,040 --> 00:15:00,950
you you want to ideally you can store

00:14:56,150 --> 00:15:05,510
the data in the public cloud service the

00:15:00,950 --> 00:15:09,080
database but and it's also supported

00:15:05,510 --> 00:15:13,040
just on the private cloud the service

00:15:09,080 --> 00:15:15,730
access and also a sure have most of the

00:15:13,040 --> 00:15:18,920
services already released and matured so

00:15:15,730 --> 00:15:22,000
its usual a common practice if you need

00:15:18,920 --> 00:15:25,670
some complicated advanced services like

00:15:22,000 --> 00:15:27,740
artificial intelligence IOT you need to

00:15:25,670 --> 00:15:31,610
connect to a sure and then for some

00:15:27,740 --> 00:15:33,290
services you can also stay on on prep

00:15:31,610 --> 00:15:36,080
you also need to create a separate

00:15:33,290 --> 00:15:39,230
authentication and security policy on

00:15:36,080 --> 00:15:41,960
different location and it's also ideal

00:15:39,230 --> 00:15:44,810
you have one monitoring place so you can

00:15:41,960 --> 00:15:47,600
have one place monitor both areas and

00:15:44,810 --> 00:15:54,440
then add monitoring or just get paid has

00:15:47,600 --> 00:15:57,470
supported on the other stack to to write

00:15:54,440 --> 00:15:59,930
us to start with we have some several

00:15:57,470 --> 00:16:02,440
steps to write the hybrid application

00:15:59,930 --> 00:16:04,880
I'm booting Asha and address stack

00:16:02,440 --> 00:16:07,970
basically you can just maintain a single

00:16:04,880 --> 00:16:10,400
source code but you can you need to

00:16:07,970 --> 00:16:13,430
create a separate authentication and you

00:16:10,400 --> 00:16:15,830
have you need to create a choose access

00:16:13,430 --> 00:16:18,920
account in Azure is called a service

00:16:15,830 --> 00:16:20,420
principle you have the same server the

00:16:18,920 --> 00:16:23,360
same concept between Asia and Azure

00:16:20,420 --> 00:16:26,630
stack and you can assign the role based

00:16:23,360 --> 00:16:29,480
access control on the service principle

00:16:26,630 --> 00:16:32,540
and you will use that you to run your

00:16:29,480 --> 00:16:35,000
application and if you need to access

00:16:32,540 --> 00:16:38,240
local cloud resources for example you

00:16:35,000 --> 00:16:40,940
create a storage you are utilize the SDK

00:16:38,240 --> 00:16:44,360
the SDK is also shared between Asia and

00:16:40,940 --> 00:16:49,880
Azure stack the only thing you need to

00:16:44,360 --> 00:16:52,360
remember is the the the version is

00:16:49,880 --> 00:16:56,390
different and the endpoint is different

00:16:52,360 --> 00:16:59,780
so we will leverage the profile which

00:16:56,390 --> 00:17:02,690
I'll mention and you can use ospa and s

00:16:59,780 --> 00:17:07,160
if you wanna service for access the

00:17:02,690 --> 00:17:08,900
service and storage too and one of the

00:17:07,160 --> 00:17:11,650
important thing here is you need to

00:17:08,900 --> 00:17:15,380
dynamically I determine the platform and

00:17:11,650 --> 00:17:18,470
and and then you load the the profile so

00:17:15,380 --> 00:17:23,390
the actual API profile is a isn't an

00:17:18,470 --> 00:17:27,110
easy way to help you to load the correct

00:17:23,390 --> 00:17:29,870
API version for your hybrid application

00:17:27,110 --> 00:17:32,870
so some profile is the hybrid profile

00:17:29,870 --> 00:17:34,580
with hybrid profile you specify what

00:17:32,870 --> 00:17:36,710
version you want to use it will

00:17:34,580 --> 00:17:39,110
automatically load the compatible

00:17:36,710 --> 00:17:41,650
version between agile and Azure stack so

00:17:39,110 --> 00:17:44,750
you don't have to figure out the

00:17:41,650 --> 00:17:45,440
comparability between and Azure as you

00:17:44,750 --> 00:17:51,980
and adjust

00:17:45,440 --> 00:17:56,060
AP is once you have that application

00:17:51,980 --> 00:18:00,350
ready you can develop a CSE D pipeline

00:17:56,060 --> 00:18:04,820
on is the actual pipeline as example

00:18:00,350 --> 00:18:08,150
here which if you want to utilize as

00:18:04,820 --> 00:18:10,310
your pipeline you just need to build a

00:18:08,150 --> 00:18:12,860
creator Butte at a release definition

00:18:10,310 --> 00:18:18,460
and what kind of Butte I release you

00:18:12,860 --> 00:18:22,190
want and then to run the task we wield a

00:18:18,460 --> 00:18:26,080
building block called agent which is the

00:18:22,190 --> 00:18:30,530
instance the same as Bosch agent is a

00:18:26,080 --> 00:18:33,800
software that will execute the jobs for

00:18:30,530 --> 00:18:37,130
the Butte and release and there is a

00:18:33,800 --> 00:18:40,790
separate agent for agile and arrow stack

00:18:37,130 --> 00:18:43,580
and forager you can utilize the hosted

00:18:40,790 --> 00:18:47,180
agent which is managed agent automatic

00:18:43,580 --> 00:18:49,400
skill and and update that one's on the

00:18:47,180 --> 00:18:52,070
agile and Azure stack you can have a

00:18:49,400 --> 00:18:54,830
private agent runs on agile stack and

00:18:52,070 --> 00:18:57,440
then with the different agent they will

00:18:54,830 --> 00:19:01,940
execute the same pipeline on the agile

00:18:57,440 --> 00:19:06,560
and address stack platform so that is

00:19:01,940 --> 00:19:08,510
the simple process for having a hybrid

00:19:06,560 --> 00:19:11,810
application building between Angela and

00:19:08,510 --> 00:19:14,150
Hodgins deck now on I will give the

00:19:11,810 --> 00:19:17,990
control to Thomas and they just build

00:19:14,150 --> 00:19:20,030
the donut application running on the

00:19:17,990 --> 00:19:28,670
hybrids narrow with Azure and Azure

00:19:20,030 --> 00:19:31,400
stack ok thanks me so you are like Nick

00:19:28,670 --> 00:19:35,030
mentioned the hybrid hybrid cloud

00:19:31,400 --> 00:19:37,730
scenario is very important yeah and you

00:19:35,030 --> 00:19:40,070
know and it could be used in different

00:19:37,730 --> 00:19:42,920
scenario for example you have workload

00:19:40,070 --> 00:19:47,030
that you might only want putting on prim

00:19:42,920 --> 00:19:50,300
and also some workload you want a flow

00:19:47,030 --> 00:19:53,630
to public cloud and also you may want to

00:19:50,300 --> 00:19:57,230
use public cloud as a back backup site

00:19:53,630 --> 00:19:59,480
for your company business or you want

00:19:57,230 --> 00:20:03,230
birth your book load to the public cloud

00:19:59,480 --> 00:20:06,020
in some ha season so yeah I mean in

00:20:03,230 --> 00:20:10,180
different scenario you might company

00:20:06,020 --> 00:20:13,940
well consider hybrid cloud okay so for

00:20:10,180 --> 00:20:18,230
for this demo I will use public ledger

00:20:13,940 --> 00:20:20,690
and Azure stack as the hybrid cloud for

00:20:18,230 --> 00:20:23,420
sure you don't need have to use Azure

00:20:20,690 --> 00:20:26,810
stack and public actually can also use

00:20:23,420 --> 00:20:28,610
some other on-premise scenario as well

00:20:26,810 --> 00:20:30,700
as other public house in arrow for

00:20:28,610 --> 00:20:36,350
example VMware of on-premise and also

00:20:30,700 --> 00:20:41,210
GCB for public color okay so here is the

00:20:36,350 --> 00:20:46,760
here first I want introduced context for

00:20:41,210 --> 00:20:49,670
this demo so this is CI CD pipeline for

00:20:46,760 --> 00:20:53,780
a tonic or application so this tonic or

00:20:49,670 --> 00:20:56,510
application is called shop so each

00:20:53,780 --> 00:20:59,660
office actress a very famous donate

00:20:56,510 --> 00:21:07,420
sample application divided by Microsoft

00:20:59,660 --> 00:21:10,220
and I will use the concourse part line

00:21:07,420 --> 00:21:14,750
so here the concourse pipeline is built

00:21:10,220 --> 00:21:18,530
on top of co-founder II and I have built

00:21:14,750 --> 00:21:22,010
to cross on the deployment one is public

00:21:18,530 --> 00:21:24,740
a sure and one is an address stack so I

00:21:22,010 --> 00:21:28,640
just for one for public outing one for

00:21:24,740 --> 00:21:30,410
on premise and for this con cause it

00:21:28,640 --> 00:21:33,980
will and will includes the following

00:21:30,410 --> 00:21:39,020
jobs so first it will run some unicast

00:21:33,980 --> 00:21:42,700
for the code and after the unit unit has

00:21:39,020 --> 00:21:46,190
passed it well deploy the application

00:21:42,700 --> 00:21:50,500
both public health and also as a stack

00:21:46,190 --> 00:21:52,670
and finally to trigger the load test for

00:21:50,500 --> 00:21:56,210
for the other application different

00:21:52,670 --> 00:21:59,210
platform okay so here this job is for a

00:21:56,210 --> 00:22:03,830
low caste publication in this is for

00:21:59,210 --> 00:22:07,100
edges deck once always done that means

00:22:03,830 --> 00:22:10,940
you're coding ready again this job is to

00:22:07,100 --> 00:22:14,720
promote a new version to public a sure

00:22:10,940 --> 00:22:16,520
and for sure you have also another job

00:22:14,720 --> 00:22:19,280
to promote your code

00:22:16,520 --> 00:22:30,280
I mean promote your release as your

00:22:19,280 --> 00:22:35,690
stack okay so here I just a trigger a

00:22:30,280 --> 00:22:40,370
new pipeline a new job so because if it

00:22:35,690 --> 00:22:43,730
takes on time I will introduce to Azure

00:22:40,370 --> 00:22:45,380
stack and also public a sure so in case

00:22:43,730 --> 00:22:47,420
someone mine not familiar with a

00:22:45,380 --> 00:22:50,540
haystack so as your stack actually is

00:22:47,420 --> 00:22:52,730
the Microsoft on-premise solution so it

00:22:50,540 --> 00:22:54,980
provide consistent in a similar

00:22:52,730 --> 00:22:57,080
management experience like publication

00:22:54,980 --> 00:23:04,070
so you can see this is the edges that

00:22:57,080 --> 00:23:07,060
bottle so the URI actually is decided

00:23:04,070 --> 00:23:09,170
when you install deploy your ISO stack

00:23:07,060 --> 00:23:12,200
okay you can see the photo is very

00:23:09,170 --> 00:23:14,750
similar to the publication and the only

00:23:12,200 --> 00:23:19,820
difference is because as a stack is just

00:23:14,750 --> 00:23:21,710
G a so it will has fewer services so

00:23:19,820 --> 00:23:24,500
some some services might not be

00:23:21,710 --> 00:23:28,130
available on your stack yet but in

00:23:24,500 --> 00:23:30,230
moving forward Microsoft will add more

00:23:28,130 --> 00:23:35,110
and more services enable more and more

00:23:30,230 --> 00:23:38,630
services to edge your stack okay so here

00:23:35,110 --> 00:23:40,730
this is the coventry deployment a very

00:23:38,630 --> 00:23:43,880
typical clock on the department it

00:23:40,730 --> 00:23:48,470
consists in different computer resources

00:23:43,880 --> 00:23:51,740
including vm to network and also the

00:23:48,470 --> 00:23:54,320
storage here I use menu stay man I use

00:23:51,740 --> 00:24:01,250
manage disk for public culture and also

00:23:54,320 --> 00:24:03,950
standard disk for for Azure stack ok so

00:24:01,250 --> 00:24:08,840
this is the publication portal so you

00:24:03,950 --> 00:24:10,910
can see give resources the man is

00:24:08,840 --> 00:24:14,320
killing the man my experience is very

00:24:10,910 --> 00:24:17,180
similar and also

00:24:14,320 --> 00:24:19,970
this application the Dinoco application

00:24:17,180 --> 00:24:23,630
is using the we called ospa open service

00:24:19,970 --> 00:24:27,290
poker API open service poker for both

00:24:23,630 --> 00:24:38,480
Azure and Azure stack to create a secure

00:24:27,290 --> 00:24:41,330
database let us chapter the job you can

00:24:38,480 --> 00:24:45,140
see now it's actually deploy this

00:24:41,330 --> 00:24:49,370
application to both Azure stack and

00:24:45,140 --> 00:24:53,180
Azure so because it's using tonic also

00:24:49,370 --> 00:24:56,650
it it needs to installing all the

00:24:53,180 --> 00:24:56,650
dependencies it takes some time

00:25:04,360 --> 00:25:10,149
okay this is the CF kamala that

00:25:07,330 --> 00:25:12,850
typically an IKEA operator will use it

00:25:10,149 --> 00:25:16,090
you manage cloud foundry cluster so

00:25:12,850 --> 00:25:18,429
actually you can use CF command line to

00:25:16,090 --> 00:25:23,320
manage both a cross-country cluster on

00:25:18,429 --> 00:25:26,140
Azure stack and Azure and I have already

00:25:23,320 --> 00:25:37,510
enabled the service poker on post

00:25:26,140 --> 00:25:41,470
platform so you can see we have already

00:25:37,510 --> 00:25:45,850
enabled the cosmos to be my sequel the

00:25:41,470 --> 00:25:49,590
post-classical these services composure

00:25:45,850 --> 00:25:49,590
and edges that so

00:25:55,670 --> 00:26:05,870
okay so seems the deployment on as your

00:25:59,760 --> 00:26:09,360
public address already gone you can see

00:26:05,870 --> 00:26:14,450
so now you can actually you can use this

00:26:09,360 --> 00:26:14,450
you read to access this application

00:26:25,700 --> 00:26:30,020
yeah it's already deployed on measures

00:26:28,010 --> 00:26:37,310
that on public a sure

00:26:30,020 --> 00:26:37,850
and once its guests on Azure stack as

00:26:37,310 --> 00:26:42,710
well

00:26:37,850 --> 00:26:51,410
our promote this version the new version

00:26:42,710 --> 00:26:55,970
a measure the low test result is also

00:26:51,410 --> 00:26:59,860
done and now I can promote the new

00:26:55,970 --> 00:26:59,860
version to publication

00:27:16,270 --> 00:27:18,990
okay

00:27:33,000 --> 00:27:39,270
yes you can see this application is

00:27:35,780 --> 00:27:45,080
already successfully deployed and we

00:27:39,270 --> 00:27:48,299
also use Traffic Manager so in front of

00:27:45,080 --> 00:27:53,700
Asia and as you stack it well do

00:27:48,299 --> 00:27:57,659
automatic load balancing for my camel is

00:27:53,700 --> 00:27:59,970
configured using IP so if the IP IP

00:27:57,659 --> 00:28:02,510
ranging a certain in a certain range

00:27:59,970 --> 00:28:05,490
then it will route to your address tag

00:28:02,510 --> 00:28:09,330
environment deployment and if we're up

00:28:05,490 --> 00:28:12,630
to the my conversion is if it's fitting

00:28:09,330 --> 00:28:13,950
to the Europe Europe region can it wear

00:28:12,630 --> 00:28:18,110
out to the public

00:28:13,950 --> 00:28:22,169
Asia so okay that's a very typical

00:28:18,110 --> 00:28:25,830
scenario for first for burst workload

00:28:22,169 --> 00:28:28,020
scenario for example so your company is

00:28:25,830 --> 00:28:31,650
using on-premise for example as your

00:28:28,020 --> 00:28:37,110
stack to host application and in some

00:28:31,650 --> 00:28:41,429
season you want burst your workload to

00:28:37,110 --> 00:28:43,650
to public cloud and you can use this

00:28:41,429 --> 00:28:47,690
just white you can also push your

00:28:43,650 --> 00:28:53,429
application in in public a sure for some

00:28:47,690 --> 00:28:58,950
for some partitions okay I think the

00:28:53,429 --> 00:29:01,700
pipeline should be already done yeah you

00:28:58,950 --> 00:29:05,580
can see the job is successfully done and

00:29:01,700 --> 00:29:09,679
finally I can also promote new version

00:29:05,580 --> 00:29:13,049
on Azure stack as well by doing this now

00:29:09,679 --> 00:29:15,679
in both platform we will have the latest

00:29:13,049 --> 00:29:15,679
version

00:29:21,510 --> 00:29:26,890
okay so here's the details for this job

00:29:24,460 --> 00:29:30,910
you can see actually it is using the C

00:29:26,890 --> 00:29:33,220
of command key logging and first pour

00:29:30,910 --> 00:29:39,520
the latest release and then push it to

00:29:33,220 --> 00:29:43,240
Azure stack environment and finally it

00:29:39,520 --> 00:29:46,500
will configure the router to use your

00:29:43,240 --> 00:29:46,500
didn't use the latest

00:29:59,940 --> 00:30:02,690
okay

00:30:17,210 --> 00:30:23,950
actually they are they are the same

00:30:19,430 --> 00:30:32,390
application just on different platform

00:30:23,950 --> 00:30:34,640
yeah that's all the demo the process is

00:30:32,390 --> 00:30:37,370
also available on github so you want to

00:30:34,640 --> 00:30:39,200
try the CI CD process on agile and agile

00:30:37,370 --> 00:30:41,780
stack and the traffic manager

00:30:39,200 --> 00:30:45,170
configuration you can follow our

00:30:41,780 --> 00:30:49,160
instruction on github - yeah

00:30:45,170 --> 00:30:50,450
so they're here github your co-founder

00:30:49,160 --> 00:30:52,940
young adder is to organize the

00:30:50,450 --> 00:30:56,120
organization name so the source code of

00:30:52,940 --> 00:30:59,090
the application is here and also we have

00:30:56,120 --> 00:31:08,060
open source poker API and which is also

00:30:59,090 --> 00:31:11,180
on our Microsoft kiha okay yeah so

00:31:08,060 --> 00:31:12,240
thanks tuning in Thomas give them

00:31:11,180 --> 00:31:18,319
applause

00:31:12,240 --> 00:31:18,319

YouTube URL: https://www.youtube.com/watch?v=PNBQ8vGFkFU


