Title: One App, Two Platforms, Three Cloud Services - Sam Gunaratne, Pivotal & Georgi Lozev, SAP
Publication date: 2018-10-10
Playlist: Cloud Foundry Summit Europe 2018
Description: 
	One App, Two Platforms, Three Cloud Services - Sam Gunaratne, Pivotal & Georgi Lozev, SAP

The Open Service Broker API gives developers the power to consume services from different cloud providers on different cloud platforms. This talk will show the power of this specification in action. We will show a single application deployed to Cloud Foundry that uses a service from Google Cloud, a service from Microsoft Azure and a service from IBM Cloud. We will then take the same application and deploy it to Kubernetes and use the same set of services.

https://cfseu18.sched.com/event/FRyZ/one-app-two-platforms-three-cloud-services-sam-gunaratne-pivotal-georgi-lozev-sap
Captions: 
	00:00:00,030 --> 00:00:06,960
so my name is Georgie I work at sa P and

00:00:03,870 --> 00:00:10,860
currently I'm software engineer for the

00:00:06,960 --> 00:00:13,980
CF foundation services API team and I

00:00:10,860 --> 00:00:16,590
work out of Sofia Bulgaria and hi

00:00:13,980 --> 00:00:19,109
everyone my name is Gunnar Radner I work

00:00:16,590 --> 00:00:21,060
for pivotal I'm an engineer I work in

00:00:19,109 --> 00:00:23,880
London and I work on the same team as

00:00:21,060 --> 00:00:25,920
yogi and so our team's focus is really

00:00:23,880 --> 00:00:28,050
like the services experience in Cloud

00:00:25,920 --> 00:00:29,849
Foundry and most specifically we look

00:00:28,050 --> 00:00:33,870
after the open service broker API

00:00:29,849 --> 00:00:35,309
implementation in CF so as authors of a

00:00:33,870 --> 00:00:37,739
platform like we spend a lot of time

00:00:35,309 --> 00:00:40,379
thinking about brokers and broker

00:00:37,739 --> 00:00:41,790
authors and the specification we spend a

00:00:40,379 --> 00:00:45,120
lot of time thinking about it in a very

00:00:41,790 --> 00:00:47,340
like abstract way so this talk is really

00:00:45,120 --> 00:00:49,440
us so taking a step back and trying to

00:00:47,340 --> 00:00:51,390
think about it more practically and

00:00:49,440 --> 00:00:53,309
really trying to understand there's the

00:00:51,390 --> 00:00:57,539
spec sort of live up to the reality of

00:00:53,309 --> 00:00:58,949
what it claims so what we'll do is we'll

00:00:57,539 --> 00:01:01,920
do a little level setter and talk a

00:00:58,949 --> 00:01:03,719
little bit about the API and explain it

00:01:01,920 --> 00:01:05,729
will then have a look at the ecosystem

00:01:03,719 --> 00:01:08,250
to see sort of what's evolved over the

00:01:05,729 --> 00:01:10,409
last two years of this thing being an

00:01:08,250 --> 00:01:11,970
open project then we'll dive into really

00:01:10,409 --> 00:01:13,560
the title of the talk which is our

00:01:11,970 --> 00:01:15,240
demonstration and then we'll end with

00:01:13,560 --> 00:01:20,460
some questions and some learnings at the

00:01:15,240 --> 00:01:22,409
end great so we'll try to get through

00:01:20,460 --> 00:01:24,030
this bit a little bit quick so what is

00:01:22,409 --> 00:01:26,250
the open service break API so this is a

00:01:24,030 --> 00:01:29,369
specification that started in Cloud

00:01:26,250 --> 00:01:32,850
Foundry a number of years ago put simply

00:01:29,369 --> 00:01:34,170
it's a way for your applications running

00:01:32,850 --> 00:01:36,570
in Cloud Foundry to have access to

00:01:34,170 --> 00:01:38,970
backing services and the classic example

00:01:36,570 --> 00:01:40,979
is I have an application or my

00:01:38,970 --> 00:01:42,689
application to be stateless I need to

00:01:40,979 --> 00:01:46,170
store some database give me a backing

00:01:42,689 --> 00:01:47,579
data store and so two years ago the

00:01:46,170 --> 00:01:50,520
kubernetes community we're thinking

00:01:47,579 --> 00:01:51,840
about similar abstractions and so

00:01:50,520 --> 00:01:53,939
instead of going off and forking and

00:01:51,840 --> 00:01:55,290
making their own specification they

00:01:53,939 --> 00:01:58,350
decide to work with Clara finery on the

00:01:55,290 --> 00:01:59,820
open service broker API which is a run

00:01:58,350 --> 00:02:02,460
by a committee of these companies and

00:01:59,820 --> 00:02:04,860
the goals are exactly the same as the

00:02:02,460 --> 00:02:06,719
original specification except on the

00:02:04,860 --> 00:02:07,979
kubernetes platform as well as Cloud

00:02:06,719 --> 00:02:11,300
Foundry so it's all about managing

00:02:07,979 --> 00:02:11,300
service life cycles

00:02:12,980 --> 00:02:18,750
okay what does actually mean I mean we

00:02:16,680 --> 00:02:21,180
will need a little bit more details in

00:02:18,750 --> 00:02:23,700
order to understand the specification a

00:02:21,180 --> 00:02:26,550
little bit better so as part of the

00:02:23,700 --> 00:02:29,760
specification we have two main actors in

00:02:26,550 --> 00:02:32,580
it the first one is called the platform

00:02:29,760 --> 00:02:35,040
a typical example of a platform is cloud

00:02:32,580 --> 00:02:38,460
foundry or kubernetes this is the place

00:02:35,040 --> 00:02:40,920
where our workload lives the second

00:02:38,460 --> 00:02:44,310
actor as part of the specification is

00:02:40,920 --> 00:02:46,800
called a broker this is the component

00:02:44,310 --> 00:02:49,890
responsible for creating service

00:02:46,800 --> 00:02:52,980
instances of a specific type an example

00:02:49,890 --> 00:02:55,500
of a broker is the MySQL broker which is

00:02:52,980 --> 00:02:59,280
capable of provisioning small medium or

00:02:55,500 --> 00:03:00,930
large class so what actually happens

00:02:59,280 --> 00:03:03,540
behind the scenes when a cloud foundry

00:03:00,930 --> 00:03:07,170
users types the CF create service

00:03:03,540 --> 00:03:09,540
command then the platform behind the

00:03:07,170 --> 00:03:12,180
scenes makes a provisional request this

00:03:09,540 --> 00:03:14,550
is another term of the specification to

00:03:12,180 --> 00:03:16,980
the broker and as a result of that

00:03:14,550 --> 00:03:19,860
provision request a service instance is

00:03:16,980 --> 00:03:21,870
created this means that we have our

00:03:19,860 --> 00:03:25,680
instance available out there in the

00:03:21,870 --> 00:03:29,209
cloud waiting for us ok so far so good

00:03:25,680 --> 00:03:32,610
we have it but the next thing that

00:03:29,209 --> 00:03:34,800
logically we need is we actually need

00:03:32,610 --> 00:03:37,620
some kind of information in order to

00:03:34,800 --> 00:03:42,239
connect to that instance this in the

00:03:37,620 --> 00:03:44,850
very basic example is some URL username

00:03:42,239 --> 00:03:47,700
and password to connect to that database

00:03:44,850 --> 00:03:50,760
this in the terms of the specification

00:03:47,700 --> 00:03:53,280
is called a binding so again the

00:03:50,760 --> 00:03:55,709
platform makes a binding request to the

00:03:53,280 --> 00:03:58,709
broker based on some kind of user action

00:03:55,709 --> 00:04:01,530
and as a result of that binding a set of

00:03:58,709 --> 00:04:04,709
credentials are returned back to our

00:04:01,530 --> 00:04:07,440
application or our container and we

00:04:04,709 --> 00:04:13,260
could start working with our instance as

00:04:07,440 --> 00:04:15,420
normal ok to summarize what is actually

00:04:13,260 --> 00:04:18,630
the OS boppy as you may see from this

00:04:15,420 --> 00:04:21,479
diagram the specification is exactly the

00:04:18,630 --> 00:04:23,970
boundary which defines the contract

00:04:21,479 --> 00:04:25,200
between the platform and the broker and

00:04:23,970 --> 00:04:28,350
define some

00:04:25,200 --> 00:04:33,180
kind of common workflows related to

00:04:28,350 --> 00:04:36,270
service instances okay but why is this

00:04:33,180 --> 00:04:38,760
important so because this is a

00:04:36,270 --> 00:04:40,350
specification what it facilitates is

00:04:38,760 --> 00:04:42,180
like this sort of model way you can have

00:04:40,350 --> 00:04:44,760
a platform and then a series of brokers

00:04:42,180 --> 00:04:46,200
offering different services and the

00:04:44,760 --> 00:04:47,850
reason you want to do this is you want

00:04:46,200 --> 00:04:49,920
your developers that have access to like

00:04:47,850 --> 00:04:52,320
a toolbox of services to build richer

00:04:49,920 --> 00:04:53,520
applications but the tsofen service

00:04:52,320 --> 00:04:55,170
broker Specht doesn't really have an

00:04:53,520 --> 00:04:58,590
opinion about where these services

00:04:55,170 --> 00:05:01,050
should be deployed so it might be that

00:04:58,590 --> 00:05:02,430
you have one of your brokers hosted on

00:05:01,050 --> 00:05:04,400
premise and there's lots of reasons you

00:05:02,430 --> 00:05:07,440
might want to do this maybe you have

00:05:04,400 --> 00:05:09,540
data regulatory needs or for performance

00:05:07,440 --> 00:05:11,220
reasons or maybe you're backing an

00:05:09,540 --> 00:05:13,950
existing service that you have in your

00:05:11,220 --> 00:05:16,410
organization but equally you could also

00:05:13,950 --> 00:05:19,860
just get a service from a cloud provider

00:05:16,410 --> 00:05:22,380
so in the case where you want to use I

00:05:19,860 --> 00:05:23,940
know some data service and you don't

00:05:22,380 --> 00:05:25,320
actually care where it's hosted you just

00:05:23,940 --> 00:05:27,750
want you want access to that service

00:05:25,320 --> 00:05:29,850
like why not get it from an expert who

00:05:27,750 --> 00:05:31,620
like an expert provider who has a lot of

00:05:29,850 --> 00:05:34,140
experience running these sort of

00:05:31,620 --> 00:05:37,650
services so and this is sort of like the

00:05:34,140 --> 00:05:39,180
heart of our our talk and so sort of

00:05:37,650 --> 00:05:40,740
sparked the question like how many

00:05:39,180 --> 00:05:43,770
services are available from these sort

00:05:40,740 --> 00:05:46,140
of cloud providers so we spent a little

00:05:43,770 --> 00:05:48,930
bit of time scouring the ecosystem of

00:05:46,140 --> 00:05:51,030
six different providers and found

00:05:48,930 --> 00:05:53,730
there's like 200 services offered by

00:05:51,030 --> 00:05:56,790
like all of these providers and it's a

00:05:53,730 --> 00:05:58,650
mixture of both SAS offerings so you

00:05:56,790 --> 00:06:01,020
just get a URL and you register it in

00:05:58,650 --> 00:06:04,070
your platform and like artifacts that

00:06:01,020 --> 00:06:07,710
you download and then deploy on premise

00:06:04,070 --> 00:06:09,810
and because everybody likes logos here's

00:06:07,710 --> 00:06:12,690
a lot of logos of all the services that

00:06:09,810 --> 00:06:14,460
are available that we found and what was

00:06:12,690 --> 00:06:17,640
great during this like exploration

00:06:14,460 --> 00:06:19,740
wasn't just the variety of services it

00:06:17,640 --> 00:06:21,600
was the fact that if for example you

00:06:19,740 --> 00:06:23,490
want a Postgres service there's actually

00:06:21,600 --> 00:06:25,860
a bunch of different providers that

00:06:23,490 --> 00:06:28,560
offer that service so what that means

00:06:25,860 --> 00:06:30,660
for you as a consumer as a platform

00:06:28,560 --> 00:06:32,730
operator it's that you can pick and

00:06:30,660 --> 00:06:34,770
choose which provider you get your post

00:06:32,730 --> 00:06:37,740
restaurant you could pick based on price

00:06:34,770 --> 00:06:40,760
or SLO or performance and if you're not

00:06:37,740 --> 00:06:40,760
happy you can switch

00:06:42,229 --> 00:06:46,979
so I guess most of you have started

00:06:45,209 --> 00:06:49,259
wondering where are we going with this

00:06:46,979 --> 00:06:51,509
talk because all the things so far were

00:06:49,259 --> 00:06:54,449
kind of familiar we saw them on previous

00:06:51,509 --> 00:06:57,509
summits on previous talks we didn't tell

00:06:54,449 --> 00:07:00,899
almost anything new as part of this so

00:06:57,509 --> 00:07:02,849
what we actually wanted to do some and I

00:07:00,899 --> 00:07:05,279
wanted to pet it to put the

00:07:02,849 --> 00:07:08,339
specification to the test so we wanted

00:07:05,279 --> 00:07:11,369
to validate how easy or how hard is for

00:07:08,339 --> 00:07:13,349
a developer to actually consume multiple

00:07:11,369 --> 00:07:16,439
services coming from different cloud

00:07:13,349 --> 00:07:19,860
providers so what does the developers do

00:07:16,439 --> 00:07:23,550
when they want to test the thing they

00:07:19,860 --> 00:07:25,589
create an app so we did we have created

00:07:23,550 --> 00:07:28,349
a very simple application with the

00:07:25,589 --> 00:07:30,269
purposes of the demonstration the

00:07:28,349 --> 00:07:33,899
application consists of two basic nodes

00:07:30,269 --> 00:07:37,889
a web node and a worker node a user is

00:07:33,899 --> 00:07:41,189
allowed to upload image to the web node

00:07:37,889 --> 00:07:43,519
and then an image is passed to the

00:07:41,189 --> 00:07:47,129
worker node via a messaging cue system

00:07:43,519 --> 00:07:50,550
then the worker tries to classify that

00:07:47,129 --> 00:07:54,539
image and extend some kind of meaningful

00:07:50,550 --> 00:07:56,819
information from it relying on already

00:07:54,539 --> 00:07:59,879
trained models coming from an image

00:07:56,819 --> 00:08:02,279
classification service and once we have

00:07:59,879 --> 00:08:05,309
our classification we store the end

00:08:02,279 --> 00:08:07,979
result and input image in a relational

00:08:05,309 --> 00:08:09,629
database I guess most of you might be

00:08:07,979 --> 00:08:12,809
familiar with such an architecture

00:08:09,629 --> 00:08:16,319
because a lot of real world applications

00:08:12,809 --> 00:08:19,800
rely on similar services so how actually

00:08:16,319 --> 00:08:21,839
our app look looks like back from

00:08:19,800 --> 00:08:24,419
different cloud providers because we

00:08:21,839 --> 00:08:26,099
think we are kind of pragmatic and we

00:08:24,419 --> 00:08:26,789
also believe in using the right tools

00:08:26,099 --> 00:08:30,089
for the job

00:08:26,789 --> 00:08:33,240
we decided to rely on the message queue

00:08:30,089 --> 00:08:37,079
coming from the Google pub/sub as our

00:08:33,240 --> 00:08:40,079
inter process communication system we we

00:08:37,079 --> 00:08:42,870
also used the IBM Watson vision

00:08:40,079 --> 00:08:46,410
recognition service with for the image

00:08:42,870 --> 00:08:48,689
classification and last but not least we

00:08:46,410 --> 00:08:50,850
used a relational Postgres date for

00:08:48,689 --> 00:08:52,110
great database coming from the azure

00:08:50,850 --> 00:08:55,020
cloud

00:08:52,110 --> 00:08:58,290
so right now some is going to

00:08:55,020 --> 00:09:00,210
demonstrate your life what does it how

00:08:58,290 --> 00:09:02,010
does it look like from sieve developer

00:09:00,210 --> 00:09:04,680
perspective to work with such

00:09:02,010 --> 00:09:12,260
application that is backed by those

00:09:04,680 --> 00:09:12,260
cloud providers okay can everybody see

00:09:14,900 --> 00:09:20,340
okay

00:09:16,080 --> 00:09:22,440
can everybody see that excellent okay so

00:09:20,340 --> 00:09:24,810
have access to a cloud foundry

00:09:22,440 --> 00:09:27,120
environment right here and the first

00:09:24,810 --> 00:09:29,820
thing I want to show you is that we have

00:09:27,120 --> 00:09:30,930
some service brokers registered here so

00:09:29,820 --> 00:09:32,760
I can run the service brokers command

00:09:30,930 --> 00:09:35,100
and you can see we have three brokers

00:09:32,760 --> 00:09:38,280
and as your broker at Google broker and

00:09:35,100 --> 00:09:39,690
an IBM broker next what we'll look at is

00:09:38,280 --> 00:09:42,030
we'll look at what services are

00:09:39,690 --> 00:09:43,920
available from those brokers so we can

00:09:42,030 --> 00:09:47,790
do that by looking at the CF service

00:09:43,920 --> 00:09:49,050
access command we'll just get those so

00:09:47,790 --> 00:09:51,150
you can see here they ordered by the

00:09:49,050 --> 00:09:53,100
brokest at the top these are all the

00:09:51,150 --> 00:09:56,460
Google services then we have the IBM

00:09:53,100 --> 00:09:58,890
services lots of wats and goodies and at

00:09:56,460 --> 00:10:01,560
the bottom a bunch of as you're mainly

00:09:58,890 --> 00:10:03,450
data services I think but for the

00:10:01,560 --> 00:10:05,940
purposes of this demonstration we don't

00:10:03,450 --> 00:10:09,180
actually need access to most of those so

00:10:05,940 --> 00:10:10,620
we've only enabled we've only enabled

00:10:09,180 --> 00:10:14,460
for three services that we need so

00:10:10,620 --> 00:10:16,620
that's Postgres from azure pub/sub from

00:10:14,460 --> 00:10:20,820
Google and the Watson vision service

00:10:16,620 --> 00:10:22,830
from IBM so if we have a look at our

00:10:20,820 --> 00:10:24,420
applications we have the two apps that

00:10:22,830 --> 00:10:26,910
googy was mentioning a web app and a

00:10:24,420 --> 00:10:29,400
worker app this is just both regular

00:10:26,910 --> 00:10:31,170
like CF go apps and they're stopped at

00:10:29,400 --> 00:10:34,230
the moment so what we'll do is we will

00:10:31,170 --> 00:10:36,630
create the vision service from IBM

00:10:34,230 --> 00:10:38,310
specifying the service name a plan and

00:10:36,630 --> 00:10:41,370
then an arbitrary name the service

00:10:38,310 --> 00:10:43,170
vision so go ahead and do that and this

00:10:41,370 --> 00:10:45,750
is going off to IBM's cloud and

00:10:43,170 --> 00:10:47,010
provisioning some abstract concept of a

00:10:45,750 --> 00:10:49,200
service that will allow us to get

00:10:47,010 --> 00:10:55,080
credentials with the bind operation in a

00:10:49,200 --> 00:10:58,620
second let's see how this goes

00:10:55,080 --> 00:11:00,540
all right amazing so next we'll do the

00:10:58,620 --> 00:11:02,430
bind operation and you remember from

00:11:00,540 --> 00:11:03,810
that diagram it's the worker application

00:11:02,430 --> 00:11:07,340
that she needs access to the vision

00:11:03,810 --> 00:11:09,540
service so we'll bind it just to the

00:11:07,340 --> 00:11:11,340
and this will go and get the actual

00:11:09,540 --> 00:11:14,630
credentials the API key that's required

00:11:11,340 --> 00:11:14,630
to go and talk to the vision service

00:11:14,870 --> 00:11:19,920
okay so for the rest of the services

00:11:17,700 --> 00:11:22,770
we've pre provisioned them just because

00:11:19,920 --> 00:11:26,220
it takes a lot of time so you can see

00:11:22,770 --> 00:11:28,260
the applications so the services on the

00:11:26,220 --> 00:11:29,910
left and then how the bindings work in

00:11:28,260 --> 00:11:31,980
the middle in the bound apps column so

00:11:29,910 --> 00:11:33,630
our Postgres and our pub/sub are bound

00:11:31,980 --> 00:11:35,790
to both the worker app and the web app

00:11:33,630 --> 00:11:39,150
and our vision service is just bounce on

00:11:35,790 --> 00:11:42,060
our workout so next what we'll do is

00:11:39,150 --> 00:11:45,030
we'll start both our web app and workout

00:11:42,060 --> 00:11:47,190
app and just while we do that what we'll

00:11:45,030 --> 00:11:49,050
do is I've got it there already we'll

00:11:47,190 --> 00:11:50,730
have a look at the environment for the

00:11:49,050 --> 00:11:55,050
worker app to see what their vcap

00:11:50,730 --> 00:11:56,130
services look like so the first service

00:11:55,050 --> 00:11:57,690
you could see there is the is your

00:11:56,130 --> 00:11:59,280
service you can see it's got a Postgres

00:11:57,690 --> 00:12:01,170
connection string or very sort of

00:11:59,280 --> 00:12:03,960
vanilla and this is typically what

00:12:01,170 --> 00:12:05,880
service binding instant look like for

00:12:03,960 --> 00:12:07,440
the majority of service brokers the

00:12:05,880 --> 00:12:08,790
Google one is quite interesting it's a

00:12:07,440 --> 00:12:11,550
completely different authentication

00:12:08,790 --> 00:12:12,750
model you actually get back private key

00:12:11,550 --> 00:12:14,510
information that you use then to

00:12:12,750 --> 00:12:16,980
communicate to Google servers and

00:12:14,510 --> 00:12:18,540
finally the IBM service is again

00:12:16,980 --> 00:12:24,180
different it's an API key that you get

00:12:18,540 --> 00:12:24,450
back along with the URL so let's head

00:12:24,180 --> 00:12:27,440
back

00:12:24,450 --> 00:12:32,340
so our applications have started now and

00:12:27,440 --> 00:12:34,470
I'm going to look at that and look at

00:12:32,340 --> 00:12:36,180
that there we go so actually pretty

00:12:34,470 --> 00:12:37,440
proud of this you I mean you're here on

00:12:36,180 --> 00:12:40,530
UI designs but this is top-notch

00:12:37,440 --> 00:12:42,540
material design I can promise you so as

00:12:40,530 --> 00:12:48,180
you said but we need to do is upload an

00:12:42,540 --> 00:12:52,010
image and fortunately there we go off on

00:12:48,180 --> 00:12:56,040
my cursor here and so what we'll do is

00:12:52,010 --> 00:12:57,690
find a nice image here again if you can

00:12:56,040 --> 00:13:00,450
see that on the screen let's see if we

00:12:57,690 --> 00:13:03,240
get right yeah this one way not that one

00:13:00,450 --> 00:13:04,350
this one okay and so what we're going to

00:13:03,240 --> 00:13:05,610
do is we're going to take this image

00:13:04,350 --> 00:13:07,260
we're going to upload it it's going to

00:13:05,610 --> 00:13:09,500
go to our web app it's then going to be

00:13:07,260 --> 00:13:12,150
sent all the way to Google's servers

00:13:09,500 --> 00:13:13,740
wherever they hope they're hosted it's

00:13:12,150 --> 00:13:16,020
going to be picked off the subscription

00:13:13,740 --> 00:13:18,810
by our worker app sent all the way back

00:13:16,020 --> 00:13:19,630
to our co-founder II then go off to IBM

00:13:18,810 --> 00:13:21,820
service across

00:13:19,630 --> 00:13:23,110
pation then the resulting classification

00:13:21,820 --> 00:13:24,820
and image you're going to be sent as

00:13:23,110 --> 00:13:28,960
your servers to be stored and then

00:13:24,820 --> 00:13:33,580
picked up by our web app so if we open

00:13:28,960 --> 00:13:35,680
that and click upload here we have some

00:13:33,580 --> 00:13:36,790
very simple logs for our worker app so

00:13:35,680 --> 00:13:39,040
you can see it see if the image is

00:13:36,790 --> 00:13:41,830
classifying and then it's stored it

00:13:39,040 --> 00:13:45,280
again in Azure and finish processing the

00:13:41,830 --> 00:13:47,140
message and if we refresh I can confirm

00:13:45,280 --> 00:13:51,850
with the power of three clouds that this

00:13:47,140 --> 00:13:56,440
is a lion everybody yes thank you very

00:13:51,850 --> 00:13:58,360
much and you've already seen it but this

00:13:56,440 --> 00:14:01,450
is pretty great we've also got a not a

00:13:58,360 --> 00:14:04,720
lion and we'll see what-what some

00:14:01,450 --> 00:14:07,930
service thinks of this so if we upload

00:14:04,720 --> 00:14:09,160
it it's the same process and it's

00:14:07,930 --> 00:14:11,050
actually pretty good it's determined

00:14:09,160 --> 00:14:12,340
that that on the right is is a dog and

00:14:11,050 --> 00:14:15,000
that on the left is alive I was actually

00:14:12,340 --> 00:14:17,320
very impressed by this sir she awesome

00:14:15,000 --> 00:14:19,360
cool but the main point is right is that

00:14:17,320 --> 00:14:21,520
like where we like as developers we just

00:14:19,360 --> 00:14:23,050
pick to these services and we built our

00:14:21,520 --> 00:14:26,200
application like using all these

00:14:23,050 --> 00:14:27,280
different services from like the expert

00:14:26,200 --> 00:14:28,900
that we wanted we weren't like we know

00:14:27,280 --> 00:14:31,150
IBM a great I'd like ports and services

00:14:28,900 --> 00:14:32,470
so we'll have that like maybe our app

00:14:31,150 --> 00:14:34,180
would be higher throughput so we want

00:14:32,470 --> 00:14:36,580
the Google pub/sub service you know what

00:14:34,180 --> 00:14:40,990
sort of thing okay let's head back to

00:14:36,580 --> 00:14:42,490
the slides okay so we talked about three

00:14:40,990 --> 00:14:44,590
different brokers and like the ecosystem

00:14:42,490 --> 00:14:46,270
of brokers that's emerged but as we know

00:14:44,590 --> 00:14:48,370
like the open service broker API has

00:14:46,270 --> 00:14:50,950
brokers and platforms so what about an

00:14:48,370 --> 00:14:53,380
ecosystem of platforms and so this is

00:14:50,950 --> 00:14:54,880
what we sort of wanted to do where we

00:14:53,380 --> 00:14:55,990
had kubernetes doing exactly the same

00:14:54,880 --> 00:14:57,850
things talking to the same set of

00:14:55,990 --> 00:15:01,660
services and that's what yogi is going

00:14:57,850 --> 00:15:06,640
to show you now okay thanks Sam thanks

00:15:01,660 --> 00:15:09,070
for the nice demonstration okay so right

00:15:06,640 --> 00:15:13,720
now I'm going to show you the exact or

00:15:09,070 --> 00:15:15,790
almost the same workflow but from uber

00:15:13,720 --> 00:15:18,070
native developer perspective or how we

00:15:15,790 --> 00:15:19,570
actually could put that exactly the same

00:15:18,070 --> 00:15:23,200
code base with exactly the same

00:15:19,570 --> 00:15:25,900
application but to cuber natives and I

00:15:23,200 --> 00:15:28,570
have pre-configured a demo magic script

00:15:25,900 --> 00:15:31,870
so just to save you my poor typing

00:15:28,570 --> 00:15:33,939
skills so don't be impressed with my

00:15:31,870 --> 00:15:36,729
fast typing skills it's a script

00:15:33,939 --> 00:15:39,129
but the demo is life so it's not a

00:15:36,729 --> 00:15:42,909
recording so if anything goes wrong you

00:15:39,129 --> 00:15:45,789
notice it immediately so the first thing

00:15:42,909 --> 00:15:47,769
that we did similar to the CF we have

00:15:45,789 --> 00:15:49,899
configured the kubernetes cluster and

00:15:47,769 --> 00:15:52,449
installed the service catalog in it and

00:15:49,899 --> 00:15:55,659
also registered tree the same tree

00:15:52,449 --> 00:15:58,599
brokers the asier the Google and IBM

00:15:55,659 --> 00:16:01,959
broker and this is currently part of my

00:15:58,599 --> 00:16:04,689
of my context so I have a cluster which

00:16:01,959 --> 00:16:06,909
is called summing in gurgi and it's

00:16:04,689 --> 00:16:10,359
installed with all those things that we

00:16:06,909 --> 00:16:12,489
need ok the next thing that I'm going to

00:16:10,359 --> 00:16:14,739
show you this is the equivalent of CF

00:16:12,489 --> 00:16:17,409
Marketplace command but in Q Burnett is

00:16:14,739 --> 00:16:19,599
term I'm using the service catalog CLI

00:16:17,409 --> 00:16:23,049
and in this case it's called get classes

00:16:19,599 --> 00:16:25,089
which will return me return me the list

00:16:23,049 --> 00:16:27,389
of available services as you may see

00:16:25,089 --> 00:16:30,669
this is exactly the same list of

00:16:27,389 --> 00:16:33,309
services but just put in different order

00:16:30,669 --> 00:16:35,529
but we have services coming from from

00:16:33,309 --> 00:16:39,459
Asia we have services coming from Google

00:16:35,529 --> 00:16:41,470
the spanner we also have our watson

00:16:39,459 --> 00:16:43,539
vision combined service that we are

00:16:41,470 --> 00:16:50,439
going to use as part of our work or

00:16:43,539 --> 00:16:53,139
notes ok so the next thing is I'm going

00:16:50,439 --> 00:16:55,599
to describe or to get more details about

00:16:53,139 --> 00:16:57,999
about the Watson vision service and see

00:16:55,599 --> 00:17:00,309
what are the available plans that that

00:16:57,999 --> 00:17:03,159
it has so it has the same set of plans

00:17:00,309 --> 00:17:05,709
as in the 15r it has a light and a

00:17:03,159 --> 00:17:07,929
standard plan and it also has a longer

00:17:05,709 --> 00:17:10,199
description about specifying what are

00:17:07,929 --> 00:17:13,299
the pros and cons of the different plans

00:17:10,199 --> 00:17:15,429
so the next thing that I'm going to do

00:17:13,299 --> 00:17:17,589
is trying to provision a service

00:17:15,429 --> 00:17:19,809
instance or this is the equivalent of CF

00:17:17,589 --> 00:17:22,000
create service command that I guess most

00:17:19,809 --> 00:17:25,539
of you are already familiar with so

00:17:22,000 --> 00:17:27,399
again we the the command is different

00:17:25,539 --> 00:17:29,110
it's called provision but the semantics

00:17:27,399 --> 00:17:31,720
and the things behind the scenes is

00:17:29,110 --> 00:17:34,600
actually the same so we just specify a

00:17:31,720 --> 00:17:36,850
name identifier for our service instance

00:17:34,600 --> 00:17:39,730
and we specify what is the class or the

00:17:36,850 --> 00:17:42,389
service and the plan that that the

00:17:39,730 --> 00:17:45,659
service instance should be derived from

00:17:42,389 --> 00:17:47,440
so we get an immediate response for that

00:17:45,659 --> 00:17:50,230
operation how

00:17:47,440 --> 00:17:52,899
all operation innkeeper natives are

00:17:50,230 --> 00:17:55,960
asynchronous so we still need to run

00:17:52,899 --> 00:17:58,720
additional command in AK in order to get

00:17:55,960 --> 00:18:00,490
the real status of that operation so

00:17:58,720 --> 00:18:03,129
this command in the Terms of Service

00:18:00,490 --> 00:18:06,039
Catalog CLI is called described so I'm

00:18:03,129 --> 00:18:09,970
describing an instance and give the

00:18:06,039 --> 00:18:12,730
identifier the name of my instance so as

00:18:09,970 --> 00:18:14,799
you may see from the status field the

00:18:12,730 --> 00:18:17,919
service is ready it's available out

00:18:14,799 --> 00:18:23,110
there in the cloud somewhere in the IBM

00:18:17,919 --> 00:18:26,049
data centers so we have it ready ready

00:18:23,110 --> 00:18:28,509
good to go so if you remember the

00:18:26,049 --> 00:18:30,820
diagram that I've shown you earlier

00:18:28,509 --> 00:18:32,620
about the details of the OS boppy we

00:18:30,820 --> 00:18:34,450
need one more additional thing to

00:18:32,620 --> 00:18:37,809
connect to that instance this is the

00:18:34,450 --> 00:18:39,730
binding actually and as you may imagine

00:18:37,809 --> 00:18:42,250
the equivalent command in service

00:18:39,730 --> 00:18:44,769
catalog is called bind and we provide

00:18:42,250 --> 00:18:47,470
the name of the instance and with add

00:18:44,769 --> 00:18:49,269
additional identifier this is the name

00:18:47,470 --> 00:18:51,820
of the binding so we actually put some

00:18:49,269 --> 00:18:54,070
kind of label for the binding remember

00:18:51,820 --> 00:18:56,289
this name because later on we'll use it

00:18:54,070 --> 00:18:58,690
we call it vision binding just to

00:18:56,289 --> 00:19:00,610
associate it with our service instance

00:18:58,690 --> 00:19:04,990
but it is it's a thing that we will use

00:19:00,610 --> 00:19:07,509
later on again the same immediately

00:19:04,990 --> 00:19:10,779
response but actually behind the scenes

00:19:07,509 --> 00:19:12,429
something asynchronous might happen I'm

00:19:10,779 --> 00:19:15,850
going to again describe the binding

00:19:12,429 --> 00:19:18,399
based on the identifier but provide the

00:19:15,850 --> 00:19:20,759
additional show secrets flag which you

00:19:18,399 --> 00:19:23,350
actually try to decode my binding and

00:19:20,759 --> 00:19:25,779
present in plain text what were the

00:19:23,350 --> 00:19:28,090
credentials that the broker has returned

00:19:25,779 --> 00:19:32,889
to the to the platform or to my

00:19:28,090 --> 00:19:35,230
application so as you may see and I

00:19:32,889 --> 00:19:37,389
guess as most of you may have expected

00:19:35,230 --> 00:19:40,120
we have a new URL this is the place

00:19:37,389 --> 00:19:43,629
where our service actually live and we

00:19:40,120 --> 00:19:45,700
have an API key which we will use to

00:19:43,629 --> 00:19:47,649
authenticate and authorize our

00:19:45,700 --> 00:19:54,279
application when it connects to that

00:19:47,649 --> 00:19:56,769
service instance ok yeah the s

00:19:54,279 --> 00:19:59,080
Sam already explained the process for

00:19:56,769 --> 00:20:00,060
the other service instances is exactly

00:19:59,080 --> 00:20:02,040
the same I mean

00:20:00,060 --> 00:20:04,590
if you want to provision and bind a

00:20:02,040 --> 00:20:06,690
Postgres or the cloud pub/sub messaging

00:20:04,590 --> 00:20:08,730
kill the process is exactly the same you

00:20:06,690 --> 00:20:11,550
just change the names and just change

00:20:08,730 --> 00:20:12,960
the values of those parameters so just

00:20:11,550 --> 00:20:14,970
to save us some time we have

00:20:12,960 --> 00:20:17,790
pre-configured those instances that are

00:20:14,970 --> 00:20:19,620
necessary for our application to live

00:20:17,790 --> 00:20:22,440
and we also have a corresponding

00:20:19,620 --> 00:20:26,220
bindings which are for the for those

00:20:22,440 --> 00:20:28,470
service instances so the next thing that

00:20:26,220 --> 00:20:31,500
I'm going to show you is how actually to

00:20:28,470 --> 00:20:34,370
connect that binding or start using that

00:20:31,500 --> 00:20:37,740
binding as part of our application

00:20:34,370 --> 00:20:39,240
environment this in the cuber native

00:20:37,740 --> 00:20:41,460
word happens in the deployment

00:20:39,240 --> 00:20:44,280
descriptor file or happens in the app

00:20:41,460 --> 00:20:46,470
environment section this is the

00:20:44,280 --> 00:20:49,650
environment that is available for our

00:20:46,470 --> 00:20:53,340
application when it boots so what we did

00:20:49,650 --> 00:20:57,060
here was actually when we used the

00:20:53,340 --> 00:20:58,830
binding or we the rep or reference the

00:20:57,060 --> 00:21:02,520
secret that is associated with that

00:20:58,830 --> 00:21:04,380
binding and put that as a value as a new

00:21:02,520 --> 00:21:06,090
environment variable that will be

00:21:04,380 --> 00:21:08,250
available on good time of our

00:21:06,090 --> 00:21:11,400
application and our application knows

00:21:08,250 --> 00:21:13,590
how to work with this vision API key

00:21:11,400 --> 00:21:16,350
environment variable so the our library

00:21:13,590 --> 00:21:19,880
could start and could could could work

00:21:16,350 --> 00:21:23,490
the same thing happens for the URL here

00:21:19,880 --> 00:21:25,500
okay let let's test this thing let's see

00:21:23,490 --> 00:21:27,450
whether the application actually will be

00:21:25,500 --> 00:21:29,010
able to start and work with with the

00:21:27,450 --> 00:21:31,410
service instances and with those

00:21:29,010 --> 00:21:33,210
bindings this in terms because I have

00:21:31,410 --> 00:21:35,400
created a separate deployment for both

00:21:33,210 --> 00:21:37,410
components this in the terms of

00:21:35,400 --> 00:21:40,320
copernicus we create those deployments

00:21:37,410 --> 00:21:42,630
using the cubed CTL out of that

00:21:40,320 --> 00:21:45,920
deployment descriptor the llaman of all

00:21:42,630 --> 00:21:48,240
that i've shown you so yeah again

00:21:45,920 --> 00:21:50,010
asynchronous operation so we could not

00:21:48,240 --> 00:21:53,400
be a hundred percent sure that the thing

00:21:50,010 --> 00:21:56,580
is running so we need to run one more

00:21:53,400 --> 00:21:59,280
command and describe our and get our

00:21:56,580 --> 00:22:01,710
deployments and as you may see our

00:21:59,280 --> 00:22:04,100
deployments are already available or our

00:22:01,710 --> 00:22:08,460
apps are already available for

00:22:04,100 --> 00:22:10,340
consumption or just to one side note

00:22:08,460 --> 00:22:12,450
here because in queue Burnette is

00:22:10,340 --> 00:22:15,270
slightly different than

00:22:12,450 --> 00:22:18,240
çf when an application or a container is

00:22:15,270 --> 00:22:21,180
started it doesn't have a public IP

00:22:18,240 --> 00:22:24,210
address or a DNS address associated with

00:22:21,180 --> 00:22:26,580
it so we here need one additional

00:22:24,210 --> 00:22:29,190
resource in the terms of equivalent is

00:22:26,580 --> 00:22:31,710
called a load balancer service which

00:22:29,190 --> 00:22:34,410
will actually map a public IP address

00:22:31,710 --> 00:22:37,440
which we could access from a browser to

00:22:34,410 --> 00:22:40,580
our application running as part of the

00:22:37,440 --> 00:22:44,430
of the cluster and as part of the pot so

00:22:40,580 --> 00:22:48,270
we have pre created that lot of answers

00:22:44,430 --> 00:22:52,680
service and it is available on this

00:22:48,270 --> 00:22:54,750
external on this IP address so when we

00:22:52,680 --> 00:22:58,140
open the address you could see the same

00:22:54,750 --> 00:23:01,140
Pleasant UI that some already shown you

00:22:58,140 --> 00:23:02,670
so right now I won't get into the

00:23:01,140 --> 00:23:04,650
details of that because the process is

00:23:02,670 --> 00:23:08,340
pretty much the same I will just try and

00:23:04,650 --> 00:23:13,080
see whether it's working I'm going to

00:23:08,340 --> 00:23:15,590
use this image for for the for the

00:23:13,080 --> 00:23:21,500
classification hit the upload button

00:23:15,590 --> 00:23:25,410
wait a few seconds hit the Refresh and

00:23:21,500 --> 00:23:28,230
yeah it's working so we have our image

00:23:25,410 --> 00:23:30,720
classified and as you may all see a

00:23:28,230 --> 00:23:33,150
pretty good and concrete classification

00:23:30,720 --> 00:23:34,970
so it looks like a good diet food that

00:23:33,150 --> 00:23:40,200
everyone could have once this

00:23:34,970 --> 00:23:42,690
presentation is over okay this was the

00:23:40,200 --> 00:23:44,750
demonstration that we wanted to show you

00:23:42,690 --> 00:23:47,610
how it looks like actually from

00:23:44,750 --> 00:23:51,660
kubernetes developer perspective and how

00:23:47,610 --> 00:23:54,840
we actually could use the same code base

00:23:51,660 --> 00:23:56,910
and push it to a different platform the

00:23:54,840 --> 00:23:58,590
last bit that we wanted to share with

00:23:56,910 --> 00:24:00,510
all of you and that we thought that it's

00:23:58,590 --> 00:24:03,090
going to be interesting for everyone

00:24:00,510 --> 00:24:05,280
were the learnings that we met during

00:24:03,090 --> 00:24:07,920
preparing for this talk and during

00:24:05,280 --> 00:24:10,050
create creating this demo there were

00:24:07,920 --> 00:24:12,510
quite a lot of things if I have to be

00:24:10,050 --> 00:24:15,450
honest the first thing that we were

00:24:12,510 --> 00:24:17,340
quite surprised in a good way

00:24:15,450 --> 00:24:19,110
despite the fact that we are every day

00:24:17,340 --> 00:24:22,740
working with the specification and we

00:24:19,110 --> 00:24:25,049
know how powerful it is we we were very

00:24:22,740 --> 00:24:27,179
surprised about the huge variety of

00:24:25,049 --> 00:24:30,389
is available out there coming from

00:24:27,179 --> 00:24:32,489
different providers so it's definitely a

00:24:30,389 --> 00:24:35,249
good thing and I personally felt like a

00:24:32,489 --> 00:24:37,739
kid in a candy store when I saw how many

00:24:35,249 --> 00:24:40,379
services I could consume as a developer

00:24:37,739 --> 00:24:43,799
the next thing that we are happy about

00:24:40,379 --> 00:24:48,239
is how actually similar working from

00:24:43,799 --> 00:24:52,139
broth platforms looks like from a CF

00:24:48,239 --> 00:24:54,179
related were from services related

00:24:52,139 --> 00:24:55,769
workforce I mean the user experience

00:24:54,179 --> 00:24:58,950
there is pretty much the same you need

00:24:55,769 --> 00:25:01,379
to learn a few new flags and you need to

00:24:58,950 --> 00:25:03,720
learn to install a new CLI and you're

00:25:01,379 --> 00:25:05,549
good to go you can switch or you can use

00:25:03,720 --> 00:25:07,980
both and you don't have to learn almost

00:25:05,549 --> 00:25:10,830
anything new the concepts that the

00:25:07,980 --> 00:25:15,090
concepts are exactly or pretty much the

00:25:10,830 --> 00:25:16,679
same the next thing is like this works

00:25:15,090 --> 00:25:18,929
like we sort of set out with this goal

00:25:16,679 --> 00:25:20,129
of trying to consume these three

00:25:18,929 --> 00:25:21,090
services we sort of came up the name of

00:25:20,129 --> 00:25:23,100
the talk and then we were like right

00:25:21,090 --> 00:25:24,899
we'll go and figure out how to do it but

00:25:23,100 --> 00:25:27,570
the good news is it worked which is

00:25:24,899 --> 00:25:30,149
awesome but with some caveats so for the

00:25:27,570 --> 00:25:31,590
eagle died amongst you when I did the CF

00:25:30,149 --> 00:25:32,970
Service broker command you might have

00:25:31,590 --> 00:25:34,950
noticed that the URLs or the service

00:25:32,970 --> 00:25:37,320
brokers were actually Cloud Foundry apps

00:25:34,950 --> 00:25:40,259
and that's because to get the providers

00:25:37,320 --> 00:25:42,570
work and we actually to use proxies and

00:25:40,259 --> 00:25:44,460
for different reasons so for the Google

00:25:42,570 --> 00:25:48,179
case they actually support a very custom

00:25:44,460 --> 00:25:49,679
JWT OAuth flow the client foundry just

00:25:48,179 --> 00:25:51,419
doesn't support so we had we have a

00:25:49,679 --> 00:25:54,210
proxy for that and for the IBM case

00:25:51,419 --> 00:25:59,580
their services are actually private to

00:25:54,210 --> 00:26:01,470
IBM cloud so I think like I've talked to

00:25:59,580 --> 00:26:03,149
a few people about this and from our

00:26:01,470 --> 00:26:04,440
this this is this definitely was

00:26:03,149 --> 00:26:06,090
impossible a few years ago so like the

00:26:04,440 --> 00:26:08,100
general direction is that these things

00:26:06,090 --> 00:26:10,440
will be consumed and other providers are

00:26:08,100 --> 00:26:13,049
working on offering full SAS offerings

00:26:10,440 --> 00:26:16,619
of their brokers in which case like the

00:26:13,049 --> 00:26:18,119
proxies won't be required the final

00:26:16,619 --> 00:26:21,149
thing that you might have sort of

00:26:18,119 --> 00:26:23,460
wondered is in our demonstration we

00:26:21,149 --> 00:26:24,600
pushed the same app to different two

00:26:23,460 --> 00:26:26,639
different places and same set of

00:26:24,600 --> 00:26:28,529
services but we never shared data across

00:26:26,639 --> 00:26:30,899
the two platforms and I don't know if

00:26:28,529 --> 00:26:32,129
you saw florins talk the keynote this

00:26:30,899 --> 00:26:33,749
morning but that's the sort of thing

00:26:32,129 --> 00:26:35,549
that the service manager project is

00:26:33,749 --> 00:26:37,080
hoping to address so hopefully next

00:26:35,549 --> 00:26:38,730
summit someone come along and do an

00:26:37,080 --> 00:26:41,070
improved version of our talk and maybe

00:26:38,730 --> 00:26:42,210
the web app running in CF and work apps

00:26:41,070 --> 00:26:45,710
running in Cuban Eddie's and

00:26:42,210 --> 00:26:48,360
communicating through services awesome

00:26:45,710 --> 00:26:50,550
well thank you very much that was our

00:26:48,360 --> 00:26:53,100
demonstration showing you know different

00:26:50,550 --> 00:26:54,330
cloud providers services all being

00:26:53,100 --> 00:26:56,280
consuming one app and two different

00:26:54,330 --> 00:27:08,850
platforms does anybody have any

00:26:56,280 --> 00:27:10,470
questions if you're interested in this

00:27:08,850 --> 00:27:12,420
stuff there's two other things happening

00:27:10,470 --> 00:27:13,710
at Summit I can shout out to so there's

00:27:12,420 --> 00:27:16,290
first of all for interesting about

00:27:13,710 --> 00:27:19,350
services in CF nikki is doing a talk

00:27:16,290 --> 00:27:21,570
later about the services api team and CF

00:27:19,350 --> 00:27:23,190
i think that's at 5:30 and then if

00:27:21,570 --> 00:27:25,740
you're interested in like kubernetes and

00:27:23,190 --> 00:27:27,330
CF experience for services lewis and

00:27:25,740 --> 00:27:28,770
alex are doing a lab I think there's one

00:27:27,330 --> 00:27:33,420
session tomorrow where you can go and

00:27:28,770 --> 00:27:37,620
play around with that life there are no

00:27:33,420 --> 00:27:41,800
questions thank you very much thank you

00:27:37,620 --> 00:27:41,800

YouTube URL: https://www.youtube.com/watch?v=msazM469OAs


