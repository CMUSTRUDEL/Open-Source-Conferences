Title: Services API Project Update - Matt McNeeney, Pivotal & Nikolay Maslarski, SAP
Publication date: 2018-10-11
Playlist: Cloud Foundry Summit Europe 2018
Description: 
	Services API Project Update - Matt McNeeney, Pivotal & Nikolay Maslarski, SAP

The Cloud Foundry Services API team is responsible for:
- The developer experience provisioning and managing services in Cloud Foundry Application Runtime.
- Making it easier to build and integrate service brokers with all Cloud Foundry platforms.

This second project update from the team will include:
- What we’ve been working on in 2018, including the ability to create bindings asynchronously and the ability to register the same broker multiple times
- What we’re going to be working on soon, including replacing the Basic Auth mechanism with oAuth to improve platform to service broker security
- How the Services API team is contributing to the Open Service Broker API specification to make Cloud Foundry and Kubernetes better together

We'll then give a live demo showing some of the new developer experiences we’ve built in action.

https://cfseu18.sched.com/event/FRyO/services-api-project-update-matt-mcneeney-pivotal-nikolay-maslarski-sap
Captions: 
	00:00:00,000 --> 00:00:03,929
as has been pointed out we know we're

00:00:02,460 --> 00:00:06,170
the last people keeping you from beers

00:00:03,929 --> 00:00:09,780
upstairs so we promise to be quick and

00:00:06,170 --> 00:00:12,450
hopefully interesting to start with some

00:00:09,780 --> 00:00:14,790
introductions my name is Matt Malini I'm

00:00:12,450 --> 00:00:17,039
the product manager for the open source

00:00:14,790 --> 00:00:19,710
cloud foundry services API a team and

00:00:17,039 --> 00:00:25,619
one of the co-chairs of the open service

00:00:19,710 --> 00:00:27,060
broker API project hi from sa P

00:00:25,619 --> 00:00:31,890
currently working as a software engineer

00:00:27,060 --> 00:00:33,719
on the serious API team so the agenda

00:00:31,890 --> 00:00:35,399
for today I'm gonna start off by telling

00:00:33,719 --> 00:00:37,890
you a little bit about our team and what

00:00:35,399 --> 00:00:39,329
we mean to do for cloud foundry Nikki

00:00:37,890 --> 00:00:42,989
isn't gonna take us through what we've

00:00:39,329 --> 00:00:46,050
done in 2018 well then talk about the

00:00:42,989 --> 00:00:47,700
future a quick intro to the open service

00:00:46,050 --> 00:00:50,489
broke API in case that's new to anyone

00:00:47,700 --> 00:00:54,899
here and then we'll do a quick live demo

00:00:50,489 --> 00:00:57,840
which will hopefully work cool it's ok

00:00:54,899 --> 00:01:00,690
starting with our team so that is all of

00:00:57,840 --> 00:01:02,010
our wonderful faces we are based in four

00:01:00,690 --> 00:01:07,290
different countries in three different

00:01:02,010 --> 00:01:08,939
time zones in Europe we are very remote

00:01:07,290 --> 00:01:14,310
friendly team and have contributors from

00:01:08,939 --> 00:01:16,200
both pivotal and SCP and we our goal is

00:01:14,310 --> 00:01:17,939
to improve and maintain the end-to-end

00:01:16,200 --> 00:01:20,580
services user experience in cloud

00:01:17,939 --> 00:01:22,860
foundry so for those familiar with the

00:01:20,580 --> 00:01:25,140
cloud foundry CLI every time you type

00:01:22,860 --> 00:01:26,490
something like C F great service there's

00:01:25,140 --> 00:01:28,350
some CLI code that that runs through

00:01:26,490 --> 00:01:30,659
that then talks to the Cloud Controller

00:01:28,350 --> 00:01:32,880
and finally the Cloud Controller we'll

00:01:30,659 --> 00:01:35,310
go and talk to some service brokers to

00:01:32,880 --> 00:01:37,350
get them to do some things we're a bit

00:01:35,310 --> 00:01:39,210
of an we're an unusual cloud foundry

00:01:37,350 --> 00:01:41,880
team because we don't own any of the

00:01:39,210 --> 00:01:43,409
code bases in that path we contribute to

00:01:41,880 --> 00:01:45,780
all the components in that path though

00:01:43,409 --> 00:01:48,899
and try and own that experience rather

00:01:45,780 --> 00:01:51,509
than owning any code bases since we're

00:01:48,899 --> 00:01:53,369
heavily dependent on service brokers we

00:01:51,509 --> 00:01:54,990
work with the open service broker API

00:01:53,369 --> 00:01:57,329
community to help improve that

00:01:54,990 --> 00:01:59,219
specification help guide it to add some

00:01:57,329 --> 00:02:00,840
new features and then make sure those

00:01:59,219 --> 00:02:03,030
features are implemented in cloud

00:02:00,840 --> 00:02:06,500
foundry so that developers who are using

00:02:03,030 --> 00:02:06,500
the platform can get the hold of them

00:02:06,740 --> 00:02:11,550
and now Nikki's gonna talk through the

00:02:09,450 --> 00:02:14,880
last year of zappy

00:02:11,550 --> 00:02:16,560
so yeah out of a lot of things I'll have

00:02:14,880 --> 00:02:19,770
to go through the most important of them

00:02:16,560 --> 00:02:22,830
and the beer began with service instance

00:02:19,770 --> 00:02:26,520
sharing which was a very requested

00:02:22,830 --> 00:02:28,560
feature because until now imagine you

00:02:26,520 --> 00:02:30,030
have a service instance in one space and

00:02:28,560 --> 00:02:32,970
you want to consume it via no

00:02:30,030 --> 00:02:35,310
application in another space well until

00:02:32,970 --> 00:02:37,560
now the only way to do that was by

00:02:35,310 --> 00:02:39,360
creating the service key and manually

00:02:37,560 --> 00:02:42,590
importing the credentials in the

00:02:39,360 --> 00:02:46,350
applications environment or by using

00:02:42,590 --> 00:02:49,230
user provided service key service

00:02:46,350 --> 00:02:51,390
instance story and as we all know

00:02:49,230 --> 00:02:53,190
copying and pasting kardashians isn't

00:02:51,390 --> 00:02:57,150
the most convenient thing these days

00:02:53,190 --> 00:02:59,580
well now you can simply share your

00:02:57,150 --> 00:03:03,030
service from one space to another space

00:02:59,580 --> 00:03:04,620
and bind into the application there this

00:03:03,030 --> 00:03:06,660
was released at the beginning of the

00:03:04,620 --> 00:03:08,670
year is experimental and after

00:03:06,660 --> 00:03:09,240
collecting and implementing some

00:03:08,670 --> 00:03:12,690
feedback

00:03:09,240 --> 00:03:14,820
now it's GA since August and you should

00:03:12,690 --> 00:03:17,910
remember that for a service to be

00:03:14,820 --> 00:03:22,140
shareable both the platform and the

00:03:17,910 --> 00:03:24,660
broker has to enable that next thing on

00:03:22,140 --> 00:03:27,060
our list was providing developers with

00:03:24,660 --> 00:03:29,370
more visibility into the service

00:03:27,060 --> 00:03:33,120
instance and binding configurations well

00:03:29,370 --> 00:03:35,220
this is important because imagine I you

00:03:33,120 --> 00:03:38,910
have a service instance that was created

00:03:35,220 --> 00:03:42,180
somewhere in the past and now I want to

00:03:38,910 --> 00:03:45,330
update it or recreate it for some reason

00:03:42,180 --> 00:03:47,820
well I have no way of knowing if it was

00:03:45,330 --> 00:03:51,030
created with some configuration

00:03:47,820 --> 00:03:54,150
parameters and what their value was if

00:03:51,030 --> 00:03:56,459
we I want to recreate it maybe I would

00:03:54,150 --> 00:03:59,400
need to pass the same values to be

00:03:56,459 --> 00:04:01,350
consistent or something well earlier

00:03:59,400 --> 00:04:05,720
this year open service broker API

00:04:01,350 --> 00:04:08,880
introduced an endpoint on broker side

00:04:05,720 --> 00:04:12,750
where you where your platform to fetch

00:04:08,880 --> 00:04:15,420
the these parameters and this is now by

00:04:12,750 --> 00:04:18,120
now fully supported by Coventry and in

00:04:15,420 --> 00:04:20,270
the next few slides I'll show you our UI

00:04:18,120 --> 00:04:23,610
that's already taking advantage of that

00:04:20,270 --> 00:04:25,380
well this is how it was before now I

00:04:23,610 --> 00:04:28,980
have my red here

00:04:25,380 --> 00:04:31,590
and I won't update it but I don't know

00:04:28,980 --> 00:04:34,130
how to configure that instance or how it

00:04:31,590 --> 00:04:36,840
it it was configured in the past and

00:04:34,130 --> 00:04:45,000
nowadays I can see that it was created

00:04:36,840 --> 00:04:47,820
with ten notes all right going up with

00:04:45,000 --> 00:04:50,820
one of our biggest features of the year

00:04:47,820 --> 00:04:54,020
and that's asynchronous bindings and on

00:04:50,820 --> 00:04:58,740
bindings and why is that important

00:04:54,020 --> 00:05:01,110
because our platform has configured time

00:04:58,740 --> 00:05:04,130
out for operations like this which is

00:05:01,110 --> 00:05:06,720
normally between 40 and 60 seconds and

00:05:04,130 --> 00:05:09,150
if your broker happens to have a

00:05:06,720 --> 00:05:11,730
long-running operation on its bind or

00:05:09,150 --> 00:05:14,490
unbind maybe it's provisioning something

00:05:11,730 --> 00:05:16,980
or it's calling an external service it

00:05:14,490 --> 00:05:21,990
might not finish the request in time so

00:05:16,980 --> 00:05:25,500
the binding would fail and now the

00:05:21,990 --> 00:05:29,000
broker could simply support asynchronous

00:05:25,500 --> 00:05:31,620
binds this is also our first step

00:05:29,000 --> 00:05:34,170
towards supporting Google's cloud

00:05:31,620 --> 00:05:38,700
services on Cloud Foundry since their

00:05:34,170 --> 00:05:40,590
broker is async only but we need there

00:05:38,700 --> 00:05:45,000
was more work needed to be done in order

00:05:40,590 --> 00:05:48,810
to support Google services since the

00:05:45,000 --> 00:05:51,900
Google Cloud the Google platform service

00:05:48,810 --> 00:05:55,020
broker supports only special type of

00:05:51,900 --> 00:05:56,490
authentication and quad foundry talks to

00:05:55,020 --> 00:06:00,480
brokers only in basic Al's

00:05:56,490 --> 00:06:04,560
so we basically developed a proxy broker

00:06:00,480 --> 00:06:08,780
application which talks to the platform

00:06:04,560 --> 00:06:11,670
in basic health and to the broker in all

00:06:08,780 --> 00:06:13,110
well with it you can take your ops can

00:06:11,670 --> 00:06:15,630
take advantage of all the Google's

00:06:13,110 --> 00:06:18,330
services including spanner and now

00:06:15,630 --> 00:06:23,070
availing you with Matt to talk more

00:06:18,330 --> 00:06:25,170
about the future thanks Nikki okay so

00:06:23,070 --> 00:06:27,330
the future is basically the roadmap for

00:06:25,170 --> 00:06:29,760
the services API project which is

00:06:27,330 --> 00:06:31,470
obviously subject to change and if you

00:06:29,760 --> 00:06:33,180
have feedback on it or want to change it

00:06:31,470 --> 00:06:35,540
then we'll give you some links at the

00:06:33,180 --> 00:06:37,470
end as how you can get in touch with us

00:06:35,540 --> 00:06:38,560
so the feature we're currently working

00:06:37,470 --> 00:06:41,800
on

00:06:38,560 --> 00:06:43,780
is called multi-service registration in

00:06:41,800 --> 00:06:45,790
reality this means we are allowing the

00:06:43,780 --> 00:06:50,110
same service name to be registered twice

00:06:45,790 --> 00:06:51,210
in the Cloud Foundry marketplace we're

00:06:50,110 --> 00:06:53,889
doing that for a couple of reasons

00:06:51,210 --> 00:06:55,570
firstly as you can imagine there are

00:06:53,889 --> 00:06:58,210
many service providers out there wanting

00:06:55,570 --> 00:07:00,610
to build things like my sequel now up

00:06:58,210 --> 00:07:02,710
until now if an organization want to do

00:07:00,610 --> 00:07:04,419
or a Cloud Foundry user wanted to use

00:07:02,710 --> 00:07:06,550
two different my sequels from two

00:07:04,419 --> 00:07:07,990
different providers the first time the

00:07:06,550 --> 00:07:09,820
Cloud Foundry admin tried to register

00:07:07,990 --> 00:07:11,139
the my sequel Broker it would succeed

00:07:09,820 --> 00:07:15,370
and the second time it would fail

00:07:11,139 --> 00:07:17,290
because those names would conflict what

00:07:15,370 --> 00:07:19,479
we're allowing is for that name conflict

00:07:17,290 --> 00:07:20,979
to not happen and then the marketplace

00:07:19,479 --> 00:07:23,470
can have two different my sequels but

00:07:20,979 --> 00:07:24,520
we'll also see that the providers or in

00:07:23,470 --> 00:07:26,590
other words the brokers that those

00:07:24,520 --> 00:07:28,210
services are coming from so when

00:07:26,590 --> 00:07:30,310
developers do something like CF crate

00:07:28,210 --> 00:07:31,510
service my sequel instance they'd be

00:07:30,310 --> 00:07:33,669
able to choose from two different

00:07:31,510 --> 00:07:36,610
companies or organizations where they

00:07:33,669 --> 00:07:37,600
want to get that my sequel from the

00:07:36,610 --> 00:07:39,340
other reason it's important is because

00:07:37,600 --> 00:07:41,860
now this allows you to register the same

00:07:39,340 --> 00:07:43,510
service broker twice so that sounds

00:07:41,860 --> 00:07:45,250
quite funny however we do allow these

00:07:43,510 --> 00:07:47,140
things called space go brokers we're

00:07:45,250 --> 00:07:48,550
development teams whether any admin

00:07:47,140 --> 00:07:50,560
rights can go and register a service

00:07:48,550 --> 00:07:51,910
broker into the marketplace just for

00:07:50,560 --> 00:07:56,289
their specific space that they operate

00:07:51,910 --> 00:07:58,060
in we're seeing a kind of trend in the

00:07:56,289 --> 00:08:00,430
industry right now towards these kind of

00:07:58,060 --> 00:08:03,100
hosted or managed service brokers so

00:08:00,430 --> 00:08:05,110
examples include Amazon's AWS service

00:08:03,100 --> 00:08:06,669
broker the Google Cloud broker Nikki

00:08:05,110 --> 00:08:09,160
talked about and the Microsoft Azure

00:08:06,669 --> 00:08:11,139
service broker and typically these are

00:08:09,160 --> 00:08:12,700
used or when you raise to these you want

00:08:11,139 --> 00:08:14,410
to provide some authentication and

00:08:12,700 --> 00:08:16,840
typically that's done through something

00:08:14,410 --> 00:08:18,430
like a service key which is relevant to

00:08:16,840 --> 00:08:20,770
your development team or even that

00:08:18,430 --> 00:08:24,190
individual developer for various reasons

00:08:20,770 --> 00:08:25,600
like auditing and billing by allowing

00:08:24,190 --> 00:08:27,639
developers to register the same broker

00:08:25,600 --> 00:08:29,590
twice you can imagine a scenario where

00:08:27,639 --> 00:08:31,510
two different development teams in

00:08:29,590 --> 00:08:33,190
different spaces both want to consume

00:08:31,510 --> 00:08:35,200
spanner through the Google cloud broker

00:08:33,190 --> 00:08:36,969
but they have different service keys to

00:08:35,200 --> 00:08:41,130
access spanner and now they can both

00:08:36,969 --> 00:08:41,130
register it with their own credentials

00:08:42,089 --> 00:08:47,830
next up is improving platform to service

00:08:45,010 --> 00:08:50,620
broker security so today when you

00:08:47,830 --> 00:08:52,150
register a service broker only basic

00:08:50,620 --> 00:08:53,500
auth is supported so

00:08:52,150 --> 00:08:56,500
the admin doing that registration

00:08:53,500 --> 00:08:58,060
provides a username and password we want

00:08:56,500 --> 00:08:59,860
to improve that not only to provide

00:08:58,060 --> 00:09:02,550
better security between the platform and

00:08:59,860 --> 00:09:05,350
service brokers but also we want to give

00:09:02,550 --> 00:09:06,550
fine-grained access control to those to

00:09:05,350 --> 00:09:09,430
the resources you can get through a

00:09:06,550 --> 00:09:11,440
broker so up until now if you can see

00:09:09,430 --> 00:09:13,480
that a service like my sequel in the

00:09:11,440 --> 00:09:15,820
marketplace then as a developer I can do

00:09:13,480 --> 00:09:18,190
everything from provisioning it updating

00:09:15,820 --> 00:09:21,160
it deleting it getting access to it and

00:09:18,190 --> 00:09:22,870
revoking my own access to it we're

00:09:21,160 --> 00:09:24,760
seeing a demand for more fine-grained

00:09:22,870 --> 00:09:26,650
controls by different developers or even

00:09:24,760 --> 00:09:28,330
different teams might want to provision

00:09:26,650 --> 00:09:29,589
it or update it but then someone else is

00:09:28,330 --> 00:09:31,450
actually getting access to it because

00:09:29,589 --> 00:09:38,380
they're responsible for deploying our

00:09:31,450 --> 00:09:40,660
workload on Cloud Foundry next up and a

00:09:38,380 --> 00:09:44,100
pretty meaty one is called generic

00:09:40,660 --> 00:09:46,570
extensions also called generic actions

00:09:44,100 --> 00:09:48,940
this is an extension mechanism for

00:09:46,570 --> 00:09:51,100
service brokers to define a list of

00:09:48,940 --> 00:09:52,630
custom actions you can perform on the

00:09:51,100 --> 00:09:56,800
instances that have been provisioned

00:09:52,630 --> 00:09:59,140
through that broker the most common use

00:09:56,800 --> 00:10:00,610
case we hear for this is customers

00:09:59,140 --> 00:10:02,709
wanting to do things like backup and

00:10:00,610 --> 00:10:04,330
restore their service instances

00:10:02,709 --> 00:10:07,300
especially in the case of things like

00:10:04,330 --> 00:10:09,850
databases the problem is that backup for

00:10:07,300 --> 00:10:11,650
a service like my sequel looks very

00:10:09,850 --> 00:10:14,410
different to a backup for a service like

00:10:11,650 --> 00:10:15,400
Redis and even if we just take my sequel

00:10:14,410 --> 00:10:17,770
there are many different types of

00:10:15,400 --> 00:10:20,890
backups you can do and there's no kind

00:10:17,770 --> 00:10:22,750
of uniformity in terms of the parameters

00:10:20,890 --> 00:10:23,529
that you have to provide the destination

00:10:22,750 --> 00:10:26,740
as to where that backup

00:10:23,529 --> 00:10:28,660
artifact is going what this mechanism

00:10:26,740 --> 00:10:30,610
does is allow service brokers to

00:10:28,660 --> 00:10:32,560
programmatically define a list of

00:10:30,610 --> 00:10:35,470
actions that you can perform on any

00:10:32,560 --> 00:10:37,180
instance that they provision so we might

00:10:35,470 --> 00:10:38,830
see things like backup and restore we

00:10:37,180 --> 00:10:41,230
might also see things like start and

00:10:38,830 --> 00:10:43,990
stop or even some completely custom

00:10:41,230 --> 00:10:48,430
action like changing the leader node in

00:10:43,990 --> 00:10:51,250
a my sequel cluster the other exciting

00:10:48,430 --> 00:10:53,440
thing this allows is since it since the

00:10:51,250 --> 00:10:55,300
the way them this proposal is written in

00:10:53,440 --> 00:10:56,980
the open service burke api is that

00:10:55,300 --> 00:10:59,709
allows commonly used standards to be

00:10:56,980 --> 00:11:03,070
defined as actions so let's say we had a

00:10:59,709 --> 00:11:05,560
standards such as a Prometheus metric

00:11:03,070 --> 00:11:06,040
collection standard a platform I Cloud

00:11:05,560 --> 00:11:07,779
Foundry

00:11:06,040 --> 00:11:09,579
automatically look at all the instances

00:11:07,779 --> 00:11:11,800
that is provisioned see all the ones

00:11:09,579 --> 00:11:13,240
that support our standard collect them

00:11:11,800 --> 00:11:15,040
all up and aggregate them and then stick

00:11:13,240 --> 00:11:17,860
it into one kind of profiler dashboard

00:11:15,040 --> 00:11:19,540
that would allow kind of these service

00:11:17,860 --> 00:11:21,850
operators all the people are responsible

00:11:19,540 --> 00:11:22,959
for managing instances to have one place

00:11:21,850 --> 00:11:24,550
where they can see they're kind of the

00:11:22,959 --> 00:11:26,139
health or the metrics of all of the

00:11:24,550 --> 00:11:28,240
instances that have been deployed from

00:11:26,139 --> 00:11:34,440
any broker in any number of their cloud

00:11:28,240 --> 00:11:37,240
boundaries and I think last up is

00:11:34,440 --> 00:11:39,970
automating network configuration for

00:11:37,240 --> 00:11:43,410
service bindings so for those more

00:11:39,970 --> 00:11:45,819
familiar with CF today when you bind a

00:11:43,410 --> 00:11:48,579
one your applications to a service

00:11:45,819 --> 00:11:50,230
instance typically that binding that you

00:11:48,579 --> 00:11:54,220
get back from the broker contains things

00:11:50,230 --> 00:11:56,170
like credentials and IP address there

00:11:54,220 --> 00:11:58,660
may be some other metadata there are

00:11:56,170 --> 00:11:59,920
other types of bindings available volley

00:11:58,660 --> 00:12:01,240
mounts is one example where you can

00:11:59,920 --> 00:12:03,579
mount a remote volume into your

00:12:01,240 --> 00:12:04,839
container but almost all all the

00:12:03,579 --> 00:12:06,550
different types of bindings that exist

00:12:04,839 --> 00:12:08,709
have one thing in common which is your

00:12:06,550 --> 00:12:10,839
application which is hopefully some 12

00:12:08,709 --> 00:12:12,940
factor app it needs to talk to a third

00:12:10,839 --> 00:12:14,800
like an external bucking service which

00:12:12,940 --> 00:12:16,269
may or not or may or may not be running

00:12:14,800 --> 00:12:19,990
on the same infrastructure as your

00:12:16,269 --> 00:12:22,660
application for bindings that return IP

00:12:19,990 --> 00:12:24,069
addresses what this requires today is

00:12:22,660 --> 00:12:26,440
for an admin to go and change the

00:12:24,069 --> 00:12:28,720
application security group or ASG in

00:12:26,440 --> 00:12:31,029
that space so that year that allows the

00:12:28,720 --> 00:12:34,180
container or the application to talk to

00:12:31,029 --> 00:12:35,829
that third party service what we'd like

00:12:34,180 --> 00:12:38,290
to do is one have that happen

00:12:35,829 --> 00:12:40,990
automatically so if the platform trusts

00:12:38,290 --> 00:12:43,029
our broker then when it gets back a well

00:12:40,990 --> 00:12:45,100
structured binding it can automatically

00:12:43,029 --> 00:12:47,350
open there wasn't that those networking

00:12:45,100 --> 00:12:49,660
IP addresses or ports to ensure the

00:12:47,350 --> 00:12:51,160
communication can happen and secondly

00:12:49,660 --> 00:12:54,490
we'd like to support DNS names in those

00:12:51,160 --> 00:12:56,620
bindings IP addresses can change if we

00:12:54,490 --> 00:12:58,480
use DNS names then those bindings will

00:12:56,620 --> 00:13:02,610
be kind of much safer and we won't have

00:12:58,480 --> 00:13:02,610
to be kind of recreated intermittently

00:13:03,300 --> 00:13:09,399
all right okay so by now we heard about

00:13:06,610 --> 00:13:12,160
open service broker API a lot but what

00:13:09,399 --> 00:13:14,889
is it exactly and it's the community's

00:13:12,160 --> 00:13:17,139
attempt to make broker to a platform or

00:13:14,889 --> 00:13:19,810
platform to broker communication generic

00:13:17,139 --> 00:13:21,700
so that when you develop

00:13:19,810 --> 00:13:23,380
service broker you can deploy it on all

00:13:21,700 --> 00:13:26,710
platforms and user services everywhere

00:13:23,380 --> 00:13:30,550
and Matt as part of the was Buffy

00:13:26,710 --> 00:13:33,790
working group will tell you more yes sir

00:13:30,550 --> 00:13:36,960
as Nikki described the specification is

00:13:33,790 --> 00:13:40,240
the kind of separation point between

00:13:36,960 --> 00:13:42,510
platform bosses so people like our team

00:13:40,240 --> 00:13:46,000
and people working on kubernetes and

00:13:42,510 --> 00:13:48,720
service providing authors people are

00:13:46,000 --> 00:13:51,100
writing things like my sequel and Redis

00:13:48,720 --> 00:13:53,050
what we the I'd kind of the goal of the

00:13:51,100 --> 00:13:55,750
project is to allow any service provider

00:13:53,050 --> 00:13:57,190
to write their service once not worry

00:13:55,750 --> 00:13:59,410
about which platform is going to consume

00:13:57,190 --> 00:14:01,839
it and then by using the open service

00:13:59,410 --> 00:14:03,610
broke API kubernetes and Cloud Foundry

00:14:01,839 --> 00:14:05,970
and hopefully more platforms in the

00:14:03,610 --> 00:14:09,339
future can all make use of that service

00:14:05,970 --> 00:14:11,500
it's very simple a simple service broker

00:14:09,339 --> 00:14:13,839
contains five endpoints one for fetching

00:14:11,500 --> 00:14:15,640
the catalog of the service so saying hey

00:14:13,839 --> 00:14:17,760
which services and plans do you offer

00:14:15,640 --> 00:14:20,110
where plans are typically t-shirt sizes

00:14:17,760 --> 00:14:20,860
two endpoints for provisioning and

00:14:20,110 --> 00:14:23,200
de-provisioning

00:14:20,860 --> 00:14:25,720
a service instance sometimes we see

00:14:23,200 --> 00:14:27,850
provisioning used by service broker

00:14:25,720 --> 00:14:29,740
authors to spin up a new VM running some

00:14:27,850 --> 00:14:32,110
software sometimes it's just cutting a

00:14:29,740 --> 00:14:33,610
slice of an existing VM and sometimes it

00:14:32,110 --> 00:14:35,470
can be nothing at all it's just an

00:14:33,610 --> 00:14:39,190
abstraction we provide in order to try

00:14:35,470 --> 00:14:42,130
and make any any backing service work

00:14:39,190 --> 00:14:43,390
with any application and the final two

00:14:42,130 --> 00:14:46,120
endpoints are binding and unbinding

00:14:43,390 --> 00:14:48,100
which really translate to give this

00:14:46,120 --> 00:14:49,720
application or container access to the

00:14:48,100 --> 00:14:54,100
service instance and then revoke that

00:14:49,720 --> 00:14:56,230
access all of the features we've spoken

00:14:54,100 --> 00:14:58,810
about today other than services and

00:14:56,230 --> 00:15:01,330
sharing feature have required support in

00:14:58,810 --> 00:15:02,740
both cloud foundry and kubernetes our

00:15:01,330 --> 00:15:04,300
team is responsible for adding support

00:15:02,740 --> 00:15:06,070
to the cloud controller for cloud

00:15:04,300 --> 00:15:07,270
foundry and there's a service catalog

00:15:06,070 --> 00:15:12,220
project which has implemented those

00:15:07,270 --> 00:15:14,110
features in kubernetes okay and now it's

00:15:12,220 --> 00:15:16,180
time for the for the demo

00:15:14,110 --> 00:15:18,279
to help you make a little bit more sense

00:15:16,180 --> 00:15:20,410
of it we have two slides just explaining

00:15:18,279 --> 00:15:22,000
what's going to happen so this is a

00:15:20,410 --> 00:15:24,970
world some of you may be familiar with

00:15:22,000 --> 00:15:27,070
where Jane's got this awesome service

00:15:24,970 --> 00:15:30,100
she's called my service because that's a

00:15:27,070 --> 00:15:31,660
sensible name and John has heard about

00:15:30,100 --> 00:15:33,670
my service and thinks it's awesome and

00:15:31,660 --> 00:15:36,130
wants to bind his application to it

00:15:33,670 --> 00:15:38,170
however when he has trained for that

00:15:36,130 --> 00:15:40,300
Jane says well I can email you over some

00:15:38,170 --> 00:15:41,830
credentials by using a service key but

00:15:40,300 --> 00:15:43,090
security to her security team is gonna

00:15:41,830 --> 00:15:46,510
be pretty cross with her if she does

00:15:43,090 --> 00:15:49,180
that what this feature allows Jane to do

00:15:46,510 --> 00:15:50,920
is type CF share service specifying the

00:15:49,180 --> 00:15:53,440
name of the organ space she wants that

00:15:50,920 --> 00:15:56,080
service to be shared into and then John

00:15:53,440 --> 00:15:58,600
can simply do CF bind service and give

00:15:56,080 --> 00:16:00,190
his application access and at this Cloud

00:15:58,600 --> 00:16:02,650
Foundry set up was using something like

00:16:00,190 --> 00:16:05,140
crud hub then neither Jane or John would

00:16:02,650 --> 00:16:06,730
ever have to see those credentials so

00:16:05,140 --> 00:16:08,770
this is a very secure way of getting

00:16:06,730 --> 00:16:10,960
applications access to but the backing

00:16:08,770 --> 00:16:12,640
services they need with no copy pasting

00:16:10,960 --> 00:16:14,440
of credentials and no one kind of

00:16:12,640 --> 00:16:19,030
looking at logs or running CFM and

00:16:14,440 --> 00:16:25,210
trying to get access all right terminal

00:16:19,030 --> 00:16:28,930
time all right

00:16:25,210 --> 00:16:30,490
just a quick note up front we've

00:16:28,930 --> 00:16:34,140
deployed all the applications we're

00:16:30,490 --> 00:16:37,750
gonna use for time-saving reasons and

00:16:34,140 --> 00:16:40,150
first we need to register our broker in

00:16:37,750 --> 00:16:46,510
order to have a service in our

00:16:40,150 --> 00:16:50,050
marketplace let's begin with that if I'm

00:16:46,510 --> 00:16:54,190
typing too fast you can you can just

00:16:50,050 --> 00:16:56,710
ping me and if you need to have a look

00:16:54,190 --> 00:17:00,070
at some command more specifically you

00:16:56,710 --> 00:17:03,880
can just ask me okay we have to enable

00:17:00,070 --> 00:17:08,290
our service towards the whole country

00:17:03,880 --> 00:17:11,230
and if we check our marketplace we now

00:17:08,290 --> 00:17:14,530
have a service in order to share it like

00:17:11,230 --> 00:17:18,300
I said the platform has to allow that so

00:17:14,530 --> 00:17:23,260
it's a feature flag as we can see it's

00:17:18,300 --> 00:17:28,240
disabled by default we can simply enable

00:17:23,260 --> 00:17:31,120
it because we Rodney's and ok we can

00:17:28,240 --> 00:17:32,800
begin we have two spaces one is source

00:17:31,120 --> 00:17:35,410
we're gonna create the service there

00:17:32,800 --> 00:17:38,410
bind it to an application see that it

00:17:35,410 --> 00:17:41,500
works and then share it to a space

00:17:38,410 --> 00:17:43,990
called target I see that the service

00:17:41,500 --> 00:17:50,240
works there also

00:17:43,990 --> 00:17:52,640
so we're creating the service now and if

00:17:50,240 --> 00:17:55,820
we check the service we see that the

00:17:52,640 --> 00:17:58,659
service his name is my service and the

00:17:55,820 --> 00:18:02,740
service is of type overview service

00:17:58,659 --> 00:18:02,740
explain this simple plan

00:18:03,909 --> 00:18:10,669
now binding it to our application we'll

00:18:07,220 --> 00:18:14,149
have to restart it for the binding to

00:18:10,669 --> 00:18:16,659
take place this happens because the way

00:18:14,149 --> 00:18:19,970
bindings working quad foundry is as

00:18:16,659 --> 00:18:27,980
environment variables and our

00:18:19,970 --> 00:18:31,580
application will have to read it after

00:18:27,980 --> 00:18:35,590
that I'm going to show you the

00:18:31,580 --> 00:18:42,470
applications dart board which actually

00:18:35,590 --> 00:18:44,480
shows what binding it has opening it now

00:18:42,470 --> 00:18:47,899
we can look through the dart board we

00:18:44,480 --> 00:18:49,760
have the application name and we have

00:18:47,899 --> 00:18:51,679
the space where the application is

00:18:49,760 --> 00:18:54,320
located we see it since our space and we

00:18:51,679 --> 00:18:56,870
have the service bound with the services

00:18:54,320 --> 00:18:59,809
of type overview broker and the services

00:18:56,870 --> 00:19:03,399
name is my service we can also see the

00:18:59,809 --> 00:19:06,380
plan I am going back to the terminal I

00:19:03,399 --> 00:19:10,730
would want to share my service into the

00:19:06,380 --> 00:19:15,289
target space as I said earlier now if I

00:19:10,730 --> 00:19:20,120
look at the service I can see that it's

00:19:15,289 --> 00:19:24,830
being shared to org development space

00:19:20,120 --> 00:19:29,210
target and it has zero bindings there so

00:19:24,830 --> 00:19:31,940
now we can go to our target space and if

00:19:29,210 --> 00:19:35,990
you check the services we see the the

00:19:31,940 --> 00:19:40,399
service is now here it's the same

00:19:35,990 --> 00:19:42,830
service of type my service is the ok the

00:19:40,399 --> 00:19:47,270
name is my service the service type is

00:19:42,830 --> 00:19:52,279
our users and if we look at the service

00:19:47,270 --> 00:19:55,460
itself we see that it's shared from the

00:19:52,279 --> 00:19:57,560
wrote montork and source space

00:19:55,460 --> 00:20:03,410
now let's bind it to the same

00:19:57,560 --> 00:20:05,870
application and we'll have to over start

00:20:03,410 --> 00:20:13,010
application but one more awkward minute

00:20:05,870 --> 00:20:15,230
movie see the diverse and hopefully

00:20:13,010 --> 00:20:17,860
we'll see the same binding but to our

00:20:15,230 --> 00:20:17,860
new application

00:20:32,520 --> 00:20:42,670
awesome okay now we see our target

00:20:40,240 --> 00:20:45,670
applications dartboard we see that the

00:20:42,670 --> 00:20:48,550
application is called target up in space

00:20:45,670 --> 00:20:57,700
target but we have the same service

00:20:48,550 --> 00:21:01,990
bound to it how cool is that now going

00:20:57,700 --> 00:21:05,800
back to the source space if we check the

00:21:01,990 --> 00:21:07,600
service we see that it's shared in the

00:21:05,800 --> 00:21:10,660
target space and it has one binding

00:21:07,600 --> 00:21:12,250
there now because we're bad people we're

00:21:10,660 --> 00:21:17,980
just going to share the service and that

00:21:12,250 --> 00:21:20,590
would delete the binding and I think

00:21:17,980 --> 00:21:33,610
that was our demo and it works we can

00:21:20,590 --> 00:21:36,880
the provision thank you very much okay

00:21:33,610 --> 00:21:38,080
so as I mentioned earlier feedback on

00:21:36,880 --> 00:21:40,270
that roadmap and things would be

00:21:38,080 --> 00:21:42,520
appreciated so how can people get in

00:21:40,270 --> 00:21:45,120
touch with this RP team yeah we're very

00:21:42,520 --> 00:21:49,210
open to feedback and feature requests

00:21:45,120 --> 00:21:51,220
you can get in touch via the select our

00:21:49,210 --> 00:21:53,710
slug channel on the cloud foundry slug

00:21:51,220 --> 00:21:57,340
hash tags happy or by the email you see

00:21:53,710 --> 00:21:58,960
on your screen and it's also the that's

00:21:57,340 --> 00:22:01,240
the open service broker API logo down

00:21:58,960 --> 00:22:03,160
there we're looking for feedback from

00:22:01,240 --> 00:22:05,230
both platform authors so if you work on

00:22:03,160 --> 00:22:07,330
CF or kubernetes and also service broker

00:22:05,230 --> 00:22:10,150
authors even if you're looking to kind

00:22:07,330 --> 00:22:11,860
of offer out a service you own or

00:22:10,150 --> 00:22:13,510
running your own company to the other

00:22:11,860 --> 00:22:15,280
development teams in your company the

00:22:13,510 --> 00:22:17,320
open service broke API can be a really

00:22:15,280 --> 00:22:19,000
nice obstruction to let you do that and

00:22:17,320 --> 00:22:21,790
really run your your service as a

00:22:19,000 --> 00:22:24,760
product there's a 10-minute slot at the

00:22:21,790 --> 00:22:25,930
start of every weekly call where we ask

00:22:24,760 --> 00:22:28,960
for new faces to introduce themselves

00:22:25,930 --> 00:22:30,460
and listen to your community like we

00:22:28,960 --> 00:22:31,660
call a community interests you can bring

00:22:30,460 --> 00:22:34,900
any problem you're having or any

00:22:31,660 --> 00:22:37,450
question to the group that said 5:30

00:22:34,900 --> 00:22:39,510
p.m. in this time zone and you can all

00:22:37,450 --> 00:22:42,700
work out based on where you're from and

00:22:39,510 --> 00:22:44,740
I think that's it and we have six

00:22:42,700 --> 00:22:45,430
minutes for any questions or there is

00:22:44,740 --> 00:22:47,560
beer

00:22:45,430 --> 00:22:50,410
that's not all we'd also love to see you

00:22:47,560 --> 00:22:51,850
at our other presentations or the

00:22:50,410 --> 00:22:54,460
hands-on lab that's tomorrow

00:22:51,850 --> 00:22:56,350
at 2:10 where you can get your hands

00:22:54,460 --> 00:22:59,800
dirty with quad foundry and kubernetes

00:22:56,350 --> 00:23:03,220
and see how of a service broker API

00:22:59,800 --> 00:23:05,860
works in real life and also with the

00:23:03,220 --> 00:23:18,400
project hours tomorrow again tomorrow at

00:23:05,860 --> 00:23:20,200
11:55 questions thanks I really loved it

00:23:18,400 --> 00:23:23,200
the new feature that you can share

00:23:20,200 --> 00:23:26,530
service instance but what about when I

00:23:23,200 --> 00:23:29,140
share it with the space target and that

00:23:26,530 --> 00:23:33,640
developer in space target would like to

00:23:29,140 --> 00:23:34,960
delete the service yes sir as you can

00:23:33,640 --> 00:23:36,460
imagine this was a common source of

00:23:34,960 --> 00:23:38,350
feedback when we were trying to kind of

00:23:36,460 --> 00:23:42,220
originally solicit some feedback on this

00:23:38,350 --> 00:23:45,490
subject the approach you've ended up on

00:23:42,220 --> 00:23:46,960
is having a service appear and like CF

00:23:45,490 --> 00:23:49,090
services if you're not binding in the

00:23:46,960 --> 00:23:51,850
apps - it is kind of it's not too

00:23:49,090 --> 00:23:53,710
harmful it's a little bit cluttery but

00:23:51,850 --> 00:23:56,050
hopefully as nice humans you could like

00:23:53,710 --> 00:23:57,280
run CF service in order to find out who

00:23:56,050 --> 00:23:59,230
shared it with you or at least which

00:23:57,280 --> 00:24:01,000
organ space it came from right and then

00:23:59,230 --> 00:24:01,510
reach out and be like hey we don't need

00:24:01,000 --> 00:24:03,370
this anymore

00:24:01,510 --> 00:24:06,370
do you mind on sharing it help us clear

00:24:03,370 --> 00:24:10,000
out the alternative would be allow them

00:24:06,370 --> 00:24:11,410
to delete it from their space what we

00:24:10,000 --> 00:24:12,700
really what the thing we found when I'm

00:24:11,410 --> 00:24:14,260
kind of asking for feedback on how to

00:24:12,700 --> 00:24:16,750
build this feature is kind of what

00:24:14,260 --> 00:24:18,130
controls do we leave in the in the hands

00:24:16,750 --> 00:24:20,380
of the person who created that instance

00:24:18,130 --> 00:24:22,930
in the first place so the things we

00:24:20,380 --> 00:24:24,400
didn't show today was only developers in

00:24:22,930 --> 00:24:26,800
that store space can do things like CF

00:24:24,400 --> 00:24:28,930
update service and there's Nikki showed

00:24:26,800 --> 00:24:30,220
at the end when they did cf unsure if

00:24:28,930 --> 00:24:31,930
you don't use the force for like a big

00:24:30,220 --> 00:24:33,400
warning comes across the screen saying

00:24:31,930 --> 00:24:34,570
if you do this then you're probably

00:24:33,400 --> 00:24:35,440
going to break someone's up and

00:24:34,570 --> 00:24:37,990
someone's gonna shout at you pretty

00:24:35,440 --> 00:24:39,850
loudly but we've done that in order to

00:24:37,990 --> 00:24:42,250
leave as much control to the person who

00:24:39,850 --> 00:24:43,420
created the instance cuz in like in real

00:24:42,250 --> 00:24:44,830
life they're probably the person paying

00:24:43,420 --> 00:24:46,680
for the underlying infrastructure and

00:24:44,830 --> 00:24:49,750
the person responsible for managing it

00:24:46,680 --> 00:24:51,490
as a if I received on the target space

00:24:49,750 --> 00:24:52,720
if I had access to that source space I

00:24:51,490 --> 00:24:54,820
could go in and share it so I could

00:24:52,720 --> 00:24:57,820
clean up myself if not though the only

00:24:54,820 --> 00:25:02,080
things I can do is bind and unbind to it

00:24:57,820 --> 00:25:06,770
thanks but it's good feedback yeah

00:25:02,080 --> 00:25:12,920
any more questions there is a question

00:25:06,770 --> 00:25:15,230
over here so you just said the service

00:25:12,920 --> 00:25:18,200
broker API works for post clamp on J and

00:25:15,230 --> 00:25:21,410
Coburn ethics now they are its functions

00:25:18,200 --> 00:25:23,120
so do you see a user case for the

00:25:21,410 --> 00:25:26,780
functioning that event-driven functions

00:25:23,120 --> 00:25:29,270
to use the API to for the remote

00:25:26,780 --> 00:25:31,700
services so it is like a function

00:25:29,270 --> 00:25:35,270
service to integrate with these yeah so

00:25:31,700 --> 00:25:37,640
there is work being done there by

00:25:35,270 --> 00:25:38,750
pivotal and I think we spend by the

00:25:37,640 --> 00:25:39,920
solar mushroom s if you're looking at

00:25:38,750 --> 00:25:41,720
this Googler definitely looking at this

00:25:39,920 --> 00:25:44,720
so when you kind of when you run up that

00:25:41,720 --> 00:25:46,670
function you can declare in a manifest a

00:25:44,720 --> 00:25:48,500
broker lives here and here's a service

00:25:46,670 --> 00:25:49,940
and plan and actually when I when my

00:25:48,500 --> 00:25:52,700
function runs I need to go and provision

00:25:49,940 --> 00:25:54,440
that thing and somehow use it right you

00:25:52,700 --> 00:25:55,760
can mention like some other demo this

00:25:54,440 --> 00:25:57,350
morning if it was some text-to-voice

00:25:55,760 --> 00:26:00,520
converter you can imagine a function

00:25:57,350 --> 00:26:03,020
that wants to make use of that because

00:26:00,520 --> 00:26:04,430
typically when Leeson what we've seen

00:26:03,020 --> 00:26:08,180
functions need to run pretty quickly and

00:26:04,430 --> 00:26:11,450
then spin down service broker is today

00:26:08,180 --> 00:26:13,490
at least optimized for like creating new

00:26:11,450 --> 00:26:15,020
resources and then they hang around for

00:26:13,490 --> 00:26:17,000
a long time and you bind and unbind to

00:26:15,020 --> 00:26:18,440
it is an interesting question with the

00:26:17,000 --> 00:26:20,240
functions thing because do you want to

00:26:18,440 --> 00:26:21,290
create a new instance right then and

00:26:20,240 --> 00:26:24,410
there or do you want to reuse an

00:26:21,290 --> 00:26:26,300
existing one it's early days I think is

00:26:24,410 --> 00:26:29,420
the answer to that it's definitely a use

00:26:26,300 --> 00:26:30,500
case we know about though I don't know

00:26:29,420 --> 00:26:32,390
where like at least a pivotal we have

00:26:30,500 --> 00:26:36,070
teams looking into how that could like

00:26:32,390 --> 00:26:36,070
what's the optimal path for that flow

00:26:39,910 --> 00:26:47,900
any more questions if not thank you very

00:26:45,140 --> 00:26:53,590
much too much and Nicolai and let's have

00:26:47,900 --> 00:26:53,590

YouTube URL: https://www.youtube.com/watch?v=UIJuJYNeG7c


