Title: Istio Birds of a Feather - Christopher Luciano, IBM & Shannon Coen, Pivotal
Publication date: 2018-10-11
Playlist: Cloud Foundry Summit Europe 2018
Description: 
	Istio Birds of a Feather - Christopher Luciano, IBM & Shannon Coen, Pivotal

This session will be an informal discussion on how software engineers and operators envision leveraging Istio/Envoy within the Cloud Foundry stack. Istio supports various service discovery adapters that are familiar to CF users including Consul and Eureka; Cloud Foundry adapters are still a work-in-progress. The goal is to poll the audience and gather feedback on how these solutions could best integrate and support Cloud Foundry environments without exposing unnecessary complexity to an end user. Istio/Envoy contributors will facilitate the discussion with a gentle Istio introduction followed by unconference style discussion with the audience.

https://cfseu18.sched.com/event/FRyc/istio-birds-of-a-feather-christopher-luciano-ibm-shannon-coen-pivotal
Captions: 
	00:00:00,030 --> 00:00:05,790
so I'm Chris I also work on these do

00:00:01,949 --> 00:00:08,099
projects success for this will really be

00:00:05,790 --> 00:00:10,230
a matter of do I open up more github

00:00:08,099 --> 00:00:12,179
issues that would be successful

00:00:10,230 --> 00:00:14,190
understanding workloads that people are

00:00:12,179 --> 00:00:17,910
trying to use this deal with and whether

00:00:14,190 --> 00:00:22,619
they are not working or working well so

00:00:17,910 --> 00:00:24,810
it's not so much Jana and I talking it's

00:00:22,619 --> 00:00:29,970
really encouraging everyone else to talk

00:00:24,810 --> 00:00:31,800
to some degree I also have a etherpad

00:00:29,970 --> 00:00:35,610
set up at that link right there

00:00:31,800 --> 00:00:36,750
IBM DUP is ford slash sto BOF if you

00:00:35,610 --> 00:00:38,190
have questions that you don't want to

00:00:36,750 --> 00:00:40,410
say out loud you could type them in

00:00:38,190 --> 00:00:43,680
there and then I will notice that that's

00:00:40,410 --> 00:00:46,530
happening and answer the questions that

00:00:43,680 --> 00:00:50,309
way so at the end of this I hope to have

00:00:46,530 --> 00:00:53,430
you know more getup issues to open or

00:00:50,309 --> 00:00:56,160
just use cases that aren't working for

00:00:53,430 --> 00:00:58,440
you and I plan to publish blog posts to

00:00:56,160 --> 00:01:02,120
kind of summarize whatever we discuss

00:00:58,440 --> 00:01:05,670
here and if we don't get any questions

00:01:02,120 --> 00:01:08,549
you know we can either have a nap or we

00:01:05,670 --> 00:01:10,770
can try to make up some questions so if

00:01:08,549 --> 00:01:16,350
anyone wants to start with something

00:01:10,770 --> 00:01:19,619
maybe a little bit CEO at all if you

00:01:16,350 --> 00:01:26,970
want to raise your hand if not another

00:01:19,619 --> 00:01:29,130
person okay so a quick overview of vicio

00:01:26,970 --> 00:01:30,720
there's a few talks Shannon gave a talk

00:01:29,130 --> 00:01:33,990
here and sharing an area and gave a talk

00:01:30,720 --> 00:01:35,340
earlier essentially what it's just

00:01:33,990 --> 00:01:38,640
trying to do is it's pushing a lot of

00:01:35,340 --> 00:01:42,390
the application things that you want to

00:01:38,640 --> 00:01:45,689
tweak out of libraries like finagle or

00:01:42,390 --> 00:01:48,000
the Netflix OSS stack into a centralized

00:01:45,689 --> 00:01:51,180
proxy that lives alongside of your

00:01:48,000 --> 00:01:53,040
application so if you're trying to reach

00:01:51,180 --> 00:01:56,869
our request from your application to

00:01:53,040 --> 00:01:59,790
another application you configure some

00:01:56,869 --> 00:02:02,759
Yambol or you talk about the am bowl set

00:01:59,790 --> 00:02:05,070
requests and then that'll get sent to

00:02:02,759 --> 00:02:08,310
the proxy and the proxy will act on your

00:02:05,070 --> 00:02:10,430
behalf to retry those things that's just

00:02:08,310 --> 00:02:13,120
one feature another one is being able to

00:02:10,430 --> 00:02:16,930
have like a son

00:02:13,120 --> 00:02:18,250
points whereby you're trying to test a

00:02:16,930 --> 00:02:20,620
certain feature out you want you only

00:02:18,250 --> 00:02:24,129
want to expose it to certain users so

00:02:20,620 --> 00:02:27,129
you're looking at a rule that is set for

00:02:24,129 --> 00:02:29,620
someone named ins Bob and whenever Bob's

00:02:27,129 --> 00:02:30,819
requests come in he's kind of launched

00:02:29,620 --> 00:02:33,370
to the new version of your application

00:02:30,819 --> 00:02:34,840
and he gets to play with that version

00:02:33,370 --> 00:02:37,950
application while everyone else goes

00:02:34,840 --> 00:02:37,950
through first part

00:03:07,170 --> 00:03:17,430
no problems yeah

00:03:12,709 --> 00:03:22,560
so one thing that's bent that's come up

00:03:17,430 --> 00:03:24,930
in several of the discussions has been

00:03:22,560 --> 00:03:27,510
around how do I get started contributing

00:03:24,930 --> 00:03:31,580
this yeah because sometimes people come

00:03:27,510 --> 00:03:31,580
in with a given feature that they like

00:03:34,069 --> 00:03:39,569
give a feature that they like and they

00:03:36,150 --> 00:03:43,080
start out either with a pull request

00:03:39,569 --> 00:03:44,970
upfront or they'll open up an issue with

00:03:43,080 --> 00:03:45,569
kind of just a general how they want to

00:03:44,970 --> 00:03:49,110
go about it

00:03:45,569 --> 00:03:52,410
yeah but it gets too detailed and either

00:03:49,110 --> 00:03:54,120
it doesn't get looked at or someone will

00:03:52,410 --> 00:03:56,640
literally say this is too detailed would

00:03:54,120 --> 00:03:59,910
be nice to have a design proposal so the

00:03:56,640 --> 00:04:02,100
the common way you know method I know

00:03:59,910 --> 00:04:06,060
Shannon has been working on is you know

00:04:02,100 --> 00:04:08,850
starting with the get up issue put a few

00:04:06,060 --> 00:04:12,120
details in there of something that you

00:04:08,850 --> 00:04:14,850
think might be broke in a change set

00:04:12,120 --> 00:04:17,519
that you would like or just general

00:04:14,850 --> 00:04:19,680
questions about the use of this you know

00:04:17,519 --> 00:04:23,280
place that on the github request and

00:04:19,680 --> 00:04:25,039
then expand it by creating a Google Doc

00:04:23,280 --> 00:04:29,039
or some other sort of shared

00:04:25,039 --> 00:04:32,280
collaboration tool to edit your design

00:04:29,039 --> 00:04:34,590
proposal and cross link that into the

00:04:32,280 --> 00:04:36,630
github issue so that you provide a lot

00:04:34,590 --> 00:04:38,610
more context and you know get up issues

00:04:36,630 --> 00:04:41,039
can sort of get a little difficult to

00:04:38,610 --> 00:04:44,039
follow thread wise so something like a

00:04:41,039 --> 00:04:48,240
Google Doc will allow you to comment on

00:04:44,039 --> 00:04:51,000
the side and close things out and then

00:04:48,240 --> 00:04:53,400
once kind of the general design and as

00:04:51,000 --> 00:04:55,560
approved you know we start working on

00:04:53,400 --> 00:04:58,080
and that github issue and then you can

00:04:55,560 --> 00:05:02,760
start with your PRS and the PRS should

00:04:58,080 --> 00:05:04,770
ideally be small just general to all

00:05:02,760 --> 00:05:07,139
open-source types of things there's a

00:05:04,770 --> 00:05:09,180
limited set of reviewers actually on

00:05:07,139 --> 00:05:10,950
this tio which it's always trying to

00:05:09,180 --> 00:05:12,600
grow but that just ends up being the

00:05:10,950 --> 00:05:15,810
case like some people have a general

00:05:12,600 --> 00:05:17,880
overview of one components and we're

00:05:15,810 --> 00:05:20,400
slowly working to get people looking at

00:05:17,880 --> 00:05:20,910
that but just immediately going with the

00:05:20,400 --> 00:05:23,490
pork

00:05:20,910 --> 00:05:25,230
is probably just not going to get the

00:05:23,490 --> 00:05:25,440
attention that you really gonna want on

00:05:25,230 --> 00:05:28,140
it

00:05:25,440 --> 00:05:33,090
until you explain more reasoning behind

00:05:28,140 --> 00:05:35,610
the progressed those here other than IBM

00:05:33,090 --> 00:05:47,460
are you willing and able or interested

00:05:35,610 --> 00:05:54,210
in contributing debt is do try I'm gonna

00:05:47,460 --> 00:05:56,940
give the mic to you I don't actually

00:05:54,210 --> 00:06:00,750
completely know the complete problem

00:05:56,940 --> 00:06:04,890
space that sto is supposed to solve I

00:06:00,750 --> 00:06:09,660
just know from talking to Nino that it's

00:06:04,890 --> 00:06:12,900
on its way to to replacing go router in

00:06:09,660 --> 00:06:15,600
Cloud Foundry or a part of it envoy and

00:06:12,900 --> 00:06:18,540
dis tio are replacing the routing layer

00:06:15,600 --> 00:06:22,820
and Cloud Foundry and for me I'm

00:06:18,540 --> 00:06:25,290
interested in knowing if that same

00:06:22,820 --> 00:06:27,810
service mission and routing layer can be

00:06:25,290 --> 00:06:29,400
used to serve applications running in

00:06:27,810 --> 00:06:30,990
Cloud Foundry and applications running

00:06:29,400 --> 00:06:32,160
in kubernetes or whether you want to

00:06:30,990 --> 00:06:33,930
have that deployed separately so that

00:06:32,160 --> 00:06:36,720
was one of the things I had and and I

00:06:33,930 --> 00:06:39,480
wouldn't mind a an overview if you have

00:06:36,720 --> 00:06:41,850
one you can share with us what the what

00:06:39,480 --> 00:06:46,230
the actual problem said that is - is

00:06:41,850 --> 00:06:48,750
supposed to solve do you want to take

00:06:46,230 --> 00:06:52,400
any of this partially you can start like

00:06:48,750 --> 00:06:54,780
the Cloud Foundry hybrid things you are

00:06:52,400 --> 00:06:57,180
so we're definitely thinking about use

00:06:54,780 --> 00:06:58,890
cases for interoperability between

00:06:57,180 --> 00:07:02,640
workloads and cloud foundry and

00:06:58,890 --> 00:07:04,680
kubernetes clusters and we imagine ISTE

00:07:02,640 --> 00:07:08,040
o playing a role in facilitating those

00:07:04,680 --> 00:07:15,919
use cases both application connectivity

00:07:08,040 --> 00:07:18,510
and and security policies the the three

00:07:15,919 --> 00:07:22,919
primary value-adds of Sto as I

00:07:18,510 --> 00:07:26,130
understand it our security traffic

00:07:22,919 --> 00:07:27,990
management and observability so the

00:07:26,130 --> 00:07:29,789
ability to apply security policies

00:07:27,990 --> 00:07:31,560
across all the services in the mesh

00:07:29,789 --> 00:07:34,350
whether those are a

00:07:31,560 --> 00:07:38,100
so on Cloud Foundry or services in

00:07:34,350 --> 00:07:40,050
kubernetes or some datastore that runs

00:07:38,100 --> 00:07:42,030
somewhere else if it's got a proxy in

00:07:40,050 --> 00:07:46,530
front of it then it can be made part of

00:07:42,030 --> 00:07:48,530
the mesh the same applies for traffic

00:07:46,530 --> 00:07:52,410
management and observability because

00:07:48,530 --> 00:07:56,550
envoy was or has been built from the

00:07:52,410 --> 00:07:58,860
ground up to provide this observability

00:07:56,550 --> 00:08:02,550
data plane it's it emits a tremendous

00:07:58,860 --> 00:08:07,470
amount of metrics and and as a result

00:08:02,550 --> 00:08:12,240
can give various personas a view of the

00:08:07,470 --> 00:08:15,150
traffic in the mesh and number of errors

00:08:12,240 --> 00:08:20,130
and number of successes and as well as

00:08:15,150 --> 00:08:22,979
the security policy what have you found

00:08:20,130 --> 00:08:28,110
so far in in starting to to integrate

00:08:22,979 --> 00:08:31,229
this with CF AR is it in a smooth thing

00:08:28,110 --> 00:08:32,430
or is it a is it are you gonna get are

00:08:31,229 --> 00:08:35,010
you anticipating big performance

00:08:32,430 --> 00:08:37,140
improvements I keep hearing rumors that

00:08:35,010 --> 00:08:38,880
that might be a thing too besides just

00:08:37,140 --> 00:08:42,510
expanded functionality do you expect

00:08:38,880 --> 00:08:44,910
other benefits yeah I'm gonna hand it to

00:08:42,510 --> 00:08:46,650
Aaron because he uh I gave a talk

00:08:44,910 --> 00:08:48,600
earlier about our experience working

00:08:46,650 --> 00:08:51,690
with the SEO community but in terms of

00:08:48,600 --> 00:08:55,200
performance we expect to see data plane

00:08:51,690 --> 00:08:57,839
improvements because on voice more

00:08:55,200 --> 00:09:00,390
performant then go router written in C++

00:08:57,839 --> 00:09:03,660
do you want to tell Troy a bit about our

00:09:00,390 --> 00:09:08,220
experience collaborating with this do

00:09:03,660 --> 00:09:10,020
community sure so I guess quick

00:09:08,220 --> 00:09:12,510
disclaimer we haven't necessarily been

00:09:10,020 --> 00:09:18,060
measuring performance as much from like

00:09:12,510 --> 00:09:21,839
a latency or throughput metric but we do

00:09:18,060 --> 00:09:24,660
expect that performance will become a

00:09:21,839 --> 00:09:27,180
focus if we ever do notice there to be

00:09:24,660 --> 00:09:30,180
issues or it doesn't live up to like go

00:09:27,180 --> 00:09:34,050
routers metrics I know that the

00:09:30,180 --> 00:09:35,130
community itself does have some metrics

00:09:34,050 --> 00:09:38,400
that they've posted I don't know

00:09:35,130 --> 00:09:41,160
necessarily what they are off the top of

00:09:38,400 --> 00:09:42,880
my head but if you were to probably dive

00:09:41,160 --> 00:09:45,519
through some of the

00:09:42,880 --> 00:09:47,649
you did a email list or the like

00:09:45,519 --> 00:09:50,709
performance work working group you might

00:09:47,649 --> 00:09:53,050
be able to get some of those numbers but

00:09:50,709 --> 00:09:57,459
we yeah we expect for the most part that

00:09:53,050 --> 00:09:58,959
it will be comparable yeah and I think

00:09:57,459 --> 00:10:00,819
in your session before he had mentioned

00:09:58,959 --> 00:10:04,709
that at least the community version

00:10:00,819 --> 00:10:09,430
they're testing with about 10k

00:10:04,709 --> 00:10:10,930
containers at the moment I was just

00:10:09,430 --> 00:10:16,000
looking around for Sonia from the

00:10:10,930 --> 00:10:19,300
performance working group here but there

00:10:16,000 --> 00:10:21,279
is a there is a dedicated working group

00:10:19,300 --> 00:10:23,410
within sto focused on performance and

00:10:21,279 --> 00:10:26,470
scaling and they have a call you can

00:10:23,410 --> 00:10:29,019
join every week and they publish results

00:10:26,470 --> 00:10:30,850
and it's a collaboration with multiple

00:10:29,019 --> 00:10:33,250
companies who are building out the

00:10:30,850 --> 00:10:35,680
testing framework and adding things that

00:10:33,250 --> 00:10:40,269
they measure and identifying bottlenecks

00:10:35,680 --> 00:10:42,250
and prioritizing improvements yeah and

00:10:40,269 --> 00:10:43,240
then performance on that on that side as

00:10:42,250 --> 00:10:45,730
well

00:10:43,240 --> 00:10:47,980
one of the reasons why envoy itself you

00:10:45,730 --> 00:10:51,430
know a component of sto doesn't publish

00:10:47,980 --> 00:10:52,990
its performance metrics is because one

00:10:51,430 --> 00:10:58,300
that is the performance isn't their

00:10:52,990 --> 00:11:00,600
first target audience and two when you

00:10:58,300 --> 00:11:03,339
start to use a lot of the advanced

00:11:00,600 --> 00:11:06,670
traffic shaping and network features of

00:11:03,339 --> 00:11:09,339
this do in some cases it's not

00:11:06,670 --> 00:11:11,380
comparable to compose to compare what

00:11:09,339 --> 00:11:13,089
you had before performance wise force

00:11:11,380 --> 00:11:15,519
what you up now because it might be

00:11:13,089 --> 00:11:19,149
faster in other ways if you will and

00:11:15,519 --> 00:11:21,100
that could be such that maybe before you

00:11:19,149 --> 00:11:24,399
were able to get a steady throughput at

00:11:21,100 --> 00:11:26,529
X rates but if you had a failure that

00:11:24,399 --> 00:11:29,230
would that would kind of trash the

00:11:26,529 --> 00:11:31,569
entire statistic so part of the features

00:11:29,230 --> 00:11:34,389
of envoy is being able to steer away

00:11:31,569 --> 00:11:38,680
from bad problems to keep that constant

00:11:34,389 --> 00:11:40,930
SLA so you can just measure like happy

00:11:38,680 --> 00:11:42,699
case both ways and get some performance

00:11:40,930 --> 00:11:44,319
things out of that but some of the

00:11:42,699 --> 00:11:46,660
advanced features are really some of the

00:11:44,319 --> 00:11:49,180
things that could improve the

00:11:46,660 --> 00:11:49,480
performance in other ways if that makes

00:11:49,180 --> 00:11:52,059
sense

00:11:49,480 --> 00:11:55,750
I thought you also had a question around

00:11:52,059 --> 00:11:56,769
how is the experience working with the

00:11:55,750 --> 00:11:59,259
integration

00:11:56,769 --> 00:12:01,959
with sto and Cloud Foundry other than

00:11:59,259 --> 00:12:03,970
just performance that did you want to

00:12:01,959 --> 00:12:08,379
know about the current state of the

00:12:03,970 --> 00:12:11,050
integration yeah sure so you may be

00:12:08,379 --> 00:12:14,980
aware that that well six eight months

00:12:11,050 --> 00:12:19,379
ago it seems like we put an envoy

00:12:14,980 --> 00:12:25,509
sidecar in every container and that's

00:12:19,379 --> 00:12:27,009
serving a a limited but powerful use

00:12:25,509 --> 00:12:30,309
case at the moment it's statically

00:12:27,009 --> 00:12:32,889
configured and leveraging the the

00:12:30,309 --> 00:12:36,519
instance credentials generated by Diego

00:12:32,889 --> 00:12:39,249
to terminate TLS for ingress requests

00:12:36,519 --> 00:12:42,699
from go router so the go router to took

00:12:39,249 --> 00:12:45,369
container data is encrypted in flight

00:12:42,699 --> 00:12:47,410
and actually that was a secondary

00:12:45,369 --> 00:12:51,189
benefit the reason that we did that work

00:12:47,410 --> 00:12:55,689
primarily was so that go router uses the

00:12:51,189 --> 00:12:57,790
identity in the certificate to guarantee

00:12:55,689 --> 00:12:59,920
that it's making a request to the the

00:12:57,790 --> 00:13:02,709
right back-end which gives us

00:12:59,920 --> 00:13:04,449
consistency in the face of control plane

00:13:02,709 --> 00:13:10,329
failure where the routing table may be

00:13:04,449 --> 00:13:13,049
out of date Aaron you want to talk about

00:13:10,329 --> 00:13:18,850
our collaboration

00:13:13,049 --> 00:13:23,429
sorry did we address that already all

00:13:18,850 --> 00:13:23,429
right who else is curious about SEO

00:13:27,029 --> 00:13:33,540
anyone you currently working on

00:13:29,980 --> 00:13:42,839
applications that are not web-based

00:13:33,540 --> 00:13:46,689
non-http peer across protocols pleases

00:13:42,839 --> 00:13:51,609
so obviously TCP routing in Cloud

00:13:46,689 --> 00:13:54,189
Foundry is a kind of No prejudicial

00:13:51,609 --> 00:13:56,230
remark here this is it's seems a kind of

00:13:54,189 --> 00:13:59,379
an afterthought and maybe it maybe it's

00:13:56,230 --> 00:14:01,839
our implementation but it's it's it's an

00:13:59,379 --> 00:14:05,199
awkward thing to use what kind of things

00:14:01,839 --> 00:14:07,869
can we do with the new framework again

00:14:05,199 --> 00:14:10,749
I'm coming from the cfar perspective but

00:14:07,869 --> 00:14:13,149
also for kubernetes what kind of things

00:14:10,749 --> 00:14:15,369
will that improve with just basic TCP

00:14:13,149 --> 00:14:18,189
connections or odd protocol or different

00:14:15,369 --> 00:14:21,040
protocols could you tell us more about

00:14:18,189 --> 00:14:26,019
how TCP routing and Cloud Foundry is

00:14:21,040 --> 00:14:29,049
currently awkward it has to do with our

00:14:26,019 --> 00:14:32,529
implementation so we are running this in

00:14:29,049 --> 00:14:35,499
a containerized environment and because

00:14:32,529 --> 00:14:37,089
of some limitations in helm and the way

00:14:35,499 --> 00:14:39,009
we deploy it we have to actually pre

00:14:37,089 --> 00:14:41,769
provision the number of ports we want to

00:14:39,009 --> 00:14:42,850
have open for a TCP rubbing we would

00:14:41,769 --> 00:14:44,619
like to that to be a little more

00:14:42,850 --> 00:14:47,199
flexible

00:14:44,619 --> 00:14:49,419
I'm already over my head with that

00:14:47,199 --> 00:14:51,730
question so do you mean like a range of

00:14:49,419 --> 00:14:53,980
ports like this can listen on a range of

00:14:51,730 --> 00:14:56,709
ports yeah so we have to actually

00:14:53,980 --> 00:14:58,360
specify a range of ports that will be

00:14:56,709 --> 00:15:01,089
open for TCP routing it would be nice if

00:14:58,360 --> 00:15:02,769
that were dynamically configured or if

00:15:01,089 --> 00:15:06,999
there was just more flexibility to

00:15:02,769 --> 00:15:11,559
expose magically expose applications on

00:15:06,999 --> 00:15:14,860
whatever protocol they happen to need so

00:15:11,559 --> 00:15:19,919
the challenge with with non h-2b

00:15:14,860 --> 00:15:21,999
protocols is that in many cases

00:15:19,919 --> 00:15:24,879
especially when the client doesn't

00:15:21,999 --> 00:15:28,959
support S&I you can't make a host based

00:15:24,879 --> 00:15:31,589
routing decision so the routing decision

00:15:28,959 --> 00:15:35,319
needs to be based on a port and the

00:15:31,589 --> 00:15:37,809
platform routers go whatever they are go

00:15:35,319 --> 00:15:40,040
right or tcp router are for horizontal

00:15:37,809 --> 00:15:42,140
scalability very likely not

00:15:40,040 --> 00:15:49,210
internet-facing so you want a load

00:15:42,140 --> 00:15:52,040
balancer in front of those so without

00:15:49,210 --> 00:15:57,230
provisioning load balancers for each

00:15:52,040 --> 00:15:59,570
route which I would love to do but isn't

00:15:57,230 --> 00:16:01,670
possible on some infrastructures where

00:15:59,570 --> 00:16:05,270
for example your f5 is your

00:16:01,670 --> 00:16:08,120
infrastructure load balancer I I don't

00:16:05,270 --> 00:16:10,460
know of another way around provisioning

00:16:08,120 --> 00:16:16,550
some opening some range of ports on the

00:16:10,460 --> 00:16:18,620
load balancer I'm kind of familiar with

00:16:16,550 --> 00:16:20,420
because this has come up actually in

00:16:18,620 --> 00:16:23,150
kubernetes often as well

00:16:20,420 --> 00:16:27,200
like you can't specify a range of ports

00:16:23,150 --> 00:16:30,070
for example if you I've seen this most

00:16:27,200 --> 00:16:34,360
often in the telco space where you are

00:16:30,070 --> 00:16:38,240
operating a little with a gateway

00:16:34,360 --> 00:16:42,170
whereby everything can potentially route

00:16:38,240 --> 00:16:43,460
to like one instance just because you

00:16:42,170 --> 00:16:46,640
have multiple things mapped to that

00:16:43,460 --> 00:16:49,310
thing but it's not so much that each

00:16:46,640 --> 00:16:50,930
individual like it only listens on a few

00:16:49,310 --> 00:16:54,050
I could listen on a huge range just

00:16:50,930 --> 00:16:58,280
because that's what you were given as a

00:16:54,050 --> 00:17:01,970
provider of this so instead of saying I

00:16:58,280 --> 00:17:03,710
need reading a thousand of lines of yeah

00:17:01,970 --> 00:17:05,630
Mille to say each of the individual

00:17:03,710 --> 00:17:07,640
ports that need opened you want to have

00:17:05,630 --> 00:17:09,790
that range that was something that is

00:17:07,640 --> 00:17:16,820
not currently in the kubernetes api

00:17:09,790 --> 00:17:18,950
which while Sto doesn't have a hard line

00:17:16,820 --> 00:17:21,790
as far as you know obviously it's

00:17:18,950 --> 00:17:24,500
working with Cloud Foundry so we are

00:17:21,790 --> 00:17:26,390
operating on multiple platforms but the

00:17:24,500 --> 00:17:29,150
API is still based on the kubernetes api

00:17:26,390 --> 00:17:30,710
so if that doesn't exist in there then

00:17:29,150 --> 00:17:36,080
we kind of have to extend it ourselves

00:17:30,710 --> 00:17:38,390
so part of the issue was it needs to

00:17:36,080 --> 00:17:41,030
kind of get fixed in the kubernetes api

00:17:38,390 --> 00:17:43,490
first before that works I've also heard

00:17:41,030 --> 00:17:46,820
cases of where containers operating on a

00:17:43,490 --> 00:17:49,510
huge range of ports like that has had

00:17:46,820 --> 00:17:52,490
problems in the docker ecosystem as well

00:17:49,510 --> 00:17:56,120
Chris

00:17:52,490 --> 00:17:57,740
would that still require even if there

00:17:56,120 --> 00:18:01,250
was support for the ranges reports as

00:17:57,740 --> 00:18:04,820
you described in kubernetes and and then

00:18:01,250 --> 00:18:07,760
as a result in SEO wouldn't taking

00:18:04,820 --> 00:18:11,870
advantage of that require that the nodes

00:18:07,760 --> 00:18:13,640
in kubernetes were exposed to directly

00:18:11,870 --> 00:18:16,309
exposed to clients assuming you have a

00:18:13,640 --> 00:18:18,290
load balancing tier in front then those

00:18:16,309 --> 00:18:20,630
ports still would need to be opened on

00:18:18,290 --> 00:18:22,970
the load balancer and that's the primary

00:18:20,630 --> 00:18:24,620
challenge that we deal with is how do

00:18:22,970 --> 00:18:29,420
you open up the range of ports on the

00:18:24,620 --> 00:18:32,960
load balancer in on GCP or AWS or Azure

00:18:29,420 --> 00:18:36,230
or some other public cloud you public

00:18:32,960 --> 00:18:38,840
you could theoretically provision the

00:18:36,230 --> 00:18:40,460
load balancer for each service so they

00:18:38,840 --> 00:18:43,970
have the full range of ports that's that

00:18:40,460 --> 00:18:48,320
would be ideal right but on in on Prem

00:18:43,970 --> 00:18:50,780
infrastructures where I dare to say the

00:18:48,320 --> 00:18:52,820
majority of cloud foundry operators are

00:18:50,780 --> 00:18:56,900
running their platforms that's not an

00:18:52,820 --> 00:18:58,700
option unless they're using an Sdn and

00:18:56,900 --> 00:19:03,380
you could dynamically provision load

00:18:58,700 --> 00:19:05,000
balancers on an NSX for example but if

00:19:03,380 --> 00:19:07,880
you want to cover all use cases with a

00:19:05,000 --> 00:19:10,120
single solution then you have to open

00:19:07,880 --> 00:19:14,690
that range of ports on a load balancer

00:19:10,120 --> 00:19:17,750
right so just in the in the kubernetes

00:19:14,690 --> 00:19:19,760
space and there are a few like on Prem

00:19:17,750 --> 00:19:22,990
bare metal sort of deployment

00:19:19,760 --> 00:19:26,150
implementations that do exist that

00:19:22,990 --> 00:19:27,650
feasibly could just offer this if there

00:19:26,150 --> 00:19:31,640
was a way to map that back into the

00:19:27,650 --> 00:19:33,290
kubernetes infrastructure so feels like

00:19:31,640 --> 00:19:36,230
there's multiple things that play just

00:19:33,290 --> 00:19:38,840
for this one seemingly simple thing just

00:19:36,230 --> 00:19:44,390
give me an array it was just insane

00:19:38,840 --> 00:19:46,640
what's so hard for that I mean if you're

00:19:44,390 --> 00:19:49,309
really interested in the status of that

00:19:46,640 --> 00:19:52,490
I can point you to some github issues to

00:19:49,309 --> 00:19:54,559
follow and unfortunately I'm not sure at

00:19:52,490 --> 00:19:56,390
the moment because uh I mean Shannon's

00:19:54,559 --> 00:19:58,370
still right on the cloud provider front

00:19:56,390 --> 00:20:02,030
like if you are using a hosted thing now

00:19:58,370 --> 00:20:05,540
every kubernetes or Cloud Foundry host

00:20:02,030 --> 00:20:06,290
that offers some sort of cloud specific

00:20:05,540 --> 00:20:09,290
load balancer

00:20:06,290 --> 00:20:11,990
is gonna also need to support that so

00:20:09,290 --> 00:20:13,730
it's just general agreeance on things

00:20:11,990 --> 00:20:30,980
from all the cloud provider perspectives

00:20:13,730 --> 00:20:33,950
as well what else you got Troy are you

00:20:30,980 --> 00:20:39,320
working with any IOT sorts of

00:20:33,950 --> 00:20:41,630
applications would any of you like to be

00:20:39,320 --> 00:20:48,880
able to run workloads on Cloud Foundry

00:20:41,630 --> 00:20:56,240
that require UDP protocols yes please

00:20:48,880 --> 00:20:58,370
what uh what are you using UDP for so

00:20:56,240 --> 00:21:00,560
I'm not using it for anything so I just

00:20:58,370 --> 00:21:03,980
have to provide a platform for customers

00:21:00,560 --> 00:21:09,100
that have you know whatever on minecraft

00:21:03,980 --> 00:21:11,720
a minecraft server I don't know it's a I

00:21:09,100 --> 00:21:15,650
often don't get the level of detail of

00:21:11,720 --> 00:21:19,010
you know this is a particular kind of

00:21:15,650 --> 00:21:22,370
application but it's just a checklist

00:21:19,010 --> 00:21:25,790
items we need UDP writer routing you

00:21:22,370 --> 00:21:28,430
might know we had a UDP router in an

00:21:25,790 --> 00:21:32,510
older version of a Cloud Foundry that I

00:21:28,430 --> 00:21:34,400
worked on in a previous life and yeah

00:21:32,510 --> 00:21:37,100
that was a popular tick box with

00:21:34,400 --> 00:21:45,880
customers who were running a variety of

00:21:37,100 --> 00:21:45,880
applications so anyone else

00:21:48,490 --> 00:21:54,920
so I other than yourself as a provider

00:21:52,550 --> 00:21:57,650
is anyone everyone else is mostly

00:21:54,920 --> 00:22:01,280
working with web-based services any

00:21:57,650 --> 00:22:05,420
gaming platforms or high frequency

00:22:01,280 --> 00:22:09,170
trading platforms anyone operating those

00:22:05,420 --> 00:22:16,480
types of environments everyone's using

00:22:09,170 --> 00:22:22,840
web anyone using HTTP - at the moment

00:22:16,480 --> 00:22:22,840
and developers clamoring for it yeah

00:22:24,280 --> 00:22:28,250
ipv6 is always a good one - this

00:22:26,510 --> 00:22:30,950
question is not all related to what you

00:22:28,250 --> 00:22:33,020
asked so but so we I'm from the

00:22:30,950 --> 00:22:34,850
renault-nissan with special ins but

00:22:33,020 --> 00:22:36,590
we're not using for the IOT so we have

00:22:34,850 --> 00:22:39,230
connected applications that are deployed

00:22:36,590 --> 00:22:41,540
on the Cloud Foundry and right now we

00:22:39,230 --> 00:22:43,940
are actually investigating Kong which

00:22:41,540 --> 00:22:46,040
human have known as the APA gateway so

00:22:43,940 --> 00:22:50,260
the problems that we face is like we

00:22:46,040 --> 00:22:52,790
need to rate limit the AP ice and and

00:22:50,260 --> 00:22:54,140
right now there is some problems with

00:22:52,790 --> 00:22:55,610
the limitations of the as your load

00:22:54,140 --> 00:22:57,410
balancer which can be swallowed by the

00:22:55,610 --> 00:23:00,080
API gateway so these are the two

00:22:57,410 --> 00:23:03,140
limitations that I actually see so the

00:23:00,080 --> 00:23:07,130
question is is sto overkill or is Kong

00:23:03,140 --> 00:23:09,080
better sure I have not personally used

00:23:07,130 --> 00:23:12,620
Kong so I can't speak to it but I can

00:23:09,080 --> 00:23:17,030
tell you this exact use case was is the

00:23:12,620 --> 00:23:18,980
reason that the weather company which is

00:23:17,030 --> 00:23:20,990
a kind of under IBM but they were

00:23:18,980 --> 00:23:24,050
looking there we're using AWS at the

00:23:20,990 --> 00:23:26,660
time being prior to being acquired by

00:23:24,050 --> 00:23:28,850
IBM and they noticed the same issue with

00:23:26,660 --> 00:23:31,640
the database load balancer they couldn't

00:23:28,850 --> 00:23:34,460
figure out how to retry your throttle

00:23:31,640 --> 00:23:36,170
requests it was either all or nothing so

00:23:34,460 --> 00:23:37,250
what they are currently using in

00:23:36,170 --> 00:23:40,640
production for a few of our services

00:23:37,250 --> 00:23:43,760
that they did that by just using an sto

00:23:40,640 --> 00:23:45,530
gateway similar to Gateway just being

00:23:43,760 --> 00:23:47,630
the overloaded term we seem to be using

00:23:45,530 --> 00:23:53,150
for some sort of an edge load bouncer

00:23:47,630 --> 00:23:55,040
but what they're able to see is they

00:23:53,150 --> 00:23:56,870
they have like a nice little graph in

00:23:55,040 --> 00:23:58,880
that kind of drawls where all their

00:23:56,870 --> 00:24:00,840
traffic is going I think they're using a

00:23:58,880 --> 00:24:03,390
Netflix

00:24:00,840 --> 00:24:08,100
open-source product called visceral to

00:24:03,390 --> 00:24:10,350
view this but during times of like a

00:24:08,100 --> 00:24:12,029
hurricane or whatnot any number of

00:24:10,350 --> 00:24:14,340
reasons why everyone would be looking at

00:24:12,029 --> 00:24:16,650
weather calm things would just fall over

00:24:14,340 --> 00:24:20,090
because they were spilling out and maybe

00:24:16,650 --> 00:24:22,830
round-robin to all of the nodes or else

00:24:20,090 --> 00:24:25,380
just generally that one was busy but I

00:24:22,830 --> 00:24:27,000
kept being sent to it so they were they

00:24:25,380 --> 00:24:28,320
have since moved envoy and they're

00:24:27,000 --> 00:24:31,620
seeing much better performance because

00:24:28,320 --> 00:24:34,020
they're able to choose the type of load

00:24:31,620 --> 00:24:38,250
bouncing that's specific to that service

00:24:34,020 --> 00:24:40,529
so for example if you've ever had an

00:24:38,250 --> 00:24:42,200
issue with your service and people are

00:24:40,529 --> 00:24:45,840
calling your service or depending on it

00:24:42,200 --> 00:24:47,370
and they think that their requests

00:24:45,840 --> 00:24:49,679
aren't going in they're gonna try again

00:24:47,370 --> 00:24:51,299
immediately which if your service is

00:24:49,679 --> 00:24:52,710
under stress definitely doesn't help

00:24:51,299 --> 00:24:54,899
it's you know the Thundering Herd

00:24:52,710 --> 00:24:57,419
problem what you want to do is try to

00:24:54,899 --> 00:24:59,730
back off intelligently so they're using

00:24:57,419 --> 00:25:02,580
that sort of functionality through is do

00:24:59,730 --> 00:25:05,159
by stating I know that the service can

00:25:02,580 --> 00:25:05,760
handle this much if I cross this threat

00:25:05,159 --> 00:25:08,220
shoulde

00:25:05,760 --> 00:25:10,860
open circuit breaker and start routing

00:25:08,220 --> 00:25:13,260
to either healthier instances or start

00:25:10,860 --> 00:25:16,559
serving codes back until the service

00:25:13,260 --> 00:25:17,669
recovers so you can customize / all of

00:25:16,559 --> 00:25:19,919
those applications that you have

00:25:17,669 --> 00:25:22,409
necessary they're different retries for

00:25:19,919 --> 00:25:24,090
each of them different load balancing

00:25:22,409 --> 00:25:26,640
schemes maybe you have an application

00:25:24,090 --> 00:25:28,200
where round-robin does doesn't make

00:25:26,640 --> 00:25:28,860
sense because some queries could be very

00:25:28,200 --> 00:25:30,990
expensive

00:25:28,860 --> 00:25:32,760
with the difference between loading all

00:25:30,990 --> 00:25:35,909
of the entries in the database versus

00:25:32,760 --> 00:25:37,350
just one that's a different expense

00:25:35,909 --> 00:25:39,840
level depending on how long it takes to

00:25:37,350 --> 00:25:42,720
come back so if your round robin around

00:25:39,840 --> 00:25:44,220
of course and it's just your turn again

00:25:42,720 --> 00:25:45,870
you're handing this expensive query

00:25:44,220 --> 00:25:48,809
you're immediately getting get blocked

00:25:45,870 --> 00:25:52,230
down so they did exactly that with their

00:25:48,809 --> 00:25:54,809
weather service and they've been having

00:25:52,230 --> 00:25:56,909
pretty good success for it with it and

00:25:54,809 --> 00:25:59,549
that's the the only part actually that

00:25:56,909 --> 00:26:01,200
they have migrated so far to is Joe

00:25:59,549 --> 00:26:03,179
they're working on kind of everything

00:26:01,200 --> 00:26:04,470
under that but their edge load balancer

00:26:03,179 --> 00:26:06,779
that they were using it because four is

00:26:04,470 --> 00:26:09,600
working well as well as they're

00:26:06,779 --> 00:26:12,790
capturing a lot more metrics at a vet

00:26:09,600 --> 00:26:20,169
than what they were able to gather from

00:26:12,790 --> 00:26:25,150
whatever currently edibles is using this

00:26:20,169 --> 00:26:28,390
reminds me of a opinion I've been

00:26:25,150 --> 00:26:30,880
developing and and given the

00:26:28,390 --> 00:26:33,340
capabilities this goes back to Troy your

00:26:30,880 --> 00:26:35,380
question about what problems does as is

00:26:33,340 --> 00:26:37,929
to yourself given the problems that it

00:26:35,380 --> 00:26:41,350
does solve and the the capabilities of

00:26:37,929 --> 00:26:43,390
ISTE oh it's it looks really like an API

00:26:41,350 --> 00:26:48,429
gateway to me the distributed API

00:26:43,390 --> 00:26:50,679
gateway it's pluggable and even API

00:26:48,429 --> 00:26:55,360
gateway providers are developing a

00:26:50,679 --> 00:26:58,990
strategy to become engines or policy

00:26:55,360 --> 00:27:04,120
engines enforced by is do and up applied

00:26:58,990 --> 00:27:06,250
by the on voice so when I talk to

00:27:04,120 --> 00:27:08,350
customers who say well I've got this

00:27:06,250 --> 00:27:11,340
strategy with API gate we provide our X

00:27:08,350 --> 00:27:15,220
Y or Z how does sto fit in there's

00:27:11,340 --> 00:27:18,790
there's a story there but over time that

00:27:15,220 --> 00:27:21,220
story might become well sto is your API

00:27:18,790 --> 00:27:29,320
gateway and you can bring your policy

00:27:21,220 --> 00:27:30,370
engine you know or many of them the time

00:27:29,320 --> 00:27:32,200
check will probably have a couple of

00:27:30,370 --> 00:27:34,960
minutes or I don't think there's any

00:27:32,200 --> 00:27:37,150
sessions after us does anyone have any

00:27:34,960 --> 00:27:39,760
other further things that they just like

00:27:37,150 --> 00:27:40,900
to talk about my mind this has been

00:27:39,760 --> 00:27:42,580
successful because we learned a bit

00:27:40,900 --> 00:27:45,070
about you know I wrote a few things down

00:27:42,580 --> 00:27:46,419
just generally and that etherpad if you

00:27:45,070 --> 00:27:48,280
have more questions throughout the week

00:27:46,419 --> 00:27:49,900
you know that etherpad will still be up

00:27:48,280 --> 00:27:52,840
just make sure you're following the

00:27:49,900 --> 00:27:55,000
conference code of conduct and not you

00:27:52,840 --> 00:27:58,150
know trying to mess with it and let me

00:27:55,000 --> 00:28:01,210
sort of negative way but it's still

00:27:58,150 --> 00:28:02,890
clear that you know sto many people

00:28:01,210 --> 00:28:05,169
still wondering on what's going to do

00:28:02,890 --> 00:28:08,100
for them contributing was one that I

00:28:05,169 --> 00:28:11,169
heard earlier I didn't hear it here as

00:28:08,100 --> 00:28:13,000
well as you know the API gateway you

00:28:11,169 --> 00:28:15,040
know maybe that is something that we

00:28:13,000 --> 00:28:17,830
need to be talking more about you know

00:28:15,040 --> 00:28:21,510
is it a competitor or is it an API

00:28:17,830 --> 00:28:21,510
gateway if you want to think about that

00:28:25,640 --> 00:28:32,310
Shannon any other I think it's pole time

00:28:28,950 --> 00:28:34,710
okay well thank you thank you everyone

00:28:32,310 --> 00:28:37,250
for coming Lee said that link IBM DUP is

00:28:34,710 --> 00:28:37,250

YouTube URL: https://www.youtube.com/watch?v=OVMLdyYzeUs


