Title: CF + CNI: How to Integrate Your Own Networking Solution - Angela Chin, Pivotal
Publication date: 2018-10-10
Playlist: Cloud Foundry Summit Europe 2018
Description: 
	CF + CNI: How to Integrate Your Own Networking Solution - Angela Chin, Pivotal

With the adoption of Container Networking Interface (CNI) into Cloud Foundry, it has become easier for third party networking plugins to integrate. CNI provides an abstraction between container runtimes and networking plugins, meaning that any plugin that abides by the CNI specification should be able to be swapped in place of the “batteries-included” option of Silk.

However, the reality is far more complex. Most networking plugins introduce network policy and other SDN features which are controlled by long-running daemons that must be packaged as BOSH jobs. Third party plugins must also respect existing Cloud Foundry networking concepts-- Application Security Groups (ASGs) and Container to Container Networking. In this talk, we will go over both how to package your plugin as a BOSH release and highlight several integration points for respecting existing networking in Cloud Foundry.

https://cfseu18.sched.com/event/FRyr/cf-cni-how-to-integrate-your-own-networking-solution-angela-chin-pivotal
Captions: 
	00:00:00,030 --> 00:00:03,120
my name is Angela I'm a software

00:00:01,589 --> 00:00:05,400
engineer at pivotal and today we'll be

00:00:03,120 --> 00:00:07,799
going into the nitty-gritty details of C

00:00:05,400 --> 00:00:10,280
F + C + I is particularly how to

00:00:07,799 --> 00:00:13,290
integrate your own networking solution

00:00:10,280 --> 00:00:15,929
so first we'll just level set on what C

00:00:13,290 --> 00:00:17,820
and is why we even care about having

00:00:15,929 --> 00:00:20,189
this plug ability in this extension

00:00:17,820 --> 00:00:24,000
point in cloud foundry before looking at

00:00:20,189 --> 00:00:26,279
what the cni experience is today in C F

00:00:24,000 --> 00:00:27,960
before finally spending the majority of

00:00:26,279 --> 00:00:29,880
our time talking about tips and tricks

00:00:27,960 --> 00:00:34,280
for actually integrating your own

00:00:29,880 --> 00:00:37,020
solution so first what exactly is C n I

00:00:34,280 --> 00:00:38,790
see and I is the container network

00:00:37,020 --> 00:00:41,640
interface and it's an industry standard

00:00:38,790 --> 00:00:44,520
API for container runtimes to call out

00:00:41,640 --> 00:00:46,260
to third-party Network plugins so it's

00:00:44,520 --> 00:00:48,510
part of the Cloud Foundry or account

00:00:46,260 --> 00:00:51,059
cloud native computing foundation and so

00:00:48,510 --> 00:00:53,340
what this really allows is for some

00:00:51,059 --> 00:00:55,170
container runtime systems so for example

00:00:53,340 --> 00:00:57,809
in Cloud Foundry Diego or perhaps

00:00:55,170 --> 00:00:59,760
kubernetes to be able to call out to

00:00:57,809 --> 00:01:02,399
different networking solutions to get

00:00:59,760 --> 00:01:06,689
different networking features for their

00:01:02,399 --> 00:01:08,549
containers in particular as its industry

00:01:06,689 --> 00:01:10,770
standard API we're going to be focusing

00:01:08,549 --> 00:01:12,330
in not so much on the container runtimes

00:01:10,770 --> 00:01:16,770
calling out but instead on the

00:01:12,330 --> 00:01:20,549
networking plugins themselves so as part

00:01:16,770 --> 00:01:22,110
of CNI we have these core CNI plugins

00:01:20,549 --> 00:01:24,600
that will actually set up the networking

00:01:22,110 --> 00:01:26,159
experience for your containers what

00:01:24,600 --> 00:01:28,350
they're tasked with is first of course

00:01:26,159 --> 00:01:31,380
creating the network interface for your

00:01:28,350 --> 00:01:33,450
containers as you can imagine when you

00:01:31,380 --> 00:01:35,579
have a create you also have a delete and

00:01:33,450 --> 00:01:38,340
so of course the united's

00:01:35,579 --> 00:01:40,110
also care about removing resources when

00:01:38,340 --> 00:01:42,450
your containers are deleted so cleaning

00:01:40,110 --> 00:01:44,310
up after themselves and your deletion

00:01:42,450 --> 00:01:46,110
should always be item potent right it

00:01:44,310 --> 00:01:47,700
should never be airing out hopefully

00:01:46,110 --> 00:01:51,000
everything's lead the first time but if

00:01:47,700 --> 00:01:52,950
not run it again and see you succeed and

00:01:51,000 --> 00:01:56,009
very recently there's been a third

00:01:52,950 --> 00:01:58,770
addition to the specification for CNI

00:01:56,009 --> 00:02:01,140
plugins which is a check to ensure that

00:01:58,770 --> 00:02:04,250
after you've created your container that

00:02:01,140 --> 00:02:07,200
your networking is set up as expected so

00:02:04,250 --> 00:02:08,819
as we can see by looking at all these

00:02:07,200 --> 00:02:11,190
three main parts of the specification

00:02:08,819 --> 00:02:13,710
we're really focused with our CNI

00:02:11,190 --> 00:02:16,230
plugins on our core feature of network

00:02:13,710 --> 00:02:18,450
connectivity so now that we see whether

00:02:16,230 --> 00:02:21,000
CNI plugin should be doing you might be

00:02:18,450 --> 00:02:22,590
wondering how does it actually implement

00:02:21,000 --> 00:02:24,960
these features how does it actually work

00:02:22,590 --> 00:02:26,520
well you're seeing I plug-in that your

00:02:24,960 --> 00:02:30,060
container runtime system will call out

00:02:26,520 --> 00:02:31,590
to it takes a form of a binary and it's

00:02:30,060 --> 00:02:34,170
invoked during your container creation

00:02:31,590 --> 00:02:37,110
or deletion by your container runtime

00:02:34,170 --> 00:02:39,150
system and the arguments for how you

00:02:37,110 --> 00:02:41,370
actually want it to be set up are passed

00:02:39,150 --> 00:02:44,220
in through a combination of environment

00:02:41,370 --> 00:02:46,170
variables and standard in so pretty

00:02:44,220 --> 00:02:48,450
straightforward it's all listed in the

00:02:46,170 --> 00:02:50,370
specification of the container network

00:02:48,450 --> 00:02:54,870
and github you can look there for more

00:02:50,370 --> 00:02:56,760
details in addition to your core CNI

00:02:54,870 --> 00:02:58,980
plugins that are really focused all your

00:02:56,760 --> 00:03:00,990
network connectivity aspect there's also

00:02:58,980 --> 00:03:02,670
a notion of chain plugins so after you

00:03:00,990 --> 00:03:04,620
setup your core network functionality

00:03:02,670 --> 00:03:07,530
you may want some additional features

00:03:04,620 --> 00:03:09,750
such as been with shaping or port

00:03:07,530 --> 00:03:11,250
mapping and so what you can do is

00:03:09,750 --> 00:03:14,250
actually provide in addition to your

00:03:11,250 --> 00:03:15,810
core C&I plug-in and plugins to be run

00:03:14,250 --> 00:03:17,370
after that we'll add these additional

00:03:15,810 --> 00:03:18,930
features so you sort of get the

00:03:17,370 --> 00:03:20,760
abstraction you can pick and choose you

00:03:18,930 --> 00:03:22,200
don't have to just take your course he

00:03:20,760 --> 00:03:25,620
and I plug in and have it the

00:03:22,200 --> 00:03:27,870
end-all-be-all so now that we see sort

00:03:25,620 --> 00:03:30,360
of the basics of C&I you might be

00:03:27,870 --> 00:03:32,190
wondering okay well that's great

00:03:30,360 --> 00:03:33,510
obviously C&I has allowed me a

00:03:32,190 --> 00:03:36,810
specification it's allowing me an

00:03:33,510 --> 00:03:38,580
abstraction but why do I care about this

00:03:36,810 --> 00:03:41,150
API layer why would I even want to

00:03:38,580 --> 00:03:43,920
switch out one CNI solution for another

00:03:41,150 --> 00:03:45,180
well first and foremost you might

00:03:43,920 --> 00:03:47,340
actually care about the type of

00:03:45,180 --> 00:03:49,440
networking implementation for your

00:03:47,340 --> 00:03:50,820
containers right there's a host of

00:03:49,440 --> 00:03:52,260
different ways that you can implement a

00:03:50,820 --> 00:03:54,630
container network you could have a flat

00:03:52,260 --> 00:03:56,520
network you can overlay maybe you're

00:03:54,630 --> 00:03:58,020
using IP tables maybe you're using a

00:03:56,520 --> 00:04:00,600
bridge the list goes on and on and maybe

00:03:58,020 --> 00:04:02,610
you care for one reason or another about

00:04:00,600 --> 00:04:03,780
the specific implementation and that's

00:04:02,610 --> 00:04:06,780
why you would want to choose a

00:04:03,780 --> 00:04:09,480
difference II and I plug in a second

00:04:06,780 --> 00:04:11,100
reason and usually one the few will find

00:04:09,480 --> 00:04:13,320
more compelling is but there is an

00:04:11,100 --> 00:04:16,710
entire ecosystem around connectivity as

00:04:13,320 --> 00:04:18,420
well well the core scene I plug in is

00:04:16,710 --> 00:04:21,150
really focused on connectivity it

00:04:18,420 --> 00:04:23,580
doesn't end there you might care about

00:04:21,150 --> 00:04:26,280
things like policy so after I've created

00:04:23,580 --> 00:04:27,280
my container what can I actually talk to

00:04:26,280 --> 00:04:29,590
out on the Internet

00:04:27,280 --> 00:04:31,090
what can talk to it in addition you

00:04:29,590 --> 00:04:33,760
might care about something like network

00:04:31,090 --> 00:04:34,360
isolation you know is the containers I'm

00:04:33,760 --> 00:04:36,370
creating

00:04:34,360 --> 00:04:38,170
isolated perhaps from other containers

00:04:36,370 --> 00:04:40,870
or the last thing you might care about

00:04:38,170 --> 00:04:43,000
is something like ensuring that in

00:04:40,870 --> 00:04:44,830
addition to your container having an

00:04:43,000 --> 00:04:47,410
identity within your container runtime

00:04:44,830 --> 00:04:50,920
system and having an identity outside of

00:04:47,410 --> 00:04:52,360
it as well so that for example you have

00:04:50,920 --> 00:04:54,400
a legacy database and you want a

00:04:52,360 --> 00:04:57,310
whitelist only a specific IP you want to

00:04:54,400 --> 00:04:59,410
make sure that you have that container

00:04:57,310 --> 00:05:03,250
actually mapping to that external IP

00:04:59,410 --> 00:05:05,950
identity and so as we can see a lot of

00:05:03,250 --> 00:05:08,440
people find this compelling and so we

00:05:05,950 --> 00:05:10,419
have a whole bevy of C&I plugins that

00:05:08,440 --> 00:05:12,640
you can choose from that present

00:05:10,419 --> 00:05:16,960
different solutions for a different use

00:05:12,640 --> 00:05:20,020
cases and this list can be overwhelming

00:05:16,960 --> 00:05:22,120
but we're gonna focus in now on moving

00:05:20,020 --> 00:05:22,690
from CNI in general to C&I in cloud

00:05:22,120 --> 00:05:26,590
foundry

00:05:22,690 --> 00:05:29,290
how does it work today well currently if

00:05:26,590 --> 00:05:32,500
we go back to the list and focus in we

00:05:29,290 --> 00:05:35,530
see noted here that we have silk a CNI

00:05:32,500 --> 00:05:38,410
plugin design for Cloud Foundry and so

00:05:35,530 --> 00:05:41,560
let's examine exactly how CNI works in

00:05:38,410 --> 00:05:43,870
claw foundry through the examination of

00:05:41,560 --> 00:05:46,450
a simple CF push write what happens when

00:05:43,870 --> 00:05:48,400
a container is created this diagram is

00:05:46,450 --> 00:05:51,310
going to be obviously highly simplified

00:05:48,400 --> 00:05:54,130
but during a CF push eventually the

00:05:51,310 --> 00:05:55,930
information will be passed down to Diego

00:05:54,130 --> 00:06:00,010
which is our container runtime system

00:05:55,930 --> 00:06:02,860
from here Diego will decide what hosts

00:06:00,010 --> 00:06:04,330
the container should be run on and that

00:06:02,860 --> 00:06:06,070
information will eventually make its way

00:06:04,330 --> 00:06:08,650
down to garden which is actually going

00:06:06,070 --> 00:06:11,440
to issue the container create as part of

00:06:08,650 --> 00:06:13,840
garden we do have a garden external

00:06:11,440 --> 00:06:15,430
networker which will take care of

00:06:13,840 --> 00:06:18,550
setting up the network connectivity

00:06:15,430 --> 00:06:20,830
aspects the first garden will say ok I

00:06:18,550 --> 00:06:22,870
see that you've pushed an app there's a

00:06:20,830 --> 00:06:24,790
new process it needs a new container and

00:06:22,870 --> 00:06:28,090
we'll start the container create process

00:06:24,790 --> 00:06:29,830
before finishing the container create

00:06:28,090 --> 00:06:32,200
though we need to have network

00:06:29,830 --> 00:06:34,090
connectivity and that's what via the

00:06:32,200 --> 00:06:36,970
garden and external networker we'll be

00:06:34,090 --> 00:06:41,120
calling out over the CNI API to the silk

00:06:36,970 --> 00:06:45,740
C&I plugin now the silk scene I plugin

00:06:41,120 --> 00:06:48,139
doesn't live on its own it in turn calls

00:06:45,740 --> 00:06:50,389
out to a silk Damon that we have running

00:06:48,139 --> 00:06:52,490
on the host VM which eventually will

00:06:50,389 --> 00:06:54,560
call out and ensure that the state of

00:06:52,490 --> 00:06:55,940
the world is consistent with an external

00:06:54,560 --> 00:06:59,270
controller running on a different

00:06:55,940 --> 00:07:01,160
virtual machine and once all this

00:06:59,270 --> 00:07:02,540
information is passed through the silk

00:07:01,160 --> 00:07:04,250
C&I plugin knows the state of the world

00:07:02,540 --> 00:07:06,830
and eventually we'll be able to set up

00:07:04,250 --> 00:07:08,479
the networking stack allocated an IP for

00:07:06,830 --> 00:07:11,360
the container and then guardian can

00:07:08,479 --> 00:07:14,930
finish the container creation process so

00:07:11,360 --> 00:07:17,630
as you can see here the main focus is

00:07:14,930 --> 00:07:21,169
that we have all of these red components

00:07:17,630 --> 00:07:23,840
that are part of our CNI extension

00:07:21,169 --> 00:07:27,080
things that are silk specific and

00:07:23,840 --> 00:07:31,070
swappable but we're still abiding by the

00:07:27,080 --> 00:07:32,240
cni api so we have this green section

00:07:31,070 --> 00:07:34,820
here we have the Guardian textile

00:07:32,240 --> 00:07:37,760
networker that's really calling out to a

00:07:34,820 --> 00:07:39,949
scene I plug in and presumably could be

00:07:37,760 --> 00:07:43,940
calling out instead of two silk to any

00:07:39,949 --> 00:07:45,710
other C&I plugin and so this gets to the

00:07:43,940 --> 00:07:48,410
tips and tricks for actually integrating

00:07:45,710 --> 00:07:50,690
right how do I swap my own C and I plug

00:07:48,410 --> 00:07:53,419
in solution for silk how do I change

00:07:50,690 --> 00:07:55,370
those red components well we'll talk

00:07:53,419 --> 00:07:57,740
about two main things in terms of tips

00:07:55,370 --> 00:07:59,599
and tricks for integrating first some

00:07:57,740 --> 00:08:01,700
specifics on the creation of your Bosh

00:07:59,599 --> 00:08:03,620
release for your C&I plugin and then

00:08:01,700 --> 00:08:04,250
secondly your C&I plug-in development

00:08:03,620 --> 00:08:06,289
itself

00:08:04,250 --> 00:08:09,070
what preconceived notions in Cloud

00:08:06,289 --> 00:08:13,150
Foundry does your plugin have to respect

00:08:09,070 --> 00:08:15,770
so first creating a Bosch release

00:08:13,150 --> 00:08:18,050
obviously you're going to be packaging

00:08:15,770 --> 00:08:20,690
some things up first and foremost your

00:08:18,050 --> 00:08:22,880
C&I plugin but also in addition you may

00:08:20,690 --> 00:08:24,860
have a daemon a long-running process

00:08:22,880 --> 00:08:28,370
running that should be packaged as a

00:08:24,860 --> 00:08:31,039
boss job as well of course not every

00:08:28,370 --> 00:08:32,800
single C&I plugin needs a daemon but

00:08:31,039 --> 00:08:35,150
you'll find the vast majority to

00:08:32,800 --> 00:08:37,339
additionally if you have any controllers

00:08:35,150 --> 00:08:39,500
or any other things as part of your CNI

00:08:37,339 --> 00:08:42,919
ecosystem you should also be packaging

00:08:39,500 --> 00:08:44,839
those up as well in this release so for

00:08:42,919 --> 00:08:47,690
this release we recommend that you name

00:08:44,839 --> 00:08:49,130
it C and I and the reason we recommend

00:08:47,690 --> 00:08:50,810
that you name is that C and I is because

00:08:49,130 --> 00:08:53,180
the Guardian external networker it needs

00:08:50,810 --> 00:08:54,440
to know how exactly to call out to this

00:08:53,180 --> 00:08:57,050
specific C and I plug

00:08:54,440 --> 00:08:58,339
right now in CF deployment you'll see if

00:08:57,050 --> 00:08:59,930
you look at the properties for the

00:08:58,339 --> 00:09:01,879
Guardian external Network er it's

00:08:59,930 --> 00:09:04,790
configured to look for your plug-in in

00:09:01,879 --> 00:09:08,389
the packages C and I bin directory and

00:09:04,790 --> 00:09:11,389
look for the config for that binary in

00:09:08,389 --> 00:09:14,300
the job c and i config directory and so

00:09:11,389 --> 00:09:16,009
if you name your release c ni you don't

00:09:14,300 --> 00:09:17,389
have to deal with any ops files any

00:09:16,009 --> 00:09:20,120
changes to the course you have

00:09:17,389 --> 00:09:22,040
deployment you simply need to create

00:09:20,120 --> 00:09:25,850
that bosch release and pass that in

00:09:22,040 --> 00:09:29,720
instead of silk and of course always

00:09:25,850 --> 00:09:31,790
follow best practices this presentation

00:09:29,720 --> 00:09:33,560
will be made available you can follow

00:09:31,790 --> 00:09:37,519
the link to get more tips and tricks of

00:09:33,560 --> 00:09:39,560
just general bosch goodness in addition

00:09:37,519 --> 00:09:42,800
to actually creating the release or

00:09:39,560 --> 00:09:44,209
perhaps before creating the release you

00:09:42,800 --> 00:09:46,310
want to make sure your plugin actually

00:09:44,209 --> 00:09:48,649
works right so how do you want to do

00:09:46,310 --> 00:09:50,660
your c and i plug-in development maybe

00:09:48,649 --> 00:09:52,550
you want to create a plugin from scratch

00:09:50,660 --> 00:09:54,170
for one reason or another or maybe you

00:09:52,550 --> 00:09:57,920
want to take a plugin on that long list

00:09:54,170 --> 00:10:00,949
and modify it so that it works for the

00:09:57,920 --> 00:10:03,410
Cloud Foundry use case so if you're

00:10:00,949 --> 00:10:04,490
starting a C&I plugin from scratch the

00:10:03,410 --> 00:10:06,980
first thing you'll want to do of course

00:10:04,490 --> 00:10:09,380
is set up network connectivity between

00:10:06,980 --> 00:10:14,000
containers make sure it does what the

00:10:09,380 --> 00:10:16,389
C&I spec tells a C&I plugin must do if

00:10:14,000 --> 00:10:18,920
not if you're taking something like

00:10:16,389 --> 00:10:21,290
flannel or calico or another solution

00:10:18,920 --> 00:10:23,029
you can probably skip this stuff because

00:10:21,290 --> 00:10:25,250
they've already implemented the network

00:10:23,029 --> 00:10:27,230
connectivity feature and instead you'll

00:10:25,250 --> 00:10:28,699
be focusing on the second part which is

00:10:27,230 --> 00:10:30,889
respecting Cloud Foundry s network

00:10:28,699 --> 00:10:34,189
functionality what do I mean by that

00:10:30,889 --> 00:10:36,920
well specifically what I mean is that

00:10:34,189 --> 00:10:39,829
you need to respect application security

00:10:36,920 --> 00:10:42,589
groups or aSG's in Cloud Foundry and you

00:10:39,829 --> 00:10:45,079
also need to respect C to C container to

00:10:42,589 --> 00:10:47,509
container policy and dynamic egress

00:10:45,079 --> 00:10:51,170
policy so these are network policy

00:10:47,509 --> 00:10:53,540
features that are promised by Cloud

00:10:51,170 --> 00:10:56,000
Foundry that you can be writing and so

00:10:53,540 --> 00:10:58,220
any C and I plugin that you swap in

00:10:56,000 --> 00:11:00,350
needs to make sure to read these

00:10:58,220 --> 00:11:02,300
policies and enforce them as well so

00:11:00,350 --> 00:11:05,029
you're having a consistent Cloud Foundry

00:11:02,300 --> 00:11:07,050
experience so let's look first at

00:11:05,029 --> 00:11:11,730
application security groups or

00:11:07,050 --> 00:11:13,649
jeez so aSG's defined egress policy it's

00:11:11,730 --> 00:11:16,800
a policy from your application to the

00:11:13,649 --> 00:11:21,330
external web can I talk to let's say

00:11:16,800 --> 00:11:24,630
google.com for example geez can either

00:11:21,330 --> 00:11:26,490
be global so apply to any container in a

00:11:24,630 --> 00:11:30,000
Cloud Foundry deployment or it could

00:11:26,490 --> 00:11:31,890
also be on a per space basis and and

00:11:30,000 --> 00:11:33,779
she's also apply either to staging

00:11:31,890 --> 00:11:36,089
containers or running containers so we

00:11:33,779 --> 00:11:39,149
see that there's a few permutations of

00:11:36,089 --> 00:11:42,120
all of these combined aSG's are stored

00:11:39,149 --> 00:11:45,300
in the cloud controller database and so

00:11:42,120 --> 00:11:48,450
you can make a simple call to the cloud

00:11:45,300 --> 00:11:51,180
API or copy to get the list of aSG's

00:11:48,450 --> 00:11:53,130
that you need to be enforcing this would

00:11:51,180 --> 00:11:55,290
be a get to the v2 security groups

00:11:53,130 --> 00:11:57,390
endpoint obviously this is a lot of text

00:11:55,290 --> 00:11:59,910
it's really small we're gonna focus in

00:11:57,390 --> 00:12:02,730
on what each specific ASU looks like in

00:11:59,910 --> 00:12:04,470
the response body focusing in we see

00:12:02,730 --> 00:12:06,149
that we have in this example a name

00:12:04,470 --> 00:12:08,579
which is a default security group and

00:12:06,149 --> 00:12:11,040
then in this entity we have the rules

00:12:08,579 --> 00:12:13,260
so what aSG's are actually being defined

00:12:11,040 --> 00:12:15,209
here in this case we have a pretty

00:12:13,260 --> 00:12:17,190
permissive set of miss G's it can

00:12:15,209 --> 00:12:17,880
basically talk to anything in the whole

00:12:17,190 --> 00:12:20,550
wide world

00:12:17,880 --> 00:12:22,649
overall protocols but you can definitely

00:12:20,550 --> 00:12:24,540
make it more fine-grained and you can

00:12:22,649 --> 00:12:28,380
have as many rules in your aSG's as you

00:12:24,540 --> 00:12:30,089
want next we see after the rules we have

00:12:28,380 --> 00:12:32,640
two things called running default and

00:12:30,089 --> 00:12:35,579
staging defaults and what default means

00:12:32,640 --> 00:12:39,899
in this case is global so is this a

00:12:35,579 --> 00:12:42,450
global ASG for my running containers or

00:12:39,899 --> 00:12:44,760
for my staging containers if either of

00:12:42,450 --> 00:12:47,070
these are false then you can find what

00:12:44,760 --> 00:12:50,250
spaces they apply to by looking at the

00:12:47,070 --> 00:12:52,079
spaces and staging spaces URL which

00:12:50,250 --> 00:12:54,959
you'll just follow that link and we'll

00:12:52,079 --> 00:12:58,260
give back the list of what spaces relate

00:12:54,959 --> 00:13:00,899
to this security group and so that way

00:12:58,260 --> 00:13:02,430
you get all the information from that

00:13:00,899 --> 00:13:05,730
space you can then apply to specific

00:13:02,430 --> 00:13:08,070
containers depending on what space that

00:13:05,730 --> 00:13:09,540
container is run in but you might be

00:13:08,070 --> 00:13:12,000
wondering or you might be thinking to

00:13:09,540 --> 00:13:14,880
yourself well do I really want to be

00:13:12,000 --> 00:13:16,589
querying Kathy all the time do I want to

00:13:14,880 --> 00:13:18,779
be pounding it do I want to be giving it

00:13:16,589 --> 00:13:20,610
this heavy load can ieave it you know

00:13:18,779 --> 00:13:23,970
query and pull it as often

00:13:20,610 --> 00:13:26,820
as I would need to and so there is a

00:13:23,970 --> 00:13:30,450
second option for figuring out what

00:13:26,820 --> 00:13:31,829
issues are currently created which ones

00:13:30,450 --> 00:13:34,769
are currently applied into what

00:13:31,829 --> 00:13:38,730
containers and that's through either and

00:13:34,769 --> 00:13:42,420
that's through querying Diego so Diego's

00:13:38,730 --> 00:13:43,920
BBS backing data store stores

00:13:42,420 --> 00:13:45,390
information about all desired

00:13:43,920 --> 00:13:48,600
long-running processes

00:13:45,390 --> 00:13:52,019
desire dollar piece and as part of that

00:13:48,600 --> 00:13:56,089
information on a desired lrp we get the

00:13:52,019 --> 00:13:59,190
list of aSG's so you can either be

00:13:56,089 --> 00:14:02,070
watching the VBS or you could make a

00:13:59,190 --> 00:14:04,200
post to the v1 actual LR P's lists to

00:14:02,070 --> 00:14:07,190
get back all the containers that are

00:14:04,200 --> 00:14:10,230
currently created and as part of each

00:14:07,190 --> 00:14:14,300
LRP there's a section called egress

00:14:10,230 --> 00:14:16,649
rules which has the list of all of the

00:14:14,300 --> 00:14:19,050
aSG's that are being applied on a per

00:14:16,649 --> 00:14:21,420
container basis so you can do a mix of

00:14:19,050 --> 00:14:23,220
you know querying for all on to make

00:14:21,420 --> 00:14:25,949
sure you don't miss anything in addition

00:14:23,220 --> 00:14:27,720
to watching the BBS to ensure that adds

00:14:25,949 --> 00:14:29,550
containers are being created you're

00:14:27,720 --> 00:14:32,180
applying the right application security

00:14:29,550 --> 00:14:37,740
groups to those containers

00:14:32,180 --> 00:14:39,360
after aSG's are supported or respected

00:14:37,740 --> 00:14:41,070
the second thing you'll need to respect

00:14:39,360 --> 00:14:43,769
our container to container network

00:14:41,070 --> 00:14:47,370
policies and dynamic dynamic egress

00:14:43,769 --> 00:14:50,220
policies and both of these live in the

00:14:47,370 --> 00:14:52,769
same policy server c2c containers should

00:14:50,220 --> 00:14:54,930
contain your policies deal with

00:14:52,769 --> 00:14:57,899
whitelisting traffic between containers

00:14:54,930 --> 00:14:58,890
so by default all traffic between two

00:14:57,899 --> 00:15:02,279
containers in a cloud foundry

00:14:58,890 --> 00:15:04,949
installation is rejected but you can

00:15:02,279 --> 00:15:08,269
have a CDC policy to allow traffic from

00:15:04,949 --> 00:15:11,220
one container to a different container

00:15:08,269 --> 00:15:14,010
additionally egress or dynamic egress is

00:15:11,220 --> 00:15:17,100
the new version of aSG's the main

00:15:14,010 --> 00:15:19,199
difference is that with aSG's you would

00:15:17,100 --> 00:15:21,540
have to restart a container to have it

00:15:19,199 --> 00:15:24,240
apply with dynamic egress you can simply

00:15:21,540 --> 00:15:27,230
make the policy and it will be applied

00:15:24,240 --> 00:15:30,680
to those containers to those spaces

00:15:27,230 --> 00:15:33,170
and so both of these can be queried from

00:15:30,680 --> 00:15:35,690
the policy server API via again to the

00:15:33,170 --> 00:15:36,920
networking v1 internal policies since

00:15:35,690 --> 00:15:39,740
you're going to be respecting this

00:15:36,920 --> 00:15:41,660
probably as part of a job or process

00:15:39,740 --> 00:15:45,020
that you're deploying you'll want to use

00:15:41,660 --> 00:15:48,770
the internal and point here and we'll

00:15:45,020 --> 00:15:50,420
focus in first on a c2c policy so we see

00:15:48,770 --> 00:15:53,360
here that we have a source and

00:15:50,420 --> 00:15:55,790
destination for your c2c policy the

00:15:53,360 --> 00:15:58,310
source and destination IDs are actually

00:15:55,790 --> 00:16:00,140
the application goods and that's of

00:15:58,310 --> 00:16:02,570
course because containers can come and

00:16:00,140 --> 00:16:04,550
go your IPS are ephemeral your app do it

00:16:02,570 --> 00:16:06,470
is the way to actually track what

00:16:04,550 --> 00:16:08,570
container you care about and then you

00:16:06,470 --> 00:16:10,370
can from there correlate from the app

00:16:08,570 --> 00:16:13,430
gooood the IP that it's currently

00:16:10,370 --> 00:16:15,380
running on and we see here that on the

00:16:13,430 --> 00:16:17,420
destination you have a list of ports

00:16:15,380 --> 00:16:20,890
that the source can talk to for that

00:16:17,420 --> 00:16:24,980
destination and over what protocol

00:16:20,890 --> 00:16:27,260
similarly for dynamic egress policies we

00:16:24,980 --> 00:16:29,180
see that the source is also an ID which

00:16:27,260 --> 00:16:30,830
is an application gooood but the

00:16:29,180 --> 00:16:33,200
destination in this case because we're

00:16:30,830 --> 00:16:35,450
talking to the outside Internet will be

00:16:33,200 --> 00:16:40,610
a list of eyepiece which have a start

00:16:35,450 --> 00:16:44,900
and an end and a list of ports so in

00:16:40,610 --> 00:16:46,580
summary we see that integrating CNI

00:16:44,900 --> 00:16:49,130
plugins into Cloud Foundry is totally

00:16:46,580 --> 00:16:51,560
feasible you can take a CNI plugin that

00:16:49,130 --> 00:16:53,570
already exists make some modifications

00:16:51,560 --> 00:16:55,490
to respect Cloud Foundry concepts and

00:16:53,570 --> 00:16:58,670
package it up as a bas-relief

00:16:55,490 --> 00:17:00,950
and you should go out and try it for

00:16:58,670 --> 00:17:04,459
yourself and give us feedback on what

00:17:00,950 --> 00:17:06,800
works or doesn't as you go on this

00:17:04,459 --> 00:17:08,449
journey if you want any help for

00:17:06,800 --> 00:17:11,240
assistance you can always reach the

00:17:08,449 --> 00:17:13,990
Container networking team on slack and

00:17:11,240 --> 00:17:18,589
there's also a couple of links to first

00:17:13,990 --> 00:17:21,620
the container the cni community's github

00:17:18,589 --> 00:17:24,980
org as well as silk release if you want

00:17:21,620 --> 00:17:27,050
an example starting point of what a CNI

00:17:24,980 --> 00:17:30,980
boss releases which will also direct you

00:17:27,050 --> 00:17:33,020
to the Silk C&I plug-in itself and with

00:17:30,980 --> 00:17:35,440
that thank you all for attending and I'm

00:17:33,020 --> 00:17:35,440
open to questions

00:17:36,180 --> 00:17:40,309
[Applause]

00:17:45,660 --> 00:17:54,390
one question about a security groups

00:17:51,060 --> 00:17:57,480
so before you enable civil networking

00:17:54,390 --> 00:18:00,180
security groups are the digital work

00:17:57,480 --> 00:18:02,430
even without CNI and all of this they

00:18:00,180 --> 00:18:06,300
they work without cease networking when

00:18:02,430 --> 00:18:09,540
we enable safe networking yes in this

00:18:06,300 --> 00:18:12,000
case the reason why one doesn't apply

00:18:09,540 --> 00:18:12,810
anymore they still apply yes the

00:18:12,000 --> 00:18:15,300
question yeah

00:18:12,810 --> 00:18:17,040
so the way it works is application

00:18:15,300 --> 00:18:19,650
security groups you're right existed

00:18:17,040 --> 00:18:21,210
before container networking when

00:18:19,650 --> 00:18:22,770
container networking was implemented

00:18:21,210 --> 00:18:25,800
when we switched over to abiding by the

00:18:22,770 --> 00:18:27,810
C&I specification we still ensured that

00:18:25,800 --> 00:18:30,450
we respected application security groups

00:18:27,810 --> 00:18:33,380
but who applies them in this case you

00:18:30,450 --> 00:18:37,590
know these hours in a plug-in or

00:18:33,380 --> 00:18:41,790
something else which yes so right now if

00:18:37,590 --> 00:18:43,410
we actually go back to this does not

00:18:41,790 --> 00:18:47,070
love me okay

00:18:43,410 --> 00:18:54,360
very where am i if we go back to like

00:18:47,070 --> 00:18:56,250
the drawing it's so far back here yeah

00:18:54,360 --> 00:18:58,440
so if we actually silk see and I plugin

00:18:56,250 --> 00:19:01,320
is actually sort of many layers of

00:18:58,440 --> 00:19:03,240
wrapping there's a CF wrapper see and I

00:19:01,320 --> 00:19:05,310
plugin which ultimately calls out to the

00:19:03,240 --> 00:19:07,260
silk C&I plugin and that's what

00:19:05,310 --> 00:19:10,410
currently is responsible for applying

00:19:07,260 --> 00:19:13,410
aSG's so if you were to bring in your

00:19:10,410 --> 00:19:16,590
own networking solution then yes you

00:19:13,410 --> 00:19:18,480
need to be respecting aSG's because silk

00:19:16,590 --> 00:19:22,260
scene i plugin is what's respecting the

00:19:18,480 --> 00:19:24,420
aSG's right now so so the the answer is

00:19:22,260 --> 00:19:27,180
that plugin actually it does it does

00:19:24,420 --> 00:19:29,640
this work so it's recent original

00:19:27,180 --> 00:19:31,290
implementation yes the plugin will do

00:19:29,640 --> 00:19:33,780
the work but in addition because of

00:19:31,290 --> 00:19:35,370
dynamic egress policies as well you'll

00:19:33,780 --> 00:19:38,280
probably need some long-running process

00:19:35,370 --> 00:19:41,220
watching for these changes right and

00:19:38,280 --> 00:19:45,860
actually implementing the changing aSG's

00:19:41,220 --> 00:19:45,860
if that makes sense okay thank you

00:19:46,530 --> 00:19:58,300
okay Chris yes no it's to ask the

00:19:53,530 --> 00:19:58,690
question three questions but first out

00:19:58,300 --> 00:20:00,730
one

00:19:58,690 --> 00:20:02,650
do you support chaining plugins with

00:20:00,730 --> 00:20:05,410
garden or will only call one plug-in

00:20:02,650 --> 00:20:07,660
yeah so right now the garden external

00:20:05,410 --> 00:20:09,910
networker is only set up to call one

00:20:07,660 --> 00:20:11,590
plugin by no chain plugins is on the

00:20:09,910 --> 00:20:14,470
radar of the container networking team

00:20:11,590 --> 00:20:17,380
and they have office hours right after

00:20:14,470 --> 00:20:18,820
this should talk to them if it's a use

00:20:17,380 --> 00:20:20,050
case that you're really interested in

00:20:18,820 --> 00:20:23,230
having supported sooner rather than

00:20:20,050 --> 00:20:26,500
later and then you mentioned that for

00:20:23,230 --> 00:20:28,000
the CF aSG's it could be in running and

00:20:26,500 --> 00:20:31,600
staging but I didn't understand what

00:20:28,000 --> 00:20:34,960
staging men yes so when you push an

00:20:31,600 --> 00:20:36,760
applicant or when you push an app you'll

00:20:34,960 --> 00:20:38,530
first have a station container created

00:20:36,760 --> 00:20:41,350
that will be dealing with everything to

00:20:38,530 --> 00:20:43,120
get your actual running and she set up

00:20:41,350 --> 00:20:45,880
and said those that like the running ahe

00:20:43,120 --> 00:20:48,580
will be your actual long-lived container

00:20:45,880 --> 00:20:52,840
your staging will be like your setup

00:20:48,580 --> 00:20:56,380
shorter and then last one was when you

00:20:52,840 --> 00:21:00,370
apply a dynamic SG egress policy will it

00:20:56,380 --> 00:21:01,930
cut existing connections if they are

00:21:00,370 --> 00:21:03,490
currently in flight so like say I'm

00:21:01,930 --> 00:21:05,620
pulling something from an external

00:21:03,490 --> 00:21:06,670
source and all sudden I decide nobody

00:21:05,620 --> 00:21:08,200
should to be allowed that will it

00:21:06,670 --> 00:21:14,790
immediately cut it off or it'll allow

00:21:08,200 --> 00:21:17,380
those to finish so in general aSG's are

00:21:14,790 --> 00:21:20,020
whitelist so you would be removing one I

00:21:17,380 --> 00:21:22,390
guess to cut off a connection issues

00:21:20,020 --> 00:21:27,340
that issues and dynamic egress will also

00:21:22,390 --> 00:21:30,400
compound on each other if you delete an

00:21:27,340 --> 00:21:31,840
ASG they you have a connection going I

00:21:30,400 --> 00:21:37,210
believe your connection will finish

00:21:31,840 --> 00:21:39,790
before and then before the ASG actually

00:21:37,210 --> 00:21:41,290
like takes place and you're no longer is

00:21:39,790 --> 00:21:45,850
removed it you're no longer a lot to

00:21:41,290 --> 00:21:46,930
talk to that connection great thanks are

00:21:45,850 --> 00:21:52,110
you one last question

00:21:46,930 --> 00:21:52,110
oh we have two all right well it's

00:21:53,080 --> 00:22:00,370
yeah hi

00:21:57,500 --> 00:22:04,370
so the question is it possible to pass

00:22:00,370 --> 00:22:08,740
say nice specific metadata somehow to

00:22:04,370 --> 00:22:11,270
the CNI plugin it's a possible path c8i

00:22:08,740 --> 00:22:14,240
specific metadata oh yes what do you

00:22:11,270 --> 00:22:16,070
mean exactly that I have a CNI plug-in

00:22:14,240 --> 00:22:20,180
and I would like to get some information

00:22:16,070 --> 00:22:23,660
from my app when I do a safe push to use

00:22:20,180 --> 00:22:25,940
some kind of specific logic that will be

00:22:23,660 --> 00:22:27,620
good we pause to Excel it's like the

00:22:25,940 --> 00:22:35,240
capabilities for example for the port

00:22:27,620 --> 00:22:37,400
mapping I would have to think on that

00:22:35,240 --> 00:22:40,490
because like right now really like on

00:22:37,400 --> 00:22:42,350
the sea and I plug in level you're

00:22:40,490 --> 00:22:45,470
really constricted by the information

00:22:42,350 --> 00:22:47,960
being passed down as part of a CF push

00:22:45,470 --> 00:22:51,410
so like the information on your desired

00:22:47,960 --> 00:22:55,070
LRP there's not really a like append

00:22:51,410 --> 00:22:57,020
like metadata field there but I could

00:22:55,070 --> 00:22:58,880
envision like maybe if you had some

00:22:57,020 --> 00:23:00,740
other like process as part of your C and

00:22:58,880 --> 00:23:03,170
I plugin that you would like give that

00:23:00,740 --> 00:23:05,300
like have those port mappings or have

00:23:03,170 --> 00:23:06,820
that information to then perhaps your C

00:23:05,300 --> 00:23:09,890
and my plugin could call out to that

00:23:06,820 --> 00:23:11,120
next one maybe that would that would

00:23:09,890 --> 00:23:18,710
just be my first thought off the top of

00:23:11,120 --> 00:23:19,850
my head I'm not sure if this is a good

00:23:18,710 --> 00:23:22,580
question for this session it's about

00:23:19,850 --> 00:23:24,710
shifting working in general it's been

00:23:22,580 --> 00:23:28,730
there for a while already but still

00:23:24,710 --> 00:23:31,970
there is no way to define networking

00:23:28,730 --> 00:23:35,180
rules as like make them it important you

00:23:31,970 --> 00:23:37,280
you need to run a call to edible and

00:23:35,180 --> 00:23:39,830
especially this becomes a problem when

00:23:37,280 --> 00:23:42,410
you need to do blue green or even like

00:23:39,830 --> 00:23:45,410
to put your rules together with your

00:23:42,410 --> 00:23:47,630
code somewhere to like you you need to

00:23:45,410 --> 00:23:53,450
script that basically every time yep and

00:23:47,630 --> 00:23:56,870
I called some so mmm plans to fix that

00:23:53,450 --> 00:23:59,450
yeah yeah yeah I know it's definitely

00:23:56,870 --> 00:24:01,310
this has come up multiple times like you

00:23:59,450 --> 00:24:03,920
know for example could we define

00:24:01,310 --> 00:24:05,120
policies like that manifest or some

00:24:03,920 --> 00:24:09,890
other level so it's

00:24:05,120 --> 00:24:12,680
just a call via the CLI or API I would

00:24:09,890 --> 00:24:15,110
suggest going to the networking office

00:24:12,680 --> 00:24:17,720
hours right after this and again you

00:24:15,110 --> 00:24:19,610
know raising raising your hand I'm not

00:24:17,720 --> 00:24:21,110
sure currently where it's falls on the

00:24:19,610 --> 00:24:23,660
priority list by you know it is a very

00:24:21,110 --> 00:24:25,670
common request so I think you know just

00:24:23,660 --> 00:24:26,890
raising your hand again let's take over

00:24:25,670 --> 00:24:30,410
my job

00:24:26,890 --> 00:24:33,599
it's thinking July again thank you

00:24:30,410 --> 00:24:33,599

YouTube URL: https://www.youtube.com/watch?v=qyOZz9SpIYU


