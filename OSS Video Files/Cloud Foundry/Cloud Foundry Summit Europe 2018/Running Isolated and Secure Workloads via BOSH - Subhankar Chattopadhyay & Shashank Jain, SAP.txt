Title: Running Isolated and Secure Workloads via BOSH - Subhankar Chattopadhyay & Shashank Jain, SAP
Publication date: 2018-10-10
Playlist: Cloud Foundry Summit Europe 2018
Description: 
	Running Isolated and Secure Workloads via BOSH - Subhankar Chattopadhyay & Shashank Jain, SAP

Providing a safe computing condition to an untrusted application is a very critical task. Insufficiently tested applications can cause a number of problems, especially operating system infections. These issues are often found only post-mortem. Most of these issues can be avoided by sandboxing running environment of these untrusted applications.
We have some interesting use cases where we allow third-party extensions to be loaded into the Service Fabrik broker for doing some pre and post lifecycle activities. Service Fabrik Broker is an OSBAPI compliant cloudfoundry incubator project which takes care of provisioning and management of backing services.
Since we donâ€™t have any direct control over the quality of these extensions, as to What kind of resource usage these extensions trigger? What kind of system calls these extensions do? If they can load a rootkit, use LD_PRELOAD like mechanisms to divert system calls. There can be other potential hazardous implications if one of the extension goes kaput. This can cause a possible outage on the SF Broker which is the most critical component and a control plane for backing services.

To mitigate these possible attacks and still allow extension features, we intend to sandbox the extensions via mechanisms like
1. Apply resource limits in terms of memory, CPU, network
2. Restrict system calls via Seccomp profiling and disabling abilities like loading rootkits etc.
3. Fine-grained Mandatory access controls via SE Linux.

The natural progression for these extensions would be to move to BOSH BPM where we expect to have the right isolation levels needed.
This talk will cover usage, pros and cons of above mentioned mechanisms and A demo on how we used sandboxing to provide secure environment for untrusted extensions.

https://cfseu18.sched.com/event/FRz5/running-isolated-and-secure-workloads-via-bosh-subhankar-chattopadhyay-shashank-jain-sap
Captions: 
	00:00:00,000 --> 00:00:06,509
I welcome all to this talk so today we

00:00:04,319 --> 00:00:08,849
will be presenting how to run secure and

00:00:06,509 --> 00:00:10,980
isolated workloads via Bosh so I have

00:00:08,849 --> 00:00:13,740
with me subhankar my colleague and

00:00:10,980 --> 00:00:16,619
myself I'm Shashank so we will run you

00:00:13,740 --> 00:00:21,439
over how we have done and run secure

00:00:16,619 --> 00:00:21,439
workloads of the Bosh based deployments

00:00:22,310 --> 00:00:26,789
so just to set the agenda at a high

00:00:24,720 --> 00:00:28,410
level so when we talk of Bosh page

00:00:26,789 --> 00:00:30,390
deployment we'll take an example of

00:00:28,410 --> 00:00:33,780
service fabric broker which is deployed

00:00:30,390 --> 00:00:35,130
as a Bosh deployment today and we give

00:00:33,780 --> 00:00:37,079
you an overview on what is service

00:00:35,130 --> 00:00:38,940
fabric then there are certain

00:00:37,079 --> 00:00:40,770
requirements for service fabric where we

00:00:38,940 --> 00:00:42,570
need to deploy certain extensions to it

00:00:40,770 --> 00:00:44,399
which means there will be third-party

00:00:42,570 --> 00:00:47,850
code or scripts which will be running as

00:00:44,399 --> 00:00:49,559
part of service fabric code execution so

00:00:47,850 --> 00:00:51,660
this is where the challenges are and how

00:00:49,559 --> 00:00:53,579
do we secure those kind of workloads

00:00:51,660 --> 00:00:56,039
what are the challenges we see is what

00:00:53,579 --> 00:00:57,840
we cover in this talk we will show you a

00:00:56,039 --> 00:00:59,910
demo on what kind of possible attack

00:00:57,840 --> 00:01:01,649
vectors we see when we allow custom code

00:00:59,910 --> 00:01:03,750
to be executed on the Boche based

00:01:01,649 --> 00:01:05,339
virtual machine and then what is the

00:01:03,750 --> 00:01:06,630
mitigation for the same how do we

00:01:05,339 --> 00:01:08,460
mitigate this and what are the best

00:01:06,630 --> 00:01:11,970
practices around doing these or

00:01:08,460 --> 00:01:14,460
mitigating these attack vectors and then

00:01:11,970 --> 00:01:16,189
we finally talk about what is the

00:01:14,460 --> 00:01:18,210
roadmap and the future for these

00:01:16,189 --> 00:01:21,570
security extensions we are trying to

00:01:18,210 --> 00:01:23,580
develop over and above all we also

00:01:21,570 --> 00:01:25,110
demonstrate the actual attack vectors

00:01:23,580 --> 00:01:30,479
what we saw and then also the

00:01:25,110 --> 00:01:32,909
mitigations for the same so at a high

00:01:30,479 --> 00:01:36,750
level this is how service fabric looks

00:01:32,909 --> 00:01:39,270
like so let me try this so you see on

00:01:36,750 --> 00:01:45,570
the top the consuming environment which

00:01:39,270 --> 00:01:47,820
is Cloud Foundry k8s and other platforms

00:01:45,570 --> 00:01:49,979
and this is the piece of service fabric

00:01:47,820 --> 00:01:52,590
we say service fabric broker plus plus

00:01:49,979 --> 00:01:55,140
because there are OSB and extension API

00:01:52,590 --> 00:01:57,390
is on top like backup and restore so the

00:01:55,140 --> 00:02:00,030
way it works is basically so you have an

00:01:57,390 --> 00:02:01,920
API server sitting here so service

00:02:00,030 --> 00:02:03,719
fabric when you trigger a deployment or

00:02:01,920 --> 00:02:06,540
create CF service create as an example

00:02:03,719 --> 00:02:08,340
so service fabric puts a custom resource

00:02:06,540 --> 00:02:10,170
definition into the API server so here

00:02:08,340 --> 00:02:12,390
we use the kubernetes api server

00:02:10,170 --> 00:02:13,380
standalone mode not the cue Burnett is

00:02:12,390 --> 00:02:16,660
itself

00:02:13,380 --> 00:02:18,340
so it talks to the HCD where the CRT is

00:02:16,660 --> 00:02:20,230
persisted it also generates an event

00:02:18,340 --> 00:02:22,030
back where you see these components like

00:02:20,230 --> 00:02:23,860
the talker operator the Bosch operator

00:02:22,030 --> 00:02:25,450
and the caters operator so there's a

00:02:23,860 --> 00:02:28,330
specific reason why we did it this way

00:02:25,450 --> 00:02:29,770
so in the initial release of service

00:02:28,330 --> 00:02:31,570
fabric what we were supporting is only

00:02:29,770 --> 00:02:33,880
these two kind of deployments the talker

00:02:31,570 --> 00:02:36,100
and the Bosch but with this framework in

00:02:33,880 --> 00:02:38,380
place we are able to support much more

00:02:36,100 --> 00:02:40,390
flexible provisioning mechanisms like

00:02:38,380 --> 00:02:42,730
you can add a Chaos operator and deploy

00:02:40,390 --> 00:02:44,560
into kubernetes but the talk is not

00:02:42,730 --> 00:02:46,600
about that talk is about primarily the

00:02:44,560 --> 00:02:48,550
Bosch side of it where how do we secure

00:02:46,600 --> 00:02:50,470
the deployments done by a Bosch how do

00:02:48,550 --> 00:02:55,960
we secure the service fabric deployment

00:02:50,470 --> 00:02:58,180
itself so this is the whole user flow I

00:02:55,960 --> 00:03:00,970
am going to talk about today so why is

00:02:58,180 --> 00:03:03,210
the need of doing this so when we were

00:03:00,970 --> 00:03:06,040
building service fabric and after

00:03:03,210 --> 00:03:08,560
certain point in time people lost how do

00:03:06,040 --> 00:03:10,660
I extend service fabric right so in the

00:03:08,560 --> 00:03:13,300
deployment life cycle is there an

00:03:10,660 --> 00:03:15,610
ability to introduce some code which I

00:03:13,300 --> 00:03:17,200
want to get executed as an example you

00:03:15,610 --> 00:03:19,480
have a deployment manifest can I modify

00:03:17,200 --> 00:03:21,370
the manifest a little bit can I inject

00:03:19,480 --> 00:03:22,990
some credentials into it right so these

00:03:21,370 --> 00:03:24,820
are the kind of use cases which are much

00:03:22,990 --> 00:03:26,709
and this is where we broaden the concept

00:03:24,820 --> 00:03:28,840
of saying the third-party extensions or

00:03:26,709 --> 00:03:31,360
the plugins we call them the deployment

00:03:28,840 --> 00:03:33,640
hooks where we say that you have the

00:03:31,360 --> 00:03:35,770
ability in producer deployment to

00:03:33,640 --> 00:03:37,750
execute a deployment hook as part of the

00:03:35,770 --> 00:03:41,350
life cycle of service fabric deployment

00:03:37,750 --> 00:03:43,330
workflow so typically use cases as I

00:03:41,350 --> 00:03:45,310
said center around the manifest

00:03:43,330 --> 00:03:48,459
manipulation but there are many things

00:03:45,310 --> 00:03:50,650
you can do if you are not checked or

00:03:48,459 --> 00:03:52,450
controlled rather so what can happen

00:03:50,650 --> 00:03:55,570
possibly right so if you have the

00:03:52,450 --> 00:03:57,640
challenges of introducing a third-party

00:03:55,570 --> 00:04:00,310
code running on the control plane which

00:03:57,640 --> 00:04:02,770
is service fabric what a rope code or a

00:04:00,310 --> 00:04:06,520
rogue agent or a rope plug-in rather can

00:04:02,770 --> 00:04:10,180
do so you can see he can inject him all

00:04:06,520 --> 00:04:11,800
where can cause denial of service on the

00:04:10,180 --> 00:04:13,570
service fabric component so he can

00:04:11,800 --> 00:04:15,610
launch a denial of service like a slow

00:04:13,570 --> 00:04:17,200
loris on the HTTP endpoint on the

00:04:15,610 --> 00:04:18,910
service fabric broker itself which means

00:04:17,200 --> 00:04:22,000
he can cause an outage of the whole

00:04:18,910 --> 00:04:23,890
deployment chain then there are

00:04:22,000 --> 00:04:25,720
component with service fabric box - if

00:04:23,890 --> 00:04:26,500
you have an agent which is uncontrolled

00:04:25,720 --> 00:04:27,850
and I'll check

00:04:26,500 --> 00:04:29,320
he can also bring down the other

00:04:27,850 --> 00:04:32,050
components which have interfacing with

00:04:29,320 --> 00:04:34,300
servicer break itself then there are

00:04:32,050 --> 00:04:36,790
mechanisms like Petrus where you can

00:04:34,300 --> 00:04:39,820
change the binary of the X or the

00:04:36,790 --> 00:04:42,340
executable which is running so malicious

00:04:39,820 --> 00:04:44,380
code can just do a process following or

00:04:42,340 --> 00:04:47,520
change the binary of the service object

00:04:44,380 --> 00:04:50,080
itself and it can go totally unaware

00:04:47,520 --> 00:04:51,610
so what service fabric doesn't control

00:04:50,080 --> 00:04:53,110
so we don't control what are the

00:04:51,610 --> 00:04:54,940
qualities of these extensions I mean you

00:04:53,110 --> 00:04:56,320
can have a limit to checking the static

00:04:54,940 --> 00:04:58,030
code checks and other things but some

00:04:56,320 --> 00:05:01,510
things we will show in their demo can

00:04:58,030 --> 00:05:03,790
just pass through so how do I check what

00:05:01,510 --> 00:05:06,400
kind of resource usage a specific hook

00:05:03,790 --> 00:05:09,580
is doing what kind of system calls it is

00:05:06,400 --> 00:05:11,740
making is it trying to load a rootkit

00:05:09,580 --> 00:05:12,430
and trying to elevated privileges we

00:05:11,740 --> 00:05:14,830
have no clue

00:05:12,430 --> 00:05:16,690
there are mechanism like using LD

00:05:14,830 --> 00:05:18,940
preload to divert the system calls

00:05:16,690 --> 00:05:21,730
itself so all these mechanisms can

00:05:18,940 --> 00:05:24,610
totally go unchecked so basically the

00:05:21,730 --> 00:05:26,290
idea is introduce a small code can just

00:05:24,610 --> 00:05:29,710
bring down surface fabric or the Boche

00:05:26,290 --> 00:05:31,750
deployment which you are running so now

00:05:29,710 --> 00:05:33,250
I go over to a small demo on what are

00:05:31,750 --> 00:05:36,810
the possible attack vectors we you see

00:05:33,250 --> 00:05:36,810
here so over to subhankar

00:05:39,150 --> 00:05:46,780
okay so as mentioned so we had this use

00:05:44,410 --> 00:05:49,990
case of running third-party extension

00:05:46,780 --> 00:05:52,150
code as part of the creation lifecycle

00:05:49,990 --> 00:05:55,060
but we also wanted to make sure that

00:05:52,150 --> 00:05:57,970
nothing can go wrong and somebody cannot

00:05:55,060 --> 00:05:59,979
introduce a rope code that can bring

00:05:57,970 --> 00:06:02,860
down the whole control plane of service

00:05:59,979 --> 00:06:05,470
fabric broker so we would show a couple

00:06:02,860 --> 00:06:07,750
of demo how it can basically bring down

00:06:05,470 --> 00:06:10,060
and then we will show how what were the

00:06:07,750 --> 00:06:17,370
solutions that we brought in and how we

00:06:10,060 --> 00:06:17,370
solve the problem so so the first demo

00:06:23,110 --> 00:06:31,330
yeah so the first demo will be about a

00:06:27,389 --> 00:06:34,930
reverse shell so in just let me explain

00:06:31,330 --> 00:06:36,699
the pain over here so I have the local

00:06:34,930 --> 00:06:39,759
machine from where I will create the

00:06:36,699 --> 00:06:41,530
service instances and in the middle I

00:06:39,759 --> 00:06:43,930
have the Rope machine or the attacker

00:06:41,530 --> 00:06:47,219
machine where I will basically open up

00:06:43,930 --> 00:06:50,979
the reverse shell and I have the third

00:06:47,219 --> 00:06:53,710
pane where I have logged into the broker

00:06:50,979 --> 00:06:56,710
VM the service fabric broker VM and I

00:06:53,710 --> 00:07:01,810
will show that what the attacker could

00:06:56,710 --> 00:07:06,639
do in the broker VM so let us see what

00:07:01,810 --> 00:07:09,729
can happen in this scenario so in the

00:07:06,639 --> 00:07:12,520
beginning we are just doing an IP config

00:07:09,729 --> 00:07:15,219
I have convict just to show that all

00:07:12,520 --> 00:07:17,740
these machines have a different IP

00:07:15,219 --> 00:07:23,110
address as you can see the first one has

00:07:17,740 --> 00:07:25,539
170 2.17 dot 0.1 the second one has a

00:07:23,110 --> 00:07:28,240
different IP address which is a private

00:07:25,539 --> 00:07:32,680
IP which is the attacker machine in this

00:07:28,240 --> 00:07:36,250
case and again we go to the broker VM

00:07:32,680 --> 00:07:42,219
and we do a knife config and here the IP

00:07:36,250 --> 00:07:44,560
address is 10.11 dot 252 dot ten so the

00:07:42,219 --> 00:07:47,409
idea of this attack is that this is the

00:07:44,560 --> 00:07:50,710
attacker machine but executing us

00:07:47,409 --> 00:07:52,180
deployment hook here on this side he

00:07:50,710 --> 00:07:54,400
will be able to obtain a shell here

00:07:52,180 --> 00:07:56,349
which is the start of the attack and

00:07:54,400 --> 00:08:00,460
basically then you can do much more on

00:07:56,349 --> 00:08:02,949
this so I will just create a watch on

00:08:00,460 --> 00:08:05,050
the monitor that is running so in this

00:08:02,949 --> 00:08:06,759
case the monitor says the Bosch Monett

00:08:05,050 --> 00:08:09,759
process that is running a service fabric

00:08:06,759 --> 00:08:12,069
broker so over here you can see that the

00:08:09,759 --> 00:08:14,589
process is running and it also shows the

00:08:12,069 --> 00:08:17,770
IP address just to show that we can

00:08:14,589 --> 00:08:19,960
actually logged into this system on the

00:08:17,770 --> 00:08:22,360
middle pane what we are doing is we are

00:08:19,960 --> 00:08:25,300
opening an it cat so and we are just

00:08:22,360 --> 00:08:29,860
listening to this particular port now

00:08:25,300 --> 00:08:31,779
what we have is we have some rope script

00:08:29,860 --> 00:08:34,870
which is part of the service fabric

00:08:31,779 --> 00:08:36,219
deployment hook so the moment somebody

00:08:34,870 --> 00:08:38,620
creates the service

00:08:36,219 --> 00:08:41,289
this script will be invoked so let us

00:08:38,620 --> 00:08:45,639
see what it can do so we will just do a

00:08:41,289 --> 00:08:48,939
CF marketplace to see the services so we

00:08:45,639 --> 00:08:52,990
have a blueprint service which is a demo

00:08:48,939 --> 00:08:55,089
service and we have X small plan we will

00:08:52,990 --> 00:09:01,860
be creating a service instance for that

00:08:55,089 --> 00:09:04,269
plan yeah so I am doing create service

00:09:01,860 --> 00:09:08,350
to create a service instance of

00:09:04,269 --> 00:09:11,199
blueprint of this specific plan so as

00:09:08,350 --> 00:09:13,449
soon as I do this the script will be

00:09:11,199 --> 00:09:17,610
executed and you would be able to see

00:09:13,449 --> 00:09:20,560
that the river shell is yeah so in the

00:09:17,610 --> 00:09:23,019
in the second pane you could see that

00:09:20,560 --> 00:09:25,209
the reverse shell has obtained

00:09:23,019 --> 00:09:28,660
connections and it has basically

00:09:25,209 --> 00:09:32,199
obtained a shell of broker so if I do a

00:09:28,660 --> 00:09:35,470
Who am I I get a recap user because the

00:09:32,199 --> 00:09:37,930
process is running as we kept and I do a

00:09:35,470 --> 00:09:41,589
nice config and that's why I had the IP

00:09:37,930 --> 00:09:44,559
address on the third pane also so you

00:09:41,589 --> 00:09:49,149
could see that I have config actually

00:09:44,559 --> 00:09:51,339
shows the IP address of the broker so

00:09:49,149 --> 00:09:54,389
this is the start of the attack as Chang

00:09:51,339 --> 00:09:55,660
said now what it could do so it could do

00:09:54,389 --> 00:09:59,319
process

00:09:55,660 --> 00:10:02,350
tracing so you can do simple PS minus F

00:09:59,319 --> 00:10:04,269
and you could probably guess that the

00:10:02,350 --> 00:10:06,790
process would have something like

00:10:04,269 --> 00:10:11,129
service fabric broker so you could grape

00:10:06,790 --> 00:10:17,290
with that you get a list of processes

00:10:11,129 --> 00:10:19,300
and you could do kill minus 9 of all

00:10:17,290 --> 00:10:21,009
these processes because these are not

00:10:19,300 --> 00:10:22,899
running with vcap privileges so you

00:10:21,009 --> 00:10:26,230
could actually kill all these processes

00:10:22,899 --> 00:10:28,420
so in this demo we are killing one of

00:10:26,230 --> 00:10:31,959
these processes and you could see that

00:10:28,420 --> 00:10:34,600
the Bosch process on the monitor process

00:10:31,959 --> 00:10:36,910
on the other side will go down this is

00:10:34,600 --> 00:10:39,189
basically you caused the outage yeah

00:10:36,910 --> 00:10:41,889
so as soon as the monitors goes down

00:10:39,189 --> 00:10:44,259
what it means is your Bosch deployment

00:10:41,889 --> 00:10:46,990
of service fabric broker goes down that

00:10:44,259 --> 00:10:49,010
means your control plane for creating a

00:10:46,990 --> 00:10:53,750
service goes down which is an outage

00:10:49,010 --> 00:10:59,230
for your platform right so this is what

00:10:53,750 --> 00:11:02,540
you could do with with reversal with a

00:10:59,230 --> 00:11:04,460
with a rogue good maybe just to show

00:11:02,540 --> 00:11:07,490
like what kind of code you can write

00:11:04,460 --> 00:11:09,410
first of ten or so and I mean if we are

00:11:07,490 --> 00:11:12,320
thinking that writing this kind of code

00:11:09,410 --> 00:11:14,720
is a very big thing

00:11:12,320 --> 00:11:17,840
it is not actually so this is what I

00:11:14,720 --> 00:11:21,500
actually wrote in the script it's this

00:11:17,840 --> 00:11:24,620
very small Python code which runs as a

00:11:21,500 --> 00:11:26,630
shell script basically so what it is

00:11:24,620 --> 00:11:29,750
doing is it is just creating a socket

00:11:26,630 --> 00:11:33,400
and after that it is just redirecting

00:11:29,750 --> 00:11:36,680
the stream and with that it opens up a

00:11:33,400 --> 00:11:38,930
reverse shell on that occur machine so

00:11:36,680 --> 00:11:41,540
this is the kind of attack that can

00:11:38,930 --> 00:11:46,370
happen so one more example that we want

00:11:41,540 --> 00:11:49,480
to show is the rootkit example so we

00:11:46,370 --> 00:11:53,420
found out one of the example rootkit and

00:11:49,480 --> 00:11:56,360
this is the code that you could run to

00:11:53,420 --> 00:12:00,010
basically gain root access so you could

00:11:56,360 --> 00:12:03,920
be any user if you have privileged to

00:12:00,010 --> 00:12:06,890
load a kernel module so using AI NS mod

00:12:03,920 --> 00:12:08,960
you can load any rootkit and after that

00:12:06,890 --> 00:12:11,060
you have the root access so you could do

00:12:08,960 --> 00:12:14,210
anything you could do mana to stop all

00:12:11,060 --> 00:12:17,150
and destroy all the processes and that's

00:12:14,210 --> 00:12:20,840
probably the least you could do so we

00:12:17,150 --> 00:12:23,450
will show a demo for that also so again

00:12:20,840 --> 00:12:25,850
we have the local machine and we have

00:12:23,450 --> 00:12:31,370
the broker process running on the right

00:12:25,850 --> 00:12:33,730
hand side so you could see this is the

00:12:31,370 --> 00:12:36,860
script that I showed that will be

00:12:33,730 --> 00:12:41,650
executed as part of the lifecycle of the

00:12:36,860 --> 00:12:46,460
of the create service and again I would

00:12:41,650 --> 00:12:50,710
run a watch on the broker process so and

00:12:46,460 --> 00:12:53,900
again similarly how we did for the other

00:12:50,710 --> 00:12:56,180
previous demo we will try to create a

00:12:53,900 --> 00:12:58,850
service instance for the same blueprint

00:12:56,180 --> 00:13:00,679
instance that will again deploy the

00:12:58,850 --> 00:13:03,019
via mental so that will again call the

00:13:00,679 --> 00:13:05,859
deployment hook and we'll execute that

00:13:03,019 --> 00:13:10,609
piece of code of loading the root

00:13:05,859 --> 00:13:12,919
rootkit and getting the access the root

00:13:10,609 --> 00:13:15,919
access and it will do a mana to stop all

00:13:12,919 --> 00:13:18,769
and as soon as it does am on it stop all

00:13:15,919 --> 00:13:21,949
it brings down all the Bosch processes

00:13:18,769 --> 00:13:23,809
all the monitors you can see the service

00:13:21,949 --> 00:13:27,559
fabric broker process has become not

00:13:23,809 --> 00:13:31,789
monitored and again it will cause outage

00:13:27,559 --> 00:13:33,169
and your control plane will be down so

00:13:31,789 --> 00:13:35,419
basically what you are trying to tell is

00:13:33,169 --> 00:13:38,209
that there is an ability to install a

00:13:35,419 --> 00:13:40,249
kernel module via the hook right and

00:13:38,209 --> 00:13:42,829
then that kernel module itself is a

00:13:40,249 --> 00:13:45,019
rootkit which allows a user to elevate

00:13:42,829 --> 00:13:46,970
his privileges to do root and then to a

00:13:45,019 --> 00:13:48,889
monitor stop all on the other processes

00:13:46,970 --> 00:13:53,359
running on that virtual machine exactly

00:13:48,889 --> 00:13:55,389
and also one more thing that we could do

00:13:53,359 --> 00:13:57,879
is fourth boom I mean that is a very

00:13:55,389 --> 00:14:01,970
common thing that we have probably done

00:13:57,879 --> 00:14:04,970
during our childhood coding so here what

00:14:01,970 --> 00:14:07,339
we are doing we have the broker VM and

00:14:04,970 --> 00:14:09,350
we are checking the number of processes

00:14:07,339 --> 00:14:12,249
that it is running so currently if you

00:14:09,350 --> 00:14:15,199
see overall in this VM there are like

00:14:12,249 --> 00:14:17,059
149 processes running so if you don't

00:14:15,199 --> 00:14:20,299
know about foreboom what it does is it

00:14:17,059 --> 00:14:24,979
exponentially creates processes using

00:14:20,299 --> 00:14:27,259
the for process system call and then as

00:14:24,979 --> 00:14:30,529
soon as the number of process that it

00:14:27,259 --> 00:14:33,109
creates grows so high that your resource

00:14:30,529 --> 00:14:35,539
consumption becomes so high your VM

00:14:33,109 --> 00:14:38,209
could crash and it could become

00:14:35,539 --> 00:14:43,879
unresponsive and eventually it will

00:14:38,209 --> 00:14:46,279
crash so let's try to do that so again

00:14:43,879 --> 00:14:50,239
through the CF create service it will

00:14:46,279 --> 00:14:52,339
invoke this particular code again this

00:14:50,239 --> 00:14:54,799
code also writing this code is very easy

00:14:52,339 --> 00:14:57,229
you could find it on internet it's just

00:14:54,799 --> 00:15:00,949
a one line of script that you could run

00:14:57,229 --> 00:15:04,339
and which brings down the whole virtual

00:15:00,949 --> 00:15:07,220
machine yeah so you could see now on the

00:15:04,339 --> 00:15:10,670
right hand side it is the number of

00:15:07,220 --> 00:15:14,480
processes increasing at a rapid rate

00:15:10,670 --> 00:15:16,970
and at one point in time even the watch

00:15:14,480 --> 00:15:19,670
process itself will care will be killed

00:15:16,970 --> 00:15:29,900
and eventually the virtual machine you

00:15:19,670 --> 00:15:33,920
like throws the PIDs here yeah okay so

00:15:29,900 --> 00:15:38,240
so we saw the problems that we have

00:15:33,920 --> 00:15:41,570
right so our intention was to still

00:15:38,240 --> 00:15:45,020
provide this flexibility for people or

00:15:41,570 --> 00:15:48,230
for the service owners to add this

00:15:45,020 --> 00:15:50,660
capability of writing custom code before

00:15:48,230 --> 00:15:52,820
the actual boss deployment happened so

00:15:50,660 --> 00:15:55,640
what are the solutions so the solution

00:15:52,820 --> 00:15:59,180
is to sandbox these processes so that it

00:15:55,640 --> 00:16:01,640
cannot affect the other process so what

00:15:59,180 --> 00:16:04,460
you could do you could apply resource

00:16:01,640 --> 00:16:06,950
limits in terms of memory or CPU or

00:16:04,460 --> 00:16:09,800
network or you could restrict the system

00:16:06,950 --> 00:16:14,030
calls so for that you could use say calm

00:16:09,800 --> 00:16:16,940
and you could also then filter some

00:16:14,030 --> 00:16:19,970
certain system calls and you can disable

00:16:16,940 --> 00:16:22,610
some certain system calls like a loading

00:16:19,970 --> 00:16:24,890
rootkit or probably opening up a TCP

00:16:22,610 --> 00:16:27,890
connections disabling clone to be done

00:16:24,890 --> 00:16:31,370
from a script to launch such kind of an

00:16:27,890 --> 00:16:33,160
attack like the fourth bomb so also what

00:16:31,370 --> 00:16:35,420
you could do is you can have

00:16:33,160 --> 00:16:37,910
fine-grained mandatory access control

00:16:35,420 --> 00:16:40,370
like a sealed Linux which is a Linux

00:16:37,910 --> 00:16:42,490
utility and you could also have it as

00:16:40,370 --> 00:16:45,350
part of it so that you could defined

00:16:42,490 --> 00:16:47,870
fine-grained a user controls and of

00:16:45,350 --> 00:16:50,750
course Linux capabilities are one of

00:16:47,870 --> 00:16:53,600
those things that you could use so in

00:16:50,750 --> 00:16:56,360
our case there was an a there was a case

00:16:53,600 --> 00:16:59,360
where we had we had to deploy many

00:16:56,360 --> 00:17:02,030
service instances and these service

00:16:59,360 --> 00:17:04,220
instances should not look at each other

00:17:02,030 --> 00:17:05,810
right they should be restricted so that

00:17:04,220 --> 00:17:09,080
they can only see each other and not

00:17:05,810 --> 00:17:12,200
others so we had to manipulate the IP

00:17:09,080 --> 00:17:14,390
tables for that but you you don't want

00:17:12,200 --> 00:17:16,580
to be rude and manipulate the IP tables

00:17:14,390 --> 00:17:19,460
so for that we use the Linux

00:17:16,580 --> 00:17:22,130
capabilities and only enable

00:17:19,460 --> 00:17:25,100
manipulating the iptables capability and

00:17:22,130 --> 00:17:28,910
not the entire route axis so this is

00:17:25,100 --> 00:17:32,050
something that you could do so setting

00:17:28,910 --> 00:17:34,610
up resource limits so in the Bosch

00:17:32,050 --> 00:17:37,760
monitor script that we have you can

00:17:34,610 --> 00:17:40,040
actually define you limits so it's a

00:17:37,760 --> 00:17:43,280
Bosch utility that you have and you can

00:17:40,040 --> 00:17:46,070
define different limits like memory CPU

00:17:43,280 --> 00:17:48,890
number of open files number of

00:17:46,070 --> 00:17:52,690
connections etcetera which ultimately

00:17:48,890 --> 00:17:55,850
uses the are limit which is a system

00:17:52,690 --> 00:17:59,810
system call and also of course you have

00:17:55,850 --> 00:18:04,120
the C groups which are a Linux kernel

00:17:59,810 --> 00:18:07,400
feature to basically limit and also a

00:18:04,120 --> 00:18:12,470
isolate the resources between the set of

00:18:07,400 --> 00:18:15,550
processes so coming back to set comp so

00:18:12,470 --> 00:18:18,200
as I said you could actually filter the

00:18:15,550 --> 00:18:21,650
system calls that you want to allow and

00:18:18,200 --> 00:18:25,000
this is what we did we used for our use

00:18:21,650 --> 00:18:28,460
case so set comp is basically a very

00:18:25,000 --> 00:18:30,830
efficient way of filtering the filtering

00:18:28,460 --> 00:18:32,570
the list of system calls that you want

00:18:30,830 --> 00:18:34,580
to allow you can just configure it and

00:18:32,570 --> 00:18:36,380
you can provide the list of system calls

00:18:34,580 --> 00:18:39,620
that you want to allow and others will

00:18:36,380 --> 00:18:41,510
be denied automatically and it's

00:18:39,620 --> 00:18:44,930
specially useful if you are running

00:18:41,510 --> 00:18:49,300
untrusted third party programs we have

00:18:44,930 --> 00:18:52,760
used a lip set comp which is a it's a C

00:18:49,300 --> 00:18:56,030
library that you can use and you can

00:18:52,760 --> 00:18:58,090
filter unwanted system calls and in

00:18:56,030 --> 00:19:00,560
service fabric we can we have a

00:18:58,090 --> 00:19:02,990
configurable mechanism of basically

00:19:00,560 --> 00:19:05,120
allowing the system calls so our

00:19:02,990 --> 00:19:07,100
approach is to deny all and then

00:19:05,120 --> 00:19:10,000
whitelist certain system calls which are

00:19:07,100 --> 00:19:15,020
needed for a specific process to be done

00:19:10,000 --> 00:19:18,260
so this sitcom actually is coming from a

00:19:15,020 --> 00:19:22,070
long time since it was introduced with

00:19:18,260 --> 00:19:26,990
linux 2.6 dot 12 and it was part of the

00:19:22,070 --> 00:19:29,380
cpu sharing program and it's a very very

00:19:26,990 --> 00:19:31,840
nice tool and

00:19:29,380 --> 00:19:34,270
along with sitcom if you use features

00:19:31,840 --> 00:19:36,310
like namespace and capabilities you

00:19:34,270 --> 00:19:38,590
could actually restrict your process so

00:19:36,310 --> 00:19:43,690
that it does not cause havoc to the

00:19:38,590 --> 00:19:46,780
whole ecosystem so we will show the

00:19:43,690 --> 00:19:49,680
exact attacks demo that we did and we

00:19:46,780 --> 00:19:54,310
will show that how it was solved using

00:19:49,680 --> 00:19:56,310
sacrum so we will show the first first

00:19:54,310 --> 00:20:01,240
one which was the reverse shell attack

00:19:56,310 --> 00:20:06,070
so again the same pain and I will open

00:20:01,240 --> 00:20:09,730
up the netcat process on the attacker VM

00:20:06,070 --> 00:20:13,810
in the middle and then we will see what

00:20:09,730 --> 00:20:17,470
happens so on the third pane we will

00:20:13,810 --> 00:20:19,660
show the the settings for set comps so

00:20:17,470 --> 00:20:22,780
as I said it's configurable and you can

00:20:19,660 --> 00:20:24,930
list the list of system calls you want

00:20:22,780 --> 00:20:24,930
to

00:20:47,289 --> 00:20:57,970
yep sorry yeah so let's come back yeah

00:20:53,390 --> 00:21:00,289
so as I said we have a setting which is

00:20:57,970 --> 00:21:02,590
configurable and you can list down the

00:21:00,289 --> 00:21:06,140
list of system calls that you want to

00:21:02,590 --> 00:21:09,080
enable so as you can see here you have a

00:21:06,140 --> 00:21:11,480
flag enable see Scott filters which is

00:21:09,080 --> 00:21:13,760
if you make it true then it will be in

00:21:11,480 --> 00:21:16,309
effect and then you have some white list

00:21:13,760 --> 00:21:18,289
at syscall you can list all the Cisco's

00:21:16,309 --> 00:21:20,659
that you want to whitelist and those

00:21:18,289 --> 00:21:23,419
will be allowed and anything else other

00:21:20,659 --> 00:21:25,700
than that will be will not be allowed so

00:21:23,419 --> 00:21:28,280
in this case we have the reverse cell

00:21:25,700 --> 00:21:32,120
where you would need a TCP connections

00:21:28,280 --> 00:21:36,710
to be open right so we don't allow this

00:21:32,120 --> 00:21:40,700
and we will see that how service fabric

00:21:36,710 --> 00:21:44,950
a deployment hook process blocks that so

00:21:40,700 --> 00:21:48,500
we open up the netcat process on the

00:21:44,950 --> 00:21:50,900
attacker VM and then we try to create

00:21:48,500 --> 00:21:54,940
the service instance and these policies

00:21:50,900 --> 00:21:54,940
can be applied per process yeah

00:21:55,390 --> 00:22:01,280
so as you can see as soon as I created

00:21:58,730 --> 00:22:03,200
the service instance previously you you

00:22:01,280 --> 00:22:05,990
could see there was a reversal already

00:22:03,200 --> 00:22:08,450
created on the second VM now it's not

00:22:05,990 --> 00:22:10,340
there right so what happened something

00:22:08,450 --> 00:22:15,500
must have happened which has blocked it

00:22:10,340 --> 00:22:18,500
so let us check the service fabric log

00:22:15,500 --> 00:22:22,460
for the deployment hook process so we

00:22:18,500 --> 00:22:25,100
could go to the log and in the log we

00:22:22,460 --> 00:22:29,360
would see there is a bad system called

00:22:25,100 --> 00:22:33,070
exception that has got from the from the

00:22:29,360 --> 00:22:36,380
filter and it has basically blocked from

00:22:33,070 --> 00:22:40,760
executing that particular script so this

00:22:36,380 --> 00:22:45,860
is how you could block a specific script

00:22:40,760 --> 00:22:49,130
that is not supposed to run in the

00:22:45,860 --> 00:22:53,450
similar scenario earlier where we showed

00:22:49,130 --> 00:22:56,990
that the rootkit was it was able to load

00:22:53,450 --> 00:22:58,130
the rootkit so in this case again we

00:22:56,990 --> 00:23:01,280
show that

00:22:58,130 --> 00:23:04,490
the settings is enabled and we have some

00:23:01,280 --> 00:23:09,710
whitelisted limited set of sis calls

00:23:04,490 --> 00:23:13,370
which is only allowed and when we try to

00:23:09,710 --> 00:23:15,380
create the service instance so basically

00:23:13,370 --> 00:23:16,760
you block the init module or the loading

00:23:15,380 --> 00:23:19,910
of the kernel yeah exactly

00:23:16,760 --> 00:23:23,750
so the ironist mod will be blocked and

00:23:19,910 --> 00:23:26,120
then when we try to create the service

00:23:23,750 --> 00:23:29,300
instance previously it was able to bring

00:23:26,120 --> 00:23:31,490
down the process now that would not

00:23:29,300 --> 00:23:35,180
happen so only the creation probably

00:23:31,490 --> 00:23:39,170
would ultimately fail so it would later

00:23:35,180 --> 00:23:43,910
say that the creation failed but then

00:23:39,170 --> 00:23:48,200
you would still not be able to acquire

00:23:43,910 --> 00:23:51,200
the root access and similarly here also

00:23:48,200 --> 00:23:55,000
we can see that in the log you will have

00:23:51,200 --> 00:23:57,860
a certain bad system called

00:23:55,000 --> 00:24:02,330
log which basically restricts the

00:23:57,860 --> 00:24:06,500
process from getting executed yeah so

00:24:02,330 --> 00:24:10,220
this is about the about the demo that we

00:24:06,500 --> 00:24:15,170
have now where do we see this is getting

00:24:10,220 --> 00:24:18,470
used and we have sort of other use cases

00:24:15,170 --> 00:24:21,740
that is happening in the CF community so

00:24:18,470 --> 00:24:25,100
you probably would know there is a Bosch

00:24:21,740 --> 00:24:29,630
BPM release which is also targeted

00:24:25,100 --> 00:24:34,580
towards process isolation and making

00:24:29,630 --> 00:24:38,680
sure that the process runs in its own in

00:24:34,580 --> 00:24:42,020
its own namespace and it uses C groups

00:24:38,680 --> 00:24:46,130
for achieving the resource isolation and

00:24:42,020 --> 00:24:48,920
also it has the ability to define a

00:24:46,130 --> 00:24:52,850
resource limit like open files or the

00:24:48,920 --> 00:24:54,650
memory that you could use so over the

00:24:52,850 --> 00:24:58,850
period of time where we were developing

00:24:54,650 --> 00:25:02,270
this seccomp based approach we also saw

00:24:58,850 --> 00:25:04,700
that the BPM also was doing in parallel

00:25:02,270 --> 00:25:07,540
something similar so we could also use

00:25:04,700 --> 00:25:10,790
some of the capabilities that BPM has so

00:25:07,540 --> 00:25:14,300
running a boss job on BPM also is very

00:25:10,790 --> 00:25:17,630
easy and you could get things like the

00:25:14,300 --> 00:25:20,690
resource isolation and applying the

00:25:17,630 --> 00:25:23,060
resource limit what BPM also provides is

00:25:20,690 --> 00:25:26,810
through Linux capabilities you can also

00:25:23,060 --> 00:25:29,570
configure the grant for a certain user

00:25:26,810 --> 00:25:32,390
or a certain process so you could also

00:25:29,570 --> 00:25:34,550
have Linux capabilities and the list of

00:25:32,390 --> 00:25:36,710
capability is defined and the process

00:25:34,550 --> 00:25:41,750
will have those capabilities only enable

00:25:36,710 --> 00:25:44,660
so we see that along with BPM and along

00:25:41,750 --> 00:25:47,090
with say comm you could also have the

00:25:44,660 --> 00:25:50,120
list of system calls that you can block

00:25:47,090 --> 00:25:53,120
and you that could be an efficient way

00:25:50,120 --> 00:25:54,650
to run third-party extension code or

00:25:53,120 --> 00:25:57,620
third-party extreme ends are normal

00:25:54,650 --> 00:26:00,140
voice deployments in a harden way yeah

00:25:57,620 --> 00:26:02,570
so yeah so this is all we wanted to

00:26:00,140 --> 00:26:17,120
discuss and talk so if you have some

00:26:02,570 --> 00:26:20,680
questions we can take up but also I can

00:26:17,120 --> 00:26:23,800
take anybody if you have any questions

00:26:20,680 --> 00:26:27,170
so if you want to have some discussion

00:26:23,800 --> 00:26:30,040
we have all the contacts given here

00:26:27,170 --> 00:26:32,720
service fabric is also an open source

00:26:30,040 --> 00:26:35,270
incubation project we have given the

00:26:32,720 --> 00:26:37,790
links for all the github repositories

00:26:35,270 --> 00:26:48,380
and our slack channel so you could also

00:26:37,790 --> 00:26:50,270
talk to us over there so would it be

00:26:48,380 --> 00:26:56,510
possible to reach the same level of

00:26:50,270 --> 00:26:58,700
isolation with push ppm yes so when you

00:26:56,510 --> 00:27:02,920
say same level you mean the work we have

00:26:58,700 --> 00:27:02,920
done what you have done yes yes

00:27:06,470 --> 00:27:10,880
so at the time when we were doing it was

00:27:08,300 --> 00:27:13,670
in an alpha stage so that's the reason I

00:27:10,880 --> 00:27:16,910
think now it's in a stage where you

00:27:13,670 --> 00:27:19,460
could also use BPM so for some of our

00:27:16,910 --> 00:27:25,820
boss jobs we were also using it and we

00:27:19,460 --> 00:27:28,130
saw it's quite quite good so in along

00:27:25,820 --> 00:27:31,490
with that I think for self I mean if you

00:27:28,130 --> 00:27:33,980
have use case of restricting the system

00:27:31,490 --> 00:27:36,500
calls so we could also use something

00:27:33,980 --> 00:27:38,810
like set calm or lips had come to

00:27:36,500 --> 00:27:40,700
basically restrict certain so I think

00:27:38,810 --> 00:27:42,530
it's one thing we are not sure of is the

00:27:40,700 --> 00:27:44,960
linux capability party yet we have not

00:27:42,530 --> 00:27:46,580
checked on the watch BPM site so how do

00:27:44,960 --> 00:27:48,200
you let's say he talked about the

00:27:46,580 --> 00:27:50,570
iptables use case where you want a

00:27:48,200 --> 00:27:52,610
process just to apply iptables we cannot

00:27:50,570 --> 00:27:55,100
do more than that so you have fine

00:27:52,610 --> 00:27:57,050
balance security applied by the kept

00:27:55,100 --> 00:27:59,030
Linux capabilities feature so we are not

00:27:57,050 --> 00:28:01,610
sure whether Bosch BPM and which way

00:27:59,030 --> 00:28:09,430
does it so maybe there may not be there

00:28:01,610 --> 00:28:09,430

YouTube URL: https://www.youtube.com/watch?v=N8KhEvpfNzo


