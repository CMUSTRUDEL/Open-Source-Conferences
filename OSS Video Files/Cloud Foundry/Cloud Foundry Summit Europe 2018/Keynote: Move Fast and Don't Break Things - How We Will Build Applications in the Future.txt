Title: Keynote: Move Fast and Don't Break Things - How We Will Build Applications in the Future
Publication date: 2018-10-11
Playlist: Cloud Foundry Summit Europe 2018
Description: 
	Keynote: Move Fast and Don't Break Things - How We Will Build Applications in the Future – Daniela Rabiser, Technical Product Manager, Dynatrace & Tim Gerlach, Software Developer, SAP

Cloud Foundry makes it faster and easier to build, test, deploy and scale your applications. However, there is still a high burden on development and operations teams to ensure that delivered applications and microservices are always up and running and that business functionality is available for end users. Dynatrace and SAP partnered to build a platform that will automatically hold back pipeline propagation for breaking changes or roll back faulty deployments that affect your end users. This allows developers to innovate fast while still having a security net which ensures if something breaks it will be fixed automatically following the mantra “Move fast and don’t break things.”

https://cfseu18.sched.com/event/G978/keynote-move-fast-and-dont-break-things-how-we-will-build-applications-in-the-future-daniela-rabiser-technical-product-manager-dynatrace-tim-gerlach-software-developer-sap
Captions: 
	00:00:00,000 --> 00:00:17,880
what up good morning Vasa how are you

00:00:15,120 --> 00:00:20,310
today it's really amazing everybody

00:00:17,880 --> 00:00:22,920
looked so happy and awake today

00:00:20,310 --> 00:00:25,920
it must be either the 5k run or the

00:00:22,920 --> 00:00:29,460
pancake breakfast thanks for that by the

00:00:25,920 --> 00:00:31,019
way by the way some of you may have

00:00:29,460 --> 00:00:33,840
recognized a song that was just played

00:00:31,019 --> 00:00:36,300
because it used to be the Formula one

00:00:33,840 --> 00:00:38,430
theme song and we've chosen

00:00:36,300 --> 00:00:40,579
intentionally of course because it fits

00:00:38,430 --> 00:00:43,829
quite well to the title of our keynote

00:00:40,579 --> 00:00:45,840
move for us and don't break things but

00:00:43,829 --> 00:00:47,850
also as a reminder to ourselves that

00:00:45,840 --> 00:00:50,820
today and now we only have ten minutes

00:00:47,850 --> 00:00:53,430
to talk so let's get right into this and

00:00:50,820 --> 00:00:56,940
talk about speed right Danilo right

00:00:53,430 --> 00:00:59,280
because as you all know speed wins in

00:00:56,940 --> 00:01:01,710
the marketplace and that has also been

00:00:59,280 --> 00:01:04,170
pointed out in the book by med Stine

00:01:01,710 --> 00:01:07,170
where he talks about migrating to cloud

00:01:04,170 --> 00:01:09,540
native application architectures and he

00:01:07,170 --> 00:01:12,840
underlines that speed is the central

00:01:09,540 --> 00:01:16,110
aspect to innovate fast and deliver

00:01:12,840 --> 00:01:19,200
value more quickly than your competitors

00:01:16,110 --> 00:01:21,840
- and in the context of software

00:01:19,200 --> 00:01:25,549
engineering that means that we need to

00:01:21,840 --> 00:01:29,579
go away from yearly or quarterly updates

00:01:25,549 --> 00:01:33,210
towards deploying software in a daily

00:01:29,579 --> 00:01:38,729
fashion or even or even in continuous

00:01:33,210 --> 00:01:40,740
bills so speed is important but the

00:01:38,729 --> 00:01:44,220
question is what brings us up to speed

00:01:40,740 --> 00:01:47,340
and most importantly what allows us to

00:01:44,220 --> 00:01:50,729
move fast and what you need is a

00:01:47,340 --> 00:01:53,729
platform like as IP cloud platform that

00:01:50,729 --> 00:01:56,450
allows you to easily build test and

00:01:53,729 --> 00:01:59,369
deploy applications in the cloud and

00:01:56,450 --> 00:02:02,040
since we all know that there is no only

00:01:59,369 --> 00:02:04,590
one cloud SP cloud platform supports you

00:02:02,040 --> 00:02:06,479
in bringing your applications to all of

00:02:04,590 --> 00:02:09,110
the big hyper scale cloud providers so

00:02:06,479 --> 00:02:12,110
wherever you need to host your workload

00:02:09,110 --> 00:02:12,110
and

00:02:13,090 --> 00:02:19,129
not as much right give me a second now

00:02:15,920 --> 00:02:21,909
um what I'm trying to say is that if you

00:02:19,129 --> 00:02:25,340
have a strong platform it acts as the

00:02:21,909 --> 00:02:28,250
foundation of your cloud native journey

00:02:25,340 --> 00:02:30,260
and since we all know that this journey

00:02:28,250 --> 00:02:31,700
can be tough sometimes as a peak cloud

00:02:30,260 --> 00:02:34,970
platform brings some additional

00:02:31,700 --> 00:02:37,730
capabilities like business and platform

00:02:34,970 --> 00:02:40,420
services so for example Iser to easily

00:02:37,730 --> 00:02:43,099
connect your existing landscapes

00:02:40,420 --> 00:02:45,319
additional runtimes like the SMP Java

00:02:43,099 --> 00:02:48,170
build pack and of course data and

00:02:45,319 --> 00:02:50,660
storage services like the S AP Hana

00:02:48,170 --> 00:02:54,709
in-memory database which in this

00:02:50,660 --> 00:02:57,680
environment is exposed via guess what a

00:02:54,709 --> 00:03:00,950
service broker so Daniella is this

00:02:57,680 --> 00:03:04,340
enough no we don't think this is enough

00:03:00,950 --> 00:03:07,190
it's not enough to go extremely fast you

00:03:04,340 --> 00:03:10,010
also need to ensure that you have safety

00:03:07,190 --> 00:03:11,930
nets that you have pitstops in place in

00:03:10,010 --> 00:03:15,349
place because you need to ensure that

00:03:11,930 --> 00:03:18,829
you do not break things so if you think

00:03:15,349 --> 00:03:22,250
of a typical deployment pipeline you

00:03:18,829 --> 00:03:25,130
have quality gates including functional

00:03:22,250 --> 00:03:27,859
tests and security scans as well as

00:03:25,130 --> 00:03:32,209
acceptance tests in place and this

00:03:27,859 --> 00:03:36,169
already provides a really proper safety

00:03:32,209 --> 00:03:39,620
net but there may be cases where only a

00:03:36,169 --> 00:03:42,290
blue green comparison shows that a new

00:03:39,620 --> 00:03:45,769
application version is performing poorly

00:03:42,290 --> 00:03:49,160
and with having a software intelligence

00:03:45,769 --> 00:03:52,639
solution like dynaTrace integrated into

00:03:49,160 --> 00:03:56,090
your deployment pipeline you would get

00:03:52,639 --> 00:03:58,910
information about the fact that your new

00:03:56,090 --> 00:04:01,760
application version is performing poorly

00:03:58,910 --> 00:04:04,519
and dynaTrace would also reject that

00:04:01,760 --> 00:04:08,329
this new version is being promoted to

00:04:04,519 --> 00:04:10,730
production but dynaTrace provides you

00:04:08,329 --> 00:04:13,459
with with much more you will get an

00:04:10,730 --> 00:04:16,340
all-in-one contextual monitoring

00:04:13,459 --> 00:04:19,880
solution that supports the full stack

00:04:16,340 --> 00:04:22,659
from the end users from the applications

00:04:19,880 --> 00:04:26,470
down to the infrastructure level all

00:04:22,659 --> 00:04:30,130
dependencies between your micro services

00:04:26,470 --> 00:04:34,560
apps containers processes hosts data

00:04:30,130 --> 00:04:39,250
centers all all of that is detected

00:04:34,560 --> 00:04:42,610
automatically by dynaTrace and on top of

00:04:39,250 --> 00:04:45,540
all that the dynaTrace AI engine will

00:04:42,610 --> 00:04:48,370
also detect if one of your Cloud Foundry

00:04:45,540 --> 00:04:51,250
applications or one of your Cloud

00:04:48,370 --> 00:04:55,960
Foundry platform components like ego

00:04:51,250 --> 00:04:57,520
cells are having problems now you all

00:04:55,960 --> 00:04:59,260
can imagine this requires quite some

00:04:57,520 --> 00:05:02,710
integration work to work perfectly

00:04:59,260 --> 00:05:06,040
together which is why s IP and entrées

00:05:02,710 --> 00:05:08,590
partnered to improve both ASAP cloud

00:05:06,040 --> 00:05:10,870
platform as well as dynaTrace to give

00:05:08,590 --> 00:05:13,330
our customers the best experience when

00:05:10,870 --> 00:05:17,020
monitoring applications with donut rice

00:05:13,330 --> 00:05:19,840
on top of ASAP cloud platform and of

00:05:17,020 --> 00:05:22,600
course also integrate it requires quite

00:05:19,840 --> 00:05:24,700
some work on all the various levels so

00:05:22,600 --> 00:05:26,560
for today we've prepared a little demo

00:05:24,700 --> 00:05:28,900
to show you at least some of the things

00:05:26,560 --> 00:05:31,240
that we've been working on recently and

00:05:28,900 --> 00:05:34,090
in order to have a demo that is both

00:05:31,240 --> 00:05:37,060
fast and reliable

00:05:34,090 --> 00:05:41,010
we decided today are to go for a short

00:05:37,060 --> 00:05:43,840
video so see you please play the video

00:05:41,010 --> 00:05:46,510
there we go so we've been using this

00:05:43,840 --> 00:05:48,729
sock shop which is an open source micro

00:05:46,510 --> 00:05:51,490
service based our web shop that you can

00:05:48,729 --> 00:05:54,130
use it employs quite some different

00:05:51,490 --> 00:05:56,830
technologies you can buy socks amazing

00:05:54,130 --> 00:05:59,290
socks by the way you can check it out

00:05:56,830 --> 00:06:01,240
add it to the card revenue card and if

00:05:59,290 --> 00:06:03,669
it fits your style you can purchase it

00:06:01,240 --> 00:06:06,130
and all that is of course deployed to us

00:06:03,669 --> 00:06:08,919
ap cloud platform so let's see how it

00:06:06,130 --> 00:06:10,810
looks like in the car cockpit and first

00:06:08,919 --> 00:06:12,880
of all since our webshop is already

00:06:10,810 --> 00:06:14,970
popular all around the world we've

00:06:12,880 --> 00:06:17,919
decided to play to deploy to multiple

00:06:14,970 --> 00:06:20,800
multiple hyperscale cloud providers so

00:06:17,919 --> 00:06:23,950
and also to five different regions so we

00:06:20,800 --> 00:06:27,729
have one in the API region in North

00:06:23,950 --> 00:06:31,060
America South America and in Europe so

00:06:27,729 --> 00:06:35,530
let's see how it looks like in the mir

00:06:31,060 --> 00:06:38,500
region now and more specifically let's

00:06:35,530 --> 00:06:40,180
drill down to cloud foundry spaces so we

00:06:38,500 --> 00:06:42,640
see here we have a stations

00:06:40,180 --> 00:06:45,220
for our integration test in a production

00:06:42,640 --> 00:06:47,890
space so let's see how it looks like in

00:06:45,220 --> 00:06:49,630
the production space there we go so we

00:06:47,890 --> 00:06:51,700
see all the applications that make up

00:06:49,630 --> 00:06:54,250
our sock shop deployed in a Bluegreen

00:06:51,700 --> 00:06:57,460
fashion this for example is the

00:06:54,250 --> 00:06:59,500
Koretz micro service which exposes the

00:06:57,460 --> 00:07:01,600
quartz API and we see some additional

00:06:59,500 --> 00:07:03,730
information like the belt pack for

00:07:01,600 --> 00:07:06,610
example yeah and speaking about build

00:07:03,730 --> 00:07:08,470
packs with dynaTrace being integrated in

00:07:06,610 --> 00:07:10,570
various build packs it has never been

00:07:08,470 --> 00:07:12,880
easier to connect your Cloud Foundry

00:07:10,570 --> 00:07:15,460
application with the dynaTrace

00:07:12,880 --> 00:07:18,160
monitoring environment all you need to

00:07:15,460 --> 00:07:20,320
do is create a a user provided service

00:07:18,160 --> 00:07:23,410
and then you will see something like

00:07:20,320 --> 00:07:25,360
this nice dashboard which provides you

00:07:23,410 --> 00:07:27,880
with an overview of the sock shop

00:07:25,360 --> 00:07:30,100
applications and all the services and

00:07:27,880 --> 00:07:32,260
their performance and we will now take a

00:07:30,100 --> 00:07:34,900
closer look at the technologies that are

00:07:32,260 --> 00:07:37,990
used by sock shop and we will focus on

00:07:34,900 --> 00:07:40,120
the Apache and note yes processes more

00:07:37,990 --> 00:07:42,790
specifically we will have a look at the

00:07:40,120 --> 00:07:46,510
carts process of which we currently have

00:07:42,790 --> 00:07:49,590
two instances running and we are now on

00:07:46,510 --> 00:07:52,570
the on the process group that is that is

00:07:49,590 --> 00:07:54,790
representing the carts process and as

00:07:52,570 --> 00:07:57,640
you can see dynaTrace automatically

00:07:54,790 --> 00:08:00,340
picks up Cloud Foundry specific metadata

00:07:57,640 --> 00:08:03,790
like the application or the space and

00:08:00,340 --> 00:08:05,950
since recently also the organization in

00:08:03,790 --> 00:08:09,670
which the application is running in and

00:08:05,950 --> 00:08:12,760
we've also supplied custom metadata via

00:08:09,670 --> 00:08:15,820
environment variables and what is also

00:08:12,760 --> 00:08:19,000
really nice is that dynaTrace is aware

00:08:15,820 --> 00:08:21,760
of the fact that we do have a blue and a

00:08:19,000 --> 00:08:24,580
green version of this card's service

00:08:21,760 --> 00:08:27,940
running in that environment and we are

00:08:24,580 --> 00:08:31,060
now switching to the blue instance of

00:08:27,940 --> 00:08:34,270
the cart service and there you again

00:08:31,060 --> 00:08:39,850
have all the Cloud Foundry specific

00:08:34,270 --> 00:08:41,050
custom metadata available cool so we've

00:08:39,850 --> 00:08:43,210
seen how it looks like in the cloud

00:08:41,050 --> 00:08:44,860
cockpit we've seen how it looks like an

00:08:43,210 --> 00:08:46,900
iron trace but how did it get get it

00:08:44,860 --> 00:08:49,390
there since we'll have conquerors we've

00:08:46,900 --> 00:08:51,400
decided to set up pipelines we have a

00:08:49,390 --> 00:08:52,329
dedicated pipeline for all of the micro

00:08:51,400 --> 00:08:54,369
services

00:08:52,329 --> 00:08:57,160
that make a bad sock shop so let's see

00:08:54,369 --> 00:08:59,559
how the cards pipeline look like

00:08:57,160 --> 00:09:01,839
well obviously the pipeline is triggered

00:08:59,559 --> 00:09:04,899
with every new get commit to a certain

00:09:01,839 --> 00:09:06,910
branch once there is a new commit we

00:09:04,899 --> 00:09:09,459
build it we deploy to our staging

00:09:06,910 --> 00:09:12,399
environment we run some health checks

00:09:09,459 --> 00:09:14,319
some custom health checks and we deploy

00:09:12,399 --> 00:09:16,869
to our production environment where we

00:09:14,319 --> 00:09:18,850
finally run some ACK some load tests and

00:09:16,869 --> 00:09:21,069
this is exactly the point where we ask

00:09:18,850 --> 00:09:22,989
dynaTrace in our pipeline whether this

00:09:21,069 --> 00:09:25,949
change can safely be promoted to

00:09:22,989 --> 00:09:28,360
production so let's see whether we can

00:09:25,949 --> 00:09:31,439
create a pull request that breaks this

00:09:28,360 --> 00:09:34,239
pipeline so we switch to pull requests

00:09:31,439 --> 00:09:35,470
yeah so there is a pull request no

00:09:34,239 --> 00:09:37,720
surprise here

00:09:35,470 --> 00:09:39,160
that checks that adds a check to the

00:09:37,720 --> 00:09:42,160
stocks when an item is added to the

00:09:39,160 --> 00:09:44,999
corage and now this time there's an

00:09:42,160 --> 00:09:50,170
exception we implemented it it

00:09:44,999 --> 00:09:51,819
deliberately in in a bad fashion and we

00:09:50,170 --> 00:09:54,009
will just merge it now of course you

00:09:51,819 --> 00:09:55,839
could run this check already by just

00:09:54,009 --> 00:09:58,179
creating a pull request but let's just

00:09:55,839 --> 00:10:02,559
for the sake of this demo merge it and

00:09:58,179 --> 00:10:04,329
fast forward a bit I love this and now

00:10:02,559 --> 00:10:07,600
this time we can see the toilet race

00:10:04,329 --> 00:10:09,639
rejects this commit and it's not being

00:10:07,600 --> 00:10:12,069
promoted to production so let's find out

00:10:09,639 --> 00:10:14,529
why Daniela yeah let's let's analyze

00:10:12,069 --> 00:10:17,169
this deployment and the change and the

00:10:14,529 --> 00:10:18,549
impact of the change in dynaTrace so on

00:10:17,169 --> 00:10:21,129
the service detail screen

00:10:18,549 --> 00:10:24,279
you already see an increased response

00:10:21,129 --> 00:10:27,519
time of the new version that has been

00:10:24,279 --> 00:10:29,919
deployed or that has been created by

00:10:27,519 --> 00:10:32,499
this change and if we now compare the

00:10:29,919 --> 00:10:35,019
two service in census the response time

00:10:32,499 --> 00:10:37,989
increase becomes even more apparent and

00:10:35,019 --> 00:10:40,629
of course we could drill down here even

00:10:37,989 --> 00:10:44,169
to the code level in dynaTrace but we

00:10:40,629 --> 00:10:46,839
also want to talk about the subtitle of

00:10:44,169 --> 00:10:48,519
our keynote directly in the stream the

00:10:46,839 --> 00:10:50,679
the screen is screaming already quite

00:10:48,519 --> 00:10:52,529
quite heavily so let's go back to the

00:10:50,679 --> 00:10:55,119
slides please

00:10:52,529 --> 00:10:58,449
so some of you may have recognized that

00:10:55,119 --> 00:11:00,459
our talk also has a subtitle which is

00:10:58,449 --> 00:11:03,610
how we will build applications in the

00:11:00,459 --> 00:11:05,289
future and a few talks before I was

00:11:03,610 --> 00:11:05,980
there wasn't I saying that the future is

00:11:05,289 --> 00:11:08,080
now and the

00:11:05,980 --> 00:11:10,570
is basically what we believe and we

00:11:08,080 --> 00:11:13,870
believe that the future is now and it

00:11:10,570 --> 00:11:16,000
has to be fast and safe if you want to

00:11:13,870 --> 00:11:17,260
find out more more we're more than happy

00:11:16,000 --> 00:11:19,900
to meet you at the SI p and the

00:11:17,260 --> 00:11:21,820
dynaTrace booth there's also going to be

00:11:19,900 --> 00:11:24,210
another session at ten past two I think

00:11:21,820 --> 00:11:27,310
in room Cairo

00:11:24,210 --> 00:11:29,080
exactly where you kept um some more

00:11:27,310 --> 00:11:31,990
insights even in the tear on the

00:11:29,080 --> 00:11:35,230
technical details thank you so much for

00:11:31,990 --> 00:11:35,680
having us wish you a great rest of the

00:11:35,230 --> 00:11:36,890
conference

00:11:35,680 --> 00:11:43,510
thank you thank you

00:11:36,890 --> 00:11:43,510

YouTube URL: https://www.youtube.com/watch?v=goQjLeh4Oyc


