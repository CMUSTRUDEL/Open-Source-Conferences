Title: Kyma: Next Gen Extension Model for Enterprise Applications - Sayan Hazra, SAP
Publication date: 2018-10-10
Playlist: Cloud Foundry Summit Europe 2018
Description: 
	Kyma: Next Gen Extension Model for Enterprise Applications - Sayan Hazra, SAP

Enterprise customers have a high demand on customizability and extensibility to fit the software they are using to their needs. In the past they had access to central parts of the software and could integrate changes on code level. This is not possible in cloud applications. Sayan Hazra will show in his talk, how Kyma is providing an extension model for cloud applications, leveraging Serverless and containerized technologies.

https://cfseu18.sched.com/event/GAU5/kyma-next-gen-extension-model-for-enterprise-applications-sayan-hazra-sap
Captions: 
	00:00:00,030 --> 00:00:05,670
hi I'm syan thanks for joining me in

00:00:03,689 --> 00:00:08,069
this talk I know there's a bunch of talk

00:00:05,670 --> 00:00:10,380
going on in parallel right now and I

00:00:08,069 --> 00:00:13,259
really appreciate your interest I hope

00:00:10,380 --> 00:00:15,480
to make it interesting for you today

00:00:13,259 --> 00:00:17,970
I'll talk about next generation

00:00:15,480 --> 00:00:22,400
extension model for enterprise

00:00:17,970 --> 00:00:25,430
applications so what we'll look at is

00:00:22,400 --> 00:00:27,449
everything is moving to the cloud and

00:00:25,430 --> 00:00:33,510
enterprise software is the next step

00:00:27,449 --> 00:00:36,140
exception so it's it comes with a lot of

00:00:33,510 --> 00:00:39,570
problems when enter bryce oft where is

00:00:36,140 --> 00:00:42,290
tuned to a customer's needs and it

00:00:39,570 --> 00:00:44,910
writes all sorts of extensions and

00:00:42,290 --> 00:00:47,039
deploy to the cloud we'll talk about how

00:00:44,910 --> 00:00:49,710
we solve that using servlets I will

00:00:47,039 --> 00:00:53,039
introduce you to a new software called

00:00:49,710 --> 00:00:57,270
kima which is open source followed by a

00:00:53,039 --> 00:00:59,309
demo so again my name is Sian I'm a

00:00:57,270 --> 00:01:02,730
developer with SME customer experience

00:00:59,309 --> 00:01:07,380
we deal with end-to-end ecommerce

00:01:02,730 --> 00:01:17,280
solution in a rapidly scalable cloud

00:01:07,380 --> 00:01:21,270
landscape support applications as the

00:01:17,280 --> 00:01:24,180
say make the big ship move this big ship

00:01:21,270 --> 00:01:27,750
which can be compared to a enterprise

00:01:24,180 --> 00:01:30,570
software it has a bunch of features to

00:01:27,750 --> 00:01:32,430
it right that's there for the reason

00:01:30,570 --> 00:01:36,030
it's solving problems for big

00:01:32,430 --> 00:01:39,030
enterprises but in order to tell it to

00:01:36,030 --> 00:01:41,820
for specific customer needs customer

00:01:39,030 --> 00:01:45,530
right extensions and then moving this

00:01:41,820 --> 00:01:54,149
big ship gets there's a big hassle

00:01:45,530 --> 00:01:56,729
around it so let's dig deep so a bunch

00:01:54,149 --> 00:01:59,610
of our customers are using on premised

00:01:56,729 --> 00:02:01,560
model so what happens is they write

00:01:59,610 --> 00:02:03,899
extensions they develop in their

00:02:01,560 --> 00:02:06,390
unpromising along with the extensions a

00:02:03,899 --> 00:02:09,000
typical extension development lifecycle

00:02:06,390 --> 00:02:13,590
would be you write the extensions of

00:02:09,000 --> 00:02:17,640
course and then you test it and then you

00:02:13,590 --> 00:02:19,860
so one advantage to this process is you

00:02:17,640 --> 00:02:22,349
have close connection to the code the

00:02:19,860 --> 00:02:25,080
developers had closed connection with

00:02:22,349 --> 00:02:28,739
the code meaning if there is anything

00:02:25,080 --> 00:02:31,099
breaking during deployment a developer

00:02:28,739 --> 00:02:35,099
could take a look or fix it if needed

00:02:31,099 --> 00:02:37,769
this was all good but then upgrade sort

00:02:35,099 --> 00:02:40,170
of problem because AB extensions were

00:02:37,769 --> 00:02:44,489
tightly coupled to the core and you

00:02:40,170 --> 00:02:49,620
couldn't upgrade easily and in the end

00:02:44,489 --> 00:02:51,120
what happened was customers was running

00:02:49,620 --> 00:02:54,380
primitive versions of the enterprise

00:02:51,120 --> 00:03:00,450
software so this was not the way to go

00:02:54,380 --> 00:03:02,760
so Andrew Kim cloud model Oh let me set

00:03:00,450 --> 00:03:04,590
the context so in a cloud model what

00:03:02,760 --> 00:03:06,269
happens developers would write the

00:03:04,590 --> 00:03:08,370
extensions give it to the operator

00:03:06,269 --> 00:03:10,140
operator will package with with the core

00:03:08,370 --> 00:03:13,349
of the enterprise software and then

00:03:10,140 --> 00:03:17,250
deploy it but there are two problems

00:03:13,349 --> 00:03:20,190
with this one would be the developer

00:03:17,250 --> 00:03:23,010
then have close contact with the code so

00:03:20,190 --> 00:03:25,350
as a result the operator would deploy in

00:03:23,010 --> 00:03:28,290
his own schedule there can be time

00:03:25,350 --> 00:03:31,079
differences whatsoever so there is no

00:03:28,290 --> 00:03:32,910
immediate feedback and there's a long

00:03:31,079 --> 00:03:34,739
deploy time along with maintenance

00:03:32,910 --> 00:03:37,920
window because we are dealing with a

00:03:34,739 --> 00:03:41,280
beast of a software right and it's often

00:03:37,920 --> 00:03:44,880
bundled with other objects it's done

00:03:41,280 --> 00:03:46,739
that that way because this process is

00:03:44,880 --> 00:03:51,480
expensive you don't want to do that too

00:03:46,739 --> 00:03:53,639
often and then the operator who is

00:03:51,480 --> 00:03:56,400
handling the core with extensions is

00:03:53,639 --> 00:03:57,599
having a varied set of extensions right

00:03:56,400 --> 00:03:58,950
there's a bunch of customers so the

00:03:57,599 --> 00:04:01,489
different needs different sorts of

00:03:58,950 --> 00:04:03,900
extensions and that resulted in

00:04:01,489 --> 00:04:06,269
snowflake deployments troubleshooting

00:04:03,900 --> 00:04:12,560
became a nightmare and it was really

00:04:06,269 --> 00:04:12,560
hard to update so

00:04:14,630 --> 00:04:20,160
we'll take a look what service is and

00:04:17,100 --> 00:04:22,110
then I'll try to connect the dots by

00:04:20,160 --> 00:04:23,600
solving the problem that I stated with

00:04:22,110 --> 00:04:29,790
kima

00:04:23,600 --> 00:04:32,000
so as for more info on comm who has all

00:04:29,790 --> 00:04:35,370
the definitions of the latest buzz words

00:04:32,000 --> 00:04:38,250
it thermal is composed of three basic

00:04:35,370 --> 00:04:40,680
things the first is an ecosystem of

00:04:38,250 --> 00:04:44,070
third party services which will work

00:04:40,680 --> 00:04:47,480
with client-side logic and that all will

00:04:44,070 --> 00:04:50,280
be wired with remote procedure calls

00:04:47,480 --> 00:04:53,010
which is hosted so you don't have to

00:04:50,280 --> 00:04:54,420
deal with servers but this is pretty

00:04:53,010 --> 00:04:59,730
obscure right now let's look at it

00:04:54,420 --> 00:05:02,010
pictorially okay so that's that's a

00:04:59,730 --> 00:05:03,780
cloud in you're left with a bunch of

00:05:02,010 --> 00:05:05,820
managed services that can be

00:05:03,780 --> 00:05:09,690
authentication service mail server or

00:05:05,820 --> 00:05:11,910
even database service which is used by a

00:05:09,690 --> 00:05:14,180
client logic can be a Java JavaScript

00:05:11,910 --> 00:05:16,110
single page application

00:05:14,180 --> 00:05:18,510
imagine that a user needs to

00:05:16,110 --> 00:05:20,370
authenticate it so the client code can

00:05:18,510 --> 00:05:24,060
straightaway use the authentication

00:05:20,370 --> 00:05:25,920
service from the cloud provider and then

00:05:24,060 --> 00:05:28,230
comes this lambda which is the function

00:05:25,920 --> 00:05:31,050
of the fashion as a service so function

00:05:28,230 --> 00:05:33,450
as a service there you would write on

00:05:31,050 --> 00:05:36,030
the backend code and mash them in order

00:05:33,450 --> 00:05:38,820
to serve the single page application and

00:05:36,030 --> 00:05:44,030
in turn it's going to use this bunch of

00:05:38,820 --> 00:05:44,030
third party services in the cloud a

00:05:44,600 --> 00:05:51,510
disclaimer here is fast is not the same

00:05:48,030 --> 00:05:55,020
as service so fast is just your back-end

00:05:51,510 --> 00:05:57,270
service back-end code running on servers

00:05:55,020 --> 00:06:00,650
which you don't have to take care but

00:05:57,270 --> 00:06:03,030
service is the whole ecosystem of fast

00:06:00,650 --> 00:06:08,940
third party services and your client

00:06:03,030 --> 00:06:10,710
code all wired up together so let me

00:06:08,940 --> 00:06:14,010
introduce you to kima this is open

00:06:10,710 --> 00:06:17,310
source and it's pronounced the schema is

00:06:14,010 --> 00:06:20,090
a Greek word it means waves as in wave

00:06:17,310 --> 00:06:20,090
of to sea

00:06:22,570 --> 00:06:28,729
so what happens in keema is the hexagon

00:06:27,139 --> 00:06:33,080
is the keema which is running on Cuban

00:06:28,729 --> 00:06:35,930
Aries and the lambdas represent the

00:06:33,080 --> 00:06:39,560
functions in circles and the hexagons

00:06:35,930 --> 00:06:42,280
are microservices so what we are saying

00:06:39,560 --> 00:06:45,100
is we could extend enterprise software

00:06:42,280 --> 00:06:46,850
by writing either lambdas or

00:06:45,100 --> 00:06:48,830
micro-services which is running on

00:06:46,850 --> 00:06:51,380
kubernetes and it still plays an

00:06:48,830 --> 00:06:53,979
important role where it provides a

00:06:51,380 --> 00:06:58,370
service mess around all the services

00:06:53,979 --> 00:07:01,820
even it has a pluggable policy layer

00:06:58,370 --> 00:07:06,260
which enables you to control rate limits

00:07:01,820 --> 00:07:07,729
or access control quotas and with cuban

00:07:06,260 --> 00:07:10,310
areas we get all the cloud native

00:07:07,729 --> 00:07:13,699
features like scalability or fault

00:07:10,310 --> 00:07:16,010
tolerance to name a few and these are

00:07:13,699 --> 00:07:18,289
all isolated from each other in cuban

00:07:16,010 --> 00:07:20,240
areas world there is pods which is a

00:07:18,289 --> 00:07:23,060
group which is a collection of one or

00:07:20,240 --> 00:07:26,060
more containers and that way each lambda

00:07:23,060 --> 00:07:32,060
can be scaled or brought down without

00:07:26,060 --> 00:07:34,010
any impact to the surrounding and now

00:07:32,060 --> 00:07:37,070
this enterprise software which gets

00:07:34,010 --> 00:07:39,710
hooked to Kemah through applications

00:07:37,070 --> 00:07:43,340
connector an application connector is

00:07:39,710 --> 00:07:46,669
the secure channel from your anywhere to

00:07:43,340 --> 00:07:49,520
Kemah in a true service world it's

00:07:46,669 --> 00:07:52,099
always even driven wear some events

00:07:49,520 --> 00:07:54,080
trigger your computer stateless

00:07:52,099 --> 00:07:58,340
functions and do a certain job and

00:07:54,080 --> 00:08:00,620
that's the reason we have an even bus

00:07:58,340 --> 00:08:04,940
integrated with Kiba it's based on NAT

00:08:00,620 --> 00:08:07,280
streaming and there were ice try this

00:08:04,940 --> 00:08:09,229
show like the events flowing from the

00:08:07,280 --> 00:08:11,240
enterprise software to Kemah to trigger

00:08:09,229 --> 00:08:17,090
these lambdas or micro-services solving

00:08:11,240 --> 00:08:21,320
a problem next piece here which is a

00:08:17,090 --> 00:08:23,539
Service Catalog so we said we need an

00:08:21,320 --> 00:08:26,180
ecosystem of third party services right

00:08:23,539 --> 00:08:30,620
so that's what Service Catalog enables

00:08:26,180 --> 00:08:34,630
in Cuba Nettie's will take a look in the

00:08:30,620 --> 00:08:34,630
in detail the next slide

00:08:35,509 --> 00:08:42,300
so we have this console UI which lets

00:08:40,079 --> 00:08:46,439
you manage all the resources in

00:08:42,300 --> 00:08:48,239
kubernetes as well as schema like kima

00:08:46,439 --> 00:08:50,759
uses a lot of custom resource

00:08:48,239 --> 00:08:53,519
definitions so custom resource

00:08:50,759 --> 00:08:56,339
definitions in cuban Ares is a way to

00:08:53,519 --> 00:08:58,709
extend cuban and his API in order to do

00:08:56,339 --> 00:09:01,939
a custom functionality we use

00:08:58,709 --> 00:09:04,350
extensively to do certain piece of

00:09:01,939 --> 00:09:08,730
function in kima

00:09:04,350 --> 00:09:13,980
and you may use a graphical user as well

00:09:08,730 --> 00:09:17,610
as console CLI to do a certain job and

00:09:13,980 --> 00:09:25,549
this API Gateway lets you control all

00:09:17,610 --> 00:09:29,759
the ingress egress into the cluster so

00:09:25,549 --> 00:09:32,279
service catalog service catalog in

00:09:29,759 --> 00:09:35,519
extends queuing and is API in order to

00:09:32,279 --> 00:09:38,549
use the applications in order to make

00:09:35,519 --> 00:09:40,319
use of the third-party services in your

00:09:38,549 --> 00:09:43,379
applications running in Cuban Andes and

00:09:40,319 --> 00:09:46,679
you could hook service brokers which are

00:09:43,379 --> 00:09:51,360
following open service broker API spec

00:09:46,679 --> 00:09:54,420
in order to list provision and bind the

00:09:51,360 --> 00:09:56,959
services to your functions or micro

00:09:54,420 --> 00:10:00,959
services and since its well-known

00:09:56,959 --> 00:10:06,749
with all the renowned to our providers

00:10:00,959 --> 00:10:10,709
so essentially you can use most common

00:10:06,749 --> 00:10:16,889
or the useful manage services in kheema

00:10:10,709 --> 00:10:20,749
to solve a problem so let's zoom into

00:10:16,889 --> 00:10:20,749
you the fast in kheema a bit

00:10:24,620 --> 00:10:34,170
so right now in keema we are leveraging

00:10:29,190 --> 00:10:37,650
cube less to to work as a platform as

00:10:34,170 --> 00:10:40,620
function as a service platform so what

00:10:37,650 --> 00:10:42,270
happens is you write a function and then

00:10:40,620 --> 00:10:46,110
it gets stored as a custom resources

00:10:42,270 --> 00:10:48,960
definition inside Kiba and there is Cube

00:10:46,110 --> 00:10:50,970
less controller manager which kicks in

00:10:48,960 --> 00:10:55,290
and it creates deployment pods and

00:10:50,970 --> 00:10:57,600
services for that function so a function

00:10:55,290 --> 00:11:00,660
again it's a part running inside Cuba

00:10:57,600 --> 00:11:04,370
Nettie's which is totally isolated from

00:11:00,660 --> 00:11:08,130
all other functions on micro-services

00:11:04,370 --> 00:11:09,870
now you may trigger the function in two

00:11:08,130 --> 00:11:13,020
different ways the first one would be

00:11:09,870 --> 00:11:15,360
through HTTP you could expose the

00:11:13,020 --> 00:11:21,720
function outside the key McCluster

00:11:15,360 --> 00:11:26,850
in a secured way with HTTP in turn we

00:11:21,720 --> 00:11:31,830
use a serial API and bunch of sto series

00:11:26,850 --> 00:11:34,440
as well to achieve this or there can be

00:11:31,830 --> 00:11:35,130
a trigger coming from outside landing

00:11:34,440 --> 00:11:38,100
into Nats

00:11:35,130 --> 00:11:40,860
or the even bus it has a few more

00:11:38,100 --> 00:11:43,860
components is the even buses just based

00:11:40,860 --> 00:11:49,890
on Nats and that's gonna trigger the

00:11:43,860 --> 00:11:54,000
function to work and finally we would

00:11:49,890 --> 00:11:56,970
set the context the context using the

00:11:54,000 --> 00:11:59,880
service binding so using the service

00:11:56,970 --> 00:12:03,210
catalog we got instantiate a service

00:11:59,880 --> 00:12:06,120
instance which we will bind to a lambda

00:12:03,210 --> 00:12:09,450
or a micro service using service binding

00:12:06,120 --> 00:12:12,150
and what happens is the connection

00:12:09,450 --> 00:12:15,720
details or the secrets gets injected to

00:12:12,150 --> 00:12:18,750
the lambda function and the user can

00:12:15,720 --> 00:12:21,980
just use it without knowing much like

00:12:18,750 --> 00:12:21,980
the details about it

00:12:25,000 --> 00:12:34,760
so few aspects of operations inside

00:12:28,870 --> 00:12:37,459
keema it comes with it is packaged with

00:12:34,760 --> 00:12:40,310
well-known solutions like Prometheus

00:12:37,459 --> 00:12:44,920
were fond ofor monitoring for logging we

00:12:40,310 --> 00:12:48,350
use ok log and for tracing Jaeger and

00:12:44,920 --> 00:12:51,110
under the hood it's all Cuban NZ steel

00:12:48,350 --> 00:12:54,980
which is done so what we're saying is a

00:12:51,110 --> 00:12:59,240
developer can enjoy the cream which is

00:12:54,980 --> 00:13:03,199
the built-in dashboards or the UI is to

00:12:59,240 --> 00:13:05,720
track and debug the micro services and

00:13:03,199 --> 00:13:08,329
we take care of the platform which is

00:13:05,720 --> 00:13:10,399
running on cuban ëracistí o and open

00:13:08,329 --> 00:13:13,160
tracing locks pod is used to feed the

00:13:10,399 --> 00:13:18,980
logs to oka log so that it can be viewed

00:13:13,160 --> 00:13:23,660
in the UI so let's look at the demo

00:13:18,980 --> 00:13:26,930
scenario I were recording for the demo

00:13:23,660 --> 00:13:28,089
and I think that will never break for

00:13:26,930 --> 00:13:33,380
sure

00:13:28,089 --> 00:13:38,510
ok so what I have here of course I have

00:13:33,380 --> 00:13:42,820
a keema cluster a lambda which is

00:13:38,510 --> 00:13:45,980
listening to an event and that's gonna

00:13:42,820 --> 00:13:48,949
now this schema cluster is in turn

00:13:45,980 --> 00:13:51,399
connected to the center of a software in

00:13:48,949 --> 00:13:56,440
this case I'll be using SME cloud

00:13:51,399 --> 00:13:58,699
commerce cloud Enterprise Edition and

00:13:56,440 --> 00:14:03,040
lambda will be listening to an even call

00:13:58,699 --> 00:14:08,149
order created and once this even gets

00:14:03,040 --> 00:14:11,269
triggered the lambda is executed which

00:14:08,149 --> 00:14:14,360
in turn makes a call to the commerce

00:14:11,269 --> 00:14:18,410
cloud through OCC API and get details

00:14:14,360 --> 00:14:20,449
more about the order and then it calls a

00:14:18,410 --> 00:14:25,069
micro service called HTTP DB service

00:14:20,449 --> 00:14:29,350
which will in turn soar the details in

00:14:25,069 --> 00:14:32,019
Azure sequel that's the DB service

00:14:29,350 --> 00:14:35,390
provision in Azure

00:14:32,019 --> 00:14:36,940
which we'll use as your open service

00:14:35,390 --> 00:14:40,930
broker for that

00:14:36,940 --> 00:14:44,800
and this micro UI is used to view the

00:14:40,930 --> 00:14:47,800
order details which will be fetching the

00:14:44,800 --> 00:14:52,950
records from Azure sequel using the

00:14:47,800 --> 00:14:52,950
micro service so let's see it in action

00:15:00,660 --> 00:15:06,780
okay so these are the environments here

00:15:02,960 --> 00:15:12,090
we are working with CF some edu what

00:15:06,780 --> 00:15:15,660
this means is right so environment is a

00:15:12,090 --> 00:15:17,790
namespace in kheema but with a few

00:15:15,660 --> 00:15:22,830
tweaks so we have resource coders and

00:15:17,790 --> 00:15:26,130
others enabled will be working with CF

00:15:22,830 --> 00:15:28,680
some edu and here we can work with a

00:15:26,130 --> 00:15:31,280
bunch of cuban areas resources as well

00:15:28,680 --> 00:15:34,170
as schema resources through the UI oh

00:15:31,280 --> 00:15:38,430
this is really at the load there's an

00:15:34,170 --> 00:15:40,710
administration tab okay in the

00:15:38,430 --> 00:15:45,480
administration you could download the

00:15:40,710 --> 00:15:47,160
cue config and work in terminal these

00:15:45,480 --> 00:15:49,590
are the bunch of service brokers already

00:15:47,160 --> 00:15:57,510
provisioned i have as your broker with

00:15:49,590 --> 00:15:59,490
me and some other brokers so here is

00:15:57,510 --> 00:16:02,060
link to the graph our dashboards which

00:15:59,490 --> 00:16:02,060
we package

00:16:08,529 --> 00:16:14,739
all right so now let's see it in action

00:16:11,619 --> 00:16:17,559
okay so we have a bunch of dogs already

00:16:14,739 --> 00:16:20,369
integrated in the UI as well it's there

00:16:17,559 --> 00:16:20,369
in the website too

00:16:24,419 --> 00:16:34,719
great so now let's get into action so

00:16:30,579 --> 00:16:38,229
remote environments once an enterprise

00:16:34,719 --> 00:16:39,999
software gets registered to Kemah we use

00:16:38,229 --> 00:16:41,769
a remote environment custom resource

00:16:39,999 --> 00:16:45,009
definition to store the metadata of the

00:16:41,769 --> 00:16:49,179
connections so I've already registered

00:16:45,009 --> 00:16:52,419
in ICI default the cloud commerce

00:16:49,179 --> 00:16:57,459
environment in order to use that I need

00:16:52,419 --> 00:17:01,409
to bind it to my namespace which is C F

00:16:57,459 --> 00:17:01,409
summary you that's right

00:17:01,499 --> 00:17:11,939
and once it's bound I can use the

00:17:08,829 --> 00:17:11,939
service catalog

00:17:16,650 --> 00:17:23,910
okay so what happens here in that once

00:17:22,020 --> 00:17:26,850
we register the enterprise software or

00:17:23,910 --> 00:17:29,850
the commerce cloud here it comes with

00:17:26,850 --> 00:17:32,220
two service in the Service Catalog

00:17:29,850 --> 00:17:35,610
the first one is events because we'll be

00:17:32,220 --> 00:17:38,850
listening to the events and reacting

00:17:35,610 --> 00:17:43,710
based on that so we need to create a

00:17:38,850 --> 00:17:47,270
service instance to use it in our

00:17:43,710 --> 00:17:49,320
environment that's what we're doing here

00:17:47,270 --> 00:17:51,809
well change the name just to make a

00:17:49,320 --> 00:17:57,809
chart otherwise it just generates a

00:17:51,809 --> 00:18:02,309
unique name every time okay and the next

00:17:57,809 --> 00:18:04,620
piece is this guy so what it does is the

00:18:02,309 --> 00:18:06,900
lambda when it gets triggered it's gonna

00:18:04,620 --> 00:18:09,630
make a few call to the enterprise

00:18:06,900 --> 00:18:12,480
software to get more details so in order

00:18:09,630 --> 00:18:17,040
to get the read API is from the

00:18:12,480 --> 00:18:20,280
enterprise commerce we need to create a

00:18:17,040 --> 00:18:22,980
service instance for that so this is the

00:18:20,280 --> 00:18:27,780
whole API and we'll be just using one

00:18:22,980 --> 00:18:29,220
endpoint to get the order details here

00:18:27,780 --> 00:18:37,290
we are binding it to the environment

00:18:29,220 --> 00:18:45,090
that we gonna use so essentially we are

00:18:37,290 --> 00:18:46,470
creating two service instances one for

00:18:45,090 --> 00:18:54,480
the events our other for the API in

00:18:46,470 --> 00:18:59,059
order to use it in our lambda okay move

00:18:54,480 --> 00:18:59,059
on great awesome

00:19:00,670 --> 00:19:05,680
okay next comes the lambda I've already

00:19:03,790 --> 00:19:08,800
created the lambda before I'll just

00:19:05,680 --> 00:19:11,730
explain what we do it here so first we

00:19:08,800 --> 00:19:15,280
are trying to subscribe to an event here

00:19:11,730 --> 00:19:19,960
order created among this bunch of events

00:19:15,280 --> 00:19:26,830
which are available and in the lambda

00:19:19,960 --> 00:19:30,520
what do we do is um yeah I'm gonna

00:19:26,830 --> 00:19:32,830
explain once okay so this request get

00:19:30,520 --> 00:19:36,420
will actually make a call to the end of

00:19:32,830 --> 00:19:39,010
our software our API to get more details

00:19:36,420 --> 00:19:42,340
that's the first call and the second

00:19:39,010 --> 00:19:44,680
call is to the AC DB DB service which is

00:19:42,340 --> 00:19:49,240
a micro service deployed next to the

00:19:44,680 --> 00:19:51,880
function pod to add the record - there's

00:19:49,240 --> 00:19:54,340
your DB that's what that's the call out

00:19:51,880 --> 00:19:57,640
here we said the URL the call is here

00:19:54,340 --> 00:20:01,600
the post and now what we're doing is

00:19:57,640 --> 00:20:07,210
we're binding to the service instance of

00:20:01,600 --> 00:20:09,190
that API in order to use it what happens

00:20:07,210 --> 00:20:12,550
the back room is a service binding gets

00:20:09,190 --> 00:20:19,420
created an event an environment variable

00:20:12,550 --> 00:20:21,910
called gateway URL is present to be used

00:20:19,420 --> 00:20:29,770
in order to reach the enterprise

00:20:21,910 --> 00:20:32,140
software API great I think we are set so

00:20:29,770 --> 00:20:35,140
finally there are three deployments in

00:20:32,140 --> 00:20:40,270
action here the first one is this guy it

00:20:35,140 --> 00:20:42,340
contains the function and then the HTTP

00:20:40,270 --> 00:20:46,170
DB service which inserts a record

00:20:42,340 --> 00:20:46,170
details to the azure DB

00:20:51,250 --> 00:20:59,690
and finally the UI which pulls up the

00:20:55,700 --> 00:21:02,810
information from those your DB and the

00:20:59,690 --> 00:21:06,640
this micro service is already exposed

00:21:02,810 --> 00:21:09,850
this API section this is exposed using

00:21:06,640 --> 00:21:14,570
the URL in here which we will access

00:21:09,850 --> 00:21:16,280
shortly so of course there are no orders

00:21:14,570 --> 00:21:18,500
right now we will try to create an order

00:21:16,280 --> 00:21:28,010
in the enterprise Commerce or the ASAP

00:21:18,500 --> 00:21:31,450
cloud platform and then we and then that

00:21:28,010 --> 00:21:31,450
order should be visible in the UI

00:21:42,350 --> 00:21:48,139
great the order is created which is

00:21:44,600 --> 00:21:49,580
three 1:09 and what happens at the

00:21:48,139 --> 00:21:53,259
background the lambda gets triggered and

00:21:49,580 --> 00:22:01,759
everything and we get to see it in the

00:21:53,259 --> 00:22:07,809
UI and now a few more details on this

00:22:01,759 --> 00:22:14,120
kima console we could expose a function

00:22:07,809 --> 00:22:16,279
using HTTP in here and this is an

00:22:14,120 --> 00:22:21,590
authentication service which is

00:22:16,279 --> 00:22:24,409
compatible with JW KS and in out of the

00:22:21,590 --> 00:22:28,029
box kima we do provide an authentication

00:22:24,409 --> 00:22:31,009
service but technically you could have

00:22:28,029 --> 00:22:33,019
any authentication service which is

00:22:31,009 --> 00:22:38,840
compatible with j-dub Lukas hooked into

00:22:33,019 --> 00:22:42,860
kima and that's gonna work in here this

00:22:38,840 --> 00:22:46,450
is a token part if you want to take the

00:22:42,860 --> 00:22:46,450
token and make it a call by yourself

00:22:47,830 --> 00:22:52,639
okay so this is the whole service

00:22:50,330 --> 00:22:55,039
catalogue in detail since we have as

00:22:52,639 --> 00:22:57,110
your broker enabled you see is a bunch

00:22:55,039 --> 00:23:00,980
of adjust manage services already

00:22:57,110 --> 00:23:07,730
available to be used in kima but we use

00:23:00,980 --> 00:23:11,210
as your secure database 4.0 which is

00:23:07,730 --> 00:23:13,159
used in HTTP DB service in here through

00:23:11,210 --> 00:23:16,429
this service instance that's all we're

00:23:13,159 --> 00:23:18,320
saying now this is the graph our

00:23:16,429 --> 00:23:22,009
dashboard which is already packaged with

00:23:18,320 --> 00:23:24,159
kima this is a lambda dashboard we see

00:23:22,009 --> 00:23:28,070
just one data point which was successful

00:23:24,159 --> 00:23:33,490
it has response success rate response

00:23:28,070 --> 00:23:37,909
time and request read and other stuff

00:23:33,490 --> 00:23:40,730
but we I have another function which is

00:23:37,909 --> 00:23:43,549
stress which has a lot more data points

00:23:40,730 --> 00:23:48,409
and hence that we can see some data

00:23:43,549 --> 00:23:50,779
coming in here but it's not just there

00:23:48,409 --> 00:23:52,760
we have a bunch of dashboards already

00:23:50,779 --> 00:23:56,120
packaged in kima from cuban areas

00:23:52,760 --> 00:24:02,690
overall monitoring to the east

00:23:56,120 --> 00:24:04,760
related network overview so and an user

00:24:02,690 --> 00:24:06,350
can create customized dashboards and

00:24:04,760 --> 00:24:12,770
save it so this is the Cuban Eddie's

00:24:06,350 --> 00:24:16,520
overall overview and then pods are nodes

00:24:12,770 --> 00:24:22,210
or this is the nodes dashboard so this

00:24:16,520 --> 00:24:27,320
is all packaged with kima for now and

00:24:22,210 --> 00:24:30,289
now a request is reaching a bunch of

00:24:27,320 --> 00:24:32,929
micro services inside kima right now

00:24:30,289 --> 00:24:35,240
debugging is a pretty big issue if we

00:24:32,929 --> 00:24:38,929
contrast them that's the reason why we

00:24:35,240 --> 00:24:43,880
have Jaeger already integrated with kima

00:24:38,929 --> 00:24:46,220
and this is the Jaeger UI so what we see

00:24:43,880 --> 00:24:48,620
here is the first call came to connector

00:24:46,220 --> 00:24:50,929
so the application connector is the

00:24:48,620 --> 00:24:52,270
event came through application connector

00:24:50,929 --> 00:24:54,950
to kima

00:24:52,270 --> 00:24:57,820
so that's the reason we see connector

00:24:54,950 --> 00:25:01,179
out here followed by publish and push

00:24:57,820 --> 00:25:08,000
those are the components of event bus

00:25:01,179 --> 00:25:11,260
which in turn triggers the CF yeah CF

00:25:08,000 --> 00:25:15,710
order service which is the function

00:25:11,260 --> 00:25:18,919
which in turn calls the ICI gateway to

00:25:15,710 --> 00:25:22,940
fetch the orders so the first rest call

00:25:18,919 --> 00:25:24,830
to the enterprise software EC is a bit

00:25:22,940 --> 00:25:27,440
confusing term like ez term is going

00:25:24,830 --> 00:25:29,149
away it's called enterprise commerce it

00:25:27,440 --> 00:25:32,029
used to be called now it's called sop

00:25:29,149 --> 00:25:36,890
cloud commerce so we have still easy out

00:25:32,029 --> 00:25:40,610
here that's what's the same thing right

00:25:36,890 --> 00:25:45,010
and this is the lambda trigger followed

00:25:40,610 --> 00:25:47,600
by EC gateway and HTTP DB service and

00:25:45,010 --> 00:25:51,649
everything is part of service mass

00:25:47,600 --> 00:25:54,529
because sto is enabled and this is

00:25:51,649 --> 00:25:58,850
possible using SEO proxy which is a

00:25:54,529 --> 00:26:02,409
sidecar to every deployments hence we

00:25:58,850 --> 00:26:02,409
see is to proxy in all the calls

00:26:04,690 --> 00:26:20,240
great so that's it now let me go back to

00:26:12,740 --> 00:26:23,480
my slides okay it's still on so what we

00:26:20,240 --> 00:26:26,059
want to take away from today's talk I

00:26:23,480 --> 00:26:29,000
want to leave you with how we decoupled

00:26:26,059 --> 00:26:31,190
the enterprise software the extensions

00:26:29,000 --> 00:26:34,490
developed in enterprise software in a

00:26:31,190 --> 00:26:35,899
different platform now agility is back

00:26:34,490 --> 00:26:40,610
in the business because you can

00:26:35,899 --> 00:26:44,480
experiment you can try out few things in

00:26:40,610 --> 00:26:47,210
a fearless manner in kheema and the

00:26:44,480 --> 00:26:50,750
extension developers are in control of

00:26:47,210 --> 00:26:52,549
the code that they write and ASAP takes

00:26:50,750 --> 00:26:53,120
care of the core upgrades wherever

00:26:52,549 --> 00:26:56,330
possible

00:26:53,120 --> 00:27:00,279
so in a way we can move a lot faster

00:26:56,330 --> 00:27:02,450
than before and everything is

00:27:00,279 --> 00:27:08,360
characterized by highly climbed many

00:27:02,450 --> 00:27:11,649
features and we have deterministic

00:27:08,360 --> 00:27:14,270
deployments by their what I mean is

00:27:11,649 --> 00:27:15,559
operator now doesn't need to deal with

00:27:14,270 --> 00:27:18,529
third-party code

00:27:15,559 --> 00:27:20,690
he knows his core if anything goes wrong

00:27:18,529 --> 00:27:23,960
that would be easier to debug than

00:27:20,690 --> 00:27:26,000
handling third-party code and of course

00:27:23,960 --> 00:27:28,760
it's secure with this you and everything

00:27:26,000 --> 00:27:33,110
so I encourage you to try this out today

00:27:28,760 --> 00:27:36,730
if not it's available in github their

00:27:33,110 --> 00:27:39,940
schema project at i/o we have a bunch of

00:27:36,730 --> 00:27:42,830
documentation out there we are pretty

00:27:39,940 --> 00:27:45,919
responsive in the community community

00:27:42,830 --> 00:27:48,380
snack Channel and active and Twitter

00:27:45,919 --> 00:27:53,029
peers are always welcome feedbacks

00:27:48,380 --> 00:27:54,860
commands just let us know thanks for

00:27:53,029 --> 00:27:57,770
your attention and if you have questions

00:27:54,860 --> 00:28:00,860
I can take right now y'all grab me in

00:27:57,770 --> 00:28:05,419
the conference I can answer a few more

00:28:00,860 --> 00:28:09,320
questions or discuss about golang or

00:28:05,419 --> 00:28:10,340
distributed systems Thanks

00:28:09,320 --> 00:28:14,280
you

00:28:10,340 --> 00:28:14,280

YouTube URL: https://www.youtube.com/watch?v=Dyu2bq-LFNA


