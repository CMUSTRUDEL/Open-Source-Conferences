Title: How CF Container Runtime Integrates Cloud Foundry and Kubernetes
Publication date: 2018-12-13
Playlist: How Cloud Foundry Integrates Kubernetes into Open Source Projects
Description: 
	Interested to learn how Cloud Foundry projects are integrating Kubernetes into their technology? Chip Childers, CTO of Cloud Foundry Foundation, walks you through CF Container Runtime. CF Container Runtime offers a uniform way to instantiate, deploy, and manage highly available Kubernetes clusters on a cloud platform using CF BOSH -- a perfect solution for operators and developers deploying and managing fleets of Kubernetes clusters.

Learn about CF Containerization:  https://youtu.be/SxTsytSpp-g
Learn about Project Eirini: https://youtu.be/wT1ZImIYkrs
Learn about all three: https://www.youtube.com/watch?v=CwAmh8MdWCg&t=13s
Captions: 
	00:00:00,060 --> 00:00:04,740
[Music]

00:00:02,030 --> 00:00:06,420
hi I'm chip CTO of the clock founders

00:00:04,740 --> 00:00:07,859
Foundation recently we've been spending

00:00:06,420 --> 00:00:09,900
a lot of time as a community talking

00:00:07,859 --> 00:00:11,610
about lots of really interesting

00:00:09,900 --> 00:00:14,219
projects that are integrating kubernetes

00:00:11,610 --> 00:00:16,020
into the Cloud Foundry family of open

00:00:14,219 --> 00:00:18,300
source efforts so the first project is

00:00:16,020 --> 00:00:20,250
the Cloud Foundry container runtime this

00:00:18,300 --> 00:00:21,990
is a project that pivotal and Google

00:00:20,250 --> 00:00:24,180
started initially together they called

00:00:21,990 --> 00:00:25,830
it Kubo back then vmware quickly got

00:00:24,180 --> 00:00:28,230
involved and since then it joins the

00:00:25,830 --> 00:00:29,640
Cloud Foundry Foundation as a incubating

00:00:28,230 --> 00:00:31,140
project the whole goal of the class

00:00:29,640 --> 00:00:33,989
foundry container runtime is to make

00:00:31,140 --> 00:00:37,410
deploying managing and upgrading

00:00:33,989 --> 00:00:39,840
kubernetes easy on any cloud it does

00:00:37,410 --> 00:00:41,850
that by using live memory Bosh in order

00:00:39,840 --> 00:00:44,070
to deploy on to virtually any

00:00:41,850 --> 00:00:46,260
infrastructure Bosh has the ability to

00:00:44,070 --> 00:00:47,760
communicate with public clouds private

00:00:46,260 --> 00:00:50,399
infrastructure environments

00:00:47,760 --> 00:00:52,110
virtualization platforms open source

00:00:50,399 --> 00:00:53,910
infrastructures and service systems and

00:00:52,110 --> 00:00:56,789
it can ask for whatever it needs in

00:00:53,910 --> 00:00:58,980
terms of virtual machines the storage

00:00:56,789 --> 00:01:01,500
necessary to support them the networking

00:00:58,980 --> 00:01:03,510
configuration and so the Bosh director

00:01:01,500 --> 00:01:05,580
is able to ask this infrastructure where

00:01:03,510 --> 00:01:08,310
these clouds were as many virtual

00:01:05,580 --> 00:01:10,740
machines as it needs it installs a small

00:01:08,310 --> 00:01:12,810
agent on each one of those machines and

00:01:10,740 --> 00:01:16,380
that agent lets it give that machine

00:01:12,810 --> 00:01:18,780
jobs to do so for example Bosh director

00:01:16,380 --> 00:01:21,299
- to make kubernetes work will deploy

00:01:18,780 --> 00:01:23,790
its D cluster the community's master

00:01:21,299 --> 00:01:25,439
nodes and then the rest of the pool of

00:01:23,790 --> 00:01:26,909
nodes that are gonna host the containers

00:01:25,439 --> 00:01:28,380
that kubernetes is responsible for

00:01:26,909 --> 00:01:30,509
scheduling the other thing that's very

00:01:28,380 --> 00:01:32,369
important about this dual scheduling

00:01:30,509 --> 00:01:35,520
layer where kubernetes is responsible

00:01:32,369 --> 00:01:37,979
for scheduling containers and Bosh is

00:01:35,520 --> 00:01:39,479
responsible for scheduling jobs on to

00:01:37,979 --> 00:01:41,939
virtual machines which is in fact

00:01:39,479 --> 00:01:45,299
kubernetes nodes is that what happens

00:01:41,939 --> 00:01:47,579
when a node disappears well kubernetes

00:01:45,299 --> 00:01:50,490
will read distribute all of the

00:01:47,579 --> 00:01:52,110
containers that it's responsible for but

00:01:50,490 --> 00:01:54,390
with the Cloud Foundry container runtime

00:01:52,110 --> 00:01:56,610
Bosh is able to ask the infrastructure

00:01:54,390 --> 00:01:58,320
for a new VM and rejoin it to the

00:01:56,610 --> 00:01:59,130
cluster adding the capacity that was

00:01:58,320 --> 00:02:01,680
lost back

00:01:59,130 --> 00:02:04,680
it also can take advantage of the logic

00:02:01,680 --> 00:02:05,130
that Bosh is able to achieve for zero

00:02:04,680 --> 00:02:07,710
downtime

00:02:05,130 --> 00:02:09,780
upgrades or rolling upgrades of the

00:02:07,710 --> 00:02:11,989
kubernetes platform within the public

00:02:09,780 --> 00:02:11,989
clouds

00:02:25,040 --> 00:02:27,099

YouTube URL: https://www.youtube.com/watch?v=WtfLidd8aA8


