Title: Using Cloud Foundry Container Runtime to Run Your Kubernetes Clusters - Oleksandr Slynko
Publication date: 2018-04-21
Playlist: Cloud Foundry Summit NA 2018
Description: 
	Using Cloud Foundry Container Runtime to Run Your Kubernetes Clusters - Oleksandr Slynko, Pivotal & Kaiting Chen, VMware

 Cloud Foundry Container Runtime (CFCR and formerly Kubo) is an OSS project developed jointly by Vmware, Pivotal and Google. It provides an uniform way to instantiate, deploy, and manage highly available vanilla Kubernetes clusters using BOSH - on GCE, vSphere, AWS, Openstack and Azure.

Using BOSH and CFCR to manage Kubernetes gives self healing, easily upgradeable clusters with managed secrets rotation. Cluster creation is simplified to the point where clusters can be created and destroyed for use in development or sandbox environments.

In this presentation, Oleksandr and Kaiting will demonstrate deployment across multiple IAASes, cluster healing, cluster upgrade and cluster creation.

About Kaiting Chen
Kaiting is a staff engineer at VMware. He is an active contributor to Cloud Foundry Container Runtime, working alongside with the Pivotal engineers.

Previously, Kaiting was the CTO and co-founder of a fintech patent-pending startup, developing an exchange for the transaction of illiquid securities initially intended for crowdfunded equity.

About Oleksandr Slynko
Oleksandr is the anchor of Pivotal Container Service project. Before he was working on Cloud Foundry Container Runtime since the project inception. | Oleksandr has a background in automation and working on high available cloud solutions.
Captions: 
	00:00:00,030 --> 00:00:05,569
rinette scale my name is Alexander I

00:00:03,360 --> 00:00:09,900
work at the hotel

00:00:05,569 --> 00:00:13,740
I'm kiting Chen from VMware they will

00:00:09,900 --> 00:00:16,859
talk about using CSTR to run your grace

00:00:13,740 --> 00:00:18,449
clusters this is the most important site

00:00:16,859 --> 00:00:22,310
you'll remember it from today because

00:00:18,449 --> 00:00:25,680
you'll see it on all presentations but

00:00:22,310 --> 00:00:27,539
why we here who here have deployed

00:00:25,680 --> 00:00:31,949
something using Bosch please raise your

00:00:27,539 --> 00:00:38,399
hands who haven't deployed because I see

00:00:31,949 --> 00:00:41,070
haven't deployed so I I expected all of

00:00:38,399 --> 00:00:42,840
you agree that Bosch is awesome to

00:00:41,070 --> 00:00:46,890
deploy things and it's awesome

00:00:42,840 --> 00:00:49,530
deployment system and the thing is it is

00:00:46,890 --> 00:00:52,379
called for the cataract I'm just another

00:00:49,530 --> 00:00:56,520
boss deployment said if you know how to

00:00:52,379 --> 00:00:59,340
deploy this Porsche can do it and

00:00:56,520 --> 00:01:01,820
Vantage yes it's just another board

00:00:59,340 --> 00:01:05,339
deployment a bit fine service that uses

00:01:01,820 --> 00:01:09,600
some extra Bosch features what is just

00:01:05,339 --> 00:01:11,670
another board appointment so I wanted to

00:01:09,600 --> 00:01:14,460
start by talking a little bit because

00:01:11,670 --> 00:01:17,430
this is this is the first session of the

00:01:14,460 --> 00:01:19,470
day about why we want to while we're

00:01:17,430 --> 00:01:22,770
even here talking about kubernetes what

00:01:19,470 --> 00:01:23,909
does kubernetes give you in addition to

00:01:22,770 --> 00:01:26,880
your existing cloud foundry

00:01:23,909 --> 00:01:28,710
infrastructure so there's a couple of

00:01:26,880 --> 00:01:31,200
things the abstraction that kubernetes

00:01:28,710 --> 00:01:32,790
built is fundamentally at a lower level

00:01:31,200 --> 00:01:34,140
than what you're gonna see out of the

00:01:32,790 --> 00:01:36,479
application runtime

00:01:34,140 --> 00:01:38,280
it handles that deals with pods which

00:01:36,479 --> 00:01:40,350
are essentially just co-located

00:01:38,280 --> 00:01:42,390
containers and it also means that you

00:01:40,350 --> 00:01:44,970
can essentially run any existing docker

00:01:42,390 --> 00:01:47,070
container you have so if you have some

00:01:44,970 --> 00:01:49,829
functionality that that is already

00:01:47,070 --> 00:01:51,509
easily represented as a docker container

00:01:49,829 --> 00:01:54,000
while kubernetes makes it very easy for

00:01:51,509 --> 00:01:55,320
you to run that it handles a replication

00:01:54,000 --> 00:01:58,619
and scaling of those containers

00:01:55,320 --> 00:02:01,409
automatically for you and um well maybe

00:01:58,619 --> 00:02:03,210
kubernetes is a little bit more tied in

00:02:01,409 --> 00:02:05,700
to the underlying infrastructure for

00:02:03,210 --> 00:02:07,530
example if you have something like some

00:02:05,700 --> 00:02:09,629
persistent disks in your vSphere

00:02:07,530 --> 00:02:11,270
infrastructure for example that you want

00:02:09,629 --> 00:02:13,310
to use with your with your

00:02:11,270 --> 00:02:16,610
workloads then kubernetes makes it very

00:02:13,310 --> 00:02:19,940
easy to make that integration happen and

00:02:16,610 --> 00:02:21,710
last kubernetes supports rolling updates

00:02:19,940 --> 00:02:24,500
for your workloads and makes it very

00:02:21,710 --> 00:02:26,720
easy for users in addition to access all

00:02:24,500 --> 00:02:30,080
of these features so that's why we're

00:02:26,720 --> 00:02:31,460
here to talk about kubernetes but the

00:02:30,080 --> 00:02:34,160
problem with giving you all this power

00:02:31,460 --> 00:02:37,040
and having these low-level abstractions

00:02:34,160 --> 00:02:39,920
is that kubernetes is very difficult to

00:02:37,040 --> 00:02:41,780
install in a production environment it's

00:02:39,920 --> 00:02:44,300
it's not hard to get started with I

00:02:41,780 --> 00:02:46,430
think probably a lot of you have tried

00:02:44,300 --> 00:02:48,200
to use something like mini cube where

00:02:46,430 --> 00:02:49,850
you have kubernetes running on your

00:02:48,200 --> 00:02:51,860
local machine and you don't need any

00:02:49,850 --> 00:02:53,840
infrastructure really to bring up a

00:02:51,860 --> 00:02:55,580
kubernetes cluster at all and that's

00:02:53,840 --> 00:02:58,130
that's really easy to get started with

00:02:55,580 --> 00:03:00,170
but if you're talking about running

00:02:58,130 --> 00:03:02,090
kubernetes in an enterprise environment

00:03:00,170 --> 00:03:03,320
or in a production environment then

00:03:02,090 --> 00:03:06,110
there's a lot more that you have to

00:03:03,320 --> 00:03:08,180
think about a lot of considerations that

00:03:06,110 --> 00:03:09,650
you wouldn't have in just a development

00:03:08,180 --> 00:03:11,660
environment so the first thing i'm going

00:03:09,650 --> 00:03:13,250
to talk about is security because

00:03:11,660 --> 00:03:16,100
kubernetes is kind of meant for you to

00:03:13,250 --> 00:03:18,020
run fast it's it's meant for you to go

00:03:16,100 --> 00:03:19,850
and get started very quickly which means

00:03:18,020 --> 00:03:22,730
that some of the defaults that they've

00:03:19,850 --> 00:03:25,280
chosen are not the best for for

00:03:22,730 --> 00:03:27,410
production these are some quotes that

00:03:25,280 --> 00:03:33,320
i've taken directly out of the

00:03:27,410 --> 00:03:34,390
kubernetes documentation you see that by

00:03:33,320 --> 00:03:38,390
default

00:03:34,390 --> 00:03:40,070
Kubla is unsecured so any work worker

00:03:38,390 --> 00:03:41,690
node that you have if someone were to

00:03:40,070 --> 00:03:43,730
gain access to that network and we're

00:03:41,690 --> 00:03:46,760
able to ping that node well they could

00:03:43,730 --> 00:03:50,030
run whatever workload they want on that

00:03:46,760 --> 00:03:51,980
worker node you also have to think about

00:03:50,030 --> 00:03:54,500
things like user authentication in fact

00:03:51,980 --> 00:03:56,870
here's basically a list of the security

00:03:54,500 --> 00:03:59,150
considerations that you have to have to

00:03:56,870 --> 00:04:01,670
worry about when you bring up a

00:03:59,150 --> 00:04:03,860
production kubernetes cluster if you

00:04:01,670 --> 00:04:07,790
want to have actual users where you need

00:04:03,860 --> 00:04:11,209
to give kubernetes an external user and

00:04:07,790 --> 00:04:12,650
external authentication provider so how

00:04:11,209 --> 00:04:14,030
are you gonna do that how are you gonna

00:04:12,650 --> 00:04:15,800
get those components to talk together

00:04:14,030 --> 00:04:17,900
how are you going to tie that into your

00:04:15,800 --> 00:04:20,270
authorization and like governance

00:04:17,900 --> 00:04:22,130
infrastructure so that those users can

00:04:20,270 --> 00:04:24,380
only access the resources that they're

00:04:22,130 --> 00:04:25,150
supposed to you have to worry about

00:04:24,380 --> 00:04:27,009
certificate

00:04:25,150 --> 00:04:28,930
management because kubernetes kind of

00:04:27,009 --> 00:04:31,360
decentralized right it's kind of modular

00:04:28,930 --> 00:04:33,759
and all the pieces ideally should be

00:04:31,360 --> 00:04:34,960
communicating using mutual TLS which

00:04:33,759 --> 00:04:37,120
means that you need to manage

00:04:34,960 --> 00:04:38,740
certificates you have to worry about

00:04:37,120 --> 00:04:41,020
securing couplet you have to worry about

00:04:38,740 --> 00:04:43,389
securing at CD which is the brains of

00:04:41,020 --> 00:04:45,100
this whole operation you have to worry

00:04:43,389 --> 00:04:47,380
about credential rotation for your

00:04:45,100 --> 00:04:48,759
service accounts and you also have to

00:04:47,380 --> 00:04:51,100
worry about securing things like the

00:04:48,759 --> 00:04:53,979
dashboard that people often forget and

00:04:51,100 --> 00:04:58,479
lead to hackers running cryptocurrency

00:04:53,979 --> 00:04:59,860
miners in your infrastructure so like

00:04:58,479 --> 00:05:02,380
none of these things are things that

00:04:59,860 --> 00:05:03,850
none of these problems are really

00:05:02,380 --> 00:05:06,250
insurmountable or anything like that

00:05:03,850 --> 00:05:08,169
they're just an additional factor that

00:05:06,250 --> 00:05:09,970
you have to consider when what you

00:05:08,169 --> 00:05:13,870
really want is to just get a cluster up

00:05:09,970 --> 00:05:16,030
and running in addition like I mentioned

00:05:13,870 --> 00:05:17,800
before kubernetes is modular like all

00:05:16,030 --> 00:05:19,479
the pieces are meant to work not

00:05:17,800 --> 00:05:21,370
necessarily like they're meant to work

00:05:19,479 --> 00:05:24,370
together but they can operate without

00:05:21,370 --> 00:05:26,770
the presence of each other which means

00:05:24,370 --> 00:05:28,539
that like for example your couplet

00:05:26,770 --> 00:05:30,460
processes on your worker nodes will

00:05:28,539 --> 00:05:32,380
pretty much run no matter what you do

00:05:30,460 --> 00:05:34,120
and if and if they're running and you

00:05:32,380 --> 00:05:35,410
get them talking to your master will

00:05:34,120 --> 00:05:37,960
you'll be able to schedule a pod

00:05:35,410 --> 00:05:39,699
workload on on to that worker but just

00:05:37,960 --> 00:05:41,590
because you've done that successfully it

00:05:39,699 --> 00:05:43,780
doesn't mean that all these deployment

00:05:41,590 --> 00:05:45,550
workload types are going to work for you

00:05:43,780 --> 00:05:47,380
doesn't mean that just because you've

00:05:45,550 --> 00:05:49,300
deployed a single pod that you're going

00:05:47,380 --> 00:05:51,400
to be able to deploy like a daemon set

00:05:49,300 --> 00:05:53,800
or a cron job or set up some custom

00:05:51,400 --> 00:05:58,300
resource in your cluster and expect that

00:05:53,800 --> 00:05:59,680
to work so like these are all things

00:05:58,300 --> 00:06:01,240
that you have to consider and it makes

00:05:59,680 --> 00:06:03,280
it a little bit difficult to test this

00:06:01,240 --> 00:06:06,099
because how can you be confident that

00:06:03,280 --> 00:06:08,880
you have a conformant cluster and even

00:06:06,099 --> 00:06:11,139
if you have a conforming cluster upfront

00:06:08,880 --> 00:06:13,270
how do you know that cluster is going to

00:06:11,139 --> 00:06:15,610
continue operating the way that you want

00:06:13,270 --> 00:06:18,460
it to after you take down for example

00:06:15,610 --> 00:06:20,380
some of your workers for maintenance how

00:06:18,460 --> 00:06:22,090
you confident that your Kubla is going

00:06:20,380 --> 00:06:23,889
to be able to come up successfully or

00:06:22,090 --> 00:06:27,130
that your cluster is going to survive

00:06:23,889 --> 00:06:29,169
and upgrade so again a lot of things to

00:06:27,130 --> 00:06:31,240
think about when deploying kubernetes in

00:06:29,169 --> 00:06:32,620
production because it's like essentially

00:06:31,240 --> 00:06:34,240
infrastructure and that means that you

00:06:32,620 --> 00:06:36,159
have to think about all the

00:06:34,240 --> 00:06:37,410
ramifications that come with that

00:06:36,159 --> 00:06:40,230
infrastructure

00:06:37,410 --> 00:06:41,790
and last you throw networking into this

00:06:40,230 --> 00:06:43,710
picture and it gets just a lot more

00:06:41,790 --> 00:06:45,570
complicated if you want a resilient

00:06:43,710 --> 00:06:48,330
cluster well that means that you need

00:06:45,570 --> 00:06:52,620
highly available masters and there's no

00:06:48,330 --> 00:06:55,350
way kubernetes gives you built-in to

00:06:52,620 --> 00:06:57,030
have that master high availability which

00:06:55,350 --> 00:06:59,160
means that you need to go and set up

00:06:57,030 --> 00:07:00,330
your own load balancing solution or if

00:06:59,160 --> 00:07:01,800
you're using some sort of cloud

00:07:00,330 --> 00:07:05,850
infrastructure there well you need to

00:07:01,800 --> 00:07:07,500
set up an external load balancer so this

00:07:05,850 --> 00:07:10,140
is again taken directly from the

00:07:07,500 --> 00:07:12,330
kubernetes documentation that quote and

00:07:10,140 --> 00:07:15,230
this diagram this is what they suggest

00:07:12,330 --> 00:07:19,620
you set up by yourself if you want a

00:07:15,230 --> 00:07:21,210
resilient highly available master so

00:07:19,620 --> 00:07:24,030
that that's like a lot of work for us

00:07:21,210 --> 00:07:26,130
and then you throw in mutual TLS into

00:07:24,030 --> 00:07:27,750
all this you throw in DNS and then you

00:07:26,130 --> 00:07:29,430
have to worry about like this situation

00:07:27,750 --> 00:07:31,080
if you have that load balancer sitting

00:07:29,430 --> 00:07:33,510
in front of your masters then your

00:07:31,080 --> 00:07:35,550
workers need to talk to the master notes

00:07:33,510 --> 00:07:36,900
through that load balancer how are you

00:07:35,550 --> 00:07:39,540
going to ensure that your masters are

00:07:36,900 --> 00:07:41,520
presenting an SSL certificate that's

00:07:39,540 --> 00:07:43,530
going to be accepted by the workers and

00:07:41,520 --> 00:07:46,050
what have you need to rotate that

00:07:43,530 --> 00:07:48,030
certificate like over time or for

00:07:46,050 --> 00:07:50,640
example the IP address of your load

00:07:48,030 --> 00:07:51,840
balancer changes or the DNS name of it

00:07:50,640 --> 00:07:54,150
changes how are you going to ensure that

00:07:51,840 --> 00:07:56,640
all these certificates are accepted by

00:07:54,150 --> 00:07:58,980
both the masters and the workers so like

00:07:56,640 --> 00:08:01,080
this is it like I said like none of this

00:07:58,980 --> 00:08:03,450
is really it's not something that you

00:08:01,080 --> 00:08:06,600
can't do it's just a lot to think about

00:08:03,450 --> 00:08:10,230
so what's the solution to all this so

00:08:06,600 --> 00:08:13,020
this is how you're on Google start

00:08:10,230 --> 00:08:15,300
calibrating it and Bosch has super

00:08:13,020 --> 00:08:18,180
features that allows us to do this with

00:08:15,300 --> 00:08:22,010
repeatable deployments using borsch it's

00:08:18,180 --> 00:08:22,010
much easier to test everything and

00:08:22,820 --> 00:08:29,490
resurrecting VMs it's all great features

00:08:27,450 --> 00:08:32,300
of Bosch but today I won't specifically

00:08:29,490 --> 00:08:35,310
talk about two recently new features

00:08:32,300 --> 00:08:37,919
recently it's one half year old features

00:08:35,310 --> 00:08:40,560
that Bosch provider that allowed us to

00:08:37,919 --> 00:08:43,130
build call for the container runtime and

00:08:40,560 --> 00:08:47,520
allowed us to merge multiple clusters

00:08:43,130 --> 00:08:50,730
one of it is bore genus it allows us to

00:08:47,520 --> 00:08:53,160
remove load bars are out of equation

00:08:50,730 --> 00:08:57,839
is bossiness it provides easy master che

00:08:53,160 --> 00:09:00,240
and you film you just specify some alias

00:08:57,839 --> 00:09:02,310
and it works like kind of like internal

00:09:00,240 --> 00:09:06,959
load balancer and if master goes down

00:09:02,310 --> 00:09:10,230
then it cuts removed from this DNS

00:09:06,959 --> 00:09:12,360
record and who is this it's you don't

00:09:10,230 --> 00:09:14,399
need external load bars or for internal

00:09:12,360 --> 00:09:16,709
communication if you need to talk

00:09:14,399 --> 00:09:18,000
externally you want it you can have it

00:09:16,709 --> 00:09:22,440
what you don't need

00:09:18,000 --> 00:09:25,529
and more importantly you opera doesn't

00:09:22,440 --> 00:09:27,269
need to configure anything so it's

00:09:25,529 --> 00:09:30,930
york's all the same for different

00:09:27,269 --> 00:09:33,240
clusters it provides so discovery for

00:09:30,930 --> 00:09:36,839
different clusters discovery of HCD i

00:09:33,240 --> 00:09:39,720
discover of masters from brokers so this

00:09:36,839 --> 00:09:44,279
way we just felt the same on different

00:09:39,720 --> 00:09:47,040
clusters but additionally we want to try

00:09:44,279 --> 00:09:49,740
certificates and cred hub cry hub really

00:09:47,040 --> 00:09:51,839
solved all those problems you are able

00:09:49,740 --> 00:09:54,930
to derive certificates for all the

00:09:51,839 --> 00:09:56,490
components provide mutual TLS generates

00:09:54,930 --> 00:09:59,190
all the passwords especially one that

00:09:56,490 --> 00:10:02,660
you don't really care as it required

00:09:59,190 --> 00:10:04,829
only for telecommunication it

00:10:02,660 --> 00:10:07,589
significantly simplifies multiple

00:10:04,829 --> 00:10:09,540
cluster management because operator

00:10:07,589 --> 00:10:12,240
doesn't need to think about it they just

00:10:09,540 --> 00:10:14,910
have one manifest and have to change

00:10:12,240 --> 00:10:17,699
diploma time as I said and I will show

00:10:14,910 --> 00:10:21,810
how it's happened right now so I'll just

00:10:17,699 --> 00:10:25,529
deploy jerrick CSR cluster to be honest

00:10:21,810 --> 00:10:30,480
I I already deploy this so we will have

00:10:25,529 --> 00:10:34,829
time to see some other things and I will

00:10:30,480 --> 00:10:36,180
just some I get sample manifest from

00:10:34,829 --> 00:10:38,639
Cooper deployment

00:10:36,180 --> 00:10:41,339
it's manifest I'd provide by CFC are

00:10:38,639 --> 00:10:45,839
this is minimal manifest you can deploy

00:10:41,339 --> 00:10:47,519
it on each is it feeldog fine so if you

00:10:45,839 --> 00:10:49,860
don't need any cloud features it will

00:10:47,519 --> 00:10:52,350
work fine if you need some collaboration

00:10:49,860 --> 00:10:53,730
this cloud like connecting disk a lot of

00:10:52,350 --> 00:10:56,089
answers you need to provide

00:10:53,730 --> 00:10:58,680
settings for so-called cloud provider

00:10:56,089 --> 00:11:03,400
and that's why I connect this additional

00:10:58,680 --> 00:11:05,200
ops file then one more thing

00:11:03,400 --> 00:11:07,360
kay Terrence there will be session about

00:11:05,200 --> 00:11:09,420
color k Terrence what you need to know

00:11:07,360 --> 00:11:12,400
it will speed up your deployment

00:11:09,420 --> 00:11:14,680
then I because I won't discuss to be

00:11:12,400 --> 00:11:17,530
excessive externally I will add load

00:11:14,680 --> 00:11:20,770
beside Peter certificate add masters to

00:11:17,530 --> 00:11:23,650
the slaughter balancer and provide some

00:11:20,770 --> 00:11:27,490
variables so those variables required to

00:11:23,650 --> 00:11:29,140
tag VMs or cluster knows okay this is a

00:11:27,490 --> 00:11:33,100
part of this cluster they can attach

00:11:29,140 --> 00:11:36,100
disk and so on and these variables are

00:11:33,100 --> 00:11:38,740
required talk to GCP click enter it

00:11:36,100 --> 00:11:41,410
build on it will take about one minute

00:11:38,740 --> 00:11:43,420
and as I said the first part of the

00:11:41,410 --> 00:11:46,450
manifest is however for any cloud and

00:11:43,420 --> 00:11:48,730
once you have CR said that they adding

00:11:46,450 --> 00:11:50,410
support for different clouds it just

00:11:48,730 --> 00:11:56,070
means a date called provided support for

00:11:50,410 --> 00:11:58,660
different clouds now each developer or

00:11:56,070 --> 00:12:01,180
covariance developer or commerce

00:11:58,660 --> 00:12:03,850
operator expect sound or clause to be

00:12:01,180 --> 00:12:07,840
Ryan on vanilla cluster so one of it is

00:12:03,850 --> 00:12:10,810
cube DNS which allows still discover

00:12:07,840 --> 00:12:13,270
inside the cluster cabanas dashboard

00:12:10,810 --> 00:12:16,420
that you can see in pretty yo what's

00:12:13,270 --> 00:12:19,930
happening is a cluster and hipster for

00:12:16,420 --> 00:12:23,170
matrix so this is what is done in this

00:12:19,930 --> 00:12:27,540
around and because I used Calicut and it

00:12:23,170 --> 00:12:31,030
will run very very quickly because it's

00:12:27,540 --> 00:12:32,680
run on the master VM and it's already

00:12:31,030 --> 00:12:37,480
finished now it's gettin logs and

00:12:32,680 --> 00:12:39,700
printout logs so I will show how it

00:12:37,480 --> 00:12:43,000
works just part of the manifest so I

00:12:39,700 --> 00:12:46,210
added one job to the master and moves it

00:12:43,000 --> 00:12:48,400
a separatist has group since this is ops

00:12:46,210 --> 00:12:53,170
file for the load balancer I just had am

00:12:48,400 --> 00:12:55,240
extension and IP just IP in variable now

00:12:53,170 --> 00:13:00,040
I want to connect to the cluster so I

00:12:55,240 --> 00:13:01,990
owe my credential sign cried hub I need

00:13:00,040 --> 00:13:04,930
to get them from crud happened this is I

00:13:01,990 --> 00:13:08,320
get client secret connect to this crud

00:13:04,930 --> 00:13:10,270
hub it's connected get the token that I

00:13:08,320 --> 00:13:13,680
used to authenticate get the CA

00:13:10,270 --> 00:13:16,510
certificate and side my cube config

00:13:13,680 --> 00:13:20,440
circuit config and cube

00:13:16,510 --> 00:13:23,290
keep CTL for example get notes I can see

00:13:20,440 --> 00:13:27,460
it's up and running it's available

00:13:23,290 --> 00:13:31,750
externally so I will connect to my local

00:13:27,460 --> 00:13:34,240
machine and I can do eclipses ETL city

00:13:31,750 --> 00:13:38,290
I'll get all get notes as well it will

00:13:34,240 --> 00:13:42,220
be the same notes so what I can do I can

00:13:38,290 --> 00:13:46,960
deploy Samuel Claude keeps ETL apply

00:13:42,220 --> 00:13:52,630
with file assistant volumes well create

00:13:46,960 --> 00:14:00,070
disk create some deployment it's up and

00:13:52,630 --> 00:14:02,230
running and proxy as I said it has

00:14:00,070 --> 00:14:05,970
dashboards so I can access dashboard

00:14:02,230 --> 00:14:05,970
from my local machine and

00:14:06,330 --> 00:14:12,190
ok

00:14:07,650 --> 00:14:15,910
it says I need to login and I need to

00:14:12,190 --> 00:14:16,390
provide my keeps ETL file keep config

00:14:15,910 --> 00:14:19,390
file

00:14:16,390 --> 00:14:22,360
I will provide it and I can sign in and

00:14:19,390 --> 00:14:22,990
proceed so even if your dashboard is

00:14:22,360 --> 00:14:26,920
exposed

00:14:22,990 --> 00:14:28,120
you still need Samson taxes and it's the

00:14:26,920 --> 00:14:33,040
floor and you can see that I start

00:14:28,120 --> 00:14:34,930
deploying this guestbook and sometimes

00:14:33,040 --> 00:14:37,270
deployed some nice you are if i refresh

00:14:34,930 --> 00:14:43,830
it it will update something

00:14:37,270 --> 00:14:47,350
I hope yeah nobody's up and running so

00:14:43,830 --> 00:14:49,930
cluster is up and running I will go back

00:14:47,350 --> 00:14:54,100
to the remote VM and I can get keep CTL

00:14:49,930 --> 00:14:59,250
get service front-end so I know how to

00:14:54,100 --> 00:15:02,230
connect it and this is let's go

00:14:59,250 --> 00:15:05,500
guestbook it's up and running it's on

00:15:02,230 --> 00:15:08,110
public IP address so you can hello CEO

00:15:05,500 --> 00:15:11,590
summit you can connect it but but please

00:15:08,110 --> 00:15:15,520
don't because don't steal Internet can

00:15:11,590 --> 00:15:18,990
connect do it afterwards so I deployed

00:15:15,520 --> 00:15:22,930
cluster I you scratch up to get

00:15:18,990 --> 00:15:25,590
credentials I deployed using vanilla CFC

00:15:22,930 --> 00:15:28,440
are I added some ops file just to

00:15:25,590 --> 00:15:31,780
optimize speed of

00:15:28,440 --> 00:15:36,160
the deploy neurons I get access to it it

00:15:31,780 --> 00:15:38,890
is working but in real life you probably

00:15:36,160 --> 00:15:41,080
don't want to expose your masters to the

00:15:38,890 --> 00:15:43,540
external Internet you want them to be

00:15:41,080 --> 00:15:46,330
available internal network and I need to

00:15:43,540 --> 00:15:49,510
have some kind of jump box to access it

00:15:46,330 --> 00:15:52,510
and this is what we will do right now we

00:15:49,510 --> 00:15:56,500
will I will show the several possible

00:15:52,510 --> 00:15:59,890
patterns that we can use to connect to

00:15:56,500 --> 00:16:03,370
your cluster the deployed in just

00:15:59,890 --> 00:16:07,630
internal network so I came back here and

00:16:03,370 --> 00:16:10,570
I go here and I will high deploy second

00:16:07,630 --> 00:16:14,080
cluster as well the sensor manifest same

00:16:10,570 --> 00:16:16,510
cloud provider Calicut errant expose

00:16:14,080 --> 00:16:19,450
links I will find later why rename

00:16:16,510 --> 00:16:21,880
deployment and nothing about soil

00:16:19,450 --> 00:16:24,160
bouncer so it doesn't it's not run as

00:16:21,880 --> 00:16:30,070
part of Florida browser it's not

00:16:24,160 --> 00:16:33,250
available externally and basically I

00:16:30,070 --> 00:16:36,760
won't be able to access it anyway except

00:16:33,250 --> 00:16:39,430
from going Saha from internal network so

00:16:36,760 --> 00:16:44,200
I will deploy arrant and to do this I

00:16:39,430 --> 00:16:49,500
will deploy Jambox separately in the

00:16:44,200 --> 00:16:52,600
it's the same motion fetching logs I

00:16:49,500 --> 00:16:54,580
will show expose links to just basically

00:16:52,600 --> 00:16:57,430
exposing links and making them available

00:16:54,580 --> 00:17:00,190
between cross deployment jambox I'll

00:16:57,430 --> 00:17:06,180
also deploy Jambox I deployed everything

00:17:00,190 --> 00:17:06,180
just half an hour it's not that much and

00:17:06,420 --> 00:17:12,520
manifest of this jam box I have both

00:17:09,880 --> 00:17:14,680
dienes to be able to use the same

00:17:12,520 --> 00:17:17,620
service discovery but from different

00:17:14,680 --> 00:17:22,270
deployment this is why had this links

00:17:17,620 --> 00:17:24,880
shared because those links provides

00:17:22,270 --> 00:17:27,760
genus discoveries in commodious aliases

00:17:24,880 --> 00:17:31,360
I can connect to the cluster via the

00:17:27,760 --> 00:17:33,610
same DNS name from this john box then

00:17:31,360 --> 00:17:36,460
keep CTL is one of the

00:17:33,610 --> 00:17:42,010
iro this tiny job to show how you can

00:17:36,460 --> 00:17:45,130
access the cluster from John box and

00:17:42,010 --> 00:17:49,120
screwed a simple HTTP proxy and nothing

00:17:45,130 --> 00:17:53,830
more interesting so again the same

00:17:49,120 --> 00:17:58,720
connect the cred hub and as you see it

00:17:53,830 --> 00:18:00,250
has to 2008 one from CFC are and other

00:17:58,720 --> 00:18:02,650
four she observed agent that I just

00:18:00,250 --> 00:18:05,110
deployed and this has been charted

00:18:02,650 --> 00:18:07,780
automatically haven't done anything and

00:18:05,110 --> 00:18:10,840
in CSR sturgeons are lots of credentials

00:18:07,780 --> 00:18:14,020
and I basically don't care what was I if

00:18:10,840 --> 00:18:16,600
I need I can rotate any of them but as

00:18:14,020 --> 00:18:17,910
operator I don't need to have them on my

00:18:16,600 --> 00:18:21,940
computer at all

00:18:17,910 --> 00:18:25,120
I'll get the token I'll get is a series

00:18:21,940 --> 00:18:27,549
short and now I'll try to connect the

00:18:25,120 --> 00:18:30,130
CCA short with just talking to master

00:18:27,549 --> 00:18:34,210
steps are internal which is DNS alias

00:18:30,130 --> 00:18:37,150
for this coastal and unfortunate does it

00:18:34,210 --> 00:18:40,450
joke because I actually need John box so

00:18:37,150 --> 00:18:42,669
I'll get John box and I'll get connected

00:18:40,450 --> 00:18:45,549
at John box on this script I'll get John

00:18:42,669 --> 00:18:51,510
box API doesn't using the jump box I

00:18:45,549 --> 00:18:57,730
will try to get some information so I

00:18:51,510 --> 00:18:59,950
got those notes as you can see haha and

00:18:57,730 --> 00:19:05,350
now I'll deploy simple nginx application

00:18:59,950 --> 00:19:09,570
that I got from CFC are and just wait

00:19:05,350 --> 00:19:12,190
for it to finish and it's deployed so

00:19:09,570 --> 00:19:13,840
sometimes it takes time to download

00:19:12,190 --> 00:19:15,970
images but I tried it several times so

00:19:13,840 --> 00:19:18,280
Oleum we just as air this is why it

00:19:15,970 --> 00:19:21,130
deployed so quickly and now I need to

00:19:18,280 --> 00:19:23,020
wait till load bar setup but

00:19:21,130 --> 00:19:26,710
unfortunately it says ensure load

00:19:23,020 --> 00:19:28,059
balancer so it's still starting up and I

00:19:26,710 --> 00:19:31,120
need to wait for some time

00:19:28,059 --> 00:19:33,309
and it talks as the coastal so I wanted

00:19:31,120 --> 00:19:36,370
to show you how you can access cross

00:19:33,309 --> 00:19:37,900
a--from this Jam box and maybe it won't

00:19:36,370 --> 00:19:40,540
be John box for you might be it will be

00:19:37,900 --> 00:19:44,620
some DM and you see I may be in Congress

00:19:40,540 --> 00:19:45,370
rocker so I'll just connect this jump

00:19:44,620 --> 00:19:50,679
box

00:19:45,370 --> 00:19:53,380
SSH and what's important from it I can

00:19:50,679 --> 00:19:58,960
obviously nslookup

00:19:53,380 --> 00:20:02,470
master CFC our internal catch three

00:19:58,960 --> 00:20:05,170
masters the hell advanced so we have a

00:20:02,470 --> 00:20:11,980
chain and then I get four-week up jobs

00:20:05,170 --> 00:20:16,690
cube CTL being keeps it here again good

00:20:11,980 --> 00:20:19,950
service and I can see at my genetics top

00:20:16,690 --> 00:20:22,600
and Ryan and this keeps ETL job is just

00:20:19,950 --> 00:20:24,910
simple I have talking

00:20:22,600 --> 00:20:27,280
I have certificate authority and I can

00:20:24,910 --> 00:20:28,990
show you talking because this class is

00:20:27,280 --> 00:20:31,750
not available externally you won't be

00:20:28,990 --> 00:20:40,120
able to connect to it but we can connect

00:20:31,750 --> 00:20:43,060
to this York lot okay so let's recap

00:20:40,120 --> 00:20:45,190
little bit I deployed cluster without

00:20:43,060 --> 00:20:47,500
external axis deployed jam box and show

00:20:45,190 --> 00:20:49,870
how you can access it you can access via

00:20:47,500 --> 00:20:52,690
HTTP proxy or you can create your own

00:20:49,870 --> 00:20:56,380
jobs that will run and execute commands

00:20:52,690 --> 00:20:58,420
on that cluster directly and developers

00:20:56,380 --> 00:21:02,290
won't even need to know anything about

00:20:58,420 --> 00:21:06,970
keeps ETL and your course will be still

00:21:02,290 --> 00:21:08,800
available externally sets each that we

00:21:06,970 --> 00:21:12,340
wanted to show you there are much more

00:21:08,800 --> 00:21:16,180
things and I will do much more topics on

00:21:12,340 --> 00:21:19,870
this today and tomorrow so first is

00:21:16,180 --> 00:21:21,940
important think is manifest with four

00:21:19,870 --> 00:21:25,420
CFC are you stuck to the ocean if you

00:21:21,940 --> 00:21:29,980
want testator shion's next link is link

00:21:25,420 --> 00:21:34,930
is demo and link with my jam box

00:21:29,980 --> 00:21:37,270
deployment you can see how it works how

00:21:34,930 --> 00:21:40,210
it works with links so I hope that today

00:21:37,270 --> 00:21:42,580
you learn that kubernetes is relatively

00:21:40,210 --> 00:21:45,940
easy to deploy and if you want you can

00:21:42,580 --> 00:21:50,050
use it and if you want to deploy it

00:21:45,940 --> 00:21:54,010
whether it's much much harder thank you

00:21:50,050 --> 00:21:57,400
all and we need you we a CFC our team we

00:21:54,010 --> 00:21:59,260
need you to help us collaborate better

00:21:57,400 --> 00:22:02,100
between cloud for the application on

00:21:59,260 --> 00:22:06,070
time and cloud forests contain a runtime

00:22:02,100 --> 00:22:06,730
give yourself connect other services

00:22:06,070 --> 00:22:09,790
called

00:22:06,730 --> 00:22:13,200
things to cut our runtime so you can do

00:22:09,790 --> 00:22:13,200
better thanks

00:22:18,510 --> 00:22:48,550
questions a question was if we allow

00:22:45,040 --> 00:22:50,260
user to provide custom cloud provider or

00:22:48,550 --> 00:22:53,980
do they have to configure it all the

00:22:50,260 --> 00:22:58,900
time so this cloud provider is provided

00:22:53,980 --> 00:23:00,550
by kubernetes and basically operator

00:22:58,900 --> 00:23:02,230
needs to configure it if you want Doc's

00:23:00,550 --> 00:23:03,790
as a cloud you need to configure

00:23:02,230 --> 00:23:08,350
something you need to have credentials

00:23:03,790 --> 00:23:12,280
which I've said using cloud config in

00:23:08,350 --> 00:23:14,980
Bosch and you need to set some

00:23:12,280 --> 00:23:18,730
parameters in future a long long long

00:23:14,980 --> 00:23:21,610
future what we want and it's vosch cloud

00:23:18,730 --> 00:23:24,150
provider we want kubernetes to talk to

00:23:21,610 --> 00:23:26,470
boss and say please give me disc and

00:23:24,150 --> 00:23:29,530
Bosch will create disk attached to this

00:23:26,470 --> 00:23:32,050
node and it will rock a board give me

00:23:29,530 --> 00:23:35,490
Lord Bowser which potentially might

00:23:32,050 --> 00:23:40,510
happen there is there are some scenes in

00:23:35,490 --> 00:23:42,610
the wash nodes so in the future you'll

00:23:40,510 --> 00:23:43,780
use Bosch built-in settings and you

00:23:42,610 --> 00:23:46,720
won't need to configure this cloud

00:23:43,780 --> 00:23:51,870
provider at all but for now yes you need

00:23:46,720 --> 00:23:54,060
to configure it set some settings and

00:23:51,870 --> 00:23:59,830
there are some limited set of settings

00:23:54,060 --> 00:24:02,730
is there all in documentation there's

00:23:59,830 --> 00:24:02,730
another question

00:24:13,520 --> 00:24:21,010
it's right now project does not support

00:24:17,450 --> 00:24:24,110
it I think so

00:24:21,010 --> 00:24:25,610
The Heretic I haven't tried okay it's

00:24:24,110 --> 00:24:29,149
all it's not supported I haven't tried

00:24:25,610 --> 00:24:32,510
but it's possible because of links it's

00:24:29,149 --> 00:24:37,640
possible to get this if you deploy at CD

00:24:32,510 --> 00:24:40,520
with borscht separately you can get

00:24:37,640 --> 00:24:43,309
access to the 8 CD from the master and

00:24:40,520 --> 00:24:45,440
it doesn't need to be Calicut it it can

00:24:43,309 --> 00:24:48,649
be external or it can be run on separate

00:24:45,440 --> 00:24:51,890
VM but I don't think it's officially

00:24:48,649 --> 00:24:53,600
supported so there might be some issues

00:24:51,890 --> 00:24:56,029
you know you have to do it manually and

00:24:53,600 --> 00:24:59,750
check it manually if something does not

00:24:56,029 --> 00:25:02,200
work Tim will help you and I suppose I

00:24:59,750 --> 00:25:02,200
will solve it

00:25:19,799 --> 00:25:26,799
my question was is they want to scale by

00:25:25,780 --> 00:25:29,470
three master sir

00:25:26,799 --> 00:25:33,190
and if CFC are caused by default is one

00:25:29,470 --> 00:25:36,400
master in Georgian 0-16 that last

00:25:33,190 --> 00:25:38,640
released your Shan it cows is one master

00:25:36,400 --> 00:25:45,880
who is the ocean

00:25:38,640 --> 00:25:47,919
0:17 that is not released yet there we

00:25:45,880 --> 00:25:49,780
highlight unsure what will be the

00:25:47,919 --> 00:25:53,799
default what it's possible to use three

00:25:49,780 --> 00:25:57,010
masters and this is come on this is what

00:25:53,799 --> 00:26:00,280
I've this is what I've done

00:25:57,010 --> 00:26:03,700
so I from these John box if I would go

00:26:00,280 --> 00:26:06,640
again I have three masters no jokes

00:26:03,700 --> 00:26:09,100
but yeah Rock is not finished on three

00:26:06,640 --> 00:26:11,020
masters team is still working and thus

00:26:09,100 --> 00:26:23,320
some caveat some edge cases as a

00:26:11,020 --> 00:26:26,559
covering yes another question Saudi

00:26:23,320 --> 00:26:31,929
nurses it's worse so it's we use

00:26:26,559 --> 00:26:35,559
botanist I not completely sure how it

00:26:31,929 --> 00:26:39,220
works by know that we have dinners Dima

00:26:35,559 --> 00:26:41,530
the trance on the local VM and it

00:26:39,220 --> 00:26:46,240
actually talks to local VM to get eNOS

00:26:41,530 --> 00:26:48,940
records I suppose director custom sets

00:26:46,240 --> 00:26:51,100
like information about which films are

00:26:48,940 --> 00:26:54,610
up and reach her down in particular

00:26:51,100 --> 00:26:56,620
deployments but so I don't think that

00:26:54,610 --> 00:26:58,990
states like something big cry knows it

00:26:56,620 --> 00:27:01,240
also director I suppose all the raw or

00:26:58,990 --> 00:27:03,100
Cali but I don't know details if you

00:27:01,240 --> 00:27:06,460
really want to find out as I will do

00:27:03,100 --> 00:27:09,250
boss office hours after the stalk come

00:27:06,460 --> 00:27:11,320
and asked me tree oh I know I'm not sure

00:27:09,250 --> 00:27:18,750
it it's well documented right now so

00:27:11,320 --> 00:27:18,750
comment ultimately yes

00:27:25,170 --> 00:27:33,390
okay okay yeah I get question why do you

00:27:30,100 --> 00:27:36,940
want to run cabarrus is called Fondren

00:27:33,390 --> 00:27:42,340
those are two parts one part is why do

00:27:36,940 --> 00:27:44,470
you want to run kubernetes and if you if

00:27:42,340 --> 00:27:46,720
you so I will ask it a little bit later

00:27:44,470 --> 00:27:48,870
why do you want to occupy Swiss Cloud

00:27:46,720 --> 00:27:51,520
Foundry if you have Cloud Foundry you

00:27:48,870 --> 00:27:52,480
probably want operator to have the same

00:27:51,520 --> 00:27:55,510
tool to operate

00:27:52,480 --> 00:27:56,890
you are the deployments so that's kind

00:27:55,510 --> 00:28:00,130
of obvious but why do you want to run

00:27:56,890 --> 00:28:04,740
kubernetes there are several use cases

00:28:00,130 --> 00:28:11,170
one of them is using disks like

00:28:04,740 --> 00:28:14,470
Pistons it's it's supporting called

00:28:11,170 --> 00:28:18,070
foundry but as far as I know Cabernets

00:28:14,470 --> 00:28:22,900
has more configuration with it then

00:28:18,070 --> 00:28:24,970
extensibility it's very big part so it's

00:28:22,900 --> 00:28:27,250
really easy to extend kubernetes and

00:28:24,970 --> 00:28:28,960
some developers I get used to kubernetes

00:28:27,250 --> 00:28:31,870
they like they prefer gobias to call

00:28:28,960 --> 00:28:34,870
foundry there's some legacy of your

00:28:31,870 --> 00:28:37,030
clothes that it's very hard front on

00:28:34,870 --> 00:28:40,360
cloud fondant very easy to run on

00:28:37,030 --> 00:28:43,750
kubernetes there are some patterns like

00:28:40,360 --> 00:28:45,910
run inside cars and for example some

00:28:43,750 --> 00:28:47,290
specific routing if you want to have

00:28:45,910 --> 00:28:49,960
specific routing you have to go to

00:28:47,290 --> 00:28:53,410
kavadis we can't go on Godfather and

00:28:49,960 --> 00:28:56,320
change your routing UDP you can argue

00:28:53,410 --> 00:29:00,250
about this you can turn on foundry GPU

00:28:56,320 --> 00:29:02,500
we will probably with new stem cells

00:29:00,250 --> 00:29:04,390
will be able to run GPU your closest

00:29:02,500 --> 00:29:06,520
kavadis I know I'm not sure what will

00:29:04,390 --> 00:29:08,830
happen is code for it I don't know so

00:29:06,520 --> 00:29:11,460
that is like some use cases but yes

00:29:08,830 --> 00:29:11,460
one more question

00:29:29,340 --> 00:29:34,680
so question was about ipv6 and

00:29:32,070 --> 00:29:38,250
persistence if Iran is any issues is

00:29:34,680 --> 00:29:45,090
ipv6 and persistence hi

00:29:38,250 --> 00:29:46,770
I don't know I'm not so right now I'm

00:29:45,090 --> 00:29:49,560
not part of the CFC our team and I don't

00:29:46,770 --> 00:29:54,030
know what is issues with ipv6 what is

00:29:49,560 --> 00:29:57,930
the current state and this resistance I

00:29:54,030 --> 00:30:00,540
know that there are so many easy ways to

00:29:57,930 --> 00:30:03,840
shoot yourself and in your feet and make

00:30:00,540 --> 00:30:06,240
it not your can't break it and there are

00:30:03,840 --> 00:30:08,460
so many configurations that we covered

00:30:06,240 --> 00:30:10,370
most of them but some of them just don't

00:30:08,460 --> 00:30:13,650
talk because we don't know about

00:30:10,370 --> 00:30:25,350
specific configurations yes another

00:30:13,650 --> 00:30:27,750
question okay so mm-hmm question was do

00:30:25,350 --> 00:30:30,980
we want to have ingress control and buy

00:30:27,750 --> 00:30:34,920
it in the California guitar on tape I

00:30:30,980 --> 00:30:36,950
don't think there is a push to get it

00:30:34,920 --> 00:30:42,420
embed the code for the container runtime

00:30:36,950 --> 00:30:46,320
so statically can run it on your own you

00:30:42,420 --> 00:30:48,900
can deploy it with kubernetes Zen covers

00:30:46,320 --> 00:30:53,660
will have to handle it and watch for the

00:30:48,900 --> 00:30:59,700
like that it's alive and to house checks

00:30:53,660 --> 00:31:03,740
it's it's me okay I know that yeah so

00:30:59,700 --> 00:31:07,350
it's we I don't think there is a plan to

00:31:03,740 --> 00:31:09,360
do I to it to be a part of something

00:31:07,350 --> 00:31:11,490
it's called for the Catalan time team

00:31:09,360 --> 00:31:13,350
will do what if someone else will do it

00:31:11,490 --> 00:31:16,350
they were supported is that the thing

00:31:13,350 --> 00:31:19,890
like it's this is why we said we need

00:31:16,350 --> 00:31:22,520
you we need you to help us and deliver

00:31:19,890 --> 00:31:22,520
such features

00:31:23,610 --> 00:31:29,440
no questions no more questions thank you

00:31:26,650 --> 00:31:32,020
I will be on the portal booth after

00:31:29,440 --> 00:31:34,220
lunch so dumb if you have any questions

00:31:32,020 --> 00:31:38,190
and asked thank you

00:31:34,220 --> 00:31:38,190

YouTube URL: https://www.youtube.com/watch?v=XFhEMl_YXKg


