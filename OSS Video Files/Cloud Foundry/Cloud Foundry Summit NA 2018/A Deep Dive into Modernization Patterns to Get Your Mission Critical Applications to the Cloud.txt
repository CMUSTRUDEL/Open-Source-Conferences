Title: A Deep Dive into Modernization Patterns to Get Your Mission Critical Applications to the Cloud
Publication date: 2018-04-21
Playlist: Cloud Foundry Summit NA 2018
Description: 
	A Deep Dive into Modernization Patterns to Get Your Mission Critical Applications to the Cloud - Shaun Anderson, Pivotal

 Shaun will be taking you through several of the most common patterns he and his colleagues have compiled from experience on more than 45 modernization projects. These technical patterns were driven out by the desire to strangle business critical functionality out of legacy monoliths and push to the cloud without impacting current business flow. These patterns can be used to move functionality to the cloud in days and weeks rather than months and years.

Pattern Categories include:

* Strangling the Monolith
* Event Shunting
* Proxies / Facades / Adapters
* Gateways 

About Shaun Anderson
Shaun is an Application Transformation Practice Lead at Pivotal. He spends most of his time slaying, starving and strangling monoliths and defining pragmatic solutions to complicated problems. He has a wealth of experience designing and building mission critical applications with technologies running the gamut from Akka to Zuul. He is the inventor of top down domain oriented design techniques including the Boris Diagram. Shaun also contributed to the curriculum and taught the replatforming and modernization sections of Pivotalâ€™s Platform Acceleration Lab. His specialties are distributed computing and transforming mission critical Java applications into Cloud Native applications. Shaun has recently presented at the SpringOne Conference, has participated in webinars and podcasts.
Captions: 
	00:00:00,420 --> 00:00:06,120
my name is Sean Anderson and I am an

00:00:03,740 --> 00:00:08,490
application transformation lead at

00:00:06,120 --> 00:00:11,250
pivotal and I'll go into a little bit

00:00:08,490 --> 00:00:13,950
more detail what that means but we are

00:00:11,250 --> 00:00:17,880
here to talk about monetization patterns

00:00:13,950 --> 00:00:20,340
to get your applications to the cloud if

00:00:17,880 --> 00:00:26,310
anybody is in the wrong spot feel free

00:00:20,340 --> 00:00:28,859
to run away now so as I was asked to do

00:00:26,310 --> 00:00:32,189
the fire exit announcement as have you

00:00:28,859 --> 00:00:34,469
guys seen this the basically note the

00:00:32,189 --> 00:00:34,950
exits nearest you in the event of a fire

00:00:34,469 --> 00:00:38,430
alarm

00:00:34,950 --> 00:00:40,559
be calm exit in the event of a water

00:00:38,430 --> 00:00:43,530
landing your seats will become a

00:00:40,559 --> 00:00:45,719
flotation device which is which is very

00:00:43,530 --> 00:00:47,879
unlikely but you know we have to say it

00:00:45,719 --> 00:00:52,590
but please follow the directions of any

00:00:47,879 --> 00:00:55,670
public safety staff so who are the

00:00:52,590 --> 00:00:59,789
pivotal app transformation team

00:00:55,670 --> 00:01:03,480
basically we are a group of 45 now 50

00:00:59,789 --> 00:01:05,700
engineers who specialized in adapting

00:01:03,480 --> 00:01:08,070
and creating tools for transforming

00:01:05,700 --> 00:01:11,430
applications especially monoliths and

00:01:08,070 --> 00:01:14,520
and mission-critical applications to the

00:01:11,430 --> 00:01:16,650
cloud we've been doing this for more

00:01:14,520 --> 00:01:20,009
than three years which in this industry

00:01:16,650 --> 00:01:22,530
is a very long time we have done now

00:01:20,009 --> 00:01:26,250
more than 50 transformation engagements

00:01:22,530 --> 00:01:28,530
around the world and with each of these

00:01:26,250 --> 00:01:30,780
engagements we create a collection of

00:01:28,530 --> 00:01:32,640
recipes that we put it in our cookbooks

00:01:30,780 --> 00:01:36,270
they're basically lessons learned and

00:01:32,640 --> 00:01:38,610
patterns to apply and and how do we

00:01:36,270 --> 00:01:40,770
continue to rinse and repeat this

00:01:38,610 --> 00:01:44,040
process a lot of these patterns that

00:01:40,770 --> 00:01:45,210
that we've compiled over time some of

00:01:44,040 --> 00:01:47,700
which you've seen out in the industry

00:01:45,210 --> 00:01:48,960
the industry standard patterns but what

00:01:47,700 --> 00:01:53,670
I'm going to talk to you about today is

00:01:48,960 --> 00:01:56,909
is all real world experience but it's

00:01:53,670 --> 00:02:00,119
also can be a very dry subject so I'm

00:01:56,909 --> 00:02:02,850
going to enlist a amalgam character

00:02:00,119 --> 00:02:06,990
called Pete to help walk us through this

00:02:02,850 --> 00:02:09,780
and Pete basically represents a

00:02:06,990 --> 00:02:11,819
collection of customers so I figured it

00:02:09,780 --> 00:02:13,000
might be a little bit easier to digest

00:02:11,819 --> 00:02:15,850
some of this content

00:02:13,000 --> 00:02:17,350
if we have real-world examples and we

00:02:15,850 --> 00:02:19,060
have somebody that looks very hipster

00:02:17,350 --> 00:02:24,070
like Pete to walk us through this

00:02:19,060 --> 00:02:27,100
process so who is Pete while he is an

00:02:24,070 --> 00:02:30,100
Enterprise Architect at widget Co which

00:02:27,100 --> 00:02:33,700
I'm sure you've all worked at he

00:02:30,100 --> 00:02:35,350
maintains an order management system and

00:02:33,700 --> 00:02:38,440
in his spare time he likes to read about

00:02:35,350 --> 00:02:40,600
micro service architecture and secretly

00:02:38,440 --> 00:02:45,430
dreams to apply some of these techniques

00:02:40,600 --> 00:02:47,190
to his business that's that's something

00:02:45,430 --> 00:02:51,850
that I think most people have in common

00:02:47,190 --> 00:02:55,690
but in Pete's world he he has some

00:02:51,850 --> 00:02:58,060
constraints his order system is you know

00:02:55,690 --> 00:03:01,180
a big hairy monolith it's been something

00:02:58,060 --> 00:03:04,150
that has been created over time usually

00:03:01,180 --> 00:03:05,980
since the 70s for example in Pete's case

00:03:04,150 --> 00:03:09,480
there's some mainframe components

00:03:05,980 --> 00:03:13,420
there's of course the ever-popular

00:03:09,480 --> 00:03:15,459
components that are tied to you know the

00:03:13,420 --> 00:03:17,350
latest hotness from ten years ago and

00:03:15,459 --> 00:03:20,080
then those people left and and of course

00:03:17,350 --> 00:03:23,190
you have the you know system by

00:03:20,080 --> 00:03:25,269
acquisition so so Pete really is is

00:03:23,190 --> 00:03:28,209
concerned with just keeping this job

00:03:25,269 --> 00:03:30,880
keeping his system up and running now

00:03:28,209 --> 00:03:34,330
this this system is mission-critical it

00:03:30,880 --> 00:03:36,250
runs the business it's also like I said

00:03:34,330 --> 00:03:37,959
monolithic and it needs to be up so a

00:03:36,250 --> 00:03:39,700
whole bunch of nines however many nines

00:03:37,959 --> 00:03:43,709
you want after the decimal point that's

00:03:39,700 --> 00:03:46,810
what Pete's bosses say and it of course

00:03:43,709 --> 00:03:49,480
shares a mega database this this is a

00:03:46,810 --> 00:03:52,600
database that contains you know the God

00:03:49,480 --> 00:03:55,900
tables it's the storehouse of of the

00:03:52,600 --> 00:03:58,810
world basically in Pete's Pete knows

00:03:55,900 --> 00:04:02,049
that changing applications means at some

00:03:58,810 --> 00:04:05,680
point changing the data so what is

00:04:02,049 --> 00:04:09,880
Pete's problem well his problem is that

00:04:05,680 --> 00:04:12,280
the c-suite understands that hey we need

00:04:09,880 --> 00:04:15,459
to we need to do some modernization we

00:04:12,280 --> 00:04:17,979
need to be able to stay consistent and

00:04:15,459 --> 00:04:21,130
keep up with the competition we have

00:04:17,979 --> 00:04:23,770
some problems like we can't get software

00:04:21,130 --> 00:04:25,930
out the door quickly you know the bigger

00:04:23,770 --> 00:04:27,180
the applications get the harder they are

00:04:25,930 --> 00:04:29,950
to make

00:04:27,180 --> 00:04:33,180
you know like any other enterprise there

00:04:29,950 --> 00:04:35,200
are you know QA departments there's

00:04:33,180 --> 00:04:37,480
performance Department security

00:04:35,200 --> 00:04:40,000
departments everybody has their gates to

00:04:37,480 --> 00:04:42,340
go to production and another way of

00:04:40,000 --> 00:04:44,620
saying gate is something thrown in your

00:04:42,340 --> 00:04:47,650
way to slow you down and so Pete knows

00:04:44,620 --> 00:04:50,500
that you know the the c-suite really

00:04:47,650 --> 00:04:52,480
wants us to to go to the next step and

00:04:50,500 --> 00:04:55,030
they don't necessarily understand that

00:04:52,480 --> 00:04:57,120
so the c-suite says hey you know the

00:04:55,030 --> 00:04:59,620
bosses want to keep the business running

00:04:57,120 --> 00:05:01,960
but then they also want a holistic

00:04:59,620 --> 00:05:05,919
approach and they want to use DDD and

00:05:01,960 --> 00:05:11,169
agility and allow for innovation cloud

00:05:05,919 --> 00:05:15,010
native DevOps so what is what is Pete

00:05:11,169 --> 00:05:17,169
then think about well he's thinking a

00:05:15,010 --> 00:05:20,320
lot of things the first one is of course

00:05:17,169 --> 00:05:23,530
buzzword bingo and he won but more

00:05:20,320 --> 00:05:26,110
importantly he's thinking these guys are

00:05:23,530 --> 00:05:28,930
monsters this is this is really really

00:05:26,110 --> 00:05:31,900
challenging and they don't necessarily

00:05:28,930 --> 00:05:33,669
understand how challenging it is so you

00:05:31,900 --> 00:05:36,100
know of course they become sea monsters

00:05:33,669 --> 00:05:40,240
in his mind but that's less important

00:05:36,100 --> 00:05:44,500
right now so the next step then that

00:05:40,240 --> 00:05:47,050
Pete does is he understands that we need

00:05:44,500 --> 00:05:50,080
to get a direction you know a guiding

00:05:47,050 --> 00:05:53,470
principle something that is the the

00:05:50,080 --> 00:05:56,440
target there are processes that we have

00:05:53,470 --> 00:05:57,160
pivotal use like snap analysis event

00:05:56,440 --> 00:06:00,220
storm

00:05:57,160 --> 00:06:01,870
Boris diagrams those those processes are

00:06:00,220 --> 00:06:04,930
something I'm not going to go into today

00:06:01,870 --> 00:06:08,080
but the outcome of that is we have some

00:06:04,930 --> 00:06:10,720
sort of guiding principle a direction to

00:06:08,080 --> 00:06:12,970
go to approach this problem and that's

00:06:10,720 --> 00:06:17,380
really the first pattern here pattern 0

00:06:12,970 --> 00:06:19,150
is know where you want to go not

00:06:17,380 --> 00:06:22,180
necessarily how you need to get there

00:06:19,150 --> 00:06:26,130
and so that northstar that direction

00:06:22,180 --> 00:06:28,530
really is the the notional architecture

00:06:26,130 --> 00:06:31,150
everybody in this room is has

00:06:28,530 --> 00:06:33,850
experienced the you know six month long

00:06:31,150 --> 00:06:37,000
architecture assessments where all you

00:06:33,850 --> 00:06:39,520
do is build block diagrams and UML and

00:06:37,000 --> 00:06:39,880
you try to anticipate everything that

00:06:39,520 --> 00:06:41,710
could

00:06:39,880 --> 00:06:43,600
possibly happen in your system and plan

00:06:41,710 --> 00:06:47,290
for it and design an architecture around

00:06:43,600 --> 00:06:49,270
it we found that that doesn't typically

00:06:47,290 --> 00:06:51,430
work really well because it's hard to

00:06:49,270 --> 00:06:53,830
get going people you know don't enjoy

00:06:51,430 --> 00:06:55,150
doing that and most importantly you

00:06:53,830 --> 00:06:57,100
don't know what you don't know and the

00:06:55,150 --> 00:07:00,340
only way to get there is to have some

00:06:57,100 --> 00:07:02,350
sort of direction that is notional and

00:07:00,340 --> 00:07:05,680
start moving that direction and learn

00:07:02,350 --> 00:07:07,480
and and expand as as you go and and have

00:07:05,680 --> 00:07:11,290
the courage to change that direction if

00:07:07,480 --> 00:07:13,990
it becomes necessary but for Pete his

00:07:11,290 --> 00:07:16,960
choices were well we can do this all as

00:07:13,990 --> 00:07:19,090
a greenfield new application we can do

00:07:16,960 --> 00:07:20,950
this big bang approach where in parallel

00:07:19,090 --> 00:07:24,070
let's create the whole new ordering

00:07:20,950 --> 00:07:25,810
system which from a developer's

00:07:24,070 --> 00:07:28,090
perspective is easier but from a

00:07:25,810 --> 00:07:31,570
pragmatic business perspective it is not

00:07:28,090 --> 00:07:34,960
easy because business has to keep moving

00:07:31,570 --> 00:07:36,310
on right do you need to you need to add

00:07:34,960 --> 00:07:38,710
new features you need to keep

00:07:36,310 --> 00:07:41,050
development going and very few companies

00:07:38,710 --> 00:07:43,680
want to invest the capital to actually

00:07:41,050 --> 00:07:46,990
double your budget to create something

00:07:43,680 --> 00:07:49,300
to replace something in place so

00:07:46,990 --> 00:07:51,910
typically that means we want to do an

00:07:49,300 --> 00:07:54,190
incremental approach to this and by

00:07:51,910 --> 00:07:57,240
incremental mean that that means simply

00:07:54,190 --> 00:07:59,680
that we may be taking thin slices of

00:07:57,240 --> 00:08:02,140
functionality and putting that to

00:07:59,680 --> 00:08:05,220
production and slowly over time evolve

00:08:02,140 --> 00:08:09,180
and strangle off the monolith or the the

00:08:05,220 --> 00:08:11,830
legacy application and start forcing

00:08:09,180 --> 00:08:14,440
workloads to be on the new platform and

00:08:11,830 --> 00:08:16,600
in this case people wanted it running on

00:08:14,440 --> 00:08:18,640
Cloud Foundry for all the platform

00:08:16,600 --> 00:08:23,530
benefits that you folks are probably

00:08:18,640 --> 00:08:26,620
very aware of so the compass may give us

00:08:23,530 --> 00:08:29,410
a good idea of where we don't want to go

00:08:26,620 --> 00:08:32,080
I kind of think of it is if we have an

00:08:29,410 --> 00:08:33,700
arc you know just a direction we've

00:08:32,080 --> 00:08:35,320
eliminated three quarters of the

00:08:33,700 --> 00:08:37,930
directions out there that that's good

00:08:35,320 --> 00:08:42,180
enough we know where we don't want to go

00:08:37,930 --> 00:08:45,610
so let's just go the other direction so

00:08:42,180 --> 00:08:51,250
for Pete in this conversation his North

00:08:45,610 --> 00:08:52,050
Star is agile Dedede the desire to get

00:08:51,250 --> 00:08:54,480
as close to

00:08:52,050 --> 00:08:58,170
native as possible but this is not

00:08:54,480 --> 00:08:59,670
always always the case sometimes you

00:08:58,170 --> 00:09:02,100
want to just do good enough maybe you

00:08:59,670 --> 00:09:05,700
get six factor compliance instead of all

00:09:02,100 --> 00:09:07,350
12 or 15 factors and that's fine you

00:09:05,700 --> 00:09:10,800
know it's more important to just get

00:09:07,350 --> 00:09:12,420
moving the next the next thing that he

00:09:10,800 --> 00:09:16,140
really wants to do is make sure you

00:09:12,420 --> 00:09:18,990
iterate you know small small steps aim

00:09:16,140 --> 00:09:21,029
small miss small so in in peds case it

00:09:18,990 --> 00:09:24,209
was really important to be able to let's

00:09:21,029 --> 00:09:25,860
start trying something and and have that

00:09:24,209 --> 00:09:28,589
feedback loop you know if things don't

00:09:25,860 --> 00:09:30,360
work or as we learn more information you

00:09:28,589 --> 00:09:32,730
can start to evolve the architecture you

00:09:30,360 --> 00:09:35,100
may evolve priorities for example and

00:09:32,730 --> 00:09:39,360
and deprioritize some part of your

00:09:35,100 --> 00:09:40,350
application and then minimize and manage

00:09:39,360 --> 00:09:42,149
the new tech debt

00:09:40,350 --> 00:09:43,800
now that's something that is can be

00:09:42,149 --> 00:09:44,940
really challenging because what we're

00:09:43,800 --> 00:09:47,459
really trying to do here with these

00:09:44,940 --> 00:09:48,930
patterns is we're trying to replace tech

00:09:47,459 --> 00:09:51,149
debt you know this whole monolithic

00:09:48,930 --> 00:09:53,700
system is really technical debt and the

00:09:51,149 --> 00:09:56,399
more we add to that to enable our new

00:09:53,700 --> 00:09:59,160
features the more we have to remove

00:09:56,399 --> 00:10:01,680
later so and finally we have to keep the

00:09:59,160 --> 00:10:05,399
business running so hopefully as we're

00:10:01,680 --> 00:10:06,839
going through this we can we can start

00:10:05,399 --> 00:10:08,850
adding these thin slices of

00:10:06,839 --> 00:10:11,820
functionality and keep the existing

00:10:08,850 --> 00:10:13,740
business running without without fail

00:10:11,820 --> 00:10:16,529
remember all those nines it's really

00:10:13,740 --> 00:10:19,410
important to keep those so how's Pete

00:10:16,529 --> 00:10:21,810
Gunn to do it well the first step he's

00:10:19,410 --> 00:10:24,089
gonna do is he's going to try to find

00:10:21,810 --> 00:10:27,779
seams in your system

00:10:24,089 --> 00:10:31,649
the the seams for example can be API

00:10:27,779 --> 00:10:34,050
calls message queues just logical

00:10:31,649 --> 00:10:36,600
function calls are a my sope wrasse

00:10:34,050 --> 00:10:38,820
basically they're just places where it

00:10:36,600 --> 00:10:40,589
either physically or technology-wise

00:10:38,820 --> 00:10:42,810
makes sense that hey here's a break

00:10:40,589 --> 00:10:47,459
here's something that is fairly easy to

00:10:42,810 --> 00:10:50,760
carve out but it often is located or

00:10:47,459 --> 00:10:52,680
situated around a capability of some

00:10:50,760 --> 00:10:55,380
sort so even if you have applications

00:10:52,680 --> 00:10:57,360
that are calling each other with native

00:10:55,380 --> 00:10:58,529
java calls for example you still might

00:10:57,360 --> 00:11:01,199
have a scene there because the

00:10:58,529 --> 00:11:04,500
functionality itself lends itself well

00:11:01,199 --> 00:11:07,920
to being pulled into a new

00:11:04,500 --> 00:11:12,240
so with these seams in in this order

00:11:07,920 --> 00:11:14,250
system by identifying these thin slices

00:11:12,240 --> 00:11:17,220
of functionality or these these bounded

00:11:14,250 --> 00:11:19,680
contacts you're able to pull something

00:11:17,220 --> 00:11:22,019
out right so that's the goal is we want

00:11:19,680 --> 00:11:25,259
to be able to pull out some features

00:11:22,019 --> 00:11:27,180
strangle off that monolith but where do

00:11:25,259 --> 00:11:29,430
we put that capability so now we've

00:11:27,180 --> 00:11:31,319
successfully identified here's a chunk

00:11:29,430 --> 00:11:34,470
of code or a chunk of functionality

00:11:31,319 --> 00:11:36,180
we're able to pull out but we don't know

00:11:34,470 --> 00:11:38,579
where to put them so we put that

00:11:36,180 --> 00:11:40,680
capability into our notional domain

00:11:38,579 --> 00:11:43,199
driven design target in this case it may

00:11:40,680 --> 00:11:45,389
be a micro service and this the service

00:11:43,199 --> 00:11:47,879
may be very small to begin with it may

00:11:45,389 --> 00:11:50,699
be basically a you know a framework that

00:11:47,879 --> 00:11:53,910
has a happy path thin slice through your

00:11:50,699 --> 00:11:56,310
ordering system for example but the

00:11:53,910 --> 00:11:59,899
important thing is now this is the first

00:11:56,310 --> 00:12:02,370
step of your new notional architecture

00:11:59,899 --> 00:12:05,310
but that leaves your ordering system

00:12:02,370 --> 00:12:07,379
with these these dangling connections

00:12:05,310 --> 00:12:10,649
you know the existing order system now

00:12:07,379 --> 00:12:13,170
doesn't know how to talk to the you know

00:12:10,649 --> 00:12:17,160
to your new functionality so that's

00:12:13,170 --> 00:12:20,220
where we start to look at pattern 2 and

00:12:17,160 --> 00:12:23,160
our pattern 2 is anti-corruption layer

00:12:20,220 --> 00:12:26,970
and this really is just a pattern that

00:12:23,160 --> 00:12:29,100
allows you to wire up the order system

00:12:26,970 --> 00:12:31,920
and you know fill in the blanks for this

00:12:29,100 --> 00:12:33,269
missing block and sometimes the

00:12:31,920 --> 00:12:37,350
anti-corruption layers can be very

00:12:33,269 --> 00:12:39,600
complex because you may have interfaces

00:12:37,350 --> 00:12:42,329
or integrations with other systems that

00:12:39,600 --> 00:12:46,889
also depend on this functionality so

00:12:42,329 --> 00:12:50,009
what that does for you is in this ACL it

00:12:46,889 --> 00:12:52,319
gives you the ability to have like

00:12:50,009 --> 00:12:55,290
translation or composition layers

00:12:52,319 --> 00:12:58,079
something that the old system knows how

00:12:55,290 --> 00:12:59,639
to talk to using the same it's same

00:12:58,079 --> 00:13:01,889
technique you know for example if it

00:12:59,639 --> 00:13:03,720
makes a soap call today to some system

00:13:01,889 --> 00:13:05,610
then the anti-corruption layer that we

00:13:03,720 --> 00:13:08,069
create will speak that same soap

00:13:05,610 --> 00:13:10,500
language and it may translate the data

00:13:08,069 --> 00:13:13,019
and may do some data composition it may

00:13:10,500 --> 00:13:15,750
even make calls under the covers to

00:13:13,019 --> 00:13:17,080
other systems for you just for the sole

00:13:15,750 --> 00:13:20,650
purpose of making

00:13:17,080 --> 00:13:23,110
work with your existing microservice and

00:13:20,650 --> 00:13:26,860
even validations you know things like

00:13:23,110 --> 00:13:30,370
that so what that gives you is it makes

00:13:26,860 --> 00:13:32,380
it so you have fewer changes to your

00:13:30,370 --> 00:13:33,970
dependent systems you know typically

00:13:32,380 --> 00:13:36,370
when you have a model if there you have

00:13:33,970 --> 00:13:38,970
something that the reason why you're

00:13:36,370 --> 00:13:41,020
you're modernizing to the cloud is

00:13:38,970 --> 00:13:42,700
specifically because you can't get

00:13:41,020 --> 00:13:45,250
changes out the door quickly and you're

00:13:42,700 --> 00:13:47,830
in your current system the last thing

00:13:45,250 --> 00:13:49,630
you want to do is try to require changes

00:13:47,830 --> 00:13:51,550
to that current system to enable your

00:13:49,630 --> 00:13:52,990
new because now your changes aren't

00:13:51,550 --> 00:13:54,190
going to go in for four months or six

00:13:52,990 --> 00:13:56,050
months and you have to go through all

00:13:54,190 --> 00:13:57,760
those hoops so the Santa corruption

00:13:56,050 --> 00:14:00,640
layer gives you the ability to kind of

00:13:57,760 --> 00:14:03,070
sneakily inject yourself into the

00:14:00,640 --> 00:14:06,040
existing system and almost trick it into

00:14:03,070 --> 00:14:07,720
calling the new system and what it

00:14:06,040 --> 00:14:09,790
doesn't know won't hurt it hopefully it

00:14:07,720 --> 00:14:13,120
also gives you the ability to keep your

00:14:09,790 --> 00:14:16,240
new services pure and create very robust

00:14:13,120 --> 00:14:18,520
tests and API driven test cases around

00:14:16,240 --> 00:14:20,590
it but more importantly that

00:14:18,520 --> 00:14:22,960
anti-corruption layer can contain most

00:14:20,590 --> 00:14:24,340
of that new tech debt and by tech debt

00:14:22,960 --> 00:14:26,740
in this case it might be those

00:14:24,340 --> 00:14:30,340
translations from soap to rest or maybe

00:14:26,740 --> 00:14:33,430
it's taking a large canonical data

00:14:30,340 --> 00:14:35,970
object and stripping it down into small

00:14:33,430 --> 00:14:40,090
pieces that your new system can digest

00:14:35,970 --> 00:14:43,240
and over time what happens then is your

00:14:40,090 --> 00:14:46,360
your ACL you know as you're moving more

00:14:43,240 --> 00:14:49,180
and more to production eventually that

00:14:46,360 --> 00:14:51,880
piece will die on the vine so your your

00:14:49,180 --> 00:14:54,820
ACL will will be running out there as a

00:14:51,880 --> 00:14:58,000
production application possibly inside a

00:14:54,820 --> 00:15:02,110
Cloud Foundry is its own deployment but

00:14:58,000 --> 00:15:05,080
over time as more and more new systems

00:15:02,110 --> 00:15:07,390
start using your your new micro service

00:15:05,080 --> 00:15:09,640
the old ones just kind of wither and die

00:15:07,390 --> 00:15:13,690
and that's kind of the idea behind this

00:15:09,640 --> 00:15:16,390
strangulation so over time any new

00:15:13,690 --> 00:15:18,940
features any new services that need your

00:15:16,390 --> 00:15:21,100
your bounded context your your

00:15:18,940 --> 00:15:22,630
capability your new business capability

00:15:21,100 --> 00:15:25,060
they can start going through your new

00:15:22,630 --> 00:15:28,510
API and take advantage of all the Cloud

00:15:25,060 --> 00:15:30,550
Foundry scalability and stateless

00:15:28,510 --> 00:15:32,260
transactions things like that

00:15:30,550 --> 00:15:34,470
and you don't have to every call back

00:15:32,260 --> 00:15:38,890
into your old system and that that

00:15:34,470 --> 00:15:40,870
sounds you know very rosy now in in

00:15:38,890 --> 00:15:44,920
practice it's still very challenging

00:15:40,870 --> 00:15:47,530
these are hard are hard subjects to to

00:15:44,920 --> 00:15:50,530
solve but this approach gives you the

00:15:47,530 --> 00:15:57,670
the next level down of how you can start

00:15:50,530 --> 00:16:00,730
peeling things off so an example of

00:15:57,670 --> 00:16:01,930
another pattern here that forms and

00:16:00,730 --> 00:16:05,110
you'll you'll see this kind of

00:16:01,930 --> 00:16:09,130
repetition where really our goal is to

00:16:05,110 --> 00:16:10,930
gain control over these seams so if for

00:16:09,130 --> 00:16:13,420
example one of the seams you identify is

00:16:10,930 --> 00:16:15,430
hey this this application uses message

00:16:13,420 --> 00:16:18,370
queues that's one of the easiest things

00:16:15,430 --> 00:16:22,330
that we can do is start shunting these

00:16:18,370 --> 00:16:24,760
messages to our new systems so what that

00:16:22,330 --> 00:16:26,320
allows us to do is okay we have our new

00:16:24,760 --> 00:16:28,630
application we put it into production

00:16:26,320 --> 00:16:31,450
we've gone through all of our testing we

00:16:28,630 --> 00:16:34,960
know that this app has a queue based API

00:16:31,450 --> 00:16:37,810
and it does what we wanted to so now

00:16:34,960 --> 00:16:40,600
let's just start consuming messages off

00:16:37,810 --> 00:16:43,150
of that queue and then possibly telling

00:16:40,600 --> 00:16:45,250
the old system hey you no longer need to

00:16:43,150 --> 00:16:47,380
consume these messages and you may do

00:16:45,250 --> 00:16:49,870
that even by tricking the old system to

00:16:47,380 --> 00:16:51,850
start listening to a dummy queue for

00:16:49,870 --> 00:16:53,860
example and so you don't have to do code

00:16:51,850 --> 00:16:56,260
changes you're just basically no longer

00:16:53,860 --> 00:16:59,380
given at work to do and eventually that

00:16:56,260 --> 00:17:03,760
system will wither and die it just isn't

00:16:59,380 --> 00:17:05,950
used anymore so you can accomplish

00:17:03,760 --> 00:17:09,040
similar things with topics or if you're

00:17:05,950 --> 00:17:11,620
using publish and subscribe in this you

00:17:09,040 --> 00:17:13,900
know common use cases of these events

00:17:11,620 --> 00:17:15,970
shunting by the way is we've had a lot

00:17:13,900 --> 00:17:18,220
of situations where people integrate

00:17:15,970 --> 00:17:22,209
with their mainframe using IBM MQ series

00:17:18,220 --> 00:17:24,400
and your event shunt may be consuming

00:17:22,209 --> 00:17:26,709
messages off of MQ and then putting them

00:17:24,400 --> 00:17:29,170
on rabbit for your new service and

00:17:26,709 --> 00:17:31,660
that's totally fine really it's just how

00:17:29,170 --> 00:17:33,730
can I be sneaky and make sure that the

00:17:31,660 --> 00:17:35,440
old system thinks it's working exactly

00:17:33,730 --> 00:17:39,240
the way it was and now I've translated

00:17:35,440 --> 00:17:41,399
thanks to my new North Star environment

00:17:39,240 --> 00:17:43,110
so with topics and published and

00:17:41,399 --> 00:17:46,049
subscribe it could be the same exact

00:17:43,110 --> 00:17:48,299
thing so we have our new service and he

00:17:46,049 --> 00:17:50,520
is subscribed to this topic so now there

00:17:48,299 --> 00:17:53,789
are components getting the same message

00:17:50,520 --> 00:17:57,480
in two places but at some point we know

00:17:53,789 --> 00:17:58,740
that there is from our our old service

00:17:57,480 --> 00:18:00,419
there's a point where he's putting

00:17:58,740 --> 00:18:03,120
messages on a queue for downstream

00:18:00,419 --> 00:18:06,960
consumption in this case we just simply

00:18:03,120 --> 00:18:08,820
say great let's let's just simulate that

00:18:06,960 --> 00:18:11,429
we'll make sure that our service at the

00:18:08,820 --> 00:18:14,399
end of its processing now you know

00:18:11,429 --> 00:18:16,409
continues on that downstream really it

00:18:14,399 --> 00:18:18,450
becomes just a matter of black box what

00:18:16,409 --> 00:18:20,250
came in before and what goes out is what

00:18:18,450 --> 00:18:22,679
we care about so let's just simulate

00:18:20,250 --> 00:18:25,230
that same process and now again we've

00:18:22,679 --> 00:18:27,179
shunted off all of the work from that

00:18:25,230 --> 00:18:31,070
component that thin slice in your

00:18:27,179 --> 00:18:34,980
monolith and it can wither and die again

00:18:31,070 --> 00:18:37,820
so there's other ideas here where of

00:18:34,980 --> 00:18:41,039
course we don't have message queues so

00:18:37,820 --> 00:18:43,860
we may be looking at things like proxies

00:18:41,039 --> 00:18:46,500
or facades and adapters all of these are

00:18:43,860 --> 00:18:48,049
very similar concepts and I'll go

00:18:46,500 --> 00:18:51,149
through these one at a time but

00:18:48,049 --> 00:18:53,250
essentially what we're trying to do is

00:18:51,149 --> 00:18:55,679
is the same thing we did with event

00:18:53,250 --> 00:18:57,890
shunting but we're taking these micro

00:18:55,679 --> 00:19:01,200
services that currently are being

00:18:57,890 --> 00:19:03,090
pointed to by a particular or not being

00:19:01,200 --> 00:19:05,880
pointed to by a particular client and

00:19:03,090 --> 00:19:08,460
we're saying hey let's let's inject a

00:19:05,880 --> 00:19:10,159
proxy let's put a piece in there so when

00:19:08,460 --> 00:19:12,809
they're making these rest or soap calls

00:19:10,159 --> 00:19:14,730
we change the configuration to point to

00:19:12,809 --> 00:19:18,120
the new service and the new service

00:19:14,730 --> 00:19:20,220
simply is a pass through to the old and

00:19:18,120 --> 00:19:22,260
when we do that that instantly gives us

00:19:20,220 --> 00:19:25,110
control so now everything's going

00:19:22,260 --> 00:19:27,899
through our new proxy and we can then

00:19:25,110 --> 00:19:30,510
wire that up and say awesome now as

00:19:27,899 --> 00:19:34,230
things are going through this this proxy

00:19:30,510 --> 00:19:35,960
I can I can decide if I want to route it

00:19:34,230 --> 00:19:38,789
to the old service routed to the new

00:19:35,960 --> 00:19:41,279
there's a lot of deployment patterns

00:19:38,789 --> 00:19:44,220
that let us say with this proxy I want

00:19:41,279 --> 00:19:45,990
to route say 10% to my new system just

00:19:44,220 --> 00:19:48,270
to make sure that I know it's working

00:19:45,990 --> 00:19:50,700
the way it should be the other 90% can

00:19:48,270 --> 00:19:52,360
still get routed to the old but again it

00:19:50,700 --> 00:19:55,330
gives us that capability of

00:19:52,360 --> 00:20:00,760
of now controlling the the flow of the

00:19:55,330 --> 00:20:03,220
applications a facade is similar to a

00:20:00,760 --> 00:20:06,250
proxy but usually it has to do a lot

00:20:03,220 --> 00:20:08,350
more work to make things happen in in

00:20:06,250 --> 00:20:10,179
Pete's case here he has an application

00:20:08,350 --> 00:20:13,120
that's running in a web logic

00:20:10,179 --> 00:20:16,360
environment and it's using RMI to talk

00:20:13,120 --> 00:20:18,880
to other components inside of this web

00:20:16,360 --> 00:20:20,620
logic system and that sounds you know it

00:20:18,880 --> 00:20:23,290
sounds very complicated you're using are

00:20:20,620 --> 00:20:25,690
my we can't easily you know how make an

00:20:23,290 --> 00:20:27,820
arm I call into the cloud how do we how

00:20:25,690 --> 00:20:29,740
do we handle this

00:20:27,820 --> 00:20:32,770
so again we have our micro services

00:20:29,740 --> 00:20:36,190
already out there and we could create an

00:20:32,770 --> 00:20:39,130
RMI facade and really what an RMI facade

00:20:36,190 --> 00:20:41,520
in this case is is a piece of code that

00:20:39,130 --> 00:20:44,260
chunk of application that that

00:20:41,520 --> 00:20:48,880
implements the same interface that the

00:20:44,260 --> 00:20:51,820
existing are my target does and we we

00:20:48,880 --> 00:20:55,090
tell the the new service now talk to the

00:20:51,820 --> 00:20:58,120
the new are my components so so really

00:20:55,090 --> 00:21:01,090
you're just you know you're throwing a

00:20:58,120 --> 00:21:03,400
decoy in now this are my service it may

00:21:01,090 --> 00:21:05,080
be necessary to have him running inside

00:21:03,400 --> 00:21:08,140
of the WebLogic environment for example

00:21:05,080 --> 00:21:10,690
and that's fine maybe it's an EJB that

00:21:08,140 --> 00:21:13,390
that you deploy out there that the EJB

00:21:10,690 --> 00:21:15,669
has code into then make rest calls on

00:21:13,390 --> 00:21:18,549
your behalf so that's that's all fine

00:21:15,669 --> 00:21:20,590
it's just now you have that facade where

00:21:18,549 --> 00:21:23,110
again it's it's the place where your

00:21:20,590 --> 00:21:26,650
tech that lives and it's doing this

00:21:23,110 --> 00:21:30,250
transformation one thing you'll notice

00:21:26,650 --> 00:21:32,260
as we're doing this we we're able to now

00:21:30,250 --> 00:21:35,710
start injecting instrumentation and

00:21:32,260 --> 00:21:37,750
monitoring and and logging in each of

00:21:35,710 --> 00:21:39,190
these each of these patterns each of

00:21:37,750 --> 00:21:41,260
these layers you're starting to see that

00:21:39,190 --> 00:21:43,660
now that we have control we can actually

00:21:41,260 --> 00:21:46,540
learn and understand more about how our

00:21:43,660 --> 00:21:49,090
applications used because most the time

00:21:46,540 --> 00:21:51,760
people's big hairy mana lists don't have

00:21:49,090 --> 00:21:53,770
log aggregation and and good

00:21:51,760 --> 00:21:57,520
instrumentation and monitoring so we're

00:21:53,770 --> 00:22:00,520
getting control there the next one is an

00:21:57,520 --> 00:22:04,380
adapter which is also similar to proxy

00:22:00,520 --> 00:22:07,289
and facade where in this case let's say

00:22:04,380 --> 00:22:09,210
Pete has some downstream systems that he

00:22:07,289 --> 00:22:10,889
makes calls too or maybe they're their

00:22:09,210 --> 00:22:14,429
dependent systems he's making a call to

00:22:10,889 --> 00:22:15,870
a customer application or even a CRM

00:22:14,429 --> 00:22:19,139
tool something like that

00:22:15,870 --> 00:22:21,029
and our micro Service then also needs to

00:22:19,139 --> 00:22:24,240
consume data from that similar to like a

00:22:21,029 --> 00:22:26,190
database so our adapter can be put in

00:22:24,240 --> 00:22:30,720
place that speaks the same language as

00:22:26,190 --> 00:22:33,570
the downstream service and then it can

00:22:30,720 --> 00:22:35,759
convert our more native rest calls or

00:22:33,570 --> 00:22:38,970
whatever we decide is our transformation

00:22:35,759 --> 00:22:40,769
or our application protocol and that

00:22:38,970 --> 00:22:43,200
adapter then is really just a wrapper

00:22:40,769 --> 00:22:47,159
around this external service and the

00:22:43,200 --> 00:22:49,679
same benefits apply here where that

00:22:47,159 --> 00:22:50,879
adapter has you know the consolidated

00:22:49,679 --> 00:22:53,129
logging it's got all of the

00:22:50,879 --> 00:22:55,169
instrumentation so now we're able to get

00:22:53,129 --> 00:22:56,940
some analytics out of the application as

00:22:55,169 --> 00:23:02,909
a side effect of being able to gain

00:22:56,940 --> 00:23:04,950
control here so the last pattern I think

00:23:02,909 --> 00:23:08,429
I'll have time to talk about here is

00:23:04,950 --> 00:23:11,279
gateways and gateways are similar to

00:23:08,429 --> 00:23:13,590
proxies in that they they will take

00:23:11,279 --> 00:23:15,570
traffic from an external source and

00:23:13,590 --> 00:23:19,110
route it through to your to your

00:23:15,570 --> 00:23:20,820
back-end services Zul is very popular

00:23:19,110 --> 00:23:25,350
for building your own gateways one of

00:23:20,820 --> 00:23:29,220
the Netflix OSS stack applications also

00:23:25,350 --> 00:23:31,230
Apogee Mule soft boomy basically what

00:23:29,220 --> 00:23:34,440
we're doing with the with the Gateway is

00:23:31,230 --> 00:23:37,529
we're a consumer today maybe talking to

00:23:34,440 --> 00:23:41,509
our system directly or through through

00:23:37,529 --> 00:23:44,850
our existing API layer we may want to

00:23:41,509 --> 00:23:46,620
say let's let's do the same thing we did

00:23:44,850 --> 00:23:50,190
with proxies let's have that consumer

00:23:46,620 --> 00:23:51,990
talk to a gateway you may have

00:23:50,190 --> 00:23:54,210
applications where they're already using

00:23:51,990 --> 00:23:57,450
a gateway like Apogee or something to do

00:23:54,210 --> 00:24:00,659
security endpoints and and do some of

00:23:57,450 --> 00:24:03,029
the control of your access but if not we

00:24:00,659 --> 00:24:05,250
can will plug in a gateway here that

00:24:03,029 --> 00:24:07,590
says now we're going to be intercepting

00:24:05,250 --> 00:24:09,690
these calls again from the consumer so

00:24:07,590 --> 00:24:12,539
we've gained control from that seam that

00:24:09,690 --> 00:24:14,909
we identified and once we have control

00:24:12,539 --> 00:24:17,340
of that we can let the Gateway do this

00:24:14,909 --> 00:24:17,910
routing so an end user or maybe an

00:24:17,340 --> 00:24:20,490
external

00:24:17,910 --> 00:24:23,070
customer say you're a cellphone provider

00:24:20,490 --> 00:24:24,990
and you have partners that you enable to

00:24:23,070 --> 00:24:26,850
access your systems to be able to

00:24:24,990 --> 00:24:29,310
register new customers things like that

00:24:26,850 --> 00:24:31,380
those api's can't change to the customer

00:24:29,310 --> 00:24:33,930
so we do that in the gateway layer and

00:24:31,380 --> 00:24:35,880
our back-end then is now isolated and

00:24:33,930 --> 00:24:37,620
can and you can continue your

00:24:35,880 --> 00:24:44,960
development and your your fast

00:24:37,620 --> 00:24:48,180
processing through that so in summary

00:24:44,960 --> 00:24:51,840
the the way I look at doing these

00:24:48,180 --> 00:24:53,910
patterns is similar to if you've ever

00:24:51,840 --> 00:24:55,140
been driving and you notice that you

00:24:53,910 --> 00:24:57,470
know they're widening the highway and

00:24:55,140 --> 00:24:59,910
you have an overpass and in that

00:24:57,470 --> 00:25:01,590
overpass they're widening it to three

00:24:59,910 --> 00:25:03,660
lanes and what typically they do is

00:25:01,590 --> 00:25:05,970
they'll build a bridge wider next to

00:25:03,660 --> 00:25:07,650
that traffic and then they start routing

00:25:05,970 --> 00:25:11,640
the traffic through to the new service

00:25:07,650 --> 00:25:13,500
you know to the new the new bridge and

00:25:11,640 --> 00:25:16,470
then they could tear down the old it's

00:25:13,500 --> 00:25:18,270
the same kind of thing I've had people

00:25:16,470 --> 00:25:19,950
say hey to me it's like a heart

00:25:18,270 --> 00:25:21,690
transplant you know you pull the heart

00:25:19,950 --> 00:25:23,790
out and you have to route the blood

00:25:21,690 --> 00:25:25,440
through this machine and I don't like

00:25:23,790 --> 00:25:27,270
using that analogy because it seems a

00:25:25,440 --> 00:25:29,580
little self-serving we're not that

00:25:27,270 --> 00:25:34,050
important to compare ourselves to heart

00:25:29,580 --> 00:25:35,970
surgeons but you get the same idea so

00:25:34,050 --> 00:25:39,120
really in summary we're trying to gain

00:25:35,970 --> 00:25:41,550
control at the seams we're using

00:25:39,120 --> 00:25:43,980
anti-corruption layers which can be a

00:25:41,550 --> 00:25:45,450
facade or a proxy or an event shunt or

00:25:43,980 --> 00:25:48,060
something built specifically for

00:25:45,450 --> 00:25:50,310
translation and that helps us keep that

00:25:48,060 --> 00:25:52,020
tech dead isolated and it helps minimize

00:25:50,310 --> 00:25:55,770
the probability that we have to change

00:25:52,020 --> 00:25:57,990
the system we're trying to strangle and

00:25:55,770 --> 00:26:00,510
over time your monolith gets strangled

00:25:57,990 --> 00:26:02,070
it just simply stops being used you

00:26:00,510 --> 00:26:04,560
don't even necessarily have to pull code

00:26:02,070 --> 00:26:07,080
out you just stop using that that chunk

00:26:04,560 --> 00:26:10,590
of the application and your dragon is

00:26:07,080 --> 00:26:12,390
tamed and finally the ACLS over time can

00:26:10,590 --> 00:26:13,640
just die on the vine because they are no

00:26:12,390 --> 00:26:19,320
longer used

00:26:13,640 --> 00:26:22,070
so in Pete's case his result was hey

00:26:19,320 --> 00:26:24,870
we've got applications in Cloud Foundry

00:26:22,070 --> 00:26:27,090
most of the time you can start within a

00:26:24,870 --> 00:26:29,400
couple months and actually get large

00:26:27,090 --> 00:26:31,399
portions of your monolith strangled our

00:26:29,400 --> 00:26:34,849
goal is two weeks or a week

00:26:31,399 --> 00:26:36,200
to get usable code in production but the

00:26:34,849 --> 00:26:40,190
bottom line is this is a very hard

00:26:36,200 --> 00:26:41,989
problem to solve the key to Pete success

00:26:40,190 --> 00:26:43,940
was he kept an eye on his guided print

00:26:41,989 --> 00:26:45,859
guiding principles you know it's we're

00:26:43,940 --> 00:26:47,539
going this direction sometimes you do

00:26:45,859 --> 00:26:49,729
things that looks ugly and there's a

00:26:47,539 --> 00:26:52,190
little dirtiness in there let's just try

00:26:49,729 --> 00:26:53,749
to contain our dirtiness to someplace

00:26:52,190 --> 00:26:56,289
where it's not going to bite us down the

00:26:53,749 --> 00:27:00,549
road or bite somebody else down the road

00:26:56,289 --> 00:27:03,379
and of course be agile iterative and

00:27:00,549 --> 00:27:05,089
break things into manageable chunks but

00:27:03,379 --> 00:27:07,700
in Pete's case the biggest key to his

00:27:05,089 --> 00:27:09,379
success was his company's commitment to

00:27:07,700 --> 00:27:11,929
making this work and that's why the

00:27:09,379 --> 00:27:13,999
iteration is very important because you

00:27:11,929 --> 00:27:16,190
can prove to those Seamonsters in the

00:27:13,999 --> 00:27:17,989
c-suite that hey we're you know what

00:27:16,190 --> 00:27:19,759
we're doing we actually have repeatable

00:27:17,989 --> 00:27:24,259
feedback quickly you don't have to wait

00:27:19,759 --> 00:27:29,869
8 months and that's how that's how PB k

00:27:24,259 --> 00:27:30,910
m-- successful and that is it so Pete's

00:27:29,869 --> 00:27:34,069
happy thank you

00:27:30,910 --> 00:27:34,069

YouTube URL: https://www.youtube.com/watch?v=s5qeE4qii6M


