Title: The Keys to the Cloud: Centralizing and Improving Permissions in Cloud Foundry - Isobel Redelmeier
Publication date: 2018-04-21
Playlist: Cloud Foundry Summit NA 2018
Description: 
	The Keys to the Cloud: Centralizing and Improving Permissions in Cloud Foundry - Isobel Redelmeier, Pivotal

 Have you ever had a developer who needed to push new code, but you didn't want them to see environment variables? Had to make everyone in a team Org Managers because it got too complicated to track what roles everyone needed? Or maybe you want to be able to make your own roles that combine permissions across components.

Perm, the new permissions service, aims to solve all of these problems. Perm centralizes access control across Cloud Foundry components so that you can better manage, audit, and even customize authorization decisions across your foundations. Perm is also integrating with external identity providers such as LDAP, making it easier to ensure all employees have the appropriate roles even as they switch teams across your enterprise.

For those rusty on authorization, the talk will provide background on different types of authorization systems, such as role-based access control (RBAC) and OAuth2.

In this talk, you'll learn about how Perm simplifies Cloud Foundry authorization, what Perm's roadmap looks like, and why we've made some of our bigger technical decisions. Most importantly, you'll learn how to improve the security of your platform overall! 

About Isobel Redelmeier
Isobel Redelmeier is a software engineer working on Cloud Foundry at Pivotal. She is currently the anchor of the Permissions team and has previously worked on CredHub.
Captions: 
	00:00:00,179 --> 00:00:06,480
hello can everyone hear me yeah thumbs

00:00:04,049 --> 00:00:08,429
up awesome welcome to the keys to the

00:00:06,480 --> 00:00:10,559
cloud centralizing and improving

00:00:08,429 --> 00:00:12,420
permissions in cloud foundry and I do

00:00:10,559 --> 00:00:15,630
not want to lose that might let's keep

00:00:12,420 --> 00:00:17,970
that there so this talk is about perm

00:00:15,630 --> 00:00:20,150
which is one of the newest cloud foundry

00:00:17,970 --> 00:00:22,500
components it's actually not in general

00:00:20,150 --> 00:00:25,230
it's not really general availability yet

00:00:22,500 --> 00:00:26,820
but we are experimenting with it and it

00:00:25,230 --> 00:00:29,519
should be available in CF deployment

00:00:26,820 --> 00:00:30,900
soon so as you probably noticed in the

00:00:29,519 --> 00:00:34,350
other talks need to start with fire to

00:00:30,900 --> 00:00:37,469
exit announcement so locations of the

00:00:34,350 --> 00:00:40,320
surrounding emergency exits and the lit

00:00:37,469 --> 00:00:42,300
exit sign back there things that you

00:00:40,320 --> 00:00:45,000
should be aware of if there is a fire

00:00:42,300 --> 00:00:46,860
alarm or a different emergency just exit

00:00:45,000 --> 00:00:52,800
to the public concourse area that is not

00:00:46,860 --> 00:00:54,600
concourse CI the physical area and the

00:00:52,800 --> 00:00:56,579
emergency exit stairwells are located to

00:00:54,600 --> 00:00:59,760
the outside of the facility also along

00:00:56,579 --> 00:01:01,289
the public concourse again not CI for

00:00:59,760 --> 00:01:03,359
your safety if there is an emergency

00:01:01,289 --> 00:01:05,970
please follow the directions of the

00:01:03,359 --> 00:01:08,250
public safety staff they know more about

00:01:05,970 --> 00:01:11,939
that stuff than me I more than most of

00:01:08,250 --> 00:01:13,740
us so they're the people to follow so we

00:01:11,939 --> 00:01:15,450
have a quick introduction and then we're

00:01:13,740 --> 00:01:17,759
going to discuss what the problem is

00:01:15,450 --> 00:01:21,030
today I go on they'd have an

00:01:17,759 --> 00:01:23,040
authorization primary primers so perm is

00:01:21,030 --> 00:01:24,360
all about authorization for those who

00:01:23,040 --> 00:01:26,939
aren't too familiar with things like a

00:01:24,360 --> 00:01:30,810
auth - we'll be discussing what some of

00:01:26,939 --> 00:01:33,090
the alternatives are look at what

00:01:30,810 --> 00:01:36,090
currently is in use throats Cloud

00:01:33,090 --> 00:01:37,920
Foundry discuss what perm itself is some

00:01:36,090 --> 00:01:40,320
of the technical decisions that we've

00:01:37,920 --> 00:01:42,380
made our upcoming roadmap and then

00:01:40,320 --> 00:01:45,780
hopefully have some time for questions

00:01:42,380 --> 00:01:47,490
quick intro to myself I'm a software

00:01:45,780 --> 00:01:49,829
engineer at pivotal and the anchor of

00:01:47,490 --> 00:01:50,490
the perm team prior to that I was on the

00:01:49,829 --> 00:01:52,470
credibly

00:01:50,490 --> 00:01:55,470
so working with credentials kind of a

00:01:52,470 --> 00:01:59,310
similar space still in the security

00:01:55,470 --> 00:02:01,890
space I really like security so right

00:01:59,310 --> 00:02:02,909
now cloud foundries permissions are

00:02:01,890 --> 00:02:04,680
pretty complicated

00:02:02,909 --> 00:02:06,750
it's hoping to be able to show you the

00:02:04,680 --> 00:02:09,220
website and actually like scroll through

00:02:06,750 --> 00:02:11,080
this for you but I don't I'm not

00:02:09,220 --> 00:02:14,260
greatest Fedora user it turns out so

00:02:11,080 --> 00:02:16,540
going to be sticking with with the

00:02:14,260 --> 00:02:18,490
slides now that I have them up um so

00:02:16,540 --> 00:02:21,790
this is kind of the first bit you can

00:02:18,490 --> 00:02:26,520
see I know it's a bit small but like we

00:02:21,790 --> 00:02:29,830
have like ten rolls or so with many many

00:02:26,520 --> 00:02:32,080
permissions this is the full the full

00:02:29,830 --> 00:02:37,210
list of all the different permissions I

00:02:32,080 --> 00:02:41,140
can see my pm just put his head in his

00:02:37,210 --> 00:02:42,490
hand when he saw this slide so for

00:02:41,140 --> 00:02:43,540
example things are very different

00:02:42,490 --> 00:02:45,550
depending on whether or not you are

00:02:43,540 --> 00:02:49,630
dealing with something that belongs in

00:02:45,550 --> 00:02:50,980
an org that is suspended and that has

00:02:49,630 --> 00:02:53,470
many effects throughout the code base

00:02:50,980 --> 00:02:55,060
has many effects throughout on anything

00:02:53,470 --> 00:02:58,080
that wants to interact with Cloud

00:02:55,060 --> 00:03:03,060
Foundry as we'll discuss later

00:02:58,080 --> 00:03:05,560
so beyond that very crazy graph or grid

00:03:03,060 --> 00:03:08,770
rolls are fixed so what that means is

00:03:05,560 --> 00:03:10,330
that if for example you have someone who

00:03:08,770 --> 00:03:12,520
is a developer someone who you know

00:03:10,330 --> 00:03:14,500
writes and pushes code and you want them

00:03:12,520 --> 00:03:17,140
to be able to to do everything that a

00:03:14,500 --> 00:03:19,989
developer would normally do like again

00:03:17,140 --> 00:03:22,030
right and push code but not see

00:03:19,989 --> 00:03:24,519
environment variables because those

00:03:22,030 --> 00:03:27,030
often contain credentials that you don't

00:03:24,519 --> 00:03:31,060
want your developers to have access to

00:03:27,030 --> 00:03:33,220
for security reasons you can't do that

00:03:31,060 --> 00:03:37,600
today you can either have a face

00:03:33,220 --> 00:03:40,690
developer too or you can have a nonce

00:03:37,600 --> 00:03:42,760
based developer who cannot push code so

00:03:40,690 --> 00:03:44,680
you have one or the other there's no

00:03:42,760 --> 00:03:46,510
middle ground

00:03:44,680 --> 00:03:48,549
there's also minimal coordination or

00:03:46,510 --> 00:03:50,950
centralization across components so

00:03:48,549 --> 00:03:54,340
there's no easy way of saying like okay

00:03:50,950 --> 00:03:56,049
like I want my space developers to also

00:03:54,340 --> 00:03:59,950
have access to this set of credentials

00:03:56,049 --> 00:04:03,310
incredibly say that today is a very

00:03:59,950 --> 00:04:06,070
manual process same thing with managing

00:04:03,310 --> 00:04:08,620
let's say Bosh teams which are I believe

00:04:06,070 --> 00:04:11,799
a fairly new feature note to meet really

00:04:08,620 --> 00:04:14,130
like no longer see Dimitri we'll assume

00:04:11,799 --> 00:04:16,600
that it's fairly near future

00:04:14,130 --> 00:04:18,250
synchronization with external identity

00:04:16,600 --> 00:04:21,039
identity providers is also pretty

00:04:18,250 --> 00:04:21,799
difficult there are some various tools

00:04:21,039 --> 00:04:24,110
some open source

00:04:21,799 --> 00:04:25,460
not to deal with that but most most

00:04:24,110 --> 00:04:28,099
people end up having to kind of roll

00:04:25,460 --> 00:04:31,190
their owns on their own solution so it's

00:04:28,099 --> 00:04:33,259
not really that fun it means that every

00:04:31,190 --> 00:04:35,870
time that someone let's say transfers

00:04:33,259 --> 00:04:38,690
teams or joins the company you need to

00:04:35,870 --> 00:04:40,539
give than all the right permissions and

00:04:38,690 --> 00:04:42,860
same thing when they leave that one's

00:04:40,539 --> 00:04:44,690
maybe a bit less frustrating to

00:04:42,860 --> 00:04:47,569
employees but more important from a

00:04:44,690 --> 00:04:49,250
security perspective also cloud

00:04:47,569 --> 00:04:51,440
controller permissions are really really

00:04:49,250 --> 00:04:53,720
tightly coupled to roles so let's say

00:04:51,440 --> 00:04:55,699
that you wanted that you were a

00:04:53,720 --> 00:04:58,099
different Cloud Foundry component or an

00:04:55,699 --> 00:05:03,139
app or something and you wanted to check

00:04:58,099 --> 00:05:05,300
whether a user could push an app or see

00:05:03,139 --> 00:05:06,889
credentials or anything like that you'd

00:05:05,300 --> 00:05:09,229
have to say well are they a space

00:05:06,889 --> 00:05:11,780
developer are they a global admin are

00:05:09,229 --> 00:05:13,729
they are they an org manager and so on

00:05:11,780 --> 00:05:19,819
or rather than just saying hey can this

00:05:13,729 --> 00:05:22,039
person push an app so let's go onto the

00:05:19,819 --> 00:05:23,780
primer stage so let's do a quick

00:05:22,039 --> 00:05:26,930
overview of Education versus

00:05:23,780 --> 00:05:28,669
authorization authentication is a matter

00:05:26,930 --> 00:05:31,430
of who you are

00:05:28,669 --> 00:05:37,490
who or what in the case of let's say an

00:05:31,430 --> 00:05:39,710
app or any other silicon entity so in

00:05:37,490 --> 00:05:41,270
this case we see that this is the akia

00:05:39,710 --> 00:05:42,919
monkey there aren't very many ikea

00:05:41,270 --> 00:05:46,819
monkeys around we know that this is the

00:05:42,919 --> 00:05:50,029
one on the other hand authorization is

00:05:46,819 --> 00:05:53,000
about on what can you do so in this case

00:05:50,029 --> 00:05:56,000
we see that this is bare bears cannot

00:05:53,000 --> 00:05:59,419
use cat doors so it doesn't get to use

00:05:56,000 --> 00:06:02,169
the cat door just get its head stuck on

00:05:59,419 --> 00:06:05,300
a while shoe is one of the more popular

00:06:02,169 --> 00:06:08,960
frameworks for authorization it's often

00:06:05,300 --> 00:06:12,409
used either with external tools like

00:06:08,960 --> 00:06:16,430
open ID connect or with additional

00:06:12,409 --> 00:06:18,349
endpoints on to also you work for

00:06:16,430 --> 00:06:20,990
authentication that is what you AAA does

00:06:18,349 --> 00:06:24,289
for example it provides both go off to

00:06:20,990 --> 00:06:27,770
and OID C or open ID connect so that you

00:06:24,289 --> 00:06:30,500
can check both someone's identity within

00:06:27,770 --> 00:06:32,060
Cloud Foundry as well as whether for

00:06:30,500 --> 00:06:33,620
example they are a cloud controller

00:06:32,060 --> 00:06:34,950
admin or whether they have the cloud

00:06:33,620 --> 00:06:39,450
controller right scope

00:06:34,950 --> 00:06:42,180
whether they have let's say cred hub dot

00:06:39,450 --> 00:06:46,440
read scopes and so on how's the basic

00:06:42,180 --> 00:06:48,690
flow of it nice miss yeah the basic flow

00:06:46,440 --> 00:06:52,380
of it is that you have a user who

00:06:48,690 --> 00:06:56,220
couldn't own some resources and then an

00:06:52,380 --> 00:06:57,630
application client then you have an

00:06:56,220 --> 00:07:00,960
application that is trying to access

00:06:57,630 --> 00:07:04,770
some resources on behalf of that user so

00:07:00,960 --> 00:07:07,110
they must get access from the user for

00:07:04,770 --> 00:07:09,630
which they accessed the authorization

00:07:07,110 --> 00:07:12,510
server and then they use that

00:07:09,630 --> 00:07:14,670
authorization via a token to ask the

00:07:12,510 --> 00:07:17,940
resource server to provide them with

00:07:14,670 --> 00:07:19,980
that with those resources this is what

00:07:17,940 --> 00:07:23,340
what is very commonly used as I

00:07:19,980 --> 00:07:26,250
mentioned and it is currently used some

00:07:23,340 --> 00:07:28,170
extent through Cloud Foundry however you

00:07:26,250 --> 00:07:29,430
can see that our model within Cloud

00:07:28,170 --> 00:07:31,650
Foundry itself is a bit different

00:07:29,430 --> 00:07:33,840
because as an example the cloud

00:07:31,650 --> 00:07:35,730
controller is both the resource server

00:07:33,840 --> 00:07:37,590
and application it doesn't really make

00:07:35,730 --> 00:07:41,100
sense for it to be asking anything else

00:07:37,590 --> 00:07:42,180
whether whether a user can access well

00:07:41,100 --> 00:07:45,090
it doesn't make sense for it to be

00:07:42,180 --> 00:07:49,050
asking you a a whether a user can access

00:07:45,090 --> 00:07:52,890
something because it already has it is

00:07:49,050 --> 00:07:55,200
also the resource server there are also

00:07:52,890 --> 00:07:58,500
access control lists which basically

00:07:55,200 --> 00:08:00,900
have a list of permissions per user so

00:07:58,500 --> 00:08:02,490
they check whether an an actor has let's

00:08:00,900 --> 00:08:04,860
say the write permission for a document

00:08:02,490 --> 00:08:07,230
and if so then that user is allowed to

00:08:04,860 --> 00:08:09,930
edit the document so let's say that I

00:08:07,230 --> 00:08:13,260
grant one of you added a write access

00:08:09,930 --> 00:08:16,710
for my slides for example then you would

00:08:13,260 --> 00:08:19,410
have edit access versus me just granting

00:08:16,710 --> 00:08:21,360
let's say global read access now every

00:08:19,410 --> 00:08:27,360
one of you would be able to read them

00:08:21,360 --> 00:08:29,520
but not edit them then rule based access

00:08:27,360 --> 00:08:31,290
control is what perm is focusing on

00:08:29,520 --> 00:08:34,860
today this has been more relevant to us

00:08:31,290 --> 00:08:38,849
and with rules rather than checking

00:08:34,860 --> 00:08:40,380
directly whether how a user gets

00:08:38,849 --> 00:08:44,610
permission you're able to say like all

00:08:40,380 --> 00:08:47,920
users of all users for a member of a

00:08:44,610 --> 00:08:52,089
particular role or group have that given

00:08:47,920 --> 00:08:54,639
permission so for example everyone who's

00:08:52,089 --> 00:08:56,649
a member of team perm and github can

00:08:54,639 --> 00:08:58,269
push code to perm we also work pretty

00:08:56,649 --> 00:09:00,430
closely with the Cappy team so we've

00:08:58,269 --> 00:09:02,230
given all the Cappy team members or

00:09:00,430 --> 00:09:05,019
Cloud Controller team members right

00:09:02,230 --> 00:09:06,639
access as well so everyone has member of

00:09:05,019 --> 00:09:09,310
Perm never in his member of cloud

00:09:06,639 --> 00:09:11,589
controller can both push code I'm a

00:09:09,310 --> 00:09:17,410
member of perm therefore it can I push

00:09:11,589 --> 00:09:20,350
code to perm yes so currently in in CF

00:09:17,410 --> 00:09:24,339
we have credit which is using OAuth for

00:09:20,350 --> 00:09:26,620
basic like kind of gate access to the

00:09:24,339 --> 00:09:28,600
API and then Ackles for more

00:09:26,620 --> 00:09:31,720
fine-grained access to individual

00:09:28,600 --> 00:09:34,990
credentials a boss which is using OAuth

00:09:31,720 --> 00:09:37,870
for both acts like kind of that general

00:09:34,990 --> 00:09:42,399
gated access as well as for teams so you

00:09:37,870 --> 00:09:44,260
can limit access to particular I believe

00:09:42,399 --> 00:09:47,410
to a particular direction or a director

00:09:44,260 --> 00:09:50,019
but particular aspects of boss um to a

00:09:47,410 --> 00:09:52,660
given Bosch team and then Cloud

00:09:50,019 --> 00:09:54,370
Controller which uses OAuth with a kind

00:09:52,660 --> 00:09:56,500
of a special type of Arabic where

00:09:54,370 --> 00:09:59,740
normally going back to our back for a

00:09:56,500 --> 00:10:02,769
sec you have both the aspect of who is a

00:09:59,740 --> 00:10:06,130
member of what role as well as what

00:10:02,769 --> 00:10:08,709
permissions that role has currently in

00:10:06,130 --> 00:10:10,870
cloud controller you just have on the

00:10:08,709 --> 00:10:12,790
roles you don't have that broken down by

00:10:10,870 --> 00:10:16,079
fine-grained permissions so you have

00:10:12,790 --> 00:10:19,930
space developers and then you have this

00:10:16,079 --> 00:10:24,670
nice grid but there's no direct

00:10:19,930 --> 00:10:27,550
knowledge in cloud controller itself of

00:10:24,670 --> 00:10:30,640
like what a space developer means it

00:10:27,550 --> 00:10:33,910
just says hey um Isabelle as a space

00:10:30,640 --> 00:10:35,589
developer or or let's say that I'm

00:10:33,910 --> 00:10:37,810
trying to push an app it'll say Isabella

00:10:35,589 --> 00:10:39,660
is a space developer therefore it

00:10:37,810 --> 00:10:42,100
doesn't say Isabelle can push an app

00:10:39,660 --> 00:10:48,430
though that coupling of that knowledge

00:10:42,100 --> 00:10:51,000
makes things very tricky so our solution

00:10:48,430 --> 00:10:55,939
is perm this is our mascot

00:10:51,000 --> 00:10:58,259
specifically the wick is our mascot perm

00:10:55,939 --> 00:11:01,199
perm is about answering two main

00:10:58,259 --> 00:11:04,589
questions can I give an actor perform a

00:11:01,199 --> 00:11:06,480
particular action on a resource and for

00:11:04,589 --> 00:11:08,040
which resource patterns I'll get into

00:11:06,480 --> 00:11:10,639
the distinction between the resource and

00:11:08,040 --> 00:11:15,420
resource patterns perform a given action

00:11:10,639 --> 00:11:18,860
so in order to be able to do those two

00:11:15,420 --> 00:11:21,930
things per means to have a concept of

00:11:18,860 --> 00:11:27,089
basically what rules that user is member

00:11:21,930 --> 00:11:29,689
of as well as what permissions those

00:11:27,089 --> 00:11:33,180
roles grant so you can say for example

00:11:29,689 --> 00:11:39,389
how can a space developer role entails

00:11:33,180 --> 00:11:44,310
the permissions to push apps for for

00:11:39,389 --> 00:11:46,800
that space or to to view credentials for

00:11:44,310 --> 00:11:48,750
that space let's say the distinction

00:11:46,800 --> 00:11:52,589
between resources and resource patterns

00:11:48,750 --> 00:11:54,600
here basically allows us to less you to

00:11:52,589 --> 00:12:01,259
manage hierarchies so that for example

00:11:54,600 --> 00:12:04,730
all org managers can create ten do

00:12:01,259 --> 00:12:07,589
various things in all spaces that are

00:12:04,730 --> 00:12:12,559
contained in that org by virtue of the

00:12:07,589 --> 00:12:15,269
fact that they have this parent role um

00:12:12,559 --> 00:12:18,300
technically we decided that perm should

00:12:15,269 --> 00:12:18,540
be on a G or PC api written and go thank

00:12:18,300 --> 00:12:21,660
you

00:12:18,540 --> 00:12:25,800
autocorrect for fixing or for up casing

00:12:21,660 --> 00:12:27,389
G RPC with standalone server it's a

00:12:25,800 --> 00:12:30,329
standalone server with with different

00:12:27,389 --> 00:12:32,670
language specific SDKs so for example

00:12:30,329 --> 00:12:34,709
there's Ruby SDK for Kathy I hope you

00:12:32,670 --> 00:12:36,629
also have a little go SDK that one's

00:12:34,709 --> 00:12:38,129
kind of still in the works but we have a

00:12:36,629 --> 00:12:41,550
bunch of go tooling ourselves and

00:12:38,129 --> 00:12:43,740
therefore have added the go SDK for

00:12:41,550 --> 00:12:46,079
ourselves all of this is open source so

00:12:43,740 --> 00:12:49,410
you can just go to github and see it um

00:12:46,079 --> 00:12:52,379
and we've been really focusing on it on

00:12:49,410 --> 00:12:54,360
implementing it iteratively so it's in

00:12:52,379 --> 00:12:57,750
for example pivotal web services but

00:12:54,360 --> 00:13:01,319
everything is behind not just a flag but

00:12:57,750 --> 00:13:02,939
also behind a tool called get called

00:13:01,319 --> 00:13:04,329
scientist which was written originally

00:13:02,939 --> 00:13:07,329
written by

00:13:04,329 --> 00:13:10,089
had maintained by them which basically

00:13:07,329 --> 00:13:12,910
allows you to run two or more code paths

00:13:10,089 --> 00:13:15,579
and DIF the results it's kind of like AP

00:13:12,910 --> 00:13:19,269
testing but for big Kobe factors it's

00:13:15,579 --> 00:13:20,829
really handy it's moving forward our

00:13:19,269 --> 00:13:23,230
plan is to become cloud controllers

00:13:20,829 --> 00:13:24,639
source of truth so as I mentioned a

00:13:23,230 --> 00:13:26,529
moment ago we're currently using

00:13:24,639 --> 00:13:29,379
scientists which allows us to diff the

00:13:26,529 --> 00:13:32,559
results which means that we can have all

00:13:29,379 --> 00:13:35,679
rights go to perm as well as to cloud

00:13:32,559 --> 00:13:39,670
controllers current database as well as

00:13:35,679 --> 00:13:43,689
reads still getting consumed from cc's

00:13:39,670 --> 00:13:44,259
database but we and then compare those

00:13:43,689 --> 00:13:48,360
reads

00:13:44,259 --> 00:13:50,679
- what Perman

00:13:48,360 --> 00:13:52,779
Cloud Foundry instance that has been

00:13:50,679 --> 00:13:54,339
alive for let's say five years you

00:13:52,779 --> 00:13:55,869
haven't migrated the data into perm

00:13:54,339 --> 00:13:58,660
things are going to be pretty out of

00:13:55,869 --> 00:14:00,610
sync and you can check that via the

00:13:58,660 --> 00:14:03,249
scientists stuff and see that everything

00:14:00,610 --> 00:14:05,139
is that the perm results will be

00:14:03,249 --> 00:14:07,360
blocking users from accessing things

00:14:05,139 --> 00:14:09,009
that they should be able to use then you

00:14:07,360 --> 00:14:11,860
can run the migrator we have a migrator

00:14:09,009 --> 00:14:15,069
tool that lets you populate perm from an

00:14:11,860 --> 00:14:17,769
existing cloud controller and after

00:14:15,069 --> 00:14:20,549
you've run that you should see that that

00:14:17,769 --> 00:14:23,850
the delta now goes down to zero and

00:14:20,549 --> 00:14:27,549
they're the same that they are both

00:14:23,850 --> 00:14:29,079
representing the same data we also going

00:14:27,549 --> 00:14:31,689
to be working on external group

00:14:29,079 --> 00:14:35,230
management so in particular that'll be

00:14:31,689 --> 00:14:38,110
on Elda management so you can currently

00:14:35,230 --> 00:14:40,899
sync your LDAP and other identity

00:14:38,110 --> 00:14:44,529
provider groups with with UAE but you

00:14:40,899 --> 00:14:47,290
can't then have those converged with

00:14:44,529 --> 00:14:53,649
your table controller roles our plan is

00:14:47,290 --> 00:14:55,239
to make that something happening our

00:14:53,649 --> 00:14:57,339
plan is to have that is to make that

00:14:55,239 --> 00:15:00,299
happen so that you will be able to and

00:14:57,339 --> 00:15:04,989
say well all members of this team are

00:15:00,299 --> 00:15:06,819
space developers in this space so and so

00:15:04,989 --> 00:15:09,279
let's say myself Isabelle

00:15:06,819 --> 00:15:11,619
so now joined this team therefore she's

00:15:09,279 --> 00:15:13,509
a space developer well now Isabelle has

00:15:11,619 --> 00:15:16,449
left the team therefore she's no longer

00:15:13,509 --> 00:15:17,379
a space developer or if you maybe even

00:15:16,449 --> 00:15:20,199
had

00:15:17,379 --> 00:15:23,529
a dedicated concourse pipeline for that

00:15:20,199 --> 00:15:25,569
team you could say all this is in the

00:15:23,529 --> 00:15:27,819
future and you'd be able to say all

00:15:25,569 --> 00:15:30,399
members of the team can both be space

00:15:27,819 --> 00:15:32,709
developers and push can update that

00:15:30,399 --> 00:15:33,429
pipeline and then once someone leaves

00:15:32,709 --> 00:15:35,739
the team

00:15:33,429 --> 00:15:37,869
it'll they'll just automatically have

00:15:35,739 --> 00:15:39,429
those permissions revoked which if

00:15:37,869 --> 00:15:40,899
you've been following any of the data

00:15:39,429 --> 00:15:45,869
breaches that have happened over the

00:15:40,899 --> 00:15:48,369
years a common pattern is X employees or

00:15:45,869 --> 00:15:50,019
people who like switch teams and stuff

00:15:48,369 --> 00:15:52,749
still having access to things that they

00:15:50,019 --> 00:15:55,059
shouldn't so the idea is to really help

00:15:52,749 --> 00:15:57,729
prevent that we're also going to be

00:15:55,059 --> 00:15:59,470
working on custom roles and find green

00:15:57,729 --> 00:16:02,529
permissions for copies so that means

00:15:59,470 --> 00:16:04,209
that for example you'll be able to have

00:16:02,529 --> 00:16:06,729
someone who has all of the permissions

00:16:04,209 --> 00:16:09,669
that a space developer has today except

00:16:06,729 --> 00:16:12,729
for accessing either reading or writing

00:16:09,669 --> 00:16:13,989
credentials or other environment

00:16:12,729 --> 00:16:17,019
variables so that should be pretty

00:16:13,989 --> 00:16:19,059
powerful um and while we are working

00:16:17,019 --> 00:16:20,470
with cloud controller first the plan is

00:16:19,059 --> 00:16:22,929
to work with other components in the

00:16:20,470 --> 00:16:24,970
future so things like bosh me trees

00:16:22,929 --> 00:16:28,509
pretty excited about that has some kind

00:16:24,970 --> 00:16:30,039
of crazy ideas I think I cred hub so

00:16:28,509 --> 00:16:32,259
again that would allow you to sync thing

00:16:30,039 --> 00:16:36,939
to sync things that for example a given

00:16:32,259 --> 00:16:40,229
app just has automatically permission to

00:16:36,939 --> 00:16:43,629
read its own credentials let's say

00:16:40,229 --> 00:16:46,899
concourse they're doing some more

00:16:43,629 --> 00:16:50,739
identity related work but right now we

00:16:46,899 --> 00:16:52,299
are hoping to do some more authorization

00:16:50,739 --> 00:16:54,279
with them in the future and again that

00:16:52,299 --> 00:16:57,399
would ideally allow you especially with

00:16:54,279 --> 00:16:59,470
the custom roles to have the custom

00:16:57,399 --> 00:17:01,779
roles in the group mapping to have a

00:16:59,470 --> 00:17:04,329
team that automatically gets access to

00:17:01,779 --> 00:17:07,860
these resources in CF itself as well as

00:17:04,329 --> 00:17:09,939
your external tools like concourse and

00:17:07,860 --> 00:17:12,039
those are the main things that we're

00:17:09,939 --> 00:17:14,730
talking about right now however we do

00:17:12,039 --> 00:17:17,740
have office hours in about an hour so

00:17:14,730 --> 00:17:19,809
and my PM is also sitting back there in

00:17:17,740 --> 00:17:23,259
the middle sorry for calling you out

00:17:19,809 --> 00:17:26,709
um so feel free to come talk to us later

00:17:23,259 --> 00:17:32,700
today about what you want and with that

00:17:26,709 --> 00:17:32,700
are we on time any questions

00:17:35,640 --> 00:17:42,760
yeah um so for those who aren't familiar

00:17:41,140 --> 00:17:45,700
with CF management it's a tool that

00:17:42,760 --> 00:17:48,250
basically lets you use a github repo or

00:17:45,700 --> 00:17:52,360
buy get repo in general doesn't need to

00:17:48,250 --> 00:17:54,190
be on yet have to manage roles kind of

00:17:52,360 --> 00:17:57,790
like how I did what I just said

00:17:54,190 --> 00:17:59,770
the idea is that most likely CF

00:17:57,790 --> 00:18:01,180
management would be working with pearl

00:17:59,770 --> 00:18:03,990
under the hood so you wouldn't have to

00:18:01,180 --> 00:18:06,190
stop using CF management if you like it

00:18:03,990 --> 00:18:09,730
but for those who don't want to use it

00:18:06,190 --> 00:18:13,480
because it isn't maintained as

00:18:09,730 --> 00:18:15,720
officially for example they wouldn't

00:18:13,480 --> 00:18:15,720
need to

00:18:38,850 --> 00:18:43,750
yeah that's a good question on permit

00:18:41,890 --> 00:18:46,780
self knows nothing about Bosch or Cloud

00:18:43,750 --> 00:18:50,230
Foundry you can just start the server

00:18:46,780 --> 00:18:53,050
it's it's a go binary you can build it

00:18:50,230 --> 00:18:57,280
or download it and run it it's also it's

00:18:53,050 --> 00:19:00,100
also available in docker images or of

00:18:57,280 --> 00:19:03,570
course the Bosh release so it can be run

00:19:00,100 --> 00:19:07,000
however you want its standalone or

00:19:03,570 --> 00:19:08,980
easily available through Bosh we are

00:19:07,000 --> 00:19:11,350
discussing the bootstrapping problem I

00:19:08,980 --> 00:19:20,410
don't like red hub for example as dealt

00:19:11,350 --> 00:19:24,240
with that back there might defer that

00:19:20,410 --> 00:19:24,240
one to my pm

00:19:45,240 --> 00:19:56,510
I retract results of public yeah should

00:19:53,850 --> 00:19:59,880
I keep meaning to put it into our our

00:19:56,510 --> 00:20:02,450
repo we mean I saw a hand over there I

00:19:59,880 --> 00:20:02,450
think yep

00:20:05,990 --> 00:20:11,550
yeah that one we haven't started doing

00:20:09,030 --> 00:20:12,960
the group mapping yet so that's actually

00:20:11,550 --> 00:20:16,440
something that we are starting I think

00:20:12,960 --> 00:20:20,220
this week well while we're in Boston

00:20:16,440 --> 00:20:23,420
oh we meaning it my teammates not me

00:20:20,220 --> 00:20:26,460
clearly because I'm standing up here and

00:20:23,420 --> 00:20:28,230
next week so the idea is that most

00:20:26,460 --> 00:20:30,900
likely for now for things like groups

00:20:28,230 --> 00:20:34,760
that don't that don't exist in cloud

00:20:30,900 --> 00:20:37,650
controller we would have we'd be

00:20:34,760 --> 00:20:41,790
available through the CFC Li probably at

00:20:37,650 --> 00:20:45,560
first as as a plugin later on it would

00:20:41,790 --> 00:20:49,170
be integrated into the core CLI

00:20:45,560 --> 00:20:52,680
for existing functionality nothing will

00:20:49,170 --> 00:20:56,400
change so right now as Christopher

00:20:52,680 --> 00:20:58,550
mentioned we've been refactoring cappy's

00:20:56,400 --> 00:21:01,890
that it is using perm under the hood and

00:20:58,550 --> 00:21:07,590
that's been running in a big production

00:21:01,890 --> 00:21:09,090
server for several months or so now we

00:21:07,590 --> 00:21:12,120
just haven't actually flipped the switch

00:21:09,090 --> 00:21:14,520
that it is used as as a source of truth

00:21:12,120 --> 00:21:19,560
it also we basically have all rights

00:21:14,520 --> 00:21:24,030
going to perm code wise and the new like

00:21:19,560 --> 00:21:25,770
v3 of Cathy's reads going to parent but

00:21:24,030 --> 00:21:29,850
not yet v2 that's the trickier part

00:21:25,770 --> 00:21:34,940
that's why we still don't have that's

00:21:29,850 --> 00:21:34,940
why the estimate was a bit fuzzy

00:21:36,490 --> 00:21:45,290
um depends on which rights so rights for

00:21:41,450 --> 00:21:48,740
a group mapping on so seeing members of

00:21:45,290 --> 00:21:52,010
this group that maps to that Elda group

00:21:48,740 --> 00:21:55,910
let's same would most likely go through

00:21:52,010 --> 00:21:59,180
the CFC Li sorry I missed half of that

00:21:55,910 --> 00:22:02,780
so seeing that that group gets tied to a

00:21:59,180 --> 00:22:06,290
particular role would likely go through

00:22:02,780 --> 00:22:08,990
the would go through the CLI whether it

00:22:06,290 --> 00:22:12,200
gets proxied through Kathy or not it's

00:22:08,990 --> 00:22:14,480
still a bit in up in the air if you have

00:22:12,200 --> 00:22:17,800
thoughts on that we're happy to hear the

00:22:14,480 --> 00:22:17,800
later today yep

00:22:25,540 --> 00:22:32,420
if I understand your quads your question

00:22:29,180 --> 00:22:34,990
whether a single user can get matched to

00:22:32,420 --> 00:22:34,990
multiple roles

00:22:45,230 --> 00:22:50,990
yeah yeah so with with the customer so

00:22:48,370 --> 00:22:52,940
kind of two parts they're a single user

00:22:50,990 --> 00:22:56,809
can be part of as many roles as you want

00:22:52,940 --> 00:23:00,950
I mean I we've done some pretty serious

00:22:56,809 --> 00:23:04,220
benchmarking and I think our biggest

00:23:00,950 --> 00:23:06,649
user had like 50,000 roles or something

00:23:04,220 --> 00:23:09,370
and it was pretty performant at that

00:23:06,649 --> 00:23:14,090
point more performant than capias today

00:23:09,370 --> 00:23:16,669
and with the second part of that whether

00:23:14,090 --> 00:23:19,549
you can have a single role that maps to

00:23:16,669 --> 00:23:23,110
multiple spaces or orgs with the custom

00:23:19,549 --> 00:23:23,110
roles you can do whatever you want okay

00:23:28,029 --> 00:23:33,609
with what API

00:23:30,530 --> 00:23:33,609
[Music]

00:23:39,790 --> 00:23:45,250
yeah yeah with the custom with the

00:23:43,870 --> 00:23:48,450
customer election ality and the

00:23:45,250 --> 00:23:51,810
fine-grained permissions that should do

00:23:48,450 --> 00:23:51,810
any others

00:24:01,340 --> 00:24:10,070
on most likely it yeah

00:24:07,070 --> 00:24:14,600
so the I'm not super super familiar with

00:24:10,070 --> 00:24:23,870
CFC are but we've been kind of tentative

00:24:14,600 --> 00:24:28,910
ly talking about that yeah yeah yeah on

00:24:23,870 --> 00:24:32,930
I know the kubernetes our back system is

00:24:28,910 --> 00:24:35,000
pretty flexible and our p.m. Christopher

00:24:32,930 --> 00:24:39,590
has done some early prototyping with it

00:24:35,000 --> 00:24:49,060
and look pretty feasible so the plan is

00:24:39,590 --> 00:24:49,060

YouTube URL: https://www.youtube.com/watch?v=hyXEsQeBfQc


