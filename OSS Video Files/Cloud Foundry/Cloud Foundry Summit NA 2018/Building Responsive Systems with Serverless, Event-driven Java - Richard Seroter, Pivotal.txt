Title: Building Responsive Systems with Serverless, Event-driven Java - Richard Seroter, Pivotal
Publication date: 2018-04-21
Playlist: Cloud Foundry Summit NA 2018
Description: 
	Building Responsive Systems with Serverless, Event-driven Java - Richard Seroter, Pivotal & Asir Vedamuthu Selvasingh, Microsoft

 Speed. It matters in software. Not going fast just for the sake of it. No, it's about learning quickly and delivering insight and capabilities that move you forward. How does event processing make this possible? What role does serverless technology play? In this talk, Richard from Pivotal and Asir from Microsoft take a look at event-driven architectures, and how to realize it with a Java-centric solution. This solution collects data from around the world and reveals real-time insight. The presenters will demonstrate all the components, including Spring Boot, Azure Event Hubs, Azure Functions, and Spring Cloud Function. After this talk, attendees will have the knowledge they need to deliver modern, responsive systems. 

About Asir Selvasingh
Asir started building Java apps in 1995. He has been into developing enterprise products, applications and open source projects for years now. Asir focuses on everything needed for the developers to build Java apps on Azure.

About Richard Seroter
Richard Seroter is a Senior Director of Product at Pivotal, with a masterâ€™s degree in Engineering from the University of Colorado. Heâ€™s also a 10-time Microsoft MVP for cloud, Pluralsight trainer, lead InfoQ.com editor for cloud computing, frequent public speaker, and author of multiple books on application integration strategies. Richard maintains a regularly updated blog on topics of architecture and solution design and can be found on Twitter as @rseroter.
Captions: 
	00:00:00,000 --> 00:00:04,770
all right thank you all for coming here

00:00:03,270 --> 00:00:08,189
this afternoon my name is Richard I work

00:00:04,770 --> 00:00:12,000
at pivotal I'm awesome I'm Luke for

00:00:08,189 --> 00:00:16,470
Microsoft today we are going to talk

00:00:12,000 --> 00:00:18,570
about seven yeah we're gonna have some

00:00:16,470 --> 00:00:20,460
fun mostly demo or they show you a lot

00:00:18,570 --> 00:00:22,529
of code that may or may not work so it's

00:00:20,460 --> 00:00:23,789
gonna be really exciting and then we are

00:00:22,529 --> 00:00:25,199
gonna show kind of a venture of an

00:00:23,789 --> 00:00:26,609
architecture we're gonna take a look at

00:00:25,199 --> 00:00:27,840
a lot of different as your functions

00:00:26,609 --> 00:00:29,789
give you a sense of how things work

00:00:27,840 --> 00:00:31,920
together and the point of this is also

00:00:29,789 --> 00:00:34,559
to show you how Java works well on Azure

00:00:31,920 --> 00:00:36,630
as well as Cloud Foundry give you sense

00:00:34,559 --> 00:00:38,160
how this works this is gonna be so loud

00:00:36,630 --> 00:00:40,559
you're gonna need to know the fire exit

00:00:38,160 --> 00:00:44,129
apparently in all of these presentations

00:00:40,559 --> 00:00:45,719
so buckle up so a venture of an

00:00:44,129 --> 00:00:47,219
architecture I know we talk about this

00:00:45,719 --> 00:00:49,170
stuff but we probably see this in a lot

00:00:47,219 --> 00:00:53,699
of different places ah sir do you drink

00:00:49,170 --> 00:00:55,620
coffee oh yeah yeah every day nice so

00:00:53,699 --> 00:00:56,940
that's pretty much asynchronous right I

00:00:55,620 --> 00:00:58,530
mean you don't stand there and wait for

00:00:56,940 --> 00:01:00,090
the barista to give you the coffee

00:00:58,530 --> 00:01:01,859
typically you move away and then they

00:01:00,090 --> 00:01:03,840
say your name probably incorrectly and

00:01:01,859 --> 00:01:05,339
then they'll hand you the coffee later

00:01:03,840 --> 00:01:07,760
so it's kind of event driven based on

00:01:05,339 --> 00:01:10,080
them calling your name mm-hmm

00:01:07,760 --> 00:01:11,700
processing a loan you know I think we

00:01:10,080 --> 00:01:13,020
owned houses in the Seattle area and

00:01:11,700 --> 00:01:15,119
everybody you gotta go through the loan

00:01:13,020 --> 00:01:16,560
process and that's step by step right

00:01:15,119 --> 00:01:18,090
the series of events it's not one

00:01:16,560 --> 00:01:21,330
synchronous process through we see that

00:01:18,090 --> 00:01:23,100
all the time customer complaints you

00:01:21,330 --> 00:01:25,259
call up and yell at somebody maybe

00:01:23,100 --> 00:01:26,729
Microsoft about that a weird support

00:01:25,259 --> 00:01:28,200
issue yeah that's the photoshoot that's

00:01:26,729 --> 00:01:29,820
it triggers something right they're not

00:01:28,200 --> 00:01:31,590
constantly pulling their customers

00:01:29,820 --> 00:01:33,240
although I think they do kind of how are

00:01:31,590 --> 00:01:34,650
things going it's a vent treatment

00:01:33,240 --> 00:01:36,810
that's based on getting some feedback

00:01:34,650 --> 00:01:38,130
and then finally hey all of you of

00:01:36,810 --> 00:01:39,960
course not now cuz this is an awesome

00:01:38,130 --> 00:01:42,990
presentation but you often check email

00:01:39,960 --> 00:01:44,579
and that's often event-driven right you

00:01:42,990 --> 00:01:46,530
respond to the event you do something

00:01:44,579 --> 00:01:48,780
with it so we're surrounded by events in

00:01:46,530 --> 00:01:50,939
an architecture but building a modern

00:01:48,780 --> 00:01:52,229
one usually takes a different kind of

00:01:50,939 --> 00:01:53,640
approach so we've actually built an

00:01:52,229 --> 00:01:56,250
architecture for you and we're gonna

00:01:53,640 --> 00:01:58,680
build this some of this together and it

00:01:56,250 --> 00:02:00,570
kind of uses this fictitious example of

00:01:58,680 --> 00:02:03,479
a store of coffee variety as we're both

00:02:00,570 --> 00:02:04,950
from Seattle that wants to do more event

00:02:03,479 --> 00:02:06,930
remand ordering from different branch

00:02:04,950 --> 00:02:09,239
locations we're gonna be generating load

00:02:06,930 --> 00:02:11,850
generating inventory we're processing

00:02:09,239 --> 00:02:13,380
that data database and one

00:02:11,850 --> 00:02:15,570
talk about some of the technology here

00:02:13,380 --> 00:02:18,030
and then using pivotal Cloud Foundry in

00:02:15,570 --> 00:02:20,100
the Boston location using Azure app

00:02:18,030 --> 00:02:22,020
service in additional regions because

00:02:20,100 --> 00:02:23,580
we're actually gonna in this session at

00:02:22,020 --> 00:02:24,870
Singapore to the mix and this is real

00:02:23,580 --> 00:02:27,210
life we're actually adding this in these

00:02:24,870 --> 00:02:29,090
real locations right there's nothing up

00:02:27,210 --> 00:02:30,930
your sleeve you wearing short sleeves so

00:02:29,090 --> 00:02:32,640
nothing up your sleeves this will be

00:02:30,930 --> 00:02:33,870
legit and we're gonna kind of see how

00:02:32,640 --> 00:02:35,730
you scale an adventure of an

00:02:33,870 --> 00:02:37,500
architecture out in Azure but did you

00:02:35,730 --> 00:02:39,270
want to explain some of the key tech in

00:02:37,500 --> 00:02:41,340
here like as your functions in cosmos

00:02:39,270 --> 00:02:43,080
sure yeah so when we talk about

00:02:41,340 --> 00:02:44,160
event-driven here we are talking about

00:02:43,080 --> 00:02:46,800
serverless

00:02:44,160 --> 00:02:49,530
so simulus a piece of code that's

00:02:46,800 --> 00:02:51,480
triggered by any events right so whether

00:02:49,530 --> 00:02:53,310
it's a coffee store or a loan processing

00:02:51,480 --> 00:02:55,500
or customer complaints there are plenty

00:02:53,310 --> 00:02:57,120
of events in the world right so the

00:02:55,500 --> 00:02:58,590
server list then it comes into

00:02:57,120 --> 00:03:02,790
event-driven Java

00:02:58,590 --> 00:03:05,460
now imagine imagine there's a real-time

00:03:02,790 --> 00:03:09,180
inventory half-price so serverless

00:03:05,460 --> 00:03:12,510
an event event in this case very often

00:03:09,180 --> 00:03:14,520
the retailer's tell us right they want

00:03:12,510 --> 00:03:16,770
to provision a store or provision a

00:03:14,520 --> 00:03:18,000
region where they have lots and lots of

00:03:16,770 --> 00:03:20,280
terminals whether it's a warehouse

00:03:18,000 --> 00:03:21,960
terminal or a store terminal they want

00:03:20,280 --> 00:03:24,480
to provision in less than five minutes

00:03:21,960 --> 00:03:26,910
or less than 10 minutes right how fast

00:03:24,480 --> 00:03:30,510
that they they want to expand right so

00:03:26,910 --> 00:03:33,210
what you're looking at here is like a

00:03:30,510 --> 00:03:35,580
mix of things so let's take a focus on

00:03:33,210 --> 00:03:37,710
what's happening in Boston the same

00:03:35,580 --> 00:03:39,810
thing is being scaled to London and

00:03:37,710 --> 00:03:42,030
today what we would show you is what's

00:03:39,810 --> 00:03:43,920
happening in Boston in London and then

00:03:42,030 --> 00:03:46,050
we're going to start deploying into

00:03:43,920 --> 00:03:48,540
Singapore and you'll see how responsive

00:03:46,050 --> 00:03:50,160
and you how event event it is right so

00:03:48,540 --> 00:03:52,260
let's look at the Boston right so if

00:03:50,160 --> 00:03:54,870
there are four key things here when you

00:03:52,260 --> 00:03:59,100
look at this picture the first one is

00:03:54,870 --> 00:04:01,850
the data ingestion right it's using an

00:03:59,100 --> 00:04:04,770
event hub it's a fully managed cloud

00:04:01,850 --> 00:04:06,330
scale ingestion of data that's coming in

00:04:04,770 --> 00:04:08,460
the ingestion is all about

00:04:06,330 --> 00:04:10,290
whether all the transactions are pumped

00:04:08,460 --> 00:04:12,600
in all the notifications are pumped in

00:04:10,290 --> 00:04:15,290
right there the second piece you see is

00:04:12,600 --> 00:04:18,780
the server listed process real-time data

00:04:15,290 --> 00:04:23,200
it processes the data its toes man and

00:04:18,780 --> 00:04:26,030
also notifies you can see the the

00:04:23,200 --> 00:04:28,430
with a small strike on it right that's

00:04:26,030 --> 00:04:31,730
the functions as civiles sitting there

00:04:28,430 --> 00:04:34,370
and then the third piece is that data

00:04:31,730 --> 00:04:36,350
store right so the inventory data as

00:04:34,370 --> 00:04:40,490
well as the transactions they are all

00:04:36,350 --> 00:04:43,970
stored in fully managed no sequel as

00:04:40,490 --> 00:04:46,010
your cosmos TVs data store now you can

00:04:43,970 --> 00:04:48,320
place these very close to your users

00:04:46,010 --> 00:04:50,240
right particularly for all the read

00:04:48,320 --> 00:04:52,100
operations it can be served right from

00:04:50,240 --> 00:04:53,930
the local region that's what you see and

00:04:52,100 --> 00:04:57,470
then you see that dashboard dashboard is

00:04:53,930 --> 00:04:59,570
nothing but a springboard app that talks

00:04:57,470 --> 00:05:02,180
to a cosmos DB and listens to events

00:04:59,570 --> 00:05:04,370
that are coming in now as which it said

00:05:02,180 --> 00:05:06,440
in one area we one breached and we

00:05:04,370 --> 00:05:08,570
deployed two pivotal Florentine in other

00:05:06,440 --> 00:05:10,730
regions we are deploying to as your app

00:05:08,570 --> 00:05:13,520
service right so just before this

00:05:10,730 --> 00:05:15,800
meeting like a session about five

00:05:13,520 --> 00:05:18,380
minutes 10 minutes ago we provision some

00:05:15,800 --> 00:05:20,000
of the resources which took us about for

00:05:18,380 --> 00:05:22,610
Singapore which took us about less than

00:05:20,000 --> 00:05:24,530
eight or nine minutes about it took to

00:05:22,610 --> 00:05:26,870
provision so now what we're going to do

00:05:24,530 --> 00:05:29,240
here is we're going to lie start

00:05:26,870 --> 00:05:31,340
deploying deploying some of these

00:05:29,240 --> 00:05:35,570
terminals like shops or store terminals

00:05:31,340 --> 00:05:38,150
into Singapore now before we do maybe we

00:05:35,570 --> 00:05:40,070
should show the existing existing humans

00:05:38,150 --> 00:05:41,750
how they're coming coming in right so

00:05:40,070 --> 00:05:43,670
what's existing and then once we finish

00:05:41,750 --> 00:05:45,500
the demo we'll kind of wrap with some of

00:05:43,670 --> 00:05:47,660
the key architectural principles of EDA

00:05:45,500 --> 00:05:50,450
aventure of an architecture what spring

00:05:47,660 --> 00:05:52,610
does what what Azure does and a NOS are

00:05:50,450 --> 00:05:53,780
kind of undersold cosmos which does some

00:05:52,610 --> 00:05:55,430
pretty remarkable stuff we showed

00:05:53,780 --> 00:05:56,990
replication there but being able to say

00:05:55,430 --> 00:05:59,330
here's a master and let's go ahead and

00:05:56,990 --> 00:06:01,370
copy different nodes to other regions is

00:05:59,330 --> 00:06:03,020
literally an API caller checking

00:06:01,370 --> 00:06:05,750
something on the map and you get multi

00:06:03,020 --> 00:06:07,100
multi read masters you get read replicas

00:06:05,750 --> 00:06:10,130
it's really neat tech for actually

00:06:07,100 --> 00:06:11,780
global replication sure so you can see

00:06:10,130 --> 00:06:14,210
the dashboard where you can see the

00:06:11,780 --> 00:06:16,160
Boston stores you can see the inventory

00:06:14,210 --> 00:06:18,500
of products and how many are there and

00:06:16,160 --> 00:06:21,380
the events are coming in we will two

00:06:18,500 --> 00:06:22,529
pages just to show one is actually the

00:06:21,380 --> 00:06:25,949
one on the

00:06:22,529 --> 00:06:28,889
left hand side is websocket bush and one

00:06:25,949 --> 00:06:31,559
on the right hand side is HTML page

00:06:28,889 --> 00:06:33,449
refresh that's pulling in data right so

00:06:31,559 --> 00:06:36,149
here you can see how Boston and London

00:06:33,449 --> 00:06:38,399
are happening now before we deploy i'll

00:06:36,149 --> 00:06:39,539
let's start the deployment and then i'll

00:06:38,399 --> 00:06:41,069
show the core right so because

00:06:39,539 --> 00:06:43,229
department takes a couple of minutes as

00:06:41,069 --> 00:06:47,549
well let's do it so let's start with

00:06:43,229 --> 00:06:54,029
singapore so here we are some where am i

00:06:47,549 --> 00:06:55,499
I'm right here so let me go here and

00:06:54,029 --> 00:06:58,499
what are you deploying to Singapore here

00:06:55,499 --> 00:07:00,929
yeah I'm going to deploy to deploy the

00:06:58,499 --> 00:07:02,759
point of point of inventory first great

00:07:00,929 --> 00:07:05,429
functions functions yeah flowing

00:07:02,759 --> 00:07:08,909
functions using Java code using Java

00:07:05,429 --> 00:07:19,889
code right there's a Java track of just

00:07:08,909 --> 00:07:22,409
trying to make Erin happy back yeah all

00:07:19,889 --> 00:07:25,349
right we have a bunch of environment

00:07:22,409 --> 00:07:28,529
variables that we need to set so setting

00:07:25,349 --> 00:07:29,699
that great now as your functions behaves

00:07:28,529 --> 00:07:31,169
just like what you would expect from a

00:07:29,699 --> 00:07:33,209
function platform right this is

00:07:31,169 --> 00:07:35,789
triggered based on data changes storage

00:07:33,209 --> 00:07:38,159
changes HTTP calls actually comes with

00:07:35,789 --> 00:07:40,319
the HTTP part built-in so you'll have to

00:07:38,159 --> 00:07:42,299
add a gateway or anything to that these

00:07:40,319 --> 00:07:43,649
are functions that spin up on demand but

00:07:42,299 --> 00:07:45,599
you're not using them you don't get

00:07:43,649 --> 00:07:47,849
charged anything they don't do anything

00:07:45,599 --> 00:07:49,589
it scales back down to zero so pretty

00:07:47,849 --> 00:07:51,929
nice platform multi-language including

00:07:49,589 --> 00:07:53,549
Java which is pretty unique right so I'm

00:07:51,929 --> 00:07:55,319
going to start a deployment I'm really

00:07:53,549 --> 00:07:57,779
using maven plug into a package and then

00:07:55,319 --> 00:07:59,579
start deploying to Singapore like it's

00:07:57,779 --> 00:08:01,619
all the way to Singapore right so we're

00:07:59,579 --> 00:08:04,109
gonna start here it'll start while it

00:08:01,619 --> 00:08:05,909
starts and starts deploying here let's

00:08:04,109 --> 00:08:14,419
start looking at the code as well right

00:08:05,909 --> 00:08:14,419
so here is so here are the functions

00:08:14,659 --> 00:08:20,159
studio code yeah it's Visual Studio code

00:08:17,819 --> 00:08:21,930
you know developers tell us that they

00:08:20,159 --> 00:08:24,690
love it love this develop

00:08:21,930 --> 00:08:26,400
and ID editor as well because it's super

00:08:24,690 --> 00:08:28,530
fast and it's lightweight and it's very

00:08:26,400 --> 00:08:31,680
responsive as well multi-platform we

00:08:28,530 --> 00:08:33,839
multi-platform as well yeah so we have a

00:08:31,680 --> 00:08:36,479
bunch of functions you saw all of these

00:08:33,839 --> 00:08:40,200
in the in the diagram so here is the

00:08:36,479 --> 00:08:43,260
update inventory right where it receives

00:08:40,200 --> 00:08:46,470
the trigger from event hub and it also

00:08:43,260 --> 00:08:49,200
receives a document cosmos DB input and

00:08:46,470 --> 00:08:52,110
then it processes and then puts it back

00:08:49,200 --> 00:08:56,910
into the output here so there's a bunch

00:08:52,110 --> 00:08:59,250
of code here that that that satisfies

00:08:56,910 --> 00:09:01,410
this contract described right here right

00:08:59,250 --> 00:09:03,360
so we can also take a look at the point

00:09:01,410 --> 00:09:05,600
of transaction so the point of

00:09:03,360 --> 00:09:09,209
transaction code is also a time trigger

00:09:05,600 --> 00:09:11,760
that pumps in code into the into the

00:09:09,209 --> 00:09:15,360
cosmos DB argument have in this case

00:09:11,760 --> 00:09:17,580
okay so let's take a look at the it's

00:09:15,360 --> 00:09:19,380
deploying it's very close to deploying

00:09:17,580 --> 00:09:22,680
at this point these functions are

00:09:19,380 --> 00:09:25,080
simulating usage right the yeah these

00:09:22,680 --> 00:09:27,180
time triggers are simulating your point

00:09:25,080 --> 00:09:29,339
of sale or your point of intake in a

00:09:27,180 --> 00:09:31,770
warehouse so when a customer is actually

00:09:29,339 --> 00:09:34,080
screening scanning when a salesman is

00:09:31,770 --> 00:09:35,490
scanning all the purchases those are the

00:09:34,080 --> 00:09:36,420
things that are happening here it just

00:09:35,490 --> 00:09:37,950
can be helpful if you're trying to

00:09:36,420 --> 00:09:39,540
simulate your own sort of load testing

00:09:37,950 --> 00:09:41,850
or testing from different locations

00:09:39,540 --> 00:09:42,990
deploy functions and whatever your 50

00:09:41,850 --> 00:09:46,320
regions around the world

00:09:42,990 --> 00:09:48,209
you can actually do that alright so the

00:09:46,320 --> 00:09:51,570
first deployment happened this is the

00:09:48,209 --> 00:09:55,830
intake the next one we're gonna deploy

00:09:51,570 --> 00:10:04,070
sales to terminal right so let me go

00:09:55,830 --> 00:10:04,070
here is such setup some more

00:10:06,230 --> 00:10:10,040
and you're replicating the functions of

00:10:08,330 --> 00:10:11,750
course in each region right each one

00:10:10,040 --> 00:10:13,130
kind of stamps out the same architecture

00:10:11,750 --> 00:10:15,080
over and over again which is nice for

00:10:13,130 --> 00:10:16,520
scaling an adventure of an architecture

00:10:15,080 --> 00:10:25,760
each environments not a snowflake

00:10:16,520 --> 00:10:28,000
I mean it's check I depart POS off you

00:10:25,760 --> 00:10:28,000
want

00:10:35,060 --> 00:10:40,190
show of hands of who's doing serverless

00:10:36,770 --> 00:10:43,030
stuff now some functions yeah a few of

00:10:40,190 --> 00:10:43,030
the brave okay

00:10:49,400 --> 00:10:55,520
one more time all right we start the

00:10:54,350 --> 00:10:57,890
deployment one more time

00:10:55,520 --> 00:11:00,320
nicest point of sale this is the point

00:10:57,890 --> 00:11:01,730
of sale so it'll start pumping in events

00:11:00,320 --> 00:11:04,100
as soon as that arrives

00:11:01,730 --> 00:11:08,330
so we already deployed the point of

00:11:04,100 --> 00:11:10,790
inventory right so let's take a look at

00:11:08,330 --> 00:11:14,630
if there are changes in the dashboard at

00:11:10,790 --> 00:11:19,250
this point we are waiting nice to expect

00:11:14,630 --> 00:11:21,320
to see a new column show up here yes you

00:11:19,250 --> 00:11:24,050
can see the Boston and London events

00:11:21,320 --> 00:11:26,450
coming in so we ready for Singapore to

00:11:24,050 --> 00:11:28,220
kick in I'm waiting to see that do we

00:11:26,450 --> 00:11:31,820
want to show the azure portal as well

00:11:28,220 --> 00:11:38,300
the magic you're creating sure yeah so

00:11:31,820 --> 00:11:39,830
let's go so here's the pivotal we have

00:11:38,300 --> 00:11:44,440
deployed the dashboard

00:11:39,830 --> 00:11:46,070
let me also went to the portal here

00:11:44,440 --> 00:11:47,840
you're doing plenty of it

00:11:46,070 --> 00:11:49,400
programmatically but obviously people

00:11:47,840 --> 00:11:51,940
like me who like to click buttons come

00:11:49,400 --> 00:11:51,940
to the portal

00:12:02,330 --> 00:12:05,420
and so we could see your event hub here

00:12:04,010 --> 00:12:07,760
we could see cosmos we could see

00:12:05,420 --> 00:12:09,170
functions manage it all here as well

00:12:07,760 --> 00:12:10,460
right means deployment you're doing from

00:12:09,170 --> 00:12:13,400
the command line but all the management

00:12:10,460 --> 00:12:15,940
scaling is gonna happen from here read

00:12:13,400 --> 00:12:15,940
replicas

00:12:19,320 --> 00:12:24,750
you must have a big Azure bill every

00:12:20,790 --> 00:12:28,200
month yeah all of these thing here so

00:12:24,750 --> 00:12:30,180
let's take a look at what's happening in

00:12:28,200 --> 00:12:33,420
the Boston area right so here's the

00:12:30,180 --> 00:12:39,420
Boston area if I were to just get

00:12:33,420 --> 00:12:40,800
functions alone and you're not creating

00:12:39,420 --> 00:12:45,240
a new cosmos you're just using the

00:12:40,800 --> 00:12:49,890
replica yes it's not applicable so these

00:12:45,240 --> 00:12:51,780
are the the logic for the inventory

00:12:49,890 --> 00:12:53,760
processing as well as some of the

00:12:51,780 --> 00:12:56,580
point-of-sale and pour the inventory

00:12:53,760 --> 00:12:59,400
devices running right here in Boston now

00:12:56,580 --> 00:13:01,950
as which is said cosmos DB there's one

00:12:59,400 --> 00:13:03,330
instance that's available globally you

00:13:01,950 --> 00:13:06,480
can take it anywhere you want to go

00:13:03,330 --> 00:13:10,050
today as your supports it in 50 regions

00:13:06,480 --> 00:13:10,530
and the number of regions are growing as

00:13:10,050 --> 00:13:14,820
we speak

00:13:10,530 --> 00:13:16,290
yeah so oh I see the Singapore events

00:13:14,820 --> 00:13:18,960
are coming in right there Singapore is

00:13:16,290 --> 00:13:20,640
here right here there you go it's

00:13:18,960 --> 00:13:22,650
started Singapore started Singapore is

00:13:20,640 --> 00:13:25,290
live all right yeah it's Singapore is

00:13:22,650 --> 00:13:29,730
live now you can see Singapore it's

00:13:25,290 --> 00:13:33,060
arriving yeah so you saw a third column

00:13:29,730 --> 00:13:35,490
show up it's responding to all the

00:13:33,060 --> 00:13:38,250
events that are now arriving directly

00:13:35,490 --> 00:13:39,720
from Singapore so you can keep on adding

00:13:38,250 --> 00:13:41,370
regions like that so you can start

00:13:39,720 --> 00:13:42,510
provisioning more stores you can expand

00:13:41,370 --> 00:13:45,870
to more regions

00:13:42,510 --> 00:13:47,220
it's just limitless at that point good

00:13:45,870 --> 00:13:49,110
so we go talk about the venture of an

00:13:47,220 --> 00:13:52,620
architecture of it sure yeah so I mean

00:13:49,110 --> 00:13:54,390
what you saw there was hopefully uh you

00:13:52,620 --> 00:13:55,680
know life-changing something that you're

00:13:54,390 --> 00:13:57,570
all gonna go back and tell your families

00:13:55,680 --> 00:13:59,400
about but you know what were some of

00:13:57,570 --> 00:14:03,090
those key components that we saw in an

00:13:59,400 --> 00:14:05,070
adventure of an architecture you know

00:14:03,090 --> 00:14:06,210
first I think we saw it decoupling right

00:14:05,070 --> 00:14:07,800
me you could deploy these things as

00:14:06,210 --> 00:14:09,180
monoliths and each kind of piece that

00:14:07,800 --> 00:14:10,680
talks to the database it wouldn't have

00:14:09,180 --> 00:14:12,030
to be for different functions but in

00:14:10,680 --> 00:14:14,850
this case we could scale up those

00:14:12,030 --> 00:14:16,080
functions independently we can do all

00:14:14,850 --> 00:14:18,150
sorts of interesting things when you

00:14:16,080 --> 00:14:19,410
have single purpose components these are

00:14:18,150 --> 00:14:22,110
things you see from that I mean that's

00:14:19,410 --> 00:14:23,250
kind of those key criteria anything

00:14:22,110 --> 00:14:25,470
special there you'd want to point out

00:14:23,250 --> 00:14:27,210
besides the decoupling it's the single

00:14:25,470 --> 00:14:29,520
purpose like each of those function

00:14:27,210 --> 00:14:31,830
focuses on one thing and you can scale

00:14:29,520 --> 00:14:32,790
it right it has its own life cycle it

00:14:31,830 --> 00:14:35,340
has its own count

00:14:32,790 --> 00:14:38,070
as long as you satisfy that contract you

00:14:35,340 --> 00:14:40,220
can keep on skidding up skidding around

00:14:38,070 --> 00:14:42,120
depending to meet your needs yeah right

00:14:40,220 --> 00:14:43,680
you know the other thing we saw is

00:14:42,120 --> 00:14:44,910
trigger friendly systems it's hard to do

00:14:43,680 --> 00:14:46,770
an adventure of an architecture if

00:14:44,910 --> 00:14:48,360
things don't emit events maybe that

00:14:46,770 --> 00:14:49,860
seems blindingly obvious but sometimes

00:14:48,360 --> 00:14:50,850
it's tricky with legacy systems you

00:14:49,860 --> 00:14:53,370
either have to figure out how do you

00:14:50,850 --> 00:14:54,360
maybe simulate that with polling things

00:14:53,370 --> 00:14:55,560
like that but it's helpful when

00:14:54,360 --> 00:14:57,120
something like as your functions

00:14:55,560 --> 00:15:00,660
actually has built-in triggers for

00:14:57,120 --> 00:15:03,450
things like storage data services HTTP

00:15:00,660 --> 00:15:04,770
messaging event hubs it's nice so I mean

00:15:03,450 --> 00:15:06,480
any system you want to turn into a

00:15:04,770 --> 00:15:10,740
venturi but how are you helping it emit

00:15:06,480 --> 00:15:12,870
events in some case sure even customers

00:15:10,740 --> 00:15:15,120
always delivers always ask us about what

00:15:12,870 --> 00:15:17,430
about usage and rate agreements right so

00:15:15,120 --> 00:15:19,350
you can always generate and start

00:15:17,430 --> 00:15:22,590
pumping into an event hub at that point

00:15:19,350 --> 00:15:24,060
it's scalable then it can so the server

00:15:22,590 --> 00:15:25,680
list can start responding to those

00:15:24,060 --> 00:15:28,500
events that I be interested in to it

00:15:25,680 --> 00:15:29,940
right you know next up is that scalable

00:15:28,500 --> 00:15:30,960
infrastructure the whole point is if I'm

00:15:29,940 --> 00:15:32,400
trying to do a venture of and

00:15:30,960 --> 00:15:34,260
architectures in many cases it's

00:15:32,400 --> 00:15:35,880
unpredictable usage so do I have

00:15:34,260 --> 00:15:38,100
something that it takes an hour to scale

00:15:35,880 --> 00:15:39,450
it it's kind of difficult to be super

00:15:38,100 --> 00:15:41,610
event-driven so how am I thinking about

00:15:39,450 --> 00:15:45,570
infrastructure that scales both in and

00:15:41,610 --> 00:15:47,910
out fairly quickly they're the same time

00:15:45,570 --> 00:15:49,770
making sure that you have some of the

00:15:47,910 --> 00:15:51,690
stainless and streaming event handlers

00:15:49,770 --> 00:15:53,340
how am i processing event streams that's

00:15:51,690 --> 00:15:55,650
what's exciting in the Azure event hubs

00:15:53,340 --> 00:15:57,600
or Kafka or these other tools how am I

00:15:55,650 --> 00:15:59,430
taking data processing it in real time

00:15:57,600 --> 00:16:01,350
not waiting for analytics later right

00:15:59,430 --> 00:16:02,910
we're not going to the store at the end

00:16:01,350 --> 00:16:04,650
of every day looking at sales we're

00:16:02,910 --> 00:16:06,300
looking at sales real time those are

00:16:04,650 --> 00:16:08,880
processing event streams and making

00:16:06,300 --> 00:16:10,500
decisions and stocking inventory not

00:16:08,880 --> 00:16:13,170
after a crisis happened we actually know

00:16:10,500 --> 00:16:14,430
in real time so finding a platform that

00:16:13,170 --> 00:16:18,240
gives you some sort of streaming support

00:16:14,430 --> 00:16:19,860
is gonna be a warning yeah an inflexible

00:16:18,240 --> 00:16:21,720
story not all of this belongs in the

00:16:19,860 --> 00:16:23,430
relational database main cosmoses

00:16:21,720 --> 00:16:25,980
I guess we don't say no sequel anymore

00:16:23,430 --> 00:16:28,560
right meliss its schema oh that's fine

00:16:25,980 --> 00:16:30,120
so the idea that I do have a flexible

00:16:28,560 --> 00:16:31,440
event structure that I can stick in

00:16:30,120 --> 00:16:33,020
there if we change the event structure

00:16:31,440 --> 00:16:34,860
of Singapore stores different data

00:16:33,020 --> 00:16:36,690
theoretically than us

00:16:34,860 --> 00:16:39,300
you could tolerate that right the

00:16:36,690 --> 00:16:40,590
database doesn't break but you know some

00:16:39,300 --> 00:16:42,210
people also do event sourcing with

00:16:40,590 --> 00:16:44,700
relational databases so there's a mix

00:16:42,210 --> 00:16:46,170
you want blob storage then-chief for

00:16:44,700 --> 00:16:48,240
logs in like you want

00:16:46,170 --> 00:16:50,550
sort of repository for storing raw

00:16:48,240 --> 00:16:52,380
events in many cases and then further

00:16:50,550 --> 00:16:56,250
analytics so looking for storage options

00:16:52,380 --> 00:16:57,450
gonna be important and then some sort of

00:16:56,250 --> 00:16:58,769
extensibility because we're showing

00:16:57,450 --> 00:17:00,660
something here where we're adding a lot

00:16:58,769 --> 00:17:02,310
of components how easy is it to extend

00:17:00,660 --> 00:17:03,750
these architectures and the venture of

00:17:02,310 --> 00:17:06,240
an architecture that's rigid kind of

00:17:03,750 --> 00:17:07,980
defeats the purpose there so tell me a

00:17:06,240 --> 00:17:09,900
little bit after you talked about

00:17:07,980 --> 00:17:11,400
observability we'll talk about azure but

00:17:09,900 --> 00:17:13,079
the hardest part with some of these

00:17:11,400 --> 00:17:14,730
architectures is can you retrace what

00:17:13,079 --> 00:17:16,709
just happened as I have a series of

00:17:14,730 --> 00:17:18,720
triggers of functions I have a series of

00:17:16,709 --> 00:17:20,370
events and streaming processors if

00:17:18,720 --> 00:17:22,290
someone said what happened yesterday

00:17:20,370 --> 00:17:24,059
how are you piecing together a bunch of

00:17:22,290 --> 00:17:25,799
functions that lived for two seconds a

00:17:24,059 --> 00:17:28,410
bunch of things that scaled in and out

00:17:25,799 --> 00:17:29,850
and the defense dream that is not

00:17:28,410 --> 00:17:31,919
trivial that's not a super solved

00:17:29,850 --> 00:17:33,120
problem at the moment so how are you

00:17:31,919 --> 00:17:37,860
gonna actually do traceability to

00:17:33,120 --> 00:17:43,260
survive an audit so what's a sure do for

00:17:37,860 --> 00:17:45,900
me so I'm sure so you saw the event

00:17:43,260 --> 00:17:49,220
screen you saw the storage and you saw

00:17:45,900 --> 00:17:53,460
the setlist what our office here is

00:17:49,220 --> 00:17:56,160
fully managed I fully managed event hub

00:17:53,460 --> 00:17:58,950
where you can start streaming data right

00:17:56,160 --> 00:18:01,860
that's number one and it also fully

00:17:58,950 --> 00:18:04,470
managed cosmos TV you do not have to

00:18:01,860 --> 00:18:07,980
worry about replication you do not have

00:18:04,470 --> 00:18:09,750
to worry about any management anything

00:18:07,980 --> 00:18:12,000
there everything is taken care of for

00:18:09,750 --> 00:18:14,490
you for the cosmos TV and the third one

00:18:12,000 --> 00:18:18,480
you saw there is the functions right so

00:18:14,490 --> 00:18:21,179
as your offers a fully fully managed

00:18:18,480 --> 00:18:23,100
server let's compute run time you deploy

00:18:21,179 --> 00:18:26,100
it it will be triggered and it can be

00:18:23,100 --> 00:18:27,990
done concurrently and it can scale to

00:18:26,100 --> 00:18:30,540
meet the needs of however you are

00:18:27,990 --> 00:18:33,059
triggering it right now in addition to

00:18:30,540 --> 00:18:35,490
being all these managed right you saw

00:18:33,059 --> 00:18:37,950
that complex contract that we had for

00:18:35,490 --> 00:18:41,580
the update inventory how do you test

00:18:37,950 --> 00:18:43,740
that right so in addition to offering a

00:18:41,580 --> 00:18:47,160
fully managed server let's compute run

00:18:43,740 --> 00:18:50,580
time we ship the same runtime as dev

00:18:47,160 --> 00:18:52,559
tool for you so you can locally set it

00:18:50,580 --> 00:18:55,020
up you can locally run it

00:18:52,559 --> 00:18:57,660
you can attach your debugger whether

00:18:55,020 --> 00:18:59,760
it's IntelliJ eclipse or vs code

00:18:57,660 --> 00:19:01,590
choice and then you can start stepping

00:18:59,760 --> 00:19:03,390
through the code right so you know that

00:19:01,590 --> 00:19:06,540
it works before you actually deploy

00:19:03,390 --> 00:19:08,280
deploy to Asia I think cosmos has a

00:19:06,540 --> 00:19:10,140
local clone as well doesn't it for a

00:19:08,280 --> 00:19:12,270
local dev environment eat it has an

00:19:10,140 --> 00:19:13,500
emulator that you can use that that as

00:19:12,270 --> 00:19:14,880
well right it's tough with cloud

00:19:13,500 --> 00:19:16,500
development sometimes your local dev

00:19:14,880 --> 00:19:18,120
experience feels weird it's hard to

00:19:16,500 --> 00:19:19,590
replicate what's in the cloud so it's

00:19:18,120 --> 00:19:21,390
nice the function runtime that you can

00:19:19,590 --> 00:19:23,610
run locally you can you can completely

00:19:21,390 --> 00:19:25,830
done locally well the same contract that

00:19:23,610 --> 00:19:27,450
you saw that contract can be registered

00:19:25,830 --> 00:19:29,820
locally so the events will start pumping

00:19:27,450 --> 00:19:32,250
into your dev box and then you can step

00:19:29,820 --> 00:19:34,140
through your code to see exactly what is

00:19:32,250 --> 00:19:36,420
happening so it's no you don't have to

00:19:34,140 --> 00:19:38,190
wait until to deploy on Azure and then

00:19:36,420 --> 00:19:40,020
see what's happening there you can see

00:19:38,190 --> 00:19:43,080
it on your machine it runs and then you

00:19:40,020 --> 00:19:45,780
can go to their go to the club so the

00:19:43,080 --> 00:19:47,880
global instance scale so as you offers

00:19:45,780 --> 00:19:50,880
global an instant scale today Asha is

00:19:47,880 --> 00:19:54,000
supported in 50 regions and the regions

00:19:50,880 --> 00:19:56,370
are growing we just deploy to Singapore

00:19:54,000 --> 00:20:00,450
if you were to go to let's say another

00:19:56,370 --> 00:20:02,970
country pick Australia right it's just a

00:20:00,450 --> 00:20:05,010
matter of time right 15 minutes you'll

00:20:02,970 --> 00:20:07,500
be up right or you take Hong Kong you

00:20:05,010 --> 00:20:09,450
want to open stores in Hong Kong 15

00:20:07,500 --> 00:20:11,820
minutes it's all provision everything is

00:20:09,450 --> 00:20:14,010
up and running from the cloud point of

00:20:11,820 --> 00:20:16,020
view so you still have to set up a store

00:20:14,010 --> 00:20:18,300
in Hong Kong but that'll take longer

00:20:16,020 --> 00:20:20,250
than longer than the cloud cloud

00:20:18,300 --> 00:20:22,620
provisioning yet and Microsoft they just

00:20:20,250 --> 00:20:24,030
add availability zones last week I think

00:20:22,620 --> 00:20:26,220
it is generally available so there's

00:20:24,030 --> 00:20:32,640
multiple physical facilities in a region

00:20:26,220 --> 00:20:36,150
yes its robust right robust functions so

00:20:32,640 --> 00:20:39,840
you saw how we deployed so we can keep

00:20:36,150 --> 00:20:41,850
on deploying when contract changes of

00:20:39,840 --> 00:20:44,610
course the things will also change and

00:20:41,850 --> 00:20:48,570
it's probe us enough to handle handle

00:20:44,610 --> 00:20:51,360
things like that the high throughput and

00:20:48,570 --> 00:20:54,450
the reliable here so you saw a cosmos DB

00:20:51,360 --> 00:20:56,760
right cosmos DB it supports elastically

00:20:54,450 --> 00:20:58,890
scalable throughput you just have to say

00:20:56,760 --> 00:21:01,500
what is your ceiling ceiling limit that

00:20:58,890 --> 00:21:04,560
you want so it just starts scaling up to

00:21:01,500 --> 00:21:07,050
that point now we also saw the event up

00:21:04,560 --> 00:21:09,390
here ends up hubs are suitable for hyper

00:21:07,050 --> 00:21:10,590
scale ingestion of data right so whether

00:21:09,390 --> 00:21:12,510
it's telemetry where

00:21:10,590 --> 00:21:14,279
transaction or events that are happening

00:21:12,510 --> 00:21:20,190
around the world all of those can be

00:21:14,279 --> 00:21:22,890
pumped into event hubs so the limitless

00:21:20,190 --> 00:21:25,830
data storage right so cosmos dB

00:21:22,890 --> 00:21:29,400
it supports elastically scalable storage

00:21:25,830 --> 00:21:32,159
I it's up to you how much you want you

00:21:29,400 --> 00:21:34,770
can keep on increasing sky's the limit

00:21:32,159 --> 00:21:37,320
there practically it's I would say it's

00:21:34,770 --> 00:21:43,080
limitless like relational database and

00:21:37,320 --> 00:21:44,789
they guide your sequel caps out it is

00:21:43,080 --> 00:21:46,620
they've increased I don't know the

00:21:44,789 --> 00:21:49,440
current number but certainly it's

00:21:46,620 --> 00:21:54,470
different from cosmos is like huge it's

00:21:49,440 --> 00:21:54,470
up to you you limit your your cost right

00:21:59,870 --> 00:22:06,210
so Security's across the book right

00:22:03,120 --> 00:22:07,649
specifically for cosmos DB all the data

00:22:06,210 --> 00:22:09,960
is encrypted at rest

00:22:07,649 --> 00:22:12,690
also in motion right so it's completely

00:22:09,960 --> 00:22:14,159
all of them and some comes some of the

00:22:12,690 --> 00:22:15,659
developers asked us that they want

00:22:14,159 --> 00:22:17,970
everything inside a virtual network

00:22:15,659 --> 00:22:20,640
that's not accessible from the internet

00:22:17,970 --> 00:22:23,760
so that is also supported for all the

00:22:20,640 --> 00:22:27,179
data options now virtual network so that

00:22:23,760 --> 00:22:30,059
it's it's even more secure than exposing

00:22:27,179 --> 00:22:31,799
it to the Internet here so some of the

00:22:30,059 --> 00:22:34,080
ways Cloud Foundry kind of supports this

00:22:31,799 --> 00:22:36,000
sort of architecture together is you

00:22:34,080 --> 00:22:37,409
know all the spring libraries we shows a

00:22:36,000 --> 00:22:39,179
little bit of spring here and some of

00:22:37,409 --> 00:22:42,120
the food apps but spring reactive now

00:22:39,179 --> 00:22:43,590
spring cloud stream you know some cool

00:22:42,120 --> 00:22:46,080
things along the way for spring kraut

00:22:43,590 --> 00:22:47,940
spring cloud stream of event hubs on the

00:22:46,080 --> 00:22:49,320
way so if you're building these sort of

00:22:47,940 --> 00:22:51,000
event driven apps you're also looking

00:22:49,320 --> 00:22:53,010
for the libraries and frameworks to make

00:22:51,000 --> 00:22:54,990
it a little simpler so spring and cloud

00:22:53,010 --> 00:22:58,020
foundry and Java make this a bit a bit

00:22:54,990 --> 00:22:59,610
simpler the same time of course you know

00:22:58,020 --> 00:23:02,880
if you're running cloud foundry on Azure

00:22:59,610 --> 00:23:04,230
and we're the one Microsoft's

00:23:02,880 --> 00:23:05,610
consumption partner of the year last

00:23:04,230 --> 00:23:07,649
year so we know that a lot of cloud

00:23:05,610 --> 00:23:09,059
foundry runs on Azure that means that's

00:23:07,649 --> 00:23:10,620
great right that you want a platform on

00:23:09,059 --> 00:23:12,299
top sometimes with platforms to help

00:23:10,620 --> 00:23:14,309
with your dev lifecycle owning

00:23:12,299 --> 00:23:15,990
infrastructure and the like so if I want

00:23:14,309 --> 00:23:18,090
to deploy Cloud Foundry a lot of good

00:23:15,990 --> 00:23:19,260
scale which is what I demand from an

00:23:18,090 --> 00:23:22,350
adventure of an architecture have to

00:23:19,260 --> 00:23:23,580
scale in and out the key also is the

00:23:22,350 --> 00:23:24,330
different types of apps in the venture

00:23:23,580 --> 00:23:25,800
of an architect

00:23:24,330 --> 00:23:27,480
you're gonna do some batch processing

00:23:25,800 --> 00:23:28,680
you might do a nightly sync between all

00:23:27,480 --> 00:23:30,330
the events that came in

00:23:28,680 --> 00:23:31,080
maybe they got stored you're actually

00:23:30,330 --> 00:23:32,670
gonna make sure you didn't lose

00:23:31,080 --> 00:23:34,830
everything so you synchronize nightly

00:23:32,670 --> 00:23:37,110
via batch you're also gonna do streaming

00:23:34,830 --> 00:23:38,960
apps web apps function apps coming up

00:23:37,110 --> 00:23:41,010
shortly with spring cloud function and

00:23:38,960 --> 00:23:43,470
pivotal function service so a lot of

00:23:41,010 --> 00:23:45,510
good things coming in the container base

00:23:43,470 --> 00:23:47,730
and in the Cloud Foundry space for

00:23:45,510 --> 00:23:50,520
events and then finally putting this

00:23:47,730 --> 00:23:52,470
anywhere right address great stuff in 50

00:23:50,520 --> 00:23:54,180
locations I think there's many many more

00:23:52,470 --> 00:23:56,160
if you have your on-premises locations

00:23:54,180 --> 00:23:57,600
as well so as I think about trying to

00:23:56,160 --> 00:23:59,670
run an event-driven architecture the

00:23:57,600 --> 00:24:02,070
same anywhere I'm probably doing a mix

00:23:59,670 --> 00:24:04,170
of things on from off from different

00:24:02,070 --> 00:24:04,650
providers colocation whatever that makes

00:24:04,170 --> 00:24:06,540
sense

00:24:04,650 --> 00:24:08,340
it's nice if you can stamp out the same

00:24:06,540 --> 00:24:10,350
event or of an architecture regardless

00:24:08,340 --> 00:24:15,240
of your infrastructure pool as much as

00:24:10,350 --> 00:24:16,740
Azure is a great place to run so I'll do

00:24:15,240 --> 00:24:18,120
a quick plug that you'll see that's

00:24:16,740 --> 00:24:20,970
hopefully on stage next it's Spring

00:24:18,120 --> 00:24:23,160
wanted in Washington DC as we continue

00:24:20,970 --> 00:24:25,080
to talk about spring but what else can

00:24:23,160 --> 00:24:26,790
we question we can answer by the venture

00:24:25,080 --> 00:24:28,620
of an architecture and Azure how can we

00:24:26,790 --> 00:24:30,030
you know are there tools that you've

00:24:28,620 --> 00:24:31,470
looked at and you're interested in or

00:24:30,030 --> 00:24:33,420
want to see how these work together if

00:24:31,470 --> 00:24:34,920
this is a we're gonna take this bloody

00:24:33,420 --> 00:24:37,130
comedy on the road what do you want to

00:24:34,920 --> 00:24:37,130
know about

00:24:41,520 --> 00:24:45,370
yeah so question is how do you guarantee

00:24:43,600 --> 00:24:47,140
the order of events in the venture of an

00:24:45,370 --> 00:24:49,180
architecture sometimes you don't and it

00:24:47,140 --> 00:24:51,670
depends on if you have the mysterious

00:24:49,180 --> 00:24:53,320
only once delivery which is somewhat

00:24:51,670 --> 00:24:55,180
mythical this idea of can you really

00:24:53,320 --> 00:24:56,680
guarantee things don't get backed up and

00:24:55,180 --> 00:24:58,900
read deliver does your whole

00:24:56,680 --> 00:25:01,330
architecture actually participate and

00:24:58,900 --> 00:25:03,550
that sort of flow in transaction so

00:25:01,330 --> 00:25:04,960
sometimes you go for idempotent systems

00:25:03,550 --> 00:25:06,970
where I can technically do things out of

00:25:04,960 --> 00:25:08,920
order and I don't have a negative side

00:25:06,970 --> 00:25:10,090
effect on the system's you know when you

00:25:08,920 --> 00:25:12,190
do do a right ahead

00:25:10,090 --> 00:25:13,990
you know right log like event hubs like

00:25:12,190 --> 00:25:15,700
Kafka things like that you are

00:25:13,990 --> 00:25:17,140
guaranteed that if they get rid in a

00:25:15,700 --> 00:25:18,430
certain order they will get read in a

00:25:17,140 --> 00:25:20,050
certain order you're not dealing with

00:25:18,430 --> 00:25:22,750
message queues and things where you can

00:25:20,050 --> 00:25:24,460
technically lose it but it still seems

00:25:22,750 --> 00:25:26,710
like the semantics aren't perfect for

00:25:24,460 --> 00:25:28,690
guaranteeing order but the right log

00:25:26,710 --> 00:25:31,720
sort of model versus a message broker

00:25:28,690 --> 00:25:34,150
seems like you get higher guarantees I

00:25:31,720 --> 00:25:40,200
think you coming most of it yeah I think

00:25:34,150 --> 00:25:40,200
so yeah all right good other questions

00:25:41,820 --> 00:25:45,160
good well if not we'll be here for the

00:25:43,930 --> 00:25:47,440
shy people if you have other questions

00:25:45,160 --> 00:25:48,760
we'll be we'll stay up here Asher's good

00:25:47,440 --> 00:25:50,320
stuff for venture of an architecture

00:25:48,760 --> 00:25:51,610
Cloud Foundry helps you a tongue with a

00:25:50,320 --> 00:25:53,050
venture of an architecture well I'm

00:25:51,610 --> 00:25:55,330
really excited what spring does with

00:25:53,050 --> 00:25:56,500
reactive and streaming it actually makes

00:25:55,330 --> 00:25:58,930
these apps easier because this is a

00:25:56,500 --> 00:26:00,520
tricky architecture I mean as much as we

00:25:58,930 --> 00:26:03,160
really like building this and and

00:26:00,520 --> 00:26:05,920
frankly asar did all the work so I use

00:26:03,160 --> 00:26:07,570
we generously is this give me a

00:26:05,920 --> 00:26:09,100
complicated architecture if you look at

00:26:07,570 --> 00:26:11,740
it's just easier to build you know one

00:26:09,100 --> 00:26:14,110
app that does intake processing and one

00:26:11,740 --> 00:26:16,480
data store and that's kind of it that's

00:26:14,110 --> 00:26:18,940
not awful but as I try to scale as I try

00:26:16,480 --> 00:26:21,670
to scale individual components as I want

00:26:18,940 --> 00:26:23,140
to update these things in pieces you do

00:26:21,670 --> 00:26:25,450
want to decompose this into a set of

00:26:23,140 --> 00:26:27,400
services so the complexity sometimes is

00:26:25,450 --> 00:26:29,140
higher but the payoff is greater

00:26:27,400 --> 00:26:30,910
those are real trade-offs sometimes this

00:26:29,140 --> 00:26:31,330
is overkill sometimes this is what you

00:26:30,910 --> 00:26:33,040
need

00:26:31,330 --> 00:26:34,450
I'm glad the frameworks and tools make

00:26:33,040 --> 00:26:36,700
this easier but please don't over

00:26:34,450 --> 00:26:38,680
engineer if you can help it thank you

00:26:36,700 --> 00:26:40,890
for the talk thank you thank you

00:26:38,680 --> 00:26:40,890

YouTube URL: https://www.youtube.com/watch?v=4YfBMK029OI


