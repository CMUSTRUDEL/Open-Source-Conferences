Title: Debugging Cloud Foundry Apps: Via Service Mesh, Open Tracing - Idit Levine, Solo.io
Publication date: 2018-04-21
Playlist: Cloud Foundry Summit NA 2018
Description: 
	Debugging Cloud Foundry Apps: Via Service Mesh, Open Tracing - Idit Levine, Solo.io

The mainstreaming of containerization and microservices is raising a critical question by both developers and operators: how do we debug all this?

Debugging microservices applications is a difficult task. The state of the application is spread across multiple microservices, and it is hard to get a holistic view of the state of the application. Currently debugging of microservices is assisted by openTracing, which helps in tracing of a transaction or workflow for post-mortem analysis, and linkerd and itsio which monitor the network to identify latency problems. These tools however, do not allow to monitor and interfere with the application during run time.

In this talk, we will describe and demonstrate common debugging techniques and we will introduce Squash, a new tool and methodology. 

About Idit Levine
Idit Levine is the founder and CEO of solo.io, where she is aiming to streamline the cloud stack.
Prior to founding solo.io, Idit was the CTO of the cloud management division at EMC and a member of its global CTO Office.

At EMC, Idit lead, designed and implemented project UniK, an open source platform for automating unikernels compilation and deployment and project layer-x, an open source framework for cross-cluster scheduling . At solo, Idit recently released Squash, an open source platform for debugging microservices applications.
Captions: 
	00:00:00,060 --> 00:00:06,660
so everybody thank you for coming we

00:00:03,810 --> 00:00:08,580
have tons of content to cover so we will

00:00:06,660 --> 00:00:12,599
start quick and hopefully we'll manage

00:00:08,580 --> 00:00:14,490
to do it all so we're going to talk

00:00:12,599 --> 00:00:15,719
about a little bit more than what we

00:00:14,490 --> 00:00:16,980
said that we're going to talk about it

00:00:15,719 --> 00:00:19,199
but it's also going to cover everything

00:00:16,980 --> 00:00:21,480
that we talked about like service

00:00:19,199 --> 00:00:25,289
smashing and arbitration but let's start

00:00:21,480 --> 00:00:28,349
before for this so when you look and you

00:00:25,289 --> 00:00:30,359
probably all aware of this announcement

00:00:28,349 --> 00:00:32,070
last year and this is great right now

00:00:30,359 --> 00:00:33,809
cloud founder is working with kubernetes

00:00:32,070 --> 00:00:38,160
this is fantastic and this is the

00:00:33,809 --> 00:00:40,320
natural direction direction so you kind

00:00:38,160 --> 00:00:42,510
of looking like this right now you have

00:00:40,320 --> 00:00:43,739
boss right is actually managing it and

00:00:42,510 --> 00:00:47,219
then you have kubernetes and Cloud

00:00:43,739 --> 00:00:48,750
Foundry that managed by by a Bosch but

00:00:47,219 --> 00:00:50,610
the most customer actually also have

00:00:48,750 --> 00:00:53,850
monolithic application and actually

00:00:50,610 --> 00:00:55,379
there's also several services much that

00:00:53,850 --> 00:00:57,660
is really interesting in this world and

00:00:55,379 --> 00:00:59,280
it's kind of feel that all of this

00:00:57,660 --> 00:01:00,960
should be managed by something because

00:00:59,280 --> 00:01:03,989
otherwise you need to go to a lot of

00:01:00,960 --> 00:01:06,960
different type of interfaces for the

00:01:03,989 --> 00:01:10,170
user so there is something is missing

00:01:06,960 --> 00:01:11,460
here and the first thing that we really

00:01:10,170 --> 00:01:14,010
decided that we're going to do is

00:01:11,460 --> 00:01:15,450
basically to glue this environment

00:01:14,010 --> 00:01:16,890
together and I would explain why it's

00:01:15,450 --> 00:01:19,890
important because I feel that this is

00:01:16,890 --> 00:01:21,689
the nature way of where did all the

00:01:19,890 --> 00:01:23,700
application is going and therefore we

00:01:21,689 --> 00:01:28,829
need to know how to manage them and and

00:01:23,700 --> 00:01:30,270
and debug them and so on so let me just

00:01:28,829 --> 00:01:31,860
kind of like do lean to understand what

00:01:30,270 --> 00:01:33,840
I mean and this was really really high

00:01:31,860 --> 00:01:35,460
level with what should be so basically

00:01:33,840 --> 00:01:37,979
today in the ecosystem as I said there

00:01:35,460 --> 00:01:39,479
is true three groups one of them you

00:01:37,979 --> 00:01:42,240
know people was doing monolithic that's

00:01:39,479 --> 00:01:44,700
mainly the enterprise it's managed by

00:01:42,240 --> 00:01:46,530
something like puppet or chef or ansible

00:01:44,700 --> 00:01:49,460
they're using their own tool for logging

00:01:46,530 --> 00:01:53,220
and debugging and they're usually

00:01:49,460 --> 00:01:54,810
running architecture like SOA and then

00:01:53,220 --> 00:01:56,159
there is the micro service so everybody

00:01:54,810 --> 00:01:57,450
want to move there and that would be

00:01:56,159 --> 00:02:00,180
something like cloud foundry or

00:01:57,450 --> 00:02:01,920
kubernetes or any others and it's going

00:02:00,180 --> 00:02:05,250
to use different tools right like open

00:02:01,920 --> 00:02:07,020
tracing for for instance for logging and

00:02:05,250 --> 00:02:09,629
Prometheus for metrics right because you

00:02:07,020 --> 00:02:10,979
need to scale it very well and your your

00:02:09,629 --> 00:02:13,470
your keytective would be something like

00:02:10,979 --> 00:02:15,090
micro services architecture but

00:02:13,470 --> 00:02:16,800
is also the server list right and the

00:02:15,090 --> 00:02:18,390
server is actually most likely will

00:02:16,800 --> 00:02:20,940
happen in the cloud because that's more

00:02:18,390 --> 00:02:23,340
the most mature one and that's because

00:02:20,940 --> 00:02:25,290
of it you will get a provider to manage

00:02:23,340 --> 00:02:26,670
that right then you're going to use the

00:02:25,290 --> 00:02:28,530
provided tools because you have no

00:02:26,670 --> 00:02:30,780
choice right something like x-ray and

00:02:28,530 --> 00:02:32,520
cloud watch if you're using sir a lambda

00:02:30,780 --> 00:02:34,590
specifically and that would be an

00:02:32,520 --> 00:02:36,270
event-driven architecture so you have

00:02:34,590 --> 00:02:38,520
all of this yeah it's a lot of choices

00:02:36,270 --> 00:02:40,350
but the real question is how do you mean

00:02:38,520 --> 00:02:43,590
great between them I you debug these

00:02:40,350 --> 00:02:45,780
things are you dealing with this so when

00:02:43,590 --> 00:02:48,060
I took a look at it what I thought that

00:02:45,780 --> 00:02:51,260
would be very useful here is to find a

00:02:48,060 --> 00:02:54,360
way to kind of like find the smaller

00:02:51,260 --> 00:02:55,950
compute unit and basically cut

00:02:54,360 --> 00:02:57,890
everything to it so if you will look

00:02:55,950 --> 00:03:01,050
into it you will see that basically

00:02:57,890 --> 00:03:03,720
service is functions and we can look at

00:03:01,050 --> 00:03:05,610
micro-services monolithic as an and I'm

00:03:03,720 --> 00:03:08,340
talking only the expose API as a

00:03:05,610 --> 00:03:09,959
functions and if we will do something

00:03:08,340 --> 00:03:12,420
like this and we actually be able to

00:03:09,959 --> 00:03:14,490
discover all this echo system and then

00:03:12,420 --> 00:03:16,530
also route to it we can do something

00:03:14,490 --> 00:03:18,420
like that and then we can actually be

00:03:16,530 --> 00:03:21,500
great or mixed application that's

00:03:18,420 --> 00:03:23,550
running in different place so okay so

00:03:21,500 --> 00:03:24,360
again I'm starting with solving this

00:03:23,550 --> 00:03:25,860
problem

00:03:24,360 --> 00:03:27,239
we kind of I going to glue it and then

00:03:25,860 --> 00:03:29,910
we will talk about how we're going to

00:03:27,239 --> 00:03:32,040
use open tracing and service mesh and so

00:03:29,910 --> 00:03:34,230
on to kind of like get the observability

00:03:32,040 --> 00:03:36,030
and so on so what do we need to do in

00:03:34,230 --> 00:03:38,280
order to do that the first thing we need

00:03:36,030 --> 00:03:39,600
to do is to break but it's not really

00:03:38,280 --> 00:03:41,190
break right because we can't really

00:03:39,600 --> 00:03:44,070
break what we can do is actually

00:03:41,190 --> 00:03:46,590
discover them and router them all those

00:03:44,070 --> 00:03:48,930
function then we need to basically be

00:03:46,590 --> 00:03:51,480
able to assemble them to what I call I

00:03:48,930 --> 00:03:52,620
would up and then the last thing that we

00:03:51,480 --> 00:03:55,799
need to do is make sure that we can

00:03:52,620 --> 00:03:57,150
actually debug them and so on and this

00:03:55,799 --> 00:04:00,630
is exactly what we build it's called

00:03:57,150 --> 00:04:02,280
glue is build on invoice that's why it's

00:04:00,630 --> 00:04:04,410
really really close to service mesh

00:04:02,280 --> 00:04:06,690
because like you know STR is also build

00:04:04,410 --> 00:04:09,420
on and voi and what it's doing is we're

00:04:06,690 --> 00:04:12,600
basically we extend an invoice to route

00:04:09,420 --> 00:04:14,220
on the function level so a we discover

00:04:12,600 --> 00:04:15,810
all those functions so if it's an

00:04:14,220 --> 00:04:18,720
several s function it's kind of easy

00:04:15,810 --> 00:04:21,599
HTTP right if it's a different

00:04:18,720 --> 00:04:24,780
application we using a swagger opening

00:04:21,599 --> 00:04:26,810
API GOP C and so on to discover it and

00:04:24,780 --> 00:04:29,940
we can actually router it on this level

00:04:26,810 --> 00:04:31,500
so I'm not going to go too into too much

00:04:29,940 --> 00:04:33,450
level I'm just going to show you demos

00:04:31,500 --> 00:04:35,910
and and explain you why it's really

00:04:33,450 --> 00:04:38,370
really useful but the idea is that if

00:04:35,910 --> 00:04:39,960
you are capable of using it and it's

00:04:38,370 --> 00:04:42,030
already integrated with Cloud Foundry

00:04:39,960 --> 00:04:44,100
and in kubernetes and a lot of other

00:04:42,030 --> 00:04:46,560
environment you can do something like

00:04:44,100 --> 00:04:48,750
this which is basically creating

00:04:46,560 --> 00:04:51,270
applications that some of it could be a

00:04:48,750 --> 00:04:53,730
still part of your monolithic some of

00:04:51,270 --> 00:04:55,620
them you will extend it to a micro

00:04:53,730 --> 00:04:58,520
service or maybe to service and it's all

00:04:55,620 --> 00:05:00,570
going to look like one big application

00:04:58,520 --> 00:05:02,220
and of course we don't care where it's

00:05:00,570 --> 00:05:04,320
running right because the beauty of it

00:05:02,220 --> 00:05:07,350
is that it's all layer 7 because anybody

00:05:04,320 --> 00:05:08,970
give us this abstraction so again when

00:05:07,350 --> 00:05:11,130
we did is we basically extend the envoi

00:05:08,970 --> 00:05:14,220
we build glue to manage that it's really

00:05:11,130 --> 00:05:16,620
really extensible so we can discover

00:05:14,220 --> 00:05:18,390
everything we can route on this level so

00:05:16,620 --> 00:05:21,540
everything that envoi giving you on the

00:05:18,390 --> 00:05:24,090
level of a office service because today

00:05:21,540 --> 00:05:26,490
every box in the world is is routing

00:05:24,090 --> 00:05:29,669
between from route to either service or

00:05:26,490 --> 00:05:31,710
to a post you can give you that in their

00:05:29,669 --> 00:05:34,860
level of the function and and also if

00:05:31,710 --> 00:05:37,500
it's going to AWS we wrote filters that

00:05:34,860 --> 00:05:39,419
in Android that basically already giving

00:05:37,500 --> 00:05:43,380
you all the signature and everything and

00:05:39,419 --> 00:05:44,729
making you easily router so I want to

00:05:43,380 --> 00:05:46,860
show you them I think that will be the

00:05:44,729 --> 00:05:48,660
most easy way to understand and this is

00:05:46,860 --> 00:05:51,600
only one use case because actually we

00:05:48,660 --> 00:05:58,770
build it very flexible so it's showing

00:05:51,600 --> 00:06:00,840
us over okay so okay so SSH dude

00:05:58,770 --> 00:06:07,289
can you see now you can see that they

00:06:00,840 --> 00:06:12,650
can see that once again you figure out

00:06:07,289 --> 00:06:16,200
why you can see that no what I will do

00:06:12,650 --> 00:06:18,330
okay now you can see that so the only

00:06:16,200 --> 00:06:21,030
thing that I did is I well now I can see

00:06:18,330 --> 00:06:30,870
that cannot see that though okay

00:06:21,030 --> 00:06:33,290
yeah let's try sorry guys I guess we're

00:06:30,870 --> 00:06:33,290
friends right

00:06:37,680 --> 00:06:45,390
okay this would be much better perfect

00:06:42,390 --> 00:06:45,390
okay

00:06:46,550 --> 00:06:53,680
now you see that nice yeah perfect

00:06:49,849 --> 00:06:56,270
okay so I just SSH to a machine alright

00:06:53,680 --> 00:06:58,099
and this machine is actually running

00:06:56,270 --> 00:06:59,060
Cloud Foundry so we just show you that

00:06:58,099 --> 00:07:06,740
I'm not lying

00:06:59,060 --> 00:07:07,910
ah sorry that's s okay now let's do see

00:07:06,740 --> 00:07:10,669
if oops

00:07:07,910 --> 00:07:12,680
so you see are running it and right now

00:07:10,669 --> 00:07:15,319
guru is there we're not doing anything

00:07:12,680 --> 00:07:16,849
we will do next is I will show you and

00:07:15,319 --> 00:07:19,580
again it's more like that you will see

00:07:16,849 --> 00:07:21,530
this is Alexa and what we did is

00:07:19,580 --> 00:07:23,930
basically we rewrote a skill that is

00:07:21,530 --> 00:07:26,539
connecting to glue and waiting to see

00:07:23,930 --> 00:07:28,280
where to route so if I were write it

00:07:26,539 --> 00:07:29,680
right now I'm going to work right I will

00:07:28,280 --> 00:07:42,380
show you

00:07:29,680 --> 00:07:46,880
Alexa 1 glue demo you can hear it can

00:07:42,380 --> 00:07:48,620
you okay so what you can see is

00:07:46,880 --> 00:07:50,990
basically right now I just connected to

00:07:48,620 --> 00:07:54,409
a Google function I can easily go right

00:07:50,990 --> 00:08:04,789
now and just change the routes and I

00:07:54,409 --> 00:08:06,949
have some and shaheed do the same thing

00:08:04,789 --> 00:08:08,150
to do as you can see we already discover

00:08:06,949 --> 00:08:17,000
everything so let's fly right now

00:08:08,150 --> 00:08:21,560
there's ooh one I'm doing right now as

00:08:17,000 --> 00:08:24,460
you can as you will see right now if the

00:08:21,560 --> 00:08:24,460
copy base will work

00:08:26,440 --> 00:08:30,919
is that we already discover all the

00:08:28,819 --> 00:08:33,620
functions in a zoo and now what I can do

00:08:30,919 --> 00:08:35,180
it just change the route do exactly the

00:08:33,620 --> 00:08:40,459
same thing and then it will go and

00:08:35,180 --> 00:08:44,149
basically transfer the language so now

00:08:40,459 --> 00:08:47,660
it will go to a zero so if I will do it

00:08:44,149 --> 00:08:48,890
do exactly the same demo this way so

00:08:47,660 --> 00:08:50,839
yeah and the summer I said what I did is

00:08:48,890 --> 00:08:52,040
first of all when we putting an upstream

00:08:50,839 --> 00:08:53,990
we're going a discovering all the

00:08:52,040 --> 00:08:55,970
function that's what we did the

00:08:53,990 --> 00:08:57,680
beginning we did it with Google discover

00:08:55,970 --> 00:08:59,300
the function and created route to wait

00:08:57,680 --> 00:09:00,950
so I like so basic we call this route

00:08:59,300 --> 00:09:02,330
and now we didn't change anything the

00:09:00,950 --> 00:09:04,640
only thing we will change is the route

00:09:02,330 --> 00:09:06,500
it will go to a double as lambda I will

00:09:04,640 --> 00:09:08,390
change the route it will go to Google

00:09:06,500 --> 00:09:09,709
Azure into Azure will change you're

00:09:08,390 --> 00:09:11,510
right it will go to Cloud Foundry and

00:09:09,709 --> 00:09:13,750
that's basically showing the recreation

00:09:11,510 --> 00:09:20,570
place so we'll do that again

00:09:13,750 --> 00:09:22,700
hey Alex are unglue demo so now it's

00:09:20,570 --> 00:09:23,930
going to ask exactly this so and that's

00:09:22,700 --> 00:09:25,450
the beautiful in fact we'll do the same

00:09:23,930 --> 00:09:27,830
thing right now with Cloud Foundry

00:09:25,450 --> 00:09:30,580
because very clear father summit so

00:09:27,830 --> 00:09:30,580
let's do it quick quick

00:09:37,960 --> 00:09:40,900
and basically right now if we will run

00:09:39,550 --> 00:09:42,310
the same time over there it will go to

00:09:40,900 --> 00:09:44,050
club founder we can do the same thing

00:09:42,310 --> 00:09:45,760
with the sewer so the beautiful is kind

00:09:44,050 --> 00:09:48,670
of like the way that we can be great

00:09:45,760 --> 00:09:53,230
cause cloud cause function and so on so

00:09:48,670 --> 00:10:10,270
let's do it again and Alexa run blue

00:09:53,230 --> 00:10:13,290
demo I just put it in the wrong girl see

00:10:10,270 --> 00:10:13,290
all right that's will never work

00:10:14,730 --> 00:10:27,310
stir it again now when I'm putting it on

00:10:17,290 --> 00:10:28,900
the right CLI Alexa one glue demo you

00:10:27,310 --> 00:10:30,130
will assume that it will work I mean I

00:10:28,900 --> 00:10:34,530
can do that it's just well taking a

00:10:30,130 --> 00:10:34,530
second but yeah likes a run glue demo

00:10:35,490 --> 00:10:40,690
right so basically i'ma great it it's

00:10:38,110 --> 00:10:45,280
really really simple we have a lot of

00:10:40,690 --> 00:10:46,900
demos so we're going to go next and glue

00:10:45,280 --> 00:10:48,460
is an open-source project so we can go

00:10:46,900 --> 00:10:50,920
and look at it but basically again there

00:10:48,460 --> 00:10:52,920
it is immigration use case and I will

00:10:50,920 --> 00:10:56,080
show you and more demos in the in the

00:10:52,920 --> 00:10:58,630
next so now let's talk about what you

00:10:56,080 --> 00:11:09,160
came up which is the debuggable and

00:10:58,630 --> 00:11:10,000
observability pot so does better yeah

00:11:09,160 --> 00:11:12,760
okay

00:11:10,000 --> 00:11:15,700
so let's first understand the problem

00:11:12,760 --> 00:11:17,740
right so way way on the back days we had

00:11:15,700 --> 00:11:19,390
one erotic application if I wanted to

00:11:17,740 --> 00:11:21,160
debug the monolithic application and

00:11:19,390 --> 00:11:23,590
touch debugger that was really really

00:11:21,160 --> 00:11:26,800
simple once I did that I actually saw

00:11:23,590 --> 00:11:28,900
all the stage of the application can see

00:11:26,800 --> 00:11:30,490
there are oh boy we see the memory I can

00:11:28,900 --> 00:11:32,230
actually have a full picture of

00:11:30,490 --> 00:11:34,000
everything that running there the

00:11:32,230 --> 00:11:37,270
problem with microservices is that now I

00:11:34,000 --> 00:11:38,680
took it the same one binary and actually

00:11:37,270 --> 00:11:41,020
spread them to a lot of different ones

00:11:38,680 --> 00:11:42,670
so now the state is all spread all

00:11:41,020 --> 00:11:44,730
around and it's really hard to kind of

00:11:42,670 --> 00:11:48,910
like follow what its belong to to what

00:11:44,730 --> 00:11:50,200
so this is definitely complicated right

00:11:48,910 --> 00:11:50,570
now when you're running some micro

00:11:50,200 --> 00:11:53,090
server

00:11:50,570 --> 00:11:54,830
definitely it's more complicated when

00:11:53,090 --> 00:11:58,280
you actually run it cross-platform like

00:11:54,830 --> 00:12:00,170
kubernetes and Cloud Foundry but even if

00:11:58,280 --> 00:12:02,090
we take it to another level this is our

00:12:00,170 --> 00:12:05,870
really your application look right your

00:12:02,090 --> 00:12:08,090
application look like 500 450 micro

00:12:05,870 --> 00:12:10,250
services and do understand what's going

00:12:08,090 --> 00:12:12,400
on on the full application to understand

00:12:10,250 --> 00:12:15,140
the full picture it's really really hard

00:12:12,400 --> 00:12:16,790
this is just a funny joke that someone

00:12:15,140 --> 00:12:21,380
to be read and I found it very very

00:12:16,790 --> 00:12:24,340
larious but this is true this is what

00:12:21,380 --> 00:12:26,960
people are actually going through so

00:12:24,340 --> 00:12:28,760
what is that solution what can we do how

00:12:26,960 --> 00:12:31,040
can we actually debug so the first thing

00:12:28,760 --> 00:12:32,210
that we can do is use open tracing so

00:12:31,040 --> 00:12:35,240
let's understand what it's opened

00:12:32,210 --> 00:12:38,660
erasing so what open tracing is is

00:12:35,240 --> 00:12:41,420
basically a transactional logging what

00:12:38,660 --> 00:12:45,530
it's mean is that when someone when a

00:12:41,420 --> 00:12:47,420
request coming open tracing giving it ID

00:12:45,530 --> 00:12:50,210
and then what it's doing it's basically

00:12:47,420 --> 00:12:51,980
what the context just propagated down to

00:12:50,210 --> 00:12:53,960
all the RIC the micro service you use

00:12:51,980 --> 00:12:56,030
this request and then when it's getting

00:12:53,960 --> 00:12:57,860
it back is looking at the setup okay now

00:12:56,030 --> 00:12:59,900
I can actually aggregate it all there it

00:12:57,860 --> 00:13:03,140
is and I can get a story that looks

00:12:59,900 --> 00:13:04,850
something like this right so this is

00:13:03,140 --> 00:13:06,650
basically how it looks right you get

00:13:04,850 --> 00:13:08,750
have experice that's what calls fence

00:13:06,650 --> 00:13:11,420
and basically in Sprint's you have a

00:13:08,750 --> 00:13:13,880
function you know micro-services a that

00:13:11,420 --> 00:13:15,920
run call mycosis be that called C D and

00:13:13,880 --> 00:13:19,580
E and now you have the full picture of

00:13:15,920 --> 00:13:21,470
how your stuff is working they the open

00:13:19,580 --> 00:13:24,230
tracing itself is basically a standard

00:13:21,470 --> 00:13:28,460
right I mean it's only an API and that's

00:13:24,230 --> 00:13:30,260
Austin right now by the cloud CNCs and

00:13:28,460 --> 00:13:32,660
there is a lot a lot of product like

00:13:30,260 --> 00:13:35,930
geography from uber and a lot of other

00:13:32,660 --> 00:13:39,950
that actually implemented there actually

00:13:35,930 --> 00:13:41,480
UI and and thing itself so I think that

00:13:39,950 --> 00:13:42,310
again if you have time I think we have

00:13:41,480 --> 00:13:47,510
time

00:13:42,310 --> 00:13:49,670
yeah we have time if done maybe we will

00:13:47,510 --> 00:13:51,500
see them so I mean this demo is

00:13:49,670 --> 00:13:53,000
basically I'm just going to if you want

00:13:51,500 --> 00:13:54,200
and we can skip it if you want these

00:13:53,000 --> 00:13:56,960
basic they are going to teach you what

00:13:54,200 --> 00:13:58,430
is open tracing just showing you why we

00:13:56,960 --> 00:14:00,770
needed and so on awfully it will be

00:13:58,430 --> 00:14:03,980
useful if not we can go to the other

00:14:00,770 --> 00:14:10,269
demos so

00:14:03,980 --> 00:14:10,269
yes again where is this dressing one

00:14:19,970 --> 00:14:25,879
okay so what I'm spinning right now is a

00:14:23,599 --> 00:14:29,049
very very simple this is Jagger right

00:14:25,879 --> 00:14:32,179
this is one this is a we've been

00:14:29,049 --> 00:14:35,299
creating in uber and basically it's a

00:14:32,179 --> 00:14:38,299
very good open tracing implementation

00:14:35,299 --> 00:14:40,009
tool it's also asked by the CNC F so

00:14:38,299 --> 00:14:42,049
this is the UI and it's very very simple

00:14:40,009 --> 00:14:45,049
and when I'm running with this is

00:14:42,049 --> 00:14:48,319
basically it's an application that also

00:14:45,049 --> 00:14:50,989
wrote is basically right on demand okay

00:14:48,319 --> 00:14:53,239
so your quest and oh and over and

00:14:50,989 --> 00:14:55,189
basically it's going and doing what it's

00:14:53,239 --> 00:14:56,659
doing so the first thing that we're

00:14:55,189 --> 00:14:58,309
going to do we're just going to request

00:14:56,659 --> 00:15:02,329
one okay that's all we're going to do

00:14:58,309 --> 00:15:04,549
quest 1 and now that was very simple

00:15:02,329 --> 00:15:06,799
right we got a ride but let's go one

00:15:04,549 --> 00:15:08,659
second to the CLI to see the lock so

00:15:06,799 --> 00:15:11,720
look at this all I did is click one

00:15:08,659 --> 00:15:13,759
thing and I want to show you how much

00:15:11,720 --> 00:15:16,039
logs I got for this this is only for one

00:15:13,759 --> 00:15:18,229
thing right they didn't click just know

00:15:16,039 --> 00:15:20,479
like it's very simple as that you can

00:15:18,229 --> 00:15:22,970
see there's a lot a lot of flock for

00:15:20,479 --> 00:15:24,859
this specific now if we will go to

00:15:22,970 --> 00:15:25,159
Jagger we'll see what you gave us all

00:15:24,859 --> 00:15:26,989
right

00:15:25,159 --> 00:15:29,239
so the first thing that we can see is

00:15:26,989 --> 00:15:31,220
that if we go into the juggler UI we're

00:15:29,239 --> 00:15:33,619
going to the dependency is that

00:15:31,220 --> 00:15:34,519
immediately you realize that without me

00:15:33,619 --> 00:15:36,679
needed to do anything

00:15:34,519 --> 00:15:39,409
he basically realized that I have 1/10

00:15:36,679 --> 00:15:41,029
that call route that call customer that

00:15:39,409 --> 00:15:42,859
called driver call this and all of this

00:15:41,029 --> 00:15:47,269
he understand by just me clicking one

00:15:42,859 --> 00:15:49,069
button so this is one call usually

00:15:47,269 --> 00:15:51,519
you're doing much more than this so what

00:15:49,069 --> 00:15:54,459
we're going to do next is just try to

00:15:51,519 --> 00:15:56,599
run it a few time and see what happened

00:15:54,459 --> 00:15:57,859
once again first of all are which what I

00:15:56,599 --> 00:15:59,779
will show you with one because I think

00:15:57,859 --> 00:16:02,260
it would be much easier is that they

00:15:59,779 --> 00:16:05,360
will go here and

00:16:02,260 --> 00:16:05,360
[Music]

00:16:09,980 --> 00:16:15,890
hmm nobody working here let's do a thing

00:16:21,400 --> 00:16:26,680
yeah four and five tres so you find a

00:16:25,150 --> 00:16:28,360
dress right we click one time and you

00:16:26,680 --> 00:16:29,770
can see that and we can actually go and

00:16:28,360 --> 00:16:31,779
see what's going on there so this is

00:16:29,770 --> 00:16:33,610
what we got right we just click one

00:16:31,779 --> 00:16:36,370
button and this is what happened you can

00:16:33,610 --> 00:16:38,740
see the request you can see what

00:16:36,370 --> 00:16:40,420
happened who called who hi it's

00:16:38,740 --> 00:16:41,770
happening and this is only for one click

00:16:40,420 --> 00:16:43,810
I just want you to understand what

00:16:41,770 --> 00:16:45,250
happened when I clicked one time and you

00:16:43,810 --> 00:16:47,490
can see a lot of stuff like for instance

00:16:45,250 --> 00:16:51,370
I can come here and see actually logs

00:16:47,490 --> 00:16:52,900
from going to the logs but they are all

00:16:51,370 --> 00:16:54,670
in the transactional level you can

00:16:52,900 --> 00:16:57,670
actually see what happening and

00:16:54,670 --> 00:16:59,320
understand and because it's pretty the

00:16:57,670 --> 00:17:01,750
context you can even see more than this

00:16:59,320 --> 00:17:04,000
so that's that but you know this is kind

00:17:01,750 --> 00:17:05,350
of like boring let's go and do a lot and

00:17:04,000 --> 00:17:07,510
let's see what happened when I'm

00:17:05,350 --> 00:17:10,990
clicking and a lot of time and what you

00:17:07,510 --> 00:17:14,920
can see is when I'm clicking the let can

00:17:10,990 --> 00:17:16,839
see going up okay and so let's go try

00:17:14,920 --> 00:17:21,730
let's take the one that is actually the

00:17:16,839 --> 00:17:27,870
most time and let's go back here and try

00:17:21,730 --> 00:17:35,860
to look for this one I think it's Drive

00:17:27,870 --> 00:17:38,309
hopefully right snick sorry I mean I

00:17:35,860 --> 00:17:41,380
just it's not right but what was it

00:17:38,309 --> 00:17:45,100
already one second I would find in a

00:17:41,380 --> 00:17:47,559
second what we need to right I think if

00:17:45,100 --> 00:17:51,600
the driver ID we can actually just go

00:17:47,559 --> 00:17:51,600
back and ask them to give us all this

00:17:54,250 --> 00:17:58,120
so they can see we got all of this and

00:17:56,409 --> 00:18:02,080
if we can go right now to one of them we

00:17:58,120 --> 00:18:03,760
can see that we can see what's the

00:18:02,080 --> 00:18:06,100
problem actually what we can see is that

00:18:03,760 --> 00:18:08,169
we have a problem with letting see first

00:18:06,100 --> 00:18:09,580
of all we can see some arrows and the

00:18:08,169 --> 00:18:11,380
second thing if we are actually going to

00:18:09,580 --> 00:18:13,450
look and see we can see that there is a

00:18:11,380 --> 00:18:15,159
lot of let's key one of the arrows for

00:18:13,450 --> 00:18:16,900
instance and you can see that the

00:18:15,159 --> 00:18:19,270
problem is that there is actually it's

00:18:16,900 --> 00:18:21,820
waiting there is a time out errors in

00:18:19,270 --> 00:18:23,140
the Redis and we can actually see a lot

00:18:21,820 --> 00:18:26,080
of other stuff like that there is a

00:18:23,140 --> 00:18:27,580
thread pool here so I mean it's really

00:18:26,080 --> 00:18:29,409
simple to go I can show you how we're

00:18:27,580 --> 00:18:31,270
going and change the application we run

00:18:29,409 --> 00:18:33,429
it again will totally change the spam

00:18:31,270 --> 00:18:35,200
but the idea with what open tracing is

00:18:33,429 --> 00:18:38,679
giving you is the ability to actually

00:18:35,200 --> 00:18:40,750
see problems in the you know latency and

00:18:38,679 --> 00:18:42,429
so on and let you actually analyze it

00:18:40,750 --> 00:18:44,230
and so on now I don't have time so I

00:18:42,429 --> 00:18:46,450
mean if you want I will do the demo

00:18:44,230 --> 00:18:47,919
offline but basically there it is that

00:18:46,450 --> 00:18:49,480
that's what it's giving you and we'll

00:18:47,919 --> 00:18:55,360
talk right now about what is giving you

00:18:49,480 --> 00:18:57,909
what is not giving you and then we'll

00:18:55,360 --> 00:18:59,409
continue back okay so we talked about so

00:18:57,909 --> 00:19:00,850
what what actually it's giving you

00:18:59,409 --> 00:19:02,380
giving you logging right this is

00:19:00,850 --> 00:19:03,940
actually if you're thinking about it

00:19:02,380 --> 00:19:06,309
that's the equivalent for logging that

00:19:03,940 --> 00:19:07,990
exists in monolithic application it's

00:19:06,309 --> 00:19:10,510
just a transactional one because that

00:19:07,990 --> 00:19:12,520
way it can give you you know a view of

00:19:10,510 --> 00:19:14,260
what's going on it's giving you metrics

00:19:12,520 --> 00:19:16,659
an alert because theoretically we can

00:19:14,260 --> 00:19:18,159
pipe it back to Prometheus it's giving

00:19:16,659 --> 00:19:19,330
you a context propagation and that's

00:19:18,159 --> 00:19:21,850
what I were talking we can go actually

00:19:19,330 --> 00:19:24,130
and drive it as much as we want down

00:19:21,850 --> 00:19:26,230
it's giving you a critical path analysis

00:19:24,130 --> 00:19:28,000
right because you can see that something

00:19:26,230 --> 00:19:30,490
is not working and you can actually go

00:19:28,000 --> 00:19:32,320
and and debug it and it's giving you a

00:19:30,490 --> 00:19:35,169
topology right we can actually see how

00:19:32,320 --> 00:19:36,400
the system look so that's great but

00:19:35,169 --> 00:19:38,919
there is a lot of stuff it's not giving

00:19:36,400 --> 00:19:40,570
you and we need to look at it and

00:19:38,919 --> 00:19:41,950
understand the first thing that it's not

00:19:40,570 --> 00:19:45,370
giving you it's not giving you runtime

00:19:41,950 --> 00:19:47,590
debugger usually I as you see I print a

00:19:45,370 --> 00:19:49,780
lot of stuff I mean when I show you the

00:19:47,590 --> 00:19:51,280
demo you saw a lot of logs the reason

00:19:49,780 --> 00:19:52,840
it's happening is because I wanted to

00:19:51,280 --> 00:19:54,970
show you what you can get from it but

00:19:52,840 --> 00:19:56,919
actually think about the network

00:19:54,970 --> 00:19:59,049
throughput you can't blog everything if

00:19:56,919 --> 00:20:01,299
you kill the networks so what you need

00:19:59,049 --> 00:20:04,030
to actually do is not log a lot and

00:20:01,299 --> 00:20:06,309
therefore you can and then you need to

00:20:04,030 --> 00:20:07,960
basically simple it you can basically

00:20:06,309 --> 00:20:09,520
collect every log so you

00:20:07,960 --> 00:20:11,440
then you take it I don't know once a

00:20:09,520 --> 00:20:13,300
minute and what happening in this is

00:20:11,440 --> 00:20:15,340
that eventually you're not getting the

00:20:13,300 --> 00:20:17,380
old picture right it's not you know

00:20:15,340 --> 00:20:19,930
you're getting some of it and you're not

00:20:17,380 --> 00:20:21,730
getting a runtime debugger there is also

00:20:19,930 --> 00:20:23,350
you need to rub the code somehow right

00:20:21,730 --> 00:20:25,900
because it's a library in the end of the

00:20:23,350 --> 00:20:27,670
day there's no allistic view because you

00:20:25,900 --> 00:20:29,140
only see what you print if you didn't

00:20:27,670 --> 00:20:31,660
print it you can't see it right it's not

00:20:29,140 --> 00:20:33,460
it's very simple now the process of

00:20:31,660 --> 00:20:35,140
let's say that I didn't print it and now

00:20:33,460 --> 00:20:38,080
I want to print it it's mean you know

00:20:35,140 --> 00:20:39,910
the regular one at the print go push it

00:20:38,080 --> 00:20:41,500
a built again and push it to kubernetes

00:20:39,910 --> 00:20:44,800
wait a minutes until you getting the

00:20:41,500 --> 00:20:46,450
logs and so on and you can change any

00:20:44,800 --> 00:20:49,210
variable on runtime because it's not a

00:20:46,450 --> 00:20:51,280
debugger and also it's giving quite a

00:20:49,210 --> 00:20:53,320
lot of over them then throughput of the

00:20:51,280 --> 00:20:55,150
network and we need to be realized that

00:20:53,320 --> 00:20:57,790
you have to sample it you can see all

00:20:55,150 --> 00:20:59,380
the logs all the time and that's what

00:20:57,790 --> 00:21:02,260
bring us to build an order to Acco

00:20:59,380 --> 00:21:03,910
squash and what is squash so I mean I

00:21:02,260 --> 00:21:05,290
will explain what it is but I think that

00:21:03,910 --> 00:21:07,600
the best way just to show it because

00:21:05,290 --> 00:21:09,580
it's damn simple so as I said if you're

00:21:07,600 --> 00:21:11,770
working today on the monolithic you have

00:21:09,580 --> 00:21:13,540
the ability to something like Splunk or

00:21:11,770 --> 00:21:15,880
any other to see the logs that's the

00:21:13,540 --> 00:21:17,950
equivalent of open tracing but if you're

00:21:15,880 --> 00:21:19,690
looking at a regular the debugger there

00:21:17,950 --> 00:21:21,610
is no equivalent in the micro-services

00:21:19,690 --> 00:21:23,140
world so that's why we build it and

00:21:21,610 --> 00:21:25,300
again I will show you a demo because

00:21:23,140 --> 00:21:37,799
it's a small demo that explained this

00:21:25,300 --> 00:21:39,970
very very well so okay

00:21:37,799 --> 00:21:50,220
okay so in a second I'm spinning an

00:21:39,970 --> 00:21:52,750
environment in AWS we'll take a sec okay

00:21:50,220 --> 00:21:54,190
so this is a very simple application so

00:21:52,750 --> 00:21:55,900
she show the case of what we're doing

00:21:54,190 --> 00:21:57,400
it's a very stupid a vacation you're

00:21:55,900 --> 00:21:59,470
putting to power metal doesn't really

00:21:57,400 --> 00:22:01,270
matter which and then you're grading

00:21:59,470 --> 00:22:02,470
calculator and what you can see

00:22:01,270 --> 00:22:06,280
downstairs is that it's not really

00:22:02,470 --> 00:22:08,830
working right 76 likes 32 it's not equal

00:22:06,280 --> 00:22:11,260
44 so what do you do need to debug it

00:22:08,830 --> 00:22:13,510
how do you do that so let's you probably

00:22:11,260 --> 00:22:15,280
know usually you're going you writing

00:22:13,510 --> 00:22:16,360
some logs you're putting the variable

00:22:15,280 --> 00:22:18,850
you're trying to understand what is not

00:22:16,360 --> 00:22:21,220
working if using open tracing you maybe

00:22:18,850 --> 00:22:23,200
add logs and then 10 minutes after you

00:22:21,220 --> 00:22:26,020
getting them but what we start is that

00:22:23,200 --> 00:22:27,880
it actually should be much much simpler

00:22:26,020 --> 00:22:29,919
so let's understand why this application

00:22:27,880 --> 00:22:31,049
is doing actually this application it's

00:22:29,919 --> 00:22:35,409
really really simple

00:22:31,049 --> 00:22:38,679
this one this is actually a go micro

00:22:35,409 --> 00:22:42,159
services that basically is served me the

00:22:38,679 --> 00:22:44,440
UI so it's basically an HTML wrap inside

00:22:42,159 --> 00:22:46,150
a glow ago and then is taking this

00:22:44,440 --> 00:22:48,730
formatter and he sent it to the next

00:22:46,150 --> 00:22:50,890
micro services written in Java that's

00:22:48,730 --> 00:22:52,210
what you see here and this micro service

00:22:50,890 --> 00:22:54,880
is very simple is getting the to value

00:22:52,210 --> 00:22:55,480
and either end very very simple and

00:22:54,880 --> 00:22:58,510
bring it back

00:22:55,480 --> 00:23:00,549
so again just notice this is go

00:22:58,510 --> 00:23:01,450
application and this is Visual Studio

00:23:00,549 --> 00:23:04,409
card ID

00:23:01,450 --> 00:23:07,270
this is java application and this is

00:23:04,409 --> 00:23:09,820
IntelliJ so what we did we basically

00:23:07,270 --> 00:23:11,830
create an extension when I clicking this

00:23:09,820 --> 00:23:14,140
one I hope you can see that basically

00:23:11,830 --> 00:23:16,150
what I did is I created an extension for

00:23:14,140 --> 00:23:18,429
squash and what you can see I hope you

00:23:16,150 --> 00:23:21,669
can see that it's basically squash debug

00:23:18,429 --> 00:23:23,559
container and we will choose this and

00:23:21,669 --> 00:23:25,510
what happened here it went to kubernetes

00:23:23,559 --> 00:23:27,190
and brought me all the pod that exists

00:23:25,510 --> 00:23:29,260
in my system only the one I can see of

00:23:27,190 --> 00:23:30,429
course so that's what we will choose the

00:23:29,260 --> 00:23:33,370
first one because the first one is

00:23:30,429 --> 00:23:35,140
described service one and then he said

00:23:33,370 --> 00:23:36,820
to me in this pod there is one container

00:23:35,140 --> 00:23:38,530
do you wanna debug it the answer is yes

00:23:36,820 --> 00:23:41,799
and he said which debugger do you choose

00:23:38,530 --> 00:23:44,320
to attach this is go so we'll choose the

00:23:41,799 --> 00:23:46,840
LV okay and that's it so this is running

00:23:44,320 --> 00:23:48,399
on AWS right now and in a second touch

00:23:46,840 --> 00:23:50,090
it and can debug it now we will do the

00:23:48,399 --> 00:23:51,559
same thing exactly on the other

00:23:50,090 --> 00:23:53,929
just to show you that you can do it also

00:23:51,559 --> 00:23:56,720
in the other one so this is IntelliJ

00:23:53,929 --> 00:23:58,730
again squash debug container now we will

00:23:56,720 --> 00:24:03,020
go to the second microservices which is

00:23:58,730 --> 00:24:05,210
service to Java here is there the darker

00:24:03,020 --> 00:24:07,789
quote the ears the container and we will

00:24:05,210 --> 00:24:09,740
choose Java and that's it it a child it

00:24:07,789 --> 00:24:11,390
attached so now the only thing that we

00:24:09,740 --> 00:24:13,400
really need to do is go back to my

00:24:11,390 --> 00:24:16,070
application and click and what will

00:24:13,400 --> 00:24:17,929
happen I'm like debugging it so what you

00:24:16,070 --> 00:24:20,809
can see I have all the parameter here I

00:24:17,929 --> 00:24:22,789
can step into it and do everything right

00:24:20,809 --> 00:24:24,470
now what will happen if I will continue

00:24:22,789 --> 00:24:26,659
here it will jump to the other

00:24:24,470 --> 00:24:28,820
micro-services right because I put a

00:24:26,659 --> 00:24:30,590
breakpoint there as well so basically we

00:24:28,820 --> 00:24:33,350
took the Java debugger attached to it we

00:24:30,590 --> 00:24:35,990
took the scapegoat debugger attached to

00:24:33,350 --> 00:24:38,450
it and we basically orchestrated all

00:24:35,990 --> 00:24:40,640
right and then what will happen here is

00:24:38,450 --> 00:24:42,710
you can see I mean I'm going to click

00:24:40,640 --> 00:24:43,820
some parts um next and you can see that

00:24:42,710 --> 00:24:45,980
what I that we're getting the right

00:24:43,820 --> 00:24:48,710
bottom line I don't know if you can see

00:24:45,980 --> 00:24:50,960
it but this is 76 this is 32 like we

00:24:48,710 --> 00:24:52,880
wrote and this is true but look what I

00:24:50,960 --> 00:24:55,070
did here I introduce a by a bug

00:24:52,880 --> 00:24:57,289
specifically right what I did is if it's

00:24:55,070 --> 00:24:59,750
true I did - because I wanted to show

00:24:57,289 --> 00:25:01,520
you the point but this is a debugger so

00:24:59,750 --> 00:25:03,470
the only thing that I can do is just go

00:25:01,520 --> 00:25:05,960
and change the value to see if it will

00:25:03,470 --> 00:25:08,870
fix the problem on one time so I change

00:25:05,960 --> 00:25:11,419
it to false I'm going to do next it will

00:25:08,870 --> 00:25:13,279
jump to the other microservices and then

00:25:11,419 --> 00:25:14,840
I will click it again and we'll go to

00:25:13,279 --> 00:25:17,270
the application to see that this is fix

00:25:14,840 --> 00:25:19,250
the problem now I can change it push it

00:25:17,270 --> 00:25:23,210
to prove it to takubo could Cloud

00:25:19,250 --> 00:25:25,610
Foundry and so on make sense okay so

00:25:23,210 --> 00:25:32,679
this is what basically squash supposed

00:25:25,610 --> 00:25:32,679
to do let's continue to service mesh

00:25:34,179 --> 00:25:41,940
okay

00:25:36,030 --> 00:25:44,430
so we basically just oka staying in the

00:25:41,940 --> 00:25:46,200
debugger and giving him the dead it's

00:25:44,430 --> 00:25:49,500
also open source really recommend to go

00:25:46,200 --> 00:25:51,030
and check it out and I said the idea

00:25:49,500 --> 00:25:53,130
with squash is that and I we shared a

00:25:51,030 --> 00:25:54,930
letter is that it not only a micro

00:25:53,130 --> 00:25:56,040
service debugger basically we can work

00:25:54,930 --> 00:25:57,660
with any environment including

00:25:56,040 --> 00:25:59,040
monolithic so theoretically if you have

00:25:57,660 --> 00:26:00,660
an application that is part of its

00:25:59,040 --> 00:26:02,490
monolithic part of it micro service part

00:26:00,660 --> 00:26:04,320
of his service you can actually jump

00:26:02,490 --> 00:26:07,230
between it like it's one big application

00:26:04,320 --> 00:26:08,940
which I found very useful okay so now

00:26:07,230 --> 00:26:10,410
service smash so I don't know if you

00:26:08,940 --> 00:26:12,900
know buddy service Messer will start

00:26:10,410 --> 00:26:14,610
just to explain daddy but the idea with

00:26:12,900 --> 00:26:16,860
service mesh is to abstract the network

00:26:14,610 --> 00:26:18,540
so right now before that if two micro

00:26:16,860 --> 00:26:20,550
service needed to talk I needed to put

00:26:18,540 --> 00:26:22,620
some folder that we know directly out to

00:26:20,550 --> 00:26:24,660
go to these micro services the problem

00:26:22,620 --> 00:26:26,340
is that if after it I want to change

00:26:24,660 --> 00:26:28,980
something I need to go and change the

00:26:26,340 --> 00:26:30,390
code which is really not useful so the

00:26:28,980 --> 00:26:33,450
idea was what if we can actually

00:26:30,390 --> 00:26:36,720
abstract that and the way to abstract it

00:26:33,450 --> 00:26:39,210
next to every micro service we just put

00:26:36,720 --> 00:26:41,280
in what call a sidecar a sidecar of

00:26:39,210 --> 00:26:42,570
envoi which is a proxy that's the one

00:26:41,280 --> 00:26:44,490
they choose it doesn't have to be in

00:26:42,570 --> 00:26:46,260
void but most likely that's what it

00:26:44,490 --> 00:26:48,630
would be and what happened is that all

00:26:46,260 --> 00:26:52,050
this micro service know is how to talk

00:26:48,630 --> 00:26:53,550
to this proxy and then if everybody if

00:26:52,050 --> 00:26:56,340
all those micro servers know how to talk

00:26:53,550 --> 00:26:58,290
to a envoi now basically envoi created

00:26:56,340 --> 00:27:00,150
kind of like a mesh and they can talk to

00:26:58,290 --> 00:27:01,380
each other and because they are on the

00:27:00,150 --> 00:27:04,290
request but they can make a lot of

00:27:01,380 --> 00:27:06,360
decision for in science today is maybe

00:27:04,290 --> 00:27:08,370
it's not allowed for those micro service

00:27:06,360 --> 00:27:10,860
to talk and that's where for instance a

00:27:08,370 --> 00:27:13,080
mixer is coming into picture in this

00:27:10,860 --> 00:27:15,270
it's growing every call to basically

00:27:13,080 --> 00:27:16,980
interrupt and ready me immediately

00:27:15,270 --> 00:27:19,650
decided if it's actually supposed to go

00:27:16,980 --> 00:27:21,660
and it's okay to do it or not so that's

00:27:19,650 --> 00:27:24,030
basically what is service machines doing

00:27:21,660 --> 00:27:28,560
is very simple side car next to every

00:27:24,030 --> 00:27:30,390
cube next to any container and so on so

00:27:28,560 --> 00:27:33,240
I'll show you where I think that it will

00:27:30,390 --> 00:27:35,310
play a lot and then I will show you okay

00:27:33,240 --> 00:27:36,870
so the solution that I see that is best

00:27:35,310 --> 00:27:38,160
is I do believe that service mesh is

00:27:36,870 --> 00:27:40,020
really really important it's giving you

00:27:38,160 --> 00:27:42,060
observer ability which is really really

00:27:40,020 --> 00:27:43,950
important it's giving you security

00:27:42,060 --> 00:27:45,600
that's the to use case that people are

00:27:43,950 --> 00:27:48,360
preaching and I really really agree that

00:27:45,600 --> 00:27:49,639
it's really useful what we did is we

00:27:48,360 --> 00:27:52,099
basically also add in

00:27:49,639 --> 00:27:55,099
option which is we wrote a filter for an

00:27:52,099 --> 00:27:57,409
for squash to envoi so now theoretically

00:27:55,099 --> 00:27:59,989
think about like this I ever mesh right

00:27:57,409 --> 00:28:01,429
with a lot a lot of micro services and I

00:27:59,989 --> 00:28:04,070
discovered that I have a problem between

00:28:01,429 --> 00:28:05,959
those I see from open tracing off from

00:28:04,070 --> 00:28:08,119
service meshes see latency between two

00:28:05,959 --> 00:28:09,950
microservices now one is zoom in and

00:28:08,119 --> 00:28:12,799
that's exactly what squash is doing

00:28:09,950 --> 00:28:14,209
basically and voy on the request call if

00:28:12,799 --> 00:28:16,879
you're getting 500 and so on you can

00:28:14,209 --> 00:28:18,859
actually go to squash and say debug me

00:28:16,879 --> 00:28:20,779
and then basically you can debug in life

00:28:18,859 --> 00:28:22,609
and that's the adventures also to debug

00:28:20,779 --> 00:28:23,959
it actually in production because if you

00:28:22,609 --> 00:28:27,409
think about it and you have actually a

00:28:23,959 --> 00:28:29,499
service and not only one container like

00:28:27,409 --> 00:28:33,169
usually you have so now you can actually

00:28:29,499 --> 00:28:35,329
aim basically what we're doing is a

00:28:33,169 --> 00:28:37,369
shadowing the request and attach a

00:28:35,329 --> 00:28:38,839
debugger to the request but they're all

00:28:37,369 --> 00:28:41,149
the rest is continue running so

00:28:38,839 --> 00:28:43,039
basically not posing the service on on

00:28:41,149 --> 00:28:44,749
the cluster so what I will do is the

00:28:43,039 --> 00:28:47,839
last demo and I know I'm killing you and

00:28:44,749 --> 00:28:51,469
going fast but really trying to show you

00:28:47,839 --> 00:28:54,529
a lot so what we would try to do right

00:28:51,469 --> 00:29:03,940
now is basically second I would close

00:28:54,529 --> 00:29:03,940
some stuff okay

00:29:05,270 --> 00:29:12,770
okay so the only thing I will do is

00:29:07,250 --> 00:29:14,630
right now online demo so what we will do

00:29:12,770 --> 00:29:16,580
right now is the service manager plus

00:29:14,630 --> 00:29:18,320
everything together plus they did the

00:29:16,580 --> 00:29:20,960
squash together everything working

00:29:18,320 --> 00:29:22,340
another one solution and it will take a

00:29:20,960 --> 00:29:23,630
second because spinning up the

00:29:22,340 --> 00:29:26,600
environment any questions for the

00:29:23,630 --> 00:29:29,360
meantime No

00:29:26,600 --> 00:29:35,260
okay so in a second it will happen and

00:29:29,360 --> 00:29:35,260
then hopefully okay

00:29:41,290 --> 00:29:44,950
okay so I will tell you what we're going

00:29:42,790 --> 00:29:46,780
to do right now we start by basically

00:29:44,950 --> 00:29:49,090
taking a very simple application that I

00:29:46,780 --> 00:29:53,200
guess most of you know which is the

00:29:49,090 --> 00:29:55,150
monolithic application a pet store we'll

00:29:53,200 --> 00:29:57,490
take it and we're basically going to

00:29:55,150 --> 00:30:00,640
transport it to do micro services and

00:29:57,490 --> 00:30:02,530
service and then debug it all that's the

00:30:00,640 --> 00:30:08,200
purpose not full it will be ready in a

00:30:02,530 --> 00:30:10,270
sec the network will play with us okay

00:30:08,200 --> 00:30:11,980
so I can show you already that this is

00:30:10,270 --> 00:30:17,410
the code of the monolithic application

00:30:11,980 --> 00:30:19,240
it's a regular you go it's starting okay

00:30:17,410 --> 00:30:20,590
so this is the application that I guess

00:30:19,240 --> 00:30:22,990
everybody knows right

00:30:20,590 --> 00:30:24,730
there's no a lot of surprise here here

00:30:22,990 --> 00:30:27,610
is the code of the application it's a

00:30:24,730 --> 00:30:30,940
regular spring application pet store

00:30:27,610 --> 00:30:32,920
right ok so now what happened is that as

00:30:30,940 --> 00:30:34,960
you can see it's all working and when

00:30:32,920 --> 00:30:36,490
I'm coming here I really want to modify

00:30:34,960 --> 00:30:40,060
it what I want to do is add another

00:30:36,490 --> 00:30:41,590
column for location and I have a new

00:30:40,060 --> 00:30:43,540
engineer in my team and I really really

00:30:41,590 --> 00:30:45,160
want him to go and actually had it but

00:30:43,540 --> 00:30:47,050
he doesn't know this so we need to learn

00:30:45,160 --> 00:30:49,210
that and then after we need to modify it

00:30:47,050 --> 00:30:51,010
then you need to test it then in either

00:30:49,210 --> 00:30:53,740
regression test it then you need to

00:30:51,010 --> 00:30:55,660
redeploy that's a lot a lot of stuff but

00:30:53,740 --> 00:30:57,820
most of the thing what this page is

00:30:55,660 --> 00:30:59,800
doing is only basically showing right

00:30:57,820 --> 00:31:02,170
it's only representing so what we can do

00:30:59,800 --> 00:31:04,930
is I wrote here a micro services in go

00:31:02,170 --> 00:31:06,370
very simple one that's always going is

00:31:04,930 --> 00:31:09,630
basically going directly to the database

00:31:06,370 --> 00:31:12,730
and showing the data that I want so now

00:31:09,630 --> 00:31:16,800
that's great and it's really really even

00:31:12,730 --> 00:31:16,800
simple to do that if I'm coming here

00:31:21,140 --> 00:31:26,540
so why did you see what I'm doing a

00:31:23,150 --> 00:31:28,760
second okay so as I said with gluey I

00:31:26,540 --> 00:31:30,020
already see the environment and I don't

00:31:28,760 --> 00:31:32,840
know if you see if you know you see it

00:31:30,020 --> 00:31:35,059
big enough so I will tell you what I'm

00:31:32,840 --> 00:31:37,429
saying and saying blue CTL please create

00:31:35,059 --> 00:31:40,010
a route that every time that someone

00:31:37,429 --> 00:31:42,830
going to slash red dot html' I want you

00:31:40,010 --> 00:31:44,660
to go to the go micro service that I

00:31:42,830 --> 00:31:46,940
wrote and that's it that's all I did

00:31:44,660 --> 00:31:50,840
right and that's what will come here

00:31:46,940 --> 00:31:54,650
this is basically still Java this is

00:31:50,840 --> 00:31:57,080
still Java but if I'm going here it's

00:31:54,650 --> 00:31:58,490
already the micro servicing go so

00:31:57,080 --> 00:32:00,230
basically this is what I call I boot up

00:31:58,490 --> 00:32:01,760
right so basically you so quick it is by

00:32:00,230 --> 00:32:05,690
the way it's because we're using the v2

00:32:01,760 --> 00:32:07,790
API of envoi really really quick right

00:32:05,690 --> 00:32:09,860
so now this is an I build up already

00:32:07,790 --> 00:32:12,710
but look at this here we actually have

00:32:09,860 --> 00:32:14,510
arrow in the contact again I can go and

00:32:12,710 --> 00:32:16,250
ask my ninja need to fix it or I can do

00:32:14,510 --> 00:32:18,919
something simpler what I can do is just

00:32:16,250 --> 00:32:20,540
route to a lambda so what I will do

00:32:18,919 --> 00:32:23,690
right now I will just make it bigger

00:32:20,540 --> 00:32:29,929
than you can see he's all do this again

00:32:23,690 --> 00:32:32,360
a glue CTL and I will go to the right

00:32:29,929 --> 00:32:34,580
function okay so see what happen here

00:32:32,360 --> 00:32:36,350
again it's really simple glue create

00:32:34,580 --> 00:32:39,140
route every time that someone saying

00:32:36,350 --> 00:32:41,299
slash contact what I wanted to do is to

00:32:39,140 --> 00:32:44,030
go to the upstream which is basically

00:32:41,299 --> 00:32:46,370
the region in AWS and I want you to call

00:32:44,030 --> 00:32:48,620
the function contact us now notice I

00:32:46,370 --> 00:32:50,630
didn't put any password and security any

00:32:48,620 --> 00:32:52,190
ID and the reason is because we're

00:32:50,630 --> 00:32:53,840
already taking care of it is listen to

00:32:52,190 --> 00:32:55,910
all the secret and every time that

00:32:53,840 --> 00:32:57,770
something changing the secret or in the

00:32:55,910 --> 00:33:00,380
upstream or in the configuration file

00:32:57,770 --> 00:33:02,690
humidity taking it sending it to an API

00:33:00,380 --> 00:33:05,390
to plugins that generate the language

00:33:02,690 --> 00:33:07,340
and basically then n we're getting it so

00:33:05,390 --> 00:33:09,590
again very simple that's all I did

00:33:07,340 --> 00:33:11,840
now I will do the same thing just for

00:33:09,590 --> 00:33:13,850
this so this is so many date you will

00:33:11,840 --> 00:33:15,410
see in a minute a form but now I want

00:33:13,850 --> 00:33:17,299
that every but that someone will float

00:33:15,410 --> 00:33:19,130
the form and will click it it actually

00:33:17,299 --> 00:33:25,460
will put it in a string so for that I

00:33:19,130 --> 00:33:28,160
did another function which is called

00:33:25,460 --> 00:33:30,110
contact tree so funny the sec you know

00:33:28,160 --> 00:33:31,940
go so again the same thing exactly and

00:33:30,110 --> 00:33:32,790
the only thing I'm saying now run this

00:33:31,940 --> 00:33:35,790
function

00:33:32,790 --> 00:33:37,440
and it's done and now when I will go you

00:33:35,790 --> 00:33:39,150
will discover that it's not going to

00:33:37,440 --> 00:33:41,880
work and I will show you why so this is

00:33:39,150 --> 00:33:45,500
a Java this is a go microservices but

00:33:41,880 --> 00:33:48,150
when I'm coming here this is a J's and

00:33:45,500 --> 00:33:50,220
apparently lambda doesn't know to return

00:33:48,150 --> 00:33:52,110
something else is in JSON which is a

00:33:50,220 --> 00:33:54,900
problem for us so you can either use the

00:33:52,110 --> 00:33:56,150
API gateway of AWS and pay the money and

00:33:54,900 --> 00:33:58,710
they will transfer it for you

00:33:56,150 --> 00:34:00,000
actually there's no our API here where

00:33:58,710 --> 00:34:01,800
they're giving it for free or you can

00:34:00,000 --> 00:34:02,910
just use glue and what we're going to do

00:34:01,800 --> 00:34:04,860
right now I just apply the

00:34:02,910 --> 00:34:07,860
transformation filter that again it's

00:34:04,860 --> 00:34:15,120
open-source you can go and look at this

00:34:07,860 --> 00:34:16,620
so a city transformation which is this

00:34:15,120 --> 00:34:20,370
is exactly what I'm doing applying the

00:34:16,620 --> 00:34:21,960
transformation and now just to prevent

00:34:20,370 --> 00:34:26,880
cache or will open it in a different

00:34:21,960 --> 00:34:29,100
browser and now what you can see is this

00:34:26,880 --> 00:34:31,380
so every time I'm clicking R it's a job

00:34:29,100 --> 00:34:33,149
right you have a regular monolithic

00:34:31,380 --> 00:34:35,610
every time that I click in here it's a

00:34:33,149 --> 00:34:38,310
go micro services when I'm clicking here

00:34:35,610 --> 00:34:39,840
actually running no GS lambda and it's

00:34:38,310 --> 00:34:41,310
all look to the user like it's one

00:34:39,840 --> 00:34:43,110
application that's what I call I've it

00:34:41,310 --> 00:34:45,360
up and we can actually feel the

00:34:43,110 --> 00:34:47,850
information and I can sure that's

00:34:45,360 --> 00:34:50,190
actually going to s3 but I'm guess you

00:34:47,850 --> 00:34:52,169
better and it's worse and I can go to

00:34:50,190 --> 00:34:54,000
show you if you really want but the idea

00:34:52,169 --> 00:34:55,530
that the beautiful of all of this is now

00:34:54,000 --> 00:34:57,780
you can actually attach the debugger of

00:34:55,530 --> 00:34:59,820
each of them and actually the bucket so

00:34:57,780 --> 00:35:02,820
what we're going to do well quick go to

00:34:59,820 --> 00:35:05,660
the monolithic application and we will

00:35:02,820 --> 00:35:05,660
attach this debugger

00:35:07,730 --> 00:35:13,150
and we will do exactly the same thing on

00:35:10,670 --> 00:35:13,150
the other one

00:35:20,010 --> 00:35:23,940
and now what I will show you in a second

00:35:22,290 --> 00:35:26,840
it will connect that if I'm coming back

00:35:23,940 --> 00:35:30,869
to my application I put a breakpoint

00:35:26,840 --> 00:35:33,180
somewhere here when I'm adding a visit

00:35:30,869 --> 00:35:35,130
so when I'm clicking this one and I was

00:35:33,180 --> 00:35:37,770
clicking adding a visit this is my

00:35:35,130 --> 00:35:40,410
monolithic application bin-debug let's

00:35:37,770 --> 00:35:42,680
release it and now when I'm coming here

00:35:40,410 --> 00:35:46,440
and I'm clicking my micro-services

00:35:42,680 --> 00:35:48,359
basically it's my goal ocation debug so

00:35:46,440 --> 00:35:50,400
that's the idea and I think that it's

00:35:48,359 --> 00:35:52,410
really really powerful help you to move

00:35:50,400 --> 00:35:54,119
in your free time so again instead of

00:35:52,410 --> 00:35:56,220
taking all your monolithic application

00:35:54,119 --> 00:35:58,859
rewrite it will take you a lot of time

00:35:56,220 --> 00:36:01,980
and you're not getting new feature just

00:35:58,859 --> 00:36:04,890
extend the feature basically extend it

00:36:01,980 --> 00:36:06,750
with wherever you want micro service to

00:36:04,890 --> 00:36:09,960
serve allies and then on your free time

00:36:06,750 --> 00:36:12,990
do that while you actually do gradually

00:36:09,960 --> 00:36:15,000
moving hopefully it's helpful all of

00:36:12,990 --> 00:36:18,420
them is open source and I will love love

00:36:15,000 --> 00:36:25,920
love to get feedback if you want and I

00:36:18,420 --> 00:36:27,090
think that's it I mean yeah and if you

00:36:25,920 --> 00:36:32,190
have any question I would love to answer

00:36:27,090 --> 00:36:37,350
me know what yes for useful did I lost

00:36:32,190 --> 00:36:39,000
you all okay awesome

00:36:37,350 --> 00:36:41,460
and as I said it's all in the open and

00:36:39,000 --> 00:36:46,580
we're going to release a lot a lot of

00:36:41,460 --> 00:36:46,580
other cool features so go check it out

00:36:46,850 --> 00:36:50,420
to protect it

00:36:53,609 --> 00:36:59,559
you're talking about now so you say

00:36:58,150 --> 00:37:01,180
protects your data and when you're

00:36:59,559 --> 00:37:07,769
talking about which which which things

00:37:01,180 --> 00:37:07,769
that I did the police running a product

00:37:08,489 --> 00:37:12,430
the squash one of the glue it's depend

00:37:10,959 --> 00:37:15,400
so if it squash wondering what you ask

00:37:12,430 --> 00:37:18,189
is about debugging what we're doing is

00:37:15,400 --> 00:37:19,630
basically we use we leveraging the

00:37:18,189 --> 00:37:21,609
technology like kubernetes and cloud

00:37:19,630 --> 00:37:22,959
foundry and they already filter what you

00:37:21,609 --> 00:37:26,229
can and cannot do

00:37:22,959 --> 00:37:28,839
right so if you are not supposed to see

00:37:26,229 --> 00:37:31,420
this board you will not be able to debug

00:37:28,839 --> 00:37:34,469
it if we're talking about debugging and

00:37:31,420 --> 00:37:34,469
I hope that that's what you talk about

00:37:37,979 --> 00:37:43,689
so sometimes we can see the problem in

00:37:40,989 --> 00:37:45,759
the production so I want to debug it so

00:37:43,689 --> 00:37:47,799
as I said if you cannot get there you

00:37:45,759 --> 00:37:49,599
can see that you can debug it will be

00:37:47,799 --> 00:37:52,689
also doing it I said with these filters

00:37:49,599 --> 00:37:54,670
is that once we getting the arrow you

00:37:52,689 --> 00:37:56,679
wanted to send we just creating a shadow

00:37:54,670 --> 00:37:58,420
request that's basically not affecting

00:37:56,679 --> 00:38:00,369
the cluster it's like imagine that we're

00:37:58,420 --> 00:38:01,809
doing a snapshot there okay so it's not

00:38:00,369 --> 00:38:03,819
influence your environment environment

00:38:01,809 --> 00:38:05,859
continue running but what we're doing is

00:38:03,819 --> 00:38:07,179
basically forking it and then letting

00:38:05,859 --> 00:38:09,069
you debug this but we're basically

00:38:07,179 --> 00:38:11,380
giving you a snapshot of the environment

00:38:09,069 --> 00:38:15,579
so you can see it all to debug it make

00:38:11,380 --> 00:38:17,319
sense I'm not clear so you want me to

00:38:15,579 --> 00:38:22,739
you want to take it offline I don't know

00:38:17,319 --> 00:38:25,059
if you can see it yeah yeah any or no

00:38:22,739 --> 00:38:26,529
okay so go check it out I think it's

00:38:25,059 --> 00:38:28,900
really good and I said we integrate it

00:38:26,529 --> 00:38:30,819
with boundary right now seamlessly we

00:38:28,900 --> 00:38:32,019
use the co-pilot that they did and we

00:38:30,819 --> 00:38:34,109
integrate it with this so it's really

00:38:32,019 --> 00:38:36,510
clean and I hope that you like it

00:38:34,109 --> 00:38:40,789
awesome thanks

00:38:36,510 --> 00:38:40,789

YouTube URL: https://www.youtube.com/watch?v=mjxE9Rb6JDU


