Title: Cloud Foundry and Kubernetes - Will It Blend? - Bernd Krannich, Cornelia Davis, Meaghan Kjelland
Publication date: 2018-04-21
Playlist: Cloud Foundry Summit NA 2018
Description: 
	Cloud Foundry and Kubernetes - Will It Blend? - Bernd Krannich, SAP, Cornelia Davis, Pivotal, Meaghan Kjelland, Google, Gabe Monroy, Microsoft, Simon Moser, IBM, & Jeff Hobbs, SUSE

"Cloud Foundry Container Runtime (CF CR) based on Kubernetes as an additional component next to Cloud Foundry Application Runtime (CF AR) is the latest addition to the Cloud Foundry ecosystem. All major players in the Cloud Foundry ecosystem — the employers of our panellists included — have already adopted CF CR and are working on adopting CF CR or are major contributors to the Kubernetes ecosystem. In this round, we want to discuss the vision these companies have for the future of the two runtimes in terms of integrating them but also for developers using the opportunities both runtimes bring to the table when it comes to developing and operating solutions that span both. 

About Cornelia Davis
Cornelia Davis is Sr. Director of Technology at Pivotal, where she works on the technology strategy for both Pivotal and for Pivotal customers. Through engagement across Pivotal’s broad customer base, Cornelia develops core cloud platform strategies that drive significant change in enterprise organizations, and influence the Pivotal Cloud Foundry evolution. Currently she is working on ways to bring the various cloud-computing models of Infrastructure as a Service, Application as a Service, Container as a Service and Function as a Service together into a comprehensive offering that allows IT organizations to function at the highest levels. She is the author of the book “Cloud Native: Designing Change-tolerant Software” by Manning Publications (https://www.manning.com/books/cloud-native).

An industry veteran with almost three decades of experience in image processing, scientific visualization, distributed systems and web application architectures, and cloud-native platforms, Cornelia holds the B.S. and M.S. in Computer Science from California State University, Northridge and further studied theory of computing and programming languages at Indiana University.

When not doing those things you can find her on the yoga mat or in the kitchen. 

About Jeff Hobbs
Jeff Hobbs leads the Cloud Application Platform team at SUSE. He has been involved with Cloud Foundry since it was open sourced, as the driver behind Stackato, the first enterprise Cloud Foundry distribution. He works to foster innovation and modern development ideas for enterprise environments.

About Meaghan Kjelland
Meaghan is a Software Engineer at Google working on making Cloud Foundry work well on Google Cloud Platform. She is currently working on Cloud Foundry Container Runtime. She also works on the service broker that brings Google Cloud services to applications running in the Cloud Foundry Application Runtime. 

About Bernd Krannich
Technical Lead, SAP Cloud Platform Cloud Foundry, SAP SE
Bernd works as a technical lead for Cloud Foundry at SAP. He is covering topics around the integration of Cloud Foundry into SAP's cloud platform. Therefore, his interests are cloud computing and related technologies. During his 19 years of working for SAP, Bernd has held various...

About Gabe Monroy
Gabe Monroy is the Lead PM for Containers on Microsoft Azure and represents Microsoft on the governing board of the Cloud Native Computing Foundation. Gabe was the founder and CTO of Deis, which was acquired by Microsoft in 2017. As an early contributor to Docker and Kubernetes, Gabe has deep experience with containers in production and frequently advises organizations on PaaS, distributed systems, and cloud-native architectures. 

About Simon Moser
Simon Moser has been at IBM since 2003, where he is currently the lead architect for the Cloud Foundry part of the IBM Cloud. He is interested in many aspects of clouds and distributed systems, emphasising on technologies that allow systems to manage themselves. After receiving his M.Eng., he started his career in various development roles around application servers and Business Process Management, and started his journey in Cloud Computing in 2010. Along the way, he has been chairing various program and steering committees (e.g. BPM and OASIS TOSCA), has been publishing many papers and given many talks at various international conferences. He’s listed as an inventor on a good dozen US patents, and has an adjunct lecturer appointment at University of Jena, Germany. In his spare time, he’s torturing various musical instruments.
Captions: 
	00:00:00,000 --> 00:00:05,790
okay we have a packed agenda no packed

00:00:02,909 --> 00:00:07,170
panel with 25 minutes so one question

00:00:05,790 --> 00:00:12,120
each and no questions from the audience

00:00:07,170 --> 00:00:14,450
right so the title is will it blend

00:00:12,120 --> 00:00:17,640
plot foundry and kubernetes not an

00:00:14,450 --> 00:00:20,550
interesting topic at all given how full

00:00:17,640 --> 00:00:22,529
the room is at the end of the day last

00:00:20,550 --> 00:00:24,810
session of a long day first day a long

00:00:22,529 --> 00:00:27,619
day so let me quickly just read through

00:00:24,810 --> 00:00:31,500
the names and maybe one line each

00:00:27,619 --> 00:00:34,410
introduction Cornelia please start off

00:00:31,500 --> 00:00:36,899
hi everyone I am Cornelia Davis with

00:00:34,410 --> 00:00:41,460
pivotal have been with pivotal since the

00:00:36,899 --> 00:00:43,559
very beginning and I work from a

00:00:41,460 --> 00:00:45,629
technical perspective driving new

00:00:43,559 --> 00:00:47,100
products into market in the new product

00:00:45,629 --> 00:00:53,219
that I'm working on right now is pivotal

00:00:47,100 --> 00:00:55,260
container service Jeff fobb Souza and

00:00:53,219 --> 00:00:58,649
I've been working with cloud foundry

00:00:55,260 --> 00:01:02,699
since it was open sourced through active

00:00:58,649 --> 00:01:05,010
state HP and now Susan hi I'm Megan I'm

00:01:02,699 --> 00:01:06,450
a software engineer at Google up until

00:01:05,010 --> 00:01:08,340
last week I worked on a team that did

00:01:06,450 --> 00:01:10,290
integrations between Google cloud and

00:01:08,340 --> 00:01:13,229
cloud foundry and I worked on Cloud

00:01:10,290 --> 00:01:14,880
Foundry container runtime and last week

00:01:13,229 --> 00:01:17,880
I switched to the gke team so now I'm

00:01:14,880 --> 00:01:20,759
working on kubernetes so I'm uncanny

00:01:17,880 --> 00:01:24,060
from SAT cloud platform working for SP

00:01:20,759 --> 00:01:26,880
for close to 20 years meanwhile so we're

00:01:24,060 --> 00:01:28,770
working on bringing Cloud Foundry to

00:01:26,880 --> 00:01:30,950
overall SAT cloud platform and

00:01:28,770 --> 00:01:32,000
integrating kubernetes into that as well

00:01:30,950 --> 00:01:35,159
[Music]

00:01:32,000 --> 00:01:36,810
I'm Gabe and Roy I came over to

00:01:35,159 --> 00:01:38,970
Microsoft about a year ago as part of

00:01:36,810 --> 00:01:40,560
the Deus acquisition I am head of

00:01:38,970 --> 00:01:42,509
product for Azure containers including

00:01:40,560 --> 00:01:45,030
kubernetes service bunch of other stuff

00:01:42,509 --> 00:01:47,540
I also represent Microsoft on the board

00:01:45,030 --> 00:01:49,049
of the cloud native computing foundation

00:01:47,540 --> 00:01:51,630
all right

00:01:49,049 --> 00:01:53,610
and Simon Moser I'm the lead architect

00:01:51,630 --> 00:01:57,689
for the cloud foundry service on the IBM

00:01:53,610 --> 00:02:00,479
cloud been with the community for five

00:01:57,689 --> 00:02:03,240
years or so by now have both a product

00:02:00,479 --> 00:02:12,550
role as well as an contributor role in

00:02:03,240 --> 00:02:15,590
the open-source boundary condition

00:02:12,550 --> 00:02:17,720
let's kick off the panel discussion with

00:02:15,590 --> 00:02:27,860
the sufferer my smaller passion I don't

00:02:17,720 --> 00:02:30,320
know why this I will turn about them so

00:02:27,860 --> 00:02:33,010
let's kick it off with a softer question

00:02:30,320 --> 00:02:36,020
maybe a slow purple not curveballs yet

00:02:33,010 --> 00:02:37,820
what do you think I will let any of you

00:02:36,020 --> 00:02:41,900
pick the question but what do you think

00:02:37,820 --> 00:02:47,090
is the kind of integration points or the

00:02:41,900 --> 00:02:48,620
kind of potential merge points for cloud

00:02:47,090 --> 00:02:52,130
convey and kubernetes as you see today

00:02:48,620 --> 00:02:54,500
use cases maybe Megan kick us off so

00:02:52,130 --> 00:02:57,200
I've seen a couple of different projects

00:02:54,500 --> 00:02:59,180
being worked on I think one is deploying

00:02:57,200 --> 00:03:01,250
Cloud Foundry components on to

00:02:59,180 --> 00:03:03,709
kubernetes and the other would be

00:03:01,250 --> 00:03:05,090
deploying applications from Cloud

00:03:03,709 --> 00:03:06,410
Foundry on kubernetes which I saw a talk

00:03:05,090 --> 00:03:09,140
earlier today some of you might have

00:03:06,410 --> 00:03:12,590
seen I think both of those are good and

00:03:09,140 --> 00:03:14,120
probably an ideal state would be

00:03:12,590 --> 00:03:15,980
something that uses both of those so you

00:03:14,120 --> 00:03:18,410
could deploy Cloud Foundry kubernetes

00:03:15,980 --> 00:03:20,930
Cloud Foundry components onto kubernetes

00:03:18,410 --> 00:03:23,420
and then also use kubernetes as the

00:03:20,930 --> 00:03:26,680
runtime for containers something like

00:03:23,420 --> 00:03:26,680
that would probably be ideal I think

00:03:29,860 --> 00:03:35,690
yeah I'd agree that from from the point

00:03:33,830 --> 00:03:38,630
of view that that Cloud Foundry is is

00:03:35,690 --> 00:03:42,680
really more about UX and developer

00:03:38,630 --> 00:03:45,440
workflow and kubernetes can rep has come

00:03:42,680 --> 00:03:47,390
to represent a great just container

00:03:45,440 --> 00:03:52,640
management platform with a lot of extra

00:03:47,390 --> 00:03:54,620
richness that that Cloud Foundry doesn't

00:03:52,640 --> 00:03:58,780
yet always take advantage of that

00:03:54,620 --> 00:03:58,780
richness but could grow also into that

00:04:00,010 --> 00:04:06,920
all right yeah so I mean I can totally

00:04:03,170 --> 00:04:12,860
second the the stuff that has been set

00:04:06,920 --> 00:04:14,150
by both Meghan and Jeff that's exactly

00:04:12,860 --> 00:04:16,100
how we see this well right so we see

00:04:14,150 --> 00:04:18,229
kuben like from an IBM perspective we

00:04:16,100 --> 00:04:20,150
see kubernetes as an is plus which could

00:04:18,229 --> 00:04:22,820
both be an underlying layer where I

00:04:20,150 --> 00:04:23,560
found reruns top on top of like similar

00:04:22,820 --> 00:04:26,620
to any

00:04:23,560 --> 00:04:29,139
vm's today as well as a replacement for

00:04:26,620 --> 00:04:31,540
the back end or at least an alternative

00:04:29,139 --> 00:04:33,730
to the back end where applications get

00:04:31,540 --> 00:04:35,800
deployed to and that's kind of like the

00:04:33,730 --> 00:04:37,990
the vision that we were having on top of

00:04:35,800 --> 00:04:40,960
that I actually do see even more

00:04:37,990 --> 00:04:44,800
integration potential outside of that

00:04:40,960 --> 00:04:46,360
which is not so much in the in the guts

00:04:44,800 --> 00:04:49,030
of the system or in the core of the

00:04:46,360 --> 00:04:51,220
system but more around the the

00:04:49,030 --> 00:04:54,940
surroundings like having shared service

00:04:51,220 --> 00:04:59,560
catalogs having a common authorization

00:04:54,940 --> 00:05:02,470
and authentication model that level off

00:04:59,560 --> 00:05:05,260
of integration that is also certainly

00:05:02,470 --> 00:05:07,180
something that is achievable yeah I like

00:05:05,260 --> 00:05:10,810
both of the themes that you you just

00:05:07,180 --> 00:05:12,940
talked about on you refer to it as is

00:05:10,810 --> 00:05:15,150
plus and so one of the things that I

00:05:12,940 --> 00:05:18,760
usually like to point out is that

00:05:15,150 --> 00:05:21,460
kubernetes is much more of a an

00:05:18,760 --> 00:05:22,810
abstraction sitting above Aya's or

00:05:21,460 --> 00:05:25,090
sitting above virtualized or

00:05:22,810 --> 00:05:26,669
infrastructure in general it's more of

00:05:25,090 --> 00:05:29,770
an infrastructure dial-tone

00:05:26,669 --> 00:05:32,410
then it is an application dial tone

00:05:29,770 --> 00:05:34,630
which is sometimes counterintuitive

00:05:32,410 --> 00:05:37,330
because people think of containers and

00:05:34,630 --> 00:05:39,190
they think containers apps especially in

00:05:37,330 --> 00:05:43,030
this community where we've been doing

00:05:39,190 --> 00:05:44,710
apps for you know four or five years but

00:05:43,030 --> 00:05:48,550
really is more of an infrastructure

00:05:44,710 --> 00:05:51,970
abstraction and so when we think about

00:05:48,550 --> 00:05:55,479
the big a application you know when we

00:05:51,970 --> 00:05:59,500
deploy software it's not made up of just

00:05:55,479 --> 00:06:01,930
micro services that we've used the you

00:05:59,500 --> 00:06:04,120
know the application runtime to rapidly

00:06:01,930 --> 00:06:05,289
deploy and develop and have our

00:06:04,120 --> 00:06:07,660
pipelines and so on

00:06:05,289 --> 00:06:10,090
it always has integrations to other

00:06:07,660 --> 00:06:12,340
systems as well and where are those

00:06:10,090 --> 00:06:14,229
other systems running today well by and

00:06:12,340 --> 00:06:16,000
large they're running on infrastructure

00:06:14,229 --> 00:06:17,919
as a service well virtualized

00:06:16,000 --> 00:06:19,900
infrastructure most of the time

00:06:17,919 --> 00:06:22,330
virtualized I think in the enterprise is

00:06:19,900 --> 00:06:25,479
like 80% virtualized or something on

00:06:22,330 --> 00:06:28,270
average and so but there's a certain

00:06:25,479 --> 00:06:30,070
amount of pain that happens and having

00:06:28,270 --> 00:06:31,780
to go all the way down to a very low

00:06:30,070 --> 00:06:34,300
level infrastructure dial-tone

00:06:31,780 --> 00:06:35,800
and so what we can do is we can think of

00:06:34,300 --> 00:06:37,360
our software's there's

00:06:35,800 --> 00:06:39,789
parts of it that can land on the

00:06:37,360 --> 00:06:41,470
application runtime and other parts that

00:06:39,789 --> 00:06:44,919
aren't suitable for the application

00:06:41,470 --> 00:06:48,430
runtime but we can get some value add by

00:06:44,919 --> 00:06:51,940
at by putting it into a layer so one of

00:06:48,430 --> 00:06:54,190
those value ads is multi-cloud right so

00:06:51,940 --> 00:06:56,050
putting it in a layer and you know

00:06:54,190 --> 00:06:58,090
putting it against kubernetes as opposed

00:06:56,050 --> 00:07:01,419
to a very specific infrastructure as a

00:06:58,090 --> 00:07:05,800
service so you know I think one of the

00:07:01,419 --> 00:07:10,120
reasons why it's important to overtime

00:07:05,800 --> 00:07:11,800
unify the Cloud Foundry run the

00:07:10,120 --> 00:07:14,379
application runtime with the kubernetes

00:07:11,800 --> 00:07:16,930
runtime is if you think about what a

00:07:14,379 --> 00:07:18,940
pass is is it's really a set of

00:07:16,930 --> 00:07:20,830
developer abstractions guardrails

00:07:18,940 --> 00:07:23,740
they're designed to help you do the

00:07:20,830 --> 00:07:25,930
right thing right those are great until

00:07:23,740 --> 00:07:27,550
they're not right and when you hit the

00:07:25,930 --> 00:07:29,530
walls of those things the question is

00:07:27,550 --> 00:07:31,659
how far are you going to fall you know

00:07:29,530 --> 00:07:33,129
in the case of typical sort of Cloud

00:07:31,659 --> 00:07:35,590
Foundry installation you're gonna fall

00:07:33,129 --> 00:07:37,750
all the way down to is and that fall is

00:07:35,590 --> 00:07:39,940
painful right when you get down there

00:07:37,750 --> 00:07:41,529
you can't see and you know anything else

00:07:39,940 --> 00:07:43,240
you gotta get to configuration

00:07:41,529 --> 00:07:46,210
management I mean you're you're you're

00:07:43,240 --> 00:07:48,340
completely lost at that point if you're

00:07:46,210 --> 00:07:50,289
plotting your container you know your

00:07:48,340 --> 00:07:52,750
your paths on top of container

00:07:50,289 --> 00:07:55,779
orchestration and top of kubernetes

00:07:52,750 --> 00:07:57,849
specifically the fall is a lot less you

00:07:55,779 --> 00:07:59,319
know a lot easier to tolerate you fall

00:07:57,849 --> 00:08:00,520
down to kubernetes you can see

00:07:59,319 --> 00:08:02,710
everything that was deployed on

00:08:00,520 --> 00:08:04,000
kubernetes you have you know you know

00:08:02,710 --> 00:08:06,310
service discovery you know inner

00:08:04,000 --> 00:08:08,889
container communication things like

00:08:06,310 --> 00:08:11,110
service mesh you know are going to work

00:08:08,889 --> 00:08:13,240
in a uniform way and what that allows

00:08:11,110 --> 00:08:15,310
you to do is that allows you to you know

00:08:13,240 --> 00:08:17,110
take more experiments with your

00:08:15,310 --> 00:08:19,060
abstractions you can feel confident

00:08:17,110 --> 00:08:21,400
betting on the abstractions you have I

00:08:19,060 --> 00:08:23,440
mean feel confident the that you're also

00:08:21,400 --> 00:08:24,879
betting on a runtime that's going to

00:08:23,440 --> 00:08:29,830
provide you the abstractions of the

00:08:24,879 --> 00:08:32,890
future so maybe building on top of what

00:08:29,830 --> 00:08:34,899
Gabe certain and also Simon then like

00:08:32,890 --> 00:08:36,579
you know in a micro service world or in

00:08:34,899 --> 00:08:38,589
a distributed world the next question is

00:08:36,579 --> 00:08:40,899
like am I going to fall down to that

00:08:38,589 --> 00:08:43,240
layer for all of my stuff or am I like

00:08:40,899 --> 00:08:44,949
for most of the stuff staying on the

00:08:43,240 --> 00:08:47,110
Cloud Foundry platform as a service

00:08:44,949 --> 00:08:49,180
layer and then for the cases where I

00:08:47,110 --> 00:08:51,550
needed actually I fall down and

00:08:49,180 --> 00:08:53,920
like then we are at that integration

00:08:51,550 --> 00:08:56,830
level of I want to have the same

00:08:53,920 --> 00:08:58,960
authorization I want to be able to have

00:08:56,830 --> 00:09:01,899
network connectivity between stuff that

00:08:58,960 --> 00:09:03,910
is running on kubernetes natively and on

00:09:01,899 --> 00:09:06,070
Cloud Foundry I want to have policies on

00:09:03,910 --> 00:09:07,570
top that similar to how container

00:09:06,070 --> 00:09:09,880
networking is today governing

00:09:07,570 --> 00:09:12,790
communication inside Cloud Foundry I

00:09:09,880 --> 00:09:14,860
want to be able to expand that over to

00:09:12,790 --> 00:09:17,560
kubernetes clusters that are running my

00:09:14,860 --> 00:09:19,480
services for example so I think like

00:09:17,560 --> 00:09:22,779
there's a whole lot of integration

00:09:19,480 --> 00:09:25,440
points that actually even came up when

00:09:22,779 --> 00:09:27,790
like we as Cloud Foundry

00:09:25,440 --> 00:09:29,620
introduced that notion of you have Cloud

00:09:27,790 --> 00:09:32,020
Foundry application runtime and then you

00:09:29,620 --> 00:09:37,149
have Cloud Foundry container runtime /

00:09:32,020 --> 00:09:40,000
kubernetes just sitting at suit and and

00:09:37,149 --> 00:09:42,550
you know there's there's far more value

00:09:40,000 --> 00:09:45,399
in the Cloud Foundry application runtime

00:09:42,550 --> 00:09:47,320
than just the developer guardrails so

00:09:45,399 --> 00:09:50,350
for example the fact that the

00:09:47,320 --> 00:09:52,930
application runtime takes care of

00:09:50,350 --> 00:09:56,020
building the container for you isn't

00:09:52,930 --> 00:09:57,550
just a developer convenience that you

00:09:56,020 --> 00:09:58,690
don't have to build your own pipelines

00:09:57,550 --> 00:10:00,970
because you know we can build our own

00:09:58,690 --> 00:10:04,000
pipelines it's the fact that the

00:10:00,970 --> 00:10:06,430
application runtime can now take it

00:10:04,000 --> 00:10:09,940
takes responsibility for the building

00:10:06,430 --> 00:10:12,250
and maintenance of that container and so

00:10:09,940 --> 00:10:15,190
if there's a vulnerability in the JDK

00:10:12,250 --> 00:10:17,470
the build pack takes care of that for

00:10:15,190 --> 00:10:20,020
you you don't have to go in and figure

00:10:17,470 --> 00:10:22,270
out oh where is that vulnerability of

00:10:20,020 --> 00:10:23,950
the JDK to some extent you're back to

00:10:22,270 --> 00:10:26,140
configuration management if you've done

00:10:23,950 --> 00:10:27,670
those containers yourself and are

00:10:26,140 --> 00:10:30,610
deploying them onto something like

00:10:27,670 --> 00:10:32,170
kubernetes directly so there's this is

00:10:30,610 --> 00:10:34,900
one of the areas that I think we as a

00:10:32,170 --> 00:10:37,870
community need to finesse and really

00:10:34,900 --> 00:10:40,450
need to understand truly what are all of

00:10:37,870 --> 00:10:42,400
the value adds that the application

00:10:40,450 --> 00:10:45,300
runtime gives because what I just

00:10:42,400 --> 00:10:49,839
described is a much stronger security

00:10:45,300 --> 00:10:52,350
posture then we have in the container

00:10:49,839 --> 00:10:52,350
runtime

00:10:57,649 --> 00:11:02,939
that's a good point from a security

00:11:01,410 --> 00:11:06,470
perspective as well and also kind of

00:11:02,939 --> 00:11:09,689
separating out the abstraction layers

00:11:06,470 --> 00:11:12,199
kind of going on to the application

00:11:09,689 --> 00:11:14,220
runtime I know cornelia you've worked on

00:11:12,199 --> 00:11:17,069
application runtime and now and pivotal

00:11:14,220 --> 00:11:19,170
container services for a while how can

00:11:17,069 --> 00:11:20,970
you tell us I know you touched upon that

00:11:19,170 --> 00:11:22,920
a little bit that it's more than a

00:11:20,970 --> 00:11:27,149
developer guardrail but how is it

00:11:22,920 --> 00:11:30,860
application run to the how is Diego and

00:11:27,149 --> 00:11:33,689
application runtime kind of different or

00:11:30,860 --> 00:11:36,119
adding value when compared to the

00:11:33,689 --> 00:11:37,709
kubernetes orchestration system yes so

00:11:36,119 --> 00:11:39,059
the first thing I'm gonna answer a

00:11:37,709 --> 00:11:40,889
slightly different question first

00:11:39,059 --> 00:11:42,480
because I think it's it's very much

00:11:40,889 --> 00:11:46,470
related to the question that you asked

00:11:42,480 --> 00:11:47,999
which is you know frankly sometimes

00:11:46,470 --> 00:11:50,699
people will say well are you gonna

00:11:47,999 --> 00:11:55,079
replace Diego with kubernetes and my

00:11:50,699 --> 00:11:58,529
answer is to what end because we've had

00:11:55,079 --> 00:12:02,329
Diego and before that somebody remind me

00:11:58,529 --> 00:12:06,869
I'm having a brain da this yes thank you

00:12:02,329 --> 00:12:08,970
before that we've had exactly the

00:12:06,869 --> 00:12:11,699
patterns that are that exist in

00:12:08,970 --> 00:12:14,429
kubernetes this declarative in a

00:12:11,699 --> 00:12:17,069
declarative actual state versus desired

00:12:14,429 --> 00:12:19,649
state in control loop that's constantly

00:12:17,069 --> 00:12:22,049
bringing things into convergence and all

00:12:19,649 --> 00:12:24,480
of that stuff has been in the

00:12:22,049 --> 00:12:30,379
application runtime for four or five

00:12:24,480 --> 00:12:33,809
years it's been there all along and and

00:12:30,379 --> 00:12:35,970
what's interesting is that we've and the

00:12:33,809 --> 00:12:38,459
reason I say to what end is that if we

00:12:35,970 --> 00:12:39,899
replaced Diego with kubernetes how would

00:12:38,459 --> 00:12:44,129
that change your experience with the

00:12:39,899 --> 00:12:46,230
application runtime goose egg not at all

00:12:44,129 --> 00:12:48,179
because that's not it's been an

00:12:46,230 --> 00:12:50,699
implementation detail under the covers

00:12:48,179 --> 00:12:53,399
it really doesn't matter you're

00:12:50,699 --> 00:12:55,829
interacting with apps you're providing

00:12:53,399 --> 00:13:00,089
your job your jar file or you know your

00:12:55,829 --> 00:13:01,889
your tarball or whatever so you know

00:13:00,089 --> 00:13:04,230
that's one thing but though the

00:13:01,889 --> 00:13:05,790
interesting and the part that I wanted

00:13:04,230 --> 00:13:07,799
to add on to that that you didn't ask

00:13:05,790 --> 00:13:09,770
directly is the thing that I like about

00:13:07,799 --> 00:13:12,590
kubernetes is

00:13:09,770 --> 00:13:15,230
four years ago we were teaching people

00:13:12,590 --> 00:13:18,140
about declarative models actual state

00:13:15,230 --> 00:13:21,770
versus desired state and now with this

00:13:18,140 --> 00:13:23,300
huge energy around the kubernetes

00:13:21,770 --> 00:13:24,260
community we don't have to teach that

00:13:23,300 --> 00:13:26,840
anymore

00:13:24,260 --> 00:13:28,850
people are getting that and so that

00:13:26,840 --> 00:13:32,600
gives us maybe the bandwidth to do

00:13:28,850 --> 00:13:34,790
creative things around maybe it's less

00:13:32,600 --> 00:13:37,820
that we bring kubernetes to d egg you

00:13:34,790 --> 00:13:40,460
know replace kubernetes at diego with

00:13:37,820 --> 00:13:42,230
kubernetes and more it gives us the

00:13:40,460 --> 00:13:44,060
bandwidth to start thinking creatively

00:13:42,230 --> 00:13:47,300
about how we bring some of the services

00:13:44,060 --> 00:13:49,040
that are in has over into what doesn't

00:13:47,300 --> 00:13:52,340
what does an app abstract should look

00:13:49,040 --> 00:13:54,110
like on top of kubernetes so you'll one

00:13:52,340 --> 00:13:55,820
of the things I just want to sort of

00:13:54,110 --> 00:13:59,290
disagree on is you know at this point

00:13:55,820 --> 00:14:03,050
about you know the you know what do you

00:13:59,290 --> 00:14:05,060
get by replacing kubernetes from a

00:14:03,050 --> 00:14:07,250
runtime standpoint you get zero well

00:14:05,060 --> 00:14:10,640
from the standpoint of just purely

00:14:07,250 --> 00:14:13,370
deploying an application yes agreed but

00:14:10,640 --> 00:14:15,470
the past present and future of I t's

00:14:13,370 --> 00:14:16,760
heterogeneous right there's lots of

00:14:15,470 --> 00:14:19,790
different systems that we have to

00:14:16,760 --> 00:14:21,770
interact with and with the consolidation

00:14:19,790 --> 00:14:23,570
around kubernetes a sort of this de

00:14:21,770 --> 00:14:24,860
facto orchestration layer where you're

00:14:23,570 --> 00:14:27,080
gonna have all these different things

00:14:24,860 --> 00:14:28,910
and frankly lots of different types of

00:14:27,080 --> 00:14:30,230
passes right we think about 12 factor

00:14:28,910 --> 00:14:33,020
paths and you know the Cloud Foundry

00:14:30,230 --> 00:14:35,450
application runtime is just the gold

00:14:33,020 --> 00:14:37,880
standard right we need that the industry

00:14:35,450 --> 00:14:38,990
the world needs that to exist but

00:14:37,880 --> 00:14:40,550
there's also going to be passes

00:14:38,990 --> 00:14:42,320
developed for you know folks who are

00:14:40,550 --> 00:14:43,940
doing your data science with tensorflow

00:14:42,320 --> 00:14:45,440
right running on top of kubernetes right

00:14:43,940 --> 00:14:47,630
and that's gonna need to interact with

00:14:45,440 --> 00:14:48,830
you know the video rendering stuff

00:14:47,630 --> 00:14:50,260
that's happening and the facial

00:14:48,830 --> 00:14:52,790
recognition stuff that's happening all

00:14:50,260 --> 00:14:56,090
ideally on the same compute substrate so

00:14:52,790 --> 00:14:57,920
you know the you know for me I think

00:14:56,090 --> 00:14:59,900
about this as you know commoditization

00:14:57,920 --> 00:15:02,060
that's happening in the industry from

00:14:59,900 --> 00:15:04,700
the bottom up and though feature

00:15:02,060 --> 00:15:07,460
functionality standpoint of you know the

00:15:04,700 --> 00:15:09,940
CFAR doesn't change directly it's that

00:15:07,460 --> 00:15:12,290
interaction with the rest of the stuff

00:15:09,940 --> 00:15:13,460
where you actually get the value at it

00:15:12,290 --> 00:15:16,670
and i would view that as part of the

00:15:13,460 --> 00:15:18,740
overall user experience yeah I'm totally

00:15:16,670 --> 00:15:20,570
gonna I'm totally gonna echo echo that

00:15:18,740 --> 00:15:22,520
what what what Gabe has been saying um

00:15:20,570 --> 00:15:23,130
so from a developer like it depending on

00:15:22,520 --> 00:15:25,500
when you

00:15:23,130 --> 00:15:27,870
what's the value add it really is a

00:15:25,500 --> 00:15:30,240
question on on the road from a developer

00:15:27,870 --> 00:15:33,840
perspective it's the I want to be able

00:15:30,240 --> 00:15:36,840
to build you know mix and match on a

00:15:33,840 --> 00:15:39,090
given infrastructure applications that

00:15:36,840 --> 00:15:41,550
have been built in a 12 facto fashion

00:15:39,090 --> 00:15:44,130
with an easy developer experience

00:15:41,550 --> 00:15:46,200
alongside with maybe some stateful stuff

00:15:44,130 --> 00:15:47,490
that I have as a legacy application I

00:15:46,200 --> 00:15:49,740
want to have the same experience like

00:15:47,490 --> 00:15:51,960
like like you said earlier game the

00:15:49,740 --> 00:15:53,580
fallback is exactly down to that level

00:15:51,960 --> 00:15:56,370
and not deeper right that's that's how

00:15:53,580 --> 00:15:58,080
it should be one aspect that you didn't

00:15:56,370 --> 00:16:00,180
have John that hasn't been touched on

00:15:58,080 --> 00:16:03,120
this discussion yet is also the operator

00:16:00,180 --> 00:16:05,520
experience which hasn't been in touch

00:16:03,120 --> 00:16:08,580
and I think this is where yet another

00:16:05,520 --> 00:16:12,240
big value would come in when we are

00:16:08,580 --> 00:16:14,100
talking about replacing or at least

00:16:12,240 --> 00:16:18,300
offering communities as an alternative

00:16:14,100 --> 00:16:20,910
back-end to to Diego because many of the

00:16:18,300 --> 00:16:23,130
companies out there from an IIST level

00:16:20,910 --> 00:16:24,870
are standardizing on kubernetes today I

00:16:23,130 --> 00:16:29,760
think we can agree on that that's just a

00:16:24,870 --> 00:16:32,340
fact of the market that being said is if

00:16:29,760 --> 00:16:34,800
I start training an IT department

00:16:32,340 --> 00:16:36,750
running these kind of things and now I

00:16:34,800 --> 00:16:38,640
want to have an a development department

00:16:36,750 --> 00:16:42,120
in the same organization in the same

00:16:38,640 --> 00:16:44,460
company moving in and then now they have

00:16:42,120 --> 00:16:46,920
to manage and wholly different a wholly

00:16:44,460 --> 00:16:48,510
different stack that's just yet another

00:16:46,920 --> 00:16:51,000
investment yet another learning

00:16:48,510 --> 00:16:53,190
experience that I have to make and grant

00:16:51,000 --> 00:16:55,380
it for like if everything is based on

00:16:53,190 --> 00:16:57,420
Bosch and for some of the you know open

00:16:55,380 --> 00:16:59,070
source stuff that is to true statement

00:16:57,420 --> 00:17:01,680
so maybe that learning curve is not that

00:16:59,070 --> 00:17:03,240
steep but truth of the matter is many

00:17:01,680 --> 00:17:05,190
companies out there have stuff where

00:17:03,240 --> 00:17:08,070
they run their container and have not on

00:17:05,190 --> 00:17:09,840
Bosh right it's also reality and all of

00:17:08,070 --> 00:17:12,960
the sudden ones you once you get into

00:17:09,840 --> 00:17:14,910
that state all of a sudden you have two

00:17:12,960 --> 00:17:18,950
learning experiences to learning curves

00:17:14,910 --> 00:17:22,830
and that is when my push comes to shove

00:17:18,950 --> 00:17:25,200
really makes the you know some companies

00:17:22,830 --> 00:17:26,880
go the path of not deciding that that

00:17:25,200 --> 00:17:28,680
productivity the developer productivity

00:17:26,880 --> 00:17:30,240
is the most important thing but their

00:17:28,680 --> 00:17:30,900
operational model is still the most

00:17:30,240 --> 00:17:32,820
important thing

00:17:30,900 --> 00:17:34,500
and that'll is kind of like a death

00:17:32,820 --> 00:17:36,140
sentence for Cloud Foundry unless we

00:17:34,500 --> 00:17:39,860
start blending on that

00:17:36,140 --> 00:17:43,430
level as well I mean I'd agree with that

00:17:39,860 --> 00:17:45,680
though I the support the Cornelius point

00:17:43,430 --> 00:17:49,070
yes it does nothing to the developer

00:17:45,680 --> 00:17:51,950
experience that's actually a value-add

00:17:49,070 --> 00:17:53,690
of the Cloud Foundry experience that you

00:17:51,950 --> 00:17:56,920
can still have that entire level of

00:17:53,690 --> 00:18:00,710
richness while replacing what is

00:17:56,920 --> 00:18:03,620
practically the heart of of the the

00:18:00,710 --> 00:18:05,480
platform that that exists there but it's

00:18:03,620 --> 00:18:07,780
always behind the covers now we could

00:18:05,480 --> 00:18:10,430
put kubernetes behind the covers and and

00:18:07,780 --> 00:18:13,820
that's great too the overall

00:18:10,430 --> 00:18:16,820
architecture and it another aspect

00:18:13,820 --> 00:18:19,850
though of yes it also helps the operator

00:18:16,820 --> 00:18:22,160
experience one of the other things that

00:18:19,850 --> 00:18:26,270
you you can potentially assist with

00:18:22,160 --> 00:18:28,700
there is the resource utilization if you

00:18:26,270 --> 00:18:31,310
are running these things you can you

00:18:28,700 --> 00:18:33,560
don't have to have overweight Diego

00:18:31,310 --> 00:18:35,660
cells taking up space while you already

00:18:33,560 --> 00:18:42,470
have a kubernetes substrate that could

00:18:35,660 --> 00:18:43,940
be directly layered onto and I key into

00:18:42,470 --> 00:18:47,630
soo I have a talk

00:18:43,940 --> 00:18:49,040
next month already at OpenStack where

00:18:47,630 --> 00:18:50,900
I'll talk about well what does it look

00:18:49,040 --> 00:18:53,810
like when you run a containerized cloud

00:18:50,900 --> 00:18:56,420
foundry versus a classic VM cloud

00:18:53,810 --> 00:18:58,820
foundry and you know people say I was

00:18:56,420 --> 00:19:00,530
cheating a bit because my kubernetes

00:18:58,820 --> 00:19:03,170
Cloud Foundry happens to run on bare

00:19:00,530 --> 00:19:04,970
metal I've taken an entire layer of

00:19:03,170 --> 00:19:08,270
virtualization out that's not cheating

00:19:04,970 --> 00:19:10,790
that's the new operator experience that

00:19:08,270 --> 00:19:12,620
some companies are looking for when

00:19:10,790 --> 00:19:14,320
they're doing kubernetes they're like

00:19:12,620 --> 00:19:17,030
hey I'm gonna run this in a bare-metal

00:19:14,320 --> 00:19:19,310
commoditized hardware and I know how to

00:19:17,030 --> 00:19:21,380
manage all that so I want to just layer

00:19:19,310 --> 00:19:23,000
directly on top of that to get the

00:19:21,380 --> 00:19:26,330
highest performance out of my bare metal

00:19:23,000 --> 00:19:29,060
possible and when we can put just that

00:19:26,330 --> 00:19:30,860
again a thinner layer that it gives you

00:19:29,060 --> 00:19:33,410
the entire cloud foundry experience on

00:19:30,860 --> 00:19:35,860
that bare metal then that's another

00:19:33,410 --> 00:19:35,860
value

00:19:38,559 --> 00:19:45,770
so let me ask you probably start with

00:19:43,040 --> 00:19:48,050
burn is that even the right question

00:19:45,770 --> 00:19:50,330
since you pick the panel topic I will go

00:19:48,050 --> 00:19:52,429
and you first will it blend is that even

00:19:50,330 --> 00:19:54,500
the right question if not why not in

00:19:52,429 --> 00:19:57,429
itself why do you think it is I mean I

00:19:54,500 --> 00:20:00,080
kind of provocatively picked that

00:19:57,429 --> 00:20:03,260
metaphor like for those of you who don't

00:20:00,080 --> 00:20:05,690
know there is this youtube series to put

00:20:03,260 --> 00:20:08,050
all kinds of strange things in a blender

00:20:05,690 --> 00:20:11,780
press the button and see what comes out

00:20:08,050 --> 00:20:13,460
- Paula - to us like what will it blend

00:20:11,780 --> 00:20:15,620
better than an iPhone I would say yes

00:20:13,460 --> 00:20:18,200
because the result of blending an iPhone

00:20:15,620 --> 00:20:21,710
is just like a pile of ashes and smoke

00:20:18,200 --> 00:20:24,290
so I hope yes it will blend and what the

00:20:21,710 --> 00:20:26,630
result is hopefully is is like a much

00:20:24,290 --> 00:20:28,940
nicer experience for both communities

00:20:26,630 --> 00:20:31,760
ultimately so like for the Cloud Foundry

00:20:28,940 --> 00:20:35,420
community this like you don't need to

00:20:31,760 --> 00:20:37,790
fall down to the IaaS layer to do things

00:20:35,420 --> 00:20:40,520
and for the kubernetes community this

00:20:37,790 --> 00:20:42,410
notion of no it's not all about cue

00:20:40,520 --> 00:20:44,300
control and then a bunch of yama files

00:20:42,410 --> 00:20:46,850
and like it's your own container you

00:20:44,300 --> 00:20:50,420
have to do the security yourself etc etc

00:20:46,850 --> 00:20:52,190
but there is value add in saying here is

00:20:50,420 --> 00:20:53,929
my code run it in the cloud for me I

00:20:52,190 --> 00:20:56,690
don't care how and I believe like many

00:20:53,929 --> 00:20:59,059
people in the kubernetes community also

00:20:56,690 --> 00:21:03,980
see that as as a goal that's worthwhile

00:20:59,059 --> 00:21:06,350
pursuing on pair kubernetes essentially

00:21:03,980 --> 00:21:08,780
and bringing over Cloud Foundry is one

00:21:06,350 --> 00:21:10,580
important ingredient because that's like

00:21:08,780 --> 00:21:12,710
mixing the defect or platform

00:21:10,580 --> 00:21:15,860
as-a-service standard with it effect oh

00:21:12,710 --> 00:21:18,620
and now we can like talk about the

00:21:15,860 --> 00:21:25,130
terminology but like one layer above the

00:21:18,620 --> 00:21:27,890
plain infrastructure level standard I

00:21:25,130 --> 00:21:30,230
mean if you look at even like the talk

00:21:27,890 --> 00:21:32,030
sessions and topics that we've had at

00:21:30,230 --> 00:21:34,070
this summit I feel like there is a lot

00:21:32,030 --> 00:21:36,740
of interest in using both cloud foundry

00:21:34,070 --> 00:21:39,620
and kubernetes and so if we can make it

00:21:36,740 --> 00:21:41,330
easier for people to learn both tools or

00:21:39,620 --> 00:21:43,670
even make them almost seem like one tool

00:21:41,330 --> 00:21:45,590
I think there is benefit in that just in

00:21:43,670 --> 00:21:50,600
like overhead of learning multiple

00:21:45,590 --> 00:21:52,730
platforms yeah the

00:21:50,600 --> 00:21:55,970
not concerned in taking the the will it

00:21:52,730 --> 00:21:58,429
blend idea a little further it will

00:21:55,970 --> 00:22:01,490
blend but you know sometimes there's

00:21:58,429 --> 00:22:03,830
more or less success in that and I think

00:22:01,490 --> 00:22:05,570
that I mean working with some of the

00:22:03,830 --> 00:22:08,090
people here on trying to make it blend

00:22:05,570 --> 00:22:11,120
we don't know what kind of bitter brew

00:22:08,090 --> 00:22:12,980
it might taste like in the end there's

00:22:11,120 --> 00:22:16,820
emulation of a lot of things that are

00:22:12,980 --> 00:22:18,289
being done right now but it's going to

00:22:16,820 --> 00:22:20,299
get we're going to get over the initial

00:22:18,289 --> 00:22:22,370
hump and some of the great demos that

00:22:20,299 --> 00:22:24,230
we've seen that are prototypes once they

00:22:22,370 --> 00:22:25,610
reach maturity then you're going to

00:22:24,230 --> 00:22:29,450
start looking at some of the more

00:22:25,610 --> 00:22:33,710
interesting areas like do these network

00:22:29,450 --> 00:22:36,289
security models really mesh well or am I

00:22:33,710 --> 00:22:39,740
actually going to have to ask a question

00:22:36,289 --> 00:22:41,600
will I have to modify the CF API to get

00:22:39,740 --> 00:22:44,240
best use out of this particular

00:22:41,600 --> 00:22:47,240
kubernetes feature and where is the

00:22:44,240 --> 00:22:48,940
community going to push because the

00:22:47,240 --> 00:22:52,340
stuff that we've been talking about it's

00:22:48,940 --> 00:22:55,340
it's blending in in a computer ly

00:22:52,340 --> 00:22:57,440
optional sense you can deploy VM still

00:22:55,340 --> 00:22:59,090
or you can deploy on kubernetes those

00:22:57,440 --> 00:23:02,270
options both exist

00:22:59,090 --> 00:23:05,500
we saw the also deploying without Diego

00:23:02,270 --> 00:23:07,850
directly on and that will be an option

00:23:05,500 --> 00:23:11,390
what's going to happen when we bring the

00:23:07,850 --> 00:23:14,240
first really awesome feature but it

00:23:11,390 --> 00:23:16,960
binds you to kubernetes that's going to

00:23:14,240 --> 00:23:19,700
that's going to be the interesting port

00:23:16,960 --> 00:23:21,740
yeah but I mean just just to add to that

00:23:19,700 --> 00:23:23,720
I mean this may be maybe a question to

00:23:21,740 --> 00:23:27,559
the audience actually from a so this for

00:23:23,720 --> 00:23:29,480
me is one of the things that we haven't

00:23:27,559 --> 00:23:32,630
really talked about it is that what is

00:23:29,480 --> 00:23:34,880
the role that particular aspects of that

00:23:32,630 --> 00:23:37,280
planning are are addressed with like

00:23:34,880 --> 00:23:39,580
when you think about I would like to do

00:23:37,280 --> 00:23:42,919
a show of hands like who thinks that

00:23:39,580 --> 00:23:44,780
coops ETL or doing anything with coops

00:23:42,919 --> 00:23:46,070
ETL today is actually a great developer

00:23:44,780 --> 00:23:47,419
experience is there anyone in the room

00:23:46,070 --> 00:23:52,190
who actually thinks like that I would

00:23:47,419 --> 00:23:54,190
like to learn about that alright cool so

00:23:52,190 --> 00:23:57,120
we office

00:23:54,190 --> 00:24:01,840
[Laughter]

00:23:57,120 --> 00:24:02,410
I actually prefer I happen to be at that

00:24:01,840 --> 00:24:04,780
conference

00:24:02,410 --> 00:24:08,020
um and I can tell you I can tell you

00:24:04,780 --> 00:24:10,180
what's interesting is that the meme at

00:24:08,020 --> 00:24:11,800
the last coupe con was that kubernetes

00:24:10,180 --> 00:24:13,780
is too hard to use for developers

00:24:11,800 --> 00:24:15,580
that's actually why this is so important

00:24:13,780 --> 00:24:17,080
is because you have these two

00:24:15,580 --> 00:24:19,360
communities that were kind of spinning

00:24:17,080 --> 00:24:21,280
off one of them just absolutely nailing

00:24:19,360 --> 00:24:22,600
the developer experience and one of them

00:24:21,280 --> 00:24:24,310
I would argue absolutely nailing the

00:24:22,600 --> 00:24:26,590
operations and sort of a lower-level

00:24:24,310 --> 00:24:29,200
experience and sort of two different

00:24:26,590 --> 00:24:31,420
niches but really honestly the perfect

00:24:29,200 --> 00:24:32,800
potential marriage and so that's why I

00:24:31,420 --> 00:24:35,500
feel so passionate about this is because

00:24:32,800 --> 00:24:37,450
you know I've built past systems in my

00:24:35,500 --> 00:24:39,070
career I know you know I've lived these

00:24:37,450 --> 00:24:41,020
abstractions I've seen people have to

00:24:39,070 --> 00:24:43,420
break out of them I want nothing more

00:24:41,020 --> 00:24:46,300
than to see the CF application run time

00:24:43,420 --> 00:24:47,710
running natively on kubernetes you know

00:24:46,300 --> 00:24:49,150
you know one other thing that was

00:24:47,710 --> 00:24:51,370
brought up I just want to want to point

00:24:49,150 --> 00:24:53,610
out is you know when you get the

00:24:51,370 --> 00:24:55,960
commoditization at the kubernetes layer

00:24:53,610 --> 00:24:57,910
there's something else that's happening

00:24:55,960 --> 00:24:59,860
and I know because I'm you know part of

00:24:57,910 --> 00:25:02,320
part of this over at Azure but you know

00:24:59,860 --> 00:25:05,710
the type of things that we're doing to

00:25:02,320 --> 00:25:09,580
make kubernetes operable at hyper scale

00:25:05,710 --> 00:25:12,730
is pretty intense right there's some

00:25:09,580 --> 00:25:15,220
deep deep engineering going on I know at

00:25:12,730 --> 00:25:18,190
a sure I know at Google as well you know

00:25:15,220 --> 00:25:20,620
to make kubernetes you know run you know

00:25:18,190 --> 00:25:23,680
amazingly right and one of the reasons

00:25:20,620 --> 00:25:25,750
why is because you know in you know I

00:25:23,680 --> 00:25:27,640
think a really smart move when the CNC F

00:25:25,750 --> 00:25:30,040
came out with a conformance program for

00:25:27,640 --> 00:25:31,240
kubernetes unlike some other you know

00:25:30,040 --> 00:25:34,330
conformance programs they made it

00:25:31,240 --> 00:25:36,670
semantic which means that you know when

00:25:34,330 --> 00:25:39,130
you test the kubernetes cluster it's you

00:25:36,670 --> 00:25:41,620
know if the API looks like kubernetes

00:25:39,130 --> 00:25:43,090
speaks like kubernetes it is kubernetes

00:25:41,620 --> 00:25:44,880
and it is going to be deemed kubernetes

00:25:43,090 --> 00:25:47,290
so you can use the trademark right

00:25:44,880 --> 00:25:49,930
versus saying you have to be shipping

00:25:47,290 --> 00:25:51,910
the exact bits now what that means is

00:25:49,930 --> 00:25:54,400
that you know you get to do things like

00:25:51,910 --> 00:25:57,940
you know optimize you know what the

00:25:54,400 --> 00:25:59,830
kubernetes bits actually are so we're

00:25:57,940 --> 00:26:01,150
actually experimenting with serverless

00:25:59,830 --> 00:26:03,190
containers things like add your

00:26:01,150 --> 00:26:05,050
container instances which are you know

00:26:03,190 --> 00:26:07,130
hypervisor wrap sort of cloud provider

00:26:05,050 --> 00:26:09,950
container instances delivering this

00:26:07,130 --> 00:26:12,590
VM lists kubernetes experience right

00:26:09,950 --> 00:26:15,350
imagine a world where you could just

00:26:12,590 --> 00:26:17,750
press a button get a kubernetes api no

00:26:15,350 --> 00:26:20,630
VMs on it and then go install the Cloud

00:26:17,750 --> 00:26:22,190
Foundry application runtime and go you

00:26:20,630 --> 00:26:24,290
know digitally transform your enterprise

00:26:22,190 --> 00:26:25,970
I mean that's a future I'd love to sign

00:26:24,290 --> 00:26:28,910
up for and I think a lot of other folks

00:26:25,970 --> 00:26:30,230
I've talked to feel the same way I love

00:26:28,910 --> 00:26:32,000
how you pointed out that it's all about

00:26:30,230 --> 00:26:33,740
the contract it's not about the

00:26:32,000 --> 00:26:37,280
implementation it's about the contract

00:26:33,740 --> 00:26:39,440
and you're right it's it's not a it's

00:26:37,280 --> 00:26:41,000
the kubernetes implementation is great

00:26:39,440 --> 00:26:43,430
and it's the open source and is getting

00:26:41,000 --> 00:26:46,160
a lot of innovation from a very broad

00:26:43,430 --> 00:26:47,840
community and we know from the last ten

00:26:46,160 --> 00:26:50,360
years of experience that open source

00:26:47,840 --> 00:26:55,280
projects with engagement yield really

00:26:50,360 --> 00:26:56,990
great results but the implementation is

00:26:55,280 --> 00:26:59,360
actually secondary it's the contracts

00:26:56,990 --> 00:27:01,550
and when we have those contracts as we

00:26:59,360 --> 00:27:03,860
as some of you were arguing very very

00:27:01,550 --> 00:27:06,140
well earlier some of those contracts are

00:27:03,860 --> 00:27:08,180
contracts that even go to the

00:27:06,140 --> 00:27:09,770
operability in the management and all of

00:27:08,180 --> 00:27:12,620
those types of things and having that

00:27:09,770 --> 00:27:15,500
standardized layer is great the other

00:27:12,620 --> 00:27:18,470
thing that I would add is that you also

00:27:15,500 --> 00:27:21,350
touched upon it as well which is nailing

00:27:18,470 --> 00:27:23,530
the developer experience which is that

00:27:21,350 --> 00:27:26,030
kubernetes has so many knobs and dials

00:27:23,530 --> 00:27:28,580
even though it's an up leveling of AI as

00:27:26,030 --> 00:27:31,870
it still has maybe even arguably more

00:27:28,580 --> 00:27:34,480
knobs and dials in some ways and so

00:27:31,870 --> 00:27:37,310
coming up with what the right

00:27:34,480 --> 00:27:39,050
opinionated and not necessarily all the

00:27:37,310 --> 00:27:41,540
way up to the application developer

00:27:39,050 --> 00:27:44,390
experience but all of these other passes

00:27:41,540 --> 00:27:46,970
what are the right abstractions what are

00:27:44,390 --> 00:27:50,720
the right simplifications that will take

00:27:46,970 --> 00:27:53,810
it to being consumable by the developer

00:27:50,720 --> 00:27:57,760
or whoever the user is that wants to use

00:27:53,810 --> 00:28:00,740
the layer above it that's the fun work I

00:27:57,760 --> 00:28:06,440
wish I could keep going but we are

00:28:00,740 --> 00:28:08,510
already one minute over one question

00:28:06,440 --> 00:28:11,050
from the audience I don't know until we

00:28:08,510 --> 00:28:11,050
get kicked up

00:28:11,440 --> 00:28:16,289
all right audience gets one question the

00:28:13,210 --> 00:28:18,700
bar keeping me from the bar to buy

00:28:16,289 --> 00:28:23,799
that's why we audience gets one question

00:28:18,700 --> 00:28:30,240
who wants to go sorry one question

00:28:23,799 --> 00:28:30,240
anyone no questions I see him

00:28:33,270 --> 00:28:43,710
I hope I didn't waste this one question

00:28:39,060 --> 00:28:46,050
sorry audience so so Gabe you kind of

00:28:43,710 --> 00:28:49,530
talked about a great operating

00:28:46,050 --> 00:28:51,090
experience from kubernetes but I kind of

00:28:49,530 --> 00:28:52,530
feel like that that's something that I I

00:28:51,090 --> 00:28:54,660
kind of felt like that was something

00:28:52,530 --> 00:28:57,270
that the Cloud Foundry foundation was

00:28:54,660 --> 00:28:59,790
bringing to kubernetes in in that Bosch

00:28:57,270 --> 00:29:02,220
you know allows us you know a much

00:28:59,790 --> 00:29:04,560
better operational experience but can

00:29:02,220 --> 00:29:08,070
you kind of expand just a little bit you

00:29:04,560 --> 00:29:10,170
know maybe the panel even on what makes

00:29:08,070 --> 00:29:13,460
kubernetes so great to operate yeah

00:29:10,170 --> 00:29:17,040
actually uh this was this is a

00:29:13,460 --> 00:29:19,050
interesting I think the beauty here is

00:29:17,040 --> 00:29:22,440
is this idea of semantic conformance

00:29:19,050 --> 00:29:24,420
where the operations experience the best

00:29:22,440 --> 00:29:26,970
operations experience it depends on the

00:29:24,420 --> 00:29:29,280
operator right and so I was actually

00:29:26,970 --> 00:29:30,840
talking to someone and advising them

00:29:29,280 --> 00:29:33,690
because they had so much familiarity

00:29:30,840 --> 00:29:35,610
with Bosch I was advising them to go all

00:29:33,690 --> 00:29:37,770
in on the Cloud Foundry container

00:29:35,610 --> 00:29:39,450
runtime because their teams are set up

00:29:37,770 --> 00:29:40,710
to be successful with that you know

00:29:39,450 --> 00:29:41,970
their compliance regimes are all kicked

00:29:40,710 --> 00:29:44,040
in and they're like yeah but you know

00:29:41,970 --> 00:29:46,050
you're the Azure guy you're the AKS guy

00:29:44,040 --> 00:29:47,940
I'm like yeah but you know you guys are

00:29:46,050 --> 00:29:50,220
set up to win with this runtime right so

00:29:47,940 --> 00:29:54,180
III think all these answers are

00:29:50,220 --> 00:29:56,490
contextual right and you know that said

00:29:54,180 --> 00:29:58,080
you know there are some things that you

00:29:56,490 --> 00:29:59,580
know the hyper scale cloud providers are

00:29:58,080 --> 00:30:00,900
gonna be able to do in the future that I

00:29:59,580 --> 00:30:03,000
think is going to level up the

00:30:00,900 --> 00:30:05,340
operations experience and really get us

00:30:03,000 --> 00:30:07,620
to a place where you know you don't have

00:30:05,340 --> 00:30:09,900
to worry about it at all and I think the

00:30:07,620 --> 00:30:11,220
reality is that you know today you know

00:30:09,900 --> 00:30:14,700
for a lot of these systems there is

00:30:11,220 --> 00:30:16,770
still demand on operations folks even in

00:30:14,700 --> 00:30:18,210
a managed kubernetes sense and I think

00:30:16,770 --> 00:30:21,120
over time what you're gonna see is that

00:30:18,210 --> 00:30:23,100
is gonna sort of decrease but again you

00:30:21,120 --> 00:30:25,110
know I think it goes back to the context

00:30:23,100 --> 00:30:26,670
Operations experience depends on who the

00:30:25,110 --> 00:30:33,150
operators are and what they're familiar

00:30:26,670 --> 00:30:35,970
with thank you I will just would like to

00:30:33,150 --> 00:30:38,700
close this out with want each of you

00:30:35,970 --> 00:30:39,600
just giving one key takeaway or one

00:30:38,700 --> 00:30:42,260
thing that you want to leave the

00:30:39,600 --> 00:30:46,150
audience with either question or your

00:30:42,260 --> 00:30:48,760
comments anything I'll just start

00:30:46,150 --> 00:30:50,710
keep it very very brief so I like the

00:30:48,760 --> 00:30:53,200
topic thank you again for coming up with

00:30:50,710 --> 00:30:55,710
the metaphor of blending it really just

00:30:53,200 --> 00:30:58,270
all depends on what blending means and

00:30:55,710 --> 00:31:02,490
there there are ways that we can blend

00:30:58,270 --> 00:31:04,600
it today by actually just gluing things

00:31:02,490 --> 00:31:08,230
kind of side by side because there's

00:31:04,600 --> 00:31:13,270
value and then moving towards a more

00:31:08,230 --> 00:31:16,270
advanced way of blending yeah and I'd

00:31:13,270 --> 00:31:18,340
leave a comment then for the audience as

00:31:16,270 --> 00:31:21,430
well because there are a lot of efforts

00:31:18,340 --> 00:31:23,140
already going on to blend it you know

00:31:21,430 --> 00:31:26,260
we've seen here there's there's running

00:31:23,140 --> 00:31:28,090
it on kubernetes which you can try

00:31:26,260 --> 00:31:30,370
there's the disused open source project

00:31:28,090 --> 00:31:33,700
iBM has the open source project around

00:31:30,370 --> 00:31:35,020
then the Diego alternative and then

00:31:33,700 --> 00:31:38,140
there's the services project which

00:31:35,020 --> 00:31:40,300
blends beyond Oz bappy into blending the

00:31:38,140 --> 00:31:42,820
services so wherever your interest might

00:31:40,300 --> 00:31:45,490
be play in them they're all open source

00:31:42,820 --> 00:31:49,360
and they only get better through more

00:31:45,490 --> 00:31:51,010
contribution pretty excited to see all

00:31:49,360 --> 00:31:53,400
these different projects already going

00:31:51,010 --> 00:31:56,530
on for blending the two platforms in

00:31:53,400 --> 00:31:58,300
different ways and I think that's one of

00:31:56,530 --> 00:32:01,210
the benefits of having two open source

00:31:58,300 --> 00:32:03,030
communities kind of two open source

00:32:01,210 --> 00:32:05,080
projects kind of coming together because

00:32:03,030 --> 00:32:06,250
we can just try out all of these

00:32:05,080 --> 00:32:11,470
different things and see which one's

00:32:06,250 --> 00:32:15,240
work yeah so maybe two to add on on what

00:32:11,470 --> 00:32:20,170
Cornelia and just said um kind of a

00:32:15,240 --> 00:32:22,750
marketing announcement to make there so

00:32:20,170 --> 00:32:25,540
basically um chip Childers from the

00:32:22,750 --> 00:32:27,910
Cloud Foundry foundation has called to

00:32:25,540 --> 00:32:30,340
set up a regular community call around

00:32:27,910 --> 00:32:33,160
all those topics because I think so far

00:32:30,340 --> 00:32:35,620
like different members of the community

00:32:33,160 --> 00:32:37,180
have been working on different aspects

00:32:35,620 --> 00:32:39,250
of that blending and then like it

00:32:37,180 --> 00:32:41,950
depends on which companies have an

00:32:39,250 --> 00:32:43,840
interest in in which particular aspects

00:32:41,950 --> 00:32:45,640
but in order to get a better overview

00:32:43,840 --> 00:32:47,260
and also stay up to date with what's

00:32:45,640 --> 00:32:49,570
happening overall there will be a

00:32:47,260 --> 00:32:52,000
regular community call I think the first

00:32:49,570 --> 00:32:53,440
one will be scheduled and I think the

00:32:52,000 --> 00:32:55,900
announcement will go out via the cloud

00:32:53,440 --> 00:32:58,150
foundry mailing lists for April 25th so

00:32:55,900 --> 00:32:59,630
everybody who is interested in like

00:32:58,150 --> 00:33:01,430
joining the effort or even

00:32:59,630 --> 00:33:03,590
hearing what's what's going on in in

00:33:01,430 --> 00:33:05,060
more detail than what we were able to do

00:33:03,590 --> 00:33:07,100
now in 25 minutes

00:33:05,060 --> 00:33:11,360
should should actually join join those

00:33:07,100 --> 00:33:14,120
calls I'm so you know I'm obviously the

00:33:11,360 --> 00:33:16,040
kubernetes and container guy but you

00:33:14,120 --> 00:33:17,690
know coming to the conference here and

00:33:16,040 --> 00:33:20,210
you know hearing these stories and you

00:33:17,690 --> 00:33:23,120
know being witness to what Cloud Foundry

00:33:20,210 --> 00:33:25,430
has been able to do regarding digital

00:33:23,120 --> 00:33:28,460
transformation in modern enterprise is

00:33:25,430 --> 00:33:29,450
nothing short of amazing and you know

00:33:28,460 --> 00:33:31,370
I'm just

00:33:29,450 --> 00:33:34,010
you're really thankful that this project

00:33:31,370 --> 00:33:36,350
exists and is working and and things are

00:33:34,010 --> 00:33:37,820
happening so you know I just want to

00:33:36,350 --> 00:33:39,530
make sure that whatever we do with the

00:33:37,820 --> 00:33:41,750
blending here we just make sure that we

00:33:39,530 --> 00:33:44,210
don't lose sight of the goal here which

00:33:41,750 --> 00:33:48,080
is empowering people and empowering

00:33:44,210 --> 00:33:49,400
developers at modern enterprise and

00:33:48,080 --> 00:33:52,430
that's that's almost a perfect

00:33:49,400 --> 00:33:54,890
transition to what I was about to say so

00:33:52,430 --> 00:33:56,810
I mean just echoing yes the bending is

00:33:54,890 --> 00:33:59,570
going on and if you are not already part

00:33:56,810 --> 00:34:01,520
of that in some way or form you're all

00:33:59,570 --> 00:34:03,680
welcome to contribute and participate in

00:34:01,520 --> 00:34:07,190
to whatever blending you think is the

00:34:03,680 --> 00:34:10,100
right right right side of blending I

00:34:07,190 --> 00:34:14,870
would like to close with the sentence

00:34:10,100 --> 00:34:17,629
that basically says when you know the

00:34:14,870 --> 00:34:20,800
sooner we get the blending done right

00:34:17,629 --> 00:34:24,230
the faster we can actually focus on

00:34:20,800 --> 00:34:26,179
higher levels of innovation that is

00:34:24,230 --> 00:34:27,440
really really more important for the

00:34:26,179 --> 00:34:28,669
Cloud Foundry community or for the

00:34:27,440 --> 00:34:31,310
developer community that we all

00:34:28,669 --> 00:34:33,200
participate in right because when you

00:34:31,310 --> 00:34:35,120
look at the lower level like well the

00:34:33,200 --> 00:34:36,830
lower we get in the stack the more

00:34:35,120 --> 00:34:39,590
things will be getting commoditized

00:34:36,830 --> 00:34:40,940
right and that's not not a negative

00:34:39,590 --> 00:34:43,159
thing I actually think that's a positive

00:34:40,940 --> 00:34:46,190
thing that this is happening but the

00:34:43,159 --> 00:34:48,290
value that we as a community will give

00:34:46,190 --> 00:34:50,360
out to the people to empower the people

00:34:48,290 --> 00:34:52,250
to empower productivity the value is

00:34:50,360 --> 00:34:54,409
higher up the stack and that's what we

00:34:52,250 --> 00:34:56,480
need to get to and everything that keeps

00:34:54,409 --> 00:34:58,460
us like every blending discussion that

00:34:56,480 --> 00:35:01,370
we're having that keeps us from getting

00:34:58,460 --> 00:35:03,470
up to those levels is you know not a

00:35:01,370 --> 00:35:07,520
waste of time but certainly not ideally

00:35:03,470 --> 00:35:10,100
use time so thanks yeah thank you and as

00:35:07,520 --> 00:35:10,680
Byrne mentioned chip will be sending out

00:35:10,100 --> 00:35:13,440
and

00:35:10,680 --> 00:35:14,820
to the CFDA of mailing-list about the

00:35:13,440 --> 00:35:17,220
special interest group that we are going

00:35:14,820 --> 00:35:19,020
to start have a regular cadence of

00:35:17,220 --> 00:35:22,050
course thank you so much for letting us

00:35:19,020 --> 00:35:24,870
know if you have any thoughts or ideas

00:35:22,050 --> 00:35:26,610
or if you want to participate in this

00:35:24,870 --> 00:35:28,800
whole blending process and if you have

00:35:26,610 --> 00:35:30,750
this is how a community gets better and

00:35:28,800 --> 00:35:33,090
we are bringing two communities together

00:35:30,750 --> 00:35:35,760
and we're making it even better so we

00:35:33,090 --> 00:35:38,130
need the community's input so please do

00:35:35,760 --> 00:35:43,200
look for his email and join the special

00:35:38,130 --> 00:35:43,770
interest group thank you thank you

00:35:43,200 --> 00:35:47,289
everyone

00:35:43,770 --> 00:35:47,289

YouTube URL: https://www.youtube.com/watch?v=4ow7IumxkOM


