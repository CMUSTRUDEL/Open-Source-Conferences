Title: First Line of Defense: Patching Vulnerable Java Application Dependencies in CF - Aner Mazur, Snyk
Publication date: 2018-04-21
Playlist: Cloud Foundry Summit NA 2018
Description: 
	First Line of Defense: Patching Vulnerable Java Application Dependencies in CF - Aner Mazur, Snyk

 What happens when a critical Java security vulnerability is detected in an application dependency, and upgrading is hard? How could you respond quickly without disrupting your development process and immediately shifting substantial resources to test a major upgrade?

This talk will analyze high-impact Java vulnerabilities, such as the Apache Struts vulnerability that was exploited in the May 2017 Equifax data breach. We'll show how to exploit them as an attacker would, discuss the various ways such a Java vulnerability could be addressed in the CF environment, as well as present an automated patch first, upgrade later approach.

About Aner Mazur
Aner is the VP of Product Management at Snyk. He is responsible for setting the product strategy and delivering open source security solutions for developers. Prior to joining Snyk Aner was head of product management at Outbrain, and prior to that Aner came from an algorithmic R&D management background at VMware and B-hive Networks, which makes him very excited about the opportunities ahead for bringing security to cloud application platforms.
Captions: 
	00:00:00,060 --> 00:00:04,560
let's start what I'm gonna talk to you

00:00:03,149 --> 00:00:06,480
about and this is actually gonna be a

00:00:04,560 --> 00:00:08,820
fun lecture because we're gonna talk

00:00:06,480 --> 00:00:12,269
quite a bit also about we're gonna do

00:00:08,820 --> 00:00:15,299
some actual hacking which is which is

00:00:12,269 --> 00:00:17,789
always nice so we're going to talk about

00:00:15,299 --> 00:00:20,520
first line of defense how we can also

00:00:17,789 --> 00:00:22,730
patch using cloud foundry in the cloud

00:00:20,520 --> 00:00:25,470
foundry infrastructure bottom eight

00:00:22,730 --> 00:00:27,720
patching of critical open source

00:00:25,470 --> 00:00:29,760
vulnerabilities we'll also do some

00:00:27,720 --> 00:00:30,480
hiking around them just about me two

00:00:29,760 --> 00:00:32,850
sentences

00:00:30,480 --> 00:00:34,829
I'm VB private sneak at sneak we help

00:00:32,850 --> 00:00:37,469
developers and organizations use open

00:00:34,829 --> 00:00:39,180
sources they secure we won't be touching

00:00:37,469 --> 00:00:43,530
too much on that but that's the world

00:00:39,180 --> 00:00:45,270
that were touching on and I was you know

00:00:43,530 --> 00:00:48,930
you can see here the roles of where I

00:00:45,270 --> 00:00:51,809
was quite a few of the people that are

00:00:48,930 --> 00:00:55,260
in sneak today I know from back in those

00:00:51,809 --> 00:00:57,510
cyber days so we're going to talk a

00:00:55,260 --> 00:01:00,090
little bit about the open source usage

00:00:57,510 --> 00:01:03,180
the growth there how secure you relates

00:01:00,090 --> 00:01:05,309
to that update versus patches we're

00:01:03,180 --> 00:01:06,960
gonna spend hopefully most of our time

00:01:05,309 --> 00:01:11,340
doing some hacking and then quick

00:01:06,960 --> 00:01:14,820
summary and Q&A for whatever whatever

00:01:11,340 --> 00:01:18,119
may come up so first of all open source

00:01:14,820 --> 00:01:22,470
is awesome own open source is eating the

00:01:18,119 --> 00:01:23,850
world so you know it's why rewrite

00:01:22,470 --> 00:01:27,630
something that's already been written

00:01:23,850 --> 00:01:31,650
that's been tested that works great and

00:01:27,630 --> 00:01:34,409
not focus only on writing the exact core

00:01:31,650 --> 00:01:37,020
business logic that you need and we see

00:01:34,409 --> 00:01:38,700
this is a key driver for digital

00:01:37,020 --> 00:01:40,650
transformation or however you want to

00:01:38,700 --> 00:01:43,860
call fast-moving

00:01:40,650 --> 00:01:46,049
teams that you know that that need to

00:01:43,860 --> 00:01:51,509
move fast and and and use whatever they

00:01:46,049 --> 00:01:52,979
can to do that this is growth that we're

00:01:51,509 --> 00:01:55,880
seeing year-over-year so we're seeing

00:01:52,979 --> 00:02:00,119
exponential growth in the number of

00:01:55,880 --> 00:02:01,950
packages that are being added each year

00:02:00,119 --> 00:02:05,070
it varies between some of the ecosystems

00:02:01,950 --> 00:02:06,990
you can see that in Java it's more or

00:02:05,070 --> 00:02:09,090
less a little bit lower than thirty

00:02:06,990 --> 00:02:10,649
percent so about twenty-eight percent in

00:02:09,090 --> 00:02:12,780
some other languages by the way such as

00:02:10,649 --> 00:02:13,290
JavaScript we're even seeing a much

00:02:12,780 --> 00:02:15,599
larger

00:02:13,290 --> 00:02:19,340
growth but still a largest Princeton's

00:02:15,599 --> 00:02:23,549
both a year-over-year any ideas how many

00:02:19,340 --> 00:02:30,870
open source java packages out there in

00:02:23,549 --> 00:02:36,629
maven central guest says 110 hundred how

00:02:30,870 --> 00:02:41,519
much 20,000 another guess no okay

00:02:36,629 --> 00:02:44,069
so 229 thousand packages libraries and

00:02:41,519 --> 00:02:46,560
again this is 30% growth year over year

00:02:44,069 --> 00:02:50,159
and you can see some nice numbers when

00:02:46,560 --> 00:02:54,840
it comes to the other languages as well

00:02:50,159 --> 00:02:58,319
so a very large number downloads per

00:02:54,840 --> 00:03:00,389
ecosystems per year grow between fifty

00:02:58,319 --> 00:03:03,209
and a hundred percent a year over a year

00:03:00,389 --> 00:03:04,889
so both growth in the amount of open

00:03:03,209 --> 00:03:06,569
source packages out there that

00:03:04,889 --> 00:03:09,629
developers are using for various needs

00:03:06,569 --> 00:03:11,549
but also in the actual usage and we're

00:03:09,629 --> 00:03:15,840
also seeing a similar thing with docker

00:03:11,549 --> 00:03:17,190
so more and more of the very high growth

00:03:15,840 --> 00:03:21,150
in the number of publicly available

00:03:17,190 --> 00:03:24,169
docker images so most of your

00:03:21,150 --> 00:03:26,760
application code is open source you know

00:03:24,169 --> 00:03:30,030
usually over 90 percent of the code

00:03:26,760 --> 00:03:32,609
that's actually being developed executed

00:03:30,030 --> 00:03:35,760
and deployed eventually is open source

00:03:32,609 --> 00:03:40,139
just to look at our small spring boot

00:03:35,760 --> 00:03:45,480
app that I that I prepared for today's

00:03:40,139 --> 00:03:49,019
demo so this is a one of the three files

00:03:45,480 --> 00:03:52,620
that I've created has overall 80 lines

00:03:49,019 --> 00:03:56,760
of code so that's an impressive app that

00:03:52,620 --> 00:04:00,840
you'll see as hacking later on and these

00:03:56,760 --> 00:04:03,449
are the dependencies so as you can see

00:04:00,840 --> 00:04:05,069
there are seven direct dependencies one

00:04:03,449 --> 00:04:07,470
of the things that happens with open

00:04:05,069 --> 00:04:10,859
sources that each open source package in

00:04:07,470 --> 00:04:13,349
turn uses additional open source

00:04:10,859 --> 00:04:15,599
packages and then there's actually quite

00:04:13,349 --> 00:04:17,250
a lot of open source packages that

00:04:15,599 --> 00:04:18,539
you're bringing in again running in

00:04:17,250 --> 00:04:20,849
production deployed parts of your app

00:04:18,539 --> 00:04:22,969
you don't even necessarily know and

00:04:20,849 --> 00:04:25,840
aware that and he gets for how many

00:04:22,969 --> 00:04:30,870
there are dependencies over all

00:04:25,840 --> 00:04:33,070
this miraculous app is actually using

00:04:30,870 --> 00:04:35,199
500 is good is a good number it's

00:04:33,070 --> 00:04:37,210
actually over 500 would have been more

00:04:35,199 --> 00:04:40,870
if it was in the npm or something but

00:04:37,210 --> 00:04:43,389
this is 66 total dependencies okay so

00:04:40,870 --> 00:04:46,290
still you know a large difference and

00:04:43,389 --> 00:04:54,580
any idea how many lines of code

00:04:46,290 --> 00:04:57,430
overall quick guess 100,000 a couple of

00:04:54,580 --> 00:04:59,800
thousands so 713 thousands line of code

00:04:57,430 --> 00:05:02,710
and that's and that's with the spring

00:04:59,800 --> 00:05:05,590
which is even more lightweight so by the

00:05:02,710 --> 00:05:08,080
way I am counting in the 730,000 also

00:05:05,590 --> 00:05:13,600
the 80 so that may skew the numbers a

00:05:08,080 --> 00:05:16,180
bit but but yeah so anyways you know the

00:05:13,600 --> 00:05:19,479
line share by far and obviously this is

00:05:16,180 --> 00:05:21,400
a demo app so you know it does it could

00:05:19,479 --> 00:05:23,020
get to 90 something percent in unto

00:05:21,400 --> 00:05:27,100
ninety-nine point nine nine like it is

00:05:23,020 --> 00:05:28,900
over here but still the majority open

00:05:27,100 --> 00:05:30,910
source is cool is great but it does

00:05:28,900 --> 00:05:33,370
carry risk with it

00:05:30,910 --> 00:05:36,430
pure some examples of known

00:05:33,370 --> 00:05:38,680
vulnerabilities that are disclosed and

00:05:36,430 --> 00:05:41,340
then were exploited and have a very

00:05:38,680 --> 00:05:44,340
large impact in the latest years

00:05:41,340 --> 00:05:46,900
heartbleed a a remote code execution

00:05:44,340 --> 00:05:51,010
vulnerability and openness to sell heard

00:05:46,900 --> 00:05:56,830
quite a few organizations and across a

00:05:51,010 --> 00:05:59,160
few of the of the OSCE's shell bash that

00:05:56,830 --> 00:06:01,450
was shell-shocked there was a bash

00:05:59,160 --> 00:06:04,710
vulnerability also a remote code

00:06:01,450 --> 00:06:08,289
execution within hours of the disclosure

00:06:04,710 --> 00:06:12,060
there were scaled denial of service

00:06:08,289 --> 00:06:15,180
attacks all coming from compromised

00:06:12,060 --> 00:06:18,669
computers that that that this

00:06:15,180 --> 00:06:20,800
vulnerability exploited and there's the

00:06:18,669 --> 00:06:24,010
infamous which will hack today

00:06:20,800 --> 00:06:27,789
Apache struts to vulnerability which was

00:06:24,010 --> 00:06:29,289
used to hack into Equifax last year

00:06:27,789 --> 00:06:33,760
probably most of you have heard about

00:06:29,289 --> 00:06:35,740
that and especially if you know if

00:06:33,760 --> 00:06:38,020
you're scored in the US and exposed

00:06:35,740 --> 00:06:39,009
records of over 143 million actually

00:06:38,020 --> 00:06:41,099
there were few

00:06:39,009 --> 00:06:44,889
more millions that were discovered later

00:06:41,099 --> 00:06:48,009
but anyways so known vulnerabilities an

00:06:44,889 --> 00:06:49,599
open source as open source creates more

00:06:48,009 --> 00:06:52,749
and more components as more and more

00:06:49,599 --> 00:06:55,569
people use it and as the R or Y for

00:06:52,749 --> 00:06:57,729
hackers to exploit known vulnerabilities

00:06:55,569 --> 00:06:59,379
is very very high because to exploit a

00:06:57,729 --> 00:07:01,839
known vulnerability is very easy its

00:06:59,379 --> 00:07:04,029
public the code is open source you can

00:07:01,839 --> 00:07:07,089
just you know write an exploit it's on

00:07:04,029 --> 00:07:08,979
though in the wild within hours and also

00:07:07,089 --> 00:07:11,020
the ry is high because many

00:07:08,979 --> 00:07:12,909
organizations are potentially vulnerable

00:07:11,020 --> 00:07:14,559
that draws a lot of attention bottom

00:07:12,909 --> 00:07:18,039
line a lot of attention is drawn and we

00:07:14,559 --> 00:07:20,680
can see a large increase this is in the

00:07:18,039 --> 00:07:23,559
open source application dependencies ok

00:07:20,680 --> 00:07:27,270
so very large increase any guess on the

00:07:23,559 --> 00:07:30,189
trend when you're looking at the

00:07:27,270 --> 00:07:33,599
operating system of vulnerabilities for

00:07:30,189 --> 00:07:33,599
example if we take Red Hat Linux

00:07:33,689 --> 00:07:41,649
thoughts thoughts and prayers ok so

00:07:39,759 --> 00:07:46,449
actually there we're seeing an improving

00:07:41,649 --> 00:07:49,209
trend so you know the main explanation

00:07:46,449 --> 00:07:51,639
for that is that it's way more mature

00:07:49,209 --> 00:07:54,669
there's not you know huge amount of

00:07:51,639 --> 00:07:57,990
growth in the number of a libraries at

00:07:54,669 --> 00:08:00,580
the OS level they're managed by

00:07:57,990 --> 00:08:02,889
obviously out of the 200,000 packages

00:08:00,580 --> 00:08:07,330
you saw before their mat they're managed

00:08:02,889 --> 00:08:10,330
by various maintainer earth various you

00:08:07,330 --> 00:08:13,059
know level of security knowledge and

00:08:10,330 --> 00:08:17,139
experience and and tactics so there is

00:08:13,059 --> 00:08:20,740
some some hope that we will with time

00:08:17,139 --> 00:08:23,889
maturity and putting things in place we

00:08:20,740 --> 00:08:27,309
will get to that level of maturity as

00:08:23,889 --> 00:08:30,930
well also in the application world and

00:08:27,309 --> 00:08:35,289
but still over three-quarters of the top

00:08:30,930 --> 00:08:38,409
thousand containers out there have known

00:08:35,289 --> 00:08:40,419
vulnerabilities in them so you know most

00:08:38,409 --> 00:08:46,839
chances you download an ubuntu container

00:08:40,419 --> 00:08:48,660
or read at one it's vulnerable so what

00:08:46,839 --> 00:08:50,430
happens in the

00:08:48,660 --> 00:08:53,120
operating system world so in the

00:08:50,430 --> 00:08:55,770
operating system world you know you have

00:08:53,120 --> 00:08:57,720
companies like Reddit and and canonical

00:08:55,770 --> 00:09:02,880
that have your back so here's an example

00:08:57,720 --> 00:09:05,190
of a vulnerability in PHP that was

00:09:02,880 --> 00:09:10,380
discovered in all versions of PHP and

00:09:05,190 --> 00:09:13,560
enables you to run arbitrary code 5.3

00:09:10,380 --> 00:09:17,339
the version 5.3 a PHP has retired so

00:09:13,560 --> 00:09:22,260
they didn't issue a fix so there was no

00:09:17,339 --> 00:09:28,050
fix on 5.3 only 5.4 but if they would

00:09:22,260 --> 00:09:30,150
have upgraded one of the of the red-eyed

00:09:28,050 --> 00:09:32,310
Linux distributions that had five four

00:09:30,150 --> 00:09:34,050
and three hundred 25.4 obviously there

00:09:32,310 --> 00:09:35,779
could have been quite a few are

00:09:34,050 --> 00:09:38,730
competitive backward compatibility

00:09:35,779 --> 00:09:41,100
issues that eventually you know

00:09:38,730 --> 00:09:43,380
developers or cysts admins would have to

00:09:41,100 --> 00:09:47,820
resolve so came Red Hat and they

00:09:43,380 --> 00:09:52,200
provided they back ported a patch of fix

00:09:47,820 --> 00:09:53,820
for 5.3 and so that means that if you're

00:09:52,200 --> 00:09:56,400
trying to look at how confounder

00:09:53,820 --> 00:09:59,070
abilities be fixed in the operating

00:09:56,400 --> 00:10:02,100
system world it's easy right it's it's

00:09:59,070 --> 00:10:04,950
easy all you need to do is run yum

00:10:02,100 --> 00:10:06,990
update open SSL apt-get update if you're

00:10:04,950 --> 00:10:09,900
in a boon to if you're in Red Hat you

00:10:06,990 --> 00:10:12,870
restart the Machine and you're done you

00:10:09,900 --> 00:10:14,880
don't need to take to you know to take

00:10:12,870 --> 00:10:16,770
into consideration to test or to think

00:10:14,880 --> 00:10:21,810
about whether this will actually break

00:10:16,770 --> 00:10:24,480
your entire machine in the application

00:10:21,810 --> 00:10:27,540
world it's not exactly the same so you

00:10:24,480 --> 00:10:31,230
know struts released two point three

00:10:27,540 --> 00:10:33,390
three two which had the fix but many

00:10:31,230 --> 00:10:36,300
organizations had a two point three that

00:10:33,390 --> 00:10:39,000
was four five years old now try to

00:10:36,300 --> 00:10:41,940
upgrade four or five years old of struts

00:10:39,000 --> 00:10:44,850
with all the versions you restart that

00:10:41,940 --> 00:10:49,410
it would just not work so there's a lot

00:10:44,850 --> 00:10:52,200
of resolving that needs to happen so not

00:10:49,410 --> 00:10:55,830
that easy application dependencies so

00:10:52,200 --> 00:10:57,150
why not upgrade now why not like every

00:10:55,830 --> 00:11:00,209
vulnerability we're seeing why not

00:10:57,150 --> 00:11:00,850
upgrade it as as we said before so one

00:11:00,209 --> 00:11:03,519
of the reasons

00:11:00,850 --> 00:11:06,579
in my break functionality right like we

00:11:03,519 --> 00:11:10,540
said do you upgrade four years of struts

00:11:06,579 --> 00:11:12,130
you rerun it you know maybe there's a

00:11:10,540 --> 00:11:14,199
good chance is that functionality won't

00:11:12,130 --> 00:11:15,819
work there it could be that there's no

00:11:14,199 --> 00:11:19,240
fixed version so you just can't upgrade

00:11:15,819 --> 00:11:20,589
or that you know you don't have a direct

00:11:19,240 --> 00:11:22,630
dependency upgrade so think about a

00:11:20,589 --> 00:11:26,529
situation where I'm using a that uses

00:11:22,630 --> 00:11:28,089
struts and a just doesn't have a version

00:11:26,529 --> 00:11:32,290
yet where they you know we're the

00:11:28,089 --> 00:11:35,560
updated struts now you need to so

00:11:32,290 --> 00:11:39,130
there's nothing you can do and there may

00:11:35,560 --> 00:11:40,839
be version conflicts and others so what

00:11:39,130 --> 00:11:44,769
we're suggesting and we'll take a look

00:11:40,839 --> 00:11:47,829
at that is how to patch first so just

00:11:44,769 --> 00:11:51,310
you know patch quickly for whatever

00:11:47,829 --> 00:11:54,430
reason of free the developers from

00:11:51,310 --> 00:11:56,980
needing to address something that's very

00:11:54,430 --> 00:11:59,470
hard now like upgrading four years of

00:11:56,980 --> 00:12:02,560
stress first of all you define the the

00:11:59,470 --> 00:12:05,009
patch where's the patch it may be fixed

00:12:02,560 --> 00:12:07,720
in a newer version like happenin struts

00:12:05,009 --> 00:12:09,100
there's some there's some that are left

00:12:07,720 --> 00:12:12,009
maintained some package of the Left

00:12:09,100 --> 00:12:13,600
maintained and then an external PR it

00:12:12,009 --> 00:12:15,670
sort of pull request could be there or

00:12:13,600 --> 00:12:17,259
you can also write it yourself and you

00:12:15,670 --> 00:12:18,970
then you need to apply the patch so you

00:12:17,259 --> 00:12:22,240
found the pass how do you apply it you

00:12:18,970 --> 00:12:24,850
can either fork and apply it by yourself

00:12:22,240 --> 00:12:27,130
you can do a static build time patch or

00:12:24,850 --> 00:12:29,649
you can dynamically patch it boot time

00:12:27,130 --> 00:12:33,100
what we will show in the struts is the

00:12:29,649 --> 00:12:38,800
approach where we take the fix from

00:12:33,100 --> 00:12:42,310
struts and we build it in in patch time

00:12:38,800 --> 00:12:48,750
and now comes the fun part of the

00:12:42,310 --> 00:12:53,610
demonstration which is actual hacking so

00:12:48,750 --> 00:12:53,610
let's take a look now what I have here

00:12:53,670 --> 00:13:02,439
okay first of all I have here two

00:12:58,089 --> 00:13:04,720
running apps spring goof and to do

00:13:02,439 --> 00:13:07,449
exploits do exploit is you'll see soon

00:13:04,720 --> 00:13:11,410
is a struts app and spring goof is a

00:13:07,449 --> 00:13:14,209
spring boot app to do exploit this app

00:13:11,410 --> 00:13:21,100
is the amazing

00:13:14,209 --> 00:13:25,129
to-do list app so you know I can mmm

00:13:21,100 --> 00:13:30,949
second I need to log into this amazing

00:13:25,129 --> 00:13:42,410
app or does it not let me do that one

00:13:30,949 --> 00:13:45,079
second I just want to show you this

00:13:42,410 --> 00:13:47,629
amazing app that we prepared it's called

00:13:45,079 --> 00:13:51,230
my to-do list you can see that I can

00:13:47,629 --> 00:13:53,379
create it to do right you can do a hack

00:13:51,230 --> 00:13:55,429
you can do it

00:13:53,379 --> 00:13:58,730
1970 as you can see this is a very

00:13:55,429 --> 00:14:03,230
impressive app and I had a hero to do

00:13:58,730 --> 00:14:05,899
this okay so this is that a Java to-do

00:14:03,230 --> 00:14:09,050
list app and now what we're gonna look

00:14:05,899 --> 00:14:14,749
at is that if we're looking for a second

00:14:09,050 --> 00:14:18,490
at the this is the infamous dependency

00:14:14,749 --> 00:14:22,970
tree for that app okay so as you can see

00:14:18,490 --> 00:14:24,980
we're using this Web common and as you

00:14:22,970 --> 00:14:29,929
can see obviously like we discussed

00:14:24,980 --> 00:14:32,509
before every every dependency has a lot

00:14:29,929 --> 00:14:34,579
of dependencies that it uses and you

00:14:32,509 --> 00:14:37,429
know to do this one is used and then

00:14:34,579 --> 00:14:39,589
this one is used etc and somewhere here

00:14:37,429 --> 00:14:41,689
we're also using and these are all ones

00:14:39,589 --> 00:14:43,129
that are marked as vulnerable but what I

00:14:41,689 --> 00:14:49,249
want to show you is that we're also

00:14:43,129 --> 00:14:52,220
using here the struts to core component

00:14:49,249 --> 00:14:54,079
dependency which has this arbitrary code

00:14:52,220 --> 00:14:57,559
execution vulnerability that we

00:14:54,079 --> 00:15:00,980
discussed version 2 3 2 is was it was

00:14:57,559 --> 00:15:04,549
fixed and that vulnerability what it

00:15:00,980 --> 00:15:07,220
does it is enables you to run code in

00:15:04,549 --> 00:15:11,299
the content type so what they actually

00:15:07,220 --> 00:15:14,749
do and we'll see we can see the code

00:15:11,299 --> 00:15:17,329
here this is the actual patch that fixed

00:15:14,749 --> 00:15:20,420
the struts vulnerability which we then

00:15:17,329 --> 00:15:24,439
back port in order to patch and I'll

00:15:20,420 --> 00:15:27,139
show you that in a bit you can see here

00:15:24,439 --> 00:15:27,980
that on this localized util at this fine

00:15:27,139 --> 00:15:33,500
text

00:15:27,980 --> 00:15:39,080
i Function the message it executes here

00:15:33,500 --> 00:15:42,590
a dot get message this actually test the

00:15:39,080 --> 00:15:45,650
code and if there's an OG NL the object

00:15:42,590 --> 00:15:47,990
graph navigation library a code in it it

00:15:45,650 --> 00:15:50,660
would actually execute it now this is

00:15:47,990 --> 00:15:54,520
the fix where it's you know doesn't if

00:15:50,660 --> 00:15:59,930
tests is if everything's okay and if not

00:15:54,520 --> 00:16:10,240
it disallows it so let's now actually go

00:15:59,930 --> 00:16:27,350
and hack it so one second can you see

00:16:10,240 --> 00:16:29,870
not really it's better okay cool so let

00:16:27,350 --> 00:16:34,910
me see one second where I am here okay

00:16:29,870 --> 00:16:37,070
this is the job this is the the one we

00:16:34,910 --> 00:16:39,890
discussed this is the to do list web

00:16:37,070 --> 00:16:42,940
struts the app we just saw that has this

00:16:39,890 --> 00:16:48,670
exploit if I go I have here this

00:16:42,940 --> 00:16:49,850
exploits folder take a look at this file

00:16:48,670 --> 00:16:55,450
okay

00:16:49,850 --> 00:16:59,360
and you remember this is the actual

00:16:55,450 --> 00:17:04,400
malicious piece so in the content type

00:16:59,360 --> 00:17:07,540
this ampersand here this is exactly what

00:17:04,400 --> 00:17:12,020
runs this OGL that we saw before and

00:17:07,540 --> 00:17:15,980
here you can see that somewhere okay we

00:17:12,020 --> 00:17:20,000
define here a process which we start etc

00:17:15,980 --> 00:17:21,589
we run bash and I have this command

00:17:20,000 --> 00:17:24,680
which I'm going to just replace with any

00:17:21,589 --> 00:17:27,949
command in one run so this this will

00:17:24,680 --> 00:17:31,100
eventually execute any code I want in a

00:17:27,949 --> 00:17:34,040
new process as part of bash valve

00:17:31,100 --> 00:17:35,680
cool so what I'm gonna do now is I'm

00:17:34,040 --> 00:17:38,800
going to show you how I'm actually

00:17:35,680 --> 00:17:38,800
exploiting it

00:17:39,950 --> 00:17:44,810
this would be running the NF command and

00:17:42,980 --> 00:17:48,740
then we'll be running the ATC password

00:17:44,810 --> 00:17:52,130
command this is a live demo so you know

00:17:48,740 --> 00:17:55,610
if something doesn't work don't kill me

00:17:52,130 --> 00:17:58,910
yep so what happened now I ran it okay

00:17:55,610 --> 00:18:00,440
and you can see the HTTP requests you

00:17:58,910 --> 00:18:02,180
can see that this is the content type

00:18:00,440 --> 00:18:06,950
that came as part of the HTTP request

00:18:02,180 --> 00:18:11,030
and you can see here my end you can see

00:18:06,950 --> 00:18:14,450
here all my environment variables as

00:18:11,030 --> 00:18:19,010
they are I'll show you another one as I

00:18:14,450 --> 00:18:24,200
promised we can run here et Cie pass

00:18:19,010 --> 00:18:27,970
word passwd this is my et Cie passwd and

00:18:24,200 --> 00:18:32,920
any other command you want to execute

00:18:27,970 --> 00:18:37,760
locally cool so we have this venerable

00:18:32,920 --> 00:18:41,630
situation as you saw before we we have

00:18:37,760 --> 00:18:45,560
this this application with all its

00:18:41,630 --> 00:18:47,420
dependencies and but you know upgrading

00:18:45,560 --> 00:18:49,520
is hard for all the reasons we said

00:18:47,420 --> 00:18:53,540
before we don't want to now upgrade four

00:18:49,520 --> 00:18:55,490
years of struts with all the application

00:18:53,540 --> 00:18:58,190
implication that it will take us and we

00:18:55,490 --> 00:18:59,930
don't want to stop right now and and you

00:18:58,190 --> 00:19:02,450
know freeze all our are indeed to do

00:18:59,930 --> 00:19:04,850
just this so we're saying let's patch

00:19:02,450 --> 00:19:08,900
first so what I'm gonna do and this is

00:19:04,850 --> 00:19:11,510
how I'm gonna actually use I'm gonna

00:19:08,900 --> 00:19:14,690
actually use Cloud Foundry to do that

00:19:11,510 --> 00:19:18,320
and to automate that what we have

00:19:14,690 --> 00:19:24,170
created with Cloud Foundry is we've

00:19:18,320 --> 00:19:26,660
created a we've created a build pack

00:19:24,170 --> 00:19:28,340
that instead of the regular Java build

00:19:26,660 --> 00:19:32,240
pack and now we've implemented it into

00:19:28,340 --> 00:19:35,060
the Java build pack that what it does it

00:19:32,240 --> 00:19:39,590
one second let me find it yep it's here

00:19:35,060 --> 00:19:41,590
it that build pack would also patch any

00:19:39,590 --> 00:19:45,440
critical vulnerability that we had

00:19:41,590 --> 00:19:48,970
configured for it to to patch so what

00:19:45,440 --> 00:19:51,500
this would do is it would create a push

00:19:48,970 --> 00:19:52,280
to do exploit the same vulnerability we

00:19:51,500 --> 00:19:54,980
had

00:19:52,280 --> 00:19:55,640
the same war file we had so nothing

00:19:54,980 --> 00:19:58,100
changes

00:19:55,640 --> 00:20:01,820
but just the build pack in build time

00:19:58,100 --> 00:20:06,520
has a configuration that if it finds

00:20:01,820 --> 00:20:10,340
this is such a high vulnerability in in

00:20:06,520 --> 00:20:15,110
struts - it would patch it ok again

00:20:10,340 --> 00:20:19,400
taking that same code the same patch we

00:20:15,110 --> 00:20:23,510
back ported it to previous versions of

00:20:19,400 --> 00:20:27,289
Apache and of struts and would patch it

00:20:23,510 --> 00:20:30,190
so this would run now ok so what I

00:20:27,289 --> 00:20:33,909
wanted to show you after this deploys is

00:20:30,190 --> 00:20:39,320
how now that same app is not vulnerable

00:20:33,909 --> 00:20:42,679
anymore ok meanwhile just as this takes

00:20:39,320 --> 00:20:47,270
place and not to keep you bored let's do

00:20:42,679 --> 00:20:51,350
another hack ok so what we're gonna do

00:20:47,270 --> 00:20:56,679
now is we're gonna look at a second

00:20:51,350 --> 00:20:57,950
application this one has the spring

00:20:56,679 --> 00:21:00,080
break

00:20:57,950 --> 00:21:01,640
so this is my application simple rest

00:21:00,080 --> 00:21:08,200
app ok

00:21:01,640 --> 00:21:13,280
it has let me show you it has it has

00:21:08,200 --> 00:21:18,080
like very simple I can look at items

00:21:13,280 --> 00:21:20,360
okay so sausages milk beans ok I can

00:21:18,080 --> 00:21:23,690
look at the first item I can find items

00:21:20,360 --> 00:21:27,080
like and you know very simple app this

00:21:23,690 --> 00:21:31,280
is with spring boot and it and it's a a

00:21:27,080 --> 00:21:33,169
rest application now spring break

00:21:31,280 --> 00:21:35,750
vulnerability who here heard of spring

00:21:33,169 --> 00:21:38,330
break from ability ok very big

00:21:35,750 --> 00:21:41,840
vulnerability found in spring enables

00:21:38,330 --> 00:21:45,380
again remote code execution found just

00:21:41,840 --> 00:21:48,580
just very recently we can look at its

00:21:45,380 --> 00:21:54,590
definition ok it was found in rest web

00:21:48,580 --> 00:21:56,090
rest web MVC and again it runs a similar

00:21:54,590 --> 00:21:58,280
expression language that's similar to

00:21:56,090 --> 00:22:02,120
the OG NL which we stopped just now at

00:21:58,280 --> 00:22:04,770
the struts one that enables you to a run

00:22:02,120 --> 00:22:07,830
malicious code when your use

00:22:04,770 --> 00:22:14,640
a patch request which is apparently an

00:22:07,830 --> 00:22:17,940
HTTP potential parameter so now let's go

00:22:14,640 --> 00:22:22,820
to exploits here and I'm gonna show

00:22:17,940 --> 00:22:27,030
again how this one can be exploited

00:22:22,820 --> 00:22:29,970
let's look at this text right so what it

00:22:27,030 --> 00:22:32,940
would do again it would do this replace

00:22:29,970 --> 00:22:35,880
up and this code actually is the one

00:22:32,940 --> 00:22:38,070
that's running would run and execute

00:22:35,880 --> 00:22:45,570
your code everything that's here in

00:22:38,070 --> 00:22:48,990
command now let's run let's see the

00:22:45,570 --> 00:22:51,930
exploits I have here and I'm gonna run

00:22:48,990 --> 00:22:54,090
actually this one ok so what we're gonna

00:22:51,930 --> 00:22:56,010
do is run this text okay we're gonna

00:22:54,090 --> 00:23:00,180
change the command with n again let's

00:22:56,010 --> 00:23:03,630
run N and look it's a regular easy curl

00:23:00,180 --> 00:23:09,150
command to this REST API just puts the

00:23:03,630 --> 00:23:12,620
patch parameter right and and that's it

00:23:09,150 --> 00:23:18,590
and and and again puts the text here as

00:23:12,620 --> 00:23:20,130
the content type and once I run this

00:23:18,590 --> 00:23:26,130
with this item

00:23:20,130 --> 00:23:30,180
I get the end of my computer so another

00:23:26,130 --> 00:23:33,600
example of a critical vulnerability look

00:23:30,180 --> 00:23:36,900
how simple it was to exploit it this was

00:23:33,600 --> 00:23:41,310
one in spring actually so we're done

00:23:36,900 --> 00:23:45,450
here we just we just had a new

00:23:41,310 --> 00:23:50,820
vulnerability come up a new sorry a new

00:23:45,450 --> 00:23:52,200
version came out of to do exploit just

00:23:50,820 --> 00:23:55,590
now three minutes ago

00:23:52,200 --> 00:23:59,010
okay deployed I'm gonna try to see if

00:23:55,590 --> 00:24:02,670
the patch actually fixed something so

00:23:59,010 --> 00:24:06,560
this was trying to run again as you

00:24:02,670 --> 00:24:12,090
remember the end against the to do

00:24:06,560 --> 00:24:15,660
vulnerability and I'm probably not in

00:24:12,090 --> 00:24:20,460
the right place one second Java

00:24:15,660 --> 00:24:25,080
goof and exploits okay

00:24:20,460 --> 00:24:27,780
let's run it again this time I'm getting

00:24:25,080 --> 00:24:31,080
an exception okay so this time I'm

00:24:27,780 --> 00:24:36,650
getting an exception of invalid input

00:24:31,080 --> 00:24:39,770
and that's it and I can't see the end so

00:24:36,650 --> 00:24:47,300
vulnerability patched by buildpack

00:24:39,770 --> 00:24:52,530
automatically by Cloud Foundry thank you

00:24:47,300 --> 00:24:56,010
so you know want to summarize again kind

00:24:52,530 --> 00:24:58,230
of the approach and what to do and so

00:24:56,010 --> 00:25:00,810
again first line of defense automating

00:24:58,230 --> 00:25:02,970
patch and app dependencies patching is

00:25:00,810 --> 00:25:05,460
actually an old concept in the operating

00:25:02,970 --> 00:25:08,040
system we started before with what Red

00:25:05,460 --> 00:25:10,800
Hat and Ubuntu are doing very easy they

00:25:08,040 --> 00:25:13,650
create a patch for you all you need to

00:25:10,800 --> 00:25:15,570
do is run a yum or a apt-get and you're

00:25:13,650 --> 00:25:18,240
and you're done but a very new concept

00:25:15,570 --> 00:25:19,860
in the app world application

00:25:18,240 --> 00:25:23,670
dependencies if you really think about

00:25:19,860 --> 00:25:25,740
it are just pieces of OS of

00:25:23,670 --> 00:25:27,810
infrastructure that are within your apps

00:25:25,740 --> 00:25:33,020
why not treat them the same way you

00:25:27,810 --> 00:25:36,060
treat operating system so prediction

00:25:33,020 --> 00:25:38,790
automating build time patching which we

00:25:36,060 --> 00:25:41,580
call in coin and Gartner is also coined

00:25:38,790 --> 00:25:42,900
for us precision patching will become

00:25:41,580 --> 00:25:44,850
the easiest and safest way to resolve

00:25:42,900 --> 00:25:48,360
vulnerabilities before attackers exploit

00:25:44,850 --> 00:25:51,480
them so again key vulnerability not easy

00:25:48,360 --> 00:25:53,730
to upgrade release today you know you'd

00:25:51,480 --> 00:25:56,310
want automatically Cloud Foundry in the

00:25:53,730 --> 00:25:58,110
build pack to patch them today so even

00:25:56,310 --> 00:26:01,320
if you just upgrade two or three weeks

00:25:58,110 --> 00:26:04,830
from now you're still covered and Cloud

00:26:01,320 --> 00:26:07,170
Foundry and sneak as the one kind of

00:26:04,830 --> 00:26:14,160
sourcing these patches and helping you

00:26:07,170 --> 00:26:16,080
out make it all easy yep so bottom line

00:26:14,160 --> 00:26:18,060
open source we discussed important

00:26:16,080 --> 00:26:22,320
define fix prevent and respond to

00:26:18,060 --> 00:26:28,530
vulnerabilities open source is awesome

00:26:22,320 --> 00:26:29,530
but enjoy it responsibly that's it any

00:26:28,530 --> 00:26:32,230
questions I think

00:26:29,530 --> 00:26:33,300
I tried to run so I have one minute for

00:26:32,230 --> 00:26:36,720
questions

00:26:33,300 --> 00:26:36,720
or maybe two

00:26:48,850 --> 00:26:58,529
that's a great question so we we also

00:26:51,549 --> 00:27:01,210
have a on-prem registry of of patches

00:26:58,529 --> 00:27:03,190
that you know that we can maintain and

00:27:01,210 --> 00:27:06,669
and that's the way it could it could

00:27:03,190 --> 00:27:09,210
happen also on on an on-prem I must say

00:27:06,669 --> 00:27:13,299
we're also looking it's it's not as

00:27:09,210 --> 00:27:15,250
common yet as like well adopted yet but

00:27:13,299 --> 00:27:17,759
multipacks is also something we're

00:27:15,250 --> 00:27:20,320
looking at to use this and just add

00:27:17,759 --> 00:27:23,019
patching as another build pack as part

00:27:20,320 --> 00:27:26,980
of the multi pack but yeah today we have

00:27:23,019 --> 00:27:30,129
it as either a store on AWS open with

00:27:26,980 --> 00:27:33,929
all the patches or we can we can provide

00:27:30,129 --> 00:27:33,929
a kind of an online registry for it I

00:27:45,960 --> 00:27:52,200
don't know why that happened

00:27:47,769 --> 00:27:52,200
yeah sorry api's

00:28:05,600 --> 00:28:10,230
yeah yeah definitely we have on-prem

00:28:08,009 --> 00:28:13,110
solutions that are coming we have quite

00:28:10,230 --> 00:28:16,259
a few banks and such there are customers

00:28:13,110 --> 00:28:18,690
today that that you know that would want

00:28:16,259 --> 00:28:21,629
this to run only on premise so whether

00:28:18,690 --> 00:28:23,299
it's on their environment so yeah

00:28:21,629 --> 00:28:25,590
definitely

00:28:23,299 --> 00:28:28,110
know we have it we have it as an

00:28:25,590 --> 00:28:29,610
offering yeah we have already quite a

00:28:28,110 --> 00:28:31,679
few customers that are using it I'm

00:28:29,610 --> 00:28:36,950
getting the T sign but maybe someone has

00:28:31,679 --> 00:28:36,950
one more question one more question

00:28:37,519 --> 00:28:40,379
okay

00:28:38,669 --> 00:28:41,180
it's been a pleasure thank you very much

00:28:40,379 --> 00:28:44,089
everyone

00:28:41,180 --> 00:28:44,089

YouTube URL: https://www.youtube.com/watch?v=Vr-4lbO9uKg


