Title: CF^3 - Putting a Kubernetes Behind CF - Julz Friedman, Andrew Edgar & Julian Skupnjak, IBM
Publication date: 2018-04-21
Playlist: Cloud Foundry Summit NA 2018
Description: 
	CF^3 - Putting a Kubernetes Behind CF - Julz Friedman, Andrew Edgar & Julian Skupnjak, IBM

Container scheduling is increasingly commoditised. Diego, Kubernetes, Mesos, Nomad, Swarm.. - and all of them could be backends to our beloved CF Platform! You think we have a fever dream ? Come join us in our talk and we’ll prove you wrong. We’ll introduce CUBE (https://github.com/julz/cube), which is a prototype to abstract our way out of being stuck with one particular scheduler. Cube syncs CF apps to a kube backend (or any other container scheduling backend — pluggability ftw!) in exactly the same way that the diego nsync component works today, except using generated OCI images. After staging, you get a nice shippable, auto-patched OCI image, and you can use the regular “cf push” flow and get a first-class Kubernetes Deployment/ReplicaSet (or a Diego LRP, Or a Docker Stack). In other words, it decouples buildpack staging and stateless-multitenant-app running and does both of them in a “cloud native” way, on top of any scheduler”. But that’s enough teasing, come and listen to the talk if we got you interested! 

About Andrew Edgar
Open Source Development

About Julz Friedman

About Julian Skupnjak
Julian Skupnjak is a software engineer at IBM Cloud. He joined IBM with a bachelor degree in 2015 and works as a member of the internal team for Cloud Foundry. Alongside his full-time activities as Software Engineer he continued his study on masters degree level. Recently, he completed his master degree with a thesis in the area of Container Placement Algorithms.
Beside several IBM intern talks about Continuous Delivery, Golang, and tools to empower and enhance CI/CD flows, Julian gave a talk about Serverless Computing at the IoT Conference 2016 in Stuttgart.
Captions: 
	00:00:00,060 --> 00:00:07,170
this is talk about little projects which

00:00:03,810 --> 00:00:09,870
may be the worst named projects in the

00:00:07,170 --> 00:00:14,849
world and I've named a few projects

00:00:09,870 --> 00:00:17,910
poorly as you will see it's called CS

00:00:14,849 --> 00:00:19,890
cubed and I really hope you could hear

00:00:17,910 --> 00:00:24,600
that that was spelt with the C and not

00:00:19,890 --> 00:00:29,039
okay because it's a talk about putting

00:00:24,600 --> 00:00:30,240
kubernetes behind CF so there's three

00:00:29,039 --> 00:00:33,300
other that the three of us that are

00:00:30,240 --> 00:00:34,559
going to be talking unfortunately two of

00:00:33,300 --> 00:00:37,380
us are called Jules

00:00:34,559 --> 00:00:39,210
which is going to be a problem so I'm

00:00:37,380 --> 00:00:40,079
going to talk about what this is and why

00:00:39,210 --> 00:00:44,010
the hell we did it

00:00:40,079 --> 00:00:46,110
I'm dr. Jules Andrew who's not tools

00:00:44,010 --> 00:00:49,260
thankfully it's going to talk about how

00:00:46,110 --> 00:00:53,219
we did it and then Jules from Germany or

00:00:49,260 --> 00:00:54,719
hey Jules which if I ever go bold I'm

00:00:53,219 --> 00:00:59,820
not going to be happy about him being

00:00:54,719 --> 00:01:01,770
here Jules and me not being well

00:00:59,820 --> 00:01:04,439
actually demo it and show that this is a

00:01:01,770 --> 00:01:05,549
real very cool thing and I'm going to

00:01:04,439 --> 00:01:06,930
try and go really fast because I'd

00:01:05,549 --> 00:01:09,750
really like it to be time for questions

00:01:06,930 --> 00:01:12,540
at the ends because this is some pretty

00:01:09,750 --> 00:01:15,020
cool stuff but also maybe some quite

00:01:12,540 --> 00:01:17,430
controversial and interesting stuff so

00:01:15,020 --> 00:01:19,490
what is this talk about this talk is

00:01:17,430 --> 00:01:21,900
about a little elephant named kubernetes

00:01:19,490 --> 00:01:27,330
which is in the room has anyone heard of

00:01:21,900 --> 00:01:29,670
kubernetes ha and the elephant is a

00:01:27,330 --> 00:01:31,799
little bit scary if we're honest it's a

00:01:29,670 --> 00:01:33,689
big elephant in the room and so what

00:01:31,799 --> 00:01:35,790
we've done is we've given it a nickname

00:01:33,689 --> 00:01:38,970
to make it sound less scary and that

00:01:35,790 --> 00:01:42,420
nickname is CF CR but it's still quite a

00:01:38,970 --> 00:01:45,509
scary elephant actually in terms of what

00:01:42,420 --> 00:01:48,180
Cloud Foundry shouldn't shouldn't be why

00:01:45,509 --> 00:01:50,720
is that let's talk about what Cloud

00:01:48,180 --> 00:01:55,710
Foundry is I think Cloud Foundry

00:01:50,720 --> 00:01:57,509
is two things one which I love is a

00:01:55,710 --> 00:02:00,649
developer experience it's a developer

00:01:57,509 --> 00:02:04,590
experience about stateless apps CF push

00:02:00,649 --> 00:02:07,380
CF bind service and don't push to

00:02:04,590 --> 00:02:11,370
the cloud right that's

00:02:07,380 --> 00:02:13,590
that's the CF push journey right it's

00:02:11,370 --> 00:02:15,660
also of course a container orchestrate

00:02:13,590 --> 00:02:17,760
it's Diego and garden and all the stuff

00:02:15,660 --> 00:02:19,140
about how it happens right so it's a

00:02:17,760 --> 00:02:21,569
developer experience and it's how we

00:02:19,140 --> 00:02:24,000
happen to implement that developer

00:02:21,569 --> 00:02:26,819
experience today and being through it

00:02:24,000 --> 00:02:28,590
these are two roles right these are one

00:02:26,819 --> 00:02:31,650
role which just hopefully doesn't even

00:02:28,590 --> 00:02:33,180
see this underlying stuff but also a

00:02:31,650 --> 00:02:38,790
role that sees this underlying stuff all

00:02:33,180 --> 00:02:40,950
the time so kubernetes what is that well

00:02:38,790 --> 00:02:43,440
it also is a developer experience it's a

00:02:40,950 --> 00:02:45,720
developer experience about deployment

00:02:43,440 --> 00:02:48,989
replicas sets and nodes and taints and

00:02:45,720 --> 00:02:50,880
annotations and all of this stuff and it

00:02:48,989 --> 00:02:52,950
has a container if it is a container

00:02:50,880 --> 00:02:54,660
Orchestrator I would argue some of these

00:02:52,950 --> 00:02:57,269
roles are a bit more overlapping in

00:02:54,660 --> 00:02:59,519
kubernetes the people who might use

00:02:57,269 --> 00:03:01,080
deployment sets and replica sets might

00:02:59,519 --> 00:03:03,630
be developers and they might be

00:03:01,080 --> 00:03:05,459
operators but there are higher-level

00:03:03,630 --> 00:03:07,410
tools as helm and scaffold and things

00:03:05,459 --> 00:03:12,260
like that that have been drafted and

00:03:07,410 --> 00:03:14,820
more focused on that developer role so

00:03:12,260 --> 00:03:18,209
let's put them side-by-side right that's

00:03:14,820 --> 00:03:19,500
our current solution is how about we put

00:03:18,209 --> 00:03:22,079
them side-by-side and we'll call one

00:03:19,500 --> 00:03:25,980
CSer one cfar and everything's solved

00:03:22,079 --> 00:03:29,640
right yeah kind of but you still have

00:03:25,980 --> 00:03:32,340
these two very separate systems two sets

00:03:29,640 --> 00:03:33,810
of nodes that operator has to manage

00:03:32,340 --> 00:03:36,060
both of these in pretty different ways

00:03:33,810 --> 00:03:37,980
and actually it's a bit sad the

00:03:36,060 --> 00:03:40,709
communities are still kind of separate

00:03:37,980 --> 00:03:43,500
even though they're interacting better

00:03:40,709 --> 00:03:46,350
they're not really integrated as much as

00:03:43,500 --> 00:03:47,609
you would hope that they might be and as

00:03:46,350 --> 00:03:48,600
an app developer you're not really

00:03:47,609 --> 00:03:51,630
getting any of the features of

00:03:48,600 --> 00:03:53,549
kubernetes right your apps are in this

00:03:51,630 --> 00:03:55,799
walled garden and you can't take

00:03:53,549 --> 00:03:57,180
advantage of custom scheduling or

00:03:55,799 --> 00:04:01,890
anything like that there might be in the

00:03:57,180 --> 00:04:04,470
kubernetes ecosystem so we've had

00:04:01,890 --> 00:04:07,530
various ways of trying to do this better

00:04:04,470 --> 00:04:09,180
or differently one we spent a lot of

00:04:07,530 --> 00:04:11,940
time working on and how to talk about

00:04:09,180 --> 00:04:13,440
last year actually was why don't we just

00:04:11,940 --> 00:04:16,530
write a boss CPI that deploys to

00:04:13,440 --> 00:04:18,959
kubernetes right Bossi's great

00:04:16,530 --> 00:04:20,669
but has this CPI abstraction which is

00:04:18,959 --> 00:04:21,200
why you can deploy Cloud Foundry to any

00:04:20,669 --> 00:04:22,790
cloud

00:04:21,200 --> 00:04:26,180
you like right you can deploy it to

00:04:22,790 --> 00:04:28,520
Amazon or TCP or SoftLayer or IBM or

00:04:26,180 --> 00:04:30,700
wherever and it doesn't matter right so

00:04:28,520 --> 00:04:34,610
why don't we just treat kubernetes is a

00:04:30,700 --> 00:04:37,010
modern is and deploy it to that and you

00:04:34,610 --> 00:04:38,780
get some advantages from this but your

00:04:37,010 --> 00:04:40,640
app developer still doesn't get any of

00:04:38,780 --> 00:04:43,490
advantages of kubernetes I still sitting

00:04:40,640 --> 00:04:44,900
higher up you still have to operate both

00:04:43,490 --> 00:04:48,350
of them you operate still has to operate

00:04:44,900 --> 00:04:51,020
Diego and garden as well as your Cuban

00:04:48,350 --> 00:04:52,580
Fu stuff so you're not really getting

00:04:51,020 --> 00:04:54,230
the benefits you just sort of put one of

00:04:52,580 --> 00:04:57,590
them on top of each on top of the other

00:04:54,230 --> 00:05:00,380
so we looked at this Fissel approach

00:04:57,590 --> 00:05:02,450
which is Suzy this approach originally

00:05:00,380 --> 00:05:04,940
she is to take the boss releases convert

00:05:02,450 --> 00:05:08,210
them into containers and then put those

00:05:04,940 --> 00:05:10,970
onto kubernetes and this is nice because

00:05:08,210 --> 00:05:13,100
you don't have to you don't have both

00:05:10,970 --> 00:05:14,690
Bosh and kubernetes sort of both

00:05:13,100 --> 00:05:17,450
fighting over your set of nodes you have

00:05:14,690 --> 00:05:18,920
kind of a native containerized cloud

00:05:17,450 --> 00:05:20,930
foundry which means you can use more of

00:05:18,920 --> 00:05:22,280
the kubernetes features and actually get

00:05:20,930 --> 00:05:24,320
something out with the fact that you put

00:05:22,280 --> 00:05:26,500
this layer in there but it's still

00:05:24,320 --> 00:05:29,210
you've still got Diego you still got

00:05:26,500 --> 00:05:31,910
kubernetes your app developers still

00:05:29,210 --> 00:05:33,380
can't use any of the kubernetes features

00:05:31,910 --> 00:05:36,170
and your operators still needs to know

00:05:33,380 --> 00:05:38,060
about both of these systems there's a

00:05:36,170 --> 00:05:39,080
side one which garden the garden team

00:05:38,060 --> 00:05:40,670
are doing at the moment which is well

00:05:39,080 --> 00:05:42,290
why don't we have garden use container D

00:05:40,670 --> 00:05:44,780
and then at least we'd be able to use

00:05:42,290 --> 00:05:47,570
the same container engine and maybe

00:05:44,780 --> 00:05:52,730
share some nodes but that still doesn't

00:05:47,570 --> 00:05:54,680
really solve the problems so why did all

00:05:52,730 --> 00:05:57,170
of these solutions keep failing what's

00:05:54,680 --> 00:05:59,210
the fundamental problem that we keep

00:05:57,170 --> 00:06:00,770
running into here I think the

00:05:59,210 --> 00:06:04,130
fundamental problem is this it's layers

00:06:00,770 --> 00:06:06,500
right if you keep adding layers no

00:06:04,130 --> 00:06:09,560
matter how great each of the layers is

00:06:06,500 --> 00:06:12,470
your life doesn't get simpler you only

00:06:09,560 --> 00:06:14,210
get a benefit when you replace something

00:06:12,470 --> 00:06:16,670
you have to take something away if you

00:06:14,210 --> 00:06:18,710
keep adding really good things you still

00:06:16,670 --> 00:06:23,870
end up with increasingly complicated

00:06:18,710 --> 00:06:25,820
things and I summarized it a few months

00:06:23,870 --> 00:06:28,130
ago by saying now you have two problems

00:06:25,820 --> 00:06:29,810
right when you put one of these things

00:06:28,130 --> 00:06:31,070
on top of each other you have two

00:06:29,810 --> 00:06:33,290
problems you have two things to manage

00:06:31,070 --> 00:06:35,000
and actually for a lot of these

00:06:33,290 --> 00:06:37,580
solutions instead of it being n

00:06:35,000 --> 00:06:39,740
problems from Cloud Foundry application

00:06:37,580 --> 00:06:41,390
one time and M problems from Cloud

00:06:39,740 --> 00:06:42,590
Foundry container one time when you

00:06:41,390 --> 00:06:45,080
fought them on top of each other you

00:06:42,590 --> 00:06:47,870
actually have n times M problems because

00:06:45,080 --> 00:06:51,140
each one can explode at each other and

00:06:47,870 --> 00:06:54,590
you've no idea what's going on so why

00:06:51,140 --> 00:06:59,270
don't we do option 5 I think this is the

00:06:54,590 --> 00:07:03,410
obvious kind of way this has been

00:06:59,270 --> 00:07:05,750
leading-- option 5 obviously is hey

00:07:03,410 --> 00:07:08,570
Cloud Foundry is a developer experience

00:07:05,750 --> 00:07:11,840
its CF push CF bind service

00:07:08,570 --> 00:07:14,090
don't push to cloud kubernetes is

00:07:11,840 --> 00:07:16,930
an operator experience in a scheduler

00:07:14,090 --> 00:07:19,730
it's a really great scheduler that's

00:07:16,930 --> 00:07:23,210
clearly does a lot of what we need why

00:07:19,730 --> 00:07:25,130
don't we just use coop as a CF scheduler

00:07:23,210 --> 00:07:28,220
and get the best of both worlds right

00:07:25,130 --> 00:07:31,100
and that way your app developer is happy

00:07:28,220 --> 00:07:35,840
your operator is happy everyone is happy

00:07:31,100 --> 00:07:37,610
why don't we all be happy right well

00:07:35,840 --> 00:07:39,710
there are there are so there are some

00:07:37,610 --> 00:07:41,270
reasons right now so there are reasons

00:07:39,710 --> 00:07:43,070
we didn't do this in the past why don't

00:07:41,270 --> 00:07:44,750
we do this because cube is a lot bigger

00:07:43,070 --> 00:07:46,550
than Diego and that used to be a problem

00:07:44,750 --> 00:07:49,970
I'm it's a much bigger thing for us to

00:07:46,550 --> 00:07:52,700
maintain then a small scheduler where we

00:07:49,970 --> 00:07:54,800
can operate quickly and you need to move

00:07:52,700 --> 00:07:57,710
fast sometimes it's important to really

00:07:54,800 --> 00:07:59,780
ask about every dependency what value is

00:07:57,710 --> 00:08:01,910
that bringing to you because there's an

00:07:59,780 --> 00:08:03,970
opportunity cost to pulling that in that

00:08:01,910 --> 00:08:06,530
could be spent on other stuff and

00:08:03,970 --> 00:08:07,910
frankly who cares as a Cloud Foundry you

00:08:06,530 --> 00:08:09,770
so what does it matter what the

00:08:07,910 --> 00:08:13,850
scheduler is I'm going to do a CF push

00:08:09,770 --> 00:08:15,890
and I'm not going to see it so why why

00:08:13,850 --> 00:08:18,229
do we want to do this if if these are

00:08:15,890 --> 00:08:19,430
all true well basically lots of bullet

00:08:18,229 --> 00:08:22,220
points what it comes down to is

00:08:19,430 --> 00:08:25,220
kubernetes is great scheduler scheduling

00:08:22,220 --> 00:08:27,610
is commoditized and it turns out that so

00:08:25,220 --> 00:08:30,590
many cloud foundry customers now have

00:08:27,610 --> 00:08:32,750
kubernetes for cloud foundry contain

00:08:30,590 --> 00:08:35,000
around time or to run their functions

00:08:32,750 --> 00:08:37,700
that they're already having to operate

00:08:35,000 --> 00:08:39,950
it we're already having to figure out

00:08:37,700 --> 00:08:42,289
how to operate it and how to make that

00:08:39,950 --> 00:08:44,959
something that works for users via

00:08:42,289 --> 00:08:48,050
things like CFC are so given we're

00:08:44,959 --> 00:08:49,309
already doing it wouldn't it be nice for

00:08:48,050 --> 00:08:51,799
those users

00:08:49,309 --> 00:08:54,049
- let them reuse that for their app

00:08:51,799 --> 00:08:55,549
runtime and that's basically what it

00:08:54,049 --> 00:08:56,899
comes down to and because it's

00:08:55,549 --> 00:08:57,889
commoditized you've got coop as a

00:08:56,899 --> 00:08:59,779
service

00:08:57,889 --> 00:09:01,850
you've got ops teams already know how to

00:08:59,779 --> 00:09:05,419
use it there's a big community with lots

00:09:01,850 --> 00:09:07,669
available skill for it and frankly it

00:09:05,419 --> 00:09:09,769
lets us focus on the really important

00:09:07,669 --> 00:09:11,869
stuff in my opinion which is not pushing

00:09:09,769 --> 00:09:14,209
 to cloud right because if we move

00:09:11,869 --> 00:09:16,040
the scheduler piece out then we can stop

00:09:14,209 --> 00:09:18,019
having the conversation about which

00:09:16,040 --> 00:09:20,329
scheduler is better or about how Diego

00:09:18,019 --> 00:09:22,369
and Cloud Foundry compare or cloud

00:09:20,329 --> 00:09:24,109
foundry and kubernetes compare we can

00:09:22,369 --> 00:09:27,669
start having the real conversation which

00:09:24,109 --> 00:09:30,049
is about CF push and not pushing

00:09:27,669 --> 00:09:33,049
so what did we build let's talk about

00:09:30,049 --> 00:09:37,809
what this actually looks like and Andrew

00:09:33,049 --> 00:09:37,809
will do that ok so what did we build

00:09:40,329 --> 00:09:45,019
there we go

00:09:41,749 --> 00:09:46,759
ok so first we'll talk about the the

00:09:45,019 --> 00:09:48,049
four main things that we built and then

00:09:46,759 --> 00:09:51,019
we'll talk a little bit about you know

00:09:48,049 --> 00:09:53,179
what what we need to do more and how

00:09:51,019 --> 00:09:56,480
things are going so the four things we

00:09:53,179 --> 00:09:58,699
have is OPI and I'll talk about each of

00:09:56,480 --> 00:10:01,730
these individually sync registry and

00:09:58,699 --> 00:10:05,509
stager knitties I think we're gonna call

00:10:01,730 --> 00:10:09,889
it good good name I think it's a good

00:10:05,509 --> 00:10:13,069
name so OPI and and basically OPI is the

00:10:09,889 --> 00:10:16,549
main thrust of this proposal and work

00:10:13,069 --> 00:10:18,529
it's it's to provide an interface and we

00:10:16,549 --> 00:10:20,889
called it the orchestrator provider

00:10:18,529 --> 00:10:24,919
interface which is an abstraction over

00:10:20,889 --> 00:10:27,769
what goes to the scheduler from from CF

00:10:24,919 --> 00:10:32,419
right and so it's inspired by diego

00:10:27,769 --> 00:10:36,230
seller P's and tasks and just the the

00:10:32,419 --> 00:10:39,789
CPI model right so it's the API we will

00:10:36,230 --> 00:10:42,049
communicate from CF to either Diego or

00:10:39,789 --> 00:10:47,239
kubernetes so that you couldn't pick and

00:10:42,049 --> 00:10:49,999
choose so next thing is is sink or sink

00:10:47,239 --> 00:10:54,230
or another reason Jules is a really bad

00:10:49,999 --> 00:10:55,819
name er originally sink from Diego was N

00:10:54,230 --> 00:10:59,569
Sync and I think it's because they like

00:10:55,819 --> 00:11:01,970
Justin Timberlake really a lot but it's

00:10:59,569 --> 00:11:05,060
really the the convergence loop that

00:11:01,970 --> 00:11:06,500
checks what's in cf and decides what

00:11:05,060 --> 00:11:09,259
should be in Diego or in the

00:11:06,500 --> 00:11:11,899
orchestration layer and then make sure

00:11:09,259 --> 00:11:13,670
that they're in sync right so it

00:11:11,899 --> 00:11:16,240
downloads the stage app as a docker

00:11:13,670 --> 00:11:19,250
image and it creates kubernetes

00:11:16,240 --> 00:11:21,949
deployments inside kubernetes now right

00:11:19,250 --> 00:11:26,870
there is another piece to NSYNC which is

00:11:21,949 --> 00:11:29,540
a API layer where cloud controller will

00:11:26,870 --> 00:11:34,100
send requests to start and stop tasks

00:11:29,540 --> 00:11:36,589
and and an LR piece that's to be another

00:11:34,100 --> 00:11:38,120
one of the items that's to be done right

00:11:36,589 --> 00:11:40,730
now we've we are just using the sync

00:11:38,120 --> 00:11:42,410
loop right now but it's once we have

00:11:40,730 --> 00:11:45,740
that it'd be very easy to implement the

00:11:42,410 --> 00:11:47,420
the other two pieces okay so the next

00:11:45,740 --> 00:11:50,240
thing is the registry so we implement a

00:11:47,420 --> 00:11:53,569
registry that is an OCR registry that

00:11:50,240 --> 00:11:57,170
vendors vents the images based on the CF

00:11:53,569 --> 00:11:59,629
droplets and on the CF Linux FS to base

00:11:57,170 --> 00:12:01,670
and it still use droplets so we're just

00:11:59,629 --> 00:12:05,240
you know generated in the droplets that

00:12:01,670 --> 00:12:07,279
CF uses and be able to create a no CI

00:12:05,240 --> 00:12:10,819
image from that and then run inside

00:12:07,279 --> 00:12:14,360
kubernetes and now our favorite name

00:12:10,819 --> 00:12:17,420
stage or Nettie's it implements staging

00:12:14,360 --> 00:12:19,939
inside kubernetes by running a job write

00:12:17,420 --> 00:12:21,800
a single one off task like what happens

00:12:19,939 --> 00:12:24,500
in diego is we run a task to do the

00:12:21,800 --> 00:12:26,689
staging to upload the bits and it just

00:12:24,500 --> 00:12:29,209
runs as a one-off staging task it does

00:12:26,689 --> 00:12:32,000
full build pack detection etc just

00:12:29,209 --> 00:12:34,309
exactly like it's done in in CF on Diego

00:12:32,000 --> 00:12:36,559
and then up light uploads the droplets

00:12:34,309 --> 00:12:40,579
in through the Cloud Controller API to

00:12:36,559 --> 00:12:44,029
upload so that's what we have built so

00:12:40,579 --> 00:12:47,569
far so what's next well we still need to

00:12:44,029 --> 00:12:50,500
build rotameter register the routes TPS

00:12:47,569 --> 00:12:52,730
log streaming a bunch of other stuff oh

00:12:50,500 --> 00:12:54,649
wait we already built route in there

00:12:52,730 --> 00:12:57,769
yeah we did route emitter this about a

00:12:54,649 --> 00:13:00,649
week ago so we do have in the demo that

00:12:57,769 --> 00:13:03,050
that Julian's going to show the routes

00:13:00,649 --> 00:13:05,689
are already registered and in the go

00:13:03,050 --> 00:13:11,509
router but we still have TPS log

00:13:05,689 --> 00:13:14,709
streaming etc to be done so now let's do

00:13:11,509 --> 00:13:14,709
the demo cuz that's way cooler

00:13:18,870 --> 00:13:30,190
okay yeah

00:13:21,270 --> 00:13:36,790
we're switching monitors now hopefully

00:13:30,190 --> 00:13:41,890
it shows up that will be hard to hold

00:13:36,790 --> 00:13:45,340
this so a neat both hands okay so let's

00:13:41,890 --> 00:13:47,290
do the demo I will first explain what

00:13:45,340 --> 00:13:50,470
you will see here on these four paints

00:13:47,290 --> 00:13:57,750
so on the right two paints I will do a

00:13:50,470 --> 00:14:01,720
watch on the kubernetes parts and watch

00:13:57,750 --> 00:14:06,030
on the kubernetes jobs so we can see

00:14:01,720 --> 00:14:06,030
that there are no resources yet and

00:14:07,980 --> 00:14:18,180
larger I will try it it was better

00:14:19,650 --> 00:14:27,490
that's good

00:14:22,139 --> 00:14:30,249
okay so we're stopped okay and here we

00:14:27,490 --> 00:14:34,269
will see in the upper left pane will see

00:14:30,249 --> 00:14:38,709
the CF push and in the lower left pane I

00:14:34,269 --> 00:14:40,269
will show the staging logs and also the

00:14:38,709 --> 00:14:43,660
deployments that are appearing on

00:14:40,269 --> 00:14:48,579
kubernetes so let's just start in CF

00:14:43,660 --> 00:14:51,129
push Dora to coop let's see what happens

00:14:48,579 --> 00:14:52,930
so the first thing you see is it's

00:14:51,129 --> 00:14:55,990
starting creating the app binding the

00:14:52,930 --> 00:14:59,199
rels uploading the app it's and after

00:14:55,990 --> 00:15:01,809
it's uploaded it will start with the

00:14:59,199 --> 00:15:04,930
staging and you immediately see that a

00:15:01,809 --> 00:15:08,319
job and a pod is running on kubernetes

00:15:04,930 --> 00:15:11,850
doing the staging and we will now take a

00:15:08,319 --> 00:15:11,850
look at the locks if I'm fast enough

00:15:12,329 --> 00:15:22,209
coop locks let's see whether F and now

00:15:19,269 --> 00:15:24,189
we can see okay it's already almost

00:15:22,209 --> 00:15:26,470
through it's done the staging staging is

00:15:24,189 --> 00:15:32,350
completed so the next thing that we will

00:15:26,470 --> 00:15:39,449
see is the deployment appearing in who

00:15:32,350 --> 00:15:43,329
get deployment and there it is already

00:15:39,449 --> 00:15:46,809
and the pot is also running at that

00:15:43,329 --> 00:15:50,559
point the app is deployed to kubernetes

00:15:46,809 --> 00:15:53,740
so it took less than a minute and we

00:15:50,559 --> 00:15:56,889
pushed an app to kubernetes with a CF

00:15:53,740 --> 00:16:03,009
experience and now let's just curl that

00:15:56,889 --> 00:16:07,029
app that was my test before that one so

00:16:03,009 --> 00:16:09,129
called aura hi I'm Dora and yeah that's

00:16:07,029 --> 00:16:10,310
about it we just pushed that up to

00:16:09,129 --> 00:16:17,160
kubernetes

00:16:10,310 --> 00:16:20,380
[Applause]

00:16:17,160 --> 00:16:23,530
nice so I think we have zero more slides

00:16:20,380 --> 00:16:26,140
because how would you follow that but

00:16:23,530 --> 00:16:28,380
we're we're very happy to take any

00:16:26,140 --> 00:16:28,380
questions

00:16:33,330 --> 00:16:39,340
plan to add education into the tcp

00:16:36,220 --> 00:16:41,200
router or just the quran so at the

00:16:39,340 --> 00:16:43,600
moment we're just focusing on the

00:16:41,200 --> 00:16:47,050
regular CF push and then we'll start to

00:16:43,600 --> 00:16:52,780
add features like tcp routing and things

00:16:47,050 --> 00:16:54,040
like that so I would so States they

00:16:52,780 --> 00:16:56,950
being this somewhat obvious but I think

00:16:54,040 --> 00:16:59,320
it's worth stating this is an MVP this

00:16:56,950 --> 00:17:01,750
is not complete and there's a decent

00:16:59,320 --> 00:17:03,670
amount of work to make this complete but

00:17:01,750 --> 00:17:07,120
it does show you that you really can get

00:17:03,670 --> 00:17:10,540
an end-to-end CF push using this

00:17:07,120 --> 00:17:12,370
approach so it's a proof of concept and

00:17:10,540 --> 00:17:13,810
it does prove the concepts but there's

00:17:12,370 --> 00:17:16,660
going to be a lot of edges that we need

00:17:13,810 --> 00:17:24,190
to do to complete the whole of what

00:17:16,660 --> 00:17:25,630
Diego does for you today yeah so I mean

00:17:24,190 --> 00:17:27,970
this is a lot of information to digest

00:17:25,630 --> 00:17:30,190
but some of the approaches that you

00:17:27,970 --> 00:17:33,400
mentioned earlier trying to fit the big

00:17:30,190 --> 00:17:35,530
elephant in the room we try that but

00:17:33,400 --> 00:17:37,540
this approach what I understand I just

00:17:35,530 --> 00:17:39,940
want to make sure I understand it

00:17:37,540 --> 00:17:43,000
correctly so you're saying basically

00:17:39,940 --> 00:17:45,280
we're gonna use the cube kubernetes to

00:17:43,000 --> 00:17:47,680
replace the garden sea and the garden

00:17:45,280 --> 00:17:49,510
container is that I've got an anti-ager

00:17:47,680 --> 00:17:52,390
and Diego is what you're trying to say

00:17:49,510 --> 00:17:55,450
and not replace so so it would be an

00:17:52,390 --> 00:17:57,670
option so this is an approach that we've

00:17:55,450 --> 00:17:59,860
entirely stolen from docker right

00:17:57,670 --> 00:18:02,020
lots of people like swarm most people

00:17:59,860 --> 00:18:03,850
like kubernetes so doc you said let you

00:18:02,020 --> 00:18:05,980
pick if you've got an investment in coop

00:18:03,850 --> 00:18:07,510
will let you use coop and if you like

00:18:05,980 --> 00:18:10,450
the features the swarm gives you you can

00:18:07,510 --> 00:18:11,920
use swarm in the same way I think a lot

00:18:10,450 --> 00:18:14,170
of people are going to want to stay with

00:18:11,920 --> 00:18:16,300
Diego no because it gives you this nice

00:18:14,170 --> 00:18:18,730
integrated all-in-one experience it's

00:18:16,300 --> 00:18:21,400
very simple it's tailored for stateless

00:18:18,730 --> 00:18:23,350
apps okay but on the other hand a lot of

00:18:21,400 --> 00:18:25,960
people have investments and skills and

00:18:23,350 --> 00:18:27,820
existing kubernetes deployments now

00:18:25,960 --> 00:18:30,190
either for CSer

00:18:27,820 --> 00:18:32,260
functions which offer run on a

00:18:30,190 --> 00:18:34,120
kubernetes deployment and for those

00:18:32,260 --> 00:18:36,670
people it might well make sense to plug

00:18:34,120 --> 00:18:40,030
in kubernetes so it's not it's not an

00:18:36,670 --> 00:18:41,890
either/or is it's an abstraction and I

00:18:40,030 --> 00:18:44,200
think this is that this is the benefit

00:18:41,890 --> 00:18:45,460
of this now being commoditized right now

00:18:44,200 --> 00:18:47,320
this occasionally is kind of a kimono

00:18:45,460 --> 00:18:49,890
size thing okay we can give people

00:18:47,320 --> 00:18:52,120
choice about which one of those to use

00:18:49,890 --> 00:18:53,560
without really slowing down the higher

00:18:52,120 --> 00:18:56,110
levels because it's kind of an agreement

00:18:53,560 --> 00:18:58,930
on what what scheduling looks like yeah

00:18:56,110 --> 00:19:01,990
one thing I wanted to say is is we know

00:18:58,930 --> 00:19:04,060
that the kubernetes developer experience

00:19:01,990 --> 00:19:06,190
isn't great right it takes a long time

00:19:04,060 --> 00:19:08,470
to get an app up and running and so this

00:19:06,190 --> 00:19:10,390
is also a bonus to the kubernetes

00:19:08,470 --> 00:19:13,030
community right to be able to have a

00:19:10,390 --> 00:19:14,770
better CFD experience for kubernetes

00:19:13,030 --> 00:19:15,910
maybe that's something you know people

00:19:14,770 --> 00:19:17,950
who are already running kubernetes and

00:19:15,910 --> 00:19:24,880
they want a better way to do it

00:19:17,950 --> 00:19:27,250
yep they will have it so Cloud Foundry

00:19:24,880 --> 00:19:29,320
is kind of opinionated when you run apps

00:19:27,250 --> 00:19:31,570
like you can't have persistence and

00:19:29,320 --> 00:19:33,250
things like that but do you think that

00:19:31,570 --> 00:19:35,410
this will allow apps running on Cloud

00:19:33,250 --> 00:19:37,270
Foundry to utilize persistence or like

00:19:35,410 --> 00:19:41,590
UDP routing or things that kubernetes

00:19:37,270 --> 00:19:43,240
allows yes so so there so it's a one

00:19:41,590 --> 00:19:44,950
thing that this does and one thing we

00:19:43,240 --> 00:19:46,390
like about this approach versus some

00:19:44,950 --> 00:19:49,090
other ways people have tried to do this

00:19:46,390 --> 00:19:51,970
is it does create really first-class

00:19:49,090 --> 00:19:54,070
cube objects so what you end up with is

00:19:51,970 --> 00:19:56,620
a real deployment object it's not

00:19:54,070 --> 00:19:58,780
special in any way it's just the images

00:19:56,620 --> 00:20:01,300
are just images there's no like

00:19:58,780 --> 00:20:02,440
machinery to stream a droplet in or to

00:20:01,300 --> 00:20:04,480
do anything like that we've just created

00:20:02,440 --> 00:20:06,400
an image that is your length of stage

00:20:04,480 --> 00:20:09,310
that and giving it Skoob as their

00:20:06,400 --> 00:20:10,810
deployment so it is running in kind of a

00:20:09,310 --> 00:20:13,750
special namespace it's like it's running

00:20:10,810 --> 00:20:16,000
in a cube namespace and it's certainly

00:20:13,750 --> 00:20:18,040
not a part of MVP for you to be able to

00:20:16,000 --> 00:20:19,570
play with that and do stuff but on the

00:20:18,040 --> 00:20:22,060
other hand when you won that escape

00:20:19,570 --> 00:20:23,500
hatch of okay I've done this I see I

00:20:22,060 --> 00:20:25,660
pushed it and now I want to start

00:20:23,500 --> 00:20:27,070
working with that it should be quite

00:20:25,660 --> 00:20:30,730
easy to do that because you've actually

00:20:27,070 --> 00:20:32,920
got a real Kubb object and a real native

00:20:30,730 --> 00:20:34,300
cube object so if you want to pull the

00:20:32,920 --> 00:20:36,400
escape hatch and move it into a

00:20:34,300 --> 00:20:38,500
different namespace and start working on

00:20:36,400 --> 00:20:41,380
that yourself or even a scoop to pull

00:20:38,500 --> 00:20:42,010
down the object model for it or create a

00:20:41,380 --> 00:20:43,930
new one

00:20:42,010 --> 00:20:46,600
cuz you've got the image it should be a

00:20:43,930 --> 00:20:48,700
lot easier to do that if you want to but

00:20:46,600 --> 00:20:52,000
it's not certainly part of our initial

00:20:48,700 --> 00:20:54,970
MVP to add those features directly to CS

00:20:52,000 --> 00:20:56,170
and my personally I'd be hesitant to add

00:20:54,970 --> 00:20:57,400
them to see if user experience they

00:20:56,170 --> 00:21:00,730
think they see if user experience is

00:20:57,400 --> 00:21:13,540
about not having those features but the

00:21:00,730 --> 00:21:15,400
escape hatch is probably nice can you

00:21:13,540 --> 00:21:17,680
show us what components are running in

00:21:15,400 --> 00:21:20,110
ports what cloth laundry components so

00:21:17,680 --> 00:21:22,620
everything is containerized right and

00:21:20,110 --> 00:21:25,210
you sure yes so so just just for ease

00:21:22,620 --> 00:21:27,820
most of the components at the moment are

00:21:25,210 --> 00:21:29,800
deployed as bus jobs just because that's

00:21:27,820 --> 00:21:31,950
an easy way of because Bosch will give

00:21:29,800 --> 00:21:34,090
you easy ways of linking like the

00:21:31,950 --> 00:21:35,500
username and passwords that you need for

00:21:34,090 --> 00:21:39,010
things like cloud controller to grab the

00:21:35,500 --> 00:21:41,440
droplets or all the cube stuff runs in

00:21:39,010 --> 00:21:43,570
CF and then talks into a kubernetes for

00:21:41,440 --> 00:21:45,820
the deployments I think I think as we do

00:21:43,570 --> 00:21:49,390
this more for real it might make a lot

00:21:45,820 --> 00:21:50,650
of sense to do CR DS and API aggregation

00:21:49,390 --> 00:21:52,630
for some of these things so to use

00:21:50,650 --> 00:21:55,390
kubernetes for some of these components

00:21:52,630 --> 00:21:57,700
but at the moment we do them within kind

00:21:55,390 --> 00:22:02,350
of as as Bosch Dobbs so we are kind of

00:21:57,700 --> 00:22:05,980
replacing the CPA s1 the boss CPA which

00:22:02,350 --> 00:22:08,170
talks to though so so add that so at the

00:22:05,980 --> 00:22:11,230
moment the actual jobs and Cloud Foundry

00:22:08,170 --> 00:22:12,970
is deployed by Bosch so you have options

00:22:11,230 --> 00:22:15,460
you can continue to deploy the Cloud

00:22:12,970 --> 00:22:17,740
Foundry however you like and talk to a

00:22:15,460 --> 00:22:20,740
kubernetes which may be CSV or maybe

00:22:17,740 --> 00:22:22,960
something else or you can use one of the

00:22:20,740 --> 00:22:25,600
projects like the kubernetes CPI or like

00:22:22,960 --> 00:22:28,450
Fissel so that your Cloud Foundry jobs

00:22:25,600 --> 00:22:30,280
are also in kubernetes so that that's

00:22:28,450 --> 00:22:32,460
kind of a orthogonal problem right how

00:22:30,280 --> 00:22:35,020
do you get the Cloud Foundry bits on

00:22:32,460 --> 00:22:37,060
kubernetes and how did you get the apps

00:22:35,020 --> 00:22:38,950
Cloud Foundry creates on kubernetes and

00:22:37,060 --> 00:22:40,960
we're solving the second problem and

00:22:38,950 --> 00:22:43,180
there's quite a few approaches to the

00:22:40,960 --> 00:22:44,980
first problem but that's that's kind of

00:22:43,180 --> 00:22:48,030
out of scope for us that's that's not

00:22:44,980 --> 00:22:48,030
something we're worried about

00:22:53,740 --> 00:23:00,740
that's great cool so this is cool but

00:22:56,750 --> 00:23:02,720
obviously I'll do a free plug I guess

00:23:00,740 --> 00:23:06,160
so Dimitri and I have been working on a

00:23:02,720 --> 00:23:10,790
CPI the problem is that Jules mentioned

00:23:06,160 --> 00:23:12,530
we solve those confidently so come see

00:23:10,790 --> 00:23:14,840
that if you're coming to cube Kahn will

00:23:12,530 --> 00:23:16,730
make it public it's not necessarily a

00:23:14,840 --> 00:23:18,890
replacement for this I think you know

00:23:16,730 --> 00:23:21,170
we'll see what the community says but my

00:23:18,890 --> 00:23:24,500
issue and I guess question for this is

00:23:21,170 --> 00:23:27,920
at first you criticize the CPI approach

00:23:24,500 --> 00:23:29,540
because you'll have two problems I fail

00:23:27,920 --> 00:23:31,760
to see how you have one problem here

00:23:29,540 --> 00:23:33,590
because let's say kuba has an update

00:23:31,760 --> 00:23:35,960
you'll have to update cube and you'll

00:23:33,590 --> 00:23:37,370
have to keep it in sync let's say CF has

00:23:35,960 --> 00:23:39,380
an update right so you still have those

00:23:37,370 --> 00:23:41,660
two bombs and then more important you

00:23:39,380 --> 00:23:45,230
have another problem which is that you

00:23:41,660 --> 00:23:48,320
define a layer an API for those layers

00:23:45,230 --> 00:23:51,530
and unless kubernetes and CF are working

00:23:48,320 --> 00:23:54,290
together one or the other are gonna

00:23:51,530 --> 00:23:56,120
break that abstraction and obviously

00:23:54,290 --> 00:23:58,490
since you work in CF you probably can

00:23:56,120 --> 00:24:01,850
convince you know Eric and the rest

00:23:58,490 --> 00:24:04,040
maybe with some you know being nice to

00:24:01,850 --> 00:24:08,090
them to not break the layer but how are

00:24:04,040 --> 00:24:10,520
you gonna convince kubernetes so there's

00:24:08,090 --> 00:24:12,830
two things here right so first first is

00:24:10,520 --> 00:24:15,200
they're sort of CPI versus this and

00:24:12,830 --> 00:24:18,080
these are totally different problems so

00:24:15,200 --> 00:24:20,620
the new CPI is going to be awesome for

00:24:18,080 --> 00:24:22,790
how do I get my Cloud Foundry stuff onto

00:24:20,620 --> 00:24:25,280
kubernetes right because you're gonna

00:24:22,790 --> 00:24:27,050
it's gonna be a nice approach so you can

00:24:25,280 --> 00:24:29,090
do a Bosch deploy and now you'll Cloud

00:24:27,050 --> 00:24:31,030
Foundry and if you're not using this

00:24:29,090 --> 00:24:33,500
your Diego are running on top of coop

00:24:31,030 --> 00:24:35,630
this is solving a completely different

00:24:33,500 --> 00:24:38,060
problem which is the apps that you

00:24:35,630 --> 00:24:40,370
created with Cloud Foundry we want to

00:24:38,060 --> 00:24:42,530
run those include Nexus as well and

00:24:40,370 --> 00:24:44,810
that's just a different layer I think

00:24:42,530 --> 00:24:46,490
the second part of the question is how

00:24:44,810 --> 00:24:48,200
do you deal with the fact that you still

00:24:46,490 --> 00:24:50,690
have the kubernetes so when I say you

00:24:48,200 --> 00:24:53,450
only have what you you have two problems

00:24:50,690 --> 00:24:55,790
I'm not suggesting that once you do this

00:24:53,450 --> 00:24:58,730
you'll never have a problem again you

00:24:55,790 --> 00:25:00,770
will have problems but instead of having

00:24:58,730 --> 00:25:02,600
all of Diego and all of kubernetes to

00:25:00,770 --> 00:25:05,929
manage you will only have Cuban air

00:25:02,600 --> 00:25:07,880
is to manage as a scheduler and sorry

00:25:05,929 --> 00:25:09,440
just just one thing so in terms of that

00:25:07,880 --> 00:25:11,000
API bit in terms like how do you manage

00:25:09,440 --> 00:25:14,360
the fact that kubernetes is going to

00:25:11,000 --> 00:25:16,220
have new versions we manage it exactly

00:25:14,360 --> 00:25:18,410
how Bosch manages it so like Bosch has

00:25:16,220 --> 00:25:19,610
the CPI which gives you a little out

00:25:18,410 --> 00:25:21,559
fraction so you're not exposed to the

00:25:19,610 --> 00:25:23,630
whole thing and so you can keep that

00:25:21,559 --> 00:25:25,640
working we're doing the exact same trick

00:25:23,630 --> 00:25:27,919
it's an OPI so it's the same trick as

00:25:25,640 --> 00:25:30,440
Bosch does but at the orchestrator level

00:25:27,919 --> 00:25:32,660
instead of at the buyers level right but

00:25:30,440 --> 00:25:35,059
the point I'm making so two points

00:25:32,660 --> 00:25:38,570
besides my plug ok so I won't plug again

00:25:35,059 --> 00:25:41,179
but the point I'm making is that it's

00:25:38,570 --> 00:25:43,460
not just about getting it running the

00:25:41,179 --> 00:25:44,809
first time it's keeping it running and

00:25:43,460 --> 00:25:46,370
keeping it running while you're

00:25:44,809 --> 00:25:47,750
deploying and you're doing updates why

00:25:46,370 --> 00:25:49,760
because there are people trying to hack

00:25:47,750 --> 00:25:51,590
into the system of creating CVS and so

00:25:49,760 --> 00:25:53,510
on right so that's the number one point

00:25:51,590 --> 00:25:56,419
and the second point is that you've

00:25:53,510 --> 00:25:58,429
defined an abstraction that unless the

00:25:56,419 --> 00:26:00,320
two communities are agreeing they're

00:25:58,429 --> 00:26:02,419
gonna break now one of them may not

00:26:00,320 --> 00:26:03,590
break it because you can convince but

00:26:02,419 --> 00:26:06,049
the other one might break because it

00:26:03,590 --> 00:26:08,600
might add something new or change things

00:26:06,049 --> 00:26:10,190
that the cube interfaces are pretty

00:26:08,600 --> 00:26:12,530
stable with regards to the bits we're

00:26:10,190 --> 00:26:13,909
using they're just deployments and so

00:26:12,530 --> 00:26:16,070
you are you alright you have to worry

00:26:13,909 --> 00:26:16,700
about how you keep that cube maintained

00:26:16,070 --> 00:26:19,190
and running

00:26:16,700 --> 00:26:21,409
that's what CSE our souls so what this

00:26:19,190 --> 00:26:23,539
is saying is for people who don't want

00:26:21,409 --> 00:26:25,940
to worry about cube at all hey use the a

00:26:23,539 --> 00:26:29,539
go but if you already need to get that

00:26:25,940 --> 00:26:31,280
cube running and patched and updated use

00:26:29,539 --> 00:26:32,659
for your functions for your coop for

00:26:31,280 --> 00:26:34,820
your stateful workloads and so you

00:26:32,659 --> 00:26:37,669
already have to solve that problem then

00:26:34,820 --> 00:26:39,530
you probably don't also want to solve a

00:26:37,669 --> 00:26:42,650
secondary problem of doing that again

00:26:39,530 --> 00:26:45,799
with the AYGO right I love Diego but

00:26:42,650 --> 00:26:47,299
it's an additive problem that if you've

00:26:45,799 --> 00:26:49,309
already have to solve the second one

00:26:47,299 --> 00:26:51,590
which is a bigger problem right I'd

00:26:49,309 --> 00:26:53,480
rather only solve the Diego problem but

00:26:51,590 --> 00:26:55,640
given many people can only solve the

00:26:53,480 --> 00:26:58,549
Diego problem and have to solve the cou

00:26:55,640 --> 00:27:00,610
problem it's nice to give them the

00:26:58,549 --> 00:27:04,909
option of reusing that investment to

00:27:00,610 --> 00:27:06,380
also power their apps right and and this

00:27:04,909 --> 00:27:08,480
is a problem that most people have to

00:27:06,380 --> 00:27:10,730
face for for things like functions so

00:27:08,480 --> 00:27:12,650
whether you're using whisk or riff or

00:27:10,730 --> 00:27:14,630
any of these approaches you're probably

00:27:12,650 --> 00:27:16,160
sitting on kubernetes in terms of the

00:27:14,630 --> 00:27:17,720
things that gets spun up

00:27:16,160 --> 00:27:19,760
and you also have to worry about what if

00:27:17,720 --> 00:27:21,920
kubernetes changes there but actually

00:27:19,760 --> 00:27:25,660
the api's have reasonably stable and

00:27:21,920 --> 00:27:29,920
keep some pretty good I think about

00:27:25,660 --> 00:27:29,920
keeping things working across releases

00:27:30,520 --> 00:27:37,100
so do you expect it sounds like so like

00:27:34,850 --> 00:27:39,410
I saw you guys run coop CTL command so

00:27:37,100 --> 00:27:42,440
obviously the kubernetes cluster is also

00:27:39,410 --> 00:27:44,930
exposed with a with the API endpoint how

00:27:42,440 --> 00:27:47,210
is that set up and do you expect that

00:27:44,930 --> 00:27:49,160
users would potentially hit kubernetes

00:27:47,210 --> 00:27:51,020
directly in addition to CF push or

00:27:49,160 --> 00:27:52,310
what's the thing I think that's a

00:27:51,020 --> 00:27:54,770
decision that different people are going

00:27:52,310 --> 00:27:59,000
to make differently I'm pretty

00:27:54,770 --> 00:28:00,950
opinionated personally I think the vast

00:27:59,000 --> 00:28:03,380
majority of developers should never see

00:28:00,950 --> 00:28:08,620
kubernetes I think they should be CF

00:28:03,380 --> 00:28:11,060
pushing binding a service and reusing

00:28:08,620 --> 00:28:12,380
services for stateful stuff so they

00:28:11,060 --> 00:28:15,020
probably shouldn't ever need to do that

00:28:12,380 --> 00:28:15,470
and I think the more you can make that

00:28:15,020 --> 00:28:17,990
happen

00:28:15,470 --> 00:28:20,330
I think the happier your life is but on

00:28:17,990 --> 00:28:22,850
the other hand very clearly many people

00:28:20,330 --> 00:28:24,260
disagree with that view and do want all

00:28:22,850 --> 00:28:26,450
the power and flexibility of being able

00:28:24,260 --> 00:28:29,510
to go and have that escape hatch when

00:28:26,450 --> 00:28:31,790
they want it so it is something that I

00:28:29,510 --> 00:28:34,250
think the project is agnostic to right

00:28:31,790 --> 00:28:35,630
we want to give people both options but

00:28:34,250 --> 00:28:37,910
but the fact that you do have both

00:28:35,630 --> 00:28:39,500
options is nice so there would be

00:28:37,910 --> 00:28:40,820
alternate approaches where you just

00:28:39,500 --> 00:28:43,280
build all this stuff including at ease

00:28:40,820 --> 00:28:46,370
right and really integrated with the

00:28:43,280 --> 00:28:48,590
cube api's but in that case is very hard

00:28:46,370 --> 00:28:51,830
not to expose your app developers to all

00:28:48,590 --> 00:28:53,990
that stuff right this is saying you can

00:28:51,830 --> 00:28:56,240
this is the full sphere push experience

00:28:53,990 --> 00:28:57,590
which hides all that stuff but also if

00:28:56,240 --> 00:29:00,410
you want to look under the hood you've

00:28:57,590 --> 00:29:04,280
got a really coop native thing that's

00:29:00,410 --> 00:29:06,590
being created yeah and then also I guess

00:29:04,280 --> 00:29:08,060
you know one of the things garden kind

00:29:06,590 --> 00:29:10,700
of helps manage today is like Windows

00:29:08,060 --> 00:29:13,310
you know the windows abstraction and so

00:29:10,700 --> 00:29:15,230
I assume the thinking would just be to

00:29:13,310 --> 00:29:17,690
let the kubernetes community catch up

00:29:15,230 --> 00:29:19,040
there and and at some point right that

00:29:17,690 --> 00:29:21,320
would be that would be something you

00:29:19,040 --> 00:29:23,270
could manage there exactly that so

00:29:21,320 --> 00:29:25,280
because we've got this this abstraction

00:29:23,270 --> 00:29:27,770
we're not coupling ourselves the coop

00:29:25,280 --> 00:29:29,539
right where we're not saying we're going

00:29:27,770 --> 00:29:31,999
to make all these cubed fractions leave

00:29:29,539 --> 00:29:33,499
cup because then things like windows

00:29:31,999 --> 00:29:35,299
become really hard right because then

00:29:33,499 --> 00:29:36,859
you you are locked to kubernetes because

00:29:35,299 --> 00:29:38,690
you need all the kubernetes prim so you

00:29:36,859 --> 00:29:41,720
need that CB and all this stuff if you

00:29:38,690 --> 00:29:42,889
represent that into your api we're not

00:29:41,720 --> 00:29:45,229
doing that we're just saying if you

00:29:42,889 --> 00:29:47,149
already have a clear investment in the

00:29:45,229 --> 00:29:49,220
same way i guess it's a weird analogy in

00:29:47,149 --> 00:29:51,109
the same way today if you do CF

00:29:49,220 --> 00:29:54,080
deployment by default will deploy a

00:29:51,109 --> 00:29:55,759
Postgres database for you right but if

00:29:54,080 --> 00:29:58,340
you've already got a Postgres or a my

00:29:55,759 --> 00:30:01,399
sequel or or RDS or some other managed

00:29:58,340 --> 00:30:03,409
database you just give us the URL as a

00:30:01,399 --> 00:30:06,590
property in CF deployment and we'll use

00:30:03,409 --> 00:30:09,289
that it's a very similar thing there's a

00:30:06,590 --> 00:30:12,019
built-in scheduler just probably swarm

00:30:09,289 --> 00:30:14,899
but if you already got CSer or you've

00:30:12,019 --> 00:30:16,460
already got some Kubb as a service just

00:30:14,899 --> 00:30:18,109
give us the URL give us the API and

00:30:16,460 --> 00:30:20,720
probably give us the credentials and we

00:30:18,109 --> 00:30:22,429
can use that instead and so on Windows

00:30:20,720 --> 00:30:25,429
you just carry on happily using what you

00:30:22,429 --> 00:30:27,379
have today as soon as coop catches up on

00:30:25,429 --> 00:30:37,509
Windows you have the option of using

00:30:27,379 --> 00:30:37,509
that windows make it good

00:30:40,649 --> 00:30:46,149
just quickly you mentioned binding

00:30:43,600 --> 00:30:48,399
services is that supported now and I

00:30:46,149 --> 00:30:49,779
guess maybe a broader question like if I

00:30:48,399 --> 00:30:52,149
have questions about does this thing

00:30:49,779 --> 00:30:55,149
support X do you have a public backlog

00:30:52,149 --> 00:30:57,490
somewhere is public it's currently in

00:30:55,149 --> 00:31:01,990
github comm / Jules

00:30:57,490 --> 00:31:05,039
she's happens to be visuals / cube and

00:31:01,990 --> 00:31:09,909
you have to hear the C it's C you be

00:31:05,039 --> 00:31:11,289
sorry cube I know this is a problem and

00:31:09,909 --> 00:31:16,419
so we are going to have to rename

00:31:11,289 --> 00:31:21,730
kubernetes we will come up with a better

00:31:16,419 --> 00:31:24,039
name we hope to submit it into the you

00:31:21,730 --> 00:31:25,240
know as a proponents around some PMC

00:31:24,039 --> 00:31:27,580
soon at which point it will move

00:31:25,240 --> 00:31:30,730
hopefully assuming everyone's on board

00:31:27,580 --> 00:31:32,769
with putting this in but at the moment

00:31:30,730 --> 00:31:34,000
it's there we have some issues there and

00:31:32,769 --> 00:31:36,009
I think a lot of this will just work

00:31:34,000 --> 00:31:38,620
because it's just a case of mapping it

00:31:36,009 --> 00:31:40,600
into environment variables but I mean

00:31:38,620 --> 00:31:42,970
there's a lot of rough edges so I I

00:31:40,600 --> 00:31:46,480
doubt it works right now contributions

00:31:42,970 --> 00:31:48,580
welcome yeah yeah well so immediately

00:31:46,480 --> 00:31:50,889
starting to think about yeah volume

00:31:48,580 --> 00:31:52,600
services and contributions that much

00:31:50,889 --> 00:31:55,590
let's start with hey that was

00:31:52,600 --> 00:31:55,590
contribution

00:32:01,920 --> 00:32:07,249

YouTube URL: https://www.youtube.com/watch?v=9l3GgW95GmQ


