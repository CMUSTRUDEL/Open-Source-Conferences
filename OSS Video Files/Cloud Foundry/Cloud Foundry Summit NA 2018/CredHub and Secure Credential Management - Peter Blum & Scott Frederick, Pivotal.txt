Title: CredHub and Secure Credential Management - Peter Blum & Scott Frederick, Pivotal
Publication date: 2018-04-21
Playlist: Cloud Foundry Summit NA 2018
Description: 
	CredHub and Secure Credential Management - Peter Blum & Scott Frederick, Pivotal

 From the platform all the way down to the microservices which run upon it, secrets are everywhere and leaking them can be a costly experience. Understanding security best practices, such as encrypting secrets while in transit; encrypting secrets at rest; rotating secrets regularly; preventing secrets from unintentionally leaking when consumed by the final application; and strictly adhering to the principle of least-privilege, where an application only has access to the secrets that it needsâ€”no more, no less.....can be daunting. A new Cloud Foundry Foundation project, CredHub, was designed for these reasons. This session will take a fresh look at how to enhance security within Cloud Foundry and applications through secret management by utilizing CredHub in conjunction with Spring Cloud Services. 

About Peter Blum
Peter is a Platform Architect with Pivotal and has worked with several customers to help deploy and run Pivotal Cloud Foundry. Prior he contributed to Diego Persistence components in Cloud Foundry, as well as the RackHD CPI for BOSH.

About Scott Frederick
Scott Frederick is a Sr. Software Engineer at Pivotal, working on Spring Framework and Cloud Foundry open-source and commercial projects.

Scott has been using CloudFoundry, Java, Groovy, and Spring since the early days of each of these technologies, to solve real-world problems. Before joining Pivotal, Scott spent many years in the travel and transportation industry.
Captions: 
	00:00:00,030 --> 00:00:04,710
Peter Blum work with pivotal I'm a

00:00:02,580 --> 00:00:06,480
platform architect I'm very excited to

00:00:04,710 --> 00:00:09,030
be here then coming to Cloud Foundry

00:00:06,480 --> 00:00:11,610
summit for a long time I remember Bosch

00:00:09,030 --> 00:00:14,009
days they were the best I guess that's

00:00:11,610 --> 00:00:17,100
because I'm a wacko and I like Bosch and

00:00:14,009 --> 00:00:18,600
went to me I get Scott Frederick yeah

00:00:17,100 --> 00:00:20,310
I'm on the spring engineering team a

00:00:18,600 --> 00:00:23,100
pivotal I work on a product called

00:00:20,310 --> 00:00:24,630
spring cloud services for most of my day

00:00:23,100 --> 00:00:29,519
job we're gonna feature that in the demo

00:00:24,630 --> 00:00:32,040
here and so some a platform architect I

00:00:29,519 --> 00:00:34,290
work a lot with customers and you know

00:00:32,040 --> 00:00:36,360
one of the things that always comes up

00:00:34,290 --> 00:00:38,940
is you know how do we encrypt

00:00:36,360 --> 00:00:42,090
credentials how do we secure things how

00:00:38,940 --> 00:00:44,399
do we become compliant and whatever you

00:00:42,090 --> 00:00:46,559
want to be compliant in and it often

00:00:44,399 --> 00:00:49,770
ends up with cred hubs so we've been

00:00:46,559 --> 00:00:51,750
submitting this talk to spring one cloud

00:00:49,770 --> 00:00:52,710
foundry summit all these different

00:00:51,750 --> 00:00:54,930
things go together

00:00:52,710 --> 00:00:56,820
yeah spring one again and so it always

00:00:54,930 --> 00:00:58,980
seems to come back up on the radar so

00:00:56,820 --> 00:01:03,049
actually this time we went through and

00:00:58,980 --> 00:01:05,700
we this time we went through and we

00:01:03,049 --> 00:01:07,500
redid our presentations so if you want

00:01:05,700 --> 00:01:09,270
more of the executive pitch go take a

00:01:07,500 --> 00:01:11,310
look at our previous presentations if

00:01:09,270 --> 00:01:13,260
you want more of the actual hands-on

00:01:11,310 --> 00:01:15,330
what you can do with cred hub that's

00:01:13,260 --> 00:01:17,490
what you're gonna get today so hold on

00:01:15,330 --> 00:01:18,600
this version is fewer slides and more

00:01:17,490 --> 00:01:22,680
demo when you're welcome

00:01:18,600 --> 00:01:24,390
yep yeah so so be excited hold on buckle

00:01:22,680 --> 00:01:26,880
your seat belt let's go

00:01:24,390 --> 00:01:29,220
by the way buckle your seat belt in case

00:01:26,880 --> 00:01:31,500
we have a fire the exits are behind you

00:01:29,220 --> 00:01:34,170
this was a mandatory slide to put in

00:01:31,500 --> 00:01:37,320
here just don't trample each other on

00:01:34,170 --> 00:01:40,470
the way out okay all right so the story

00:01:37,320 --> 00:01:41,909
of cred hub you know I think I think

00:01:40,470 --> 00:01:44,280
it's pretty easy to understand if you've

00:01:41,909 --> 00:01:46,380
ever deployed Cloud Foundry how hard it

00:01:44,280 --> 00:01:49,439
is to generate credentials for Cloud

00:01:46,380 --> 00:01:53,369
Foundry right there's a multitude of CA

00:01:49,439 --> 00:01:55,649
certs Pam keys all this stuff all over

00:01:53,369 --> 00:01:59,219
the place and you know we've all

00:01:55,649 --> 00:02:01,890
probably used the OpenSSL CLI I learned

00:01:59,219 --> 00:02:04,110
from my Windows friends you know that's

00:02:01,890 --> 00:02:06,600
not even existent on Windows so if

00:02:04,110 --> 00:02:07,710
you're a dotnet guy or Windows guy it's

00:02:06,600 --> 00:02:10,319
it's hard to create all those

00:02:07,710 --> 00:02:12,120
credentials and in understanding really

00:02:10,319 --> 00:02:14,640
what those credentials are for and how

00:02:12,120 --> 00:02:16,260
to configure them is hard right

00:02:14,640 --> 00:02:18,750
and so once you get beyond that though

00:02:16,260 --> 00:02:22,110
then you know maybe one of your

00:02:18,750 --> 00:02:24,540
operators is such a unique guy he ended

00:02:22,110 --> 00:02:27,209
up taking a job for double the salary

00:02:24,540 --> 00:02:30,359
somewhere else and with him he took all

00:02:27,209 --> 00:02:33,269
your credentials so you lost all your

00:02:30,359 --> 00:02:35,819
credentials they leaked oh how do we go

00:02:33,269 --> 00:02:37,920
back and reconfigure them all right so

00:02:35,819 --> 00:02:39,480
leaking credentials is really easy and

00:02:37,920 --> 00:02:42,180
then coming back and actually changing

00:02:39,480 --> 00:02:44,400
them is hard right so it's like hey we

00:02:42,180 --> 00:02:46,560
lost that guy and now we have to go

00:02:44,400 --> 00:02:49,470
retrain somebody to actually figure out

00:02:46,560 --> 00:02:52,650
how to recreate and configure them all

00:02:49,470 --> 00:02:54,569
over again so with that that's where

00:02:52,650 --> 00:02:56,790
credit can from right it's a centralized

00:02:54,569 --> 00:02:58,620
point I really like this graph I think

00:02:56,790 --> 00:03:00,799
it really reiterates sort of you know

00:02:58,620 --> 00:03:05,129
that cred hub is is able to generate

00:03:00,799 --> 00:03:07,049
encrypt rotate and all with access

00:03:05,129 --> 00:03:08,819
control right so all around your

00:03:07,049 --> 00:03:12,180
credentials it's able to control that

00:03:08,819 --> 00:03:13,260
access to them so inside of you know

00:03:12,180 --> 00:03:16,889
we're talking about cloud foundry

00:03:13,260 --> 00:03:19,530
projects and all this you know where is

00:03:16,889 --> 00:03:22,260
where is credit uh well in Bosh there's

00:03:19,530 --> 00:03:24,239
credit hub inside of the pivotal app

00:03:22,260 --> 00:03:26,280
sorry inside of the Cloud Foundry

00:03:24,239 --> 00:03:28,470
application runtime there's cred hub

00:03:26,280 --> 00:03:31,470
right and and there's even integration

00:03:28,470 --> 00:03:33,959
into concourse and so credit hub really

00:03:31,470 --> 00:03:36,900
is is becoming a key point to the whole

00:03:33,959 --> 00:03:38,609
entire ecosystem of Cloud Foundry the

00:03:36,900 --> 00:03:40,680
one last piece that we're missing here

00:03:38,609 --> 00:03:43,199
is the Cloud Foundry container runtime

00:03:40,680 --> 00:03:44,669
and that's coming along you know I think

00:03:43,199 --> 00:03:47,069
there's gonna be some integration there

00:03:44,669 --> 00:03:50,000
with the kubernetes secrets so it's

00:03:47,069 --> 00:03:53,310
coming along and stay tuned for that

00:03:50,000 --> 00:03:55,379
so with cred hub what is credit hub

00:03:53,310 --> 00:03:58,829
right well it's a it's a micro service

00:03:55,379 --> 00:04:01,199
you know it talks to an authentication

00:03:58,829 --> 00:04:03,900
provider right so how do I know who's

00:04:01,199 --> 00:04:06,299
actually able to access credentials well

00:04:03,900 --> 00:04:08,220
I have an authentication provider in

00:04:06,299 --> 00:04:11,510
most cases that's gonna be UA a through

00:04:08,220 --> 00:04:13,799
OAuth 2 and then once I have

00:04:11,510 --> 00:04:15,810
authenticated and made sure that you

00:04:13,799 --> 00:04:17,459
know Peter Blum is able to see

00:04:15,810 --> 00:04:19,349
credentials where do we store those

00:04:17,459 --> 00:04:22,169
credentials right we store them in a

00:04:19,349 --> 00:04:23,969
sequel database and before we store them

00:04:22,169 --> 00:04:27,190
in that database of course we want to

00:04:23,969 --> 00:04:30,190
encrypt them so by default we use AES

00:04:27,190 --> 00:04:32,620
2:56 to encrypt them you can actually

00:04:30,190 --> 00:04:34,750
add your own encryption providers if you

00:04:32,620 --> 00:04:37,840
want on AWS I've never done it it's like

00:04:34,750 --> 00:04:39,250
$5,000 for this hardware module so I

00:04:37,840 --> 00:04:40,650
don't really have that kind of change to

00:04:39,250 --> 00:04:44,830
throw around they don't pay me that well

00:04:40,650 --> 00:04:47,110
but you know if you're in yeah they

00:04:44,830 --> 00:04:49,870
should you know always doing these talks

00:04:47,110 --> 00:04:51,610
so and so how do we actually interface

00:04:49,870 --> 00:04:53,620
with credit so we've actually you know

00:04:51,610 --> 00:04:55,210
how do we get in there login create

00:04:53,620 --> 00:04:58,120
these credentials rotate them and

00:04:55,210 --> 00:05:01,870
encrypt them well there's actually three

00:04:58,120 --> 00:05:03,430
different ways to do that and really the

00:05:01,870 --> 00:05:05,380
first one you know cred hub was

00:05:03,430 --> 00:05:07,600
originally designed for for platform

00:05:05,380 --> 00:05:09,850
level credentials right and so the first

00:05:07,600 --> 00:05:12,880
one is is the Boche conflict server I

00:05:09,850 --> 00:05:16,830
want to emphasize Bosh config server not

00:05:12,880 --> 00:05:20,470
spring config server okay difference

00:05:16,830 --> 00:05:22,990
different implementation - mm-hmm so so

00:05:20,470 --> 00:05:25,330
anyhow inside of there you know you you

00:05:22,990 --> 00:05:27,700
might never understand what the boss

00:05:25,330 --> 00:05:29,170
config server is but when you go in and

00:05:27,700 --> 00:05:31,150
you create a box manifest and you use

00:05:29,170 --> 00:05:32,650
cred hub you're actually using an

00:05:31,150 --> 00:05:35,919
abstraction called the config server

00:05:32,650 --> 00:05:37,419
there so if you're using bosh manifest

00:05:35,919 --> 00:05:40,210
you're using credit up if you're using

00:05:37,419 --> 00:05:41,980
the cred hub CLI so we'll have a little

00:05:40,210 --> 00:05:43,840
demo actually showing the credit hub CLI

00:05:41,980 --> 00:05:46,030
so there's the cred hub CLI and

00:05:43,840 --> 00:05:48,310
underneath the covers the credible is of

00:05:46,030 --> 00:05:50,200
course using the API wrapped around cred

00:05:48,310 --> 00:05:53,560
hub or you can do that with any rest

00:05:50,200 --> 00:05:55,750
client you want my favorite today is

00:05:53,560 --> 00:05:57,669
golang but you know choose your flavor

00:05:55,750 --> 00:05:59,950
right

00:05:57,669 --> 00:06:02,230
so the cred hub API was kind of alluding

00:05:59,950 --> 00:06:04,300
to that a little bit you know it's

00:06:02,230 --> 00:06:06,220
broken down really into you know the

00:06:04,300 --> 00:06:08,919
operations and authentication right so

00:06:06,220 --> 00:06:11,710
authentication wise you can use OAuth 2

00:06:08,919 --> 00:06:15,520
with you AAA or you can use em TLS with

00:06:11,710 --> 00:06:17,919
a cert and a key pretty simple we'll

00:06:15,520 --> 00:06:20,740
have an example of using UA a and

00:06:17,919 --> 00:06:22,930
logging in we didn't really want to get

00:06:20,740 --> 00:06:25,350
into the weeds with em TLS but if you

00:06:22,930 --> 00:06:28,150
really do let me know I'll show you that

00:06:25,350 --> 00:06:30,190
as far as the operations right they're

00:06:28,150 --> 00:06:32,260
really broken down into I want to just

00:06:30,190 --> 00:06:33,940
focus on the first two here but there's

00:06:32,260 --> 00:06:35,830
really two operations there's the

00:06:33,940 --> 00:06:38,560
credential operations and then there's

00:06:35,830 --> 00:06:39,880
the permission operations so we can get

00:06:38,560 --> 00:06:41,800
set

00:06:39,880 --> 00:06:43,090
delete credentials and then there's an

00:06:41,800 --> 00:06:45,400
extra one in there that I skipped over

00:06:43,090 --> 00:06:47,260
called generate credentials and so what

00:06:45,400 --> 00:06:49,000
that is is you can actually define what

00:06:47,260 --> 00:06:51,070
you want for credential but you don't

00:06:49,000 --> 00:06:52,630
have to say what the credential is right

00:06:51,070 --> 00:06:55,150
so I could say I have a password and I

00:06:52,630 --> 00:06:57,190
needed to have X characters in it and I

00:06:55,150 --> 00:06:58,750
can do all that and and I can ask credit

00:06:57,190 --> 00:07:00,510
hub to actually generate that for me and

00:06:58,750 --> 00:07:03,280
I never even know what the password is

00:07:00,510 --> 00:07:04,780
you can do that with CA certs you can do

00:07:03,280 --> 00:07:06,760
that with all these different credential

00:07:04,780 --> 00:07:08,440
types at the bottom so you can see the

00:07:06,760 --> 00:07:11,410
credential types or any value any

00:07:08,440 --> 00:07:14,620
password and user users consisting of a

00:07:11,410 --> 00:07:18,070
user and a password any JSON which we

00:07:14,620 --> 00:07:21,430
use in screen cloud services any

00:07:18,070 --> 00:07:24,310
certificate any IRS a key and then any

00:07:21,430 --> 00:07:25,990
SSH right an SSH I kind of had a

00:07:24,310 --> 00:07:29,980
question about that and really it's just

00:07:25,990 --> 00:07:32,230
RSA with the with a fingerprint so and

00:07:29,980 --> 00:07:33,910
then there's the their permission right

00:07:32,230 --> 00:07:35,530
so on top of these credentials there's

00:07:33,910 --> 00:07:37,480
permissions so who actually has access

00:07:35,530 --> 00:07:40,270
to these credentials how do we manage

00:07:37,480 --> 00:07:41,620
that access right and you'll see as we

00:07:40,270 --> 00:07:43,180
move through here there's different ways

00:07:41,620 --> 00:07:44,890
of managing those permissions and then

00:07:43,180 --> 00:07:49,360
and then there's this really odd

00:07:44,890 --> 00:07:50,860
endpoint called interpolate okay a fancy

00:07:49,360 --> 00:07:52,750
word but essentially it's just for Cloud

00:07:50,860 --> 00:07:54,400
Foundry and we'll talk a little bit more

00:07:52,750 --> 00:07:56,440
about that but essentially you know we

00:07:54,400 --> 00:07:59,140
have this vcap services that has all the

00:07:56,440 --> 00:08:01,750
keys and we want to actually get values

00:07:59,140 --> 00:08:02,860
right out of those keys and so we've got

00:08:01,750 --> 00:08:05,560
is we've got an endpoint that you can

00:08:02,860 --> 00:08:07,360
just send this whole vcap JSON into and

00:08:05,560 --> 00:08:09,880
when I get out of it is all my secrets

00:08:07,360 --> 00:08:12,580
right and so we'll talk a little bit

00:08:09,880 --> 00:08:14,230
more about that later on and of course I

00:08:12,580 --> 00:08:17,260
want to point out here there is a whole

00:08:14,230 --> 00:08:18,790
API documentation right here double

00:08:17,260 --> 00:08:21,820
check that you ever have questions on

00:08:18,790 --> 00:08:23,620
the API and so first you know I'm gonna

00:08:21,820 --> 00:08:26,380
start off with the with the inferred

00:08:23,620 --> 00:08:28,780
infrastructure section you know going

00:08:26,380 --> 00:08:30,510
back to my core with Bosh so let's let's

00:08:28,780 --> 00:08:32,860
show you sort of what that looks like

00:08:30,510 --> 00:08:34,419
and so what it really you know it

00:08:32,860 --> 00:08:36,520
simplifies manifests right I think

00:08:34,419 --> 00:08:39,160
that's I think for me this is one of the

00:08:36,520 --> 00:08:42,070
one of the best parts of it is is I have

00:08:39,160 --> 00:08:45,820
manifest that you know CF manifests that

00:08:42,070 --> 00:08:47,130
went from 5,000 lines to hundred lines

00:08:45,820 --> 00:08:49,890
you know

00:08:47,130 --> 00:08:52,140
and it's all due to it's all due to

00:08:49,890 --> 00:08:54,360
credit up right so you can see here I'm

00:08:52,140 --> 00:08:55,800
using I'm just generating a CA cert and

00:08:54,360 --> 00:08:57,840
then I'm putting that see a certain side

00:08:55,800 --> 00:09:02,190
of my manifest and that's taking up

00:08:57,840 --> 00:09:03,720
roughly 18 lines here versus here the

00:09:02,190 --> 00:09:05,430
way that I'm generating it is is I'm

00:09:03,720 --> 00:09:06,960
having cred hub generated for me and

00:09:05,430 --> 00:09:08,610
that's taking seven lines and then when

00:09:06,960 --> 00:09:10,890
I want to insert it I just put in one

00:09:08,610 --> 00:09:14,310
line right so it simplifies it down to

00:09:10,890 --> 00:09:16,290
one line and so with that what do I get

00:09:14,310 --> 00:09:17,910
well at the end of the day what I get is

00:09:16,290 --> 00:09:19,650
I get a manifest that I can then share

00:09:17,910 --> 00:09:22,080
with everybody in my organization

00:09:19,650 --> 00:09:24,120
whether that's or github however you

00:09:22,080 --> 00:09:26,040
want to share it right and then I'll

00:09:24,120 --> 00:09:28,650
actually be able to relax the access to

00:09:26,040 --> 00:09:30,600
my boss director right so I can actually

00:09:28,650 --> 00:09:32,340
have other people log in run Bosch

00:09:30,600 --> 00:09:33,510
manifest and they're not gonna see my

00:09:32,340 --> 00:09:36,210
Postgres dB

00:09:33,510 --> 00:09:38,310
they're not gonna see my oracle DB

00:09:36,210 --> 00:09:39,930
password you know my admin password

00:09:38,310 --> 00:09:43,110
that's in there right and so that's a

00:09:39,930 --> 00:09:44,610
really really great you know feature I

00:09:43,110 --> 00:09:46,950
think with cred hubs so let me show you

00:09:44,610 --> 00:09:49,650
some sample manifests that I have out

00:09:46,950 --> 00:09:52,710
there so this is another example right

00:09:49,650 --> 00:09:54,750
so I I deployed concourse one with what

00:09:52,710 --> 00:09:56,370
I call the legacy deployment which is

00:09:54,750 --> 00:09:58,320
where we had all of the all of the

00:09:56,370 --> 00:10:02,970
secrets in there there's a big of my

00:09:58,320 --> 00:10:05,160
secrets I think it was that good pretty

00:10:02,970 --> 00:10:07,740
good alright so so you can see over here

00:10:05,160 --> 00:10:10,380
that in this one I've got my private

00:10:07,740 --> 00:10:13,290
keys you know my public key all the

00:10:10,380 --> 00:10:15,390
stuff in here right and to be honest

00:10:13,290 --> 00:10:18,330
with you I don't even know where I got

00:10:15,390 --> 00:10:20,340
this stuff from so that's nuts I think

00:10:18,330 --> 00:10:22,800
how complicated creating credentials is

00:10:20,340 --> 00:10:24,960
right you know it's it can be hard to

00:10:22,800 --> 00:10:26,970
create all these credentials and so then

00:10:24,960 --> 00:10:30,000
on the cred hub side you'll see over

00:10:26,970 --> 00:10:31,830
here all my variables are defining what

00:10:30,000 --> 00:10:34,440
I want right so I've got this worker key

00:10:31,830 --> 00:10:37,260
that's a type SSH I've got a TSA host

00:10:34,440 --> 00:10:39,870
key SSH RSA key and then a typical

00:10:37,260 --> 00:10:42,750
password right and so this are these are

00:10:39,870 --> 00:10:44,010
my these are my credentials but they're

00:10:42,750 --> 00:10:45,960
not really credentials right they're

00:10:44,010 --> 00:10:49,070
just references to them and then in my

00:10:45,960 --> 00:10:51,330
manifest I have them as references right

00:10:49,070 --> 00:10:53,910
and so what you can see here is that at

00:10:51,330 --> 00:10:56,310
the bottom I've got 282 lines on this

00:10:53,910 --> 00:10:59,130
other manifest with without cred hub

00:10:56,310 --> 00:11:00,870
usage and with cred ha I've got 145

00:10:59,130 --> 00:11:02,790
lines and that's a small manifest

00:11:00,870 --> 00:11:04,500
so you can see that you can see the

00:11:02,790 --> 00:11:07,890
value already with just bosch manifest

00:11:04,500 --> 00:11:13,100
and so if I actually if I come over here

00:11:07,890 --> 00:11:13,100
and I do Bosch deployments

00:11:24,300 --> 00:11:29,160
so you can see here I've got my secured

00:11:26,640 --> 00:11:31,230
credit of a secured concourse of my non

00:11:29,160 --> 00:11:34,460
secure concourse and so what I can

00:11:31,230 --> 00:11:37,830
actually do is Vash dash D concourse

00:11:34,460 --> 00:11:39,810
manifest and so inside here you're gonna

00:11:37,830 --> 00:11:43,290
see all my credentials right so here's

00:11:39,810 --> 00:11:45,810
my here's my actual my Postgres password

00:11:43,290 --> 00:11:47,700
right and so this means that anybody

00:11:45,810 --> 00:11:49,770
that has access to my boss director can

00:11:47,700 --> 00:11:53,330
see all of my credentials but now if I

00:11:49,770 --> 00:12:03,270
take my other one take my other

00:11:53,330 --> 00:12:07,230
deployment here you'll see and inside of

00:12:03,270 --> 00:12:09,570
here my password is simply Postgres

00:12:07,230 --> 00:12:11,610
underscore password so it's pretty

00:12:09,570 --> 00:12:13,980
simple I think you get the idea so

00:12:11,610 --> 00:12:17,730
that's that's essentially how how the

00:12:13,980 --> 00:12:19,470
Boche integration works so let's let's

00:12:17,730 --> 00:12:21,390
keep moving on so then let's talk about

00:12:19,470 --> 00:12:23,820
concourse itself right so if I have

00:12:21,390 --> 00:12:25,800
parameters inside a concourse you know I

00:12:23,820 --> 00:12:28,170
want my application to actually reach

00:12:25,800 --> 00:12:31,740
out to my databases right and I want

00:12:28,170 --> 00:12:34,050
them to to do maybe username credentials

00:12:31,740 --> 00:12:37,230
or or any kind of credentials inside of

00:12:34,050 --> 00:12:38,460
concourse again I can use credit up so

00:12:37,230 --> 00:12:40,200
there's this integration in the Creta

00:12:38,460 --> 00:12:42,330
when you deploy cred hub with bosh you

00:12:40,200 --> 00:12:44,610
can tell hey I want to use cred hub to

00:12:42,330 --> 00:12:46,040
eat to store my credentials and so here

00:12:44,610 --> 00:12:48,270
you can see I've got a very simple

00:12:46,040 --> 00:12:50,580
concourse job I'm not gonna go into all

00:12:48,270 --> 00:12:52,040
of how concourse works well you can see

00:12:50,580 --> 00:12:54,900
here is that I've got a parameter

00:12:52,040 --> 00:12:57,060
super-secret value and then inside when

00:12:54,900 --> 00:12:59,700
I'm using credible on second just a

00:12:57,060 --> 00:13:01,500
variable right and so again this enables

00:12:59,700 --> 00:13:03,900
the sharing of pipelines and I don't

00:13:01,500 --> 00:13:07,070
have to check in those parameter files

00:13:03,900 --> 00:13:09,330
into vault or some external

00:13:07,070 --> 00:13:11,430
configuration system to track them right

00:13:09,330 --> 00:13:15,150
I have all of that built directly right

00:13:11,430 --> 00:13:16,470
into my manifest or my pipeline and then

00:13:15,150 --> 00:13:18,600
of course I think that this is sort of

00:13:16,470 --> 00:13:22,380
an understated value with with concourse

00:13:18,600 --> 00:13:24,240
is that I can have access to databases

00:13:22,380 --> 00:13:26,310
without actually knowing the username or

00:13:24,240 --> 00:13:27,630
password of that database and the way

00:13:26,310 --> 00:13:29,370
that is is because I just have the

00:13:27,630 --> 00:13:32,070
reference to it so you could have your

00:13:29,370 --> 00:13:33,390
DBAs administering your database and

00:13:32,070 --> 00:13:35,550
changing passwords and doing whatever

00:13:33,390 --> 00:13:37,380
they want but I'm over here doing

00:13:35,550 --> 00:13:37,889
deployments and I don't ever need to

00:13:37,380 --> 00:13:39,149
know that

00:13:37,889 --> 00:13:41,489
password I just need to know whatever

00:13:39,149 --> 00:13:42,989
reference it is incredible so any this

00:13:41,489 --> 00:13:44,549
is pretty pretty cool about you

00:13:42,989 --> 00:13:46,829
I'm sorry Ivan I have another pipeline

00:13:44,549 --> 00:13:48,149
that I could show you but I think I

00:13:46,829 --> 00:13:50,939
think I want to switch it over to you

00:13:48,149 --> 00:13:52,829
okay look at that time yeah so Peters

00:13:50,939 --> 00:13:55,499
been talking about how cred hub is

00:13:52,829 --> 00:13:58,499
integrated with Bosh and concourse for

00:13:55,499 --> 00:13:59,489
sort of an operator perspective now

00:13:58,499 --> 00:14:01,619
we're going to switch gears a little bit

00:13:59,489 --> 00:14:04,169
and talk about some things with a cloud

00:14:01,619 --> 00:14:05,399
family Cloud Foundry application run

00:14:04,169 --> 00:14:08,009
time which is a little bit more user

00:14:05,399 --> 00:14:10,799
focused so if you've ever pushed an app

00:14:08,009 --> 00:14:13,470
to Cloud Foundry and bound that app to a

00:14:10,799 --> 00:14:15,089
service then you're familiar with the

00:14:13,470 --> 00:14:17,929
vcap services environment variable

00:14:15,089 --> 00:14:20,879
that's the way that applications are

00:14:17,929 --> 00:14:23,339
exposed to those services that they need

00:14:20,879 --> 00:14:25,049
to consume and inside of this vcap

00:14:23,339 --> 00:14:26,850
services block there will be the list of

00:14:25,049 --> 00:14:29,009
all the services that that app is bound

00:14:26,850 --> 00:14:30,480
to and inside of each of those services

00:14:29,009 --> 00:14:33,269
is this credentials block and that's

00:14:30,480 --> 00:14:34,669
really the meat of vcap services so if

00:14:33,269 --> 00:14:37,829
you look at this example on the left

00:14:34,669 --> 00:14:40,049
this service is exposing a URI that's

00:14:37,829 --> 00:14:42,269
secured with basic authentication so you

00:14:40,049 --> 00:14:44,639
need the URI username and a password to

00:14:42,269 --> 00:14:45,959
be able to talk to this service if it

00:14:44,639 --> 00:14:48,419
were my sequel database you'd have a

00:14:45,959 --> 00:14:50,699
maybe a JDBC URL username and password

00:14:48,419 --> 00:14:53,509
so the fact that these credentials are

00:14:50,699 --> 00:14:57,029
all in plain text and vcap services

00:14:53,509 --> 00:14:58,649
bother some some users who want those

00:14:57,029 --> 00:15:02,699
things secured a little bit more from

00:14:58,649 --> 00:15:05,459
the user perspective so now that there

00:15:02,699 --> 00:15:08,040
is credible Cloud Foundry application

00:15:05,459 --> 00:15:10,379
runtime service brokers can be enabled

00:15:08,040 --> 00:15:12,779
to store this credentials block inside

00:15:10,379 --> 00:15:14,730
of cred hub and once a service broker

00:15:12,779 --> 00:15:16,470
does credit have enabled the vcap

00:15:14,730 --> 00:15:17,999
services will look like this example on

00:15:16,470 --> 00:15:21,119
the right where the only thing in

00:15:17,999 --> 00:15:23,160
credentials is a single reference to a

00:15:21,119 --> 00:15:24,689
secret stored in cred hub and what's

00:15:23,160 --> 00:15:27,419
inside of that credit hub secret is an

00:15:24,689 --> 00:15:29,509
entire JSON block so we're going to show

00:15:27,419 --> 00:15:32,220
a demo of what that looks like now

00:15:29,509 --> 00:15:36,889
so just to show you what this demo is

00:15:32,220 --> 00:15:36,889
we've got pushed to applications

00:15:37,369 --> 00:15:41,249
that's called Fortune Service and

00:15:39,509 --> 00:15:44,369
fortune UI are the two applications I'll

00:15:41,249 --> 00:15:46,980
show you what those look like so this is

00:15:44,369 --> 00:15:49,019
a an example of like a back-end database

00:15:46,980 --> 00:15:50,339
serving application in this case this

00:15:49,019 --> 00:15:52,470
application

00:15:50,339 --> 00:15:54,120
has this one endpoint which is random

00:15:52,470 --> 00:15:57,839
and every time you make a call to that

00:15:54,120 --> 00:16:00,089
API endpoint you make that bigger you

00:15:57,839 --> 00:16:02,370
get one fortune as if it came from a

00:16:00,089 --> 00:16:04,290
fortune cookie so that's all this app

00:16:02,370 --> 00:16:05,610
does it's very simple and then the

00:16:04,290 --> 00:16:08,519
second app is a user interface

00:16:05,610 --> 00:16:10,800
application that every time you refresh

00:16:08,519 --> 00:16:12,209
the page on this application it's making

00:16:10,800 --> 00:16:13,649
one call to that back-end database

00:16:12,209 --> 00:16:15,449
service getting a fortune just

00:16:13,649 --> 00:16:19,050
displaying it so it's a really simple

00:16:15,449 --> 00:16:22,170
trivial application and the services

00:16:19,050 --> 00:16:24,269
that are available to this app so we

00:16:22,170 --> 00:16:26,189
have three services here that are

00:16:24,269 --> 00:16:28,170
provided by spring cloud services which

00:16:26,189 --> 00:16:31,379
is a pivotal product that implements the

00:16:28,170 --> 00:16:32,850
spring cloud open source projects the

00:16:31,379 --> 00:16:35,790
one we're going to talk about is the

00:16:32,850 --> 00:16:37,439
service registry so if I go to the

00:16:35,790 --> 00:16:40,290
dashboard for that service registry

00:16:37,439 --> 00:16:42,319
service it's gonna make us log back in

00:16:40,290 --> 00:16:42,319
again

00:16:51,250 --> 00:16:54,970
okay so this is a dashboard for that

00:16:53,050 --> 00:16:57,310
service registry service provided by

00:16:54,970 --> 00:16:59,920
that service broker and we can see that

00:16:57,310 --> 00:17:01,660
the backend service app is registered in

00:16:59,920 --> 00:17:04,329
this registry and the UI app is

00:17:01,660 --> 00:17:06,400
registered here so the way that the UI

00:17:04,329 --> 00:17:08,500
app knows how to talk to the backend app

00:17:06,400 --> 00:17:10,419
is to look up in this registry what the

00:17:08,500 --> 00:17:12,640
URL for that app is so that it can talk

00:17:10,419 --> 00:17:14,559
to it it's a better way than like

00:17:12,640 --> 00:17:16,630
hard-coding the route to the backend app

00:17:14,559 --> 00:17:17,799
into the front a now so the only reason

00:17:16,630 --> 00:17:19,240
we're showing you all this is just to

00:17:17,799 --> 00:17:21,789
show you that these two applications

00:17:19,240 --> 00:17:24,909
have successfully bound to this service

00:17:21,789 --> 00:17:28,270
and they're consuming that through the

00:17:24,909 --> 00:17:30,580
vcap services but if we go look at look

00:17:28,270 --> 00:17:35,730
deeper at this application if I do C of

00:17:30,580 --> 00:17:35,730
E and V on the fortunes service back-end

00:17:37,919 --> 00:17:44,740
and if we go look at V cap services will

00:17:41,799 --> 00:17:46,090
first find the my sequel service that's

00:17:44,740 --> 00:17:47,919
bound to that back-end app because it's

00:17:46,090 --> 00:17:50,260
fetching all those fortunes from a

00:17:47,919 --> 00:17:51,789
database we can see inside this

00:17:50,260 --> 00:17:54,970
credentials block that this service

00:17:51,789 --> 00:17:56,820
broker is not cret have been able yet so

00:17:54,970 --> 00:17:59,530
we see all these discrete credentials

00:17:56,820 --> 00:18:01,000
displayed right here but if we go

00:17:59,530 --> 00:18:02,770
further down and look at the service

00:18:01,000 --> 00:18:05,140
registry service it's just got the one

00:18:02,770 --> 00:18:07,210
credential it's just a single credit

00:18:05,140 --> 00:18:09,429
reference and kind of by convention the

00:18:07,210 --> 00:18:13,559
way these credit credentials are named

00:18:09,429 --> 00:18:16,480
is we give a name for the service broker

00:18:13,559 --> 00:18:18,190
that's implementing it and this is the

00:18:16,480 --> 00:18:19,570
name of the type of the service that the

00:18:18,190 --> 00:18:22,570
Service Worker is providing and then

00:18:19,570 --> 00:18:24,400
this is the gooood for the binding just

00:18:22,570 --> 00:18:27,159
to make sure that every credential

00:18:24,400 --> 00:18:29,110
distort here gets a unique name and then

00:18:27,159 --> 00:18:30,549
we just Prudential JSON at the end to

00:18:29,110 --> 00:18:33,429
make it kind of human readable and easy

00:18:30,549 --> 00:18:34,630
to identify so all three of the services

00:18:33,429 --> 00:18:36,549
that are provided by spring cloud

00:18:34,630 --> 00:18:38,289
services are all CREB have enabled so we

00:18:36,549 --> 00:18:42,970
just see those credit references there

00:18:38,289 --> 00:18:44,830
and I can even SSH into the container

00:18:42,970 --> 00:18:48,299
for this back-end application and if I

00:18:44,830 --> 00:18:48,299
look at V cap services there

00:18:54,600 --> 00:19:01,270
and I'm gonna pipe that through jq2

00:18:57,430 --> 00:19:02,770
prettyprint the JSON you can see here

00:19:01,270 --> 00:19:04,960
the my sequel credentials are raw but

00:19:02,770 --> 00:19:07,060
even if you're doing CF SSH and looking

00:19:04,960 --> 00:19:09,550
at vcap services there you're just

00:19:07,060 --> 00:19:13,450
seeing the Creta preferences so they're

00:19:09,550 --> 00:19:15,460
even secured inside the container so

00:19:13,450 --> 00:19:17,230
these both of these applications are

00:19:15,460 --> 00:19:19,570
spring boot applications so they

00:19:17,230 --> 00:19:22,930
implement the spring blue actuator

00:19:19,570 --> 00:19:25,450
endpoints and one of them lets you show

00:19:22,930 --> 00:19:27,370
the environment that is exposed to that

00:19:25,450 --> 00:19:29,080
application so this is actually what's

00:19:27,370 --> 00:19:32,380
in memory in the application we can see

00:19:29,080 --> 00:19:34,150
there's this v cap block where what's in

00:19:32,380 --> 00:19:36,610
the cap services JSON is basically

00:19:34,150 --> 00:19:37,990
flattened into sub flat properties and

00:19:36,610 --> 00:19:42,190
just to make that easier to read I'm

00:19:37,990 --> 00:19:43,570
gonna curl that here instead I think

00:19:42,190 --> 00:19:45,610
that'll work right there and I'm gonna

00:19:43,570 --> 00:19:47,110
pipe that through JQ again and sort it

00:19:45,610 --> 00:19:49,750
just so we can see all these properties

00:19:47,110 --> 00:19:51,820
really easily so we can see now in this

00:19:49,750 --> 00:19:54,010
view cap services service registry

00:19:51,820 --> 00:19:56,080
credentials we've got these four

00:19:54,010 --> 00:19:58,210
discrete fields which is the URI for the

00:19:56,080 --> 00:19:59,620
service registry and the OAuth

00:19:58,210 --> 00:20:02,590
information that the application needs

00:19:59,620 --> 00:20:04,300
to talk to that registry so all we're

00:20:02,590 --> 00:20:06,640
showing here is that the application in

00:20:04,300 --> 00:20:10,030
its memory space has access to the raw

00:20:06,640 --> 00:20:11,980
credentials while CF env and say FFA SSH

00:20:10,030 --> 00:20:13,990
and those other things that users might

00:20:11,980 --> 00:20:17,890
be able to do don't have that access to

00:20:13,990 --> 00:20:21,220
those raw prudential x' so how is that

00:20:17,890 --> 00:20:25,150
actually working well turns out diego is

00:20:21,220 --> 00:20:26,590
doing a lot for us here so peter

00:20:25,150 --> 00:20:28,330
mentioned when we were talking about the

00:20:26,590 --> 00:20:30,160
credit of API that there's this really

00:20:28,330 --> 00:20:32,380
interesting credit hub api endpoint

00:20:30,160 --> 00:20:34,570
that's called interpolate and that

00:20:32,380 --> 00:20:37,690
endpoint is very aware of this vcap

00:20:34,570 --> 00:20:40,330
services block so to that end point you

00:20:37,690 --> 00:20:42,910
can take the cap services block with one

00:20:40,330 --> 00:20:44,740
or more of these credential sections in

00:20:42,910 --> 00:20:46,330
it pass that whole thing to this

00:20:44,740 --> 00:20:48,580
interpolate in point to create hub and

00:20:46,330 --> 00:20:51,100
it's gonna walk that data structure

00:20:48,580 --> 00:20:53,260
looking for any of those crab - ref keys

00:20:51,100 --> 00:20:54,730
in there and whatever finds one it's

00:20:53,260 --> 00:20:56,830
gonna reach inside its own database

00:20:54,730 --> 00:20:58,870
resolve that and what you're going to

00:20:56,830 --> 00:21:00,670
get back is a V cap services block with

00:20:58,870 --> 00:21:02,590
all those references replaced with the

00:21:00,670 --> 00:21:03,460
raw credentials so that's a really

00:21:02,590 --> 00:21:05,110
powerful info

00:21:03,460 --> 00:21:08,770
to credible a minute just to make this

00:21:05,110 --> 00:21:11,440
workflow as easy as possible and in the

00:21:08,770 --> 00:21:12,730
in this Cloud Foundry case what's

00:21:11,440 --> 00:21:14,950
actually happening is when cloud

00:21:12,730 --> 00:21:18,010
control-r tells diego to stage an

00:21:14,950 --> 00:21:19,870
application diego is building that vcap

00:21:18,010 --> 00:21:21,580
services environment variable block and

00:21:19,870 --> 00:21:23,440
diego knows that it needs to pass that

00:21:21,580 --> 00:21:25,470
off to cred hub have credit have

00:21:23,440 --> 00:21:27,820
interpolate it and when it's actually

00:21:25,470 --> 00:21:29,230
starting up the application and building

00:21:27,820 --> 00:21:32,649
that application environment it's

00:21:29,230 --> 00:21:34,630
exposing that raw v cap services and

00:21:32,649 --> 00:21:36,340
this is really powerful because it means

00:21:34,630 --> 00:21:37,720
none of your applications have to change

00:21:36,340 --> 00:21:39,309
they don't have to be credible where

00:21:37,720 --> 00:21:40,360
they don't have to explicitly be going

00:21:39,309 --> 00:21:42,010
to create up and making that call

00:21:40,360 --> 00:21:44,020
themselves to resolve these credentials

00:21:42,010 --> 00:21:44,649
and it's all done automatically it's

00:21:44,020 --> 00:21:47,130
really nice

00:21:44,649 --> 00:21:49,600
so spring apps ruby apps go apps

00:21:47,130 --> 00:21:51,580
whatever your app is it automatically

00:21:49,600 --> 00:21:53,770
gets the vcap services as the raw

00:21:51,580 --> 00:21:58,890
credentials just like you're expecting

00:21:53,770 --> 00:21:58,890
today yes

00:22:14,120 --> 00:22:19,470
there are still ways you can get in

00:22:16,470 --> 00:22:21,180
there so I think the probably the answer

00:22:19,470 --> 00:22:22,470
the question if kids you didn't hear the

00:22:21,180 --> 00:22:24,900
answer the question is sometimes when

00:22:22,470 --> 00:22:25,950
you want to do CF SSH is because you

00:22:24,900 --> 00:22:27,270
want to get like the database

00:22:25,950 --> 00:22:30,120
credentials so you can test the database

00:22:27,270 --> 00:22:31,410
connectivity yourself you probably in

00:22:30,120 --> 00:22:33,150
this sort of environment have to get an

00:22:31,410 --> 00:22:35,070
operator involved and have them give you

00:22:33,150 --> 00:22:36,390
some additional permissions to be able

00:22:35,070 --> 00:22:39,600
to get in there and see the raw

00:22:36,390 --> 00:22:40,890
credentials there are ways to do it we

00:22:39,600 --> 00:22:42,390
debated about rather to show some of

00:22:40,890 --> 00:22:44,640
those ways in this presentation we

00:22:42,390 --> 00:22:47,190
decided not to turn it into a crib aking

00:22:44,640 --> 00:22:48,300
session but yeah basically you just have

00:22:47,190 --> 00:22:51,180
to have the right credentials you have

00:22:48,300 --> 00:22:52,350
to have the credentials when we actually

00:22:51,180 --> 00:22:53,880
show this in a minute but you have to

00:22:52,350 --> 00:22:56,400
have the credentials that that service

00:22:53,880 --> 00:22:57,840
broker used to login to credit hub to

00:22:56,400 --> 00:23:00,120
store those credentials and if you have

00:22:57,840 --> 00:23:01,620
those then you can reach into crib like

00:23:00,120 --> 00:23:04,230
with the creep up CLI and get them out

00:23:01,620 --> 00:23:08,540
that way yet the end goal of credit

00:23:04,230 --> 00:23:12,270
right is to obfuscate it right

00:23:08,540 --> 00:23:13,320
somebody's able to see if SSH in then

00:23:12,270 --> 00:23:15,780
they're able to get into all your

00:23:13,320 --> 00:23:19,380
containers right and be able to see any

00:23:15,780 --> 00:23:22,590
application environment variables so the

00:23:19,380 --> 00:23:24,690
idea here is that you know even if you

00:23:22,590 --> 00:23:27,660
get into the container you can't see any

00:23:24,690 --> 00:23:28,920
credentials right your operators maybe

00:23:27,660 --> 00:23:31,230
they're lazy maybe they're great

00:23:28,920 --> 00:23:33,060
whatever but they didn't disable it for

00:23:31,230 --> 00:23:34,500
production and now they can get into

00:23:33,060 --> 00:23:36,630
that application and they can actually

00:23:34,500 --> 00:23:40,230
see those production level database

00:23:36,630 --> 00:23:41,640
credentials that's a problem right even

00:23:40,230 --> 00:23:43,320
if they disable that then there's other

00:23:41,640 --> 00:23:44,940
ways to get in there and if their cups

00:23:43,320 --> 00:23:47,790
right so we'll also talk a little about

00:23:44,940 --> 00:23:51,120
user provided services and how those

00:23:47,790 --> 00:23:52,740
work with cred hub so we'll keep moving

00:23:51,120 --> 00:23:54,720
yeah like I said ultimately they're in

00:23:52,740 --> 00:23:56,730
the application memory so this spring

00:23:54,720 --> 00:23:58,680
boot actuator an endpoint knows how to

00:23:56,730 --> 00:24:00,780
mask things that it thinks look like

00:23:58,680 --> 00:24:02,670
they're sensitive but ultimately they're

00:24:00,780 --> 00:24:04,050
in application memory if you're running

00:24:02,670 --> 00:24:06,000
the application and have the ability to

00:24:04,050 --> 00:24:07,050
for example debug the application then

00:24:06,000 --> 00:24:09,270
you're going to be able to get to

00:24:07,050 --> 00:24:13,260
eventually the application has to get

00:24:09,270 --> 00:24:16,650
raw credentials okay so that's all

00:24:13,260 --> 00:24:19,080
around managed services and service

00:24:16,650 --> 00:24:20,970
brokers so we said that your

00:24:19,080 --> 00:24:22,470
applications don't have to change to

00:24:20,970 --> 00:24:23,160
know anything about Cravath service

00:24:22,470 --> 00:24:24,540
brokers to do

00:24:23,160 --> 00:24:26,880
have to change service brokers have to

00:24:24,540 --> 00:24:29,040
be modified so that they're aware the

00:24:26,880 --> 00:24:32,220
crud hub is there and most of them are

00:24:29,040 --> 00:24:33,780
implementing a flag in the service

00:24:32,220 --> 00:24:35,250
broker configuration to tell a do you

00:24:33,780 --> 00:24:37,530
want me to store credentials and credit

00:24:35,250 --> 00:24:39,120
hub or just return them raw so service

00:24:37,530 --> 00:24:41,570
brokers are gonna have to adapt to this

00:24:39,120 --> 00:24:45,720
and implement that credible

00:24:41,570 --> 00:24:46,980
okay so the other user workflow is if

00:24:45,720 --> 00:24:49,440
you're familiar with user provided

00:24:46,980 --> 00:24:52,110
services in cloud foundry they're a way

00:24:49,440 --> 00:24:53,940
to provide credentials for services that

00:24:52,110 --> 00:24:55,470
are running outside of cloud foundry and

00:24:53,940 --> 00:24:57,150
the most typical example is you've got a

00:24:55,470 --> 00:24:59,730
big Oracle database that's been around

00:24:57,150 --> 00:25:01,100
forever it's run and managed completely

00:24:59,730 --> 00:25:02,850
outside of cloud foundry but

00:25:01,100 --> 00:25:05,340
applications running in cloud foundry

00:25:02,850 --> 00:25:06,990
need to get access to that database how

00:25:05,340 --> 00:25:08,730
you would typically do that in cloud

00:25:06,990 --> 00:25:10,230
foundry is to use a user provided

00:25:08,730 --> 00:25:14,400
service where you create the service

00:25:10,230 --> 00:25:16,590
instance and you're providing in the CF

00:25:14,400 --> 00:25:19,590
create user provided service command

00:25:16,590 --> 00:25:22,130
what these raw credentials are so you

00:25:19,590 --> 00:25:24,990
really want a way to be able to store

00:25:22,130 --> 00:25:26,970
credit credentials incredible expose

00:25:24,990 --> 00:25:31,950
those in a user provided service way

00:25:26,970 --> 00:25:33,750
also and the way that you do that is the

00:25:31,950 --> 00:25:35,310
other service broker that we have

00:25:33,750 --> 00:25:37,590
installed here as a service broker

00:25:35,310 --> 00:25:40,110
called secure credentials and this

00:25:37,590 --> 00:25:43,200
service broker is in the Cloud Foundry

00:25:40,110 --> 00:25:45,510
Oregon github and it works pretty

00:25:43,200 --> 00:25:47,310
similarly similarly to a user provided

00:25:45,510 --> 00:25:52,710
service so we can show you the command

00:25:47,310 --> 00:25:54,300
we used to create this so if you see

00:25:52,710 --> 00:25:56,970
this command we just did a CF create

00:25:54,300 --> 00:25:59,160
service and said we want to use the

00:25:56,970 --> 00:26:01,950
secure credentials broker with that

00:25:59,160 --> 00:26:04,740
default plan and we wanted to create a

00:26:01,950 --> 00:26:06,210
credential that has a password in it and

00:26:04,740 --> 00:26:13,170
we gave it the raw value for the

00:26:06,210 --> 00:26:15,780
password here and then in the in the UI

00:26:13,170 --> 00:26:20,610
app we've bound that service to the UI

00:26:15,780 --> 00:26:28,560
app so if I do a CF E and V on the UI

00:26:20,610 --> 00:26:30,000
app we're gonna see in there that it's

00:26:28,560 --> 00:26:31,860
got this one credential that's the

00:26:30,000 --> 00:26:34,530
secure credential so it's working really

00:26:31,860 --> 00:26:36,530
like the spring cloud services cases I

00:26:34,530 --> 00:26:39,650
was just providing that for the

00:26:36,530 --> 00:26:43,730
user provided service as a use case and

00:26:39,650 --> 00:26:47,570
we can show an example here so kind of

00:26:43,730 --> 00:26:51,680
to Nick's question there is this credit

00:26:47,570 --> 00:26:53,780
hub CLI that Peter talked about and I

00:26:51,680 --> 00:26:55,670
can use the credit CLI and I can log

00:26:53,780 --> 00:26:57,980
into credit hub in this case we've gone

00:26:55,670 --> 00:27:01,040
into the deployment of that secure

00:26:57,980 --> 00:27:03,850
services service broker we've pulled out

00:27:01,040 --> 00:27:05,840
the UA a client ID that it's using to

00:27:03,850 --> 00:27:07,760
authenticate to credit hub with and

00:27:05,840 --> 00:27:11,440
we're gonna use the credible I to log in

00:27:07,760 --> 00:27:11,440
with that service brokers credentials

00:27:14,920 --> 00:27:26,090
something's changed there it all looks

00:27:21,830 --> 00:27:28,850
right to me me too ok way bit on network

00:27:26,090 --> 00:27:30,380
conference Wi-Fi sure okay you credit

00:27:28,850 --> 00:27:31,730
help get see if we can get the

00:27:30,380 --> 00:27:35,180
credential out of it yeah maybe we're

00:27:31,730 --> 00:27:38,720
still logged in so once we're logged in

00:27:35,180 --> 00:27:40,400
we should be able to do this get and

00:27:38,720 --> 00:27:44,090
pull the value of that credential

00:27:40,400 --> 00:27:45,410
autocrat hub is that going to work and I

00:27:44,090 --> 00:27:52,360
was thinking we're not logged in because

00:27:45,410 --> 00:27:53,540
we tried to login and failed try to find

00:27:52,360 --> 00:27:55,640
ok

00:27:53,540 --> 00:27:58,270
I think it's thinking to think we're not

00:27:55,640 --> 00:27:58,270
logged in now

00:28:01,210 --> 00:28:11,770
we're targeting okay we're targeting the

00:28:03,640 --> 00:28:14,490
wrong thing yep just do this all right

00:28:11,770 --> 00:28:14,490
try it again

00:28:18,290 --> 00:28:25,550
we're going to do login I don't

00:28:26,299 --> 00:28:29,200
let's grab it

00:28:31,260 --> 00:28:40,980
see it's all live guys there we go go

00:28:37,200 --> 00:28:43,679
okay so now guess we gotta go over this

00:28:40,980 --> 00:28:46,440
other window and so this is you know

00:28:43,679 --> 00:28:49,409
we're logging in here to the club that's

00:28:46,440 --> 00:28:51,659
so this is the internally deployed for

00:28:49,409 --> 00:28:54,480
us credible of foundry that's already

00:28:51,659 --> 00:28:58,649
there for you and I don't know what

00:28:54,480 --> 00:29:01,169
Cloud Foundry version 0.36 I think CF

00:28:58,649 --> 00:29:02,519
for at least three six and so what we're

00:29:01,169 --> 00:29:04,289
doing is we're authenticating with that

00:29:02,519 --> 00:29:05,940
and then we're actually listing

00:29:04,289 --> 00:29:07,230
credentials so here you can see all

00:29:05,940 --> 00:29:09,539
those credentials that have been created

00:29:07,230 --> 00:29:13,889
so these have been created

00:29:09,539 --> 00:29:15,419
yep go ahead yeah so we've got these

00:29:13,889 --> 00:29:16,980
credentials created by the secure

00:29:15,419 --> 00:29:18,419
credentials broker and then we've got

00:29:16,980 --> 00:29:21,210
all these credentials that were created

00:29:18,419 --> 00:29:23,279
by spring cloud services so the ones

00:29:21,210 --> 00:29:25,350
ending in credentials JSON here are the

00:29:23,279 --> 00:29:27,210
full JSON payload for vcap services but

00:29:25,350 --> 00:29:28,860
spring cloud services also use ascribe

00:29:27,210 --> 00:29:31,500
hub to generate some usernames and

00:29:28,860 --> 00:29:32,760
passwords and client secrets so there's

00:29:31,500 --> 00:29:36,809
a lot more credentials you'll see in

00:29:32,760 --> 00:29:41,460
here but this one from the secure

00:29:36,809 --> 00:29:45,320
credentials broker I have a hard time

00:29:41,460 --> 00:29:52,549
selecting stuff on Peters laptop here

00:29:45,320 --> 00:29:52,549
yeah select that for me yep there we go

00:29:53,120 --> 00:30:03,750
so now we can do credit hub get dash in

00:29:57,139 --> 00:30:04,980
and get that credential okay that's the

00:30:03,750 --> 00:30:08,460
one that brokers toward let's get this

00:30:04,980 --> 00:30:09,960
other one oh yeah there we go so you can

00:30:08,460 --> 00:30:11,340
see this for all the credentials right

00:30:09,960 --> 00:30:13,169
so if you're using cred hub for

00:30:11,340 --> 00:30:14,549
concourse then you could come into that

00:30:13,169 --> 00:30:16,049
cred up and you'd actually see the

00:30:14,549 --> 00:30:18,090
credit of that all the credentials that

00:30:16,049 --> 00:30:19,620
you'd be using in concourse right so

00:30:18,090 --> 00:30:22,529
this is sort of your you know every

00:30:19,620 --> 00:30:25,740
single credit have instance you know you

00:30:22,529 --> 00:30:30,529
can use a CLI to talk to or you can use

00:30:25,740 --> 00:30:30,529
mutual TLS and talk to that that way

00:30:32,220 --> 00:30:37,050
get that one should work she did mowing

00:30:35,490 --> 00:30:38,310
on somebody else's laptop that's kind of

00:30:37,050 --> 00:30:41,220
like trying to run a race in somebody

00:30:38,310 --> 00:30:43,320
else's shoes it's always fun doing great

00:30:41,220 --> 00:30:44,940
so there we can see that we fetched that

00:30:43,320 --> 00:30:48,000
credential from cred hub and we can see

00:30:44,940 --> 00:30:49,680
what that value is if I were to try to

00:30:48,000 --> 00:30:53,460
pull one of these other credentials from

00:30:49,680 --> 00:30:54,840
in here I would basically get as one of

00:30:53,460 --> 00:30:57,480
these created with the P spring cloud

00:30:54,840 --> 00:30:58,830
services the CLI would tell me that I

00:30:57,480 --> 00:31:00,120
don't have authorization to get those

00:30:58,830 --> 00:31:02,130
because I'm not using the same

00:31:00,120 --> 00:31:04,320
credentials with the CLI that spring

00:31:02,130 --> 00:31:06,120
cloud services used to log into credit

00:31:04,320 --> 00:31:07,410
hub and store them to begin with so

00:31:06,120 --> 00:31:08,730
that's getting to that permissions level

00:31:07,410 --> 00:31:11,850
each of these credentials that you see

00:31:08,730 --> 00:31:13,230
here has very fine-grained permissions

00:31:11,850 --> 00:31:14,670
on it that determines who's allowed to

00:31:13,230 --> 00:31:16,080
read those credentials who's allowed to

00:31:14,670 --> 00:31:19,020
write them and who's allowed to change

00:31:16,080 --> 00:31:21,180
permissions on them based on the service

00:31:19,020 --> 00:31:28,680
broker the Rotom or if you're writing

00:31:21,180 --> 00:31:30,030
them yourself with the CLI yeah that's

00:31:28,680 --> 00:31:32,310
all the content that we have here's a

00:31:30,030 --> 00:31:34,350
little plug for spring one conference

00:31:32,310 --> 00:31:37,080
that's going to be in Washington DC this

00:31:34,350 --> 00:31:38,820
year in September the most interesting

00:31:37,080 --> 00:31:40,620
thing on this slide is this discount

00:31:38,820 --> 00:31:41,880
code and the lower right hand corner

00:31:40,620 --> 00:31:44,670
here if you're interested in going

00:31:41,880 --> 00:31:48,750
that's a code you can use to get $100

00:31:44,670 --> 00:31:50,640
off for coming to this conference and

00:31:48,750 --> 00:31:53,240
with that we can take any questions are

00:31:50,640 --> 00:31:53,240
we doing on time

00:31:56,179 --> 00:31:59,179
yes

00:32:11,210 --> 00:32:16,130
yeah no that's be cut so the question is

00:32:14,210 --> 00:32:16,610
is credit how the single point of

00:32:16,130 --> 00:32:18,860
failure

00:32:16,610 --> 00:32:20,840
it's a che taking into account here yes

00:32:18,860 --> 00:32:22,550
it is and the reason is is all the

00:32:20,840 --> 00:32:25,850
credentials are stored in a my sequel

00:32:22,550 --> 00:32:27,830
database that is a che okay that's

00:32:25,850 --> 00:32:30,050
number one number two is you can deploy

00:32:27,830 --> 00:32:32,300
write cred hub is made to be deployed

00:32:30,050 --> 00:32:34,700
with two instances so if you lose an

00:32:32,300 --> 00:32:36,440
instance then you're good to go you're

00:32:34,700 --> 00:32:38,690
still still request will still be going

00:32:36,440 --> 00:32:41,150
through to get those credentials out as

00:32:38,690 --> 00:32:42,530
long as you have multiple AZ's with your

00:32:41,150 --> 00:32:45,590
deployment you should be all set just

00:32:42,530 --> 00:32:50,380
deploy a credit hub in every AZ sure

00:32:45,590 --> 00:32:50,380
yeah I'm sorry yeah go ahead

00:32:55,100 --> 00:32:59,330
it's a typical CF deployment my sequel

00:32:57,710 --> 00:33:01,490
right so it's the same it's all stored

00:32:59,330 --> 00:33:03,650
in that that general my sequel you could

00:33:01,490 --> 00:33:05,030
make it however you want right so I mean

00:33:03,650 --> 00:33:07,040
we're at open source Cloud Foundry

00:33:05,030 --> 00:33:10,220
summit so you know however you want to

00:33:07,040 --> 00:33:12,050
deploy your CF sequel will work so the

00:33:10,220 --> 00:33:13,550
CF deployment bas-reliefs will do it one

00:33:12,050 --> 00:33:15,020
way but if you want to go nuts with your

00:33:13,550 --> 00:33:25,550
own Bosh release and deploy your

00:33:15,020 --> 00:33:26,990
databases and hmm I see what you're

00:33:25,550 --> 00:33:29,390
asking how how is the writing and

00:33:26,990 --> 00:33:31,250
reading done with cred hub it's a good

00:33:29,390 --> 00:33:34,550
question I can definitely table that and

00:33:31,250 --> 00:33:51,050
have the PM answer it for you sure sure

00:33:34,550 --> 00:33:52,400
okay here yeah when Peter and I first

00:33:51,050 --> 00:33:54,050
did this talk at Spring one last

00:33:52,400 --> 00:33:56,270
December and we were actually surprised

00:33:54,050 --> 00:33:58,250
when we see if SSH and didn't see the

00:33:56,270 --> 00:33:59,990
raw credentials so then we had to start

00:33:58,250 --> 00:34:02,750
digging into these layers inside

00:33:59,990 --> 00:34:04,700
containers and garden to figure out how

00:34:02,750 --> 00:34:06,470
that magic is happening and it gets a

00:34:04,700 --> 00:34:09,440
little deep into Cloud Foundry internals

00:34:06,470 --> 00:34:11,180
it's mostly when you do a CF SSH right

00:34:09,440 --> 00:34:13,130
it's going through the control plane of

00:34:11,180 --> 00:34:15,320
Cloud Foundry right and so they have

00:34:13,130 --> 00:34:17,060
access to block out credentials if you

00:34:15,320 --> 00:34:18,710
don't you know and so essentially it's

00:34:17,060 --> 00:34:20,810
it's all getting done by the magic and

00:34:18,710 --> 00:34:21,409
you're not quite into that garden

00:34:20,810 --> 00:34:23,329
contain

00:34:21,409 --> 00:34:31,250
when you see flsh is kind of the

00:34:23,329 --> 00:34:33,740
high-level answer you could do that okay

00:34:31,250 --> 00:34:35,690
gladly you just don't do something

00:34:33,740 --> 00:34:37,519
stupid you could put this spring cloud

00:34:35,690 --> 00:34:38,990
actuator and point in there and enable

00:34:37,519 --> 00:34:40,399
that without security and production if

00:34:38,990 --> 00:34:42,769
you wanted to but that's not right how

00:34:40,399 --> 00:34:49,089
does not I do it you know it doesn't

00:34:42,769 --> 00:34:49,089
solve your stupidity sorry I one more

00:34:56,619 --> 00:35:02,390
yep it's totally possible yeah yeah

00:35:00,529 --> 00:35:04,519
you know how customers doing that now

00:35:02,390 --> 00:35:06,170
and yeah question there's a little

00:35:04,519 --> 00:35:08,180
project called spring crab looks like a

00:35:06,170 --> 00:35:10,039
spring mapping to the credit of API and

00:35:08,180 --> 00:35:11,269
there are some people who are doing that

00:35:10,039 --> 00:35:13,130
they're deploying their own credit

00:35:11,269 --> 00:35:15,230
observer lis outside of the one in Bosch

00:35:13,130 --> 00:35:16,940
and the one in in Cloud Foundry

00:35:15,230 --> 00:35:19,460
application and time and then they're

00:35:16,940 --> 00:35:21,049
using it for stuff completely outside of

00:35:19,460 --> 00:35:23,180
these workflows so that's really helpful

00:35:21,049 --> 00:35:24,799
for like operations teams right I know a

00:35:23,180 --> 00:35:26,569
lot of ops teams are using like vault

00:35:24,799 --> 00:35:28,369
and different things for that kind of

00:35:26,569 --> 00:35:30,859
and if you're trying to remain sort of

00:35:28,369 --> 00:35:32,599
agnostic with with operations and what

00:35:30,859 --> 00:35:34,940
developers are gonna be do using with CF

00:35:32,599 --> 00:35:37,250
you can deploy your own cred hub right

00:35:34,940 --> 00:35:39,200
just with the open source Bosh outside

00:35:37,250 --> 00:35:40,369
right and then you can use that for

00:35:39,200 --> 00:35:41,809
anything right you could use it for

00:35:40,369 --> 00:35:43,309
concourse you could use it for Bosh

00:35:41,809 --> 00:35:44,599
itself you could use it for any of your

00:35:43,309 --> 00:35:46,519
bas deployed things you can actually

00:35:44,599 --> 00:35:48,230
create a client that would write it's

00:35:46,519 --> 00:35:50,029
just a REST API you can create a client

00:35:48,230 --> 00:35:52,519
that pulls all the creds out there's a

00:35:50,029 --> 00:35:55,309
CLI for it right so there's all this all

00:35:52,519 --> 00:35:56,660
this ecosystem around credit so and I

00:35:55,309 --> 00:35:59,089
mentioned spring cred hub I should also

00:35:56,660 --> 00:36:00,950
mention if you saw in the keynote last

00:35:59,089 --> 00:36:02,269
night in that really cool net

00:36:00,950 --> 00:36:05,089
presentation there's also a dotnet

00:36:02,269 --> 00:36:07,099
client for the cred hub API so if with

00:36:05,089 --> 00:36:09,140
both Java and.net you've got nice ways

00:36:07,099 --> 00:36:11,390
to write apps that talk directly to cred

00:36:09,140 --> 00:36:13,400
huh yeah all right I think we're out of

00:36:11,390 --> 00:36:14,779
time we better wrap it up but we can and

00:36:13,400 --> 00:36:18,580
we can definitely take more questions

00:36:14,779 --> 00:36:24,150
offline Scott's awesome

00:36:18,580 --> 00:36:24,150

YouTube URL: https://www.youtube.com/watch?v=6Hqq5avmwig


