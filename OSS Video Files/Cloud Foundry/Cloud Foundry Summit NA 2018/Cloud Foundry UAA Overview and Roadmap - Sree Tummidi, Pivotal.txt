Title: Cloud Foundry UAA Overview and Roadmap - Sree Tummidi, Pivotal
Publication date: 2018-04-21
Playlist: Cloud Foundry Summit NA 2018
Description: 
	Cloud Foundry UAA Overview and Roadmap - Sree Tummidi, Pivotal

Have you wondered about how UAA secures Bosh, the CF runtime, the Apps running on CF and even other container runtimes like Kubernetes. In this session we will cover not just UAA but also take a closer look at the various identity protocols like OAuth, OpenID Connect and SAML which form the foundation for UAA.

In addition to this we will also cover the latest feature updates to UAA like Google Authenticator and OpenID Connect Session Management. Finally we will provide a peek into the roadmap and the big themes for 2018 ! 

About Sree Tummidi
Sree Tummidi is the Product Manager for UAA (User Account and Authentication Service) on Open Source Cloud Foundry since the past 3+ Years and drives the Identity and Access Management products for Pivotal. She brings in more than 12 years of experience in the security domain. Prior to joining Pivotal she held multiple Product Management & Engineering positions at CA Technologies. She holds a Masters of Business Administration from Boston University & Bachelors of Engineering in Computer Science from Jawaharlal Nehru Technological University. She has spoken at multiple sales & customer conferences about Identity & Access Management related topics and products. Most recently she spoke at Cloud Foundry Summit Silicon Valley 2017 (http://bit.ly/2sWjlst) and Spring One Platform 2016 about UAA and Cloud Identity (http://bit.ly/2kD1WNB)
Captions: 
	00:00:00,149 --> 00:00:05,850
hello everyone everyone settled in I'm

00:00:03,060 --> 00:00:08,400
the only person standing between you and

00:00:05,850 --> 00:00:12,000
lunch so we'll get started

00:00:08,400 --> 00:00:14,219
I believe 115 is lunch time I'm Cherie

00:00:12,000 --> 00:00:16,980
too meaty and I'm a product manager at

00:00:14,219 --> 00:00:20,570
pivotal working on both open source and

00:00:16,980 --> 00:00:23,160
proprietary identity products and

00:00:20,570 --> 00:00:24,980
currently working in the capacity of a

00:00:23,160 --> 00:00:28,490
senior manager of product management and

00:00:24,980 --> 00:00:32,309
you can follow me on twitter at to media

00:00:28,490 --> 00:00:34,170
so today we are here to discuss new

00:00:32,309 --> 00:00:36,210
features that have been introduced in

00:00:34,170 --> 00:00:38,640
UAE in the past couple of months and

00:00:36,210 --> 00:00:40,890
also where we are going with you AAA I

00:00:38,640 --> 00:00:43,890
mean I believe every one of you by now

00:00:40,890 --> 00:00:47,129
has heard about like sto and kubernetes

00:00:43,890 --> 00:00:49,649
and basically trying to understand where

00:00:47,129 --> 00:00:51,570
does identity fit into all of this so

00:00:49,649 --> 00:00:55,890
I'm hoping I can cover some of that

00:00:51,570 --> 00:00:58,559
today so the agenda is to basically not

00:00:55,890 --> 00:01:00,920
throw new features at you but just first

00:00:58,559 --> 00:01:03,780
of all give you like an overview of UA a

00:01:00,920 --> 00:01:07,020
followed by new features talk about

00:01:03,780 --> 00:01:11,220
kubernetes sto and then some roadmap

00:01:07,020 --> 00:01:16,080
related things followed by Q&A so we

00:01:11,220 --> 00:01:18,950
will get started there's a lot on this

00:01:16,080 --> 00:01:22,770
slide so I want you to read

00:01:18,950 --> 00:01:24,930
bottom-to-top anytime we think about I

00:01:22,770 --> 00:01:27,659
am and we are dealing with a cloud

00:01:24,930 --> 00:01:29,880
platform there are two aspects to I am

00:01:27,659 --> 00:01:33,210
or identity and access management I am

00:01:29,880 --> 00:01:35,759
for short one is on the platform front

00:01:33,210 --> 00:01:37,829
because we have to make sure that the

00:01:35,759 --> 00:01:40,770
right person is and the right systems

00:01:37,829 --> 00:01:43,770
have access to the platform and what

00:01:40,770 --> 00:01:47,430
that means and the platform itself is

00:01:43,770 --> 00:01:49,470
made up of different things and it's

00:01:47,430 --> 00:01:51,840
it's layers of things so at the lowest

00:01:49,470 --> 00:01:55,290
level you have Bosch which is the

00:01:51,840 --> 00:01:57,840
infrastructure orchestration layer it

00:01:55,290 --> 00:01:59,790
helps Cloud Foundry be multi cloud and

00:01:57,840 --> 00:02:01,649
we have to think about you know like

00:01:59,790 --> 00:02:03,509
when operators come in to Bosch like

00:02:01,649 --> 00:02:05,460
what is the security experience we want

00:02:03,509 --> 00:02:07,829
you know like making sure that they

00:02:05,460 --> 00:02:08,920
whoever is coming in is proving their

00:02:07,829 --> 00:02:10,720
identity and is

00:02:08,920 --> 00:02:13,930
only able to do things that they are

00:02:10,720 --> 00:02:17,620
allowed to do if you move one layer

00:02:13,930 --> 00:02:20,709
further then you have a kubernetes which

00:02:17,620 --> 00:02:22,480
is the new thing on the foundation front

00:02:20,709 --> 00:02:25,239
so if you heard about CFC R which is

00:02:22,480 --> 00:02:27,700
Cloud Foundry container runtime it's

00:02:25,239 --> 00:02:29,739
essentially bosch managed kubernetes so

00:02:27,700 --> 00:02:31,840
you can deploy on-demand kubernetes

00:02:29,739 --> 00:02:33,850
clusters but then obviously we have to

00:02:31,840 --> 00:02:35,980
think about again you know who is

00:02:33,850 --> 00:02:37,750
allowed to perform those operations you

00:02:35,980 --> 00:02:39,610
know like who's allowed to create

00:02:37,750 --> 00:02:42,550
clusters who's allowed to push workloads

00:02:39,610 --> 00:02:44,530
to the cluster and then we have the

00:02:42,550 --> 00:02:47,049
on-demand brokers which provide a

00:02:44,530 --> 00:02:49,720
standard interface for how services are

00:02:47,049 --> 00:02:52,930
exposed in this ecosystem so again I am

00:02:49,720 --> 00:02:55,660
for those and then you move up one layer

00:02:52,930 --> 00:02:58,690
further we have the core Cloud Foundry

00:02:55,660 --> 00:03:01,090
components which make Cloud Foundry what

00:02:58,690 --> 00:03:03,700
it is so we have the core container and

00:03:01,090 --> 00:03:06,580
time which is diego routing routing has

00:03:03,700 --> 00:03:08,980
its own API and container networking for

00:03:06,580 --> 00:03:11,470
east-west traffic logging and then

00:03:08,980 --> 00:03:13,570
finally a Cloud Controller API which

00:03:11,470 --> 00:03:15,790
exposes these things to operators and

00:03:13,570 --> 00:03:17,590
developers so we are talking about a lot

00:03:15,790 --> 00:03:20,560
of things here that need to be secured

00:03:17,590 --> 00:03:21,970
but the core aspect here is we need to

00:03:20,560 --> 00:03:25,510
perform identity and access management

00:03:21,970 --> 00:03:28,090
in a standard manner but that but it

00:03:25,510 --> 00:03:30,640
doesn't end there because now you know

00:03:28,090 --> 00:03:32,920
like as customers the whole point of

00:03:30,640 --> 00:03:35,230
creating a platform and deploying it on

00:03:32,920 --> 00:03:37,570
premise or using it from the cloud is

00:03:35,230 --> 00:03:40,420
that you want to push workloads so we

00:03:37,570 --> 00:03:43,269
have to think about workload I am or app

00:03:40,420 --> 00:03:46,239
I am I use the term I'm going to be

00:03:43,269 --> 00:03:50,079
using the term workload as like a way to

00:03:46,239 --> 00:03:52,569
represent any kind of application or API

00:03:50,079 --> 00:03:55,299
or task or function that you plan on

00:03:52,569 --> 00:03:58,959
running in the cloud so that's that's

00:03:55,299 --> 00:04:00,880
what workload I am is so but again there

00:03:58,959 --> 00:04:03,790
are two classifications there you are

00:04:00,880 --> 00:04:06,400
going to have apps or workloads which

00:04:03,790 --> 00:04:08,620
run on the cloud it could be running

00:04:06,400 --> 00:04:11,380
within a kubernetes cluster or it could

00:04:08,620 --> 00:04:13,870
be running in cloud foundry or these

00:04:11,380 --> 00:04:16,150
could be external I mean the reality in

00:04:13,870 --> 00:04:19,209
any enterprise is that things are not

00:04:16,150 --> 00:04:21,040
running in one kind of environment you

00:04:19,209 --> 00:04:23,050
know they are not running in isolate

00:04:21,040 --> 00:04:24,720
you are always dealing with hybrid

00:04:23,050 --> 00:04:28,120
environments so you have applications

00:04:24,720 --> 00:04:29,890
which are in your managed cloud but then

00:04:28,120 --> 00:04:31,960
you also have like applications and

00:04:29,890 --> 00:04:35,110
services which are outside that

00:04:31,960 --> 00:04:36,880
perimeter so we want to follow the you

00:04:35,110 --> 00:04:39,130
know like model of zero trust like trust

00:04:36,880 --> 00:04:41,520
nothing have an explicit policy in place

00:04:39,130 --> 00:04:45,790
for identity and access management so

00:04:41,520 --> 00:04:47,470
from that point of view when we set out

00:04:45,790 --> 00:04:50,560
to sort of you know like solve the

00:04:47,470 --> 00:04:52,090
identity challenge the one thing that we

00:04:50,560 --> 00:04:55,240
thought about was you know like let's

00:04:52,090 --> 00:04:57,430
let's create a standard standards-based

00:04:55,240 --> 00:05:00,490
approach to doing this there are already

00:04:57,430 --> 00:05:03,910
standards out there for how identity is

00:05:00,490 --> 00:05:07,180
expressed how users authenticate how

00:05:03,910 --> 00:05:10,270
identity information and claims are

00:05:07,180 --> 00:05:12,820
propagated across trust domains so

00:05:10,270 --> 00:05:15,370
that's where you AAA comes in so what

00:05:12,820 --> 00:05:18,280
you AAA is doing is it is abstracting

00:05:15,370 --> 00:05:21,010
out everything identity related and it

00:05:18,280 --> 00:05:23,470
is providing you a standards-based

00:05:21,010 --> 00:05:26,770
approach to consuming identity and

00:05:23,470 --> 00:05:31,180
access related functionality so on the

00:05:26,770 --> 00:05:33,910
far right side you have users in an

00:05:31,180 --> 00:05:34,420
enterprise who could be in Active

00:05:33,910 --> 00:05:37,870
Directory

00:05:34,420 --> 00:05:40,180
which is LDAP or it could be a federated

00:05:37,870 --> 00:05:43,090
identity store so it could be sam'l or

00:05:40,180 --> 00:05:46,000
open ID Connect but now think about a

00:05:43,090 --> 00:05:48,820
platform operator experience or a app

00:05:46,000 --> 00:05:50,920
app operator or app developer experience

00:05:48,820 --> 00:05:54,910
do you want to go and learn all those

00:05:50,920 --> 00:05:56,860
protocols I hope not I mean if you look

00:05:54,910 --> 00:05:58,600
at the sam'l spec it's probably like 30

00:05:56,860 --> 00:06:00,970
pages long and by the time you are done

00:05:58,600 --> 00:06:02,860
with it you will ask yourself why did I

00:06:00,970 --> 00:06:05,860
go through it and what exactly am I

00:06:02,860 --> 00:06:08,440
supposed to implement so what what we

00:06:05,860 --> 00:06:13,060
want to do is provide you a standard

00:06:08,440 --> 00:06:15,760
interface and do basically proxying of

00:06:13,060 --> 00:06:17,440
protocols so that you do not have to

00:06:15,760 --> 00:06:19,810
know about all the different protocols

00:06:17,440 --> 00:06:21,730
that exist out there so sam'l being the

00:06:19,810 --> 00:06:23,560
oldest one but then we have open ID

00:06:21,730 --> 00:06:28,770
connect based identity providers as well

00:06:23,560 --> 00:06:30,210
so what we what we give as a standard

00:06:28,770 --> 00:06:33,220
authentication and authorization

00:06:30,210 --> 00:06:35,950
interface or an identity interface or

00:06:33,220 --> 00:06:37,630
platform and apps is actually worth an

00:06:35,950 --> 00:06:40,660
open ID connect it is a much newer

00:06:37,630 --> 00:06:43,080
standard and I would say a much more

00:06:40,660 --> 00:06:45,970
lightweight standard in terms of

00:06:43,080 --> 00:06:49,030
expressing identity and performing an

00:06:45,970 --> 00:06:51,130
authentication and authorization so I'm

00:06:49,030 --> 00:06:54,280
pretty sure you all are familiar with

00:06:51,130 --> 00:06:58,810
JWT which is the JSON web token it is a

00:06:54,280 --> 00:07:01,630
way to propagate identity and it's

00:06:58,810 --> 00:07:03,940
pretty much a standard set in open ID

00:07:01,630 --> 00:07:06,160
connect so if you are using Open ID

00:07:03,940 --> 00:07:08,860
connect the token format is always JWT

00:07:06,160 --> 00:07:10,960
but what does not specify that because

00:07:08,860 --> 00:07:15,490
it deals mainly with access not the

00:07:10,960 --> 00:07:17,470
identity so to sum it all up what you a

00:07:15,490 --> 00:07:19,660
a is really doing for you is it is

00:07:17,470 --> 00:07:22,570
providing a standards-based identity

00:07:19,660 --> 00:07:25,300
both at a platform level as well as at

00:07:22,570 --> 00:07:29,650
your app level be it internal apps or

00:07:25,300 --> 00:07:31,150
external apps some basic concepts about

00:07:29,650 --> 00:07:34,440
you a before we get into all the

00:07:31,150 --> 00:07:37,480
features and roadmap users in UA a can

00:07:34,440 --> 00:07:40,510
come in two shapes one is they could be

00:07:37,480 --> 00:07:42,310
internal or they could be external so

00:07:40,510 --> 00:07:44,590
when I say external these are your

00:07:42,310 --> 00:07:47,020
existing user stores so it could be like

00:07:44,590 --> 00:07:50,890
a LDAP sam'l or a open ID connect

00:07:47,020 --> 00:07:53,530
compliant identity provider now another

00:07:50,890 --> 00:07:56,080
big puzzle puzzle piece is you know like

00:07:53,530 --> 00:07:59,830
permissions ok I'm a user I prove my

00:07:56,080 --> 00:08:02,050
identity but what am I allowed to do so

00:07:59,830 --> 00:08:05,320
that is something that we govern via

00:08:02,050 --> 00:08:08,169
something called as groups so users get

00:08:05,320 --> 00:08:10,270
associated with groups and applications

00:08:08,169 --> 00:08:13,510
also get associated with groups so this

00:08:10,270 --> 00:08:18,190
is a confusing part is applications as

00:08:13,510 --> 00:08:20,520
get associated with groups wherein if a

00:08:18,190 --> 00:08:23,650
user is acting through an application

00:08:20,520 --> 00:08:27,460
the user the application is only allowed

00:08:23,650 --> 00:08:30,040
to do things which are set at an app

00:08:27,460 --> 00:08:32,140
level as a permission so our typical

00:08:30,040 --> 00:08:34,000
example you know like say for example

00:08:32,140 --> 00:08:36,490
you have Facebook and you want to use

00:08:34,000 --> 00:08:38,589
your Facebook account to log into some

00:08:36,490 --> 00:08:40,360
news web site or something the first

00:08:38,589 --> 00:08:42,760
thing that will pop up is hey like do

00:08:40,360 --> 00:08:44,850
you want this website to receive the

00:08:42,760 --> 00:08:46,770
your profile but

00:08:44,850 --> 00:08:48,900
do you want this website to receive your

00:08:46,770 --> 00:08:50,820
friend list right so but then you get to

00:08:48,900 --> 00:08:53,430
check the boxes right like I want to

00:08:50,820 --> 00:08:55,500
allow probably profile information but

00:08:53,430 --> 00:08:59,240
not the ability to access all my friends

00:08:55,500 --> 00:09:02,970
I hope not after the Facebook debacle so

00:08:59,240 --> 00:09:05,040
so basically you you will see that you

00:09:02,970 --> 00:09:06,900
are setting access at like a user level

00:09:05,040 --> 00:09:09,390
as well as the application level and

00:09:06,900 --> 00:09:11,010
both of them together govern what a user

00:09:09,390 --> 00:09:16,290
is allowed to do in a given application

00:09:11,010 --> 00:09:20,270
context finally in any organization

00:09:16,290 --> 00:09:23,100
access is driven through groups right so

00:09:20,270 --> 00:09:24,840
user gets access to applications based

00:09:23,100 --> 00:09:27,000
on the group's they are in so that is a

00:09:24,840 --> 00:09:29,520
very typical way of performing access

00:09:27,000 --> 00:09:31,950
management in an enterprise so a you a a

00:09:29,520 --> 00:09:34,620
supports this model wherein you a a

00:09:31,950 --> 00:09:36,900
groups can be derived or mapped to

00:09:34,620 --> 00:09:38,640
external groups so it gives you another

00:09:36,900 --> 00:09:40,350
layer of sort of defining your

00:09:38,640 --> 00:09:43,350
application specific roles or

00:09:40,350 --> 00:09:46,290
permissions and as I mentioned before

00:09:43,350 --> 00:09:50,240
you a can also connect to like LDAP

00:09:46,290 --> 00:09:50,240
sam'l or open ID connect based providers

00:09:51,290 --> 00:09:58,260
so this is just like a very basic flow

00:09:55,140 --> 00:10:01,200
of everyone here has been familiar with

00:09:58,260 --> 00:10:02,850
the CF command-line interface and this

00:10:01,200 --> 00:10:05,100
is just to show you know like okay I

00:10:02,850 --> 00:10:06,810
talked about identity did a lot of hand

00:10:05,100 --> 00:10:08,430
waving around protocols but what's

00:10:06,810 --> 00:10:11,640
what's really happening at the ground

00:10:08,430 --> 00:10:14,100
level as an app developer when you

00:10:11,640 --> 00:10:15,210
access the CF CLI are the very first

00:10:14,100 --> 00:10:17,910
thing you have to do is you have to

00:10:15,210 --> 00:10:20,220
login right and you provide your

00:10:17,910 --> 00:10:23,210
username and password that is actually

00:10:20,220 --> 00:10:26,670
something which the CF CLI as a client

00:10:23,210 --> 00:10:28,520
passes on to you AAA so that you AAA can

00:10:26,670 --> 00:10:31,620
first of all authenticate the user and

00:10:28,520 --> 00:10:34,620
then it also validates the identity of

00:10:31,620 --> 00:10:37,950
the CF CLI itself so that it knows that

00:10:34,620 --> 00:10:40,560
the request has been made by a trusted

00:10:37,950 --> 00:10:43,020
application so once it has done all of

00:10:40,560 --> 00:10:45,690
that authentication and validation of

00:10:43,020 --> 00:10:48,570
the client it generates a token which is

00:10:45,690 --> 00:10:52,470
a JWT format and it throws it to the CLI

00:10:48,570 --> 00:10:55,220
and then the CLI is essentially a very

00:10:52,470 --> 00:10:58,410
thin application it doesn't have

00:10:55,220 --> 00:11:00,060
basically like any kind of like a

00:10:58,410 --> 00:11:01,769
heavy backhand or anything it is

00:11:00,060 --> 00:11:04,709
interacting with the cloud controller

00:11:01,769 --> 00:11:07,050
API so what the CLI does is it takes the

00:11:04,709 --> 00:11:09,569
token and say for example you want to do

00:11:07,050 --> 00:11:12,269
a listing of the applications in your

00:11:09,569 --> 00:11:15,120
space it is going to call the b2 apps

00:11:12,269 --> 00:11:16,980
endpoint but when it does that it is

00:11:15,120 --> 00:11:19,910
actually going to pass the token that it

00:11:16,980 --> 00:11:23,279
received from UAA and that is what tells

00:11:19,910 --> 00:11:25,680
tapi or cloud controller api what the

00:11:23,279 --> 00:11:28,139
identity of the user is so when cloud

00:11:25,680 --> 00:11:31,399
controller API receives the token it

00:11:28,139 --> 00:11:35,189
actually validates the token before it

00:11:31,399 --> 00:11:37,560
does further processing and provides an

00:11:35,189 --> 00:11:39,240
app listing so there is some complexity

00:11:37,560 --> 00:11:41,100
that I have left out of this picture

00:11:39,240 --> 00:11:43,920
which is a cloud controller does its own

00:11:41,100 --> 00:11:48,329
authorization which is based on spaces

00:11:43,920 --> 00:11:55,290
and arcs and so that is done after the

00:11:48,329 --> 00:11:56,910
token validation is successful so new

00:11:55,290 --> 00:11:59,970
features rise

00:11:56,910 --> 00:12:01,589
the first thing or the most important

00:11:59,970 --> 00:12:02,730
thing that we've done in the past few

00:12:01,589 --> 00:12:06,120
months is we've added Google

00:12:02,730 --> 00:12:07,589
Authenticator support I'm pretty sure

00:12:06,120 --> 00:12:09,120
you all are familiar with you know like

00:12:07,589 --> 00:12:12,480
the Google Authenticator app which

00:12:09,120 --> 00:12:15,089
generates one-time codes which is based

00:12:12,480 --> 00:12:20,189
on the TOTP or the time-based one-time

00:12:15,089 --> 00:12:24,600
password so from a UA a perspective we

00:12:20,189 --> 00:12:26,970
are looking at two personas one is the

00:12:24,600 --> 00:12:29,550
administrator persona and one is the end

00:12:26,970 --> 00:12:31,980
user persona so this end user could be a

00:12:29,550 --> 00:12:34,350
developer or app end user it could be

00:12:31,980 --> 00:12:37,110
any user who is accessing an application

00:12:34,350 --> 00:12:39,990
protected by UAE from an admin

00:12:37,110 --> 00:12:41,519
perspective what they do is if they want

00:12:39,990 --> 00:12:44,279
to enable multi-factor authentication

00:12:41,519 --> 00:12:48,389
you would do so at the identities own

00:12:44,279 --> 00:12:48,870
level so identity zone is a tenant in

00:12:48,389 --> 00:12:52,079
UAE

00:12:48,870 --> 00:12:54,480
so the when you deploy UAE you get a

00:12:52,079 --> 00:12:57,240
default identity zone but you can create

00:12:54,480 --> 00:12:59,610
more tenants or identity zones so mfa

00:12:57,240 --> 00:13:01,769
can be or Google Authenticator which is

00:12:59,610 --> 00:13:04,649
a form of MFA it can be turned on at

00:13:01,769 --> 00:13:06,720
identity zone level administrators can

00:13:04,649 --> 00:13:10,200
also reset users M

00:13:06,720 --> 00:13:13,170
so in case of a lost device or a

00:13:10,200 --> 00:13:15,480
compromised device you can an

00:13:13,170 --> 00:13:18,290
administrator can go in and reset the

00:13:15,480 --> 00:13:21,660
user status so that they can reinforce

00:13:18,290 --> 00:13:24,990
the user front there are a few things

00:13:21,660 --> 00:13:26,880
that happen so users experience is

00:13:24,990 --> 00:13:29,780
driven either by a application the

00:13:26,880 --> 00:13:32,490
access or a command-line interface so

00:13:29,780 --> 00:13:35,790
let's drive home the use case with the

00:13:32,490 --> 00:13:38,490
CF CLI so for example you access the CFC

00:13:35,790 --> 00:13:40,230
Li the very first thing you do is you

00:13:38,490 --> 00:13:41,490
have to login right you enter your

00:13:40,230 --> 00:13:43,740
username and password

00:13:41,490 --> 00:13:46,020
but authentication is not complete at

00:13:43,740 --> 00:13:48,900
that time because the administrator has

00:13:46,020 --> 00:13:52,440
turned on MFA at the identity zone level

00:13:48,900 --> 00:13:55,650
right so at that time there is an inline

00:13:52,440 --> 00:13:57,750
registration that a user has to perform

00:13:55,650 --> 00:14:00,090
with Google Authenticator so you

00:13:57,750 --> 00:14:02,880
basically scan the QR code with the

00:14:00,090 --> 00:14:06,150
Google Authenticator app and you are set

00:14:02,880 --> 00:14:08,640
to generate one-time passwords so next

00:14:06,150 --> 00:14:11,250
step you do is so this is the UI flow

00:14:08,640 --> 00:14:12,600
wherein the UI is going to prompt to you

00:14:11,250 --> 00:14:15,090
for here enter it the Google

00:14:12,600 --> 00:14:17,100
Authenticator code if it is the CLI the

00:14:15,090 --> 00:14:19,560
CLI will provide an additional prompt

00:14:17,100 --> 00:14:22,140
for username password and the one-time

00:14:19,560 --> 00:14:23,850
code so unless you enter the one-time

00:14:22,140 --> 00:14:25,920
code you won't be able to access

00:14:23,850 --> 00:14:28,020
whatever you set out to access so it

00:14:25,920 --> 00:14:30,150
could be an app listing or you could be

00:14:28,020 --> 00:14:31,980
accessing a web application the token

00:14:30,150 --> 00:14:36,090
will not be generated until until the

00:14:31,980 --> 00:14:38,460
MFA is complete so this exists today in

00:14:36,090 --> 00:14:41,670
preview mode there is one last thing

00:14:38,460 --> 00:14:44,100
that we are working on from a MFA

00:14:41,670 --> 00:14:45,480
perspective is encryption at rest for

00:14:44,100 --> 00:14:47,040
the credentials so that's something that

00:14:45,480 --> 00:14:50,520
we'll provide in the next release and

00:14:47,040 --> 00:14:54,020
then it will be generally available so

00:14:50,520 --> 00:14:57,290
what about the future use cases with MFA

00:14:54,020 --> 00:15:01,100
one thing that has come up repeatedly is

00:14:57,290 --> 00:15:03,510
step-up authentication for users so a

00:15:01,100 --> 00:15:06,150
lot of the times we've heard that I

00:15:03,510 --> 00:15:08,190
don't want to generate like I don't want

00:15:06,150 --> 00:15:10,560
to enable MFA for the whole user

00:15:08,190 --> 00:15:14,010
community at the end of the day you know

00:15:10,560 --> 00:15:16,800
it it it introduces friction in the

00:15:14,010 --> 00:15:19,470
login experience and you would rather do

00:15:16,800 --> 00:15:21,570
it on a need basis and depending on you

00:15:19,470 --> 00:15:23,340
know like whether you are doing like

00:15:21,570 --> 00:15:26,010
really privileged actions within a

00:15:23,340 --> 00:15:28,410
system right so we would like to do

00:15:26,010 --> 00:15:31,040
step-up authentication for users so that

00:15:28,410 --> 00:15:33,270
we don't enable it for all the users so

00:15:31,040 --> 00:15:36,390
again taking like the Cloud Foundry

00:15:33,270 --> 00:15:38,520
example we could potentially turn on MFA

00:15:36,390 --> 00:15:40,260
in the future only for administrators

00:15:38,520 --> 00:15:41,940
but not necessarily for all the

00:15:40,260 --> 00:15:43,470
developers now if you are an

00:15:41,940 --> 00:15:46,320
organization and from a compliance

00:15:43,470 --> 00:15:48,450
perspective you have to have MFA turned

00:15:46,320 --> 00:15:51,240
on for everyone then you could do zone

00:15:48,450 --> 00:15:52,950
level opt into zone level MFA but if not

00:15:51,240 --> 00:15:55,170
you want to turn it on only for

00:15:52,950 --> 00:15:57,740
administrators you could do so in the

00:15:55,170 --> 00:16:01,560
future not not right now

00:15:57,740 --> 00:16:04,260
another feature that we've added is Open

00:16:01,560 --> 00:16:07,650
ID Connect session management so that's

00:16:04,260 --> 00:16:10,290
a handful basically at its heart what we

00:16:07,650 --> 00:16:13,590
are providing is single logout for

00:16:10,290 --> 00:16:15,090
applications so let me let me give you

00:16:13,590 --> 00:16:17,910
sort of like a simplistic picture of

00:16:15,090 --> 00:16:21,210
this first you have multiple apps or

00:16:17,910 --> 00:16:23,490
that a user is accessing so if you work

00:16:21,210 --> 00:16:26,610
that sam'l and single logout it's a very

00:16:23,490 --> 00:16:29,250
similar kind of a flow if a user logs

00:16:26,610 --> 00:16:31,770
out of one application you want to log

00:16:29,250 --> 00:16:33,330
the user out of all the applications so

00:16:31,770 --> 00:16:36,180
how do you achieve something like that

00:16:33,330 --> 00:16:39,450
so there is a spec out there called Open

00:16:36,180 --> 00:16:41,940
ID Connect session management and it

00:16:39,450 --> 00:16:45,570
provides a way for achieving that using

00:16:41,940 --> 00:16:48,480
javascript so when a user initiates a

00:16:45,570 --> 00:16:50,910
logout at an application this happens

00:16:48,480 --> 00:16:52,830
today the the top part happens today the

00:16:50,910 --> 00:16:55,680
application invokes like a logout

00:16:52,830 --> 00:16:58,020
endpoint on UA a UA a session is cleaned

00:16:55,680 --> 00:17:00,030
up and in case you were using some other

00:16:58,020 --> 00:17:02,400
sam'l identity provider behind the

00:17:00,030 --> 00:17:03,930
scenes we will invoke the single log out

00:17:02,400 --> 00:17:05,910
on the sam'l side as well and your

00:17:03,930 --> 00:17:09,180
session will be cleared what did not

00:17:05,910 --> 00:17:12,450
exist previously was how do other apps

00:17:09,180 --> 00:17:16,230
get notification that a application

00:17:12,450 --> 00:17:18,360
logout has happened so what happens is

00:17:16,230 --> 00:17:20,640
the other apps or pretty much all the

00:17:18,360 --> 00:17:23,280
apps who who are using this particular

00:17:20,640 --> 00:17:26,250
JavaScript library repeatedly check for

00:17:23,280 --> 00:17:28,050
the state of the session on the UA a

00:17:26,250 --> 00:17:30,690
front-end so this is the mind-bending

00:17:28,050 --> 00:17:30,940
part of the protocol which is there are

00:17:30,690 --> 00:17:34,810
some

00:17:30,940 --> 00:17:37,960
called as html5 postmessage so that when

00:17:34,810 --> 00:17:39,670
you use that mode the network traffic

00:17:37,960 --> 00:17:42,430
there is not a lot of track traffic

00:17:39,670 --> 00:17:46,300
going back and forth between the app and

00:17:42,430 --> 00:17:50,860
UAE because with html5 postmessage you

00:17:46,300 --> 00:17:53,650
can within the browser and a trusted

00:17:50,860 --> 00:17:55,960
domain you can check for UAS session

00:17:53,650 --> 00:17:58,540
without actually invoking the backend so

00:17:55,960 --> 00:18:02,230
the app invokes like a check session end

00:17:58,540 --> 00:18:03,970
point on UAE and then the session state

00:18:02,230 --> 00:18:07,000
in this case will be propagated to the

00:18:03,970 --> 00:18:09,490
app and the apps like some other app has

00:18:07,000 --> 00:18:11,290
initiated logout so this app would know

00:18:09,490 --> 00:18:13,540
immediately that hey logout has been

00:18:11,290 --> 00:18:15,480
initiated so I need to log out as well

00:18:13,540 --> 00:18:18,790
so that's how we achieve single log out

00:18:15,480 --> 00:18:21,280
so all of this is open source we've

00:18:18,790 --> 00:18:23,530
introduced a new library it's called you

00:18:21,280 --> 00:18:25,420
a a singular and it has been NPM

00:18:23,530 --> 00:18:28,720
packaged as well so it's easy to sort of

00:18:25,420 --> 00:18:30,580
bring into your JavaScript apps and it

00:18:28,720 --> 00:18:33,160
works only for single page applications

00:18:30,580 --> 00:18:35,770
so you if you are using an implicit

00:18:33,160 --> 00:18:40,650
client or an implicit flow you can use

00:18:35,770 --> 00:18:40,650
this library for for single logout

00:18:40,830 --> 00:18:52,420
okay so UAA and kubernetes from a UA a

00:18:49,360 --> 00:18:56,550
perspective what we what we set out to

00:18:52,420 --> 00:18:59,770
achieve was platform I am for kubernetes

00:18:56,550 --> 00:19:02,710
so in kubernetes there is already the

00:18:59,770 --> 00:19:06,640
concept of a user or a service account

00:19:02,710 --> 00:19:09,070
but if you want to sort of bring your

00:19:06,640 --> 00:19:10,660
own enterprise identity how do you do

00:19:09,070 --> 00:19:15,010
that in a consistent manner

00:19:10,660 --> 00:19:19,390
so what kubernetes exposes is open ID

00:19:15,010 --> 00:19:21,940
connect interface so with kubernetes if

00:19:19,390 --> 00:19:25,270
you are an open ID connect compliant

00:19:21,940 --> 00:19:27,820
identity provider then you can plug in

00:19:25,270 --> 00:19:29,950
that identity provider into kubernetes

00:19:27,820 --> 00:19:32,470
so this works really well for you AAA

00:19:29,950 --> 00:19:35,170
because you AAA is a open ID connect

00:19:32,470 --> 00:19:37,660
compliant identity provider but the

00:19:35,170 --> 00:19:39,670
benefit of you AAA is that it does not

00:19:37,660 --> 00:19:42,310
support just open ID connect but it can

00:19:39,670 --> 00:19:44,659
sort of federate over to like a sam'l or

00:19:42,310 --> 00:19:46,700
it could Fedder a tow to

00:19:44,659 --> 00:19:49,820
Active Directory just simple Active

00:19:46,700 --> 00:19:51,830
Directory as well so with you a a you

00:19:49,820 --> 00:19:54,259
basically get the benefits of hey like

00:19:51,830 --> 00:19:57,739
there is a consistent way to do I am

00:19:54,259 --> 00:20:02,210
across cloud foundry and kubernetes with

00:19:57,739 --> 00:20:05,809
UAE and the UAE interface to kubernetes

00:20:02,210 --> 00:20:09,080
is open ID connect so how do you achieve

00:20:05,809 --> 00:20:12,919
this so the way we tested this was with

00:20:09,080 --> 00:20:15,019
mini queue and will will provide all of

00:20:12,919 --> 00:20:18,769
this information separately as well as a

00:20:15,019 --> 00:20:21,619
as a dark article but what you do is

00:20:18,769 --> 00:20:25,549
first of all you need to tell kubernetes

00:20:21,619 --> 00:20:29,239
on what the identity provider is so you

00:20:25,549 --> 00:20:31,869
AAA supports something called as the OID

00:20:29,239 --> 00:20:34,340
C discovery protocol through which a

00:20:31,869 --> 00:20:38,269
relying party like kubernetes can

00:20:34,340 --> 00:20:41,299
discover metadata about you a a so you

00:20:38,269 --> 00:20:45,470
need to specify the issuer URL which is

00:20:41,299 --> 00:20:48,830
the UA a base URL for /o auth token you

00:20:45,470 --> 00:20:52,669
need to specify username claim in this

00:20:48,830 --> 00:20:55,220
case the username flows in the dot as

00:20:52,669 --> 00:20:58,039
user underscore name so you need to map

00:20:55,220 --> 00:20:59,659
that you also need to map your groups

00:20:58,039 --> 00:21:02,479
claim and I'll get into the detail of

00:20:59,659 --> 00:21:05,690
that but in case of UA a all the

00:21:02,479 --> 00:21:08,149
permissions and groups flow in scopes so

00:21:05,690 --> 00:21:10,190
there is a scope field in the jar token

00:21:08,149 --> 00:21:12,919
so you need to map that to scope and

00:21:10,190 --> 00:21:14,749
then finally there are two other things

00:21:12,919 --> 00:21:17,539
what is the client ID so you need to

00:21:14,749 --> 00:21:20,960
setup a client for a kubernetes cluster

00:21:17,539 --> 00:21:23,899
in UA a and in this case I've called the

00:21:20,960 --> 00:21:27,349
client mini cube and a groups prefix so

00:21:23,899 --> 00:21:29,330
on the kubernetes front it allows you to

00:21:27,349 --> 00:21:31,249
introduce like a namespace for all the

00:21:29,330 --> 00:21:33,470
groups that you are propagating to

00:21:31,249 --> 00:21:38,389
kubernetes so I have used in groups

00:21:33,470 --> 00:21:41,450
prefix of oh I DC so on the coop config

00:21:38,389 --> 00:21:44,450
side what what you have to do is you

00:21:41,450 --> 00:21:48,379
have to specify a client ID a client

00:21:44,450 --> 00:21:51,950
secret the ID token the issuer URL and

00:21:48,379 --> 00:21:53,929
the optional refresh token so one

00:21:51,950 --> 00:21:56,299
question that we've gotten repeatedly is

00:21:53,929 --> 00:21:57,720
hey like should I use the access token

00:21:56,299 --> 00:21:59,610
or the ID token

00:21:57,720 --> 00:22:01,920
they both look very similar in UAE

00:21:59,610 --> 00:22:04,500
because they both are jart and the

00:22:01,920 --> 00:22:06,660
answer is you can use anyone you can use

00:22:04,500 --> 00:22:09,240
an ID token or an access token but

00:22:06,660 --> 00:22:11,130
please make sure that you do the mapping

00:22:09,240 --> 00:22:13,680
right because an ID token doesn't

00:22:11,130 --> 00:22:15,360
contain a scopes claim it can contain an

00:22:13,680 --> 00:22:19,620
external groups claim so you need to do

00:22:15,360 --> 00:22:22,560
the mapping right so finally like if you

00:22:19,620 --> 00:22:24,930
a a is asserting on an identity the next

00:22:22,560 --> 00:22:27,420
step is what can the identity do in

00:22:24,930 --> 00:22:28,530
kubernetes so in kubernetes there is a

00:22:27,420 --> 00:22:30,690
role-model

00:22:28,530 --> 00:22:33,090
already established it's in place

00:22:30,690 --> 00:22:35,550
kubernetes supports different kinds of

00:22:33,090 --> 00:22:37,710
authorization in an enterprise the

00:22:35,550 --> 00:22:40,710
highly recommended system is role-based

00:22:37,710 --> 00:22:42,180
access control which is simple easy to

00:22:40,710 --> 00:22:46,950
understand and gives you a lot of

00:22:42,180 --> 00:22:49,770
visibility into your access so so on the

00:22:46,950 --> 00:22:54,360
kubernetes front if you use the cluster

00:22:49,770 --> 00:22:57,030
binding command a cluster role binding

00:22:54,360 --> 00:23:01,830
command you will be able to map a

00:22:57,030 --> 00:23:04,980
cluster role to a group of the user so

00:23:01,830 --> 00:23:09,590
over here I am saying that if there is a

00:23:04,980 --> 00:23:13,380
user group of org admin then make them a

00:23:09,590 --> 00:23:15,470
cluster admin in kubernetes so once this

00:23:13,380 --> 00:23:18,810
cluster role binding is in place

00:23:15,470 --> 00:23:22,410
everyone who logs in and has a group

00:23:18,810 --> 00:23:25,230
membership of Arg one admin they will be

00:23:22,410 --> 00:23:29,520
able to go in and perform operations as

00:23:25,230 --> 00:23:32,130
a cluster administrator so you could you

00:23:29,520 --> 00:23:33,630
could do this at a user level also or

00:23:32,130 --> 00:23:35,070
you could do it at a group level so

00:23:33,630 --> 00:23:37,200
individually like I could go in and

00:23:35,070 --> 00:23:39,150
basically say that Sri gets to be a

00:23:37,200 --> 00:23:42,480
cluster admin as opposed to a group

00:23:39,150 --> 00:23:44,400
membership but again that the model does

00:23:42,480 --> 00:23:49,560
not scale you want to do this at a group

00:23:44,400 --> 00:23:52,740
level the next thing is so we talked

00:23:49,560 --> 00:23:57,270
about platform I am that kubernetes what

00:23:52,740 --> 00:24:01,560
about you know like app I am and what do

00:23:57,270 --> 00:24:04,020
we do today so how you a a today is used

00:24:01,560 --> 00:24:06,120
to secure apps is you can create

00:24:04,020 --> 00:24:08,700
multiple tenants in you a a and you can

00:24:06,120 --> 00:24:09,990
use that identity zone or tenant to

00:24:08,700 --> 00:24:13,440
secure your apps

00:24:09,990 --> 00:24:14,909
so like pivotal has written their own

00:24:13,440 --> 00:24:16,799
service broker for you AAA

00:24:14,909 --> 00:24:19,649
it has called the pivotal single sign-on

00:24:16,799 --> 00:24:22,080
service but so have other foundation

00:24:19,649 --> 00:24:25,250
members like GE and sa P so they also

00:24:22,080 --> 00:24:29,570
have like their own service brokers but

00:24:25,250 --> 00:24:33,899
the this approach works really well if

00:24:29,570 --> 00:24:36,990
your app framework supports OAuth and

00:24:33,899 --> 00:24:40,340
open ID Connect on the client-side so if

00:24:36,990 --> 00:24:43,710
you've used a spring boot a spring boot

00:24:40,340 --> 00:24:46,919
inherently user spring security and it

00:24:43,710 --> 00:24:48,720
provides you a way to perform and open

00:24:46,919 --> 00:24:50,700
ID connect based authentication in a

00:24:48,720 --> 00:24:53,970
very easy way because you just use

00:24:50,700 --> 00:24:55,409
annotations and new bootable so you know

00:24:53,970 --> 00:24:57,809
like so if you're using a service broker

00:24:55,409 --> 00:24:59,850
the service broker is basically creating

00:24:57,809 --> 00:25:01,890
tenants you can onboard identity

00:24:59,850 --> 00:25:04,110
providers like sam'l identity provider

00:25:01,890 --> 00:25:06,630
and others you can perform group

00:25:04,110 --> 00:25:09,510
mappings and on the developer side as a

00:25:06,630 --> 00:25:12,149
developer you can use spring boot to

00:25:09,510 --> 00:25:14,850
basically integrate with UAE and get

00:25:12,149 --> 00:25:16,710
security for your apps where it does not

00:25:14,850 --> 00:25:19,440
work well is obviously if you are not

00:25:16,710 --> 00:25:22,020
using spring boot then you need to bring

00:25:19,440 --> 00:25:25,679
your own orth library or open ID connect

00:25:22,020 --> 00:25:27,929
library which which is fine it is still

00:25:25,679 --> 00:25:30,630
a standard but then your application

00:25:27,929 --> 00:25:32,429
developers have to understand what is

00:25:30,630 --> 00:25:36,149
taught and open ID connect and what are

00:25:32,429 --> 00:25:40,730
the best practices so this is where we

00:25:36,149 --> 00:25:44,880
are looking at sto as a means of getting

00:25:40,730 --> 00:25:46,890
basically polyglot app I am without the

00:25:44,880 --> 00:25:52,980
need for app developers to code

00:25:46,890 --> 00:25:55,409
insecurity into the applications so this

00:25:52,980 --> 00:25:57,149
is a very very high level diagram like

00:25:55,409 --> 00:25:58,890
there is there is a lot more to sto

00:25:57,149 --> 00:26:01,289
there are a lot of components out there

00:25:58,890 --> 00:26:04,140
sto itself is made up of three things

00:26:01,289 --> 00:26:05,490
there is pilot mixer and earth piece but

00:26:04,140 --> 00:26:07,500
this is this is a simplistic

00:26:05,490 --> 00:26:12,899
representation we don't have a lot of

00:26:07,500 --> 00:26:16,350
time to cover everything here so we have

00:26:12,899 --> 00:26:18,960
UAA so UAA is identity provider and

00:26:16,350 --> 00:26:21,299
identity proxy and its job is to assert

00:26:18,960 --> 00:26:22,650
identities and any other you know

00:26:21,299 --> 00:26:25,980
subjects right

00:26:22,650 --> 00:26:29,360
it could be a system or app as well in

00:26:25,980 --> 00:26:33,360
HBO's model the way it achieves a

00:26:29,360 --> 00:26:37,920
polyglot capabilities is via a sidecar

00:26:33,360 --> 00:26:41,010
and that sidecar is as the name suggests

00:26:37,920 --> 00:26:43,620
it's next to your application and it

00:26:41,010 --> 00:26:46,410
intercepts the traffic that is coming to

00:26:43,620 --> 00:26:48,810
your application and performs some

00:26:46,410 --> 00:26:51,270
common things and one of the common

00:26:48,810 --> 00:26:53,570
things being security so that your app

00:26:51,270 --> 00:26:57,810
developer doesn't have to care about

00:26:53,570 --> 00:27:01,290
security related things so with respect

00:26:57,810 --> 00:27:05,060
to identity and sto on what we want to

00:27:01,290 --> 00:27:08,640
do is a few things one is sto by itself

00:27:05,060 --> 00:27:10,800
provides MPLS so it provides mutual TLS

00:27:08,640 --> 00:27:12,630
between apps and services so there is

00:27:10,800 --> 00:27:16,160
MPLS communication already in there so

00:27:12,630 --> 00:27:19,230
we don't have to do much about that but

00:27:16,160 --> 00:27:22,290
the community is right now working on a

00:27:19,230 --> 00:27:26,340
few things there is the end user

00:27:22,290 --> 00:27:28,200
authentication features being added what

00:27:26,340 --> 00:27:30,990
that means is you can write a

00:27:28,200 --> 00:27:33,930
declarative policy which says that hey I

00:27:30,990 --> 00:27:35,970
want to secure this application with

00:27:33,930 --> 00:27:39,150
Active Directory and I want to allow

00:27:35,970 --> 00:27:40,860
only certain users who are in a certain

00:27:39,150 --> 00:27:43,650
group to come in and access the

00:27:40,860 --> 00:27:46,110
application or the API if you were to do

00:27:43,650 --> 00:27:48,360
it in the old way then you would have to

00:27:46,110 --> 00:27:50,460
you know like basically write some code

00:27:48,360 --> 00:27:53,430
in your application to achieve that but

00:27:50,460 --> 00:27:56,700
with Sto you just write a policy so if

00:27:53,430 --> 00:27:59,910
you look on the right side we tested

00:27:56,700 --> 00:28:02,390
this we tested the dot validation policy

00:27:59,910 --> 00:28:04,590
so if you are familiar with the sto

00:28:02,390 --> 00:28:05,730
command-line tool it's very

00:28:04,590 --> 00:28:07,350
straightforward I mean there are only

00:28:05,730 --> 00:28:10,230
two things you can either create a

00:28:07,350 --> 00:28:13,080
policy or delete a policy so you you do

00:28:10,230 --> 00:28:16,380
like a sto CTL create and I've created a

00:28:13,080 --> 00:28:18,630
short validation policy here and with

00:28:16,380 --> 00:28:22,050
respect to a dot validation you need to

00:28:18,630 --> 00:28:25,050
specify the issuer the audience and the

00:28:22,050 --> 00:28:28,770
keys URI so that the jot can be

00:28:25,050 --> 00:28:31,080
validated so this is an example of a

00:28:28,770 --> 00:28:35,250
policy so there are other policies which

00:28:31,080 --> 00:28:36,600
sto supports like authorization so SPO

00:28:35,250 --> 00:28:39,270
supports like roll

00:28:36,600 --> 00:28:41,730
access at service and method level so

00:28:39,270 --> 00:28:45,150
what that means is if you have a REST

00:28:41,730 --> 00:28:47,700
API and you want to secure all your gets

00:28:45,150 --> 00:28:50,550
and you want to allow a certain persona

00:28:47,700 --> 00:28:52,860
to perform gets but not posts so you

00:28:50,550 --> 00:28:54,690
could do method level security you could

00:28:52,860 --> 00:28:56,820
do that today with spring security if

00:28:54,690 --> 00:28:59,400
you use like pre-authorized filters but

00:28:56,820 --> 00:29:03,090
sto just makes it much easier and makes

00:28:59,400 --> 00:29:05,880
it policy driven so we our hope is that

00:29:03,090 --> 00:29:09,750
we can bring more of sto capabilities

00:29:05,880 --> 00:29:11,220
into the platform into our platform both

00:29:09,750 --> 00:29:13,170
on cloud foundry

00:29:11,220 --> 00:29:16,230
in the cloud native experience as well

00:29:13,170 --> 00:29:20,580
as in the kubernetes experience the CFC

00:29:16,230 --> 00:29:24,330
our I just wanted to work with time

00:29:20,580 --> 00:29:26,220
check here ok so we only have one minute

00:29:24,330 --> 00:29:26,760
and have two slides so I'll get through

00:29:26,220 --> 00:29:33,180
it fast

00:29:26,760 --> 00:29:37,170
so roadmap so I'm pretty sure like you

00:29:33,180 --> 00:29:39,240
all are using you a a today and a lot of

00:29:37,170 --> 00:29:41,730
feedback that we've gotten from you know

00:29:39,240 --> 00:29:46,230
like our big customers right like I'm

00:29:41,730 --> 00:29:47,850
talking big banks and retail and you

00:29:46,230 --> 00:29:51,120
know we have all kinds of customers is

00:29:47,850 --> 00:29:53,040
that they don't like this approach of

00:29:51,120 --> 00:29:56,370
you know like you AAA being shipped in

00:29:53,040 --> 00:29:58,740
every deployment and you AAA being

00:29:56,370 --> 00:30:01,890
shipped in different layers so Bosch has

00:29:58,740 --> 00:30:05,430
its own you AAA when you deploy or do a

00:30:01,890 --> 00:30:08,190
CF deployment you get another UA a now

00:30:05,430 --> 00:30:09,840
there is going to be CF a container

00:30:08,190 --> 00:30:11,940
runtime and it's going to have its own

00:30:09,840 --> 00:30:13,770
UA a where does it end now we will

00:30:11,940 --> 00:30:16,230
introduce functions and does it get its

00:30:13,770 --> 00:30:19,200
own UA a it becomes a nightmare in terms

00:30:16,230 --> 00:30:22,950
of you know like managing all these UAS

00:30:19,200 --> 00:30:25,200
you know at an enterprise scale so what

00:30:22,950 --> 00:30:28,140
we would like to do is at least on the

00:30:25,200 --> 00:30:30,360
open source front basically start with

00:30:28,140 --> 00:30:34,050
like a reference architecture of how to

00:30:30,360 --> 00:30:37,140
run a shared I am service now shared I

00:30:34,050 --> 00:30:39,390
am service is not just UA a but it is it

00:30:37,140 --> 00:30:41,610
involves like other security services

00:30:39,390 --> 00:30:44,250
like cred hub which is for credential

00:30:41,610 --> 00:30:46,620
management and permissions as well which

00:30:44,250 --> 00:30:49,270
is another project that we've picked off

00:30:46,620 --> 00:30:52,600
in incubation and it deals with fine

00:30:49,270 --> 00:30:55,570
authorization so there are two

00:30:52,600 --> 00:30:57,640
dimensions to this solving creating a

00:30:55,570 --> 00:31:00,360
shared iam service one is the product

00:30:57,640 --> 00:31:04,210
dimension that having a common UA a

00:31:00,360 --> 00:31:07,900
across platform and all aspects of the

00:31:04,210 --> 00:31:11,230
platform and for apps as well and being

00:31:07,900 --> 00:31:12,940
able to do that across foundations so a

00:31:11,230 --> 00:31:15,430
typical sort of like a Cloud Foundry

00:31:12,940 --> 00:31:17,410
customer is going to not have one

00:31:15,430 --> 00:31:19,300
foundation but like multiple foundations

00:31:17,410 --> 00:31:21,910
because they want to have like a

00:31:19,300 --> 00:31:23,590
disaster recovery setup but also they

00:31:21,910 --> 00:31:26,260
want to get multi-region support right

00:31:23,590 --> 00:31:27,910
so in those situations if you were to

00:31:26,260 --> 00:31:30,990
have a shared iam layer which is

00:31:27,910 --> 00:31:33,940
resilient then you are basically able to

00:31:30,990 --> 00:31:35,920
reduce your operational burden right of

00:31:33,940 --> 00:31:38,290
being able to replicate the same

00:31:35,920 --> 00:31:40,240
configuration in so many places so

00:31:38,290 --> 00:31:43,450
that's where this reference architecture

00:31:40,240 --> 00:31:45,790
is going to help you out so what we want

00:31:43,450 --> 00:31:48,280
to do as the UA a-team in this case is

00:31:45,790 --> 00:31:50,110
test out these different configurations

00:31:48,280 --> 00:31:52,480
and provide that reference architecture

00:31:50,110 --> 00:31:57,010
and one of the biggest things we have to

00:31:52,480 --> 00:31:59,590
do is pick a persistence layer which are

00:31:57,010 --> 00:32:01,960
layers because we have to be multi cloud

00:31:59,590 --> 00:32:03,400
so we cannot just pick like Google's you

00:32:01,960 --> 00:32:05,290
know like distributed database and

00:32:03,400 --> 00:32:07,540
expect customers who don't want to use

00:32:05,290 --> 00:32:13,150
say Google and want to use Microsoft so

00:32:07,540 --> 00:32:14,620
we want to provide like options this I'm

00:32:13,150 --> 00:32:17,050
going to share these slides are not

00:32:14,620 --> 00:32:18,760
getting to the details of these but this

00:32:17,050 --> 00:32:21,790
is what the team is working on right now

00:32:18,760 --> 00:32:24,730
we are doing we are extending our Open

00:32:21,790 --> 00:32:27,040
ID Connect support so today we support

00:32:24,730 --> 00:32:30,040
open ID connect via the UI and we are

00:32:27,040 --> 00:32:32,050
adding a native support as well where

00:32:30,040 --> 00:32:33,880
and we can collect the username and

00:32:32,050 --> 00:32:36,490
password and pass it on to the open ID

00:32:33,880 --> 00:32:40,330
Connect provider on on the interface

00:32:36,490 --> 00:32:42,790
front we want to revamp our UI and we

00:32:40,330 --> 00:32:45,730
also want to revamp our CLI there is a

00:32:42,790 --> 00:32:49,680
lot of improvements that we could do

00:32:45,730 --> 00:32:52,810
there and we would like to get into that

00:32:49,680 --> 00:32:54,550
finally there has a lot that has

00:32:52,810 --> 00:32:56,350
happened you know since I last presented

00:32:54,550 --> 00:32:58,780
at the summit and now there have been a

00:32:56,350 --> 00:33:01,120
lot of you know communities that have

00:32:58,780 --> 00:33:02,830
gotten kicked off around security it's

00:33:01,120 --> 00:33:05,070
not just Cloud Foundry anymore there is

00:33:02,830 --> 00:33:09,669
communities out there there is Sto and

00:33:05,070 --> 00:33:12,340
recently we kicked off another I would

00:33:09,669 --> 00:33:15,490
call it a working group it's called safe

00:33:12,340 --> 00:33:17,590
if safe access for everyone and the

00:33:15,490 --> 00:33:20,799
Charter for this group is authorization

00:33:17,590 --> 00:33:23,620
Interop today there is only one standard

00:33:20,799 --> 00:33:25,899
for authorization which is zaqqum l it

00:33:23,620 --> 00:33:28,929
works but it does not work also it's

00:33:25,899 --> 00:33:31,299
very heavy and what we have set out to

00:33:28,929 --> 00:33:33,100
do is first of all figure out you know

00:33:31,299 --> 00:33:35,200
like what providing a reference

00:33:33,100 --> 00:33:36,940
architecture again for authorization in

00:33:35,200 --> 00:33:41,139
a hybrid environment and what that means

00:33:36,940 --> 00:33:44,549
and basically go from there and see if

00:33:41,139 --> 00:33:47,549
we want to create a standard around it

00:33:44,549 --> 00:33:47,549
questions

00:33:51,140 --> 00:33:54,140
yes

00:33:56,230 --> 00:33:59,230
sure

00:33:59,510 --> 00:34:04,980
yeah okay so the question was what are

00:34:02,970 --> 00:34:10,619
the reporting capabilities that exist in

00:34:04,980 --> 00:34:12,200
UAA today so in UAE we have audit events

00:34:10,619 --> 00:34:16,080
that get generated for all

00:34:12,200 --> 00:34:19,980
administrative and access and so those

00:34:16,080 --> 00:34:21,510
events can be streamed via syslog so in

00:34:19,980 --> 00:34:24,389
Cloud Foundry there is a component

00:34:21,510 --> 00:34:26,550
called aggregator which is able to sort

00:34:24,389 --> 00:34:28,619
of stream out all the events not just

00:34:26,550 --> 00:34:31,080
from UAA but from other system

00:34:28,619 --> 00:34:34,590
components as well and you can then have

00:34:31,080 --> 00:34:37,320
like a siem product like Splunk or some

00:34:34,590 --> 00:34:39,899
other product wherein you can you know

00:34:37,320 --> 00:34:42,659
like do correlation and you can have

00:34:39,899 --> 00:34:44,760
reporting there but out of the box we do

00:34:42,659 --> 00:34:47,550
not provide any reporting capabilities

00:34:44,760 --> 00:34:50,700
so to speak you can plug in your own

00:34:47,550 --> 00:34:56,429
reporting into UAE through the syslog

00:34:50,700 --> 00:35:02,510
channel does that answer any other

00:34:56,429 --> 00:35:02,510
questions Rajesh

00:35:07,290 --> 00:35:12,360
yeah so the question is like is the

00:35:10,500 --> 00:35:13,980
reference architecture on the roadmap or

00:35:12,360 --> 00:35:18,270
are we asking for feedback right now so

00:35:13,980 --> 00:35:20,790
it's it's on the roadmap because we we

00:35:18,270 --> 00:35:23,760
want to test out what we propose and

00:35:20,790 --> 00:35:26,130
make sure that it can work at enterprise

00:35:23,760 --> 00:35:29,430
scale and it can work in a multi cloud

00:35:26,130 --> 00:35:31,050
environment so the the point of creating

00:35:29,430 --> 00:35:33,090
a reference architecture in the open

00:35:31,050 --> 00:35:34,560
source is to help the community but then

00:35:33,090 --> 00:35:36,470
we would like to take that reference

00:35:34,560 --> 00:35:40,080
architecture on the pivotal side and

00:35:36,470 --> 00:35:42,450
sort of weave that into our enterprise

00:35:40,080 --> 00:35:45,420
offering so that pivotal customers in

00:35:42,450 --> 00:35:47,720
this case just get that support out of

00:35:45,420 --> 00:35:47,720
the box

00:35:53,350 --> 00:35:57,350
[Music]

00:36:00,090 --> 00:36:03,239
[Music]

00:36:05,680 --> 00:36:11,960
sure so the question is not all y'know

00:36:09,770 --> 00:36:14,660
like apps are in the cloud it's a hybrid

00:36:11,960 --> 00:36:17,630
environment so do we do we need to use

00:36:14,660 --> 00:36:21,230
the same service the answer is it

00:36:17,630 --> 00:36:23,600
depends because if those applications

00:36:21,230 --> 00:36:26,180
have to interact with apps and API is on

00:36:23,600 --> 00:36:28,550
the platform there should be some trust

00:36:26,180 --> 00:36:32,540
setup because they all either are

00:36:28,550 --> 00:36:35,900
trusting a common token server like UAE

00:36:32,540 --> 00:36:38,720
or UAE is capable of performing a token

00:36:35,900 --> 00:36:41,300
exchange with a provider that the

00:36:38,720 --> 00:36:44,660
external apps trust so and we support

00:36:41,300 --> 00:36:46,880
both the models so one of the you know

00:36:44,660 --> 00:36:48,860
like goals of the shared I am service is

00:36:46,880 --> 00:36:51,290
to be able to provide that service to

00:36:48,860 --> 00:36:53,240
apps off the platform also and we do

00:36:51,290 --> 00:36:56,540
that today with the service that we

00:36:53,240 --> 00:36:59,060
provide as part of pivotal but since we

00:36:56,540 --> 00:37:01,130
use standards nothing is stopping the

00:36:59,060 --> 00:37:03,770
external app developers from leveraging

00:37:01,130 --> 00:37:05,780
the same server as long as you can as

00:37:03,770 --> 00:37:07,640
long as you can talk the standard or you

00:37:05,780 --> 00:37:09,859
can use the token exchange to get a

00:37:07,640 --> 00:37:16,630
compliant token to make a downstream

00:37:09,859 --> 00:37:20,109
call okay thank you everyone

00:37:16,630 --> 00:37:20,109

YouTube URL: https://www.youtube.com/watch?v=Nd56kXRP16E


