Title: The Vault of Secrets: Secure Credentials Handling - James Hunt, Stark & Wayne
Publication date: 2018-04-21
Playlist: Cloud Foundry Summit NA 2018
Description: 
	The Vault of Secrets: Secure Credentials Handling - James Hunt, Stark & Wayne

Credentials are a tricky thing to get right. Applications running on Cloud Foundry now have the ability to leverage Hashicorp's Vault as a service broker offering. In this talk, we will discuss the finer points of sharing credentials among applications, demo the Vault Service Broker, and introduce a small Open Source Cloud Foundry application for managing secrets directly. 

About James Hunt
James Hunt is the Chief Architect and Technical Evangelist at Stark & Wayne, a leading Cloud Foundry consultancy. He has authored dozens of Open Source projects, including: SHIELD, Safe, Genesis, Spruce, and more.
Captions: 
	00:00:00,030 --> 00:00:03,780
so I wanted to thank everyone for coming

00:00:01,530 --> 00:00:05,730
out to see if summit 2018 here in Boston

00:00:03,780 --> 00:00:09,030
I hope you've all had a excellent time

00:00:05,730 --> 00:00:11,450
so far a lot of good talks a lot of good

00:00:09,030 --> 00:00:14,670
sessions and hands-on labs and whatnot

00:00:11,450 --> 00:00:17,430
now I was told when my talk got accepted

00:00:14,670 --> 00:00:20,160
that I had to show this slide because

00:00:17,430 --> 00:00:22,740
the Boston City Fire Department fire

00:00:20,160 --> 00:00:24,810
code man Nate said of all speakers at

00:00:22,740 --> 00:00:26,760
all venues within the city limits so I

00:00:24,810 --> 00:00:27,750
haven't seen anyone else do this but I'm

00:00:26,760 --> 00:00:31,050
gonna go ahead and go through what I

00:00:27,750 --> 00:00:33,030
like to call the fire slide chat please

00:00:31,050 --> 00:00:35,579
note the exit the location of the

00:00:33,030 --> 00:00:39,600
surrounding emergency exits and locate

00:00:35,579 --> 00:00:42,180
the nearest lit exit sign to you in the

00:00:39,600 --> 00:00:44,850
event of a fire alarm or other emergency

00:00:42,180 --> 00:00:47,399
please calmly exit to the public

00:00:44,850 --> 00:00:52,440
concourse area not the private concourse

00:00:47,399 --> 00:00:53,879
behind the VPN if emergency exit

00:00:52,440 --> 00:00:56,190
stairwells leading to the outside of

00:00:53,879 --> 00:00:58,829
this facility are located along the

00:00:56,190 --> 00:01:00,270
public concourse for your safety in an

00:00:58,829 --> 00:01:04,199
emergency please follow the directions

00:01:00,270 --> 00:01:08,159
of the public safety staff and Fire

00:01:04,199 --> 00:01:10,049
slide this is my talk the vault of

00:01:08,159 --> 00:01:12,900
Secrets we're going to talk today about

00:01:10,049 --> 00:01:14,780
secure credentials handling and how we

00:01:12,900 --> 00:01:17,280
relate with security credentials

00:01:14,780 --> 00:01:19,590
sensitive materials keys and whatnot in

00:01:17,280 --> 00:01:24,869
CF applications on top of everyone's

00:01:19,590 --> 00:01:26,580
favorite paths so Who am I why am i up

00:01:24,869 --> 00:01:29,130
here why am i talking and why are you

00:01:26,580 --> 00:01:31,860
listening to me my name is James Hunt

00:01:29,130 --> 00:01:34,140
I'm on the tweeters at I am James Hunt I

00:01:31,860 --> 00:01:36,930
am the author of safe which is an

00:01:34,140 --> 00:01:38,909
alternate vault CLI that attempts to

00:01:36,930 --> 00:01:39,390
bring a little bit of sanity and ease of

00:01:38,909 --> 00:01:40,890
use

00:01:39,390 --> 00:01:43,110
to what is otherwise an excellent

00:01:40,890 --> 00:01:45,630
software product I also co-authored

00:01:43,110 --> 00:01:48,149
spruce I wrote the vault broker in the

00:01:45,630 --> 00:01:50,670
cloud foundry community I maintain the

00:01:48,149 --> 00:01:53,549
vault and save Bosch releases along with

00:01:50,670 --> 00:01:56,070
a ragtag group of open-source hackers on

00:01:53,549 --> 00:01:56,640
the public Internet these are these mr.

00:01:56,070 --> 00:02:01,520
serabian

00:01:56,640 --> 00:02:01,520
and mr. Daley over there go safe

00:02:02,420 --> 00:02:09,630
secrets are everywhere we cannot escape

00:02:06,060 --> 00:02:12,840
secrets in the modern world we have SSH

00:02:09,630 --> 00:02:15,090
keys to deal with we have API keys for

00:02:12,840 --> 00:02:18,350
all the services we integrate with with

00:02:15,090 --> 00:02:22,700
passwords for accounts we have RSA keys

00:02:18,350 --> 00:02:28,620
client secrets auth tokens signing Keys

00:02:22,700 --> 00:02:34,739
x.509 cas and certs where do we store

00:02:28,620 --> 00:02:37,950
these we've got some options we can hard

00:02:34,739 --> 00:02:40,170
code them into the applications that we

00:02:37,950 --> 00:02:43,830
push whenever we need a secret we just

00:02:40,170 --> 00:02:47,010
pop open the code import DB setup a

00:02:43,830 --> 00:02:50,700
Const use the Const commit push to

00:02:47,010 --> 00:02:54,780
github everything's good as long as you

00:02:50,700 --> 00:02:57,390
trusts github as long as your repo is

00:02:54,780 --> 00:03:10,590
private and dr. NIC doesn't make it

00:02:57,390 --> 00:03:12,329
public accidentally we can put them in

00:03:10,590 --> 00:03:14,310
environment variables we have the

00:03:12,329 --> 00:03:16,709
ability in Cloud Foundry to set in and

00:03:14,310 --> 00:03:19,079
say this is my database secret this is

00:03:16,709 --> 00:03:21,660
my username from my admin account and

00:03:19,079 --> 00:03:24,090
then your only one CF end of away from

00:03:21,660 --> 00:03:25,620
your creds being leaked I do believe

00:03:24,090 --> 00:03:27,630
this is a problem that the CF core team

00:03:25,620 --> 00:03:29,160
is working on I'm very excited to see if

00:03:27,630 --> 00:03:31,650
they're gonna integrate cred hub into

00:03:29,160 --> 00:03:33,329
the actual the storage of secrets and

00:03:31,650 --> 00:03:36,030
make sure that spaces and orgs are

00:03:33,329 --> 00:03:38,760
enforced from a visibility and a

00:03:36,030 --> 00:03:43,160
maintenance standpoint but until then we

00:03:38,760 --> 00:03:46,680
have that problem we have a third option

00:03:43,160 --> 00:03:48,329
we can put them in the database all of

00:03:46,680 --> 00:03:50,910
your apps have some persistent storage

00:03:48,329 --> 00:03:53,609
usually whether that's on my sequel

00:03:50,910 --> 00:03:56,430
database a Postgres database Microsoft

00:03:53,609 --> 00:03:58,049
sequel Redis you've got some persistent

00:03:56,430 --> 00:04:01,880
storage that your application is hooked

00:03:58,049 --> 00:04:06,569
up to that you can pull secret's out of

00:04:01,880 --> 00:04:09,299
so we make a secret stable no problem

00:04:06,569 --> 00:04:11,220
code no longer has secrets environment

00:04:09,299 --> 00:04:14,010
variables no longer have secrets outside

00:04:11,220 --> 00:04:15,209
of the service be caps services all the

00:04:14,010 --> 00:04:15,840
secrets are safely stored in the

00:04:15,209 --> 00:04:21,060
database

00:04:15,840 --> 00:04:22,230
no one can see them except your DBA DBA

00:04:21,060 --> 00:04:25,590
can see your secret so as long as you

00:04:22,230 --> 00:04:27,680
trust your DBA you're fine and if you

00:04:25,590 --> 00:04:32,580
trust the security of the database host

00:04:27,680 --> 00:04:35,130
and I guess if no-one steals the disks

00:04:32,580 --> 00:04:38,010
and mounts an offline attack against my

00:04:35,130 --> 00:04:41,550
head yeah that's not gonna work we can

00:04:38,010 --> 00:04:45,090
encrypt them in the database RSA AES

00:04:41,550 --> 00:04:49,050
some sort of symmetric cipher our

00:04:45,090 --> 00:04:52,560
secrets table now looks like this we no

00:04:49,050 --> 00:04:55,020
longer have to trust on the DBA we no

00:04:52,560 --> 00:04:56,550
longer stay awake at night worrying that

00:04:55,020 --> 00:04:59,040
someone is stealing the disks out from

00:04:56,550 --> 00:05:03,540
one of the database systems everything's

00:04:59,040 --> 00:05:11,550
good to go we are in the clear now we

00:05:03,540 --> 00:05:15,240
have an encryption key all right where

00:05:11,550 --> 00:05:19,710
do we store the encryption key we have

00:05:15,240 --> 00:05:21,450
some options we can hard code it put it

00:05:19,710 --> 00:05:24,690
in the app and poof it no that's not

00:05:21,450 --> 00:05:29,490
going to work we can put it in an

00:05:24,690 --> 00:05:31,830
environment no no no we already already

00:05:29,490 --> 00:05:35,400
ruled that one out oh we can put it in

00:05:31,830 --> 00:05:39,389
the database next to the things that's

00:05:35,400 --> 00:05:44,490
encrypting so that's not work but we can

00:05:39,389 --> 00:05:47,250
encrypt it in the database we have a

00:05:44,490 --> 00:05:49,560
dilemma I like to call it secret zero

00:05:47,250 --> 00:05:51,539
and it's how do you handle the initial

00:05:49,560 --> 00:05:53,280
credential to unlock the next round of

00:05:51,539 --> 00:05:54,599
locks to unlock the round of locks after

00:05:53,280 --> 00:05:56,910
that to get to the secrets in an

00:05:54,599 --> 00:05:58,680
automated fashion that doesn't involve a

00:05:56,910 --> 00:06:03,770
human operator to go in and set a

00:05:58,680 --> 00:06:07,190
password on reboot I have a solution to

00:06:03,770 --> 00:06:10,080
the problem that secrets are tough

00:06:07,190 --> 00:06:11,490
handling them as difficult dealing with

00:06:10,080 --> 00:06:13,620
them is difficult but it is a necessary

00:06:11,490 --> 00:06:16,050
part of our life as application

00:06:13,620 --> 00:06:18,630
developers systems architects and cloud

00:06:16,050 --> 00:06:21,150
engineers the solution I'd like to talk

00:06:18,630 --> 00:06:23,700
about today unsurprisingly is hashed

00:06:21,150 --> 00:06:26,669
corpse vault product it's an open-source

00:06:23,700 --> 00:06:28,630
secrets credential storage system it's

00:06:26,669 --> 00:06:33,130
been around for several years it

00:06:28,630 --> 00:06:35,830
some really nice I really like the vault

00:06:33,130 --> 00:06:37,390
software it's easy to use it has some

00:06:35,830 --> 00:06:39,760
serious thought put into how it does

00:06:37,390 --> 00:06:42,760
security both in resisting offline

00:06:39,760 --> 00:06:45,580
attacks resisting online attacks access

00:06:42,760 --> 00:06:48,280
control they've got a ton of logical

00:06:45,580 --> 00:06:50,080
backends you can do PKI and and safe or

00:06:48,280 --> 00:06:52,030
involved you can do straight-up key

00:06:50,080 --> 00:06:57,910
value store you can do Amazon

00:06:52,030 --> 00:07:00,790
integration it's got everything but what

00:06:57,910 --> 00:07:02,820
about Cloud Foundry how do we take this

00:07:00,790 --> 00:07:07,500
really awesome piece of software and

00:07:02,820 --> 00:07:07,500
integrate it into our CF app workflows

00:07:08,550 --> 00:07:14,320
there's a broker for that that in the

00:07:12,220 --> 00:07:18,310
Cloud Foundry community it's called

00:07:14,320 --> 00:07:27,880
vault broker I don't want to go through

00:07:18,310 --> 00:07:29,710
a quick demo so I have in my possession

00:07:27,880 --> 00:07:31,650
a Cloud Foundry instance set up just for

00:07:29,710 --> 00:07:34,330
you fine folks today for this talk

00:07:31,650 --> 00:07:35,860
indeed I've got an organ of space and we

00:07:34,330 --> 00:07:37,210
are going to take a look at a service

00:07:35,860 --> 00:07:41,580
broker so I've got the vault service

00:07:37,210 --> 00:07:41,580
broker deployed it's registered in - oh

00:07:44,580 --> 00:08:00,030
well that didn't work that's gonna be a

00:07:48,670 --> 00:08:00,030
lot of fun hang on let me see if I can

00:08:09,820 --> 00:08:14,419
yeah better there we go all right as I

00:08:13,520 --> 00:08:16,880
was saying I have a Cloud Foundry

00:08:14,419 --> 00:08:19,430
instance in my possession for you fine

00:08:16,880 --> 00:08:21,979
folks today it has a service broker the

00:08:19,430 --> 00:08:25,270
vault broker is currently registered to

00:08:21,979 --> 00:08:28,190
it and it's available in the marketplace

00:08:25,270 --> 00:08:29,870
and providing the vault shared plan now

00:08:28,190 --> 00:08:32,930
the way the vault broker works is you

00:08:29,870 --> 00:08:34,370
hook up as an Operations team a vault to

00:08:32,930 --> 00:08:36,440
the vault broker and you say this vault

00:08:34,370 --> 00:08:39,050
broker fronts this highly available

00:08:36,440 --> 00:08:42,200
console back file back database back

00:08:39,050 --> 00:08:44,450
however you want to deploy it vault the

00:08:42,200 --> 00:08:47,540
broker responds to the open source

00:08:44,450 --> 00:08:49,910
service broker API requests for

00:08:47,540 --> 00:08:52,640
provisioning by going out and carving up

00:08:49,910 --> 00:08:55,690
a chunk of the secret kv store hierarchy

00:08:52,640 --> 00:08:59,360
names that have to be instanceid binds

00:08:55,690 --> 00:09:01,250
will create a new token an initial token

00:08:59,360 --> 00:09:04,700
that has access to that subtree so

00:09:01,250 --> 00:09:06,770
basically every service will have its

00:09:04,700 --> 00:09:12,440
own view into the vault and they're all

00:09:06,770 --> 00:09:14,600
completely isolated and segregated so

00:09:12,440 --> 00:09:17,660
we're going to create a service we're

00:09:14,600 --> 00:09:20,740
gonna call it vault demo vault

00:09:17,660 --> 00:09:25,459
it's the vault service share plan

00:09:20,740 --> 00:09:29,270
there's our service will be and I have

00:09:25,459 --> 00:09:31,220
an app this is just CF ends nothing

00:09:29,270 --> 00:09:33,080
terribly exciting here we're going to

00:09:31,220 --> 00:09:34,610
bind the service and at this point the

00:09:33,080 --> 00:09:36,290
application now has the service

00:09:34,610 --> 00:09:39,459
credentials to actually connect to the

00:09:36,290 --> 00:09:42,020
vault either v it's a che address

00:09:39,459 --> 00:09:45,950
singleton address using the token and

00:09:42,020 --> 00:09:48,730
and it's its prefixes included so here

00:09:45,950 --> 00:09:52,850
our route is our path right here

00:09:48,730 --> 00:09:58,490
secrets III FF this route token is

00:09:52,850 --> 00:09:59,959
basically akin to a username API key for

00:09:58,490 --> 00:10:03,470
lack of a better word for getting into

00:09:59,959 --> 00:10:10,089
the vault and managing it it's running

00:10:03,470 --> 00:10:13,779
over here on this 10.0 1629 address and

00:10:10,089 --> 00:10:13,779
that's the vault broker

00:10:15,170 --> 00:10:22,260
go back to my slides we also have a UI

00:10:19,440 --> 00:10:24,600
and this was important to me to have a

00:10:22,260 --> 00:10:25,920
UI for this demo because what I just

00:10:24,600 --> 00:10:27,450
showed you isn't terribly exciting we've

00:10:25,920 --> 00:10:30,269
all created services we've all bound

00:10:27,450 --> 00:10:32,880
services the interesting bits aren't

00:10:30,269 --> 00:10:34,230
actually using the services and it's

00:10:32,880 --> 00:10:36,420
really hard to show plumbing like this

00:10:34,230 --> 00:10:38,250
without an actual UI so I wrote a UI

00:10:36,420 --> 00:10:40,350
it's called CF vault UI it's in my

00:10:38,250 --> 00:10:41,519
personal github org I'll probably move

00:10:40,350 --> 00:10:44,519
it into cloud finder community after

00:10:41,519 --> 00:10:46,649
this this talk is over and we have

00:10:44,519 --> 00:10:48,779
another demo I should warn you there's

00:10:46,649 --> 00:10:56,100
actually three demos in this talk lots

00:10:48,779 --> 00:10:59,910
of switching lots of fun stuff we run

00:10:56,100 --> 00:11:04,860
this one more time so back to cloud

00:10:59,910 --> 00:11:07,170
foundry we have our API I'm gonna go

00:11:04,860 --> 00:11:08,610
into the app source I'm gonna push it

00:11:07,170 --> 00:11:10,620
and I'm gonna not start the application

00:11:08,610 --> 00:11:12,510
because the vault UI does not like

00:11:10,620 --> 00:11:13,980
coming up with that vault for obvious

00:11:12,510 --> 00:11:17,089
reasons it doesn't have a whole lot to

00:11:13,980 --> 00:11:19,260
do it gets bored and then it falls over

00:11:17,089 --> 00:11:21,570
so once we're done deploying all this

00:11:19,260 --> 00:11:23,519
we're actually going to take create

00:11:21,570 --> 00:11:25,019
another service find that service to the

00:11:23,519 --> 00:11:30,300
UI and then we're gonna see where the

00:11:25,019 --> 00:11:33,029
magic is so here we are creating our

00:11:30,300 --> 00:11:38,070
service this one's called vault of

00:11:33,029 --> 00:11:41,329
Secrets binding and then we'll go ahead

00:11:38,070 --> 00:11:41,329
and we'll start that vault app

00:11:53,710 --> 00:11:57,520
that's oh the volume I actually

00:11:55,630 --> 00:12:01,120
approximates safe I don't know as anyone

00:11:57,520 --> 00:12:03,610
here used safe a couple people you've

00:12:01,120 --> 00:12:05,110
used safe dr. Nick a couple times once

00:12:03,610 --> 00:12:06,490
or twice

00:12:05,110 --> 00:12:07,810
so we approximate a lot of the

00:12:06,490 --> 00:12:09,100
functionality that safe has on the

00:12:07,810 --> 00:12:09,700
command line and we bring it to a

00:12:09,100 --> 00:12:12,459
browser

00:12:09,700 --> 00:12:14,380
we've got searching we've got the

00:12:12,459 --> 00:12:17,020
ability to generate random types of

00:12:14,380 --> 00:12:19,060
credentials different types of keys SSL

00:12:17,020 --> 00:12:24,870
certificates which is one of my favorite

00:12:19,060 --> 00:12:28,089
parts and this is what it looks like

00:12:24,870 --> 00:12:30,490
so I go up here plus I can create

00:12:28,089 --> 00:12:32,380
arbitrary secrets which are just objects

00:12:30,490 --> 00:12:35,230
with keys and values so username is

00:12:32,380 --> 00:12:43,149
admin password is secrets I can generate

00:12:35,230 --> 00:12:46,870
an SSH key pair I know of varying

00:12:43,149 --> 00:12:50,800
strengths I'm gonna test James SSH I'll

00:12:46,870 --> 00:12:53,290
make myself a 2048-bit key there's my

00:12:50,800 --> 00:12:58,420
key don't use this for anything cuz it's

00:12:53,290 --> 00:13:01,060
on the screen I can also create RSA key

00:12:58,420 --> 00:13:03,970
pairs in varying strengths I can create

00:13:01,060 --> 00:13:05,230
x.509 certificate authorities and then I

00:13:03,970 --> 00:13:07,630
can use those certificates all ready to

00:13:05,230 --> 00:13:10,150
issue actual x.509 search and in so

00:13:07,630 --> 00:13:13,500
doing build a whole tree of CAS for an

00:13:10,150 --> 00:13:15,730
organization or a set of applications

00:13:13,500 --> 00:13:18,100
we're gonna skip that though we're gonna

00:13:15,730 --> 00:13:22,360
go back here and we're gonna look at at

00:13:18,100 --> 00:13:24,880
search on so I can come in here take a

00:13:22,360 --> 00:13:27,010
look at the app or the secret that I

00:13:24,880 --> 00:13:30,310
generated I can copy and paste these

00:13:27,010 --> 00:13:32,830
into various places if I need to and we

00:13:30,310 --> 00:13:35,470
also have the not at all ripped off from

00:13:32,830 --> 00:13:38,430
one password revelation of secrets that

00:13:35,470 --> 00:13:41,440
are currently in password fields a

00:13:38,430 --> 00:13:43,270
totally original design not stolen from

00:13:41,440 --> 00:13:45,510
agile bit software in any form or

00:13:43,270 --> 00:13:45,510
fashion

00:13:50,000 --> 00:13:57,840
so now we have a vault UI I also want to

00:13:54,210 --> 00:14:01,770
talk about an example app and a fun

00:13:57,840 --> 00:14:03,990
little fun little strategy you can use

00:14:01,770 --> 00:14:06,750
with with the vault broker plus an

00:14:03,990 --> 00:14:08,790
application is to bind a service or

00:14:06,750 --> 00:14:10,070
create a service and have one vault that

00:14:08,790 --> 00:14:12,420
you share across multiple applications

00:14:10,070 --> 00:14:14,340
one of those applications might be the

00:14:12,420 --> 00:14:16,080
vault UI and you can go into the vault

00:14:14,340 --> 00:14:17,870
you and you can generate secrets that

00:14:16,080 --> 00:14:20,880
the other applications can go in and

00:14:17,870 --> 00:14:23,610
consume they can pull in keys based on

00:14:20,880 --> 00:14:26,370
path and you could say use this for your

00:14:23,610 --> 00:14:28,140
basic auth I will put it there for you

00:14:26,370 --> 00:14:29,820
manually you don't have to generate

00:14:28,140 --> 00:14:31,680
anything and the operators when they

00:14:29,820 --> 00:14:33,270
push apps don't have to do it and then

00:14:31,680 --> 00:14:36,120
they can kind of live and persist beyond

00:14:33,270 --> 00:14:37,770
so I wrote an example application this

00:14:36,120 --> 00:14:39,180
one will not be going into cloud foundry

00:14:37,770 --> 00:14:41,250
community because it is utterly

00:14:39,180 --> 00:14:45,870
pointless but it is a bit of fun and

00:14:41,250 --> 00:14:49,410
it's called CF API Jen as promised

00:14:45,870 --> 00:14:52,890
here's the other other demo we will go

00:14:49,410 --> 00:14:54,150
through all the fun bits again we push

00:14:52,890 --> 00:14:56,400
it without starting because it

00:14:54,150 --> 00:14:59,490
definitely needs a vault to be deployed

00:14:56,400 --> 00:15:02,820
and what API Jen does is very simple it

00:14:59,490 --> 00:15:04,500
connects to its vaults which we're

00:15:02,820 --> 00:15:06,570
binding that same vault of Secrets we

00:15:04,500 --> 00:15:08,280
didn't create a new service this will be

00:15:06,570 --> 00:15:11,790
the exact same one and then we'll start

00:15:08,280 --> 00:15:14,160
it so API Jen talks to the vault and it

00:15:11,790 --> 00:15:15,900
on the web interface which we'll see in

00:15:14,160 --> 00:15:18,240
just a minute it asks for an email

00:15:15,900 --> 00:15:22,440
address which it purports that it will

00:15:18,240 --> 00:15:23,790
email an API key to you it will go into

00:15:22,440 --> 00:15:26,190
the vault and generate that API key

00:15:23,790 --> 00:15:29,910
stored in the vault ostensibly for

00:15:26,190 --> 00:15:31,740
retrieval later by people like me who

00:15:29,910 --> 00:15:32,610
forget what email address they use for

00:15:31,740 --> 00:15:34,500
random things

00:15:32,610 --> 00:15:36,150
what we're gonna do is we're going to go

00:15:34,500 --> 00:15:37,920
into API Jen we're gonna generate a key

00:15:36,150 --> 00:15:39,330
then we're gonna go to the CF vault UI

00:15:37,920 --> 00:15:41,880
and we're going to search for it and

00:15:39,330 --> 00:15:47,460
we're going to verify that everything's

00:15:41,880 --> 00:15:51,060
wired up properly of course it looks

00:15:47,460 --> 00:15:53,690
terrible in this browser let's go into

00:15:51,060 --> 00:15:53,690
the other browser

00:15:57,750 --> 00:16:06,040
yeah so API Jen before we can get

00:16:04,510 --> 00:16:08,500
started we will need to get you an API

00:16:06,040 --> 00:16:12,490
key and this is for my really cool new

00:16:08,500 --> 00:16:16,209
service we're going to click give me a

00:16:12,490 --> 00:16:19,029
key give it an email address boom it has

00:16:16,209 --> 00:16:20,589
given us an API key I don't write this

00:16:19,029 --> 00:16:22,949
down this is secret please don't

00:16:20,589 --> 00:16:28,360
disperse or disseminate this information

00:16:22,949 --> 00:16:30,970
0 2 F 3 etc etc now if I flip back close

00:16:28,360 --> 00:16:34,149
that I flip back into my vault and I

00:16:30,970 --> 00:16:36,600
look up tokens I have this which I

00:16:34,149 --> 00:16:39,850
didn't have before now and we can

00:16:36,600 --> 00:16:42,149
consult triple check that by going and

00:16:39,850 --> 00:16:45,699
getting another one and I'll do J hunt

00:16:42,149 --> 00:16:50,019
star can win give me a key

00:16:45,699 --> 00:16:52,630
this one's 26:13 if we flip back over to

00:16:50,019 --> 00:16:55,810
the vault UI and rerun the token search

00:16:52,630 --> 00:16:59,260
I now have two tokens both stored

00:16:55,810 --> 00:17:09,549
securely and secretly in the vault and

00:16:59,260 --> 00:17:13,839
if we go in here to 6 1 3 e 101 7 2 6 1

00:17:09,549 --> 00:17:15,549
3 101 7 so this is an interesting to me

00:17:13,839 --> 00:17:18,339
illustration of how you can use

00:17:15,549 --> 00:17:19,630
something like the vault UI and any

00:17:18,339 --> 00:17:21,640
other applications that need to

00:17:19,630 --> 00:17:23,380
communicate secrets as long as you can

00:17:21,640 --> 00:17:25,900
bind them in the same work in space to

00:17:23,380 --> 00:17:27,939
the same service you can actually

00:17:25,900 --> 00:17:29,200
securely share credentials without

00:17:27,939 --> 00:17:36,910
having to put them in environment

00:17:29,200 --> 00:17:38,710
variables right there are those so Cloud

00:17:36,910 --> 00:17:40,690
Foundry gives us the tools involved in

00:17:38,710 --> 00:17:45,429
the vault broker give us the rest of the

00:17:40,690 --> 00:17:50,500
implementation for secrets also Epogen

00:17:45,429 --> 00:17:52,650
loves you we will go back to my final

00:17:50,500 --> 00:17:54,910
slide which is the end of the talk

00:17:52,650 --> 00:17:57,190
running a bit light on content

00:17:54,910 --> 00:17:58,809
apparently so I'm James Hunt I work at

00:17:57,190 --> 00:18:00,790
Stark and Wayne we build lots of things

00:17:58,809 --> 00:18:03,429
for cloud we love Bosh we love Cloud

00:18:00,790 --> 00:18:05,500
Foundry please come see us at our booth

00:18:03,429 --> 00:18:06,250
I think we still have t-shirts to give

00:18:05,500 --> 00:18:08,169
away

00:18:06,250 --> 00:18:11,020
if we don't meet our quota we won't get

00:18:08,169 --> 00:18:12,580
to come back next year so please stop by

00:18:11,020 --> 00:18:16,000
have a chat with some of the fine people

00:18:12,580 --> 00:18:21,240
manning the booths and are there any

00:18:16,000 --> 00:18:21,240
questions thoughts interest demands

00:18:24,210 --> 00:18:30,640
he's got the mic

00:18:26,309 --> 00:18:32,980
hi so what would you do if you don't own

00:18:30,640 --> 00:18:37,510
the vault and you don't have access to

00:18:32,980 --> 00:18:41,770
create backends that's a really good

00:18:37,510 --> 00:18:42,970
question I might know the answer you

00:18:41,770 --> 00:18:45,520
already know the answer

00:18:42,970 --> 00:18:47,620
yeah all right well what would you do if

00:18:45,520 --> 00:18:50,320
you couldn't deploy a vault and didn't

00:18:47,620 --> 00:18:51,549
have the ability to create backends so

00:18:50,320 --> 00:18:55,299
yeah we just we just went through this

00:18:51,549 --> 00:18:58,000
at garmin we we are using vault and we

00:18:55,299 --> 00:19:00,730
we started with this broker and realized

00:18:58,000 --> 00:19:03,909
quickly that we didn't want to have ball

00:19:00,730 --> 00:19:06,400
dropping backends as as new orgs and

00:19:03,909 --> 00:19:08,620
spaces came up and so what we did is we

00:19:06,400 --> 00:19:11,020
enhance the broker to the point where it

00:19:08,620 --> 00:19:13,000
now makes the API calls back into cloud

00:19:11,020 --> 00:19:15,940
foundry gets a hold of the org and the

00:19:13,000 --> 00:19:20,890
space where an app is binding and then

00:19:15,940 --> 00:19:23,590
drops creates a token with a custom role

00:19:20,890 --> 00:19:25,539
that we have predefined knowing that you

00:19:23,590 --> 00:19:28,539
know we know who the orgs and spaces are

00:19:25,539 --> 00:19:31,090
so so the only back-end now that that

00:19:28,539 --> 00:19:34,059
that that comes up on the fly as as

00:19:31,090 --> 00:19:35,919
vault or as as the broker runs is the

00:19:34,059 --> 00:19:37,450
one where it is actually keeping track

00:19:35,919 --> 00:19:40,330
of the bindings themselves and

00:19:37,450 --> 00:19:43,720
everything else we're writing we're pre

00:19:40,330 --> 00:19:45,820
writing all our secrets for the

00:19:43,720 --> 00:19:47,710
allocations as we need them yeah that's

00:19:45,820 --> 00:19:49,480
interesting yeah yeah so it's a

00:19:47,710 --> 00:19:51,400
different paradigm then hey my app needs

00:19:49,480 --> 00:19:52,990
to write secrets my app needs to use

00:19:51,400 --> 00:19:56,350
secrets and I don't have control over

00:19:52,990 --> 00:19:58,809
where those secrets are or even to

00:19:56,350 --> 00:20:03,340
create backends involved as a club

00:19:58,809 --> 00:20:04,270
battery broker also to make it yeah and

00:20:03,340 --> 00:20:05,650
at the end of the day that's one of

00:20:04,270 --> 00:20:08,500
things I absolutely love about vault it

00:20:05,650 --> 00:20:10,299
is it is not very opinionated about a

00:20:08,500 --> 00:20:12,909
lot of things and it's incredibly

00:20:10,299 --> 00:20:14,860
flexible in what it allows you to do and

00:20:12,909 --> 00:20:17,530
just composes its crypto primitives for

00:20:14,860 --> 00:20:20,350
however you need to use them so you read

00:20:17,530 --> 00:20:23,679
a question yeah how you actually deal

00:20:20,350 --> 00:20:25,510
the chicken egg problem about the

00:20:23,679 --> 00:20:28,330
passwords whenever you deal with that UI

00:20:25,510 --> 00:20:30,760
for example like now we got another UI

00:20:28,330 --> 00:20:32,620
that you need to log into because the

00:20:30,760 --> 00:20:35,410
whole secret sauce right so I will point

00:20:32,620 --> 00:20:37,120
out the CFL UI if the keen observers in

00:20:35,410 --> 00:20:39,190
the audience will notice we did not have

00:20:37,120 --> 00:20:42,220
to specify any authentication glaring

00:20:39,190 --> 00:20:44,020
security hole in the CF vault UI one

00:20:42,220 --> 00:20:47,500
that I hope to remedy by actually having

00:20:44,020 --> 00:20:50,309
credentials in either via authentication

00:20:47,500 --> 00:20:52,870
via UAA and space scoping things or

00:20:50,309 --> 00:20:54,880
allowing the vault operators to set up

00:20:52,870 --> 00:20:57,640
passwords in the vault for the broker to

00:20:54,880 --> 00:20:59,049
use and to pass back to the UI so it's

00:20:57,640 --> 00:21:01,080
an unsolved problem it's definitely a

00:20:59,049 --> 00:21:02,799
problem that we're we're in

00:21:01,080 --> 00:21:05,500
investigating and trying to figure out

00:21:02,799 --> 00:21:07,120
solutions to these are very much cutting

00:21:05,500 --> 00:21:08,679
edge pieces of software I believe they

00:21:07,120 --> 00:21:12,220
were both written within the last four

00:21:08,679 --> 00:21:15,130
months so it's fair to say it's amazing

00:21:12,220 --> 00:21:17,110
but so how you actually whatever you

00:21:15,130 --> 00:21:18,789
solve the problem what you will be doing

00:21:17,110 --> 00:21:20,650
with those passwords how you let the

00:21:18,789 --> 00:21:23,169
user know or like where are you gonna

00:21:20,650 --> 00:21:24,520
store those right now you're back to the

00:21:23,169 --> 00:21:26,470
secret zero probably I can't ever

00:21:24,520 --> 00:21:28,780
actually get rid of secret zero that's

00:21:26,470 --> 00:21:30,280
that's the unfortunate problem that all

00:21:28,780 --> 00:21:32,770
the smoke and mirrors in the world can't

00:21:30,280 --> 00:21:36,520
get around unless mr. serabian has a

00:21:32,770 --> 00:21:38,980
talk I believe when is your talk Friday

00:21:36,520 --> 00:21:40,150
at 2:00 you'll you want to be there I

00:21:38,980 --> 00:21:42,370
believe you're using that are you using

00:21:40,150 --> 00:21:50,740
the cubbyhole backend yeah the cubbyhole

00:21:42,370 --> 00:21:52,690
backend is it secret - one one way

00:21:50,740 --> 00:21:56,860
people have solved that issue is based

00:21:52,690 --> 00:21:59,710
on which IPS have access to that that

00:21:56,860 --> 00:22:02,440
way you need to come from that IP to get

00:21:59,710 --> 00:22:07,690
hold of the initial seed right and only

00:22:02,440 --> 00:22:10,210
those are authorized to get in one door

00:22:07,690 --> 00:22:11,590
right right to your building so one of

00:22:10,210 --> 00:22:13,179
the things we've done at certain Wayne

00:22:11,590 --> 00:22:16,210
was vault is we've integrated it with

00:22:13,179 --> 00:22:18,580
with our concourse platform automation

00:22:16,210 --> 00:22:19,960
tools and one of the ways we've done

00:22:18,580 --> 00:22:22,200
that is via the I believe it's actually

00:22:19,960 --> 00:22:25,330
now deprecated the a Perl app ID

00:22:22,200 --> 00:22:27,010
backends were super cool at the at the

00:22:25,330 --> 00:22:29,559
outset because they allowed you to say

00:22:27,010 --> 00:22:31,570
here's two parts of a username or two

00:22:29,559 --> 00:22:33,429
parts of a password and they'll be known

00:22:31,570 --> 00:22:33,810
by different competing systems or

00:22:33,429 --> 00:22:35,760
different

00:22:33,810 --> 00:22:37,290
isolated systems so that they can't

00:22:35,760 --> 00:22:40,500
easily be put back together until

00:22:37,290 --> 00:22:42,450
deployment time and it's only valid from

00:22:40,500 --> 00:22:45,240
this subnets I'd arranged or this

00:22:42,450 --> 00:22:47,250
specific / 32 so that the Concours

00:22:45,240 --> 00:22:49,860
workers can be told via pipeline and

00:22:47,250 --> 00:22:52,260
some other thing either pulling stuff

00:22:49,860 --> 00:22:54,810
out of a vault or a cred hub or any

00:22:52,260 --> 00:22:56,700
other integration that here's the secret

00:22:54,810 --> 00:22:58,530
key that you and only you can use to go

00:22:56,700 --> 00:23:00,600
out here to do this thing to pull creds

00:22:58,530 --> 00:23:02,940
back and that's one of the like I said

00:23:00,600 --> 00:23:04,710
vault really cool piece of software I

00:23:02,940 --> 00:23:06,810
encourage you all to go play with it

00:23:04,710 --> 00:23:08,940
like I said we do have two boss releases

00:23:06,810 --> 00:23:10,710
out in Cloud Foundry community one for

00:23:08,940 --> 00:23:13,200
experimenting with vault and one for

00:23:10,710 --> 00:23:20,640
running vault in Prague we still have

00:23:13,200 --> 00:23:23,700
five minutes for questions thank you so

00:23:20,640 --> 00:23:29,030
what are you doing now that cred hub is

00:23:23,700 --> 00:23:29,030
being released and used in the community

00:23:29,600 --> 00:23:37,950
using it so are you not using vault in

00:23:34,080 --> 00:23:39,960
those cases or so so what we do and I'll

00:23:37,950 --> 00:23:42,150
probably end up segue into the genesis

00:23:39,960 --> 00:23:45,600
side of one of the things that I work on

00:23:42,150 --> 00:23:47,490
big project I work on we use cred hub

00:23:45,600 --> 00:23:50,460
for things that we can auto generate and

00:23:47,490 --> 00:23:52,290
forget specifically on the platform

00:23:50,460 --> 00:23:54,810
deployment side cuz I work mostly with

00:23:52,290 --> 00:23:56,940
Bosch by the way I do I do some cloud

00:23:54,810 --> 00:23:59,190
foundry stuff but a lot of my day-to-day

00:23:56,940 --> 00:24:01,920
is in Boston deployment of cloud foundry

00:23:59,190 --> 00:24:03,330
on various clouds so a lot of the things

00:24:01,920 --> 00:24:06,900
that are in a typical cloud foundry

00:24:03,330 --> 00:24:10,530
deployment are completely irrelevant to

00:24:06,900 --> 00:24:13,470
day-to-day operations the see a search

00:24:10,530 --> 00:24:15,810
for mutual TLS the Nats TLS

00:24:13,470 --> 00:24:18,000
configuration very little of that

00:24:15,810 --> 00:24:20,430
information is used by operators for

00:24:18,000 --> 00:24:22,650
troubleshooting things I can't remember

00:24:20,430 --> 00:24:25,440
the first time I ever had to get the

00:24:22,650 --> 00:24:27,090
Nats client cert so that I could test a

00:24:25,440 --> 00:24:29,040
Nats connection to make sure that Bosch

00:24:27,090 --> 00:24:30,600
was able to see the agents come in like

00:24:29,040 --> 00:24:33,780
it's not a thing that we have happened

00:24:30,600 --> 00:24:36,450
so we segregate our platform cert or

00:24:33,780 --> 00:24:38,160
secrets into things and operators care

00:24:36,450 --> 00:24:40,770
about which go in a centralized vault

00:24:38,160 --> 00:24:42,630
that's managed out-of-band and things

00:24:40,770 --> 00:24:45,300
that only the boss deployments care

00:24:42,630 --> 00:24:47,240
about and those go incredible has

00:24:45,300 --> 00:24:48,980
excellent facilities for just

00:24:47,240 --> 00:24:50,750
I need a cert and I need a valid for

00:24:48,980 --> 00:24:52,880
this and I need a valid for this many

00:24:50,750 --> 00:24:54,590
years for this name go do the thing and

00:24:52,880 --> 00:24:56,180
then later I'm gonna ask you to rotate

00:24:54,590 --> 00:25:00,410
it and I don't want to have to remember

00:24:56,180 --> 00:25:02,030
any of that state you you do that the

00:25:00,410 --> 00:25:03,200
Concours story of the crab is a bit

00:25:02,030 --> 00:25:05,870
different because I think they're trying

00:25:03,200 --> 00:25:08,180
to solve slightly different problems

00:25:05,870 --> 00:25:10,040
than the Bosch team was but I think

00:25:08,180 --> 00:25:11,690
there's a place for both technologies

00:25:10,040 --> 00:25:14,240
I think they complement each other quite

00:25:11,690 --> 00:25:16,760
nicely yeah some people are even thought

00:25:14,240 --> 00:25:18,860
about putting vault behind credible we

00:25:16,760 --> 00:25:20,840
actually had a bet I think Tom's still

00:25:18,860 --> 00:25:22,610
working on that actually to do a vault

00:25:20,840 --> 00:25:24,580
based config server implementation just

00:25:22,610 --> 00:25:27,050
to see where that goes

00:25:24,580 --> 00:25:32,840
so yeah they're they're complementary

00:25:27,050 --> 00:25:34,630
cool oh one more question all right hey

00:25:32,840 --> 00:25:37,820
what are your thoughts around

00:25:34,630 --> 00:25:41,030
integrating with other existing services

00:25:37,820 --> 00:25:45,470
like directory services LDAP or internal

00:25:41,030 --> 00:25:47,750
services integrating integrating with

00:25:45,470 --> 00:25:51,260
let's say LDAP like you know ad that we

00:25:47,750 --> 00:25:53,030
already have for credentials and other

00:25:51,260 --> 00:26:03,410
management and integrating with Hajek

00:25:53,030 --> 00:26:05,030
ARP so so instead of wold have in a

00:26:03,410 --> 00:26:07,160
world stores credentials right so you

00:26:05,030 --> 00:26:09,410
can creat you know how credentials what

00:26:07,160 --> 00:26:11,600
if we have credentials outside of the

00:26:09,410 --> 00:26:14,360
world for example in LDAP like in Haiti

00:26:11,600 --> 00:26:17,240
Active Directory services we have

00:26:14,360 --> 00:26:21,970
passwords on such can it can it

00:26:17,240 --> 00:26:28,490
integrate so that we can use Walt for

00:26:21,970 --> 00:26:31,870
kind of a broker federated model for I

00:26:28,490 --> 00:26:31,870
haven't put any real thought into it

00:26:31,990 --> 00:26:37,460
that's the best I got it's an

00:26:35,540 --> 00:26:39,890
interesting space but integration with

00:26:37,460 --> 00:26:43,520
credentials is a very sticky situation

00:26:39,890 --> 00:26:45,170
it's very very messy I think if you go

00:26:43,520 --> 00:26:48,350
to the booth they'll give you a fancy

00:26:45,170 --> 00:26:53,140
shirt and your talk and maybe then we'll

00:26:48,350 --> 00:26:56,300
talk build a relationship all right so

00:26:53,140 --> 00:27:00,140
unless there is a urgent question this

00:26:56,300 --> 00:27:04,100
is it for the first part of extensions

00:27:00,140 --> 00:27:06,860
you now can go eat come back to 35 and

00:27:04,100 --> 00:27:08,000
either Jeff or myself will be here for

00:27:06,860 --> 00:27:08,540
the next set of talk thank you for

00:27:08,000 --> 00:27:12,980
coming

00:27:08,540 --> 00:27:12,980

YouTube URL: https://www.youtube.com/watch?v=p16vqxRVxqE


