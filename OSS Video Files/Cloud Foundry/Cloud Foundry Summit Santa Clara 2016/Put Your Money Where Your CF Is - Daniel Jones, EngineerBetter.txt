Title: Put Your Money Where Your CF Is - Daniel Jones, EngineerBetter
Publication date: 2016-05-29
Playlist: Cloud Foundry Summit Santa Clara 2016
Description: 
	Successfully introducing Cloud Foundry into a regulated financial enterprise is no mean feat, and managing four production Cloud Foundry instances in different data centres adds further complexity to be tamed. Daniel Jones relays his experiences operating Cloud Foundry at a global wealth management enterprise, covering both the technical and organisational challenges. How were enterprise developers upskilled in the ways of the cloud native app? What were the tensions between agility and regulatory requirements? What tooling helped administer multiple production CF instances? Can you declaratively configure the running state of a Cloud Foundry? 

Daniel Jones
EngineerBetter Ltd
CTO
London, UK
Daniel Jones is CTO of UK Cloud Foundry consultancy EngineerBetter. He has recently been operating and supporting multiple production CF instances at a global wealth management enterprise, and helping an IoT tech startup build their platform atop CF. Daniel was a member of the Pivotal CF London Services team, and also worked with Europe's leading CF consultancy CloudCredo. Daniel has spoken at CF Summit Berlin 2015 and the London PaaS User Group, as well as numerous video games industry conferences.
Captions: 
	00:00:00,000 --> 00:00:04,529
excellent right thank you very much for

00:00:03,000 --> 00:00:06,569
coming back from lunch nice and promptly

00:00:04,529 --> 00:00:07,170
I do realize I'm tearing you away from

00:00:06,569 --> 00:00:09,960
food

00:00:07,170 --> 00:00:12,480
my name is Daniel Jones and I'm the CTO

00:00:09,960 --> 00:00:16,260
of engineer better a UK cloud foundry

00:00:12,480 --> 00:00:17,880
consultancy in the last few years I've

00:00:16,260 --> 00:00:19,680
been working with cloud foundry for a

00:00:17,880 --> 00:00:21,810
variety of different organizations and

00:00:19,680 --> 00:00:23,760
more recently one of them was a global

00:00:21,810 --> 00:00:25,710
wealth management enterprise now if

00:00:23,760 --> 00:00:27,420
you've worked with for the financial

00:00:25,710 --> 00:00:30,929
services you know they can be a little

00:00:27,420 --> 00:00:32,960
bit antsy about the information that is

00:00:30,929 --> 00:00:35,070
leaked about them especially if that's

00:00:32,960 --> 00:00:37,920
not from one of their own members of

00:00:35,070 --> 00:00:41,460
staff so this talk is grounded in the

00:00:37,920 --> 00:00:42,719
experience of operating cloud foundry at

00:00:41,460 --> 00:00:44,430
Global Wealth Management Enterprise

00:00:42,719 --> 00:00:45,930
unfortunately I can't give you really

00:00:44,430 --> 00:00:49,289
specific details because I'll be

00:00:45,930 --> 00:00:50,700
breaking NDA's and all sorts so we'll

00:00:49,289 --> 00:00:56,520
just have to be a little bit more

00:00:50,700 --> 00:00:58,379
abstract when I'm talking about a global

00:00:56,520 --> 00:00:59,930
wealth management enterprise what does

00:00:58,379 --> 00:01:02,219
that look like okay

00:00:59,930 --> 00:01:03,930
billions of dollars there are billions

00:01:02,219 --> 00:01:05,129
of dollars at stake if you include

00:01:03,930 --> 00:01:07,170
parent companies that we're actually

00:01:05,129 --> 00:01:07,920
talking trillions of dollars but again I

00:01:07,170 --> 00:01:10,560
don't want to give it too much

00:01:07,920 --> 00:01:13,170
information away because the stakes are

00:01:10,560 --> 00:01:14,670
so high security is of paramount concern

00:01:13,170 --> 00:01:16,259
right so there's going to be lots of

00:01:14,670 --> 00:01:18,509
policies in place to make sure that

00:01:16,259 --> 00:01:19,770
people's money is safe because the

00:01:18,509 --> 00:01:21,720
stakes are high there will be multiple

00:01:19,770 --> 00:01:23,100
data centers this is something that

00:01:21,720 --> 00:01:25,020
we're seeing more and more certainly in

00:01:23,100 --> 00:01:27,630
the UK with financial organisations

00:01:25,020 --> 00:01:29,880
adopting Cloud Foundry that they have

00:01:27,630 --> 00:01:31,229
their own physical tin datacenters and

00:01:29,880 --> 00:01:33,329
they want to be operating Cloud Foundry

00:01:31,229 --> 00:01:34,799
in each of them as well as having

00:01:33,329 --> 00:01:36,659
multiple data centers they're going to

00:01:34,799 --> 00:01:39,600
have multiple Cloud Foundry instances in

00:01:36,659 --> 00:01:40,890
each data center so in terms of

00:01:39,600 --> 00:01:43,200
architecture we're talking about

00:01:40,890 --> 00:01:45,149
multiple data centers with a big

00:01:43,200 --> 00:01:46,649
enterprise load balancer at the top I'm

00:01:45,149 --> 00:01:49,140
sure you can guess what kind of brands

00:01:46,649 --> 00:01:51,119
and then Cloud Foundry instances in

00:01:49,140 --> 00:01:53,700
those with local traffic managers

00:01:51,119 --> 00:01:55,829
routing traffic to them got a production

00:01:53,700 --> 00:01:57,899
Cloud Foundry in each datacenter that is

00:01:55,829 --> 00:01:59,969
serving traffic to end-users so

00:01:57,899 --> 00:02:01,590
customers of the business and their non

00:01:59,969 --> 00:02:04,110
production Cloud Foundry instances as

00:02:01,590 --> 00:02:06,240
well which from app as operations teams

00:02:04,110 --> 00:02:07,649
point of view are still production right

00:02:06,240 --> 00:02:08,940
because your app development teams are

00:02:07,649 --> 00:02:11,640
going to be pretty cross with you if

00:02:08,940 --> 00:02:13,220
your Cloud Foundry goes down whilst

00:02:11,640 --> 00:02:17,580
they're trying to develop their apps

00:02:13,220 --> 00:02:19,080
as we go through this talk I've got the

00:02:17,580 --> 00:02:21,990
privilege of being a cloud foundry

00:02:19,080 --> 00:02:23,700
ambassador at the summit I'm gonna share

00:02:21,990 --> 00:02:26,490
with you basically if we were having a

00:02:23,700 --> 00:02:28,500
chat out there and you're a financial

00:02:26,490 --> 00:02:30,270
organization the advice that I would

00:02:28,500 --> 00:02:31,590
give you the lessons that I've learned

00:02:30,270 --> 00:02:34,200
and the things that I think would help

00:02:31,590 --> 00:02:35,490
you before I go any further can you hit

00:02:34,200 --> 00:02:37,200
the squeaking through the microphone

00:02:35,490 --> 00:02:40,410
should I stop wondering about because

00:02:37,200 --> 00:02:42,510
this floor is really squeaky no I kept

00:02:40,410 --> 00:02:46,230
shouting at me heckle throw something if

00:02:42,510 --> 00:02:48,510
it gets too squeaky for your liking so

00:02:46,230 --> 00:02:50,280
we do find you know the kind of

00:02:48,510 --> 00:02:52,500
organization we're talking about with

00:02:50,280 --> 00:02:54,500
briefly touch on the architecture so

00:02:52,500 --> 00:02:57,390
what is the advice that I would give you

00:02:54,500 --> 00:02:59,730
if you're going to integrate Cloud

00:02:57,390 --> 00:03:01,980
Foundry into an organization like this

00:02:59,730 --> 00:03:04,320
or any organization really it's really

00:03:01,980 --> 00:03:06,390
important to define success what is it

00:03:04,320 --> 00:03:08,550
you're trying to achieve by adopting

00:03:06,390 --> 00:03:10,200
paths in this organization are you

00:03:08,550 --> 00:03:11,790
trying to allow people to develop the

00:03:10,200 --> 00:03:13,380
apps they've always been developing and

00:03:11,790 --> 00:03:15,480
get them into production quicker you're

00:03:13,380 --> 00:03:18,180
just trying to reduce time to market

00:03:15,480 --> 00:03:20,010
have you got a load of monoliths on tin

00:03:18,180 --> 00:03:22,110
that you're trying to migrate turn into

00:03:20,010 --> 00:03:24,000
cloud native micro services and deploy

00:03:22,110 --> 00:03:25,110
onto a path or maybe you're doing

00:03:24,000 --> 00:03:26,790
something closer to innovation

00:03:25,110 --> 00:03:28,440
accounting where you're trying to enable

00:03:26,790 --> 00:03:30,329
new types of application that didn't

00:03:28,440 --> 00:03:32,130
exist before new types of things the

00:03:30,329 --> 00:03:34,829
company couldn't do before that are now

00:03:32,130 --> 00:03:36,840
possible all of those things are going

00:03:34,829 --> 00:03:38,700
to require focus in different areas and

00:03:36,840 --> 00:03:40,410
if you're not clear about what it is

00:03:38,700 --> 00:03:42,690
you're trying to achieve then where do

00:03:40,410 --> 00:03:44,519
you focus your operations resources this

00:03:42,690 --> 00:03:46,799
isn't just something for CIOs and CTOs

00:03:44,519 --> 00:03:48,329
who are spending their money on Cloud

00:03:46,799 --> 00:03:50,250
Foundry this is relevant for the

00:03:48,329 --> 00:03:52,860
operations team as well if you're doing

00:03:50,250 --> 00:03:54,900
a migration for a monoliths on tin it's

00:03:52,860 --> 00:03:55,980
a cloud native micro services friction

00:03:54,900 --> 00:03:57,989
is going to be your enemy

00:03:55,980 --> 00:03:59,459
yeah the app teams are not going to want

00:03:57,989 --> 00:04:01,019
to move from their comfortable world

00:03:59,459 --> 00:04:03,840
would have change control requests and

00:04:01,019 --> 00:04:05,970
putting things on pet servers if there's

00:04:03,840 --> 00:04:07,410
friction in the way however if you're

00:04:05,970 --> 00:04:10,049
trying to enable new types of

00:04:07,410 --> 00:04:11,700
application then fund functionality

00:04:10,049 --> 00:04:13,200
features are going to be much more

00:04:11,700 --> 00:04:15,359
important you're going to want to have

00:04:13,200 --> 00:04:17,700
new data services for example maybe

00:04:15,359 --> 00:04:20,010
stick of Cassandra in there that they're

00:04:17,700 --> 00:04:21,780
not used to be clear about what it is

00:04:20,010 --> 00:04:25,290
you're trying to achieve measure it

00:04:21,780 --> 00:04:28,440
continually prove improve against it

00:04:25,290 --> 00:04:30,570
if you're bringing pail foundry into an

00:04:28,440 --> 00:04:32,190
existing organization with some heritage

00:04:30,570 --> 00:04:34,050
and some legacy there's going to be an

00:04:32,190 --> 00:04:36,060
existing context right before you came

00:04:34,050 --> 00:04:37,740
along with your hipster paths they will

00:04:36,060 --> 00:04:39,690
have been getting along just fine with

00:04:37,740 --> 00:04:43,020
bureaucracy and rules that have had in

00:04:39,690 --> 00:04:45,180
place for years those policies were

00:04:43,020 --> 00:04:47,340
created at a time when they didn't have

00:04:45,180 --> 00:04:49,020
a pass right so they're obviously not

00:04:47,340 --> 00:04:50,640
gonna fit anymore however the people

00:04:49,020 --> 00:04:52,740
that you're talking to that app

00:04:50,640 --> 00:04:55,110
development teams for example will still

00:04:52,740 --> 00:04:57,210
think that they apply an example of this

00:04:55,110 --> 00:04:58,620
was a development team that we were

00:04:57,210 --> 00:05:00,810
working with who insisted that they

00:04:58,620 --> 00:05:01,380
could not put they could not use cloud

00:05:00,810 --> 00:05:03,150
foundry

00:05:01,380 --> 00:05:04,800
they could not use the PA's offering in

00:05:03,150 --> 00:05:06,750
this organization because their

00:05:04,800 --> 00:05:08,700
developers weren't allowed to push stuff

00:05:06,750 --> 00:05:09,900
into production right so the whole

00:05:08,700 --> 00:05:12,120
self-service thing went out the window

00:05:09,900 --> 00:05:13,380
for DevOps people that's crazy

00:05:12,120 --> 00:05:15,330
right because we want to go from

00:05:13,380 --> 00:05:18,240
ideation to production and looking after

00:05:15,330 --> 00:05:19,890
the whole thing all in the same team but

00:05:18,240 --> 00:05:21,870
if you don't have all of the assumptions

00:05:19,890 --> 00:05:23,640
that go with DevOps and continuous

00:05:21,870 --> 00:05:25,230
delivery and CI and all those sorts of

00:05:23,640 --> 00:05:26,910
things then actually you can understand

00:05:25,230 --> 00:05:28,830
why this might be a bit scary the idea

00:05:26,910 --> 00:05:30,930
of having some cowboy code are sneaking

00:05:28,830 --> 00:05:32,580
a backdoor into a financial system

00:05:30,930 --> 00:05:35,700
sticking it straight onto a production

00:05:32,580 --> 00:05:36,960
server so we were talking for SAP

00:05:35,700 --> 00:05:39,270
development team trying to get them to

00:05:36,960 --> 00:05:40,470
on board onto the pears insisted that

00:05:39,270 --> 00:05:43,020
note we can't do that there's this

00:05:40,470 --> 00:05:45,830
policy over here it's been etched into a

00:05:43,020 --> 00:05:47,700
stone tablet we can't possibly change it

00:05:45,830 --> 00:05:49,710
we went to the security in the

00:05:47,700 --> 00:05:52,680
compliance folks we asked them about the

00:05:49,710 --> 00:05:54,090
regulations that informs that policy why

00:05:52,680 --> 00:05:56,130
do we have this policy in the first

00:05:54,090 --> 00:05:57,750
place how can we change it how can we

00:05:56,130 --> 00:06:00,270
work around it how can we have a new

00:05:57,750 --> 00:06:01,740
policy what if we insist that all of

00:06:00,270 --> 00:06:04,650
their code is under source control

00:06:01,740 --> 00:06:06,600
everything is delivered via CI what if

00:06:04,650 --> 00:06:08,760
we have static analysis as part of that

00:06:06,600 --> 00:06:11,430
what if we lock down all of their

00:06:08,760 --> 00:06:13,500
production spaces so that humans can't

00:06:11,430 --> 00:06:15,330
log into them but only automated systems

00:06:13,500 --> 00:06:17,670
can what happens if we use a tool like

00:06:15,330 --> 00:06:19,140
IBM's Erb and deploy I don't if you've

00:06:17,670 --> 00:06:21,900
used the ERV and deploy it's got a big

00:06:19,140 --> 00:06:24,960
horrible enterprise-e GUI but it serves

00:06:21,900 --> 00:06:26,580
some really useful really useful

00:06:24,960 --> 00:06:28,950
purposes in the context of Cloud Foundry

00:06:26,580 --> 00:06:31,050
now it's got really granular use

00:06:28,950 --> 00:06:33,120
permissions much more so than Cloud

00:06:31,050 --> 00:06:34,620
Foundry itself everything's audited

00:06:33,120 --> 00:06:37,140
including all the binaries that it

00:06:34,620 --> 00:06:38,590
pushes so not a temporary cache like you

00:06:37,140 --> 00:06:40,660
find inside Cloud Foundry

00:06:38,590 --> 00:06:42,550
actually archiving every binary push to

00:06:40,660 --> 00:06:44,440
every environment and more importantly

00:06:42,550 --> 00:06:46,420
than all of those it served as one place

00:06:44,440 --> 00:06:48,370
that we could do secret injection so the

00:06:46,420 --> 00:06:50,860
Paz operations team wrote some tooling

00:06:48,370 --> 00:06:52,840
to interplay properties that urban

00:06:50,860 --> 00:06:54,700
deploy the tool knew about into

00:06:52,840 --> 00:06:57,970
manifests which it would then push into

00:06:54,700 --> 00:06:59,860
the production spaces we took that to

00:06:57,970 --> 00:07:01,180
the security and compliance folks they

00:06:59,860 --> 00:07:03,040
matched it against the regulations

00:07:01,180 --> 00:07:04,630
they're like yeah this makes sense we

00:07:03,040 --> 00:07:06,580
can do that we went back to the

00:07:04,630 --> 00:07:08,740
development team said yes yes you can

00:07:06,580 --> 00:07:10,480
use Cloud Foundry that policy now

00:07:08,740 --> 00:07:14,200
doesn't apply to you you're going to

00:07:10,480 --> 00:07:16,960
find these policies resist when people

00:07:14,200 --> 00:07:19,810
try and insist that they still apply

00:07:16,960 --> 00:07:21,130
even though they don't reinterpret the

00:07:19,810 --> 00:07:24,910
regulations come up with new policies

00:07:21,130 --> 00:07:27,010
appropriate for the time the comment of

00:07:24,910 --> 00:07:28,900
policies that you will encounter are

00:07:27,010 --> 00:07:33,040
likely to involve some amount of manual

00:07:28,900 --> 00:07:34,680
approval right wider enterprises like

00:07:33,040 --> 00:07:36,850
manual approval well for lots of reasons

00:07:34,680 --> 00:07:38,200
one of them being that they'd like to

00:07:36,850 --> 00:07:39,820
have someone to blame they'd like

00:07:38,200 --> 00:07:42,820
someone to be responsible for making a

00:07:39,820 --> 00:07:44,230
decision also you will find that in

00:07:42,820 --> 00:07:46,360
large enterprises the IT organization

00:07:44,230 --> 00:07:47,800
and the app development organization

00:07:46,360 --> 00:07:50,140
could be completely separate legal

00:07:47,800 --> 00:07:52,570
entities right and it's the IT

00:07:50,140 --> 00:07:53,740
organizations responsibility to get keep

00:07:52,570 --> 00:07:55,720
to make sure that things are done

00:07:53,740 --> 00:07:57,490
sensibly that all the rules are applied

00:07:55,720 --> 00:07:59,530
and things like firewall rules are

00:07:57,490 --> 00:08:03,790
correct and match up to what they should

00:07:59,530 --> 00:08:05,620
do having those manual processes in the

00:08:03,790 --> 00:08:06,880
critical path of what your app teams are

00:08:05,620 --> 00:08:11,350
trying to do is going to prevent your

00:08:06,880 --> 00:08:13,780
paths from being self-service if your

00:08:11,350 --> 00:08:17,440
path is not self-service then it is

00:08:13,780 --> 00:08:19,300
platform-as-a-service okay there should

00:08:17,440 --> 00:08:21,310
be two S's empowers make sure that

00:08:19,300 --> 00:08:24,700
you've got the right s and not the wrong

00:08:21,310 --> 00:08:26,950
one so an example of this was in an

00:08:24,700 --> 00:08:28,690
organization where they had this idea

00:08:26,950 --> 00:08:30,400
that they wanted a declaration of

00:08:28,690 --> 00:08:32,740
everything that should be configured for

00:08:30,400 --> 00:08:33,880
an app team to use Cloud Foundry and

00:08:32,740 --> 00:08:36,010
this was actually quite a good idea

00:08:33,880 --> 00:08:38,110
right so all of the spaces they wanted

00:08:36,010 --> 00:08:40,990
all of the users all of the roles for

00:08:38,110 --> 00:08:42,760
those users user provided services that

00:08:40,990 --> 00:08:45,700
IP addresses and ports of things they

00:08:42,760 --> 00:08:47,500
were connecting to all in one place that

00:08:45,700 --> 00:08:49,630
one place did happen to be an Excel

00:08:47,500 --> 00:08:50,680
spreadsheet which wasn't ideal but it

00:08:49,630 --> 00:08:51,910
was raised through a change control

00:08:50,680 --> 00:08:53,860
ticket and since

00:08:51,910 --> 00:08:57,790
operations team who you know tap away on

00:08:53,860 --> 00:08:59,650
the CFC Li and make it all happen that

00:08:57,790 --> 00:09:00,340
meant that there was a stop in the

00:08:59,650 --> 00:09:02,290
process

00:09:00,340 --> 00:09:04,270
it couldn't be self-service people had

00:09:02,290 --> 00:09:06,970
to raise a change control requests wait

00:09:04,270 --> 00:09:08,470
for it to be implemented that introduced

00:09:06,970 --> 00:09:10,240
friction so when you're trying to

00:09:08,470 --> 00:09:11,560
convince people to start using your pass

00:09:10,240 --> 00:09:13,180
because it's a sensible thing to do

00:09:11,560 --> 00:09:15,190
you're taking them out of their comfort

00:09:13,180 --> 00:09:18,730
zone but you're not really making their

00:09:15,190 --> 00:09:21,640
life that much easier resist any

00:09:18,730 --> 00:09:23,710
temptation to have manual processes in

00:09:21,640 --> 00:09:28,540
the critical path of getting apps onto

00:09:23,710 --> 00:09:31,480
your PA's as well as manual processes

00:09:28,540 --> 00:09:33,760
for the critical path of users of your

00:09:31,480 --> 00:09:35,950
path so manual processes in the workflow

00:09:33,760 --> 00:09:37,990
of your customers it's really important

00:09:35,950 --> 00:09:39,790
to not have manual processes in the

00:09:37,990 --> 00:09:42,910
critical workflow of the pad Operations

00:09:39,790 --> 00:09:44,470
team itself okay I mean the keynote

00:09:42,910 --> 00:09:46,600
yesterday was talking about automation

00:09:44,470 --> 00:09:48,760
taking over the world really important

00:09:46,600 --> 00:09:51,010
right if you have loads of slow manual

00:09:48,760 --> 00:09:52,270
processes sooner or later someone is

00:09:51,010 --> 00:09:53,560
going to come along and disrupt your

00:09:52,270 --> 00:09:55,150
company and do everything much more

00:09:53,560 --> 00:09:56,860
efficiently more productively than you

00:09:55,150 --> 00:09:58,240
that's probably why you were using Cloud

00:09:56,860 --> 00:10:00,550
Foundry in the first place right to

00:09:58,240 --> 00:10:02,080
protect yourself against that the

00:10:00,550 --> 00:10:04,960
problem with manual processes is that

00:10:02,080 --> 00:10:06,640
they take time and by the time that you

00:10:04,960 --> 00:10:09,190
realize that they're becoming painful

00:10:06,640 --> 00:10:11,260
you won't have the time to automate your

00:10:09,190 --> 00:10:13,960
manual processes because you're spending

00:10:11,260 --> 00:10:15,790
all of your time on manual processes you

00:10:13,960 --> 00:10:17,560
get stuck in a trap you can't get back

00:10:15,790 --> 00:10:19,960
out of it again the book in the

00:10:17,560 --> 00:10:22,000
background there scarcity describes how

00:10:19,960 --> 00:10:23,320
people get stuck in traps when they

00:10:22,000 --> 00:10:25,030
don't have enough of something there are

00:10:23,320 --> 00:10:26,620
psychological effects that have been

00:10:25,030 --> 00:10:27,910
proven and demonstrated when you don't

00:10:26,620 --> 00:10:29,170
have enough of a resource and when

00:10:27,910 --> 00:10:31,780
you're aware that you don't have enough

00:10:29,170 --> 00:10:33,700
of a resource be it money be it time you

00:10:31,780 --> 00:10:35,950
can only focus on the task right in

00:10:33,700 --> 00:10:37,570
front of you your ability to plan into

00:10:35,950 --> 00:10:40,090
the future your executive control is

00:10:37,570 --> 00:10:42,070
inhibited you are less able to do

00:10:40,090 --> 00:10:44,410
abstract problem-solving and dig your

00:10:42,070 --> 00:10:46,690
way out of that hole don't get yourself

00:10:44,410 --> 00:10:49,270
into this trap in the first place you

00:10:46,690 --> 00:10:51,430
might be tempted spend the extra time up

00:10:49,270 --> 00:10:53,080
from automating things everybody that I

00:10:51,430 --> 00:10:54,250
talk to when I was going back and

00:10:53,080 --> 00:10:55,210
creating this presentation and the

00:10:54,250 --> 00:10:57,100
different teams that I've worked with

00:10:55,210 --> 00:10:58,960
over the years really wanted me to make

00:10:57,100 --> 00:11:02,380
this point to you don't get yourselves

00:10:58,960 --> 00:11:03,730
into that trap so why isn't there more

00:11:02,380 --> 00:11:06,490
automation enterprise

00:11:03,730 --> 00:11:08,380
right why is it not the the default

00:11:06,490 --> 00:11:10,240
state of things that everything

00:11:08,380 --> 00:11:11,980
automated already well one reason is

00:11:10,240 --> 00:11:14,079
that bureaucracy is yesterday's

00:11:11,980 --> 00:11:15,610
automation ramp and I'm sure that in 50

00:11:14,079 --> 00:11:16,990
years time people will be looking at all

00:11:15,610 --> 00:11:18,970
the automation that we've put in and

00:11:16,990 --> 00:11:21,910
complaining about it just as much as we

00:11:18,970 --> 00:11:24,790
do as rules and policies right that was

00:11:21,910 --> 00:11:29,170
the better alternative than chaos and

00:11:24,790 --> 00:11:30,730
anarchy another reason is that when

00:11:29,170 --> 00:11:33,430
people that practice continuous delivery

00:11:30,730 --> 00:11:36,100
talk about automation we're actually

00:11:33,430 --> 00:11:38,350
talking about autonomy ssin in the

00:11:36,100 --> 00:11:39,730
Toyota Production system which inspired

00:11:38,350 --> 00:11:42,120
lean in the Kanban development

00:11:39,730 --> 00:11:44,829
methodology to each Yano talked about

00:11:42,120 --> 00:11:47,769
autonomy chien being automation with the

00:11:44,829 --> 00:11:49,930
human touch and that human touch was

00:11:47,769 --> 00:11:52,089
common sense it was error checking right

00:11:49,930 --> 00:11:54,130
it was making sure that a machine

00:11:52,089 --> 00:11:56,500
wouldn't rampantly do the wrong thing

00:11:54,130 --> 00:11:58,360
that if pieces came out the wrong shape

00:11:56,500 --> 00:12:00,820
or size or whatever that the system

00:11:58,360 --> 00:12:02,230
would shut down of course as DevOps

00:12:00,820 --> 00:12:04,149
folks we're not going to deploy

00:12:02,230 --> 00:12:05,500
something without smoke testing it we're

00:12:04,149 --> 00:12:08,199
not going to deploy something about blue

00:12:05,500 --> 00:12:10,149
greening it when you're dealing with

00:12:08,199 --> 00:12:11,860
trying to bring automation into an

00:12:10,149 --> 00:12:13,990
enterprise sooner or later you're hit

00:12:11,860 --> 00:12:14,529
upon that person who tells you the war

00:12:13,990 --> 00:12:16,690
story

00:12:14,529 --> 00:12:18,550
ivar well we automated this thing a few

00:12:16,690 --> 00:12:20,139
years ago and it rampantly went out of

00:12:18,550 --> 00:12:21,970
control and it was a disaster and it's

00:12:20,139 --> 00:12:25,300
span up VMS everywhere and we're never

00:12:21,970 --> 00:12:27,040
doing that again they don't realize that

00:12:25,300 --> 00:12:28,569
we're thinking about autonomy ssin and

00:12:27,040 --> 00:12:30,760
we probably don't realize that either

00:12:28,569 --> 00:12:32,709
when you come up against hostility for

00:12:30,760 --> 00:12:35,079
automation demonstrate your autonomy

00:12:32,709 --> 00:12:37,600
ssin show them the smoke test show them

00:12:35,079 --> 00:12:39,399
safety checks that mean that it's not

00:12:37,600 --> 00:12:43,389
going to rampantly go out of control and

00:12:39,399 --> 00:12:46,240
do bad things the other thing about

00:12:43,389 --> 00:12:47,589
manual processes is that they're soft

00:12:46,240 --> 00:12:50,260
right they're squishy

00:12:47,589 --> 00:12:53,290
the fuzzy around the edges they don't

00:12:50,260 --> 00:12:55,029
have hard edges like an API if I send a

00:12:53,290 --> 00:12:57,579
request to the cloud controller and I

00:12:55,029 --> 00:12:59,380
get it wrong I'm going to get told very

00:12:57,579 --> 00:13:01,750
quickly that I did the wrong thing right

00:12:59,380 --> 00:13:04,269
I get an error message I get some pain

00:13:01,750 --> 00:13:06,160
delivered to me I get told though I have

00:13:04,269 --> 00:13:09,760
to go back to go and I'm not going to

00:13:06,160 --> 00:13:11,470
collect 200 bucks that pain is

00:13:09,760 --> 00:13:15,250
information that informs me that I need

00:13:11,470 --> 00:13:16,720
to do things differently the information

00:13:15,250 --> 00:13:17,560
I'm receiving in this picture by the way

00:13:16,720 --> 00:13:18,970
was that I should do

00:13:17,560 --> 00:13:22,930
what the men on top of me were telling

00:13:18,970 --> 00:13:26,590
me to you want to be like an API and

00:13:22,930 --> 00:13:28,330
pass on that pain to your users anecdote

00:13:26,590 --> 00:13:30,010
about this remember that spreadsheet I

00:13:28,330 --> 00:13:31,570
was telling you about with all the user

00:13:30,010 --> 00:13:33,580
provided services and the IP addresses

00:13:31,570 --> 00:13:37,900
and the ports and things like that one

00:13:33,580 --> 00:13:39,400
team had 4646 user provided services for

00:13:37,900 --> 00:13:40,779
one app yeah because it's a large

00:13:39,400 --> 00:13:43,810
enterprise they've got lots of heritage

00:13:40,779 --> 00:13:45,040
of PA's databases forty-six used

00:13:43,810 --> 00:13:47,380
provided services with lots of different

00:13:45,040 --> 00:13:49,810
IPS and ports for each one of them day

00:13:47,380 --> 00:13:51,550
before a production release they realize

00:13:49,810 --> 00:13:54,160
they've got connectivity problems okay

00:13:51,550 --> 00:13:55,839
and they want us to debug into it so we

00:13:54,160 --> 00:13:57,130
say send us your spreadsheet so we can

00:13:55,839 --> 00:14:00,010
look at the canonical list of all the

00:13:57,130 --> 00:14:00,760
things he wants connected I'm afraid we

00:14:00,010 --> 00:14:03,279
can't do that

00:14:00,760 --> 00:14:05,110
what had been happening well they'd been

00:14:03,279 --> 00:14:06,760
sending change control requests in

00:14:05,110 --> 00:14:08,470
without the appropriate information and

00:14:06,760 --> 00:14:10,270
then phoning their friends in the path

00:14:08,470 --> 00:14:11,950
operations team who was trying to do the

00:14:10,270 --> 00:14:14,140
right thing yeah he was trying to help

00:14:11,950 --> 00:14:15,339
out fellow workers he knew that they

00:14:14,140 --> 00:14:17,350
were under pressure he knew they were

00:14:15,339 --> 00:14:19,810
under deadlines so when the request

00:14:17,350 --> 00:14:21,430
comes in of oh I know we haven't put the

00:14:19,810 --> 00:14:23,080
spreadsheet on but can you just have

00:14:21,430 --> 00:14:24,430
this rule I know we haven't put the

00:14:23,080 --> 00:14:26,350
spreadsheet on can you just take that

00:14:24,430 --> 00:14:28,360
rule out can you just change this port

00:14:26,350 --> 00:14:30,280
to that before long in a diverge

00:14:28,360 --> 00:14:32,320
completely their solution that they

00:14:30,280 --> 00:14:35,200
wanted us to enact was to go through

00:14:32,320 --> 00:14:36,970
every cloud foundry on every day sensor

00:14:35,200 --> 00:14:39,010
down the list of all the user provided

00:14:36,970 --> 00:14:41,260
services all the security groups and all

00:14:39,010 --> 00:14:43,740
the firewall rules from the SDM and try

00:14:41,260 --> 00:14:47,200
and create that list of them or answer

00:14:43,740 --> 00:14:48,550
no we're not going to do that you're

00:14:47,200 --> 00:14:50,500
going to miss your production deadline

00:14:48,550 --> 00:14:53,200
because you've not done the right thing

00:14:50,500 --> 00:14:57,100
now that sounds really harsh right it is

00:14:53,200 --> 00:15:00,459
harsh but it's fair if you absorb that

00:14:57,100 --> 00:15:02,290
slack then information gets lost the

00:15:00,459 --> 00:15:05,290
whole machine continues to be

00:15:02,290 --> 00:15:07,330
inefficient if I was an API if the PA's

00:15:05,290 --> 00:15:08,890
operations team was an API they would

00:15:07,330 --> 00:15:10,720
not be able to get away with that if

00:15:08,890 --> 00:15:13,600
you're going to move your users towards

00:15:10,720 --> 00:15:15,100
automation you need to train them that

00:15:13,600 --> 00:15:16,720
they can't get away with those sorts of

00:15:15,100 --> 00:15:17,709
things you need to re-educate them and

00:15:16,720 --> 00:15:19,720
their behavior

00:15:17,709 --> 00:15:21,700
you can't phone Amazon Web Services and

00:15:19,720 --> 00:15:23,920
say all over that request I sent you can

00:15:21,700 --> 00:15:25,029
you just you know that's what I meant I

00:15:23,920 --> 00:15:27,940
know I didn't type that that's not I

00:15:25,029 --> 00:15:30,660
meant train them to use automated

00:15:27,940 --> 00:15:35,730
systems pass on pain be like

00:15:30,660 --> 00:15:38,310
API we can't be all stick and no carrot

00:15:35,730 --> 00:15:39,690
right that would that would be bad if we

00:15:38,310 --> 00:15:41,519
carried on like that with every single

00:15:39,690 --> 00:15:43,440
request then nobody is going to use our

00:15:41,519 --> 00:15:45,329
platform we want to help people be

00:15:43,440 --> 00:15:47,550
successful we're passing on that pain

00:15:45,329 --> 00:15:50,069
and educating them for the sake of

00:15:47,550 --> 00:15:52,430
making them more successful so we need

00:15:50,069 --> 00:15:55,829
to understand their context more right

00:15:52,430 --> 00:15:58,800
this when I read this I nearly fell off

00:15:55,829 --> 00:16:01,620
my chair and then I wanted to print it

00:15:58,800 --> 00:16:03,360
out frame it and stick it up on the wall

00:16:01,620 --> 00:16:06,509
in my office unfortunately if I did I'll

00:16:03,360 --> 00:16:09,149
be breaking my NDA so this came about

00:16:06,509 --> 00:16:11,310
where the pass operations team wrote a

00:16:09,149 --> 00:16:12,769
bit of tooling which if you're running

00:16:11,310 --> 00:16:15,870
Cloud Foundry and especially a

00:16:12,769 --> 00:16:17,939
commercial distribution of it is a quite

00:16:15,870 --> 00:16:20,399
a good idea it swept through all of the

00:16:17,939 --> 00:16:22,110
non production spaces and turned off

00:16:20,399 --> 00:16:24,569
apps at the end of that units working

00:16:22,110 --> 00:16:26,519
day if you're an enterprise chances are

00:16:24,569 --> 00:16:28,560
you're running Java if you're using Java

00:16:26,519 --> 00:16:31,490
you cannot say hello world in anything

00:16:28,560 --> 00:16:34,560
less than half a gigabyte of ram you

00:16:31,490 --> 00:16:37,019
straight spring boo wonderful as it is

00:16:34,560 --> 00:16:38,880
you know you can't get done much done

00:16:37,019 --> 00:16:40,680
without much RAM you will also have a

00:16:38,880 --> 00:16:42,540
load of apps called manifest yeah more

00:16:40,680 --> 00:16:44,399
that you probably don't need to be

00:16:42,540 --> 00:16:45,449
running that will be using all the RAM

00:16:44,399 --> 00:16:46,980
on your Cloud Foundry

00:16:45,449 --> 00:16:50,459
so they swept through and turned them

00:16:46,980 --> 00:16:53,250
off product owner emailed his engineers

00:16:50,459 --> 00:16:54,930
saying look I realized that restarting

00:16:53,250 --> 00:16:57,810
our apps is scary but it's part of the

00:16:54,930 --> 00:16:59,880
brave new world of cloud native I had

00:16:57,810 --> 00:17:02,759
never thought that restarting apps could

00:16:59,880 --> 00:17:04,289
be scary it just totally blew my mind I

00:17:02,759 --> 00:17:06,480
didn't even think that this would be a

00:17:04,289 --> 00:17:09,600
concern of this so why was it a concern

00:17:06,480 --> 00:17:12,120
of this enterprise IT is awesome at what

00:17:09,600 --> 00:17:14,669
it does but it has a slow rate of change

00:17:12,120 --> 00:17:17,010
so they develop an app at the end of a

00:17:14,669 --> 00:17:19,530
long Gantt chart put it on a pet tin

00:17:17,010 --> 00:17:21,959
server that never changes doesn't move

00:17:19,530 --> 00:17:25,380
and it stays there for two years without

00:17:21,959 --> 00:17:27,150
being restarted it just runs now all

00:17:25,380 --> 00:17:30,480
we're tillens restart them all the time

00:17:27,150 --> 00:17:32,100
so they're not used to it that made me

00:17:30,480 --> 00:17:34,049
realize how much of a gap there can be

00:17:32,100 --> 00:17:36,210
between those worse if you're involved

00:17:34,049 --> 00:17:37,710
in PA's operations hopefully you get

00:17:36,210 --> 00:17:39,840
things like DevOps and continuous

00:17:37,710 --> 00:17:42,090
delivery but the your customers probably

00:17:39,840 --> 00:17:43,860
don't and we need to bridge that gulf we

00:17:42,090 --> 00:17:46,740
need to make sure that we understand the

00:17:43,860 --> 00:17:48,360
context of where they're coming from if

00:17:46,740 --> 00:17:50,280
Cloud Foundry is a new thing to your

00:17:48,360 --> 00:17:53,070
users then it's going to get blamed for

00:17:50,280 --> 00:17:54,510
things right if there's a problem it's

00:17:53,070 --> 00:17:55,260
going to be the new thing it's not my

00:17:54,510 --> 00:17:57,350
code

00:17:55,260 --> 00:18:00,150
it's that new thing you're making me use

00:17:57,350 --> 00:18:02,400
I've run out the lost count of times

00:18:00,150 --> 00:18:04,950
that I receive phone calls or email

00:18:02,400 --> 00:18:07,140
something along the lines of well my

00:18:04,950 --> 00:18:09,720
application works perfectly fine on my

00:18:07,140 --> 00:18:12,090
machine but when I push it to your Cloud

00:18:09,720 --> 00:18:15,270
Foundry it doesn't work so I think

00:18:12,090 --> 00:18:16,740
you've got a problem with your pass at

00:18:15,270 --> 00:18:19,530
which point right you've got two choices

00:18:16,740 --> 00:18:21,540
you can do the enterprise thing you can

00:18:19,530 --> 00:18:23,100
throw away hundreds of thousands of

00:18:21,540 --> 00:18:25,110
years of human evolution where we

00:18:23,100 --> 00:18:27,030
evolved to be social beings that work

00:18:25,110 --> 00:18:28,559
well together and have emotional

00:18:27,030 --> 00:18:29,340
responses to each other's faces and

00:18:28,559 --> 00:18:32,030
things like that

00:18:29,340 --> 00:18:34,530
and send a passive-aggressive email

00:18:32,030 --> 00:18:36,210
looks at the other apps and I've looked

00:18:34,530 --> 00:18:38,070
at the monitoring it all looks fine to

00:18:36,210 --> 00:18:42,240
me must be your problem mate go back and

00:18:38,070 --> 00:18:44,730
fix it or you can do something else you

00:18:42,240 --> 00:18:47,280
can find out where they sit and if they

00:18:44,730 --> 00:18:51,860
are in the same building as you you can

00:18:47,280 --> 00:18:54,720
sneak up on them without them seeing you

00:18:51,860 --> 00:18:56,010
sit yourself down right ie you've got a

00:18:54,720 --> 00:18:57,510
problem with your app on Cloud Foundry

00:18:56,010 --> 00:18:59,700
let's work through it together

00:18:57,510 --> 00:19:03,870
Oh plug in a keyboard and we'll work

00:18:59,700 --> 00:19:06,059
through this one together you can turn

00:19:03,870 --> 00:19:08,790
people around from people that host are

00:19:06,059 --> 00:19:10,710
scared of your platform into advocates

00:19:08,790 --> 00:19:12,809
through pairing with them you can

00:19:10,710 --> 00:19:14,820
educate them show them all the tips and

00:19:12,809 --> 00:19:16,710
tricks of how you debug things explain

00:19:14,820 --> 00:19:19,530
how the internals of the past work if

00:19:16,710 --> 00:19:20,760
you just send people passive-aggressive

00:19:19,530 --> 00:19:22,980
emails they're not going to get all of

00:19:20,760 --> 00:19:25,679
those benefits whilst I'm talking about

00:19:22,980 --> 00:19:27,780
pairing if in your past operation seems

00:19:25,679 --> 00:19:29,640
you're not pairing you should be doing

00:19:27,780 --> 00:19:32,520
it now pairing is not just for

00:19:29,640 --> 00:19:34,470
programming okay when you are debunking

00:19:32,520 --> 00:19:36,960
live production issues you want another

00:19:34,470 --> 00:19:38,520
set of eyes on what's going on in case

00:19:36,960 --> 00:19:40,980
you do something really stupid like say

00:19:38,520 --> 00:19:43,860
delete all the admin users you want

00:19:40,980 --> 00:19:46,380
another brain to help contribute towards

00:19:43,860 --> 00:19:47,970
that problem what's more important than

00:19:46,380 --> 00:19:51,090
all of that though is the learning and

00:19:47,970 --> 00:19:53,520
the exposure of knowledge when you send

00:19:51,090 --> 00:19:54,690
an email out that says that oh well

00:19:53,520 --> 00:19:56,100
there was this problem and these were

00:19:54,690 --> 00:19:57,210
the symptoms and I did this to fix it

00:19:56,100 --> 00:19:58,620
fast

00:19:57,210 --> 00:20:00,179
priority of semantic knowledge right

00:19:58,620 --> 00:20:01,320
that's like remembering facts for a

00:20:00,179 --> 00:20:03,330
multiple-choice quiz

00:20:01,320 --> 00:20:04,799
don't know about you most people don't

00:20:03,330 --> 00:20:06,720
remember that kind of information very

00:20:04,799 --> 00:20:08,880
well when you're on a journey with

00:20:06,720 --> 00:20:11,640
someone debugging problem solving

00:20:08,880 --> 00:20:13,380
constantly then it's you're using your

00:20:11,640 --> 00:20:15,120
episodic memory you remember journeys

00:20:13,380 --> 00:20:17,039
you remember experiences much better

00:20:15,120 --> 00:20:19,860
than you remember discrete pinpoint

00:20:17,039 --> 00:20:22,710
facts pair with people in order to

00:20:19,860 --> 00:20:27,360
expose that learning make them remember

00:20:22,710 --> 00:20:29,490
things so even if you start bridging

00:20:27,360 --> 00:20:30,899
that Gulf and establishing a lot of

00:20:29,490 --> 00:20:32,279
context with people you will get people

00:20:30,899 --> 00:20:34,049
that break the rules and when I talk

00:20:32,279 --> 00:20:35,640
about breaking rules I really do mean

00:20:34,049 --> 00:20:37,590
rules because there's likely a service

00:20:35,640 --> 00:20:41,130
contract between the operations team and

00:20:37,590 --> 00:20:43,260
their app development teams one

00:20:41,130 --> 00:20:45,419
organization I was in the service

00:20:43,260 --> 00:20:47,250
contract was Val shalt write 12 factor

00:20:45,419 --> 00:20:49,919
apps thou shalt not put monoliths on

00:20:47,250 --> 00:20:51,750
Cloud Foundry no no no unfortunately one

00:20:49,919 --> 00:20:54,120
team insisted on writing their session

00:20:51,750 --> 00:20:55,830
state locally so whenever use logged in

00:20:54,120 --> 00:20:57,750
got written into this Cloud Foundry here

00:20:55,830 --> 00:21:00,059
these didn't know about it if we need to

00:20:57,750 --> 00:21:01,799
upgrade this Cloud Foundry then the

00:21:00,059 --> 00:21:04,470
users will be moved over here and logged

00:21:01,799 --> 00:21:06,210
out and lose work in progress what could

00:21:04,470 --> 00:21:08,130
we do about that not a lot we wrap as

00:21:06,210 --> 00:21:09,960
operations team we don't have the levers

00:21:08,130 --> 00:21:12,149
to be able to go and chastise people

00:21:09,960 --> 00:21:13,590
hell we even got them to sign up to a

00:21:12,149 --> 00:21:16,559
contract that said they wouldn't do it

00:21:13,590 --> 00:21:18,480
use the simian army approach we wrote

00:21:16,559 --> 00:21:21,360
some tooling for a that was run on a CI

00:21:18,480 --> 00:21:23,250
server that would talk to the global

00:21:21,360 --> 00:21:26,279
load balancer using its REST API and

00:21:23,250 --> 00:21:27,960
switch off traffic to production cloud

00:21:26,279 --> 00:21:30,210
foundries during production hours

00:21:27,960 --> 00:21:31,860
randomly we told them that we were going

00:21:30,210 --> 00:21:34,350
to do this we gave them lots of notice

00:21:31,860 --> 00:21:36,270
we were very kind to them but they knew

00:21:34,350 --> 00:21:37,799
now that it was going to happen it

00:21:36,270 --> 00:21:39,690
wasn't a remote possibility in their

00:21:37,799 --> 00:21:41,010
heads it was a forcing function we made

00:21:39,690 --> 00:21:43,320
them change their behavior for the

00:21:41,010 --> 00:21:44,789
better to make more resilient systems if

00:21:43,320 --> 00:21:46,679
you've got people that are new to

00:21:44,789 --> 00:21:48,990
writing cloud native apps and struggling

00:21:46,679 --> 00:21:51,000
with the idea of developing designing

00:21:48,990 --> 00:21:53,250
for failure how to check out a project

00:21:51,000 --> 00:21:55,320
called chaos Galago it's a service

00:21:53,250 --> 00:21:56,640
broker that will restart apps at a

00:21:55,320 --> 00:21:58,740
random interval you give it a

00:21:56,640 --> 00:22:00,659
probability and a duration and it will

00:21:58,740 --> 00:22:03,860
randomly restart apps that might help

00:22:00,659 --> 00:22:07,529
people on that journey so that keeps the

00:22:03,860 --> 00:22:09,600
app developers honest what about as

00:22:07,529 --> 00:22:10,559
operations team if you don't take

00:22:09,600 --> 00:22:12,539
anything else

00:22:10,559 --> 00:22:15,090
away from this talk I want it to be this

00:22:12,539 --> 00:22:18,090
okay continuously acceptance test your

00:22:15,090 --> 00:22:20,009
platform every minute of every day what

00:22:18,090 --> 00:22:21,690
do I mean by acceptance tests in your

00:22:20,009 --> 00:22:25,409
favorite bdd framework whether it's

00:22:21,690 --> 00:22:27,360
r-spec Omega lambda behave in Java tests

00:22:25,409 --> 00:22:29,690
that exercise the functionality of your

00:22:27,360 --> 00:22:31,769
platform from the users point of view

00:22:29,690 --> 00:22:33,480
low-level infrastructure monitoring is

00:22:31,769 --> 00:22:35,759
great right knowing that a service had a

00:22:33,480 --> 00:22:37,620
problem if a server falls down in the

00:22:35,759 --> 00:22:39,830
middle of the woods and there's no user

00:22:37,620 --> 00:22:42,659
there to notice it does anybody care

00:22:39,830 --> 00:22:44,220
well probably but not at four o'clock in

00:22:42,659 --> 00:22:49,200
the morning when they get paged out of

00:22:44,220 --> 00:22:51,419
bed I don't get distracted by low-level

00:22:49,200 --> 00:22:53,159
monitoring and data metrics use

00:22:51,419 --> 00:22:54,149
acceptance tests to find out whether

00:22:53,159 --> 00:22:55,919
you've got a real problem

00:22:54,149 --> 00:22:58,049
an example of an acceptance test that we

00:22:55,919 --> 00:22:59,730
were running a CF push test it would

00:22:58,049 --> 00:23:01,230
check out a fixture it would push that

00:22:59,730 --> 00:23:02,999
app it would hit that app it would check

00:23:01,230 --> 00:23:05,009
the response it would stop the app it

00:23:02,999 --> 00:23:06,450
would remap the app the root for the app

00:23:05,009 --> 00:23:07,529
it would start it again it would hit it

00:23:06,450 --> 00:23:09,749
again it would stop it again it would

00:23:07,529 --> 00:23:11,580
delete it we did that every two minutes

00:23:09,749 --> 00:23:13,799
on every cloud foundry in every data

00:23:11,580 --> 00:23:15,899
center which also tested our platform to

00:23:13,799 --> 00:23:17,190
a certain extent but we did the same

00:23:15,899 --> 00:23:19,649
thing for our data service as well

00:23:17,190 --> 00:23:21,990
rabbit MQ Redis those sorts of things

00:23:19,649 --> 00:23:23,909
that meant we had great confidence that

00:23:21,990 --> 00:23:25,769
the system was working it was on a CI

00:23:23,909 --> 00:23:28,110
server so we had a great wall board

00:23:25,769 --> 00:23:29,460
within red and green boxes publish that

00:23:28,110 --> 00:23:31,889
to the app teams publish it to your

00:23:29,460 --> 00:23:34,619
stakeholders everyone will know how well

00:23:31,889 --> 00:23:37,559
your platform is performing that works

00:23:34,619 --> 00:23:39,149
well for the day-to-day running of your

00:23:37,559 --> 00:23:41,100
pass what about when you need to do two

00:23:39,149 --> 00:23:43,019
upgrades okay and I've talked about

00:23:41,100 --> 00:23:44,580
having multiple cloud foundries which is

00:23:43,019 --> 00:23:47,309
a really great pattern for insulating

00:23:44,580 --> 00:23:48,809
yourself from failure despite all the

00:23:47,309 --> 00:23:50,519
cool things that people - ops manager

00:23:48,809 --> 00:23:53,129
and Bosch can do you can still

00:23:50,519 --> 00:23:55,230
irrecoverably balke Cloud Foundry in the

00:23:53,129 --> 00:23:58,080
course of an upgrade you need to be able

00:23:55,230 --> 00:24:01,350
to divert traffic to other cloud

00:23:58,080 --> 00:24:03,570
boundaries if that happens when you're

00:24:01,350 --> 00:24:05,820
doing upgrades you need to check that

00:24:03,570 --> 00:24:07,169
your apps are still working why would I

00:24:05,820 --> 00:24:09,409
need to do that you asked me there's a

00:24:07,169 --> 00:24:11,009
perfect obstruction between pairs an app

00:24:09,409 --> 00:24:12,539
unfortunately it's not that simple

00:24:11,009 --> 00:24:15,840
especially when it comes to build packs

00:24:12,539 --> 00:24:17,999
long story short open SSL issues lots of

00:24:15,840 --> 00:24:20,009
upgrades upgraded our Cloud Foundry

00:24:17,999 --> 00:24:22,049
picked up a new bill pack apps we're

00:24:20,009 --> 00:24:22,830
using the new build pack ask the app

00:24:22,049 --> 00:24:24,480
development team

00:24:22,830 --> 00:24:27,300
can you test your apps there works on

00:24:24,480 --> 00:24:28,860
this non-product I found REE we don't

00:24:27,300 --> 00:24:31,080
have any automated tests it's an

00:24:28,860 --> 00:24:32,910
enterprise they plan things three months

00:24:31,080 --> 00:24:34,470
in advance on a Gantt chart the offshore

00:24:32,910 --> 00:24:36,240
testing team is busy doing something

00:24:34,470 --> 00:24:37,860
else so they didn't really give it a

00:24:36,240 --> 00:24:39,330
thorough test we upgrade all the

00:24:37,860 --> 00:24:40,890
production Cloud Foundry is next thing

00:24:39,330 --> 00:24:42,660
you know somebody is debugging byte

00:24:40,890 --> 00:24:45,270
arrays in hex for a week finding a bug

00:24:42,660 --> 00:24:47,400
in Kerberos in the open JDK make sure

00:24:45,270 --> 00:24:49,410
that your apps have automated tests that

00:24:47,400 --> 00:24:51,720
you've got hook into their CI system if

00:24:49,410 --> 00:24:53,700
they do that you can trigger tests

00:24:51,720 --> 00:24:55,830
against your upgraded Cloud Foundry if

00:24:53,700 --> 00:24:57,660
not have a contract with them that they

00:24:55,830 --> 00:24:59,700
will expose an endpoint that you can hit

00:24:57,660 --> 00:25:01,260
that does a dummy transaction something

00:24:59,700 --> 00:25:03,900
meaningful with all the behavior of

00:25:01,260 --> 00:25:05,490
their application if you're gonna have

00:25:03,900 --> 00:25:07,500
multiple cloud foundries have a

00:25:05,490 --> 00:25:09,270
development Cloud Foundry you should be

00:25:07,500 --> 00:25:10,500
writing some automation and some tooling

00:25:09,270 --> 00:25:12,240
which is changing the state of your

00:25:10,500 --> 00:25:14,730
cloud foundry make sure you're not using

00:25:12,240 --> 00:25:17,670
the same one that your users are like

00:25:14,730 --> 00:25:19,680
development teams some numpty once run

00:25:17,670 --> 00:25:22,020
wrote a piece of code that was creating

00:25:19,680 --> 00:25:23,340
some users safe for only creating users

00:25:22,020 --> 00:25:25,350
and of course you should have realistic

00:25:23,340 --> 00:25:27,780
test data right you know so people

00:25:25,350 --> 00:25:30,780
understand the purpose of your code only

00:25:27,780 --> 00:25:33,570
problem was that the realistic test data

00:25:30,780 --> 00:25:35,880
was admin user we will recognize that a

00:25:33,570 --> 00:25:37,920
little it's realistic and we need to

00:25:35,880 --> 00:25:41,130
tear down the data we create in the

00:25:37,920 --> 00:25:44,040
tests yeah don't do that have a

00:25:41,130 --> 00:25:46,140
Development Cloud Foundry if you're

00:25:44,040 --> 00:25:47,490
using windows apology so any Microsoft

00:25:46,140 --> 00:25:48,630
folks in the room if you're using

00:25:47,490 --> 00:25:50,370
Windows and you're trying to develop

00:25:48,630 --> 00:25:52,200
Ruby on Cloud Foundry you're gonna have

00:25:50,370 --> 00:25:53,970
a bad time you will lose weeks to

00:25:52,200 --> 00:25:57,510
various issues with things like nokogiri

00:25:53,970 --> 00:25:58,530
and compilation you can use Linux or OSX

00:25:57,510 --> 00:26:00,630
that's what the rest of the ecosystem

00:25:58,530 --> 00:26:02,250
uses you will be more productive because

00:26:00,630 --> 00:26:04,620
you can leverage more things that the

00:26:02,250 --> 00:26:05,850
community has made if you are using

00:26:04,620 --> 00:26:07,470
Windows where you find yourself an

00:26:05,850 --> 00:26:09,930
enterprise that's using Windows you can

00:26:07,470 --> 00:26:11,550
be pretty productive with mingw which is

00:26:09,930 --> 00:26:13,770
minimum renew tools for Windows which

00:26:11,550 --> 00:26:15,930
gives you bash and corneum you which is

00:26:13,770 --> 00:26:18,030
a bit like I term but with completely

00:26:15,930 --> 00:26:20,520
different short keyboard shortcuts use

00:26:18,030 --> 00:26:21,840
that in the past works really well I was

00:26:20,520 --> 00:26:24,120
gonna tell you about a load of bash

00:26:21,840 --> 00:26:26,120
scripts that we wrote to make targeting

00:26:24,120 --> 00:26:29,760
multiple Cloud Foundry is easier and

00:26:26,120 --> 00:26:32,340
then we did some stuff to print out cf

00:26:29,760 --> 00:26:34,110
home to bash prompt some of you always

00:26:32,340 --> 00:26:34,860
knew which one we were targeting instead

00:26:34,110 --> 00:26:37,320
I'm going to tell you about

00:26:34,860 --> 00:26:39,510
flex which we've written and is a simple

00:26:37,320 --> 00:26:41,580
shim that will allow you to manage

00:26:39,510 --> 00:26:43,830
multiple cloud foundries and run one

00:26:41,580 --> 00:26:45,299
command against all of them still works

00:26:43,830 --> 00:26:47,100
with all your favorite plugins it

00:26:45,299 --> 00:26:48,450
optionally fails fast so if you're

00:26:47,100 --> 00:26:50,399
deleting something maybe that doesn't

00:26:48,450 --> 00:26:52,380
exist on some and it does on others it

00:26:50,399 --> 00:26:55,320
will cope with that what's more exciting

00:26:52,380 --> 00:26:57,059
than that though is cf converger which

00:26:55,320 --> 00:27:00,570
i've been hacking on wasps I've been

00:26:57,059 --> 00:27:03,179
over in Santa Clara this is a system

00:27:00,570 --> 00:27:04,799
that will take a yam or file and it will

00:27:03,179 --> 00:27:06,809
make your Cloud Foundry look like you

00:27:04,799 --> 00:27:10,350
described in that yam all file right so

00:27:06,809 --> 00:27:12,510
hands up quickly if you use Bosch cool

00:27:10,350 --> 00:27:14,909
enough people write with Bosch we know

00:27:12,510 --> 00:27:16,320
that snowflakes are bad we say make the

00:27:14,909 --> 00:27:18,510
world look like this Bosch and it goes

00:27:16,320 --> 00:27:20,100
and does it with Cloud Foundry though we

00:27:18,510 --> 00:27:21,419
all think it's fine oh well you just

00:27:20,100 --> 00:27:23,039
fiddle with your state and change this

00:27:21,419 --> 00:27:25,500
and change that and if we find someone

00:27:23,039 --> 00:27:28,470
will back it up converger will take you

00:27:25,500 --> 00:27:30,990
yeah mph I'll create orgs spaces users

00:27:28,470 --> 00:27:32,880
user provided services and that can be

00:27:30,990 --> 00:27:34,679
run against multiple cloud boundaries so

00:27:32,880 --> 00:27:36,779
if you have to make a cloud found you

00:27:34,679 --> 00:27:38,940
look a certain way or say you set up an

00:27:36,779 --> 00:27:43,590
app across multiple cloud foundries this

00:27:38,940 --> 00:27:44,639
will help you another tool that is handy

00:27:43,590 --> 00:27:46,350
if you've used a software-defined

00:27:44,639 --> 00:27:47,159
network is something made by some

00:27:46,350 --> 00:27:49,260
friends of mine

00:27:47,159 --> 00:27:51,269
it's called Virgil it will sweep through

00:27:49,260 --> 00:27:53,429
Bosh look at where your Diego cells are

00:27:51,269 --> 00:27:55,799
and will dump out a load of Jason

00:27:53,429 --> 00:28:03,240
describing firewall rules based on your

00:27:55,799 --> 00:28:06,480
security groups and so hopefully giving

00:28:03,240 --> 00:28:07,889
you some useful links the tools talked

00:28:06,480 --> 00:28:10,799
about some lessons that I've learned

00:28:07,889 --> 00:28:12,330
hopefully you can apply let's move away

00:28:10,799 --> 00:28:14,130
from the challenges and look at some of

00:28:12,330 --> 00:28:16,919
the successes this is something that I

00:28:14,130 --> 00:28:19,320
tweeted about last year open SSL issues

00:28:16,919 --> 00:28:22,710
have lots of upgrades to be done this

00:28:19,320 --> 00:28:25,049
work involved a pair in the past raishin

00:28:22,710 --> 00:28:27,960
seem occasionally leaning over going to

00:28:25,049 --> 00:28:28,620
ops manager next and then carrying on

00:28:27,960 --> 00:28:31,529
with their work

00:28:28,620 --> 00:28:34,110
so it took a couple of days but minutes

00:28:31,529 --> 00:28:36,330
of people's time rather than hours the

00:28:34,110 --> 00:28:38,909
folks that were there were embedded in

00:28:36,330 --> 00:28:40,860
this enterprise estimated two years of

00:28:38,909 --> 00:28:43,919
scheduled weekend maintenance every

00:28:40,860 --> 00:28:45,840
weekend for two years this is several

00:28:43,919 --> 00:28:48,120
orders of magnitude better than the

00:28:45,840 --> 00:28:48,540
status quo right that is why you are all

00:28:48,120 --> 00:28:50,670
here

00:28:48,540 --> 00:28:53,040
that is why we are here because Cloud

00:28:50,670 --> 00:28:55,260
Foundry gives people that orders a

00:28:53,040 --> 00:28:58,440
magnitude better improvement in their

00:28:55,260 --> 00:29:00,360
productivity I really wish I could share

00:28:58,440 --> 00:29:02,460
with you the story of this this is from

00:29:00,360 --> 00:29:04,920
a product owner who emailed out to his

00:29:02,460 --> 00:29:08,040
engineering team to the IT directors the

00:29:04,920 --> 00:29:10,500
Paz operations team this product release

00:29:08,040 --> 00:29:12,270
took us weeks instead of months because

00:29:10,500 --> 00:29:14,070
we're using Cloud Foundry because we're

00:29:12,270 --> 00:29:17,040
using a powers instead of physical Tinh

00:29:14,070 --> 00:29:18,870
servers again that is why we're here

00:29:17,040 --> 00:29:22,200
not because it's a bit better because

00:29:18,870 --> 00:29:23,220
it's a lot better define a success make

00:29:22,200 --> 00:29:24,690
sure you're clear on what your

00:29:23,220 --> 00:29:26,240
objectives are measure them and

00:29:24,690 --> 00:29:28,500
continuously improve against them

00:29:26,240 --> 00:29:31,080
reinterpret regulations rather than

00:29:28,500 --> 00:29:32,130
reapplying existing policies if it's not

00:29:31,080 --> 00:29:34,800
self-service then it's

00:29:32,130 --> 00:29:36,150
platform-as-a-service defer demonstrate

00:29:34,800 --> 00:29:39,120
or Ptolemais ssin when you find

00:29:36,150 --> 00:29:41,640
hostility to automation pass pain on be

00:29:39,120 --> 00:29:43,470
like an api at the same time build

00:29:41,640 --> 00:29:45,540
empathy through pairing and understand

00:29:43,470 --> 00:29:47,850
their context educate them help them

00:29:45,540 --> 00:29:49,830
learn shake out rule breakers by using

00:29:47,850 --> 00:29:51,330
the chaos monkey approach how testing

00:29:49,830 --> 00:29:53,040
contracts so you can make sure that you

00:29:51,330 --> 00:29:55,020
can upgrade your cloud foundries in a

00:29:53,040 --> 00:29:57,330
timely fashion and most importantly of

00:29:55,020 --> 00:29:59,760
all do continuous acceptance testing

00:29:57,330 --> 00:30:01,230
against your platforms all the time so

00:29:59,760 --> 00:30:04,170
you have great confidence that they're

00:30:01,230 --> 00:30:06,000
working I'm Daniel Jones from engineer

00:30:04,170 --> 00:30:08,070
better if you have any UK Cloud Foundry

00:30:06,000 --> 00:30:09,630
requirements please talk to me if you

00:30:08,070 --> 00:30:11,340
want to ask any questions about Cloud

00:30:09,630 --> 00:30:13,770
Foundry generally I'm an ambassador and

00:30:11,340 --> 00:30:18,090
more than happy to help do we have time

00:30:13,770 --> 00:30:19,290
for questions yes yes we do there's

00:30:18,090 --> 00:30:21,600
about 10 minutes of the next people are

00:30:19,290 --> 00:30:30,810
in so if there are any questions please

00:30:21,600 --> 00:30:32,060
stroll up to the mic tumbleweed ok right

00:30:30,810 --> 00:30:35,190
well thank you very much

00:30:32,060 --> 00:30:35,190

YouTube URL: https://www.youtube.com/watch?v=1o3LcxkAuNM


