Title: The Cloud Foundry Bits-Service Myth Buster! - Simon Moser & Marc Schunk, IBM, & Stev Witzel, Pivotal
Publication date: 2016-05-29
Playlist: Cloud Foundry Summit Santa Clara 2016
Description: 
	Did you ever wonder what that mythical ‘bits-service’ incubation project is? Has the CloudFoundry community finally lost their minds and started on a competition with OpenStack Swift or Amazon S3? Hell NO! This talk will introduce the current state and give an outlook to the future of the “bits-service” [1] project. In short, the bits-service is an extraction of an existing functionality in the cloud controller today - externalising everything related to bits (application bits, droplets, packages, buildpacks, …) into a proper micro service. It can be scaled independently, is encapsulated by a well-defined API, so its a generic BLOBSTORE API, right? Mmm…. maybe come and join the team (the first community project equally staffed with engineers of IBM and Pivotal) in the talk and let us handle your bits! 

[1] www.github.com/cloudfoundry-incubator/bits-service 

Simon Moser
Senior Technical Staff Member, IBM
Simon is a Senior Technical Staff Member with IBM that works both on IBM Bluemix as well Cloud Foundry, where he runs projects like OpenWhisk or the Bits-service. Simon has been publishing many papers and given many talks at International Conferences (such as IBM Interconnect, EclipseCon and other major conferences).

Marc Schunk
Software Engineer, IBM

Stev Witzel
Engineering Manager, Pivotal
Stev works as a software engineer at Pivotal’s London office. He is part of the team behind the Cloud Foundry Bits-Service project. Previously, he has been working on Cloud Foundry data services and Bosh. In his free time he enjoys building things in Golang and learning about distributed systems.
Captions: 
	00:00:00,030 --> 00:00:08,160
okay so welcome everybody to the myths a

00:00:06,120 --> 00:00:11,400
bit service mythbuster talk

00:00:08,160 --> 00:00:14,340
my name is Simon Moser I'm the p.m. for

00:00:11,400 --> 00:00:17,880
the occupation project called bit

00:00:14,340 --> 00:00:19,650
service and the goal of this talk is

00:00:17,880 --> 00:00:21,359
really to introduce everybody here in

00:00:19,650 --> 00:00:23,130
the room and in the community about what

00:00:21,359 --> 00:00:24,570
the bit service is what we intend to do

00:00:23,130 --> 00:00:28,439
why we do it and all these kind of

00:00:24,570 --> 00:00:32,369
things so we have a little agenda that

00:00:28,439 --> 00:00:35,910
we put together and we basically divided

00:00:32,369 --> 00:00:37,860
it up into three pieces first piece is

00:00:35,910 --> 00:00:39,960
we're going to explain to you what the

00:00:37,860 --> 00:00:41,250
bit service is why do we think we need

00:00:39,960 --> 00:00:44,460
it

00:00:41,250 --> 00:00:47,309
and the second plot will be something

00:00:44,460 --> 00:00:49,440
that what is it that we actually did in

00:00:47,309 --> 00:00:51,809
the last couple of months what are the

00:00:49,440 --> 00:00:53,039
challenges that we faced what have what

00:00:51,809 --> 00:00:56,190
were the lessons that we actually

00:00:53,039 --> 00:00:58,980
learned while conducting the project and

00:00:56,190 --> 00:01:01,050
then last but not least we're going to

00:00:58,980 --> 00:01:02,850
explain to you why this might or might

00:01:01,050 --> 00:01:03,629
not be important for you so how does it

00:01:02,850 --> 00:01:05,489
affect you

00:01:03,629 --> 00:01:07,650
how would it help you what are we

00:01:05,489 --> 00:01:09,390
planning on doing next and so on and so

00:01:07,650 --> 00:01:14,909
forth and we'll conclude with a Q&A

00:01:09,390 --> 00:01:17,310
obviously so let's get started on the

00:01:14,909 --> 00:01:19,350
bit service so what is what is the bit

00:01:17,310 --> 00:01:22,290
service so first and foremost the bit

00:01:19,350 --> 00:01:27,420
service is a true community incubation

00:01:22,290 --> 00:01:29,790
project scoped around bits right now we

00:01:27,420 --> 00:01:32,310
are running as probably one of the very

00:01:29,790 --> 00:01:34,290
few teams in the Cloud Foundry community

00:01:32,310 --> 00:01:38,100
that is that is really truly equally

00:01:34,290 --> 00:01:39,930
divided by members from IBM or by

00:01:38,100 --> 00:01:46,530
employees from IBM and employees from

00:01:39,930 --> 00:01:50,009
pivotal the when I say it scoped around

00:01:46,530 --> 00:01:52,259
bits what I really mean by that is what

00:01:50,009 --> 00:01:53,909
what are bits when I'm talking about

00:01:52,259 --> 00:01:56,149
this what is it I'm talking about I'm

00:01:53,909 --> 00:01:59,450
talking about things like application

00:01:56,149 --> 00:02:03,740
artifacts I'm talking about compiled

00:01:59,450 --> 00:02:07,560
droplets I'm talking about build packs

00:02:03,740 --> 00:02:10,970
packages and then also we are talking

00:02:07,560 --> 00:02:13,970
about all of the caching and

00:02:10,970 --> 00:02:15,470
and other stuff that's that's today in

00:02:13,970 --> 00:02:18,650
the cloud controller related to these

00:02:15,470 --> 00:02:21,350
kind of artifacts so in order to make

00:02:18,650 --> 00:02:25,160
that a little bit more transparent to

00:02:21,350 --> 00:02:25,820
what that means let let us explain to

00:02:25,160 --> 00:02:27,950
you first

00:02:25,820 --> 00:02:30,380
where does cloud foundry use bits today

00:02:27,950 --> 00:02:32,210
and we're gonna use the example of

00:02:30,380 --> 00:02:37,550
pushing an app to set the context for

00:02:32,210 --> 00:02:39,740
everybody hey my name is Steve and I

00:02:37,550 --> 00:02:42,140
work for pivotal is that my colleagues

00:02:39,740 --> 00:02:44,330
tonight from IBM and assignment just

00:02:42,140 --> 00:02:47,090
said pushing an app is like one

00:02:44,330 --> 00:02:48,620
particular use case of a CF a Cloud

00:02:47,090 --> 00:02:51,080
Foundry workflow where bits really

00:02:48,620 --> 00:02:53,510
matter or blobs matter and might be

00:02:51,080 --> 00:02:55,790
worth like looking behind the curtain on

00:02:53,510 --> 00:02:57,140
a high level like what's happening when

00:02:55,790 --> 00:02:59,900
you do a CF push when you push your

00:02:57,140 --> 00:03:01,670
application and yeah I don't want to

00:02:59,900 --> 00:03:02,720
bore you too much so I kept that like

00:03:01,670 --> 00:03:04,040
focus on bits here

00:03:02,720 --> 00:03:06,190
so there are a couple of pieces missing

00:03:04,040 --> 00:03:08,209
and this like secret sequence diagram

00:03:06,190 --> 00:03:11,540
but basically the first thing that

00:03:08,209 --> 00:03:14,209
happens when you type CF push on your

00:03:11,540 --> 00:03:15,890
CLI which is like that thread on the

00:03:14,209 --> 00:03:19,040
left side in a sequence diagram that

00:03:15,890 --> 00:03:21,620
says CF UCLA I will make an HTTP POST

00:03:19,040 --> 00:03:24,410
request to an endpoint called V to apps

00:03:21,620 --> 00:03:27,260
and at endpoint is served by what we

00:03:24,410 --> 00:03:28,610
call the cloud controller or cc it's

00:03:27,260 --> 00:03:31,010
like this middle component in the

00:03:28,610 --> 00:03:33,200
diagram and that's a pretty important

00:03:31,010 --> 00:03:35,360
and central component in in a Cloud

00:03:33,200 --> 00:03:37,940
Foundry deployment it's basically the

00:03:35,360 --> 00:03:40,100
component that serves all of the API

00:03:37,940 --> 00:03:43,280
endpoints so whenever you interact with

00:03:40,100 --> 00:03:45,290
your CF environment you're most likely

00:03:43,280 --> 00:03:47,150
going through the clock controller right

00:03:45,290 --> 00:03:49,790
so it serves up the API it also

00:03:47,150 --> 00:03:52,070
maintains the data model that resembles

00:03:49,790 --> 00:03:53,870
your particular CF environment so all

00:03:52,070 --> 00:03:55,519
the apps the space is the orcs the

00:03:53,870 --> 00:03:57,470
services the service bindings is

00:03:55,519 --> 00:03:59,690
Saturday PPE all of that is maintained

00:03:57,470 --> 00:04:02,000
and stored by the cloud controller so it

00:03:59,690 --> 00:04:03,680
does quite a bit anyway let's get back

00:04:02,000 --> 00:04:05,269
to that post so the post happens and

00:04:03,680 --> 00:04:07,910
cloud controller creates a bunch of like

00:04:05,269 --> 00:04:10,040
database entries amongst others there

00:04:07,910 --> 00:04:12,110
will be a row in a table called apps and

00:04:10,040 --> 00:04:14,450
I wrote resembles your app right and

00:04:12,110 --> 00:04:17,330
cloud controller is going to assign a

00:04:14,450 --> 00:04:19,669
globally unique ID or grid to your app

00:04:17,330 --> 00:04:22,070
and it's going to pass that back to CLI

00:04:19,669 --> 00:04:24,280
and the CLI now has a way to address

00:04:22,070 --> 00:04:27,370
that going forward

00:04:24,280 --> 00:04:30,280
so the next big piece that happens with

00:04:27,370 --> 00:04:32,050
regards to bits is all about what we

00:04:30,280 --> 00:04:33,430
call resource matching and before I tell

00:04:32,050 --> 00:04:35,170
you what that is

00:04:33,430 --> 00:04:37,780
you need to know that the cloud

00:04:35,170 --> 00:04:40,210
controller keeps like a global cache of

00:04:37,780 --> 00:04:42,280
all application artifacts which means

00:04:40,210 --> 00:04:44,740
like all the Flyers that your apps

00:04:42,280 --> 00:04:48,040
consist of and it keeps such a cache

00:04:44,740 --> 00:04:49,810
across all orcs and spaces where all

00:04:48,040 --> 00:04:51,490
these fights live so basically that

00:04:49,810 --> 00:04:53,500
means like every app that has been

00:04:51,490 --> 00:04:56,290
pushed to your Cloud Foundry environment

00:04:53,500 --> 00:04:58,540
all these all these files that these

00:04:56,290 --> 00:05:00,400
apps consists of they live in this cache

00:04:58,540 --> 00:05:02,590
right there like unique entries for each

00:05:00,400 --> 00:05:04,510
file and why do we have such cache well

00:05:02,590 --> 00:05:06,760
like any other cache out there it

00:05:04,510 --> 00:05:09,010
prevents us from doing things twice or

00:05:06,760 --> 00:05:10,810
multiple times in this case we want to

00:05:09,010 --> 00:05:13,000
prevent ourselves from having to upload

00:05:10,810 --> 00:05:14,560
the same file over and over again right

00:05:13,000 --> 00:05:16,960
and you can think of like having an

00:05:14,560 --> 00:05:18,850
organization with multiple developers or

00:05:16,960 --> 00:05:20,590
like thousands even developers and they

00:05:18,850 --> 00:05:22,990
all either push the same app or they

00:05:20,590 --> 00:05:24,820
push apps that rely on common files you

00:05:22,990 --> 00:05:26,170
don't want to upload these files over

00:05:24,820 --> 00:05:29,500
and over again that's why we have that

00:05:26,170 --> 00:05:33,040
cache and in order to use that catch the

00:05:29,500 --> 00:05:34,540
CLI has to have a way to identify what

00:05:33,040 --> 00:05:36,100
files are currently in the cache and

00:05:34,540 --> 00:05:37,870
what files are missing because the

00:05:36,100 --> 00:05:39,610
missing ones it has to upload obviously

00:05:37,870 --> 00:05:41,890
right and that process is called

00:05:39,610 --> 00:05:43,270
resource matching and to initiate the

00:05:41,890 --> 00:05:45,520
resource matching the CLI is going to

00:05:43,270 --> 00:05:47,920
make a put request so that's that second

00:05:45,520 --> 00:05:50,860
arrow that goes from the CF component to

00:05:47,920 --> 00:05:52,960
CC here makes a put request on to this

00:05:50,860 --> 00:05:55,150
v2 resource match endpoint and it

00:05:52,960 --> 00:05:57,550
provides a list of fingerprints so there

00:05:55,150 --> 00:05:59,770
will be a fingerprint for each file that

00:05:57,550 --> 00:06:02,260
you have consists of and you can think

00:05:59,770 --> 00:06:03,910
of fingerprints like some hashes that

00:06:02,260 --> 00:06:06,340
basically identify the bits that your

00:06:03,910 --> 00:06:08,680
file consists of so an ND five hash or

00:06:06,340 --> 00:06:09,850
something like that right and that list

00:06:08,680 --> 00:06:11,110
is being passed on to the club

00:06:09,850 --> 00:06:12,700
controller in the club controller then

00:06:11,110 --> 00:06:15,970
we'll check with the third component

00:06:12,700 --> 00:06:18,010
that we call plop store whether or not a

00:06:15,970 --> 00:06:19,540
certain file is in the cache and it will

00:06:18,010 --> 00:06:21,790
use that fingerprint to identify that

00:06:19,540 --> 00:06:23,620
file and I will tell you a little bit

00:06:21,790 --> 00:06:26,110
more about blobstore in another slide

00:06:23,620 --> 00:06:27,820
coming up but we will basically check

00:06:26,110 --> 00:06:29,830
for each file so we make a hat request

00:06:27,820 --> 00:06:32,020
to the blobstore and the pub store tells

00:06:29,830 --> 00:06:34,270
us yeah 200 I have two file or 404 I

00:06:32,020 --> 00:06:35,860
don't know that file and for the files

00:06:34,270 --> 00:06:37,430
that I'm currently missing the clock

00:06:35,860 --> 00:06:39,350
control is going to assemble a list

00:06:37,430 --> 00:06:42,140
missing fingerprints and passes that on

00:06:39,350 --> 00:06:44,810
or back on to the CLI and now the CLI

00:06:42,140 --> 00:06:46,760
knows what files need to be uploaded so

00:06:44,810 --> 00:06:48,650
we'll take all these files will zip them

00:06:46,760 --> 00:06:52,010
up and we'll upload them to the cloud

00:06:48,650 --> 00:06:54,290
controller in the second put request

00:06:52,010 --> 00:06:55,940
here and as part of that put regrets it

00:06:54,290 --> 00:06:57,470
also sends along like the the global

00:06:55,940 --> 00:06:59,240
list of fingerprints so now the cloud

00:06:57,470 --> 00:07:01,280
controller knows what files the app

00:06:59,240 --> 00:07:03,620
consists of and it knows what are the

00:07:01,280 --> 00:07:05,510
new files and what uh defines that it

00:07:03,620 --> 00:07:07,820
already has in the cache so it gets the

00:07:05,510 --> 00:07:10,310
files it already has cached from the

00:07:07,820 --> 00:07:12,830
blob store and it stores the new files

00:07:10,310 --> 00:07:14,930
just got to the blob store because we

00:07:12,830 --> 00:07:17,330
want to reuse them in future requests

00:07:14,930 --> 00:07:19,730
right and at the end of that process at

00:07:17,330 --> 00:07:22,100
the end of the two loops it sends back a

00:07:19,730 --> 00:07:25,430
to one to the CLI which now can go on to

00:07:22,100 --> 00:07:27,620
whatever needs to do right and in an SN

00:07:25,430 --> 00:07:29,000
Kronus way using a background job it

00:07:27,620 --> 00:07:30,620
will actually take all of these files

00:07:29,000 --> 00:07:32,570
that you have consists of in the

00:07:30,620 --> 00:07:34,250
assemble what we call a package and that

00:07:32,570 --> 00:07:36,080
package is then also being uploaded to

00:07:34,250 --> 00:07:38,000
the blob store and why do we do that why

00:07:36,080 --> 00:07:38,510
do we keep that cache and then also a

00:07:38,000 --> 00:07:40,220
package

00:07:38,510 --> 00:07:43,130
well that package is actually the piece

00:07:40,220 --> 00:07:45,980
that we samples you add that piece is

00:07:43,130 --> 00:07:48,080
then later being downloaded by ETA or

00:07:45,980 --> 00:07:50,540
Diego when you want to stage and start

00:07:48,080 --> 00:07:53,030
your app because we need those files and

00:07:50,540 --> 00:07:55,460
we need to compile them using the build

00:07:53,030 --> 00:07:57,980
pack or put them to come up with a

00:07:55,460 --> 00:07:59,750
droplet that we then can run so that's

00:07:57,980 --> 00:08:01,070
basically the flows and now you have

00:07:59,750 --> 00:08:03,620
like an idea of like one particular

00:08:01,070 --> 00:08:05,450
example of where we use bits and this

00:08:03,620 --> 00:08:07,100
new bit so it's years with these bits

00:08:05,450 --> 00:08:09,980
but before I tell you more about bit

00:08:07,100 --> 00:08:11,510
service let's take a look at what this

00:08:09,980 --> 00:08:13,790
blob store component on the right side

00:08:11,510 --> 00:08:15,530
actually means what that is and that

00:08:13,790 --> 00:08:17,360
highly depends on your deployment of

00:08:15,530 --> 00:08:19,760
Cloud Foundry right so you might either

00:08:17,360 --> 00:08:21,560
have a particular boss job AVM in your

00:08:19,760 --> 00:08:23,240
deployment where you store these files

00:08:21,560 --> 00:08:25,010
and you store them on a local disk there

00:08:23,240 --> 00:08:26,990
that's what we mean with local disk here

00:08:25,010 --> 00:08:29,900
so you store them on a VM in your

00:08:26,990 --> 00:08:31,370
deployment why that is visible and some

00:08:29,900 --> 00:08:32,900
people do that it's maybe not the most

00:08:31,370 --> 00:08:34,610
scalable solution out there right

00:08:32,900 --> 00:08:37,490
and that's why more often you will see

00:08:34,610 --> 00:08:40,580
people use external objects or something

00:08:37,490 --> 00:08:42,860
like AWS s3 or OpenStack Swift and there

00:08:40,580 --> 00:08:44,600
are many more options and the reason we

00:08:42,860 --> 00:08:46,610
can support and then provide you all

00:08:44,600 --> 00:08:49,100
these options for the object stores is

00:08:46,610 --> 00:08:50,350
because we use this little library

00:08:49,100 --> 00:08:54,340
called for

00:08:50,350 --> 00:08:56,770
fo G cloud I don't know who came up

00:08:54,340 --> 00:08:59,140
with that but actually that is kind of

00:08:56,770 --> 00:09:00,730
like an abstraction layer that abstracts

00:08:59,140 --> 00:09:02,080
the api's for all these blob stores and

00:09:00,730 --> 00:09:04,210
that's why we can offer that right

00:09:02,080 --> 00:09:06,760
that's why we can give you support for s

00:09:04,210 --> 00:09:09,190
free was this OpenStack I think mark

00:09:06,760 --> 00:09:11,350
later my colleague from IBM will tell

00:09:09,190 --> 00:09:12,850
you a little bit more about fog but

00:09:11,350 --> 00:09:14,710
right now it's it's important to know

00:09:12,850 --> 00:09:18,640
that the blob store is it's most likely

00:09:14,710 --> 00:09:20,680
something external alright so now I told

00:09:18,640 --> 00:09:22,210
you how we use app and what the flow

00:09:20,680 --> 00:09:23,440
looks like and where we store them you

00:09:22,210 --> 00:09:25,120
might still wonder what is this bit

00:09:23,440 --> 00:09:27,390
service then because that's like what we

00:09:25,120 --> 00:09:30,340
do nowadays right without a bit service

00:09:27,390 --> 00:09:31,780
well at its core this bit service thing

00:09:30,340 --> 00:09:34,660
is a new component in your deployment

00:09:31,780 --> 00:09:36,310
it's a new boss job or you might want to

00:09:34,660 --> 00:09:38,020
look at it as a new service right that's

00:09:36,310 --> 00:09:40,090
why it's called bit service and it

00:09:38,020 --> 00:09:42,670
encapsulates all the bits related

00:09:40,090 --> 00:09:46,750
functionalities in one piece in one new

00:09:42,670 --> 00:09:48,850
component and it will do things like you

00:09:46,750 --> 00:09:50,620
know dealing with the with the uploads

00:09:48,850 --> 00:09:52,780
and the downloads of your app bits your

00:09:50,620 --> 00:09:54,250
app resources right it will do it if the

00:09:52,780 --> 00:09:56,110
resource matching I told you about it

00:09:54,250 --> 00:09:58,330
will handle packages droplets build

00:09:56,110 --> 00:10:00,090
packs everything that basically needs to

00:09:58,330 --> 00:10:02,740
be uploaded and downloaded all the time

00:10:00,090 --> 00:10:04,780
and we want to encapsulate that into a

00:10:02,740 --> 00:10:06,700
new service and to help you like form a

00:10:04,780 --> 00:10:09,370
picture of that thing it's probably also

00:10:06,700 --> 00:10:11,710
good to know what this thing is not so

00:10:09,370 --> 00:10:13,810
it's not a competitor to s free it's not

00:10:11,710 --> 00:10:15,640
a competitor to open sex with we are not

00:10:13,810 --> 00:10:17,530
building a new object stored here right

00:10:15,640 --> 00:10:21,190
rather we are building something that

00:10:17,530 --> 00:10:22,270
extracts and I told you about this fog

00:10:21,190 --> 00:10:23,530
thing so why do we need another

00:10:22,270 --> 00:10:25,360
abstraction layer here

00:10:23,530 --> 00:10:27,550
well this fog thing first of all it's a

00:10:25,360 --> 00:10:30,130
library it's not like a service by

00:10:27,550 --> 00:10:32,290
itself and also it it tries fog tries to

00:10:30,130 --> 00:10:34,030
be very generic what we want though is

00:10:32,290 --> 00:10:36,220
like we want something that's highly use

00:10:34,030 --> 00:10:38,440
case specific to our CF use case cloud

00:10:36,220 --> 00:10:40,600
phone use case and we want to want this

00:10:38,440 --> 00:10:42,520
component to be streamlined and highly

00:10:40,600 --> 00:10:44,110
you know performant for that stuff and

00:10:42,520 --> 00:10:46,120
that's why we want to have this new

00:10:44,110 --> 00:10:48,040
service right so we are not trying to

00:10:46,120 --> 00:10:49,720
build a new object store and we are not

00:10:48,040 --> 00:10:51,220
trying to be generic here and give you

00:10:49,720 --> 00:10:53,920
an API that you can use for your app or

00:10:51,220 --> 00:10:55,420
whatever so that's that new service and

00:10:53,920 --> 00:10:57,190
why do we need it

00:10:55,420 --> 00:10:58,720
I mean that stuff has been working for a

00:10:57,190 --> 00:11:00,850
couple years now like you can push apps

00:10:58,720 --> 00:11:02,200
now and everything works fine right you

00:11:00,850 --> 00:11:03,740
might ask like why do we need this new

00:11:02,200 --> 00:11:07,070
component adds complex

00:11:03,740 --> 00:11:09,020
well at the core the answer for that

00:11:07,070 --> 00:11:11,630
question is like that the cloud control

00:11:09,020 --> 00:11:12,890
is a bit of a monolith nowadays it does

00:11:11,630 --> 00:11:15,020
a lot of things and I told you before

00:11:12,890 --> 00:11:17,870
like it keeps track of like all the

00:11:15,020 --> 00:11:19,550
entities in your CF worlds or keeps

00:11:17,870 --> 00:11:21,560
track of the data model it serves the

00:11:19,550 --> 00:11:24,080
API it handles the bits and it does a

00:11:21,560 --> 00:11:26,780
lot of other things and in the context

00:11:24,080 --> 00:11:29,090
of bits and blobs the problem of that is

00:11:26,780 --> 00:11:31,520
it's mostly around concurrency and

00:11:29,090 --> 00:11:33,140
scalability so in order to understand

00:11:31,520 --> 00:11:35,630
that you have to know that the cloud

00:11:33,140 --> 00:11:38,390
control itself is a ruby app and every

00:11:35,630 --> 00:11:40,070
request that comes in will be handled by

00:11:38,390 --> 00:11:41,360
a separate thread and that thread comes

00:11:40,070 --> 00:11:43,310
out of a thread pool so it's a

00:11:41,360 --> 00:11:45,380
predefined pool and you cannot throw it

00:11:43,310 --> 00:11:47,830
I mean you have like X Fred's and that's

00:11:45,380 --> 00:11:50,630
it right use them and use them wisely

00:11:47,830 --> 00:11:52,190
the problem with these bits related

00:11:50,630 --> 00:11:54,380
requests is that they are potentially

00:11:52,190 --> 00:11:56,570
long-running because you can imagine

00:11:54,380 --> 00:11:58,820
like uploading big file is downloading

00:11:56,570 --> 00:12:01,430
big files or like lots of files that

00:11:58,820 --> 00:12:03,410
might take a while right and during that

00:12:01,430 --> 00:12:07,010
time you're basically locking out other

00:12:03,410 --> 00:12:08,240
threads or other requests that you just

00:12:07,010 --> 00:12:09,740
cannot handle because you're out of

00:12:08,240 --> 00:12:11,720
frets during that time and you're only

00:12:09,740 --> 00:12:13,400
way right now to scale our to to scale

00:12:11,720 --> 00:12:15,740
out of that is like scale our controller

00:12:13,400 --> 00:12:17,450
increase the instances the number of

00:12:15,740 --> 00:12:20,650
instances that you have for cloud

00:12:17,450 --> 00:12:24,080
controller so to increase the throughput

00:12:20,650 --> 00:12:26,150
for the cloud controller API as a whole

00:12:24,080 --> 00:12:27,290
we thought about like hey if you can

00:12:26,150 --> 00:12:29,030
take all these like potentially

00:12:27,290 --> 00:12:31,610
long-running requests and deal with them

00:12:29,030 --> 00:12:33,410
on us in a separate component then we

00:12:31,610 --> 00:12:35,420
have like some leverage there and we can

00:12:33,410 --> 00:12:37,400
scale just that one particular component

00:12:35,420 --> 00:12:38,750
if you have a have a bottleneck there

00:12:37,400 --> 00:12:40,790
and we can increase the overall

00:12:38,750 --> 00:12:42,830
throughput so that's all about

00:12:40,790 --> 00:12:45,050
scalability and and concurrency that's

00:12:42,830 --> 00:12:47,360
really the main point here but also

00:12:45,050 --> 00:12:48,980
obviously couple of other advantages one

00:12:47,360 --> 00:12:50,600
of them is like the cloud controller

00:12:48,980 --> 00:12:53,360
code is kind of complex because it does

00:12:50,600 --> 00:12:55,100
a lot of things by splitting this out

00:12:53,360 --> 00:12:58,240
into a new service having a separate

00:12:55,100 --> 00:13:00,470
code base we hope to arm you know

00:12:58,240 --> 00:13:01,760
maintain that code a little bit easier

00:13:00,470 --> 00:13:04,430
like increase increase minute

00:13:01,760 --> 00:13:07,310
maintainability and also potentially

00:13:04,430 --> 00:13:10,700
allow like parallel development tracks

00:13:07,310 --> 00:13:13,190
sorry on these two code bases and I

00:13:10,700 --> 00:13:14,540
think with that I will hand over to Marc

00:13:13,190 --> 00:13:16,520
and he will tell you a little bit more

00:13:14,540 --> 00:13:16,910
about you know how we got to where we

00:13:16,520 --> 00:13:26,630
are to

00:13:16,910 --> 00:13:28,700
and where we are today and I'm going to

00:13:26,630 --> 00:13:31,400
take you now on how we approach the bait

00:13:28,700 --> 00:13:35,570
service and the challenges we faced

00:13:31,400 --> 00:13:39,190
while doing that so right now the cloud

00:13:35,570 --> 00:13:42,890
controller handles five resources 3r

00:13:39,190 --> 00:13:45,580
entity related like droplets packages

00:13:42,890 --> 00:13:48,530
and built PACs and the other two are

00:13:45,580 --> 00:13:50,390
caches like the Abbott's cache which was

00:13:48,530 --> 00:13:53,180
mentioned and also the build packs cache

00:13:50,390 --> 00:13:55,130
we just picked one and started

00:13:53,180 --> 00:13:57,680
implementing it in a in a separate

00:13:55,130 --> 00:14:01,540
service a bit service implementing all

00:13:57,680 --> 00:14:05,240
the rest verbs like put post gat and

00:14:01,540 --> 00:14:09,560
delete it's not a full REST API it's

00:14:05,240 --> 00:14:13,460
just these services bits handling in

00:14:09,560 --> 00:14:16,520
Cloud Foundry needs we put that since

00:14:13,460 --> 00:14:19,400
it's implemented in Ruby behind a web

00:14:16,520 --> 00:14:23,240
server the nginx which is doing most of

00:14:19,400 --> 00:14:26,000
the raw bits handling in the flow and as

00:14:23,240 --> 00:14:28,990
we had this up and running after that we

00:14:26,000 --> 00:14:31,820
went into the cloud controller and

00:14:28,990 --> 00:14:36,760
basically changed it instead of going to

00:14:31,820 --> 00:14:39,530
its own blobster implementation now

00:14:36,760 --> 00:14:42,400
allow it to talk to the bit service

00:14:39,530 --> 00:14:45,830
instead and do all this bits handling

00:14:42,400 --> 00:14:48,820
through this new API we've implemented

00:14:45,830 --> 00:14:51,440
and after we've we had done that for one

00:14:48,820 --> 00:14:54,710
resource we just repeated that for the

00:14:51,440 --> 00:14:58,730
next resource until we had done that for

00:14:54,710 --> 00:15:01,340
all five resources then we added more

00:14:58,730 --> 00:15:05,720
brass like we started with local file

00:15:01,340 --> 00:15:09,230
system and added support for s3 added

00:15:05,720 --> 00:15:12,590
support for OpenStack and on the red on

00:15:09,230 --> 00:15:14,920
the right-hand side you can see the

00:15:12,590 --> 00:15:18,340
particle pipeline which is really

00:15:14,920 --> 00:15:22,220
testing the bait service against all

00:15:18,340 --> 00:15:24,710
three storage implementations in the

00:15:22,220 --> 00:15:27,500
separate lanes it's just a different

00:15:24,710 --> 00:15:29,510
release we built there and tested

00:15:27,500 --> 00:15:30,890
against the real thing and which is

00:15:29,510 --> 00:15:33,590
quite of nice having

00:15:30,890 --> 00:15:38,390
also in a small component where you can

00:15:33,590 --> 00:15:40,790
do this actual testing and we did start

00:15:38,390 --> 00:15:42,830
with the most common use case in these

00:15:40,790 --> 00:15:47,140
days like the v2 API of the cloud

00:15:42,830 --> 00:15:50,770
controller and the das compute

00:15:47,140 --> 00:15:53,420
implementation and then we moved on to

00:15:50,770 --> 00:15:55,550
do the same thing for Diego where it's

00:15:53,420 --> 00:15:58,070
there's some internal end points differ

00:15:55,550 --> 00:16:01,370
and then we also covered in the past

00:15:58,070 --> 00:16:04,220
weeks we three which was kind of

00:16:01,370 --> 00:16:07,190
interesting at some points because it's

00:16:04,220 --> 00:16:13,700
not completely done yet but we got it

00:16:07,190 --> 00:16:17,150
covered so when we look at the bit flow

00:16:13,700 --> 00:16:19,670
and how the bits flow in the example we

00:16:17,150 --> 00:16:22,940
had a bar from the CF push today is a

00:16:19,670 --> 00:16:25,040
client uploads bits to the CC which is

00:16:22,940 --> 00:16:27,140
what you see on the top and if you have

00:16:25,040 --> 00:16:30,200
your storage back-end in a production

00:16:27,140 --> 00:16:34,040
deployment in s3 CC will relay all the

00:16:30,200 --> 00:16:37,130
bits to the actual blobstore upload that

00:16:34,040 --> 00:16:40,040
again to s3 and when that's done it will

00:16:37,130 --> 00:16:43,550
add the seal I know well we're done and

00:16:40,040 --> 00:16:47,210
if you look at the bottom of the chart

00:16:43,550 --> 00:16:50,270
for tomorrow we will simply remove CC

00:16:47,210 --> 00:16:52,580
out of that flow though the CLI or any

00:16:50,270 --> 00:16:55,460
other internal client like the DA or

00:16:52,580 --> 00:16:57,830
Jago will talk directly to the bit

00:16:55,460 --> 00:16:59,600
service which can be scaled as Steve

00:16:57,830 --> 00:17:01,430
said independently and if you have a

00:16:59,600 --> 00:17:04,820
large deployment with 1 million

00:17:01,430 --> 00:17:06,650
customers on on it and you have a lot of

00:17:04,820 --> 00:17:09,050
uploads and downloads and everything

00:17:06,650 --> 00:17:10,850
going on you can just scale these and

00:17:09,050 --> 00:17:13,610
don't need to scale your cloud

00:17:10,850 --> 00:17:16,640
controller for the actual bits handling

00:17:13,610 --> 00:17:18,680
the only reason why the CC is still in

00:17:16,640 --> 00:17:21,110
that picture because after the upload is

00:17:18,680 --> 00:17:23,510
done we'll still have to let the CC know

00:17:21,110 --> 00:17:26,690
while the father is there that's where

00:17:23,510 --> 00:17:29,300
you can find it and right now with the

00:17:26,690 --> 00:17:31,640
development we're doing we're kind of in

00:17:29,300 --> 00:17:35,090
the middle which is temporary whereas

00:17:31,640 --> 00:17:38,180
the CC and the bit service is in so what

00:17:35,090 --> 00:17:39,740
we have right now is like the CC still

00:17:38,180 --> 00:17:42,290
receives all the uploads and then

00:17:39,740 --> 00:17:44,330
relating that to the bit service and

00:17:42,290 --> 00:17:47,630
then the bit service really relating

00:17:44,330 --> 00:17:50,330
that with the storage implementation and

00:17:47,630 --> 00:17:52,610
the blobstore that's kind of making sure

00:17:50,330 --> 00:17:54,470
we're really covering all the paths but

00:17:52,610 --> 00:17:56,899
that will go away we're not adding

00:17:54,470 --> 00:17:59,510
something in the flow in between it's

00:17:56,899 --> 00:18:06,490
just for the end states that we can

00:17:59,510 --> 00:18:09,950
bypass that so challenges we faced I

00:18:06,490 --> 00:18:14,179
think the biggest challenge was fork or

00:18:09,950 --> 00:18:16,100
is fork because on the one hand it's

00:18:14,179 --> 00:18:18,370
library which makes a lot of things when

00:18:16,100 --> 00:18:21,639
dealing with the storage backends easier

00:18:18,370 --> 00:18:24,019
but on the other hand it has a lot of

00:18:21,639 --> 00:18:27,230
implementations for different storage

00:18:24,019 --> 00:18:29,090
providers and that implementation how

00:18:27,230 --> 00:18:33,019
you can configure that right now is

00:18:29,090 --> 00:18:35,059
leaked outside in the deployment

00:18:33,019 --> 00:18:37,580
manifest and you can for your storage

00:18:35,059 --> 00:18:41,360
implementation put in whatever you want

00:18:37,580 --> 00:18:44,450
there so for us as a team when we simply

00:18:41,360 --> 00:18:46,309
want to answer the question what storage

00:18:44,450 --> 00:18:48,830
bag and implementations do we need to

00:18:46,309 --> 00:18:51,740
cover we can't answer that question

00:18:48,830 --> 00:18:56,269
today because everyone can pick what he

00:18:51,740 --> 00:18:58,010
wants or the question what features of

00:18:56,269 --> 00:18:59,809
those storage backends do we need to

00:18:58,010 --> 00:19:02,720
support or do we need to cover in our

00:18:59,809 --> 00:19:06,559
tests we can't answer that because today

00:19:02,720 --> 00:19:08,600
everyone can use whatever is there in

00:19:06,559 --> 00:19:11,389
terms of novel and configuration and

00:19:08,600 --> 00:19:15,220
this missing abstraction what Todd

00:19:11,389 --> 00:19:20,230
foundry has itself supports that's real

00:19:15,220 --> 00:19:20,230
challenge for testing or for providing

00:19:20,590 --> 00:19:28,100
feature equality and that's I guess

00:19:24,380 --> 00:19:30,380
that's what's supposed to go away and

00:19:28,100 --> 00:19:34,429
another thing was like there is four

00:19:30,380 --> 00:19:36,649
blobs not really carved out API so some

00:19:34,429 --> 00:19:39,860
endpoints are visible on on the clock

00:19:36,649 --> 00:19:41,899
controller and some other things for the

00:19:39,860 --> 00:19:44,059
bits handling which now get visible on

00:19:41,899 --> 00:19:47,000
the bit servers are not really available

00:19:44,059 --> 00:19:50,210
as api on on the cloud controller for

00:19:47,000 --> 00:19:52,880
instance if you delete an app it will go

00:19:50,210 --> 00:19:54,679
and delete also the package the droplet

00:19:52,880 --> 00:19:57,559
but that's nothing which is outside

00:19:54,679 --> 00:19:58,130
surface on the api today that's only in

00:19:57,559 --> 00:19:59,650
the

00:19:58,130 --> 00:20:04,790
the cloud controller code and this

00:19:59,650 --> 00:20:08,390
hidden API will become surfaced with a

00:20:04,790 --> 00:20:10,460
with a bit service and also one thing

00:20:08,390 --> 00:20:13,880
which was quite interesting there is

00:20:10,460 --> 00:20:15,890
that all of the five resources they're

00:20:13,880 --> 00:20:18,050
handled differently like the key

00:20:15,890 --> 00:20:21,530
generation for the resources some are

00:20:18,050 --> 00:20:24,050
only shots some all some are showers of

00:20:21,530 --> 00:20:27,580
other entities and appended a stack name

00:20:24,050 --> 00:20:30,590
or other things so everything is

00:20:27,580 --> 00:20:38,990
different there there's no clear

00:20:30,590 --> 00:20:41,090
structure today another real challenge

00:20:38,990 --> 00:20:43,220
was while we were doing that also the

00:20:41,090 --> 00:20:46,280
cloud control the copy team was

00:20:43,220 --> 00:20:48,830
continuing to work and for instance they

00:20:46,280 --> 00:20:52,850
replaced the local blob stirrer and if

00:20:48,830 --> 00:20:54,890
as implementation was vApp Tov which on

00:20:52,850 --> 00:20:56,540
the one hand was really cool seeing what

00:20:54,890 --> 00:20:58,490
they did there because they also cleaned

00:20:56,540 --> 00:21:00,440
up some code and introduced some

00:20:58,490 --> 00:21:02,930
extraction like blob centers and things

00:21:00,440 --> 00:21:05,930
like that but we also needed to catch up

00:21:02,930 --> 00:21:08,390
with all the web theft changes and

00:21:05,930 --> 00:21:11,570
poured our code forward to that so that

00:21:08,390 --> 00:21:15,220
was challenging working on the same

00:21:11,570 --> 00:21:19,040
thing from two different angles and I

00:21:15,220 --> 00:21:21,560
think the last but also biggest

00:21:19,040 --> 00:21:24,350
challenge was in the state were right

00:21:21,560 --> 00:21:27,380
now we don't want to break any contracts

00:21:24,350 --> 00:21:29,210
or on any any other components we just

00:21:27,380 --> 00:21:33,230
want to keep it working so we're not

00:21:29,210 --> 00:21:36,110
doing any changes to the C lie or Jagger

00:21:33,230 --> 00:21:39,740
or anything to make it more efficient or

00:21:36,110 --> 00:21:41,930
to clean things up but that may may come

00:21:39,740 --> 00:21:45,860
as soon as we were done with a bit

00:21:41,930 --> 00:21:48,830
service and it is integrated in the

00:21:45,860 --> 00:21:51,280
cloud controller we really try to avoid

00:21:48,830 --> 00:21:54,950
any breaking changes to existing

00:21:51,280 --> 00:21:57,260
components so far and with that I'll

00:21:54,950 --> 00:21:59,889
hand it back to Simon to take you

00:21:57,260 --> 00:22:05,570
through the rest

00:21:59,889 --> 00:22:08,359
okay so let me try to do the last part

00:22:05,570 --> 00:22:10,879
of the presentation telling you what did

00:22:08,359 --> 00:22:14,599
we learn right so there are basically

00:22:10,879 --> 00:22:16,279
two things that that we learned so the

00:22:14,599 --> 00:22:19,399
first one is kind of like a cultural

00:22:16,279 --> 00:22:21,169
aspect which is which is something that

00:22:19,399 --> 00:22:23,479
we learn from working together and and

00:22:21,169 --> 00:22:26,479
the the interesting piece the most

00:22:23,479 --> 00:22:28,429
interesting piece about this is company

00:22:26,479 --> 00:22:31,639
cultures are quite different and it in

00:22:28,429 --> 00:22:34,129
reality being probably one of the one of

00:22:31,639 --> 00:22:36,679
the projects where this we have tried to

00:22:34,129 --> 00:22:38,539
do this for the first time for real we

00:22:36,679 --> 00:22:42,379
had a lot of friction in the beginning

00:22:38,539 --> 00:22:44,419
about adjusting our working modes to to

00:22:42,379 --> 00:22:46,339
get going it that took a while

00:22:44,419 --> 00:22:49,219
so everybody who would like to it's not

00:22:46,339 --> 00:22:50,899
impossible to overcome but it really you

00:22:49,219 --> 00:22:54,259
need to you need to work through a bunch

00:22:50,899 --> 00:22:56,950
of things to adopt the style of working

00:22:54,259 --> 00:22:59,869
and and get everything up and running

00:22:56,950 --> 00:23:02,899
the second really interesting lesson

00:22:59,869 --> 00:23:06,349
that we learned is since we're located

00:23:02,899 --> 00:23:09,139
in Germany and in the UK we are

00:23:06,349 --> 00:23:14,539
basically do remote pairing quite a lot

00:23:09,139 --> 00:23:16,279
of the time so we have most of the time

00:23:14,539 --> 00:23:17,960
someone from Germany is apparently

00:23:16,279 --> 00:23:19,219
someone in the UK and of course there

00:23:17,960 --> 00:23:21,109
are days where people are pairing

00:23:19,219 --> 00:23:24,259
locally but but most of the time we

00:23:21,109 --> 00:23:26,419
actually do remote pairing it's a high

00:23:24,259 --> 00:23:28,219
degree and it actually can work so

00:23:26,419 --> 00:23:30,499
whoever has been asking whether this is

00:23:28,219 --> 00:23:31,820
a feasible thing it actually is it's I

00:23:30,499 --> 00:23:35,299
didn't think it in the beginning but it

00:23:31,820 --> 00:23:37,429
worked out not so bad and and the third

00:23:35,299 --> 00:23:40,099
thing is I mean given that we're in

00:23:37,429 --> 00:23:41,330
Europe and the large part of the Cloud

00:23:40,099 --> 00:23:42,769
Foundry team is sitting here in San

00:23:41,330 --> 00:23:44,330
Francisco we always have to bridge like

00:23:42,769 --> 00:23:46,609
nine hours time difference which is

00:23:44,330 --> 00:23:49,039
making any synchronization it's required

00:23:46,609 --> 00:23:50,409
sometimes really hard but that that

00:23:49,039 --> 00:23:52,700
worked out as well

00:23:50,409 --> 00:23:57,979
so coming to the technical side of

00:23:52,700 --> 00:24:01,729
things I think the main lesson that we

00:23:57,979 --> 00:24:03,619
learned is you can split the CC into

00:24:01,729 --> 00:24:05,929
micro services I think that's that's the

00:24:03,619 --> 00:24:08,029
thing to take away from from from the

00:24:05,929 --> 00:24:10,639
from this effort or from this work that

00:24:08,029 --> 00:24:13,460
we've been doing it is hard though it's

00:24:10,639 --> 00:24:15,409
not it's not it's not that easy cuz

00:24:13,460 --> 00:24:17,210
first and foremost if you try to do and

00:24:15,409 --> 00:24:19,539
let the effort like we did you have to

00:24:17,210 --> 00:24:24,250
each of the resources works differently

00:24:19,539 --> 00:24:27,049
and and particularly around the v2 API

00:24:24,250 --> 00:24:29,840
the functionality is really distributed

00:24:27,049 --> 00:24:31,460
across many places because a lot of that

00:24:29,840 --> 00:24:34,490
stuff has been a little bit organically

00:24:31,460 --> 00:24:36,049
grown and you have to rip out things

00:24:34,490 --> 00:24:39,110
where you don't think you've wanted rip

00:24:36,049 --> 00:24:41,179
out things and we had a discussion in

00:24:39,110 --> 00:24:42,980
one of the retros that that said if we

00:24:41,179 --> 00:24:44,750
would have been if we would have done

00:24:42,980 --> 00:24:46,250
that on v3 it would have probably been

00:24:44,750 --> 00:24:48,740
easier because it would have been a much

00:24:46,250 --> 00:24:51,470
cleaner ask model but the matter of fact

00:24:48,740 --> 00:24:54,460
we needed to do it in v2 so we had to go

00:24:51,470 --> 00:24:57,950
to her we had to learn that the hard way

00:24:54,460 --> 00:24:59,899
so let me quickly explain to you how

00:24:57,950 --> 00:25:01,070
does the bit service now affect you and

00:24:59,899 --> 00:25:02,960
how does it help you it's kind of like

00:25:01,070 --> 00:25:06,740
the slide that probably many of you have

00:25:02,960 --> 00:25:09,169
been waiting for so let's start that if

00:25:06,740 --> 00:25:10,399
you are a cloud foundry operator so

00:25:09,169 --> 00:25:14,000
you're running your own cloud foundry

00:25:10,399 --> 00:25:16,309
instance today how would the bit service

00:25:14,000 --> 00:25:18,679
help you so the first thing is it would

00:25:16,309 --> 00:25:21,320
help you because you would be able to

00:25:18,679 --> 00:25:23,659
independently scale the cloud controller

00:25:21,320 --> 00:25:29,690
and a bit service for these types of

00:25:23,659 --> 00:25:31,490
operations and thereby be able to you

00:25:29,690 --> 00:25:36,289
know operate your currently in a

00:25:31,490 --> 00:25:37,429
different way the problem that you're

00:25:36,289 --> 00:25:40,429
gonna have is that there's going to be

00:25:37,429 --> 00:25:42,049
one more or n more VMs that you need to

00:25:40,429 --> 00:25:43,850
take care of you need to monitor them

00:25:42,049 --> 00:25:45,710
and so on and so forth so that's what

00:25:43,850 --> 00:25:49,760
you buy by getting this additional

00:25:45,710 --> 00:25:53,419
flexibility and for everybody out there

00:25:49,760 --> 00:25:57,710
who's using anything else than s3 or

00:25:53,419 --> 00:26:01,130
Swift as the actual back-end please come

00:25:57,710 --> 00:26:05,980
to me and talk to me the reason why I

00:26:01,130 --> 00:26:10,130
say this is we are in the process of

00:26:05,980 --> 00:26:12,440
maybe removing font from the bit service

00:26:10,130 --> 00:26:16,460
configuration but we don't want to break

00:26:12,440 --> 00:26:19,220
anybody so we would like to have s3 or

00:26:16,460 --> 00:26:21,230
Swift as the supported backends and we

00:26:19,220 --> 00:26:23,179
might want to be a white want to add one

00:26:21,230 --> 00:26:23,960
or two others but please talk to me if

00:26:23,179 --> 00:26:26,270
you--if you

00:26:23,960 --> 00:26:30,800
and if you have using anything else than

00:26:26,270 --> 00:26:33,310
s3 or thrift as your as your back-end if

00:26:30,800 --> 00:26:35,900
you are an application developer you

00:26:33,310 --> 00:26:37,430
hopefully going to see the existence of

00:26:35,900 --> 00:26:38,840
a bit service by the cloud control are

00:26:37,430 --> 00:26:41,830
getting more responsive because we're

00:26:38,840 --> 00:26:45,710
gonna offload all the time consuming

00:26:41,830 --> 00:26:47,510
bits operations into its own service and

00:26:45,710 --> 00:26:48,920
that will result in a more efficient

00:26:47,510 --> 00:26:51,110
handling of the bits which hopefully

00:26:48,920 --> 00:26:55,550
you'll see as faster push times faster

00:26:51,110 --> 00:26:57,650
uploads those that sort of thing and if

00:26:55,550 --> 00:26:59,120
you are a cloud family developer so

00:26:57,650 --> 00:27:01,850
you're working on any other of the cloud

00:26:59,120 --> 00:27:04,910
fabric components you are finally

00:27:01,850 --> 00:27:07,100
getting a clean api to code against all

00:27:04,910 --> 00:27:08,900
your bit service operations so when you

00:27:07,100 --> 00:27:11,690
wanna upload download a package

00:27:08,900 --> 00:27:13,760
thinking of diego thinking of any other

00:27:11,690 --> 00:27:16,640
components that's something that you

00:27:13,760 --> 00:27:18,350
that you get out of this what are the

00:27:16,640 --> 00:27:20,810
next things what are the things that

00:27:18,350 --> 00:27:23,630
we're planning to do next so the first

00:27:20,810 --> 00:27:25,580
and immediate next step now is we're

00:27:23,630 --> 00:27:27,320
going to release the bit service and

00:27:25,580 --> 00:27:29,810
hopefully make it a default in the CF

00:27:27,320 --> 00:27:31,790
release so we are working on currently

00:27:29,810 --> 00:27:34,880
the incubation is working on a private

00:27:31,790 --> 00:27:37,750
fork but we are close very close to

00:27:34,880 --> 00:27:42,380
merging that fork back into the into the

00:27:37,750 --> 00:27:45,530
into the CF release itself we have to do

00:27:42,380 --> 00:27:48,020
a little bit more things like a little

00:27:45,530 --> 00:27:52,010
bit more operational statistics and in a

00:27:48,020 --> 00:27:54,320
bunch of chores on housekeeping before

00:27:52,010 --> 00:27:57,170
we can before we finally think we're

00:27:54,320 --> 00:27:58,450
happy but but that that's also one of

00:27:57,170 --> 00:28:00,860
the things that we want to add

00:27:58,450 --> 00:28:04,670
we'd like to become independent a fork

00:28:00,860 --> 00:28:06,680
like I just said which who might affect

00:28:04,670 --> 00:28:09,280
one or the other of you so please come

00:28:06,680 --> 00:28:12,020
and see me if you are affected by this

00:28:09,280 --> 00:28:13,820
then we would like to implement a more

00:28:12,020 --> 00:28:15,830
efficient resource matching there have

00:28:13,820 --> 00:28:17,840
been two spikes or two prototypes being

00:28:15,830 --> 00:28:21,290
done one for Java applications and one

00:28:17,840 --> 00:28:23,240
for four for other applications and we

00:28:21,290 --> 00:28:24,650
have a bunch of additional thoughts and

00:28:23,240 --> 00:28:26,480
how we can make recess matching more

00:28:24,650 --> 00:28:28,070
efficient so that's certainly something

00:28:26,480 --> 00:28:30,890
that will give additional performance

00:28:28,070 --> 00:28:34,850
gains and we'd like to tackle that as

00:28:30,890 --> 00:28:37,400
well then we would like to probably

00:28:34,850 --> 00:28:39,950
re-implement a bit service in go lang

00:28:37,400 --> 00:28:43,220
just because of also performance reasons

00:28:39,950 --> 00:28:45,650
and there was one request already by the

00:28:43,220 --> 00:28:48,050
community asking whether we could add

00:28:45,650 --> 00:28:50,420
additional functionalities like backing

00:28:48,050 --> 00:28:51,740
up the whole blobstore in one shot so

00:28:50,420 --> 00:28:55,450
that's certainly something to think

00:28:51,740 --> 00:29:00,500
about and with that I'm gonna go over to

00:28:55,450 --> 00:29:02,360
the Q&A and maybe some of you or one of

00:29:00,500 --> 00:29:05,000
you who has any other ideas to talk

00:29:02,360 --> 00:29:07,010
about the presentation will be

00:29:05,000 --> 00:29:08,630
downloadable and it has a bunch of links

00:29:07,010 --> 00:29:10,220
to the project if you want to take a

00:29:08,630 --> 00:29:13,820
look at it so you wanna you can't look

00:29:10,220 --> 00:29:16,790
at the at the cd-i pipeline you are able

00:29:13,820 --> 00:29:18,620
to look at tracker and that get if you

00:29:16,790 --> 00:29:19,940
want to take a look at the code with

00:29:18,620 --> 00:29:22,820
that thank you very much for your

00:29:19,940 --> 00:29:27,910
attention and the floor is open for

00:29:22,820 --> 00:29:27,910
question if there are any

00:29:36,659 --> 00:29:45,210
no we haven't so the short answer is no

00:29:40,470 --> 00:29:48,210
we haven't and the reason is because

00:29:45,210 --> 00:29:50,580
today a docker image is transparent to

00:29:48,210 --> 00:29:52,529
the cloud controller so what would be

00:29:50,580 --> 00:29:57,809
the use case when you want to expose it

00:29:52,529 --> 00:29:59,879
directly I mean if you if you compile it

00:29:57,809 --> 00:30:01,919
into if you compile it into a droplet at

00:29:59,879 --> 00:30:03,269
the end of the day or something we could

00:30:01,919 --> 00:30:09,679
think about doing something like that

00:30:03,269 --> 00:30:09,679
it's a good idea more questions

00:30:19,710 --> 00:30:25,500
we have been hoping that we can do most

00:30:22,890 --> 00:30:28,260
of it through redirects so that this

00:30:25,500 --> 00:30:30,660
that the CLI will just go to the CC and

00:30:28,260 --> 00:30:33,450
the CC will send a redirect but that

00:30:30,660 --> 00:30:34,920
might not be the case in every that

00:30:33,450 --> 00:30:35,910
might not be the case for all cases so

00:30:34,920 --> 00:30:37,800
yes we are

00:30:35,910 --> 00:30:43,050
I started discussing with discussions

00:30:37,800 --> 00:31:01,020
with TS I'm changing to the CLI curious

00:30:43,050 --> 00:31:02,370
why scalability well it's all platform

00:31:01,020 --> 00:31:05,910
components

00:31:02,370 --> 00:31:08,010
it lives in portion is a service which

00:31:05,910 --> 00:31:10,350
is Posche deployed you can Co locate it

00:31:08,010 --> 00:31:14,460
on on VMs it doesn't have to be on its

00:31:10,350 --> 00:31:21,810
own VM but it's a platform service so it

00:31:14,460 --> 00:31:23,780
lives in port or not adapt okay any more

00:31:21,810 --> 00:31:25,980
questions

00:31:23,780 --> 00:31:28,220
more people are coming in so you're all

00:31:25,980 --> 00:31:28,220

YouTube URL: https://www.youtube.com/watch?v=wASTG2lb_c4


