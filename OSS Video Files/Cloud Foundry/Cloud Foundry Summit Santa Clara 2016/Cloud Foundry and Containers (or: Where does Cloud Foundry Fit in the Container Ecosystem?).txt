Title: Cloud Foundry and Containers (or: Where does Cloud Foundry Fit in the Container Ecosystem?)
Publication date: 2016-05-29
Playlist: Cloud Foundry Summit Santa Clara 2016
Description: 
	While some other platforms you may have heard of have containers front-and-center as the main user experience, Cloud Foundry uses containers under the covers to provide a rich user experience ("push my code, I don't care how"!). The container engine powering Cloud Foundry is called Garden and pre-dates most of the big name container technologies now in the market. In this talk, you'll find out what makes Garden different from other container technologies (including detailed comparisons of other container engines), and in what ways it's just the same. 

Julz Friedman
IBM

George Lestaris
Software Engineer, Pivotal
George Lestaris is a software engineer working at Pivotal in the Garden team, the container runtime of Cloud Foundry. Before Pivotal, he spent time with web programming, high throughput computing and cloud computing research. He has given talks before in CHEP 2013 regarding virtual clusters and their use in high-energy physics and, most recently, in PyCon UK 2015 on interactive cloud experimentation.
Captions: 
	00:00:00,060 --> 00:00:03,060
all right I think we're gonna get

00:00:01,140 --> 00:00:06,470
started people are still kind of coming

00:00:03,060 --> 00:00:08,970
in the back but the rooms full so I

00:00:06,470 --> 00:00:14,549
guess people have heard of containers

00:00:08,970 --> 00:00:17,900
then or everyone's here for Cloud

00:00:14,549 --> 00:00:23,119
Foundry which is probably more people so

00:00:17,900 --> 00:00:23,119
containers versus or and Cloud Foundry

00:00:23,330 --> 00:00:28,740
I'm treating Freedman I were Fri bien

00:00:25,710 --> 00:00:35,000
this is George works for pivotal we are

00:00:28,740 --> 00:00:40,020
gardeners we want to talk to you about

00:00:35,000 --> 00:00:43,200
five things today the first three go

00:00:40,020 --> 00:00:44,610
quite quickly the first is what's the

00:00:43,200 --> 00:00:47,700
cloud what are we talking about we talk

00:00:44,610 --> 00:00:49,469
about clouds the second is what's the

00:00:47,700 --> 00:00:52,230
foundry which I'm sure everyone has been

00:00:49,469 --> 00:00:54,649
wondering what do we mean by foundry

00:00:52,230 --> 00:00:56,850
what's the value-add of cloud foundry

00:00:54,649 --> 00:00:59,219
and the third thing is what is a

00:00:56,850 --> 00:01:02,370
container what what is this container

00:00:59,219 --> 00:01:05,970
concept and then we're going to try and

00:01:02,370 --> 00:01:08,220
suggest that Kyle foundry is actually an

00:01:05,970 --> 00:01:09,630
amazing way to run containers so

00:01:08,220 --> 00:01:12,299
everyone thinks of cloud foundry is this

00:01:09,630 --> 00:01:14,270
you push code and contain this is just

00:01:12,299 --> 00:01:16,350
an implementation detail at the bottom

00:01:14,270 --> 00:01:18,060
but we're going to try and suggest that

00:01:16,350 --> 00:01:21,570
actually crowd foundry is a pretty great

00:01:18,060 --> 00:01:23,369
way to run containers too and then we're

00:01:21,570 --> 00:01:24,720
going to situate cloud foundry and

00:01:23,369 --> 00:01:29,820
garden against some of the other things

00:01:24,720 --> 00:01:32,299
it's a kind of summary so let's get

00:01:29,820 --> 00:01:35,400
started so we need to talk about cloud

00:01:32,299 --> 00:01:38,939
and to do that we have to go back in

00:01:35,400 --> 00:01:43,320
time a little bit on that back in time

00:01:38,939 --> 00:01:45,119
right so in it with it's now the year

00:01:43,320 --> 00:01:48,060
2000 or something and someone's had a

00:01:45,119 --> 00:01:52,170
brilliant idea for clouds and what that

00:01:48,060 --> 00:01:54,360
meant was you're a user and you say to

00:01:52,170 --> 00:01:57,119
the cloud hey give me a server and the

00:01:54,360 --> 00:01:59,969
cloud says all right here as a server

00:01:57,119 --> 00:02:01,649
right and that was actually pretty great

00:01:59,969 --> 00:02:03,450
right that's what we meant by cloud for

00:02:01,649 --> 00:02:04,799
a little while and that made lots of

00:02:03,450 --> 00:02:09,929
people those money and it made things

00:02:04,799 --> 00:02:11,940
way simpler pretty awesome but then we

00:02:09,929 --> 00:02:13,890
realized that actually there was a lot

00:02:11,940 --> 00:02:16,590
more that we could do for users right

00:02:13,890 --> 00:02:18,780
hey give me a server wasn't the end of

00:02:16,590 --> 00:02:20,310
that story and what we actually wanted

00:02:18,780 --> 00:02:21,630
to do is build something on top that

00:02:20,310 --> 00:02:24,060
made life a lot simpler that let people

00:02:21,630 --> 00:02:26,490
stop worrying about all the things that

00:02:24,060 --> 00:02:29,550
you have to do after hey give me a

00:02:26,490 --> 00:02:31,320
server right and for the sake of

00:02:29,550 --> 00:02:33,750
argument let's call that a foundry or a

00:02:31,320 --> 00:02:36,780
pass right the value add on top of cloud

00:02:33,750 --> 00:02:38,370
and it's a different abstraction right

00:02:36,780 --> 00:02:41,220
so I used two instead of saying give me

00:02:38,370 --> 00:02:43,590
a server it says here's my code and the

00:02:41,220 --> 00:02:47,580
cloud says great I'll deal with that

00:02:43,590 --> 00:02:49,050
right it's a different direction and

00:02:47,580 --> 00:02:50,940
behind the scenes the cloud could deal

00:02:49,050 --> 00:02:52,820
with packaging your middleware and OS

00:02:50,940 --> 00:02:55,050
management and logging and metrics and

00:02:52,820 --> 00:02:56,700
services and health checking and scaling

00:02:55,050 --> 00:02:59,130
and patching and on and on and on by all

00:02:56,700 --> 00:03:03,900
the things you need after hey give me a

00:02:59,130 --> 00:03:06,270
server but at the back end what we were

00:03:03,900 --> 00:03:08,430
doing is we were saying hey give me a

00:03:06,270 --> 00:03:10,800
server right and the cloud was saying

00:03:08,430 --> 00:03:13,080
right here's your server and we still

00:03:10,800 --> 00:03:14,940
had to figure out packaging and

00:03:13,080 --> 00:03:17,370
middleware and OS management and logging

00:03:14,940 --> 00:03:18,959
and metrics and services and on and on

00:03:17,370 --> 00:03:20,850
and on right there was still a lot of

00:03:18,959 --> 00:03:24,870
complexity for us to actually implement

00:03:20,850 --> 00:03:28,739
one of these things so now we need to

00:03:24,870 --> 00:03:30,120
talk about contains right because we

00:03:28,739 --> 00:03:31,680
needed to make this easy we needed to

00:03:30,120 --> 00:03:35,040
figure out how to run this on the back

00:03:31,680 --> 00:03:42,989
end in a way that made sense so what is

00:03:35,040 --> 00:03:45,060
a container basically container is an OS

00:03:42,989 --> 00:03:47,459
image so our package bundled OS image

00:03:45,060 --> 00:03:49,739
plus some metadata that tells you how to

00:03:47,459 --> 00:03:52,350
actually run that image and you bundle

00:03:49,739 --> 00:03:55,590
those together into something that you

00:03:52,350 --> 00:03:58,230
can ship around and deploy right so then

00:03:55,590 --> 00:04:00,060
you can take that bundled OS image with

00:03:58,230 --> 00:04:00,540
the methods you want to run in that

00:04:00,060 --> 00:04:03,720
image

00:04:00,540 --> 00:04:05,730
I move it around and have it run and

00:04:03,720 --> 00:04:08,670
what does that mean it means we can now

00:04:05,730 --> 00:04:13,470
say to the cloud here is a container and

00:04:08,670 --> 00:04:17,340
the cloud can say okay and suddenly

00:04:13,470 --> 00:04:19,019
we've dealt with OS management and

00:04:17,340 --> 00:04:21,140
packaging a middleware that's now simple

00:04:19,019 --> 00:04:23,700
we can let that layer take care of that

00:04:21,140 --> 00:04:26,099
but we do still need to worry about

00:04:23,700 --> 00:04:26,760
logging and metrics and services and

00:04:26,099 --> 00:04:28,440
health checking

00:04:26,760 --> 00:04:32,250
scaling and patching and all those other

00:04:28,440 --> 00:04:37,170
things that you need after here is a

00:04:32,250 --> 00:04:39,930
container actually just want to point

00:04:37,170 --> 00:04:41,280
this thing this this out what we really

00:04:39,930 --> 00:04:43,260
talked about we talked about push code

00:04:41,280 --> 00:04:45,210
or not containers we didn't know the

00:04:43,260 --> 00:04:47,100
word yes but that's serverless of what

00:04:45,210 --> 00:04:49,890
we're talking about is you don't care

00:04:47,100 --> 00:04:52,140
about all this stuff back here you're

00:04:49,890 --> 00:04:53,760
just pushing code that's really what

00:04:52,140 --> 00:04:56,670
serverless means but now the word has

00:04:53,760 --> 00:04:58,590
come back around but maybe you actually

00:04:56,670 --> 00:05:00,900
do want to care because for some

00:04:58,590 --> 00:05:03,300
applications you do want to go down to

00:05:00,900 --> 00:05:06,390
that lower level and you want to care

00:05:03,300 --> 00:05:09,450
about some of the lower level detail so

00:05:06,390 --> 00:05:11,900
maybe you actually I've no idea what

00:05:09,450 --> 00:05:11,900
just happened

00:05:16,770 --> 00:05:22,800
never trust technology maybe you

00:05:19,740 --> 00:05:24,270
actually want to push containers right

00:05:22,800 --> 00:05:26,539
maybe you do want to go that bottom

00:05:24,270 --> 00:05:28,439
layer because that will solve the OS

00:05:26,539 --> 00:05:30,479
management package maybe you want to

00:05:28,439 --> 00:05:31,860
take care of those yourselves and you on

00:05:30,479 --> 00:05:33,900
the platform to still fight all those

00:05:31,860 --> 00:05:35,370
other things the logging the metrics the

00:05:33,900 --> 00:05:36,870
service is the hell check at the scaling

00:05:35,370 --> 00:05:38,729
the patching all those other things that

00:05:36,870 --> 00:05:40,259
go along with the platform but you want

00:05:38,729 --> 00:05:43,560
to deal with that top bit you want to

00:05:40,259 --> 00:05:44,939
provide the container day well actually

00:05:43,560 --> 00:05:47,039
turns out we don't have to push hard

00:05:44,939 --> 00:05:48,719
right we've built a really great system

00:05:47,039 --> 00:05:50,909
for moving around containers we were

00:05:48,719 --> 00:05:53,460
just using it to implement the platform

00:05:50,909 --> 00:05:56,879
as-a-service bit but CF is actually a

00:05:53,460 --> 00:05:59,879
great container Orchestrator we can use

00:05:56,879 --> 00:06:02,159
CF as a container Orchestrator and have

00:05:59,879 --> 00:06:05,509
all of the advantages of CF and that's

00:06:02,159 --> 00:06:05,509
what George is now going to demonstrate

00:06:10,360 --> 00:06:18,449
all right he's the font-size good for

00:06:13,750 --> 00:06:34,259
those in the back make it bigger

00:06:18,449 --> 00:06:36,939
how is it now sure alright so let's see

00:06:34,259 --> 00:06:39,610
so we're gonna start by building a

00:06:36,939 --> 00:06:44,050
docker image that can be used as a cloth

00:06:39,610 --> 00:06:50,590
on your application and oops that's

00:06:44,050 --> 00:06:52,780
going to burst what live demos we're bad

00:06:50,590 --> 00:06:55,300
I mean we recorded them source about

00:06:52,780 --> 00:06:57,159
apparently alright so we're gonna build

00:06:55,300 --> 00:06:58,300
the frame edge and then we're gonna use

00:06:57,159 --> 00:07:01,090
it to spawn containers from cloud

00:06:58,300 --> 00:07:02,830
foundry and this is not only a feature

00:07:01,090 --> 00:07:07,750
this is something that was sipped last

00:07:02,830 --> 00:07:09,400
year with Diego and it's just useful to

00:07:07,750 --> 00:07:12,819
realize how you can basically run

00:07:09,400 --> 00:07:15,819
containers with Cloud Foundry so I'm

00:07:12,819 --> 00:07:17,229
just having a my own directory and I'm

00:07:15,819 --> 00:07:20,650
going to start by showing you this

00:07:17,229 --> 00:07:22,029
docker image I built it's under a good

00:07:20,650 --> 00:07:25,479
hairy people under my username so you

00:07:22,029 --> 00:07:27,430
can find it if you want and this docker

00:07:25,479 --> 00:07:29,289
image is basically having two main files

00:07:27,430 --> 00:07:30,969
the first one is the optic view I this

00:07:29,289 --> 00:07:32,919
is a Python application it's a very

00:07:30,969 --> 00:07:35,020
simple file we'll see it right after and

00:07:32,919 --> 00:07:37,870
the second one is a docker file so let's

00:07:35,020 --> 00:07:39,819
look at the app of the why as I said is

00:07:37,870 --> 00:07:42,550
a very simple patent application in the

00:07:39,819 --> 00:07:44,919
the main important thing here is that it

00:07:42,550 --> 00:07:46,719
prints these two environment variables

00:07:44,919 --> 00:07:49,210
so these are corresponding environment

00:07:46,719 --> 00:07:52,270
variables the first one is a random

00:07:49,210 --> 00:07:53,740
unique ID that Yeager assigns to every

00:07:52,270 --> 00:07:55,569
application there every application

00:07:53,740 --> 00:07:58,180
instance the second one is the

00:07:55,569 --> 00:08:00,969
application index the instance index

00:07:58,180 --> 00:08:04,199
sorry this is Vera based index of the

00:08:00,969 --> 00:08:09,759
instance within the list of instances

00:08:04,199 --> 00:08:10,560
the docker file of this image is very

00:08:09,759 --> 00:08:14,199
simple as well

00:08:10,560 --> 00:08:17,370
so a docker file is basically describing

00:08:14,199 --> 00:08:20,080
a taco image it's the steps docker will

00:08:17,370 --> 00:08:23,630
run will execute in order to build your

00:08:20,080 --> 00:08:26,900
image and every line in this file is

00:08:23,630 --> 00:08:32,330
but dr. cohle's layer so the first layer

00:08:26,900 --> 00:08:35,300
of this simple image is a Python 3 we

00:08:32,330 --> 00:08:37,099
also call it a base layer so it's using

00:08:35,300 --> 00:08:38,810
Python 3 the second one is installing

00:08:37,099 --> 00:08:41,030
flask that's of web framework I'm using

00:08:38,810 --> 00:08:43,760
and third one is adding your code so

00:08:41,030 --> 00:08:45,410
this is the step where I'm using only

00:08:43,760 --> 00:08:47,930
single file my code is a single file but

00:08:45,410 --> 00:08:50,510
you could imagine that this is like your

00:08:47,930 --> 00:08:53,120
whole application ER and the last one

00:08:50,510 --> 00:08:56,360
the last line is defining the end point

00:08:53,120 --> 00:09:00,380
this is what tells Diego what to run

00:08:56,360 --> 00:09:02,690
when it spawns a container this is the

00:09:00,380 --> 00:09:04,820
whole CF up there's there are no young

00:09:02,690 --> 00:09:09,050
files there will be no source code

00:09:04,820 --> 00:09:11,690
uploading this is it so let's build and

00:09:09,050 --> 00:09:13,700
upload this image so building is

00:09:11,690 --> 00:09:16,400
basically I said executing all these

00:09:13,700 --> 00:09:17,930
steps there are four lines in the doctor

00:09:16,400 --> 00:09:20,060
files that are four steps in in the

00:09:17,930 --> 00:09:22,190
building process and uploading will

00:09:20,060 --> 00:09:24,800
upload all this different layers into

00:09:22,190 --> 00:09:26,210
docker hub dr. have is a public register

00:09:24,800 --> 00:09:27,800
for docker images and this is what class

00:09:26,210 --> 00:09:33,020
foundry also gives by default to

00:09:27,800 --> 00:09:35,750
download occurrences the the interesting

00:09:33,020 --> 00:09:37,970
thing here is that layers are cast so if

00:09:35,750 --> 00:09:40,040
you change your application code we if

00:09:37,970 --> 00:09:41,240
you remember we replace our application

00:09:40,040 --> 00:09:42,680
code in the third line that's the third

00:09:41,240 --> 00:09:44,510
layer so if you change your application

00:09:42,680 --> 00:09:46,220
code you don't have to rebuild the whole

00:09:44,510 --> 00:09:47,540
image and also you don't have to upload

00:09:46,220 --> 00:09:52,070
the whole image you will only apply all

00:09:47,540 --> 00:09:53,930
the layers other chains next thing is

00:09:52,070 --> 00:09:57,170
I'm going to connect to my cloud foundry

00:09:53,930 --> 00:09:59,990
instance I'm using PCF dev for this demo

00:09:57,170 --> 00:10:01,760
and this is a virtual machine you can a

00:09:59,990 --> 00:10:05,090
vagrant virtual machine you can download

00:10:01,760 --> 00:10:06,470
and use in your laptop it's free

00:10:05,090 --> 00:10:08,570
although probably if you won't download

00:10:06,470 --> 00:10:14,090
you have to give people your he tells

00:10:08,570 --> 00:10:15,440
but you know it's free and yeah and I'm

00:10:14,090 --> 00:10:16,970
using in my lab debate and I'm using

00:10:15,440 --> 00:10:23,090
with 4 gigabytes of memory so it's not

00:10:16,970 --> 00:10:27,920
really heavy and and right yeah so we

00:10:23,090 --> 00:10:29,510
logged into our CF installation and we

00:10:27,920 --> 00:10:30,800
need to make sure that our CF

00:10:29,510 --> 00:10:32,330
installation supports

00:10:30,800 --> 00:10:34,310
running docker images and there is this

00:10:32,330 --> 00:10:36,290
feature flag called Diego docker which

00:10:34,310 --> 00:10:37,410
you have to make sure it's enabled this

00:10:36,290 --> 00:10:38,729
is not enabled in

00:10:37,410 --> 00:10:41,269
public installations and unable in

00:10:38,729 --> 00:10:43,829
pivotal webservice for instance because

00:10:41,269 --> 00:10:45,929
running arbitrary dilemmas this is not a

00:10:43,829 --> 00:10:51,599
good idea if your multi-tenant but in

00:10:45,929 --> 00:10:54,149
PCF dev is fine and we can then push our

00:10:51,599 --> 00:10:56,459
application so we're running the usual

00:10:54,149 --> 00:10:58,619
CF push command the difference here is

00:10:56,459 --> 00:11:00,629
that this is not applauding any source

00:10:58,619 --> 00:11:04,579
code this is not including any Ambu

00:11:00,629 --> 00:11:10,319
files and the command-line argument with

00:11:04,579 --> 00:11:13,229
C that specifies the image is - all and

00:11:10,319 --> 00:11:14,759
we don't need to tell it where which

00:11:13,229 --> 00:11:16,859
register the user said we'll use docker

00:11:14,759 --> 00:11:21,899
hub by default so this is just creating

00:11:16,859 --> 00:11:23,159
a container using this image right so if

00:11:21,899 --> 00:11:25,199
you do see of hubs we see there is a

00:11:23,159 --> 00:11:27,389
container is there is an application it

00:11:25,199 --> 00:11:32,159
has a single instance and it has a roud

00:11:27,389 --> 00:11:35,249
assigned to it let's test the endpoint

00:11:32,159 --> 00:11:38,369
so as we saw before all the application

00:11:35,249 --> 00:11:39,509
will just bring this to environment a

00:11:38,369 --> 00:11:41,220
surprise is here there's only one

00:11:39,509 --> 00:11:44,429
instance so the application index -

00:11:41,220 --> 00:11:46,079
sorry the instance index is zero so it

00:11:44,429 --> 00:11:48,359
will scale it let's create five of them

00:11:46,079 --> 00:11:49,619
and see what's happening so we're going

00:11:48,359 --> 00:11:52,139
to create five of them and hit the

00:11:49,619 --> 00:11:55,289
endpoint a couple of times and we're

00:11:52,139 --> 00:11:56,600
gonna get three different indexes so

00:11:55,289 --> 00:12:01,379
zero two and one

00:11:56,600 --> 00:12:04,529
so what we've seen so far is that you

00:12:01,379 --> 00:12:07,199
deploy the docker containers in the I go

00:12:04,529 --> 00:12:09,720
in cloud foundry and you get for free

00:12:07,199 --> 00:12:12,899
the load balance meant sorry log

00:12:09,720 --> 00:12:14,549
balancing so there is a route you send

00:12:12,899 --> 00:12:17,659
traffic throughout and astrology's and

00:12:14,549 --> 00:12:17,659
direct it into different containers

00:12:18,139 --> 00:12:24,449
there is a there's one environment in

00:12:20,970 --> 00:12:25,619
services with this this idea the

00:12:24,449 --> 00:12:28,049
advantage is that you get all the

00:12:25,619 --> 00:12:30,629
flexibility in managing your

00:12:28,049 --> 00:12:33,379
dependencies so you don't have to depend

00:12:30,629 --> 00:12:35,699
on build packs which in some cases cute

00:12:33,379 --> 00:12:37,709
the first disadvantage is that you can

00:12:35,699 --> 00:12:41,339
easily derail yourself from the 12

00:12:37,709 --> 00:12:43,609
factura idea so we all seen premises

00:12:41,339 --> 00:12:48,040
that you know they have multiple

00:12:43,609 --> 00:12:49,360
services and they can might write

00:12:48,040 --> 00:12:51,610
things might read data in The Container

00:12:49,360 --> 00:12:53,110
Store ads and this is not 12 factory job

00:12:51,610 --> 00:12:55,300
this is not what cotton is about and

00:12:53,110 --> 00:12:57,759
that can be problematic and the second

00:12:55,300 --> 00:12:59,860
disadvantages are since you are now in

00:12:57,759 --> 00:13:01,810
charge of building this locker image of

00:12:59,860 --> 00:13:03,490
of maintaining it of putting your code

00:13:01,810 --> 00:13:06,540
into it and sleeping eating how hungry

00:13:03,490 --> 00:13:10,440
we are also in charged on passing it so

00:13:06,540 --> 00:13:12,610
yesterday we heard johnston saying that

00:13:10,440 --> 00:13:14,709
software with known vulnerabilities is a

00:13:12,610 --> 00:13:16,540
is a big security threat and this is

00:13:14,709 --> 00:13:18,459
true and kyle found resolve is with both

00:13:16,540 --> 00:13:22,000
legs if you use docker images that's not

00:13:18,459 --> 00:13:23,740
gonna you're very in charge of this so

00:13:22,000 --> 00:13:26,199
let's go back there is no theme and this

00:13:23,740 --> 00:13:28,209
is container discretion called founders

00:13:26,199 --> 00:13:31,240
so we saw how you can deploy containers

00:13:28,209 --> 00:13:32,560
we show how it can load balancer

00:13:31,240 --> 00:13:35,199
trafficked within containers

00:13:32,560 --> 00:13:39,040
how you can scale them what's missing

00:13:35,199 --> 00:13:40,209
well in docker and in cuba nets and all

00:13:39,040 --> 00:13:42,370
this container gets traitors you can

00:13:40,209 --> 00:13:44,589
attach to a container and look at its

00:13:42,370 --> 00:13:47,230
logs you can look at its output and you

00:13:44,589 --> 00:13:49,660
can send some input and interactively

00:13:47,230 --> 00:13:51,759
and see what's happening in california

00:13:49,660 --> 00:13:53,829
lists are different things you can

00:13:51,759 --> 00:13:56,170
attach to a process and look at its

00:13:53,829 --> 00:13:58,389
output using CF logs as with ordinary

00:13:56,170 --> 00:14:00,310
applications so i'm creating some

00:13:58,389 --> 00:14:02,410
background traffic here just hitting the

00:14:00,310 --> 00:14:04,389
endpoint every second and then running

00:14:02,410 --> 00:14:05,889
CF logs which will give me back the

00:14:04,389 --> 00:14:07,329
output this is the output of the

00:14:05,889 --> 00:14:09,940
application so if you have multiple

00:14:07,329 --> 00:14:12,730
instances you will get the output from

00:14:09,940 --> 00:14:14,860
all these instances and attach them to

00:14:12,730 --> 00:14:17,319
the container like trying to

00:14:14,860 --> 00:14:20,620
interactively debug and manipulate a

00:14:17,319 --> 00:14:22,540
running container for that there is CF

00:14:20,620 --> 00:14:25,120
SSA this is another not so new feature

00:14:22,540 --> 00:14:29,079
it was enabled last year with Diego

00:14:25,120 --> 00:14:31,959
release of Yeager but running that you

00:14:29,079 --> 00:14:34,329
can jump into a container so and just to

00:14:31,959 --> 00:14:35,949
preview that I can just from PSU you

00:14:34,329 --> 00:14:39,160
will see all the container processes

00:14:35,949 --> 00:14:45,459
here there is an SSH daemon there's a

00:14:39,160 --> 00:14:51,490
the apt of py this yeah and there's a

00:14:45,459 --> 00:14:53,649
cell and this cell has the environment

00:14:51,490 --> 00:14:58,200
the CF environment at the application so

00:14:53,649 --> 00:15:00,960
I can I can refer to known

00:14:58,200 --> 00:15:03,450
and variables like the instances excuses

00:15:00,960 --> 00:15:05,730
this is zero by default the CFS states

00:15:03,450 --> 00:15:07,980
will attach to the first container the

00:15:05,730 --> 00:15:11,540
first instance but he can configure that

00:15:07,980 --> 00:15:11,540
you can ask her for specific container

00:15:11,810 --> 00:15:18,690
all right so the last thing I want to

00:15:16,170 --> 00:15:20,820
show you is what we call CF docker

00:15:18,690 --> 00:15:24,510
breach so last year Jules presented this

00:15:20,820 --> 00:15:26,910
idea of using docker as a back-end for

00:15:24,510 --> 00:15:29,220
cloud foundry it was called garden

00:15:26,910 --> 00:15:32,040
doctor and the idea was that garden

00:15:29,220 --> 00:15:33,840
would be the front end it would create

00:15:32,040 --> 00:15:35,190
containers in docker and then the whole

00:15:33,840 --> 00:15:36,660
cloth under would use docker to create

00:15:35,190 --> 00:15:38,010
containers and this is something we

00:15:36,660 --> 00:15:41,250
discussed in for a long time

00:15:38,010 --> 00:15:44,430
CF poker breeds is the reverse idea so

00:15:41,250 --> 00:15:46,380
CF poker breed is actually using docker

00:15:44,430 --> 00:15:48,120
as an interface the called CLI as an

00:15:46,380 --> 00:15:50,370
interface and called founders a back-end

00:15:48,120 --> 00:15:54,390
because we just saw that called foundry

00:15:50,370 --> 00:15:56,430
is a container illustrator so I just

00:15:54,390 --> 00:16:00,660
installed CF poker bridge this is a go

00:15:56,430 --> 00:16:03,630
application so go get will do and I have

00:16:00,660 --> 00:16:06,540
to start the CF docker bridge daemon

00:16:03,630 --> 00:16:10,200
have to define a socket this is a socket

00:16:06,540 --> 00:16:12,540
that the doctor client will connect to

00:16:10,200 --> 00:16:14,040
and to tell the client where to connect

00:16:12,540 --> 00:16:19,290
do we have to export this environment

00:16:14,040 --> 00:16:20,640
variable and then just talk a run so I'm

00:16:19,290 --> 00:16:23,400
using the same image the same for a

00:16:20,640 --> 00:16:24,870
mezuzah but I used before and as you can

00:16:23,400 --> 00:16:28,080
see in the background what this is doing

00:16:24,870 --> 00:16:29,820
is CF food it's creating a container

00:16:28,080 --> 00:16:31,740
which is actually clasp on your

00:16:29,820 --> 00:16:32,940
application and if you ran sea of apps

00:16:31,740 --> 00:16:36,000
there it is

00:16:32,940 --> 00:16:37,500
it's your cost on your application it's

00:16:36,000 --> 00:16:40,950
your daughter container is your garden

00:16:37,500 --> 00:16:42,900
container it's a container foundry thank

00:16:40,950 --> 00:16:46,669
you

00:16:42,900 --> 00:16:46,669
[Applause]

00:16:48,870 --> 00:16:54,460
Thanks so hopefully I just want to

00:16:52,810 --> 00:16:56,230
underline what you just saw at the end

00:16:54,460 --> 00:16:58,690
of that which is using the regular

00:16:56,230 --> 00:17:01,000
docker clients with a regular docker

00:16:58,690 --> 00:17:03,100
command to push a container but

00:17:01,000 --> 00:17:05,470
orchestrating it and scaling it as a

00:17:03,100 --> 00:17:09,040
regular app inside cloud foundry which

00:17:05,470 --> 00:17:11,170
shows you just how similar the system

00:17:09,040 --> 00:17:15,280
systems actually are when you get for

00:17:11,170 --> 00:17:17,560
free or the cloud foundry stuff so let's

00:17:15,280 --> 00:17:19,360
briefly do some comparisons to just like

00:17:17,560 --> 00:17:22,330
talk about the differences between some

00:17:19,360 --> 00:17:25,600
of these things so firstly I just want

00:17:22,330 --> 00:17:27,450
to talk about the backend container

00:17:25,600 --> 00:17:30,340
technologies that are going on here

00:17:27,450 --> 00:17:32,800
because last year we were talking about

00:17:30,340 --> 00:17:35,410
God and docker and God and docker was an

00:17:32,800 --> 00:17:37,960
experimental backend for garden which

00:17:35,410 --> 00:17:43,860
instead of using gardens own custom code

00:17:37,960 --> 00:17:43,860
use docker engine to run CF workloads

00:17:43,980 --> 00:17:51,220
now I'm happy to say that we're running

00:17:48,190 --> 00:17:52,990
on God and run C so our dough run C is

00:17:51,220 --> 00:17:56,110
the new back-end that's currently moving

00:17:52,990 --> 00:18:00,610
through Diego's CI pipelines which uses

00:17:56,110 --> 00:18:03,670
run C what is run C or run C is the

00:18:00,610 --> 00:18:06,610
container engine part of docker so

00:18:03,670 --> 00:18:09,580
docker has spun that out as a separate

00:18:06,610 --> 00:18:10,990
project is donates it to a foundation

00:18:09,580 --> 00:18:14,920
that's also part of the Linux Foundation

00:18:10,990 --> 00:18:16,930
with multiple companies owning it

00:18:14,920 --> 00:18:20,230
and so we're now using that code it's

00:18:16,930 --> 00:18:21,640
the same code that doc is using because

00:18:20,230 --> 00:18:24,160
it's saying our dock is using it's the

00:18:21,640 --> 00:18:25,600
same code kubernetes is using so the

00:18:24,160 --> 00:18:30,460
only thing that wasn't using it was god

00:18:25,600 --> 00:18:32,920
Linux but garden run C is now in Diego

00:18:30,460 --> 00:18:33,990
CI pipeline so hopefully god limits will

00:18:32,920 --> 00:18:36,340
soon go away

00:18:33,990 --> 00:18:38,800
and then actually whichever container

00:18:36,340 --> 00:18:40,540
orchestrator you use you're really just

00:18:38,800 --> 00:18:43,270
spinning up run C containers it's all

00:18:40,540 --> 00:18:47,230
exactly the same contain the technology

00:18:43,270 --> 00:18:49,000
at the back so what really matters is

00:18:47,230 --> 00:18:51,010
the user experience right what does he

00:18:49,000 --> 00:18:52,750
use a see what's what's what go what

00:18:51,010 --> 00:18:55,720
does the user think about when they come

00:18:52,750 --> 00:18:57,700
to the system well doc is containing us

00:18:55,720 --> 00:18:59,440
right everything is containers just push

00:18:57,700 --> 00:19:02,080
containers

00:18:59,440 --> 00:19:04,240
Kuban Nettie's has these declarative pod

00:19:02,080 --> 00:19:06,850
specs which are actually more

00:19:04,240 --> 00:19:09,070
complicated than containers but they're

00:19:06,850 --> 00:19:11,560
still really very low-level things that

00:19:09,070 --> 00:19:15,130
you have to understand Cloud Foundry is

00:19:11,560 --> 00:19:17,140
code right pushes your code will figure

00:19:15,130 --> 00:19:19,720
out how to run it but if you want to

00:19:17,140 --> 00:19:21,940
give us a container that works too we're

00:19:19,720 --> 00:19:24,510
not opinionated about that we can

00:19:21,940 --> 00:19:27,010
actually do either one of those things

00:19:24,510 --> 00:19:28,720
so what does that mean for the cell API

00:19:27,010 --> 00:19:30,250
the thing that runs on each one of the

00:19:28,720 --> 00:19:32,800
nodes in a cluster

00:19:30,250 --> 00:19:34,780
well the docker thing is just containers

00:19:32,800 --> 00:19:35,470
right contain this of the node faintness

00:19:34,780 --> 00:19:37,090
at the house

00:19:35,470 --> 00:19:39,250
that means you end up with quite a lot

00:19:37,090 --> 00:19:41,380
of complexity on the node that you

00:19:39,250 --> 00:19:43,360
didn't really need because you were

00:19:41,380 --> 00:19:45,010
doing all the stuff for the UX that you

00:19:43,360 --> 00:19:46,810
needed a user to see at the cluster

00:19:45,010 --> 00:19:50,470
level and you now have to have that on

00:19:46,810 --> 00:19:54,640
every node again kubernetes its pod

00:19:50,470 --> 00:19:57,850
specs it's this pod spec idea garden

00:19:54,640 --> 00:20:00,220
uses a container spec was to contain a

00:19:57,850 --> 00:20:04,450
spec container spec is a cut-down

00:20:00,220 --> 00:20:06,670
simplified API that's built just to be a

00:20:04,450 --> 00:20:08,800
cell level API it's not built for a user

00:20:06,670 --> 00:20:11,470
to use we do that at the cluster level

00:20:08,800 --> 00:20:13,180
and it's proven cross-platform so we

00:20:11,470 --> 00:20:15,490
have implementations for windows it

00:20:13,180 --> 00:20:18,280
doesn't have the features that aren't

00:20:15,490 --> 00:20:21,520
cross-platform inside the API and it can

00:20:18,280 --> 00:20:24,670
evolve along with the overall system so

00:20:21,520 --> 00:20:27,610
now God and run C is really a very small

00:20:24,670 --> 00:20:29,950
piece of glue they're just wires run C

00:20:27,610 --> 00:20:32,320
into the rest of the system with an API

00:20:29,950 --> 00:20:34,450
that's extremely simple but tailored for

00:20:32,320 --> 00:20:37,240
Diego and tailored for an Orchestrator

00:20:34,450 --> 00:20:38,770
to use rather than for a user to use

00:20:37,240 --> 00:20:43,890
because they're fundamentally different

00:20:38,770 --> 00:20:43,890
things so the summary

00:20:45,789 --> 00:20:53,120
so yeah we basically in reverse order uh

00:20:50,389 --> 00:20:56,990
truancy is a tiny wraparound run see

00:20:53,120 --> 00:21:00,019
we're using a common code base comically

00:20:56,990 --> 00:21:02,139
blocker and this means that this code

00:21:00,019 --> 00:21:07,129
base is maintained by a huge community

00:21:02,139 --> 00:21:09,980
shall we and the wrapper is small is

00:21:07,129 --> 00:21:16,129
it's easy to maintain it can it's easy

00:21:09,980 --> 00:21:18,230
to secure sort of and and we're using

00:21:16,129 --> 00:21:20,210
the garden API steel which is

00:21:18,230 --> 00:21:25,250
cross-platform it's proven its meaning

00:21:20,210 --> 00:21:29,480
five hundred for some time now and the

00:21:25,250 --> 00:21:31,789
second beat is called hungry we have the

00:21:29,480 --> 00:21:34,340
haiku everyone sticks to it here's my

00:21:31,789 --> 00:21:35,809
code but you can also really say here's

00:21:34,340 --> 00:21:36,889
my container and you can you can still

00:21:35,809 --> 00:21:39,070
deploy your container you can still

00:21:36,889 --> 00:21:42,799
treat funders a container illustrator

00:21:39,070 --> 00:21:44,330
the system is entering either way so the

00:21:42,799 --> 00:21:45,980
system is providing you with all the

00:21:44,330 --> 00:21:48,559
functionality you need with metrics with

00:21:45,980 --> 00:21:50,929
logging with all this stuff whether

00:21:48,559 --> 00:21:53,539
you're using the bill types or the

00:21:50,929 --> 00:21:54,919
containers and you can use either or

00:21:53,539 --> 00:21:57,410
both it doesn't really matter

00:21:54,919 --> 00:22:00,619
thank you

00:21:57,410 --> 00:22:00,619
[Applause]

00:22:03,960 --> 00:22:21,970
so I reckon we have about eight minutes

00:22:05,830 --> 00:22:24,150
if anyone has questions so the question

00:22:21,970 --> 00:22:26,260
was whether this will be in the pivotal

00:22:24,150 --> 00:22:28,450
Cloud Foundry release or just in the

00:22:26,260 --> 00:22:32,710
open release I think we'd have to ask

00:22:28,450 --> 00:22:34,960
pivotal but I mean it's going through

00:22:32,710 --> 00:22:37,510
Diego's CI fight by now so I think I

00:22:34,960 --> 00:22:39,400
think the intention from for most people

00:22:37,510 --> 00:22:42,720
is that this will replace Godin Linux

00:22:39,400 --> 00:22:46,180
and will be the runtime the Diego uses

00:22:42,720 --> 00:22:48,670
so my question is it's gonna support the

00:22:46,180 --> 00:22:51,700
HTTP routing through go routers are just

00:22:48,670 --> 00:22:53,590
gonna suppose the TCP routing as well so

00:22:51,700 --> 00:22:55,960
you guys inside a container I can listen

00:22:53,590 --> 00:22:57,970
to any port right the question is does

00:22:55,960 --> 00:23:00,070
this support HTTP routing and TCP

00:22:57,970 --> 00:23:03,370
routing and yet that that all happens

00:23:00,070 --> 00:23:05,260
higher up in the stack so all of that

00:23:03,370 --> 00:23:08,170
stuff should work regardless of whether

00:23:05,260 --> 00:23:10,270
you use code or containers all of the

00:23:08,170 --> 00:23:14,170
stuff should just work so you can listen

00:23:10,270 --> 00:23:16,240
to anyone yeah I think so I think we

00:23:14,170 --> 00:23:17,740
need the first exposed port in docker by

00:23:16,240 --> 00:23:21,000
default at the moment I don't know if we

00:23:17,740 --> 00:23:21,000
support multiple ports but

00:23:26,330 --> 00:23:28,929
returning

00:23:31,710 --> 00:23:34,710
communication

00:23:36,660 --> 00:23:40,990
so there's another talk which is about

00:23:39,400 --> 00:23:42,940
container to container networking which

00:23:40,990 --> 00:23:44,680
I think is that the best talk which is

00:23:42,940 --> 00:23:48,450
talking about those plans for doing that

00:23:44,680 --> 00:23:48,450

YouTube URL: https://www.youtube.com/watch?v=sqxRmKJ5BMU


