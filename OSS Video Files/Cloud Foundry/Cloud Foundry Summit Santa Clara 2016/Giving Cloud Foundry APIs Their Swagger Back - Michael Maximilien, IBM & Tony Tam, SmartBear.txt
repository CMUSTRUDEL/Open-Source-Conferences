Title: Giving Cloud Foundry APIs Their Swagger Back - Michael Maximilien, IBM & Tony Tam, SmartBear
Publication date: 2016-05-29
Playlist: Cloud Foundry Summit Santa Clara 2016
Description: 
	The Open API Specification (nÃ©e Swagger 2.0) is a comprehensive language for describing Web APIs (e.g., REST) using a JSON. Using the description of a Web API one can easily generate all types of artifacts (docs, clients, proxies, and so on) that are useful to consumers, developers, and maintainers of the API.  

CF-Swagger is an incubation project in CloudFoundry where we have applied Swagger to various CF APIs in order to generate value. For instance, by having a Swagger description of the Service Broker APIs we are able to generate a Golang Test Compatibility Kit (TCK) that makes it easy for a CF service administrator to vet whether a service broker conforms to a particular version of the service broker API. 

We have also described various other CF APIs using Swagger with the goal to allowing specific useful tasks. In this talk we will give a complete overview of the various CF APIs we have swaggerized, along with some of the useful consequences of the description. We will also discuss general directions of the project along with other potential applications by looking at how the Swagger community is currently taking advantage of APIs' descriptions. 

Michael (aka dr.max) Maximilien
Scientist, Architect, and Engineer, IBM
My name is Michael Maximilien, better known as max or dr.max, and I am a computer scientist with IBM. At IBM Research Triangle Park, I was a principal engineer for the worldwide industry point-of-sale standard: JavaPOS. At IBM Research, I was a research scientist and did pioneering research on semantic Web services, mashups, and cloud computing, as well as platform-as-a-service. I joined the IBM Cloud Labs in 2014 as Chief Architect for Crchitect for Cloud Innovations working closely with Pivotal Inc., to help make the Cloud Foundry Open Source Platform-as-a-Service the best PaaS on the planet. 

My main expertise are in areas of software engineering and distributed systems. I have published over 60 refereed papers with citations count on GoogleScholar over 3500 and I hold 13 issued US patents. I am an avid amateur triathlete who has completed more than 10 half Ironman and one full Ironman and more than 20 marathons.


Tony Tam
VP and CTO, SmartBear
VP and CTO of all things Swagger at SmartBear
Captions: 
	00:00:00,390 --> 00:00:05,130
I don't care what your politics it is

00:00:02,580 --> 00:00:07,259
but I'm pretty sure you agreed this guy

00:00:05,130 --> 00:00:09,599
has swagger right you were here to

00:00:07,259 --> 00:00:10,019
essentially be a little bit more like

00:00:09,599 --> 00:00:12,929
him

00:00:10,019 --> 00:00:14,370
I happen to like this guy a lot but I

00:00:12,929 --> 00:00:16,859
think he has swagger and this is what

00:00:14,370 --> 00:00:18,930
this talk is about let's get moving

00:00:16,859 --> 00:00:22,769
so first thing is let me mention to you

00:00:18,930 --> 00:00:26,910
that it's in order to have Tony be part

00:00:22,769 --> 00:00:30,869
of this presentation with me Tony is the

00:00:26,910 --> 00:00:33,120
VP at smart beer for swagger he happened

00:00:30,869 --> 00:00:35,820
to have created invented swagger and

00:00:33,120 --> 00:00:39,000
still involved and and the best part is

00:00:35,820 --> 00:00:41,910
a lot of you know me and you might have

00:00:39,000 --> 00:00:45,750
even heard about this this talk and this

00:00:41,910 --> 00:00:47,670
work that Muhammad and I from IBM

00:00:45,750 --> 00:00:50,730
research here started but what's cool is

00:00:47,670 --> 00:00:52,500
20 he told me yesterday I'm gonna add a

00:00:50,730 --> 00:00:55,140
few more things and I was like cool

00:00:52,500 --> 00:00:57,120
we'll chat about it today and what he

00:00:55,140 --> 00:00:59,129
showed me just blew in my mind so much

00:00:57,120 --> 00:01:01,350
so that we kind of like decided okay

00:00:59,129 --> 00:01:03,300
instead of doing the demo that Muhammad

00:01:01,350 --> 00:01:05,040
and I had as part of the talk we're

00:01:03,300 --> 00:01:07,530
gonna use his demo so you're gonna see

00:01:05,040 --> 00:01:10,799
this I promise you if you were doubting

00:01:07,530 --> 00:01:13,350
swagger listen to Tony it's a lot of

00:01:10,799 --> 00:01:17,270
pressure by the way yeah okay all right

00:01:13,350 --> 00:01:22,470
okay well thank you very much for that

00:01:17,270 --> 00:01:26,880
really easy setup so who here uses

00:01:22,470 --> 00:01:29,220
swagger API yeah some people not enough

00:01:26,880 --> 00:01:32,250
people let me start out with a couple of

00:01:29,220 --> 00:01:34,079
things I'm gonna first talked about

00:01:32,250 --> 00:01:37,520
swagger is it's really just a mechanism

00:01:34,079 --> 00:01:41,430
for describing api's it's for explaining

00:01:37,520 --> 00:01:43,049
what the contract is between a consumer

00:01:41,430 --> 00:01:43,710
and a service right seems like something

00:01:43,049 --> 00:01:45,630
pretty simple

00:01:43,710 --> 00:01:47,159
we'll go through that more in detail I

00:01:45,630 --> 00:01:54,000
think this guy can explain what Cloud

00:01:47,159 --> 00:01:56,310
Foundry is sure I'll try meaning now you

00:01:54,000 --> 00:01:58,950
want no I think I think I think we'll

00:01:56,310 --> 00:02:00,659
get to it or a tight timeline let's get

00:01:58,950 --> 00:02:02,520
to it yeah let's get to it because I

00:02:00,659 --> 00:02:05,040
think what we want to do is get to the

00:02:02,520 --> 00:02:06,780
point where we were past your demos

00:02:05,040 --> 00:02:09,450
these guys know about our foundry was

00:02:06,780 --> 00:02:13,710
quit was skip to it and characterized so

00:02:09,450 --> 00:02:14,970
back to this okay so back to what Suarez

00:02:13,710 --> 00:02:18,810
people when they say what swagger they

00:02:14,970 --> 00:02:21,480
say well it's a pretty UI a UI is part

00:02:18,810 --> 00:02:23,790
of it it's it's a very interesting part

00:02:21,480 --> 00:02:25,500
of its actually in my opinion not the

00:02:23,790 --> 00:02:29,520
most powerful part of what swagger is

00:02:25,500 --> 00:02:32,160
but at its core swagger is a contract

00:02:29,520 --> 00:02:33,900
for api's right not a strict contract a

00:02:32,160 --> 00:02:34,320
little looser we'll talk about that in a

00:02:33,900 --> 00:02:37,740
minute

00:02:34,320 --> 00:02:40,590
if it is if an API is correctly

00:02:37,740 --> 00:02:43,560
described in swagger it should be enough

00:02:40,590 --> 00:02:45,660
to both produce the API or consume it

00:02:43,560 --> 00:02:48,120
right it's important it's not enough to

00:02:45,660 --> 00:02:50,220
model it or make it look pretty or make

00:02:48,120 --> 00:02:51,900
Doc's it's really enough to consume it

00:02:50,220 --> 00:02:53,460
and understand everything about it so if

00:02:51,900 --> 00:02:56,340
you say that you call something and you

00:02:53,460 --> 00:02:58,050
get back a horse object you should get

00:02:56,340 --> 00:02:59,700
back a horse object instead of a cow

00:02:58,050 --> 00:03:01,710
object right so we want things to be

00:02:59,700 --> 00:03:04,710
really clear so that consumers don't

00:03:01,710 --> 00:03:07,710
have to guess there is a very rich

00:03:04,710 --> 00:03:10,770
toolset ecosystem out there there's

00:03:07,710 --> 00:03:12,500
thousands of projects on github some of

00:03:10,770 --> 00:03:16,050
them are better than the ones I work on

00:03:12,500 --> 00:03:17,400
maybe but there's lots of things to help

00:03:16,050 --> 00:03:18,930
you get things done because it is a

00:03:17,400 --> 00:03:20,670
contract and once you have a contract

00:03:18,930 --> 00:03:23,580
you can do amazing stuff and very

00:03:20,670 --> 00:03:25,980
importantly it is a the swagger

00:03:23,580 --> 00:03:27,270
specification was the foundation for

00:03:25,980 --> 00:03:30,090
something called the open API

00:03:27,270 --> 00:03:31,670
specification which means we donated a

00:03:30,090 --> 00:03:33,690
smart bear the company behind swagger

00:03:31,670 --> 00:03:37,080
donated the spec to the Linux Foundation

00:03:33,690 --> 00:03:38,760
so that lots of people can jump on and

00:03:37,080 --> 00:03:40,730
and contribute to it in a neutral

00:03:38,760 --> 00:03:43,440
fashion and move it forward as a

00:03:40,730 --> 00:03:45,090
standard for describing web services so

00:03:43,440 --> 00:03:47,490
that's really exciting I can go into

00:03:45,090 --> 00:03:48,570
that in much more detail later but now

00:03:47,490 --> 00:03:54,000
that there's all this pressure for a

00:03:48,570 --> 00:03:56,640
demo let me get towards that first so if

00:03:54,000 --> 00:03:58,950
you want to be a consumer of api's you

00:03:56,640 --> 00:04:01,160
have a producer for that matter you have

00:03:58,950 --> 00:04:03,930
a couple of choices

00:04:01,160 --> 00:04:06,360
what do you call what is the API

00:04:03,930 --> 00:04:07,890
endpoint what is a the parameters all

00:04:06,360 --> 00:04:09,510
that sort of thing you can read the docs

00:04:07,890 --> 00:04:12,150
so you see on the right-hand side

00:04:09,510 --> 00:04:15,120
service broker Doc's here version 2.8

00:04:12,150 --> 00:04:16,859
very nicely created but still created by

00:04:15,120 --> 00:04:19,320
a human and still have to be read by

00:04:16,859 --> 00:04:23,850
human a machine can't understand those

00:04:19,320 --> 00:04:25,950
very very easily right if you want to

00:04:23,850 --> 00:04:27,840
consume it you have to

00:04:25,950 --> 00:04:29,400
have a nice SDK if you're lucky

00:04:27,840 --> 00:04:30,600
sometimes I got dependencies you don't

00:04:29,400 --> 00:04:32,430
like it's not the language you like

00:04:30,600 --> 00:04:34,380
whatever everyone complains about SDKs

00:04:32,430 --> 00:04:37,770
and sometimes I don't blame them the

00:04:34,380 --> 00:04:39,540
parameters the inputs that go in what is

00:04:37,770 --> 00:04:41,790
a payload that comes in all of that sort

00:04:39,540 --> 00:04:44,130
of thing and then as a provider meaning

00:04:41,790 --> 00:04:46,110
the producer of an API making all this

00:04:44,130 --> 00:04:48,480
stuff and describing it as hard making

00:04:46,110 --> 00:04:51,210
SDKs is even harder because you don't

00:04:48,480 --> 00:04:54,950
always have the ability to write 50

00:04:51,210 --> 00:04:58,800
different languages of of client SDKs

00:04:54,950 --> 00:05:00,600
users are great to have but they're they

00:04:58,800 --> 00:05:02,040
can be annoying especially when you're

00:05:00,600 --> 00:05:03,570
not doing a good job because then they

00:05:02,040 --> 00:05:06,720
say well you didn't do this or this is

00:05:03,570 --> 00:05:08,790
wrong so that's all hard and also in

00:05:06,720 --> 00:05:11,250
general boilerplate blows I don't need

00:05:08,790 --> 00:05:13,970
to say much more about that so um

00:05:11,250 --> 00:05:16,080
swagger can help in a number of ways

00:05:13,970 --> 00:05:18,720
there's different techniques for

00:05:16,080 --> 00:05:20,190
producing api's you can write code first

00:05:18,720 --> 00:05:23,280
a lot of people are doing this thing

00:05:20,190 --> 00:05:25,710
called design first and once you design

00:05:23,280 --> 00:05:27,630
an API you can generate automatically

00:05:25,710 --> 00:05:30,810
would write the right tooling clients

00:05:27,630 --> 00:05:32,700
and servers and that your job then is

00:05:30,810 --> 00:05:34,110
really to work on business logic right

00:05:32,700 --> 00:05:35,910
and that's a lot more fun than writing

00:05:34,110 --> 00:05:39,450
plumbing so if you've ever written

00:05:35,910 --> 00:05:41,370
routing tools and integrated some new

00:05:39,450 --> 00:05:43,590
framework that has lots of bugs that's

00:05:41,370 --> 00:05:45,870
not fun like your boss is gonna be happy

00:05:43,590 --> 00:05:48,300
if the business logic works really well

00:05:45,870 --> 00:05:51,150
so swagger is trying to help solve that

00:05:48,300 --> 00:05:55,020
and iterating right making changes to

00:05:51,150 --> 00:05:57,120
your definitions having to code follow

00:05:55,020 --> 00:05:58,740
it everything being up-to-date being

00:05:57,120 --> 00:06:01,520
able to iterate quickly that's a really

00:05:58,740 --> 00:06:03,930
big deal and smarter helps with that

00:06:01,520 --> 00:06:06,960
some of the tools the things that

00:06:03,930 --> 00:06:08,790
swagger can help with the interactive

00:06:06,960 --> 00:06:10,560
editor you see here I'm gonna show more

00:06:08,790 --> 00:06:14,340
about this but it's a mechanism you do a

00:06:10,560 --> 00:06:18,870
design first API meaning I will use a

00:06:14,340 --> 00:06:21,270
syntax validate against a schema in here

00:06:18,870 --> 00:06:26,280
and I can design and visualize that API

00:06:21,270 --> 00:06:29,370
as I want as I work on it inside you can

00:06:26,280 --> 00:06:31,620
see some of the the constructs of us of

00:06:29,370 --> 00:06:33,870
a swagger definition or open API spec

00:06:31,620 --> 00:06:36,810
definition I mean here there's a path

00:06:33,870 --> 00:06:38,490
called catalog there's a summary right

00:06:36,810 --> 00:06:40,229
it's human understandable this is

00:06:38,490 --> 00:06:43,590
not a hard syntax to understand if

00:06:40,229 --> 00:06:45,210
you've ever tried to create a wisdom by

00:06:43,590 --> 00:06:46,740
hand right like this is a dream come

00:06:45,210 --> 00:06:48,960
true

00:06:46,740 --> 00:06:50,970
here we're saying that the description

00:06:48,960 --> 00:06:53,960
for the operation what kind of code it

00:06:50,970 --> 00:06:56,400
produces or format it produces in JSON a

00:06:53,960 --> 00:06:58,020
description of the responses it says

00:06:56,400 --> 00:06:59,610
it's an array I don't need to check and

00:06:58,020 --> 00:07:01,889
see if it's an object array it's telling

00:06:59,610 --> 00:07:03,840
me exactly what it is I'm in and then I

00:07:01,889 --> 00:07:06,900
can just really explain all of these

00:07:03,840 --> 00:07:11,039
different aspects of what the what the

00:07:06,900 --> 00:07:14,340
API wants right and there's a great

00:07:11,039 --> 00:07:17,360
ecosystem of tooling and I'm gonna walk

00:07:14,340 --> 00:07:20,460
you through this here is a screenshot of

00:07:17,360 --> 00:07:24,710
a project that I work on called swagger

00:07:20,460 --> 00:07:26,909
hub and it helps give you the ability to

00:07:24,710 --> 00:07:28,979
kind of centralized these definitions

00:07:26,909 --> 00:07:32,669
and then bring them into your

00:07:28,979 --> 00:07:33,240
application life cycle right so why does

00:07:32,669 --> 00:07:37,110
this matter

00:07:33,240 --> 00:07:39,509
to this project cloud ramen

00:07:37,110 --> 00:07:43,020
well let's say that you are in the

00:07:39,509 --> 00:07:44,969
business of creating a new a new service

00:07:43,020 --> 00:07:47,669
right there's things that you need to do

00:07:44,969 --> 00:07:49,650
in order to produce a new service to

00:07:47,669 --> 00:07:52,080
consume and fit in the ecosystem that

00:07:49,650 --> 00:07:54,780
you're all working within you need to do

00:07:52,080 --> 00:07:57,150
a couple things implement the broker API

00:07:54,780 --> 00:07:59,880
so that something can connect and get a

00:07:57,150 --> 00:08:01,500
proxy or information to connect to your

00:07:59,880 --> 00:08:04,320
service you need to implement the

00:08:01,500 --> 00:08:06,120
service and then you need to make an SDK

00:08:04,320 --> 00:08:08,130
so that those your consumers can

00:08:06,120 --> 00:08:11,099
actually call it right so let's wha

00:08:08,130 --> 00:08:13,319
let's walk through how a swagger working

00:08:11,099 --> 00:08:15,479
inside swagger hub can help out with

00:08:13,319 --> 00:08:18,330
that this is amazing demo that he

00:08:15,479 --> 00:08:20,250
totally said yeah so so I guess in some

00:08:18,330 --> 00:08:21,780
ways to set up usually I would go

00:08:20,250 --> 00:08:23,130
through explaining Cloud Foundry and

00:08:21,780 --> 00:08:24,930
things like this and I figured please

00:08:23,130 --> 00:08:26,069
keep it most people here you should

00:08:24,930 --> 00:08:27,870
probably know about Cloud Foundry

00:08:26,069 --> 00:08:30,509
already but the important thing is that

00:08:27,870 --> 00:08:32,459
why Matt and I we created a bunch of

00:08:30,509 --> 00:08:34,829
description for a different part of CF

00:08:32,459 --> 00:08:36,599
and what you're gonna see is one of

00:08:34,829 --> 00:08:38,969
those description and what Tony was able

00:08:36,599 --> 00:08:41,159
to do with it and hopefully that will

00:08:38,969 --> 00:08:44,190
convince you that we should take all of

00:08:41,159 --> 00:08:49,010
CF and add swagger to it so you'll see

00:08:44,190 --> 00:08:49,010
all right so

00:08:49,610 --> 00:08:53,190
since I'm lousy at typing and talking at

00:08:52,080 --> 00:08:55,410
the same time I made a little screen

00:08:53,190 --> 00:08:58,170
cast but but I want to walk you through

00:08:55,410 --> 00:09:00,570
what this is so this is a product called

00:08:58,170 --> 00:09:03,720
swagger hub you can go to it it's it's a

00:09:00,570 --> 00:09:07,709
free tool for API lifecycle management

00:09:03,720 --> 00:09:10,529
design build deploy and integrate and so

00:09:07,709 --> 00:09:13,470
what I'm going to focus on is the the

00:09:10,529 --> 00:09:17,820
process of taking well written

00:09:13,470 --> 00:09:19,950
definitions and turning them into a real

00:09:17,820 --> 00:09:22,410
service right so the first thing here is

00:09:19,950 --> 00:09:26,010
if I go in here and I search for CF

00:09:22,410 --> 00:09:29,760
demos I have three definitions that

00:09:26,010 --> 00:09:31,200
Mac's actually built or Max's team built

00:09:29,760 --> 00:09:35,370
and these are explaining different

00:09:31,200 --> 00:09:40,160
aspects of services right we take this

00:09:35,370 --> 00:09:43,230
one the CF broker here is a definition

00:09:40,160 --> 00:09:45,930
that is effectively the interface so

00:09:43,230 --> 00:09:49,020
he's gone and described how you need to

00:09:45,930 --> 00:09:53,070
connect to the broker interface you need

00:09:49,020 --> 00:09:55,500
to implement this to to to be compliant

00:09:53,070 --> 00:09:58,980
with a 2.5 API you need to implement

00:09:55,500 --> 00:10:00,480
every aspect of this of this API now you

00:09:58,980 --> 00:10:02,279
can go through again you can read Doc's

00:10:00,480 --> 00:10:04,079
by hand you can make all these endpoints

00:10:02,279 --> 00:10:07,140
you can say okay there's a slash

00:10:04,079 --> 00:10:08,850
catalogs path I need to add this there's

00:10:07,140 --> 00:10:11,339
query parameters I have to do all these

00:10:08,850 --> 00:10:13,020
things but he's gone through and done

00:10:11,339 --> 00:10:15,660
the hard part which is described it in

00:10:13,020 --> 00:10:17,790
this in this definition format and here

00:10:15,660 --> 00:10:19,350
you can see what it looks like I can

00:10:17,790 --> 00:10:21,630
look in the UI and kind of scroll

00:10:19,350 --> 00:10:24,300
through it and here's the service

00:10:21,630 --> 00:10:26,370
instance API right so these are all

00:10:24,300 --> 00:10:28,500
mandatory correct me from wrong they're

00:10:26,370 --> 00:10:31,529
mandatory operations that if you want to

00:10:28,500 --> 00:10:35,820
make a compliant service they have to

00:10:31,529 --> 00:10:38,910
implement okay so because they're all

00:10:35,820 --> 00:10:42,660
described I can do something pretty neat

00:10:38,910 --> 00:10:45,510
I can go and do something called fork

00:10:42,660 --> 00:10:48,029
this API right and so when I fork it I'm

00:10:45,510 --> 00:10:49,649
gonna bring a copy of it it's pretty

00:10:48,029 --> 00:10:51,390
much analogous to from the source code

00:10:49,649 --> 00:10:53,130
point of view I'm going to clone

00:10:51,390 --> 00:10:55,290
essentially clone this definition and

00:10:53,130 --> 00:10:57,420
bring it into my own project right and

00:10:55,290 --> 00:10:59,250
by bringing it into my own project I can

00:10:57,420 --> 00:11:01,209
now do something with it because so

00:10:59,250 --> 00:11:04,209
imagine this is a read-only one i'm

00:11:01,209 --> 00:11:06,819
- now materialize or instantiate this

00:11:04,209 --> 00:11:10,480
API right so here I bring it into my own

00:11:06,819 --> 00:11:11,889
project I give it a name a version I can

00:11:10,480 --> 00:11:14,860
choose whether it's public or private

00:11:11,889 --> 00:11:15,429
and then it's done okay so that's

00:11:14,860 --> 00:11:16,990
exciting

00:11:15,429 --> 00:11:18,519
all right so now I have my own copy you

00:11:16,990 --> 00:11:21,759
can see the URL change it's under my

00:11:18,519 --> 00:11:25,329
username eye or I actually don't

00:11:21,759 --> 00:11:28,240
know how you pronounce it but now at

00:11:25,329 --> 00:11:32,499
this point I have a copy of this so now

00:11:28,240 --> 00:11:35,619
remember I said that swagger has a whole

00:11:32,499 --> 00:11:38,079
tool chain for generating code and the

00:11:35,619 --> 00:11:39,910
code can be generated and you can do

00:11:38,079 --> 00:11:41,949
different things with it I can generate

00:11:39,910 --> 00:11:44,470
a server and then download it I can

00:11:41,949 --> 00:11:47,139
generate a client and download it but

00:11:44,470 --> 00:11:49,689
that workflows not that great in that

00:11:47,139 --> 00:11:51,369
every time I make a change I download it

00:11:49,689 --> 00:11:53,980
then it'll files what files do I merge

00:11:51,369 --> 00:11:57,249
and so in in swaha what we did is we

00:11:53,980 --> 00:12:00,550
made a mechanism to generate code and

00:11:57,249 --> 00:12:01,689
push it directly to repository ok so I'm

00:12:00,550 --> 00:12:04,240
going to show you what that looks like

00:12:01,689 --> 00:12:06,429
if I click this gear there's something

00:12:04,240 --> 00:12:08,189
called an integration and there's

00:12:06,429 --> 00:12:12,970
different integrations here I can choose

00:12:08,189 --> 00:12:15,369
I'm gonna focus on github and so what's

00:12:12,970 --> 00:12:17,829
going to happen is is as I create this

00:12:15,369 --> 00:12:21,009
integration I'm going to link my

00:12:17,829 --> 00:12:22,420
definition directly with github and the

00:12:21,009 --> 00:12:24,429
code generator so notice there's

00:12:22,420 --> 00:12:25,839
different generation targets here so I

00:12:24,429 --> 00:12:29,799
can generate code in all these different

00:12:25,839 --> 00:12:32,379
formats but since I'm creating a broker

00:12:29,799 --> 00:12:33,939
I need to generate a service or a server

00:12:32,379 --> 00:12:37,509
that's going to respond to rest requests

00:12:33,939 --> 00:12:40,360
so I'm going to because I'm a creature

00:12:37,509 --> 00:12:42,970
habit and can't learn a new language I'm

00:12:40,360 --> 00:12:44,619
going to generate a jax-rs version of

00:12:42,970 --> 00:12:46,839
this service of course I could do

00:12:44,619 --> 00:12:51,009
different for languages like I do go I

00:12:46,839 --> 00:12:53,980
could do a PHP if I wanted to Ruby but

00:12:51,009 --> 00:12:56,170
here I'm gonna do a jax-rs version and

00:12:53,980 --> 00:12:58,149
when it generates code I get a couple of

00:12:56,170 --> 00:12:59,529
options all right so the worst thing

00:12:58,149 --> 00:13:01,569
would be if I'm generating code I'm

00:12:59,529 --> 00:13:03,399
pushing it into a github repository and

00:13:01,569 --> 00:13:07,149
then I go and I implement something and

00:13:03,399 --> 00:13:09,279
then I I generated again I'd blow over

00:13:07,149 --> 00:13:10,899
all my business logic right so that's

00:13:09,279 --> 00:13:12,639
not the idea we want you to have control

00:13:10,899 --> 00:13:15,130
over the code that you actually

00:13:12,639 --> 00:13:16,720
implement so I can here say

00:13:15,130 --> 00:13:18,580
if a file doesn't exist go ahead and

00:13:16,720 --> 00:13:20,710
create it if it does exist

00:13:18,580 --> 00:13:22,540
leave it alone right so that's what this

00:13:20,710 --> 00:13:25,120
is here this is called a provided path

00:13:22,540 --> 00:13:27,550
there's other things I can do like have

00:13:25,120 --> 00:13:29,590
fully managed paths so it just is like

00:13:27,550 --> 00:13:32,350
if I'm going to rename a model I need to

00:13:29,590 --> 00:13:34,690
blow it away put make a new one let's

00:13:32,350 --> 00:13:37,570
let the co generous own that and then

00:13:34,690 --> 00:13:40,690
files that I want to ignore right so by

00:13:37,570 --> 00:13:43,930
creating this iteration now every time I

00:13:40,690 --> 00:13:45,880
hit save what will happen is the back

00:13:43,930 --> 00:13:47,710
end will go generate the code it'll sync

00:13:45,880 --> 00:13:50,110
it with the github repository and then

00:13:47,710 --> 00:13:52,150
push it right and so the beauty now is

00:13:50,110 --> 00:13:56,890
that without any doing any coding now I

00:13:52,150 --> 00:13:59,650
now have this project CF broker and a

00:13:56,890 --> 00:14:01,180
generate server write explains where it

00:13:59,650 --> 00:14:02,320
comes from links to the open source so

00:14:01,180 --> 00:14:02,680
you can tweak it and do whatever you

00:14:02,320 --> 00:14:06,190
want

00:14:02,680 --> 00:14:08,290
and it actually will completely run so

00:14:06,190 --> 00:14:10,030
now imagine all that plumbing that I

00:14:08,290 --> 00:14:12,040
normally have to do all this routing

00:14:10,030 --> 00:14:14,470
that sort of thing it's just been done

00:14:12,040 --> 00:14:17,950
for me so it's probably really small you

00:14:14,470 --> 00:14:24,250
can read it okay so I clone this repo I

00:14:17,950 --> 00:14:27,580
can immediately build it and with any

00:14:24,250 --> 00:14:29,490
luck I can actually run the server okay

00:14:27,580 --> 00:14:37,720
and you have a fully working server

00:14:29,490 --> 00:14:40,450
which we can launch I can jump into a

00:14:37,720 --> 00:14:43,510
browser I can view the swagger

00:14:40,450 --> 00:14:45,250
definition and then I can even make a

00:14:43,510 --> 00:14:48,430
call to one of the endpoints in this

00:14:45,250 --> 00:14:50,020
case the catalog endpoint right and of

00:14:48,430 --> 00:14:52,750
course this doesn't do me a lot of good

00:14:50,020 --> 00:14:56,290
because it just says magic but now note

00:14:52,750 --> 00:14:58,270
here this is the implementation I just

00:14:56,290 --> 00:15:00,370
clone this and just read it so this all

00:14:58,270 --> 00:15:03,400
got pushed to github all I have to do

00:15:00,370 --> 00:15:06,100
now is implement these methods and in

00:15:03,400 --> 00:15:08,380
this case here there's a catalog method

00:15:06,100 --> 00:15:10,450
I implement this the framework has taken

00:15:08,380 --> 00:15:13,300
care of all of the plumbing so that you

00:15:10,450 --> 00:15:16,090
just work on the business logic and an

00:15:13,300 --> 00:15:18,180
implements and then at that point if I

00:15:16,090 --> 00:15:20,090
do every method I have a fully working

00:15:18,180 --> 00:15:22,390
broker applique

00:15:20,090 --> 00:15:25,130
right so no code or anything like that

00:15:22,390 --> 00:15:27,130
but kind of this whole control and then

00:15:25,130 --> 00:15:29,600
so the beauty of this mechanism is that

00:15:27,130 --> 00:15:32,330
the interface that you must implement

00:15:29,600 --> 00:15:34,010
right the framework and all the plumbing

00:15:32,330 --> 00:15:37,700
to the routing and the parameters and

00:15:34,010 --> 00:15:40,400
all the options get-get-get done for you

00:15:37,700 --> 00:15:42,410
and your job is this one thing which is

00:15:40,400 --> 00:15:44,420
implementing that interface okay so now

00:15:42,410 --> 00:15:47,180
I've got the broker I can do the same

00:15:44,420 --> 00:15:48,550
thing with my service and then plug it

00:15:47,180 --> 00:15:51,140
into the pipeline and then I've got a

00:15:48,550 --> 00:15:52,460
working application really quickly you

00:15:51,140 --> 00:15:54,260
don't have to work inside of this

00:15:52,460 --> 00:15:57,410
particular language you can work inside

00:15:54,260 --> 00:16:05,830
of any of the supported languages really

00:15:57,410 --> 00:16:05,830
easily all right I think I

00:16:08,259 --> 00:16:13,410
cool so what you saw is essentially

00:16:10,869 --> 00:16:17,169
somebody implementing a serviceworker

00:16:13,410 --> 00:16:19,269
without having any knowledge pretty much

00:16:17,169 --> 00:16:21,970
about the details of serviceworker just

00:16:19,269 --> 00:16:24,089
by going to the specification I mean

00:16:21,970 --> 00:16:27,039
this is the power of swagger right

00:16:24,089 --> 00:16:28,989
obviously to any new swagger very well

00:16:27,039 --> 00:16:31,509
but you saw the steps that he did it's

00:16:28,989 --> 00:16:33,999
not unlike anything you could do so what

00:16:31,509 --> 00:16:36,939
we were trying to do with CF swagger

00:16:33,999 --> 00:16:39,819
which is the incubation project is just

00:16:36,939 --> 00:16:41,350
sort of like motivate people for doing

00:16:39,819 --> 00:16:43,809
this kind of things I mean if this is

00:16:41,350 --> 00:16:46,779
not enough motivation for you then we

00:16:43,809 --> 00:16:50,470
have even more so one of the things that

00:16:46,779 --> 00:16:54,749
we try to do in the project CF swagger

00:16:50,470 --> 00:16:58,660
is to look at how we could essentially

00:16:54,749 --> 00:17:01,419
document most of Cloud Foundry at least

00:16:58,660 --> 00:17:03,189
all of the external APs and then

00:17:01,419 --> 00:17:05,529
obviously as Tony was asking the

00:17:03,189 --> 00:17:07,659
question is you know just describe it

00:17:05,529 --> 00:17:10,449
you want to have value you want to bring

00:17:07,659 --> 00:17:13,299
value to the different projects so if we

00:17:10,449 --> 00:17:15,279
focus again on the serviceworker what we

00:17:13,299 --> 00:17:17,409
found out is in addition to the demo

00:17:15,279 --> 00:17:19,929
that Tony showed which is essentially

00:17:17,409 --> 00:17:22,809
now all of a sudden all of you can go

00:17:19,929 --> 00:17:25,750
and implement your own serviceworker

00:17:22,809 --> 00:17:27,579
very quickly in different languages as

00:17:25,750 --> 00:17:29,679
well which is the great part and keep it

00:17:27,579 --> 00:17:32,289
in sync with every time the

00:17:29,679 --> 00:17:34,240
serviceworker is updated one of the

00:17:32,289 --> 00:17:36,940
obvious question that came about for us

00:17:34,240 --> 00:17:40,330
was as we operate since I work for in

00:17:36,940 --> 00:17:43,450
morbid as well work for IBM when we run

00:17:40,330 --> 00:17:45,870
service workers on bluemix one of the

00:17:43,450 --> 00:17:47,679
big issues we started having is

00:17:45,870 --> 00:17:51,250
compatibility of the service workers

00:17:47,679 --> 00:17:52,870
because as the specification got updated

00:17:51,250 --> 00:17:54,760
not all of them are using swagger

00:17:52,870 --> 00:17:56,649
because that didn't exist on at that

00:17:54,760 --> 00:17:58,840
time most of the service workers have to

00:17:56,649 --> 00:18:01,570
manually go update their service workers

00:17:58,840 --> 00:18:03,549
to support the new API so one obvious

00:18:01,570 --> 00:18:05,980
thing that we could try to find out is

00:18:03,549 --> 00:18:08,350
can we know which service worker is

00:18:05,980 --> 00:18:10,389
supporting which version of the API and

00:18:08,350 --> 00:18:13,000
that's what we did so we started looking

00:18:10,389 --> 00:18:16,500
at essentially creating what we call the

00:18:13,000 --> 00:18:21,880
test compliant kit for service workers

00:18:16,500 --> 00:18:24,549
in in some ways it's similar to

00:18:21,880 --> 00:18:27,700
if you're familiar with Java and you

00:18:24,549 --> 00:18:30,070
know in the past when Java had GSRs and

00:18:27,700 --> 00:18:32,470
they provided also a test compatibility

00:18:30,070 --> 00:18:34,720
kit that CCK that you could run against

00:18:32,470 --> 00:18:37,360
your implementation of the GSR it's the

00:18:34,720 --> 00:18:40,090
same idea except guess what we

00:18:37,360 --> 00:18:43,510
implemented that TCK without writing a

00:18:40,090 --> 00:18:46,299
lot of code we wrote a generator of the

00:18:43,510 --> 00:18:48,970
TCK so every time the specification gets

00:18:46,299 --> 00:18:50,679
updated similar to how you know what

00:18:48,970 --> 00:18:53,440
Tony showed you where he generates a

00:18:50,679 --> 00:18:55,330
server we also created a generator so

00:18:53,440 --> 00:18:57,850
part of the swagger ecosystem is to

00:18:55,330 --> 00:18:59,649
allow the creation of those tools so

00:18:57,850 --> 00:19:02,200
that you can take the Swiper

00:18:59,649 --> 00:19:05,230
specification that you have for your API

00:19:02,200 --> 00:19:08,440
and generate something useful such as a

00:19:05,230 --> 00:19:12,970
TCK such as the server's also charge

00:19:08,440 --> 00:19:17,860
client code so we did that what we had

00:19:12,970 --> 00:19:20,230
to do as part of our specification which

00:19:17,860 --> 00:19:23,080
is the same specification that Tony used

00:19:20,230 --> 00:19:25,659
is to add a little bit of extensions to

00:19:23,080 --> 00:19:29,049
it so for instance we added this X

00:19:25,659 --> 00:19:31,269
version extension to essentially specify

00:19:29,049 --> 00:19:33,639
that this particular operation in the

00:19:31,269 --> 00:19:37,090
specification got introduced at version

00:19:33,639 --> 00:19:38,950
2.6 so obviously you have to start at

00:19:37,090 --> 00:19:41,169
one particular version so what Tony

00:19:38,950 --> 00:19:43,149
showed you is version 2.5 and if you go

00:19:41,169 --> 00:19:45,970
to the version 2.6 then the new

00:19:43,149 --> 00:19:48,789
specification for that has these small

00:19:45,970 --> 00:19:51,100
extensions and this is all about it so

00:19:48,789 --> 00:19:53,080
as part of Tony designing the swagger

00:19:51,100 --> 00:19:55,630
specification and now with the open API

00:19:53,080 --> 00:19:57,460
they kind of looked ahead and saw that

00:19:55,630 --> 00:19:59,500
there's going to be cases where people

00:19:57,460 --> 00:20:01,090
want to add something extra to the

00:19:59,500 --> 00:20:02,860
specification because you know you can't

00:20:01,090 --> 00:20:05,740
really think of everything ahead so

00:20:02,860 --> 00:20:08,710
these X dash are ways for you to

00:20:05,740 --> 00:20:10,870
essentially add a new annotation to the

00:20:08,710 --> 00:20:12,760
specification so we did that and then

00:20:10,870 --> 00:20:16,929
you another one is point since

00:20:12,760 --> 00:20:18,700
dependencies because one of the one of

00:20:16,929 --> 00:20:21,340
the things that we want to do in the TCK

00:20:18,700 --> 00:20:25,090
is to run it and be able to specify that

00:20:21,340 --> 00:20:28,990
oh when you try this Walker against this

00:20:25,090 --> 00:20:30,669
dck it failed at these operations so

00:20:28,990 --> 00:20:32,500
that way we'll know that the Booker did

00:20:30,669 --> 00:20:34,480
not implement the version but also which

00:20:32,500 --> 00:20:35,740
operation failed but obviously because

00:20:34,480 --> 00:20:37,720
the operations can kind of

00:20:35,740 --> 00:20:39,460
depend on each other this is a way for

00:20:37,720 --> 00:20:40,900
us to say there are dependencies of

00:20:39,460 --> 00:20:43,840
course operations so that's another one

00:20:40,900 --> 00:20:45,910
that we added this is kind of like a

00:20:43,840 --> 00:20:49,270
high-level overview there's actually a

00:20:45,910 --> 00:20:51,490
video of the demo not sure we have a lot

00:20:49,270 --> 00:20:53,800
of time to cover the whole video but

00:20:51,490 --> 00:20:55,840
there is a github I'll point you to it

00:20:53,800 --> 00:20:58,390
but the way to think of it is that we

00:20:55,840 --> 00:21:01,660
take the swagger specification like we

00:20:58,390 --> 00:21:03,550
have here and we use this thing called

00:21:01,660 --> 00:21:06,370
go swagger there's different sort of

00:21:03,550 --> 00:21:08,200
clients for a swagger in different

00:21:06,370 --> 00:21:10,000
languages we happen to have implemented

00:21:08,200 --> 00:21:13,210
all of this in go

00:21:10,000 --> 00:21:16,780
but you could have implemented it out of

00:21:13,210 --> 00:21:21,400
other ways and what we essentially

00:21:16,780 --> 00:21:24,340
created is a way to generate a TCK out

00:21:21,400 --> 00:21:26,320
of the swagger specification plus a

00:21:24,340 --> 00:21:28,090
series of templates for what the TCK

00:21:26,320 --> 00:21:30,490
looks like so what ends up happening

00:21:28,090 --> 00:21:33,220
when you run the generator is you get a

00:21:30,490 --> 00:21:35,700
new TCK or a test compatibility kit

00:21:33,220 --> 00:21:39,460
which is essentially a series of Ginkgo

00:21:35,700 --> 00:21:41,130
tests right so similar to how the rest

00:21:39,460 --> 00:21:46,750
of Cloud Foundry if you're familiar with

00:21:41,130 --> 00:21:48,250
say Diego or or Bosch agent or washing

00:21:46,750 --> 00:21:52,390
it a lot of the components that are

00:21:48,250 --> 00:21:56,080
written and go we use uncie's ginko and

00:21:52,390 --> 00:21:58,809
Omega framework to generate test cases

00:21:56,080 --> 00:22:01,179
so those test cases become the TCK and

00:21:58,809 --> 00:22:05,800
then you can take that and then spin up

00:22:01,179 --> 00:22:08,350
your serviceworker and run the test

00:22:05,800 --> 00:22:10,720
against that serviceworker there's very

00:22:08,350 --> 00:22:12,850
minimal specific configuration you have

00:22:10,720 --> 00:22:14,500
to do but you essentially do that and

00:22:12,850 --> 00:22:17,710
then at the end we tell you which

00:22:14,500 --> 00:22:20,679
version so this is the demo what I'll do

00:22:17,710 --> 00:22:23,500
is I don't have time for the whole demo

00:22:20,679 --> 00:22:25,600
but I will open it up and then show you

00:22:23,500 --> 00:22:30,460
towards the end what's happening is that

00:22:25,600 --> 00:22:33,190
we we show you here like how all of this

00:22:30,460 --> 00:22:37,929
thing gets set up and towards the end

00:22:33,190 --> 00:22:40,150
like I think maybe around here you can

00:22:37,929 --> 00:22:42,520
see that we run the test and at the end

00:22:40,150 --> 00:22:49,070
we you can see here where we specify

00:22:42,520 --> 00:22:51,980
that like for instance right here that

00:22:49,070 --> 00:22:56,090
the number of tests pass and that the

00:22:51,980 --> 00:22:58,820
TCK compliance is 2.6 but in 2.45 it's

00:22:56,090 --> 00:23:00,980
also 100% compliant if you go to the

00:22:58,820 --> 00:23:03,680
whole demo we show you how we take a

00:23:00,980 --> 00:23:05,870
service worker and modify it so that it

00:23:03,680 --> 00:23:09,200
is compatible with one version and then

00:23:05,870 --> 00:23:11,960
we make it uncomfortable or you start in

00:23:09,200 --> 00:23:13,280
you know not compatible with 2.6 because

00:23:11,960 --> 00:23:14,720
there is like a parameter that gets

00:23:13,280 --> 00:23:16,730
introduced into that six that is

00:23:14,720 --> 00:23:18,440
optional and then when you run the test

00:23:16,730 --> 00:23:20,870
it shows you that the test failed on

00:23:18,440 --> 00:23:23,330
this one and then you implement that run

00:23:20,870 --> 00:23:25,160
the test again and it passes so this is

00:23:23,330 --> 00:23:27,230
all available in the github project so

00:23:25,160 --> 00:23:29,350
I'll let you we have a pointer to this

00:23:27,230 --> 00:23:33,830
video so that you can take a look at it

00:23:29,350 --> 00:23:38,120
but we did more so let me get to that so

00:23:33,830 --> 00:23:47,660
what we also I guess this I need to get

00:23:38,120 --> 00:23:50,090
to so what we also did was to to look at

00:23:47,660 --> 00:23:53,630
well what else existed like this right

00:23:50,090 --> 00:23:55,670
to do a test compatibility kit also

00:23:53,630 --> 00:23:59,510
turns out that bluemix had a little bit

00:23:55,670 --> 00:24:02,810
of a set of tests that they ran against

00:23:59,510 --> 00:24:04,700
service workers but it exactly has the

00:24:02,810 --> 00:24:07,010
problem that we've been discussing where

00:24:04,700 --> 00:24:08,660
if you have a description and you're

00:24:07,010 --> 00:24:11,270
generating things from the description

00:24:08,660 --> 00:24:14,360
that you avoid the test was stuck in

00:24:11,270 --> 00:24:17,900
version 2.3 and why is because we

00:24:14,360 --> 00:24:19,970
basically IBM hired an intern and a set

00:24:17,900 --> 00:24:22,130
of interns to implement the test and

00:24:19,970 --> 00:24:24,050
then they implemented at the time they

00:24:22,130 --> 00:24:25,630
did their internship and then it's stuck

00:24:24,050 --> 00:24:29,540
there so you can now hire more engineers

00:24:25,630 --> 00:24:31,520
to go do more of that work or if we go

00:24:29,540 --> 00:24:34,010
with our approach every time you

00:24:31,520 --> 00:24:35,570
regenerate so that's that's the value of

00:24:34,010 --> 00:24:37,880
swagger right and we're not saying we're

00:24:35,570 --> 00:24:39,560
gonna replace engineers so it don't you

00:24:37,880 --> 00:24:41,630
know that's not the message here but

00:24:39,560 --> 00:24:45,620
there are series of things you know

00:24:41,630 --> 00:24:48,260
boilerplate code things like test where

00:24:45,620 --> 00:24:50,300
you are looking at a specification and

00:24:48,260 --> 00:24:52,010
you're trying to implement that or the

00:24:50,300 --> 00:24:55,820
server-side piece of it or the

00:24:52,010 --> 00:24:57,470
client-side piece of it we can fix that

00:24:55,820 --> 00:25:00,130
problem for you right we can make it a

00:24:57,470 --> 00:25:03,160
little bit easier

00:25:00,130 --> 00:25:05,770
so obviously one thing we wanted to do I

00:25:03,160 --> 00:25:08,800
come from research marmot is in research

00:25:05,770 --> 00:25:11,770
we did a survey to sort of figure out

00:25:08,800 --> 00:25:13,570
where people have their pain point and

00:25:11,770 --> 00:25:14,380
whether or not this would be a useful

00:25:13,570 --> 00:25:16,600
thing to them

00:25:14,380 --> 00:25:19,120
and what we found is most people thought

00:25:16,600 --> 00:25:21,730
it would be very interesting and most

00:25:19,120 --> 00:25:23,980
people from the results and you can find

00:25:21,730 --> 00:25:25,870
all of this online we're not doing

00:25:23,980 --> 00:25:27,880
anything like this they were essentially

00:25:25,870 --> 00:25:29,620
either implementing their own tests like

00:25:27,880 --> 00:25:31,720
we're doing in bluemix or some of them

00:25:29,620 --> 00:25:34,180
were not even doing that so you would

00:25:31,720 --> 00:25:36,790
bring on a service broker that you see

00:25:34,180 --> 00:25:38,500
in your platform i support version 2.6

00:25:36,790 --> 00:25:40,330
and you have no idea if that service

00:25:38,500 --> 00:25:42,910
worker is gonna support that version or

00:25:40,330 --> 00:25:44,560
like when next version 2.7 how many of

00:25:42,910 --> 00:25:46,240
your service workers are implementing

00:25:44,560 --> 00:25:48,310
the next version right so so those are

00:25:46,240 --> 00:25:50,170
the issues that we found out so you can

00:25:48,310 --> 00:25:52,000
go through the survey and and you'll see

00:25:50,170 --> 00:25:54,760
that overall most people thought that

00:25:52,000 --> 00:25:57,790
they would be it would have they found

00:25:54,760 --> 00:25:59,710
this work to be useful so what I want to

00:25:57,790 --> 00:26:02,770
ask you and we'll stuff for some

00:25:59,710 --> 00:26:05,710
question is you know go explore you know

00:26:02,770 --> 00:26:07,600
not only swagger but also the CF swagger

00:26:05,710 --> 00:26:09,250
it's essentially if you do a search for

00:26:07,600 --> 00:26:12,640
CF swagger you'll find it it's

00:26:09,250 --> 00:26:15,010
github.com cloud foundry incubator CF

00:26:12,640 --> 00:26:17,860
swagger and then let us know I mean come

00:26:15,010 --> 00:26:20,710
to the slack you know you'll find a

00:26:17,860 --> 00:26:23,020
channel also called CF swagger and and

00:26:20,710 --> 00:26:25,390
let's discuss so let me thank you and

00:26:23,020 --> 00:26:28,510
see if you have any questions that we

00:26:25,390 --> 00:26:30,780
can try to help answer so thanks very

00:26:28,510 --> 00:26:30,780
time

00:26:35,020 --> 00:26:40,330
don't be shy there's a microphone even

00:26:38,230 --> 00:26:45,760
if you like you think it's useless -

00:26:40,330 --> 00:26:48,280
that's fine - no wait right another

00:26:45,760 --> 00:26:50,560
perfect demo max I guess yeah you did it

00:26:48,280 --> 00:26:51,530
yeah all right well thank you very much

00:26:50,560 --> 00:26:54,589
thanks a lot

00:26:51,530 --> 00:26:54,589

YouTube URL: https://www.youtube.com/watch?v=umBtzjvQUpQ


