Title: Lightning Talk: Cloud Foundry Revisited: UDP, VoIP, and Beyond! - Roman Swoszowski, Grape Up
Publication date: 2016-05-29
Playlist: Cloud Foundry Summit Santa Clara 2016
Description: 
	While Cloud Foundry is best suited for web applications and 12-factor apps, it also supports TCP traffic, making itself ready for e.g. IoT scenarios. But why not go further?

At Grape Up we experimented a bit with the CF platform and enabled it for UDP-based applications – first and foremost VoIP usecases. This lightning talk will show highlights of what we achieved and what new possibilities open for the Cloud Foundry platform.

Roman Swoszowski
Grape Up Inc.
Roman Swoszowski is CTO and VP Cloud Foundry Services at Grape Up. Responsible for developing the overall technology vision of the company with focus on Cloud Foundry and related cloud technologies. With almost 15 years of hands-on experience in the IT industry, he drives the company’s technology strategy and works with engineering teams to ensure continuous delivery of innovative software solutions.
Captions: 
	00:00:00,000 --> 00:00:04,740
hello everyone my name is Roman for

00:00:02,220 --> 00:00:07,109
suzuki and I'm responsible for cloud

00:00:04,740 --> 00:00:09,769
founder services said grape up where we

00:00:07,109 --> 00:00:12,120
do cloud native application development

00:00:09,769 --> 00:00:15,900
and also provide professional services

00:00:12,120 --> 00:00:17,640
around cloud foundry platform today I

00:00:15,900 --> 00:00:22,230
would like you all to take a slightly

00:00:17,640 --> 00:00:23,789
different Luke or wider look at Cloud

00:00:22,230 --> 00:00:29,070
Foundry it's a platform and its

00:00:23,789 --> 00:00:31,710
capabilities where we talk to our

00:00:29,070 --> 00:00:34,530
customers about called foundry there of

00:00:31,710 --> 00:00:37,070
course impressed and overwhelmed about

00:00:34,530 --> 00:00:39,360
its capabilities and once they calm down

00:00:37,070 --> 00:00:42,960
they usually ask this question what is

00:00:39,360 --> 00:00:45,780
actually for what's applications can I

00:00:42,960 --> 00:00:49,530
can run on it at what systems can I run

00:00:45,780 --> 00:00:53,250
on it well the the answer is well you

00:00:49,530 --> 00:00:55,890
can do anything of course there are

00:00:53,250 --> 00:00:58,370
certain types of applications that run

00:00:55,890 --> 00:01:02,760
out of the box within the cloud foundry

00:00:58,370 --> 00:01:06,000
the first one is web applications well

00:01:02,760 --> 00:01:08,939
those are 12 factor apps stateless

00:01:06,000 --> 00:01:11,549
scalable technology doesn't really

00:01:08,939 --> 00:01:15,320
matter here if it's Java if it's not--

00:01:11,549 --> 00:01:17,670
Ruby we get them all covered right but

00:01:15,320 --> 00:01:21,479
the limitation of web applications is

00:01:17,670 --> 00:01:24,869
that they support only HTTP traffic so

00:01:21,479 --> 00:01:27,390
there came this group of brilliant gasps

00:01:24,869 --> 00:01:29,549
from TCP routing team and they've added

00:01:27,390 --> 00:01:32,960
non-hd application support in Cloud

00:01:29,549 --> 00:01:36,060
Foundry they have added TCP routing

00:01:32,960 --> 00:01:38,040
therefore making it available and then

00:01:36,060 --> 00:01:40,079
capable of handling for instance IOT

00:01:38,040 --> 00:01:43,290
solutions where you have a network of

00:01:40,079 --> 00:01:46,439
sensors communicating with the platform

00:01:43,290 --> 00:01:49,740
over TCP sockets and providing their

00:01:46,439 --> 00:01:51,869
their data so we do those two types of

00:01:49,740 --> 00:01:55,590
applications we have a bunch of use

00:01:51,869 --> 00:01:58,740
cases and scenarios covered but can you

00:01:55,590 --> 00:02:02,130
go further so this was the question we

00:01:58,740 --> 00:02:04,649
were asking ourselves grape up as I

00:02:02,130 --> 00:02:06,750
mentioned we do mostly cloud native

00:02:04,649 --> 00:02:10,770
development but we also have a vast

00:02:06,750 --> 00:02:12,310
experience with building VoIP and UC

00:02:10,770 --> 00:02:14,680
solutions

00:02:12,310 --> 00:02:17,080
so we're wondering can we somehow

00:02:14,680 --> 00:02:21,250
combine those two areas of expertise and

00:02:17,080 --> 00:02:23,739
use cloud foundry as a platform to build

00:02:21,250 --> 00:02:26,470
a VoIP solution for instance so after

00:02:23,739 --> 00:02:29,319
initial research the answer seemed to be

00:02:26,470 --> 00:02:32,590
okay well we can do this but we were

00:02:29,319 --> 00:02:36,910
missing one major part we needed UDP

00:02:32,590 --> 00:02:41,290
routing because VoIP uses UDP for for

00:02:36,910 --> 00:02:44,410
media transport in the first place so we

00:02:41,290 --> 00:02:47,920
decided to go for POC and prepare POC

00:02:44,410 --> 00:02:51,420
and we try to add UDP support 22 cal

00:02:47,920 --> 00:02:57,280
foundry using existing tcp routing

00:02:51,420 --> 00:03:00,370
component basically what we did was we

00:02:57,280 --> 00:03:02,500
created a extensible load balancer

00:03:00,370 --> 00:03:04,900
interface and we used two different

00:03:02,500 --> 00:03:08,349
types of proxies for handling different

00:03:04,900 --> 00:03:10,569
types of traffic we use a proxy existing

00:03:08,349 --> 00:03:13,299
within cloud foundry to support to

00:03:10,569 --> 00:03:15,430
handle HTTP traffic but we added

00:03:13,299 --> 00:03:20,250
additional component we use the pen

00:03:15,430 --> 00:03:23,890
proxy to to handle TCP and UDP routing

00:03:20,250 --> 00:03:28,540
on the way alongside we we had to

00:03:23,890 --> 00:03:31,150
rebuild or redo modified slightly some

00:03:28,540 --> 00:03:33,040
other components like for instance we

00:03:31,150 --> 00:03:35,739
we've created see if router in place of

00:03:33,040 --> 00:03:39,069
TCP router and CF emitter in place of

00:03:35,739 --> 00:03:42,340
TCP emitter just to add this this UDP

00:03:39,069 --> 00:03:46,720
support but the real point here is that

00:03:42,340 --> 00:03:49,720
we managed actually to use called

00:03:46,720 --> 00:03:55,389
foundry as a back-end very simple back

00:03:49,720 --> 00:03:58,840
end for WebRTC application WebRTC client

00:03:55,389 --> 00:04:01,389
so we took a turn server which is a

00:03:58,840 --> 00:04:03,609
media relaying server we deployed in

00:04:01,389 --> 00:04:06,010
Diego and we were able to make a video

00:04:03,609 --> 00:04:08,799
call using cloud foundry as backend for

00:04:06,010 --> 00:04:12,069
this kind of of simple application of

00:04:08,799 --> 00:04:14,290
course this is not like a production

00:04:12,069 --> 00:04:17,950
production grade solution so this was

00:04:14,290 --> 00:04:19,530
just a POC to check if it's possible to

00:04:17,950 --> 00:04:23,880
use cloud foundry for this kind of

00:04:19,530 --> 00:04:23,880
applications there's a long road ahead

00:04:24,090 --> 00:04:34,780
but it confirms in it and it shows

00:04:28,660 --> 00:04:39,160
totally new possibilities ahead so just

00:04:34,780 --> 00:04:41,470
to name a few we have all applications

00:04:39,160 --> 00:04:43,810
and solutions using sip stack right sit

00:04:41,470 --> 00:04:46,060
as a controlling player or signaling

00:04:43,810 --> 00:04:48,220
layer we have medium length servers

00:04:46,060 --> 00:04:53,470
media streaming servers which again use

00:04:48,220 --> 00:04:55,570
RTP for media transport and of course we

00:04:53,470 --> 00:04:58,419
have web RTC infrastructure this is what

00:04:55,570 --> 00:05:02,740
we did actually but we could also tell

00:04:58,419 --> 00:05:05,229
that this could be applied to also IOT

00:05:02,740 --> 00:05:06,820
solutions where we need UDP based

00:05:05,229 --> 00:05:09,550
transport rather than TCP based

00:05:06,820 --> 00:05:12,849
transport anyway this of course is a

00:05:09,550 --> 00:05:14,500
very brief overview of what we managed

00:05:12,849 --> 00:05:17,320
to do with with UDP and and closed

00:05:14,500 --> 00:05:19,780
foundry if you're interested I'll be

00:05:17,320 --> 00:05:21,729
glad me and my team to to answer give

00:05:19,780 --> 00:05:24,699
you more details so please come over to

00:05:21,729 --> 00:05:26,680
our both and thank you very much for

00:05:24,699 --> 00:05:27,980
your attention and have a great welcome

00:05:26,680 --> 00:05:34,859
reception tonight thank you

00:05:27,980 --> 00:05:34,859

YouTube URL: https://www.youtube.com/watch?v=mgWvYR7rXYA


