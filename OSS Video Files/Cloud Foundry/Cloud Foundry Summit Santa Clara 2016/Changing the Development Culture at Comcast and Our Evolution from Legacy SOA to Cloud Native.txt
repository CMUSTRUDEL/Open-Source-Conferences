Title: Changing the Development Culture at Comcast and Our Evolution from Legacy SOA to Cloud Native
Publication date: 2016-05-29
Playlist: Cloud Foundry Summit Santa Clara 2016
Description: 
	Changing the Development Culture at Comcast and Our Evolution from Legacy SOA to Cloud Native - Nicholas Beenham and Todd Migliore, Comcast

The Enterprise Service Platform at Comcast processes over 200 million transactions per day, spanning the sales, ordering, provisioning, activation, billing, and payment domains. Join us to learn about how we changed the culture within our development teams and leveraged tools such as Pivotal Cloud Foundry and concepts such as TDD, continuous delivery and dev ops to reduce cycle times from months to hours. We will also discuss our ongoing evolution from legacy SOA to cloud native Microservices. This session will offer real world insight into some common challenges enterprises face as they migrate to the cloud and discuss strategies to overcome said challenges. 

Nick Beenham is a Senior Principal Engineer at Comcast. He works within the Application and Platform Services(APS) organization and has been with Comcast for nine years. He has had a variety of roles during his time at Comcast, beginning in operations and rotating through many of the departments within the organization. He has delivered talks internally at Comcast to his peers at internal conferences and working groups. He has worked on designing and implementing several platforms. Currently his main focus is on Continuous Delivery and Automation and he is currently working on systems and processes to accelerate the delivery of products to the market

Todd Migliore
Todd Migliore is a Senior Principal Architect at Comcast. He works within the Application and Platform Services (APS) organization and has been with Comcast for five years. His primary focus has been on defining the next generation architecture for the Enterprise Services Platform, which is built on top of Cloud Foundry. His background is in building distributed applications within the Enterprise Java space.
Captions: 
	00:00:00,030 --> 00:00:04,020
my name is Nick Bingham I'm here today

00:00:01,620 --> 00:00:06,210
to talk about chromecast otherwise known

00:00:04,020 --> 00:00:08,580
as the Arturs no internet company it

00:00:06,210 --> 00:00:10,740
seems some good news to start off with

00:00:08,580 --> 00:00:13,740
dr. Nick has volunteered to product test

00:00:10,740 --> 00:00:16,049
a new artisanal internet product we

00:00:13,740 --> 00:00:17,520
haven't told them yet so when we take

00:00:16,049 --> 00:00:20,520
him offline at least they can't complain

00:00:17,520 --> 00:00:21,270
about it all right so my name is Nick

00:00:20,520 --> 00:00:23,369
Nick Pinot

00:00:21,270 --> 00:00:25,199
I'm an engineer at Comcast I'm gonna

00:00:23,369 --> 00:00:27,029
leave my job title blank for just now

00:00:25,199 --> 00:00:29,849
because a lot of what I'm gonna talk

00:00:27,029 --> 00:00:30,660
about today was almost my own personal

00:00:29,849 --> 00:00:34,020
evolution

00:00:30,660 --> 00:00:36,270
it's the transitions and transformations

00:00:34,020 --> 00:00:37,410
that I went through are very similar to

00:00:36,270 --> 00:00:40,860
what a lot of people are doing at

00:00:37,410 --> 00:00:42,809
Comcast today I've been at Comcast for

00:00:40,860 --> 00:00:46,649
about 10 years and they tend to do a lot

00:00:42,809 --> 00:00:48,930
of different things so talking about the

00:00:46,649 --> 00:00:51,149
the enterprise service platform so what

00:00:48,930 --> 00:00:54,149
is it the enterprise service platform at

00:00:51,149 --> 00:00:56,160
Comcast is our sort of cornerstone

00:00:54,149 --> 00:00:58,109
back-office platform we run pretty much

00:00:56,160 --> 00:01:01,739
everything through it from provisioning

00:00:58,109 --> 00:01:03,870
services device services you pay your

00:01:01,739 --> 00:01:07,439
bills through the enterprise zone we

00:01:03,870 --> 00:01:10,619
roll trucks to customers it has a large

00:01:07,439 --> 00:01:12,479
footprint this is 500 over 500 physical

00:01:10,619 --> 00:01:16,710
servers spread across three data centers

00:01:12,479 --> 00:01:18,509
across the continental US the stack is

00:01:16,710 --> 00:01:21,990
pretty much all Oracle all the way down

00:01:18,509 --> 00:01:28,829
we run a WebLogic Java EE Oracle

00:01:21,990 --> 00:01:30,180
databases on the back end so the problem

00:01:28,829 --> 00:01:32,460
that faced us when we wanted to do our

00:01:30,180 --> 00:01:34,530
transformation to move from the old

00:01:32,460 --> 00:01:37,320
legacy so a platform unto something that

00:01:34,530 --> 00:01:40,590
was much more cloud native using cloud

00:01:37,320 --> 00:01:42,990
foundry was that we had a large legacy

00:01:40,590 --> 00:01:45,450
code base some of the code was over

00:01:42,990 --> 00:01:47,549
eight years old there's a mr. Karlson in

00:01:45,450 --> 00:01:50,220
the audience here I know he left us with

00:01:47,549 --> 00:01:57,479
some of that code walked away never to

00:01:50,220 --> 00:01:59,670
be seen again we had a lot of manual and

00:01:57,479 --> 00:02:02,310
people based processes so everything

00:01:59,670 --> 00:02:04,710
needed a ticket everything required an

00:02:02,310 --> 00:02:06,990
email required some sort of approval our

00:02:04,710 --> 00:02:09,390
deployments - sometimes took 3 weeks

00:02:06,990 --> 00:02:10,020
between database deployments updating

00:02:09,390 --> 00:02:12,480
schemas

00:02:10,020 --> 00:02:13,260
- rolling out large bundles of

00:02:12,480 --> 00:02:16,310
application

00:02:13,260 --> 00:02:19,110
all at once and in flipping switches so

00:02:16,310 --> 00:02:21,569
the cycle times were anything from a

00:02:19,110 --> 00:02:24,060
month to over three months to get

00:02:21,569 --> 00:02:27,989
features you know from ideation through

00:02:24,060 --> 00:02:30,120
to production the third a huge problem

00:02:27,989 --> 00:02:32,640
that we had was physical infrastructure

00:02:30,120 --> 00:02:37,500
so physical infrastructure is the enemy

00:02:32,640 --> 00:02:39,780
of scale looking back at the Golden Gate

00:02:37,500 --> 00:02:42,510
example where the guy gets up and paints

00:02:39,780 --> 00:02:44,040
that bridge every morning well we were

00:02:42,510 --> 00:02:46,140
doing that except when we got to the end

00:02:44,040 --> 00:02:48,180
of the bridge we went back to the start

00:02:46,140 --> 00:02:50,609
it took us three months to scale our

00:02:48,180 --> 00:02:53,430
platform so by the time we ordered our

00:02:50,609 --> 00:02:56,030
Hardware had it delivered racks tacked

00:02:53,430 --> 00:03:00,659
powered cables cooled in the data center

00:02:56,030 --> 00:03:03,480
it was time to start again our fourth

00:03:00,659 --> 00:03:05,700
big problem was co-mingled data and what

00:03:03,480 --> 00:03:08,519
I mean by that is people wanted to share

00:03:05,700 --> 00:03:09,900
data and they didn't want to separate

00:03:08,519 --> 00:03:14,549
them and they didn't want to assign an

00:03:09,900 --> 00:03:16,290
owner so it was an access pattern I

00:03:14,549 --> 00:03:18,120
almost like Stephen King could be proud

00:03:16,290 --> 00:03:20,280
of it was horrible

00:03:18,120 --> 00:03:23,549
and we couldn't change data underneath

00:03:20,280 --> 00:03:28,079
without maybe unintentionally impacting

00:03:23,549 --> 00:03:29,250
somebody else and the last one and this

00:03:28,079 --> 00:03:30,690
was one of the more interesting ones and

00:03:29,250 --> 00:03:32,579
it was one of the really hard ones to

00:03:30,690 --> 00:03:34,500
deal with is that we already had

00:03:32,579 --> 00:03:36,419
business like the BAU in the project

00:03:34,500 --> 00:03:40,889
teams and they were taking business

00:03:36,419 --> 00:03:43,079
requests and what we had to enable them

00:03:40,889 --> 00:03:44,819
without them losing velocity so we had

00:03:43,079 --> 00:03:46,680
to be very careful about how much change

00:03:44,819 --> 00:03:48,269
we could introduce at once and what

00:03:46,680 --> 00:03:51,780
their absorption and tolerance for

00:03:48,269 --> 00:03:53,819
change would be so in essence we were

00:03:51,780 --> 00:03:56,220
moving Chuck like a cloud native micro

00:03:53,819 --> 00:03:59,099
service model but we had to look like so

00:03:56,220 --> 00:04:02,099
we had to talk like so and we had to act

00:03:59,099 --> 00:04:07,199
like so and that presented its own set

00:04:02,099 --> 00:04:08,310
of challenges so our approach the first

00:04:07,199 --> 00:04:10,319
side was we knew was going to be

00:04:08,310 --> 00:04:12,930
cultural we had to start changing the

00:04:10,319 --> 00:04:14,220
way people thought about code how they

00:04:12,930 --> 00:04:17,430
thought about delivery the code the

00:04:14,220 --> 00:04:19,859
tooling that they used how they wrote

00:04:17,430 --> 00:04:21,930
that code so we were used to having

00:04:19,859 --> 00:04:24,150
product teams very much isolated very

00:04:21,930 --> 00:04:25,260
much siloed everybody had their own

00:04:24,150 --> 00:04:27,090
little job to do

00:04:25,260 --> 00:04:29,310
nobody really share

00:04:27,090 --> 00:04:31,230
there was no economies of scale when it

00:04:29,310 --> 00:04:34,830
came to things like libraries or plugins

00:04:31,230 --> 00:04:36,720
or development methodology even when you

00:04:34,830 --> 00:04:38,840
look at some of the CI CD platforms

00:04:36,720 --> 00:04:40,830
everyone had their own copy of Jenkins

00:04:38,840 --> 00:04:42,930
everyone had sometimes even their own

00:04:40,830 --> 00:04:45,240
copy a sonar artifactory things like

00:04:42,930 --> 00:04:47,010
that we wanted to bring a lot of people

00:04:45,240 --> 00:04:51,900
together we wanted them to start working

00:04:47,010 --> 00:04:54,150
in unison and collaborating and in the

00:04:51,900 --> 00:04:55,530
other side of this was a technical and

00:04:54,150 --> 00:04:57,750
the technical was a much easier problem

00:04:55,530 --> 00:04:59,820
to solve and one of the things we wanted

00:04:57,750 --> 00:05:01,979
to do was we wanted to innovate and we

00:04:59,820 --> 00:05:04,889
wanted to provide the feedback to us as

00:05:01,979 --> 00:05:06,960
fast as possible so we unshackled

00:05:04,889 --> 00:05:09,479
everybody we said we're no longer gonna

00:05:06,960 --> 00:05:11,490
be prescriptive and say you must do

00:05:09,479 --> 00:05:12,810
something a certain way we're going to

00:05:11,490 --> 00:05:14,190
give you a set of outcomes and we're

00:05:12,810 --> 00:05:17,070
going to define them as like the

00:05:14,190 --> 00:05:18,990
definition of done if you can meet all

00:05:17,070 --> 00:05:22,320
these outcomes then you have succeeded

00:05:18,990 --> 00:05:25,800
and how you succeed is up to you as long

00:05:22,320 --> 00:05:28,139
as you meet that the outcomes so

00:05:25,800 --> 00:05:30,600
everybody just ran oh God

00:05:28,139 --> 00:05:33,630
and what we thought was that we would

00:05:30,600 --> 00:05:35,250
end up with like lots of snowflakes and

00:05:33,630 --> 00:05:38,220
that didn't happen and I'll tell you why

00:05:35,250 --> 00:05:39,660
in a little bit so how we used to work

00:05:38,220 --> 00:05:42,900
now you know have a laugh at the

00:05:39,660 --> 00:05:45,720
firewalls but they are almost literal so

00:05:42,900 --> 00:05:47,550
we debt we heard and about firewalls we

00:05:45,720 --> 00:05:48,930
looked at things and we said what are

00:05:47,550 --> 00:05:50,789
these things so when I talk about

00:05:48,930 --> 00:05:52,800
firewall for communication I'm thinking

00:05:50,789 --> 00:05:55,380
like I have to send an email to somebody

00:05:52,800 --> 00:05:57,389
or I have to create a ticket you know

00:05:55,380 --> 00:05:59,430
how do I remove these frictions how do I

00:05:57,389 --> 00:06:02,190
remove these blocks and everybody has a

00:05:59,430 --> 00:06:06,150
label I'm a developer I write code you

00:06:02,190 --> 00:06:09,960
write tests you run tests or worse the

00:06:06,150 --> 00:06:10,680
QA says I write the test not you it

00:06:09,960 --> 00:06:12,450
works both ways

00:06:10,680 --> 00:06:14,430
and the operators were quietly busy

00:06:12,450 --> 00:06:16,319
working out how to replace the other two

00:06:14,430 --> 00:06:19,139
in peril

00:06:16,319 --> 00:06:21,089
and generally cleaning up after

00:06:19,139 --> 00:06:22,409
everybody we know and we would get onto

00:06:21,089 --> 00:06:26,039
the calls and all the fingers go like

00:06:22,409 --> 00:06:29,039
this and it's a it's the network oh no

00:06:26,039 --> 00:06:30,809
it's it's your test didn't pass and

00:06:29,039 --> 00:06:32,580
everyone who did end up blaming the DBA

00:06:30,809 --> 00:06:36,779
he would either have a fit or go home

00:06:32,580 --> 00:06:39,149
crying so what we wanted to do is we

00:06:36,779 --> 00:06:40,949
wanted to increase the velocity and we

00:06:39,149 --> 00:06:42,719
wanted to shorten those feedback loops

00:06:40,949 --> 00:06:46,169
because right now a feedback loop has to

00:06:42,719 --> 00:06:47,580
go around the whole circle and it took

00:06:46,169 --> 00:06:49,529
time it means some of these feedback

00:06:47,580 --> 00:06:51,029
loops were weeks long especially if

00:06:49,529 --> 00:06:53,330
someone went on vacation online an email

00:06:51,029 --> 00:06:56,580
was was left sitting in an inbox

00:06:53,330 --> 00:06:59,099
definitely suboptimal so the first thing

00:06:56,580 --> 00:07:00,389
we did is what we reorganized and we

00:06:59,099 --> 00:07:03,180
reorganized and we move people

00:07:00,389 --> 00:07:05,360
physically into the same geographic

00:07:03,180 --> 00:07:08,189
location to the same office into a pod

00:07:05,360 --> 00:07:10,319
and the part is about twelve people they

00:07:08,189 --> 00:07:11,339
sit round the edges and there's a big

00:07:10,319 --> 00:07:14,159
table in the middle of where they can

00:07:11,339 --> 00:07:16,259
have a phone call and a conference but

00:07:14,159 --> 00:07:19,619
that wasn't enough because we still got

00:07:16,259 --> 00:07:22,559
into the the scenario where I'm a

00:07:19,619 --> 00:07:26,219
developer I am a tester and I'm an

00:07:22,559 --> 00:07:28,469
operator what we had to do is we had to

00:07:26,219 --> 00:07:30,089
remove those labels completely from each

00:07:28,469 --> 00:07:32,580
other and that's where we reached out to

00:07:30,089 --> 00:07:34,649
pivotal and we asked for some help and

00:07:32,580 --> 00:07:35,909
so how do we do this they said well

00:07:34,649 --> 00:07:39,029
you're gonna do test-driven development

00:07:35,909 --> 00:07:42,269
and you're gonna do pair programming and

00:07:39,029 --> 00:07:45,119
I was like yes I've been pushing change

00:07:42,269 --> 00:07:46,559
a long time I was like we need to change

00:07:45,119 --> 00:07:47,909
we need to do this and we need to run

00:07:46,559 --> 00:07:50,009
continuous delivery and we need to do

00:07:47,909 --> 00:07:53,430
automated testing and everything else

00:07:50,009 --> 00:07:55,139
and in one day at the board with pivotal

00:07:53,430 --> 00:07:58,080
they said Nick you're gonna write some

00:07:55,139 --> 00:08:01,019
code and I'm like what no no no no I I

00:07:58,080 --> 00:08:03,149
push apps I don't write code and in that

00:08:01,019 --> 00:08:05,610
moment it was on that was my

00:08:03,149 --> 00:08:07,379
transformation because I got taken out

00:08:05,610 --> 00:08:11,759
of my comfort zone much like I am today

00:08:07,379 --> 00:08:14,430
and I was put into a space that I had no

00:08:11,759 --> 00:08:16,529
familiarity and at that point I'd been

00:08:14,430 --> 00:08:20,339
pushing a change to a lot of people

00:08:16,529 --> 00:08:22,369
other people all right and it gave me a

00:08:20,339 --> 00:08:25,259
huge amount of empathy for how they felt

00:08:22,369 --> 00:08:27,870
this is you know so pushing changes like

00:08:25,259 --> 00:08:28,950
I was making people miserable because I

00:08:27,870 --> 00:08:32,669
was like wow

00:08:28,950 --> 00:08:34,919
is horrible so we started pairing and

00:08:32,669 --> 00:08:37,560
that it was the right way and it was a

00:08:34,919 --> 00:08:40,380
like an epiphany to a lot of us this is

00:08:37,560 --> 00:08:43,410
how we remove the labels so what we

00:08:40,380 --> 00:08:45,900
ended up was with team one unit all

00:08:43,410 --> 00:08:49,670
cross-trained everybody knew everybody's

00:08:45,900 --> 00:08:52,860
job at least to a functional extent and

00:08:49,670 --> 00:08:54,390
once we had that team when we grande we

00:08:52,860 --> 00:08:57,780
decided we had the shared responsibility

00:08:54,390 --> 00:09:00,870
to shared accountability to succeed as

00:08:57,780 --> 00:09:03,060
one so what we when we got on to calls

00:09:00,870 --> 00:09:04,410
when we were troubleshooting issues and

00:09:03,060 --> 00:09:07,680
bridges and production I would he just

00:09:04,410 --> 00:09:09,450
we didn't have this there was no

00:09:07,680 --> 00:09:11,670
arguments we've all seen this I had this

00:09:09,450 --> 00:09:14,250
printed in my cube for a long time

00:09:11,670 --> 00:09:16,590
because that was themself just to teach

00:09:14,250 --> 00:09:18,540
me like you know what you all succeed

00:09:16,590 --> 00:09:19,800
and fail together and when you have that

00:09:18,540 --> 00:09:21,060
thing in your all have that shared

00:09:19,800 --> 00:09:23,580
accountability and that shared

00:09:21,060 --> 00:09:25,320
responsibility then you start to succeed

00:09:23,580 --> 00:09:27,390
and you don't run into these problems

00:09:25,320 --> 00:09:33,030
and the DBA doesn't go away crying at

00:09:27,390 --> 00:09:35,070
night so once we'd finished all this we

00:09:33,030 --> 00:09:37,020
had to standardize so this is great

00:09:35,070 --> 00:09:39,510
we've done this we've transformed the

00:09:37,020 --> 00:09:42,090
single team twelve people how do we rule

00:09:39,510 --> 00:09:43,350
it out to an audience of six hundred

00:09:42,090 --> 00:09:45,960
developers and seven hundred

00:09:43,350 --> 00:09:47,970
applications we couldn't we can't do

00:09:45,960 --> 00:09:49,770
snowflakes at this point we have to be

00:09:47,970 --> 00:09:52,920
able to serve and we can't do it one at

00:09:49,770 --> 00:09:54,360
a time there's just too many people so

00:09:52,920 --> 00:09:56,670
what we have started to do is we started

00:09:54,360 --> 00:09:57,360
to look for opportunities to standardize

00:09:56,670 --> 00:10:00,360
for scale

00:09:57,360 --> 00:10:03,630
now these took many forms then I'm gonna

00:10:00,360 --> 00:10:05,880
go back to the watercooler chat when we

00:10:03,630 --> 00:10:07,650
said people like with outcomes they said

00:10:05,880 --> 00:10:09,420
we don't care how you do it as long as

00:10:07,650 --> 00:10:12,540
you meet those outcomes and what we

00:10:09,420 --> 00:10:15,480
found was that people went out and and

00:10:12,540 --> 00:10:16,920
I'll give you an example so we wanted to

00:10:15,480 --> 00:10:18,510
move away from the relational stores

00:10:16,920 --> 00:10:20,520
into more like no sequel highly

00:10:18,510 --> 00:10:22,470
available stores again we didn't tell

00:10:20,520 --> 00:10:26,940
you how you were going to do it you just

00:10:22,470 --> 00:10:28,890
said go and do it what happened was that

00:10:26,940 --> 00:10:32,010
people went out but they didn't

00:10:28,890 --> 00:10:33,660
collaborate over things like slack they

00:10:32,010 --> 00:10:36,150
started to collaborate just by talking

00:10:33,660 --> 00:10:38,640
to their neighbors and this was really

00:10:36,150 --> 00:10:41,760
evident so as things started to coalesce

00:10:38,640 --> 00:10:42,840
around technologies the East Coast

00:10:41,760 --> 00:10:44,640
coalesced around

00:10:42,840 --> 00:10:49,020
space and the westcoast coalesced around

00:10:44,640 --> 00:10:50,760
MongoDB almost exclusively because the

00:10:49,020 --> 00:10:52,740
thought the worry that we had who said

00:10:50,760 --> 00:10:54,690
whom he said everybody go out and do

00:10:52,740 --> 00:10:56,610
your thing was that we would have a

00:10:54,690 --> 00:10:59,670
hundred snowflakes come back and we

00:10:56,610 --> 00:11:02,340
didn't we had to so that would but that

00:10:59,670 --> 00:11:05,370
wasn't just for that technology or that

00:11:02,340 --> 00:11:07,110
area this happened that when we moved to

00:11:05,370 --> 00:11:10,020
Gradle everybody moved to greater we

00:11:07,110 --> 00:11:12,840
started writing plugins and we started

00:11:10,020 --> 00:11:15,120
raising the floor for entry or sorry

00:11:12,840 --> 00:11:17,880
lowering the bar for entry where you

00:11:15,120 --> 00:11:19,950
could inherit a lot of functional stuff

00:11:17,880 --> 00:11:22,440
like token caching in the security

00:11:19,950 --> 00:11:24,720
library concise logging frameworks

00:11:22,440 --> 00:11:25,950
everything like that so when the

00:11:24,720 --> 00:11:28,350
business teams that we were going to

00:11:25,950 --> 00:11:30,360
roll on came in all they had to do was

00:11:28,350 --> 00:11:32,670
run a little generator and drop in their

00:11:30,360 --> 00:11:34,800
business logic everything else was wired

00:11:32,670 --> 00:11:37,020
in for them even though into

00:11:34,800 --> 00:11:38,700
provisioning the OAuth tokens we ended

00:11:37,020 --> 00:11:42,810
up going with a ping federate solution

00:11:38,700 --> 00:11:45,390
that was all managed for you we did have

00:11:42,810 --> 00:11:47,790
a couple of patterns we had to solve we

00:11:45,390 --> 00:11:49,950
did want to compose those large

00:11:47,790 --> 00:11:52,350
monolithic sewer services back into

00:11:49,950 --> 00:11:55,020
micro services so but again we weren't

00:11:52,350 --> 00:11:58,230
allowed to have too much impact to the

00:11:55,020 --> 00:12:01,650
current teams and that was at Harbor so

00:11:58,230 --> 00:12:04,830
this was my epiphany the ass dusty we

00:12:01,650 --> 00:12:06,240
had to create a router so we created

00:12:04,830 --> 00:12:08,310
this little ESP router it's very

00:12:06,240 --> 00:12:11,610
lightweight it's written in go and which

00:12:08,310 --> 00:12:13,530
will make just a hick so happy and what

00:12:11,610 --> 00:12:15,510
it does is it just looks it we pass it

00:12:13,530 --> 00:12:17,160
in a regular expression it looks through

00:12:15,510 --> 00:12:19,560
this the sort message and it says if

00:12:17,160 --> 00:12:20,730
you're this method you go to service a

00:12:19,560 --> 00:12:22,380
and if you're another method you can go

00:12:20,730 --> 00:12:24,420
to service B so we could implement a

00:12:22,380 --> 00:12:27,770
Strangler type pattern to do start

00:12:24,420 --> 00:12:32,190
decomposing our services while remaining

00:12:27,770 --> 00:12:33,720
transparent to our clients now we do so

00:12:32,190 --> 00:12:35,460
those service a and service B so they

00:12:33,720 --> 00:12:37,650
were written and recipe what we did is

00:12:35,460 --> 00:12:39,780
we put soap facades on them now if you

00:12:37,650 --> 00:12:41,490
want new functionality that's not going

00:12:39,780 --> 00:12:43,890
to go into the facade so we have to have

00:12:41,490 --> 00:12:47,370
something to get people to move towards

00:12:43,890 --> 00:12:49,320
the the restful side of the house and in

00:12:47,370 --> 00:12:51,150
for the commingled dealer this is a

00:12:49,320 --> 00:12:54,090
rough representation of what we did

00:12:51,150 --> 00:12:55,290
first thing we did we just alright if

00:12:54,090 --> 00:12:57,030
it's for firewall rules to see who

00:12:55,290 --> 00:12:59,340
screams

00:12:57,030 --> 00:13:01,080
and then we put in an access there these

00:12:59,340 --> 00:13:04,740
are common patterns these aren't new

00:13:01,080 --> 00:13:07,050
things but to implement this was pain

00:13:04,740 --> 00:13:09,030
and suffering it was we had a lot it was

00:13:07,050 --> 00:13:11,940
a large fight because people didn't want

00:13:09,030 --> 00:13:14,310
to change so going back to my newly

00:13:11,940 --> 00:13:16,650
found empathy for people undergoing

00:13:14,310 --> 00:13:22,470
change you know we worked through it and

00:13:16,650 --> 00:13:24,240
we work through it together so I'm gonna

00:13:22,470 --> 00:13:26,610
cover some of the technology pieces now

00:13:24,240 --> 00:13:29,730
I'll just quickly because I know a lot

00:13:26,610 --> 00:13:31,440
of us have been at a lot of talks in the

00:13:29,730 --> 00:13:34,260
last couple of days me you tend to talk

00:13:31,440 --> 00:13:36,060
about the same things so the platform we

00:13:34,260 --> 00:13:38,700
went from WebLogic to Cloud Foundry so

00:13:36,060 --> 00:13:39,750
we also needed to scale the capacity

00:13:38,700 --> 00:13:41,610
because we're going to probably need

00:13:39,750 --> 00:13:43,200
more capacity and Cloud Foundry than we

00:13:41,610 --> 00:13:44,670
did it but then we did in way of logic

00:13:43,200 --> 00:13:46,830
just through the decomposition we're

00:13:44,670 --> 00:13:50,070
gonna be making more service calls so

00:13:46,830 --> 00:13:52,050
that 250 million a day is probably going

00:13:50,070 --> 00:13:54,180
to turn into maybe 700 million a day by

00:13:52,050 --> 00:13:57,810
the time we break everything down which

00:13:54,180 --> 00:14:02,220
will make Greg very happy our data is

00:13:57,810 --> 00:14:03,690
moving from Oracle into a no sequel

00:14:02,220 --> 00:14:05,880
store most of that is going to go to

00:14:03,690 --> 00:14:07,800
couch base we implemented things like

00:14:05,880 --> 00:14:10,440
cross data center replication to make it

00:14:07,800 --> 00:14:11,490
available around the country and then

00:14:10,440 --> 00:14:13,890
the very one becomes quite an

00:14:11,490 --> 00:14:15,540
interesting one so the old way of doing

00:14:13,890 --> 00:14:17,460
thing was everything was IP based we

00:14:15,540 --> 00:14:19,860
knew all the IPS of our consumers so we

00:14:17,460 --> 00:14:22,560
could wrote them to like the farms based

00:14:19,860 --> 00:14:23,610
on their IP so service the service calls

00:14:22,560 --> 00:14:26,370
that that's not gonna work in cloud

00:14:23,610 --> 00:14:29,010
foundry anymore so we came up with this

00:14:26,370 --> 00:14:30,750
idea of consumer base drive team so we

00:14:29,010 --> 00:14:34,170
know who you are we put a header into

00:14:30,750 --> 00:14:36,600
your IP into your header into your

00:14:34,170 --> 00:14:39,300
request and we can look it up and we can

00:14:36,600 --> 00:14:42,750
write you too generic pools so we can we

00:14:39,300 --> 00:14:44,610
have consumer isolation at least on like

00:14:42,750 --> 00:14:46,320
a pool level so that could be within a

00:14:44,610 --> 00:14:48,660
space or it could be within an org and

00:14:46,320 --> 00:14:50,430
then we can have some sort of isolation

00:14:48,660 --> 00:14:52,200
to stop maybe some of the back of the

00:14:50,430 --> 00:14:57,300
heavier consumers over running some of

00:14:52,200 --> 00:14:58,530
the smaller ones and in a delivery stack

00:14:57,300 --> 00:15:02,270
and I've covered some of this already

00:14:58,530 --> 00:15:04,680
and talking we made some changes around

00:15:02,270 --> 00:15:06,870
continuous delivery when we went to

00:15:04,680 --> 00:15:09,660
Jenkins and then we went to go CD and

00:15:06,870 --> 00:15:13,410
that was an interesting exercise Wow

00:15:09,660 --> 00:15:17,640
Jenkins just decided to stop working now

00:15:13,410 --> 00:15:20,520
we're gonna leave it at that and we had

00:15:17,640 --> 00:15:21,810
nothing left in the toolbox we went to

00:15:20,520 --> 00:15:24,540
reach for the tool and it wasn't there

00:15:21,810 --> 00:15:26,040
and that was that was a big warning sign

00:15:24,540 --> 00:15:28,560
for us and I was like no we're not gonna

00:15:26,040 --> 00:15:29,880
do that again so going forward we we

00:15:28,560 --> 00:15:32,850
started building a run way of always

00:15:29,880 --> 00:15:34,290
having the next tool ready in the box we

00:15:32,850 --> 00:15:35,700
don't want to spend the time we had to

00:15:34,290 --> 00:15:37,470
spend moving from one platform to

00:15:35,700 --> 00:15:40,800
another to look for pipelining

00:15:37,470 --> 00:15:43,980
functionality and and other things again

00:15:40,800 --> 00:15:46,620
so when I come back I circle back around

00:15:43,980 --> 00:15:49,350
to that topic towards the end the build

00:15:46,620 --> 00:15:51,480
we move from maven to Gradle Gradle

00:15:49,350 --> 00:15:53,550
gives us a lot more flexibility gives us

00:15:51,480 --> 00:15:55,860
the opportunity to create plugins again

00:15:53,550 --> 00:15:57,540
to raise that bar you know lower the

00:15:55,860 --> 00:15:59,730
bike you want to call it raise the bar I

00:15:57,540 --> 00:16:02,400
want to lower that bar to entry allowed

00:15:59,730 --> 00:16:05,250
people you know to adopt the frameworks

00:16:02,400 --> 00:16:08,490
as as easily as possible and our

00:16:05,250 --> 00:16:10,470
deployments move from those big bundle

00:16:08,490 --> 00:16:12,990
scripts we would push out on mass and do

00:16:10,470 --> 00:16:17,010
database updates and it's all driven by

00:16:12,990 --> 00:16:19,410
our CI platform now in go CD everything

00:16:17,010 --> 00:16:21,870
is driven by plugins the fact that Cloud

00:16:19,410 --> 00:16:23,220
Foundry gives you such a rich API to

00:16:21,870 --> 00:16:24,930
write your own deployment methods

00:16:23,220 --> 00:16:29,070
essentially has allowed us to do some

00:16:24,930 --> 00:16:30,540
quite creative things so I know quite

00:16:29,070 --> 00:16:33,300
proud of this one so this is our zero

00:16:30,540 --> 00:16:34,560
downtime deployment plugin they are

00:16:33,300 --> 00:16:36,720
going through the process of open

00:16:34,560 --> 00:16:38,310
sourcing and I'll give a shout out in

00:16:36,720 --> 00:16:41,520
the Cloud Foundry slack channels when

00:16:38,310 --> 00:16:44,250
they finally get through legal what we

00:16:41,520 --> 00:16:46,200
wanted to do is we wanted to deploy our

00:16:44,250 --> 00:16:48,210
apps in a zero downtime fashion so

00:16:46,200 --> 00:16:50,720
there's a chap a pivotal called Joshua

00:16:48,210 --> 00:16:53,490
croc I hope I got his name right

00:16:50,720 --> 00:16:55,410
pronouncing right you were a really cool

00:16:53,490 --> 00:16:57,560
scale of a plug-in and it wanted to

00:16:55,410 --> 00:17:00,420
exactly what it wanted us to do we could

00:16:57,560 --> 00:17:03,780
scale over our apps without causing

00:17:00,420 --> 00:17:05,640
outages the way we did it first is we we

00:17:03,780 --> 00:17:07,680
would deploy one app and then we would

00:17:05,640 --> 00:17:09,090
deploy another one and on the same route

00:17:07,680 --> 00:17:11,310
and one would come up and one would go

00:17:09,090 --> 00:17:13,530
down now when we were running at about

00:17:11,310 --> 00:17:16,560
30,000 transactions a second and 80

00:17:13,530 --> 00:17:18,270
instances of one application as soon as

00:17:16,560 --> 00:17:20,280
that first one came up everything went

00:17:18,270 --> 00:17:22,470
down so we ended up with an eight-minute

00:17:20,280 --> 00:17:24,760
outage an unhappy customer

00:17:22,470 --> 00:17:26,740
so we had to go back and we had to sort

00:17:24,760 --> 00:17:29,530
of rethink how do we roll it out in a

00:17:26,740 --> 00:17:32,620
less impactful way and so the zero

00:17:29,530 --> 00:17:35,440
downtime using Joshua's plugin and then

00:17:32,620 --> 00:17:37,450
what we did is we extended that so we

00:17:35,440 --> 00:17:40,750
wrapped it and we we manage our routes

00:17:37,450 --> 00:17:43,510
so you push your app your app comes in

00:17:40,750 --> 00:17:47,410
it maps onto the rope it'll roll over

00:17:43,510 --> 00:17:49,450
and then it'll clean up the old app we

00:17:47,410 --> 00:17:51,610
head out to give you some context here

00:17:49,450 --> 00:17:53,020
so we had a defect request and this goes

00:17:51,610 --> 00:17:54,580
towards the cycle team as well

00:17:53,020 --> 00:17:56,650
we the defect request came in at 11

00:17:54,580 --> 00:17:58,299
o'clock in the morning we accidentally

00:17:56,650 --> 00:18:01,299
deployed it to production at 4 o'clock

00:17:58,299 --> 00:18:03,100
in the afternoon so not only did we take

00:18:01,299 --> 00:18:06,100
a three-month cycle time and reduce it

00:18:03,100 --> 00:18:07,480
to hours we acted there we managed to

00:18:06,100 --> 00:18:13,450
deploy and then have to go and ask for

00:18:07,480 --> 00:18:15,760
forgiveness later the canary deployment

00:18:13,450 --> 00:18:17,530
was in it was then an extension of the

00:18:15,760 --> 00:18:19,870
zero downtime diploma and what we wanted

00:18:17,530 --> 00:18:21,280
to do was we wanted to be able to say I

00:18:19,870 --> 00:18:22,990
want to deploy one instance of an

00:18:21,280 --> 00:18:26,049
application and I wanted to pass that

00:18:22,990 --> 00:18:27,400
URL back to my CI platform which will

00:18:26,049 --> 00:18:28,390
then run all the contract tests etc

00:18:27,400 --> 00:18:30,100
against it

00:18:28,390 --> 00:18:32,740
and then promote that version into

00:18:30,100 --> 00:18:34,360
production so this allows us to pre

00:18:32,740 --> 00:18:36,970
stage a lot of applications we have

00:18:34,360 --> 00:18:38,020
manual triggers in the promote stage but

00:18:36,970 --> 00:18:41,080
again it will deploy the application

00:18:38,020 --> 00:18:43,750
pass it back run the tests and then

00:18:41,080 --> 00:18:46,030
remap the routes you know to big make it

00:18:43,750 --> 00:18:48,669
live and this will hopefully I'll be

00:18:46,030 --> 00:18:52,840
coming up paths for open-source you know

00:18:48,669 --> 00:18:55,120
and then in the coming weeks a couple of

00:18:52,840 --> 00:18:57,669
the other smaller pieces that we added

00:18:55,120 --> 00:19:00,850
in was we added in a recycle plugin so

00:18:57,669 --> 00:19:04,720
some of our consumers like to use Jersey

00:19:00,850 --> 00:19:07,419
for some reason or other and given that

00:19:04,720 --> 00:19:09,010
to propagate changes too we had to

00:19:07,419 --> 00:19:11,559
restart it again we didn't want to

00:19:09,010 --> 00:19:14,110
restart everything up there at once so

00:19:11,559 --> 00:19:16,840
there's a restart instance method on the

00:19:14,110 --> 00:19:19,480
CLI which takes a an argument opener

00:19:16,840 --> 00:19:20,860
yeah like an array index so we just

00:19:19,480 --> 00:19:23,410
wrapped that in a plugin so he just

00:19:20,860 --> 00:19:24,820
cycles through the array spins when up

00:19:23,410 --> 00:19:26,559
takes one down and spins when up takes

00:19:24,820 --> 00:19:28,210
one down you can pull in your property

00:19:26,559 --> 00:19:31,270
changes and with our impact to your

00:19:28,210 --> 00:19:33,309
users and in the other piece that we

00:19:31,270 --> 00:19:35,270
wrote was a scalar service and again

00:19:33,309 --> 00:19:37,610
this is all gonna be up

00:19:35,270 --> 00:19:39,440
our open-source github as soon as it

00:19:37,610 --> 00:19:40,850
goes through but what we wanted to do is

00:19:39,440 --> 00:19:44,290
we wanted to give the opportunity for

00:19:40,850 --> 00:19:47,510
third-party and remote applications

00:19:44,290 --> 00:19:49,910
access into the foundation to do things

00:19:47,510 --> 00:19:51,590
like so our use case here was to tie

00:19:49,910 --> 00:19:54,650
into our monitoring system which is done

00:19:51,590 --> 00:19:56,390
by app dynamics so we tied in app

00:19:54,650 --> 00:19:58,220
dynamics triggers an event say on how

00:19:56,390 --> 00:20:03,320
you load which will then scale the

00:19:58,220 --> 00:20:05,929
application so what's on the horizon for

00:20:03,320 --> 00:20:07,790
us so still in our to-do list this

00:20:05,929 --> 00:20:10,370
change management a lot of external

00:20:07,790 --> 00:20:14,990
processes require tickets and we hate it

00:20:10,370 --> 00:20:16,970
and it slows us down so how do we reduce

00:20:14,990 --> 00:20:18,200
the risk and keep them happy keep

00:20:16,970 --> 00:20:20,809
security happy with things like

00:20:18,200 --> 00:20:23,780
compliance and manage that change lock

00:20:20,809 --> 00:20:25,040
and that is one the one the ones we're

00:20:23,780 --> 00:20:26,179
sort of working through right now and

00:20:25,040 --> 00:20:27,679
it's not an easy problem to solve

00:20:26,179 --> 00:20:29,929
because a lot of people like to

00:20:27,679 --> 00:20:30,860
categorize all the changes and this is

00:20:29,929 --> 00:20:33,110
all the changes that are going to go

00:20:30,860 --> 00:20:34,910
tonight and this is all the changes are

00:20:33,110 --> 00:20:36,350
going to go tomorrow they don't like us

00:20:34,910 --> 00:20:39,550
using an API because we said we just

00:20:36,350 --> 00:20:41,990
create a ticket every day just in case

00:20:39,550 --> 00:20:42,860
so we could just deploy any one so

00:20:41,990 --> 00:20:45,170
that's what some of some of our

00:20:42,860 --> 00:20:47,090
challenges around that onboarding we

00:20:45,170 --> 00:20:49,220
have a lot more teams so we did six

00:20:47,090 --> 00:20:52,490
teams last year total we have another

00:20:49,220 --> 00:20:55,520
dozen to go in the end there'll be about

00:20:52,490 --> 00:20:57,559
140 services migrating to the platform

00:20:55,520 --> 00:21:01,130
some will be retired some will be

00:20:57,559 --> 00:21:05,480
eliminated some will invest more in and

00:21:01,130 --> 00:21:07,429
some will just tolerate we're exploring

00:21:05,480 --> 00:21:09,320
the use of concourse I mentioned I think

00:21:07,429 --> 00:21:11,210
I mentioned this before one of the

00:21:09,320 --> 00:21:13,610
things we want to start doing is as we

00:21:11,210 --> 00:21:16,160
started rolling at go CD we hit a a sort

00:21:13,610 --> 00:21:17,660
of vertical scale limit where if too

00:21:16,160 --> 00:21:19,250
many pipelines the uiv start to slow

00:21:17,660 --> 00:21:21,530
down we had to start rubber-stamping

00:21:19,250 --> 00:21:24,170
them out so right now we have a bit 12

00:21:21,530 --> 00:21:27,140
deployments of go CD for various teams

00:21:24,170 --> 00:21:29,270
that we lose that sort of government and

00:21:27,140 --> 00:21:31,130
some consistency across the platform

00:21:29,270 --> 00:21:32,450
allowed point so that is one of the

00:21:31,130 --> 00:21:34,490
reasons we want to start looking at use

00:21:32,450 --> 00:21:38,150
concourse and then actually deploy that

00:21:34,490 --> 00:21:39,800
as a service to people so again or you

00:21:38,150 --> 00:21:41,270
you commit your code and that's the last

00:21:39,800 --> 00:21:42,710
time you worry about it you don't have

00:21:41,270 --> 00:21:44,630
you don't need to worry about this your

00:21:42,710 --> 00:21:47,090
CI CI solution anymore we'll provide

00:21:44,630 --> 00:21:48,110
that for you we'll provide templates

00:21:47,090 --> 00:21:51,590
that you can

00:21:48,110 --> 00:21:53,000
and tokenize and move forward and the

00:21:51,590 --> 00:21:56,330
last ones that my little sort of fun

00:21:53,000 --> 00:21:57,830
side project we I was on a couple of

00:21:56,330 --> 00:21:58,940
calls where we were they were asking us

00:21:57,830 --> 00:22:00,380
is what's the state of this application

00:21:58,940 --> 00:22:02,270
and to me that just seemed like a

00:22:00,380 --> 00:22:04,610
ludicrous ask I was like I wouldn't mean

00:22:02,270 --> 00:22:07,610
you don't know why are you asking a

00:22:04,610 --> 00:22:11,000
human about the state of a machine so

00:22:07,610 --> 00:22:12,620
and everybody and usually outages don't

00:22:11,000 --> 00:22:14,929
happen when we want them to happen like

00:22:12,620 --> 00:22:17,900
when we're in the office you know we

00:22:14,929 --> 00:22:19,700
tend to be in other places so I look to

00:22:17,900 --> 00:22:21,049
integrate we wrote a little bar just as

00:22:19,700 --> 00:22:22,490
a proof of concept and how do we

00:22:21,049 --> 00:22:24,919
integrate this with slack which is our

00:22:22,490 --> 00:22:27,049
sort of collaboration tool so we can ask

00:22:24,919 --> 00:22:30,320
Marvin which is somewhat appropriate

00:22:27,049 --> 00:22:31,730
seeing as its total day to day how we

00:22:30,320 --> 00:22:33,049
know what's the status on my app we

00:22:31,730 --> 00:22:34,460
integrated him with ansible

00:22:33,049 --> 00:22:36,740
so we can run things like ansible play

00:22:34,460 --> 00:22:38,330
Brooks he's integrated with that scalar

00:22:36,740 --> 00:22:40,460
service from before so we can get health

00:22:38,330 --> 00:22:42,290
checks and status checks reported right

00:22:40,460 --> 00:22:47,990
back from Cloud Foundry

00:22:42,290 --> 00:22:49,760
to slack and I guess this is I came

00:22:47,990 --> 00:22:51,590
across I wanted something to sort of tie

00:22:49,760 --> 00:22:54,200
everything together and sort of our

00:22:51,590 --> 00:22:56,030
journey and I'm a big Terry planchet fan

00:22:54,200 --> 00:22:58,100
and I came across this quote always be

00:22:56,030 --> 00:23:01,730
wary of any helpful item that weighs

00:22:58,100 --> 00:23:04,370
less than its operating manual I think

00:23:01,730 --> 00:23:05,570
we have a lot of Swiss Army knives we

00:23:04,370 --> 00:23:07,669
have a lot of things that want to do

00:23:05,570 --> 00:23:09,880
everything and do nothing terribly well

00:23:07,669 --> 00:23:12,230
and this is how I sort of feel about

00:23:09,880 --> 00:23:14,900
clothes finally I said concourse and we

00:23:12,230 --> 00:23:17,299
do practice but this is how I feel about

00:23:14,900 --> 00:23:19,220
Cloud Foundry when you think about it

00:23:17,299 --> 00:23:22,520
the manual for the developers like this

00:23:19,220 --> 00:23:25,070
small I write my twelve fighter out CF

00:23:22,520 --> 00:23:28,100
push that's pretty much it everything

00:23:25,070 --> 00:23:30,049
else is managed for you so the

00:23:28,100 --> 00:23:31,970
simplicity from this almost like the

00:23:30,049 --> 00:23:35,179
developer how I implement and how I

00:23:31,970 --> 00:23:36,530
deploy is is we don't you don't have to

00:23:35,179 --> 00:23:38,179
worry about that anyone you don't have

00:23:36,530 --> 00:23:39,290
to read those huge manuals like I

00:23:38,179 --> 00:23:42,140
remember they're like the Oracle

00:23:39,290 --> 00:23:44,990
certification there's thick that's all

00:23:42,140 --> 00:23:47,150
gone now and it does what it wants to do

00:23:44,990 --> 00:23:51,559
and it does it very well and it provides

00:23:47,150 --> 00:23:52,400
that as a service to you so back to

00:23:51,559 --> 00:23:54,470
where we were

00:23:52,400 --> 00:23:56,960
hello my name is Nick but I'm not an opt

00:23:54,470 --> 00:23:59,660
guy anymore I'm not I'm a developer I

00:23:56,960 --> 00:24:01,159
write tests already cold I was chatting

00:23:59,660 --> 00:24:03,470
with our project man

00:24:01,159 --> 00:24:06,169
manager last night and we were talking

00:24:03,470 --> 00:24:08,599
about ginkgo and this behavior driven

00:24:06,169 --> 00:24:11,690
development and he says you're not a nob

00:24:08,599 --> 00:24:12,830
sky you sound like a developer so now

00:24:11,690 --> 00:24:14,989
what do I

00:24:12,830 --> 00:24:18,649
I look at myself as I'm a stuff do you

00:24:14,989 --> 00:24:21,590
go I do stuff and I have plenty to keep

00:24:18,649 --> 00:24:23,179
me busy well that's all for me and I'm

00:24:21,590 --> 00:24:28,190
quite happy to take any questions that

00:24:23,179 --> 00:24:29,509
you guys might have okay well if you

00:24:28,190 --> 00:24:30,490
want to catch me outside I can always

00:24:29,509 --> 00:24:33,289
answer them out there too

00:24:30,490 --> 00:24:33,289

YouTube URL: https://www.youtube.com/watch?v=GBi6634Iipk


