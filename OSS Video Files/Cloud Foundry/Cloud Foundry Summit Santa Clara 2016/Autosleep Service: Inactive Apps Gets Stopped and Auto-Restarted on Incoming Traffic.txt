Title: Autosleep Service: Inactive Apps Gets Stopped and Auto-Restarted on Incoming Traffic
Publication date: 2016-05-29
Playlist: Cloud Foundry Summit Santa Clara 2016
Description: 
	Autosleep Service: Inactive Apps Gets Stopped and Auto-Restarted on Incoming Traffic - Guillaume Berche, Orange

Did you ever run out of CloudFoundry cells capacity, while your Iaas budget is already maxed out ? Tired of asking org/space admins to clean up these hello-world apps that waste RAM on the platform ? 

The autosleep service might help: it automatically stops inactive apps and restarts them upon incoming traffic. 

Try it by yourself by installing it from https://github.com/Orange-OpenSource/autosleep/ or come to this session to learn its motivations, get the current status of this work-in-progress, watch a demo, and understand how to autosleep service leverages cloudfoundry features (service broker api, route services, CC api) sometimes in unusual ways. This session wraps up with learnings and suggestions for potential evolution of the service broker API that could open up new innovative usages of the platform. 

Guillaume Berche
Software Architect, Orange
Guillaume Berche is an active bosh and cloudfoundry user since 2012. He is working at Orange, one of the leading european telco operator, where he is contributing to private Paas efforts since late 2010. His activities range from product-management, software development to operations. He has been contributing to the CloudFoundry community through cf-dev@, cf-docs, specs proposals, cf-java-client and java-buildpack.
Captions: 
	00:00:00,050 --> 00:00:05,730
today so this session is around the auto

00:00:02,850 --> 00:00:07,529
slip Auto sleep is a new service a new

00:00:05,730 --> 00:00:09,990
open source service that we have

00:00:07,529 --> 00:00:11,790
developed to automatically suspend

00:00:09,990 --> 00:00:15,630
inactive application after a given

00:00:11,790 --> 00:00:17,340
amount of idle duration and then it gets

00:00:15,630 --> 00:00:20,250
restarted automatically when there is

00:00:17,340 --> 00:00:23,310
incoming traffic so let me introduce

00:00:20,250 --> 00:00:25,320
myself I'm working at a range so that

00:00:23,310 --> 00:00:28,199
for those that don't know range is one

00:00:25,320 --> 00:00:31,320
of the largest telco operator in in

00:00:28,199 --> 00:00:34,020
Europe in in Africa its present in 24

00:00:31,320 --> 00:00:38,239
markets with more than 240 million

00:00:34,020 --> 00:00:42,210
subscribers and here is the auto safety

00:00:38,239 --> 00:00:44,730
so I'm working at the product manager on

00:00:42,210 --> 00:00:47,820
this project and Benjamin and I'll go

00:00:44,730 --> 00:00:50,070
out the developers they could not be

00:00:47,820 --> 00:00:53,640
here today so I'm representing the whole

00:00:50,070 --> 00:00:56,879
team so let's start with them

00:00:53,640 --> 00:01:00,359
why would you skip the interest to you

00:00:56,879 --> 00:01:02,879
why would you care and maybe we can do a

00:01:00,359 --> 00:01:04,070
shortfall on how much of you are not yet

00:01:02,879 --> 00:01:08,400
using Cloud Foundry

00:01:04,070 --> 00:01:11,070
pretty much just a few ok who are more

00:01:08,400 --> 00:01:15,240
on the service consumer side so pushing

00:01:11,070 --> 00:01:17,640
apps and operating apps ok

00:01:15,240 --> 00:01:22,500
and so assume the rest of you are

00:01:17,640 --> 00:01:27,509
operating flat foundry keep keep your

00:01:22,500 --> 00:01:32,119
eyes your n R as if you're on trend ok

00:01:27,509 --> 00:01:35,750
most of you and public notice you ok so

00:01:32,119 --> 00:01:39,000
auto slip will help you save money

00:01:35,750 --> 00:01:41,400
hopefully and for those of you that

00:01:39,000 --> 00:01:43,740
operate to be confirmed instances of

00:01:41,400 --> 00:01:46,590
private you might as well do good for

00:01:43,740 --> 00:01:50,340
the planet and sense of computing power

00:01:46,590 --> 00:01:50,790
and avoid getting the global warming

00:01:50,340 --> 00:01:54,000
worse

00:01:50,790 --> 00:01:57,020
so let's it tells that a liveable so for

00:01:54,000 --> 00:01:59,820
we will go through service consumers and

00:01:57,020 --> 00:02:03,360
service providers so first service

00:01:59,820 --> 00:02:06,509
consumers AutoStick can be deployed both

00:02:03,360 --> 00:02:09,950
on tram on private confident instances

00:02:06,509 --> 00:02:12,930
on public so those application teams

00:02:09,950 --> 00:02:15,840
they would get the application note

00:02:12,930 --> 00:02:17,879
we stopped so the total aberration for

00:02:15,840 --> 00:02:19,620
the app would be smaller so they would

00:02:17,879 --> 00:02:23,430
have a smaller invoice at the end of the

00:02:19,620 --> 00:02:27,989
month you would save cash for platform

00:02:23,430 --> 00:02:30,480
providers you'd be able to under the

00:02:27,989 --> 00:02:33,120
same load to same workload for your

00:02:30,480 --> 00:02:38,359
application teams but with a smaller

00:02:33,120 --> 00:02:41,189
number of DA cells the ego cells on da

00:02:38,359 --> 00:02:44,250
so you'd be able to shut down some GM

00:02:41,189 --> 00:02:47,609
and shut down the associated hypothesis

00:02:44,250 --> 00:02:49,560
so to save some run and some service

00:02:47,609 --> 00:02:52,260
provider might be able to use this to

00:02:49,560 --> 00:02:54,900
provide some free or cheap cheese

00:02:52,260 --> 00:02:57,359
because it's not a more affordable you

00:02:54,900 --> 00:03:03,959
need less computing power to run some

00:02:57,359 --> 00:03:06,060
applications you might ask what kind of

00:03:03,959 --> 00:03:08,639
workload would that be suitable to run

00:03:06,060 --> 00:03:11,909
against what asleep so we think

00:03:08,639 --> 00:03:13,829
immediately about non proud but how much

00:03:11,909 --> 00:03:16,799
is non prod is a very small proportion

00:03:13,829 --> 00:03:18,739
or it's at large it's hard to get two

00:03:16,799 --> 00:03:22,290
figures precise figures on that

00:03:18,739 --> 00:03:24,269
fortunately when so I tried but didn't

00:03:22,290 --> 00:03:27,989
find that much except her friend at

00:03:24,269 --> 00:03:32,129
Rakuten as a published the proportion in

00:03:27,989 --> 00:03:34,019
their case it's 44% non prod so can

00:03:32,129 --> 00:03:35,519
think especially in the early adoption

00:03:34,019 --> 00:03:39,269
phase of Catherine Risa should be

00:03:35,519 --> 00:03:43,049
significant so what what what's in non

00:03:39,269 --> 00:03:45,329
prod maybe the hello world and the

00:03:43,049 --> 00:03:47,159
tutorials that every new canvas comes in

00:03:45,329 --> 00:03:49,079
there push the other worlds and they

00:03:47,159 --> 00:03:52,159
forget about stopping those apps so this

00:03:49,079 --> 00:03:55,530
would obviously benefit format asleep i

00:03:52,159 --> 00:03:57,180
catherine's and spike one-shot apps that

00:03:55,530 --> 00:03:59,970
you developed and you forget about

00:03:57,180 --> 00:04:02,909
stopping would be a good candidate we're

00:03:59,970 --> 00:04:06,060
actually in a ranch specific case we

00:04:02,909 --> 00:04:08,579
need to have some api stop for a wide

00:04:06,060 --> 00:04:10,560
range of api's just to discover the

00:04:08,579 --> 00:04:13,229
api's and get some

00:04:10,560 --> 00:04:17,009
stub response so that was one motivation

00:04:13,229 --> 00:04:21,409
we add some other use case include

00:04:17,009 --> 00:04:23,760
saving dogs or tours and obviously

00:04:21,409 --> 00:04:24,660
non-trade version of the app we are

00:04:23,760 --> 00:04:26,460
deeply

00:04:24,660 --> 00:04:29,940
we'd benefit from that they don't need

00:04:26,460 --> 00:04:33,840
to be up all of the time we started on

00:04:29,940 --> 00:04:36,800
the amount when traffic scans I would

00:04:33,840 --> 00:04:40,350
that also fit some production workload

00:04:36,800 --> 00:04:42,780
it's not yet clear because there is

00:04:40,350 --> 00:04:45,470
still a penalty impact in Latin scene

00:04:42,780 --> 00:04:48,120
back when the app is is waking up

00:04:45,470 --> 00:04:51,630
depending on the technology yeah might

00:04:48,120 --> 00:04:54,720
take some seconds to 30 seconds to start

00:04:51,630 --> 00:04:57,150
so the production workload needs to be

00:04:54,720 --> 00:05:00,270
able to cope with that maybe some

00:04:57,150 --> 00:05:03,300
service brokers that could response

00:05:00,270 --> 00:05:05,130
within 90 seconds could be eligible but

00:05:03,300 --> 00:05:07,140
maybe it's community we'll find some

00:05:05,130 --> 00:05:12,810
example of production traffic that would

00:05:07,140 --> 00:05:15,060
be suitable okay so how do you use how

00:05:12,810 --> 00:05:15,660
to sleep to save run and to do a good

00:05:15,060 --> 00:05:18,990
for the planet

00:05:15,660 --> 00:05:20,460
let's see that so Auto sleep is exposed

00:05:18,990 --> 00:05:24,480
as a service broker so that is

00:05:20,460 --> 00:05:27,690
discoverable in marketplace and once an

00:05:24,480 --> 00:05:29,220
app is enrolled with the auto slip you

00:05:27,690 --> 00:05:31,860
would get stopped automatically on

00:05:29,220 --> 00:05:33,870
opening activity and then waking up

00:05:31,860 --> 00:05:37,020
automatically when there is back some

00:05:33,870 --> 00:05:39,510
traffic so this is the work in progress

00:05:37,020 --> 00:05:43,820
a little the status on that unless

00:05:39,510 --> 00:05:47,540
detail is on each of the points a video

00:05:43,820 --> 00:05:52,740
so for the exposition a service broker

00:05:47,540 --> 00:05:55,800
we need an app to be enrolled so an app

00:05:52,740 --> 00:05:59,880
enroll would be managed by you to the

00:05:55,800 --> 00:06:01,680
giotto sleep so to enroll on apps we we

00:05:59,880 --> 00:06:03,990
bind it to not to sleep service instance

00:06:01,680 --> 00:06:07,890
basically and there is different to

00:06:03,990 --> 00:06:11,340
normal mode the first is regular opt-in

00:06:07,890 --> 00:06:13,560
so user comes in creators have his

00:06:11,340 --> 00:06:16,350
instance in the space and then bind it's

00:06:13,560 --> 00:06:18,170
up to the service instance but you might

00:06:16,350 --> 00:06:21,090
think if the user

00:06:18,170 --> 00:06:24,840
stop about forget about starting the app

00:06:21,090 --> 00:06:28,230
would they think about binding to the

00:06:24,840 --> 00:06:30,410
auto sleep to say Ram so we also support

00:06:28,230 --> 00:06:34,440
Auto environment

00:06:30,410 --> 00:06:35,910
it's a super mode in which every

00:06:34,440 --> 00:06:38,909
application within the space will be

00:06:35,910 --> 00:06:42,720
automatically enrolled and this would be

00:06:38,909 --> 00:06:44,520
make it noticeable by user because the

00:06:42,720 --> 00:06:46,039
application will be bound automatically

00:06:44,520 --> 00:06:49,409
to this sort of sleep service instance

00:06:46,039 --> 00:06:51,449
they can still opt out so to opt out

00:06:49,409 --> 00:06:53,759
they can unbind from the service

00:06:51,449 --> 00:06:57,330
instance meaning I don't want to go to

00:06:53,759 --> 00:07:01,020
sleep anymore stop dealing with my app

00:06:57,330 --> 00:07:04,199
of the codenamed that up against a

00:07:01,020 --> 00:07:08,960
regular expression exclusion button to

00:07:04,199 --> 00:07:12,330
escape from auto enrolment in some case

00:07:08,960 --> 00:07:14,789
we want to prevent some team to escape

00:07:12,330 --> 00:07:17,520
from motor sleep for example in the case

00:07:14,789 --> 00:07:19,830
of three tiers or chip tears we want to

00:07:17,520 --> 00:07:22,770
make it harder for them to to consume

00:07:19,830 --> 00:07:25,319
more but we still want them to be able

00:07:22,770 --> 00:07:27,690
to work effectively so in this first

00:07:25,319 --> 00:07:30,150
enrollment mode they would be able to

00:07:27,690 --> 00:07:32,219
opt out but only temporarily only for a

00:07:30,150 --> 00:07:36,599
short amount of time and then the app

00:07:32,219 --> 00:07:38,190
would be reenroll automatically we have

00:07:36,599 --> 00:07:40,860
that got to check the neurons the

00:07:38,190 --> 00:07:44,430
enrollment status and the idle duration

00:07:40,860 --> 00:07:48,960
and then the app is stopped on their

00:07:44,430 --> 00:07:50,969
activity so the activity is measured by

00:07:48,960 --> 00:07:53,880
the logs that the application produce

00:07:50,969 --> 00:07:57,419
and the log that the Gerudo produced for

00:07:53,880 --> 00:08:00,509
the app so any traffic receiving receipt

00:07:57,419 --> 00:08:03,810
from the app would keep track active CF

00:08:00,509 --> 00:08:06,930
events would as well I contribute to the

00:08:03,810 --> 00:08:10,080
activity measured so if you update an

00:08:06,930 --> 00:08:14,009
app environment variable or you scale it

00:08:10,080 --> 00:08:16,080
that evidence that you have activity on

00:08:14,009 --> 00:08:21,560
your app so the app is not considered

00:08:16,080 --> 00:08:25,110
inactive and then the auto waking up

00:08:21,560 --> 00:08:29,250
sleeping up when incoming traffic comes

00:08:25,110 --> 00:08:33,240
in so while the app is starting up we

00:08:29,250 --> 00:08:36,360
currently return for free status code to

00:08:33,240 --> 00:08:39,719
the application we'll see after that we

00:08:36,360 --> 00:08:41,729
have done to improve that so let's go

00:08:39,719 --> 00:08:44,279
with the with the demo

00:08:41,729 --> 00:08:46,529
I don't really trust my ability to do a

00:08:44,279 --> 00:08:48,779
demo with jet lag so I recorded the demo

00:08:46,529 --> 00:08:50,959
you have to trust me that I try the same

00:08:48,779 --> 00:08:50,959
way

00:09:01,060 --> 00:09:07,230
okay so I have split my screen into four

00:09:04,600 --> 00:09:10,030
parts on the upper left I have some

00:09:07,230 --> 00:09:12,850
sample application I hope you able to

00:09:10,030 --> 00:09:16,210
read so active app hello world and

00:09:12,850 --> 00:09:21,970
production asleep and I'm sending some

00:09:16,210 --> 00:09:29,380
traffic in a cow loop every one second

00:09:21,970 --> 00:09:31,810
and on the lower right I will be

00:09:29,380 --> 00:09:37,240
deploying Auto sleep so this is a

00:09:31,810 --> 00:09:39,490
regular java application so it's it's

00:09:37,240 --> 00:09:42,490
pushed using the java build pack as

00:09:39,490 --> 00:09:44,920
prerequisite he requires a crowd control

00:09:42,490 --> 00:09:48,670
account with permission to act on the

00:09:44,920 --> 00:09:51,850
application in every space and my sequel

00:09:48,670 --> 00:09:58,720
database so it's to party not asleep CEO

00:09:51,850 --> 00:10:03,070
to wake up and the auto sleep broker so

00:09:58,720 --> 00:10:05,050
this is a push or to wake up so nothing

00:10:03,070 --> 00:10:13,960
special around that and then they push

00:10:05,050 --> 00:10:17,160
about the broker and then we will define

00:10:13,960 --> 00:10:20,620
the wild-card route that would help us

00:10:17,160 --> 00:10:22,120
restart the application captured we stop

00:10:20,620 --> 00:10:24,810
the application when there is traffic

00:10:22,120 --> 00:10:28,090
coming in so we create a wild-card route

00:10:24,810 --> 00:10:32,350
for any of the domain to which the

00:10:28,090 --> 00:10:34,450
unrolled up a map to and we map this

00:10:32,350 --> 00:10:37,690
welcome route to you to wake up

00:10:34,450 --> 00:10:40,450
so Auto wakeup up will receive any often

00:10:37,690 --> 00:10:44,710
traffic sent to those roots so when I

00:10:40,450 --> 00:10:47,050
stopped at receive some truck should

00:10:44,710 --> 00:10:49,900
receive some traffic do to wake up with

00:10:47,050 --> 00:10:52,390
receive the traffic instead so let's

00:10:49,900 --> 00:10:55,690
then expose this in the marketplace so

00:10:52,390 --> 00:10:57,640
I'm deploying on pivot our web service

00:10:55,690 --> 00:11:03,370
public cloud foundry from using a space

00:10:57,640 --> 00:11:07,570
code and now we have you to slip a plea

00:11:03,370 --> 00:11:09,720
on marketplace go so we've seen how to

00:11:07,570 --> 00:11:12,440
deploy Auto sleep

00:11:09,720 --> 00:11:15,170
so let's now use it

00:11:12,440 --> 00:11:18,290
so we'll create a service instance in

00:11:15,170 --> 00:11:22,160
this space so that's a second space the

00:11:18,290 --> 00:11:25,759
space where ma Appa are deployed and as

00:11:22,160 --> 00:11:27,649
arbitrary parameter 0 sleep create

00:11:25,759 --> 00:11:30,259
service instance and passing the idle

00:11:27,649 --> 00:11:33,740
duration how much time number of seconds

00:11:30,259 --> 00:11:37,399
so the PT 20 seconds after 20 seconds of

00:11:33,740 --> 00:11:39,370
inactivity the app would go to skip an

00:11:37,399 --> 00:11:41,480
exclusion button and the rural

00:11:39,370 --> 00:11:43,910
enrollment would so let's start with

00:11:41,480 --> 00:11:45,860
standard and that signal is secret for

00:11:43,910 --> 00:11:51,110
now I should have remembered that

00:11:45,860 --> 00:11:54,500
actually so ok it's refreshed on the

00:11:51,110 --> 00:11:57,079
upper left so I see my or to sleep

00:11:54,500 --> 00:12:00,110
service instance and soon I should see

00:11:57,079 --> 00:12:05,509
to application that would automatically

00:12:00,110 --> 00:12:08,870
be bound yep so active app and a robot

00:12:05,509 --> 00:12:10,730
and a bound and prediction asleep was

00:12:08,870 --> 00:12:17,500
not bound because it's covered by the

00:12:10,730 --> 00:12:21,350
exclusion regular expression okay so

00:12:17,500 --> 00:12:23,360
what about stopping sending some traffic

00:12:21,350 --> 00:12:25,130
oh maybe we'll have a look at the dead

00:12:23,360 --> 00:12:29,959
body for now so let's have a look at the

00:12:25,130 --> 00:12:34,689
dashboard so this place - - body wrong

00:12:29,959 --> 00:12:34,689
open that in a web browser

00:12:37,870 --> 00:12:45,649
so the dashboard will tell us which apps

00:12:40,519 --> 00:12:48,439
were unrolled it reminds us of the idle

00:12:45,649 --> 00:12:51,079
duration configured that the user might

00:12:48,439 --> 00:12:54,709
not know mind me an admin that created

00:12:51,079 --> 00:12:57,139
the service instance so ha they can

00:12:54,709 --> 00:12:59,689
check the evaluation they can check the

00:12:57,139 --> 00:13:02,959
extrusion pattern and they can see those

00:12:59,689 --> 00:13:05,000
two apps enrolled and for

00:13:02,959 --> 00:13:09,889
troubleshooting purposes they can check

00:13:05,000 --> 00:13:12,800
which last blocks were collected and the

00:13:09,889 --> 00:13:13,160
last 1200 events associated to their

00:13:12,800 --> 00:13:15,110
apps

00:13:13,160 --> 00:13:17,360
so basically checks that the activity

00:13:15,110 --> 00:13:20,560
measured for the app is consistent with

00:13:17,360 --> 00:13:23,080
what they expect so let's stop see

00:13:20,560 --> 00:13:24,910
loop which is keeping the uppercut so

00:13:23,080 --> 00:13:27,370
I'm not saying traffic anymore - in a

00:13:24,910 --> 00:13:32,080
world so I should see in a world within

00:13:27,370 --> 00:13:36,160
20 seconds stuff I have to mention and

00:13:32,080 --> 00:13:40,990
in this case this is very simple app for

00:13:36,160 --> 00:13:42,970
the sake of this demo it's the static

00:13:40,990 --> 00:13:47,140
build pack so they are starting pretty

00:13:42,970 --> 00:13:52,240
quickly you'll see that afterwards so in

00:13:47,140 --> 00:13:55,060
a word is that start yet yeah stop now

00:13:52,240 --> 00:13:57,820
go and do does not reflect the same

00:13:55,060 --> 00:13:58,540
thing so we will do the same thing we

00:13:57,820 --> 00:14:00,700
backed it up

00:13:58,540 --> 00:14:08,560
I'm studying traffic for Acula we should

00:14:00,700 --> 00:14:10,600
boost out yes I can mention as well that

00:14:08,560 --> 00:14:12,100
we are still lacking authentication on

00:14:10,600 --> 00:14:15,250
the dashboard so that's part of our

00:14:12,100 --> 00:14:17,500
backlog to authenticate that part that

00:14:15,250 --> 00:14:21,420
we don't click sensitive information on

00:14:17,500 --> 00:14:24,390
it treating the logs could be an issue

00:14:21,420 --> 00:14:27,430
yet so active app is also stopped cool

00:14:24,390 --> 00:14:29,290
so let's let's try to have those up wake

00:14:27,430 --> 00:14:33,010
up so let's send some traffic back again

00:14:29,290 --> 00:14:36,220
to in a world so it's going to take some

00:14:33,010 --> 00:14:37,900
seconds 1 2 seconds because it's a

00:14:36,220 --> 00:14:41,980
static build back it's just an engine X

00:14:37,900 --> 00:14:44,290
process it's pretty quick yep so you to

00:14:41,980 --> 00:14:46,870
wake up application with the traffic and

00:14:44,290 --> 00:14:51,160
started the yellow world app let's do

00:14:46,870 --> 00:14:57,430
the same thing with the active app yeah

00:14:51,160 --> 00:14:59,950
let's start it again oh ok so maybe we

00:14:57,430 --> 00:15:05,050
can have a look at the opt-out let's try

00:14:59,950 --> 00:15:06,310
to opt out let's say this is getting in

00:15:05,050 --> 00:15:09,400
my way to do my work

00:15:06,310 --> 00:15:12,370
I don't want totally to manage any more

00:15:09,400 --> 00:15:15,760
active at so I'm opting out I'm

00:15:12,370 --> 00:15:19,720
unbinding and if I stopped sending some

00:15:15,760 --> 00:15:23,710
traffic for ok I don't if I stop sending

00:15:19,720 --> 00:15:25,930
some traffic for this app

00:15:23,710 --> 00:15:28,210
you will not start any more so yeah the

00:15:25,930 --> 00:15:30,910
dashboard is reflecting that the app is

00:15:28,210 --> 00:15:39,810
extruded from it's not enrolled anymore

00:15:30,910 --> 00:15:44,350
it's ignored and it doesn't stop so

00:15:39,810 --> 00:15:47,620
we've seen deployment for now as auto

00:15:44,350 --> 00:15:52,660
enrollment I think we'll have a look at

00:15:47,620 --> 00:15:55,330
the first enrollment now so what I'll do

00:15:52,660 --> 00:15:56,740
now is that I will unbind the rest of

00:15:55,330 --> 00:15:59,080
the apps and I will indeed lead to

00:15:56,740 --> 00:16:02,910
service instance and I will start with a

00:15:59,080 --> 00:16:02,910
fresh a new scenario

00:16:07,410 --> 00:16:13,829
okay so it's in binding at a world and

00:16:11,660 --> 00:16:16,279
deleting the service instance in

00:16:13,829 --> 00:16:16,279
sequence

00:16:22,100 --> 00:16:26,750
and now we looked at the first

00:16:24,140 --> 00:16:29,750
enrollment mode which is typically for

00:16:26,750 --> 00:16:32,870
free or cheap shoes so in this case I'm

00:16:29,750 --> 00:16:36,170
only changing the enrollment mode and

00:16:32,870 --> 00:16:40,700
I'm passing that to false and what I'm

00:16:36,170 --> 00:16:44,860
telling I'm also providing a secret this

00:16:40,700 --> 00:16:47,090
this secret is used by the auto slip

00:16:44,860 --> 00:16:49,490
typically in this use case and admin

00:16:47,090 --> 00:16:52,940
would create due to service instance and

00:16:49,490 --> 00:16:57,050
the team using the space wouldn't have

00:16:52,940 --> 00:16:59,480
access to the secret so that they are

00:16:57,050 --> 00:17:06,380
not able to switch back to store that

00:16:59,480 --> 00:17:10,100
environment so we've seen that those two

00:17:06,380 --> 00:17:12,770
apps active app was also bound and I'm

00:17:10,100 --> 00:17:14,449
simulating the case where a team wants

00:17:12,770 --> 00:17:17,510
to escape from at escape so they try to

00:17:14,449 --> 00:17:19,940
opt out so they do opt out for a short

00:17:17,510 --> 00:17:24,140
period of time but they automatically

00:17:19,940 --> 00:17:26,209
get reenroll after a short duration so

00:17:24,140 --> 00:17:31,220
body case they cannot accept long from

00:17:26,209 --> 00:17:33,920
auto sleep what we we need to leave them

00:17:31,220 --> 00:17:37,040
the ability to unbind because they might

00:17:33,920 --> 00:17:39,110
want legitimately to delete the app if

00:17:37,040 --> 00:17:41,180
they want to delete that up the CLI

00:17:39,110 --> 00:17:44,120
would unbind the service so if we were

00:17:41,180 --> 00:17:46,340
to refuse the unbind we would enable

00:17:44,120 --> 00:17:50,180
them to delete that up so that's why we

00:17:46,340 --> 00:17:53,750
find this solution but letting them to

00:17:50,180 --> 00:17:57,250
temporary and bind if they try to delete

00:17:53,750 --> 00:18:00,860
the service instance it turns that

00:17:57,250 --> 00:18:02,450
enforced in run run mode they cannot

00:18:00,860 --> 00:18:05,090
deal it and they have to switch back to

00:18:02,450 --> 00:18:07,820
standard to switch back to stone that

00:18:05,090 --> 00:18:11,570
you need to provide the secret so if a

00:18:07,820 --> 00:18:14,350
9-mil doesn't want a team to go back to

00:18:11,570 --> 00:18:20,690
stem to standard mode it keep the secret

00:18:14,350 --> 00:18:22,700
secret so let's do that the admin is

00:18:20,690 --> 00:18:25,550
switching back to standard Aurora mode

00:18:22,700 --> 00:18:27,570
by providing the secret and now the team

00:18:25,550 --> 00:18:31,410
would be able to

00:18:27,570 --> 00:18:38,550
opt out and delete to service instance

00:18:31,410 --> 00:18:40,940
to delete this space for example if I'm

00:18:38,550 --> 00:18:40,940
lucky enough

00:18:52,280 --> 00:19:00,950
should have let me wrote my screen sorry

00:18:54,980 --> 00:19:05,169
about that okay cool so that's about it

00:19:00,950 --> 00:19:05,169
for the demo let's switch back to slides

00:19:07,390 --> 00:19:13,789
so what it also sleep what component is

00:19:11,600 --> 00:19:16,250
it made of let's return let's look at

00:19:13,789 --> 00:19:17,929
the architecture so it's split in two as

00:19:16,250 --> 00:19:21,770
we've seen in the deployment in two

00:19:17,929 --> 00:19:24,140
parts the auto script call which is

00:19:21,770 --> 00:19:28,340
exposing a service broker and the dad

00:19:24,140 --> 00:19:30,799
bought UI and the wakeup proxy by the

00:19:28,340 --> 00:19:32,480
way through slides ions CAD scattered oh

00:19:30,799 --> 00:19:35,919
well you see the schedule so you cannot

00:19:32,480 --> 00:19:39,470
access to them right now if you want and

00:19:35,919 --> 00:19:45,010
so when an admin create a service

00:19:39,470 --> 00:19:48,409
instance giotto sleep call is receiving

00:19:45,010 --> 00:19:50,169
the message and then using the curtain

00:19:48,409 --> 00:19:53,059
API it scanning the ABS into space

00:19:50,169 --> 00:19:56,179
binding them automatically then fetching

00:19:53,059 --> 00:19:58,490
their logs to check activity and after

00:19:56,179 --> 00:20:04,340
the idle duration you would start the

00:19:58,490 --> 00:20:06,140
app once an app is stopped it doesn't

00:20:04,340 --> 00:20:09,320
reserve traffic anymore so the traffic

00:20:06,140 --> 00:20:11,059
that are directed to this route would go

00:20:09,320 --> 00:20:12,799
to the wildcard route that we have

00:20:11,059 --> 00:20:16,940
configure and down to the Auto wakeup

00:20:12,799 --> 00:20:19,490
proxy and so due to wake up proxy

00:20:16,940 --> 00:20:23,840
receives this often traffic from the

00:20:19,490 --> 00:20:26,570
curvature and would start the app once

00:20:23,840 --> 00:20:30,470
the app is started it release the

00:20:26,570 --> 00:20:32,840
request that was received if there is

00:20:30,470 --> 00:20:36,559
other requests in between we currently

00:20:32,840 --> 00:20:38,450
return a for free a 503 in the future we

00:20:36,559 --> 00:20:41,210
plan to buffer all this traffic so that

00:20:38,450 --> 00:20:43,820
there is less impact for the sleeping

00:20:41,210 --> 00:20:49,250
applications and both are shelling

00:20:43,820 --> 00:20:52,580
states using mass equal DB so originally

00:20:49,250 --> 00:20:54,500
we we were thinking we were designing to

00:20:52,580 --> 00:20:57,650
use route services instead of whiteout

00:20:54,500 --> 00:21:00,380
proxy you might have seen that into the

00:20:57,650 --> 00:21:02,120
session abstract unfortunately we

00:21:00,380 --> 00:21:04,730
discover bit late that it's not feasible

00:21:02,120 --> 00:21:05,960
currently the road services don't

00:21:04,730 --> 00:21:10,390
receive traffic

00:21:05,960 --> 00:21:14,270
and mapped to an app which is stopped so

00:21:10,390 --> 00:21:18,140
this is there was description with with

00:21:14,270 --> 00:21:21,350
Shannon the PM of the routing project to

00:21:18,140 --> 00:21:23,870
explain this so if you do have some

00:21:21,350 --> 00:21:25,789
similar use case please voice it to

00:21:23,870 --> 00:21:29,470
Shannon so that this can help

00:21:25,789 --> 00:21:32,029
prioritization to price this report

00:21:29,470 --> 00:21:35,000
which is not yet in the roadmap and

00:21:32,029 --> 00:21:37,490
might help some other use cases they're

00:21:35,000 --> 00:21:39,230
quite a lot of advantage is to go with

00:21:37,490 --> 00:21:42,860
route services instead of white cab

00:21:39,230 --> 00:21:46,750
route maybe I can get a little more

00:21:42,860 --> 00:21:49,789
after if I get some remaining time

00:21:46,750 --> 00:21:52,820
so while carrot is feasible for now it's

00:21:49,789 --> 00:21:55,520
not I do that at least is working for

00:21:52,820 --> 00:21:59,990
now until we get this feature provides

00:21:55,520 --> 00:22:03,440
by diverting team so what I put in short

00:21:59,990 --> 00:22:06,860
future improvement we are thinking of we

00:22:03,440 --> 00:22:10,190
do need to add and you to wake apart so

00:22:06,860 --> 00:22:13,250
that it's able to scale to institution

00:22:10,190 --> 00:22:14,960
as you cluster we'd like to cue traffic

00:22:13,250 --> 00:22:17,750
during restart so that's it's very

00:22:14,960 --> 00:22:19,610
transparent to the client they will see

00:22:17,750 --> 00:22:22,600
you delay in response but they wouldn't

00:22:19,610 --> 00:22:26,480
see some extra five or three status

00:22:22,600 --> 00:22:28,580
especially when you're setting API they

00:22:26,480 --> 00:22:32,659
they don't like very much to get some

00:22:28,580 --> 00:22:35,419
extra service we'd like to work on high

00:22:32,659 --> 00:22:38,870
availability load balancing for the

00:22:35,419 --> 00:22:40,610
service broker itself I mentioned not

00:22:38,870 --> 00:22:44,210
application to dashboard and checking

00:22:40,610 --> 00:22:46,340
permission we are considering packaging

00:22:44,210 --> 00:22:48,919
at the bars release and a PCF time so

00:22:46,340 --> 00:22:50,720
that you can use be used anywhere we

00:22:48,919 --> 00:22:52,850
have some something's working

00:22:50,720 --> 00:22:56,750
considering PCF as well so they'll be

00:22:52,850 --> 00:23:01,279
useful for them what would be nice is to

00:22:56,750 --> 00:23:03,230
be able to have any application in any

00:23:01,279 --> 00:23:06,200
space and any org

00:23:03,230 --> 00:23:07,700
being automatically enrolled currently

00:23:06,200 --> 00:23:11,390
and add minutes to create a service

00:23:07,700 --> 00:23:14,389
instance in what each space so there

00:23:11,390 --> 00:23:17,809
would be a nice feature to have auto

00:23:14,389 --> 00:23:20,320
enrolment for any space and org within a

00:23:17,809 --> 00:23:20,320
cloud forest

00:23:20,870 --> 00:23:27,030
and also stuff might be to have more

00:23:23,840 --> 00:23:29,150
fine-grain policy for to sleep such as

00:23:27,030 --> 00:23:31,560
excluding the business hours and

00:23:29,150 --> 00:23:33,990
potentially need notifying users when

00:23:31,560 --> 00:23:39,570
the application is but to sleep with the

00:23:33,990 --> 00:23:43,700
an email notification so some learnings

00:23:39,570 --> 00:23:47,520
that we made during this in this project

00:23:43,700 --> 00:23:51,060
so we find the service broker create

00:23:47,520 --> 00:23:54,120
read update regular life cycle is very

00:23:51,060 --> 00:23:56,430
powerful but some time respective in

00:23:54,120 --> 00:23:56,970
terms of user expands we have to tweet a

00:23:56,430 --> 00:24:00,570
bit

00:23:56,970 --> 00:24:03,500
you've seen the to switch from solid to

00:24:00,570 --> 00:24:06,210
foster enrollment mode to switch with

00:24:03,500 --> 00:24:11,250
arbitrary priming to the update that

00:24:06,210 --> 00:24:13,110
kind of awkward user experience we are

00:24:11,250 --> 00:24:17,100
heavily relying on the CEO java client

00:24:13,110 --> 00:24:19,020
for this for this service so there is an

00:24:17,100 --> 00:24:20,520
ongoing or implementation using reactive

00:24:19,020 --> 00:24:23,040
it's great

00:24:20,520 --> 00:24:25,410
thanks for been hell teams for offices

00:24:23,040 --> 00:24:27,120
he's really solid he's being distracting

00:24:25,410 --> 00:24:31,950
for us because it's stretched over time

00:24:27,120 --> 00:24:34,620
in terms of calendar so it might have

00:24:31,950 --> 00:24:36,990
picked v1 if we had better visibility

00:24:34,620 --> 00:24:38,880
and roadmap initially but otherwise it's

00:24:36,990 --> 00:24:40,530
really a great effort and I know

00:24:38,880 --> 00:24:44,310
benjamin has been contributing quite a

00:24:40,530 --> 00:24:46,110
wine to it and yes I discovered I

00:24:44,310 --> 00:24:53,340
discovered bit late to constraints about

00:24:46,110 --> 00:24:57,150
reading service so you know it now in

00:24:53,340 --> 00:24:59,100
terms of suggestions I made some

00:24:57,150 --> 00:25:02,490
suggestions for enhancement to the

00:24:59,100 --> 00:25:03,990
service broker or API so one first

00:25:02,490 --> 00:25:07,530
suggestion is to be able to propagate

00:25:03,990 --> 00:25:11,580
the identity of the quorum so if we were

00:25:07,530 --> 00:25:14,490
able to know that it's an and mean that

00:25:11,580 --> 00:25:18,090
is requesting to delete a service

00:25:14,490 --> 00:25:21,000
instance then we would grant this

00:25:18,090 --> 00:25:21,870
request for our space manager we would

00:25:21,000 --> 00:25:24,660
refuse

00:25:21,870 --> 00:25:26,640
so both being able to propagate the

00:25:24,660 --> 00:25:29,310
request identity and as well its

00:25:26,640 --> 00:25:31,560
permission is all scopes and maybe to

00:25:29,310 --> 00:25:32,260
have this requester did we get this

00:25:31,560 --> 00:25:34,900
permission

00:25:32,260 --> 00:25:37,650
so that we don't need a cut for real

00:25:34,900 --> 00:25:39,970
count which has permission or hold space

00:25:37,650 --> 00:25:42,190
but the user could delegate their

00:25:39,970 --> 00:25:45,250
permission for zo to sleep to act on

00:25:42,190 --> 00:25:50,740
their behalf so there is proposal spec

00:25:45,250 --> 00:25:54,370
from this I can look another proposal is

00:25:50,740 --> 00:25:59,620
to try to find a way so that it's easier

00:25:54,370 --> 00:26:02,169
to get custom UI for services so one

00:25:59,620 --> 00:26:05,200
interesting idea that was suggesting

00:26:02,169 --> 00:26:08,080
suggesting by Ben la plage is the

00:26:05,200 --> 00:26:09,820
service broker actions basically to have

00:26:08,080 --> 00:26:11,650
the service broker in its catalan

00:26:09,820 --> 00:26:13,690
written some metadata that describes

00:26:11,650 --> 00:26:16,500
some additional verbs that it would like

00:26:13,690 --> 00:26:25,020
to expose to users so in this example

00:26:16,500 --> 00:26:27,760
it's small to see maybe there is a new

00:26:25,020 --> 00:26:32,020
actions that is declared by this broker

00:26:27,760 --> 00:26:35,160
set mode and the CLI would propose these

00:26:32,020 --> 00:26:40,360
actions to the users built in without

00:26:35,160 --> 00:26:43,540
deploying a custom plugin another way

00:26:40,360 --> 00:26:46,030
that we can provide custom UI for for

00:26:43,540 --> 00:26:49,000
services is by providing a custom plugin

00:26:46,030 --> 00:26:51,160
but this currently also requires user to

00:26:49,000 --> 00:26:55,960
install it so maybe another suggestion

00:26:51,160 --> 00:26:59,290
could be that the CLI by interpreting

00:26:55,960 --> 00:27:01,780
some metadata into the catalogue in this

00:26:59,290 --> 00:27:03,970
metadata you would have the the

00:27:01,780 --> 00:27:06,070
repository endpoint and the name of the

00:27:03,970 --> 00:27:08,230
plug-in and it would automatically from

00:27:06,070 --> 00:27:10,120
the user into installing this custom

00:27:08,230 --> 00:27:12,549
plugin from this service so that the

00:27:10,120 --> 00:27:16,210
user doesn't have to follow the doc to

00:27:12,549 --> 00:27:19,919
find the right plugin so in terms of

00:27:16,210 --> 00:27:23,230
user expands I'll be maybe more flexible

00:27:19,919 --> 00:27:29,770
because you can define some top comment

00:27:23,230 --> 00:27:31,360
in this context okay so let's wrap up so

00:27:29,770 --> 00:27:34,630
yes this is a work in progress this is

00:27:31,360 --> 00:27:37,540
open source it's on github so please

00:27:34,630 --> 00:27:40,850
test it tell us what you think we put

00:27:37,540 --> 00:27:44,600
some bugs we had already a number of our

00:27:40,850 --> 00:27:47,000
many suggestions and feedback if you

00:27:44,600 --> 00:27:50,510
have new ideas as well and ever best if

00:27:47,000 --> 00:27:53,060
you have ability to go to contribute

00:27:50,510 --> 00:27:55,960
enhancement it would be great we hope as

00:27:53,060 --> 00:27:59,240
well as it could provide some

00:27:55,960 --> 00:28:04,520
inspiration for automating some tasks

00:27:59,240 --> 00:28:09,140
that platform providers can have and

00:28:04,520 --> 00:28:11,930
while keeping providing some control for

00:28:09,140 --> 00:28:14,480
users to control this automation for

00:28:11,930 --> 00:28:17,690
exposing battle serviceworker so we did

00:28:14,480 --> 00:28:20,270
need to pad the application to sleep and

00:28:17,690 --> 00:28:23,120
by exploding it a service broker we

00:28:20,270 --> 00:28:26,300
provided the ability to opt out and to

00:28:23,120 --> 00:28:29,390
configure the idle duration so I think

00:28:26,300 --> 00:28:33,430
we have about maybe one minute if there

00:28:29,390 --> 00:28:33,430
is question comments that wrap

00:28:36,440 --> 00:28:39,200
okay thank you very much thank you for

00:28:38,960 --> 00:28:41,749
you

00:28:39,200 --> 00:28:41,749

YouTube URL: https://www.youtube.com/watch?v=fQQRGxqkM-4


