Title: Launching the Next Generation Satellite Ground System on Cloud Foundry and Microservices
Publication date: 2016-05-29
Playlist: Cloud Foundry Summit Santa Clara 2016
Description: 
	Launching the Next Generation Satellite Ground System on Cloud Foundry and Microservices – One Year Later - Michael Weirzbinski, DigitalGlobe; Mike Waters, DigitalGlobe; & Steve Wall, ECS Team

Last year at Cloud Foundry Summit, DigitalGlobe presented its rationale, plans, and early experience in the use of Cloud Foundry as the basis of its next generation Ground System. It’s now a year later, and we are in the midst of realizing that vision – culminating in a launch of DigitalGlobe’s latest satellite, WorldView-4, later this year. 

This presentation describes the discoveries that we’ve made in scaling up a major development effort running on top of Cloud Foundry. It includes discussion of our current environment as well as how we have overcome both technical and cultural challenges along the way. Finally, we’ll include a discussion of the how our view of Cloud Foundry, microservices, and related infrastructure have evolved over the last year.

Steve Wall
ECSTeam
Director of Solutions Architecture
Denver
Steve Wall works is a Director of Solutions Architecture for ECS Team. Digital Globe is building out a new Enterprise platform with Cloud Foundry as a key component. Steve's role has been to assist the Enterprise Architecture with product selection, initial microservice exploration, followed by the build out of the automated pipeline and now helping to on board the Digital Globe community as a whole to the platform. Recent speaking engagements include Cloud Foundry presentations at the Denver Java User Group, Denver Open Source User Group and Colorado Springs Open Source User Group. Steve also spoke at last years Cloud Foundry Summit.

Mike Waters
DigitalGlobe
Enterprise Architect
Longmont, CO
Mike Waters works for DigitalGlobe as an Enterprise Architect/Software Architect. He is the lead Software Architect on DigitalGlobe's next generation Ground System. Mike has led DigitalGlobe's efforts to adopt microservices architecture and is the lead designer in planning the evolution of DigitalGlobe to adopt this new paradigm. Prior to working at DigitalGlobe he worked in the 9-1-1 Industry developing software and architectures for 9-1-1 call handling and data processing. Mike has also worked at U.S. West and GeoIT/KEMA Consulting as a geospatial software developer. Mike has presented at multiple conferences, and meetups, including recent speaking at the Denver Cloud Foundry Meetup.

Michael Weirzbinski
Mike Wierzbinski is DigitalGlobe's Enterprise Cloud Architect, focusing on Enterprise adoption and migration to Cloud technologies. Throughout his career, Mike has focused on geospatial technologies and architectures that promote the use of geospatial information as an enterprise resource. Mike is currently embedded in the Architecture team designing DigitalGlobe's next-generation Ground System. Mike has presented at multiple conferences, and meetups, including recent speaking at the Denver Cloud Foundry Meetup. Mike presented DigitalGlobe's Cloud Foundry strategy at last years Cloud Foundry Summit.
Captions: 
	00:00:02,510 --> 00:00:08,970
are we good to go now yes okay thanks

00:00:07,170 --> 00:00:11,429
for coming everybody my name is Mike

00:00:08,970 --> 00:00:12,690
water so I'm gonna be giving you a kind

00:00:11,429 --> 00:00:14,820
of a one-year update and I'm gonna be

00:00:12,690 --> 00:00:17,730
partnering here with Steve wall he'll be

00:00:14,820 --> 00:00:19,350
up in a few minutes but this is kind of

00:00:17,730 --> 00:00:21,150
a one-year update last year we gave you

00:00:19,350 --> 00:00:22,560
a preview of what digital globe was

00:00:21,150 --> 00:00:24,689
planning on doing and this is kind of

00:00:22,560 --> 00:00:26,820
where we're at right now and the lessons

00:00:24,689 --> 00:00:28,890
we've learned we're trying to find hard

00:00:26,820 --> 00:00:31,769
to impart our knowledge and what we've

00:00:28,890 --> 00:00:35,239
done and and learn any lessons and get

00:00:31,769 --> 00:00:40,129
any feedback from you all it'd be great

00:00:35,239 --> 00:00:42,690
this is a shot of Mount Fuji actually as

00:00:40,129 --> 00:00:43,620
we have a constellation of satellites an

00:00:42,690 --> 00:00:46,020
image of the earth so if you've ever

00:00:43,620 --> 00:00:48,149
seen Google Maps Bing Maps Apple maps

00:00:46,020 --> 00:00:49,530
any of those we supply almost all their

00:00:48,149 --> 00:00:51,989
imagery to them so that's what our

00:00:49,530 --> 00:00:53,730
company does and this is a fun picture

00:00:51,989 --> 00:00:56,280
it's Mount Fuji as it come over the

00:00:53,730 --> 00:00:58,469
horizon as our satellites were way off

00:00:56,280 --> 00:01:02,850
to the side so really awesome so profile

00:00:58,469 --> 00:01:04,019
view over no Fuji so I'll give you a

00:01:02,850 --> 00:01:05,129
little bit of quick background on what

00:01:04,019 --> 00:01:06,000
digital globe does we'll fly right

00:01:05,129 --> 00:01:08,340
through this

00:01:06,000 --> 00:01:09,689
you only take a second we uh we have a

00:01:08,340 --> 00:01:11,460
constellation that like I said a

00:01:09,689 --> 00:01:12,689
satellite sat image the earth we collect

00:01:11,460 --> 00:01:14,430
about three and a half million square

00:01:12,689 --> 00:01:16,650
kilometers of imagery a day which is

00:01:14,430 --> 00:01:18,659
about the size of India or if you like

00:01:16,650 --> 00:01:22,140
little things 21,000 times the size of

00:01:18,659 --> 00:01:24,509
Liechtenstein we don't link about five

00:01:22,140 --> 00:01:26,130
terabytes to six terabytes of brand-new

00:01:24,509 --> 00:01:29,970
data a day and that's highly highly

00:01:26,130 --> 00:01:32,009
compressed we turn that into about 40 to

00:01:29,970 --> 00:01:36,450
100 terabytes of new products per day

00:01:32,009 --> 00:01:39,689
that we ship out to customers so we on

00:01:36,450 --> 00:01:42,479
average add tens of petabytes of stuff

00:01:39,689 --> 00:01:44,610
every year to our archive we have tons

00:01:42,479 --> 00:01:46,320
and tons of tape and over about 60

00:01:44,610 --> 00:01:49,770
petabytes of spinning desk disk at our

00:01:46,320 --> 00:01:51,060
shop so huge i/o company we also have a

00:01:49,770 --> 00:01:52,619
platform in the cloud where you can

00:01:51,060 --> 00:01:54,000
actually bring your algorithms to our

00:01:52,619 --> 00:01:55,680
imagery so we don't have to ship you

00:01:54,000 --> 00:01:57,210
these hundreds and hundreds and hundreds

00:01:55,680 --> 00:02:01,829
of terabytes of stuff you can come and

00:01:57,210 --> 00:02:03,360
torture our imagery in AWS so we have a

00:02:01,829 --> 00:02:06,000
few satellites up to whom we've been

00:02:03,360 --> 00:02:08,220
retired we've got four other ones we'll

00:02:06,000 --> 00:02:10,289
just kind of fly through this here so

00:02:08,220 --> 00:02:12,750
what do we do in 24 hours we collect

00:02:10,289 --> 00:02:16,020
that seven days

00:02:12,750 --> 00:02:18,210
month six months a year we can paint

00:02:16,020 --> 00:02:23,460
pretty much the entire earth several

00:02:18,210 --> 00:02:25,710
times so what what happened we needed a

00:02:23,460 --> 00:02:27,300
new architecture we had a monolith you

00:02:25,710 --> 00:02:29,690
know insert monolith story here

00:02:27,300 --> 00:02:33,300
everything integrated through a database

00:02:29,690 --> 00:02:35,760
it took forever to get anything new into

00:02:33,300 --> 00:02:37,260
production so that led us to do lots and

00:02:35,760 --> 00:02:39,060
lots of fun unnatural things probably

00:02:37,260 --> 00:02:41,400
like everybody else where you'd do a

00:02:39,060 --> 00:02:43,140
bicycle to a wagon to get it to avoid

00:02:41,400 --> 00:02:44,370
the production just because it's easier

00:02:43,140 --> 00:02:47,580
to do that then actually get something

00:02:44,370 --> 00:02:49,739
new deployed very very project focused

00:02:47,580 --> 00:02:52,020
at our shop - so if you wanted to get

00:02:49,739 --> 00:02:54,000
anything done you had to tie it to a

00:02:52,020 --> 00:02:55,709
project and then every project would

00:02:54,000 --> 00:02:58,020
twist the monolith to it's own desires

00:02:55,709 --> 00:03:01,920
and collide with other projects and it

00:02:58,020 --> 00:03:03,300
was not it was not good but we had a new

00:03:01,920 --> 00:03:05,640
opportunity with our next satellite

00:03:03,300 --> 00:03:07,950
world before it's gonna be launching

00:03:05,640 --> 00:03:09,930
here in September of this year where

00:03:07,950 --> 00:03:14,640
things can change but that's what it's

00:03:09,930 --> 00:03:16,110
scheduled for now we got the opportunity

00:03:14,640 --> 00:03:17,730
from upper management to give us the

00:03:16,110 --> 00:03:21,810
green light like look we even were tired

00:03:17,730 --> 00:03:23,910
of this old system the cost to twist the

00:03:21,810 --> 00:03:26,489
noose the old system to meet the needs

00:03:23,910 --> 00:03:27,810
of a new satellite work you know they

00:03:26,489 --> 00:03:29,070
weren't quite approaching the cost of

00:03:27,810 --> 00:03:32,160
the satellite but it was getting

00:03:29,070 --> 00:03:36,930
ridiculous and non credible so we got to

00:03:32,160 --> 00:03:38,549
start over what are we gonna do so we as

00:03:36,930 --> 00:03:41,430
the enterprise architecture team we knew

00:03:38,549 --> 00:03:43,620
that building a path was going to be key

00:03:41,430 --> 00:03:45,060
we had to have something that just let

00:03:43,620 --> 00:03:48,269
developers do the best work of their

00:03:45,060 --> 00:03:53,190
life and not worry about his IT

00:03:48,269 --> 00:03:55,650
provision my my VM yet has IT done my f5

00:03:53,190 --> 00:03:57,030
rule yet you know they they should be

00:03:55,650 --> 00:03:58,320
writing lots and lots and lots of

00:03:57,030 --> 00:04:02,840
business values what they should be

00:03:58,320 --> 00:04:05,160
doing so we we surveyed the landscape

00:04:02,840 --> 00:04:07,290
created some knock out criteria for a

00:04:05,160 --> 00:04:09,420
pass what we needed it to do at our shop

00:04:07,290 --> 00:04:12,450
if it doesn't do these it can't work

00:04:09,420 --> 00:04:14,940
here we bash that against the list of

00:04:12,450 --> 00:04:16,650
passes that were available Cloud Foundry

00:04:14,940 --> 00:04:19,160
was chosen as the leading candidate so

00:04:16,650 --> 00:04:21,209
we did a few quick prototypes we

00:04:19,160 --> 00:04:24,810
verified what we called these knockout

00:04:21,209 --> 00:04:27,270
criteria and you know did things like

00:04:24,810 --> 00:04:28,470
de A's do rolling upgrades all that sort

00:04:27,270 --> 00:04:31,200
of stuff to make sure it never really

00:04:28,470 --> 00:04:33,870
went down reported a couple different

00:04:31,200 --> 00:04:36,840
apps or major languages are Java Ruby

00:04:33,870 --> 00:04:38,160
Python and report we created little

00:04:36,840 --> 00:04:39,810
sample apps and stuff like that in

00:04:38,160 --> 00:04:41,310
simple apps and ported a couple just to

00:04:39,810 --> 00:04:44,100
make sure it would work built some

00:04:41,310 --> 00:04:49,680
staffing and pricing models and went

00:04:44,100 --> 00:04:51,690
forward so kind of our path that we

00:04:49,680 --> 00:04:54,300
found ourselves on as I know it's a poor

00:04:51,690 --> 00:04:56,190
graphic we had that the Pioneers was

00:04:54,300 --> 00:04:57,570
what we did we stood up one team and we

00:04:56,190 --> 00:04:59,580
called them the Pioneer team and their

00:04:57,570 --> 00:05:01,620
job was to go get bit by rattlesnakes

00:04:59,580 --> 00:05:03,810
and step in the cactus and then figure

00:05:01,620 --> 00:05:05,910
out how to do all this stuff it was

00:05:03,810 --> 00:05:08,190
really good it was a great exercise they

00:05:05,910 --> 00:05:11,250
learned a lot and we just started this

00:05:08,190 --> 00:05:13,169
kind of learn fix adapt cycle went

00:05:11,250 --> 00:05:14,910
really well they they learned a lot and

00:05:13,169 --> 00:05:18,360
what they learned we would feed back and

00:05:14,910 --> 00:05:21,660
fix make better things that were painful

00:05:18,360 --> 00:05:23,880
we'd go back in and remove the pain and

00:05:21,660 --> 00:05:25,919
then we expanded it to beyond the

00:05:23,880 --> 00:05:27,150
Pioneer team to another team and started

00:05:25,919 --> 00:05:29,580
developing a little bit more code a

00:05:27,150 --> 00:05:31,229
little bit more code and then once you

00:05:29,580 --> 00:05:34,740
added a few more people you don't cover

00:05:31,229 --> 00:05:36,360
way more problems and well I just asked

00:05:34,740 --> 00:05:39,660
Bob to do that well let's automate Bob

00:05:36,360 --> 00:05:42,240
now right so we we kept learning and

00:05:39,660 --> 00:05:51,320
learning and learning and adapting and

00:05:42,240 --> 00:05:55,919
now we're up to I think a few things

00:05:51,320 --> 00:05:57,900
don't run well boundary minutes but

00:05:55,919 --> 00:06:01,250
almost all the apps are built and

00:05:57,900 --> 00:06:01,250
designed to run on cloud powder

00:06:01,370 --> 00:06:08,430
so some of the lessons we're learning is

00:06:05,240 --> 00:06:10,560
vocabulary is important so when you're

00:06:08,430 --> 00:06:14,460
talking with somebody about developing

00:06:10,560 --> 00:06:16,140
things and it's they're describing how

00:06:14,460 --> 00:06:18,750
they're doing it and you're like that

00:06:16,140 --> 00:06:20,160
that will never run what what are you

00:06:18,750 --> 00:06:21,450
talking about that can't run in cloud

00:06:20,160 --> 00:06:23,760
foundry you're talking you're talking

00:06:21,450 --> 00:06:27,420
about s AP right yeah I'm not gonna do

00:06:23,760 --> 00:06:29,570
CF push s Appian and be done and they're

00:06:27,420 --> 00:06:31,980
like no no I'm running that on a VM oh

00:06:29,570 --> 00:06:33,540
okay well that's we got wires crossed so

00:06:31,980 --> 00:06:34,980
we come up with this vocabulary of these

00:06:33,540 --> 00:06:36,840
patterns of apps right

00:06:34,980 --> 00:06:38,070
it's a pattern one that's a 12 pack trap

00:06:36,840 --> 00:06:40,440
it's gonna be running in Cloud Foundry

00:06:38,070 --> 00:06:43,440
pattern 2 that means your VM pattern 3

00:06:40,440 --> 00:06:45,810
is bare-metal with all the big pixel

00:06:43,440 --> 00:06:48,060
data we push around we have huge HPC

00:06:45,810 --> 00:06:50,190
clusters that are you know compute on

00:06:48,060 --> 00:06:53,730
this imagery so we have a lot of need

00:06:50,190 --> 00:06:55,860
for a lot of bare-metal but just this

00:06:53,730 --> 00:06:57,270
little nomenclature has caught on and

00:06:55,860 --> 00:06:58,800
everybody knows what are you talking

00:06:57,270 --> 00:07:00,270
about pattern one okay great you got a

00:06:58,800 --> 00:07:03,090
whole context around that you know you

00:07:00,270 --> 00:07:05,700
can just move on it's kind of funny

00:07:03,090 --> 00:07:08,310
though that we need some people to run

00:07:05,700 --> 00:07:10,650
and run our operations and stuff now so

00:07:08,310 --> 00:07:13,560
they've put out some some wrecks for

00:07:10,650 --> 00:07:15,060
hire and I seen in the wreck must be

00:07:13,560 --> 00:07:18,960
familiar with pattern one two and three

00:07:15,060 --> 00:07:25,230
apps that's not the industry no one's

00:07:18,960 --> 00:07:27,090
gonna know what that means so some of

00:07:25,230 --> 00:07:30,480
the things we learned and these learn

00:07:27,090 --> 00:07:33,240
fix adapt cycles hopefully will well our

00:07:30,480 --> 00:07:34,740
goal here is to help you out and maybe

00:07:33,240 --> 00:07:36,510
you won't get bit by the same

00:07:34,740 --> 00:07:39,450
rattlesnakes and step in the same cactus

00:07:36,510 --> 00:07:42,300
that we did but microservices sprawl

00:07:39,450 --> 00:07:44,190
fast you give the developers the ability

00:07:42,300 --> 00:07:48,870
to see you push and push fast and push

00:07:44,190 --> 00:07:51,420
anything it it goes gonzo so fast and so

00:07:48,870 --> 00:07:53,040
we had to we always had a plan yeah

00:07:51,420 --> 00:07:54,720
we're gonna do Eureka we're gonna do

00:07:53,040 --> 00:07:57,480
console we're gonna do something for

00:07:54,720 --> 00:07:59,550
first service discovery but it was a

00:07:57,480 --> 00:08:01,200
massive forcing function too we had to

00:07:59,550 --> 00:08:04,400
get that up and running quickly because

00:08:01,200 --> 00:08:07,500
of just how fast everything is for all

00:08:04,400 --> 00:08:10,400
centralized configuration people were

00:08:07,500 --> 00:08:13,889
pushing apps and some people were

00:08:10,400 --> 00:08:16,349
configuring through CF env variable

00:08:13,889 --> 00:08:18,930
other people were bundling property

00:08:16,349 --> 00:08:21,360
files into jars and huh you know cats

00:08:18,930 --> 00:08:24,689
and dogs so we're like no we're gonna go

00:08:21,360 --> 00:08:26,819
a spring config server we updated the

00:08:24,689 --> 00:08:28,249
spring config server to have a Postgres

00:08:26,819 --> 00:08:30,629
back-end it'd be nice if we could

00:08:28,249 --> 00:08:32,010
contribute that back to the open-source

00:08:30,629 --> 00:08:34,979
community but it gives it a really nice

00:08:32,010 --> 00:08:37,680
way of everybody attached into that and

00:08:34,979 --> 00:08:39,269
grabbing their config we're also

00:08:37,680 --> 00:08:41,519
wondering that API management is hard

00:08:39,269 --> 00:08:43,229
and I get angry emails just a few

00:08:41,519 --> 00:08:46,769
minutes ago on API management still

00:08:43,229 --> 00:08:49,190
we're learning but we're using we had a

00:08:46,769 --> 00:08:51,180
legacy product in-house from software AG

00:08:49,190 --> 00:08:52,740
central site where you can track your

00:08:51,180 --> 00:08:54,060
services and who's consuming their

00:08:52,740 --> 00:08:56,339
services and stuff so you have at least

00:08:54,060 --> 00:08:58,920
some dependency map of who's dependent

00:08:56,339 --> 00:09:00,660
on what and why so that that's been

00:08:58,920 --> 00:09:03,810
helpful we're also using a tool called

00:09:00,660 --> 00:09:06,420
apiary I don't a PR II but it's a good

00:09:03,810 --> 00:09:08,579
design tool on the web we've bought into

00:09:06,420 --> 00:09:10,290
it pretty heavily makes it nice for

00:09:08,579 --> 00:09:12,480
testing your api's and giving them a

00:09:10,290 --> 00:09:15,930
pretty easy way to do some work down to

00:09:12,480 --> 00:09:18,810
define your API I'm still learning you

00:09:15,930 --> 00:09:20,579
don't have any golden magic sauce here

00:09:18,810 --> 00:09:21,720
yet but we're learning but that's what

00:09:20,579 --> 00:09:23,149
the tools we're using now and they seem

00:09:21,720 --> 00:09:26,519
to be doing okay we even have the

00:09:23,149 --> 00:09:28,230
software AG's product integrated into

00:09:26,519 --> 00:09:30,240
our pipeline now so when you first time

00:09:28,230 --> 00:09:32,339
you hit deploy on an app to get it

00:09:30,240 --> 00:09:35,279
running through our pipeline it'll check

00:09:32,339 --> 00:09:37,709
with central site to go oh I have no

00:09:35,279 --> 00:09:39,810
clue what this service is you can't

00:09:37,709 --> 00:09:43,350
proceed past go until you tell central

00:09:39,810 --> 00:09:47,010
site what it's all about so we're also

00:09:43,350 --> 00:09:50,690
learning decoupling code deploy from

00:09:47,010 --> 00:09:53,399
feature deploy this is critical to

00:09:50,690 --> 00:09:55,380
people are familiar with it I'll Park

00:09:53,399 --> 00:09:58,500
the people who aren't so familiar with

00:09:55,380 --> 00:10:01,350
it it's it's the Zen art I guess of

00:09:58,500 --> 00:10:03,029
being able to have your continuous

00:10:01,350 --> 00:10:05,160
delivery pipeline continuously

00:10:03,029 --> 00:10:07,079
delivering but not actually be turning

00:10:05,160 --> 00:10:08,519
on new features in production right have

00:10:07,079 --> 00:10:11,100
a very controlled way to turn on a

00:10:08,519 --> 00:10:13,140
feature so the code just keeps flowing

00:10:11,100 --> 00:10:15,420
like it's supposed to but you can go

00:10:13,140 --> 00:10:17,250
configure that new feature on in like a

00:10:15,420 --> 00:10:18,690
user acceptance test environment and

00:10:17,250 --> 00:10:21,660
they can poke around and test it and

00:10:18,690 --> 00:10:24,850
like it and then you just there's no big

00:10:21,660 --> 00:10:26,920
big bang production day that's

00:10:24,850 --> 00:10:29,410
codes already there just go turn the

00:10:26,920 --> 00:10:31,360
nuclear launch key to on and in your

00:10:29,410 --> 00:10:33,100
career features live in production so

00:10:31,360 --> 00:10:35,260
we're still learning there we're trying

00:10:33,100 --> 00:10:38,590
to integrate that where we're trying to

00:10:35,260 --> 00:10:40,780
use a feature flipper for Java FF for J

00:10:38,590 --> 00:10:43,090
and we're trying to enhance it to use

00:10:40,780 --> 00:10:44,470
our centralized configuration server so

00:10:43,090 --> 00:10:46,480
we have a centralized configure the apps

00:10:44,470 --> 00:10:50,110
and centralized configuration of all of

00:10:46,480 --> 00:10:53,560
our features so that's the end goal of

00:10:50,110 --> 00:10:56,020
that we hopefully get there some other

00:10:53,560 --> 00:10:59,800
things we've learned is standard

00:10:56,020 --> 00:11:01,450
standard standards or your friends some

00:10:59,800 --> 00:11:02,860
people will kind of be the Wild West is

00:11:01,450 --> 00:11:07,470
ok just let people do what they need to

00:11:02,860 --> 00:11:11,050
do but we found a ton of value in having

00:11:07,470 --> 00:11:12,370
every app your slash endpoint is a very

00:11:11,050 --> 00:11:15,190
standard endpoint and what it returns

00:11:12,370 --> 00:11:17,070
who you are what bills you are you know

00:11:15,190 --> 00:11:20,560
a little bit of information about you

00:11:17,070 --> 00:11:23,110
that slash status and slash health check

00:11:20,560 --> 00:11:25,090
slash status will check your immediate

00:11:23,110 --> 00:11:26,560
dependencies so like your database

00:11:25,090 --> 00:11:28,930
connection or if you have a dependency

00:11:26,560 --> 00:11:31,840
on a file system or whatever it is it

00:11:28,930 --> 00:11:34,510
checks your dependencies like that and a

00:11:31,840 --> 00:11:36,040
health check to checks your remote

00:11:34,510 --> 00:11:37,420
dependency so if you depend on a remote

00:11:36,040 --> 00:11:39,220
service it'll actually go out and hit

00:11:37,420 --> 00:11:41,680
the slash status of that remote service

00:11:39,220 --> 00:11:43,480
so it gives us a very standard way when

00:11:41,680 --> 00:11:45,940
things are deployed I know I can go to

00:11:43,480 --> 00:11:47,380
slash see what it is go slash data see

00:11:45,940 --> 00:11:48,940
if it's kind of healthy and go to slash

00:11:47,380 --> 00:11:50,740
health check to see if it's really

00:11:48,940 --> 00:11:52,240
healthy so the monitoring monitoring

00:11:50,740 --> 00:11:56,770
teams are integrating all these calls

00:11:52,240 --> 00:11:58,270
it's been pretty nice our build pipeline

00:11:56,770 --> 00:12:00,340
are actually rebuilding our build

00:11:58,270 --> 00:12:02,800
pipeline we we tried to do everything in

00:12:00,340 --> 00:12:05,380
Jenkins soup-to-nuts and that didn't

00:12:02,800 --> 00:12:06,790
work out too well and we're trying to

00:12:05,380 --> 00:12:09,160
now choose the right tool for the right

00:12:06,790 --> 00:12:11,260
job Jenkins does builds really good but

00:12:09,160 --> 00:12:13,990
Excel released from zbo labs that

00:12:11,260 --> 00:12:16,690
orchestrates releases pretty well so

00:12:13,990 --> 00:12:18,370
we're we're we're doing that now that's

00:12:16,690 --> 00:12:22,960
a big big effort to redo our pipeline

00:12:18,370 --> 00:12:24,400
and one huge landmine if I can keep you

00:12:22,960 --> 00:12:27,430
from stepping on something at least this

00:12:24,400 --> 00:12:29,440
was big where I work is we have a bunch

00:12:27,430 --> 00:12:31,330
of things like that common the config

00:12:29,440 --> 00:12:33,040
server that's common for everybody to

00:12:31,330 --> 00:12:34,920
use we created this notion that there's

00:12:33,040 --> 00:12:37,630
all these common services out there and

00:12:34,920 --> 00:12:39,640
well wait a minute I'm writing this

00:12:37,630 --> 00:12:41,140
is that I thought that was supposed to

00:12:39,640 --> 00:12:43,270
be the one place where the company come

00:12:41,140 --> 00:12:45,940
to get this so isn't that common well

00:12:43,270 --> 00:12:47,260
yeah well that makes everything common

00:12:45,940 --> 00:12:49,090
right you should only write things once

00:12:47,260 --> 00:12:50,950
you should only write the function for

00:12:49,090 --> 00:12:52,840
the enterprise once not ten times so

00:12:50,950 --> 00:12:56,950
technically every service is common

00:12:52,840 --> 00:12:58,630
right so we we decided that it would

00:12:56,950 --> 00:13:00,670
have been a much better path to call

00:12:58,630 --> 00:13:02,410
these config service and things like

00:13:00,670 --> 00:13:05,170
that the utility services right if the

00:13:02,410 --> 00:13:07,420
utilities are down everything's down but

00:13:05,170 --> 00:13:13,480
it just caused so much confusion and

00:13:07,420 --> 00:13:15,780
chaos to call those common services so

00:13:13,480 --> 00:13:18,460
what's the current state a digital globe

00:13:15,780 --> 00:13:21,190
we have open source cloud phone foundry

00:13:18,460 --> 00:13:23,230
running for dev test we have over 800

00:13:21,190 --> 00:13:26,050
services running in there they're not

00:13:23,230 --> 00:13:27,640
all unique developers are doing their

00:13:26,050 --> 00:13:29,680
own thing and there might be twenty

00:13:27,640 --> 00:13:31,420
copies of the same thing out there

00:13:29,680 --> 00:13:33,750
because they're in little developer

00:13:31,420 --> 00:13:35,800
spaces supporting their development and

00:13:33,750 --> 00:13:37,450
it's kind of interesting in fact I don't

00:13:35,800 --> 00:13:38,920
know if anybody else has any history on

00:13:37,450 --> 00:13:40,630
this but we think that when we're done

00:13:38,920 --> 00:13:42,430
we're gonna have between like 60 and 80

00:13:40,630 --> 00:13:44,020
micro services for this first kind of

00:13:42,430 --> 00:13:46,240
big release that's supporting the launch

00:13:44,020 --> 00:13:49,450
of the satellite and so we're getting an

00:13:46,240 --> 00:13:51,130
order of magnitude difference between

00:13:49,450 --> 00:13:53,560
this is how many is gonna be running in

00:13:51,130 --> 00:13:55,210
production versus this has many it is is

00:13:53,560 --> 00:13:57,580
running just to support all the

00:13:55,210 --> 00:13:59,850
developers so be interesting to hear if

00:13:57,580 --> 00:14:02,980
anybody else has any numbers like that

00:13:59,850 --> 00:14:05,710
our de A's are just two CPU to 16 Giga

00:14:02,980 --> 00:14:07,090
RAM 3x overcommit on memory we found

00:14:05,710 --> 00:14:09,190
what they're running that mini apps we

00:14:07,090 --> 00:14:13,540
just can't scale with a 1x over commit

00:14:09,190 --> 00:14:15,550
which just it was ridiculous we're

00:14:13,540 --> 00:14:18,550
integrated with long stack or elk stack

00:14:15,550 --> 00:14:21,520
for our logging and we're currently

00:14:18,550 --> 00:14:23,680
using log drains bound to every app but

00:14:21,520 --> 00:14:25,060
we're looking at doing firehose and we

00:14:23,680 --> 00:14:27,250
just actually broke the ground on that

00:14:25,060 --> 00:14:29,410
on last Friday which makes that a lot

00:14:27,250 --> 00:14:30,850
easier and right next door our friends

00:14:29,410 --> 00:14:36,490
are talking about that in another

00:14:30,850 --> 00:14:38,290
meeting in production we have PCF

00:14:36,490 --> 00:14:40,330
running in production on OpenStack it's

00:14:38,290 --> 00:14:42,220
up and running we have a few services

00:14:40,330 --> 00:14:43,450
that been kind of snowflake Ashley

00:14:42,220 --> 00:14:44,890
deployed out there because we're

00:14:43,450 --> 00:14:46,089
rewriting our pipeline and we didn't

00:14:44,890 --> 00:14:47,440
want to go back and rewrite the entire

00:14:46,089 --> 00:14:49,600
pipeline to deploy to production to

00:14:47,440 --> 00:14:49,930
replace the pipeline so we just kind of

00:14:49,600 --> 00:14:51,279
have

00:14:49,930 --> 00:14:55,060
in a couple things at the end of deploy

00:14:51,279 --> 00:14:57,310
a few things to production and running

00:14:55,060 --> 00:15:00,460
pretty good so far some of the winds

00:14:57,310 --> 00:15:01,990
that we have is our development speed we

00:15:00,460 --> 00:15:03,520
once we had those patterns down we could

00:15:01,990 --> 00:15:05,860
talk about them know the pattern one two

00:15:03,520 --> 00:15:08,649
three and then four the pattern once we

00:15:05,860 --> 00:15:10,630
created a template a pin in github where

00:15:08,649 --> 00:15:13,180
you just basically like download the zip

00:15:10,630 --> 00:15:14,860
file unzip it create your new repo and

00:15:13,180 --> 00:15:16,990
you're on your way you change the name

00:15:14,860 --> 00:15:20,110
of the app and it takes care of its like

00:15:16,990 --> 00:15:22,930
fill in here four slash data slash

00:15:20,110 --> 00:15:26,070
all those great he's easy to onboard

00:15:22,930 --> 00:15:28,390
developers and new team members that way

00:15:26,070 --> 00:15:29,860
he's a development we've been lots and

00:15:28,390 --> 00:15:31,330
lots and lots of self-service portals

00:15:29,860 --> 00:15:33,399
that's been a really really really key

00:15:31,330 --> 00:15:35,500
if you're thinking about doing this

00:15:33,399 --> 00:15:37,390
self-service is key but one thing that

00:15:35,500 --> 00:15:38,620
we've learned is your self-service gets

00:15:37,390 --> 00:15:40,720
out of control and in order to

00:15:38,620 --> 00:15:43,480
self-service yourself to a new service

00:15:40,720 --> 00:15:44,980
you got to go to 30 different places so

00:15:43,480 --> 00:15:47,140
we're gonna have to have like a

00:15:44,980 --> 00:15:51,190
self-service portal consolidation effort

00:15:47,140 --> 00:15:52,899
here sometime the visibility is great in

00:15:51,190 --> 00:15:54,640
the Cloud Foundry what's running let me

00:15:52,899 --> 00:15:55,720
just do a CF curl command to the half's

00:15:54,640 --> 00:15:57,700
endpoint and I'll tell you exactly

00:15:55,720 --> 00:16:00,580
what's running the monitoring team does

00:15:57,700 --> 00:16:02,050
that once you can see everything then

00:16:00,580 --> 00:16:03,910
you can audit everything right so as

00:16:02,050 --> 00:16:05,440
soon as we find new services we can send

00:16:03,910 --> 00:16:07,060
off Nimsoft alerts who's doing what and

00:16:05,440 --> 00:16:10,060
why why is there new things popping up

00:16:07,060 --> 00:16:11,709
in production or wherever and when you

00:16:10,060 --> 00:16:13,779
get visibility and auditability you get

00:16:11,709 --> 00:16:15,370
control of your environment so this has

00:16:13,779 --> 00:16:16,600
been huge for us as you know what's

00:16:15,370 --> 00:16:20,589
going on you know what's deployed

00:16:16,600 --> 00:16:23,200
everywhere and alarms can go off and the

00:16:20,589 --> 00:16:24,730
audit ability with the Nimsoft alerts

00:16:23,200 --> 00:16:27,310
being sent out we're actually automating

00:16:24,730 --> 00:16:30,880
ELQ to the point where it'll auto create

00:16:27,310 --> 00:16:34,839
a new dashboard for that app as soon as

00:16:30,880 --> 00:16:36,579
it appears the testing groups are just

00:16:34,839 --> 00:16:38,050
ecstatic and that's mostly on because of

00:16:36,579 --> 00:16:39,700
Micra services we used to have a

00:16:38,050 --> 00:16:41,829
monolith where if you wanted to test the

00:16:39,700 --> 00:16:43,390
delivery of a product you had to put an

00:16:41,829 --> 00:16:44,770
order in and wait through the whole

00:16:43,390 --> 00:16:46,000
thing to go to the through the pachinko

00:16:44,770 --> 00:16:48,160
machine to see if it actually got

00:16:46,000 --> 00:16:50,200
delivered and now if micro services you

00:16:48,160 --> 00:16:53,980
know you can just test that just test

00:16:50,200 --> 00:16:55,959
delivery on its own some of the other

00:16:53,980 --> 00:16:58,630
big wins is resiliency holy cow we've

00:16:55,959 --> 00:17:00,160
had compute nodes fail and OpenStack to

00:16:58,630 --> 00:17:02,680
burn up CPUs and stuff

00:17:00,160 --> 00:17:03,490
none of the cloud foundry users even

00:17:02,680 --> 00:17:05,860
knew right

00:17:03,490 --> 00:17:07,390
well me being one of the admins I looked

00:17:05,860 --> 00:17:09,939
at it and go why why do I have new Bosch

00:17:07,390 --> 00:17:13,000
VMs what's going on start peeling back

00:17:09,939 --> 00:17:13,689
the layers find a big pute nodes had

00:17:13,000 --> 00:17:15,160
vanished

00:17:13,689 --> 00:17:16,900
none of the cloud foundry people even

00:17:15,160 --> 00:17:19,089
knew and this this happened several

00:17:16,900 --> 00:17:22,240
times so that we're very happy with the

00:17:19,089 --> 00:17:23,559
resiliency we've gotten some of the

00:17:22,240 --> 00:17:25,630
challenges we've had is a

00:17:23,559 --> 00:17:27,670
synchronization across foundations we're

00:17:25,630 --> 00:17:29,170
doing two regions if you will we have

00:17:27,670 --> 00:17:32,200
two data centers that are geographically

00:17:29,170 --> 00:17:34,270
diverse but synchronizing across these

00:17:32,200 --> 00:17:35,980
is becoming problematic how do you have

00:17:34,270 --> 00:17:39,370
one source of truth for you eh eh when

00:17:35,980 --> 00:17:41,080
you got to different foundations best

00:17:39,370 --> 00:17:42,820
practices around load balancing without

00:17:41,080 --> 00:17:45,100
5s across foundations are kind of few

00:17:42,820 --> 00:17:47,910
and far between that we can find freely

00:17:45,100 --> 00:17:50,830
available so we're trying to learn here

00:17:47,910 --> 00:17:53,200
SSL one thing we'd really like to do is

00:17:50,830 --> 00:17:55,540
have a domain per developer so you can

00:17:53,200 --> 00:17:57,580
segregate it off in your own domain but

00:17:55,540 --> 00:17:59,080
just to the due to the nature of work we

00:17:57,580 --> 00:18:04,150
do even in development we have to do

00:17:59,080 --> 00:18:06,700
HTTPS Everywhere and as many of you may

00:18:04,150 --> 00:18:09,370
know you can only have one served and

00:18:06,700 --> 00:18:11,380
you have to have a zillion sans subject

00:18:09,370 --> 00:18:12,910
alternative names in the cert that's

00:18:11,380 --> 00:18:16,210
just it's kind of a non-starter to

00:18:12,910 --> 00:18:17,830
rebuild a massive cert every time you

00:18:16,210 --> 00:18:19,179
have a new developer start but so it'd

00:18:17,830 --> 00:18:21,309
be nice to just be able to point it at a

00:18:19,179 --> 00:18:26,380
list of here's a bunch of search go and

00:18:21,309 --> 00:18:28,330
go serve up all these open-source no

00:18:26,380 --> 00:18:30,400
support for a che at of the box so these

00:18:28,330 --> 00:18:32,559
the development environments we wanted

00:18:30,400 --> 00:18:33,910
to have some level of resiliency but

00:18:32,559 --> 00:18:37,090
we've had to have to kind of hand roll

00:18:33,910 --> 00:18:38,890
our own H a you know Bosch deployments

00:18:37,090 --> 00:18:40,270
and stuff like that and the VCS team

00:18:38,890 --> 00:18:44,860
have helped us out there it's great

00:18:40,270 --> 00:18:46,740
stuff developer and DevOps access to

00:18:44,860 --> 00:18:48,910
spaces that's been interesting because

00:18:46,740 --> 00:18:52,330
when you're using these log binders

00:18:48,910 --> 00:18:53,679
launch stats drain binders just some

00:18:52,330 --> 00:18:55,300
time it kind of takes a while we've

00:18:53,679 --> 00:18:57,490
noticed to get logs out and when you

00:18:55,300 --> 00:19:00,250
first deploy in an app and it dies in a

00:18:57,490 --> 00:19:02,230
test environment it's it was hard to get

00:19:00,250 --> 00:19:04,510
the logs out so sometimes the developers

00:19:02,230 --> 00:19:06,730
needed access to these spaces and we

00:19:04,510 --> 00:19:08,830
didn't want to give every the

00:19:06,730 --> 00:19:09,240
fine-grained access control just isn't

00:19:08,830 --> 00:19:11,389
there

00:19:09,240 --> 00:19:13,279
to just give them kind of

00:19:11,389 --> 00:19:15,440
you space auditor wasn't enough but

00:19:13,279 --> 00:19:17,539
space developers way too much power to

00:19:15,440 --> 00:19:19,609
create a snowflake and all that stuff

00:19:17,539 --> 00:19:21,259
so that's kind of the things that we're

00:19:19,609 --> 00:19:23,299
we're dealing with and there's some

00:19:21,259 --> 00:19:25,369
tension too between the micro service

00:19:23,299 --> 00:19:27,019
architecture and the licensing models

00:19:25,369 --> 00:19:28,459
from the vendors there's the tension

00:19:27,019 --> 00:19:29,690
there the more times I do the right

00:19:28,459 --> 00:19:31,999
thing if I need to break things down

00:19:29,690 --> 00:19:33,739
from one service to ten that actually

00:19:31,999 --> 00:19:37,820
cost me a lot of money to do that no

00:19:33,739 --> 00:19:41,299
matter which product I'm on change is

00:19:37,820 --> 00:19:42,649
hard be ever vigilant the old ways of

00:19:41,299 --> 00:19:44,089
doing things are gonna come back you're

00:19:42,649 --> 00:19:47,149
gonna have a developer that's trying to

00:19:44,089 --> 00:19:50,149
cram their own custom-built

00:19:47,149 --> 00:19:52,399
pearl into their app yes real story I

00:19:50,149 --> 00:19:58,099
need to package this entire pearl distro

00:19:52,399 --> 00:19:59,749
with my app what why get somebody an

00:19:58,099 --> 00:20:01,369
executive management to back you we've

00:19:59,749 --> 00:20:03,049
had many times where people just didn't

00:20:01,369 --> 00:20:06,739
want to do stuff and we've had to play

00:20:03,049 --> 00:20:08,029
the the c XX whatever said so so I'm

00:20:06,739 --> 00:20:11,570
really sorry but you have to get on the

00:20:08,029 --> 00:20:14,869
train and for me I'm on the architecture

00:20:11,570 --> 00:20:16,749
team we had to totally put it on the

00:20:14,869 --> 00:20:19,729
line and fight for this the

00:20:16,749 --> 00:20:21,859
organization's had really really really

00:20:19,729 --> 00:20:23,749
resisted change but putting it out there

00:20:21,859 --> 00:20:25,429
and putting your badge on the table and

00:20:23,749 --> 00:20:27,229
you know this this is the penalty if I'm

00:20:25,429 --> 00:20:29,599
wrong take that away from me

00:20:27,229 --> 00:20:32,929
that's well that's kind of what we had

00:20:29,599 --> 00:20:35,479
to do but it's been great and I think

00:20:32,929 --> 00:20:38,149
that's the last oh just one more that

00:20:35,479 --> 00:20:42,529
our future needs we actually have a need

00:20:38,149 --> 00:20:43,789
for a like an OEM style of cloud foundry

00:20:42,529 --> 00:20:45,320
deployment where I can put it at the

00:20:43,789 --> 00:20:47,509
customer site and just turn it on for

00:20:45,320 --> 00:20:49,190
our entire system I don't think

00:20:47,509 --> 00:20:50,839
anybody's doing that right now but if

00:20:49,190 --> 00:20:54,079
anybody else is thinking that I'd like

00:20:50,839 --> 00:20:55,940
to talk to you managing multiple

00:20:54,079 --> 00:20:57,469
foundations as if it were one that would

00:20:55,940 --> 00:20:59,149
be sure nice if anybody's had any

00:20:57,469 --> 00:21:00,499
insight into that or no when you open

00:20:59,149 --> 00:21:02,450
source tools that help with that we'd

00:21:00,499 --> 00:21:04,070
love to hear from you and persistent

00:21:02,450 --> 00:21:07,459
storage oh wait they just did that yeah

00:21:04,070 --> 00:21:09,379
diego has it awesome and if that I'll

00:21:07,459 --> 00:21:11,149
bring up Steve and he'll talk to you

00:21:09,379 --> 00:21:13,440
about that kind of the day in the life

00:21:11,149 --> 00:21:19,409
of a developer

00:21:13,440 --> 00:21:20,730
all right thanks Mike so I'm gonna talk

00:21:19,409 --> 00:21:23,240
to you a little bit about what our

00:21:20,730 --> 00:21:27,029
delivery pipeline is and how it looks

00:21:23,240 --> 00:21:29,120
for a developer so when they start off

00:21:27,029 --> 00:21:32,100
they have their local dev environment

00:21:29,120 --> 00:21:36,779
they'll check in to github pretty

00:21:32,100 --> 00:21:38,490
standard stuff and before that we check

00:21:36,779 --> 00:21:40,100
in the github that could use a dev

00:21:38,490 --> 00:21:42,539
environment so we created a dev

00:21:40,100 --> 00:21:45,509
organization so each one of these boxes

00:21:42,539 --> 00:21:47,610
here is an organization within cloud

00:21:45,509 --> 00:21:49,799
foundry so they have their own personal

00:21:47,610 --> 00:21:51,990
space their own sandbox they can use and

00:21:49,799 --> 00:21:53,220
then they can check in to github which

00:21:51,990 --> 00:21:55,710
will trigger a build

00:21:53,220 --> 00:21:58,350
so the first it's it's kind of the the

00:21:55,710 --> 00:22:00,690
standard build right initially where you

00:21:58,350 --> 00:22:03,059
do your compile you do your unit testing

00:22:00,690 --> 00:22:05,100
now moving into the micro service world

00:22:03,059 --> 00:22:08,070
one thing that we wanted to do is after

00:22:05,100 --> 00:22:09,899
you did your standard build and created

00:22:08,070 --> 00:22:12,269
your archive we wanted to make sure that

00:22:09,899 --> 00:22:15,690
archive was deployable into cloud

00:22:12,269 --> 00:22:21,120
foundry so we have this functional test

00:22:15,690 --> 00:22:24,000
organization and so after your after

00:22:21,120 --> 00:22:26,789
your application passed the unit tests

00:22:24,000 --> 00:22:28,740
there was an archive we create a space

00:22:26,789 --> 00:22:31,830
within the functional test environment

00:22:28,740 --> 00:22:34,500
for your micro service so it's a clean

00:22:31,830 --> 00:22:36,840
space we deploy that archive into a

00:22:34,500 --> 00:22:40,649
clean space and in the functional test

00:22:36,840 --> 00:22:42,779
environment the dependent micro services

00:22:40,649 --> 00:22:45,509
are mocked out so we want to make sure

00:22:42,779 --> 00:22:47,840
that that micro service works on its own

00:22:45,509 --> 00:22:50,159
it stills working within the what

00:22:47,840 --> 00:22:53,460
infrastructural bounds so it registers

00:22:50,159 --> 00:22:56,100
with Eureka it goes out to the config

00:22:53,460 --> 00:22:59,279
surface it uses event service if if it

00:22:56,100 --> 00:23:00,960
needs to so it'll still work within the

00:22:59,279 --> 00:23:02,970
bounds of the infrastructure it will

00:23:00,960 --> 00:23:05,070
hook up to a database but all the

00:23:02,970 --> 00:23:08,639
dependent services around it or mocked

00:23:05,070 --> 00:23:11,340
out so if it passes the functional tests

00:23:08,639 --> 00:23:13,860
that it has that environment is then

00:23:11,340 --> 00:23:15,899
torn down again so we we use the

00:23:13,860 --> 00:23:17,970
resources for the period of time we need

00:23:15,899 --> 00:23:19,980
to use the resources then it gets torn

00:23:17,970 --> 00:23:22,649
down and if it does fail the functional

00:23:19,980 --> 00:23:24,549
tests that environment that space is

00:23:22,649 --> 00:23:26,769
still left intact

00:23:24,549 --> 00:23:29,469
so that the developers can come or come

00:23:26,769 --> 00:23:32,229
back around and investigate the logs and

00:23:29,469 --> 00:23:35,739
do some analysis to see why it failed

00:23:32,229 --> 00:23:37,450
the functional test so once it passes

00:23:35,739 --> 00:23:38,859
the functional test then we'll move it

00:23:37,450 --> 00:23:42,429
on into what we're calling the

00:23:38,859 --> 00:23:44,619
integration test organization now the

00:23:42,429 --> 00:23:47,469
integration test organization is a

00:23:44,619 --> 00:23:49,719
full-up environment so all the micro

00:23:47,469 --> 00:23:52,539
services within the ecosystem are in the

00:23:49,719 --> 00:23:54,969
integration test environment and so then

00:23:52,539 --> 00:23:57,609
it runs some integration tests against

00:23:54,969 --> 00:24:00,159
your micro services and make sure that

00:23:57,609 --> 00:24:01,959
it works in a full-up environment the

00:24:00,159 --> 00:24:04,690
integration test environment is also a

00:24:01,959 --> 00:24:06,459
place where tests will go or development

00:24:04,690 --> 00:24:08,919
will go and they'll just do some kind of

00:24:06,459 --> 00:24:13,749
exploratory tests with their micro

00:24:08,919 --> 00:24:15,909
services and you know experiment on what

00:24:13,749 --> 00:24:19,299
type of tests do we want to have in our

00:24:15,909 --> 00:24:21,219
automated test harness and then if when

00:24:19,299 --> 00:24:22,929
when from the integration test

00:24:21,219 --> 00:24:24,519
environment we have a bit more of a

00:24:22,929 --> 00:24:26,559
controlled environment called the

00:24:24,519 --> 00:24:29,499
regression test environment now

00:24:26,559 --> 00:24:32,019
currently we have actually a manual gate

00:24:29,499 --> 00:24:35,440
we actually have a manual gate right

00:24:32,019 --> 00:24:37,359
here so somebody has to approve a micro

00:24:35,440 --> 00:24:39,369
service going from the integration test

00:24:37,359 --> 00:24:41,739
environment to the regression test

00:24:39,369 --> 00:24:46,029
environment you know we're still dealing

00:24:41,739 --> 00:24:48,940
with some cultural issues where there's

00:24:46,029 --> 00:24:51,339
a group that they want to have control

00:24:48,940 --> 00:24:53,289
over how things flow into an environment

00:24:51,339 --> 00:24:54,969
they want to make sure there's no change

00:24:53,289 --> 00:24:57,759
happening to this environment while

00:24:54,969 --> 00:24:59,259
they're running their tests and we feel

00:24:57,759 --> 00:25:01,629
that we kind of have to earn the right

00:24:59,259 --> 00:25:04,539
in order to make that an automated

00:25:01,629 --> 00:25:06,459
deploy so you know over time we hope we

00:25:04,539 --> 00:25:09,009
gain the trust of the community to say

00:25:06,459 --> 00:25:11,709
yes it's all working it all works well

00:25:09,009 --> 00:25:14,109
we have this rich automated test harness

00:25:11,709 --> 00:25:16,929
let us just flow into the regression

00:25:14,109 --> 00:25:21,190
test environment but currently this is a

00:25:16,929 --> 00:25:23,639
manual gate right here and then so we

00:25:21,190 --> 00:25:26,549
got open source here in this environment

00:25:23,639 --> 00:25:29,440
in our production environment we have

00:25:26,549 --> 00:25:32,409
pivotal Cloud Foundry that were working

00:25:29,440 --> 00:25:34,450
and as Mike said this this path right

00:25:32,409 --> 00:25:35,410
here is one that we are just starting to

00:25:34,450 --> 00:25:38,570
burn

00:25:35,410 --> 00:25:42,380
so each one of these are organizations

00:25:38,570 --> 00:25:44,780
so I'm I'm gonna dive into what each

00:25:42,380 --> 00:25:47,510
what were the spaces look like within

00:25:44,780 --> 00:25:50,750
each one of these organizations so we

00:25:47,510 --> 00:25:52,820
have our organization here and we have

00:25:50,750 --> 00:25:54,890
one space we're calling infrastructure

00:25:52,820 --> 00:25:57,770
so this is what we're kind of the

00:25:54,890 --> 00:26:00,260
utility micro services that Mike was

00:25:57,770 --> 00:26:02,810
talking about so in that space will have

00:26:00,260 --> 00:26:04,520
config service event service there's a

00:26:02,810 --> 00:26:07,310
few other services in there that are

00:26:04,520 --> 00:26:10,880
there are more utility services and then

00:26:07,310 --> 00:26:12,770
we have a space per business domain so

00:26:10,880 --> 00:26:15,650
we'll have inventory and then each one

00:26:12,770 --> 00:26:18,200
of these MCS and MPs their specific

00:26:15,650 --> 00:26:22,940
business domains within the the

00:26:18,200 --> 00:26:25,010
satellite arena now notice we have over

00:26:22,940 --> 00:26:27,470
here to the side so this would be called

00:26:25,010 --> 00:26:30,080
our pattern one and over here we have

00:26:27,470 --> 00:26:33,970
what were our pattern two so that these

00:26:30,080 --> 00:26:36,770
are services that each one of these

00:26:33,970 --> 00:26:39,020
micro services could leverage if they

00:26:36,770 --> 00:26:41,090
wanted so they're all leveraging Eureka

00:26:39,020 --> 00:26:45,350
and we have this over here running as a

00:26:41,090 --> 00:26:47,990
VM we're using ActiveMQ for our queuing

00:26:45,350 --> 00:26:50,900
mechanism we got elk over here and then

00:26:47,990 --> 00:26:53,720
we're using Postgres for our database so

00:26:50,900 --> 00:26:56,870
that kind of gives you overview of what

00:26:53,720 --> 00:27:00,410
our environment looks like digital

00:26:56,870 --> 00:27:01,700
Globes hiring UCS is also hiring so if

00:27:00,410 --> 00:27:03,020
you're interested in doing this

00:27:01,700 --> 00:27:06,230
professionally there's some

00:27:03,020 --> 00:27:11,150
opportunities for you and there's some

00:27:06,230 --> 00:27:12,830
contact information and any questions if

00:27:11,150 --> 00:27:21,200
you get stuck up to the mic or speak

00:27:12,830 --> 00:27:23,450
loudly we'll address those out I think

00:27:21,200 --> 00:27:25,850
so I think we got one here thanks guys

00:27:23,450 --> 00:27:28,610
that great talk today you mentioned

00:27:25,850 --> 00:27:31,760
earlier in the session the importance of

00:27:28,610 --> 00:27:33,110
standards and yet standards have

00:27:31,760 --> 00:27:35,630
certainly gone through a lot of

00:27:33,110 --> 00:27:38,750
evolution over the last five plus years

00:27:35,630 --> 00:27:41,150
in terms of standard boards and entities

00:27:38,750 --> 00:27:44,120
versus de facto standards through code

00:27:41,150 --> 00:27:45,760
how do you guys navigate between the old

00:27:44,120 --> 00:27:48,700
and new world

00:27:45,760 --> 00:27:50,409
we tried to uh we have a kind of like a

00:27:48,700 --> 00:27:52,860
hierarchy of standards generally you

00:27:50,409 --> 00:27:55,120
know we try to go with open standards

00:27:52,860 --> 00:27:57,399
industry standards and then DigitalGlobe

00:27:55,120 --> 00:27:59,590
standards so we really try if there is

00:27:57,399 --> 00:28:02,440
an actual industry open standard out

00:27:59,590 --> 00:28:04,000
there we've tried to use that barring

00:28:02,440 --> 00:28:05,559
that if there's some satellite industry

00:28:04,000 --> 00:28:06,940
standard or something in our industry

00:28:05,559 --> 00:28:09,700
that's fairly standard we've been using

00:28:06,940 --> 00:28:12,549
that and the last resort is let's build

00:28:09,700 --> 00:28:13,750
at least an internal standard so when it

00:28:12,549 --> 00:28:14,679
comes to interoperability and things

00:28:13,750 --> 00:28:16,750
like that you know we're trying to use

00:28:14,679 --> 00:28:18,279
oauth2 and trying to latch on the big

00:28:16,750 --> 00:28:20,470
standards like that one need be there's

00:28:18,279 --> 00:28:25,600
a lot of open GIS consortium standards

00:28:20,470 --> 00:28:27,309
that we leverage to we're also not that

00:28:25,600 --> 00:28:29,590
it's - I don't know what the right word

00:28:27,309 --> 00:28:33,490
is it's not too hard of a standard we're

00:28:29,590 --> 00:28:36,100
using how for all of our JSON responses

00:28:33,490 --> 00:28:37,630
so hypermedia application language where

00:28:36,100 --> 00:28:43,570
you can actually kind of describe your

00:28:37,630 --> 00:28:46,200
structure in the response any other

00:28:43,570 --> 00:28:46,200
questions

00:28:48,100 --> 00:28:52,730
roll your not wide you said to use that

00:28:51,230 --> 00:28:53,899
pivotal CF and production as opposed to

00:28:52,730 --> 00:28:57,820
just rolling it yourself you'd already

00:28:53,899 --> 00:29:01,340
done it for your dev test environment

00:28:57,820 --> 00:29:04,640
it's a comfort factor right right now

00:29:01,340 --> 00:29:06,830
the upper management you know and the

00:29:04,640 --> 00:29:08,570
the five satellites that are up there or

00:29:06,830 --> 00:29:10,519
that will be up there you know they

00:29:08,570 --> 00:29:12,649
represent billions of dollars of

00:29:10,519 --> 00:29:14,870
investment so when something goes wrong

00:29:12,649 --> 00:29:16,039
they just didn't want to go open-source

00:29:14,870 --> 00:29:18,590
at the beginning and they wanted to have

00:29:16,039 --> 00:29:19,809
a big brother to be able to call

00:29:18,590 --> 00:29:23,059
something was wrong

00:29:19,809 --> 00:29:25,340
so we have other environments that that

00:29:23,059 --> 00:29:27,230
pivotal will probably be of the vendor

00:29:25,340 --> 00:29:34,659
always a digital globe because of that

00:29:27,230 --> 00:29:34,659
reason any other questions

00:29:35,370 --> 00:29:37,910
thanks everybody for coming appreciate

00:29:37,260 --> 00:29:42,179
it

00:29:37,910 --> 00:29:42,179

YouTube URL: https://www.youtube.com/watch?v=UypDxLDNjK4


