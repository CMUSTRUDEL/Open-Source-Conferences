Title: Recent Enhancements to Routing in Cloud Foundry - Shannon Coen, Carlos Eberhardt & Atul Kshirsagar
Publication date: 2016-05-29
Playlist: Cloud Foundry Summit Santa Clara 2016
Description: 
	Recent Enhancements to Routing in Cloud Foundry - Shannon Coen, Pivotal, Carlos Eberhardt, Apigee, and Atul Kshirsagar, GE
Captions: 
	00:00:00,030 --> 00:00:03,990
there's these these slides will be

00:00:01,800 --> 00:00:05,730
shared but here's a anthony shaw shared

00:00:03,990 --> 00:00:07,529
some great little tips that really kind

00:00:05,730 --> 00:00:09,900
of boil down into into three things have

00:00:07,529 --> 00:00:11,759
nice documentation don't make security

00:00:09,900 --> 00:00:15,540
so obnoxious that it's it's difficult to

00:00:11,759 --> 00:00:17,070
do and just sensible use of HTTP it

00:00:15,540 --> 00:00:18,480
sounds kind of simple but you would be

00:00:17,070 --> 00:00:20,369
surprised at how many people get that

00:00:18,480 --> 00:00:22,160
wrong and at the Cloud Foundry guys did

00:00:20,369 --> 00:00:24,119
a great job of getting it right

00:00:22,160 --> 00:00:25,890
other things that are helpful obviously

00:00:24,119 --> 00:00:27,750
having a nice testing and a mock

00:00:25,890 --> 00:00:29,910
framework for some of this stuff and and

00:00:27,750 --> 00:00:31,380
again the anti cloud have a local dev

00:00:29,910 --> 00:00:33,329
environment so you can cycle some of

00:00:31,380 --> 00:00:35,640
that stuff really fast it makes it makes

00:00:33,329 --> 00:00:37,050
a great deal we'll be doing

00:00:35,640 --> 00:00:39,750
Appaji we'll be doing a deeper talk

00:00:37,050 --> 00:00:41,820
tomorrow at 10:55 I'll be doing the same

00:00:39,750 --> 00:00:43,500
demo without a misstep and maybe a

00:00:41,820 --> 00:00:45,960
little extra fun in there

00:00:43,500 --> 00:00:49,590
just a teaser for that and of course if

00:00:45,960 --> 00:00:51,390
you want more info on the services stuff

00:00:49,590 --> 00:00:53,610
again what a great URL right Doc's

00:00:51,390 --> 00:00:54,030
obviously and then slash services it's

00:00:53,610 --> 00:00:57,190
terrific

00:00:54,030 --> 00:01:04,670
so that's all I had thank you

00:00:57,190 --> 00:01:04,670
[Applause]

00:01:16,080 --> 00:01:21,510
okay Thank You Carlos we're gonna switch

00:01:18,840 --> 00:01:27,270
gears a bit and we're talk about TCP

00:01:21,510 --> 00:01:29,940
routing until recently I mentioned

00:01:27,270 --> 00:01:33,060
earlier Cloud Foundry supported HTTP

00:01:29,940 --> 00:01:36,840
workloads only but there is so much

00:01:33,060 --> 00:01:40,440
software in the world that depends on

00:01:36,840 --> 00:01:43,050
non HTTP TCP protocols and Cloud Foundry

00:01:40,440 --> 00:01:45,870
is a great place to develop and operate

00:01:43,050 --> 00:01:47,310
them all as I mentioned earlier all of

00:01:45,870 --> 00:01:49,710
the benefits Cloud Foundry provides

00:01:47,310 --> 00:01:53,030
ultimately reduces in hired developer

00:01:49,710 --> 00:01:56,460
velocity and minimizing time to market

00:01:53,030 --> 00:01:58,470
with the introduction of TCP routing we

00:01:56,460 --> 00:01:59,760
significantly expand the range of

00:01:58,470 --> 00:02:01,860
workloads that can be run on Cloud

00:01:59,760 --> 00:02:03,330
Foundry if you're involved in the

00:02:01,860 --> 00:02:05,640
Internet of Things supporting the

00:02:03,330 --> 00:02:08,790
Internet of Things your workloads depend

00:02:05,640 --> 00:02:10,770
on non HP TCP protocols with the

00:02:08,790 --> 00:02:12,390
introduction of TCP routing we can now

00:02:10,770 --> 00:02:14,730
bring legacy workloads to Cloud Foundry

00:02:12,390 --> 00:02:17,340
that depend on those protocols we can

00:02:14,730 --> 00:02:19,260
even run non persistent TCP services

00:02:17,340 --> 00:02:21,690
also with the introduction of TCP

00:02:19,260 --> 00:02:24,480
routing you can terminate TLS at the

00:02:21,690 --> 00:02:27,630
application here's a look at the user

00:02:24,480 --> 00:02:29,370
experience about of TCP routing again

00:02:27,630 --> 00:02:31,770
thanks for the CLI team for helping us

00:02:29,370 --> 00:02:33,959
deliver this the first step in the

00:02:31,770 --> 00:02:36,959
developer experience is to discover a

00:02:33,959 --> 00:02:38,700
domain that supports TCP routing here

00:02:36,959 --> 00:02:42,630
you see them the response for CF domains

00:02:38,700 --> 00:02:44,489
we have a domain that supports HTTP

00:02:42,630 --> 00:02:46,890
routing and one that supports TCP

00:02:44,489 --> 00:02:48,090
routing and it's after that is as simple

00:02:46,890 --> 00:02:51,000
as pushing your application and

00:02:48,090 --> 00:02:53,340
specifying that domain with the use of

00:02:51,000 --> 00:02:56,070
this random route option the platform

00:02:53,340 --> 00:02:59,220
has generated and reserved a port for us

00:02:56,070 --> 00:03:03,209
and created a route based on that port

00:02:59,220 --> 00:03:06,360
and domain how does it work the

00:03:03,209 --> 00:03:08,790
management plane we've introduced a few

00:03:06,360 --> 00:03:10,830
new components as part of a new bosh

00:03:08,790 --> 00:03:12,750
release called the routing release this

00:03:10,830 --> 00:03:15,690
is deployed alongside Cloud Foundry in

00:03:12,750 --> 00:03:20,030
the Diego back-end the emitter component

00:03:15,690 --> 00:03:22,560
is listening for events for on Diego

00:03:20,030 --> 00:03:25,140
looking for new routing configuration

00:03:22,560 --> 00:03:27,030
associated with applications and sending

00:03:25,140 --> 00:03:28,950
that data to the routing API which is a

00:03:27,030 --> 00:03:29,460
new central source of truth for routing

00:03:28,950 --> 00:03:33,210
configure

00:03:29,460 --> 00:03:35,910
raishin for all routers the new TCP

00:03:33,210 --> 00:03:40,440
router is listening to the routing API

00:03:35,910 --> 00:03:42,660
for its configuration the application

00:03:40,440 --> 00:03:45,420
data path is much the same as it is for

00:03:42,660 --> 00:03:47,760
HTTP routing with one exception and that

00:03:45,420 --> 00:03:49,920
is that the tcp router is making its

00:03:47,760 --> 00:03:53,640
routing decisions based on ports not on

00:03:49,920 --> 00:03:55,650
host names the domain that a client is

00:03:53,640 --> 00:03:58,200
sending the request to is used only for

00:03:55,650 --> 00:04:01,080
resolving DNS to the IP of the load

00:03:58,200 --> 00:04:03,990
balancer after that it's just I PS and

00:04:01,080 --> 00:04:07,970
ports the TCP router maintains a dynamic

00:04:03,990 --> 00:04:11,130
mapping of the route port to back-end

00:04:07,970 --> 00:04:14,160
host IP and ports for application

00:04:11,130 --> 00:04:15,600
instances with that I'd like to welcome

00:04:14,160 --> 00:04:19,050
a tool Krish cigar

00:04:15,600 --> 00:04:22,200
to the stage from GE he's going to share

00:04:19,050 --> 00:04:24,300
with us some of the reasons GE has been

00:04:22,200 --> 00:04:34,980
interested in TCP routing and give us a

00:04:24,300 --> 00:04:39,030
demo please welcome hello my name is

00:04:34,980 --> 00:04:41,640
Abdul Kadir I'm with GE so as Shannon

00:04:39,030 --> 00:04:45,420
this explained G has a lot of interest

00:04:41,640 --> 00:04:47,790
in TCP routing in fact I was here at CF

00:04:45,420 --> 00:04:50,130
summit last year talking about why and

00:04:47,790 --> 00:04:52,620
how we will do TCP routing in Cloud

00:04:50,130 --> 00:04:55,500
Foundry and it's just great to be back

00:04:52,620 --> 00:04:57,630
to actually do a live demo of a fully

00:04:55,500 --> 00:04:58,610
integrated TCP routing feature in cloud

00:04:57,630 --> 00:05:01,720
foundry

00:04:58,610 --> 00:05:01,720
[Applause]

00:05:01,940 --> 00:05:06,470
thank you it was just awesome to be part

00:05:04,580 --> 00:05:08,390
of the cloud for Murray rocking team for

00:05:06,470 --> 00:05:10,610
the past one year to actually develop

00:05:08,390 --> 00:05:12,980
both route services feature as well as

00:05:10,610 --> 00:05:14,720
TCP rodding feature and I'm incredibly

00:05:12,980 --> 00:05:16,900
happy that this is all come together

00:05:14,720 --> 00:05:20,270
very nicely

00:05:16,900 --> 00:05:22,610
last year I presented this picture when

00:05:20,270 --> 00:05:25,360
I was talking about the motivations GE

00:05:22,610 --> 00:05:28,730
has in order to get disapear routing in

00:05:25,360 --> 00:05:30,140
Cloud Foundry no I'm not going to get

00:05:28,730 --> 00:05:32,420
into the details of this picture this

00:05:30,140 --> 00:05:35,870
time all I want to highlight here is

00:05:32,420 --> 00:05:38,480
that like in any other IOT use case GE

00:05:35,870 --> 00:05:43,370
also has interests in multiple non HTTP

00:05:38,480 --> 00:05:46,790
protocols and now you can see a bunch of

00:05:43,370 --> 00:05:48,290
na HTTP protocols listed here so some of

00:05:46,790 --> 00:05:51,650
them have fallen out of favor over

00:05:48,290 --> 00:05:54,110
period of year even in GE but some of

00:05:51,650 --> 00:05:56,660
them are still valid and let me quickly

00:05:54,110 --> 00:05:58,610
mention a couple of use cases where G

00:05:56,660 --> 00:06:01,820
would be using TCP routing feature that

00:05:58,610 --> 00:06:05,780
we have built now as you all know G

00:06:01,820 --> 00:06:09,170
already has own platform called products

00:06:05,780 --> 00:06:11,810
it's built on Cloud Foundry and our one

00:06:09,170 --> 00:06:14,060
of our main use cases is to actually

00:06:11,810 --> 00:06:16,490
ingest data from devices at a very high

00:06:14,060 --> 00:06:19,700
scale at a very high volume using

00:06:16,490 --> 00:06:21,710
multiple iot protocols now we are going

00:06:19,700 --> 00:06:23,570
to use Kafka to industry all the

00:06:21,710 --> 00:06:26,300
ingestion cough that doesn't have

00:06:23,570 --> 00:06:28,130
support for all iot protocols and what

00:06:26,300 --> 00:06:30,890
we will do like any other team does this

00:06:28,130 --> 00:06:34,040
is going to build a protocol adapter on

00:06:30,890 --> 00:06:35,900
top of Kafka now the first time of that

00:06:34,040 --> 00:06:38,180
that we are going to build is the MQTT

00:06:35,900 --> 00:06:40,550
adapter and we want to develop this

00:06:38,180 --> 00:06:44,150
impurity adapter as a CF app deploy it

00:06:40,550 --> 00:06:46,430
as a CF app why because CF is great it

00:06:44,150 --> 00:06:47,090
manages my app very well I don't have to

00:06:46,430 --> 00:06:50,720
worry about it

00:06:47,090 --> 00:06:53,660
no but haiku I don't care how that's why

00:06:50,720 --> 00:06:56,390
so that's one use case and and they're a

00:06:53,660 --> 00:06:58,970
bunch of GU businesses who need to you

00:06:56,390 --> 00:07:00,890
know deploy your applications on

00:06:58,970 --> 00:07:04,550
products which needs support for

00:07:00,890 --> 00:07:06,740
proprietary protocols now TCP routing

00:07:04,550 --> 00:07:09,110
comes in very handy for that and we will

00:07:06,740 --> 00:07:12,140
be able to utilize TCP routing to

00:07:09,110 --> 00:07:13,790
support these non-standard workloads on

00:07:12,140 --> 00:07:16,660
products

00:07:13,790 --> 00:07:19,880
so without further ado let me get into

00:07:16,660 --> 00:07:21,350
the demo this picture this gives a

00:07:19,880 --> 00:07:24,560
highlight of what I am going to demo

00:07:21,350 --> 00:07:27,400
here and I'm going to I'm going to try

00:07:24,560 --> 00:07:29,630
to do a live demo and hope that it works

00:07:27,400 --> 00:07:32,390
what I'm going to do here is I'm going

00:07:29,630 --> 00:07:35,390
to push an MQ daddy broker mosquito as a

00:07:32,390 --> 00:07:38,150
CF app I'm going to create a TCP route

00:07:35,390 --> 00:07:40,970
I'm going to bind the TCP route to our

00:07:38,150 --> 00:07:44,240
impurity broker and now using this TCP

00:07:40,970 --> 00:07:46,760
route we can use our impurity publishers

00:07:44,240 --> 00:07:49,310
and subscribers to publish the data and

00:07:46,760 --> 00:07:51,620
subscribe to data now I am going to have

00:07:49,310 --> 00:07:54,080
a web app that's going to be an impurity

00:07:51,620 --> 00:07:56,570
subscriber and it's going to get the

00:07:54,080 --> 00:07:59,060
data from the impurity broker and I am

00:07:56,570 --> 00:08:01,970
going to have an Android app on my phone

00:07:59,060 --> 00:08:03,980
that is going to publish the data to

00:08:01,970 --> 00:08:05,840
this impurity broker and you would

00:08:03,980 --> 00:08:07,970
actually see the changes that I am going

00:08:05,840 --> 00:08:10,310
to publish from here actually I am going

00:08:07,970 --> 00:08:13,010
to publish the y-axis acceleration

00:08:10,310 --> 00:08:14,780
changes of the device to the broker

00:08:13,010 --> 00:08:17,410
which would then stream it to the app

00:08:14,780 --> 00:08:21,190
and which you would see on a nice graph

00:08:17,410 --> 00:08:21,190
so let's get right to it

00:08:26,090 --> 00:08:31,870
so I have already targeted my CF to our

00:08:29,780 --> 00:08:36,469
CF diplomacy have CLI to oversee F

00:08:31,870 --> 00:08:38,659
deployment and I have created an organ

00:08:36,469 --> 00:08:43,580
space where we are going to do this demo

00:08:38,659 --> 00:08:45,110
I have already already deployed and web

00:08:43,580 --> 00:08:47,870
app which is going to act as the

00:08:45,110 --> 00:08:50,300
impurity subscriber and and that's

00:08:47,870 --> 00:08:55,370
running here so we are now going to push

00:08:50,300 --> 00:08:57,110
mq deity broker mosquito as a CF app but

00:08:55,370 --> 00:09:00,820
before I do that I'm just going to show

00:08:57,110 --> 00:09:05,270
you the domains that we have created and

00:09:00,820 --> 00:09:07,880
you would see here that we have a tcp

00:09:05,270 --> 00:09:10,310
domain that's been created now the way

00:09:07,880 --> 00:09:11,890
you create tcp domain is very similar to

00:09:10,310 --> 00:09:13,940
the way you create your regular domains

00:09:11,890 --> 00:09:16,880
the only thing that you have to specify

00:09:13,940 --> 00:09:19,430
is the tcp router group and you can see

00:09:16,880 --> 00:09:22,250
the router groups that you have in your

00:09:19,430 --> 00:09:24,140
deployment by using this command CF

00:09:22,250 --> 00:09:26,420
router groups it lists and Auto groups

00:09:24,140 --> 00:09:28,100
that you have with routing release

00:09:26,420 --> 00:09:30,140
deployment you are going to get the

00:09:28,100 --> 00:09:31,970
default TCP router group and that's the

00:09:30,140 --> 00:09:34,670
only one that we have and that can grow

00:09:31,970 --> 00:09:38,930
in future now we are ready to actually

00:09:34,670 --> 00:09:40,730
push our impurity broker so I'm going to

00:09:38,930 --> 00:09:43,370
push the impurity broker using docker

00:09:40,730 --> 00:09:46,010
image I'm going to create a route and

00:09:43,370 --> 00:09:50,690
I'm going to bind that route all that in

00:09:46,010 --> 00:09:53,560
one command in any cases so only one

00:09:50,690 --> 00:09:53,560
command can do it all

00:09:53,650 --> 00:09:58,910
so here it is I'm going to push an

00:09:56,960 --> 00:10:02,600
impurity broker I'm using the docker

00:09:58,910 --> 00:10:06,520
image for mosquito I am specifying the

00:10:02,600 --> 00:10:08,810
TCP domain and as Shannon mentioned I'm

00:10:06,520 --> 00:10:12,770
asking the system to create me a random

00:10:08,810 --> 00:10:14,450
route so what this is going to do is

00:10:12,770 --> 00:10:16,610
that it's going to obviously pull the

00:10:14,450 --> 00:10:19,250
docker image from the docker hub and

00:10:16,610 --> 00:10:22,160
deploy it but also it's going to go

00:10:19,250 --> 00:10:24,770
ahead and reserve a free port from the

00:10:22,160 --> 00:10:29,029
router group create a TCP route and bind

00:10:24,770 --> 00:10:32,870
the TCP route to our app so those steps

00:10:29,029 --> 00:10:35,540
are nicely logged here you see that we

00:10:32,870 --> 00:10:39,379
have created a random route in this case

00:10:35,540 --> 00:10:42,039
it happens to be port 60,000 55

00:10:39,379 --> 00:10:46,489
and it's bound to that impurity broker

00:10:42,039 --> 00:10:49,989
and we have our MQTT broker running as a

00:10:46,489 --> 00:10:54,169
CF app it's going to serve impurity

00:10:49,989 --> 00:10:58,149
traffic so now we will shift and try to

00:10:54,169 --> 00:11:07,479
see how our mosquito brokers and

00:10:58,149 --> 00:11:10,129
publishes it what I'm going to run a CLI

00:11:07,479 --> 00:11:13,309
subscriber as well so that you actually

00:11:10,129 --> 00:11:15,949
know so I'm going to use mosquitos up so

00:11:13,309 --> 00:11:18,649
the host here is the tcp domain and will

00:11:15,949 --> 00:11:28,459
specify the port that was allocated to

00:11:18,649 --> 00:11:31,009
us it was 60,000 55 so i'm going to put

00:11:28,459 --> 00:11:34,429
this side-by-side this is our impurity

00:11:31,009 --> 00:11:37,509
subscriber app that's expecting the same

00:11:34,429 --> 00:11:37,509
hostname and port

00:11:47,070 --> 00:11:54,260
right now it's not either our CLI or our

00:11:50,720 --> 00:11:59,750
charts are not showing anything until I

00:11:54,260 --> 00:11:59,750
put this in my Android app

00:12:06,570 --> 00:12:17,790
and as I move crap you guys wanna see do

00:12:15,030 --> 00:12:20,700
you have a device talking to an app in

00:12:17,790 --> 00:12:22,880
Cloud Foundry or non HTTP protocol

00:12:20,700 --> 00:12:25,040
this is disappear outing for you guys

00:12:22,880 --> 00:12:34,139
thank you Baptists

00:12:25,040 --> 00:12:35,709
[Applause]

00:12:34,139 --> 00:12:37,389
that was cool

00:12:35,709 --> 00:12:44,440
especially for those of us who have

00:12:37,389 --> 00:12:46,839
spent so much time working on it for

00:12:44,440 --> 00:12:49,209
more information about TCP routing and

00:12:46,839 --> 00:12:51,639
the routing release bosh release here's

00:12:49,209 --> 00:12:53,980
a URL I'll post it again at the end I

00:12:51,639 --> 00:12:57,070
have a couple more slides to share with

00:12:53,980 --> 00:12:58,750
you I wanted to share with you a little

00:12:57,070 --> 00:12:59,860
bit about what the routing team is

00:12:58,750 --> 00:13:02,110
currently working on and what we're

00:12:59,860 --> 00:13:04,899
thinking about working on next we're

00:13:02,110 --> 00:13:06,699
about to dive into an exploration into

00:13:04,899 --> 00:13:08,589
performance of the routing tier and

00:13:06,699 --> 00:13:11,139
looking for opportunities to improve

00:13:08,589 --> 00:13:13,449
performance we have a little bit of

00:13:11,139 --> 00:13:15,850
technical debt we've been punting on for

00:13:13,449 --> 00:13:17,620
quite a few years the Cloud Foundry

00:13:15,850 --> 00:13:20,680
community would really love to get rid

00:13:17,620 --> 00:13:22,810
of Nats which is a message bus at the

00:13:20,680 --> 00:13:24,519
center of Cloud Foundry and Willy we

00:13:22,810 --> 00:13:27,699
believe that the the only remaining use

00:13:24,519 --> 00:13:29,380
case for Nats is routes of restoration

00:13:27,699 --> 00:13:31,420
and we believe that the routing API

00:13:29,380 --> 00:13:33,430
we've introduced with the routing

00:13:31,420 --> 00:13:34,990
release has the opportunity to replace

00:13:33,430 --> 00:13:35,529
NAT so we'll be looking at doing that

00:13:34,990 --> 00:13:38,680
this year

00:13:35,529 --> 00:13:41,610
we also believe that the routing API as

00:13:38,680 --> 00:13:44,730
a central source of truth for routing

00:13:41,610 --> 00:13:47,670
can enable a bring your own router

00:13:44,730 --> 00:13:50,800
operator experience we've received

00:13:47,670 --> 00:13:53,199
plenty of feedback that TCP routing is

00:13:50,800 --> 00:13:56,790
great but what about all of those UDP

00:13:53,199 --> 00:13:59,260
protocols we believe that a great way to

00:13:56,790 --> 00:14:02,110
provide a new extension point in Cloud

00:13:59,260 --> 00:14:04,120
Foundry and scale the kinds of workloads

00:14:02,110 --> 00:14:05,800
that can be run on Cloud Foundry can be

00:14:04,120 --> 00:14:08,649
done with a bring your own router

00:14:05,800 --> 00:14:11,709
workflow we're also looking at weighted

00:14:08,649 --> 00:14:14,680
routing which would provide a developer

00:14:11,709 --> 00:14:17,410
experience such as send 90% 90% of my

00:14:14,680 --> 00:14:19,810
traffic to version 1 of my application

00:14:17,410 --> 00:14:21,519
but 10% to version 2 and then allow the

00:14:19,810 --> 00:14:24,850
developer to turn those knobs and cut

00:14:21,519 --> 00:14:28,329
their traffic over so that's all we have

00:14:24,850 --> 00:14:29,620
for you today if you'd like to get in

00:14:28,329 --> 00:14:31,180
touch with us and we'd really love to

00:14:29,620 --> 00:14:33,880
hear from you about the creative use

00:14:31,180 --> 00:14:35,529
cases you have for routing please see us

00:14:33,880 --> 00:14:37,630
after or get in touch with us through

00:14:35,529 --> 00:14:41,079
our slack channel we have an office

00:14:37,630 --> 00:14:43,180
hours today in Lounge number 2 at 4:15

00:14:41,079 --> 00:14:43,570
and here again are those links for more

00:14:43,180 --> 00:14:45,550
information

00:14:43,570 --> 00:14:47,010
about route services and TCP routing

00:14:45,550 --> 00:14:52,419
thanks very much

00:14:47,010 --> 00:14:52,419

YouTube URL: https://www.youtube.com/watch?v=GO_jtcV-LjQ


