Title: BOSH: The Simple Solution for Complex Systems - Kira Combs, Pivotal
Publication date: 2016-05-29
Playlist: Cloud Foundry Summit Santa Clara 2016
Description: 
	Deploying complex systems is hard. What's even harder is figuring out how to make changes to those systems, parsing which elements of that system are failing, and how to debug and fix the issues in a system in an elegant manner. Thankfully, there is a solution! BOSH allows users to version, package, and deploy both simple and complex software in a reproducible manner. This talk will give a history and overview of the BOSH solution, a brief tutorial on how to get started, how to debug, and finally will give practical guidance and tips on how BOSH can help make complicated product development and deployments a thing of the past. 

Kira Combs
Kira is a Software Engineer at Pivotal Cloud Foundry. She works with BOSH and Cloud Foundry on a daily basis, and is excited to be here at Summit. She has presented once before at CF Summit Berlin on the Loggregator system of Cloud Foundry.
Captions: 
	00:00:00,020 --> 00:00:08,250
sweet alright hello my name is Kiera I

00:00:04,710 --> 00:00:10,380
work for pivotal on cloud foundry and I

00:00:08,250 --> 00:00:12,450
wanted to tell you about Bosch which is

00:00:10,380 --> 00:00:15,059
a simple solution for complex systems

00:00:12,450 --> 00:00:18,770
what this talk is gonna employ is it's

00:00:15,059 --> 00:00:21,449
gonna give us a view of how complicated

00:00:18,770 --> 00:00:22,800
doing deployments is like you have your

00:00:21,449 --> 00:00:24,090
component you have your product and it's

00:00:22,800 --> 00:00:26,070
really complicated to have to deploy

00:00:24,090 --> 00:00:30,570
that and then how Bosch can help you

00:00:26,070 --> 00:00:37,469
simplify that and make it a solution for

00:00:30,570 --> 00:00:38,550
that particular problem alright so the

00:00:37,469 --> 00:00:42,780
first thing I want to talk about was the

00:00:38,550 --> 00:00:47,309
old world so you're like great

00:00:42,780 --> 00:00:49,680
I have my product and I wanted to ploy

00:00:47,309 --> 00:00:51,660
it to one of these different platforms I

00:00:49,680 --> 00:00:53,190
wanted to ploy to AWS is your OpenStack

00:00:51,660 --> 00:00:57,870
whatever you're like maybe I want to

00:00:53,190 --> 00:00:59,160
even deploy it to docker but you're like

00:00:57,870 --> 00:01:01,920
how do I do that

00:00:59,160 --> 00:01:03,239
so you have your first component so you

00:01:01,920 --> 00:01:05,189
wrote a little bit of code you're like

00:01:03,239 --> 00:01:07,320
great I'm gonna put that on an AWS

00:01:05,189 --> 00:01:11,070
instance that's running and then you're

00:01:07,320 --> 00:01:12,299
like oh but I have another component so

00:01:11,070 --> 00:01:13,860
say you write a little bit more code

00:01:12,299 --> 00:01:16,799
you're like great now that's running on

00:01:13,860 --> 00:01:20,520
an AWS instance and then you realize

00:01:16,799 --> 00:01:21,780
you're in a multi you have a lot more

00:01:20,520 --> 00:01:23,820
components than they need to talk to

00:01:21,780 --> 00:01:25,200
each other so pretty soon you're writing

00:01:23,820 --> 00:01:27,720
code deploying things to all these

00:01:25,200 --> 00:01:29,880
different AWS instances and then you

00:01:27,720 --> 00:01:32,610
have to make a change and you're like oh

00:01:29,880 --> 00:01:36,540
crap was that component one was that

00:01:32,610 --> 00:01:38,430
component 27 was that component X is

00:01:36,540 --> 00:01:41,549
that even on AWS and it gets really

00:01:38,430 --> 00:01:42,930
complicated really fast and then when

00:01:41,549 --> 00:01:44,610
you have to manage that say if he were

00:01:42,930 --> 00:01:48,240
using AWS you have to go in you have to

00:01:44,610 --> 00:01:49,920
look at this lovely page here in ec2

00:01:48,240 --> 00:01:53,700
instances you have to use the s3 you

00:01:49,920 --> 00:01:55,439
have to use the AWS CLI and it's really

00:01:53,700 --> 00:01:57,090
it's just a big pain in the butt I've

00:01:55,439 --> 00:01:59,579
had to use it myself and I hate it and

00:01:57,090 --> 00:02:01,560
I'd much rather use something else

00:01:59,579 --> 00:02:06,540
that's something else I'm sure you are

00:02:01,560 --> 00:02:08,849
you could already guess is Bosh so the

00:02:06,540 --> 00:02:10,979
big question of the day is what is Bosh

00:02:08,849 --> 00:02:13,200
so Bosh simply stands for Bosh outer

00:02:10,979 --> 00:02:13,950
shell it is a tool for release

00:02:13,200 --> 00:02:16,650
engineering

00:02:13,950 --> 00:02:19,050
it's really it's useful for doing

00:02:16,650 --> 00:02:20,520
employments it's lifecycle management

00:02:19,050 --> 00:02:22,530
what's read about Bosch is that it

00:02:20,520 --> 00:02:24,720
supports all these different I asses it

00:02:22,530 --> 00:02:27,900
supports like Google compute engine AWS

00:02:24,720 --> 00:02:32,400
OpenStack V cloud Apache cloud stagette

00:02:27,900 --> 00:02:34,110
Deportes all of these things now and it

00:02:32,400 --> 00:02:35,640
was used originally to deploy Cloud

00:02:34,110 --> 00:02:36,810
Foundry I mean you're all here you

00:02:35,640 --> 00:02:38,400
probably know if you've ever tried to

00:02:36,810 --> 00:02:39,830
deploy Cloud Foundry you would have had

00:02:38,400 --> 00:02:41,940
to like look at something called Bosh

00:02:39,830 --> 00:02:43,380
but what's really cool about Bosh is

00:02:41,940 --> 00:02:44,810
that it's not just for Cloud Foundry

00:02:43,380 --> 00:02:47,400
you can use it to deploy things like

00:02:44,810 --> 00:02:49,410
RabbitMQ and Hadoop or your this like

00:02:47,400 --> 00:02:51,060
okay I don't want any of those things I

00:02:49,410 --> 00:02:52,440
wanted to point my own thing and what's

00:02:51,060 --> 00:02:57,150
cool about Bosh is that you can use it

00:02:52,440 --> 00:03:01,709
for that too so what are some key

00:02:57,150 --> 00:03:05,130
principles of Bosh the first of these

00:03:01,709 --> 00:03:07,110
are that identifiability so this means

00:03:05,130 --> 00:03:08,850
you want to be able to identify all of

00:03:07,110 --> 00:03:10,799
your source your tools your environment

00:03:08,850 --> 00:03:12,000
and you want to be able to see all of

00:03:10,799 --> 00:03:14,910
these things that make up your

00:03:12,000 --> 00:03:16,260
particular release once you get that you

00:03:14,910 --> 00:03:18,359
want to be able to reproduce it

00:03:16,260 --> 00:03:20,250
so Bosh allows you to say oh I have all

00:03:18,359 --> 00:03:22,799
of these configurations and you're going

00:03:20,250 --> 00:03:24,900
to deploy it to like OpenStack or AWS or

00:03:22,799 --> 00:03:26,250
whatever and I want to be able to do

00:03:24,900 --> 00:03:27,630
that again and again and again and again

00:03:26,250 --> 00:03:28,799
and again I'm not gonna give it to just

00:03:27,630 --> 00:03:30,299
one customer I'm gonna give it to

00:03:28,799 --> 00:03:32,609
multiple customers and Bosch gives you

00:03:30,299 --> 00:03:34,410
the opportunity to do that but more than

00:03:32,609 --> 00:03:36,690
just being reproducible Bosh is also

00:03:34,410 --> 00:03:38,370
really good about consistency so you're

00:03:36,690 --> 00:03:40,109
going to reproduce it multiple times and

00:03:38,370 --> 00:03:41,519
you want to assume that when you

00:03:40,109 --> 00:03:43,500
reproduce this multiple times that

00:03:41,519 --> 00:03:45,390
customer a isn't gonna have some

00:03:43,500 --> 00:03:47,459
different weird configuration compared

00:03:45,390 --> 00:03:51,620
to customer B and you want to make sure

00:03:47,459 --> 00:03:54,060
that you're getting the same result

00:03:51,620 --> 00:03:55,650
what's great about that too is not only

00:03:54,060 --> 00:03:58,230
is it identify all reproducible

00:03:55,650 --> 00:04:00,569
consistent it's also fast compared to

00:03:58,230 --> 00:04:01,859
that situation I described earlier where

00:04:00,569 --> 00:04:02,790
you have all of your different instances

00:04:01,859 --> 00:04:03,120
and you're just like I don't know what

00:04:02,790 --> 00:04:06,000
to do

00:04:03,120 --> 00:04:07,440
Bosch has it all contained and it just

00:04:06,000 --> 00:04:08,370
says oh I'm done with the first step I'm

00:04:07,440 --> 00:04:09,540
going to do the second I'm going to do

00:04:08,370 --> 00:04:10,650
the third I'm gonna do the fourth and

00:04:09,540 --> 00:04:13,650
you don't have to think about it and

00:04:10,650 --> 00:04:15,690
Bosh is gonna do it and it's really

00:04:13,650 --> 00:04:21,060
useful on the software continuous

00:04:15,690 --> 00:04:22,500
integration so what makes up a Bosch

00:04:21,060 --> 00:04:24,300
release so you're saying I have my

00:04:22,500 --> 00:04:26,099
component I have my product what do I

00:04:24,300 --> 00:04:27,630
have to do in order to get there so a

00:04:26,099 --> 00:04:30,450
really easy overview of

00:04:27,630 --> 00:04:32,970
of how how do you envision Bosch is that

00:04:30,450 --> 00:04:36,060
you first have a stem cell so a stem

00:04:32,970 --> 00:04:37,800
cell is a versioned OS and like I as

00:04:36,060 --> 00:04:41,340
packaging so you have your a boon to you

00:04:37,800 --> 00:04:42,920
have like you're a boon to AWS hvm you

00:04:41,340 --> 00:04:45,540
have all of these different kinds of

00:04:42,920 --> 00:04:47,970
operating systems and it's packaged in

00:04:45,540 --> 00:04:50,550
like this little bare-bones it doesn't

00:04:47,970 --> 00:04:52,020
have anything else in it except what you

00:04:50,550 --> 00:04:53,850
would need in order to run it and

00:04:52,020 --> 00:04:56,070
install software or do whatever you

00:04:53,850 --> 00:04:58,230
would like so once you have that stem

00:04:56,070 --> 00:05:01,350
cell you build what's called a release

00:04:58,230 --> 00:05:03,000
so the release is put on top of that

00:05:01,350 --> 00:05:04,710
stem cell it's basically just a version

00:05:03,000 --> 00:05:06,780
collection of all your properties all

00:05:04,710 --> 00:05:08,790
your configs all your startup scripts

00:05:06,780 --> 00:05:10,470
all your source code your binaries

00:05:08,790 --> 00:05:12,690
anything required in order to make your

00:05:10,470 --> 00:05:14,460
thing go and then with that release

00:05:12,690 --> 00:05:16,320
Bosch needs to know hey I need

00:05:14,460 --> 00:05:18,510
instructions for how to do this so that

00:05:16,320 --> 00:05:21,540
set of instructions is in a file called

00:05:18,510 --> 00:05:23,190
a manifest and I'm gonna go into kind of

00:05:21,540 --> 00:05:24,990
what makes up a manifest later that's

00:05:23,190 --> 00:05:28,530
where you have the most controlling

00:05:24,990 --> 00:05:30,150
power in Bosch but once you have all of

00:05:28,530 --> 00:05:31,650
these things all of those things

00:05:30,150 --> 00:05:36,360
together make up what we call a

00:05:31,650 --> 00:05:39,270
deployment and like I said it has all of

00:05:36,360 --> 00:05:41,850
your configuration your stem cell pretty

00:05:39,270 --> 00:05:45,660
much this this makes up like your

00:05:41,850 --> 00:05:46,800
product being on Bosch so basically what

00:05:45,660 --> 00:05:49,380
you can do you can take this whole

00:05:46,800 --> 00:05:52,590
configuration and simplify it down to

00:05:49,380 --> 00:05:55,560
like this simple command that sounds

00:05:52,590 --> 00:05:56,850
really great in all but the process to

00:05:55,560 --> 00:05:58,290
all of you or those of you who aren't

00:05:56,850 --> 00:06:01,620
familiar with Bosch I'm sure is how do I

00:05:58,290 --> 00:06:03,120
get there so I wanted to start with

00:06:01,620 --> 00:06:05,550
saying first you got to download the

00:06:03,120 --> 00:06:06,990
Bosch director so you have to get your

00:06:05,550 --> 00:06:08,580
environment get something that you want

00:06:06,990 --> 00:06:10,440
to deploy Bosch with so whether that's

00:06:08,580 --> 00:06:13,380
like AWS is or even your local machine

00:06:10,440 --> 00:06:15,870
wash allows you to do that too and you

00:06:13,380 --> 00:06:18,420
have to install the Bosch CLI it's very

00:06:15,870 --> 00:06:19,860
simple to find on the Bosch Daioh if you

00:06:18,420 --> 00:06:21,960
haven't heard of Bosch do it's pretty

00:06:19,860 --> 00:06:23,520
much like the definitive source for

00:06:21,960 --> 00:06:26,280
Bosch and I highly recommend it they've

00:06:23,520 --> 00:06:29,490
got tutorials and such as well

00:06:26,280 --> 00:06:32,010
they have a Bosch gem so all you have to

00:06:29,490 --> 00:06:34,020
do is you gem install the Bosch CLI you

00:06:32,010 --> 00:06:35,520
can install it with no RI or no RDoc it

00:06:34,020 --> 00:06:39,030
just makes it a little faster if you do

00:06:35,520 --> 00:06:41,750
it this way and then you create a Bosch

00:06:39,030 --> 00:06:44,340
manifest to deploy Bosch

00:06:41,750 --> 00:06:47,340
so it's pretty cool you can take you

00:06:44,340 --> 00:06:49,140
this tar file as your stem cell and you

00:06:47,340 --> 00:06:52,590
basically say hey I'm going to deploy

00:06:49,140 --> 00:06:56,460
Bosch using whatever is defined in this

00:06:52,590 --> 00:06:58,980
Bosch stem cell there so it's kind of

00:06:56,460 --> 00:07:00,450
like you're using Bosch to deploy Bosch

00:06:58,980 --> 00:07:02,280
and it's kind of like a mini Bosch

00:07:00,450 --> 00:07:05,490
deception and then you can do all of

00:07:02,280 --> 00:07:08,160
your other what you'd prefer to do so I

00:07:05,490 --> 00:07:09,960
mentioned a stem cell and that it's you

00:07:08,160 --> 00:07:13,440
know just a versioned OS why is a stem

00:07:09,960 --> 00:07:15,450
cell so interesting so look at it from

00:07:13,440 --> 00:07:17,580
an example say if you're coding on a Mac

00:07:15,450 --> 00:07:19,410
I code on a Mac there was a scare with a

00:07:17,580 --> 00:07:23,640
heartbleed coming out so you're like

00:07:19,410 --> 00:07:25,680
great now if I have to upload all of my

00:07:23,640 --> 00:07:28,410
ID like AWS instances I realize Mac

00:07:25,680 --> 00:07:29,970
wouldn't be the heart the operating

00:07:28,410 --> 00:07:31,530
system you would choose for your AWS

00:07:29,970 --> 00:07:33,180
instances but say for example it was

00:07:31,530 --> 00:07:34,200
you're like great I have to go through

00:07:33,180 --> 00:07:35,490
and I have to upgrade all of these

00:07:34,200 --> 00:07:36,690
different things I have like you know

00:07:35,490 --> 00:07:37,980
between ten and a hundred different

00:07:36,690 --> 00:07:42,240
instances I have to do all those

00:07:37,980 --> 00:07:44,280
individually Bosh says you know what you

00:07:42,240 --> 00:07:45,900
have this OS update you have to do it on

00:07:44,280 --> 00:07:47,070
it your Amazon instances I don't want

00:07:45,900 --> 00:07:51,870
you to do that yourself that's really

00:07:47,070 --> 00:07:58,920
lame so you can basically you can go to

00:07:51,870 --> 00:08:00,600
Bosch do and pardon download a new stem

00:07:58,920 --> 00:08:02,510
cell and in your Bosch manifest like I

00:08:00,600 --> 00:08:04,740
said I'll mention this later you can

00:08:02,510 --> 00:08:06,360
have that new stem cell in your boss

00:08:04,740 --> 00:08:07,740
manifest and you can run that Bosch

00:08:06,360 --> 00:08:09,540
deploy that I mentioned earlier and

00:08:07,740 --> 00:08:11,640
it'll go through all of those instances

00:08:09,540 --> 00:08:13,260
update each of them individually and bam

00:08:11,640 --> 00:08:15,810
you no longer have a security hole and

00:08:13,260 --> 00:08:19,680
that's why stem cells are really useful

00:08:15,810 --> 00:08:22,230
really awesome pretty amazing now since

00:08:19,680 --> 00:08:23,190
I already jumped the gun the next part I

00:08:22,230 --> 00:08:27,960
wanted to talk about was the Bosch

00:08:23,190 --> 00:08:29,220
releases so I'm gonna start off by

00:08:27,960 --> 00:08:30,840
saying you wanted to create your own

00:08:29,220 --> 00:08:33,480
Bosch release first and then go into

00:08:30,840 --> 00:08:35,250
some of the more cooler aspects so you

00:08:33,480 --> 00:08:36,540
created a new product you're like I want

00:08:35,250 --> 00:08:38,010
to deploy this using Bosch and know I

00:08:36,540 --> 00:08:40,290
wanted to play it using Bosch so how do

00:08:38,010 --> 00:08:42,150
I get started with that there's a

00:08:40,290 --> 00:08:43,770
specific structure don't know what it is

00:08:42,150 --> 00:08:45,690
Bosch allows you this really cool

00:08:43,770 --> 00:08:48,440
command you can do Bosch and nit release

00:08:45,690 --> 00:08:51,090
with like the name of your release and

00:08:48,440 --> 00:08:53,370
it's going to generate for you all of

00:08:51,090 --> 00:08:54,830
these empty files like these folders are

00:08:53,370 --> 00:08:55,940
empty and like the

00:08:54,830 --> 00:08:57,410
there's nothing in any of these

00:08:55,940 --> 00:09:00,190
directories but it says hey this is the

00:08:57,410 --> 00:09:02,870
format this is what I'm looking for

00:09:00,190 --> 00:09:06,080
so a quick rundown

00:09:02,870 --> 00:09:07,790
so that blobs directory is something

00:09:06,080 --> 00:09:09,769
that your source code would need to

00:09:07,790 --> 00:09:12,560
compile so say you wrote a Java program

00:09:09,769 --> 00:09:14,060
and you need a Java server in it and it

00:09:12,560 --> 00:09:15,470
needs the JDK to compile it's going to

00:09:14,060 --> 00:09:17,149
work great on your local machine because

00:09:15,470 --> 00:09:18,560
you already like have the JDK installed

00:09:17,149 --> 00:09:19,550
but if you deploy it somewhere else you

00:09:18,560 --> 00:09:21,500
have to think about oh well how am I

00:09:19,550 --> 00:09:24,410
going to do that you use blobs to do

00:09:21,500 --> 00:09:26,060
that so you upload the JDK blob into

00:09:24,410 --> 00:09:28,040
that directory it's going to upload that

00:09:26,060 --> 00:09:29,269
to your Bosh director so anything that's

00:09:28,040 --> 00:09:31,610
going to be deployed on your Bosh

00:09:29,269 --> 00:09:35,329
director now has access to that jdk and

00:09:31,610 --> 00:09:37,850
can use it however they want so then a

00:09:35,329 --> 00:09:40,310
job that jobs directory is going to show

00:09:37,850 --> 00:09:41,930
you all of the units of work that your

00:09:40,310 --> 00:09:43,310
deployment needs in order to run so like

00:09:41,930 --> 00:09:44,630
I had component one component to

00:09:43,310 --> 00:09:47,390
component three you had all of your

00:09:44,630 --> 00:09:51,350
components those can be easily separated

00:09:47,390 --> 00:09:54,140
into oh I have job one job to job three

00:09:51,350 --> 00:09:55,519
and all of the specific configuration

00:09:54,140 --> 00:09:57,260
that you might have for all of those are

00:09:55,519 --> 00:09:59,899
going to exist in that jobs directory

00:09:57,260 --> 00:10:01,820
and you can define like the startup

00:09:59,899 --> 00:10:04,579
scripts for that job and everything's

00:10:01,820 --> 00:10:06,770
just in this one easy place for you to

00:10:04,579 --> 00:10:08,390
access however you please you can change

00:10:06,770 --> 00:10:10,520
it very simply you just go in there you

00:10:08,390 --> 00:10:12,350
say oh I want to change job one I'm

00:10:10,520 --> 00:10:15,170
gonna change that config bosh deploy and

00:10:12,350 --> 00:10:17,240
it's going to update that for you so

00:10:15,170 --> 00:10:18,680
your packages on the other hand are all

00:10:17,240 --> 00:10:22,760
of the compiled code that you would need

00:10:18,680 --> 00:10:25,820
to have in your Bosh deployment and then

00:10:22,760 --> 00:10:31,810
of course the source directory is just

00:10:25,820 --> 00:10:34,579
going to be your normal product code so

00:10:31,810 --> 00:10:35,959
say you don't want to create your own

00:10:34,579 --> 00:10:37,910
release you're like I'm using Cloud

00:10:35,959 --> 00:10:39,050
Foundry I'm using console I'm using all

00:10:37,910 --> 00:10:41,360
of these different things and I know

00:10:39,050 --> 00:10:43,490
that people have done it before so a

00:10:41,360 --> 00:10:45,740
place that you can look is the Bosh

00:10:43,490 --> 00:10:47,329
community so if you go to Bosh adios

00:10:45,740 --> 00:10:49,459
slash releases there's a lot of like

00:10:47,329 --> 00:10:51,230
precompiled releases that you can access

00:10:49,459 --> 00:10:52,910
and you can download and you can say hey

00:10:51,230 --> 00:10:54,949
okay fine I'm going to Bosh create this

00:10:52,910 --> 00:10:56,300
release Bosh upload this release and you

00:10:54,949 --> 00:10:58,160
don't have to deal with all of that like

00:10:56,300 --> 00:11:02,690
tree structure or do any of that

00:10:58,160 --> 00:11:04,010
creating yourself again once you

00:11:02,690 --> 00:11:06,860
download this release you have it you

00:11:04,010 --> 00:11:08,120
can fork it if you want edit it and as

00:11:06,860 --> 00:11:08,660
long as you upload that to your boss

00:11:08,120 --> 00:11:09,860
director

00:11:08,660 --> 00:11:13,190
Bosch knows what to do with it and it's

00:11:09,860 --> 00:11:14,600
like hey we're good to go now that we've

00:11:13,190 --> 00:11:16,930
talked about releases I wanted to give a

00:11:14,600 --> 00:11:18,800
quick overview of the Bosch manifest

00:11:16,930 --> 00:11:20,959
because if any of you've worked with

00:11:18,800 --> 00:11:22,970
Bosch you see this huge big file this is

00:11:20,959 --> 00:11:24,529
not even like you know a third of it or

00:11:22,970 --> 00:11:26,180
you see like oh there's all these words

00:11:24,529 --> 00:11:27,500
is in this weird UML format what do I do

00:11:26,180 --> 00:11:31,220
with it how do i parse it what does all

00:11:27,500 --> 00:11:32,660
this stuff mean so basic overview you

00:11:31,220 --> 00:11:34,189
have all of your different components

00:11:32,660 --> 00:11:36,980
are separated into different jobs in

00:11:34,189 --> 00:11:39,649
your Bosch manifest you have to define

00:11:36,980 --> 00:11:41,389
all of your configuration here you have

00:11:39,649 --> 00:11:42,920
to define like any properties that your

00:11:41,389 --> 00:11:44,689
component might have any of the

00:11:42,920 --> 00:11:46,430
resources it might be using if you're

00:11:44,689 --> 00:11:47,959
using AWS or some other thing you'll

00:11:46,430 --> 00:11:50,149
have to define the IP ranges you'll

00:11:47,959 --> 00:11:51,620
define the subnets and you'll just

00:11:50,149 --> 00:11:53,180
define like any anything that your

00:11:51,620 --> 00:11:55,220
product could need and that you would

00:11:53,180 --> 00:11:57,470
have to manage manually you can define

00:11:55,220 --> 00:11:59,689
in here and Bosch will know what to do

00:11:57,470 --> 00:12:01,399
with it so like if you say run out of IP

00:11:59,689 --> 00:12:03,829
ranges for your product you can go into

00:12:01,399 --> 00:12:06,319
Bosch make sure that you aren't using it

00:12:03,829 --> 00:12:09,199
for another product first and up load up

00:12:06,319 --> 00:12:12,139
sorry change these IP ranges inside a

00:12:09,199 --> 00:12:17,870
Bosch and then re-upload and it'll read

00:12:12,139 --> 00:12:19,910
in those changes so quick rundown of I'm

00:12:17,870 --> 00:12:21,829
gonna take a very simple Bosch manifest

00:12:19,910 --> 00:12:23,810
like it's gonna just be as you can see

00:12:21,829 --> 00:12:25,339
here like it's very generic it's not

00:12:23,810 --> 00:12:27,139
going to deploy anything that you're

00:12:25,339 --> 00:12:28,610
familiar with I tried to genera size it

00:12:27,139 --> 00:12:30,980
very much just to kind of explain what

00:12:28,610 --> 00:12:33,110
the different pieces were so I'm gonna

00:12:30,980 --> 00:12:36,050
start off very obviously you can choose

00:12:33,110 --> 00:12:38,089
the name of your deployment you have

00:12:36,050 --> 00:12:39,920
your boss directory UUID so I mentioned

00:12:38,089 --> 00:12:42,380
earlier that you're going to deploy

00:12:39,920 --> 00:12:44,630
Bosch and when you target your Bosch

00:12:42,380 --> 00:12:46,810
director you can run a simple command

00:12:44,630 --> 00:12:49,519
which is Bosch status tacky UUID and

00:12:46,810 --> 00:12:52,250
that's going to give you back some kind

00:12:49,519 --> 00:12:54,110
of numeric alphanumeric string like you

00:12:52,250 --> 00:12:55,790
see up there and you can simply take

00:12:54,110 --> 00:12:58,670
that value put it in the manifest and

00:12:55,790 --> 00:13:01,069
then Bosch knows oh I'm gonna deploy to

00:12:58,670 --> 00:13:02,420
this Bosch director so say if you had

00:13:01,069 --> 00:13:04,610
Bosch deployed somewhere else as well

00:13:02,420 --> 00:13:06,410
you could take that UUID and say I want

00:13:04,610 --> 00:13:08,779
to deploy my component to this Bosch and

00:13:06,410 --> 00:13:10,910
then you can change this ID and say now

00:13:08,779 --> 00:13:12,920
I wanted to play it to this Bosch and as

00:13:10,910 --> 00:13:14,809
long as everything lines up right with

00:13:12,920 --> 00:13:16,509
the rest of your config it's as easy as

00:13:14,809 --> 00:13:20,420
that

00:13:16,509 --> 00:13:21,540
so then you can also define your release

00:13:20,420 --> 00:13:23,250
version so

00:13:21,540 --> 00:13:25,800
I mentioned earlier like so this release

00:13:23,250 --> 00:13:29,940
version is the release that we created

00:13:25,800 --> 00:13:31,860
earlier so you can view any of the

00:13:29,940 --> 00:13:34,199
releases you have available using this

00:13:31,860 --> 00:13:36,199
Bosch releases command and what this is

00:13:34,199 --> 00:13:38,459
going to do is it's going to give you a

00:13:36,199 --> 00:13:39,990
view of all of the releases you have

00:13:38,459 --> 00:13:41,459
deployed and not only that but all of

00:13:39,990 --> 00:13:43,529
the versions you have deployed so as you

00:13:41,459 --> 00:13:44,940
can see up here I have CF deployed in my

00:13:43,529 --> 00:13:47,160
environment but I have like all of these

00:13:44,940 --> 00:13:49,139
different diversions and I'm like okay I

00:13:47,160 --> 00:13:51,209
was on this diversion and I faced a

00:13:49,139 --> 00:13:54,329
problem so I'm gonna try this older dev

00:13:51,209 --> 00:13:55,589
version or you had a customer on an

00:13:54,329 --> 00:13:57,300
older version and you wanted to simulate

00:13:55,589 --> 00:13:59,130
some behavior that you're seeing so you

00:13:57,300 --> 00:14:00,720
can change this dev version and then

00:13:59,130 --> 00:14:02,639
deploy it and then you'll be able to see

00:14:00,720 --> 00:14:06,230
actively what a customer might be using

00:14:02,639 --> 00:14:06,230
with that version of your deployment

00:14:06,350 --> 00:14:10,170
then the last piece is you have your

00:14:08,399 --> 00:14:11,519
resource pool so your resource pool is

00:14:10,170 --> 00:14:13,589
going to have a collection of all your

00:14:11,519 --> 00:14:14,850
VMs they're gonna all be using the same

00:14:13,589 --> 00:14:16,319
stem cell that you define in your

00:14:14,850 --> 00:14:19,079
environment they're gonna have the same

00:14:16,319 --> 00:14:21,209
config and say when you do your stem

00:14:19,079 --> 00:14:22,829
cell updates they're all gonna be able

00:14:21,209 --> 00:14:26,569
to be affected at the same time because

00:14:22,829 --> 00:14:26,569
they're all in the same resource pool

00:14:26,600 --> 00:14:32,069
apology's and then finally we have our

00:14:29,730 --> 00:14:33,180
stem cell version which finally I've

00:14:32,069 --> 00:14:35,220
been talking about it all this time this

00:14:33,180 --> 00:14:36,899
is where you define that so when you get

00:14:35,220 --> 00:14:38,490
a stem cell update you download it from

00:14:36,899 --> 00:14:39,990
Bosch IO with the new stem cells you

00:14:38,490 --> 00:14:42,089
know you have a point version now

00:14:39,990 --> 00:14:44,630
because it's got a new CDE update you go

00:14:42,089 --> 00:14:46,980
into this file you say ok now I'm like

00:14:44,630 --> 00:14:48,750
0.7 and then you have another update now

00:14:46,980 --> 00:14:50,850
I'm point eight and then you do a Bosch

00:14:48,750 --> 00:14:53,190
deploy and Bosch says ok I have this new

00:14:50,850 --> 00:14:54,870
stem cell now I'm going to use this

00:14:53,190 --> 00:14:56,430
updated version instead of this older

00:14:54,870 --> 00:15:01,980
version and you no longer have your

00:14:56,430 --> 00:15:03,269
security hole alright next piece of the

00:15:01,980 --> 00:15:05,220
Bosch manifest

00:15:03,269 --> 00:15:06,600
just like I said very very simple

00:15:05,220 --> 00:15:08,550
generic these are things required for

00:15:06,600 --> 00:15:10,980
like kind of bare-bones minimum for a

00:15:08,550 --> 00:15:14,010
Bosch manifest you have to define your

00:15:10,980 --> 00:15:14,970
networks so the thing about Bosch you

00:15:14,010 --> 00:15:16,889
have to make sure that these networks

00:15:14,970 --> 00:15:18,600
are available you can't just say oh yeah

00:15:16,889 --> 00:15:19,829
I want to use this network here and then

00:15:18,600 --> 00:15:21,029
I want to use this other project with

00:15:19,829 --> 00:15:23,880
the same network it's I mean it's gonna

00:15:21,029 --> 00:15:26,040
have to follow like real real rules if

00:15:23,880 --> 00:15:27,660
you were deploying manually there you

00:15:26,040 --> 00:15:30,029
can't have things sharing like the same

00:15:27,660 --> 00:15:31,170
IPS they get angry with each other but

00:15:30,029 --> 00:15:34,209
you just give all of that configuration

00:15:31,170 --> 00:15:36,970
here to make sure that they don't

00:15:34,209 --> 00:15:39,129
step on each other's toes and then you

00:15:36,970 --> 00:15:40,569
have the compilation BM so listen so the

00:15:39,129 --> 00:15:42,610
compilation BM is you have all of your

00:15:40,569 --> 00:15:45,009
source code and it's dependent on a

00:15:42,610 --> 00:15:46,389
particular machine architecture so you

00:15:45,009 --> 00:15:48,399
make you say you make a change to your

00:15:46,389 --> 00:15:50,559
source code Bosch is gonna have to

00:15:48,399 --> 00:15:52,449
compile that into an executable and then

00:15:50,559 --> 00:15:54,639
inside of the Bosch deployment that's

00:15:52,449 --> 00:15:55,420
running it's gonna have to be able to

00:15:54,639 --> 00:15:57,369
execute it

00:15:55,420 --> 00:15:59,199
so these compilation VMs take all that

00:15:57,369 --> 00:16:02,740
source code and do the compiling for you

00:15:59,199 --> 00:16:05,160
and once they finish doing all that

00:16:02,740 --> 00:16:07,600
compilation they're gonna go away and

00:16:05,160 --> 00:16:09,009
then you don't have to have that vm

00:16:07,600 --> 00:16:10,179
living for very long it's not gonna

00:16:09,009 --> 00:16:13,149
affect your cost or anything it just

00:16:10,179 --> 00:16:16,720
kind of offsets the Machine power to

00:16:13,149 --> 00:16:18,670
where it's needed last piece of this is

00:16:16,720 --> 00:16:20,470
we have what's called the Canaries so if

00:16:18,670 --> 00:16:22,179
any of you are familiar with the idea of

00:16:20,470 --> 00:16:24,879
Canaries being brought into the coal

00:16:22,179 --> 00:16:26,199
mines and the poor coal miners didn't

00:16:24,879 --> 00:16:27,610
want to die from the gas so they're like

00:16:26,199 --> 00:16:30,009
oh we're gonna have these Canaries die

00:16:27,610 --> 00:16:31,689
instead and then if the canary dies then

00:16:30,009 --> 00:16:34,929
we know to get out of there before we

00:16:31,689 --> 00:16:37,839
all die of inhalation and that's kind of

00:16:34,929 --> 00:16:40,119
the similar idea with Bosch so Bosch is

00:16:37,839 --> 00:16:42,279
going to tentatively deploy a component

00:16:40,119 --> 00:16:44,589
of your code and make sure that it

00:16:42,279 --> 00:16:47,290
doesn't just completely fall over and

00:16:44,589 --> 00:16:49,240
just die and if it completely falls over

00:16:47,290 --> 00:16:50,920
and dies these this canary is gonna

00:16:49,240 --> 00:16:52,720
alert and say hey you did something

00:16:50,920 --> 00:16:54,429
break you did a breaking change I'm not

00:16:52,720 --> 00:16:56,949
gonna actually deploy this to your

00:16:54,429 --> 00:16:58,509
product and I'm going to fail my your

00:16:56,949 --> 00:17:01,360
Bosch deploy and say you need to go back

00:16:58,509 --> 00:17:03,699
and fix this so if you deploy say bad

00:17:01,360 --> 00:17:05,500
code you're not going to be having

00:17:03,699 --> 00:17:07,329
downtime for your customers because you

00:17:05,500 --> 00:17:09,370
try to push up the bad change the canary

00:17:07,329 --> 00:17:12,010
could fail and say hey go back and fix

00:17:09,370 --> 00:17:15,039
it and you'll be like great now I'm not

00:17:12,010 --> 00:17:21,220
gonna have to worry about something else

00:17:15,039 --> 00:17:25,059
bad happening all right last piece of

00:17:21,220 --> 00:17:27,010
the deployment manifest is simple enough

00:17:25,059 --> 00:17:28,390
you have the your jobs are kind of

00:17:27,010 --> 00:17:30,730
synonymous with the components of your

00:17:28,390 --> 00:17:35,860
system you have any particular config

00:17:30,730 --> 00:17:38,200
for how to run it and say you have each

00:17:35,860 --> 00:17:40,179
of these components like component 1 and

00:17:38,200 --> 00:17:42,159
component 2 which share the same

00:17:40,179 --> 00:17:43,960
property you can define that as a global

00:17:42,159 --> 00:17:46,299
property so if you're defining your job

00:17:43,960 --> 00:17:47,430
you can say hey this is shared between

00:17:46,299 --> 00:17:49,170
the two of them

00:17:47,430 --> 00:17:51,420
going to define it twice I'm gonna use

00:17:49,170 --> 00:17:53,730
this shared property instead so then if

00:17:51,420 --> 00:17:55,140
you had to go back and edit it for

00:17:53,730 --> 00:17:56,610
example you wouldn't have to change it

00:17:55,140 --> 00:18:01,680
in multiple places you could just

00:17:56,610 --> 00:18:03,510
reference the one so with all of this

00:18:01,680 --> 00:18:04,980
said I've said Bosch is super simple and

00:18:03,510 --> 00:18:06,690
you know you can learn a lot of it and

00:18:04,980 --> 00:18:08,550
it's very powerful but I do have to give

00:18:06,690 --> 00:18:10,560
the caveat that there is a learning

00:18:08,550 --> 00:18:13,110
curve learning curve kind of looks like

00:18:10,560 --> 00:18:16,020
this when I first started using Bosch

00:18:13,110 --> 00:18:19,020
and I work on Cloud Foundry so I kind of

00:18:16,020 --> 00:18:20,970
used Bosch almost every single day hated

00:18:19,020 --> 00:18:23,820
Bosch you know a little more time passed

00:18:20,970 --> 00:18:26,510
still hated Bosch still hated Bosch and

00:18:23,820 --> 00:18:29,100
then I was like and you know it's Bosch

00:18:26,510 --> 00:18:31,740
and then I was like you know this Bosch

00:18:29,100 --> 00:18:33,630
things kind of cool and now that I've

00:18:31,740 --> 00:18:35,760
used it I'm like this Bosch thing is the

00:18:33,630 --> 00:18:38,220
best thing ever you can do so much with

00:18:35,760 --> 00:18:42,930
Bosch there's a lot of configuration you

00:18:38,220 --> 00:18:46,320
can just I can't even explain to you how

00:18:42,930 --> 00:18:47,850
amazing I think Bosch is and I'd highly

00:18:46,320 --> 00:18:49,410
recommend that you go through some of

00:18:47,850 --> 00:18:51,900
the d2 toriel's go through some of the

00:18:49,410 --> 00:18:55,440
pain initially required with learning

00:18:51,900 --> 00:18:56,370
Bosch just to see how powerful how

00:18:55,440 --> 00:18:58,200
amazing it really is

00:18:56,370 --> 00:19:01,560
another really cool thing about Bosch

00:18:58,200 --> 00:19:04,290
that Cloud Foundry loves Bosch like I

00:19:01,560 --> 00:19:05,760
mentioned earlier that if you've tried

00:19:04,290 --> 00:19:07,980
to don't use Cloud Foundry you've

00:19:05,760 --> 00:19:09,270
probably heard about Bosch and it's for

00:19:07,980 --> 00:19:14,250
a very good reason like cloud foundry

00:19:09,270 --> 00:19:16,770
was built to use Bosch so in order to

00:19:14,250 --> 00:19:18,030
deploy cloud foundry using Bosch if

00:19:16,770 --> 00:19:19,500
you're doing it on your own you can

00:19:18,030 --> 00:19:21,690
generate a deployment manifest you're

00:19:19,500 --> 00:19:24,420
going to upload a stem cell and then you

00:19:21,690 --> 00:19:27,680
can do Bosch upload stem cell crate

00:19:24,420 --> 00:19:30,090
release upload release and deploy or as

00:19:27,680 --> 00:19:32,670
mentioned earlier there was a nice

00:19:30,090 --> 00:19:34,290
releases site and you could go and say

00:19:32,670 --> 00:19:36,360
hey I'm just gonna download Cloud

00:19:34,290 --> 00:19:39,210
Foundry upload Cloud Foundry and then

00:19:36,360 --> 00:19:44,730
deploy it and it's very simple

00:19:39,210 --> 00:19:47,460
and it saves a lot of time all right and

00:19:44,730 --> 00:19:49,680
I had a little demo about kind of how to

00:19:47,460 --> 00:19:51,600
use it but in the interest of time I'm

00:19:49,680 --> 00:19:54,540
going to skip over it it's basically

00:19:51,600 --> 00:19:56,670
just a simple how easy it is to deploy

00:19:54,540 --> 00:20:00,270
Bosch you can find a very similar demo

00:19:56,670 --> 00:20:01,080
on Bosch do I'll give a link for the

00:20:00,270 --> 00:20:05,970
online two

00:20:01,080 --> 00:20:07,320
toriel at the end of the talk so another

00:20:05,970 --> 00:20:09,660
thing that's really cool about Bosch is

00:20:07,320 --> 00:20:11,130
that it's not just used for Cloud

00:20:09,660 --> 00:20:13,050
Foundry I mentioned earlier you can use

00:20:11,130 --> 00:20:14,520
it for like Hadoop and rabbitmq you can

00:20:13,050 --> 00:20:18,000
also use it for things like my sequel

00:20:14,520 --> 00:20:19,770
you can use it for Redis you can use it

00:20:18,000 --> 00:20:21,840
for react you can use it again for

00:20:19,770 --> 00:20:23,550
rabbit you can use it in docker you can

00:20:21,840 --> 00:20:26,190
use it in Jenkins you can even use it to

00:20:23,550 --> 00:20:27,420
deploy Concours and I also said you can

00:20:26,190 --> 00:20:31,170
also use it to deploy your own software

00:20:27,420 --> 00:20:32,670
even so where do I find all of these

00:20:31,170 --> 00:20:34,050
things you're like oh you're telling me

00:20:32,670 --> 00:20:35,370
that there's all of these releases for

00:20:34,050 --> 00:20:37,110
all of these really cool Bosch things

00:20:35,370 --> 00:20:38,910
where do I find them I don't want to

00:20:37,110 --> 00:20:40,470
have to figure out how I need to Bosch

00:20:38,910 --> 00:20:43,710
if I all of these products that we're

00:20:40,470 --> 00:20:45,180
already using so it's really cool the

00:20:43,710 --> 00:20:48,620
Cloud Foundry community is awesome for

00:20:45,180 --> 00:20:51,210
this you can go to Cloud Foundry

00:20:48,620 --> 00:20:53,550
community it's on git and you can see

00:20:51,210 --> 00:20:54,570
just pages upon pages upon pages of all

00:20:53,550 --> 00:20:56,400
of the different people that have

00:20:54,570 --> 00:20:59,610
already created these releases for you

00:20:56,400 --> 00:21:02,970
and for example I had to use Kafka for

00:20:59,610 --> 00:21:04,560
one of our products and Kafka is not on

00:21:02,970 --> 00:21:06,300
the Cloud Foundry community so I'm like

00:21:04,560 --> 00:21:07,950
great I'm gonna have to figure out how

00:21:06,300 --> 00:21:08,940
to make a Bosch release for Kafka it's

00:21:07,950 --> 00:21:12,720
gonna have to spend the time to do that

00:21:08,940 --> 00:21:16,350
but before I did that I wouldn't did

00:21:12,720 --> 00:21:18,030
this and so if it's not in the Cloud

00:21:16,350 --> 00:21:19,710
Foundry community there's a really good

00:21:18,030 --> 00:21:21,330
chance that if it's something useful and

00:21:19,710 --> 00:21:22,890
people like it there's other people who

00:21:21,330 --> 00:21:24,720
have made these releases for you and you

00:21:22,890 --> 00:21:27,840
can go in and it saves you a lot of time

00:21:24,720 --> 00:21:29,220
a lot of work a lot of effort and you

00:21:27,840 --> 00:21:30,480
can then just start using it you don't

00:21:29,220 --> 00:21:36,030
have to think about it you don't have to

00:21:30,480 --> 00:21:38,610
do anything else it's just there all

00:21:36,030 --> 00:21:39,840
right and with that I promise that there

00:21:38,610 --> 00:21:42,270
would be links at the end of my slide

00:21:39,840 --> 00:21:45,030
like it's got the Bosch online tutorial

00:21:42,270 --> 00:21:46,220
at the top I really highly recommend

00:21:45,030 --> 00:21:48,780
looking through the documentation

00:21:46,220 --> 00:21:50,850
there's the links for the community how

00:21:48,780 --> 00:21:52,020
to deploy Cloud Foundry oh and then

00:21:50,850 --> 00:21:53,490
there's this really cool thing I didn't

00:21:52,020 --> 00:21:54,930
mention called Bosch lite you're like I

00:21:53,490 --> 00:21:56,040
don't want to pay for AWS I don't wanna

00:21:54,930 --> 00:21:58,080
pay for Google I don't want to pay for

00:21:56,040 --> 00:22:00,300
any of these services how do I just test

00:21:58,080 --> 00:22:02,760
if I like Bosch so if you go to this

00:22:00,300 --> 00:22:04,590
that URL and type in Bosch light you can

00:22:02,760 --> 00:22:06,960
actually get bashed up and running on

00:22:04,590 --> 00:22:08,250
your local machine and deploy Cloud

00:22:06,960 --> 00:22:10,860
Foundry and play around with Cloud

00:22:08,250 --> 00:22:12,690
Foundry however you'd like I can tell

00:22:10,860 --> 00:22:14,340
you I have a 4 gigabyte Mac up here and

00:22:12,690 --> 00:22:17,070
it's a little laggy

00:22:14,340 --> 00:22:20,580
but you can do it so highly recommend

00:22:17,070 --> 00:22:22,289
that and with that the closure of my

00:22:20,580 --> 00:22:23,669
talk and I'm open to any questions if

00:22:22,289 --> 00:22:41,880
there are any I'm not sure how much time

00:22:23,669 --> 00:22:43,350
I have left a really good number at

00:22:41,880 --> 00:22:45,240
least from what I've seen if you have a

00:22:43,350 --> 00:22:46,049
compilation machine for each of your

00:22:45,240 --> 00:22:52,340
components

00:22:46,049 --> 00:22:56,340
it'll it's useful for so like I'm sorry

00:22:52,340 --> 00:22:58,590
for let me rephrase for maybe each of

00:22:56,340 --> 00:23:00,360
your jobs is a good number because like

00:22:58,590 --> 00:23:03,750
I said it compiles that source code and

00:23:00,360 --> 00:23:05,370
makes it executable on Bosch so if you

00:23:03,750 --> 00:23:06,240
have the compilation machine for each of

00:23:05,370 --> 00:23:07,740
your jobs that are gonna have a

00:23:06,240 --> 00:23:10,080
different configuration and different

00:23:07,740 --> 00:23:12,919
executable that's a usually a good

00:23:10,080 --> 00:23:12,919
estimate

00:23:20,250 --> 00:23:28,750
Savion I don't know if there's a

00:23:26,890 --> 00:23:32,920
tutorial for how to create your own stem

00:23:28,750 --> 00:23:35,230
cells there is a list of all of the

00:23:32,920 --> 00:23:38,400
available stem cells I didn't put it on

00:23:35,230 --> 00:23:40,750
here it's bashed io / stem cells and

00:23:38,400 --> 00:23:44,380
they usually try to be very up-to-date

00:23:40,750 --> 00:23:45,610
with the OS as they support but you

00:23:44,380 --> 00:23:47,350
could if you wanted to create your own

00:23:45,610 --> 00:23:49,450
you could try to ping the Bosch step

00:23:47,350 --> 00:23:59,830
Bosch slack channel and they might have

00:23:49,450 --> 00:24:01,900
more information for you I think it

00:23:59,830 --> 00:24:05,590
depends on how much time you're like how

00:24:01,900 --> 00:24:07,690
much you're willing to invest in the

00:24:05,590 --> 00:24:09,100
idea that Bosch is a good solution

00:24:07,690 --> 00:24:10,630
cuz if you're just like you're going in

00:24:09,100 --> 00:24:12,400
I'm like you're kind of tentative about

00:24:10,630 --> 00:24:14,890
Bosch it can seem like it's a lot longer

00:24:12,400 --> 00:24:18,070
but cuz I had to use Bosch every day I'm

00:24:14,890 --> 00:24:20,169
just like it was very frustrated but I

00:24:18,070 --> 00:24:21,490
started to see the same problems and if

00:24:20,169 --> 00:24:23,919
you're with somebody who's used it you

00:24:21,490 --> 00:24:25,390
the Bosch channel is very is a good

00:24:23,919 --> 00:24:27,790
place to check or you could check other

00:24:25,390 --> 00:24:28,929
online sources as well I've googled a

00:24:27,790 --> 00:24:31,990
lot of problems I've had with Bosch

00:24:28,929 --> 00:24:35,169
before and you're able to find relative

00:24:31,990 --> 00:24:37,990
solutions and after that like using

00:24:35,169 --> 00:24:40,630
Bosch is easy but mastering Bosch is

00:24:37,990 --> 00:24:42,750
what's hard if that answers your

00:24:40,630 --> 00:24:42,750
question

00:24:43,919 --> 00:24:50,190
alright thank you very much

00:24:47,070 --> 00:24:50,190

YouTube URL: https://www.youtube.com/watch?v=WzmraWGh5iI


