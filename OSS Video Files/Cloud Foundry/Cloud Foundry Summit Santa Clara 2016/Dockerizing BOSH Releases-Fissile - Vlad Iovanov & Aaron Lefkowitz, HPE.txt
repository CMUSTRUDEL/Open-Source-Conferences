Title: Dockerizing BOSH Releases-Fissile - Vlad Iovanov & Aaron Lefkowitz, HPE
Publication date: 2016-05-29
Playlist: Cloud Foundry Summit Santa Clara 2016
Description: 
	Fissile is a tool that allows developers to convert BOSH releases into Docker images as part of a build pipeline. 

Because BOSH releases are precisely structured, we are able to craft Docker images that contain jobs and packages, similar to what you get after BOSH provisions you a VM. The difference is that with Fissile, this process happens in as part of your build (not at deployment time), and there are no Agents involved. The result - you get to deploy Cloud Foundry as Docker images and configure them via environment variables. 

Fissile is written in Go. It provides a CLI that takes you each step of the process: package compilation, job configuration, Docker layer management and final image creation. It has multi-release support, so you can create Docker images with components from more than one release. 

Vlad Iovanov
Technical Lead, HPE
Vlad Iovanov is currently working as a Technical Lead on the Helion Cloud Foundry project at Hewlett Packard enterprise. Located in Seattle, USA.

Aaron Lefkowitz
Engineering Manager, HPE
Aaron Lefkowitz is currently working as an Engineering Manager on the Helion Cloud Foundry project at Hewlett Packard enterprise. Located in Seattle, USA.
Captions: 
	00:00:00,000 --> 00:00:05,490
all right guys it's for 55 I'm gonna get

00:00:02,429 --> 00:00:09,480
the talk started so welcome to this

00:00:05,490 --> 00:00:13,980
session for fissile aka container izing

00:00:09,480 --> 00:00:15,630
cloud foundry or Bosch releases my name

00:00:13,980 --> 00:00:17,460
is Aaron Lefkowitz I am an engineering

00:00:15,630 --> 00:00:19,920
manager at in the Hylian cloud foundry

00:00:17,460 --> 00:00:21,240
group at Hewlett Packard Enterprise I've

00:00:19,920 --> 00:00:22,800
got a background in SAS I've only

00:00:21,240 --> 00:00:24,689
recently come into path space but I

00:00:22,800 --> 00:00:26,340
think it's really cool I really like go

00:00:24,689 --> 00:00:28,550
and network systems I've got a

00:00:26,340 --> 00:00:31,080
collection of plushy Gophers to prove it

00:00:28,550 --> 00:00:32,910
hello everyone I'm Vlad I'm the

00:00:31,080 --> 00:00:36,030
technical lead for cloud foundry at

00:00:32,910 --> 00:00:37,920
Hewlett Packard Enterprise I've been

00:00:36,030 --> 00:00:42,149
working on tough on your project since

00:00:37,920 --> 00:00:48,809
about 2011 and I'm a big fan of metal

00:00:42,149 --> 00:00:51,030
and Starcraft so I want to start with

00:00:48,809 --> 00:00:52,980
the question of why can't we just use

00:00:51,030 --> 00:00:56,430
Bosch so this is the question that we've

00:00:52,980 --> 00:00:58,379
got answer in order to proceed so Bosch

00:00:56,430 --> 00:01:00,149
is really about virtual machines right

00:00:58,379 --> 00:01:01,949
when you deploy with Bosch you get

00:01:00,149 --> 00:01:04,589
virtual machines but we wanted something

00:01:01,949 --> 00:01:06,450
for containers it's kind of a parent to

00:01:04,589 --> 00:01:09,170
everyone in this room a lot of workloads

00:01:06,450 --> 00:01:12,030
moving to container based sorts of

00:01:09,170 --> 00:01:14,220
deployment mechanisms right so we wanted

00:01:12,030 --> 00:01:16,290
a part of that cookie but we also really

00:01:14,220 --> 00:01:18,780
like Cloud Foundry so we needed

00:01:16,290 --> 00:01:21,860
something for both right and it's also

00:01:18,780 --> 00:01:25,710
for science because you know we have

00:01:21,860 --> 00:01:27,990
timers we have a peanut butter and jelly

00:01:25,710 --> 00:01:30,299
sandwich and we want to see if we can

00:01:27,990 --> 00:01:34,200
take it apart take those two things into

00:01:30,299 --> 00:01:36,840
they're distinct parts so in order to

00:01:34,200 --> 00:01:39,479
separate all the things the first thing

00:01:36,840 --> 00:01:41,280
we had to realize is that you know as we

00:01:39,479 --> 00:01:43,799
started on this journey is that Bosch

00:01:41,280 --> 00:01:46,950
and CF are a little bit more tightly

00:01:43,799 --> 00:01:49,649
coupled than we first had imagined you

00:01:46,950 --> 00:01:51,570
know and Bosch technology choices also

00:01:49,649 --> 00:01:56,159
kind of limit the implementations that

00:01:51,570 --> 00:01:58,110
we could do for this for example if you

00:01:56,159 --> 00:02:00,450
look at the diagram you can see on the

00:01:58,110 --> 00:02:02,159
left hand side we've got you know the

00:02:00,450 --> 00:02:04,290
boss agent stem cells all the Bosch

00:02:02,159 --> 00:02:06,390
related things those are squarely in the

00:02:04,290 --> 00:02:08,580
Bosch land and on the right side you've

00:02:06,390 --> 00:02:11,039
got jobs configurations packages on the

00:02:08,580 --> 00:02:12,510
Cloud Foundry land but kind of in the

00:02:11,039 --> 00:02:14,040
middle where these things come together

00:02:12,510 --> 00:02:16,200
we've got

00:02:14,040 --> 00:02:18,959
and these er B templates and these

00:02:16,200 --> 00:02:21,989
things are a lot harder to deal with in

00:02:18,959 --> 00:02:23,760
particular you know if you look at Cloud

00:02:21,989 --> 00:02:25,590
Foundry the components are composable

00:02:23,760 --> 00:02:28,319
they've got well-defined boundaries and

00:02:25,590 --> 00:02:29,909
api's but kind of ironically the lines

00:02:28,319 --> 00:02:32,280
are a little bit more blurry when you

00:02:29,909 --> 00:02:34,709
get into this middle section here so for

00:02:32,280 --> 00:02:36,510
example the ER b templates they're well

00:02:34,709 --> 00:02:38,909
they're written in ER B it means if you

00:02:36,510 --> 00:02:41,129
don't have a Ruby parser you can't use

00:02:38,909 --> 00:02:42,450
them right so that kind of limits kind

00:02:41,129 --> 00:02:45,510
of the technology or allowed to use

00:02:42,450 --> 00:02:47,430
around that and they also contain like

00:02:45,510 --> 00:02:50,010
the the templates themselves also happen

00:02:47,430 --> 00:02:51,389
to contain you know entire Ruby classes

00:02:50,010 --> 00:02:54,239
and functions which makes them really

00:02:51,389 --> 00:02:55,709
hard to emulate so we wish that those

00:02:54,239 --> 00:02:57,959
kinds of things didn't get into them

00:02:55,709 --> 00:03:00,150
over time so porting this to another

00:02:57,959 --> 00:03:02,340
system isn't really feasible and the

00:03:00,150 --> 00:03:05,129
fact that monit is there and it's sort

00:03:02,340 --> 00:03:08,819
of that's the only thing you can use I

00:03:05,129 --> 00:03:10,739
wish I knew how to use PowerPoint but

00:03:08,819 --> 00:03:15,319
it's the only service statement that you

00:03:10,739 --> 00:03:17,609
can use that's it so basically you can't

00:03:15,319 --> 00:03:19,379
it's sort of undesirable we wish we

00:03:17,609 --> 00:03:21,349
could switch it over system D or

00:03:19,379 --> 00:03:24,000
whatever but we're stuck with mana so

00:03:21,349 --> 00:03:27,900
Vlad's gonna get into a little bit more

00:03:24,000 --> 00:03:31,019
about what's kind of inside now okay so

00:03:27,900 --> 00:03:33,359
given all that how are we doing this how

00:03:31,019 --> 00:03:36,750
is Fissel turning bars releases into

00:03:33,359 --> 00:03:39,840
containers so first we start from a

00:03:36,750 --> 00:03:41,669
bunch of Trustee base and we put a stem

00:03:39,840 --> 00:03:44,519
cell layer on top of that so hopefully

00:03:41,669 --> 00:03:46,229
you guys know what stem cells are we

00:03:44,519 --> 00:03:48,479
create the stem cell layer much like

00:03:46,229 --> 00:03:50,310
Bastas so we run some scripts and

00:03:48,479 --> 00:03:53,220
install dependencies on top of Trustee

00:03:50,310 --> 00:03:55,440
and we get that stem cell layer on top

00:03:53,220 --> 00:03:58,620
of the stem cell layer we have packages

00:03:55,440 --> 00:04:00,449
and jobs packages are compiled and you

00:03:58,620 --> 00:04:02,549
have jobs with their templates their

00:04:00,449 --> 00:04:04,349
configurations and so on and then next

00:04:02,549 --> 00:04:06,479
to all this we have some secret sauce

00:04:04,349 --> 00:04:08,879
which is now that secret really because

00:04:06,479 --> 00:04:11,250
we're going to tell you what it is it's

00:04:08,879 --> 00:04:15,419
configured it's a tool that will deal

00:04:11,250 --> 00:04:18,120
with the bars templates and run SH which

00:04:15,419 --> 00:04:22,139
is the entry point to every darker image

00:04:18,120 --> 00:04:25,979
that Fissel creates these images don't

00:04:22,139 --> 00:04:27,600
have a Bosch agent and you basically can

00:04:25,979 --> 00:04:30,300
use anything that knows

00:04:27,600 --> 00:04:39,600
to deploy them whether it's composed

00:04:30,300 --> 00:04:41,640
kubernetes etc okay so we just talked

00:04:39,600 --> 00:04:43,800
about the fact that we have compiled

00:04:41,640 --> 00:04:47,100
packages that are part of our container

00:04:43,800 --> 00:04:49,680
images so how do we do those well we do

00:04:47,100 --> 00:04:52,920
it at Build time contrary to how Bosh

00:04:49,680 --> 00:04:54,660
works you when you deploy the first time

00:04:52,920 --> 00:04:57,960
it will compile packages on on the stem

00:04:54,660 --> 00:05:03,180
cells we do it at Build time when you

00:04:57,960 --> 00:05:05,340
build your your container images we have

00:05:03,180 --> 00:05:07,380
a compilation layer so we were able to

00:05:05,340 --> 00:05:10,530
separate the dependencies that you need

00:05:07,380 --> 00:05:12,240
at run time for the darker images versus

00:05:10,530 --> 00:05:14,970
the ones that you just need to compile

00:05:12,240 --> 00:05:16,920
the packages so again you start from

00:05:14,970 --> 00:05:18,990
trustee you have this compilation layer

00:05:16,920 --> 00:05:22,500
which is basically dependencies for

00:05:18,990 --> 00:05:25,470
compiling things and then using docker

00:05:22,500 --> 00:05:27,480
and go we paralyze everything and

00:05:25,470 --> 00:05:33,750
compile all of your packages using all

00:05:27,480 --> 00:05:36,690
the cores on your box this also does

00:05:33,750 --> 00:05:42,060
smart detection of dependencies so for

00:05:36,690 --> 00:05:44,550
example if I say I want nets and the

00:05:42,060 --> 00:05:46,170
nets forward they're on one image it'll

00:05:44,550 --> 00:05:48,960
just pick out the packages that are

00:05:46,170 --> 00:05:51,240
needed for those jobs and won't compile

00:05:48,960 --> 00:05:55,650
anything else also if you use multiple

00:05:51,240 --> 00:05:58,890
box releases and the same package is

00:05:55,650 --> 00:06:01,670
being used in in more than one we only

00:05:58,890 --> 00:06:01,670
compile that once

00:06:05,530 --> 00:06:14,270
okay so now we know how the layers are

00:06:10,310 --> 00:06:17,270
created for these images we understand

00:06:14,270 --> 00:06:19,460
how the packages get compiled what else

00:06:17,270 --> 00:06:21,410
do we need in order to for fissile to do

00:06:19,460 --> 00:06:24,590
its job and and give us darker images

00:06:21,410 --> 00:06:27,550
for basically all of the box releases so

00:06:24,590 --> 00:06:30,710
we needed a we need Barcia leases that

00:06:27,550 --> 00:06:32,870
have been built that the dev box

00:06:30,710 --> 00:06:35,870
releases are not final Barcia releases

00:06:32,870 --> 00:06:39,080
we need a role manifest and opinions

00:06:35,870 --> 00:06:41,710
these are all required at built time

00:06:39,080 --> 00:06:45,020
they're not required at deployment time

00:06:41,710 --> 00:06:47,620
so using all this information fissile

00:06:45,020 --> 00:06:50,599
will be able to output darker images and

00:06:47,620 --> 00:06:54,020
next we're going to see how these these

00:06:50,599 --> 00:06:59,479
two configuration to configuration

00:06:54,020 --> 00:07:01,220
inputs look like okay so on the Left we

00:06:59,479 --> 00:07:03,860
have a role manifest and again I want to

00:07:01,220 --> 00:07:05,930
emphasize this is used at build time the

00:07:03,860 --> 00:07:08,750
user that deploys these these darker

00:07:05,930 --> 00:07:12,530
images will never see this you have a

00:07:08,750 --> 00:07:14,960
list of roles so these for each role

00:07:12,530 --> 00:07:16,699
you'll get a darker image and for each

00:07:14,960 --> 00:07:19,909
role you need to specify what you want

00:07:16,699 --> 00:07:21,979
in it so in this example we have Nats

00:07:19,909 --> 00:07:24,320
the net stream for worden and Metron

00:07:21,979 --> 00:07:26,599
agent so at the end if you feed this

00:07:24,320 --> 00:07:31,250
into Fissel you'll get a darker image

00:07:26,599 --> 00:07:33,919
that contains these three jobs and then

00:07:31,250 --> 00:07:35,240
we have a configuration section so we

00:07:33,919 --> 00:07:37,669
wanted to do configuration through

00:07:35,240 --> 00:07:39,500
environment variables because we've

00:07:37,669 --> 00:07:41,479
noticed that it's a best practice and

00:07:39,500 --> 00:07:44,300
we've seen it in things like 12 factor

00:07:41,479 --> 00:07:46,880
apps environment variables are really

00:07:44,300 --> 00:07:49,250
easy to use with docker so we created

00:07:46,880 --> 00:07:52,190
these templates that you see here in the

00:07:49,250 --> 00:07:59,570
left on the left to help map environment

00:07:52,190 --> 00:08:03,440
variables to Bosch job properties on the

00:07:59,570 --> 00:08:06,740
right we have opinions on the top you

00:08:03,440 --> 00:08:08,240
see it's basically a barge deployment

00:08:06,740 --> 00:08:10,130
manifest with just the properties

00:08:08,240 --> 00:08:12,800
section and those are configuration

00:08:10,130 --> 00:08:14,810
defaults that will be baked into the

00:08:12,800 --> 00:08:15,560
images things that the user won't be

00:08:14,810 --> 00:08:17,930
able to change

00:08:15,560 --> 00:08:18,740
they're basically your opinions of how

00:08:17,930 --> 00:08:21,139
the

00:08:18,740 --> 00:08:23,389
the container should run then we have

00:08:21,139 --> 00:08:25,639
dark opinions and this is something to

00:08:23,389 --> 00:08:27,350
make security guys happy

00:08:25,639 --> 00:08:29,509
anything that's in there won't be

00:08:27,350 --> 00:08:31,280
allowed to have a default so there we

00:08:29,509 --> 00:08:34,250
enumerate all the secrets in the system

00:08:31,280 --> 00:08:37,279
so that you could never you could never

00:08:34,250 --> 00:08:42,649
get one of those secrets have a default

00:08:37,279 --> 00:08:45,140
baked into the image okay so now we

00:08:42,649 --> 00:08:48,470
understand how thistle creates things

00:08:45,140 --> 00:08:50,180
how the images look like how packages

00:08:48,470 --> 00:08:53,420
get compiled and the configuration we

00:08:50,180 --> 00:08:55,310
need to pass the fissile how does it run

00:08:53,420 --> 00:08:58,250
so when I do darker run one of these

00:08:55,310 --> 00:09:01,700
things what happens well the entry point

00:08:58,250 --> 00:09:03,589
which we call run SH will execute some

00:09:01,700 --> 00:09:05,779
some scripts that are very useful for

00:09:03,589 --> 00:09:08,480
hooking into the process so if you have

00:09:05,779 --> 00:09:10,520
something that needs to change you don't

00:09:08,480 --> 00:09:12,950
like something that this automatic

00:09:10,520 --> 00:09:13,899
automated process creates you could hook

00:09:12,950 --> 00:09:16,520
into that point

00:09:13,899 --> 00:09:21,050
it runs configuring to process all the

00:09:16,520 --> 00:09:23,540
other box templates it'll then start our

00:09:21,050 --> 00:09:25,970
syslog and cron and finally start

00:09:23,540 --> 00:09:29,390
monitor one small it starts all the

00:09:25,970 --> 00:09:32,660
process all the jobs that monitor is

00:09:29,390 --> 00:09:34,339
monitoring will start up eventually and

00:09:32,660 --> 00:09:37,370
then finally we trap int and term

00:09:34,339 --> 00:09:39,500
signals so that when darker try to tries

00:09:37,370 --> 00:09:41,230
to stop us we can we can shut down

00:09:39,500 --> 00:09:45,290
gracefully

00:09:41,230 --> 00:09:47,420
now I'm gonna pass it back to Aaron so

00:09:45,290 --> 00:09:49,339
I'm gonna go into a little bit more I

00:09:47,420 --> 00:09:51,680
mean we saw how to configure fissile

00:09:49,339 --> 00:09:53,360
itself and how to tell it what images

00:09:51,680 --> 00:09:54,950
are you gonna build but I want to talk a

00:09:53,360 --> 00:09:57,110
little bit more about configuration of

00:09:54,950 --> 00:09:58,490
Cloud Foundry because it's sort of a

00:09:57,110 --> 00:10:00,529
topic on its own and we wanted to dive

00:09:58,490 --> 00:10:02,900
into it just a little bit here and see

00:10:00,529 --> 00:10:05,270
how we kind of tackled this problem so

00:10:02,900 --> 00:10:06,950
you know configuring Cloud Foundry is

00:10:05,270 --> 00:10:08,839
hard there's a lot of values to

00:10:06,950 --> 00:10:10,520
configure and we wanted to kind of

00:10:08,839 --> 00:10:13,250
distill this into something simpler for

00:10:10,520 --> 00:10:16,490
this user so we kind of created

00:10:13,250 --> 00:10:18,350
configured that augments bosh template

00:10:16,490 --> 00:10:19,820
it does the same thing but it can pull

00:10:18,350 --> 00:10:21,680
from multiple sources such as

00:10:19,820 --> 00:10:24,740
environment variables which we talked

00:10:21,680 --> 00:10:26,750
about prior to this and then we also

00:10:24,740 --> 00:10:29,000
employ those mustache templates you saw

00:10:26,750 --> 00:10:30,960
a few slides ago to kind of help

00:10:29,000 --> 00:10:33,990
eliminate complexity and redundant

00:10:30,960 --> 00:10:36,330
see in configuration of Cloud Foundry so

00:10:33,990 --> 00:10:38,850
just to give you an idea you know

00:10:36,330 --> 00:10:41,430
there's a lot of configuration values in

00:10:38,850 --> 00:10:43,890
cloud foundry we have specs these come

00:10:41,430 --> 00:10:46,290
from the job spec files and there's 500

00:10:43,890 --> 00:10:49,350
some values of that in CF release and

00:10:46,290 --> 00:10:51,660
Diego release alone and then we get to

00:10:49,350 --> 00:10:54,300
the level that we call opinions where we

00:10:51,660 --> 00:10:57,000
can safely define defaults and we have

00:10:54,300 --> 00:10:59,400
about 200 of these where you actually

00:10:57,000 --> 00:11:02,910
don't need to really ever set these for

00:10:59,400 --> 00:11:05,670
most deployments so there's 200 of those

00:11:02,910 --> 00:11:08,130
followed by what we call user global and

00:11:05,670 --> 00:11:09,210
this is values that users actually care

00:11:08,130 --> 00:11:11,310
about they actually want to change

00:11:09,210 --> 00:11:15,240
there's about 90 of these these are host

00:11:11,310 --> 00:11:18,360
names IP addresses ports sometimes and

00:11:15,240 --> 00:11:20,850
secrets especially secrets and then we

00:11:18,360 --> 00:11:24,600
have user role so user global is sort of

00:11:20,850 --> 00:11:28,200
for the entire system where user role is

00:11:24,600 --> 00:11:30,380
for a specific VM so for example the API

00:11:28,200 --> 00:11:33,000
and the Cloud Controller and it's jobs

00:11:30,380 --> 00:11:35,400
that could have a specific value for

00:11:33,000 --> 00:11:37,320
Nats dot machines for an example and

00:11:35,400 --> 00:11:42,390
there's about 20 of these that we

00:11:37,320 --> 00:11:44,430
weren't and so we had two schemes go

00:11:42,390 --> 00:11:46,410
quickly through one that we didn't

00:11:44,430 --> 00:11:48,210
really work for us one that did so the

00:11:46,410 --> 00:11:50,010
first one we tried was something I'm

00:11:48,210 --> 00:11:52,590
calling layered dynamic and this is

00:11:50,010 --> 00:11:54,960
something that we kept in the four key

00:11:52,590 --> 00:11:58,020
spaces we kept values for everything so

00:11:54,960 --> 00:11:59,250
we had spec opinions job and role but

00:11:58,020 --> 00:12:01,680
there was a few problems with this we

00:11:59,250 --> 00:12:03,600
used console to do it so there was each

00:12:01,680 --> 00:12:05,760
of those values within there but every

00:12:03,600 --> 00:12:07,440
time we looked it up you know we had to

00:12:05,760 --> 00:12:09,240
do the fallback is it this one is it

00:12:07,440 --> 00:12:11,670
this one does this exist and so it was

00:12:09,240 --> 00:12:13,110
actually quite slow to run and we didn't

00:12:11,670 --> 00:12:15,270
actually gain anything from it because

00:12:13,110 --> 00:12:17,220
we still had to restart the container so

00:12:15,270 --> 00:12:19,620
despite having this dynamic ability to

00:12:17,220 --> 00:12:23,460
configure it nothing really changed and

00:12:19,620 --> 00:12:26,100
we also had to have yet another Cavey

00:12:23,460 --> 00:12:28,590
raft process in the cluster as you know

00:12:26,100 --> 00:12:31,170
Cloud Foundry CF release already has a

00:12:28,590 --> 00:12:33,660
console instance Diego and logger Gator

00:12:31,170 --> 00:12:35,250
all already have at CDs so we're putting

00:12:33,660 --> 00:12:38,010
another one of these kind of hard to

00:12:35,250 --> 00:12:40,440
configure for H a type processes into

00:12:38,010 --> 00:12:42,450
the mix and we just didn't need that so

00:12:40,440 --> 00:12:43,740
we kind of toned it down and went with

00:12:42,450 --> 00:12:46,260
something simpler which

00:12:43,740 --> 00:12:49,230
I'm terming Laird static here where we

00:12:46,260 --> 00:12:51,270
have everything is precomputed inside

00:12:49,230 --> 00:12:53,780
the container based on the roll manifest

00:12:51,270 --> 00:12:56,160
in the templates we've already seen and

00:12:53,780 --> 00:12:59,390
everything else is provided through the

00:12:56,160 --> 00:13:05,220
environment very easily for user values

00:12:59,390 --> 00:13:08,760
so this worked out really well for us in

00:13:05,220 --> 00:13:11,220
addition to this these are just a list a

00:13:08,760 --> 00:13:14,070
sampling of the pull requests that we've

00:13:11,220 --> 00:13:16,050
done in our team to basically change a

00:13:14,070 --> 00:13:18,260
lot of things like DNS lookup and

00:13:16,050 --> 00:13:21,060
hard-coded values that are kind of

00:13:18,260 --> 00:13:23,700
subtly related to Bosch in certain ways

00:13:21,060 --> 00:13:27,690
as well as you know systems that touch

00:13:23,700 --> 00:13:29,550
proc with kind of impunity and so we're

00:13:27,690 --> 00:13:32,640
this is kind of an ongoing effort to

00:13:29,550 --> 00:13:34,170
like I said separate that peanut butter

00:13:32,640 --> 00:13:37,140
and jelly sandwich just a little bit

00:13:34,170 --> 00:13:39,600
more so yeah

00:13:37,140 --> 00:13:43,680
the next thing that I want to go into is

00:13:39,600 --> 00:13:47,040
a demo so I'm going to show you a demo

00:13:43,680 --> 00:13:51,920
of Fissel in action so I'm going to

00:13:47,040 --> 00:13:51,920
switch over to this yeah

00:14:01,320 --> 00:14:13,710
I need to meet one moment hopefully we

00:14:10,350 --> 00:14:18,060
can see this yes hopefully the font is

00:14:13,710 --> 00:14:20,810
also not big enough let's do better with

00:14:18,060 --> 00:14:22,530
that are we good there can we read it

00:14:20,810 --> 00:14:25,620
okay excellent

00:14:22,530 --> 00:14:28,140
I'm gonna do the same over here just so

00:14:25,620 --> 00:14:30,600
we get a clearer vision of what's going

00:14:28,140 --> 00:14:32,820
on so I've put together this folder I've

00:14:30,600 --> 00:14:35,310
got a couple things going on here I have

00:14:32,820 --> 00:14:38,250
a CF release and inside CF release is

00:14:35,310 --> 00:14:42,750
just a precompiled Bosch release so

00:14:38,250 --> 00:14:46,280
Bosch create release - - force I have a

00:14:42,750 --> 00:14:49,110
fissile RC which is going to basically

00:14:46,280 --> 00:14:51,900
pass command-line arguments into fissile

00:14:49,110 --> 00:14:53,760
so there's a bunch of stuff here I have

00:14:51,900 --> 00:14:55,470
a config in which is required because we

00:14:53,760 --> 00:14:57,660
bundled this into the image that we're

00:14:55,470 --> 00:15:00,210
about to create and then I have this

00:14:57,660 --> 00:15:01,770
config directory in here that has all

00:15:00,210 --> 00:15:05,190
the files that we were just talking

00:15:01,770 --> 00:15:07,230
about so we can see these are my

00:15:05,190 --> 00:15:08,880
opinions these are the things that are

00:15:07,230 --> 00:15:11,040
not likely to change and will be baked

00:15:08,880 --> 00:15:13,380
into the image such as the port for Nats

00:15:11,040 --> 00:15:16,980
or the fact that trace is turned to

00:15:13,380 --> 00:15:19,980
false the next thing I have is my dark

00:15:16,980 --> 00:15:21,750
opinions which we also saw and these are

00:15:19,980 --> 00:15:24,210
the things that I don't want defaults

00:15:21,750 --> 00:15:26,670
for even if I specified them here I'm

00:15:24,210 --> 00:15:29,630
I'm not going to actually be able to use

00:15:26,670 --> 00:15:33,180
them so this value will not go through

00:15:29,630 --> 00:15:36,330
and the last thing we have is the role

00:15:33,180 --> 00:15:38,850
manifest and so we saw an example of

00:15:36,330 --> 00:15:41,820
this you can see here that I've defined

00:15:38,850 --> 00:15:44,340
a container or a role called Nats it has

00:15:41,820 --> 00:15:47,790
one job it has Nats from the CF release

00:15:44,340 --> 00:15:49,680
and so I've also commented out a couple

00:15:47,790 --> 00:15:51,450
of processes here that I'm not going to

00:15:49,680 --> 00:15:53,580
need for this demo such as the Nats

00:15:51,450 --> 00:15:55,200
stream forward and Metron agent we can

00:15:53,580 --> 00:15:57,300
kind of control the processes that go

00:15:55,200 --> 00:15:59,850
into each container by modifying the

00:15:57,300 --> 00:16:01,590
role manifest and then lastly you can

00:15:59,850 --> 00:16:03,450
see our configuration templates at the

00:16:01,590 --> 00:16:07,590
bottom the mustache templates that we

00:16:03,450 --> 00:16:12,360
were talking about so with that I'm

00:16:07,590 --> 00:16:14,700
going to actually build the the actual

00:16:12,360 --> 00:16:16,950
image or sorry the package

00:16:14,700 --> 00:16:19,260
so this is the compilation step and of

00:16:16,950 --> 00:16:21,890
course I've forgot to source my fissile

00:16:19,260 --> 00:16:24,510
rc4 all my things so you can see that

00:16:21,890 --> 00:16:26,400
because I disabled Matt's stream forward

00:16:24,510 --> 00:16:28,620
or fissile intelligently does not build

00:16:26,400 --> 00:16:31,890
ruby which it does not need despite it

00:16:28,620 --> 00:16:34,500
being part of that kind of job so you

00:16:31,890 --> 00:16:36,420
can see it compiled go and gene adds D

00:16:34,500 --> 00:16:38,820
and the next thing I'm going to do is

00:16:36,420 --> 00:16:42,810
actually build the image with this

00:16:38,820 --> 00:16:45,810
compiled package so now you can actually

00:16:42,810 --> 00:16:48,810
see in my docker images which looks

00:16:45,810 --> 00:16:52,080
lovely you can see a container with the

00:16:48,810 --> 00:16:54,360
ID fissile - Nats so that's the

00:16:52,080 --> 00:16:56,430
container we just built the fissile role

00:16:54,360 --> 00:16:58,560
base and the fissile compilation base

00:16:56,430 --> 00:17:00,480
that you see there are ones that we

00:16:58,560 --> 00:17:02,370
discussed elsewhere and take a little

00:17:00,480 --> 00:17:04,910
bit longer to build and those are the

00:17:02,370 --> 00:17:08,760
runtime and the compilation dependencies

00:17:04,910 --> 00:17:11,910
so now I'm actually going to start this

00:17:08,760 --> 00:17:18,870
container up so we're gonna do one of

00:17:11,910 --> 00:17:20,550
these and here I have that's checked so

00:17:18,870 --> 00:17:24,390
this is actually a script that's just

00:17:20,550 --> 00:17:27,920
purling the endpoint it's looking for

00:17:24,390 --> 00:17:32,220
mana tactually and so when I run Nats

00:17:27,920 --> 00:17:33,660
you'll see that mana kind of pops up and

00:17:32,220 --> 00:17:35,670
we see on the right hand side does not

00:17:33,660 --> 00:17:37,830
exist right now except the T's on the

00:17:35,670 --> 00:17:41,040
second line but you can see that it

00:17:37,830 --> 00:17:43,440
knows that Nats is not ready yet and now

00:17:41,040 --> 00:17:45,450
Nats process has actually started up

00:17:43,440 --> 00:17:47,250
monitors reporting that it's up and this

00:17:45,450 --> 00:17:49,620
is just a regular CF Monett that's in

00:17:47,250 --> 00:17:52,470
every VM that you would produce with

00:17:49,620 --> 00:17:55,410
bosch and now we're ready to actually

00:17:52,470 --> 00:18:02,610
connect to Nats just to prove that it's

00:17:55,410 --> 00:18:05,640
working right so I have a listen command

00:18:02,610 --> 00:18:09,390
here sometimes it's gonna take a little

00:18:05,640 --> 00:18:11,370
while to start the process says it's up

00:18:09,390 --> 00:18:13,890
but Ruby right there we go so

00:18:11,370 --> 00:18:15,930
subscribing to Nats it's just

00:18:13,890 --> 00:18:17,250
subscribing on the wild card here and

00:18:15,930 --> 00:18:20,910
then we're going to send just a hello

00:18:17,250 --> 00:18:23,010
world to it and you can see that it gets

00:18:20,910 --> 00:18:24,930
passed along to the server and there you

00:18:23,010 --> 00:18:27,390
have it we have Nass running in a

00:18:24,930 --> 00:18:28,350
container just in plain docker that you

00:18:27,390 --> 00:18:29,940
can use with

00:18:28,350 --> 00:18:33,240
anything kubernetes you could use it

00:18:29,940 --> 00:18:34,919
with docker swarm you know the world's

00:18:33,240 --> 00:18:37,650
open as long as it's docker which is

00:18:34,919 --> 00:18:40,380
what pesalam produces right now we're

00:18:37,650 --> 00:18:43,289
going to see another portion another

00:18:40,380 --> 00:18:51,299
piece of this demo so I'm gonna pop that

00:18:43,289 --> 00:18:57,360
up here good to go yep okay so this is a

00:18:51,299 --> 00:19:00,000
video that we built for this and here

00:18:57,360 --> 00:19:03,600
we'll see cloud foundry running on

00:19:00,000 --> 00:19:06,000
kubernetes basically we took five barf

00:19:03,600 --> 00:19:10,380
releases we took CF release we took

00:19:06,000 --> 00:19:12,090
Diego release garden my sequel Etsy D we

00:19:10,380 --> 00:19:15,059
turned them into docker containers and

00:19:12,090 --> 00:19:17,039
we deploy them uncle Burnett YZ we went

00:19:15,059 --> 00:19:20,090
a bit further than that so on the right

00:19:17,039 --> 00:19:23,159
what you're seeing is cubes EDL get pods

00:19:20,090 --> 00:19:24,150
and we went a bit further and we wanted

00:19:23,159 --> 00:19:27,000
to make it a che

00:19:24,150 --> 00:19:29,760
so you'll see that you have actually

00:19:27,000 --> 00:19:33,059
more than one API roll running more than

00:19:29,760 --> 00:19:36,270
a PA you have three API workers you have

00:19:33,059 --> 00:19:41,580
multiple cells multiple mice equals

00:19:36,270 --> 00:19:44,190
multiple Nats etc okay so on the left on

00:19:41,580 --> 00:19:46,860
the top what you're seeing is a process

00:19:44,190 --> 00:19:48,650
that's making requests to an app that

00:19:46,860 --> 00:19:54,000
that's deployed on the thing on the

00:19:48,650 --> 00:19:56,640
kubernetes and right below that we see a

00:19:54,000 --> 00:19:59,610
chaos monkey script so what that does

00:19:56,640 --> 00:20:01,500
and hopefully you see that this thing is

00:19:59,610 --> 00:20:05,880
has sped up and it keeps going faster

00:20:01,500 --> 00:20:08,070
and faster but the script there killed

00:20:05,880 --> 00:20:09,450
something every minute so it takes

00:20:08,070 --> 00:20:11,309
something at random one of the roles

00:20:09,450 --> 00:20:15,659
like a cell like an API and just kills

00:20:11,309 --> 00:20:19,169
it and at the bottom we have the

00:20:15,659 --> 00:20:22,260
distribution of Diego so that that

00:20:19,169 --> 00:20:24,330
actually shows us how the app is be is

00:20:22,260 --> 00:20:27,000
being distributed among the Diego cells

00:20:24,330 --> 00:20:29,820
that's being requested by the process at

00:20:27,000 --> 00:20:33,000
the top and we can see that we basically

00:20:29,820 --> 00:20:35,640
get this for free so we we built the

00:20:33,000 --> 00:20:38,400
docker images we created some

00:20:35,640 --> 00:20:40,020
configuration for kubernetes and now we

00:20:38,400 --> 00:20:46,170
have an H a deployment of cloud

00:20:40,020 --> 00:20:49,070
we're running on it and we ran this

00:20:46,170 --> 00:20:53,640
experiment for about 20 hours about

00:20:49,070 --> 00:20:56,760
900,000 requests were made and in total

00:20:53,640 --> 00:21:00,500
there are about 1200 killings of of

00:20:56,760 --> 00:21:04,350
rolls and the things they don't line

00:21:00,500 --> 00:21:06,720
we're not done yet not all of the rolls

00:21:04,350 --> 00:21:09,030
are full eh-eh we still have some gaps

00:21:06,720 --> 00:21:12,680
so you know it would be great if we

00:21:09,030 --> 00:21:17,340
could get some help to to get to 100% so

00:21:12,680 --> 00:21:19,110
now that the video is done I would

00:21:17,340 --> 00:21:23,600
actually like to take you to the life

00:21:19,110 --> 00:21:23,600
thing can you switch me up to terminal

00:21:25,940 --> 00:21:33,480
okay so hopefully you see this the

00:21:29,280 --> 00:21:35,070
phones are a bit smaller but this is the

00:21:33,480 --> 00:21:37,800
system that you saw you just saw earlier

00:21:35,070 --> 00:21:40,950
and it's still up and running we don't

00:21:37,800 --> 00:21:43,110
run the chaos monkey anymore but you can

00:21:40,950 --> 00:21:45,930
see cube CTL get pods are still running

00:21:43,110 --> 00:21:48,330
on a watch there the app is still making

00:21:45,930 --> 00:21:50,940
requests and we have varied us here at

00:21:48,330 --> 00:21:52,950
the bottom so just to show you how one

00:21:50,940 --> 00:21:53,850
of these things look like I'm gonna exit

00:21:52,950 --> 00:21:55,740
veritas

00:21:53,850 --> 00:21:58,320
I'm going to exit this container that

00:21:55,740 --> 00:22:01,170
I'm in which is a Diego debugger and I'm

00:21:58,320 --> 00:22:04,620
gonna darker exact into one of the cells

00:22:01,170 --> 00:22:07,560
so here we just see the command line

00:22:04,620 --> 00:22:09,240
there it's darker exact and then we get

00:22:07,560 --> 00:22:13,500
the idea of the first Diego cell

00:22:09,240 --> 00:22:16,050
basically every image that Fissel spits

00:22:13,500 --> 00:22:18,390
out will have a label with its roll so

00:22:16,050 --> 00:22:21,210
we can look it up easily so we're just

00:22:18,390 --> 00:22:26,880
gonna go in there and I'm gonna take you

00:22:21,210 --> 00:22:29,460
to a familiar place probably so you can

00:22:26,880 --> 00:22:32,190
see here we're in VAR v cap because of

00:22:29,460 --> 00:22:34,160
the tight coupling between the peanut

00:22:32,190 --> 00:22:36,810
butter and jelly that we talked about

00:22:34,160 --> 00:22:39,900
earlier there are still some things that

00:22:36,810 --> 00:22:41,820
we can't change like the templates still

00:22:39,900 --> 00:22:43,500
need of our V cap the way we load

00:22:41,820 --> 00:22:45,900
packages and run them still need of our

00:22:43,500 --> 00:22:48,020
V cap so when you go into one of these

00:22:45,900 --> 00:22:51,740
containers you'll actually see the same

00:22:48,020 --> 00:22:51,740
the same structure

00:22:52,230 --> 00:23:08,820
that's about it this is the life system

00:22:54,210 --> 00:23:13,470
running back to the presentation Wow

00:23:08,820 --> 00:23:15,059
that's the wrong view now you I did it

00:23:13,470 --> 00:23:19,350
okay

00:23:15,059 --> 00:23:24,450
so the end just wrapping up here we go

00:23:19,350 --> 00:23:26,399
this is yeah yeah so we still have work

00:23:24,450 --> 00:23:29,639
to do we want to add support for other

00:23:26,399 --> 00:23:31,739
types of base images we want to improve

00:23:29,639 --> 00:23:33,539
layering like you saw we just have the

00:23:31,739 --> 00:23:35,519
base then we have stem cells and

00:23:33,539 --> 00:23:38,100
packages and jobs we could be much

00:23:35,519 --> 00:23:41,519
smarter there where we take advantage of

00:23:38,100 --> 00:23:44,429
layering in Dockers to reduce the amount

00:23:41,519 --> 00:23:46,529
of downloading that we have to do we

00:23:44,429 --> 00:23:48,239
also think that this logic Monnett is

00:23:46,529 --> 00:23:48,600
possible so we would like to give that a

00:23:48,239 --> 00:23:51,570
try

00:23:48,600 --> 00:23:55,820
and also we want to continue the effort

00:23:51,570 --> 00:24:00,629
to decouple Bosh from from Cloud Foundry

00:23:55,820 --> 00:24:03,600
so with that you know as of now you know

00:24:00,629 --> 00:24:06,090
we're open sourced fissile and config n'

00:24:03,600 --> 00:24:09,480
those repos are available at github comm

00:24:06,090 --> 00:24:12,690
/ HP cloud fish land config n' so you

00:24:09,480 --> 00:24:14,600
can go check those out right away and so

00:24:12,690 --> 00:24:17,429
kind of what are we releasing with that

00:24:14,600 --> 00:24:19,379
just the tooling there's no images we're

00:24:17,429 --> 00:24:21,419
not going to be providing CF images for

00:24:19,379 --> 00:24:24,059
anyone that's up to you guys but

00:24:21,419 --> 00:24:25,499
hopefully with the docs and whatnot or

00:24:24,059 --> 00:24:27,720
any collaboration you want to do we can

00:24:25,499 --> 00:24:30,989
get images out of it very easily that is

00:24:27,720 --> 00:24:33,720
of course the tooling is entire job so I

00:24:30,989 --> 00:24:36,210
do want to just kind of say thanks to

00:24:33,720 --> 00:24:37,799
you know Hewlett Packard enterprise for

00:24:36,210 --> 00:24:40,559
giving us the incentive time to work on

00:24:37,799 --> 00:24:42,840
this as well as our other members of the

00:24:40,559 --> 00:24:45,359
h CF team who we have contributed also

00:24:42,840 --> 00:24:46,830
to fissile as well as the Cloud Foundry

00:24:45,359 --> 00:24:48,480
community and especially the Bosch

00:24:46,830 --> 00:24:50,309
project for actually making this

00:24:48,480 --> 00:24:52,230
possible because without the contracts

00:24:50,309 --> 00:24:54,480
that are there that they have laid out

00:24:52,230 --> 00:24:55,980
we wouldn't have been able to do this so

00:24:54,480 --> 00:25:00,899
it's actually a kind of a testament to

00:24:55,980 --> 00:25:02,879
that so yeah with that kind of want to

00:25:00,899 --> 00:25:05,239
open it up to Q&A and thank you very

00:25:02,879 --> 00:25:05,239
much

00:25:05,950 --> 00:25:09,650

YouTube URL: https://www.youtube.com/watch?v=6KfCuTlmeQs


