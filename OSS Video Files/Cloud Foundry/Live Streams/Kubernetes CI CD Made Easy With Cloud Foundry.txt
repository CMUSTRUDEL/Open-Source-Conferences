Title: Kubernetes CI CD Made Easy With Cloud Foundry
Publication date: 2021-04-07
Playlist: Live Streams
Description: 
	Kubernetes  deployments are complex! 


And the complexity only increases as you  add automation to your deployments. Catch this live stream to learn how you can reduce the complexity greatly with your favourite CI/CD tools such as Travis, Jenkins, and CircleCI. #Kubernetes #CloudFoundry #CI #CD
Captions: 
	00:00:13,599 --> 00:00:20,640
are we live

00:00:17,359 --> 00:00:20,640
yeah yeah

00:00:20,880 --> 00:00:26,240
on youtube okay

00:00:27,680 --> 00:00:33,680
not checking twitter okay

00:00:30,880 --> 00:00:34,239
we are live on youtube twitch you are

00:00:33,680 --> 00:00:39,280
live on

00:00:34,239 --> 00:00:42,719
switch check trigger okay

00:00:39,280 --> 00:00:42,719
yeah i want sweetheart

00:00:43,680 --> 00:00:45,840
great

00:00:47,200 --> 00:00:54,399
okay okay

00:00:51,680 --> 00:00:54,399
give me a second

00:00:54,879 --> 00:01:01,840
oh it works periscope still works hey

00:00:58,000 --> 00:01:05,760
folks happy to see everybody here

00:01:01,840 --> 00:01:11,920
once again um

00:01:05,760 --> 00:01:12,640
so today we are here for another um

00:01:11,920 --> 00:01:15,040
episode

00:01:12,640 --> 00:01:16,080
of our live streams our monthly live

00:01:15,040 --> 00:01:19,280
streams

00:01:16,080 --> 00:01:19,280
i mean is it by monthly

00:01:20,080 --> 00:01:25,759
whenever we feel like it okay

00:01:23,759 --> 00:01:27,360
yeah whenever we feel like it much live

00:01:25,759 --> 00:01:29,360
streams

00:01:27,360 --> 00:01:31,119
so um today we are going to be doing

00:01:29,360 --> 00:01:34,560
like a little bit

00:01:31,119 --> 00:01:35,680
of something with ci cd so we are going

00:01:34,560 --> 00:01:39,600
to be exploring

00:01:35,680 --> 00:01:40,720
um ci cd california popular csd tools

00:01:39,600 --> 00:01:43,840
like um

00:01:40,720 --> 00:01:46,880
travis um sequoia ci tanktone

00:01:43,840 --> 00:01:48,079
and jenkins and this is this is a very

00:01:46,880 --> 00:01:50,560
exciting one for me

00:01:48,079 --> 00:01:51,600
because i know we put a lot of work into

00:01:50,560 --> 00:01:54,399
figuring out

00:01:51,600 --> 00:01:54,720
how to work um get cloud foundry to work

00:01:54,399 --> 00:01:57,040
with

00:01:54,720 --> 00:01:57,759
various density tools and it was really

00:01:57,040 --> 00:01:59,040
easy but

00:01:57,759 --> 00:02:00,880
it was to i mean we're still going to

00:01:59,040 --> 00:02:03,840
give ourselves some credit

00:02:00,880 --> 00:02:05,759
um so it took a couple of while and but

00:02:03,840 --> 00:02:08,720
we're here today for this live stream

00:02:05,759 --> 00:02:09,759
um so as usual my name is shadrach

00:02:08,720 --> 00:02:11,520
akintayo

00:02:09,759 --> 00:02:12,959
i'm a developer advocate at the cloud

00:02:11,520 --> 00:02:15,200
foundry foundation

00:02:12,959 --> 00:02:16,959
where we are trying to make sure that

00:02:15,200 --> 00:02:19,760
the whole world can experience

00:02:16,959 --> 00:02:20,800
the awesome um developer experience

00:02:19,760 --> 00:02:23,280
focus

00:02:20,800 --> 00:02:24,640
cloudfront brings specifically to

00:02:23,280 --> 00:02:28,080
kubernetes

00:02:24,640 --> 00:02:31,200
um with me today is my genius

00:02:28,080 --> 00:02:32,879
colleague um ram

00:02:31,200 --> 00:02:34,800
ram do you want to say something about

00:02:32,879 --> 00:02:36,959
yourself or you have to you're trying to

00:02:34,800 --> 00:02:36,959
be

00:02:37,920 --> 00:02:44,640
i have tried it has never worked so

00:02:41,040 --> 00:02:46,720
yeah yeah thanks everyone for joining us

00:02:44,640 --> 00:02:50,239
from

00:02:46,720 --> 00:02:53,440
the comfort of your desks today

00:02:50,239 --> 00:02:56,800
my name is ram i am based out of india

00:02:53,440 --> 00:02:58,959
and i am also a developer advocate at

00:02:56,800 --> 00:03:02,879
the cloud foundry foundation

00:02:58,959 --> 00:03:05,360
so shadrach and i mostly spend our days

00:03:02,879 --> 00:03:07,280
in exploring cool ways in which cloud

00:03:05,360 --> 00:03:10,560
foundry can work for you

00:03:07,280 --> 00:03:13,200
and then we spend the rest of our

00:03:10,560 --> 00:03:16,000
week or month in sharing that

00:03:13,200 --> 00:03:19,360
information with everybody else who

00:03:16,000 --> 00:03:23,280
is basically interested in listening uh

00:03:19,360 --> 00:03:26,360
we blog often on a medium page

00:03:23,280 --> 00:03:27,519
so do check that out when you can and

00:03:26,360 --> 00:03:29,920
cloudfoundry.org

00:03:27,519 --> 00:03:30,799
is also home to a bunch of tutorials

00:03:29,920 --> 00:03:34,879
that

00:03:30,799 --> 00:03:37,120
we wrote we run the stream

00:03:34,879 --> 00:03:39,120
pretty frequently so we try to target

00:03:37,120 --> 00:03:41,120
like two streams a month

00:03:39,120 --> 00:03:42,159
a lot of the content that we've streamed

00:03:41,120 --> 00:03:44,879
so far is

00:03:42,159 --> 00:03:48,159
available and archived on our youtube

00:03:44,879 --> 00:03:48,159
channel so that

00:03:50,560 --> 00:03:54,959
no kids kids are always really fun i

00:03:53,439 --> 00:03:56,239
mean we're all working from home so we

00:03:54,959 --> 00:03:58,080
can all relate to

00:03:56,239 --> 00:04:00,080
being disturbed once in a while when

00:03:58,080 --> 00:04:02,879
doing video zoom calls and

00:04:00,080 --> 00:04:05,040
live streams etc so this is the usual

00:04:02,879 --> 00:04:09,680
episode

00:04:05,040 --> 00:04:09,680
i mean but it's

00:04:09,760 --> 00:04:17,120
once once in a while too frequently

00:04:14,000 --> 00:04:18,690
now so but anyhow sorry for

00:04:17,120 --> 00:04:21,800
the interruption

00:04:18,690 --> 00:04:21,800
[Music]

00:04:23,120 --> 00:04:28,880
and yeah like i was saying um

00:04:26,400 --> 00:04:29,440
all of the streams that we've done so

00:04:28,880 --> 00:04:32,880
far

00:04:29,440 --> 00:04:36,800
are available archived on youtube

00:04:32,880 --> 00:04:39,360
um so do check that out so it's youtube

00:04:36,800 --> 00:04:40,400
um cloud foundry foundation you can just

00:04:39,360 --> 00:04:44,320
find the channel

00:04:40,400 --> 00:04:44,320
uh using cloud foundry foundation and

00:04:45,199 --> 00:04:50,479
it's um it's going to be useful

00:04:48,320 --> 00:04:51,840
no matter if you're just starting off

00:04:50,479 --> 00:04:54,320
with like

00:04:51,840 --> 00:04:56,080
kubernetes or starting or you want to

00:04:54,320 --> 00:04:59,280
start off with cloud foundry and then

00:04:56,080 --> 00:05:02,320
you're just exploring ways in which to

00:04:59,280 --> 00:05:05,919
do more with what you have so

00:05:02,320 --> 00:05:06,800
lots of information there do check it

00:05:05,919 --> 00:05:10,240
out

00:05:06,800 --> 00:05:12,880
when you have the time oh cool

00:05:10,240 --> 00:05:13,759
yeah yeah so um to kick things off we

00:05:12,880 --> 00:05:16,080
are just going to

00:05:13,759 --> 00:05:17,280
like give i don't know ram can you get

00:05:16,080 --> 00:05:19,759
just give us a brief

00:05:17,280 --> 00:05:21,199
um summary of what this entire live

00:05:19,759 --> 00:05:23,120
stream is about

00:05:21,199 --> 00:05:24,479
i mean i've said it but i mean more

00:05:23,120 --> 00:05:28,479
brother bird but

00:05:24,479 --> 00:05:28,479
summarized version of it good

00:05:28,880 --> 00:05:34,400
sure happy to do that

00:05:32,160 --> 00:05:34,400
so

00:05:35,600 --> 00:05:42,960
here's the deal so even about 10 12

00:05:39,039 --> 00:05:45,520
even 15 years ago cicd

00:05:42,960 --> 00:05:46,880
was fairly important for a lot of teams

00:05:45,520 --> 00:05:50,639
so

00:05:46,880 --> 00:05:54,000
everybody was using it everybody was

00:05:50,639 --> 00:05:56,080
depending on cicd in order to

00:05:54,000 --> 00:05:58,240
make software deployment smoother make

00:05:56,080 --> 00:06:00,160
software deployments work

00:05:58,240 --> 00:06:03,199
in a more efficient way and generally

00:06:00,160 --> 00:06:07,440
get code out to production

00:06:03,199 --> 00:06:08,400
easily a lot of things have changed

00:06:07,440 --> 00:06:11,840
along the way

00:06:08,400 --> 00:06:15,440
since the past 12

00:06:11,840 --> 00:06:18,840
13 15 years um so

00:06:15,440 --> 00:06:22,000
first we had ci cd pipelines that

00:06:18,840 --> 00:06:24,000
basically generated binaries and those

00:06:22,000 --> 00:06:26,960
were just deployed to some remote

00:06:24,000 --> 00:06:29,440
staging instances somewhere typically

00:06:26,960 --> 00:06:32,319
vms

00:06:29,440 --> 00:06:35,600
eventually that sort of changed when

00:06:32,319 --> 00:06:37,680
docker came along and ci cd sort of

00:06:35,600 --> 00:06:38,720
morphed and transformed and said hey

00:06:37,680 --> 00:06:40,479
instead of

00:06:38,720 --> 00:06:42,479
generating these binaries and throwing

00:06:40,479 --> 00:06:44,160
that on vms

00:06:42,479 --> 00:06:46,080
you can now create containers and

00:06:44,160 --> 00:06:48,880
generate containers out of

00:06:46,080 --> 00:06:51,440
your source essentially and deploy them

00:06:48,880 --> 00:06:53,759
to container runtimes instead of

00:06:51,440 --> 00:06:56,240
you know going the create a binary

00:06:53,759 --> 00:06:59,919
through it on a vm route so

00:06:56,240 --> 00:07:02,960
when docker started to become popular um

00:06:59,919 --> 00:07:05,599
all of the ci cd tools you know

00:07:02,960 --> 00:07:06,319
sort of evolved into saying hey we need

00:07:05,599 --> 00:07:08,560
to

00:07:06,319 --> 00:07:09,919
have support for docker and we need to

00:07:08,560 --> 00:07:11,919
do docker support

00:07:09,919 --> 00:07:14,639
and docker became like a first class

00:07:11,919 --> 00:07:17,520
citizen in all of these

00:07:14,639 --> 00:07:18,960
ci cd tools that were that were being

00:07:17,520 --> 00:07:23,199
made

00:07:18,960 --> 00:07:24,240
then with kubernetes coming into the

00:07:23,199 --> 00:07:28,800
picture

00:07:24,240 --> 00:07:30,720
um all of the ci cd tools are now

00:07:28,800 --> 00:07:32,639
i wouldn't say pivoting but all of the

00:07:30,720 --> 00:07:35,000
cicd tools are becoming

00:07:32,639 --> 00:07:36,160
cloud-native and going the

00:07:35,000 --> 00:07:39,199
kubernetes-ish

00:07:36,160 --> 00:07:42,479
way so deployments have to

00:07:39,199 --> 00:07:44,639
deploy i mean immutable artifacts can

00:07:42,479 --> 00:07:46,960
still remain containers but instead of

00:07:44,639 --> 00:07:48,400
being deployed directly to a container

00:07:46,960 --> 00:07:50,479
runtime somewhere

00:07:48,400 --> 00:07:51,759
they are being deployed to the container

00:07:50,479 --> 00:07:56,639
runtime within

00:07:51,759 --> 00:07:56,639
the kubernetes environment itself

00:07:56,840 --> 00:08:01,440
so

00:07:58,639 --> 00:08:03,039
deploying these containers can take two

00:08:01,440 --> 00:08:06,400
forms

00:08:03,039 --> 00:08:07,759
you can generate containers and deploy

00:08:06,400 --> 00:08:11,280
the containers directly

00:08:07,759 --> 00:08:14,800
from the vm on which you build them or

00:08:11,280 --> 00:08:16,639
you could take these containers

00:08:14,800 --> 00:08:18,319
throw them onto like a container

00:08:16,639 --> 00:08:21,120
registry somewhere

00:08:18,319 --> 00:08:22,240
and then have the deployment happen from

00:08:21,120 --> 00:08:26,000
that container

00:08:22,240 --> 00:08:28,800
register irrespective of what you do the

00:08:26,000 --> 00:08:30,400
fundamental pieces are you have source

00:08:28,800 --> 00:08:33,919
code

00:08:30,400 --> 00:08:36,640
you have your container build

00:08:33,919 --> 00:08:37,919
system somewhere and then you have your

00:08:36,640 --> 00:08:39,599
container runtime

00:08:37,919 --> 00:08:42,399
that is running remotely operating

00:08:39,599 --> 00:08:45,039
remotely to which these containers will

00:08:42,399 --> 00:08:45,039
get pushed

00:08:46,000 --> 00:08:52,640
so the

00:08:49,279 --> 00:08:55,760
the evolution that has happened so far

00:08:52,640 --> 00:08:59,519
has simplified a few things but have

00:08:55,760 --> 00:09:02,480
made a few things more complex

00:08:59,519 --> 00:09:04,160
the whole stream today has one

00:09:02,480 --> 00:09:07,519
fundamental goal

00:09:04,160 --> 00:09:09,920
which is how can you

00:09:07,519 --> 00:09:11,920
allow developers and software

00:09:09,920 --> 00:09:14,000
engineering teams now these can be

00:09:11,920 --> 00:09:16,080
small teams in a startup this could be

00:09:14,000 --> 00:09:20,240
enterprise grade teams that like

00:09:16,080 --> 00:09:21,920
fortune 500 150 what have you

00:09:20,240 --> 00:09:23,920
enterprise grade teams that are

00:09:21,920 --> 00:09:27,040
operating on like

00:09:23,920 --> 00:09:28,320
a massive software footprint it doesn't

00:09:27,040 --> 00:09:30,480
matter

00:09:28,320 --> 00:09:32,800
what matters is you get the

00:09:30,480 --> 00:09:35,200
sophistication of being able to deploy

00:09:32,800 --> 00:09:37,360
to kubernetes

00:09:35,200 --> 00:09:38,640
but you enable that sophistication

00:09:37,360 --> 00:09:40,800
without having to

00:09:38,640 --> 00:09:42,800
jump through the hoops of okay maintain

00:09:40,800 --> 00:09:45,519
yaml files and

00:09:42,800 --> 00:09:48,720
have all of these um complicated

00:09:45,519 --> 00:09:51,760
container registries somewhere and

00:09:48,720 --> 00:09:52,959
you know do your entire deployment

00:09:51,760 --> 00:09:55,440
pipeline also in

00:09:52,959 --> 00:09:57,040
ml write docker files and maintain those

00:09:55,440 --> 00:09:59,120
somewhere and make sure that

00:09:57,040 --> 00:10:00,880
all of these follow security and

00:09:59,120 --> 00:10:03,279
compliance and all of these best

00:10:00,880 --> 00:10:07,200
practices so

00:10:03,279 --> 00:10:10,800
the the answer to

00:10:07,200 --> 00:10:13,040
how can i have modern

00:10:10,800 --> 00:10:14,560
infrastructure and modern practices to

00:10:13,040 --> 00:10:17,440
operate my software

00:10:14,560 --> 00:10:18,640
along with having a simplified means to

00:10:17,440 --> 00:10:21,600
do that kind of

00:10:18,640 --> 00:10:23,120
development and deployment is is what we

00:10:21,600 --> 00:10:26,399
are going to provide during the

00:10:23,120 --> 00:10:28,640
course of this stream obviously there is

00:10:26,399 --> 00:10:32,399
a cloud foundry component involved

00:10:28,640 --> 00:10:35,440
no surprises of course of course

00:10:32,399 --> 00:10:36,000
but but any questions so far hopefully

00:10:35,440 --> 00:10:38,800
that was

00:10:36,000 --> 00:10:40,720
um that was clear so for those watching

00:10:38,800 --> 00:10:41,440
if you have any questions just feel free

00:10:40,720 --> 00:10:44,399
to

00:10:41,440 --> 00:10:45,519
uh drop a word or two in the youtube

00:10:44,399 --> 00:10:49,519
stream or

00:10:45,519 --> 00:10:51,200
just tag at cloud foundry on twitter

00:10:49,519 --> 00:10:52,959
um and just you know throw your

00:10:51,200 --> 00:10:53,440
questions in there i'm more than happy

00:10:52,959 --> 00:10:57,760
to

00:10:53,440 --> 00:11:00,880
uh pick up on those and answer them

00:10:57,760 --> 00:11:02,720
yeah so um uh yeah so

00:11:00,880 --> 00:11:05,040
cicc did like a really really um

00:11:02,720 --> 00:11:06,880
interesting topic um worldwide i mean it

00:11:05,040 --> 00:11:09,279
helps um monitors

00:11:06,880 --> 00:11:10,640
for it basically increases the quality

00:11:09,279 --> 00:11:13,519
of software development

00:11:10,640 --> 00:11:15,279
teams it increases the delivery and um

00:11:13,519 --> 00:11:18,240
also the content the integration of

00:11:15,279 --> 00:11:19,440
this various software um one the most

00:11:18,240 --> 00:11:22,880
interesting part of this

00:11:19,440 --> 00:11:25,440
is that there's the cd foundation so

00:11:22,880 --> 00:11:27,040
um the cd foundation is the it's a

00:11:25,440 --> 00:11:29,040
project it's a foundation under the

00:11:27,040 --> 00:11:32,640
linux foundation i'm not mistaken that's

00:11:29,040 --> 00:11:35,040
handles everything ci cd so um

00:11:32,640 --> 00:11:36,079
you can found find them on cd those

00:11:35,040 --> 00:11:39,440
foundation if you're not

00:11:36,079 --> 00:11:42,320
wrong right yeah the website

00:11:39,440 --> 00:11:43,360
is yeah yeah i see the validation is the

00:11:42,320 --> 00:11:44,880
um it's a

00:11:43,360 --> 00:11:46,640
foundation under the linux foundation

00:11:44,880 --> 00:11:49,920
that handles most things called

00:11:46,640 --> 00:11:51,279
um ci cd um continuous delivery and

00:11:49,920 --> 00:11:53,279
continuous integration

00:11:51,279 --> 00:11:55,360
um etc so if you're really really big on

00:11:53,279 --> 00:11:56,800
open source on ci cd you should check

00:11:55,360 --> 00:11:59,120
out the cd foundation

00:11:56,800 --> 00:12:00,000
um it's it's um really really um there's

00:11:59,120 --> 00:12:01,519
a lot of like

00:12:00,000 --> 00:12:03,519
interesting projects on that the city

00:12:01,519 --> 00:12:05,440
foundation now um

00:12:03,519 --> 00:12:07,200
so we're just going to go into the demos

00:12:05,440 --> 00:12:08,320
real quick i mean not to waste anybody's

00:12:07,200 --> 00:12:10,320
time

00:12:08,320 --> 00:12:12,079
we don't want to take too much time so

00:12:10,320 --> 00:12:15,200
i'll go first i'm going to show you

00:12:12,079 --> 00:12:17,440
how you can write a simple um

00:12:15,200 --> 00:12:19,120
travis config that can basically deploy

00:12:17,440 --> 00:12:20,720
your application whenever you need it

00:12:19,120 --> 00:12:23,519
whenever you make a push to your

00:12:20,720 --> 00:12:25,040
um github repo uh or your beast bucket

00:12:23,519 --> 00:12:27,839
repo but for the purposes of this

00:12:25,040 --> 00:12:28,720
tutorial i'll be using on github um so i

00:12:27,839 --> 00:12:31,839
have a project

00:12:28,720 --> 00:12:33,120
hosted on github that i would want to be

00:12:31,839 --> 00:12:36,240
it to be deployed

00:12:33,120 --> 00:12:39,360
whenever i push to the master branch

00:12:36,240 --> 00:12:42,079
um so basically i have a

00:12:39,360 --> 00:12:43,519
cfo case um cfo kids that's cloud funny

00:12:42,079 --> 00:12:45,600
for kubernetes um

00:12:43,519 --> 00:12:46,959
cluster or instance running on the

00:12:45,600 --> 00:12:49,440
google kubernetes engine

00:12:46,959 --> 00:12:50,320
cluster on google cloud so i have that

00:12:49,440 --> 00:12:53,200
set up already

00:12:50,320 --> 00:12:55,279
let me show let me share my screen real

00:12:53,200 --> 00:12:59,440
quick

00:12:55,279 --> 00:13:02,079
so just increase my

00:12:59,440 --> 00:13:03,760
okay so as you can see i have this

00:13:02,079 --> 00:13:08,079
cluster running on

00:13:03,760 --> 00:13:10,480
um google cloud and um if i should do

00:13:08,079 --> 00:13:12,560
so i currently have this um cm cloud

00:13:10,480 --> 00:13:14,000
foundry cli so with this way i would be

00:13:12,560 --> 00:13:14,639
able to interact all my classroom

00:13:14,000 --> 00:13:17,120
instances

00:13:14,639 --> 00:13:18,959
and do anything cloud funny related so

00:13:17,120 --> 00:13:20,639
when i do cf login

00:13:18,959 --> 00:13:23,600
so this basically brings out the api

00:13:20,639 --> 00:13:26,720
endpoint that i'm connected to

00:13:23,600 --> 00:13:29,200
and um because this is um a

00:13:26,720 --> 00:13:30,480
just an ip it's basically an ip address

00:13:29,200 --> 00:13:33,279
it's not secure

00:13:30,480 --> 00:13:34,880
so um we're using it just because of um

00:13:33,279 --> 00:13:37,360
demonstration demo purposes

00:13:34,880 --> 00:13:38,160
please do not use an insecure iep in

00:13:37,360 --> 00:13:40,959
production

00:13:38,160 --> 00:13:41,440
thank you so i mean it's more about

00:13:40,959 --> 00:13:44,480
adding

00:13:41,440 --> 00:13:47,279
ssl certificate so we don't

00:13:44,480 --> 00:13:48,560
add one to our demo clusters but

00:13:47,279 --> 00:13:50,399
obviously when

00:13:48,560 --> 00:13:51,760
if you intend to use this in production

00:13:50,399 --> 00:13:54,880
and when you do uh

00:13:51,760 --> 00:13:58,160
by all means you will be using ssl certs

00:13:54,880 --> 00:14:00,160
um so that's a that's a non issue

00:13:58,160 --> 00:14:02,240
yeah so i'm just going to log into my

00:14:00,160 --> 00:14:04,000
organization and also my space

00:14:02,240 --> 00:14:05,839
as you can see we have to space the

00:14:04,000 --> 00:14:06,639
space for ram and there's a space for

00:14:05,839 --> 00:14:09,199
myself

00:14:06,639 --> 00:14:10,480
and it could be anything from dev to

00:14:09,199 --> 00:14:11,839
staging to production

00:14:10,480 --> 00:14:13,360
basically where you host your

00:14:11,839 --> 00:14:14,240
applications the various applications

00:14:13,360 --> 00:14:17,120
generally

00:14:14,240 --> 00:14:18,560
so i'm just going to like move into mine

00:14:17,120 --> 00:14:20,399
so i'm logging already

00:14:18,560 --> 00:14:22,000
currently i'm logged in already as you

00:14:20,399 --> 00:14:23,120
can see i'm going to this particular api

00:14:22,000 --> 00:14:25,600
endpoint where

00:14:23,120 --> 00:14:26,480
um my cloud foundry instance is running

00:14:25,600 --> 00:14:28,399
now

00:14:26,480 --> 00:14:30,560
this this is like the interesting part

00:14:28,399 --> 00:14:32,639
this is like just the basic

00:14:30,560 --> 00:14:34,000
cloud format generally how to use the um

00:14:32,639 --> 00:14:35,839
cloud from the cli

00:14:34,000 --> 00:14:37,440
now i'm just going to share my screen

00:14:35,839 --> 00:14:39,680
real quick exchange okay

00:14:37,440 --> 00:14:41,360
so this is my chrome tab and i have um

00:14:39,680 --> 00:14:43,040
my project this particular project

00:14:41,360 --> 00:14:46,240
hosted on github

00:14:43,040 --> 00:14:47,519
and um it's basically um an

00:14:46,240 --> 00:14:48,880
exchange-rated single app and

00:14:47,519 --> 00:14:49,760
single-page application be it finding

00:14:48,880 --> 00:14:52,880
that javascript and

00:14:49,760 --> 00:14:54,480
node.js and um i got it from a tutorial

00:14:52,880 --> 00:14:58,160
online by

00:14:54,480 --> 00:14:58,720
michael so basically this is south side

00:14:58,160 --> 00:15:02,160
pawns or

00:14:58,720 --> 00:15:04,480
auto so i was taking um a

00:15:02,160 --> 00:15:06,079
tutorial from him and i learned i built

00:15:04,480 --> 00:15:09,600
it from tutorial

00:15:06,079 --> 00:15:12,399
so um first things first is

00:15:09,600 --> 00:15:13,279
you have to authenticate your github

00:15:12,399 --> 00:15:16,959
account with

00:15:13,279 --> 00:15:18,560
travis so i currently have travis

00:15:16,959 --> 00:15:21,760
already or dedicated

00:15:18,560 --> 00:15:24,480
with my github account but i would i

00:15:21,760 --> 00:15:26,639
would it's a very simple process all you

00:15:24,480 --> 00:15:29,680
just have to do is go to travisci.com

00:15:26,639 --> 00:15:30,399
come click on login and boom you'll be

00:15:29,680 --> 00:15:33,759
showed

00:15:30,399 --> 00:15:35,360
this so this is the dashboard

00:15:33,759 --> 00:15:36,639
so this is the dashboard basically it

00:15:35,360 --> 00:15:38,480
shows all your applications that are

00:15:36,639 --> 00:15:42,240
currently connected to travis

00:15:38,480 --> 00:15:43,360
and um on how you can and just basically

00:15:42,240 --> 00:15:45,759
choose it so

00:15:43,360 --> 00:15:47,040
how to connect your you can always find

00:15:45,759 --> 00:15:48,320
how to connect your github

00:15:47,040 --> 00:15:49,759
particular bit of breadboard that you

00:15:48,320 --> 00:15:50,880
need to travel you stick on this finding

00:15:49,759 --> 00:15:53,120
on the grid and

00:15:50,880 --> 00:15:54,240
craft travis documentation so it's a

00:15:53,120 --> 00:15:57,040
really really easy

00:15:54,240 --> 00:15:58,800
um thing to do so i already have this

00:15:57,040 --> 00:16:01,519
particular project connected with

00:15:58,800 --> 00:16:03,680
um travis and it's the last test that

00:16:01,519 --> 00:16:05,120
the last um push i made was successful

00:16:03,680 --> 00:16:08,320
that successfully passed

00:16:05,120 --> 00:16:10,480
so when we go into it we would see that

00:16:08,320 --> 00:16:11,839
of course we have our application

00:16:10,480 --> 00:16:14,560
already deployed

00:16:11,839 --> 00:16:16,480
to cloud foundry now how does this work

00:16:14,560 --> 00:16:19,959
so

00:16:16,480 --> 00:16:21,600
how this works generally is a simple

00:16:19,959 --> 00:16:23,360
travis.travis.yml file

00:16:21,600 --> 00:16:24,639
so i'm going to run you to run it

00:16:23,360 --> 00:16:28,240
through quick

00:16:24,639 --> 00:16:31,360
just to show how it works so now

00:16:28,240 --> 00:16:32,000
um language generic here this particular

00:16:31,360 --> 00:16:33,680
portion is

00:16:32,000 --> 00:16:36,480
we are basically telling travis that

00:16:33,680 --> 00:16:38,560
okay we do not we do not want any

00:16:36,480 --> 00:16:39,680
language specific processes to run

00:16:38,560 --> 00:16:42,320
whenever we

00:16:39,680 --> 00:16:43,360
um make a push to travis so we do not

00:16:42,320 --> 00:16:45,279
want it to run

00:16:43,360 --> 00:16:46,399
a test specific language test we don't

00:16:45,279 --> 00:16:48,160
want it to do

00:16:46,399 --> 00:16:50,079
any any process generator has been

00:16:48,160 --> 00:16:50,880
defined for specific languages we just

00:16:50,079 --> 00:16:54,000
wanted to

00:16:50,880 --> 00:16:57,120
basically deploy application to um

00:16:54,000 --> 00:16:58,880
to cloud foundry now if if you have

00:16:57,120 --> 00:17:00,639
a bunch of tests that you need to run i

00:16:58,880 --> 00:17:01,120
mean you can always just put the name of

00:17:00,639 --> 00:17:03,199
the

00:17:01,120 --> 00:17:04,400
language could be node.js could be go

00:17:03,199 --> 00:17:07,199
put the arms um

00:17:04,400 --> 00:17:08,240
test script for it to be um able to

00:17:07,199 --> 00:17:10,480
detect the text

00:17:08,240 --> 00:17:11,360
test and continue to your deployments

00:17:10,480 --> 00:17:13,439
basically so

00:17:11,360 --> 00:17:15,760
i do not have any test running so i just

00:17:13,439 --> 00:17:18,959
decided to put generic and it deploys

00:17:15,760 --> 00:17:20,640
now before deploy is basically a script

00:17:18,959 --> 00:17:22,559
or anything that would run before the

00:17:20,640 --> 00:17:24,559
actual deployment started now

00:17:22,559 --> 00:17:26,559
um cloud and cloud foundry is the first

00:17:24,559 --> 00:17:27,360
class this isn't on travis ci deployment

00:17:26,559 --> 00:17:29,120
options

00:17:27,360 --> 00:17:30,880
first class is in the sense that it's um

00:17:29,120 --> 00:17:32,400
active support for cloud foundry so you

00:17:30,880 --> 00:17:33,360
can easily deploy your applications to

00:17:32,400 --> 00:17:36,799
cloud foundry

00:17:33,360 --> 00:17:38,880
on um travis without going to any hacky

00:17:36,799 --> 00:17:39,280
forum fees or doing anything just this

00:17:38,880 --> 00:17:41,039
line

00:17:39,280 --> 00:17:42,400
starting lines actually can deploy your

00:17:41,039 --> 00:17:44,160
application to cloud country

00:17:42,400 --> 00:17:45,600
now the next is to write the deploy

00:17:44,160 --> 00:17:47,679
script basically

00:17:45,600 --> 00:17:49,360
just specified deploy provider cloud

00:17:47,679 --> 00:17:50,880
foundry so they have various providers

00:17:49,360 --> 00:17:53,679
ranging from aws

00:17:50,880 --> 00:17:54,720
to digital illusion to ibm bluemix etc

00:17:53,679 --> 00:17:58,080
they have various

00:17:54,720 --> 00:17:59,679
um providers you can check the official

00:17:58,080 --> 00:18:01,679
travis documentation to see the amount

00:17:59,679 --> 00:18:05,440
of providers that they have

00:18:01,679 --> 00:18:06,240
and so um edge true i placed edge to

00:18:05,440 --> 00:18:09,200
here because

00:18:06,240 --> 00:18:11,360
the version of the um dpl so dpl is the

00:18:09,200 --> 00:18:14,559
tool that travis uses to deploy

00:18:11,360 --> 00:18:15,520
um applications generally to various um

00:18:14,559 --> 00:18:17,919
providers

00:18:15,520 --> 00:18:18,960
so the when you specify h2 you have

00:18:17,919 --> 00:18:22,000
you're opting

00:18:18,960 --> 00:18:25,679
into the version two of

00:18:22,000 --> 00:18:27,120
the latest version of a of um dpl which

00:18:25,679 --> 00:18:29,039
is only very important because

00:18:27,120 --> 00:18:30,720
um it seems like fashion one has a bunch

00:18:29,039 --> 00:18:32,480
of bugs that have been yet to fix so

00:18:30,720 --> 00:18:33,760
they are adverse to opting to the second

00:18:32,480 --> 00:18:36,240
version now

00:18:33,760 --> 00:18:37,760
um username of course is the cloud

00:18:36,240 --> 00:18:39,679
foundry closed um

00:18:37,760 --> 00:18:41,280
um instance using the one i specified

00:18:39,679 --> 00:18:42,000
when i was logging into my terminal the

00:18:41,280 --> 00:18:44,080
other time

00:18:42,000 --> 00:18:45,120
so admin then the password of course

00:18:44,080 --> 00:18:48,000
password has to be

00:18:45,120 --> 00:18:49,039
encrypted you cannot um just leave

00:18:48,000 --> 00:18:51,760
passwords that are

00:18:49,039 --> 00:18:52,720
lying around in your um profile so uh

00:18:51,760 --> 00:18:55,200
password is

00:18:52,720 --> 00:18:57,200
um basically an environmental variable

00:18:55,200 --> 00:18:59,039
that i set in travis i would show

00:18:57,200 --> 00:19:01,200
you how success environmental variables

00:18:59,039 --> 00:19:03,919
um in travis going forward

00:19:01,200 --> 00:19:05,520
um so password is cf password and the

00:19:03,919 --> 00:19:07,280
api is the api

00:19:05,520 --> 00:19:09,760
endpoint that i'm supposed to connect to

00:19:07,280 --> 00:19:12,880
like ram said we don't use ssl

00:19:09,760 --> 00:19:16,000
in our mm api endpoint so we just use

00:19:12,880 --> 00:19:18,240
the flag that's skip ssd validation

00:19:16,000 --> 00:19:20,240
so um cloud foundry can easily recognize

00:19:18,240 --> 00:19:22,960
that okay we do not need to verify

00:19:20,240 --> 00:19:23,760
check this particular api endpoint for

00:19:22,960 --> 00:19:25,840
ssl

00:19:23,760 --> 00:19:28,000
now the organization is sample logged in

00:19:25,840 --> 00:19:30,400
space is shadrack

00:19:28,000 --> 00:19:31,200
the last thing to do the last thing to

00:19:30,400 --> 00:19:34,799
do which is

00:19:31,200 --> 00:19:38,160
um specify the app name is um

00:19:34,799 --> 00:19:40,080
um is to support is to basically

00:19:38,160 --> 00:19:42,720
um specify the name of the app the app

00:19:40,080 --> 00:19:45,120
the basically the name that

00:19:42,720 --> 00:19:46,960
um cloudfund you will basically name

00:19:45,120 --> 00:19:49,600
your application are deployed to it

00:19:46,960 --> 00:19:50,640
um classroom you also generate a route

00:19:49,600 --> 00:19:53,200
for you

00:19:50,640 --> 00:19:54,400
if you have um it's the limited route

00:19:53,200 --> 00:19:56,000
for you where you can locate your

00:19:54,400 --> 00:19:59,200
application deployed

00:19:56,000 --> 00:20:00,720
based on the name of the um application

00:19:59,200 --> 00:20:03,120
so or you can also have if you're

00:20:00,720 --> 00:20:04,880
interested if you want to do um

00:20:03,120 --> 00:20:06,559
random routes so you need to generate a

00:20:04,880 --> 00:20:08,000
random route any time that you make it

00:20:06,559 --> 00:20:10,720
deploy there's also a flag

00:20:08,000 --> 00:20:12,240
called random just adding a flag that's

00:20:10,720 --> 00:20:14,640
random route i need to generate

00:20:12,240 --> 00:20:15,520
it to always give you random routes all

00:20:14,640 --> 00:20:17,360
the time

00:20:15,520 --> 00:20:19,280
now this after deploy is basically a

00:20:17,360 --> 00:20:20,640
script that would run after deploy and i

00:20:19,280 --> 00:20:23,200
wanted to check

00:20:20,640 --> 00:20:25,280
um cf apps physically to see all the

00:20:23,200 --> 00:20:28,480
apps running on my cloud foundry poster

00:20:25,280 --> 00:20:30,880
now the way we can see if this works

00:20:28,480 --> 00:20:32,080
is to trigger a build now there are two

00:20:30,880 --> 00:20:34,640
ways i can trigger a view

00:20:32,080 --> 00:20:35,679
one is by sending by pushing to the repo

00:20:34,640 --> 00:20:38,960
to the um

00:20:35,679 --> 00:20:41,840
to the um to the um

00:20:38,960 --> 00:20:43,440
to the repo basically or i trigger a

00:20:41,840 --> 00:20:44,799
beautiful there's a custom built feature

00:20:43,440 --> 00:20:47,440
a new feature that's still in

00:20:44,799 --> 00:20:48,559
beta on travis dashboard that can easily

00:20:47,440 --> 00:20:50,159
trigger a bit but

00:20:48,559 --> 00:20:52,240
i would not do use that i would just

00:20:50,159 --> 00:20:54,320
basically make a simple change to some

00:20:52,240 --> 00:20:57,860
part of the application and see

00:20:54,320 --> 00:21:00,480
um okay let's see um

00:20:57,860 --> 00:21:02,159
[Music]

00:21:00,480 --> 00:21:03,840
so let's check the sabotages and see if

00:21:02,159 --> 00:21:06,960
there's anything that we can change

00:21:03,840 --> 00:21:09,360
and just make a quick

00:21:06,960 --> 00:21:09,360
edit

00:21:12,240 --> 00:21:19,840
so let's see provides

00:21:16,720 --> 00:21:23,200
node access to the node modules folder

00:21:19,840 --> 00:21:25,280
so if i clicks on commit changes

00:21:23,200 --> 00:21:26,400
when i click on commissions this should

00:21:25,280 --> 00:21:30,320
trigger a build

00:21:26,400 --> 00:21:32,960
instantly so it takes a wh um a few

00:21:30,320 --> 00:21:34,400
moments as you can see builder started

00:21:32,960 --> 00:21:37,280
so now look at this

00:21:34,400 --> 00:21:38,799
so when i click on this i have both um

00:21:37,280 --> 00:21:42,240
travis and cycle ci

00:21:38,799 --> 00:21:44,400
running on this app um um on this

00:21:42,240 --> 00:21:45,760
repo so i would show this i could see

00:21:44,400 --> 00:21:49,679
ipad later on

00:21:45,760 --> 00:21:52,720
so if i should click on details here

00:21:49,679 --> 00:21:53,200
it should show that on um github actions

00:21:52,720 --> 00:21:55,840
you should

00:21:53,200 --> 00:21:56,720
okay we have a travis um instance

00:21:55,840 --> 00:21:59,039
running on the

00:21:56,720 --> 00:22:01,039
um the configuration has started now if

00:21:59,039 --> 00:22:02,799
i go here to the travis dashboard

00:22:01,039 --> 00:22:05,520
as you can see the update that we've

00:22:02,799 --> 00:22:07,520
made it dude has been triggered and

00:22:05,520 --> 00:22:09,440
it's going to start on the whole build

00:22:07,520 --> 00:22:11,600
process

00:22:09,440 --> 00:22:12,640
it takes a very few seconds a few

00:22:11,600 --> 00:22:15,760
seconds to start

00:22:12,640 --> 00:22:19,280
so we're going to wait for it to build

00:22:15,760 --> 00:22:21,039
so as you can see the um the cf password

00:22:19,280 --> 00:22:24,480
we created as the

00:22:21,039 --> 00:22:25,520
amv file we created um the amv file we

00:22:24,480 --> 00:22:28,240
created generally

00:22:25,520 --> 00:22:29,760
is um exported into the environment so

00:22:28,240 --> 00:22:31,600
it can recognize it so

00:22:29,760 --> 00:22:32,880
while this is deploying i would come

00:22:31,600 --> 00:22:33,600
back to explain the whole deployment

00:22:32,880 --> 00:22:36,640
process

00:22:33,600 --> 00:22:40,799
i would really quickly show you um

00:22:36,640 --> 00:22:43,840
how the sets in amv files so you go to

00:22:40,799 --> 00:22:46,000
more options go to settings

00:22:43,840 --> 00:22:48,159
it takes you to the settings then you

00:22:46,000 --> 00:22:49,840
can see environmental variables here

00:22:48,159 --> 00:22:51,120
so it's a very very simple thing to do

00:22:49,840 --> 00:22:52,000
just go to settings you can send our

00:22:51,120 --> 00:22:54,000
meta variables

00:22:52,000 --> 00:22:55,440
safe password and this is the password

00:22:54,000 --> 00:22:57,679
and if you want to add new

00:22:55,440 --> 00:22:58,640
amv you can just come here right to the

00:22:57,679 --> 00:23:01,760
amv

00:22:58,640 --> 00:23:04,559
and click on add basically so that's how

00:23:01,760 --> 00:23:06,880
to set an emp file if you need to hide

00:23:04,559 --> 00:23:08,480
setting secrets now the deployment

00:23:06,880 --> 00:23:10,080
process is starting based on how we've

00:23:08,480 --> 00:23:13,120
specified this nice um

00:23:10,080 --> 00:23:15,919
env file so what's um

00:23:13,120 --> 00:23:17,760
travis does first is to do the install

00:23:15,919 --> 00:23:20,080
ruby and also install dpl

00:23:17,760 --> 00:23:22,000
so dpl is basically like i said is the

00:23:20,080 --> 00:23:23,600
um software that bit handles deployments

00:23:22,000 --> 00:23:24,240
to various cloud providers that has been

00:23:23,600 --> 00:23:27,600
built by

00:23:24,240 --> 00:23:29,600
travis now the next thing here is to

00:23:27,600 --> 00:23:30,960
install the deployment dependencies to

00:23:29,600 --> 00:23:34,320
install cloud foundry

00:23:30,960 --> 00:23:36,320
basically and also install the version 7

00:23:34,320 --> 00:23:38,799
of cloud foundry so we can have the test

00:23:36,320 --> 00:23:42,000
on most of the updates to cloud foundry

00:23:38,799 --> 00:23:43,760
the next thing to do here is to

00:23:42,000 --> 00:23:45,760
authenticate deployment based on the

00:23:43,760 --> 00:23:46,480
password and the api that we've said

00:23:45,760 --> 00:23:49,039
just like i did

00:23:46,480 --> 00:23:50,000
on my timing now and um next stop is to

00:23:49,039 --> 00:23:51,360
set up the deployment

00:23:50,000 --> 00:23:52,720
basically setting up a building

00:23:51,360 --> 00:23:54,320
environment for the deployment to a

00:23:52,720 --> 00:23:56,159
cloud foundry environment

00:23:54,320 --> 00:23:57,919
now the next thing is also to validate

00:23:56,159 --> 00:23:59,760
the deployment to see that okay

00:23:57,919 --> 00:24:01,360
this and this deployment is ready to go

00:23:59,760 --> 00:24:01,840
there are no single errors and is ready

00:24:01,360 --> 00:24:03,760
to go

00:24:01,840 --> 00:24:06,400
and the next thing next stop is to

00:24:03,760 --> 00:24:09,600
prepare the deployment

00:24:06,400 --> 00:24:11,120
ready and also after that is to run the

00:24:09,600 --> 00:24:13,120
application too so

00:24:11,120 --> 00:24:14,960
the way cloud function does um

00:24:13,120 --> 00:24:17,360
deployments is just a simple command

00:24:14,960 --> 00:24:19,520
cf push and the name of the application

00:24:17,360 --> 00:24:22,480
that we specified in the yaml file

00:24:19,520 --> 00:24:24,480
so just a single cmcf push would

00:24:22,480 --> 00:24:27,039
basically take your app from

00:24:24,480 --> 00:24:29,440
your local text your local machine from

00:24:27,039 --> 00:24:31,120
your github repo etc wherever it is

00:24:29,440 --> 00:24:32,880
and push it to your cloud foundry

00:24:31,120 --> 00:24:35,520
instance running on whatever

00:24:32,880 --> 00:24:36,480
um cluster um infrastructure that you're

00:24:35,520 --> 00:24:38,640
using

00:24:36,480 --> 00:24:40,159
so um it basically pushes the app it

00:24:38,640 --> 00:24:42,400
starts pushing the application

00:24:40,159 --> 00:24:44,640
packages it opposes its up um or plus

00:24:42,400 --> 00:24:48,000
defined via the cloud foundry api

00:24:44,640 --> 00:24:48,400
then debut process begins now if you can

00:24:48,000 --> 00:24:49,840
see

00:24:48,400 --> 00:24:51,520
there are also more environmental

00:24:49,840 --> 00:24:53,600
variables that are specified like

00:24:51,520 --> 00:24:55,919
the api key converter api so these are

00:24:53,600 --> 00:24:57,840
basically the app specific apm

00:24:55,919 --> 00:24:59,919
emv files that i've set for the

00:24:57,840 --> 00:25:03,200
application

00:24:59,919 --> 00:25:04,880
now um next thing to do it to do is

00:25:03,200 --> 00:25:06,559
begin to push the app so it will

00:25:04,880 --> 00:25:08,400
basically recognize

00:25:06,559 --> 00:25:10,400
automatically recognize the language

00:25:08,400 --> 00:25:11,919
that would build with the application

00:25:10,400 --> 00:25:13,600
and begin to use what you call

00:25:11,919 --> 00:25:14,159
buildbacks ram will talk more about

00:25:13,600 --> 00:25:16,000
buildbacks

00:25:14,159 --> 00:25:17,200
during the amazing prime is a good pack

00:25:16,000 --> 00:25:18,960
expert um

00:25:17,200 --> 00:25:20,640
it's not really my 40 ram is the

00:25:18,960 --> 00:25:22,240
buildback expert so i'm going to talk

00:25:20,640 --> 00:25:24,080
more about build packs they basically

00:25:22,240 --> 00:25:25,440
provide an application a runtime

00:25:24,080 --> 00:25:28,480
environment for your application

00:25:25,440 --> 00:25:30,159
based on whatever language so um

00:25:28,480 --> 00:25:31,279
we use on the packet of boot packs so

00:25:30,159 --> 00:25:32,960
the cloud funding for kubernetes

00:25:31,279 --> 00:25:33,520
projects use on the pack attribute back

00:25:32,960 --> 00:25:37,440
to

00:25:33,520 --> 00:25:39,760
undo um um all build pack related um

00:25:37,440 --> 00:25:40,559
issues so uh the package of the pack is

00:25:39,760 --> 00:25:42,799
also especially

00:25:40,559 --> 00:25:44,320
it is based on this from cloud native

00:25:42,799 --> 00:25:46,880
buildback specification

00:25:44,320 --> 00:25:48,720
um so if the build pack has

00:25:46,880 --> 00:25:49,679
automatically recognized okay this is a

00:25:48,720 --> 00:25:52,400
node project

00:25:49,679 --> 00:25:52,960
so it begins to run creates a node

00:25:52,400 --> 00:25:55,039
engine

00:25:52,960 --> 00:25:56,000
starts npm install npm starts to make

00:25:55,039 --> 00:25:58,960
sure that the application is

00:25:56,000 --> 00:26:01,440
running then um goes through the whole

00:25:58,960 --> 00:26:02,799
mpm deployment process so npm starts npm

00:26:01,440 --> 00:26:05,440
install npm ci

00:26:02,799 --> 00:26:07,440
etc and also starts the application with

00:26:05,440 --> 00:26:10,159
server.js i mean we all start a new

00:26:07,440 --> 00:26:11,120
app with server.js here so as you can

00:26:10,159 --> 00:26:13,679
see here

00:26:11,120 --> 00:26:15,600
web no judge node server.js so this

00:26:13,679 --> 00:26:19,440
basically starts the application

00:26:15,600 --> 00:26:20,880
then it's after that it basically starts

00:26:19,440 --> 00:26:22,559
the application and the app is like

00:26:20,880 --> 00:26:23,360
automatically deployed as you can see

00:26:22,559 --> 00:26:26,400
here

00:26:23,360 --> 00:26:29,039
your build exited with one zero done um

00:26:26,400 --> 00:26:29,600
you can see application requested states

00:26:29,039 --> 00:26:31,200
this

00:26:29,600 --> 00:26:32,799
just shows whether the aggregation field

00:26:31,200 --> 00:26:33,760
was started as you can see here it

00:26:32,799 --> 00:26:36,159
started

00:26:33,760 --> 00:26:38,080
so uh routes like i said is where we is

00:26:36,159 --> 00:26:39,760
a unique link where we can find our

00:26:38,080 --> 00:26:42,720
application deployed live

00:26:39,760 --> 00:26:44,400
and um here is basically showing us the

00:26:42,720 --> 00:26:46,640
cpu usage the memory

00:26:44,400 --> 00:26:49,520
digs and more details about it so if i

00:26:46,640 --> 00:26:49,520
should copy this

00:26:49,840 --> 00:26:53,840
i should copy this go into my browser

00:26:52,240 --> 00:26:56,480
and paste this

00:26:53,840 --> 00:26:56,480
and click on

00:26:57,679 --> 00:27:04,840
and so of course because there's no ssl

00:27:01,039 --> 00:27:07,840
from which um to an arrow so do not be

00:27:04,840 --> 00:27:07,840
alarmed

00:27:08,000 --> 00:27:11,360
so as you can see the application is

00:27:09,600 --> 00:27:14,159
deployed live so

00:27:11,360 --> 00:27:15,440
on on um on cloud foundry it is

00:27:14,159 --> 00:27:18,159
basically deployed live

00:27:15,440 --> 00:27:19,039
and um so whenever i make a change to my

00:27:18,159 --> 00:27:22,399
app

00:27:19,039 --> 00:27:23,760
it will automatically do the karate

00:27:22,399 --> 00:27:25,679
deployment process now

00:27:23,760 --> 00:27:27,279
you can also specify those ways you can

00:27:25,679 --> 00:27:30,080
also specify um

00:27:27,279 --> 00:27:30,399
which branch gets deployed or time so

00:27:30,080 --> 00:27:33,520
this

00:27:30,399 --> 00:27:35,600
you can see this particular um travis um

00:27:33,520 --> 00:27:37,039
this particular process should run only

00:27:35,600 --> 00:27:38,559
during when it's on the master branch

00:27:37,039 --> 00:27:39,679
when it pushes me to the master branch

00:27:38,559 --> 00:27:42,240
so you can specify

00:27:39,679 --> 00:27:42,880
um there's a travis um configuration for

00:27:42,240 --> 00:27:45,039
um

00:27:42,880 --> 00:27:46,559
the way for doing that and we're not

00:27:45,039 --> 00:27:48,720
going to do the details of that because

00:27:46,559 --> 00:27:50,159
that's travis really travis specific

00:27:48,720 --> 00:27:51,679
so there are ways of specifying okay

00:27:50,159 --> 00:27:52,559
this particular you should run only on

00:27:51,679 --> 00:27:55,039
master actually

00:27:52,559 --> 00:27:55,760
on john only on whatever branch you

00:27:55,039 --> 00:27:58,799
really want

00:27:55,760 --> 00:27:59,120
at all times so that's basically how you

00:27:58,799 --> 00:28:01,919
can

00:27:59,120 --> 00:28:03,200
install um you can use travis to deploy

00:28:01,919 --> 00:28:05,840
your applications

00:28:03,200 --> 00:28:08,080
at every single push or whenever you

00:28:05,840 --> 00:28:09,600
want to trigger a view to cloud foundry

00:28:08,080 --> 00:28:11,760
and now to make sure that this is

00:28:09,600 --> 00:28:14,080
actually working i would show you

00:28:11,760 --> 00:28:15,760
how to check that the app is really

00:28:14,080 --> 00:28:18,080
running on

00:28:15,760 --> 00:28:19,679
in the terminal so we don't use the

00:28:18,080 --> 00:28:21,200
timing how to do any deployment so just

00:28:19,679 --> 00:28:22,640
to be sure that okay

00:28:21,200 --> 00:28:24,320
this is deployed this is actually

00:28:22,640 --> 00:28:27,679
running our app is on cloud foundry

00:28:24,320 --> 00:28:32,960
if i run cf apps it should basically

00:28:27,679 --> 00:28:36,880
okay we're having some okay

00:28:32,960 --> 00:28:39,679
so this is specific this is actually in

00:28:36,880 --> 00:28:39,679
network error

00:28:42,840 --> 00:28:46,000
red

00:28:44,240 --> 00:28:49,039
so this is basically a network error

00:28:46,000 --> 00:28:53,360
that happens like once in a while

00:28:49,039 --> 00:28:56,080
and so hold on

00:28:53,360 --> 00:28:58,799
it's not a demo if something doesn't

00:28:56,080 --> 00:29:01,120
fail right

00:28:58,799 --> 00:29:02,960
i know right so this is basically a

00:29:01,120 --> 00:29:03,520
network error it has those things to do

00:29:02,960 --> 00:29:05,679
with

00:29:03,520 --> 00:29:06,960
um cf cloud or the whole deployment

00:29:05,679 --> 00:29:09,039
process our app deployed

00:29:06,960 --> 00:29:10,159
live and as you can see when we logged

00:29:09,039 --> 00:29:13,120
in it deployed

00:29:10,159 --> 00:29:15,440
live and it's working so this is

00:29:13,120 --> 00:29:19,279
actually a network error

00:29:15,440 --> 00:29:21,919
that i do not yeah you should

00:29:19,279 --> 00:29:23,919
just back off for a bit and then maybe

00:29:21,919 --> 00:29:26,320
if you try in a few minutes it will

00:29:23,919 --> 00:29:27,679
show you what's going on you can show

00:29:26,320 --> 00:29:30,960
the output of the cf

00:29:27,679 --> 00:29:34,480
apps command on the travis build

00:29:30,960 --> 00:29:35,600
post actions though oh travis just

00:29:34,480 --> 00:29:38,840
actually gives

00:29:35,600 --> 00:29:40,080
travis cannot recognize the command

00:29:38,840 --> 00:29:43,600
apparently

00:29:40,080 --> 00:29:45,760
that's it okay

00:29:43,600 --> 00:29:47,039
so your program saves so i think um

00:29:45,760 --> 00:29:49,919
whenever a push

00:29:47,039 --> 00:29:51,039
is made to travis after the whole

00:29:49,919 --> 00:29:54,159
deployment process

00:29:51,039 --> 00:29:56,559
it's charged 1200 gets deleted from the

00:29:54,159 --> 00:29:58,240
um get deleted from the cons from the

00:29:56,559 --> 00:30:00,960
environment yeah

00:29:58,240 --> 00:30:01,760
and the build is exited so you cannot

00:30:00,960 --> 00:30:04,559
run a

00:30:01,760 --> 00:30:06,000
after script that has to do with um an

00:30:04,559 --> 00:30:08,480
external provider

00:30:06,000 --> 00:30:09,440
after i deployment but when you have

00:30:08,480 --> 00:30:11,200
whatever

00:30:09,440 --> 00:30:13,120
scripture on that is in the linux

00:30:11,200 --> 00:30:15,919
command in linux environments

00:30:13,120 --> 00:30:17,679
by default with always run so yeah

00:30:15,919 --> 00:30:19,520
that's pretty much how to use travis

00:30:17,679 --> 00:30:21,679
it's a very very simple process

00:30:19,520 --> 00:30:22,799
and um i know a lot of people use travis

00:30:21,679 --> 00:30:24,960
for

00:30:22,799 --> 00:30:26,240
running tests for deployments etc so

00:30:24,960 --> 00:30:29,039
this is how you can

00:30:26,240 --> 00:30:30,960
easily integrate um cloud foundry into

00:30:29,039 --> 00:30:31,840
your whole csd player plan without

00:30:30,960 --> 00:30:34,320
breaking anything

00:30:31,840 --> 00:30:35,039
so you don't need to leave your existing

00:30:34,320 --> 00:30:38,000
um

00:30:35,039 --> 00:30:39,679
cicd provider you can just integrate

00:30:38,000 --> 00:30:41,200
crowdfunding very easily

00:30:39,679 --> 00:30:42,799
and most of these providers actually

00:30:41,200 --> 00:30:45,440
have support for

00:30:42,799 --> 00:30:47,200
um cloud foundry so you are good to go

00:30:45,440 --> 00:30:47,600
so that's the first part of the demo

00:30:47,200 --> 00:30:50,320
done

00:30:47,600 --> 00:30:53,120
and over to ram to show us a little bit

00:30:50,320 --> 00:30:56,080
of jenkins magic

00:30:53,120 --> 00:30:57,440
yeah i think a couple of very

00:30:56,080 --> 00:31:00,240
interesting points that

00:30:57,440 --> 00:31:02,399
uh shadrach brought up make a good case

00:31:00,240 --> 00:31:05,919
for jenkins you know

00:31:02,399 --> 00:31:07,279
you all might be wondering um why even

00:31:05,919 --> 00:31:09,360
bother with jenkins

00:31:07,279 --> 00:31:11,679
isn't there like a jenkins x that's more

00:31:09,360 --> 00:31:13,679
modern that's more fancy

00:31:11,679 --> 00:31:16,880
that's more kubernetes native and things

00:31:13,679 --> 00:31:16,880
like that um

00:31:17,200 --> 00:31:22,720
but jenkins is like the tried and tested

00:31:20,000 --> 00:31:25,200
workhorse of the cicd world so

00:31:22,720 --> 00:31:26,880
long before travis existed long before

00:31:25,200 --> 00:31:30,960
people had heard of

00:31:26,880 --> 00:31:34,159
ci circle ci jenkins was the

00:31:30,960 --> 00:31:36,480
workhorse now um

00:31:34,159 --> 00:31:38,640
you might be a jenkins person or a

00:31:36,480 --> 00:31:40,720
hudson person which is like

00:31:38,640 --> 00:31:42,399
which in my opinion is like pretty much

00:31:40,720 --> 00:31:45,440
the same thing

00:31:42,399 --> 00:31:47,440
you could be either but

00:31:45,440 --> 00:31:49,279
i have had a lot of good experience in

00:31:47,440 --> 00:31:52,080
the past working with

00:31:49,279 --> 00:31:53,360
the jenkins tool and i know for a fact

00:31:52,080 --> 00:31:57,679
that a lot of teams

00:31:53,360 --> 00:32:00,640
um still prefer jenkins now

00:31:57,679 --> 00:32:01,200
jenkins is also open source always has

00:32:00,640 --> 00:32:04,480
been

00:32:01,200 --> 00:32:07,600
it has a fantastic community

00:32:04,480 --> 00:32:11,919
around the

00:32:07,600 --> 00:32:15,840
jenkins tool who continuously contribute

00:32:11,919 --> 00:32:15,840
what are known as jenkins plugins

00:32:16,399 --> 00:32:19,679
so if you don't mind shadrach i'm going

00:32:18,000 --> 00:32:29,840
to

00:32:19,679 --> 00:32:29,840
share my screen now yo sure yeah

00:32:33,360 --> 00:32:35,840
let's see

00:32:36,559 --> 00:32:48,000
and

00:32:43,519 --> 00:32:52,320
so i was saying uh jenkins is like

00:32:48,000 --> 00:32:55,679
the the historically

00:32:52,320 --> 00:32:57,360
most reliable ci cd tool and it's very

00:32:55,679 --> 00:33:00,480
convenient to use so

00:32:57,360 --> 00:33:01,919
um jenkins has a lot of plugins

00:33:00,480 --> 00:33:04,559
and it's sort of this plug-in

00:33:01,919 --> 00:33:08,080
architecture that adds a lot of merit to

00:33:04,559 --> 00:33:10,159
what jenkins can do even by itself it's

00:33:08,080 --> 00:33:12,080
you know quite powerful but the plugins

00:33:10,159 --> 00:33:15,120
just make

00:33:12,080 --> 00:33:17,600
make it make it really worthwhile now i

00:33:15,120 --> 00:33:22,840
have a

00:33:17,600 --> 00:33:25,840
local instance of jenkins running

00:33:22,840 --> 00:33:28,960
um now you could run this in

00:33:25,840 --> 00:33:32,320
very many ways you could run

00:33:28,960 --> 00:33:34,480
jenkins by itself on a vm

00:33:32,320 --> 00:33:36,159
and make use of that vm to do your

00:33:34,480 --> 00:33:39,840
deployments

00:33:36,159 --> 00:33:43,279
which is like a uh a very good practice

00:33:39,840 --> 00:33:45,279
um i have seen folks install jenkins to

00:33:43,279 --> 00:33:47,600
a kubernetes cluster

00:33:45,279 --> 00:33:48,799
and you know that then starts to behave

00:33:47,600 --> 00:33:52,000
as a

00:33:48,799 --> 00:33:55,360
remote machine by itself

00:33:52,000 --> 00:33:57,600
and then there's also you know

00:33:55,360 --> 00:33:58,640
so for purposes of this demo i'm just

00:33:57,600 --> 00:34:01,919
running

00:33:58,640 --> 00:34:04,960
jenkins locally now one thing is

00:34:01,919 --> 00:34:06,080
just make sure that the machine on which

00:34:04,960 --> 00:34:10,720
you are running jenkins

00:34:06,080 --> 00:34:14,159
is persistent and has a cloud foundry

00:34:10,720 --> 00:34:16,720
cli also installed on it

00:34:14,159 --> 00:34:19,280
in addition to that there's a few

00:34:16,720 --> 00:34:22,560
plugins that

00:34:19,280 --> 00:34:25,520
we make use of so the ones that

00:34:22,560 --> 00:34:26,800
i installed are the github plugin

00:34:25,520 --> 00:34:28,580
basically

00:34:26,800 --> 00:34:29,839
um so this um

00:34:28,580 --> 00:34:32,240
[Music]

00:34:29,839 --> 00:34:34,000
allows us to make use of version control

00:34:32,240 --> 00:34:36,720
natively inside jenkins

00:34:34,000 --> 00:34:37,610
and i'll just quickly show you how in a

00:34:36,720 --> 00:34:40,000
minute

00:34:37,610 --> 00:34:43,200
[Music]

00:34:40,000 --> 00:34:48,000
so i am going to create a new job

00:34:43,200 --> 00:34:52,079
and set up a pipeline so

00:34:48,000 --> 00:34:54,399
going to call it a live stream demo

00:34:52,079 --> 00:34:58,240
and i'm going to select a freestyle

00:34:54,399 --> 00:35:03,599
project for purposes of this demo

00:34:58,240 --> 00:35:05,359
so basically uh it has the same steps

00:35:03,599 --> 00:35:06,800
or it performs the same steps that

00:35:05,359 --> 00:35:09,839
shakraik had shown

00:35:06,800 --> 00:35:12,320
as part of his clavis dem um

00:35:09,839 --> 00:35:13,520
there is a github repo somewhere out

00:35:12,320 --> 00:35:15,760
there

00:35:13,520 --> 00:35:16,960
that github repo basically has the

00:35:15,760 --> 00:35:18,960
source code

00:35:16,960 --> 00:35:20,880
that source code has to be converted

00:35:18,960 --> 00:35:22,880
into a container

00:35:20,880 --> 00:35:24,880
and that container gets deployed to

00:35:22,880 --> 00:35:27,040
kubernetes

00:35:24,880 --> 00:35:28,079
in order to simplify this process and

00:35:27,040 --> 00:35:31,119
not worry about

00:35:28,079 --> 00:35:33,440
any of the stuff in the middle

00:35:31,119 --> 00:35:35,680
our build process is going to take a

00:35:33,440 --> 00:35:38,000
very simple format

00:35:35,680 --> 00:35:39,520
so we are going to execute like a bunch

00:35:38,000 --> 00:35:43,200
of shell commands

00:35:39,520 --> 00:35:46,240
um now remember because cf is already

00:35:43,200 --> 00:35:48,560
installed i can just go ahead and run

00:35:46,240 --> 00:35:52,240
these commands

00:35:48,560 --> 00:35:55,200
if you don't have cf installed then

00:35:52,240 --> 00:35:56,160
you just have to make sure that you do

00:35:55,200 --> 00:35:59,440
and then there are

00:35:56,160 --> 00:36:00,640
two things here so when i say having cf

00:35:59,440 --> 00:36:04,720
installed i mean

00:36:00,640 --> 00:36:09,200
have the cfcli installed on the machine

00:36:04,720 --> 00:36:12,079
or virtual machine or the

00:36:09,200 --> 00:36:13,760
have the container access have jenkins

00:36:12,079 --> 00:36:17,280
the container have access to

00:36:13,760 --> 00:36:18,480
um cf along with it the other thing is

00:36:17,280 --> 00:36:23,520
the cf

00:36:18,480 --> 00:36:23,520
for kate's project that is running on

00:36:24,079 --> 00:36:30,160
the kubernetes cluster somewhere

00:36:27,119 --> 00:36:32,400
so you can that's that's basically it

00:36:30,160 --> 00:36:35,440
now i will also

00:36:32,400 --> 00:36:38,880
activate k9s just to show

00:36:35,440 --> 00:36:40,000
some of the internals uh just to prove

00:36:38,880 --> 00:36:42,800
that we are not

00:36:40,000 --> 00:36:44,240
like doing an april fool's joke on the

00:36:42,800 --> 00:36:46,560
1st of april and

00:36:44,240 --> 00:36:48,400
kubernetes deployments should not be

00:36:46,560 --> 00:36:51,599
this easy right

00:36:48,400 --> 00:36:56,960
so just just want to

00:36:51,599 --> 00:36:56,960
give a feel of what that looks like

00:36:57,040 --> 00:37:01,520
so as you can see this is our

00:36:59,900 --> 00:37:06,000
[Music]

00:37:01,520 --> 00:37:06,000
k9s maybe i'll make this

00:37:06,839 --> 00:37:09,839
bigger

00:37:09,920 --> 00:37:14,400
yeah hopefully that's big enough for

00:37:11,760 --> 00:37:14,400
folks to see

00:37:20,839 --> 00:37:25,359
um

00:37:23,280 --> 00:37:26,880
so this is the app that shadrach had

00:37:25,359 --> 00:37:30,560
deployed just

00:37:26,880 --> 00:37:34,160
a little while ago um

00:37:30,560 --> 00:37:35,359
we can get into that and look at some

00:37:34,160 --> 00:37:38,640
stuff

00:37:35,359 --> 00:37:38,640
does it have any logs

00:37:47,040 --> 00:37:54,640
yeah nothing on the logs for that

00:37:50,960 --> 00:37:56,880
so anyhow um the the only reason i

00:37:54,640 --> 00:38:00,079
opened this up was to

00:37:56,880 --> 00:38:01,760
show that you know eventually some stuff

00:38:00,079 --> 00:38:05,119
will begin to appear here

00:38:01,760 --> 00:38:08,160
um we'll take a look at

00:38:05,119 --> 00:38:12,320
what and how in just a bit

00:38:08,160 --> 00:38:13,440
now the steps like i mentioned are going

00:38:12,320 --> 00:38:16,640
to be

00:38:13,440 --> 00:38:19,280
very similar to um what

00:38:16,640 --> 00:38:22,000
shadrach showed in his travis demo so

00:38:19,280 --> 00:38:26,240
you set the cf api

00:38:22,000 --> 00:38:26,240
you basically direct the

00:38:27,760 --> 00:38:34,630
cf instance to login with a

00:38:31,359 --> 00:38:36,880
username password that you will supply

00:38:34,630 --> 00:38:40,560
[Music]

00:38:36,880 --> 00:38:40,560
cf target will be

00:38:43,440 --> 00:38:47,520
this arg and this space so cf target is

00:38:46,480 --> 00:38:50,000
basically

00:38:47,520 --> 00:38:50,880
the way we specify role-based access

00:38:50,000 --> 00:38:55,599
control and

00:38:50,880 --> 00:38:55,599
organize multi-tenancy on the cf cluster

00:38:57,359 --> 00:39:05,839
and finally the command that

00:39:01,440 --> 00:39:09,359
deploys the app to kubernetes is

00:39:05,839 --> 00:39:09,359
cf push now

00:39:09,440 --> 00:39:16,079
what is it that we are

00:39:13,040 --> 00:39:19,359
building so we are

00:39:16,079 --> 00:39:21,680
going to build from a

00:39:19,359 --> 00:39:21,680
um

00:39:24,160 --> 00:39:30,320
github repo and that github repo

00:39:28,000 --> 00:39:30,320
is

00:39:31,680 --> 00:39:38,000
a test application um

00:39:34,960 --> 00:39:43,839
yeah that i've used a bunch of times

00:39:38,000 --> 00:39:46,880
um i'll be honest so

00:39:43,839 --> 00:39:46,880
i am going to

00:39:49,680 --> 00:39:54,839
get this from kit okay

00:39:53,370 --> 00:39:57,599
[Music]

00:39:54,839 --> 00:39:59,200
um

00:39:57,599 --> 00:40:02,800
and then i'm going to get the master

00:39:59,200 --> 00:40:02,800
branch um

00:40:03,040 --> 00:40:08,480
so i'm going to also paste that url here

00:40:09,200 --> 00:40:16,319
and yeah so basically this is

00:40:12,880 --> 00:40:17,119
this is the build okay so uh make use of

00:40:16,319 --> 00:40:20,880
that

00:40:17,119 --> 00:40:20,880
um i have a

00:40:21,599 --> 00:40:28,480
username password thing yeah

00:40:25,200 --> 00:40:32,000
just make use of that username will be

00:40:28,480 --> 00:40:35,280
username password will be password so

00:40:32,000 --> 00:40:38,160
basically what this is is uh my

00:40:35,280 --> 00:40:39,680
the credentials are already on jenkins

00:40:38,160 --> 00:40:42,960
obviously i don't want to

00:40:39,680 --> 00:40:45,440
show my super secret

00:40:42,960 --> 00:40:46,560
password on a live stream to the world

00:40:45,440 --> 00:40:50,640
but basically

00:40:46,560 --> 00:40:50,640
assign these credentials here and

00:40:50,960 --> 00:40:55,760
give like a name that we give you so

00:40:53,520 --> 00:40:59,280
this name is going to be repeated

00:40:55,760 --> 00:41:01,359
uh is what is being used here and this

00:40:59,280 --> 00:41:02,720
key is going to be used here and they

00:41:01,359 --> 00:41:05,920
will get replaced

00:41:02,720 --> 00:41:08,560
um when the build actually runs so this

00:41:05,920 --> 00:41:12,400
is a very simplistic build at the moment

00:41:08,560 --> 00:41:13,920
um yeah so just specify that we're using

00:41:12,400 --> 00:41:17,680
github

00:41:13,920 --> 00:41:21,040
and then do like a cf push

00:41:17,680 --> 00:41:24,480
um so i'm going to save this

00:41:21,040 --> 00:41:26,570
and i'm going to try and run this now

00:41:24,480 --> 00:41:29,729
so you can build on demand

00:41:26,570 --> 00:41:29,729
[Music]

00:41:29,920 --> 00:41:34,160
jenkins allows you to do that and let's

00:41:32,720 --> 00:41:36,400
take a look at

00:41:34,160 --> 00:41:36,400
the

00:41:38,079 --> 00:41:45,119
deployment so my um

00:41:42,640 --> 00:41:46,240
my git checkout my git clone basically

00:41:45,119 --> 00:41:50,079
worked okay

00:41:46,240 --> 00:41:51,599
um cf api runs here authentication

00:41:50,079 --> 00:41:54,800
happens here

00:41:51,599 --> 00:41:59,680
so super secret username and password

00:41:54,800 --> 00:42:03,440
um and then the target is selected here

00:41:59,680 --> 00:42:07,280
and then it starts to work on the actual

00:42:03,440 --> 00:42:10,079
deployment of the app so

00:42:07,280 --> 00:42:10,720
the way build works uh like shadrach

00:42:10,079 --> 00:42:13,760
mentioned

00:42:10,720 --> 00:42:14,880
is it uses what are known as pacquiao

00:42:13,760 --> 00:42:18,640
buildbacks

00:42:14,880 --> 00:42:22,000
now build packs are also

00:42:18,640 --> 00:42:25,040
uh like a fairly i don't want to say old

00:42:22,000 --> 00:42:28,160
but ah

00:42:25,040 --> 00:42:30,319
it's kind of what i mean ah

00:42:28,160 --> 00:42:32,319
the time tested they've been used in a

00:42:30,319 --> 00:42:35,359
lot of environments they've been

00:42:32,319 --> 00:42:38,640
um they were pioneered by

00:42:35,359 --> 00:42:41,119
the team at heroku at first and then uh

00:42:38,640 --> 00:42:41,839
cloud foundry also which was pivotal

00:42:41,119 --> 00:42:45,200
back then

00:42:41,839 --> 00:42:47,920
um long history but cloud foundry also

00:42:45,200 --> 00:42:51,280
adopted the buildback method of

00:42:47,920 --> 00:42:54,400
building and deploy building apps um

00:42:51,280 --> 00:42:56,800
and these build packs basically offer a

00:42:54,400 --> 00:42:58,800
very simple way in which it takes your

00:42:56,800 --> 00:43:00,079
application source goes through a few

00:42:58,800 --> 00:43:02,560
different steps

00:43:00,079 --> 00:43:05,119
um it's able to detect what language

00:43:02,560 --> 00:43:08,319
you're using so for example

00:43:05,119 --> 00:43:08,800
shadrach used cf push for his node.js

00:43:08,319 --> 00:43:12,000
app

00:43:08,800 --> 00:43:16,319
uh whereas i am using cf push for

00:43:12,000 --> 00:43:17,920
my go application and really

00:43:16,319 --> 00:43:19,520
you know cloud foundry is able to make

00:43:17,920 --> 00:43:22,640
the distinction that okay

00:43:19,520 --> 00:43:23,839
that was a nodejs app so make use of the

00:43:22,640 --> 00:43:26,319
packet of buildbacks

00:43:23,839 --> 00:43:28,000
that correspond to nodejs and this is a

00:43:26,319 --> 00:43:31,040
go application so make use of the

00:43:28,000 --> 00:43:34,560
breakbacks that correspond to

00:43:31,040 --> 00:43:37,359
this go application so um

00:43:34,560 --> 00:43:37,680
it generates like a url uh for us at the

00:43:37,359 --> 00:43:40,880
end

00:43:37,680 --> 00:43:42,640
and you know this is this is basically

00:43:40,880 --> 00:43:46,800
the app so

00:43:42,640 --> 00:43:50,000
um it is deployed to

00:43:46,800 --> 00:43:54,960
the kubernetes cluster and

00:43:50,000 --> 00:43:58,319
we can check that

00:43:54,960 --> 00:44:04,400
here so if we look for cf

00:43:58,319 --> 00:44:04,400
workloads there's going to be

00:44:05,440 --> 00:44:09,839
an app

00:44:15,760 --> 00:44:20,160
is it sample for ram or test drum

00:44:21,680 --> 00:44:26,240
probably neither let me just check one

00:44:24,480 --> 00:44:28,560
second

00:44:26,240 --> 00:44:28,560
um

00:44:31,119 --> 00:44:37,839
yeah the namespace is cf workloads

00:44:48,720 --> 00:44:54,800
interesting even your app is missing

00:44:52,079 --> 00:44:55,920
yeah i know i put that down already oh

00:44:54,800 --> 00:45:00,640
you brought it down

00:44:55,920 --> 00:45:05,520
okay yeah so we don't get built

00:45:00,640 --> 00:45:07,760
by google cloud a lot of money

00:45:05,520 --> 00:45:09,599
that's okay they've been kind enough to

00:45:07,760 --> 00:45:13,440
grant a lot of credits to us

00:45:09,599 --> 00:45:15,280
in the past shout out to google cloud by

00:45:13,440 --> 00:45:18,560
the way

00:45:15,280 --> 00:45:21,599
yeah absolutely so let's

00:45:18,560 --> 00:45:21,599
uh let's do this

00:45:26,960 --> 00:45:30,839
it is not a demo if something does not

00:45:28,640 --> 00:45:33,280
go wrong

00:45:30,839 --> 00:45:33,280
definitely isn't

00:45:34,000 --> 00:45:36,640
all right

00:45:41,839 --> 00:45:47,839
can you do a control ctrl f to find it

00:45:44,960 --> 00:45:47,839
based on the name

00:45:49,040 --> 00:45:57,839
now um i think it's

00:45:52,560 --> 00:45:57,839
full from this this is probably the one

00:45:58,839 --> 00:46:01,839
um

00:46:02,480 --> 00:46:05,680
because like it's test app and it says

00:46:05,040 --> 00:46:08,480
hello on

00:46:05,680 --> 00:46:09,200
index 0. so this is definitely the app

00:46:08,480 --> 00:46:13,680
um

00:46:09,200 --> 00:46:16,560
but anyhow so um

00:46:13,680 --> 00:46:16,560
you know that's

00:46:17,520 --> 00:46:21,760
that's the app really and that's um

00:46:23,520 --> 00:46:30,400
that's like a very simplistic way of

00:46:26,800 --> 00:46:35,599
doing a jenkins-based build

00:46:30,400 --> 00:46:35,599
and deploy that really goes out to um

00:46:36,079 --> 00:46:40,480
goes out and deploys to kubernetes now

00:46:38,079 --> 00:46:42,160
if you want to make this slightly more

00:46:40,480 --> 00:46:45,200
sophisticated so

00:46:42,160 --> 00:46:45,200
if you want to let's say

00:46:45,839 --> 00:46:49,440
build on every check-in or build on

00:46:48,079 --> 00:46:51,280
every commit or build

00:46:49,440 --> 00:46:52,800
and you know run some tests and things

00:46:51,280 --> 00:46:54,400
like that so all of these things are

00:46:52,800 --> 00:46:58,800
available so basically

00:46:54,400 --> 00:47:00,880
you can use the jenkins url

00:46:58,800 --> 00:47:02,560
excuse me to trigger something from

00:47:00,880 --> 00:47:06,079
github

00:47:02,560 --> 00:47:07,040
uh you can also poll github from jenkins

00:47:06,079 --> 00:47:10,640
which is

00:47:07,040 --> 00:47:16,160
what i'm going to do here and

00:47:10,640 --> 00:47:19,359
if you are if you are familiar with like

00:47:16,160 --> 00:47:22,400
cron style um then

00:47:19,359 --> 00:47:26,079
this is um

00:47:22,400 --> 00:47:28,830
this this takes cron style input so

00:47:26,079 --> 00:47:31,040
my favorite way to

00:47:28,830 --> 00:47:34,079
[Music]

00:47:31,040 --> 00:47:37,119
learn about the crown

00:47:34,079 --> 00:47:39,680
expressions is krontab.guru

00:47:37,119 --> 00:47:40,720
so these folks have made a wonderful

00:47:39,680 --> 00:47:43,760
resource about

00:47:40,720 --> 00:47:44,720
you know how you write your um current

00:47:43,760 --> 00:47:48,319
job so

00:47:44,720 --> 00:47:51,040
what i have there right now is this

00:47:48,319 --> 00:47:52,720
so every two minutes it will check for

00:47:51,040 --> 00:47:57,040
this now

00:47:52,720 --> 00:48:00,240
h slash 2 is like a jenkins thing um

00:47:57,040 --> 00:48:02,640
that just means that you know at

00:48:00,240 --> 00:48:04,079
whatever part of the r just check for

00:48:02,640 --> 00:48:07,760
any changes so

00:48:04,079 --> 00:48:11,280
um it will run every

00:48:07,760 --> 00:48:14,880
other minute this way and now if i

00:48:11,280 --> 00:48:17,599
you know go in and make a change

00:48:14,880 --> 00:48:17,599
to the app

00:48:18,880 --> 00:48:24,559
here um

00:48:21,690 --> 00:48:28,160
[Music]

00:48:24,559 --> 00:48:30,800
let's see i make an

00:48:28,160 --> 00:48:30,800
edit here

00:48:31,520 --> 00:48:35,839
because i like to live dangerously

00:48:52,400 --> 00:49:03,839
all right so

00:48:56,160 --> 00:49:03,839
my commit message is

00:49:06,319 --> 00:49:10,559
all right so i am committing changes to

00:49:09,520 --> 00:49:17,839
the

00:49:10,559 --> 00:49:17,839
master branch of test app

00:49:18,319 --> 00:49:21,599
so here's my comment

00:49:22,319 --> 00:49:25,920
and yeah this is

00:49:26,160 --> 00:49:34,240
the this is the commit

00:49:30,000 --> 00:49:34,240
thing and now

00:49:36,079 --> 00:49:42,839
in a couple of minutes or in a minute

00:49:39,119 --> 00:49:45,760
this will refresh to 10

00:49:42,839 --> 00:49:48,800
46 so

00:49:45,760 --> 00:49:50,640
and then it will kick off a build um if

00:49:48,800 --> 00:49:51,760
everything has moved and you'll be able

00:49:50,640 --> 00:49:59,839
to find that

00:49:51,760 --> 00:49:59,839
here so let's just give it like

00:50:00,480 --> 00:50:05,119
a minute and see what it does but

00:50:03,280 --> 00:50:13,839
basically the same

00:50:05,119 --> 00:50:13,839
it will go through the same steps

00:50:15,040 --> 00:50:24,240
pick up on the changes um

00:50:18,800 --> 00:50:27,839
check those out so on cue

00:50:24,240 --> 00:50:31,280
it basically now has a new build so

00:50:27,839 --> 00:50:33,920
it found like one change um

00:50:31,280 --> 00:50:34,960
there is a revision and it just tries to

00:50:33,920 --> 00:50:39,040
build it

00:50:34,960 --> 00:50:41,599
um unfortunately that build failed

00:50:39,040 --> 00:50:42,720
uh yeah so it's having some reliability

00:50:41,599 --> 00:50:44,960
issue with

00:50:42,720 --> 00:50:44,960
um

00:50:46,000 --> 00:50:55,839
with getting to the end point but um

00:50:49,440 --> 00:50:55,839
otherwise you know

00:50:57,280 --> 00:51:00,160
it should work

00:51:04,640 --> 00:51:12,079
yeah we're going to um

00:51:08,720 --> 00:51:15,200
going to back off for a bit and

00:51:12,079 --> 00:51:18,640
and see what happens but

00:51:15,200 --> 00:51:18,640
yeah basically it's

00:51:21,520 --> 00:51:25,440
it's going to work and then we'll see

00:51:23,200 --> 00:51:30,079
the containers being spun

00:51:25,440 --> 00:51:32,800
up and work from here

00:51:30,079 --> 00:51:32,800
so we can

00:51:33,920 --> 00:51:37,839
also check all the apps

00:51:45,680 --> 00:51:52,960
here and

00:51:48,800 --> 00:51:55,359
yeah this is this is the app that's

00:51:52,960 --> 00:51:55,359
running

00:51:58,960 --> 00:52:10,160
and this was

00:52:05,839 --> 00:52:10,160
this is the one that got deployed um

00:52:13,200 --> 00:52:19,839
try once again maybe fourth time lucky

00:52:24,960 --> 00:52:30,240
yeah so it's pushing so it'll now go

00:52:28,640 --> 00:52:31,119
through the same steps of doing the

00:52:30,240 --> 00:52:33,200
pacquiao build

00:52:31,119 --> 00:52:35,520
generate the container and take that

00:52:33,200 --> 00:52:39,920
container and deploy it into the

00:52:35,520 --> 00:52:42,640
kubernetes runtime so like i mentioned

00:52:39,920 --> 00:52:43,040
packet of build packs do the actual job

00:52:42,640 --> 00:52:46,160
of

00:52:43,040 --> 00:52:49,920
converting the go source code

00:52:46,160 --> 00:52:53,130
into the actual application code

00:52:49,920 --> 00:52:55,760
um into the actual container that runs

00:52:53,130 --> 00:53:00,160
[Music]

00:52:55,760 --> 00:53:00,160
so the the whole sort of

00:53:00,319 --> 00:53:04,960
writing your your own yaml files to

00:53:03,040 --> 00:53:06,800
maintain this writing docker files to

00:53:04,960 --> 00:53:08,960
create the container

00:53:06,800 --> 00:53:10,559
writing some more eml files to

00:53:08,960 --> 00:53:11,680
orchestrate the deployment onto

00:53:10,559 --> 00:53:14,400
kubernetes

00:53:11,680 --> 00:53:14,880
um and and all of these complications

00:53:14,400 --> 00:53:18,319
that

00:53:14,880 --> 00:53:20,720
i don't blame yaml for but

00:53:18,319 --> 00:53:21,920
in general that are associated with

00:53:20,720 --> 00:53:25,359
kubernetes

00:53:21,920 --> 00:53:26,400
um is is sort of eliminated thanks to

00:53:25,359 --> 00:53:29,040
this project

00:53:26,400 --> 00:53:29,040
um called

00:53:32,640 --> 00:53:37,839
i'm not blaming anyone

00:53:36,000 --> 00:53:40,839
i mean it's not like we know it's not

00:53:37,839 --> 00:53:43,359
our live stream we don't throw shots at

00:53:40,839 --> 00:53:46,559
xyz yeah

00:53:43,359 --> 00:53:47,359
so uh yeah so this is the project

00:53:46,559 --> 00:53:49,760
website

00:53:47,359 --> 00:53:50,400
um if you're interested in going through

00:53:49,760 --> 00:53:53,280
the source

00:53:50,400 --> 00:53:54,720
um cf4case is an open source project

00:53:53,280 --> 00:53:58,160
that is governed

00:53:54,720 --> 00:53:59,599
by the cf foundation um who employ both

00:53:58,160 --> 00:54:02,480
shedhak and me

00:53:59,599 --> 00:54:02,960
and all of the information that you need

00:54:02,480 --> 00:54:06,160
is

00:54:02,960 --> 00:54:10,800
available on the cf for

00:54:06,160 --> 00:54:12,800
kate's website so

00:54:10,800 --> 00:54:14,319
we just wanted to take this opportunity

00:54:12,800 --> 00:54:17,040
to show uh

00:54:14,319 --> 00:54:19,520
how you know two different tools with

00:54:17,040 --> 00:54:22,839
slightly different

00:54:19,520 --> 00:54:25,440
practices and purposes are able to

00:54:22,839 --> 00:54:26,480
basically provide a very simple

00:54:25,440 --> 00:54:28,960
experience

00:54:26,480 --> 00:54:31,119
in taking source code and having it run

00:54:28,960 --> 00:54:33,440
on kubernetes

00:54:31,119 --> 00:54:35,280
and making use of this method is

00:54:33,440 --> 00:54:36,640
definitely going to simplify things a

00:54:35,280 --> 00:54:39,040
lot so

00:54:36,640 --> 00:54:41,280
there's there's just no doubt that this

00:54:39,040 --> 00:54:41,920
is probably the simplest way to deploy

00:54:41,280 --> 00:54:45,119
to

00:54:41,920 --> 00:54:48,079
um kubernetes um as in

00:54:45,119 --> 00:54:49,520
in whatever experience that shadrach and

00:54:48,079 --> 00:54:52,000
i have had

00:54:49,520 --> 00:54:53,440
on the flip side abstractions always

00:54:52,000 --> 00:54:56,319
scare people

00:54:53,440 --> 00:54:56,720
in terms of what sort of control they

00:54:56,319 --> 00:55:00,400
are

00:54:56,720 --> 00:55:01,920
giving over the cloud foundry api

00:55:00,400 --> 00:55:04,079
and the cloud foundry developer

00:55:01,920 --> 00:55:06,480
experience itself is designed with like

00:55:04,079 --> 00:55:10,799
years and years of

00:55:06,480 --> 00:55:14,640
experience behind it so it provides

00:55:10,799 --> 00:55:16,559
like a lot of granular options for

00:55:14,640 --> 00:55:19,680
being able to manage your apps and your

00:55:16,559 --> 00:55:22,240
deployment and things like that

00:55:19,680 --> 00:55:23,200
yeah so two different tools two

00:55:22,240 --> 00:55:26,799
different ways

00:55:23,200 --> 00:55:27,760
um could you just do like a very quick

00:55:26,799 --> 00:55:31,680
work through maybe

00:55:27,760 --> 00:55:35,599
of uh what it looks like on circle c

00:55:31,680 --> 00:55:37,599
it's very similar yeah yeah

00:55:35,599 --> 00:55:39,599
okay so maybe i'm in the interest of

00:55:37,599 --> 00:55:41,280
time something very quickly

00:55:39,599 --> 00:55:44,400
yeah yeah so i've had the background

00:55:41,280 --> 00:55:49,040
votes with ram on demoing security

00:55:44,400 --> 00:55:50,160
um so we we have a live stream coming up

00:55:49,040 --> 00:55:53,440
on the

00:55:50,160 --> 00:55:56,079
27th right the 27th of april that's

00:55:53,440 --> 00:55:59,359
right 27th of april with psycho ci

00:55:56,079 --> 00:56:02,000
so i would be restricting

00:55:59,359 --> 00:56:03,520
a lot of information here just because

00:56:02,000 --> 00:56:06,000
of the live stream so we

00:56:03,520 --> 00:56:07,200
do not have to you know repeat the same

00:56:06,000 --> 00:56:08,960
thing in live stream

00:56:07,200 --> 00:56:11,040
i actually initially don't want to do

00:56:08,960 --> 00:56:15,280
the live stream here the demo here but

00:56:11,040 --> 00:56:18,559
ram can be very very persuasive so

00:56:15,280 --> 00:56:20,880
let's let's get it done so with um

00:56:18,559 --> 00:56:22,559
with segocia is basically very easy it's

00:56:20,880 --> 00:56:25,680
basically the same thing right

00:56:22,559 --> 00:56:29,359
with travis and also with

00:56:25,680 --> 00:56:32,240
tankton let me share my screen

00:56:29,359 --> 00:56:32,960
now this is my second ci um dev

00:56:32,240 --> 00:56:36,799
dashboard

00:56:32,960 --> 00:56:39,839
that i authenticated with my github repo

00:56:36,799 --> 00:56:42,960
um so it basically shows

00:56:39,839 --> 00:56:46,000
all every single place that um said

00:56:42,960 --> 00:56:48,000
so every single repo that um

00:56:46,000 --> 00:56:49,280
travis secrecy is activated so if i come

00:56:48,000 --> 00:56:52,240
to projects here

00:56:49,280 --> 00:56:53,119
it's going to show all the repos that

00:56:52,240 --> 00:56:56,720
secret ci

00:56:53,119 --> 00:56:58,400
can be found on so maybe it dots um

00:56:56,720 --> 00:57:00,960
is why i mail file the connected

00:56:58,400 --> 00:57:03,520
security environment or

00:57:00,960 --> 00:57:05,119
a configuration file so yeah you can you

00:57:03,520 --> 00:57:06,799
can just authenticate then you also

00:57:05,119 --> 00:57:08,319
click on setup projects when you click

00:57:06,799 --> 00:57:10,400
on set up project

00:57:08,319 --> 00:57:13,440
it can of course it automatically

00:57:10,400 --> 00:57:15,520
creates a config for you that you can

00:57:13,440 --> 00:57:17,520
really write and then commit and

00:57:15,520 --> 00:57:18,720
you're good to go so that's basically

00:57:17,520 --> 00:57:20,319
the same process i did for this

00:57:18,720 --> 00:57:23,200
particular application

00:57:20,319 --> 00:57:24,079
now how to start observing i work with

00:57:23,200 --> 00:57:26,000
cloud foundry

00:57:24,079 --> 00:57:27,920
there are two ways i'll show you only

00:57:26,000 --> 00:57:29,440
one way

00:57:27,920 --> 00:57:30,960
then i'll show you the other on the

00:57:29,440 --> 00:57:33,680
other live stream so

00:57:30,960 --> 00:57:35,280
at least i'm i'm good i'm fair enough

00:57:33,680 --> 00:57:38,640
right i'm fair enough

00:57:35,280 --> 00:57:42,319
now um so this way i'm going to show now

00:57:38,640 --> 00:57:45,839
is with the um

00:57:42,319 --> 00:57:48,240
with basically writing um the

00:57:45,839 --> 00:57:49,760
deployments the ceramic file yourself

00:57:48,240 --> 00:57:52,000
generally doing the whole deployment

00:57:49,760 --> 00:57:53,200
process from by yourself writing um

00:57:52,000 --> 00:57:55,760
scripts to install

00:57:53,200 --> 00:57:58,240
cloud foundry to install platform cli to

00:57:55,760 --> 00:58:00,240
login so authenticate etc

00:57:58,240 --> 00:58:02,240
that's what this particular step does

00:58:00,240 --> 00:58:04,240
now if i go to this dot circuit center

00:58:02,240 --> 00:58:06,480
wiremail then click on the configure rml

00:58:04,240 --> 00:58:08,559
file

00:58:06,480 --> 00:58:10,400
so i'm just going to explain all of this

00:58:08,559 --> 00:58:12,319
real quick now this is the first way to

00:58:10,400 --> 00:58:13,440
do it the second way is to use the cloud

00:58:12,319 --> 00:58:16,400
foundry orb

00:58:13,440 --> 00:58:18,319
that has been created by ci if you want

00:58:16,400 --> 00:58:19,040
to find out about that you will join the

00:58:18,319 --> 00:58:20,640
secrecy

00:58:19,040 --> 00:58:22,480
live stream that we are going on the

00:58:20,640 --> 00:58:24,559
april 27th

00:58:22,480 --> 00:58:25,680
so this is but this gets the job done

00:58:24,559 --> 00:58:27,760
very well

00:58:25,680 --> 00:58:29,040
so the first things here is to create a

00:58:27,760 --> 00:58:31,440
job i mean

00:58:29,040 --> 00:58:32,480
um there are jobs and workflows in

00:58:31,440 --> 00:58:35,440
second ci

00:58:32,480 --> 00:58:36,000
and a job is basically an action and a

00:58:35,440 --> 00:58:38,960
workflow

00:58:36,000 --> 00:58:40,160
is a combination of more than one jobs

00:58:38,960 --> 00:58:43,280
so

00:58:40,160 --> 00:58:45,920
that's some secrecy knowledge there um

00:58:43,280 --> 00:58:48,079
so the name of this job is install login

00:58:45,920 --> 00:58:49,119
deploy you have to specify a name of the

00:58:48,079 --> 00:58:52,799
job

00:58:49,119 --> 00:58:53,280
now um i mean secrecy uses docker images

00:58:52,799 --> 00:58:56,559
to do

00:58:53,280 --> 00:58:57,760
um the serious um image and language

00:58:56,559 --> 00:59:01,359
specific deployment

00:58:57,760 --> 00:59:02,799
etc so you have to specify a docker

00:59:01,359 --> 00:59:05,119
image so i'm using a

00:59:02,799 --> 00:59:06,400
cimg base stable image so this is like

00:59:05,119 --> 00:59:08,160
very um it

00:59:06,400 --> 00:59:09,680
basically provides those with the linux

00:59:08,160 --> 00:59:10,000
environment or some something around

00:59:09,680 --> 00:59:11,599
that

00:59:10,000 --> 00:59:13,599
and it's basically an image that does

00:59:11,599 --> 00:59:16,640
that now the steps

00:59:13,599 --> 00:59:19,280
is basically series of actions

00:59:16,640 --> 00:59:20,720
that should happen in that particular

00:59:19,280 --> 00:59:24,000
job

00:59:20,720 --> 00:59:25,520
now the first step i want to happen is

00:59:24,000 --> 00:59:26,240
to check out check out in the sense that

00:59:25,520 --> 00:59:29,839
it should make

00:59:26,240 --> 00:59:31,920
our github um the the code in our github

00:59:29,839 --> 00:59:34,079
repo available in that particular

00:59:31,920 --> 00:59:36,960
environment in the secondary environment

00:59:34,079 --> 00:59:38,880
if you do not specify this um checkout

00:59:36,960 --> 00:59:41,040
when it gets to the deployment phase

00:59:38,880 --> 00:59:42,240
here it will not be able to push

00:59:41,040 --> 00:59:45,440
anything because

00:59:42,240 --> 00:59:46,400
there is no um code but there is no code

00:59:45,440 --> 00:59:49,520
in that particular

00:59:46,400 --> 00:59:51,280
um um environment so you have to check

00:59:49,520 --> 00:59:52,559
out at all times do not forget to check

00:59:51,280 --> 00:59:54,240
out

00:59:52,559 --> 00:59:57,119
so now the next thing is to run

00:59:54,240 --> 01:00:00,240
basically is run a bunch of scripts

00:59:57,119 --> 01:00:03,280
now um this particular run stage is

01:00:00,240 --> 01:00:06,079
on installing the clarifying cli and um

01:00:03,280 --> 01:00:06,480
if you want to write multi-line commands

01:00:06,079 --> 01:00:08,960
in

01:00:06,480 --> 01:00:09,680
second ci you just add this particular

01:00:08,960 --> 01:00:13,680
um

01:00:09,680 --> 01:00:15,520
symbol and you can write um various

01:00:13,680 --> 01:00:17,200
so you basically do the whole process of

01:00:15,520 --> 01:00:20,720
installing cloud foundry here and

01:00:17,200 --> 01:00:22,640
the pkg and also cloudfront jcli now

01:00:20,720 --> 01:00:25,440
you can easily do that by running not

01:00:22,640 --> 01:00:27,119
just writing all this i need to install

01:00:25,440 --> 01:00:28,559
um the next is to set up the cloud from

01:00:27,119 --> 01:00:31,920
the cell that's the next

01:00:28,559 --> 01:00:32,400
um step the next step is to run setup

01:00:31,920 --> 01:00:36,319
cloudfront

01:00:32,400 --> 01:00:38,160
cli so when we run cf-v

01:00:36,319 --> 01:00:40,240
this is basically checking to see the

01:00:38,160 --> 01:00:44,000
version of platform that is installed

01:00:40,240 --> 01:00:44,559
from this above step here then we go to

01:00:44,000 --> 01:00:47,520
the whole

01:00:44,559 --> 01:00:48,000
authentication process with um cfa does

01:00:47,520 --> 01:00:51,680
skip

01:00:48,000 --> 01:00:52,160
um api message validation cf api the

01:00:51,680 --> 01:00:54,640
whole

01:00:52,160 --> 01:00:55,440
the whole process of basically logging

01:00:54,640 --> 01:00:57,119
into your

01:00:55,440 --> 01:00:59,839
california instance with your cloud from

01:00:57,119 --> 01:01:00,720
your cli everybody knows these steps by

01:00:59,839 --> 01:01:04,079
now

01:01:00,720 --> 01:01:04,079
yeah this is the third time

01:01:05,520 --> 01:01:09,680
when when you say it often it sticks

01:01:07,599 --> 01:01:11,760
right and you stay off when it sticks

01:01:09,680 --> 01:01:13,440
so here i'm setting the environment

01:01:11,760 --> 01:01:15,839
variables for the

01:01:13,440 --> 01:01:16,960
app specific environment variables but

01:01:15,839 --> 01:01:19,359
the next is to

01:01:16,960 --> 01:01:20,720
run the next step is to push the

01:01:19,359 --> 01:01:22,240
application on the cloud foundry so the

01:01:20,720 --> 01:01:25,760
only command i'm running here

01:01:22,240 --> 01:01:27,920
is the cf push exchange value that's the

01:01:25,760 --> 01:01:30,559
of the application and then the workflow

01:01:27,920 --> 01:01:31,359
you specify the workflow name cloud 400

01:01:30,559 --> 01:01:33,680
doesn't mean you know

01:01:31,359 --> 01:01:34,559
the workflow the job install logging

01:01:33,680 --> 01:01:37,920
deploy the

01:01:34,559 --> 01:01:39,520
name of specified here so you have to

01:01:37,920 --> 01:01:42,880
make it a workflow

01:01:39,520 --> 01:01:45,680
right so when you do this

01:01:42,880 --> 01:01:46,720
when you do this it automatically sorry

01:01:45,680 --> 01:01:50,640
for showing you

01:01:46,720 --> 01:01:52,319
um it automatically starts a process now

01:01:50,640 --> 01:01:56,079
i will show you that process by just

01:01:52,319 --> 01:01:58,559
rerunning the workflow from start

01:01:56,079 --> 01:01:59,920
so if i should click on rerun the

01:01:58,559 --> 01:02:03,359
workflow

01:01:59,920 --> 01:02:05,760
it's to start running the workflow again

01:02:03,359 --> 01:02:07,119
so this is me running on the club on the

01:02:05,760 --> 01:02:08,480
second ci dashboard without having to

01:02:07,119 --> 01:02:10,160
make a push to it just like the way i

01:02:08,480 --> 01:02:13,359
can trigger builds on

01:02:10,160 --> 01:02:14,720
on circle ci the beauty also be

01:02:13,359 --> 01:02:16,160
triggered when you make a push so the

01:02:14,720 --> 01:02:17,200
first thing he's doing is speeding up an

01:02:16,160 --> 01:02:19,200
environment

01:02:17,200 --> 01:02:20,480
check out the code like see like i said

01:02:19,200 --> 01:02:22,160
you should check out the code

01:02:20,480 --> 01:02:23,839
installing the cloud foundry cli of

01:02:22,160 --> 01:02:24,960
course it has installed the cloud from

01:02:23,839 --> 01:02:28,240
the cli

01:02:24,960 --> 01:02:29,680
next setting up the cli the whole

01:02:28,240 --> 01:02:31,839
authentication thing

01:02:29,680 --> 01:02:33,520
and the next thing it's pushed the

01:02:31,839 --> 01:02:36,880
application to cloud foundry

01:02:33,520 --> 01:02:38,480
so this is where the whole process of

01:02:36,880 --> 01:02:40,000
pondering the application and sending it

01:02:38,480 --> 01:02:41,119
over to cloud foundry video and cloud

01:02:40,000 --> 01:02:44,240
foundry api

01:02:41,119 --> 01:02:47,599
and also um setting the

01:02:44,240 --> 01:02:48,960
whole api key and the config so

01:02:47,599 --> 01:02:50,720
the whole process generally your

01:02:48,960 --> 01:02:51,920
processor is specified nothing too fancy

01:02:50,720 --> 01:02:53,680
nothing too serious

01:02:51,920 --> 01:02:55,280
nothing too difficult it's very easy to

01:02:53,680 --> 01:02:57,280
plug cloud foundry into your

01:02:55,280 --> 01:02:58,880
if you're using cci for your csd

01:02:57,280 --> 01:03:01,839
processes it's very easy to

01:02:58,880 --> 01:03:02,400
um so basically include cloud foundry in

01:03:01,839 --> 01:03:04,480
your whole

01:03:02,400 --> 01:03:05,839
um deployments pipeline or your whole

01:03:04,480 --> 01:03:07,920
city pipeline

01:03:05,839 --> 01:03:09,520
so yeah that's basically it so we'll

01:03:07,920 --> 01:03:13,200
just wait for this to run

01:03:09,520 --> 01:03:15,599
and um see it's live the second

01:03:13,200 --> 01:03:16,240
is to use the second ci cloud foundry

01:03:15,599 --> 01:03:19,040
orb

01:03:16,240 --> 01:03:21,599
which we'll be talking about in the um

01:03:19,040 --> 01:03:23,440
[Music]

01:03:21,599 --> 01:03:24,799
live stream we have insecure ci we have

01:03:23,440 --> 01:03:27,039
a live stream coming up with the second

01:03:24,799 --> 01:03:29,760
ci theme on the 27th of april

01:03:27,039 --> 01:03:30,319
more information would come on the cloud

01:03:29,760 --> 01:03:33,839
foundry

01:03:30,319 --> 01:03:36,960
official twitter page or on my twitter

01:03:33,839 --> 01:03:42,240
or ram's twitter quota underscore black

01:03:36,960 --> 01:03:42,240
and ram what's your trident

01:03:42,799 --> 01:03:48,480
if you are really a good friend and

01:03:44,960 --> 01:03:48,480
colleague you will remember it

01:03:49,920 --> 01:03:57,280
okay okay okay so i am ram

01:03:54,240 --> 01:03:59,039
on twitter at g

01:03:57,280 --> 01:04:00,960
a r-a-m-i-y-e-n-g-a-r so ram is

01:03:59,039 --> 01:04:04,240
basically saying i am not a good friend

01:04:00,960 --> 01:04:06,880
okay i didn't say that you just

01:04:04,240 --> 01:04:06,880
inferred it

01:04:07,359 --> 01:04:14,000
okay okay so but yeah again

01:04:11,119 --> 01:04:14,480
the same set of build packs um get

01:04:14,000 --> 01:04:18,160
called

01:04:14,480 --> 01:04:22,079
for the java script code

01:04:18,160 --> 01:04:26,000
and the container gets deployed to the

01:04:22,079 --> 01:04:27,280
container runtime on kubernetes

01:04:26,000 --> 01:04:30,480
so yeah this is actually the same

01:04:27,280 --> 01:04:33,839
process for most languages

01:04:30,480 --> 01:04:33,839
so nothing changes really

01:04:35,760 --> 01:04:40,000
cool um so for folks watching out there

01:04:38,240 --> 01:04:42,480
if you have any questions

01:04:40,000 --> 01:04:43,440
just you know feel free to drop them on

01:04:42,480 --> 01:04:46,160
social media

01:04:43,440 --> 01:04:46,160
on the youtube

01:04:46,720 --> 01:04:50,720
video that's going to remain just leave

01:04:48,960 --> 01:04:52,839
them as comments we'll get to them when

01:04:50,720 --> 01:04:56,160
we can

01:04:52,839 --> 01:04:59,039
um yeah but that's it hopefully

01:04:56,160 --> 01:05:01,440
um this is of use for those who are

01:04:59,039 --> 01:05:03,599
watching if you are

01:05:01,440 --> 01:05:06,240
wrangling with the idea of how to set up

01:05:03,599 --> 01:05:08,000
ci cd pipelines on kubernetes or if you

01:05:06,240 --> 01:05:10,240
want to

01:05:08,000 --> 01:05:13,440
just you know provide a very clean

01:05:10,240 --> 01:05:15,440
developer experience for your developers

01:05:13,440 --> 01:05:18,000
and also have a very simplified

01:05:15,440 --> 01:05:20,960
experience when using your dev tools

01:05:18,000 --> 01:05:23,359
then cloud foundry is a great choice

01:05:20,960 --> 01:05:26,640
with cf for gates

01:05:23,359 --> 01:05:28,880
we just extend that cloud foundry

01:05:26,640 --> 01:05:32,000
simplicity and ease to

01:05:28,880 --> 01:05:35,680
managing kubernetes clusters as well

01:05:32,000 --> 01:05:38,559
cfo gates work so on top of

01:05:35,680 --> 01:05:40,000
all non-kubernetes providers there's

01:05:38,559 --> 01:05:41,760
hardly

01:05:40,000 --> 01:05:44,319
any that have come across where we've

01:05:41,760 --> 01:05:44,319
had trouble

01:05:45,119 --> 01:05:48,480
so you know feel free to install it and

01:05:47,599 --> 01:05:51,760
give it a spin

01:05:48,480 --> 01:05:54,640
and let us know if you have any trouble

01:05:51,760 --> 01:05:57,520
at any point along the way really so

01:05:54,640 --> 01:06:00,640
thanks for joining us today

01:05:57,520 --> 01:06:04,720
and yeah just

01:06:00,640 --> 01:06:06,880
try and share this information

01:06:04,720 --> 01:06:08,319
with anybody else who you think might

01:06:06,880 --> 01:06:11,039
benefit so

01:06:08,319 --> 01:06:11,680
um would really appreciate um all the

01:06:11,039 --> 01:06:14,880
help yeah yeah

01:06:11,680 --> 01:06:16,960
and so post yeah yeah so post

01:06:14,880 --> 01:06:19,119
this live stream we will have a bunch of

01:06:16,960 --> 01:06:20,640
videos that will replicate this bunch of

01:06:19,119 --> 01:06:23,920
steps that were specified

01:06:20,640 --> 01:06:25,520
in this live stream on instagram videos

01:06:23,920 --> 01:06:26,319
so that you can easily use it to as a

01:06:25,520 --> 01:06:27,920
tutorial

01:06:26,319 --> 01:06:30,240
and we also have like a bunch of

01:06:27,920 --> 01:06:32,160
tutorials that a blog post if you are

01:06:30,240 --> 01:06:34,160
more of a reading kind of person

01:06:32,160 --> 01:06:36,400
that we've um deploy posted in like

01:06:34,160 --> 01:06:38,000
various place for example the travis own

01:06:36,400 --> 01:06:41,359
it's on container journal

01:06:38,000 --> 01:06:43,520
and you can find that on

01:06:41,359 --> 01:06:44,960
just check the cloud foundry officials

01:06:43,520 --> 01:06:47,280
with that um

01:06:44,960 --> 01:06:48,880
you would see it on it to um cloud find

01:06:47,280 --> 01:06:50,720
your shout out to that timeline

01:06:48,880 --> 01:06:52,720
or you check my don't check mine don't

01:06:50,720 --> 01:06:55,920
check my timeline

01:06:52,720 --> 01:06:57,520
definitely not find it i tweet a lot so

01:06:55,920 --> 01:06:59,760
yeah thank you so much everybody for

01:06:57,520 --> 01:07:00,960
coming and um thank you around for doing

01:06:59,760 --> 01:07:04,240
this with me again

01:07:00,960 --> 01:07:05,760
um been exciting so far and we are

01:07:04,240 --> 01:07:07,920
looking forward to doing this

01:07:05,760 --> 01:07:08,880
more um the next time we are doing this

01:07:07,920 --> 01:07:10,480
we are coming with

01:07:08,880 --> 01:07:12,400
more interesting stuff you can do with

01:07:10,480 --> 01:07:15,760
cloud 400 more integrations

01:07:12,400 --> 01:07:17,920
and um hopefully we see everyone soon

01:07:15,760 --> 01:07:18,799
thank you so much for coming again bye

01:07:17,920 --> 01:07:20,880
and

01:07:18,799 --> 01:07:22,799
have a wonderful rest of your morning

01:07:20,880 --> 01:07:24,799
afternoon evening

01:07:22,799 --> 01:07:27,680
wherever and last reminder though uh

01:07:24,799 --> 01:07:30,960
there is a cloud foundry event

01:07:27,680 --> 01:07:34,160
that's happening yeah this year means

01:07:30,960 --> 01:07:37,440
yep okay it's on

01:07:34,160 --> 01:07:39,039
july 22nd it's a two-day uh summit fully

01:07:37,440 --> 01:07:42,640
virtual this year

01:07:39,039 --> 01:07:45,359
like all other uh summit

01:07:42,640 --> 01:07:46,319
but you know an opportunity to learn a

01:07:45,359 --> 01:07:48,319
lot about

01:07:46,319 --> 01:07:50,160
cloud foundry the ecosystem interact

01:07:48,319 --> 01:07:54,559
with the community members

01:07:50,160 --> 01:07:56,720
um and do reach out if you're interested

01:07:54,559 --> 01:07:58,960
in attending but you can find the link

01:07:56,720 --> 01:08:01,599
from cloudfoundry.org

01:07:58,960 --> 01:08:02,559
under events so if you are interested in

01:08:01,599 --> 01:08:06,000
learning about it

01:08:02,559 --> 01:08:07,599
and have the bandwidth to spend like a

01:08:06,000 --> 01:08:08,400
couple of days in exploring all of the

01:08:07,599 --> 01:08:11,680
options

01:08:08,400 --> 01:08:15,039
i would highly highly recommend um

01:08:11,680 --> 01:08:15,039
participating in the summit

01:08:15,599 --> 01:08:18,960
yeah same here always recommend it's

01:08:17,520 --> 01:08:20,719
really really fun sessions

01:08:18,960 --> 01:08:22,000
you can learn so many things really

01:08:20,719 --> 01:08:23,679
really similar things

01:08:22,000 --> 01:08:26,880
so thank you so much everybody and see

01:08:23,679 --> 01:08:26,880

YouTube URL: https://www.youtube.com/watch?v=s6vFsVzAtq0


