Title: Deploy 10 apps to Kubernetes with Cloud Foundry
Publication date: 2021-04-07
Playlist: Live Streams
Description: 
	
Captions: 
	00:00:09,440 --> 00:00:14,880
um

00:00:11,679 --> 00:00:15,679
all right we're live on twitch um okay

00:00:14,880 --> 00:00:18,480
we're live

00:00:15,679 --> 00:00:18,480
on youtube

00:00:21,279 --> 00:00:28,240
hey folks um welcome to our live stream

00:00:25,519 --> 00:00:29,679
uh my name is chadra kakintayo and i am

00:00:28,240 --> 00:00:31,679
a developer advocate

00:00:29,679 --> 00:00:33,040
at the cloud foundry foundation and

00:00:31,679 --> 00:00:36,559
today we are going to be

00:00:33,040 --> 00:00:38,399
deploying um 10 apps to kubernetes with

00:00:36,559 --> 00:00:41,040
cloudfront vca for kids

00:00:38,399 --> 00:00:42,079
and with me i have a couple of like i

00:00:41,040 --> 00:00:45,039
have people with me

00:00:42,079 --> 00:00:45,840
um ram and tiffany so i reminded me

00:00:45,039 --> 00:00:49,039
could you um

00:00:45,840 --> 00:00:52,399
just introduce yourselves

00:00:49,039 --> 00:00:56,160
oh you go first time thanks

00:00:52,399 --> 00:00:58,480
hey everyone good morning good afternoon

00:00:56,160 --> 00:00:59,680
good evening whichever part of the world

00:00:58,480 --> 00:01:02,719
you are in

00:00:59,680 --> 00:01:05,920
right now and welcome

00:01:02,719 --> 00:01:06,880
to what is possibly the first of many

00:01:05,920 --> 00:01:09,680
live streams

00:01:06,880 --> 00:01:12,400
uh that we are going to host about uh

00:01:09,680 --> 00:01:16,479
cloud foundry and kubernetes

00:01:12,400 --> 00:01:18,799
and all things um

00:01:16,479 --> 00:01:20,560
related to like modern app development

00:01:18,799 --> 00:01:25,280
and deployment

00:01:20,560 --> 00:01:28,400
my name is ram i am a developer advocate

00:01:25,280 --> 00:01:30,720
at the cloud foundry foundation and yeah

00:01:28,400 --> 00:01:33,840
it's a pleasure to be here with

00:01:30,720 --> 00:01:33,840
shadrach and tiffany

00:01:34,400 --> 00:01:40,400
yeah so uh i'm tiffany jernigan um

00:01:38,079 --> 00:01:41,680
also developer advocate however not at

00:01:40,400 --> 00:01:44,159
cloud foundry i'm

00:01:41,680 --> 00:01:45,119
at vmware so i'm the slight oddball also

00:01:44,159 --> 00:01:47,040
in the fact that

00:01:45,119 --> 00:01:48,240
for me it's morning and it's evening for

00:01:47,040 --> 00:01:50,560
them

00:01:48,240 --> 00:01:51,360
so people might be at various levels of

00:01:50,560 --> 00:01:54,479
tired

00:01:51,360 --> 00:01:57,280
just for different reasons yeah

00:01:54,479 --> 00:01:58,960
yeah yeah this is our first uh stream

00:01:57,280 --> 00:02:02,000
with all of us together so

00:01:58,960 --> 00:02:05,600
this will be fun yeah sure

00:02:02,000 --> 00:02:08,399
um so so just so you may be wondering so

00:02:05,600 --> 00:02:10,160
who is this particular stream for um

00:02:08,399 --> 00:02:12,160
this is just for anybody that wants to

00:02:10,160 --> 00:02:14,160
get started with kubernetes or

00:02:12,160 --> 00:02:15,280
um if you have experience deploying apps

00:02:14,160 --> 00:02:16,720
to quantities

00:02:15,280 --> 00:02:19,200
we show you how to do it the cloud

00:02:16,720 --> 00:02:20,640
foundry way um

00:02:19,200 --> 00:02:22,640
how fast you can easily deploy

00:02:20,640 --> 00:02:24,400
applications to cloud um to

00:02:22,640 --> 00:02:26,400
managers with cloud foundry and how you

00:02:24,400 --> 00:02:28,800
can easily

00:02:26,400 --> 00:02:31,040
get side with kubernetes so before we go

00:02:28,800 --> 00:02:32,800
um before we go to the plan of apps we

00:02:31,040 --> 00:02:34,879
just want to talk about certain

00:02:32,800 --> 00:02:36,160
things like what cloud manager is what

00:02:34,879 --> 00:02:39,360
safer kids is

00:02:36,160 --> 00:02:42,170
i'm just going to share my

00:02:39,360 --> 00:02:45,270
slides everybody real quick

00:02:42,170 --> 00:02:45,270
[Music]

00:02:47,599 --> 00:02:53,440
yeah so um so cloud foundry is basically

00:02:51,760 --> 00:02:55,440
a platform as a service that makes it

00:02:53,440 --> 00:02:56,000
easy to deploy and operate applications

00:02:55,440 --> 00:02:57,760
so

00:02:56,000 --> 00:02:59,200
um you can deploy whatever kind of

00:02:57,760 --> 00:03:00,159
application that you want to deploy on

00:02:59,200 --> 00:03:02,400
cloud foundry

00:03:00,159 --> 00:03:03,200
um it could be java it could be

00:03:02,400 --> 00:03:05,120
javascript

00:03:03,200 --> 00:03:06,400
could be ruby google whatever

00:03:05,120 --> 00:03:09,280
application you want

00:03:06,400 --> 00:03:10,480
you can easily deploy it on cloud 1g and

00:03:09,280 --> 00:03:13,200
um

00:03:10,480 --> 00:03:14,400
yeah that's basically what you can use

00:03:13,200 --> 00:03:16,879
cloud 4.

00:03:14,400 --> 00:03:17,440
the the best part of using cloud foundry

00:03:16,879 --> 00:03:20,319
is its

00:03:17,440 --> 00:03:22,319
developer experience um makes it very

00:03:20,319 --> 00:03:24,000
very easy for developers to

00:03:22,319 --> 00:03:26,080
deploy and operate the application even

00:03:24,000 --> 00:03:28,879
monitor your application etc

00:03:26,080 --> 00:03:29,680
gives you so many um so much flexibility

00:03:28,879 --> 00:03:31,040
um

00:03:29,680 --> 00:03:33,440
when it comes to deploying and

00:03:31,040 --> 00:03:35,760
monitoring your applications in general

00:03:33,440 --> 00:03:37,440
um next would be to talk about on sale

00:03:35,760 --> 00:03:39,760
for kids and i think tiffany would be

00:03:37,440 --> 00:03:43,200
the right person to talk about that

00:03:39,760 --> 00:03:45,440
so tiffany

00:03:43,200 --> 00:03:46,720
cool all right so like one of the things

00:03:45,440 --> 00:03:49,360
that we often hear

00:03:46,720 --> 00:03:51,120
is that team sport that with teams that

00:03:49,360 --> 00:03:53,760
work fast basically it's like okay how

00:03:51,120 --> 00:03:55,360
this past experience is awesome and then

00:03:53,760 --> 00:03:57,920
oh i really like kubernetes

00:03:55,360 --> 00:03:59,680
it's really good basically it's becoming

00:03:57,920 --> 00:04:00,560
the de facto way for people to manage

00:03:59,680 --> 00:04:03,040
their applications

00:04:00,560 --> 00:04:05,439
in production but unfortunately people

00:04:03,040 --> 00:04:08,560
are having to decide okay do i want to

00:04:05,439 --> 00:04:10,799
use pass or do i want to use kubernetes

00:04:08,560 --> 00:04:12,560
and is it like do i want to use pass to

00:04:10,799 --> 00:04:14,959
help the developer experience do i want

00:04:12,560 --> 00:04:19,280
to use kubernetes to help modernize

00:04:14,959 --> 00:04:20,720
up my platform operations so basically

00:04:19,280 --> 00:04:22,560
the cloud foundry community came

00:04:20,720 --> 00:04:24,560
together to solve the problem of

00:04:22,560 --> 00:04:26,720
having to decide between one or the

00:04:24,560 --> 00:04:28,160
other now people don't actually have to

00:04:26,720 --> 00:04:29,199
pick one or the other you can enjoy the

00:04:28,160 --> 00:04:31,919
convenience of having

00:04:29,199 --> 00:04:33,759
pass while operators can also ensure

00:04:31,919 --> 00:04:34,720
that the apps get deployed to kubernetes

00:04:33,759 --> 00:04:37,759
based infrastructure

00:04:34,720 --> 00:04:39,360
so like in short basically you can have

00:04:37,759 --> 00:04:42,000
that cf push experience

00:04:39,360 --> 00:04:43,360
if you've used cloud foundry before and

00:04:42,000 --> 00:04:46,000
then be able to just run

00:04:43,360 --> 00:04:47,440
either your applications that are in

00:04:46,000 --> 00:04:49,520
containers or

00:04:47,440 --> 00:04:50,800
have it build them for you with your

00:04:49,520 --> 00:04:52,720
code and you can just use

00:04:50,800 --> 00:04:55,120
cf push and you can run those

00:04:52,720 --> 00:04:58,080
applications on kubernetes

00:04:55,120 --> 00:04:58,400
and there's uh two links to kind of get

00:04:58,080 --> 00:05:00,479
to

00:04:58,400 --> 00:05:01,840
looking at cfr case there's the main

00:05:00,479 --> 00:05:04,720
website and since

00:05:01,840 --> 00:05:06,000
cf for caves is open source you can find

00:05:04,720 --> 00:05:08,560
it on github as well

00:05:06,000 --> 00:05:09,600
and of course you can contribute to um

00:05:08,560 --> 00:05:11,840
so

00:05:09,600 --> 00:05:12,960
also recently cf for kate's they just

00:05:11,840 --> 00:05:15,520
had uh

00:05:12,960 --> 00:05:16,400
the 1-0 release milestone so that just

00:05:15,520 --> 00:05:18,960
happened

00:05:16,400 --> 00:05:19,759
around the previous uh cloud foundry

00:05:18,960 --> 00:05:21,360
summit

00:05:19,759 --> 00:05:24,960
so you can take a look into some of the

00:05:21,360 --> 00:05:28,160
videos that have happened for that

00:05:24,960 --> 00:05:29,520
yeah thank you um tiffany so the next

00:05:28,160 --> 00:05:30,160
thing we probably want to do is just

00:05:29,520 --> 00:05:33,360
like

00:05:30,160 --> 00:05:35,360
um get started on deploying stuff

00:05:33,360 --> 00:05:36,960
uh before we go uh before we get started

00:05:35,360 --> 00:05:38,479
i just want to say that

00:05:36,960 --> 00:05:40,080
what you can like take away from this

00:05:38,479 --> 00:05:42,160
live stream but i hope

00:05:40,080 --> 00:05:43,840
um we take away from this live stream is

00:05:42,160 --> 00:05:45,520
um

00:05:43,840 --> 00:05:47,680
you need to understand how platforming

00:05:45,520 --> 00:05:48,000
makes you um deploying your applications

00:05:47,680 --> 00:05:51,199
to

00:05:48,000 --> 00:05:54,080
kubernetes is very easy and um

00:05:51,199 --> 00:05:54,639
what um platforms you can provide the um

00:05:54,080 --> 00:05:56,639
value

00:05:54,639 --> 00:05:58,400
platform you can provide your developer

00:05:56,639 --> 00:05:59,120
and development team in respect of your

00:05:58,400 --> 00:06:01,360
team size

00:05:59,120 --> 00:06:03,199
um could be it could be 10 could be 20

00:06:01,360 --> 00:06:04,720
it could just be an individual developer

00:06:03,199 --> 00:06:08,000
software educators for like

00:06:04,720 --> 00:06:10,560
every single um type of development team

00:06:08,000 --> 00:06:11,280
so uh would just show you how fast and

00:06:10,560 --> 00:06:15,199
how

00:06:11,280 --> 00:06:16,960
um powerful cloud for the focus is

00:06:15,199 --> 00:06:19,520
so the first thing i want to do is

00:06:16,960 --> 00:06:22,560
obviously just um deploy node app so

00:06:19,520 --> 00:06:25,360
um i'm going to keep going

00:06:22,560 --> 00:06:26,639
yeah sorry i'm sorry to just like

00:06:25,360 --> 00:06:28,720
interrupt you but

00:06:26,639 --> 00:06:31,360
i thought maybe i'll take a minute or

00:06:28,720 --> 00:06:33,440
two to set the stage for

00:06:31,360 --> 00:06:35,039
what the demo is actually going to be

00:06:33,440 --> 00:06:37,360
and talk a little bit about

00:06:35,039 --> 00:06:39,840
why we are doing that okay yeah yeah

00:06:37,360 --> 00:06:39,840
sure yeah

00:06:40,080 --> 00:06:43,680
yeah yeah i forgot about that for a

00:06:41,759 --> 00:06:46,840
second i'm so excited about you it's

00:06:43,680 --> 00:06:49,120
okay i talked fast too i'm like oh my

00:06:46,840 --> 00:06:52,800
gosh

00:06:49,120 --> 00:06:56,479
so i mean um both of you

00:06:52,800 --> 00:06:58,560
made some great points earlier about um

00:06:56,479 --> 00:07:00,080
you know developers having to choose

00:06:58,560 --> 00:07:02,880
between pass tooling

00:07:00,080 --> 00:07:03,680
and wanting to go the kubernetes route

00:07:02,880 --> 00:07:06,960
and

00:07:03,680 --> 00:07:07,759
um having to make choices and stuff like

00:07:06,960 --> 00:07:10,000
that so

00:07:07,759 --> 00:07:11,039
i think for a lot of teams whether

00:07:10,000 --> 00:07:14,319
they're like

00:07:11,039 --> 00:07:16,240
big teams uh in big organizations

00:07:14,319 --> 00:07:17,680
or they're just small teams that are

00:07:16,240 --> 00:07:20,639
starting out

00:07:17,680 --> 00:07:23,919
a lot of folks have come to realize that

00:07:20,639 --> 00:07:26,639
you can begin in a kubernetes native

00:07:23,919 --> 00:07:28,880
path it's not like kubernetes is only

00:07:26,639 --> 00:07:31,199
after we've scaled to like

00:07:28,880 --> 00:07:32,479
50 developers on the team or after we

00:07:31,199 --> 00:07:34,960
hit like a

00:07:32,479 --> 00:07:35,680
thousand concurrent users or something

00:07:34,960 --> 00:07:38,319
like that

00:07:35,680 --> 00:07:40,400
um kubernetes is uh like tiffany

00:07:38,319 --> 00:07:41,440
mentioned it's becoming the de facto

00:07:40,400 --> 00:07:45,120
standard for

00:07:41,440 --> 00:07:47,360
uh modern app development and so

00:07:45,120 --> 00:07:48,400
the developer experience obviously has

00:07:47,360 --> 00:07:51,440
to come in

00:07:48,400 --> 00:07:53,759
and you know

00:07:51,440 --> 00:07:55,120
make things less complicated and

00:07:53,759 --> 00:07:58,080
simplified

00:07:55,120 --> 00:07:59,360
so to say so what we wanted to

00:07:58,080 --> 00:08:02,639
demonstrate today

00:07:59,360 --> 00:08:05,599
is a set of

00:08:02,639 --> 00:08:07,360
exercises so to say that will basically

00:08:05,599 --> 00:08:09,199
alleviate a lot of the concerns that

00:08:07,360 --> 00:08:12,080
people might have so

00:08:09,199 --> 00:08:14,800
whenever we talk about a new tool um

00:08:12,080 --> 00:08:16,560
everybody has apprehensions about okay

00:08:14,800 --> 00:08:18,639
if there's an abstraction that you're

00:08:16,560 --> 00:08:20,000
introducing then you know you're you're

00:08:18,639 --> 00:08:24,879
bound to hit

00:08:20,000 --> 00:08:26,879
so-called law of leaky abstractions so

00:08:24,879 --> 00:08:27,919
and people are you know just i don't

00:08:26,879 --> 00:08:30,240
want to call

00:08:27,919 --> 00:08:31,120
developers and programmers a pessimistic

00:08:30,240 --> 00:08:32,800
lot um

00:08:31,120 --> 00:08:35,279
although it's not like far from the

00:08:32,800 --> 00:08:37,680
truth but um it's it's

00:08:35,279 --> 00:08:38,640
it's a set of valid concerns that folks

00:08:37,680 --> 00:08:40,959
have uh

00:08:38,640 --> 00:08:41,919
whether or not you know this will suit

00:08:40,959 --> 00:08:44,800
our workflows

00:08:41,919 --> 00:08:46,480
um whether or not cloud foundry will be

00:08:44,800 --> 00:08:48,160
able to handle the languages and

00:08:46,480 --> 00:08:50,800
frameworks that we use so

00:08:48,160 --> 00:08:51,760
uh maybe some of you use something as

00:08:50,800 --> 00:08:54,880
popular as

00:08:51,760 --> 00:08:56,080
like javascript and node.js maybe some

00:08:54,880 --> 00:08:59,920
folks are using

00:08:56,080 --> 00:09:01,839
uh closure or like scala or aka

00:08:59,920 --> 00:09:03,760
you know the there's there's folks out

00:09:01,839 --> 00:09:05,040
there that might be using something very

00:09:03,760 --> 00:09:08,720
niche and

00:09:05,040 --> 00:09:10,480
the cloud foundry promise is that

00:09:08,720 --> 00:09:12,959
the the community really has come

00:09:10,480 --> 00:09:15,600
together to ensure that

00:09:12,959 --> 00:09:16,320
every language and framework is

00:09:15,600 --> 00:09:19,519
supported

00:09:16,320 --> 00:09:23,120
so one of the

00:09:19,519 --> 00:09:26,080
recent data points that emerged from our

00:09:23,120 --> 00:09:27,680
cloud foundry user survey is cloud

00:09:26,080 --> 00:09:31,440
foundry

00:09:27,680 --> 00:09:33,760
is being used to deploy over 18

00:09:31,440 --> 00:09:35,279
different languages and frameworks at

00:09:33,760 --> 00:09:36,880
you know different scales so some folks

00:09:35,279 --> 00:09:40,000
are using it's a

00:09:36,880 --> 00:09:43,760
so cloud foundry deployments can vary

00:09:40,000 --> 00:09:46,560
anywhere between like uh 50 apps

00:09:43,760 --> 00:09:48,720
in production to well over a thousand

00:09:46,560 --> 00:09:51,360
applications in production

00:09:48,720 --> 00:09:52,880
and all kinds of different applications

00:09:51,360 --> 00:09:54,240
are

00:09:52,880 --> 00:09:56,080
making use of you know different

00:09:54,240 --> 00:09:58,880
languages and frameworks so

00:09:56,080 --> 00:10:01,040
we counted over 18 different languages

00:09:58,880 --> 00:10:03,680
and frameworks that have been tried and

00:10:01,040 --> 00:10:04,640
you know battle tested running on cloud

00:10:03,680 --> 00:10:06,480
foundry

00:10:04,640 --> 00:10:08,560
and i'm not including java in that

00:10:06,480 --> 00:10:10,560
because like where

00:10:08,560 --> 00:10:11,760
when it comes to like java and spring

00:10:10,560 --> 00:10:15,200
and stuff cloud foundry

00:10:11,760 --> 00:10:18,959
is obviously quite popular in that

00:10:15,200 --> 00:10:21,519
line so that is basically

00:10:18,959 --> 00:10:24,000
what we wanted to demonstrate today so

00:10:21,519 --> 00:10:26,880
10 different applications

00:10:24,000 --> 00:10:27,920
that are built in different frameworks

00:10:26,880 --> 00:10:31,279
and

00:10:27,920 --> 00:10:32,480
use different languages all deployed

00:10:31,279 --> 00:10:35,600
using cloud foundry

00:10:32,480 --> 00:10:38,560
um and we're throwing in uh

00:10:35,600 --> 00:10:39,360
some docker containers for good measure

00:10:38,560 --> 00:10:42,399
as well

00:10:39,360 --> 00:10:44,399
so uh yeah i just wanted to

00:10:42,399 --> 00:10:46,560
take a couple of minutes to set the

00:10:44,399 --> 00:10:47,519
stage up for what the demos are going to

00:10:46,560 --> 00:10:50,959
be

00:10:47,519 --> 00:10:54,000
and we've picked open source code bases

00:10:50,959 --> 00:10:54,560
as much as we could so some of the not

00:10:54,000 --> 00:10:56,240
some

00:10:54,560 --> 00:10:57,839
pretty much all of the code that we'll

00:10:56,240 --> 00:11:00,399
be using today is

00:10:57,839 --> 00:11:02,240
available out there on different repos

00:11:00,399 --> 00:11:08,079
that you can get to

00:11:02,240 --> 00:11:08,079
at any point if you wish to do so

00:11:10,320 --> 00:11:18,079
okay um thank you yeah thanks for that

00:11:14,399 --> 00:11:19,360
um so um let's get right into it so the

00:11:18,079 --> 00:11:21,760
first thing i'll be deploying is a

00:11:19,360 --> 00:11:23,760
node.js app so this particular just app

00:11:21,760 --> 00:11:26,800
just displays hello world and it's

00:11:23,760 --> 00:11:29,600
um part of the test apps for

00:11:26,800 --> 00:11:30,480
um cfo kids it's only on circle kids

00:11:29,600 --> 00:11:32,560
github repo

00:11:30,480 --> 00:11:33,760
so that's what i'm going to be doing now

00:11:32,560 --> 00:11:39,040
and i'm just going to

00:11:33,760 --> 00:11:39,040
share my screen so we can get started

00:11:40,399 --> 00:11:47,839
yeah so um i'm currently in

00:11:43,760 --> 00:11:51,839
the folder font size

00:11:47,839 --> 00:11:55,360
yeah i'm about to do that okay

00:11:51,839 --> 00:11:58,639
i think this is okay so

00:11:55,360 --> 00:11:59,920
okay yeah so i'm currently in the cfo

00:11:58,639 --> 00:12:02,160
kids um

00:11:59,920 --> 00:12:03,040
folder and i i'm currently in the node

00:12:02,160 --> 00:12:05,839
um

00:12:03,040 --> 00:12:08,079
folder and if i want ls so we have a

00:12:05,839 --> 00:12:10,240
package.json we also have a server

00:12:08,079 --> 00:12:12,160
so for me to deploy this to cloud

00:12:10,240 --> 00:12:13,440
foundry i just going to login into my

00:12:12,160 --> 00:12:16,399
cloud foundry cluster

00:12:13,440 --> 00:12:17,519
um running on gcloud on google cloud so

00:12:16,399 --> 00:12:20,320
just log in

00:12:17,519 --> 00:12:20,720
the api endpoint is already specified

00:12:20,320 --> 00:12:25,279
and

00:12:20,720 --> 00:12:27,600
um just need to

00:12:25,279 --> 00:12:27,600
um

00:12:31,440 --> 00:12:34,480
so i'm just going to move into an

00:12:33,040 --> 00:12:36,839
organization

00:12:34,480 --> 00:12:38,079
then select speed so we're going to use

00:12:36,839 --> 00:12:40,399
um

00:12:38,079 --> 00:12:41,440
live stream so um we're going to talk

00:12:40,399 --> 00:12:44,240
more about um

00:12:41,440 --> 00:12:44,560
what spaces and what organizations are

00:12:44,240 --> 00:12:47,760
so

00:12:44,560 --> 00:12:48,320
an organization is like um and let's

00:12:47,760 --> 00:12:52,079
just say an

00:12:48,320 --> 00:12:55,279
actual organization so um the space is

00:12:52,079 --> 00:12:56,560
um setting on points that you can deploy

00:12:55,279 --> 00:12:58,160
applications so it could be

00:12:56,560 --> 00:13:00,480
developments it could be tests it could

00:12:58,160 --> 00:13:02,240
be staging depends on how your entire

00:13:00,480 --> 00:13:05,680
development workflow works

00:13:02,240 --> 00:13:07,200
um so i named a space called live stream

00:13:05,680 --> 00:13:09,680
because obviously this is a live stream

00:13:07,200 --> 00:13:10,720
and that is where i'll be deploying um

00:13:09,680 --> 00:13:13,920
so to deploy

00:13:10,720 --> 00:13:14,399
um to deploy the app what i just need to

00:13:13,920 --> 00:13:16,880
do is

00:13:14,399 --> 00:13:17,680
yeah i just wanted to make a point here

00:13:16,880 --> 00:13:21,040
so

00:13:17,680 --> 00:13:22,320
one of the interesting problems that

00:13:21,040 --> 00:13:24,959
gets talked about

00:13:22,320 --> 00:13:26,000
whenever we speak uh about kubernetes

00:13:24,959 --> 00:13:29,120
based deployment

00:13:26,000 --> 00:13:32,720
is multi-tenancy um

00:13:29,120 --> 00:13:34,800
and and in this case um

00:13:32,720 --> 00:13:37,360
shadrach you know logged into a

00:13:34,800 --> 00:13:40,560
kubernetes endpoint and then

00:13:37,360 --> 00:13:43,680
the admin whoever

00:13:40,560 --> 00:13:44,959
had set up an organization for that user

00:13:43,680 --> 00:13:48,320
and they had set up like

00:13:44,959 --> 00:13:48,959
different spaces so spaces are sort of

00:13:48,320 --> 00:13:52,399
where the

00:13:48,959 --> 00:13:55,199
apps tend to get staged and

00:13:52,399 --> 00:13:56,880
you can have organizations and spaces

00:13:55,199 --> 00:13:58,880
within these organizations so you can

00:13:56,880 --> 00:14:02,959
create as many as you want and

00:13:58,880 --> 00:14:04,079
all of those tenants basically sit next

00:14:02,959 --> 00:14:07,199
to each other and

00:14:04,079 --> 00:14:09,440
cloud foundry just out of the box solves

00:14:07,199 --> 00:14:10,480
this problem of multi-tenancy over

00:14:09,440 --> 00:14:16,720
kubernetes

00:14:10,480 --> 00:14:18,240
um just wanted to throw that in there

00:14:16,720 --> 00:14:20,240
thank you ram thank you around for that

00:14:18,240 --> 00:14:21,519
so um to get started i just

00:14:20,240 --> 00:14:23,279
need to do now is to push the

00:14:21,519 --> 00:14:25,839
application so um to

00:14:23,279 --> 00:14:27,360
push my application to cloud foundry i

00:14:25,839 --> 00:14:28,320
just need to run a single command which

00:14:27,360 --> 00:14:31,600
is um

00:14:28,320 --> 00:14:33,680
cf push then give it

00:14:31,600 --> 00:14:35,440
the name of the app so let's just say

00:14:33,680 --> 00:14:38,880
test

00:14:35,440 --> 00:14:40,740
node and

00:14:38,880 --> 00:14:43,680
we run the application

00:14:40,740 --> 00:14:47,120
[Music]

00:14:43,680 --> 00:14:48,880
and it takes a few seconds to

00:14:47,120 --> 00:14:50,720
push the app so it's currently pushing

00:14:48,880 --> 00:14:54,000
the app test node to

00:14:50,720 --> 00:14:55,839
um org sample.org

00:14:54,000 --> 00:14:59,360
then the space which is live stream as

00:14:55,839 --> 00:15:01,920
admin it is currently uploading on the

00:14:59,360 --> 00:15:02,880
and staging the app and tracing the logs

00:15:01,920 --> 00:15:08,000
for the app

00:15:02,880 --> 00:15:08,000
so it takes a few seconds to deploy

00:15:10,839 --> 00:15:13,839
and

00:15:22,320 --> 00:15:27,360
okay so what's basically happening here

00:15:28,399 --> 00:15:31,519
yeah yeah so um what's basically doing

00:15:30,959 --> 00:15:35,440
is

00:15:31,519 --> 00:15:37,600
um it's connecting to um

00:15:35,440 --> 00:15:38,880
okay okay that's too fast okay i'm just

00:15:37,600 --> 00:15:43,680
going to explain

00:15:38,880 --> 00:15:43,680
go up and explain it real quick um

00:15:43,839 --> 00:15:47,120
so it is automatically collect connected

00:15:46,160 --> 00:15:50,399
to um

00:15:47,120 --> 00:15:52,240
the workspace where um we deploy

00:15:50,399 --> 00:15:54,480
where we connected our gcloud to and

00:15:52,240 --> 00:15:55,680
it's currently searching for build packs

00:15:54,480 --> 00:15:57,920
that matches

00:15:55,680 --> 00:15:59,680
um the application we've deployed so as

00:15:57,920 --> 00:16:02,480
you can see we have um

00:15:59,680 --> 00:16:04,639
like a two bit view packs node engine we

00:16:02,480 --> 00:16:06,160
also have um npm installed so basically

00:16:04,639 --> 00:16:09,279
it's just pulling in the nude

00:16:06,160 --> 00:16:12,399
um butte pack that has npm and um

00:16:09,279 --> 00:16:14,240
um um that npm basically so

00:16:12,399 --> 00:16:15,519
um our application is in node app so

00:16:14,240 --> 00:16:17,360
crowdfunding automatically

00:16:15,519 --> 00:16:19,199
recognizes um the type of application

00:16:17,360 --> 00:16:20,880
that we have and begins to use the

00:16:19,199 --> 00:16:22,000
specific build pack for it which is the

00:16:20,880 --> 00:16:23,759
packet to build pack

00:16:22,000 --> 00:16:25,440
um which is uh the cloud foundries hd

00:16:23,759 --> 00:16:26,959
cloud foundry project and it's

00:16:25,440 --> 00:16:28,480
based on the cloud native boot back

00:16:26,959 --> 00:16:31,600
specification then

00:16:28,480 --> 00:16:35,920
from there installs um it and

00:16:31,600 --> 00:16:37,040
begins to configure the environment and

00:16:35,920 --> 00:16:40,160
from there it's busy

00:16:37,040 --> 00:16:42,240
of course it picks up um a

00:16:40,160 --> 00:16:44,399
the command for starting um the

00:16:42,240 --> 00:16:46,079
application which is um node server.js

00:16:44,399 --> 00:16:48,399
that's basically most of the way

00:16:46,079 --> 00:16:50,240
we actually deploy up and we use stats

00:16:48,399 --> 00:16:52,000
node applications in the javascript

00:16:50,240 --> 00:16:53,279
community so it's just node server.js

00:16:52,000 --> 00:16:56,079
you always have a server

00:16:53,279 --> 00:16:56,880
that starts our entire application then

00:16:56,079 --> 00:17:00,000
it builds the

00:16:56,880 --> 00:17:00,800
entire application and starts the

00:17:00,000 --> 00:17:04,160
application

00:17:00,800 --> 00:17:06,640
so as you can see our instances was

00:17:04,160 --> 00:17:07,439
starting and we have the name of the app

00:17:06,640 --> 00:17:09,439
which is

00:17:07,439 --> 00:17:10,480
um test node we also have the request

00:17:09,439 --> 00:17:13,120
requested states

00:17:10,480 --> 00:17:14,880
which is um started then the route so

00:17:13,120 --> 00:17:16,319
the route is a unique link

00:17:14,880 --> 00:17:17,600
where we can find the application

00:17:16,319 --> 00:17:18,799
deployed live so we're going to be

00:17:17,600 --> 00:17:20,959
checking that

00:17:18,799 --> 00:17:22,240
in a few seconds we have number of

00:17:20,959 --> 00:17:23,919
instances and the

00:17:22,240 --> 00:17:26,400
memory usage of the app and also the

00:17:23,919 --> 00:17:27,679
stats command which is node server.js

00:17:26,400 --> 00:17:29,520
and if you can see the states the

00:17:27,679 --> 00:17:33,600
application is currently running

00:17:29,520 --> 00:17:37,039
um the memory so if i should click on

00:17:33,600 --> 00:17:38,880
this okay so i'm just

00:17:37,039 --> 00:17:41,280
i just have to share this particular

00:17:38,880 --> 00:17:41,280
screen

00:17:41,919 --> 00:17:46,960
okay so this is the um this is the rouse

00:17:45,520 --> 00:17:47,679
that was generated when we deployed our

00:17:46,960 --> 00:17:51,120
application

00:17:47,679 --> 00:17:52,640
which is test node then um so the reason

00:17:51,120 --> 00:17:54,240
why the connection is

00:17:52,640 --> 00:17:55,919
no prior is private it's not private

00:17:54,240 --> 00:17:56,720
it's because it's on http and it's also

00:17:55,919 --> 00:17:58,400
an ip

00:17:56,720 --> 00:18:01,840
so it doesn't really affect you in any

00:17:58,400 --> 00:18:01,840
way so if i should click on this

00:18:02,080 --> 00:18:06,400
we can see um hello world so this is our

00:18:05,679 --> 00:18:09,600
application

00:18:06,400 --> 00:18:11,520
deployed live um using cloud foundry

00:18:09,600 --> 00:18:13,039
so that's all there is to it there's not

00:18:11,520 --> 00:18:15,039
so much um that there is

00:18:13,039 --> 00:18:16,720
deploying apps on cloud foundry um with

00:18:15,039 --> 00:18:18,080
sale for kids there's not so much so

00:18:16,720 --> 00:18:21,200
that's basically

00:18:18,080 --> 00:18:23,440
or um what we just done is we've just um

00:18:21,200 --> 00:18:24,799
deployed an application to kubernetes

00:18:23,440 --> 00:18:26,080
with cloud foundry actually

00:18:24,799 --> 00:18:28,880
one thing you've noticed is we did not

00:18:26,080 --> 00:18:31,360
write any any um yamu

00:18:28,880 --> 00:18:32,320
file we did not do any specific special

00:18:31,360 --> 00:18:34,400
configuration

00:18:32,320 --> 00:18:35,600
all we just had to do was just to run a

00:18:34,400 --> 00:18:37,760
specific command

00:18:35,600 --> 00:18:38,799
cf push and name of the app and we are

00:18:37,760 --> 00:18:42,160
good to go

00:18:38,799 --> 00:18:45,679
so um this does that

00:18:42,160 --> 00:18:48,000
um for the next for my next trick

00:18:45,679 --> 00:18:49,840
i would be deploying a full application

00:18:48,000 --> 00:18:52,000
which is a currency converter

00:18:49,840 --> 00:18:53,840
with cloud foundry so i mean the what so

00:18:52,000 --> 00:18:55,919
the most tutorials we see these days

00:18:53,840 --> 00:18:57,440
most demos this is just hello world but

00:18:55,919 --> 00:19:00,559
we need to take it like up a bit

00:18:57,440 --> 00:19:01,919
show how it works for umbreo in the

00:19:00,559 --> 00:19:05,440
rewards scenario so

00:19:01,919 --> 00:19:09,679
i'm just going to quickly move into um

00:19:05,440 --> 00:19:12,480
the sorry into the

00:19:09,679 --> 00:19:14,000
folder for the application that i'm

00:19:12,480 --> 00:19:17,520
going to deploy so it's going to take

00:19:14,000 --> 00:19:22,559
just have to navigate towards that

00:19:17,520 --> 00:19:22,559
um so bear with me

00:19:22,960 --> 00:19:25,840
um

00:19:27,120 --> 00:19:30,160
so it's a single page application built

00:19:29,360 --> 00:19:33,600
with node

00:19:30,160 --> 00:19:36,480
and so let me just quickly show you

00:19:33,600 --> 00:19:38,240
what contains my particular this

00:19:36,480 --> 00:19:40,960
particular um

00:19:38,240 --> 00:19:41,679
folder so of course the license readme

00:19:40,960 --> 00:19:44,160
the md

00:19:41,679 --> 00:19:45,840
just savage it's just how a basic node

00:19:44,160 --> 00:19:49,840
application should look like

00:19:45,840 --> 00:19:54,480
um so to deploy specify just cf push

00:19:49,840 --> 00:19:58,559
then let's call it node sba

00:19:54,480 --> 00:20:00,160
then just put demo and push

00:19:58,559 --> 00:20:01,919
so it will go through the same steps

00:20:00,160 --> 00:20:04,080
i've deployed i've explained

00:20:01,919 --> 00:20:05,440
um it's going to first recognize the

00:20:04,080 --> 00:20:07,679
type of application

00:20:05,440 --> 00:20:08,640
that has been um that is currently being

00:20:07,679 --> 00:20:10,960
pushed

00:20:08,640 --> 00:20:12,320
packaged the files that is needed to the

00:20:10,960 --> 00:20:15,840
um uploaded to the um

00:20:12,320 --> 00:20:18,880
saturday server and connects to

00:20:15,840 --> 00:20:22,240
um api the cloud foundry api

00:20:18,880 --> 00:20:25,840
and begins to deploy so

00:20:22,240 --> 00:20:28,960
it takes a few seconds also

00:20:25,840 --> 00:20:30,960
so are we going to see the same um

00:20:28,960 --> 00:20:32,799
sort of build packs and other things

00:20:30,960 --> 00:20:36,080
here

00:20:32,799 --> 00:20:39,360
yeah yeah because it's the new

00:20:36,080 --> 00:20:40,000
app yeah the files that get uploaded

00:20:39,360 --> 00:20:44,240
here

00:20:40,000 --> 00:20:45,840
is um all of these things that you just

00:20:44,240 --> 00:20:49,039
showed so like

00:20:45,840 --> 00:20:51,200
server.js and yeah yeah so for yeah for

00:20:49,039 --> 00:20:54,159
the most part it will only in

00:20:51,200 --> 00:20:55,919
um deploy every single thing except the

00:20:54,159 --> 00:20:57,760
node modules folder

00:20:55,919 --> 00:20:59,840
so the node nodes folder is extremely

00:20:57,760 --> 00:21:01,760
large yeah it does not need

00:20:59,840 --> 00:21:03,200
to install that it would install it on

00:21:01,760 --> 00:21:04,960
the cloud running server by itself with

00:21:03,200 --> 00:21:07,520
the node.js built back there is that

00:21:04,960 --> 00:21:08,799
um has npm so if you can see it does

00:21:07,520 --> 00:21:10,559
stop mtm here

00:21:08,799 --> 00:21:12,400
and it also runs most of the npm

00:21:10,559 --> 00:21:15,679
commands so you do not need to upload

00:21:12,400 --> 00:21:18,640
automatically does not upload your um

00:21:15,679 --> 00:21:19,679
your node node modules folder so you

00:21:18,640 --> 00:21:22,880
don't need to do any

00:21:19,679 --> 00:21:23,440
kit ignore it just it just automatically

00:21:22,880 --> 00:21:25,280
does not

00:21:23,440 --> 00:21:26,880
deploy a new folder it does everything

00:21:25,280 --> 00:21:28,640
when it's um

00:21:26,880 --> 00:21:30,799
so as you can see our application has

00:21:28,640 --> 00:21:33,919
started a few seconds

00:21:30,799 --> 00:21:35,600
um node spa demo started then also

00:21:33,919 --> 00:21:36,240
generated the route for us to check it

00:21:35,600 --> 00:21:38,400
out

00:21:36,240 --> 00:21:39,440
and um also the start command the

00:21:38,400 --> 00:21:41,440
instances it's

00:21:39,440 --> 00:21:42,840
just the same process so if i should

00:21:41,440 --> 00:21:44,559
click on this link to go to my

00:21:42,840 --> 00:21:50,400
application

00:21:44,559 --> 00:21:50,400
um let me also share my browser

00:21:51,440 --> 00:21:59,840
okay so this is the generated route

00:21:54,640 --> 00:21:59,840
then i should click on this

00:22:01,679 --> 00:22:04,799
so this is this is our application

00:22:03,039 --> 00:22:05,280
deployed live i mean we do not need to

00:22:04,799 --> 00:22:07,120
do any

00:22:05,280 --> 00:22:08,559
anything specific anything special just

00:22:07,120 --> 00:22:11,039
a single command so

00:22:08,559 --> 00:22:13,520
um it shows on the currency current

00:22:11,039 --> 00:22:17,679
currency rate as it gets to the um

00:22:13,520 --> 00:22:21,919
euro so exchange rates

00:22:17,679 --> 00:22:25,120
just basically grabs historical rates

00:22:21,919 --> 00:22:27,440
and okay so this is for my end

00:22:25,120 --> 00:22:28,559
yeah it has to happen during a demo

00:22:27,440 --> 00:22:30,960
right so yeah

00:22:28,559 --> 00:22:31,679
it always happens yeah so i can also

00:22:30,960 --> 00:22:33,919
make um

00:22:31,679 --> 00:22:35,120
converts currency if i but that would

00:22:33,919 --> 00:22:38,000
just take too long so

00:22:35,120 --> 00:22:40,400
um yeah that's it we just deployed two

00:22:38,000 --> 00:22:41,039
different node apps to um cloud 400

00:22:40,400 --> 00:22:43,600
without

00:22:41,039 --> 00:22:45,440
even doing anything special just a

00:22:43,600 --> 00:22:46,400
single command which is safe push then

00:22:45,440 --> 00:22:49,600
the app name

00:22:46,400 --> 00:22:52,799
and via live so yeah that's pretty much

00:22:49,600 --> 00:22:54,480
how you can deploy um a nude

00:22:52,799 --> 00:22:56,159
app to save for kids clapham for

00:22:54,480 --> 00:22:58,640
kubernetes um

00:22:56,159 --> 00:23:00,400
as fast as possible very easy you don't

00:22:58,640 --> 00:23:02,880
need to know any like

00:23:00,400 --> 00:23:03,440
serious stuff just one single command cf

00:23:02,880 --> 00:23:05,440
push

00:23:03,440 --> 00:23:06,480
and your application would be live for

00:23:05,440 --> 00:23:09,440
you to test

00:23:06,480 --> 00:23:10,159
and you can also add certain things like

00:23:09,440 --> 00:23:12,880
ssl

00:23:10,159 --> 00:23:15,120
if you want um you can add or connect a

00:23:12,880 --> 00:23:17,120
domain name to it if you want

00:23:15,120 --> 00:23:18,880
so yeah that's pretty much how you can

00:23:17,120 --> 00:23:21,679
deploy a node

00:23:18,880 --> 00:23:23,120
app so for let's just reiterate i've

00:23:21,679 --> 00:23:25,840
deployed a

00:23:23,120 --> 00:23:26,159
static node app which is um just it

00:23:25,840 --> 00:23:28,640
please

00:23:26,159 --> 00:23:31,440
and displays hello world technic i'm

00:23:28,640 --> 00:23:34,000
typical for a typical demo then i went

00:23:31,440 --> 00:23:34,880
um up and deployed the full stack

00:23:34,000 --> 00:23:37,039
application

00:23:34,880 --> 00:23:38,400
which has a client and server side and

00:23:37,039 --> 00:23:40,960
it's built with node

00:23:38,400 --> 00:23:42,720
and i deployed it on cloud foundry as

00:23:40,960 --> 00:23:45,919
fan was really really fast so

00:23:42,720 --> 00:23:46,960
that's how you can um deploy a node.js

00:23:45,919 --> 00:23:48,559
application to

00:23:46,960 --> 00:23:50,320
see a card running for kubernetes which

00:23:48,559 --> 00:23:52,880
i think is pretty cool and fast

00:23:50,320 --> 00:23:54,799
personally for myself i i'm not so good

00:23:52,880 --> 00:23:56,720
with kubernetes i'm also i'm just like

00:23:54,799 --> 00:23:58,320
learning myself so cloud funny makes it

00:23:56,720 --> 00:23:59,919
is very easy for me to interact with

00:23:58,320 --> 00:24:02,000
kubernetes and actually do stuff

00:23:59,919 --> 00:24:03,919
and companies to tell most of the

00:24:02,000 --> 00:24:04,720
technical know-how that goes on on the

00:24:03,919 --> 00:24:05,840
ground

00:24:04,720 --> 00:24:07,600
when it comes to interfacing with

00:24:05,840 --> 00:24:09,200
kubernetes so yeah that's one of the

00:24:07,600 --> 00:24:11,600
reasons why i love cloud foundry

00:24:09,200 --> 00:24:12,799
um so i think the next stop is

00:24:11,600 --> 00:24:16,480
comparable

00:24:12,799 --> 00:24:18,559
to a lot of the other you know very fast

00:24:16,480 --> 00:24:19,600
jam stack deployments that we are seeing

00:24:18,559 --> 00:24:22,240
these days

00:24:19,600 --> 00:24:24,159
um would cloud foundry work with those

00:24:22,240 --> 00:24:26,159
technologies

00:24:24,159 --> 00:24:27,600
yeah yeah sure cloudfront is ready ready

00:24:26,159 --> 00:24:29,600
and part two tested for

00:24:27,600 --> 00:24:31,279
any single technology you want to jump

00:24:29,600 --> 00:24:32,320
without jump stack whether your static

00:24:31,279 --> 00:24:35,440
sites etc

00:24:32,320 --> 00:24:37,760
so also be showing a static site example

00:24:35,440 --> 00:24:38,480
um much later in this live stream so

00:24:37,760 --> 00:24:39,919
yeah so

00:24:38,480 --> 00:24:42,400
much as i would like so crafter

00:24:39,919 --> 00:24:44,960
indicators for every single part of the

00:24:42,400 --> 00:24:46,559
software development ecosystem so next

00:24:44,960 --> 00:24:48,080
up would be tiffany tiffany would just

00:24:46,559 --> 00:24:50,000
take us through some

00:24:48,080 --> 00:24:52,400
i'm deploying a couple of applications

00:24:50,000 --> 00:24:55,200
and then ram takes over

00:24:52,400 --> 00:24:56,400
and going like that so tiffany the stage

00:24:55,200 --> 00:24:59,520
is yours

00:24:56,400 --> 00:25:03,279
oh thanks all right let's see

00:24:59,520 --> 00:25:06,320
okay cool i assume you can see my screen

00:25:03,279 --> 00:25:07,760
yes okay so first i just wanted to show

00:25:06,320 --> 00:25:09,440
like worse than these things are

00:25:07,760 --> 00:25:10,960
that i'm gonna be running so i'm gonna

00:25:09,440 --> 00:25:13,760
be running uh

00:25:10,960 --> 00:25:15,679
like like the node one that was just

00:25:13,760 --> 00:25:18,480
saying hello world i'm just gonna show

00:25:15,679 --> 00:25:18,799
example of doing that in python so if

00:25:18,480 --> 00:25:21,200
you

00:25:18,799 --> 00:25:22,159
go to cloud foundry acf acceptance tests

00:25:21,200 --> 00:25:24,640
there's

00:25:22,159 --> 00:25:25,520
tests in multiple different languages so

00:25:24,640 --> 00:25:27,279
if you want to just like

00:25:25,520 --> 00:25:28,640
test something really simple to make

00:25:27,279 --> 00:25:29,440
sure everything works properly you can

00:25:28,640 --> 00:25:31,039
do that so

00:25:29,440 --> 00:25:33,039
if you just like scroll here it's just

00:25:31,039 --> 00:25:36,559
it's very short

00:25:33,039 --> 00:25:37,760
it sets up a server and then basically

00:25:36,559 --> 00:25:41,520
just says hello

00:25:37,760 --> 00:25:42,640
python world another application that

00:25:41,520 --> 00:25:45,600
i'm going to be showing

00:25:42,640 --> 00:25:46,159
is spring music so basically if you've

00:25:45,600 --> 00:25:49,679
never

00:25:46,159 --> 00:25:51,520
used java before there's spring which

00:25:49,679 --> 00:25:52,799
helps make it a lot easier and quicker

00:25:51,520 --> 00:25:54,240
to be able to create some of your

00:25:52,799 --> 00:25:56,400
applications

00:25:54,240 --> 00:25:58,799
you can just go i think it might just be

00:25:56,400 --> 00:26:00,720
like spring.io or something

00:25:58,799 --> 00:26:02,120
there's there's yeah if you want to just

00:26:00,720 --> 00:26:04,240
start for the first time there's

00:26:02,120 --> 00:26:07,440
start.spring.io

00:26:04,240 --> 00:26:11,279
and so um basically for this one

00:26:07,440 --> 00:26:12,159
um it's a little more complicated in the

00:26:11,279 --> 00:26:14,159
sense of

00:26:12,159 --> 00:26:16,000
um first you have to use gradle to

00:26:14,159 --> 00:26:18,640
actually build your application

00:26:16,000 --> 00:26:20,240
and then you can go and either if you

00:26:18,640 --> 00:26:21,279
want you can just like run it locally to

00:26:20,240 --> 00:26:24,559
make sure everything works

00:26:21,279 --> 00:26:26,799
there and then you can end up also using

00:26:24,559 --> 00:26:28,559
cf to do a cf push once you've actually

00:26:26,799 --> 00:26:30,320
built it

00:26:28,559 --> 00:26:31,600
and then this application basically

00:26:30,320 --> 00:26:35,279
which i'll show also

00:26:31,600 --> 00:26:38,720
um it has a different like

00:26:35,279 --> 00:26:39,760
artists with uh albums and things like

00:26:38,720 --> 00:26:43,279
that

00:26:39,760 --> 00:26:46,080
so the uh third one or like the other

00:26:43,279 --> 00:26:48,720
one that i'm gonna be showing is in go

00:26:46,080 --> 00:26:50,720
so uh this one these ones are both the

00:26:48,720 --> 00:26:53,840
last two are both under cloud

00:26:50,720 --> 00:26:53,840
cloud foundry sample

00:27:05,120 --> 00:27:08,640
the environment variables are and

00:27:06,799 --> 00:27:09,120
there's just like a few different things

00:27:08,640 --> 00:27:11,200
that you can

00:27:09,120 --> 00:27:12,720
different endpoints that are set up for

00:27:11,200 --> 00:27:14,559
the web ui so

00:27:12,720 --> 00:27:15,919
i will kind of show what all those

00:27:14,559 --> 00:27:21,600
things are in it

00:27:15,919 --> 00:27:24,399
when i actually run them so oops

00:27:21,600 --> 00:27:25,760
okay so basically i pulled down

00:27:24,399 --> 00:27:28,960
everything already

00:27:25,760 --> 00:27:29,840
um so the first thing that i'm going to

00:27:28,960 --> 00:27:33,120
end up running

00:27:29,840 --> 00:27:34,799
is just the uh go app

00:27:33,120 --> 00:27:36,559
since it takes a little bit longer so

00:27:34,799 --> 00:27:37,760
that way i can sort of paralyze some of

00:27:36,559 --> 00:27:40,880
this

00:27:37,760 --> 00:27:42,559
so um basically if i just go to the go

00:27:40,880 --> 00:27:45,120
app

00:27:42,559 --> 00:27:45,919
you can see all the different things all

00:27:45,120 --> 00:27:47,840
the things in here

00:27:45,919 --> 00:27:49,520
are basically what i just pulled down

00:27:47,840 --> 00:27:51,840
from uh

00:27:49,520 --> 00:27:53,120
from that site so depending on how you

00:27:51,840 --> 00:27:56,080
want to name it

00:27:53,120 --> 00:27:57,600
like there's a manifest diameter you can

00:27:56,080 --> 00:28:00,480
decide if you want to have

00:27:57,600 --> 00:28:02,399
randomization at the end of your

00:28:00,480 --> 00:28:04,640
application name if you

00:28:02,399 --> 00:28:06,159
do if you did just a cf push and didn't

00:28:04,640 --> 00:28:07,919
give it a name it would take your

00:28:06,159 --> 00:28:09,919
directory folder and it depending on

00:28:07,919 --> 00:28:11,679
whether you want randomization or not

00:28:09,919 --> 00:28:13,600
it could tack on something random at the

00:28:11,679 --> 00:28:14,799
end of it which is useful especially if

00:28:13,600 --> 00:28:18,000
you are running in

00:28:14,799 --> 00:28:20,080
the same application name or

00:28:18,000 --> 00:28:21,279
it whether it's in the same space or in

00:28:20,080 --> 00:28:24,000
a different one because

00:28:21,279 --> 00:28:24,960
it's all using the same like the same

00:28:24,000 --> 00:28:28,159
static ip

00:28:24,960 --> 00:28:31,200
and however you set it up so

00:28:28,159 --> 00:28:31,679
if we just do a cf push and i'm just

00:28:31,200 --> 00:28:35,840
going to

00:28:31,679 --> 00:28:35,840
call this the same thing go app

00:28:36,640 --> 00:28:40,080
so i'm running in a different cluster

00:28:38,799 --> 00:28:42,240
since i'm not

00:28:40,080 --> 00:28:43,520
working for cloud foundry and it just

00:28:42,240 --> 00:28:45,840
seemed easier with

00:28:43,520 --> 00:28:48,159
how the setup would be of access and

00:28:45,840 --> 00:28:50,640
permissions and all that kind of stuff

00:28:48,159 --> 00:28:51,679
um so while this one is setting up i'm

00:28:50,640 --> 00:28:52,480
going to kick off some of the other ones

00:28:51,679 --> 00:28:55,600
then come back

00:28:52,480 --> 00:28:55,600
to these other ones

00:28:56,480 --> 00:28:59,520
and apparently my screen just does not

00:28:58,080 --> 00:29:02,240
like me today all right

00:28:59,520 --> 00:29:04,880
so the next one i'm going to run is uh

00:29:02,240 --> 00:29:07,520
spring music

00:29:04,880 --> 00:29:09,279
so to also just like show how if i did

00:29:07,520 --> 00:29:11,520
just a cf push i'm just going to run

00:29:09,279 --> 00:29:13,200
see a push on this one and not actually

00:29:11,520 --> 00:29:16,080
give it the name so we can take a look

00:29:13,200 --> 00:29:19,360
at what that ends up being

00:29:16,080 --> 00:29:22,559
and then the last one i am going to run

00:29:19,360 --> 00:29:25,600
is the um

00:29:22,559 --> 00:29:27,200
is the python one

00:29:25,600 --> 00:29:28,640
and that again is like the hello world

00:29:27,200 --> 00:29:30,799
one

00:29:28,640 --> 00:29:32,720
so you can just for this one there you

00:29:30,799 --> 00:29:34,399
can see there's just only a few files

00:29:32,720 --> 00:29:36,080
like you you can kind of compare like

00:29:34,399 --> 00:29:37,919
seeing how many different things

00:29:36,080 --> 00:29:39,360
are in one directory versus and the

00:29:37,919 --> 00:29:42,480
other like this

00:29:39,360 --> 00:29:43,760
uh the go on has multiple uh directories

00:29:42,480 --> 00:29:45,200
in there that have

00:29:43,760 --> 00:29:46,799
uh your libraries and all the other

00:29:45,200 --> 00:29:49,520
things that you're gonna be running

00:29:46,799 --> 00:29:51,039
so if i also do see a push here and i

00:29:49,520 --> 00:29:53,120
can just call it python

00:29:51,039 --> 00:29:55,360
hello or something like that whatever i

00:29:53,120 --> 00:29:58,159
feel like doing

00:29:55,360 --> 00:29:59,039
so um depending on like how big your

00:29:58,159 --> 00:30:02,240
application is

00:29:59,039 --> 00:30:02,799
it obviously can take more time so like

00:30:02,240 --> 00:30:04,399
some of the

00:30:02,799 --> 00:30:05,840
applications that were just run those

00:30:04,399 --> 00:30:07,760
took maybe like a minute

00:30:05,840 --> 00:30:10,080
or some can take two it just kind of

00:30:07,760 --> 00:30:12,640
depends on again like how much how much

00:30:10,080 --> 00:30:16,080
code do you have how much is there to do

00:30:12,640 --> 00:30:17,360
so here um we can kind of we can see

00:30:16,080 --> 00:30:19,039
like what was happening with the other

00:30:17,360 --> 00:30:21,440
ones so basically

00:30:19,039 --> 00:30:22,640
it's checking okay what what applica

00:30:21,440 --> 00:30:23,679
like what kind of application is this

00:30:22,640 --> 00:30:25,760
what build packs

00:30:23,679 --> 00:30:27,520
picato build packs today and paquetto

00:30:25,760 --> 00:30:29,679
bulk packs are open source

00:30:27,520 --> 00:30:31,520
uh go like packages that are written and

00:30:29,679 --> 00:30:32,960
go and it doesn't only work

00:30:31,520 --> 00:30:34,799
obviously it's using it for all of these

00:30:32,960 --> 00:30:37,919
so it's not just only

00:30:34,799 --> 00:30:38,320
ingo so uh basically like it's checking

00:30:37,919 --> 00:30:40,080
okay

00:30:38,320 --> 00:30:41,600
so there's for the distribution there's

00:30:40,080 --> 00:30:41,919
build and then there's the proc file and

00:30:41,600 --> 00:30:44,799
it

00:30:41,919 --> 00:30:46,640
picks has like the versions and um

00:30:44,799 --> 00:30:48,799
basically then it checks okay

00:30:46,640 --> 00:30:49,679
does this did i already do this does

00:30:48,799 --> 00:30:51,919
this already exist

00:30:49,679 --> 00:30:53,440
and i'm pushing this to my docker

00:30:51,919 --> 00:30:56,720
registry

00:30:53,440 --> 00:30:59,600
so it just like basically in order to do

00:30:56,720 --> 00:31:01,600
cape in order for kpac which is what is

00:30:59,600 --> 00:31:03,200
going through and building these things

00:31:01,600 --> 00:31:05,519
um building your applications you need

00:31:03,200 --> 00:31:08,799
to have a container registry signed in

00:31:05,519 --> 00:31:10,960
so like for me i just am using docker

00:31:08,799 --> 00:31:12,720
hub since it's pretty easy to just

00:31:10,960 --> 00:31:15,120
have that logged in since i have docker

00:31:12,720 --> 00:31:17,200
for mac running for instance

00:31:15,120 --> 00:31:19,200
so then what it goes and does after that

00:31:17,200 --> 00:31:21,760
is it's like okay so i need to actually

00:31:19,200 --> 00:31:22,320
i'm installing go and so depending on

00:31:21,760 --> 00:31:24,880
like

00:31:22,320 --> 00:31:26,080
how you can change some of the different

00:31:24,880 --> 00:31:27,039
things that are happening and what build

00:31:26,080 --> 00:31:30,720
packs and whatnot

00:31:27,039 --> 00:31:32,559
in the manifest that you end up creating

00:31:30,720 --> 00:31:34,640
so you can choose some of the things you

00:31:32,559 --> 00:31:37,919
want or you can just have it go as it

00:31:34,640 --> 00:31:39,840
would be by default so then basically it

00:31:37,919 --> 00:31:41,919
goes through and it

00:31:39,840 --> 00:31:43,279
deals with the build targets it goes and

00:31:41,919 --> 00:31:46,640
then creates the

00:31:43,279 --> 00:31:48,720
different layers for your images

00:31:46,640 --> 00:31:50,159
or for your image and then does uh

00:31:48,720 --> 00:31:52,480
different caching layers

00:31:50,159 --> 00:31:54,640
so then um after that you'll see like

00:31:52,480 --> 00:31:55,519
instances starting as things get started

00:31:54,640 --> 00:31:58,080
up

00:31:55,519 --> 00:32:00,320
and then once it's done basically you'll

00:31:58,080 --> 00:32:03,440
see okay here's what your app is

00:32:00,320 --> 00:32:06,720
um so then we have this route

00:32:03,440 --> 00:32:07,840
so this one is one that the one that i

00:32:06,720 --> 00:32:11,120
ran with just

00:32:07,840 --> 00:32:11,840
like i did i didn't give it us like so

00:32:11,120 --> 00:32:15,840
it gives

00:32:11,840 --> 00:32:15,840
sorry my throat's getting dry one moment

00:32:16,320 --> 00:32:20,159
so the way that this is set up it was

00:32:18,480 --> 00:32:22,880
the go app and then it ended up

00:32:20,159 --> 00:32:24,000
giving it like the random thing which

00:32:22,880 --> 00:32:26,559
you may be used to

00:32:24,000 --> 00:32:27,360
um if you're running docker so then

00:32:26,559 --> 00:32:30,480
there's the

00:32:27,360 --> 00:32:33,679
apps so the 104 dot

00:32:30,480 --> 00:32:35,200
stuff so basically what i have is um i

00:32:33,679 --> 00:32:38,399
have a static ip

00:32:35,200 --> 00:32:41,360
and um there is a there's this

00:32:38,399 --> 00:32:43,840
website called zip dot io so i can just

00:32:41,360 --> 00:32:43,840
show that real quick

00:32:44,960 --> 00:32:49,440
so um basically an easy way to be able

00:32:48,880 --> 00:32:51,600
to run

00:32:49,440 --> 00:32:53,679
cfr cadets is if you use zip dio

00:32:51,600 --> 00:32:56,320
basically it's wild card dns

00:32:53,679 --> 00:32:57,120
and so you have your static ip and it

00:32:56,320 --> 00:32:59,679
will end up

00:32:57,120 --> 00:33:01,120
using zip io the other option is you can

00:32:59,679 --> 00:33:02,960
actually set up all the dns things

00:33:01,120 --> 00:33:04,240
yourself and then use your own domain

00:33:02,960 --> 00:33:06,320
etc

00:33:04,240 --> 00:33:08,880
but for demo purposes we don't need

00:33:06,320 --> 00:33:12,480
something like that

00:33:08,880 --> 00:33:16,159
um so then uh basically we could just go

00:33:12,480 --> 00:33:16,159
to this location here

00:33:18,880 --> 00:33:23,039
and then so basically since it's not set

00:33:20,880 --> 00:33:24,080
up with each things aren't set up to use

00:33:23,039 --> 00:33:26,399
https

00:33:24,080 --> 00:33:27,519
it's being like oh no this is not part

00:33:26,399 --> 00:33:31,200
of it so

00:33:27,519 --> 00:33:34,320
um well i guess i did something

00:33:31,200 --> 00:33:36,080
it oh yeah there we go proceed it feels

00:33:34,320 --> 00:33:38,000
a little awkward um being like that but

00:33:36,080 --> 00:33:40,720
uh yeah so basically this is just

00:33:38,000 --> 00:33:41,360
like showing the index how long this app

00:33:40,720 --> 00:33:43,120
has been up

00:33:41,360 --> 00:33:45,600
there were like the different things i

00:33:43,120 --> 00:33:47,200
mentioned with like slash envy so you

00:33:45,600 --> 00:33:47,519
can see like all the different things

00:33:47,200 --> 00:33:49,679
that

00:33:47,519 --> 00:33:51,200
are there and then you can just go to

00:33:49,679 --> 00:33:54,000
different um

00:33:51,200 --> 00:33:54,880
like at points to see different things

00:33:54,000 --> 00:33:57,919
that are coming up

00:33:54,880 --> 00:33:58,480
so like if we look quickly back at this

00:33:57,919 --> 00:34:00,880
you can see

00:33:58,480 --> 00:34:03,120
like there's you can have it exit you

00:34:00,880 --> 00:34:05,200
can check the index etc so

00:34:03,120 --> 00:34:06,320
it's just it's just just very simple

00:34:05,200 --> 00:34:10,720
test app

00:34:06,320 --> 00:34:14,480
so then if we go over to uh spring music

00:34:10,720 --> 00:34:16,560
so as we can see uh this one here

00:34:14,480 --> 00:34:17,839
it's dealing with build packs there's a

00:34:16,560 --> 00:34:21,119
lot more going on

00:34:17,839 --> 00:34:21,359
with how this is so it has the stuff for

00:34:21,119 --> 00:34:24,079
c

00:34:21,359 --> 00:34:24,800
certificates as uh belsoft so that's for

00:34:24,079 --> 00:34:28,720
java

00:34:24,800 --> 00:34:31,119
um there's this spring boot for spring

00:34:28,720 --> 00:34:31,760
and then you can see that in this one

00:34:31,119 --> 00:34:34,399
like there's

00:34:31,760 --> 00:34:35,919
okay what java version am i using like

00:34:34,399 --> 00:34:38,639
what are all these specific

00:34:35,919 --> 00:34:39,440
configurations that i have and then it

00:34:38,639 --> 00:34:42,480
goes through

00:34:39,440 --> 00:34:45,520
and has the layer based on the

00:34:42,480 --> 00:34:47,599
java runtime um that you have

00:34:45,520 --> 00:34:49,440
so like one thing you have to make sure

00:34:47,599 --> 00:34:50,800
of is that your runtime version

00:34:49,440 --> 00:34:52,879
that you're using to build the

00:34:50,800 --> 00:34:56,079
application matches with what is

00:34:52,879 --> 00:34:57,440
being run here so you can set that up in

00:34:56,079 --> 00:34:59,359
your code for instance

00:34:57,440 --> 00:35:01,040
so then afterward you can see there's

00:34:59,359 --> 00:35:02,079
just a lot more happening here with the

00:35:01,040 --> 00:35:03,680
launch helper there's

00:35:02,079 --> 00:35:05,359
jvm kill like all these things are

00:35:03,680 --> 00:35:08,320
specific to java

00:35:05,359 --> 00:35:10,160
and then it goes and create there's an

00:35:08,320 --> 00:35:10,560
executable jar there's the task and

00:35:10,160 --> 00:35:13,359
there's

00:35:10,560 --> 00:35:14,240
uh the web app so you can see it's

00:35:13,359 --> 00:35:16,400
happening

00:35:14,240 --> 00:35:17,760
it's doing more for every like all of

00:35:16,400 --> 00:35:19,200
these specific things because there's a

00:35:17,760 --> 00:35:22,960
lot more pieces to this

00:35:19,200 --> 00:35:23,440
application and so then afterward if we

00:35:22,960 --> 00:35:26,640
go

00:35:23,440 --> 00:35:26,640
here to this one

00:35:27,119 --> 00:35:30,160
and also like you can see here there's a

00:35:28,880 --> 00:35:32,160
few things that happen there's the web

00:35:30,160 --> 00:35:32,560
there's executable jar that's the task

00:35:32,160 --> 00:35:36,400
and then

00:35:32,560 --> 00:35:38,720
it creates an instance for the web

00:35:36,400 --> 00:35:40,160
just out of curiosity are these three

00:35:38,720 --> 00:35:41,119
different things something that you

00:35:40,160 --> 00:35:44,320
configured or

00:35:41,119 --> 00:35:45,440
is it something that the build packs

00:35:44,320 --> 00:35:48,480
decided

00:35:45,440 --> 00:35:51,520
um and that is how

00:35:48,480 --> 00:35:54,800
it came about yeah so um

00:35:51,520 --> 00:35:55,359
if let's see i personally did not but if

00:35:54,800 --> 00:35:57,440
we

00:35:55,359 --> 00:35:59,520
like okay so if we count this

00:35:57,440 --> 00:36:01,280
manifest.yaml it just has a few things

00:35:59,520 --> 00:36:02,880
for like environment stuff

00:36:01,280 --> 00:36:05,440
and things set up in word to put the

00:36:02,880 --> 00:36:05,920
path but basically the rest was handled

00:36:05,440 --> 00:36:09,599
uh

00:36:05,920 --> 00:36:13,200
by the build packs if we look at

00:36:09,599 --> 00:36:16,400
source uh

00:36:13,200 --> 00:36:18,720
you can see that there's uh

00:36:16,400 --> 00:36:18,720
oops

00:36:20,160 --> 00:36:23,359
it keeps going there we go

00:36:23,839 --> 00:36:27,119
oh gosh what did i do oh yeah so yeah

00:36:25,440 --> 00:36:28,079
basically you can see just there's

00:36:27,119 --> 00:36:28,640
different things in there there's like

00:36:28,079 --> 00:36:31,599
the web

00:36:28,640 --> 00:36:32,960
and yeah basically it handles it itself

00:36:31,599 --> 00:36:34,320
you don't have to specifically go

00:36:32,960 --> 00:36:36,079
through and deal with all of that which

00:36:34,320 --> 00:36:41,839
is really nice

00:36:36,079 --> 00:36:41,839
um if we go back over here

00:36:42,720 --> 00:36:47,359
so as i mentioned this like this is just

00:36:44,960 --> 00:36:49,280
one of this uh so there's like two

00:36:47,359 --> 00:36:50,400
of the main apps that people will show

00:36:49,280 --> 00:36:52,240
around for spring

00:36:50,400 --> 00:36:54,160
uh so there's spring music and there's

00:36:52,240 --> 00:36:56,240
spring pet clinic which

00:36:54,160 --> 00:36:58,000
basically you have like a little pet you

00:36:56,240 --> 00:37:00,000
can add people

00:36:58,000 --> 00:37:01,760
with their pets and stuff so like here

00:37:00,000 --> 00:37:03,280
you can see you can sort things you can

00:37:01,760 --> 00:37:05,760
add albums i could

00:37:03,280 --> 00:37:06,560
delete i could edit something and say

00:37:05,760 --> 00:37:09,720
that

00:37:06,560 --> 00:37:13,520
this actually happened in i don't know

00:37:09,720 --> 00:37:15,599
1866. so you can just edit in just like

00:37:13,520 --> 00:37:17,520
see that actually if like if i go and

00:37:15,599 --> 00:37:18,880
refresh it like that it kept that it

00:37:17,520 --> 00:37:22,400
kept it there so

00:37:18,880 --> 00:37:24,480
um it actually stores the information in

00:37:22,400 --> 00:37:26,000
the database so you have everything here

00:37:24,480 --> 00:37:28,720
and you can play around with it

00:37:26,000 --> 00:37:29,280
and give it if i gave this link to if

00:37:28,720 --> 00:37:30,960
any of you

00:37:29,280 --> 00:37:33,119
used it you would be able to see this as

00:37:30,960 --> 00:37:33,119
well

00:37:34,480 --> 00:37:40,240
and then if we go look at the python one

00:37:38,560 --> 00:37:42,079
as expected like this one was a lot

00:37:40,240 --> 00:37:44,640
simpler so it should

00:37:42,079 --> 00:37:46,160
be a lot shorter so again this one is

00:37:44,640 --> 00:37:47,920
going through and it's like oh hey this

00:37:46,160 --> 00:37:51,040
is python code i am going

00:37:47,920 --> 00:37:53,920
like i have pip for i have the python

00:37:51,040 --> 00:37:56,320
runtime i pip i proc file also

00:37:53,920 --> 00:37:58,240
so basically it's just going through and

00:37:56,320 --> 00:38:00,720
building it um there was a configuration

00:37:58,240 --> 00:38:04,000
for like what the python path would be

00:38:00,720 --> 00:38:05,520
and then you can see like just like

00:38:04,000 --> 00:38:07,359
when if you're normally using like

00:38:05,520 --> 00:38:08,480
pepper using python you can see that

00:38:07,359 --> 00:38:09,680
it's just running

00:38:08,480 --> 00:38:11,520
what is running in the actual

00:38:09,680 --> 00:38:13,520
application

00:38:11,520 --> 00:38:14,960
and then it's just going through adding

00:38:13,520 --> 00:38:18,480
all of those layers

00:38:14,960 --> 00:38:22,480
and then starts the application so

00:38:18,480 --> 00:38:25,520
this one is the very simple one

00:38:22,480 --> 00:38:27,839
that i mentioned so if we go here real

00:38:25,520 --> 00:38:27,839
quick

00:38:30,560 --> 00:38:35,599
so yeah just says hello python world so

00:38:33,760 --> 00:38:38,160
um you can kind of see we'll click here

00:38:35,599 --> 00:38:41,760
this one took two minutes and 31 seconds

00:38:38,160 --> 00:38:42,320
uh this one took three minutes and four

00:38:41,760 --> 00:38:43,520
seconds

00:38:42,320 --> 00:38:45,200
and then this one took two minutes and

00:38:43,520 --> 00:38:47,040
33 seconds you can kind of see that a

00:38:45,200 --> 00:38:48,560
little bit based on like some of it's

00:38:47,040 --> 00:38:50,480
based on language some of it's based on

00:38:48,560 --> 00:38:52,320
like how big the applications are

00:38:50,480 --> 00:38:53,520
and to just quickly show one more thing

00:38:52,320 --> 00:38:57,119
before i pass it off

00:38:53,520 --> 00:38:58,000
if you do cf apps it's a little bit slow

00:38:57,119 --> 00:39:01,599
on my machine

00:38:58,000 --> 00:39:03,440
um basically i guess as that's running

00:39:01,599 --> 00:39:05,920
i'll just also run cf routes

00:39:03,440 --> 00:39:07,119
so there's cf rats and cf apps so this

00:39:05,920 --> 00:39:09,839
thing shows

00:39:07,119 --> 00:39:10,960
like the domain and what the host is so

00:39:09,839 --> 00:39:12,480
like that path that

00:39:10,960 --> 00:39:14,240
i was showing to get to all of those

00:39:12,480 --> 00:39:15,520
different applications so you can see

00:39:14,240 --> 00:39:16,160
all these are in test space what the

00:39:15,520 --> 00:39:18,960
apps are

00:39:16,160 --> 00:39:20,480
and the routes that got set up and then

00:39:18,960 --> 00:39:22,240
if we go back here it looks it's a

00:39:20,480 --> 00:39:24,400
little stretched out but um basically

00:39:22,240 --> 00:39:25,599
you can also see here's the route that

00:39:24,400 --> 00:39:27,359
was created what are the

00:39:25,599 --> 00:39:29,119
what are the processes so like this one

00:39:27,359 --> 00:39:30,160
is just the web this is also just web

00:39:29,119 --> 00:39:31,760
and this is the one that

00:39:30,160 --> 00:39:33,440
the spring music had multiple things

00:39:31,760 --> 00:39:36,720
that were happening in it

00:39:33,440 --> 00:39:38,240
so i think i'll pass it off now to rem

00:39:36,720 --> 00:39:43,839
and then we can go into some of this

00:39:38,240 --> 00:39:43,839
other stuff more in depth afterwards

00:39:53,920 --> 00:39:59,040
all right so i am going to be deploying

00:39:57,440 --> 00:40:02,880
a

00:39:59,040 --> 00:40:06,160
php app first and it's based on

00:40:02,880 --> 00:40:09,359
the lumen framework

00:40:06,160 --> 00:40:11,680
um so

00:40:09,359 --> 00:40:12,800
it's basically like um a very

00:40:11,680 --> 00:40:15,920
straightforward

00:40:12,800 --> 00:40:17,920
composer based app so for

00:40:15,920 --> 00:40:19,119
anybody who's trying to do composer

00:40:17,920 --> 00:40:23,520
based stuff so you

00:40:19,119 --> 00:40:27,440
basically initiate the composer install

00:40:23,520 --> 00:40:30,880
before you do the cf push um so

00:40:27,440 --> 00:40:34,240
i am going to i have done the cf push

00:40:30,880 --> 00:40:36,720
um before this so

00:40:34,240 --> 00:40:38,240
cf the composer installed before this so

00:40:36,720 --> 00:40:43,599
i am just going to

00:40:38,240 --> 00:40:43,599
um just go ahead and push this stuff so

00:40:44,400 --> 00:40:48,720
this is i think app number six i don't

00:40:46,640 --> 00:40:52,079
know if anybody is keeping count but

00:40:48,720 --> 00:40:55,280
i'll just add it there for

00:40:52,079 --> 00:40:56,400
good measure so one of the things that

00:40:55,280 --> 00:41:00,800
you can do and

00:40:56,400 --> 00:41:04,800
uh both tiffany and um shadrach have

00:41:00,800 --> 00:41:04,800
been showing this is um

00:41:05,040 --> 00:41:08,720
cloud foundry tends to detect uh build

00:41:07,440 --> 00:41:13,359
packs on its own

00:41:08,720 --> 00:41:16,720
um based on what's available

00:41:13,359 --> 00:41:18,400
in the source you can also explicitly

00:41:16,720 --> 00:41:21,680
specify build packs

00:41:18,400 --> 00:41:22,720
in the command that you used to start

00:41:21,680 --> 00:41:25,920
the app

00:41:22,720 --> 00:41:26,960
or push the app or you could include it

00:41:25,920 --> 00:41:30,400
in what is known as

00:41:26,960 --> 00:41:30,960
a manifest file so sometimes it just

00:41:30,400 --> 00:41:34,079
helps

00:41:30,960 --> 00:41:35,680
save a little time in waiting for the

00:41:34,079 --> 00:41:39,760
build pack detect

00:41:35,680 --> 00:41:39,760
phase so for those of us who are

00:41:39,920 --> 00:41:45,200
formula one fans and care about those

00:41:42,800 --> 00:41:48,560
milliseconds of delay i guess it's

00:41:45,200 --> 00:41:50,079
can be very useful so what are some of

00:41:48,560 --> 00:41:52,640
the things that you can like do with the

00:41:50,079 --> 00:41:52,640
manifest

00:41:53,520 --> 00:41:58,400
there's a sorry good

00:41:56,880 --> 00:41:59,920
i was gonna say like there's the whole

00:41:58,400 --> 00:42:00,560
thing about like whether you have the

00:41:59,920 --> 00:42:02,800
random

00:42:00,560 --> 00:42:04,079
route which like if you saw with mine

00:42:02,800 --> 00:42:05,359
like the python one

00:42:04,079 --> 00:42:07,760
didn't have a random route and so the

00:42:05,359 --> 00:42:09,520
other one's dead like you can have

00:42:07,760 --> 00:42:10,960
like set up also like the name is in

00:42:09,520 --> 00:42:13,280
there and then like what are some like

00:42:10,960 --> 00:42:16,480
other things i think there's like memory

00:42:13,280 --> 00:42:18,319
yep i mean at the basic

00:42:16,480 --> 00:42:20,000
thing is you can i think set the name of

00:42:18,319 --> 00:42:23,680
the app so

00:42:20,000 --> 00:42:25,760
um you can specify

00:42:23,680 --> 00:42:27,200
what the name of the app is going to be

00:42:25,760 --> 00:42:29,359
i think that's one of like the

00:42:27,200 --> 00:42:31,680
primary parameters and then you can

00:42:29,359 --> 00:42:32,960
specify how much memory to allocate to

00:42:31,680 --> 00:42:36,000
the application

00:42:32,960 --> 00:42:39,280
um you can specify start commands

00:42:36,000 --> 00:42:41,760
um as part of the manifest file

00:42:39,280 --> 00:42:42,720
you can also specify what build packs to

00:42:41,760 --> 00:42:47,359
put in there

00:42:42,720 --> 00:42:50,160
and there's also another

00:42:47,359 --> 00:42:52,160
yaml file in the form of buildpack.yaml

00:42:50,160 --> 00:42:54,000
that plays a sort of complimentary role

00:42:52,160 --> 00:42:56,079
if there's some very specific and custom

00:42:54,000 --> 00:42:58,000
steps that you need to take

00:42:56,079 --> 00:43:00,079
in order for the app to be deployed and

00:42:58,000 --> 00:43:01,280
if there are very specific dependencies

00:43:00,079 --> 00:43:04,640
and

00:43:01,280 --> 00:43:07,200
versions of let's say php or

00:43:04,640 --> 00:43:08,240
composer or other things you can specify

00:43:07,200 --> 00:43:11,760
all of those

00:43:08,240 --> 00:43:12,640
um in either of these two files and it

00:43:11,760 --> 00:43:14,480
will

00:43:12,640 --> 00:43:16,720
cloud foundry will pick it up during

00:43:14,480 --> 00:43:20,720
deployment

00:43:16,720 --> 00:43:23,920
so now the app has basically

00:43:20,720 --> 00:43:27,680
completed the deployment

00:43:23,920 --> 00:43:30,400
and the the blocks are

00:43:27,680 --> 00:43:31,200
you know pretty much the same so um

00:43:30,400 --> 00:43:34,560
here's

00:43:31,200 --> 00:43:37,839
um like the source code being uploaded

00:43:34,560 --> 00:43:40,079
uh to the cloud foundry

00:43:37,839 --> 00:43:41,520
cloud controller i think is is the

00:43:40,079 --> 00:43:44,400
module so

00:43:41,520 --> 00:43:46,240
and then build packs kick in obviously

00:43:44,400 --> 00:43:47,040
in this case i specified what the build

00:43:46,240 --> 00:43:50,400
packs were

00:43:47,040 --> 00:43:51,280
and so it probably took like a little

00:43:50,400 --> 00:43:53,920
less time

00:43:51,280 --> 00:43:54,640
and it you know picked up like default

00:43:53,920 --> 00:43:58,240
versions for

00:43:54,640 --> 00:44:02,000
composer and php and um

00:43:58,240 --> 00:44:06,560
the php build pack basically

00:44:02,000 --> 00:44:09,040
kicked in and you know did a lot of the

00:44:06,560 --> 00:44:10,560
it did all of the containerization by

00:44:09,040 --> 00:44:13,839
building a lot of

00:44:10,560 --> 00:44:15,920
different layers that is part of

00:44:13,839 --> 00:44:18,400
um the container that finally got

00:44:15,920 --> 00:44:22,640
deployed so

00:44:18,400 --> 00:44:27,359
the app now resides at this route

00:44:22,640 --> 00:44:30,480
so if i paste that in a browser

00:44:27,359 --> 00:44:33,920
go past the scary warning

00:44:30,480 --> 00:44:36,800
screen that's basically my

00:44:33,920 --> 00:44:38,640
app that is running not very informative

00:44:36,800 --> 00:44:41,839
but

00:44:38,640 --> 00:44:44,240
just a simple lumen application that's

00:44:41,839 --> 00:44:45,520
demonstrating some some of the stuff

00:44:44,240 --> 00:44:50,640
here um

00:44:45,520 --> 00:44:54,160
so yeah let's

00:44:50,640 --> 00:44:57,440
let's move on to like other um apps

00:44:54,160 --> 00:44:59,200
so next i have like a sinatra

00:44:57,440 --> 00:45:03,599
application

00:44:59,200 --> 00:45:06,000
um so um

00:45:03,599 --> 00:45:06,960
so it's a it's a lightweight ruby

00:45:06,000 --> 00:45:10,000
framework

00:45:06,960 --> 00:45:13,920
um so this is a ruby based

00:45:10,000 --> 00:45:16,720
um application and um

00:45:13,920 --> 00:45:17,920
this is uh you know the deployment i

00:45:16,720 --> 00:45:20,480
guess is

00:45:17,920 --> 00:45:21,760
just straightforward i'll just talk

00:45:20,480 --> 00:45:26,319
through it

00:45:21,760 --> 00:45:29,680
once i kick it off so this is app number

00:45:26,319 --> 00:45:29,680
seven i think

00:45:30,240 --> 00:45:35,040
let's see what that does so sinatra is

00:45:33,280 --> 00:45:36,400
basically like i mentioned a lightweight

00:45:35,040 --> 00:45:40,160
ruby framework

00:45:36,400 --> 00:45:42,319
um i just picked like a

00:45:40,160 --> 00:45:44,640
good uh stateless example so if you

00:45:42,319 --> 00:45:48,720
notice i haven't specified the

00:45:44,640 --> 00:45:51,839
build pack in this case um

00:45:48,720 --> 00:45:53,680
it's let's see if cloud foundry actually

00:45:51,839 --> 00:45:55,680
detected it detects it but

00:45:53,680 --> 00:45:57,359
you will notice that it might be

00:45:55,680 --> 00:46:00,400
slightly slower than the

00:45:57,359 --> 00:46:00,400
php deploy

00:46:06,240 --> 00:46:12,800
so goes through the various steps it

00:46:08,480 --> 00:46:12,800
detects what build backs are necessary

00:46:12,880 --> 00:46:16,079
again ruby is kind of a first-class

00:46:15,359 --> 00:46:21,040
citizen

00:46:16,079 --> 00:46:24,319
in um cf land um i guess historically

00:46:21,040 --> 00:46:27,599
heroku and all of these

00:46:24,319 --> 00:46:30,880
other sort of pass players have

00:46:27,599 --> 00:46:33,920
have had ruby as um as an important

00:46:30,880 --> 00:46:34,800
uh piece in their whole cog so cloud

00:46:33,920 --> 00:46:37,200
foundry is

00:46:34,800 --> 00:46:38,720
obviously no different so it picked up

00:46:37,200 --> 00:46:42,160
um

00:46:38,720 --> 00:46:46,160
the ruby installers um

00:46:42,160 --> 00:46:49,200
the the pochetto

00:46:46,160 --> 00:46:51,200
uh build packs interestingly work

00:46:49,200 --> 00:46:52,400
in layers so if you've not already

00:46:51,200 --> 00:46:54,960
noticed um

00:46:52,400 --> 00:46:56,240
it just adds layer upon layer upon layer

00:46:54,960 --> 00:46:59,040
to the actual

00:46:56,240 --> 00:47:00,720
immutable container that it builds so

00:46:59,040 --> 00:47:04,000
one of the advantages of

00:47:00,720 --> 00:47:08,480
having these in layers is

00:47:04,000 --> 00:47:10,880
when you update the app

00:47:08,480 --> 00:47:12,160
it's basically going to replace some of

00:47:10,880 --> 00:47:15,680
the layers that

00:47:12,160 --> 00:47:18,880
have changed and leave the rest of the

00:47:15,680 --> 00:47:20,400
container as it is and one of the

00:47:18,880 --> 00:47:24,400
advantages of using

00:47:20,400 --> 00:47:29,119
a pocketo is this rebasing of layers

00:47:24,400 --> 00:47:32,880
that they call it so and the

00:47:29,119 --> 00:47:33,520
instance where this came into most use

00:47:32,880 --> 00:47:37,359
was

00:47:33,520 --> 00:47:38,000
when the hard bleed uh vulnerability was

00:47:37,359 --> 00:47:40,720
solved

00:47:38,000 --> 00:47:42,480
uh because folks had like hundreds and

00:47:40,720 --> 00:47:43,520
thousands of containers and they had to

00:47:42,480 --> 00:47:46,640
basically like

00:47:43,520 --> 00:47:48,720
um restart each one after um um

00:47:46,640 --> 00:47:51,119
restaging them it took them a long time

00:47:48,720 --> 00:47:52,480
whereas for folks that were using build

00:47:51,119 --> 00:47:55,599
packs it was just

00:47:52,480 --> 00:47:58,720
going in and replacing a single layer in

00:47:55,599 --> 00:48:01,119
an app registry as opposed to you know

00:47:58,720 --> 00:48:02,400
replacing each individual container and

00:48:01,119 --> 00:48:05,040
restarting it so

00:48:02,400 --> 00:48:05,680
it became as simple as replace this

00:48:05,040 --> 00:48:07,920
layer

00:48:05,680 --> 00:48:09,839
inside the container single container

00:48:07,920 --> 00:48:12,160
registry and every application just

00:48:09,839 --> 00:48:14,079
picks it up from there and

00:48:12,160 --> 00:48:15,599
the the vulnerability is basically

00:48:14,079 --> 00:48:17,680
mitigated in

00:48:15,599 --> 00:48:19,200
a quantum of minutes as opposed to hours

00:48:17,680 --> 00:48:23,200
and weeks and months

00:48:19,200 --> 00:48:24,400
so i'll get into a little bit more

00:48:23,200 --> 00:48:28,160
detail

00:48:24,400 --> 00:48:32,960
right after we check if this works so

00:48:28,160 --> 00:48:36,160
this is our ruby application

00:48:32,960 --> 00:48:39,359
pardon the

00:48:36,160 --> 00:48:42,800
thing so um it's basically

00:48:39,359 --> 00:48:49,839
you know running and

00:48:42,800 --> 00:48:49,839
just some fancy messaging there

00:48:51,119 --> 00:48:59,200
and then in the end i

00:48:55,680 --> 00:49:01,560
i just also wanted to show like uh

00:48:59,200 --> 00:49:02,880
just push like a container

00:49:01,560 --> 00:49:05,200
[Music]

00:49:02,880 --> 00:49:06,800
directly from my container registry as

00:49:05,200 --> 00:49:07,280
opposed to doing something from source

00:49:06,800 --> 00:49:10,960
so

00:49:07,280 --> 00:49:14,319
i'm sure a lot of folks who are watching

00:49:10,960 --> 00:49:16,319
are people who are in the business of

00:49:14,319 --> 00:49:18,559
using containers already it's probably

00:49:16,319 --> 00:49:21,839
part of your ci cd strategy

00:49:18,559 --> 00:49:22,880
in some form or level and if you are

00:49:21,839 --> 00:49:25,760
wondering if

00:49:22,880 --> 00:49:26,400
cloud foundry provides a migration path

00:49:25,760 --> 00:49:30,480
for

00:49:26,400 --> 00:49:33,520
folks that are already using dockerized

00:49:30,480 --> 00:49:34,160
deployment methods the answer is you can

00:49:33,520 --> 00:49:38,160
directly

00:49:34,160 --> 00:49:40,480
push cf you can directly push containers

00:49:38,160 --> 00:49:41,599
to cf and because there's a kubernetes

00:49:40,480 --> 00:49:44,400
running

00:49:41,599 --> 00:49:46,880
at the end of the tunnel cf has a way to

00:49:44,400 --> 00:49:50,800
just take your dockerized

00:49:46,880 --> 00:49:52,079
images and deploy them to kubernetes so

00:49:50,800 --> 00:49:58,880
let me just

00:49:52,079 --> 00:50:04,400
kick off the deployment and we can

00:49:58,880 --> 00:50:07,839
talk about it app number eight

00:50:04,400 --> 00:50:12,000
there's a docker flag

00:50:07,839 --> 00:50:15,440
that you have to specify and then

00:50:12,000 --> 00:50:16,880
i'm going to use an image i don't know

00:50:15,440 --> 00:50:19,839
if you can see this

00:50:16,880 --> 00:50:21,440
maybe this is better i'm going to use an

00:50:19,839 --> 00:50:27,839
image that's in my

00:50:21,440 --> 00:50:27,839
docker hub

00:50:33,359 --> 00:50:38,160
is there anything you have to do to be

00:50:35,119 --> 00:50:42,160
able to run docker containers

00:50:38,160 --> 00:50:44,480
yeah so after you install cf for gates

00:50:42,160 --> 00:50:46,640
which is the tool that is actually uh

00:50:44,480 --> 00:50:51,280
functioning beneath all of this

00:50:46,640 --> 00:50:54,640
there is a flag that you uh set so

00:50:51,280 --> 00:50:57,760
let's see see if

00:50:54,640 --> 00:50:58,800
feature flags i think so there's like a

00:50:57,760 --> 00:51:02,079
handful of

00:50:58,800 --> 00:51:05,839
feature flags that you have and um

00:51:02,079 --> 00:51:08,160
diego which is sort of the historically

00:51:05,839 --> 00:51:08,160
named

00:51:14,880 --> 00:51:20,319
the name still sort of sticks so um

00:51:18,000 --> 00:51:22,000
you enable this flag in order to be able

00:51:20,319 --> 00:51:25,440
to deploy

00:51:22,000 --> 00:51:28,559
docker images and then once you do that

00:51:25,440 --> 00:51:31,839
you can start deploying

00:51:28,559 --> 00:51:35,280
these containers directly so

00:51:31,839 --> 00:51:38,480
this one is obviously no build packs

00:51:35,280 --> 00:51:41,760
no um uploading of uh

00:51:38,480 --> 00:51:44,400
you know source code to um cloud foundry

00:51:41,760 --> 00:51:45,280
uh it's slightly different but uh

00:51:44,400 --> 00:51:47,280
obviously it's

00:51:45,280 --> 00:51:49,280
very useful if you're already you know

00:51:47,280 --> 00:51:52,000
in a containerized world and

00:51:49,280 --> 00:51:52,800
you're already using docker in some form

00:51:52,000 --> 00:51:56,319
or manner

00:51:52,800 --> 00:51:59,440
this is a very clean path

00:51:56,319 --> 00:52:02,079
to take towards you know

00:51:59,440 --> 00:52:03,280
going one step closer to kubernetes

00:52:02,079 --> 00:52:05,839
again

00:52:03,280 --> 00:52:06,640
none of the complexity involved with

00:52:05,839 --> 00:52:08,800
that

00:52:06,640 --> 00:52:10,480
is used ironically this is showing a

00:52:08,800 --> 00:52:13,680
build packs i o

00:52:10,480 --> 00:52:15,280
graphic but um none of the build packs

00:52:13,680 --> 00:52:19,040
actually kicked in so this is just

00:52:15,280 --> 00:52:22,079
a container that gets deployed

00:52:19,040 --> 00:52:26,880
to cloud foundry with uh

00:52:22,079 --> 00:52:26,880
with very minimal effort so

00:52:26,960 --> 00:52:32,079
yeah those are the three apps that i

00:52:30,160 --> 00:52:32,800
thought i'll demonstrate to you folks

00:52:32,079 --> 00:52:36,400
today

00:52:32,800 --> 00:52:39,440
um any other

00:52:36,400 --> 00:52:41,040
yeah sorry for for like the uh docker

00:52:39,440 --> 00:52:43,440
images like as far as i

00:52:41,040 --> 00:52:44,240
so cf for kate's as far as i'm aware it

00:52:43,440 --> 00:52:46,880
doesn't like

00:52:44,240 --> 00:52:48,000
it it requires that you run as non-rate

00:52:46,880 --> 00:52:50,559
for your containers

00:52:48,000 --> 00:52:52,000
so basically your containers need to

00:52:50,559 --> 00:52:54,160
they can't be privileged

00:52:52,000 --> 00:52:55,920
so you could add like a user with like a

00:52:54,160 --> 00:52:58,800
number in there or like for nginx

00:52:55,920 --> 00:52:59,440
there is a nginx unprivileged uh

00:52:58,800 --> 00:53:01,200
containers

00:52:59,440 --> 00:53:02,640
i mean a container image that you can

00:53:01,200 --> 00:53:05,520
pull from docker

00:53:02,640 --> 00:53:07,680
so basically for security purposes to

00:53:05,520 --> 00:53:09,359
not have it run its route

00:53:07,680 --> 00:53:11,200
yeah and i think that was the lesson

00:53:09,359 --> 00:53:11,920
that all three of us learned the hard

00:53:11,200 --> 00:53:15,200
way

00:53:11,920 --> 00:53:16,960
when preparing for the stream so um

00:53:15,200 --> 00:53:18,800
thanks for mentioning that tiffany i'm

00:53:16,960 --> 00:53:20,000
sure a lot of people will find that

00:53:18,800 --> 00:53:23,280
useful

00:53:20,000 --> 00:53:26,640
um yeah those are three apps that i had

00:53:23,280 --> 00:53:29,119
um anything else you wanted to show

00:53:26,640 --> 00:53:31,280
shadrach you mentioned a static site

00:53:29,119 --> 00:53:32,640
yeah yeah and for our last trick i'll be

00:53:31,280 --> 00:53:35,359
deploying two applications

00:53:32,640 --> 00:53:37,280
um so tiffany deployed on a python

00:53:35,359 --> 00:53:39,280
application i will be deploying a jungle

00:53:37,280 --> 00:53:41,040
application because i know most people

00:53:39,280 --> 00:53:43,040
um use um the jungle and which is a

00:53:41,040 --> 00:53:43,839
python framework on their daily um

00:53:43,040 --> 00:53:45,760
workflow

00:53:43,839 --> 00:53:47,359
so we are just trying to cover as much

00:53:45,760 --> 00:53:49,359
coin as we can but for

00:53:47,359 --> 00:53:52,800
um firstly i would just deploy um a

00:53:49,359 --> 00:53:52,800
gatsby site because i mean

00:53:54,319 --> 00:53:58,480
yeah so this is um a gatsby application

00:53:57,839 --> 00:54:01,040
basic

00:53:58,480 --> 00:54:03,119
language application is based on a um

00:54:01,040 --> 00:54:05,359
gatsby starter team

00:54:03,119 --> 00:54:06,720
by i don't know i don't i forgot in the

00:54:05,359 --> 00:54:08,319
um creator's name but it's an open

00:54:06,720 --> 00:54:11,200
source um

00:54:08,319 --> 00:54:11,520
theme um so this so if i run ls it's

00:54:11,200 --> 00:54:14,319
just

00:54:11,520 --> 00:54:14,720
um basic how um gatsby should look like

00:54:14,319 --> 00:54:18,160
and

00:54:14,720 --> 00:54:20,319
how um a gatsby folder uh

00:54:18,160 --> 00:54:21,520
looks like just maybe contents node

00:54:20,319 --> 00:54:23,760
modules static

00:54:21,520 --> 00:54:25,200
etc and there's a profile so i would

00:54:23,760 --> 00:54:28,400
like to um just

00:54:25,200 --> 00:54:30,079
push so to push a regular way is just to

00:54:28,400 --> 00:54:33,280
do cf push

00:54:30,079 --> 00:54:36,160
and um just call it

00:54:33,280 --> 00:54:37,040
um gatsby static sites then now i'm

00:54:36,160 --> 00:54:39,599
specifying the

00:54:37,040 --> 00:54:41,440
pack because i needed to use um the um

00:54:39,599 --> 00:54:42,079
poc file build pack by the package to

00:54:41,440 --> 00:54:44,640
communicate

00:54:42,079 --> 00:54:45,839
number nine to the name of the app for

00:54:44,640 --> 00:54:48,319
good luck

00:54:45,839 --> 00:54:49,119
yeah sure sure sure i think i should do

00:54:48,319 --> 00:54:52,240
this mean i've had

00:54:49,119 --> 00:54:54,400
bad luck this whole time yeah no

00:54:52,240 --> 00:54:56,559
no you need it tiffany yeah you don't

00:54:54,400 --> 00:54:58,400
need luck

00:54:56,559 --> 00:55:01,040
yeah yeah so um because i'm using a proc

00:54:58,400 --> 00:55:01,440
files um to specify how cat speech you

00:55:01,040 --> 00:55:03,920
start

00:55:01,440 --> 00:55:05,200
how cloud function starts my gatsby

00:55:03,920 --> 00:55:08,640
application so if i should

00:55:05,200 --> 00:55:09,760
click on yeah ram have you spelled

00:55:08,640 --> 00:55:13,359
pocketo

00:55:09,760 --> 00:55:16,960
right yeah i think it's

00:55:13,359 --> 00:55:20,559
oh oh yeah thank you pakis you

00:55:16,960 --> 00:55:23,839
yeah so that's the good luck working

00:55:20,559 --> 00:55:27,760
yeah so if i should click on cf push it

00:55:23,839 --> 00:55:30,240
automatically pushes whatever

00:55:27,760 --> 00:55:32,079
it's in my what is proc file that

00:55:30,240 --> 00:55:32,960
doesn't sound like a language or a

00:55:32,079 --> 00:55:34,960
framework

00:55:32,960 --> 00:55:37,359
yeah yeah yeah so spoke file basically

00:55:34,960 --> 00:55:38,559
you can use prog file to specify how you

00:55:37,359 --> 00:55:39,520
want cloud functions to deploy

00:55:38,559 --> 00:55:41,839
application

00:55:39,520 --> 00:55:43,680
so um in my profile i specified that it

00:55:41,839 --> 00:55:45,359
should deploy the static the public

00:55:43,680 --> 00:55:46,960
folder which is basically how

00:55:45,359 --> 00:55:48,480
um static files on static size

00:55:46,960 --> 00:55:49,440
generators work so when you build this

00:55:48,480 --> 00:55:52,319
tactic file

00:55:49,440 --> 00:55:54,160
um is um an application an application

00:55:52,319 --> 00:55:57,200
on your website build

00:55:54,160 --> 00:55:59,839
with okay that's an error

00:55:57,200 --> 00:56:01,440
um i will get back to that so when you

00:55:59,839 --> 00:56:04,319
specify that because when you

00:56:01,440 --> 00:56:04,799
build a gatsby application or a hexo or

00:56:04,319 --> 00:56:07,040
hugo

00:56:04,799 --> 00:56:09,359
when you run build it you basically

00:56:07,040 --> 00:56:10,400
convert every single form of javascript

00:56:09,359 --> 00:56:12,960
html

00:56:10,400 --> 00:56:14,319
um etc and pushes it into a public

00:56:12,960 --> 00:56:15,920
folder that is lighter

00:56:14,319 --> 00:56:18,079
than the entirety so it basically

00:56:15,920 --> 00:56:20,079
minifies the entire code so that um

00:56:18,079 --> 00:56:22,240
whatever platform you are deploying to

00:56:20,079 --> 00:56:26,000
would be um

00:56:22,240 --> 00:56:29,119
very very easy so um

00:56:26,000 --> 00:56:32,640
why are we i think it's pocketo

00:56:29,119 --> 00:56:36,319
dash build back slash block fight

00:56:32,640 --> 00:56:39,599
oh yeah yeah yeah yeah yeah yeah

00:56:36,319 --> 00:56:39,599
yeah sorry about that

00:56:40,319 --> 00:56:44,000
so basically what you're saying is proc

00:56:42,079 --> 00:56:46,319
files are can be used for

00:56:44,000 --> 00:56:47,680
like binaries and static files and all

00:56:46,319 --> 00:56:50,880
of these things so

00:56:47,680 --> 00:56:53,599
um yeah you have like a

00:56:50,880 --> 00:56:54,960
tiny web server in there that's serving

00:56:53,599 --> 00:56:57,920
um the files and then

00:56:54,960 --> 00:56:59,280
you have obviously all the gatsby assets

00:56:57,920 --> 00:57:01,839
that are again static

00:56:59,280 --> 00:57:03,680
um right next to it and yeah yeah in the

00:57:01,839 --> 00:57:07,119
public folder yes yes yes

00:57:03,680 --> 00:57:09,760
so we just served so just

00:57:07,119 --> 00:57:11,520
so we just deployed um that particular

00:57:09,760 --> 00:57:17,760
folder which is the public folder

00:57:11,520 --> 00:57:17,760
and we get our application deployed live

00:57:18,319 --> 00:57:22,000
so while this is going goes through the

00:57:19,680 --> 00:57:23,520
number of steps um since we specified

00:57:22,000 --> 00:57:25,200
the whole on the

00:57:23,520 --> 00:57:26,880
pack we need automatically detects that

00:57:25,200 --> 00:57:30,640
we need the profile buildback

00:57:26,880 --> 00:57:32,190
and hopefully it deploys it

00:57:30,640 --> 00:57:36,180
obviously to deploy it

00:57:32,190 --> 00:57:36,180
[Laughter]

00:57:37,280 --> 00:57:43,599
yeah so this particular um app is

00:57:40,799 --> 00:57:45,680
of a simple gatsby blog a minimal blog

00:57:43,599 --> 00:57:48,079
that i just got from regards the um

00:57:45,680 --> 00:57:49,280
templates websites and yeah i'm

00:57:48,079 --> 00:57:52,640
deploying it so

00:57:49,280 --> 00:57:54,400
currently specific specified um

00:57:52,640 --> 00:57:56,400
the build park so uses the packet to

00:57:54,400 --> 00:57:57,359
proc for a bit back and the web this is

00:57:56,400 --> 00:58:00,720
what is inside the pop

00:57:57,359 --> 00:58:02,880
um profile this web on static sites then

00:58:00,720 --> 00:58:05,119
um we deploy it deploys every single

00:58:02,880 --> 00:58:08,480
thing that inside the public and assets

00:58:05,119 --> 00:58:08,480
public slash access folder

00:58:08,559 --> 00:58:13,119
so um it of course the checks goes

00:58:11,599 --> 00:58:14,799
through various layers of review

00:58:13,119 --> 00:58:16,640
of the build packs builds the

00:58:14,799 --> 00:58:19,200
application which is built successfully

00:58:16,640 --> 00:58:20,000
um successful um then it waits for the

00:58:19,200 --> 00:58:23,760
application

00:58:20,000 --> 00:58:26,799
then starts it so um this is

00:58:23,760 --> 00:58:29,680
application started and

00:58:26,799 --> 00:58:30,160
could switch just click on routes link

00:58:29,680 --> 00:58:34,319
um

00:58:30,160 --> 00:58:36,480
just jump through this whole thing and

00:58:34,319 --> 00:58:37,520
so this is it this is actually um static

00:58:36,480 --> 00:58:39,359
sites running on

00:58:37,520 --> 00:58:41,119
crowdfunding for kubernetes so like i

00:58:39,359 --> 00:58:43,119
said cloud foundry is better tested and

00:58:41,119 --> 00:58:44,480
available for any single framework

00:58:43,119 --> 00:58:46,559
application or

00:58:44,480 --> 00:58:47,920
um language that you need to deploy in

00:58:46,559 --> 00:58:51,520
so i'm just have like

00:58:47,920 --> 00:58:55,680
this is just a very simple um blog uh

00:58:51,520 --> 00:58:58,960
um beauty gatsby so um for the next

00:58:55,680 --> 00:59:02,400
for the next thing i would be deploying

00:58:58,960 --> 00:59:04,799
the django application jungle

00:59:02,400 --> 00:59:05,520
sorry for yeah you can see my screen

00:59:04,799 --> 00:59:08,559
right

00:59:05,520 --> 00:59:10,400
i can yeah yeah we can yeah so um we've

00:59:08,559 --> 00:59:11,760
deployed python what about january one

00:59:10,400 --> 00:59:14,000
of the most popular um

00:59:11,760 --> 00:59:15,200
the most used um javascript python

00:59:14,000 --> 00:59:18,559
framework that we have

00:59:15,200 --> 00:59:20,559
so um if i should run ls

00:59:18,559 --> 00:59:22,480
so basically it also has a prog file

00:59:20,559 --> 00:59:24,160
because i need um spoke files tells

00:59:22,480 --> 00:59:26,079
cloud foundry how to deploy

00:59:24,160 --> 00:59:27,440
what start command or how to deploy my

00:59:26,079 --> 00:59:30,880
application um

00:59:27,440 --> 00:59:32,000
an app folder just basic how a jungle

00:59:30,880 --> 00:59:34,319
applications folder

00:59:32,000 --> 00:59:36,559
should look like so if i should run cf

00:59:34,319 --> 00:59:40,640
push

00:59:36,559 --> 00:59:42,400
um jungle demo

00:59:40,640 --> 00:59:44,559
then so i won't be specify it's just

00:59:42,400 --> 00:59:46,880
finding

00:59:44,559 --> 00:59:47,839
a viewport because python is the first

00:59:46,880 --> 00:59:51,200
class citizen

00:59:47,839 --> 00:59:54,559
in cloud foundry so fashion cs bush

00:59:51,200 --> 00:59:56,240
jungle demo 10 and automatically starts

00:59:54,559 --> 00:59:57,920
the plane application

00:59:56,240 --> 00:59:59,359
i want you to i'm pretty sure you've

00:59:57,920 --> 01:00:02,240
noticed that we've not really done

00:59:59,359 --> 01:00:04,160
any serious configuration we just um run

01:00:02,240 --> 01:00:04,640
a single command an application is live

01:00:04,160 --> 01:00:06,480
like

01:00:04,640 --> 01:00:08,880
that is pretty cool and that's like holy

01:00:06,480 --> 01:00:11,440
grail um when you come from this is

01:00:08,880 --> 01:00:12,480
um various platform as a service that

01:00:11,440 --> 01:00:15,599
requires you to

01:00:12,480 --> 01:00:17,839
specify certain things and um

01:00:15,599 --> 01:00:19,599
i'm not going to mention any um platform

01:00:17,839 --> 01:00:21,119
name but you have to specify so many

01:00:19,599 --> 01:00:22,880
things to deploy application

01:00:21,119 --> 01:00:24,079
um that's like very very straightforward

01:00:22,880 --> 01:00:26,160
cloud function all you just have to do

01:00:24,079 --> 01:00:27,040
is just run a single command cf push the

01:00:26,160 --> 01:00:30,000
name of the app

01:00:27,040 --> 01:00:30,480
and you're good to go you can also um

01:00:30,000 --> 01:00:33,760
append

01:00:30,480 --> 01:00:35,280
various um flags to the cf push command

01:00:33,760 --> 01:00:38,400
like forum should

01:00:35,280 --> 01:00:39,280
um so it basically detects that it's a

01:00:38,400 --> 01:00:41,599
python

01:00:39,280 --> 01:00:43,839
so using the python build pack it's

01:00:41,599 --> 01:00:47,200
deployed by pacquito

01:00:43,839 --> 01:00:48,400
packet is also a um it's a project of

01:00:47,200 --> 01:00:51,440
the cloud foundry um

01:00:48,400 --> 01:00:53,440
foundation so if you see

01:00:51,440 --> 01:00:54,880
this is what is inside the profile so

01:00:53,440 --> 01:00:57,359
we're using gonicon

01:00:54,880 --> 01:00:58,960
to as our web server to deploy to on

01:00:57,359 --> 01:01:04,160
starter application this is what's

01:00:58,960 --> 01:01:07,520
exactly what is inside our profile

01:01:04,160 --> 01:01:11,520
so well we'll be so it to deploy

01:01:07,520 --> 01:01:14,799
in about few seconds

01:01:11,520 --> 01:01:16,480
fingers crossed obviously

01:01:14,799 --> 01:01:19,599
so our application has been built

01:01:16,480 --> 01:01:25,839
successfully and

01:01:19,599 --> 01:01:25,839
instances starting

01:01:27,680 --> 01:01:30,799
six few seconds

01:01:35,760 --> 01:01:40,240
okay so application started regular

01:01:37,680 --> 01:01:42,480
format specifies the name the routes

01:01:40,240 --> 01:01:43,359
um the type which is web um the start

01:01:42,480 --> 01:01:45,920
command which is

01:01:43,359 --> 01:01:46,559
we're using gonicon so if i should click

01:01:45,920 --> 01:01:52,640
on

01:01:46,559 --> 01:01:55,920
this jump through this

01:01:52,640 --> 01:01:57,680
so this is basically those displaying

01:01:55,920 --> 01:01:59,680
hello world this is a jungle app that

01:01:57,680 --> 01:02:01,039
has been deployed on cloud 4g and yeah

01:01:59,680 --> 01:02:03,359
that's that's basically

01:02:01,039 --> 01:02:04,960
that's how you can deploy each angle

01:02:03,359 --> 01:02:08,000
application to cloud foundry

01:02:04,960 --> 01:02:09,680
and that's the end of all the

01:02:08,000 --> 01:02:12,319
applications we're supposed to deploy

01:02:09,680 --> 01:02:12,799
you see how fast we're able to deploy 10

01:02:12,319 --> 01:02:14,400
different

01:02:12,799 --> 01:02:16,079
applications with different languages

01:02:14,400 --> 01:02:17,119
and framework on cloud running for

01:02:16,079 --> 01:02:18,960
kubernetes

01:02:17,119 --> 01:02:21,039
without going through the stress that

01:02:18,960 --> 01:02:23,920
comes with kubernetes

01:02:21,039 --> 01:02:25,440
so yeah that's that's pretty much it and

01:02:23,920 --> 01:02:28,319
um

01:02:25,440 --> 01:02:30,079
if you need to learn more stuff i'm just

01:02:28,319 --> 01:02:31,359
going to share a slide now

01:02:30,079 --> 01:02:34,079
i want to show something real quick

01:02:31,359 --> 01:02:37,039
before you do that okay sure yeah i i

01:02:34,079 --> 01:02:38,720
definitely think some details about

01:02:37,039 --> 01:02:41,920
internals would be good

01:02:38,720 --> 01:02:43,359
and if someone can show how we can look

01:02:41,920 --> 01:02:46,400
at logs

01:02:43,359 --> 01:02:47,520
that would be great as well yeah yeah

01:02:46,400 --> 01:02:49,920
sure this is also look at

01:02:47,520 --> 01:02:50,720
okay once you finish shares i'll do that

01:02:49,920 --> 01:02:53,920
okay cool

01:02:50,720 --> 01:02:57,359
um i'm just quickly i was just quickly

01:02:53,920 --> 01:02:59,680
uh making a slide thing so i can uh

01:02:57,359 --> 01:03:01,359
show um the different applications okay

01:02:59,680 --> 01:03:04,400
cool um let me

01:03:01,359 --> 01:03:04,400
share my screen again

01:03:06,559 --> 01:03:14,079
okay so um can you see my screen

01:03:10,880 --> 01:03:17,520
yes okay so um yeah

01:03:14,079 --> 01:03:19,520
the do you want me to show cf logs first

01:03:17,520 --> 01:03:21,039
yeah yeah sure sure that's important

01:03:19,520 --> 01:03:23,200
yeah if

01:03:21,039 --> 01:03:25,039
we if you run cf logs you can see okay

01:03:23,200 --> 01:03:27,200
what i need to give it app so if i did

01:03:25,039 --> 01:03:30,400
see if vlogs on say like

01:03:27,200 --> 01:03:32,880
spring music

01:03:30,400 --> 01:03:34,400
um it's kind of hard to see like if

01:03:32,880 --> 01:03:35,200
you're looking at this one like if you

01:03:34,400 --> 01:03:38,799
end up

01:03:35,200 --> 01:03:40,319
using like um something to like pipe

01:03:38,799 --> 01:03:41,760
into and actually see

01:03:40,319 --> 01:03:43,359
like maybe different colors or whatnot

01:03:41,760 --> 01:03:44,480
if you like it that way um it's kind of

01:03:43,359 --> 01:03:47,599
easier to

01:03:44,480 --> 01:03:52,559
look at um there like if we

01:03:47,599 --> 01:03:56,839
look i guess there we go um

01:03:52,559 --> 01:03:59,440
at the top here um you can also

01:03:56,839 --> 01:04:01,119
basically it like if you're running this

01:03:59,440 --> 01:04:04,160
like you can see like what's

01:04:01,119 --> 01:04:05,599
happening with it um was there something

01:04:04,160 --> 01:04:08,400
specific you wanted to show with it

01:04:05,599 --> 01:04:09,200
from nope just logs are a developer's

01:04:08,400 --> 01:04:12,079
best friend

01:04:09,200 --> 01:04:13,680
so just yeah so like basically if

01:04:12,079 --> 01:04:15,599
something ends up failing

01:04:13,680 --> 01:04:17,359
um one of the things there's like a few

01:04:15,599 --> 01:04:20,480
ways you can look at it you can look at

01:04:17,359 --> 01:04:22,720
the logs here you can do uh

01:04:20,480 --> 01:04:24,319
describe on the pod which i'll show you

01:04:22,720 --> 01:04:25,039
in a second like where all the pods and

01:04:24,319 --> 01:04:27,920
things are

01:04:25,039 --> 01:04:29,280
and then like you can do uh like just

01:04:27,920 --> 01:04:32,240
your normal like logs and

01:04:29,280 --> 01:04:32,799
other things like that so um the way

01:04:32,240 --> 01:04:36,000
that

01:04:32,799 --> 01:04:38,880
cf currently works at least um

01:04:36,000 --> 01:04:39,440
what there's two primary name spaces

01:04:38,880 --> 01:04:42,079
that you

01:04:39,440 --> 01:04:43,200
have to kind of care about um so there's

01:04:42,079 --> 01:04:45,359
the cf system

01:04:43,200 --> 01:04:47,119
and that is where like all the system

01:04:45,359 --> 01:04:50,880
things that are running for cfr

01:04:47,119 --> 01:04:52,480
so um i can show a slide in a sec

01:04:50,880 --> 01:04:55,039
just kind of to just take a look at it

01:04:52,480 --> 01:04:57,839
but like if you look on this cf

01:04:55,039 --> 01:04:59,119
on github for uh cf for kate it's it'll

01:04:57,839 --> 01:04:59,760
show there's a diagram there so like

01:04:59,119 --> 01:05:02,960
there's

01:04:59,760 --> 01:05:04,400
things like you have irini um you have

01:05:02,960 --> 01:05:05,359
the uaa there's like a bunch of

01:05:04,400 --> 01:05:07,680
different things that

01:05:05,359 --> 01:05:08,400
run in that and then um right now at

01:05:07,680 --> 01:05:11,039
least um

01:05:08,400 --> 01:05:12,720
all the applications that you run run in

01:05:11,039 --> 01:05:16,240
cf workloads

01:05:12,720 --> 01:05:18,720
so like right now if we did uh

01:05:16,240 --> 01:05:19,599
if we i have k it's just mapped to

01:05:18,720 --> 01:05:22,799
kubernetes

01:05:19,599 --> 01:05:27,119
cube ctl because i'm lazy um so if we

01:05:22,799 --> 01:05:27,119
do get uh namespace

01:05:27,440 --> 01:05:31,200
if there we go um we can see that

01:05:29,440 --> 01:05:31,599
there's different things i created here

01:05:31,200 --> 01:05:33,359
there's

01:05:31,599 --> 01:05:34,880
blob store there's database there's a cf

01:05:33,359 --> 01:05:36,240
system that we mentioned that i just

01:05:34,880 --> 01:05:36,960
mentioned there's the cf workloads and

01:05:36,240 --> 01:05:40,400
then there's also

01:05:36,960 --> 01:05:43,520
staging one and then um when

01:05:40,400 --> 01:05:44,720
uh cf fricates uses istio for all the

01:05:43,520 --> 01:05:47,200
routings so there

01:05:44,720 --> 01:05:48,720
it ends up in creating one for istio

01:05:47,200 --> 01:05:49,760
there's kpac which is the one that's

01:05:48,720 --> 01:05:52,480
used for

01:05:49,760 --> 01:05:53,599
building all of your images from your

01:05:52,480 --> 01:05:58,400
code

01:05:53,599 --> 01:05:58,400
so like for instance if i did uh

01:05:58,480 --> 01:06:07,760
if i looked at the cf system

01:06:04,079 --> 01:06:09,119
just do yeah so like i didn't get also

01:06:07,760 --> 01:06:10,319
there's a lot here but like you can kind

01:06:09,119 --> 01:06:11,920
of see there's a bunch of different

01:06:10,319 --> 01:06:14,480
services created there's

01:06:11,920 --> 01:06:15,520
uh different deployments for controllers

01:06:14,480 --> 01:06:18,000
like if you look

01:06:15,520 --> 01:06:18,559
again at that diagram um basically there

01:06:18,000 --> 01:06:20,240
is a

01:06:18,559 --> 01:06:21,599
it shows what all these different things

01:06:20,240 --> 01:06:23,599
are

01:06:21,599 --> 01:06:25,280
um if you want to like know a little bit

01:06:23,599 --> 01:06:26,799
more about some of the specific things

01:06:25,280 --> 01:06:27,680
there are videos that you can look at

01:06:26,799 --> 01:06:30,079
like there's one

01:06:27,680 --> 01:06:31,200
on so we have the at vmware we have this

01:06:30,079 --> 01:06:35,039
thing called tons of

01:06:31,200 --> 01:06:37,119
tv which people both internal external

01:06:35,039 --> 01:06:38,319
will do streaming about different topics

01:06:37,119 --> 01:06:39,920
so if you just go to the website

01:06:38,319 --> 01:06:42,240
tanzu.tv

01:06:39,920 --> 01:06:45,039
under tonsu tuesdays there's one about

01:06:42,240 --> 01:06:48,160
there's a few of them about cf for case

01:06:45,039 --> 01:06:52,720
um so now if we do the same thing but

01:06:48,160 --> 01:06:52,720
instead if we do it for cf workloads

01:06:53,039 --> 01:06:57,280
you can see here that it create so for

01:06:56,079 --> 01:06:58,960
me i only have three applications

01:06:57,280 --> 01:06:59,839
running so you can see that there's the

01:06:58,960 --> 01:07:02,079
stable set for

01:06:59,839 --> 01:07:03,599
all three of those and then it has the

01:07:02,079 --> 01:07:06,960
surfaces for all of them

01:07:03,599 --> 01:07:07,680
and the different pods so um there is

01:07:06,960 --> 01:07:11,359
this

01:07:07,680 --> 01:07:14,720
tool called octant it's open source so

01:07:11,359 --> 01:07:16,559
if i just like make sure that i go here

01:07:14,720 --> 01:07:19,119
so that i open the right one so if i do

01:07:16,559 --> 01:07:19,119
octant

01:07:19,359 --> 01:07:25,920
it will open it here so

01:07:22,799 --> 01:07:27,520
um basically um with octant it's just

01:07:25,920 --> 01:07:28,000
like a web ui for you to look at your

01:07:27,520 --> 01:07:30,400
cluster

01:07:28,000 --> 01:07:31,119
which can be pretty useful so say if i

01:07:30,400 --> 01:07:34,240
were to

01:07:31,119 --> 01:07:35,680
go and look um i can see all the

01:07:34,240 --> 01:07:37,760
different contexts i have and then we

01:07:35,680 --> 01:07:41,520
can look in here and you can see

01:07:37,760 --> 01:07:44,720
okay so if i look at my workloads

01:07:41,520 --> 01:07:46,640
if it's my internet's me also um

01:07:44,720 --> 01:07:47,760
i'm going to shrink it down just you

01:07:46,640 --> 01:07:48,720
won't be able to read it but just so you

01:07:47,760 --> 01:07:50,640
can kind of see what the different

01:07:48,720 --> 01:07:52,799
things are so basically

01:07:50,640 --> 01:07:54,319
if we look here we can see like there's

01:07:52,799 --> 01:07:56,160
the there's a job that has to do with

01:07:54,319 --> 01:07:58,720
this deal we can see those pods that

01:07:56,160 --> 01:08:00,000
are there you can dig into them you can

01:07:58,720 --> 01:08:01,680
see what logs are

01:08:00,000 --> 01:08:03,680
like what are the logs and kind of see

01:08:01,680 --> 01:08:06,960
what's happening there

01:08:03,680 --> 01:08:11,839
and then um the thing that i wanted to

01:08:06,960 --> 01:08:11,839
show is like so if i try

01:08:12,160 --> 01:08:18,960
see there we go okay so if

01:08:15,920 --> 01:08:19,279
i tried using a privileged container to

01:08:18,960 --> 01:08:22,719
run

01:08:19,279 --> 01:08:26,080
if i did a cf push on that

01:08:22,719 --> 01:08:26,480
um you'll see that it is doing the same

01:08:26,080 --> 01:08:29,520
stuff

01:08:26,480 --> 01:08:32,239
as like you normally might expect

01:08:29,520 --> 01:08:34,080
and then you can see okay so i'm it's

01:08:32,239 --> 01:08:37,120
trying to create my instances

01:08:34,080 --> 01:08:39,199
it will end up doing this for a while so

01:08:37,120 --> 01:08:40,319
like what you could do is you could do

01:08:39,199 --> 01:08:43,759
like a cf

01:08:40,319 --> 01:08:44,080
logs on let's see did i is it directly

01:08:43,759 --> 01:08:45,920
called

01:08:44,080 --> 01:08:48,719
yeah on nginx you kind of can see all

01:08:45,920 --> 01:08:52,000
right there's some things happening here

01:08:48,719 --> 01:08:55,520
if we did uh if we look to

01:08:52,000 --> 01:08:57,600
see at ipods you can see

01:08:55,520 --> 01:08:58,880
okay there's a there's an error here if

01:08:57,600 --> 01:09:02,880
we also look

01:08:58,880 --> 01:09:06,560
at um sorry for my thing popping up

01:09:02,880 --> 01:09:09,359
there but if we also go back here

01:09:06,560 --> 01:09:10,480
and take a look we can see oh hey um

01:09:09,359 --> 01:09:12,880
it's pending and

01:09:10,480 --> 01:09:13,920
this one the nice things about uh octane

01:09:12,880 --> 01:09:16,560
is like

01:09:13,920 --> 01:09:17,600
if you're looking at your pods um you

01:09:16,560 --> 01:09:18,880
normally have to use

01:09:17,600 --> 01:09:20,480
some sort of watch command to see what's

01:09:18,880 --> 01:09:22,319
happening here it's in real time so you

01:09:20,480 --> 01:09:25,279
can see that things are happening

01:09:22,319 --> 01:09:26,000
if we like take a look into it you can

01:09:25,279 --> 01:09:29,920
kind of see

01:09:26,000 --> 01:09:32,640
oh look hey so um with the proxy

01:09:29,920 --> 01:09:33,759
okay so that's ready all right so now we

01:09:32,640 --> 01:09:36,799
see all right

01:09:33,759 --> 01:09:39,600
what's happening so the nginx one it's

01:09:36,799 --> 01:09:41,759
has the error container has run as

01:09:39,600 --> 01:09:43,520
non-root and image won't run as root

01:09:41,759 --> 01:09:45,759
so that's where that thing is happening

01:09:43,520 --> 01:09:46,640
where it's not it's unpre it's

01:09:45,759 --> 01:09:48,719
privileged it's

01:09:46,640 --> 01:09:50,159
trying to run as root and you have like

01:09:48,719 --> 01:09:52,159
in order to change this you have to

01:09:50,159 --> 01:09:53,199
you'd have to run as basically some user

01:09:52,159 --> 01:09:55,280
that's not root

01:09:53,199 --> 01:09:56,800
so one way the way to look at this just

01:09:55,280 --> 01:10:02,239
like here on

01:09:56,800 --> 01:10:04,960
kubernetes is if i was to do a

01:10:02,239 --> 01:10:06,080
describe because since it's not running

01:10:04,960 --> 01:10:07,280
you wouldn't be able to actually see all

01:10:06,080 --> 01:10:09,520
the logs for it

01:10:07,280 --> 01:10:11,760
so if i just did a describe on this one

01:10:09,520 --> 01:10:11,760
here

01:10:14,840 --> 01:10:17,840
oops

01:10:19,199 --> 01:10:23,760
oh my gosh can i not i can't type today

01:10:24,400 --> 01:10:28,000
okay so yeah basically you can this

01:10:26,719 --> 01:10:29,120
shows like some of the same stuff like

01:10:28,000 --> 01:10:30,719
you're looking through here and then you

01:10:29,120 --> 01:10:34,880
see oh hey there's this error

01:10:30,719 --> 01:10:37,199
so then if i were to be like oh well um

01:10:34,880 --> 01:10:37,199
come on

01:10:39,199 --> 01:10:43,040
i don't i need a member there we go so

01:10:40,960 --> 01:10:47,520
like if i were to just run this one

01:10:43,040 --> 01:10:51,040
this oops i did i did something wrong

01:10:47,520 --> 01:10:52,640
yeah yeah okay um

01:10:51,040 --> 01:10:54,480
i typed something wrong in here but uh

01:10:52,640 --> 01:10:55,920
basically like if you end up using the

01:10:54,480 --> 01:10:56,640
unprivileged one it would end up running

01:10:55,920 --> 01:11:00,640
if i did

01:10:56,640 --> 01:11:01,840
not screw it up yeah so thank you thank

01:11:00,640 --> 01:11:04,560
you excuse me for that

01:11:01,840 --> 01:11:06,480
um do you want to quickly show us um how

01:11:04,560 --> 01:11:07,760
people can connect to maybe services

01:11:06,480 --> 01:11:09,840
like database

01:11:07,760 --> 01:11:11,679
et cetera you know like we just give us

01:11:09,840 --> 01:11:15,440
a quick run through

01:11:11,679 --> 01:11:15,440
so we don't waste so much time

01:11:16,560 --> 01:11:19,679
sure and i guess since i have the slides

01:11:18,480 --> 01:11:21,199
real quick i'm just going to quit

01:11:19,679 --> 01:11:22,320
because i added something to them i'm

01:11:21,199 --> 01:11:23,760
just going to quickly show that so

01:11:22,320 --> 01:11:24,239
people can take screenshots and then we

01:11:23,760 --> 01:11:26,480
can go

01:11:24,239 --> 01:11:29,520
back to your thing is yes that's cool

01:11:26,480 --> 01:11:29,520
okay yeah sure

01:11:33,440 --> 01:11:40,239
where is my thing

01:11:36,719 --> 01:11:42,480
there we go

01:11:40,239 --> 01:11:43,760
okay so uh basically there's a bunch of

01:11:42,480 --> 01:11:44,960
different things that you can look at

01:11:43,760 --> 01:11:48,600
for getting started so

01:11:44,960 --> 01:11:51,199
uh there's an insta there's the cfr cf-4

01:11:48,600 --> 01:11:52,560
dashcades.io website there's also like

01:11:51,199 --> 01:11:55,840
this getting started

01:11:52,560 --> 01:11:57,840
um so basically you can just go here if

01:11:55,840 --> 01:12:00,400
you have questions you can go to

01:11:57,840 --> 01:12:03,360
these cloud foundry slack group and

01:12:00,400 --> 01:12:06,840
there is a cf for kate's slack channel

01:12:03,360 --> 01:12:08,159
or you can also go to release

01:12:06,840 --> 01:12:11,440
integration

01:12:08,159 --> 01:12:14,640
um here are some links uh the first one

01:12:11,440 --> 01:12:15,920
is for the blog of when cf for kate's

01:12:14,640 --> 01:12:17,679
first came out

01:12:15,920 --> 01:12:19,280
then there's cloud foundry's website

01:12:17,679 --> 01:12:20,960
there's the cf for kate's i o

01:12:19,280 --> 01:12:22,480
that i mentioned um there are different

01:12:20,960 --> 01:12:24,000
tutorials that you can run

01:12:22,480 --> 01:12:25,199
i don't know if you want any either of

01:12:24,000 --> 01:12:27,040
you want to say something more about the

01:12:25,199 --> 01:12:29,440
tutorials

01:12:27,040 --> 01:12:31,679
yeah yeah so um if you also want to like

01:12:29,440 --> 01:12:33,840
know more stuff about how what how

01:12:31,679 --> 01:12:34,960
cloud foundry can improve your whole um

01:12:33,840 --> 01:12:36,480
developer workflow

01:12:34,960 --> 01:12:39,440
when it comes to deploying apps then you

01:12:36,480 --> 01:12:41,760
can use check the um tutorials

01:12:39,440 --> 01:12:43,280
and if you want more practical and get

01:12:41,760 --> 01:12:44,640
more getting started with various

01:12:43,280 --> 01:12:46,000
languages um

01:12:44,640 --> 01:12:48,400
tutorials you can just check the cloud

01:12:46,000 --> 01:12:50,640
funding media on publication yeah i am

01:12:48,400 --> 01:12:52,880
i myself around we keep on uploading on

01:12:50,640 --> 01:12:53,520
writing new blog posts new tutorials on

01:12:52,880 --> 01:12:55,840
how to

01:12:53,520 --> 01:12:56,960
like use um cfs and certificates for

01:12:55,840 --> 01:12:58,800
like various things

01:12:56,960 --> 01:13:00,159
and also deploying various apps to cfo

01:12:58,800 --> 01:13:03,520
kids and the last

01:13:00,159 --> 01:13:07,120
is um tiffany i think that's the cue

01:13:03,520 --> 01:13:09,280
yeah so uh their

01:13:07,120 --> 01:13:10,159
tonsil application service has like a

01:13:09,280 --> 01:13:12,560
kubernetes

01:13:10,159 --> 01:13:14,239
action so that is being worked on it's

01:13:12,560 --> 01:13:17,440
in beta right now if you want to

01:13:14,239 --> 01:13:20,560
try it out so basically it is built upon

01:13:17,440 --> 01:13:23,760
cloud surface but it adds in uh

01:13:20,560 --> 01:13:26,560
some other like integrations that are

01:13:23,760 --> 01:13:27,920
like just built in on top of that um so

01:13:26,560 --> 01:13:31,040
if you want to take a look at that

01:13:27,920 --> 01:13:33,360
now you can go there and um there's

01:13:31,040 --> 01:13:35,120
connected to tanzu.tv there's also like

01:13:33,360 --> 01:13:35,840
some guides and vlogs that show you like

01:13:35,120 --> 01:13:39,280
how to go

01:13:35,840 --> 01:13:42,320
through cf for kids um

01:13:39,280 --> 01:13:43,840
so this includes like the applications

01:13:42,320 --> 01:13:46,560
that we were running

01:13:43,840 --> 01:13:47,600
so uh for go and java they both came

01:13:46,560 --> 01:13:49,840
from the same

01:13:47,600 --> 01:13:50,960
i accidentally did slash test app but

01:13:49,840 --> 01:13:53,280
for go and java

01:13:50,960 --> 01:13:54,880
they all came from cloud foundry dash

01:13:53,280 --> 01:13:56,480
sample so you just delete the test app

01:13:54,880 --> 01:13:57,199
if you want to find the java one which

01:13:56,480 --> 01:13:58,719
was

01:13:57,199 --> 01:14:00,880
there's like a pet clinic one in there

01:13:58,719 --> 01:14:04,000
there's uh the

01:14:00,880 --> 01:14:05,440
um the music application too so here's

01:14:04,000 --> 01:14:08,239
uh if you wanna take a screenshot of

01:14:05,440 --> 01:14:11,040
this or it's gonna be on the video later

01:14:08,239 --> 01:14:11,520
and then uh the other ones i don't have

01:14:11,040 --> 01:14:14,400
the

01:14:11,520 --> 01:14:15,840
um gatsby one in here because the link

01:14:14,400 --> 01:14:16,320
was not finished so i don't actually

01:14:15,840 --> 01:14:18,960
know which

01:14:16,320 --> 01:14:19,440
adsb application it was but um here are

01:14:18,960 --> 01:14:23,040
uh

01:14:19,440 --> 01:14:26,080
the python and php and ruby ones

01:14:23,040 --> 01:14:27,840
and if you want to bother

01:14:26,080 --> 01:14:29,840
like if you have twitter and you want to

01:14:27,840 --> 01:14:32,560
like talk to us later after this uh

01:14:29,840 --> 01:14:33,440
our twitters are at the bottom there and

01:14:32,560 --> 01:14:36,560
i will pass it

01:14:33,440 --> 01:14:36,560
back to around now

01:14:37,440 --> 01:14:41,600
tiffany before you pass it on did you

01:14:39,760 --> 01:14:42,560
mean to show like a diagram or like a

01:14:41,600 --> 01:14:47,679
block diagram

01:14:42,560 --> 01:14:47,679
oh yeah just different components

01:14:50,960 --> 01:14:54,560
okay so uh yeah this is the thing i

01:14:53,280 --> 01:14:57,840
mentioned previously

01:14:54,560 --> 01:14:59,280
so basically like there

01:14:57,840 --> 01:15:01,280
may be later where you can have

01:14:59,280 --> 01:15:01,600
different name spaces for your stuff but

01:15:01,280 --> 01:15:05,120
so

01:15:01,600 --> 01:15:07,040
in your cluster you have uh the

01:15:05,120 --> 01:15:08,840
system namespace which is the one that

01:15:07,040 --> 01:15:11,440
was the cf

01:15:08,840 --> 01:15:13,120
system and then um you

01:15:11,440 --> 01:15:14,480
so there's like different things in

01:15:13,120 --> 01:15:16,640
there so you have like

01:15:14,480 --> 01:15:18,159
there's the k pack which we were

01:15:16,640 --> 01:15:20,640
mentioning which uses the cloud native

01:15:18,159 --> 01:15:23,520
build packs there's pigetto which is the

01:15:20,640 --> 01:15:24,400
uh build packs are written in go you

01:15:23,520 --> 01:15:26,640
have istio

01:15:24,400 --> 01:15:27,679
which like manages the inner component

01:15:26,640 --> 01:15:30,800
communications

01:15:27,679 --> 01:15:32,719
like things to do with security um

01:15:30,800 --> 01:15:34,080
and then there's like some of if you've

01:15:32,719 --> 01:15:37,360
used cloud foundry before

01:15:34,080 --> 01:15:38,800
like the things in blue are things if i

01:15:37,360 --> 01:15:40,880
remember correctly are things that were

01:15:38,800 --> 01:15:41,199
existing just in regular cf so things

01:15:40,880 --> 01:15:43,520
like

01:15:41,199 --> 01:15:45,440
rini which is disgusting the scheduler

01:15:43,520 --> 01:15:46,080
for the cloud foundry application

01:15:45,440 --> 01:15:48,239
runtime

01:15:46,080 --> 01:15:49,520
it basically runs your huge applications

01:15:48,239 --> 01:15:53,199
in kubernetes

01:15:49,520 --> 01:15:56,320
uh uaa is a user account authentication

01:15:53,199 --> 01:15:58,000
there's fluency so for like a log always

01:15:56,320 --> 01:16:00,159
a log collector mini house

01:15:58,000 --> 01:16:01,280
for like cloud storage et cetera and

01:16:00,159 --> 01:16:04,400
then um

01:16:01,280 --> 01:16:04,800
on the right side is here that's the app

01:16:04,400 --> 01:16:08,080
work

01:16:04,800 --> 01:16:09,679
namespace so that's your like cf uh

01:16:08,080 --> 01:16:11,520
your cf workload so everything that

01:16:09,679 --> 01:16:13,280
you're running in there and then

01:16:11,520 --> 01:16:14,560
since kpac requires that registry you

01:16:13,280 --> 01:16:17,840
have that app registry

01:16:14,560 --> 01:16:18,239
uh when you first install things uh you

01:16:17,840 --> 01:16:21,360
need

01:16:18,239 --> 01:16:24,800
to use ytt and cap so uh

01:16:21,360 --> 01:16:28,560
ytt basically it handles

01:16:24,800 --> 01:16:29,920
um it's for yaml templating so like

01:16:28,560 --> 01:16:31,679
there's a bunch of different uh

01:16:29,920 --> 01:16:33,520
templates that it ends up

01:16:31,679 --> 01:16:35,760
putting together so that way you don't

01:16:33,520 --> 01:16:39,040
have to do each specific thing manually

01:16:35,760 --> 01:16:40,159
and then cap is kind of like a fancy

01:16:39,040 --> 01:16:43,040
version-ish

01:16:40,159 --> 01:16:44,239
of like cube ctl uh like when you're

01:16:43,040 --> 01:16:45,440
trying to like run an application with

01:16:44,239 --> 01:16:47,760
cube ctl but like

01:16:45,440 --> 01:16:49,199
it will follow your deployments and then

01:16:47,760 --> 01:16:51,280
it's used here

01:16:49,199 --> 01:16:52,400
for running the yaml that's been created

01:16:51,280 --> 01:16:55,679
to actually deploy

01:16:52,400 --> 01:16:57,520
uh cf so this actually

01:16:55,679 --> 01:16:59,199
makes me want to show one more thing

01:16:57,520 --> 01:17:00,719
while because it reminded me of a thing

01:16:59,199 --> 01:17:04,000
on here and then i'll

01:17:00,719 --> 01:17:07,520
pass it off so if we go

01:17:04,000 --> 01:17:10,800
back to here

01:17:07,520 --> 01:17:13,440
um so uh basically

01:17:10,800 --> 01:17:15,600
what when you end up it ends up creating

01:17:13,440 --> 01:17:17,760
some stuff if you look in the

01:17:15,600 --> 01:17:19,199
sd oh actually i don't remember exactly

01:17:17,760 --> 01:17:21,520
what it's called

01:17:19,199 --> 01:17:21,520
oops

01:17:26,239 --> 01:17:30,960
so if we look at istio system

01:17:29,360 --> 01:17:33,040
you can see like all the different

01:17:30,960 --> 01:17:36,080
things that were created so basically

01:17:33,040 --> 01:17:38,159
this istio ingress gateway

01:17:36,080 --> 01:17:39,440
is you so like for the way that i have

01:17:38,159 --> 01:17:41,840
mine set up i have that

01:17:39,440 --> 01:17:42,960
you can like i created a static ip in

01:17:41,840 --> 01:17:44,320
the beginning so

01:17:42,960 --> 01:17:46,400
every time that i run this it will

01:17:44,320 --> 01:17:48,400
always use that ip from

01:17:46,400 --> 01:17:50,480
and then this is running gke so

01:17:48,400 --> 01:17:51,280
basically every single time it has this

01:17:50,480 --> 01:17:55,040
ip and if

01:17:51,280 --> 01:17:58,159
you may remember like that

01:17:55,040 --> 01:18:00,320
zip i o path i had it has that specific

01:17:58,159 --> 01:18:02,080
external ip in there

01:18:00,320 --> 01:18:03,679
and then the last thing i wanted to show

01:18:02,080 --> 01:18:08,159
is if you do a

01:18:03,679 --> 01:18:08,159
cube ctl get virtual service

01:18:09,040 --> 01:18:12,159
you can see and he it's kind of hard to

01:18:10,880 --> 01:18:14,239
see because uh

01:18:12,159 --> 01:18:15,520
font size to like make it show but um

01:18:14,239 --> 01:18:16,960
you can see the things that are created

01:18:15,520 --> 01:18:19,920
with like cf system you can see

01:18:16,960 --> 01:18:21,120
with like logging uaa but then you can

01:18:19,920 --> 01:18:24,000
also see

01:18:21,120 --> 01:18:24,800
i have those uh three applications that

01:18:24,000 --> 01:18:27,199
are working

01:18:24,800 --> 01:18:28,719
in cf workloads so you can see how this

01:18:27,199 --> 01:18:29,600
is kind of connected with like what's

01:18:28,719 --> 01:18:31,679
running over there

01:18:29,600 --> 01:18:32,960
what the routes are and then here with

01:18:31,679 --> 01:18:34,640
having the

01:18:32,960 --> 01:18:36,560
ingress gateway for those different

01:18:34,640 --> 01:18:40,159
things there

01:18:36,560 --> 01:18:41,600
so yeah shall i pass it off to your room

01:18:40,159 --> 01:18:45,679
now

01:18:41,600 --> 01:18:45,679
yes rum for quick

01:18:49,920 --> 01:18:55,840
just remind me what i'm showing again

01:18:52,840 --> 01:18:55,840
services

01:18:56,239 --> 01:19:01,280
so um by way of background cloud foundry

01:19:00,080 --> 01:19:04,159
makes use of

01:19:01,280 --> 01:19:04,159
what is known as

01:19:04,480 --> 01:19:11,360
the 12-factor app principle so

01:19:08,239 --> 01:19:14,000
um it provides a very clean separation

01:19:11,360 --> 01:19:18,080
between what your application is

01:19:14,000 --> 01:19:22,320
and what your services are so um

01:19:18,080 --> 01:19:24,400
the way you get services into

01:19:22,320 --> 01:19:26,640
cloud foundry is by making use of what

01:19:24,400 --> 01:19:29,199
is known as cf marketplace

01:19:26,640 --> 01:19:31,600
and the way you get services into

01:19:29,199 --> 01:19:35,440
marketplace is basically like

01:19:31,600 --> 01:19:38,960
a platform operator workflow so

01:19:35,440 --> 01:19:40,400
they decide what services need to be

01:19:38,960 --> 01:19:42,880
made available to you

01:19:40,400 --> 01:19:44,640
and they attach what are known as plans

01:19:42,880 --> 01:19:47,920
for each of these services

01:19:44,640 --> 01:19:51,120
um cfr kids makes use of

01:19:47,920 --> 01:19:54,400
the open service broker api

01:19:51,120 --> 01:19:56,239
and that basically helps create

01:19:54,400 --> 01:19:57,920
all of the services that can then be

01:19:56,239 --> 01:20:02,840
provisioned

01:19:57,920 --> 01:20:05,280
very easily and attached to your apps so

01:20:02,840 --> 01:20:09,199
the different

01:20:05,280 --> 01:20:12,719
services that are available in this are

01:20:09,199 --> 01:20:14,480
a my sequel a redis and a

01:20:12,719 --> 01:20:16,239
and then i have all of these different

01:20:14,480 --> 01:20:18,639
plans that i can use

01:20:16,239 --> 01:20:21,120
and so if your application requires a

01:20:18,639 --> 01:20:23,440
database if your application requires a

01:20:21,120 --> 01:20:26,560
storage or a volume service if your

01:20:23,440 --> 01:20:29,600
application requires let's say some

01:20:26,560 --> 01:20:32,239
logging infrastructure that's that's

01:20:29,600 --> 01:20:35,600
outside of the scope of the app itself

01:20:32,239 --> 01:20:36,560
you basically use the services in the

01:20:35,600 --> 01:20:39,840
marketplace

01:20:36,560 --> 01:20:41,040
you bind them to your app and you just

01:20:39,840 --> 01:20:42,719
have to

01:20:41,040 --> 01:20:44,400
i mean cloud foundry automatically

01:20:42,719 --> 01:20:45,760
exchanges

01:20:44,400 --> 01:20:48,000
environment variables with the

01:20:45,760 --> 01:20:50,560
application and it will just

01:20:48,000 --> 01:20:51,920
be functional as long as you've

01:20:50,560 --> 01:20:53,440
configured the app

01:20:51,920 --> 01:20:55,040
programmatically to pick up these

01:20:53,440 --> 01:20:59,040
environment variables

01:20:55,040 --> 01:20:59,679
so i'm sure that's like a lot to unpack

01:20:59,040 --> 01:21:01,760
but

01:20:59,679 --> 01:21:03,840
given the limited time and scope of this

01:21:01,760 --> 01:21:07,520
video and there's

01:21:03,840 --> 01:21:10,960
there's definitely a lot of things that

01:21:07,520 --> 01:21:14,239
i think both tiffany and shadrach

01:21:10,960 --> 01:21:16,960
also have struggled to leave out

01:21:14,239 --> 01:21:19,280
rather than include so we will

01:21:16,960 --> 01:21:22,639
definitely follow up with you know more

01:21:19,280 --> 01:21:25,120
uh information in like future streams uh

01:21:22,639 --> 01:21:26,239
about each of these different aspects as

01:21:25,120 --> 01:21:28,080
uh

01:21:26,239 --> 01:21:30,239
even when tiffany was explaining all of

01:21:28,080 --> 01:21:32,719
this stuff um and especially sort of

01:21:30,239 --> 01:21:34,800
getting into the internals of cfr kids

01:21:32,719 --> 01:21:37,199
um i definitely think we should do one

01:21:34,800 --> 01:21:38,159
about just installation and so get into

01:21:37,199 --> 01:21:40,880
all of the

01:21:38,159 --> 01:21:42,800
details about each of those boxes and so

01:21:40,880 --> 01:21:43,760
that folks have you know better context

01:21:42,800 --> 01:21:45,920
and

01:21:43,760 --> 01:21:48,400
in general better appreciation for all

01:21:45,920 --> 01:21:50,960
of the different moving parts

01:21:48,400 --> 01:21:52,080
and obviously services are its own thing

01:21:50,960 --> 01:21:56,239
so

01:21:52,080 --> 01:21:59,280
details in future yeah um okay thank you

01:21:56,239 --> 01:22:00,239
i'm taking tiffany um um lastly uh if

01:21:59,280 --> 01:22:02,320
you need to like

01:22:00,239 --> 01:22:03,840
learn more stuff about cfo kids we have

01:22:02,320 --> 01:22:05,360
a couple of videos on the youtube

01:22:03,840 --> 01:22:06,880
channel on cloud from your youtube

01:22:05,360 --> 01:22:09,199
channel so you can just check that

01:22:06,880 --> 01:22:11,199
and see setting like we have a couple of

01:22:09,199 --> 01:22:12,719
videos already made and we are updating

01:22:11,199 --> 01:22:14,880
um our library with um

01:22:12,719 --> 01:22:17,199
more videos and if you need to also

01:22:14,880 --> 01:22:19,440
check out setting tutorials you can also

01:22:17,199 --> 01:22:21,199
go to tutorials the cloudfoundry.org

01:22:19,440 --> 01:22:22,800
you can also check the medium cloud

01:22:21,199 --> 01:22:24,880
foundry foundation medium

01:22:22,800 --> 01:22:26,480
on publication for like more if you're

01:22:24,880 --> 01:22:27,520
more of the reader you can just check

01:22:26,480 --> 01:22:30,239
the company medium

01:22:27,520 --> 01:22:30,880
application for more um tutorials so

01:22:30,239 --> 01:22:33,120
yeah that's

01:22:30,880 --> 01:22:34,480
um with all these i mean we've done so

01:22:33,120 --> 01:22:35,920
much we have come to the end of the live

01:22:34,480 --> 01:22:38,159
stream um

01:22:35,920 --> 01:22:40,000
yeah it took it took us a while to plan

01:22:38,159 --> 01:22:41,360
this and i'm just excited i'm so happy

01:22:40,000 --> 01:22:43,120
that we've been able to pull this off

01:22:41,360 --> 01:22:45,360
and thank you everybody for watching

01:22:43,120 --> 01:22:46,400
um thank you tiffany for all these

01:22:45,360 --> 01:22:49,520
answering our paul

01:22:46,400 --> 01:22:53,840
at early hours of the morning

01:22:49,520 --> 01:22:53,840
thank you ram thanks for staying up late

01:22:54,800 --> 01:23:00,639
yeah um with this i would just say um

01:22:58,400 --> 01:23:02,239
thank you and we're looking forward to

01:23:00,639 --> 01:23:02,960
um doing more live streams and seeing

01:23:02,239 --> 01:23:05,360
more people

01:23:02,960 --> 01:23:06,080
um join our live stream and yeah bye

01:23:05,360 --> 01:23:08,800
everybody

01:23:06,080 --> 01:23:09,679
see you um also next time for youtube

01:23:08,800 --> 01:23:11,520
there's also

01:23:09,679 --> 01:23:13,520
uh the vmware tons of one which also has

01:23:11,520 --> 01:23:14,880
some cf4k stuffs you can get to some of

01:23:13,520 --> 01:23:17,280
those things at least

01:23:14,880 --> 01:23:19,199
um from tonzu.tv but not i don't think

01:23:17,280 --> 01:23:22,239
all not all of them

01:23:19,199 --> 01:23:24,639
yeah so just check out tons.tv for um a

01:23:22,239 --> 01:23:26,880
few of the cfo case videos

01:23:24,639 --> 01:23:26,880

YouTube URL: https://www.youtube.com/watch?v=QQcPXO0FNsc


