Title: JavaScript Apps on Kubernetes - Simplified Using Cloud Foundry
Publication date: 2021-04-07
Playlist: Live Streams
Description: 
	JavaScript applications are everywhere! Startups, enterprises, mobile devices, edge computing all have JavaScript applications running on them. How have the recent changes and evolution in the world of computing infrastructure impacted JavaScript developers? 


Join us live on Thursday Feb 4th 2021 for a very special live stream featuring Cloud Foundry developer advocates Shedrack Akintayo and Ram Iyengar for the whole discussion.
Captions: 
	00:00:03,280 --> 00:00:08,480
okay

00:00:04,000 --> 00:00:08,480
um probably alive

00:00:12,639 --> 00:00:17,920
okay just to be sure

00:00:19,439 --> 00:00:22,080
are we live

00:00:27,439 --> 00:00:33,200
yes we are

00:00:30,800 --> 00:00:34,480
good morning good afternoon good evening

00:00:33,200 --> 00:00:38,239
to our viewers

00:00:34,480 --> 00:00:39,280
whichever part of the world you might be

00:00:38,239 --> 00:00:43,360
from

00:00:39,280 --> 00:00:46,079
my name is ram i am a developer advocate

00:00:43,360 --> 00:00:50,000
at the cloud foundry foundation thank

00:00:46,079 --> 00:00:50,000
you for joining our live stream today

00:00:50,079 --> 00:00:56,320
as you might have picked up from

00:00:53,600 --> 00:00:56,879
the title of the stream we're going to

00:00:56,320 --> 00:00:59,440
do

00:00:56,879 --> 00:01:02,879
a little bit of digging in into

00:00:59,440 --> 00:01:06,479
javascript applications today

00:01:02,879 --> 00:01:08,880
and we're going to take a look at

00:01:06,479 --> 00:01:09,680
how they can be containerized how to use

00:01:08,880 --> 00:01:13,520
them with

00:01:09,680 --> 00:01:15,840
docker how to deploy them to

00:01:13,520 --> 00:01:17,360
kubernetes at least talk a little bit

00:01:15,840 --> 00:01:20,720
about it

00:01:17,360 --> 00:01:21,759
and then take a deep dive into how you

00:01:20,720 --> 00:01:24,479
can accomplish

00:01:21,759 --> 00:01:25,680
all of these different things with a

00:01:24,479 --> 00:01:29,119
single step

00:01:25,680 --> 00:01:32,799
with the cloud foundry pass

00:01:29,119 --> 00:01:35,840
so also on the stream today is shadrach

00:01:32,799 --> 00:01:37,920
shadrach is also a developer advocate at

00:01:35,840 --> 00:01:41,759
the cloud foundry foundation

00:01:37,920 --> 00:01:45,200
shadrach joins us from nigeria

00:01:41,759 --> 00:01:48,880
which is his hometown lagos

00:01:45,200 --> 00:01:50,640
yeah why don't you just introduce

00:01:48,880 --> 00:01:54,000
yourself

00:01:50,640 --> 00:01:56,079
yes sure sure um hey everybody

00:01:54,000 --> 00:01:57,360
uh my name is shadrach akintayo i'm also

00:01:56,079 --> 00:01:59,360
a developer advocate at the cloud

00:01:57,360 --> 00:02:00,240
foundry foundation just like um ram has

00:01:59,360 --> 00:02:03,680
said

00:02:00,240 --> 00:02:06,479
and today we are bringing to you live

00:02:03,680 --> 00:02:08,160
um deploying and simplifying um

00:02:06,479 --> 00:02:11,920
javascript apps on kubernetes

00:02:08,160 --> 00:02:13,760
with cloud foundry um i've been doing

00:02:11,920 --> 00:02:14,800
javascript for a while even before i

00:02:13,760 --> 00:02:17,680
shifted to oh

00:02:14,800 --> 00:02:18,480
i moved to the um cloud native side of

00:02:17,680 --> 00:02:20,879
things

00:02:18,480 --> 00:02:22,720
and um there's so many benefits that

00:02:20,879 --> 00:02:24,239
cloud foundry brings to the table when

00:02:22,720 --> 00:02:25,200
it comes to deploying javascript apps on

00:02:24,239 --> 00:02:26,640
kubernetes

00:02:25,200 --> 00:02:28,319
there's so many out-of-the-box things

00:02:26,640 --> 00:02:31,200
that you do not need to do

00:02:28,319 --> 00:02:33,200
by yourself unlike when you have to um

00:02:31,200 --> 00:02:34,640
deploy stuff supplements

00:02:33,200 --> 00:02:36,239
without cloud foundry so today we are

00:02:34,640 --> 00:02:37,360
going to be highlighting these things

00:02:36,239 --> 00:02:39,920
we're going to be comparing and

00:02:37,360 --> 00:02:40,800
contrasting friendly in a friendly

00:02:39,920 --> 00:02:44,080
manner

00:02:40,800 --> 00:02:47,200
and also shows hopefully yeah

00:02:44,080 --> 00:02:49,599
hopefully friendly manner and show

00:02:47,200 --> 00:02:50,879
some action in some classroom action

00:02:49,599 --> 00:02:55,200
live and direct

00:02:50,879 --> 00:02:58,239
so ram can you like take over and

00:02:55,200 --> 00:03:01,680
let's get started sure

00:02:58,239 --> 00:03:02,159
so i wanted to first spend a couple of

00:03:01,680 --> 00:03:05,599
minutes

00:03:02,159 --> 00:03:06,239
giving folks the background about why we

00:03:05,599 --> 00:03:10,959
picked

00:03:06,239 --> 00:03:14,480
javascript today javascript is actually

00:03:10,959 --> 00:03:18,560
one of the most popular languages that

00:03:14,480 --> 00:03:21,760
cloud foundry users have

00:03:18,560 --> 00:03:24,799
been using in the past if you

00:03:21,760 --> 00:03:27,760
have happened to catch our

00:03:24,799 --> 00:03:31,440
survey that we did recently one of the

00:03:27,760 --> 00:03:31,440
questions that the respondents

00:03:31,840 --> 00:03:38,159
had was what languages

00:03:35,360 --> 00:03:40,640
are you using with cloud foundry and

00:03:38,159 --> 00:03:43,840
javascript actually

00:03:40,640 --> 00:03:44,799
came at number two in a list of about

00:03:43,840 --> 00:03:46,879
let's say the 10

00:03:44,799 --> 00:03:47,840
most popular languages that also had

00:03:46,879 --> 00:03:51,040
like

00:03:47,840 --> 00:03:54,319
java python go ruby

00:03:51,040 --> 00:03:57,760
and so many others dotnet php c

00:03:54,319 --> 00:04:01,760
sharp c plus plus etc

00:03:57,760 --> 00:04:02,959
there was also a significant number of

00:04:01,760 --> 00:04:06,480
people who

00:04:02,959 --> 00:04:09,680
said they use typescript so together

00:04:06,480 --> 00:04:14,159
it's like a big chunk of

00:04:09,680 --> 00:04:16,720
our total survey respondents and

00:04:14,159 --> 00:04:17,840
the reason we didn't go with java hat

00:04:16,720 --> 00:04:20,799
number one was

00:04:17,840 --> 00:04:22,400
there's a lot of information that folks

00:04:20,799 --> 00:04:25,759
already have about

00:04:22,400 --> 00:04:28,320
java and cloud foundry we

00:04:25,759 --> 00:04:29,199
as a foundation and as a team are also

00:04:28,320 --> 00:04:32,400
interested

00:04:29,199 --> 00:04:33,120
in exploring a little more in fact a lot

00:04:32,400 --> 00:04:36,240
more

00:04:33,120 --> 00:04:38,560
about what cloud foundry can do to

00:04:36,240 --> 00:04:42,000
javascript users

00:04:38,560 --> 00:04:45,199
now one of the things that i've

00:04:42,000 --> 00:04:49,600
personally experienced is that

00:04:45,199 --> 00:04:49,600
a lot of javascript engineers don't

00:04:50,479 --> 00:04:54,639
i don't want to say this in a bad way

00:04:52,080 --> 00:04:56,160
but they haven't generally kept up with

00:04:54,639 --> 00:04:58,320
a lot of the

00:04:56,160 --> 00:04:59,360
changes that have been happening in the

00:04:58,320 --> 00:05:02,400
infrastructure

00:04:59,360 --> 00:05:04,759
they have a very why do i care sort of

00:05:02,400 --> 00:05:06,960
attitude when it comes to

00:05:04,759 --> 00:05:08,400
containerization and kubernetes and

00:05:06,960 --> 00:05:09,600
things like that they're very happy to

00:05:08,400 --> 00:05:12,800
just

00:05:09,600 --> 00:05:15,680
write their code hand it off to

00:05:12,800 --> 00:05:16,400
another service or just check it in and

00:05:15,680 --> 00:05:18,479
have

00:05:16,400 --> 00:05:20,720
other operators take it over and things

00:05:18,479 --> 00:05:23,199
like that of course they're very

00:05:20,720 --> 00:05:24,000
happy and very eager to receive feedback

00:05:23,199 --> 00:05:27,120
in terms of how

00:05:24,000 --> 00:05:31,360
my code is performing is it fast

00:05:27,120 --> 00:05:32,240
is it is it is it optimized and things

00:05:31,360 --> 00:05:34,560
like that

00:05:32,240 --> 00:05:36,160
but when it comes to you know operating

00:05:34,560 --> 00:05:37,919
it and making sure it runs on like

00:05:36,160 --> 00:05:38,720
different infrastructure and keeping up

00:05:37,919 --> 00:05:40,560
with like

00:05:38,720 --> 00:05:42,639
oh there's a new um sort of

00:05:40,560 --> 00:05:45,039
infrastructure in town

00:05:42,639 --> 00:05:46,560
is my code capable of running on that is

00:05:45,039 --> 00:05:48,000
it you know compliant with all those

00:05:46,560 --> 00:05:51,600
standards

00:05:48,000 --> 00:05:52,000
i found that they prefer conversations

00:05:51,600 --> 00:05:56,080
about

00:05:52,000 --> 00:05:58,720
the farmer and not quite the latter so

00:05:56,080 --> 00:06:00,240
i mean that's not to discount a lot of

00:05:58,720 --> 00:06:02,319
developer teams who've already

00:06:00,240 --> 00:06:04,800
taken the effort to containerize their

00:06:02,319 --> 00:06:05,840
applications and make use of kubernetes

00:06:04,800 --> 00:06:07,759
and

00:06:05,840 --> 00:06:09,199
deploy these javascript apps to

00:06:07,759 --> 00:06:12,400
kubernetes

00:06:09,199 --> 00:06:14,479
but really the goal is to simplify this

00:06:12,400 --> 00:06:17,360
workflow for

00:06:14,479 --> 00:06:19,280
a majority of the javascript developers

00:06:17,360 --> 00:06:20,880
why majority all of the javascript

00:06:19,280 --> 00:06:23,199
developers let's say that's a

00:06:20,880 --> 00:06:24,720
that's a that's a greedy sort of wish

00:06:23,199 --> 00:06:29,440
that i have

00:06:24,720 --> 00:06:32,720
so yeah um you know

00:06:29,440 --> 00:06:35,360
and and i guess the biggest reason

00:06:32,720 --> 00:06:36,479
why we picked javascript over all others

00:06:35,360 --> 00:06:39,120
is because

00:06:36,479 --> 00:06:39,759
shadrach is a front-end developer

00:06:39,120 --> 00:06:43,199
himself

00:06:39,759 --> 00:06:46,319
and our resident javascript expert

00:06:43,199 --> 00:06:49,440
so that is

00:06:46,319 --> 00:06:52,880
another reason why we picked this

00:06:49,440 --> 00:06:56,639
disclaimer i'm not an expert please

00:06:52,880 --> 00:06:58,400
well just on the two people speaking on

00:06:56,639 --> 00:07:02,720
this call

00:06:58,400 --> 00:07:04,479
you are comparatively the expert

00:07:02,720 --> 00:07:07,199
okay i'll take credit for that too i'll

00:07:04,479 --> 00:07:07,199
take that credit

00:07:07,440 --> 00:07:12,160
yeah yeah sure um like grandma said well

00:07:09,840 --> 00:07:14,000
um developers like javascript developers

00:07:12,160 --> 00:07:16,000
mostly likes to focus on not just the

00:07:14,000 --> 00:07:18,319
website developers developers in general

00:07:16,000 --> 00:07:20,000
the we mostly like to focus on

00:07:18,319 --> 00:07:21,520
development we don't want anything else

00:07:20,000 --> 00:07:22,000
taking our time we just want to write

00:07:21,520 --> 00:07:24,720
code

00:07:22,000 --> 00:07:26,880
push ship code um etc so now javascript

00:07:24,720 --> 00:07:29,360
developers are like on literally

00:07:26,880 --> 00:07:32,000
the other end of the web application

00:07:29,360 --> 00:07:34,560
stack compared to containers um

00:07:32,000 --> 00:07:35,759
kubernetes and infrastructure we sort of

00:07:34,560 --> 00:07:37,360
don't care like

00:07:35,759 --> 00:07:39,840
we just want to write our code deploy

00:07:37,360 --> 00:07:41,919
our push and push our code and

00:07:39,840 --> 00:07:44,000
let the devops people do the rest of the

00:07:41,919 --> 00:07:45,120
whole deployment and infrastructure

00:07:44,000 --> 00:07:46,879
i think we don't want to worry about

00:07:45,120 --> 00:07:48,400
that now there are too many moving parts

00:07:46,879 --> 00:07:50,080
when it comes to platform operations

00:07:48,400 --> 00:07:52,160
that javascript developers like us

00:07:50,080 --> 00:07:53,520
just wouldn't like to focus on we don't

00:07:52,160 --> 00:07:55,520
care about it i mean

00:07:53,520 --> 00:07:57,280
for the most part i i don't want to say

00:07:55,520 --> 00:08:00,479
um talk about everybody

00:07:57,280 --> 00:08:03,919
so when we talk about docker files um

00:08:00,479 --> 00:08:06,240
pods um nodes uh miami

00:08:03,919 --> 00:08:06,960
replicases and other things we tend to

00:08:06,240 --> 00:08:09,919
alienate

00:08:06,960 --> 00:08:10,319
js developers i mean it's not composed

00:08:09,919 --> 00:08:12,400
it's not

00:08:10,319 --> 00:08:13,919
intentional it's just that we've just

00:08:12,400 --> 00:08:15,840
seen that developers

00:08:13,919 --> 00:08:18,000
really don't care about these things so

00:08:15,840 --> 00:08:20,000
as a result the javascript community

00:08:18,000 --> 00:08:21,039
has valid around technology such as

00:08:20,000 --> 00:08:24,160
netlify

00:08:21,039 --> 00:08:26,639
vessel which allow rapid development

00:08:24,160 --> 00:08:28,240
of applications so i mean if you have

00:08:26,639 --> 00:08:29,039
been doing javascript for a while and

00:08:28,240 --> 00:08:31,280
you

00:08:29,039 --> 00:08:33,599
need like a fast method to deploy your

00:08:31,280 --> 00:08:34,800
app and say go live we always go for 95

00:08:33,599 --> 00:08:37,360
or we go for vessel

00:08:34,800 --> 00:08:39,200
i mean yeah awesome technology help us

00:08:37,360 --> 00:08:41,440
deploy stuff as fast as possible

00:08:39,200 --> 00:08:43,279
we see our changes live corners through

00:08:41,440 --> 00:08:45,680
gits push your code to kids

00:08:43,279 --> 00:08:47,680
you see and automatically job starts and

00:08:45,680 --> 00:08:50,959
you see your application live on netflix

00:08:47,680 --> 00:08:53,360
fantastic stuff now it's basically help

00:08:50,959 --> 00:08:54,640
us ship code fast um without knowing

00:08:53,360 --> 00:08:56,080
about we don't have it in

00:08:54,640 --> 00:08:58,080
having to know about um any of the

00:08:56,080 --> 00:08:59,600
internal operations or implementation

00:08:58,080 --> 00:09:02,240
when it comes to deploying stuff

00:08:59,600 --> 00:09:03,360
now this this particular abstraction um

00:09:02,240 --> 00:09:05,760
it's very very

00:09:03,360 --> 00:09:07,200
crucial in getting the javascript

00:09:05,760 --> 00:09:10,160
community to adopt or

00:09:07,200 --> 00:09:11,760
adapt um to changing infrastructure and

00:09:10,160 --> 00:09:14,720
platforms so

00:09:11,760 --> 00:09:16,240
um i would just like ram to quickly give

00:09:14,720 --> 00:09:18,080
us a short comparison

00:09:16,240 --> 00:09:20,240
with um doing this operation the

00:09:18,080 --> 00:09:22,720
operational part of things with netlify

00:09:20,240 --> 00:09:22,720
and um

00:09:26,240 --> 00:09:28,880
yeah i mean

00:09:29,279 --> 00:09:32,399
it's very interesting that you mentioned

00:09:31,279 --> 00:09:34,959
like

00:09:32,399 --> 00:09:36,160
netlify and bertel and all of these

00:09:34,959 --> 00:09:39,440
other

00:09:36,160 --> 00:09:42,480
tools that you know i i keep hearing

00:09:39,440 --> 00:09:43,120
uh about and i'm sure it's the rage in

00:09:42,480 --> 00:09:46,240
the js

00:09:43,120 --> 00:09:48,480
hipster community but um

00:09:46,240 --> 00:09:49,920
here's here's what i want to understand

00:09:48,480 --> 00:09:52,720
the workflow that you're

00:09:49,920 --> 00:09:55,040
going towards is you have your

00:09:52,720 --> 00:09:58,399
application source code

00:09:55,040 --> 00:09:59,680
and then you know one of these tools

00:09:58,399 --> 00:10:02,800
comes in

00:09:59,680 --> 00:10:05,839
they take your source they

00:10:02,800 --> 00:10:07,839
build something out of it what it is

00:10:05,839 --> 00:10:08,880
is unnecessary right they build

00:10:07,839 --> 00:10:12,079
something out of it

00:10:08,880 --> 00:10:15,600
and then they deploy that code somewhere

00:10:12,079 --> 00:10:17,519
right and this somewhere you're not

00:10:15,600 --> 00:10:20,079
very particular about understanding what

00:10:17,519 --> 00:10:24,000
this somewhere is

00:10:20,079 --> 00:10:26,010
so the the the important focus for you

00:10:24,000 --> 00:10:27,519
is the source itself

00:10:26,010 --> 00:10:30,000
[Music]

00:10:27,519 --> 00:10:32,000
and then you're very app aware in terms

00:10:30,000 --> 00:10:35,440
of okay this is my final application

00:10:32,000 --> 00:10:35,839
this is what it does but you do not want

00:10:35,440 --> 00:10:37,519
to be

00:10:35,839 --> 00:10:39,519
platform aware you do not want to be

00:10:37,519 --> 00:10:42,720
infrastructure aware

00:10:39,519 --> 00:10:44,640
you are as a javascript developer you

00:10:42,720 --> 00:10:46,880
would like to

00:10:44,640 --> 00:10:48,560
see that speed and you would like your

00:10:46,880 --> 00:10:51,120
to see your code move through all of

00:10:48,560 --> 00:10:53,519
these stages what have you

00:10:51,120 --> 00:10:54,560
and then you want it deployed at like a

00:10:53,519 --> 00:10:57,519
target

00:10:54,560 --> 00:10:58,000
instance so that's really the workflow

00:10:57,519 --> 00:11:00,959
um

00:10:58,000 --> 00:11:01,519
if i understand things correctly yeah

00:11:00,959 --> 00:11:03,279
yeah yeah

00:11:01,519 --> 00:11:05,600
sure sure definitely that's definitely

00:11:03,279 --> 00:11:08,399
the workflow

00:11:05,600 --> 00:11:08,399
right and then

00:11:09,760 --> 00:11:13,760
generally speaking you want this path to

00:11:12,160 --> 00:11:16,720
be one that has

00:11:13,760 --> 00:11:17,279
you know like zero friction minimal

00:11:16,720 --> 00:11:20,959
friction

00:11:17,279 --> 00:11:23,360
for practical purposes

00:11:20,959 --> 00:11:23,360
and then

00:11:24,880 --> 00:11:30,160
do you know if like netlify

00:11:27,800 --> 00:11:34,720
containerizes your apps do you know

00:11:30,160 --> 00:11:36,959
if like if it can run on kubernetes or

00:11:34,720 --> 00:11:40,160
if it is running on kubernetes or

00:11:36,959 --> 00:11:42,399
is it all vms underneath or is it like

00:11:40,160 --> 00:11:44,720
i don't know 10 turtles that are just

00:11:42,399 --> 00:11:48,240
down there holding your apps up on the

00:11:44,720 --> 00:11:51,360
shelves of their pack so um

00:11:48,240 --> 00:11:54,959
is that is that visibility something

00:11:51,360 --> 00:11:58,000
that you as a javascript developer

00:11:54,959 --> 00:12:01,120
find important or is that something like

00:11:58,000 --> 00:12:03,760
you know i i don't care or

00:12:01,120 --> 00:12:04,480
as long as it gets deployed i'm happy

00:12:03,760 --> 00:12:07,760
what's

00:12:04,480 --> 00:12:09,839
what's your feel and so let's

00:12:07,760 --> 00:12:10,959
let's answer this question in two parts

00:12:09,839 --> 00:12:14,079
right what is

00:12:10,959 --> 00:12:17,440
your feel as an individual java

00:12:14,079 --> 00:12:18,880
javascript developer and then what do

00:12:17,440 --> 00:12:22,160
others in the community

00:12:18,880 --> 00:12:25,279
you know say or react to or

00:12:22,160 --> 00:12:28,560
would think of um in

00:12:25,279 --> 00:12:31,600
if the same question was asked to them

00:12:28,560 --> 00:12:33,839
um yeah so uh basically

00:12:31,600 --> 00:12:35,680
i will personally i really do not have

00:12:33,839 --> 00:12:36,480
not put that myself to think about how

00:12:35,680 --> 00:12:39,120
these things work

00:12:36,480 --> 00:12:40,160
um underneath i just want to deploy my

00:12:39,120 --> 00:12:42,079
application right

00:12:40,160 --> 00:12:44,240
and see it's good live when i click on

00:12:42,079 --> 00:12:46,320
the button or when i drag and drop

00:12:44,240 --> 00:12:48,399
um into it and i think it's the same way

00:12:46,320 --> 00:12:48,720
for most of people in the community i

00:12:48,399 --> 00:12:50,720
mean

00:12:48,720 --> 00:12:52,480
we really don't bother about how to how

00:12:50,720 --> 00:12:52,800
these things work underneath only if you

00:12:52,480 --> 00:12:55,600
have

00:12:52,800 --> 00:12:57,040
maybe using uh maybe you're just curious

00:12:55,600 --> 00:12:58,480
enough to not know about these

00:12:57,040 --> 00:13:00,639
particular things but

00:12:58,480 --> 00:13:02,160
um in general most of us don't really

00:13:00,639 --> 00:13:04,720
care this you just want to

00:13:02,160 --> 00:13:05,760
application go live and um yeah that has

00:13:04,720 --> 00:13:07,920
basically leads

00:13:05,760 --> 00:13:09,920
now sue's like i'm just quickly anywhere

00:13:07,920 --> 00:13:12,959
it's like the advantage is that

00:13:09,920 --> 00:13:14,720
um tools like vessel netflix

00:13:12,959 --> 00:13:16,560
table i mean i'm a very big fan of

00:13:14,720 --> 00:13:17,279
netflix i mean most anything i've used

00:13:16,560 --> 00:13:20,160
basically

00:13:17,279 --> 00:13:22,240
goes out to nearly five first so um it

00:13:20,160 --> 00:13:22,880
feels like 95 best so first things first

00:13:22,240 --> 00:13:24,639
we

00:13:22,880 --> 00:13:25,920
sell we want to ship code and repair our

00:13:24,639 --> 00:13:28,399
code fast it helps us

00:13:25,920 --> 00:13:29,920
they help us do that as fast as possible

00:13:28,399 --> 00:13:30,240
all you just need to do is connect it to

00:13:29,920 --> 00:13:33,600
your

00:13:30,240 --> 00:13:35,120
um github repo and you get push and

00:13:33,600 --> 00:13:35,680
automatically it starts the job that

00:13:35,120 --> 00:13:38,320
push up

00:13:35,680 --> 00:13:39,040
your um your app your application your

00:13:38,320 --> 00:13:41,519
code

00:13:39,040 --> 00:13:42,560
directly to the production you can also

00:13:41,519 --> 00:13:44,639
have um

00:13:42,560 --> 00:13:46,320
you can also do things like um creating

00:13:44,639 --> 00:13:47,120
various branches for different parts of

00:13:46,320 --> 00:13:49,279
your code

00:13:47,120 --> 00:13:50,320
um if you want to deploy um if you want

00:13:49,279 --> 00:13:51,839
to have you have a branch called

00:13:50,320 --> 00:13:54,160
development you have a cloud

00:13:51,839 --> 00:13:55,839
a branch called production etc you

00:13:54,160 --> 00:13:56,560
basically can switch between branches

00:13:55,839 --> 00:13:58,800
and co

00:13:56,560 --> 00:14:01,199
on the changes reflect live um if you

00:13:58,800 --> 00:14:02,560
want to add a dns if you want to add

00:14:01,199 --> 00:14:03,839
there's so many things that you can

00:14:02,560 --> 00:14:04,959
really do if you want to add the dns

00:14:03,839 --> 00:14:06,880
you'll see the domain name

00:14:04,959 --> 00:14:08,480
which you'll show notify um to the app

00:14:06,880 --> 00:14:10,639
that you people notify

00:14:08,480 --> 00:14:12,800
and they give you um very very um quick

00:14:10,639 --> 00:14:13,199
assets now the most mind-blowing part of

00:14:12,800 --> 00:14:15,760
it

00:14:13,199 --> 00:14:17,440
is the fact that you can do most of

00:14:15,760 --> 00:14:19,199
these things with buttons

00:14:17,440 --> 00:14:21,440
like there are buttons on the dashboard

00:14:19,199 --> 00:14:22,320
you click on this yeah you can just add

00:14:21,440 --> 00:14:24,720
um

00:14:22,320 --> 00:14:26,079
add the dns as fast as possible the

00:14:24,720 --> 00:14:27,519
employee application will be just click

00:14:26,079 --> 00:14:30,639
on clicking on the button

00:14:27,519 --> 00:14:32,160
etc so it's really really um it's it's

00:14:30,639 --> 00:14:35,199
um really really great

00:14:32,160 --> 00:14:37,360
now um one other cool part of native is

00:14:35,199 --> 00:14:39,279
you can literally just drag and drop

00:14:37,360 --> 00:14:41,279
you can drag your dragon and jump your

00:14:39,279 --> 00:14:43,600
application folder internet in that if i

00:14:41,279 --> 00:14:47,199
dashboard and it deploys it live

00:14:43,600 --> 00:14:49,199
fantastic technology now

00:14:47,199 --> 00:14:51,040
basically these things are fun it's

00:14:49,199 --> 00:14:52,800
awesome right but

00:14:51,040 --> 00:14:54,880
don't you think that there should be a

00:14:52,800 --> 00:14:57,920
better way to do this i mean

00:14:54,880 --> 00:15:00,000
just a single command and see stuff deep

00:14:57,920 --> 00:15:01,040
good and get deployed live now this is

00:15:00,000 --> 00:15:02,560
basically what

00:15:01,040 --> 00:15:04,639
cloud foundry is offering we are

00:15:02,560 --> 00:15:08,480
offering uh a

00:15:04,639 --> 00:15:10,720
um a one or command deploy

00:15:08,480 --> 00:15:12,000
for your application on kubernetes you

00:15:10,720 --> 00:15:14,399
do not need to know

00:15:12,000 --> 00:15:15,199
how kubernetes works you do not need to

00:15:14,399 --> 00:15:18,959
know

00:15:15,199 --> 00:15:20,480
having um cka or a ckad certification to

00:15:18,959 --> 00:15:22,320
be able to use cloud 400 to deploy

00:15:20,480 --> 00:15:24,079
application on kubernetes what you just

00:15:22,320 --> 00:15:26,079
need to do to push your application live

00:15:24,079 --> 00:15:29,040
is a single command now let's feature

00:15:26,079 --> 00:15:32,240
some demos to show this um in action

00:15:29,040 --> 00:15:33,519
and talk about um things while we are

00:15:32,240 --> 00:15:35,199
deploying applications so

00:15:33,519 --> 00:15:36,560
for the first part of it ram is just

00:15:35,199 --> 00:15:39,360
going to show us the basics

00:15:36,560 --> 00:15:40,079
of a docker file um in an hello world

00:15:39,360 --> 00:15:42,480
app so

00:15:40,079 --> 00:15:44,560
i'm probably should share your screen

00:15:42,480 --> 00:15:46,959
and be covered can you see my screen

00:15:44,560 --> 00:15:46,959
routine

00:15:47,040 --> 00:15:54,560
so can you see my screen share drag

00:15:51,279 --> 00:15:57,519
yes i can see your screen i think the

00:15:54,560 --> 00:16:00,639
world is sick of these

00:15:57,519 --> 00:16:03,680
five words ah

00:16:00,639 --> 00:16:03,680
so um

00:16:03,839 --> 00:16:12,720
yeah let's start off with like um

00:16:07,759 --> 00:16:16,639
a basic containerization exercise right

00:16:12,720 --> 00:16:19,040
i'm just going to um i hate to pick on

00:16:16,639 --> 00:16:21,120
like docker or docker files or say that

00:16:19,040 --> 00:16:23,279
they're bad or ugly

00:16:21,120 --> 00:16:25,440
or very cumbersome and they get very

00:16:23,279 --> 00:16:29,120
difficult to compose and maintain

00:16:25,440 --> 00:16:30,160
as your app grows in complexity or scale

00:16:29,120 --> 00:16:34,000
or whatever

00:16:30,160 --> 00:16:36,079
but all of that is true so but

00:16:34,000 --> 00:16:38,240
like like tons of developers out there

00:16:36,079 --> 00:16:43,040
have probably deployed using docker like

00:16:38,240 --> 00:16:46,720
a thousand times right so um i like to

00:16:43,040 --> 00:16:51,440
start off um any discussion

00:16:46,720 --> 00:16:54,000
about deploying

00:16:51,440 --> 00:16:55,199
containerized javascript apps by

00:16:54,000 --> 00:16:58,639
discussing this

00:16:55,199 --> 00:17:00,160
tiny hello world docker file

00:16:58,639 --> 00:17:02,560
like i would call it i mean it's not

00:17:00,160 --> 00:17:06,559
technically a hello world

00:17:02,560 --> 00:17:10,160
thing but um it is

00:17:06,559 --> 00:17:11,360
um a hello world sort of grade in terms

00:17:10,160 --> 00:17:14,799
of

00:17:11,360 --> 00:17:18,160
uh docker files and as far as like

00:17:14,799 --> 00:17:21,600
containerizing javascript apps go so

00:17:18,160 --> 00:17:25,039
basically you um

00:17:21,600 --> 00:17:27,919
pick like what is known as the base

00:17:25,039 --> 00:17:28,240
um in this case uh a particular version

00:17:27,919 --> 00:17:32,720
of

00:17:28,240 --> 00:17:35,840
node uh and then you compose these

00:17:32,720 --> 00:17:39,360
steps in terms of

00:17:35,840 --> 00:17:42,720
different commands that docker would run

00:17:39,360 --> 00:17:46,160
inside like a let's say

00:17:42,720 --> 00:17:49,200
a linux machine or a linux os

00:17:46,160 --> 00:17:52,720
and you basically

00:17:49,200 --> 00:17:56,799
instruct how to create

00:17:52,720 --> 00:17:56,799
a javascript container

00:17:56,960 --> 00:18:04,160
to this application that you have

00:18:00,160 --> 00:18:07,840
so um in my source folder

00:18:04,160 --> 00:18:10,799
along with my application source

00:18:07,840 --> 00:18:11,679
this docker file will reside and then it

00:18:10,799 --> 00:18:13,919
will just run

00:18:11,679 --> 00:18:15,679
and it will take all the source that it

00:18:13,919 --> 00:18:17,200
resides along with and package it into

00:18:15,679 --> 00:18:20,080
what is known as a container

00:18:17,200 --> 00:18:20,720
um one of the most common forms of which

00:18:20,080 --> 00:18:23,840
is a

00:18:20,720 --> 00:18:26,240
docker container right and that's

00:18:23,840 --> 00:18:29,840
basically what we are going to look what

00:18:26,240 --> 00:18:29,840
we are looking at here so there is

00:18:30,320 --> 00:18:35,840
the there is the base image and we

00:18:33,520 --> 00:18:39,039
define a working application directory

00:18:35,840 --> 00:18:40,080
and then we copy package.json into that

00:18:39,039 --> 00:18:43,520
directory

00:18:40,080 --> 00:18:45,600
and then we run the most favorite

00:18:43,520 --> 00:18:50,480
command of the javascript world

00:18:45,600 --> 00:18:52,559
which is npm install to run that

00:18:50,480 --> 00:18:54,320
run the npm install command and install

00:18:52,559 --> 00:18:58,320
the application

00:18:54,320 --> 00:19:01,120
and then we run the

00:18:58,320 --> 00:19:03,600
we copy this app that has been built

00:19:01,120 --> 00:19:07,120
along with all of its source

00:19:03,600 --> 00:19:07,679
and then we run the second favorite

00:19:07,120 --> 00:19:10,880
command

00:19:07,679 --> 00:19:15,039
of the javascript world

00:19:10,880 --> 00:19:19,360
and then the app basically starts

00:19:15,039 --> 00:19:22,320
and then we expose like whatever port

00:19:19,360 --> 00:19:22,880
that we need this app to go out from so

00:19:22,320 --> 00:19:27,440
this is

00:19:22,880 --> 00:19:30,559
like a basic basic basic composition of

00:19:27,440 --> 00:19:31,360
a docker file that will help run a very

00:19:30,559 --> 00:19:34,240
simple

00:19:31,360 --> 00:19:34,240
javascript

00:19:37,840 --> 00:19:45,679
well that's basically um the hello world

00:19:42,080 --> 00:19:49,360
of docker files as composed by ram

00:19:45,679 --> 00:19:51,280
so i mean um so this is like i think

00:19:49,360 --> 00:19:54,320
this is seven lines of stress

00:19:51,280 --> 00:19:55,840
if you ask me i i there are so many

00:19:54,320 --> 00:19:59,039
things going on

00:19:55,840 --> 00:20:01,520
to begin with i mean the command that

00:19:59,039 --> 00:20:03,120
builds your actual container is a docker

00:20:01,520 --> 00:20:05,679
build command

00:20:03,120 --> 00:20:06,640
okay and that docker build command is

00:20:05,679 --> 00:20:08,400
basically

00:20:06,640 --> 00:20:09,600
you know going to use this docker file

00:20:08,400 --> 00:20:11,440
and then it's going to build that

00:20:09,600 --> 00:20:14,000
container for you and then you

00:20:11,440 --> 00:20:15,200
basically run that container using a

00:20:14,000 --> 00:20:17,600
docker run command

00:20:15,200 --> 00:20:19,120
so but then you know you need this

00:20:17,600 --> 00:20:21,600
docker file

00:20:19,120 --> 00:20:23,840
before you can get into like a docker

00:20:21,600 --> 00:20:23,840
build

00:20:24,159 --> 00:20:28,159
okay okay so yeah so um there's so many

00:20:26,720 --> 00:20:30,400
moving parts i mean

00:20:28,159 --> 00:20:32,240
first things first we need to get node

00:20:30,400 --> 00:20:35,280
so from node then we also need to

00:20:32,240 --> 00:20:38,080
also copy our package.json um

00:20:35,280 --> 00:20:38,400
also copy our app folder then run npms

00:20:38,080 --> 00:20:40,880
for

00:20:38,400 --> 00:20:42,240
install then copy the app folder then

00:20:40,880 --> 00:20:45,039
run the command

00:20:42,240 --> 00:20:47,200
um note index.js then expose the port

00:20:45,039 --> 00:20:47,679
3000 firstly which is our app this is

00:20:47,200 --> 00:20:49,520
like

00:20:47,679 --> 00:20:52,159
the most basic form of writing the

00:20:49,520 --> 00:20:55,760
docker file which i still feel like

00:20:52,159 --> 00:20:56,559
is stressful so it does have its

00:20:55,760 --> 00:20:58,799
downsides

00:20:56,559 --> 00:21:00,320
so a lot of stuff is hard coded let's

00:20:58,799 --> 00:21:03,600
say you wanted to run

00:21:00,320 --> 00:21:04,640
npm ci instead of npm install that's not

00:21:03,600 --> 00:21:07,919
going to happen

00:21:04,640 --> 00:21:10,320
um let's say you know you want to reuse

00:21:07,919 --> 00:21:13,360
some of the layers or you want to

00:21:10,320 --> 00:21:15,760
alter certain parts of the

00:21:13,360 --> 00:21:17,520
base image and not certain other parts

00:21:15,760 --> 00:21:20,720
of the base image and things like that

00:21:17,520 --> 00:21:23,200
that's not going to happen um

00:21:20,720 --> 00:21:24,640
you know stuff like that so if you if

00:21:23,200 --> 00:21:29,039
you decide to

00:21:24,640 --> 00:21:33,120
let's say change your entry point script

00:21:29,039 --> 00:21:36,000
into server.js instead of index.js

00:21:33,120 --> 00:21:37,039
guess what that's not going to work so

00:21:36,000 --> 00:21:39,280
there are

00:21:37,039 --> 00:21:40,400
yeah there are a few places that this

00:21:39,280 --> 00:21:42,720
can trip you up

00:21:40,400 --> 00:21:43,600
like few very basic places there's

00:21:42,720 --> 00:21:45,760
there's

00:21:43,600 --> 00:21:46,720
you know a whole lot of other issues

00:21:45,760 --> 00:21:50,159
that could

00:21:46,720 --> 00:21:53,200
that do come from running

00:21:50,159 --> 00:21:54,559
javascript apps um exclusively using

00:21:53,200 --> 00:21:55,520
docker files and then there are other

00:21:54,559 --> 00:21:59,280
best practices

00:21:55,520 --> 00:22:00,159
as well about users and permissions and

00:21:59,280 --> 00:22:03,679
security

00:22:00,159 --> 00:22:04,240
so on and so forth so i agree that there

00:22:03,679 --> 00:22:07,679
can

00:22:04,240 --> 00:22:11,200
be a better way right and

00:22:07,679 --> 00:22:14,240
that sort of brings us to

00:22:11,200 --> 00:22:17,760
the first thing which we will demo

00:22:14,240 --> 00:22:21,919
today um and that is

00:22:17,760 --> 00:22:26,640
something known as uh pax cli so

00:22:21,919 --> 00:22:26,640
um just a little bit of background

00:22:26,720 --> 00:22:33,919
there is what is known as buildpacks.io

00:22:30,880 --> 00:22:36,559
which is a service

00:22:33,919 --> 00:22:36,960
sorry which is a project that is part of

00:22:36,559 --> 00:22:40,799
the

00:22:36,960 --> 00:22:40,799
cloud native computing foundation

00:22:41,440 --> 00:22:49,440
they they basically define

00:22:45,039 --> 00:22:51,840
a simple and straightforward means for

00:22:49,440 --> 00:22:54,000
developers to containerize their

00:22:51,840 --> 00:22:57,039
applications as long as they have

00:22:54,000 --> 00:23:00,320
a source code so this

00:22:57,039 --> 00:23:02,240
is the first step in you know the

00:23:00,320 --> 00:23:03,600
three-step process that we spoke about

00:23:02,240 --> 00:23:06,240
in terms of

00:23:03,600 --> 00:23:07,440
here's my source code there's my

00:23:06,240 --> 00:23:08,799
infrastructure where

00:23:07,440 --> 00:23:11,120
there's the end point where it has to

00:23:08,799 --> 00:23:12,159
run now go run it so the first step is

00:23:11,120 --> 00:23:14,720
to

00:23:12,159 --> 00:23:17,200
create a javascript container of sorts

00:23:14,720 --> 00:23:20,400
from the source that was given

00:23:17,200 --> 00:23:22,960
and then use that javascript container

00:23:20,400 --> 00:23:25,760
to be deployed onto kubernetes and

00:23:22,960 --> 00:23:28,960
fulfill that entire experience so

00:23:25,760 --> 00:23:30,559
build packs um are the piece that are

00:23:28,960 --> 00:23:31,760
very critical to providing that

00:23:30,559 --> 00:23:35,440
experience

00:23:31,760 --> 00:23:36,640
um in the wild build packs have existed

00:23:35,440 --> 00:23:40,559
for about

00:23:36,640 --> 00:23:44,799
10 years now they were pioneered by

00:23:40,559 --> 00:23:48,080
the team at heroku and then they were

00:23:44,799 --> 00:23:52,640
given a lot of life

00:23:48,080 --> 00:23:55,279
by the team at pivotal which basically

00:23:52,640 --> 00:23:56,720
is is the cloud foundry team in a sense

00:23:55,279 --> 00:24:00,559
and so

00:23:56,720 --> 00:24:02,159
heroku and pivotal develop their sort of

00:24:00,559 --> 00:24:03,679
own different put their own you know

00:24:02,159 --> 00:24:04,640
spin on these build packs and things

00:24:03,679 --> 00:24:07,120
like that and

00:24:04,640 --> 00:24:09,120
much later like a couple of years ago

00:24:07,120 --> 00:24:11,039
they both converged once again

00:24:09,120 --> 00:24:13,440
to define what are known as the cloud

00:24:11,039 --> 00:24:16,320
native buildback so

00:24:13,440 --> 00:24:16,960
together they define the oci image

00:24:16,320 --> 00:24:20,240
standard

00:24:16,960 --> 00:24:23,840
and buildbacks in general and that

00:24:20,240 --> 00:24:28,559
is what we will be using today so

00:24:23,840 --> 00:24:28,559
what i'm going to do is i am going to

00:24:30,840 --> 00:24:36,240
quickly

00:24:33,679 --> 00:24:36,240
check out

00:24:40,799 --> 00:24:47,840
some code that

00:24:49,200 --> 00:25:01,440
do you have like a hello world somewhere

00:24:53,760 --> 00:25:04,320
maybe we can find like a hello world

00:25:01,440 --> 00:25:04,320
somewhere right

00:25:12,840 --> 00:25:15,840
see

00:25:18,080 --> 00:25:21,360
so if you can't find it probably should

00:25:20,480 --> 00:25:24,720
use um

00:25:21,360 --> 00:25:28,400
the one on the cloud 400 samples

00:25:24,720 --> 00:25:31,600
yeah that's hey good

00:25:28,400 --> 00:25:34,320
okay so this one's jump okay this is by

00:25:31,600 --> 00:25:34,320
john papa

00:25:35,279 --> 00:25:38,159
is very famous

00:25:38,400 --> 00:25:42,559
yeah i think this is the developer

00:25:40,400 --> 00:25:43,919
advocate or something

00:25:42,559 --> 00:25:46,400
i can't really remember binaural is

00:25:43,919 --> 00:25:46,400
popular

00:25:46,720 --> 00:25:50,799
okay i'll believe you if this runs

00:25:54,000 --> 00:25:57,039
so what i'm going to do is i'm going to

00:25:56,159 --> 00:26:00,960
use

00:25:57,039 --> 00:26:05,279
pack to build a container the command

00:26:00,960 --> 00:26:05,279
is pack built and then

00:26:08,480 --> 00:26:14,159
i'm going to give this like a long name

00:26:15,840 --> 00:26:20,320
and then i'm going to specify the build

00:26:18,720 --> 00:26:25,840
pack

00:26:20,320 --> 00:26:25,840
that is going to be used

00:26:37,600 --> 00:26:40,880
and then i'm going to specify a builder

00:26:40,080 --> 00:26:44,640
now

00:26:40,880 --> 00:26:45,679
um obviously like lots of new words lots

00:26:44,640 --> 00:26:49,240
of new terms but

00:26:45,679 --> 00:26:51,360
let me just try to break this down a

00:26:49,240 --> 00:26:55,039
little bit

00:26:51,360 --> 00:26:58,559
okay so again pack

00:26:55,039 --> 00:27:00,720
is the

00:26:58,559 --> 00:27:02,880
command that is going to help us build

00:27:00,720 --> 00:27:04,799
our containers build is the instruction

00:27:02,880 --> 00:27:06,320
all right hello world node.js is the

00:27:04,799 --> 00:27:07,840
name of the container that we are going

00:27:06,320 --> 00:27:10,480
to be using

00:27:07,840 --> 00:27:11,520
not a very creative name i'll admit but

00:27:10,480 --> 00:27:13,520
it's something

00:27:11,520 --> 00:27:14,640
and then buildbacks is what we've been

00:27:13,520 --> 00:27:18,880
speaking about

00:27:14,640 --> 00:27:22,720
for so long they are hosted on

00:27:18,880 --> 00:27:26,320
google's container registry and packato

00:27:22,720 --> 00:27:28,640
is an implementation of the cloud native

00:27:26,320 --> 00:27:32,640
buildback specification that we just

00:27:28,640 --> 00:27:34,640
saw at buildpacks.io they're open source

00:27:32,640 --> 00:27:36,960
folks are free to contribute to pacquiao

00:27:34,640 --> 00:27:39,440
buildbacks if they're interested

00:27:36,960 --> 00:27:42,320
and i'm we're going to be using uh the

00:27:39,440 --> 00:27:45,440
node.js push pack obviously

00:27:42,320 --> 00:27:47,679
and then like the builder that i'm going

00:27:45,440 --> 00:27:50,159
to be using is

00:27:47,679 --> 00:27:51,760
packet of builder base which is like a

00:27:50,159 --> 00:27:54,000
base image

00:27:51,760 --> 00:27:54,000
now

00:27:57,919 --> 00:28:07,200
excuse me that's that should

00:28:03,840 --> 00:28:09,520
help build my index

00:28:07,200 --> 00:28:09,520
right

00:28:15,840 --> 00:28:24,399
obviously in every demo this

00:28:20,720 --> 00:28:24,399
should happen right

00:28:24,960 --> 00:28:31,840
um yeah pretty much so let's see

00:28:28,240 --> 00:28:31,840
if i don't specify one

00:28:32,640 --> 00:28:40,640
pack is kind enough to

00:28:36,240 --> 00:28:45,840
suggest a bunch of builders and so

00:28:40,640 --> 00:28:45,840
i am going to use this

00:28:46,780 --> 00:28:49,829
[Music]

00:29:00,320 --> 00:29:03,840
yep so

00:29:04,960 --> 00:29:10,240
what's happening here is

00:29:08,159 --> 00:29:12,159
don't be don't freak out with like the

00:29:10,240 --> 00:29:14,000
long list of layers

00:29:12,159 --> 00:29:16,399
but it's basically like a bunch of

00:29:14,000 --> 00:29:19,520
layers that get pulled

00:29:16,399 --> 00:29:21,600
and actually build

00:29:19,520 --> 00:29:24,480
a base image from which it will

00:29:21,600 --> 00:29:27,039
reconstruct like the

00:29:24,480 --> 00:29:27,679
the entire set of layers that will

00:29:27,039 --> 00:29:30,480
produce

00:29:27,679 --> 00:29:30,480
like the final

00:29:30,960 --> 00:29:35,760
oci compliant image that'll that we can

00:29:33,520 --> 00:29:35,760
then

00:29:38,840 --> 00:29:41,840
deploy

00:29:42,720 --> 00:29:45,840
so we're just sort of waiting for all of

00:29:44,799 --> 00:29:49,760
this to complete

00:29:45,840 --> 00:29:53,600
and some of these layers already exist

00:29:49,760 --> 00:29:55,840
because you know we've done some things

00:29:53,600 --> 00:29:57,279
in the past and now we get to like the

00:29:55,840 --> 00:30:00,559
fun part

00:29:57,279 --> 00:30:02,799
so what's happening

00:30:00,559 --> 00:30:02,799
is

00:30:04,240 --> 00:30:08,320
the build pack is actually trying to go

00:30:06,320 --> 00:30:11,919
in and

00:30:08,320 --> 00:30:15,200
detect what

00:30:11,919 --> 00:30:16,880
language is in use so we said that we

00:30:15,200 --> 00:30:20,720
are going to make use of

00:30:16,880 --> 00:30:23,919
the node.js buildback so

00:30:20,720 --> 00:30:25,279
it created what is known as a deployment

00:30:23,919 --> 00:30:28,880
plan

00:30:25,279 --> 00:30:29,600
or a build plan and then it actually

00:30:28,880 --> 00:30:33,200
went ahead

00:30:29,600 --> 00:30:36,559
and completed this build process

00:30:33,200 --> 00:30:39,870
so after that it exports

00:30:36,559 --> 00:30:42,399
all of these different layers to

00:30:39,870 --> 00:30:47,279
[Music]

00:30:42,399 --> 00:30:50,159
the docker daemon and then finally my

00:30:47,279 --> 00:31:05,840
container is ready now i am just going

00:30:50,159 --> 00:31:05,840
to run this very quickly

00:31:11,760 --> 00:31:16,080
okay and then let's see what happens

00:31:16,880 --> 00:31:25,519
fingers i think we have to specify that

00:31:22,559 --> 00:31:25,519
port number here

00:31:29,519 --> 00:31:49,919
so darker run

00:31:46,880 --> 00:31:54,159
yeah there you go

00:31:49,919 --> 00:31:56,720
so that's the app

00:31:54,159 --> 00:32:00,000
so we were able to build this and run it

00:31:56,720 --> 00:32:03,039
on like a darker runtime and that's

00:32:00,000 --> 00:32:07,279
basically what you know we

00:32:03,039 --> 00:32:11,279
we wanted to demonstrate now

00:32:07,279 --> 00:32:14,880
um of course i understand that this

00:32:11,279 --> 00:32:17,279
this you know might not be the

00:32:14,880 --> 00:32:18,480
best of which yeah easiest optimal

00:32:17,279 --> 00:32:21,919
experience that

00:32:18,480 --> 00:32:25,840
folks are folks are

00:32:21,919 --> 00:32:27,840
expecting but it's an intermediary step

00:32:25,840 --> 00:32:30,640
and it's important to understand this

00:32:27,840 --> 00:32:33,120
step before we go the full route and

00:32:30,640 --> 00:32:34,559
see how the cloud foundry pass

00:32:33,120 --> 00:32:37,519
simplifies this step

00:32:34,559 --> 00:32:38,640
and um a lot of others as well so

00:32:37,519 --> 00:32:40,840
shadrach

00:32:38,640 --> 00:32:42,960
would you be kind enough as to walk us

00:32:40,840 --> 00:32:47,679
through

00:32:42,960 --> 00:32:50,799
some more apps and and just

00:32:47,679 --> 00:32:54,240
containerize and deploy them but

00:32:50,799 --> 00:32:57,600
in a more uh magical way as you

00:32:54,240 --> 00:33:00,799
like to call it okay yeah sure

00:32:57,600 --> 00:33:03,760
definitely um

00:33:00,799 --> 00:33:03,760
can you see my screen

00:33:07,679 --> 00:33:15,440
not yet i can now yes

00:33:12,320 --> 00:33:18,000
okay perfect now

00:33:15,440 --> 00:33:20,320
yeah like i mean you've showed us a very

00:33:18,000 --> 00:33:21,039
and if an intermediate way of doing um

00:33:20,320 --> 00:33:22,480
deploying

00:33:21,039 --> 00:33:24,320
um an application on international

00:33:22,480 --> 00:33:27,360
applications cloud foreign to

00:33:24,320 --> 00:33:28,000
500 or something but um there is an easy

00:33:27,360 --> 00:33:29,600
way

00:33:28,000 --> 00:33:31,440
i suppose i mean there's definitely an

00:33:29,600 --> 00:33:33,519
easy way to doing these things um

00:33:31,440 --> 00:33:35,760
so i'm just going to show you real quick

00:33:33,519 --> 00:33:38,320
how

00:33:35,760 --> 00:33:39,600
easy it gets it gets way much more

00:33:38,320 --> 00:33:42,799
easier than what ceramics

00:33:39,600 --> 00:33:43,679
should so let me just clear my timing

00:33:42,799 --> 00:33:46,559
now real quick

00:33:43,679 --> 00:33:46,880
um so i'm just going to do the same

00:33:46,559 --> 00:33:50,640
thing

00:33:46,880 --> 00:33:53,760
ram did but this time a much more um

00:33:50,640 --> 00:33:55,679
complex application it's a an exchange

00:33:53,760 --> 00:33:56,960
application an exchange rate application

00:33:55,679 --> 00:34:00,240
um built with node

00:33:56,960 --> 00:34:02,720
and handlebars etc now if

00:34:00,240 --> 00:34:03,679
um grandma showed us the way or the

00:34:02,720 --> 00:34:05,519
amount of knowledge

00:34:03,679 --> 00:34:08,000
commands that we have to do the docker

00:34:05,519 --> 00:34:09,839
run etc the whole thing ram did

00:34:08,000 --> 00:34:11,440
but there's actually an easier way of

00:34:09,839 --> 00:34:13,599
deploying a node app now

00:34:11,440 --> 00:34:15,280
the best part of cloud foundry is that

00:34:13,599 --> 00:34:17,040
one platform rules them all

00:34:15,280 --> 00:34:18,800
like basically if you want to deploy

00:34:17,040 --> 00:34:20,720
your static app with that

00:34:18,800 --> 00:34:22,240
javascript static app don't necessarily

00:34:20,720 --> 00:34:24,079
have a new backend or

00:34:22,240 --> 00:34:25,359
a back-end in general you can also use

00:34:24,079 --> 00:34:26,960
cloud foundry for that

00:34:25,359 --> 00:34:28,480
if you have a full stack application

00:34:26,960 --> 00:34:29,520
that has booted database then you have

00:34:28,480 --> 00:34:30,480
to connect to the database or some

00:34:29,520 --> 00:34:32,240
service or

00:34:30,480 --> 00:34:34,000
et cetera cloud fund you can also do

00:34:32,240 --> 00:34:35,760
that so unlike netflix

00:34:34,000 --> 00:34:37,839
vessel that cannot handle full stack

00:34:35,760 --> 00:34:38,720
applications they only um deploy static

00:34:37,839 --> 00:34:41,280
content

00:34:38,720 --> 00:34:43,040
where you now have to be used netlife

00:34:41,280 --> 00:34:45,599
for your static content then go to

00:34:43,040 --> 00:34:46,159
heroku to deploy your application back

00:34:45,599 --> 00:34:49,040
in without

00:34:46,159 --> 00:34:50,480
node xs php etc now with cloud foundry

00:34:49,040 --> 00:34:51,440
you can do every single thing in just

00:34:50,480 --> 00:34:53,440
one platform

00:34:51,440 --> 00:34:54,639
so i'm just going to show you real quick

00:34:53,440 --> 00:34:57,599
um

00:34:54,639 --> 00:34:59,920
an application now this is a very basic

00:34:57,599 --> 00:35:02,480
application the best basic javascript

00:34:59,920 --> 00:35:03,920
application with um beautiful and

00:35:02,480 --> 00:35:05,920
javascript basically

00:35:03,920 --> 00:35:07,760
um we have the lib folder the node

00:35:05,920 --> 00:35:10,079
modules of course the nodemon

00:35:07,760 --> 00:35:10,960
um the jsons handle um the server that

00:35:10,079 --> 00:35:13,359
we're going to be running our

00:35:10,960 --> 00:35:14,960
application on the package log etc so

00:35:13,359 --> 00:35:17,119
now

00:35:14,960 --> 00:35:18,960
as easy as it gets i've cloned this

00:35:17,119 --> 00:35:21,040
report for my disruptor for my github

00:35:18,960 --> 00:35:23,359
account and the only thing i need to do

00:35:21,040 --> 00:35:24,720
now is to push it to cloud foundry

00:35:23,359 --> 00:35:26,320
deployed on cloud foundry and i can do

00:35:24,720 --> 00:35:28,640
that by just running

00:35:26,320 --> 00:35:30,720
a single command now you have to have

00:35:28,640 --> 00:35:32,240
the cloud from the cli

00:35:30,720 --> 00:35:33,920
you have to have the platform in cli

00:35:32,240 --> 00:35:36,480
installed and to check

00:35:33,920 --> 00:35:37,280
that you can always run cf and you would

00:35:36,480 --> 00:35:39,040
see that

00:35:37,280 --> 00:35:40,960
um it brings out a bunch of commands

00:35:39,040 --> 00:35:42,720
which is um

00:35:40,960 --> 00:35:44,160
going to show us that okay we have cloud

00:35:42,720 --> 00:35:46,640
foundry um cf

00:35:44,160 --> 00:35:48,240
i'm cli um installed there are like two

00:35:46,640 --> 00:35:49,920
versions we have the six points

00:35:48,240 --> 00:35:52,079
x and we have the seven point x

00:35:49,920 --> 00:35:53,839
depending on which you want to use

00:35:52,079 --> 00:35:55,920
the seven point is the newest version

00:35:53,839 --> 00:35:56,880
and the six points is um the previous

00:35:55,920 --> 00:35:59,760
version before this

00:35:56,880 --> 00:36:00,240
um this on the seven voice still in use

00:35:59,760 --> 00:36:01,920
so

00:36:00,240 --> 00:36:04,640
if i want to deploy this application now

00:36:01,920 --> 00:36:07,920
all i need to do is to run cf push

00:36:04,640 --> 00:36:12,320
then give my my app name let's do um

00:36:07,920 --> 00:36:15,040
node change so

00:36:12,320 --> 00:36:17,599
i didn't exchange let me zoom in a

00:36:15,040 --> 00:36:17,599
little bit

00:36:18,560 --> 00:36:24,320
okay so this is just node escape

00:36:22,560 --> 00:36:26,160
this is it this is just the command i

00:36:24,320 --> 00:36:28,000
need to do to deploy my application

00:36:26,160 --> 00:36:30,000
on cloud foundry i have logged into the

00:36:28,000 --> 00:36:31,599
classroom in cli you'll have to do that

00:36:30,000 --> 00:36:34,320
so let me just show you

00:36:31,599 --> 00:36:36,720
um to log in you to the cloud from your

00:36:34,320 --> 00:36:39,599
cli or your cloud find your account or

00:36:36,720 --> 00:36:41,680
on any california um cluster you have

00:36:39,599 --> 00:36:42,079
deployed on maybe google cloud etc would

00:36:41,680 --> 00:36:45,280
go

00:36:42,079 --> 00:36:47,200
would gets to that side very soon

00:36:45,280 --> 00:36:48,400
you can just do that deploy application

00:36:47,200 --> 00:36:51,599
by running cf push

00:36:48,400 --> 00:36:53,280
and when you run safe push it does

00:36:51,599 --> 00:36:54,640
a couple of process it goes to a couple

00:36:53,280 --> 00:36:56,480
of processes which um

00:36:54,640 --> 00:36:57,839
rama sort of explained but i will be

00:36:56,480 --> 00:37:00,720
explaining now

00:36:57,839 --> 00:37:01,680
if you can see it says pushing up node

00:37:00,720 --> 00:37:04,960
exchange to

00:37:01,680 --> 00:37:06,960
org so og is where most of our apps have

00:37:04,960 --> 00:37:08,240
so we also have a space this space is

00:37:06,960 --> 00:37:09,359
called shade dragon

00:37:08,240 --> 00:37:11,760
of course i'm the admin of the

00:37:09,359 --> 00:37:14,000
particular space so

00:37:11,760 --> 00:37:15,119
it specifies life and specifies your

00:37:14,000 --> 00:37:16,880
application into

00:37:15,119 --> 00:37:18,800
your entire company the entire

00:37:16,880 --> 00:37:20,480
development team into spaces and

00:37:18,800 --> 00:37:23,760
organizations so

00:37:20,480 --> 00:37:25,200
an organization could be the entire um

00:37:23,760 --> 00:37:27,520
could be the entire team why this

00:37:25,200 --> 00:37:29,119
species could be serious various um

00:37:27,520 --> 00:37:30,640
form and points your application has to

00:37:29,119 --> 00:37:32,079
go to so you could name a space

00:37:30,640 --> 00:37:32,720
development you could name a space

00:37:32,079 --> 00:37:34,800
staging

00:37:32,720 --> 00:37:36,720
you would name a space um production so

00:37:34,800 --> 00:37:41,359
depending on how um you want

00:37:36,720 --> 00:37:44,960
it to be how you want it to be

00:37:41,359 --> 00:37:47,520
um to be arranged i mean just like

00:37:44,960 --> 00:37:48,720
um ram said there's always um some sort

00:37:47,520 --> 00:37:51,280
of error when

00:37:48,720 --> 00:37:51,920
when you are doing demos so let's see

00:37:51,280 --> 00:37:55,200
what's

00:37:51,920 --> 00:37:57,200
wrong um

00:37:55,200 --> 00:38:00,320
so i just cleared my terminal now so i

00:37:57,200 --> 00:38:04,240
can focus on what is important

00:38:00,320 --> 00:38:06,000
um so this is red so you have to save

00:38:04,240 --> 00:38:09,040
push

00:38:06,000 --> 00:38:09,040
node exchange

00:38:12,240 --> 00:38:19,839
go to the whole process again

00:38:24,000 --> 00:38:30,160
takes a few seconds and um for some

00:38:26,880 --> 00:38:32,480
packaging files so it packages the file

00:38:30,160 --> 00:38:33,359
the files in the relevant files in the

00:38:32,480 --> 00:38:36,640
um

00:38:33,359 --> 00:38:39,839
folder that we need to it uploads it to

00:38:36,640 --> 00:38:40,880
the server then connects to the cloud

00:38:39,839 --> 00:38:44,079
foundry api

00:38:40,880 --> 00:38:46,160
for processing then it stages the

00:38:44,079 --> 00:38:49,200
application and also start generating

00:38:46,160 --> 00:38:53,200
logs for

00:38:49,200 --> 00:38:54,800
um the application so it uses

00:38:53,200 --> 00:38:56,480
um build packs like ram said we are

00:38:54,800 --> 00:39:00,079
using the node.js buildback

00:38:56,480 --> 00:39:02,160
so you use this build packs um that con

00:39:00,079 --> 00:39:05,440
individual participate looks for

00:39:02,160 --> 00:39:08,720
um the npm install npm start command

00:39:05,440 --> 00:39:09,520
since we're using npm um if you look at

00:39:08,720 --> 00:39:12,880
this place

00:39:09,520 --> 00:39:14,800
this web here this is the start command

00:39:12,880 --> 00:39:17,200
for application node server.js

00:39:14,800 --> 00:39:18,160
node index.js depending on what you want

00:39:17,200 --> 00:39:21,040
um

00:39:18,160 --> 00:39:22,320
unlike docker or like the docker and the

00:39:21,040 --> 00:39:24,880
example ram said

00:39:22,320 --> 00:39:26,720
it should um if you use node indexed or

00:39:24,880 --> 00:39:28,160
if you don't use node index.js there's

00:39:26,720 --> 00:39:30,720
some going to be some sort of

00:39:28,160 --> 00:39:31,440
error or if it doesn't recognize the

00:39:30,720 --> 00:39:33,920
command

00:39:31,440 --> 00:39:36,640
but with this particular demo it's going

00:39:33,920 --> 00:39:36,640
to show us

00:39:37,119 --> 00:39:41,200
that we can actually run any scripts to

00:39:39,440 --> 00:39:43,520
carry out our

00:39:41,200 --> 00:39:45,040
fascinating application so um it pulls

00:39:43,520 --> 00:39:47,359
the part to the image

00:39:45,040 --> 00:39:48,800
does or the whole configuration we don't

00:39:47,359 --> 00:39:49,760
necessarily need to do all those things

00:39:48,800 --> 00:39:51,839
by ourselves

00:39:49,760 --> 00:39:53,599
and um it starts is the instance if you

00:39:51,839 --> 00:39:57,200
can see the name of the app we give

00:39:53,599 --> 00:39:59,200
would exchange the um requested states

00:39:57,200 --> 00:40:02,400
that started the application

00:39:59,200 --> 00:40:05,599
um the route now the route is this

00:40:02,400 --> 00:40:06,800
unique link for every single um

00:40:05,599 --> 00:40:08,640
every single application you deploy

00:40:06,800 --> 00:40:10,640
where you can see your application live

00:40:08,640 --> 00:40:11,680
on your browser so this is where we are

00:40:10,640 --> 00:40:14,319
going to use to

00:40:11,680 --> 00:40:14,960
see if application has deployed or not

00:40:14,319 --> 00:40:17,680
um but

00:40:14,960 --> 00:40:18,240
since what since this states is

00:40:17,680 --> 00:40:19,760
currently

00:40:18,240 --> 00:40:21,599
started and this application has

00:40:19,760 --> 00:40:24,160
deployed successfully by just

00:40:21,599 --> 00:40:26,240
a single command now we just had to run

00:40:24,160 --> 00:40:27,119
one single coron which is cf push the

00:40:26,240 --> 00:40:29,040
name of the app

00:40:27,119 --> 00:40:31,200
inside on the the root folder of the

00:40:29,040 --> 00:40:33,760
application and boom application has

00:40:31,200 --> 00:40:34,319
been deployed to cloud foundry and um

00:40:33,760 --> 00:40:37,599
it's live

00:40:34,319 --> 00:40:39,440
so let's see it's um let's see if

00:40:37,599 --> 00:40:42,240
application actually works

00:40:39,440 --> 00:40:42,240
on our browser

00:40:43,760 --> 00:40:48,079
now i will have to share my browser

00:40:45,680 --> 00:40:48,079
screen

00:40:49,520 --> 00:40:54,640
okay i don't know why it's very frankie

00:40:51,839 --> 00:40:54,640
based all the time

00:40:54,960 --> 00:41:07,839
hold on give me a second

00:41:14,240 --> 00:41:21,839
okay let me share my screen

00:41:32,839 --> 00:41:37,839
okay

00:41:35,280 --> 00:41:40,000
can you see my screen you connect can

00:41:37,839 --> 00:41:43,440
you see my screen

00:41:40,000 --> 00:41:45,760
yep keep going okay now

00:41:43,440 --> 00:41:47,680
now because we are using an ip address

00:41:45,760 --> 00:41:48,000
um because we're using an ip address and

00:41:47,680 --> 00:41:51,280
it's not

00:41:48,000 --> 00:41:53,040
um http it's not https it's not secured

00:41:51,280 --> 00:41:54,720
of course our browser is going to show

00:41:53,040 --> 00:41:57,920
um a an error

00:41:54,720 --> 00:41:59,440
you can always add an ssl by yourself

00:41:57,920 --> 00:42:00,720
there's also always there's a way to add

00:41:59,440 --> 00:42:01,920
an exercise to your application with

00:42:00,720 --> 00:42:04,079
cloud energy

00:42:01,920 --> 00:42:05,280
as um as easy as possible so if i click

00:42:04,079 --> 00:42:08,000
on this

00:42:05,280 --> 00:42:08,640
to proceed to the application we should

00:42:08,000 --> 00:42:11,920
see

00:42:08,640 --> 00:42:13,359
our application deployed live fingers

00:42:11,920 --> 00:42:16,560
crossed i mean it's a demo

00:42:13,359 --> 00:42:18,800
things are meant to break but this will

00:42:16,560 --> 00:42:18,800
break

00:42:24,960 --> 00:42:31,680
and so this is this is basically

00:42:28,240 --> 00:42:32,720
application deployed live where we can

00:42:31,680 --> 00:42:36,400
see currency

00:42:32,720 --> 00:42:39,520
um we can also

00:42:36,400 --> 00:42:42,160
check out a units of various currency

00:42:39,520 --> 00:42:43,680
we can also check historically and yeah

00:42:42,160 --> 00:42:45,920
so this is basically a

00:42:43,680 --> 00:42:47,839
full node application deployed on cloud

00:42:45,920 --> 00:42:50,560
foundry with just a single command

00:42:47,839 --> 00:42:51,599
we did not need to do anything special

00:42:50,560 --> 00:42:54,480
to get this

00:42:51,599 --> 00:42:56,160
up and running we just have to do a

00:42:54,480 --> 00:42:58,560
particular command which is c

00:42:56,160 --> 00:43:00,640
um cf push the the name of the app and

00:42:58,560 --> 00:43:00,880
cloud5g recognizes the application for

00:43:00,640 --> 00:43:02,560
you

00:43:00,880 --> 00:43:04,319
for you with built and uses the correct

00:43:02,560 --> 00:43:06,319
buildback for you to deploy your

00:43:04,319 --> 00:43:09,440
application live so this is like

00:43:06,319 --> 00:43:10,160
as easy as it gets it's so easy to

00:43:09,440 --> 00:43:12,400
deploy your

00:43:10,160 --> 00:43:13,760
full stack node application with just a

00:43:12,400 --> 00:43:16,240
single

00:43:13,760 --> 00:43:17,760
with it just a single command which i

00:43:16,240 --> 00:43:19,440
think is it's wonderful

00:43:17,760 --> 00:43:20,560
you don't have to leave your camera now

00:43:19,440 --> 00:43:22,160
you don't have to i mean i don't have to

00:43:20,560 --> 00:43:24,480
go to any dashboard somewhere

00:43:22,160 --> 00:43:25,280
you don't have to push to connect to git

00:43:24,480 --> 00:43:27,200
or something

00:43:25,280 --> 00:43:28,319
you can deploy your application live

00:43:27,200 --> 00:43:31,119
from your machine

00:43:28,319 --> 00:43:32,480
with just a single command as fast as

00:43:31,119 --> 00:43:35,280
possible

00:43:32,480 --> 00:43:35,520
now this is like this is basically this

00:43:35,280 --> 00:43:37,920
is

00:43:35,520 --> 00:43:39,599
this is i think personally as a

00:43:37,920 --> 00:43:40,400
javascript developer that do not like

00:43:39,599 --> 00:43:42,560
stress

00:43:40,400 --> 00:43:44,000
i definitely don't like stress any form

00:43:42,560 --> 00:43:47,040
of stress

00:43:44,000 --> 00:43:50,560
this is this is heaven this is basic

00:43:47,040 --> 00:43:52,400
pain for me because i do not need to do

00:43:50,560 --> 00:43:54,560
any write any docker file i didn't need

00:43:52,400 --> 00:43:56,880
to go to any dashboard somewhere

00:43:54,560 --> 00:43:57,599
to deploy my application or push to some

00:43:56,880 --> 00:44:00,000
other

00:43:57,599 --> 00:44:01,200
um registry all i just have to do is

00:44:00,000 --> 00:44:04,400
right from my machine

00:44:01,200 --> 00:44:05,839
all i did was to do a cf push to um

00:44:04,400 --> 00:44:07,359
then the application name in my

00:44:05,839 --> 00:44:08,880
application root folder and boom

00:44:07,359 --> 00:44:11,040
application is deployed live

00:44:08,880 --> 00:44:12,400
i can also add ssl if i want to add to

00:44:11,040 --> 00:44:13,440
make my application available for

00:44:12,400 --> 00:44:16,560
everybody and

00:44:13,440 --> 00:44:19,359
etc so this is how easy it

00:44:16,560 --> 00:44:20,640
is to deploy an application to um to

00:44:19,359 --> 00:44:23,280
cloud foundry now

00:44:20,640 --> 00:44:24,240
yeah not that now there are several

00:44:23,280 --> 00:44:26,079
quantization

00:44:24,240 --> 00:44:27,680
best practices so now clever energy

00:44:26,079 --> 00:44:29,200
actually containerizes our application

00:44:27,680 --> 00:44:31,599
or adjusted application which

00:44:29,200 --> 00:44:32,319
that's something um i don't know if

00:44:31,599 --> 00:44:34,240
facebook and

00:44:32,319 --> 00:44:36,800
if i do that but i strongly doubt they

00:44:34,240 --> 00:44:39,839
do that and um

00:44:36,800 --> 00:44:41,440
there are several like um best practices

00:44:39,839 --> 00:44:43,599
for um continualization

00:44:41,440 --> 00:44:45,040
that are built right into cloud foundry

00:44:43,599 --> 00:44:46,880
you do they do the

00:44:45,040 --> 00:44:48,560
quantization for you by yourself without

00:44:46,880 --> 00:44:50,079
you doing any single thing

00:44:48,560 --> 00:44:51,599
i mean you just need to know commands

00:44:50,079 --> 00:44:53,440
and you're good to go

00:44:51,599 --> 00:44:55,040
thanks to the use of build packs in this

00:44:53,440 --> 00:44:56,560
particular project we are using the

00:44:55,040 --> 00:44:58,079
packet to build back which is

00:44:56,560 --> 00:44:59,760
also a project of the cloud foundry

00:44:58,079 --> 00:45:03,119
foundation and

00:44:59,760 --> 00:45:04,800
now we would definitely introduce

00:45:03,119 --> 00:45:06,480
funding for kubernetes i o this is

00:45:04,800 --> 00:45:07,040
actually deployed on kubernetes right

00:45:06,480 --> 00:45:09,520
now

00:45:07,040 --> 00:45:11,040
i did not do any single thing like i

00:45:09,520 --> 00:45:11,599
don't need to know kubernetes i'm not

00:45:11,040 --> 00:45:13,359
even

00:45:11,599 --> 00:45:14,800
i'm not strong in combinations i'm just

00:45:13,359 --> 00:45:16,240
learning combinations and i can deploy

00:45:14,800 --> 00:45:17,200
my application on quantities with just a

00:45:16,240 --> 00:45:19,200
single command

00:45:17,200 --> 00:45:20,880
now cloud funnel for kubernetes lens

00:45:19,200 --> 00:45:23,839
does lets us deploy application

00:45:20,880 --> 00:45:24,880
on kubernetes without having so much to

00:45:23,839 --> 00:45:26,400
do

00:45:24,880 --> 00:45:28,640
when it comes on the kubernetes side of

00:45:26,400 --> 00:45:30,480
thing the um the app um the cloud

00:45:28,640 --> 00:45:33,440
foundry platform has been built

00:45:30,480 --> 00:45:34,960
to help you um to do the tasking job for

00:45:33,440 --> 00:45:36,720
you all you just have to do is find a

00:45:34,960 --> 00:45:40,000
single command to push your application

00:45:36,720 --> 00:45:41,440
now um the cfo kids project the cloud

00:45:40,000 --> 00:45:44,839
foundry kubernetes project

00:45:41,440 --> 00:45:46,720
it's it's personally one of my favorite

00:45:44,839 --> 00:45:49,359
um

00:45:46,720 --> 00:45:51,200
platform as a service for deploying uh

00:45:49,359 --> 00:45:52,560
my apps on kubernetes it's open source

00:45:51,200 --> 00:45:53,920
clearly it's open source the cloud funny

00:45:52,560 --> 00:45:55,599
foundation is an open source foundation

00:45:53,920 --> 00:45:58,160
so it opens those you can always

00:45:55,599 --> 00:46:00,640
um contribute you can space issues etc

00:45:58,160 --> 00:46:02,560
it's built by the community um

00:46:00,640 --> 00:46:03,920
it gives you um the flexibility to

00:46:02,560 --> 00:46:06,400
deploy your application on cloud

00:46:03,920 --> 00:46:07,839
on um kubernetes without the technical

00:46:06,400 --> 00:46:09,599
know-how of

00:46:07,839 --> 00:46:11,920
being equipment experts you don't need

00:46:09,599 --> 00:46:14,319
to have a cka or ckad

00:46:11,920 --> 00:46:16,079
um certification to be able to use up on

00:46:14,319 --> 00:46:16,560
you for kubernetes is now you don't need

00:46:16,079 --> 00:46:19,359
that

00:46:16,560 --> 00:46:21,119
all you just need to do is to install

00:46:19,359 --> 00:46:24,400
scaffolding for kubernetes

00:46:21,119 --> 00:46:28,160
on any of your um

00:46:24,400 --> 00:46:31,760
on any of your platform it could be on

00:46:28,160 --> 00:46:33,599
on google cloud it could be on um

00:46:31,760 --> 00:46:35,440
mini cube that's for your local machine

00:46:33,599 --> 00:46:37,280
it could be a mini cube it could be on

00:46:35,440 --> 00:46:41,119
aws it could be on azure

00:46:37,280 --> 00:46:42,720
it could be on um any basically any

00:46:41,119 --> 00:46:44,240
platform you really want to deploy any

00:46:42,720 --> 00:46:44,960
um infrastructure service you really

00:46:44,240 --> 00:46:48,000
want to deploy

00:46:44,960 --> 00:46:50,160
your application you can install um

00:46:48,000 --> 00:46:52,400
cloud funny for kubernetes on it it's

00:46:50,160 --> 00:46:55,680
still um in version one and um

00:46:52,400 --> 00:46:57,280
it's basically working progress but it's

00:46:55,680 --> 00:46:59,040
available currently for

00:46:57,280 --> 00:47:00,560
every single person that wants to try it

00:46:59,040 --> 00:47:03,680
out to use it all you have to do

00:47:00,560 --> 00:47:07,440
is go to cf4kids.io

00:47:03,680 --> 00:47:09,119
and from there you will be able to

00:47:07,440 --> 00:47:11,359
see the respect perspective more

00:47:09,119 --> 00:47:14,400
information about um cfo kids

00:47:11,359 --> 00:47:16,319
now um ram is going to quickly

00:47:14,400 --> 00:47:17,440
i mean this all this passive all these

00:47:16,319 --> 00:47:19,280
off some

00:47:17,440 --> 00:47:21,440
things cloudfront you do is definitely

00:47:19,280 --> 00:47:23,359
not um cannot go cannot

00:47:21,440 --> 00:47:24,640
um the beauty packs helping this cannot

00:47:23,359 --> 00:47:26,400
go mention so

00:47:24,640 --> 00:47:27,839
um ram is basically going to tell us

00:47:26,400 --> 00:47:30,400
more about pacquiao

00:47:27,839 --> 00:47:32,000
on cloud native youth parks and other

00:47:30,400 --> 00:47:34,960
cncf projects

00:47:32,000 --> 00:47:35,920
so yeah can you just quickly switch to

00:47:34,960 --> 00:47:39,440
your terminal

00:47:35,920 --> 00:47:43,040
um i'm just going to focus a little bit

00:47:39,440 --> 00:47:45,119
about what just happened there

00:47:43,040 --> 00:47:47,520
and then also try and answer some of the

00:47:45,119 --> 00:47:50,559
questions that folks have

00:47:47,520 --> 00:47:55,040
on live chat

00:47:50,559 --> 00:47:55,040
okay can you see my screen now

00:47:55,200 --> 00:47:59,359
yes but not the terminal yet

00:48:01,359 --> 00:48:08,079
yep i can see it now yeah

00:48:04,480 --> 00:48:11,599
it's visible okay can you just scroll up

00:48:08,079 --> 00:48:11,599
awesome very quickly

00:48:15,839 --> 00:48:21,920
scroll up to the part

00:48:18,960 --> 00:48:25,599
in the terminal that says build detect

00:48:21,920 --> 00:48:25,599
analyze and then build back stuff

00:48:26,800 --> 00:48:38,000
okay okay

00:48:35,839 --> 00:48:40,240
so we're here i think he's from here

00:48:38,000 --> 00:48:40,240
right

00:48:42,880 --> 00:48:46,720
is this okay or do i need to scroll down

00:48:45,119 --> 00:48:51,200
yeah there's nothing

00:48:46,720 --> 00:48:51,200
moving on the screen actually

00:48:52,720 --> 00:48:59,680
that's weird yeah

00:48:55,920 --> 00:49:03,440
it's fine now so

00:48:59,680 --> 00:49:07,280
okay folks who are paying attention

00:49:03,440 --> 00:49:11,359
during the first part of the call

00:49:07,280 --> 00:49:14,880
this this is the part

00:49:11,359 --> 00:49:18,160
that sort of repeats itself so if you

00:49:14,880 --> 00:49:20,480
look closely it basically shows

00:49:18,160 --> 00:49:22,319
the whole exercise that we did with

00:49:20,480 --> 00:49:25,359
buildbacks a little before

00:49:22,319 --> 00:49:27,760
and it basically um shows how

00:49:25,359 --> 00:49:28,839
the same thing is happening here right

00:49:27,760 --> 00:49:32,000
so

00:49:28,839 --> 00:49:35,119
um pacquiao like i mentioned

00:49:32,000 --> 00:49:36,800
is an implementation of the cloud native

00:49:35,119 --> 00:49:39,520
buildback specification

00:49:36,800 --> 00:49:40,800
in this case we didn't even mention what

00:49:39,520 --> 00:49:43,359
build packs

00:49:40,800 --> 00:49:44,480
are required so cloud foundry has the

00:49:43,359 --> 00:49:48,800
ability to

00:49:44,480 --> 00:49:51,680
look at the code um look at certain

00:49:48,800 --> 00:49:53,520
files that are in the workspace in the

00:49:51,680 --> 00:49:56,000
current working directory and then

00:49:53,520 --> 00:49:56,559
it will just detect a build pack on its

00:49:56,000 --> 00:49:59,520
own

00:49:56,559 --> 00:50:00,559
now once detected it will then select

00:49:59,520 --> 00:50:03,920
those build packs

00:50:00,559 --> 00:50:04,800
and then the nodejs build pack itself is

00:50:03,920 --> 00:50:07,520
composed of

00:50:04,800 --> 00:50:08,079
node engine npm install and npm start

00:50:07,520 --> 00:50:10,800
and

00:50:08,079 --> 00:50:12,800
a few other layers and it makes use of

00:50:10,800 --> 00:50:16,640
all of these different

00:50:12,800 --> 00:50:18,880
build back layers build patch to

00:50:16,640 --> 00:50:22,160
construct the layers of the

00:50:18,880 --> 00:50:23,119
final container and then just scroll

00:50:22,160 --> 00:50:26,480
down once again

00:50:23,119 --> 00:50:30,160
sorry it will finally

00:50:26,480 --> 00:50:33,680
export this code in the form of

00:50:30,160 --> 00:50:38,400
an oci compatible image

00:50:33,680 --> 00:50:41,760
and that image is what gets deployed to

00:50:38,400 --> 00:50:43,119
kubernetes now i'm going to quickly

00:50:41,760 --> 00:50:46,640
share my screen if you

00:50:43,119 --> 00:50:49,200
don't mind share it i just want to

00:50:46,640 --> 00:50:50,240
show some stuff with parts and things

00:50:49,200 --> 00:50:55,839
like that

00:50:50,240 --> 00:50:55,839
so let me open up

00:50:56,480 --> 00:50:59,200
k9s

00:51:00,480 --> 00:51:07,440
and then here you can see all of the

00:51:04,400 --> 00:51:10,079
different apps that are deployed

00:51:07,440 --> 00:51:11,200
and here you can find among the

00:51:10,079 --> 00:51:15,040
workloads the

00:51:11,200 --> 00:51:17,680
app that shadrach just deployed so

00:51:15,040 --> 00:51:19,200
this shows you know all of the different

00:51:17,680 --> 00:51:22,960
parts that are running

00:51:19,200 --> 00:51:26,079
and we can also like

00:51:22,960 --> 00:51:27,280
get into details and see like what's

00:51:26,079 --> 00:51:30,880
happening

00:51:27,280 --> 00:51:32,000
um inside this particular part with its

00:51:30,880 --> 00:51:36,000
containers and

00:51:32,000 --> 00:51:39,839
everything so let's see

00:51:36,000 --> 00:51:43,280
do we have any logs nothing

00:51:39,839 --> 00:51:45,440
um i'm going to shift out and uh

00:51:43,280 --> 00:51:47,200
yeah so some of these require some

00:51:45,440 --> 00:51:50,160
knowledge of kubernetes and things like

00:51:47,200 --> 00:51:52,400
that but the idea is

00:51:50,160 --> 00:51:54,000
when you're developing your apps and you

00:51:52,400 --> 00:51:55,680
want to be able to deploy them you can

00:51:54,000 --> 00:51:57,040
deploy them without having to worry

00:51:55,680 --> 00:51:59,440
about all of this but

00:51:57,040 --> 00:51:59,440
somebody

00:52:00,400 --> 00:52:05,119
on the stream mentioned that but still

00:52:02,880 --> 00:52:05,680
for debugging nodes pods you need k its

00:52:05,119 --> 00:52:09,680
knowledge

00:52:05,680 --> 00:52:12,079
which is very true but the idea is

00:52:09,680 --> 00:52:13,520
for for the deployment at least a lot of

00:52:12,079 --> 00:52:16,160
things are simplified

00:52:13,520 --> 00:52:17,040
and in larger organizations we often

00:52:16,160 --> 00:52:19,760
find

00:52:17,040 --> 00:52:20,880
that there are dedicated teams for

00:52:19,760 --> 00:52:22,880
debugging

00:52:20,880 --> 00:52:25,040
uh nodes and things like that and all of

00:52:22,880 --> 00:52:26,559
these platform operators stuff

00:52:25,040 --> 00:52:28,640
but then obviously if you're one of

00:52:26,559 --> 00:52:31,119
those lucky few in a smaller team or you

00:52:28,640 --> 00:52:34,000
tend to do things by yourself

00:52:31,119 --> 00:52:35,280
kubernetes knowledge is is kind of you

00:52:34,000 --> 00:52:38,319
know something you can't

00:52:35,280 --> 00:52:42,559
do without then

00:52:38,319 --> 00:52:42,559
there was a question about

00:52:43,359 --> 00:52:48,319
what cloud provider are you using in

00:52:45,920 --> 00:52:51,359
cloud foundry so

00:52:48,319 --> 00:52:52,960
shadrach did mention a few things about

00:52:51,359 --> 00:52:55,520
the cloud foundry

00:52:52,960 --> 00:52:55,520
provider

00:52:58,240 --> 00:53:02,720
in this case we are using a

00:53:01,530 --> 00:53:05,599
[Music]

00:53:02,720 --> 00:53:06,160
google kubernetes engine that is running

00:53:05,599 --> 00:53:09,680
on

00:53:06,160 --> 00:53:12,079
our google cloud infrastructure it is a

00:53:09,680 --> 00:53:16,079
three node cluster

00:53:12,079 --> 00:53:18,800
and we have this project called cf4k

00:53:16,079 --> 00:53:21,359
it's installed on it which basically

00:53:18,800 --> 00:53:23,359
provides the cloud foundry pass

00:53:21,359 --> 00:53:27,680
interface so if i do cf

00:53:23,359 --> 00:53:31,040
anything it's going to go off to

00:53:27,680 --> 00:53:33,280
that particular kubernetes cluster

00:53:31,040 --> 00:53:34,720
and it is going to show me all of the

00:53:33,280 --> 00:53:38,480
apps that are running

00:53:34,720 --> 00:53:42,079
uh there so

00:53:38,480 --> 00:53:44,960
right now there's likes two so you can

00:53:42,079 --> 00:53:46,880
see that information here uh this gives

00:53:44,960 --> 00:53:51,040
you some idea of

00:53:46,880 --> 00:53:54,640
my of the end point that we're using

00:53:51,040 --> 00:53:56,160
and yeah that's you know the

00:53:54,640 --> 00:53:58,559
the name of the cluster that we are

00:53:56,160 --> 00:54:02,880
using and things like that and

00:53:58,559 --> 00:54:06,000
um so one other question that we have

00:54:02,880 --> 00:54:09,040
is migrate from cloud foundry to cades

00:54:06,000 --> 00:54:11,839
what are the benefits in cost time

00:54:09,040 --> 00:54:11,839
etc so

00:54:16,240 --> 00:54:22,559
the i don't understand the question in

00:54:20,160 --> 00:54:24,720
its entirety but i'm assuming

00:54:22,559 --> 00:54:26,720
if you migrate from using cloud foundry

00:54:24,720 --> 00:54:30,400
to just native kubernetes

00:54:26,720 --> 00:54:31,680
what are the benefits um sorry to kind

00:54:30,400 --> 00:54:33,839
of disappoint you there

00:54:31,680 --> 00:54:35,599
our focus is to get folks off of the

00:54:33,839 --> 00:54:38,079
kubernetes bandwagon

00:54:35,599 --> 00:54:38,640
on to cloud foundry but essentially you

00:54:38,079 --> 00:54:41,040
know

00:54:38,640 --> 00:54:42,240
use cloud foundry as the interface to

00:54:41,040 --> 00:54:45,040
kubernetes so

00:54:42,240 --> 00:54:47,200
it's not about migrating away from cloud

00:54:45,040 --> 00:54:50,640
foundry or away from

00:54:47,200 --> 00:54:52,559
kubernetes from bosch based kubernetes

00:54:50,640 --> 00:54:54,559
cloud foundry if you migrate to

00:54:52,559 --> 00:54:56,400
kubernetes-based cloud foundry there's

00:54:54,559 --> 00:54:57,599
you know obviously a lot of benefits of

00:54:56,400 --> 00:55:01,440
making use of

00:54:57,599 --> 00:55:02,400
kubernetes itself um this particular

00:55:01,440 --> 00:55:04,400
method that

00:55:02,400 --> 00:55:06,240
we just demonstrated which is to take an

00:55:04,400 --> 00:55:08,480
app and deploy it using cf push and

00:55:06,240 --> 00:55:11,920
things like that

00:55:08,480 --> 00:55:13,440
has more to do with simplifying the

00:55:11,920 --> 00:55:15,920
experience

00:55:13,440 --> 00:55:19,680
and getting cost benefits and time

00:55:15,920 --> 00:55:22,319
benefits out of that simplification

00:55:19,680 --> 00:55:24,319
um like again like shadrach mentioned

00:55:22,319 --> 00:55:28,240
you know a few minutes ago there's

00:55:24,319 --> 00:55:30,000
um there's really a lot of things that

00:55:28,240 --> 00:55:32,880
you can accomplish by

00:55:30,000 --> 00:55:34,640
uh simplifying deployment to kubernetes

00:55:32,880 --> 00:55:38,079
and

00:55:34,640 --> 00:55:39,599
this simplification has you know a lot

00:55:38,079 --> 00:55:42,400
of benefits in terms of

00:55:39,599 --> 00:55:44,240
it takes a lot less time for your

00:55:42,400 --> 00:55:46,839
developers to get their job done they

00:55:44,240 --> 00:55:50,720
can focus on

00:55:46,839 --> 00:55:52,640
the you know business problems that need

00:55:50,720 --> 00:55:55,839
to be solved and stuff like that

00:55:52,640 --> 00:55:57,760
as opposed to you know worrying about

00:55:55,839 --> 00:55:59,040
a lot of the platform operations in

00:55:57,760 --> 00:56:01,920
general so

00:55:59,040 --> 00:56:04,160
uh those are really the benefits it it

00:56:01,920 --> 00:56:06,480
reduces and eliminates a lot of the toil

00:56:04,160 --> 00:56:08,960
that tends to come along with

00:56:06,480 --> 00:56:09,520
having to deploy your apps to kubernetes

00:56:08,960 --> 00:56:14,000
all the time

00:56:09,520 --> 00:56:15,839
so yeah when it is hard really hard

00:56:14,000 --> 00:56:18,000
it's not yes let's just say complex it's

00:56:15,839 --> 00:56:20,319
really complex

00:56:18,000 --> 00:56:21,599
um because kelsey kelsey was saying jose

00:56:20,319 --> 00:56:22,960
haita was saying yesterday on the

00:56:21,599 --> 00:56:25,599
clubhouse um

00:56:22,960 --> 00:56:26,640
group he was saying uh okay he knows

00:56:25,599 --> 00:56:28,720
that kubernetes is

00:56:26,640 --> 00:56:30,160
people are actually um saying that

00:56:28,720 --> 00:56:32,240
kubernetes is no longer hard

00:56:30,160 --> 00:56:34,240
it's just complex i mean i do not know

00:56:32,240 --> 00:56:36,799
the difference between hard and complex

00:56:34,240 --> 00:56:38,960
but i really really think that ubernet

00:56:36,799 --> 00:56:42,720
is really hard

00:56:38,960 --> 00:56:45,280
and complex at the same time i mean

00:56:42,720 --> 00:56:49,119
yeah you you you really need that ck or

00:56:45,280 --> 00:56:49,119
ckd certification trust me

00:56:50,480 --> 00:56:53,839
yeah yeah so basically rama showed us um

00:56:52,960 --> 00:56:55,520
the benefits

00:56:53,839 --> 00:56:56,960
just like you answered the question on

00:56:55,520 --> 00:56:59,920
the benefits of moving from

00:56:56,960 --> 00:57:01,839
kubernetes to um cloud foundry which is

00:56:59,920 --> 00:57:05,040
a lot of benefits i mean

00:57:01,839 --> 00:57:07,119
um these toiling you have to do to just

00:57:05,040 --> 00:57:08,799
deploy your um a simple application to

00:57:07,119 --> 00:57:10,559
kubernetes is a lot

00:57:08,799 --> 00:57:12,000
the compared to cloud foundry does done

00:57:10,559 --> 00:57:13,040
all those toiling for you and all you

00:57:12,000 --> 00:57:14,880
just have to do is just

00:57:13,040 --> 00:57:16,400
know certain commands up here in your

00:57:14,880 --> 00:57:18,319
head and um

00:57:16,400 --> 00:57:19,520
if you are working a very big team of

00:57:18,319 --> 00:57:21,440
course there are people that can help

00:57:19,520 --> 00:57:24,640
you debug um which k9s

00:57:21,440 --> 00:57:27,040
for for your pods and your nodes etc so

00:57:24,640 --> 00:57:28,480
funny the aim here is it simplifies that

00:57:27,040 --> 00:57:30,000
experience the whole kubernetes

00:57:28,480 --> 00:57:32,400
experience california brings

00:57:30,000 --> 00:57:33,359
the um the cf push experience to

00:57:32,400 --> 00:57:35,680
kubernetes

00:57:33,359 --> 00:57:37,200
you they've done the hard work for you

00:57:35,680 --> 00:57:39,839
yours is just to

00:57:37,200 --> 00:57:41,599
get your app up and running on any

00:57:39,839 --> 00:57:43,520
whichever any of the cloud prof um

00:57:41,599 --> 00:57:44,799
providers service providers that you you

00:57:43,520 --> 00:57:48,160
basically want to use

00:57:44,799 --> 00:57:49,920
if it's it could be gcp aws azure

00:57:48,160 --> 00:57:51,599
whatever basically suits your company

00:57:49,920 --> 00:57:55,200
needs um c4k

00:57:51,599 --> 00:57:59,200
is is basically gear for you to

00:57:55,200 --> 00:58:00,960
to use um um verma has talked about most

00:57:59,200 --> 00:58:03,119
of it um

00:58:00,960 --> 00:58:04,960
time i mean we've been on the stream for

00:58:03,119 --> 00:58:08,079
an hour now and um

00:58:04,960 --> 00:58:10,880
it's time to you know close

00:58:08,079 --> 00:58:12,240
the curtains and um with these few

00:58:10,880 --> 00:58:13,680
points of ours

00:58:12,240 --> 00:58:16,559
we've been able i hope we've been able

00:58:13,680 --> 00:58:19,200
to convince but not confuse you

00:58:16,559 --> 00:58:20,960
that um you need to move over from

00:58:19,200 --> 00:58:23,119
kubernetes to cloud foundry for

00:58:20,960 --> 00:58:23,680
kubernetes and save yourself a bunch of

00:58:23,119 --> 00:58:25,520
stress

00:58:23,680 --> 00:58:27,440
save yourself a bunch of team and focus

00:58:25,520 --> 00:58:28,079
on the business goal and development of

00:58:27,440 --> 00:58:30,480
your team

00:58:28,079 --> 00:58:32,000
in general this applies to enterprise

00:58:30,480 --> 00:58:34,319
sim applies to individual

00:58:32,000 --> 00:58:37,599
developers of surprise to smaller teams

00:58:34,319 --> 00:58:40,000
if car foundry is available for any of

00:58:37,599 --> 00:58:40,640
any um demographic in general just get

00:58:40,000 --> 00:58:42,960
your app

00:58:40,640 --> 00:58:44,480
up and running and if you also need help

00:58:42,960 --> 00:58:47,359
or we can always

00:58:44,480 --> 00:58:48,559
send us a message i mean on slack we

00:58:47,359 --> 00:58:50,799
also have a slack group that you can

00:58:48,559 --> 00:58:52,559
always join the platform is slack

00:58:50,799 --> 00:58:54,240
maybe ram should drop it in the in the

00:58:52,559 --> 00:58:56,000
live chats probably

00:58:54,240 --> 00:58:57,680
um also you can follow the cloud

00:58:56,000 --> 00:58:59,760
foundation accounts and

00:58:57,680 --> 00:59:01,119
and just send the message your apps the

00:58:59,760 --> 00:59:04,559
california twitter accounts

00:59:01,119 --> 00:59:06,079
we would see your your mention and we

00:59:04,559 --> 00:59:07,760
would reply you if you have any

00:59:06,079 --> 00:59:09,839
questions i also give you links to where

00:59:07,760 --> 00:59:12,400
you can find answers to your question

00:59:09,839 --> 00:59:12,880
um it's been fun um doing this and we

00:59:12,400 --> 00:59:15,359
hope to

00:59:12,880 --> 00:59:16,880
do this constantly to try to convince

00:59:15,359 --> 00:59:18,559
you that what wirecraft

00:59:16,880 --> 00:59:20,640
is an awesome technology and why you

00:59:18,559 --> 00:59:21,359
should add platform to your development

00:59:20,640 --> 00:59:23,760
stack

00:59:21,359 --> 00:59:25,520
um if you do if you're more of a big fan

00:59:23,760 --> 00:59:27,200
of your ci of ci cd

00:59:25,520 --> 00:59:28,720
platform indicators for that too and

00:59:27,200 --> 00:59:30,559
this is something that we're working on

00:59:28,720 --> 00:59:32,480
and now let's stream we'll definitely be

00:59:30,559 --> 00:59:34,960
talking on talking about something

00:59:32,480 --> 00:59:36,240
um relating to ci cd especially with git

00:59:34,960 --> 00:59:37,760
lab and github

00:59:36,240 --> 00:59:39,680
um if you want to add cloud finish to

00:59:37,760 --> 00:59:42,240
entire pipeline we also

00:59:39,680 --> 00:59:43,599
about are going to cater for for that so

00:59:42,240 --> 00:59:45,119
um

00:59:43,599 --> 00:59:46,720
yeah so that's basically the platform is

00:59:45,119 --> 00:59:48,079
an awesome technology in some in some

00:59:46,720 --> 00:59:49,200
ways somebody everything done in this

00:59:48,079 --> 00:59:51,200
classroom is awesome

00:59:49,200 --> 00:59:52,240
you should focus but you actually

00:59:51,200 --> 00:59:54,960
produce your

00:59:52,240 --> 00:59:56,400
deployment pipeline and see how well and

00:59:54,960 --> 00:59:56,960
how fast you'll be able to get things

00:59:56,400 --> 01:00:00,079
done

00:59:56,960 --> 01:00:02,799
as fast as possible um any closing

01:00:00,079 --> 01:00:07,119
statements from you

01:00:02,799 --> 01:00:10,640
goodbye everyone good evening

01:00:07,119 --> 01:00:13,839
good afternoon good morning in whichever

01:00:10,640 --> 01:00:16,559
part of the world that you're joining us

01:00:13,839 --> 01:00:18,799
thank you for uh thank you for your time

01:00:16,559 --> 01:00:20,720
uh obviously this recording is available

01:00:18,799 --> 01:00:22,720
on our youtube channel whenever you want

01:00:20,720 --> 01:00:23,839
to see it or if you want to share it

01:00:22,720 --> 01:00:26,480
later

01:00:23,839 --> 01:00:28,160
uh yeah you can reach out to us on all

01:00:26,480 --> 01:00:30,880
different social media channels

01:00:28,160 --> 01:00:31,920
and on slack with any questions at any

01:00:30,880 --> 01:00:35,200
time happy to

01:00:31,920 --> 01:00:37,040
help you get on board thanks guys

01:00:35,200 --> 01:00:39,040
yeah and also if you need to see more

01:00:37,040 --> 01:00:40,799
videos on doing um

01:00:39,040 --> 01:00:42,640
language specific stuff on cloud foundry

01:00:40,799 --> 01:00:43,200
you can check out um cloud foundry

01:00:42,640 --> 01:00:45,359
channel

01:00:43,200 --> 01:00:46,960
um youtube channel we have videos on

01:00:45,359 --> 01:00:50,160
google php

01:00:46,960 --> 01:00:52,400
python um javascript scatsb

01:00:50,160 --> 01:00:53,440
static sites basically you can deploy

01:00:52,400 --> 01:00:55,760
anything on cloud foundry

01:00:53,440 --> 01:00:56,799
we have it's kit out for already and if

01:00:55,760 --> 01:00:58,880
you are more of a

01:00:56,799 --> 01:01:00,000
reader you can check our medium page

01:00:58,880 --> 01:01:01,839
medium.com

01:01:00,000 --> 01:01:03,520
cloud friendly foundation and you would

01:01:01,839 --> 01:01:04,880
find most of the work of put out

01:01:03,520 --> 01:01:06,880
thank you so much for joining the live

01:01:04,880 --> 01:01:09,040
stream it's been fun doing this

01:01:06,880 --> 01:01:11,359
um we hope to do this constantly and

01:01:09,040 --> 01:01:13,040
going forward so thank you so much and

01:01:11,359 --> 01:01:14,720
have a nice evening morning and

01:01:13,040 --> 01:01:16,880
afternoon wherever you may be in the

01:01:14,720 --> 01:01:16,880

YouTube URL: https://www.youtube.com/watch?v=C82xkgjYXuo


