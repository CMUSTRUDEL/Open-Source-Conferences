Title: A glimpse at Runtime
Publication date: 2015-05-12
Playlist: Cloud Foundry Summit 2015
Description: 
	A glimpse at Runtime - 07 Zachary Auerbach, Daniel Lavine 720p
Captions: 
	00:00:00,000 --> 00:00:05,069
hello can you hear me and everybody hear

00:00:02,340 --> 00:00:07,500
me yes hi okay welcome to run time I

00:00:05,069 --> 00:00:10,080
want to say real quick what this talk is

00:00:07,500 --> 00:00:12,900
and what this talk isn't what this talk

00:00:10,080 --> 00:00:15,809
isn't is a talk about the architecture

00:00:12,900 --> 00:00:18,810
of the CF runtime if you came here for

00:00:15,809 --> 00:00:21,840
that that's not what this is I'm sorry

00:00:18,810 --> 00:00:25,560
what this talk is is a talk about the

00:00:21,840 --> 00:00:29,429
process of the CF runtime team and how

00:00:25,560 --> 00:00:32,219
you can contribute and how you can get

00:00:29,429 --> 00:00:34,410
the most out of being part of a really

00:00:32,219 --> 00:00:37,530
excellent open-source project that has a

00:00:34,410 --> 00:00:38,700
really excellent team behind it so let's

00:00:37,530 --> 00:00:41,300
get started with a little bit of an

00:00:38,700 --> 00:00:45,090
overview so we're gonna talk about our

00:00:41,300 --> 00:00:46,550
development process on the team how we

00:00:45,090 --> 00:00:48,320
collaborate with other teams our

00:00:46,550 --> 00:00:50,820
continuous integration and deployment

00:00:48,320 --> 00:00:53,489
how we interact with the community at

00:00:50,820 --> 00:00:54,870
large how you can contribute back and

00:00:53,489 --> 00:00:56,579
hopefully at the end we'll have a few

00:00:54,870 --> 00:00:59,660
minutes to open this up for some

00:00:56,579 --> 00:01:01,800
questions so without any further ado

00:00:59,660 --> 00:01:05,129
we're gonna talk about our process some

00:01:01,800 --> 00:01:06,600
of this is a day in the life of a

00:01:05,129 --> 00:01:09,299
runtime team member and some of this is

00:01:06,600 --> 00:01:11,580
overall pivotal process and why we think

00:01:09,299 --> 00:01:14,490
it's a good thing and why we're talking

00:01:11,580 --> 00:01:17,610
about it so we'll start with stand-up

00:01:14,490 --> 00:01:19,080
and pairing every morning we do a

00:01:17,610 --> 00:01:20,640
stand-up the stand-up is our morning

00:01:19,080 --> 00:01:22,860
meeting it's where we talk about what

00:01:20,640 --> 00:01:24,540
what happened what what did we do

00:01:22,860 --> 00:01:26,640
yesterday what did the organization do

00:01:24,540 --> 00:01:27,990
yesterday we have two stand-ups big

00:01:26,640 --> 00:01:31,290
stand up that's organization wide

00:01:27,990 --> 00:01:34,140
everybody at pivotal comes or in-person

00:01:31,290 --> 00:01:36,270
or digitally as it were and we say are

00:01:34,140 --> 00:01:37,740
there do people need help do people have

00:01:36,270 --> 00:01:39,090
interesting things to share with the

00:01:37,740 --> 00:01:41,490
rest of the organization that might not

00:01:39,090 --> 00:01:44,220
be shared otherwise and finally we talk

00:01:41,490 --> 00:01:45,780
about events little stand up is a very

00:01:44,220 --> 00:01:48,240
similar format we say what do we do

00:01:45,780 --> 00:01:49,890
yesterday is there anything that people

00:01:48,240 --> 00:01:51,990
need help with is there any interesting

00:01:49,890 --> 00:01:54,930
things to share and finally we set up

00:01:51,990 --> 00:01:56,729
pairing pairing is our process every

00:01:54,930 --> 00:01:58,560
developer has a partner for a day

00:01:56,729 --> 00:02:00,390
sometimes longer kind of depends on the

00:01:58,560 --> 00:02:03,030
team and the reason we do this is

00:02:00,390 --> 00:02:05,820
because we've found that the standard

00:02:03,030 --> 00:02:07,049
idea where I write some code and I want

00:02:05,820 --> 00:02:08,789
this code to be included in the project

00:02:07,049 --> 00:02:10,470
and so I give it to Dan and Dan looks

00:02:08,789 --> 00:02:12,510
over it and says yes or no that's

00:02:10,470 --> 00:02:13,260
inefficient and there's a better way to

00:02:12,510 --> 00:02:14,849
do this so we

00:02:13,260 --> 00:02:18,780
this idea of a pair of pairs is a

00:02:14,849 --> 00:02:23,700
cohesive unit of engineering work or the

00:02:18,780 --> 00:02:26,879
ability to do engineering work and the

00:02:23,700 --> 00:02:28,650
idea is that two minds working together

00:02:26,879 --> 00:02:31,709
are actually greater than two minds

00:02:28,650 --> 00:02:34,170
working apart and we always get to eyes

00:02:31,709 --> 00:02:35,730
on every line of code that's written if

00:02:34,170 --> 00:02:38,099
we don't there's some other things that

00:02:35,730 --> 00:02:39,959
we can do to make sure that the code is

00:02:38,099 --> 00:02:41,909
is worthwhile so we will submit pull

00:02:39,959 --> 00:02:43,530
requests if we are soloing on code but

00:02:41,909 --> 00:02:46,140
ultimately the idea is that pairing

00:02:43,530 --> 00:02:49,379
creates this concept of two eyes on the

00:02:46,140 --> 00:02:51,239
code and it makes sure that whoever's

00:02:49,379 --> 00:02:52,739
writing some code if they miss something

00:02:51,239 --> 00:02:54,900
the other person can catch it there's

00:02:52,739 --> 00:02:57,030
lots of little little safety nets in the

00:02:54,900 --> 00:02:59,159
pairing process that help make it a more

00:02:57,030 --> 00:03:01,700
efficient way of writing code we think

00:02:59,159 --> 00:03:01,700
this is a good thing

00:03:02,629 --> 00:03:07,859
IPM IPM is part of our agile process

00:03:06,629 --> 00:03:11,220
angela is just a word that doesn't

00:03:07,859 --> 00:03:12,569
really mean anything we like to think of

00:03:11,220 --> 00:03:14,459
ourselves as being able to iterate very

00:03:12,569 --> 00:03:17,069
quickly on our code so we break code

00:03:14,459 --> 00:03:18,389
down into chunks that we call stories we

00:03:17,069 --> 00:03:21,720
put them in a tool called pivotal

00:03:18,389 --> 00:03:23,190
tracker if you are contributing to Cloud

00:03:21,720 --> 00:03:25,489
Foundry you should be aware of pivotal

00:03:23,190 --> 00:03:28,560
tracker it's this really nifty tool for

00:03:25,489 --> 00:03:31,049
organizing an agile codebase and an

00:03:28,560 --> 00:03:32,459
agile project but the idea is that we

00:03:31,049 --> 00:03:35,190
come up with all the things that we need

00:03:32,459 --> 00:03:36,959
to do for a project and we can look at

00:03:35,190 --> 00:03:38,790
them and see them and our product

00:03:36,959 --> 00:03:40,620
manager Yui can organize them into a

00:03:38,790 --> 00:03:42,989
timeline that makes sense from a product

00:03:40,620 --> 00:03:44,459
standpoint and every Monday morning we

00:03:42,989 --> 00:03:45,690
go into a room and we talk about what

00:03:44,459 --> 00:03:48,150
are the next two weeks worth of work

00:03:45,690 --> 00:03:49,500
that we have to do how hard is it what

00:03:48,150 --> 00:03:51,840
are some edge cases that we might not

00:03:49,500 --> 00:03:53,669
have thought of initially and we we say

00:03:51,840 --> 00:03:56,579
all right we think that these things

00:03:53,669 --> 00:04:00,090
need to happen in this order a great

00:03:56,579 --> 00:04:03,959
example is in the mornings we had a new

00:04:00,090 --> 00:04:06,000
track called context paths and this was

00:04:03,959 --> 00:04:07,409
a request from a foundation member that

00:04:06,000 --> 00:04:08,459
we have a new way of routing to

00:04:07,409 --> 00:04:10,889
different apps and I won't get into

00:04:08,459 --> 00:04:12,479
detail on that but the idea is that we

00:04:10,889 --> 00:04:13,379
suddenly had a bunch of stories and we

00:04:12,479 --> 00:04:15,299
didn't know how much work they're gonna

00:04:13,379 --> 00:04:16,829
take and the idea is that before

00:04:15,299 --> 00:04:18,090
somebody actually starts doing work on

00:04:16,829 --> 00:04:21,630
them we have to have a conversation

00:04:18,090 --> 00:04:23,580
every story is a conversation about the

00:04:21,630 --> 00:04:24,810
work that's going to be done so we have

00:04:23,580 --> 00:04:26,790
this conversation we come to a

00:04:24,810 --> 00:04:28,230
conclusion that

00:04:26,790 --> 00:04:32,970
adding this functionality to the router

00:04:28,230 --> 00:04:34,860
is going to be harder and we mark that

00:04:32,970 --> 00:04:36,930
and and I say harder what does that mean

00:04:34,860 --> 00:04:38,400
what is harder it's going to be harder

00:04:36,930 --> 00:04:40,080
than something that's easier what does

00:04:38,400 --> 00:04:41,400
that mean all right so the idea is that

00:04:40,080 --> 00:04:43,980
we're not actually coming up with

00:04:41,400 --> 00:04:45,960
quantifiable ways of measuring hard

00:04:43,980 --> 00:04:50,250
we're coming up with an idea that we can

00:04:45,960 --> 00:04:52,500
say we understand that this is going to

00:04:50,250 --> 00:04:53,550
be a difficult thing to do and part of

00:04:52,500 --> 00:04:56,520
that understanding is the idea that you

00:04:53,550 --> 00:04:59,370
can't quantify difficulty you can't say

00:04:56,520 --> 00:05:01,020
this is 10 units of hard and that thing

00:04:59,370 --> 00:05:02,460
is 2 units of heart and so this other

00:05:01,020 --> 00:05:04,500
thing is much harder you have to say

00:05:02,460 --> 00:05:06,540
this is relatively more difficult and we

00:05:04,500 --> 00:05:08,430
understand this because we had a meeting

00:05:06,540 --> 00:05:10,440
and we had a conversation about that

00:05:08,430 --> 00:05:13,440
unit of work this conversation is really

00:05:10,440 --> 00:05:15,150
important the next thing that we do and

00:05:13,440 --> 00:05:18,150
this is part of our overall process is

00:05:15,150 --> 00:05:20,970
we test drive everything and one of the

00:05:18,150 --> 00:05:23,610
really things that helped me understand

00:05:20,970 --> 00:05:26,250
test driving was the idea that your

00:05:23,610 --> 00:05:29,400
tests aren't a way of verifying that

00:05:26,250 --> 00:05:32,400
your code works but are rather a way of

00:05:29,400 --> 00:05:34,620
specifying how you plan on writing the

00:05:32,400 --> 00:05:36,980
code and that's one of the reasons why

00:05:34,620 --> 00:05:39,120
in r-spec in Ruby land

00:05:36,980 --> 00:05:41,880
tests are called specs it's a

00:05:39,120 --> 00:05:43,830
specification it's you saying this is

00:05:41,880 --> 00:05:46,110
how I want my code to eventually work

00:05:43,830 --> 00:05:48,090
and you're not necessarily coming up

00:05:46,110 --> 00:05:49,560
with implementation specific details

00:05:48,090 --> 00:05:51,240
about the code when you write a test but

00:05:49,560 --> 00:05:54,690
instead what you're saying is this is

00:05:51,240 --> 00:05:57,690
how I expect the code to result in

00:05:54,690 --> 00:05:58,800
certain functionalities and I think

00:05:57,690 --> 00:06:00,180
that's a really good way of talking

00:05:58,800 --> 00:06:02,880
about test driving because the idea is

00:06:00,180 --> 00:06:05,820
that we're allowing our tests to drive

00:06:02,880 --> 00:06:07,230
how we end up developing and this is

00:06:05,820 --> 00:06:08,370
something that on C talked about this

00:06:07,230 --> 00:06:09,600
morning and is really excellent talk

00:06:08,370 --> 00:06:11,520
about Diego you touched upon this

00:06:09,600 --> 00:06:13,050
feedback loop the idea where you write a

00:06:11,520 --> 00:06:14,790
test and that informs how you're going

00:06:13,050 --> 00:06:16,530
to write some code you write some code

00:06:14,790 --> 00:06:18,420
and that informs more information about

00:06:16,530 --> 00:06:20,520
what you really need to test there's

00:06:18,420 --> 00:06:22,440
lots of places where this comes up so we

00:06:20,520 --> 00:06:27,330
came across this really interesting edge

00:06:22,440 --> 00:06:30,420
case in this routing situation where we

00:06:27,330 --> 00:06:34,320
came up with a new way of storing routes

00:06:30,420 --> 00:06:36,630
in the go router and we had a test for

00:06:34,320 --> 00:06:37,770
the new way and then we kind of

00:06:36,630 --> 00:06:39,900
discovered that we

00:06:37,770 --> 00:06:41,900
covered an edge case where if you hadn't

00:06:39,900 --> 00:06:45,870
put the route in with the leading slash

00:06:41,900 --> 00:06:48,090
the go router wouldn't accept it but we

00:06:45,870 --> 00:06:49,919
didn't have a test for that and we saw

00:06:48,090 --> 00:06:52,050
that the grower is actually accepting

00:06:49,919 --> 00:06:53,190
things that shouldn't be accepting so we

00:06:52,050 --> 00:06:54,720
have to backfill a test for that and

00:06:53,190 --> 00:06:56,910
it's one of these ways that as you write

00:06:54,720 --> 00:06:58,289
code as you discover more about the code

00:06:56,910 --> 00:07:00,449
you're writing it informs how you should

00:06:58,289 --> 00:07:02,789
be testing it and as you write tests as

00:07:00,449 --> 00:07:04,199
you think more about what is the actual

00:07:02,789 --> 00:07:06,389
functionality that you should be testing

00:07:04,199 --> 00:07:08,460
it informs the code that you're writing

00:07:06,389 --> 00:07:11,490
the feedback loop feeds back into

00:07:08,460 --> 00:07:15,000
product and engineering as we finish

00:07:11,490 --> 00:07:17,159
stories it informs the product team or a

00:07:15,000 --> 00:07:18,479
product manager Yui about really what

00:07:17,159 --> 00:07:20,039
are the next stories and as she writes

00:07:18,479 --> 00:07:21,690
stories and forms us about how we need

00:07:20,039 --> 00:07:23,940
to be doing them so that feedback loop

00:07:21,690 --> 00:07:26,430
is really important the last two things

00:07:23,940 --> 00:07:28,680
DevOps DevOps is the idea that we are

00:07:26,430 --> 00:07:30,930
our operators if you saw Andrew clay

00:07:28,680 --> 00:07:33,240
Schafer's talk to talks ago in this room

00:07:30,930 --> 00:07:35,370
you had this understanding we're not

00:07:33,240 --> 00:07:37,610
picking up see if release and throwing

00:07:35,370 --> 00:07:40,590
it over a wall as he put it to

00:07:37,610 --> 00:07:44,009
operations we're deploying it we deploy

00:07:40,590 --> 00:07:45,599
it many times a day every time a commit

00:07:44,009 --> 00:07:47,430
gets pushed to see if release it gets

00:07:45,599 --> 00:07:48,870
deployed and we manage that and we

00:07:47,430 --> 00:07:51,060
manage deployments of see if release all

00:07:48,870 --> 00:07:52,530
across the organization other people

00:07:51,060 --> 00:07:55,229
manage see if release all across the

00:07:52,530 --> 00:07:57,360
organization and we help them to it is

00:07:55,229 --> 00:07:58,830
that not only are we writing the code

00:07:57,360 --> 00:08:00,599
for CF release but we are managing

00:07:58,830 --> 00:08:04,680
deployments of it and having a really

00:08:00,599 --> 00:08:06,509
strong deep understanding of how CF

00:08:04,680 --> 00:08:08,460
release the code that we're writing how

00:08:06,509 --> 00:08:10,680
that works in a deployed production

00:08:08,460 --> 00:08:12,599
environment that's super important to

00:08:10,680 --> 00:08:15,180
our team because we get direct immediate

00:08:12,599 --> 00:08:18,599
actionable feedback about the code we're

00:08:15,180 --> 00:08:21,870
writing by the virtue of being the

00:08:18,599 --> 00:08:24,419
people who are deploying it finally

00:08:21,870 --> 00:08:27,690
retro is something at the end of the day

00:08:24,419 --> 00:08:29,250
that under the week I'm sorry and we

00:08:27,690 --> 00:08:31,530
talk about the week and some of its

00:08:29,250 --> 00:08:33,659
technical we talk about things that went

00:08:31,530 --> 00:08:35,909
wrong technically and some of its

00:08:33,659 --> 00:08:38,250
emotional things that we fell oh we had

00:08:35,909 --> 00:08:39,630
this interaction or something obsess

00:08:38,250 --> 00:08:41,579
about something that happened in the

00:08:39,630 --> 00:08:44,640
workplace but it's a way of reflecting

00:08:41,579 --> 00:08:46,740
on the work and the work space in the

00:08:44,640 --> 00:08:50,839
week and talking with your co-workers

00:08:46,740 --> 00:08:54,290
about how can we not only iterate on our

00:08:50,839 --> 00:08:56,839
but how can we iterate on the process by

00:08:54,290 --> 00:08:58,550
which we develop cloud pattern and

00:08:56,839 --> 00:09:00,230
that's super important because not only

00:08:58,550 --> 00:09:02,959
is our code fluid and not only do we

00:09:00,230 --> 00:09:04,910
want to iterate quickly and develop

00:09:02,959 --> 00:09:06,769
quickly Cloud Foundry we want to make

00:09:04,910 --> 00:09:08,540
sure that our process always supports

00:09:06,769 --> 00:09:10,899
that goal and that means we have to

00:09:08,540 --> 00:09:16,699
iterate on our process too

00:09:10,899 --> 00:09:18,709
so Dan is gonna come up dan the vine he

00:09:16,699 --> 00:09:19,550
is a contributor from IBM and he's going

00:09:18,709 --> 00:09:20,959
to talk a little bit about our

00:09:19,550 --> 00:09:22,430
development process from the point of

00:09:20,959 --> 00:09:28,029
view of somebody outside the pivotal

00:09:22,430 --> 00:09:31,850
organization alright so thanks sec so

00:09:28,029 --> 00:09:35,959
when Zach was talking this stand up and

00:09:31,850 --> 00:09:37,309
the entire group gets together IBM and

00:09:35,959 --> 00:09:38,949
you know a lot of other companies who

00:09:37,309 --> 00:09:41,389
really aren't following this process

00:09:38,949 --> 00:09:43,999
kind of take a look at it and we're like

00:09:41,389 --> 00:09:45,889
ok how can we do that right so I live

00:09:43,999 --> 00:09:47,089
here in the South Bay I'd like to not

00:09:45,889 --> 00:09:48,949
commute two and a half to three hours

00:09:47,089 --> 00:09:52,399
everyday to go up to work right that's

00:09:48,949 --> 00:09:54,559
kind of annoying and we are an open

00:09:52,399 --> 00:09:56,449
source community and so we leverage a

00:09:54,559 --> 00:09:59,389
lot of tools that you know the open

00:09:56,449 --> 00:10:03,350
source community feels comfortable with

00:09:59,389 --> 00:10:05,720
right so stand up in pairing everyday

00:10:03,350 --> 00:10:08,059
for our team we jump on a Google hangout

00:10:05,720 --> 00:10:09,980
chat right it's just there

00:10:08,059 --> 00:10:11,990
I get context on what happened yesterday

00:10:09,980 --> 00:10:13,910
I can bring up my own issues I can help

00:10:11,990 --> 00:10:15,230
other people resolve their issues right

00:10:13,910 --> 00:10:18,220
so that's really important to keep that

00:10:15,230 --> 00:10:22,370
flow and have everyone communicating

00:10:18,220 --> 00:10:24,170
besides that when we actually do our TDD

00:10:22,370 --> 00:10:26,420
and we you know do our DevOps and we

00:10:24,170 --> 00:10:28,910
actually develop use another tool old

00:10:26,420 --> 00:10:32,089
screen here oh right it allows us to

00:10:28,910 --> 00:10:33,829
actually sit down with our pair and go

00:10:32,089 --> 00:10:36,079
through the same user interface that you

00:10:33,829 --> 00:10:40,040
would have if you were actually working

00:10:36,079 --> 00:10:42,470
side-by-side with your pair right it

00:10:40,040 --> 00:10:44,660
works pretty well the only thing you

00:10:42,470 --> 00:10:46,999
know that's a little bit of a bummer is

00:10:44,660 --> 00:10:50,480
when you're not working there with your

00:10:46,999 --> 00:10:52,069
pair you can't have the kind of

00:10:50,480 --> 00:10:53,480
communication that you might have with

00:10:52,069 --> 00:10:55,519
another pair right working with your

00:10:53,480 --> 00:10:58,730
pair is great it's fine you can hear

00:10:55,519 --> 00:11:01,009
them when they when you're working with

00:10:58,730 --> 00:11:02,480
someone else that isn't your pair then

00:11:01,009 --> 00:11:03,840
it kind of breaks down a little it's a

00:11:02,480 --> 00:11:05,520
little bit harder right

00:11:03,840 --> 00:11:08,490
pairs and relaying information back to

00:11:05,520 --> 00:11:11,070
you hopefully nothing gets lost in that

00:11:08,490 --> 00:11:13,560
translation right and so then the last

00:11:11,070 --> 00:11:16,290
thing when working remotely is our IPM

00:11:13,560 --> 00:11:18,240
in retro now personally I like to go up

00:11:16,290 --> 00:11:20,010
beginning and ending of the week because

00:11:18,240 --> 00:11:21,650
that's when those two meetings are right

00:11:20,010 --> 00:11:23,850
it's a lot nicer to be in person

00:11:21,650 --> 00:11:25,740
especially for retro and you know you

00:11:23,850 --> 00:11:28,470
get beer and snacks so a little bit of

00:11:25,740 --> 00:11:32,640
incentive to go up there but you know

00:11:28,470 --> 00:11:34,770
being remote it's not too bad and so

00:11:32,640 --> 00:11:36,540
with that you know we use kind of the

00:11:34,770 --> 00:11:38,760
same techniques when collaborating with

00:11:36,540 --> 00:11:42,120
other teams right Google Hangouts are a

00:11:38,760 --> 00:11:43,800
big part of discussions right video it's

00:11:42,120 --> 00:11:48,300
way easier to see someone's face and

00:11:43,800 --> 00:11:51,690
communicate with them and the other tool

00:11:48,300 --> 00:11:53,280
that we have for nonverbal or for non

00:11:51,690 --> 00:11:54,600
face-to-face communication is slack

00:11:53,280 --> 00:11:57,810
right which is just an internal

00:11:54,600 --> 00:11:59,460
messaging tool but something that's

00:11:57,810 --> 00:12:01,950
really important about the runtime team

00:11:59,460 --> 00:12:05,070
is what we call an interrupt pair so

00:12:01,950 --> 00:12:06,960
every morning two people or one pair is

00:12:05,070 --> 00:12:10,890
randomly selected as the interrupt pair

00:12:06,960 --> 00:12:13,080
so anyone else you know inside çf that

00:12:10,890 --> 00:12:15,240
has any issues comes and you know

00:12:13,080 --> 00:12:17,520
literally interrupts the interrupt pair

00:12:15,240 --> 00:12:19,920
and these people are responsible you

00:12:17,520 --> 00:12:21,510
know going to help them taking a look at

00:12:19,920 --> 00:12:25,380
their issue sometimes debugging it

00:12:21,510 --> 00:12:27,000
sitting down with them and you know kind

00:12:25,380 --> 00:12:28,500
of understanding if you know there's

00:12:27,000 --> 00:12:29,970
really is a problem do we need to add a

00:12:28,500 --> 00:12:32,220
story do we need to get this work done

00:12:29,970 --> 00:12:33,690
or you know is there are they just not

00:12:32,220 --> 00:12:36,890
configuring something right so they

00:12:33,690 --> 00:12:39,780
really take care of those kind of issues

00:12:36,890 --> 00:12:42,720
another thing for you know slack it's

00:12:39,780 --> 00:12:46,050
pretty great for you know simple

00:12:42,720 --> 00:12:47,820
yes-or-no questions right hey could you

00:12:46,050 --> 00:12:50,640
take a look at this for me and just what

00:12:47,820 --> 00:12:53,520
do you think kind of idea situation

00:12:50,640 --> 00:12:56,550
you'll get simple questions you know if

00:12:53,520 --> 00:12:59,520
someone's like hey we can't seem to get

00:12:56,550 --> 00:13:01,290
our app staged and it seems like the

00:12:59,520 --> 00:13:03,210
containers being deleted every time it

00:13:01,290 --> 00:13:04,590
fails is that you know the intended

00:13:03,210 --> 00:13:06,810
behavior and we're like yeah that's

00:13:04,590 --> 00:13:09,330
pretty you know that's the behavior we

00:13:06,810 --> 00:13:12,180
would expect right so then maybe they

00:13:09,330 --> 00:13:14,760
say well how could we go and you know

00:13:12,180 --> 00:13:17,370
debug this issue right so obviously the

00:13:14,760 --> 00:13:19,320
logs blah blah but sometime

00:13:17,370 --> 00:13:20,910
you know it requires more than that and

00:13:19,320 --> 00:13:23,730
that's when they interrupt a pair it's

00:13:20,910 --> 00:13:25,860
really handy right you could do

00:13:23,730 --> 00:13:28,410
something insane like fork the build

00:13:25,860 --> 00:13:30,120
pack put a sleep in there go into your

00:13:28,410 --> 00:13:33,600
container and start inspecting the files

00:13:30,120 --> 00:13:36,150
right this is just one example that had

00:13:33,600 --> 00:13:38,130
to be done another form of communication

00:13:36,150 --> 00:13:40,320
that we have is we have a pretty sweet

00:13:38,130 --> 00:13:42,150
Batphone now I can't give you the number

00:13:40,320 --> 00:13:44,190
to the Batphone only a few people can

00:13:42,150 --> 00:13:45,690
have that number right Yui it was

00:13:44,190 --> 00:13:47,520
basically like the mayor of Gotham

00:13:45,690 --> 00:13:50,490
that's the number so she can reach us

00:13:47,520 --> 00:13:53,070
and ever sees remote and you know that's

00:13:50,490 --> 00:13:54,810
just another tool that's pretty easy for

00:13:53,070 --> 00:13:57,750
communication where you don't want to go

00:13:54,810 --> 00:14:01,740
through a giant text list for here's all

00:13:57,750 --> 00:14:04,770
my issues pick up the phone and chat and

00:14:01,740 --> 00:14:05,700
then lastly how do other teams actually

00:14:04,770 --> 00:14:07,620
contribute code

00:14:05,700 --> 00:14:09,900
well almost seems obviously they just

00:14:07,620 --> 00:14:11,400
directly commit to Cloud Foundry right

00:14:09,900 --> 00:14:15,900
they're there most of them are in San

00:14:11,400 --> 00:14:17,940
Francisco it's pretty easy once in a

00:14:15,900 --> 00:14:20,550
great while there's actually pr's made

00:14:17,940 --> 00:14:22,860
it could be someone from the team who is

00:14:20,550 --> 00:14:24,870
soloing for the day like Zak said we

00:14:22,860 --> 00:14:26,610
want to eyes on everything so someone

00:14:24,870 --> 00:14:29,430
who solos for the day they'll make a

00:14:26,610 --> 00:14:31,589
pull request you know as a pair the next

00:14:29,430 --> 00:14:33,360
day hey could you review my code them in

00:14:31,589 --> 00:14:38,220
the pair can review the code that they

00:14:33,360 --> 00:14:40,970
submitted something like that and then

00:14:38,220 --> 00:14:43,080
you know all this code that goes through

00:14:40,970 --> 00:14:45,320
actually goes through our continuous

00:14:43,080 --> 00:14:48,360
integration pipeline and our CI is

00:14:45,320 --> 00:14:50,370
really important to us right we do TDD

00:14:48,360 --> 00:14:52,020
for everything so if we're not running

00:14:50,370 --> 00:14:54,810
the tests what's the point

00:14:52,020 --> 00:14:57,330
so our CI is always running all the time

00:14:54,810 --> 00:14:59,339
write all of your changes are going to

00:14:57,330 --> 00:15:01,020
start off by going to a pre staging

00:14:59,339 --> 00:15:03,510
environment so we named all of ours

00:15:01,020 --> 00:15:06,540
after sauces so we have Tabasco that's

00:15:03,510 --> 00:15:07,910
our first staging environment and you

00:15:06,540 --> 00:15:11,400
know it's a pretty lightweight

00:15:07,910 --> 00:15:13,470
deployment of CF it's you know good to

00:15:11,400 --> 00:15:15,570
see that hey since our you know last Co

00:15:13,470 --> 00:15:18,200
changes we can roll everything and

00:15:15,570 --> 00:15:21,420
upgrade everything in a clean fashion

00:15:18,200 --> 00:15:23,730
there's minimal tests that you know run

00:15:21,420 --> 00:15:26,430
against it we run our tests as our teams

00:15:23,730 --> 00:15:29,010
to say okay this seems to be pretty good

00:15:26,430 --> 00:15:31,000
and once it gets through that phase it

00:15:29,010 --> 00:15:33,129
goes into staging and stage

00:15:31,000 --> 00:15:37,750
you know where things are much more

00:15:33,129 --> 00:15:40,600
interesting staging is a semi

00:15:37,750 --> 00:15:42,970
small-scale production environment and

00:15:40,600 --> 00:15:45,639
you know we have everything working

00:15:42,970 --> 00:15:47,139
there we have services hooked into our

00:15:45,639 --> 00:15:49,000
staging environment we have Diego

00:15:47,139 --> 00:15:51,220
running on our staging environment and

00:15:49,000 --> 00:15:54,550
it's also the place where most of the

00:15:51,220 --> 00:15:56,680
PM's go for acceptance right so it's the

00:15:54,550 --> 00:15:59,019
place where hey look we pushed the code

00:15:56,680 --> 00:16:01,509
it's working there everything says it's

00:15:59,019 --> 00:16:03,100
green and then the pianos like okay well

00:16:01,509 --> 00:16:04,269
let me go take a look at it let me play

00:16:03,100 --> 00:16:07,029
around with it on the staging

00:16:04,269 --> 00:16:09,009
environment and it also serves as a

00:16:07,029 --> 00:16:11,050
great place where you know we're all

00:16:09,009 --> 00:16:12,970
coming together and then we can step

00:16:11,050 --> 00:16:15,819
back and say did we break anyone else

00:16:12,970 --> 00:16:17,589
right so maybe we push some code that

00:16:15,819 --> 00:16:19,269
accidentally broke services right

00:16:17,589 --> 00:16:21,220
they'll come over bug us would be like

00:16:19,269 --> 00:16:23,740
hey you see those red things on your

00:16:21,220 --> 00:16:25,269
board that say services well you know we

00:16:23,740 --> 00:16:27,810
care about those could you please fix

00:16:25,269 --> 00:16:30,519
the code that you've pushed accidentally

00:16:27,810 --> 00:16:32,319
and then besides that we have smoke and

00:16:30,519 --> 00:16:35,199
stress testing right so you do smoke

00:16:32,319 --> 00:16:37,120
tests to make sure that our environment

00:16:35,199 --> 00:16:40,000
is always up and running right when we

00:16:37,120 --> 00:16:41,620
do these staging rules we have you know

00:16:40,000 --> 00:16:43,509
little apps running in there saying hey

00:16:41,620 --> 00:16:44,470
you know we're rolling everything but we

00:16:43,509 --> 00:16:46,540
can still talk to you

00:16:44,470 --> 00:16:49,120
çf is still running fine you know we're

00:16:46,540 --> 00:16:50,470
happy with that occasionally we do a bit

00:16:49,120 --> 00:16:53,230
of stress testing against our

00:16:50,470 --> 00:16:57,029
deployments it's not all that common but

00:16:53,230 --> 00:16:59,350
you know when we want to check backwards

00:16:57,029 --> 00:17:02,079
regression right we'll do some stress

00:16:59,350 --> 00:17:05,530
testing maybe potentially spin up little

00:17:02,079 --> 00:17:09,159
vironment that are isolated to test the

00:17:05,530 --> 00:17:10,689
specific feature but for the most part

00:17:09,159 --> 00:17:13,480
we really you know don't do all that

00:17:10,689 --> 00:17:15,760
much stress testing another thing that's

00:17:13,480 --> 00:17:18,819
important is our environment differences

00:17:15,760 --> 00:17:21,250
right so as the runtime team we are kind

00:17:18,819 --> 00:17:23,829
of the meld of everything right we

00:17:21,250 --> 00:17:26,860
manage the giant CF release repo that

00:17:23,829 --> 00:17:29,559
everyone's contributing to and so we

00:17:26,860 --> 00:17:32,590
literally deploy on OpenStack vSphere

00:17:29,559 --> 00:17:35,049
AWS right and we manage all of these

00:17:32,590 --> 00:17:36,250
different deployments and they're pretty

00:17:35,049 --> 00:17:38,140
useful to us

00:17:36,250 --> 00:17:40,840
there's small things that people do all

00:17:38,140 --> 00:17:41,950
the time that you know this you just

00:17:40,840 --> 00:17:44,800
think this isn't going to have any

00:17:41,950 --> 00:17:48,610
consequences and these are where

00:17:44,800 --> 00:17:51,250
we catch those problems for example

00:17:48,610 --> 00:17:53,530
there was a ruby gem that were using

00:17:51,250 --> 00:17:58,030
called flog to manage the back end of

00:17:53,530 --> 00:18:00,160
connecting to AWS or NFS for OpenStack

00:17:58,030 --> 00:18:01,540
and someone said you know these symbols

00:18:00,160 --> 00:18:04,120
look a little funky can we just change

00:18:01,540 --> 00:18:06,520
them to strings sure it's Ruby you can

00:18:04,120 --> 00:18:09,580
do that totally broke

00:18:06,520 --> 00:18:11,710
OpenStack right whatever the gem was

00:18:09,580 --> 00:18:13,540
doing underneath for some reason strings

00:18:11,710 --> 00:18:15,760
and symbols were not handled the same

00:18:13,540 --> 00:18:18,820
way and so our OpenStack environment you

00:18:15,760 --> 00:18:21,610
know exploded and that was good this is

00:18:18,820 --> 00:18:23,590
why we have trust in the CI right so one

00:18:21,610 --> 00:18:26,440
of our environments went red and so when

00:18:23,590 --> 00:18:28,240
you hear you know Oh Cloud Foundry you

00:18:26,440 --> 00:18:30,670
know it's safe to fail it's because we

00:18:28,240 --> 00:18:32,470
have these giant CI environments that we

00:18:30,670 --> 00:18:34,720
feel comfortable that we're safe to fail

00:18:32,470 --> 00:18:36,940
right red doesn't mean oh something's

00:18:34,720 --> 00:18:39,429
wrong Reds you know a cue to us to be

00:18:36,940 --> 00:18:41,290
like hey let's go investigate why this

00:18:39,429 --> 00:18:44,890
went red or why something didn't pass

00:18:41,290 --> 00:18:48,850
right so red isn't a problem it's just

00:18:44,890 --> 00:18:51,250
you know it's a great way to be sure

00:18:48,850 --> 00:18:53,380
that you have pushed all your code

00:18:51,250 --> 00:18:55,620
everything is working in there and when

00:18:53,380 --> 00:18:57,700
everything is green then you're golden

00:18:55,620 --> 00:19:01,559
and with that I'm going to throw it back

00:18:57,700 --> 00:19:04,120
over to Zak to finish up on contribution

00:19:01,559 --> 00:19:07,450
hello can you hear me yes good

00:19:04,120 --> 00:19:09,429
hi so that's our process that's what we

00:19:07,450 --> 00:19:12,190
do internally this is how we work as

00:19:09,429 --> 00:19:13,450
pivots on the runtime team at eight

00:19:12,190 --> 00:19:16,030
seven five Howard Street in San

00:19:13,450 --> 00:19:18,010
Francisco I see lots of familiar faces

00:19:16,030 --> 00:19:20,050
but I see lots of unfamiliar faces and

00:19:18,010 --> 00:19:22,780
first I want to say the community is

00:19:20,050 --> 00:19:24,370
great it's awesome that we get requests

00:19:22,780 --> 00:19:27,340
from the community we get code we get

00:19:24,370 --> 00:19:29,500
issues we get conversations that inform

00:19:27,340 --> 00:19:31,179
new features all of this is awesome

00:19:29,500 --> 00:19:34,780
especially code because it's work that

00:19:31,179 --> 00:19:35,530
we don't have to do so yeah pull

00:19:34,780 --> 00:19:41,290
requests come on

00:19:35,530 --> 00:19:43,420
keep them coming but how can we help you

00:19:41,290 --> 00:19:46,360
understand our process in order to help

00:19:43,420 --> 00:19:48,280
your code and your issues get solved

00:19:46,360 --> 00:19:49,390
quicker and get pulled in quicker so

00:19:48,280 --> 00:19:50,679
that's we're gonna talk about today so a

00:19:49,390 --> 00:19:52,809
little bit of information about how we

00:19:50,679 --> 00:19:54,550
work through issues and information that

00:19:52,809 --> 00:19:56,080
comes for the community we triage stuff

00:19:54,550 --> 00:19:57,389
in trackers so again all of this stuff

00:19:56,080 --> 00:19:59,249
is completely open

00:19:57,389 --> 00:20:01,079
you can take a look at our tracker

00:19:59,249 --> 00:20:03,089
project and see all of the stories you

00:20:01,079 --> 00:20:04,679
can see all of the features all of the

00:20:03,089 --> 00:20:07,289
bugs all the chores that we have in

00:20:04,679 --> 00:20:08,849
there you can't edit them but you can

00:20:07,289 --> 00:20:10,109
see them and we really want you to we

00:20:08,849 --> 00:20:11,669
want you to take a look and understand

00:20:10,109 --> 00:20:13,349
tracker and try to get a better

00:20:11,669 --> 00:20:16,769
understanding of how we iterate on cloud

00:20:13,349 --> 00:20:20,009
country for the most part issues come in

00:20:16,769 --> 00:20:22,349
bugs come in conversations and pull

00:20:20,009 --> 00:20:23,489
requests come in and you eat product

00:20:22,349 --> 00:20:25,469
manager takes a look at them and says

00:20:23,489 --> 00:20:27,450
this is this first line of defense is

00:20:25,469 --> 00:20:29,849
this reasonable does this belong to run

00:20:27,450 --> 00:20:31,859
time sometimes we get a bug in you know

00:20:29,849 --> 00:20:33,179
vcap dev that's the run time mailing

00:20:31,859 --> 00:20:34,799
list that really belongs in the Bosh

00:20:33,179 --> 00:20:36,299
mailing list that's our first line of

00:20:34,799 --> 00:20:38,419
defense he was gonna say is this is this

00:20:36,299 --> 00:20:41,279
reasonable for runtime to be looking at

00:20:38,419 --> 00:20:42,719
she puts it in the tracker backlog we

00:20:41,279 --> 00:20:45,029
have a little section for the community

00:20:42,719 --> 00:20:46,139
the community payer which is kind of

00:20:45,029 --> 00:20:48,659
like the interrupt pair only they get

00:20:46,139 --> 00:20:51,329
interrupted by the community we'll take

00:20:48,659 --> 00:20:52,589
a look at that stuff the sources of

00:20:51,329 --> 00:20:54,419
these things like I said they're gonna

00:20:52,589 --> 00:20:56,459
be pull requests on github issues on

00:20:54,419 --> 00:20:58,979
github emails sent to the mailing list

00:20:56,459 --> 00:21:00,929
and we also get foundation requests that

00:20:58,979 --> 00:21:02,879
sort of go straight to Yui and I don't

00:21:00,929 --> 00:21:05,820
really understand there's like a kind of

00:21:02,879 --> 00:21:07,589
a secret chip implanted in the product

00:21:05,820 --> 00:21:09,089
managers and the foundation has a little

00:21:07,589 --> 00:21:12,059
remote control and then she puts in a

00:21:09,089 --> 00:21:13,859
story in the tracker some feedback we

00:21:12,059 --> 00:21:15,599
got when we were beta testing this talk

00:21:13,859 --> 00:21:18,119
was it needed to be funnier so could you

00:21:15,599 --> 00:21:24,479
all laugh a little harder great okay

00:21:18,119 --> 00:21:25,950
okay so thanks Jim Yui puts Foundation

00:21:24,479 --> 00:21:30,089
request in the tracker and we take care

00:21:25,950 --> 00:21:32,639
of them how can you contribute issues

00:21:30,089 --> 00:21:34,769
and get the most out of asking us these

00:21:32,639 --> 00:21:37,619
questions sending email to the mailing

00:21:34,769 --> 00:21:39,179
list put something on github issues but

00:21:37,619 --> 00:21:41,759
what does it really take for us to help

00:21:39,179 --> 00:21:44,070
you the best thing that you can give us

00:21:41,759 --> 00:21:46,950
is your manifest and your logs related

00:21:44,070 --> 00:21:49,799
to the issue this is super important

00:21:46,950 --> 00:21:51,329
because we get stuff all the time and

00:21:49,799 --> 00:21:53,609
we're so desperate to help we truly are

00:21:51,329 --> 00:21:56,279
and I don't mean this in a sarcastic way

00:21:53,609 --> 00:21:58,379
we genuinely want every issue that comes

00:21:56,279 --> 00:22:00,359
to us to be solved and we want people to

00:21:58,379 --> 00:22:03,269
come away from their interaction with us

00:22:00,359 --> 00:22:05,459
saying man that was so cool the runtime

00:22:03,269 --> 00:22:09,299
team fixed my problem they're the best

00:22:05,459 --> 00:22:11,010
we want that to happen right how can we

00:22:09,299 --> 00:22:12,240
do that well we're gonna ask you

00:22:11,010 --> 00:22:13,230
for your manifest and we're gonna look

00:22:12,240 --> 00:22:14,910
through your manifest we're gonna say

00:22:13,230 --> 00:22:16,320
okay what what might be missing here

00:22:14,910 --> 00:22:18,000
what were there changes in the last

00:22:16,320 --> 00:22:21,300
major version of C if released that's a

00:22:18,000 --> 00:22:22,890
big one is there's a new thing added to

00:22:21,300 --> 00:22:25,290
the manifest a new property or a

00:22:22,890 --> 00:22:27,780
property changed and somebody didn't

00:22:25,290 --> 00:22:29,820
pick up on it their new manifest didn't

00:22:27,780 --> 00:22:31,460
get that change and now logger Gator

00:22:29,820 --> 00:22:32,910
crashes every time you try to deploy

00:22:31,460 --> 00:22:34,890
that's huge

00:22:32,910 --> 00:22:37,530
give us your manifest please same thing

00:22:34,890 --> 00:22:39,000
with logs your app is crashing but it's

00:22:37,530 --> 00:22:40,920
not crashing in a way that makes any

00:22:39,000 --> 00:22:42,840
sense it's probably on the DEA and you

00:22:40,920 --> 00:22:44,370
say that to us you say it's on the DEA

00:22:42,840 --> 00:22:48,300
what we're gonna say can we have your

00:22:44,370 --> 00:22:50,730
DEA logs so send us that stuff and a lot

00:22:48,300 --> 00:22:52,680
little bit of information be careful

00:22:50,730 --> 00:22:54,270
please when you send us your manifest

00:22:52,680 --> 00:22:57,180
because it's got private keys in it and

00:22:54,270 --> 00:22:59,790
it's got your passwords in it and if you

00:22:57,180 --> 00:23:02,520
mail vcap dev manifest with your private

00:22:59,790 --> 00:23:04,380
key it's not just us who gets that it's

00:23:02,520 --> 00:23:05,900
every other single person in the world

00:23:04,380 --> 00:23:08,370
who knows how to go to code.google.com

00:23:05,900 --> 00:23:09,690
or whatever the Google Groups mailing

00:23:08,370 --> 00:23:12,300
list is right and it's moved down but

00:23:09,690 --> 00:23:14,430
that's not important so don't don't mail

00:23:12,300 --> 00:23:16,590
us your private keys that's it that's

00:23:14,430 --> 00:23:18,150
the thing you shouldn't do but in the

00:23:16,590 --> 00:23:20,100
meantime yeah send us your manifest send

00:23:18,150 --> 00:23:22,440
us your logs give us as much information

00:23:20,100 --> 00:23:23,940
as you can sometimes there's this

00:23:22,440 --> 00:23:25,820
balance between sifting through a lot of

00:23:23,940 --> 00:23:27,960
information to try to find a problem and

00:23:25,820 --> 00:23:30,090
feeling like you don't have enough and

00:23:27,960 --> 00:23:31,980
we'd rather you err on the side of more

00:23:30,090 --> 00:23:36,000
information because that just helps us

00:23:31,980 --> 00:23:38,580
solve your problem quicker moving on

00:23:36,000 --> 00:23:40,980
code how can you get your PR mercs well

00:23:38,580 --> 00:23:42,360
so we talked about test driving this is

00:23:40,980 --> 00:23:45,720
really important and we talked about

00:23:42,360 --> 00:23:48,240
trust in our CI well we have this trust

00:23:45,720 --> 00:23:50,160
because every single feature we write

00:23:48,240 --> 00:23:52,530
comes with a really comprehensive suite

00:23:50,160 --> 00:23:55,250
of tests that we've written before we

00:23:52,530 --> 00:23:58,410
wrote the feature this means that we can

00:23:55,250 --> 00:24:01,980
be really relying on our continuous

00:23:58,410 --> 00:24:04,920
integration to tell us very accurately

00:24:01,980 --> 00:24:06,780
whether or not our code is working and

00:24:04,920 --> 00:24:08,820
that means that if we get code that

00:24:06,780 --> 00:24:11,010
doesn't have comprehensive test coverage

00:24:08,820 --> 00:24:13,170
that's a problem because it means that

00:24:11,010 --> 00:24:15,990
we can't really pull that in and feel

00:24:13,170 --> 00:24:19,680
that the CI is still as reliable as the

00:24:15,990 --> 00:24:21,570
standard that we hold it up to be so I

00:24:19,680 --> 00:24:22,100
skipped a bullet point I apologize about

00:24:21,570 --> 00:24:24,350
that but is

00:24:22,100 --> 00:24:27,169
test it this is super important please

00:24:24,350 --> 00:24:28,910
write tests and if you if you feel like

00:24:27,169 --> 00:24:30,919
your tests don't make a lot of sense if

00:24:28,910 --> 00:24:33,710
you're not sure how to test that ask us

00:24:30,919 --> 00:24:36,169
boy do we love talking about test

00:24:33,710 --> 00:24:38,630
driving a pivotal man that's like if you

00:24:36,169 --> 00:24:41,030
if you say test driving next to somebody

00:24:38,630 --> 00:24:42,679
from pivotal years an hour yeah you're

00:24:41,030 --> 00:24:44,870
at least in that conversation it's great

00:24:42,679 --> 00:24:46,520
right we love testing so please ask us

00:24:44,870 --> 00:24:48,380
because we can't wait to help you and

00:24:46,520 --> 00:24:51,020
the more people who understand test

00:24:48,380 --> 00:24:54,110
driving the more people who are able to

00:24:51,020 --> 00:24:57,049
really competently contribute to CF only

00:24:54,110 --> 00:24:58,850
good things can come from that did you

00:24:57,049 --> 00:25:00,080
run acceptance tests we don't expect

00:24:58,850 --> 00:25:02,090
everybody to write an acceptance test

00:25:00,080 --> 00:25:03,890
that's an end-to-end integration test

00:25:02,090 --> 00:25:06,049
that's pushing an app and expecting that

00:25:03,890 --> 00:25:07,640
app to work given the feature you wrote

00:25:06,049 --> 00:25:11,000
we do not expect you to be writing these

00:25:07,640 --> 00:25:12,020
regularly but did you run them did you

00:25:11,000 --> 00:25:13,159
make sure that you didn't break

00:25:12,020 --> 00:25:14,179
something that was already working

00:25:13,159 --> 00:25:19,100
already that's a big one

00:25:14,179 --> 00:25:20,179
so please run the test Suites before you

00:25:19,100 --> 00:25:21,950
contribute a pull request because

00:25:20,179 --> 00:25:23,480
sometimes it's just a little tiny thing

00:25:21,950 --> 00:25:25,070
and it's so much easier on you we don't

00:25:23,480 --> 00:25:28,520
want to waste your time we don't want to

00:25:25,070 --> 00:25:30,409
send you back to fix something that you

00:25:28,520 --> 00:25:31,880
could have just caught and it's not it's

00:25:30,409 --> 00:25:32,720
not like we're upset about oh you could

00:25:31,880 --> 00:25:34,250
have just caught it that's not what I

00:25:32,720 --> 00:25:35,840
mean I mean your time is just as

00:25:34,250 --> 00:25:38,030
valuable as anybody else's so we don't

00:25:35,840 --> 00:25:41,090
want to waste that we want to know why

00:25:38,030 --> 00:25:42,230
you made the change that's important the

00:25:41,090 --> 00:25:43,700
other thing that's important is is it

00:25:42,230 --> 00:25:45,530
generally applicable does this apply to

00:25:43,700 --> 00:25:47,419
every possible consumer of Cloud Foundry

00:25:45,530 --> 00:25:50,270
or did you write a solution that's very

00:25:47,419 --> 00:25:53,240
specific to your installation if you did

00:25:50,270 --> 00:25:55,580
can you generalize it can you take a

00:25:53,240 --> 00:25:57,140
solution that applies to your specific

00:25:55,580 --> 00:26:00,559
multi-tenant deployment of Cloud Foundry

00:25:57,140 --> 00:26:03,289
on OpenStack and apply that to people on

00:26:00,559 --> 00:26:06,049
vSphere and AWS and in the future

00:26:03,289 --> 00:26:08,419
CenturyLink Cloud can you do that and

00:26:06,049 --> 00:26:10,190
that's really important because we we're

00:26:08,419 --> 00:26:11,900
a foundation and we are platform

00:26:10,190 --> 00:26:14,000
agnostic we can't pull in OpenStack to

00:26:11,900 --> 00:26:15,909
specific contributions but we can pull

00:26:14,000 --> 00:26:18,200
in generic contributions and we want to

00:26:15,909 --> 00:26:20,750
especially if you wrote it as code we

00:26:18,200 --> 00:26:22,370
didn't have to right the last thing is

00:26:20,750 --> 00:26:23,900
just thinking about what does this break

00:26:22,370 --> 00:26:25,400
start a conversation with your pull

00:26:23,900 --> 00:26:27,640
request pull requests are great when

00:26:25,400 --> 00:26:30,140
they're conversation what does it break

00:26:27,640 --> 00:26:31,100
what might it break and have that

00:26:30,140 --> 00:26:32,570
conversation and sometimes a

00:26:31,100 --> 00:26:34,370
conversation is it won't break anything

00:26:32,570 --> 00:26:35,890
so we'll pull it in sometimes the

00:26:34,370 --> 00:26:38,060
conversation is this my

00:26:35,890 --> 00:26:40,130
let's go back and fix some problems

00:26:38,060 --> 00:26:42,380
that's really important and like I said

00:26:40,130 --> 00:26:44,840
every story in our backlog is a

00:26:42,380 --> 00:26:47,030
conversation that we promised each other

00:26:44,840 --> 00:26:48,890
that we're going to have and as a

00:26:47,030 --> 00:26:51,470
community contributor we'd like to make

00:26:48,890 --> 00:26:53,360
that same promise to you I want to show

00:26:51,470 --> 00:26:55,430
you the anatomy of a good-looking pull

00:26:53,360 --> 00:27:01,310
request this is from my crayon strim

00:26:55,430 --> 00:27:03,770
raise your hand yeah so this came in

00:27:01,310 --> 00:27:05,990
this is fixing an issue that Mike also

00:27:03,770 --> 00:27:07,310
filed and it's got a really great

00:27:05,990 --> 00:27:09,230
comprehensive test suite there's tons of

00:27:07,310 --> 00:27:10,550
other code in here by the way but it's

00:27:09,230 --> 00:27:14,660
got this nice comprehensive test suite

00:27:10,550 --> 00:27:16,760
it's got a great little PR information

00:27:14,660 --> 00:27:18,500
about what what actually does this pull

00:27:16,760 --> 00:27:20,300
request to do it gives us some hints

00:27:18,500 --> 00:27:20,720
about where to look for possible problem

00:27:20,300 --> 00:27:22,190
areas

00:27:20,720 --> 00:27:24,770
this makes your job and our life so much

00:27:22,190 --> 00:27:27,140
easier and I've got a little link up

00:27:24,770 --> 00:27:32,120
here that I'm gonna click on whoa

00:27:27,140 --> 00:27:35,480
that didn't work how does this okay yeah

00:27:32,120 --> 00:27:36,620
well we'll skip it for now but the idea

00:27:35,480 --> 00:27:39,350
is that that link was going to be the

00:27:36,620 --> 00:27:40,670
full issue the issue I'll describe it

00:27:39,350 --> 00:27:42,050
had a long discussion about the problem

00:27:40,670 --> 00:27:44,030
need to be solved and it went back and

00:27:42,050 --> 00:27:45,830
forth youi was involved from the product

00:27:44,030 --> 00:27:46,970
standpoint we had engineers involved or

00:27:45,830 --> 00:27:49,250
an engineering standpoint the idea is

00:27:46,970 --> 00:27:50,900
that every issue every tracker story

00:27:49,250 --> 00:27:53,000
every pull request is a conversation

00:27:50,900 --> 00:27:55,370
that we have about how to make Cloud

00:27:53,000 --> 00:27:56,840
Foundry better that's super important so

00:27:55,370 --> 00:28:01,300
without further ado do people have

00:27:56,840 --> 00:28:01,300
questions you

00:28:06,100 --> 00:28:15,649
it depends so we have this picture of

00:28:09,429 --> 00:28:17,480
our board this board shows four pairs

00:28:15,649 --> 00:28:20,720
one of them is fake because it's their

00:28:17,480 --> 00:28:22,639
stuffed animals but um this is the board

00:28:20,720 --> 00:28:25,129
so the idea is that at any given time we

00:28:22,639 --> 00:28:27,649
might have anywhere between two and four

00:28:25,129 --> 00:28:28,429
pairs but right now I think we're at

00:28:27,649 --> 00:28:33,710
three years

00:28:28,429 --> 00:28:34,759
we're odd we actually so being odd it

00:28:33,710 --> 00:28:36,169
can be probably cuz I mean somebody's

00:28:34,759 --> 00:28:38,029
always soloing but that's just something

00:28:36,169 --> 00:28:40,220
we deal with as people rotate on and off

00:28:38,029 --> 00:28:41,869
the team and then we do have the

00:28:40,220 --> 00:28:44,269
morale-boosting pair in case somebody

00:28:41,869 --> 00:28:54,350
needs some stuffed animal love right

00:28:44,269 --> 00:28:58,429
there yeah so IBM kind of faced this

00:28:54,350 --> 00:29:01,519
problem we had people working on the

00:28:58,429 --> 00:29:04,340
runtime team from London the East Coast

00:29:01,519 --> 00:29:07,429
and here in San Francisco at one point

00:29:04,340 --> 00:29:10,789
and right so there's one person in

00:29:07,429 --> 00:29:14,179
London so he's gonna so though for part

00:29:10,789 --> 00:29:16,789
of the day right eventually then the

00:29:14,179 --> 00:29:19,820
people on the East Coast woke up and you

00:29:16,789 --> 00:29:21,559
know he would solo with one of them for

00:29:19,820 --> 00:29:25,399
half a day right his second half of the

00:29:21,559 --> 00:29:27,139
day once he left the two people on the

00:29:25,399 --> 00:29:29,360
East Coast would then you know pair up

00:29:27,139 --> 00:29:34,519
and continue on for the next half of the

00:29:29,360 --> 00:29:36,259
day and then right out lunchtime if they

00:29:34,519 --> 00:29:38,450
stayed together you know their days over

00:29:36,259 --> 00:29:40,490
but in the morning they could split off

00:29:38,450 --> 00:29:42,590
from pairing with each other and pair

00:29:40,490 --> 00:29:44,210
with someone from San Francisco for half

00:29:42,590 --> 00:29:47,869
the day right because keep it rotating

00:29:44,210 --> 00:29:49,669
you know keep all the new faces and then

00:29:47,869 --> 00:29:51,799
once they were done you know at lunch

00:29:49,669 --> 00:29:53,149
time then they dropped off and the two

00:29:51,799 --> 00:29:55,100
pairs that reparing here in San

00:29:53,149 --> 00:29:58,190
Francisco then combined and became one

00:29:55,100 --> 00:29:59,990
pair again right so we obviously do the

00:29:58,190 --> 00:30:02,360
best to try and accommodate like

00:29:59,990 --> 00:30:03,830
everyone is always pairing but there are

00:30:02,360 --> 00:30:07,159
definitely cases where you know if

00:30:03,830 --> 00:30:11,910
someone is gonna have to solo and submit

00:30:07,159 --> 00:30:19,540
pull requests for review again

00:30:11,910 --> 00:30:20,410
is anybody else yeah I'll get back to

00:30:19,540 --> 00:30:21,760
you I'm sorry I just wanted to give

00:30:20,410 --> 00:30:23,200
somebody else the chance so performance

00:30:21,760 --> 00:30:24,250
and quality indicators a lot of that

00:30:23,200 --> 00:30:26,770
comes from our continuous integration

00:30:24,250 --> 00:30:29,260
environment where we have stress tests

00:30:26,770 --> 00:30:30,970
we have a bunch of graphs that are just

00:30:29,260 --> 00:30:33,340
constantly coming from people hitting

00:30:30,970 --> 00:30:35,200
apps deployed against our staging

00:30:33,340 --> 00:30:37,780
environment and those graphs are showing

00:30:35,200 --> 00:30:39,010
us go router roundtrip for instance

00:30:37,780 --> 00:30:40,840
that's one of the things that we're

00:30:39,010 --> 00:30:42,700
measuring how long does the risk West

00:30:40,840 --> 00:30:44,980
spend in the go router how long does it

00:30:42,700 --> 00:30:46,750
spend in the DEA how long has it spent

00:30:44,980 --> 00:30:48,970
coming back and what's the networking

00:30:46,750 --> 00:30:51,040
overhead just due to networking where

00:30:48,970 --> 00:30:56,650
it's not really in anything right does

00:30:51,040 --> 00:30:59,260
that make sense oh oh yes I see yeah we

00:30:56,650 --> 00:31:01,810
do so like I said we give points to a

00:30:59,260 --> 00:31:03,370
story right which is how much work a

00:31:01,810 --> 00:31:04,450
story is going to be and I put scare

00:31:03,370 --> 00:31:06,700
quotes in there because it's not a

00:31:04,450 --> 00:31:10,000
quantifiable thing but the idea is that

00:31:06,700 --> 00:31:12,970
at the end of the week we can see oh you

00:31:10,000 --> 00:31:15,370
got through 17 points again that doesn't

00:31:12,970 --> 00:31:18,280
measure something specific but if the

00:31:15,370 --> 00:31:22,810
next week we see you got through five

00:31:18,280 --> 00:31:24,790
points then that's showing us ideally we

00:31:22,810 --> 00:31:27,100
didn't change how we were estimating how

00:31:24,790 --> 00:31:29,380
hard a story is but that's showing us oh

00:31:27,100 --> 00:31:31,750
suddenly something slowed down or we

00:31:29,380 --> 00:31:34,450
didn't spend enough time working on real

00:31:31,750 --> 00:31:36,100
features we were too busy fixing bugs so

00:31:34,450 --> 00:31:38,170
those those are not as much indicators

00:31:36,100 --> 00:31:41,590
of performance of our us as individuals

00:31:38,170 --> 00:31:44,260
but as a team how much work were we

00:31:41,590 --> 00:31:45,850
actually able to get done on forward

00:31:44,260 --> 00:31:48,160
progress on Cloud Foundry and a little

00:31:45,850 --> 00:31:50,710
bit of a note here we only point

00:31:48,160 --> 00:31:53,470
stories that we think are features so

00:31:50,710 --> 00:31:55,570
bugs and chores cleaning up the codebase

00:31:53,470 --> 00:31:57,580
don't get pointed which means that if

00:31:55,570 --> 00:31:59,110
you do a week where you were only fixing

00:31:57,580 --> 00:32:00,880
bugs you're going to see that number of

00:31:59,110 --> 00:32:03,220
points at the end of the week drop and

00:32:00,880 --> 00:32:05,350
that's a good feedback to say wow we

00:32:03,220 --> 00:32:06,340
just spent all this time fixing bugs do

00:32:05,350 --> 00:32:08,350
we have a problem where we're

00:32:06,340 --> 00:32:10,960
introducing a lot of bugs it's a huge

00:32:08,350 --> 00:32:12,520
really great indicator of what are some

00:32:10,960 --> 00:32:15,370
problems in your process if you see

00:32:12,520 --> 00:32:17,920
points drop precipitously and likewise

00:32:15,370 --> 00:32:19,420
if you see points skyrocket that can

00:32:17,920 --> 00:32:22,900
also be an indicator that you might be

00:32:19,420 --> 00:32:23,830
overestimating things does that make

00:32:22,900 --> 00:32:32,890
sense

00:32:23,830 --> 00:32:35,320
in the back so it kind of depends

00:32:32,890 --> 00:32:37,060
everybody is able allowed to write a

00:32:35,320 --> 00:32:38,140
story and it lightens it a story is

00:32:37,060 --> 00:32:39,940
really just a promise to have a

00:32:38,140 --> 00:32:42,490
conversation anybody can start a

00:32:39,940 --> 00:32:44,350
conversation so we write features as

00:32:42,490 --> 00:32:45,880
developers most features come from

00:32:44,350 --> 00:32:47,920
product that's just because product is

00:32:45,880 --> 00:32:50,350
is picking a direction and we are as

00:32:47,920 --> 00:32:53,050
developers part of that but that's

00:32:50,350 --> 00:32:56,080
that's product we lots of bugs come from

00:32:53,050 --> 00:32:57,970
developers chores are another type of

00:32:56,080 --> 00:33:00,100
story those come from often from

00:32:57,970 --> 00:33:02,440
developers but also from product if you

00:33:00,100 --> 00:33:04,300
know Yui says we want to create this new

00:33:02,440 --> 00:33:05,560
environment that might be a chore it

00:33:04,300 --> 00:33:06,910
might be a feature if we think that

00:33:05,560 --> 00:33:08,950
that's really going to move forward our

00:33:06,910 --> 00:33:10,450
progress on Cloud Foundry but it's a

00:33:08,950 --> 00:33:13,050
collaboration like I said anybody can

00:33:10,450 --> 00:33:13,050
start a conversation

00:33:25,579 --> 00:33:33,449
right so there's a couple of ways to

00:33:29,459 --> 00:33:35,909
move forward on a situation like that so

00:33:33,449 --> 00:33:38,219
something goes read take a look all

00:33:35,909 --> 00:33:40,619
right what was the commit the commit was

00:33:38,219 --> 00:33:44,819
just a few lines all right well let's go

00:33:40,619 --> 00:33:45,569
in there and let's fix it right easy

00:33:44,819 --> 00:33:48,119
enough to do

00:33:45,569 --> 00:33:50,819
verses hey there is this really large

00:33:48,119 --> 00:33:52,439
commit we're not really sure what broke

00:33:50,819 --> 00:33:55,589
it you know someone made a pull request

00:33:52,439 --> 00:33:57,119
that you know is ten commits long let's

00:33:55,589 --> 00:33:59,159
just revert the commit and get the

00:33:57,119 --> 00:34:00,989
pipeline green again and then you know

00:33:59,159 --> 00:34:02,489
throw it back in the ball back in their

00:34:00,989 --> 00:34:04,439
Court and be like hey you know we tried

00:34:02,489 --> 00:34:06,059
it out there's some issues here's all

00:34:04,439 --> 00:34:08,009
the logs that we grabbed right we tried

00:34:06,059 --> 00:34:11,429
to be helpful for their debugging as

00:34:08,009 --> 00:34:14,039
well right that really doesn't happen

00:34:11,429 --> 00:34:15,779
you know too often though and then you

00:34:14,039 --> 00:34:20,339
sometimes get the really odd commits

00:34:15,779 --> 00:34:24,029
where we were rolling the UAS

00:34:20,339 --> 00:34:26,369
in this new bumps and a migration didn't

00:34:24,029 --> 00:34:27,839
complete in time right so at that point

00:34:26,369 --> 00:34:30,960
your whole system is just kind of like

00:34:27,839 --> 00:34:33,329
borked and really requires you know some

00:34:30,960 --> 00:34:35,250
when going in there you know fixing the

00:34:33,329 --> 00:34:36,809
code up and then you know putting a

00:34:35,250 --> 00:34:40,109
commit on top of that to make sure it

00:34:36,809 --> 00:34:41,759
doesn't happen again right so there's

00:34:40,109 --> 00:34:43,200
some there's lots of stuff that can

00:34:41,759 --> 00:34:45,450
happen where we have a huge pile of

00:34:43,200 --> 00:34:47,399
commits bill goes red we're trying to

00:34:45,450 --> 00:34:50,159
fix them one of the dangers of that is

00:34:47,399 --> 00:34:54,299
when our build is red we don't want

00:34:50,159 --> 00:34:57,390
anybody else to commit to clapping so

00:34:54,299 --> 00:34:58,890
this means that services log or Gator

00:34:57,390 --> 00:35:01,049
all these different teams that are

00:34:58,890 --> 00:35:02,400
really important have commits piling up

00:35:01,049 --> 00:35:04,440
as they do work because we're not

00:35:02,400 --> 00:35:05,730
telling them to just go home and now

00:35:04,440 --> 00:35:07,019
okay so now they've got these commits

00:35:05,730 --> 00:35:08,940
piled up they've got ten chemists that

00:35:07,019 --> 00:35:10,920
are ready to go and our builds been read

00:35:08,940 --> 00:35:12,539
for a few days because we had some wacky

00:35:10,920 --> 00:35:13,890
problem with flakiness and this is an

00:35:12,539 --> 00:35:15,779
actual thing that happened where it was

00:35:13,890 --> 00:35:18,710
four days of a red build because we just

00:35:15,779 --> 00:35:21,329
had so much flakiness in our testing and

00:35:18,710 --> 00:35:24,299
we just had you know every other team at

00:35:21,329 --> 00:35:26,849
20 commits ready to go we actually ended

00:35:24,299 --> 00:35:28,980
up doing a staggered commit in to see if

00:35:26,849 --> 00:35:31,650
release where we kept the build red and

00:35:28,980 --> 00:35:34,530
we said okay services commit one at a

00:35:31,650 --> 00:35:36,480
time okay lamb do your commits okay

00:35:34,530 --> 00:35:38,910
Diego do your commits and we watched as

00:35:36,480 --> 00:35:40,350
each of those teams made it through

00:35:38,910 --> 00:35:41,610
their commits made it through every step

00:35:40,350 --> 00:35:43,800
of the build into staging and we're

00:35:41,610 --> 00:35:44,820
green then we said okay now we're back

00:35:43,800 --> 00:35:46,950
to normal again

00:35:44,820 --> 00:35:49,080
but it's a dangerous thing where if you

00:35:46,950 --> 00:35:50,940
don't decide roll back now get a Green

00:35:49,080 --> 00:35:53,730
ASAP you're gonna be dealing with not

00:35:50,940 --> 00:36:11,070
just your backed up work but other teams

00:35:53,730 --> 00:36:14,190
back network how do we handle them it's

00:36:11,070 --> 00:36:17,070
a it's part of the story the router

00:36:14,190 --> 00:36:18,240
should be able to handle this much in

00:36:17,070 --> 00:36:20,580
the in the constraint that's part of

00:36:18,240 --> 00:36:22,950
that conversation we have and we did

00:36:20,580 --> 00:36:24,270
this came up recently where we were

00:36:22,950 --> 00:36:25,770
doing performance testing against the

00:36:24,270 --> 00:36:27,990
router and it was it was a chore in this

00:36:25,770 --> 00:36:29,760
case but it was mostly just saying well

00:36:27,990 --> 00:36:32,520
actually how much does the router handle

00:36:29,760 --> 00:36:34,020
and then we discovered that a new commit

00:36:32,520 --> 00:36:35,880
to the router made it so that the router

00:36:34,020 --> 00:36:38,640
couldn't handle couldn't route as

00:36:35,880 --> 00:36:41,580
quickly as we wanted to and so we had a

00:36:38,640 --> 00:36:43,800
new feature which was okay implement

00:36:41,580 --> 00:36:45,390
this new data structure for storing

00:36:43,800 --> 00:36:46,770
routes that makes the router much faster

00:36:45,390 --> 00:36:48,630
but it's really just part of that

00:36:46,770 --> 00:36:50,220
conversation we have we want the router

00:36:48,630 --> 00:36:52,110
to be able to route a request from

00:36:50,220 --> 00:36:54,750
outside to an app that's what a story

00:36:52,110 --> 00:36:56,100
might be and as part of the conversation

00:36:54,750 --> 00:36:57,360
we have one of the bullet points in the

00:36:56,100 --> 00:36:59,910
story is the router must be able to

00:36:57,360 --> 00:37:01,740
handle and such requests in a second and

00:36:59,910 --> 00:37:03,990
that might just be a constraint and as

00:37:01,740 --> 00:37:06,930
part of the acceptance for that story

00:37:03,990 --> 00:37:08,820
product might actually test that use the

00:37:06,930 --> 00:37:12,420
potty bench and see how much can the

00:37:08,820 --> 00:37:14,280
router actually handle thanks a lot for

00:37:12,420 --> 00:37:15,970
coming if you have any more questions

00:37:14,280 --> 00:37:18,690
come on up

00:37:15,970 --> 00:37:18,690

YouTube URL: https://www.youtube.com/watch?v=FqYHDqUVp2k


