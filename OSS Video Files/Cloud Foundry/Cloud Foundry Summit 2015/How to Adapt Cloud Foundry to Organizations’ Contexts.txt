Title: How to Adapt Cloud Foundry to Organizations’ Contexts
Publication date: 2015-05-12
Playlist: Cloud Foundry Summit 2015
Description: 
	How to Adapt Cloud Foundry to Organizations’ Contexts - 07 Guillaume Berche 720p
Captions: 
	00:00:00,030 --> 00:00:04,670
hi everybody it's great to be here today

00:00:02,939 --> 00:00:06,930
thanks a lot for coming to this session

00:00:04,670 --> 00:00:08,820
it's great to be here after exchanging

00:00:06,930 --> 00:00:12,349
on the meaning list and we get there and

00:00:08,820 --> 00:00:15,450
with issues it's great to meet you guys

00:00:12,349 --> 00:00:17,910
so this talk is an introduction to a

00:00:15,450 --> 00:00:19,619
book session and proposing tomorrow and

00:00:17,910 --> 00:00:22,920
how we can add that country to

00:00:19,619 --> 00:00:24,779
organization context so let me introduce

00:00:22,920 --> 00:00:28,109
bit but myself

00:00:24,779 --> 00:00:30,960
I'm working at a range arranging is one

00:00:28,109 --> 00:00:34,410
of the largest tech operator in Europe

00:00:30,960 --> 00:00:37,920
and in Africa its present in 29 markets

00:00:34,410 --> 00:00:39,870
with 240 million subscribers and so

00:00:37,920 --> 00:00:42,870
obviously this requires lots of

00:00:39,870 --> 00:00:46,710
development of software in the thousand

00:00:42,870 --> 00:00:50,899
apps developers and herbs and soap as is

00:00:46,710 --> 00:00:53,910
relevant in this case a short disclaimer

00:00:50,899 --> 00:00:56,460
arranged the federated group so it's

00:00:53,910 --> 00:00:58,469
made of lots of different business units

00:00:56,460 --> 00:01:01,469
and entities that have large economies

00:00:58,469 --> 00:01:04,049
and I won't be speaking for all over

00:01:01,469 --> 00:01:06,750
range I'm working mainly in a small team

00:01:04,049 --> 00:01:09,960
which is in the coffin central core

00:01:06,750 --> 00:01:12,930
which is helping the teams in in

00:01:09,960 --> 00:01:14,970
subsidiaries to telepath so it's

00:01:12,930 --> 00:01:18,680
possible that you're a slightly

00:01:14,970 --> 00:01:21,420
different voice in some other entities

00:01:18,680 --> 00:01:23,700
so I've been working with a platform

00:01:21,420 --> 00:01:29,579
release few years and committing

00:01:23,700 --> 00:01:31,860
contributing to two dogs and to few pull

00:01:29,579 --> 00:01:37,979
requests and you can contact me on

00:01:31,860 --> 00:01:40,130
Twitter and at this email so adopting a

00:01:37,979 --> 00:01:43,259
pest to meet new business objective

00:01:40,130 --> 00:01:45,740
mactan requires more than providing an

00:01:43,259 --> 00:01:49,350
out-of-the-box convertor instance and

00:01:45,740 --> 00:01:51,659
the integration into the ecosystem to

00:01:49,350 --> 00:01:55,200
the organizational ecosystem and support

00:01:51,659 --> 00:01:59,850
for the transformation of the processes

00:01:55,200 --> 00:02:04,079
might be key to the catenary adoption so

00:01:59,850 --> 00:02:07,110
I'd like to do a short poll on how you

00:02:04,079 --> 00:02:09,390
you use ten rivers per to code for me

00:02:07,110 --> 00:02:13,430
how many of you are just starting to

00:02:09,390 --> 00:02:15,739
learn code for me okay me between 20

00:02:13,430 --> 00:02:19,430
and how many of you are actually using

00:02:15,739 --> 00:02:21,019
and consume it with laundry okay I want

00:02:19,430 --> 00:02:23,390
forth again how many of you are

00:02:21,019 --> 00:02:27,079
providing catenary trousers platform

00:02:23,390 --> 00:02:29,030
operators okay let here or less and how

00:02:27,079 --> 00:02:31,909
many contribute contributing that you

00:02:29,030 --> 00:02:36,469
actually took off hungry coding and

00:02:31,909 --> 00:02:38,680
vendors what caption text right so I'll

00:02:36,469 --> 00:02:40,849
start with sharing some of our

00:02:38,680 --> 00:02:45,260
organization specific requirements and

00:02:40,849 --> 00:02:48,439
then ways we have adapted profound way

00:02:45,260 --> 00:02:52,549
to in within the range and then we'll

00:02:48,439 --> 00:02:54,310
think about potential future

00:02:52,549 --> 00:02:57,230
gluten-free extensions that could me

00:02:54,310 --> 00:02:59,329
could may be able to get some of these

00:02:57,230 --> 00:03:05,629
out specific requirements easier in the

00:02:59,329 --> 00:03:10,609
futures and for this I will be using the

00:03:05,629 --> 00:03:13,129
impact mapping metallurgy so impact

00:03:10,609 --> 00:03:17,510
mapping Ted electric was introduced by a

00:03:13,129 --> 00:03:24,169
gosh quadric the idea is to when we

00:03:17,510 --> 00:03:26,479
introduce a pass is to formalize as you

00:03:24,169 --> 00:03:31,060
objectives why are we are doing why are

00:03:26,479 --> 00:03:33,620
we do sorry why are we introducing that

00:03:31,060 --> 00:03:37,579
how can we measure that this girl is

00:03:33,620 --> 00:03:39,590
rich and then who can help us reach

00:03:37,579 --> 00:03:42,829
these goals in term of actors who in the

00:03:39,590 --> 00:03:47,540
organization will help us deliver this

00:03:42,829 --> 00:03:51,379
and then we can do how what behaviors

00:03:47,540 --> 00:03:53,949
will we observe in this population that

00:03:51,379 --> 00:03:57,829
will trigger these these objectives and

00:03:53,949 --> 00:04:01,280
then finally what at the pad as a

00:03:57,829 --> 00:04:03,680
platform operator providing a pass what

00:04:01,280 --> 00:04:06,470
can I do in terms of deliverable to

00:04:03,680 --> 00:04:08,650
trigger those behaviors and to support

00:04:06,470 --> 00:04:08,650
them

00:04:16,070 --> 00:04:24,889
so I'll be sharing in back map with this

00:04:19,650 --> 00:04:29,039
color coding I'm headed on deliverables

00:04:24,889 --> 00:04:31,770
a bit more details in terms of what we

00:04:29,039 --> 00:04:34,440
already delivered what stuff we have not

00:04:31,770 --> 00:04:37,190
yet delivered but we we see some

00:04:34,440 --> 00:04:40,970
solutions around and stuff we have not

00:04:37,190 --> 00:04:43,979
solution yet which is currently blocked

00:04:40,970 --> 00:04:46,620
so as you see the map is quite cloud

00:04:43,979 --> 00:04:50,639
when we expand it so I would assume

00:04:46,620 --> 00:04:54,090
through specific elements of the map and

00:04:50,639 --> 00:04:57,270
to give you some context you will have

00:04:54,090 --> 00:05:02,550
some breadcrumbs at the top telling you

00:04:57,270 --> 00:05:04,410
where we are and if you want to it might

00:05:02,550 --> 00:05:07,199
be fast at time so if you want to take

00:05:04,410 --> 00:05:12,690
time to read it afterwards it's a it's

00:05:07,199 --> 00:05:15,300
online either at this URL it's also in a

00:05:12,690 --> 00:05:17,940
JSON format on github so you can clone

00:05:15,300 --> 00:05:20,310
it and maybe if you find it useful try

00:05:17,940 --> 00:05:23,490
to do that for your your own

00:05:20,310 --> 00:05:28,050
organization so why are we introducing

00:05:23,490 --> 00:05:30,360
your path I know context so nothing

00:05:28,050 --> 00:05:35,160
really new we want to a project to

00:05:30,360 --> 00:05:37,490
deliver faster sooner we let you read

00:05:35,160 --> 00:05:40,680
the kind of measurement that we have

00:05:37,490 --> 00:05:42,660
with a set of target that the middle G

00:05:40,680 --> 00:05:45,960
is the impact mapping is um is

00:05:42,660 --> 00:05:49,590
suggesting us we want to application to

00:05:45,960 --> 00:05:52,260
to be more able to improve the quality

00:05:49,590 --> 00:05:56,970
of service and also obviously to reduce

00:05:52,260 --> 00:06:00,570
the cost who will be helping us to do

00:05:56,970 --> 00:06:03,270
that what are the actors in your system

00:06:00,570 --> 00:06:06,090
the primary actors would be the one that

00:06:03,270 --> 00:06:10,979
would be consuming the pass so the

00:06:06,090 --> 00:06:13,949
developers and the operation teams so

00:06:10,979 --> 00:06:17,490
when we when we go on ask the developers

00:06:13,949 --> 00:06:21,030
okay how can how can you help us get

00:06:17,490 --> 00:06:22,530
those objectives so improve those

00:06:21,030 --> 00:06:25,730
measurements in terms of delivering

00:06:22,530 --> 00:06:28,770
faster sooner safer and

00:06:25,730 --> 00:06:32,520
they said do you think the pass can can

00:06:28,770 --> 00:06:37,980
help us do that they say well yeah let

00:06:32,520 --> 00:06:42,150
me let me try so can you try that on

00:06:37,980 --> 00:06:46,740
your own project I said well I'd rather

00:06:42,150 --> 00:06:50,460
test that on toys for now what do you

00:06:46,740 --> 00:06:53,250
need to test that on toys can you use

00:06:50,460 --> 00:06:57,060
the public instance well not really

00:06:53,250 --> 00:06:59,910
the cooperate rules is not allowing me

00:06:57,060 --> 00:07:03,990
to to go public for now I could just use

00:06:59,910 --> 00:07:07,410
toys with a random data but if you don't

00:07:03,990 --> 00:07:10,500
really need to to use with our real data

00:07:07,410 --> 00:07:14,250
you want to give me a private instance

00:07:10,500 --> 00:07:18,750
on pram so that's what we've starting

00:07:14,250 --> 00:07:23,310
doing so it's been really studying

00:07:18,750 --> 00:07:27,450
instance shading cuts laundry on-prem on

00:07:23,310 --> 00:07:30,420
to the two years yes that we have V

00:07:27,450 --> 00:07:32,700
cloud and OpenStack and taking into

00:07:30,420 --> 00:07:36,590
account some specificity that we have

00:07:32,700 --> 00:07:40,500
around a specific network architecture

00:07:36,590 --> 00:07:44,300
your respect to our doing traffic and to

00:07:40,500 --> 00:07:47,850
network isolation so it's been really

00:07:44,300 --> 00:07:49,530
working well and both was really helping

00:07:47,850 --> 00:07:52,410
in term of donation for that so we have

00:07:49,530 --> 00:07:57,830
great feedback around that and we

00:07:52,410 --> 00:08:01,590
connected to the UA forgetting identity

00:07:57,830 --> 00:08:04,950
we still have some work to be done run

00:08:01,590 --> 00:08:08,030
backups on we awake then we started

00:08:04,950 --> 00:08:12,500
providing access to the common services

00:08:08,030 --> 00:08:17,220
SMTP or doing Internet access through

00:08:12,500 --> 00:08:21,030
custom service brokers similarly for

00:08:17,220 --> 00:08:24,800
Zilla logs so we've been using Splunk to

00:08:21,030 --> 00:08:27,510
centralize the rocks and that's still

00:08:24,800 --> 00:08:31,680
lots of activities around that to make

00:08:27,510 --> 00:08:35,130
it more multi-tenant too much to make it

00:08:31,680 --> 00:08:37,839
easier to search and find the logs and

00:08:35,130 --> 00:08:45,040
the logs options really

00:08:37,839 --> 00:08:49,449
something great will be looking at hello

00:08:45,040 --> 00:08:51,040
so instance is there training great and

00:08:49,449 --> 00:08:54,480
so the first feedback we have from

00:08:51,040 --> 00:08:57,309
developers testing tools so CMS

00:08:54,480 --> 00:08:59,230
development tours is at yes the rich

00:08:57,309 --> 00:09:03,160
objective is giving much faster to to

00:08:59,230 --> 00:09:05,470
provision and so now we get back to them

00:09:03,160 --> 00:09:08,680
are you now ready to develop your own

00:09:05,470 --> 00:09:10,870
app and crud foundry and they say well

00:09:08,680 --> 00:09:14,079
only when the operation seems really

00:09:10,870 --> 00:09:14,829
will agree and will trust it so what

00:09:14,079 --> 00:09:19,480
does it take

00:09:14,829 --> 00:09:20,620
well the operations teams tell us would

00:09:19,480 --> 00:09:24,459
like to have the same level of quality

00:09:20,620 --> 00:09:26,800
that we have on traditional shell

00:09:24,459 --> 00:09:31,120
hosting so they asked us for multi AC

00:09:26,800 --> 00:09:35,110
support and they asked us for multi data

00:09:31,120 --> 00:09:37,649
center materials as well so yeah it's

00:09:35,110 --> 00:09:39,459
not yet ready but ok can you steal

00:09:37,649 --> 00:09:41,199
developers can you still start

00:09:39,459 --> 00:09:42,339
developing your app even though it's not

00:09:41,199 --> 00:09:46,769
ready we're working on that

00:09:42,339 --> 00:09:49,569
so yeah they stopped doing that so oh

00:09:46,769 --> 00:09:52,029
basics curtain-raiser app is doing rate

00:09:49,569 --> 00:09:55,569
or prediction ready pass is maturing

00:09:52,029 --> 00:09:57,250
still some work and so when the

00:09:55,569 --> 00:10:00,899
developers start developing their apps

00:09:57,250 --> 00:10:04,569
on on cloud foundry there are two ways

00:10:00,899 --> 00:10:07,329
the most logical one which looks really

00:10:04,569 --> 00:10:10,629
promising is adopting the cognitive

00:10:07,329 --> 00:10:12,670
architecture and luckily the industry

00:10:10,629 --> 00:10:16,209
and matatini and particular has been

00:10:12,670 --> 00:10:18,490
doing great job at documenting that and

00:10:16,209 --> 00:10:21,429
so the spring boot support we have a

00:10:18,490 --> 00:10:23,050
Java we are mainly Java development the

00:10:21,429 --> 00:10:26,379
spring boot support with prediction

00:10:23,050 --> 00:10:28,089
really support support for micro service

00:10:26,379 --> 00:10:32,079
architecture seems really promising so

00:10:28,089 --> 00:10:37,509
we're working actively on that and yeah

00:10:32,079 --> 00:10:40,420
this looks great for innovators and but

00:10:37,509 --> 00:10:42,579
also we have lots of legacy apps that

00:10:40,420 --> 00:10:45,550
will take time to to transform and to

00:10:42,579 --> 00:10:48,100
adapt so we are thinking ok can we help

00:10:45,550 --> 00:10:50,910
the others as well can we help the

00:10:48,100 --> 00:10:56,020
existing app to confirm to 12 facto apps

00:10:50,910 --> 00:11:02,290
so this we've started with apps that

00:10:56,020 --> 00:11:05,170
would have some state association state

00:11:02,290 --> 00:11:09,790
so starting some work around providing

00:11:05,170 --> 00:11:12,490
sessions its store then as well the apps

00:11:09,790 --> 00:11:15,100
that are using the persistent file

00:11:12,490 --> 00:11:17,470
system not really for intensive right

00:11:15,100 --> 00:11:19,870
but maybe for configurations that are

00:11:17,470 --> 00:11:23,200
saved on disk and that needs to be

00:11:19,870 --> 00:11:27,280
present across restart so we're working

00:11:23,200 --> 00:11:30,240
with racks ES and either with native

00:11:27,280 --> 00:11:38,800
api's or with the file system extraction

00:11:30,240 --> 00:11:40,960
using Hughes as well they exchange files

00:11:38,800 --> 00:11:44,470
with other apps so working to provide

00:11:40,960 --> 00:11:47,710
gateways so that this section is easier

00:11:44,470 --> 00:11:55,420
and again and also the single sign-on

00:11:47,710 --> 00:11:56,950
SSO so then yeah we have few apps that

00:11:55,420 --> 00:11:59,620
are being developed like that

00:11:56,950 --> 00:12:03,640
and the developers very happy so we get

00:11:59,620 --> 00:12:10,320
back to the herbs and and we ask them

00:12:03,640 --> 00:12:10,320
are you ready now to operate that and so

00:12:10,350 --> 00:12:16,860
again they have two choice

00:12:12,310 --> 00:12:21,990
either they adopt the kind of cognitive

00:12:16,860 --> 00:12:26,920
practices which is greatly described and

00:12:21,990 --> 00:12:30,310
so this this translate into versioning

00:12:26,920 --> 00:12:34,030
the app config in gate pulling the a

00:12:30,310 --> 00:12:37,090
binaries from repository manually or in

00:12:34,030 --> 00:12:39,250
squid prior to pushing and automating

00:12:37,090 --> 00:12:42,490
development work flows from CLI

00:12:39,250 --> 00:12:45,460
individual steps and the app would be

00:12:42,490 --> 00:12:49,440
providing some production features for

00:12:45,460 --> 00:12:52,480
troubleshooting for dynamic config

00:12:49,440 --> 00:12:55,960
really promising this so we are actually

00:12:52,480 --> 00:12:58,720
actively working on that but as well we

00:12:55,960 --> 00:13:02,710
we see some limitation and obstacles in

00:12:58,720 --> 00:13:04,080
all case which is the organization is is

00:13:02,710 --> 00:13:09,000
slow to change maybe

00:13:04,080 --> 00:13:12,600
slower than software in our case so we

00:13:09,000 --> 00:13:15,830
still are lacking some dedicated ups in

00:13:12,600 --> 00:13:18,390
many cases the project versus product

00:13:15,830 --> 00:13:22,080
transition is not yet done so we see a

00:13:18,390 --> 00:13:24,600
lot of time project and not long term

00:13:22,080 --> 00:13:27,330
product teams even in some case we have

00:13:24,600 --> 00:13:29,820
Auto software for number of cases which

00:13:27,330 --> 00:13:33,060
is made which makes it hard to have

00:13:29,820 --> 00:13:36,870
business capability teams which is

00:13:33,060 --> 00:13:39,960
mainstream practice and another aspect

00:13:36,870 --> 00:13:42,570
is the transition from centralized

00:13:39,960 --> 00:13:44,360
governance to decentralize autonomy the

00:13:42,570 --> 00:13:47,910
fact that business capability my really

00:13:44,360 --> 00:13:51,870
have the autonomy to to do things rights

00:13:47,910 --> 00:13:55,020
takes time also the leg leg legacy apps

00:13:51,870 --> 00:13:57,720
takes time to transform technically and

00:13:55,020 --> 00:14:00,390
sometimes we see gaps in culture between

00:13:57,720 --> 00:14:03,540
developers and ops and in tools being

00:14:00,390 --> 00:14:07,910
used so we were also asking how can we

00:14:03,540 --> 00:14:11,640
help the vast majority and in all case

00:14:07,910 --> 00:14:15,990
it looks like getting from centralized

00:14:11,640 --> 00:14:18,150
governance to dysentry autonomy would be

00:14:15,990 --> 00:14:20,490
easier for the organization to grant it

00:14:18,150 --> 00:14:22,620
if the restaurants parentsí if the

00:14:20,490 --> 00:14:25,740
organization can look at what the two

00:14:22,620 --> 00:14:27,510
teams are doing and trust it trust what

00:14:25,740 --> 00:14:32,790
they do especially for the security

00:14:27,510 --> 00:14:36,660
aspect but not only and also to provide

00:14:32,790 --> 00:14:41,010
a common baseline in terms of operations

00:14:36,660 --> 00:14:43,650
so that there is less specificity among

00:14:41,010 --> 00:14:45,510
apps so we can have non dedicated apps

00:14:43,650 --> 00:14:49,920
that would operate the apps you know in

00:14:45,510 --> 00:14:52,530
a similar way so for this we've we are

00:14:49,920 --> 00:14:55,700
prototyping with an add-on on top of

00:14:52,530 --> 00:15:00,930
ternary which is called El Paso and

00:14:55,700 --> 00:15:03,030
which so you pass user can either use

00:15:00,930 --> 00:15:05,100
cloud foundry directly or they can go to

00:15:03,030 --> 00:15:07,320
El Paso through its UI and in the pies

00:15:05,100 --> 00:15:10,050
and Al pass will drive cloud foundry and

00:15:07,320 --> 00:15:12,660
the other services that are not yet

00:15:10,050 --> 00:15:16,470
available in cloud foundry and so in

00:15:12,660 --> 00:15:17,620
this in El Paso we we are enriching the

00:15:16,470 --> 00:15:19,600
data model of

00:15:17,620 --> 00:15:22,000
catenary with some stuff that are

00:15:19,600 --> 00:15:25,360
specific to to own it

00:15:22,000 --> 00:15:27,279
so mostly some submitted ATA's that are

00:15:25,360 --> 00:15:30,250
necessary to integrate into the

00:15:27,279 --> 00:15:33,760
organization process so who have notion

00:15:30,250 --> 00:15:36,850
of of application which we could have

00:15:33,760 --> 00:15:40,830
called that product to a mind to avoid

00:15:36,850 --> 00:15:43,420
the the conflict naming with CF apps

00:15:40,830 --> 00:15:45,790
that one it's called application for now

00:15:43,420 --> 00:15:47,940
we'll set of users and for each

00:15:45,790 --> 00:15:55,060
application there is a version list of

00:15:47,940 --> 00:15:56,980
releases and so the releases get a set

00:15:55,060 --> 00:15:59,830
of proceeding service and data services

00:15:56,980 --> 00:16:02,110
and so it's kind of a template and

00:15:59,830 --> 00:16:05,200
password provided templates of of

00:16:02,110 --> 00:16:09,339
applications with the associated

00:16:05,200 --> 00:16:12,640
metadata image and so this translate

00:16:09,339 --> 00:16:16,660
into the CF model through a mapping

00:16:12,640 --> 00:16:21,250
mechanism which is pluggable and which

00:16:16,660 --> 00:16:23,740
allows us to to add some logic and and

00:16:21,250 --> 00:16:27,339
to use to leverage the metadata that has

00:16:23,740 --> 00:16:29,860
been inserted by the team and so this

00:16:27,339 --> 00:16:34,120
provide visibility and this allows it

00:16:29,860 --> 00:16:40,150
allows us to to add some some value and

00:16:34,120 --> 00:16:43,600
some added additional security so for

00:16:40,150 --> 00:16:47,230
the standardized operations we still

00:16:43,600 --> 00:16:50,380
have some work to be done but for

00:16:47,230 --> 00:16:53,529
example on the predictable respect and

00:16:50,380 --> 00:16:56,080
passo is capturing what the application

00:16:53,529 --> 00:17:00,720
is supporting in terms of environment

00:16:56,080 --> 00:17:03,010
variables and so this is version in the

00:17:00,720 --> 00:17:07,240
architecture application architectures

00:17:03,010 --> 00:17:09,579
and so it makes it explicit and so the

00:17:07,240 --> 00:17:11,829
intimacy is required intimacy between

00:17:09,579 --> 00:17:15,400
developers and novice gets a bit reduced

00:17:11,829 --> 00:17:23,890
with this explicit configure similarity

00:17:15,400 --> 00:17:26,230
binaries region a trust and actually El

00:17:23,890 --> 00:17:29,200
Paso will fetch the binaries from the

00:17:26,230 --> 00:17:31,570
maven repository and will do the

00:17:29,200 --> 00:17:34,570
deployment so we have less

00:17:31,570 --> 00:17:37,120
reliance on scripts or develop

00:17:34,570 --> 00:17:43,090
operations to be pulling the the

00:17:37,120 --> 00:17:45,070
artifacts passwords doing that which

00:17:43,090 --> 00:17:50,950
left a lot of work doing to be done on

00:17:45,070 --> 00:17:56,049
on logs to make it easier to to get logs

00:17:50,950 --> 00:18:00,279
to change log level dynamically similar

00:17:56,049 --> 00:18:02,649
metrics it's a lot of work to be done to

00:18:00,279 --> 00:18:05,669
be able to to get the app metrics

00:18:02,649 --> 00:18:13,120
through gmx the container low level

00:18:05,669 --> 00:18:17,830
metrics as well which may be too small

00:18:13,120 --> 00:18:20,889
for you to read so yeah

00:18:17,830 --> 00:18:24,940
forgetting the normalized the baseline

00:18:20,889 --> 00:18:28,000
operational cross across apps other

00:18:24,940 --> 00:18:31,149
steps we are challenged with is the

00:18:28,000 --> 00:18:33,899
Upstate getting the the teams are

00:18:31,149 --> 00:18:36,370
requiring automated backups and restores

00:18:33,899 --> 00:18:38,799
or snapshot across the release

00:18:36,370 --> 00:18:41,830
deployment so that they can revert when

00:18:38,799 --> 00:18:42,700
if ever that automated database schema

00:18:41,830 --> 00:18:45,730
great is failing

00:18:42,700 --> 00:18:47,860
across apps so lots of stuff to be done

00:18:45,730 --> 00:18:49,929
around the Upstate on the

00:18:47,860 --> 00:18:52,960
troubleshooting as well to easy

00:18:49,929 --> 00:18:56,409
troubleshooting without the app

00:18:52,960 --> 00:18:59,409
providing the the features I can spring

00:18:56,409 --> 00:19:01,659
good a crater would like to find a ways

00:18:59,409 --> 00:19:03,580
that Java applications can be

00:19:01,659 --> 00:19:12,370
troubleshoot similar

00:19:03,580 --> 00:19:14,529
similarly okay so that was for the herbs

00:19:12,370 --> 00:19:18,009
another stuff we've been trying to do is

00:19:14,529 --> 00:19:20,909
to involve the existing shared

00:19:18,009 --> 00:19:25,299
infrastructure expert in the discussion

00:19:20,909 --> 00:19:29,200
and so that they can they can help us

00:19:25,299 --> 00:19:31,659
better ritual homes so when we look at

00:19:29,200 --> 00:19:33,549
the other actors as you have stage

00:19:31,659 --> 00:19:35,559
actors so the one that are not directly

00:19:33,549 --> 00:19:39,820
using the pass but are influencing its

00:19:35,559 --> 00:19:43,000
adoption in all case we have also the

00:19:39,820 --> 00:19:46,289
transversal architects and so we are

00:19:43,000 --> 00:19:49,149
starting asking them ok can you really

00:19:46,289 --> 00:19:51,129
what Cloud Foundry is doing and

00:19:49,149 --> 00:19:53,649
challenge it they can see current best

00:19:51,129 --> 00:19:55,929
practice and the recommendation that you

00:19:53,649 --> 00:19:57,789
have a crowd through zeroes and so this

00:19:55,929 --> 00:20:01,230
is led to some interesting interesting

00:19:57,789 --> 00:20:05,169
discussions such as for example on the

00:20:01,230 --> 00:20:07,090
PHP side one requirements to have a

00:20:05,169 --> 00:20:10,960
different user between staging and

00:20:07,090 --> 00:20:13,419
running so that when to avoid and to

00:20:10,960 --> 00:20:16,230
prevent code injection on the file

00:20:13,419 --> 00:20:20,559
system at runtime so I've different

00:20:16,230 --> 00:20:22,889
group permission between some files so

00:20:20,559 --> 00:20:25,779
that if the application is vulnerable

00:20:22,889 --> 00:20:26,350
code won't be insert injected on the

00:20:25,779 --> 00:20:30,429
file system

00:20:26,350 --> 00:20:32,139
so relies on on username space so yeah

00:20:30,429 --> 00:20:36,730
this is this Jesus led to some

00:20:32,139 --> 00:20:41,289
interesting discussion and then some

00:20:36,730 --> 00:20:43,869
link rest back to to the path and to the

00:20:41,289 --> 00:20:47,409
quaternary community we're also working

00:20:43,869 --> 00:20:50,799
with transversal architect also as a way

00:20:47,409 --> 00:20:53,799
to reduce the kind of resistance to

00:20:50,799 --> 00:20:57,429
adoption so to get their feedback and to

00:20:53,799 --> 00:20:59,350
have them capture the best practice and

00:20:57,429 --> 00:21:03,940
what the they have acquired through the

00:20:59,350 --> 00:21:06,789
years to a so that then they can will

00:21:03,940 --> 00:21:09,009
project to us and to use as well Cloud

00:21:06,789 --> 00:21:10,989
Foundry as a way for them to evaluate

00:21:09,009 --> 00:21:13,749
upcoming technology as part of their

00:21:10,989 --> 00:21:18,820
work so she has the birth docker release

00:21:13,749 --> 00:21:23,190
seems really a great way to do that that

00:21:18,820 --> 00:21:26,999
it looks really promising for that okay

00:21:23,190 --> 00:21:29,070
so how can we allowed to a fun way to

00:21:26,999 --> 00:21:33,220
organization specific requests

00:21:29,070 --> 00:21:34,809
requirements so first off is we use the

00:21:33,220 --> 00:21:38,440
existing code from the extension and

00:21:34,809 --> 00:21:42,340
customization mechanism so you've seen

00:21:38,440 --> 00:21:46,629
some of this during the impact map

00:21:42,340 --> 00:21:50,529
screenshots there's a lot of stuff we

00:21:46,629 --> 00:21:53,619
have not yet explored but yeah this is

00:21:50,529 --> 00:21:59,239
just exact customization mechanism give

00:21:53,619 --> 00:22:03,379
us great feet great possibility

00:21:59,239 --> 00:22:06,649
and we have a lot more to to explore on

00:22:03,379 --> 00:22:09,499
our side another possibility is to for

00:22:06,649 --> 00:22:11,929
culinary extend and extend it so to

00:22:09,499 --> 00:22:15,759
insert some additional components to

00:22:11,929 --> 00:22:19,039
replace some components so there's been

00:22:15,759 --> 00:22:21,799
some great examples and blogs new Reuter

00:22:19,039 --> 00:22:25,369
from LDS Church is one example some

00:22:21,799 --> 00:22:27,469
custom das we have chosen not to use

00:22:25,369 --> 00:22:29,570
this not to follow this route so far

00:22:27,469 --> 00:22:33,940
because of limited resource that we have

00:22:29,570 --> 00:22:38,059
and as well because of the time it takes

00:22:33,940 --> 00:22:44,229
to adapt to call the Rascals to Ruby and

00:22:38,059 --> 00:22:44,229
to Galang and so one other alternative

00:22:45,399 --> 00:22:50,570
to adapting at foundry to organization

00:22:48,739 --> 00:22:53,089
specific requirements is that was

00:22:50,570 --> 00:22:57,559
presenting is adding an add-on on top of

00:22:53,089 --> 00:23:01,929
carpentry to capture additional metadata

00:22:57,559 --> 00:23:01,929
and to fit better and in the processes

00:23:04,419 --> 00:23:09,769
so we can think a bit a little bit about

00:23:07,700 --> 00:23:12,919
what potential future of a Tundra

00:23:09,769 --> 00:23:14,929
extension could help us to remove some

00:23:12,919 --> 00:23:18,169
of the specifics that we have done or at

00:23:14,929 --> 00:23:22,669
least wait to be the host Moodle

00:23:18,169 --> 00:23:27,320
integration and so one thing we were

00:23:22,669 --> 00:23:29,659
thinking else is the ability to have

00:23:27,320 --> 00:23:34,159
metadata attached to the Cloud Foundry

00:23:29,659 --> 00:23:36,859
entities a bit similar to AWS allows us

00:23:34,159 --> 00:23:39,679
to put some tags on instances and

00:23:36,859 --> 00:23:44,539
services and then query those entities

00:23:39,679 --> 00:23:49,580
and to get charged with breakdown of the

00:23:44,539 --> 00:23:53,089
Stags so this would would really help to

00:23:49,580 --> 00:23:54,979
be maybe in the form of tax tax to be

00:23:53,089 --> 00:23:57,919
attached to application to space of two

00:23:54,979 --> 00:23:59,889
services to tell whether the application

00:23:57,919 --> 00:24:03,379
is production of development

00:23:59,889 --> 00:24:08,409
what kind of absent it is related to the

00:24:03,379 --> 00:24:10,700
ad code name that would feel than the

00:24:08,409 --> 00:24:11,970
the configuration management did

00:24:10,700 --> 00:24:15,110
database

00:24:11,970 --> 00:24:19,760
CMDB on the upside that would fill the

00:24:15,110 --> 00:24:19,760
as well the change management processes

00:24:19,790 --> 00:24:29,100
and another aspect we were thinking

00:24:24,030 --> 00:24:33,240
about is to insert intercept some of the

00:24:29,100 --> 00:24:36,300
CC API verbs so maybe through the

00:24:33,240 --> 00:24:38,180
upcoming route or service or maybe some

00:24:36,300 --> 00:24:41,840
kind of dragging on the cloud controller

00:24:38,180 --> 00:24:47,510
in order to have some more fine-grain

00:24:41,840 --> 00:24:52,560
access control to be able to more finely

00:24:47,510 --> 00:24:55,440
tune which entities that that we need to

00:24:52,560 --> 00:25:00,810
control or potentially to do

00:24:55,440 --> 00:25:04,560
transformations on the verbs such as may

00:25:00,810 --> 00:25:08,450
be pulling dynamically the binaries I do

00:25:04,560 --> 00:25:12,410
a safe brush by putting the maven up

00:25:08,450 --> 00:25:15,210
maven artifact coordinates and

00:25:12,410 --> 00:25:18,690
dynamically the center scepter will pull

00:25:15,210 --> 00:25:24,270
the binaries from the repo and and get

00:25:18,690 --> 00:25:26,700
it and maybe extensions and new verbs so

00:25:24,270 --> 00:25:29,700
I'll be talking a bit more tomorrow

00:25:26,700 --> 00:25:32,850
about El Paso open-source that I was

00:25:29,700 --> 00:25:34,680
presenting before we open sourcing that

00:25:32,850 --> 00:25:39,240
and I'll be detailing more with a

00:25:34,680 --> 00:25:44,630
screenshot use case more details what

00:25:39,240 --> 00:25:47,400
referring to achieve so the idea of this

00:25:44,630 --> 00:25:49,590
introduction was to to see if we could

00:25:47,400 --> 00:25:51,960
share with organization specific

00:25:49,590 --> 00:25:55,530
requirements the way we we have adapted

00:25:51,960 --> 00:25:58,560
cut cut hundred to two thousand and what

00:25:55,530 --> 00:26:01,820
challenges are remaining so I invited

00:25:58,560 --> 00:26:06,330
I'm inviting you to meet tomorrow at

00:26:01,820 --> 00:26:07,940
10:40 a.m. for our related buff and for

00:26:06,330 --> 00:26:13,769
this thank you very much

00:26:07,940 --> 00:26:13,769

YouTube URL: https://www.youtube.com/watch?v=MPjrZuac3pM


