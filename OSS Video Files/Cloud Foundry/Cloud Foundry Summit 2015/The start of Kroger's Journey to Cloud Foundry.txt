Title: The start of Kroger's Journey to Cloud Foundry
Publication date: 2015-05-13
Playlist: Cloud Foundry Summit 2015
Description: 
	The start of Kroger's Journey to Cloud Foundry - 03 James Masters, Ted Tollefson 720p
Captions: 
	00:00:00,030 --> 00:00:04,020
all right I think we're gonna go ahead

00:00:01,439 --> 00:00:06,000
and get started here so thanks everybody

00:00:04,020 --> 00:00:09,480
for attending our talk

00:00:06,000 --> 00:00:12,809
I'm James masters I've been with Kroger

00:00:09,480 --> 00:00:16,289
for about thirteen years eight of those

00:00:12,809 --> 00:00:21,740
in an ops platform role and five of

00:00:16,289 --> 00:00:24,720
those in security Ted I'm gonna talk

00:00:21,740 --> 00:00:26,970
yeah thank you I didn't expect the black

00:00:24,720 --> 00:00:29,670
on that actually so I've been doing

00:00:26,970 --> 00:00:30,960
software development for 20 years I've

00:00:29,670 --> 00:00:33,960
been doing a lot of cloud stuff the last

00:00:30,960 --> 00:00:38,730
four years and I've been with Kroger for

00:00:33,960 --> 00:00:42,420
a little over five years so who is

00:00:38,730 --> 00:00:45,960
Kroger it's it's a very large grocery

00:00:42,420 --> 00:00:48,180
store chain basically we have a jewelry

00:00:45,960 --> 00:00:50,219
business and other things as well but

00:00:48,180 --> 00:00:53,550
we're coming up on four hundred thousand

00:00:50,219 --> 00:00:55,710
associates and I thought another

00:00:53,550 --> 00:01:01,530
interesting fact was over 200 million

00:00:55,710 --> 00:01:04,229
meals donated by Kroger and you may say

00:01:01,530 --> 00:01:06,000
well how have I never heard of Kroger we

00:01:04,229 --> 00:01:07,439
go by a lot of different banners so

00:01:06,000 --> 00:01:09,180
here's a whole bunch of them in

00:01:07,439 --> 00:01:13,080
California might you might know Kroger

00:01:09,180 --> 00:01:14,939
as Ralph's so I'm gonna take 12 minutes

00:01:13,080 --> 00:01:17,970
and kind of lay out the background of

00:01:14,939 --> 00:01:19,710
our journey to Cloud Foundry I think

00:01:17,970 --> 00:01:21,060
that the place that makes sense to kind

00:01:19,710 --> 00:01:23,729
of draw that line the beginning is just

00:01:21,060 --> 00:01:25,619
our virtualization initiative so it's

00:01:23,729 --> 00:01:27,270
not as exciting as it used to be I mean

00:01:25,619 --> 00:01:29,220
it's just something we do now and by

00:01:27,270 --> 00:01:30,720
virtualization first strategy it's just

00:01:29,220 --> 00:01:33,299
the de-facto way that we do things but I

00:01:30,720 --> 00:01:35,430
think our scale is worth noting you know

00:01:33,299 --> 00:01:38,520
we have over 40,000 VMs in our

00:01:35,430 --> 00:01:40,799
environment we're 90 upwards of 90

00:01:38,520 --> 00:01:43,890
percent virtualized so a pretty large

00:01:40,799 --> 00:01:47,549
environment with we brought in lab

00:01:43,890 --> 00:01:49,470
manager in around 2010 and that was kind

00:01:47,549 --> 00:01:51,509
of the first foray we took into into

00:01:49,470 --> 00:01:53,460
exposing some of that infrastructure via

00:01:51,509 --> 00:01:55,259
a self-service portal so that our

00:01:53,460 --> 00:01:57,540
developers and business partners and

00:01:55,259 --> 00:01:59,520
things could go in and request

00:01:57,540 --> 00:02:01,250
infrastructure themselves and get a VM

00:01:59,520 --> 00:02:04,409
and then you know customize it and

00:02:01,250 --> 00:02:07,350
things that that was great that was well

00:02:04,409 --> 00:02:08,610
received by our by our company and but

00:02:07,350 --> 00:02:10,860
that had challenges with it right I mean

00:02:08,610 --> 00:02:12,390
you know as a as a dev you had to go in

00:02:10,860 --> 00:02:13,380
and still kind of configure all your

00:02:12,390 --> 00:02:15,420
middleware and config

00:02:13,380 --> 00:02:17,040
you're you know low your database load

00:02:15,420 --> 00:02:20,520
the right version of whatever you know

00:02:17,040 --> 00:02:22,740
whatever Java you're using we're I think

00:02:20,520 --> 00:02:25,560
we kind of upped our game was with the

00:02:22,740 --> 00:02:29,190
vCloud director and vCenter Orchestrator

00:02:25,560 --> 00:02:31,890
which we rolled out in 2013 and there we

00:02:29,190 --> 00:02:35,280
started trying to steer people away from

00:02:31,890 --> 00:02:36,810
creating special flowers right instead

00:02:35,280 --> 00:02:38,960
of customizing something and getting it

00:02:36,810 --> 00:02:43,350
ready and then holding on to it forever

00:02:38,960 --> 00:02:45,810
we try to encourage teams to help us

00:02:43,350 --> 00:02:47,910
write some code in Orchestrator to you

00:02:45,810 --> 00:02:49,230
know get your VM to the point that you

00:02:47,910 --> 00:02:50,730
needed it to be and then put you know

00:02:49,230 --> 00:02:52,170
put that in source control as well so

00:02:50,730 --> 00:02:54,690
that it could be managed and maintained

00:02:52,170 --> 00:02:57,570
by by more people than just a couple

00:02:54,690 --> 00:02:59,700
people involved in doing initially and

00:02:57,570 --> 00:03:01,860
that that really took off and then

00:02:59,700 --> 00:03:04,260
people started saying okay we see what

00:03:01,860 --> 00:03:05,460
you're doing in test Dev that's great we

00:03:04,260 --> 00:03:09,240
want to start doing that in production

00:03:05,460 --> 00:03:11,670
right and we realized quickly that kind

00:03:09,240 --> 00:03:13,080
of kicking that ball down the road as

00:03:11,670 --> 00:03:18,390
though as it was we would be able to

00:03:13,080 --> 00:03:20,160
deploy things quickly but the hard part

00:03:18,390 --> 00:03:22,110
is not really deploying systems right

00:03:20,160 --> 00:03:24,570
the hard part is is managing them the

00:03:22,110 --> 00:03:25,620
going for them going forward plumbing

00:03:24,570 --> 00:03:27,600
those up to the rest of your

00:03:25,620 --> 00:03:31,020
infrastructure greatly by virus

00:03:27,600 --> 00:03:33,390
definitions are up today and and then D

00:03:31,020 --> 00:03:34,440
provisioning those systems right so you

00:03:33,390 --> 00:03:36,240
know getting them on lines with one

00:03:34,440 --> 00:03:39,780
thing but but managing that lifecycle is

00:03:36,240 --> 00:03:42,630
another that's kind of the point where

00:03:39,780 --> 00:03:44,370
Ted and I so Devon ops kind of started

00:03:42,630 --> 00:03:47,520
working more together and in our teams

00:03:44,370 --> 00:03:49,020
as well to you know Ted said you're

00:03:47,520 --> 00:03:50,250
doing all this orchestration you have

00:03:49,020 --> 00:03:53,400
this capability that expose

00:03:50,250 --> 00:03:54,450
infrastructure this way he brought to

00:03:53,400 --> 00:03:57,600
the table he said you know we've been

00:03:54,450 --> 00:03:59,970
writing automation code as well so what

00:03:57,600 --> 00:04:02,370
happens that we marry the two feed in a

00:03:59,970 --> 00:04:06,330
few parameters into an Orchestrator

00:04:02,370 --> 00:04:08,130
process and out shoots a running

00:04:06,330 --> 00:04:11,160
environment with an actual application

00:04:08,130 --> 00:04:13,140
deployed so kind of our first attempt at

00:04:11,160 --> 00:04:17,250
a CF push if you will

00:04:13,140 --> 00:04:18,630
internally developed we kind of

00:04:17,250 --> 00:04:19,620
presented that to our business partners

00:04:18,630 --> 00:04:22,710
and everybody and everybody excited

00:04:19,620 --> 00:04:25,200
about that right Ted's boss director of

00:04:22,710 --> 00:04:26,790
architecture kind of said that's that's

00:04:25,200 --> 00:04:31,020
awesome what you guys have done

00:04:26,790 --> 00:04:32,700
stop we're like what you know great wait

00:04:31,020 --> 00:04:34,380
I'm not he said there are other people

00:04:32,700 --> 00:04:36,120
working on this problem there are other

00:04:34,380 --> 00:04:37,560
people contributing to doing this we

00:04:36,120 --> 00:04:40,110
want you solving other problems and

00:04:37,560 --> 00:04:42,150
doing you know other things so that's

00:04:40,110 --> 00:04:46,470
kind of how we got into Cloud Foundry in

00:04:42,150 --> 00:04:47,910
about 2014 our experience with that has

00:04:46,470 --> 00:04:50,760
been very positive and it's allowed us

00:04:47,910 --> 00:04:51,240
to focus on other problems within our

00:04:50,760 --> 00:04:52,740
company

00:04:51,240 --> 00:04:54,270
so not only orchestrating the

00:04:52,740 --> 00:04:56,700
provisioning of systems and middleware

00:04:54,270 --> 00:04:59,670
and and databases and things like that

00:04:56,700 --> 00:05:01,830
all that's still important but to focus

00:04:59,670 --> 00:05:04,650
on you know even orchestrating an entire

00:05:01,830 --> 00:05:06,990
project initiation all right orchestrate

00:05:04,650 --> 00:05:09,210
source control repo creation and things

00:05:06,990 --> 00:05:12,810
like that and that's kind of what Ted's

00:05:09,210 --> 00:05:15,530
gonna get into here a minute we call it

00:05:12,810 --> 00:05:17,970
our Kroger internal cloud initiative and

00:05:15,530 --> 00:05:21,120
so Ted's gonna talk about that here for

00:05:17,970 --> 00:05:23,790
a minute all right so a little context

00:05:21,120 --> 00:05:28,050
on that why did we do this from a

00:05:23,790 --> 00:05:31,050
business perspective we really wanted to

00:05:28,050 --> 00:05:32,880
consolidate platforms Kroger's over 125

00:05:31,050 --> 00:05:36,060
years old we've collected a few

00:05:32,880 --> 00:05:38,100
different system setups over time so

00:05:36,060 --> 00:05:41,130
we're looking for a way to standardize

00:05:38,100 --> 00:05:43,470
that we also need elastic scaling our

00:05:41,130 --> 00:05:45,540
business has announced that they intend

00:05:43,470 --> 00:05:48,030
to grow by two and a half times the

00:05:45,540 --> 00:05:49,710
current size so from a hundred billion

00:05:48,030 --> 00:05:53,070
to two hundred fifty billion that's

00:05:49,710 --> 00:05:55,350
that's a lot of scale and at present we

00:05:53,070 --> 00:05:57,930
don't scale very gracefully so we were

00:05:55,350 --> 00:05:59,750
looking for that and of course from the

00:05:57,930 --> 00:06:02,820
DevOps perspective we really wanted to

00:05:59,750 --> 00:06:05,730
adopt a lot of automation and quality in

00:06:02,820 --> 00:06:07,050
our processes so what were some of the

00:06:05,730 --> 00:06:08,820
requirements for that we want to make

00:06:07,050 --> 00:06:12,150
sure we had a system that would support

00:06:08,820 --> 00:06:14,820
12 factor as a way to write cloud native

00:06:12,150 --> 00:06:16,320
applications and we also wanted to

00:06:14,820 --> 00:06:19,080
embrace the infrastructure as code

00:06:16,320 --> 00:06:21,060
mantra hopefully these things sound very

00:06:19,080 --> 00:06:23,310
familiar to you we wanted to scale

00:06:21,060 --> 00:06:26,040
horizontally so specifically in scaling

00:06:23,310 --> 00:06:28,020
we had found that vertical scaling tops

00:06:26,040 --> 00:06:30,360
out and that's awkward

00:06:28,020 --> 00:06:33,780
so horizontal scaling so much better

00:06:30,360 --> 00:06:35,490
approach and we also had the requirement

00:06:33,780 --> 00:06:37,380
that we we need to be able to run

00:06:35,490 --> 00:06:38,110
internally but we also want to be able

00:06:37,380 --> 00:06:40,570
to move

00:06:38,110 --> 00:06:45,250
to a public cloud or run a hybrid of the

00:06:40,570 --> 00:06:47,170
two alright so this is now what I'll

00:06:45,250 --> 00:06:49,360
call the novel approach I think that

00:06:47,170 --> 00:06:51,760
we're taking we've said it's great that

00:06:49,360 --> 00:06:53,800
we can provision out environments with

00:06:51,760 --> 00:06:55,450
Cod foundry a very rapidly but what does

00:06:53,800 --> 00:06:57,550
it take to get a new project off the

00:06:55,450 --> 00:06:59,260
ground when we say okay we've green

00:06:57,550 --> 00:07:02,200
lighted a brand-new project what does a

00:06:59,260 --> 00:07:04,720
team need well they need some code to

00:07:02,200 --> 00:07:07,300
start with right what's their base setup

00:07:04,720 --> 00:07:09,310
of code they need ALM tooling we really

00:07:07,300 --> 00:07:11,110
want them to use things like source code

00:07:09,310 --> 00:07:13,390
control hopefully there's agreement on

00:07:11,110 --> 00:07:15,970
that one and issue tracking and

00:07:13,390 --> 00:07:18,070
continuous integration and all that good

00:07:15,970 --> 00:07:21,310
stuff and then they also really need

00:07:18,070 --> 00:07:23,410
environments we use an agile methodology

00:07:21,310 --> 00:07:25,270
where we demo every two weeks basically

00:07:23,410 --> 00:07:26,920
to our business so in order to hit that

00:07:25,270 --> 00:07:29,380
first two week mark we really need

00:07:26,920 --> 00:07:31,630
environments and in the past it took

00:07:29,380 --> 00:07:34,240
significantly longer to get environments

00:07:31,630 --> 00:07:36,820
but we wanted to make all this very very

00:07:34,240 --> 00:07:41,170
easy for our teams to to have and get

00:07:36,820 --> 00:07:44,080
going with so we borrowed or forked the

00:07:41,170 --> 00:07:47,590
initializer project from spring how many

00:07:44,080 --> 00:07:50,410
people have seen initializer or start

00:07:47,590 --> 00:07:51,970
that spring that I oh okay

00:07:50,410 --> 00:07:54,880
I'd encourage you to go check it out

00:07:51,970 --> 00:07:57,220
it's you just go to start spring Daioh

00:07:54,880 --> 00:07:59,800
and basically what it does is you type

00:07:57,220 --> 00:08:01,180
in a few parameters and you get a code

00:07:59,800 --> 00:08:04,030
out of it right it gives you a base set

00:08:01,180 --> 00:08:05,410
of code and it's it's really clever the

00:08:04,030 --> 00:08:09,130
way it's configured it's a great start

00:08:05,410 --> 00:08:11,140
to the the project so with that it

00:08:09,130 --> 00:08:13,600
required very little work on our part

00:08:11,140 --> 00:08:15,520
besides just forking the their-their

00:08:13,600 --> 00:08:18,850
code to get the code to spit out that we

00:08:15,520 --> 00:08:19,660
needed we have modified that a bit to

00:08:18,850 --> 00:08:21,460
make it

00:08:19,660 --> 00:08:24,040
kroger friendly so we know we have

00:08:21,460 --> 00:08:25,780
certain logging requirements and things

00:08:24,040 --> 00:08:27,490
like that standard things across all our

00:08:25,780 --> 00:08:30,900
projects that we want to want teams to

00:08:27,490 --> 00:08:33,460
have then next up we started doing

00:08:30,900 --> 00:08:36,160
enhancements to the initializer to be

00:08:33,460 --> 00:08:38,979
able to script out the creation of

00:08:36,160 --> 00:08:41,470
source code control so when the script

00:08:38,979 --> 00:08:44,770
runs it creates a stash repo we use

00:08:41,470 --> 00:08:46,150
stash for our get repository and it goes

00:08:44,770 --> 00:08:48,610
ahead and checks in the code that was

00:08:46,150 --> 00:08:50,410
just created into the stash repo it

00:08:48,610 --> 00:08:51,610
creates our continuous integration

00:08:50,410 --> 00:08:53,170
builds and

00:08:51,610 --> 00:08:55,000
sets them up with the best practices

00:08:53,170 --> 00:08:57,610
right from the start we know we want our

00:08:55,000 --> 00:08:59,470
teams to do continuous builds we want

00:08:57,610 --> 00:09:01,480
them to have sonar builds to check code

00:08:59,470 --> 00:09:03,100
quality all that stuff we want them to

00:09:01,480 --> 00:09:05,170
continuously deploy out to the dev

00:09:03,100 --> 00:09:06,760
environment so and then have a

00:09:05,170 --> 00:09:09,940
progression where it goes from dev to

00:09:06,760 --> 00:09:12,490
test a stage to prod we found that going

00:09:09,940 --> 00:09:14,440
straight to prod not a best practice so

00:09:12,490 --> 00:09:16,660
if we want them to do all these things

00:09:14,440 --> 00:09:18,070
we really need to it makes it much

00:09:16,660 --> 00:09:20,650
easier for them if we just put that all

00:09:18,070 --> 00:09:23,500
out there from the start so we set up

00:09:20,650 --> 00:09:26,250
team city that way and then JIRA for

00:09:23,500 --> 00:09:28,990
issue tracking and a couple other things

00:09:26,250 --> 00:09:32,080
and then we go ahead and we make a call

00:09:28,990 --> 00:09:34,990
to cloud foundry and say ok for a given

00:09:32,080 --> 00:09:38,800
blueprint give us a database so my

00:09:34,990 --> 00:09:41,080
sequel give us messaging rabbit and then

00:09:38,800 --> 00:09:42,670
go ahead and take that new artifact that

00:09:41,080 --> 00:09:45,700
was built on team city and push it out

00:09:42,670 --> 00:09:48,580
to cloud foundry and have it running out

00:09:45,700 --> 00:09:51,160
there and so the idea is that someone

00:09:48,580 --> 00:09:52,780
said to the project team hey we've got

00:09:51,160 --> 00:09:55,060
this new project we want you to start

00:09:52,780 --> 00:09:57,100
and ten minutes later they've got code

00:09:55,060 --> 00:09:59,320
alm tooling and their environments and

00:09:57,100 --> 00:10:02,530
they're ready to go right so what does

00:09:59,320 --> 00:10:06,640
that actually look like so here you can

00:10:02,530 --> 00:10:08,050
see when we forked Spring initializer we

00:10:06,640 --> 00:10:09,850
did some pretty fancy coding we put

00:10:08,050 --> 00:10:14,620
Kroeger in front of spring initializer

00:10:09,850 --> 00:10:17,050
up there pretty proud of that so I did

00:10:14,620 --> 00:10:20,020
cut out some of the fields that we have

00:10:17,050 --> 00:10:21,490
up there just to fit it on the slide but

00:10:20,020 --> 00:10:23,740
you can see the team just basically

00:10:21,490 --> 00:10:25,120
fills in their project name and then on

00:10:23,740 --> 00:10:27,370
the right side that's where we've added

00:10:25,120 --> 00:10:28,930
in the heywhat middleware do you need do

00:10:27,370 --> 00:10:31,510
you need messaging for this solution or

00:10:28,930 --> 00:10:33,280
database they just check boxes and then

00:10:31,510 --> 00:10:35,560
which ALM tools do you need and they

00:10:33,280 --> 00:10:38,620
check off those and then when they click

00:10:35,560 --> 00:10:40,090
the generate project button it goes it

00:10:38,620 --> 00:10:42,310
runs and does all those things that I

00:10:40,090 --> 00:10:43,780
was talking about and then they they get

00:10:42,310 --> 00:10:45,850
their links to everything right so it

00:10:43,780 --> 00:10:48,490
says hey here's where your your source

00:10:45,850 --> 00:10:50,280
codes at to check out where your

00:10:48,490 --> 00:10:53,170
continuous integration builds are set up

00:10:50,280 --> 00:10:54,910
issue tracking and even your link to

00:10:53,170 --> 00:10:57,300
Cloud Foundry of hey where can I go find

00:10:54,910 --> 00:10:59,710
my a brand new apps that are out there

00:10:57,300 --> 00:11:00,970
so and then what does that look like on

00:10:59,710 --> 00:11:01,390
Cloud Foundry that this might look

00:11:00,970 --> 00:11:03,760
familiar

00:11:01,390 --> 00:11:05,020
it's just hey you've got your project

00:11:03,760 --> 00:11:07,450
out there running

00:11:05,020 --> 00:11:09,250
in a sequel database in the rabbit and

00:11:07,450 --> 00:11:10,600
because of the magic Cloud Foundry it's

00:11:09,250 --> 00:11:12,370
already got the security credentials

00:11:10,600 --> 00:11:17,010
provisioned inject it into the

00:11:12,370 --> 00:11:17,010
application and it's all ready to run so

00:11:18,450 --> 00:11:25,690
so what do we have to do to get to this

00:11:21,760 --> 00:11:28,420
point one of the things was defining

00:11:25,690 --> 00:11:29,320
reference architectures if you can spin

00:11:28,420 --> 00:11:30,910
all this stuff up

00:11:29,320 --> 00:11:32,590
but nobody's gonna support it oh wait

00:11:30,910 --> 00:11:34,090
I'm jammin add so reference

00:11:32,590 --> 00:11:36,420
architectures we said let's start with

00:11:34,090 --> 00:11:39,220
just a basic one app server database

00:11:36,420 --> 00:11:41,740
messaging that's a kind of a typical one

00:11:39,220 --> 00:11:43,540
that we use but we have plans to create

00:11:41,740 --> 00:11:45,640
additional blueprints or reference

00:11:43,540 --> 00:11:47,710
architectures to handle scale-out right

00:11:45,640 --> 00:11:49,480
so if we give the team rabbit and

00:11:47,710 --> 00:11:50,920
Cassandra and then the ability to push

00:11:49,480 --> 00:11:53,140
out to Cloud Foundry now suddenly we

00:11:50,920 --> 00:11:56,350
have a very scalable app that was

00:11:53,140 --> 00:11:58,480
automatically provisioned for them next

00:11:56,350 --> 00:12:00,210
up we had to get operations by and so if

00:11:58,480 --> 00:12:02,650
we spin up all this great stuff and

00:12:00,210 --> 00:12:05,770
nobody's willing to support it it's

00:12:02,650 --> 00:12:07,840
gonna be a very short flight so we also

00:12:05,770 --> 00:12:10,120
needed to get our developers to embrace

00:12:07,840 --> 00:12:11,980
12 factor coding principles this is a

00:12:10,120 --> 00:12:14,470
general Cloud Foundry thing right if

00:12:11,980 --> 00:12:16,270
they are gonna write and assume that

00:12:14,470 --> 00:12:17,410
they can you know put things on the file

00:12:16,270 --> 00:12:19,090
system and they're gonna stay there

00:12:17,410 --> 00:12:22,240
they're gonna have problems right so

00:12:19,090 --> 00:12:24,240
that's a journey where we're providing

00:12:22,240 --> 00:12:26,560
education to our developers to get their

00:12:24,240 --> 00:12:29,560
centralized logging this one's also

00:12:26,560 --> 00:12:31,600
really key we were excited to see larger

00:12:29,560 --> 00:12:34,690
Gator and a way to get logs out of Cloud

00:12:31,600 --> 00:12:36,790
Foundry but I pretty quickly figured out

00:12:34,690 --> 00:12:39,490
that if someone calls and said they had

00:12:36,790 --> 00:12:41,530
a problem an hour ago and I go to longer

00:12:39,490 --> 00:12:43,810
Gator I can tail the logs and see or I

00:12:41,530 --> 00:12:45,730
can see last hundred messages but an

00:12:43,810 --> 00:12:47,410
hour ago is long gone right so

00:12:45,730 --> 00:12:49,870
centralized logging was a really key

00:12:47,410 --> 00:12:52,390
thing to put in place to have a place to

00:12:49,870 --> 00:12:54,910
dump all those logs and then an

00:12:52,390 --> 00:12:57,280
authentication pattern so we had

00:12:54,910 --> 00:12:59,920
standard security practices for user

00:12:57,280 --> 00:13:03,130
authorization to applications Cloud

00:12:59,920 --> 00:13:04,600
Foundry is a new challenge you don't

00:13:03,130 --> 00:13:06,670
know your IP addresses or the servers

00:13:04,600 --> 00:13:08,770
that are out there so we had to work

00:13:06,670 --> 00:13:12,870
through you know kind of how to move to

00:13:08,770 --> 00:13:12,870
a token based model to deal with that

00:13:13,840 --> 00:13:19,690
so what's our experience we actually had

00:13:16,540 --> 00:13:22,200
some of these ideas earlier on so when

00:13:19,690 --> 00:13:25,210
James was talking about our VCO

00:13:22,200 --> 00:13:27,040
excursion we knew we wanted to do some

00:13:25,210 --> 00:13:29,950
of this stuff VCO was a really great

00:13:27,040 --> 00:13:31,930
tool to achieve some of that but then we

00:13:29,950 --> 00:13:34,080
found out pretty quickly that turns out

00:13:31,930 --> 00:13:38,470
is complex to build cloud foundry

00:13:34,080 --> 00:13:40,000
so we started on this journey as soon as

00:13:38,470 --> 00:13:42,790
we brought Cloud Foundry in-house

00:13:40,000 --> 00:13:44,560
suddenly it became much much easier like

00:13:42,790 --> 00:13:46,450
the the provisioning script I don't know

00:13:44,560 --> 00:13:49,180
how many lines of code was that like 18

00:13:46,450 --> 00:13:50,860
yeah 18 lines of code to get a database

00:13:49,180 --> 00:13:52,930
messaging middleware and an app server

00:13:50,860 --> 00:13:54,040
so we knew it would be simpler but it

00:13:52,930 --> 00:13:58,110
was still kind of amazing to actually

00:13:54,040 --> 00:14:00,490
see that and then we've also found that

00:13:58,110 --> 00:14:02,860
in our cloud foundry experience that the

00:14:00,490 --> 00:14:04,360
the CLI has been a great help

00:14:02,860 --> 00:14:06,190
we were able to take that and hook that

00:14:04,360 --> 00:14:08,380
into our continuous integration server

00:14:06,190 --> 00:14:11,560
very easily and that gave us the ability

00:14:08,380 --> 00:14:13,960
to do Bluegreen deployments it did take

00:14:11,560 --> 00:14:16,870
a little bit of work to get to that

00:14:13,960 --> 00:14:18,790
point but once we got there our business

00:14:16,870 --> 00:14:20,680
was loving it suddenly we could push

00:14:18,790 --> 00:14:22,960
updates the stuff and they didn't even

00:14:20,680 --> 00:14:25,000
see the updates happening it was zero

00:14:22,960 --> 00:14:26,680
downtime deploy so they really liked

00:14:25,000 --> 00:14:28,570
that and in some of our situations

00:14:26,680 --> 00:14:30,640
that's really critical where we can't

00:14:28,570 --> 00:14:34,000
really take the systems offline and

00:14:30,640 --> 00:14:35,860
sometimes they would wait a long long

00:14:34,000 --> 00:14:37,300
time to get an enhancement months and

00:14:35,860 --> 00:14:40,230
months before they'd actually say yes

00:14:37,300 --> 00:14:42,910
we're willing to take the enhancement so

00:14:40,230 --> 00:14:45,550
we can see that in the future with

00:14:42,910 --> 00:14:46,780
having a automated process to provision

00:14:45,550 --> 00:14:47,950
out the team and having a standard

00:14:46,780 --> 00:14:49,810
structure there are their whole

00:14:47,950 --> 00:14:53,080
deployments and all that that we intend

00:14:49,810 --> 00:14:55,120
to give teams blue/green deployment

00:14:53,080 --> 00:14:57,160
capability right from the start with the

00:14:55,120 --> 00:14:58,630
provisioning yeah we've gone into this

00:14:57,160 --> 00:15:01,209
with one of our most business critical

00:14:58,630 --> 00:15:03,160
applications - as a POC so we're kind of

00:15:01,209 --> 00:15:04,959
starting with the lowest common

00:15:03,160 --> 00:15:08,589
denominator making sure this is robust

00:15:04,959 --> 00:15:10,180
and available platform yeah yeah and

00:15:08,589 --> 00:15:11,950
that that's the group that's

00:15:10,180 --> 00:15:15,310
particularly pleased with the zero

00:15:11,950 --> 00:15:17,110
downtime deploy so another lesson that

00:15:15,310 --> 00:15:20,620
we've learned and doing this is that the

00:15:17,110 --> 00:15:24,760
delete all script is really an important

00:15:20,620 --> 00:15:27,220
component so I will say given that it's

00:15:24,760 --> 00:15:27,640
a very critical system always a little

00:15:27,220 --> 00:15:29,110
nervous

00:15:27,640 --> 00:15:31,990
the first time I hit that delete all

00:15:29,110 --> 00:15:33,820
script even though you know first we ran

00:15:31,990 --> 00:15:36,520
it and lower environments it's still you

00:15:33,820 --> 00:15:38,410
know to think of the idea environments

00:15:36,520 --> 00:15:39,790
is transient you is still there there's

00:15:38,410 --> 00:15:41,050
still kind of like pets to me I know I

00:15:39,790 --> 00:15:43,270
know I'm not supposed to keep them as

00:15:41,050 --> 00:15:44,620
pets but that first time running the

00:15:43,270 --> 00:15:47,320
delete all was a little nerve-wracking

00:15:44,620 --> 00:15:48,760
but that told me the first good lesson

00:15:47,320 --> 00:15:50,470
of the Dooley doll script is that I

00:15:48,760 --> 00:15:52,690
thought we had everything infrastructure

00:15:50,470 --> 00:15:54,580
is code while I was wrong right so we

00:15:52,690 --> 00:15:57,010
tried to bring up the environment again

00:15:54,580 --> 00:15:59,320
and I was missing pieces so that script

00:15:57,010 --> 00:16:01,060
taught me a very valuable lesson and

00:15:59,320 --> 00:16:04,270
then as it turns out the problem we were

00:16:01,060 --> 00:16:06,190
having was a problem of migrating from

00:16:04,270 --> 00:16:07,780
one version to the next right is there

00:16:06,190 --> 00:16:09,190
any value to the business and solving

00:16:07,780 --> 00:16:11,380
that problem of just getting to the new

00:16:09,190 --> 00:16:13,060
version no so destroy it all with the

00:16:11,380 --> 00:16:14,890
delete all bring up the nice clean

00:16:13,060 --> 00:16:17,320
infrastructure as code script your

00:16:14,890 --> 00:16:19,240
environments provisioned and and you've

00:16:17,320 --> 00:16:21,820
saved all that time and I think

00:16:19,240 --> 00:16:23,740
currently to do five micro services it's

00:16:21,820 --> 00:16:26,020
taking like four minutes to provision

00:16:23,740 --> 00:16:28,300
everything out for us so it's it's not

00:16:26,020 --> 00:16:31,150
even worth thinking about could it be an

00:16:28,300 --> 00:16:32,950
issue with this so and and then also if

00:16:31,150 --> 00:16:34,690
people know that you're packing that

00:16:32,950 --> 00:16:36,700
delete all script they make sure that

00:16:34,690 --> 00:16:38,680
everything goes into the infrastructure

00:16:36,700 --> 00:16:41,080
is code right because otherwise it's

00:16:38,680 --> 00:16:42,970
gone on the next run of it yeah it's not

00:16:41,080 --> 00:16:45,640
some of our VCO VCD stuff I talked about

00:16:42,970 --> 00:16:47,680
before well well not a lot of it went

00:16:45,640 --> 00:16:49,360
all the way to production I think it did

00:16:47,680 --> 00:16:51,640
a lot to at least start getting that

00:16:49,360 --> 00:16:53,650
mindset into people's mind that you know

00:16:51,640 --> 00:16:55,690
don't don't create again special pets

00:16:53,650 --> 00:16:59,470
that you're gonna care for over years in

00:16:55,690 --> 00:17:01,150
our private cloud yeah and so part of

00:16:59,470 --> 00:17:03,010
the delete all script in the blue/green

00:17:01,150 --> 00:17:05,440
process to get there we found that we

00:17:03,010 --> 00:17:07,209
had to script out our creation of user

00:17:05,440 --> 00:17:08,620
provided services as well so we really

00:17:07,209 --> 00:17:10,630
tried to capture everything in source

00:17:08,620 --> 00:17:12,490
code control and script at all

00:17:10,630 --> 00:17:14,140
which was a little bit of extra work at

00:17:12,490 --> 00:17:19,510
the front side but boy it saves a lot of

00:17:14,140 --> 00:17:21,130
time on the backside alright so what are

00:17:19,510 --> 00:17:23,079
the the benefits that we're seeing well

00:17:21,130 --> 00:17:25,839
we have this philosophy of make it easy

00:17:23,079 --> 00:17:27,339
to do the right thing and so with this

00:17:25,839 --> 00:17:29,980
whole process of hey I start up a

00:17:27,339 --> 00:17:32,920
project and it's got the all the pieces

00:17:29,980 --> 00:17:35,230
that I need to run my project it becomes

00:17:32,920 --> 00:17:37,930
almost like an executable SDLC or a

00:17:35,230 --> 00:17:39,850
software development lifecycle and so it

00:17:37,930 --> 00:17:41,110
puts the teams on the right path from

00:17:39,850 --> 00:17:43,360
the very start

00:17:41,110 --> 00:17:46,389
and we found that in this process teams

00:17:43,360 --> 00:17:47,769
tend to follow that process when it's so

00:17:46,389 --> 00:17:50,110
easy to do

00:17:47,769 --> 00:17:52,210
why go make trouble right they just they

00:17:50,110 --> 00:17:53,559
go use it use it and they focus on the

00:17:52,210 --> 00:17:55,600
business functionality which is really

00:17:53,559 --> 00:17:58,419
where they should put their focus and

00:17:55,600 --> 00:18:02,049
then we've seen the additional benefits

00:17:58,419 --> 00:18:03,279
where if we know that we want to push

00:18:02,049 --> 00:18:05,350
them in the direction of doing automated

00:18:03,279 --> 00:18:07,119
functional testing that becomes so

00:18:05,350 --> 00:18:09,210
critical with testing out your newly

00:18:07,119 --> 00:18:11,230
prevision environments that if we

00:18:09,210 --> 00:18:12,730
provision them out their code and all

00:18:11,230 --> 00:18:14,259
their stuff and we give them a

00:18:12,730 --> 00:18:16,239
functional test harness right from the

00:18:14,259 --> 00:18:17,950
start and we've got the builds on the

00:18:16,239 --> 00:18:19,570
continuous integration server that are

00:18:17,950 --> 00:18:22,749
running the the functional tests against

00:18:19,570 --> 00:18:24,820
an environment then it's a lot more

00:18:22,749 --> 00:18:28,239
likely that they adopt a functional

00:18:24,820 --> 00:18:30,669
testing right so and I fully expect to

00:18:28,239 --> 00:18:33,789
that we'll realize more benefits as we

00:18:30,669 --> 00:18:35,409
go with this because we had done

00:18:33,789 --> 00:18:37,960
something similar on the code side long

00:18:35,409 --> 00:18:39,879
ago it was very similar to spring boot

00:18:37,960 --> 00:18:43,929
and that it was an opinionated framework

00:18:39,879 --> 00:18:47,019
stack that we gave our developers and we

00:18:43,929 --> 00:18:48,460
found that we were using that for a

00:18:47,019 --> 00:18:50,409
while and then we had a new employee

00:18:48,460 --> 00:18:52,359
came in and he said hey how come you

00:18:50,409 --> 00:18:55,570
guys aren't running sonar right we're

00:18:52,359 --> 00:18:58,149
like no good reason and so in the span

00:18:55,570 --> 00:18:59,789
of two weeks he had migrated all of our

00:18:58,149 --> 00:19:02,350
projects so that they were now reporting

00:18:59,789 --> 00:19:04,299
their results and we're getting trending

00:19:02,350 --> 00:19:06,039
on code coverage and sonar and that was

00:19:04,299 --> 00:19:08,799
all due to the fact that we we had a

00:19:06,039 --> 00:19:10,720
very common setup across of our projects

00:19:08,799 --> 00:19:13,450
and since we are now going to have a

00:19:10,720 --> 00:19:15,399
common set up across our code ALM and

00:19:13,450 --> 00:19:16,840
environments I'm expecting that there

00:19:15,399 --> 00:19:20,470
are benefits we haven't even seen yet

00:19:16,840 --> 00:19:21,759
that will come across so continuous

00:19:20,470 --> 00:19:24,609
delivery so that's another one that

00:19:21,759 --> 00:19:27,340
we're working on we're not not really

00:19:24,609 --> 00:19:29,409
there yet for the most part or maybe

00:19:27,340 --> 00:19:34,059
some small small pockets have achieved

00:19:29,409 --> 00:19:35,859
it so far but we can see that we can all

00:19:34,059 --> 00:19:38,169
work on that problem together when we go

00:19:35,859 --> 00:19:39,489
to solve how our deployments go one team

00:19:38,169 --> 00:19:40,779
can pick that up from another team

00:19:39,489 --> 00:19:43,359
because we're using common way to

00:19:40,779 --> 00:19:46,960
approach it and then infrastructure is

00:19:43,359 --> 00:19:51,700
code when our process runs the the

00:19:46,960 --> 00:19:52,659
initializer plus process we're taking it

00:19:51,700 --> 00:19:54,429
and not only provisioning out the

00:19:52,659 --> 00:19:56,110
environments but we capture the

00:19:54,429 --> 00:19:58,749
the scripting that was used to do that

00:19:56,110 --> 00:20:00,669
and we put that into the team source

00:19:58,749 --> 00:20:03,850
code control so if the team needs like a

00:20:00,669 --> 00:20:05,409
UAE environment you know I don't know

00:20:03,850 --> 00:20:06,820
how many people run into that problem

00:20:05,409 --> 00:20:08,289
where you're getting close to the

00:20:06,820 --> 00:20:10,659
release date and now suddenly you need

00:20:08,289 --> 00:20:12,549
environments for UAT and performance

00:20:10,659 --> 00:20:14,019
testing and security audits and all that

00:20:12,549 --> 00:20:16,240
stuff and suddenly there's environment

00:20:14,019 --> 00:20:17,470
contention well if we've got this just

00:20:16,240 --> 00:20:18,970
as a script you can spin up the

00:20:17,470 --> 00:20:20,409
environments you need for that temporary

00:20:18,970 --> 00:20:23,080
time and then tear them down after

00:20:20,409 --> 00:20:24,700
you're done so it really undoes that

00:20:23,080 --> 00:20:29,649
bottleneck and it gets people into the

00:20:24,700 --> 00:20:32,980
mantra of infrastructures code alright

00:20:29,649 --> 00:20:36,159
so benefits for managers much much

00:20:32,980 --> 00:20:38,080
faster project provisioning so I think

00:20:36,159 --> 00:20:40,419
one of the key things here is that we

00:20:38,080 --> 00:20:42,369
can start to try out concepts when it

00:20:40,419 --> 00:20:44,769
takes months to stand up hardware and

00:20:42,369 --> 00:20:46,749
get it going you you limit down the

00:20:44,769 --> 00:20:48,820
number of concepts that you're going to

00:20:46,749 --> 00:20:51,279
try out because of that if you can spin

00:20:48,820 --> 00:20:54,190
this up in 10 minutes and let a j'l team

00:20:51,279 --> 00:20:56,499
go at it for a couple sprints then it's

00:20:54,190 --> 00:20:58,330
it's much much easier to give that a

00:20:56,499 --> 00:20:59,919
shot and try out some ideas and then

00:20:58,330 --> 00:21:01,480
when it doesn't pan out it's also easier

00:20:59,919 --> 00:21:04,149
to reclaim those resources and put them

00:21:01,480 --> 00:21:07,629
back in the pool and keep going higher

00:21:04,149 --> 00:21:09,639
consistency so when we get started with

00:21:07,629 --> 00:21:11,350
projects it's much more known how much

00:21:09,639 --> 00:21:12,879
time it's gonna take to get going and

00:21:11,350 --> 00:21:14,440
then also since there's consistency

00:21:12,879 --> 00:21:15,970
across the projects I can move

00:21:14,440 --> 00:21:17,529
developers around and they're very

00:21:15,970 --> 00:21:21,460
comfortable with the environment because

00:21:17,529 --> 00:21:24,369
it's consistent and it's our path to

00:21:21,460 --> 00:21:25,779
consolidate platforms if we've been

00:21:24,369 --> 00:21:28,240
growing all these special snowflake

00:21:25,779 --> 00:21:30,429
platforms like crazy how do we get to a

00:21:28,240 --> 00:21:32,169
more common platform well if we've got

00:21:30,429 --> 00:21:33,789
just a drop-down list from our

00:21:32,169 --> 00:21:35,769
initializer that says hey you know you

00:21:33,789 --> 00:21:37,840
need just a small-scale web app or do

00:21:35,769 --> 00:21:40,330
you need a scale out web app or just a

00:21:37,840 --> 00:21:43,230
couple blueprints basically then we're

00:21:40,330 --> 00:21:45,279
gonna see much less proliferation of

00:21:43,230 --> 00:21:46,779
environments or at least that's my hope

00:21:45,279 --> 00:21:49,230
we're at the start of this journey so

00:21:46,779 --> 00:21:52,330
we'll see how that plays out and

00:21:49,230 --> 00:21:53,889
auditable you can see basically who's

00:21:52,330 --> 00:21:57,070
starting up projects who's provisioning

00:21:53,889 --> 00:21:58,899
out resources and all that stuff so it

00:21:57,070 --> 00:22:01,289
gives you a little more control on the

00:21:58,899 --> 00:22:01,289
projects

00:22:01,429 --> 00:22:10,110
how we doing on time good Neal seven

00:22:07,470 --> 00:22:27,419
minutes okay great so question said Oh

00:22:10,110 --> 00:22:32,580
n-no thank you for listening thanks well

00:22:27,419 --> 00:22:34,769
I'm a dev I like that's all free we we

00:22:32,580 --> 00:22:36,690
don't really handle that well right now

00:22:34,769 --> 00:22:38,549
we have a little bit of a show back

00:22:36,690 --> 00:22:40,740
model so at least we can get people an

00:22:38,549 --> 00:22:45,659
idea about what things cost on a per Ram

00:22:40,740 --> 00:22:47,519
utilization basis but more than that I

00:22:45,659 --> 00:22:49,259
mean within like B cloud for example we

00:22:47,519 --> 00:22:51,840
know V app owners so we send out a

00:22:49,259 --> 00:22:54,179
report every period to them to say hey

00:22:51,840 --> 00:22:55,950
you're consuming in X Y & Z and we

00:22:54,179 --> 00:22:57,570
actually just started adding if we were

00:22:55,950 --> 00:22:59,820
to actually charge you for that here's

00:22:57,570 --> 00:23:02,009
how much it would be but we're not

00:22:59,820 --> 00:23:02,730
actually uh we're not following through

00:23:02,009 --> 00:23:04,230
on that yet

00:23:02,730 --> 00:23:05,789
isn't he great that's how you do DevOps

00:23:04,230 --> 00:23:10,190
right the ops give it away for free yeah

00:23:05,789 --> 00:23:10,190
devs happy right yeah we're still yeah

00:23:29,059 --> 00:23:36,840
so it was about 2007 that we started

00:23:34,230 --> 00:23:40,860
doing a mavin spring based standard

00:23:36,840 --> 00:23:43,770
architecture and it was the Wild West

00:23:40,860 --> 00:23:45,059
back then and I think people really

00:23:43,770 --> 00:23:46,980
liked the fact that they could start to

00:23:45,059 --> 00:23:49,169
focus on business functionality so to

00:23:46,980 --> 00:23:51,809
get the developers to adopt that there

00:23:49,169 --> 00:23:55,080
wasn't actually much resistance on that

00:23:51,809 --> 00:23:56,520
side and and now since they've gone on

00:23:55,080 --> 00:23:58,530
that journey and it's been a good

00:23:56,520 --> 00:24:00,630
journey we're finding that adoption of

00:23:58,530 --> 00:24:02,400
this we're actually kind of having to

00:24:00,630 --> 00:24:03,210
hold people back yeah at this point

00:24:02,400 --> 00:24:06,780
they're there

00:24:03,210 --> 00:24:09,210
the devs are very keen to get this end

00:24:06,780 --> 00:24:11,039
the project managers you know and all

00:24:09,210 --> 00:24:13,230
that and we've made them so keen because

00:24:11,039 --> 00:24:15,299
they've been beaten down so regularly

00:24:13,230 --> 00:24:17,039
over the years that yeah yeah well and

00:24:15,299 --> 00:24:19,650
actually so I shouldn't say it's all

00:24:17,039 --> 00:24:22,559
grins right from organizational change

00:24:19,650 --> 00:24:25,080
management standpoint this is a much

00:24:22,559 --> 00:24:28,049
bigger shift for operations now we've

00:24:25,080 --> 00:24:30,600
seen some of our friends and operations

00:24:28,049 --> 00:24:32,159
Arnie get it that they move away from

00:24:30,600 --> 00:24:33,990
mundane work and they start doing more

00:24:32,159 --> 00:24:36,299
engineering work at the at the script

00:24:33,990 --> 00:24:38,340
level and the configuration environment

00:24:36,299 --> 00:24:40,380
so that side of the ops house is

00:24:38,340 --> 00:24:42,000
actually excited about it too

00:24:40,380 --> 00:24:43,860
but there's another side that that's a

00:24:42,000 --> 00:24:46,590
little cautious with respect to so much

00:24:43,860 --> 00:24:54,240
change so was there another question out

00:24:46,590 --> 00:24:56,929
there isn't yeah currently that is a

00:24:54,240 --> 00:24:59,970
pure VMware stack underneath so vSphere

00:24:56,929 --> 00:25:02,280
VCD VCO and then actually on the front

00:24:59,970 --> 00:25:04,980
end simple portal for some of that stuff

00:25:02,280 --> 00:25:07,020
is VMware service manager so we are

00:25:04,980 --> 00:25:10,110
looking at like vio we're looking at

00:25:07,020 --> 00:25:11,880
OpenStack as well we have played around

00:25:10,110 --> 00:25:13,260
with provisioning to other hypervisors

00:25:11,880 --> 00:25:15,650
as part of that to see how that works

00:25:13,260 --> 00:25:18,270
but but what you saw today is all

00:25:15,650 --> 00:25:21,350
vSphere based at least from the

00:25:18,270 --> 00:25:21,350
infrastructure side yeah

00:25:24,010 --> 00:25:34,580
hahahaha so basically it's just using

00:25:29,480 --> 00:25:37,279
the the CFC Li to script that out so we

00:25:34,580 --> 00:25:39,980
know like on a given app project which

00:25:37,279 --> 00:25:42,649
micro services we deploy out there and

00:25:39,980 --> 00:25:46,639
so a lot of it is just like CF delete

00:25:42,649 --> 00:25:48,769
app use the minus R option otherwise you

00:25:46,639 --> 00:25:52,190
can leave routes out there which can

00:25:48,769 --> 00:25:53,870
create a bit of a mess but and then as I

00:25:52,190 --> 00:25:55,580
mentioned we have some user provided

00:25:53,870 --> 00:25:58,460
services and things like that so we

00:25:55,580 --> 00:25:59,840
clean those up as well but that that's

00:25:58,460 --> 00:26:02,889
really all there is to it so that the

00:25:59,840 --> 00:26:05,360
delete script is actually very small and

00:26:02,889 --> 00:26:08,269
creating it I think it's the mentality

00:26:05,360 --> 00:26:10,220
that Atia brings is the real magic and

00:26:08,269 --> 00:26:12,590
that's maybe not specifically to that

00:26:10,220 --> 00:26:14,090
question but but on some of those those

00:26:12,590 --> 00:26:15,950
blueprint deployments we talked about

00:26:14,090 --> 00:26:17,419
earlier through VCO and V cloud you know

00:26:15,950 --> 00:26:20,000
those we right out of the gate those

00:26:17,419 --> 00:26:21,320
things blow up in seven days so it you

00:26:20,000 --> 00:26:23,360
know you could communicate that people

00:26:21,320 --> 00:26:24,649
using it hey make sure it's in source

00:26:23,360 --> 00:26:25,970
control or whatever got that thing to

00:26:24,649 --> 00:26:29,179
that state because it's we're not

00:26:25,970 --> 00:26:31,760
holding on to it forever yeah yeah that

00:26:29,179 --> 00:26:34,279
was a great one that James had suggested

00:26:31,760 --> 00:26:36,590
when we got people in the mindset of its

00:26:34,279 --> 00:26:38,330
transient right from the start then I

00:26:36,590 --> 00:26:40,039
can imagine later on it would been

00:26:38,330 --> 00:26:43,419
tougher to introduce yeah once you get

00:26:40,039 --> 00:26:43,419
used to it then it's fine

00:26:53,590 --> 00:27:01,279
so I've upgraded office manager in

00:26:56,240 --> 00:27:02,389
elastic runtime twice in in place we

00:27:01,279 --> 00:27:04,700
were just talking about this earlier

00:27:02,389 --> 00:27:07,220
walking around outside when we take this

00:27:04,700 --> 00:27:09,529
beyond we take this to a war production

00:27:07,220 --> 00:27:11,240
rollout we're still in POC phase I mean

00:27:09,529 --> 00:27:13,429
the balance with we will have at least

00:27:11,240 --> 00:27:15,620
at least two foundations running and we

00:27:13,429 --> 00:27:18,320
want to get you know people in the

00:27:15,620 --> 00:27:20,470
mindset of keeping both foundational

00:27:18,320 --> 00:27:22,070
apps deployed to both foundations

00:27:20,470 --> 00:27:24,049
synchronously so not least I'll be

00:27:22,070 --> 00:27:25,389
replicating them and just from our CI CD

00:27:24,049 --> 00:27:28,760
process making sure they're consistent

00:27:25,389 --> 00:27:30,889
so my thought is that we could almost

00:27:28,760 --> 00:27:32,690
take foundations in maintenance mode or

00:27:30,889 --> 00:27:34,490
you know kind of make that Bluegreen

00:27:32,690 --> 00:27:35,240
deployment process move across data

00:27:34,490 --> 00:27:38,299
center such

00:27:35,240 --> 00:27:39,590
it's not enough it's a non-event that we

00:27:38,299 --> 00:27:41,929
don't have that in place today that's

00:27:39,590 --> 00:27:45,399
all just whiteboard and thinking about

00:27:41,929 --> 00:27:48,399
it but that's that's my thought on that

00:27:45,399 --> 00:27:48,399
yep

00:27:50,809 --> 00:27:54,710
so we've had well obviously I doing

00:27:53,330 --> 00:27:57,110
Cloud Foundry we're gonna little bit

00:27:54,710 --> 00:27:58,640
with with with its containers as far as

00:27:57,110 --> 00:28:00,169
docker on its own

00:27:58,640 --> 00:28:04,940
we have little teams looking at you know

00:28:00,169 --> 00:28:06,620
myself included I think we're at least I

00:28:04,940 --> 00:28:09,500
am I think we agree on this most

00:28:06,620 --> 00:28:11,480
interested in seeing how hell docker

00:28:09,500 --> 00:28:13,250
will play into cloud foundry and how we

00:28:11,480 --> 00:28:15,230
can use cloud foundry to orchestrate

00:28:13,250 --> 00:28:17,440
docker containers yeah we got a couple

00:28:15,230 --> 00:28:20,539
guys looking at kubernetes and and just

00:28:17,440 --> 00:28:22,610
again sort of roll-your-own

00:28:20,539 --> 00:28:26,000
type things around cloud or around

00:28:22,610 --> 00:28:27,770
docker but again I think some of the

00:28:26,000 --> 00:28:29,690
things we've learned up to where we got

00:28:27,770 --> 00:28:31,700
today and that that is again

00:28:29,690 --> 00:28:33,409
provisioning containers is like I was at

00:28:31,700 --> 00:28:34,850
at one of the presentations here really

00:28:33,409 --> 00:28:36,830
I think it was that dr. Nick guy and he

00:28:34,850 --> 00:28:38,720
was like all congratulations you've

00:28:36,830 --> 00:28:40,880
provisioned a container like you know

00:28:38,720 --> 00:28:42,470
and that's like that's like the easy

00:28:40,880 --> 00:28:44,539
part right so I mean I think that's

00:28:42,470 --> 00:28:51,520
that's the extent to looking at a docker

00:28:44,539 --> 00:28:51,520
right now yep

00:28:56,340 --> 00:29:01,680
I think the application authentication

00:28:59,490 --> 00:29:05,760
authorization modeled for apps in Cloud

00:29:01,680 --> 00:29:08,550
Foundry container isolation within data

00:29:05,760 --> 00:29:10,260
classification of apps being pushed to

00:29:08,550 --> 00:29:14,730
CF I mean we're a highly regulated

00:29:10,260 --> 00:29:17,400
company so we have every PCI da you know

00:29:14,730 --> 00:29:21,810
HIPAA right and we have that heavily

00:29:17,400 --> 00:29:24,150
segmented today at all layers so for me

00:29:21,810 --> 00:29:25,680
and then might I started in security as

00:29:24,150 --> 00:29:27,420
well so my friends over there and

00:29:25,680 --> 00:29:30,510
corporate information security you're

00:29:27,420 --> 00:29:32,040
like just because you have this big VLAN

00:29:30,510 --> 00:29:33,900
now that you have your Cloud Foundry

00:29:32,040 --> 00:29:35,910
running and doesn't mean that you can

00:29:33,900 --> 00:29:37,350
all of a sudden start just pushing all

00:29:35,910 --> 00:29:39,060
applications of all kinds of

00:29:37,350 --> 00:29:41,250
classifications in there and then on the

00:29:39,060 --> 00:29:43,260
target systems that are firewall just

00:29:41,250 --> 00:29:46,070
open that belaying up into that zone

00:29:43,260 --> 00:29:49,340
right so those are kind of my my top

00:29:46,070 --> 00:29:51,300
concerns so just data classification

00:29:49,340 --> 00:29:54,300
segmentation and in the app

00:29:51,300 --> 00:29:57,030
authentication model and so yeah yeah

00:29:54,300 --> 00:29:59,250
those are some very real challenges the

00:29:57,030 --> 00:30:01,140
security teams also like some aspects of

00:29:59,250 --> 00:30:02,760
this as soon as I told them that I

00:30:01,140 --> 00:30:05,130
wasn't going to log into a box anymore

00:30:02,760 --> 00:30:08,400
they were pretty excited about that and

00:30:05,130 --> 00:30:10,740
then also the having the blueprints

00:30:08,400 --> 00:30:12,480
right that's something where we can say

00:30:10,740 --> 00:30:14,970
okay here's the application stack it can

00:30:12,480 --> 00:30:17,460
be vetted very carefully they're excited

00:30:14,970 --> 00:30:21,300
about kind of that consistency as well

00:30:17,460 --> 00:30:24,000
so but what James said is is very very

00:30:21,300 --> 00:30:26,100
real yeah we're hoping some of the micro

00:30:24,000 --> 00:30:27,570
segmentation you know whether it's in a

00:30:26,100 --> 00:30:29,250
sec we just kind of went through an

00:30:27,570 --> 00:30:31,530
evaluation of some of those technologies

00:30:29,250 --> 00:30:32,820
I think that's where they're headed and

00:30:31,530 --> 00:30:35,610
supporting you know micro segmentation

00:30:32,820 --> 00:30:37,080
that kind of container level so we're

00:30:35,610 --> 00:30:43,260
very interested and seeing where that

00:30:37,080 --> 00:30:46,450
goes nope we're done all right

00:30:43,260 --> 00:30:46,450

YouTube URL: https://www.youtube.com/watch?v=7YJhjOqVN4o


