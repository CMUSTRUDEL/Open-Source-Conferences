Title: CF Service Brokers Updates: Async provisions, service keys, and any params
Publication date: 2015-05-12
Playlist: Cloud Foundry Summit 2015
Description: 
	CF Service Brokers Updates: Async provisions, service keys, and any params - 06 Michael Maximilien, David Sabeti 720p
Captions: 
	00:00:00,240 --> 00:00:06,330
everybody hear me okay yes all right

00:00:04,950 --> 00:00:10,440
good afternoon everybody my name is

00:00:06,330 --> 00:00:13,650
David sue Betty I am an engineer on the

00:00:10,440 --> 00:00:15,690
services API team at pivotal and this

00:00:13,650 --> 00:00:18,449
over here is dr. max this easement or

00:00:15,690 --> 00:00:20,189
colloquially colloquially known from IBM

00:00:18,449 --> 00:00:22,590
we're gonna talk to you a little bit

00:00:20,189 --> 00:00:26,189
about today about what's new with cloud

00:00:22,590 --> 00:00:27,420
foundry services and sort of give you

00:00:26,189 --> 00:00:28,740
guys a little bit of a tour through the

00:00:27,420 --> 00:00:30,240
existing architecture and the features

00:00:28,740 --> 00:00:32,700
that are coming through the pipeline so

00:00:30,240 --> 00:00:34,829
what are we going to cover today we'll

00:00:32,700 --> 00:00:36,239
start with an overview of the broker

00:00:34,829 --> 00:00:40,079
architecture and what I really want to

00:00:36,239 --> 00:00:42,360
focus on is I want to focus on the goals

00:00:40,079 --> 00:00:44,910
that we manage I think to accomplish

00:00:42,360 --> 00:00:45,989
with the given architecture and I want

00:00:44,910 --> 00:00:47,610
to sort of make sure that everybody

00:00:45,989 --> 00:00:50,309
understands why those goals are valuable

00:00:47,610 --> 00:00:51,780
for people who are writing services for

00:00:50,309 --> 00:00:53,910
people who are operating Cloud Foundry

00:00:51,780 --> 00:00:57,270
and also for developers who are using

00:00:53,910 --> 00:01:00,600
Cloud Foundry and then after I do that

00:00:57,270 --> 00:01:01,739
Maxon is going to go through the three

00:01:00,600 --> 00:01:04,589
big features that we've added in the

00:01:01,739 --> 00:01:05,970
last couple months and sort of explain a

00:01:04,589 --> 00:01:09,180
little bit about how we implemented them

00:01:05,970 --> 00:01:10,710
and how those sort of extend the same

00:01:09,180 --> 00:01:13,650
basic principles that we established in

00:01:10,710 --> 00:01:15,630
the first part and then you know if the

00:01:13,650 --> 00:01:18,119
demo gods are happy with us we're gonna

00:01:15,630 --> 00:01:20,340
we're gonna go for a demo at the very

00:01:18,119 --> 00:01:24,000
end then then we'll finish up with some

00:01:20,340 --> 00:01:27,840
Q&A and maybe some some feedback or just

00:01:24,000 --> 00:01:30,900
sort of hearing from you guys so let's

00:01:27,840 --> 00:01:34,409
get started probably the best place to

00:01:30,900 --> 00:01:36,380
get started is to to describe the

00:01:34,409 --> 00:01:39,150
problem that CF services tries to solve

00:01:36,380 --> 00:01:40,170
and basically what we want to do is we

00:01:39,150 --> 00:01:42,000
want to make sure that Cloud Foundry

00:01:40,170 --> 00:01:44,700
services enable developers to discover

00:01:42,000 --> 00:01:46,259
and integrate third-party software with

00:01:44,700 --> 00:01:51,240
their Cloud Foundry applications through

00:01:46,259 --> 00:01:52,740
the platform yeah let's just let's start

00:01:51,240 --> 00:01:54,899
with that this this definition is X a

00:01:52,740 --> 00:01:56,310
little bit malleable I could tell you

00:01:54,899 --> 00:01:57,659
for example that services actually don't

00:01:56,310 --> 00:01:59,670
necessarily have to be connected to

00:01:57,659 --> 00:02:01,649
applications but this is sort of the

00:01:59,670 --> 00:02:04,320
basic principle and then we we find that

00:02:01,649 --> 00:02:06,119
with our definition of services we can

00:02:04,320 --> 00:02:08,580
sort of expand it as much as we want to

00:02:06,119 --> 00:02:10,110
include all sorts of services that don't

00:02:08,580 --> 00:02:12,180
necessarily fit into the original the

00:02:10,110 --> 00:02:17,189
original plan

00:02:12,180 --> 00:02:19,530
which i think is a good thing so maybe

00:02:17,189 --> 00:02:21,209
let's stick with this so when I talk

00:02:19,530 --> 00:02:22,860
about third-party software and services

00:02:21,209 --> 00:02:24,870
if we talk about cloud foundry services

00:02:22,860 --> 00:02:26,129
what do we really mean what we're

00:02:24,870 --> 00:02:28,980
talking about is third-party software

00:02:26,129 --> 00:02:30,989
any kind that a user might want to use

00:02:28,980 --> 00:02:32,790
in the context of Cloud Foundry so the

00:02:30,989 --> 00:02:35,010
easiest example to imagine is something

00:02:32,790 --> 00:02:38,760
like a data persistence layer did sequel

00:02:35,010 --> 00:02:41,400
databases or maybe a you know Redis or

00:02:38,760 --> 00:02:43,530
RabbitMQ or like Hadoop anything like

00:02:41,400 --> 00:02:44,940
that just data services but you can take

00:02:43,530 --> 00:02:46,950
a little bit further and include things

00:02:44,940 --> 00:02:50,639
like analytics tools monitoring or

00:02:46,950 --> 00:02:52,680
metrics like New Relic you could think

00:02:50,639 --> 00:02:54,780
of utility services for your application

00:02:52,680 --> 00:02:55,829
things like sending emails which you

00:02:54,780 --> 00:02:56,939
could even take it one step further and

00:02:55,829 --> 00:03:00,260
this is sort of where we break away from

00:02:56,939 --> 00:03:03,540
this definition and you can include

00:03:00,260 --> 00:03:05,430
services that are sort of just you know

00:03:03,540 --> 00:03:07,079
team enablement services things like

00:03:05,430 --> 00:03:08,220
pivotal tracker juror that don't

00:03:07,079 --> 00:03:10,019
necessarily have anything to do with an

00:03:08,220 --> 00:03:11,220
individual application but if your

00:03:10,019 --> 00:03:12,750
developers are already working in the

00:03:11,220 --> 00:03:14,400
context of Cloud Foundry you really make

00:03:12,750 --> 00:03:17,849
sense for them to have those services in

00:03:14,400 --> 00:03:19,500
the same context so services have a

00:03:17,849 --> 00:03:21,510
pretty generic definition and that's

00:03:19,500 --> 00:03:22,349
largely by design so the first thing we

00:03:21,510 --> 00:03:24,030
want to do is we want to make sure that

00:03:22,349 --> 00:03:25,230
software developers the users can

00:03:24,030 --> 00:03:25,650
actually find these services pretty

00:03:25,230 --> 00:03:27,329
easily

00:03:25,650 --> 00:03:29,129
really easy UX through the platform

00:03:27,329 --> 00:03:30,540
something like this CF marketplace and

00:03:29,129 --> 00:03:32,010
it would tell you yeah these are a

00:03:30,540 --> 00:03:34,290
couple services that your Cloud Foundry

00:03:32,010 --> 00:03:37,530
does since is currently offering P my

00:03:34,290 --> 00:03:40,349
sequel and P reacts the sr22 services

00:03:37,530 --> 00:03:41,370
that pivotal builds and if you look at

00:03:40,349 --> 00:03:43,919
this output it's pretty pretty

00:03:41,370 --> 00:03:44,970
straightforward it lists services the

00:03:43,919 --> 00:03:46,049
second column might not be as obvious

00:03:44,970 --> 00:03:48,590
but those are different plant

00:03:46,049 --> 00:03:51,409
configurations and then finally a little

00:03:48,590 --> 00:03:53,190
description about what the service does

00:03:51,409 --> 00:03:55,620
so the next thing we learn is we want to

00:03:53,190 --> 00:03:57,530
integrate these apps are these these

00:03:55,620 --> 00:03:59,970
services to our apps if that's possible

00:03:57,530 --> 00:04:04,799
so you can do this in three commands

00:03:59,970 --> 00:04:06,479
this is a aux you might imagine for for

00:04:04,799 --> 00:04:08,190
the developer something as simple as

00:04:06,479 --> 00:04:11,340
starting by creating the service then

00:04:08,190 --> 00:04:12,810
moving on to what we call binding a

00:04:11,340 --> 00:04:15,359
service and the binding is simply a way

00:04:12,810 --> 00:04:17,190
to tell the system that this application

00:04:15,359 --> 00:04:18,690
is now we want we want that this

00:04:17,190 --> 00:04:22,469
application to be able to use this

00:04:18,690 --> 00:04:23,669
service instance when we talk a little

00:04:22,469 --> 00:04:25,650
bit about the architecture you'll see

00:04:23,669 --> 00:04:29,130
that there's a lot of different ways

00:04:25,650 --> 00:04:31,169
that you can sort of tell the system

00:04:29,130 --> 00:04:32,940
that but this is this is this is the way

00:04:31,169 --> 00:04:34,590
that we do it through the UX and then

00:04:32,940 --> 00:04:35,970
finally there's sort of like a technical

00:04:34,590 --> 00:04:37,199
detail that you have to restage your

00:04:35,970 --> 00:04:38,639
application to make this changes

00:04:37,199 --> 00:04:40,169
propagate but there you go three

00:04:38,639 --> 00:04:42,800
commands and your app can now you user

00:04:40,169 --> 00:04:45,449
use your service pretty straightforward

00:04:42,800 --> 00:04:47,039
I said I should point out that we did

00:04:45,449 --> 00:04:48,600
all of this through the platform at no

00:04:47,039 --> 00:04:50,550
point that the developer have to go out

00:04:48,600 --> 00:04:52,169
of banned to provision these service

00:04:50,550 --> 00:04:54,300
instances go and login to a web

00:04:52,169 --> 00:04:56,550
interface or anything like that we want

00:04:54,300 --> 00:04:57,960
to make sure that sort of the same way

00:04:56,550 --> 00:04:59,490
that I said these instances are valuable

00:04:57,960 --> 00:05:00,780
in the context of Cloud Foundry we want

00:04:59,490 --> 00:05:03,570
to make sure that we don't make users

00:05:00,780 --> 00:05:05,729
leave that context as their as their

00:05:03,570 --> 00:05:08,850
work you know provisioning and using

00:05:05,729 --> 00:05:09,840
their services we have a couple other

00:05:08,850 --> 00:05:12,930
goals that we want to make sure to

00:05:09,840 --> 00:05:15,330
accomplish as we go through or as we as

00:05:12,930 --> 00:05:16,350
we build out the architecture and one is

00:05:15,330 --> 00:05:18,900
that deployment and maintenance are

00:05:16,350 --> 00:05:20,639
opaque to the developer this actually

00:05:18,900 --> 00:05:24,210
means two things the first thing is that

00:05:20,639 --> 00:05:26,190
a service developer should have no

00:05:24,210 --> 00:05:27,780
really shouldn't be concerned with then

00:05:26,190 --> 00:05:29,690
the management or maintenance of a

00:05:27,780 --> 00:05:31,979
service instance like they don't care

00:05:29,690 --> 00:05:33,810
you know it's not their job to maintain

00:05:31,979 --> 00:05:35,370
like uptime or things like that where

00:05:33,810 --> 00:05:37,020
these servers are located networking

00:05:35,370 --> 00:05:40,169
that's typically not a developer's

00:05:37,020 --> 00:05:41,190
concern especially not at first the

00:05:40,169 --> 00:05:42,900
other thing is that we want to make sure

00:05:41,190 --> 00:05:45,210
that we're agnostic to specific

00:05:42,900 --> 00:05:46,740
technology choices so we want to be

00:05:45,210 --> 00:05:47,820
agnostic to infrastructure you can do

00:05:46,740 --> 00:05:51,630
this on you know we don't care if it's

00:05:47,820 --> 00:05:54,240
service is deployed to AWS OpenStack

00:05:51,630 --> 00:05:55,949
VMware or whatever we also don't care

00:05:54,240 --> 00:05:57,240
about any other technical choices like

00:05:55,949 --> 00:05:59,220
what language it was written in or what

00:05:57,240 --> 00:06:01,289
other dependencies it has we have a

00:05:59,220 --> 00:06:04,080
pretty basic requirement that services

00:06:01,289 --> 00:06:05,520
are accessible via a URL from the Cloud

00:06:04,080 --> 00:06:09,690
Foundry from the instance of Cloud

00:06:05,520 --> 00:06:10,860
Foundry and that's really it we also

00:06:09,690 --> 00:06:12,659
don't want to be prescriptive about what

00:06:10,860 --> 00:06:13,919
a services I talked a little bit about

00:06:12,659 --> 00:06:15,510
this earlier but we want to have on

00:06:13,919 --> 00:06:17,940
purpose a very loose definition about

00:06:15,510 --> 00:06:19,710
what a services we can come up with a

00:06:17,940 --> 00:06:21,539
lot of really easy examples about what a

00:06:19,710 --> 00:06:24,300
services but it's really interesting is

00:06:21,539 --> 00:06:25,470
to see people take take this take are

00:06:24,300 --> 00:06:28,260
loose definition and imagine really

00:06:25,470 --> 00:06:29,729
interesting use cases for it so I think

00:06:28,260 --> 00:06:31,169
earlier today I just heard somebody talk

00:06:29,729 --> 00:06:33,449
about networking as a service I was

00:06:31,169 --> 00:06:34,500
eavesdropping on a conversation you to

00:06:33,449 --> 00:06:35,940
really think of a lot of different

00:06:34,500 --> 00:06:38,279
things and we want to make sure that we

00:06:35,940 --> 00:06:39,330
enable people to to continue to have

00:06:38,279 --> 00:06:43,050
sort of slightly differ

00:06:39,330 --> 00:06:45,110
about a service as a result external

00:06:43,050 --> 00:06:47,129
vendors can bring their service to CF

00:06:45,110 --> 00:06:48,300
right so if we don't care where it's

00:06:47,129 --> 00:06:49,800
deployed and we don't really have a

00:06:48,300 --> 00:06:54,449
strong definition of what a services

00:06:49,800 --> 00:06:56,639
that means that you know out even if you

00:06:54,449 --> 00:06:59,039
are if you're the you know the operator

00:06:56,639 --> 00:07:00,509
of a cloud foundry instance you can you

00:06:59,039 --> 00:07:02,219
can invite partners to come and bring

00:07:00,509 --> 00:07:04,080
their services to your Cloud Foundry and

00:07:02,219 --> 00:07:05,219
it's not the reason why this is really

00:07:04,080 --> 00:07:06,300
great is that it's the operator of

00:07:05,219 --> 00:07:08,610
klephts foundry it's not your job to

00:07:06,300 --> 00:07:11,460
also be the operator of a service we can

00:07:08,610 --> 00:07:12,509
leave that to the experts and finally we

00:07:11,460 --> 00:07:15,330
want to make sure that all this happens

00:07:12,509 --> 00:07:17,610
in a dynamic way I'm not just using a

00:07:15,330 --> 00:07:19,490
buzzword here what I mean is that we

00:07:17,610 --> 00:07:21,960
want to make sure that you never have to

00:07:19,490 --> 00:07:23,449
redeploy your cloud foundry or restart

00:07:21,960 --> 00:07:25,889
any part of the system we want to bake

00:07:23,449 --> 00:07:27,419
broker integration into the API so that

00:07:25,889 --> 00:07:29,009
we can make a few API calls in the

00:07:27,419 --> 00:07:31,650
service brokerage and the service

00:07:29,009 --> 00:07:33,779
provider is ready to is ready to be

00:07:31,650 --> 00:07:36,569
integrated or is is completely

00:07:33,779 --> 00:07:39,779
integrated and ready to have services

00:07:36,569 --> 00:07:40,770
provisioned and used so these are four

00:07:39,779 --> 00:07:43,770
different things we want to make sure we

00:07:40,770 --> 00:07:45,330
also accomplish and so the solution that

00:07:43,770 --> 00:07:49,469
we converge on is what we call the

00:07:45,330 --> 00:07:50,789
service broker architecture so when I

00:07:49,469 --> 00:07:53,159
talk about a service broker what we're

00:07:50,789 --> 00:07:54,960
really talking about is a transition

00:07:53,159 --> 00:07:59,509
translation translation layer between

00:07:54,960 --> 00:08:02,219
cloud foundry and the service provider a

00:07:59,509 --> 00:08:07,500
service broker adheres to a very small

00:08:02,219 --> 00:08:09,900
HTTP interface and basically Cloud

00:08:07,500 --> 00:08:11,819
Foundry is that it's a contract Cloud

00:08:09,900 --> 00:08:13,740
Foundry is going to make requests and

00:08:11,819 --> 00:08:15,810
expect this the broker to conform to

00:08:13,740 --> 00:08:17,069
this relatively small interface and the

00:08:15,810 --> 00:08:19,080
broker can take these Cloud Foundry

00:08:17,069 --> 00:08:21,960
domain requests and translate them into

00:08:19,080 --> 00:08:24,509
service domain requests so for example

00:08:21,960 --> 00:08:27,839
if your service is a let's say it's a my

00:08:24,509 --> 00:08:30,000
sequel database a class founders gonna

00:08:27,839 --> 00:08:31,710
ask give me a service instance right

00:08:30,000 --> 00:08:33,000
well my sequel probably doesn't know

00:08:31,710 --> 00:08:34,289
anything about it what a service

00:08:33,000 --> 00:08:35,579
instance is a Cloud Foundry service

00:08:34,289 --> 00:08:36,599
instance but the broker does the broker

00:08:35,579 --> 00:08:38,699
knows well what he means is he wants

00:08:36,599 --> 00:08:41,130
some database so the broker can then

00:08:38,699 --> 00:08:43,260
delegate to the appropriate components

00:08:41,130 --> 00:08:44,490
or make the request itself to create a

00:08:43,260 --> 00:08:46,680
database and then it can come back to

00:08:44,490 --> 00:08:49,380
the plot controller and say to the Cloud

00:08:46,680 --> 00:08:51,449
Foundry and say yeah we we provisioned

00:08:49,380 --> 00:08:52,950
your service just like you asked so this

00:08:51,449 --> 00:08:54,450
when we talk about service

00:08:52,950 --> 00:08:56,250
and we'll see this in a second all we

00:08:54,450 --> 00:08:57,270
have some pictures but what we're

00:08:56,250 --> 00:08:58,680
talking about when we talk about a

00:08:57,270 --> 00:09:00,480
service broker is a translation layer

00:08:58,680 --> 00:09:02,940
between Cloud Foundry and the service

00:09:00,480 --> 00:09:04,590
provider all right so we're gonna do

00:09:02,940 --> 00:09:08,090
some boxes and lines nobody get too

00:09:04,590 --> 00:09:10,460
scared I just sort of want to show you

00:09:08,090 --> 00:09:12,600
basic the basic back and forth that

00:09:10,460 --> 00:09:13,950
users will do and what happens to a

00:09:12,600 --> 00:09:16,110
user's request as it makes its way

00:09:13,950 --> 00:09:18,840
through the system so the first thing we

00:09:16,110 --> 00:09:20,460
need to do is we need to we need a

00:09:18,840 --> 00:09:22,470
register the service broker so this is

00:09:20,460 --> 00:09:25,380
actually an ADD vanilla tea at least

00:09:22,470 --> 00:09:26,700
currently an admin says all right I have

00:09:25,380 --> 00:09:29,600
a new service broker that's ready to

00:09:26,700 --> 00:09:32,370
integrate with my Cloud Foundry the

00:09:29,600 --> 00:09:34,380
cloud Factory admin can now bust out his

00:09:32,370 --> 00:09:35,580
CFC Ally and make a request create

00:09:34,380 --> 00:09:39,360
service broker and all he has to do is

00:09:35,580 --> 00:09:42,150
provide a URL and you know credentials

00:09:39,360 --> 00:09:43,710
to access the URL basically the URL

00:09:42,150 --> 00:09:44,880
points to where the broker lives and the

00:09:43,710 --> 00:09:48,030
cloud controller is going to make an

00:09:44,880 --> 00:09:50,100
HTTP request this is the first the first

00:09:48,030 --> 00:09:51,480
HTTP endpoint that we're expecting

00:09:50,100 --> 00:09:53,850
brokers to implement and what we do is

00:09:51,480 --> 00:09:55,440
we ask for a catalog catalog is pretty

00:09:53,850 --> 00:09:57,870
straightforward it's just a list of

00:09:55,440 --> 00:10:02,040
services and plans that the broker

00:09:57,870 --> 00:10:04,590
offers and you know basically services

00:10:02,040 --> 00:10:07,560
that we want users to be able to see and

00:10:04,590 --> 00:10:10,800
so once we've integrated once the cloud

00:10:07,560 --> 00:10:12,030
the cloud cloud controller by the way I

00:10:10,800 --> 00:10:13,650
started talking about the cloud

00:10:12,030 --> 00:10:16,050
controller this guy right here the cloud

00:10:13,650 --> 00:10:18,150
controller is just the the component of

00:10:16,050 --> 00:10:19,650
foundry that is making these that is

00:10:18,150 --> 00:10:21,780
accepting API requests and making these

00:10:19,650 --> 00:10:22,920
API requests so if you don't know what

00:10:21,780 --> 00:10:24,720
the cloud controller is if you're not

00:10:22,920 --> 00:10:26,160
already friends with him just pretend

00:10:24,720 --> 00:10:28,080
that that says Cloud Foundry it's really

00:10:26,160 --> 00:10:29,250
all that matters but if you are familiar

00:10:28,080 --> 00:10:30,720
with a little bit of the internals of

00:10:29,250 --> 00:10:33,900
the architecture we wanted to I wanted

00:10:30,720 --> 00:10:35,190
to make sure that you it was known which

00:10:33,900 --> 00:10:37,490
which component within cloud foundry

00:10:35,190 --> 00:10:41,250
we're talking about

00:10:37,490 --> 00:10:45,120
so the cloud controller once the success

00:10:41,250 --> 00:10:47,430
the request succeeds then a user can now

00:10:45,120 --> 00:10:48,600
make a request that says hey show me

00:10:47,430 --> 00:10:51,560
your services just like I showed you

00:10:48,600 --> 00:10:54,060
before and our new service here is

00:10:51,560 --> 00:10:55,890
displayed to the user and the user knows

00:10:54,060 --> 00:10:59,880
that he can now provision and bind to

00:10:55,890 --> 00:11:02,220
these services so what does it user want

00:10:59,880 --> 00:11:05,160
to do next well let's let's now now we

00:11:02,220 --> 00:11:06,480
can be a developer so developer says I

00:11:05,160 --> 00:11:09,779
want to create a service so here

00:11:06,480 --> 00:11:12,120
he makes his CLI command cf create

00:11:09,779 --> 00:11:14,459
service the cloud controller is now

00:11:12,120 --> 00:11:17,040
going to make the next important request

00:11:14,459 --> 00:11:19,139
to the broker to a new endpoint it's

00:11:17,040 --> 00:11:23,100
going to use a put request to the broker

00:11:19,139 --> 00:11:25,529
and include a good which is just a

00:11:23,100 --> 00:11:27,389
globally unique identifier I would point

00:11:25,529 --> 00:11:29,820
the broker is going to go and do

00:11:27,389 --> 00:11:31,589
whatever it needs to do to make to make

00:11:29,820 --> 00:11:35,490
the service so as I said before in the

00:11:31,589 --> 00:11:37,260
example if my sequel that that work is T

00:11:35,490 --> 00:11:38,610
no-go created database but we can

00:11:37,260 --> 00:11:40,079
imagine lots and lots of different use

00:11:38,610 --> 00:11:41,670
cases what it means to create a service

00:11:40,079 --> 00:11:43,079
like I said before the broker is

00:11:41,670 --> 00:11:44,760
translating a Cloud Foundry specific

00:11:43,079 --> 00:11:47,459
request into a service specific request

00:11:44,760 --> 00:11:49,529
and then once it everything goes well

00:11:47,459 --> 00:11:51,060
the broker returns to the 201 created

00:11:49,529 --> 00:11:53,190
and the Cloud Controller keeps a record

00:11:51,060 --> 00:11:54,779
of that service in the database and now

00:11:53,190 --> 00:11:58,170
when a user asked for his all of his

00:11:54,779 --> 00:11:59,730
services he can see his new database his

00:11:58,170 --> 00:12:00,750
new service instance in the output and

00:11:59,730 --> 00:12:04,350
he knows that he has successfully

00:12:00,750 --> 00:12:05,699
created a service instance so the next

00:12:04,350 --> 00:12:06,930
thing that he's going to do is he's

00:12:05,699 --> 00:12:08,940
probably going to bind to the service

00:12:06,930 --> 00:12:12,630
that means he's going to connect it to

00:12:08,940 --> 00:12:14,339
one of his applications yet again the

00:12:12,630 --> 00:12:16,740
clot controllers just going to relay

00:12:14,339 --> 00:12:19,050
this request over to the broker at this

00:12:16,740 --> 00:12:22,230
time it's a slightly longer you are out

00:12:19,050 --> 00:12:24,420
here but it's it's a sir it's a request

00:12:22,230 --> 00:12:28,350
to create a service binding sort of

00:12:24,420 --> 00:12:29,790
treat it as its own you know as its own

00:12:28,350 --> 00:12:31,980
resource but nested under service

00:12:29,790 --> 00:12:34,199
instances and again the broker is going

00:12:31,980 --> 00:12:36,300
to return to one created in the case of

00:12:34,199 --> 00:12:38,069
a success the important thing important

00:12:36,300 --> 00:12:40,019
thing to point out here is the actual

00:12:38,069 --> 00:12:40,829
return the response body that the broker

00:12:40,019 --> 00:12:43,319
is going to return to the cloud

00:12:40,829 --> 00:12:45,269
controller what we're getting back from

00:12:43,319 --> 00:12:47,790
the broker is a set of credentials most

00:12:45,269 --> 00:12:49,889
we call it credentials and what we mean

00:12:47,790 --> 00:12:51,839
here is that this is the broker telling

00:12:49,889 --> 00:12:54,750
Cloud Foundry hey you want to give this

00:12:51,839 --> 00:12:56,370
set of data to your application so your

00:12:54,750 --> 00:12:58,500
application can use the service instance

00:12:56,370 --> 00:12:59,970
properly so most of the time what you'll

00:12:58,500 --> 00:13:02,069
see is something like off credentials

00:12:59,970 --> 00:13:03,990
but you also you'll also often find

00:13:02,069 --> 00:13:05,569
things like IP addresses or URLs where

00:13:03,990 --> 00:13:07,589
the service instance is actually located

00:13:05,569 --> 00:13:08,459
but depending on the nature of the

00:13:07,589 --> 00:13:09,149
service it could be something totally

00:13:08,459 --> 00:13:12,990
different

00:13:09,149 --> 00:13:14,550
might be an API key it might be I don't

00:13:12,990 --> 00:13:17,699
know other things that just basically

00:13:14,550 --> 00:13:18,940
tell the application this is how you can

00:13:17,699 --> 00:13:21,820
use your service instance

00:13:18,940 --> 00:13:24,340
so these credentials get injected into

00:13:21,820 --> 00:13:26,170
the applications run runtime environment

00:13:24,340 --> 00:13:28,270
they get stored as environment variables

00:13:26,170 --> 00:13:29,920
in a variable called vcap services that

00:13:28,270 --> 00:13:33,760
your application can then use to

00:13:29,920 --> 00:13:36,610
actually okay can actually make use of

00:13:33,760 --> 00:13:39,640
the service instance and likewise a user

00:13:36,610 --> 00:13:41,770
over here on the front end can see can

00:13:39,640 --> 00:13:43,150
see that now this bound asked column has

00:13:41,770 --> 00:13:47,770
been updated to include the name of his

00:13:43,150 --> 00:13:50,140
application ah wow that was fast

00:13:47,770 --> 00:13:51,490
any questions maybe we should have all

00:13:50,140 --> 00:13:53,200
have questions for the end and I'll let

00:13:51,490 --> 00:13:57,610
max go over what some of the new

00:13:53,200 --> 00:14:00,750
features are thank you David

00:13:57,610 --> 00:14:04,300
okay so before I start let me mention

00:14:00,750 --> 00:14:07,050
something first is that as you probably

00:14:04,300 --> 00:14:09,580
know when we talk about Cloud Foundry

00:14:07,050 --> 00:14:12,040
everybody wants I'm with IBM and

00:14:09,580 --> 00:14:14,740
everybody repackages clapping and

00:14:12,040 --> 00:14:16,860
resells if you think well what where do

00:14:14,740 --> 00:14:20,350
we make money right in general well

00:14:16,860 --> 00:14:22,450
right there in Services Services is one

00:14:20,350 --> 00:14:24,790
the one of the areas where different

00:14:22,450 --> 00:14:27,520
platform can differentiate but of course

00:14:24,790 --> 00:14:29,950
we want this to be the base to be open

00:14:27,520 --> 00:14:32,070
source so when we were looking

00:14:29,950 --> 00:14:35,080
especially brian martin over there

00:14:32,070 --> 00:14:37,300
wanted for my BM wanted different

00:14:35,080 --> 00:14:41,110
aspects of the services api to be

00:14:37,300 --> 00:14:43,060
changed and improved it created some you

00:14:41,110 --> 00:14:45,130
know sort of tension so great thing is

00:14:43,060 --> 00:14:48,220
we work with Shannon and David Stevenson

00:14:45,130 --> 00:14:49,840
and created a brand new team starting at

00:14:48,220 --> 00:14:52,240
the beginning of the year and of course

00:14:49,840 --> 00:14:54,250
David was the leader and I work with him

00:14:52,240 --> 00:14:55,840
I've never worked on services before and

00:14:54,250 --> 00:14:58,090
never worked with them before and it was

00:14:55,840 --> 00:14:59,440
just a joy for two months we pretty much

00:14:58,090 --> 00:15:01,990
implemented a lot of what you're gonna

00:14:59,440 --> 00:15:03,760
see here and then plus I went to China

00:15:01,990 --> 00:15:06,400
we've got two colleagues from China

00:15:03,760 --> 00:15:08,530
Edward and Tom and guess what they

00:15:06,400 --> 00:15:10,570
worked on it also with us so what you're

00:15:08,530 --> 00:15:12,490
gonna see is basically the outcome of

00:15:10,570 --> 00:15:15,600
this new team and they're continuing

00:15:12,490 --> 00:15:20,320
doing adding more stuff so the first I

00:15:15,600 --> 00:15:22,660
guess big thing that we added is that in

00:15:20,320 --> 00:15:25,330
the current service or the old service

00:15:22,660 --> 00:15:26,380
architecture you had 60 seconds to

00:15:25,330 --> 00:15:29,350
provision your service

00:15:26,380 --> 00:15:32,170
crazy right I mean what gets done in 60

00:15:29,350 --> 00:15:32,590
seconds like speeding up VM I guess you

00:15:32,170 --> 00:15:34,630
know if you're

00:15:32,590 --> 00:15:36,910
30 milliseconds yeah but you have to

00:15:34,630 --> 00:15:39,490
still put Dida yes you still have to do

00:15:36,910 --> 00:15:42,280
stuff so operations need to be a little

00:15:39,490 --> 00:15:44,050
bit longer than just 60 seconds so the

00:15:42,280 --> 00:15:46,330
obvious solution for this is can you do

00:15:44,050 --> 00:15:49,060
stuff asynchronously well it's a lot

00:15:46,330 --> 00:15:50,560
easier said than done we did it it took

00:15:49,060 --> 00:15:53,350
a little bit of time partly because we

00:15:50,560 --> 00:15:55,930
also paid some technical debt but the

00:15:53,350 --> 00:15:58,690
basic view of it is that for something

00:15:55,930 --> 00:16:01,660
like IBM Watson where a lot of it is

00:15:58,690 --> 00:16:04,570
analytic stuff right lots of data needs

00:16:01,660 --> 00:16:06,220
to be pulled in you got to set up things

00:16:04,570 --> 00:16:08,920
before the service are actually

00:16:06,220 --> 00:16:10,660
available for you to use it takes more

00:16:08,920 --> 00:16:13,840
than 60 seconds so you want to be able

00:16:10,660 --> 00:16:15,130
to do it in a synchronous fashion same

00:16:13,840 --> 00:16:16,800
thing for a Duke for instance right

00:16:15,130 --> 00:16:19,210
you're gonna set up in a Duke cluster

00:16:16,800 --> 00:16:21,220
it's gonna take you more than 60 seconds

00:16:19,210 --> 00:16:23,590
because for any job that's more than

00:16:21,220 --> 00:16:25,780
just a toy job you're gonna have to spin

00:16:23,590 --> 00:16:27,460
up maybe some VMs maybe some docker

00:16:25,780 --> 00:16:29,410
containers whatever it is it's gonna

00:16:27,460 --> 00:16:31,660
probably take more than 60 seconds so

00:16:29,410 --> 00:16:34,590
the key is to be able to enable these

00:16:31,660 --> 00:16:38,020
kind of use cases so how did we do this

00:16:34,590 --> 00:16:40,750
we basically used a classic sort of

00:16:38,020 --> 00:16:43,210
design pattern which is kind of a future

00:16:40,750 --> 00:16:46,090
object so instead of returning

00:16:43,210 --> 00:16:49,030
immediately you get an object that tells

00:16:46,090 --> 00:16:50,680
you what the future is so you can

00:16:49,030 --> 00:16:53,260
interrogate it so in other words you're

00:16:50,680 --> 00:16:55,390
gonna pull okay so you do that and it

00:16:53,260 --> 00:16:57,070
gives you pretty much the state of the

00:16:55,390 --> 00:16:58,690
service we're gonna have a nice demo

00:16:57,070 --> 00:17:00,910
that shows you exactly what I'm talking

00:16:58,690 --> 00:17:02,560
about here the other thing that is a

00:17:00,910 --> 00:17:04,990
consequence is that there's now a

00:17:02,560 --> 00:17:06,550
tighter integration between the Cloud

00:17:04,990 --> 00:17:08,470
Foundry of the cloud controller with the

00:17:06,550 --> 00:17:10,090
worker so if you're all worker providers

00:17:08,470 --> 00:17:12,400
make sure you pay attention to the

00:17:10,090 --> 00:17:13,990
specification if you did not in the past

00:17:12,400 --> 00:17:16,810
because now there's a little bit more

00:17:13,990 --> 00:17:22,420
communication between the worker your

00:17:16,810 --> 00:17:24,280
worker and the CC so as an example if we

00:17:22,420 --> 00:17:26,410
look at the previous slide that David

00:17:24,280 --> 00:17:29,860
was talking about when he showed how a

00:17:26,410 --> 00:17:32,020
service gets you know bound to what's

00:17:29,860 --> 00:17:34,150
gonna happen now instead of immediately

00:17:32,020 --> 00:17:40,510
having a service ready so that you can

00:17:34,150 --> 00:17:43,090
start using it you instead have you

00:17:40,510 --> 00:17:45,400
instead are gonna have a series of pool

00:17:43,090 --> 00:17:47,410
where you can see there is a state now

00:17:45,400 --> 00:17:49,840
so the first state of course is gonna be

00:17:47,410 --> 00:17:52,210
that it's in progress and this state

00:17:49,840 --> 00:17:54,430
could actually persist for any amount of

00:17:52,210 --> 00:17:57,340
time depending on your Booker until it's

00:17:54,430 --> 00:17:59,440
ready or it's created same thing if you

00:17:57,340 --> 00:18:01,690
delete it so maybe as part of your GDP

00:17:59,440 --> 00:18:03,340
you want to back up so your delete could

00:18:01,690 --> 00:18:05,230
actually take time okay

00:18:03,340 --> 00:18:06,850
so that's gonna be one of the bigger

00:18:05,230 --> 00:18:08,260
changes that you're gonna experience and

00:18:06,850 --> 00:18:11,140
this is to support asynchronous

00:18:08,260 --> 00:18:13,059
operations so this is kind of the

00:18:11,140 --> 00:18:16,900
difference right between what you saw

00:18:13,059 --> 00:18:19,870
before and now another issue that came

00:18:16,900 --> 00:18:22,300
up again a lot a lot of it came from

00:18:19,870 --> 00:18:24,309
bloomix team but also Shannon has a list

00:18:22,300 --> 00:18:27,309
of customers a lot of you probably in

00:18:24,309 --> 00:18:29,410
this room that pretty much tell him you

00:18:27,309 --> 00:18:32,380
know what you're looking for and we're

00:18:29,410 --> 00:18:34,990
trying to address that we used to call

00:18:32,380 --> 00:18:36,550
it credentials but credentials is kind

00:18:34,990 --> 00:18:38,950
of complex because there's other names

00:18:36,550 --> 00:18:41,320
use there's other things calling using

00:18:38,950 --> 00:18:43,510
credentials to call it keys so the idea

00:18:41,320 --> 00:18:45,130
there is that when you have a service

00:18:43,510 --> 00:18:46,929
running in your Cloud Foundry

00:18:45,130 --> 00:18:49,570
installation you might want to use it

00:18:46,929 --> 00:18:52,030
without necessarily having an app also

00:18:49,570 --> 00:18:53,350
being used and I guess let's drop the

00:18:52,030 --> 00:18:54,490
docker name if you have a dollar

00:18:53,350 --> 00:18:56,470
container you want to connect to a

00:18:54,490 --> 00:18:58,870
service how do you do it that may not be

00:18:56,470 --> 00:19:01,240
an app right and it there's a lot more

00:18:58,870 --> 00:19:04,990
examples of this also right so what you

00:19:01,240 --> 00:19:06,610
can now do is you can actually call the

00:19:04,990 --> 00:19:09,250
service API and cut foundry and say

00:19:06,610 --> 00:19:10,929
create a key for me and you can ask as

00:19:09,250 --> 00:19:12,280
many keys as you want and the keys are

00:19:10,929 --> 00:19:15,340
going to be your credentials to be able

00:19:12,280 --> 00:19:18,070
to connect to the service so the use

00:19:15,340 --> 00:19:20,710
cases for this are things like for

00:19:18,070 --> 00:19:22,450
instance having keys for read-only let's

00:19:20,710 --> 00:19:24,700
say for instance this is one that

00:19:22,450 --> 00:19:26,320
Shannon and I and Eve it and I discussed

00:19:24,700 --> 00:19:28,330
where you could have a database where

00:19:26,320 --> 00:19:30,790
you may want to expose a read-only

00:19:28,330 --> 00:19:33,370
access to that database so the key there

00:19:30,790 --> 00:19:35,410
will be a read key versus a read/write

00:19:33,370 --> 00:19:38,380
key for instance right and there are

00:19:35,410 --> 00:19:39,940
many more it's gonna enable easier

00:19:38,380 --> 00:19:41,650
accounting certainty for us and bluemix

00:19:39,940 --> 00:19:43,420
because now you no longer need to have

00:19:41,650 --> 00:19:45,070
an app like a fake app or something like

00:19:43,420 --> 00:19:47,800
this that's certainly a very good thing

00:19:45,070 --> 00:19:50,050
and you can maybe have multiple

00:19:47,800 --> 00:19:52,540
credentials so this is all goodness in

00:19:50,050 --> 00:19:55,179
some ways and the best part of it is we

00:19:52,540 --> 00:19:56,740
didn't have to change much we added a

00:19:55,179 --> 00:19:57,610
new endpoint but in terms of the

00:19:56,740 --> 00:20:01,299
internals of it

00:19:57,610 --> 00:20:03,880
we use the binding so if you think if

00:20:01,299 --> 00:20:06,549
you remember how it worked before how

00:20:03,880 --> 00:20:08,350
David showed it to you where after the

00:20:06,549 --> 00:20:10,059
service is created you would have your

00:20:08,350 --> 00:20:12,429
app and you would bound bind them

00:20:10,059 --> 00:20:14,920
together we're using that same thing

00:20:12,429 --> 00:20:17,260
except there's no app okay so as a

00:20:14,920 --> 00:20:18,910
broker you don't have a lot of chance if

00:20:17,260 --> 00:20:22,030
you didn't expect to use that app ID

00:20:18,910 --> 00:20:25,809
your broker should work okay so that's

00:20:22,030 --> 00:20:28,150
one of the benefit of this the last

00:20:25,809 --> 00:20:30,280
feature is sort of almost a no-brainer

00:20:28,150 --> 00:20:32,500
in some ways but always harder to

00:20:30,280 --> 00:20:35,169
implement than it appears is that if you

00:20:32,500 --> 00:20:37,600
have a service that you know you want to

00:20:35,169 --> 00:20:40,630
create but instead of having to force

00:20:37,600 --> 00:20:42,520
the user experience go to a dashboard or

00:20:40,630 --> 00:20:44,320
some additional configuration you may

00:20:42,520 --> 00:20:46,929
want to just pass all that information

00:20:44,320 --> 00:20:48,220
as you're creating the service so in

00:20:46,929 --> 00:20:51,490
other words you want to be able to pass

00:20:48,220 --> 00:20:53,049
some JSON payload when you're creating

00:20:51,490 --> 00:20:54,549
the service or when you're deleting it

00:20:53,049 --> 00:20:57,250
for instance and this is what the

00:20:54,549 --> 00:21:00,700
arbitrary parameters does so that allows

00:20:57,250 --> 00:21:03,250
you to pass you know any number of I

00:21:00,700 --> 00:21:06,640
guess a JSON payload to your service

00:21:03,250 --> 00:21:11,320
creation whatever we're going to do next

00:21:06,640 --> 00:21:14,169
is to show you a demo just because this

00:21:11,320 --> 00:21:17,260
is this is how it looks all right you

00:21:14,169 --> 00:21:19,179
just pass minus P for instant charting

00:21:17,260 --> 00:21:21,220
true to your database and then you can

00:21:19,179 --> 00:21:25,570
specify the size so this avoids having

00:21:21,220 --> 00:21:27,130
to go to a dashboard the next step this

00:21:25,570 --> 00:21:30,040
is where I'm very excited to bring my

00:21:27,130 --> 00:21:32,799
colleague Tom where are we gonna show

00:21:30,040 --> 00:21:34,540
you a demo so let me set this up as Tom

00:21:32,799 --> 00:21:36,760
gets it ready it's not live it's

00:21:34,540 --> 00:21:41,049
recorded just so that you know the gods

00:21:36,760 --> 00:21:42,700
of demos don't you know don't come here

00:21:41,049 --> 00:21:45,220
I guess we'll be guaranteed that it

00:21:42,700 --> 00:21:47,490
works but here's the important thing is

00:21:45,220 --> 00:21:50,020
that everything you see here is actually

00:21:47,490 --> 00:21:53,230
good that you will be able to go and

00:21:50,020 --> 00:21:57,520
start using today because it's a simple

00:21:53,230 --> 00:21:59,290
worker that they've implemented and to

00:21:57,520 --> 00:22:02,320
set the stage the reason we're showing

00:21:59,290 --> 00:22:05,679
you AWS is because we're trying to think

00:22:02,320 --> 00:22:08,140
of a demo that would oncome that would

00:22:05,679 --> 00:22:10,360
cover all three cases or all three new

00:22:08,140 --> 00:22:14,470
features that we have in services

00:22:10,360 --> 00:22:16,840
and silent arrested this one where what

00:22:14,470 --> 00:22:19,720
you're doing is you're using a broker to

00:22:16,840 --> 00:22:21,669
spin up a VM and even Amazon takes more

00:22:19,720 --> 00:22:23,669
than 60 seconds pull out of their VMs

00:22:21,669 --> 00:22:26,769
so in some ways we're going to show you

00:22:23,669 --> 00:22:28,450
the the asynchronous operation so this

00:22:26,769 --> 00:22:32,200
is the first thing so what you're seeing

00:22:28,450 --> 00:22:33,610
here is tom is in the console so the

00:22:32,200 --> 00:22:36,760
next step is we're gonna start the

00:22:33,610 --> 00:22:40,090
worker and create a service instance so

00:22:36,760 --> 00:22:42,669
if you can move it to show that so the

00:22:40,090 --> 00:22:45,010
broker is showing here starting here and

00:22:42,669 --> 00:22:51,250
then on the left-hand side you can see

00:22:45,010 --> 00:22:56,529
we're logging in right and we can show

00:22:51,250 --> 00:22:58,120
the different you know service you know

00:22:56,529 --> 00:22:59,889
what's available so the worker gets

00:22:58,120 --> 00:23:06,039
started I mean this is all kind of like

00:22:59,889 --> 00:23:07,830
setup it's running inside our intranet

00:23:06,039 --> 00:23:11,950
right now that's why you see this 9:00

00:23:07,830 --> 00:23:13,769
good so first thing is we show for

00:23:11,950 --> 00:23:18,100
instance that this service worker

00:23:13,769 --> 00:23:20,679
exposes AWS you know different plan on

00:23:18,100 --> 00:23:26,049
AWS some of which is for instance a

00:23:20,679 --> 00:23:27,730
micro VM or Lord VM or small VM the next

00:23:26,049 --> 00:23:33,519
step is we're gonna create one instance

00:23:27,730 --> 00:23:40,289
of this so yep so this is gonna show the

00:23:33,519 --> 00:23:40,289
next move it faster

00:23:41,410 --> 00:23:48,580
okay and what you saw very quickly on

00:23:46,660 --> 00:23:51,010
the left-hand side is that the request

00:23:48,580 --> 00:23:54,060
went through and what you can see on the

00:23:51,010 --> 00:23:57,850
Amazon dashboard is the VM being sorted

00:23:54,060 --> 00:24:00,670
now of course again as we discuss the

00:23:57,850 --> 00:24:03,760
call to create the service will return

00:24:00,670 --> 00:24:06,210
immediately the next thing to do since

00:24:03,760 --> 00:24:09,430
it's a synchronous is to pull that

00:24:06,210 --> 00:24:12,820
particular service to see the state of

00:24:09,430 --> 00:24:16,870
it so what you saw is that in the demo

00:24:12,820 --> 00:24:19,090
we did a watch on the CF service come in

00:24:16,870 --> 00:24:21,880
so that it's basically calling the

00:24:19,090 --> 00:24:23,680
service multiple time until the service

00:24:21,880 --> 00:24:26,610
is ready so what you're seeing here is

00:24:23,680 --> 00:24:29,770
exactly what the output of the new CF a

00:24:26,610 --> 00:24:33,220
come in so at this point it basically

00:24:29,770 --> 00:24:35,610
created because you know on Amazon it's

00:24:33,220 --> 00:24:38,230
pinned up so the VM is ready to be used

00:24:35,610 --> 00:24:39,640
okay so now this is the first part of

00:24:38,230 --> 00:24:42,790
the demo and you can see here that it's

00:24:39,640 --> 00:24:45,760
running so the next distros asynchronous

00:24:42,790 --> 00:24:48,310
operation the next second part of the

00:24:45,760 --> 00:24:51,370
demo is to show service keys so

00:24:48,310 --> 00:24:53,110
obviously if you have a VM what do you

00:24:51,370 --> 00:24:56,530
want to do with it you want to log into

00:24:53,110 --> 00:25:00,670
it what's the secure way to log in SSH

00:24:56,530 --> 00:25:03,670
so we can ask Amazon to create SSH boss

00:25:00,670 --> 00:25:05,610
so the broker supports create keys where

00:25:03,670 --> 00:25:08,260
it's gonna do this so you log in again

00:25:05,610 --> 00:25:09,850
all of these videos are online on

00:25:08,260 --> 00:25:12,340
YouTube so you can take a look at them

00:25:09,850 --> 00:25:15,520
they're also going to be on the repo and

00:25:12,340 --> 00:25:18,010
you can see here we're creating a key it

00:25:15,520 --> 00:25:19,420
takes a little bit of time what you will

00:25:18,010 --> 00:25:21,280
see on the left hand side on the right

00:25:19,420 --> 00:25:23,290
hand side is essentially the output of

00:25:21,280 --> 00:25:25,540
that create service command so

00:25:23,290 --> 00:25:28,030
eventually you're gonna see the command

00:25:25,540 --> 00:25:29,950
so here you can actually once the key is

00:25:28,030 --> 00:25:31,660
created you can get the details of that

00:25:29,950 --> 00:25:34,000
key and you can see this is the private

00:25:31,660 --> 00:25:37,210
key yes SH key that Amazon created for

00:25:34,000 --> 00:25:40,870
us so we can take that cut and paste it

00:25:37,210 --> 00:25:45,280
to a file and then use that to log into

00:25:40,870 --> 00:25:48,610
the VM so this is gonna be the next step

00:25:45,280 --> 00:25:52,150
thank you Tom so here's the SSH going on

00:25:48,610 --> 00:26:00,310
on the key file that we just created

00:25:52,150 --> 00:26:02,530
and it should log into the VM okay

00:26:00,310 --> 00:26:06,220
the next third part of the demo in the

00:26:02,530 --> 00:26:11,320
final part of it is to show you service

00:26:06,220 --> 00:26:15,370
parameters so again we are here on the

00:26:11,320 --> 00:26:18,100
dashboard again and we can see what the

00:26:15,370 --> 00:26:19,420
ami that's being used right so one of

00:26:18,100 --> 00:26:21,550
obvious thing that you could do for

00:26:19,420 --> 00:26:24,520
service programs for such a worker is

00:26:21,550 --> 00:26:27,220
instead of using like I say a default

00:26:24,520 --> 00:26:30,700
ami or hard coding the ami as part of

00:26:27,220 --> 00:26:33,730
your broker maybe you can allow the user

00:26:30,700 --> 00:26:36,550
as they use your broker to create VMs to

00:26:33,730 --> 00:26:37,750
pass the ami that you want so that's

00:26:36,550 --> 00:26:43,060
pretty much what we were showing you

00:26:37,750 --> 00:26:45,460
here so thank you this is the file that

00:26:43,060 --> 00:26:47,260
specifies the parameter JSON so

00:26:45,460 --> 00:26:49,200
essentially a JSON payload and then

00:26:47,260 --> 00:26:52,120
we're going to use this to pass it to

00:26:49,200 --> 00:26:54,700
the create service command and that that

00:26:52,120 --> 00:27:01,500
way we'll use that particular ami to

00:26:54,700 --> 00:27:01,500
spin up so here we pass the JSON

00:27:11,190 --> 00:27:18,680
and at the end you basically get a VM

00:27:15,030 --> 00:27:25,380
now with the new AMI so as I mentioned

00:27:18,680 --> 00:27:29,070
again this could the entire demo is was

00:27:25,380 --> 00:27:32,610
written by Tom and Edward it's a good

00:27:29,070 --> 00:27:35,670
worker it's gonna be available for you

00:27:32,610 --> 00:27:38,280
under apache license so you can go and

00:27:35,670 --> 00:27:40,080
start using it so with that let's go

00:27:38,280 --> 00:27:44,930
back to David who's gonna conclude it

00:27:40,080 --> 00:27:46,770
and we'll take some questions all right

00:27:44,930 --> 00:27:48,990
well done you guys that was a really

00:27:46,770 --> 00:27:50,340
great demo I'm actually impressed

00:27:48,990 --> 00:27:51,510
because a lot of that stuff

00:27:50,340 --> 00:27:53,550
there's our features we've literally

00:27:51,510 --> 00:27:55,140
added in the last like week or two so I

00:27:53,550 --> 00:27:58,200
don't know how you guys managed to pull

00:27:55,140 --> 00:27:59,790
that off I was really great alright

00:27:58,200 --> 00:28:01,380
we're basically we're basically done

00:27:59,790 --> 00:28:04,650
here of course we're always looking for

00:28:01,380 --> 00:28:06,990
feedback as a team our product manager

00:28:04,650 --> 00:28:10,250
is Shannon Coen this is the email

00:28:06,990 --> 00:28:13,380
address that you can reach him at right

00:28:10,250 --> 00:28:16,010
and he's also doing this is Shannon he's

00:28:13,380 --> 00:28:18,780
also doing one of the open houses

00:28:16,010 --> 00:28:20,970
tomorrow I think at 2:50 so if you have

00:28:18,780 --> 00:28:23,040
any questions for him feel free to stop

00:28:20,970 --> 00:28:25,860
by we'll both be there I think answering

00:28:23,040 --> 00:28:28,170
questions about service enablement so

00:28:25,860 --> 00:28:29,970
we're always looking for you know where

00:28:28,170 --> 00:28:32,490
can we improve and how do our AP eyes

00:28:29,970 --> 00:28:34,860
look so we'd love to hear more from you

00:28:32,490 --> 00:28:35,940
guys I thought I'd also put up some

00:28:34,860 --> 00:28:38,280
pictures of the team people who have

00:28:35,940 --> 00:28:39,600
worked on these different features yeah

00:28:38,280 --> 00:28:41,070
these other people who've worked on the

00:28:39,600 --> 00:28:43,920
services API team for the last couple

00:28:41,070 --> 00:28:45,630
months and on the top top left as a

00:28:43,920 --> 00:28:46,860
picture of Raynham ascend who isn't here

00:28:45,630 --> 00:28:49,400
today unfortunately she's back at the

00:28:46,860 --> 00:28:52,230
office but she's the incoming anchor so

00:28:49,400 --> 00:28:55,200
she'll be taking the reins of the team

00:28:52,230 --> 00:28:58,970
from that point and thank you very much

00:28:55,200 --> 00:28:58,970
do you guys have any questions

00:29:01,760 --> 00:29:07,080
on I think it's very great that you had

00:29:04,980 --> 00:29:08,430
this this extension of adjacent

00:29:07,080 --> 00:29:11,370
structure you can can bring in at

00:29:08,430 --> 00:29:13,470
service subscription to remove the the

00:29:11,370 --> 00:29:15,570
necessity of external configuration in a

00:29:13,470 --> 00:29:18,540
dashboard or whatever would you think

00:29:15,570 --> 00:29:20,390
the same would be useful at the runtime

00:29:18,540 --> 00:29:24,390
of the service for example you have this

00:29:20,390 --> 00:29:26,130
hundred megabyte my sequel and you you

00:29:24,390 --> 00:29:28,950
figure out you actually run out of space

00:29:26,130 --> 00:29:31,560
and you rather extend it to a gig

00:29:28,950 --> 00:29:33,810
wouldn't it be an interesting runtime

00:29:31,560 --> 00:29:36,780
configuration would you anticipate still

00:29:33,810 --> 00:29:38,940
having an out much sorry said to see the

00:29:36,780 --> 00:29:41,160
last part again right now you would have

00:29:38,940 --> 00:29:42,810
to do that out-of-band of course if you

00:29:41,160 --> 00:29:44,370
were to do that could you think that at

00:29:42,810 --> 00:29:46,680
some point during the runtime of the

00:29:44,370 --> 00:29:48,600
service while it's bound you could pass

00:29:46,680 --> 00:29:50,490
information to it so you means that I

00:29:48,600 --> 00:29:52,560
like upgrade the like upgrade your

00:29:50,490 --> 00:29:53,790
services right so we actually have a

00:29:52,560 --> 00:29:55,650
feature to upgrade a service instance

00:29:53,790 --> 00:29:58,440
we've had it for a while since last

00:29:55,650 --> 00:29:59,670
summer so so through the platform the

00:29:58,440 --> 00:30:01,440
broker has to support it but through the

00:29:59,670 --> 00:30:02,880
platform you can upgrade your service

00:30:01,440 --> 00:30:05,460
instance from one plant to another so

00:30:02,880 --> 00:30:08,310
that my sequel service for example you

00:30:05,460 --> 00:30:10,230
can already upgrade it from from like

00:30:08,310 --> 00:30:11,610
whatever was like 100 megabytes to a one

00:30:10,230 --> 00:30:14,190
gig or whatever other plans are offered

00:30:11,610 --> 00:30:16,440
so definitely I think as many things as

00:30:14,190 --> 00:30:17,910
we can put into the platform the better

00:30:16,440 --> 00:30:18,720
right we want to be like I said at the

00:30:17,910 --> 00:30:20,750
very beginning we want to make sure

00:30:18,720 --> 00:30:22,740
users don't have to leave the context of

00:30:20,750 --> 00:30:24,720
Cloud Foundry to do the things that they

00:30:22,740 --> 00:30:26,460
want to do for their services or worth

00:30:24,720 --> 00:30:28,910
their apps for that matter I see a

00:30:26,460 --> 00:30:28,910
question back there

00:30:32,000 --> 00:30:35,000
odd-job

00:30:37,980 --> 00:30:42,450
like

00:30:39,640 --> 00:30:43,930
does the does the broker supports custom

00:30:42,450 --> 00:30:46,750
Status Messages

00:30:43,930 --> 00:30:47,890
yeah totally so we didn't go over all of

00:30:46,750 --> 00:30:49,270
the details of the broker because I

00:30:47,890 --> 00:30:51,370
didn't want to bombard everybody with

00:30:49,270 --> 00:30:53,140
too much information but part of the

00:30:51,370 --> 00:30:55,630
broker requests during the pulling

00:30:53,140 --> 00:30:58,630
section is that the broker can return a

00:30:55,630 --> 00:31:00,310
message that says just any generic

00:30:58,630 --> 00:31:02,980
message any string so for example if

00:31:00,310 --> 00:31:04,240
your long-running operation has you know

00:31:02,980 --> 00:31:05,890
updates that the user would find

00:31:04,240 --> 00:31:09,490
valuable you can definitely put them in

00:31:05,890 --> 00:31:12,520
the in the in the response body during

00:31:09,490 --> 00:31:14,470
polling I think the message is I think

00:31:12,520 --> 00:31:16,630
that the field is called message come on

00:31:14,470 --> 00:31:18,700
method description I'm gonna screw up

00:31:16,630 --> 00:31:19,810
which one but it's one of the two and

00:31:18,700 --> 00:31:23,440
the clock controller will display that

00:31:19,810 --> 00:31:30,360
to the user thanks got some questions

00:31:23,440 --> 00:31:30,360
over here are we looking on time alright

00:31:33,030 --> 00:31:38,670
where's the question right here Domino

00:31:36,310 --> 00:31:38,670
blue shirt

00:31:40,900 --> 00:31:46,660
which question about about catalog

00:31:43,880 --> 00:31:49,010
function in scientistic a little bit a

00:31:46,660 --> 00:31:53,840
question on a catalog function in a

00:31:49,010 --> 00:31:55,850
service broker API so right now to to

00:31:53,840 --> 00:31:59,240
change anything in service broker you

00:31:55,850 --> 00:32:02,240
need to for example you can you can't

00:31:59,240 --> 00:32:05,090
rename a service you there is a problem

00:32:02,240 --> 00:32:07,040
to removing existing plans because if

00:32:05,090 --> 00:32:09,380
you introduce if you replace a service

00:32:07,040 --> 00:32:11,180
broker API implementation that will not

00:32:09,380 --> 00:32:12,890
have a distinct plan and will try to

00:32:11,180 --> 00:32:16,400
update that service broker it will fail

00:32:12,890 --> 00:32:20,600
so the overall once you deploy a broker

00:32:16,400 --> 00:32:23,660
visa with a specific catalog it's very

00:32:20,600 --> 00:32:25,850
hard to change so the lifecycle of a

00:32:23,660 --> 00:32:28,430
server broker is very hard to maintain

00:32:25,850 --> 00:32:32,530
because of this limitation is there any

00:32:28,430 --> 00:32:35,060
plan to change the improve in this area

00:32:32,530 --> 00:32:37,550
as far as how like catalog management

00:32:35,060 --> 00:32:38,810
goes I don't know that we have anything

00:32:37,550 --> 00:32:39,770
in the pipeline channeling I don't know

00:32:38,810 --> 00:32:42,070
if you could say anything else about

00:32:39,770 --> 00:32:42,070
that

00:32:53,450 --> 00:32:58,070
all right and then I think I think we're

00:32:55,460 --> 00:32:59,660
out of time I know that there were like

00:32:58,070 --> 00:33:01,100
one or two other hands feel free to I'll

00:32:59,660 --> 00:33:02,600
be hanging out up here so feel free to

00:33:01,100 --> 00:33:04,420
come find me if you have any other

00:33:02,600 --> 00:33:08,420
questions I'm happy to answer them

00:33:04,420 --> 00:33:11,059
otherwise thank you very much thank you

00:33:08,420 --> 00:33:11,059

YouTube URL: https://www.youtube.com/watch?v=MrSy4iZZPZE


