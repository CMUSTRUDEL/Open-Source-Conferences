Title: 10 common errors when pushing applications to CloudFoundry
Publication date: 2015-05-12
Playlist: Cloud Foundry Summit 2015
Description: 
	10 common errors when pushing applications to CloudFoundry - 04 Junjie Cai 720p
Captions: 
	00:00:00,420 --> 00:00:05,520
okay good afternoon everyone or my name

00:00:03,689 --> 00:00:08,660
is or jin-gi

00:00:05,520 --> 00:00:12,900
or you can call me jack if that's easier

00:00:08,660 --> 00:00:15,570
so I am the bluemix runtime architect or

00:00:12,900 --> 00:00:18,439
for those who does not know bluemix this

00:00:15,570 --> 00:00:20,789
is the IBM's cloud application platform

00:00:18,439 --> 00:00:24,210
the topic I'm going to talk about today

00:00:20,789 --> 00:00:26,130
is or the tenn Camaro's that when you

00:00:24,210 --> 00:00:27,680
know that can happen when you push an

00:00:26,130 --> 00:00:33,270
application to Cloud Foundry

00:00:27,680 --> 00:00:37,320
so our I'm going to categorize or these

00:00:33,270 --> 00:00:40,290
errors into four different types or and

00:00:37,320 --> 00:00:43,170
based on what happens you know behind

00:00:40,290 --> 00:00:45,510
the scene when application is pushed so

00:00:43,170 --> 00:00:48,300
there are client-side errors fabric

00:00:45,510 --> 00:00:50,190
level errors or they'll errors happen

00:00:48,300 --> 00:00:51,600
during after getting staging and finally

00:00:50,190 --> 00:00:56,250
when application is actually getting

00:00:51,600 --> 00:00:58,859
started so first let's take a look at

00:00:56,250 --> 00:01:00,239
you know what actually happens when the

00:00:58,859 --> 00:01:00,809
application is pushed to to Cloud

00:01:00,239 --> 00:01:02,460
Foundry

00:01:00,809 --> 00:01:05,549
I guess this diagram is probably already

00:01:02,460 --> 00:01:08,490
are familiar to many of you are but you

00:01:05,549 --> 00:01:12,240
know as you can see are there are lots

00:01:08,490 --> 00:01:16,770
of things going on when you do a safe

00:01:12,240 --> 00:01:19,979
push the cloud controller are near to

00:01:16,770 --> 00:01:22,409
talk to multiple components in order to

00:01:19,979 --> 00:01:25,259
complete the request and as you can

00:01:22,409 --> 00:01:27,630
imagine any step of those can fail and

00:01:25,259 --> 00:01:30,530
thus including the final failure of your

00:01:27,630 --> 00:01:33,000
application push so this is how I

00:01:30,530 --> 00:01:35,579
categorize the different types of errors

00:01:33,000 --> 00:01:37,950
that can happen the first type of errors

00:01:35,579 --> 00:01:40,380
are the client-side errors so this

00:01:37,950 --> 00:01:43,850
happens when your client tries to talk

00:01:40,380 --> 00:01:46,439
to the cloud controller in the cloud and

00:01:43,850 --> 00:01:49,110
there's a second level of error is

00:01:46,439 --> 00:01:52,020
fabric level errors so as I mentioned

00:01:49,110 --> 00:01:53,909
there are many clouds or components

00:01:52,020 --> 00:01:55,890
involved in order to stand up the

00:01:53,909 --> 00:01:58,500
application so like the cloud controller

00:01:55,890 --> 00:01:59,399
there's database behind it there's a

00:01:58,500 --> 00:02:01,619
blob store

00:01:59,399 --> 00:02:03,659
there's DEA and of course there's maths

00:02:01,619 --> 00:02:06,299
messaging bus you know or between all

00:02:03,659 --> 00:02:08,700
these components so if anything goes

00:02:06,299 --> 00:02:13,290
wrong there you will get an error - or

00:02:08,700 --> 00:02:15,239
and we'll see how we deal with those

00:02:13,290 --> 00:02:18,659
then the third type of errors if the

00:02:15,239 --> 00:02:20,730
application are staging errors so this

00:02:18,659 --> 00:02:23,670
usually has something to do with a bill

00:02:20,730 --> 00:02:26,069
tax and then the final step is when

00:02:23,670 --> 00:02:29,400
everything is you know created your job

00:02:26,069 --> 00:02:31,319
lit it was ready and the DA's our parent

00:02:29,400 --> 00:02:33,540
preparing to study your application

00:02:31,319 --> 00:02:35,879
something goes wrong so that that's the

00:02:33,540 --> 00:02:37,920
application startup errors so I'm going

00:02:35,879 --> 00:02:39,629
through all these types of errors and

00:02:37,920 --> 00:02:44,670
talking about the possible causes and

00:02:39,629 --> 00:02:47,480
the solutions all right so first or

00:02:44,670 --> 00:02:51,239
let's stop with simple ones are

00:02:47,480 --> 00:02:53,909
client-side errors number one or it's

00:02:51,239 --> 00:02:55,560
not really errors but you know some of

00:02:53,909 --> 00:02:59,250
the best practices that you should have

00:02:55,560 --> 00:03:01,650
followed before you start or so number

00:02:59,250 --> 00:03:03,720
one or make sure that you have the right

00:03:01,650 --> 00:03:06,659
pervert in the space that you are

00:03:03,720 --> 00:03:08,190
pushing you up likely application to you

00:03:06,659 --> 00:03:10,859
need to have the developer roll you

00:03:08,190 --> 00:03:13,049
wanted to do that number two is that or

00:03:10,859 --> 00:03:15,180
make sure that you have a right version

00:03:13,049 --> 00:03:17,430
of your clan tool like let's say F

00:03:15,180 --> 00:03:20,970
command line tool or when you work with

00:03:17,430 --> 00:03:23,370
a remote cloud or the the clan tour is

00:03:20,970 --> 00:03:25,349
evolving you know very fast or make sure

00:03:23,370 --> 00:03:28,709
that you have there also defect fix that

00:03:25,349 --> 00:03:30,299
you need number three is that make sure

00:03:28,709 --> 00:03:33,120
that you're pushing from the rightful

00:03:30,299 --> 00:03:36,120
folder right or sometimes you just you

00:03:33,120 --> 00:03:38,819
know hurry to get started and they're

00:03:36,120 --> 00:03:40,530
forgot to you or specify as a package

00:03:38,819 --> 00:03:42,780
that you want you really want to push

00:03:40,530 --> 00:03:45,209
and then the command line tool will try

00:03:42,780 --> 00:03:46,379
to upload your whole current folder to

00:03:45,209 --> 00:03:50,280
the cloud which is probably not your

00:03:46,379 --> 00:03:52,230
application finally is that or make sure

00:03:50,280 --> 00:03:55,560
that you are picking up a write manifest

00:03:52,230 --> 00:03:58,260
file or because we know that the Kamala

00:03:55,560 --> 00:04:00,750
and Toro will use that manifest file in

00:03:58,260 --> 00:04:02,790
the kernel folder and there many times

00:04:00,750 --> 00:04:04,230
if you are working with a sample you

00:04:02,790 --> 00:04:06,480
know some some other people's

00:04:04,230 --> 00:04:08,909
application that comes with a manifest

00:04:06,480 --> 00:04:11,699
file in the root folder and it specifies

00:04:08,909 --> 00:04:13,799
many options so if you don't intend to

00:04:11,699 --> 00:04:17,519
use that a manifest file rename it or

00:04:13,799 --> 00:04:20,190
just remove it alright so we are ready

00:04:17,519 --> 00:04:23,070
to go or the second error is also

00:04:20,190 --> 00:04:25,320
obvious are the route is already in use

00:04:23,070 --> 00:04:27,270
so as you probably already learn from

00:04:25,320 --> 00:04:27,780
the last session you need to provide a

00:04:27,270 --> 00:04:30,150
unique

00:04:27,780 --> 00:04:32,370
name for the application or to create

00:04:30,150 --> 00:04:35,280
the host the URL or your application

00:04:32,370 --> 00:04:36,419
right so or make sure that it's not in

00:04:35,280 --> 00:04:39,180
use by others

00:04:36,419 --> 00:04:41,460
otherwise you may need to you know or

00:04:39,180 --> 00:04:44,669
change it to another one using that

00:04:41,460 --> 00:04:46,650
option and option or of course you up if

00:04:44,669 --> 00:04:48,840
your application does not have to be

00:04:46,650 --> 00:04:51,240
served from a UI or you can use the no

00:04:48,840 --> 00:04:55,320
route option or you if you don't care

00:04:51,240 --> 00:04:57,720
you can use the random option our next

00:04:55,320 --> 00:05:00,210
error also a very simple one is where

00:04:57,720 --> 00:05:03,300
you start to exceed in your organization

00:05:00,210 --> 00:05:05,940
or all your space the memory limit so as

00:05:03,300 --> 00:05:08,880
you know each organizational space in

00:05:05,940 --> 00:05:10,770
Cloud Foundry has a memory quota so if

00:05:08,880 --> 00:05:13,650
you already push the you'll you know

00:05:10,770 --> 00:05:15,300
like applications then use they use all

00:05:13,650 --> 00:05:17,430
the memory that's allocated to your

00:05:15,300 --> 00:05:19,740
organization then your next push will

00:05:17,430 --> 00:05:24,120
fail so make sure that you have enough

00:05:19,740 --> 00:05:26,760
memory to work with next errors all most

00:05:24,120 --> 00:05:30,660
of yours so you know besides memories or

00:05:26,760 --> 00:05:34,169
disk is also our constraint a resource

00:05:30,660 --> 00:05:37,140
so the default are that that you can

00:05:34,169 --> 00:05:39,510
request is one gigabyte or so unless

00:05:37,140 --> 00:05:42,570
your cloud provider change that default

00:05:39,510 --> 00:05:44,520
or you cannot request more than that so

00:05:42,570 --> 00:05:47,610
if you specify you know that the slow

00:05:44,520 --> 00:05:49,680
decay option like two gigabyte two

00:05:47,610 --> 00:05:52,350
gigabyte disk for your application the

00:05:49,680 --> 00:05:54,539
pressure will also fail all right so

00:05:52,350 --> 00:05:57,120
these are the simple ones to Star Wars

00:05:54,539 --> 00:06:01,260
now let's to move to another slightly

00:05:57,120 --> 00:06:02,460
more complex our errors so if you are

00:06:01,260 --> 00:06:04,620
working with the command line tool

00:06:02,460 --> 00:06:07,289
sometimes you will see this right you

00:06:04,620 --> 00:06:10,530
you do a push start to uploading your

00:06:07,289 --> 00:06:13,200
application files and there after a

00:06:10,530 --> 00:06:15,390
while it report an error so this means

00:06:13,200 --> 00:06:17,580
the application file upload failed or

00:06:15,390 --> 00:06:19,440
possible cause one of course network

00:06:17,580 --> 00:06:21,560
could go wrong so make sure that you

00:06:19,440 --> 00:06:28,200
have fast enough network to work with

00:06:21,560 --> 00:06:32,220
and you know are make sure that the neck

00:06:28,200 --> 00:06:34,260
worked activity is right but there could

00:06:32,220 --> 00:06:37,500
be out of closest or and one of their

00:06:34,260 --> 00:06:40,830
user a situation that your application

00:06:37,500 --> 00:06:41,700
is really really large right so we need

00:06:40,830 --> 00:06:44,550
to understand the earth

00:06:41,700 --> 00:06:47,400
to limit here one is the application

00:06:44,550 --> 00:06:50,760
upload time there is a by default 15

00:06:47,400 --> 00:06:52,170
minutes limitation there so a few

00:06:50,760 --> 00:06:54,960
application takes more than there to

00:06:52,170 --> 00:06:58,140
upload it will fail also there is a size

00:06:54,960 --> 00:07:02,370
default which is 1 gigabyte limit so or

00:06:58,140 --> 00:07:04,740
if you you know cannot are completely

00:07:02,370 --> 00:07:07,980
upload within these two limitations

00:07:04,740 --> 00:07:09,960
consider these options first one is to

00:07:07,980 --> 00:07:13,320
exclude unnecessary files from your

00:07:09,960 --> 00:07:16,020
application or you can use that dot CF

00:07:13,320 --> 00:07:18,170
ignore file to specify what files you

00:07:16,020 --> 00:07:22,710
don't want to push from your current

00:07:18,170 --> 00:07:25,230
folder and most of the time you know or

00:07:22,710 --> 00:07:27,540
you really don't have to include all

00:07:25,230 --> 00:07:29,160
those files rights for example if you

00:07:27,540 --> 00:07:30,870
are pushing OGS applications you don't

00:07:29,160 --> 00:07:33,060
have to push all the node module

00:07:30,870 --> 00:07:34,710
dependencies of your application because

00:07:33,060 --> 00:07:36,840
the bill tak will provision those

00:07:34,710 --> 00:07:40,830
dependencies during the hour stage in

00:07:36,840 --> 00:07:42,420
time then the other option to consider

00:07:40,830 --> 00:07:45,150
is that you know if you really have to

00:07:42,420 --> 00:07:47,070
include those dependencies or thinking

00:07:45,150 --> 00:07:49,290
of another way instead of putting them

00:07:47,070 --> 00:07:51,510
into your application put them into the

00:07:49,290 --> 00:07:53,910
bill pack so you can create a custom

00:07:51,510 --> 00:07:56,340
bill pack to contain those dependencies

00:07:53,910 --> 00:07:57,720
and when during staging you know install

00:07:56,340 --> 00:07:59,820
those dependencies to your application

00:07:57,720 --> 00:08:03,930
that way you don't have to include them

00:07:59,820 --> 00:08:07,230
in your application package and lastly

00:08:03,930 --> 00:08:08,820
you know a very special trick that you

00:08:07,230 --> 00:08:12,140
can keep pushing for several times

00:08:08,820 --> 00:08:16,170
because the self command-line is a

00:08:12,140 --> 00:08:19,320
pretty smart so every time it will try

00:08:16,170 --> 00:08:21,150
to push a delta so you know by repeating

00:08:19,320 --> 00:08:23,790
this task every time you push a little

00:08:21,150 --> 00:08:26,040
more files to your cloud so that way

00:08:23,790 --> 00:08:28,050
eventually you may you know succeed to

00:08:26,040 --> 00:08:30,120
upload all your files right so you get

00:08:28,050 --> 00:08:32,820
pushed two files each time then you know

00:08:30,120 --> 00:08:35,660
if you have ten larger files or five

00:08:32,820 --> 00:08:40,919
times later you'll push them all but

00:08:35,660 --> 00:08:42,930
it's just kind of tricky so now let's

00:08:40,919 --> 00:08:45,420
move to the next type of errors which I

00:08:42,930 --> 00:08:47,340
call fabric level errors or this is

00:08:45,420 --> 00:08:50,490
where you will see weird messages like

00:08:47,340 --> 00:08:52,050
you know 500 400 and there was some

00:08:50,490 --> 00:08:55,560
error codes that you you do not

00:08:52,050 --> 00:08:57,510
understand so really if you

00:08:55,560 --> 00:09:01,470
this diagram you know every step of

00:08:57,510 --> 00:09:03,510
those our flow can fail or it's a

00:09:01,470 --> 00:09:06,480
database might be down the blob restore

00:09:03,510 --> 00:09:11,340
might be before we may run out of GA s

00:09:06,480 --> 00:09:13,589
etc right so or to find out which step

00:09:11,340 --> 00:09:15,870
really fails I think one of their our

00:09:13,589 --> 00:09:18,930
technique here's to turn on the CF

00:09:15,870 --> 00:09:20,940
underscore trace variable so that you

00:09:18,930 --> 00:09:22,770
can see all the restful communications

00:09:20,940 --> 00:09:24,810
between your client and the cloud

00:09:22,770 --> 00:09:27,480
controller and you will see exactly

00:09:24,810 --> 00:09:29,820
which step actually fails data will give

00:09:27,480 --> 00:09:32,610
you some indication on whether it fails

00:09:29,820 --> 00:09:34,800
when the application metadata is you

00:09:32,610 --> 00:09:37,290
know created or when the application

00:09:34,800 --> 00:09:40,980
droplet is you know being created etc

00:09:37,290 --> 00:09:42,630
right so are essentially if you really

00:09:40,980 --> 00:09:45,270
think this is the fabric level error

00:09:42,630 --> 00:09:48,240
there's not much you can do right you

00:09:45,270 --> 00:09:50,430
you know or you you can talk to your

00:09:48,240 --> 00:09:52,710
cloud provider to see or whether they

00:09:50,430 --> 00:09:55,710
can look into the fabric component

00:09:52,710 --> 00:09:57,779
errors like the DA locks or the cloud

00:09:55,710 --> 00:10:03,060
control logs to really find what's going

00:09:57,779 --> 00:10:05,960
on there okay so now let's talk about

00:10:03,060 --> 00:10:09,120
the third type of errors which I cause

00:10:05,960 --> 00:10:11,700
application staging errors or and the

00:10:09,120 --> 00:10:14,370
first the first category has something

00:10:11,700 --> 00:10:17,339
to do with a pill pack so number seven

00:10:14,370 --> 00:10:19,620
is or when you specify an invalid pill

00:10:17,339 --> 00:10:22,170
pack name or you are arrow when you push

00:10:19,620 --> 00:10:24,990
with a with the B option so make sure

00:10:22,170 --> 00:10:27,170
you have the right build pack name and

00:10:24,990 --> 00:10:29,930
make sure you have the right URL

00:10:27,170 --> 00:10:33,630
sometimes if you use are wrong you know

00:10:29,930 --> 00:10:35,490
wrong type the URL the message is not

00:10:33,630 --> 00:10:37,710
very helpful like the one on the left

00:10:35,490 --> 00:10:40,650
aside you just say okay it's cloning and

00:10:37,710 --> 00:10:43,350
that's then failed so you have no clue

00:10:40,650 --> 00:10:46,589
to tell why it failed so make sure you

00:10:43,350 --> 00:10:48,570
know you the cloud actually can reach to

00:10:46,589 --> 00:10:51,030
their bill packing URLs that a user

00:10:48,570 --> 00:10:52,529
specified right especially when you UI

00:10:51,030 --> 00:10:54,930
are the inside of your enterprise

00:10:52,529 --> 00:11:02,520
firewall it's not going to work if you

00:10:54,930 --> 00:11:04,200
operate into a public cloud so if you

00:11:02,520 --> 00:11:05,910
don't specify the pill pack then the

00:11:04,200 --> 00:11:08,220
cloud word trying to detect the

00:11:05,910 --> 00:11:09,300
application type by invoking Ossipee tag

00:11:08,220 --> 00:11:11,640
a method of the

00:11:09,300 --> 00:11:14,070
install the bill paxton until some bill

00:11:11,640 --> 00:11:17,850
peccaries its hem to say okay yes I'm

00:11:14,070 --> 00:11:19,650
going to stage it right but sometimes

00:11:17,850 --> 00:11:21,630
you will see this message and no bill

00:11:19,650 --> 00:11:23,660
pack exists right to actually state your

00:11:21,630 --> 00:11:26,250
application so why does that happen

00:11:23,660 --> 00:11:28,740
first maybe your application package is

00:11:26,250 --> 00:11:31,020
simply wrong and there no bill pack can

00:11:28,740 --> 00:11:33,330
actually recognize it so one of the

00:11:31,020 --> 00:11:35,610
common errors here is that or many users

00:11:33,330 --> 00:11:38,430
create application packages with a root

00:11:35,610 --> 00:11:40,500
folder inside the zip which is not

00:11:38,430 --> 00:11:42,390
required the most of bill packs who

00:11:40,500 --> 00:11:44,580
expect the application files to actually

00:11:42,390 --> 00:11:46,890
exist in the root folder instead of you

00:11:44,580 --> 00:11:49,140
know once you know one level inside

00:11:46,890 --> 00:11:52,620
another folder so make sure you are not

00:11:49,140 --> 00:11:54,930
doing that second is that again push

00:11:52,620 --> 00:11:58,230
from the right directory if you are now

00:11:54,930 --> 00:12:02,280
specifying the package explicitly number

00:11:58,230 --> 00:12:03,660
three is that or make sure that required

00:12:02,280 --> 00:12:05,790
bill pack is actually installed in your

00:12:03,660 --> 00:12:07,410
cloud right you can do self bill packs

00:12:05,790 --> 00:12:09,900
to list all the install the bill packs

00:12:07,410 --> 00:12:11,940
and see or forget up with you if you are

00:12:09,900 --> 00:12:14,900
pushing a PHP application make sure the

00:12:11,940 --> 00:12:19,500
PHP bill pack is actually installed

00:12:14,900 --> 00:12:22,770
lastly a very tricky one or is that if

00:12:19,500 --> 00:12:25,230
there's an debug is a if there's a bug

00:12:22,770 --> 00:12:27,180
in his a bill pack detect method which

00:12:25,230 --> 00:12:29,820
modifies the application files there

00:12:27,180 --> 00:12:32,730
could that could cause some or

00:12:29,820 --> 00:12:34,710
unpredictable errors because it changes

00:12:32,730 --> 00:12:38,190
the application files and then all the

00:12:34,710 --> 00:12:40,080
bill tax code afterwards not getting the

00:12:38,190 --> 00:12:41,790
original application package right so

00:12:40,080 --> 00:12:45,180
that actually happened with my team

00:12:41,790 --> 00:12:46,800
means at some point so or make sure the

00:12:45,180 --> 00:12:54,720
bill pack is doing the right thing when

00:12:46,800 --> 00:12:59,400
do does the detect so or after a bill

00:12:54,720 --> 00:13:01,170
pack is correctly formed and detected so

00:12:59,400 --> 00:13:03,570
the next thing that bill pack do is to

00:13:01,170 --> 00:13:07,040
actually compile your application so

00:13:03,570 --> 00:13:10,590
error number nine is a very big error or

00:13:07,040 --> 00:13:12,870
there are many closes or but the message

00:13:10,590 --> 00:13:15,000
is simple you know you get from there

00:13:12,870 --> 00:13:19,490
Kamala and tells you application state

00:13:15,000 --> 00:13:22,750
your file and that's it so what do we do

00:13:19,490 --> 00:13:25,120
turn on traces if the bill pack has

00:13:22,750 --> 00:13:27,310
that support so I listed some bill packs

00:13:25,120 --> 00:13:30,160
that does have those support job and

00:13:27,310 --> 00:13:34,870
liberty bill packs have that JPB log or

00:13:30,160 --> 00:13:37,720
level that you can set to debug and then

00:13:34,870 --> 00:13:40,360
our noj's bill pack if you want to see

00:13:37,720 --> 00:13:44,320
more NPM messengers or you can actually

00:13:40,360 --> 00:13:46,540
use that MPM configure XYZ invaluable to

00:13:44,320 --> 00:13:50,620
set various configurations or you can

00:13:46,540 --> 00:13:52,390
use that n MPM RC file to include a new

00:13:50,620 --> 00:13:54,730
application package right you can

00:13:52,390 --> 00:13:57,370
specify the log level too silly to see

00:13:54,730 --> 00:14:00,340
all those NPM very deep note log

00:13:57,370 --> 00:14:04,980
messengers as a new PHP Bill pack also

00:14:00,340 --> 00:14:07,540
has the PP debug that you can enable and

00:14:04,980 --> 00:14:10,840
then once you enable all those log

00:14:07,540 --> 00:14:13,150
masters or reads the locks or you can do

00:14:10,840 --> 00:14:15,520
it in two ways you can query the queries

00:14:13,150 --> 00:14:17,740
a recent locks by using that or first

00:14:15,520 --> 00:14:19,900
command or you can redo logs

00:14:17,740 --> 00:14:21,760
continuously what you can do is that you

00:14:19,900 --> 00:14:24,310
have one window to push the application

00:14:21,760 --> 00:14:26,950
and then have the other window to read

00:14:24,310 --> 00:14:30,640
the locks so it's like the tails a lot

00:14:26,950 --> 00:14:33,940
kind of or experience so once you have

00:14:30,640 --> 00:14:37,950
some locks then we can look into what

00:14:33,940 --> 00:14:40,150
might be the course first number one or

00:14:37,950 --> 00:14:42,730
it's all your food again

00:14:40,150 --> 00:14:45,670
do you have the wrong do you have the

00:14:42,730 --> 00:14:46,990
wrong application package or so for

00:14:45,670 --> 00:14:49,540
example if you are pushing a node.js

00:14:46,990 --> 00:14:51,580
application your packet the dodgy song

00:14:49,540 --> 00:14:53,500
needed to have the right syntax right if

00:14:51,580 --> 00:14:55,600
it's bad then the bill Packer will fail

00:14:53,500 --> 00:14:59,260
to read it

00:14:55,600 --> 00:15:02,050
so that's number one course number two

00:14:59,260 --> 00:15:04,150
is that the bill packets you know as I'm

00:15:02,050 --> 00:15:06,580
able to reach external dependencies

00:15:04,150 --> 00:15:09,490
during staging are many bill packs who

00:15:06,580 --> 00:15:11,440
are download external dependencies when

00:15:09,490 --> 00:15:13,210
they try to stage your application so

00:15:11,440 --> 00:15:15,430
like again again for an odious

00:15:13,210 --> 00:15:17,650
application and it will talk to the MCM

00:15:15,430 --> 00:15:21,430
repository to download the modules you

00:15:17,650 --> 00:15:24,760
know claimed by your package or JSON so

00:15:21,430 --> 00:15:27,280
make sure that they're the the server's

00:15:24,760 --> 00:15:29,710
the cloud has the connection to those

00:15:27,280 --> 00:15:32,440
dependencies right and if there's the

00:15:29,710 --> 00:15:34,839
security group setting can or impact

00:15:32,440 --> 00:15:36,670
this because it is set up some network

00:15:34,839 --> 00:15:39,610
rules so make sure the security

00:15:36,670 --> 00:15:43,900
group rules is not bending or the

00:15:39,610 --> 00:15:47,610
connection to those dependencies course

00:15:43,900 --> 00:15:51,160
number three is that staging timeout

00:15:47,610 --> 00:15:53,200
again just like you know when you up to

00:15:51,160 --> 00:15:57,040
the upload staging also has a timeout

00:15:53,200 --> 00:15:59,050
which by default is 15 minutes and

00:15:57,040 --> 00:16:02,680
that's the maximum you can use a t

00:15:59,050 --> 00:16:06,520
option or two to specify this timeout by

00:16:02,680 --> 00:16:09,550
default it's 60 or seconds but you can

00:16:06,520 --> 00:16:13,000
wreak resit up two or three three

00:16:09,550 --> 00:16:14,890
minutes but that's what you have so make

00:16:13,000 --> 00:16:18,700
sure that you are not spending too much

00:16:14,890 --> 00:16:20,410
time you staging or if if you have to

00:16:18,700 --> 00:16:22,360
then you need to customize a bill pack

00:16:20,410 --> 00:16:26,590
right two less time-consuming things

00:16:22,360 --> 00:16:30,160
during stated course number four is

00:16:26,590 --> 00:16:32,080
staging uses too much memory so I guess

00:16:30,160 --> 00:16:34,330
some of you know that you know staging

00:16:32,080 --> 00:16:36,550
actory also happens inside a wooden

00:16:34,330 --> 00:16:38,860
container just like the application is

00:16:36,550 --> 00:16:41,890
running right so what the container has

00:16:38,860 --> 00:16:44,260
a memory limitation and a disk

00:16:41,890 --> 00:16:46,330
limitation you cannot go beyond that if

00:16:44,260 --> 00:16:48,820
you go beyond as a memory limitation

00:16:46,330 --> 00:16:52,030
sorry you will get killed silently and

00:16:48,820 --> 00:16:53,650
suddenly so if you experience this you

00:16:52,030 --> 00:16:55,660
know you pushed several times and died

00:16:53,650 --> 00:16:58,480
at different time points without you

00:16:55,660 --> 00:17:00,340
know much hour in occasion you may guess

00:16:58,480 --> 00:17:03,730
okay maybe I'm killed because I'm

00:17:00,340 --> 00:17:06,280
consuming too much memory and disk

00:17:03,730 --> 00:17:08,170
similarly and but the nicest thing with

00:17:06,280 --> 00:17:09,460
disk is that you wouldn't get killed you

00:17:08,170 --> 00:17:12,310
just want to be able to write to disk

00:17:09,460 --> 00:17:14,890
anymore so when that happens the bill

00:17:12,310 --> 00:17:17,260
pack with different error messages

00:17:14,890 --> 00:17:21,120
depending on house you know how its

00:17:17,260 --> 00:17:26,110
writing to the disk right so again or

00:17:21,120 --> 00:17:29,220
make sure that's not happening course

00:17:26,110 --> 00:17:34,090
number six is that when you are using a

00:17:29,220 --> 00:17:36,490
matching buildtak or level so many of

00:17:34,090 --> 00:17:39,160
the tutorial or samples out there in the

00:17:36,490 --> 00:17:41,260
net or when they tell you how to do the

00:17:39,160 --> 00:17:44,950
push they always push using the master

00:17:41,260 --> 00:17:46,450
branch of the bill pack or personally I

00:17:44,950 --> 00:17:49,120
don't think that's a good idea

00:17:46,450 --> 00:17:50,500
because that means you are using bill

00:17:49,120 --> 00:17:52,750
pack Coda's that still you

00:17:50,500 --> 00:17:54,490
developer miss tellers instead of what

00:17:52,750 --> 00:17:56,140
you really want to do is to specify I

00:17:54,490 --> 00:17:58,390
release the version of the pill pack

00:17:56,140 --> 00:18:01,540
like what I'm shooting there you know

00:17:58,390 --> 00:18:03,910
you use the tag v3 you got there these

00:18:01,540 --> 00:18:06,130
three of their Java build happy in this

00:18:03,910 --> 00:18:09,160
case instead of using its master right

00:18:06,130 --> 00:18:10,750
so our another pill are another best

00:18:09,160 --> 00:18:13,990
practice that you you probably want to

00:18:10,750 --> 00:18:15,460
follow next course is that or your

00:18:13,990 --> 00:18:17,560
applications pick it out by the wrong

00:18:15,460 --> 00:18:19,840
pill pack right remember if you do

00:18:17,560 --> 00:18:22,090
specify the pill pack you were the car

00:18:19,840 --> 00:18:25,060
foundry will do the detect thing and

00:18:22,090 --> 00:18:27,490
there sometimes you know another or

00:18:25,060 --> 00:18:29,260
aggressive will pack may grab your

00:18:27,490 --> 00:18:32,170
application say okay I want to stage

00:18:29,260 --> 00:18:34,870
this but you don't want to use that bill

00:18:32,170 --> 00:18:37,120
pack so in that case or of course you

00:18:34,870 --> 00:18:40,360
can override that through the B option

00:18:37,120 --> 00:18:42,160
or but really I think there's something

00:18:40,360 --> 00:18:43,630
to fix either the bill pack is too

00:18:42,160 --> 00:18:45,760
aggressive we need to you need to fix

00:18:43,630 --> 00:18:47,950
that or your application contains some

00:18:45,760 --> 00:18:51,120
you know suspicious files that are

00:18:47,950 --> 00:18:56,860
another build hackers interested in so

00:18:51,120 --> 00:18:59,530
fix that as well as a route course last

00:18:56,860 --> 00:19:02,200
one is very tricky again and this is a

00:18:59,530 --> 00:19:05,230
real problem that some users encountered

00:19:02,200 --> 00:19:07,540
and reported on our stack overflow so

00:19:05,230 --> 00:19:10,210
what happens here is that you know when

00:19:07,540 --> 00:19:14,260
DEA invokes or as a bill pack code

00:19:10,210 --> 00:19:16,240
detect compile and a release or imagine

00:19:14,260 --> 00:19:18,640
what happens if the script does not have

00:19:16,240 --> 00:19:22,480
the execute bit set in there far as

00:19:18,640 --> 00:19:26,140
attributes the compiler fail of course

00:19:22,480 --> 00:19:28,450
and again you do not get any helpful

00:19:26,140 --> 00:19:31,380
messages from from the output to just

00:19:28,450 --> 00:19:35,920
say cloning the bill pack then silently

00:19:31,380 --> 00:19:40,170
compilation failed so make sure that you

00:19:35,920 --> 00:19:42,250
are setting the execution bit or to your

00:19:40,170 --> 00:19:44,350
three scripts in the bill pack

00:19:42,250 --> 00:19:46,420
especially when you are cloning you know

00:19:44,350 --> 00:19:48,850
you are up bill pack and then we

00:19:46,420 --> 00:19:51,220
push it from your Windows machine to our

00:19:48,850 --> 00:19:53,860
remote repository you may lose that bit

00:19:51,220 --> 00:19:58,470
in those three scripts and you need to

00:19:53,860 --> 00:20:01,570
set them explicitly all right so that's

00:19:58,470 --> 00:20:03,910
compilation errors and as the last big

00:20:01,570 --> 00:20:06,130
error in startup errors

00:20:03,910 --> 00:20:08,350
this is where you know the droplet is

00:20:06,130 --> 00:20:11,500
already created you see that message

00:20:08,350 --> 00:20:11,740
right uploading droplet so so far so

00:20:11,500 --> 00:20:14,500
good

00:20:11,740 --> 00:20:16,900
and then the DA's are provision the to

00:20:14,500 --> 00:20:19,120
actually study application and then you

00:20:16,900 --> 00:20:21,580
start to see in this you know endless

00:20:19,120 --> 00:20:23,850
messenger studying stopped studying

00:20:21,580 --> 00:20:25,900
stopped and essentially tells you

00:20:23,850 --> 00:20:29,830
applications that are successful or

00:20:25,900 --> 00:20:31,390
timeout and you if you query the opinion

00:20:29,830 --> 00:20:37,290
standards and they may report crashing

00:20:31,390 --> 00:20:41,650
or studying it just cannot stand up so

00:20:37,290 --> 00:20:44,260
how to diagnosis again our log is your

00:20:41,650 --> 00:20:47,140
friend or you can do these two things

00:20:44,260 --> 00:20:49,980
again to see the messages that spit it

00:20:47,140 --> 00:20:49,980
out in the log

00:20:50,160 --> 00:20:56,950
so the possible closes number one is

00:20:53,680 --> 00:21:03,190
again or you are taking too long to

00:20:56,950 --> 00:21:05,470
start our there's the limit is again 180

00:21:03,190 --> 00:21:08,410
seconds so if your application can now

00:21:05,470 --> 00:21:13,180
start within this limit or you are going

00:21:08,410 --> 00:21:17,860
to fail so if it's not really enough

00:21:13,180 --> 00:21:19,510
what to do or root cause why is that you

00:21:17,860 --> 00:21:21,640
are doing too much initialization your

00:21:19,510 --> 00:21:23,770
application code like for example you

00:21:21,640 --> 00:21:26,140
are reading lots of data to initialize

00:21:23,770 --> 00:21:28,030
your application so try not to do that

00:21:26,140 --> 00:21:30,390
right or you can do lazy initialization

00:21:28,030 --> 00:21:33,370
or you can do a synchronous

00:21:30,390 --> 00:21:35,140
initialization the other option is that

00:21:33,370 --> 00:21:38,440
you can start your application with the

00:21:35,140 --> 00:21:40,150
no rot option that way the DA will just

00:21:38,440 --> 00:21:43,090
kick off your application process and

00:21:40,150 --> 00:21:45,340
then if it start it will report back to

00:21:43,090 --> 00:21:48,340
the house menu saying okay it's started

00:21:45,340 --> 00:21:51,250
right and we're not or try to ping the

00:21:48,340 --> 00:21:52,480
port of your application so then you

00:21:51,250 --> 00:21:55,750
can't wait for the application to

00:21:52,480 --> 00:21:59,820
complete its initialization and then map

00:21:55,750 --> 00:22:03,690
route to actually bind it to the our URL

00:21:59,820 --> 00:22:07,420
so that's one thing that you can do our

00:22:03,690 --> 00:22:09,160
second root cause is when you are

00:22:07,420 --> 00:22:11,020
listening out of the wrong port right so

00:22:09,160 --> 00:22:12,820
the application actually started and

00:22:11,020 --> 00:22:14,740
everything goes well but it's just not

00:22:12,820 --> 00:22:17,470
listening other port that the DA

00:22:14,740 --> 00:22:17,710
expected to listen so make sure that you

00:22:17,470 --> 00:22:19,840
are

00:22:17,710 --> 00:22:22,029
using that environmental and use that

00:22:19,840 --> 00:22:26,470
port to open your application HTTP

00:22:22,029 --> 00:22:29,289
listener sir third the rule course is

00:22:26,470 --> 00:22:30,640
when your application during start try

00:22:29,289 --> 00:22:33,159
to reach out to some external

00:22:30,640 --> 00:22:36,100
dependencies and because some reasons

00:22:33,159 --> 00:22:39,429
it's going really slow so make sure that

00:22:36,100 --> 00:22:44,860
the connection is good and the security

00:22:39,429 --> 00:22:47,770
group setting could also impact that so

00:22:44,860 --> 00:22:50,740
course number two are is the application

00:22:47,770 --> 00:22:53,200
actually failure to start and exit eight

00:22:50,740 --> 00:22:56,590
or applications in Cloud Foundry should

00:22:53,200 --> 00:22:58,450
never exit by itself right so if you

00:22:56,590 --> 00:23:00,429
exit the house mail you will think okay

00:22:58,450 --> 00:23:03,250
you are died and I'm going to study you

00:23:00,429 --> 00:23:06,120
again so check your application logic

00:23:03,250 --> 00:23:08,710
don't exit our exceptions right or

00:23:06,120 --> 00:23:10,570
sometimes it's probably just you know

00:23:08,710 --> 00:23:12,250
you are missing a service binding so

00:23:10,570 --> 00:23:14,500
make sure your application has all the

00:23:12,250 --> 00:23:17,409
service bond when you get getting this

00:23:14,500 --> 00:23:20,890
starting course number three is

00:23:17,409 --> 00:23:22,659
consuming too much memory so our like

00:23:20,890 --> 00:23:24,309
staging or your application container

00:23:22,659 --> 00:23:26,529
while you do the push you specify the

00:23:24,309 --> 00:23:29,289
memory limitation right and you cannot

00:23:26,529 --> 00:23:32,350
exceed that if you do again you'll get

00:23:29,289 --> 00:23:34,510
killed suddenly and silently so make

00:23:32,350 --> 00:23:39,220
sure you have enough memory to run your

00:23:34,510 --> 00:23:41,590
application disk our same situation as

00:23:39,220 --> 00:23:46,440
staging right there's a default which is

00:23:41,590 --> 00:23:49,929
to kick our yeah which is to our what

00:23:46,440 --> 00:23:53,679
sorry to gigabytes right so if you go

00:23:49,929 --> 00:23:55,990
beyond that or the cloud provider may

00:23:53,679 --> 00:23:57,760
not allow you to do that or so you need

00:23:55,990 --> 00:23:59,799
to think about you know maybe you should

00:23:57,760 --> 00:24:02,740
use external storage right a blob or

00:23:59,799 --> 00:24:04,029
service or storage service to or to

00:24:02,740 --> 00:24:07,090
store additional things instead of

00:24:04,029 --> 00:24:10,059
writing to your local disk that's not a

00:24:07,090 --> 00:24:17,549
that's an anti-pattern you in there you

00:24:10,059 --> 00:24:20,140
know twelve factor application anyway so

00:24:17,549 --> 00:24:22,179
these are some advanced diagnose

00:24:20,140 --> 00:24:25,929
techniques that you might use in

00:24:22,179 --> 00:24:29,559
addition to what I showed already first

00:24:25,929 --> 00:24:31,240
is that you know where your application

00:24:29,559 --> 00:24:32,800
keep get killed

00:24:31,240 --> 00:24:35,080
you have no way to find out what's going

00:24:32,800 --> 00:24:37,630
on right and you really want to get into

00:24:35,080 --> 00:24:39,370
the container to examine the files there

00:24:37,630 --> 00:24:42,730
you know see whether there are some

00:24:39,370 --> 00:24:45,580
crash or dump files etc so the trick one

00:24:42,730 --> 00:24:50,170
trick you can do is or if the run time

00:24:45,580 --> 00:24:52,179
has a way to run a hook when it exit you

00:24:50,170 --> 00:24:55,360
can do that so for example with the IBM

00:24:52,179 --> 00:24:58,510
JDK there's a option called um tour that

00:24:55,360 --> 00:25:01,510
you can use to specify a script to run

00:24:58,510 --> 00:25:03,760
when it exit that's when the JVM accent

00:25:01,510 --> 00:25:06,370
will evoke that script so in this case

00:25:03,760 --> 00:25:08,650
the screw up is sleep for one day so

00:25:06,370 --> 00:25:12,130
that means you know if you're in the

00:25:08,650 --> 00:25:13,720
midnight the application got killed and

00:25:12,130 --> 00:25:15,400
it were stay for one day so the next

00:25:13,720 --> 00:25:17,080
morning you wake up you go to

00:25:15,400 --> 00:25:19,540
application and there see it's not

00:25:17,080 --> 00:25:22,720
working but its body is still there you

00:25:19,540 --> 00:25:25,059
can use CF files to look into other you

00:25:22,720 --> 00:25:28,000
know files still there in the container

00:25:25,059 --> 00:25:31,780
right and there to make it more useful

00:25:28,000 --> 00:25:33,760
if you combined with the dump or tool so

00:25:31,780 --> 00:25:35,620
the word generator dumb memory damn heap

00:25:33,760 --> 00:25:38,980
dump spread dump then you can download

00:25:35,620 --> 00:25:41,559
those dumps and do more analysis if the

00:25:38,980 --> 00:25:43,720
runtime does not have those hook another

00:25:41,559 --> 00:25:46,059
trick that you can do with all the

00:25:43,720 --> 00:25:48,250
runtimes all the bill packs and that you

00:25:46,059 --> 00:25:53,020
can override as a start up command and

00:25:48,250 --> 00:25:55,720
append that magic command sleep one day

00:25:53,020 --> 00:25:57,190
again right you can find as a normal

00:25:55,720 --> 00:26:00,210
command by you know push a simple

00:25:57,190 --> 00:26:02,770
application make sure it says get a

00:26:00,210 --> 00:26:05,860
successfully started you will see the

00:26:02,770 --> 00:26:08,110
actual static man in the arm in dar safe

00:26:05,860 --> 00:26:08,559
command line output right copy that

00:26:08,110 --> 00:26:11,710
command

00:26:08,559 --> 00:26:13,870
appended sleep one day thing and then

00:26:11,710 --> 00:26:15,730
push it with no route or with the

00:26:13,870 --> 00:26:17,650
application in problem and then the

00:26:15,730 --> 00:26:20,320
application will get pushed successfully

00:26:17,650 --> 00:26:21,940
and they were stay for one day for you

00:26:20,320 --> 00:26:24,100
to examine what's going on there right

00:26:21,940 --> 00:26:26,650
and of course I feel after you are done

00:26:24,100 --> 00:26:30,340
you can't stop it so that's the a

00:26:26,650 --> 00:26:33,580
general trick that you can do with crash

00:26:30,340 --> 00:26:35,800
in applications the other technique is

00:26:33,580 --> 00:26:38,830
to run an agent inside your application

00:26:35,800 --> 00:26:40,360
container as a main process so that the

00:26:38,830 --> 00:26:42,070
house manager will not care your

00:26:40,360 --> 00:26:44,800
application right because the agent

00:26:42,070 --> 00:26:46,900
process will be alive

00:26:44,800 --> 00:26:48,910
and then you can you know with the

00:26:46,900 --> 00:26:52,150
container container you can use tools

00:26:48,910 --> 00:26:55,240
like they're safe SSH command to SSH

00:26:52,150 --> 00:26:57,400
into your container and then start your

00:26:55,240 --> 00:26:58,840
application there and you know work with

00:26:57,400 --> 00:27:01,780
it interactively to find out what's

00:26:58,840 --> 00:27:04,750
going on in bluemix we also introduced

00:27:01,780 --> 00:27:08,230
an interesting feature called developer

00:27:04,750 --> 00:27:11,290
mode with which we also have an agent

00:27:08,230 --> 00:27:13,600
built-in and you can do are things like

00:27:11,290 --> 00:27:17,020
remote debugging and also do that you

00:27:13,600 --> 00:27:19,000
know the SSH are alike experience you

00:27:17,020 --> 00:27:20,950
can have a console window to work with

00:27:19,000 --> 00:27:22,780
so those those are the last two

00:27:20,950 --> 00:27:24,490
techniques will also help you to

00:27:22,780 --> 00:27:28,780
diagnose our application startup

00:27:24,490 --> 00:27:30,640
problems final tip is that where you you

00:27:28,780 --> 00:27:32,980
know keep pushing applications several

00:27:30,640 --> 00:27:35,110
times sometimes some weird things will

00:27:32,980 --> 00:27:39,160
get cached and the bill pack probably is

00:27:35,110 --> 00:27:40,780
you know master things app so one of the

00:27:39,160 --> 00:27:43,030
practice that you know just delete the

00:27:40,780 --> 00:27:44,890
whole application and start over that

00:27:43,030 --> 00:27:47,260
will clean all the cash and you'll get a

00:27:44,890 --> 00:27:53,170
fresh start so sometimes it's a good tip

00:27:47,260 --> 00:27:55,120
to to have all right so as a summary so

00:27:53,170 --> 00:27:58,410
I think and today I quickly walked

00:27:55,120 --> 00:28:01,180
through all these four types of errors

00:27:58,410 --> 00:28:02,920
hopefully that's a complete coverage you

00:28:01,180 --> 00:28:05,910
know of many of the common errors that a

00:28:02,920 --> 00:28:08,320
you may encounter in Cloud Foundry and

00:28:05,910 --> 00:28:10,570
the techniques that you can use to

00:28:08,320 --> 00:28:13,240
diagnose or tease and the options that

00:28:10,570 --> 00:28:17,620
you have to solve them so with that I

00:28:13,240 --> 00:28:22,920
think I probably still have two minutes

00:28:17,620 --> 00:28:22,920
probably for one question yes please

00:28:28,370 --> 00:28:33,690
right now it's it's kind of our properly

00:28:31,440 --> 00:28:37,520
to bluemix or as part of the liberal

00:28:33,690 --> 00:28:37,520
pack and you just build happy in bluemix

00:28:38,930 --> 00:28:47,520
since this is short are any other

00:28:41,250 --> 00:28:49,200
questions before close if no are thanks

00:28:47,520 --> 00:28:50,780
for coming and I hope you enjoy this

00:28:49,200 --> 00:28:54,559
thank you

00:28:50,780 --> 00:28:54,559

YouTube URL: https://www.youtube.com/watch?v=0brLRcEO3eQ


