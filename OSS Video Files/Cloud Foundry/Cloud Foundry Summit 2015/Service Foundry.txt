Title: Service Foundry
Publication date: 2015-05-12
Playlist: Cloud Foundry Summit 2015
Description: 
	Service Foundry - 07 Marco Hochstrasser, Colin Humphreys 720p
Captions: 
	00:00:00,030 --> 00:00:07,020
good afternoon this is my third talk of

00:00:06,480 --> 00:00:10,530
the day

00:00:07,020 --> 00:00:15,059
I'm also very jet-lagged so I'm going to

00:00:10,530 --> 00:00:17,010
try and stay awake if I do fall asleep I

00:00:15,059 --> 00:00:19,350
will fall over off the stage and you can

00:00:17,010 --> 00:00:22,170
all laugh at me and that'll be very

00:00:19,350 --> 00:00:26,310
entertaining for everybody so welcome to

00:00:22,170 --> 00:00:28,800
our talk on service boundary you may be

00:00:26,310 --> 00:00:32,489
thinking what on earth is service

00:00:28,800 --> 00:00:35,670
boundary we're going to explain that I'm

00:00:32,489 --> 00:00:39,030
Colin Humphreys I'm the CEO of cloud

00:00:35,670 --> 00:00:43,050
credo I'm presenting with Marko from

00:00:39,030 --> 00:00:47,370
Swisscom hey guys I'm Marko CEO of some

00:00:43,050 --> 00:00:51,270
cloud labs so we're going to be talking

00:00:47,370 --> 00:00:55,110
about service boundary and I think I can

00:00:51,270 --> 00:01:00,570
encapsulate service boundary in this

00:00:55,110 --> 00:01:01,320
very simple slide so I love Cloud

00:01:00,570 --> 00:01:06,299
Foundry

00:01:01,320 --> 00:01:10,770
I loved CF push application I think

00:01:06,299 --> 00:01:13,500
that's a great journey and I want to

00:01:10,770 --> 00:01:18,780
raise the question why can't I do the

00:01:13,500 --> 00:01:28,020
same thing for services why can't I CF

00:01:18,780 --> 00:01:30,960
push MySQL and give it a disk so this is

00:01:28,020 --> 00:01:36,810
based on the idea that if something is

00:01:30,960 --> 00:01:41,040
good and it works do more of it so I

00:01:36,810 --> 00:01:46,170
love CF push so let's explore the idea

00:01:41,040 --> 00:01:53,270
of being able to CF push services and

00:01:46,170 --> 00:01:55,619
data this is the agenda for the talk

00:01:53,270 --> 00:01:58,909
Marco is going to take us through the

00:01:55,619 --> 00:02:04,770
current state of statefulness in pass

00:01:58,909 --> 00:02:08,099
and a brief state of the nation that's

00:02:04,770 --> 00:02:10,170
the best joke in the entire talk by the

00:02:08,099 --> 00:02:12,599
way state of the nation so it doesn't

00:02:10,170 --> 00:02:13,660
get any better than that you can leave

00:02:12,599 --> 00:02:16,600
now if you want to

00:02:13,660 --> 00:02:18,640
best joke then I'm going to talk a

00:02:16,600 --> 00:02:23,020
little bit about challenges solving

00:02:18,640 --> 00:02:26,140
stateful problems then we're going to

00:02:23,020 --> 00:02:27,910
talk about the solution that we change

00:02:26,140 --> 00:02:30,070
the data services so they work with

00:02:27,910 --> 00:02:33,790
service boundary and then we're going to

00:02:30,070 --> 00:02:35,470
talk about the solution part derp we're

00:02:33,790 --> 00:02:37,330
going to change the platform so we have

00:02:35,470 --> 00:02:39,760
the right kind of primitives and the

00:02:37,330 --> 00:02:44,800
right ideas to enable this way of

00:02:39,760 --> 00:02:46,810
delivering services so I'm going to hand

00:02:44,800 --> 00:02:49,540
over to Marko to talk about statefulness

00:02:46,810 --> 00:02:52,030
in pass cool

00:02:49,540 --> 00:02:53,980
thanks Colin so we started this

00:02:52,030 --> 00:02:56,230
discussion and Colin died a couple of

00:02:53,980 --> 00:02:58,750
months ago and went through it and

00:02:56,230 --> 00:03:00,580
really check what is the problem and I

00:02:58,750 --> 00:03:02,080
want to explain a little bit about

00:03:00,580 --> 00:03:04,540
statefulness and pause but it really

00:03:02,080 --> 00:03:07,270
means why do we need state and pass and

00:03:04,540 --> 00:03:09,880
it's very simple it's clear that Cloud

00:03:07,270 --> 00:03:12,010
Foundry and passes in general handled

00:03:09,880 --> 00:03:13,990
very well the stateless applications to

00:03:12,010 --> 00:03:16,000
12 factor applications to micro services

00:03:13,990 --> 00:03:17,980
or what everybody says today cloud

00:03:16,000 --> 00:03:19,950
native applications are well hand

00:03:17,980 --> 00:03:23,200
although with platform as a service

00:03:19,950 --> 00:03:25,390
platforms see ICD processes you can all

00:03:23,200 --> 00:03:26,980
do that with pass but what about

00:03:25,390 --> 00:03:30,070
underneath what about the stateful

00:03:26,980 --> 00:03:32,770
service what can you do that how can you

00:03:30,070 --> 00:03:34,570
do that and where do you do that so

00:03:32,770 --> 00:03:37,510
today we answer this question usually

00:03:34,570 --> 00:03:39,700
with monolithic databases we do it with

00:03:37,510 --> 00:03:41,560
what we already know we take our

00:03:39,700 --> 00:03:43,930
existing database infrastructures our

00:03:41,560 --> 00:03:47,800
existing database vendors which we know

00:03:43,930 --> 00:03:50,580
a couple and just deploy them in scale

00:03:47,800 --> 00:03:53,650
and try to somehow implement it in pass

00:03:50,580 --> 00:03:55,540
but the fact is that you cannot run an

00:03:53,650 --> 00:03:58,150
oracle cluster in a cloud foundry

00:03:55,540 --> 00:04:00,310
container neither you can run or

00:03:58,150 --> 00:04:02,830
actually you can run a MongoDB in a

00:04:00,310 --> 00:04:05,890
cloud foundry container but it's not

00:04:02,830 --> 00:04:08,680
stateful if somehow the container goes

00:04:05,890 --> 00:04:10,230
down you lose your data so what is the

00:04:08,680 --> 00:04:12,760
point in here the point in here is

00:04:10,230 --> 00:04:14,860
databases aren't ready for pass yet to

00:04:12,760 --> 00:04:18,540
run in a pass environment so we take

00:04:14,860 --> 00:04:18,540
them away and run them somewhere else

00:04:20,000 --> 00:04:26,600
so the challenges we are Swisscom and we

00:04:23,060 --> 00:04:28,790
are a service provider in Europe the

00:04:26,600 --> 00:04:30,830
challenges which we have here is we have

00:04:28,790 --> 00:04:33,530
existing service landscapes we have huge

00:04:30,830 --> 00:04:36,980
clusters of mssql Oracle databases and

00:04:33,530 --> 00:04:39,110
others and we try to attach them to the

00:04:36,980 --> 00:04:40,880
past environment which works we can use

00:04:39,110 --> 00:04:42,830
them we can make shared databases out of

00:04:40,880 --> 00:04:44,540
it we can leverage these services and

00:04:42,830 --> 00:04:47,180
know-how we have on existing databases

00:04:44,540 --> 00:04:49,310
and offer them as a service but the

00:04:47,180 --> 00:04:50,990
problem we have is they not scale like

00:04:49,310 --> 00:04:52,940
they should when you think about how

00:04:50,990 --> 00:04:55,630
Pascal's so if you scale your

00:04:52,940 --> 00:04:58,460
application to 1,000 instances from one

00:04:55,630 --> 00:05:00,770
immediately the Oracle class will just

00:04:58,460 --> 00:05:03,440
not just react on that because he

00:05:00,770 --> 00:05:05,480
doesn't know so either you go there and

00:05:03,440 --> 00:05:09,200
Cohen will talk about that and try to

00:05:05,480 --> 00:05:11,570
make that scalability automate it or you

00:05:09,200 --> 00:05:15,020
change something there how you interact

00:05:11,570 --> 00:05:16,850
with the Oracle class differences the

00:05:15,020 --> 00:05:18,740
same thing which we see is to your

00:05:16,850 --> 00:05:22,160
ability and compatibility of exiting

00:05:18,740 --> 00:05:23,810
services it is very hard we have a

00:05:22,160 --> 00:05:25,520
couple of services out there and they

00:05:23,810 --> 00:05:27,950
all run smooth but they all have their

00:05:25,520 --> 00:05:31,520
own teams we have thousands of people

00:05:27,950 --> 00:05:33,650
just operating services today so they

00:05:31,520 --> 00:05:36,200
operate their run and my sequel database

00:05:33,650 --> 00:05:36,530
they are professional in that but that's

00:05:36,200 --> 00:05:38,540
it

00:05:36,530 --> 00:05:41,060
so can we find a standardized way to

00:05:38,540 --> 00:05:44,030
operate it more smoothly and to add

00:05:41,060 --> 00:05:45,860
services very fast and this brings me

00:05:44,030 --> 00:05:47,930
the next point which is we have to

00:05:45,860 --> 00:05:49,610
deliver a new state as a services in a

00:05:47,930 --> 00:05:53,870
very fast manner as we do it with

00:05:49,610 --> 00:05:55,490
middleware if after MongoDB there is

00:05:53,870 --> 00:05:56,930
Redis coming and there's next one coming

00:05:55,490 --> 00:05:59,419
we as a service provider need to be able

00:05:56,930 --> 00:06:02,840
to deliver that to the developers in a

00:05:59,419 --> 00:06:05,240
very fast term so do we just another

00:06:02,840 --> 00:06:08,270
team of Redis experts ramping them up

00:06:05,240 --> 00:06:09,800
and build that and ship that that's as

00:06:08,270 --> 00:06:14,360
questions and challenges we have as a

00:06:09,800 --> 00:06:15,890
service provider now let's put look back

00:06:14,360 --> 00:06:18,110
to Cloud Foundry and the services within

00:06:15,890 --> 00:06:20,180
cloud foundry what do we have today and

00:06:18,110 --> 00:06:24,140
what is the state of the nation safe to

00:06:20,180 --> 00:06:26,630
say well services are actually done and

00:06:24,140 --> 00:06:28,880
this the speech here in front of this

00:06:26,630 --> 00:06:30,289
audience actually 10 minutes before was

00:06:28,880 --> 00:06:32,780
exactly about services or service

00:06:30,289 --> 00:06:33,810
brokerage we have two things which are

00:06:32,780 --> 00:06:35,820
very well captured with

00:06:33,810 --> 00:06:37,710
Cloud Foundry first is the provisioning

00:06:35,820 --> 00:06:40,830
of services so you can provision

00:06:37,710 --> 00:06:43,139
services easily weaving card foundry

00:06:40,830 --> 00:06:47,070
which actually with the CF services

00:06:43,139 --> 00:06:48,780
contrib so there is a way to do that the

00:06:47,070 --> 00:06:50,520
management of services or let's say the

00:06:48,780 --> 00:06:53,040
creation and the binding of a service is

00:06:50,520 --> 00:06:56,190
done with two management and actually

00:06:53,040 --> 00:06:58,470
with the service broker so let's let's

00:06:56,190 --> 00:07:01,139
go one step further on that what is a

00:06:58,470 --> 00:07:04,200
service broker a service broker allows

00:07:01,139 --> 00:07:07,290
you to get your database bind your stuff

00:07:04,200 --> 00:07:09,620
and add it to your app but in fact the

00:07:07,290 --> 00:07:12,270
service broker does you don't know

00:07:09,620 --> 00:07:14,430
either it's a shared database or you get

00:07:12,270 --> 00:07:16,950
a dedicated database you get a service

00:07:14,430 --> 00:07:19,139
which is somehow provisioned somehow

00:07:16,950 --> 00:07:20,850
bind it so it's basically an

00:07:19,139 --> 00:07:24,060
externalization of the issue

00:07:20,850 --> 00:07:25,620
you take your issue and then put a nice

00:07:24,060 --> 00:07:28,490
layer of it which is perfectly fine and

00:07:25,620 --> 00:07:31,110
works but it's not the complete solution

00:07:28,490 --> 00:07:33,330
so what's behind the service broker and

00:07:31,110 --> 00:07:36,360
I'm talking here also in our case on our

00:07:33,330 --> 00:07:38,450
production system and also other people

00:07:36,360 --> 00:07:41,910
we talk to it usually looks like that

00:07:38,450 --> 00:07:43,710
you have a weird somehow way of doing it

00:07:41,910 --> 00:07:45,539
some uncompleted walls and some open

00:07:43,710 --> 00:07:48,120
doors because you somehow had to

00:07:45,539 --> 00:07:49,530
provision that and if you grow and if

00:07:48,120 --> 00:07:51,210
you develop your approach you hey we

00:07:49,530 --> 00:07:52,919
need another service and it's today it's

00:07:51,210 --> 00:07:55,080
this one tomorrow it's this one you just

00:07:52,919 --> 00:07:57,780
somehow need to wrap them and provision

00:07:55,080 --> 00:08:03,260
a maori service brokers that's what we

00:07:57,780 --> 00:08:06,479
see today that's not a Swisscom office

00:08:03,260 --> 00:08:08,010
so and what we see today as well is we

00:08:06,479 --> 00:08:09,750
have a lot of services out of the box

00:08:08,010 --> 00:08:11,310
so all these distributions in the venue

00:08:09,750 --> 00:08:14,010
over there in the expert they provide

00:08:11,310 --> 00:08:16,889
you services out of the box they provide

00:08:14,010 --> 00:08:18,860
you specific services in their complete

00:08:16,889 --> 00:08:21,240
model proprietary service sometimes

00:08:18,860 --> 00:08:22,889
sometimes it's a common open source

00:08:21,240 --> 00:08:26,220
services but they're trying to bring

00:08:22,889 --> 00:08:27,960
their USP in there so their USP is you

00:08:26,220 --> 00:08:29,880
get that Cloud Foundry with all the

00:08:27,960 --> 00:08:33,630
services around it and you don't have to

00:08:29,880 --> 00:08:35,400
care about it they just ship it but the

00:08:33,630 --> 00:08:37,830
point here is that we think as a

00:08:35,400 --> 00:08:39,959
community and that's where we start

00:08:37,830 --> 00:08:42,030
discussion basically we should maybe

00:08:39,959 --> 00:08:43,919
think about how we can go further than

00:08:42,030 --> 00:08:46,500
just deploying middleware but also

00:08:43,919 --> 00:08:47,460
deploying in a generic way services but

00:08:46,500 --> 00:08:49,110
not each of

00:08:47,460 --> 00:08:50,670
the distribution and vendors are solving

00:08:49,110 --> 00:08:53,210
the problem by their own but that we

00:08:50,670 --> 00:08:57,570
have a common layer how we can solve and

00:08:53,210 --> 00:09:05,070
actually on board new services faster

00:08:57,570 --> 00:09:06,600
and as a community but now everybody

00:09:05,070 --> 00:09:08,760
says wait wait we have something which

00:09:06,600 --> 00:09:10,410
is called Bosh right borscht solves all

00:09:08,760 --> 00:09:11,250
the problems and I don't know if dr.

00:09:10,410 --> 00:09:14,460
neck is here

00:09:11,250 --> 00:09:16,650
guess he will agree pourcel can solve

00:09:14,460 --> 00:09:19,320
all the problems but yeah we had

00:09:16,650 --> 00:09:22,890
different experience so Bosh can be very

00:09:19,320 --> 00:09:26,490
slow Bosh is not really easy to deploy

00:09:22,890 --> 00:09:28,170
and to learn and the lifecycle of course

00:09:26,490 --> 00:09:30,630
is very hard so if you have existing

00:09:28,170 --> 00:09:32,190
database you upgrade to new one or you

00:09:30,630 --> 00:09:34,470
have tighter migrations into other data

00:09:32,190 --> 00:09:36,210
centers or whatever Bosh is a challenge

00:09:34,470 --> 00:09:39,990
and was a challenge that was our

00:09:36,210 --> 00:09:42,840
experience so far so Bush could be a

00:09:39,990 --> 00:09:46,290
solution but it needs some big steps to

00:09:42,840 --> 00:09:48,120
do that and what about the v1 services

00:09:46,290 --> 00:09:50,520
we had with one services right they were

00:09:48,120 --> 00:09:53,370
perfectly fine and as I look into the

00:09:50,520 --> 00:09:56,220
Swisscom folks they run in production we

00:09:53,370 --> 00:09:58,020
somehow run them but we would never do

00:09:56,220 --> 00:10:01,260
it again and I would encourage you not

00:09:58,020 --> 00:10:03,840
to try that out it is kind of a pilot

00:10:01,260 --> 00:10:05,580
thing and you can try it out for ramping

00:10:03,840 --> 00:10:09,950
up your Cloud Foundry environment but

00:10:05,580 --> 00:10:13,020
it's really not for production use and

00:10:09,950 --> 00:10:14,250
when I talk about all these things then

00:10:13,020 --> 00:10:15,600
as a service provider you have a

00:10:14,250 --> 00:10:17,100
different perspective on other topics

00:10:15,600 --> 00:10:19,200
because you think about operation

00:10:17,100 --> 00:10:21,030
readiness when is the service operate

00:10:19,200 --> 00:10:22,650
able you think about lifecycle

00:10:21,030 --> 00:10:26,520
management okay how do I have to upgrade

00:10:22,650 --> 00:10:28,020
XYZ when customers are on it where you

00:10:26,520 --> 00:10:29,580
have no clue what they do you have no

00:10:28,020 --> 00:10:31,110
clue which database schema that you're

00:10:29,580 --> 00:10:32,700
using we just want to upgrade the

00:10:31,110 --> 00:10:35,340
service so you have completely new

00:10:32,700 --> 00:10:37,470
challenges in there and obviously the

00:10:35,340 --> 00:10:41,940
multi-tenancy concept not every database

00:10:37,470 --> 00:10:44,190
has a multi-tenancy concept percy let's

00:10:41,940 --> 00:10:45,900
take an example Redis Redis Percy has no

00:10:44,190 --> 00:10:48,660
multi-tenancy concept so you have to

00:10:45,900 --> 00:10:50,880
deploy each Redis by Rome on the other

00:10:48,660 --> 00:10:53,310
side Maria DB or my sequel they have a

00:10:50,880 --> 00:10:55,710
very nice method tenant concept we can't

00:10:53,310 --> 00:10:57,300
just give the user a password schema and

00:10:55,710 --> 00:10:59,610
that's fine and you can run one cluster

00:10:57,300 --> 00:11:01,300
so you have to look at each of this

00:10:59,610 --> 00:11:03,160
level of various services

00:11:01,300 --> 00:11:05,950
and try to figure out how we can run

00:11:03,160 --> 00:11:08,890
them and obviously the billing as well

00:11:05,950 --> 00:11:11,110
how you want to charge your services

00:11:08,890 --> 00:11:14,580
your various services by quota by

00:11:11,110 --> 00:11:19,540
message by whatever you think about it

00:11:14,580 --> 00:11:21,610
and this actually brings me to the

00:11:19,540 --> 00:11:23,320
challenges solving stateful problems and

00:11:21,610 --> 00:11:26,760
that's the point we're calling is to

00:11:23,320 --> 00:11:29,880
take over because I have a challenge

00:11:26,760 --> 00:11:35,470
thank you very much

00:11:29,880 --> 00:11:38,260
so I gave this talk a run-through last

00:11:35,470 --> 00:11:41,710
week and just to a small group of people

00:11:38,260 --> 00:11:43,030
and they said to me Collin you've got to

00:11:41,710 --> 00:11:45,700
say something constructive you can't

00:11:43,030 --> 00:11:47,560
just stand on the stage and complain for

00:11:45,700 --> 00:11:49,930
like 20 minutes about how difficult this

00:11:47,560 --> 00:11:51,940
is to do and I said no I'm just gonna

00:11:49,930 --> 00:11:54,970
stand here and complain so this is like

00:11:51,940 --> 00:11:56,560
I was going to preach about why I think

00:11:54,970 --> 00:12:00,040
this is so difficult why it's so

00:11:56,560 --> 00:12:02,890
challenging and why I've tried to do

00:12:00,040 --> 00:12:05,740
this so much and had so much difficulty

00:12:02,890 --> 00:12:08,500
making this scale making this work so

00:12:05,740 --> 00:12:11,080
why is it so difficult to solve stateful

00:12:08,500 --> 00:12:16,360
problems when cloud foundry makes it so

00:12:11,080 --> 00:12:19,030
easy to solve the stateless problems so

00:12:16,360 --> 00:12:21,040
firstly cap can I get a show of hands

00:12:19,030 --> 00:12:23,620
that who knows what cap is here to a

00:12:21,040 --> 00:12:24,610
reasonable degree okay that's not

00:12:23,620 --> 00:12:28,470
everyone so I'm going to very briefly

00:12:24,610 --> 00:12:31,510
run through this cap consistency

00:12:28,470 --> 00:12:34,960
availability partition tolerance you can

00:12:31,510 --> 00:12:38,250
have two of those three in a distributed

00:12:34,960 --> 00:12:41,410
system you cannot have all three and

00:12:38,250 --> 00:12:44,170
that makes life difficult so you have to

00:12:41,410 --> 00:12:47,530
pick two in reality what this means if

00:12:44,170 --> 00:12:51,370
you have a distributed system and you

00:12:47,530 --> 00:12:56,380
have a network partition you can choose

00:12:51,370 --> 00:13:02,800
to do one of two things both of which

00:12:56,380 --> 00:13:05,080
are wrong so your choice is the network

00:13:02,800 --> 00:13:11,980
partition the server's have been split

00:13:05,080 --> 00:13:14,680
in half you can either stop serving data

00:13:11,980 --> 00:13:19,300
and stop mutating state

00:13:14,680 --> 00:13:21,459
because you could be inconsistent so you

00:13:19,300 --> 00:13:24,519
maintain your consistency but your

00:13:21,459 --> 00:13:27,699
service is unavailable or alternatively

00:13:24,519 --> 00:13:29,529
you carry on mutating data with your

00:13:27,699 --> 00:13:31,389
your puppy or cluster split into two

00:13:29,529 --> 00:13:35,230
halves at which point you are

00:13:31,389 --> 00:13:38,199
inconsistent but you are available so

00:13:35,230 --> 00:13:40,899
you can either be consistent in the

00:13:38,199 --> 00:13:42,839
partition tolerance CP or available in a

00:13:40,899 --> 00:13:49,559
partition tolerance you can't do both

00:13:42,839 --> 00:13:49,559
and this makes life very very difficult

00:13:49,769 --> 00:13:55,929
so what does this mean for Cloud Foundry

00:13:53,410 --> 00:13:58,179
and for service boundary so if you've

00:13:55,929 --> 00:14:01,089
got your Cloud Foundry app that's

00:13:58,179 --> 00:14:03,429
stateless and you push it in and it's

00:14:01,089 --> 00:14:05,709
working if the Cloud Foundry cluster is

00:14:03,429 --> 00:14:07,389
split into two it can just fire up some

00:14:05,709 --> 00:14:10,149
more versions of your app it doesn't

00:14:07,389 --> 00:14:11,949
matter that's fine if you've got you

00:14:10,149 --> 00:14:15,119
know my web app having two of my web app

00:14:11,949 --> 00:14:18,629
that's fine if you've got my sequel

00:14:15,119 --> 00:14:21,399
running there and you split it in half

00:14:18,629 --> 00:14:23,050
what should happen do you run to my

00:14:21,399 --> 00:14:25,240
sequels both serving your data

00:14:23,050 --> 00:14:29,339
independently you've got a split brain

00:14:25,240 --> 00:14:33,970
situation do you run no my sequels

00:14:29,339 --> 00:14:37,740
what's the right thing to do there is no

00:14:33,970 --> 00:14:41,740
right thing so life gets very difficult

00:14:37,740 --> 00:14:44,199
as we know because there's been a few

00:14:41,740 --> 00:14:47,920
talks about it Cloud Foundry is focused

00:14:44,199 --> 00:14:50,649
on 12 factor apps this is a set of

00:14:47,920 --> 00:14:53,170
patterns came out of the guys at Heroku

00:14:50,649 --> 00:14:55,809
this enables applications to be

00:14:53,170 --> 00:15:00,220
effectively passed compatible cloud

00:14:55,809 --> 00:15:02,170
native but we know that the some of the

00:15:00,220 --> 00:15:06,100
twelve facts are apps dictate that we

00:15:02,170 --> 00:15:10,299
should externalise our state so do we

00:15:06,100 --> 00:15:12,329
move to ten factor data services so the

00:15:10,299 --> 00:15:14,679
two factors we're going to violate here

00:15:12,329 --> 00:15:16,329
firstly that we are not going to

00:15:14,679 --> 00:15:18,939
external a state we're going to choose

00:15:16,329 --> 00:15:22,209
to internalize our state and secondly

00:15:18,939 --> 00:15:24,220
that our processes are going to have to

00:15:22,209 --> 00:15:26,049
stop being ephemeral we can't just throw

00:15:24,220 --> 00:15:27,040
them away because there may be important

00:15:26,049 --> 00:15:29,050
data there

00:15:27,040 --> 00:15:32,110
so we're going to drop down from 12

00:15:29,050 --> 00:15:34,030
factor to 10 factor and there's a talk

00:15:32,110 --> 00:15:35,260
that's going to extend that idea

00:15:34,030 --> 00:15:36,930
tomorrow

00:15:35,260 --> 00:15:42,280
Ted and Kayla are talking about

00:15:36,930 --> 00:15:44,230
persistence in Diego so that's like a

00:15:42,280 --> 00:15:46,360
continuation of this talk if you will

00:15:44,230 --> 00:15:49,290
that's a far more positive talk I'm just

00:15:46,360 --> 00:15:49,290
going to stand up here and complain

00:15:49,950 --> 00:15:59,530
Automation so this is really really

00:15:54,010 --> 00:16:04,120
difficult now a while back I wrote some

00:15:59,530 --> 00:16:07,860
automation for Oracle RAC cluster

00:16:04,120 --> 00:16:10,150
oh it's for scripting some some chef

00:16:07,860 --> 00:16:12,580
cookbooks around this so you could

00:16:10,150 --> 00:16:15,370
automate Oracle RAC cluster and some

00:16:12,580 --> 00:16:18,250
Oracle engineers said to me you can't do

00:16:15,370 --> 00:16:21,270
that you can't automate Oracle RAC

00:16:18,250 --> 00:16:24,850
cluster each Oracle installation is

00:16:21,270 --> 00:16:27,790
organic it needs to be grown and tended

00:16:24,850 --> 00:16:32,560
to so I think somewhere there is like a

00:16:27,790 --> 00:16:34,570
DBA Union that are making making data

00:16:32,560 --> 00:16:37,600
services that need to be looked after by

00:16:34,570 --> 00:16:39,580
humans but why is this

00:16:37,600 --> 00:16:42,550
I mean maybe because it's difficult I

00:16:39,580 --> 00:16:44,200
don't know but if your apps are going to

00:16:42,550 --> 00:16:46,270
be run inside a flower foundry or

00:16:44,200 --> 00:16:48,700
service foundry they need to be

00:16:46,270 --> 00:16:50,110
automated or the app can't put its hand

00:16:48,700 --> 00:16:51,310
up halfway through the night and say can

00:16:50,110 --> 00:16:53,620
an administrator come along and run

00:16:51,310 --> 00:16:58,030
these commands please ok it needs to be

00:16:53,620 --> 00:17:04,150
automated and this isn't how data

00:16:58,030 --> 00:17:06,730
services currently are scaling so we

00:17:04,150 --> 00:17:09,430
know with cloud foundry we can scale

00:17:06,730 --> 00:17:12,190
easily most horizontal scaling what does

00:17:09,430 --> 00:17:13,870
scaling even mean for data services do

00:17:12,190 --> 00:17:18,940
we have more instances of the data

00:17:13,870 --> 00:17:20,760
service do we have a larger disk do we

00:17:18,940 --> 00:17:23,410
have more iOS

00:17:20,760 --> 00:17:24,790
what does scaling mean for data services

00:17:23,410 --> 00:17:26,020
well this is just ambiguous I mean this

00:17:24,790 --> 00:17:31,720
could mean anything for different data

00:17:26,020 --> 00:17:34,840
services it's not clear and what about

00:17:31,720 --> 00:17:37,060
durability how do we store the data how

00:17:34,840 --> 00:17:39,200
do we persist the data and what is

00:17:37,060 --> 00:17:41,780
persistency in this context

00:17:39,200 --> 00:17:49,400
also known as not strong your data in

00:17:41,780 --> 00:17:51,530
MongoDB so how do we store data in a an

00:17:49,400 --> 00:17:55,130
environment where containers are coming

00:17:51,530 --> 00:17:57,500
and going and how do we give them the

00:17:55,130 --> 00:18:02,540
persistent disks and persistent volumes

00:17:57,500 --> 00:18:03,830
that they need so again this is talk

00:18:02,540 --> 00:18:05,900
tomorrow which is going to look at how

00:18:03,830 --> 00:18:10,400
we can do this with Diego so W recommend

00:18:05,900 --> 00:18:12,350
going to that talk what I think is

00:18:10,400 --> 00:18:15,490
interesting I think this talk is

00:18:12,350 --> 00:18:19,100
pertinent now and maybe wasn't before

00:18:15,490 --> 00:18:21,380
it's because if you look at version 2 of

00:18:19,100 --> 00:18:26,780
cloud foundry and by that I mean de A's

00:18:21,380 --> 00:18:29,890
and Nats for orchestration we couldn't

00:18:26,780 --> 00:18:32,000
really do consistent data services

00:18:29,890 --> 00:18:33,530
because for those of you that have

00:18:32,000 --> 00:18:35,270
played around with it and poked at Nats

00:18:33,530 --> 00:18:37,240
and that house manager and the cloud

00:18:35,270 --> 00:18:40,160
controller and that entire kind of loop

00:18:37,240 --> 00:18:41,720
crazy things can happen you can go from

00:18:40,160 --> 00:18:43,400
no versions of an app to too many

00:18:41,720 --> 00:18:45,910
versions of an app and back down again

00:18:43,400 --> 00:18:50,120
and it's very difficult to reason about

00:18:45,910 --> 00:18:53,510
with Diego we have xcd as a backing

00:18:50,120 --> 00:18:56,990
store and we can start making consistent

00:18:53,510 --> 00:19:00,380
decisions about running applications so

00:18:56,990 --> 00:19:03,440
Cloud Foundry version 2 was not fit for

00:19:00,380 --> 00:19:05,030
building service foundry on top of but

00:19:03,440 --> 00:19:09,590
Cloud Foundry version 3

00:19:05,030 --> 00:19:13,870
aka Diego gives us what we need to be

00:19:09,590 --> 00:19:13,870
able to deliver consistent data services

00:19:14,140 --> 00:19:23,230
so there's two parts to the service

00:19:19,970 --> 00:19:25,580
boundary two elements to the solution

00:19:23,230 --> 00:19:29,510
the first one as I alluded to with the

00:19:25,580 --> 00:19:33,230
challenges is that we change the data

00:19:29,510 --> 00:19:38,810
services themselves what do I mean by

00:19:33,230 --> 00:19:41,630
this so I've been fortunate enough with

00:19:38,810 --> 00:19:43,490
cloud Credo to work with some of the

00:19:41,630 --> 00:19:46,670
teams that are bringing data services to

00:19:43,490 --> 00:19:48,560
Cloud Foundry and what's been fantastic

00:19:46,670 --> 00:19:51,620
there was to work with the actual

00:19:48,560 --> 00:19:53,110
developers of the data services and kind

00:19:51,620 --> 00:19:56,050
of move them along this journey

00:19:53,110 --> 00:19:59,500
help them make databases and data

00:19:56,050 --> 00:20:03,070
storage solutions that are better suited

00:19:59,500 --> 00:20:06,670
to running in a cloud-like environment

00:20:03,070 --> 00:20:08,800
so in particular cassandra we're working

00:20:06,670 --> 00:20:11,890
with data stacks to to help them you

00:20:08,800 --> 00:20:13,570
know make that a better journey you know

00:20:11,890 --> 00:20:16,660
that in movement there we work with the

00:20:13,570 --> 00:20:19,660
RabbitMQ team we change their clustering

00:20:16,660 --> 00:20:23,280
to be better suited to to automation in

00:20:19,660 --> 00:20:27,090
this way and I think if we as as

00:20:23,280 --> 00:20:30,160
platform specialists work with the

00:20:27,090 --> 00:20:32,410
vendors of the data solutions we can

00:20:30,160 --> 00:20:34,330
help them make their data solutions more

00:20:32,410 --> 00:20:41,160
cloud native but I think there is still

00:20:34,330 --> 00:20:45,040
a way to go an interesting point here is

00:20:41,160 --> 00:20:48,250
there are potentially data solutions in

00:20:45,040 --> 00:20:51,280
the future where if you run enough

00:20:48,250 --> 00:20:55,260
containers and enough instances you

00:20:51,280 --> 00:20:59,350
don't need data volumes behind them I

00:20:55,260 --> 00:21:01,380
think solution called crate a crate do

00:20:59,350 --> 00:21:04,180
they're looking at potentially running

00:21:01,380 --> 00:21:06,220
huge numbers of containers and in

00:21:04,180 --> 00:21:08,710
essence your dated replicators across

00:21:06,220 --> 00:21:10,150
all the containers so you don't need

00:21:08,710 --> 00:21:11,980
backing volumes because so long as

00:21:10,150 --> 00:21:14,890
enough containers stay alive you still

00:21:11,980 --> 00:21:18,280
have all your data so if data services

00:21:14,890 --> 00:21:23,470
move down that path all your data could

00:21:18,280 --> 00:21:27,670
be ephemeral but that scares me a little

00:21:23,470 --> 00:21:30,820
I have to say would I put financial data

00:21:27,670 --> 00:21:33,510
into something that could lose it all

00:21:30,820 --> 00:21:37,480
any point in time probably not right now

00:21:33,510 --> 00:21:42,030
so that leads us on to micro data

00:21:37,480 --> 00:21:44,080
services so just imagine Cloud Foundry

00:21:42,030 --> 00:21:49,140
where your apps can have a persistent

00:21:44,080 --> 00:21:52,270
disk behind and can do networking across

00:21:49,140 --> 00:21:54,490
can we then start to run small data

00:21:52,270 --> 00:21:59,700
services within cloud foundry that

00:21:54,490 --> 00:21:59,700
deliver data to micro services

00:22:00,390 --> 00:22:08,309
and thus have Micro data services so I'm

00:22:06,450 --> 00:22:09,809
going to hand over to Marko talk about

00:22:08,309 --> 00:22:12,480
the second part of this Thanks

00:22:09,809 --> 00:22:14,490
so changing the service is interesting

00:22:12,480 --> 00:22:16,620
and this may be a way to go may be the

00:22:14,490 --> 00:22:19,289
way to go but it takes a long time to go

00:22:16,620 --> 00:22:21,210
there before we movie should check about

00:22:19,289 --> 00:22:23,659
changing the platform or adding some

00:22:21,210 --> 00:22:27,240
topics to the platform that allow us to

00:22:23,659 --> 00:22:30,600
be faster anyhow and not waiting for the

00:22:27,240 --> 00:22:33,029
changes to come so what do you really

00:22:30,600 --> 00:22:35,460
need you need really a CF push a real

00:22:33,029 --> 00:22:37,169
service kind of thing right so how do

00:22:35,460 --> 00:22:39,269
you do that and what do we need and what

00:22:37,169 --> 00:22:40,980
is already out there because you

00:22:39,269 --> 00:22:43,080
shouldn't make a new wheel if you're all

00:22:40,980 --> 00:22:44,549
you know there is something out there so

00:22:43,080 --> 00:22:46,860
let's talk about let's talk about what

00:22:44,549 --> 00:22:48,840
is already out there so friends we need

00:22:46,860 --> 00:22:50,490
storage we need persistency we mentioned

00:22:48,840 --> 00:22:52,590
that a couple of times are there

00:22:50,490 --> 00:22:54,750
Orchestrator managers who can allow us

00:22:52,590 --> 00:22:56,820
and give us fix persistent storage in

00:22:54,750 --> 00:22:59,220
containers yes they are and here are

00:22:56,820 --> 00:23:00,360
just some of the projects like Arrowhead

00:22:59,220 --> 00:23:02,970
flocker

00:23:00,360 --> 00:23:04,260
or you should go to TED talk tomorrow he

00:23:02,970 --> 00:23:06,360
is also talking about the solution how

00:23:04,260 --> 00:23:08,399
you could do that so there are solutions

00:23:06,360 --> 00:23:11,820
out there who can give us persistency on

00:23:08,399 --> 00:23:14,940
a service or in a container what we need

00:23:11,820 --> 00:23:18,179
else what we need in addition we network

00:23:14,940 --> 00:23:19,590
sure we need software fine network when

00:23:18,179 --> 00:23:21,630
you spin up your Cloud Foundry the first

00:23:19,590 --> 00:23:23,760
time you won't need software fine

00:23:21,630 --> 00:23:25,769
network you just spin it up and hope

00:23:23,760 --> 00:23:27,000
it's running but when you go further

00:23:25,769 --> 00:23:28,529
into the use case and think about

00:23:27,000 --> 00:23:30,480
abstraction from your services to the

00:23:28,529 --> 00:23:32,070
middleware and even security boundaries

00:23:30,480 --> 00:23:33,539
between them then you think about

00:23:32,070 --> 00:23:36,659
software fine services because you need

00:23:33,539 --> 00:23:38,370
to grow when customers come but also

00:23:36,659 --> 00:23:41,460
here there are solutions out there for

00:23:38,370 --> 00:23:43,950
networking for containers like calico

00:23:41,460 --> 00:23:47,760
Weaver socket plane just to name a few

00:23:43,950 --> 00:23:50,850
there are hundreds and so there's a

00:23:47,760 --> 00:23:52,110
solution for that somehow next topic

00:23:50,850 --> 00:23:54,090
which you need when you have a lot of

00:23:52,110 --> 00:23:56,070
services is discovery up monitoring

00:23:54,090 --> 00:23:57,659
because you need to know what is here

00:23:56,070 --> 00:23:59,909
you to know how the services are doing

00:23:57,659 --> 00:24:03,059
or when do you need to scale them how do

00:23:59,909 --> 00:24:04,440
you need to manage them but also here

00:24:03,059 --> 00:24:07,649
there are a lot of tools already out

00:24:04,440 --> 00:24:09,270
there open source most of them and to

00:24:07,649 --> 00:24:11,549
mention Sean it's just some of them

00:24:09,270 --> 00:24:13,500
console zookeeper Arica they're all

00:24:11,549 --> 00:24:13,980
capable of somehow handling containers

00:24:13,500 --> 00:24:15,720
and some

00:24:13,980 --> 00:24:17,669
letting you know when the state changes

00:24:15,720 --> 00:24:21,960
or when some assistance is needed when

00:24:17,669 --> 00:24:23,910
some automation is needed and last but

00:24:21,960 --> 00:24:26,250
not least provisioning provisioning is

00:24:23,910 --> 00:24:28,049
what you do with CF service broker right

00:24:26,250 --> 00:24:31,260
you saw there needs to be something

00:24:28,049 --> 00:24:32,760
there at the end but also there we have

00:24:31,260 --> 00:24:35,250
solutions there are solutions out there

00:24:32,760 --> 00:24:36,870
open-source solutions are like Brooklyn

00:24:35,250 --> 00:24:39,960
or terraform just to name two of them

00:24:36,870 --> 00:24:42,059
there are hundreds more existing you can

00:24:39,960 --> 00:24:45,330
even Papa dice and run just puppet

00:24:42,059 --> 00:24:48,500
behind it but the question is are we

00:24:45,330 --> 00:24:51,059
able to build something which gives us

00:24:48,500 --> 00:24:53,960
overlay for all these solutions and

00:24:51,059 --> 00:24:57,330
provide us a easy way to drive

00:24:53,960 --> 00:25:01,220
persistence cloud-based data micro

00:24:57,330 --> 00:25:05,460
services or microdata source sorry

00:25:01,220 --> 00:25:07,080
so to summarize that we talked about the

00:25:05,460 --> 00:25:10,260
solution one which is basically changed

00:25:07,080 --> 00:25:12,090
to service which Colleen is working on

00:25:10,260 --> 00:25:14,190
we talked about solution 2 which is

00:25:12,090 --> 00:25:17,460
enabled a platform which we maybe can

00:25:14,190 --> 00:25:20,070
work together on and but both sides

00:25:17,460 --> 00:25:22,320
could and will one somehow have to move

00:25:20,070 --> 00:25:25,290
into a concept which we today called

00:25:22,320 --> 00:25:29,220
class service boundary and let's build

00:25:25,290 --> 00:25:31,190
this as a community that's basically our

00:25:29,220 --> 00:25:33,809
message here I think we need something

00:25:31,190 --> 00:25:35,340
to not have the USPS in each

00:25:33,809 --> 00:25:37,669
distribution each one is building later

00:25:35,340 --> 00:25:40,080
on but to find the common ground of

00:25:37,669 --> 00:25:42,710
growing and delivering fast these

00:25:40,080 --> 00:25:42,710
services

00:25:49,950 --> 00:26:00,279
do you have any questions no one wants

00:25:55,720 --> 00:26:01,260
to ask where is it we haven't built it

00:26:00,279 --> 00:26:03,460
yet

00:26:01,260 --> 00:26:04,750
but we'd like if anyone wants to

00:26:03,460 --> 00:26:06,789
collaborate with us on building this

00:26:04,750 --> 00:26:08,289
please do come and talk to us there's

00:26:06,789 --> 00:26:10,210
something we're kind of issuing a set of

00:26:08,289 --> 00:26:11,500
demands we want this to happen to please

00:26:10,210 --> 00:26:20,890
to come and talk to us if you want to

00:26:11,500 --> 00:26:24,840
help build this no questions okay thank

00:26:20,890 --> 00:26:24,840

YouTube URL: https://www.youtube.com/watch?v=806zRJpUdKg


