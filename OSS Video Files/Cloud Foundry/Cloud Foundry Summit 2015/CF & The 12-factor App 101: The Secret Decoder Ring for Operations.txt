Title: CF & The 12-factor App 101: The Secret Decoder Ring for Operations
Publication date: 2015-05-13
Playlist: Cloud Foundry Summit 2015
Description: 
	CF & The 12-factor App 101: The Secret Decoder Ring for Operations - 03 Rags, Matt Cowger 720p
Captions: 
	00:00:00,000 --> 00:00:03,540
all right I'm gonna I'm gonna get

00:00:01,380 --> 00:00:04,710
started this is approximately in order

00:00:03,540 --> 00:00:08,910
of magnitude more people than I expected

00:00:04,710 --> 00:00:10,679
so it is what it is my name is Matt my

00:00:08,910 --> 00:00:12,030
last name happens to be Congress but

00:00:10,679 --> 00:00:17,250
none of you will remember that in about

00:00:12,030 --> 00:00:18,840
10 seconds this is rags what we're

00:00:17,250 --> 00:00:20,490
talking about is 12 factor applications

00:00:18,840 --> 00:00:23,189
from the perspective of an Operations

00:00:20,490 --> 00:00:25,769
person not everybody certainly not

00:00:23,189 --> 00:00:27,840
everybody here is a developer but most

00:00:25,769 --> 00:00:29,099
of you have probably heard at least of

00:00:27,840 --> 00:00:32,460
the 12 factored out yes

00:00:29,099 --> 00:00:39,600
heard of it okay felt like you've

00:00:32,460 --> 00:00:42,540
written or managed one less okay so the

00:00:39,600 --> 00:00:45,360
history of this is once you're really

00:00:42,540 --> 00:00:49,200
smart guys at Heroku came up with a list

00:00:45,360 --> 00:00:51,960
of sort of the 12 things that make an

00:00:49,200 --> 00:00:54,030
application successful on a path

00:00:51,960 --> 00:00:56,070
platform the things that are if you

00:00:54,030 --> 00:00:58,039
follow these you will more you're more

00:00:56,070 --> 00:01:02,940
likely to be successful than less or

00:00:58,039 --> 00:01:04,589
unsuccessful will say just like anything

00:01:02,940 --> 00:01:06,750
that we call a best practice

00:01:04,589 --> 00:01:08,670
none of these are a hard and fast rule

00:01:06,750 --> 00:01:12,060
some of them are more important than

00:01:08,670 --> 00:01:13,590
others but nonetheless keeping them in

00:01:12,060 --> 00:01:16,710
your head while you're writing an

00:01:13,590 --> 00:01:19,080
application or more germane to this

00:01:16,710 --> 00:01:21,180
topic keeping them in your head while

00:01:19,080 --> 00:01:24,780
you work with your development

00:01:21,180 --> 00:01:26,759
development partners to perhaps keep it

00:01:24,780 --> 00:01:27,210
in their head and make the decisions

00:01:26,759 --> 00:01:37,400
together

00:01:27,210 --> 00:01:37,400
is a good idea I swear nothing changed

00:01:40,039 --> 00:01:53,130
right well I didn't change anything

00:01:47,069 --> 00:01:55,560
either how do we solve this problem okay

00:01:53,130 --> 00:02:00,149
this is a solvable and an entirely

00:01:55,560 --> 00:02:03,200
solved problem everything belongs in

00:02:00,149 --> 00:02:05,640
revision control this is the very first

00:02:03,200 --> 00:02:07,409
factor of the 12 factor apps for a

00:02:05,640 --> 00:02:09,390
reason I would call this the single most

00:02:07,409 --> 00:02:11,970
important choice that you can make and

00:02:09,390 --> 00:02:14,120
it is in fact a choice it is a choice

00:02:11,970 --> 00:02:18,030
that you need to make consistently and

00:02:14,120 --> 00:02:24,379
consciously at every step if it's not in

00:02:18,030 --> 00:02:24,379
version control it doesn't exist okay

00:02:24,500 --> 00:02:30,540
because revision control lets you do

00:02:26,790 --> 00:02:35,190
something magical it lets you do a get

00:02:30,540 --> 00:02:37,739
bling or if you're one of those people

00:02:35,190 --> 00:02:40,290
that really really wants to use perforce

00:02:37,739 --> 00:02:42,329
or subversion you can do it there too

00:02:40,290 --> 00:02:44,310
but I suspect the folks at github would

00:02:42,329 --> 00:02:47,190
probably have a discussion with you

00:02:44,310 --> 00:02:49,829
about that a get blame is a beautiful

00:02:47,190 --> 00:02:52,760
beautiful thing there's a positive

00:02:49,829 --> 00:02:56,130
version of get blame that's like get

00:02:52,760 --> 00:03:00,269
credit there you go thank you somehow I

00:02:56,130 --> 00:03:04,739
think that one's less popular my images

00:03:00,269 --> 00:03:07,440
didn't work okay well what you would

00:03:04,739 --> 00:03:12,900
have seen there would be a get plain

00:03:07,440 --> 00:03:15,989
output number two your dependencies need

00:03:12,900 --> 00:03:17,639
to be explicitly declared what happens

00:03:15,989 --> 00:03:20,849
when you don't declare dependencies

00:03:17,639 --> 00:03:23,940
explicitly you declare them implicitly

00:03:20,849 --> 00:03:25,530
right there they exist and you declare

00:03:23,940 --> 00:03:28,109
them one way or another it would be

00:03:25,530 --> 00:03:29,549
better to make them explicit because and

00:03:28,109 --> 00:03:31,980
then you can declare them with the rest

00:03:29,549 --> 00:03:35,489
of the code whether it's a requirements

00:03:31,980 --> 00:03:37,290
dot txt file in Python or a bundle for

00:03:35,489 --> 00:03:38,730
for Ruby or whatever you want to use I

00:03:37,290 --> 00:03:41,130
don't really care as long as it's

00:03:38,730 --> 00:03:43,169
declared with the code meaning it has to

00:03:41,130 --> 00:03:45,450
be updated with the code and it's

00:03:43,169 --> 00:03:47,300
tracked the same way you will not lose a

00:03:45,450 --> 00:03:51,000
dependency

00:03:47,300 --> 00:03:56,910
by the way bad things happen if your

00:03:51,000 --> 00:03:59,700
dependencies are just for the package

00:03:56,910 --> 00:04:01,560
name right I had a problem one time

00:03:59,700 --> 00:04:03,120
recently where we had the dependency in

00:04:01,560 --> 00:04:04,470
there and the the package itself had

00:04:03,120 --> 00:04:07,260
been updated to version 3 and I only

00:04:04,470 --> 00:04:10,650
specified just requests and not requests

00:04:07,260 --> 00:04:12,300
1.9 or whatever it was bad things happen

00:04:10,650 --> 00:04:14,340
so your dependencies should track not

00:04:12,300 --> 00:04:15,840
only the dependency itself but also a

00:04:14,340 --> 00:04:18,390
specific version because things get

00:04:15,840 --> 00:04:20,940
deprecated and bad things happen because

00:04:18,390 --> 00:04:23,940
if you don't if you're not specifying

00:04:20,940 --> 00:04:27,590
these dependencies you are fundamentally

00:04:23,940 --> 00:04:29,940
passing the buck to somebody else right

00:04:27,590 --> 00:04:31,830
if you pass that buck to somebody else

00:04:29,940 --> 00:04:33,960
things like that will happen you will

00:04:31,830 --> 00:04:36,960
end up using deprecated obsolete

00:04:33,960 --> 00:04:40,230
functions and then when it magically

00:04:36,960 --> 00:04:43,620
breaks in production when you do a new

00:04:40,230 --> 00:04:46,110
push we go back to that first thing of I

00:04:43,620 --> 00:04:49,410
didn't change anything and neither the

00:04:46,110 --> 00:04:56,310
environment now we know why we

00:04:49,410 --> 00:04:59,760
explicitly declare these ok your code is

00:04:56,310 --> 00:05:01,320
your application your configuration is

00:04:59,760 --> 00:05:02,580
the environment in which it runs in the

00:05:01,320 --> 00:05:06,050
description thereof

00:05:02,580 --> 00:05:11,010
those are separate things therefore they

00:05:06,050 --> 00:05:15,390
belong in separate places right so your

00:05:11,010 --> 00:05:17,940
configuration probably belongs in the

00:05:15,390 --> 00:05:20,610
environment because that varies between

00:05:17,940 --> 00:05:22,320
deploys but the code itself doesn't now

00:05:20,610 --> 00:05:25,260
there are dozens of different ways to

00:05:22,320 --> 00:05:27,090
handle this and certain applications or

00:05:25,260 --> 00:05:28,790
certain platforms are more opinionated

00:05:27,090 --> 00:05:32,220
about this than others Cloud Foundry

00:05:28,790 --> 00:05:34,950
happens to be like me very opinionated

00:05:32,220 --> 00:05:36,450
about this and will strongly encourage

00:05:34,950 --> 00:05:38,490
you to keep all of these sorts of things

00:05:36,450 --> 00:05:39,840
in the environment whether it's by bound

00:05:38,490 --> 00:05:42,930
services which we'll get to in a minute

00:05:39,840 --> 00:05:46,190
or user provided services that are

00:05:42,930 --> 00:05:49,470
effectively JSON encoded strings right

00:05:46,190 --> 00:05:51,390
it makes it much easier because now we

00:05:49,470 --> 00:05:54,960
have all of the access credentials the

00:05:51,390 --> 00:05:56,700
logging configs separate from the

00:05:54,960 --> 00:05:57,910
obligation they don't exist in a config

00:05:56,700 --> 00:06:01,000
file somewhere

00:05:57,910 --> 00:06:03,280
and they're really nice and we avoid

00:06:01,000 --> 00:06:05,080
this problem of me asking my friend

00:06:03,280 --> 00:06:08,590
Tyler on slack do you have the latest

00:06:05,080 --> 00:06:12,190
config file does anybody ever had this

00:06:08,590 --> 00:06:15,720
happened to them any of you that haven't

00:06:12,190 --> 00:06:15,720
raised your hand you just don't remember

00:06:16,110 --> 00:06:21,490
blocked it out of your memory that's

00:06:19,660 --> 00:06:22,810
really nice because then only people

00:06:21,490 --> 00:06:24,220
with access to the host or the account

00:06:22,810 --> 00:06:27,130
actually get to see you this french lady

00:06:24,220 --> 00:06:32,500
you don't end up leaking your AWS keys

00:06:27,130 --> 00:06:34,690
into github like me do you know that

00:06:32,500 --> 00:06:37,690
github will actually proactively email

00:06:34,690 --> 00:06:39,730
you as well AWS if you do that and shut

00:06:37,690 --> 00:06:49,180
down all your stuff right in the middle

00:06:39,730 --> 00:06:51,160
of a demo so credit for the next for rag

00:06:49,180 --> 00:06:53,080
is gonna come talk about what what some

00:06:51,160 --> 00:06:54,640
of the next four or five are and then

00:06:53,080 --> 00:07:05,500
you come back and have to listen to me

00:06:54,640 --> 00:07:08,020
some more lunch so hopefully we can do

00:07:05,500 --> 00:07:11,500
this real quickly and and get back to

00:07:08,020 --> 00:07:14,440
lunch my name is Raghav and srivasa but

00:07:11,500 --> 00:07:17,500
I go by rags you know feel free to reach

00:07:14,440 --> 00:07:19,300
out rags you know plenty of different

00:07:17,500 --> 00:07:22,750
social I'm not gonna go into all of

00:07:19,300 --> 00:07:24,670
those so so actually when we proposed

00:07:22,750 --> 00:07:26,350
this session we were just wondering you

00:07:24,670 --> 00:07:28,060
know how exactly do kind of go about

00:07:26,350 --> 00:07:29,770
doing this right and and really we

00:07:28,060 --> 00:07:32,080
didn't want it kind of associated with

00:07:29,770 --> 00:07:33,580
Cloud Foundry either it's not really

00:07:32,080 --> 00:07:36,040
something about operate or one or money

00:07:33,580 --> 00:07:38,110
either right it's it's something about

00:07:36,040 --> 00:07:40,720
you know how can we take a different

00:07:38,110 --> 00:07:42,730
perspective about twelve factor app and

00:07:40,720 --> 00:07:47,620
that's really what you know it came down

00:07:42,730 --> 00:07:50,650
to how many of you did that DevOps even

00:07:47,620 --> 00:07:52,570
before DevOps was a term right a lot of

00:07:50,650 --> 00:07:55,690
us did that right I mean I remember

00:07:52,570 --> 00:07:58,450
doing you know things like else seeking

00:07:55,690 --> 00:08:00,850
into you know a particular point within

00:07:58,450 --> 00:08:02,830
a file without having to go in process

00:08:00,850 --> 00:08:04,990
it one at one step you know one record

00:08:02,830 --> 00:08:08,200
at a time you know in a language that I

00:08:04,990 --> 00:08:09,970
won't mention okay but but you know

00:08:08,200 --> 00:08:11,180
things like that you know we have we've

00:08:09,970 --> 00:08:13,160
all done that

00:08:11,180 --> 00:08:16,850
but but you know one of the things that

00:08:13,160 --> 00:08:19,280
that really hit hippy home was you know

00:08:16,850 --> 00:08:23,600
last week at EMC world you know we are

00:08:19,280 --> 00:08:25,190
we did a DevOps you know they kind of

00:08:23,600 --> 00:08:27,139
thing I mean I guess I shouldn't call it

00:08:25,190 --> 00:08:29,509
the Bob stay but DevOps at EMC world and

00:08:27,139 --> 00:08:32,779
and you know we really got a whole lot

00:08:29,509 --> 00:08:34,729
of response you know I was just blown

00:08:32,779 --> 00:08:36,169
away by the response but the point is

00:08:34,729 --> 00:08:38,899
that you know I think all of us have

00:08:36,169 --> 00:08:41,659
been doing DevOps some form or another

00:08:38,899 --> 00:08:44,000
and this presentation is kind of you

00:08:41,659 --> 00:08:46,490
know putting you know yourself at both

00:08:44,000 --> 00:08:49,040
the frame of the developer and the

00:08:46,490 --> 00:08:51,170
operator and we kind of divided in such

00:08:49,040 --> 00:08:53,120
a way that I do a little bit more of the

00:08:51,170 --> 00:08:54,680
DevOps I mean the developer side and

00:08:53,120 --> 00:08:56,480
Matt is doing a little bit more of the

00:08:54,680 --> 00:09:01,490
operator side and we are kind of trying

00:08:56,480 --> 00:09:02,839
to put this together I mean if you you

00:09:01,490 --> 00:09:04,279
know put everything in the ammo files

00:09:02,839 --> 00:09:07,130
you know at least when you use in Cloud

00:09:04,279 --> 00:09:09,080
Foundry you know I I think I think it's

00:09:07,130 --> 00:09:11,930
a it's a neat thing to do because you

00:09:09,080 --> 00:09:14,420
know just CF push and CF push the ml

00:09:11,930 --> 00:09:16,160
file you know you're yeah Mel file can

00:09:14,420 --> 00:09:19,370
be just about four lines or it can be

00:09:16,160 --> 00:09:21,350
you know I've seen yeah Mel files which

00:09:19,370 --> 00:09:24,890
are I don't know thousand thousand lines

00:09:21,350 --> 00:09:28,130
I you know I think it's a good idea to

00:09:24,890 --> 00:09:30,650
put everything in yellow because at

00:09:28,130 --> 00:09:33,200
least those dependencies like what Matt

00:09:30,650 --> 00:09:33,920
was saying are not implicit but explicit

00:09:33,200 --> 00:09:37,190
okay

00:09:33,920 --> 00:09:39,290
so you know anything that your

00:09:37,190 --> 00:09:41,660
application uses you know database

00:09:39,290 --> 00:09:45,100
whatever right I think it's a good idea

00:09:41,660 --> 00:09:47,540
to to provide explicit bindings okay

00:09:45,100 --> 00:09:50,150
that way you know it's very declarative

00:09:47,540 --> 00:09:51,730
and and you can kind of find out the

00:09:50,150 --> 00:09:55,730
dependencies between these different

00:09:51,730 --> 00:09:57,709
applications if you were right I'm a

00:09:55,730 --> 00:10:00,410
strong proponent of avoiding user

00:09:57,709 --> 00:10:03,170
provided services if you can okay but

00:10:00,410 --> 00:10:04,790
but again you know none of these are you

00:10:03,170 --> 00:10:07,520
know cast in stone you know there's

00:10:04,790 --> 00:10:10,220
always a a little bit of slack in each

00:10:07,520 --> 00:10:12,140
of these right so if you can avoid

00:10:10,220 --> 00:10:14,810
implicit references like user provided

00:10:12,140 --> 00:10:18,829
services iti think that'll be great

00:10:14,810 --> 00:10:21,050
okay I see some some people nodding to

00:10:18,829 --> 00:10:25,190
this and really profile just about

00:10:21,050 --> 00:10:28,320
everything okay the the fifth

00:10:25,190 --> 00:10:31,620
factor in the 12 a crap is really that

00:10:28,320 --> 00:10:35,100
you want to distinguish the build the

00:10:31,620 --> 00:10:39,660
release and the run right very clearly

00:10:35,100 --> 00:10:42,870
you don't want to build something in a

00:10:39,660 --> 00:10:44,430
production scenario right I don't think

00:10:42,870 --> 00:10:45,120
that's a good idea you know I've done

00:10:44,430 --> 00:10:47,820
that before

00:10:45,120 --> 00:10:49,399
and suffered some bruises but but but

00:10:47,820 --> 00:10:52,140
you really want to avoid that if you can

00:10:49,399 --> 00:10:55,920
so they're separate stages of the

00:10:52,140 --> 00:10:57,930
application life cycle just worsen just

00:10:55,920 --> 00:11:00,810
about everything okay

00:10:57,930 --> 00:11:02,640
I think I think I like vagrant because

00:11:00,810 --> 00:11:04,320
you know again the idea is that you know

00:11:02,640 --> 00:11:05,970
your configuration also is in the source

00:11:04,320 --> 00:11:07,769
code right you know as long as you can

00:11:05,970 --> 00:11:10,440
worsen that I think that would be great

00:11:07,769 --> 00:11:13,200
use profiles where possible right and

00:11:10,440 --> 00:11:16,560
and really what I I think Bluegreen

00:11:13,200 --> 00:11:19,290
deployments are really you know not an

00:11:16,560 --> 00:11:22,079
exception they should be the rule right

00:11:19,290 --> 00:11:23,579
so that you are able to roll back or you

00:11:22,079 --> 00:11:25,680
know roll forward or you know do

00:11:23,579 --> 00:11:27,810
whatever you want it should it should

00:11:25,680 --> 00:11:32,160
not be an exception it should really be

00:11:27,810 --> 00:11:35,940
a row all right I think this is pretty

00:11:32,160 --> 00:11:39,600
topical going to the next one okay I'm a

00:11:35,940 --> 00:11:42,450
I'm from Boston and as some people might

00:11:39,600 --> 00:11:44,910
have heard in Boston you know sports is

00:11:42,450 --> 00:11:47,190
not just a way of life supports is life

00:11:44,910 --> 00:11:48,660
okay and today if you are a patriot fan

00:11:47,190 --> 00:11:51,480
you're a little bit depressed but but

00:11:48,660 --> 00:11:56,550
that's for another day you know the idea

00:11:51,480 --> 00:11:58,260
is that you know a process in unix one

00:11:56,550 --> 00:12:02,490
of the fundamental things is it's very

00:11:58,260 --> 00:12:05,970
lean and clean right you know i love the

00:12:02,490 --> 00:12:08,520
idea of being able to pipeline data from

00:12:05,970 --> 00:12:10,350
one process to another to another to

00:12:08,520 --> 00:12:13,230
another and so on right it's very

00:12:10,350 --> 00:12:16,110
lenient lean it just does its job right

00:12:13,230 --> 00:12:18,120
it basically does something takes input

00:12:16,110 --> 00:12:20,100
from the standard in and produces output

00:12:18,120 --> 00:12:22,380
to the standardout and if you can do

00:12:20,100 --> 00:12:25,800
that isolation you can create the

00:12:22,380 --> 00:12:27,390
separation of concern you know I think

00:12:25,800 --> 00:12:30,899
that's a great thing again from an

00:12:27,390 --> 00:12:33,570
operator perspective right it did did

00:12:30,899 --> 00:12:36,120
anybody attended talked at hall a that

00:12:33,570 --> 00:12:37,350
was immediately preceding this talk you

00:12:36,120 --> 00:12:38,220
know which talked about stateful

00:12:37,350 --> 00:12:39,570
services and how

00:12:38,220 --> 00:12:41,580
we can do stateful services and Cloud

00:12:39,570 --> 00:12:43,920
Foundry I think that is a great talk

00:12:41,580 --> 00:12:45,900
right I think I think I think it'll be

00:12:43,920 --> 00:12:50,190
really cool and we'll get to that in a

00:12:45,900 --> 00:12:53,850
second but but you know essentially if

00:12:50,190 --> 00:12:57,030
you can if you can you know isolate the

00:12:53,850 --> 00:12:59,040
the process and its responsibilities

00:12:57,030 --> 00:13:03,270
from an operator perspective it makes it

00:12:59,040 --> 00:13:06,810
a lot easier right so as far as possible

00:13:03,270 --> 00:13:09,390
you want to have stateless right but

00:13:06,810 --> 00:13:12,150
wherever you cannot and there are a

00:13:09,390 --> 00:13:13,890
bunch of those examples where you cannot

00:13:12,150 --> 00:13:16,350
have stateful I mean you cannot have

00:13:13,890 --> 00:13:18,290
stateless processes right you want to

00:13:16,350 --> 00:13:20,730
categorize them as state flow and

00:13:18,290 --> 00:13:23,040
stateless right and you want to be able

00:13:20,730 --> 00:13:24,960
to deal with the stateful processes a

00:13:23,040 --> 00:13:26,850
little bit differently and again if you

00:13:24,960 --> 00:13:28,410
attended the previous session they

00:13:26,850 --> 00:13:29,820
talked about something called as you

00:13:28,410 --> 00:13:31,890
know like being able to handle

00:13:29,820 --> 00:13:34,290
interrupts and being able to drain them

00:13:31,890 --> 00:13:36,060
and so on and so forth okay a lot of the

00:13:34,290 --> 00:13:38,850
noise scale systems like you know I

00:13:36,060 --> 00:13:40,980
worked at Couchbase you know they do

00:13:38,850 --> 00:13:42,750
this kind of automatically for you right

00:13:40,980 --> 00:13:44,880
in the sense that you know if one node

00:13:42,750 --> 00:13:47,130
goes down no problem you know

00:13:44,880 --> 00:13:48,780
replication is handled and if it comes

00:13:47,130 --> 00:13:51,660
back up again you know everything is

00:13:48,780 --> 00:13:52,350
distributed you know things are taken

00:13:51,660 --> 00:13:55,560
care of for you

00:13:52,350 --> 00:13:58,860
but but you know just because it's you

00:13:55,560 --> 00:14:00,330
know not noise kill doesn't mean that

00:13:58,860 --> 00:14:03,000
you cannot do the same thing like for

00:14:00,330 --> 00:14:05,130
example if you have used Galera right it

00:14:03,000 --> 00:14:08,190
kind of does the same thing as well so

00:14:05,130 --> 00:14:09,660
if one node goes down it really doesn't

00:14:08,190 --> 00:14:11,310
matter because it does replication under

00:14:09,660 --> 00:14:12,690
the hoods right it's a little bit

00:14:11,310 --> 00:14:15,240
different from this typical noise scale

00:14:12,690 --> 00:14:18,000
replication but but at the same time you

00:14:15,240 --> 00:14:20,910
know it works reasonably well okay so

00:14:18,000 --> 00:14:23,820
again the idea is that you know one

00:14:20,910 --> 00:14:25,470
process one responsibility okay if you

00:14:23,820 --> 00:14:28,350
can do that and separate them into

00:14:25,470 --> 00:14:30,540
stateful and stateless it becomes a lot

00:14:28,350 --> 00:14:33,210
easier from an operator perspective if I

00:14:30,540 --> 00:14:35,790
am stateless no big deal you know I just

00:14:33,210 --> 00:14:37,350
get rid of the process right and and

00:14:35,790 --> 00:14:39,480
bring up another one and I'm all set to

00:14:37,350 --> 00:14:40,650
go right but if it stayed for the

00:14:39,480 --> 00:14:46,560
operator might have to handle it a

00:14:40,650 --> 00:14:49,110
little bit differently okay boss is a

00:14:46,560 --> 00:14:51,480
great thing when it works fine right and

00:14:49,110 --> 00:14:52,860
and most of the time it works you know

00:14:51,480 --> 00:14:54,720
without without me having to intervene

00:14:52,860 --> 00:14:58,320
but but again you know when I went back

00:14:54,720 --> 00:15:01,980
to you know using reselect vm with bosch

00:14:58,320 --> 00:15:04,139
right it was great but I got to a point

00:15:01,980 --> 00:15:06,240
where you know I had to kill a VM and

00:15:04,139 --> 00:15:08,339
and bring it up bring it back up right

00:15:06,240 --> 00:15:10,740
but I lost my entire stayed there

00:15:08,339 --> 00:15:12,510
because it basically had the original

00:15:10,740 --> 00:15:14,100
state and then brought it back to the

00:15:12,510 --> 00:15:16,829
desired state so think about that right

00:15:14,100 --> 00:15:18,839
port binding is something you know I

00:15:16,829 --> 00:15:21,540
don't think it's directly applicable

00:15:18,839 --> 00:15:24,360
maybe I'm I'm not reading this right or

00:15:21,540 --> 00:15:26,670
whatever right but but again the idea is

00:15:24,360 --> 00:15:29,250
if you can export services by a port

00:15:26,670 --> 00:15:30,870
boiling and for the most part you know

00:15:29,250 --> 00:15:32,250
the cloud for any platform does that and

00:15:30,870 --> 00:15:34,860
many of the modern platforms do that

00:15:32,250 --> 00:15:36,420
anyway for you okay so this is something

00:15:34,860 --> 00:15:38,070
that you know I think we may want to

00:15:36,420 --> 00:15:41,480
talk about a little bit more or maybe

00:15:38,070 --> 00:15:41,480
some of you can pipe in later okay

00:15:41,570 --> 00:15:47,339
concurrency again is an extension of six

00:15:45,360 --> 00:15:49,440
you know which is being able to isolate

00:15:47,339 --> 00:15:52,110
these different processes and as long as

00:15:49,440 --> 00:15:54,480
you can you know you can have again one

00:15:52,110 --> 00:15:57,660
process responsible for one thing it's

00:15:54,480 --> 00:15:59,459
very easy to scale it out right because

00:15:57,660 --> 00:16:02,910
you know if you know that that one thing

00:15:59,459 --> 00:16:04,949
is doing that that one function it's

00:16:02,910 --> 00:16:06,510
easier to scale it out whereas you know

00:16:04,949 --> 00:16:08,760
if there are multiple dependencies then

00:16:06,510 --> 00:16:11,310
you know you have to kind of figure out

00:16:08,760 --> 00:16:16,339
how exactly to you know to accomplish

00:16:11,310 --> 00:16:18,630
the same thing so it's it's not really

00:16:16,339 --> 00:16:21,209
required for certain aspects like for

00:16:18,630 --> 00:16:23,550
example if you have a you know a short

00:16:21,209 --> 00:16:26,040
running process you know if you have a a

00:16:23,550 --> 00:16:28,139
job that you know wakes up on a cron or

00:16:26,040 --> 00:16:29,880
something like that right it's probably

00:16:28,139 --> 00:16:32,310
not required but but at the same time

00:16:29,880 --> 00:16:35,449
you know this is the diagram I take I

00:16:32,310 --> 00:16:38,220
took straight from the 12 factor

00:16:35,449 --> 00:16:40,860
manifesto that's on Heroku right and and

00:16:38,220 --> 00:16:43,980
essentially again the idea is that if

00:16:40,860 --> 00:16:46,079
you have processes you know which have a

00:16:43,980 --> 00:16:50,790
single function then you can deal with

00:16:46,079 --> 00:16:53,130
it you know easier okay so kind of a

00:16:50,790 --> 00:16:54,990
related concept again here is the aspect

00:16:53,130 --> 00:16:57,569
of disposability you know a lot of these

00:16:54,990 --> 00:16:59,490
factors are kind of intermingled amongst

00:16:57,569 --> 00:17:02,310
each other right so it's kind of hard to

00:16:59,490 --> 00:17:04,830
you know distinguish between them but

00:17:02,310 --> 00:17:07,380
again the idea is that losing a process

00:17:04,830 --> 00:17:11,550
should really be a normal event right I

00:17:07,380 --> 00:17:13,680
had really you know one care right it's

00:17:11,550 --> 00:17:15,089
really the pet pet versus cattle okay

00:17:13,680 --> 00:17:17,430
our pet was is a chicken to be

00:17:15,089 --> 00:17:18,990
politically correct okay you know I'm

00:17:17,430 --> 00:17:21,810
from India I can separate or schedule

00:17:18,990 --> 00:17:23,700
but but in any case you know if one of

00:17:21,810 --> 00:17:25,260
the processes dies you know all that you

00:17:23,700 --> 00:17:27,570
do is you know shoot it and kind of move

00:17:25,260 --> 00:17:30,480
on right so there's no loss of state if

00:17:27,570 --> 00:17:32,970
you lose a process and release your

00:17:30,480 --> 00:17:36,840
startup time should be really low and

00:17:32,970 --> 00:17:39,000
and in essentially if there is an errant

00:17:36,840 --> 00:17:42,060
process right a process that's not

00:17:39,000 --> 00:17:42,630
running correctly either it kind of self

00:17:42,060 --> 00:17:45,810
heals

00:17:42,630 --> 00:17:47,970
are you kind of like I said you know

00:17:45,810 --> 00:17:49,890
shoot it and start off another one as an

00:17:47,970 --> 00:17:51,930
operator again you know if it's a

00:17:49,890 --> 00:17:53,760
stateful process you know I need to do

00:17:51,930 --> 00:17:55,290
something a little bit differently but

00:17:53,760 --> 00:17:57,060
if it's the stateless process all that I

00:17:55,290 --> 00:17:59,040
need to do is you know shoot it down and

00:17:57,060 --> 00:18:00,720
bring another one and I'm ready to go

00:17:59,040 --> 00:18:02,940
okay and a lot of times you know this

00:18:00,720 --> 00:18:06,420
may even run you know without any

00:18:02,940 --> 00:18:09,150
operator intervention at all okay with

00:18:06,420 --> 00:18:10,650
that here's you know any any

00:18:09,150 --> 00:18:12,720
presentation should have a picture of a

00:18:10,650 --> 00:18:17,720
cat or a kitten right so this is the pet

00:18:12,720 --> 00:18:17,720
versus chicken okay and back to match

00:18:28,660 --> 00:18:33,750
[Music]

00:18:30,890 --> 00:18:36,330
cattle was a tough sell shooting cattle

00:18:33,750 --> 00:18:39,840
in the head is a tough sell in a country

00:18:36,330 --> 00:18:41,310
with a billion people so we moved two

00:18:39,840 --> 00:18:42,840
chickens and then I just found out

00:18:41,310 --> 00:18:44,700
yesterday that my neighbor actually

00:18:42,840 --> 00:18:45,870
keeps chickens as pets and has like a

00:18:44,700 --> 00:18:49,050
little baby book from when they hatched

00:18:45,870 --> 00:18:51,570
out of their eggs and so I I got to

00:18:49,050 --> 00:18:55,130
figure something out it worked on my

00:18:51,570 --> 00:18:55,130
machine and it's fine

00:18:57,590 --> 00:19:04,169
that's strangely enough looks a lot like

00:18:59,730 --> 00:19:07,860
my daughter Deb and prod should be as

00:19:04,169 --> 00:19:09,659
close as possible because that prevents

00:19:07,860 --> 00:19:11,700
mistakes right but that doesn't mean

00:19:09,659 --> 00:19:13,260
that they have to be identical it's ok

00:19:11,700 --> 00:19:14,820
if they're different from a performance

00:19:13,260 --> 00:19:16,320
perspective if you're not testing

00:19:14,820 --> 00:19:20,840
performance if what you're primarily

00:19:16,320 --> 00:19:23,580
testing is functional correctness

00:19:20,840 --> 00:19:25,620
failure scenarios those sorts of things

00:19:23,580 --> 00:19:27,480
it's fine if your development

00:19:25,620 --> 00:19:29,610
environment doesn't match production

00:19:27,480 --> 00:19:32,370
from a scale perspective but you do need

00:19:29,610 --> 00:19:34,710
to be using the same software the same

00:19:32,370 --> 00:19:37,380
versions of code all of that is a lot

00:19:34,710 --> 00:19:41,580
easier if you follow the previous nine

00:19:37,380 --> 00:19:42,960
items right other things like vagrant

00:19:41,580 --> 00:19:45,779
and docker can make these kinds of

00:19:42,960 --> 00:19:47,970
things easier so that you don't end up

00:19:45,779 --> 00:19:50,760
with a scenario where you've tested it

00:19:47,970 --> 00:19:58,230
on one tiny little subset of possible

00:19:50,760 --> 00:20:02,840
options that's my favorite thing I've

00:19:58,230 --> 00:20:06,299
ever posts they put up on the slide logs

00:20:02,840 --> 00:20:10,820
this is my favorite error and I have

00:20:06,299 --> 00:20:10,820
seen this way too many times the count

00:20:11,090 --> 00:20:17,070
that are the other versions of you

00:20:13,889 --> 00:20:21,929
should never see this no pointer

00:20:17,070 --> 00:20:24,590
exception colon null yeah those ones

00:20:21,929 --> 00:20:27,210
signal 11 that's another good favorite

00:20:24,590 --> 00:20:31,740
there is absolutely no excuse for this

00:20:27,210 --> 00:20:34,200
okay you can go down to Fry's and buy a

00:20:31,740 --> 00:20:36,649
6 terabyte disk for like 2 or 3 or 400

00:20:34,200 --> 00:20:39,299
bucks ok storage is cheap

00:20:36,649 --> 00:20:40,049
CPU to do the searching of those logs is

00:20:39,299 --> 00:20:42,240
cheap

00:20:40,049 --> 00:20:45,000
they help blogs help fix the problem

00:20:42,240 --> 00:20:47,370
after they happen ok so there is no

00:20:45,000 --> 00:20:49,740
excuse to not be logging the living

00:20:47,370 --> 00:20:51,929
daylights out of your application as

00:20:49,740 --> 00:20:53,549
long as it doesn't notably damage

00:20:51,929 --> 00:20:56,309
performance right so it might not you

00:20:53,549 --> 00:20:59,190
might want to run full-on debug logs all

00:20:56,309 --> 00:21:01,380
the time but I see no reason why you

00:20:59,190 --> 00:21:04,950
wouldn't run info level logs on most

00:21:01,380 --> 00:21:06,929
applications ok because the storage to

00:21:04,950 --> 00:21:09,530
do them is cheap you can use tools like

00:21:06,929 --> 00:21:11,810
LK or Splunk or

00:21:09,530 --> 00:21:15,320
whatever you want to use to catalog and

00:21:11,810 --> 00:21:18,790
search them easily this is a solved

00:21:15,320 --> 00:21:21,890
problem so let's use that solution a

00:21:18,790 --> 00:21:24,740
specific suggestion is when you have a

00:21:21,890 --> 00:21:26,650
very complex application something micro

00:21:24,740 --> 00:21:29,630
service-based five different services

00:21:26,650 --> 00:21:31,580
sorting out a single user request it

00:21:29,630 --> 00:21:33,290
would be valuable for your logs to

00:21:31,580 --> 00:21:36,980
complain to contain some sort of

00:21:33,290 --> 00:21:39,440
transaction token right that corresponds

00:21:36,980 --> 00:21:41,240
to that specific request or work process

00:21:39,440 --> 00:21:43,280
or something along those lines because

00:21:41,240 --> 00:21:45,670
it makes it easier to follow that

00:21:43,280 --> 00:21:49,580
particular error issue or problem

00:21:45,670 --> 00:21:51,500
throughout your stack this is something

00:21:49,580 --> 00:21:53,660
most people end up learning after the

00:21:51,500 --> 00:21:56,000
first time they try to follow an issue

00:21:53,660 --> 00:21:58,550
well this might be the same transaction

00:21:56,000 --> 00:22:01,090
because occurred within 73 milliseconds

00:21:58,550 --> 00:22:04,370
of the other one on this other system

00:22:01,090 --> 00:22:07,400
but fundamentally logs produce the

00:22:04,370 --> 00:22:08,780
ability to create a root cause analysis

00:22:07,400 --> 00:22:11,570
if you don't have the logs

00:22:08,780 --> 00:22:16,220
you can't build that RCA because you

00:22:11,570 --> 00:22:18,080
don't really know what happened right so

00:22:16,220 --> 00:22:21,620
if you ever want to be able to walk up

00:22:18,080 --> 00:22:24,440
to your CTO and say the crash happened

00:22:21,620 --> 00:22:29,300
we can all say that it was front-page

00:22:24,440 --> 00:22:31,850
news and I know why it happened and how

00:22:29,300 --> 00:22:35,150
to fix it that last part is how you keep

00:22:31,850 --> 00:22:38,530
your job right that's last part was what

00:22:35,150 --> 00:22:38,530
makes it not a career limiting move

00:22:39,040 --> 00:22:44,750
along with that is the concomitant view

00:22:41,990 --> 00:22:47,930
to measure and monitor everything you

00:22:44,750 --> 00:22:53,720
can okay whether you when whether you

00:22:47,930 --> 00:22:57,620
use something like graphite or spunk or

00:22:53,720 --> 00:23:00,320
anything monitor all of it because you

00:22:57,620 --> 00:23:02,930
can turn that time series data into

00:23:00,320 --> 00:23:07,010
answers about what caused problems and

00:23:02,930 --> 00:23:09,920
where they came from later right you can

00:23:07,010 --> 00:23:14,510
turn that into gee I had a giant spike

00:23:09,920 --> 00:23:15,800
in queue length 10 seconds before my

00:23:14,510 --> 00:23:19,850
cache hit rates dropped through the

00:23:15,800 --> 00:23:22,780
floor that is the beginnings of finding

00:23:19,850 --> 00:23:25,930
that root cause if you don't have that

00:23:22,780 --> 00:23:27,190
measurement get it right and if you

00:23:25,930 --> 00:23:29,110
don't you're not going to get that after

00:23:27,190 --> 00:23:33,970
the fact right so monitor measure

00:23:29,110 --> 00:23:36,370
everything you can administrative

00:23:33,970 --> 00:23:38,290
processes are real they happen and you

00:23:36,370 --> 00:23:41,440
need to think of them from the beginning

00:23:38,290 --> 00:23:45,000
and not the end right one of the things

00:23:41,440 --> 00:23:48,130
that I love to see is is enterprise

00:23:45,000 --> 00:23:50,920
applications that have you know all this

00:23:48,130 --> 00:23:53,950
awesome concurrency and stuff built into

00:23:50,920 --> 00:23:55,390
them and then they say every 30 days you

00:23:53,950 --> 00:23:56,890
should run this random script that we

00:23:55,390 --> 00:23:59,980
found in our KB to clean up your

00:23:56,890 --> 00:24:04,390
database yeah

00:23:59,980 --> 00:24:06,460
VMware is notorious for that one if

00:24:04,390 --> 00:24:07,780
you're doing that sort of thing and

00:24:06,460 --> 00:24:10,120
you're running these random scripts you

00:24:07,780 --> 00:24:13,120
found from support or a KB or something

00:24:10,120 --> 00:24:14,800
like that you're losing a lot of the

00:24:13,120 --> 00:24:16,360
benefits you had before they're not in

00:24:14,800 --> 00:24:19,240
your codebase you can't figure out who

00:24:16,360 --> 00:24:21,370
to blame when it breaks right they don't

00:24:19,240 --> 00:24:23,080
get logged to the same way they don't

00:24:21,370 --> 00:24:25,570
get measured the same way

00:24:23,080 --> 00:24:28,530
not everybody can see what happened and

00:24:25,570 --> 00:24:32,920
so now you have this one-off

00:24:28,530 --> 00:24:35,290
snowflake event and let me tell you in a

00:24:32,920 --> 00:24:37,210
modern application of 12 factor

00:24:35,290 --> 00:24:39,970
application there is no such thing as a

00:24:37,210 --> 00:24:43,950
beautiful and unique snowflake there are

00:24:39,970 --> 00:24:45,910
ugly and painful to maintain snowflakes

00:24:43,950 --> 00:24:49,060
but there are no beautiful and unique

00:24:45,910 --> 00:24:50,620
snowflakes or unicorns okay so don't run

00:24:49,060 --> 00:24:52,060
them against the terminal don't run

00:24:50,620 --> 00:24:54,970
updates against databases don't use

00:24:52,060 --> 00:24:57,910
something like sequel bench to do an

00:24:54,970 --> 00:24:59,620
update one of the things that can help

00:24:57,910 --> 00:25:01,390
you make this easier because some of

00:24:59,620 --> 00:25:03,910
these things do need to be run exactly

00:25:01,390 --> 00:25:06,550
once right you don't want to just sort

00:25:03,910 --> 00:25:08,770
of pray and hope certain things like for

00:25:06,550 --> 00:25:11,580
example Bosh has this concept of errands

00:25:08,770 --> 00:25:14,110
that can happen one time that maybe

00:25:11,580 --> 00:25:16,660
somebody you want to look at four things

00:25:14,110 --> 00:25:19,000
that Bosh perhaps can't handle the whole

00:25:16,660 --> 00:25:21,220
idea of chat ops of having everybody

00:25:19,000 --> 00:25:23,350
within a chat room working together

00:25:21,220 --> 00:25:25,450
whether they use hangouts or slack or

00:25:23,350 --> 00:25:26,710
whatever I don't care means that

00:25:25,450 --> 00:25:28,390
everybody can see the input and output

00:25:26,710 --> 00:25:30,970
of everything that's happening that

00:25:28,390 --> 00:25:33,250
means you get logging of the history and

00:25:30,970 --> 00:25:37,200
you get mutual understanding of what's

00:25:33,250 --> 00:25:37,200
going on okay

00:25:37,920 --> 00:25:47,320
those 12 factors will quite possibly be

00:25:45,370 --> 00:25:49,180
the difference between a successful

00:25:47,320 --> 00:25:51,340
deployment and management of an

00:25:49,180 --> 00:25:52,990
application and the unsuccessful

00:25:51,340 --> 00:25:56,200
deployment and management of an

00:25:52,990 --> 00:25:59,260
application if you want to see more

00:25:56,200 --> 00:26:02,050
about how these things work and some

00:25:59,260 --> 00:26:04,570
similar ideas the website for the 12

00:26:02,050 --> 00:26:08,110
factors is fantastic it's 12 factor net

00:26:04,570 --> 00:26:09,880
strangely enough some more resources

00:26:08,110 --> 00:26:12,670
there's a fantastic blog article called

00:26:09,880 --> 00:26:16,180
systems that never stop by the way 100%

00:26:12,670 --> 00:26:19,690
of these slides are on the emc code

00:26:16,180 --> 00:26:22,840
github so search for me search for ads

00:26:19,690 --> 00:26:25,330
you'll find it there's a pivotal podcast

00:26:22,840 --> 00:26:26,920
that was given about these that's

00:26:25,330 --> 00:26:31,590
probably one of the best podcast I've

00:26:26,920 --> 00:26:34,510
ever heard Werner Vogel's from from

00:26:31,590 --> 00:26:36,280
where Burroughs has this great article

00:26:34,510 --> 00:26:37,600
about if you build it you run it right

00:26:36,280 --> 00:26:41,200
this is how about the whole bringing

00:26:37,600 --> 00:26:42,940
davin ops together give strangely enough

00:26:41,200 --> 00:26:46,240
if you give a developer or pager they

00:26:42,940 --> 00:26:49,870
fix bugs faster this presentation

00:26:46,240 --> 00:26:51,280
perhaps and we have approximately four

00:26:49,870 --> 00:27:02,440
minutes three to three minutes for

00:26:51,280 --> 00:27:04,300
questions or you can go get lunch any

00:27:02,440 --> 00:27:09,830
questions it's always scary when there

00:27:04,300 --> 00:27:12,089
are no questions cool thanks everybody

00:27:09,830 --> 00:27:12,089

YouTube URL: https://www.youtube.com/watch?v=QOz1UOf6MdU


