Title: Managing Cloud Foundry on Azure with hybrid integration options
Publication date: 2015-05-12
Playlist: Cloud Foundry Summit 2015
Description: 
	Managing Cloud Foundry on Azure with hybrid integration options - 04 Ning Kuang, Kundana Palagiri 720p
Captions: 
	00:00:02,090 --> 00:00:07,170
good afternoon everyone

00:00:05,210 --> 00:00:11,730
thank you for coming to our session

00:00:07,170 --> 00:00:15,059
today I I hope no one had trouble

00:00:11,730 --> 00:00:15,900
finding the spot thank you though thank

00:00:15,059 --> 00:00:18,359
you for coming

00:00:15,900 --> 00:00:20,369
my name is Khun Danai Kundun apolog Irie

00:00:18,359 --> 00:00:23,010
I'm a program manager in the azure

00:00:20,369 --> 00:00:25,500
compute team I work on primarily

00:00:23,010 --> 00:00:28,380
infrastructural service and with me here

00:00:25,500 --> 00:00:30,630
is Ming my colleague yeah my name is

00:00:28,380 --> 00:00:32,790
Ming qualm I'm the program manager for

00:00:30,630 --> 00:00:35,700
as your open source technology

00:00:32,790 --> 00:00:40,020
Technology Center in Shanghai and our

00:00:35,700 --> 00:00:41,969
team work on open source technology on

00:00:40,020 --> 00:00:48,120
Asia and also the cloud foundry

00:00:41,969 --> 00:00:50,820
engineering work cool so let's get

00:00:48,120 --> 00:00:52,710
started today we me and Ning we are

00:00:50,820 --> 00:00:54,809
going to talk about cloud Fondren Azure

00:00:52,710 --> 00:00:57,149
and you know what we want you to take

00:00:54,809 --> 00:00:59,609
away with it is learn about cloud

00:00:57,149 --> 00:01:02,609
foundry support for a sure and how you

00:00:59,609 --> 00:01:03,539
can manage your workloads whether it is

00:01:02,609 --> 00:01:10,350
in Azure

00:01:03,539 --> 00:01:12,390
or a hybrid cloud environment so before

00:01:10,350 --> 00:01:15,420
we take a look at what we are supporting

00:01:12,390 --> 00:01:18,270
this is a high-level picture of what

00:01:15,420 --> 00:01:20,610
what we are going to be in enabling with

00:01:18,270 --> 00:01:23,850
this announcement so we are assure is

00:01:20,610 --> 00:01:26,369
providing a Bosch CPI implemented using

00:01:23,850 --> 00:01:28,049
the new resource manager API and I'll

00:01:26,369 --> 00:01:30,600
get I will get into the details of what

00:01:28,049 --> 00:01:33,150
Resource Manager ApS are in a bit so we

00:01:30,600 --> 00:01:35,400
have the CPI for a sure we are also

00:01:33,150 --> 00:01:37,380
going to leverage the azure templates

00:01:35,400 --> 00:01:39,450
for simplifying the deployment steps

00:01:37,380 --> 00:01:41,400
again in a bit we'll get into what as

00:01:39,450 --> 00:01:43,079
your templates are basically they will

00:01:41,400 --> 00:01:45,810
show you how as your templates can

00:01:43,079 --> 00:01:47,310
simplify deployment and we are going we

00:01:45,810 --> 00:01:50,790
have actually embraced the community

00:01:47,310 --> 00:01:52,979
model for supporting the CPI and with

00:01:50,790 --> 00:01:55,470
the last the last class but not least is

00:01:52,979 --> 00:01:58,560
we have provided consistent user

00:01:55,470 --> 00:02:00,659
experience for multiple clouds so what

00:01:58,560 --> 00:02:02,340
that means is the cloud the experience

00:02:00,659 --> 00:02:04,700
that you get for deploying Cloud Foundry

00:02:02,340 --> 00:02:07,079
in any cloud in any cloud platform is

00:02:04,700 --> 00:02:09,509
consistent with the experience that

00:02:07,079 --> 00:02:11,790
you're going to get an azure and finally

00:02:09,509 --> 00:02:13,440
using cloud foundry and Azure you can

00:02:11,790 --> 00:02:15,540
also extend your on

00:02:13,440 --> 00:02:18,830
trem workload su cloud will again get

00:02:15,540 --> 00:02:21,780
into details of what all this means is

00:02:18,830 --> 00:02:24,630
what our engineering goals so when we

00:02:21,780 --> 00:02:26,850
started on this project last December we

00:02:24,630 --> 00:02:28,920
took over the project of enabling her

00:02:26,850 --> 00:02:31,050
out 400 CPI there was already some work

00:02:28,920 --> 00:02:33,360
in a github branch so when we took that

00:02:31,050 --> 00:02:36,150
project these were the engineering goals

00:02:33,360 --> 00:02:38,040
that we had in mind first and foremost

00:02:36,150 --> 00:02:41,520
we wanted to ship an all open-source

00:02:38,040 --> 00:02:44,000
project under the Apache 2 license this

00:02:41,520 --> 00:02:46,500
project is today available in that URL

00:02:44,000 --> 00:02:48,990
the next thing is we wanted to be part

00:02:46,500 --> 00:02:51,540
of the community as we develop the CPI

00:02:48,990 --> 00:02:53,670
we wanted to actually leverage the power

00:02:51,540 --> 00:02:56,700
of the community and contribute to the

00:02:53,670 --> 00:02:58,020
community and you know and also align

00:02:56,700 --> 00:02:59,670
with the community's engineering

00:02:58,020 --> 00:03:00,870
practices whether it's not the testing

00:02:59,670 --> 00:03:04,140
practices the unit desk

00:03:00,870 --> 00:03:07,080
CI syrup etc and fine and the next thing

00:03:04,140 --> 00:03:09,690
we the goal that we had was as we take

00:03:07,080 --> 00:03:11,300
the CPI and adopt it to assure you know

00:03:09,690 --> 00:03:13,530
how do we make it simplify the

00:03:11,300 --> 00:03:15,300
deployment steps in a sure you know

00:03:13,530 --> 00:03:17,910
whether it's by you know providing some

00:03:15,300 --> 00:03:21,480
kind of pre created templates or by

00:03:17,910 --> 00:03:22,950
providing documentation and finally you

00:03:21,480 --> 00:03:24,950
know we have taken a crawl walk run

00:03:22,950 --> 00:03:28,050
approach this is the first step to

00:03:24,950 --> 00:03:30,510
support cloud font in Azure and we have

00:03:28,050 --> 00:03:37,260
an ongoing commitment to enhance this

00:03:30,510 --> 00:03:39,090
support in Azure so before we get

00:03:37,260 --> 00:03:49,769
started right I want quick show of hands

00:03:39,090 --> 00:03:53,130
how many of you use Azure so as your as

00:03:49,769 --> 00:03:54,690
a so why a sure why why did we do why

00:03:53,130 --> 00:03:56,670
did we actually start this project of

00:03:54,690 --> 00:03:58,260
supporting Cloud Foundry and Azure one

00:03:56,670 --> 00:03:59,489
of the reasons is you know our customers

00:03:58,260 --> 00:04:01,110
have asked that they want to run an

00:03:59,489 --> 00:04:03,300
azure and that's that's simply the

00:04:01,110 --> 00:04:05,730
reason why we've taken on this project

00:04:03,300 --> 00:04:08,220
but a bigger question why Asha is a sure

00:04:05,730 --> 00:04:10,739
is Microsoft's cloud platform

00:04:08,220 --> 00:04:12,690
environment and as an open cloud it

00:04:10,739 --> 00:04:14,280
supports hyper scale enterprise grade

00:04:12,690 --> 00:04:16,880
and hybrid environments so azure

00:04:14,280 --> 00:04:19,290
supports both platform and service and

00:04:16,880 --> 00:04:24,180
infrastructure as a service for both

00:04:19,290 --> 00:04:25,919
Windows and Linux environments a little

00:04:24,180 --> 00:04:27,610
bit we'll get into details of what this

00:04:25,919 --> 00:04:33,729
means and why this is

00:04:27,610 --> 00:04:35,800
and so first thing is the the hyper

00:04:33,729 --> 00:04:38,710
scale part so hyper scale is the ability

00:04:35,800 --> 00:04:40,719
to run your code anywhere you want

00:04:38,710 --> 00:04:43,030
knowing that you can scale up or scale

00:04:40,719 --> 00:04:45,759
down without worrying your about

00:04:43,030 --> 00:04:48,610
capacity running out of capacity so I

00:04:45,759 --> 00:04:50,770
sure as a hyper scale cloud is actually

00:04:48,610 --> 00:04:53,289
operating in nineteen centered nineteen

00:04:50,770 --> 00:04:55,449
datacenter regions what this gives is

00:04:53,289 --> 00:04:57,400
again unprecedented access to capacity

00:04:55,449 --> 00:04:59,680
this is an investment we've been it's an

00:04:57,400 --> 00:05:05,080
ongoing investment from ashore for the

00:04:59,680 --> 00:05:07,870
last couple of years and then this light

00:05:05,080 --> 00:05:09,819
is a point in time snapshot of the

00:05:07,870 --> 00:05:10,509
technologies that are supported in Azure

00:05:09,819 --> 00:05:14,169
today

00:05:10,509 --> 00:05:15,879
asher is on a path to actually you know

00:05:14,169 --> 00:05:17,620
embrace many of these open source

00:05:15,879 --> 00:05:19,479
technologies this does not actually

00:05:17,620 --> 00:05:21,849
reflect everything that we support today

00:05:19,479 --> 00:05:24,639
but as some of the technologies so if

00:05:21,849 --> 00:05:27,400
you look at you know tools to provision

00:05:24,639 --> 00:05:29,379
in tools to provision and resources in a

00:05:27,400 --> 00:05:31,479
short or the languages that that can be

00:05:29,379 --> 00:05:33,610
done as your this is a growing list you

00:05:31,479 --> 00:05:36,099
can do it not only from our own tools

00:05:33,610 --> 00:05:38,440
that we provide but you can also do it

00:05:36,099 --> 00:05:40,389
from some of the third-party tools that

00:05:38,440 --> 00:05:43,629
either we have worked with them to an

00:05:40,389 --> 00:05:50,500
integrate it to a with a or or provided

00:05:43,629 --> 00:05:52,839
by the community itself so the next

00:05:50,500 --> 00:05:54,009
thing you know if it when the next thing

00:05:52,839 --> 00:05:56,740
i want to talk about is the azure

00:05:54,009 --> 00:06:00,250
resource manager as one of the building

00:05:56,740 --> 00:06:02,379
blocks that we use for managing

00:06:00,250 --> 00:06:04,419
infrastructure in Azure so before we

00:06:02,379 --> 00:06:06,750
talk about this I want to give a quick

00:06:04,419 --> 00:06:09,310
background of why this is important

00:06:06,750 --> 00:06:11,469
previously you know when you create

00:06:09,310 --> 00:06:13,750
resources in Azure whether it is storage

00:06:11,469 --> 00:06:15,099
network or compute you know you would

00:06:13,750 --> 00:06:18,430
have to like provision all of them

00:06:15,099 --> 00:06:20,080
separately and then connect them and

00:06:18,430 --> 00:06:23,469
then you know you need to connect them

00:06:20,080 --> 00:06:26,169
together what as your resource manager

00:06:23,469 --> 00:06:28,479
brings to the table is it actually gives

00:06:26,169 --> 00:06:30,909
you the power to define declaratively

00:06:28,479 --> 00:06:32,830
the resources that you are going to use

00:06:30,909 --> 00:06:36,069
in your application you can set the

00:06:32,830 --> 00:06:37,180
dependencies between them and at that

00:06:36,069 --> 00:06:39,520
once you have defined your

00:06:37,180 --> 00:06:40,270
infrastructure in a JSON like JSON

00:06:39,520 --> 00:06:42,340
language

00:06:40,270 --> 00:06:44,020
as your resource manager is responsible

00:06:42,340 --> 00:06:46,330
for instantiated

00:06:44,020 --> 00:06:49,120
all the resources that were specified in

00:06:46,330 --> 00:06:51,700
the resource manager and but it does

00:06:49,120 --> 00:06:54,550
that by using an orchestration model and

00:06:51,700 --> 00:06:56,020
it also supports rollback and behind the

00:06:54,550 --> 00:06:58,540
scenes when you define your

00:06:56,020 --> 00:07:01,240
infrastructure in this JSON template

00:06:58,540 --> 00:07:04,450
behind this this is this is a JSON file

00:07:01,240 --> 00:07:06,700
which can be checked in as you know it's

00:07:04,450 --> 00:07:08,140
checked into a source repo and you know

00:07:06,700 --> 00:07:10,570
it also supports things like

00:07:08,140 --> 00:07:12,790
parameterization so you can define

00:07:10,570 --> 00:07:16,540
various environments your dev test stage

00:07:12,790 --> 00:07:19,690
and you can provide different parameters

00:07:16,540 --> 00:07:22,210
for each environment so why this is

00:07:19,690 --> 00:07:24,550
important is you know to do repeatable

00:07:22,210 --> 00:07:26,830
work these templates can be a real time

00:07:24,550 --> 00:07:28,990
saver because huge time saver because

00:07:26,830 --> 00:07:30,910
you know you are defining everything in

00:07:28,990 --> 00:07:33,310
a template and reusing so just an

00:07:30,910 --> 00:07:36,070
example of how we have taken this

00:07:33,310 --> 00:07:39,760
template model and we have applied to

00:07:36,070 --> 00:07:41,670
Cloud Foundry so here's an example so

00:07:39,760 --> 00:07:43,840
you know if you have used Cloud Foundry

00:07:41,670 --> 00:07:46,720
the first step you know that you know to

00:07:43,840 --> 00:07:49,300
set up your boss virtual machine you

00:07:46,720 --> 00:07:51,580
need to go through certain prerequisites

00:07:49,300 --> 00:07:53,920
like create a storage environment what

00:07:51,580 --> 00:07:55,420
shall Network reserve some IPS you know

00:07:53,920 --> 00:07:57,130
you need you if you don't have an

00:07:55,420 --> 00:08:00,100
existing dev box you need to setup you

00:07:57,130 --> 00:08:03,610
can you need to set up one as well so we

00:08:00,100 --> 00:08:05,680
have taken all these steps and we have

00:08:03,610 --> 00:08:07,660
provided a getting started template this

00:08:05,680 --> 00:08:10,420
template which is available in github I

00:08:07,660 --> 00:08:13,030
can share the URL after at the end this

00:08:10,420 --> 00:08:15,160
template behind the scenes it provisions

00:08:13,030 --> 00:08:17,920
all these resources that we have talked

00:08:15,160 --> 00:08:20,320
about here and it parameterize is all of

00:08:17,920 --> 00:08:22,480
them so you can specify you know your

00:08:20,320 --> 00:08:24,910
own parameters for creating this and

00:08:22,480 --> 00:08:27,220
when this single click template is

00:08:24,910 --> 00:08:31,210
deployed you get this environment

00:08:27,220 --> 00:08:34,480
configured for running Bosh so this

00:08:31,210 --> 00:08:36,490
again this you know as you use Azure for

00:08:34,480 --> 00:08:39,040
deploying Cloud Foundry or other

00:08:36,490 --> 00:08:41,140
resources you will come across the

00:08:39,040 --> 00:08:45,400
templates in many places and Ning will

00:08:41,140 --> 00:08:46,840
demo the template so the next thing I

00:08:45,400 --> 00:08:48,730
wanna talk about this briefly is a

00:08:46,840 --> 00:08:51,550
hybrid cloud environments how how does

00:08:48,730 --> 00:08:54,150
as your fit into the hybrid environment

00:08:51,550 --> 00:08:56,490
model so the you know if the

00:08:54,150 --> 00:08:58,410
many of our customers that we work with

00:08:56,490 --> 00:09:01,440
have a model where they have some

00:08:58,410 --> 00:09:03,270
resources on Prem whether it is an acid

00:09:01,440 --> 00:09:05,520
based cloud or whether it's their own

00:09:03,270 --> 00:09:08,220
private data center and they want to

00:09:05,520 --> 00:09:10,470
extend it to a shore so with the work

00:09:08,220 --> 00:09:12,510
that we are with the work that we have

00:09:10,470 --> 00:09:15,540
done with the azure resource manager and

00:09:12,510 --> 00:09:19,530
Azure stack you can actually take the

00:09:15,540 --> 00:09:22,770
same CPI and make it work both not only

00:09:19,530 --> 00:09:24,930
in Azure but in on-premise wealth so

00:09:22,770 --> 00:09:26,870
this is where I of stack comes into

00:09:24,930 --> 00:09:35,280
picture so Azure stack is the azure

00:09:26,870 --> 00:09:37,710
assured api's for private clouds as your

00:09:35,280 --> 00:09:39,690
Azure stack which was announced recently

00:09:37,710 --> 00:09:41,760
last week err a couple of weeks ago at

00:09:39,690 --> 00:09:44,430
build and ignite basically takes

00:09:41,760 --> 00:09:46,980
existing as your resource as your api's

00:09:44,430 --> 00:09:49,260
and makes it available in private cloud

00:09:46,980 --> 00:09:51,390
like I said and it has a consistent

00:09:49,260 --> 00:09:54,570
architecture so it basically you know

00:09:51,390 --> 00:09:58,650
enables the same hybrid enterprise-grade

00:09:54,570 --> 00:10:00,360
hyper scale model so what that means is

00:09:58,650 --> 00:10:02,850
if you have an application that is

00:10:00,360 --> 00:10:06,960
running on prevents in an agile stack

00:10:02,850 --> 00:10:09,330
environment and it it and and if it and

00:10:06,960 --> 00:10:12,120
it's running in Azure you can use the

00:10:09,330 --> 00:10:14,430
same CPI or the our vision at least is

00:10:12,120 --> 00:10:16,590
to use the same CPI and target a

00:10:14,430 --> 00:10:20,160
different end point to manage that

00:10:16,590 --> 00:10:22,860
application in Azure stack and what this

00:10:20,160 --> 00:10:25,560
what this gives us is you know this

00:10:22,860 --> 00:10:27,480
really enables the same ecosystem you

00:10:25,560 --> 00:10:29,940
know the ecosystem that is available for

00:10:27,480 --> 00:10:32,640
as your customers today is also would be

00:10:29,940 --> 00:10:39,720
available for the on-prem datacenter

00:10:32,640 --> 00:10:41,880
customers as well okay so Ning is gonna

00:10:39,720 --> 00:10:43,890
give an overview of cloud for deployment

00:10:41,880 --> 00:10:48,090
in Azure thank you

00:10:43,890 --> 00:10:52,800
so for Cloud Foundry on Asia this

00:10:48,090 --> 00:10:56,400
project is all standard for any cloud

00:10:52,800 --> 00:10:59,130
providers if you want onboard Cloud

00:10:56,400 --> 00:11:02,100
Foundry on this provider usually you

00:10:59,130 --> 00:11:05,010
need to provide the Boche release the

00:11:02,100 --> 00:11:07,590
stem cell and the manifest file and for

00:11:05,010 --> 00:11:10,410
us we deliver exactly with the same

00:11:07,590 --> 00:11:13,200
says so for the Bosch release the main

00:11:10,410 --> 00:11:16,980
engineering work is the CPI which is the

00:11:13,200 --> 00:11:19,200
cloud provider interface to Azure enable

00:11:16,980 --> 00:11:22,800
Bush to talking to Asha through this

00:11:19,200 --> 00:11:26,070
interface that's the major work and then

00:11:22,800 --> 00:11:28,650
the correct content Bush component that

00:11:26,070 --> 00:11:31,680
need to be updated in aligned with the

00:11:28,650 --> 00:11:35,790
changes for the new CPI so that's the

00:11:31,680 --> 00:11:39,750
main deliverables and we also view the

00:11:35,790 --> 00:11:42,240
address therm cell currently for it's

00:11:39,750 --> 00:11:45,300
already in a beta release it's

00:11:42,240 --> 00:11:48,540
originally currently it's in Ubuntu and

00:11:45,300 --> 00:11:52,110
pretty soon we will support center west

00:11:48,540 --> 00:11:54,270
and Red Hat so these are the two main

00:11:52,110 --> 00:11:57,630
engineering deliverables plus the

00:11:54,270 --> 00:12:00,630
manifest file and then and that the next

00:11:57,630 --> 00:12:04,110
one is the resources management template

00:12:00,630 --> 00:12:07,230
as condign i just mentioned these are

00:12:04,110 --> 00:12:11,130
the this is the pre-configured template

00:12:07,230 --> 00:12:14,790
that simplify your setting up that the

00:12:11,130 --> 00:12:18,240
set up of the a joint moment and then

00:12:14,790 --> 00:12:20,880
just like with most of the cloud

00:12:18,240 --> 00:12:23,580
providers we will also provide the

00:12:20,880 --> 00:12:27,120
end-to-end guidance about how to setup

00:12:23,580 --> 00:12:29,940
and deploy a drop on cloud foundry and

00:12:27,120 --> 00:12:32,100
measure so this include the support for

00:12:29,940 --> 00:12:35,790
both the single node and the multiple

00:12:32,100 --> 00:12:38,600
node clothbound radiance and also we

00:12:35,790 --> 00:12:42,990
will have guidance for both the standard

00:12:38,600 --> 00:12:45,900
manual steps as long and as well as the

00:12:42,990 --> 00:12:48,930
guidance for how to use the predefined

00:12:45,900 --> 00:12:52,920
template to configure the environment

00:12:48,930 --> 00:12:56,070
and after that on one thing we're also

00:12:52,920 --> 00:12:59,570
planning is the Cloud Foundry cluster

00:12:56,070 --> 00:13:02,940
set up so we know after we enable that

00:12:59,570 --> 00:13:06,660
this infrastructure on Azure next step

00:13:02,940 --> 00:13:09,510
is an admin need to create the Cloud

00:13:06,660 --> 00:13:12,300
Foundry cluster so that will include

00:13:09,510 --> 00:13:16,800
database that have low balance or

00:13:12,300 --> 00:13:19,260
networking settings and and we will work

00:13:16,800 --> 00:13:20,550
with the community to optimize these

00:13:19,260 --> 00:13:22,459
resources

00:13:20,550 --> 00:13:25,680
work with community to provide

00:13:22,459 --> 00:13:28,010
additional guidance and the set up

00:13:25,680 --> 00:13:30,450
documents so that's the major

00:13:28,010 --> 00:13:31,980
deliverable so one of the things I want

00:13:30,450 --> 00:13:33,810
to call out is even though right now the

00:13:31,980 --> 00:13:35,459
project is ready we finished it but we

00:13:33,810 --> 00:13:37,410
really didn't release it until we wanted

00:13:35,459 --> 00:13:39,480
all the documentation to be updated so

00:13:37,410 --> 00:13:40,410
this is an important deliverable as well

00:13:39,480 --> 00:13:45,510
like you know providing this

00:13:40,410 --> 00:13:48,510
documentation along with the CPI yep

00:13:45,510 --> 00:13:51,920
so the azure cloud foundry deployment

00:13:48,510 --> 00:13:54,750
experience is quite similar than other

00:13:51,920 --> 00:13:57,600
existing cloud providers usually it

00:13:54,750 --> 00:14:01,350
contains two parts the first one is the

00:13:57,600 --> 00:14:03,390
adjoining moment setup this is the I've

00:14:01,350 --> 00:14:07,980
ever provided need to have the second

00:14:03,390 --> 00:14:09,990
one is deployed Cloud Foundry for the

00:14:07,980 --> 00:14:12,390
involvement setup the first thing you

00:14:09,990 --> 00:14:15,420
need is the account you need a

00:14:12,390 --> 00:14:18,839
subscription you need to hold the enough

00:14:15,420 --> 00:14:21,750
cloud services and VMs for your Cloud

00:14:18,839 --> 00:14:25,680
Foundry via network and the storage

00:14:21,750 --> 00:14:29,459
account to hold of UHDS networking

00:14:25,680 --> 00:14:32,130
moment is the major part usually this

00:14:29,459 --> 00:14:35,459
includes the v-net and the two subnets

00:14:32,130 --> 00:14:40,350
and also the public IP for Bosh and

00:14:35,459 --> 00:14:42,870
Cloud Foundry next one is for the secure

00:14:40,350 --> 00:14:45,600
communication between Bosh and cloud

00:14:42,870 --> 00:14:48,810
providers usually you need a certificate

00:14:45,600 --> 00:14:51,270
key pair in address case we have service

00:14:48,810 --> 00:14:54,529
principle for your subscription and we

00:14:51,270 --> 00:14:58,560
have details step for that for all these

00:14:54,529 --> 00:15:01,170
we have an to end documentation and we

00:14:58,560 --> 00:15:06,449
also have a single click deployment with

00:15:01,170 --> 00:15:09,180
a template the other part is the

00:15:06,449 --> 00:15:12,600
deployment of the deployment of claw

00:15:09,180 --> 00:15:16,199
foundry this is almost exactly the same

00:15:12,600 --> 00:15:18,600
step as any other cloud providers so

00:15:16,199 --> 00:15:22,800
usually this include create a death

00:15:18,600 --> 00:15:25,589
machine which you will load the stem

00:15:22,800 --> 00:15:29,670
cell and the bash releases and this step

00:15:25,589 --> 00:15:32,459
machine can be any machine but for our

00:15:29,670 --> 00:15:34,260
beta to simplify your experience we

00:15:32,459 --> 00:15:38,400
actually created for you

00:15:34,260 --> 00:15:40,710
in our template and then the next step

00:15:38,400 --> 00:15:45,120
is configure and deploy my kibosh

00:15:40,710 --> 00:15:47,160
through that dev machine and then you

00:15:45,120 --> 00:15:51,720
can also configure and deploy Bosh or

00:15:47,160 --> 00:15:54,810
even multiple Bosh use and from from

00:15:51,720 --> 00:15:57,600
Michael Bush we know most customer can

00:15:54,810 --> 00:15:59,790
be accomplished through the micro Bush

00:15:57,600 --> 00:16:01,440
but some customer they have a more

00:15:59,790 --> 00:16:03,210
complicated infrastructure they want

00:16:01,440 --> 00:16:10,980
Bosh or multiple Bosh that's also

00:16:03,210 --> 00:16:14,970
supported and then and then you use Bosh

00:16:10,980 --> 00:16:18,630
- or micro Bosh - to create a Cloud

00:16:14,970 --> 00:16:20,910
Foundry network from here and these are

00:16:18,630 --> 00:16:24,330
the steps that consistent with all other

00:16:20,910 --> 00:16:26,610
cloud providers so if you are already

00:16:24,330 --> 00:16:29,640
familiar with any of these and this is a

00:16:26,610 --> 00:16:31,430
very simple experience for you so can I

00:16:29,640 --> 00:16:33,780
so quick question how many of you use my

00:16:31,430 --> 00:16:39,030
multiple Bosh environments to deploy

00:16:33,780 --> 00:16:40,880
cloud foundry it's otherwise is it

00:16:39,030 --> 00:16:46,140
single Bosh environment most cases

00:16:40,880 --> 00:16:48,900
okay so Cloud Foundry template and

00:16:46,140 --> 00:16:51,540
container just mentioned that's a new

00:16:48,900 --> 00:16:54,150
release agile provided to simplify most

00:16:51,540 --> 00:16:56,280
of the deployment work and then for

00:16:54,150 --> 00:16:58,410
Cloud Foundry I think the coverage is a

00:16:56,280 --> 00:17:01,550
good candidate you utilize this

00:16:58,410 --> 00:17:04,980
technology to simplify users experience

00:17:01,550 --> 00:17:06,810
this can be accessed through post the

00:17:04,980 --> 00:17:10,320
pothole or you can do it through

00:17:06,810 --> 00:17:13,190
scripting and usually it's simply three

00:17:10,320 --> 00:17:16,170
steps first you load an existing

00:17:13,190 --> 00:17:19,680
template we already defined for you and

00:17:16,170 --> 00:17:23,640
then you customize it using your

00:17:19,680 --> 00:17:26,010
organization name and your parameters

00:17:23,640 --> 00:17:28,970
and then you deploy it it were just

00:17:26,010 --> 00:17:36,180
running and the on the background and

00:17:28,970 --> 00:17:39,030
then all these can be automated so here

00:17:36,180 --> 00:17:41,910
I'm going to show you how this how we

00:17:39,030 --> 00:17:44,420
can use a template to set up the azure

00:17:41,910 --> 00:17:47,970
environment and what take while so I

00:17:44,420 --> 00:17:51,000
mostly going through the UI steps

00:17:47,970 --> 00:17:54,120
and then with an existing Cloud Foundry

00:17:51,000 --> 00:17:57,500
deployment how we can push a simple

00:17:54,120 --> 00:17:57,500
first application

00:18:26,490 --> 00:18:34,410
so first this is our the agile

00:18:30,990 --> 00:18:38,910
QuickStart template website from here

00:18:34,410 --> 00:18:42,900
there are hundreds of predefined

00:18:38,910 --> 00:18:48,090
templates you can see if you can just

00:18:42,900 --> 00:18:50,880
click any of the template what it will

00:18:48,090 --> 00:18:53,700
tell you it was displayed the parameters

00:18:50,880 --> 00:18:56,550
you need for this template and it was

00:18:53,700 --> 00:18:59,640
also show you how you can launch or

00:18:56,550 --> 00:19:01,770
scripting this there's a Lana button

00:18:59,640 --> 00:19:04,910
will take you to the UI which you can

00:19:01,770 --> 00:19:08,550
edit this template this is one way to

00:19:04,910 --> 00:19:11,340
start your template and there's also the

00:19:08,550 --> 00:19:14,700
other way is you can go directly to the

00:19:11,340 --> 00:19:16,890
github this is the github it contains

00:19:14,700 --> 00:19:19,410
all the source code for this template

00:19:16,890 --> 00:19:22,370
and you can always go and give your

00:19:19,410 --> 00:19:26,400
feedback or your pull request here and

00:19:22,370 --> 00:19:28,710
again here it also have the deployment

00:19:26,400 --> 00:19:30,960
that the parameter for this deployment

00:19:28,710 --> 00:19:34,880
for this one this is the Michael bush

00:19:30,960 --> 00:19:38,670
deployment template so it asks you for

00:19:34,880 --> 00:19:42,180
some minimal information you need it

00:19:38,670 --> 00:19:47,070
about the account named account password

00:19:42,180 --> 00:19:49,680
and the VM size location and here it

00:19:47,070 --> 00:19:54,060
also have a button to take you through

00:19:49,680 --> 00:20:02,460
the the UI that allow you to add it to

00:19:54,060 --> 00:20:06,740
your template so here we get to the UI

00:20:02,460 --> 00:20:09,120
that you can edit your template this is

00:20:06,740 --> 00:20:11,640
actually the source code of this

00:20:09,120 --> 00:20:16,530
template we have document on these very

00:20:11,640 --> 00:20:18,360
simple syntax for you to edit and at the

00:20:16,530 --> 00:20:21,600
end you will see all the resources

00:20:18,360 --> 00:20:23,850
that's added and you can add remove or

00:20:21,600 --> 00:20:30,300
modify the settings of your template

00:20:23,850 --> 00:20:33,930
here and then you save it once you save

00:20:30,300 --> 00:20:36,990
it you can edit your parameters and here

00:20:33,930 --> 00:20:41,120
what you need it is you need to create a

00:20:36,990 --> 00:20:41,120
new storage account here I give

00:20:45,110 --> 00:20:53,700
and since we also create the developed

00:20:50,100 --> 00:20:56,760
machine for you we need admin username

00:20:53,700 --> 00:21:01,309
and password for this machine and you

00:20:56,760 --> 00:21:14,250
need to choose where you want this VM is

00:21:01,309 --> 00:21:19,890
put located and the VM name so you can

00:21:14,250 --> 00:21:22,740
save it this needs to be created and I

00:21:19,890 --> 00:21:25,350
exist in subscription so you select your

00:21:22,740 --> 00:21:28,020
subscription and for this resources

00:21:25,350 --> 00:21:30,780
group you can either put it under an

00:21:28,020 --> 00:21:34,760
existing resources group name or you

00:21:30,780 --> 00:21:34,760
enter a name a new name

00:21:48,790 --> 00:21:56,050
and we also need to select a location so

00:21:52,210 --> 00:21:58,510
after that after you enter the template

00:21:56,050 --> 00:22:01,900
parameters and choosing the the right

00:21:58,510 --> 00:22:05,620
location and names you just click create

00:22:01,900 --> 00:22:08,560
and I will just create this template at

00:22:05,620 --> 00:22:11,640
the background so it will take a few

00:22:08,560 --> 00:22:17,260
minutes to save the time I can show you

00:22:11,640 --> 00:22:20,680
one of the template I resources already

00:22:17,260 --> 00:22:23,170
created so this is the the resources

00:22:20,680 --> 00:22:25,960
group I just created just using the same

00:22:23,170 --> 00:22:30,070
methodology and then it's already

00:22:25,960 --> 00:22:32,620
created with the machine that we created

00:22:30,070 --> 00:22:35,880
at the Deaf machine with this network

00:22:32,620 --> 00:22:38,680
interface and the public IP address and

00:22:35,880 --> 00:22:41,850
the virtual network which contain the

00:22:38,680 --> 00:22:46,750
two subnet and a storage account we need

00:22:41,850 --> 00:22:49,090
so with this you will be simply just go

00:22:46,750 --> 00:22:51,550
through a UI enter all the customized

00:22:49,090 --> 00:22:54,850
the parameters and then one click you

00:22:51,550 --> 00:22:56,860
will be able to create an adjoining

00:22:54,850 --> 00:22:57,910
moment that you can build your Cloud

00:22:56,860 --> 00:23:01,900
Foundry on it

00:22:57,910 --> 00:23:05,110
so after this the next step is on on

00:23:01,900 --> 00:23:08,020
your death machine as we said create a

00:23:05,110 --> 00:23:11,280
micro Bosch crate Bosch and then through

00:23:08,020 --> 00:23:14,790
micro Bosch create your Cloud Foundry

00:23:11,280 --> 00:23:21,280
Network and these steps are all standard

00:23:14,790 --> 00:23:22,840
so here I have one machine that when

00:23:21,280 --> 00:23:27,220
Cloud Foundry machine I already created

00:23:22,840 --> 00:23:32,470
so we'll just SSH to it and we'll see

00:23:27,220 --> 00:23:33,730
how we can push a simple application so

00:23:32,470 --> 00:23:35,680
while we wait for that right

00:23:33,730 --> 00:23:37,660
what with temp the template is only one

00:23:35,680 --> 00:23:39,670
mechanism to do it you can also do the

00:23:37,660 --> 00:23:43,930
same thing by directly calling the azure

00:23:39,670 --> 00:23:45,910
CLI which is the the command-line tool

00:23:43,930 --> 00:23:53,800
for creating provisioning resources in

00:23:45,910 --> 00:23:58,720
Nashville so here I'm as SSH to the

00:23:53,800 --> 00:24:01,720
cloth on T V M and for this VM just

00:23:58,720 --> 00:24:09,400
logging we already have

00:24:01,720 --> 00:24:13,030
a simple application here and you can

00:24:09,400 --> 00:24:15,430
see the we have a J's file which create

00:24:13,030 --> 00:24:21,450
a website first website on the cloud

00:24:15,430 --> 00:24:24,940
foundry and let me just log in to this

00:24:21,450 --> 00:24:30,120
now I'm log into cloud kanji and I need

00:24:24,940 --> 00:24:30,120
you my username and password

00:24:37,300 --> 00:24:46,120
okay now I just get into access the

00:24:41,470 --> 00:24:55,660
cloud foundry and then I'm ready to push

00:24:46,120 --> 00:25:01,240
the first application out so you see now

00:24:55,660 --> 00:25:07,240
it's beginning to install and compile

00:25:01,240 --> 00:25:16,090
and build the application and put it to

00:25:07,240 --> 00:25:21,550
the appropriate host so the instance is

00:25:16,090 --> 00:25:31,690
starting seem to me it's successful so

00:25:21,550 --> 00:25:35,380
go back to my to my website this is the

00:25:31,690 --> 00:25:39,160
website that webs are that whether the

00:25:35,380 --> 00:25:43,390
nodejs application just created and let

00:25:39,160 --> 00:25:45,370
me see so this is the first message that

00:25:43,390 --> 00:25:52,300
application sent to Asha

00:25:45,370 --> 00:25:55,240
hello Cloud Foundry okay so that is the

00:25:52,300 --> 00:25:59,610
demo of the template and how the first

00:25:55,240 --> 00:25:59,610
application is pushed on cloud on Azure

00:25:59,910 --> 00:26:03,990
back to our message

00:26:10,780 --> 00:26:16,190
learning's from the Cloud Foundry

00:26:12,980 --> 00:26:19,070
projects so this is actually this is a

00:26:16,190 --> 00:26:21,590
totally open source project and we are

00:26:19,070 --> 00:26:24,559
an open source team in Microsoft we have

00:26:21,590 --> 00:26:26,179
people from cough from open source but

00:26:24,559 --> 00:26:29,600
we also have a lot of people like me

00:26:26,179 --> 00:26:31,400
working in Windows for for many years so

00:26:29,600 --> 00:26:34,460
it's a good journey and a lot of good

00:26:31,400 --> 00:26:38,840
learnings and I think the biggest things

00:26:34,460 --> 00:26:41,240
is we are amazed how about the power of

00:26:38,840 --> 00:26:44,510
the community and this project actually

00:26:41,240 --> 00:26:47,150
originally started by the community and

00:26:44,510 --> 00:26:49,669
we have Nick Terry who is the first

00:26:47,150 --> 00:26:52,400
community member status project and our

00:26:49,669 --> 00:26:56,120
code is built on his original work and

00:26:52,400 --> 00:26:58,280
also Dimitri who is alone that the time

00:26:56,120 --> 00:27:02,690
always give us support and guidance give

00:26:58,280 --> 00:27:05,299
out the regular reviews and we really

00:27:02,690 --> 00:27:08,870
want to thank Nick and the Dmitry is

00:27:05,299 --> 00:27:12,020
they can't Dimitri here ok I hope they

00:27:08,870 --> 00:27:13,520
are here but and it just also everyone

00:27:12,020 --> 00:27:16,880
in the community we really appreciate

00:27:13,520 --> 00:27:19,460
that support and help and we also feel

00:27:16,880 --> 00:27:21,919
this structure this Cloud Foundry and

00:27:19,460 --> 00:27:25,070
the CPI structure is very well designed

00:27:21,919 --> 00:27:27,740
and flexible on the integration actually

00:27:25,070 --> 00:27:31,309
is very smooth we didn't hit a lot of

00:27:27,740 --> 00:27:33,860
big blockers and after that we find the

00:27:31,309 --> 00:27:36,380
experience is also quite similar and a

00:27:33,860 --> 00:27:38,539
chance on transferable between different

00:27:36,380 --> 00:27:41,210
cloud providers which is I think is a

00:27:38,539 --> 00:27:44,570
big benefit of this at the portable

00:27:41,210 --> 00:27:46,789
structure and abundant resources and the

00:27:44,570 --> 00:27:50,059
edge agility in the community which we

00:27:46,789 --> 00:27:53,480
are really impressed and we also learnt

00:27:50,059 --> 00:27:56,000
you in July our internal goal with the

00:27:53,480 --> 00:27:58,520
community girl and it's not like I'm

00:27:56,000 --> 00:28:01,250
program manager I used to control the

00:27:58,520 --> 00:28:04,370
schedule and control our priority but

00:28:01,250 --> 00:28:08,030
now we are working with the community so

00:28:04,370 --> 00:28:11,030
we know how we we are not only creating

00:28:08,030 --> 00:28:13,940
a commercial project we are also part of

00:28:11,030 --> 00:28:16,070
the project at the community so this is

00:28:13,940 --> 00:28:17,900
also our priority to enhance the

00:28:16,070 --> 00:28:20,510
community and to give back to the

00:28:17,900 --> 00:28:23,539
community so that also reflect into our

00:28:20,510 --> 00:28:28,639
schedule and and our priority

00:28:23,539 --> 00:28:31,549
is challenges of course so all the

00:28:28,639 --> 00:28:33,679
moving parts and although before like in

00:28:31,549 --> 00:28:36,350
Microsoft I feel like we have a lot of

00:28:33,679 --> 00:28:38,450
control over the versions and over and

00:28:36,350 --> 00:28:40,850
then when we can make change when we can

00:28:38,450 --> 00:28:43,549
stabilize but right now while working

00:28:40,850 --> 00:28:47,330
with community we we probably only know

00:28:43,549 --> 00:28:50,090
that whether the things worked and how

00:28:47,330 --> 00:28:52,190
the competitor works until we test and

00:28:50,090 --> 00:28:54,830
especially when Beauty in a stem cell

00:28:52,190 --> 00:28:56,720
and you will find you you have a stable

00:28:54,830 --> 00:28:59,119
view you have a stable dependency but

00:28:56,720 --> 00:29:02,989
there are still changes for example even

00:28:59,119 --> 00:29:05,059
coming from from the OS itself so it's a

00:29:02,989 --> 00:29:07,669
big learning and but this is the part I

00:29:05,059 --> 00:29:09,529
know I see the community that's the part

00:29:07,669 --> 00:29:12,309
that you came the benefit of the

00:29:09,529 --> 00:29:14,929
community but also the part you have to

00:29:12,309 --> 00:29:17,570
take the challenge for but I don't

00:29:14,929 --> 00:29:19,729
community is improving on this and we're

00:29:17,570 --> 00:29:22,820
currently moving to all external CPI

00:29:19,729 --> 00:29:25,220
model which will make the CPI be more

00:29:22,820 --> 00:29:28,249
transparent and less dependent on that

00:29:25,220 --> 00:29:30,710
bush so this will make us are a

00:29:28,249 --> 00:29:34,399
beautiful stable actually this is our go

00:29:30,710 --> 00:29:36,080
for beta well move to there's this is

00:29:34,399 --> 00:29:38,539
actually very exciting milestone for us

00:29:36,080 --> 00:29:40,070
on two counts one is not only this is

00:29:38,539 --> 00:29:42,139
the first time cloud foundry has you

00:29:40,070 --> 00:29:44,090
know work completely end-to-end on Azure

00:29:42,139 --> 00:29:46,220
and second thing is this is the first

00:29:44,090 --> 00:29:47,539
time you know from Microsoft you're

00:29:46,220 --> 00:29:49,489
being we have come to this conference to

00:29:47,539 --> 00:29:54,799
talk about it so really exciting

00:29:49,489 --> 00:29:57,289
milestone for us so um all the work

00:29:54,799 --> 00:29:59,779
currently the Pinery currently is

00:29:57,289 --> 00:30:02,690
available on github and then we'll give

00:29:59,779 --> 00:30:05,779
the link at the end of the slides and at

00:30:02,690 --> 00:30:08,299
the end of this week the end of this

00:30:05,779 --> 00:30:11,059
actually this event you will be able to

00:30:08,299 --> 00:30:13,549
preview this and we will have the

00:30:11,059 --> 00:30:17,059
document we'll have the blog so this is

00:30:13,549 --> 00:30:20,720
the first step and then but at this time

00:30:17,059 --> 00:30:22,669
we are not declare the beta yet because

00:30:20,720 --> 00:30:24,590
we want to move to the external CPI

00:30:22,669 --> 00:30:27,289
which the community recommend us to do

00:30:24,590 --> 00:30:30,229
that probably will take us to around the

00:30:27,289 --> 00:30:35,269
end of May and at that time we will have

00:30:30,229 --> 00:30:37,159
an external CPI stable field and then we

00:30:35,269 --> 00:30:41,200
will send the bits

00:30:37,159 --> 00:30:44,149
- the the Cloud Foundry ETL which

00:30:41,200 --> 00:30:47,649
distribution lists so that everyone can

00:30:44,149 --> 00:30:52,009
try and use the DL to discuss about

00:30:47,649 --> 00:30:53,869
issues or questions and then our next

00:30:52,009 --> 00:30:56,299
skill is upstream the guild the code

00:30:53,869 --> 00:30:58,999
back to the community source depot so

00:30:56,299 --> 00:31:01,549
this will be our star GA so once we get

00:30:58,999 --> 00:31:03,859
a community fully approved and a wall

00:31:01,549 --> 00:31:07,220
became an official community supported

00:31:03,859 --> 00:31:10,509
project and we will declare the CA and

00:31:07,220 --> 00:31:13,879
then declare the GA and officially on

00:31:10,509 --> 00:31:17,809
supported onboarding through Asha and

00:31:13,879 --> 00:31:19,999
then the 405 are the next step and we

00:31:17,809 --> 00:31:23,720
know once you get a deployment once

00:31:19,999 --> 00:31:26,720
people hit-the hit-the part they will do

00:31:23,720 --> 00:31:29,119
the daily operation and the

00:31:26,720 --> 00:31:30,739
configuration then they will have a lot

00:31:29,119 --> 00:31:33,679
of coaching on how this works on Azure

00:31:30,739 --> 00:31:36,200
how those open source software like

00:31:33,679 --> 00:31:38,779
different database or low balance and

00:31:36,200 --> 00:31:40,909
how that work on this is supposed to be

00:31:38,779 --> 00:31:43,669
quite transparent it should work between

00:31:40,909 --> 00:31:45,409
different cloud providers but we also

00:31:43,669 --> 00:31:47,029
want to work community to see your

00:31:45,409 --> 00:31:53,749
feedback to see if there are anything we

00:31:47,029 --> 00:31:56,119
can optimize and improve so here is the

00:31:53,749 --> 00:31:58,820
link you can click and then you can find

00:31:56,119 --> 00:32:01,039
the first version that that will work

00:31:58,820 --> 00:32:02,919
and wait for probably at the end of this

00:32:01,039 --> 00:32:04,970
week we'll have a blog and we'll have a

00:32:02,919 --> 00:32:07,129
documentation currently it doesn't have

00:32:04,970 --> 00:32:09,080
a documentation yet and we'll upload the

00:32:07,129 --> 00:32:14,659
guidance and then you can also use

00:32:09,080 --> 00:32:16,060
github for your feedbacks okay yep thank

00:32:14,659 --> 00:32:21,250
you so much

00:32:16,060 --> 00:32:21,250

YouTube URL: https://www.youtube.com/watch?v=45o0DOgesnQ


