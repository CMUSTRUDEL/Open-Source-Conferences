Title: 101 Open Service Broker API – Getting to Know the Open Servi... Christian Brinker & Marco di Martino
Publication date: 2020-10-26
Playlist: Cloud Foundry Summit Europe 2020
Description: 
	101 Open Service Broker API – Getting to Know the Open Service Broker API - Christian Brinker & Marco di Martino, evoila

Cloud Foundry provides its users with a standardized runtime environment making it easy to push code to production. But when it comes to a productive usage of application, they depend on other necessary components like databases, message queues or log aggregators. But these also have to be provided in a standardized and fast way to speed up a software development process. The solution is called ‘Service Broker’. But how is Cloud Foundry able to make use of such different technologies. The anwser is called ‘Open Service Broker API’. In their talk Christian Brinker and Marco di Martino take the audience on the journey from the reasons for the usage of service brokers via their inner structure and effects to complex production setups. They explain the Open Service Broker API, how to use and implement it. They also present common pitfalls and best practices.
Captions: 
	00:00:00,160 --> 00:00:06,399
my name is christian brinker

00:00:03,120 --> 00:00:08,880
and my name is marco dimartino hi

00:00:06,399 --> 00:00:10,880
and we are presenting you about about

00:00:08,880 --> 00:00:12,639
the open service broker api so what is

00:00:10,880 --> 00:00:14,799
the open services procreate api

00:00:12,639 --> 00:00:16,800
the open service broker api is an open

00:00:14,799 --> 00:00:18,720
standard to organize service offerings

00:00:16,800 --> 00:00:20,480
for cloud native platforms

00:00:18,720 --> 00:00:22,400
it was first developed by the cloud

00:00:20,480 --> 00:00:24,160
foundry community later on extended to

00:00:22,400 --> 00:00:25,599
support other platforms for example

00:00:24,160 --> 00:00:27,439
kubernetes

00:00:25,599 --> 00:00:29,679
it is an open standard for more

00:00:27,439 --> 00:00:30,080
information after this talk you can

00:00:29,679 --> 00:00:32,239
visit

00:00:30,080 --> 00:00:33,760
the project's website and the spec graph

00:00:32,239 --> 00:00:37,120
on github you can find

00:00:33,760 --> 00:00:38,559
the urs on the slide the idea behind the

00:00:37,120 --> 00:00:40,640
open service broker api

00:00:38,559 --> 00:00:42,399
is to create a standardized api spec

00:00:40,640 --> 00:00:44,399
around the life cycle management of

00:00:42,399 --> 00:00:46,160
third-party services for a developer's

00:00:44,399 --> 00:00:49,600
application

00:00:46,160 --> 00:00:52,079
so why should i use the open service

00:00:49,600 --> 00:00:54,800
broker api

00:00:52,079 --> 00:00:55,600
let's face the problems i'm bob and i

00:00:54,800 --> 00:00:58,559
have this cool

00:00:55,600 --> 00:00:59,199
application in my head i want to code

00:00:58,559 --> 00:01:02,320
what helps

00:00:59,199 --> 00:01:03,520
cloud foundry with this app is it

00:01:02,320 --> 00:01:06,400
delivers me

00:01:03,520 --> 00:01:07,119
with an environment to develop my app

00:01:06,400 --> 00:01:10,400
for different

00:01:07,119 --> 00:01:11,520
stagings like a development stage like

00:01:10,400 --> 00:01:13,600
production stage

00:01:11,520 --> 00:01:14,880
and presents me with this cool cf push

00:01:13,600 --> 00:01:16,960
experience

00:01:14,880 --> 00:01:18,720
to help me push my application really

00:01:16,960 --> 00:01:20,799
fast into production

00:01:18,720 --> 00:01:22,159
it helps me with scaling my application

00:01:20,799 --> 00:01:26,240
and also with routing

00:01:22,159 --> 00:01:29,680
dns resolution or certificate management

00:01:26,240 --> 00:01:32,720
for tls but what it doesn't help me with

00:01:29,680 --> 00:01:34,079
is backing services like databases or

00:01:32,720 --> 00:01:36,079
even other stuff

00:01:34,079 --> 00:01:37,200
like opening specific ports in a

00:01:36,079 --> 00:01:38,640
firewall on demand

00:01:37,200 --> 00:01:40,320
message queueing especially

00:01:38,640 --> 00:01:42,799
configurations in a load balancer

00:01:40,320 --> 00:01:43,439
appliance adding tls certificates for a

00:01:42,799 --> 00:01:45,840
domain

00:01:43,439 --> 00:01:47,280
and the tls change for the app auto

00:01:45,840 --> 00:01:49,520
scaling capabilities

00:01:47,280 --> 00:01:50,560
forwarding of log drains and what you

00:01:49,520 --> 00:01:53,040
can think of

00:01:50,560 --> 00:01:55,520
all the stuff which is not directly part

00:01:53,040 --> 00:01:57,200
of cloud foundry

00:01:55,520 --> 00:01:59,040
so what is the problem we have this

00:01:57,200 --> 00:02:01,280
application which needs this service

00:01:59,040 --> 00:02:03,360
which is not part of cloud foundry

00:02:01,280 --> 00:02:06,159
and needs to access it and cloud foundry

00:02:03,360 --> 00:02:09,200
does not know how to do that

00:02:06,159 --> 00:02:09,920
so for example i have a web app and i

00:02:09,200 --> 00:02:13,120
want to use

00:02:09,920 --> 00:02:13,760
my sql database which runs on an is

00:02:13,120 --> 00:02:17,520
window like

00:02:13,760 --> 00:02:18,560
vmware vsphere so how do we solve it in

00:02:17,520 --> 00:02:20,640
cloud foundry

00:02:18,560 --> 00:02:22,319
so i'm the developer and i go to cloud

00:02:20,640 --> 00:02:25,599
phone and say hey cloud foundry

00:02:22,319 --> 00:02:26,720
can i have a service instance then the

00:02:25,599 --> 00:02:27,920
cloud controller

00:02:26,720 --> 00:02:31,040
which is part of the cloud foundry

00:02:27,920 --> 00:02:31,920
installation um knows someone which

00:02:31,040 --> 00:02:33,680
knows how to

00:02:31,920 --> 00:02:34,959
create this service instance which is

00:02:33,680 --> 00:02:37,200
the service broker

00:02:34,959 --> 00:02:39,440
the service broker creates the service

00:02:37,200 --> 00:02:40,800
and creates also credentials which it

00:02:39,440 --> 00:02:43,120
presents back to cloud

00:02:40,800 --> 00:02:44,560
the cloud controller which adds them to

00:02:43,120 --> 00:02:46,319
the application's runtime

00:02:44,560 --> 00:02:48,840
as environment variables so the

00:02:46,319 --> 00:02:50,000
application can access the service

00:02:48,840 --> 00:02:53,040
directly

00:02:50,000 --> 00:02:55,200
and this whole workflow is

00:02:53,040 --> 00:02:56,080
defined by the open service broker api

00:02:55,200 --> 00:02:58,319
specs so this

00:02:56,080 --> 00:03:00,480
is what the open service broker api is

00:02:58,319 --> 00:03:02,800
about

00:03:00,480 --> 00:03:04,720
so let's now focus on the marketplace

00:03:02,800 --> 00:03:06,560
and the service catalog

00:03:04,720 --> 00:03:08,800
as a cloud foundry user you will

00:03:06,560 --> 00:03:11,519
typically ask the platform

00:03:08,800 --> 00:03:13,200
to show you the marketplace and so the

00:03:11,519 --> 00:03:14,080
marketplace is where all services and

00:03:13,200 --> 00:03:17,040
service plan

00:03:14,080 --> 00:03:18,640
are shown and register by the service

00:03:17,040 --> 00:03:21,680
broker

00:03:18,640 --> 00:03:22,319
the plan describes the potential service

00:03:21,680 --> 00:03:24,640
offering

00:03:22,319 --> 00:03:26,080
and gives information about the size of

00:03:24,640 --> 00:03:26,959
the service instance that are being

00:03:26,080 --> 00:03:29,519
deploying

00:03:26,959 --> 00:03:32,000
or custom settings like cpu ram and

00:03:29,519 --> 00:03:33,120
disks only depending on the service and

00:03:32,000 --> 00:03:35,599
you can have always

00:03:33,120 --> 00:03:36,799
more than one service plan per service

00:03:35,599 --> 00:03:40,080
and you can always

00:03:36,799 --> 00:03:43,519
have more than one service that is

00:03:40,080 --> 00:03:43,519
registered by the service broker

00:03:43,920 --> 00:03:47,280
so in the context of the service broker

00:03:45,519 --> 00:03:50,400
api everything is deploying

00:03:47,280 --> 00:03:52,560
is deployed as a service but we also

00:03:50,400 --> 00:03:53,760
we also want to have like a separation

00:03:52,560 --> 00:03:56,159
between services

00:03:53,760 --> 00:03:58,080
so we have for example managed service

00:03:56,159 --> 00:03:59,439
and user provided service

00:03:58,080 --> 00:04:00,799
and you know managed service other

00:03:59,439 --> 00:04:02,400
services that are provisioned and

00:04:00,799 --> 00:04:05,360
managed by the platform

00:04:02,400 --> 00:04:07,120
and while user-provided services are

00:04:05,360 --> 00:04:08,319
services that are provisioned by the

00:04:07,120 --> 00:04:11,040
user itself

00:04:08,319 --> 00:04:13,120
to the platform and you know for example

00:04:11,040 --> 00:04:14,239
i know that i have an external log drain

00:04:13,120 --> 00:04:17,440
for my application

00:04:14,239 --> 00:04:20,639
and i i just want to to

00:04:17,440 --> 00:04:21,440
to bind that external log drain to my

00:04:20,639 --> 00:04:23,440
application

00:04:21,440 --> 00:04:24,639
so there is here no interaction with

00:04:23,440 --> 00:04:27,040
service broker

00:04:24,639 --> 00:04:28,639
we also have another class of services

00:04:27,040 --> 00:04:29,520
called bindable and non-bindable

00:04:28,639 --> 00:04:32,080
services

00:04:29,520 --> 00:04:33,759
by bindable services the application

00:04:32,080 --> 00:04:35,680
gets the credentials to access the

00:04:33,759 --> 00:04:38,720
service through the bind operation

00:04:35,680 --> 00:04:40,880
and by known binder services um

00:04:38,720 --> 00:04:43,520
you know the application doesn't need to

00:04:40,880 --> 00:04:46,720
to um to be bounded to the service

00:04:43,520 --> 00:04:48,960
so we we just um so that

00:04:46,720 --> 00:04:51,040
the service is just being created you

00:04:48,960 --> 00:04:53,440
can think about it like uh for example

00:04:51,040 --> 00:04:54,720
uh where you have to generate ls

00:04:53,440 --> 00:04:58,560
certificates

00:04:54,720 --> 00:05:00,320
um for for a domain another class of

00:04:58,560 --> 00:05:02,160
services are root services

00:05:00,320 --> 00:05:04,000
and here is like you know introducing a

00:05:02,160 --> 00:05:06,000
man in the middle of a route in cloud

00:05:04,000 --> 00:05:08,160
foundry so that the requests are

00:05:06,000 --> 00:05:09,199
um are presented to to the backing

00:05:08,160 --> 00:05:12,240
service first

00:05:09,199 --> 00:05:13,600
and then just later on forwarded to to

00:05:12,240 --> 00:05:15,680
the application

00:05:13,600 --> 00:05:17,360
we also have c-slog drain services where

00:05:15,680 --> 00:05:19,039
the platform will stream the log to uh

00:05:17,360 --> 00:05:21,520
for the bound application

00:05:19,039 --> 00:05:23,759
and we have volume services it's like

00:05:21,520 --> 00:05:26,479
you know a particular service offering

00:05:23,759 --> 00:05:27,360
that provide network storage for

00:05:26,479 --> 00:05:30,560
application

00:05:27,360 --> 00:05:30,560
into the application container

00:05:30,639 --> 00:05:34,000
so let's jump into the lifecycle of the

00:05:33,600 --> 00:05:36,720
of

00:05:34,000 --> 00:05:37,759
of creating and using the service broker

00:05:36,720 --> 00:05:40,160
we typically have

00:05:37,759 --> 00:05:40,800
the command create cf create service

00:05:40,160 --> 00:05:42,560
broker

00:05:40,800 --> 00:05:44,560
and when where we have seen that the

00:05:42,560 --> 00:05:45,840
cloud controller we fetch the catalog of

00:05:44,560 --> 00:05:48,800
the service broker

00:05:45,840 --> 00:05:51,199
um to validate the catalog and to see if

00:05:48,800 --> 00:05:53,520
the catalog respects

00:05:51,199 --> 00:05:56,479
the jesus schema api that is specified

00:05:53,520 --> 00:05:59,759
in in the in in the osb api spec

00:05:56,479 --> 00:06:02,160
and then to to show what's uh what are

00:05:59,759 --> 00:06:04,319
um um register in the platform and what

00:06:02,160 --> 00:06:06,400
can i provision in the platform what can

00:06:04,319 --> 00:06:07,039
i create i will use the cf marketplace

00:06:06,400 --> 00:06:08,960
command

00:06:07,039 --> 00:06:10,880
and then i will i will use yes create

00:06:08,960 --> 00:06:12,000
service to just provision an instance of

00:06:10,880 --> 00:06:14,479
my service

00:06:12,000 --> 00:06:16,080
and then i will use the cf bind service

00:06:14,479 --> 00:06:16,960
command to create the binding with my

00:06:16,080 --> 00:06:19,360
application

00:06:16,960 --> 00:06:21,520
or unbind service to delete the binding

00:06:19,360 --> 00:06:24,240
and then in the end to

00:06:21,520 --> 00:06:25,039
to remove the instance uh i just i will

00:06:24,240 --> 00:06:29,039
just

00:06:25,039 --> 00:06:31,600
um type in the cft delete service

00:06:29,039 --> 00:06:32,639
and every step that that that we see

00:06:31,600 --> 00:06:34,960
here

00:06:32,639 --> 00:06:36,639
will produce rs api call to the or to

00:06:34,960 --> 00:06:37,840
their service broker

00:06:36,639 --> 00:06:39,759
so when you're deploying a service

00:06:37,840 --> 00:06:42,160
broker you have to make sure that the

00:06:39,759 --> 00:06:45,280
service broker exposes these endpoints

00:06:42,160 --> 00:06:46,240
um and all these endpoints you can find

00:06:45,280 --> 00:06:47,919
all this android

00:06:46,240 --> 00:06:49,680
that are specified in the open service

00:06:47,919 --> 00:06:51,120
broker api specs

00:06:49,680 --> 00:06:53,199
and there are synchronous or

00:06:51,120 --> 00:06:55,120
asynchronous endpoints that can be

00:06:53,199 --> 00:06:56,560
registered depending on which type of

00:06:55,120 --> 00:06:57,599
services you are deploying to the

00:06:56,560 --> 00:06:59,360
platform

00:06:57,599 --> 00:07:01,199
and there are so also some optional

00:06:59,360 --> 00:07:03,840
services you know for example

00:07:01,199 --> 00:07:04,639
um for non-bindable services that do not

00:07:03,840 --> 00:07:08,240
require

00:07:04,639 --> 00:07:08,240
um the service binding endpoint

00:07:08,720 --> 00:07:13,280
and and what we have seen um

00:07:11,759 --> 00:07:15,120
when we're talking about service plan

00:07:13,280 --> 00:07:17,440
and services um we know

00:07:15,120 --> 00:07:19,120
this can mean and various different

00:07:17,440 --> 00:07:20,720
things for example

00:07:19,120 --> 00:07:22,160
when we talk about the database service

00:07:20,720 --> 00:07:25,039
plan that

00:07:22,160 --> 00:07:26,319
could um could be um just like creating

00:07:25,039 --> 00:07:28,639
a database

00:07:26,319 --> 00:07:31,039
in an existing pre-provision cluster or

00:07:28,639 --> 00:07:33,680
you know creating a single dedicated vm

00:07:31,039 --> 00:07:34,240
for for my database instance or when

00:07:33,680 --> 00:07:36,560
probably

00:07:34,240 --> 00:07:37,599
running in production you will probably

00:07:36,560 --> 00:07:40,000
have to

00:07:37,599 --> 00:07:41,199
create a new cluster of the ends and

00:07:40,000 --> 00:07:43,759
make

00:07:41,199 --> 00:07:44,240
maybe some custom setup configuration

00:07:43,759 --> 00:07:47,280
and this

00:07:44,240 --> 00:07:50,400
is all these things comes with with

00:07:47,280 --> 00:07:53,039
services and service plans

00:07:50,400 --> 00:07:55,039
so we have seen so far that through the

00:07:53,039 --> 00:07:56,720
binding operation

00:07:55,039 --> 00:07:58,800
the application gets credentialed to

00:07:56,720 --> 00:08:02,240
access the provision instance

00:07:58,800 --> 00:08:04,160
but what about accessing the instance um

00:08:02,240 --> 00:08:06,400
without a use without without an

00:08:04,160 --> 00:08:10,240
application or just handling credentials

00:08:06,400 --> 00:08:13,360
without a binding to an application

00:08:10,240 --> 00:08:15,280
so we have seen um that uh the user

00:08:13,360 --> 00:08:17,199
will type in the comments and the cloud

00:08:15,280 --> 00:08:18,960
controller will talk to the service

00:08:17,199 --> 00:08:19,919
broker and the sales broker will create

00:08:18,960 --> 00:08:21,440
a service

00:08:19,919 --> 00:08:23,440
and then the service will get through

00:08:21,440 --> 00:08:25,120
this cloud controller being back to the

00:08:23,440 --> 00:08:28,720
to the application

00:08:25,120 --> 00:08:30,720
and but with service key um we will have

00:08:28,720 --> 00:08:32,240
just no interaction with the application

00:08:30,720 --> 00:08:34,320
in the life cycle so

00:08:32,240 --> 00:08:35,440
and that the service will be created by

00:08:34,320 --> 00:08:39,599
the service broker

00:08:35,440 --> 00:08:43,279
and we'll just um and we it will just um

00:08:39,599 --> 00:08:45,360
get him back to the to the user in as um

00:08:43,279 --> 00:08:47,839
and in that case the user can just um

00:08:45,360 --> 00:08:51,279
access the service without uh having

00:08:47,839 --> 00:08:51,279
uh having deployed an application

00:08:52,800 --> 00:08:56,800
so the only difference um when talking

00:08:54,880 --> 00:09:00,080
about service keys is just like

00:08:56,800 --> 00:09:02,480
um we have custom con commands for for

00:09:00,080 --> 00:09:03,680
um creating and deleting service key and

00:09:02,480 --> 00:09:06,399
the service broker

00:09:03,680 --> 00:09:06,880
um will just create a normal binding and

00:09:06,399 --> 00:09:08,959
make it

00:09:06,880 --> 00:09:10,800
and then make it available for the user

00:09:08,959 --> 00:09:12,959
in order to connect um to the backing

00:09:10,800 --> 00:09:15,519
service

00:09:12,959 --> 00:09:17,600
so we talked about the lifecycle which

00:09:15,519 --> 00:09:19,360
is organized by the service broker

00:09:17,600 --> 00:09:20,720
and how cool the service open service

00:09:19,360 --> 00:09:24,240
broker api spec is

00:09:20,720 --> 00:09:25,200
but what are the pitfalls the ugly truth

00:09:24,240 --> 00:09:27,680
moments

00:09:25,200 --> 00:09:29,360
when uh creating a service broker

00:09:27,680 --> 00:09:30,240
service broker creation can be really

00:09:29,360 --> 00:09:33,040
hard

00:09:30,240 --> 00:09:35,360
um when you think about the the the

00:09:33,040 --> 00:09:38,160
special things which come with

00:09:35,360 --> 00:09:38,880
providing services so how about

00:09:38,160 --> 00:09:40,959
organizing

00:09:38,880 --> 00:09:41,920
changes of a plan so for example you

00:09:40,959 --> 00:09:43,440
just started with an

00:09:41,920 --> 00:09:45,760
existing cluster where you provision

00:09:43,440 --> 00:09:47,279
databases inside of

00:09:45,760 --> 00:09:49,600
then the user wants to switch to a

00:09:47,279 --> 00:09:52,000
single instance or a

00:09:49,600 --> 00:09:54,160
personal cluster so how do you organize

00:09:52,000 --> 00:09:56,720
these changes of plans

00:09:54,160 --> 00:09:57,760
the service broker api spec helps you

00:09:56,720 --> 00:10:00,240
with providing

00:09:57,760 --> 00:10:01,200
update endpoints where you can handle

00:10:00,240 --> 00:10:03,279
these

00:10:01,200 --> 00:10:04,640
things through the open service or

00:10:03,279 --> 00:10:06,800
broker api spec

00:10:04,640 --> 00:10:08,160
and so the platform can offer this this

00:10:06,800 --> 00:10:09,839
to the users but

00:10:08,160 --> 00:10:11,519
what has to be done in the background

00:10:09,839 --> 00:10:12,160
you have to organize inside the service

00:10:11,519 --> 00:10:14,399
broker

00:10:12,160 --> 00:10:15,519
and that can be a really hard and tough

00:10:14,399 --> 00:10:17,600
stuff

00:10:15,519 --> 00:10:20,079
and also when modeling the service

00:10:17,600 --> 00:10:22,000
catalog what do you make a service

00:10:20,079 --> 00:10:24,880
service what should be a service plan

00:10:22,000 --> 00:10:27,839
can be really hard choices

00:10:24,880 --> 00:10:29,200
also how do you do monitoring of

00:10:27,839 --> 00:10:32,399
provision services

00:10:29,200 --> 00:10:33,920
how do you organized configuration

00:10:32,399 --> 00:10:37,440
management of these services

00:10:33,920 --> 00:10:40,480
and so on and so on um how about

00:10:37,440 --> 00:10:42,640
with multi-tenancy how do you organize

00:10:40,480 --> 00:10:43,519
user management in a shared existing

00:10:42,640 --> 00:10:46,560
cluster

00:10:43,519 --> 00:10:47,680
or in personal clusters how do you

00:10:46,560 --> 00:10:50,320
organize

00:10:47,680 --> 00:10:50,880
what is this credential you provide to

00:10:50,320 --> 00:10:54,800
the

00:10:50,880 --> 00:10:57,680
user um how do you

00:10:54,800 --> 00:10:58,800
also cope with this in in the context of

00:10:57,680 --> 00:11:00,800
multi-cloud

00:10:58,800 --> 00:11:02,079
what are capacity balance this makes a

00:11:00,800 --> 00:11:04,399
difference if you are in an

00:11:02,079 --> 00:11:05,120
existing cluster versus in a personal

00:11:04,399 --> 00:11:06,720
cluster

00:11:05,120 --> 00:11:08,320
so if you have a database in an existing

00:11:06,720 --> 00:11:12,160
cluster um each

00:11:08,320 --> 00:11:15,279
database should be bound to specific

00:11:12,160 --> 00:11:15,920
resources which are should be uh made

00:11:15,279 --> 00:11:18,000
available

00:11:15,920 --> 00:11:20,079
for example if you have a plan with 30

00:11:18,000 --> 00:11:23,360
day gigabyte of

00:11:20,079 --> 00:11:25,600
space the of disk you shouldn't be

00:11:23,360 --> 00:11:27,360
getting about around that session

00:11:25,600 --> 00:11:29,519
management backup management

00:11:27,360 --> 00:11:31,200
version updates of services in case of

00:11:29,519 --> 00:11:32,640
cvs of these services

00:11:31,200 --> 00:11:34,399
should also be handled by the service

00:11:32,640 --> 00:11:36,480
broker

00:11:34,399 --> 00:11:37,440
and don't forget about tests yeah your

00:11:36,480 --> 00:11:41,040
service broker

00:11:37,440 --> 00:11:44,720
is a piece of software which should all

00:11:41,040 --> 00:11:47,120
so you should also have tests um

00:11:44,720 --> 00:11:48,640
around implementing the open service

00:11:47,120 --> 00:11:52,240
broker api spec correctly

00:11:48,640 --> 00:11:54,959
for this we have developed the osp

00:11:52,240 --> 00:11:56,800
checker which helps as helps you

00:11:54,959 --> 00:12:00,320
developing the service broker

00:11:56,800 --> 00:12:01,600
as a contract test suite you can find

00:12:00,320 --> 00:12:04,160
the link here

00:12:01,600 --> 00:12:06,000
also you should provide external smoke

00:12:04,160 --> 00:12:07,839
tests to test if the service which is

00:12:06,000 --> 00:12:10,160
created by the service broker

00:12:07,839 --> 00:12:12,240
is provisioned the way you want to and

00:12:10,160 --> 00:12:12,959
you also should battle proof test your

00:12:12,240 --> 00:12:16,959
services

00:12:12,959 --> 00:12:20,240
which you create so

00:12:16,959 --> 00:12:22,399
service broker is a fun topic to

00:12:20,240 --> 00:12:24,000
think about it is really helpful for

00:12:22,399 --> 00:12:27,760
your developers to have a service

00:12:24,000 --> 00:12:30,880
broker at hand and but it comes with

00:12:27,760 --> 00:12:32,560
some programmatic points

00:12:30,880 --> 00:12:34,639
first of all we want to thank you for

00:12:32,560 --> 00:12:36,399
your attention have fun at the rest of

00:12:34,639 --> 00:12:38,320
the summit

00:12:36,399 --> 00:12:39,440
if you go down the road with the service

00:12:38,320 --> 00:12:41,680
brokers look

00:12:39,440 --> 00:12:43,120
go back to the slides look at the links

00:12:41,680 --> 00:12:46,160
for the projects page

00:12:43,120 --> 00:12:48,160
and also you can contact us we have a

00:12:46,160 --> 00:12:48,800
broad knowledge about developing service

00:12:48,160 --> 00:12:51,920
brokers

00:12:48,800 --> 00:12:53,120
and a service broker framework to ease

00:12:51,920 --> 00:12:55,040
the steps of the

00:12:53,120 --> 00:12:56,480
livestock so you don't have to replace

00:12:55,040 --> 00:13:01,440
amend all the stuff

00:12:56,480 --> 00:13:03,839
also um i made a talk at the last year's

00:13:01,440 --> 00:13:05,600
north america summit about writing your

00:13:03,839 --> 00:13:08,240
first services broker

00:13:05,600 --> 00:13:08,880
and what you have to look up and do in

00:13:08,240 --> 00:13:11,200
this

00:13:08,880 --> 00:13:12,880
type and what you have to implement and

00:13:11,200 --> 00:13:14,720
there are also

00:13:12,880 --> 00:13:17,040
videos out there about our service

00:13:14,720 --> 00:13:18,480
broker framework you can find all these

00:13:17,040 --> 00:13:21,200
videos on youtube

00:13:18,480 --> 00:13:22,079
or if you struggle to find them please

00:13:21,200 --> 00:13:24,160
contact us

00:13:22,079 --> 00:13:25,920
and like i said have fun with the rest

00:13:24,160 --> 00:13:29,040
of the summit

00:13:25,920 --> 00:13:35,839
have fun bye

00:13:29,040 --> 00:13:35,839
hi ono can you hear us

00:13:37,120 --> 00:13:45,040
um to your question

00:13:40,240 --> 00:13:45,040
um from before

00:13:45,760 --> 00:13:50,079
i think um there are two things um first

00:13:49,120 --> 00:13:55,279
of all

00:13:50,079 --> 00:13:55,279
you can edit uh thank you for

00:13:56,000 --> 00:13:59,120
yeah it's really confusing with the

00:13:58,160 --> 00:14:02,399
extra session

00:13:59,120 --> 00:14:06,639
um so with your question

00:14:02,399 --> 00:14:08,639
the um towards the cf on kubernetes

00:14:06,639 --> 00:14:10,399
uh as the the open service broker on

00:14:08,639 --> 00:14:13,360
kubernetes and on cf

00:14:10,399 --> 00:14:14,160
um on cf you you you update the service

00:14:13,360 --> 00:14:19,040
broker all

00:14:14,160 --> 00:14:20,880
fine and

00:14:19,040 --> 00:14:22,240
then you have the service broker and cf

00:14:20,880 --> 00:14:24,240
with

00:14:22,240 --> 00:14:25,440
on kubernetes you need to install in

00:14:24,240 --> 00:14:28,000
your cluster the

00:14:25,440 --> 00:14:29,519
service catalog it's an open source

00:14:28,000 --> 00:14:32,639
project

00:14:29,519 --> 00:14:36,480
you can download and then you can add

00:14:32,639 --> 00:14:36,480
the service into the service catalog

00:14:37,360 --> 00:14:44,800
towards updating the service um

00:14:41,839 --> 00:14:46,000
if you deploy vms in background to the

00:14:44,800 --> 00:14:49,519
service broker

00:14:46,000 --> 00:14:52,240
i think the um easiest way um

00:14:49,519 --> 00:14:52,880
to to do updates for example if you

00:14:52,240 --> 00:14:56,800
deploy

00:14:52,880 --> 00:15:01,519
with bosch in background um you make

00:14:56,800 --> 00:15:03,320
or if you um i it's about your your um

00:15:01,519 --> 00:15:04,800
what is your service for for

00:15:03,320 --> 00:15:06,800
clarification isn't

00:15:04,800 --> 00:15:13,199
is it an app or is it somebody mc are

00:15:06,800 --> 00:15:15,519
you starting the background

00:15:13,199 --> 00:15:16,240
if it's some vms you have for example

00:15:15,519 --> 00:15:19,360
deployed with

00:15:16,240 --> 00:15:22,240
um i'm going to broker to run kubernetes

00:15:19,360 --> 00:15:27,839
for kubernetes no dependency on cf

00:15:22,240 --> 00:15:27,839
ah okay um

00:15:29,199 --> 00:15:35,680
um a database okay

00:15:32,560 --> 00:15:37,360
um for exam for example um you have your

00:15:35,680 --> 00:15:40,800
service broker is an app

00:15:37,360 --> 00:15:41,519
um you deployed on on cf and so on you

00:15:40,800 --> 00:15:43,600
know that

00:15:41,519 --> 00:15:44,959
and in the background it for example

00:15:43,600 --> 00:15:48,240
deploys a vm

00:15:44,959 --> 00:15:51,279
with a database um if you

00:15:48,240 --> 00:15:52,720
switch over to um to kubernetes

00:15:51,279 --> 00:15:54,959
and you have to deploy the service

00:15:52,720 --> 00:15:56,720
broker kubernetes so if you make a

00:15:54,959 --> 00:15:58,480
deployment for that you add it to the

00:15:56,720 --> 00:16:00,480
service catalog

00:15:58,480 --> 00:16:01,680
and then in the background it either

00:16:00,480 --> 00:16:04,800
deploys vms

00:16:01,680 --> 00:16:07,199
like before there so there is no change

00:16:04,800 --> 00:16:08,880
in the service broker at that part um so

00:16:07,199 --> 00:16:10,560
you have to have a bosch director or

00:16:08,880 --> 00:16:11,759
something for the database deployment or

00:16:10,560 --> 00:16:14,480
whatever you use

00:16:11,759 --> 00:16:16,399
as a technique and to deploy the to

00:16:14,480 --> 00:16:18,240
deploy or manage the database

00:16:16,399 --> 00:16:20,000
um or you if you change that on the

00:16:18,240 --> 00:16:22,320
switch to kubernetes

00:16:20,000 --> 00:16:23,600
um you then have to deploy um something

00:16:22,320 --> 00:16:26,800
to kubernetes

00:16:23,600 --> 00:16:29,199
um for example you um you

00:16:26,800 --> 00:16:31,199
use a kubernetes operator framework and

00:16:29,199 --> 00:16:33,680
then manage the operators

00:16:31,199 --> 00:16:34,320
the operator for example running a helm

00:16:33,680 --> 00:16:37,120
chart to

00:16:34,320 --> 00:16:37,920
kubernetes which then deploys using the

00:16:37,120 --> 00:16:40,880
crds

00:16:37,920 --> 00:16:40,880
from the operator

00:16:44,320 --> 00:16:49,120
it may be the same code but does not

00:16:46,800 --> 00:16:50,880
have if you change something from your

00:16:49,120 --> 00:16:52,320
um from your perspective what the

00:16:50,880 --> 00:16:55,680
service brokers should do

00:16:52,320 --> 00:16:58,000
you um so you have to shift for example

00:16:55,680 --> 00:16:59,839
you want to also to deploy the database

00:16:58,000 --> 00:17:01,519
on top of kubernetes instead of vms then

00:16:59,839 --> 00:17:02,800
you have to change something but if you

00:17:01,519 --> 00:17:05,919
still want to do

00:17:02,800 --> 00:17:08,160
the old stuff with deploying vm

00:17:05,919 --> 00:17:09,679
you find to go you can use the same code

00:17:08,160 --> 00:17:12,959
because

00:17:09,679 --> 00:17:16,000
the the service catalog or cloud foundry

00:17:12,959 --> 00:17:16,880
only uses the open service broker api as

00:17:16,000 --> 00:17:18,880
an api spec

00:17:16,880 --> 00:17:21,839
so it doesn't know not know what is

00:17:18,880 --> 00:17:21,839
going on the background

00:17:25,760 --> 00:17:30,240
no the cf update functionality should

00:17:28,400 --> 00:17:32,640
also be there

00:17:30,240 --> 00:17:34,080
because the service broker can that and

00:17:32,640 --> 00:17:37,840
i think the service

00:17:34,080 --> 00:17:37,840
catalog from um

00:17:38,960 --> 00:17:42,559
i think service catalog should be

00:17:40,960 --> 00:17:43,120
equivalent in functionality there should

00:17:42,559 --> 00:17:46,480
be an

00:17:43,120 --> 00:17:50,880
update functionality but i'm not sure um

00:17:46,480 --> 00:17:53,919
i have to look into it um

00:17:50,880 --> 00:17:57,840
wait i think service catalog it was

00:17:53,919 --> 00:18:01,840
ignorant there service catalog

00:17:57,840 --> 00:18:01,840
so update

00:18:22,000 --> 00:18:24,720
if it does not

00:18:26,799 --> 00:18:29,840
the commutation

00:18:38,320 --> 00:18:46,080
addresses permission new binding

00:18:42,880 --> 00:18:46,080
potential mapping

00:18:51,200 --> 00:18:55,120
i have to admit i i cannot find it on

00:18:53,440 --> 00:18:59,120
the first

00:18:55,120 --> 00:18:59,120
view but it should be somewhere here

00:19:02,320 --> 00:19:08,160
join us i hope that helps oh no

00:19:05,760 --> 00:19:10,559
um with the community florian with the

00:19:08,160 --> 00:19:12,960
communication direction cf api talks to

00:19:10,559 --> 00:19:25,840
broker stay or do you always consider

00:19:12,960 --> 00:19:25,840
change to an approach with the service

00:19:33,600 --> 00:19:39,440
um i'm not too florian to your question

00:19:37,200 --> 00:19:40,640
i'm i'm not sure i think that will not

00:19:39,440 --> 00:19:43,600
change

00:19:40,640 --> 00:19:44,400
because um the the communication

00:19:43,600 --> 00:19:47,440
direction

00:19:44,400 --> 00:19:50,720
there is really strict

00:19:47,440 --> 00:19:52,559
i also think that the possibility to

00:19:50,720 --> 00:19:54,160
re-update stuff from the catalogue would

00:19:52,559 --> 00:19:56,480
be also fun

00:19:54,160 --> 00:19:57,840
but i don't think that it's coming in

00:19:56,480 --> 00:20:00,880
the near run time because

00:19:57,840 --> 00:20:03,760
in the that's a topic which

00:20:00,880 --> 00:20:04,960
is talked about in the um in the

00:20:03,760 --> 00:20:07,760
community long

00:20:04,960 --> 00:20:08,640
time and i don't think there is changing

00:20:07,760 --> 00:20:10,400
much

00:20:08,640 --> 00:20:11,760
from the communication perspective

00:20:10,400 --> 00:20:15,120
because um you

00:20:11,760 --> 00:20:17,280
not only have to um you have to

00:20:15,120 --> 00:20:19,039
to change the open service broker apis

00:20:17,280 --> 00:20:21,440
back there

00:20:19,039 --> 00:20:23,200
because you have the catalog exchange

00:20:21,440 --> 00:20:24,159
has to change for example and other

00:20:23,200 --> 00:20:27,840
stuff

00:20:24,159 --> 00:20:30,880
um you have to have um

00:20:27,840 --> 00:20:34,080
a direct communication to um

00:20:30,880 --> 00:20:36,240
to the controller um so the the service

00:20:34,080 --> 00:20:39,039
broker for the first time is able to

00:20:36,240 --> 00:20:40,640
um log into the controller to add stuff

00:20:39,039 --> 00:20:41,440
if you change the communication

00:20:40,640 --> 00:20:44,559
directions

00:20:41,440 --> 00:20:48,640
such on so um i

00:20:44,559 --> 00:20:52,000
don't think that um yeah a new

00:20:48,640 --> 00:20:54,480
api version for sure um maybe in

00:20:52,000 --> 00:20:57,840
future versions um you can participate

00:20:54,480 --> 00:20:59,280
in that um the discussions about um

00:20:57,840 --> 00:21:01,840
adding new features in the service

00:20:59,280 --> 00:21:06,400
broker api you can

00:21:01,840 --> 00:21:09,039
a talkative topic

00:21:06,400 --> 00:21:10,240
the the community there is open the the

00:21:09,039 --> 00:21:12,960
um

00:21:10,240 --> 00:21:13,440
so you can propose that um to the new

00:21:12,960 --> 00:21:15,840
spec

00:21:13,440 --> 00:21:17,440
you can by raising an issue on the

00:21:15,840 --> 00:21:19,840
github repository

00:21:17,440 --> 00:21:20,720
and the discussions about these topics

00:21:19,840 --> 00:21:24,640
is also in

00:21:20,720 --> 00:21:27,520
an open sessions on a regular basis

00:21:24,640 --> 00:21:28,480
um so you can join and discuss live

00:21:27,520 --> 00:21:31,760
around that

00:21:28,480 --> 00:21:34,000
with the others

00:21:31,760 --> 00:21:34,000
um

00:21:35,520 --> 00:21:40,000
oh no if you want to if it's the first

00:21:38,080 --> 00:21:42,400
time for you to develop such a service

00:21:40,000 --> 00:21:42,400
broker

00:21:42,799 --> 00:21:47,039
we developed quite some and also made a

00:21:45,360 --> 00:21:50,799
framework around that

00:21:47,039 --> 00:21:54,000
um it's not yet um able to deploy

00:21:50,799 --> 00:21:59,200
kubernetes operators um

00:21:54,000 --> 00:22:02,960
but you can um

00:21:59,200 --> 00:22:06,400
you can easily add that

00:22:02,960 --> 00:22:06,880
we plan to do that for example um so you

00:22:06,400 --> 00:22:09,600
can

00:22:06,880 --> 00:22:11,360
we can deploy kubernetes operators out

00:22:09,600 --> 00:22:13,280
of the framework

00:22:11,360 --> 00:22:14,480
so you don't have to implement all the

00:22:13,280 --> 00:22:17,919
stuff i

00:22:14,480 --> 00:22:18,640
i i made a talk about that in last

00:22:17,919 --> 00:22:21,039
year's

00:22:18,640 --> 00:22:22,000
north america summit and the video

00:22:21,039 --> 00:22:25,039
should be online

00:22:22,000 --> 00:22:27,039
um where i talk also about if you start

00:22:25,039 --> 00:22:28,320
writing your first service broker what

00:22:27,039 --> 00:22:30,000
are all the

00:22:28,320 --> 00:22:32,400
stuff you have to do it's some overlap

00:22:30,000 --> 00:22:32,400
with the

00:22:34,320 --> 00:22:41,039
talk now uh and

00:22:37,840 --> 00:22:42,480
um uh and um but also i shared their

00:22:41,039 --> 00:22:43,280
link to the github repository of the

00:22:42,480 --> 00:22:44,960
framework we made

00:22:43,280 --> 00:22:47,200
quite some documentation about which

00:22:44,960 --> 00:22:52,000
part of the software is used for what

00:22:47,200 --> 00:22:54,400
um and it's uh on uh

00:22:52,000 --> 00:22:56,000
ah okay yeah using pack should you

00:22:54,400 --> 00:22:58,640
should be easy running stuff on

00:22:56,000 --> 00:23:00,799
kubernetes here um the hard part is

00:22:58,640 --> 00:23:04,159
running databases on kubernetes

00:23:00,799 --> 00:23:06,880
um but therefore the operator

00:23:04,159 --> 00:23:08,640
community is helping us from the other

00:23:06,880 --> 00:23:09,600
side so we have only to tackle from from

00:23:08,640 --> 00:23:14,880
now from the

00:23:09,600 --> 00:23:14,880
from outside there i hope so

00:23:18,640 --> 00:23:23,840
did i miss some questions let's scroll

00:23:20,840 --> 00:23:23,840
back

00:23:29,760 --> 00:23:37,919
and to mauricio i

00:23:34,400 --> 00:23:40,000
not sure if we if there is a

00:23:37,919 --> 00:23:40,960
complete rep as a repository with a

00:23:40,000 --> 00:23:44,000
complete stack

00:23:40,960 --> 00:23:46,240
only for kubernetes um

00:23:44,000 --> 00:23:47,840
i have to think about if i know

00:23:46,240 --> 00:23:51,520
something

00:23:47,840 --> 00:23:53,840
um i know um for example um i

00:23:51,520 --> 00:23:55,120
brought that in the in the chat in the

00:23:53,840 --> 00:23:58,320
original talk there is

00:23:55,120 --> 00:24:01,919
um a case m nowadays tanzu

00:23:58,320 --> 00:24:06,159
um service manager which tries to um

00:24:01,919 --> 00:24:08,000
deploy arbitrary operators

00:24:06,159 --> 00:24:10,000
but it does not know about the

00:24:08,000 --> 00:24:13,760
specialties of that operator

00:24:10,000 --> 00:24:17,690
you put in there um so it's more like

00:24:13,760 --> 00:24:19,200
a start button to deploy hem charts

00:24:17,690 --> 00:24:21,760
[Music]

00:24:19,200 --> 00:24:24,320
and there are operator frameworks or

00:24:21,760 --> 00:24:26,000
hand charts you can deploy with that

00:24:24,320 --> 00:24:27,600
but i don't think there is service

00:24:26,000 --> 00:24:30,480
broker yet with a

00:24:27,600 --> 00:24:31,360
whole stuff around which is open source

00:24:30,480 --> 00:24:33,679
and available

00:24:31,360 --> 00:24:35,600
i know that people work around that we

00:24:33,679 --> 00:24:38,559
do too

00:24:35,600 --> 00:24:39,120
but i'm not sure if there is a complete

00:24:38,559 --> 00:24:47,840
version

00:24:39,120 --> 00:24:47,840
online available

00:24:50,559 --> 00:24:54,880
i don't know i they are recorded

00:24:58,840 --> 00:25:01,840
perfectly

00:25:07,760 --> 00:25:11,760
so any questions we didn't answer ans

00:25:10,159 --> 00:25:15,840
any new questions

00:25:11,760 --> 00:25:15,840
any details

00:25:18,000 --> 00:25:20,400
great

00:25:25,760 --> 00:25:30,240
any wishes do you want to know something

00:25:33,600 --> 00:25:39,520
ah with operators yeah yeah i think so

00:25:36,799 --> 00:25:39,520
i'm definitely

00:25:40,799 --> 00:25:45,200
definitely because that's a strong need

00:25:43,440 --> 00:25:48,559
if we move with uh

00:25:45,200 --> 00:25:51,360
cloud friendly to kubernetes um having

00:25:48,559 --> 00:25:53,200
bosch deployed databases seems like a

00:25:51,360 --> 00:25:54,960
little bit awkward

00:25:53,200 --> 00:25:56,240
and because then the bosch directory is

00:25:54,960 --> 00:25:59,679
deployed for

00:25:56,240 --> 00:26:02,320
the um for the service broker

00:25:59,679 --> 00:26:03,200
um beforehand we have we have brokers

00:26:02,320 --> 00:26:05,200
around

00:26:03,200 --> 00:26:07,039
bosch directors around which we can use

00:26:05,200 --> 00:26:09,679
or and all the people know bosch

00:26:07,039 --> 00:26:10,159
but i think we will go into the next

00:26:09,679 --> 00:26:12,480
phase

00:26:10,159 --> 00:26:13,840
when people switched over we will have

00:26:12,480 --> 00:26:16,640
operators which

00:26:13,840 --> 00:26:17,520
um are kubernetes native then and never

00:26:16,640 --> 00:26:18,880
touched a server

00:26:17,520 --> 00:26:20,720
a bosch director and then for the

00:26:18,880 --> 00:26:21,679
service broker need need to deploy for

00:26:20,720 --> 00:26:24,480
the first time so

00:26:21,679 --> 00:26:26,400
a bosch director and get to know with

00:26:24,480 --> 00:26:28,720
bosch and so on and

00:26:26,400 --> 00:26:30,720
i hope we can circumvent that by moving

00:26:28,720 --> 00:26:32,720
stuff to kubernetes i mean there is

00:26:30,720 --> 00:26:34,400
some drawbacks if you move with the

00:26:32,720 --> 00:26:37,679
database from vms to

00:26:34,400 --> 00:26:40,559
kubernetes um not all databases

00:26:37,679 --> 00:26:43,039
come in they're very handy but most

00:26:40,559 --> 00:26:46,400
database

00:26:43,039 --> 00:26:49,600
producing companies nowadays switch to

00:26:46,400 --> 00:26:52,400
containerized deployment and with that

00:26:49,600 --> 00:26:53,360
the databases get hardened and be able

00:26:52,400 --> 00:26:56,400
to deploy to

00:26:53,360 --> 00:26:59,919
kubernetes most of them also

00:26:56,400 --> 00:27:02,000
started to develop operators themselves

00:26:59,919 --> 00:27:05,200
so i think

00:27:02,000 --> 00:27:07,440
that's only a matter of time if that

00:27:05,200 --> 00:27:10,640
gets the golden standard

00:27:07,440 --> 00:27:14,880
and from that time on

00:27:10,640 --> 00:27:14,880
we get the the real cool whole picture

00:27:15,840 --> 00:27:23,200
data and data services and

00:27:20,399 --> 00:27:24,480
apps deployed on kubernetes through

00:27:23,200 --> 00:27:35,840
cloud foundry

00:27:24,480 --> 00:27:35,840
that's the main goal i think

00:27:37,360 --> 00:27:42,240
there any questions in the q a is if

00:27:40,720 --> 00:27:46,559
there are tips for best practice

00:27:42,240 --> 00:27:49,919
using goal routines for ending smg

00:27:46,559 --> 00:27:53,279
it seems to be imperfect um

00:27:49,919 --> 00:27:57,760
yeah um for example

00:27:53,279 --> 00:27:59,919
what we did our framework is um um um

00:27:57,760 --> 00:28:00,880
on on another's question for one in the

00:27:59,919 --> 00:28:04,799
q a

00:28:00,880 --> 00:28:06,240
um i think the

00:28:04,799 --> 00:28:07,919
is there if there are tips for best

00:28:06,240 --> 00:28:10,890
practices i think

00:28:07,919 --> 00:28:12,159
um first of all um

00:28:10,890 --> 00:28:15,760
[Music]

00:28:12,159 --> 00:28:18,559
if you develop a service broker um

00:28:15,760 --> 00:28:19,440
don't implement all the the api stuff

00:28:18,559 --> 00:28:22,720
choose one of the

00:28:19,440 --> 00:28:25,840
the frameworks around um for start

00:28:22,720 --> 00:28:27,919
there's something spring boot um we

00:28:25,840 --> 00:28:29,360
switched uh we diverted with our

00:28:27,919 --> 00:28:30,000
framework a little time back to all

00:28:29,360 --> 00:28:34,240
service brokers

00:28:30,000 --> 00:28:37,360
and java apps um

00:28:34,240 --> 00:28:40,799
because we if you um duck deep

00:28:37,360 --> 00:28:44,399
deep into the service broker api um

00:28:40,799 --> 00:28:45,600
and managing services in the background

00:28:44,399 --> 00:28:47,440
you um

00:28:45,600 --> 00:28:49,440
you get to know that the the routines

00:28:47,440 --> 00:28:52,320
behind the the api spec if you want to

00:28:49,440 --> 00:28:52,320
make them really good

00:28:52,399 --> 00:28:55,840
uh some a little bit hard for example

00:28:54,559 --> 00:28:59,440
the other async

00:28:55,840 --> 00:29:01,279
parts and so on and you have to have a

00:28:59,440 --> 00:29:04,960
data store in behind

00:29:01,279 --> 00:29:06,960
to or something like that to know which

00:29:04,960 --> 00:29:07,679
service instances you manage in which

00:29:06,960 --> 00:29:09,760
state how

00:29:07,679 --> 00:29:10,880
you deployed them if you update them

00:29:09,760 --> 00:29:12,559
what to do

00:29:10,880 --> 00:29:16,799
and because service update can a little

00:29:12,559 --> 00:29:16,799
bit really really tricky thing

00:29:16,880 --> 00:29:22,720
because um if you deployed a vm

00:29:20,720 --> 00:29:25,760
deployment a clustered deployment

00:29:22,720 --> 00:29:28,480
what do you do if you

00:29:25,760 --> 00:29:29,520
want to increase the size is decrease an

00:29:28,480 --> 00:29:34,399
option for you

00:29:29,520 --> 00:29:38,640
when when updating how do you manage

00:29:34,399 --> 00:29:40,320
how do you manage version upgrades

00:29:38,640 --> 00:29:42,640
for example if you if you want to make a

00:29:40,320 --> 00:29:43,520
patch or a major version update of the

00:29:42,640 --> 00:29:47,120
service

00:29:43,520 --> 00:29:47,919
um do you provide a way to backup the

00:29:47,120 --> 00:29:50,240
database

00:29:47,919 --> 00:29:52,480
and deploy a new service instance and

00:29:50,240 --> 00:29:54,720
put in the backup or

00:29:52,480 --> 00:29:56,399
what do you do with that so that's a

00:29:54,720 --> 00:29:59,679
really bit

00:29:56,399 --> 00:30:03,200
problematic at that point um what you do

00:29:59,679 --> 00:30:05,760
um there's no golden standard i think

00:30:03,200 --> 00:30:05,760
out there

00:30:07,120 --> 00:30:10,159
but don't make it too

00:30:08,480 --> 00:30:12,480
[Music]

00:30:10,159 --> 00:30:14,240
nasty for the developers so you should

00:30:12,480 --> 00:30:15,679
what you aim for is a high standard on

00:30:14,240 --> 00:30:19,840
automatization

00:30:15,679 --> 00:30:22,000
um so patching for example means

00:30:19,840 --> 00:30:22,960
um update to the next version as a

00:30:22,000 --> 00:30:25,360
parameter of

00:30:22,960 --> 00:30:26,399
something um and you don't want to

00:30:25,360 --> 00:30:28,320
implement all the

00:30:26,399 --> 00:30:30,159
the general management of such

00:30:28,320 --> 00:30:32,240
parameters handing over

00:30:30,159 --> 00:30:33,200
and so on um so the frameworks help you

00:30:32,240 --> 00:30:36,880
with that

00:30:33,200 --> 00:30:38,640
um i mean we started our framework in

00:30:36,880 --> 00:30:42,320
00:30:38,640 --> 00:30:42,320
um and

00:30:42,720 --> 00:30:46,480
yeah was quite right since then and you

00:30:45,279 --> 00:30:49,440
don't want to

00:30:46,480 --> 00:30:50,880
do all the stuff on yourself if the spec

00:30:49,440 --> 00:30:52,480
updates and you don't want

00:30:50,880 --> 00:30:54,399
and you have to update to your service

00:30:52,480 --> 00:30:57,440
broker um

00:30:54,399 --> 00:31:00,240
you don't want to have problems then

00:30:57,440 --> 00:31:01,600
with interjoint services and if you have

00:31:00,240 --> 00:31:04,240
two service brokers

00:31:01,600 --> 00:31:06,080
you don't you have to put in then the

00:31:04,240 --> 00:31:07,200
new spec parts in in both service

00:31:06,080 --> 00:31:09,279
programs

00:31:07,200 --> 00:31:10,960
um so using frameworks they're really

00:31:09,279 --> 00:31:13,279
helpful

00:31:10,960 --> 00:31:13,279
um

00:31:15,440 --> 00:31:22,720
what's um also golden standard with that

00:31:20,559 --> 00:31:22,720
is

00:31:25,200 --> 00:31:28,399
don't aim for designing the service

00:31:27,039 --> 00:31:30,480
broker

00:31:28,399 --> 00:31:32,880
aim for designing the service the

00:31:30,480 --> 00:31:35,760
service broker provides

00:31:32,880 --> 00:31:37,200
so if you've started developing a

00:31:35,760 --> 00:31:38,960
service broker don't think about the

00:31:37,200 --> 00:31:41,919
service broker first

00:31:38,960 --> 00:31:43,440
think about the service you want to

00:31:41,919 --> 00:31:47,039
create

00:31:43,440 --> 00:31:48,000
so in terms of what is that that the

00:31:47,039 --> 00:31:50,399
user needs

00:31:48,000 --> 00:31:51,840
the user says i needed my sql database

00:31:50,399 --> 00:31:54,000
but but what that does

00:31:51,840 --> 00:31:55,600
that means in terms of um high

00:31:54,000 --> 00:31:58,960
availability

00:31:55,600 --> 00:32:02,159
um fastness of deploy of availability

00:31:58,960 --> 00:32:06,559
um after

00:32:02,159 --> 00:32:12,320
the provisioning size

00:32:06,559 --> 00:32:14,480
backup functionalities support hotlines

00:32:12,320 --> 00:32:15,360
pacing uh pay thing of the of the

00:32:14,480 --> 00:32:17,679
database

00:32:15,360 --> 00:32:19,440
after creation so for example adding

00:32:17,679 --> 00:32:20,720
some routines and so on what is that

00:32:19,440 --> 00:32:23,840
what you what you want to

00:32:20,720 --> 00:32:26,000
provide um

00:32:23,840 --> 00:32:27,360
only if you know that you know what you

00:32:26,000 --> 00:32:29,440
what the service broker should do

00:32:27,360 --> 00:32:31,760
creating a database with a with a helm

00:32:29,440 --> 00:32:33,360
chart of something is really easy but

00:32:31,760 --> 00:32:35,279
and then you have a mess when when it

00:32:33,360 --> 00:32:38,080
comes to day two operations or

00:32:35,279 --> 00:32:39,840
um adding um helpful full

00:32:38,080 --> 00:32:42,880
functionalities for the um

00:32:39,840 --> 00:32:45,440
for the developers and the the

00:32:42,880 --> 00:32:47,440
cf is is about the developers the

00:32:45,440 --> 00:32:50,480
services should also be

00:32:47,440 --> 00:32:53,120
um but if you if you do don't do that

00:32:50,480 --> 00:32:55,200
you get a mess and that's what i think

00:32:53,120 --> 00:32:57,679
is also the the main difference between

00:32:55,200 --> 00:32:58,480
cf and kubernetes is kubernetes is a

00:32:57,679 --> 00:33:01,679
cool inter

00:32:58,480 --> 00:33:03,519
infrastructure orchestration tool um for

00:33:01,679 --> 00:33:08,320
orchestrating containers

00:33:03,519 --> 00:33:10,480
but it is lags with user experience

00:33:08,320 --> 00:33:12,000
in that for a developer it's not

00:33:10,480 --> 00:33:14,720
interesting because

00:33:12,000 --> 00:33:15,760
there's so many things to do so much

00:33:14,720 --> 00:33:19,600
yammer

00:33:15,760 --> 00:33:21,919
um stuff um

00:33:19,600 --> 00:33:22,720
and with cf push you have that easy and

00:33:21,919 --> 00:33:24,320
you only

00:33:22,720 --> 00:33:26,000
with service brokers you want to have

00:33:24,320 --> 00:33:29,200
that feeling also

00:33:26,000 --> 00:33:30,000
and so the service you should like you

00:33:29,200 --> 00:33:33,440
you

00:33:30,000 --> 00:33:35,120
develop an application so you don't

00:33:33,440 --> 00:33:37,279
think about the coding first you think

00:33:35,120 --> 00:33:39,200
about the what is the product i want to

00:33:37,279 --> 00:33:41,039
to develop there so that's also the

00:33:39,200 --> 00:33:44,080
thing you should do with the service pro

00:33:41,039 --> 00:33:47,679
that's the best practice

00:33:44,080 --> 00:33:51,279
the golden thing you should do so

00:33:47,679 --> 00:33:52,960
um the other thing any tips on handling

00:33:51,279 --> 00:33:56,399
the edge cases

00:33:52,960 --> 00:33:58,640
um is there some kind of test drive

00:33:56,399 --> 00:34:00,640
app i can use to exercise service

00:33:58,640 --> 00:34:01,519
brokers and there are two things at the

00:34:00,640 --> 00:34:04,399
moment i think

00:34:01,519 --> 00:34:06,320
um the first of all contract tester and

00:34:04,399 --> 00:34:08,720
we have for example developed the osb

00:34:06,320 --> 00:34:09,520
checker which is also um linked on the

00:34:08,720 --> 00:34:13,520
os

00:34:09,520 --> 00:34:16,879
bapi page um

00:34:13,520 --> 00:34:18,480
they um that's a cool thing because

00:34:16,879 --> 00:34:20,560
if you develop service broker you're not

00:34:18,480 --> 00:34:23,679
sure did i implement

00:34:20,560 --> 00:34:26,240
the spec correctly with it all that's

00:34:23,679 --> 00:34:27,280
tiny edge cases and so on and in the

00:34:26,240 --> 00:34:29,760
spec which are

00:34:27,280 --> 00:34:32,240
not that maybe a really good um

00:34:29,760 --> 00:34:32,800
documented so it springs into the eye oh

00:34:32,240 --> 00:34:35,839
i should

00:34:32,800 --> 00:34:35,839
have to implement that

00:34:36,480 --> 00:34:40,720
so the speed checker is in contract

00:34:39,359 --> 00:34:43,839
testing tools

00:34:40,720 --> 00:34:47,679
to test if the service broker implements

00:34:43,839 --> 00:34:48,000
uh implements the the open service

00:34:47,679 --> 00:34:51,200
broker

00:34:48,000 --> 00:34:51,200
api spec perfectly

00:34:53,119 --> 00:34:56,960
what it doesn't do is test the service

00:34:54,879 --> 00:34:59,440
in the background

00:34:56,960 --> 00:35:00,480
and like i said developing a service

00:34:59,440 --> 00:35:02,160
broker means

00:35:00,480 --> 00:35:05,359
developing the service you want to

00:35:02,160 --> 00:35:07,680
provide to your customers

00:35:05,359 --> 00:35:08,800
so high availability you have to test

00:35:07,680 --> 00:35:11,839
high availability

00:35:08,800 --> 00:35:14,880
for example your prostrate postgrad

00:35:11,839 --> 00:35:16,960
grass ql setup in the background so you

00:35:14,880 --> 00:35:18,240
have to have something like chaos tests

00:35:16,960 --> 00:35:21,920
or something

00:35:18,240 --> 00:35:23,839
um in your um cicd pipeline for the

00:35:21,920 --> 00:35:25,760
service broker

00:35:23,839 --> 00:35:27,839
so if you change something in the

00:35:25,760 --> 00:35:29,920
deployment you run the operator

00:35:27,839 --> 00:35:31,520
kubernetes operator you run the bosch

00:35:29,920 --> 00:35:34,880
deployment you use

00:35:31,520 --> 00:35:35,839
um you have or for if you for example

00:35:34,880 --> 00:35:38,640
you um

00:35:35,839 --> 00:35:39,839
put in a new version of postgresql in

00:35:38,640 --> 00:35:44,480
the bosch release

00:35:39,839 --> 00:35:49,200
you have to have some um

00:35:44,480 --> 00:35:54,240
some stuff around that and we had the

00:35:49,200 --> 00:35:54,240
interesting started an interesting um

00:35:56,320 --> 00:36:03,520
a little bit scientific project um

00:36:00,400 --> 00:36:05,920
in our company uh about that uh

00:36:03,520 --> 00:36:07,040
made some infrastructure tool which was

00:36:05,920 --> 00:36:10,079
mainly

00:36:07,040 --> 00:36:12,800
um uh the uh

00:36:10,079 --> 00:36:13,200
the the baseline out of uh got uh we

00:36:12,800 --> 00:36:16,560
have

00:36:13,200 --> 00:36:19,920
from a master thesis we um we offered

00:36:16,560 --> 00:36:21,440
to a master student um at a in year

00:36:19,920 --> 00:36:24,880
university

00:36:21,440 --> 00:36:28,000
and um we who had to

00:36:24,880 --> 00:36:31,119
develop an inf infrared chaos

00:36:28,000 --> 00:36:31,760
test tulips for infrastructure tests so

00:36:31,119 --> 00:36:35,440
we could

00:36:31,760 --> 00:36:35,760
test the bosch releases we deployed out

00:36:35,440 --> 00:36:39,280
of

00:36:35,760 --> 00:36:42,640
our service brokers

00:36:39,280 --> 00:36:44,800
so that we can say if the

00:36:42,640 --> 00:36:45,920
run of the pipeline for service broker

00:36:44,800 --> 00:36:48,560
was correctly

00:36:45,920 --> 00:36:51,760
run through we also tested

00:36:48,560 --> 00:36:53,599
infrastructure tests in that

00:36:51,760 --> 00:36:56,800
the implementations we have until now

00:36:53,599 --> 00:36:59,839
are really specific to some stuff

00:36:56,800 --> 00:37:02,880
it's under hey uh heaven uh it's under

00:36:59,839 --> 00:37:04,720
development at the moment um the

00:37:02,880 --> 00:37:06,480
tutelage um

00:37:04,720 --> 00:37:08,560
but i think that's something we have to

00:37:06,480 --> 00:37:09,040
come up also in the community like we

00:37:08,560 --> 00:37:11,599
have

00:37:09,040 --> 00:37:13,599
service broker frameworks and we have um

00:37:11,599 --> 00:37:14,480
contract testing tool which we also have

00:37:13,599 --> 00:37:17,920
to have

00:37:14,480 --> 00:37:20,480
um uh tool test tool suites

00:37:17,920 --> 00:37:21,520
which um tests for the uh the

00:37:20,480 --> 00:37:23,839
infrastructure the deployed

00:37:21,520 --> 00:37:23,839
infrastructure

00:37:39,760 --> 00:37:51,839
any questions left

00:38:04,880 --> 00:38:12,720
then thank you and have a nice day

00:38:08,480 --> 00:38:12,720

YouTube URL: https://www.youtube.com/watch?v=CMamq3MJAIU


