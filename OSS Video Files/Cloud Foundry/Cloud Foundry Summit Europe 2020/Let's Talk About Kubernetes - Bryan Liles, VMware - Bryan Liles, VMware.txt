Title: Let's Talk About Kubernetes - Bryan Liles, VMware - Bryan Liles, VMware
Publication date: 2020-10-26
Playlist: Cloud Foundry Summit Europe 2020
Description: 
	Let's Talk About Kubernetes - Bryan Liles, VMware - Bryan Liles, VMware
Captions: 
	00:00:00,080 --> 00:00:03,439
hello i'm brian lyles a principal

00:00:01,920 --> 00:00:06,799
engineer at vmware

00:00:03,439 --> 00:00:10,160
my areas of focus are on infrastructure

00:00:06,799 --> 00:00:11,040
uh this cloud native space and the

00:00:10,160 --> 00:00:13,679
theory of

00:00:11,040 --> 00:00:15,360
how do we get applications from

00:00:13,679 --> 00:00:18,240
development to production

00:00:15,360 --> 00:00:20,000
and then now i'm focusing on the same

00:00:18,240 --> 00:00:23,519
kind of ideas but for

00:00:20,000 --> 00:00:26,720
the telco world how do we make

00:00:23,519 --> 00:00:29,599
telephone companies better but

00:00:26,720 --> 00:00:30,000
today what i'm going to do is is share

00:00:29,599 --> 00:00:31,760
this little

00:00:30,000 --> 00:00:34,160
talk with you and what we're going to do

00:00:31,760 --> 00:00:36,079
is we're going to talk about kubernetes

00:00:34,160 --> 00:00:38,399
and this is an interesting topic why do

00:00:36,079 --> 00:00:42,000
we want to talk about kubernetes at

00:00:38,399 --> 00:00:44,239
a cloud foundry conference

00:00:42,000 --> 00:00:45,840
so before we get started i just want to

00:00:44,239 --> 00:00:48,079
say that in 2020

00:00:45,840 --> 00:00:50,320
things are different i'm giving talks at

00:00:48,079 --> 00:00:51,440
my desk sitting down in front of a green

00:00:50,320 --> 00:00:53,520
screen

00:00:51,440 --> 00:00:55,680
and i just want to let everyone know

00:00:53,520 --> 00:00:57,120
that just because we can't be together

00:00:55,680 --> 00:00:58,559
does not mean that we can't innovate

00:00:57,120 --> 00:01:00,399
anymore and

00:00:58,559 --> 00:01:01,600
i just want to come out to talk to all

00:01:00,399 --> 00:01:03,359
these communities to share

00:01:01,600 --> 00:01:05,439
all these great things the hope that i

00:01:03,359 --> 00:01:07,920
can inspire others to

00:01:05,439 --> 00:01:08,799
go out there and do the hard work to

00:01:07,920 --> 00:01:11,119
move us forward

00:01:08,799 --> 00:01:12,080
it's a vicious cycle and even though we

00:01:11,119 --> 00:01:13,840
can't be together

00:01:12,080 --> 00:01:15,200
we can still grow and learn from one

00:01:13,840 --> 00:01:18,640
another but

00:01:15,200 --> 00:01:20,560
back to my talk here so kubernetes is a

00:01:18,640 --> 00:01:22,799
platform for building platforms

00:01:20,560 --> 00:01:24,159
this is a statement i did not invent it

00:01:22,799 --> 00:01:25,119
it's actually it could have been joe

00:01:24,159 --> 00:01:26,880
bida one of the

00:01:25,119 --> 00:01:28,400
creators of kubernetes or it could have

00:01:26,880 --> 00:01:30,159
been kelsey hightower

00:01:28,400 --> 00:01:32,320
but since neither of them are here right

00:01:30,159 --> 00:01:34,960
now i'm going to say i invented it

00:01:32,320 --> 00:01:36,799
and these are my words and what does

00:01:34,960 --> 00:01:39,439
this actually mean

00:01:36,799 --> 00:01:40,479
well with kubernetes what we can

00:01:39,439 --> 00:01:42,720
actually do

00:01:40,479 --> 00:01:43,840
is we're not really targeting kubernetes

00:01:42,720 --> 00:01:46,640
for applications

00:01:43,840 --> 00:01:48,560
we're we're using kubernetes as this

00:01:46,640 --> 00:01:50,560
platform which we can create

00:01:48,560 --> 00:01:52,240
greater things to make it easier for

00:01:50,560 --> 00:01:54,720
people to deploy applications

00:01:52,240 --> 00:01:56,320
you know things like cloud foundry and

00:01:54,720 --> 00:01:57,200
why don't we what do we want in a

00:01:56,320 --> 00:01:59,119
platform

00:01:57,200 --> 00:02:00,320
well the first thing we might want is

00:01:59,119 --> 00:02:02,240
service discovery

00:02:00,320 --> 00:02:04,240
i have things deployed and i want to be

00:02:02,240 --> 00:02:04,640
able to find them and i won't want to

00:02:04,240 --> 00:02:06,880
really

00:02:04,640 --> 00:02:08,080
manage this myself i want to be able to

00:02:06,880 --> 00:02:10,800
say hey workload

00:02:08,080 --> 00:02:12,239
you're called workload application i

00:02:10,800 --> 00:02:12,720
want others to be able to find you by

00:02:12,239 --> 00:02:15,920
the name

00:02:12,720 --> 00:02:17,920
application and kubernetes provides that

00:02:15,920 --> 00:02:20,319
the next thing is i want a declarative

00:02:17,920 --> 00:02:23,360
api we're in 2020 now

00:02:20,319 --> 00:02:25,280
and the days of imperative apis they're

00:02:23,360 --> 00:02:28,319
not gone they'll never go away

00:02:25,280 --> 00:02:30,239
but the imperative world is not as great

00:02:28,319 --> 00:02:32,080
as the benefits that the declarative

00:02:30,239 --> 00:02:32,959
world can give you i want to actually

00:02:32,080 --> 00:02:36,000
just say

00:02:32,959 --> 00:02:37,760
what is my environment what should my

00:02:36,000 --> 00:02:39,920
environment look like i don't want to

00:02:37,760 --> 00:02:41,599
have to actually build it up myself

00:02:39,920 --> 00:02:42,879
my platform should be able to do that

00:02:41,599 --> 00:02:44,080
and this is actually built into

00:02:42,879 --> 00:02:46,239
kubernetes

00:02:44,080 --> 00:02:47,440
next thing i want is access control i

00:02:46,239 --> 00:02:50,400
want to be able to say

00:02:47,440 --> 00:02:52,800
who can create items who can read items

00:02:50,400 --> 00:02:56,319
who can actually access those items

00:02:52,800 --> 00:02:58,720
and with roles and role bindings

00:02:56,319 --> 00:03:00,239
this facility is provided by kubernetes

00:02:58,720 --> 00:03:02,560
the next item here is secret

00:03:00,239 --> 00:03:04,400
configuration management there is data

00:03:02,560 --> 00:03:06,800
that may or may not be secret

00:03:04,400 --> 00:03:08,080
that i want to maintain in the in the

00:03:06,800 --> 00:03:09,519
you know the process of running my

00:03:08,080 --> 00:03:11,599
application

00:03:09,519 --> 00:03:13,040
uh our platform should be able to manage

00:03:11,599 --> 00:03:14,800
that and then

00:03:13,040 --> 00:03:16,959
there's these last two items workload

00:03:14,800 --> 00:03:19,840
placement and self-healing

00:03:16,959 --> 00:03:22,080
well i don't really if i'm running a

00:03:19,840 --> 00:03:23,840
cluster of kubernetes or any platform i

00:03:22,080 --> 00:03:24,400
just want to say that i have a workload

00:03:23,840 --> 00:03:27,599
it takes

00:03:24,400 --> 00:03:28,959
x amount of gigabytes of memory it needs

00:03:27,599 --> 00:03:31,519
this kind of networking

00:03:28,959 --> 00:03:32,239
it needs this many cpus and nissa's kind

00:03:31,519 --> 00:03:34,000
of disc

00:03:32,239 --> 00:03:35,760
i want my platform to be able to provide

00:03:34,000 --> 00:03:37,440
that and when it can't i want to be able

00:03:35,760 --> 00:03:38,560
to tell me that it can't

00:03:37,440 --> 00:03:41,040
and then the final thing here is

00:03:38,560 --> 00:03:43,360
self-healing now

00:03:41,040 --> 00:03:44,799
applications will crash you know we all

00:03:43,360 --> 00:03:46,959
like to think of ourselves as great

00:03:44,799 --> 00:03:47,920
writers of applications but guess what

00:03:46,959 --> 00:03:49,680
either they're going to run out of

00:03:47,920 --> 00:03:50,319
memory or they're going to get a weird

00:03:49,680 --> 00:03:52,319
input

00:03:50,319 --> 00:03:54,400
or they're just going to fail in some

00:03:52,319 --> 00:03:57,519
ways that's actually great

00:03:54,400 --> 00:04:00,080
so when they do fail i want my platform

00:03:57,519 --> 00:04:01,040
to restart the application if it can and

00:04:00,080 --> 00:04:03,280
even better yet

00:04:01,040 --> 00:04:04,720
if my application uses too much of a

00:04:03,280 --> 00:04:07,439
resource i want the

00:04:04,720 --> 00:04:09,040
platform to expand that resource i am

00:04:07,439 --> 00:04:10,879
actually using

00:04:09,040 --> 00:04:12,239
all my cpu i should be able to expand

00:04:10,879 --> 00:04:14,159
the cpu

00:04:12,239 --> 00:04:16,160
so that's what i'm looking for in in

00:04:14,159 --> 00:04:18,079
kubernetes or any platform

00:04:16,160 --> 00:04:19,440
so i just wanted to start here with

00:04:18,079 --> 00:04:21,600
thinking about not

00:04:19,440 --> 00:04:23,759
kubernetes the the application you know

00:04:21,600 --> 00:04:24,479
the api server the controller manager

00:04:23,759 --> 00:04:26,400
the cubelet

00:04:24,479 --> 00:04:27,759
but let me talk about the goals of the

00:04:26,400 --> 00:04:28,160
kubernetes project and this will

00:04:27,759 --> 00:04:30,400
actually

00:04:28,160 --> 00:04:32,000
put the people this will actually put it

00:04:30,400 --> 00:04:34,639
into context if we think about

00:04:32,000 --> 00:04:36,000
what kubernetes provides as these um

00:04:34,639 --> 00:04:37,680
this these six items

00:04:36,000 --> 00:04:39,680
then it is easier to understand where

00:04:37,680 --> 00:04:41,440
kubernetes is going and why cloud

00:04:39,680 --> 00:04:43,280
foundry is a good match for it

00:04:41,440 --> 00:04:44,880
so the first thing is that kubernetes is

00:04:43,280 --> 00:04:48,560
portable it runs

00:04:44,880 --> 00:04:51,840
on arm it runs on x86

00:04:48,560 --> 00:04:52,880
it runs on my desktop it runs on my

00:04:51,840 --> 00:04:54,800
raspberry pi's

00:04:52,880 --> 00:04:57,199
it runs on my vsphere cluster i have my

00:04:54,800 --> 00:04:57,600
basement kubernetes should be able to

00:04:57,199 --> 00:05:00,720
run

00:04:57,600 --> 00:05:01,440
anywhere i've actually seen demos of it

00:05:00,720 --> 00:05:04,080
running

00:05:01,440 --> 00:05:04,880
on in cars i read an article the other

00:05:04,080 --> 00:05:08,479
day that it ran

00:05:04,880 --> 00:05:11,520
into youtube kubernetes is portable

00:05:08,479 --> 00:05:13,120
also kubernetes general purpose now

00:05:11,520 --> 00:05:14,000
kubernetes is a system for running

00:05:13,120 --> 00:05:16,320
workloads

00:05:14,000 --> 00:05:17,680
across a cluster of servers in a

00:05:16,320 --> 00:05:19,759
distributed fashion

00:05:17,680 --> 00:05:21,360
yes but that's the only problem that

00:05:19,759 --> 00:05:23,759
we're solving with kubernetes

00:05:21,360 --> 00:05:24,720
now these specific things of what your

00:05:23,759 --> 00:05:26,560
application does

00:05:24,720 --> 00:05:27,840
shouldn't matter kubernetes should be

00:05:26,560 --> 00:05:30,880
able to just handle that

00:05:27,840 --> 00:05:32,720
it's a general purpose platform

00:05:30,880 --> 00:05:34,240
next thing here is that we want to meet

00:05:32,720 --> 00:05:36,479
users part way

00:05:34,240 --> 00:05:37,680
now what does that mean we want to

00:05:36,479 --> 00:05:40,800
actually reach in

00:05:37,680 --> 00:05:44,000
and give users good

00:05:40,800 --> 00:05:45,440
good semantics good resources

00:05:44,000 --> 00:05:47,280
things that they are comfortable with to

00:05:45,440 --> 00:05:48,880
be able to describe their application

00:05:47,280 --> 00:05:51,280
a good example of this would be the way

00:05:48,880 --> 00:05:53,360
that kubernetes describes pods

00:05:51,280 --> 00:05:54,400
you get to say what you want in the pod

00:05:53,360 --> 00:05:57,120
what image

00:05:54,400 --> 00:05:58,479
and you get to say other things around

00:05:57,120 --> 00:06:00,319
it the security

00:05:58,479 --> 00:06:02,639
how much cpu it should use how we know

00:06:00,319 --> 00:06:05,759
it's up we want to meet users and give

00:06:02,639 --> 00:06:06,880
them the we want to give them access to

00:06:05,759 --> 00:06:08,479
the information that they want to

00:06:06,880 --> 00:06:10,560
provide to the system they should not

00:06:08,479 --> 00:06:13,759
have to define everything

00:06:10,560 --> 00:06:15,680
but we also want it to be extensible and

00:06:13,759 --> 00:06:17,759
really this is actually probably one of

00:06:15,680 --> 00:06:19,919
the best parts about kubernetes

00:06:17,759 --> 00:06:21,680
what's in the core is in the core so we

00:06:19,919 --> 00:06:24,880
have pods and services

00:06:21,680 --> 00:06:26,639
and ingress and rbac and web hooks

00:06:24,880 --> 00:06:28,560
and that's great we need all these

00:06:26,639 --> 00:06:31,440
things to be able to run our system

00:06:28,560 --> 00:06:33,120
but there's things that we don't want

00:06:31,440 --> 00:06:34,960
inside of kubernetes so

00:06:33,120 --> 00:06:36,720
a good example would be this concept of

00:06:34,960 --> 00:06:39,360
operators how can i

00:06:36,720 --> 00:06:40,639
describe what a human operator would do

00:06:39,360 --> 00:06:42,960
in an automated way

00:06:40,639 --> 00:06:45,360
i want to be able to extend kubernetes

00:06:42,960 --> 00:06:47,919
to know something about a postgres

00:06:45,360 --> 00:06:49,360
cluster and i don't want the core of

00:06:47,919 --> 00:06:52,160
kubernetes to know about that

00:06:49,360 --> 00:06:53,120
kubernetes provides that today and the

00:06:52,160 --> 00:06:55,120
next item is

00:06:53,120 --> 00:06:56,400
just really a gimme here um we want to

00:06:55,120 --> 00:06:59,039
be able to automate

00:06:56,400 --> 00:07:00,479
we when we throw humans in in the mix

00:06:59,039 --> 00:07:02,160
you know things are never going to

00:07:00,479 --> 00:07:03,599
happen the same way that's just you know

00:07:02,160 --> 00:07:06,639
how quirky as humans are

00:07:03,599 --> 00:07:10,080
we need us but we are not very rigid

00:07:06,639 --> 00:07:12,319
and very regiment very very regimented

00:07:10,080 --> 00:07:14,160
so we want to be able to automate and

00:07:12,319 --> 00:07:14,880
with kubernetes there's multiple ways we

00:07:14,160 --> 00:07:17,280
can

00:07:14,880 --> 00:07:19,280
pretty much automate the the building of

00:07:17,280 --> 00:07:21,440
clusters we can automate the management

00:07:19,280 --> 00:07:23,360
of workloads inside of clusters

00:07:21,440 --> 00:07:25,680
and finally here we want to be

00:07:23,360 --> 00:07:26,240
continuously advancing the state of the

00:07:25,680 --> 00:07:29,680
art

00:07:26,240 --> 00:07:33,280
what is is what is in 2020 will not be

00:07:29,680 --> 00:07:35,360
state of the art in 2022 or even 2021

00:07:33,280 --> 00:07:36,960
we want the project to be able to grow

00:07:35,360 --> 00:07:38,880
along with what the community

00:07:36,960 --> 00:07:40,560
and the and the companies who are in the

00:07:38,880 --> 00:07:43,840
ecosystem want

00:07:40,560 --> 00:07:45,360
so why kubernetes well i'm going to

00:07:43,840 --> 00:07:48,800
throw out a couple facts here

00:07:45,360 --> 00:07:50,800
um in 2019 85 percent

00:07:48,800 --> 00:07:52,479
of the cncf survey are running

00:07:50,800 --> 00:07:55,680
containers in production

00:07:52,479 --> 00:07:58,160
that's a pretty striking fact

00:07:55,680 --> 00:07:59,919
most companies who reply to the survey

00:07:58,160 --> 00:08:03,039
at least are running kubernetes

00:07:59,919 --> 00:08:04,400
or containers in production we need a

00:08:03,039 --> 00:08:06,479
system that can help manage those

00:08:04,400 --> 00:08:08,800
containers

00:08:06,479 --> 00:08:09,520
over 50 of the respondents to this

00:08:08,800 --> 00:08:12,960
survey

00:08:09,520 --> 00:08:15,120
are running over 250

00:08:12,960 --> 00:08:16,400
containers in production now that's an

00:08:15,120 --> 00:08:19,680
interesting bit

00:08:16,400 --> 00:08:22,720
um it could be 250 or it could be or

00:08:19,680 --> 00:08:25,599
it could be 250 or it could be 2

00:08:22,720 --> 00:08:26,160
500 or even more we want a platform that

00:08:25,599 --> 00:08:28,720
i can

00:08:26,160 --> 00:08:30,160
actually handle that scale so that's why

00:08:28,720 --> 00:08:32,800
we want kubernetes

00:08:30,160 --> 00:08:33,599
um the next item here let me i just

00:08:32,800 --> 00:08:36,800
missed one

00:08:33,599 --> 00:08:37,839
is uh another reason for um why

00:08:36,800 --> 00:08:39,680
kubernetes

00:08:37,839 --> 00:08:41,279
is this when you're thinking about

00:08:39,680 --> 00:08:42,560
moving to kubernetes you're not alone

00:08:41,279 --> 00:08:44,240
wherever you're going to be running

00:08:42,560 --> 00:08:45,600
there is going to be a kubernetes for

00:08:44,240 --> 00:08:47,519
you now now

00:08:45,600 --> 00:08:49,440
if you're running in the public cloud

00:08:47,519 --> 00:08:52,560
you know amazon microsoft

00:08:49,440 --> 00:08:53,440
um and and google they have an answer

00:08:52,560 --> 00:08:57,360
for you

00:08:53,440 --> 00:08:59,920
i work for vmware our flagship products

00:08:57,360 --> 00:09:01,760
are supporting kubernetes i know ibm is

00:08:59,920 --> 00:09:03,680
doing this and oracle is doing this

00:09:01,760 --> 00:09:05,279
and then there's upstarts like rancher

00:09:03,680 --> 00:09:08,000
who are providing kubernetes

00:09:05,279 --> 00:09:09,600
distributions that run on raspberry pi's

00:09:08,000 --> 00:09:12,320
wherever you want to be right now

00:09:09,600 --> 00:09:16,720
there's going to be a kubernetes for you

00:09:12,320 --> 00:09:19,360
so why is kubernetes interesting to

00:09:16,720 --> 00:09:20,959
the cloud foundry community well that's

00:09:19,360 --> 00:09:22,000
actually you know it might be kind of a

00:09:20,959 --> 00:09:24,000
tenuous subject but

00:09:22,000 --> 00:09:26,320
let me just throw in some opinions here

00:09:24,000 --> 00:09:28,959
and notice these are only opinions

00:09:26,320 --> 00:09:30,720
i come at this talk as a person who

00:09:28,959 --> 00:09:32,399
understands the kubernetes community

00:09:30,720 --> 00:09:34,000
and understands where i think cloud

00:09:32,399 --> 00:09:36,399
foundry is kind of trying to go

00:09:34,000 --> 00:09:37,519
i do not come at this as a cloud foundry

00:09:36,399 --> 00:09:41,279
expert

00:09:37,519 --> 00:09:44,240
now the first item here is um

00:09:41,279 --> 00:09:44,959
kubernetes gives cloud foundry the

00:09:44,240 --> 00:09:46,880
chance

00:09:44,959 --> 00:09:48,640
to stand on the shoulders of giants now

00:09:46,880 --> 00:09:50,080
what does that mean well really what it

00:09:48,640 --> 00:09:50,880
means is that there is problems that

00:09:50,080 --> 00:09:54,160
have been solved

00:09:50,880 --> 00:09:55,600
in computing and why does cloud foundry

00:09:54,160 --> 00:09:57,839
need to solve those would

00:09:55,600 --> 00:09:59,279
would the efforts better be spent on

00:09:57,839 --> 00:10:03,040
making the platform better

00:09:59,279 --> 00:10:05,279
i don't know but at least if you if um

00:10:03,040 --> 00:10:06,640
when cloud foundry is running on

00:10:05,279 --> 00:10:08,160
kubernetes as if

00:10:06,640 --> 00:10:10,399
you know the cloud foundry for

00:10:08,160 --> 00:10:11,360
kubernetes project we get to actually

00:10:10,399 --> 00:10:13,360
take advantage

00:10:11,360 --> 00:10:14,800
of all the benefits that go into

00:10:13,360 --> 00:10:16,800
kubernetes

00:10:14,800 --> 00:10:18,720
and with that we get to focus on a

00:10:16,800 --> 00:10:20,640
better pass like i said

00:10:18,720 --> 00:10:21,839
i am not a cloud foundry expert but i

00:10:20,640 --> 00:10:25,040
know how it runs

00:10:21,839 --> 00:10:27,040
so here's here's an idea what this is a

00:10:25,040 --> 00:10:29,279
great chance for us to take some of the

00:10:27,040 --> 00:10:31,200
logic that runs in the cf binary

00:10:29,279 --> 00:10:34,079
and push it right to a service that's

00:10:31,200 --> 00:10:37,600
running into cloud foundry

00:10:34,079 --> 00:10:40,320
um so next

00:10:37,600 --> 00:10:41,760
um where are we where are we with

00:10:40,320 --> 00:10:43,600
kubernetes right now and i only have a

00:10:41,760 --> 00:10:45,279
couple things this is not like a kubecon

00:10:43,600 --> 00:10:47,920
keynote where i'll go super deep

00:10:45,279 --> 00:10:49,279
into what kubernetes has right now but i

00:10:47,920 --> 00:10:50,079
will highlight some things that are

00:10:49,279 --> 00:10:52,880
coming up

00:10:50,079 --> 00:10:54,720
that are that are very interesting one

00:10:52,880 --> 00:10:56,959
the kubernetes support window has been

00:10:54,720 --> 00:10:57,760
increased from i think two revisions to

00:10:56,959 --> 00:10:59,920
12 months

00:10:57,760 --> 00:11:01,839
what does this mean for companies well

00:10:59,920 --> 00:11:04,640
what this means is that now

00:11:01,839 --> 00:11:06,079
you don't need to feel as rushed to move

00:11:04,640 --> 00:11:08,560
at the pace of kubernetes

00:11:06,079 --> 00:11:09,760
kubernetes is a big project doesn't move

00:11:08,560 --> 00:11:10,959
very fast but there are multiple

00:11:09,760 --> 00:11:13,040
releases a year

00:11:10,959 --> 00:11:15,360
and now that you know that if you get on

00:11:13,040 --> 00:11:16,160
a version let's say when 1.20 comes out

00:11:15,360 --> 00:11:17,920
a little bit

00:11:16,160 --> 00:11:19,600
that that version will be supported with

00:11:17,920 --> 00:11:23,920
security updates and

00:11:19,600 --> 00:11:26,000
patches for at least 12 months

00:11:23,920 --> 00:11:27,440
so what's coming in kubernetes in the

00:11:26,000 --> 00:11:30,240
next

00:11:27,440 --> 00:11:30,800
release that's coming out with 1.20 well

00:11:30,240 --> 00:11:32,240
there's three

00:11:30,800 --> 00:11:33,839
there's actually a long list of items

00:11:32,240 --> 00:11:35,600
that's here on the right but what i

00:11:33,839 --> 00:11:36,160
wanted to share was three that i thought

00:11:35,600 --> 00:11:38,800
were

00:11:36,160 --> 00:11:40,399
um pretty exciting the number the first

00:11:38,800 --> 00:11:42,480
one is that

00:11:40,399 --> 00:11:43,760
whenever you query the kubernetes api

00:11:42,480 --> 00:11:45,120
you'll be able to actually set a

00:11:43,760 --> 00:11:47,440
priority for the request

00:11:45,120 --> 00:11:49,920
so you can say that if i'm changing uh

00:11:47,440 --> 00:11:52,160
my rbac entries that they will have a

00:11:49,920 --> 00:11:53,440
prior higher priority than whenever i'm

00:11:52,160 --> 00:11:56,320
submitting new workloads

00:11:53,440 --> 00:11:57,600
this might help if we are trying to make

00:11:56,320 --> 00:11:59,760
changes to the cluster

00:11:57,600 --> 00:12:01,680
if it if there's a lot of traffic

00:11:59,760 --> 00:12:02,320
another item here is more control over

00:12:01,680 --> 00:12:04,160
scheduling

00:12:02,320 --> 00:12:06,079
i'm running in the cloud clouds have

00:12:04,160 --> 00:12:08,399
regions and they have availability zones

00:12:06,079 --> 00:12:10,160
i would like to have more control over

00:12:08,399 --> 00:12:12,000
what runs where

00:12:10,160 --> 00:12:13,680
and then my favorite new thing is this

00:12:12,000 --> 00:12:16,800
command cube control

00:12:13,680 --> 00:12:18,720
apple out alpha debug

00:12:16,800 --> 00:12:20,079
and what this does is it means that we

00:12:18,720 --> 00:12:22,560
don't have to compile

00:12:20,079 --> 00:12:24,240
shells into our containers anymore we

00:12:22,560 --> 00:12:26,639
can just attack one on

00:12:24,240 --> 00:12:28,399
whenever we need to at run time so i can

00:12:26,639 --> 00:12:28,959
have a born shell or whatever kind of

00:12:28,399 --> 00:12:30,639
shell

00:12:28,959 --> 00:12:33,200
and i don't need to actually have a

00:12:30,639 --> 00:12:35,360
shell to maybe debug my containers in

00:12:33,200 --> 00:12:37,680
production

00:12:35,360 --> 00:12:39,360
so what's interesting right now in

00:12:37,680 --> 00:12:41,120
kubernetes and once again

00:12:39,360 --> 00:12:43,200
there's not a lot of time so i'm going

00:12:41,120 --> 00:12:44,720
to go through this pretty quickly

00:12:43,200 --> 00:12:47,279
so the first thing i want to bring up is

00:12:44,720 --> 00:12:50,079
this concept of hierarchical namespaces

00:12:47,279 --> 00:12:50,880
and what this means is that right now

00:12:50,079 --> 00:12:52,480
you can run

00:12:50,880 --> 00:12:54,079
we have three name spaces with three

00:12:52,480 --> 00:12:56,639
workloads in it if

00:12:54,079 --> 00:12:58,480
um service one wants to introduce a new

00:12:56,639 --> 00:12:59,040
our team a wants to introduce a new

00:12:58,480 --> 00:13:01,440
service

00:12:59,040 --> 00:13:03,360
we can create a service to team a but we

00:13:01,440 --> 00:13:06,720
can't apply a policy to all of them

00:13:03,360 --> 00:13:07,600
with hierarchical namespaces what we can

00:13:06,720 --> 00:13:10,639
now do

00:13:07,600 --> 00:13:13,600
is we can create a team a namespace

00:13:10,639 --> 00:13:14,000
and nest service one team a inside of

00:13:13,600 --> 00:13:16,480
there

00:13:14,000 --> 00:13:18,560
the neat part about this is that we can

00:13:16,480 --> 00:13:21,200
put policies the team a layer

00:13:18,560 --> 00:13:22,160
and you don't need to assign cluster

00:13:21,200 --> 00:13:24,000
permissions or

00:13:22,160 --> 00:13:25,760
cluster level permissions so you can

00:13:24,000 --> 00:13:27,680
create namespaces which means

00:13:25,760 --> 00:13:29,839
teams can actually have more flexibility

00:13:27,680 --> 00:13:31,760
to do what they need

00:13:29,839 --> 00:13:34,079
the next item that we have is cluster

00:13:31,760 --> 00:13:35,839
api and this is not a new project

00:13:34,079 --> 00:13:37,200
but i like to highlight it as a one of

00:13:35,839 --> 00:13:39,440
the wins of kubernetes

00:13:37,200 --> 00:13:41,279
what cluster api allows you to do is

00:13:39,440 --> 00:13:42,399
inside of a kubernetes cluster let's say

00:13:41,279 --> 00:13:44,560
a management cluster

00:13:42,399 --> 00:13:46,959
you can define another cluster if you're

00:13:44,560 --> 00:13:49,120
running on vsphere or

00:13:46,959 --> 00:13:50,880
and google cloud what you can do is to

00:13:49,120 --> 00:13:52,560
find another cluster inside of your

00:13:50,880 --> 00:13:53,920
cluster so you can create these concept

00:13:52,560 --> 00:13:55,760
of guest clusters

00:13:53,920 --> 00:13:57,600
and these guest clusters can run their

00:13:55,760 --> 00:13:58,639
own workloads which means that we can

00:13:57,600 --> 00:14:00,800
actually describe our whole

00:13:58,639 --> 00:14:03,199
infrastructure with code

00:14:00,800 --> 00:14:04,560
and this final project this new cube

00:14:03,199 --> 00:14:06,000
edge project i think they just had

00:14:04,560 --> 00:14:08,399
version 1.4

00:14:06,000 --> 00:14:09,199
is a system for controlling edge

00:14:08,399 --> 00:14:11,120
deployments

00:14:09,199 --> 00:14:12,480
with kubernetes this is pretty exciting

00:14:11,120 --> 00:14:15,680
stuff

00:14:12,480 --> 00:14:18,079
so where is kubernetes going well

00:14:15,680 --> 00:14:19,760
there's a couple of things here one of

00:14:18,079 --> 00:14:20,880
the big things we're focusing on the

00:14:19,760 --> 00:14:22,720
extensions

00:14:20,880 --> 00:14:24,959
see our days are the way of the future

00:14:22,720 --> 00:14:26,079
we are not going to put a lot of things

00:14:24,959 --> 00:14:28,079
in core and we're going to let the

00:14:26,079 --> 00:14:30,240
ecosystem decide what the best patterns

00:14:28,079 --> 00:14:31,519
are this is a great way to go the next

00:14:30,240 --> 00:14:32,720
thing we're going to do is think about

00:14:31,519 --> 00:14:34,800
conformance

00:14:32,720 --> 00:14:36,480
kubernetes is getting bigger and what

00:14:34,800 --> 00:14:38,880
what can be considered kubernetes

00:14:36,480 --> 00:14:40,639
is changing every single day so let's

00:14:38,880 --> 00:14:41,600
have a better conformance suite where we

00:14:40,639 --> 00:14:44,320
can actually say

00:14:41,600 --> 00:14:45,680
what is and what is not kubernetes and

00:14:44,320 --> 00:14:47,279
the next thing is that

00:14:45,680 --> 00:14:49,440
documentation documentation

00:14:47,279 --> 00:14:51,279
documentation writing things down

00:14:49,440 --> 00:14:52,480
earlier getting more people involved

00:14:51,279 --> 00:14:54,320
earlier when we're designing new

00:14:52,480 --> 00:14:55,279
features for kubernetes this is super

00:14:54,320 --> 00:14:59,040
important

00:14:55,279 --> 00:15:01,920
so coming to the end um

00:14:59,040 --> 00:15:03,680
of this section at least um what's the

00:15:01,920 --> 00:15:05,839
last thing that we need to do

00:15:03,680 --> 00:15:07,680
kubernetes is a huge organization run

00:15:05,839 --> 00:15:10,320
across a lot of companies

00:15:07,680 --> 00:15:10,800
and so one thing that needs to happen is

00:15:10,320 --> 00:15:14,240
how

00:15:10,800 --> 00:15:17,600
do we grow the community and increase

00:15:14,240 --> 00:15:19,440
things like production readiness by

00:15:17,600 --> 00:15:21,360
not breaking anything that we have now

00:15:19,440 --> 00:15:24,639
how can we remove bottlenecks

00:15:21,360 --> 00:15:25,279
how can we make the tool better without

00:15:24,639 --> 00:15:28,720
increasing

00:15:25,279 --> 00:15:29,519
its complexity um so that brings us to

00:15:28,720 --> 00:15:31,199
the end

00:15:29,519 --> 00:15:32,800
and really i just want to leave with a

00:15:31,199 --> 00:15:35,839
couple of items here

00:15:32,800 --> 00:15:36,800
um so kubernetes is not the goal it's

00:15:35,839 --> 00:15:39,519
part of the journey

00:15:36,800 --> 00:15:40,240
it's a platform for creating uh the

00:15:39,519 --> 00:15:42,160
kubernetes

00:15:40,240 --> 00:15:43,920
core is coming becoming more boring

00:15:42,160 --> 00:15:44,480
that's great we want it to be more

00:15:43,920 --> 00:15:46,959
boring

00:15:44,480 --> 00:15:47,759
because the ecosystem around kubernetes

00:15:46,959 --> 00:15:50,320
is heating up

00:15:47,759 --> 00:15:51,360
and that's where the action is so before

00:15:50,320 --> 00:15:53,920
whenever i was

00:15:51,360 --> 00:15:54,880
showing you cube edge and in

00:15:53,920 --> 00:15:57,519
hierarchical

00:15:54,880 --> 00:15:58,800
hierarchical name spaces and cluster api

00:15:57,519 --> 00:16:00,399
none of that's in the core

00:15:58,800 --> 00:16:02,160
you don't need it in the core it's the

00:16:00,399 --> 00:16:04,160
kubernetes ecosystem which is

00:16:02,160 --> 00:16:06,240
heating up and that's where we should be

00:16:04,160 --> 00:16:08,600
so thank you i hope you enjoyed the rest

00:16:06,240 --> 00:16:11,600
of the conference and thank you for

00:16:08,600 --> 00:16:11,600

YouTube URL: https://www.youtube.com/watch?v=gqLIJ5bWyLI


