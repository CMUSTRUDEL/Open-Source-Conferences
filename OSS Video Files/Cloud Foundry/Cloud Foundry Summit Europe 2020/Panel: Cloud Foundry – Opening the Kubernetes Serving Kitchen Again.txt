Title: Panel: Cloud Foundry â€“ Opening the Kubernetes Serving Kitchen Again
Publication date: 2020-10-26
Playlist: Cloud Foundry Summit Europe 2020
Description: 
	Panel: Cloud Foundry â€“ Opening the Kubernetes Serving Kitchen Again - Bernd Krannich, SAP SE; Dieu Cao, VMware; Simon Moser, IBM; Jeff Hobbs, SUSE; Daniel Jones, EngineerBetter

The re-platforming of Cloud Foundry onto Kubernetes has resulted in many tangible results: There are two distributions of a Kubernetes-based Cloud Foundry with kubecf and cf-for-k8s. There are projects like Cloud Native Buildpacks and kpack that bring benefits from the Cloud Foundry ecosystem to the broader Kubernetes community. In this panel discussion â€“ almost a traditional event at Cloud Foundry Summits â€“ representatives of major companies contributing to the Cloud Foundry ecosystem review the status quo but even more importantly the steps ahead of Cloud Foundry's journey towards Kubernetes from both the perspective of people developing and operating the platform as well as end-users of the platform.
Captions: 
	00:00:00,160 --> 00:00:04,400
hello everybody and thank you very much

00:00:02,080 --> 00:00:06,960
for joining us uh you have joined

00:00:04,400 --> 00:00:08,240
the cloud foundry opening the kubernetes

00:00:06,960 --> 00:00:10,800
serving kitchen again

00:00:08,240 --> 00:00:12,000
panel part of a time on a tradition

00:00:10,800 --> 00:00:13,360
where we get folks from around the

00:00:12,000 --> 00:00:15,280
community to talk about

00:00:13,360 --> 00:00:16,400
how cloud foundry and kubernetes are

00:00:15,280 --> 00:00:19,199
working together

00:00:16,400 --> 00:00:21,279
we're recording this on the it's not the

00:00:19,199 --> 00:00:21,680
9th visit it's the 6th of october i

00:00:21,279 --> 00:00:23,920
think

00:00:21,680 --> 00:00:25,519
so a couple of weeks before this will go

00:00:23,920 --> 00:00:27,199
out so hopefully there'll be even more

00:00:25,519 --> 00:00:28,480
features added into the respective

00:00:27,199 --> 00:00:30,160
projects by the time that you're

00:00:28,480 --> 00:00:33,200
listening to this

00:00:30,160 --> 00:00:34,079
so with me we have uh yui cow from

00:00:33,200 --> 00:00:36,719
vmware

00:00:34,079 --> 00:00:38,320
um if we go around and maybe everybody

00:00:36,719 --> 00:00:40,160
can say a little bit about what you do

00:00:38,320 --> 00:00:41,200
with cloud foundry and kubernetes at

00:00:40,160 --> 00:00:44,399
your uh

00:00:41,200 --> 00:00:47,520
particular organizations so yui

00:00:44,399 --> 00:00:52,320
sure hi i'm huey cao

00:00:47,520 --> 00:00:55,120
i'm the cf uh cff pmc council chair

00:00:52,320 --> 00:00:57,120
um and uh the cf open source project

00:00:55,120 --> 00:00:59,920
lead at vmware i've been working on

00:00:57,120 --> 00:01:01,760
cloud foundry since 2014.

00:00:59,920 --> 00:01:04,559
cool thank you very much and we have

00:01:01,760 --> 00:01:07,200
jeff hobbs from susa

00:01:04,559 --> 00:01:08,159
hi all um jeff hobbs i'm director of

00:01:07,200 --> 00:01:10,880
engineering

00:01:08,159 --> 00:01:12,400
uh at souza uh responsible for a cloud

00:01:10,880 --> 00:01:16,560
application platform

00:01:12,400 --> 00:01:17,439
which is the uh product version of cloud

00:01:16,560 --> 00:01:19,920
foundry

00:01:17,439 --> 00:01:22,640
and have been involved in the in the

00:01:19,920 --> 00:01:24,159
ecosystem since 2011.

00:01:22,640 --> 00:01:25,840
thank you very much chef and next we

00:01:24,159 --> 00:01:29,920
have burnt chronic

00:01:25,840 --> 00:01:32,240
from sap i am van carne

00:01:29,920 --> 00:01:34,880
working for sap right i'm a technical

00:01:32,240 --> 00:01:36,960
lead there uh in sap cloud platform

00:01:34,880 --> 00:01:38,159
looking into topics around cloud foundry

00:01:36,960 --> 00:01:40,880
and kubernetes and

00:01:38,159 --> 00:01:43,200
uh working in the cloud foundry open

00:01:40,880 --> 00:01:43,920
source ecosystem for the last couple of

00:01:43,200 --> 00:01:46,880
years

00:01:43,920 --> 00:01:50,320
so just recently i also joined the cloud

00:01:46,880 --> 00:01:54,079
foundry foundation board of directors

00:01:50,320 --> 00:01:54,560
and we have simon moser from ibm hey

00:01:54,079 --> 00:01:58,240
y'all

00:01:54,560 --> 00:02:00,640
my name is simon i am the

00:01:58,240 --> 00:02:01,600
lead architect for the ibm cloud foundry

00:02:00,640 --> 00:02:04,799
service

00:02:01,600 --> 00:02:08,560
and the ibm cloud and

00:02:04,799 --> 00:02:10,399
i have been in with the community and

00:02:08,560 --> 00:02:14,720
particularly also this group of people

00:02:10,399 --> 00:02:17,040
for since 2015 i believe

00:02:14,720 --> 00:02:18,160
cool good stuff and then last and most

00:02:17,040 --> 00:02:20,480
certainly least

00:02:18,160 --> 00:02:22,480
we have uh me i'm daniel jones i'm the

00:02:20,480 --> 00:02:25,040
ceo of engineer better

00:02:22,480 --> 00:02:26,800
and we're a consultancy we don't do so

00:02:25,040 --> 00:02:27,440
much work on the actual products we just

00:02:26,800 --> 00:02:31,440
try and help

00:02:27,440 --> 00:02:33,840
people use them so it's

00:02:31,440 --> 00:02:35,760
exciting times in the world of cloud

00:02:33,840 --> 00:02:39,200
foundry and kubernetes coming together

00:02:35,760 --> 00:02:41,599
we've had cube cf out and about

00:02:39,200 --> 00:02:42,480
being used for some time and cf for

00:02:41,599 --> 00:02:45,760
cates

00:02:42,480 --> 00:02:48,239
being spearheaded by mostly vmware and

00:02:45,760 --> 00:02:51,200
other folks are contributing as well

00:02:48,239 --> 00:02:51,760
which looking at the project tracker on

00:02:51,200 --> 00:02:54,879
github

00:02:51,760 --> 00:02:57,200
is aiming for a ga uh

00:02:54,879 --> 00:02:58,879
release around about october the 21st

00:02:57,200 --> 00:03:02,000
which just so happens to be

00:02:58,879 --> 00:03:05,840
um roughly when this is going to go live

00:03:02,000 --> 00:03:09,200
so uh i i will nitpick and and say

00:03:05,840 --> 00:03:12,720
it's a 1.0 and and not a ga release

00:03:09,200 --> 00:03:15,920
um but the aim is is to to

00:03:12,720 --> 00:03:18,800
uh get december um

00:03:15,920 --> 00:03:19,840
uh try attempt somewhere with cf for

00:03:18,800 --> 00:03:22,720
kate's and

00:03:19,840 --> 00:03:23,519
1.0 being being a large milestone but

00:03:22,720 --> 00:03:25,840
but ga

00:03:23,519 --> 00:03:27,519
is kind of a silly term in terms of open

00:03:25,840 --> 00:03:29,280
source

00:03:27,519 --> 00:03:30,640
there's um have you heard of romantic

00:03:29,280 --> 00:03:33,519
versioning

00:03:30,640 --> 00:03:34,959
where uh you reserve the the major part

00:03:33,519 --> 00:03:36,400
of the release component is for things

00:03:34,959 --> 00:03:39,920
that you really care about or you think

00:03:36,400 --> 00:03:39,920
are really important or marketable

00:03:40,720 --> 00:03:46,640
cool um so yes that that looks like it's

00:03:43,840 --> 00:03:48,959
getting to a point of

00:03:46,640 --> 00:03:50,720
public consumption shall we say and is

00:03:48,959 --> 00:03:51,440
there anywhere that you folks are aware

00:03:50,720 --> 00:03:55,280
of where

00:03:51,440 --> 00:03:56,959
the different uh functionalities from

00:03:55,280 --> 00:03:59,200
regular cf as we know it deployed in

00:03:56,959 --> 00:04:00,319
bosch cube cf and cf for kates is there

00:03:59,200 --> 00:04:02,239
a matrix anywhere

00:04:00,319 --> 00:04:05,040
of like what features are available in

00:04:02,239 --> 00:04:05,040
which platform

00:04:05,280 --> 00:04:08,799
gee isn't that a really good idea

00:04:09,599 --> 00:04:15,680
uh i'm not aware of one

00:04:13,280 --> 00:04:17,040
that is a really good idea though i will

00:04:15,680 --> 00:04:20,639
mark that down

00:04:17,040 --> 00:04:23,759
uh it's it's

00:04:20,639 --> 00:04:27,600
um it'd be kind of long you know the

00:04:23,759 --> 00:04:31,280
the cf api being quite extensive

00:04:27,600 --> 00:04:33,840
and then there's the cf from the

00:04:31,280 --> 00:04:35,040
user point of view from the operator

00:04:33,840 --> 00:04:37,600
point of view

00:04:35,040 --> 00:04:39,199
it is it's largely changed from the

00:04:37,600 --> 00:04:40,720
operator point of view

00:04:39,199 --> 00:04:42,400
less so from the user point of view but

00:04:40,720 --> 00:04:43,280
there are things you could cross off

00:04:42,400 --> 00:04:45,759
there

00:04:43,280 --> 00:04:48,400
uh so unfortunately no uh not aware of

00:04:45,759 --> 00:04:48,400
any at the moment

00:04:49,040 --> 00:04:52,240
and from the uh from the vmware

00:04:51,360 --> 00:04:54,960
perspective and

00:04:52,240 --> 00:04:57,280
for uh cfocates is there any publicly

00:04:54,960 --> 00:04:58,560
available tracker for

00:04:57,280 --> 00:04:59,759
having a look at the github project

00:04:58,560 --> 00:05:01,199
which i recommend that everybody

00:04:59,759 --> 00:05:04,320
watching goes and has a look at

00:05:01,199 --> 00:05:06,960
there are some uh stories tagged with uh

00:05:04,320 --> 00:05:07,680
feature parity presumably those are kind

00:05:06,960 --> 00:05:09,440
of how

00:05:07,680 --> 00:05:11,520
folks are expected to keep track of

00:05:09,440 --> 00:05:13,840
what's available in cfacades

00:05:11,520 --> 00:05:16,400
now is there any uh better source of

00:05:13,840 --> 00:05:19,440
information than that for cfacades

00:05:16,400 --> 00:05:22,800
i don't i don't know if we have a

00:05:19,440 --> 00:05:25,600
you know a table with like

00:05:22,800 --> 00:05:26,000
check marks and and not check marks and

00:05:25,600 --> 00:05:27,600
then

00:05:26,000 --> 00:05:30,560
okay and then these check marks are

00:05:27,600 --> 00:05:32,320
actually deferred to kubernetes

00:05:30,560 --> 00:05:33,680
where where actually this is a

00:05:32,320 --> 00:05:36,320
kubernetes feature

00:05:33,680 --> 00:05:38,479
or actually this is an istio feature and

00:05:36,320 --> 00:05:39,919
now cloud foundry is just uh kind of a

00:05:38,479 --> 00:05:43,360
layer atop that

00:05:39,919 --> 00:05:43,680
um i do highly recommend checking out

00:05:43,360 --> 00:05:47,600
the

00:05:43,680 --> 00:05:50,479
cf for kate's github project

00:05:47,600 --> 00:05:52,320
which kind of tries to associate various

00:05:50,479 --> 00:05:54,639
features and milestones so people can

00:05:52,320 --> 00:05:56,720
comment and ask questions like hey

00:05:54,639 --> 00:05:58,000
you know uh this particular feature i

00:05:56,720 --> 00:06:00,319
care about um

00:05:58,000 --> 00:06:01,919
that was part of cloud foundry when is

00:06:00,319 --> 00:06:04,960
that going to be

00:06:01,919 --> 00:06:07,280
uh available in uh

00:06:04,960 --> 00:06:09,120
the cf for kate's line is that going to

00:06:07,280 --> 00:06:11,199
be available in cfr kate's line

00:06:09,120 --> 00:06:13,840
what i'd love is for people to say like

00:06:11,199 --> 00:06:16,080
how might i contribute that

00:06:13,840 --> 00:06:17,680
to cf for kate's if if that's not being

00:06:16,080 --> 00:06:21,199
worked on right now

00:06:17,680 --> 00:06:24,479
um but yeah that's that's one of

00:06:21,199 --> 00:06:26,000
um a point of engagement there is we're

00:06:24,479 --> 00:06:26,720
really hoping to be much more

00:06:26,000 --> 00:06:30,639
transparent

00:06:26,720 --> 00:06:33,360
about what is and isn't there um and

00:06:30,639 --> 00:06:35,919
you know how it's being thought about in

00:06:33,360 --> 00:06:38,800
terms of sequences

00:06:35,919 --> 00:06:39,840
yeah actually um we've kind of asked

00:06:38,800 --> 00:06:42,880
that very same

00:06:39,840 --> 00:06:44,000
question at sap daniel so like

00:06:42,880 --> 00:06:47,360
compatibility

00:06:44,000 --> 00:06:50,160
is near and dear to to our hearts or

00:06:47,360 --> 00:06:51,599
having quite a number of customers

00:06:50,160 --> 00:06:53,120
running on the bosch managed cloud

00:06:51,599 --> 00:06:55,599
foundry side of the house

00:06:53,120 --> 00:06:57,440
i think in a nutshell as yui said that

00:06:55,599 --> 00:06:59,520
there's no such overview but i think the

00:06:57,440 --> 00:07:00,400
the two big areas that we have

00:06:59,520 --> 00:07:04,000
identified

00:07:00,400 --> 00:07:06,400
is um the whole topic of route services

00:07:04,000 --> 00:07:08,560
which i think is uh quite a bit

00:07:06,400 --> 00:07:10,080
different in in cfo kate's and and the

00:07:08,560 --> 00:07:12,080
other topic that we

00:07:10,080 --> 00:07:13,919
i guess still need to to look into in in

00:07:12,080 --> 00:07:14,960
more detail is the whole topic of build

00:07:13,919 --> 00:07:18,479
text so

00:07:14,960 --> 00:07:20,400
um kind of existing uh build packs in in

00:07:18,479 --> 00:07:22,240
the bosch managed world versus

00:07:20,400 --> 00:07:24,319
cloud native build packs and also

00:07:22,240 --> 00:07:26,160
specifically custom build packs

00:07:24,319 --> 00:07:28,800
is i believe something on that that

00:07:26,160 --> 00:07:31,199
still needs some some more investigation

00:07:28,800 --> 00:07:35,599
and work

00:07:31,199 --> 00:07:37,520
yeah for me okay

00:07:35,599 --> 00:07:38,960
i was i was i was about to give you some

00:07:37,520 --> 00:07:42,000
credit jeff

00:07:38,960 --> 00:07:44,240
which is um so

00:07:42,000 --> 00:07:45,360
particularly there's in in coupe cf at

00:07:44,240 --> 00:07:47,039
least there was one

00:07:45,360 --> 00:07:49,120
user facing feature that was missing

00:07:47,039 --> 00:07:50,240
until literally like 10 days ago which

00:07:49,120 --> 00:07:51,599
was the container to contain a

00:07:50,240 --> 00:07:55,039
networking part

00:07:51,599 --> 00:07:55,840
um but that is uh working and i can say

00:07:55,039 --> 00:07:58,319
that at least

00:07:55,840 --> 00:07:59,440
we in ibm have successfully adopted that

00:07:58,319 --> 00:08:02,240
in the latest uh

00:07:59,440 --> 00:08:03,599
group cf cut and we have we are playing

00:08:02,240 --> 00:08:05,440
around with it and it's

00:08:03,599 --> 00:08:06,879
looking like it's working as we expected

00:08:05,440 --> 00:08:09,520
so i i think

00:08:06,879 --> 00:08:10,960
that at least to my understanding was

00:08:09,520 --> 00:08:14,000
the last

00:08:10,960 --> 00:08:16,240
or from all the features that we support

00:08:14,000 --> 00:08:17,919
from our point of view as a vendor i

00:08:16,240 --> 00:08:19,199
think that was the last big gap that

00:08:17,919 --> 00:08:21,199
that we had from a user-facing

00:08:19,199 --> 00:08:21,919
perspective so i think that's uh pretty

00:08:21,199 --> 00:08:25,360
awesome that

00:08:21,919 --> 00:08:28,240
that that feature gap is now closed

00:08:25,360 --> 00:08:30,080
yeah that was closed in the in the most

00:08:28,240 --> 00:08:33,200
recent cube cf release

00:08:30,080 --> 00:08:36,240
um and but i i you know because

00:08:33,200 --> 00:08:36,959
it's relevant here it was done for diego

00:08:36,240 --> 00:08:39,039
still

00:08:36,959 --> 00:08:40,560
uh and we still need the work to do the

00:08:39,039 --> 00:08:42,880
work for irene

00:08:40,560 --> 00:08:44,320
because it that work doesn't exist at

00:08:42,880 --> 00:08:47,360
all for irene which

00:08:44,320 --> 00:08:48,640
of course cfrcats is also based on and

00:08:47,360 --> 00:08:52,560
represents one of our

00:08:48,640 --> 00:08:56,560
bridges um over there and

00:08:52,560 --> 00:08:58,480
so there's a lot around irene that as we

00:08:56,560 --> 00:08:59,760
try and push you know we're working with

00:08:58,480 --> 00:09:03,600
others to try and push

00:08:59,760 --> 00:09:05,440
irene into that production status um

00:09:03,600 --> 00:09:08,000
getting it to production will still mean

00:09:05,440 --> 00:09:10,800
it's not necessarily a feature parody

00:09:08,000 --> 00:09:11,760
in production but more from a stability

00:09:10,800 --> 00:09:16,399
of

00:09:11,760 --> 00:09:19,120
the core uh functionality

00:09:16,399 --> 00:09:20,640
uh yeah and that that's a good that's a

00:09:19,120 --> 00:09:23,519
very good clarification

00:09:20,640 --> 00:09:24,160
so um when i was talking about about

00:09:23,519 --> 00:09:26,800
that i was

00:09:24,160 --> 00:09:29,600
also talking about diego because um as a

00:09:26,800 --> 00:09:32,560
as a backdrop um i'm coming from the

00:09:29,600 --> 00:09:33,200
how can i you know migrate over a bosch

00:09:32,560 --> 00:09:36,080
environment

00:09:33,200 --> 00:09:36,880
onto something like a coupe cf and

00:09:36,080 --> 00:09:38,240
therefore

00:09:36,880 --> 00:09:40,000
doing a migration from bosch to

00:09:38,240 --> 00:09:42,320
kubernetes and doing a migration from

00:09:40,000 --> 00:09:46,080
diego to irene at the same time

00:09:42,320 --> 00:09:48,399
seems a bit challenging yeah

00:09:46,080 --> 00:09:50,240
it's worth calling out also though you

00:09:48,399 --> 00:09:52,880
know if if what you're looking for

00:09:50,240 --> 00:09:54,160
is a developer experience a top

00:09:52,880 --> 00:09:57,440
kubernetes

00:09:54,160 --> 00:09:59,519
um you know and and you're not

00:09:57,440 --> 00:10:01,600
necessarily requiring to migrate from

00:09:59,519 --> 00:10:04,079
your existing cloud foundry

00:10:01,600 --> 00:10:04,880
um you can get really far with cf

00:10:04,079 --> 00:10:06,959
arcades

00:10:04,880 --> 00:10:08,640
being able to push your app get source

00:10:06,959 --> 00:10:11,200
code to running

00:10:08,640 --> 00:10:14,000
um there are some things that are have

00:10:11,200 --> 00:10:17,279
been made easier

00:10:14,000 --> 00:10:18,480
by by what we've achieved in terms of

00:10:17,279 --> 00:10:22,320
integration so

00:10:18,480 --> 00:10:23,839
right now um all the communication paths

00:10:22,320 --> 00:10:26,320
between all the components and

00:10:23,839 --> 00:10:27,440
application communication that's

00:10:26,320 --> 00:10:29,839
encrypted throughout

00:10:27,440 --> 00:10:31,680
with uh cf for kate's which is something

00:10:29,839 --> 00:10:33,760
we've been chipping away at for a long

00:10:31,680 --> 00:10:35,210
time

00:10:33,760 --> 00:10:36,959
for the vm's

00:10:35,210 --> 00:10:39,519
[Music]

00:10:36,959 --> 00:10:40,480
kind of original flavor cloud foundry

00:10:39,519 --> 00:10:42,720
and

00:10:40,480 --> 00:10:44,000
aren't quite there yet it's still

00:10:42,720 --> 00:10:47,040
possible

00:10:44,000 --> 00:10:48,640
but it it's just so much easier um

00:10:47,040 --> 00:10:50,640
now that we can take advantage of some

00:10:48,640 --> 00:10:54,399
of the abstractions and

00:10:50,640 --> 00:10:57,920
um uh other things uh just by everything

00:10:54,399 --> 00:10:59,920
being on on kubernetes

00:10:57,920 --> 00:11:02,000
it's probably worth uh taking a step

00:10:59,920 --> 00:11:03,920
back for anyone that somehow managed to

00:11:02,000 --> 00:11:06,079
miss the last one of these panels so

00:11:03,920 --> 00:11:07,760
clearly missing out the philosophical

00:11:06,079 --> 00:11:08,240
differences and differences in approach

00:11:07,760 --> 00:11:11,920
between

00:11:08,240 --> 00:11:13,440
cfocate and qcf so could you go

00:11:11,920 --> 00:11:14,880
through roughly what what are the high

00:11:13,440 --> 00:11:18,720
level differences in the approach

00:11:14,880 --> 00:11:18,720
between the the two projects

00:11:19,519 --> 00:11:26,880
i uh so for for cube cf it's

00:11:23,519 --> 00:11:30,320
the third

00:11:26,880 --> 00:11:32,320
fourth generation of uh

00:11:30,320 --> 00:11:34,000
of the attempt to get cloud foundry sort

00:11:32,320 --> 00:11:37,600
of as is

00:11:34,000 --> 00:11:40,399
moving from a vm based ecosystem

00:11:37,600 --> 00:11:41,279
to well first it was to containerized

00:11:40,399 --> 00:11:44,399
then it was to

00:11:41,279 --> 00:11:46,320
you know sort of cubified uh and i think

00:11:44,399 --> 00:11:47,920
you'd look at cf4k it's just like the

00:11:46,320 --> 00:11:50,480
next generation of that

00:11:47,920 --> 00:11:52,959
though small philosophical differences

00:11:50,480 --> 00:11:56,000
in cube cf we're really taking

00:11:52,959 --> 00:12:00,000
bosch manifest the exact same code used

00:11:56,000 --> 00:12:03,519
in the vm setups and containerizing them

00:12:00,000 --> 00:12:06,240
adding uh operator infrastructure

00:12:03,519 --> 00:12:06,720
and other aspects that make it operate

00:12:06,240 --> 00:12:09,839
well

00:12:06,720 --> 00:12:10,720
natively on kubernetes where cf for

00:12:09,839 --> 00:12:14,240
kate's

00:12:10,720 --> 00:12:15,440
is a whole new approach you start with a

00:12:14,240 --> 00:12:19,760
cf api

00:12:15,440 --> 00:12:22,800
and some of the a pre-existing code but

00:12:19,760 --> 00:12:24,079
piecemeal more of the native kubernetes

00:12:22,800 --> 00:12:26,800
bits so a very

00:12:24,079 --> 00:12:29,279
very much that native uh all fully

00:12:26,800 --> 00:12:31,920
native kubernetes experience

00:12:29,279 --> 00:12:34,399
with uh regardless of any of the vm

00:12:31,920 --> 00:12:34,399
heritage

00:12:35,200 --> 00:12:39,920
understood anybody else

00:12:38,320 --> 00:12:41,680
chipping on that or did jeff sum it up

00:12:39,920 --> 00:12:43,920
perfectly for everybody

00:12:41,680 --> 00:12:46,079
yeah i think the the the way how i

00:12:43,920 --> 00:12:49,200
usually explain it is that i say

00:12:46,079 --> 00:12:50,320
in cfo cates or essentially what's

00:12:49,200 --> 00:12:53,040
important to

00:12:50,320 --> 00:12:55,200
kind of retain the cloud foundry user

00:12:53,040 --> 00:12:57,360
experience is actually the api

00:12:55,200 --> 00:12:59,760
and these are primarily the components

00:12:57,360 --> 00:13:02,240
that continue to exist so that's

00:12:59,760 --> 00:13:04,480
ultimately cloud controller and uaa

00:13:02,240 --> 00:13:07,519
which represents that

00:13:04,480 --> 00:13:10,639
kind of end user facing api and then

00:13:07,519 --> 00:13:13,040
for the rest i think um the the folks at

00:13:10,639 --> 00:13:14,079
vmware have done a great job in kind of

00:13:13,040 --> 00:13:17,680
assessing

00:13:14,079 --> 00:13:20,240
like what alternative technologies exist

00:13:17,680 --> 00:13:20,880
on the kubernetes stack to kind of

00:13:20,240 --> 00:13:23,200
replace

00:13:20,880 --> 00:13:24,480
existing components that we know uh from

00:13:23,200 --> 00:13:26,959
from the bosch world

00:13:24,480 --> 00:13:28,000
like for example swapping out uh the

00:13:26,959 --> 00:13:29,839
whole go router

00:13:28,000 --> 00:13:31,839
and uh container networking

00:13:29,839 --> 00:13:34,720
infrastructure uh with istio

00:13:31,839 --> 00:13:35,200
and uh i think that's like how how i

00:13:34,720 --> 00:13:38,959
like to

00:13:35,200 --> 00:13:38,959
to explain cfo

00:13:39,600 --> 00:13:43,360
yeah i think those are great

00:13:41,279 --> 00:13:46,880
descriptions but i also want to

00:13:43,360 --> 00:13:48,079
acknowledge like i i really think cf for

00:13:46,880 --> 00:13:50,959
kate's at this point is

00:13:48,079 --> 00:13:51,680
is very much a community effort um we

00:13:50,959 --> 00:13:54,959
have

00:13:51,680 --> 00:13:58,560
uh folks from ibm and suse and

00:13:54,959 --> 00:13:59,199
sap uh really very much helping the

00:13:58,560 --> 00:14:01,600
project

00:13:59,199 --> 00:14:02,880
progress and proceed adding

00:14:01,600 --> 00:14:05,920
functionality

00:14:02,880 --> 00:14:09,199
uh in uh

00:14:05,920 --> 00:14:11,839
increasing the stability and scalability

00:14:09,199 --> 00:14:12,320
finding all sorts of things and helping

00:14:11,839 --> 00:14:14,480
us to

00:14:12,320 --> 00:14:16,480
identify areas where those things could

00:14:14,480 --> 00:14:20,240
be improved

00:14:16,480 --> 00:14:23,120
and so i i in in some ways i do

00:14:20,240 --> 00:14:24,320
acknowledge vmware has has really pushed

00:14:23,120 --> 00:14:27,839
that effort forward

00:14:24,320 --> 00:14:29,440
but i really um and enjoying the the

00:14:27,839 --> 00:14:30,399
amount of collaboration that that's

00:14:29,440 --> 00:14:34,560
happening there

00:14:30,399 --> 00:14:37,519
and i'm especially um pleased to see how

00:14:34,560 --> 00:14:39,279
many of the things that cfrcates has

00:14:37,519 --> 00:14:43,360
been putting out there is being

00:14:39,279 --> 00:14:46,240
adopted by cubecf as those things mature

00:14:43,360 --> 00:14:48,240
and hopefully uh these things start to

00:14:46,240 --> 00:14:49,760
chart closer together and

00:14:48,240 --> 00:14:51,279
hopefully this will be more of an

00:14:49,760 --> 00:14:53,839
implementation detail

00:14:51,279 --> 00:14:55,040
um over time yeah that's something that

00:14:53,839 --> 00:14:58,000
we discussed oh sorry

00:14:55,040 --> 00:14:58,800
something alright i was i was just about

00:14:58,000 --> 00:15:02,079
to add to that

00:14:58,800 --> 00:15:03,600
so i mean this is exactly where what i'm

00:15:02,079 --> 00:15:05,360
thinking and i think we touched this in

00:15:03,600 --> 00:15:09,120
the last panel already

00:15:05,360 --> 00:15:10,480
um these projects are although we kind

00:15:09,120 --> 00:15:11,920
of described them now as two

00:15:10,480 --> 00:15:12,639
alternatives at this point in time i

00:15:11,920 --> 00:15:14,720
think

00:15:12,639 --> 00:15:16,639
over time and hopefully the time is

00:15:14,720 --> 00:15:19,040
going to be more short than long

00:15:16,639 --> 00:15:20,800
um they would be uh you know growing

00:15:19,040 --> 00:15:23,120
together and becoming one

00:15:20,800 --> 00:15:25,120
i think it really depends like the the

00:15:23,120 --> 00:15:27,040
the major difference as i see it between

00:15:25,120 --> 00:15:28,079
the two is it really depends on where

00:15:27,040 --> 00:15:30,959
you're starting from

00:15:28,079 --> 00:15:31,839
right if you're starting from let's say

00:15:30,959 --> 00:15:35,440
that you have

00:15:31,839 --> 00:15:37,360
a you know an existing bosch based

00:15:35,440 --> 00:15:38,720
environment and you want to migrate that

00:15:37,360 --> 00:15:40,959
over or

00:15:38,720 --> 00:15:42,800
doing something like that then i

00:15:40,959 --> 00:15:44,720
personally believe that

00:15:42,800 --> 00:15:46,639
um you know from coming more from an

00:15:44,720 --> 00:15:47,839
operator experience rather than user

00:15:46,639 --> 00:15:49,519
experience

00:15:47,839 --> 00:15:51,360
the cfr case is going to make your life

00:15:49,519 --> 00:15:52,800
a little bit easier and

00:15:51,360 --> 00:15:54,800
it maybe is also a little bit more

00:15:52,800 --> 00:15:58,000
mature than

00:15:54,800 --> 00:15:59,920
than where cfo cases today

00:15:58,000 --> 00:16:01,759
whereas if you are more or less starting

00:15:59,920 --> 00:16:05,040
from a green field and you just want to

00:16:01,759 --> 00:16:07,519
retain the cloud foundry user experience

00:16:05,040 --> 00:16:08,639
and not so much the operator experience

00:16:07,519 --> 00:16:10,240
then

00:16:08,639 --> 00:16:11,680
on the contrary it's going to be

00:16:10,240 --> 00:16:12,800
probably going to be a bit easier to

00:16:11,680 --> 00:16:17,120
start out with with

00:16:12,800 --> 00:16:18,720
uh cfo kids um so it's not an either or

00:16:17,120 --> 00:16:20,480
and like i said i think over time they

00:16:18,720 --> 00:16:22,240
will grow together

00:16:20,480 --> 00:16:24,240
it's more like where are you coming from

00:16:22,240 --> 00:16:26,000
what are your personal or your company's

00:16:24,240 --> 00:16:28,880
preferences and priorities

00:16:26,000 --> 00:16:29,519
and and that will a little bit determine

00:16:28,880 --> 00:16:32,720
uh

00:16:29,519 --> 00:16:35,279
your starting point here and cube cf

00:16:32,720 --> 00:16:37,759
is in use in production by various

00:16:35,279 --> 00:16:41,040
people at the moment is that correct

00:16:37,759 --> 00:16:42,320
yeah yeah we have customers in

00:16:41,040 --> 00:16:45,360
production

00:16:42,320 --> 00:16:48,480
like ubcf so this stuff is on um

00:16:45,360 --> 00:16:49,759
although i i should note that today

00:16:48,480 --> 00:16:51,680
you know with as with the current

00:16:49,759 --> 00:16:55,040
release it's on diego

00:16:51,680 --> 00:16:56,240
based not on irene and still

00:16:55,040 --> 00:16:58,560
that's still available in an

00:16:56,240 --> 00:17:01,360
experimental view but we're trying to

00:16:58,560 --> 00:17:02,160
push that to production soon and we also

00:17:01,360 --> 00:17:03,680
have um

00:17:02,160 --> 00:17:05,600
we also have a bunch of production

00:17:03,680 --> 00:17:07,919
customers on coop cf

00:17:05,600 --> 00:17:09,120
um and the predecessors which is which

00:17:07,919 --> 00:17:12,400
is scf

00:17:09,120 --> 00:17:13,839
um and and right now uh we are

00:17:12,400 --> 00:17:15,439
we are actually in the process of

00:17:13,839 --> 00:17:17,520
building a

00:17:15,439 --> 00:17:20,240
trying to build a hybrid environment

00:17:17,520 --> 00:17:22,880
between bosch and kubernetes

00:17:20,240 --> 00:17:24,559
because for the single tenant like for

00:17:22,880 --> 00:17:26,240
single tenant deployments it's easy

00:17:24,559 --> 00:17:27,520
right to move them over

00:17:26,240 --> 00:17:29,440
let's say just from a bosch base

00:17:27,520 --> 00:17:30,880
deployment to a coup cf

00:17:29,440 --> 00:17:32,559
but if you're running a large

00:17:30,880 --> 00:17:36,000
multi-tenant

00:17:32,559 --> 00:17:37,840
thing you know like pws for example used

00:17:36,000 --> 00:17:39,200
to be or the ibm cloud foundry service

00:17:37,840 --> 00:17:43,520
still is

00:17:39,200 --> 00:17:45,840
that is much harder to to accomplish and

00:17:43,520 --> 00:17:47,039
that is a lot of hard engineering work

00:17:45,840 --> 00:17:50,000
to to move

00:17:47,039 --> 00:17:51,280
that from bosch based environment to

00:17:50,000 --> 00:17:52,799
something else

00:17:51,280 --> 00:17:54,400
and with that migration is that

00:17:52,799 --> 00:17:56,000
something that

00:17:54,400 --> 00:17:57,600
you're looking at a hybrid environment

00:17:56,000 --> 00:17:59,360
because you have to move piecemeal

00:17:57,600 --> 00:18:01,600
because it's so large or do you see that

00:17:59,360 --> 00:18:04,640
there are parts there that might stay

00:18:01,600 --> 00:18:06,080
on based on vm's uh bosch deployed for

00:18:04,640 --> 00:18:08,400
various reasons

00:18:06,080 --> 00:18:09,120
no the it's going to be piece build

00:18:08,400 --> 00:18:11,280
because it's so

00:18:09,120 --> 00:18:12,480
large like um and we you don't want to

00:18:11,280 --> 00:18:14,480
do you know

00:18:12,480 --> 00:18:16,000
disruptive migrations and all these

00:18:14,480 --> 00:18:19,280
sorts of things so

00:18:16,000 --> 00:18:20,880
um i envision that in the end everything

00:18:19,280 --> 00:18:22,720
will be moving over

00:18:20,880 --> 00:18:24,960
um but there will be some intermediate

00:18:22,720 --> 00:18:26,400
stages so the first intermediate stage

00:18:24,960 --> 00:18:28,000
and we have not done this in production

00:18:26,400 --> 00:18:29,200
yet we just have done it in our staging

00:18:28,000 --> 00:18:30,880
and test environments

00:18:29,200 --> 00:18:32,559
but the first intermediate stage that we

00:18:30,880 --> 00:18:33,919
are trying to get to at the moment is

00:18:32,559 --> 00:18:37,200
that we have

00:18:33,919 --> 00:18:39,200
um you know the control plane so

00:18:37,200 --> 00:18:41,280
the go router the cloud controllers and

00:18:39,200 --> 00:18:43,520
you know all that kind of componentry

00:18:41,280 --> 00:18:46,640
that's still sitting on bosch

00:18:43,520 --> 00:18:47,360
but the the diego cells they have been

00:18:46,640 --> 00:18:49,120
moving over

00:18:47,360 --> 00:18:51,360
to kubernetes and you know we could have

00:18:49,120 --> 00:18:52,960
done the other around

00:18:51,360 --> 00:18:55,200
and initially we thought it's a really

00:18:52,960 --> 00:18:56,720
bad idea to do that

00:18:55,200 --> 00:18:58,960
but then we tried it out and we actually

00:18:56,720 --> 00:19:01,120
figured out that it's maybe not so bad

00:18:58,960 --> 00:19:02,880
um and it actually worked quite well

00:19:01,120 --> 00:19:04,240
once you get a little bit of

00:19:02,880 --> 00:19:05,919
once you get the networking stuff

00:19:04,240 --> 00:19:08,080
resolved it becomes

00:19:05,919 --> 00:19:08,960
fairly straightforward and so far from

00:19:08,080 --> 00:19:12,559
what we can tell

00:19:08,960 --> 00:19:16,480
so this is actually not a bad thing

00:19:12,559 --> 00:19:16,480
cool and yeah i think

00:19:16,640 --> 00:19:20,320
oh my internet connection is maybe

00:19:19,440 --> 00:19:24,320
unstable

00:19:20,320 --> 00:19:28,160
but hopefully it's it's okay um

00:19:24,320 --> 00:19:28,799
all right all right um i was just going

00:19:28,160 --> 00:19:31,600
to say

00:19:28,799 --> 00:19:32,880
you know my migration the the topic is

00:19:31,600 --> 00:19:36,880
is quite

00:19:32,880 --> 00:19:39,840
it it has very many facets i think bern

00:19:36,880 --> 00:19:41,039
wrote up a topic trying to adopt

00:19:39,840 --> 00:19:44,160
describing various

00:19:41,039 --> 00:19:48,000
types of migrations

00:19:44,160 --> 00:19:51,280
scenarios but i think for a lot of

00:19:48,000 --> 00:19:53,120
users of cloud foundry

00:19:51,280 --> 00:19:55,679
many of the existing ones are used to

00:19:53,120 --> 00:19:58,880
bringing up a whole nother cloud foundry

00:19:55,679 --> 00:20:00,720
um and then having to uh and then

00:19:58,880 --> 00:20:02,400
re-pushing their apps to that new cloud

00:20:00,720 --> 00:20:03,840
foundry it might be because their older

00:20:02,400 --> 00:20:06,720
infrastructure

00:20:03,840 --> 00:20:08,240
need needed to be replaced and so then

00:20:06,720 --> 00:20:10,799
they get a new

00:20:08,240 --> 00:20:12,480
cloud foundry endpoint and then they ask

00:20:10,799 --> 00:20:14,720
their users to to migrate

00:20:12,480 --> 00:20:17,039
that over there are some tools out there

00:20:14,720 --> 00:20:20,159
like cf management that helps to

00:20:17,039 --> 00:20:23,280
replicate the user org

00:20:20,159 --> 00:20:26,480
um kind of mappings from

00:20:23,280 --> 00:20:27,840
uh uh deployment to deployment and so

00:20:26,480 --> 00:20:29,039
that that kind of helps with the

00:20:27,840 --> 00:20:31,840
bootstrapping there

00:20:29,039 --> 00:20:33,360
and so there's kind of a way already

00:20:31,840 --> 00:20:34,480
that people are naturally using to

00:20:33,360 --> 00:20:37,520
migrate from

00:20:34,480 --> 00:20:41,200
a cloud foundry to another cloud foundry

00:20:37,520 --> 00:20:44,240
and i can see that as cf for cates

00:20:41,200 --> 00:20:47,280
matures in capability or even cube cf as

00:20:44,240 --> 00:20:49,200
it matures in capability that people

00:20:47,280 --> 00:20:51,280
would be able to leverage that same kind

00:20:49,200 --> 00:20:55,440
of migration technique

00:20:51,280 --> 00:20:59,520
um to go from what they're used to

00:20:55,440 --> 00:21:00,840
in terms of cf for vms to cf arcades or

00:20:59,520 --> 00:21:04,559
cube cf

00:21:00,840 --> 00:21:05,120
um and the amount of capability that

00:21:04,559 --> 00:21:07,200
they need

00:21:05,120 --> 00:21:09,520
like what kind of applications do you

00:21:07,200 --> 00:21:11,280
have are they taking advantage of things

00:21:09,520 --> 00:21:12,080
like container to container networking

00:21:11,280 --> 00:21:15,039
or not

00:21:12,080 --> 00:21:17,039
um that might enable you to go sooner or

00:21:15,039 --> 00:21:20,400
later

00:21:17,039 --> 00:21:22,559
depending on what your application

00:21:20,400 --> 00:21:26,400
actually needs

00:21:22,559 --> 00:21:29,440
yeah yeah and i think go ahead jeff

00:21:26,400 --> 00:21:30,960
uh i mean i think that that brings up

00:21:29,440 --> 00:21:32,559
another interesting point which we only

00:21:30,960 --> 00:21:35,760
alluded to before but

00:21:32,559 --> 00:21:38,720
i think it is worth talking about and uh

00:21:35,760 --> 00:21:40,080
one of the differences i think one of

00:21:38,720 --> 00:21:42,240
the key differences

00:21:40,080 --> 00:21:44,240
between what is what's current qcf and

00:21:42,240 --> 00:21:46,720
what c for k kate's

00:21:44,240 --> 00:21:47,919
uh and a very important question to ask

00:21:46,720 --> 00:21:51,679
is cfc

00:21:47,919 --> 00:21:55,120
is willing to break some of the

00:21:51,679 --> 00:21:57,919
existing uh compatibility and

00:21:55,120 --> 00:21:59,039
which qcf has been trying to be that

00:21:57,919 --> 00:22:01,200
bridge

00:21:59,039 --> 00:22:02,240
if there will come a time when if we're

00:22:01,200 --> 00:22:05,280
like okay

00:22:02,240 --> 00:22:08,720
if this is what we want to do uh

00:22:05,280 --> 00:22:09,200
hey all user community some things are

00:22:08,720 --> 00:22:10,799
different

00:22:09,200 --> 00:22:13,600
and currently one of the biggest ones

00:22:10,799 --> 00:22:16,480
that that i've been concerned about

00:22:13,600 --> 00:22:18,320
from you know empathizing with the user

00:22:16,480 --> 00:22:21,600
is build packs

00:22:18,320 --> 00:22:24,960
so you won't necessarily be able to

00:22:21,600 --> 00:22:26,880
just push all up to now

00:22:24,960 --> 00:22:28,640
you can move from a vm base to any of

00:22:26,880 --> 00:22:31,280
the cube cf-based systems

00:22:28,640 --> 00:22:32,880
and you re-push build pack compatibility

00:22:31,280 --> 00:22:35,679
is exact

00:22:32,880 --> 00:22:36,480
that's not the case with cf for kate's

00:22:35,679 --> 00:22:38,400
and

00:22:36,480 --> 00:22:39,760
uh so as you are saying you know if you

00:22:38,400 --> 00:22:42,240
start greenfield

00:22:39,760 --> 00:22:44,320
that's not necessarily an issue but for

00:22:42,240 --> 00:22:46,159
you know a user that's been trying to

00:22:44,320 --> 00:22:47,760
to you know they they kind of bought

00:22:46,159 --> 00:22:50,000
into the cloud foundry ecosystem

00:22:47,760 --> 00:22:52,000
you might have bought in five years ago

00:22:50,000 --> 00:22:54,320
you've been able to use

00:22:52,000 --> 00:22:56,960
pretty much untouched moving from

00:22:54,320 --> 00:23:00,720
version to version and system to system

00:22:56,960 --> 00:23:03,280
but in cfrcates well that build pack

00:23:00,720 --> 00:23:03,760
may not exist yet or even if it's the

00:23:03,280 --> 00:23:05,919
same

00:23:03,760 --> 00:23:07,679
like say a ruby build pack it's not

00:23:05,919 --> 00:23:09,600
quite the same anymore the

00:23:07,679 --> 00:23:12,240
architecture's a little bit different

00:23:09,600 --> 00:23:13,679
and your app may not work out of the box

00:23:12,240 --> 00:23:16,480
and then all of a sudden we're pushing

00:23:13,679 --> 00:23:19,520
back on the user community um

00:23:16,480 --> 00:23:20,960
yeah it's it's the same it is actually

00:23:19,520 --> 00:23:22,320
from an architectural point of view and

00:23:20,960 --> 00:23:25,520
everything but

00:23:22,320 --> 00:23:26,159
it's not compatible anymore i think some

00:23:25,520 --> 00:23:29,280
of those

00:23:26,159 --> 00:23:29,679
things will mature over time some of

00:23:29,280 --> 00:23:33,200
those

00:23:29,679 --> 00:23:36,000
those differences i i believe the

00:23:33,200 --> 00:23:37,280
paquetto folks are hoping to smooth out

00:23:36,000 --> 00:23:41,440
and as we

00:23:37,280 --> 00:23:44,240
get um uh capabilities like

00:23:41,440 --> 00:23:45,039
um for better for where's the ability to

00:23:44,240 --> 00:23:48,400
index

00:23:45,039 --> 00:23:50,080
uh uh and in an instance which some

00:23:48,400 --> 00:23:53,360
build packs rely on for

00:23:50,080 --> 00:23:54,159
for reasons um that that i think that

00:23:53,360 --> 00:23:57,679
was just

00:23:54,159 --> 00:24:02,000
recently a capability that irini

00:23:57,679 --> 00:24:03,840
brought back um to to see if for kate's

00:24:02,000 --> 00:24:05,600
being able to index a particular

00:24:03,840 --> 00:24:07,679
instance with zero

00:24:05,600 --> 00:24:08,720
so that build packs that rely on that

00:24:07,679 --> 00:24:10,640
capability can

00:24:08,720 --> 00:24:11,840
can then support that so i think some of

00:24:10,640 --> 00:24:14,000
these things will

00:24:11,840 --> 00:24:16,640
take some time to smooth out for someone

00:24:14,000 --> 00:24:19,440
to notice someone to file a bug

00:24:16,640 --> 00:24:21,760
and help us uh smooth out this product

00:24:19,440 --> 00:24:24,000
uh this process

00:24:21,760 --> 00:24:25,120
and what's the reason for that that the

00:24:24,000 --> 00:24:27,279
need for change

00:24:25,120 --> 00:24:29,200
in build packs is this to do with cloud

00:24:27,279 --> 00:24:31,760
native bill packs and the fact that

00:24:29,200 --> 00:24:33,919
uh traditional build packs didn't emit a

00:24:31,760 --> 00:24:36,480
container image it was more of a table

00:24:33,919 --> 00:24:36,480
of files

00:24:37,600 --> 00:24:42,559
yeah i i mean i i wouldn't say i

00:24:40,480 --> 00:24:42,960
understand all of the details of that

00:24:42,559 --> 00:24:45,919
but

00:24:42,960 --> 00:24:47,679
um it i think there there's a difference

00:24:45,919 --> 00:24:51,200
and there's some trade-off and

00:24:47,679 --> 00:24:54,320
advantages there and so um you get

00:24:51,200 --> 00:24:57,039
um uh some advantages in

00:24:54,320 --> 00:24:57,840
in uh the new cloud native build packs

00:24:57,039 --> 00:25:00,240
understanding

00:24:57,840 --> 00:25:01,360
image layers much more natively and

00:25:00,240 --> 00:25:05,200
being able to say

00:25:01,360 --> 00:25:07,200
very definitively what's in inside um

00:25:05,200 --> 00:25:09,120
the the versions of those build packs

00:25:07,200 --> 00:25:09,679
and so there's a lot of capabilities

00:25:09,120 --> 00:25:13,760
there

00:25:09,679 --> 00:25:15,679
but uh in it it is a slightly different

00:25:13,760 --> 00:25:19,360
implementation and so

00:25:15,679 --> 00:25:20,880
um you know finding out

00:25:19,360 --> 00:25:22,400
finding those differences and then

00:25:20,880 --> 00:25:25,360
reasoning over like

00:25:22,400 --> 00:25:26,320
should we should should we make changes

00:25:25,360 --> 00:25:28,640
to

00:25:26,320 --> 00:25:29,360
make those differences transparent to

00:25:28,640 --> 00:25:31,919
users

00:25:29,360 --> 00:25:33,679
or do we need to take this make a

00:25:31,919 --> 00:25:36,000
breaking change here

00:25:33,679 --> 00:25:36,960
in order to get the benefits of being

00:25:36,000 --> 00:25:41,279
able to

00:25:36,960 --> 00:25:45,440
swap out your base image or that

00:25:41,279 --> 00:25:48,080
jdk almost in a snap

00:25:45,440 --> 00:25:50,159
as compared to to what it was like

00:25:48,080 --> 00:25:52,240
before with droplets

00:25:50,159 --> 00:25:56,000
having to download the the whole base

00:25:52,240 --> 00:25:59,520
layer and making that available

00:25:56,000 --> 00:26:02,480
yeah some of them are intentional

00:25:59,520 --> 00:26:04,080
uh and and i think actually many of them

00:26:02,480 --> 00:26:07,360
in terms of incompatibilities are

00:26:04,080 --> 00:26:08,400
unintentional but not uh not not raised

00:26:07,360 --> 00:26:11,919
up yet

00:26:08,400 --> 00:26:14,000
um and the it it leads to you know that

00:26:11,919 --> 00:26:14,960
whole interesting extra set of questions

00:26:14,000 --> 00:26:18,400
and

00:26:14,960 --> 00:26:21,520
if you look at cf um which you know

00:26:18,400 --> 00:26:25,039
it's a very durable architecture that

00:26:21,520 --> 00:26:27,120
allows us to have moved from a vm

00:26:25,039 --> 00:26:28,640
to container to you know whatever

00:26:27,120 --> 00:26:30,080
because there's a lot of abstraction in

00:26:28,640 --> 00:26:32,240
the back

00:26:30,080 --> 00:26:33,440
then there's the question of that a lot

00:26:32,240 --> 00:26:36,320
of people are pushing because

00:26:33,440 --> 00:26:38,080
there's a lot of attempts to recreate

00:26:36,320 --> 00:26:39,679
enterprise type passes

00:26:38,080 --> 00:26:41,760
none that i've seen that have come close

00:26:39,679 --> 00:26:44,400
to cloud foundry in terms of

00:26:41,760 --> 00:26:46,480
richness of functionality but there are

00:26:44,400 --> 00:26:48,960
some still good questions there

00:26:46,480 --> 00:26:52,799
if we're going to start relying on

00:26:48,960 --> 00:26:55,840
kubernetes as our lingua franca base

00:26:52,799 --> 00:26:56,559
how transparent do you want to be from

00:26:55,840 --> 00:27:00,080
the cf

00:26:56,559 --> 00:27:02,000
and end user api because oh

00:27:00,080 --> 00:27:03,440
i might now be able to get extra

00:27:02,000 --> 00:27:05,600
functionality

00:27:03,440 --> 00:27:06,720
you know when playing with layers versus

00:27:05,600 --> 00:27:09,919
the

00:27:06,720 --> 00:27:12,000
the the very abstract tarball method

00:27:09,919 --> 00:27:14,240
which i'll be able to you know port to

00:27:12,000 --> 00:27:17,440
probably anything in the future

00:27:14,240 --> 00:27:18,960
um but with layers i might get you know

00:27:17,440 --> 00:27:20,960
a certain extra level of

00:27:18,960 --> 00:27:22,240
of transparency that can be very useful

00:27:20,960 --> 00:27:24,320
to the end user

00:27:22,240 --> 00:27:25,600
and some of those things have just kind

00:27:24,320 --> 00:27:27,039
of naturally come up well that's what

00:27:25,600 --> 00:27:30,240
i'm doing in piquetto and

00:27:27,039 --> 00:27:34,320
such so uh

00:27:30,240 --> 00:27:36,480
i hadn't realized oh that that level of

00:27:34,320 --> 00:27:38,720
transparency might cause a compatibility

00:27:36,480 --> 00:27:40,320
problem

00:27:38,720 --> 00:27:42,080
and i think it's it's definitely an

00:27:40,320 --> 00:27:44,240
interesting topic because

00:27:42,080 --> 00:27:45,919
like some of the stuff is is really i

00:27:44,240 --> 00:27:48,320
would say fundamental to

00:27:45,919 --> 00:27:49,840
to kubernetes itself and like related

00:27:48,320 --> 00:27:53,120
technologies like

00:27:49,840 --> 00:27:55,360
layering in an oci file system but then

00:27:53,120 --> 00:27:56,799
like the next questions will be around

00:27:55,360 --> 00:27:59,760
like how much of

00:27:56,799 --> 00:28:01,520
istio do we actually expose or like uh

00:27:59,760 --> 00:28:03,600
do we kind of rely on certain

00:28:01,520 --> 00:28:05,600
functionality that's only available

00:28:03,600 --> 00:28:08,080
in like higher versions of the

00:28:05,600 --> 00:28:11,279
underlying kubernetes

00:28:08,080 --> 00:28:14,559
cluster etc etc so i think

00:28:11,279 --> 00:28:16,559
like i i haven't really made up my mind

00:28:14,559 --> 00:28:18,159
entirely but so far i think it was a

00:28:16,559 --> 00:28:21,039
good thing to to basically

00:28:18,159 --> 00:28:21,600
abstract that away and still be able to

00:28:21,039 --> 00:28:24,799
kind of

00:28:21,600 --> 00:28:27,039
swap out underlying components and um

00:28:24,799 --> 00:28:29,279
i think if if we want to go down the the

00:28:27,039 --> 00:28:30,080
route of basically exposing more of that

00:28:29,279 --> 00:28:32,960
underlay

00:28:30,080 --> 00:28:33,200
i think it brings with it certain kind

00:28:32,960 --> 00:28:36,720
of

00:28:33,200 --> 00:28:38,559
lock-in and certain kind of um

00:28:36,720 --> 00:28:40,799
boundary conditions that that we didn't

00:28:38,559 --> 00:28:44,000
see so far so i think it's

00:28:40,799 --> 00:28:45,600
like an interesting topic but still um

00:28:44,000 --> 00:28:47,520
what want you to kind of carefully

00:28:45,600 --> 00:28:50,480
consider from my perspective

00:28:47,520 --> 00:28:52,159
i i i cannot agree more particularly on

00:28:50,480 --> 00:28:53,600
the carefully considered part right

00:28:52,159 --> 00:28:56,960
because i mean there are some

00:28:53,600 --> 00:28:59,120
changes um that are just unavoidable

00:28:56,960 --> 00:29:00,159
i would say so for example if you think

00:28:59,120 --> 00:29:02,000
about

00:29:00,159 --> 00:29:03,520
in the past you have never been thinking

00:29:02,000 --> 00:29:04,720
about a container image in the cloud

00:29:03,520 --> 00:29:06,080
foundry world you have never been

00:29:04,720 --> 00:29:08,559
thinking about

00:29:06,080 --> 00:29:10,399
where to store like the blob store was

00:29:08,559 --> 00:29:11,200
that thing that was somewhere sitting in

00:29:10,399 --> 00:29:13,760
the back and

00:29:11,200 --> 00:29:15,039
only an operator knew about and nobody

00:29:13,760 --> 00:29:18,720
else cared right

00:29:15,039 --> 00:29:20,720
so now this is a you know one of these

00:29:18,720 --> 00:29:22,640
decisions where the move to kubernetes

00:29:20,720 --> 00:29:24,480
now makes this more transparent like you

00:29:22,640 --> 00:29:27,919
have to have a container registry

00:29:24,480 --> 00:29:29,919
it's there it's visible um you might not

00:29:27,919 --> 00:29:32,480
directly interacting with it but but it

00:29:29,919 --> 00:29:35,840
is it is definitely more in your face

00:29:32,480 --> 00:29:38,240
than the blobster ever used to be um so

00:29:35,840 --> 00:29:39,200
that's what i call unavoidable because

00:29:38,240 --> 00:29:41,039
of

00:29:39,200 --> 00:29:43,080
we just you know we went down the path

00:29:41,039 --> 00:29:45,440
of adopting the kubernetes as the

00:29:43,080 --> 00:29:48,640
foundation as the foundation

00:29:45,440 --> 00:29:50,720
um and and that's a consequence of that

00:29:48,640 --> 00:29:52,480
now there the other things that you're

00:29:50,720 --> 00:29:56,159
touched on is really

00:29:52,480 --> 00:29:57,600
um you know speaking of istio like how

00:29:56,159 --> 00:30:00,240
much of the istio

00:29:57,600 --> 00:30:01,200
feature set is is something we would

00:30:00,240 --> 00:30:03,440
like to expose

00:30:01,200 --> 00:30:05,039
or on the other hand you know what is

00:30:03,440 --> 00:30:08,080
the relation between

00:30:05,039 --> 00:30:11,279
our back and uaa like you know how how

00:30:08,080 --> 00:30:14,720
do how do those things come together um

00:30:11,279 --> 00:30:15,760
um in the layering um and and i think

00:30:14,720 --> 00:30:18,799
there's a lot of

00:30:15,760 --> 00:30:20,880
a lot of subtlety that we have to

00:30:18,799 --> 00:30:22,960
to take care of both for group cf and

00:30:20,880 --> 00:30:24,880
cfrks as we go forward and

00:30:22,960 --> 00:30:26,159
you know how much of that stuff do we

00:30:24,880 --> 00:30:28,080
want to um

00:30:26,159 --> 00:30:29,919
adopt and and what would that mean for

00:30:28,080 --> 00:30:30,640
the end user experience eventually

00:30:29,919 --> 00:30:32,720
because

00:30:30,640 --> 00:30:34,840
uh it it will expose some of the

00:30:32,720 --> 00:30:36,720
underlying complexities if we're not

00:30:34,840 --> 00:30:40,640
careful

00:30:36,720 --> 00:30:41,200
that's a that that is a good point that

00:30:40,640 --> 00:30:43,600
i mean there's

00:30:41,200 --> 00:30:45,520
the two that you bring up but istio and

00:30:43,600 --> 00:30:48,559
and narback

00:30:45,520 --> 00:30:51,279
so istio it's great in one sense

00:30:48,559 --> 00:30:52,640
as you mentioned issue and envoy were

00:30:51,279 --> 00:30:54,880
one of the ways in which we could

00:30:52,640 --> 00:30:56,080
automatically get some end-to-end

00:30:54,880 --> 00:30:59,600
encryption between

00:30:56,080 --> 00:31:01,200
all of the components yet this is one of

00:30:59,600 --> 00:31:04,480
those areas where

00:31:01,200 --> 00:31:04,880
istio came up service mesh life of its

00:31:04,480 --> 00:31:08,399
own

00:31:04,880 --> 00:31:10,080
and it has a lot of uh it has some input

00:31:08,399 --> 00:31:12,159
from the cloud foundry community and

00:31:10,080 --> 00:31:13,360
one of the upstream maintainers came

00:31:12,159 --> 00:31:17,120
from the

00:31:13,360 --> 00:31:18,880
cloud foundry routing team um and

00:31:17,120 --> 00:31:20,320
his work you know works at souza so you

00:31:18,880 --> 00:31:22,080
know we get to

00:31:20,320 --> 00:31:24,000
control them somewhat but you know these

00:31:22,080 --> 00:31:27,600
open source guys are

00:31:24,000 --> 00:31:30,480
cat hurting anyway uh because

00:31:27,600 --> 00:31:31,679
they have another huge side of input

00:31:30,480 --> 00:31:35,279
coming from the community

00:31:31,679 --> 00:31:37,679
other communities that are not ours that

00:31:35,279 --> 00:31:39,279
that kind of grow and i mean in some

00:31:37,679 --> 00:31:42,000
sense you could say it bloats

00:31:39,279 --> 00:31:44,080
uh their functionality on that side that

00:31:42,000 --> 00:31:47,760
we don't necessarily need but we end up

00:31:44,080 --> 00:31:50,799
inheriting so it's kind of part of

00:31:47,760 --> 00:31:52,240
our job is to make sure we're picking

00:31:50,799 --> 00:31:56,000
the right functionality

00:31:52,240 --> 00:31:58,799
but also influencing upstream

00:31:56,000 --> 00:32:00,480
the needs to say you know don't

00:31:58,799 --> 00:32:01,200
necessarily add that i mean if that's

00:32:00,480 --> 00:32:03,600
what you want

00:32:01,200 --> 00:32:05,120
we're all open here and we have open

00:32:03,600 --> 00:32:06,080
components that actually one of the nice

00:32:05,120 --> 00:32:07,919
things i think is

00:32:06,080 --> 00:32:10,240
we're having more open components that

00:32:07,919 --> 00:32:10,880
could be used maybe by somebody else who

00:32:10,240 --> 00:32:12,960
doesn't want

00:32:10,880 --> 00:32:14,799
everything but they want to pick and

00:32:12,960 --> 00:32:16,320
choose some of the other stuff

00:32:14,799 --> 00:32:18,080
because i think our back is actually an

00:32:16,320 --> 00:32:19,919
instance of that

00:32:18,080 --> 00:32:21,679
one of the things kubernetes is still

00:32:19,919 --> 00:32:25,279
missing is a

00:32:21,679 --> 00:32:26,799
a really good hardback

00:32:25,279 --> 00:32:29,120
if you want to simplify the model in

00:32:26,799 --> 00:32:31,279
fact you could argue that

00:32:29,120 --> 00:32:33,919
if you were to really do the the cf4ks

00:32:31,279 --> 00:32:36,240
you could get that cf push experience

00:32:33,919 --> 00:32:38,320
and you could cut a lot of the weight

00:32:36,240 --> 00:32:40,960
out by taking uaa out

00:32:38,320 --> 00:32:42,960
but then you have the very simplified

00:32:40,960 --> 00:32:46,000
kubernetes

00:32:42,960 --> 00:32:47,440
security experience which i think you

00:32:46,000 --> 00:32:50,480
lose something there

00:32:47,440 --> 00:32:52,720
so how do we bring

00:32:50,480 --> 00:32:54,960
what is that organized space model with

00:32:52,720 --> 00:32:57,519
that very valuable organ space model

00:32:54,960 --> 00:32:58,480
it works for single users it is

00:32:57,519 --> 00:33:01,360
essential

00:32:58,480 --> 00:33:02,000
for enterprises into that kubernetes

00:33:01,360 --> 00:33:04,799
world and have

00:33:02,000 --> 00:33:08,159
others realize that value without

00:33:04,799 --> 00:33:08,159
reinventing it somewhere else

00:33:08,799 --> 00:33:12,880
yeah i think this is this is a great

00:33:11,519 --> 00:33:16,240
topic like in terms of

00:33:12,880 --> 00:33:18,159
the you know what what abstractions

00:33:16,240 --> 00:33:19,519
um are there and what what we're

00:33:18,159 --> 00:33:22,399
exposing and then

00:33:19,519 --> 00:33:22,880
you know what we then adopt as as other

00:33:22,399 --> 00:33:26,640
things

00:33:22,880 --> 00:33:27,840
mature in the community the kubernetes

00:33:26,640 --> 00:33:31,120
ecosystem

00:33:27,840 --> 00:33:33,919
uh uaa you know it came up in a time

00:33:31,120 --> 00:33:37,200
before that kubernetes ecosystem existed

00:33:33,919 --> 00:33:40,559
um and i think the solutions can

00:33:37,200 --> 00:33:41,440
ua does does a lot of things like a lot

00:33:40,559 --> 00:33:45,120
of things

00:33:41,440 --> 00:33:47,200
and so um the the folks who are working

00:33:45,120 --> 00:33:48,720
on it are thinking okay like what what's

00:33:47,200 --> 00:33:52,880
our niche

00:33:48,720 --> 00:33:56,480
uh and what uh what does make sense

00:33:52,880 --> 00:33:58,399
uh to then um adopt or defer to

00:33:56,480 --> 00:33:59,919
that's growing in the community is there

00:33:58,399 --> 00:34:02,000
something

00:33:59,919 --> 00:34:03,840
that there's enough there that we'd let

00:34:02,000 --> 00:34:04,399
that that makes sense to invest in and

00:34:03,840 --> 00:34:06,960
mature

00:34:04,399 --> 00:34:09,599
that taking over some some parts of the

00:34:06,960 --> 00:34:12,800
things that we rely on uaa for

00:34:09,599 --> 00:34:16,399
or otherwise like makes it more native

00:34:12,800 --> 00:34:20,399
in the way that um you know we

00:34:16,399 --> 00:34:22,800
we're deferring to to kubernetes or

00:34:20,399 --> 00:34:24,079
pocato to be more native to that

00:34:22,800 --> 00:34:27,119
ecosystem

00:34:24,079 --> 00:34:28,879
and then still having an abstraction

00:34:27,119 --> 00:34:30,320
layer on top so that developers don't

00:34:28,879 --> 00:34:32,800
have to worry about it

00:34:30,320 --> 00:34:33,679
so i'm not exactly sure what that thing

00:34:32,800 --> 00:34:36,720
is in

00:34:33,679 --> 00:34:38,240
in the arbex phase there's there's a few

00:34:36,720 --> 00:34:38,800
different efforts going on there and i'm

00:34:38,240 --> 00:34:41,200
not

00:34:38,800 --> 00:34:43,040
entirely sure what what things will

00:34:41,200 --> 00:34:44,079
coalesce but i think that's definitely

00:34:43,040 --> 00:34:46,560
an area

00:34:44,079 --> 00:34:49,839
to potentially collaborate on as as

00:34:46,560 --> 00:34:49,839
things mature

00:34:50,560 --> 00:34:53,599
just just to make sure that that you

00:34:52,480 --> 00:34:55,760
know whatever i said

00:34:53,599 --> 00:34:57,119
earlier is not misunderstood so so i

00:34:55,760 --> 00:35:00,560
think there is a role

00:34:57,119 --> 00:35:01,440
for something like a uaa even going

00:35:00,560 --> 00:35:04,640
forward right

00:35:01,440 --> 00:35:06,960
so because i like i think jeff said it

00:35:04,640 --> 00:35:08,720
there's the simplified model there's a

00:35:06,960 --> 00:35:09,280
value in the simplified model right

00:35:08,720 --> 00:35:12,400
there

00:35:09,280 --> 00:35:16,320
there definitely is um where there is

00:35:12,400 --> 00:35:18,960
lesser value i think is in the way how

00:35:16,320 --> 00:35:19,599
the uaa pieces currently are implemented

00:35:18,960 --> 00:35:21,680
because i

00:35:19,599 --> 00:35:23,520
i think of it always from a conceptual

00:35:21,680 --> 00:35:25,839
point of view as a progressive

00:35:23,520 --> 00:35:28,400
progressive disclosure kind of model

00:35:25,839 --> 00:35:31,680
right so our back is the very bottom

00:35:28,400 --> 00:35:33,440
i can i can pick up every bold and i can

00:35:31,680 --> 00:35:35,359
you know play around with it and i have

00:35:33,440 --> 00:35:38,400
all these knobs and dials

00:35:35,359 --> 00:35:41,599
at the bottom um whereas in

00:35:38,400 --> 00:35:44,320
in uaa it is you know

00:35:41,599 --> 00:35:46,079
at least one or two levels higher up

00:35:44,320 --> 00:35:47,839
from a complexity perspective i have

00:35:46,079 --> 00:35:49,520
less knobs and dials and and that's the

00:35:47,839 --> 00:35:50,720
greatness about it but it's also the

00:35:49,520 --> 00:35:52,960
deficiency

00:35:50,720 --> 00:35:55,280
right so if we can if we can find the

00:35:52,960 --> 00:35:57,680
bridge if the if the community

00:35:55,280 --> 00:35:59,200
we as the community can find you know

00:35:57,680 --> 00:36:01,200
some kind of bridge

00:35:59,200 --> 00:36:02,320
that that allows us to progressively

00:36:01,200 --> 00:36:05,599
disclose

00:36:02,320 --> 00:36:08,079
start out simple using a uea-like model

00:36:05,599 --> 00:36:09,920
map it to a set of object rules

00:36:08,079 --> 00:36:10,480
underneath the covers and then have

00:36:09,920 --> 00:36:13,760
something

00:36:10,480 --> 00:36:15,680
where you can you know as you dig deeper

00:36:13,760 --> 00:36:17,680
you can add more dials and more knobs to

00:36:15,680 --> 00:36:19,680
be to make any kind of configuration

00:36:17,680 --> 00:36:20,720
more fine-grained i i think that's kind

00:36:19,680 --> 00:36:22,560
of like the goal

00:36:20,720 --> 00:36:24,800
that we have to set ourselves from a

00:36:22,560 --> 00:36:26,640
community perspective

00:36:24,800 --> 00:36:28,000
i think perhaps there's a tension here

00:36:26,640 --> 00:36:30,400
between

00:36:28,000 --> 00:36:32,720
historically cloud foundry was optimized

00:36:30,400 --> 00:36:34,240
for a simple user experience or

00:36:32,720 --> 00:36:36,320
as many people as possible be it the

00:36:34,240 --> 00:36:38,160
users or the operators and

00:36:36,320 --> 00:36:39,599
being strongly opinionated putting you

00:36:38,160 --> 00:36:41,040
on guide rails so

00:36:39,599 --> 00:36:42,640
and then you know this is the cloud

00:36:41,040 --> 00:36:45,280
foundry way of working

00:36:42,640 --> 00:36:46,880
and the rest of the world has maybe

00:36:45,280 --> 00:36:48,240
changed in the time since cloud

00:36:46,880 --> 00:36:50,560
foundry's inception

00:36:48,240 --> 00:36:52,720
towards people want to get down and

00:36:50,560 --> 00:36:54,400
dirty with the ammo and all those knobs

00:36:52,720 --> 00:36:56,000
and levers and dials

00:36:54,400 --> 00:36:57,599
and change things and configure their

00:36:56,000 --> 00:37:02,400
own istio

00:36:57,599 --> 00:37:02,400
service meshes do you think that there's

00:37:03,520 --> 00:37:07,680
the do you think that the cloud foundry

00:37:05,680 --> 00:37:11,200
user experience needs to change

00:37:07,680 --> 00:37:13,520
to allow people to get

00:37:11,200 --> 00:37:15,280
into those lower level details should

00:37:13,520 --> 00:37:18,480
the cloud foundry user experience

00:37:15,280 --> 00:37:21,520
stay the same or should it

00:37:18,480 --> 00:37:22,160
expand to new functionalities new

00:37:21,520 --> 00:37:25,200
features

00:37:22,160 --> 00:37:27,040
scale to zero serverless but maintaining

00:37:25,200 --> 00:37:30,240
its original kind of approach of

00:37:27,040 --> 00:37:32,160
being on guide rails and a simplified

00:37:30,240 --> 00:37:35,359
experience

00:37:32,160 --> 00:37:35,359
i guess i would

00:37:36,640 --> 00:37:39,760
i was just i was just going to say i i

00:37:39,200 --> 00:37:42,400
really

00:37:39,760 --> 00:37:43,280
think it's important that we keep um the

00:37:42,400 --> 00:37:46,079
simplified

00:37:43,280 --> 00:37:46,560
developer user experience i don't think

00:37:46,079 --> 00:37:50,079
people

00:37:46,560 --> 00:37:52,079
want to be uh owning and knowing about

00:37:50,079 --> 00:37:54,320
all of the configuration details and

00:37:52,079 --> 00:37:56,160
staying on top of the catego

00:37:54,320 --> 00:37:57,440
compatibilities between all of these

00:37:56,160 --> 00:38:00,400
things and

00:37:57,440 --> 00:38:01,359
especially as various technologies come

00:38:00,400 --> 00:38:04,640
and go

00:38:01,359 --> 00:38:05,920
um you know employing experts in in each

00:38:04,640 --> 00:38:08,079
of those spaces

00:38:05,920 --> 00:38:09,359
and then just staying on top of it it

00:38:08,079 --> 00:38:12,480
it's uh

00:38:09,359 --> 00:38:14,480
seems not quite you know in terms of

00:38:12,480 --> 00:38:17,359
trying to provide business value

00:38:14,480 --> 00:38:18,240
um the the most important thing i i

00:38:17,359 --> 00:38:22,079
think the the

00:38:18,240 --> 00:38:23,040
the thing for for that that i'm hoping

00:38:22,079 --> 00:38:27,200
that we

00:38:23,040 --> 00:38:30,480
um put a lot of energy behind is um

00:38:27,200 --> 00:38:33,760
making it easy to try

00:38:30,480 --> 00:38:37,520
cf for kate's easy to try cube cf

00:38:33,760 --> 00:38:40,720
um that right now i imagine

00:38:37,520 --> 00:38:42,880
you can uh if given a cluster which a

00:38:40,720 --> 00:38:45,839
lot of developers and development teams

00:38:42,880 --> 00:38:47,839
are able to easily provision nowadays

00:38:45,839 --> 00:38:49,680
can you deploy cf or kate's do that can

00:38:47,839 --> 00:38:53,599
you deploy keep cf to that

00:38:49,680 --> 00:38:56,880
and then um and then with that

00:38:53,599 --> 00:38:57,440
take that those curated experiences and

00:38:56,880 --> 00:39:00,480
then

00:38:57,440 --> 00:39:04,240
have a an easy uh

00:39:00,480 --> 00:39:07,280
simple approach to get your source code

00:39:04,240 --> 00:39:09,920
uh to running um uh and

00:39:07,280 --> 00:39:10,320
and have a lot less that you're owning

00:39:09,920 --> 00:39:13,440
uh

00:39:10,320 --> 00:39:14,800
cognitively about uh how to run your own

00:39:13,440 --> 00:39:16,640
pass

00:39:14,800 --> 00:39:17,920
and so like as you pick and choose the

00:39:16,640 --> 00:39:20,880
different pieces that's

00:39:17,920 --> 00:39:21,760
that's great um that it's less of a

00:39:20,880 --> 00:39:23,119
magic box

00:39:21,760 --> 00:39:25,440
like the one of the complaints i've

00:39:23,119 --> 00:39:28,079
heard about cloud foundry is cf push is

00:39:25,440 --> 00:39:30,400
a little too magical in some ways

00:39:28,079 --> 00:39:31,359
and so now that they're more of the

00:39:30,400 --> 00:39:33,760
pieces

00:39:31,359 --> 00:39:34,480
can be decomposed and independently

00:39:33,760 --> 00:39:37,599
valuable

00:39:34,480 --> 00:39:39,200
people can more easily introspect and

00:39:37,599 --> 00:39:40,720
understand what's going on if they want

00:39:39,200 --> 00:39:43,200
to

00:39:40,720 --> 00:39:44,000
but but i think it's really important

00:39:43,200 --> 00:39:46,000
that that we

00:39:44,000 --> 00:39:49,280
as a community maintain that that

00:39:46,000 --> 00:39:52,960
simplified developer experience

00:39:49,280 --> 00:39:53,280
i i totally agree um but i i think

00:39:52,960 --> 00:39:55,359
they're

00:39:53,280 --> 00:39:56,320
like we have to distinguish three pieces

00:39:55,359 --> 00:39:59,359
here right so

00:39:56,320 --> 00:40:01,760
so for the for the actual developer i

00:39:59,359 --> 00:40:02,800
100 agree to everything that you just

00:40:01,760 --> 00:40:06,240
said

00:40:02,800 --> 00:40:07,119
um i think there can be a valuable

00:40:06,240 --> 00:40:10,000
debate about

00:40:07,119 --> 00:40:12,319
should we maybe open up a little bit

00:40:10,000 --> 00:40:13,760
more of configuration options

00:40:12,319 --> 00:40:16,079
you know just just sticking with the

00:40:13,760 --> 00:40:16,560
rbac uaa kind of example for someone

00:40:16,079 --> 00:40:19,440
like

00:40:16,560 --> 00:40:20,880
an orc manager like you know would i as

00:40:19,440 --> 00:40:23,520
an art manager maybe be

00:40:20,880 --> 00:40:24,800
able to to specify a higher level of

00:40:23,520 --> 00:40:27,040
object rules for my

00:40:24,800 --> 00:40:29,440
organization but not for the actual

00:40:27,040 --> 00:40:31,280
developer so so it's a different role

00:40:29,440 --> 00:40:34,560
and then the third one that then i think

00:40:31,280 --> 00:40:37,280
um threw into the mix here was

00:40:34,560 --> 00:40:38,319
you know new features like scale to zero

00:40:37,280 --> 00:40:42,240
and i think

00:40:38,319 --> 00:40:44,640
that is certainly something where

00:40:42,240 --> 00:40:46,079
we should not you know that we should

00:40:44,640 --> 00:40:49,680
adopt going forward

00:40:46,079 --> 00:40:51,359
that should not close our eyes on

00:40:49,680 --> 00:40:53,280
and how we're going to do it if we can

00:40:51,359 --> 00:40:54,880
do this with the same simplified user

00:40:53,280 --> 00:40:56,400
experience that cloud foundry has today

00:40:54,880 --> 00:40:59,839
then i think we are

00:40:56,400 --> 00:41:00,240
on the right track yeah i i guess i

00:40:59,839 --> 00:41:02,240
would

00:41:00,240 --> 00:41:03,680
would add to the conversation that

00:41:02,240 --> 00:41:05,839
probably like

00:41:03,680 --> 00:41:07,280
we're talking about different groups of

00:41:05,839 --> 00:41:10,640
developers so

00:41:07,280 --> 00:41:12,960
like i i recently um looked at

00:41:10,640 --> 00:41:13,760
the most recent kubecon recordings and

00:41:12,960 --> 00:41:16,640
like

00:41:13,760 --> 00:41:18,480
try to to identify the topics that that

00:41:16,640 --> 00:41:22,000
i'm actually interested in

00:41:18,480 --> 00:41:24,640
and like for many of the topics

00:41:22,000 --> 00:41:26,720
being quite technical like also compared

00:41:24,640 --> 00:41:28,640
to some of the cloud foundry users

00:41:26,720 --> 00:41:31,280
that that we have building business

00:41:28,640 --> 00:41:34,160
applications on top of a platform

00:41:31,280 --> 00:41:35,440
i basically found many of the talks too

00:41:34,160 --> 00:41:38,160
technical to to really

00:41:35,440 --> 00:41:38,800
like like spend half an hour 45 minutes

00:41:38,160 --> 00:41:41,280
to

00:41:38,800 --> 00:41:43,200
to watch these so but but at the same

00:41:41,280 --> 00:41:43,839
time i obviously realize that there's a

00:41:43,200 --> 00:41:46,400
big

00:41:43,839 --> 00:41:48,319
open source ecosystem of people who who

00:41:46,400 --> 00:41:51,040
want to go to kubecon and like

00:41:48,319 --> 00:41:52,640
watch all those talks so my basic

00:41:51,040 --> 00:41:54,400
question is like are we actually

00:41:52,640 --> 00:41:56,160
talking about the same groups of

00:41:54,400 --> 00:41:59,280
developers kind of

00:41:56,160 --> 00:42:02,319
enjoying like all all the

00:41:59,280 --> 00:42:04,720
freedom and and kind of um

00:42:02,319 --> 00:42:06,880
uh capabilities that the kubernetes

00:42:04,720 --> 00:42:08,960
offers versus the ones that that really

00:42:06,880 --> 00:42:11,200
enjoy the the sea of push experience on

00:42:08,960 --> 00:42:14,480
cloud foundry

00:42:11,200 --> 00:42:16,800
yeah i i'd add on to that with

00:42:14,480 --> 00:42:17,520
you know it's one thing to have

00:42:16,800 --> 00:42:20,079
knowledge

00:42:17,520 --> 00:42:22,560
of underlying system there's another to

00:42:20,079 --> 00:42:25,599
be responsible for taking care of it

00:42:22,560 --> 00:42:27,359
and i think that that's why the the cf

00:42:25,599 --> 00:42:29,760
experience the simplified

00:42:27,359 --> 00:42:30,800
you end user experience is important to

00:42:29,760 --> 00:42:33,839
maintain

00:42:30,800 --> 00:42:34,079
and not to get it too blurry like make

00:42:33,839 --> 00:42:36,720
it

00:42:34,079 --> 00:42:37,760
much more complex things like scaling to

00:42:36,720 --> 00:42:39,760
zero

00:42:37,760 --> 00:42:40,800
adoption of serverless in that ecosystem

00:42:39,760 --> 00:42:43,760
i think you can do

00:42:40,800 --> 00:42:45,119
without losing any of that however you

00:42:43,760 --> 00:42:47,280
know start to introduce

00:42:45,119 --> 00:42:48,880
like transparency to cube cuddle or

00:42:47,280 --> 00:42:51,280
other stuff like that

00:42:48,880 --> 00:42:52,560
i don't think that's good and you know

00:42:51,280 --> 00:42:55,839
i'll take the analogy

00:42:52,560 --> 00:42:57,760
in that um a lot of

00:42:55,839 --> 00:42:59,359
developers like to really know what's

00:42:57,760 --> 00:43:01,280
going on with their system be able to

00:42:59,359 --> 00:43:04,079
get hands on and get behind

00:43:01,280 --> 00:43:05,359
but when you want to be productive

00:43:04,079 --> 00:43:08,640
there's kind of a reason

00:43:05,359 --> 00:43:11,280
that that shiny fruit logo is

00:43:08,640 --> 00:43:12,560
common on all the laptops in all of

00:43:11,280 --> 00:43:15,680
these highly technical

00:43:12,560 --> 00:43:18,960
engineering conferences um

00:43:15,680 --> 00:43:20,960
you know you can go fully open with

00:43:18,960 --> 00:43:22,960
all of your devices but there is at some

00:43:20,960 --> 00:43:24,800
point where you want to say i want to

00:43:22,960 --> 00:43:27,760
have that access

00:43:24,800 --> 00:43:28,480
but actually from the end user point of

00:43:27,760 --> 00:43:32,319
view

00:43:28,480 --> 00:43:35,599
i want to just actually get stuff done

00:43:32,319 --> 00:43:38,079
um and that's what

00:43:35,599 --> 00:43:39,280
we really want to keep in that cloud

00:43:38,079 --> 00:43:40,560
foundry ecosystem

00:43:39,280 --> 00:43:42,079
it's about getting stuff done

00:43:40,560 --> 00:43:43,440
acknowledging that there's an entire

00:43:42,079 --> 00:43:45,200
operator experience

00:43:43,440 --> 00:43:46,480
and we are changing the operator

00:43:45,200 --> 00:43:48,240
experience around

00:43:46,480 --> 00:43:49,520
and we still want to make sure that for

00:43:48,240 --> 00:43:51,599
those people they really

00:43:49,520 --> 00:43:53,359
know all the nuts and bolts where all

00:43:51,599 --> 00:43:54,560
the lines cross so we can

00:43:53,359 --> 00:43:56,960
make sure you're they're comfortable

00:43:54,560 --> 00:43:59,119
with security and the various pieces

00:43:56,960 --> 00:44:00,480
but still have that simplified user

00:43:59,119 --> 00:44:02,640
experiences

00:44:00,480 --> 00:44:04,720
is very important i want to i would like

00:44:02,640 --> 00:44:07,200
to make sure we keep that

00:44:04,720 --> 00:44:08,160
it's an interesting conversation about

00:44:07,200 --> 00:44:10,720
developers

00:44:08,160 --> 00:44:11,920
and the things that they're interested

00:44:10,720 --> 00:44:14,240
in things that they want to

00:44:11,920 --> 00:44:15,760
focus in on i suppose that for the likes

00:44:14,240 --> 00:44:17,520
of us who are all dealing with

00:44:15,760 --> 00:44:18,240
infrastructure and platforms day in and

00:44:17,520 --> 00:44:20,079
day out

00:44:18,240 --> 00:44:21,920
we're most likely to be exposed to those

00:44:20,079 --> 00:44:23,680
developers who want to write all the

00:44:21,920 --> 00:44:26,480
ammo and pick all of the things from the

00:44:23,680 --> 00:44:29,040
cncf ecosystem to throw at that cluster

00:44:26,480 --> 00:44:31,040
and probably were maybe further away and

00:44:29,040 --> 00:44:31,760
and hear less noise from the developers

00:44:31,040 --> 00:44:34,160
who are just

00:44:31,760 --> 00:44:36,240
writing a java app in an enterprise or a

00:44:34,160 --> 00:44:36,560
python app or ruby app that just wants

00:44:36,240 --> 00:44:39,920
to

00:44:36,560 --> 00:44:42,079
get it up and running do you

00:44:39,920 --> 00:44:43,760
think that there is this is a question

00:44:42,079 --> 00:44:45,359
that i asked to you folks

00:44:43,760 --> 00:44:47,040
the last time we did this panel as a

00:44:45,359 --> 00:44:50,079
member of the audience

00:44:47,040 --> 00:44:51,040
um about cf push possibly being an

00:44:50,079 --> 00:44:53,920
anachronism

00:44:51,040 --> 00:44:55,920
do you think that there's a time when

00:44:53,920 --> 00:44:57,119
folks will not expect to use an

00:44:55,920 --> 00:44:59,920
imperative

00:44:57,119 --> 00:45:02,480
cli to interact with their platform and

00:44:59,920 --> 00:45:04,880
to deploy things and to configure spaces

00:45:02,480 --> 00:45:06,880
do you see that that's maybe a shift

00:45:04,880 --> 00:45:10,240
that will happen or is that maybe

00:45:06,880 --> 00:45:14,000
that kind of focusing on the

00:45:10,240 --> 00:45:14,000
one type of user above another

00:45:17,599 --> 00:45:23,839
i don't see it because i mean

00:45:21,200 --> 00:45:24,240
you know you argue some will say well

00:45:23,839 --> 00:45:26,480
yeah

00:45:24,240 --> 00:45:28,079
you get the the imperative cf push you

00:45:26,480 --> 00:45:29,760
you'll do it through some sort of good

00:45:28,079 --> 00:45:32,079
operations or a git push but you just

00:45:29,760 --> 00:45:35,359
change one cli for another

00:45:32,079 --> 00:45:36,800
um so

00:45:35,359 --> 00:45:39,359
and and again it's important to

00:45:36,800 --> 00:45:42,880
recognize one of the advantages

00:45:39,359 --> 00:45:46,000
yes there's a cli and an entire api

00:45:42,880 --> 00:45:47,760
that is extremely well integrated to you

00:45:46,000 --> 00:45:49,839
know you get your vs code your jenkins

00:45:47,760 --> 00:45:53,680
plugins you know whatever

00:45:49,839 --> 00:45:56,960
um and thus the design of the system

00:45:53,680 --> 00:46:00,160
scales to the different kinds of

00:45:56,960 --> 00:46:00,880
end users whether it's that you know new

00:46:00,160 --> 00:46:03,839
developer

00:46:00,880 --> 00:46:04,640
just trying to figure out their web app

00:46:03,839 --> 00:46:06,800
to

00:46:04,640 --> 00:46:08,880
the enterprise team where everything's

00:46:06,800 --> 00:46:11,839
highly tied into a ci

00:46:08,880 --> 00:46:13,920
but they still need separations of of

00:46:11,839 --> 00:46:15,680
spaces and to be separated from other

00:46:13,920 --> 00:46:17,280
orgs doing their own things

00:46:15,680 --> 00:46:18,720
or even be able to easily set up

00:46:17,280 --> 00:46:22,319
separate clusters

00:46:18,720 --> 00:46:24,480
um so i think

00:46:22,319 --> 00:46:26,400
you're you know you would be only

00:46:24,480 --> 00:46:29,839
dickering on terminology if you were to

00:46:26,400 --> 00:46:29,839
say you're trying to get away from that

00:46:30,000 --> 00:46:36,240
yeah i i i've known

00:46:33,440 --> 00:46:38,560
some um some folks i've talked to where

00:46:36,240 --> 00:46:42,000
they're like you know

00:46:38,560 --> 00:46:45,359
i can actually get basically a cf push

00:46:42,000 --> 00:46:46,880
via committing my code to my repo and

00:46:45,359 --> 00:46:49,119
then there are pipelines

00:46:46,880 --> 00:46:50,319
that will do things to get my code to

00:46:49,119 --> 00:46:52,640
production

00:46:50,319 --> 00:46:53,440
and you know a different team takes care

00:46:52,640 --> 00:46:57,040
of that

00:46:53,440 --> 00:46:58,319
and um i think that's that's fine and

00:46:57,040 --> 00:47:01,200
that works but it's also

00:46:58,319 --> 00:47:03,119
you have a team that is now uh

00:47:01,200 --> 00:47:04,079
maintaining and owning those pipelines

00:47:03,119 --> 00:47:07,119
and getting that to

00:47:04,079 --> 00:47:10,160
to production and so um

00:47:07,119 --> 00:47:12,640
you know where as a company

00:47:10,160 --> 00:47:14,960
does a company want to invest in in

00:47:12,640 --> 00:47:18,800
people maintaining this kind of bespoke

00:47:14,960 --> 00:47:21,359
pipelines um and

00:47:18,800 --> 00:47:22,559
as that progresses the things underneath

00:47:21,359 --> 00:47:25,440
having to change

00:47:22,559 --> 00:47:26,480
um and again that's like d do those

00:47:25,440 --> 00:47:29,200
folks have to

00:47:26,480 --> 00:47:29,920
keep on top of like new capabilities and

00:47:29,200 --> 00:47:32,240
new bugs

00:47:29,920 --> 00:47:33,520
it just looks like a lot of surface area

00:47:32,240 --> 00:47:36,559
to me if you're

00:47:33,520 --> 00:47:37,920
if if if that's the approach um

00:47:36,559 --> 00:47:40,160
and i think if if you're at a certain

00:47:37,920 --> 00:47:43,440
scale maybe that that makes sense but

00:47:40,160 --> 00:47:46,400
really um you know cf is is

00:47:43,440 --> 00:47:47,440
is an open source project and uh i think

00:47:46,400 --> 00:47:51,119
it's

00:47:47,440 --> 00:47:52,640
just by the day um and and by the

00:47:51,119 --> 00:47:54,480
time this this conference actually

00:47:52,640 --> 00:47:55,520
happens i think it'll be much more

00:47:54,480 --> 00:47:59,119
approachable

00:47:55,520 --> 00:48:02,079
um uh for for someone who's

00:47:59,119 --> 00:48:02,559
you know just wanting to to try it out

00:48:02,079 --> 00:48:05,440
and

00:48:02,559 --> 00:48:06,079
see like what could they defer to this

00:48:05,440 --> 00:48:09,280
experience

00:48:06,079 --> 00:48:12,640
as opposed to owning a complicated

00:48:09,280 --> 00:48:17,599
set of pipelines or deferring to a team

00:48:12,640 --> 00:48:17,599
of people to own a set of pipelines

00:48:17,760 --> 00:48:24,079
understood the earlier on

00:48:21,119 --> 00:48:26,160
uh we've got about uh seven minutes left

00:48:24,079 --> 00:48:27,680
um so we need to wrap up soon

00:48:26,160 --> 00:48:30,319
one of my subsequent questions so you

00:48:27,680 --> 00:48:32,000
can think about this in advance um

00:48:30,319 --> 00:48:34,319
and start thinking of answers was going

00:48:32,000 --> 00:48:36,240
to be when is it going to be appropriate

00:48:34,319 --> 00:48:37,200
for people to move to either cube cf for

00:48:36,240 --> 00:48:39,920
cfa cates

00:48:37,200 --> 00:48:41,760
but before we get there it's been

00:48:39,920 --> 00:48:45,040
mentioned by a couple of you folks

00:48:41,760 --> 00:48:46,839
about diego versus irini and the fact

00:48:45,040 --> 00:48:48,000
that cuba cf is still using diego by

00:48:46,839 --> 00:48:50,720
default

00:48:48,000 --> 00:48:52,640
what are the the drawbacks there is are

00:48:50,720 --> 00:48:55,599
there some things that irini doesn't do

00:48:52,640 --> 00:48:57,040
at the moment um that still need to be

00:48:55,599 --> 00:48:59,520
worked through are things that it will

00:48:57,040 --> 00:48:59,520
never do

00:49:00,839 --> 00:49:05,760
so the first drawback

00:49:03,839 --> 00:49:08,079
and i think actually simon because the

00:49:05,760 --> 00:49:11,599
ibm team has done a lot of this work is

00:49:08,079 --> 00:49:13,040
that diego is been extremely well

00:49:11,599 --> 00:49:16,319
hammered on

00:49:13,040 --> 00:49:18,960
um in terms of you know scalability

00:49:16,319 --> 00:49:20,319
and and all the various you know

00:49:18,960 --> 00:49:23,280
integral use cases

00:49:20,319 --> 00:49:24,000
are well known with diego and with irene

00:49:23,280 --> 00:49:27,119
that's

00:49:24,000 --> 00:49:28,960
that's new um irene brings

00:49:27,119 --> 00:49:30,880
greater levels of efficiency and

00:49:28,960 --> 00:49:31,920
incorporation with kubernetes that have

00:49:30,880 --> 00:49:33,920
brought up some actually

00:49:31,920 --> 00:49:35,839
oh this oh look what we can do now and

00:49:33,920 --> 00:49:38,960
things like that but those are

00:49:35,839 --> 00:49:42,160
still future looking and not

00:49:38,960 --> 00:49:43,920
today uh but i would

00:49:42,160 --> 00:49:45,520
like to see and as i've discussed with

00:49:43,920 --> 00:49:49,040
my team i'd like us to

00:49:45,520 --> 00:49:51,119
call diego deprecated at

00:49:49,040 --> 00:49:52,079
you know fully deprecated as of this

00:49:51,119 --> 00:49:56,480
conference

00:49:52,079 --> 00:49:56,480
with the focus being fully on irene

00:49:57,119 --> 00:50:00,800
i can just echo um what what jeff said

00:49:59,760 --> 00:50:02,880
so so i think the

00:50:00,800 --> 00:50:04,559
the major difference that i see it right

00:50:02,880 --> 00:50:07,760
now is is really scalability

00:50:04,559 --> 00:50:10,079
right i mean i i know that i can scale

00:50:07,760 --> 00:50:11,040
giggle and i mean burnt can also tell a

00:50:10,079 --> 00:50:14,079
story about that

00:50:11,040 --> 00:50:16,559
yeah probably equally good as i can i

00:50:14,079 --> 00:50:19,680
can scale a diego system today

00:50:16,559 --> 00:50:20,559
to thousands of um you know thousands of

00:50:19,680 --> 00:50:22,880
giganotes

00:50:20,559 --> 00:50:24,160
running you know hundreds of containers

00:50:22,880 --> 00:50:26,240
on each node and

00:50:24,160 --> 00:50:27,680
that just works like a charm there is no

00:50:26,240 --> 00:50:30,240
no problem with that

00:50:27,680 --> 00:50:31,680
um irene has yet to prove uh that

00:50:30,240 --> 00:50:33,440
they're gonna get there i'm pretty sure

00:50:31,680 --> 00:50:35,280
they do because we have a lot of smart

00:50:33,440 --> 00:50:38,400
people on the irani team right and

00:50:35,280 --> 00:50:40,319
um and we'll we'll get there um

00:50:38,400 --> 00:50:41,839
and and maybe we are even there we just

00:50:40,319 --> 00:50:44,880
don't know it yet um

00:50:41,839 --> 00:50:47,280
but uh the the evidence is not

00:50:44,880 --> 00:50:48,000
uh on the table um for that and i think

00:50:47,280 --> 00:50:50,240
that that's

00:50:48,000 --> 00:50:51,440
so at least at the superficial level the

00:50:50,240 --> 00:50:52,720
biggest uh

00:50:51,440 --> 00:50:54,640
difference and the biggest challenge

00:50:52,720 --> 00:50:57,760
that i see

00:50:54,640 --> 00:50:59,440
but actually like from from what what

00:50:57,760 --> 00:51:02,400
we've seen the

00:50:59,440 --> 00:51:02,960
kind of limiting factor at this point is

00:51:02,400 --> 00:51:05,040
actually

00:51:02,960 --> 00:51:06,640
less irene and probably also less

00:51:05,040 --> 00:51:10,079
kubernetes but

00:51:06,640 --> 00:51:12,319
like we've seen um

00:51:10,079 --> 00:51:14,079
certain behaviors in actually the the

00:51:12,319 --> 00:51:17,680
service mesh in in kind of

00:51:14,079 --> 00:51:19,680
how it creates roots how it uh kind of

00:51:17,680 --> 00:51:22,160
creates side cars how how long that

00:51:19,680 --> 00:51:23,920
takes and how well that scales

00:51:22,160 --> 00:51:27,520
that is at least currently the limiting

00:51:23,920 --> 00:51:29,680
factor again to to simon's point i think

00:51:27,520 --> 00:51:31,920
like people are looking into the topic

00:51:29,680 --> 00:51:33,760
both i would say from a cloud foundry

00:51:31,920 --> 00:51:35,200
perspective but then also from an istio

00:51:33,760 --> 00:51:37,280
perspective so i'm

00:51:35,200 --> 00:51:39,359
positive that that also there will be

00:51:37,280 --> 00:51:41,760
able to to actually push the limits

00:51:39,359 --> 00:51:42,480
but at this point at least as far as

00:51:41,760 --> 00:51:45,359
we've seen

00:51:42,480 --> 00:51:46,800
it's less like a container scheduling

00:51:45,359 --> 00:51:49,760
question right because

00:51:46,800 --> 00:51:50,000
ultimately kubernetes itself should also

00:51:49,760 --> 00:51:53,839
be

00:51:50,000 --> 00:51:56,960
able to to scale to to a decent size

00:51:53,839 --> 00:51:58,000
right and i think some of this is is a

00:51:56,960 --> 00:52:00,720
bit in terms of

00:51:58,000 --> 00:52:02,960
how how do you think about cloud foundry

00:52:00,720 --> 00:52:06,319
and how many instances of cloud foundry

00:52:02,960 --> 00:52:10,079
makes sense and you know for for i think

00:52:06,319 --> 00:52:13,359
um cf for cates and qcf

00:52:10,079 --> 00:52:17,760
they're much more approachable for

00:52:13,359 --> 00:52:20,720
a smaller organization like i i think um

00:52:17,760 --> 00:52:22,800
you could easily say today with cf for

00:52:20,720 --> 00:52:25,599
kate you can run a thousand apps

00:52:22,800 --> 00:52:26,640
and for for a little many small and

00:52:25,599 --> 00:52:30,319
medium businesses

00:52:26,640 --> 00:52:32,319
a thousand apps is plenty um

00:52:30,319 --> 00:52:35,200
you know so so certainly the kind of

00:52:32,319 --> 00:52:38,000
scale that ibm or sap

00:52:35,200 --> 00:52:38,720
um are looking to run is is maybe not

00:52:38,000 --> 00:52:41,760
common for

00:52:38,720 --> 00:52:45,680
for some some organizations

00:52:41,760 --> 00:52:48,160
and so then um you know maybe there are

00:52:45,680 --> 00:52:50,319
more cloud foundry instances that an uh

00:52:48,160 --> 00:52:52,559
a larger organization might run

00:52:50,319 --> 00:52:54,559
that they might more easily bring up and

00:52:52,559 --> 00:52:58,000
tear down which isn't to mean

00:52:54,559 --> 00:52:59,119
like i think we shouldn't continue to

00:52:58,000 --> 00:53:03,280
invest in in

00:52:59,119 --> 00:53:04,480
scaling um uh cf for kate's and qcf for

00:53:03,280 --> 00:53:07,520
that matter and there are

00:53:04,480 --> 00:53:08,800
investments as i understand it or hopes

00:53:07,520 --> 00:53:12,640
to be able to

00:53:08,800 --> 00:53:15,920
um speak to more

00:53:12,640 --> 00:53:19,280
multiple kubernetes clusters um

00:53:15,920 --> 00:53:20,400
those are other ways of increasing the

00:53:19,280 --> 00:53:22,640
the scale of

00:53:20,400 --> 00:53:23,680
how much a a single control plane could

00:53:22,640 --> 00:53:27,520
could manage

00:53:23,680 --> 00:53:29,680
but but i think um uh even today as

00:53:27,520 --> 00:53:32,240
cia for kate's hopefully by the time

00:53:29,680 --> 00:53:36,160
this talk goes up is is already 1.0

00:53:32,240 --> 00:53:38,960
um is is quite capable of supporting

00:53:36,160 --> 00:53:41,280
uh production workloads acknowledging

00:53:38,960 --> 00:53:44,640
it's a 1.0 so

00:53:41,280 --> 00:53:47,680
bug bug in issues uh welcome

00:53:44,640 --> 00:53:50,160
but uh but it'll be upgradable

00:53:47,680 --> 00:53:51,839
is is the goal there with with that 1.0

00:53:50,160 --> 00:53:54,960
release

00:53:51,839 --> 00:53:57,920
um and sorry we've

00:53:54,960 --> 00:53:59,680
got about despite being given a whopping

00:53:57,920 --> 00:54:00,880
55 minutes this time which we're very

00:53:59,680 --> 00:54:03,680
grateful for we're almost

00:54:00,880 --> 00:54:04,720
out of time so that was a great segue

00:54:03,680 --> 00:54:06,400
into

00:54:04,720 --> 00:54:08,839
when is it going to be ready for people

00:54:06,400 --> 00:54:11,520
to adopt these things qcf's already in

00:54:08,839 --> 00:54:14,000
use cfocates is going to be 1.0

00:54:11,520 --> 00:54:16,640
hopefully by the time this goes out

00:54:14,000 --> 00:54:17,359
are there any uh things that people

00:54:16,640 --> 00:54:19,200
should

00:54:17,359 --> 00:54:20,720
take into account when deciding whether

00:54:19,200 --> 00:54:23,760
they should make the switch

00:54:20,720 --> 00:54:25,520
in 20 seconds or less each when should

00:54:23,760 --> 00:54:27,040
people think about adopting cloud

00:54:25,520 --> 00:54:30,319
foundry on kubernetes

00:54:27,040 --> 00:54:33,359
uh jeff let's go to you first uh

00:54:30,319 --> 00:54:35,760
they it's it's already ready you know

00:54:33,359 --> 00:54:37,760
whether you want cube cf because you

00:54:35,760 --> 00:54:40,400
like want to be in production

00:54:37,760 --> 00:54:41,280
next month or whether you're thinking

00:54:40,400 --> 00:54:45,520
longer term

00:54:41,280 --> 00:54:45,520
so you'll look at cf for kate's

00:54:45,760 --> 00:54:50,480
you know the projects will merge at some

00:54:47,920 --> 00:54:53,920
sense and all the technical layers

00:54:50,480 --> 00:54:56,319
but it's already ready so take a look

00:54:53,920 --> 00:54:58,480
cool huey have you got anything had that

00:54:56,319 --> 00:55:02,640
in 20 seconds or less

00:54:58,480 --> 00:55:06,000
yes uh take a look um hopefully by now

00:55:02,640 --> 00:55:09,280
the cf for kates dot io site will be

00:55:06,000 --> 00:55:10,240
live uh we're trying to put up a site

00:55:09,280 --> 00:55:13,280
similar to the

00:55:10,240 --> 00:55:16,160
qcf uh project site so that'll be

00:55:13,280 --> 00:55:17,280
a lot easier to approach in a tutorial

00:55:16,160 --> 00:55:19,520
available there

00:55:17,280 --> 00:55:20,880
so i think folks should should start

00:55:19,520 --> 00:55:22,160
thinking about this if they're not

00:55:20,880 --> 00:55:25,599
thinking about it

00:55:22,160 --> 00:55:29,040
and um start giving us feedback um

00:55:25,599 --> 00:55:32,640
uh you know around what what you need

00:55:29,040 --> 00:55:35,760
to see um in order to to be successful

00:55:32,640 --> 00:55:36,559
moving forward you know is is there a a

00:55:35,760 --> 00:55:40,880
project

00:55:36,559 --> 00:55:43,760
that you'd like to see um you know have

00:55:40,880 --> 00:55:45,119
uh certified compatibility or is there a

00:55:43,760 --> 00:55:45,839
feature or capability that you're

00:55:45,119 --> 00:55:49,520
looking

00:55:45,839 --> 00:55:50,640
uh of to to move move up higher in

00:55:49,520 --> 00:55:53,119
priority so

00:55:50,640 --> 00:55:54,160
um or or is there a feature you'd like

00:55:53,119 --> 00:55:56,480
to contribute

00:55:54,160 --> 00:55:58,880
um all all of those things really

00:55:56,480 --> 00:56:02,240
welcome as as we go forward and

00:55:58,880 --> 00:56:04,720
um hit 1.0 for cf the cf for kate's

00:56:02,240 --> 00:56:08,319
project and as cube cf

00:56:04,720 --> 00:56:11,040
continues to be available in red

00:56:08,319 --> 00:56:11,040
cool simon

00:56:11,839 --> 00:56:15,359
like both ua and jeff said for normal

00:56:14,559 --> 00:56:17,359
reasonable

00:56:15,359 --> 00:56:19,920
sizes i think it's ready nothing to

00:56:17,359 --> 00:56:20,480
today if if you are running unreasonable

00:56:19,920 --> 00:56:22,640
sizes

00:56:20,480 --> 00:56:24,720
you might join burden myself in the next

00:56:22,640 --> 00:56:26,960
anonymous large scale cloud foundry user

00:56:24,720 --> 00:56:26,960
group

00:56:27,200 --> 00:56:31,040
but that one is not public so no i'm

00:56:30,319 --> 00:56:32,400
joking

00:56:31,040 --> 00:56:34,880
of course it's public but there's

00:56:32,400 --> 00:56:36,319
probably besides bernie myself and maybe

00:56:34,880 --> 00:56:38,960
a couple of other people there's

00:56:36,319 --> 00:56:39,359
no one has this problem um so everybody

00:56:38,960 --> 00:56:42,160
else

00:56:39,359 --> 00:56:43,680
go ahead and adopt burnt have you got

00:56:42,160 --> 00:56:44,000
anything to say on behalf of people that

00:56:43,680 --> 00:56:46,640
run

00:56:44,000 --> 00:56:47,440
unreasonably large cloud boundaries well

00:56:46,640 --> 00:56:50,240
not really

00:56:47,440 --> 00:56:52,240
uh probably in a different panel um but

00:56:50,240 --> 00:56:54,799
yeah to to your original question

00:56:52,240 --> 00:56:55,599
i think like completely echoing what

00:56:54,799 --> 00:56:57,839
folks have

00:56:55,599 --> 00:56:58,720
said before try it out as soon as you

00:56:57,839 --> 00:57:00,720
can

00:56:58,720 --> 00:57:01,920
if you find out that like there's still

00:57:00,720 --> 00:57:04,559
gaps please

00:57:01,920 --> 00:57:06,160
please report them via issues uh

00:57:04,559 --> 00:57:08,960
approach to the respective

00:57:06,160 --> 00:57:09,920
people and ideally if you can like try

00:57:08,960 --> 00:57:12,720
and

00:57:09,920 --> 00:57:13,599
fill those gaps and then contribute

00:57:12,720 --> 00:57:15,920
excellent

00:57:13,599 --> 00:57:16,960
right well thank you very much to our

00:57:15,920 --> 00:57:18,319
panel it's been an

00:57:16,960 --> 00:57:20,079
absolute pleasure and a privilege to

00:57:18,319 --> 00:57:22,000
speak to you all um i'd look forward to

00:57:20,079 --> 00:57:24,000
doing this again soon when cloud foundry

00:57:22,000 --> 00:57:27,440
and kubernetes is the new normal

00:57:24,000 --> 00:57:31,119
and yes thank you very much okay

00:57:27,440 --> 00:57:34,079
thank you see you in the q a

00:57:31,119 --> 00:57:36,799
yes q a there should be a q a now ask us

00:57:34,079 --> 00:57:36,799
lots of questions

00:57:38,720 --> 00:57:43,119
are we live can someone confirm that

00:57:40,640 --> 00:57:46,000
we're live

00:57:43,119 --> 00:57:47,359
it's that uh it's the first time i've

00:57:46,000 --> 00:57:48,720
actually seen it live so were we ever

00:57:47,359 --> 00:57:50,960
live

00:57:48,720 --> 00:57:51,839
yes i think we i think we were alive and

00:57:50,960 --> 00:57:55,119
then

00:57:51,839 --> 00:57:57,280
there was chatter about me and or

00:57:55,119 --> 00:57:59,359
us being afraid to answer daniel jones

00:57:57,280 --> 00:58:00,799
question which of course we're not we're

00:57:59,359 --> 00:58:04,079
not afraid

00:58:00,799 --> 00:58:09,839
um we actually answered them but but the

00:58:04,079 --> 00:58:09,839
fun part is they are lost

00:58:12,000 --> 00:58:15,359
because they're all gone no no they're

00:58:14,400 --> 00:58:18,720
they're in the answer

00:58:15,359 --> 00:58:20,880
tab um so we can uh

00:58:18,720 --> 00:58:22,640
i was trying to answer the the question

00:58:20,880 --> 00:58:24,880
about cr for kate's

00:58:22,640 --> 00:58:26,240
um is it still cf what's the the

00:58:24,880 --> 00:58:28,240
compatibility

00:58:26,240 --> 00:58:30,799
um like is it okay to break

00:58:28,240 --> 00:58:33,200
compatibility and like why yes it's okay

00:58:30,799 --> 00:58:34,960
to break compatibility sometimes we

00:58:33,200 --> 00:58:37,200
tried not to do it

00:58:34,960 --> 00:58:39,920
we have done it in the past when we went

00:58:37,200 --> 00:58:42,880
from deas to diego

00:58:39,920 --> 00:58:44,799
and we didn't bring cf files forward

00:58:42,880 --> 00:58:45,599
which is a feature that people really

00:58:44,799 --> 00:58:48,640
liked

00:58:45,599 --> 00:58:50,400
um and then eventually we implemented an

00:58:48,640 --> 00:58:52,079
alternative cfssh

00:58:50,400 --> 00:58:54,079
which didn't quite work for everyone

00:58:52,079 --> 00:58:57,359
either so still still

00:58:54,079 --> 00:59:00,559
i don't know um and uh

00:58:57,359 --> 00:59:03,520
but but i think with with route services

00:59:00,559 --> 00:59:04,000
um that's something that could be added

00:59:03,520 --> 00:59:07,440
later

00:59:04,000 --> 00:59:11,280
it's it's not um

00:59:07,440 --> 00:59:14,319
you know c for kate's is 1.0 cfssh

00:59:11,280 --> 00:59:17,359
doesn't work yet also on the roadmap

00:59:14,319 --> 00:59:18,240
so i'm so it's not to say that it won't

00:59:17,359 --> 00:59:20,880
be there later

00:59:18,240 --> 00:59:21,440
uh but as far as like what what drives

00:59:20,880 --> 00:59:24,880
this

00:59:21,440 --> 00:59:27,280
what is certified cf that's something

00:59:24,880 --> 00:59:28,000
we as a group and community need to talk

00:59:27,280 --> 00:59:31,680
about

00:59:28,000 --> 00:59:34,960
um and i think that i

00:59:31,680 --> 00:59:37,119
was prodding um troy like

00:59:34,960 --> 00:59:38,799
troy wants to write up a proposal and

00:59:37,119 --> 00:59:39,520
i'm encouraging him to write up a

00:59:38,799 --> 00:59:42,640
proposal

00:59:39,520 --> 00:59:45,680
so we can talk talk through that um and

00:59:42,640 --> 00:59:49,280
and poke fun at it and or agree with it

00:59:45,680 --> 00:59:49,280
so long-winded answer there

00:59:50,960 --> 00:59:54,400
um and then there is a question

00:59:55,440 --> 01:00:01,839
yeah which one was that

00:59:58,720 --> 01:00:01,839
uh the hardening one

01:00:02,160 --> 01:00:08,240
yeah the years of hardening so

01:00:05,200 --> 01:00:11,520
um this is about

01:00:08,240 --> 01:00:13,760
the the heritage uh the

01:00:11,520 --> 01:00:16,160
there is a bit of a shared although

01:00:13,760 --> 01:00:19,440
separate heritage for qcf and c

01:00:16,160 --> 01:00:23,119
for kate's and

01:00:19,440 --> 01:00:26,640
they're they're not as mature from

01:00:23,119 --> 01:00:28,720
the the years and and scale systems

01:00:26,640 --> 01:00:29,680
and variety of systems that they've been

01:00:28,720 --> 01:00:32,799
run on

01:00:29,680 --> 01:00:35,520
um but uh you know as we mentioned

01:00:32,799 --> 01:00:36,799
in in the panel the that qcf does have

01:00:35,520 --> 01:00:40,839
production customers

01:00:36,799 --> 01:00:43,680
on it um from susan ibm's point of view

01:00:40,839 --> 01:00:47,040
and there but

01:00:43,680 --> 01:00:48,720
again those are on diego um

01:00:47,040 --> 01:00:50,480
and there's you know special handling

01:00:48,720 --> 01:00:53,599
there that is not the same

01:00:50,480 --> 01:00:54,319
is as true for irene though we're

01:00:53,599 --> 01:00:57,359
pushing that

01:00:54,319 --> 01:00:59,200
in the new cube cf release and of course

01:00:57,359 --> 01:01:02,319
that's the only option

01:00:59,200 --> 01:01:03,599
in the the cf4k8 side uh so there's a

01:01:02,319 --> 01:01:06,640
lot of work around

01:01:03,599 --> 01:01:09,680
really irene being hardened out

01:01:06,640 --> 01:01:12,400
and scaled out and

01:01:09,680 --> 01:01:13,200
for going on there so it is fast-paced

01:01:12,400 --> 01:01:15,359
evolution

01:01:13,200 --> 01:01:17,920
uh there's a lot of code sharing being

01:01:15,359 --> 01:01:20,480
done between cfrks and cubecf

01:01:17,920 --> 01:01:22,000
so they will eventually merge to one

01:01:20,480 --> 01:01:25,119
canonical mature

01:01:22,000 --> 01:01:27,680
cloud foundry on kubernetes

01:01:25,119 --> 01:01:28,319
and maybe to to add to that uh in in

01:01:27,680 --> 01:01:31,359
terms of

01:01:28,319 --> 01:01:32,480
cf4k i hear that like there's scale

01:01:31,359 --> 01:01:35,599
testing going on

01:01:32,480 --> 01:01:38,960
in a fairly large cooperation

01:01:35,599 --> 01:01:41,200
and like only then will we release 1.0

01:01:38,960 --> 01:01:42,880
so probably that's that's another proof

01:01:41,200 --> 01:01:47,040
point that we're

01:01:42,880 --> 01:01:50,559
looking into the maturity topic

01:01:47,040 --> 01:01:52,319
yes the the project cares so much so

01:01:50,559 --> 01:01:55,440
that even for a 1.0

01:01:52,319 --> 01:01:57,440
for an open source project there's some

01:01:55,440 --> 01:01:59,039
scale testing going on

01:01:57,440 --> 01:02:06,319
which gives me another action item to

01:01:59,039 --> 01:02:09,039
follow up right after this

01:02:06,319 --> 01:02:11,599
all right um i don't see any other

01:02:09,039 --> 01:02:11,599
questions

01:02:12,720 --> 01:02:20,960
oh i i guess folks didn't even remember

01:02:15,920 --> 01:02:22,319
cf files was a thing

01:02:20,960 --> 01:02:24,319
yeah i didn't see any other questions

01:02:22,319 --> 01:02:26,480
anymore i hope that by now

01:02:24,319 --> 01:02:29,680
every question has been answered and

01:02:26,480 --> 01:02:31,599
everybody was able to hear it because

01:02:29,680 --> 01:02:33,520
that's still not entirely clear i think

01:02:31,599 --> 01:02:36,799
given that we didn't know that we are

01:02:33,520 --> 01:02:39,200
not not not hearable but in case

01:02:36,799 --> 01:02:40,880
um your question is not answered or you

01:02:39,200 --> 01:02:42,559
will not be able to hear it be so kind

01:02:40,880 --> 01:02:44,400
that just

01:02:42,559 --> 01:02:46,480
reach out to any one of us on the panel

01:02:44,400 --> 01:02:47,440
and we'll be very happy to answer that

01:02:46,480 --> 01:02:50,720
offline

01:02:47,440 --> 01:02:52,400
yes and and you know try out tier 4 kids

01:02:50,720 --> 01:02:55,920
try out cube cf

01:02:52,400 --> 01:02:59,520
um they're they're all ready for

01:02:55,920 --> 01:03:02,720
feedback and praises and

01:02:59,520 --> 01:03:03,680
eggs thrown and uh we're ready for

01:03:02,720 --> 01:03:05,680
feedback

01:03:03,680 --> 01:03:07,440
we have one more question how long has

01:03:05,680 --> 01:03:11,119
the wash based here how long will the

01:03:07,440 --> 01:03:11,119
bosch base safe will be supported

01:03:12,559 --> 01:03:19,039
well i think um

01:03:16,799 --> 01:03:20,160
i i think that'll be if you know a few

01:03:19,039 --> 01:03:23,760
years at least

01:03:20,160 --> 01:03:26,559
um there are you know some significant

01:03:23,760 --> 01:03:27,440
uh large corporations that that care

01:03:26,559 --> 01:03:30,640
about

01:03:27,440 --> 01:03:34,400
customers running um

01:03:30,640 --> 01:03:37,839
running uh the four vms version um

01:03:34,400 --> 01:03:41,280
but details i think uh that's

01:03:37,839 --> 01:03:43,039
that's to be discussed right like um

01:03:41,280 --> 01:03:46,160
the bosch team is working on a bionic

01:03:43,039 --> 01:03:47,039
stem cell and i hear some some folks at

01:03:46,160 --> 01:03:50,799
sap are

01:03:47,039 --> 01:03:53,440
helping to test it out um again thanks

01:03:50,799 --> 01:03:53,440
thanks safe

01:03:55,200 --> 01:04:02,079
um and so i uh

01:03:58,319 --> 01:04:04,480
eagerly awaiting to see that um

01:04:02,079 --> 01:04:06,319
reach official beta and then hopefully

01:04:04,480 --> 01:04:09,839
get to a 1.0 as well

01:04:06,319 --> 01:04:13,200
so that um folks can start to migrate to

01:04:09,839 --> 01:04:15,440
that before april

01:04:13,200 --> 01:04:17,599
and we have one more which is at the

01:04:15,440 --> 01:04:19,280
time when kate's introducing some

01:04:17,599 --> 01:04:21,280
confusion over the road map in

01:04:19,280 --> 01:04:23,440
of pass in general do we really have the

01:04:21,280 --> 01:04:25,440
luxury to be going two separate paths

01:04:23,440 --> 01:04:27,760
for cf and kubernetes

01:04:25,440 --> 01:04:30,079
and i think i'm gonna i'm gonna take the

01:04:27,760 --> 01:04:32,079
liberty to answers i i think we we

01:04:30,079 --> 01:04:34,640
kind of hopefully kind of answered that

01:04:32,079 --> 01:04:37,599
in the in the original panel already

01:04:34,640 --> 01:04:39,520
um so the short answer is i don't think

01:04:37,599 --> 01:04:42,000
we have the luxury in the long term

01:04:39,520 --> 01:04:42,799
right uh for sure not like i i think we

01:04:42,000 --> 01:04:45,520
have to

01:04:42,799 --> 01:04:47,280
uh define some kind of a rope how we are

01:04:45,520 --> 01:04:51,119
converging cf for kids and

01:04:47,280 --> 01:04:53,280
and um coupe cf however

01:04:51,119 --> 01:04:54,400
given the different design points on

01:04:53,280 --> 01:04:55,920
where we're starting

01:04:54,400 --> 01:04:57,839
right you know one starting more on the

01:04:55,920 --> 01:04:59,920
green field and one starting more on

01:04:57,839 --> 01:05:00,880
um you know coming from a bosch legacy

01:04:59,920 --> 01:05:03,440
so to speak

01:05:00,880 --> 01:05:04,480
um i think it's it's it's a very natural

01:05:03,440 --> 01:05:05,680
starting point

01:05:04,480 --> 01:05:08,880
at the moment to have these two

01:05:05,680 --> 01:05:11,280
distributions but going forward clearly

01:05:08,880 --> 01:05:13,119
there should only be one like i don't

01:05:11,280 --> 01:05:14,079
think we want to make nobody here on the

01:05:13,119 --> 01:05:16,160
panel um

01:05:14,079 --> 01:05:17,760
or even anywhere else in the industry

01:05:16,160 --> 01:05:19,920
hopefully that's to maintain

01:05:17,760 --> 01:05:22,480
these two streams going forward for a

01:05:19,920 --> 01:05:24,880
longer period of time

01:05:22,480 --> 01:05:25,599
yeah i think the i mean the other point

01:05:24,880 --> 01:05:27,280
is that

01:05:25,599 --> 01:05:28,720
you when you're looking at it again so

01:05:27,280 --> 01:05:30,720
cube cf is coming from

01:05:28,720 --> 01:05:32,079
the maintaining compatibility you know

01:05:30,720 --> 01:05:35,680
you still do have

01:05:32,079 --> 01:05:39,520
cf ssh working and such whereas

01:05:35,680 --> 01:05:41,839
c for cates is asking the questions

01:05:39,520 --> 01:05:43,280
around compatibility willing to break

01:05:41,839 --> 01:05:47,200
that compatibility

01:05:43,280 --> 01:05:48,319
we as uh you know a core group of people

01:05:47,200 --> 01:05:50,559
need to ask

01:05:48,319 --> 01:05:51,680
which parts of those compatibility need

01:05:50,559 --> 01:05:53,599
to be maintained need to be

01:05:51,680 --> 01:05:56,640
re-implemented etc

01:05:53,599 --> 01:06:00,000
before you can finally merge on a

01:05:56,640 --> 01:06:02,640
singular uh solution and

01:06:00,000 --> 01:06:04,319
and yeah there's a lot of attempts a lot

01:06:02,640 --> 01:06:08,240
of people are trying to reinvent

01:06:04,319 --> 01:06:10,480
paths and in the kubernetes space and

01:06:08,240 --> 01:06:10,480
uh

01:06:11,680 --> 01:06:21,119
they still struggle so

01:06:18,079 --> 01:06:22,400
all right um i don't i i wonder if we're

01:06:21,119 --> 01:06:32,640
over our 10-minute

01:06:22,400 --> 01:06:35,839
allotted slot um

01:06:32,640 --> 01:06:36,400
yeah or do we save that for next time i

01:06:35,839 --> 01:06:38,880
i i

01:06:36,400 --> 01:06:40,160
will save it for next time um so thanks

01:06:38,880 --> 01:06:43,440
everybody for

01:06:40,160 --> 01:06:45,520
for attending um and again

01:06:43,440 --> 01:06:47,520
um the office still holds if you have

01:06:45,520 --> 01:06:50,640
any more questions to the panelists

01:06:47,520 --> 01:06:51,599
feel free to reach out on slack here in

01:06:50,640 --> 01:06:53,359
the chat

01:06:51,599 --> 01:06:54,960
whatever channel you feel appropriate

01:06:53,359 --> 01:06:58,240
and we'll be happy to

01:06:54,960 --> 01:07:01,839
serve thank you

01:06:58,240 --> 01:07:01,839

YouTube URL: https://www.youtube.com/watch?v=En3-Ih_WYik


